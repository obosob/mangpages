.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5160DELTA 1"
.TH PERL5160DELTA 1 "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5160delta \- what tha fuck is freshly smoked up fo' perl v5.16.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document raps bout differences between tha 5.14.0 release and
the 5.16.0 release.
.PP
If yo ass is upgradin from a earlier release like fuckin 5.12.0, first read
perl5140delta, which raps bout differences between 5.12.0 and
5.14.0.
.PP
Some bug fixes up in dis release done been backported ta later
releasez of 5.14.x.  Those is indicated wit tha 5.14.x version in
parentheses.
.SH "Notice"
.IX Header "Notice"
With tha release of Perl 5.16.0, tha 5.12.x seriez of releases is now up of
its support period. Y'all KNOW dat shit, muthafucka!  There may be future 5.12.x releases yo, but only up in the
event of a cold-ass lil critical securitizzle issue.  Userz of Perl 5.12 or earlier should
consider upgradin ta a mo' recent release of Perl.
.PP
This policy is busted lyrics bout up in pimped outa detail in
perlpolicy.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.ie n .SS """use \fIVERSION\fP"""
.el .SS "\f(CWuse \fP\f(CIVERSION\fP\f(CW\fP"
.IX Subsection "use VERSION"
Az of dis release, version declarations like \f(CW\*(C`use v5.16\*(C'\fR now disable
all features before enablin tha freshly smoked up feature bundle.  This means that
the followin holdz true:
.PP
.Vb 4
\&    use 5.016;
\&    # only 5.16 features enabled here
\&    use 5.014;
\&    # only 5.14 features enabled here (not 5.16)
.Ve
.PP
\&\f(CW\*(C`use v5.12\*(C'\fR n' higher continue ta enable strict yo, but explicit \f(CW\*(C`use
strict\*(C'\fR n' \f(CW\*(C`no strict\*(C'\fR now override tha version declaration, even
when they come first:
.PP
.Vb 3
\&    no strict;
\&    use 5.012;
\&    # no strict here
.Ve
.PP
There be a freshly smoked up \*(L":default\*(R" feature bundle dat represents tha set of
features enabled before any version declaration or \f(CW\*(C`use feature\*(C'\fR has
been seen. I aint talkin' bout chicken n' gravy biatch.  Version declarations below 5.10 now enable tha \*(L":default\*(R"
feature set.  This do not straight-up chizzle tha behavior of \f(CW\*(C`use
v5.8\*(C'\fR, cuz features added ta tha \*(L":default\*(R" set is dem dat were
traditionally enabled by default, before they could be turned off.
.PP
\&\f(CW\*(C`no feature\*(C'\fR now resets ta tha default feature set.  To disable all
features (which is likely ta be a pimpin' special-purpose request, since
it presumably won't match any named set of semantics) you can now  
write \f(CW\*(C`no feature \*(Aq:all\*(Aq\*(C'\fR.
.PP
\&\f(CW$[\fR is now disabled under \f(CW\*(C`use v5.16\*(C'\fR.  It be part of tha default
feature set n' can be turned on or off explicitly wit \f(CW\*(C`use feature
\&\*(Aqarray_base\*(Aq\*(C'\fR.
.ie n .SS """_\|_SUB_\|_"""
.el .SS "\f(CW_\|_SUB_\|_\fP"
.IX Subsection "__SUB__"
Da freshly smoked up \f(CW\*(C`_\|_SUB_\|_\*(C'\fR token, available under tha \f(CW\*(C`current_sub\*(C'\fR feature
(see feature) or \f(CW\*(C`use v5.16\*(C'\fR, returns a reference ta tha current
subroutine, makin it easier ta write recursive closures.
.SS "New n' Improved Built-ins"
.IX Subsection "New n' Improved Built-ins"
\fIMo' consistent \f(CI\*(C`eval\*(C'\fI\fR
.IX Subsection "Mo' consistent eval"
.PP
Da \f(CW\*(C`eval\*(C'\fR operator sometimes treats a strang argument as a sequence of
charactas n' sometimes as a sequence of bytes, dependin on the
internal encoding.  Da internal encodin aint supposed ta make any
difference yo, but there is code dat relies on dis inconsistency.
.PP
Da freshly smoked up \f(CW\*(C`unicode_eval\*(C'\fR n' \f(CW\*(C`evalbytes\*(C'\fR features (enabled under \f(CW\*(C`use
5.16.0\*(C'\fR) resolve all dis bullshit.  Da \f(CW\*(C`unicode_eval\*(C'\fR feature causes \f(CW\*(C`eval
$string\*(C'\fR ta treat tha strang always as Unicode.  Da \f(CW\*(C`evalbytes\*(C'\fR
features serves up a gangbangin' function, itself called \f(CW\*(C`evalbytes\*(C'\fR, which
evaluates its argument always as a strang of bytes.
.PP
These features also fix odditizzles wit source filtas leakin ta outer
dynamic scopes.
.PP
See feature fo' mo' detail.
.PP
\fI\f(CI\*(C`substr\*(C'\fI lvalue revamp\fR
.IX Subsection "substr lvalue revamp"
.PP
When \f(CW\*(C`substr\*(C'\fR is called up in lvalue or potential lvalue context wit two
or three arguments, a special lvalue scalar is returned dat modifies
the original gangsta strang (the first argument) when assigned to.
.PP
Previously, tha offsets (the second n' third arguments) passed to
\&\f(CW\*(C`substr\*(C'\fR would be converted immediately ta match tha string, negative
offsets bein translated ta positizzle n' offsets beyond tha end of the
strin bein truncated.
.PP
Now, tha offsets is recorded without modification up in tha special
lvalue scalar dat is returned, n' tha original gangsta strang aint even
looked at by \f(CW\*(C`substr\*(C'\fR itself yo, but only when tha returned lvalue is
read or modified.
.PP
These chizzlez result up in a incompatible chizzle:
.PP
If tha original gangsta strang chizzlez length afta tha call ta \f(CW\*(C`substr\*(C'\fR but
before assignment ta its return value, wack offsets will remember
their posizzle from tha end of tha string, affectin code like this:
.PP
.Vb 5
\&    mah $strin = "string";
\&    mah $lvalue = \esubstr $string, \-4, 2;
\&    print $$lvalue, "\en"; # prints "ri"
\&    $strin = "bailin twine";
\&    print $$lvalue, "\en"; # prints "wi"; used ta print "il"
.Ve
.PP
Da same thang happens wit a omitted third argument.  Da returned
lvalue will always extend ta tha end of tha string, even if tha string
becomes longer.
.PP
Since dis chizzle also allowed nuff bugs ta be fixed (see
"Da \f(CW\*(C`substr\*(C'\fR operator"), n' since tha behavior
of wack offsets has never been specified, the
change was deemed acceptable.
.PP
\fIReturn value of \f(CI\*(C`tied\*(C'\fI\fR
.IX Subsection "Return value of tied"
.PP
Da value returned by \f(CW\*(C`tied\*(C'\fR on a tied variable is now tha actual
scalar dat holdz tha object ta which tha variable is tied. Y'all KNOW dat shit, muthafucka!  This
lets tizzles be weakened wit \f(CW\*(C`Scalar::Util::weaken(tied
$tied_variable)\*(C'\fR.
.SS "Unicode Support"
.IX Subsection "Unicode Support"
\fISupports (\fIalmost\fI) Unicode 6.1\fR
.IX Subsection "Supports (almost) Unicode 6.1"
.PP
Besides tha addizzle of whole freshly smoked up scripts, n' freshly smoked up charactas in
existin scripts, dis freshly smoked up version of Unicode, as always, make some
changes ta existin characters.  One chizzle dat may trip up some
applications is dat tha General Category of two charactas up in the
Latin\-1 range, \s-1PILCROW SIGN\s0 n' \s-1SECTION SIGN,\s0 has been chizzled from
Other_Symbol ta Other_Punctuation. I aint talkin' bout chicken n' gravy biatch.  Da same chizzle has been made for
a characta up in each of Tibetan, Ethiopic, n' Aegean.
Da code points U+3248..U+324F (\s-1CIRCLED NUMBER TEN ON BLACK SQUARE\s0
all up in \s-1CIRCLED NUMBER EIGHTY ON BLACK SQUARE\s0) have had they General
Category chizzled from Other_Symbol ta Other_Numeric.  Da Line Break
property has chizzlez fo' Hebrew n' Japanese; n' cuz of
other chizzlez up in 6.1, tha Perl regular expression construct \f(CW\*(C`\eX\*(C'\fR now
works differently fo' some charactas up in Thai n' Lao.
.PP
New aliases (synonyms) done been defined fo' nuff property joints;
these, along wit tha previously existin ones, is all cross-indexed in
perluniprops.
.PP
Da return value of \f(CW\*(C`charnames::viacode()\*(C'\fR be affected by other
changes:
.PP
.Vb 10
\& Code point      Oldskool Name             New Name
\&   U+000A    LINE FEED (LF)        LINE FEED
\&   U+000C    FORM FEED (FF)        FORM FEED
\&   U+000D    CARRIAGE RETURN (CR)  CARRIAGE RETURN
\&   U+0085    NEXT LINE (NEL)       NEXT LINE
\&   U+008E    SINGLE\-SHIFT 2        SINGLE\-SHIFT\-2
\&   U+008F    SINGLE\-SHIFT 3        SINGLE\-SHIFT\-3
\&   U+0091    PRIVATE USE 1         PRIVATE USE\-1
\&   U+0092    PRIVATE USE 2         PRIVATE USE\-2
\&   U+2118    SCRIPT CAPITAL P      WEIERSTRASS ELLIPTIC FUNCTION
.Ve
.PP
Perl will accept any of these names as input yo, but
\&\f(CW\*(C`charnames::viacode()\*(C'\fR now returns tha freshly smoked up name of each pair. Shiiit, dis aint no joke.  The
change fo' U+2118 is considered by Unicode ta be a cold-ass lil erection, dat is
the original gangsta name was a gangbangin' fuck up (but again, it will remain forever valid
to use it ta refer ta U+2118).  But most of these chizzlez is the
fallout of tha fuck up Unicode 6.0 made up in namin a cold-ass lil characta used in
Japanese beepers ta be \*(L"\s-1BELL\*(R",\s0 which conflicts wit tha longstanding
industry use of (and Unicodez recommendation ta use) dat name
to mean tha \s-1ASCII\s0 control characta at U+0007.  Therefore, dat name
has been deprecated up in Perl since v5.14, n' any use of it will raise a
warnin message (unless turned off).  Da name \*(L"\s-1ALERT\*(R"\s0 is now the
preferred name fo' dis code point, wit \*(L"\s-1BEL\*(R"\s0 a aaight short
form.  Da name fo' tha freshly smoked up cell beeper character, at code point U+1F514,
remains undefined up in dis version of Perl (hence our phat asses don't 
implement like all of Unicode 6.1) yo, but startin up in v5.18, \s-1BELL\s0 will mean
this character, n' not U+0007.
.PP
Unicode has taken steps ta make shizzle dat dis sort of fuck up do not
happen again. I aint talkin' bout chicken n' gravy biatch.  Da Standard now includes all generally accepted
names n' abbreviations fo' control characters, whereas previously it
didn't (though there was recommended names fo' most of them, which Perl
used).  This means dat most of dem recommended names is now
officially up in tha Standard. Y'all KNOW dat shit, muthafucka!  Unicode did not recommend names fo' the
four code points listed above between U+008E n' U+008F, n' in
standardizin dem Unicode subtly chizzled tha names dat Perl had
previously given them, by replacin tha final blank up in each name by a
hyphen. I aint talkin' bout chicken n' gravy biatch.  Unicode also officially accepts names dat Perl had deprecated,
like fuckin \s-1FILE SEPARATOR. \s0 Now tha only deprecated name is \s-1BELL.\s0
Finally, Perl now uses tha freshly smoked up straight-up legit names instead of tha old
(now considered obsolete) names fo' tha straight-up original gangsta four code points up in the
list above (the ones which have tha parentheses up in them).
.PP
Now dat tha names done been placed up in tha Unicode standard, these kinds
of chizzlez should not happen again, though erections, like fuckin to
U+2118, is still possible.
.PP
Unicode also added some name abbreviations, which Perl now accepts:
\&\s-1SP\s0 fo' \s-1SPACE\s0;
\&\s-1TAB\s0 fo' \s-1CHARACTER TABULATION\s0;
\&\s-1NEW LINE, END OF LINE, NL,\s0 n' \s-1EOL\s0 fo' \s-1LINE FEED\s0;
LOCKING-SHIFT \s-1ONE\s0 fo' \s-1SHIFT OUT\s0;
LOCKING-SHIFT \s-1ZERO\s0 fo' \s-1SHIFT IN\s0;
and \s-1ZWNBSP\s0 fo' \s-1ZERO WIDTH\s0 NO-BREAK \s-1SPACE.\s0
.PP
Mo' details on dis version of Unicode is provided in
<http://www.unicode.org/versions/Unicode6.1.0/>.
.PP
\fI\f(CI\*(C`use charnames\*(C'\fI is no longer needed fo' \f(CI\*(C`\eN{\f(CIname\f(CI}\*(C'\fI\fR
.IX Subsection "use charnames is no longer needed fo' N{name}"
.PP
When \f(CW\*(C`\eN{\f(CIname\f(CW}\*(C'\fR is encountered, tha \f(CW\*(C`charnames\*(C'\fR module is now
automatically loaded when needed as if tha \f(CW\*(C`:full\*(C'\fR n' \f(CW\*(C`:short\*(C'\fR
options had been specified. Y'all KNOW dat shit, muthafucka!  See charnames fo' mo' shiznit.
.PP
\fI\f(CI\*(C`\eN{...}\*(C'\fI can now have Unicode loose name matching\fR
.IX Subsection "N{...} can now have Unicode loose name matching"
.PP
This is busted lyrics bout up in tha \f(CW\*(C`charnames\*(C'\fR item in
\&\*(L"Updated Modulez n' Pragmata\*(R" below.
.PP
\fIUnicode Symbol Names\fR
.IX Subsection "Unicode Symbol Names"
.PP
Perl now has proper support fo' Unicode up in symbol names.  It used ta be
that \f(CW\*(C`*{$foo}\*(C'\fR would ignore tha internal \s-1UTF8\s0 flag n' use tha bytes of
the underlyin representation ta look up tha symbol.  That meant that
\&\f(CW\*(C`*{"\ex{100}"}\*(C'\fR n' \f(CW\*(C`*{"\exc4\ex80"}\*(C'\fR would return tha same thang.  All
these partz of Perl done been fixed ta account fo' Unicode:
.IP "\(bu" 4
Method names (includin dem passed ta \f(CW\*(C`use overload\*(C'\fR)
.IP "\(bu" 4
Typeglob names (includin namez of variables, subroutines, n' filehandles)
.IP "\(bu" 4
Package names
.IP "\(bu" 4
\&\f(CW\*(C`goto\*(C'\fR
.IP "\(bu" 4
Symbolic dereferencing
.IP "\(bu" 4
Second argument ta \f(CW\*(C`bless()\*(C'\fR n' \f(CW\*(C`tie()\*(C'\fR
.IP "\(bu" 4
Return value of \f(CW\*(C`ref()\*(C'\fR
.IP "\(bu" 4
Subroutine prototypes
.IP "\(bu" 4
Attributes
.IP "\(bu" 4
Various warnings n' error lyrics dat mention variable names or joints,
methods, etc.
.PP
In addition, a parsin bug has been fixed dat prevented \f(CW\*(C`*{e\*'}\*(C'\fR from
implicitly quotin tha name yo, but instead interpreted it as \f(CW\*(C`*{+e\*'}\*(C'\fR, which
would cause a strict violation.
.PP
\&\f(CW\*(C`*{"*a::b"}\*(C'\fR automatically strips off tha * if it is followed by a \s-1ASCII\s0
letter n' shit.  That has been extended ta all Unicode identifier characters.
.PP
One-characta non-ASCII non-punctuation variablez (like \f(CW\*(C`$e\*'\*(C'\fR) is now
subject ta \*(L"Used only once\*(R" warnings.  They used ta be exempt, as they
were treated as punctuation variables.
.PP
Also, single-characta Unicode punctuation variablez (like \f(CW$X\fR) is now
supported [perl #69032].
.PP
\fIImproved mobilitizzle ta mix localez n' Unicode, includin \s-1UTF\-8\s0 locales\fR
.IX Subsection "Improved mobilitizzle ta mix localez n' Unicode, includin UTF-8 locales"
.PP
An optionizzle parameta has been added ta \f(CW\*(C`use locale\*(C'\fR
.PP
.Vb 1
\& use locale \*(Aq:not_characters\*(Aq;
.Ve
.PP
which  drops some lyrics ta Perl ta use all but tha \f(CW\*(C`LC_CTYPE\*(C'\fR n' \f(CW\*(C`LC_COLLATE\*(C'\fR
portionz of tha current locale.  Instead, tha characta set be assumed
to be Unicode.  This lets localez n' Unicode be seamlessly mixed,
includin tha mo' n' mo' n' mo' frequent \s-1UTF\-8\s0 locales.  When rockin this
hybrid form of locales, tha \f(CW\*(C`:locale\*(C'\fR layer ta tha open pragma can
be used ta intercourse wit tha file system, n' there be \s-1CPAN\s0 modules
available fo' \s-1ARGV\s0 n' environment variable conversions.
.PP
Full details is up in perllocale.
.PP
\fINew function \f(CI\*(C`fc\*(C'\fI n' correspondin escape sequence \f(CI\*(C`\eF\*(C'\fI fo' Unicode foldcase\fR
.IX Subsection "New function fc n' correspondin escape sequence F fo' Unicode foldcase"
.PP
Unicode foldcase be a extension ta lowercase dat gives betta thangs up in dis biatch
when comparin two strings case-insensitively.  It has long been used
internally up in regular expression \f(CW\*(C`/i\*(C'\fR matching.  Now it be available
explicitly all up in tha freshly smoked up \f(CW\*(C`fc\*(C'\fR function call (enabled by
\&\f(CW"use\ feature\ \*(Aqfc\*(Aq"\fR, or \f(CW\*(C`use v5.16\*(C'\fR, or explicitly callable via
\&\f(CW\*(C`CORE::fc\*(C'\fR) or all up in tha freshly smoked up \f(CW\*(C`\eF\*(C'\fR sequence up in double-quotish
strings.
.PP
Full details is up in \*(L"fc\*(R" up in perlfunc.
.PP
\fIDa Unicode \f(CI\*(C`Script_Extensions\*(C'\fI property is now supported.\fR
.IX Subsection "Da Unicode Script_Extensions property is now supported."
.PP
New up in Unicode 6.0, dis be a improved \f(CW\*(C`Script\*(C'\fR property.  Details
are up in \*(L"Scripts\*(R" up in perlunicode.
.SS "\s-1XS\s0 Chizzles"
.IX Subsection "XS Chizzles"
\fIImproved typemaps fo' Some Builtin Types\fR
.IX Subsection "Improved typemaps fo' Some Builtin Types"
.PP
Most \s-1XS\s0 authors will know there be a longstandin bug up in the
\&\s-1OUTPUT\s0 typemap fo' T_AVREF (\f(CW\*(C`AV*\*(C'\fR), T_HVREF (\f(CW\*(C`HV*\*(C'\fR), T_CVREF (\f(CW\*(C`CV*\*(C'\fR),
and T_SVREF (\f(CW\*(C`SVREF\*(C'\fR or \f(CW\*(C`\e$foo\*(C'\fR) dat requires manually decrementing
the reference count of tha return value instead of tha typemap taking
care of all dis bullshit.  For backwards-compatibility, dis cannot be chizzled up in the
default typemaps.  But we now provide additionizzle typemaps
\&\f(CW\*(C`T_AVREF_REFCOUNT_FIXED\*(C'\fR, etc. dat do not exhibit dis bug.  Using
them up in yo' extension be as simple as havin one line up in your
\&\f(CW\*(C`TYPEMAP\*(C'\fR section:
.PP
.Vb 1
\&  HV*   T_HVREF_REFCOUNT_FIXED
.Ve
.PP
\fI\f(CI\*(C`is_utf8_char()\*(C'\fI\fR
.IX Subsection "is_utf8_char()"
.PP
Da XS-callable function \f(CW\*(C`is_utf8_char()\*(C'\fR, when presented with
malformed \s-1UTF\-8\s0 input, can read up ta 12 bytes beyond tha end of the
string.  This cannot be fixed without changin its \s-1API,\s0 n' so its
use is now deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Use \f(CW\*(C`is_utf8_char_buf()\*(C'\fR (busted lyrics bout just below)
instead.
.PP
\fIAdded \f(CI\*(C`is_utf8_char_buf()\*(C'\fI\fR
.IX Subsection "Added is_utf8_char_buf()"
.PP
This function is designed ta replace tha deprecated \*(L"\fIis_utf8_char()\fR\*(R"
function. I aint talkin' bout chicken n' gravy biatch.  It includes a extra parameta ta make shizzle it don't read
past tha end of tha input buffer.
.PP
\fIOther \f(CI\*(C`is_utf8_foo()\*(C'\fI functions, as well as \f(CI\*(C`utf8_to_foo()\*(C'\fI, etc.\fR
.IX Subsection "Other is_utf8_foo() functions, as well as utf8_to_foo(), etc."
.PP
Most other XS-callable functions dat take \s-1UTF\-8\s0 encoded input
implicitly assume dat tha \s-1UTF\-8\s0 is valid (not malformed) wit respect to
buffer length.  Do not do thangs like fuckin chizzle a cold-ass lil characterz case or
see if it be alphanumeric without first bein shizzle dat it is valid
\&\s-1UTF\-8. \s0 This can be safely done fo' a whole strang by rockin one of the
functions \f(CW\*(C`is_utf8_string()\*(C'\fR, \f(CW\*(C`is_utf8_string_loc()\*(C'\fR, and
\&\f(CW\*(C`is_utf8_string_loclen()\*(C'\fR.
.PP
\fINew Pad \s-1API\s0\fR
.IX Subsection "New Pad API"
.PP
Many freshly smoked up functions done been added ta tha \s-1API\s0 fo' manipulatin lexical
pads.  See \*(L"Pad Data Structures\*(R" up in perlapi fo' mo' shiznit.
.SS "Changes ta Special Variables"
.IX Subsection "Changes ta Special Variables"
\fI\f(CI$$\fI can be assigned to\fR
.IX Subsection "$$ can be assigned to"
.PP
\&\f(CW$$\fR was made read-only up in Perl 5.8.0.  But only sometimes: \f(CW\*(C`local $$\*(C'\fR
would make it writable again. I aint talkin' bout chicken n' gravy biatch.  Some \s-1CPAN\s0 modulez was rockin \f(CW\*(C`local $$\*(C'\fR or
\&\s-1XS\s0 code ta bypass tha read-only check, so there is no reason ta keep \f(CW$$\fR
read-only.  (This chizzle also allowed a funky-ass bug ta be fixed while maintaining
backward compatibility.)
.PP
\fI\f(CI$^X\fI converted ta a absolute path on FreeBSD, \s-1OS X\s0 n' Solaris\fR
.IX Subsection "$^X converted ta a absolute path on FreeBSD, OS X n' Solaris"
.PP
\&\f(CW$^X\fR is now converted ta a absolute path on \s-1OS X,\s0 FreeBSD (without
needin \fI/proc\fR mounted) n' Solaris 10 n' 11.  This augments the
previous approach of rockin \fI/proc\fR on Linux, FreeBSD, n' NetBSD
(in all cases, where mounted).
.PP
This make relocatable perl installations mo' useful on these platforms.
(See \*(L"Relocatable \f(CW@INC\fR\*(R" up in \fI\s-1INSTALL\s0\fR)
.SS "Debugger Chizzles"
.IX Subsection "Debugger Chizzles"
\fIFeatures inside tha debugger\fR
.IX Subsection "Features inside tha debugger"
.PP
Da current Perlz feature bundle is now enabled fo' commandz entered
in tha interactizzle debugger.
.PP
\fINew option fo' tha debuggerz \f(BIt\fI command\fR
.IX Subsection "New option fo' tha debuggerz t command"
.PP
Da \fBt\fR command up in tha debugger, which togglez tracin mode, now
accepts a numeric argument dat determines how tha fuck nuff levelz of subroutine
calls ta trace.
.PP
\fI\f(CI\*(C`enable\*(C'\fI n' \f(CI\*(C`disable\*(C'\fI\fR
.IX Subsection "enable n' disable"
.PP
Da debugger now has \f(CW\*(C`disable\*(C'\fR n' \f(CW\*(C`enable\*(C'\fR commandz fo' disabling
existin breakpoints n' re-enablin em.  See perldebug.
.PP
\fIBreakpoints wit file names\fR
.IX Subsection "Breakpoints wit file names"
.PP
Da debuggerz \*(L"b\*(R" command fo' settin breakpoints now lets a line
number be prefixed wit a gangbangin' file name.  See
\&\*(L"b [file]:[line] [condition]\*(R" up in perldebug.
.ie n .SS "Da ""CORE"" Namespace"
.el .SS "Da \f(CWCORE\fP Namespace"
.IX Subsection "Da CORE Namespace"
\fIDa \f(CI\*(C`CORE::\*(C'\fI prefix\fR
.IX Subsection "Da CORE:: prefix"
.PP
Da \f(CW\*(C`CORE::\*(C'\fR prefix can now be used on keywordz enabled by
feature.pm, even outside tha scope of \f(CW\*(C`use feature\*(C'\fR.
.PP
\fISubroutines up in tha \f(CI\*(C`CORE\*(C'\fI namespace\fR
.IX Subsection "Subroutines up in tha CORE namespace"
.PP
Many Perl keywordz is now available as subroutines up in tha \s-1CORE\s0 namespace.
This lets dem be aliased:
.PP
.Vb 2
\&    BEGIN { *entangle = \e&CORE::tie }
\&    entangle $variable, $package, @args;
.Ve
.PP
And fo' prototypes ta be bypassed:
.PP
.Vb 5
\&    sub mytie(\e[%$*@]$@) {
\&        mah ($ref, $pack, @args) = @_;
\&        ... do suttin' ...
\&        goto &CORE::tie;
\&    }
.Ve
.PP
Some of these cannot be called all up in references or via \f(CW&foo\fR syntax,
but must be called as barewords.
.PP
See \s-1CORE\s0 fo' details.
.SS "Other Chizzles"
.IX Subsection "Other Chizzles"
\fIAnonymous handles\fR
.IX Subsection "Anonymous handles"
.PP
Automatically generated file handlez is now named _\|_ANONIO_\|_ when the
variable name cannot be determined, rather than \f(CW$_\fR\|_ANONIO_\|_.
.PP
\fIAutoloaded sort Subroutines\fR
.IX Subsection "Autoloaded sort Subroutines"
.PP
Custom sort subroutines can now be autoloaded [perl #30661]:
.PP
.Vb 2
\&    sub AUTOLOAD { ... }
\&    @sorted = sort foo @list; # uses AUTOLOAD
.Ve
.PP
\fI\f(CI\*(C`continue\*(C'\fI no longer requires tha \*(L"switch\*(R" feature\fR
.IX Subsection "continue no longer requires tha switch feature"
.PP
Da \f(CW\*(C`continue\*(C'\fR keyword has two meanings.  It can introduce a \f(CW\*(C`continue\*(C'\fR
block afta a loop, or it can exit tha current \f(CW\*(C`when\*(C'\fR block.  Up ta now,
the latta meanin was valid only wit tha \*(L"switch\*(R" feature enabled, and
was a syntax error otherwise.  Since tha main purpose of feature.pm is to
avoid conflicts wit user-defined subroutines, there is no reason for
\&\f(CW\*(C`continue\*(C'\fR ta depend on dat shit.
.PP
\fIDTrace probes fo' interpreta phase chizzle\fR
.IX Subsection "DTrace probes fo' interpreta phase chizzle"
.PP
Da \f(CW\*(C`phase\-change\*(C'\fR probes will fire when tha interpreterz phase
changes, which tracks tha \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR variable.  \f(CW\*(C`arg0\*(C'\fR is
the freshly smoked up phase name; \f(CW\*(C`arg1\*(C'\fR is tha oldschool one.  This is useful 
for limitin yo' instrumentation ta one or mo' of: compile time,
run time, or destruct time.
.PP
\fI\f(CI\*(C`_\|_FILE_\|_()\*(C'\fI Syntax\fR
.IX Subsection "__FILE__() Syntax"
.PP
Da \f(CW\*(C`_\|_FILE_\|_\*(C'\fR, \f(CW\*(C`_\|_LINE_\|_\*(C'\fR n' \f(CW\*(C`_\|_PACKAGE_\|_\*(C'\fR tokens can now be written
with a empty pair of parentheses afta em.  This make dem parse the
same way as \f(CW\*(C`time\*(C'\fR, \f(CW\*(C`fork\*(C'\fR n' other built-in functions.
.PP
\fIDa \f(CI\*(C`\e$\*(C'\fI prototype accepts any scalar lvalue\fR
.IX Subsection "Da $ prototype accepts any scalar lvalue"
.PP
Da \f(CW\*(C`\e$\*(C'\fR n' \f(CW\*(C`\e[$]\*(C'\fR subroutine prototypes now accept any scalar lvalue
argument.  Previously they accepted only scalars beginnin wit \f(CW\*(C`$\*(C'\fR and
hash n' array elements, n' you can put dat on yo' toast.  This chizzle make dem consistent wit tha way
the built-in \f(CW\*(C`read\*(C'\fR n' \f(CW\*(C`recv\*(C'\fR functions (among others) parse their
arguments, n' you can put dat on yo' toast.  This means dat one can override tha built-in functions with
custom subroutines dat parse they arguments tha same ol' dirty way.
.PP
\fI\f(CI\*(C`_\*(C'\fI up in subroutine prototypes\fR
.IX Subsection "_ up in subroutine prototypes"
.PP
Da \f(CW\*(C`_\*(C'\fR characta up in subroutine prototypes is now allowed before \f(CW\*(C`@\*(C'\fR or
\&\f(CW\*(C`%\*(C'\fR.
.SH "Security"
.IX Header "Security"
.ie n .SS "Use ""is_utf8_char_buf()"" n' not ""is_utf8_char()"""
.el .SS "Use \f(CWis_utf8_char_buf()\fP n' not \f(CWis_utf8_char()\fP"
.IX Subsection "Use is_utf8_char_buf() n' not is_utf8_char()"
Da latta function is now deprecated cuz its \s-1API\s0 is insufficient to
guarantee dat it don't read (up ta 12 bytes up in da most thugged-out shitty case) beyond
the end of its input string.  See
\&\fIis_utf8_char_buf()\fR.
.SS "Malformed \s-1UTF\-8\s0 input could cause attempts ta read beyond tha end of tha buffer"
.IX Subsection "Malformed UTF-8 input could cause attempts ta read beyond tha end of tha buffer"
Two freshly smoked up XS-accessible functions, \f(CW\*(C`utf8_to_uvchr_buf()\*(C'\fR and
\&\f(CW\*(C`utf8_to_uvuni_buf()\*(C'\fR is now available ta prevent this, n' tha Perl
core has been converted ta use em.
See \*(L"Internal Chizzles\*(R".
.ie n .SS """File::Glob::bsd_glob()"" memory error wit \s-1GLOB_ALTDIRFUNC \s0(\s-1CVE\-2011\-2728\s0)."
.el .SS "\f(CWFile::Glob::bsd_glob()\fP memory error wit \s-1GLOB_ALTDIRFUNC \s0(\s-1CVE\-2011\-2728\s0)."
.IX Subsection "File::Glob::bsd_glob() memory error wit GLOB_ALTDIRFUNC (CVE-2011-2728)."
Callin \f(CW\*(C`File::Glob::bsd_glob\*(C'\fR wit tha unsupported flag
\&\s-1GLOB_ALTDIRFUNC\s0 would cause a access violation / segfault.  A Perl
program dat accepts a gangbangin' flags value from a external source could expose
itself ta denial of steez or arbitrary code execution attacks.  There
are no known exploits up in tha wild. Y'all KNOW dat shit, muthafucka!  Da problem has been erected by
explicitly disablin all unsupported flags n' settin unused function
pointas ta null.  Bug reported by Cle\*'ment Lecigne. (5.14.2)
.ie n .SS "Privileges is now set erectly when assignin ta $("
.el .SS "Privileges is now set erectly when assignin ta \f(CW$(\fP"
.IX Subsection "Privileges is now set erectly when assignin ta $("
A hypothetical bug (probably unexploitable up in practice) cuz the
incorrect settin of tha effectizzle crew \s-1ID\s0 while settin \f(CW$(\fR has been
fixed. Y'all KNOW dat shit, muthafucka!  Da bug would have affected only systems dat have \f(CW\*(C`setresgid()\*(C'\fR
but not \f(CW\*(C`setregid()\*(C'\fR yo, but no such systems is known ta exist.
.SH "Deprecations"
.IX Header "Deprecations"
.SS "Don't read tha Unicode data base filez up in \fIlib/unicore\fP"
.IX Subsection "Don't read tha Unicode data base filez up in lib/unicore"
It be now deprecated ta directly read tha Unicode data base files.
These is stored up in tha \fIlib/unicore\fR directory.  Instead, you should
use tha freshly smoked up functions up in Unicode::UCD.  These provide a stable \s-1API,\s0
and give complete shiznit.
.PP
Perl may at some point up in tha future chizzle or remove these files.  The
file which applications was most likely ta have used is
\&\fIlib/unicore/ToDigit.pl\fR.  \*(L"\fIprop_invmap()\fR\*(R" up in Unicode::UCD can be used to
get at its data instead.
.ie n .SS "\s-1XS\s0 functions ""is_utf8_char()"", ""utf8_to_uvchr()"" n' ""utf8_to_uvuni()"""
.el .SS "\s-1XS\s0 functions \f(CWis_utf8_char()\fP, \f(CWutf8_to_uvchr()\fP n' \f(CWutf8_to_uvuni()\fP"
.IX Subsection "XS functions is_utf8_char(), utf8_to_uvchr() n' utf8_to_uvuni()"
This function is deprecated cuz it could read beyond tha end of the
input string.  Use tha freshly smoked up \fIis_utf8_char_buf()\fR,
\&\f(CW\*(C`utf8_to_uvchr_buf()\*(C'\fR n' \f(CW\*(C`utf8_to_uvuni_buf()\*(C'\fR instead.
.SH "Future Deprecations"
.IX Header "Future Deprecations"
This section serves as a notice of features dat is \fIlikely\fR ta be
removed or deprecated up in tha next release of
perl (5.18.0).  If yo' code dependz on these features, you should
contact tha Perl 5 Portas via tha mailing
list <http://lists.perl.org/list/perl5-porters.html> or perlbug to
explain yo' use case n' inform tha deprecation process.
.SS "Core Modules"
.IX Subsection "Core Modules"
These modulez may be marked as deprecated \fIfrom tha core\fR.  This only
means dat they will no longer be installed by default wit tha core
distribution yo, but will remain available on tha \s-1CPAN.\s0
.IP "\(bu" 4
\&\s-1CPANPLUS\s0
.IP "\(bu" 4
Filter::Simple
.IP "\(bu" 4
PerlIO::mmap
.IP "\(bu" 4
Pod::LaTeX
.IP "\(bu" 4
Pod::Parser
.IP "\(bu" 4
SelfLoader
.IP "\(bu" 4
Text::Soundex
.IP "\(bu" 4
Thread.pm
.SS "Platforms wit no supportin programmers"
.IX Subsection "Platforms wit no supportin programmers"
These platforms will probably have their
special build support removed durin the
5.17.0 pimpment series.
.IP "\(bu" 4
BeOS
.IP "\(bu" 4
djgpp
.IP "\(bu" 4
dgux
.IP "\(bu" 4
\&\s-1EPOC\s0
.IP "\(bu" 4
MPE/iX
.IP "\(bu" 4
Rhapsody
.IP "\(bu" 4
\&\s-1UTS\s0
.IP "\(bu" 4
\&\s-1VM/ESA\s0
.SS "Other Future Deprecations"
.IX Subsection "Other Future Deprecations"
.IP "\(bu" 4
Swappin of $< n' $>
.Sp
For mo' shiznit bout dis future deprecation, peep tha relevant \s-1RT\s0
ticket <https://rt.perl.org/rt3/Ticket/Display.html?id=96212>.
.IP "\(bu" 4
sfio, stdio
.Sp
Perl supports bein built without PerlIO proper, rockin a stdio or sfio
wrapper instead. Y'all KNOW dat shit, muthafucka!  A perl build like dis aint gonna support \s-1IO\s0 layers and
thus Unicode \s-1IO,\s0 makin it rather handicapped.
.Sp
PerlIO supports a \f(CW\*(C`stdio\*(C'\fR layer if stdio use is desired, n' similarly a
sfio layer could be produced.
.IP "\(bu" 4
Unescaped literal \f(CW"{"\fR up in regular expressions.
.Sp
Startin wit v5.20, it is planned ta require a literal \f(CW"{"\fR ta be
escaped, fo' example by precedin it wit a funky-ass backslash.  In v5.18, a
deprecated warnin message is ghon be emitted fo' all such uses.  
This affects only patterns dat is ta match a literal \f(CW"{"\fR.  Other
usez of dis character, like fuckin part of a quantifier or sequence as in
those below, is straight-up unaffected:
.Sp
.Vb 3
\&    /foo{3,5}/
\&    /\ep{Alphabetic}/
\&    /\eN{DIGIT ZERO}
.Ve
.Sp
Removin dis will permit extensions ta Perlz pattern syntax n' better
error checkin fo' existin syntax.  See \*(L"Quantifiers\*(R" up in perlre fo' an
example.
.IP "\(bu" 4
Revampin \f(CW"\eQ"\fR semantics up in double-quotish strings when combined wit other escapes.
.Sp
There is nuff muthafuckin bugs n' inconsistencies involvin combinations
of \f(CW\*(C`\eQ\*(C'\fR n' escapes like \f(CW\*(C`\ex\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, etc., within a \f(CW\*(C`\eQ...\eE\*(C'\fR pair.
These need ta be fixed, n' bustin so will necessarily chizzle current
behavior. Shiiit, dis aint no joke.  Da chizzlez aint yet been settled.
.SH "Incompatible Chizzles"
.IX Header "Incompatible Chizzles"
.SS "Special blocks called up in void context"
.IX Subsection "Special blocks called up in void context"
Special blocks (\f(CW\*(C`BEGIN\*(C'\fR, \f(CW\*(C`CHECK\*(C'\fR, \f(CW\*(C`INIT\*(C'\fR, \f(CW\*(C`UNITCHECK\*(C'\fR, \f(CW\*(C`END\*(C'\fR) is now
called up in void context.  This avoidz wasteful copyin of tha result of the
last statement [perl #108794].
.ie n .SS "Da ""overloading"" pragma n' regexp objects"
.el .SS "Da \f(CWoverloading\fP pragma n' regexp objects"
.IX Subsection "Da overloadin pragma n' regexp objects"
With \f(CW\*(C`no overloading\*(C'\fR, regular expression objects returned by \f(CW\*(C`qr//\*(C'\fR are
now stringified as \*(L"Regexp=REGEXP(0xbe600d)\*(R" instead of tha regular
expression itself [perl #108780].
.SS "Two \s-1XS\s0 typemap Entries removed"
.IX Subsection "Two XS typemap Entries removed"
Two presumably unused \s-1XS\s0 typemap entries done been removed from the
core typemap: T_DATAUNIT n' T_CALLBACK.  If yo ass is, against all odds,
a user of these, please peep tha instructions on how tha fuck ta restore them
in perlxstypemap.
.SS "Unicode 6.1 has incompatibilitizzles wit Unicode 6.0"
.IX Subsection "Unicode 6.1 has incompatibilitizzles wit Unicode 6.0"
These is detailed up in \*(L"Supports (almost) Unicode 6.1\*(R" above.
Yo ass can compile dis version of Perl ta use Unicode 6.0.  See
\&\*(L"Hackin Perl ta work on earlier Unicode versions (for straight-up straight-up hackers only)\*(R" up in perlunicode.
.SS "Borland compiler"
.IX Subsection "Borland compiler"
All support fo' tha Borland compila has been dropped. Y'all KNOW dat shit, muthafucka!  Da code had not
worked fo' a long-ass time anyway.
.SS "Certain deprecated Unicode propertizzles is no longer supported by default"
.IX Subsection "Certain deprecated Unicode propertizzles is no longer supported by default"
Perl should never have exposed certain Unicode propertizzles dat is used
by Unicode internally n' not meant ta be publicly available.  Use of
these has generated deprecated warnin lyrics since Perl 5.12.  The
removed propertizzles is Other_Alphabetic,
Other_Default_Ignorable_Code_Point, Other_Grapheme_Extend,
Other_ID_Continue, Other_ID_Start, Other_Lowercase, Other_Math, and
Other_Uppercase.
.PP
Perl may be recompiled ta include any or all of them; instructions are
given in
\&\*(L"Unicode characta propertizzles dat is \s-1NOT\s0 accepted by Perl\*(R" up in perluniprops.
.SS "Dereferencin \s-1IO\s0 thangies as typeglobs"
.IX Subsection "Dereferencin IO thangies as typeglobs"
Da \f(CW\*(C`*{...}\*(C'\fR operator, when passed a reference ta a \s-1IO\s0 thangy (as in
\&\f(CW\*(C`*{*STDIN{IO}}\*(C'\fR), creates a freshly smoked up typeglob containin just dat \s-1IO\s0 object.
Previously, it would stringify as a empty strin yo, but some operators would
treat it as undefined, producin a \*(L"uninitialized\*(R" warning.
Now it stringifies as _\|_ANONIO_\|_ [perl #96326].
.SS "User-defined case-changin operations"
.IX Subsection "User-defined case-changin operations"
This feature was deprecated up in Perl 5.14, n' has now been removed.
Da \s-1CPAN\s0 module Unicode::Casin serves up betta functionalitizzle without
the drawbacks dat dis feature had, as is detailed up in tha 5.14
documentation:
<http://perldoc.perl.org/5.14.0/perlunicode.html#User\-Defined\-Case\-Mappings\-%28for\-serious\-hackers\-only%29>
.SS "XSUBs is now 'static'"
.IX Subsection "XSUBs is now 'static'"
\&\s-1XSUB C\s0 functions is now 'static', dat is, they is not visible from
outside tha compilation unit.  Users can use tha freshly smoked up \f(CW\*(C`XS_EXTERNAL(name)\*(C'\fR
and \f(CW\*(C`XS_INTERNAL(name)\*(C'\fR macros ta pick tha desired linkin behavior.
Da ordinary \f(CW\*(C`XS(name)\*(C'\fR declaration fo' XSUBs will continue ta declare
non\-'static' XSUBs fo' compatibilitizzle yo, but tha \s-1XS\s0 compiler,
ExtUtils::ParseXS (\f(CW\*(C`xsubpp\*(C'\fR) will emit 'static' XSUBs by default.
ExtUtils::ParseXSz behavior can be reconfigured from \s-1XS\s0 rockin the
\&\f(CW\*(C`EXPORT_XSUB_SYMBOLS\*(C'\fR keyword. Y'all KNOW dat shit, muthafucka!  See perlxs fo' details.
.SS "Weakenin read-only references"
.IX Subsection "Weakenin read-only references"
Weakenin read-only references is no longer permitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  It should never
have hit dat shiznit anyway, n' could sometimes result up in crashes.
.SS "Tyin scalars dat hold typeglobs"
.IX Subsection "Tyin scalars dat hold typeglobs"
Attemptin ta tie a scalar afta a typeglob was assigned ta it would
instead tie tha handle up in tha typeglobz \s-1IO\s0 slot.  This meant dat it was
impossible ta tie tha scalar itself.  Similar problems affected \f(CW\*(C`tied\*(C'\fR and
\&\f(CW\*(C`untie\*(C'\fR: \f(CW\*(C`tied $scalar\*(C'\fR would return false on a tied scalar if tha last
thang returned was a typeglob, n' \f(CW\*(C`untie $scalar\*(C'\fR on such a tied scalar
would do nothing.
.PP
We fixed dis problem before Perl 5.14.0 yo, but it caused problems wit some
\&\s-1CPAN\s0 modules, so we put up in a thugged-out deprecation cycle instead.
.PP
Now tha deprecation has been removed n' dis bug has been fixed. Y'all KNOW dat shit, muthafucka!  So
\&\f(CW\*(C`tie $scalar\*(C'\fR will always tie tha scalar, not tha handle it holds.  To tie
the handle, use \f(CW\*(C`tie *$scalar\*(C'\fR (with a explicit asterisk).  Da same
applies ta \f(CW\*(C`tied *$scalar\*(C'\fR n' \f(CW\*(C`untie *$scalar\*(C'\fR.
.ie n .SS "IPC::Open3 no longer serves up ""xfork()"", ""xclose_on_exec()"" n' ""xpipe_anon()"""
.el .SS "IPC::Open3 no longer serves up \f(CWxfork()\fP, \f(CWxclose_on_exec()\fP n' \f(CWxpipe_anon()\fP"
.IX Subsection "IPC::Open3 no longer serves up xfork(), xclose_on_exec() n' xpipe_anon()"
All three functions was private, undocumented, n' unexported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  They do
not step tha fuck up ta be used by any code on \s-1CPAN. \s0 Two done been inlined n' one
deleted entirely.
.ie n .SS "$$ no longer caches \s-1PID\s0"
.el .SS "\f(CW$$\fP no longer caches \s-1PID\s0"
.IX Subsection "$$ no longer caches PID"
Previously, if one called \fIfork\fR\|(3) from C, Perl's
notion of \f(CW$$\fR could go outta sync wit what tha fuck \fIgetpid()\fR returns.  By always
fetchin tha value of \f(CW$$\fR via \fIgetpid()\fR, dis potential bug is eliminated.
Code dat dependz on tha cachin behavior will break.  As busted lyrics bout in
Core Enhancements,
\&\f(CW$$\fR is now writable yo, but it is ghon be reset durin a
fork.
.ie n .SS "$$ n' ""getppid()"" no longer emulate \s-1POSIX\s0 semantics under LinuxThreads"
.el .SS "\f(CW$$\fP n' \f(CWgetppid()\fP no longer emulate \s-1POSIX\s0 semantics under LinuxThreads"
.IX Subsection "$$ n' getppid() no longer emulate POSIX semantics under LinuxThreads"
Da \s-1POSIX\s0 emulation of \f(CW$$\fR n' \f(CW\*(C`getppid()\*(C'\fR under tha obsolete
LinuxThreadz implementation has been removed.
This only impacts playaz of Linux 2.4 and
userz of Debian GNU/kFreeBSD up ta n' includin 6.0, not tha vast
majoritizzle of Linux installations dat use \s-1NPTL\s0 threads.
.PP
This means dat \f(CW\*(C`getppid()\*(C'\fR, like \f(CW$$\fR, is now always guaranteed to
return tha \s-1OS\s0z scam of tha current state of tha process, not perl's
cached version of dat shit.
.PP
See tha documentation fo' $$ fo' details.
.ie n .SS "$<, $>, $( n' $) is no longer cached"
.el .SS "\f(CW$<\fP, \f(CW$>\fP, \f(CW$(\fP n' \f(CW$)\fP is no longer cached"
.IX Subsection "$<, $>, $( n' $) is no longer cached"
Similarly ta tha chizzlez ta \f(CW$$\fR n' \f(CW\*(C`getppid()\*(C'\fR, tha internal
cachin of \f(CW$<\fR, \f(CW$>\fR, \f(CW$(\fR n' \f(CW$)\fR has been removed.
.PP
When we cached these joints our scam of what tha fuck they was would drift out
of sync wit realitizzle if one of mah thugs (e.g., one of mah thugs embeddin perl) called
\&\f(CW\*(C`sete?[ug]id()\*(C'\fR without uppimpin \f(CW\*(C`PL_e?[ug]id\*(C'\fR.  Havin ta deal with
this complexitizzle wasn't worth it given how tha fuck skanky tha \f(CW\*(C`gete?[ug]id()\*(C'\fR
system call is.
.PP
This chizzle will break a handful of \s-1CPAN\s0 modulez dat use tha XS-level
\&\f(CW\*(C`PL_uid\*(C'\fR, \f(CW\*(C`PL_gid\*(C'\fR, \f(CW\*(C`PL_euid\*(C'\fR or \f(CW\*(C`PL_egid\*(C'\fR variables.
.PP
Da fix fo' dem breakages is ta use \f(CW\*(C`PerlProc_gete?[ug]id()\*(C'\fR to
retrieve dem (e.g., \f(CW\*(C`PerlProc_getuid()\*(C'\fR), n' not ta assign to
\&\f(CW\*(C`PL_e?[ug]id\*(C'\fR if you chizzle tha \s-1UID/GID/EUID/EGID. \s0 There is no longer
any need ta do so since perl will always retrieve tha up-to-date
version of dem joints from tha \s-1OS.\s0
.ie n .SS "Which Non-ASCII charactas git quoted by ""quotemeta"" n' ""\eQ"" has chizzled"
.el .SS "Which Non-ASCII charactas git quoted by \f(CWquotemeta\fP n' \f(CW\eQ\fP has chizzled"
.IX Subsection "Which Non-ASCII charactas git quoted by quotemeta n' Q has chizzled"
This is unlikely ta result up in a real problem, as Perl do not attach
special meanin ta any non-ASCII character, so it is currently
irrelevant which is quoted or not.  This chizzle fixes bug [perl #77654] and
brings Perlz behavior mo' tha fuck into line wit Unicodez recommendations.
See \*(L"quotemeta\*(R" up in perlfunc.
.SH "Performizzle Enhancements"
.IX Header "Performizzle Enhancements"
.IP "\(bu" 4
Improved performizzle fo' Unicode propertizzles up in regular expressions
.Sp
Matchin a cold-ass lil code point against a Unicode property is now done via a
binary search instead of linear. Shiiit, dis aint no joke.  This means fo' example dat tha worst
case fo' a 1000 item property is 10 probes instead of 1000.  This
inefficiency has been compensated fo' up in tha past by permanently storing
in a hash tha thangs up in dis biatch of a given probe plus tha thangs up in dis biatch fo' tha adjacent
64 code points, under tha theory dat near-by code points is likely to
be searched for. Shiiit, dis aint no joke.  A separate hash was used fo' each mention of a Unicode
property up in each regular expression. I aint talkin' bout chicken n' gravy biatch.  Thus, \f(CW\*(C`qr/\ep{foo}abc\ep{foo}/\*(C'\fR
would generate two hashes.  Any probes up in one instizzle would be unknown
to tha other, n' tha hashes could expand separately ta be like large
if tha regular expression was used on nuff different widely-separated
code points.
Now, however, there is just one hash shared by all instancez of a given
property.  This means dat if \f(CW\*(C`\ep{foo}\*(C'\fR is matched against \*(L"A\*(R" up in one
regular expression up in a thread, tha result is ghon be known immediately to
all regular expressions, n' tha relentless march of rockin up memory is
slowed considerably.
.IP "\(bu" 4
Version declarations wit tha \f(CW\*(C`use\*(C'\fR keyword (e.g., \f(CW\*(C`use 5.012\*(C'\fR) is now
faster, as they enable features without loadin \fIfeature.pm\fR.
.IP "\(bu" 4
\&\f(CW\*(C`local $_\*(C'\fR is fasta now, as it no longer iterates all up in magic dat it
is not goin ta copy anyway.
.IP "\(bu" 4
Perl 5.12.0 sped up tha destruction of objects whose classes define
empty \f(CW\*(C`DESTROY\*(C'\fR methodz (to prevent autoloading), by simply not
callin such empty methods.  This release takes dis optimization a
step further, by not callin any \f(CW\*(C`DESTROY\*(C'\fR method dat begins wit a
\&\f(CW\*(C`return\*(C'\fR statement.  This can be useful fo' destructors dat is only
used fo' debugging:
.Sp
.Vb 2
\&    use constant DEBUG => 1;
\&    sub DESTROY { return unless DEBUG; ... }
.Ve
.Sp
Constant-foldin will reduce tha straight-up original gangsta statement ta \f(CW\*(C`return;\*(C'\fR if \s-1DEBUG\s0
is set ta 0, triggerin dis optimization.
.IP "\(bu" 4
Assignin ta a variable dat holdz a typeglob or copy-on-write scalar
is now much fasta n' shit.  Previously tha typeglob would be stringified or
the copy-on-write scalar would be copied before bein clobbered.
.IP "\(bu" 4
Assignment ta \f(CW\*(C`substr\*(C'\fR up in void context is now mo' than twice its
previous speed. Y'all KNOW dat shit, muthafucka!  Instead of bustin n' returnin a special lvalue
scalar dat is then assigned to, \f(CW\*(C`substr\*(C'\fR modifies tha original gangsta string
itself.
.IP "\(bu" 4
\&\f(CW\*(C`substr\*(C'\fR no longer calculates a value ta return when called up in void
context.
.IP "\(bu" 4
Cuz of chizzlez up in File::Glob, Perlz \f(CW\*(C`glob\*(C'\fR function n' its \f(CW\*(C`<...>\*(C'\fR equivalent is now much fasta n' shit.  Da splittin of tha pattern
into lyrics has been rewritten up in C, resultin up in speed-upz of 20% for
some cases.
.Sp
This do not affect \f(CW\*(C`glob\*(C'\fR on \s-1VMS,\s0 as it do not use File::Glob.
.IP "\(bu" 4
Da short-circuitin operators \f(CW\*(C`&&\*(C'\fR, \f(CW\*(C`||\*(C'\fR, n' \f(CW\*(C`//\*(C'\fR, when chained
(like fuckin \f(CW\*(C`$a || $b || $c\*(C'\fR), is now considerably fasta ta short-circuit,
due ta reduced optree traversal.
.IP "\(bu" 4
Da implementation of \f(CW\*(C`s///r\*(C'\fR make one fewer copy of tha scalarz value.
.IP "\(bu" 4
Recursive calls ta lvalue subroutines up in lvalue scalar context use less
memory.
.SH "Modulez n' Pragmata"
.IX Header "Modulez n' Pragmata"
.SS "Deprecated Modules"
.IX Subsection "Deprecated Modules"
.IP "Version::Requirements" 4
.IX Item "Version::Requirements"
Version::Requirements is now \s-1DEPRECATED,\s0 use CPAN::Meta::Requirements,
which be a thugged-out drop-in replacement.  It is ghon be deleted from perl.git blead
in v5.17.0.
.SS "New Modulez n' Pragmata"
.IX Subsection "New Modulez n' Pragmata"
.IP "\(bu" 4
arybase \*(-- dis freshly smoked up module implements tha \f(CW$[\fR variable.
.IP "\(bu" 4
PerlIO::mmap 0.010 has been added ta tha Perl core.
.Sp
Da \f(CW\*(C`mmap\*(C'\fR PerlIO layer is no longer implemented by perl itself yo, but has
been moved up tha fuck into tha freshly smoked up PerlIO::mmap module.
.SS "Updated Modulez n' Pragmata"
.IX Subsection "Updated Modulez n' Pragmata"
This is only a overview of selected module thugged-out shit.  For a cold-ass lil complete list of
updates, run:
.PP
.Vb 1
\&    $ corelist \-\-diff 5.14.0 5.16.0
.Ve
.PP
Yo ass can substitute yo' straight-up version up in place of 5.14.0, like a muthafucka.
.IP "\(bu" 4
Archive::Extract has been upgraded from version 0.48 ta 0.58.
.Sp
Includes a gangbangin' fix fo' FreeBSD ta only use \f(CW\*(C`unzip\*(C'\fR if it is located in
\&\f(CW\*(C`/usr/local/bin\*(C'\fR, as FreeBSD 9.0 will shizzle wit a limited \f(CW\*(C`unzip\*(C'\fR in
\&\f(CW\*(C`/usr/bin\*(C'\fR.
.IP "\(bu" 4
Archive::Tar has been upgraded from version 1.76 ta 1.82.
.Sp
Adjustments ta handle filez >8gb (>0777777777777 octal) n' a gangbangin' feature
to return tha \s-1MD5SUM\s0 of filez up in tha archive.
.IP "\(bu" 4
base has been upgraded from version 2.16 ta 2.18.
.Sp
\&\f(CW\*(C`base\*(C'\fR no longer sets a modulez \f(CW$VERSION\fR ta \*(L"\-1\*(R" when a module it
loadz do not define a \f(CW$VERSION\fR.  This chizzle has been made cuz
\&\*(L"\-1\*(R" aint a valid version number under tha freshly smoked up \*(L"lax\*(R" criteria used
internally by \f(CW\*(C`UNIVERSAL::VERSION\*(C'\fR.  (See version fo' mo' on \*(L"lax\*(R"
version criteria.)
.Sp
\&\f(CW\*(C`base\*(C'\fR no longer internally skips loadin modulez it has already loaded
and instead relies on \f(CW\*(C`require\*(C'\fR ta inspect \f(CW%INC\fR.  This fixes a funky-ass bug
when \f(CW\*(C`base\*(C'\fR is used wit code dat clear \f(CW%INC\fR ta force a module to
be reloaded.
.IP "\(bu" 4
Carp has been upgraded from version 1.20 ta 1.26.
.Sp
It now includes last read filehandle info n' puts a thugged-out dot afta tha file
and line number, just like errors from \f(CW\*(C`die\*(C'\fR [perl #106538].
.IP "\(bu" 4
charnames has been updated from version 1.18 ta 1.30.
.Sp
\&\f(CW\*(C`charnames\*(C'\fR can now be invoked wit a freshly smoked up option, \f(CW\*(C`:loose\*(C'\fR,
which is like tha existin \f(CW\*(C`:full\*(C'\fR option yo, but enablez Unicode loose
name matching.  Details is up in \*(L"\s-1LOOSE MATCHES\*(R"\s0 up in charnames.
.IP "\(bu" 4
B::Deparse has been upgraded from version 1.03 ta 1.14.  This fixes
a shitload of deparsin bugs.
.IP "\(bu" 4
\&\s-1CGI\s0 has been upgraded from version 3.52 ta 3.59.
.Sp
It uses tha hood n' documented \s-1FCGI\s0.pm \s-1API\s0 up in CGI::Fast.  CGI::Fast was
usin a \s-1FCGI API\s0 dat was deprecated n' removed from documentation
more than ten muthafuckin years ago.  Usage of dis deprecated \s-1API\s0 wit \s-1FCGI \s0>=
0.70 or \s-1FCGI\s0 <= 0.73 introduces a securitizzle issue.
<https://rt.cpan.org/Public/Bug/Display.html?id=68380>
<http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE\-2011\-2766>
.Sp
Things dat may break yo' code:
.Sp
\&\f(CW\*(C`url()\*(C'\fR was fixed ta return \f(CW\*(C`PATH_INFO\*(C'\fR when it is explicitly requested
with either tha \f(CW\*(C`path=>1\*(C'\fR or \f(CW\*(C`path_info=>1\*(C'\fR flag.
.Sp
If yo' code is hustlin under mod_rewrite (or compatible) n' yo ass is
callin \f(CW\*(C`self_url()\*(C'\fR or yo ass is callin \f(CW\*(C`url()\*(C'\fR n' passing
\&\f(CW\*(C`path_info=>1\*(C'\fR, these methodz will straight-up be returning
\&\f(CW\*(C`PATH_INFO\*(C'\fR now, as you have explicitly axed or \f(CW\*(C`self_url()\*(C'\fR
has axed on yo' behalf.
.Sp
Da \f(CW\*(C`PATH_INFO\*(C'\fR has been omitted up in such URLs since tha issue was
introduced up in tha 3.12 release up in December, 2005.
.Sp
This bug is so oldschool yo' application may have come ta depend on it or
workaround dat shit. Peep fo' application before upgradin ta dis release.
.Sp
Examplez of affected method calls:
.Sp
.Vb 5
\&  $q\->url(\-absolute => 1, \-query => 1, \-path_info => 1);
\&  $q\->url(\-path=>1);
\&  $q\->url(\-full=>1,\-path=>1);
\&  $q\->url(\-rewrite=>1,\-path=>1);
\&  $q\->self_url();
.Ve
.Sp
We no longer read from \s-1STDIN\s0 when tha Content-Length aint set,
preventin requests wit no Content-Length from sometimes freezing.
This is consistent wit tha \s-1CGI RFC 3875,\s0 n' be also consistent with
CGI::Simple.  But fuck dat shiznit yo, tha word on tha street is dat tha oldschool behavior may done been expected by some
command-line usez of \s-1CGI\s0.pm.
.Sp
In addition, tha \s-1DELETE HTTP\s0 verb is now supported.
.IP "\(bu" 4
Compress::Zlib has been upgraded from version 2.035 ta 2.048.
.Sp
IO::Compress::Zip n' IO::Uncompress::Unzip now have support fo' \s-1LZMA
\&\s0(method 14).  There be a gangbangin' fix fo' a \s-1CRC\s0 issue up in IO::Compress::Unzip and
it supports Streamed Stored context now, nahmeean, biatch?  And fixed a Zip64 issue in
IO::Compress::Zip when tha content size was exactly 0xFFFFFFFF.
.IP "\(bu" 4
Digest::SHA has been upgraded from version 5.61 ta 5.71.
.Sp
Added \s-1BITS\s0 mode ta tha addfile method n' shasum.  This makes
partial-byte inputs possible via files/STDIN n' lets shasum check
all 8074 \s-1NIST\s0 Msg vectors, where previously special programmin was
required ta do all dis bullshit.
.IP "\(bu" 4
Encode has been upgraded from version 2.42 ta 2.44.
.Sp
Missin aliases added, a thugged-out deep recursion error fixed n' various
documentation thugged-out shit.
.Sp
Addressed 'decode_xs n\-byte heap\-overflow' securitizzle bug up in Unicode.xs
(\s-1CVE\-2011\-2939\s0). (5.14.2)
.IP "\(bu" 4
ExtUtils::CBuilder updated from version 0.280203 ta 0.280206.
.Sp
Da freshly smoked up version appendz \s-1CFLAGS\s0 n' \s-1LDFLAGS\s0 ta they Config.pm
counterparts.
.IP "\(bu" 4
ExtUtils::ParseXS has been upgraded from version 2.2210 ta 3.16.
.Sp
Much of ExtUtils::ParseXS, tha module behind tha \s-1XS\s0 compila \f(CW\*(C`xsubpp\*(C'\fR,
was rewritten n' cleaned up.  It has been made somewhat mo' extensible
and now finally uses strictures.
.Sp
Da typemap logic has been moved tha fuck into a separate module,
ExtUtils::Typemaps.  See \*(L"New Modulez n' Pragmata\*(R", above.
.Sp
For a cold-ass lil complete set of chizzles, please peep tha ExtUtils::ParseXS
changelog, available on tha \s-1CPAN.\s0
.IP "\(bu" 4
File::Glob has been upgraded from version 1.12 ta 1.17.
.Sp
On Windows, tilde (~) expansion now checks tha \f(CW\*(C`USERPROFILE\*(C'\fR environment
variable, afta checkin \f(CW\*(C`HOME\*(C'\fR.
.Sp
It has a freshly smoked up \f(CW\*(C`:bsd_glob\*(C'\fR export tag, intended ta replace \f(CW\*(C`:glob\*(C'\fR.  Like
\&\f(CW\*(C`:glob\*(C'\fR it overrides \f(CW\*(C`glob\*(C'\fR wit a gangbangin' function dat do not split tha glob
pattern tha fuck into lyrics yo, but, unlike \f(CW\*(C`:glob\*(C'\fR, it iterates properly up in scalar
context, instead of returnin tha last file.
.Sp
There is other chizzlez affectin Perlz own \f(CW\*(C`glob\*(C'\fR operator (which uses
File::Glob internally, except on \s-1VMS\s0).  See \*(L"Performizzle Enhancements\*(R"
and \*(L"Selected Bug Fixes\*(R".
.IP "\(bu" 4
FindBin updated from version 1.50 ta 1.51.
.Sp
It no longer returns a wack result if a script of tha same name as the
current one exists up in tha path n' is executable.
.IP "\(bu" 4
HTTP::Tiny has been upgraded from version 0.012 ta 0.017.
.Sp
Added support fo' rockin \f(CW$ENV{http_proxy}\fR ta set tha default proxy host.
.Sp
Addz additionizzle shorthand methodz fo' all common \s-1HTTP\s0 verbs,
a \f(CW\*(C`post_form()\*(C'\fR method fo' POST-in x\-www-form-urlencoded data and
a \f(CW\*(C`www_form_urlencode()\*(C'\fR utilitizzle method.
.IP "\(bu" 4
\&\s-1IO\s0 has been upgraded from version 1.25_04 ta 1.25_06, n' IO::Handle
from version 1.31 ta 1.33.
.Sp
Together, these upgrades fix a problem wit IO::Handlez \f(CW\*(C`getline\*(C'\fR and
\&\f(CW\*(C`getlines\*(C'\fR methods.  When these methodz is called on tha special \s-1ARGV\s0
handle, tha next file be automatically opened, as happens wit tha built-in
\&\f(CW\*(C`<>\*(C'\fR n' \f(CW\*(C`readline\*(C'\fR functions.  But, unlike tha built-ins, these
methodz was not respectin tha callerz use of tha open pragma and
applyin tha appropriate I/O layers ta tha newly-opened file
[rt.cpan.org #66474].
.IP "\(bu" 4
IPC::Cmd has been upgraded from version 0.70 ta 0.76.
.Sp
Capturin of command output (both \f(CW\*(C`STDOUT\*(C'\fR n' \f(CW\*(C`STDERR\*(C'\fR) is now supported
usin IPC::Open3 on MSWin32 without requirin IPC::Run.
.IP "\(bu" 4
IPC::Open3 has been upgraded from version 1.09 ta 1.12.
.Sp
Fixes a funky-ass bug which prevented use of \f(CW\*(C`open3\*(C'\fR on Windows when \f(CW*STDIN\fR,
\&\f(CW*STDOUT\fR or \f(CW*STDERR\fR had been localized.
.Sp
Fixes a funky-ass bug which prevented duplicatin numeric file descriptors on Windows.
.Sp
\&\f(CW\*(C`open3\*(C'\fR wit \*(L"\-\*(R" fo' tha program name works once mo' n' mo' n' mo'.  This was fucked up in
version 1.06 (and hence up in Perl 5.14.0) [perl #95748].
.IP "\(bu" 4
Locale::Codes has been upgraded from version 3.16 ta 3.21.
.Sp
Added Language Extension codes (langext) n' Language Variation codes (langvar)
as defined up in tha \s-1IANA\s0 language registry.
.Sp
Added language codes from \s-1ISO 639\-5\s0
.Sp
Added language/script codes from tha \s-1IANA\s0 language subtag registry
.Sp
Fixed a uninitialized value warnin [rt.cpan.org #67438].
.Sp
Fixed tha return value fo' tha all_XXX_codes n' all_XXX_names functions
[rt.cpan.org #69100].
.Sp
Reorganized modulez ta move Locale::MODULE ta Locale::Codes::MODULE ta allow
for cleaner future additions.  Da original gangsta four modulez (Locale::Language,
Locale::Currency, Locale::Country, Locale::Script) will continue ta work yo, but
all freshly smoked up setz of codes is ghon be added up in tha Locale::Codes namespace.
.Sp
Da code2XXX, XXX2code, all_XXX_codes, n' all_XXX_names functions now
support retired codes.  All codesets may be specified by a cold-ass lil constant or
by they name now, nahmeean, biatch?  Previously, they was specified only by a cold-ass lil constant.
.Sp
Da alias_code function exists fo' backward compatibility.  It has been
replaced by rename_country_code.  Da alias_code function will be
removed some time afta September, 2013.
.Sp
All work is now done up in tha central module (Locale::Codes).  Previously,
some was still done up in tha wrapper modulez (Locale::Codes::*).  Added
Language Family codes (langfam) as defined up in \s-1ISO 639\-5.\s0
.IP "\(bu" 4
Math::BigFloat has been upgraded from version 1.993 ta 1.997.
.Sp
Da \f(CW\*(C`numify\*(C'\fR method has been erected ta return a normalized Perl number
(the result of \f(CW\*(C`0 + $thing\*(C'\fR), instead of a strang [rt.cpan.org #66732].
.IP "\(bu" 4
Math::BigInt has been upgraded from version 1.994 ta 1.998.
.Sp
It serves up a freshly smoked up \f(CW\*(C`bsgn\*(C'\fR method dat complements tha \f(CW\*(C`babs\*(C'\fR method.
.Sp
It fixes tha internal \f(CW\*(C`objectify\*(C'\fR functionz handlin of \*(L"foreign objects\*(R"
so they is converted ta tha appropriate class (Math::BigInt or
Math::BigFloat).
.IP "\(bu" 4
Math::BigRat has been upgraded from version 0.2602 ta 0.2603.
.Sp
\&\f(CW\*(C`int()\*(C'\fR on a Math::BigRat object containin \-1/2 now creates a
Math::BigInt containin 0, rather than \-0.  Math::BigInt do not even
support wack zero, so tha resultin object was straight-up malformed
[perl #95530].
.IP "\(bu" 4
Math::Complex has been upgraded from version 1.56 ta 1.59
and Math::Trig from version 1.2 ta 1.22.
.Sp
Fixes include: erect copy constructor usage; fix polarwise formattin with
numeric format specifier; n' mo' stable \f(CW\*(C`great_circle_direction\*(C'\fR algorithm.
.IP "\(bu" 4
Module::CoreList has been upgraded from version 2.51 ta 2.66.
.Sp
Da \f(CW\*(C`corelist\*(C'\fR utilitizzle now understandz tha \f(CW\*(C`\-r\*(C'\fR option fo' displaying
Perl release dates n' tha \f(CW\*(C`\-\-diff\*(C'\fR option ta print tha set of modlib
changes between two perl distributions.
.IP "\(bu" 4
Module::Metadata has been upgraded from version 1.000004 ta 1.000009.
.Sp
Addz \f(CW\*(C`provides\*(C'\fR method ta generate a \s-1CPAN META\s0 serves up data structure
correctly; use of \f(CW\*(C`package_versions_from_directory\*(C'\fR is discouraged.
.IP "\(bu" 4
ODBM_File has been upgraded from version 1.10 ta 1.12.
.Sp
Da \s-1XS\s0 code is now compiled wit \f(CW\*(C`PERL_NO_GET_CONTEXT\*(C'\fR, which will aid
performizzle under ithreads.
.IP "\(bu" 4
open has been upgraded from version 1.08 ta 1.10.
.Sp
It no longer turns off layers on standard handlez when invoked without the
\&\*(L":std\*(R" directive.  Similarly, when invoked \fIwith\fR tha \*(L":std\*(R" directive, it
now clears layers on \s-1STDERR\s0 before applyin tha freshly smoked up ones, n' not just on
\&\s-1STDIN\s0 n' \s-1STDOUT\s0 [perl #92728].
.IP "\(bu" 4
overload has been upgraded from version 1.13 ta 1.18.
.Sp
\&\f(CW\*(C`overload::Overloaded\*(C'\fR no longer calls \f(CW\*(C`can\*(C'\fR on tha class yo, but uses
another means ta determine whether tha object has overloading.  It was
never erect fo' it ta booty-call \f(CW\*(C`can\*(C'\fR, as overloadin do not respect
\&\s-1AUTOLOAD. \s0 So classes dat autoload methodz n' implement \f(CW\*(C`can\*(C'\fR no longer
have ta account fo' overloadin [perl #40333].
.Sp
A warnin is now produced fo' invalid arguments, n' you can put dat on yo' toast.  See \*(L"New Diagnostics\*(R".
.IP "\(bu" 4
PerlIO::scalar has been upgraded from version 0.11 ta 0.14.
.Sp
(This is tha module dat implements \f(CW\*(C`open $fh, \*(Aq>\*(Aq, \e$scalar\*(C'\fR.)
.Sp
It fixes a problem wit \f(CW\*(C`open mah $fh, ">", \e$scalar\*(C'\fR not hustlin if
\&\f(CW$scalar\fR be a cold-ass lil copy-on-write scalar. Shiiit, dis aint no joke. (5.14.2)
.Sp
It also fixes a hang dat occurs wit \f(CW\*(C`readline\*(C'\fR or \f(CW\*(C`<$fh>\*(C'\fR if a
typeglob has been assigned ta \f(CW$scalar\fR [perl #92258].
.Sp
It no longer assumes durin \f(CW\*(C`seek\*(C'\fR dat \f(CW$scalar\fR be a strang internally.
If it didn't crash, dat shiznit was close ta bustin so [perl #92706].  Also, the
internal print routine no longer assumes dat tha posizzle set by \f(CW\*(C`seek\*(C'\fR
is valid yo, but extendz tha strang ta dat position, fillin tha intervening
bytes (between tha oldschool length n' tha seek position) wit nulls
[perl #78980].
.Sp
Printin ta a in-memory handle now works if tha \f(CW$scalar\fR holdz a reference,
stringifyin tha reference before modifyin dat shit.  References used ta be
treated as empty strings.
.Sp
Printin ta a in-memory handle no longer crashes if tha \f(CW$scalar\fR happens to
hold a number internally yo, but no strang buffer.
.Sp
Printin ta a in-memory handle no longer creates scalars dat confuse
the regular expression engine [perl #108398].
.IP "\(bu" 4
Pod::Functions has been upgraded from version 1.04 ta 1.05.
.Sp
\&\fIFunctions.pm\fR is now generated at perl build time from annotations in
\&\fIperlfunc.pod\fR.  This will ensure dat Pod::Functions n' perlfunc
remain up in synchronisation.
.IP "\(bu" 4
Pod::Html has been upgraded from version 1.11 ta 1.1502.
.Sp
This be a extensive rewrite of Pod::Html ta use Pod::Simple under
the hood. Y'all KNOW dat shit, muthafucka! I be fly as a gangbangin' falcon, soarin all up in tha sky dawwwwg!  Da output has chizzled significantly.
.IP "\(bu" 4
Pod::Perldoc has been upgraded from version 3.15_03 ta 3.17.
.Sp
It erects tha search paths on \s-1VMS\s0 [perl #90640]. (5.14.1)
.Sp
Da \fB\-v\fR option now fetches tha right section fo' \f(CW$0\fR.
.Sp
This upgrade has a shitload of dope fixes.  Consult its chizzlelog on
the \s-1CPAN\s0 fo' mo' shiznit.
.IP "\(bu" 4
\&\s-1POSIX\s0 has been upgraded from version 1.24 ta 1.30.
.Sp
\&\s-1POSIX\s0 no longer uses AutoLoader n' shit.  Any code which was relyin on this
implementation detail was buggy, n' may fail cuz of dis chizzle.
Da modulez Perl code has been considerably simplified, roughly halving
the number of lines, wit no chizzle up in functionality.  Da \s-1XS\s0 code has
been refactored ta reduce tha size of tha shared object by bout 12%,
with no chizzle up in functionality.  Mo' \s-1POSIX\s0 functions now have tests.
.Sp
\&\f(CW\*(C`sigsuspend\*(C'\fR n' \f(CW\*(C`pause\*(C'\fR now run signal handlezs before returning, as the
whole point of these two functions is ta wait until a signal has
arrived, n' then return \fIafter\fR it has been triggered. Y'all KNOW dat shit, muthafucka!  Delayed, or
\&\*(L"safe\*(R", signals was preventin dat from happening, possibly resultin in
race conditions [perl #107216].
.Sp
\&\f(CW\*(C`POSIX::sleep\*(C'\fR is now a gangbangin' finger-lickin' direct call tha fuck into tha underlyin \s-1OS \s0\f(CW\*(C`sleep\*(C'\fR
function, instead of bein a Perl wrapper on \f(CW\*(C`CORE::sleep\*(C'\fR.
\&\f(CW\*(C`POSIX::dup2\*(C'\fR now returns tha erect value on Win32 (\fIi.e.\fR, tha file
descriptor).  \f(CW\*(C`POSIX::SigSet\*(C'\fR \f(CW\*(C`sigsuspend\*(C'\fR n' \f(CW\*(C`sigpending\*(C'\fR and
\&\f(CW\*(C`POSIX::pause\*(C'\fR now dispatch safe signals immediately before returnin to
their caller.
.Sp
\&\f(CW\*(C`POSIX::Termios::setattr\*(C'\fR now defaults tha third argument ta \f(CW\*(C`TCSANOW\*(C'\fR,
instead of 0. On most platforms \f(CW\*(C`TCSANOW\*(C'\fR is defined ta be 0 yo, but on some
0 aint a valid parameter, which caused a cold-ass lil call wit defaults ta fail.
.IP "\(bu" 4
Socket has been upgraded from version 1.94 ta 2.001.
.Sp
It has freshly smoked up functions n' constants fo' handlin IPv6 sockets:
.Sp
.Vb 11
\&    pack_ipv6_mreq
\&    unpack_ipv6_mreq
\&    IPV6_ADD_MEMBERSHIP
\&    IPV6_DROP_MEMBERSHIP
\&    IPV6_MTU
\&    IPV6_MTU_DISCOVER
\&    IPV6_MULTICAST_HOPS
\&    IPV6_MULTICAST_IF
\&    IPV6_MULTICAST_LOOP
\&    IPV6_UNICAST_HOPS
\&    IPV6_V6ONLY
.Ve
.IP "\(bu" 4
Storable has been upgraded from version 2.27 ta 2.34.
.Sp
It no longer turns copy-on-write scalars tha fuck into read-only scalars when
freezin n' thawing.
.IP "\(bu" 4
Sys::Syslog has been upgraded from version 0.27 ta 0.29.
.Sp
This upgrade closes nuff outstandin bugs.
.IP "\(bu" 4
Term::ANSIColor has been upgraded from version 3.00 ta 3.01.
.Sp
Only interpret a initial array reference as a list of colors, not any initial
reference, allowin tha colored function ta work properly on objects with
stringification defined.
.IP "\(bu" 4
Term::ReadLine has been upgraded from version 1.07 ta 1.09.
.Sp
Term::ReadLine now supports any event loop, includin unpublished ones and
simple IO::Select, loops without tha need ta rewrite existin code for
any particular framework [perl #108470].
.IP "\(bu" 4
threads::shared has been upgraded from version 1.37 ta 1.40.
.Sp
Destructors on shared objects used ta be ignored sometimes if tha objects
were referenced only by shared data structures.  This has been mostly
fixed yo, but destructors may still be ignored if tha objects still exist at
global destruction time [perl #98204].
.IP "\(bu" 4
Unicode::Collate has been upgraded from version 0.73 ta 0.89.
.Sp
Updated ta \s-1CLDR 1.9.1\s0
.Sp
Localez updated ta \s-1CLDR 2.0:\s0 mk, mt, nb, nn, ro, ru, sk, sr, sv, uk,
zh_\|_pinyin, zh_\|_stroke
.Sp
Newly supported locales: bn, fa, ml, mr, or, pa, sa, si, si_\|_dictionary,
sr_Latn, sv_\|_reformed, ta, te, th, ur, wae.
.Sp
Tailored compatibilitizzle ideographs as well as unified ideographs fo' the
locales: ja, ko, zh_\|_big5han, zh_\|_gb2312han, zh_\|_pinyin, zh_\|_stroke.
.Sp
Locale/*.pl filez is now searched fo' up in \f(CW@INC\fR.
.IP "\(bu" 4
Unicode::Normalize has been upgraded from version 1.10 ta 1.14.
.Sp
Fixes fo' tha removal of \fIunicore/CompositionExclusions.txt\fR from core.
.IP "\(bu" 4
Unicode::UCD has been upgraded from version 0.32 ta 0.43.
.Sp
This addz four freshly smoked up functions:  \f(CW\*(C`prop_aliases()\*(C'\fR and
\&\f(CW\*(C`prop_value_aliases()\*(C'\fR, which is used ta find all Unicode-approved
synonyms fo' property names, or ta convert from one name ta another;
\&\f(CW\*(C`prop_invlist\*(C'\fR which returns all code points matchin a given
Unicode binary property; n' \f(CW\*(C`prop_invmap\*(C'\fR which returns tha complete
specification of a given Unicode property.
.IP "\(bu" 4
Win32API::File has been upgraded from version 0.1101 ta 0.1200.
.Sp
Added SetStdHandle n' GetStdHandle functions
.SS "Removed Modulez n' Pragmata"
.IX Subsection "Removed Modulez n' Pragmata"
As promised up in Perl 5.14.0z release notes, tha followin modulez have
been removed from tha core distribution, n' if needed should be installed
from \s-1CPAN\s0 instead.
.IP "\(bu" 4
Devel::DProf has been removed from tha Perl core.  Prior version was
20110228.00.
.IP "\(bu" 4
Shell has been removed from tha Perl core.  Prior version was 0.72_01.
.IP "\(bu" 4
Several oldschool perl4\-style libraries which done been deprecated wit 5.14
are now removed:
.Sp
.Vb 5
\&    abbrev.pl assert.pl bigfloat.pl bigint.pl bigrat.pl cacheout.pl
\&    complete.pl ctime.pl dotsh.pl exceptions.pl fastcwd.pl flush.pl
\&    getcwd.pl getopt.pl getopts.pl hostname.pl importenv.pl
\&    lib/find{,depth}.pl look.pl newgetopt.pl open2.pl open3.pl
\&    pwd.pl shellwords.pl stat.pl tainted.pl termcap.pl timelocal.pl
.Ve
.Sp
They can be found on \s-1CPAN\s0 as Perl4::CoreLibs.
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
\fIperldtrace\fR
.IX Subsection "perldtrace"
.PP
perldtrace raps bout Perlz DTrace support, listin tha provided probes
and gives examplez of they use.
.PP
\fIperlexperiment\fR
.IX Subsection "perlexperiment"
.PP
This document is intended ta provide a list of experimenstrual features in
Perl.  It be still a work up in progress.
.PP
\fIperlootut\fR
.IX Subsection "perlootut"
.PP
This a freshly smoked up \s-1OO\s0 tutorial. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  It focuses on basic \s-1OO\s0 concepts, n' then recommends
that readaz chizzle a \s-1OO\s0 framework from \s-1CPAN.\s0
.PP
\fIperlxstypemap\fR
.IX Subsection "perlxstypemap"
.PP
Da freshly smoked up manual raps bout tha \s-1XS\s0 typemappin mechanizzle up in unprecedented
detail n' combines freshly smoked up documentation wit shiznit extracted from
perlxs n' tha previously unstraight-up legit list of all core typemaps.
.SS "Changes ta Existin Documentation"
.IX Subsection "Changes ta Existin Documentation"
\fIperlapi\fR
.IX Subsection "perlapi"
.IP "\(bu" 4
Da \s-1HV API\s0 has long accepted wack lengths ta show dat tha key is
in \s-1UTF8. \s0 This is now documented.
.IP "\(bu" 4
Da \f(CW\*(C`boolSV()\*(C'\fR macro is now documented.
.PP
\fIperlfunc\fR
.IX Subsection "perlfunc"
.IP "\(bu" 4
\&\f(CW\*(C`dbmopen\*(C'\fR treats a 0 mode as a special case, dat prevents a nonexistent
file from bein pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This has been tha case since Perl 5.000 yo, but was
never documented anywhere, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  Now tha perlfunc entry mentions it
[perl #90064].
.IP "\(bu" 4
As a accident of history, \f(CW\*(C`open $fh, \*(Aq<:\*(Aq, ...\*(C'\fR applies tha default
layers fo' tha platform (\f(CW\*(C`:raw\*(C'\fR on Unix, \f(CW\*(C`:crlf\*(C'\fR on Windows), ignoring
whatever is declared by open.pm.  This seems such a useful feature
it has been documented up in perlfunc n' open.
.IP "\(bu" 4
Da entry fo' \f(CW\*(C`split\*(C'\fR has been rewritten. I aint talkin' bout chicken n' gravy biatch.  It be now far clearer than
before.
.PP
\fIperlguts\fR
.IX Subsection "perlguts"
.IP "\(bu" 4
A freshly smoked up section, Autoloadin wit XSUBs,
has been added, which explains tha two APIs fo' accessin tha name of the
autoloaded sub.
.IP "\(bu" 4
Some function descriptions up in perlguts was confusing, as it was
not clear whether they referred ta tha function above or below the
description. I aint talkin' bout chicken n' gravy biatch.  This has been clarified [perl #91790].
.PP
\fIperlobj\fR
.IX Subsection "perlobj"
.IP "\(bu" 4
This document has been rewritten from scratch, n' its coverage of various \s-1OO\s0
concepts has been expanded.
.PP
\fIperlop\fR
.IX Subsection "perlop"
.IP "\(bu" 4
Documentation of tha smartmatch operator has been reworked n' moved from
perlsyn ta perlop where it belongs.
.Sp
It has also been erected fo' tha case of \f(CW\*(C`undef\*(C'\fR on tha left-hand
side.  Da list of different smart-ass match behaviors had a item up in the
wrong place.
.IP "\(bu" 4
Documentation of tha ellipsis statement (\f(CW\*(C`...\*(C'\fR) has been reworked and
moved from perlop ta perlsyn.
.IP "\(bu" 4
Da explanation of bitwise operators has been expanded ta explain how tha fuck they
work on Unicode strings (5.14.1).
.IP "\(bu" 4
Mo' examplez fo' \f(CW\*(C`m//g\*(C'\fR done been added (5.14.1).
.IP "\(bu" 4
Da \f(CW\*(C`<<\eFOO\*(C'\fR here-doc syntax has been documented (5.14.1).
.PP
\fIperlpragma\fR
.IX Subsection "perlpragma"
.IP "\(bu" 4
There is now a standard convention fo' namin keys up in tha \f(CW\*(C`%^H\*(C'\fR,
documented under Key naming.
.PP
\fI\*(L"Launderin n' Detectin Tainted Data\*(R" up in perlsec\fR
.IX Subsection "Launderin n' Detectin Tainted Data up in perlsec"
.IP "\(bu" 4
Da example function fo' checkin fo' taintednizz contained a subtle
error. Shiiit, dis aint no joke.  \f(CW$@\fR need ta be localized ta prevent its changin this
globalz value outside tha function. I aint talkin' bout chicken n' gravy biatch.  Da preferred method ta check for
this remains \*(L"tainted\*(R" up in Scalar::Util.
.PP
\fIperllol\fR
.IX Subsection "perllol"
.IP "\(bu" 4
perllol has been expanded wit examplez rockin tha freshly smoked up \f(CW\*(C`push $scalar\*(C'\fR
syntax introduced up in Perl 5.14.0 (5.14.1).
.PP
\fIperlmod\fR
.IX Subsection "perlmod"
.IP "\(bu" 4
perlmod now states explicitly dat some typez of explicit symbol table
manipulation is not supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This codifies what tha fuck was effectively already
the case [perl #78074].
.PP
\fIperlpodstyle\fR
.IX Subsection "perlpodstyle"
.IP "\(bu" 4
Da tips on which formattin codes ta use done been erected n' pimped outly
expanded.
.IP "\(bu" 4
There is now a cold-ass lil couple example one-liners fo' peepshowin \s-1POD\s0 filez after
they done been edited.
.PP
\fIperlre\fR
.IX Subsection "perlre"
.IP "\(bu" 4
Da \f(CW\*(C`(*COMMIT)\*(C'\fR directizzle is now listed up in tha right section
(Verbs without a argument).
.PP
\fIperlrun\fR
.IX Subsection "perlrun"
.IP "\(bu" 4
perlrun has undergone a thugged-out dope clean-up.  Most notably, the
\&\fB\-0x...\fR form of tha \fB\-0\fR flag has been clarified, n' tha final section
on environment variablez has been erected n' expanded (5.14.1).
.PP
\fIperlsub\fR
.IX Subsection "perlsub"
.IP "\(bu" 4
Da ($;) prototype syntax, which has existed fo' rather a long-ass time, is now
documented up in perlsub.  It lets a unary function have tha same
precedence as a list operator.
.PP
\fIperltie\fR
.IX Subsection "perltie"
.IP "\(bu" 4
Da required syntax fo' tyin handlez has been documented.
.PP
\fIperlvar\fR
.IX Subsection "perlvar"
.IP "\(bu" 4
Da documentation fo' $! has been erected n' clarified.
It used ta state dat $! could be \f(CW\*(C`undef\*(C'\fR, which aint tha case.  It was
also unclear whether system calls set Cz \f(CW\*(C`errno\*(C'\fR or Perlz \f(CW$!\fR
[perl #91614].
.IP "\(bu" 4
Documentation fo' $$ has been amended wit additional
cautions regardin changin tha process \s-1ID.\s0
.PP
\fIOther Chizzles\fR
.IX Subsection "Other Chizzles"
.IP "\(bu" 4
perlxs was extended wit documentation on inline typemaps.
.IP "\(bu" 4
perlref has a freshly smoked up Circular References
section explainin how tha fuck circularitizzles may not be freed n' how tha fuck ta solve that
with weak references.
.IP "\(bu" 4
Partz of perlapi was clarified, n' Perl equivalentz of some C
functions done been added as a additionizzle mode of exposition.
.IP "\(bu" 4
A few partz of perlre n' perlrecharclass was clarified.
.SS "Removed Documentation"
.IX Subsection "Removed Documentation"
\fIOldskool \s-1OO\s0 Documentation\fR
.IX Subsection "Oldskool OO Documentation"
.PP
Da oldschool \s-1OO\s0 tutorials, perltoot, perltooc, n' perlboot, have been
removed. Y'all KNOW dat shit, muthafucka!  Da perlbot (bag of object tricks) document has been removed
as well.
.PP
\fIDevelopment Deltas\fR
.IX Subsection "Development Deltas"
.PP
Da perldelta filez fo' pimpment releases is no longer packaged with
perl.  These can still be found up in tha perl source code repository.
.SH "Diagnostics"
.IX Header "Diagnostics"
Da followin additions or chizzlez done been made ta diagnostic output,
includin warnings n' fatal error lyrics.  For tha complete list of
diagnostic lyrics, peep perldiag.
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
\fINew Errors\fR
.IX Subsection "New Errors"
.IP "\(bu" 4
Cannot set tied \f(CW@DB::args\fR
.Sp
This error occurs when \f(CW\*(C`caller\*(C'\fR tries ta set \f(CW@DB::args\fR but findz it
tied. Y'all KNOW dat shit, muthafucka!  Before dis error was added, it used ta crash instead.
.IP "\(bu" 4
Cannot tie unreifiable array
.Sp
This error is part of a safety check dat tha \f(CW\*(C`tie\*(C'\fR operator do before
tyin a special array like \f(CW@_\fR.  Yo ass should never peep dis message.
.IP "\(bu" 4
&CORE::%s cannot be called directly
.Sp
This occurs when a subroutine up in tha \f(CW\*(C`CORE::\*(C'\fR namespace is called
with \f(CW&foo\fR syntax or all up in a reference.  Some subroutines
in dis package cannot yet be called dat way yo, but must be
called as barewords.  See "Subroutines up in tha \f(CW\*(C`CORE\*(C'\fR namespace", above.
.IP "\(bu" 4
Source filtas apply only ta byte streams
.Sp
This freshly smoked up error occurs when you try ta activate a source filta (usually by
loadin a source filta module) within a strang passed ta \f(CW\*(C`eval\*(C'\fR under the
\&\f(CW\*(C`unicode_eval\*(C'\fR feature.
.PP
\fINew Warnings\fR
.IX Subsection "New Warnings"
.IP "\(bu" 4
defined(@array) is deprecated
.Sp
Da long-deprecated \f(CW\*(C`defined(@array)\*(C'\fR now also warns fo' package variables.
Previously it issued a warnin fo' lexical variablez only.
.IP "\(bu" 4
\&\fIlength()\fR used on \f(CW%s\fR
.Sp
This freshly smoked up warnin occurs when \f(CW\*(C`length\*(C'\fR is used on a array or hash, instead
of \f(CW\*(C`scalar(@array)\*(C'\fR or \f(CW\*(C`scalar(keys %hash)\*(C'\fR.
.IP "\(bu" 4
lvalue attribute \f(CW%s\fR already-defined subroutine
.Sp
attributes.pm now emits dis warnin when tha :lvalue
attribute be applied ta a Perl subroutine dat has already been defined, as
fuckin wit so can have unexpected side-effects.
.IP "\(bu" 4
overload arg '%s' is invalid
.Sp
This warning, up in tha \*(L"overload\*(R" category, is produced when tha overload
pragma is given a argument it don't recognize, presumably a mistyped
operator.
.IP "\(bu" 4
$[ used up in \f(CW%s\fR (did you mean $] ?)
.Sp
This freshly smoked up warnin exists ta catch tha mistaken use of \f(CW$[\fR up in version
checks.  \f(CW$]\fR, not \f(CW$[\fR, gotz nuff tha version number.
.IP "\(bu" 4
Useless assignment ta a temporary
.Sp
Assignin ta a temporary scalar returned
from a lvalue subroutine now produces this
warnin [perl #31946].
.IP "\(bu" 4
Useless use of \eE
.Sp
\&\f(CW\*(C`\eE\*(C'\fR do not a god damn thang unless preceded by \f(CW\*(C`\eQ\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR or \f(CW\*(C`\eU\*(C'\fR.
.SS "Removed Errors"
.IX Subsection "Removed Errors"
.IP "\(bu" 4
\&\*(L"sort is now a reserved word\*(R"
.Sp
This error used ta occur when \f(CW\*(C`sort\*(C'\fR was called without arguments,
followed by \f(CW\*(C`;\*(C'\fR or \f(CW\*(C`)\*(C'\fR.  (E.g., \f(CW\*(C`sort;\*(C'\fR would die yo, but \f(CW\*(C`{sort}\*(C'\fR was
\&\s-1OK.\s0)  This error message was added up in Perl 3 ta catch code like
\&\f(CW\*(C`close(sort)\*(C'\fR which would no longer work.  Mo' than two decades later,
this message is no longer appropriate.  Now \f(CW\*(C`sort\*(C'\fR without arguments is
always allowed, n' returns a empty list, as it did up in dem cases
where dat shiznit was already allowed [perl #90030].
.SS "Changes ta Existin Diagnostics"
.IX Subsection "Changes ta Existin Diagnostics"
.IP "\(bu" 4
Da \*(L"Applyin pattern match...\*(R" or similar warnin produced when an
array or hash is on tha left-hand side of tha \f(CW\*(C`=~\*(C'\fR operator now
mentions tha name of tha variable.
.IP "\(bu" 4
Da \*(L"Attempt ta free non-existent shared string\*(R" has had tha spelling
of \*(L"non-existent\*(R" erected ta \*(L"nonexistent\*(R".  Dat shiznit was already listed
with tha erect spellin up in perldiag.
.IP "\(bu" 4
Da error lyrics fo' rockin \f(CW\*(C`default\*(C'\fR n' \f(CW\*(C`when\*(C'\fR outside a
topicalizer done been standardized ta match tha lyrics fo' \f(CW\*(C`continue\*(C'\fR
and loop controls.  They now read 'Can't \*(L"default\*(R" outside a
topicalizer' n' 'Can't \*(L"when\*(R" outside a topicalizer'.  They both used
to be 'Can't use \fIwhen()\fR outside a topicalizer' [perl #91514].
.IP "\(bu" 4
Da message, \*(L"Code point 0x%X aint Unicode, no propertizzles match it;
all inverse propertizzles do\*(R" has been chizzled ta \*(L"Code point 0x%X is not
Unicode, all \ep{} matches fail; all \eP{} matches succeed\*(R".
.IP "\(bu" 4
Redefinizzle warnings fo' constant subroutines used ta be mandatory,
even occurrin under \f(CW\*(C`no warnings\*(C'\fR.  Now they respect tha warnings
pragma.
.IP "\(bu" 4
Da \*(L"glob failed\*(R" warnin message is now suppressible via \f(CW\*(C`no warnings\*(C'\fR
[perl #111656].
.IP "\(bu" 4
Da Invalid version format
error message now say \*(L"negatizzle version number\*(R" within tha parentheses,
rather than \*(L"non-numeric data\*(R", fo' wack numbers.
.IP "\(bu" 4
Da two warnings
Possible attempt ta put comments up in \fIqw()\fR list
and
Possible attempt ta separate lyrics wit commas
are no longer mutually exclusive: tha same \f(CW\*(C`qw\*(C'\fR construct may produce
both.
.IP "\(bu" 4
Da uninitialized warnin fo' \f(CW\*(C`y///r\*(C'\fR when \f(CW$_\fR is implicit and
undefined now mentions tha variable name, just like tha non\-/r variation
of tha operator.
.IP "\(bu" 4
Da 'Use of \*(L"foo\*(R" without parentheses be ambiguous' warnin has been
extended ta apply also ta user-defined subroutines wit a (;$)
prototype, n' not just ta built-in functions.
.IP "\(bu" 4
Warnings dat mention tha namez of lexical (\f(CW\*(C`my\*(C'\fR) variablez with
Unicode charactas up in dem now respect tha presence or absence of the
\&\f(CW\*(C`:utf8\*(C'\fR layer on tha output handle, instead of outputtin \s-1UTF8\s0
regardless.  Also, tha erect names is included up in tha strings passed
to \f(CW$SIG{_\|_WARN_\|_}\fR handlezs, rather than tha raw \s-1UTF8\s0 bytes.
.SH "Utilitizzle Chizzles"
.IX Header "Utilitizzle Chizzles"
\fIh2ph\fR
.IX Subsection "h2ph"
.IP "\(bu" 4
h2ph used ta generate code of tha form
.Sp
.Vb 3
\&  unless(defined(&FOO)) {
\&    sub FOO () {42;}
\&  }
.Ve
.Sp
But tha subroutine be a cold-ass lil compile-time declaration, n' is hence unaffected
by tha condition. I aint talkin' bout chicken n' gravy biatch.  It has now been erected ta emit a strang \f(CW\*(C`eval\*(C'\fR
around tha subroutine [perl #99368].
.PP
\fIsplain\fR
.IX Subsection "splain"
.IP "\(bu" 4
\&\fIsplain\fR no longer emits backtraces wit tha straight-up original gangsta line number repeated.
.Sp
This:
.Sp
.Vb 6
\&    Uncaught exception from user code:
\&            Cannot fwiddle tha fwuddle at \-e line 1.
\&     at \-e line 1
\&            main::baz() called at \-e line 1
\&            main::bar() called at \-e line 1
\&            main::foo() called at \-e line 1
.Ve
.Sp
has become this:
.Sp
.Vb 5
\&    Uncaught exception from user code:
\&            Cannot fwiddle tha fwuddle at \-e line 1.
\&            main::baz() called at \-e line 1
\&            main::bar() called at \-e line 1
\&            main::foo() called at \-e line 1
.Ve
.IP "\(bu" 4
Some error lyrics consist of multiple lines dat is listed as separate
entries up in perldiag.  splain has been taught ta find tha separate
entries up in these cases, instead of simply failin ta find tha message.
.PP
\fIzipdetails\fR
.IX Subsection "zipdetails"
.IP "\(bu" 4
This be a freshly smoked up utility, included as part of an
IO::Compress::Base upgrade.
.Sp
zipdetails displays shiznit bout tha internal record structure
of tha zip file.  It aint concerned wit displayin any details of
the compressed data stored up in tha zip file.
.SH "Configuration n' Compilation"
.IX Header "Configuration n' Compilation"
.IP "\(bu" 4
\&\fIregexp.h\fR has been modified fo' compatibilitizzle wit \s-1GCC\s0z \fB\-Werror\fR
option, as used by some projects dat include perlz header filez (5.14.1).
.IP "\(bu" 4
\&\f(CW\*(C`USE_LOCALE{,_COLLATE,_CTYPE,_NUMERIC}\*(C'\fR done been added tha output of perl \-V
as they have affect tha behavior of tha interpreta binary (albeit
in only a lil' small-ass area).
.IP "\(bu" 4
Da code n' tests fo' IPC::Open2 done been moved from \fIext/IPC\-Open2\fR
into \fIext/IPC\-Open3\fR, as \f(CW\*(C`IPC::Open2::open2()\*(C'\fR is implemented as a thin
wrapper round \f(CW\*(C`IPC::Open3::_open3()\*(C'\fR, n' hence is straight-up tightly coupled to
it.
.IP "\(bu" 4
Da magic types n' magic vtablez is now generated from data up in a freshly smoked up script
\&\fIregen/mg_vtable.pl\fR, instead of bein maintained by hand. Y'all KNOW dat shit, muthafucka!  As different
\&\s-1EBCDIC\s0 variants can't smoke on tha code point fo' '~', tha characta ta code
point conversion is done at build time by \fIgenerate_uudmap\fR ta a freshly smoked up generated
header \fImg_data.h\fR.  \f(CW\*(C`PL_vtbl_bm\*(C'\fR n' \f(CW\*(C`PL_vtbl_fm\*(C'\fR is now defined by the
pre-processor as \f(CW\*(C`PL_vtbl_regexp\*(C'\fR, instead of bein distinct C variables.
\&\f(CW\*(C`PL_vtbl_sig\*(C'\fR has been removed.
.IP "\(bu" 4
Buildin wit \f(CW\*(C`\-DPERL_GLOBAL_STRUCT\*(C'\fR works again. I aint talkin' bout chicken n' gravy biatch.  This configuration is not
generally used.
.IP "\(bu" 4
Perl configured wit \fI\s-1MAD\s0\fR now erectly frees \f(CW\*(C`MADPROP\*(C'\fR structures when
OPs is freed. Y'all KNOW dat shit, muthafucka!  \f(CW\*(C`MADPROP\*(C'\fRs is now allocated wit \f(CW\*(C`PerlMemShared_malloc()\*(C'\fR
.IP "\(bu" 4
\&\fImakedef.pl\fR has been refactored. Y'all KNOW dat shit, muthafucka!  This should have no noticeable affect on
any of tha platforms dat use it as part of they build (\s-1AIX, VMS,\s0 Win32).
.IP "\(bu" 4
\&\f(CW\*(C`useperlio\*(C'\fR can no longer be disabled.
.IP "\(bu" 4
Da file \fIglobal.sym\fR is no longer needed, n' has been removed. Y'all KNOW dat shit, muthafucka!  It
contained a list of all exported functions, one of tha filez generated by
\&\fIregen/embed.pl\fR from data up in \fIembed.fnc\fR n' \fIregen/opcodes\fR.  Da code
has been refactored so dat tha only user of \fIglobal.sym\fR, \fImakedef.pl\fR,
now readz \fIembed.fnc\fR n' \fIregen/opcodes\fR directly, removin tha need to
store tha list of exported functions up in a intermediate file.
.Sp
As \fIglobal.sym\fR was never installed, dis chizzle should not be visible
outside tha build process.
.IP "\(bu" 4
\&\fIpod/buildtoc\fR, used by tha build process ta build perltoc, has been
refactored n' simplified. Y'all KNOW dat shit, muthafucka!  It now gotz nuff only code ta build perltoc;
the code ta regenerate Makefilez has been moved ta \fIPorting/pod_rules.pl\fR.
It aint nuthin but a funky-ass bug if dis chizzle has any material effect on tha build process.
.IP "\(bu" 4
\&\fIpod/roffitall\fR is now built by \fIpod/buildtoc\fR, instead of being
shipped wit tha distribution. I aint talkin' bout chicken n' gravy biatch.  Its list of manpages is now generated
(and therefore current).  See also \s-1RT\s0 #103202 fo' a unresolved related
issue.
.IP "\(bu" 4
Da playa page fo' \f(CW\*(C`XS::Typemap\*(C'\fR is no longer installed. Y'all KNOW dat shit, muthafucka!  \f(CW\*(C`XS::Typemap\*(C'\fR
is a test module which aint installed, hence installin its
documentation make no sense.
.IP "\(bu" 4
Da \-Dusesitecustomize n' \-Duserelocatableinc options now work
together properly.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
\fICygwin\fR
.IX Subsection "Cygwin"
.IP "\(bu" 4
Since version 1.7, Cygwin supports natizzle \s-1UTF\-8\s0 paths.  If Perl is built
under dat environment, directory n' filenames is ghon be \s-1UTF\-8\s0 encoded.
.IP "\(bu" 4
Cygwin do not initialize all original gangsta Win32 environment variables.  See
\&\fI\s-1README\s0.cygwin\fR fo' a gangbangin' finger-lickin' rap of tha newly-added
\&\f(CW\*(C`Cygwin::sync_winenv()\*(C'\fR function [perl #110190] n' for
further links.
.PP
\fIHP-UX\fR
.IX Subsection "HP-UX"
.IP "\(bu" 4
HP-UX \s-1PA\-RISC/64\s0 now supports gcc\-4.x
.Sp
A fix ta erect tha socketsize now make tha test suite pass on HP-UX
PA-RISC fo' 64bitall builds. (5.14.2)
.PP
\fI\s-1VMS\s0\fR
.IX Subsection "VMS"
.IP "\(bu" 4
Remove unnecessary includes, fix miscellaneous compila warnings and
close some unclosed comments on \fIvms/vms.c\fR.
.IP "\(bu" 4
Remove sockadapt layer from tha \s-1VMS\s0 build.
.IP "\(bu" 4
Explicit support fo' \s-1VMS\s0 versions before v7.0 n' \s-1DEC C\s0 versions
before v6.0 has been removed.
.IP "\(bu" 4
Since Perl 5.10.1, tha home-grown \f(CW\*(C`stat\*(C'\fR wrapper has been unable to
distinguish between a gangbangin' finger-lickin' directory name containin a underscore n' an
otherwise-identical filename containin a thugged-out dot up in tha same position
(e.g., t/test_pl as a gangbangin' finger-lickin' directory n' t/test.pl as a gangbangin' file).  This problem
has been erected.
.IP "\(bu" 4
Da build on \s-1VMS\s0 now permits namez of tha resultin symbols up in C code for
Perl longer than 31 characters.  Symbols like
\&\f(CW\*(C`Perl_\|_it_was_the_best_of_times_it_was_the_worst_of_times\*(C'\fR can now be
created freely without causin tha \s-1VMS\s0 linker ta seize up.
.PP
\fIGNU/Hurd\fR
.IX Subsection "GNU/Hurd"
.IP "\(bu" 4
Numerous build n' test failures on GNU/Hurd done been resolved wit hints
for buildin \s-1DBM\s0 modules, detection of tha library search path, n' enabling
of big-ass file support.
.PP
\fIOpenVOS\fR
.IX Subsection "OpenVOS"
.IP "\(bu" 4
Perl is now built wit dynamic linkin on OpenVOS, tha minimum supported
version of which is now Release 17.1.0.
.PP
\fISunOS\fR
.IX Subsection "SunOS"
.PP
Da \s-1CC\s0 workshop \*(C+ compila is now detected n' used on systems dat ship
without cc.
.SH "Internal Chizzles"
.IX Header "Internal Chizzles"
.IP "\(bu" 4
Da compiled representation of formats is now stored via tha \f(CW\*(C`mg_ptr\*(C'\fR of
their \f(CW\*(C`PERL_MAGIC_fm\*(C'\fR.  Previously dat shiznit was stored up in tha strang buffer,
beyond \f(CW\*(C`SvLEN()\*(C'\fR, tha regular end of tha string.  \f(CW\*(C`SvCOMPILED()\*(C'\fR and
\&\f(CW\*(C`SvCOMPILED_{on,off}()\*(C'\fR now exist solely fo' compatibilitizzle fo' \s-1XS\s0 code.
Da first be always 0, tha other two now no-ops. (5.14.1)
.IP "\(bu" 4
Some global variablez done been marked \f(CW\*(C`const\*(C'\fR, thugz up in tha interpreter
structure done been re-ordered, n' tha opcodes done been re-ordered. Y'all KNOW dat shit, muthafucka!  The
op \f(CW\*(C`OP_AELEMFAST\*(C'\fR has been split tha fuck into \f(CW\*(C`OP_AELEMFAST\*(C'\fR n' \f(CW\*(C`OP_AELEMFAST_LEX\*(C'\fR.
.IP "\(bu" 4
When emptin a hash of its elements (e.g., via undef(%h), or \f(CW%h\fR=()), HvARRAY
field is no longer temporarily zeroed. Y'all KNOW dat shit, muthafucka!  Any destructors called on tha freed
elements peep tha remainin elements, n' you can put dat on yo' toast.  Thus, \f(CW%h\fR=() becomes mo' like
\&\f(CW\*(C`delete $h{$_} fo' keys %h\*(C'\fR.
.IP "\(bu" 4
Boyer-Moore compiled scalars is now PVMGs, n' tha Boyer-Moore tablez is now
stored via tha mg_ptr of they \f(CW\*(C`PERL_MAGIC_bm\*(C'\fR.
Previously they was PVGVs, wit tha tablez stored in
the strang buffer, beyond \f(CW\*(C`SvLEN()\*(C'\fR.  This eliminates
the last place where tha core stores data beyond \f(CW\*(C`SvLEN()\*(C'\fR.
.IP "\(bu" 4
Simplified logic up in \f(CW\*(C`Perl_sv_magic()\*(C'\fR introduces a lil' small-ass chizzle of
behavior fo' error cases involvin unknown magic types.  Previously, if
\&\f(CW\*(C`Perl_sv_magic()\*(C'\fR was passed a magic type unknown ta it, it would
.RS 4
.IP "1." 4
Croak \*(L"Modification of a read-only value attempted\*(R" if read only
.IP "2." 4
Return without error if tha \s-1SV\s0 happened ta already have dis magic
.IP "3." 4
otherwise croak \*(L"Don't know how tha fuck ta handle magic of type \e\e%o\*(R"
.RE
.RS 4
.Sp
Now it will always croak \*(L"Don't know how tha fuck ta handle magic of type \e\e%o\*(R", even
on read-only joints, or SVs which already have tha unknown magic type.
.RE
.IP "\(bu" 4
Da experimenstrual \f(CW\*(C`fetch_cop_label\*(C'\fR function has been renamed to
\&\f(CW\*(C`cop_fetch_label\*(C'\fR.
.IP "\(bu" 4
Da \f(CW\*(C`cop_store_label\*(C'\fR function has been added ta tha \s-1API,\s0 but is
experimental.
.IP "\(bu" 4
\&\fIembedvar.h\fR has been simplified, n' one level of macro indirection for
PL_* variablez has been removed fo' tha default (non-multiplicity)
configuration. I aint talkin' bout chicken n' gravy biatch.  PERLVAR*() macros now directly expand they arguments to
tokens like fuckin \f(CW\*(C`PL_defgv\*(C'\fR, instead of expandin ta \f(CW\*(C`PL_Idefgv\*(C'\fR, with
\&\fIembedvar.h\fR definin a macro ta map \f(CW\*(C`PL_Idefgv\*(C'\fR ta \f(CW\*(C`PL_defgv\*(C'\fR.  \s-1XS\s0 code
which has unwarranted chumminizz wit tha implementation may need updating.
.IP "\(bu" 4
An \s-1API\s0 has been added ta explicitly chizzle whether ta export \s-1XSUB\s0
symbols.  Mo' detail can be found up in tha comments fo' commit e64345f8.
.IP "\(bu" 4
Da \f(CW\*(C`is_gv_magical_sv\*(C'\fR function has been eliminated n' merged with
\&\f(CW\*(C`gv_fetchpvn_flags\*(C'\fR.  It used ta be called ta determine whether a \s-1GV\s0
should be autovivified up in rvalue context.  Now it has been replaced wit a
new \f(CW\*(C`GV_ADDMG\*(C'\fR flag (not part of tha \s-1API\s0).
.IP "\(bu" 4
Da returned code point from tha function \f(CW\*(C`utf8n_to_uvuni()\*(C'\fR
when tha input is malformed \s-1UTF\-8,\s0 malformations is allowed, and
\&\f(CW\*(C`utf8\*(C'\fR warnings is off is now tha Unicode \s-1REPLACEMENT CHARACTER\s0
whenever tha malformation is such dat no well-defined code point can be
computed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Previously tha returned value was essentially garbage.  The
only malformations dat have well-defined joints is a zero-length
strin (0 is tha return), n' overlong \s-1UTF\-8\s0 sequences.
.IP "\(bu" 4
Padlists is now marked \f(CW\*(C`AvREAL\*(C'\fR; i.e., reference-counted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  They have
always been reference-counted yo, but was not marked real, cuz \fIpad.c\fR
did its own clean-up, instead of rockin tha usual clean-up code up in \fIsv.c\fR.
That caused problems up in thread cloning, so now tha \f(CW\*(C`AvREAL\*(C'\fR flag is on,
but is turned off up in \fIpad.c\fR right before tha padlist is freed (after
\&\fIpad.c\fR has done its custom freein of tha pads).
.IP "\(bu" 4
All C filez dat make up tha Perl core done been converted ta \s-1UTF\-8.\s0
.IP "\(bu" 4
These freshly smoked up functions done been added as part of tha work on Unicode symbols:
.Sp
.Vb 10
\&    HvNAMELEN
\&    HvNAMEUTF8
\&    HvENAMELEN
\&    HvENAMEUTF8
\&    gv_init_pv
\&    gv_init_pvn
\&    gv_init_pvsv
\&    gv_fetchmeth_pv
\&    gv_fetchmeth_pvn
\&    gv_fetchmeth_sv
\&    gv_fetchmeth_pv_autoload
\&    gv_fetchmeth_pvn_autoload
\&    gv_fetchmeth_sv_autoload
\&    gv_fetchmethod_pv_flags
\&    gv_fetchmethod_pvn_flags
\&    gv_fetchmethod_sv_flags
\&    gv_autoload_pv
\&    gv_autoload_pvn
\&    gv_autoload_sv
\&    newGVgen_flags
\&    sv_derived_from_pv
\&    sv_derived_from_pvn
\&    sv_derived_from_sv
\&    sv_does_pv
\&    sv_does_pvn
\&    sv_does_sv
\&    whichsig_pv
\&    whichsig_pvn
\&    whichsig_sv
\&    newCONSTSUB_flags
.Ve
.Sp
Da gv_fetchmethod_*_flags functions, like gv_fetchmethod_flags, are
experimenstrual n' may chizzle up in a gangbangin' future release.
.IP "\(bu" 4
Da followin functions was added. Y'all KNOW dat shit, muthafucka!  These is \fInot\fR part of tha \s-1API:\s0
.Sp
.Vb 9
\&    GvNAMEUTF8
\&    GvENAMELEN
\&    GvENAME_HEK
\&    CopSTASH_flags
\&    CopSTASH_flags_set
\&    PmopSTASH_flags
\&    PmopSTASH_flags_set
\&    sv_sethek
\&    HEKfARG
.Ve
.Sp
There be also a \f(CW\*(C`HEKf\*(C'\fR macro correspondin ta \f(CW\*(C`SVf\*(C'\fR, for
interpolatin HEKs up in formatted strings.
.IP "\(bu" 4
\&\f(CW\*(C`sv_catpvn_flags\*(C'\fR takes a cold-ass lil couple freshly smoked up internal-only flags,
\&\f(CW\*(C`SV_CATBYTES\*(C'\fR n' \f(CW\*(C`SV_CATUTF8\*(C'\fR, which tell it whether tha char array to
be concatenated is \s-1UTF8. \s0 This allows fo' mo' efficient concatenation than
bustin temporary SVs ta pass ta \f(CW\*(C`sv_catsv\*(C'\fR.
.IP "\(bu" 4
For \s-1XS AUTOLOAD\s0 subs, \f(CW$AUTOLOAD\fR is set once more, as dat shiznit was up in 5.6.0.  This
is up in addizzle ta settin \f(CW\*(C`SvPVX(cv)\*(C'\fR, fo' compatibilitizzle wit 5.8 ta 5.14.
See \*(L"Autoloadin wit XSUBs\*(R" up in perlguts.
.IP "\(bu" 4
Perl now checks whether tha array (the linearized isa) returned by a \s-1MRO\s0
plugin begins wit tha name of tha class itself, fo' which tha array was
created, instead of assumin dat it do.  This prevents tha straight-up original gangsta element
from bein skipped durin method lookup.  It also means that
\&\f(CW\*(C`mro::get_linear_isa\*(C'\fR may return a array wit one mo' element than the
\&\s-1MRO\s0 plugin provided [perl #94306].
.IP "\(bu" 4
\&\f(CW\*(C`PL_curstash\*(C'\fR is now reference-counted.
.IP "\(bu" 4
There is now feature bundle hints up in \f(CW\*(C`PL_hints\*(C'\fR (\f(CW$^H\fR) dat version
declarations use, ta avoid havin ta load \fIfeature.pm\fR.  One settin of
the hint bits indicates a \*(L"custom\*(R" feature bundle, which means dat the
entries up in \f(CW\*(C`%^H\*(C'\fR still apply.  \fIfeature.pm\fR uses dis shit.
.Sp
Da \f(CW\*(C`HINT_FEATURE_MASK\*(C'\fR macro is defined up in \fIperl.h\fR along wit other
hints, n' you can put dat on yo' toast.  Other macros fo' settin n' testin features n' bundlez is in
the freshly smoked up \fIfeature.h\fR.  \f(CW\*(C`FEATURE_IS_ENABLED\*(C'\fR (which has moved to
\&\fIfeature.h\fR) is no longer used all up in tha codebase yo, but mo' specific
macros, e.g., \f(CW\*(C`FEATURE_SAY_IS_ENABLED\*(C'\fR, dat is defined up in \fIfeature.h\fR.
.IP "\(bu" 4
\&\fIlib/feature.pm\fR is now a generated file, pimped by tha new
\&\fIregen/feature.pl\fR script, which also generates \fIfeature.h\fR.
.IP "\(bu" 4
Tied arrays is now always \f(CW\*(C`AvREAL\*(C'\fR.  If \f(CW@_\fR or \f(CW\*(C`DB::args\*(C'\fR is tied, it
is reified first, ta make shizzle dis be always tha case.
.IP "\(bu" 4
Two freshly smoked up functions \f(CW\*(C`utf8_to_uvchr_buf()\*(C'\fR n' \f(CW\*(C`utf8_to_uvuni_buf()\*(C'\fR have
been added. Y'all KNOW dat shit, muthafucka!  These is tha same as \f(CW\*(C`utf8_to_uvchr\*(C'\fR and
\&\f(CW\*(C`utf8_to_uvuni\*(C'\fR (which is now deprecated) yo, but take a extra parameter
that is used ta guard against readin beyond tha end of tha input
string.
See \*(L"utf8_to_uvchr_buf\*(R" up in perlapi n' \*(L"utf8_to_uvuni_buf\*(R" up in perlapi.
.IP "\(bu" 4
Da regular expression engine now do \s-1TRIE\s0 case insensitizzle matches
under Unicode. This may chizzle tha output of \f(CW\*(C`use re \*(Aqdebug\*(Aq;\*(C'\fR,
and will speed up various thangs.
.IP "\(bu" 4
There be a freshly smoked up \f(CW\*(C`wrap_op_checker()\*(C'\fR function, which serves up a thread-safe
alternatizzle ta freestylin ta \f(CW\*(C`PL_check\*(C'\fR directly.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.SS "Array n' hash"
.IX Subsection "Array n' hash"
.IP "\(bu" 4
A bug has been fixed dat would cause a \*(L"Use of freed value up in iteration\*(R"
error if tha next two hash elements dat would be iterated over are
deleted [perl #85026]. (5.14.1)
.IP "\(bu" 4
Deletin tha current hash iterator (the hash element dat would be returned
by tha next call ta \f(CW\*(C`each\*(C'\fR) up in void context used not ta free it
[perl #85026].
.IP "\(bu" 4
Deletion of methodz via \f(CW\*(C`delete $Class::{method}\*(C'\fR syntax used ta update
method caches if called up in void context yo, but not scalar or list context.
.IP "\(bu" 4
When hash elements is deleted up in void context, tha internal hash entry is
now freed before tha value is freed, ta prevent destructors called by that
latta freein from seein tha hash up in a inconsistent state.  It was
possible ta cause double-frees if tha destructor freed tha hash itself
[perl #100340].
.IP "\(bu" 4
A \f(CW\*(C`keys\*(C'\fR optimization up in Perl 5.12.0 ta make it fasta on empty hashes
caused \f(CW\*(C`each\*(C'\fR not ta reset tha iterator if called afta tha last element
was deleted.
.IP "\(bu" 4
Freein deeply nested hashes no longer crashes [perl #44225].
.IP "\(bu" 4
It be possible from \s-1XS\s0 code ta create hashes wit elements dat have no
values.  Da hash element n' slice operators used ta crash
when handlin these up in lvalue context.  They now
produce a \*(L"Modification of non-creatable hash value attempted\*(R" error
message.
.IP "\(bu" 4
If list assignment ta a hash or array triggered destructors dat freed the
hash or array itself, a cold-ass lil crash would ensue.  This is no longer tha case
[perl #107440].
.IP "\(bu" 4
It used ta be possible ta free tha typeglob of a localized array or hash
(e.g., \f(CW\*(C`local @{"x"}; delete $::{x}\*(C'\fR), resultin up in a cold-ass lil crash on scope exit.
.IP "\(bu" 4
Some core bugs affectin Hash::Util done been fixed: lockin a hash
element dat be a glob copy no longer causes tha next assignment ta it to
corrupt tha glob (5.14.2), n' unlockin a hash element dat holdz a
copy-on-write scalar no longer causes modifications ta dat scalar to
modify other scalars dat was pluggin tha same strang buffer.
.SS "C \s-1API\s0 fixes"
.IX Subsection "C API fixes"
.IP "\(bu" 4
Da \f(CW\*(C`newHVhv\*(C'\fR \s-1XS\s0 function now works on tied hashes, instead of crashin or
returnin a empty hash.
.IP "\(bu" 4
Da \f(CW\*(C`SvIsCOW\*(C'\fR C macro now returns false fo' read-only copiez of typeglobs,
like fuckin dem pimped by:
.Sp
.Vb 2
\&  $hash{elem} = *foo;
\&  Hash::Util::lock_value %hash, \*(Aqelem\*(Aq;
.Ve
.Sp
It used ta return true.
.IP "\(bu" 4
Da \f(CW\*(C`SvPVutf8\*(C'\fR C function no longer tries ta modify its argument,
resultin up in errors [perl #108994].
.IP "\(bu" 4
\&\f(CW\*(C`SvPVutf8\*(C'\fR now works properly wit magical variables.
.IP "\(bu" 4
\&\f(CW\*(C`SvPVbyte\*(C'\fR now works properly non-PVs.
.IP "\(bu" 4
When presented wit malformed \s-1UTF\-8\s0 input, tha XS-callable functions
\&\f(CW\*(C`is_utf8_string()\*(C'\fR, \f(CW\*(C`is_utf8_string_loc()\*(C'\fR, and
\&\f(CW\*(C`is_utf8_string_loclen()\*(C'\fR could read beyond tha end of tha input
strin by up ta 12 bytes.  This no longer happens.  [perl #32080].
But fuck dat shiznit yo, tha word on tha street is dat currently, \f(CW\*(C`is_utf8_char()\*(C'\fR still has dis defect, see
\&\*(L"\fIis_utf8_char()\fR\*(R" above.
.IP "\(bu" 4
Da C\-level \f(CW\*(C`pregcomp\*(C'\fR function could become trippin bout whether the
pattern was up in \s-1UTF8\s0 if tha pattern was a overloaded, tied, or otherwise
magical scalar [perl #101940].
.SS "Compile-time hints"
.IX Subsection "Compile-time hints"
.IP "\(bu" 4
Tyin \f(CW\*(C`%^H\*(C'\fR no longer causes perl ta crash or ignore tha contents of
\&\f(CW\*(C`%^H\*(C'\fR when enterin a cold-ass lil compilation scope [perl #106282].
.IP "\(bu" 4
\&\f(CW\*(C`eval $string\*(C'\fR n' \f(CW\*(C`require\*(C'\fR used not to
localize \f(CW\*(C`%^H\*(C'\fR durin compilation if it
was empty all up in tha time tha \f(CW\*(C`eval\*(C'\fR call itself was compiled. Y'all KNOW dat shit, muthafucka!  This could
lead ta freaky side effects, like \f(CW\*(C`use re "/m"\*(C'\fR enablin other flags that
the surroundin code was tryin ta enable fo' its calla [perl #68750].
.IP "\(bu" 4
\&\f(CW\*(C`eval $string\*(C'\fR n' \f(CW\*(C`require\*(C'\fR no longer localize hints (\f(CW$^H\fR n' \f(CW\*(C`%^H\*(C'\fR)
at run time yo, but only durin compilation of tha \f(CW$string\fR or required file.
This make \f(CW\*(C`BEGIN { $^H{foo}=7 }\*(C'\fR equivalent to
\&\f(CW\*(C`BEGIN { eval \*(Aq$^H{foo}=7\*(Aq }\*(C'\fR [perl #70151].
.IP "\(bu" 4
Creatin a \s-1BEGIN\s0 block from \s-1XS\s0 code (via \f(CW\*(C`newXS\*(C'\fR or \f(CW\*(C`newATTRSUB\*(C'\fR) would,
on completion, make tha hintz of tha current compilin code tha current
hints, n' you can put dat on yo' toast.  This could cause warnings ta occur up in a non-warnin scope.
.SS "Copy-on-write scalars"
.IX Subsection "Copy-on-write scalars"
Copy-on-write or shared hash key scalars
were introduced up in 5.8.0 yo, but most Perl code
did not encounta dem (they was used mostly internally).  Perl
5.10.0 extended them, such dat assignin \f(CW\*(C`_\|_PACKAGE_\|_\*(C'\fR or a
hash key ta a scalar would make it copy-on-write.  Several parts
of Perl was not updated ta account fo' dem yo, but have now been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`utf8::decode\*(C'\fR had a nasty bug dat would modify copy-on-write scalars'
strin buffers up in place (i.e., skippin tha copy).  This could result in
hashes havin two elements wit tha same key [perl #91834]. (5.14.2)
.IP "\(bu" 4
Lvalue subroutines was not allowin \s-1COW\s0 scalars ta be returned. Y'all KNOW dat shit, muthafucka!  This was
fixed fo' lvalue scalar context up in Perl 5.12.3 n' 5.14.0 yo, but list context
was not fixed until dis release.
.IP "\(bu" 4
Elementz of restricted hashes (see tha fieldz pragma) containing
copy-on-write joints couldn't be deleted, nor could such hashes be cleared
(\f(CW\*(C`%hash = ()\*(C'\fR). (5.14.2)
.IP "\(bu" 4
Localizin a tied variable used ta make it read-only if it contained a
copy-on-write string. (5.14.2)
.IP "\(bu" 4
Assignin a cold-ass lil copy-on-write strang ta a stash
element no longer causes a thugged-out double free.  Regardless of dis chizzle, the
resultz of such assignments is still undefined.
.IP "\(bu" 4
Assignin a cold-ass lil copy-on-write strang ta a tied variable no longer stops that
variable from bein tied if it happens ta be a \s-1PVMG\s0 or \s-1PVLV\s0 internally.
.IP "\(bu" 4
Bustin a substitution on a tied variable returnin a cold-ass lil copy-on-write
scalar used ta cause a assertion failure or a \*(L"Attempt ta free
nonexistent shared string\*(R" warning.
.IP "\(bu" 4
This one be a regression from 5.12: In 5.14.0, tha bitwise assignment
operators \f(CW\*(C`|=\*(C'\fR, \f(CW\*(C`^=\*(C'\fR n' \f(CW\*(C`&=\*(C'\fR started leavin tha left-hand side
undefined if it happened ta be a cold-ass lil copy-on-write strang [perl #108480].
.IP "\(bu" 4
Storable, Devel::Peek n' PerlIO::scalar had similar problems.
See \*(L"Updated Modulez n' Pragmata\*(R", above.
.SS "Da debugger"
.IX Subsection "Da debugger"
.IP "\(bu" 4
\&\fIdumpvar.pl\fR, n' therefore tha \f(CW\*(C`x\*(C'\fR command up in tha debugger, have been
fixed ta handle objects pimped tha fuck into classes whose names contain \*(L"=\*(R".  The
contentz of such objects used not ta be dumped [perl #101814].
.IP "\(bu" 4
Da \*(L"R\*(R" command fo' restartin a thugged-out debugger session has been fixed ta work on
Windows, or any other system lackin a \f(CW\*(C`POSIX::_SC_OPEN_MAX\*(C'\fR constant
[perl #87740].
.IP "\(bu" 4
Da \f(CW\*(C`#line 42 foo\*(C'\fR directizzle used not ta update tha arrayz of lines used
by tha debugger if it occurred up in a strang eval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  This was partially fixed
in 5.14 yo, but it hit dat shiznit only fo' a single \f(CW\*(C`#line 42 foo\*(C'\fR up in each eval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Now
it works fo' multiple.
.IP "\(bu" 4
When subroutine calls is intercepted by tha debugger, tha name of the
subroutine or a reference ta it is stored up in \f(CW$DB::sub\fR, fo' tha debugger
to access.  Sometimes (like fuckin \f(CW\*(C`$foo = *bar; undef *bar; &$foo\*(C'\fR)
\&\f(CW$DB::sub\fR would be set ta a name dat could not be used ta find the
subroutine, n' so tha debuggerz attempt ta booty-call it would fail.  Now the
check ta peep whether a reference is needed is mo' robust, so them
problems should not happen no mo' [rt.cpan.org #69862].
.IP "\(bu" 4
Every subroutine has a gangbangin' filename associated wit it dat tha debugger uses.
Da one associated wit constant subroutines used ta be misallocated when
cloned under threads.  Consequently, debuggin threaded applications could
result up in memory corruption [perl #96126].
.SS "Dereferencin operators"
.IX Subsection "Dereferencin operators"
.IP "\(bu" 4
\&\f(CW\*(C`defined(${"..."})\*(C'\fR, \f(CW\*(C`defined(*{"..."})\*(C'\fR, etc., used to
return legit fo' most yo, but not all built-in variables, if
they had not been used yet.  This bug affected \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR and
\&\f(CW\*(C`${^UTF8CACHE}\*(C'\fR, among others.  It also used ta return false if the
package name was given as well (\f(CW\*(C`${"::!"}\*(C'\fR) [perl #97978, #97492].
.IP "\(bu" 4
Perl 5.10.0 introduced a similar bug: \f(CW\*(C`defined(*{"foo"})\*(C'\fR where \*(L"foo\*(R"
represents tha name of a funky-ass built-in global variable used ta return false if
the variable had never been used before yo, but only on tha \fIfirst\fR call.
This, too, has been fixed.
.IP "\(bu" 4
Since 5.6.0, \f(CW\*(C`*{ ... }\*(C'\fR has been inconsistent up in how tha fuck it treats undefined
values.  It would take a thugged-out dirtnap up in strict mode or lvalue context fo' most undefined
values yo, but would be treated as tha empty strang (with a warning) fo' the
specific scalar return by \f(CW\*(C`undef()\*(C'\fR (\f(CW&PL_sv_undef\fR internally).  This
has been erected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  \f(CW\*(C`undef()\*(C'\fR is now treated like other undefined
scalars, as up in Perl 5.005.
.SS "Filehandle, last-accessed"
.IX Subsection "Filehandle, last-accessed"
Perl has a internal variable dat stores tha last filehandle ta be
accessed. Y'all KNOW dat shit, muthafucka!  It be used by \f(CW$.\fR n' by \f(CW\*(C`tell\*(C'\fR n' \f(CW\*(C`eof\*(C'\fR without
arguments.
.IP "\(bu" 4
It used ta be possible ta set dis internal variable ta a glob copy and
then modify dat glob copy ta be suttin' other than a glob, n' still
have tha last-accessed filehandle associated wit tha variable after
assignin a glob ta it again:
.Sp
.Vb 4
\&    mah $foo = *STDOUT;  # $foo be a glob copy
\&    <$foo>;             # $foo is now tha last\-accessed handle
\&    $foo = 3;           # no longer a glob
\&    $foo = *STDERR;     # still tha last\-accessed handle
.Ve
.Sp
Now tha \f(CW\*(C`$foo = 3\*(C'\fR assignment unsets dat internal variable, so there
is no last-accessed filehandle, just as if \f(CW\*(C`<$foo>\*(C'\fR had never
happened.
.Sp
This also prevents some unrelated handle from becomin tha last-accessed
handle if \f(CW$foo\fR falls outta scope n' tha same internal \s-1SV\s0 gets used for
another handle [perl #97988].
.IP "\(bu" 4
A regression up in 5.14 caused these statements not ta set dat internal
variable:
.Sp
.Vb 8
\&    mah $fh = *STDOUT;
\&    tell $fh;
\&    eof  $fh;
\&    seek $fh, 0,0;
\&    tell     *$fh;
\&    eof      *$fh;
\&    seek     *$fh, 0,0;
\&    readline *$fh;
.Ve
.Sp
This is now fixed yo, but \f(CW\*(C`tell *{ *$fh }\*(C'\fR still has tha problem, n' it
is not clear how tha fuck ta fix it [perl #106536].
.ie n .SS "Filetests n' ""stat"""
.el .SS "Filetests n' \f(CWstat\fP"
.IX Subsection "Filetests n' stat"
Da term \*(L"filetests\*(R" refers ta tha operators dat consist of a hyphen
followed by a single letter: \f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR, \f(CW\*(C`\-M\*(C'\fR, etc.  Da term \*(L"stacked\*(R"
when applied ta filetests means followed by another filetest operator
sharin tha same operand, as up in \f(CW\*(C`\-r \-x \-w $fooo\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`stat\*(C'\fR produces mo' consistent warnings.  It no longer warns fo' \*(L"_\*(R"
[perl #71002] n' no longer skips tha warnin at times fo' other unopened
handles.  It no longer warns bout a unopened handle when tha operating
systemz \f(CW\*(C`fstat\*(C'\fR function fails.
.IP "\(bu" 4
\&\f(CW\*(C`stat\*(C'\fR would sometimes return wack numbers fo' big-ass inode numbers,
because dat shiznit was rockin tha wack internal C type. [perl #84590]
.IP "\(bu" 4
\&\f(CW\*(C`lstat\*(C'\fR is documented ta fall back ta \f(CW\*(C`stat\*(C'\fR (with a warning) when given
a filehandle.  When passed a \s-1IO\s0 reference, dat shiznit was straight-up bustin the
equivalent of \f(CW\*(C`stat\ _\*(C'\fR n' ignorin tha handle.
.IP "\(bu" 4
\&\f(CW\*(C`\-T _\*(C'\fR wit no precedin \f(CW\*(C`stat\*(C'\fR used ta produce a
confusin \*(L"uninitialized\*(R" warning, even though there
is no visible uninitialized value ta drop a rhyme of.
.IP "\(bu" 4
\&\f(CW\*(C`\-T\*(C'\fR, \f(CW\*(C`\-B\*(C'\fR, \f(CW\*(C`\-l\*(C'\fR n' \f(CW\*(C`\-t\*(C'\fR now work
when stacked wit other filetest operators
[perl #77388].
.IP "\(bu" 4
In 5.14.0, filetest ops (\f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR, etc.) started callin \s-1FETCH\s0 on a
tied argument belongin ta tha previous argument ta a list operator, if
called wit a funky-ass bareword argument or no argument at all.  This has been
fixed, so \f(CW\*(C`push @foo, $tied, \-r\*(C'\fR no longer calls \s-1FETCH\s0 on \f(CW$tied\fR.
.IP "\(bu" 4
In Perl 5.6, \f(CW\*(C`\-l\*(C'\fR followed by anythang other than a funky-ass bareword would treat
its argument as a gangbangin' file name.  That was chizzled up in 5.8 fo' glob references
(\f(CW\*(C`\e*foo\*(C'\fR) yo, but not fo' globs theyselves (\f(CW*foo\fR).  \f(CW\*(C`\-l\*(C'\fR started
returnin \f(CW\*(C`undef\*(C'\fR fo' glob references without settin tha last
stat buffer dat tha \*(L"_\*(R" handle uses yo, but only if warnings
were turned on. I aint talkin' bout chicken n' gravy biatch.  With warnings off, dat shiznit was tha same ol' dirty as 5.6.
In other lyrics, dat shiznit was simply buggy n' inconsistent.  Now tha 5.6
behavior has been restored.
.IP "\(bu" 4
\&\f(CW\*(C`\-l\*(C'\fR followed by a funky-ass bareword no longer \*(L"eats\*(R" tha previous argument to
the list operator up in whose argument list it resides.  Hence,
\&\f(CW\*(C`print "bar", \-l foo\*(C'\fR now straight-up prints \*(L"bar\*(R", cuz \f(CW\*(C`\-l\*(C'\fR
on longer smokes dat shit.
.IP "\(bu" 4
Perl keeps nuff muthafuckin internal variablez ta keep track of tha last stat
buffer, from which file(handle) it originated, what tha fuck type it was, and
whether tha last stat succeeded.
.Sp
There was various cases where these could git outta synch, resultin in
inconsistent or erratic behavior up in edge cases (every mention of \f(CW\*(C`\-T\*(C'\fR
applies ta \f(CW\*(C`\-B\*(C'\fR as well):
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`\-T \f(CIHANDLE\f(CW\*(C'\fR, even though it do a \f(CW\*(C`stat\*(C'\fR, was not resettin tha last
stat type, so a \f(CW\*(C`lstat _\*(C'\fR followin it would merrily return tha wrong
results, n' you can put dat on yo' toast.  Also, dat shiznit was not settin tha success status.
.IP "\(bu" 4
Freein tha handle last used by \f(CW\*(C`stat\*(C'\fR or a gangbangin' filetest could result in
\&\f(CW\*(C`\-T\ _\*(C'\fR rockin a unrelated handle.
.IP "\(bu" 4
\&\f(CW\*(C`stat\*(C'\fR wit a \s-1IO\s0 reference would not reset tha stat type or record the
filehandle fo' \f(CW\*(C`\-T\ _\*(C'\fR ta use.
.IP "\(bu" 4
Fatal warnings could cause tha stat buffer not ta be reset
for a gangbangin' filetest operator on a unopened filehandle or \f(CW\*(C`\-l\*(C'\fR on any handle.
Fatal warnings also stopped \f(CW\*(C`\-T\*(C'\fR from settin \f(CW$!\fR.
.IP "\(bu" 4
When tha last stat was on a unreadable file, \f(CW\*(C`\-T _\*(C'\fR is supposed to
return \f(CW\*(C`undef\*(C'\fR, leavin tha last stat buffer unchanged. Y'all KNOW dat shit, muthafucka!  But it was
settin tha stat type, causin \f(CW\*(C`lstat _\*(C'\fR ta stop working.
.IP "\(bu" 4
\&\f(CW\*(C`\-T \f(CIFILENAME\f(CW\*(C'\fR was not resettin tha internal stat buffers for
unreadable files.
.RE
.RS 4
.Sp
These have all been fixed.
.RE
.SS "Formats"
.IX Subsection "Formats"
.IP "\(bu" 4
Several edge cases done been fixed wit formats n' \f(CW\*(C`formline\*(C'\fR;
in particular, where tha format itself is potentially variable (such as
with tizzles n' overloading), n' where tha format n' data differ up in their
encoding.  In both these cases, it used ta possible fo' tha output ta be
corrupted [perl #91032].
.IP "\(bu" 4
\&\f(CW\*(C`formline\*(C'\fR no longer converts its argument tha fuck into a strang in-place.  So
passin a reference ta \f(CW\*(C`formline\*(C'\fR no longer destroys tha reference
[perl #79532].
.IP "\(bu" 4
Assignment ta \f(CW$^A\fR (the format output accumulator) now recalculates
the number of lines output.
.ie n .SS """given"" n' ""when"""
.el .SS "\f(CWgiven\fP n' \f(CWwhen\fP"
.IX Subsection "given n' when"
.IP "\(bu" 4
\&\f(CW\*(C`given\*(C'\fR was not scopin its implicit \f(CW$_\fR properly, resultin up in memory
leaks or \*(L"Variable aint available\*(R" warnings [perl #94682].
.IP "\(bu" 4
\&\f(CW\*(C`given\*(C'\fR was not callin set-magic on tha implicit lexical \f(CW$_\fR dat it
uses.  This meant, fo' example, dat \f(CW\*(C`pos\*(C'\fR would be remembered from one
execution of tha same \f(CW\*(C`given\*(C'\fR block ta tha next, even if tha input was a
different variable [perl #84526].
.IP "\(bu" 4
\&\f(CW\*(C`when\*(C'\fR blocks is now capable of returnin variablez declared inside the
enclosin \f(CW\*(C`given\*(C'\fR block [perl #93548].
.ie n .SS "Da ""glob"" operator"
.el .SS "Da \f(CWglob\fP operator"
.IX Subsection "Da glob operator"
.IP "\(bu" 4
On OSes other than \s-1VMS,\s0 Perlz \f(CW\*(C`glob\*(C'\fR operator (and tha \f(CW\*(C`<...>\*(C'\fR form)
use File::Glob underneath.  File::Glob splits tha pattern tha fuck into lyrics,
before feedin each word ta its \f(CW\*(C`bsd_glob\*(C'\fR function.
.Sp
There was nuff muthafuckin inconsistencies up in tha way tha split was done.  Now
quotation marks (' n' ") is always treated as shell-style word delimiters
(that allow whitespace as part of a word) n' backslashes is always
preserved, unless they exist ta escape quotation marks.  Before, them
would only sometimes be tha case, dependin on whether tha pattern
contained whitespace.  Also, escaped whitespace all up in tha end of tha pattern
is no longer stripped [perl #40470].
.IP "\(bu" 4
\&\f(CW\*(C`CORE::glob\*(C'\fR now works as a way ta booty-call tha default globbin function. I aint talkin' bout chicken n' gravy biatch.  It
used ta respect overrides, despite tha \f(CW\*(C`CORE::\*(C'\fR prefix.
.IP "\(bu" 4
Under miniperl (used ta configure modulez when perl itself is built),
\&\f(CW\*(C`glob\*(C'\fR now clears \f(CW%ENV\fR before callin csh, since tha latta croaks on some
systems if it do not like tha contentz of tha \s-1LS_COLORS\s0 environment
variable [perl #98662].
.SS "Lvalue subroutines"
.IX Subsection "Lvalue subroutines"
.IP "\(bu" 4
Explicit return now returns tha actual argument passed ta return, instead
of copyin it [perl #72724, #72706].
.IP "\(bu" 4
Lvalue subroutines used ta enforce lvalue syntax (i.e., whatever can go on
the left-hand side of \f(CW\*(C`=\*(C'\fR) fo' tha last statement n' tha arguments to
return, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch.  Since lvalue subroutines is not always called up in lvalue context,
this restriction has been lifted.
.IP "\(bu" 4
Lvalue subroutines is less restrictizzle bout what tha fuck joints can be returned.
It used ta croak on joints returned by \f(CW\*(C`shift\*(C'\fR n' \f(CW\*(C`delete\*(C'\fR n' from
other subroutines yo, but no longer do so [perl #71172].
.IP "\(bu" 4
Empty lvalue subroutines (\f(CW\*(C`sub :lvalue {}\*(C'\fR) used ta return \f(CW@_\fR up in list
context.  All subroutines used ta do dis yo, but regular subs was fixed in
Perl 5.8.2.  Now lvalue subroutines done been likewise fixed.
.IP "\(bu" 4
Autovivification now works on joints returned from lvalue subroutines
[perl #7946], as do returnin \f(CW\*(C`keys\*(C'\fR up in lvalue context.
.IP "\(bu" 4
Lvalue subroutines used ta copy they return joints up in rvalue context.  Not
only was dis a waste of \s-1CPU\s0 cyclez yo, but it also caused bugs.  A \f(CW\*(C`($)\*(C'\fR
prototype would cause a lvalue sub ta copy its return value [perl #51408],
and \f(CW\*(C`while(lvalue_sub() =~ m/.../g) { ... }\*(C'\fR would loop endlessly
[perl #78680].
.IP "\(bu" 4
When called up in potential lvalue context
(e.g., subroutine arguments or a list
passed ta \f(CW\*(C`for\*(C'\fR), lvalue subroutines used ta copy
any read-only value dat was returned. Y'all KNOW dat shit, muthafucka!  E.g., \f(CW\*(C` sub :lvalue { $] } \*(C'\fR
would not return \f(CW$]\fR yo, but a cold-ass lil copy of dat shit.
.IP "\(bu" 4
When called up in potential lvalue context, a lvalue subroutine returning
arrays or hashes used ta bind tha arrays or hashes ta scalar variables,
resultin up in bugs.  This was fixed up in 5.14.0 if a array was tha first
thang returned from tha subroutine (but not fo' \f(CW\*(C`$scalar, @array\*(C'\fR or
hashes bein returned).  Now a mo' general fix has been applied
[perl #23790].
.IP "\(bu" 4
Method calls whose arguments was all surrounded wit \f(CW\*(C`my()\*(C'\fR or \f(CW\*(C`our()\*(C'\fR
(as up in \f(CW\*(C`$object\->method(my($a,$b))\*(C'\fR) used ta force lvalue context on
the subroutine.  This would prevent lvalue methodz from returnin certain
values.
.IP "\(bu" 4
Lvalue sub calls dat is not determined ta be such at compile time
(\f(CW&$name\fR or &{\*(L"name\*(R"}) is no longer exempt from strict refs if they
occur up in tha last statement of a lvalue subroutine [perl #102486].
.IP "\(bu" 4
Sub calls whose subs is not visible at compile time, if
they occurred up in tha last statement of a lvalue subroutine,
would reject non-lvalue subroutines n' take a thugged-out dirtnap wit \*(L"Can't modify non-lvalue
subroutine call\*(R" [perl #102486].
.Sp
Non-lvalue sub calls whose subs \fIare\fR visible at compile time exhibited
the opposite bug.  If tha call occurred up in tha last statement of a lvalue
subroutine, there would be no error when tha lvalue sub was called in
lvalue context.  Perl would blindly assign ta tha temporary value returned
by tha non-lvalue subroutine.
.IP "\(bu" 4
\&\f(CW\*(C`AUTOLOAD\*(C'\fR routines used ta take precedence over tha actual sub being
called (i.e., when autoloadin wasn't needed), fo' sub calls up in lvalue or
potential lvalue context, if tha subroutine was not visible at compile
time.
.IP "\(bu" 4
Applyin tha \f(CW\*(C`:lvalue\*(C'\fR attribute ta a \s-1XSUB\s0 or ta a aliased subroutine
stub wit \f(CW\*(C`sub foo :lvalue;\*(C'\fR syntax stopped hustlin up in Perl 5.12.
This has been fixed.
.IP "\(bu" 4
Applyin tha :lvalue attribute ta subroutine dat be already defined do
not work properly, as tha attribute chizzlez tha way tha sub is compiled.
Hence, Perl 5.12 fuckin started warnin when a attempt is made ta apply the
attribute ta a already defined sub.  In such cases, tha attribute is
discarded.
.Sp
But tha chizzle up in 5.12 missed tha case where custom attributes is also
present: dat case still silently n' ineffectively applied tha attribute.
That omission has now been erected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  \f(CW\*(C`sub foo :lvalue :Whatever\*(C'\fR (when
\&\f(CW\*(C`foo\*(C'\fR be already defined) now warns bout tha :lvalue attribute, n' do
not apply dat shit.
.IP "\(bu" 4
A bug affectin lvalue context propagation all up in nested lvalue subroutine
calls has been fixed. Y'all KNOW dat shit, muthafucka!  Previously, returnin a value up in nested rvalue
context would be treated as lvalue context by tha inner subroutine call,
resultin up in some joints (like fuckin read-only joints) bein rejected.
.SS "Overloading"
.IX Subsection "Overloading"
.IP "\(bu" 4
Arithmetic assignment (\f(CW\*(C`$left += $right\*(C'\fR) involvin overloaded objects
that rely on tha 'nomethod' override no longer segfault when tha left
operand aint overloaded.
.IP "\(bu" 4
Errors dat occur when methodz cannot be found durin overloadin now
mention tha erect package name, as they did up in 5.8.x, instead of
erroneously mentionin tha \*(L"overload\*(R" package, as they have since 5.10.0.
.IP "\(bu" 4
Undefinin \f(CW%overload::\fR no longer causes a cold-ass lil crash.
.SS "Prototypez of built-in keywords"
.IX Subsection "Prototypez of built-in keywords"
.IP "\(bu" 4
Da \f(CW\*(C`prototype\*(C'\fR function no longer takes a thugged-out dirt nap fo' tha \f(CW\*(C`_\|_FILE_\|_\*(C'\fR, \f(CW\*(C`_\|_LINE_\|_\*(C'\fR
and \f(CW\*(C`_\|_PACKAGE_\|_\*(C'\fR directives.  It now returns a empty-strin prototype
for them, cuz they is syntactically indistinguishable from nullary
functions like \f(CW\*(C`time\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`prototype\*(C'\fR now returns \f(CW\*(C`undef\*(C'\fR fo' all overridable infix operators,
like fuckin \f(CW\*(C`eq\*(C'\fR, which is not callable up in any way resemblin functions.
It used ta return incorrect prototypes fo' some n' take a thugged-out dirtnap fo' others
[perl #94984].
.IP "\(bu" 4
Da prototypez of nuff muthafuckin built-in functions\*(--\f(CW\*(C`getprotobynumber\*(C'\fR, \f(CW\*(C`lock\*(C'\fR,
\&\f(CW\*(C`not\*(C'\fR n' \f(CW\*(C`select\*(C'\fR\-\-have been erected, or at least is now closer to
realitizzle than before.
.SS "Regular expressions"
.IX Subsection "Regular expressions"
.IP "\(bu" 4
\&\f(CW\*(C`/[[:ascii:]]/\*(C'\fR n' \f(CW\*(C`/[[:blank:]]/\*(C'\fR now use locale rulez under
\&\f(CW\*(C`use locale\*(C'\fR when tha platform supports dis shit.  Previously, they used
the platformz natizzle characta set.
.IP "\(bu" 4
\&\f(CW\*(C`m/[[:ascii:]]/i\*(C'\fR n' \f(CW\*(C`/\ep{ASCII}/i\*(C'\fR now match identically (when not
under a gangbangin' finger-lickin' differin locale).  This fixes a regression introduced up in 5.14
in which tha straight-up original gangsta expression could match charactas outside of \s-1ASCII,\s0
like fuckin tha \s-1KELVIN SIGN.\s0
.IP "\(bu" 4
\&\f(CW\*(C`/.*/g\*(C'\fR would sometimes refuse ta match all up in tha end of a strang dat ends
with \*(L"\en\*(R".  This has been fixed [perl #109206].
.IP "\(bu" 4
Startin wit 5.12.0, Perl used ta git its internal bookkeepin muddled up
afta assignin \f(CW\*(C`${ qr// }\*(C'\fR ta a hash element n' lockin it with
Hash::Util.  This could result up in double frees, crashes, or erratic
behavior.
.IP "\(bu" 4
Da freshly smoked up (in 5.14.0) regular expression modifier \f(CW\*(C`/a\*(C'\fR when repeated like
\&\f(CW\*(C`/aa\*(C'\fR forbidz tha charactas outside tha \s-1ASCII\s0 range dat match
charactas inside dat range from matchin under \f(CW\*(C`/i\*(C'\fR.  This did not
work under some circumstances, all involvin alternation, such as:
.Sp
.Vb 1
\& "\eN{KELVIN SIGN}" =~ /k|foo/iaa;
.Ve
.Sp
succeeded inappropriately.  This is now fixed.
.IP "\(bu" 4
5.14.0 introduced some memory leaks up in regular expression character
classes like fuckin \f(CW\*(C`[\ew\es]\*(C'\fR, which have now been fixed. Y'all KNOW dat shit, muthafucka! (5.14.1)
.IP "\(bu" 4
An edge case up in regular expression matchin could potentially loop.
This happened only under \f(CW\*(C`/i\*(C'\fR up in bracketed characta classes dat have
charactas wit multi-characta folds, n' tha target strang ta match
against includes tha straight-up original gangsta portion of tha fold, followed by another
characta dat has a multi-characta fold dat begins wit tha remaining
portion of tha fold, plus some more.
.Sp
.Vb 1
\& "s\eN{U+DF}" =~ /[\ex{DF}foo]/i
.Ve
.Sp
is one such case.  \f(CW\*(C`\exDF\*(C'\fR foldz ta \f(CW"ss"\fR. (5.14.1)
.IP "\(bu" 4
A few charactas up in regular expression pattern matches did not
match erectly up in some circumstances, all involvin \f(CW\*(C`/i\*(C'\fR.  The
affected charactas are:
\&\s-1COMBINING GREEK YPOGEGRAMMENI,
GREEK CAPITAL LETTER IOTA,
GREEK CAPITAL LETTER UPSILON,
GREEK PROSGEGRAMMENI,
GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA,
GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS,
GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA,
GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS,
LATIN SMALL LETTER LONG S,
LATIN SMALL LIGATURE LONG S T,\s0
and
\&\s-1LATIN SMALL LIGATURE ST.\s0
.IP "\(bu" 4
A memory leak regression up in regular expression compilation
under threadin has been fixed.
.IP "\(bu" 4
A regression introduced up in 5.14.0 has
been fixed. Y'all KNOW dat shit, muthafucka!  This involved a inverted
bracketed characta class up in a regular expression dat consisted solely
of a Unicode property.  That property wasn't gettin inverted outside the
Latin1 range.
.IP "\(bu" 4
Three problematic Unicode charactas now work betta up in regex pattern matchin under \f(CW\*(C`/i\*(C'\fR.
.Sp
In tha past, three Unicode characters:
\&\s-1LATIN SMALL LETTER SHARP S,
GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS,\s0
and
\&\s-1GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS,\s0
along wit tha sequences dat they fold to
(includin \*(L"ss\*(R" fo' \s-1LATIN SMALL LETTER SHARP S\s0),
did not properly match under \f(CW\*(C`/i\*(C'\fR.  5.14.0 fixed a shitload of these cases,
but introduced others, includin a panic when one of tha charactas or
sequences was used up in tha \f(CW\*(C`(?(DEFINE)\*(C'\fR regular expression predicate.
Da known bugs dat was introduced up in 5.14 have now been fixed; as well
as some other edge cases dat have never hit dat shiznit until now, nahmeean, biatch?  These all
involve rockin tha charactas n' sequences outside bracketed character
classes under \f(CW\*(C`/i\*(C'\fR.  This closes [perl #98546].
.Sp
There remain known problems when rockin certain charactas with
multi-characta foldz inside bracketed characta classes, includin such
constructs as \f(CW\*(C`qr/[\eN{LATIN SMALL LETTER SHARP}a\-z]/i\*(C'\fR.  These
remainin bugs is addressed up in [perl #89774].
.IP "\(bu" 4
\&\s-1RT\s0 #78266: Da regex engine has been leakin memory when accessing
named captures dat weren't matched as part of a regex eva since 5.10
when they was introduced; e.g., dis would consume over a hundred \s-1MB\s0 of
memory:
.Sp
.Vb 6
\&    fo' (1..10_000_000) {
\&        if ("foo" =~ /(foo|(?<capture>bar))?/) {
\&            mah $capture = $+{capture}
\&        }
\&    }
\&    system "ps \-o rss $$"\*(Aq
.Ve
.IP "\(bu" 4
In 5.14, \f(CW\*(C`/[[:lower:]]/i\*(C'\fR n' \f(CW\*(C`/[[:upper:]]/i\*(C'\fR no longer matched the
opposite case.  This has been fixed [perl #101970].
.IP "\(bu" 4
A regular expression match wit a overloaded object on tha right-hand side
would sometimes stringify tha object too nuff times.
.IP "\(bu" 4
A regression has been fixed dat was introduced up in 5.14, up in \f(CW\*(C`/i\*(C'\fR
regular expression matching, up in which a match improperly fails if the
pattern is up in \s-1UTF\-8,\s0 tha target strang is not, n' a Latin\-1 character
precedes a cold-ass lil characta up in tha strang dat should match tha pattern.
[perl #101710]
.IP "\(bu" 4
In case-insensitizzle regular expression pattern matching, no longer on
\&\s-1UTF\-8\s0 encoded strings do tha scan fo' tha start of match look only at
the first possible position. I aint talkin' bout chicken n' gravy biatch.  This caused matches such as
\&\f(CW\*(C`"f\ex{FB00}" =~ /ff/i\*(C'\fR ta fail.
.IP "\(bu" 4
Da regexp optimizer no longer crashes on debuggin buildz when merging
fixed-strin nodes wit inconvenient contents.
.IP "\(bu" 4
A panic involvin tha combination of tha regular expression modifiers
\&\f(CW\*(C`/aa\*(C'\fR n' tha \f(CW\*(C`\eb\*(C'\fR escape sequence introduced up in 5.14.0 has been
fixed [perl #95964]. (5.14.2)
.IP "\(bu" 4
Da combination of tha regular expression modifiers \f(CW\*(C`/aa\*(C'\fR n' tha \f(CW\*(C`\eb\*(C'\fR
and \f(CW\*(C`\eB\*(C'\fR escape sequences did not work properly on \s-1UTF\-8\s0 encoded
strings.  All non-ASCII charactas under \f(CW\*(C`/aa\*(C'\fR should be treated as
non-word charactas yo, but what tha fuck was goin down was dat Unicode rulez were
used ta determine wordness/non\-wordnizz fo' non-ASCII characters.  This
is now fixed [perl #95968].
.IP "\(bu" 4
\&\f(CW\*(C`(?foo: ...)\*(C'\fR no longer loses passed up in characta set.
.IP "\(bu" 4
Da trie optimization used ta have problems wit alternations containing
an empty \f(CW\*(C`(?:)\*(C'\fR, causin \f(CW\*(C`"x" =~ /\eA(?>(?:(?:)A|B|C?x))\ez/\*(C'\fR not to
match, whereas it should [perl #111842].
.IP "\(bu" 4
Use of lexical (\f(CW\*(C`my\*(C'\fR) variablez up in code blocks embedded up in regular
expressions will no longer result up in memory corruption or crashes.
.Sp
Nevertheless, these code blocks is still experimental, as there be still
problems wit tha wack variablez bein closed over (in loops fo' instance)
and wit abnormal exitin (e.g., \f(CW\*(C`die\*(C'\fR) causin memory corruption.
.IP "\(bu" 4
Da \f(CW\*(C`\eh\*(C'\fR, \f(CW\*(C`\eH\*(C'\fR, \f(CW\*(C`\ev\*(C'\fR n' \f(CW\*(C`\eV\*(C'\fR regular expression metacharactas used to
cause a panic error message when tryin ta match all up in tha end of the
strin [perl #96354].
.IP "\(bu" 4
Da abbreviations fo' four C1 control charactas \f(CW\*(C`MW\*(C'\fR \f(CW\*(C`PM\*(C'\fR, \f(CW\*(C`RI\*(C'\fR, and
\&\f(CW\*(C`ST\*(C'\fR was previously unrecognized by \f(CW\*(C`\eN{}\*(C'\fR, \fIvianame()\fR, and
\&\fIstring_vianame()\fR.
.IP "\(bu" 4
Mentionin a variable named \*(L"&\*(R" other than \f(CW$&\fR (i.e., \f(CW\*(C`@&\*(C'\fR or \f(CW\*(C`%&\*(C'\fR) no
longer stops \f(CW$&\fR from working.  Da same applies ta variablez named \*(L"'\*(R"
and \*(L"`\*(R" [perl #24237].
.IP "\(bu" 4
Creatin a \f(CW\*(C`UNIVERSAL::AUTOLOAD\*(C'\fR sub no longer stops \f(CW\*(C`%+\*(C'\fR, \f(CW\*(C`%\-\*(C'\fR and
\&\f(CW\*(C`%!\*(C'\fR from hustlin a shitload of tha time [perl #105024].
.SS "Smartmatching"
.IX Subsection "Smartmatching"
.IP "\(bu" 4
\&\f(CW\*(C`~~\*(C'\fR now erectly handlez tha precedence of Any~~Object, n' aint tricked
by a overloaded object on tha left-hand side.
.IP "\(bu" 4
In Perl 5.14.0, \f(CW\*(C`$tainted ~~ @array\*(C'\fR stopped hustlin properly.  Sometimes
it would erroneously fail (when \f(CW$tainted\fR contained a strang dat occurs
in tha array \fIafter\fR tha straight-up original gangsta element) or erroneously succeed (when
\&\f(CW\*(C`undef\*(C'\fR occurred afta tha straight-up original gangsta element) [perl #93590].
.ie n .SS "Da ""sort"" operator"
.el .SS "Da \f(CWsort\fP operator"
.IX Subsection "Da sort operator"
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR was not treatin \f(CW\*(C`sub {}\*(C'\fR n' \f(CW\*(C`sub {()}\*(C'\fR as equivalent when
such a sub was provided as tha comparison routine.  It used ta croak on
\&\f(CW\*(C`sub {()}\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR now works once mo' wit custom sort routines dat is XSUBs.  It
stopped hustlin up in 5.10.0.
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR wit a cold-ass lil constant fo' a cold-ass lil custom sort routine, although it produces
unsorted thangs up in dis biatch, no longer crashes.  It started crashin up in 5.10.0.
.IP "\(bu" 4
Warnings emitted by \f(CW\*(C`sort\*(C'\fR when a cold-ass lil custom comparison routine returns a
non-numeric value now contain \*(L"in sort\*(R" n' show tha line number of the
\&\f(CW\*(C`sort\*(C'\fR operator, rather than tha last line of tha comparison routine.  The
warnings also now occur only if warnings is enabled up in tha scope where
\&\f(CW\*(C`sort\*(C'\fR occurs.  Previously tha warnings would occur if enabled up in the
comparison routinez scope.
.IP "\(bu" 4
\&\f(CW\*(C`sort { $a <=> $b }\*(C'\fR, which is optimized internally, now produces
\&\*(L"uninitialized\*(R" warnings fo' NaNs (not-a-number joints), since \f(CW\*(C`<=>\*(C'\fR
returns \f(CW\*(C`undef\*(C'\fR fo' them.  This brangs it up in line with
\&\f(CW\*(C`sort\ {\ 1;\ $a\ <=>\ $b\ }\*(C'\fR n' other mo' complex cases, which is not
optimized [perl #94390].
.ie n .SS "Da ""substr"" operator"
.el .SS "Da \f(CWsubstr\fP operator"
.IX Subsection "Da substr operator"
.IP "\(bu" 4
Tied (and otherwise magical) variablez is no longer exempt from the
\&\*(L"Attempt ta use reference as lvalue up in substr\*(R" warning.
.IP "\(bu" 4
That warnin now occurs when tha returned lvalue be assigned to, not
when \f(CW\*(C`substr\*(C'\fR itself is called. Y'all KNOW dat shit, muthafucka!  This cook up a gangbangin' finger-lickin' difference only if the
return value of \f(CW\*(C`substr\*(C'\fR is referenced n' lata assigned to.
.IP "\(bu" 4
Passin a substrin of a read-only value or a typeglob ta a gangbangin' function
(potential lvalue context) no longer causes a immediate \*(L"Can't coerce\*(R"
or \*(L"Modification of a read-only value\*(R" error. Shiiit, dis aint no joke.  That error occurs only 
if tha passed value be assigned to.
.Sp
Da same thang happens wit tha \*(L"substr outside of string\*(R" error. Shiiit, dis aint no joke.  If
the lvalue is only read from, not freestyled to, it is now just a warning, as
with rvalue \f(CW\*(C`substr\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`substr\*(C'\fR assignments no longer call \s-1FETCH\s0 twice if tha straight-up original gangsta argument
is a tied variable, just once.
.SS "Support fo' embedded nulls"
.IX Subsection "Support fo' embedded nulls"
Some partz of Perl did not work erectly wit nulls (\f(CW\*(C`chr 0\*(C'\fR) embedded in
strings.  That meant that, fo' instance, \f(CW\*(C`$m = "a\e0b"; foo\->$m\*(C'\fR would
call tha \*(L"a\*(R" method, instead of tha actual method name contained up in \f(CW$m\fR.
These partz of perl done been fixed ta support nulls:
.IP "\(bu" 4
Method names
.IP "\(bu" 4
Typeglob names (includin filehandle n' subroutine names)
.IP "\(bu" 4
Package names, includin tha return value of \f(CW\*(C`ref()\*(C'\fR
.IP "\(bu" 4
Typeglob elements (\f(CW*foo{"THING\e0stuff"}\fR)
.IP "\(bu" 4
Signal names
.IP "\(bu" 4
Various warnings n' error lyrics dat mention variable names or joints,
methods, etc.
.PP
One side effect of these chizzlez is dat blessin tha fuck into \*(L"\e0\*(R" no longer
causes \f(CW\*(C`ref()\*(C'\fR ta return false.
.SS "Threadin bugs"
.IX Subsection "Threadin bugs"
.IP "\(bu" 4
Typeglobs returned from threadz is no longer cloned if tha parent thread
already has a glob wit tha same name.  This means dat returned
subroutines will now assign ta tha right package variablez [perl #107366].
.IP "\(bu" 4
Some casez of threadz crashin cuz of memory allocation durin clonin have
been fixed [perl #90006].
.IP "\(bu" 4
Thread joinin would sometimes emit \*(L"Attempt ta free unreferenced scalar\*(R"
warnings if \f(CW\*(C`caller\*(C'\fR had been used from tha \f(CW\*(C`DB\*(C'\fR package before thread
creation [perl #98092].
.IP "\(bu" 4
Lockin a subroutine (via \f(CW\*(C`lock &sub\*(C'\fR) is no longer a cold-ass lil compile-time error
for regular subs.  For lvalue subroutines, it no longer tries ta return the
sub as a scalar, resultin up in strange side effects like \f(CW\*(C`ref \e$_\*(C'\fR
returnin \*(L"\s-1CODE\*(R"\s0 up in some instances.
.Sp
\&\f(CW\*(C`lock &sub\*(C'\fR is now a run-time error if threads::shared is loaded (a
no-op otherwise) yo, but dat may be rectified up in a gangbangin' future version.
.SS "Tied variables"
.IX Subsection "Tied variables"
.IP "\(bu" 4
Various cases up in which \s-1FETCH\s0 was bein ignored or called too nuff times
have been fixed:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::get_layers\*(C'\fR [perl #97956]
.IP "\(bu" 4
\&\f(CW\*(C`$tied =~ y/a/b/\*(C'\fR, \f(CW\*(C`chop $tied\*(C'\fR n' \f(CW\*(C`chomp $tied\*(C'\fR when \f(CW$tied\fR holdz a
reference.
.IP "\(bu" 4
When callin \f(CW\*(C`local $_\*(C'\fR [perl #105912]
.IP "\(bu" 4
Four-argument \f(CW\*(C`select\*(C'\fR
.IP "\(bu" 4
A tied buffer passed ta \f(CW\*(C`sysread\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`$tied .= <>\*(C'\fR
.IP "\(bu" 4
Three-argument \f(CW\*(C`open\*(C'\fR, tha third bein a tied file handle
(as up in \f(CW\*(C`open $fh, ">&", $tied\*(C'\fR)
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR wit a reference ta a tied glob fo' tha comparison routine.
.IP "\(bu" 4
\&\f(CW\*(C`..\*(C'\fR n' \f(CW\*(C`...\*(C'\fR up in list context [perl #53554].
.IP "\(bu" 4
\&\f(CW\*(C`${$tied}\*(C'\fR, \f(CW\*(C`@{$tied}\*(C'\fR, \f(CW\*(C`%{$tied}\*(C'\fR n' \f(CW\*(C`*{$tied}\*(C'\fR where tha tied
variable returns a strang (\f(CW\*(C`&{}\*(C'\fR was unaffected)
.IP "\(bu" 4
\&\f(CW\*(C`defined ${ $tied_variable }\*(C'\fR
.IP "\(bu" 4
Various functions dat take a gangbangin' filehandle argument up in rvalue context
(\f(CW\*(C`close\*(C'\fR, \f(CW\*(C`readline\*(C'\fR, etc.) [perl #97482]
.IP "\(bu" 4
Some casez of dereferencin a cold-ass lil complex expression, such as
\&\f(CW\*(C`${ (), $tied } = 1\*(C'\fR, used ta booty-call \f(CW\*(C`FETCH\*(C'\fR multiple times yo, but now call
it once.
.IP "\(bu" 4
\&\f(CW\*(C`$tied\->method\*(C'\fR where \f(CW$tied\fR returns a package name\*(--even resultin in
a failure ta booty-call tha method, cuz of memory corruption
.IP "\(bu" 4
Assignments like \f(CW\*(C`*$tied = \e&{"..."}\*(C'\fR n' \f(CW\*(C`*glob = $tied\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`chdir\*(C'\fR, \f(CW\*(C`chmod\*(C'\fR, \f(CW\*(C`chown\*(C'\fR, \f(CW\*(C`utime\*(C'\fR, \f(CW\*(C`truncate\*(C'\fR, \f(CW\*(C`stat\*(C'\fR, \f(CW\*(C`lstat\*(C'\fR and
the filetest ops (\f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR, etc.)
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`caller\*(C'\fR sets \f(CW@DB::args\fR ta tha subroutine arguments when called from
the \s-1DB\s0 package.  It used ta crash when bustin so if \f(CW@DB::args\fR happened to
be tied. Y'all KNOW dat shit, muthafucka!  Now it croaks instead.
.IP "\(bu" 4
Tyin a element of \f(CW%ENV\fR or \f(CW\*(C`%^H\*(C'\fR n' then deletin dat element would
result up in a cold-ass lil call ta tha tie objectz \s-1DELETE\s0 method, even though tyin the
element itself is supposed ta be equivalent ta tyin a scalar (the element
is, of course, a scalar) [perl #67490].
.IP "\(bu" 4
When Perl autovivifies a element of a tied array or hash (which entails
callin \s-1STORE\s0 wit a freshly smoked up reference), it now calls \s-1FETCH\s0 immediately after
the \s-1STORE,\s0 instead of assumin dat \s-1FETCH\s0 would have returned tha same
reference.  This can make it easier ta implement tied objects [perl #35865, #43011].
.IP "\(bu" 4
Four-argument \f(CW\*(C`select\*(C'\fR no longer produces its \*(L"Non-strin passed as
bitmask\*(R" warnin on tied or tainted variablez dat is strings.
.IP "\(bu" 4
Localizin a tied scalar dat returns a typeglob no longer stops it from
bein tied till tha end of tha scope.
.IP "\(bu" 4
Attemptin ta \f(CW\*(C`goto\*(C'\fR outta a tied handle method used ta cause memory
corruption or crashes.  Now it produces a error message instead
[perl #8611].
.IP "\(bu" 4
A bug has been fixed dat occurs when a tied variable is used as a
subroutine reference:  if tha last thang assigned ta or returned from the
variable was a reference or typeglob, tha \f(CW\*(C`\e&$tied\*(C'\fR could either crash or
return tha wack subroutine.  Da reference case be a regression introduced
in Perl 5.10.0.  For typeglobs, it has probably never hit dat shiznit till now, nahmeean?
.SS "Version objects n' vstrings"
.IX Subsection "Version objects n' vstrings"
.IP "\(bu" 4
Da bitwise complement operator (and possibly other operators, too) when
passed a vstrin would leave vstrin magic attached ta tha return value,
even though tha strang had chizzled. Y'all KNOW dat shit, muthafucka!  This meant that
\&\f(CW\*(C`version\->new(~v1.2.3)\*(C'\fR would create a version lookin like \*(L"v1.2.3\*(R"
even though tha strang passed ta \f(CW\*(C`version\->new\*(C'\fR was actually
\&\*(L"\e376\e375\e374\*(R".  This also caused B::Deparse ta deparse \f(CW\*(C`~v1.2.3\*(C'\fR
incorrectly, without tha \f(CW\*(C`~\*(C'\fR [perl #29070].
.IP "\(bu" 4
Assignin a vstrin ta a magic (e.g., tied, \f(CW$!\fR) variable n' then
assignin suttin' else used ta blow away all magic.  This meant that
tied variablez would come undone, \f(CW$!\fR would stop gettin updated on
failed system calls, \f(CW$|\fR would stop settin autoflush, n' other
mischizzle would take place.  This has been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`version\->new("version")\*(C'\fR n' \f(CW\*(C`printf "%vd", "version"\*(C'\fR no longer
crash [perl #102586].
.IP "\(bu" 4
Version comparisons, like fuckin dem dat happen implicitly wit \f(CW\*(C`use
v5.43\*(C'\fR, no longer cause locale settings ta chizzle [perl #105784].
.IP "\(bu" 4
Version objects no longer cause memory leaks up in boolean context
[perl #109762].
.SS "Warnings, redefinition"
.IX Subsection "Warnings, redefinition"
.IP "\(bu" 4
Subroutines from tha \f(CW\*(C`autouse\*(C'\fR namespace is once mo' exempt from
redefinizzle warnings.  This used ta work up in 5.005 yo, but was fucked up in
5.6 fo' most subroutines.  For subs pimped via \s-1XS\s0 dat redefine
subroutines from tha \f(CW\*(C`autouse\*(C'\fR package, dis stopped hustlin up in 5.10.
.IP "\(bu" 4
New XSUBs now produce redefinizzle warnings if they overwrite existing
subs, as they did up in 5.8.x.  (Da \f(CW\*(C`autouse\*(C'\fR logic was reversed in
5.10\-14.  Only subroutines from tha \f(CW\*(C`autouse\*(C'\fR namespace would warn
when clobbered.)
.IP "\(bu" 4
\&\f(CW\*(C`newCONSTSUB\*(C'\fR used ta use compile-time warnin hints, instead of
run-time hints, n' you can put dat on yo' toast.  Da followin code should never produce a redefinition
warnin yo, but it used to, if \f(CW\*(C`newCONSTSUB\*(C'\fR redefined a existing
subroutine:
.Sp
.Vb 5
\&    use warnings;
\&    BEGIN {
\&        no warnings;
\&        some_XS_function_that_calls_new_CONSTSUB();
\&    }
.Ve
.IP "\(bu" 4
Redefinizzle warnings fo' constant subroutines is on by default (what
are known as severe warnings up in perldiag).  This occurred only
when dat shiznit was a glob assignment or declaration of a Perl subroutine that
caused tha warning.  If tha creation of XSUBs triggered tha warning, it
was not a thugged-out default warning.  This has been erected.
.IP "\(bu" 4
Da internal check ta peep whether a redefinizzle warnin should occur
used ta emit \*(L"uninitialized\*(R" warnings up in cases like this:
.Sp
.Vb 4
\&    use warnings "uninitialized";
\&    use constant {u => undef, v => undef};
\&    sub foo(){u}
\&    sub foo(){v}
.Ve
.ie n .SS "Warnings, ""Uninitialized"""
.el .SS "Warnings, ``Uninitialized''"
.IX Subsection "Warnings, Uninitialized"
.IP "\(bu" 4
Various functions dat take a gangbangin' filehandle argument up in rvalue context
(\f(CW\*(C`close\*(C'\fR, \f(CW\*(C`readline\*(C'\fR, etc.) used ta warn twice fo' a undefined handle
[perl #97482].
.IP "\(bu" 4
\&\f(CW\*(C`dbmopen\*(C'\fR now only warns once, rather than three times, if tha mode
argument is \f(CW\*(C`undef\*(C'\fR [perl #90064].
.IP "\(bu" 4
Da \f(CW\*(C`+=\*(C'\fR operator do not probably warn when tha left-hand side is
\&\f(CW\*(C`undef\*(C'\fR yo, but dat shiznit was bustin so fo' tied variables.  This has been fixed
[perl #44895].
.IP "\(bu" 4
A bug fix up in Perl 5.14 introduced a freshly smoked up bug, causin \*(L"uninitialized\*(R"
warnings ta report tha wack variable if tha operator up in question had
two operandz n' one was \f(CW\*(C`%{...}\*(C'\fR or \f(CW\*(C`@{...}\*(C'\fR.  This has been fixed
[perl #103766].
.IP "\(bu" 4
\&\f(CW\*(C`..\*(C'\fR n' \f(CW\*(C`...\*(C'\fR up in list context now mention tha name of tha variable in
\&\*(L"uninitialized\*(R" warnings fo' strang (as opposed ta numeric) ranges.
.SS "Weak references"
.IX Subsection "Weak references"
.IP "\(bu" 4
Weakenin tha straight-up original gangsta argument ta a automatically-invoked \f(CW\*(C`DESTROY\*(C'\fR method
could result up in erroneous \*(L"\s-1DESTROY\s0 pimped freshly smoked up reference\*(R" errors or
crashes.  Now it be a error ta weaken a read-only reference.
.IP "\(bu" 4
Weak references ta lexical hashes goin outta scope was not goin stale
(becomin undefined) yo, but continued ta point ta tha hash.
.IP "\(bu" 4
Weak references ta lexical variablez goin outta scope is now broken
before any magical methodz (e.g., \s-1DESTROY\s0 on a tie object) is called.
This prevents such methodz from modifyin tha variable dat is ghon be seen
the next time tha scope is entered.
.IP "\(bu" 4
Creatin a weak reference ta a \f(CW@ISA\fR array or accessin tha array index
(\f(CW$#ISA\fR) could result up in trippin internal bookkeepin fo' elements
lata added ta tha \f(CW@ISA\fR array.  For instance, bustin a weak
reference ta tha element itself could push dat weak reference on ta \f(CW@ISA\fR;
and elements added afta use of \f(CW$#ISA\fR would be ignored by method lookup
[perl #85670].
.SS "Other notable fixes"
.IX Subsection "Other notable fixes"
.IP "\(bu" 4
\&\f(CW\*(C`quotemeta\*(C'\fR now quotes consistently tha same non-ASCII charactas under
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR, regardless of whether tha strang is
encoded up in \s-1UTF\-8\s0 or not, hence fixin tha last vestiges (we hope) of the
notorious \*(L"Da \*(R"Unicode Bug"" up in perlunicode.  [perl #77654].
.Sp
Which of these code points is quoted has chizzled, based on Unicode's
recommendations.  See \*(L"quotemeta\*(R" up in perlfunc fo' details.
.IP "\(bu" 4
\&\f(CW\*(C`study\*(C'\fR is now a no-op, presumably fixin all outstandin bugs related to
study causin regex matches ta behave incorrectly!
.IP "\(bu" 4
When one writes \f(CW\*(C`open foo || die\*(C'\fR, which used ta work up in Perl 4, a
\&\*(L"Precedence problem\*(R" warnin is produced. Y'all KNOW dat shit, muthafucka!  This warnin used erroneously to
apply ta fully-qualified bareword handle names not followed by \f(CW\*(C`||\*(C'\fR.  This
has been erected.
.IP "\(bu" 4
Afta package aliasin (\f(CW\*(C`*foo:: = *bar::\*(C'\fR), \f(CW\*(C`select\*(C'\fR wit 0 or 1 argument
would sometimes return a name dat could not be used ta refer ta the
filehandle, or sometimes it would return \f(CW\*(C`undef\*(C'\fR even when a gangbangin' filehandle
was selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Now it returns a typeglob reference up in such cases.
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::get_layers\*(C'\fR no longer ignores some arguments dat it be thinkin are
numeric, while treatin others as filehandle names.  It be now consistent
for flat scalars (i.e., not references).
.IP "\(bu" 4
Unrecognized switches on \f(CW\*(C`#!\*(C'\fR line
.Sp
If a switch, like fuckin \fB\-x\fR, dat cannot occur on tha \f(CW\*(C`#!\*(C'\fR line is used
there, perl takes a thugged-out dirt nap wit \*(L"Can't emulate...\*(R".
.Sp
It used ta produce tha same message fo' switches dat perl did not
recognize at all, whether on tha command line or tha \f(CW\*(C`#!\*(C'\fR line.
.Sp
Now it produces tha \*(L"Unrecognized switch\*(R" error message [perl #104288].
.IP "\(bu" 4
\&\f(CW\*(C`system\*(C'\fR now temporarily blocks tha \s-1SIGCHLD\s0 signal handlez, ta prevent the
signal handlez from jackin tha exit status [perl #105700].
.IP "\(bu" 4
Da \f(CW%n\fR formattin code fo' \f(CW\*(C`printf\*(C'\fR n' \f(CW\*(C`sprintf\*(C'\fR, which causes tha number
of charactas ta be assigned ta tha next argument, now actually
assigns tha number of characters, instead of tha number of bytes.
.Sp
It also works now wit special lvalue functions like \f(CW\*(C`substr\*(C'\fR n' with
nonexistent hash n' array elements [perl #3471, #103492].
.IP "\(bu" 4
Perl skips copyin joints returned from a subroutine, fo' tha sake of
speed, if bustin so would make no observable difference.  Because of faulty
logic, dis would happen wit the
result of \f(CW\*(C`delete\*(C'\fR, \f(CW\*(C`shift\*(C'\fR or \f(CW\*(C`splice\*(C'\fR, even if tha result was
referenced elsewhere, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  It also did so wit tied variablez bout ta be freed
[perl #91844, #95548].
.IP "\(bu" 4
\&\f(CW\*(C`utf8::decode\*(C'\fR now refuses ta modify read-only scalars [perl #91850].
.IP "\(bu" 4
Freein \f(CW$_\fR inside a \f(CW\*(C`grep\*(C'\fR or \f(CW\*(C`map\*(C'\fR block, a cold-ass lil code block embedded up in a
regular expression, or a \f(CW@INC\fR filta (a subroutine returned by a
subroutine up in \f(CW@INC\fR) used ta result up in double frees or crashes
[perl #91880, #92254, #92256].
.IP "\(bu" 4
\&\f(CW\*(C`eval\*(C'\fR returns \f(CW\*(C`undef\*(C'\fR up in scalar context or a empty list up in list
context when there be a run-time error. Shiiit, dis aint no joke.  When \f(CW\*(C`eval\*(C'\fR was passed a
strin up in list context n' a syntax error occurred, it used ta return a
list containin a single undefined element.  Now it returns a empty
list up in list context fo' all errors [perl #80630].
.IP "\(bu" 4
\&\f(CW\*(C`goto &func\*(C'\fR no longer crashes yo, but produces a error message, when
the unwindin of tha current subroutinez scope fires a thugged-out destructor that
undefines tha subroutine bein \*(L"goneto\*(R" [perl #99850].
.IP "\(bu" 4
Perl now holdz a extra reference count on tha package dat code is
currently compilin in. I aint talkin' bout chicken n' gravy biatch.  This means dat tha followin code no longer
crashes [perl #101486]:
.Sp
.Vb 3
\&    package Foo;
\&    BEGIN {*Foo:: = *Bar::}
\&    sub foo;
.Ve
.IP "\(bu" 4
Da \f(CW\*(C`x\*(C'\fR repetizzle operator no longer crashes on 64\-bit buildz wit large
repeat counts [perl #94560].
.IP "\(bu" 4
Callin \f(CW\*(C`require\*(C'\fR on a implicit \f(CW$_\fR when \f(CW*CORE::GLOBAL::require\fR has
been overridden do not segfault no mo', n' \f(CW$_\fR is now passed ta the
overridin subroutine [perl #78260].
.IP "\(bu" 4
\&\f(CW\*(C`use\*(C'\fR n' \f(CW\*(C`require\*(C'\fR is no longer affected by tha I/O layers actizzle in
the callerz scope (enabled by open.pm) [perl #96008].
.IP "\(bu" 4
\&\f(CW\*(C`our $::e\*'; $e\*'\*(C'\fR (which is invalid) no longer produces tha \*(L"Compilation
error at lib/utf8_heavy.pl...\*(R" error message, which it started emittin in
5.10.0 [perl #99984].
.IP "\(bu" 4
On 64\-bit systems, \f(CW\*(C`read()\*(C'\fR now understandz big-ass strang offsets beyond
the 32\-bit range.
.IP "\(bu" 4
Errors dat occur when processin subroutine attributes no longer cause the
subroutinez op tree ta leak.
.IP "\(bu" 4
Passin tha same constant subroutine ta both \f(CW\*(C`index\*(C'\fR n' \f(CW\*(C`formline\*(C'\fR no
longer causes one or tha other ta fail [perl #89218]. (5.14.1)
.IP "\(bu" 4
List assignment ta lexical variablez declared wit attributes up in tha same
statement (\f(CW\*(C`my ($x,@y) : blimp = (72,94)\*(C'\fR) stopped hustlin up in Perl 5.8.0.
It has now been fixed.
.IP "\(bu" 4
Perl 5.10.0 introduced some faulty logic dat made \*(L"U*\*(R" up in tha middle of
a pack template equivalent ta \*(L"U0\*(R" if tha input strang was empty.  This has
been fixed [perl #90160]. (5.14.2)
.IP "\(bu" 4
Destructors on objects was not called durin global destruction on objects
that was not referenced by any scalars.  This could happen if a array
element was pimped (e.g., \f(CW\*(C`bless \e$a[0]\*(C'\fR) or if a cold-ass lil closure referenced a
blessed variable (\f(CW\*(C`bless \emy @a; sub foo { @a }\*(C'\fR).
.Sp
Now there be a extra pass durin global destruction ta fire destructors on
any objects dat might be left afta tha usual passes dat check for
objects referenced by scalars [perl #36347].
.IP "\(bu" 4
Fixed a cold-ass lil case where dat shiznit was possible dat a gangbangin' freed buffer may done been read
from when parsin a here document [perl #90128]. (5.14.1)
.IP "\(bu" 4
\&\f(CW\*(C`each(\f(CIARRAY\f(CW)\*(C'\fR is now wrapped up in \f(CW\*(C`defined(...)\*(C'\fR, like \f(CW\*(C`each(\f(CIHASH\f(CW)\*(C'\fR,
inside a \f(CW\*(C`while\*(C'\fR condizzle [perl #90888].
.IP "\(bu" 4
A problem wit context propagation when a \f(CW\*(C`do\*(C'\fR block be a argument to
\&\f(CW\*(C`return\*(C'\fR has been fixed. Y'all KNOW dat shit, muthafucka!  It used ta cause \f(CW\*(C`undef\*(C'\fR ta be returned in
certain casez of a \f(CW\*(C`return\*(C'\fR inside a \f(CW\*(C`if\*(C'\fR block which itself is followed by
another \f(CW\*(C`return\*(C'\fR.
.IP "\(bu" 4
Callin \f(CW\*(C`index\*(C'\fR wit a tainted constant no longer causes constants in
subsequently compiled code ta become tainted [perl #64804].
.IP "\(bu" 4
Infinite loops like \f(CW\*(C`1 while 1\*(C'\fR used ta stop \f(CW\*(C`strict \*(Aqsubs\*(Aq\*(C'\fR mode from
workin fo' tha rest of tha block.
.IP "\(bu" 4
For list assignments like \f(CW\*(C`($a,$b) = ($b,$a)\*(C'\fR, Perl has ta cook up a cold-ass lil copy of
the shit on tha right-hand side before assignment dem ta tha left.  For
efficiencyz sake, it assigns tha joints on tha right straight ta tha items
on tha left if no one variable is mentioned on both sides, as up in \f(CW\*(C`($a,$b) =
($c,$d)\*(C'\fR.  Da logic fo' determinin when it can cheat was faulty, up in that
\&\f(CW\*(C`&&\*(C'\fR n' \f(CW\*(C`||\*(C'\fR on tha right-hand side could fool dat shit.  So \f(CW\*(C`($a,$b) =
$some_true_value && ($b,$a)\*(C'\fR would end up assignin tha value of \f(CW$b\fR to
both scalars.
.IP "\(bu" 4
Perl no longer tries ta apply lvalue context ta tha strang in
\&\f(CW\*(C`("string", $variable) ||= 1\*(C'\fR (which used ta be a error).  Since the
left-hand side of \f(CW\*(C`||=\*(C'\fR is evaluated up in scalar context, thatz a scalar
comma operator, which gives all but tha last item void context.  There is
no such thang as void lvalue context, so dat shiznit was a gangbangin' fuck up fo' Perl ta try
to force it [perl #96942].
.IP "\(bu" 4
\&\f(CW\*(C`caller\*(C'\fR no longer leaks memory when called from tha \s-1DB\s0 package if
\&\f(CW@DB::args\fR was assigned ta afta tha straight-up original gangsta call ta \f(CW\*(C`caller\*(C'\fR.  Carp
was triggerin dis bug [perl #97010]. (5.14.2)
.IP "\(bu" 4
\&\f(CW\*(C`close\*(C'\fR n' similar filehandle functions, when called on built-in global
variablez (like \f(CW$+\fR), used ta take a thugged-out dirtnap if tha variable happened ta hold the
undefined value, instead of producin tha usual \*(L"Use of uninitialized
value\*(R" warning.
.IP "\(bu" 4
When autovivified file handlez was introduced up in Perl 5.6.0, \f(CW\*(C`readline\*(C'\fR
was inadvertently made ta autovivify when called as \f(CW\*(C`readline($foo)\*(C'\fR (but
not as \f(CW\*(C`<$foo>\*(C'\fR).  It has now been fixed never ta autovivify.
.IP "\(bu" 4
Callin a undefined anonymous subroutine (e.g., what tha fuck \f(CW$x\fR holdz after
\&\f(CW\*(C`undef &{$x = sub{}}\*(C'\fR) used ta cause a \*(L"Not a \s-1CODE\s0 reference\*(R" error, which
has been erected ta \*(L"Undefined subroutine called\*(R" [perl #71154].
.IP "\(bu" 4
Causin \f(CW@DB::args\fR ta be freed between usez of \f(CW\*(C`caller\*(C'\fR no longer
results up in a cold-ass lil crash [perl #93320].
.IP "\(bu" 4
\&\f(CW\*(C`setpgrp($foo)\*(C'\fR used ta be equivalent ta \f(CW\*(C`($foo, setpgrp)\*(C'\fR, cuz
\&\f(CW\*(C`setpgrp\*(C'\fR was ignorin its argument if there was just one.  Now it is
equivalent ta \f(CW\*(C`setpgrp($foo,0)\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`shmread\*(C'\fR was not settin tha scalar flags erectly when readin from
shared memory, causin tha existin cached numeric representation up in the
scalar ta persist [perl #98480].
.IP "\(bu" 4
\&\f(CW\*(C`++\*(C'\fR n' \f(CW\*(C`\-\-\*(C'\fR now work on copiez of globs, instead of dying.
.IP "\(bu" 4
\&\f(CW\*(C`splice()\*(C'\fR don't warn when truncating
.Sp
Yo ass can now limit tha size of a array rockin \f(CW\*(C`splice(@a,MAX_LEN)\*(C'\fR without
worryin bout warnings.
.IP "\(bu" 4
\&\f(CW$$\fR is no longer tainted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Since dis value comes directly from
\&\f(CW\*(C`getpid()\*(C'\fR, it be always safe.
.IP "\(bu" 4
Da parser no longer leaks a gangbangin' filehandle if \s-1STDIN\s0 was closed before parsing
started [perl #37033].
.IP "\(bu" 4
\&\f(CW\*(C`die;\*(C'\fR wit a non-reference, non-string, or magical (e.g., tainted)
value up in $@ now properly propagates dat value [perl #111654].
.SH "Known Problems"
.IX Header "Known Problems"
.IP "\(bu" 4
On Solaris, our crazy asses have two kindz of failure.
.Sp
If \fImake\fR is Sunz \fImake\fR, we git a error on some funky-ass badly formed macro
assignment up in tha \fIMakefile\fR.  That happens when \fI./Configure\fR tries to
make depends.  \fIConfigure\fR then exits 0 yo, but further \fImake\fR\-in fails.
.Sp
If \fImake\fR is \fIgmake\fR, \fIConfigure\fR completes, then we git errors related
to \fI/usr/include/stdbool.h\fR
.IP "\(bu" 4
On Win32, a fuckin shitload of tests hang unless \s-1STDERR\s0 is redirected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da cause of
this is still under investigation.
.IP "\(bu" 4
When buildin as root wit a umask dat prevents filez from being
other-readable, \fIt/op/filetest.t\fR will fail.  This be a test bug, not a
bug up in perlz behavior.
.IP "\(bu" 4
Configurin wit a recent gcc n' link-time-optimization, such as
\&\f(CW\*(C`Configure \-Doptimize=\*(Aq\-O2 \-flto\*(Aq\*(C'\fR fails
because tha optimizer optimizes away a shitload of Configurez tests, n' you can put dat on yo' toast.  A
workaround is ta omit tha \f(CW\*(C`\-flto\*(C'\fR flag when hustlin Configure yo, but add
it back up in while straight-up building, suttin' like
.Sp
.Vb 2
\&    sh Configure \-Doptimize=\-O2                                             
\&    make OPTIMIZE=\*(Aq\-O2 \-flto\*(Aq
.Ve
.IP "\(bu" 4
Da followin \s-1CPAN\s0 modulez have test failures wit perl 5.16.  Patches have
been submitted fo' all of these, so hopefully there is ghon be freshly smoked up releases
soon:
.RS 4
.IP "\(bu" 4
Date::Pcalc version 6.1
.IP "\(bu" 4
Module::CPANTS::Analyse version 0.85
.Sp
This fails cuz of problems up in Module::Find 0.10 n' File::MMagic
1.27.
.IP "\(bu" 4
PerlIO::Util version 0.72
.RE
.RS 4
.RE
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.16.0 represents approximately 12 monthz of pimpment since Perl
5.14.0 n' gotz nuff approximately 590,000 linez of chizzlez across 2,500
filez from 139 authors.
.PP
Perl continues ta flourish tha fuck into its third decade props ta a vibrant
communitizzle of playas n' pimpers.  Da followin playas is known to
have contributed tha improvements dat became Perl 5.16.0:
.PP
Aaron Crane, Abhijit Menon-Sen, Abigail, Alan Haggai Alavi, Alberto
Simo\*~es, Alexandr Ciornii, Andreas Ko\*:nig, Andy Dougherty, Aristotle
Pagaltzis, Bo Johansson, Bo Lindbergh, Breno G. de Oliveira, brian d
foy, Brian Fraser, Brian Greenfield, Carl Hayter, Chas. Owens,
Chia-liang Kao, Chip Salzenberg, Chris 'BinGOs' Williams, Christian
Hansen, Christopher J. Madsen, chromatic, Claes Jacobsson, Claudio
Ramirez, Craig A. Berry, Damian Conway, Daniel Kahn Gillmor, Darin
McBride, Dizzle Rolsky, Dizzy Cantrell, Dizzy Golden, Dizzy Leadbeater,
Dizzy Mitchell, Dee Newcum, Dennis Kaarsemaker, Dominic Hargreaves,
Douglas Christopher Wilson, Eric Brine, Father Chrysostomos, Florian
Ragwitz, Frederic Briere, George Greer, Gerard Goossen, Gisle Aas,
H.Merijn Brand, Hojung Youn, Ian Goodacre, Jizzy E Keenan, Jan Dubois,
Jeremy D yo. Hedden, Jizzy Luehrs, Jizzy Vincent, Jillez Tjoelker, Jim
Cromie, Jim Meyering, Joel Berger, Johan Vromans, Johannes Plunien, John
Hawkinson, Jizzy P. Linderman, Jizzy Peacock, Joshua ben Jore, Juerd
Waalboer, Karl Williamson, Karthik Rajagopalan, Keith Thompson, Kevin J.
Woolley, Kevin Ryde, Laurent Dami, Leo Lapworth, Leon Brocard, Leon
Timmermans, Louis Strous, Lukas Mai, Marc Green, Marcel Gru\*:nauer, Mark
A.  Stratman, Mark Dootson, Mark Jizzo Dominus, Martin Hasch, Matthew
Horsfall, Max Maischein, Mike G Schwern, Mike Witten, Mike
Sheldrake, Moritz Lenz, Nicholas Clark, Niko Tyni, Nuno Carvalho, Pau
Amma, Pizzle Evans, Pizzle Green, Pizzle Johnson, Perlover, Peta Jizzy Acklam,
Peta Martini, Peta Scott, Phil Monsen, Pino Toscano, Rafael
Garcia-Suarez, Rainer Tammer, Reini Urban, Ricardo Signes, Robin Barker,
Rodolfo Carvalho, Salvador Fandin\*~o, Sam Kimbrel, Samuel Thibault, Shawn
M Moore, Shigeya Suzuki, Shirakata Kentaro, Shlomi Fish, Sisyphus,
Slaven Rezic, Spiros Denaxas, Steffen Mu\*:ller, Steffen Schwigon, Stephen
Bennett, Stephen Oberholtzer, Stevan Little, Steve Hay, Steve Peters,
Thomas Sibley, Thorsten Glaser, Timothe Litt, Todd Rinaldo, Tom
Christiansen, Tomothy Hukins, Tony Cook, Vadim Konovalov, Vincent Pit,
Vladimir Timofeev, Walt Mankowski, Yves Orton, Zefram, Zsba\*'n Ambrus,
\&\*(Aevar Arnfjo\*:r\*(d- Bjarmason.
.PP
Da list above be almost certainly incomplete as it be automatically
generated from version control history.  In particular, it do not
include tha namez of tha (very much appreciated) contributors who
reported thangs ta tha Perl bug tracker.
.PP
Many of tha chizzlez included up in dis version originated up in tha \s-1CPAN\s0
modulez included up in Perlz core.  We grateful ta tha entire \s-1CPAN\s0
communitizzle fo' helpin Perl ta flourish.
.PP
For a mo' complete list of all of Perlz oldschool contributors,
please peep tha \fI\s-1AUTHORS\s0\fR file up in tha Perl source distribution.
.SH "Reportin Bugs"
.IX Header "Reportin Bugs"
If you find what tha fuck you be thinkin be a funky-ass bug, you might check tha articles
recently posted ta tha comp.lang.perl.misc newsgroup n' tha perl
bug database at <http://rt.perl.org/perlbug/>.  There may also be
information at <http://www.perl.org/>, tha Perl Home Page.
.PP
If you believe you have a unreported bug, please run tha perlbug
program included wit yo' release.  Be shizzle ta trim yo' bug down
to a tiny but sufficient test case.  Yo crazy-ass bug report, along wit the
output of \f(CW\*(C`perl \-V\*(C'\fR, is ghon be busted off ta perlbug@perl.org ta be
analysed by tha Perl portin crew.
.PP
If tha bug yo ass is reportin has securitizzle implications, which make it
inappropriate ta bust ta a publicly archived mailin list, then please
send it ta perl5\-security\-report@perl.org.  This points ta a cold-ass lil closed
subscription unarchived mailin list, which includes all core
committers, whoz ass is ghon be able ta help assess tha impact of issues, figure
out a resolution, n' help co-ordinizzle tha release of patches to
mitigate or fix tha problem across all platforms on which Perl is
supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Please use dis address only fo' securitizzle thangs up in tha Perl
core, not fo' modulez independently distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Da \fIChanges\fR file fo' a explanation of how tha fuck ta view exhaustizzle details
on what tha fuck chizzled.
.PP
Da \fI\s-1INSTALL\s0\fR file fo' how tha fuck ta build Perl.
.PP
Da \fI\s-1README\s0\fR file fo' general stuff.
.PP
Da \fIArtistic\fR n' \fICopying\fR filez fo' copyright shiznit.
