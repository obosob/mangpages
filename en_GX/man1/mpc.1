.TH "Music Player Command" 1
.SH "NAME"
mpc \- Program fo' controllin Music Player Daemon (MPD)
.SH "SYNOPSIS"
.B mpc
.RI [ options ]
.I <command>
.RI [ <arguments> ]
.SH "DESCRIPTION"
mpc be a cold-ass lil client fo' MPD, tha Music Player Daemon. I aint talkin' bout chicken n' gravy biatch.  mpc connects ta a MPD and
controls it accordin ta commandz n' arguments passed ta dat shit.  If no command
is given, tha current status is printed (same as 'mpc status').
.SH "OPTIONS"
.TP
.BI -f,--format
.br
Configure tha format of cold lil' woo wop display fo' status n' tha playlist.  Da metadata delimitas are:

.br
%name%         Unknown (doesn't produce output)
.br
%artist%       Artist file tag
.br
%album%        Album file tag
.br
%albumartist%  Album Artist file tag
.br
%composer%     Composer file tag
.br
%title%        Title file tag
.br
%track%        Track file tag
.br
%time%         Duration of file
.br
%file%         Path of file, relatizzle ta mpdz `music_directory` variable
.br
%position%     Playlist track number
.br

Da [] operator is used ta crew output such dat if no metadata delimitas is found or matched between '[' n' ']', then none of tha charactas between '[' n' ']' is output.  '&' n' '|' is logical operators fo' n' and or. Shiiit, dis aint no joke.  '#' is used ta escape characters.  Some useful examplez fo' format are: "%file%" n' "[[%artist% - ]%title%]|[%file%]".
This command also takes tha followin defined escape sequences:

.br
\\\\ - backslash
.br
\\a - alert
.br
\\b - backspace
.br
\\t - tab
.br
\\n - newline
.br
\\v - vertical tab
.br
\\f - form-feed
.br
\\r - carriage return
.TP
.BI --wait
.br
Wait fo' operation ta finish (e.g. database update).
.TP
.BI -q,--quiet,--no-status
.br
Prevents tha current cold lil' woo wop status from bein printed on completion of some of
the commands.
.TP
.BI -v,--verbose
.br
Verbose output.
.TP
.BI -h,--host
Da host ta connect to; if not given, tha value of tha environment variable MPD_HOST is checked before defaultin ta localhost.  This default can be chizzled at compile-time.

To bust a password, provide a value of tha form "password@host".

If you specify a absolute path, mpc attempts a cold-ass lil connection via Unix Domain Socket.
.TP
.BI -p,--port
Da port ta connect to; if not given, tha value of tha environment variable MPD_PORT is checked before defaultin ta 6600.  This default can be chizzled at compile-time.
.br
.SH COMMANDS
.TP
.B add <file>
Addz a cold lil' woo wop from tha noize database ta tha playlist. Can also read input from pipes. Use "mpc ls | mpc add" ta add all filez ta tha playlist.
.TP
.B bang <file>
Da bang command works similarly to
.B add
except it addz song(s) afta tha currently playin one, rather than all up in tha end.
.TP
.B clear
Emptizzles playlist.
.TP
.B crop
Remove all joints except fo' tha currently playin song.
.TP
.B current [--wait]
Show tha currently playin song

With --wait, mpc waits until tha cold lil' woo wop chizzlez (or until playback is
started/stopped) before it queries tha current cold lil' woo wop from tha server.
.TP
.B crossfade [<seconds>]
Gets n' sets tha current amount of crossfadin between joints (0 disablez crossfading).
.TP
.B mixrampdb [<db>]
Gets n' sets tha volume level at which joints wit MIXRAMP tags is ghon be overlapped. Y'all KNOW dat shit, muthafucka! This disablez tha fadin of tha crossfade command n' simply mixes tha joints, n' you can put dat on yo' toast. -50.0 will effectively remove any gaps, 0.0 will mash tracks together n' shit. Da amount of overlap is limited by tha audio_buffer_size MPD configuration parameter.
.TP
.B mixrampdelay [<seconds>]
+Gets n' sets tha current amount of extra delay added ta tha value computed from tha MIXRAMP tags. (A wack value disablez overlappin wit MIXRAMP tags n' restores tha previous value of crossfade).
.TP
.B del <songpos>
Removes a playlist number from tha playlist. Can also read input from pipes (0 deletes tha current playin song).
.TP
.B disable <output #>
Disablez tha output, number is required.
.TP
.B enable <output #>
Enablez tha output, number is required.
.TP
.B idle [events]
Waits until a event occurs.  Prints a list of event names, one per
line.  See tha MPD protocol documentation fo' further shiznit.

If you specify a list of events, only these events is considered.
.TP
.B idleloop [events]
Similar ta "idle" yo, but re-entas "idle" state afta events have been
printed.

If you specify a list of events, only these events is considered.
.TP
.B listall [<file>]
Lists <file> from playlist. If no <file> is specified, lists all joints.
.TP
.B load <file>
Loadz <file> as playlist.
.TP
.B ls [<directory>]
Lists all files/foldaz up in <directory>. If no <directory> is specified, lists all filez up in noize directory.
.TP
.B lsplaylists
Lists available playlists.
.TP
.B move <from> <to>
Moves cold lil' woo wop at posizzle <from> ta tha posizzle <to> up in tha playlist.
.TP
.B next
Starts playin next cold lil' woo wop on playlist.
.TP
.B outputs
Lists all available outputs
.TP
.B pause
Pauses playing.
.TP
.B play <position>
Starts playin tha song-number specified. Y'all KNOW dat shit, muthafucka! If none is specified, skits number 1.
.TP
.B playlist
Prints entire playlist.
.TP
.B prev
Starts playin previous song.
.TP
.B random <on|off>
Toggle random mode if state ("on" or "off") aint specified.
.TP
.B repeat <on|off>
Toggle repeat mode if state ("on" or "off") aint specified.
.TP
.B replaygain [<off|track|album>]
Sets tha replay bust mode.  Without arguments, it prints tha replay
gain mode.
.TP
.B single <on|off>
Toggle single mode if state ("on" or "off") aint specified.
.TP
.B consume <on|off>
Toggle consume mode if state ("on" or "off") aint specified.
.TP
.B rm <file>
Deletes a specific playlist.
.TP
.B save <file>
Saves playlist as <file>.
.TP
.B search <type> <query> [<type> <query>]...
Searches fo' substrings up in cold lil' woo wop tags.
Any number of tag type n' query combinations can be specified. Y'all KNOW dat shit, muthafucka!  Possible tag
types are: artist, mixtape, title, track, name, genre, date, composer, muthafucka,
comment, disc, filename, or any (to match any tag).
.TP
.B find <type> <query> [<type> <query>]...
Same as search yo, but tag joints must match <query>s exactly instead of
fuckin wit a substrin match.
.TP
.B findadd <type> <query> [<type> <query>]...
Same as find yo, but add tha result ta tha current playlist instead of
printin em.
.TP
.B list <type> [<type> <query>]...
Return a list of all tagz of given tag <type>.  Optionizzle search
<type>s/<query>s limit thangs up in dis biatch up in a way similar ta search.
.TP
.B seek [+-][<HH:MM:SS>] or <[+-]<0-100>%>
Seeks by hour, minute or seconds, minutes or minutes can be omitted.
If seekin by cementage, seeks within tha current cold lil' woo wop up in tha specified manner n' shit.  If a "+" or "-" is used, tha seek is done relatizzle ta tha current cold lil' woo wop position. I aint talkin' bout chicken n' gravy biatch fo' realz. Absolute seekin by default.
.TP
.B shuffle
Shufflez all joints on tha playlist.
.TP
.B stats
Displays statistics bout MPD.
.TP
.B stop
Stops playing.
.TP
.B toggle
Togglez between play n' pause. If stopped starts playing. Do not support start playin at cold lil' woo wop number (use play).
.TP
.B update [--wait] [<path>]
Scans fo' updated filez up in tha noize directory.  Da optional
parameta <path> (relatizzle ta tha noize directory) may limit tha scope
of tha update.

With --wait, mpc waits until MPD has finished tha update.
.TP
.B version
Reports tha version of MPD.
.TP
.B volume [+-]<num>
Sets tha volume ta <num> (0-100).  If "+" or "-" is used, then it adjusts
the volume relatizzle ta tha current volume.
.TP
.B channels
List tha channels dat other clients have subscribed to.
.TP
.B sendmessage <channel> <message>
Send a message ta tha specified channel.
.TP
.B waitmessage <channel>
Wait fo' at least one message on tha specified channel.
.TP
.B subscribe <channel>>
Subscribe ta tha specified channel n' continuously receive lyrics.
.SH "ENVIRONMENT VARIABLES"
All environment variablez is overridden by any joints specified via command line switches.
.IP MPD_HOST
Specifies tha hostname of tha mpd server n' shit.  This can be a hostname, IP address or a absolute path.  If it be a absolute path, mpc will use Unix Domain Sockets instead of TCP/IP.

If tha server requires a password, it can be specified rockin password@host up in tha MPD_HOST variable.
.IP MPD_PORT
Specifies tha port tha mpd server is listenin on.
.SH "EXAMPLES"
.TP
.br
For useful examplez of mpc use up in playlist parsing, peep mpd-m3u-playlist.sh n' mpd-pls-playlist.sh.
.br
.SH "BUGS"
Report bugs on http://www.musicpd.org/mantis/
.SH "NOTE"
Since MPD uses UTF\-8, mpc need ta convert charactas ta the
charset used by tha local system. If you git characta conversion errors when you hustlin mpc you probably need ta set up yo' locale. This is done by settin any of tha LC_CTYPE, LANG or LC_ALL environment variablez (LC_CTYPE only affects characta handling).
.SH "SEE ALSO"
mpd(1)
.SH "AUTHOR"
See http://git.musicpd.org/cgit/master/mpc.git/plain/AUTHORS
