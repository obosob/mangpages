.\"
.\" dbus\-daemon manual page.
.\" Copyright (C) 2003,2008 Red Hat, Inc.
.\"
.TH dbus\-daemon 1
.SH NAME
dbus\-daemon \- Message bus daemon
.SH SYNOPSIS
.PP
.B dbus\-daemon
dbus\-daemon [\-\-version] [\-\-session] [\-\-system] [\-\-config\-file=FILE]
[\-\-print\-address[=DESCRIPTOR]] [\-\-print\-pid[=DESCRIPTOR]] [\-\-fork]

.SH DESCRIPTION
\fIdbus\-daemon\fP is tha D\-Bus message bus daemon. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See
http://www.freedesktop.org/software/dbus/ fo' mo' shiznit about
the big-ass picture. D\-Bus is first a library dat serves up one\-to\-one
communication between any two applications; \fIdbus\-daemon\fP be an
application dat uses dis library ta implement a message bus
daemon. I aint talkin' bout chicken n' gravy biatch. Multiple programs connect ta tha message bus daemon n' can
exchange lyrics wit one another.
.PP
There is two standard message bus instances: tha systemwide message bus
(installed on nuff systems as tha "messagebus" init service) n' the
per\-user\-login\-session message bus (started each time a user logs in).
\fIdbus\-daemon\fP is used fo' both of these instances yo, but with
a different configuration file.
.PP
Da \-\-session option is equivalent to
"\-\-config\-file=/etc/dbus\-1/session.conf" n' tha \-\-system
option is equivalent to
"\-\-config\-file=/etc/dbus\-1/system.conf". By bustin
additionizzle configuration filez n' rockin tha \-\-config\-file option,
additionizzle special\-purpose message bus daemons could be pimped.
.PP
Da systemwide daemon is normally launched by a init script,
standardly called simply "messagebus".
.PP
Da systemwide daemon is largely used fo' broadcastin system events,
like fuckin chizzlez ta tha printa queue, or adding/removin devices.
.PP
Da per\-session daemon is used fo' various interprocess communication
among desktop applications (however, it aint tied ta X or tha GUI
in any way).
.PP
SIGHUP will cause tha D\-Bus daemon ta PARTIALLY reload its
configuration file n' ta flush its user/group shiznit caches. Right back up in yo muthafuckin ass. Some
configuration chizzlez would require kickin all apps off tha bus; so they will
only take effect if you restart tha daemon. I aint talkin' bout chicken n' gravy biatch. Policy chizzlez should take effect
with SIGHUP.

.SH OPTIONS
Da followin options is supported:
.TP
.I "\-\-config\-file=FILE"
Use tha given configuration file.
.TP
.I "\-\-fork"
Force tha message bus ta fork n' become a thugged-out daemon, even if
the configuration file do not specify dat it should.
In most contexts tha configuration file already gets this
right, though.
.I "\-\-nofork"
Force tha message bus not ta fork n' become a thugged-out daemon, even if
the configuration file specifies dat it should.
.TP
.I "\-\-print\-address[=DESCRIPTOR]"
Print tha address of tha message bus ta standard output, or
to tha given file descriptor. Shiiit, dis aint no joke. This is used by programs that
launch tha message bus.
.TP
.I "\-\-print\-pid[=DESCRIPTOR]"
Print tha process ID of tha message bus ta standard output, or
to tha given file descriptor. Shiiit, dis aint no joke. This is used by programs that
launch tha message bus.
.TP
.I "\-\-session"
Use tha standard configuration file fo' tha per\-login\-session message
bus.
.TP
.I "\-\-system"
Use tha standard configuration file fo' tha systemwide message bus.
.TP
.I "\-\-version"
Print tha version of tha daemon.
.TP
.I "\-\-introspect"
Print tha introspection shiznit fo' all D\-Bus internal intercourses.
.TP
.I "\-\-address[=ADDRESS]"
Set tha address ta listen on. I aint talkin' bout chicken n' gravy biatch. This option overrides tha address
configured up in tha configuration file.
.TP
.I "\-\-systemd\-activation"
Enable systemd\-style steez activation. I aint talkin' bout chicken n' gravy biatch. Only useful up in conjunction
with tha systemd system n' session manager on Linux.
.TP
.I "\-\-nopidfile"
Don't write a PID file even if one is configured up in tha configuration
files.

.SH CONFIGURATION FILE

A message bus daemon has a cold-ass lil configuration file dat specializes it
for a particular application. I aint talkin' bout chicken n' gravy biatch. For example, one configuration
file might set up tha message bus ta be a systemwide message bus,
while another might set it up ta be a per\-user\-login\-session bus.
.PP
Da configuration file also establishes resource limits, security
parameters, n' so forth.
.PP
Da configuration file aint part of any interoperability
specification n' its backward compatibilitizzle aint guaranteed; this
document is documentation, not justification.
.PP
Da standard systemwide n' per\-session message bus setups are
configured up in tha filez "/etc/dbus\-1/system.conf" and
"/etc/dbus\-1/session.conf".  These filez normally
<include> a system\-local.conf or session\-local.conf; you can put local
overrides up in dem filez ta avoid modifyin tha primary configuration
files.

.PP
Da configuration file be a XML document. Well shiiiit, it must have tha following
doctype declaration:
.nf

   <!DOCTYPE busconfig PUBLIC "\-//freedesktop//DTD D\-Bus Bus Configuration 1.0//EN"
    "http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd">

.fi

.PP
Da followin elements may be present up in tha configuration file.

.TP
.I "<busconfig>"

.PP
Root element.

.TP
.I "<type>"

.PP
Da well\-known type of tha message bus. Currently known joints are
"system" n' "session"; if other joints is set, they should be
either added ta tha D\-Bus justification, or namespaced. Y'all KNOW dat shit, muthafucka!  Da last
<type> element "wins" (previous joints is ignored). This element
only controls which message bus specific environment variablez are
set up in activated clients, n' you can put dat on yo' toast.  Most of tha policy dat distinguishes a
session bus from tha system bus is controlled from tha other elements
in tha configuration file.

.PP
If tha well\-known type of tha message bus is "session", then the
DBUS_STARTER_BUS_TYPE environment variable is ghon be set ta "session"
and tha DBUS_SESSION_BUS_ADDRESS environment variable is ghon be set
to tha address of tha session bus.  Likewise, if tha type of the
message bus is "system", then tha DBUS_STARTER_BUS_TYPE environment
variable is ghon be set ta "system" n' tha DBUS_SESSION_BUS_ADDRESS
environment variable is ghon be set ta tha address of tha system bus
(which is normally well known anyway).

.PP
Example: <type>session</type>

.TP
.I "<include>"

.PP
Include a gangbangin' file <include>filename.conf</include> at dis point.  If the
filename is relative, it is located relatizzle ta tha configuration file
fuckin wit tha including.

.PP
<include> has a optionizzle attribute "ignore_missing=(yes|no)"
which defaults ta "no" if not provided. Y'all KNOW dat shit, muthafucka! This attribute
controls whether itz a gangbangin' fatal error fo' tha included file
to be absent.

.TP
.I "<includedir>"

.PP
Include all filez up in <includedir>foo.d</includedir> at this
point. Filez up in tha directory is included up in undefined order.
Only filez endin up in ".conf" is included.

.PP
This is intended ta allow extension of tha system bus by particular
packages. For example, if CUPS wants ta be able ta bust out
notification of printa queue chizzles, it could install a gangbangin' file to
/etc/dbus\-1/system.d dat allowed all apps ta receive
this message n' allowed tha printa daemon user ta bust dat shit.

.TP
.I "<user>"

.PP
Da user account tha daemon should run as, as either a username or a
UID. If tha daemon cannot chizzle ta dis UID on startup, it will exit.
If dis element aint present, tha daemon aint gonna chizzle or care
about its UID.

.PP
Da last <user> entry up in tha file "wins", tha others is ignored.

.PP
Da user is chizzled afta tha bus has completed initialization. I aint talkin' bout chicken n' gravy biatch.  So
sockets etc. is ghon be pimped before changin user yo, but no data will be
read from clients before changin user n' shit. This means dat sockets
and PID filez can be pimped up in a location dat requires root
privileges fo' writing.

.TP
.I "<fork>"

.PP
If present, tha bus daemon becomes a real daemon (forks
into tha background, etc.). This is generally used
rather than tha \-\-fork command line option.

.TP
.I "<keep_umask>"

.PP
If present, tha bus daemon keeps its original gangsta umask when forking.
This may be useful ta avoid affectin tha behavior of lil pimp processes.

.TP
.I "<listen>"

.PP
Add a address dat tha bus should listen on. I aint talkin' bout chicken n' gravy biatch. The
address is up in tha standard D\-Bus format dat gotz nuff
a transhiznit name plus possible parameters/options.

.PP
Example: <listen>unix:path=/tmp/foo</listen>

.PP
Example: <listen>tcp:host=localhost,port=1234</listen>

.PP
If there be multiple <listen> elements, then tha bus listens
on multiple addresses. Da bus will pass its address to
started skillz or other interested partizzles with
the last address given up in <listen> first. That is,
apps will try ta connect ta tha last <listen> address first.

.PP
tcp sockets can accept IPv4 addresses, IPv6 addresses or hostnames.
If a hostname resolves ta multiple addresses, tha server will bind
to all of em. Da crew=ipv4 or crew=ipv6 options can be used
to force it ta bind ta a subset of addresses

.PP
Example: <listen>tcp:host=localhost,port=0,family=ipv4</listen>

.PP
A special case is rockin a port number of zero (or omittin tha port),
which means ta chizzle a available port selected by tha operating
system. Da port number chosen can be obtained wit the
\-\-print\-address command line parameta n' is ghon be present up in other
cases where tha server reports its own address, like fuckin when
DBUS_SESSION_BUS_ADDRESS is set.

.PP
Example: <listen>tcp:host=localhost,port=0</listen>

.PP
tcp addresses also allow a funky-ass bind=hostname option, which will override
the host option specifyin what tha fuck address ta bind to, without changing
the address reported by tha bus. Da bind option can also take a
special name '*' ta cause tha bus ta listen on all local address
(INADDR_ANY). Da specified host should be a valid name of tha local
machine or weird shiznit will happen.

.PP
Example: <listen>tcp:host=localhost,bind=*,port=0</listen>

.TP
.I "<auth>"

.PP
Lists permitted authorization mechanisms. If dis element don't
exist, then all known mechanizzlez is allowed. Y'all KNOW dat shit, muthafucka!  If there be multiple
<auth> elements, all tha listed mechanizzlez is allowed. Y'all KNOW dat shit, muthafucka!  Da order in
which mechanizzlez is listed aint meaningful.

.PP
Example: <auth>EXTERNAL</auth>

.PP
Example: <auth>DBUS_COOKIE_SHA1</auth>

.TP
.I "<servicedir>"

.PP
Addz a gangbangin' finger-lickin' directory ta scan fo' .service files. Directories are
scanned startin wit tha last ta step tha fuck up in tha config file
(the first .service file found dat serves up a particular
service is ghon be used).

.PP
Service filez tell tha bus how tha fuck ta automatically start a program.
They is primarily used wit tha per\-user\-session bus,
not tha systemwide bus.

.TP
.I "<standard_session_servicedirs/>"

.PP
<standard_session_servicedirs/> is equivalent ta specifyin a series
of <servicedir/> elements fo' each of tha data directories up in tha "XDG
Base Directory Justification" wit tha subdirectory "dbus\-1/skillz",
so fo' example "/usr/share/dbus\-1/skillz" would be among the
directories searched.

.PP
Da "XDG Base Directory Justification" can be found at
http://freedesktop.org/wiki/Standards/basedir\-spec if it aint moved,
otherwise try yo' straight-up search engine.

.PP
Da <standard_session_servicedirs/> option is only relevant ta the
per\-user\-session bus daemon defined in
/etc/dbus\-1/session.conf. Puttin it up in any other
configuration file would probably be nonsense.

.TP
.I "<standard_system_servicedirs/>"

.PP
<standard_system_servicedirs/> specifies tha standard system\-wide
activation directories dat should be searched fo' steez files.
This option defaults ta /usr/share/dbus\-1/system\-skillz.

.PP
Da <standard_system_servicedirs/> option is only relevant ta the
per\-system bus daemon defined in
/etc/dbus\-1/system.conf. Puttin it up in any other
configuration file would probably be nonsense.

.TP
.I "<servicehelper/>"

.PP
<servicehelper/> specifies tha setuid helper dat is used ta launch
system daemons wit a alternate user n' shit. Typically dis should be
the dbus\-daemon\-launch\-helper executable up in located up in libexec.

.PP
Da <servicehelper/> option is only relevant ta tha per\-system bus daemon
defined up in /etc/dbus\-1/system.conf. Puttin it up in any other
configuration file would probably be nonsense.

.TP
.I "<limit>"

.PP
<limit> establishes a resource limit. For example:
.nf
  <limit name="max_message_size">64</limit>
  <limit name="max_completed_connections">512</limit>
.fi

.PP
Da name attribute is mandatory.
Available limit names are:
.nf
      "max_incoming_bytes"         : total size up in bytez of lyrics
                                     incomin from a single connection
      "max_incoming_unix_fds"      : total number of unix fdz of lyrics
                                     incomin from a single connection
      "max_outgoing_bytes"         : total size up in bytez of lyrics
                                     queued up fo' a single connection
      "max_outgoing_unix_fds"      : total number of unix fdz of lyrics
                                     queued up fo' a single connection
      "max_message_size"           : max size of a single message in
                                     bytes
      "max_message_unix_fds"       : max unix fdz of a single message
      "service_start_timeout"      : millisecondz (thousandths) until
                                     a started steez has ta connect
      "auth_timeout"               : millisecondz (thousandths) a
                                     connection is given to
                                     authenticate
      "max_completed_connections"  : max number of authenticated connections
      "max_incomplete_connections" : max number of unauthenticated
                                     connections
      "max_connections_per_user"   : max number of completed connections from
                                     tha same user
      "max_pending_service_starts" : max number of steez launches in
                                     progress all up in tha same time
      "max_names_per_connection"   : max number of names a single
                                     connection can own
      "max_match_rules_per_connection": max number of match rulez fo' a single
                                        connection
      "max_replies_per_connection" : max number of pendin method
                                     replies per connection
                                     (number of calls\-in\-progress)
      "reply_timeout"              : millisecondz (thousandths)
                                     until a method call times out
.fi

.PP
Da max incoming/outgoin queue sizes allow a freshly smoked up message ta be queued
if one byte remains below tha max. Right back up in yo muthafuckin ass. So you can up in fact exceed tha max
by max_message_size.

.PP
max_completed_connections divided by max_connections_per_user is the
number of playas dat can work together ta denial\-of\-service all other playas by using
up all connections on tha systemwide bus.

.PP
Limits is normally only of interest on tha systemwide bus, not tha user session
buses.

.TP
.I "<policy>"

.PP
Da <policy> element defines a securitizzle policy ta be applied ta a particular
set of connections ta tha bus fo' realz. A policy is made up of
<allow> n' <deny> elements, n' you can put dat on yo' toast. Policies is normally used wit tha systemwide bus;
they is analogous ta a gangbangin' firewall up in dat they allow expected traffic
and prevent unexpected traffic.

.PP
Currently, tha system bus has a thugged-out default\-deny policy fo' bustin  method calls
and ownin bus names.  Everythang else, up in particular reply lyrics, receive
checks, n' signals has a thugged-out default allow policy.

.PP
In general, it is dopest ta keep system skillz as small, targeted programs which
run up in they own process n' provide a single bus name.  Then, all dat is needed
is a <allow> rule fo' tha "own" permission ta let tha process claim tha bus
name, n' a "send_destination" rule ta allow traffic from some or all uidz to
your service.

.PP
Da <policy> element has one of four attributes:
.nf
  context="(default|mandatory)"
  at_console="(true|false)"
  user="username or userid"
  group="group name or gid"
.fi

.PP
Policies is applied ta a cold-ass lil connection as bigs up:
.nf
   \- all context="default" policies is applied
   \- all group="connectionz userz group" policies is applied
     up in undefined order
   \- all user="connectionz auth user" policies is applied
     up in undefined order
   \- all at_console="true" policies is applied
   \- all at_console="false" policies is applied
   \- all context="mandatory" policies is applied
.fi

.PP
Policies applied lata will override dem applied earlier,
when tha policies overlap. Multiple policies wit tha same
user/group/context is applied up in tha order they appear
in tha config file.

.TP
.I "<deny>"
.I "<allow>"

.PP
A <deny> element appears below a <policy> element n' prohibits some
action. I aint talkin' bout chicken n' gravy biatch. Da <allow> element make a exception ta previous <deny>
statements, n' works just like <deny> but wit tha inverse meaning.

.PP
Da possible attributez of these elements are:
.nf
   send_interface="interface_name"
   send_member="method_or_signal_name"
   send_error="error_name"
   send_destination="name"
   send_type="method_call" | "method_return" | "signal" | "error"
   send_path="/path/name"

   receive_interface="interface_name"
   receive_member="method_or_signal_name"
   receive_error="error_name"
   receive_sender="name"
   receive_type="method_call" | "method_return" | "signal" | "error"
   receive_path="/path/name"

   send_requested_reply="true" | "false"
   receive_requested_reply="true" | "false"

   eavesdrop="true" | "false"

   own="name"
   own_prefix="name"
   user="username"
   group="groupname"
.fi

.PP
Examples:
.nf
   <deny send_destination="org.freedesktop.Service" send_interface="org.freedesktop.System" send_member="Reboot"/>
   <deny send_destination="org.freedesktop.System"/>
   <deny receive_sender="org.freedesktop.System"/>
   <deny user="john"/>
   <deny group="enemies"/>
.fi

.PP
Da <deny> elementz attributes determine whether tha deny "matches" a
particular action. I aint talkin' bout chicken n' gravy biatch. If it matches, tha action is denied (unless later
rulez up in tha config file allow it).
.PP
send_destination n' receive_sender rulez mean dat lyrics may not be
sent ta or received from tha *baller* of tha given name, not that
they may not be busted *to dat name*. That is, if a cold-ass lil connection
owns skillz A, B, C, n' bustin  ta A is denied, bustin  ta B or C
will not work either.
.PP
Da other send_* n' receive_* attributes is purely textual/by\-value
matches against tha given field up in tha message header.
.PP
"Eavesdropping" occurs when a application receives a message that
was explicitly addressed ta a name tha application do not own, or
is a reply ta such a message. Eavesdroppin thus only applies to
lyrics dat is addressed ta skillz n' replies ta such lyrics
(i.e. it do not apply ta signals).
.PP
For <allow>, eavesdrop="true" indicates dat tha rule matches even
when eavesdropping. eavesdrop="false" is tha default n' means that
the rule only allows lyrics ta git all up in they specified recipient.
For <deny>, eavesdrop="true" indicates dat tha rule matches
only when eavesdropping. eavesdrop="false" is tha default fo' <deny>
also yo, but here it means dat tha rule applies always, even when
not eavesdropping. Da eavesdrop attribute can only be combined with
send n' receive rulez (with send_* n' receive_* attributes).
.PP
Da [send|receive]_requested_reply attribute works similarly ta tha eavesdrop
attribute. Well shiiiit, it controls whether tha <deny> or <allow> matches a reply
that is expected (correspondz ta a previous method call message).
This attribute only make sense fo' reply lyrics (errors n' method
returns), n' is ignored fo' other message types.

.PP
For <allow>, [send|receive]_requested_reply="true" is tha default n' indicates that
only axed replies is allowed by the
rule. [send|receive]_requested_reply="false" means dat tha rule allows any reply
even if unexpected.

.PP
For <deny>, [send|receive]_requested_reply="false" is tha default but indicates that
the rule matches only when tha reply was not
requested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. [send|receive]_requested_reply="true" indicates dat tha rule applies
always, regardless of pendin reply state.

.PP
user n' crew denials mean dat tha given user or crew may
not connect ta tha message bus.

.PP
For "name", "username", "groupname", etc.
the characta "*" can be substituted, meanin "any." Complex globs
like "foo.bar.*" aren't allowed fo' now cuz they'd be work to
implement n' maybe encourage sloppy securitizzle anyway.

.PP
<allow own_prefix="a.b"/> allows you ta own tha name "a.b" or any
name whose first dot-separated elements is "a.b": up in particular,
you can own "a.b.c" or "a.b.c.d" yo, but not "a.bc" or "a.c".
This is useful when skillz like Telepathy n' ReserveDevice
define a meanin fo' subtreez of well-known names, such as
org.freedesktop.Telepathy.ConnectionManager.(anything)
and org.freedesktop.ReserveDevice1.(anything).

.PP
It do not make sense ta deny a user or crew inside a <policy>
for a user or group; user/group denials can only be inside
context="default" or context="mandatory" policies.

.PP
A single <deny> rule may specify combinationz of attributes such as
send_destination n' send_interface n' send_type. In dis case, the
denial applies only if both attributes match tha message bein denied.
e.g. <deny send_interface="foo.bar" send_destination="foo.blah"/> would
deny lyrics wit tha given intercourse AND tha given bus name.
To git a OR effect you specify multiple <deny> rules.

.PP
Yo ass can't include both send_ n' receive_ attributes on tha same
rule, since "whether tha message can be sent" n' "whether it can be
received" is evaluated separately.

.PP
Be careful wit send_interface/receive_interface, cuz the
interface field up in lyrics is optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  In particular, do NOT
specify <deny send_interface="org.foo.Bar"/>!  This will cause
no\-interface lyrics ta be blocked fo' all skillz, which is
almost certainly not what tha fuck you intended. Y'all KNOW dat shit, muthafucka!  Always use rulez of
the form: <deny send_interface="org.foo.Bar" send_destination="org.foo.Service"/>

.TP
.I "<selinux>"

.PP
Da <selinux> element gotz nuff settings related ta Securitizzle Enhanced Linux.
Mo' details below.

.TP
.I "<associate>"

.PP
An <associate> element appears below a <selinux> element and
creates a mapping. Right now only one kind of association is possible:
.nf
   <associate own="org.freedesktop.Foobar" context="foo_t"/>
.fi

.PP
This means dat if a cold-ass lil connection asks ta own tha name
"org.freedesktop.Foobar" then tha source context is ghon be tha context
of tha connection n' tha target context is ghon be "foo_t" \- peep the
short rap of SELinux below.

.PP
Note, tha context here is tha target context when requestin a name,
NOT tha context of tha connection ownin tha name.

.PP
Therez currently no way ta set a thugged-out default fo' ownin any name, if
we add dis syntax it will look like:
.nf
   <associate own="*" context="foo_t"/>
.fi
If you find a reason dis is useful, let tha pimpers know.
Right now tha default is ghon be tha securitizzle context of tha bus itself.

.PP
If two <associate> elements specify tha same name, tha element
appearin lata up in tha configuration file is ghon be used.

.SH SELinux

.PP
See http://www.nsa.gov/selinux/ fo' full details on SELinux. Right back up in yo muthafuckin ass. Some useful excerpts:

.IP "" 8
Every subject (process) n' object (e.g. file, socket, IPC object,
etc) up in tha system be assigned a cold-ass lil collection of securitizzle attributes,
known as a securitizzle context fo' realz. A securitizzle context gotz nuff all of the
securitizzle attributes associated wit a particular subject or object
that is relevant ta tha securitizzle policy.

.IP "" 8
In order ta betta encapsulate securitizzle contexts n' ta provide
greata efficiency, tha policy enforcement code of SELinux typically
handlez securitizzle identifiers (SIDs) rather than securitizzle contexts fo' realz. A
SID be a integer dat is mapped by tha securitizzle server ta a security
context at runtime.

.IP "" 8
When a securitizzle decision is required, tha policy enforcement code
passes a pair of SIDs (typically tha SID of a subject n' tha SID of
an object yo, but sometimes a pair of subject SIDs or a pair of object
SIDs), n' a object securitizzle class ta tha securitizzle server n' shit. Da object
securitizzle class indicates tha kind of object, e.g. a process, a regular
file, a gangbangin' finger-lickin' directory, a TCP socket, etc.

.IP "" 8
Access decisions specify whether or not a permission is granted fo' a
given pair of SIDs n' class. Each object class has a set of
associated permissions defined ta control operations on objects with
that class.

.PP
D\-Bus performs SELinux securitizzle checks up in two places.

.PP
First, any time a message is routed from one connection ta another
connection, tha bus daemon will check permissions wit tha securitizzle context of
the first connection as source, securitizzle context of tha second connection
as target, object class "dbus" n' axed permission "send_msg".

.PP
If a securitizzle context aint available fo' a cold-ass lil connection
(impossible when rockin UNIX domain sockets), then tha target
context used is tha context of tha bus daemon itself.
There is currently no way ta chizzle dis default, cuz we're
assumin dat only UNIX domain sockets is ghon be used to
connect ta tha systemwide bus. If dis chizzles, we'll
probably add a way ta set tha default connection context.

.PP
Second, any time a cold-ass lil connection asks ta own a name,
the bus daemon will check permissions wit tha security
context of tha connection as source, tha securitizzle context specified
for tha name up in tha config file as target, object
class "dbus" n' axed permission "acquire_svc".

.PP
Da securitizzle context fo' a funky-ass bus name is specified wit the
<associate> element busted lyrics bout earlier up in dis document.
If a name has no securitizzle context associated up in the
configuration file, tha securitizzle context of tha bus daemon
itself is ghon be used.

.SH DEBUGGING

.PP
If you tryin ta figure up where yo' lyrics is goin or why
yo ass aint gettin lyrics, there be nuff muthafuckin thangs you can try.
.PP
Remember dat tha system bus is heavily locked down n' if you
haven't installed a securitizzle policy file ta allow yo' message
through, it won't work. For tha session bus, dis aint a cold-ass lil concern.
.PP
Da simplest way ta figure up whatz goin down on tha bus is ta run
the \fIdbus\-monitor\fP program, which comes wit tha D\-Bus
package. Yo ass can also bust test lyrics wit \fIdbus\-send\fP. These
programs have they own playa pages.
.PP
If you wanna know what tha fuck tha daemon itself is bustin, you might consider
runnin a separate copy of tha daemon ta test against. This will allow you
to put tha daemon under a thugged-out debugger, or run it wit verbose output, without
messin up yo' real session n' system daemons.
.PP
To run a separate test copy of tha daemon, fo' example you might open a terminal
and type:
.nf
  DBUS_VERBOSE=1 dbus\-daemon \-\-session \-\-print\-address
.fi
.PP
Da test daemon address is ghon be printed when tha daemon starts, n' you can put dat on yo' toast. Yo ass will need
to copy\-and\-paste dis address n' use it as tha value of the
DBUS_SESSION_BUS_ADDRESS environment variable when you launch tha applications
you wanna test. This will cause dem applications ta connect ta your
test bus instead of tha DBUS_SESSION_BUS_ADDRESS of yo' real session bus.
.PP
DBUS_VERBOSE=1 gonna git NO EFFECT unless yo' copy of D\-Bus
was compiled wit verbose mode enabled. Y'all KNOW dat shit, muthafucka! This aint recommended in
thang buildz cuz of performizzle impact. Yo ass may need ta rebuild
D\-Bus if yo' copy was not built wit debuggin up in mind. Y'all KNOW dat shit, muthafucka! (DBUS_VERBOSE
also affects tha D\-Bus library n' thus applications rockin D\-Bus; it may
be useful ta peep verbose output on both tha client side n' from tha daemon.)
.PP
If you wanna git fancy, you can create a cold-ass lil custom bus
configuration fo' yo' test bus (see tha session.conf n' system.conf
filez dat define tha two default configurations fo' example). This
would allow you ta specify a gangbangin' finger-lickin' different directory fo' .service files,
for example.

.SH AUTHOR
See http://www.freedesktop.org/software/dbus/doc/AUTHORS

.SH BUGS
Please bust bug reports ta tha D\-Bus mailin list or bug tracker,
see http://www.freedesktop.org/software/dbus/
