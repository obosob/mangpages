.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL581DELTA 1"
.TH PERL581DELTA 1 "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl581delta \- what tha fuck is freshly smoked up fo' perl v5.8.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document raps bout differences between tha 5.8.0 release and
the 5.8.1 release.
.PP
If yo ass is upgradin from a earlier release like fuckin 5.6.1, first read
the perl58delta, which raps bout differences between 5.6.0 and
5.8.0.
.PP
In case yo ass is wonderin bout 5.6.1, dat shiznit was bug-fix-wise rather
identical ta tha pimpment release 5.7.1.  Confused?  This timeline
hopefully helps a funky-ass bit: it lists tha freshly smoked up major releases, they maintenance
releases, n' tha pimpment releases.
.PP
.Vb 1
\&          New     Maintenizzle  Development
\&
\&          5.6.0                             2000\-Mar\-22
\&                               5.7.0        2000\-Sep\-02
\&                  5.6.1                     2001\-Apr\-08
\&                               5.7.1        2001\-Apr\-09
\&                               5.7.2        2001\-Jul\-13
\&                               5.7.3        2002\-Mar\-05
\&          5.8.0                             2002\-Jul\-18
\&                  5.8.1                     2003\-Sep\-25
.Ve
.SH "Incompatible Chizzles"
.IX Header "Incompatible Chizzles"
.SS "Hash Randomisation"
.IX Subsection "Hash Randomisation"
Mainly cuz of securitizzle reasons, tha \*(L"random ordering\*(R" of hashes
has been made even mo' random.  Previously while tha order of hash
elements from \fIkeys()\fR, \fIvalues()\fR, n' \fIeach()\fR was essentially random,
it was still repeatable.  Now, however, tha order varies between
different runz of Perl.
.PP
\&\fBPerl has never guaranteed any orderin of tha hash keys\fR, n' the
orderin has already chizzled nuff muthafuckin times durin tha gametime of
Perl 5.  Also, tha orderin of hash keys has always been, and
continues ta be, affected by tha insertion order.
.PP
Da added randomnizz may affect applications.
.PP
One possible scenario is when output of a application has included
hash data.  For example, if you have used tha Data::Dumper module to
dump data tha fuck into different files, n' then compared tha filez ta see
whether tha data has chizzled, now you gonna git false positives since
the order up in which hashes is dumped will vary.  In general tha cure
is ta sort tha keys (or tha joints); up in particular fo' Data::Dumper to
use tha \f(CW\*(C`Sortkeys\*(C'\fR option. I aint talkin' bout chicken n' gravy biatch.  If some particular order is straight-up
important, use tied hashes: fo' example tha Tie::IxHash module
which by default preserves tha order up in which tha hash elements
were added.
.PP
Mo' subtle problem is reliizzle on tha order of \*(L"global destruction\*(R".
That is what tha fuck happens all up in tha end of execution: Perl destroys all data
structures, includin user data.  If yo' destructors (the \s-1DESTROY\s0
subroutines) have assumed any particular orderin ta tha global
destruction, there might be problems ahead. Y'all KNOW dat shit, muthafucka!  For example, up in a
destructor of one object you cannot assume dat objectz of any other
class is still available, unless you hold a reference ta em.
If tha environment variable \s-1PERL_DESTRUCT_LEVEL\s0 is set ta a non-zero
value, or if Perl is exitin a spawned thread, it will also destruct
the ordinary references n' tha symbol tablez dat is no longer up in use.
Yo ass can't call a cold-ass lil class method or a ordinary function on a cold-ass lil class that
has been collected dat way.
.PP
Da hash randomisation is certain ta reveal hidden assumptions about
some particular orderin of hash elements, n' outright bugs: it
revealed all dem bugs up in tha Perl core n' core modules.
.PP
To disable tha hash randomisation up in runtime, set tha environment
variable \s-1PERL_HASH_SEED\s0 ta 0 (zero) before hustlin Perl (for more
information peep \*(L"\s-1PERL_HASH_SEED\*(R"\s0 up in perlrun), or ta disable tha feature
completely up in compile time, compile wit \f(CW\*(C`\-DNO_HASH_SEED\*(C'\fR (see \fI\s-1INSTALL\s0\fR).
.PP
See \*(L"Algorithmic Complexitizzle Attacks\*(R" up in perlsec fo' tha original
rationale behind dis chizzle.
.SS "\s-1UTF\-8\s0 On Filehandlez No Longer Activated By Locale"
.IX Subsection "UTF-8 On Filehandlez No Longer Activated By Locale"
In Perl 5.8.0 all filehandles, includin tha standard filehandles,
were implicitly set ta be up in Unicode \s-1UTF\-8\s0 if tha locale settings
indicated tha use of \s-1UTF\-8. \s0 This feature caused too nuff problems,
so tha feature was turned off n' redesigned: peep \*(L"Core Enhancements\*(R".
.ie n .SS "Single-number v\-strings is no longer v\-strings before ""=>"""
.el .SS "Single-number v\-strings is no longer v\-strings before ``=>''"
.IX Subsection "Single-number v-strings is no longer v-strings before =>"
Da version strings or v\-strings (see \*(L"Version Strings\*(R" up in perldata)
feature introduced up in Perl 5.6.0 has been a source of some mad drama\*(--
especially when tha user did not wanna use it yo, but Perl thought it
knew mo' betta n' shit.  Especially shitsome has been tha feature dat before
a \*(L"=>\*(R" a version strang (a \*(L"v\*(R" followed by digits) has been interpreted
as a v\-strin instead of a strang literal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  In other lyrics:
.PP
.Vb 1
\&        %h = ( v65 => 42 );
.Ve
.PP
has meant since Perl 5.6.0
.PP
.Vb 1
\&        %h = ( \*(AqA\*(Aq => 42 );
.Ve
.PP
(at least up in platformz of \s-1ASCII\s0 progeny)  Perl 5.8.1 restores the
more natural interpretation
.PP
.Vb 1
\&        %h = ( \*(Aqv65\*(Aq => 42 );
.Ve
.PP
Da multi-number v\-strings like v65.66 n' 65.66.67 still continue to
be v\-strings up in Perl 5.8.
.SS "(Win32) Da \-C Switch Has Been Repurposed"
.IX Subsection "(Win32) Da -C Switch Has Been Repurposed"
Da \-C switch has chizzled up in a incompatible way.  Da oldschool semantics
of dis switch only made sense up in Win32 n' only up in tha \*(L"use utf8\*(R"
universe up in 5.6.x releases, n' do not make sense fo' tha Unicode
implementation up in 5.8.0.  Since dis switch could not done been used
by mah playas, it has been repurposed. Y'all KNOW dat shit, muthafucka!  Da behavior dat dis switch
enabled up in 5.6.x releases may be supported up in a transparent,
data-dependent fashizzle up in a gangbangin' future release.
.PP
For tha freshly smoked up game of dis switch, peep \*(L"\s-1UTF\-8\s0 no longer default under
\&\s-1UTF\-8\s0 locales\*(R", n' \*(L"\-C\*(R" up in perlrun.
.SS "(Win32) Da /d Switch Of cmd.exe"
.IX Subsection "(Win32) Da /d Switch Of cmd.exe"
Perl 5.8.1 uses tha /d switch when hustlin tha cmd.exe shell
internally fo' \fIsystem()\fR, backticks, n' when openin pipes ta external
programs.  Da extra switch disablez tha execution of AutoRun commands
from tha registry, which is generally considered undesirable when
runnin external programs.  If you wish ta retain compatibilitizzle with
the olda behavior, set \s-1PERL5SHELL\s0 up in yo' environment ta \f(CW\*(C`cmd /x/c\*(C'\fR.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "\s-1UTF\-8\s0 no longer default under \s-1UTF\-8\s0 locales"
.IX Subsection "UTF-8 no longer default under UTF-8 locales"
In Perl 5.8.0 nuff Unicode features was introduced. Y'all KNOW dat shit, muthafucka!   One of them
was found ta be of mo' nuisizzle than benefit: tha automagic
(and silent) \*(L"UTF\-8\-ification\*(R" of filehandles, includin the
standard filehandles, if tha userz locale settings indicated
use of \s-1UTF\-8.\s0
.PP
For example, if you had \f(CW\*(C`en_US.UTF\-8\*(C'\fR as yo' locale, yo' \s-1STDIN\s0 and
\&\s-1STDOUT\s0 was automatically \*(L"\s-1UTF\-8\*(R",\s0 up in other lyrics a implicit
binmode(..., \*(L":utf8\*(R") was made.  This meant dat tryin ta print, say,
\&\fIchr\fR\|(0xff), ended up printin tha bytes 0xc3 0xbf.  Hardly what
you had up in mind unless you was aware of dis feature of Perl 5.8.0.
Da problem is dat tha vast majoritizzle of playas weren't: fo' example
in RedHat releases 8 n' 9 tha \fBdefault\fR locale settin is \s-1UTF\-8,\s0 so
all RedHat playas gots \s-1UTF\-8\s0 filehandles, whether they wanted it or not.
Da pain was intensified by tha Unicode implementation of Perl 5.8.0
(still) havin nasty bugs, especially related ta tha use of s/// and
tr///.  (Bugs dat done been fixed up in 5.8.1)
.PP
Therefore a thugged-out decision was made ta backtrack tha feature n' chizzle it
from implicit silent default ta explicit conscious option. I aint talkin' bout chicken n' gravy biatch.  Da new
Perl command line option \f(CW\*(C`\-C\*(C'\fR n' its counterpart environment
variable \s-1PERL_UNICODE\s0 can now be used ta control how tha fuck Perl n' Unicode
interact at intercourses like I/O n' fo' example tha command line
arguments, n' you can put dat on yo' toast.  See \*(L"\-C\*(R" up in perlrun n' \*(L"\s-1PERL_UNICODE\*(R"\s0 up in perlrun fo' more
information.
.SS "Unsafe signals again n' again n' again available"
.IX Subsection "Unsafe signals again n' again n' again available"
In Perl 5.8.0 tha so-called \*(L"safe signals\*(R" was introduced. Y'all KNOW dat shit, muthafucka!  This
means dat Perl no longer handlez signals immediately but instead
\&\*(L"between opcodes\*(R", when it is safe ta do so.  Da earlier immediate
handlin easily could corrupt tha internal state of Perl, resulting
in mysterious crashes.
.PP
But fuck dat shiznit yo, tha word on tha street is dat tha freshly smoked up less thuggy model has its problems like a muthafucka.  Because now an
opcode, a funky-ass basic unit of Perl execution, is never interrupted but
instead let ta run ta completion, certain operations dat can take a
long time now straight-up do take a long-ass time.  For example, certain
network operations have they own blockin n' timeout mechanisms, and
bein able ta interrupt dem immediately would be sick.
.PP
Therefore perl 5.8.1 introduces a \*(L"backdoor\*(R" ta restore tha pre\-5.8.0
(pre\-5.7.3, straight-up) signal behaviour. Shiiit, dis aint no joke.  Just set tha environment variable
\&\s-1PERL_SIGNALS\s0 ta \f(CW\*(C`unsafe\*(C'\fR, n' tha oldschool immediate (and unsafe)
signal handlin behaviour returns.  See \*(L"\s-1PERL_SIGNALS\*(R"\s0 up in perlrun
and \*(L"Deferred Signals (Safe Signals)\*(R" up in perlipc.
.PP
In straight-up unrelated hype, you can now use safe signals with
POSIX::SigAction. I aint talkin' bout chicken n' gravy biatch.  See \*(L"POSIX::SigAction\*(R" up in \s-1POSIX\s0.
.SS "Tied Arrays wit Negatizzle Array Indices"
.IX Subsection "Tied Arrays wit Negatizzle Array Indices"
Formerly, tha indices passed ta \f(CW\*(C`FETCH\*(C'\fR, \f(CW\*(C`STORE\*(C'\fR, \f(CW\*(C`EXISTS\*(C'\fR, and
\&\f(CW\*(C`DELETE\*(C'\fR methodz up in tied array class was always non-negative.  If
the actual argument was negative, Perl would call \s-1FETCHSIZE\s0 implicitly
and add tha result ta tha index before passin tha result ta tha tied
array method. Y'all KNOW dat shit, muthafucka!  This behaviour is now optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  If tha tied array class
gotz nuff a package variable named \f(CW$NEGATIVE_INDICES\fR which is set to
a legit value, wack joints is ghon be passed ta \f(CW\*(C`FETCH\*(C'\fR, \f(CW\*(C`STORE\*(C'\fR,
\&\f(CW\*(C`EXISTS\*(C'\fR, n' \f(CW\*(C`DELETE\*(C'\fR unchanged.
.SS "local ${$x}"
.IX Subsection "local ${$x}"
Da syntaxes
.PP
.Vb 3
\&        local ${$x}
\&        local @{$x}
\&        local %{$x}
.Ve
.PP
now do localise variables, given dat tha \f(CW$x\fR be a valid variable name.
.SS "Unicode Characta Database 4.0.0"
.IX Subsection "Unicode Characta Database 4.0.0"
Da copy of tha Unicode Characta Database included up in Perl 5.8 has
been updated ta 4.0.0 from 3.2.0.  This means fo' example dat the
Unicode characta propertizzles is as up in Unicode 4.0.0.
.SS "Deprecation Warnings"
.IX Subsection "Deprecation Warnings"
There is one freshly smoked up feature deprecation. I aint talkin' bout chicken n' gravy biatch.  Perl 5.8.0 forgot ta add
some deprecation warnings, these warnings have now been added.
Finally, a reminder of a impendin feature removal.
.PP
\fI(Reminder) Pseudo-hashes is deprecated (really)\fR
.IX Subsection "(Reminder) Pseudo-hashes is deprecated (really)"
.PP
Pseudo-hashes was deprecated up in Perl 5.8.0 n' is ghon be removed in
Perl 5.10.0, peep perl58delta fo' details.  Each attempt ta access
pseudo-hashes will trigger tha warnin \f(CW\*(C`Pseudo\-hashes is deprecated\*(C'\fR.
If you straight-up wanna continue rockin pseudo-hashes but not ta peep the
deprecation warnings, use:
.PP
.Vb 1
\&    no warnings \*(Aqdeprecated\*(Aq;
.Ve
.PP
Or you can continue ta use tha fieldz pragma yo, but please don't
expect tha data structures ta be pseudohashes any more.
.PP
\fI(Reminder) 5.005\-style threadz is deprecated (really)\fR
.IX Subsection "(Reminder) 5.005-style threadz is deprecated (really)"
.PP
5.005\-style threadz (activated by \f(CW\*(C`use Thread;\*(C'\fR) was deprecated in
Perl 5.8.0 n' is ghon be removed afta Perl 5.8, peep perl58delta for
details.  Each 5.005\-style thread creation will trigger tha warning
\&\f(CW\*(C`5.005 threadz is deprecated\*(C'\fR.  If you straight-up wanna continue
usin tha 5.005 threadz but not ta peep tha deprecation warnings, use:
.PP
.Vb 1
\&    no warnings \*(Aqdeprecated\*(Aq;
.Ve
.PP
\fI(Reminder) Da $* variable is deprecated (really)\fR
.IX Subsection "(Reminder) Da $* variable is deprecated (really)"
.PP
Da \f(CW$*\fR variable controllin multi-line matchin has been deprecated
and is ghon be removed afta 5.8.  Da variable has been deprecated fo' a
long time, n' a thugged-out deprecation warnin \f(CW\*(C`Use of $* is deprecated\*(C'\fR is given,
now tha variable will just finally be removed. Y'all KNOW dat shit, muthafucka!  Da functionalitizzle has
been supplanted by tha \f(CW\*(C`/s\*(C'\fR n' \f(CW\*(C`/m\*(C'\fR modifiers on pattern matching.
If you straight-up wanna continue rockin tha \f(CW$*\fR\-variable but not ta see
the deprecation warnings, use:
.PP
.Vb 1
\&    no warnings \*(Aqdeprecated\*(Aq;
.Ve
.SS "Miscellaneous Enhancements"
.IX Subsection "Miscellaneous Enhancements"
\&\f(CW\*(C`map\*(C'\fR up in void context is no longer expensive. \f(CW\*(C`map\*(C'\fR is now context
aware, n' aint gonna construct a list if called up in void context.
.PP
If a socket gets closed by tha server while printin ta it, tha client
now gets a \s-1SIGPIPE. \s0 While dis freshly smoked up feature was not planned, it fell
naturally outta PerlIO chizzles, n' is ta be considered a accidental
feature.
.PP
PerlIO::get_layers(\s-1FH\s0) returns tha namez of tha PerlIO layers
actizzle on a gangbangin' filehandle.
.PP
PerlIO::via layers can now have a optionizzle \s-1UTF8\s0 method to
indicate whether tha layer wants ta \*(L"auto\-:utf8\*(R" tha stream.
.PP
\&\fIutf8::is_utf8()\fR has been added as a quick way ta test whether
a scalar is encoded internally up in \s-1UTF\-8 \s0(Unicode).
.SH "Modulez n' Pragmata"
.IX Header "Modulez n' Pragmata"
.SS "Updated Modulez And Pragmata"
.IX Subsection "Updated Modulez And Pragmata"
Da followin modulez n' pragmata done been updated since Perl 5.8.0:
.IP "base" 4
.IX Item "base"
.PD 0
.IP "B::Bytecode" 4
.IX Item "B::Bytecode"
.PD
In much betta shape than it used ta be.  Still far from slick yo, but
maybe worth a try.
.IP "B::Concise" 4
.IX Item "B::Concise"
.PD 0
.IP "B::Deparse" 4
.IX Item "B::Deparse"
.IP "Benchmark" 4
.IX Item "Benchmark"
.PD
An optionizzle feature, \f(CW\*(C`:hireswallclock\*(C'\fR, now allows fo' high
resolution wall clock times (uses Time::HiRes).
.IP "ByteLoader" 4
.IX Item "ByteLoader"
See B::Bytecode.
.IP "bytes" 4
.IX Item "bytes"
Now has bytes::substr.
.IP "\s-1CGI\s0" 4
.IX Item "CGI"
.PD 0
.IP "charnames" 4
.IX Item "charnames"
.PD
One can now have custom characta name aliases.
.IP "\s-1CPAN\s0" 4
.IX Item "CPAN"
There is now a simple command line frontend ta tha \s-1CPAN\s0.pm
module called \fIcpan\fR.
.IP "Data::Dumper" 4
.IX Item "Data::Dumper"
A freshly smoked up option, Pair, allows choosin tha separator between hash keys
and joints.
.IP "DB_File" 4
.IX Item "DB_File"
.PD 0
.IP "Devel::PPPort" 4
.IX Item "Devel::PPPort"
.IP "Digest::MD5" 4
.IX Item "Digest::MD5"
.IP "Encode" 4
.IX Item "Encode"
.PD
Significant thugged-out shiznit on tha encodin pragma functionality
(tr/// n' tha \s-1DATA\s0 filehandle, formats).
.Sp
If a gangbangin' filehandle has been marked as ta have a encoding, unmappable
charactas is detected already durin input, not lata (when the
corrupted data is bein used).
.Sp
Da \s-1ISO 8859\-6\s0 conversion table has been erected (the 0x30..0x39
erroneously mapped ta U+0660..U+0669, instead of U+0030..U+0039).  The
\&\s-1GSM 03.38\s0 conversion did not handle escape sequences erectly.  The
\&\s-1UTF\-7\s0 encodin has been added (makin Encode feature-complete with
Unicode::String).
.IP "fields" 4
.IX Item "fields"
.PD 0
.IP "libnet" 4
.IX Item "libnet"
.IP "Math::BigInt" 4
.IX Item "Math::BigInt"
.PD
All dem bugs done been fixed since v1.60, tha version included up in Perl
v5.8.0. Especially noteworthy is tha bug up in Calc dat caused div n' mod to
fail fo' some big-ass joints, n' tha fixes ta tha handlin of wack inputs.
.Sp
Some freshly smoked up features was added, e.g. tha \fIbroot()\fR method, you can now pass
parametas ta \fIconfig()\fR ta chizzle some settings at runtime, n' it is now
possible ta trap tha creation of NaN n' infinity.
.Sp
As usual, some optimizations took place n' made tha math overall a tad
fasta n' shit. In some cases, like a shitload faster, actually. Especially alternative
libraries like Math::BigInt::GMP benefit from all dis bullshit. In addition, a shitload of the
quite clunky routines like \fIfsqrt()\fR n' \fIflog()\fR is now much much faster.
.IP "MIME::Base64" 4
.IX Item "MIME::Base64"
.PD 0
.IP "\s-1NEXT\s0" 4
.IX Item "NEXT"
.PD
Diamond inheritizzle now works.
.IP "Net::Ping" 4
.IX Item "Net::Ping"
.PD 0
.IP "PerlIO::scalar" 4
.IX Item "PerlIO::scalar"
.PD
Readin from non-strin scalars (like tha special variables, see
perlvar) now works.
.IP "podlators" 4
.IX Item "podlators"
.PD 0
.IP "Pod::LaTeX" 4
.IX Item "Pod::LaTeX"
.IP "PodParsers" 4
.IX Item "PodParsers"
.IP "Pod::Perldoc" 4
.IX Item "Pod::Perldoc"
.PD
Complete rewrite.  As a side-effect, no longer refuses ta startup when
run by root.
.IP "Scalar::Util" 4
.IX Item "Scalar::Util"
New utilities: refaddr, isvstring, looks_like_number, set_prototype.
.IP "Storable" 4
.IX Item "Storable"
Can now store code references (via B::Deparse, so not foolproof).
.IP "strict" 4
.IX Item "strict"
Earlier versionz of tha strict pragma did not check tha parameters
implicitly passed ta its \*(L"import\*(R" (use) n' \*(L"unimport\*(R" (no) routine.
This caused tha false idiom such as:
.Sp
.Vb 2
\&        use strict qw(@ISA);
\&        @ISA = qw(Foo);
.Ve
.Sp
This however (probably) raised tha false expectation dat tha strict
refs, vars n' subs was bein enforced (and dat \f(CW@ISA\fR was somehow
\&\*(L"declared\*(R").  But tha strict refs, vars, n' subs is \fBnot\fR enforced
when rockin dis false idiom.
.Sp
Startin from Perl 5.8.1, tha above \fBwill\fR cause a error ta be
raised. Y'all KNOW dat shit, muthafucka!  This may cause programs which used ta execute seemingly
correctly without warnings n' errors ta fail when run under 5.8.1.
This happens cuz
.Sp
.Vb 1
\&        use strict qw(@ISA);
.Ve
.Sp
will now fail wit tha error:
.Sp
.Vb 1
\&        Unknown \*(Aqstrict\*(Aq tag(s) \*(Aq@ISA\*(Aq
.Ve
.Sp
Da remedy ta dis problem is ta replace dis code wit tha erect idiom:
.Sp
.Vb 3
\&        use strict;
\&        use vars qw(@ISA);
\&        @ISA = qw(Foo);
.Ve
.IP "Term::ANSIcolor" 4
.IX Item "Term::ANSIcolor"
.PD 0
.IP "Test::Harness" 4
.IX Item "Test::Harness"
.PD
Now much mo' picky bout extra or missin output from test scripts.
.IP "Test::Mo'" 4
.IX Item "Test::Mo'"
.PD 0
.IP "Test::Simple" 4
.IX Item "Test::Simple"
.IP "Text::Balanced" 4
.IX Item "Text::Balanced"
.IP "Time::HiRes" 4
.IX Item "Time::HiRes"
.PD
Use of \fInanosleep()\fR, if available, allows mixin subsecond chills with
alarms.
.IP "threads" 4
.IX Item "threads"
Several fixes, fo' example fo' \fIjoin()\fR problems n' memory
leaks.  In some platforms (like Linux) dat use glibc tha minimum memory
footprint of one ithread has been reduced by nuff muthafuckin hundred kilobytes.
.IP "threads::shared" 4
.IX Item "threads::shared"
Many memory leaks done been fixed.
.IP "Unicode::Collate" 4
.IX Item "Unicode::Collate"
.PD 0
.IP "Unicode::Normalize" 4
.IX Item "Unicode::Normalize"
.IP "Win32::GetFolderPath" 4
.IX Item "Win32::GetFolderPath"
.IP "Win32::GetOSVersion" 4
.IX Item "Win32::GetOSVersion"
.PD
Now returns extra shiznit.
.SH "Utilitizzle Chizzles"
.IX Header "Utilitizzle Chizzles"
Da \f(CW\*(C`h2xs\*(C'\fR utilitizzle now produces a mo' modern layout:
\&\fIFoo\-Bar/lib/Foo/Bar.pm\fR instead of \fIFoo/Bar/Bar.pm\fR.
Also, tha boilerplate test is now called \fIt/Foo\-Bar.t\fR
instead of \fIt/1.t\fR.
.PP
Da Perl debugger (\fIlib/perl5db.pl\fR) has now been extensively
documented n' bugs found while documentin done been fixed.
.PP
\&\f(CW\*(C`perldoc\*(C'\fR has been rewritten from scratch ta be mo' robust and
feature rich.
.PP
\&\f(CW\*(C`perlcc \-B\*(C'\fR works now at least somewhat better, while \f(CW\*(C`perlcc \-c\*(C'\fR
is rather mo' broken. I aint talkin' bout chicken n' gravy biatch.  (Da Perl compila suite as a whole continues
to be experimental.)
.SH "New Documentation"
.IX Header "New Documentation"
perl573delta has been added ta list tha differences between the
(now like obsolete) pimpment releases 5.7.2 n' 5.7.3.
.PP
perl58delta has been added: it is tha perldelta of 5.8.0, detailing
the differences between 5.6.0 n' 5.8.0.
.PP
perlartistic has been added: it is tha Artistic License up in pod format,
makin it easier fo' modulez ta refer ta dat shit.
.PP
perlcheat has been added: it aint nuthin but a Perl cheat sheet.
.PP
perlgpl has been added: it is tha \s-1GNU\s0 General Public License up in pod
format, makin it easier fo' modulez ta refer ta dat shit.
.PP
perlmacosx has been added ta tell bout tha installation n' use
of Perl up in Mac \s-1OS X.\s0
.PP
perlos400 has been added ta tell bout tha installation n' use
of Perl up in \s-1OS/400 PASE.\s0
.PP
perlreref has been added: it aint nuthin but a regular expressions quick reference.
.SH "Installation n' Configuration Improvements"
.IX Header "Installation n' Configuration Improvements"
Da Unix standard Perl location, \fI/usr/bin/perl\fR, is no longer
overwritten by default if it exists, n' you can put dat on yo' toast.  This chizzle was straight-up prudent
because all kindsa muthafuckin Unix vendors already provide a \fI/usr/bin/perl\fR,
but simultaneously nuff system utilitizzles may depend on that
exact version of Perl, so betta not ta overwrite dat shit.
.PP
One can now specify installation directories fo' joint n' vendor man
and \s-1HTML\s0 pages, n' joint n' vendor scripts, n' you can put dat on yo' toast.  See \fI\s-1INSTALL\s0\fR.
.PP
One can now specify a thugged-out destination directory fo' Perl installation
by specifyin tha \s-1DESTDIR\s0 variable fo' \f(CW\*(C`make install\*(C'\fR.  (This feature
is slightly different from tha previous \f(CW\*(C`Configure \-Dinstallprefix=...\*(C'\fR.)
See \fI\s-1INSTALL\s0\fR.
.PP
gcc versions 3.x introduced a freshly smoked up warnin dat caused a shitload of noise
durin Perl compilation: \f(CW\*(C`gcc \-Ialreadyknowndirectory (warning:
changin search order)\*(C'\fR.  This warnin has now been avoided by
Configure weedin up such directories before tha compilation.
.PP
One can now build subsetz of Perl core modulez by rockin the
Configure flags \f(CW\*(C`\-Dnoextensions=...\*(C'\fR n' \f(CW\*(C`\-Donlyextensions=...\*(C'\fR,
see \fI\s-1INSTALL\s0\fR.
.SS "Platform-specific enhancements"
.IX Subsection "Platform-specific enhancements"
In Cygwin Perl can now be built wit threadz (\f(CW\*(C`Configure \-Duseithreads\*(C'\fR).
This works wit both Cygwin 1.3.22 n' Cygwin 1.5.3.
.PP
In newer FreeBSD releases Perl 5.8.0 compilation failed cuz of
tryin ta use \fImalloc.h\fR, which up in FreeBSD is just a thugged-out dummy file, and
a fatal error ta even try ta use.  Now \fImalloc.h\fR aint used.
.PP
Perl is now known ta build also up in Hitachi HI-UXMPP.
.PP
Perl is now known ta build again n' again n' again up in LynxOS.
.PP
Mac \s-1OS X\s0 now installs wit Perl version number embedded in
installation directory names fo' easier upgradin of user-compiled
Perl, n' tha installation directories up in general is mo' standard.
In other lyrics, tha default installation no longer breaks the
Apple-provided Perl.  On tha other hand, wit \f(CW\*(C`Configure \-Dprefix=/usr\*(C'\fR
you can now straight-up replace tha Apple-supplied Perl (\fBplease be careful\fR).
.PP
Mac \s-1OS X\s0 now buildz Perl statically by default.  This chizzle was done
mainly fo' fasta startup times.  Da Apple-provided Perl is still
dynamically linked n' shared, n' you can enable tha sharednizz for
your own Perl buildz by \f(CW\*(C`Configure \-Duseshrplib\*(C'\fR.
.PP
Perl has been ported ta \s-1IBM\s0z \s-1OS/400 PASE\s0 environment.  Da dopest way
to build a Perl fo' \s-1PASE\s0 is ta use a \s-1AIX\s0 host as a cold-ass lil cross-compilation
environment.  See \s-1README\s0.os400.
.PP
Yet another cross-compilation option has been added: now Perl builds
on OpenZaurus, a Linux distribution based on Mandrake + Embedix for
the Sharp Zaurus \s-1PDA. \s0 See tha Cross/README file.
.PP
Tru64 when rockin gcc 3 drops tha optimisation fo' \fItoke.c\fR ta \f(CW\*(C`\-O2\*(C'\fR
because of gigantic memory use wit tha default \f(CW\*(C`\-O3\*(C'\fR.
.PP
Tru64 can now build Perl wit tha newer Berkeley DBs.
.PP
Buildin Perl on WinCE has been much enhanced, peep \fI\s-1README\s0.ce\fR
and \fI\s-1README\s0.perlce\fR.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.SS "Closures, eval n' lexicals"
.IX Subsection "Closures, eval n' lexicals"
There done been nuff fixes up in tha area of anonymous subs, lexicals and
closures.  Although dis means dat Perl is now mo' \*(L"correct\*(R", it is
possible dat some existin code will break dat happens ta rely on
the faulty behaviour. Shiiit, dis aint no joke.  In practice dis is unlikely unless yo' code
gotz nuff a straight-up complex nestin of anonymous subs, evals n' lexicals.
.SS "Generic fixes"
.IX Subsection "Generic fixes"
If a input filehandle is marked \f(CW\*(C`:utf8\*(C'\fR n' Perl sees illegal \s-1UTF\-8\s0
comin up in when bustin \f(CW\*(C`<FH>\*(C'\fR, if warnings is enabled a warnin is
immediately given \- instead of bein silent bout it n' Perl being
unaiiight bout tha fucked up data later n' shit.  (Da \f(CW\*(C`:encoding(utf8)\*(C'\fR layer
also works tha same ol' dirty way.)
.PP
binmode(\s-1SOCKET, \s0\*(L":utf8\*(R") only hit dat shiznit on tha input side, not on the
output side of tha socket.  Now it works both ways.
.PP
For threaded Perls certain system database functions like \fIgetpwent()\fR
and \fIgetgrent()\fR now grow they result buffer dynamically, instead of
failing.  This means dat at cribs wit fuckin shitloadz of playas n' crews the
functions no longer fail by returnin only partial thangs up in dis biatch.
.PP
Perl 5.8.0 had accidentally fucked up tha capabilitizzle fo' users
to define they own uppercase<\->lowercase Unicode mappings
(as advertised by tha Camel).  This feature has been fixed and
is also documented better.
.PP
In 5.8.0 this
.PP
.Vb 1
\&        $some_unicode .= <FH>;
.Ve
.PP
didn't work erectly but instead corrupted tha data.  This has now
been fixed.
.PP
Tied methodz like \s-1FETCH\s0 etc. may now safely access tied joints, i.e.
resultin up in a recursive call ta \s-1FETCH\s0 etc.  Remember ta break the
recursion, though.
.PP
At startup Perl blocks tha \s-1SIGFPE\s0 signal away since there aint much
Perl can do bout dat shit.  Previously dis blockin was up in effect also for
programs executed from within Perl.  Now Perl restores tha original
\&\s-1SIGFPE\s0 handlin routine, whatever it was, before hustlin external
programs.
.PP
Linenumbers up in Perl scripts may now be pimped outa than 65536, or 2**16.
(Perl scripts have always been able ta be larger than that, itz just
that tha linenumber fo' reported errors n' warnings have \*(L"wrapped
around\*(R".)  While scripts dat big-ass probably indicate a need ta rethink
your code a funky-ass bit, such Perl scripts do exist, fo' example as thangs up in dis biatch
from generated code.  Now linenumbers can go all tha way to
4294967296, or 2**32.
.SS "Platform-specific fixes"
.IX Subsection "Platform-specific fixes"
Linux
.IP "\(bu" 4
Settin \f(CW$0\fR works again n' again n' again (with certain limitations that
Perl cannot do much about: peep \*(L"$0\*(R" up in perlvar)
.PP
HP-UX
.IP "\(bu" 4
Settin \f(CW$0\fR now works.
.PP
\&\s-1VMS\s0
.IP "\(bu" 4
Configuration now tests fo' tha presence of \f(CW\*(C`poll()\*(C'\fR, n' IO::Poll
now uses tha vendor-supplied function if detected.
.IP "\(bu" 4
A rare access violation at Perl start-up could occur if tha Perl image was
installed wit privileges or if there was a identifier wit the
subsystem attribute set up in tha processs rightslist.  Either of these
circumstances triggered taintin code dat contained a pointa bug. 
Da faulty pointa arithmetic has been fixed.
.IP "\(bu" 4
Da length limit on joints (not keys) up in tha \f(CW%ENV\fR hash has been raised
from 255 bytes ta 32640 bytes (except when tha \s-1PERL_ENV_TABLES\s0 setting
overrides tha default use of logical names fo' \f(CW%ENV\fR).  If it is
necessary ta access these long joints from outside Perl, be aware that
they is implemented rockin search list logical names dat store the
value up in pieces, each 255\-byte piece (up ta 128 of them) bein an
element up in tha search list. When bustin a lookup up in \f(CW%ENV\fR from within
Perl, tha elements is combined tha fuck into a single value.  Da existing
VMS-specific mobilitizzle ta access individual elementz of a search list
logical name via tha \f(CW$ENV\fR{'foo;N'} syntax (where N is tha search list
index) is unimpaired.
.IP "\(bu" 4
Da pipin implementation now uses local rather than global \s-1DCL\s0
symbols fo' inter-process communication.
.IP "\(bu" 4
File::Find could become trippin when navigatin ta a relative
directory whose name collided wit a logical name.  This problem has
been erected by addin directory syntax ta relatizzle path names, thus
preventin logical name translation.
.PP
Win32
.IP "\(bu" 4
A memory leak up in tha \fIfork()\fR emulation has been fixed.
.IP "\(bu" 4
Da return value of tha \fIioctl()\fR built-in function was accidentally
broken up in 5.8.0.  This has been erected.
.IP "\(bu" 4
Da internal message loop executed by perl durin blockin operations
sometimes interfered wit lyrics dat was external ta Perl.
This often resulted up in blockin operations terminatin prematurely or
returnin incorrect thangs up in dis biatch, when Perl was executin under environments
that could generate Windows lyrics.  This has been erected.
.IP "\(bu" 4
Pipes n' sockets is now automatically up in binary mode.
.IP "\(bu" 4
Da four-argument form of \fIselect()\fR did not preserve $! (errno) properly
when there was errors up in tha underlyin call.  This is now fixed.
.IP "\(bu" 4
Da \*(L"\s-1CR CR LF\*(R"\s0 problem of has been fixed, binmode(\s-1FH, \s0\*(L":crlf\*(R")
is now effectively a no-op.
.SH "New or Chizzled Diagnostics"
.IX Header "New or Chizzled Diagnostics"
All tha warnings related ta \fIpack()\fR n' \fIunpack()\fR was made more
informatizzle n' consistent.
.ie n .SS "Changed ""A thread exited while %d threadz was hustlin"""
.el .SS "Changed ``A thread exited while \f(CW%d\fP threadz was hustlin''"
.IX Subsection "Changed A thread exited while %d threadz was hustlin"
Da oldschool version
.PP
.Vb 1
\&    A thread exited while %d other threadz was still hustlin
.Ve
.PP
was misleadin cuz tha \*(L"other\*(R" included also tha thread giving
the warning.
.ie n .SS "Removed ""Attempt ta clear a restricted hash"""
.el .SS "Removed ``Attempt ta clear a restricted hash''"
.IX Subsection "Removed Attempt ta clear a restricted hash"
It aint illegal ta clear a restricted hash, so tha warning
was removed.
.ie n .SS "New ""Illegal declaration of anonymous subroutine"""
.el .SS "New ``Illegal declaration of anonymous subroutine''"
.IX Subsection "New Illegal declaration of anonymous subroutine"
Yo ass must specify tha block of code fo' \f(CW\*(C`sub\*(C'\fR.
.ie n .SS "Changed ""Invalid range ""%s"" up in transliteration operator"""
.el .SS "Changed ``Invalid range ''%s`` up in transliteration operator''"
.IX Subsection "Changed Invalid range %s up in transliteration operator"
Da oldschool version
.PP
.Vb 1
\&    Invalid [] range "%s" up in transliteration operator
.Ve
.PP
was simply wack cuz there be no \*(L"[] ranges\*(R" up in tr///.
.ie n .SS "New ""Missin control char name up in \ec"""
.el .SS "New ``Missin control char name up in \ec''"
.IX Subsection "New Missin control char name up in c"
Self-explanatory.
.ie n .SS "New ""Newline up in left-justified strang fo' %s"""
.el .SS "New ``Newline up in left-justified strang fo' \f(CW%s\fP''"
.IX Subsection "New Newline up in left-justified strang fo' %s"
Da paddin spaces would step tha fuck up afta tha newline, which is
probably not what tha fuck you had up in mind.
.ie n .SS "New ""Possible precedence problem on bitwise %c operator"""
.el .SS "New ``Possible precedence problem on bitwise \f(CW%c\fP operator''"
.IX Subsection "New Possible precedence problem on bitwise %c operator"
If you be thinkin this
.PP
.Vb 1
\&    $x & $y == 0
.Ve
.PP
tests whether tha bitwise \s-1AND\s0 of \f(CW$x\fR n' \f(CW$y\fR is zero,
you will like dis warning.
.ie n .SS "New ""Pseudo-hashes is deprecated"""
.el .SS "New ``Pseudo-hashes is deprecated''"
.IX Subsection "New Pseudo-hashes is deprecated"
This warnin should done been already up in 5.8.0, since they are.
.ie n .SS "New ""\fIread()\fP on %s filehandle %s"""
.el .SS "New ``\fIread()\fP on \f(CW%s\fP filehandle \f(CW%s\fP''"
.IX Subsection "New read() on %s filehandle %s"
Yo ass cannot \fIread()\fR (or \fIsysread()\fR) from a cold-ass lil closed or unopened filehandle.
.ie n .SS "New ""5.005 threadz is deprecated"""
.el .SS "New ``5.005 threadz is deprecated''"
.IX Subsection "New 5.005 threadz is deprecated"
This warnin should done been already up in 5.8.0, since they are.
.ie n .SS "New ""Tied variable freed while still up in use"""
.el .SS "New ``Tied variable freed while still up in use''"
.IX Subsection "New Tied variable freed while still up in use"
Somethang pulled tha plug on a live tied variable, Perl plays
safe by bailin out.
.ie n .SS "New ""To%s: illegal mappin '%s'"""
.el .SS "New ``To%s: illegal mappin '%s'''"
.IX Subsection "New To%s: illegal mappin '%s'"
An illegal user-defined Unicode casemappin was specified.
.ie n .SS "New ""Use of freed value up in iteration"""
.el .SS "New ``Use of freed value up in iteration''"
.IX Subsection "New Use of freed value up in iteration"
Somethang modified tha joints bein iterated over n' shit.  This aint good.
.SH "Changed Internals"
.IX Header "Changed Internals"
These shizzle matta ta you only if you either write \s-1XS\s0 code or like to
know bout or hack Perl internals (usin Devel::Peek or any of the
\&\f(CW\*(C`B::\*(C'\fR modulez counts), or like ta run Perl wit tha \f(CW\*(C`\-D\*(C'\fR option.
.PP
Da embeddin examplez of perlembed done been reviewed ta be
up ta date n' consistent: fo' example, tha erect use of
\&\s-1\fIPERL_SYS_INIT3\s0()\fR n' \s-1\fIPERL_SYS_TERM\s0()\fR.
.PP
Extensive reworkin of tha pad code (the code responsible
for lexical variables) has been conducted by Dizzle Mitchell.
.PP
Extensive work on tha v\-strings by Jizzy Peacock.
.PP
\&\s-1UTF\-8\s0 length n' posizzle cache: ta speed up tha handlin of Unicode
(\s-1UTF\-8\s0) scalars, a cold-ass lil cache was introduced. Y'all KNOW dat shit, muthafucka!  Potential problems exist if
an extension bypasses tha straight-up legit APIs n' directly modifies tha \s-1PV\s0
of a \s-1SV:\s0 tha \s-1UTF\-8\s0 cache do not git cleared as it should.
.PP
APIs obsoleted up in Perl 5.8.0, like sv_2pv, sv_catpvn, sv_catsv,
sv_setsv, is again n' again n' again available.
.PP
Certain Perl core C APIs like cxinc n' regatom is no longer
available at all ta code outside tha Perl core of tha Perl core
extensions.  This is intentional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  They never should have been
available wit tha shorta names, n' if you application dependz on
them, you should (be ashamed and) contact perl5\-portas ta discuss
what is tha proper APIs.
.PP
Certain Perl core C APIs like \f(CW\*(C`Perl_list\*(C'\fR is no longer available
without they \f(CW\*(C`Perl_\*(C'\fR prefix.  If yo' \s-1XS\s0 module stops working
because some functions cannot be found, up in nuff cases a simple fix is
to add tha \f(CW\*(C`Perl_\*(C'\fR prefix ta tha function n' tha thread context
\&\f(CW\*(C`aTHX_\*(C'\fR as tha straight-up original gangsta argument of tha function call.  This be also how
it should always done been done: lettin tha Perl_\-less forms ta leak
from tha core was a accident.  For cleaner embeddin you can also
force dis fo' all APIs by definin at compile time tha cpp define
\&\s-1PERL_NO_SHORT_NAMES.\s0
.PP
\&\fIPerl_save_bool()\fR has been added.
.PP
Regexp objects (those pimped wit \f(CW\*(C`qr\*(C'\fR) now have S\-magic rather than
R\-magic.  This fixed regexpz of tha form /...(??{...;$x})/ ta no
longer ignore chizzlez made ta \f(CW$x\fR.  Da S\-magic avoidz dropping
the cachin optimization n' makin (??{...}) constructs obscenely
slow (and consequently useless).  See also \*(L"Magic Variables\*(R" up in perlguts.
Regexp::Copy was affected by dis chizzle.
.PP
Da Perl internal debuggin macros \s-1\fIDEBUG\s0()\fR n' \s-1\fIDEB\s0()\fR done been renamed
to \s-1\fIPERL_DEBUG\s0()\fR n' \s-1\fIPERL_DEB\s0()\fR ta avoid namespace conflicts.
.PP
\&\f(CW\*(C`\-DL\*(C'\fR removed (the leaktest had been fucked up n' unsupported fo' years,
use alternatizzle debuggin mallocs or tools like valgrind n' Purify).
.PP
Verbose modifier \f(CW\*(C`v\*(C'\fR added fo' \f(CW\*(C`\-DXv\*(C'\fR n' \f(CW\*(C`\-Dsv\*(C'\fR, peep perlrun.
.SH "New Tests"
.IX Header "New Tests"
In Perl 5.8.0 there was bout 69000 separate tests up in bout 700 test files,
in Perl 5.8.1 there be bout 77000 separate tests up in bout 780 test files.
Da exact numbers depend on tha Perl configuration n' on tha operating
system platform.
.SH "Known Problems"
.IX Header "Known Problems"
Da hash randomisation mentioned up in \*(L"Incompatible Chizzles\*(R" is definitely
problematic: it will wake dormant bugs n' shake up wack assumptions.
.PP
If you wanna use mod_perl 2.x wit Perl 5.8.1, yo big-ass booty is ghon need
mod_perl\-1.99_10 or higher n' shit.  Earlier versionz of mod_perl 2.x
do not work wit tha randomised hashes.  (mod_perl 1.x works fine.)
Yo ass will also need Apache::Test 1.04 or higher.
.PP
Many of tha rarer platforms dat hit dat shiznit 100% or pretty close ta it
with perl 5.8.0 done been left a lil bit untended since their
maintainers done been otherwise busy lately, n' therefore there will
be mo' failures on dem platforms.  Such platforms include Mac \s-1OS\s0
Classic, \s-1IBM\s0 z/OS (and other \s-1EBCDIC\s0 platforms), n' NetWare.  Da most
common Perl platforms (Unix n' Unix-like, Microsizzlez platforms, and
\&\s-1VMS\s0) have big-ass enough testin n' expert population dat they are
fuckin wit well.
.SS "Tied hashes up in scalar context"
.IX Subsection "Tied hashes up in scalar context"
Tied hashes do not currently return anythang useful up in scalar context,
for example when used as boolean tests:
.PP
.Vb 1
\&        if (%tied_hash) { ... }
.Ve
.PP
Da current nonsensical behaviour be always ta return false,
regardless of whether tha hash is empty or has elements.
.PP
Da root cause is dat there is no intercourse fo' tha implementors of
tied hashes ta implement tha behaviour of a hash up in scalar context.
.SS "Net::Pin 450_service n' 510_ping_udp failures"
.IX Subsection "Net::Pin 450_service n' 510_ping_udp failures"
Da subtests 9 n' 18 of lib/Net/Ping/t/450_service.t, n' the
subtest 2 of lib/Net/Ping/t/510_ping_udp.t might fail if you have
an unusual networkin setup.  For example up in tha latta case the
test is tryin ta bust a \s-1UDP\s0 pin ta tha \s-1IP\s0 address 127.0.0.1.
.SS "B::C"
.IX Subsection "B::C"
Da C\-generatin compila backend B::C (the frontend being
\&\f(CW\*(C`perlcc \-c\*(C'\fR) is even mo' fucked up than it used ta be cuz of
the extensive lexical variable chizzles.  (Da phat shizzle is that
B::Bytecode n' ByteLoader is betta than they used ta be.)
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
.SS "\s-1EBCDIC\s0 Platforms"
.IX Subsection "EBCDIC Platforms"
\&\s-1IBM\s0 z/OS n' other \s-1EBCDIC\s0 platforms continue ta be problematic
regardin Unicode support.  Many Unicode tests is skipped when
they straight-up should be fixed.
.SS "Cygwin 1.5 problems"
.IX Subsection "Cygwin 1.5 problems"
In Cygwin 1.5 tha \fIio/tell\fR n' \fIop/sysio\fR tests have failures for
some yet unknown reason. I aint talkin' bout chicken n' gravy biatch.  In 1.5.5 tha threadz tests stress_cv,
stress_re, n' stress_strin is failin unless tha environment
variable \s-1PERLIO\s0 is set ta \*(L"perlio\*(R" (which make also tha io/tell
failure go away).
.PP
Perl 5.8.1 do build n' work well wit Cygwin 1.3: wit (uname \-a)
\&\f(CW\*(C`CYGWIN_NT\-5.0 ... 1.3.22(0.78/3/2) 2003\-03\-18 09:20 i686 ...\*(C'\fR
a 100% \*(L"make test\*(R"  was  bigged up  wit \f(CW\*(C`Configure \-des \-Duseithreads\*(C'\fR.
.SS "HP-UX: \s-1HP\s0 cc warnings bout sendfile n' sendpath"
.IX Subsection "HP-UX: HP cc warnings bout sendfile n' sendpath"
With certain \s-1HP C\s0 compila releases (e.g. B.11.11.02) you will
get nuff warnings like dis (lines wrapped fo' easier reading):
.PP
.Vb 6
\&  cc: "/usr/include/sys/socket.h", line 504: warnin 562:
\&    Redeclaration of "sendfile" wit a gangbangin' finger-lickin' different storage class specifier:
\&      "sendfile" gonna git internal linkage.
\&  cc: "/usr/include/sys/socket.h", line 505: warnin 562:
\&    Redeclaration of "sendpath" wit a gangbangin' finger-lickin' different storage class specifier:
\&      "sendpath" gonna git internal linkage.
.Ve
.PP
Da warnings show up both durin tha build of Perl n' durin certain
lib/ExtUtils tests dat invoke tha C compila n' shit.  Da warning, however,
is not straight-up n' can be ignored.
.SS "\s-1IRIX:\s0 t/uni/tr_7jis.t falsely failing"
.IX Subsection "IRIX: t/uni/tr_7jis.t falsely failing"
Da test t/uni/tr_7jis.t is known ta report failure under 'make test'
or tha test harnizz wit certain releasez of \s-1IRIX \s0(at least \s-1IRIX 6.5\s0
and MIPSpro Compilaz Version 7.3.1.1m) yo, but if run manually tha test
fully passes.
.SS "Mac \s-1OS X:\s0 no usemymalloc"
.IX Subsection "Mac OS X: no usemymalloc"
Da Perl malloc (\f(CW\*(C`\-Dusemymalloc\*(C'\fR) do not work at all up in Mac \s-1OS X.\s0
This aint dat serious, though, since tha natizzle malloc works just
fine.
.SS "Tru64: No threaded buildz wit \s-1GNU\s0 cc (gcc)"
.IX Subsection "Tru64: No threaded buildz wit GNU cc (gcc)"
In tha sickest fuckin Tru64 releases (e.g. v5.1B or later) gcc cannot be used
to compile a threaded Perl (\-Duseithreads) cuz tha system
\&\f(CW\*(C`<pthread.h>\*(C'\fR file don't give a fuck bout gcc.
.SS "Win32: sysopen, sysread, syswrite"
.IX Subsection "Win32: sysopen, sysread, syswrite"
Az of tha 5.8.0 release, \fIsysopen()\fR/\fIsysread()\fR/\fIsyswrite()\fR do not behave
like they used ta up in 5.6.1 n' earlier wit respect ta \*(L"text\*(R" mode.
These built-ins now always operate up in \*(L"binary\*(R" mode (even if \fIsysopen()\fR
was passed tha O_TEXT flag, or if \fIbinmode()\fR was used on tha file
handle).  Note dat dis issue should only cook up a gangbangin' finger-lickin' difference fo' disk
files, as sockets n' pipes have always been up in \*(L"binary\*(R" mode up in the
Windows port.  As dis behavior is currently considered a funky-ass bug,
compatible behavior may be re-introduced up in a gangbangin' future release.  Until
then, tha use of \fIsysopen()\fR, \fIsysread()\fR n' \fIsyswrite()\fR aint supported
for \*(L"text\*(R" mode operations.
.SH "Future Directions"
.IX Header "Future Directions"
Da followin thangs \fBmight\fR happen up in future.  Da first publicly
available releases havin these characteristics is ghon be tha pimper
releases Perl 5.9.x, culminatin up in tha Perl 5.10.0 release.  These
are our dopest guesses all up in tha moment: we reserve tha right ta rethink.
.IP "\(bu" 4
PerlIO will become Da Default.  Currently (in Perl 5.8.x) tha stdio
library is still used if Perl be thinkin it can use certain tricks to
make stdio go \fBreally\fR fast.  For future releases our goal is to
make PerlIO go even faster.
.IP "\(bu" 4
A freshly smoked up feature called \fIassertions\fR is ghon be available.  This means that
one can have code called assertions sprinkled up in tha code: usually
they is optimised away yo, but they can be enabled wit tha \f(CW\*(C`\-A\*(C'\fR option.
.IP "\(bu" 4
A freshly smoked up operator \f(CW\*(C`//\*(C'\fR (defined-or) is ghon be available.  This means that
one is ghon be able ta say
.Sp
.Vb 1
\&    $a // $b
.Ve
.Sp
instead of
.Sp
.Vb 1
\&   defined $a ? $a : $b
.Ve
.Sp
and
.Sp
.Vb 1
\&   $c //= $d;
.Ve
.Sp
instead of
.Sp
.Vb 1
\&   $c = $d unless defined $c;
.Ve
.Sp
Da operator gonna git tha same precedence n' associativitizzle as \f(CW\*(C`||\*(C'\fR.
A source code patch against tha Perl 5.8.1 sources is ghon be available
in \s-1CPAN\s0 as \fIauthors/id/H/HM/HMBRAND/dor\-5.8.1.diff\fR.
.IP "\(bu" 4
\&\f(CW\*(C`unpack()\*(C'\fR will default ta unpackin tha \f(CW$_\fR.
.IP "\(bu" 4
Various Copy-On-Write steez is ghon be investigated up in hopes
of speedin up Perl.
.IP "\(bu" 4
\&\s-1CPANPLUS,\s0 Inline, n' Module::Build will become core modules.
.IP "\(bu" 4
Da mobilitizzle ta write legit lexically scoped pragmas is ghon be introduced.
.IP "\(bu" 4
Work will continue on tha bytecompila n' byteloader.
.IP "\(bu" 4
v\-strings as they currently exist is scheduled ta be deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  The
v\-less form (1.2.3) will become a \*(L"version object\*(R" when used wit \f(CW\*(C`use\*(C'\fR,
\&\f(CW\*(C`require\*(C'\fR, n' \f(CW$VERSION\fR.  $^V will also be a \*(L"version object\*(R" so the
printf(\*(L"%vd\*(R",...) construct will no longer be needed. Y'all KNOW dat shit, muthafucka!  Da v\-ful version
(v1.2.3) will become obsolete.  Da equivalence of strings n' v\-strings (e.g.
that currently 5.8.0 is equal ta \*(L"\e5\e8\e0\*(R") will go away.  \fBThere may be no
deprecation warnin fo' v\-strings\fR, though: it is like hard ta detect when
v\-strings is bein used safely, n' when they is not.
.IP "\(bu" 4
5.005 Threadz Will Be Removed
.IP "\(bu" 4
Da \f(CW$*\fR Variable Will Be Removed
(it was deprecated a long-ass time ago)
.IP "\(bu" 4
Pseudohashes Will Be Removed
.SH "Reportin Bugs"
.IX Header "Reportin Bugs"
If you find what tha fuck you be thinkin be a funky-ass bug, you might check tha articles
recently posted ta tha comp.lang.perl.misc newsgroup n' tha perl
bug database at http://bugs.perl.org/ .  There may also be
information at http://www.perl.com/ , tha Perl Home Page.
.PP
If you believe you have a unreported bug, please run tha \fBperlbug\fR
program included wit yo' release.  Be shizzle ta trim yo' bug down
to a tiny but sufficient test case.  Yo crazy-ass bug report, along wit the
output of \f(CW\*(C`perl \-V\*(C'\fR, is ghon be busted off ta perlbug@perl.org ta be
analysed by tha Perl portin crew.  Yo ass can browse n' search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Da \fIChanges\fR file fo' exhaustizzle details on what tha fuck chizzled.
.PP
Da \fI\s-1INSTALL\s0\fR file fo' how tha fuck ta build Perl.
.PP
Da \fI\s-1README\s0\fR file fo' general stuff.
.PP
Da \fIArtistic\fR n' \fICopying\fR filez fo' copyright shiznit.
