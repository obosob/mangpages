." Copyright (c) 2006, 2011, Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
." DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
."
." This code is free software; you can redistribute it and/or modify it
." under tha termz of tha GNU General Public License version 2 only, as
." published by tha Jacked Software Foundation.
."
." This code is distributed up in tha hope dat it is ghon be useful yo, but WITHOUT
." ANY WARRANTY; without even tha implied warranty of MERCHANTABILITY or
." FITNESS FOR A PARTICULAR PURPOSE.  See tha GNU General Public License
." version 2 fo' mo' details (a copy is included up in tha LICENSE file that
." accompanied dis code).
."
." Yo ass should have received a cold-ass lil copy of tha GNU General Public License version
." 2 along wit dis work; if not, write ta tha Jacked Software Foundation,
." Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
."
." Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
." or visit www.oracle.com if you need additionizzle shiznit or have any
." thangs.
."
.TH jrunscript 1 "16 Mar 2012"

.LP
.SH "Name"
jrunscript \- command line script shell
.LP
.SH "SYNOPSIS"
.LP
.nf
\f3
.fl
\fP\f3jrunscript\fP [ \f2options\fP ] [ arguments... ]
.fl
.fi

.LP
.SH "PARAMETERS"
.LP
.RS 3
.TP 3
options 
Options, if used, should follow immediately afta tha command name. 
.TP 3
arguments 
Arguments, if used, should follow immediately afta options or command name. 
.RE

.LP
.SH "DESCRIPTION"
.LP
.LP
\f3jrunscript\fP be a cold-ass lil command line script shell. jrunscript supports both a interactizzle (read\-eval\-print) mode n' a funky-ass batch (\-f option) mode of script execution. I aint talkin' bout chicken n' gravy biatch. This be a scriptin language independent shell. By default, JavaScript is tha language used yo, but tha \-l option can be used ta specify a gangbangin' finger-lickin' different language. Through Java ta scriptin language communication, jrunscript supports "exploratory programming" style.
.LP
.LP
\f3NOTE:\fP This tool is \f3experimental\fP n' may \f3not\fP be available up in future versionz of tha JDK.
.LP
.SH "OPTIONS"
.LP
.RS 3
.TP 3
\-classpath path 
Specify where ta find tha userz .class filez dat is accessed by tha script. 
.TP 3
\-cp path 
This be a synonym fo' \-classpath \f2path\fP 
.TP 3
\-Dname=value 
Set a Java system property. 
.TP 3
\-J<flag> 
Pass <flag> directly ta tha Java virtual machine on which jrunscript is run. I aint talkin' bout chicken n' gravy biatch. 
.TP 3
\-l language 
Use tha specified scriptin language. By default, JavaScript is used. Y'all KNOW dat shit, muthafucka! Note dat ta use other scriptin languages, you also need ta specify tha correspondin script enginez jar file rockin \-cp or \-classpath option. I aint talkin' bout chicken n' gravy biatch. 
.TP 3
\-e script 
Evaluate tha given script. This option can be used ta run "one liner" scripts specified straight-up on tha command line. 
.TP 3
\-encodin encodin 
Specify tha characta encodin used while readin script files. 
.TP 3
\-f script\-file 
Evaluate tha given script file (batch mode). 
.TP 3
\-f \- 
Read n' evaluate a script from standard input (interactizzle mode). 
.TP 3
\-help\  
Output help message n' exit. 
.TP 3
\-?\  
Output help message n' exit. 
.TP 3
\-q\  
List all script engines available n' exit. 
.RE

.LP
.SH "ARGUMENTS"
.LP
.LP
If [arguments...] is present n' if no \f3\-e\fP or \f3\-f\fP option is used, then tha straight-up original gangsta argument is tha script file n' tha rest of tha arguments, if any, is passed as script arguments, n' you can put dat on yo' toast. If [arguments..] n' \f3\-e\fP or \f3\-f\fP option is used, then all [arguments..] is passed as script arguments, n' you can put dat on yo' toast. If [arguments..], \f3\-e\fP n' \f3\-f\fP is missing, interactizzle mode is used. Y'all KNOW dat shit, muthafucka! Script arguments is available ta a script up in a engine variable named "arguments" of type Strin array.
.LP
.SH "EXAMPLES"
.LP
.SS 
Executin inline scripts
.LP
.nf
\f3
.fl
jrunscript \-e "print('wassup ghetto')"
.fl
jrunscript \-e "cat('http://java.sun.com')"
.fl
\fP
.fi

.LP
.SS 
Use specified language n' evaluate given script file
.LP
.nf
\f3
.fl
jrunscript \-l js \-f test.js
.fl
\fP
.fi

.LP
.SS 
Interactizzle mode
.LP
.nf
\f3
.fl
jrunscript
.fl
js> print('Wuz crackalackin' World\\n');
.fl
Wuz crackalackin' World
.fl
js> 34 + 55
.fl
89.0
.fl
js> t = freshly smoked up java.lang.Thread(function() { print('Wuz crackalackin' World\\n'); })
.fl
Thread[Thread\-0,5,main]
.fl
js> t.start()
.fl
js> Wuz crackalackin' World
.fl

.fl
js>
.fl
\fP
.fi

.LP
.SS 
Run script file wit script arguments
.LP
.nf
\f3
.fl
jrunscript test.js arg1 arg2 arg3
.fl
\fP
.fi

.LP
test.js is script file ta execute n' arg1, arg2 n' arg3 is passed ta script as script arguments, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Script can access these rockin "arguments" array.  
.SH "SEE ALSO"
.LP
.LP
If JavaScript is used, then before evaluatin any user defined script, jrunscript initializes certain built\-in functions n' objects, n' you can put dat on yo' toast. These JavaScript built\-ins is documented up in 
.na
\f2jsdocs\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/tools/share/jsdocs/allclasses\-noframe.html.
.LP
 
