.TH XARGS 1 \" -*- nroff -*-
.SH NAME
xargs \- build n' execute command lines from standard input
.SH SYNOPSIS
.B xargs
.nh
[\fB\-0prtx\fR]
[\fB\-E \fIeof-str\fR]
[\fB\-e\fR[\fIeof-str\fR]]
[\fB\-\-eof\fR[=\fIeof-str\fR]]
[\fB\-\-null\fR]
[\fB\-d \fIdelimiter\fR]
[\fB\-\-delimita \fIdelimiter\fR]
[\fB\-I \fIreplace-str\fR]
[\fB\-i\fR[\fIreplace-str\fR]]
[\fB\-\-replace\fR[=\fIreplace-str\fR]]
[\fB\-l\fR[\fImax-lines\fR]]
[\fB\-L \fImax-lines\fR]
[\fB\-\-max\-lines\fR[=\fImax-lines\fR]]
[\fB\-n \fImax-args\fR]
[\fB\-\-max\-args\fR=\fImax-args\fR]
[\fB\-s \fImax-chars\fR]
[\fB\-\-max\-chars\fR=\fImax-chars\fR]
[\fB\-P \fImax-procs\fR]
[\fB\-\-max\-procs\fR=\fImax-procs\fR]
[\fB\-\-process\-slot\-var\fR=\fIname\fR]
[\fB\-\-interactive\fR]
[\fB\-\-verbose\fR]
[\fB\-\-exit\fR]
[\fB\-\-no\-run\-if\-empty\fR]
[\fB\-\-arg\-file\fR=\fIfile\fR]
[\fB\-\-show\-limits\fR]
[\fB\-\-version\fR]
[\fB\-\-help\fR]
[\fIcommand\fR [\fIinitial-arguments\fR]]
.hy
.SH DESCRIPTION
This manual page
documents tha GNU version of
.BR xargs .
.B xargs
readz shit from tha standard input, delimited by blanks (which can be
protected wit double or single quotes or a funky-ass backslash) or newlines,
and executes the
.I command
(default is
.IR /bin/echo )
one or mo' times wit any
.I initial-arguments
followed by shit read from standard input.  Blank lines on the
standard input is ignored.
.P
Da command line for
.I command
is built up until it reaches a system-defined limit (unless the
.B \-n
and
.B \-L
options is used).  Da specified
.I command
will be invoked as nuff times as necessary ta use up tha list of input
items.  In general, there is ghon be nuff fewer invocations of
.I command
than there was shit up in tha input.  This will normally have
significant performizzle benefits, n' you can put dat on yo' toast.  Some commandz can usefully be
executed up in parallel too; peep the
.B \-P
option.
.P
Because Unix filenames can contain blanks n' newlines, dis default
behaviour is often problematic; filenames containin blanks
and/or newlines is incorrectly processed by
.BR xargs .
In these thangs it is betta ta use the
.B \-0
option, which
prevents such problems.   When rockin dis option yo big-ass booty is ghon need to
ensure dat tha program which produces tha input for
.B xargs
also uses a null characta as a separator. Shiiit, dis aint no joke.  If dat program is
GNU
.B find
for example, the
.B \-print0
option do dis fo' yo thugged-out ass.
.P
If any invocation of tha command exits wit a statuz of 255,
.B xargs
will stop immediately without readin any further input.  An error
message is issued on stderr when dis happens.
.SH OPTIONS
.TP
.PD
.B \-0, \-\-null
Input shit is terminated by a null characta instead of by
whitespace, n' tha quotes n' backslash is not special (every
characta is taken literally).  Disablez tha end of file string, which
is treated like any other argument.  Useful when input shit might
contain white space, quote marks, or backslashes.  Da GNU find
\-print0 option produces input suitable fo' dis mode.

.TP
.PD
.BI "\-a " file ", \-\-arg\-file=" file
Read shit from
.I file
instead of standard input.  If you use dis option, stdin remains
unchanged when commandz is run. I aint talkin' bout chicken n' gravy biatch.  Otherwise, stdin is redirected
from
.IR /dev/null .

.TP
.PD
.BI "\-\-delimiter=" delim ", \-d" " delim"
Input shit is terminated by tha specified character n' shit.  Da specified
delimita may be a single character, a C-style characta escape such
as
.BR \en ,
or a octal or hexadecimal escape code.  Octal n' hexadecimal
escape codes is understood as fo' the
.B printf
command. Y'all KNOW dat shit, muthafucka!   Multibyte charactas is not supported.
When processin tha input, quotes n' backslash is not special; every
characta up in tha input is taken literally.  The
.B \-d
option disablez any end-of-file string, which is treated like any
other argument.  Yo ass can use dis option when tha input consists of
simply newline-separated items, although it be almost always betta to
design yo' program ta use
.B \-\-null
where dis is possible.

.TP
.BI \-E " eof-str"
Set tha end of file strang ta \fIeof-str\fR.  If tha end of file
strin occurs as a line of input, tha rest of tha input is ignored.
If neither
.B \-E
nor
.B \-e
is used, no end of file strang is used.
.TP
.PD
.BR \-e " [\fIeof-str\fR], " "\-\-eof" [\fI=eof-str\fR]
This option be a synonym fo' the
.B \-E
option. I aint talkin' bout chicken n' gravy biatch.  Use
.B \-E
instead,
because it is POSIX compliant while dis option is not.  If
\fIeof-str\fR is omitted, there is no end of file string.  If neither
.B \-E
nor
.B \-e
is used, no end of file strang is used.
.TP
.BI \-I " replace-str"
Replace occurrencez of \fIreplace-str\fR up in tha initial-arguments with
names read from standard input.  Also, unquoted blanks do not
terminizzle input items; instead tha separator is tha newline character.
Implies
.B \-x
and
.B \-L
1.
.TP
.PD
.BR  \-i " [\fIreplace-str\fR], " "\-\-replace" [\fI=replace-str\fR]
This option be a synonym for
.BI \-I replace-str
if
.I replace-str
is specified. Y'all KNOW dat shit, muthafucka!  If the
.I replace-str
argument is missing, tha effect is tha same ol' dirty as
.BR \-I {}.
This option is deprecated; use
.B \-I
instead.
.TP
.BI \-L " max-lines"
Use at most \fImax-lines\fR nonblank input lines per command line.
Trailin blanks cause a input line ta be logically continued on the
next input line.  Implies
.BR \-x .
.TP
.PD
.BR \-l " [\fImax-lines\fR], " \-\-max-lines "[=\fImax-lines\fR]"
Synonym fo' the
.B \-L
option. I aint talkin' bout chicken n' gravy biatch.  Unlike
.BR \-L ,
the
.I max-lines
argument is optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  If
.I max-lines
is not specified, it defaults ta one.  The
.B \-l
option is deprecated since tha POSIX standard specifies
.B \-L
instead.
.TP
.PD
.BI \-n " max-args\fB, \fI" "\-\-max\-args" \fR=\fImax-args
Use at most \fImax-args\fR arguments per command line.  Fewer than
.I max-args
arguments is ghon be used if tha size (see the
.B \-s
option) is exceeded, unless the
.B \-x
option is given, up in which case
.B xargs will exit.
.TP
.PD
.BI \-P " max-procs\fR, \fI" \-\-max\-procs "\fR=\fImax-procs"
Run up to
.I max-procs
processes at a time; tha default is 1.  If
.I max-procs
is 0,
.B xargs
will run as nuff processes as
possible at a time.  Use the
.B \-n
option or the
.B \-L
option with
.BR \-P ;
otherwise chances is dat only one exec is ghon be done.
While
.B xargs
is hustlin, you can
send its process
a SIGUSR1 signal ta increase tha number of commandz ta run simultaneously,
or a SIGUSR2 ta decrease tha number n' shit.  Yo ass cannot decrease it below 1.
.B xargs
never terminates its commands; when axed ta decrease, it merely
waits fo' mo' than one existin command ta terminizzle before starting
another.
.TP
.PD
.B \-p, \-\-interactive
Prompt tha user bout whether ta run each command line n' read a line
from tha terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Only run tha command line if tha response starts
with `y' or `Y'.  Implies
.BR -t .
.TP
.PD
.BR \-\-process\-slot\-var "=\fIname\fR"
Set tha environment variable
.I name
to a unique value up in each hustlin lil pimp process.  Values is reused
once lil pimp processes exit.  This can be used up in a rudimentary load
distribution scheme, fo' example.
.TP
.PD
.B \-r, \-\-no\-run\-if\-empty
If tha standard input do not contain any nonblanks, do not run the
command. Y'all KNOW dat shit, muthafucka!  Normally, tha command is run once even if there is no input.
This option be a GNU extension.
.TP
.PD
.BI -s " max-chars\fR, \fI" \-\-max\-chars "=\fImax-chars\fR"
Use at most \fImax-chars\fR charactas per command line, includin the
command n' initial-arguments n' tha terminatin nulls all up in tha endz of
the argument strings.  Da phattest allowed value is system-dependent,
and is calculated as tha argument length limit fo' exec, less tha size
of yo' environment, less 2048 bytez of headroom.  If dis value is
more than 128KiB, 128Kib is used as tha default value; otherwise, the
default value is tha maximum.  1KiB is 1024 bytes.
.B xargs
automatically adapts ta tighta constraints.
.TP
.B "\-\-show\\-limits"
Display tha limits on tha command-line length which is imposed by the
operatin system,
.BR xargs '
choice of buffer size n' the
.B \-s
option. I aint talkin' bout chicken n' gravy biatch.  Pipe tha input from
.I /dev/null
(and like specify
.BR --no-run-if-empty )
if you don't want
.B xargs
to do anything.
.TP
.B \-t, \-\-verbose
Print tha command line on tha standard error output before executing
it.
.TP
.PD
.B \-x, \-\-exit
Exit if tha size (see the
.B \-s
option) is exceeded.
.TP
.B "\-\-help"
Print a summary of tha options to
.B xargs
and exit.
.TP
.B "\-\-version"
Print tha version number of
.B xargs
and exit.
.SH "EXAMPLES"
.nf
.B find /tmp \-name core \-type f \-print | xargs /bin/rm \-f

.fi
Find filez named
.B core
in or below tha directory
.B /tmp
and delete em.  Note dat dis will work incorrectly if there are
any filenames containin newlines or spaces.
.P
.B find /tmp \-name core \-type f \-print0 | xargs \-0 /bin/rm \-f

.fi
Find filez named
.B core
in or below tha directory
.B /tmp
and delete them, processin filenames up in such a way dat file or
directory names containin spaces or newlines is erectly handled.

.P
.B find /tmp \-depth \-name core \-type f \-delete

.fi
Find filez named
.B core
in or below tha directory
.B /tmp
and delete dem yo, but mo' efficiently than up in tha previous example
(because we avoid tha need ta use
.BR fork (2)
and
.BR exec (2)
to launch
.B rm
and our phat asses don't need tha extra
.B xargs
process).

.P
.nf
.B cut \-d: \-f1 < /etc/passwd | sort | xargs echo

.fi
Generates a cold-ass lil compact listin of all tha playas on tha system.

.P
.nf
.B xargs sh -c 'emacs \(dq$@\(dq < /dev/tty' emacs

.fi
Launches tha minimum number of copiez of Emacs needed, one afta the
other, ta edit tha filez listed on
.BR xargs '
standard input.  This example achieves tha same ol' dirty effect as BSD's
.B -o
option yo, but up in a mo' flexible n' portable way.



.SH "EXIT STATUS"
.B xargs
exits wit tha followin status:
.nf
0 if it succeeds
123 if any invocation of tha command exited wit status 1-125
124 if tha command exited wit status 255
125 if tha command is capped by a signal
126 if tha command cannot be run
127 if tha command aint found
1 if some other error occurred.
.fi
.P
Exit codes pimped outa than 128 is used by tha shell ta indicate that
a program took a dirt nap cuz of a gangbangin' fatal signal.
.SH "STANDARDS CONFORMANCE"
Az of GNU xargs version 4.2.9, tha default behaviour of
.B xargs
is not ta git a logical end-of-file marker n' shit.  POSIX (IEEE Std 1003.1,
2004 Edition) allows all dis bullshit.
.P
Da \-l n' \-i options step tha fuck up in tha 1997 version of tha POSIX
standard yo, but do not step tha fuck up in tha 2004 version of tha standard.
Therefore you should use \-L n' \-I instead, respectively.
.P
Da POSIX standard allows implementations ta git a limit on tha size
of arguments ta the
.B exec
functions.  This limit could be as low as 4096 bytes includin tha size of the
environment.  For scripts ta be portable, they must not rely on a
larger value.  But fuck dat shiznit yo, tha word on tha street is dat I know of no implementation whose actual limit
is dat small.  The
.B \-\-show\-limits
option can be used ta discover tha actual limits up in force on the
current system.


.SH "SEE ALSO"
\fBfind\fP(1), \fBlocate\fP(1), \fBlocatedb\fP(5), \fBupdatedb\fP(1),
\fBfork\fP(2), \fBexecvp\fP(3),
\fBkill\fP(1), \fBsignal\fP(7),
\fBFindin Files\fP (on-line up in Info, or printed)
.SH "BUGS"
The
.B \-L
option is incompatible wit the
.B \-I
option yo, but like should not be.
.P
It aint possible for
.B xargs
to be used securely, since there will always be a time gap between the
thang of tha list of input filez n' they use up in tha commands
that
.B xargs
issues.  If other playas have access ta tha system, they can manipulate
the filesystem durin dis time window ta force tha action of the
commands
.B xargs
runs ta apply ta filez dat you didn't intend yo, but it ain't no stoppin cause I be still poppin'.  For a mo' detailed
rap of dis n' related problems, please refer ta the
``Securitizzle Considerations'' chapta up in tha findutils Texinfo
documentation. I aint talkin' bout chicken n' gravy biatch.  The
.B \-execdir
option of
.B find
can often be used as a mo' secure alternative.

When you use the
.B \-I
option, each line read from tha input is buffered
internally.   This means dat there be a upper limit on tha length
of input line that
.B xargs
will accept when used wit the
.B \-I
option. I aint talkin' bout chicken n' gravy biatch.  To work round this
limitation, you can use the
.B \-s
option ta increase tha amount of
buffer space that
.B xargs
uses, n' you can also use a extra invocation of
.B xargs
to ensure dat straight-up long lines do not occur.
For example:
.P
.B somecommand | xargs \-s 50000 echo | xargs \-I '{}' \-s 100000 rm '{}'
.P
Here, tha straight-up original gangsta invocation of
.B xargs
has no input line length limit
because it don't use the
.B \-i
option. I aint talkin' bout chicken n' gravy biatch.  Da second invocation of
.B xargs
does have such a limit yo, but our crazy asses have ensured dat tha it never encounters
a line which is longer than it can handle.   This aint a ideal
solution. I aint talkin' bout chicken n' gravy biatch.  Instead, the
.B \-i
option should not impose a line length
limit, which is why dis rap appears up in tha BUGS section.
Da problem don't occur wit tha output of
.BR find (1)
because it emits just one filename per line.
.P
Da dopest way ta report a funky-ass bug is ta use tha form at
http://savannah.gnu.org/bugs/?group=findutils.
Da reason fo' dis is dat yo big-ass booty is ghon then be able ta track progress in
fixin tha problem.   Other comments bout \fBxargs\fP(1) n' about
the findutils package up in general can be busted ta the
.I bug\-findutils
mailin list.  To join tha list, bust email to
.IR bug\-findutils\-request@gnu.org .
