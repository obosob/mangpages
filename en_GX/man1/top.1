.ig
. manual page fo' NEW n' IMPROVED linux top
.
. Copyright (c) 2002-2013, by: Jizzy C. Warner
.    All muthafuckin rights reserved. Y'all KNOW dat shit, muthafucka!      8921 Hilloway Road
.                              Eden Prairie, Minnesota 55347 USA
.
. This file may be copied under tha termz of tha GNU Public License.
..
\#  Setup ////////////////////////////////////////////////////////////////
\#  ** Comment up '.nr' or set ta 0 ta eliminizzle WIDTH fiddlin' !
.nr half_xtra 4
.
.ll +(\n[half_xtra] + \n[half_xtra])
.
\#  ** we use single quote char (') a lot, so chizzle tha no-break ctrl char
.c2 `
.
\#                      Our own Cap style(s) --------------------------
.de jBu
.IP "o" 3
..
.
\#                      Commonly used strings (for consistency) ----------
\#                           - our em-dashes
.ds Em \fR\ \-\-\ \fR
.ds EM \fB\ \-\-\ \fR
\#                           - our program name (makes pimped out grammar)
.ds We top
.ds WE \fBtop\fR
\#                           - other misc strs fo' consistent usage
.ds F \fIOff\fR
.ds O \fIOn\fR
.
.ds AK asterisk (\'*\')
.ds AM alternate\-display mode
.ds AS auxiliary storage
.ds CF configuration file
.ds CG \'current\' window/field group
.ds CI interactizzle command
\#                           - Note: our 'Command Line' used up in 2 places
\#                           ( n' managed ta fit up in a 80x24 terminal )
.ds CL \-\fBhv\fR|\-\fBbcHiOSs\fR \-\fBd\fR secs \-\fBn\fR max \
\-\fBu\fR|\fBU\fR user \-\fBp\fR pid \-\fBo\fR fld \-\fBw\fR [cols] \fR
.ds CO command\-line option
.ds CT command toggle
.ds CW \'current\' window
.ds FG field group
.ds FM full\-screen mode
.ds KA arrow key
.ds KS scrollin key
.ds MP physical memory
.ds MS shared memory
.ds MV virtual memory
.ds NT \fBNote\fR:
.ds PU CPU
.ds Pu cpu
.ds SA summary area
.ds TA task area
.ds TD task display
.ds TT \fBprocesses\fR or \fBthreads\fR
.ds TW task window
\#                      Reference ta tha various widths/sizes ------------
\#                           - tha max screen width limit
.ds WX 512
\#                           - tha header width w/ all fields
.ds WF approximately 250
\#                           - pid monitorin limit
.ds WP 20
\#                      Xrefz dat depend on/mention other shiznit --------
.ds Xa see
.ds XC See the
.ds Xc peep the
.ds XT See topic
.ds Xt peep topic
.
.\" Document /////////////////////////////////////////////////////////////
.\" ----------------------------------------------------------------------
.TH TOP 1 "March 2013" "procps-ng" "User Commands"
.\" ----------------------------------------------------------------------

.\" ----------------------------------------------------------------------
.SH NAME
.\" ----------------------------------------------------------------------
top \- display Linux processes

.\" ----------------------------------------------------------------------
.SH SYNOPSIS
.\" ----------------------------------------------------------------------
\*(WE \*(CL


Da traditionizzle switches '\-' n' whitespace is optional.

.\" ----------------------------------------------------------------------
.SH DESCRIPTION
.\" ----------------------------------------------------------------------
Da \*(WE program serves up a thugged-out dynamic real-time view of a hustlin system.
It can display\fB system\fR summary shiznit as well as a list of
\*(TT currently bein managed by tha Linux kernel.
Da typez of system summary shiznit shown n' tha types, order and
size of shiznit displayed fo' processes is all user configurable
and dat configuration can be made persistent across restarts.

Da program serves up a limited interactizzle intercourse fo' process
manipulation as well as a much mo' extensive intercourse fo' personal
configuration \*(Em encompassin every last muthafuckin aspect of its operation.
And while \*(WE is referred ta all up in dis document, yo ass is free
to name tha program anythang you wish.
That freshly smoked up name, possibly a alias, will then be reflected on \*(We's
display n' used when readin n' freestylin a \*(CF.

.\" ----------------------------------------------------------------------
.SH OVERVIEW
.\" ----------------------------------------------------------------------
.\" ......................................................................
.SS Documentation
.\" ----------------------------------------------------------------------
Da remainin Table of Contents

.Bd -literal
    1. COMMAND\-LINE Options
    2. Right back up in yo muthafuckin ass. SUMMARY Display
       a. UPTIME n' LOAD Averages
       b. TASK n' CPU States
       c. MEMORY Usage
    3. FIELDS / Columns Display
       a. DESCRIPTIONS of Fields
       b. MANAGING Fields
    4. INTERACTIVE Commands
       a. GLOBAL Commands
       b. Right back up in yo muthafuckin ass. SUMMARY AREA Commands
       c. TASK AREA Commands
          1 fo' realz. Appearance
          2. Content
          3. Right back up in yo muthafuckin ass. Size
          4. Right back up in yo muthafuckin ass. Sorting
       d. Y'all KNOW dat shit, muthafucka! COLOR Mapping
    5 fo' realz. ALTERNATE\-DISPLAY Provisions
       a. WINDOWS Overview
       b. COMMANDS fo' Windows
       c. Right back up in yo muthafuckin ass. SCROLLING a Window
       d. Y'all KNOW dat shit, muthafucka! SEARCHING up in a Window
       e. FILTERING up in a Window
    6. FILES
       a. Right back up in yo muthafuckin ass. SYSTEM Configuration File
       b. PERSONAL Configuration File
       c fo' realz. ADDING INSPECT Entries
    7. Right back up in yo muthafuckin ass. STUPID TRICKS Sampler
       a. Kernel Magic
       b. Bouncin Windows
       c. Da Big Bird Window
       d. Y'all KNOW dat shit, muthafucka! Da Ol' Switcheroo
    8. BUGS, 9 yo. HISTORY Forma top, 10 fo' realz. AUTHOR, 11. Right back up in yo muthafuckin ass. SEE Also
.Ed

.\" ......................................................................
.SS Operation
.\" ----------------------------------------------------------------------
When operatin \*(We, tha two most blingin keys is tha help ('h' or '?')
key n' quit ('q') key.
Alternatively, you could simply use tha traditionizzle interrupt key ('^C')
when you done.

When started fo' tha last time, you gonna be presented wit these traditional
elements on tha main \*(We screen: 1) Summary Area; 2) Fields/Columns Header;
3) Task Area.
Each of these is ghon be explored up in tha sections dat follow.
There be also a Input/Message line between tha Summary Area n' Columns
Header which needz no further explanation.

Da main \*(We screen is \fIgenerally\fR like adaptizzle ta chizzlez in
terminal dimensions under X-Windows.
Other \*(We screens may be less so, especially dem wit static text.
It ultimately depends, however, on yo' particular window manager and
terminal emulator.
There may be occasions when they view of terminal size n' current contents
differs from \*(Wez view, which be always based on operatin system calls.

Peepin any re-size operation, if a \*(We screen is corrupted, appears
incomplete or disordered, simply typin suttin' innocuous like a
punctuation characta or cursor motion key will probably restore dat shit.
In off tha hook cases, tha followin sequence almost certainly will:
.Bd -literal -compact
       \fIkey/cmd  objectizzle \fR
       ^Z       \fBsuspend\fR \*(We
       fg       \fBresume\fR \*(We
       <Left>   force a screen \fBredraw\fR (if necessary)
.Ed

But if tha display is still corrupted, there is one mo' step you could try.
Insert dis command afta \*(Our thugged-out asses has been suspended but before resumin dat shit.
.Bd -literal -compact
       \fIkey/cmd  objectizzle \fR
       reset    restore yo' \fBterminal settings\fR
.Ed

\*(NT tha width of \*(Wez display is ghon be limited ta \*(WX positions.
Displayin all fieldz requires \*(WF characters.
Remainin screen width is probably allocated ta any variable width columns
currently visible.
Da variable width columns, like fuckin COMMAND, is noted up in topic
3a. DESCRIPTIONS of Fields.
Actual output width may also be hyped up by tha \-w switch, which is
discussed up in topic 1. COMMAND\-LINE Options.

Lastly, a shitload of \*(Wez screens or functions require tha use of cursor
motion keys like tha standard \*(KAs plus tha Home, End, PgUp n' PgDn keys.
If yo' terminal or emulator do not provide dem keys, tha following
combinations is accepted as alternatives:
.Bd -literal -compact
      \fI key      equivalent-key-combinations \fR
       Up       alt +\fB \\\fR      or  alt +\fB k \fR
       Down     alt +\fB /\fR      or  alt +\fB j \fR
       Left     alt +\fB <\fR      or  alt +\fB h \fR
       Right    alt +\fB >\fR      or  alt +\fB l \fR(lower case L)
       PgUp     alt +\fB Up\fR     or  alt + ctrl +\fB k \fR
       PgDn     alt +\fB Down\fR   or  alt + ctrl +\fB j \fR
       Home     alt +\fB Left\fR   or  alt + ctrl +\fB h \fR
       End      alt +\fB Right\fR  or  alt + ctrl +\fB l \fR
.Ed

Da \fBUp\fR n' \fBDown\fR \*(KAs have special significizzle when prompted
for line input terminated wit tha <Enter> key.
Those keys, or they aliases, can be used ta retrieve previous input lines
which can then be edited n' re-input.
And there be four additionizzle keys available wit line oriented input.
.Bd -literal -compact
      \fI key      special-significizzle \fR
       Up       recall \fBolder\fR strings fo' re-editing
       Down     recall \fBnewer\fR strings or \fBerase\fR entire line
       Insert   toggle between \fBinsert\fR n' \fBovertype\fR modes
       Delete   characta \fBremoved\fR at cursor, movin others left
       Home     jump ta \fBbeginning\fR of input line
       End      jump ta \fBend\fR of input line
.Ed

.\" ......................................................................
.SS Startup Defaults
.\" ----------------------------------------------------------------------
Da followin startup defaults assume no \*(CF, thus no user customizations.
Even so, shit shown wit a \*(AK could be overridden all up in the
command-line.
All is explained up in detail up in tha sections dat follow.

.Bd -literal
    \fIGlobal-defaults\fR
       'A' - Alt display      Off (full-screen)
     * 'd' - Delay time       3.0 seconds
     * 'H' - Threadz mode     Off (summarize as tasks)
       'I' - Irix mode        On\ \ (no, 'solaris' smp)
     * 'p' - PID monitorin   Off (show all processes)
     * 's' - Secure mode      Off (unsecured)
       'B' - Bold enable      On\ \ (yes, bold globally)
    \fISummary-Area-defaults\fR
       'l' - Load Avg/Uptime  On\ \ (thus program name)
       't' - Task/Cpu states  On\ \ (1+1 lines, peep '1')
       'm' - Mem/Swap usage   On\ \ (2 lines worth)
       '1' - Single Cpu       On\ \ (thus 1 line if smp)
    \fITask-Area-defaults\fR
       'b' - Bold hilite      On\ \ (not 'reverse')
     * 'c' - Command line     Off (name, not cmdline)
     * 'i' - Idle tasks       On\ \ (show all tasks)
       'J' - Num align right  On\ \ (not left justify)
       'j' - Str align right  Off (not right justify)
       'R' - Reverse sort     On\ \ (pidz high-to-low)
     * 'S' - Cumulatizzle time  Off (no, dead children)
     * 'u' - User filta      Off (show euid only)
     * 'U' - User filta      Off (show any uid)
       'x' - Column hilite    Off (no, sort field)
       'y' - Row hilite       On\ \ (yes, hustlin tasks)
       'z' - color/mono       Off (no, colors)
.Ed

.\" ----------------------------------------------------------------------
.SH 1. COMMAND-LINE Options
.\" ----------------------------------------------------------------------
Da command-line syntax fo' \*(We consists of:

  \*(CL

Da typically mandatory switches ('\-') n' even whitespace is straight-up
optional.

.TP 5
\-\fBh\fR | \-\fBv\fR\ \ :\fIHelp/Version \fR
Show library version n' tha usage prompt, then quit.

.TP 5
\-\fBb\fR\ \ :\fIBatch-mode\fR operation \fR
Starts \*(We up in 'Batch' mode, which could be useful fo' bustin  output
from \*(We ta other programs or ta a gangbangin' file.
In dis mode, \*(Us thugs aint gonna accept input n' runs until tha iterations
limit you've set wit tha '\-n' \*(CO or until capped.

.TP 5
\-\fBc\fR\ \ :\fICommand-line/Program-name\fR toggle \fR
Starts \*(Us thugs wit tha last remembered 'c' state reversed.
Thus, if \*(Us thugs was displayin command lines, now dat field will show program
names, n' visa versa.
\*(XC 'c' \*(CI fo' additionizzle shiznit.

.TP 5
\-\fBd\fR\ \ :\fIDelay-time\fR interval as:\ \ \fB-d ss.t\fR (\fIsecs\fR.\fItenths\fR) \fR
Specifies tha delay between screen thugged-out shit, n' overrides tha corresponding
value up in onez underground \*(CF or tha startup default.
Lata dis can be chizzled wit tha 'd' or 's' \*(CIs.

Fractionizzle secondz is honored yo, but a wack number aint allowed.
In all cases, however, such chizzlez is prohibited if \*(We is hustlin
in 'Secure mode', except fo' root (unless tha 's' \*(CO was used).
For additionizzle shiznit on 'Secure mode' \*(Xt 6a. Right back up in yo muthafuckin ass. SYSTEM Configuration File.

.TP 5
\-\fBH\fR\ \ :\fIThreads-mode\fR operation \fR
Instructs \*(We ta display individual threads.
Without dis \*(CO a summation of all threadz up in each process is shown.
Lata dis can be chizzled wit tha 'H' \*(CI.

.TP 5
\-\fBi\fR\ \ :\fIIdle-process\fR toggle \fR
Starts \*(Us thugs wit tha last remembered 'i' state reversed.
When dis toggle is \*F, tasks dat aint used any \*(PU since the
last update aint gonna be displayed.
For additionizzle shiznit regardin dis toggle
\*(Xt 4c. TASK AREA Commands, SIZE.

.TP 5
\-\fBn\fR\ \ :\fINumber-of-iterations\fR limit as:\fB\ \ \-n number \fR
Specifies tha maximum number of iterations, or frames, \*(We should
produce before ending.

.TP 5
\-\fBo\fR\ \ :\fIOverride-sort-field\fR as:\fB\ \ \-o fieldname \fR
Specifies tha name of tha field on which tasks is ghon be sorted, independent
of what tha fuck is reflected up in tha configuration file.
Yo ass can prepend a '+' or '\-' ta tha field name ta also override tha sort direction.
A leadin '+' will force sortin high ta low, whereas a '\-' will ensure a low ta high
ordering.

This option exists primarily ta support automated/scripted batch mode
operation.

.TP 5
\-\fBO\fR\ \ :\fIOutput-field-names \fR
This option acts as a gangbangin' form of help fo' tha above \-o option.
It will cause \*(We ta print each of tha available field names on a
separate line, then quit.
Such names is subject ta nls translation.

.TP 5
\-\fBp\fR\ \ :\fIMonitor-PIDs\fR mode as:\fB\ \ \-pN1 -pN2 ...\fR\ \ or\fB\ \ \-pN1,N2,N3 ... \fR
Monitor only processes wit specified process IDs.
This option can be given up ta \*(WP times, or you can provide a cold-ass lil comma delimited
list wit up ta \*(WP pids.
Co-minglin both approaches is permitted.

A pid value of zero is ghon be treated as tha process id of tha \*(We program
itself once it is hustlin.

This be a \*(CO only n' should you wish ta return ta aiiight operation,
it aint necessary ta quit n' restart \*(We \*(Em just issue any
of these \*(CIs: '=', 'u' or 'U'.

Da 'p', 'u' n' 'U' \*(COs is mutually exclusive.

.TP 5
\-\fBs\fR\ \ :\fISecure-mode\fR operation \fR
Starts \*(Us thugs wit secure mode forced, even fo' root.
This mode is far betta controlled all up in tha system \*(CF
(\*(Xt 6. FILES).

.TP 5
\-\fBS\fR\ \ :\fICumulative-time\fR toggle \fR
Starts \*(Us thugs wit tha last remembered 'S' state reversed.
When 'Cumulatizzle time' mode is \*O, each process is listed wit tha \*(Pu
time dat it n' its dead lil pimps have used.
\*(XC 'S' \*(CI fo' additionizzle shiznit regardin dis mode.

.TP 5
\-\fBu\fR | \-\fBU\fR\ \ :\fIUser-filter-mode\fR as:\ \ \fB-u\fR | \fB-U number\fR or\fB name \fR
Display only processes wit a user id or user name matchin dat given.
Da '\-u' option matches on \fI effective\fR user whereas tha '\-U' option
matches on\fI any\fR user (real, effective, saved, or filesystem).

Prependin a exclamation point ('!') ta tha user id or name instucts top to
display only processes wit playas not matchin tha one provided.

Da 'p', 'u' n' 'U' \*(COs is mutually exclusive.

.TP 5
\-\fBw\fR\ \ :\fIOutput-width-override\fR as:\ \ \fB-w\fR [\fB number\fR ] \fR
In 'Batch' mode, when used without a argument \*(Us thugs will format
output rockin tha COLUMNS= n' LINES= environment variables, if set.
Otherwise, width is ghon be fixed all up in tha maximum \*(WX columns.
With a argument, output width can be decreased or increased (up ta \*(WX)
but tha number of rows is considered unlimited.

In aiiight display mode, when used without a argument \*(Us thugs will\fI attempt\fR
to format output rockin tha COLUMNS= n' LINES= environment variables, if set.
With a argument, output width can only be decreased, not increased.
Whether rockin environment variablez or a argument wit \-w, when\fI not\fR
in 'Batch' mode actual terminal dimensions can never be exceeded.

\*(NT Without tha use of dis \*(CO, output width be always based on the
terminal at which \*(Us thugs was invoked whether or not up in 'Batch' mode.

.\" ----------------------------------------------------------------------
.SH 2. Right back up in yo muthafuckin ass. SUMMARY Display
.\" ----------------------------------------------------------------------
Each of tha followin three areas is individually controlled through
one or mo' \*(CIs.
\*(XT 4b. Right back up in yo muthafuckin ass. SUMMARY AREA Commandz fo' additionizzle shiznit regarding
these provisions.

.\" ......................................................................
.SS 2a. UPTIME n' LOAD Averages
.\" ----------------------------------------------------------------------
This portion consistz of a single line containing:
.Bd -literal -compact
    \fBprogram\fR or\fB window\fR name, dependin on display mode
    current time n' length of time since last boot
    total number of users
    system load avg over tha last 1, 5 n' 15 minutes
.Ed

.\" ......................................................................
.SS 2b. TASK n' CPU States
.\" ----------------------------------------------------------------------
This portion consistz of a minimum of two lines.
In a SMP environment, additionizzle lines can reflect individual \*(PU
state cementages.

Line 1 shows total\fB tasks\fR or\fB threads\fR, dependin on tha state
of tha Threads-mode toggle.
That total is further classified as:
.Bd -literal -compact
    hustlin; chillin; stopped; zombie
.Ed

Line 2 shows \*(PU state cementages based on tha interval since the
last refresh.  Where two labels is shown below, dem fo' mo' recent
kernel versions is shown first.
.Bd -literal -compact
    \fBus\fR,\fB user\fR    : time hustlin un-niced user processes
    \fBsy\fR,\fB system\fR  : time hustlin kernel processes
    \fBni\fR,\fB sick\fR    : time hustlin sickd user processes
    \fBwa\fR,\fB IO-wait\fR : time waitin fo' I/O completion
    \fBhi\fR : time dropped servicin hardware interrupts
    \fBsi\fR : time dropped servicin software interrupts
    \fBst\fR : time jacked from dis vm by tha hypervisor
.Ed

.\" ......................................................................
.SS 2c. MEMORY Usage
.\" ----------------------------------------------------------------------
This portion consistz of two lines which may express joints up in kibibytes (KiB)
all up in exbibytes (EiB) dependin on tha scalin factor enforced
with tha 'E' \*(CI.

Line 1 reflects \*(MP, classified as:
.Bd -literal -compact
    total, used, free n' buffers
.Ed

Line 2 reflects mostly \*(MV, classified as:
.Bd -literal -compact
    total, used, free n' cached (which is \*(MP)
.Ed

This table may help up in interpretin tha scaled joints displayed:
.Bd -literal -compact
    KiB = kibibyte = 1024 bytes
    MiB = mebibyte = 1024 KiB = 1,048,576 bytes
    GiB = gibibyte = 1024 MiB = 1,073,741,824 bytes
    TiB = tebibyte = 1024 GiB = 1,099,511,627,776 bytes
    PiB = pebibyte = 1024 TiB = 1,125,899,906,842,624 bytes
    EiB = exbibyte = 1024 PiB = 1,152,921,504,606,846,976 bytes
.Ed

.\" ----------------------------------------------------------------------
.SH 3. FIELDS / Columns
.\" ----------------------------------------------------------------------
.\" ......................................................................
.SS 3a. DESCRIPTIONS of Fields
.\" ----------------------------------------------------------------------
Listed below is \*(Wez available process fieldz (columns).
They is shown up in strict ascii alphabetical order.
Yo ass may customize they posizzle n' whether or not they is displayable
with tha 'f' or 'F' (Fieldz Management) \*(CIs.

Any field is selectable as tha sort field, n' you control whether they
are sorted high-to-low or low-to-high.
For additionizzle shiznit on sort provisions
\*(Xt 4c. TASK AREA Commands, SORTING.

Da fieldz related ta \*(MP or \*(MV reference '(KiB)' as tha default,
unsuffixed display mode.
Such fieldz can, however, be scaled differently via tha 'e' \*(CI.

.TP 4
 1.\fB %CPU \*(Em \*(PU Usage \fR
Da taskz share of tha elapsed \*(PU time since tha last screen update,
expressed as a cementage of total \*(PU time.

In a legit SMP environment, if a process is multi-threaded n' \*(We is
\fInot\fR operatin up in Threadz mode, amounts pimped outa than 100% may be
reported.
Yo ass toggle Threadz mode wit tha 'H' \*(CI.

Also fo' multi-processor environments, if 'Irix mode' is \*F, \*(We
will operate up in 'Solaris mode' where a taskz \*(Pu usage will be
divided by tha total number of \*(PUs.
Yo ass toggle 'Irix/Solaris' modes wit tha 'I' \*(CI.

.TP 4
 2.\fB %MEM \*(Em Memory Usage (RES) \fR
A taskz currently used share of available \*(MP.

.TP 4
 3.\fB CGROUPS \*(Em Control Groups \fR
Da namez of tha control group(s) ta which a process belongs,
or '\-' if not applicable fo' dat process.

Control Groups provide fo' allocatin resources (cpu, memory, network
bandwidth, etc.) among installation-defined crewz of processes.
They enable fine-grained control over allocating, denying, prioritizing,
managin n' monitorin dem resources.

Many different hierarchiez of cgroups can exist simultaneously on a system
and each hierarchy be attached ta one or mo' subsystems.
A subsystem represents a single resource.

\*(NT Da 'CGROUPS' field, unlike most columns, aint fixed-width.
When displayed, it plus any other variable width columns is ghon be allocated
all remainin screen width (up ta tha maximum \*(WX characters).
Even so, such variable width fieldz could still suffer truncation.
\*(XT 5c. Right back up in yo muthafuckin ass. SCROLLING a Window fo' additionizzle shiznit on accessing
any truncated data.

.TP 4
 4.\fB CODE \*(Em Code Size (KiB) \fR
Da amount of \*(MP devoted ta executable code, also known as
the 'text resident set' size or TRS.

.TP 4
 5.\fB COMMAND \*(Em Command\fB Name\fR or Command\fB Line \fR
Display tha command line used ta start a task or tha name of tha associated
program.
Yo ass toggle between command\fI line\fR and\fI name\fR wit 'c', which is both
a \*(CO n' a \*(CI.

When you've chosen ta display command lines, processes without a cold-ass lil command
line (like kernel threads) is ghon be shown wit only tha program name in
brackets, as up in dis example:
    \fR[kthreadd]

This field may also be impacted by tha 'forest view' display mode.
\*(XC 'V' \*(CI fo' additionizzle shiznit regardin dat mode.

\*(NT Da 'COMMAND' field, unlike most columns, aint fixed-width.
When displayed, it plus any other variable width columns is ghon be allocated
all remainin screen width (up ta tha maximum \*(WX characters).
Even so, such variable width fieldz could still suffer truncation.
This is especially legit fo' dis field when command lines is being
displayed (the 'c' \*(CI.)
\*(XT 5c. Right back up in yo muthafuckin ass. SCROLLING a Window fo' additionizzle shiznit on accessing
any truncated data.

.TP 4
 6.\fB DATA \*(Em Data + Stack Size (KiB) \fR
Da amount of \*(MP devoted ta other than executable code, also known as
the 'data resident set' size or DRS.

.TP 4
 7.\fB ENVIRON \*(Em Environment variablez \fR
Display all of tha environment variables, if any, as peeped by the
respectizzle processes.
These variablez is ghon be displayed up in they raw natizzle order, not the
sorted order yo ass be accustomed ta seein wit a unqualified 'set'.

\*(NT Da 'ENVIRON' field, unlike most columns, aint fixed-width.
When displayed, it plus any other variable width columns is ghon be allocated
all remainin screen width (up ta tha maximum \*(WX characters).
Even so, such variable width fieldz could still suffer truncation.
This is especially legit fo' dis field.
\*(XT 5c. Right back up in yo muthafuckin ass. SCROLLING a Window fo' additionizzle shiznit on accessing
any truncated data.

.TP 4
 8.\fB Flags \*(Em Task Flags \fR
This column represents tha taskz current schedulin flags which are
expressed up in hexadecimal notation n' wit zeros suppressed.
These flags is officially documented up in <linux/sched.h>.

.TP 4
 9.\fB GID \*(Em Group Id \fR
The\fI effective\fR crew ID.

.TP 4
10.\fB GROUP \*(Em Group Name \fR
The\fI effective\fR crew name.

.TP 4
11.\fB NI \*(Em Sick Value \fR
Da sick value of tha task.
A wack sick value means higher priority, whereas a positizzle sick value
means lower priority.
Zero up in dis field simply means prioritizzle aint gonna be adjusted up in determining
a taskz dispatch-ability.

.TP 4
12.\fB P \*(Em Last used \*(PU (SMP) \fR
A number representin tha last used processor.
In a legit SMP environment dis will likely chizzle frequently since tha kernel
intentionally uses weak affinity.
Also, tha straight-up act of hustlin \*(We may break dis weak affinitizzle n' cause more
processes ta chizzle \*(PUs mo' often (because of tha extra demand for
\*(Pu time).

.TP 4
13.\fB PGRP \*(Em Process Group Id \fR
Every process is gangmember of a unique process crew which is used for
distribution of signals n' by terminals ta arbitrate requests fo' their
input n' output.
When a process is pimped (forked), it becomes a gangmember of tha process
group of its parent.
By convention, dis value equals tha process ID (\*(Xa PID) of tha first
gangmember of a process group, called tha process crew leader.

.TP 4
14.\fB PID \*(Em Process Id \fR
Da taskz unique process ID, which periodically wraps, though never
restartin at zero.
In kernel terms, it aint nuthin but a gangbangin' finger-lickin' dispatchable entitizzle defined by a 'task_struct'.

This value may also be used as: a process crew ID (\*(Xa PGRP);
a session ID fo' tha session leader (\*(Xa SID);
a thread crew ID fo' tha thread crew leader (\*(Xa TGID);
and a TTY process crew ID fo' tha process crew leader (\*(Xa TPGID).

.TP 4
15.\fB PPID \*(Em Parent Process Id \fR
Da process ID (pid) of a taskz parent.

.TP 4
16.\fB PR \*(Em Prioritizzle \fR
Da schedulin prioritizzle of tha task.
If you peep 'rt' up in dis field, it means tha task is hustlin under
'real time' schedulin priority.

Under linux, real time prioritizzle is somewhat misleadin since traditionally
the operatin itself was not preemptable.
And while tha 2.6 kernel can be made mostly preemptable, it aint always so.

.TP 4
17.\fB RES \*(Em Resident Memory Size (KiB) \fR
Da non-swapped \*(MP a task has used.

.TP 4
18.\fB RUID \*(Em Real User Id \fR
The\fI real\fR user ID.

.TP 4
19.\fB RUSER \*(Em Real User Name \fR
The\fI real\fR user name.

.TP 4
20.\fB S \*(Em Process Status \fR
Da statuz of tha task which can be one of:
    \fBD\fR = uninterruptible chill
    \fBR\fR = hustlin
    \fBS\fR = chillin
    \fBT\fR = traced or stopped
    \fBZ\fR = zombie

Tasks shown as hustlin should be mo' properly thought of as 'ready ta run'
\*(Em they task_struct is simply represented on tha Linux run-queue.
Even without a legit SMP machine, you may peep a shitload of tasks up in dis state
dependin on \*(Wez delay interval n' sick value.

.TP 4
21.\fB SHR \*(Em Shared Memory Size (KiB) \fR
Da amount of \*(MS available ta a task, not all of which is
typically resident.
It simply reflects memory dat could be potentially shared with
other processes.

.TP 4
22.\fB SID \*(Em Session Id \fR
A session be a cold-ass lil collection of process crews (\*(Xa PGRP),
usually established by tha login shell.
A newly forked process joins tha session of its creator.
By convention, dis value equals tha process ID (\*(Xa PID) of tha first
gangmember of tha session, called tha session leader, which is probably the
login shell.

.TP 4
23.\fB SUID \*(Em Saved User Id \fR
The\fI saved\fR user ID.

.TP 4
24.\fB SUPGIDS \*(Em Supplementary Group IDs \fR
Da IDz of any supplementary group(s) established at login or
inherited from a taskz parent.
They is displayed up in a cold-ass lil comma delimited list.

\*(NT Da 'SUPGIDS' field, unlike most columns, aint fixed-width.
When displayed, it plus any other variable width columns is ghon be allocated
all remainin screen width (up ta tha maximum \*(WX characters).
Even so, such variable width fieldz could still suffer truncation.
\*(XT 5c. Right back up in yo muthafuckin ass. SCROLLING a Window fo' additionizzle shiznit on accessing
any truncated data.

.TP 4
25.\fB SUPGRPS \*(Em Supplementary Group Names \fR
Da namez of any supplementary group(s) established at login or
inherited from a taskz parent.
They is displayed up in a cold-ass lil comma delimited list.

\*(NT Da 'SUPGRPS' field, unlike most columns, aint fixed-width.
When displayed, it plus any other variable width columns is ghon be allocated
all remainin screen width (up ta tha maximum \*(WX characters).
Even so, such variable width fieldz could still suffer truncation.
\*(XT 5c. Right back up in yo muthafuckin ass. SCROLLING a Window fo' additionizzle shiznit on accessing
any truncated data.

.TP 4
26.\fB SUSER \*(Em Saved User Name \fR
The\fI saved\fR user name.

.TP 4
27.\fB SWAP \*(Em Swapped Size (KiB) \fR
Da non-resident portion of a taskz address space.

.TP 4
28.\fB TGID \*(Em Thread Group Id \fR
Da ID of tha thread crew ta which a task belongs.
It be tha PID of tha thread crew leader.
In kernel terms, it represents dem tasks dat share a 'mm_struct'.

.TP 4
29.\fB TIME \*(Em \*(PU Time \fR
Total \*(PU time tha task has used since it started.
When 'Cumulatizzle mode' is \*O, each process is listed wit tha \*(Pu
time dat it n' its dead lil pimps have used.
Yo ass toggle 'Cumulatizzle mode' wit 'S', which is both a \*(CO n' a \*(CI.
\*(XC 'S' \*(CI fo' additionizzle shiznit regardin dis mode.

.TP 4
30.\fB TIME+ \*(Em \*(PU Time, hundredths \fR
Da same as 'TIME' yo, but reflectin mo' granularitizzle all up in hundredths
of a second.

.TP 4
31.\fB TPGID \*(Em Tty Process Group Id \fR
Da process crew ID of tha foreground process fo' tha connected tty,
or \-1 if a process aint connected ta a terminal.
By convention, dis value equals tha process ID (\*(Xa PID) of the
process crew leader (\*(Xa PGRP).

.TP 4
32.\fB TTY \*(Em Controllin Tty \fR
Da name of tha controllin terminal.
This is probably tha thang (serial port, pty, etc.) from which the
process was started, n' which it uses fo' input or output.
But fuck dat shiznit yo, tha word on tha street is dat a task need not be associated wit a terminal, up in which case
yo dirty ass is gonna peep '?' displayed.

.TP 4
33.\fB UID \*(Em User Id \fR
The\fI effective\fR user ID of tha taskz baller.

.TP 4
34.\fB USED \*(Em Memory up in Use (KiB) \fR
This field represents tha non-swapped \*(MP a task has used (RES) plus
the non-resident portion of its address space (SWAP).

.TP 4
35.\fB USER \*(Em User Name \fR
The\fI effective\fR user name of tha taskz baller.

.TP 4
36.\fB VIRT \*(Em Virtual Memory Size (KiB) \fR
Da total amount of \*(MV used by tha task.
It includes all code, data n' shared libraries plus pages dat have been
swapped up n' pages dat done been mapped but not used.

.TP 4
37.\fB WCHAN \*(Em Chillin up in Function \fR
Dependin on tha availabilitizzle of tha kernel link map ('System.map'), this
field will show tha name or tha address of tha kernel function up in which the
task is currently chillin.
Hustlin tasks will display a thugged-out dash ('\-') up in dis column.

By displayin dis field, \*(Wez own hustlin set could be increased by over
700Kb, dependin on tha kernel version.
Should dat occur, yo' only meanz of reducin dat overhead is ghon be ta stop
and restart \*(We.

.TP 4
38.\fB nDRT \*(Em Dirty Pages Count \fR
Da number of pages dat done been modified since they was last
written ta \*(AS.
Dirty pages must be freestyled ta \*(AS before tha correspondin physical
memory location can be used fo' some other virtual page.

.TP 4
39.\fB nMaj \*(Em Major Page Fault Count \fR
Da number of\fB major\fR page faults dat have occurred fo' a task.
A page fault occurs when a process attempts ta read from or write ta a
virtual page dat aint currently present up in its address space.
A major page fault is when \*(AS access is involved up in makin that
page available.

.TP 4
40.\fB nMin \*(Em Minor Page Fault count \fR
Da number of\fB minor\fR page faults dat have occurred fo' a task.
A page fault occurs when a process attempts ta read from or write ta a
virtual page dat aint currently present up in its address space.
A minor page fault do not involve \*(AS access up in makin that
page available.

.TP 4
41.\fB nTH \*(Em Number of Threadz \fR
Da number of threadz associated wit a process.

.TP 4
42.\fB vMj \*(Em Major Page Fault Count Delta\fR
Da number of\fB major\fR page faults dat have occurred since the
last update (see nMaj).

.TP 4
43.\fB vMn \*(Em Minor Page Fault Count Delta\fR
Da number of\fB minor\fR page faults dat have occurred since the
last update (see nMin).


.\" ......................................................................
.SS 3b. MANAGING Fields
.\" ----------------------------------------------------------------------
Afta pressin tha \*(CI 'f' or 'F' (Fieldz Management) yo big-ass booty is ghon be presented
with a screen showing: 1) tha \*(CW name; 2) tha designated sort field;
3) all fieldz up in they current order along wit descriptions.
Entries marked wit a asterisk is tha currently displayed fields,
screen width permitting.

.RS +4
.jBu
As tha on screen instructions indicate, you navigate among tha fieldz with
the\fB Up\fR and\fB Down\fR \*(KAs.
Da PgUp, PgDn, Home n' End keys can also be used ta quickly reach the
first or last available field.

.jBu
The\fB Right\fR \*(KA selects a gangbangin' field fo' repositionin and
the\fB Left\fR \*(KA or tha <\fBEnter\fR> key commits dat field's
placement.

.jBu
Da '\fBd\fR' key or tha <\fBSpace\fR> bar togglez a gangbangin' fieldz display
status, n' thus tha presence or absence of tha asterisk.

.jBu
Da '\fBs\fR' key designates a gangbangin' field as tha sort field.
\*(XT 4c. TASK AREA Commands, SORTING fo' additionizzle shiznit regarding
your selection of a sort field.

.jBu
Da '\fBa\fR' n' '\fBw\fR' keys can be used ta cycle all up in all available
windows n' tha '\fBq\fR' or <\fBEsc\fR> keys exit Fieldz Management.
.RS -4

.PP
Da Fieldz Management screen can also be used ta chizzle tha \*(CG in
either \*(FM or \*(AM.
Whatever was targeted when 'q' or <Esc> was pressed is ghon be made current
as you return ta tha \*(Us dudes display.
\*(XT 5 fo' realz. ALTERNATE\-DISPLAY Provisions n' tha 'g' \*(CI fo' insight
into \*(CWs n' \*(FGs.

.PP
\*(NT Any window dat has been scrolled\fI horizontally\fR is ghon be reset if any
field chizzlez is made via tha Fieldz Management screen.
Any\fI vertical\fR scrolled position, however, aint gonna be affected.
\*(XT 5c. Right back up in yo muthafuckin ass. SCROLLING a Window fo' additionizzle shiznit regardin vertical
and horizontal scrolling.

.\" ----------------------------------------------------------------------
.SH 4. INTERACTIVE Commands
.\" ----------------------------------------------------------------------
Listed below be a funky-ass brief index of commandz within categories.
Some commandz step tha fuck up mo' than once \*(Em they meanin or scope may vary
dependin on tha context up in which they is issued.

.Bd -literal
  4a.\fI Global-Commandz \fR
        <Ent/Sp> ?, =, 0,
        A, B, d, E, e, g, h, H, I, k, q, r, s, W, X, Y, Z
  4b.\fI Summary-Area-Commandz \fR
        C, l, t, m, 1, 2, 3
  4c.\fI Task-Area-Commandz \fR
        Appearance:  b, J, j, x, y, z
        Content:     c, f, F, o, O, S, u, U, V
        Size:        #, i, n
        Sorting:     <, >, f, F, R
  4d.\fI Color-Mappin \fR
        <Ret>, a, B, b, H, M, q, S, T, w, z, 0 - 7
  5b.\fI Commands-for-Windows \fR
        -, _, =, +, A, a, g, G, w
  5c.\fI Scrolling-a-Window \fR
        C, Up, Dn, Left, Right, PgUp, PgDn, Home, End
  5d.\fI Searching-in-a-Window \fR
        L, &
.Ed

.\" ......................................................................
.SS 4a. GLOBAL Commands
.\" ----------------------------------------------------------------------
Da global \*(CIs are\fB always\fR available\fR up in both \*(FM n' \*(AM.
But fuck dat shiznit yo, tha word on tha street is dat a shitload of these \*(CIs are\fB not available\fR when hustlin
in 'Secure mode'.

If you wish ta know up in advizzle whether or not yo' \*(Our thugged-out asses has been
secured, simply ask fo' help n' view tha system summary on tha second
line.

.TP 7
\ \ <\fBEnter\fR> or <\fBSpace\fR>\ \ :\fIRefresh-Display \fR
These commandz awaken \*(We n' followin receipt of any input
the entire display is ghon be repainted.
They also force a update of any hotplugged \*(Pu or \*(MP chizzles.

Use either of these keys if you gotz a big-ass delay interval n' wish
to peep current status,

.TP 7
\ \ \ \fB?\fR | \fBh\fR\ \ :\fIHelp \fR
There is two help levels available.
Da first will provide a reminder of all tha basic \*(CIs.
If \*(We is\fI secured\fR, dat screen is ghon be abbreviated.

Typin 'h' or '?' on dat help screen will take you ta help for
those \*(CIs applicable ta \*(AM.

.TP 7
\ \ \ \fB=\fR\ \ :\fIExit-Task-Limits \fR
Removes restrictions on which tasks is shown.
This command will reverse any 'i' (idle tasks) n' 'n' (max tasks)
commandz dat might be active.
It also serves up fo' a exit from pid monitoring, 'user' filterin and
'other' filtering.
See tha '\-p' \*(CO fo' a gangbangin' finger-lickin' rap of PID monitoring, tha 'U' or 'u'
\*(CIs fo' user filterin n' tha 'O' or 'o' \*(CIs fo' 'other' filtering.

Additionally, any window dat has been scrolled is ghon be reset with
this command.
\*(XT 5c. Right back up in yo muthafuckin ass. SCROLLING a Window fo' additionizzle shiznit regarding
vertical n' horizontal scrolling.

When operatin up in \*(AM dis command has a funky-ass broader meaning.

.TP 7
\ \ \ \fB0\fR\ \ :\fIZero-Suppress\fR toggle \fR
This command determines whether zeros is shown or suppressed fo' many
of tha fieldz up in a \*(TW.
Fieldz like UID, GID, NI, PR or P is not affected by dis toggle.

.TP 7
\ \ \ \fBA\fR\ \ :\fIAlternate-Display-Mode\fR toggle \fR
This command will switch between \*(FM n' \*(AM.
\*(XT 5 fo' realz. ALTERNATE\-DISPLAY Provisions n' tha 'g' \*(CI fo' insight
into \*(CWs n' \*(FGs.

.TP 7
\ \ \ \fBB\fR\ \ :\fIBold-Disable/Enable\fR toggle \fR
This command will influence use of tha 'bold' terminfo capabilitizzle and
alters\fB both\fR tha \*(SA n' \*(TA fo' tha \*(CW.
While it is intended primarily fo' use wit dumb terminals, it can be
applied anytime.

\*(NT When dis toggle is \*O n' \*(We is operatin up in monochrome mode,
the\fB entire display\fR will step tha fuck up as aiiight text.
Thus, unless tha 'x' and/or 'y' togglez is rockin reverse fo' emphasis,
there is ghon be no visual confirmation dat they is even on.

.TP 7
*\ \ \fBd\fR | \fBs\fR\ \ :\fIChange-Delay-Time-interval \fR
Yo ass is ghon be prompted ta enta tha delay time, up in seconds, between
display thugged-out shit.

Fractionizzle secondz is honored yo, but a wack number aint allowed.
Enterin 0 causes (nearly) continuous thugged-out shit, wit a unsatisfactory
display as tha system n' tty driver try ta keep up wit \*(Wez demands.
Da delay value is inversely proportionizzle ta system loading,
so set it wit care.

If at any time you wish ta know tha current delay time, simply ask for
help n' view tha system summary on tha second line.

.TP 7
\ \ \ \fBE\fR\ \ :\fIExtend-Memory-Scale\fR up in Summary Area
With dis command you can cycle all up in tha available \*(SA memory scaling
which ranges from KiB (kibibytes or 1,024 bytes) all up in EiB (exbibytes or
1,152,921,504,606,846,976 bytes).

If you peep a '+' between a gangbangin' finger-lickin' displayed number n' tha followin label, it
means dat \*(Us thugs was forced ta truncate some portion of dat number.
By raisin tha scalin factor, such truncation can be avoided.

.TP 7
\ \ \ \fBe\fR\ \ :\fIExtend-Memory-Scale\fR up in Task Windows
With dis command you can cycle all up in tha available \*(TW memory scaling
which ranges from KiB (kibibytes or 1,024 bytes) all up in PiB (pebibytes or
1,125,899,906,842,624 bytes).

While \*(Us thugs will try ta honor tha selected target range, additional
scalin might still be necessary up in order ta accommodate current joints.
If you wish ta peep a mo' homogeneous result up in tha memory columns,
raisin tha scalin range will probably accomplish dat goal.
Raisin it too high, however, is likely ta produce a all zero result
which cannot be suppressed wit tha '0' \*(CI.

.TP 7
\ \ \ \fBg\fR\ \ :\fIChoose-Another-Window/Field-Group \fR
Yo ass is ghon be prompted ta enta a number between 1 n' 4 designatin the
\*(FG which should be made tha \*(CW.
Yo ass will soon grow laid back wit these 4 windows, especially after
experimentin wit \*(AM.

.TP 7
\ \ \ \fBH\fR\ \ :\fIThreads-mode\fR toggle \fR
When dis toggle is \*O, individual threadz is ghon be displayed fo' all
processes up in all visible \*(TWs.
Otherwise, \*(Us dudes displays a summation of all threadz up in each process.

.TP 7
\ \ \ \fBI\fR\ \ :\fIIrix/Solaris-Mode\fR toggle \fR
When operatin up in 'Solaris mode' ('I' toggled \*F), a taskz \*(Pu usage
will be divided by tha total number of \*(PUs.
Afta issuin dis command, you gonna be holla'd all up in tha freshly smoked up state of dis toggle.

.TP 7
*\ \ \fBk\fR\ \ :\fIKill-a-task \fR
Yo ass is ghon be prompted fo' a PID n' then tha signal ta send.

Enterin no PID or a wack number is ghon be interpreted as
the default shown up in tha prompt (the first task displayed).
A PID value of zero means tha \*(We program itself.

Da default signal, as reflected up in tha prompt, is SIGTERM.
But fuck dat shiznit yo, tha word on tha street is dat you can bust any signal, via number or name.

If you wish ta abort tha bust a cap up in process, do one of tha following
dependin on yo' progress:
.Bd -literal
    1) all up in tha pid prompt, type a invalid number
    2) all up in tha signal prompt, type 0 (or any invalid signal)
.Ed

.TP 7
\ \ \ \fBq\fR\ \ :\fIQuit \fR

.TP 7
*\ \ \fBr\fR\ \ :\fIRenice-a-Task \fR
Yo ass is ghon be prompted fo' a PID n' then tha value ta sick it to.

Enterin no PID or a wack number is ghon be interpreted as
the default shown up in tha prompt (the first task displayed).
A PID value of zero means tha \*(We program itself.

A positizzle sick value will cause a process ta lose priority.
Conversely, a wack sick value will cause a process ta be viewed
more favorably by tha kernel.
As a general rule, ordinary playas can only increase tha sick value
and is prevented from lowerin dat shit.

If you wish ta abort tha renice process, do one of tha following
dependin on yo' progress:
.Bd -literal
    1) all up in tha pid prompt, type a invalid number
    2) all up in tha sick prompt, type <Enter> wit no input
.Ed

.TP 7
\ \ \ \fBW\fR\ \ :\fIWrite-the-Configuration-File \fR
This will save all of yo' options n' togglez plus tha current
display mode n' delay time.
By issuin dis command just before quittin \*(We, yo big-ass booty is ghon be able
restart lata up in exactly dat same state.

.TP 7
\ \ \ \fBX\fR\ \ :\fIExtra-Fixed-Width \fR
Some fieldz is fixed width n' not scalable.
As such, they is subject ta truncation which would be indicated
by a '+' up in tha last position.

This \*(CI can be used ta alta tha widthz of tha followin fields:

.Bd -literal
   \fI field  default    field  default    field  default \fR
    GID       5       GROUP     8       WCHAN    10
    RUID      5       RUSER     8
    SUID      5       SUSER     8
    UID       5       USER      8
                      TTY       8
.Ed

Yo ass is ghon be prompted fo' tha amount ta be added ta tha default
widths shown above.
Enterin zero forces a return ta dem defaults.

If you enta a wack number, \*(Us thugs will automatically increase
the column size as needed until there is no mo' truncated data.
Yo ass can accelerate dis process by reducin tha delay interval
or holdin down tha <Space> bar.

\*(NT Whether explicitly or automatically increased, tha widths for
these fieldz is never decreased by \*(We.
To narrow dem you must specify a smalla number or restore tha defaults.

.TP 7
\ \ \ \fBY\fR\ \ :\fIInspect-Other-Output \fR
Afta issuin tha 'Y' \*(CI, yo big-ass booty is ghon be prompted fo' a target PID.
Typin a value or acceptin tha default thangs up in dis biatch up in a separate screen.
That screen can be used ta view a variety of filez or piped command output
while tha aiiight \*(We iteratizzle display is paused.

\*(NT This \*(CI is only straight-up realized when supportin entries have been
manually added ta tha end of tha \*(We \*(CF.
For details on bustin dem entries, \*(Xt 6c fo' realz. ADDING INSPECT Entries.

Most of tha keys used ta navigate tha Inspect feature is reflected in
its header prologue.
There are, however, additionizzle keys available once you have selected a
particular file or command.
They is familiar ta mah playas whoz ass has used tha pager 'less' n' are
summarized here fo' future reference.

.Bd -literal
   \fI key      function \fR
    '='      alternate status\-line, file or pipeline
    '/'      find, equivalent ta 'L' locate
    'n'      find next, equivalent ta '&' locate next
    <Space>  scroll down, equivalent ta <PgDn>
    'b'      scroll up, equivalent ta <PgUp>
    'g'      first line, equivalent ta <Home>
    'G'      last line, equivalent ta <End>
.Ed

.TP 7
\ \ \ \fBZ\fR\ \ :\fIChange-Color-Mappin \fR
This key will take you ta a separate screen where you can chizzle the
colors fo' tha \*(CW, or fo' all windows.
For details regardin dis \*(CI \*(Xt 4d. Y'all KNOW dat shit, muthafucka! COLOR Mapping.

.IP "*" 3
Da commandz shown wit a \*(AK is not available up in 'Secure mode',
nor will they be shown on tha level-1 help screen.

.\" ......................................................................
.SS 4b. Right back up in yo muthafuckin ass. SUMMARY AREA Commands
.\" ----------------------------------------------------------------------
Da \*(SA \*(CIs are\fB always available\fR up in both \*(FM n' \*(AM.
They affect tha beginnin linez of yo' display n' will determine the
posizzle of lyrics n' prompts.

These commandz always impact just tha \*(CG.
\*(XT 5 fo' realz. ALTERNATE\-DISPLAY Provisions n' tha 'g' \*(CI fo' insight into
\*(CWs n' \*(FGs.

.TP 7
\ \ \ \fBC\fR\ \ :\fIShow-scroll-coordinates\fR toggle \fR
Toggle a shiznital message which is displayed whenever tha message
line aint otherwise bein used.
For additionizzle shiznit \*(Xt 5c. Right back up in yo muthafuckin ass. SCROLLING a Window.

.TP 7
\ \ \ \fBl\fR\ \ :\fILoad-Average/Uptime\fR toggle \fR
This be also tha line containin tha program name (possibly a alias)
when operatin up in \*(FM or tha \*(CW name when operatin up in \*(AM.

.TP 7
\ \ \ \fBt\fR\ \ :\fITask/Cpu-States\fR toggle \fR
This command affects from 2 ta nuff \*(SA lines, dependin on tha state
of tha '1', '2' or '3' \*(CTs n' whether or not \*(We is hustlin under
true SMP.

This portion of tha \*(SA be also hyped up by tha 'H' \*(CI toggle,
as reflected up in tha total label which shows either 'Tasks' or 'Threads'.

.TP 7
\ \ \ \fBm\fR\ \ :\fIMemory/Swap-Usage\fR toggle \fR
This command affects tha two \*(SA lines dealin wit physical
and virtual memory.

.TP 7
\ \ \ \fB1\fR\ \ :\fISingle/Separate-Cpu-States\fR toggle \fR
This command affects how tha fuck tha 't' commandz Cpu States portion is shown.
Although dis toggle exists primarily ta serve massively-parallel SMP
machines, it aint restricted ta solely SMP environments.

When you peep '%Cpu(s):' up in tha \*(SA, tha '1' toggle is \*O n' all
\*(Pu shiznit is gathered up in a single line.
Otherwise, each \*(Pu is displayed separately as: '%Cpu0, %Cpu1, ...'
up ta available screen height.

.TP 7
\ \ \ \fB2\fR\ \ :\fINUMA-Nodes/Cpu-Summary\fR toggle \fR
This command togglez between tha '1' command cpu summary display (only)
or a summary display plus tha cpu usage statistics fo' each NUMA Node.
It be only available if a system has tha requisite NUMA support.

.TP 7
\ \ \ \fB3\fR\ \ :\fIExpand-NUMA-Node \fR
Yo ass is ghon be invited ta enta a number representin a NUMA Node.
Thereafter, a node summary plus tha statistics fo' each cpu up in that
node is ghon be shown until either tha '1' or '2' \*(CT is pressed.
This \*(CI is only available if a system has tha requisite NUMA support.

.PP
\*(NT If tha entire \*(SA has been toggled \*F fo' any window, you would
be left wit just the\fB message line\fR.
In dat way, you gonna git maximized available task rows but (temporarily)
sacrificed tha program name up in \*(FM or tha \*(CW name when up in \*(AM.

.\" ......................................................................
.SS 4c. TASK AREA Commands
.\" ----------------------------------------------------------------------
Da \*(TA \*(CIs are\fB always\fR available up in \*(FM.

Da \*(TA \*(CIs are\fB never available\fR up in \*(AM\fI if\fR tha \*(CW's
\*(TD has been toggled \*F (\*(Xt 5 fo' realz. ALTERNATE\-DISPLAY Provisions).

.TP 2
.\" ..................................................
.B APPEARANCE\fR of \*(TW
.PD 0
.TP 7
\ \ \ \fBJ\fR\ \ :\fIJustify-Numeric-Columns\fR toggle \fR
Alternates between right-justified (the default) and
left-justified numeric data.
If tha numeric data straight-up fills tha available column, this
\*(CT may impact tha column header only.

.TP 7
\ \ \ \fBj\fR\ \ :\fIJustify-Character-Columns\fR toggle \fR
Alternates between left-justified (the default) and
right-justified characta data.
If tha characta data straight-up fills tha available column, this
\*(CT may impact tha column header only.

.PP
.RS +2
Da followin commandz will also be hyped up by tha state of the
global 'B' (bold enable) toggle.
.RS -2

.TP 7
\ \ \ \fBb\fR\ \ :\fIBold/Reverse\fR toggle \fR
This command will impact how tha fuck tha 'x' n' 'y' togglez is displayed.
Further, it will only be available when at least one of dem togglez is \*O.

.TP 7
\ \ \ \fBx\fR\ \ :\fIColumn-Highlight\fR toggle \fR
Changes highlightin fo' tha current sort field.
If you forget which field is bein sorted dis command can serve as a quick
visual reminder, providin tha sort field is bein displayed.
Da sort field might\fI not\fR be visible cuz:
    1) there is insufficient\fI Screen Width \fR
    2) tha 'f' \*(CI turned it \*F

.TP 7
\ \ \ \fBy\fR\ \ :\fIRow-Highlight\fR toggle \fR
Changes highlightin fo' "running" tasks.
For additionizzle insight tha fuck into dis task state,
\*(Xt 3a. DESCRIPTIONS of Fields, tha 'S' field (Process Status).

Use of dis provision serves up blingin insight tha fuck into yo' systemz health.
Da only costs is ghon be all dem additionizzle tty escape sequences.

.TP 7
\ \ \ \fBz\fR\ \ :\fIColor/Monochrome\fR toggle \fR
Switches tha \*(CW between yo' last used color scheme n' tha olda form
of black-on-white or white-on-black.
This command will alter\fB both\fR tha \*(SA n' \*(TA but do not affect
the state of tha 'x', 'y' or 'b' toggles.

.PP
.\" ..................................................
.B CONTENT\fR of \*(TW
.PD 0
.TP 7
\ \ \ \fBc\fR\ \ :\fICommand-Line/Program-Name\fR toggle \fR
This command is ghon be honored whether or not tha 'COMMAND' column
is currently visible.
Later, should dat field come tha fuck into view, tha chizzle you applied is ghon be seen.

.TP 7
\ \ \ \fBf\fR | \fBF\fR\ \ :\fIFields-Management \fR
These keys display a separate screen where you can chizzle which fieldz are
displayed, they order n' also designate tha sort field.
For additionizzle shiznit on these \*(CIs
\*(Xt 3b. MANAGING Fields.

.TP 7
\ \ \ \fBo\fR | \fBO\fR\ \ :\fIOther-Filterin \fR
Yo ass is ghon be prompted fo' tha selection criteria which then determines
which tasks is ghon be shown up in tha \*(CW.
Yo crazy-ass criteria can be made case sensitizzle or case can be ignored.
And you determine if \*(We should include or exclude matchin tasks.

\*(XT 5e. FILTERING up in a window fo' details on these n' additional
related \*(CIs.

.TP 7
\ \ \ \fBS\fR\ \ :\fICumulative-Time-Mode\fR toggle \fR
When 'Cumulatizzle mode' is \*O, each process is listed wit tha \*(Pu
time dat it n' its dead lil pimps have used.

When \*F, programs dat fork tha fuck into nuff separate tasks will appear
less demanding.
For programs like 'init' or a gangbangin' finger-lickin' dirty-ass shell dis be appropriate but fo' others,
like compilers, like not.
Experiment wit two \*(TWs pluggin tha same sort field but wit different 'S'
states n' peep which representation you prefer.

Afta issuin dis command, you gonna be informed of tha freshly smoked up state of dis toggle.
If you wish ta know up in advizzle whether or not 'Cumulatizzle mode' is in
effect, simply ask fo' help n' view tha window summary on tha second line.

.TP 7
\ \ \ \fBu\fR | \fBU\fR\ \ :\fIShow-Specific-User-Only \fR
Yo ass is ghon be prompted fo' the\fB uid\fR or\fB name\fR of tha user ta display.
Da '\-u' option matches on \fB effective\fR user whereas tha '\-U' option
matches on\fB any\fR user (real, effective, saved, or filesystem).

Thereafter, up in dat \*(TW only matchin playas is ghon be shown, or possibly
no processes is ghon be shown.
Prependin a exclamation point ('!') ta tha user id or name instucts top
to display only processes wit playas not matchin tha one provided.

Different \*(TWs can be used ta filta different users.
Later, if you wish ta monitor all playas again n' again n' again up in tha \*(CW, re-issue this
command but just press <Enter> all up in tha prompt.

.TP 7
\ \ \ \fBV\fR\ \ :\fIForest-View-Mode\fR toggle \fR
In dis mode, processes is reordered accordin ta they muthafathas and
the layout of tha COMMAND column resemblez dat of a tree.
In forest view mode it is still possible ta toggle between program
name n' commamd line (\*(Xc 'c' \*(CI) or between processes and
threadz (\*(Xc 'H' \*(CI).

\*(NT Typin any key affectin tha sort order will exit forest view
mode up in tha \*(CW.
\*(XT 4c. TASK AREA Commands, SORTING fo' shiznit on dem keys.

.PP
.\" ..................................................
.B SIZE\fR of \*(TW
.PD 0
.TP 7
\ \ \ \fBi\fR\ \ :\fIIdle-Process\fR toggle \fR
Displays all tasks or just actizzle tasks.
When dis toggle is \*F, tasks dat aint used any \*(PU since the
last update aint gonna be displayed.
But fuck dat shiznit yo, tha word on tha street is dat cuz of tha granularitizzle of tha %CPU n' TIME+ fields,
some processes may still be displayed that\fI appear\fR ta have
used\fI no\fR \*(PU.

If dis command be applied ta tha last \*(TD when up in \*(AM, then it will not
affect tha windowz size, as all prior \*(TDs gonna git already been painted.

.TP 7
\ \ \ \fBn\fR | \fB#\fR\ \ :\fISet-Maximum-Tasks \fR
Yo ass is ghon be prompted ta enta tha number of tasks ta display.
Da lessor of yo' number n' available screen rows is ghon be used.

When used up in \*(AM, dis is tha command dat gives you precise control over
the size of each currently visible \*(TD, except fo' tha straight-up last.
It aint gonna affect tha last windowz size, as all prior \*(TDs will have
already been painted.

\*(NT If you wish ta increase tha size of tha last visible \*(TD when up in \*(AM,
simply decrease tha size of tha \*(TD(s) above dat shit.

.TP 2
.\" ..................................................
.B SORTING\fR of \*(TW
For compatibility, dis \*(We supports most of tha forma \*(We sort keys.
Since dis is primarily a steez ta forma \*(We users, these commandz do
not step tha fuck up on any help screen.
.Bd -literal -compact
  \fI command   sorted-field                  supported \fR
     A         start time (non-display)     \fB No \fR
     M         %MEM                          Yes
     N         PID                           Yes
     P         %CPU                          Yes
     T         TIME+                         Yes
.Ed

Before rockin any of tha followin sort provisions, \*(We suggests dat you
temporarily turn on column highlightin rockin tha 'x' \*(CI.
That will help ensure dat tha actual sort environment matches yo' intent.

Da followin \*(CIs will\fB only\fR be honored when tha current sort field
is\fB visible\fR.
Da sort field might\fI not\fR be visible cuz:
     1) there is insufficient\fI Screen Width \fR
     2) tha 'f' \*(CI turned it \*F

.TP 7
\ \ \ \fB<\fR\ \ :\fIMove-Sort-Field-Left \fR
Moves tha sort column ta tha left unless tha current sort field is
the first field bein displayed.

.TP 7
\ \ \ \fB>\fR\ \ :\fIMove-Sort-Field-Right \fR
Moves tha sort column ta tha right unless tha current sort field is
the last field bein displayed.

.PP
.in +2
Da followin \*(CIs will\fB always\fR be honored whether or not
the current sort field is visible.
.in

.TP 7
\ \ \ \fBf\fR | \fBF\fR\ \ :\fIFields-Management \fR
These keys display a separate screen where you can chizzle which field
is used as tha sort column, among other functions.
This can be a cold-ass lil convenient way ta simply verify tha current sort field,
when hustlin \*(Us thugs wit column highlightin turned \*F.

.TP 7
\ \ \ \fBR\fR\ \ :\fIReverse/Normal-Sort-Field\fR toggle \fR
Usin dis \*(CI you can alternate between high-to-low n' low-to-high sorts.

.PP
.in +2
\*(NT Field sortin uses internal joints, not dem up in column display.
Thus, tha TTY n' WCHAN fieldz will violate strict ASCII collatin sequence.
.in

.\" ......................................................................
.SS 4d. Y'all KNOW dat shit, muthafucka! COLOR Mapping
.\" ----------------------------------------------------------------------
When you issue tha 'Z' \*(CI, yo big-ass booty is ghon be presented wit a separate screen.
That screen can be used ta chizzle tha flavas up in just tha \*(CW or
in all four windows before returnin ta tha \*(Us dudes display.

.P
Da followin \*(CIs is available.
.Bd -literal -compact
    \fB4\fR upper case lettas ta select a\fB target \fR
    \fB8\fR numbers ta select a\fB color \fR
    aiiight togglez available \fR
        'B'       :bold disable/enable
        'b'       :runnin tasks "bold"/reverse
        'z'       :color/mono
    other commandz available \fR
        'a'/'w'   :apply, then git all up in next/prior
        <Enter>   :apply n' exit
        'q'       :abandon current chizzlez n' exit
.Ed

If you use 'a' or 'w' ta cycle tha targeted window, you will
have applied tha color scheme dat was displayed when you left dat window.
Yo ass can, of course, easily return ta any window n' reapply different
colors or turn flavas \*F straight-up wit tha 'z' toggle.

Da Color Mappin screen can also be used ta chizzle tha \*(CG in
either \*(FM or \*(AM.
Whatever was targeted when 'q' or <Enter> was pressed is ghon be made current
as you return ta tha \*(Us dudes display.

.\" ----------------------------------------------------------------------
.SH 5 fo' realz. ALTERNATE\-DISPLAY Provisions
.\" ----------------------------------------------------------------------
.\" ......................................................................
.SS 5a. WINDOWS Overview
.\" ----------------------------------------------------------------------
.TP 3
.B Field Groups/Windows\fR:
In \*(FM there be a single window represented by tha entire screen.
That single window can still be chizzled ta display 1 of 4 different\fB field
groups\fR (\*(Xc 'g' \*(CI, repeated below).
Each of tha 4 \*(FGs has a unique separately configurable\fB \*(SA \fR
and its own configurable\fB \*(TA\fR.

In \*(AM, dem 4 underlyin \*(FGs can now be made visible
simultaneously, or can be turned \*F individually at yo' command.

Da \*(SA will always exist, even if itz only tha message line.
At any given time only\fI one\fR \*(SA can be displayed.
But fuck dat shiznit yo, tha word on tha street is dat dependin on yo' commands, there could be from\fI zero \fR
to\fI four\fR separate \*(TDs currently showin on tha screen.

.TP 3
.B Current Window\fR:
Da \*(CW is tha window associated wit tha \*(SA n' tha window ta which
task related commandz is always directed.
Since up in \*(AM you can toggle tha \*(TD \*F, some commandz might be
restricted fo' tha \*(CW.

A further complication arises when you have toggled tha straight-up original gangsta \*(SA
line \*F.
With tha loss of tha window name (the 'l' toggled line), you gonna not easily
know what tha fuck window is tha \*(CW.

.\" ......................................................................
.SS 5b. COMMANDS fo' Windows
.\" ----------------------------------------------------------------------
.TP 7
\ \ \ \fB-\fR | \fB_\fR\ \ :\fIShow/Hide-Window(s)\fR togglez \fR
Da '\-' key turns tha \*(CWz \*(TD \*O n' \*F.
When \*O, dat \*(TA will show a minimum of tha columns header you've
established wit tha 'f' \*(CI.
It will also reflect any other \*(TA options/togglez you've applied
yieldin zero or mo' tasks.

Da '_' key do tha same fo' all \*(TDs.
In other lyrics, it switches between tha currently visible \*(TD(s) n' any
\*(TD(s) you had toggled \*F.
If all 4 \*(TDs is currently visible, dis \*(CI'ma leave tha \*(SA
as tha only display element.

.TP 7
*\ \ \fB=\fR | \fB+\fR\ \ :\fIEqualize-(reinitialize)-Window(s) \fR
Da '=' key forces tha \*(CWz \*(TD ta be visible.
It also reverses any 'i' (idle tasks), 'n' (max tasks), 'u'/'U' (user filter)
and 'o'/'O' (other filter) commandz dat might be active.
Also, if tha window had been scrolled, it is ghon be reset wit dis command.
\*(XT 5c. Right back up in yo muthafuckin ass. SCROLLING a Window fo' additionizzle shiznit regardin vertical
and horizontal scrolling.

Da '+' key do tha same fo' all windows.
Da four \*(TDs will reappear, evenly balanced.
They will also have retained any customizations you had previously applied,
except fo' tha 'i' (idle tasks), 'n' (max tasks), 'u'/'U' (user filter),
'o'/'O' (other filter) n' scrollin \*(CIs.

.TP 7
*\ \ \fBA\fR\ \ :\fIAlternate-Display-Mode\fR toggle \fR
This command will switch between \*(FM n' \*(AM.

Da last time you issue dis command, all four \*(TDs is ghon be shown.
Thereafta when you switch modes, yo big-ass booty is ghon peep only tha \*(TD(s) you've
chosen ta make visible.

.TP 7
*\ \ \fBa\fR | \fBw\fR\ \ :\fINext-Window-Forward/Backward \fR
This will chizzle tha \*(CW, which up in turn chizzlez tha window ta which
commandz is directed.
These keys act up in a cold-ass lil circular fashizzle so you can reach any desired \*(CW
usin either key.

Assumin tha window name is visible (you aint toggled 'l' \*F),
whenever tha \*(CW name loses its emphasis/color, thatz a reminder
the \*(TD is \*F n' nuff commandz is ghon be restricted.

.TP 7
*\ \ \fBg\fR\ \ :\fIChoose-Another-Window/Field-Group \fR
Yo ass is ghon be prompted ta enta a number between 1 n' 4 designatin the
\*(FG which should be made tha \*(CW.

In \*(FM, dis command is necessary ta alta tha \*(CW.
In \*(AM, it is simply a less convenient alternatizzle ta tha 'a' n' 'w'
commands.

.TP 7
\ \ \ \fBG\fR\ \ :\fIChange-Window/Field-Group-Name \fR
Yo ass is ghon be prompted fo' a freshly smoked up name ta be applied ta tha \*(CW.
It do not require dat tha window name be visible
(the 'l' toggle ta be \*O).

.IP "*" 3
Da \*(CIs shown wit a \*(AK have use beyond \*(AM.
.Bd -literal -compact
    \'=', 'A', 'g'  is always available
    \'a', 'w'       act tha same wit color mapping
    \               n' fieldz pimpment
.Ed

.\" ......................................................................
.SS 5c. Right back up in yo muthafuckin ass. SCROLLING a Window
.\" ----------------------------------------------------------------------
Typically a \*(TW be a partial view tha fuck into a systemss total tasks/threads
which shows only a shitload of tha available fields/columns.
With these \*(KSs, you can move dat view vertically or horizontally to
reveal any desired task or column.

.TP 4
\fBUp\fR,\fBPgUp\fR\ \ :\fIScroll-Tasks \fR
Move tha view up toward tha straight-up original gangsta task row, until tha straight-up original gangsta task is
displayed all up in tha top of tha \*(CW.
Da \fIUp\fR \*(KA moves a single line while \fIPgUp\fR scrolls the
entire window.

.TP 4
\fBDown\fR,\fBPgDn\fR\ \ :\fIScroll-Tasks \fR
Move tha view down toward tha last task row, until tha last task is
the only task displayed all up in tha top of tha \*(CW.
Da \fIDown\fR \*(KA moves a single line while \fIPgDn\fR scrolls the
entire window.

.TP 4
\fBLeft\fR,\fBRight\fR\ \ :\fIScroll-Columns \fR
Move tha view of displayable fieldz horizontally one column at a time.

\*(NT As a reminder, some fields/columns is not fixed-width but
allocated all remainin screen width when visible.
When scrollin right or left, dat feature may produce some
unexpected thangs up in dis biatch initially.

Additionally, there be special provisions fo' any variable width field
when positioned as tha last displayed field.
Once dat field is reached via tha right arrow key, n' is thus tha only
column shown, you can continue scrollin horizontally within such a gangbangin' field.
\*(XC 'C' \*(CI below fo' additionizzle shiznit.

.TP 4
\fBHome\fR\ \ :\fIJump-to-Home-Posizzle \fR
Reposizzle tha display ta tha un-scrolled coordinates.

.TP 4
\fBEnd\fR\ \ :\fIJump-to-End-Posizzle \fR
Reposizzle tha display so dat tha rightmost column reflects tha last
displayable field n' tha bottom task row represents tha last task.

\*(NT From dis posizzle it is still possible ta scroll\fI down\fR
and\fI right\fR rockin tha \*(KAs.
This is legit until a single column n' a single task is left as tha only
display element.

.TP 4
\fBC\fR\ \ :\fIShow-scroll-coordinates\fR toggle \fR
Toggle a shiznital message which is displayed whenever tha message
line aint otherwise bein used.
That message will take one of two forms dependin on whether or not a
variable width column has also been scrolled.

.Bd -literal
  \fBscroll coordinates: y = n/n (tasks), x = n/n (fields)\fR
  \fRscroll coordinates: y = n/n (tasks), x = n/n (fields)\fB + nn\fR
.Ed

Da coordinates shown as \fBn\fR/\fBn\fR is relatizzle ta tha upper left
corner of tha \*(CW.
Da additionizzle '\fB+\ nn\fR' represents tha displacement tha fuck into a variable
width column when it has been scrolled horizontally.
Such displacement occurs up in aiiight 8 characta tab stop amounts via
the right n' left arrow keys.

.RS +4
.TP 4
\fBy = n/n (tasks) \fR
Da first \fBn\fR represents tha topmost visible task n' is controlled
by \*(KSs.
Da second \fBn\fR is updated automatically ta reflect total tasks.

.TP 4
\fBx = n/n (fields) \fR
Da first \fBn\fR represents tha leftmost displayed column n' is
controlled by \*(KSs.
Da second \fBn\fR is tha total number of displayable fieldz n' is
established wit tha '\fBf\fR' \*(CI.
.RS -4

.PP
Da above \*(CIs are\fB always\fR available up in \*(FM but\fB never\fR
available up in \*(AM if tha \*(CWz \*(TD has been toggled \*F.

\*(NT When any form of filterin be active, you can expect some slight
abberations when scrollin since not all tasks is ghon be visible.
This is paticularly apparent when rockin tha Up/Down \*(KAs.

.\" ......................................................................
.SS 5d. Y'all KNOW dat shit, muthafucka! SEARCHING up in a Window
.\" ----------------------------------------------------------------------
Yo ass can use these \*(CIs ta locate a task row containin a particular value.

.TP 4
\fBL\fR\ \ :\fILocate-a-string\fR
Yo ass is ghon be prompted fo' tha case-sensitizzle strang ta locate startin from
the current window coordinates.
There is no restrictions on search strang content.

Searches is not limited ta joints from a single field or column.
All of tha joints displayed up in a task row is allowed up in a search string.
Yo ass may include spaces, numbers, symbols n' even forest view artwork.

Keyin <Enter> wit no input will effectively disable tha '&' key until
a freshly smoked up search strang is entered.

.TP 4
\fB&\fR\ \ :\fILocate-next\fR
Assumin a search strang has been established, \*(Us thugs will attempt ta locate
the next occurrence.

.PP
When a match is found, tha current window is repositioned vertically so the
task row containin dat strang is first.
Da scroll coordinates message can provide confirmation of such vertical
repositionin (\*(Xc 'C' \*(CI).
Horizontal scrolling, however, is never altered via searching.

Da availabilitizzle of a matchin strang is ghon be hyped up by tha following
factors.
.RS +3
.TP 3
a. Which fieldz is displayable from tha total available,
\*(Xt 3b. MANAGING Fields.
.TP 3
b. Right back up in yo muthafuckin ass. Scrollin a window vertically and/or horizontally,
\*(Xt 5c. Right back up in yo muthafuckin ass. SCROLLING a Window.
.TP 3
c. Da state of tha command/command-line toggle,
\*(Xc 'c' \*(CI.
.TP 3
d. Y'all KNOW dat shit, muthafucka! Da stabilitizzle of tha chosen sort column,
for example PID is phat but %CPU bad.
.RS -3

.PP
If a search fails, restorin tha \*(CW home (unscrolled) position, scrolling
horizontally, displayin command-lines or choosin a mo' stable sort field
could yet produce a successful '&' search.

Da above \*(CIs are\fB always\fR available up in \*(FM but\fB never\fR
available up in \*(AM if tha \*(CWz \*(TD has been toggled \*F.

\*(NT Whenever a search key is typed, \*(Us thugs will turn column highlighting
\*F ta prevent false matches on internal non-display escape sequences.
Such highlightin is ghon be restored when a windowz search strang is empty.
\*(XC 'x' \*(CI fo' additionizzle shiznit on sort column highlighting.

.\" ......................................................................
.SS 5e. FILTERING up in a Window
.\" ----------------------------------------------------------------------
Yo ass can use tha 'Other Filter' feature ta establish selection criteria which
will then determine which tasks is shown up in tha \*(CW.

Establishin a gangbangin' filta requires: 1) a gangbangin' field name; 2) a operator; and
3) a selection value, as a minimum.
This is da most thugged-out complex of \*(Wez user input requirements so, when you make
a mistake, command recall is ghon be yo' playa.
Remember tha Up/Down \*(KAs or they aliases when prompted fo' input.

.B Filta Basics
.IP "   .  " 6
field names is case sensitizzle n' spelled as up in tha header
.IP "   .  " 6
selection joints need not comprise tha full displayed field
.IP "   .  " 6
a selection is either case insensitizzle or sensitizzle ta case
.IP "   .  " 6
the default is inclusion, prependin '!' denotes exclusions
.IP "   .  " 6
multiple selection criteria can be applied ta a \*(TW
.IP "   .  " 6
inclusion n' exclusion criteria can be used simultaneously
.IP "   .  " 6
the 1 equalitizzle n' 2 relationizzle filtas can be freely mixed
.IP "   .  " 6
separate unique filtas is maintained fo' each \*(TW
.RE

If a gangbangin' field aint turned on or aint currently up in view, then yo' selection
criteria aint gonna affect tha display.
Later, should a gangbangin' filtered field become visible, tha selection criteria will
then be applied.

.B Keyboard Summary
.TP 6
\ \ \fBo\fR\ \ :\fIOther-Filter\fR (lower case)
Yo ass is ghon be prompted ta establish a gangbangin' filta dat \fBignores case\fR when
matching.

.TP 6
\ \ \fBO\fR\ \ :\fIOther-Filter\fR (upper case)
Yo ass is ghon be prompted ta establish a \fBcase sensitive\fR filter.

.TP 6
\ \fB^O\fR\ \ :\fIShow-Active-Filters\fR (Ctrl key + 'o')
This can serve as a reminder of which filtas is actizzle up in tha \*(CW.
A summary is ghon be shown on tha message line until you press tha <Enter> key.

.TP 6
\ \ \fB=\fR\ \ :\fIReset-Filtering\fR up in current window
This clears all of yo' selection criteria up in tha \*(CW.
It also has additionizzle impact so please \*(Xt 4a. GLOBAL Commands.

.TP 6
\ \ \fB+\fR\ \ :\fIReset-Filtering\fR up in all windows
This clears tha selection criteria up in all windows, assumin yo ass is up in \*(AM.
As wit tha '=' \*(CI, it too has additionizzle consequences so you might wish to
\*(Xt 5b. COMMANDS fo' Windows.
.RE

.B Input Requirements
.RS +3
.P
When prompted fo' selection criteria, tha data you provide must take one
of two forms.
There is 3 required piecez of shiznit, wit a 4th as optional.
These examplez use spaces fo' claritizzle but yo' input generally would not.
.Bd -literal
        #1           \fB#2\fR  #3              ( required )
        Field\-Name   ?   include\-if\-value
     \fB!\fR  Field\-Name   ?   \fBexclude\fR\-if\-value
     #4                                  ( optionizzle )
.Ed

Items #1, #3 n' #4 should be self\-explanatory.
Item \fB#2\fR represents both a required \fIdelimiter\fR n' tha \fIoperator\fR
which must be one of either equalitizzle ('=') or relation ('<' or '>').

Da '=' equalitizzle operator requires only a partial match n' that
can reduce yo' 'if\-value' input requirements.
Da '>' or '<' relationizzle operators always employ strang comparisons,
even wit numeric fields.
They is designed ta work wit a gangbangin' fieldz default \fIjustification\fR and
with homogeneous data.
When some fieldz numeric amounts done been subjected ta \fIscaling\fR
while others have not, dat data is no longer homogeneous.

If you establish a relationizzle filta n' you \fBhave\fR chizzled tha default
'Numeric' or 'Character' \fIjustification\fR, dat filta is likely ta fail.
When a relationizzle filta be applied ta a memory field n' you \fBhave not\fR
changed tha \fIscaling\fR, it may produce misleadin thangs up in dis biatch.
This happens, fo' example, cuz '100.0m' (MiB) would step tha fuck up pimped outa than
'1.000g' (GiB) when compared as strings.

If yo' filtered thangs up in dis biatch step tha fuck up suspect, simply alterin justification or
scalin may yet big up tha desired objective.
See tha 'j', 'J' n' 'e' \*(CIs fo' additionizzle shiznit.
.RE

.B Potential Problems
.RS +3
.P
These \fBGROUP\fR filtas could produce tha exact same thangs up in dis biatch or the
second one might not display anythang at all, just a funky-ass blank \*(TW.
.Bd -literal
     GROUP=root        ( only tha same thangs up in dis biatch when )
     GROUP=ROOT        ( invoked via lower case 'o' )
.Ed

Either of these \fBRES\fR filtas might yield inconsistent and/or
misleadin thangs up in dis biatch, dependin on tha current memory scalin factor.
Or both filtas could produce tha exact same thangs up in dis biatch.
     RES>9999          ( only tha same thangs up in dis biatch when )
     !RES<10000        ( memory scalin be at 'KiB' )
.Ed

This \fBnMin\fR filta illustrates a problem unique ta scalable fields.
This particular field can display a maximum of 4 digits, beyond which joints
are automatically scaled ta KiB or above.
So while amounts pimped outa than 9999 exist, they will step tha fuck up as 2.6m, 197k, etc.
.Bd -literal
     nMin>9999         ( always a funky-ass blank \*(TW )
.Ed
.RE

.B Potential Solutions
.RS +3
.P
These examplez illustrate how tha fuck 'Other Filtering' can be creatively
applied ta big up almost any desired result.
Single quotes is sometimes shown ta delimit tha spaces which is part of
a filta or ta represent a request fo' status (^O) accurately.
But if you used dem wit if-values up in real game, no matches would be found.

Assumin field \fBnTH\fR is displayed, tha straight-up original gangsta filta will result in
only multi-threaded processes bein shown.
It also remindz our asses dat a trailin space is part of every last muthafuckin displayed field.
Da second filta achieves tha exact same thangs up in dis biatch wit less typing.
.Bd -literal
     !nTH=' 1 '                ( ' fo' claritizzle only )
     nTH>1                     ( same wit less i/p )
.Ed

With Forest View mode actizzle n' tha \fBCOMMAND\fR column up in view, this
filta effectively collapses lil pimp processes so dat just 3 levels is shown.
.Bd -literal
     !COMMAND='       `- '     ( ' fo' claritizzle only )
.Ed

Da final two filtas step tha fuck up as up in response ta tha status request key (^O).
In reality, each filta would have required separate input.
Da \fBPR\fR example shows tha two concurrent filtas necessary ta display
tasks wit prioritizzlez of 20 or more, since some might be negative.
Then by exploitin trailin spaces, tha \fBnMin\fR seriez of filtas could
achieve tha failed '9999' objectizzle discussed above.
.Bd -literal
     'PR>20' + '!PR=-'         ( 2 fo' right result )
     '!nMin=0 ' + '!nMin=1 ' + '!nMin=2 ' + '!nMin=3 ' ...
.Ed
.RE

\*(NT When 'Other Filtering' be active, \*(We turns column highlighting
\*F ta prevent false matches on internal non-display escape sequences.
Such highlightin is ghon be restored when a window is no longer subject
to filtering.
\*(XC 'x' \*(CI fo' additionizzle shiznit on sort column highlighting.

.\" ----------------------------------------------------------------------
.SH 6. FILES
.\" ----------------------------------------------------------------------
.\" ......................................................................
.SS 6a. Right back up in yo muthafuckin ass. SYSTEM Configuration File
.\" ----------------------------------------------------------------------
Da presence of dis file will influence which version of tha 'help' screen
is shown ta a ordinary user.
Mo' blinginly, it will limit what tha fuck ordinary playas is allowed
to do when \*(We is hustlin.
They aint gonna be able ta issue tha followin commands.
.Bd -literal -compact
    k        Bust a cap up in a task
    r        Renice a task
    d or s   Chizzle delay/sleep interval
.Ed

Da system \*(CF is\fB not\fR pimped by \*(We.
Rather, you create dis file manually n' place it up in tha \fI/etc \fR
directory.
Its name must be 'toprc' n' must have no leadin '.' (period).
It must have only two lines.

Here be a example of tha contents of\fI /etc/toprc\fR:
.Bd -literal -compact
    s        # line 1: 'secure' mode switch
    5.0      # line 2: 'delay'\ \ interval up in seconds
.Ed

.\" ......................................................................
.SS 6b. PERSONAL Configuration File
.\" ----------------------------------------------------------------------
This file is freestyled as '$HOME/.your\-name\-4\-\*(We' + 'rc'.
Use tha 'W' \*(CI ta create it or update dat shit.

Here is tha general layout:
.Bd -literal -compact
    global   # line  1: tha program name/alias notation
      "      # line  2: id,altscr,irixps,delay,curwin
    per ea   # line  a: winname,fieldscur
    window   # line  b: winflags,sortindx,maxtasks
      "      # line  c: summclr,msgsclr,headclr,taskclr
    global   # line 15: fixed-width incr
      "      # any remainin lines is devoted ta the
      "      # generalized 'inspect' provisions
      "      # discussed below
.Ed

If tha $HOME variable aint present, \*(Us thugs will try ta write the
personal \*(CF ta tha current directory, subject ta permissions.

.\" ......................................................................
.SS 6c fo' realz. ADDING INSPECT Entries
.\" ----------------------------------------------------------------------
To exploit tha 'Y' \*(CI, you must add entries at the\fB end\fR of the
\*(We underground \*(CF.
Such entries simply reflect a gangbangin' file ta be read or command/pipeline ta be
executed whose thangs up in dis biatch will then be displayed up in a separate scrollable,
searchable window.

If you don't give a fuck tha location or name of yo' \*(We rcfile, use tha 'W'
\*(CI ta rewrite it n' note dem details.

Inspect entries can be added wit a repimped up echo or by editin tha \*(CF.
Redirectin a echo risks overwritin tha rcfile should it replace (>)
rather than append (>>) ta dat file.
Conversely, when rockin a editor care must be taken not ta corrupt existing
lines, a shitload of which will contain unprintable data or unusual characters.

Those Inspect entries beginnin wit a '#' characta is ignored, regardless
of content.
Otherwise they consist of tha followin 3 elements, each of which\fI must\fR
be separated by a tab characta (thus 2 '\\t' total):

.Bd -literal -compact
  .type:  literal 'file' or 'pipe'
  .name:  selection shown on tha Inspect screen
  .fmts:  strang representin a path or command
.Ed

Da two typez of Inspect entries are\fI not\fR interchangeable.
Those designated '\fBfile\fR' is ghon be accessed rockin fopen and
must reference a single file up in tha '.fmts' element.
Entries specifyin '\fBpipe\fR' will employ pimpn, they '.fmts' element
could contain nuff pipelined commandz and, none can be interactive.

If tha file or pipeline represented up in yo' '.fmts' deals wit tha specific PID
input or accepted when prompted, then tha format strang must also contain
the '\fB%d\fR' specifier, as these examplez illustrate.

.Bd -literal -compact
  .fmts=  /proc/\fI%d\fR/numa_maps
  .fmts=  lsof -P -p\fI %d\fR
.Ed

For '\fBpipe\fR' type entries only, you may also wish ta redirect stderr to
stdout fo' a mo' comprehensive result.
Thus tha format strang becomes:

.Bd -literal -compact
  .fmts=  pmap -x %d\fI 2>&1\fR
.Ed

Here is examplez of both typez of Inspect entries as they might appear
in tha rcfile.
Da first entry is ghon be ignored cuz of tha initial '#' character.
For clarity, tha pseudo tab depictions (^I) is surrounded by an
extra space but tha actual tabs would not be.
.Bd -literal -compact

  # pipe ^I Sockets ^I lsof -n -P -i 2>&1
  pipe ^I Open Filez ^I lsof -P -p %d 2>&1
  file ^I NUMA Info ^I /proc/%d/numa_maps
  pipe ^I Log ^I tail -n100 /var/log/syslog | sort -Mr
.Ed

Except fo' tha commented entry above, these next examplez show what tha fuck could
be echoed ta big up similar thangs up in dis biatch, assumin tha rcfile name was '.toprc'.
But fuck dat shiznit yo, tha word on tha street is dat cuz of tha embedded tab characters, each of these lines should be
preceded by '\fB/bin/echo \-e\fR', not just a simple a 'echo', to
enable backslash interpretation regardless of which shell you use.

.Bd -literal -compact
  "pipe\\tOpen Files\\tlsof -P -p %d 2>&1" >> ~/.toprc
  "file\\tNUMA Info\\t/proc/%d/numa_maps" >> ~/.toprc
  "pipe\\tLog\\ttail -n200 /var/log/syslog | sort -Mr" >> ~/.toprc
.Ed

\fBCaution\fR:
If any inspect entry you create produces output wit unprintable characters
they is ghon be displayed up in either tha ^C notation or hexidecimal <FF> form,
dependin on they value.
This applies ta tab charactas as well, which will show as '^I'.
If you want a truer representation, any embedded tabs should be expanded.

.Bd -literal -compact
  # next would have contained '\\t' ...
  # file ^I <your_name> ^I /proc/%d/status
  # but dis will eliminizzle embedded '\\t' ...
  pipe ^I <your_name> ^I pussaaaaay /proc/%d/status | expand -
.Ed

Da above example takes what tha fuck could done been a 'file' entry but employs
a 'pipe' instead so as ta expand tha embedded tabs.

\*(NT While '\fBpipe\fR' type entries done been discussed up in termz of pipelines
and commands, there is not a god damn thang ta prevent you from includin \fI shell scripts\fR
as well.
Perhaps even newly pimped scripts designed specifically fo' tha 'Y' \*(CI.

Lastly, as tha number of yo' Inspect entries grows over time, tha 'Options:'
row is ghon be truncated when screen width is exceeded.
That do not affect operation other than ta cook up some fuckin selections invisible.

But fuck dat shiznit yo, tha word on tha street is dat if some chizzlez is lost ta truncation but you wanna peep mo' options,
there be a easy as fuck  solution hinted at below.

.Bd -literal -compact
  Inspection Pause at pid ...
  Use:  left/right then <Enter> ...
  Options:  help  1  2  3  4  5  6  7  8  9  10  11 ...
.Ed

Da entries up in tha \*(We rcfile would gotz a number fo' tha '.name' element and
the 'help' entry would identify a gangbangin' finger-lickin' dirty-ass shell script you've freestyled explainin what
those numbered selections straight-up mean.
In dat way, nuff mo' chizzlez can be made visible.

.PP

.\" ----------------------------------------------------------------------
.SH 7. Right back up in yo muthafuckin ass. STUPID TRICKS Sampler
.\" ----------------------------------------------------------------------
Many of these 'tricks' work dopest when you give \*(We a schedulin boost.
So plan on startin his ass wit a sick value of \-10, assumin you've got
the authority.

.\" ......................................................................
.SS 7a. Kernel Magic
.\" ----------------------------------------------------------------------
.\" sorry, just can't help it -- don't ya ludd tha sound of this?
For these wack tricks, \*(We needz \*(FM.
.\" ( apparently AM static was a potential concern )

.jBu
Da user intercourse, all up in prompts n' help, intentionally implies
that tha delay interval is limited ta tenthz of a second.
But fuck dat shiznit yo, tha word on tha street is dat you free ta set any desired delay.
If you wanna peep Linux at his schedulin best, try a thugged-out delay of .09
secondz or less.

For dis experiment, under x-windows open a xterm n' maximize dat shit.
Then do tha following:
.Bd -literal -compact
  . provide a schedulin boost n' tiny delay via:
      sick -n -10 \*(We -d.09
  . keep sorted column highlightin \*F so as to
    minimize path length
  . turn \*O reverse row highlightin fo' emphasis
  . try various sort columns (TIME/MEM work well),
    n' aiiight or reverse sorts ta brang da most thugged-out
    actizzle processes tha fuck into view
.Ed

What you gonna peep be a straight-up busy Linux bustin what tha fuck he always done fo' you,
but there was no program available ta illustrate all dis bullshit.

.jBu
Under a xterm rockin 'white-on-black' colors, on \*(Wez Color Mappin screen
set tha task color ta black n' be shizzle dat task highlightin is set ta bold,
not reverse.
Then set tha delay interval ta round .3 seconds.

Afta brangin da most thugged-out actizzle processes tha fuck into view, what tha fuck you gonna peep are
the pimply imagez of just tha currently hustlin tasks.

.jBu
Delete tha existin rcfile, or create a freshly smoked up symlink.
Start dis freshly smoked up version then type 'T' (a secret key,
\*(Xt 4c. Task Area Commands, SORTING) followed by 'W' n' 'q'.
Finally, restart tha program wit \-d0 (zero delay).

Yo crazy-ass display is ghon be refreshed at three times tha rate of tha forma \*(We,
a 300% speed advantage.
As \*(We climbs tha TIME ladder, be as patient as you can while speculating
on whether or not \*(Us thugs will eva reach tha \*(We.

.\" ......................................................................
.SS 7b. Bouncin Windows
.\" ----------------------------------------------------------------------
For these wack tricks, \*(We needz \*(AM.

.jBu
With 3 or 4 \*(TDs visible, pick any window other than tha last
and turn idle processes \*F rockin tha 'i' \*(CT.
Dependin on where you applied 'i', sometimes nuff muthafuckin \*(TDs is bouncin and
sometimes itz like a accordion, as \*(We tries his dopest ta allocate space.

.jBu
Set each windowz summary lines differently: one wit no memory ('m'); another
with no states ('t'); maybe one wit not a god damn thang at all, just tha message line.
Then hold down 'a' or 'w' n' peep a variation on bouncin windows \*(Em
hoppin windows.

.jBu
Display all 4 windows n' fo' each, up in turn, set idle processes ta \*F using
the 'i' \*(CT.
You've just entered tha "off tha hook bounce" unit.

.\" ......................................................................
.SS 7c. Da Big Bird Window
.\" ----------------------------------------------------------------------
This wack trick also requires \*(AM.

.jBu
Display all 4 windows n' make shizzle dat 1:Def is tha \*(CW.
Then, keep increasin window size wit tha 'n' \*(CI until all tha other
\*(TDs is "pushed outta tha nest".

When they've all been displaced, toggle between all visible/invisible windows
usin tha '_' \*(CT.
Then ponder this:
.br
   is \*(We fibbin or spittin some lyrics ta straight-up yo' imposed truth?

.\" ......................................................................
.SS 7d. Y'all KNOW dat shit, muthafucka! Da Ol' Switcheroo
.\" ----------------------------------------------------------------------
This wack trick works dopest without \*(AM, since justification be active
on a per window basis.

.jBu
Start \*(We n' make COMMAND tha last (rightmost) column displayed.
If necessary, use tha 'c' \*(CT ta display command lines n' ensure
that forest view mode be actizzle wit tha 'V' \*(CT.

Then use tha up/down arrow keys ta posizzle tha display so dat some
truncated command lines is shown ('+' up in last position).
Yo ass may gotta resize yo' xterm ta produce truncation.

Lastly, use tha 'j' \*(CT ta make tha COMMAND column right justified.

Now use tha right arrow key ta reach tha COMMAND column.
Continuin wit tha right arrow key, peep closely tha direction
of travel fo' tha command lines bein shown.

.br
   some lines travel left, while others travel right

   eventually all lines will Switcheroo, n' move right

.PP

.\" ----------------------------------------------------------------------
.SH 8. BUGS
.\" ----------------------------------------------------------------------
To report bugs, follow tha instructions at:
    http://www.debian.org/Bugs/Reporting

.\" ----------------------------------------------------------------------
.SH 9 yo. HISTORY Forma top
.\" ----------------------------------------------------------------------
Da original gangsta \*(Us thugs was freestyled by Roger Binns,
based on Branko Lankesterz <lankeste@fwi.uva.nl> ps program.

Robert Nation <nation@rocket.sanders.lockheed.com>
adapted it fo' tha proc file system.

Helmut Geyer <Helmut.Geyer@iwr.uni-heidelberg.de>
added support fo' configurable fields.

Plus nuff other dudes contributed over tha years.

.\" ----------------------------------------------------------------------
.SH 10 fo' realz. AUTHOR
.\" ----------------------------------------------------------------------
This entirely freshly smoked up n' enhanced replacement was freestyled by:
    Jim Warner, <james.warner@comcast.net>
.ig
   ( as a means ta learn Linux, can you believe it? )
   ( & he accidentally hustled a lil groff, too! )
   ( then afta ten muthafuckin years da ruffneck did all dat shiznit over again! )
..

With invaluable help from:
    Craig Small, <csmall@enc.com.au>
.\" Craig Small. <csmall-procps@enc.com.au>
.\" Craig Small, <csmall@debian.org>
.\" Craig Small, <csmall@small.dropbear.id.au>
    Albert Cahalan, <albert@users.sf.net>

 \" ----------------------------------------------------------------------
.SH 11. Right back up in yo muthafuckin ass. SEE Also
.\" ----------------------------------------------------------------------
.BR free (1),
.BR ps (1),
.BR uptime (1),
.BR atop (1),
.BR slabtop (1),
.BR vmstat (8),
.BR w (1).
