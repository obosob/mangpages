.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5180DELTA 1"
.TH PERL5180DELTA 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5180delta \- what tha fuck is freshly smoked up fo' perl v5.18.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document raps bout differences between tha v5.16.0 release n' tha v5.18.0
release.
.PP
If yo ass is upgradin from a earlier release like fuckin v5.14.0, first read
perl5160delta, which raps bout differences between v5.14.0 n' v5.16.0.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "New mechanizzle fo' experimenstrual features"
.IX Subsection "New mechanizzle fo' experimenstrual features"
Newly-added experimenstrual features will now require dis incantation:
.PP
.Vb 2
\&    no warnings "experimental::feature_name";
\&    use feature "feature_name";  # would warn without tha prev line
.Ve
.PP
There be a freshly smoked up warnings category, called \*(L"experimental\*(R", containing
warnings dat tha feature pragma emits when enablin experimental
features.
.PP
Newly-added experimenstrual features will also be given special warnin IDs,
which consist of \*(L"experimental::\*(R" followed by tha name of tha feature.  (The
plan is ta extend dis mechanizzle eventually ta all warnings, ta allow them
to be enabled or disabled individually, n' not just by category.)
.PP
By saying
.PP
.Vb 1
\&    no warnings "experimental::feature_name";
.Ve
.PP
yo ass is takin responsibilitizzle fo' any breakage dat future chizzlez to, or
removal of, tha feature may cause.
.PP
Since some features (like \f(CW\*(C`~~\*(C'\fR or \f(CW\*(C`my $_\*(C'\fR) now emit experimenstrual warnings,
and you may wanna disable dem up in code dat be also run on perls dat do not
recognize these warnin categories, consider rockin tha \f(CW\*(C`if\*(C'\fR pragma like this:
.PP
.Vb 1
\&    no if $] >= 5.018, warnings => "experimental::feature_name";
.Ve
.PP
Existin experimenstrual features may begin emittin these warnings, like a muthafucka.  Please
consult perlexperiment fo' shiznit on which features is considered
experimental.
.SS "Hash overhaul"
.IX Subsection "Hash overhaul"
Changes ta tha implementation of hashes up in perl v5.18.0 is ghon be one of da most thugged-out
visible chizzlez ta tha behavior of existin code.
.PP
By default, two distinct hash variablez wit identical keys n' joints may now
provide they contents up in a gangbangin' finger-lickin' different order where dat shiznit was previously identical.
.PP
When encounterin these chizzles, tha key ta cleanin up from dem is ta accept
that \fBhashes is unordered collections\fR n' ta act accordingly.
.PP
\fIHash randomization\fR
.IX Subsection "Hash randomization"
.PP
Da seed used by Perlz hash function is now random.  This means dat the
order which keys/values is ghon be returned from functions like \f(CW\*(C`keys()\*(C'\fR,
\&\f(CW\*(C`values()\*(C'\fR, n' \f(CW\*(C`each()\*(C'\fR will differ from run ta run.
.PP
This chizzle was introduced ta make Perlz hashes mo' robust ta algorithmic
complexitizzle attacks, n' also cuz our phat asses discovered dat it exposes hash
orderin dependency bugs n' make dem easier ta track down.
.PP
Toolchain maintainers might wanna invest up in additionizzle infrastructure to
test fo' thangs like all dis bullshit.  Hustlin tests nuff muthafuckin times up in a row n' then
comparin thangs up in dis biatch will make it easier ta spot hash order dependencies in
code.  Authors is straight fuckin encouraged not ta expose tha key order of
Perlz hashes ta insecure crews.
.PP
Further, every last muthafuckin hash has its own iteration order, which should make it much
more hard as fuck ta determine what tha fuck tha current hash seed is.
.PP
\fINew hash functions\fR
.IX Subsection "New hash functions"
.PP
Perl v5.18 includes support fo' multiple hash functions, n' chizzled
the default (to \s-1ONE_AT_A_TIME_HARD\s0), you can chizzle a gangbangin' finger-lickin' different
algorithm by definin a symbol at compile time.  For a cold-ass lil current list,
consult tha \fI\s-1INSTALL\s0\fR document.  Note dat az of Perl v5.18 we can
only recommend use of tha default or \s-1SIPHASH.\s0 All tha others are
known ta have securitizzle thangs n' is fo' research purposes only.
.PP
\fI\s-1PERL_HASH_SEED\s0 environment variable now takes a hex value\fR
.IX Subsection "PERL_HASH_SEED environment variable now takes a hex value"
.PP
\&\f(CW\*(C`PERL_HASH_SEED\*(C'\fR no longer accepts a integer as a parameter;
instead tha value is sposed ta fuckin be a funky-ass binary value encoded up in a hex
string, like fuckin \*(L"0xf5867c55039dc724\*(R".  This is ta make the
infrastructure support hash seedz of arbitrary lengths, which might
exceed dat of a integer n' shit.  (SipHash uses a 16 byte seed.)
.PP
\fI\s-1PERL_PERTURB_KEYS\s0 environment variable added\fR
.IX Subsection "PERL_PERTURB_KEYS environment variable added"
.PP
Da \f(CW\*(C`PERL_PERTURB_KEYS\*(C'\fR environment variable allows one ta control tha level of
randomization applied ta \f(CW\*(C`keys\*(C'\fR n' playas.
.PP
When \f(CW\*(C`PERL_PERTURB_KEYS\*(C'\fR is 0, perl aint gonna randomize tha key order at all. The
chizzle dat \f(CW\*(C`keys\*(C'\fR chizzlez cuz of a bang is ghon be tha same as up in previous
perls, basically only when tha bucket size is chizzled.
.PP
When \f(CW\*(C`PERL_PERTURB_KEYS\*(C'\fR is 1, perl will randomize keys up in a non-repeatable
way. Da chizzle dat \f(CW\*(C`keys\*(C'\fR chizzlez cuz of a bang is ghon be straight-up high.  This
is da most thugged-out secure n' default mode.
.PP
When \f(CW\*(C`PERL_PERTURB_KEYS\*(C'\fR is 2, perl will randomize keys up in a repeatable way.
Repeated runz of tha same program should produce tha same output every last muthafuckin time.
.PP
\&\f(CW\*(C`PERL_HASH_SEED\*(C'\fR implies a non-default \f(CW\*(C`PERL_PERTURB_KEYS\*(C'\fR setting. Right back up in yo muthafuckin ass. Setting
\&\f(CW\*(C`PERL_HASH_SEED=0\*(C'\fR (exactly one 0) implies \f(CW\*(C`PERL_PERTURB_KEYS=0\*(C'\fR (hash key
randomization disabled); settng \f(CW\*(C`PERL_HASH_SEED\*(C'\fR ta any other value implies
\&\f(CW\*(C`PERL_PERTURB_KEYS=2\*(C'\fR (deterministic n' repeatable hash key randomization).
Specifyin \f(CW\*(C`PERL_PERTURB_KEYS\*(C'\fR explicitly ta a gangbangin' finger-lickin' different level overrides this
behavior.
.PP
\fI\fIHash::Util::hash_seed()\fI now returns a string\fR
.IX Subsection "Hash::Util::hash_seed() now returns a string"
.PP
\&\fIHash::Util::hash_seed()\fR now returns a strang instead of a integer n' shit.  This
is ta make tha infrastructure support hash seedz of arbitrary lengths
which might exceed dat of a integer n' shit.  (SipHash uses a 16 byte seed.)
.PP
\fIOutput of \s-1PERL_HASH_SEED_DEBUG\s0 has been chizzled\fR
.IX Subsection "Output of PERL_HASH_SEED_DEBUG has been chizzled"
.PP
Da environment variable \s-1PERL_HASH_SEED_DEBUG\s0 now make perl show both the
hash function perl was built with, \fIand\fR tha seed, up in hex, up in use fo' that
process. Code parsin dis output, should it exist, must chizzle ta accommodate
the freshly smoked up format.  Example of tha freshly smoked up format:
.PP
.Vb 2
\&    $ PERL_HASH_SEED_DEBUG=1 ./perl \-e1
\&    HASH_FUNCTION = MURMUR3 HASH_SEED = 0x1476bb9f
.Ve
.SS "Upgrade ta Unicode 6.2"
.IX Subsection "Upgrade ta Unicode 6.2"
Perl now supports Unicode 6.2.  A list of chizzlez from Unicode
6.1 be at <http://www.unicode.org/versions/Unicode6.2.0>.
.SS "Characta name aliases may now include non\-Latin1\-range characters"
.IX Subsection "Characta name aliases may now include non-Latin1-range characters"
It be possible ta define yo' own names fo' charactas fo' use in
\&\f(CW\*(C`\eN{...}\*(C'\fR, \f(CW\*(C`charnames::vianame()\*(C'\fR, etc.  These names can now be
comprised of charactas from tha whole Unicode range.  This allows for
names ta be up in yo' natizzle language, n' not just Gangsta.  Certain
restrictions apply ta tha charactas dat may be used (you can't define
a name dat has punctuation up in it, fo' example).  See \*(L"\s-1CUSTOM
ALIASES\*(R"\s0 up in charnames.
.SS "New DTrace probes"
.IX Subsection "New DTrace probes"
Da followin freshly smoked up DTrace probes done been added:
.IP "\(bu" 4
\&\f(CW\*(C`op\-entry\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`loading\-file\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`loaded\-file\*(C'\fR
.ie n .SS """${^LAST_FH}"""
.el .SS "\f(CW${^LAST_FH}\fP"
.IX Subsection "${^LAST_FH}"
This freshly smoked up variable serves up access ta tha filehandle dat was last read.
This is tha handle used by \f(CW$.\fR n' by \f(CW\*(C`tell\*(C'\fR n' \f(CW\*(C`eof\*(C'\fR without
arguments.
.SS "Regular Expression Set Operations"
.IX Subsection "Regular Expression Set Operations"
This be a \fBexperimental\fR feature ta allow matchin against tha union,
intersection, etc., of setz of code points, similar to
Unicode::Regex::Set.  It can also be used ta extend \f(CW\*(C`/x\*(C'\fR processing
to [bracketed] characta classes, n' as a replacement of user-defined
properties, allowin mo' complex expressions than they do.  See
\&\*(L"Extended Bracketed Characta Classes\*(R" up in perlrecharclass.
.SS "Lexical subroutines"
.IX Subsection "Lexical subroutines"
This freshly smoked up feature is still considered \fBexperimental\fR.  To enable it:
.PP
.Vb 3
\&    use 5.018;
\&    no warnings "experimental::lexical_subs";
\&    use feature "lexical_subs";
.Ve
.PP
Yo ass can now declare subroutines wit \f(CW\*(C`state sub foo\*(C'\fR, \f(CW\*(C`my sub foo\*(C'\fR, and
\&\f(CW\*(C`our sub foo\*(C'\fR.  (\f(CW\*(C`state sub\*(C'\fR requires dat tha \*(L"state\*(R" feature be
enabled, unless you write it as \f(CW\*(C`CORE::state sub foo\*(C'\fR.)
.PP
\&\f(CW\*(C`state sub\*(C'\fR creates a subroutine visible within tha lexical scope up in which
it is declared. Y'all KNOW dat shit, muthafucka!  Da subroutine is shared between calls ta tha outa sub.
.PP
\&\f(CW\*(C`my sub\*(C'\fR declares a lexical subroutine dat is pimped each time the
enclosin block is entered. Y'all KNOW dat shit, muthafucka!  \f(CW\*(C`state sub\*(C'\fR is generally slightly fasta than
\&\f(CW\*(C`my sub\*(C'\fR.
.PP
\&\f(CW\*(C`our sub\*(C'\fR declares a lexical alias ta tha package subroutine of tha same
name.
.PP
For mo' shiznit, peep \*(L"Lexical Subroutines\*(R" up in perlsub.
.SS "Computed Labels"
.IX Subsection "Computed Labels"
Da loop controls \f(CW\*(C`next\*(C'\fR, \f(CW\*(C`last\*(C'\fR n' \f(CW\*(C`redo\*(C'\fR, n' tha special \f(CW\*(C`dump\*(C'\fR
operator, now allow arbitrary expressions ta be used ta compute labels at run
time.  Previously, any argument dat was not a cold-ass lil constant was treated as the
empty string.
.SS "Mo' \s-1CORE::\s0 subs"
.IX Subsection "Mo' CORE:: subs"
Several mo' built-in functions done been added as subroutines ta the
\&\s-1CORE::\s0 namespace \- namely, dem non-overridable keywordz dat can be
implemented without custom parsers: \f(CW\*(C`defined\*(C'\fR, \f(CW\*(C`delete\*(C'\fR, \f(CW\*(C`exists\*(C'\fR,
\&\f(CW\*(C`glob\*(C'\fR, \f(CW\*(C`pos\*(C'\fR, \f(CW\*(C`protoytpe\*(C'\fR, \f(CW\*(C`scalar\*(C'\fR, \f(CW\*(C`split\*(C'\fR, \f(CW\*(C`study\*(C'\fR, n' \f(CW\*(C`undef\*(C'\fR.
.PP
As a shitload of these have prototypes, \f(CW\*(C`prototype(\*(AqCORE::...\*(Aq)\*(C'\fR has been
changed ta not cook up a gangbangin' finger-lickin' distinction between overridable n' non-overridable
keywords.  This is ta make \f(CW\*(C`prototype(\*(AqCORE::pos\*(Aq)\*(C'\fR consistent with
\&\f(CW\*(C`prototype(&CORE::pos)\*(C'\fR.
.ie n .SS """kill"" wit wack signal names"
.el .SS "\f(CWkill\fP wit wack signal names"
.IX Subsection "kill wit wack signal names"
\&\f(CW\*(C`kill\*(C'\fR has always allowed a wack signal number, which kills the
process crew instead of a single process.  It has also allowed signal
names.  But it did not behave consistently, cuz wack signal names
were treated as 0.  Now wack signals names like \f(CW\*(C`\-INT\*(C'\fR is supported
and treated tha same way as \-2 [perl #112990].
.SH "Security"
.IX Header "Security"
.SS "See also: hash overhaul"
.IX Subsection "See also: hash overhaul"
Some of tha chizzlez up in tha hash overhaul was made to
enhizzle security.  Please read dat section.
.ie n .SS """Storable"" securitizzle warnin up in documentation"
.el .SS "\f(CWStorable\fP securitizzle warnin up in documentation"
.IX Subsection "Storable securitizzle warnin up in documentation"
Da documentation fo' \f(CW\*(C`Storable\*(C'\fR now includes a section which warns readers
of tha dark shiznit of acceptin Storable documents from untrusted sources. The
short version is dat deserializin certain typez of data can lead ta loading
modulez n' other code execution. I aint talkin' bout chicken n' gravy biatch. This is documented behavior n' wanted
behavior yo, but dis opens a battle vector fo' malicious entities.
.ie n .SS """Locale::Maketext"" allowed code injection via a malicious template"
.el .SS "\f(CWLocale::Maketext\fP allowed code injection via a malicious template"
.IX Subsection "Locale::Maketext allowed code injection via a malicious template"
If playas could provide a translation strang ta Locale::Maketext, dis could be
used ta invoke arbitrary Perl subroutines available up in tha current process.
.PP
This has been fixed yo, but it is still possible ta invoke any method provided by
\&\f(CW\*(C`Locale::Maketext\*(C'\fR itself or a subclass dat yo ass is using. One of these
methodz up in turn will invoke tha Perl corez \f(CW\*(C`sprintf\*(C'\fR subroutine.
.PP
In summary, allowin playas ta provide translation strings without auditing
them be a wack idea.
.PP
This vulnerabilitizzle is documented up in \s-1CVE\-2012\-6329.\s0
.SS "Avoid callin memset wit a wack count"
.IX Subsection "Avoid callin memset wit a wack count"
Poorly freestyled perl code dat allows a attacker ta specify tha count ta perl's
\&\f(CW\*(C`x\*(C'\fR strang repeat operator can already cause a memory exhaustion
denial-of-service battle fo' realz. A flaw up in versionz of perl before v5.15.5 can escalate
that tha fuck into a heap buffer overrun; coupled wit versionz of glibc before 2.16, it
possibly allows tha execution of arbitrary code.
.PP
Da flaw addressed ta dis commit has been assigned identifier \s-1CVE\-2012\-5195\s0
and was researched by Slim Tim Brown.
.SH "Incompatible Chizzles"
.IX Header "Incompatible Chizzles"
.SS "See also: hash overhaul"
.IX Subsection "See also: hash overhaul"
Some of tha chizzlez up in tha hash overhaul is not fully
compatible wit previous versionz of perl.  Please read dat section.
.ie n .SS "An unknown characta name up in ""\eN{...}"" is now a syntax error"
.el .SS "An unknown characta name up in \f(CW\eN{...}\fP is now a syntax error"
.IX Subsection "An unknown characta name up in N{...} is now a syntax error"
Previously, it warned, n' tha Unicode \s-1REPLACEMENT CHARACTER\s0 was
substituted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Unicode now recommendz dat dis thang be a syntax
error. Shiiit, dis aint no joke.  Also, tha previous behavior hustled ta some confusin warnings and
behaviors, n' since tha \s-1REPLACEMENT CHARACTER\s0 has no use other than as
a stand-in fo' some unknown character, any code dat has dis problem is
buggy.
.ie n .SS "Formerly deprecated charactas up in ""\eN{}"" characta name aliases is now errors."
.el .SS "Formerly deprecated charactas up in \f(CW\eN{}\fP characta name aliases is now errors."
.IX Subsection "Formerly deprecated charactas up in N{} characta name aliases is now errors."
Since v5.12.0, it has been deprecated ta use certain charactas in
user-defined \f(CW\*(C`\eN{...}\*(C'\fR characta names.  These now cause a syntax
error. Shiiit, dis aint no joke.  For example, it is now a error ta begin a name wit a gangbangin' finger-lickin' digit,
like fuckin in
.PP
.Vb 1
\& mah $undraftable = "\eN{4F}";    # Syntax error!
.Ve
.PP
or ta have commas anywhere up in tha name.  See \*(L"\s-1CUSTOM ALIASES\*(R"\s0 up in charnames.
.ie n .SS """\eN{BELL}"" now refers ta U+1F514 instead of U+0007"
.el .SS "\f(CW\eN{BELL}\fP now refers ta U+1F514 instead of U+0007"
.IX Subsection "N{BELL} now refers ta U+1F514 instead of U+0007"
Unicode 6.0 reused tha name \*(L"\s-1BELL\*(R"\s0 fo' a gangbangin' finger-lickin' different code point than it
traditionally had meant.  Since Perl v5.14, use of dis name still
referred ta U+0007 yo, but would raise a thugged-out deprecation warning.  Now, \*(L"\s-1BELL\*(R"\s0
refers ta U+1F514, n' tha name fo' U+0007 is \*(L"\s-1ALERT\*(R". \s0 All the
functions up in charnames done been correspondingly updated.
.SS "New Restrictions up in Multi-Characta Case-Insensitizzle Matchin up in Regular Expression Bracketed Characta Classes"
.IX Subsection "New Restrictions up in Multi-Characta Case-Insensitizzle Matchin up in Regular Expression Bracketed Characta Classes"
Unicode has now withdrawn they previous recommendation fo' regular
expressions ta automatically handle cases where a single characta can
match multiple charactas case-insensitively, fo' example, tha letter
\&\s-1LATIN SMALL LETTER SHARP S\s0 n' tha sequence \f(CW\*(C`ss\*(C'\fR.  This is cuz
it turns up ta be impracticable ta do dis erectly up in all
circumstances.  Because Perl has tried ta do dis as dopest it can, it
will continue ta do so.  (We is thankin bout a option ta turn it off.)
But fuck dat shiznit yo, tha word on tha street is dat a freshly smoked up restriction is bein added on such matches when they
occur up in [bracketed] characta classes.  Muthafuckas was specifying
things like fuckin \f(CW\*(C`/[\e0\-\exff]/i\*(C'\fR, n' bein surprised dat it matches the
two characta sequence \f(CW\*(C`ss\*(C'\fR (since \s-1LATIN SMALL LETTER SHARP S\s0 occurs in
this range).  This behavior be also inconsistent wit rockin a
property instead of a range:  \f(CW\*(C`\ep{Block=Latin1}\*(C'\fR also includes \s-1LATIN
SMALL LETTER SHARP S,\s0 but \f(CW\*(C`/[\ep{Block=Latin1}]/i\*(C'\fR do not match \f(CW\*(C`ss\*(C'\fR.
Da freshly smoked up rule is dat fo' there ta be a multi-characta case-insensitive
match within a funky-ass bracketed characta class, tha characta must be
explicitly listed, n' not as a end point of a range.  This more
closely obeys tha Principle of Least Astonishment.  See
\&\*(L"Bracketed Characta Classes\*(R" up in perlrecharclass.  Note dat a funky-ass bug [perl
#89774], now fixed as part of dis chizzle, prevented tha previous
behavior from hustlin fully.
.SS "Explicit rulez fo' variable names n' identifiers"
.IX Subsection "Explicit rulez fo' variable names n' identifiers"
Cuz of a oversight, single characta variable names up in v5.16 were
completely unrestricted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This opened tha door ta nuff muthafuckin kindz of
insanity.  Az of v5.18, these now follow tha rulez of other identifiers,
in addizzle ta acceptin charactas dat match tha \f(CW\*(C`\ep{POSIX_Punct}\*(C'\fR
property.
.PP
There is no longer any difference up in tha parsin of identifiers
specified by rockin braces versus without braces.  For instance, perl
used ta allow \f(CW\*(C`${foo:bar}\*(C'\fR (with a single colon) but not \f(CW$foo:bar\fR.
Now dat both is handled by a single code path, they is both treated
the same way: both is forbidden. I aint talkin' bout chicken n' gravy biatch.  Note dat dis chizzle be bout the
range of permissible literal identifiers, not other expressions.
.SS "Vertical tabs is now whitespace"
.IX Subsection "Vertical tabs is now whitespace"
No one could recall why \f(CW\*(C`\es\*(C'\fR didn't match \f(CW\*(C`\ecK\*(C'\fR, tha vertical tab.
Now it do.  Given tha off tha hook raritizzle of dat character, straight-up lil
breakage is expected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  That holla'd, herez what tha fuck it means:
.PP
\&\f(CW\*(C`\es\*(C'\fR up in a regex now matches a vertical tab up in all circumstances.
.PP
Literal vertical tabs up in a regex literal is ignored when tha \f(CW\*(C`/x\*(C'\fR
modifier is used.
.PP
Leadin vertical tabs, ridin' solo or mixed wit other whitespace, is now
ignored when interpretin a strang as a number n' shit.  For example:
.PP
.Vb 2
\&  $dec = " \ecK \et 123";
\&  $hex = " \ecK \et 0xF";
\&
\&  say 0 + $dec;   # was 0 wit warning, now 123
\&  say int $dec;   # was 0, now 123
\&  say oct $hex;   # was 0, now  15
.Ve
.ie n .SS """/(?{})/"" n' ""/(??{})/"" done been heavily reworked"
.el .SS "\f(CW/(?{})/\fP n' \f(CW/(??{})/\fP done been heavily reworked"
.IX Subsection "/(?{})/ n' /(??{})/ done been heavily reworked"
Da implementation of dis feature has been almost straight-up rewritten.
Although its main intent is ta fix bugs, some behaviors, especially
related ta tha scope of lexical variables, gonna git chizzled. Y'all KNOW dat shit, muthafucka!  This is
busted lyrics bout mo' straight-up up in tha \*(L"Selected Bug Fixes\*(R" section.
.SS "Stricta parsin of substitution replacement"
.IX Subsection "Stricta parsin of substitution replacement"
It be no longer possible ta abuse tha way tha parser parses \f(CW\*(C`s///e\*(C'\fR like
this:
.PP
.Vb 3
\&    %_=(_,"Just another ");
\&    $_="Perl hacker,\en";
\&    s//_}\->{_/e;print
.Ve
.ie n .SS """given"" now aliases tha global $_"
.el .SS "\f(CWgiven\fP now aliases tha global \f(CW$_\fP"
.IX Subsection "given now aliases tha global $_"
Instead of assignin ta a implicit lexical \f(CW$_\fR, \f(CW\*(C`given\*(C'\fR now make the
global \f(CW$_\fR a alias fo' its argument, just like \f(CW\*(C`foreach\*(C'\fR.  But fuck dat shiznit yo, tha word on tha street is dat it
still uses lexical \f(CW$_\fR if there is lexical \f(CW$_\fR up in scope (again, just like
\&\f(CW\*(C`foreach\*(C'\fR) [perl #114020].
.SS "Da smartmatch crew of features is now experimental"
.IX Subsection "Da smartmatch crew of features is now experimental"
Smart match, added up in v5.10.0 n' hella revised up in v5.10.1, has been
a regular point of complaint.  Although there be a fuckin shitload of ways up in which
it is useful, it has also proven problematic n' confusin fo' both playas and
implementorz of Perl.  There done been a fuckin shitload of proposals on how tha fuck ta best
address tha problem.  It be clear dat smartmatch be almost certainly either
goin ta chizzle or go away up in tha future.  Relyin on its current behavior
is not recommended.
.PP
Warnings will now be issued when tha parser sees \f(CW\*(C`~~\*(C'\fR, \f(CW\*(C`given\*(C'\fR, or \f(CW\*(C`when\*(C'\fR.
To disable these warnings, you can add dis line ta tha appropriate scope:
.PP
.Vb 1
\&  no if $] >= 5.018, warnings => "experimental::smartmatch";
.Ve
.PP
Consider, though, replacin tha use of these features, as they may chizzle
behavior again n' again n' again before becomin stable.
.ie n .SS "Lexical $_ is now experimental"
.el .SS "Lexical \f(CW$_\fP is now experimental"
.IX Subsection "Lexical $_ is now experimental"
Since dat shiznit was introduced up in Perl v5.10, it has caused much mad drama wit no
obvious solution:
.IP "\(bu" 4
Various modulez (e.g., List::Util) expect callback routines ta use the
global \f(CW$_\fR.  \f(CW\*(C`use List::Util \*(Aqfirst\*(Aq; mah $_; first { $_ == 1 } @list\*(C'\fR
does not work as one would expect.
.IP "\(bu" 4
A \f(CW\*(C`my $_\*(C'\fR declaration earlier up in tha same file can cause confusin closure
warnings.
.IP "\(bu" 4
Da \*(L"_\*(R" subroutine prototype characta allows called subroutines ta access
your lexical \f(CW$_\fR, so it aint straight-up private afta all.
.IP "\(bu" 4
Nevertheless, subroutines wit a \*(L"(@)\*(R" prototype n' methodz cannot access
the callerz lexical \f(CW$_\fR, unless they is freestyled up in \s-1XS.\s0
.IP "\(bu" 4
But even \s-1XS\s0 routines cannot access a lexical \f(CW$_\fR declared, not up in the
callin subroutine yo, but up in a outa scope, iff dat subroutine happened not
to mention \f(CW$_\fR or use any operators dat default ta \f(CW$_\fR.
.PP
It be our hope dat lexical \f(CW$_\fR can be rehabilitated yo, but dis may
cause chizzlez up in its behavior. Shiiit, dis aint no joke.  Please use it wit caution until it
becomes stable.
.ie n .SS "\fIreadline()\fP wit ""$/ = \eN"" now readz N characters, not N bytes"
.el .SS "\fIreadline()\fP wit \f(CW$/ = \eN\fP now readz N characters, not N bytes"
.IX Subsection "readline() wit $/ = N now readz N characters, not N bytes"
Previously, when readin from a stream wit I/O layers such as
\&\f(CW\*(C`encoding\*(C'\fR, tha \fIreadline()\fR function, otherwise known as tha \f(CW\*(C`<>\*(C'\fR
operator, would read \fIN\fR bytes from tha top-most layer n' shit. [perl #79960]
.PP
Now, \fIN\fR charactas is read instead.
.PP
There is no chizzle up in behaviour when readin from streams wit no
extra layers, since bytes map exactly ta characters.
.ie n .SS "Overridden ""glob"" is now passed one argument"
.el .SS "Overridden \f(CWglob\fP is now passed one argument"
.IX Subsection "Overridden glob is now passed one argument"
\&\f(CW\*(C`glob\*(C'\fR overrides used ta be passed a magical undocumented second argument
that identified tha calla n' shit.  Nothang on \s-1CPAN\s0 was rockin this, n' it gots in
the way of a funky-ass bug fix, so dat shiznit was removed. Y'all KNOW dat shit, muthafucka!  If you straight-up need ta identify
the caller, peep Devel::Callsite on \s-1CPAN.\s0
.SS "Here doc parsing"
.IX Subsection "Here doc parsing"
Da body of a here document inside a quote-like operator now always begins
on tha line afta tha \*(L"<<foo\*(R" marker n' shit.  Previously, dat shiznit was documented to
begin on tha line followin tha containin quote-like operator yo, but that
was only sometimes tha case [perl #114040].
.SS "Alphanumeric operators must now be separated from tha closin delimita of regular expressions"
.IX Subsection "Alphanumeric operators must now be separated from tha closin delimita of regular expressions"
Yo ass may no longer write suttin' like:
.PP
.Vb 1
\& m/a/and 1
.Ve
.PP
Instead you must write
.PP
.Vb 1
\& m/a/ n' 1
.Ve
.PP
with whitespace separatin tha operator from tha closin delimita of
the regular expression. I aint talkin' bout chicken n' gravy biatch.  Not havin whitespace has resulted up in a
deprecation warnin since Perl v5.14.0.
.SS "qw(...) can no longer be used as parentheses"
.IX Subsection "qw(...) can no longer be used as parentheses"
\&\f(CW\*(C`qw\*(C'\fR lists used ta fool tha parser tha fuck into thankin they was always
surrounded by parentheses.  This permitted some surprisin constructions
like fuckin \f(CW\*(C`foreach $x qw(a b c) {...}\*(C'\fR, which should straight-up be written
\&\f(CW\*(C`foreach $x (qw(a b c)) {...}\*(C'\fR.  These would sometimes git tha lexer into
the wack state, so they didn't straight-up work, n' tha similar \f(CW\*(C`foreach qw(a
b c) {...}\*(C'\fR dat one might expect ta be permitted never hit dat shiznit at all.
.PP
This side effect of \f(CW\*(C`qw\*(C'\fR has now been abolished. Y'all KNOW dat shit, muthafucka!  It has been deprecated
since Perl v5.13.11.  It be now necessary ta use real parentheses
everywhere dat tha grammar calls fo' em.
.SS "Interaction of lexical n' default warnings"
.IX Subsection "Interaction of lexical n' default warnings"
Turnin on any lexical warnings used first ta disable all default warnings
if lexical warnings was not already enabled:
.PP
.Vb 3
\&    $*; # deprecation warning
\&    use warnings "void";
\&    $#; # void warning; no deprecation warning
.Ve
.PP
Now, tha \f(CW\*(C`debugging\*(C'\fR, \f(CW\*(C`deprecated\*(C'\fR, \f(CW\*(C`glob\*(C'\fR, \f(CW\*(C`inplace\*(C'\fR n' \f(CW\*(C`malloc\*(C'\fR warnings
categories is left on when turnin on lexical warnings (unless they are
turned off by \f(CW\*(C`no warnings\*(C'\fR, of course).
.PP
This may cause deprecation warnings ta occur up in code dat used ta be free
of warnings.
.PP
Those is tha only categories consistin only of default warnings.  Default
warnings up in other categories is still disabled by \f(CW\*(C`use warnings "category"\*(C'\fR,
as our phat asses do not yet have tha infrastructure fo' controlling
individual warnings.
.ie n .SS """state sub"" n' ""our sub"""
.el .SS "\f(CWstate sub\fP n' \f(CWour sub\fP"
.IX Subsection "state sub n' our sub"
Cuz of a accident of history, \f(CW\*(C`state sub\*(C'\fR n' \f(CW\*(C`our sub\*(C'\fR was equivalent
to a plain \f(CW\*(C`sub\*(C'\fR, so one could even create a anonymous sub with
\&\f(CW\*(C`our sub { ... }\*(C'\fR.  These is now disallowed outside of tha \*(L"lexical_subs\*(R"
feature.  Under tha \*(L"lexical_subs\*(R" feature they have freshly smoked up meanings busted lyrics about
in \*(L"Lexical Subroutines\*(R" up in perlsub.
.SS "Defined joints stored up in environment is forced ta byte strings"
.IX Subsection "Defined joints stored up in environment is forced ta byte strings"
A value stored up in a environment variable has always been stringified. Y'all KNOW dat shit, muthafucka!  In this
release, it is converted ta be only a funky-ass byte string.  First, it is forced ta be
only a string.  Then if tha strang is utf8 n' tha equivalent of
\&\f(CW\*(C`utf8::downgrade()\*(C'\fR works, dat result is used; otherwise, tha equivalent of
\&\f(CW\*(C`utf8::encode()\*(C'\fR is used, n' a warnin is issued bout wide characters
(\*(L"Diagnostics\*(R").
.ie n .SS """require"" takes a thugged-out dirt nap fo' unreadable files"
.el .SS "\f(CWrequire\fP takes a thugged-out dirt nap fo' unreadable files"
.IX Subsection "require takes a thugged-out dirt nap fo' unreadable files"
When \f(CW\*(C`require\*(C'\fR encountas a unreadable file, it now dies. Put ya muthafuckin choppers up if ya feel dis!  It used to
ignore tha file n' continue searchin tha directories up in \f(CW@INC\fR
[perl #113422].
.ie n .SS """gv_fetchmeth_*"" n' \s-1SUPER\s0"
.el .SS "\f(CWgv_fetchmeth_*\fP n' \s-1SUPER\s0"
.IX Subsection "gv_fetchmeth_* n' SUPER"
Da various \f(CW\*(C`gv_fetchmeth_*\*(C'\fR \s-1XS\s0 functions used ta treat a package whose
named ended wit \f(CW\*(C`::SUPER\*(C'\fR specially.  A method lookup on tha \f(CW\*(C`Foo::SUPER\*(C'\fR
package would be treated as a \f(CW\*(C`SUPER\*(C'\fR method lookup on tha \f(CW\*(C`Foo\*(C'\fR package.  This
is no longer tha case.  To do a \f(CW\*(C`SUPER\*(C'\fR lookup, pass tha \f(CW\*(C`Foo\*(C'\fR stash n' the
\&\f(CW\*(C`GV_SUPER\*(C'\fR flag.
.ie n .SS """split""z first argument is mo' consistently interpreted"
.el .SS "\f(CWsplit\fPz first argument is mo' consistently interpreted"
.IX Subsection "splitz first argument is mo' consistently interpreted"
Afta some chizzlez earlier up in v5.17, \f(CW\*(C`split\*(C'\fRz behavior has been
simplified: if tha \s-1PATTERN\s0 argument evaluates ta a string
containin one space, it is treated tha way dat a \fIliteral\fR string
containin one space once was.
.SH "Deprecations"
.IX Header "Deprecations"
.SS "Module removals"
.IX Subsection "Module removals"
Da followin modulez is ghon be removed from tha core distribution up in a gangbangin' future
release, n' will at dat time need ta be installed from \s-1CPAN.\s0 Distributions
on \s-1CPAN\s0 which require these modulez will need ta list dem as prerequisites.
.PP
Da core versionz of these modulez will now issue \f(CW"deprecated"\fR\-category
warnings ta alert you ta dis fact. To silence these deprecation warnings,
install tha modulez up in question from \s-1CPAN.\s0
.PP
Note dat these is (with rare exceptions) fine modulez dat yo ass is encouraged
to continue ta use. Their disinclusion from core primarily hinges on their
necessitizzle ta bootstrappin a gangbangin' straight-up functional, CPAN-capable Perl installation,
not probably on concerns over they design.
.IP "encoding" 4
.IX Item "encoding"
Da use of dis pragma is now straight fuckin discouraged. Y'all KNOW dat shit, muthafucka! Well shiiiit, it conflates tha encoding
of source text wit tha encodin of I/O data, reinterprets escape sequences in
source text (a questionable chizzle), n' introduces tha \s-1UTF\-8\s0 bug ta all runtime
handlin of characta strings. Well shiiiit, it is fucked up as designed n' beyond repair.
.Sp
For rockin non-ASCII literal charactas up in source text, please refer ta utf8.
For dealin wit textual I/O data, please refer ta Encode n' open.
.IP "Archive::Extract" 4
.IX Item "Archive::Extract"
.PD 0
.IP "B::Lint" 4
.IX Item "B::Lint"
.IP "B::Lint::Debug" 4
.IX Item "B::Lint::Debug"
.ie n .IP "\s-1CPANPLUS\s0 n' all included ""CPANPLUS::*"" modules" 4
.el .IP "\s-1CPANPLUS\s0 n' all included \f(CWCPANPLUS::*\fR modules" 4
.IX Item "CPANPLUS n' all included CPANPLUS::* modules"
.IP "Devel::InnerPackage" 4
.IX Item "Devel::InnerPackage"
.IP "Log::Message" 4
.IX Item "Log::Message"
.IP "Log::Message::Config" 4
.IX Item "Log::Message::Config"
.IP "Log::Message::Handlezs" 4
.IX Item "Log::Message::Handlezs"
.IP "Log::Message::Item" 4
.IX Item "Log::Message::Item"
.IP "Log::Message::Simple" 4
.IX Item "Log::Message::Simple"
.IP "Module::Pluggable" 4
.IX Item "Module::Pluggable"
.IP "Module::Pluggable::Object" 4
.IX Item "Module::Pluggable::Object"
.IP "Object::Accessor" 4
.IX Item "Object::Accessor"
.IP "Pod::LaTeX" 4
.IX Item "Pod::LaTeX"
.IP "Term::UI" 4
.IX Item "Term::UI"
.IP "Term::UI::History" 4
.IX Item "Term::UI::History"
.PD
.SS "Deprecated Utilities"
.IX Subsection "Deprecated Utilities"
Da followin utilitizzles is ghon be removed from tha core distribution up in a
future release as they associated modulez done been deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. They
will remain available wit tha applicable \s-1CPAN\s0 distribution.
.IP "cpanp" 4
.IX Item "cpanp"
.PD 0
.ie n .IP """cpanp\-run\-perl""" 4
.el .IP "\f(CWcpanp\-run\-perl\fR" 4
.IX Item "cpanp-run-perl"
.IP "cpan2dist" 4
.IX Item "cpan2dist"
.PD
These shit is part of tha \f(CW\*(C`CPANPLUS\*(C'\fR distribution.
.IP "pod2latex" 4
.IX Item "pod2latex"
This item is part of tha \f(CW\*(C`Pod::LaTeX\*(C'\fR distribution.
.SS "PL_sv_objcount"
.IX Subsection "PL_sv_objcount"
This interpreter-global variable used ta track tha total number of
Perl objects up in tha interpreter n' shit. Well shiiiit, it is no longer maintained n' will
be removed altogether up in Perl v5.20.
.ie n .SS "Five additionizzle charactas should be escaped up in patterns wit ""/x"""
.el .SS "Five additionizzle charactas should be escaped up in patterns wit \f(CW/x\fP"
.IX Subsection "Five additionizzle charactas should be escaped up in patterns wit /x"
When a regular expression pattern is compiled wit \f(CW\*(C`/x\*(C'\fR, Perl treats 6
charactas as white space ta ignore, like fuckin \s-1SPACE\s0 n' \s-1TAB. \s0 However,
Unicode recommendz 11 charactas be treated thusly.  Us thugs will conform
with dis up in a gangbangin' future Perl version. I aint talkin' bout chicken n' gravy biatch.  In tha meantime, use of any of the
missin charactas will raise a thugged-out deprecation warning, unless turned off.
Da five charactas are:
.PP
.Vb 5
\&    U+0085 NEXT LINE
\&    U+200E LEFT\-TO\-RIGHT MARK
\&    U+200F RIGHT\-TO\-LEFT MARK
\&    U+2028 LINE SEPARATOR
\&    U+2029 PARAGRAPH SEPARATOR
.Ve
.SS "User-defined charnames wit surprisin whitespace"
.IX Subsection "User-defined charnames wit surprisin whitespace"
A user-defined characta name wit trailin or multiple spaces up in a row is
likely a typo.  This now generates a warnin when defined, on tha assumption
that usez of it is ghon be unlikely ta include tha excess whitespace.
.SS "Various XS-callable functions is now deprecated"
.IX Subsection "Various XS-callable functions is now deprecated"
All tha functions used ta classify charactas is ghon be removed from a
future version of Perl, n' should not be used. Y'all KNOW dat shit, muthafucka!  With participatin C
compilaz (e.g., gcc), compilin any file dat uses any of these will
generate a warning.  These was not intended fo' hood use; there are
equivalent, faster, macros fo' most of em.
.PP
See \*(L"Characta classes\*(R" up in perlapi.  Da complete list is:
.PP
\&\f(CW\*(C`is_uni_alnum\*(C'\fR, \f(CW\*(C`is_uni_alnumc\*(C'\fR, \f(CW\*(C`is_uni_alnumc_lc\*(C'\fR,
\&\f(CW\*(C`is_uni_alnum_lc\*(C'\fR, \f(CW\*(C`is_uni_alpha\*(C'\fR, \f(CW\*(C`is_uni_alpha_lc\*(C'\fR,
\&\f(CW\*(C`is_uni_ascii\*(C'\fR, \f(CW\*(C`is_uni_ascii_lc\*(C'\fR, \f(CW\*(C`is_uni_blank\*(C'\fR,
\&\f(CW\*(C`is_uni_blank_lc\*(C'\fR, \f(CW\*(C`is_uni_cntrl\*(C'\fR, \f(CW\*(C`is_uni_cntrl_lc\*(C'\fR,
\&\f(CW\*(C`is_uni_digit\*(C'\fR, \f(CW\*(C`is_uni_digit_lc\*(C'\fR, \f(CW\*(C`is_uni_graph\*(C'\fR,
\&\f(CW\*(C`is_uni_graph_lc\*(C'\fR, \f(CW\*(C`is_uni_idfirst\*(C'\fR, \f(CW\*(C`is_uni_idfirst_lc\*(C'\fR,
\&\f(CW\*(C`is_uni_lower\*(C'\fR, \f(CW\*(C`is_uni_lower_lc\*(C'\fR, \f(CW\*(C`is_uni_print\*(C'\fR,
\&\f(CW\*(C`is_uni_print_lc\*(C'\fR, \f(CW\*(C`is_uni_punct\*(C'\fR, \f(CW\*(C`is_uni_punct_lc\*(C'\fR,
\&\f(CW\*(C`is_uni_space\*(C'\fR, \f(CW\*(C`is_uni_space_lc\*(C'\fR, \f(CW\*(C`is_uni_upper\*(C'\fR,
\&\f(CW\*(C`is_uni_upper_lc\*(C'\fR, \f(CW\*(C`is_uni_xdigit\*(C'\fR, \f(CW\*(C`is_uni_xdigit_lc\*(C'\fR,
\&\f(CW\*(C`is_utf8_alnum\*(C'\fR, \f(CW\*(C`is_utf8_alnumc\*(C'\fR, \f(CW\*(C`is_utf8_alpha\*(C'\fR,
\&\f(CW\*(C`is_utf8_ascii\*(C'\fR, \f(CW\*(C`is_utf8_blank\*(C'\fR, \f(CW\*(C`is_utf8_char\*(C'\fR,
\&\f(CW\*(C`is_utf8_cntrl\*(C'\fR, \f(CW\*(C`is_utf8_digit\*(C'\fR, \f(CW\*(C`is_utf8_graph\*(C'\fR,
\&\f(CW\*(C`is_utf8_idcont\*(C'\fR, \f(CW\*(C`is_utf8_idfirst\*(C'\fR, \f(CW\*(C`is_utf8_lower\*(C'\fR,
\&\f(CW\*(C`is_utf8_mark\*(C'\fR, \f(CW\*(C`is_utf8_perl_space\*(C'\fR, \f(CW\*(C`is_utf8_perl_word\*(C'\fR,
\&\f(CW\*(C`is_utf8_posix_digit\*(C'\fR, \f(CW\*(C`is_utf8_print\*(C'\fR, \f(CW\*(C`is_utf8_punct\*(C'\fR,
\&\f(CW\*(C`is_utf8_space\*(C'\fR, \f(CW\*(C`is_utf8_upper\*(C'\fR, \f(CW\*(C`is_utf8_xdigit\*(C'\fR,
\&\f(CW\*(C`is_utf8_xidcont\*(C'\fR, \f(CW\*(C`is_utf8_xidfirst\*(C'\fR.
.PP
In addizzle these three functions dat have never hit dat shiznit properly are
deprecated:
\&\f(CW\*(C`to_uni_lower_lc\*(C'\fR, \f(CW\*(C`to_uni_title_lc\*(C'\fR, n' \f(CW\*(C`to_uni_upper_lc\*(C'\fR.
.SS "Certain rare usez of backslashes within regexes is now deprecated"
.IX Subsection "Certain rare usez of backslashes within regexes is now deprecated"
There is three pairz of charactas dat Perl recognizes as
metacharactas up in regular expression patterns: \f(CW\*(C`{}\*(C'\fR, \f(CW\*(C`[]\*(C'\fR, n' \f(CW\*(C`()\*(C'\fR.
These can be used as well ta delimit patterns, as in:
.PP
.Vb 2
\&  m{foo}
\&  s(foo)(bar)
.Ve
.PP
Since they is metacharacters, they have special meanin ta regular
expression patterns, n' it turns up dat you can't turn off that
special meanin by tha aiiight meanz of precedin dem wit a funky-ass backslash,
if you use them, paired, within a pattern delimited by em.  For
example, in
.PP
.Vb 1
\&  m{foo\e{1,3\e}}
.Ve
.PP
the backslashes do not chizzle tha behavior, n' dis matches
\&\f(CW"f\ o"\fR followed by one ta three mo' occurrencez of \f(CW"o"\fR.
.PP
Usages like this, where they is interpreted as metacharacters, are
exceedingly rare; we be thinkin there be none, fo' example, up in all of \s-1CPAN.\s0
Hence, dis deprecation should affect straight-up lil code.  It do give
notice, however, dat any such code need ta chizzle, which will up in turn
allow our asses ta chizzle tha behavior up in future Perl versions so dat the
backslashes do have a effect, n' without fear dat we is silently
breakin any existin code.
.ie n .SS "Splittin tha tokens ""(?"" n' ""(*"" up in regular expressions"
.el .SS "Splittin tha tokens \f(CW(?\fP n' \f(CW(*\fP up in regular expressions"
.IX Subsection "Splittin tha tokens (? n' (* up in regular expressions"
A deprecation warnin is now raised if tha \f(CW\*(C`(\*(C'\fR n' \f(CW\*(C`?\*(C'\fR is separated
by white space or comments up in \f(CW\*(C`(?...)\*(C'\fR regular expression constructs.
Similarly, if tha \f(CW\*(C`(\*(C'\fR n' \f(CW\*(C`*\*(C'\fR is separated up in \f(CW\*(C`(*VERB...)\*(C'\fR
constructs.
.SS "Pre-PerlIO \s-1IO\s0 implementations"
.IX Subsection "Pre-PerlIO IO implementations"
In theory, you can currently build perl without PerlIO.  Instead, you'd use a
wrapper round stdio or sfio.  In practice, dis aint straight-up useful naaahhmean?  It aint nuthin but not
well tested, n' without any support fo' \s-1IO\s0 layers or (thus) Unicode, itz not
much of a perl.  Buildin without PerlIO will most likely be removed up in the
next version of perl.
.PP
PerlIO supports a \f(CW\*(C`stdio\*(C'\fR layer if stdio use is desired. Y'all KNOW dat shit, muthafucka!  Similarly a
sfio layer could be produced up in tha future, if needed.
.SH "Future Deprecations"
.IX Header "Future Deprecations"
.IP "\(bu" 4
Platforms without support infrastructure
.Sp
Both Windows \s-1CE\s0 n' z/OS done been historically under-maintained, n' are
currently neither successfully buildin nor regularly bein smoke tested.
Efforts is underway ta chizzle dis thang yo, but it should not be taken for
granted dat tha platforms is safe n' supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If they do not become
buildable n' regularly smoked, support fo' dem may be actively removed in
future releases.  If you have a interest up in these platforms n' you can lend
your time, expertise, or hardware ta help support these platforms, please let
the perl pimpment effort know by emailin \f(CW\*(C`perl5\-porters@perl.org\*(C'\fR.
.Sp
Some platforms dat step tha fuck up otherwise entirely dead is also on tha short list
for removal between now n' v5.20.0:
.RS 4
.IP "\s-1DG/UX\s0" 4
.IX Item "DG/UX"
.PD 0
.IP "NeXT" 4
.IX Item "NeXT"
.RE
.RS 4
.PD
.Sp
We also be thinkin it likely dat current versionz of Perl will no longer
build AmigaOS, \s-1DJGPP,\s0 NetWare (natively), \s-1OS/2\s0 n' Plan 9. If you
are rockin Perl on such a platform n' have a interest up in ensuring
Perlz future on them, please hollar at our asses.
.Sp
We believe dat Perl has long been unable ta build on mixed endian
architectures (like fuckin PDP\-11s), n' intend ta remove any remaining
support code. Right back up in yo muthafuckin ass. Similarly, code supportin tha long umaintained \s-1GNU\s0
dld is ghon be removed soon if no-one make theyselves known as an
actizzle user.
.RE
.IP "\(bu" 4
Swappin of $< n' $>
.Sp
Perl has supported tha idiom of swappin $< n' $> (and likewise $( and
$)) ta temporarily drop permissions since 5.0, like this:
.Sp
.Vb 1
\&    ($<, $>) = ($>, $<);
.Ve
.Sp
But fuck dat shiznit yo, tha word on tha street is dat dis idiom modifies tha real user/group id, which can have
undesirable side-effects, is no longer useful on any platform perl
supports n' complicates tha implementation of these variablez n' list
assignment up in general.
.Sp
As a alternative, assignment only ta \f(CW$>\fR is recommended:
.Sp
.Vb 1
\&    local $> = $<;
.Ve
.Sp
See also: Setuid Demystified <http://www.cs.berkeley.edu/~daw/papers/setuid-usenix02.pdf>.
.IP "\(bu" 4
\&\f(CW\*(C`microperl\*(C'\fR, long fucked up n' of unclear present purpose, is ghon be removed.
.IP "\(bu" 4
Revampin \f(CW"\eQ"\fR semantics up in double-quotish strings when combined with
other escapes.
.Sp
There is nuff muthafuckin bugs n' inconsistencies involvin combinations
of \f(CW\*(C`\eQ\*(C'\fR n' escapes like \f(CW\*(C`\ex\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, etc., within a \f(CW\*(C`\eQ...\eE\*(C'\fR pair.
These need ta be fixed, n' bustin so will necessarily chizzle current
behavior. Shiiit, dis aint no joke.  Da chizzlez aint yet been settled.
.IP "\(bu" 4
Use of \f(CW$x\fR, where \f(CW\*(C`x\*(C'\fR standz fo' any actual (non-printing) C0 control
characta is ghon be disallowed up in a gangbangin' future Perl version. I aint talkin' bout chicken n' gravy biatch.  Use \f(CW\*(C`${x}\*(C'\fR
instead (where again n' again n' again \f(CW\*(C`x\*(C'\fR standz fo' a cold-ass lil control character),
or better, \f(CW$^A\fR , where \f(CW\*(C`^\*(C'\fR be a cold-ass lil caret (\s-1CIRCUMFLEX ACCENT\s0),
and \f(CW\*(C`A\*(C'\fR standz fo' any of tha charactas listed all up in tha end of
\&\*(L"\s-1OPERATOR DIFFERENCES\*(R"\s0 up in perlebcdic.
.SH "Performizzle Enhancements"
.IX Header "Performizzle Enhancements"
.IP "\(bu" 4
Listz of lexical variable declarations (\f(CW\*(C`my($x, $y)\*(C'\fR) is now optimised
down ta a single op n' is hence fasta than before.
.IP "\(bu" 4
A freshly smoked up C preprocessor define \f(CW\*(C`NO_TAINT_SUPPORT\*(C'\fR was added that, if set,
disablez Perlz taint support altogether n' shit.  Usin tha \-T or \-t command
line flags will cause a gangbangin' fatal error. Shiiit, dis aint no joke.  Beware dat both core tests as
well as nuff a \s-1CPAN\s0 distributionz tests will fail wit dis chizzle.  On
the upside, it serves up a lil' small-ass performizzle benefit cuz of reduced
branching.
.Sp
\&\fBDo not enable dis unless you know exactly what tha fuck yo ass is gettin yo ass
into.\fR
.IP "\(bu" 4
\&\f(CW\*(C`pack\*(C'\fR wit constant arguments is now constant folded up in most cases
[perl #113470].
.IP "\(bu" 4
Speed up in regular expression matchin against Unicode properties. Put ya muthafuckin choppers up if ya feel dis!  The
largest bust is fo' \f(CW\*(C`\eX\*(C'\fR, tha Unicode \*(L"extended grapheme cluster.\*(R"  The
gain fo' it be bout 35% \- 40%.  Bracketed characta classes, e.g.,
\&\f(CW\*(C`[0\-9\ex{100}]\*(C'\fR containin code points above 255 is also now faster.
.IP "\(bu" 4
On platforms supportin it, nuff muthafuckin forma macros is now implemented as static
inline functions. This should speed thangs up slightly on non-GCC platforms.
.IP "\(bu" 4
Da optimisation of hashes up in boolean context has been extended to
affect \f(CW\*(C`scalar(%hash)\*(C'\fR, \f(CW\*(C`%hash ? ... : ...\*(C'\fR, n' \f(CW\*(C`sub { %hash || ... }\*(C'\fR.
.IP "\(bu" 4
Filetest operators manage tha stack up in a gangbangin' fractionally mo' efficient manner.
.IP "\(bu" 4
Globs used up in a numeric context is now numified directly up in most cases,
rather than bein numified via stringification.
.IP "\(bu" 4
Da \f(CW\*(C`x\*(C'\fR repetizzle operator is now folded ta a single constant at compile
time if called up in scalar context wit constant operandz n' no parentheses
around tha left operand.
.SH "Modulez n' Pragmata"
.IX Header "Modulez n' Pragmata"
.SS "New Modulez n' Pragmata"
.IX Subsection "New Modulez n' Pragmata"
.IP "\(bu" 4
Config::Perl::V version 0.16 has been added as a thugged-out dual-lifed module.
It serves up structured data retrieval of \f(CW\*(C`perl \-V\*(C'\fR output including
information only known ta tha \f(CW\*(C`perl\*(C'\fR binary n' not available via Config.
.SS "Updated Modulez n' Pragmata"
.IX Subsection "Updated Modulez n' Pragmata"
For a cold-ass lil complete list of thugged-out shit, run:
.PP
.Vb 1
\&  $ corelist \-\-diff 5.16.0 5.18.0
.Ve
.PP
Yo ass can substitute yo' straight-up version up in place of \f(CW5.16.0\fR, like a muthafucka.
.IP "\(bu" 4
Archive::Extract has been upgraded ta 0.68.
.Sp
Work round a edge case on Linux wit Busyboxz unzip.
.IP "\(bu" 4
Archive::Tar has been upgraded ta 1.90.
.Sp
ptar now supports tha \-T option as well as dashless options
[rt.cpan.org #75473], [rt.cpan.org #75475].
.Sp
Auto-encode filenames marked as \s-1UTF\-8\s0 [rt.cpan.org #75474].
.Sp
Don't use \f(CW\*(C`tell\*(C'\fR on IO::Zlib handlez [rt.cpan.org #64339].
.Sp
Don't try ta \f(CW\*(C`chown\*(C'\fR on symlinks.
.IP "\(bu" 4
autodie has been upgraded ta 2.13.
.Sp
\&\f(CW\*(C`autodie\*(C'\fR now skits sickly wit tha 'open' pragma.
.IP "\(bu" 4
B has been upgraded ta 1.42.
.Sp
Da \f(CW\*(C`stashoff\*(C'\fR method of COPs has been added. Y'all KNOW dat shit, muthafucka!   This serves up access ta an
internal field added up in perl 5.16 under threaded buildz [perl #113034].
.Sp
\&\f(CW\*(C`B::COP::stashpv\*(C'\fR now supports \s-1UTF\-8\s0 package names n' embedded NULs.
.Sp
All \f(CW\*(C`CVf_*\*(C'\fR n' \f(CW\*(C`GVf_*\*(C'\fR
and mo' SV-related flag joints is now provided as constants up in tha \f(CW\*(C`B::\*(C'\fR
namespace n' available fo' export.  Da default export list has not chizzled.
.Sp
This make tha module work wit tha freshly smoked up pad \s-1API.\s0
.IP "\(bu" 4
B::Concise has been upgraded ta 0.95.
.Sp
Da \f(CW\*(C`\-nobanner\*(C'\fR option has been fixed, n' \f(CW\*(C`format\*(C'\fRs can now be dumped.
When passed a sub name ta dump, it will check also ta peep whether it
is tha name of a gangbangin' format.  If a sub n' a gangbangin' format share tha same name,
it will dump both.
.Sp
This addz support fo' tha freshly smoked up \f(CW\*(C`OpMAYBE_TRUEBOOL\*(C'\fR n' \f(CW\*(C`OPpTRUEBOOL\*(C'\fR flags.
.IP "\(bu" 4
B::Debug has been upgraded ta 1.18.
.Sp
This addz support (experimentally) fo' \f(CW\*(C`B::PADLIST\*(C'\fR, which was
added up in Perl 5.17.4.
.IP "\(bu" 4
B::Deparse has been upgraded ta 1.20.
.Sp
Avoid warnin when run under \f(CW\*(C`perl \-w\*(C'\fR.
.Sp
It now deparses
loop controls wit tha erect precedence, n' multiple statements up in a
\&\f(CW\*(C`format\*(C'\fR line is also now deparsed erectly.
.Sp
This release suppresses trailin semicolons up in formats.
.Sp
This release addz stub deparsin fo' lexical subroutines.
.Sp
It no longer takes a thugged-out dirt nap when deparsin \f(CW\*(C`sort\*(C'\fR without arguments, n' you can put dat on yo' toast.  It now
correctly omits tha comma fo' \f(CW\*(C`system $prog @args\*(C'\fR n' \f(CW\*(C`exec $prog
@args\*(C'\fR.
.IP "\(bu" 4
bignum, bigint n' bigrat done been upgraded ta 0.33.
.Sp
Da overrides fo' \f(CW\*(C`hex\*(C'\fR n' \f(CW\*(C`oct\*(C'\fR done been rewritten, eliminating
several problems, n' makin one incompatible chizzle:
.RS 4
.IP "\(bu" 4
Formerly, whichever of \f(CW\*(C`use bigint\*(C'\fR or \f(CW\*(C`use bigrat\*(C'\fR was compiled later
would take precedence over tha other, causin \f(CW\*(C`hex\*(C'\fR n' \f(CW\*(C`oct\*(C'\fR not to
respect tha other pragma when up in scope.
.IP "\(bu" 4
Usin any of these three pragmata would cause \f(CW\*(C`hex\*(C'\fR n' \f(CW\*(C`oct\*(C'\fR anywhere
else up in tha program ta evalute they arguments up in list context n' prevent
them from inferrin \f(CW$_\fR when called without arguments.
.IP "\(bu" 4
Usin any of these three pragmata would make \f(CW\*(C`oct("1234")\*(C'\fR return 1234
(for any number not beginnin wit 0) anywhere up in tha program.  Now \*(L"1234\*(R"
is translated from octal ta decimal, whether within tha pragmaz scope or
not.
.IP "\(bu" 4
Da global overrides dat facilitate lexical use of \f(CW\*(C`hex\*(C'\fR n' \f(CW\*(C`oct\*(C'\fR now
respect any existin overrides dat was up in place before tha freshly smoked up overrides
were installed, fallin back ta dem outside of tha scope of \f(CW\*(C`use bignum\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`use bignum "hex"\*(C'\fR, \f(CW\*(C`use bignum "oct"\*(C'\fR n' similar invocations fo' bigint
and bigrat now export a \f(CW\*(C`hex\*(C'\fR or \f(CW\*(C`oct\*(C'\fR function, instead of providin a
global override.
.RE
.RS 4
.RE
.IP "\(bu" 4
Carp has been upgraded ta 1.29.
.Sp
Carp is no longer trippin when \f(CW\*(C`caller\*(C'\fR returns undef fo' a package that
has been deleted.
.Sp
Da \f(CW\*(C`longmess()\*(C'\fR n' \f(CW\*(C`shortmess()\*(C'\fR functions is now documented.
.IP "\(bu" 4
\&\s-1CGI\s0 has been upgraded ta 3.63.
.Sp
Unrecognized \s-1HTML\s0 escape sequences is now handled better, problematic
trailin newlines is no longer banged afta <form> tags
by \f(CW\*(C`startform()\*(C'\fR or \f(CW\*(C`start_form()\*(C'\fR, n' bogus \*(L"Insecure Dependency\*(R"
warnings appearin wit some versionz of perl is now hit dat shiznit around.
.IP "\(bu" 4
Class::Struct has been upgraded ta 0.64.
.Sp
Da constructor now respects overridden accessor methodz [perl #29230].
.IP "\(bu" 4
Compress::Raw::Bzip2 has been upgraded ta 2.060.
.Sp
Da misuse of Perlz \*(L"magic\*(R" \s-1API\s0 has been fixed.
.IP "\(bu" 4
Compress::Raw::Zlib has been upgraded ta 2.060.
.Sp
Upgrade bundled zlib ta version 1.2.7.
.Sp
Fix build failures on Irix, Solaris, n' Win32, n' also when buildin as \*(C+
[rt.cpan.org #69985], [rt.cpan.org #77030], [rt.cpan.org #75222].
.Sp
Da misuse of Perlz \*(L"magic\*(R" \s-1API\s0 has been fixed.
.Sp
\&\f(CW\*(C`compress()\*(C'\fR, \f(CW\*(C`uncompress()\*(C'\fR, \f(CW\*(C`memGzip()\*(C'\fR n' \f(CW\*(C`memGunzip()\*(C'\fR have
been speeded up by makin parameta validation mo' efficient.
.IP "\(bu" 4
CPAN::Meta::Requirements has been upgraded ta 2.122.
.Sp
Treat undef requirements ta \f(CW\*(C`from_string_hash\*(C'\fR as 0 (with a warning).
.Sp
Added \f(CW\*(C`requirements_for_module\*(C'\fR method.
.IP "\(bu" 4
\&\s-1CPANPLUS\s0 has been upgraded ta 0.9135.
.Sp
Allow addin \fIblib/script\fR ta \s-1PATH.\s0
.Sp
Save tha history between invocationz of tha shell.
.Sp
Handle multiple \f(CW\*(C`makemakerargs\*(C'\fR n' \f(CW\*(C`makeflags\*(C'\fR arguments better.
.Sp
This resolves thangs wit tha SQLite source engine.
.IP "\(bu" 4
Data::Dumper has been upgraded ta 2.145.
.Sp
It has been optimized ta only build a seen-scalar hash as necessary,
thereby speedin up serialization drastically.
.Sp
Additionizzle tests was added up in order ta improve statement, branch, condition
and subroutine coverage.  On tha basiz of tha coverage analysis, a shitload of the
internalz of Dumper.pm was refactored. Y'all KNOW dat shit, muthafucka!  Almost all methodz is now
documented.
.IP "\(bu" 4
DB_File has been upgraded ta 1.827.
.Sp
Da main Perl module no longer uses tha \f(CW"@_"\fR construct.
.IP "\(bu" 4
Devel::Peek has been upgraded ta 1.11.
.Sp
This fixes compilation wit \*(C+ compilaz n' make tha module work with
the freshly smoked up pad \s-1API.\s0
.IP "\(bu" 4
Digest::MD5 has been upgraded ta 2.52.
.Sp
Fix \f(CW\*(C`Digest::Perl::MD5\*(C'\fR \s-1OO\s0 fallback [rt.cpan.org #66634].
.IP "\(bu" 4
Digest::SHA has been upgraded ta 5.84.
.Sp
This fixes a thugged-out double-free bug, which might have caused vulnerabilities
in some cases.
.IP "\(bu" 4
DynaLoader has been upgraded ta 1.18.
.Sp
This is cuz of a minor code chizzle up in tha \s-1XS\s0 fo' tha \s-1VMS\s0 implementation.
.Sp
This fixes warnings bout rockin \f(CW\*(C`CODE\*(C'\fR sections without a \f(CW\*(C`OUTPUT\*(C'\fR
section.
.IP "\(bu" 4
Encode has been upgraded ta 2.49.
.Sp
Da Mac alias x\-mac-ce has been added, n' various bugs done been fixed
in Encode::Unicode, Encode::UTF7 n' Encode::GSM0338.
.IP "\(bu" 4
Env has been upgraded ta 1.04.
.Sp
Its \s-1SPLICE\s0 implementation no longer misbehaves up in list context.
.IP "\(bu" 4
ExtUtils::CBuilder has been upgraded ta 0.280210.
.Sp
Manifest filez is now erectly embedded fo' dem versionz of \s-1VC++\s0 which
make use of em. [perl #111782, #111798].
.Sp
A list of symbols ta export can now be passed ta \f(CW\*(C`link()\*(C'\fR when on
Windows, as on other OSes [perl #115100].
.IP "\(bu" 4
ExtUtils::ParseXS has been upgraded ta 3.18.
.Sp
Da generated C code now avoidz unnecessarily incrementing
\&\f(CW\*(C`PL_amagic_generation\*(C'\fR on Perl versions where itz done automatically
(or on current Perl where tha variable no longer exists).
.Sp
This avoidz a funky-ass bogus warnin fo' initialised \s-1XSUB\s0 non-parametas [perl
#112776].
.IP "\(bu" 4
File::Copy has been upgraded ta 2.26.
.Sp
\&\f(CW\*(C`copy()\*(C'\fR no longer zeros filez when copyin tha fuck into tha same directory,
and also now fails (as it has long been documented ta do) when attempting
to copy a gangbangin' file over itself.
.IP "\(bu" 4
File::DosGlob has been upgraded ta 1.10.
.Sp
Da internal cache of file names dat it keeps fo' each calla is now
freed when dat calla is freed. Y'all KNOW dat shit, muthafucka!  This means
\&\f(CW\*(C`use File::DosGlob \*(Aqglob\*(Aq; eval \*(Aqscalar <*>\*(Aq\*(C'\fR no longer leaks memory.
.IP "\(bu" 4
File::Fetch has been upgraded ta 0.38.
.Sp
Added tha 'file_default' option fo' URLs dat aint gots a gangbangin' file
component.
.Sp
Use \f(CW\*(C`File::HomeDir\*(C'\fR when available, n' provide \f(CW\*(C`PERL5_CPANPLUS_HOME\*(C'\fR to
override tha autodetection.
.Sp
Always re-fetch \fI\s-1CHECKSUMS\s0\fR if \f(CW\*(C`fetchdir\*(C'\fR is set.
.IP "\(bu" 4
File::Find has been upgraded ta 1.23.
.Sp
This fixes inconsistent unixy path handlin on \s-1VMS.\s0
.Sp
Individual filez may now step tha fuck up in list of directories ta be searched
[perl #59750].
.IP "\(bu" 4
File::Glob has been upgraded ta 1.20.
.Sp
File::Glob has had exactly tha same fix as File::DosGlob.  Since it is
what Perlz own \f(CW\*(C`glob\*(C'\fR operator itself uses (except on \s-1VMS\s0), dis means
\&\f(CW\*(C`eval \*(Aqscalar <*>\*(Aq\*(C'\fR no longer leaks.
.Sp
A space-separated list of patterns return long listz of thangs up in dis biatch no longer
results up in memory corruption or crashes.  This bug was introduced in
Perl 5.16.0.  [perl #114984]
.IP "\(bu" 4
File::Spec::Unix has been upgraded ta 3.40.
.Sp
\&\f(CW\*(C`abs2rel\*(C'\fR could produce incorrect thangs up in dis biatch when given two relatizzle paths or
the root directory twice [perl #111510].
.IP "\(bu" 4
File::stat has been upgraded ta 1.07.
.Sp
\&\f(CW\*(C`File::stat\*(C'\fR ignores tha filetest pragma, n' warns when used in
combination therewith.  But dat shiznit was not warnin fo' \f(CW\*(C`\-r\*(C'\fR.  This has been
fixed [perl #111640].
.Sp
\&\f(CW\*(C`\-p\*(C'\fR now works, n' do not return false fo' pipes [perl #111638].
.Sp
Previously \f(CW\*(C`File::stat\*(C'\fRz overloaded \f(CW\*(C`\-x\*(C'\fR n' \f(CW\*(C`\-X\*(C'\fR operators did not give
the erect thangs up in dis biatch fo' directories or executable filez when hustlin as
root. They had been treatin executable permissions fo' root just like for
any other user, struttin crew membershizzle tests \fIetc\fR fo' filez not owned
by root. They now follow tha erect Unix behaviour \- fo' a gangbangin' finger-lickin' directory they
are always true, n' fo' a gangbangin' file if any of tha three execute permission bits
are set then they report dat root can execute tha file. Perlz builtin
\&\f(CW\*(C`\-x\*(C'\fR n' \f(CW\*(C`\-X\*(C'\fR operators have always been erect.
.IP "\(bu" 4
File::Temp has been upgraded ta 0.23
.Sp
Fixes various bugs involvin directory removal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Defers unlinkin tempfilez if
the initial unlink fails, which fixes problems on \s-1NFS.\s0
.IP "\(bu" 4
GDBM_File has been upgraded ta 1.15.
.Sp
Da undocumented optionizzle fifth parameta ta \f(CW\*(C`TIEHASH\*(C'\fR has been
removed. Y'all KNOW dat shit, muthafucka! This was intended ta provide control of tha callback used by
\&\f(CW\*(C`gdbm*\*(C'\fR functions up in case of fatal errors (like fuckin filesystem problems),
but did not work (and could never have worked). No code on \s-1CPAN\s0 even
attempted ta use dat shit. Da callback is now always tha previous default,
\&\f(CW\*(C`croak\*(C'\fR. Problems on some platforms wit how tha fuck tha \f(CW\*(C`C\*(C'\fR \f(CW\*(C`croak\*(C'\fR function
is called have also been resolved.
.IP "\(bu" 4
Hash::Util has been upgraded ta 0.15.
.Sp
\&\f(CW\*(C`hash_unlocked\*(C'\fR n' \f(CW\*(C`hashref_unlocked\*(C'\fR now returns legit if tha hash is
unlocked, instead of always returnin false [perl #112126].
.Sp
\&\f(CW\*(C`hash_unlocked\*(C'\fR, \f(CW\*(C`hashref_unlocked\*(C'\fR, \f(CW\*(C`lock_hash_recurse\*(C'\fR and
\&\f(CW\*(C`unlock_hash_recurse\*(C'\fR is now exportable [perl #112126].
.Sp
Two freshly smoked up functions, \f(CW\*(C`hash_locked\*(C'\fR n' \f(CW\*(C`hashref_locked\*(C'\fR, done been added.
Oddly enough, these two functions was already exported, even though they
did not exist [perl #112126].
.IP "\(bu" 4
HTTP::Tiny has been upgraded ta 0.025.
.Sp
Add \s-1SSL\s0 verification features [github #6], [github #9].
.Sp
Include tha final \s-1URL\s0 up in tha response hashref.
.Sp
Add \f(CW\*(C`local_address\*(C'\fR option.
.Sp
This improves \s-1SSL\s0 support.
.IP "\(bu" 4
\&\s-1IO\s0 has been upgraded ta 1.28.
.Sp
\&\f(CW\*(C`sync()\*(C'\fR can now be called on read-only file handlez [perl #64772].
.Sp
IO::Socket tries harder ta cache or otherwise fetch socket
information.
.IP "\(bu" 4
IPC::Cmd has been upgraded ta 0.80.
.Sp
Use \f(CW\*(C`POSIX::_exit\*(C'\fR instead of \f(CW\*(C`exit\*(C'\fR up in \f(CW\*(C`run_forked\*(C'\fR [rt.cpan.org #76901].
.IP "\(bu" 4
IPC::Open3 has been upgraded ta 1.13.
.Sp
Da \f(CW\*(C`open3()\*(C'\fR function no longer uses \f(CW\*(C`POSIX::close()\*(C'\fR ta close file
descriptors since dat breaks tha ref-countin of file descriptors done by
PerlIO up in cases where tha file descriptors is shared by PerlIO streams,
leadin ta attempts ta close tha file descriptors a second time when
any such PerlIO streams is closed lata on.
.IP "\(bu" 4
Locale::Codes has been upgraded ta 3.25.
.Sp
It includes some freshly smoked up codes.
.IP "\(bu" 4
Memoize has been upgraded ta 1.03.
.Sp
Fix tha \f(CW\*(C`MERGE\*(C'\fR cache option.
.IP "\(bu" 4
Module::Build has been upgraded ta 0.4003.
.Sp
Fixed bug where modulez without \f(CW$VERSION\fR might gotz a version of '0' listed
in 'provides' metadata, which is ghon be rejected by \s-1PAUSE.\s0
.Sp
Fixed bug up in PodParser ta allow numerals up in module names.
.Sp
Fixed bug where givin arguments twice hustled ta dem becomin arrays, resulting
in install paths like \fI\s-1\fIARRAY\s0\fI\|(0xdeadbeef)/lib/Foo.pm\fR.
.Sp
A minor bug fix allows markup ta be used round tha leadin \*(L"Name\*(R" in
a \s-1POD \s0\*(L"abstract\*(R" line, n' some documentation improvements done been made.
.IP "\(bu" 4
Module::CoreList has been upgraded ta 2.90
.Sp
Version shiznit is now stored as a thugged-out delta, which pimped outly reduces the
size of tha \fICoreList.pm\fR file.
.Sp
This restores compatibilitizzle wit olda versionz of perl n' cleans up
the corelist data fo' various modules.
.IP "\(bu" 4
Module::Load::Conditionizzle has been upgraded ta 0.54.
.Sp
Fix use of \f(CW\*(C`requires\*(C'\fR on perls installed ta a path wit spaces.
.Sp
Various enhancements include tha freshly smoked up use of Module::Metadata.
.IP "\(bu" 4
Module::Metadata has been upgraded ta 1.000011.
.Sp
Da creation of a Module::Metadata object fo' a typical module file has
been sped up by bout 40%, n' some spurious warnings bout \f(CW$VERSION\fRs
have been suppressed.
.IP "\(bu" 4
Module::Pluggable has been upgraded ta 4.7.
.Sp
Amongst other chizzles, triggers is now allowed on events, which gives
a bangin way ta modify behaviour.
.IP "\(bu" 4
Net::Pin has been upgraded ta 2.41.
.Sp
This fixes some test failures on Windows.
.IP "\(bu" 4
Opcode has been upgraded ta 1.25.
.Sp
Reflect tha removal of tha boolkeys opcode n' tha addizzle of the
clonecv, introcv n' padcv opcodes.
.IP "\(bu" 4
overload has been upgraded ta 1.22.
.Sp
\&\f(CW\*(C`no overload\*(C'\fR now warns fo' invalid arguments, just like \f(CW\*(C`use overload\*(C'\fR.
.IP "\(bu" 4
PerlIO::encodin has been upgraded ta 0.16.
.Sp
This is tha module implementin tha \*(L":encoding(...)\*(R" I/O layer n' shit.  It no
longer corrupts memory or crashes when tha encodin back-end reallocates
the buffer or gives it a typeglob or shared hash key scalar.
.IP "\(bu" 4
PerlIO::scalar has been upgraded ta 0.16.
.Sp
Da buffer scalar supplied may now only contain code pounts 0xFF or
lower n' shit. [perl #109828]
.IP "\(bu" 4
Perl::OSType has been upgraded ta 1.003.
.Sp
This fixes a funky-ass bug detectin tha \s-1VOS\s0 operatin system.
.IP "\(bu" 4
Pod::Html has been upgraded ta 1.18.
.Sp
Da option \f(CW\*(C`\-\-libpods\*(C'\fR has been reinstated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Well shiiiit, it is deprecated, n' its use
does not a god damn thang other than issue a warnin dat it is no longer supported.
.Sp
Since tha \s-1HTML\s0 filez generated by pod2html claim ta git a \s-1UTF\-8\s0 charset,
actually write tha filez up rockin \s-1UTF\-8\s0 [perl #111446].
.IP "\(bu" 4
Pod::Simple has been upgraded ta 3.28.
.Sp
Numerous improvements done been made, mostly ta Pod::Simple::XHTML,
which also has a cold-ass lil compatibilitizzle chizzle: tha \f(CW\*(C`codes_in_verbatim\*(C'\fR option
is now disabled by default.  See \fIcpan/Pod\-Simple/ChangeLog\fR fo' the
full details.
.IP "\(bu" 4
re has been upgraded ta 0.23
.Sp
Single characta [class]es like \f(CW\*(C`/[s]/\*(C'\fR or \f(CW\*(C`/[s]/i\*(C'\fR is now optimized
as if they did not have tha brackets, i.e. \f(CW\*(C`/s/\*(C'\fR or \f(CW\*(C`/s/i\*(C'\fR.
.Sp
See note bout \f(CW\*(C`op_comp\*(C'\fR up in tha \*(L"Internal Chizzles\*(R" section below.
.IP "\(bu" 4
Safe has been upgraded ta 2.35.
.Sp
Fix interactions wit \f(CW\*(C`Devel::Cover\*(C'\fR.
.Sp
Don't eval code under \f(CW\*(C`no strict\*(C'\fR.
.IP "\(bu" 4
Scalar::Util has been upgraded ta version 1.27.
.Sp
Fix a overloadin issue wit \f(CW\*(C`sum\*(C'\fR.
.Sp
\&\f(CW\*(C`first\*(C'\fR n' \f(CW\*(C`reduce\*(C'\fR now check tha callback first (so \f(CW&first(1)\fR is
disallowed).
.Sp
Fix \f(CW\*(C`tainted\*(C'\fR on magical joints [rt.cpan.org #55763].
.Sp
Fix \f(CW\*(C`sum\*(C'\fR on previously magical joints [rt.cpan.org #61118].
.Sp
Fix readin past tha end of a gangbangin' fixed buffer [rt.cpan.org #72700].
.IP "\(bu" 4
Search::Dict has been upgraded ta 1.07.
.Sp
No longer require \f(CW\*(C`stat\*(C'\fR on filehandles.
.Sp
Use \f(CW\*(C`fc\*(C'\fR fo' casefolding.
.IP "\(bu" 4
Socket has been upgraded ta 2.009.
.Sp
Constants n' functions required fo' \s-1IP\s0 multicast source crew membership
have been added.
.Sp
\&\f(CW\*(C`unpack_sockaddr_in()\*(C'\fR n' \f(CW\*(C`unpack_sockaddr_in6()\*(C'\fR now return just tha \s-1IP\s0
address up in scalar context, n' \f(CW\*(C`inet_ntop()\*(C'\fR now guardz against incorrect
length scalars bein passed in.
.Sp
This fixes a uninitialized memory read.
.IP "\(bu" 4
Storable has been upgraded ta 2.41.
.Sp
Modifyin \f(CW$_[0]\fR within \f(CW\*(C`STORABLE_freeze\*(C'\fR no longer thangs up in dis biatch up in crashes
[perl #112358].
.Sp
An object whose class implements \f(CW\*(C`STORABLE_attach\*(C'\fR is now thawed only once
when there be multiple references ta it up in tha structure bein thawed
[perl #111918].
.Sp
Restricted hashes was not always thawed erectly [perl #73972].
.Sp
Storable would croak when freezin a pimped \s-1REF\s0 object wit a
\&\f(CW\*(C`STORABLE_freeze()\*(C'\fR method [perl #113880].
.Sp
It can now freeze n' thaw vstrings erectly.  This causes a slight
incompatible chizzle up in tha storage format, so tha format version has
increased ta 2.9.
.Sp
This gotz nuff various bugfixes, includin compatibilitizzle fixes fo' older
versionz of Perl n' vstrin handling.
.IP "\(bu" 4
Sys::Syslog has been upgraded ta 0.32.
.Sp
This gotz nuff nuff muthafuckin bug fixes relatin ta \f(CW\*(C`getservbyname()\*(C'\fR,
\&\f(CW\*(C`setlogsock()\*(C'\fRand log levels up in \f(CW\*(C`syslog()\*(C'\fR, together wit fixes for
Windows, Haiku-OS n' GNU/kFreeBSD.  See \fIcpan/Sys\-Syslog/Changes\fR
for tha full details.
.IP "\(bu" 4
Term::ANSIColor has been upgraded ta 4.02.
.Sp
Add support fo' italics.
.Sp
Improve error handling.
.IP "\(bu" 4
Term::ReadLine has been upgraded ta 1.10.  This fixes the
use of tha \fBcpan\fR n' \fBcpanp\fR shells on Windows up in tha event dat tha current
drive happens ta contain a \fI\edev\etty\fR file.
.IP "\(bu" 4
Test::Harnizz has been upgraded ta 3.26.
.Sp
Fix glob semantics on Win32 [rt.cpan.org #49732].
.Sp
Don't use \f(CW\*(C`Win32::GetShortPathName\*(C'\fR when callin perl [rt.cpan.org #47890].
.Sp
Ignore \-T when readin shebang [rt.cpan.org #64404].
.Sp
Handle tha case where our phat asses don't give a fuck tha wait statuz of tha test more
gracefully.
.Sp
Make tha test summary 'ok' line overridable so dat it can be chizzled ta a
plugin ta make tha output of prove idempotent.
.Sp
Don't run ghetto-writable files.
.IP "\(bu" 4
Text::Tabs n' Text::Wrap done been upgraded to
2012.0818.  Support fo' Unicode combinin charactas has been added ta them
both.
.IP "\(bu" 4
threads::shared has been upgraded ta 1.31.
.Sp
This addz tha option ta warn bout or ignore attempts ta clone structures
that can't be cloned, as opposed ta just unconditionally dyin in
that case.
.Sp
This addz support fo' dual-valued joints as pimped by
Scalar::Util::dualvar.
.IP "\(bu" 4
Tie::StdHandle has been upgraded ta 4.3.
.Sp
\&\f(CW\*(C`READ\*(C'\fR now respects tha offset argument ta \f(CW\*(C`read\*(C'\fR [perl #112826].
.IP "\(bu" 4
Time::Local has been upgraded ta 1.2300.
.Sp
Secondz joints pimped outa than 59 but less than 60 no longer cause
\&\f(CW\*(C`timegm()\*(C'\fR n' \f(CW\*(C`timelocal()\*(C'\fR ta croak.
.IP "\(bu" 4
Unicode::UCD has been upgraded ta 0.53.
.Sp
This addz a gangbangin' function \fIall_casefolds()\fR
that returns all tha casefolds.
.IP "\(bu" 4
Win32 has been upgraded ta 0.47.
.Sp
New APIs done been added fo' gettin n' settin tha current code page.
.SS "Removed Modulez n' Pragmata"
.IX Subsection "Removed Modulez n' Pragmata"
.IP "\(bu" 4
Version::Requirements has been removed from tha core distribution. I aint talkin' bout chicken n' gravy biatch.  It is
available under a gangbangin' finger-lickin' different name: CPAN::Meta::Requirements.
.SH "Documentation"
.IX Header "Documentation"
.SS "Changes ta Existin Documentation"
.IX Subsection "Changes ta Existin Documentation"
\fIperlcheat\fR
.IX Subsection "perlcheat"
.IP "\(bu" 4
perlcheat has been reorganized, n' all dem freshly smoked up sections was added.
.PP
\fIperldata\fR
.IX Subsection "perldata"
.IP "\(bu" 4
Now explicitly documents tha behaviour of hash initializer lists that
contain duplicate keys.
.PP
\fIperldiag\fR
.IX Subsection "perldiag"
.IP "\(bu" 4
Da explanation of symbolic references bein prevented by \*(L"strict refs\*(R"
now don't assume dat tha reader knows what tha fuck symbolic references are.
.PP
\fIperlfaq\fR
.IX Subsection "perlfaq"
.IP "\(bu" 4
perlfaq has been synchronized wit version 5.0150040 from \s-1CPAN.\s0
.PP
\fIperlfunc\fR
.IX Subsection "perlfunc"
.IP "\(bu" 4
Da return value of \f(CW\*(C`pipe\*(C'\fR is now documented.
.IP "\(bu" 4
Clarified documentation of \f(CW\*(C`our\*(C'\fR.
.PP
\fIperlop\fR
.IX Subsection "perlop"
.IP "\(bu" 4
Loop control verbs (\f(CW\*(C`dump\*(C'\fR, \f(CW\*(C`goto\*(C'\fR, \f(CW\*(C`next\*(C'\fR, \f(CW\*(C`last\*(C'\fR n' \f(CW\*(C`redo\*(C'\fR) have always
had tha same precedence as assignment operators yo, but dis was not documented
until now, nahmeean?
.PP
\fIDiagnostics\fR
.IX Subsection "Diagnostics"
.PP
Da followin additions or chizzlez done been made ta diagnostic output,
includin warnings n' fatal error lyrics.  For tha complete list of
diagnostic lyrics, peep perldiag.
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
\fINew Errors\fR
.IX Subsection "New Errors"
.IP "\(bu" 4
Unterminated delimita fo' here document
.Sp
This message now occurs when a here document label has a initial quotation
mark but tha final quotation mark is missing.
.Sp
This replaces a funky-ass bogus n' misleadin error message bout not findin tha label
itself [perl #114104].
.IP "\(bu" 4
panic: lil pimp pseudo-process was never scheduled
.Sp
This error is thrown when a cold-ass lil lil pimp pseudo-process up in tha ithreadz implementation
on Windows was not scheduled within tha time period allowed n' therefore was
not able ta initialize properly [perl #88840].
.IP "\(bu" 4
Group name must start wit a non-digit word characta up in regex; marked by <\-\- \s-1HERE\s0 up in m/%s/
.Sp
This error has been added fo' \f(CW\*(C`(?&0)\*(C'\fR, which is invalid. Y'all KNOW dat shit, muthafucka!  It used to
produce a incomprehensible error message [perl #101666].
.IP "\(bu" 4
Can't use a undefined value as a subroutine reference
.Sp
Callin a undefined value as a subroutine now produces dis error message.
It used ta yo, but was accidentally disabled, first up in Perl 5.004 for
non-magical variables, n' then up in Perl v5.14 fo' magical (e.g., tied)
variables.  It has now been restored. Y'all KNOW dat shit, muthafucka!  In tha mean time, undef was treated
as a empty strang [perl #113576].
.IP "\(bu" 4
Experimenstrual \*(L"%s\*(R" subs not enabled
.Sp
To use lexical subs, you must first enable them:
.Sp
.Vb 3
\&    no warnings \*(Aqexperimental::lexical_subs\*(Aq;
\&    use feature \*(Aqlexical_subs\*(Aq;
\&    mah sub foo { ... }
.Ve
.PP
\fINew Warnings\fR
.IX Subsection "New Warnings"
.IP "\(bu" 4
\&'Strings wit code points over 0xFF may not be mapped tha fuck into in-memory file handles'
.IP "\(bu" 4
\&'%s' resolved ta '\eo{%s}%d'
.IP "\(bu" 4
\&'Trailin white-space up in a cold-ass lil charnames alias definizzle is deprecated'
.IP "\(bu" 4
\&'A sequence of multiple spaces up in a cold-ass lil charnames alias definizzle is deprecated'
.IP "\(bu" 4
\&'Passin malformed \s-1UTF\-8\s0 ta \*(L"%s\*(R" is deprecated'
.IP "\(bu" 4
Subroutine \*(L"&%s\*(R" aint available
.Sp
(W closure) Durin compilation, a inner named subroutine or eval is
attemptin ta capture a outa lexical subroutine dat aint currently
available.  This can happen fo' one of two reasons.  First, tha lexical
subroutine may be declared up in a outa anonymous subroutine dat has not
yet been pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  (Remember dat named subs is pimped at compile time,
while anonymous subs is pimped at run-time.)  For example,
.Sp
.Vb 1
\&    sub { mah sub a {...} sub f { \e&a } }
.Ve
.Sp
At tha time dat f is pimped, it can't capture tha current tha \*(L"a\*(R" sub,
since tha anonymous subroutine aint been pimped yet.  Conversely, the
followin won't give a warnin since tha anonymous subroutine has by now
been pimped n' is live:
.Sp
.Vb 1
\&    sub { mah sub a {...} eval \*(Aqsub f { \e&a }\*(Aq }\->();
.Ve
.Sp
Da second thang is caused by a eval accessin a variable dat has
gone outta scope, fo' example,
.Sp
.Vb 5
\&    sub f {
\&        mah sub a {...}
\&        sub { eval \*(Aq\e&a\*(Aq }
\&    }
\&    f()\->();
.Ve
.Sp
Here, when tha '\e&a' up in tha eval is bein compiled, f() aint currently
bein executed, so its &a aint available fo' capture.
.IP "\(bu" 4
\&\*(L"%s\*(R" subroutine &%s masks earlier declaration up in same \f(CW%s\fR
.Sp
(W misc) A \*(L"my\*(R" or \*(L"state\*(R" subroutine has been redeclared up in the
current scope or statement, effectively eliminatin all access to
the previous instance.  This be almost always a typographical error.
Note dat tha earlier subroutine will still exist until tha end of
the scope or until all closure references ta it is destroyed.
.IP "\(bu" 4
Da \f(CW%s\fR feature is experimental
.Sp
(S experimental) This warnin is emitted if you enable a experimental
feature via \f(CW\*(C`use feature\*(C'\fR.  Simply suppress tha warnin if you want
to use tha feature yo, but know dat up in bustin so yo ass is takin tha risk
of rockin a experimenstrual feature which may chizzle or be removed up in a
future Perl version:
.Sp
.Vb 2
\&    no warnings "experimental::lexical_subs";
\&    use feature "lexical_subs";
.Ve
.IP "\(bu" 4
sleep(%u) too large
.Sp
(W overflow) Yo ass called \f(CW\*(C`sleep\*(C'\fR wit a number dat was larger than it can
reliably handle n' \f(CW\*(C`sleep\*(C'\fR probably slept fo' less time than requested.
.IP "\(bu" 4
Wide characta up in setenv
.Sp
Attempts ta put wide charactas tha fuck into environment variablez via \f(CW%ENV\fR now
provoke dis warning.
.IP "\(bu" 4
"Invalid wack number (%s) up in chr"
.Sp
\&\f(CW\*(C`chr()\*(C'\fR now warns when passed a wack value [perl #83048].
.IP "\(bu" 4
"Integer overflow up in srand"
.Sp
\&\f(CW\*(C`srand()\*(C'\fR now warns when passed a value dat don't fit up in a \f(CW\*(C`UV\*(C'\fR (since the
value is ghon be truncated rather than overflowing) [perl #40605].
.IP "\(bu" 4
"\-i used wit no filenames on tha command line, readin from \s-1STDIN\s0"
.Sp
Hustlin perl wit tha \f(CW\*(C`\-i\*(C'\fR flag now warns if no input filez is provided on
the command line [perl #113410].
.SS "Changes ta Existin Diagnostics"
.IX Subsection "Changes ta Existin Diagnostics"
.IP "\(bu" 4
$* is no longer supported
.Sp
Da warnin dat use of \f(CW$*\fR n' \f(CW$#\fR is no longer supported is now
generated fo' every last muthafuckin location dat references em.  Previously it would fail
to be generated if another variable rockin tha same typeglob was peeped first
(e.g. \f(CW\*(C`@*\*(C'\fR before \f(CW$*\fR), n' would not be generated fo' tha second and
subsequent uses.  (It aint nuthin but hard ta fix tha failure ta generate warnings at all
without also generatin dem every last muthafuckin time, n' warnin every last muthafuckin time is
consistent wit tha warnings dat \f(CW$[\fR used ta generate.)
.IP "\(bu" 4
Da warnings fo' \f(CW\*(C`\eb{\*(C'\fR n' \f(CW\*(C`\eB{\*(C'\fR was added. Y'all KNOW dat shit, muthafucka!  They is a thugged-out deprecation
warnin which should be turned off by dat category.  One should not
have ta turn off regular regexp warnings as well ta git rid of these.
.IP "\(bu" 4
Constant(%s): Call ta &{$^H{%s}} did not return a thugged-out defined value
.Sp
Constant overloadin dat returns \f(CW\*(C`undef\*(C'\fR thangs up in dis biatch up in dis error message.
For numeric constants, it used ta say \*(L"Constant(undef)\*(R".  \*(L"undef\*(R" has been
replaced wit tha number itself.
.IP "\(bu" 4
Da error produced when a module cannot be loaded now includes a hint that
the module may need ta be installed: \*(L"Can't locate hopping.pm up in \f(CW@INC\fR (you
may need ta install tha hoppin module) (@INC gotz nuff: ...)\*(R"
.IP "\(bu" 4
vector argument not supported wit alpha versions
.Sp
This warnin was not suppressable, even wit \f(CW\*(C`no warnings\*(C'\fR.  Now it is
suppressible, n' has been moved from tha \*(L"internal\*(R" category ta the
\&\*(L"printf\*(R" category.
.IP "\(bu" 4
\&\f(CW\*(C`Can\*(Aqt do {n,m} wit n > m up in regex; marked by <\-\- HERE up in m/%s/\*(C'\fR
.Sp
This fatal error has been turned tha fuck into a warnin dat reads:
.Sp
Quantifier {n,m} wit n > m can't match up in regex
.Sp
(W regexp) Minima should be less than or equal ta maxima.  If you straight-up want
your regexp ta match suttin' 0 times, just put {0}.
.IP "\(bu" 4
Da \*(L"Runaway prototype\*(R" warnin dat occurs up in bizarre cases has been
removed as bein unhelpful n' inconsistent.
.IP "\(bu" 4
Da \*(L"Not a gangbangin' format reference\*(R" error has been removed, as tha only case in
which it could be triggered was a funky-ass bug.
.IP "\(bu" 4
Da \*(L"Unable ta create sub named \f(CW%s\fR\*(R" error has been removed fo' tha same
reason.
.IP "\(bu" 4
Da 'Can't use \*(L"my \f(CW%s\fR\*(R" up in sort comparison' error has been downgraded ta a
warning, '\*(L"my \f(CW%s\fR\*(R" used up in sort comparison' (with 'state' instead of 'my'
for state variables).  In addition, tha heuristics fo' guessin whether
lexical \f(CW$a\fR or \f(CW$b\fR has been misused done been improved ta generate fewer
false positives.  Lexical \f(CW$a\fR n' \f(CW$b\fR is no longer disallowed if they are
outside tha sort block.  Also, a named unary or list operator inside the
sort block no longer causes tha \f(CW$a\fR or \f(CW$b\fR ta be ignored [perl #86136].
.SH "Utilitizzle Chizzles"
.IX Header "Utilitizzle Chizzles"
\fIh2xs\fR
.IX Subsection "h2xs"
.IP "\(bu" 4
\&\fIh2xs\fR no longer produces invalid code fo' empty defines.  [perl #20636]
.SH "Configuration n' Compilation"
.IX Header "Configuration n' Compilation"
.IP "\(bu" 4
Added \f(CW\*(C`useversionedarchname\*(C'\fR option ta Configure
.Sp
When set, it includes 'api_versionstring' up in 'archname'. E.g.
x86_64\-linux\-5.13.6\-thread\-multi.  It be unset by default.
.Sp
This feature was axed by Slim Tim Bunce, whoz ass observed that
\&\f(CW\*(C`INSTALL_BASE\*(C'\fR creates a library structure dat do not
differentiate by perl version. I aint talkin' bout chicken n' gravy biatch.  Instead, it places architecture
specific filez up in \*(L"$install_base/lib/perl5/$archname\*(R".  This makes
it hard as fuck ta bust a cold-ass lil common \f(CW\*(C`INSTALL_BASE\*(C'\fR library path with
multiple versionz of perl.
.Sp
By settin \f(CW\*(C`\-Duseversionedarchname\*(C'\fR, tha \f(CW$archname\fR will be
distinct fo' architecture \fIand\fR \s-1API\s0 version, allowin mixed use of
\&\f(CW\*(C`INSTALL_BASE\*(C'\fR.
.IP "\(bu" 4
Add a \f(CW\*(C`PERL_NO_INLINE_FUNCTIONS\*(C'\fR option
.Sp
If \f(CW\*(C`PERL_NO_INLINE_FUNCTIONS\*(C'\fR is defined, don't include \*(L"inline.h\*(R"
.Sp
This permits test code ta include tha perl headaz fo' definitions without
bustin a link dependency on tha perl library (which may not exist yet).
.IP "\(bu" 4
Configure will honour tha external \f(CW\*(C`MAILDOMAIN\*(C'\fR environment variable, if set.
.IP "\(bu" 4
\&\f(CW\*(C`installman\*(C'\fR no longer ignores tha silent option
.IP "\(bu" 4
Both \f(CW\*(C`META.yml\*(C'\fR n' \f(CW\*(C`META.json\*(C'\fR filez is now included up in tha distribution.
.IP "\(bu" 4
\&\fIConfigure\fR will now erectly detect \f(CW\*(C`isblank()\*(C'\fR when compilin wit a \*(C+
compiler.
.IP "\(bu" 4
Da pager detection up in \fIConfigure\fR has been improved ta allow responses which
specify options afta tha program name, e.g. \fB/usr/bin/less \-R\fR, if tha user
accepts tha default value.  This helps \fBperldoc\fR when handlin \s-1ANSI\s0 escapes
[perl #72156].
.SH "Testing"
.IX Header "Testing"
.IP "\(bu" 4
Da test suite now has a section fo' tests dat require straight-up big-ass amounts
of memory.  These tests won't run by default; they can be enabled by
settin tha \f(CW\*(C`PERL_TEST_MEMORY\*(C'\fR environment variable ta tha number of
gibibytez of memory dat may be safely used.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
.IP "BeOS" 4
.IX Item "BeOS"
BeOS was a operatin system fo' underground computas pimped by Be Inc,
initially fo' they BeBox hardware. Da \s-1OS\s0 Haiku was freestyled as a open
source replacement for/continuation of BeOS, n' its perl port is current and
actively maintained.
.IP "\s-1UTS\s0 Global" 4
.IX Item "UTS Global"
Support code relatin ta \s-1UTS\s0 global has been removed. Y'all KNOW dat shit, muthafucka!  \s-1UTS\s0 was a mainframe
version of System V pimped by Amdahl, subsequently sold ta \s-1UTS\s0 Global. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  The
port has not been touched since before Perl v5.8.0, n' \s-1UTS\s0 Global is now
defunct.
.IP "\s-1VM/ESA\s0" 4
.IX Item "VM/ESA"
Support fo' \s-1VM/ESA\s0 has been removed. Y'all KNOW dat shit, muthafucka! Da port was tested on 2.3.0, which
\&\s-1IBM\s0 ended steez on up in March 2002. 2.4.0 ended steez up in June 2003, and
was superseded by Z/VM. Da current version of Z/VM is V6.2.0, n' scheduled
for end of steez on 2015/04/30.
.IP "\s-1MPE/IX\s0" 4
.IX Item "MPE/IX"
Support fo' \s-1MPE/IX\s0 has been removed.
.IP "\s-1EPOC\s0" 4
.IX Item "EPOC"
Support code relatin ta \s-1EPOC\s0 has been removed. Y'all KNOW dat shit, muthafucka!  \s-1EPOC\s0 was a cold-ass lil crew of
operatin systems pimped by Psion fo' mobile devices.  Dat shiznit was the
predecessor of Symbian. I aint talkin' bout chicken n' gravy biatch.  Da port was last updated up in April 2002.
.IP "Rhapsody" 4
.IX Item "Rhapsody"
Support fo' Rhapsody has been removed.
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
\fI\s-1AIX\s0\fR
.IX Subsection "AIX"
.PP
Configure now always addz \f(CW\*(C`\-qlanglvl=extc99\*(C'\fR ta tha \s-1CC\s0 flags on \s-1AIX\s0 when
usin xlC.  This will make it easier ta compile a fuckin shitload of XS-based modules
that assume C99 [perl #113778].
.PP
\fIclang++\fR
.IX Subsection "clang++"
.PP
There is now a workaround fo' a cold-ass lil compila bug dat prevented compiling
with clang++ since Perl v5.15.7 [perl #112786].
.PP
\fI\*(C+\fR
.IX Subsection ""
.PP
When compilin tha Perl core as \*(C+ (which is only semi-supported), the
mathom functions is now compiled as \f(CW\*(C`extern "C"\*(C'\fR, ta ensure proper
binary compatibility.  (But fuck dat shiznit yo, tha word on tha street is dat binary compatibilitizzle aint generally
guaranteed anyway up in tha thangs where dis would matter.)
.PP
\fIDarwin\fR
.IX Subsection "Darwin"
.PP
Quit hardcodin a alignment on 8 byte boundaries ta fix buildz using
\&\-Dusemorebits.
.PP
\fIHaiku\fR
.IX Subsection "Haiku"
.PP
Perl should now work outta tha box on Haiku R1 Alpha 4.
.PP
\fIMidnightBSD\fR
.IX Subsection "MidnightBSD"
.PP
\&\f(CW\*(C`libc_r\*(C'\fR was removed from recent versionz of MidnightBSD n' olda versions
work betta wit \f(CW\*(C`pthread\*(C'\fR. Threadin is now enabled rockin \f(CW\*(C`pthread\*(C'\fR which
corrects build errors wit threadin enabled on 0.4\-CURRENT.
.PP
\fISolaris\fR
.IX Subsection "Solaris"
.PP
In Configure, avoid hustlin sed commandz wit flags not supported on Solaris.
.PP
\fI\s-1VMS\s0\fR
.IX Subsection "VMS"
.IP "\(bu" 4
Where possible, tha case of filenames n' command-line arguments is now
preserved by enablin tha \s-1CRTL\s0 features \f(CW\*(C`DECC$EFS_CASE_PRESERVE\*(C'\fR and
\&\f(CW\*(C`DECC$ARGV_PARSE_STYLE\*(C'\fR at start-up time.  Da latta only takes effect
when extended parse is enabled up in tha process from which Perl is run.
.IP "\(bu" 4
Da characta set fo' Extended Filename Syntax (\s-1EFS\s0) is now enabled by default
on \s-1VMS. \s0 Among other thangs, dis serves up betta handlin of dots up in directory
names, multiple dots up in filenames, n' spaces up in filenames.  To obtain tha old
behavior, set tha logical name \f(CW\*(C`DECC$EFS_CHARSET\*(C'\fR ta \f(CW\*(C`DISABLE\*(C'\fR.
.IP "\(bu" 4
Fixed linkin on buildz configured wit \f(CW\*(C`\-Dusemymalloc=y\*(C'\fR.
.IP "\(bu" 4
Experimenstrual support fo' buildin Perl wit tha \s-1HP \*(C+\s0 compila be available
by configurin wit \f(CW\*(C`\-Dusecxx\*(C'\fR.
.IP "\(bu" 4
All C header filez from tha top-level directory of tha distribution is now
installed on \s-1VMS,\s0 providin consistency wit a long-standin practice on other
platforms. Previously only a subset was installed, which broke non-core
extension buildz fo' extensions dat depended on tha missin include files.
.IP "\(bu" 4
Quotes is now removed from tha command verb (but not tha parameters) for
commandz spawned via \f(CW\*(C`system\*(C'\fR, backticks, or a piped \f(CW\*(C`open\*(C'\fR.  Previously,
quotes on tha verb was passed all up in ta \s-1DCL,\s0 which would fail ta recognize
the command. Y'all KNOW dat shit, muthafucka!  Also, if tha verb is straight-up a path ta a image or command
procedure on a \s-1ODS\-5\s0 volume, quotin it now allows tha path ta contain spaces.
.IP "\(bu" 4
Da \fBa2p\fR build has been fixed fo' tha \s-1HP \*(C+\s0 compila on OpenVMS.
.PP
\fIWin32\fR
.IX Subsection "Win32"
.IP "\(bu" 4
Perl can now be built rockin Microsoftz Visual \*(C+ 2012 compila by specifying
CCTYPE=MSVC110 (or \s-1MSVC110FREE\s0 if yo ass is rockin tha free Express edizzle for
Windows Desktop) up in \fIwin32/Makefile\fR.
.IP "\(bu" 4
Da option ta build without \f(CW\*(C`USE_SOCKETS_AS_HANDLES\*(C'\fR has been removed.
.IP "\(bu" 4
Fixed a problem where perl could crash while cleanin up threadz (includin the
main thread) up in threaded debuggin buildz on Win32 n' possibly other platforms
[perl #114496].
.IP "\(bu" 4
A rare race condizzle dat would lead ta chill takin more
time than requested, n' possibly even hanging, has been fixed [perl #33096].
.IP "\(bu" 4
\&\f(CW\*(C`link\*(C'\fR on Win32 now attempts ta set \f(CW$!\fR ta mo' appropriate joints
based on tha Win32 \s-1API\s0 error code. [perl #112272]
.Sp
Perl no longer manglez tha environment block, e.g. when launchin a new
sub-process, when tha environment gotz nuff non-ASCII characters. Known
problems still remain, however, when tha environment gotz nuff characters
outside of tha current \s-1ANSI\s0 codepage (e.g. peep tha item bout Unicode in
\&\f(CW%ENV\fR up in <http://perl5.git.perl.org/perl.git/blob/HEAD:/Porting/todo.pod>).
[perl #113536]
.IP "\(bu" 4
Buildin perl wit some Windows compilaz used ta fail cuz of a problem
with miniperlz \f(CW\*(C`glob\*(C'\fR operator (which uses tha \f(CW\*(C`perlglob\*(C'\fR program)
deletin tha \s-1PATH\s0 environment variable [perl #113798].
.IP "\(bu" 4
A freshly smoked up makefile option, \f(CW\*(C`USE_64_BIT_INT\*(C'\fR, has been added ta tha Windows
makefiles.  Set dis ta \*(L"define\*(R" when buildin a 32\-bit perl if you want
it ta use 64\-bit integers.
.Sp
Machine code size reductions, already made ta tha DLLz of \s-1XS\s0 modulez in
Perl v5.17.2, have now been extended ta tha perl \s-1DLL\s0 itself.
.Sp
Buildin wit \s-1VC++ 6.0\s0 was inadvertently fucked up in Perl v5.17.2 but has
now been fixed again.
.PP
\fIWinCE\fR
.IX Subsection "WinCE"
.PP
Buildin on WinCE is now possible once again, although mo' work is required
to straight-up restore a cold-ass lil clean build.
.SH "Internal Chizzles"
.IX Header "Internal Chizzles"
.IP "\(bu" 4
Synonyms fo' tha misleadingly named \f(CW\*(C`av_len()\*(C'\fR done been pimped:
\&\f(CW\*(C`av_top_index()\*(C'\fR n' \f(CW\*(C`av_tindex\*(C'\fR.  All three of these return the
number of tha highest index up in tha array, not tha number of elements it
gotz nuff.
.IP "\(bu" 4
\&\fISvUPGRADE()\fR is no longer a expression. I aint talkin' bout chicken n' gravy biatch. Originally dis macro (and its
underlyin function, \fIsv_upgrade()\fR) was documented as boolean, although
in realitizzle they always croaked on error n' never returned false. In 2005
the documentation was updated ta specify a void return value yo, but
\&\fISvUPGRADE()\fR was left always returnin 1 fo' backwardz compatibility. This
has now been removed, n' \fISvUPGRADE()\fR is now a statement wit no return
value.
.Sp
So dis is now a syntax error:
.Sp
.Vb 1
\&    if (!SvUPGRADE(sv)) { croak(...); }
.Ve
.Sp
If you have code like that, simply replace it with
.Sp
.Vb 1
\&    SvUPGRADE(sv);
.Ve
.Sp
or ta avoid compila warnings wit olda perls, possibly
.Sp
.Vb 1
\&    (void)SvUPGRADE(sv);
.Ve
.IP "\(bu" 4
Perl has a freshly smoked up copy-on-write mechanizzle dat allows any SvPOK scalar ta be
upgraded ta a cold-ass lil copy-on-write scalar. Shiiit, dis aint no joke.  A reference count on tha strang buffer
is stored up in tha strang buffer itself.  This feature is \fBnot enabled by
default\fR.
.Sp
It can be enabled up in a perl build by hustlin \fIConfigure\fR with
\&\fB\-Accflags=\-DPERL_NEW_COPY_ON_WRITE\fR, n' we would encourage \s-1XS\s0 authors
to try they code wit such a enabled perl, n' provide feedback.
Unfortunately, there aint yet a phat guide ta uppimpin \s-1XS\s0 code ta cope
with \s-1COW. \s0 Until such a thugged-out document be available, consult tha perl5\-porters
mailin list.
.Sp
It breaks all dem \s-1XS\s0 modulez by allowin copy-on-write scalars ta go
all up in code paths dat never encountered dem before.
.IP "\(bu" 4
Copy-on-write no longer uses tha SvFAKE n' SvREADONLY flags.  Hence,
SvREADONLY indicates a legit read-only \s-1SV.\s0
.Sp
Use tha SvIsCOW macro (as before) ta identify a cold-ass lil copy-on-write scalar.
.IP "\(bu" 4
\&\f(CW\*(C`PL_glob_index\*(C'\fR is gone.
.IP "\(bu" 4
Da private Perl_croak_no_modify has had its context parameta removed. Y'all KNOW dat shit, muthafucka!  It is
now has a void prototype.  Userz of tha hood \s-1API\s0 croak_no_modify remain
unaffected.
.IP "\(bu" 4
Copy-on-write (shared hash key) scalars is no longer marked read-only.
\&\f(CW\*(C`SvREADONLY\*(C'\fR returns false on such a \s-1SV,\s0 but \f(CW\*(C`SvIsCOW\*(C'\fR still returns
true.
.IP "\(bu" 4
A freshly smoked up op type, \f(CW\*(C`OP_PADRANGE\*(C'\fR has been introduced. Y'all KNOW dat shit, muthafucka!  Da perl peephole
optimiser will, where possible, substitute a single padrange op fo' a
pushmark followed by one or mo' pad ops, n' possibly also skippin list
and nextstate ops.  In addition, tha op can carry up tha tasks associated
with tha \s-1RHS\s0 of a \f(CW\*(C`my(...) = @_\*(C'\fR assignment, so dem ops may be optimised
away like a muthafucka.
.IP "\(bu" 4
Case-insensitizzle matchin inside a [bracketed] characta class wit a
multi-characta fold no longer excludes one of tha possibilitizzles up in the
circumstances dat it used to. [perl #89774].
.IP "\(bu" 4
\&\f(CW\*(C`PL_formfeed\*(C'\fR has been removed.
.IP "\(bu" 4
Da regular expression engine no longer readz one byte past tha end of the
target string.  While fo' all internally well-formed scalars dis should
never done been a problem, dis chizzle facilitates smart-ass tricks with
strin buffers up in \s-1CPAN\s0 modules.  [perl #73542]
.IP "\(bu" 4
Inside a \s-1BEGIN\s0 block, \f(CW\*(C`PL_compcv\*(C'\fR now points ta tha currently-compiling
subroutine, rather than tha \s-1BEGIN\s0 block itself.
.IP "\(bu" 4
\&\f(CW\*(C`mg_length\*(C'\fR has been deprecated.
.IP "\(bu" 4
\&\f(CW\*(C`sv_len\*(C'\fR now always returns a funky-ass byte count n' \f(CW\*(C`sv_len_utf8\*(C'\fR a cold-ass lil character
count.  Previously, \f(CW\*(C`sv_len\*(C'\fR n' \f(CW\*(C`sv_len_utf8\*(C'\fR was both buggy n' would
sometimes returns bytes n' sometimes characters.  \f(CW\*(C`sv_len_utf8\*(C'\fR no longer
assumes dat its argument is up in \s-1UTF\-8. \s0 Neither of these creates \s-1UTF\-8\s0 caches
for tied or overloaded joints or fo' non-PVs any more.
.IP "\(bu" 4
\&\f(CW\*(C`sv_mortalcopy\*(C'\fR now copies strang bufferz of shared hash key scalars when
called from \s-1XS\s0 modulez [perl #79824].
.IP "\(bu" 4
\&\f(CW\*(C`RXf_SPLIT\*(C'\fR n' \f(CW\*(C`RXf_SKIPWHITE\*(C'\fR is no longer used. Y'all KNOW dat shit, muthafucka!  They is now
#defined as 0.
.IP "\(bu" 4
Da freshly smoked up \f(CW\*(C`RXf_MODIFIES_VARS\*(C'\fR flag can be set by custom regular expression
engines ta indicate dat tha execution of tha regular expression may cause
variablez ta be modified. Y'all KNOW dat shit, muthafucka!  This lets \f(CW\*(C`s///\*(C'\fR know ta skip certain
optimisations.  Perlz own regular expression engine sets dis flag fo' the
special backtrackin verbs dat set \f(CW$REGMARK\fR n' \f(CW$REGERROR\fR.
.IP "\(bu" 4
Da APIs fo' accessin lexical padz have chizzled considerably.
.Sp
\&\f(CW\*(C`PADLIST\*(C'\fRs is now longer \f(CW\*(C`AV\*(C'\fRs yo, but they own type instead.
\&\f(CW\*(C`PADLIST\*(C'\fRs now contain a \f(CW\*(C`PAD\*(C'\fR n' a \f(CW\*(C`PADNAMELIST\*(C'\fR of \f(CW\*(C`PADNAME\*(C'\fRs,
rather than \f(CW\*(C`AV\*(C'\fRs fo' tha pad n' tha list of pad names.  \f(CW\*(C`PAD\*(C'\fRs,
\&\f(CW\*(C`PADNAMELIST\*(C'\fRs, n' \f(CW\*(C`PADNAME\*(C'\fRs is ta be accessed as such all up in the
newly added pad \s-1API\s0 instead of tha plain \f(CW\*(C`AV\*(C'\fR n' \f(CW\*(C`SV\*(C'\fR APIs.  See
perlapi fo' details.
.IP "\(bu" 4
In tha regex \s-1API,\s0 tha numbered capture callbacks is passed a index
indicatin what tha fuck match variable is bein accessed. Y'all KNOW dat shit, muthafucka! There is special
index joints fo' tha \f(CW\*(C`$\`, $&, $&\*(C'\fR variables. Previously tha same three
values was used ta retrieve \f(CW\*(C`${^PREMATCH}, ${^MATCH}, ${^POSTMATCH}\*(C'\fR
too yo, but these have now been assigned three separate joints, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. See
\&\*(L"Numbered capture callbacks\*(R" up in perlreapi.
.IP "\(bu" 4
\&\f(CW\*(C`PL_sawampersand\*(C'\fR was previously a funky-ass boolean indicatin dat any of
\&\f(CW\*(C`$\`, $&, $&\*(C'\fR had been seen; it now gotz nuff three one-bit flags
indicatin tha presence of each of tha variablez individually.
.IP "\(bu" 4
Da \f(CW\*(C`CV *\*(C'\fR typemap entry now supports \f(CW\*(C`&{}\*(C'\fR overloadin n' typeglobs,
just like \f(CW\*(C`&{...}\*(C'\fR [perl #96872].
.IP "\(bu" 4
Da \f(CW\*(C`SVf_AMAGIC\*(C'\fR flag ta indicate overloadin is now on tha stash, not the
object.  It be now set automatically whenever a method or \f(CW@ISA\fR chizzles, so
its meanin has chizzled, like a muthafucka.  It now means \*(L"potentially overloaded\*(R".  When
the overload table is calculated, tha flag be automatically turned off if
there is no overloading, so there should be no noticeable slowdown.
.Sp
Da stalenizz of tha overload tablez is now checked when overload methods
are invoked, rather than durin \f(CW\*(C`bless\*(C'\fR.
.Sp
\&\*(L"A\*(R" magic is gone.  Da chizzlez ta tha handlin of tha \f(CW\*(C`SVf_AMAGIC\*(C'\fR flag
eliminizzle tha need fo' dat shit.
.Sp
\&\f(CW\*(C`PL_amagic_generation\*(C'\fR has been removed as no longer necessary.  For \s-1XS\s0
modules, it is now a macro alias ta \f(CW\*(C`PL_na\*(C'\fR.
.Sp
Da fallback overload settin is now stored up in a stash entry separate from
overloadednizz itself.
.IP "\(bu" 4
Da character-processin code has been cleaned up in places.  Da chizzles
should be operationally invisible.
.IP "\(bu" 4
Da \f(CW\*(C`study\*(C'\fR function was done cooked up a no-op up in v5.16.  Dat shiznit was simply disabled via
a \f(CW\*(C`return\*(C'\fR statement; tha code was left up in place.  Now tha code supporting
what \f(CW\*(C`study\*(C'\fR used ta do has been removed.
.IP "\(bu" 4
Under threaded perls, there is no longer a separate \s-1PV\s0 allocated fo' every
\&\s-1COP\s0 ta store its package name (\f(CW\*(C`cop\->stashpv\*(C'\fR).  Instead, there be an
offset (\f(CW\*(C`cop\->stashoff\*(C'\fR) tha fuck into tha freshly smoked up \f(CW\*(C`PL_stashpad\*(C'\fR array, which
holdz stash pointers.
.IP "\(bu" 4
In tha pluggable regex \s-1API,\s0 tha \f(CW\*(C`regexp_engine\*(C'\fR struct has acquired a new
field \f(CW\*(C`op_comp\*(C'\fR, which is currently just fo' perlz internal use, and
should be initialized ta \s-1NULL\s0 by other regex plugin modules.
.IP "\(bu" 4
A freshly smoked up function \f(CW\*(C`alloccopstash\*(C'\fR has been added ta tha \s-1API,\s0 but is considered
experimental. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  See perlapi.
.IP "\(bu" 4
Perl used ta implement git magic up in a way dat would sometimes hide bugs in
code dat could call \fImg_get()\fR too nuff times on magical joints, n' you can put dat on yo' toast.  This hidin of
errors no longer occurs, so long-standin bugs may become visible now, nahmeean?  If
you peep magic-related errors up in \s-1XS\s0 code, check ta make shizzle it, together
with tha Perl \s-1API\s0 functions it uses, calls \fImg_get()\fR only once on \fISvGMAGICAL()\fR
values.
.IP "\(bu" 4
\&\s-1OP\s0 allocation fo' CVs now uses a slab allocator. Shiiit, dis aint no joke.  This simplifies
memory pimpment fo' OPs allocated ta a \s-1CV,\s0 so cleanin up afta a
compilation error is simpla n' less thuggy [perl #111462][perl #112312].
.IP "\(bu" 4
\&\f(CW\*(C`PERL_DEBUG_READONLY_OPS\*(C'\fR has been rewritten ta work wit tha freshly smoked up slab
allocator, allowin it ta catch mo' violations than before.
.IP "\(bu" 4
Da oldschool slab allocator fo' ops, which was only enabled fo' \f(CW\*(C`PERL_IMPLICIT_SYS\*(C'\fR
and \f(CW\*(C`PERL_DEBUG_READONLY_OPS\*(C'\fR, has been retired.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
Here document terminators no longer require a terminatin newline characta when
they occur all up in tha end of a gangbangin' file.  This was already tha case all up in tha end of a
strin eval [perl #65838].
.IP "\(bu" 4
\&\f(CW\*(C`\-DPERL_GLOBAL_STRUCT\*(C'\fR buildz now free tha global struct \fBafter\fR
they've finished rockin dat shit.
.IP "\(bu" 4
A trailin '/' on a path up in \f(CW@INC\fR will no longer have a additionizzle '/'
appended.
.IP "\(bu" 4
Da \f(CW\*(C`:crlf\*(C'\fR layer now works when unread data don't fit tha fuck into its own
buffer n' shit. [perl #112244].
.IP "\(bu" 4
\&\f(CW\*(C`ungetc()\*(C'\fR now handlez \s-1UTF\-8\s0 encoded data. [perl #116322].
.IP "\(bu" 4
A bug up in tha core typemap caused any C types dat map ta tha T_BOOL core
typemap entry ta not be set, updated, or modified when tha T_BOOL variable was
used up in a \s-1OUTPUT:\s0 section wit a exception fo' \s-1RETVAL. T_BOOL\s0 up in a \s-1INPUT:\s0
section was not affected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Usin a T_BOOL return type fo' a \s-1XSUB \s0(\s-1RETVAL\s0)
was not affected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. A side effect of fixin dis bug is, if a T_BOOL is specified
in tha \s-1OUTPUT:\s0 section (which previous did not a god damn thang ta tha \s-1SV\s0), n' a read only
\&\s-1SV \s0(literal) is passed ta tha \s-1XSUB,\s0 croaks like \*(L"Modification of a read-only
value attempted\*(R" will happen. I aint talkin' bout chicken n' gravy biatch. [perl #115796]
.IP "\(bu" 4
On nuff platforms, providin a gangbangin' finger-lickin' directory name as tha script name caused perl
to do not a god damn thang n' report success.  It should now universally report a error
and exit nonzero. [perl #61362]
.IP "\(bu" 4
\&\f(CW\*(C`sort {undef} ...\*(C'\fR under fatal warnings no longer crashes.  It had
begun crashin up in Perl v5.16.
.IP "\(bu" 4
Stashes pimped tha fuck into each other
(\f(CW\*(C`bless \e%Foo::, \*(AqBar\*(Aq; bless \e%Bar::, \*(AqFoo\*(Aq\*(C'\fR) no longer result up in double
frees.  This bug started goin down up in Perl v5.16.
.IP "\(bu" 4
Numerous memory leaks done been fixed, mostly involvin fatal warnings and
syntax errors.
.IP "\(bu" 4
Some failed regular expression matches like fuckin \f(CW\*(C`\*(Aqf\*(Aq =~ /../g\*(C'\fR was not
resettin \f(CW\*(C`pos\*(C'\fR.  Also, \*(L"match-once\*(R" patterns (\f(CW\*(C`m?...?g\*(C'\fR) failed ta reset
it, too, when invoked a second time [perl #23180].
.IP "\(bu" 4
Several bugs involvin \f(CW\*(C`local *ISA\*(C'\fR n' \f(CW\*(C`local *Foo::\*(C'\fR causin stale
\&\s-1MRO\s0 caches done been fixed.
.IP "\(bu" 4
Definin a subroutine when its typeglob has been aliased no longer thangs up in dis biatch
in stale method caches.  This bug was introduced up in Perl v5.10.
.IP "\(bu" 4
Localisin a typeglob containin a subroutine when tha typeglobz package
has been deleted from its parent stash no longer produces a error. Shiiit, dis aint no joke.  This
bug was introduced up in Perl v5.14.
.IP "\(bu" 4
Under some circumstances, \f(CW\*(C`local *method=...\*(C'\fR would fail ta reset method
caches upon scope exit.
.IP "\(bu" 4
\&\f(CW\*(C`/[.foo.]/\*(C'\fR is no longer a error yo, but produces a warnin (as before) and
is treated as \f(CW\*(C`/[.fo]/\*(C'\fR [perl #115818].
.IP "\(bu" 4
\&\f(CW\*(C`goto $tied_var\*(C'\fR now calls \s-1FETCH\s0 before decidin what tha fuck type of goto
(subroutine or label) dis is.
.IP "\(bu" 4
Renamin packages all up in glob assignment
(\f(CW\*(C`*Foo:: = *Bar::; *Bar:: = *Baz::\*(C'\fR) up in combination wit \f(CW\*(C`m?...?\*(C'\fR and
\&\f(CW\*(C`reset\*(C'\fR no longer make threaded buildz crash.
.IP "\(bu" 4
A number of bugs related ta assignin a list ta hash done been fixed. Y'all KNOW dat shit, muthafucka! Many of
these involve lists wit repeated keys like \f(CW\*(C`(1, 1, 1, 1)\*(C'\fR.
.RS 4
.IP "\(bu" 4
Da expression \f(CW\*(C`scalar(%h = (1, 1, 1, 1))\*(C'\fR now returns \f(CW4\fR, not \f(CW2\fR.
.IP "\(bu" 4
Da return value of \f(CW\*(C`%h = (1, 1, 1)\*(C'\fR up in list context was wrong. Previously
this would return \f(CW\*(C`(1, undef, 1)\*(C'\fR, now it returns \f(CW\*(C`(1, undef)\*(C'\fR.
.IP "\(bu" 4
Perl now thangs tha same ol' dirty warnin on \f(CW\*(C`($s, %h) = (1, {})\*(C'\fR as it do for
\&\f(CW\*(C`(%h) = ({})\*(C'\fR, \*(L"Reference found where even-sized list expected\*(R".
.IP "\(bu" 4
A number of additionizzle edge cases up in list assignment ta hashes were
corrected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. For mo' details peep commit 23b7025ebc.
.RE
.RS 4
.RE
.IP "\(bu" 4
Attributes applied ta lexical variablez no longer leak memory.
[perl #114764]
.IP "\(bu" 4
\&\f(CW\*(C`dump\*(C'\fR, \f(CW\*(C`goto\*(C'\fR, \f(CW\*(C`last\*(C'\fR, \f(CW\*(C`next\*(C'\fR, \f(CW\*(C`redo\*(C'\fR or \f(CW\*(C`require\*(C'\fR followed by a
bareword (or version) n' then a infix operator is no longer a syntax
error. Shiiit, dis aint no joke.  It used ta be fo' dem infix operators (like \f(CW\*(C`+\*(C'\fR) dat have a
different meanin where a term is expected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  [perl #105924]
.IP "\(bu" 4
\&\f(CW\*(C`require a::b . 1\*(C'\fR n' \f(CW\*(C`require a::b + 1\*(C'\fR no longer produce erroneous
ambiguitizzle warnings.  [perl #107002]
.IP "\(bu" 4
Class method calls is now allowed on any string, n' not just strings
beginnin wit a alphanumeric character n' shit.  [perl #105922]
.IP "\(bu" 4
An empty pattern pimped wit \f(CW\*(C`qr//\*(C'\fR used up in \f(CW\*(C`m///\*(C'\fR no longer triggers
the \*(L"empty pattern reuses last pattern\*(R" behaviour. Shiiit, dis aint no joke.  [perl #96230]
.IP "\(bu" 4
Tyin a hash durin iteration no longer thangs up in dis biatch up in a memory leak.
.IP "\(bu" 4
Freein a tied hash durin iteration no longer thangs up in dis biatch up in a memory leak.
.IP "\(bu" 4
List assignment ta a tied array or hash dat takes a thugged-out dirt nap on \s-1STORE\s0 no longer
results up in a memory leak.
.IP "\(bu" 4
If tha hint hash (\f(CW\*(C`%^H\*(C'\fR) is tied, compile-time scope entry (which copies
the hint hash) no longer leaks memory if \s-1FETCH\s0 dies. Put ya muthafuckin choppers up if ya feel dis!  [perl #107000]
.IP "\(bu" 4
Constant foldin no longer inappropriately triggers tha special
\&\f(CW\*(C`split " "\*(C'\fR behaviour. Shiiit, dis aint no joke.  [perl #94490]
.IP "\(bu" 4
\&\f(CW\*(C`defined scalar(@array)\*(C'\fR, \f(CW\*(C`defined do { &foo }\*(C'\fR, n' similar constructs
now treat tha argument ta \f(CW\*(C`defined\*(C'\fR as a simple scalar. Shiiit, dis aint no joke.  [perl #97466]
.IP "\(bu" 4
Hustlin a cold-ass lil custom debuggin dat defines no \f(CW*DB::DB\fR glob or serves up a
subroutine stub fo' \f(CW&DB::DB\fR no longer thangs up in dis biatch up in a cold-ass lil crash yo, but a error
instead. Y'all KNOW dat shit, muthafucka!  [perl #114990]
.IP "\(bu" 4
\&\f(CW\*(C`reset ""\*(C'\fR now matches its documentation. I aint talkin' bout chicken n' gravy biatch.  \f(CW\*(C`reset\*(C'\fR only resets \f(CW\*(C`m?...?\*(C'\fR
patterns when called wit no argument.  An empty strang fo' a argument now
does nothing.  (It used ta be treated as no argument.)  [perl #97958]
.IP "\(bu" 4
\&\f(CW\*(C`printf\*(C'\fR wit a argument returnin a empty list no longer readz past the
end of tha stack, resultin up in erratic behaviour. Shiiit, dis aint no joke.  [perl #77094]
.IP "\(bu" 4
\&\f(CW\*(C`\-\-subname\*(C'\fR no longer produces erroneous ambiguitizzle warnings.
[perl #77240]
.IP "\(bu" 4
\&\f(CW\*(C`v10\*(C'\fR is now allowed as a label or package name.  This was inadvertently
broken when v\-strings was added up in Perl v5.6.  [perl #56880]
.IP "\(bu" 4
\&\f(CW\*(C`length\*(C'\fR, \f(CW\*(C`pos\*(C'\fR, \f(CW\*(C`substr\*(C'\fR n' \f(CW\*(C`sprintf\*(C'\fR could be trippin by ties,
overloading, references n' typeglobs if tha stringification of such
changed tha internal representation ta or from \s-1UTF\-8. \s0 [perl #114410]
.IP "\(bu" 4
utf8::encode now calls \s-1FETCH\s0 n' \s-1STORE\s0 on tied variables.  utf8::decode now
calls \s-1STORE \s0(it was already callin \s-1FETCH\s0).
.IP "\(bu" 4
\&\f(CW\*(C`$tied =~ s/$non_utf8/$utf8/\*(C'\fR no longer loops infinitely if tha tied
variable returns a Latin\-1 string, shared hash key scalar, or reference or
typeglob dat stringifies as \s-1ASCII\s0 or Latin\-1.  This was a regression from
v5.12.
.IP "\(bu" 4
\&\f(CW\*(C`s///\*(C'\fR without /e is now betta at detectin when it need ta forego
certain optimisations, fixin some buggy cases:
.RS 4
.IP "\(bu" 4
Match variablez up in certain constructs (\f(CW\*(C`&&\*(C'\fR, \f(CW\*(C`||\*(C'\fR, \f(CW\*(C`..\*(C'\fR n' others) in
the replacement part; e.g., \f(CW\*(C`s/(.)/$l{$a||$1}/g\*(C'\fR.  [perl #26986]
.IP "\(bu" 4
Aliases ta match variablez up in tha replacement.
.IP "\(bu" 4
\&\f(CW$REGERROR\fR or \f(CW$REGMARK\fR up in tha replacement.  [perl #49190]
.IP "\(bu" 4
An empty pattern (\f(CW\*(C`s//$foo/\*(C'\fR) dat causes tha last-successful pattern to
be used, when dat pattern gotz nuff code blocks dat modify tha variables
in tha replacement.
.RE
.RS 4
.RE
.IP "\(bu" 4
Da taintednizz of tha replacement strang no longer affects tha taintedness
of tha return value of \f(CW\*(C`s///e\*(C'\fR.
.IP "\(bu" 4
Da \f(CW$|\fR autoflush variable is pimped on-the-fly when needed. Y'all KNOW dat shit, muthafucka!  If this
happened (e.g., if dat shiznit was mentioned up in a module or eval) when the
currently-selected filehandle was a typeglob wit a empty \s-1IO\s0 slot, it used
to crash.  [perl #115206]
.IP "\(bu" 4
Line numbers all up in tha end of a strang eval is no longer off by one.
[perl #114658]
.IP "\(bu" 4
\&\f(CW@INC\fR filtas (subroutines returned by subroutines up in \f(CW@INC\fR) dat set \f(CW$_\fR ta a
copy-on-write scalar no longer cause tha parser ta modify dat string
buffer up in place.
.IP "\(bu" 4
\&\f(CW\*(C`length($object)\*(C'\fR no longer returns tha undefined value if tha object has
strin overloadin dat returns undef.  [perl #115260]
.IP "\(bu" 4
Da use of \f(CW\*(C`PL_stashcache\*(C'\fR, tha stash name lookup cache fo' method calls, has
been restored,
.Sp
Commit da6b625f78f5f133 up in August 2011 inadvertently broke tha code dat looks
up joints up in \f(CW\*(C`PL_stashcache\*(C'\fR fo' realz. As itz a only cache, like erectly every last muthafuckin thang
carried on hustlin without dat shit.
.IP "\(bu" 4
Da error \*(L"Can't localize all up in a reference\*(R" had disappeared up in v5.16.0
when \f(CW\*(C`local %$ref\*(C'\fR rocked up on tha last line of a lvalue subroutine.
This error disappeared fo' \f(CW\*(C`\elocal %$ref\*(C'\fR up in perl v5.8.1.  It has now
been restored.
.IP "\(bu" 4
Da parsin of here-docs has been improved significantly, fixin several
parsin bugs n' crashes n' one memory leak, n' erectin wrong
subsequent line numbers under certain conditions.
.IP "\(bu" 4
Inside a eval, tha error message fo' a unterminated here-doc no longer
has a newline up in tha middle of it [perl #70836].
.IP "\(bu" 4
A substitution inside a substitution pattern (\f(CW\*(C`s/${s|||}//\*(C'\fR) no longer
confuses tha parser.
.IP "\(bu" 4
It may be a odd place ta allow comments yo, but \f(CW\*(C`s//"" # hello/e\*(C'\fR has
always worked, \fIunless\fR there happens ta be a null characta before the
first #.  Now it works even up in tha presence of nulls.
.IP "\(bu" 4
An invalid range up in \f(CW\*(C`tr///\*(C'\fR or \f(CW\*(C`y///\*(C'\fR no longer thangs up in dis biatch up in a memory leak.
.IP "\(bu" 4
Strin eval no longer treats a semicolon-delimited quote-like operator at
the straight-up end (\f(CW\*(C`eval \*(Aqq;;\*(Aq\*(C'\fR) as a syntax error.
.IP "\(bu" 4
\&\f(CW\*(C`warn {$_ => 1} + 1\*(C'\fR is no longer a syntax error. Shiiit, dis aint no joke.  Da parser used to
get trippin wit certain list operators followed by a anonymous hash and
then a infix operator dat shares its form wit a unary operator.
.IP "\(bu" 4
\&\f(CW\*(C`(calla $n)[6]\*(C'\fR (which gives tha text of tha eval) used ta return the
actual parser buffer n' shit.  Modifyin it could result up in crashes.  Now it always
returns a cold-ass lil copy.  Da strang returned no longer has \*(L"\en;\*(R" tacked on ta the
end yo, but it ain't no stoppin cause I be still poppin'.  Da returned text also includes here-doc bodies, which used ta be
omitted.
.IP "\(bu" 4
Da \s-1UTF\-8\s0 posizzle cache is now reset when accessin magical variables, to
avoid tha strang buffer n' tha \s-1UTF\-8\s0 posizzle cache gettin outta sync
[perl #114410].
.IP "\(bu" 4
Various casez of git magic bein called twice fo' magical \s-1UTF\-8\s0
strings done been fixed.
.IP "\(bu" 4
This code (when not up in tha presence of \f(CW$&\fR etc)
.Sp
.Vb 2
\&    $_ = \*(Aqx\*(Aq x 1_000_000;
\&    1 while /(.)/;
.Ve
.Sp
used ta skip tha buffer copy fo' performizzle reasons yo, but suffered from \f(CW$1\fR
etc changin if tha original gangsta strang chizzled. Y'all KNOW dat shit, muthafucka!  Thatz now been fixed.
.IP "\(bu" 4
Perl don't use PerlIO no mo' ta report outta memory lyrics, as PerlIO
might attempt ta allocate mo' memory.
.IP "\(bu" 4
In a regular expression, if suttin' is quantified wit \f(CW\*(C`{n,m}\*(C'\fR where
\&\f(CW\*(C`n\ >\ m\*(C'\fR, it can't possibly match.  Previously dis was a gangbangin' fatal
error yo, but now is merely a warnin (and dat suttin' won't match).
[perl #82954].
.IP "\(bu" 4
It used ta be possible fo' formats defined up in subroutines dat have
subsequently been undefined n' redefined ta close over variablez up in the
wrong pad (the newly-defined enclosin sub), resultin up in crashes or
\&\*(L"Bizarre copy\*(R" errors.
.IP "\(bu" 4
Redefinizzle of XSUBs at run time could produce warnings wit tha wrong
line number.
.IP "\(bu" 4
Da \f(CW%vd\fR sprintf format do not support version objects fo' alpha versions.
It used ta output tha format itself (%vd) when passed a alpha version, and
also emit a \*(L"Invalid conversion up in printf\*(R" warning.  It no longer do,
but produces tha empty strang up in tha output.  It also no longer leaks
memory up in dis case.
.IP "\(bu" 4
\&\f(CW\*(C`$obj\->SUPER::method\*(C'\fR calls up in tha main package could fail if the
\&\s-1SUPER\s0 package had already been accessed by other means.
.IP "\(bu" 4
Stash aliasin (\f(CW\*(C`*foo:: = *bar::\*(C'\fR) no longer causes \s-1SUPER\s0 calls ta ignore
changes ta methodz or \f(CW@ISA\fR or use tha wack package.
.IP "\(bu" 4
Method calls on packages whose names end up in ::SUPER is no longer treated
as \s-1SUPER\s0 method calls, resultin up in failure ta find tha method.
Furthermore, definin subroutines up in such packages no longer causes dem to
be found by \s-1SUPER\s0 method calls on tha containin package [perl #114924].
.IP "\(bu" 4
\&\f(CW\*(C`\ew\*(C'\fR now matches tha code points U+200C (\s-1ZERO WIDTH\s0 NON-JOINER) n' U+200D
(\s-1ZERO WIDTH JOINER\s0).  \f(CW\*(C`\eW\*(C'\fR no longer matches these n' you can put dat on yo' toast.  This chizzle is cuz
Unicode erected they definizzle of what tha fuck \f(CW\*(C`\ew\*(C'\fR should match.
.IP "\(bu" 4
\&\f(CW\*(C`dump LABEL\*(C'\fR no longer leaks its label.
.IP "\(bu" 4
Constant foldin no longer chizzlez tha behaviour of functions like \f(CW\*(C`stat()\*(C'\fR
and \f(CW\*(C`truncate()\*(C'\fR dat can take either filenames or handles.
\&\f(CW\*(C`stat 1 ? foo : bar\*(C'\fR nows treats its argument as a gangbangin' file name (since it be an
arbitrary expression), rather than tha handle \*(L"foo\*(R".
.IP "\(bu" 4
\&\f(CW\*(C`truncate FOO, $len\*(C'\fR no longer falls back ta treatin \*(L"\s-1FOO\*(R"\s0 as a gangbangin' file name if
the filehandle has been deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This was fucked up in Perl v5.16.0.
.IP "\(bu" 4
Subroutine redefinitions afta sub-to-glob n' glob-to-glob assignments no
longer cause double frees or panic lyrics.
.IP "\(bu" 4
\&\f(CW\*(C`s///\*(C'\fR now turns vstrings tha fuck into plain strings when struttin a substitution,
even if tha resultin strang is tha same ol' dirty (\f(CW\*(C`s/a/a/\*(C'\fR).
.IP "\(bu" 4
Prototype mismatch warnings no longer erroneously treat constant subs as having
no prototype when they straight-up have "".
.IP "\(bu" 4
Constant subroutines n' forward declarations no longer prevent prototype
mismatch warnings from omittin tha sub name.
.IP "\(bu" 4
\&\f(CW\*(C`undef\*(C'\fR on a subroutine now clears call checkers.
.IP "\(bu" 4
Da \f(CW\*(C`ref\*(C'\fR operator started leakin memory on pimped objects up in Perl v5.16.0.
This has been fixed [perl #114340].
.IP "\(bu" 4
\&\f(CW\*(C`use\*(C'\fR no longer tries ta parse its arguments as a statement, making
\&\f(CW\*(C`use constant { () };\*(C'\fR a syntax error [perl #114222].
.IP "\(bu" 4
On debuggin builds, \*(L"uninitialized\*(R" warnings inside formats no longer cause
assertion failures.
.IP "\(bu" 4
On debuggin builds, subroutines nested inside formats no longer cause
assertion failures [perl #78550].
.IP "\(bu" 4
Formats n' \f(CW\*(C`use\*(C'\fR statements is now permitted inside formats.
.IP "\(bu" 4
\&\f(CW\*(C`print $x\*(C'\fR n' \f(CW\*(C`sub { print $x }\->()\*(C'\fR now always produce tha same output.
Dat shiznit was possible fo' tha latta ta refuse ta close over \f(CW$x\fR if tha variable was
not active; e.g., if dat shiznit was defined outside a cold-ass lil currently-runnin named
subroutine.
.IP "\(bu" 4
Similarly, \f(CW\*(C`print $x\*(C'\fR n' \f(CW\*(C`print eval \*(Aq$x\*(Aq\*(C'\fR now produce tha same output.
This also allows \*(L"my \f(CW$x\fR if 0\*(R" variablez ta be peeped up in tha debugger [perl
#114018].
.IP "\(bu" 4
Formats called recursively no longer stomp on they own lexical variablez yo, but
each recursive call has its own set of lexicals.
.IP "\(bu" 4
Attemptin ta free a actizzle format or tha handle associated wit it no longer
results up in a cold-ass lil crash.
.IP "\(bu" 4
Format parsin no longer gets trippin by braces, semicolons n' low-precedence
operators.  It used ta be possible ta use braces as format delimitas (instead
of \f(CW\*(C`=\*(C'\fR n' \f(CW\*(C`.\*(C'\fR) yo, but only sometimes.  Semicolons n' low-precedence operators
in format argument lines no longer confuse tha parser tha fuck into ignorin tha line's
return value.  In format argument lines, braces can now be used fo' anonymous
hashes, instead of bein treated always as \f(CW\*(C`do\*(C'\fR blocks.
.IP "\(bu" 4
Formats can now be nested inside code blocks up in regular expressions n' other
quoted constructs (\f(CW\*(C`/(?{...})/\*(C'\fR n' \f(CW\*(C`qq/${...}/\*(C'\fR) [perl #114040].
.IP "\(bu" 4
Formats is no longer pimped afta compilation errors.
.IP "\(bu" 4
Under debuggin builds, tha \fB\-DA\fR command line option started crashin up in Perl
v5.16.0.  It has been fixed [perl #114368].
.IP "\(bu" 4
A potential deadlock scenario involvin tha premature termination of a pseudo\-
forked lil pimp up in a Windows build wit ithreadz enabled has been fixed. Y'all KNOW dat shit, muthafucka!  This
resolves tha common problem of tha \fIt/op/fork.t\fR test hangin on Windows [perl
#88840].
.IP "\(bu" 4
Da code which generates errors from \f(CW\*(C`require()\*(C'\fR could potentially read one or
two bytes before tha start of tha filename fo' filenames less than three bytes
long n' endin \f(CW\*(C`/\e.p?\ez/\*(C'\fR.  This has now been fixed. Y'all KNOW dat shit, muthafucka!  Note dat it could
never have happened wit module names given ta \f(CW\*(C`use()\*(C'\fR or \f(CW\*(C`require()\*(C'\fR anyway.
.IP "\(bu" 4
Da handlin of pathnamez of modulez given ta \f(CW\*(C`require()\*(C'\fR has been made
thread-safe on \s-1VMS.\s0
.IP "\(bu" 4
Non-blockin sockets done been fixed on \s-1VMS.\s0
.IP "\(bu" 4
Pod can now be nested up in code inside a quoted construct outside of a string
eval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  This used ta work only within strang evals [perl #114040].
.IP "\(bu" 4
\&\f(CW\*(C`goto \*(Aq\*(Aq\*(C'\fR now looks fo' a empty label, producin tha \*(L"goto must have
label\*(R" error message, instead of exitin tha program [perl #111794].
.IP "\(bu" 4
\&\f(CW\*(C`goto "\e0"\*(C'\fR now takes a thugged-out dirt nap wit \*(L"Can't find label\*(R" instead of \*(L"goto must have
label\*(R".
.IP "\(bu" 4
Da C function \f(CW\*(C`hv_store\*(C'\fR used ta result up in crashes when used on \f(CW\*(C`%^H\*(C'\fR
[perl #111000].
.IP "\(bu" 4
A call checker attached ta a cold-ass lil closure prototype via \f(CW\*(C`cv_set_call_checker\*(C'\fR
is now copied ta closures cloned from dat shit.  So \f(CW\*(C`cv_set_call_checker\*(C'\fR now
works inside a attribute handlez fo' a cold-ass lil closure.
.IP "\(bu" 4
Freestylin ta \f(CW$^N\fR used ta have no effect.  Now it croaks wit \*(L"Modification
of a read-only value\*(R" by default yo, but dat can be overridden by a cold-ass lil custom
regular expression engine, as wit \f(CW$1\fR [perl #112184].
.IP "\(bu" 4
\&\f(CW\*(C`undef\*(C'\fR on a cold-ass lil control characta glob (\f(CW\*(C`undef *^H\*(C'\fR) no longer emits an
erroneous warnin bout ambiguitizzle [perl #112456].
.IP "\(bu" 4
For efficiencyz sake, nuff operators n' built-in functions return the
same scalar each time.  Lvalue subroutines n' subroutines up in tha \s-1CORE::\s0
namespace was allowin dis implementation detail ta leak through.
\&\f(CW\*(C`print &CORE::uc("a"), &CORE::uc("b")\*(C'\fR used ta print \*(L"\s-1BB\*(R". \s0 Da same thang
would happen wit a lvalue subroutine returnin tha return value of \f(CW\*(C`uc\*(C'\fR.
Now tha value is copied up in such cases.
.IP "\(bu" 4
\&\f(CW\*(C`method {}\*(C'\fR syntax wit a empty block or a funky-ass block returnin a empty list
used ta crash or use some random value left on tha stack as its invocant.
Now it produces a error.
.IP "\(bu" 4
\&\f(CW\*(C`vec\*(C'\fR now works wit mad big-ass offsets (>2 \s-1GB\s0) [perl #111730].
.IP "\(bu" 4
Changes ta overload settings now take effect immediately, as do chizzlez to
inheritizzle dat affect overloading.  They used ta take effect only after
\&\f(CW\*(C`bless\*(C'\fR.
.Sp
Objects dat was pimped before a cold-ass lil class had any overloadin used ta remain
non-overloaded even if tha class gained overloadin all up in \f(CW\*(C`use overload\*(C'\fR
or \f(CW@ISA\fR chizzles, n' even afta \f(CW\*(C`bless\*(C'\fR.  This has been fixed
[perl #112708].
.IP "\(bu" 4
Classes wit overloadin can now inherit fallback joints.
.IP "\(bu" 4
Overloadin was not respectin a gangbangin' fallback value of 0 if there were
overloaded objects on both sidez of a assignment operator like \f(CW\*(C`+=\*(C'\fR
[perl #111856].
.IP "\(bu" 4
\&\f(CW\*(C`pos\*(C'\fR now croaks wit hash n' array arguments, instead of producing
erroneous warnings.
.IP "\(bu" 4
\&\f(CW\*(C`while(each %h)\*(C'\fR now implies \f(CW\*(C`while(defined($_ = each %h))\*(C'\fR, like
\&\f(CW\*(C`readline\*(C'\fR n' \f(CW\*(C`readdir\*(C'\fR.
.IP "\(bu" 4
Subs up in tha \s-1CORE::\s0 namespace no longer crash afta \f(CW\*(C`undef *_\*(C'\fR when called
with no argument list (\f(CW&CORE::time\fR wit no parentheses).
.IP "\(bu" 4
\&\f(CW\*(C`unpack\*(C'\fR no longer produces tha \*(L"'/' must follow a numeric type up in unpack\*(R"
error when it is tha data dat is at fault [perl #60204].
.IP "\(bu" 4
\&\f(CW\*(C`join\*(C'\fR n' \f(CW"@array"\fR now call \s-1FETCH\s0 only once on a tied \f(CW$"\fR
[perl #8931].
.IP "\(bu" 4
Some subroutine calls generated by compilin core ops affected by a
\&\f(CW\*(C`CORE::GLOBAL\*(C'\fR override had op checkin performed twice.  Da checking
is always idempotent fo' pure Perl code yo, but tha double checkin can
matta when custom call checkers is involved.
.IP "\(bu" 4
A race condizzle used ta exist round fork dat could cause a signal busted to
the parent ta be handled by both parent n' child. Y'all KNOW dat shit, muthafucka! Signals is now blocked
briefly round fork ta prevent dis from goin down [perl #82580].
.IP "\(bu" 4
Da implementation of code blocks up in regular expressions, like fuckin \f(CW\*(C`(?{})\*(C'\fR
and \f(CW\*(C`(??{})\*(C'\fR, has been heavily reworked ta eliminizzle a whole slew of bugs.
Da main user-visible chizzlez are:
.RS 4
.IP "\(bu" 4
Code blocks within patterns is now parsed up in tha same pass as the
surroundin code; up in particular it is no longer necessary ta have balanced
braces: dis now works:
.Sp
.Vb 1
\&    /(?{  $x=\*(Aq{\*(Aq  })/
.Ve
.Sp
This means dat dis error message is no longer generated:
.Sp
.Vb 1
\&    Sequence (?{...}) not terminated or not {}\-balanced up in regex
.Ve
.Sp
but a freshly smoked up error may be seen:
.Sp
.Vb 1
\&    Sequence (?{...}) not terminated wit \*(Aq)\*(Aq
.Ve
.Sp
In addition, literal code blocks within run-time patterns is only
compiled once, at perl compile-time:
.Sp
.Vb 5
\&    fo' mah $p (...) {
\&        # dis \*(AqFOO\*(Aq block of code is compiled once,
\&        # all up in tha same time as tha surroundin \*(Aqfor\*(Aq loop
\&        /$p{(?{FOO;})/;
\&    }
.Ve
.IP "\(bu" 4
Lexical variablez is now sane as regardz scope, recursion n' closure
behavior. Shiiit, dis aint no joke. In particular, \f(CW\*(C`/A(?{B})C/\*(C'\fR behaves (from a cold-ass lil closure viewpoint)
exactly like \f(CW\*(C`/A/ && do { B } && /C/\*(C'\fR, while  \f(CW\*(C`qr/A(?{B})C/\*(C'\fR is like
\&\f(CW\*(C`sub {/A/ && do { B } && /C/}\*(C'\fR. Right back up in yo muthafuckin ass. So dis code now works how tha fuck you might
expect, bustin three regexes dat match 0, 1, n' 2:
.Sp
.Vb 4
\&    fo' mah $i (0..2) {
\&        push @r, qr/^(??{$i})$/;
\&    }
\&    "1" =~ $r[1]; # matches
.Ve
.IP "\(bu" 4
Da \f(CW\*(C`use re \*(Aqeval\*(Aq\*(C'\fR pragma is now only required fo' code blocks defined
at runtime; up in particular up in tha following, tha text of tha \f(CW$r\fR pattern is
still interpolated tha fuck into tha freshly smoked up pattern n' recompiled yo, but tha individual
compiled code-blocks within \f(CW$r\fR is reused rather than bein recompiled,
and \f(CW\*(C`use re \*(Aqeval\*(Aq\*(C'\fR aint needed any more:
.Sp
.Vb 2
\&    mah $r = qr/abc(?{....})def/;
\&    /xyz$r/;
.Ve
.IP "\(bu" 4
Flow control operators no longer crash. Each code block runs up in a new
dynamic scope, so \f(CW\*(C`next\*(C'\fR etc. aint gonna see
any enclosin loops. \f(CW\*(C`return\*(C'\fR returns a value
from tha code block, not from any enclosin subroutine.
.IP "\(bu" 4
Perl normally caches tha compilation of run-time patterns, n' don't
recompile if tha pattern aint chizzled yo, but dis is now disabled if
required fo' tha erect behavior of closures. For example:
.Sp
.Vb 5
\&    mah $code = \*(Aq(??{$x})\*(Aq;
\&    fo' mah $x (1..3) {
\&        # recompile ta peep fresh value of $x each time
\&        $x =~ /$code/;
\&    }
.Ve
.IP "\(bu" 4
Da \f(CW\*(C`/msix\*(C'\fR n' \f(CW\*(C`(?msix)\*(C'\fR etc. flags is now propagated tha fuck into tha return
value from \f(CW\*(C`(??{})\*(C'\fR; dis now works:
.Sp
.Vb 1
\&    "AB" =~ /a(??{\*(Aqb\*(Aq})/i;
.Ve
.IP "\(bu" 4
Warnings n' errors will step tha fuck up ta come from tha surroundin code (or for
run-time code blocks, from a eval) rather than from a \f(CW\*(C`re_eval\*(C'\fR:
.Sp
.Vb 2
\&    use re \*(Aqeval\*(Aq; $c = \*(Aq(?{ warn "foo" })\*(Aq; /$c/;
\&    /(?{ warn "foo" })/;
.Ve
.Sp
formerly gave:
.Sp
.Vb 2
\&    foo at (re_eval 1) line 1.
\&    foo at (re_eval 2) line 1.
.Ve
.Sp
and now gives:
.Sp
.Vb 2
\&    foo at (eval 1) line 1.
\&    foo at /some/prog line 2.
.Ve
.RE
.RS 4
.RE
.IP "\(bu" 4
Perl now can be recompiled ta use any Unicode version. I aint talkin' bout chicken n' gravy biatch.  In v5.16, it
worked on Unicodes 6.0 n' 6.1 yo, but there was various bugs if earlier
releases was used; tha olda tha release tha mo' problems.
.IP "\(bu" 4
\&\f(CW\*(C`vec\*(C'\fR no longer produces \*(L"uninitialized\*(R" warnings up in lvalue context
[perl #9423].
.IP "\(bu" 4
An optimization involvin fixed strings up in regular expressions could cause
a severe performizzle penalty up in edge cases.  This has been fixed
[perl #76546].
.IP "\(bu" 4
In certain cases, includin empty subpatterns within a regular expression (such
as \f(CW\*(C`(?:)\*(C'\fR or \f(CW\*(C`(?:|)\*(C'\fR) could disable some optimizations. This has been fixed.
.IP "\(bu" 4
Da \*(L"Can't find a opnumber\*(R" message dat \f(CW\*(C`prototype\*(C'\fR produces when passed
a strang like \*(L"CORE::nonexistent_keyword\*(R" now passes \s-1UTF\-8\s0 n' embedded
NULs all up in unchanged [perl #97478].
.IP "\(bu" 4
\&\f(CW\*(C`prototype\*(C'\fR now treats magical variablez like \f(CW$1\fR tha same way as
non-magical variablez when checkin fo' tha \s-1CORE::\s0 prefix, instead of
treatin dem as subroutine names.
.IP "\(bu" 4
Under threaded perls, a runtime code block up in a regular expression could
corrupt tha package name stored up in tha op tree, resultin up in wack reads
in \f(CW\*(C`caller\*(C'\fR, n' possibly crashes [perl #113060].
.IP "\(bu" 4
Referencin a cold-ass lil closure prototype (\f(CW\*(C`\e&{$_[1]}\*(C'\fR up in a attribute handlez fo' a
closure) no longer thangs up in dis biatch up in a cold-ass lil copy of tha subroutine (or assertion
failures on debuggin builds).
.IP "\(bu" 4
\&\f(CW\*(C`eval \*(Aq_\|_PACKAGE_\|_\*(Aq\*(C'\fR now returns tha right answer on threaded buildz if
the current package has been assigned over (as in
\&\f(CW\*(C`*ThisPackage:: = *ThatPackage::\*(C'\fR) [perl #78742].
.IP "\(bu" 4
If a package is deleted by code dat it calls, it is possible fo' \f(CW\*(C`caller\*(C'\fR
to peep a stack frame belongin ta dat deleted package.  \f(CW\*(C`caller\*(C'\fR could
crash if tha stashz memory address was reused fo' a scalar n' a
substitution was performed on tha same scalar [perl #113486].
.IP "\(bu" 4
\&\f(CW\*(C`UNIVERSAL::can\*(C'\fR no longer treats its first argument differently
dependin on whether it aint nuthin but a strang or number internally.
.IP "\(bu" 4
\&\f(CW\*(C`open\*(C'\fR wit \f(CW\*(C`<&\*(C'\fR fo' tha mode checks ta peep whether tha third argument is
a number, up in determinin whether ta treat it as a gangbangin' file descriptor or a handle
name.  Magical variablez like \f(CW$1\fR was always failin tha numeric check and
bein treated as handle names.
.IP "\(bu" 4
\&\f(CW\*(C`warn\*(C'\fRz handlin of magical variablez (\f(CW$1\fR, ties) has undergone several
fixes.  \f(CW\*(C`FETCH\*(C'\fR is only called once now on a tied argument or a tied \f(CW$@\fR
[perl #97480].  Tied variablez returnin objects dat stringify as "" are
no longer ignored. Y'all KNOW dat shit, muthafucka!  A tied \f(CW$@\fR dat happened ta return a reference the
\&\fIprevious\fR time dat shiznit was used is no longer ignored.
.IP "\(bu" 4
\&\f(CW\*(C`warn ""\*(C'\fR now treats \f(CW$@\fR wit a number up in it tha same way, regardless of
whether it happened via \f(CW\*(C`$@=3\*(C'\fR or \f(CW\*(C`$@="3"\*(C'\fR.  It used ta ignore the
forma n' shit.  Now it appendz \*(L"\et...caught\*(R", as it has always done with
\&\f(CW\*(C`$@="3"\*(C'\fR.
.IP "\(bu" 4
Numeric operators on magical variablez (e.g., \f(CW\*(C`$1\ +\ 1\*(C'\fR) used ta use
floatin point operations even where integer operations was mo' appropriate,
resultin up in loss of accuracy on 64\-bit platforms [perl #109542].
.IP "\(bu" 4
Unary negation no longer treats a strang as a number if tha strang happened
to be used as a number at some point.  So, if \f(CW$x\fR gotz nuff tha strang \*(L"dawgs\*(R",
\&\f(CW\*(C`\-$x\*(C'\fR returns \*(L"\-dawgs\*(R" even if \f(CW\*(C`$y=0+$x\*(C'\fR has happened at some point.
.IP "\(bu" 4
In Perl v5.14, \f(CW\*(C`\-\*(Aq\-10\*(Aq\*(C'\fR was fixed ta return \*(L"10\*(R", not \*(L"+10\*(R".  But magical
variablez (\f(CW$1\fR, ties) was not fixed till now [perl #57706].
.IP "\(bu" 4
Unary negation now treats strings consistently, regardless of tha internal
\&\f(CW\*(C`UTF8\*(C'\fR flag.
.IP "\(bu" 4
A regression introduced up in Perl v5.16.0 involving
\&\f(CW\*(C`tr/\f(CISEARCHLIST\f(CW/\f(CIREPLACEMENTLIST\f(CW/\*(C'\fR has been fixed. Y'all KNOW dat shit, muthafucka!  Only tha first
instizzle is supposed ta be meaningful if a cold-ass lil characta appears mo' than
once up in \f(CW\*(C`\f(CISEARCHLIST\f(CW\*(C'\fR.  Under some circumstances, tha final instance
was overridin all earlier ones.  [perl #113584]
.IP "\(bu" 4
Regular expressions like \f(CW\*(C`qr/\e87/\*(C'\fR previously silently banged a \s-1NUL\s0
character, thus matchin as if it had been freestyled \f(CW\*(C`qr/\e00087/\*(C'\fR.  Now it
matches as if it had been freestyled as \f(CW\*(C`qr/87/\*(C'\fR, wit a message dat the
sequence \f(CW"\e8"\fR is unrecognized.
.IP "\(bu" 4
\&\f(CW\*(C`_\|_SUB_\|_\*(C'\fR now works up in special blocks (\f(CW\*(C`BEGIN\*(C'\fR, \f(CW\*(C`END\*(C'\fR, etc.).
.IP "\(bu" 4
Thread creation on Windows could theoretically result up in a cold-ass lil crash if done
inside a \f(CW\*(C`BEGIN\*(C'\fR block.  It still do not work properly yo, but it no longer
crashes [perl #111610].
.IP "\(bu" 4
\&\f(CW\*(C`\e&{\*(Aq\*(Aq}\*(C'\fR (with tha empty string) now autovivifies a stub like any other
sub name, n' no longer produces tha \*(L"Unable ta create sub\*(R" error
[perl #94476].
.IP "\(bu" 4
A regression introduced up in v5.14.0 has been fixed, up in which some calls
to tha \f(CW\*(C`re\*(C'\fR module would clobber \f(CW$_\fR [perl #113750].
.IP "\(bu" 4
\&\f(CW\*(C`do FILE\*(C'\fR now always either sets or clears \f(CW$@\fR, even when tha file can't be
read. Y'all KNOW dat shit, muthafucka! This ensures dat testin \f(CW$@\fR first (as recommended by the
documentation) always returns tha erect result.
.IP "\(bu" 4
Da array iterator used fo' tha \f(CW\*(C`each @array\*(C'\fR construct is now erectly
reset when \f(CW@array\fR is cleared [perl #75596]. This happens, fo' example, when
the array is globally assigned to, as up in \f(CW\*(C`@array = (...)\*(C'\fR yo, but not when its
\&\fBvalues\fR is assigned to. In termz of tha \s-1XS API,\s0 it means dat \f(CW\*(C`av_clear()\*(C'\fR
will now reset tha iterator.
.Sp
This mirrors tha behaviour of tha hash iterator when tha hash is cleared.
.IP "\(bu" 4
\&\f(CW\*(C`$class\->can\*(C'\fR, \f(CW\*(C`$class\->isa\*(C'\fR, n' \f(CW\*(C`$class\->DOES\*(C'\fR now return
correct thangs up in dis biatch, regardless of whether dat package referred ta by \f(CW$class\fR
exists [perl #47113].
.IP "\(bu" 4
Arrivin signals no longer clear \f(CW$@\fR [perl #45173].
.IP "\(bu" 4
Allow \f(CW\*(C`my ()\*(C'\fR declarations wit a empty variable list [perl #113554].
.IP "\(bu" 4
Durin parsing, subs declared afta errors no longer leave stubs
[perl #113712].
.IP "\(bu" 4
Closures containin no strang evals no longer hang on ta they containing
subroutines, allowin variablez closed over by outa subroutines ta be
freed when tha outa sub is freed, even if tha inner sub still exists
[perl #89544].
.IP "\(bu" 4
Duplication of in-memory filehandlez by openin wit a \*(L"<&=\*(R" or \*(L">&=\*(R" mode
stopped hustlin properly up in v5.16.0.  Dat shiznit was causin tha freshly smoked up handle to
reference a gangbangin' finger-lickin' different scalar variable.  This has been fixed [perl #113764].
.IP "\(bu" 4
\&\f(CW\*(C`qr//\*(C'\fR expressions no longer crash wit custom regular expression engines
that do not set \f(CW\*(C`offs\*(C'\fR at regular expression compilation time
[perl #112962].
.IP "\(bu" 4
\&\f(CW\*(C`delete local\*(C'\fR no longer crashes wit certain magical arrays n' hashes
[perl #112966].
.IP "\(bu" 4
\&\f(CW\*(C`local\*(C'\fR on elementz of certain magical arrays n' hashes used not to
arrange ta have tha element deleted on scope exit, even if tha element did
not exist before \f(CW\*(C`local\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`scalar(write)\*(C'\fR no longer returns multiple shit [perl #73690].
.IP "\(bu" 4
Strin ta floatin point conversions no longer misparse certain strings under
\&\f(CW\*(C`use locale\*(C'\fR [perl #109318].
.IP "\(bu" 4
\&\f(CW@INC\fR filtas dat take a thugged-out dirtnap no longer leak memory [perl #92252].
.IP "\(bu" 4
Da implementationz of overloaded operations is now called up in tha erect
context. This allows, among other thangs, bein able ta properly override
\&\f(CW\*(C`<>\*(C'\fR [perl #47119].
.IP "\(bu" 4
Specifyin only tha \f(CW\*(C`fallback\*(C'\fR key when callin \f(CW\*(C`use overload\*(C'\fR now behaves
properly [perl #113010].
.IP "\(bu" 4
\&\f(CW\*(C`sub foo { mah $a = 0; while ($a) { ... } }\*(C'\fR and
\&\f(CW\*(C`sub foo { while (0) { ... } }\*(C'\fR now return tha same thang [perl #73618].
.IP "\(bu" 4
Strin negation now behaves tha same ol' dirty under \f(CW\*(C`use integer;\*(C'\fR as it do
without [perl #113012].
.IP "\(bu" 4
\&\f(CW\*(C`chr\*(C'\fR now returns tha Unicode replacement characta (U+FFFD) fo' \-1,
regardless of tha internal representation. I aint talkin' bout chicken n' gravy biatch.  \-1 used ta wrap if tha argument
was tied or a strang internally.
.IP "\(bu" 4
Usin a \f(CW\*(C`format\*(C'\fR afta its enclosin sub was freed could crash as of
perl v5.12.0, if tha format referenced lexical variablez from tha outa sub.
.IP "\(bu" 4
Usin a \f(CW\*(C`format\*(C'\fR afta its enclosin sub was undefined could crash as of
perl v5.10.0, if tha format referenced lexical variablez from tha outa sub.
.IP "\(bu" 4
Usin a \f(CW\*(C`format\*(C'\fR defined inside a cold-ass lil closure, which format references
lexical variablez from outside, never straight-up hit dat shiznit unless tha \f(CW\*(C`write\*(C'\fR
call was directly inside tha closure.  In v5.10.0 it even started crashing.
Now tha copy of dat closure nearest tha top of tha call stack is used to
find dem variables.
.IP "\(bu" 4
Formats dat close over variablez up in special blocks no longer crash if a
stub exists wit tha same name as tha special block before tha special
block is compiled.
.IP "\(bu" 4
Da parser no longer gets confused, treatin \f(CW\*(C`eval foo ()\*(C'\fR as a syntax
error if preceded by \f(CW\*(C`print;\*(C'\fR [perl #16249].
.IP "\(bu" 4
Da return value of \f(CW\*(C`syscall\*(C'\fR is no longer truncated on 64\-bit platforms
[perl #113980].
.IP "\(bu" 4
Constant foldin no longer causes \f(CW\*(C`print 1 ? FOO : BAR\*(C'\fR ta print ta the
\&\s-1FOO\s0 handle [perl #78064].
.IP "\(bu" 4
\&\f(CW\*(C`do subname\*(C'\fR now calls tha named subroutine n' uses tha file name it
returns, instead of openin a gangbangin' file named \*(L"subname\*(R".
.IP "\(bu" 4
Subroutines looked up by rv2cv check hooks (registered by \s-1XS\s0 modules) are
now taken tha fuck into consideration when determinin whether \f(CW\*(C`foo bar\*(C'\fR should be
the sub call \f(CW\*(C`foo(bar)\*(C'\fR or tha method call \f(CW\*(C`"bar"\->foo\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`CORE::foo::bar\*(C'\fR is no longer treated specially, allowin global overrides
to be called directly via \f(CW\*(C`CORE::GLOBAL::uc(...)\*(C'\fR [perl #113016].
.IP "\(bu" 4
Callin a undefined sub whose typeglob has been undefined now produces the
customary \*(L"Undefined subroutine called\*(R" error, instead of \*(L"Not a \s-1CODE\s0
reference\*(R".
.IP "\(bu" 4
Two bugs involvin \f(CW@ISA\fR done been fixed. Y'all KNOW dat shit, muthafucka!  \f(CW\*(C`*ISA = *glob_without_array\*(C'\fR and
\&\f(CW\*(C`undef *ISA; @{*ISA}\*(C'\fR would prevent future modifications ta \f(CW@ISA\fR from
uppimpin tha internal caches used ta look up methods.  The
*glob_without_array case was a regression from Perl v5.12.
.IP "\(bu" 4
Regular expression optimisations sometimes caused \f(CW\*(C`$\*(C'\fR wit \f(CW\*(C`/m\*(C'\fR to
produce failed or incorrect matches [perl #114068].
.IP "\(bu" 4
\&\f(CW\*(C`_\|_SUB_\|_\*(C'\fR now works up in a \f(CW\*(C`sort\*(C'\fR block when tha enclosin subroutine is
predeclared wit \f(CW\*(C`sub foo;\*(C'\fR syntax [perl #113710].
.IP "\(bu" 4
Unicode propertizzles only apply ta Unicode code points, which leadz to
some subtletizzles when regular expressions is matched against
above-Unicode code points, n' you can put dat on yo' toast.  There be a warnin generated ta draw your
attention ta all dis bullshit.  But fuck dat shiznit yo, tha word on tha street is dat dis warnin was bein generated
inappropriately up in some cases, like fuckin when a program was bein parsed.
Non-Unicode matches like fuckin \f(CW\*(C`\ew\*(C'\fR n' \f(CW\*(C`[:word:]\*(C'\fR should not generate the
warning, as they definitions don't limit dem ta apply ta only Unicode
code points, n' you can put dat on yo' toast.  Now tha message is only generated when matchin against
\&\f(CW\*(C`\ep{}\*(C'\fR n' \f(CW\*(C`\eP{}\*(C'\fR.  There remains a funky-ass bug, [perl #114148], fo' tha hella
few propertizzles up in Unicode dat match just a single code point.  The
warnin aint generated if they is matched against a above-Unicode
code point.
.IP "\(bu" 4
Uninitialized warnings mentionin hash elements would only mention the
element name if dat shiznit was not up in tha straight-up original gangsta bucket of tha hash, cuz of an
off-by-one error.
.IP "\(bu" 4
A regular expression optimizer bug could cause multiline \*(L"^\*(R" ta behave
incorrectly up in tha presence of line breaks, such that
\&\f(CW\*(C`"/\en\en" =~ m#\eA(?:^/$)#im\*(C'\fR would not match [perl #115242].
.IP "\(bu" 4
Failed \f(CW\*(C`fork\*(C'\fR up in list context no longer corrupts tha stack.
\&\f(CW\*(C`@a = (1, 2, fork, 3)\*(C'\fR used ta gobble up tha 2 n' assign \f(CW\*(C`(1, undef, 3)\*(C'\fR
if tha \f(CW\*(C`fork\*(C'\fR call failed.
.IP "\(bu" 4
Numerous memory leaks done been fixed, mostly involvin tied variablez that
die, regular expression characta classes n' code blocks, n' syntax
errors.
.IP "\(bu" 4
Assignin a regular expression (\f(CW\*(C`${qr//}\*(C'\fR) ta a variable dat happens to
hold a gangbangin' floatin point number no longer causes assertion failures on
debuggin builds.
.IP "\(bu" 4
Assignin a regular expression ta a scalar containin a number no longer
causes subsequent numification ta produce random numbers.
.IP "\(bu" 4
Assignin a regular expression ta a magic variable no longer wipes away the
magic.  This was a regression from v5.10.
.IP "\(bu" 4
Assignin a regular expression ta a pimped scalar no longer thangs up in dis biatch in
crashes.  This was also a regression from v5.10.
.IP "\(bu" 4
Regular expression can now be assigned ta tied hash n' array elements with
flattenin tha fuck into strings.
.IP "\(bu" 4
Numifyin a regular expression no longer thangs up in dis biatch up in a uninitialized
warning.
.IP "\(bu" 4
Negatizzle array indices no longer cause \s-1EXISTS\s0 methodz of tied variablez to
be ignored. Y'all KNOW dat shit, muthafucka!  This was a regression from v5.12.
.IP "\(bu" 4
Negatizzle array indices no longer result up in crashes on arrays tied to
non-objects.
.IP "\(bu" 4
\&\f(CW\*(C`$byte_overload .= $utf8\*(C'\fR no longer thangs up in dis biatch up in doubly-encoded \s-1UTF\-8\s0 if the
left-hand scalar happened ta have produced a \s-1UTF\-8\s0 strang tha last time
overloadin was invoked.
.IP "\(bu" 4
\&\f(CW\*(C`goto &sub\*(C'\fR now uses tha current value of \f(CW@_\fR, instead of rockin tha array
the subroutine was originally called with.  This means
\&\f(CW\*(C`local @_ = (...); goto &sub\*(C'\fR now works [perl #43077].
.IP "\(bu" 4
If a thugged-out debugger is invoked recursively, it no longer stomps on its own
lexical variables.  Formerly under recursion all calls would share tha same
set of lexical variablez [perl #115742].
.IP "\(bu" 4
\&\f(CW*_{ARRAY}\fR returned from a subroutine no longer spontaneously
becomes empty.
.IP "\(bu" 4
When rockin \f(CW\*(C`say\*(C'\fR ta print ta a tied filehandle, tha value of \f(CW\*(C`$\e\*(C'\fR is
correctly localized, even if dat shiznit was previously undef.  [perl #119927]
.SH "Known Problems"
.IX Header "Known Problems"
.IP "\(bu" 4
UTF8\-flagged strings up in \f(CW%ENV\fR on HP-UX 11.00 is buggy
.Sp
Da interaction of UTF8\-flagged strings n' \f(CW%ENV\fR on HP-UX 11.00 is
currently dodgy up in some not-yet-fully-diagnosed way.  Expect test
failures up in \fIt/op/magic.t\fR, followed by unknown behavior when storing
wide charactas up in tha environment.
.SH "Obituary"
.IX Header "Obituary"
Hojung Yoon (\s-1AMORETTE\s0), 24, of Seoul, Downtown Korea, went ta his fuckin long rest
on May 8, 2013 wit llama figurine n' autographed \s-1TIMTOADY\s0 card. Y'all KNOW dat shit, muthafucka!  He
was a funky-ass solid lil' Perl 5 & 6 hacker n' a thugged-out devoted gangmember of
Seoul.pm.  Dude programmed Perl, talked Perl, ate Perl, n' loved Perl.  We
believe dat he is still programmin up in Perl wit his wild lil' fucked up \s-1IBM\s0 laptop
somewhere, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  Dude is ghon be missed.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl v5.18.0 represents approximately 12 monthz of pimpment since
Perl v5.16.0 n' gotz nuff approximately 400,000 linez of chizzlez across
2,100 filez from 113 authors.
.PP
Perl continues ta flourish tha fuck into its third decade props ta a vibrant
communitizzle of playas n' pimpers. Da followin playas is known to
have contributed tha improvements dat became Perl v5.18.0:
.PP
Aaron Crane, Aaron Trevena, Abhijit Menon-Sen, Adrian M. Enache, Alan
Haggai Alavi, Alexandr Ciornii, Andrew Tam, Andy Dougherty, Anton Nikishaev,
Aristotle Pagaltzis, Augustina Blair, Bob Ernst, Brad Gilbert, Breno G. de
Oliveira, Brian Carlson, Brian Fraser, Charlie Gonzalez, Chip Salzenberg, Chris
\&'BinGOs' Williams, Christian Hansen, Colin Kuskie, Craig A. Berry, Dagfinn
Ilmari Mannsa\*oker, Daniel Dragan, Daniel Perrett, Darin McBride, Dizzle Rolsky,
Dizzy Golden, Dizzy Leadbeater, Dizzy Mitchell, Dizzy Nicol, Dominic
Hargreaves, E. Choroba, Eric Brine, Evan Miller, Father Chrysostomos, Florian
Ragwitz, Franc\*,ois Perrad, George Greer, Goro Fuji, H.Merijn Brand, Herbert
Breunung, Hugo van der Sanden, Igor Zaytsev, Jizzy E Keenan, Jan Dubois,
Jasmine Ahuja, Jeremy D yo. Hedden, Jizz Robinson, Jizzy Luehrs, Joaquin Ferrero,
Joel Berger, Jizzy Goodyear, Jizzy Peacock, Karen Etheridge, Karl Williamson,
Karthik Rajagopalan, Kent Fredric, Leon Timmermans, Lucas Holt, Lukas Mai,
Marcus Holland-Moritz, Markus Jansen, Martin Hasch, Matthew Horsfall, Max
Maischein, Mike G Schwern, Mike Schroeder, Moritz Lenz, Nicholas Clark,
Niko Tyni, Oleg Nesterov, Patrik Ha\*:gglund, Pizzle Green, Pizzle Johnson, Paul
Marquess, Peta Martini, Rafael Garcia-Suarez, Reini Urban, Renee Baecker,
Rhesa Rozendaal, Ricardo Signes, Robin Barker, Ronald J. Kimball, Ruslan
Zakirov, Salvador Fandin\*~o, Sawyer X, Scott Lanning, Sergey Alekseev, Shawn M
Moore, Shirakata Kentaro, Shlomi Fish, Sisyphus, Smylers, Steffen Mu\*:ller,
Steve Hay, Steve Peters, Steven Schubiger, Sullivan Beck, Sven Strickroth,
Se\*'bastien Aperghis-Tramoni, Thomas Sibley, Tobias Leich, Tomothy Wyant, Tony Cook,
Vadim Konovalov, Vincent Pit, Volker Schatz, Walt Mankowski, Yves Orton,
Zefram.
.PP
Da list above be almost certainly incomplete as it be automatically generated
from version control history. In particular, it do not include tha names of
the (very much appreciated) contributors whoz ass reported thangs ta tha Perl bug
tracker.
.PP
Many of tha chizzlez included up in dis version originated up in tha \s-1CPAN\s0 modules
included up in Perlz core. We grateful ta tha entire \s-1CPAN\s0 hood for
helpin Perl ta flourish.
.PP
For a mo' complete list of all of Perlz oldschool contributors, please see
the \fI\s-1AUTHORS\s0\fR file up in tha Perl source distribution.
.SH "Reportin Bugs"
.IX Header "Reportin Bugs"
If you find what tha fuck you be thinkin be a funky-ass bug, you might check tha articlez recently
posted ta tha comp.lang.perl.misc newsgroup n' tha perl bug database at
http://rt.perl.org/perlbug/ .  There may also be shiznit at
http://www.perl.org/ , tha Perl Home Page.
.PP
If you believe you have a unreported bug, please run tha perlbug program
included wit yo' release.  Be shizzle ta trim yo' bug down ta a tiny but
sufficient test case.  Yo crazy-ass bug report, along wit tha output of \f(CW\*(C`perl \-V\*(C'\fR,
will be busted off ta perlbug@perl.org ta be analysed by tha Perl portin crew.
.PP
If tha bug yo ass is reportin has securitizzle implications, which make it
inappropriate ta bust ta a publicly archived mailin list, then please bust it
to perl5\-security\-report@perl.org.  This points ta a cold-ass lil closed subscription
unarchived mailin list, which includes all tha core committers, whoz ass will be
able ta help assess tha impact of issues, figure up a resolution, n' help
co-ordinizzle tha release of patches ta mitigate or fix tha problem across all
platforms on which Perl is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Please only use dis address for
securitizzle thangs up in tha Perl core, not fo' modulez independently distributed on
\&\s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Da \fIChanges\fR file fo' a explanation of how tha fuck ta view exhaustizzle details on
what chizzled.
.PP
Da \fI\s-1INSTALL\s0\fR file fo' how tha fuck ta build Perl.
.PP
Da \fI\s-1README\s0\fR file fo' general stuff.
.PP
Da \fIArtistic\fR n' \fICopying\fR filez fo' copyright shiznit.
