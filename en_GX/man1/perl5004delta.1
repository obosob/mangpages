.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5004DELTA 1"
.TH PERL5004DELTA 1 "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5004delta \- whatz freshly smoked up fo' perl5.004
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document raps bout differences between tha 5.003 release (as
documented up in \fIProgrammin Perl\fR, second edition\*(--the Camel Book) and
this one.
.SH "Supported Environments"
.IX Header "Supported Environments"
Perl5.004 buildz outta tha box on Unix, Plan 9, LynxOS, \s-1VMS, OS/2,
QNX,\s0 AmigaOS, n' Windows \s-1NT. \s0 Perl runs on Windows 95 as well yo, but it
cannot be built there, fo' lack of a reasonable command interpreter.
.SH "Core Chizzles"
.IX Header "Core Chizzles"
Most blinginly, nuff bugs was fixed, includin nuff muthafuckin security
problems.  See tha \fIChanges\fR file up in tha distribution fo' details.
.ie n .SS "List assignment ta %ENV works"
.el .SS "List assignment ta \f(CW%ENV\fP works"
.IX Subsection "List assignment ta %ENV works"
\&\f(CW\*(C`%ENV = ()\*(C'\fR n' \f(CW\*(C`%ENV = @list\*(C'\fR now work as expected (except on \s-1VMS\s0
where it generates a gangbangin' fatal error).
.ie n .SS "Change ta ""Can't locate Foo.pm up in @INC"" error"
.el .SS "Change ta ``Can't locate Foo.pm up in \f(CW@INC\fP'' error"
.IX Subsection "Change ta Can't locate Foo.pm up in @INC error"
Da error \*(L"Can't locate Foo.pm up in \f(CW@INC\fR\*(R" now lists tha contentz of \f(CW@INC\fR
for easier debugging.
.SS "Compilation option: Binary compatibilitizzle wit 5.003"
.IX Subsection "Compilation option: Binary compatibilitizzle wit 5.003"
There be a freshly smoked up Configure question dat asks if you wanna maintain
binary compatibilitizzle wit Perl 5.003.  If you chizzle binary
compatibility, you do not gotta recompile yo' extensions yo, but you
might have symbol conflicts if you embed Perl up in another application,
just as up in tha 5.003 release.  By default, binary compatibility
is preserved all up in tha expense of symbol table bullshit.
.ie n .SS "$PERL5OPT environment variable"
.el .SS "\f(CW$PERL5OPT\fP environment variable"
.IX Subsection "$PERL5OPT environment variable"
Yo ass may now put Perl options up in tha \f(CW$PERL5OPT\fR environment variable.
Unless Perl is hustlin wit taint checks, it will interpret this
variable as if its contents had rocked up on a \*(L"#!perl\*(R" line at the
beginnin of yo' script, except dat hyphens is optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  \s-1PERL5OPT\s0
may only be used ta set tha followin switches: \fB\-[DIMUdmw]\fR.
.SS "Limitations on \fB\-M\fP, \fB\-m\fP, n' \fB\-T\fP options"
.IX Subsection "Limitations on -M, -m, n' -T options"
Da \f(CW\*(C`\-M\*(C'\fR n' \f(CW\*(C`\-m\*(C'\fR options is no longer allowed on tha \f(CW\*(C`#!\*(C'\fR line of
a script.  If a script needz a module, it should invoke it wit the
\&\f(CW\*(C`use\*(C'\fR pragma.
.PP
Da \fB\-T\fR option be also forbidden on tha \f(CW\*(C`#!\*(C'\fR line of a script,
unless dat shiznit was present on tha Perl command line.  Cuz of tha way \f(CW\*(C`#!\*(C'\fR
works, dis probably means dat \fB\-T\fR must be up in tha straight-up original gangsta argument.
Thus:
.PP
.Vb 1
\&    #!/usr/bin/perl \-T \-w
.Ve
.PP
will probably work fo' a executable script invoked as \f(CW\*(C`scriptname\*(C'\fR,
while:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w \-T
.Ve
.PP
will probably fail under tha same conditions.  (Non-Unix systems will
probably not follow dis rule.)  But \f(CW\*(C`perl scriptname\*(C'\fR is guaranteed
to fail, since then there is no chizzle of \fB\-T\fR bein found on the
command line before it is found on tha \f(CW\*(C`#!\*(C'\fR line.
.SS "Mo' precise warnings"
.IX Subsection "Mo' precise warnings"
If you removed tha \fB\-w\fR option from yo' Perl 5.003 scripts cuz it
made Perl too verbose, we recommend dat you try puttin it back when
you upgrade ta Perl 5.004.  Each freshly smoked up perl version tendz ta remove some
undesirable warnings, while addin freshly smoked up warnings dat may catch bugs in
your scripts.
.ie n .SS "Deprecated: Inherited ""AUTOLOAD"" fo' non-methods"
.el .SS "Deprecated: Inherited \f(CWAUTOLOAD\fP fo' non-methods"
.IX Subsection "Deprecated: Inherited AUTOLOAD fo' non-methods"
Before Perl 5.004, \f(CW\*(C`AUTOLOAD\*(C'\fR functions was looked up as methods
(usin tha \f(CW@ISA\fR hierarchy), even when tha function ta be autoloaded
was called as a plain function (e.g. \f(CW\*(C`Foo::bar()\*(C'\fR), not a method
(e.g. \f(CW\*(C`Foo\->bar()\*(C'\fR or \f(CW\*(C`$obj\->bar()\*(C'\fR).
.PP
Perl 5.005 will use method lookup only fo' methods' \f(CW\*(C`AUTOLOAD\*(C'\fRs.
But fuck dat shiznit yo, tha word on tha street is dat there be a thugged-out dope base of existin code dat may be using
the oldschool behavior. Shiiit, dis aint no joke.  So, as a interim step, Perl 5.004 thangs a optional
warnin when a non-method uses a inherited \f(CW\*(C`AUTOLOAD\*(C'\fR.
.PP
Da simple rule is:  Inheritizzle aint gonna work when autoloading
non-methods.  Da simple fix fo' oldschool code is:  In any module dat used to
depend on inheritin \f(CW\*(C`AUTOLOAD\*(C'\fR fo' non-methodz from a funky-ass base class named
\&\f(CW\*(C`BaseClass\*(C'\fR, execute \f(CW\*(C`*AUTOLOAD = \e&BaseClass::AUTOLOAD\*(C'\fR durin startup.
.ie n .SS "Previously deprecated %OVERLOAD is no longer usable"
.el .SS "Previously deprecated \f(CW%OVERLOAD\fP is no longer usable"
.IX Subsection "Previously deprecated %OVERLOAD is no longer usable"
Usin \f(CW%OVERLOAD\fR ta define overloadin was deprecated up in 5.003.
Overloadin is now defined rockin tha overload pragma. \f(CW%OVERLOAD\fR is
still used internally but should not be used by Perl scripts, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. See
overload fo' mo' details.
.SS "Subroutine arguments pimped only when they modified"
.IX Subsection "Subroutine arguments pimped only when they modified"
In Perl 5.004, nonexistent array n' hash elements used as subroutine
parametas is brought tha fuck into existence only if they is actually
assigned ta (via \f(CW@_\fR).
.PP
Earlier versionz of Perl vary up in they handlin of such arguments.
Perl versions 5.002 n' 5.003 always brought dem tha fuck into existence.
Perl versions 5.000 n' 5.001 brought dem tha fuck into existence only if
they was not tha straight-up original gangsta argument (which was almost certainly a funky-ass bug).
Earlier versionz of Perl never brought dem tha fuck into existence.
.PP
For example, given dis code:
.PP
.Vb 5
\&     undef @a; undef %a;
\&     sub show { print $_[0] };
\&     sub chizzle { $_[0]++ };
\&     show($a[2]);
\&     chizzle($a{b});
.Ve
.PP
Afta dis code executes up in Perl 5.004, \f(CW$a\fR{b} exists but \f(CW$a\fR[2] do
not.  In Perl 5.002 n' 5.003, both \f(CW$a\fR{b} n' \f(CW$a\fR[2] would have existed
(but \f(CW$a\fR[2]z value would done been undefined).
.ie n .SS "Group vector chizzleable wit $)"
.el .SS "Group vector chizzleable wit \f(CW$)\fP"
.IX Subsection "Group vector chizzleable wit $)"
Da \f(CW$)\fR special variable has always (well, up in Perl 5, at least)
reflected not only tha current effectizzle crew yo, but also tha crew list
as returned by tha \f(CW\*(C`getgroups()\*(C'\fR C function (if there is one).
But fuck dat shiznit yo, tha word on tha street is dat until dis release, there has not been a way ta booty-call the
\&\f(CW\*(C`setgroups()\*(C'\fR C function from Perl.
.PP
In Perl 5.004, assignin ta \f(CW$)\fR is exactly symmetrical wit examining
it: Da first number up in its strang value is used as tha effectizzle gid;
if there be any numbers afta tha straight-up original gangsta one, they is passed ta the
\&\f(CW\*(C`setgroups()\*(C'\fR C function (if there is one).
.SS "Fixed parsin of $$<digit>, &$<digit>, etc."
.IX Subsection "Fixed parsin of $$<digit>, &$<digit>, etc."
Perl versions before 5.004 misinterpreted any type marker followed by
\&\*(L"$\*(R" n' a gangbangin' finger-lickin' digit.  For example, \*(L"$$0\*(R" was incorrectly taken ta mean
\&\*(L"${$}0\*(R" instead of \*(L"${$0}\*(R".  This bug is (mostly) fixed up in Perl 5.004.
.PP
But fuck dat shiznit yo, tha word on tha street is dat tha pimperz of Perl 5.004 could not fix dis bug straight-up,
because at least two widely-used modulez depend on tha oldschool meanin of
\&\*(L"$$0\*(R" up in a string.  So Perl 5.004 still interprets \*(L"$$<digit>\*(R" up in the
old (broken) way inside strings; but it generates dis message as a
warning.  And up in Perl 5.005, dis special treatment will cease.
.SS "Fixed localization of $<digit>, $&, etc."
.IX Subsection "Fixed localization of $<digit>, $&, etc."
Perl versions before 5.004 did not always properly localize the
regex-related special variables.  Perl 5.004 do localize them, as
the documentation has always holla'd it should. Y'all KNOW dat shit, muthafucka!  This may result up in \f(CW$1\fR,
\&\f(CW$2\fR, etc. no longer bein set where existin programs use em.
.SS "No resettin of $. on implicit close"
.IX Subsection "No resettin of $. on implicit close"
Da documentation fo' Perl 5.0 has always stated dat \f(CW$.\fR is \fInot\fR
reset when a already-open file handle is reopened wit no intervening
call ta \f(CW\*(C`close\*(C'\fR.  Cuz of a funky-ass bug, perl versions 5.000 all up in 5.003
\&\fIdid\fR reset \f(CW$.\fR under dat circumstance; Perl 5.004 do not.
.ie n .SS """wantarray"" may return undef"
.el .SS "\f(CWwantarray\fP may return undef"
.IX Subsection "wantarray may return undef"
Da \f(CW\*(C`wantarray\*(C'\fR operator returns legit if a subroutine is sposed ta fuckin
return a list, n' false otherwise.  In Perl 5.004, \f(CW\*(C`wantarray\*(C'\fR can
also return tha undefined value if a subroutinez return value will
not be used at all, which allows subroutines ta avoid a time-consuming
calculation of a return value if it aint goin ta be used.
.ie n .SS """eval EXPR"" determines value of \s-1EXPR\s0 up in scalar context"
.el .SS "\f(CWeval EXPR\fP determines value of \s-1EXPR\s0 up in scalar context"
.IX Subsection "eval EXPR determines value of EXPR up in scalar context"
Perl (version 5) used ta determine tha value of \s-1EXPR\s0 inconsistently,
sometimes incorrectly rockin tha surroundin context fo' tha determination.
Now, tha value of \s-1EXPR \s0(before bein parsed by eval) be always determined in
a scalar context.  Once parsed, it is executed as before, by providing
the context dat tha scope surroundin tha eval provided. Y'all KNOW dat shit, muthafucka!  This chizzle
makes tha behavior Perl4 compatible, besides fixin bugs resultin from
the inconsistent behavior. Shiiit, dis aint no joke.  This program:
.PP
.Vb 3
\&    @a = qw(time now is time);
\&    print eval @a;
\&    print \*(Aq|\*(Aq, scalar eval @a;
.Ve
.PP
used ta print suttin' like \*(L"timenowis881399109|4\*(R" yo, but now (and up in perl4)
prints \*(L"4|4\*(R".
.SS "Changes ta taintin checks"
.IX Subsection "Changes ta taintin checks"
A bug up in previous versions may have failed ta detect some insecure
conditions when taint checks is turned on. I aint talkin' bout chicken n' gravy biatch.  (Taint checks is used
in setuid or setgid scripts, or when explicitly turned on wit the
\&\f(CW\*(C`\-T\*(C'\fR invocation option.)  Although itz unlikely, dis may cause a
previously-workin script ta now fail, which should be construed
as a funky-ass blessin since dat indicates a potentially-serious security
hole was just plugged.
.PP
Da freshly smoked up restrictions when taintin include:
.IP "No \fIglob()\fR or <*>" 4
.IX Item "No glob() or <*>"
These operators may spawn tha C shell (csh), which cannot be made
safe.  This restriction is ghon be lifted up in a gangbangin' future version of Perl
when globbin is implemented without tha use of a external program.
.ie n .IP "No spawnin if tainted $CDPATH, $ENV, $BASH_ENV" 4
.el .IP "No spawnin if tainted \f(CW$CDPATH\fR, \f(CW$ENV\fR, \f(CW$BASH_ENV\fR" 4
.IX Item "No spawnin if tainted $CDPATH, $ENV, $BASH_ENV"
These environment variablez may alta tha behavior of spawned programs
(especially shells) up in ways dat subvert security.  So now they are
treated as dangerous, up in tha manner of \f(CW$IFS\fR n' \f(CW$PATH\fR.
.ie n .IP "No spawnin if tainted $TERM don't be lookin like a terminal name" 4
.el .IP "No spawnin if tainted \f(CW$TERM\fR don't be lookin like a terminal name" 4
.IX Item "No spawnin if tainted $TERM don't be lookin like a terminal name"
Some termcap libraries do unsafe thangs wit \f(CW$TERM\fR.  But fuck dat shiznit yo, tha word on tha street is dat it would be
unnecessarily harsh ta treat all \f(CW$TERM\fR joints as unsafe, since only shell
metacharactas can cause shiznit up in \f(CW$TERM\fR.  So a tainted \f(CW$TERM\fR is
considered ta be safe if it gotz nuff only alphanumerics, underscores,
dashes, n' colons, n' unsafe if it gotz nuff other charactas (including
whitespace).
.SS "New Opcode module n' revised Safe module"
.IX Subsection "New Opcode module n' revised Safe module"
A freshly smoked up Opcode module supports tha creation, manipulation and
application of opcode masks.  Da revised Safe module has a freshly smoked up \s-1API\s0
and is implemented rockin tha freshly smoked up Opcode module.  Please read tha new
Opcode n' Safe documentation.
.SS "Embeddin improvements"
.IX Subsection "Embeddin improvements"
In olda versionz of Perl dat shiznit was not possible ta create mo' than one
Perl interpreta instizzle inside a single process without leakin like a
sieve and/or crashing.  Da bugs dat caused dis behavior have all been
fixed. Y'all KNOW dat shit, muthafucka!  But fuck dat shiznit yo, tha word on tha street is dat you still must take care when embeddin Perl up in a C
program.  See tha updated perlembed manpage fo' tips on how tha fuck ta manage
your interpreters.
.SS "Internal chizzle: FileHandle class based on IO::* classes"
.IX Subsection "Internal chizzle: FileHandle class based on IO::* classes"
File handlez is now stored internally as type IO::Handle.  The
FileHandle module is still supported fo' backwardz compatibilitizzle yo, but
it is now merely a gangbangin' front end ta tha IO::* modules, specifically
IO::Handle, IO::Seekable, n' IO::File.  We suggest yo, but do not
require, dat you use tha IO::* modulez up in freshly smoked up code.
.PP
In harmony wit dis chizzle, \f(CW*GLOB{FILEHANDLE}\fR is now just a
backward-compatible synonym fo' \f(CW*GLOB{IO}\fR.
.SS "Internal chizzle: PerlIO abstraction intercourse"
.IX Subsection "Internal chizzle: PerlIO abstraction intercourse"
It be now possible ta build Perl wit \s-1AT&T\s0z sfio \s-1IO\s0 package
instead of stdio.  See perlapio fo' mo' details, and
the \fI\s-1INSTALL\s0\fR file fo' how tha fuck ta use dat shit.
.SS "New n' chizzled syntax"
.IX Subsection "New n' chizzled syntax"
.ie n .IP "$coderef\->(\s-1PARAMS\s0)" 4
.el .IP "\f(CW$coderef\fR\->(\s-1PARAMS\s0)" 4
.IX Item "$coderef->(PARAMS)"
A subroutine reference may now be suffixed wit a arrow n' a
(possibly empty) parameta list.  This syntax denotes a cold-ass lil call of the
referenced subroutine, wit tha given parametas (if any).
.Sp
This freshly smoked up syntax bigs up tha pattern of \f(CW\*(C`$hashref\->{FOO}\*(C'\fR and
\&\f(CW\*(C`$aryref\->[$foo]\*(C'\fR: Yo ass may now write \f(CW\*(C`&$subref($foo)\*(C'\fR as
\&\f(CW\*(C`$subref\->($foo)\*(C'\fR.  All these arrow terms may be chained;
thus, \f(CW\*(C`&{$table\->{FOO}}($bar)\*(C'\fR may now be written
\&\f(CW\*(C`$table\->{FOO}\->($bar)\*(C'\fR.
.SS "New n' chizzled builtin constants"
.IX Subsection "New n' chizzled builtin constants"
.IP "_\|_PACKAGE_\|_" 4
.IX Item "__PACKAGE__"
Da current package name at compile time, or tha undefined value if
there is no current package (due ta a \f(CW\*(C`package;\*(C'\fR directive).  Like
\&\f(CW\*(C`_\|_FILE_\|_\*(C'\fR n' \f(CW\*(C`_\|_LINE_\|_\*(C'\fR, \f(CW\*(C`_\|_PACKAGE_\|_\*(C'\fR do \fInot\fR interpolate
into strings.
.SS "New n' chizzled builtin variables"
.IX Subsection "New n' chizzled builtin variables"
.IP "$^E" 4
.IX Item "$^E"
Extended error message on some platforms.  (Also known as
\&\f(CW$EXTENDED_OS_ERROR\fR if you \f(CW\*(C`use Gangsta\*(C'\fR).
.IP "$^H" 4
.IX Item "$^H"
Da current set of syntax checks enabled by \f(CW\*(C`use strict\*(C'\fR.  See the
documentation of \f(CW\*(C`strict\*(C'\fR fo' mo' details.  Not straight-up freshly smoked up yo, but
newly documented.
Because it is intended fo' internal use by Perl core components,
there is no \f(CW\*(C`use Gangsta\*(C'\fR long name fo' dis variable.
.IP "$^M" 4
.IX Item "$^M"
By default, hustlin outta memory it aint trappable.  But fuck dat shiznit yo, tha word on tha street is dat if
compiled fo' this, Perl may use tha contentz of \f(CW$^M\fR as a emergency
pool afta \fIdie()\fRin wit dis message.  Suppose dat yo' Perl were
compiled wit \-DPERL_EMERGENCY_SBRK n' used Perlz malloc.  Then
.Sp
.Vb 1
\&    $^M = \*(Aqa\*(Aq x (1<<16);
.Ve
.Sp
would allocate a 64K buffer fo' use when up in emergency.
See tha \fI\s-1INSTALL\s0\fR file fo' shiznit on how tha fuck ta enable dis option.
As a gangbangin' finger-lickin' disincentizzle ta casual use of dis advanced feature,
there is no \f(CW\*(C`use Gangsta\*(C'\fR long name fo' dis variable.
.SS "New n' chizzled builtin functions"
.IX Subsection "New n' chizzled builtin functions"
.IP "delete on slices" 4
.IX Item "delete on slices"
This now works.  (e.g. \f(CW\*(C`delete @ENV{\*(AqPATH\*(Aq, \*(AqMANPATH\*(Aq}\*(C'\fR)
.IP "flock" 4
.IX Item "flock"
is now supported on mo' platforms, prefers fcntl ta lockf when
emulating, n' always flushes before (un)locking.
.IP "printf n' sprintf" 4
.IX Item "printf n' sprintf"
Perl now implements these functions itself; it don't use tha C
library function \fIsprintf()\fR any more, except fo' floating-point
numbers, n' even then only known flags is allowed. Y'all KNOW dat shit, muthafucka!  As a result, it
is now possible ta know which conversions n' flags will work, and
what they will do.
.Sp
Da freshly smoked up conversions up in Perlz \fIsprintf()\fR are:
.Sp
.Vb 4
\&   %i   a synonym fo' %d
\&   %p   a pointa (the address of tha Perl value, up in hexadecimal)
\&   %n   special: *stores* tha number of charactas output so far
\&        tha fuck into tha next variable up in tha parameta list
.Ve
.Sp
Da freshly smoked up flags dat go between tha \f(CW\*(C`%\*(C'\fR n' tha conversion are:
.Sp
.Vb 3
\&   #    prefix octal wit "0", hex wit "0x"
\&   h    interpret integer as C type "short" or "unsigned short"
\&   V    interpret integer as Perl\*(Aqs standard integer type
.Ve
.Sp
Also, where a number would step tha fuck up in tha flags, a asterisk (\*(L"*\*(R") may
be used instead, up in which case Perl uses tha next item up in the
parameta list as tha given number (that is, as tha field width or
precision).  If a gangbangin' field width obtained all up in \*(L"*\*(R" is negative, it has
the same effect as tha '\-' flag: left-justification.
.Sp
See \*(L"sprintf\*(R" up in perlfunc fo' a cold-ass lil complete list of conversion n' flags.
.IP "keys as a lvalue" 4
.IX Item "keys as a lvalue"
As a lvalue, \f(CW\*(C`keys\*(C'\fR allows you ta increase tha number of hash buckets
allocated fo' tha given hash.  This can bust you a measure of efficiency if
you know tha hash is goin ta git big.  (This is similar ta pre-extending
an array by assignin a larger number ta $#array.)  If you say
.Sp
.Vb 1
\&    keys %hash = 200;
.Ve
.Sp
then \f(CW%hash\fR gonna git at least 200 buckets allocated fo' dat shit.  These
buckets is ghon be retained even if you do \f(CW\*(C`%hash = ()\*(C'\fR; use \f(CW\*(C`undef
%hash\*(C'\fR if you wanna free tha storage while \f(CW%hash\fR is still up in scope.
Yo ass can't shrink tha number of buckets allocated fo' tha hash using
\&\f(CW\*(C`keys\*(C'\fR up in dis way (but you needn't worry bout bustin dis by accident,
as tryin has no effect).
.IP "\fImy()\fR up in Control Structures" 4
.IX Item "my() up in Control Structures"
Yo ass can now use \fImy()\fR (with or without tha parentheses) up in tha control
expressionz of control structures such as:
.Sp
.Vb 5
\&    while (defined(my $line = <>)) {
\&        $line = lc $line;
\&    } continue {
\&        print $line;
\&    }
\&
\&    if ((my $answer = <STDIN>) =~ /^y(es)?$/i) {
\&        user_agrees();
\&    } elsif ($answer =~ /^n(o)?$/i) {
\&        user_disagrees();
\&    } else {
\&        chomp $answer;
\&        take a thugged-out dirtnap "\`$answer\*(Aq is neither \`yes\*(Aq nor \`no\*(Aq";
\&    }
.Ve
.Sp
Also, you can declare a gangbangin' foreach loop control variable as lexical by
precedin it wit tha word \*(L"my\*(R".  For example, in:
.Sp
.Vb 3
\&    foreach mah $i (1, 2, 3) {
\&        some_function();
\&    }
.Ve
.Sp
\&\f(CW$i\fR be a lexical variable, n' tha scope of \f(CW$i\fR extendz ta tha end of
the loop yo, but not beyond dat shit.
.Sp
Note dat you still cannot use \fImy()\fR on global punctuation variables
like fuckin \f(CW$_\fR n' tha like.
.IP "\fIpack()\fR n' \fIunpack()\fR" 4
.IX Item "pack() n' unpack()"
A freshly smoked up format 'w' represents a \s-1BER\s0 compressed integer (as defined in
\&\s-1ASN.1\s0).  Its format be a sequence of one or mo' bytes, each of which
provides seven bitz of tha total value, wit da most thugged-out significant
first.  Bit eight of each byte is set, except fo' tha last byte, in
which bit eight is clear.
.Sp
If 'p' or 'P' is given undef as joints, they now generate a \s-1NULL\s0
pointer.
.Sp
Both \fIpack()\fR n' \fIunpack()\fR now fail when they templates contain invalid
types.  (Invalid types used ta be ignored.)
.IP "\fIsysseek()\fR" 4
.IX Item "sysseek()"
Da freshly smoked up \fIsysseek()\fR operator be a variant of \fIseek()\fR dat sets n' gets the
filez system read/write position, rockin tha \fIlseek\fR\|(2) system call.  It is
the only reliable way ta seek before rockin \fIsysread()\fR or \fIsyswrite()\fR.  Its
return value is tha freshly smoked up position, or tha undefined value on failure.
.IP "use \s-1VERSION\s0" 4
.IX Item "use VERSION"
If tha straight-up original gangsta argument ta \f(CW\*(C`use\*(C'\fR be a number, it is treated as a version
number instead of a module name.  If tha version of tha Perl interpreter
is less than \s-1VERSION,\s0 then a error message is printed n' Perl exits
immediately.  Because \f(CW\*(C`use\*(C'\fR occurs at compile time, dis check happens
immediately durin tha compilation process, unlike \f(CW\*(C`require VERSION\*(C'\fR,
which waits until runtime fo' tha check.  This is often useful if you
need ta check tha current Perl version before \f(CW\*(C`use\*(C'\fRin library modules
which have chizzled up in incompatible ways from olda versionz of Perl.
(We try not ta do dis mo' than our crazy asses have to.)
.IP "use Module \s-1VERSION LIST\s0" 4
.IX Item "use Module VERSION LIST"
If tha \s-1VERSION\s0 argument is present between Module n' \s-1LIST,\s0 then the
\&\f(CW\*(C`use\*(C'\fR will call tha \s-1VERSION\s0 method up in class Module wit tha given
version as a argument.  Da default \s-1VERSION\s0 method, inherited from
the \s-1UNIVERSAL\s0 class, croaks if tha given version is larger than the
value of tha variable \f(CW$Module::VERSION\fR.  (Note dat there aint a
comma afta \s-1VERSION\s0!)
.Sp
This version-checkin mechanizzle is similar ta tha one currently used
in tha Exporta module yo, but it is fasta n' can be used wit modules
that don't use tha Exporter n' shit.  It be tha recommended method fo' new
code.
.IP "prototype(\s-1FUNCTION\s0)" 4
.IX Item "prototype(FUNCTION)"
Returns tha prototype of a gangbangin' function as a strang (or \f(CW\*(C`undef\*(C'\fR if the
function has no prototype).  \s-1FUNCTION\s0 be a reference ta or tha name of the
function whose prototype you wanna retrieve.
(Not straight-up new; just never documented before.)
.IP "srand" 4
.IX Item "srand"
Da default seed fo' \f(CW\*(C`srand\*(C'\fR, which used ta be \f(CW\*(C`time\*(C'\fR, has been chizzled.
Now itz a heady mix of difficult-to-predict system-dependent joints,
which should be sufficient fo' most everydizzle purposes.
.Sp
Previous ta version 5.004, callin \f(CW\*(C`rand\*(C'\fR without first callin \f(CW\*(C`srand\*(C'\fR
would yield tha same sequence of random numbers on most or all machines.
Now, when perl sees dat you callin \f(CW\*(C`rand\*(C'\fR n' aint yet called
\&\f(CW\*(C`srand\*(C'\fR, it calls \f(CW\*(C`srand\*(C'\fR wit tha default seed. Y'all KNOW dat shit, muthafucka! Yo ass should still call
\&\f(CW\*(C`srand\*(C'\fR manually if yo' code might eva be run on a pre\-5.004 system,
of course, or if you want a seed other than tha default.
.ie n .IP "$_ as Default" 4
.el .IP "\f(CW$_\fR as Default" 4
.IX Item "$_ as Default"
Functions documented up in tha Camel ta default ta \f(CW$_\fR now in
fact do, n' all dem dat do is so documented up in perlfunc.
.ie n .IP """m//gc"" do not reset search posizzle on failure" 4
.el .IP "\f(CWm//gc\fR do not reset search posizzle on failure" 4
.IX Item "m//gc do not reset search posizzle on failure"
Da \f(CW\*(C`m//g\*(C'\fR match iteration construct has always reset its target
stringz search posizzle (which is visible all up in tha \f(CW\*(C`pos\*(C'\fR operator)
when a match fails; as a result, tha next \f(CW\*(C`m//g\*(C'\fR match afta a gangbangin' failure
starts again n' again n' again all up in tha beginnin of tha string.  With Perl 5.004, this
reset may be disabled by addin tha \*(L"c\*(R" (for \*(L"continue\*(R") modifier,
i.e. \f(CW\*(C`m//gc\*(C'\fR.  This feature, up in conjunction wit tha \f(CW\*(C`\eG\*(C'\fR zero-width
assertion, make it possible ta chain matches together n' shit.  See perlop
and perlre.
.ie n .IP """m//x"" ignores whitespace before ?*+{}" 4
.el .IP "\f(CWm//x\fR ignores whitespace before ?*+{}" 4
.IX Item "m//x ignores whitespace before ?*+{}"
Da \f(CW\*(C`m//x\*(C'\fR construct has always been intended ta ignore all unescaped
whitespace.  But fuck dat shiznit yo, tha word on tha street is dat before Perl 5.004, whitespace had tha effect of
escapin repeat modifiers like \*(L"*\*(R" or \*(L"?\*(R"; fo' example, \f(CW\*(C`/a *b/x\*(C'\fR was
(mis)interpreted as \f(CW\*(C`/a\e*b/x\*(C'\fR.  This bug has been fixed up in 5.004.
.ie n .IP "nested ""sub{}"" closures work now" 4
.el .IP "nested \f(CWsub{}\fR closures work now" 4
.IX Item "nested sub{} closures work now"
Prior ta tha 5.004 release, nested anonymous functions didn't work
right.  They do now, nahmeean?
.IP "formats work right on changin lexicals" 4
.IX Item "formats work right on changin lexicals"
Just like anonymous functions dat contain lexical variables
that chizzle (like a lexical index variable fo' a \f(CW\*(C`foreach\*(C'\fR loop),
formats now work properly.  For example, dis silently failed
before (printed only zeros) yo, but is fine now:
.Sp
.Vb 8
\&    mah $i;
\&    foreach $i ( 1 .. 10 ) {
\&        write;
\&    }
\&    format =
\&        mah i is @#
\&        $i
\&    .
.Ve
.Sp
But fuck dat shiznit yo, tha word on tha street is dat it still fails (without a warning) if tha foreach is within a
subroutine:
.Sp
.Vb 11
\&    mah $i;
\&    sub foo {
\&      foreach $i ( 1 .. 10 ) {
\&        write;
\&      }
\&    }
\&    foo;
\&    format =
\&        mah i is @#
\&        $i
\&    .
.Ve
.SS "New builtin methods"
.IX Subsection "New builtin methods"
Da \f(CW\*(C`UNIVERSAL\*(C'\fR package automatically gotz nuff tha followin methodz that
are inherited by all other classes:
.IP "isa(\s-1CLASS\s0)" 4
.IX Item "isa(CLASS)"
\&\f(CW\*(C`isa\*(C'\fR returns \fItrue\fR if its object is pimped tha fuck into a subclass of \f(CW\*(C`CLASS\*(C'\fR
.Sp
\&\f(CW\*(C`isa\*(C'\fR be also exportable n' can be called as a sub wit two arguments, n' you can put dat on yo' toast. This
allows tha mobilitizzle ta check what tha fuck a reference points to. Example:
.Sp
.Vb 1
\&    use UNIVERSAL qw(isa);
\&
\&    if(isa($ref, \*(AqARRAY\*(Aq)) {
\&       ...
\&    }
.Ve
.IP "can(\s-1METHOD\s0)" 4
.IX Item "can(METHOD)"
\&\f(CW\*(C`can\*(C'\fR checks ta peep if its object has a method called \f(CW\*(C`METHOD\*(C'\fR,
if it do then a reference ta tha sub is returned; if it do not then
\&\fIundef\fR is returned.
.IP "\s-1VERSION\s0( [\s-1NEED\s0] )" 4
.IX Item "VERSION( [NEED] )"
\&\f(CW\*(C`VERSION\*(C'\fR returns tha version number of tha class (package).  If the
\&\s-1NEED\s0 argument is given then it will check dat tha current version (as
defined by tha \f(CW$VERSION\fR variable up in tha given package) not less than
\&\s-1NEED\s0; it will take a thugged-out dirtnap if dis aint tha case.  This method is normally
called as a cold-ass lil class method. Y'all KNOW dat shit, muthafucka!  This method is called automatically by the
\&\f(CW\*(C`VERSION\*(C'\fR form of \f(CW\*(C`use\*(C'\fR.
.Sp
.Vb 3
\&    use A 1.2 qw(some imported subs);
\&    # implies:
\&    A\->VERSION(1.2);
.Ve
.PP
\&\fB\s-1NOTE:\s0\fR \f(CW\*(C`can\*(C'\fR directly uses Perlz internal code fo' method lookup, and
\&\f(CW\*(C`isa\*(C'\fR uses a straight-up similar method n' cachin game. This may cause
strange effects if tha Perl code dynamically chizzlez \f(CW@ISA\fR up in any package.
.PP
Yo ass may add other methodz ta tha \s-1UNIVERSAL\s0 class via Perl or \s-1XS\s0 code.
Yo ass do not need ta \f(CW\*(C`use UNIVERSAL\*(C'\fR up in order ta make these methods
available ta yo' program.  This is necessary only if you wish to
have \f(CW\*(C`isa\*(C'\fR available as a plain subroutine up in tha current package.
.SS "\s-1TIEHANDLE\s0 now supported"
.IX Subsection "TIEHANDLE now supported"
See perltie fo' other kindz of \fItie()\fRs.
.IP "\s-1TIEHANDLE\s0 classname, \s-1LIST\s0" 4
.IX Item "TIEHANDLE classname, LIST"
This is tha constructor fo' tha class.  That means it is sposed ta fuckin
return a object of some sort. Da reference can be used to
hold some internal shiznit.
.Sp
.Vb 5
\&    sub TIEHANDLE {
\&        print "<shout>\en";
\&        mah $i;
\&        return bless \e$i, shift;
\&    }
.Ve
.IP "\s-1PRINT\s0 this, \s-1LIST\s0" 4
.IX Item "PRINT this, LIST"
This method is ghon be triggered every last muthafuckin time tha tied handle is printed to.
Beyond its self reference it also expects tha list dat was passed to
the print function.
.Sp
.Vb 5
\&    sub PRINT {
\&        $r = shift;
\&        $$r++;
\&        return print join( $, => map {uc} @_), $\e;
\&    }
.Ve
.IP "\s-1PRINTF\s0 this, \s-1LIST\s0" 4
.IX Item "PRINTF this, LIST"
This method is ghon be triggered every last muthafuckin time tha tied handle is printed to
with tha \f(CW\*(C`printf()\*(C'\fR function.
Beyond its self reference it also expects tha format n' list dat was
passed ta tha printf function.
.Sp
.Vb 5
\&    sub PRINTF {
\&        shift;
\&          mah $fmt = shift;
\&        print sprintf($fmt, @_)."\en";
\&    }
.Ve
.IP "\s-1READ\s0 dis \s-1LIST\s0" 4
.IX Item "READ dis LIST"
This method is ghon be called when tha handle is read from via tha \f(CW\*(C`read\*(C'\fR
or \f(CW\*(C`sysread\*(C'\fR functions.
.Sp
.Vb 5
\&    sub READ {
\&        $r = shift;
\&        my($buf,$len,$offset) = @_;
\&        print "READ called, \e$buf=$buf, \e$len=$len, \e$offset=$offset";
\&    }
.Ve
.IP "\s-1READLINE\s0 this" 4
.IX Item "READLINE this"
This method is ghon be called when tha handle is read from. Da method
should return undef when there is no mo' data.
.Sp
.Vb 4
\&    sub READLINE {
\&        $r = shift;
\&        return "PRINT called $$r times\en"
\&    }
.Ve
.IP "\s-1GETC\s0 this" 4
.IX Item "GETC this"
This method is ghon be called when tha \f(CW\*(C`getc\*(C'\fR function is called.
.Sp
.Vb 1
\&    sub GETC { print "Don\*(Aqt GETC, Git Perl"; return "a"; }
.Ve
.IP "\s-1DESTROY\s0 this" 4
.IX Item "DESTROY this"
As wit tha other typez of ties, dis method is ghon be called when the
tied handle be bout ta be destroyed. Y'all KNOW dat shit, muthafucka! This is useful fo' debuggin and
possibly fo' cleanin up.
.Sp
.Vb 3
\&    sub DESTROY {
\&        print "</shout>\en";
\&    }
.Ve
.SS "Malloc enhancements"
.IX Subsection "Malloc enhancements"
If perl is compiled wit tha malloc included wit tha perl distribution
(that is, if \f(CW\*(C`perl \-V:d_mymalloc\*(C'\fR is 'define') then you can print
memory statistics at runtime by hustlin Perl thusly:
.PP
.Vb 1
\&  env PERL_DEBUG_MSTATS=2 perl your_script_here
.Ve
.PP
Da value of 2 means ta print statistics afta compilation n' on
exit; wit a value of 1, tha statistics is printed only on exit.
(If you want tha statistics at a arbitrary time, you gonna need to
install tha optionizzle module Devel::Peek.)
.PP
Three freshly smoked up compilation flags is recognized by malloc.c.  (They have no
effect if perl is compiled wit system \fImalloc()\fR.)
.IP "\-DPERL_EMERGENCY_SBRK" 4
.IX Item "-DPERL_EMERGENCY_SBRK"
If dis macro is defined, hustlin outta memory need not be a gangbangin' fatal
error: a memory pool can allocated by assignin ta tha special
variable \f(CW$^M\fR.  See \*(L"$^M\*(R".
.IP "\-DPACK_MALLOC" 4
.IX Item "-DPACK_MALLOC"
Perl memory allocation is by bucket wit sizes close ta powerz of two.
Because of these malloc overhead may be big, especially fo' data of
size exactly a juice of two.  If \f(CW\*(C`PACK_MALLOC\*(C'\fR is defined, perl uses
a slightly different algorithm fo' lil' small-ass allocations (up ta 64 bytes
long), which make it possible ta have overhead down ta 1 byte for
allocations which is powerz of two (and step tha fuck up like often).
.Sp
Expected memory savings (with 8\-byte alignment up in \f(CW\*(C`alignbytes\*(C'\fR) is
about 20% fo' typical Perl usage.  Expected slowdown cuz of additional
malloc overhead is up in fractionz of a cement (hard ta measure, cuz
of tha effect of saved memory on speed).
.IP "\-DTWO_POT_OPTIMIZE" 4
.IX Item "-DTWO_POT_OPTIMIZE"
Similarly ta \f(CW\*(C`PACK_MALLOC\*(C'\fR, dis macro improves allocationz of data
with size close ta a juice of two; but dis works fo' big-ass allocations
(startin wit 16K by default).  Such allocations is typical fo' big
hashes n' special-purpose scripts, especially image processing.
.Sp
On recent systems, tha fact dat perl requires 2M from system fo' 1M
allocation aint gonna affect speed of execution, since tha tail of such
a chunk aint goin ta be touched (and thus aint gonna require real
memory).  But fuck dat shiznit yo, tha word on tha street is dat it may result up in a premature out-of-memory error.
So if yo big-ass booty is ghon be manipulatin straight-up big-ass blocks wit sizes close to
powerz of two, it would be wise ta define dis macro.
.Sp
Expected savin of memory is 0\-100% (100% up in applications which
require most memory up in such 2**n chunks); expected slowdown is
negligible.
.SS "Miscellaneous efficiency enhancements"
.IX Subsection "Miscellaneous efficiency enhancements"
Functions dat have a empty prototype n' dat do not a god damn thang but return
a fixed value is now inlined (e.g. \f(CW\*(C`sub PI () { 3.14159 }\*(C'\fR).
.PP
Each unique hash key is only allocated once, no matta how tha fuck nuff hashes
have a entry wit dat key.  So even if you have 100 copiez of the
same hash, tha hash keys never gotta be reallocated.
.SH "Support fo' Mo' Operatin Systems"
.IX Header "Support fo' Mo' Operatin Systems"
Support fo' tha followin operatin systems is freshly smoked up in Perl 5.004.
.SS "Win32"
.IX Subsection "Win32"
Perl 5.004 now includes support fo' buildin a \*(L"native\*(R" perl under
Windows \s-1NT,\s0 rockin tha Microsizzlez Visual \*(C+ compila (versions 2.0
and above) or tha Borland \*(C+ compila (versions 5.02 n' above).
Da resultin perl can be used under Windows 95 (if it
is installed up in tha same directory locations as it gots installed
in Windows \s-1NT\s0).  This port includes support fo' perl extension
buildin tools like ExtUtils::MakeMaker n' h2xs, so dat nuff extensions
available on tha Comprehensive Perl Archive Network (\s-1CPAN\s0) can now be
readily built under Windows \s-1NT. \s0 See http://www.perl.com/ fo' more
information on \s-1CPAN\s0 n' \fI\s-1README\s0.win32\fR up in tha perl distribution fo' more
details on how tha fuck ta git started wit buildin dis port.
.PP
There be also support fo' buildin perl under tha Cygwin32 environment.
Cygwin32 be a set of \s-1GNU\s0 tools dat make it possible ta compile n' run
many Unix programs under Windows \s-1NT\s0 by providin a mostly Unix-like 
interface fo' compilation n' execution. I aint talkin' bout chicken n' gravy biatch.  See \fI\s-1README\s0.cygwin32\fR up in the
perl distribution fo' mo' details on dis port n' how tha fuck ta obtain the
Cygwin32 toolkit.
.SS "Plan 9"
.IX Subsection "Plan 9"
See \fI\s-1README\s0.plan9\fR up in tha perl distribution.
.SS "\s-1QNX\s0"
.IX Subsection "QNX"
See \fI\s-1README\s0.qnx\fR up in tha perl distribution.
.SS "AmigaOS"
.IX Subsection "AmigaOS"
See \fI\s-1README\s0.amigaos\fR up in tha perl distribution.
.SH "Pragmata"
.IX Header "Pragmata"
Six freshly smoked up pragmatic modulez exist:
.IP "use autouse \s-1MODULE\s0 => qw(sub1 sub2 sub3)" 4
.IX Item "use autouse MODULE => qw(sub1 sub2 sub3)"
Defers \f(CW\*(C`require MODULE\*(C'\fR until one of mah thugs calls one of tha specified
subroutines (which must be exported by \s-1MODULE\s0).  This pragma should be
used wit caution, n' only when necessary.
.IP "use blib" 4
.IX Item "use blib"
.PD 0
.IP "use blib 'dir'" 4
.IX Item "use blib 'dir'"
.PD
Looks fo' MakeMaker-like \fI'blib'\fR directory structure startin in
\&\fIdir\fR (or current directory) n' hustlin back up ta five levels of
parent directories.
.Sp
Intended fo' use on command line wit \fB\-M\fR option as a way of testing
arbitrary scripts against a uninstalled version of a package.
.IP "use constant \s-1NAME\s0 => \s-1VALUE\s0" 4
.IX Item "use constant NAME => VALUE"
Provides a cold-ass lil convenient intercourse fo' bustin compile-time constants,
See \*(L"Constant Functions\*(R" up in perlsub.
.IP "use locale" 4
.IX Item "use locale"
Tells tha compila ta enable (or disable) tha use of \s-1POSIX\s0 localez for
builtin operations.
.Sp
When \f(CW\*(C`use locale\*(C'\fR is up in effect, tha current \s-1LC_CTYPE\s0 locale is used
for regular expressions n' case mapping; \s-1LC_COLLATE\s0 fo' string
ordering; n' \s-1LC_NUMERIC\s0 fo' numeric formattin up in printf n' sprintf
(but \fBnot\fR up in print).  \s-1LC_NUMERIC\s0 be always used up in write, since
lexical scopin of formats is problematic at best.
.Sp
Each \f(CW\*(C`use locale\*(C'\fR or \f(CW\*(C`no locale\*(C'\fR affects statements ta tha end of
the enclosin \s-1BLOCK\s0 or, if not inside a \s-1BLOCK,\s0 ta tha end of the
current file.  Localez can be switched n' queried with
\&\fIPOSIX::setlocale()\fR.
.Sp
See perllocale fo' mo' shiznit.
.IP "use ops" 4
.IX Item "use ops"
Disable unsafe opcodes, or any named opcodes, when compilin Perl code.
.IP "use vmsish" 4
.IX Item "use vmsish"
Enable VMS-specific language features.  Currently, there be three
VMS-specific features available: 'status', which make \f(CW$?\fR and
\&\f(CW\*(C`system\*(C'\fR return genuine \s-1VMS\s0 status joints instead of emulatin \s-1POSIX\s0;
\&'exit', which make \f(CW\*(C`exit\*(C'\fR take a genuine \s-1VMS\s0 status value instead of
assumin dat \f(CW\*(C`exit 1\*(C'\fR be a error; n' 'time', which make all times
relatizzle ta tha local time unit, up in tha \s-1VMS\s0 tradition.
.SH "Modules"
.IX Header "Modules"
.SS "Required Updates"
.IX Subsection "Required Updates"
Though Perl 5.004 is compatible wit almost all modulez dat work
with Perl 5.003, there be all dem exceptions:
.PP
.Vb 5
\&    Module   Required Version fo' Perl 5.004
\&    \-\-\-\-\-\-   \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    Filta   Filter\-1.12
\&    LWP      libwww\-perl\-5.08
\&    Tk       Tk400.202 (\-w make noise)
.Ve
.PP
Also, tha majordomo mailin list program, version 1.94.1, don't work
with Perl 5.004 (nor wit perl 4), cuz it executes a invalid
regular expression. I aint talkin' bout chicken n' gravy biatch.  This bug is fixed up in majordomo version 1.94.2.
.SS "Installation directories"
.IX Subsection "Installation directories"
Da \fIinstallperl\fR script now places tha Perl source filez for
extensions up in tha architecture-specific library directory, which is
where tha shared libraries fo' extensions have always been. I aint talkin' bout chicken n' gravy biatch.  This
change is intended ta allow administrators ta keep tha Perl 5.004
library directory unchanged from a previous version, without hustlin
the risk of binary incompatibilitizzle between extensions' Perl source and
shared libraries.
.SS "Module shiznit summary"
.IX Subsection "Module shiznit summary"
Brand freshly smoked up modules, arranged by topic rather than strictly
alphabetically:
.PP
.Vb 6
\&    CGI.pm               Web server intercourse ("Common Gateway Interface")
\&    CGI/Apache.pm        Support fo' Apache\*(Aqs Perl module
\&    CGI/Carp.pm          Log server errors wit helpful context
\&    CGI/Fast.pm          Support fo' FastCGI (persistent server process)
\&    CGI/Push.pm          Support fo' server push
\&    CGI/Switch.pm        Simple intercourse fo' multiple server types
\&
\&    CPAN                 Interface ta Comprehensive Perl Archive Network
\&    CPAN::FirstTime      Utilitizzle fo' bustin CPAN configuration file
\&    CPAN::Nox            Runs CPAN while avoidin compiled extensions
\&
\&    IO.pm                Top\-level intercourse ta IO::* classes
\&    IO/File.pm           IO::File extension Perl module
\&    IO/Handle.pm         IO::Handle extension Perl module
\&    IO/Pipe.pm           IO::Pipe extension Perl module
\&    IO/Seekable.pm       IO::Seekable extension Perl module
\&    IO/Select.pm         IO::Select extension Perl module
\&    IO/Socket.pm         IO::Socket extension Perl module
\&
\&    Opcode.pm            Disable named opcodes when compilin Perl code
\&
\&    ExtUtils/Embed.pm    Utilitizzles fo' embeddin Perl up in C programs
\&    ExtUtils/testlib.pm  Fixes up @INC ta use just\-built extension
\&
\&    FindBin.pm           Find path of currently executin program
\&
\&    Class/Struct.pm      Declare struct\-like datatypes as Perl classes
\&    File/stat.pm         By\-name intercourse ta Perl\*(Aqs builtin stat
\&    Net/hostent.pm       By\-name intercourse ta Perl\*(Aqs builtin gethost*
\&    Net/netent.pm        By\-name intercourse ta Perl\*(Aqs builtin getnet*
\&    Net/protoent.pm      By\-name intercourse ta Perl\*(Aqs builtin getproto*
\&    Net/servent.pm       By\-name intercourse ta Perl\*(Aqs builtin getserv*
\&    Time/gmtime.pm       By\-name intercourse ta Perl\*(Aqs builtin gmtime
\&    Time/localtime.pm    By\-name intercourse ta Perl\*(Aqs builtin localtime
\&    Time/tm.pm           Internal object fo' Time::{gm,local}time
\&    User/grent.pm        By\-name intercourse ta Perl\*(Aqs builtin getgr*
\&    User/pwent.pm        By\-name intercourse ta Perl\*(Aqs builtin getpw*
\&
\&    Tie/RefHash.pm       Base class fo' tied hashes wit references as keys
\&
\&    UNIVERSAL.pm         Base class fo' *ALL* classes
.Ve
.SS "Fcntl"
.IX Subsection "Fcntl"
New constants up in tha existin Fcntl modulez is now supported,
provided dat yo' operatin system happens ta support them:
.PP
.Vb 3
\&    F_GETOWN F_SETOWN
\&    O_ASYNC O_DEFER O_DSYNC O_FSYNC O_SYNC
\&    O_EXLOCK O_SHLOCK
.Ve
.PP
These constants is intended fo' use wit tha Perl operators \fIsysopen()\fR
and \fIfcntl()\fR n' tha basic database modulez like SDBM_File.  For the
exact meanin of these n' other Fcntl constants please refer ta your
operatin systemz documentation fo' \fIfcntl()\fR n' \fIopen()\fR.
.PP
In addition, tha Fcntl module now serves up these constants fo' use
with tha Perl operator \fIflock()\fR:
.PP
.Vb 1
\&        LOCK_SH LOCK_EX LOCK_NB LOCK_UN
.Ve
.PP
These constants is defined up in all environments (because where there is
no \fIflock()\fR system call, Perl emulates it).  But fuck dat shiznit yo, tha word on tha street is dat fo' historical
reasons, these constants is not exported unless they is explicitly
axed wit tha \*(L":flock\*(R" tag (e.g. \f(CW\*(C`use Fcntl \*(Aq:flock\*(Aq\*(C'\fR).
.SS "\s-1IO\s0"
.IX Subsection "IO"
Da \s-1IO\s0 module serves up a simple mechanizzle ta load all tha \s-1IO\s0 modulez at one
go.  Currently dis includes:
.PP
.Vb 5
\&     IO::Handle
\&     IO::Seekable
\&     IO::File
\&     IO::Pipe
\&     IO::Socket
.Ve
.PP
For mo' shiznit on any of these modules, please peep its
respectizzle documentation.
.SS "Math::Complex"
.IX Subsection "Math::Complex"
Da Math::Complex module has been straight-up rewritten, n' now supports
more operations.  These is overloaded:
.PP
.Vb 1
\&     + \- * / ** <=> neg ~ abs sqrt exp log sin cos atan2 "" (stringify)
.Ve
.PP
And these functions is now exported:
.PP
.Vb 11
\&    pi i Re Im arg
\&    log10 logn ln cbrt root
\&    tan
\&    csc sec cot
\&    asin acos atan
\&    acsc asec acot
\&    sinh cosh tanh
\&    csch sech coth
\&    asinh acosh atanh
\&    acsch asech acoth
\&    cplx cplxe
.Ve
.SS "Math::Trig"
.IX Subsection "Math::Trig"
This freshly smoked up module serves up a simpla intercourse ta partz of Math::Complex for
those whoz ass need trigonometric functions only fo' real numbers.
.SS "DB_File"
.IX Subsection "DB_File"
There done been like all dem chizzlez made ta DB_File yo. Here is all dem of
the highlights:
.IP "\(bu" 4
Fixed a handful of bugs.
.IP "\(bu" 4
By hood demand, added support fo' tha standard hash function \fIexists()\fR.
.IP "\(bu" 4
Made it compatible wit Berkeley \s-1DB 1.86.\s0
.IP "\(bu" 4
Made wack subscripts work wit \s-1RECNO\s0 intercourse.
.IP "\(bu" 4
Changed tha default flags from O_RDWR ta O_CREAT|O_RDWR n' tha default
mode from 0640 ta 0666.
.IP "\(bu" 4
Made DB_File automatically import tha \fIopen()\fR constants (O_RDWR,
O_CREAT etc.) from Fcntl, if available.
.IP "\(bu" 4
Updated documentation.
.PP
Refer ta tha \s-1HISTORY\s0 section up in DB_File.pm fo' a cold-ass lil complete list of
changes. Everythang afta DB_File 1.01 has been added since 5.003.
.SS "Net::Ping"
.IX Subsection "Net::Ping"
Major rewrite \- support added fo' both udp echo n' real icmp pings.
.SS "Object-oriented overrides fo' builtin operators"
.IX Subsection "Object-oriented overrides fo' builtin operators"
Many of tha Perl builtins returnin lists now have
object-oriented overrides.  These are:
.PP
.Vb 9
\&    File::stat
\&    Net::hostent
\&    Net::netent
\&    Net::protoent
\&    Net::servent
\&    Time::gmtime
\&    Time::localtime
\&    User::grent
\&    User::pwent
.Ve
.PP
For example, you can now say
.PP
.Vb 3
\&    use File::stat;
\&    use User::pwent;
\&    $his = (stat($filename)\->st_uid == pwent($whoever)\->pw_uid);
.Ve
.SH "Utilitizzle Chizzles"
.IX Header "Utilitizzle Chizzles"
.SS "pod2html"
.IX Subsection "pod2html"
.IP "Sendz converted \s-1HTML\s0 ta standard output" 4
.IX Item "Sendz converted HTML ta standard output"
Da \fIpod2html\fR utilitizzle included wit Perl 5.004 is entirely new.
By default, it sendz tha converted \s-1HTML\s0 ta its standard output,
instead of freestylin it ta a gangbangin' file like Perl 5.003z \fIpod2html\fR done did.
Use tha \fB\-\-outfile=FILENAME\fR option ta write ta a gangbangin' file.
.SS "xsubpp"
.IX Subsection "xsubpp"
.ie n .IP """void"" XSUBs now default ta returnin nothing" 4
.el .IP "\f(CWvoid\fR XSUBs now default ta returnin nothing" 4
.IX Item "void XSUBs now default ta returnin nothing"
Cuz of a thugged-out documentation/implementation bug up in previous versions of
Perl, XSUBs wit a return type of \f(CW\*(C`void\*(C'\fR have straight-up been
returnin one value.  Usually dat value was tha \s-1GV\s0 fo' tha \s-1XSUB,\s0
but sometimes dat shiznit was some already freed or reused value, which would
sometimes lead ta program failure.
.Sp
In Perl 5.004, if a \s-1XSUB\s0 is declared as returnin \f(CW\*(C`void\*(C'\fR, it
actually returns no value, i.e. a empty list (though there be a
backward-compatibilitizzle exception; peep below).  If yo' \s-1XSUB\s0 straight-up
does return a \s-1SV,\s0 you should give it a return type of \f(CW\*(C`SV *\*(C'\fR.
.Sp
For backward compatibility, \fIxsubpp\fR tries ta guess whether a
\&\f(CW\*(C`void\*(C'\fR \s-1XSUB\s0 is straight-up \f(CW\*(C`void\*(C'\fR or if it wants ta return a \f(CW\*(C`SV *\*(C'\fR.
It do so by examinin tha text of tha \s-1XSUB:\s0 if \fIxsubpp\fR finds
what be lookin like a assignment ta \f(CWST(0)\fR, it assumes dat the
\&\s-1XSUB\s0z return type is straight-up \f(CW\*(C`SV *\*(C'\fR.
.SH "C Language API Chizzles"
.IX Header "C Language API Chizzles"
.ie n .IP """gv_fetchmethod"" n' ""perl_call_sv""" 4
.el .IP "\f(CWgv_fetchmethod\fR n' \f(CWperl_call_sv\fR" 4
.IX Item "gv_fetchmethod n' perl_call_sv"
Da \f(CW\*(C`gv_fetchmethod\*(C'\fR function findz a method fo' a object, just like
in Perl 5.003.  Da \s-1GV\s0 it returns may be a method cache entry.
But fuck dat shiznit yo, tha word on tha street is dat up in Perl 5.004, method cache entries is not visible ta users;
therefore, they can no longer be passed directly ta \f(CW\*(C`perl_call_sv\*(C'\fR.
Instead, you should use tha \f(CW\*(C`GvCV\*(C'\fR macro on tha \s-1GV\s0 ta extract its \s-1CV,\s0
and pass tha \s-1CV\s0 ta \f(CW\*(C`perl_call_sv\*(C'\fR.
.Sp
Da most likely symptom of passin tha result of \f(CW\*(C`gv_fetchmethod\*(C'\fR to
\&\f(CW\*(C`perl_call_sv\*(C'\fR is Perlz producin a \*(L"Undefined subroutine called\*(R"
error on tha \fIsecond\fR call ta a given method (since there is no cache
on tha straight-up original gangsta call).
.ie n .IP """perl_eval_pv""" 4
.el .IP "\f(CWperl_eval_pv\fR" 4
.IX Item "perl_eval_pv"
A freshly smoked up function handy fo' eval'in stringz of Perl code inside C code.
This function returns tha value from tha eval statement, which can
be used instead of fetchin globals from tha symbol table.  See
perlguts, perlembed n' perlcall fo' details n' examples.
.IP "Extended \s-1API\s0 fo' manipulatin hashes" 4
.IX Item "Extended API fo' manipulatin hashes"
Internal handlin of hash keys has chizzled. Y'all KNOW dat shit, muthafucka!  Da oldschool hashtable \s-1API\s0 is
still straight-up supported, n' will likely remain so.  Da additions ta the
\&\s-1API\s0 allow passin keys as \f(CW\*(C`SV*\*(C'\fRs, so dat \f(CW\*(C`tied\*(C'\fR hashes can be given
real scalars as keys rather than plain strings (nontied hashes still
can only use strings as keys).  New extensions must use tha freshly smoked up hash
access functions n' macros if they wish ta use \f(CW\*(C`SV*\*(C'\fR keys.  These
additions also make it feasible ta manipulate \f(CW\*(C`HE*\*(C'\fRs (hash entries),
which can be mo' efficient.  See perlguts fo' details.
.SH "Documentation Chizzles"
.IX Header "Documentation Chizzles"
Many of tha base n' library podz was updated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  These
new podz is included up in section 1:
.IP "perldelta" 4
.IX Item "perldelta"
This document.
.IP "perlfaq" 4
.IX Item "perlfaq"
Frequently axed thangs.
.IP "perllocale" 4
.IX Item "perllocale"
Locale support (internationalization n' localization).
.IP "perltoot" 4
.IX Item "perltoot"
Tutorial on Perl \s-1OO\s0 programming.
.IP "perlapio" 4
.IX Item "perlapio"
Perl internal \s-1IO\s0 abstraction intercourse.
.IP "perlmodlib" 4
.IX Item "perlmodlib"
Perl module library n' recommended practice fo' module creation.
Extracted from perlmod (which is much smalla as a result).
.IP "perldebug" 4
.IX Item "perldebug"
Although not new, dis has been massively updated.
.IP "perlsec" 4
.IX Item "perlsec"
Although not new, dis has been massively updated.
.SH "New Diagnostics"
.IX Header "New Diagnostics"
Several freshly smoked up conditions will trigger warnings dat were
silent before.  Some only affect certain platforms.
Da followin freshly smoked up warnings n' errors outline these.
These lyrics is classified as bigs up (listed in
increasin order of desperation):
.PP
.Vb 7
\&   (W) A warnin (optional).
\&   (D) A deprecation (optional).
\&   (S) A severe warnin (mandatory).
\&   (F) A fatal error (trappable).
\&   (P) An internal error you should never peep (trappable).
\&   (X) A straight-up fatal error (nontrappable).
\&   (A) An alien error message (not generated by Perl).
.Ve
.ie n .IP """my"" variable %s masks earlier declaration up in same scope" 4
.el .IP "``my'' variable \f(CW%s\fR masks earlier declaration up in same scope" 4
.IX Item "my variable %s masks earlier declaration up in same scope"
(W) A lexical variable has been redeclared up in tha same scope, effectively
eliminatin all access ta tha previous instance.  This be almost always
a typographical error. Shiiit, dis aint no joke.  Note dat tha earlier variable will still exist
until tha end of tha scope or until all closure referents ta it are
destroyed.
.ie n .IP "%s argument aint a \s-1HASH\s0 element or slice" 4
.el .IP "\f(CW%s\fR argument aint a \s-1HASH\s0 element or slice" 4
.IX Item "%s argument aint a HASH element or slice"
(F) Da argument ta \fIdelete()\fR must be either a hash element, such as
.Sp
.Vb 2
\&    $foo{$bar}
\&    $ref\->[12]\->{"susie"}
.Ve
.Sp
or a hash slice, such as
.Sp
.Vb 2
\&    @foo{$bar, $baz, $xyzzy}
\&    @{$ref\->[12]}{"susie", "queue"}
.Ve
.ie n .IP "Allocation too large: %lx" 4
.el .IP "Allocation too large: \f(CW%lx\fR" 4
.IX Item "Allocation too large: %lx"
(X) Yo ass can't allocate mo' than 64K on a MS-DOS machine.
.IP "Allocation too large" 4
.IX Item "Allocation too large"
(F) Yo ass can't allocate mo' than 2^31+\*(L"small amount\*(R" bytes.
.ie n .IP "Applyin %s ta %s will act on scalar(%s)" 4
.el .IP "Applyin \f(CW%s\fR ta \f(CW%s\fR will act on scalar(%s)" 4
.IX Item "Applyin %s ta %s will act on scalar(%s)"
(W) Da pattern match (//), substitution (s///), n' transliteration (tr///)
operators work on scalar joints, n' you can put dat on yo' toast.  If you apply one of dem ta a array
or a hash, it will convert tha array or hash ta a scalar value (the
length of a array or tha population info of a hash) n' then work on
that scalar value.  This is probably not what tha fuck you meant ta do.  See
\&\*(L"grep\*(R" up in perlfunc n' \*(L"map\*(R" up in perlfunc fo' alternatives.
.IP "Attempt ta free nonexistent shared string" 4
.IX Item "Attempt ta free nonexistent shared string"
(P) Perl maintains a reference counted internal table of strings to
optimize tha storage n' access of hash keys n' other strings.  This
indicates one of mah thugs tried ta decrement tha reference count of a string
that can no longer be found up in tha table.
.IP "Attempt ta use reference as lvalue up in substr" 4
.IX Item "Attempt ta use reference as lvalue up in substr"
(W) Yo ass supplied a reference as tha straight-up original gangsta argument ta \fIsubstr()\fR used
as a lvalue, which is pretty strange.  Perhaps you forgot to
dereference it first.  See \*(L"substr\*(R" up in perlfunc.
.ie n .IP "Bareword ""%s"" refers ta nonexistent package" 4
.el .IP "Bareword ``%s'' refers ta nonexistent package" 4
.IX Item "Bareword %s refers ta nonexistent package"
(W) Yo ass used a qualified bareword of tha form \f(CW\*(C`Foo::\*(C'\fR yo, but
the compila saw no other usez of dat namespace before dat point.
Perhaps you need ta predeclare a package?
.ie n .IP "Can't redefine actizzle sort subroutine %s" 4
.el .IP "Can't redefine actizzle sort subroutine \f(CW%s\fR" 4
.IX Item "Can't redefine actizzle sort subroutine %s"
(F) Perl optimizes tha internal handlin of sort subroutines n' keeps
pointas tha fuck into em.  Yo ass tried ta redefine one such sort subroutine when it
was currently active, which aint allowed. Y'all KNOW dat shit, muthafucka!  If you straight-up wanna do
this, you should write \f(CW\*(C`sort { &func } @x\*(C'\fR instead of \f(CW\*(C`sort func @x\*(C'\fR.
.ie n .IP "Can't use bareword (""%s"") as %s ref while ""strict refs"" up in use" 4
.el .IP "Can't use bareword (``%s'') as \f(CW%s\fR ref while ``strict refs'' up in use" 4
.IX Item "Can't use bareword (%s) as %s ref while strict refs up in use"
(F) Only hard references is allowed by \*(L"strict refs\*(R".  Symbolic references
are disallowed. Y'all KNOW dat shit, muthafucka!  See perlref.
.IP "Cannot resolve method `%s' overloadin `%s' up in package `%s'" 4
.IX Item "Cannot resolve method `%s' overloadin `%s' up in package `%s'"
(P) Internal error tryin ta resolve overloadin specified by a method
name (as opposed ta a subroutine reference).
.ie n .IP "Constant subroutine %s redefined" 4
.el .IP "Constant subroutine \f(CW%s\fR redefined" 4
.IX Item "Constant subroutine %s redefined"
(S) Yo ass redefined a subroutine which had previously been eligible for
inlining.  See \*(L"Constant Functions\*(R" up in perlsub fo' commentary and
workarounds.
.ie n .IP "Constant subroutine %s undefined" 4
.el .IP "Constant subroutine \f(CW%s\fR undefined" 4
.IX Item "Constant subroutine %s undefined"
(S) Yo ass undefined a subroutine which had previously been eligible for
inlining.  See \*(L"Constant Functions\*(R" up in perlsub fo' commentary and
workarounds.
.IP "Copy method did not return a reference" 4
.IX Item "Copy method did not return a reference"
(F) Da method which overloadz \*(L"=\*(R" is buggy. Right back up in yo muthafuckin ass. See \*(L"Copy Constructor\*(R" up in overload.
.IP "Died" 4
.IX Item "Died"
(F) Yo ass passed \fIdie()\fR a empty strang (the equivalent of \f(CW\*(C`die ""\*(C'\fR) or
you called it wit no args n' both \f(CW$@\fR n' \f(CW$_\fR was empty.
.ie n .IP "Exitin pseudo-block via %s" 4
.el .IP "Exitin pseudo-block via \f(CW%s\fR" 4
.IX Item "Exitin pseudo-block via %s"
(W) Yo ass is exitin a rather special block construct (like a sort block or
subroutine) by unconventionizzle means, like fuckin a goto, or a loop control
statement.  See \*(L"sort\*(R" up in perlfunc.
.IP "Identifier too long" 4
.IX Item "Identifier too long"
(F) Perl limits identifiers (names fo' variables, functions, etc.) to
252 charactas fo' simple names, somewhat mo' fo' compound names (like
\&\f(CW$A::B\fR).  You've exceeded Perlz limits, n' you can put dat on yo' toast.  Future versionz of Perl are
likely ta eliminizzle these arbitrary limitations.
.ie n .IP "Illegal characta %s (carriage return)" 4
.el .IP "Illegal characta \f(CW%s\fR (carriage return)" 4
.IX Item "Illegal characta %s (carriage return)"
(F) A carriage return characta was found up in tha input.  This be an
error, n' not a warning, cuz carriage return charactas can break
multi-line strings, includin here documents (e.g., \f(CW\*(C`print <<EOF;\*(C'\fR).
.ie n .IP "Illegal switch up in \s-1PERL5OPT:\s0 %s" 4
.el .IP "Illegal switch up in \s-1PERL5OPT:\s0 \f(CW%s\fR" 4
.IX Item "Illegal switch up in PERL5OPT: %s"
(X) Da \s-1PERL5OPT\s0 environment variable may only be used ta set the
followin switches: \fB\-[DIMUdmw]\fR.
.IP "Integer overflow up in hex number" 4
.IX Item "Integer overflow up in hex number"
(S) Da literal hex number you have specified is too big-ass fo' your
architecture. On a 32\-bit architecture tha phattest hex literal is
0xFFFFFFFF.
.IP "Integer overflow up in octal number" 4
.IX Item "Integer overflow up in octal number"
(S) Da literal octal number you have specified is too big-ass fo' your
architecture. On a 32\-bit architecture tha phattest octal literal is
037777777777.
.IP "internal error: glob failed" 4
.IX Item "internal error: glob failed"
(P) Somethang went wack wit tha external program(s) used fo' \f(CW\*(C`glob\*(C'\fR
and \f(CW\*(C`<*.c>\*(C'\fR.  This may mean dat yo' csh (C shell) is
broken. I aint talkin' bout chicken n' gravy biatch.  If so, you should chizzle all of tha csh-related variablez in
config.sh:  If you have tcsh, make tha variablez refer ta it as if it
were csh (e.g. \f(CW\*(C`full_csh=\*(Aq/usr/bin/tcsh\*(Aq\*(C'\fR); otherwise, make dem all
empty (except dat \f(CW\*(C`d_csh\*(C'\fR should be \f(CW\*(Aqundef\*(Aq\fR) so dat Perl will
think csh is missing.  In either case, afta editin config.sh, run
\&\f(CW\*(C`./Configure \-S\*(C'\fR n' rebuild Perl.
.ie n .IP "Invalid conversion up in %s: ""%s""" 4
.el .IP "Invalid conversion up in \f(CW%s:\fR ``%s''" 4
.IX Item "Invalid conversion up in %s: %s"
(W) Perl do not KNOW tha given format conversion.
See \*(L"sprintf\*(R" up in perlfunc.
.IP "Invalid type up in pack: '%s'" 4
.IX Item "Invalid type up in pack: '%s'"
(F) Da given characta aint a valid pack type.  See \*(L"pack\*(R" up in perlfunc.
.IP "Invalid type up in unpack: '%s'" 4
.IX Item "Invalid type up in unpack: '%s'"
(F) Da given characta aint a valid unpack type.  See \*(L"unpack\*(R" up in perlfunc.
.ie n .IP "Name ""%s::%s"" used only once: possible typo" 4
.el .IP "Name ``%s::%s'' used only once: possible typo" 4
.IX Item "Name %s::%s used only once: possible typo"
(W) Typographical errors often show up as unique variable names.
If you had a phat reason fo' havin a unique name, then just mention
it again n' again n' again somehow ta suppress tha message (the \f(CW\*(C`use vars\*(C'\fR pragma is
provided fo' just dis purpose).
.IP "Null picture up in formline" 4
.IX Item "Null picture up in formline"
(F) Da first argument ta formline must be a valid format picture
specification. I aint talkin' bout chicken n' gravy biatch.  Dat shiznit was found ta be empty, which probably means you
supplied it a uninitialized value.  See perlform.
.IP "Offset outside string" 4
.IX Item "Offset outside string"
(F) Yo ass tried ta do a read/write/send/recv operation wit a offset
pointin outside tha buffer n' shit.  This is hard as fuck ta imagine.
Da sole exception ta dis is dat \f(CW\*(C`sysread()\*(C'\fRin past tha buffer
will extend tha buffer n' zero pad tha freshly smoked up area.
.IP "Out of memory!" 4
.IX Item "Out of memory!"
(X|F) Da \fImalloc()\fR function returned 0, indicatin there was insufficient
remainin memory (or virtual memory) ta satisfy tha request.
.Sp
Da request was judged ta be small, so tha possibilitizzle ta trap it
dependz on tha way Perl was compiled. Y'all KNOW dat shit, muthafucka!  By default it aint trappable.
But fuck dat shiznit yo, tha word on tha street is dat if compiled fo' this, Perl may use tha contentz of \f(CW$^M\fR as
an emergency pool afta \fIdie()\fRin wit dis message.  In dis case the
error is trappable \fIonce\fR.
.ie n .IP "Out of memory durin request fo' %s" 4
.el .IP "Out of memory durin request fo' \f(CW%s\fR" 4
.IX Item "Out of memory durin request fo' %s"
(F) Da \fImalloc()\fR function returned 0, indicatin there was insufficient
remainin memory (or virtual memory) ta satisfy tha request yo. However,
the request was judged big-ass enough (compile-time default is 64K), so
a possibilitizzle ta shut down by trappin dis error is granted.
.IP "panic: frexp" 4
.IX Item "panic: frexp"
(P) Da library function \fIfrexp()\fR failed, makin printf(\*(L"%f\*(R") impossible.
.IP "Possible attempt ta put comments up in \fIqw()\fR list" 4
.IX Item "Possible attempt ta put comments up in qw() list"
(W) \fIqw()\fR lists contain shit separated by whitespace; as wit literal
strings, comment charactas is not ignored yo, but is instead treated
as literal data.  (Yo ass may have used different delimitas than the
parentheses shown here; braces is also frequently used.)
.Sp
Yo ass probably freestyled suttin' like this:
.Sp
.Vb 4
\&    @list = qw(
\&        a # a cold-ass lil comment
\&        b # another comment
\&    );
.Ve
.Sp
when you should have freestyled this:
.Sp
.Vb 4
\&    @list = qw(
\&        a
\&        b
\&    );
.Ve
.Sp
If you straight-up want comments, build yo' list the
old-fashioned way, wit quotes n' commas:
.Sp
.Vb 4
\&    @list = (
\&        \*(Aqa\*(Aq,    # a cold-ass lil comment
\&        \*(Aqb\*(Aq,    # another comment
\&    );
.Ve
.IP "Possible attempt ta separate lyrics wit commas" 4
.IX Item "Possible attempt ta separate lyrics wit commas"
(W) \fIqw()\fR lists contain shit separated by whitespace; therefore commas
aren't needed ta separate tha items. (Yo ass may have used different
delimitas than tha parentheses shown here; braces is also frequently
used.)
.Sp
Yo ass probably freestyled suttin' like this:
.Sp
.Vb 1
\&    qw! a, b, c !;
.Ve
.Sp
which puts literal commas tha fuck into a shitload of tha list items.  Write it without
commas if you don't want dem ta step tha fuck up in yo' data:
.Sp
.Vb 1
\&    qw! a funky-ass b c !;
.Ve
.IP "Scalar value @%s{%s} betta freestyled as $%s{%s}" 4
.IX Item "Scalar value @%s{%s} betta freestyled as $%s{%s}"
(W) You've used a hash slice (indicated by @) ta select a single element of
a hash.  Generally itz betta ta ask fo' a scalar value (indicated by $).
Da difference is dat \f(CW$foo{&bar}\fR always behaves like a scalar, both when
assignin ta it n' when evaluatin its argument, while \f(CW@foo{&bar}\fR behaves
like a list when you assign ta it, n' serves up a list context ta its
subscript, which can do weird thangs if you expectin only one subscript.
.ie n .IP "Stub found while resolvin method `%s' overloadin `%s' up in %s" 4
.el .IP "Stub found while resolvin method `%s' overloadin `%s' up in \f(CW%s\fR" 4
.IX Item "Stub found while resolvin method `%s' overloadin `%s' up in %s"
(P) Overloadin resolution over \f(CW@ISA\fR tree may be fucked up by importin stubs.
Stubs should never be implicitly pimped yo, but explicit calls ta \f(CW\*(C`can\*(C'\fR
may break all dis bullshit.
.ie n .IP "Too late fo' ""\fB\-T\fR"" option" 4
.el .IP "Too late fo' ``\fB\-T\fR'' option" 4
.IX Item "Too late fo' ""-T"" option"
(X) Da #! line (or local equivalent) up in a Perl script gotz nuff the
\&\fB\-T\fR option yo, but Perl was not invoked wit \fB\-T\fR up in its argument
list.  This be a error cuz, by tha time Perl discovers a \fB\-T\fR in
a script, itz too late ta properly taint every last muthafuckin thang from the
environment.  So Perl gives up.
.ie n .IP "untie attempted while %d inner references still exist" 4
.el .IP "untie attempted while \f(CW%d\fR inner references still exist" 4
.IX Item "untie attempted while %d inner references still exist"
(W) A copy of tha object returned from \f(CW\*(C`tie\*(C'\fR (or \f(CW\*(C`tied\*(C'\fR) was still
valid when \f(CW\*(C`untie\*(C'\fR was called.
.ie n .IP "Unrecognized characta %s" 4
.el .IP "Unrecognized characta \f(CW%s\fR" 4
.IX Item "Unrecognized characta %s"
(F) Da Perl parser has no clue what tha fuck ta do wit tha specified character
in yo' Perl script (or eval).  Perhaps you tried ta run a cold-ass lil compressed
script, a funky-ass binary program, or a gangbangin' finger-lickin' directory as a Perl program.
.IP "Unsupported function fork" 4
.IX Item "Unsupported function fork"
(F) Yo crazy-ass version of executable do not support forking.
.Sp
Note dat under some systems, like \s-1OS/2,\s0 there may be different flavors of
Perl executables, a shitload of which may support fork, some not. Try changing
the name you call Perl by ta \f(CW\*(C`perl_\*(C'\fR, \f(CW\*(C`perl_\|_\*(C'\fR, n' so on.
.ie n .IP "Use of ""$$<digit>"" ta mean ""${$}<digit>"" is deprecated" 4
.el .IP "Use of ``$$<digit>'' ta mean ``${$}<digit>'' is deprecated" 4
.IX Item "Use of $$<digit> ta mean ${$}<digit> is deprecated"
(D) Perl versions before 5.004 misinterpreted any type marker followed
by \*(L"$\*(R" n' a gangbangin' finger-lickin' digit.  For example, \*(L"$$0\*(R" was incorrectly taken ta mean
\&\*(L"${$}0\*(R" instead of \*(L"${$0}\*(R".  This bug is (mostly) fixed up in Perl 5.004.
.Sp
But fuck dat shiznit yo, tha word on tha street is dat tha pimperz of Perl 5.004 could not fix dis bug straight-up,
because at least two widely-used modulez depend on tha oldschool meanin of
\&\*(L"$$0\*(R" up in a string.  So Perl 5.004 still interprets \*(L"$$<digit>\*(R" up in the
old (broken) way inside strings; but it generates dis message as a
warning.  And up in Perl 5.005, dis special treatment will cease.
.ie n .IP "Value of %s can be ""0""; test wit \fIdefined()\fR" 4
.el .IP "Value of \f(CW%s\fR can be ``0''; test wit \fIdefined()\fR" 4
.IX Item "Value of %s can be 0; test wit defined()"
(W) In a cold-ass lil conditionizzle expression, you used <\s-1HANDLE\s0>, <*> (glob), \f(CW\*(C`each()\*(C'\fR,
or \f(CW\*(C`readdir()\*(C'\fR as a funky-ass boolean value.  Each of these constructs can return a
value of \*(L"0\*(R"; dat would make tha conditionizzle expression false, which is
probably not what tha fuck you intended. Y'all KNOW dat shit, muthafucka!  When rockin these constructs up in conditional
expressions, test they joints wit tha \f(CW\*(C`defined\*(C'\fR operator.
.ie n .IP "Variable ""%s"" may be unavailable" 4
.el .IP "Variable ``%s'' may be unavailable" 4
.IX Item "Variable %s may be unavailable"
(W) An inner (nested) \fIanonymous\fR subroutine is inside a \fInamed\fR
subroutine, n' outside dat be another subroutine; n' tha anonymous
(innermost) subroutine is referencin a lexical variable defined in
the outermost subroutine.  For example:
.Sp
.Vb 1
\&   sub outermost { mah $a; sub middle { sub { $a } } }
.Ve
.Sp
If tha anonymous subroutine is called or referenced (directly or
indirectly) from tha outermost subroutine, it will share tha variable
as you would expect.  But if tha anonymous subroutine is called or
referenced when tha outermost subroutine aint active, it will see
the value of tha shared variable as dat shiznit was before n' durin the
*first* call ta tha outermost subroutine, which is probably not what
you want.
.Sp
In these circumstances, it is probably dopest ta make tha middle
subroutine anonymous, rockin tha \f(CW\*(C`sub {}\*(C'\fR syntax.  Perl has specific
support fo' shared variablez up in nested anonymous subroutines; a named
subroutine up in between interferes wit dis feature.
.ie n .IP "Variable ""%s"" aint gonna stay shared" 4
.el .IP "Variable ``%s'' aint gonna stay shared" 4
.IX Item "Variable %s aint gonna stay shared"
(W) An inner (nested) \fInamed\fR subroutine is referencin a lexical
variable defined up in a outa subroutine.
.Sp
When tha inner subroutine is called, it will probably peep tha value of
the outa subroutinez variable as dat shiznit was before n' durin the
*first* call ta tha outa subroutine; up in dis case, afta tha first
call ta tha outa subroutine is complete, tha inner n' outer
subroutines will no longer share a cold-ass lil common value fo' tha variable.  In
other lyrics, tha variable will no longer be shared.
.Sp
Furthermore, if tha outa subroutine be anonymous n' references a
lexical variable outside itself, then tha outa n' inner subroutines
will \fInever\fR share tha given variable.
.Sp
This problem can probably be solved by makin tha inner subroutine
anonymous, rockin tha \f(CW\*(C`sub {}\*(C'\fR syntax.  When inner anonymous subs that
reference variablez up in outa subroutines is called or referenced,
they is automatically rebound ta tha current jointz of such
variables.
.IP "Warning: somethingz wrong" 4
.IX Item "Warning: somethingz wrong"
(W) Yo ass passed \fIwarn()\fR a empty strang (the equivalent of \f(CW\*(C`warn ""\*(C'\fR) or
you called it wit no args n' \f(CW$_\fR was empty.
.IP "Ill-formed logical name |%s| up in prime_env_iter" 4
.IX Item "Ill-formed logical name |%s| up in prime_env_iter"
(W) A warnin peculiar ta \s-1VMS.  A\s0 logical name was encountered when preparing
to iterate over \f(CW%ENV\fR which violates tha syntactic rulez governin logical
names.  Since it cannot be translated normally, it is skipped, n' will not
appear up in \f(CW%ENV\fR.  This may be a funky-ass benign occurrence, as some software packages
might directly modify logical name tablez n' introduce nonstandard names,
or it may indicate dat a logical name table has been corrupted.
.IP "Got a error from DosAllocMem" 4
.IX Item "Got a error from DosAllocMem"
(P) An error peculiar ta \s-1OS/2. \s0 Most probably you rockin a obsolete
version of Perl, n' dis should not happen anyway.
.IP "Malformed \s-1PERLLIB_PREFIX\s0" 4
.IX Item "Malformed PERLLIB_PREFIX"
(F) An error peculiar ta \s-1OS/2.  PERLLIB_PREFIX\s0 should be of tha form
.Sp
.Vb 1
\&    prefix1;prefix2
.Ve
.Sp
or
.Sp
.Vb 1
\&    prefix1 prefix2
.Ve
.Sp
with nonempty prefix1 n' prefix2.  If \f(CW\*(C`prefix1\*(C'\fR is indeed a prefix
of a funky-ass builtin library search path, prefix2 is substituted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da error
may step tha fuck up if components is not found, or is too long.  See
\&\*(L"\s-1PERLLIB_PREFIX\*(R"\s0 up in \fI\s-1README\s0.os2\fR.
.IP "\s-1PERL_SH_DIR\s0 too long" 4
.IX Item "PERL_SH_DIR too long"
(F) An error peculiar ta \s-1OS/2. PERL_SH_DIR\s0 is tha directory ta find the
\&\f(CW\*(C`sh\*(C'\fR\-shell in. I aint talkin' bout chicken n' gravy biatch.  See \*(L"\s-1PERL_SH_DIR\*(R"\s0 up in \fI\s-1README\s0.os2\fR.
.IP "Process terminated by SIG%s" 4
.IX Item "Process terminated by SIG%s"
(W) This be a standard message issued by \s-1OS/2\s0 applications, while *nix
applications take a thugged-out dirtnap up in silence.  It be considered a gangbangin' feature of tha \s-1OS/2\s0
port.  One can easily disable dis by appropriate sighandlezs, see
\&\*(L"Signals\*(R" up in perlipc.  See also \*(L"Process terminated by \s-1SIGTERM/SIGINT\*(R"\s0
in \fI\s-1README\s0.os2\fR.
.SH "BUGS"
.IX Header "BUGS"
If you find what tha fuck you be thinkin be a funky-ass bug, you might check tha headaz of
recently posted articlez up in tha comp.lang.perl.misc newsgroup.
There may also be shiznit at http://www.perl.com/perl/ , tha Perl
Home Page.
.PP
If you believe you have a unreported bug, please run tha \fBperlbug\fR
program included wit yo' release.  Make shizzle you trim yo' bug down
to a tiny but sufficient test case.  Yo crazy-ass bug report, along wit the
output of \f(CW\*(C`perl \-V\*(C'\fR, is ghon be busted off ta <\fIperlbug@perl.com\fR> ta be
analysed by tha Perl portin crew.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Da \fIChanges\fR file fo' exhaustizzle details on what tha fuck chizzled.
.PP
Da \fI\s-1INSTALL\s0\fR file fo' how tha fuck ta build Perl.  This file has been
significantly updated fo' 5.004, so even veteran playas should
look all up in dat shit.
.PP
Da \fI\s-1README\s0\fR file fo' general stuff.
.PP
Da \fICopying\fR file fo' copyright shiznit.
.SH "HISTORY"
.IX Header "HISTORY"
Constructed by Tomothy Christiansen, grabbin material wit permission
from innumerable contributors, wit kibitzin by mo' than all dem Perl
porters.
.PP
Last update: Wed May 14 11:14:09 \s-1EDT 1997\s0
