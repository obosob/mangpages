'\" t
.\"     Title: git-gc
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-GC" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-gc \- Cleanup unnecessary filez n' optimize tha local repository
.SH "SYNOPSIS"
.sp
.nf
\fIgit gc\fR [\-\-aggressive] [\-\-auto] [\-\-quiet] [\-\-prune=<date> | \-\-no\-prune] [\-\-force]
.fi
.sp
.SH "DESCRIPTION"
.sp
Runs a fuckin shitload of housekeepin tasks within tha current repository, like fuckin compressin file revisions (to reduce disk space n' increase performance) n' removin unreachable objects which may done been pimped from prior invocationz of \fIgit add\fR\&.
.sp
Users is encouraged ta run dis task on a regular basis within each repository ta maintain phat disk space utilization n' phat operatin performance\&.
.sp
Some git commandz may automatically run \fIgit gc\fR; peep tha \-\-auto flag below fo' details\&. If you know what tha fuck you\(cqre bustin n' all you want is ta disable dis behavior permanently without further considerations, just do:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git config \-\-global gc\&.auto 0
.fi
.if n \{\
.RE
.\}
.sp
.SH "OPTIONS"
.PP
\-\-aggressive
.RS 4
Usually
\fIgit gc\fR
runs straight-up quickly while providin phat disk space utilization n' performance\&. This option will cause
\fIgit gc\fR
to mo' aggressively optimize tha repository all up in tha expense of takin much mo' time\&. Da effectz of dis optimization is persistent, so dis option only need ta be used occasionally; every last muthafuckin few hundred chizzlesets or so\&.
.RE
.PP
\-\-auto
.RS 4
With dis option,
\fIgit gc\fR
checks whether any housekeepin is required; if not, it exits without struttin any work\&. Right back up in yo muthafuckin ass. Some git commandz run
git gc \-\-auto
afta struttin operations dat could create nuff loose objects\&.
.sp
Housekeepin is required if there be too nuff loose objects or too nuff packs up in tha repository\&. If tha number of loose objects exceedz tha value of the
gc\&.auto
configuration variable, then all loose objects is combined tha fuck into a single pack using
git repack \-d \-l\&. Right back up in yo muthafuckin ass. Settin tha value of
gc\&.auto
to 0 disablez automatic packin of loose objects\&.
.sp
If tha number of packs exceedz tha value of
gc\&.autopacklimit, then existin packs (except dem marked wit a
\&.keep
file) is consolidated tha fuck into a single pack by rockin the
\-A
option of
\fIgit repack\fR\&. Right back up in yo muthafuckin ass. Setting
gc\&.autopacklimit
to 0 disablez automatic consolidation of packs\&.
.RE
.PP
\-\-prune=<date>
.RS 4
Prune loose objects olda than date (default is 2 weeks ago, overridable by tha config variable
gc\&.pruneExpire)\&. \-\-prune=all prunes loose objects regardless of they age\&. \-\-prune is on by default\&.
.RE
.PP
\-\-no\-prune
.RS 4
Do not prune any loose objects\&.
.RE
.PP
\-\-quiet
.RS 4
Suppress all progress reports\&.
.RE
.PP
\-\-force
.RS 4
Force
git gc
to run even if there may be another
git gc
instizzle hustlin on dis repository\&.
.RE
.SH "CONFIGURATION"
.sp
Da optionizzle configuration variable \fIgc\&.reflogExpire\fR can be set ta indicate how tha fuck long oldschool entries within each branch\(cqs reflog should remain available up in dis repository\&. Da settin is expressed as a length of time, fo' example \fI90 days\fR or \fI3 months\fR\&. Well shiiiit, it defaults ta \fI90 days\fR\&.
.sp
Da optionizzle configuration variable \fIgc\&.reflogExpireUnreachable\fR can be set ta indicate how tha fuck long oldschool reflog entries which is not part of tha current branch should remain available up in dis repository\&. These typez of entries is generally pimped as a result of rockin git commit \-\-amend or git rebase n' is tha commits prior ta tha amend or rebase occurring\&. Right back up in yo muthafuckin ass. Since these chizzlez is not part of tha current project most playas will wanna expire dem sooner\&. This option defaults ta \fI30 days\fR\&.
.sp
Da above two configuration variablez can be given ta a pattern\&. For example, dis sets non\-default expiry joints only ta remote\-trackin branches:
.sp
.if n \{\
.RS 4
.\}
.nf
[gc "refs/remotes/*"]
        reflogExpire = never
        reflogexpireUnreachable = 3 days
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da optionizzle configuration variable \fIgc\&.rerereresolved\fR indicates how tha fuck long recordz of conflicted merge you resolved earlier is kept\&. This defaults ta 60 days\&.
.sp
Da optionizzle configuration variable \fIgc\&.rerereunresolved\fR indicates how tha fuck long recordz of conflicted merge you aint resolved is kept\&. This defaults ta 15 days\&.
.sp
Da optionizzle configuration variable \fIgc\&.packrefs\fR determines if \fIgit gc\fR runs \fIgit pack\-refs\fR\&. This can be set ta "notbare" ta enable it within all non\-bare repos or it can be set ta a funky-ass boolean value\&. This defaults ta true\&.
.sp
Da optionizzle configuration variable \fIgc\&.aggressiveWindow\fR controls how tha fuck much time is dropped optimizin tha delta compression of tha objects up in tha repository when tha \-\-aggressive option is specified\&. Da larger tha value, tha mo' time is dropped optimizin tha delta compression\&. Right back up in yo muthafuckin ass. See tha documentation fo' tha \-\-window\(aq option up in \fBgit-repack\fR(1) fo' mo' details\&. This defaults ta 250\&.
.sp
Da optionizzle configuration variable \fIgc\&.pruneExpire\fR controls how tha fuck oldschool tha unreferenced loose objects gotta be before they is pruned\&. Da default is "2 weeks ago"\&.
.SH "NOTES"
.sp
\fIgit gc\fR tries straight-up hard ta be safe bout tha garbage it collects\&. In particular, it will keep not only objects referenced by yo' current set of branches n' tags yo, but also objects referenced by tha index, remote\-trackin branches, refs saved by \fIgit filter\-branch\fR up in refs/original/, or reflogs (which may reference commits up in branches dat was lata amended or rewound)\&.
.sp
If yo ass is expectin some objects ta be collected n' they aren\(cqt, check all of dem locations n' decizzle whether it make sense up in yo' case ta remove dem references\&.
.SH "HOOKS"
.sp
Da \fIgit gc \-\-auto\fR command will run tha \fIpre\-auto\-gc\fR hook\&. Right back up in yo muthafuckin ass. See \fBgithooks\fR(5) fo' mo' shiznit\&.
.SH "SEE ALSO"
.sp
\fBgit-prune\fR(1) \fBgit-reflog\fR(1) \fBgit-repack\fR(1) \fBgit-rerere\fR(1)
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
