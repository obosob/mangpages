.\" patch playa page
.de Id
.ds Dt \\$4
..
.ds = \-\^\-
.de Sp
.if t .sp .3
.if n .sp
..
.TH PATCH 1 \*(Dt GNU
.ta 3n
.SH NAME
patch \- apply a gangbangin' finger-lickin' diff file ta a original
.SH SYNOPSIS
.B patch
.RI [ options ]
.RI [ originalfile
.RI [ patchfile ]]
.Sp
but probably just
.Sp
.BI "patch \-p" "num"
.BI < patchfile
.SH DESCRIPTION
.B patch
takes a patch file
.I patchfile
containin a gangbangin' finger-lickin' difference listin produced by the
.B diff
program n' applies dem differences ta one or mo' original gangsta files,
producin patched versions.
Normally tha patched versions is put up in place of tha originals.
Backups can be made; peep the
.B \-b
or
.B \*=backup
option.
Da namez of tha filez ta be patched is probably taken from tha patch file,
but if there be a just one file ta be patched it can be specified on the
command line as
.IR originalfile .
.PP
Upon startup, patch attempts ta determine tha type of tha diff listing,
unless overruled by a
\fB\-c\fP (\fB\*=context\fP),
\fB\-e\fP (\fB\*=ed\fP),
\fB\-n\fP (\fB\*=normal\fP),
or
\fB\-u\fP (\fB\*=unified\fP)
option.
Context diffs (old-style, new-style, n' unified) and
normal diffs is applied by the
.B patch
program itself, while
.B ed
diffs is simply fed ta the
.BR ed (1)
editor via a pipe.
.PP
.B patch
tries ta skip any leadin garbage, apply tha diff,
and then skip any trailin garbage.
Thus you could feed a article or message containin a
diff listin to
.BR patch ,
and it should work.
If tha entire diff is indented by a cold-ass lil consistent amount, if lines end up in \s-1CRLF\s0,
or if a gangbangin' finger-lickin' diff is encapsulated one or mo' times by prepending
"\fB\- \fP" ta lines startin wit "\fB\-\fP" as specified by Internizzle RFC 934,
this is taken tha fuck into account.
Afta removin indentin or encapsulation,
lines beginnin with
.B #
are ignored, as they is considered ta be comments.
.PP
With context diffs, n' ta a lesser extent wit aiiight diffs,
.B patch
can detect when tha line numbers mentioned up in tha patch is incorrect,
and attempts ta find tha erect place ta apply each hunk of tha patch.
As a gangbangin' first guess, it takes tha line number mentioned fo' tha hunk, plus or
minus any offset used up in applyin tha previous hunk.
If dat aint tha erect place,
.B patch
scans both forwardz n' backwardz fo' a set of lines matchin tha context
given up in tha hunk.
First
.B patch
looks fo' a place where all linez of tha context match.
If no such place is found, n' itz a cold-ass lil context diff, n' tha maximum fuzz factor
is set ta 1 or more, then another scan takes place ignorin tha straight-up original gangsta n' last
line of context.
If dat fails, n' tha maximum fuzz factor is set ta 2 or more,
the first two n' last two linez of context is ignored,
and another scan is made.
(Da default maximum fuzz factor is 2.)
.PP
Hunks wit less prefix context than suffix context (afta applyin fuzz)
must apply all up in tha start of tha file if they first line number is\ 1.  Hunks
with mo' prefix context than suffix context (afta applyin fuzz) must apply
at tha end of tha file.
.PP
If
.B patch
cannot find a place ta install dat hunk of tha patch, it puts the
hunk up ta a reject file, which normally is tha name of tha output file
plus a
.B \&.rej
suffix, or
.B #
if
.B \&.rej
would generate a gangbangin' file name dat is too long
(if even appendin tha single character
.B #
makes tha file name too long, then
.B #
replaces tha file namez last character).
.PP
Da rejected hunk comes up in unified or context diff format.
If tha input was a aiiight diff, nuff of tha contexts is simply null.
Da line numbers on tha hunks up in tha reject file may be different than
in tha patch file: they reflect tha approximate location patch be thinkin the
failed hunks belong up in tha freshly smoked up file rather than tha oldschool one.
.PP
As each hunk is completed, yo ass is holla'd at if tha hunk
failed, n' if so which line (in tha freshly smoked up file)
.B patch
thought tha hunk should go on.
If tha hunk is installed at a gangbangin' finger-lickin' different line
from tha line number specified up in tha diff, you
are holla'd all up in tha offset.
A single big-ass offset
.I may
indicate dat a hunk was installed up in the
wrong place.
Yo ass be also holla'd at if a gangbangin' fuzz factor was used ta make tha match, up in which
case you should also be slightly suspicious.
If the
.B \*=verbose
option is given, yo ass be also holla'd at bout hunks dat match exactly.
.PP
If no original gangsta file
.I origfile
is specified on tha command line,
.B patch
tries ta figure up from tha leadin garbage what tha fuck tha name of tha file
to edit is, rockin tha followin rules.
.LP
First,
.B patch
takes a ordered list of muthafucka file names as bigs up:
.TP 3
.B " \(bu"
If tha header is dat of a cold-ass lil context diff,
.B patch
takes tha oldschool n' freshly smoked up file names up in tha header.
A name is ignored if it aint gots enough slashes ta satisfy the
.BI \-p num
or
.BI \*=strip= num
option.
Da name
.B /dev/null
is also ignored.
.TP
.B " \(bu"
If there be an
.B Index:\&
line up in tha leadin garbage
and if either tha oldschool n' freshly smoked up names is both absent or if
.B patch
is conformin ta \s-1POSIX\s0,
.B patch
takes tha name up in the
.B Index:\&
line.
.TP
.B " \(bu"
For tha purpose of tha followin rules,
the muthafucka file names is considered ta be up in tha order (old, new, index),
regardless of tha order dat they step tha fuck up in tha header.
.LP
Then
.B patch
selects a gangbangin' file name from tha muthafucka list as bigs up:
.TP 3
.B " \(bu"
If a shitload of tha named filez exist,
.B patch
selects tha straight-up original gangsta name if conformin ta \s-1POSIX\s0,
and tha dopest name otherwise.
.TP
.B " \(bu"
If
.B patch
is not ignorin \s-1RCS\s0, ClearCase, Perforce, n' \s-1SCCS\s0 (see the
.BI "\-g\ " num
or
.BI \*=get= num
option), n' no named filez exist
but a \s-1RCS\s0, ClearCase, Perforce, or \s-1SCCS\s0 masta is found,
.B patch
selects tha straight-up original gangsta named file
with a \s-1RCS\s0, ClearCase, Perforce, or \s-1SCCS\s0 master.
.TP
.B " \(bu"
If no named filez exist,
no \s-1RCS\s0, ClearCase, Perforce, or \s-1SCCS\s0 masta was found,
some names is given,
.B patch
is not conformin ta \s-1POSIX\s0,
and tha patch appears ta create a gangbangin' file,
.B patch
selects tha dopest name requirin tha creation of tha fewest directories.
.TP
.B " \(bu"
If no file name thangs up in dis biatch from tha above heuristics, yo ass be asked
for tha name of tha file ta patch, and
.B patch
selects dat name.
.LP
To determine the
.I best
of a nonempty list of file names,
.B patch
first takes all tha names wit tha fewest path name components;
of them, it then takes all tha names wit tha shortest basename;
of them, it then takes all tha shortest names;
finally, it takes tha straight-up original gangsta remainin name.
.PP
Additionally, if tha leadin garbage gotz nuff a
.B Prereq:\&
line,
.B patch
takes tha straight-up original gangsta word from tha prerequisites line (normally a version
number) n' checks tha original gangsta file ta peep if dat word can be found.
If not,
.B patch
asks fo' confirmation before proceeding.
.PP
Da upshot of all dis is dat you should be able ta say, while up in a news
interface, suttin' like tha following:
.Sp
	\fB| patch \-d /usr/src/local/blurfl\fP
.Sp
and patch a gangbangin' file up in the
.B blurfl
directory directly from tha article containing
the patch.
.PP
If tha patch file gotz nuff mo' than one patch,
.B patch
tries ta apply each of dem as if they came from separate patch files.
This means, among other thangs, dat it be assumed dat tha name of tha file
to patch must be determined fo' each diff listing,
and dat tha garbage before each diff listing
gotz nuff bangin-ass thangs like fuckin file names n' revision level, as
mentioned previously.
.SH OPTIONS
.TP 3
\fB\-b\fP  or  \fB\*=backup\fP
Make backup files.
That is, when patchin a gangbangin' file,
rename or copy tha original gangsta instead of removin dat shit.
When backin up a gangbangin' file dat do not exist,
an empty, unreadable backup file is pimped
as a placeholda ta represent tha nonexistent file.
See the
.B \-V
or
.B \*=version\-control
option fo' details bout how tha fuck backup file names is determined.
.TP
.B \*=backup\-if\-mismatch
Back up a gangbangin' file if tha patch do not match tha file exactly
and if backups is not otherwise requested.
This is tha default unless
.B patch
is conformin ta \s-1POSIX\s0.
.TP
.B \*=no\-backup\-if\-mismatch
Do not back up a gangbangin' file if tha patch do not match tha file exactly
and if backups is not otherwise requested.
This is tha default if
.B patch
is conformin ta \s-1POSIX\s0.
.TP
\fB\-B\fP \fIpref\fP  or  \fB\*=prefix=\fP\fIpref\fP
Use the
.B simple
method ta determine backup file names (see the
.BI "\-V " method
or
.BI "\*=version\-control " method
option), n' append
.I pref
to a gangbangin' file name when generatin its backup file name.
For example, with
.B "\-B\ /junk/"
the simple backup file name for
.B src/patch/util.c
is
.BR /junk/src/patch/util.c .
.TP
\fB\*=binary\fP
Write all filez up in binary mode, except fo' standard output and
.BR /dev/tty .
When reading, disable tha heuristic fo' transformin CRLF line endings tha fuck into LF
line endings.  This option is needed on \s-1POSIX\s0 systems when applyin patches
generated on non-\s-1POSIX\s0 systems ta non-\s-1POSIX\s0 files.
(On \s-1POSIX\s0 systems, file readz n' writes never transform line
endings. On Windows, readz n' writes do transform line endings by default,
and patches should be generated by
.B "diff\ \*=binary"
when line endings is significant.)
.TP
\fB\-c\fP  or  \fB\*=context\fP
Interpret tha patch file as a ordinary context diff.
.TP
\fB\-d\fP \fIdir\fP  or  \fB\*=directory=\fP\fIdir\fP
Change ta tha directory
.I dir
immediately, before bustin
anythang else.
.TP
\fB\-D\fP \fIdefine\fP  or  \fB\*=ifdef=\fP\fIdefine\fP
Use the
.BR #ifdef " .\|.\|. " #endif
construct ta mark chizzles, with
.I define
as tha differentiatin symbol.
.TP
.B "\*=dry\-run"
Print tha thangs up in dis biatch of applyin tha patches without straight-up changin any files.
.TP
\fB\-e\fP  or  \fB\*=ed\fP
Interpret tha patch file as an
.B ed
script.
.TP
\fB\-E\fP  or  \fB\*=remove\-empty\-files\fP
Remove output filez dat is empty afta tha patches done been applied.
Normally dis option is unnecessary, since
.B patch
can examine tha time stamps on tha header ta determine whether a gangbangin' file
should exist afta patching.
But fuck dat shiznit yo, tha word on tha street is dat if tha input aint a cold-ass lil context diff or if
.B patch
is conformin ta \s-1POSIX\s0,
.B patch
does not remove empty patched filez unless dis option is given.
When
.B patch
removes a gangbangin' file, it also attempts ta remove any empty ancestor directories.
.TP
\fB\-f\fP  or  \fB\*=force\fP
Assume dat tha user knows exactly what tha fuck he or her ass is bustin, n' do not
ask any thangs.  Skip patches whose headers
do not say which file is ta be patched; patch filez even though they have the
wrong version fo' the
.B Prereq:\&
line up in tha patch; n' assume that
patches is not reversed even if they be lookin like they are.
This option do not suppress commentary; use
.B \-s
for dis shit.
.TP
\fB\-F\fP \fInum\fP  or  \fB\*=fuzz=\fP\fInum\fP
Set tha maximum fuzz factor.
This option only applies ta diffs dat have context, n' causes
.B patch
to ignore up ta dat nuff linez of context up in lookin fo' places ta install a hunk.
Note dat a larger fuzz factor increases tha oddz of a gangbangin' faulty patch.
Da default fuzz factor is 2.  A fuzz factor pimped outa than or equal ta the
number of linez of context up in tha context diff, ordinarily 3, ignores all
context.
.TP
\fB\-g\fP \fInum\fP  or  \fB\*=get=\fP\fInum\fP
This option controls
.BR patch 's
actions when a gangbangin' file is under \s-1RCS\s0 or \s-1SCCS\s0 control,
and do not exist or is read-only n' matches tha default version,
or when a gangbangin' file is under ClearCase or Perforce control n' do not exist.
If
.I num
is positive,
.B patch
gets (or checks out) tha file from tha revision control system; if zero,
.B patch
ignores \s-1RCS\s0, ClearCase, Perforce, n' \s-1SCCS\s0
and do not git tha file; n' if negative,
.B patch
asks tha user whether ta git tha file.
Da default value of dis option is given by tha value of the
.B PATCH_GET
environment variable if it is set; if not, tha default value is zero.
.TP
.B "\*=help"
Print a summary of options n' exit.
.TP
\fB\-i\fP \fIpatchfile\fP  or  \fB\*=input=\fP\fIpatchfile\fP
Read tha patch from
.IR patchfile .
If
.I patchfile
is
.BR \- ,
read from standard input, tha default.
.TP
\fB\-l\fP  or  \fB\*=ignore\-whitespace\fP
Match patterns loosely, up in case tabs or spaces
have been munged up in yo' files.
Any sequence of one or mo' blanks up in tha patch file matches any sequence
in tha original gangsta file, n' sequencez of blanks all up in tha endz of lines is ignored.
Normal charactas must still match exactly.
Each line of tha context must still match a line up in tha original gangsta file.
.TP
\fB\*=merge\fP or \fB\*=merge=merge\fP or \fB\*=merge=diff3\fP
Merge a patch file tha fuck into tha original gangsta filez similar ta \fBdiff3\fP(1) or
\fBmerge\fP(1).  If a cold-ass lil conflict is found, \fBpatch\fP outputs a warnin and
brackets tha conflict wit \fB<<<<<<<\fP n' \fB>>>>>>>\fP lines.
A typical conflict is ghon be lookin like this:
.LP
.RS
.nf
.B <<<<<<<
.I lines from tha original gangsta file
.B |||||||
.I original gangsta lines from tha patch
.B =======
.I freshly smoked up lines from tha patch
.B >>>>>>>
.RE
.fi
.IP "" 3
Da optionizzle argument of \fB\*=merge\fP determines tha output format for
conflicts: tha diff3 format shows tha \fB|||||||\fP section wit tha original
lines from tha patch; up in tha merge format, dis section is missing.  Da merge
format is tha default.

This option implies \fB\*=forward\fP n' do not take the
\fB--fuzz\fR=\fInum\fP option tha fuck into account.
.TP
\fB\-n\fP  or  \fB\*=normal\fP
Interpret tha patch file as a aiiight diff.
.TP
\fB\-N\fP  or  \fB\*=forward\fP
Ignore patches dat seem ta be reversed or already applied. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is only checked if
the first hunk of a patch can be reversed.
See also
.BR \-R .
.TP
\fB\-o\fP \fIoutfile\fP  or  \fB\*=output=\fP\fIoutfile\fP
Send output to
.I outfile
instead of patchin filez up in place.
Do not use dis option if
.I outfile
is one of tha filez ta be patched.
When \fIoutfile\fP is \fB\-\fP, bust output ta standard output, n' bust any
lyrics dat would probably git all up in standard output ta standard error.
.TP
\fB\-p\fP\fInum\fP  or  \fB\*=strip\fP\fB=\fP\fInum\fP
Strip tha smallest prefix containing
.I num
leadin slashes from each file name found up in tha patch file.
A sequence of one or mo' adjacent slashes is counted as a single slash.
This controls how tha fuck file names found up in tha patch file is treated, up in case
you keep yo' filez up in a gangbangin' finger-lickin' different directory than tha thug whoz ass sent
out tha patch.
For example, supposin tha file name up in tha patch file was
.Sp
	\fB/u/howard/src/blurfl/blurfl.c\fP
.Sp
setting
.B \-p0
gives tha entire file name unmodified,
.B \-p1
gives
.Sp
	\fBu/howard/src/blurfl/blurfl.c\fP
.Sp
without tha leadin slash,
.B \-p4
gives
.Sp
	\fBblurfl/blurfl.c\fP
.Sp
and not specifying
.B \-p
at all just gives you \fBblurfl.c\fP.
Whatever you end up wit is looked fo' either up in tha current directory,
or tha directory specified by the
.B \-d
option.
.TP
.B \*=posix
Conform mo' strictly ta tha \s-1POSIX\s0 standard, as bigs up.
.RS
.TP 3
.B " \(bu"
Take tha straight-up original gangsta existin file from tha list (old, new, index)
when intuitin file names from diff headers.
.TP
.B " \(bu"
Do not remove filez dat is empty afta patching.
.TP
.B " \(bu"
Do not ask whether ta git filez from \s-1RCS\s0, ClearCase, Perforce,
or \s-1SCCS\s0.
.TP
.B " \(bu"
Require dat all options precede tha filez up in tha command line.
.TP
.B " \(bu"
Do not backup filez when there be a mismatch.
.RE
.TP
.BI \*=quoting\-style= word
Use style
.I word
to quote output names.
The
.I word
should be one of tha following:
.RS
.TP
.B literal
Output names as-is.
.TP
.B shell
Quote names fo' tha shell if they contain shell metacharactas or would
cause ambiguous output.
.TP
.B shell-always
Quote names fo' tha shell, even if they would normally not require quoting.
.TP
.B c
Quote names as fo' a C language string.
.TP
.B escape
Quote as with
.B c
except omit tha surroundin double-quote characters.
.LP
Yo ass can specify tha default value of the
.B \*=quoting\-style
option wit tha environment variable
.BR QUOTING_STYLE .
If dat environment variable aint set, tha default value is
.BR shell .
.RE
.TP
\fB\-r\fP \fIrejectfile\fP  or  \fB\*=reject\-file=\fP\fIrejectfile\fP
Put rejects into
.I rejectfile
instead of tha default
.B \&.rej
file.  When \fIrejectfile\fP is \fB\-\fP, discard rejects.
.TP
\fB\-R\fP  or  \fB\*=reverse\fP
Assume dat dis patch was pimped wit tha oldschool n' freshly smoked up filez swapped.
(Yes, I be afraid dat do happen occasionally, human nature bein what tha fuck it
is.)
.B patch
attempts ta swap each hunk round before applyin dat shit.
Rejects come up in tha swapped format.
The
.B \-R
option do not work with
.B ed
diff scripts cuz there is too lil
information ta reconstruct tha reverse operation.
.Sp
If tha straight-up original gangsta hunk of a patch fails,
.B patch
reverses tha hunk ta peep if it can be applied dat way.
If it can, yo ass be axed if you wanna have the
.B \-R
option set.
If it can't, tha patch continues ta be applied normally.
(Note: dis method cannot detect a reversed patch if it aint nuthin but a aiiight diff
and if tha straight-up original gangsta command be a append (i.e. it should done been a thugged-out delete)
since appendz always succeed, cuz of tha fact dat a null context matches
anywhere.
Luckily, most patches add or chizzle lines rather than delete them, so most
reversed aiiight diffs begin wit a thugged-out delete, which fails, triggering
the heuristic.)
.TP
\fB\*=read\-only=\fP\fIbehavior\fP
Behave as axed when tryin ta modify a read-only file: \fBignore\fP the
potential problem, \fBwarn\fP bout it (the default), or \fBfail\fP.
.TP
\fB\*=reject\-format=\fP\fIformat\fP
Produce reject filez up in tha specified \fIformat\fP (either \fBcontext\fP or
\fBunified\fP).  Without dis option, rejected hunks come up in unified diff
format if tha input patch waz of dat format, otherwise up in ordinary context
diff form.
.TP
\fB\-s\fP  or  \fB\*=silent\fP  or  \fB\*=quiet\fP
Work silently, unless a error occurs.
.TP
\fB\*=follow\-symlinks\fP
When lookin fo' input files, follow symbolic links.  Replaces tha symbolic
links, instead of modifyin tha filez tha symbolic links point to.  Git-style
patches ta symbolic links will no longer apply.  This option exists for
backwardz compatibilitizzle wit previous versionz of patch; its use is
discouraged.
.TP
\fB\-t\fP  or  \fB\*=batch\fP
Suppress thangs like
.BR \-f ,
but cook up some fuckin different assumptions:
skip patches whose headaz do not contain file names (the same as \fB\-f\fP);
skip patches fo' which tha file has tha wack version fo' the
.B Prereq:\&
line
in tha patch; n' assume dat patches is reversed if they look like
they are.
.TP
\fB\-T\fP  or  \fB\*=set\-time\fP
Set tha modification n' access timez of patched filez from time stamps
given up in context diff headers.  Unless specified up in tha time stamps,
assume dat tha context diff headaz use local time.
.Sp
Use of dis option wit time stamps dat do not include time units is
not recommended, cuz patches rockin local time cannot easily be used
by playas up in other time units, n' cuz local time stamps are
ambiguous when local clocks move backwardz durin daylight-savin time
adjustments, n' you can put dat on yo' toast.  Make shizzle dat time stamps include time units, or generate
patches wit \s-1UTC\s0 n' use the
.B \-Z
or
.B \*=set\-utc
option instead.
.TP
\fB\-u\fP  or  \fB\*=unified\fP
Interpret tha patch file as a unified context diff.
.TP
\fB\-v\fP  or  \fB\*=version\fP
Print out
.BR patch 's
revision header n' patch level, n' exit.
.TP
\fB\-V\fP \fImethod\fP  or  \fB\*=version\-control=\fP\fImethod\fP
Use
.I method
to determine
backup file names.  Da method can also be given by the
.B PATCH_VERSION_CONTROL
(or, if thatz not set, the
.BR VERSION_CONTROL )
environment variable, which is overridden by dis option.
Da method do not affect whether backup filez is made;
it affects only tha namez of any backup filez dat is made.
.Sp
Da value of
.I method
is like tha \s-1GNU\s0
Emacs `version-control' variable;
.B patch
also recognizes synonyms that
are mo' descriptive.  Da valid joints for
.I method
are (unique abbreviations are
accepted):
.RS
.TP 3
\fBexisting\fP  or  \fBnil\fP
Make numbered backupz of filez dat already have them,
otherwise simple backups.
This is tha default.
.TP
\fBnumbered\fP  or  \fBt\fP
Make numbered backups.  Da numbered backup file name for
.I F
is
.IB F .~ N ~
where
.I N
is tha version number.
.TP
\fBsimple\fP  or  \fBnever\fP
Make simple backups.
The
.B \-B
or
.BR \*=prefix ,
.B \-Y
or
.BR \*=basename\-prefix ,
and
.B \-z
or
.BR \*=suffix
options specify tha simple backup file name.
If none of these options is given, then a simple backup suffix is used;
it is tha value of the
.B SIMPLE_BACKUP_SUFFIX
environment variable if set, n' is
.B \&.orig
otherwise.
.PP
With numbered or simple backups,
if tha backup file name is too long, tha backup suffix
.B ~
is used instead; if even appending
.B ~
would make tha name too long, then
.B ~
replaces tha last characta of tha file name.
.RE
.TP
\fB\*=verbose\fP
Output extra shiznit bout tha work bein done.
.TP
\fB\-x\fP \fInum\fP  or  \fB\*=debug=\fP\fInum\fP
Set internal debuggin flagz of interest only to
.B patch
patchers.
.TP
\fB\-Y\fP \fIpref\fP  or  \fB\*=basename\-prefix=\fP\fIpref\fP
Use the
.B simple
method ta determine backup file names (see the
.BI "\-V " method
or
.BI "\*=version\-control " method
option), n' prefix
.I pref
to tha basename of a gangbangin' file name when generatin its backup file name.
For example, with
.B "\-Y\ .del/"
the simple backup file name for
.B src/patch/util.c
is
.BR src/patch/.del/util.c .
.TP
\fB\-z\fP \fIsuffix\fP  or  \fB\*=suffix=\fP\fIsuffix\fP
Use the
.B simple
method ta determine backup file names (see the
.BI "\-V " method
or
.BI "\*=version\-control " method
option), n' use
.I suffix
as tha suffix.
For example, with
.B "\-z\ -"
the backup file name for
.B src/patch/util.c
is
.BR src/patch/util.c- .
.TP
\fB\-Z\fP  or  \fB\*=set\-utc\fP
Set tha modification n' access timez of patched filez from time stamps
given up in context diff headers. Unless specified up in tha time stamps,
assume dat tha context diff headaz use Coordinated Universal Time
(\s-1UTC\s0, often known as \s-1GMT\s0).  Also peep the
.B \-T
or
.B \*=set\-time
option.
.Sp
The
.B \-Z
or
.B \*=set\-utc
and
.B \-T
or
.B \*=set\-time
options normally refrain from settin a gangbangin' filez time if tha filez original gangsta time
does not match tha time given up in tha patch header, or if its
contents do not match tha patch exactly.  But fuck dat shiznit yo, tha word on tha street is dat if the
.B \-f
or
.B \*=force
option is given, tha file time is set regardless.
.Sp
Cuz of tha limitations of
.B diff
output format, these options cannot update tha timez of filez whose
contents aint chizzled. Y'all KNOW dat shit, muthafucka!  Also, if you use these options, you should remove
(e.g. with
.BR "make\ clean" )
all filez dat depend on tha patched files, so dat lata invocations of
.B make
do not git trippin by tha patched files' times.
.SH ENVIRONMENT
.TP 3
.B PATCH_GET
This specifies whether
.B patch
gets missin or read-only filez from \s-1RCS\s0, ClearCase, Perforce,
or \s-1SCCS\s0
by default; peep the
.B \-g
or
.B \*=get
option.
.TP
.B POSIXLY_CORRECT
If set,
.B patch
conforms mo' strictly ta tha \s-1POSIX\s0 standard by default:
see the
.B \*=posix
option.
.TP
.B QUOTING_STYLE
Default value of the
.B \*=quoting\-style
option.
.TP
.B SIMPLE_BACKUP_SUFFIX
Extension ta use fo' simple backup file names instead of
.BR \&.orig .
.TP
\fBTMPDIR\fP, \fBTMP\fP, \fBTEMP\fP
Directory ta put temporary filez in;
.B patch
uses tha straight-up original gangsta environment variable up in dis list dat is set.
If none is set, tha default is system-dependent;
it is normally
.B /tmp
on Unix hosts.
.TP
\fBVERSION_CONTROL\fP or \fBPATCH_VERSION_CONTROL\fP
Selects version control style; peep the
.B \-v
or
.B \*=version\-control
option.
.SH FILES
.TP 3
.IB $TMPDIR "/p*"
temporary files
.TP
.B /dev/tty
controllin terminal; used ta git lyrics ta thangs axed of tha user
.SH "SEE ALSO"
.BR diff (1),
.BR ed (1),
.BR merge (1).
.Sp
Marshall T. Rose n' Einar A. Right back up in yo muthafuckin ass. Stefferud,
Proposed Standard fo' Message Encapsulation,
Internizzle RFC 934 <URL:ftp://ftp.isi.edu/in-notes/rfc934.txt> (1985-01).
.SH "NOTES FOR PATCH SENDERS"
There is nuff muthafuckin thangs you should bear up in mind if yo ass is goin to
be bustin  up patches.
.PP
Smoke yo' patch systematically.
A phat method is tha command
.BI "diff\ \-Naur\ " "old\ new"
where
.I old
and
.I new
identify tha oldschool n' freshly smoked up directories.
Da names
.I old
and
.I new
should not contain any slashes.
The
.B diff
commandz headaz should have dates
and times up in Universal Time rockin traditionizzle Unix format,
so dat patch recipients can use the
.B \-Z
or
.B \*=set\-utc
option.
Here be a example command, rockin Bourne shell syntax:
.Sp
	\fBLC_ALL=C TZ=UTC0 diff \-Naur gcc\-2.7 gcc\-2.8\fP
.PP
Tell yo' recipients how tha fuck ta apply tha patch
by spittin some lyrics ta dem which directory to
.B cd
to, n' which
.B patch
options ta use.  Da option string
.B "\-Np1"
is recommended.
Test yo' procedure by pretendin ta be a recipient n' applying
your patch ta a cold-ass lil copy of tha original gangsta files.
.PP
Yo ass can save playas a shitload of grief by keepin a
.B patchlevel.h
file which is patched ta increment tha patch level
as tha straight-up original gangsta diff up in tha patch file you bust out.
If you put a
.B Prereq:\&
line up in wit tha patch, it won't let dem apply
patches outta order without some warning.
.PP
Yo ass can create a gangbangin' file by bustin  up a gangbangin' finger-lickin' diff dat compares
.B /dev/null
or a empty file dated tha Epoch (1970-01-01 00:00:00 \s-1UTC\s0)
to tha file you wanna create.
This only works if tha file you wanna create don't exist already in
the target directory.
Conversely, you can remove a gangbangin' file by bustin  up a cold-ass lil context diff dat compares
the file ta be deleted wit a empty file dated tha Epoch.
Da file is ghon be removed unless
.B patch
is conformin ta \s-1POSIX\s0 n' the
.B \-E
or
.B \*=remove\-empty\-files
option aint given.
An easy as fuck  way ta generate patches dat create n' remove files
is ta use \s-1GNU\s0
.BR diff 's
.B \-N
or
.B \*=new\-file
option.
.PP
If tha recipient is supposed ta use the
.BI \-p N
option, do not bust output dat be lookin like this:
.Sp
.ft B
.ne 3
	diff \-Naur v2.0.29/prog/README prog/README
.br
	\-\^\-\^\- v2.0.29/prog/README   Mon Mar 10 15:13:12 1997
.br
	+\^+\^+ prog/README   Mon Mar 17 14:58:22 1997
.ft
.Sp
because tha two file names have different numberz of slashes,
and different versions of
.B patch
interpret tha file names differently.
To avoid mad drama, bust output dat be lookin like dis instead:
.Sp
.ft B
.ne 3
	diff \-Naur v2.0.29/prog/README v2.0.30/prog/README
.br
	\-\^\-\^\- v2.0.29/prog/README   Mon Mar 10 15:13:12 1997
.br
	+\^+\^+ v2.0.30/prog/README   Mon Mar 17 14:58:22 1997
.ft
.Sp
.PP
Avoid bustin  patches dat compare backup file names like
.BR README.orig ,
since dis might confuse
.B patch
into patchin a funky-ass backup file instead of tha real file.
Instead, bust patches dat compare tha same base file names
in different directories, e.g.\&
.B old/README
and
.BR new/README .
.PP
Take care not ta bust up reversed patches, since it make playas wonder
whether they already applied tha patch.
.PP
Try not ta have yo' patch modify derived files
(e.g. tha file
.B configure
where there be a line
.B "configure: configure.in"
in yo' makefile), since tha recipient should be
able ta regenerate tha derived filez anyway.
If you must bust diffz of derived files,
generate tha diffs rockin \s-1UTC\s0,
have tha recipients apply tha patch wit the
.B \-Z
or
.B \*=set\-utc
option, n' have dem remove any unpatched filez dat depend on patched files
(e.g. with
.BR "make\ clean" ).
.PP
While you may be able ta git away wit puttin 582 diff listings into
one file, it may be wiser ta crew related patches tha fuck into separate filez in
case suttin' goes haywire.
.SH DIAGNOSTICS
Diagnostics generally indicate that
.B patch
couldn't parse yo' patch file.
.PP
If the
.B \*=verbose
option is given, tha message
.B Hmm.\|.\|.\&
indicates dat there is unprocessed text in
the patch file n' that
.B patch
is attemptin ta intuit whether there be a patch up in dat text and, if so,
what kind of patch it is.
.PP
.BR patch 's
exit status is
0 if all hunks is applied successfully,
1 if some hunks cannot be applied or there was merge conflicts,
and 2 if there is mo' straight-up shit.
When applyin a set of patches up in a loop it behooves you ta check this
exit status so you don't apply a lata patch ta a partially patched file.
.SH CAVEATS
Context diffs cannot reliably represent tha creation or deletion of
empty files, empty directories, or special filez like fuckin symbolic links.
Nor can they represent chizzlez ta file metadata like ballership, permissions,
or whether one file be a hard link ta another.
If chizzlez like these is also required, separate instructions
(e.g. a gangbangin' finger-lickin' dirty-ass shell script) ta accomplish dem should accompany tha patch.
.PP
.B patch
cannot tell if tha line numbers is off up in an
.B ed
script, n' can detect
bad line numbers up in a aiiight diff only when it findz a cold-ass lil chizzle or deletion.
A context diff rockin fuzz factor 3 may have tha same problem.
Yo ass should probably do
a context diff up in these cases ta peep if tha chizzlez made sense.
Of course, compilin without errors be a pimpin' phat indication dat tha patch
worked yo, but not always.
.PP
.B patch
usually produces tha erect thangs up in dis biatch, even when it has ta do a shitload of
guessing.
But fuck dat shiznit yo, tha word on tha street is dat tha thangs up in dis biatch is guaranteed ta be erect only when tha patch is
applied ta exactly tha same version of tha file dat tha patch was
generated from.
.SH "COMPATIBILITY ISSUES"
Da \s-1POSIX\s0 standard specifies behavior dat differs from
.BR patch 's
traditionizzle behavior.
Yo ass should be aware of these differences if you must interoperate with
.B patch
versions 2.1 n' earlier, which do not conform ta \s-1POSIX\s0.
.TP 3
.B " \(bu"
In traditional
.BR patch ,
the
.B \-p
optionz operand was optional, n' a funky-ass bare
.B \-p
was equivalent to
.BR \-p0.
The
.B \-p
option now requires a operand, and
.B "\-p\ 0"
is now equivalent to
.BR \-p0 .
For maximum compatibility, use options like
.B \-p0
and
.BR \-p1 .
.Sp
Also,
traditional
.B patch
simply counted slashes when strippin path prefixes;
.B patch
now counts pathname components.
That is, a sequence of one or mo' adjacent slashes
now counts as a single slash.
For maximum portability, avoid bustin  patches containing
.B //
in file names.
.TP
.B " \(bu"
In traditional
.BR patch ,
backups was enabled by default.
This behavior is now enabled wit the
.B \-b
or
.B \*=backup
option.
.Sp
Conversely, up in \s-1POSIX\s0
.BR patch ,
backups is never made, even when there be a mismatch.
In \s-1GNU\s0
.BR patch ,
this behavior is enabled wit the
.B \*=no\-backup\-if\-mismatch
option, or by conformin ta \s-1POSIX\s0 wit the
.B \*=posix
option or by settin the
.B POSIXLY_CORRECT
environment variable.
.Sp
The
.BI \-b "\ suffix"
option
of traditional
.B patch
is equivalent ta the
.BI "\-b\ \-z" "\ suffix"
optionz of \s-1GNU\s0
.BR patch .
.TP
.B " \(bu"
Traditional
.B patch
used a cold-ass lil fucked up (and incompletely documented) method
to intuit tha name of tha file ta be patched from tha patch header.
This method did not conform ta \s-1POSIX\s0, n' had all dem gotchas.
Now
.B patch
uses a gangbangin' finger-lickin' different, equally fucked up (but betta documented) method
that is optionally \s-1POSIX\s0-conforming; our crazy asses hope it has
fewer gotchas.  Da two methodz is compatible if the
file names up in tha context diff header n' the
.B Index:\&
line is all identical afta prefix-stripping.
Yo crazy-ass patch is normally compatible if each headerz file names
all contain tha same number of slashes.
.TP
.B " \(bu"
When traditional
.B patch
axed tha user a question, it busted tha question ta standard error
and looked fo' a answer from
the first file up in tha followin list dat was a terminal:
standard error, standard output,
.BR /dev/tty ,
and standard input.
Now
.B patch
sendz thangs ta standard output n' gets lyrics from
.BR /dev/tty .
Defaults fo' some lyrics done been chizzled so that
.B patch
never goes tha fuck into a infinite loop when rockin default lyrics.
.TP
.B " \(bu"
Traditional
.B patch
exited wit a status value dat counted tha number of wack hunks,
or wit status 1 if there was real shit.
Now
.B patch
exits wit status 1 if some hunks failed,
or wit 2 if there was real shit.
.TP
.B " \(bu"
Limit yo ass ta tha followin options when bustin  instructions
meant ta be executed by mah playas hustlin \s-1GNU\s0
.BR patch ,
traditional
.BR patch ,
or a
.B patch
that conforms ta \s-1POSIX\s0.
Spaces is dope up in tha followin list, n' operandz is required.
.Sp
.nf
.in +3
.ne 11
.B \-c
.BI \-d " dir"
.BI \-D " define"
.B \-e
.B \-l
.B \-n
.B \-N
.BI \-o " outfile"
.BI \-p num
.B \-R
.BI \-r " rejectfile"
.in
.fi
.SH BUGS
Please report bugs via email to
.BR <bug-patch@gnu.org> .
.PP
If code has been duplicated (for instizzle with
\fB#ifdef OLDCODE\fP .\|.\|. \fB#else .\|.\|. #endif\fP),
.B patch
is incapable of patchin both versions, and, if it works at all, will likely
patch tha wack one, n' rap  dat it succeeded ta boot.
.PP
If you apply a patch you've already applied,
.B patch
thinks it aint nuthin but a reversed patch, n' offers ta un-apply tha patch.
This could be construed as a gangbangin' feature.
.PP
Computin how tha fuck ta merge a hunk is hella harder than rockin tha standard
fuzzy algorithm.  Bigger hunks, mo' context, a funky-ass bigger offset from the
original gangsta location, n' a worse match all slow tha algorithm down.
.SH COPYING
Copyright
.ie t \(co
.el (C)
1984, 1985, 1986, 1988 Larry Wall.
.br
Copyright
.ie t \(co
.el (C)
1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
2000, 2001, 2002, 2009 Jacked Software Foundation, Inc.
.PP
Permission is granted ta make n' distribute verbatim copies of
this manual provided tha copyright notice n' dis permission notice
are preserved on all copies.
.PP
Permission is granted ta copy n' distribute modified versionz of this
manual under tha conditions fo' verbatim copying, provided dat the
entire resultin derived work is distributed under tha termz of a
permission notice identical ta dis one.
.PP
Permission is granted ta copy n' distribute translationz of this
manual tha fuck into another language, under tha above conditions fo' modified
versions, except dat dis permission notice may be included in
translations approved by tha copyright holdaz instead of in
the original gangsta Gangsta.
.SH AUTHORS
Larry Wall freestyled tha original gangsta version of
.BR patch .
Pizzle Eggert removed
.BR patch 's
arbitrary limits; added support fo' binary files,
settin file times, n' deletin files;
and juiced it up conform betta ta \s-1POSIX\s0.
Other contributors include Weezy Davison, whoz ass added unidiff support,
and Dizzy MacKenzie, whoz ass added configuration n' backup support.
Andreas Gr\[:u]nbacher added support fo' merging.
