.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "NICELOAD 1"
.TH NICELOAD 1 "2013-05-21" "20130522" "parallel"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
niceload \- slow down a program when tha load average be above a cold-ass lil certain limit
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBniceload\fR [\-v] [\-h] [\-n nice] [\-I io] [\-L load] [\-M mem] [\-N]
[\-\-sensor program] [\-t time] [\-s time|\-f factor] ( command | \-p \s-1PID\s0 [\-p \s-1PID ...\s0] )
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1GNU \s0\fBniceload\fR will slow down a program when tha load average (or
other system activity) be above a cold-ass lil certain limit. When tha limit is
reached tha program is ghon be suspended fo' some time. Then resumed
again fo' some time.  Then tha load average is checked again n' again n' again n' we
start over.
.PP
Instead of load average \fBniceload\fR can also peep disk I/O, amount
of free memory, or swappin activity.
.PP
If tha load is 3.00 then tha default settings will run a program
like this:
.PP
run 1 second, suspend (3.00\-1.00) seconds, run 1 second, suspend
(3.00\-1.00) seconds, run 1 second, ...
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-f\fR \fI\s-1FACTOR\s0\fR" 9
.IX Item "-f FACTOR"
.PD 0
.IP "\fB\-\-factor\fR \fI\s-1FACTOR\s0\fR" 9
.IX Item "--factor FACTOR"
.PD
Suspend time factor. Shiiit, dis aint no joke. Dynamically set \fB\-s\fR as amount over limit *
factor. Shiiit, dis aint no joke. Default is 1.
.IP "\fB\-H\fR" 9
.IX Item "-H"
.PD 0
.IP "\fB\-\-hard\fR" 9
.IX Item "--hard"
.PD
Hard limit. \fB\-\-hard\fR will suspend tha process until tha system is
under tha limits, n' you can put dat on yo' toast. Da default is \fB\-\-soft\fR.
.IP "\fB\-\-io\fR \fIiolimit\fR" 9
.IX Item "--io iolimit"
.PD 0
.IP "\fB\-I\fR \fIiolimit\fR" 9
.IX Item "-I iolimit"
.PD
Limit fo' I/O. Da amount of disk I/O is ghon be computed as a value 0 \-
10, where 0 is no I/O n' 10 be at least one disk is 100% saturated.
.Sp
\&\fB\-\-io\fR will set both \fB\-\-start\-io\fR n' \fBrun-io\fR.
.IP "\fB\-\-load\fR \fIloadlimit\fR" 9
.IX Item "--load loadlimit"
.PD 0
.IP "\fB\-L\fR \fIloadlimit\fR" 9
.IX Item "-L loadlimit"
.PD
Limit fo' load average.
.Sp
\&\fB\-\-load\fR will set both \fB\-\-start\-load\fR n' \fBrun-load\fR.
.IP "\fB\-\-mem\fR \fImemlimit\fR" 9
.IX Item "--mem memlimit"
.PD 0
.IP "\fB\-M\fR \fImemlimit\fR" 9
.IX Item "-M memlimit"
.PD
Limit fo' free memory. This is tha amount of bytes available as free
+ cache. This limit is treated opposite other limits: If tha system
is above tha limit tha program will run, if it is below tha limit the
program will stop
.Sp
\&\fImemlimit\fR can be postfixed wit K, M, G, T, or P which would
multiply tha size wit 1024, 1048576, 1073741824, or 1099511627776
respectively.
.Sp
\&\fB\-\-mem\fR will set both \fB\-\-start\-mem\fR n' \fBrun-mem\fR.
.IP "\fB\-\-noswap\fR" 9
.IX Item "--noswap"
.PD 0
.IP "\fB\-N\fR" 9
.IX Item "-N"
.PD
No swapping. If tha system is swappin both up in n' up it aint nuthin but a good
indication dat tha system is memory stressed.
.Sp
\&\fB\-\-noswap\fR is over limit if tha system is swappin both up in n' out.
.Sp
\&\fB\-\-noswap\fR will set both \fB\-\-start\-noswap\fR n' \fBrun-noswap\fR.
.IP "\fB\-n\fR \fIniceness\fR" 9
.IX Item "-n sickness"
.PD 0
.IP "\fB\-\-nice\fR \fIniceness\fR" 9
.IX Item "--nice sickness"
.PD
Sets sickness. Right back up in yo muthafuckin ass. See \fBnice\fR(1).
.IP "\fB\-p\fR \fI\s-1PID\s0\fR (alpha testing)" 9
.IX Item "-p PID (alpha testing)"
.PD 0
.IP "\fB\-\-pid\fR \fI\s-1PID\s0\fR (alpha testing)" 9
.IX Item "--pid PID (alpha testing)"
.PD
Process \s-1ID\s0 of process ta suspend yo, but it ain't no stoppin cause I be still poppin'. Yo ass can specify multiple process IDs
with multiple \fB\-p\fR \fI\s-1PID\s0\fR.
.IP "\fB\-\-prg\fR \fIprogram\fR (alpha testing)" 9
.IX Item "--prg program (alpha testing)"
.PD 0
.IP "\fB\-\-program\fR \fIprogram\fR (alpha testing)" 9
.IX Item "--program program (alpha testing)"
.PD
Name of hustlin program ta suspend yo, but it ain't no stoppin cause I be still poppin'. Yo ass can specify multiple programs
with multiple \fB\-\-prg\fR \fIprogram\fR.
.IP "\fB\-\-quote\fR" 9
.IX Item "--quote"
.PD 0
.IP "\fB\-q\fR" 9
.IX Item "-q"
.PD
Quote tha command line. Useful if tha command gotz nuff chars like *,
$, >, n' " dat should not be interpreted by tha shell.
.IP "\fB\-\-run\-io\fR \fIiolimit\fR" 9
.IX Item "--run-io iolimit"
.PD 0
.IP "\fB\-\-ri\fR \fIiolimit\fR" 9
.IX Item "--ri iolimit"
.IP "\fB\-\-run\-load\fR \fIloadlimit\fR" 9
.IX Item "--run-load loadlimit"
.IP "\fB\-\-rl\fR \fIloadlimit\fR" 9
.IX Item "--rl loadlimit"
.IP "\fB\-\-run\-mem\fR \fImemlimit\fR" 9
.IX Item "--run-mem memlimit"
.IP "\fB\-\-rm\fR \fImemlimit\fR" 9
.IX Item "--rm memlimit"
.PD
Run limit. Da hustlin program is ghon be slowed down if tha system is
above tha limit. Right back up in yo muthafuckin ass. See: \fB\-\-io\fR, \fB\-\-load\fR, \fB\-\-mem\fR, \fB\-\-noswap\fR.
.IP "\fB\-\-sensor\fR \fIsensor program\fR (alpha testing)" 9
.IX Item "--sensor sensor program (alpha testing)"
Read sensor. Shiiit, dis aint no joke. Use \fIsensor program\fR ta read a sensor.
.Sp
This will keep tha \s-1CPU\s0 temperature below 80 deg C on GNU/Linux:
.Sp
.Vb 1
\&  sickload \-l 80000 \-f 0.001 \-\-sensor \*(Aqsort \-n /sys/devices/platform/coretemp*/temp*_input\*(Aq gzip *
.Ve
.Sp
This will stop if tha disk space < 100000.
.Sp
.Vb 1
\&  sickload \-H \-l \-100000 \-\-sensor "df . | awk \*(Aq{ print \e$4 }\*(Aq" echo
.Ve
.IP "\fB\-\-start\-io\fR \fIiolimit\fR" 9
.IX Item "--start-io iolimit"
.PD 0
.IP "\fB\-\-si\fR \fIiolimit\fR" 9
.IX Item "--si iolimit"
.IP "\fB\-\-start\-load\fR \fIloadlimit\fR" 9
.IX Item "--start-load loadlimit"
.IP "\fB\-\-sl\fR \fIloadlimit\fR" 9
.IX Item "--sl loadlimit"
.IP "\fB\-\-start\-mem\fR \fImemlimit\fR" 9
.IX Item "--start-mem memlimit"
.IP "\fB\-\-sm\fR \fImemlimit\fR" 9
.IX Item "--sm memlimit"
.PD
Start limit. Da program aint gonna start until tha system is below the
limit. Right back up in yo muthafuckin ass. See: \fB\-\-io\fR, \fB\-\-load\fR, \fB\-\-mem\fR, \fB\-\-noswap\fR.
.IP "\fB\-\-soft\fR" 9
.IX Item "--soft"
.PD 0
.IP "\fB\-S\fR" 9
.IX Item "-S"
.PD
Soft limit. \fBniceload\fR will suspend a process fo' a while n' then
let it run fo' a second thus only slowin down a process while the
system is over one of tha given limits, n' you can put dat on yo' toast. This is tha default.
.IP "\fB\-\-suspend\fR \fI\s-1SEC\s0\fR" 9
.IX Item "--suspend SEC"
.PD 0
.IP "\fB\-s\fR \fI\s-1SEC\s0\fR" 9
.IX Item "-s SEC"
.PD
Suspend time. Right back up in yo muthafuckin ass. Suspend tha command dis nuff secondz when tha max load
average is reached.
.IP "\fB\-\-recheck\fR \fI\s-1SEC\s0\fR" 9
.IX Item "--recheck SEC"
.PD 0
.IP "\fB\-t\fR \fI\s-1SEC\s0\fR" 9
.IX Item "-t SEC"
.PD
Recheck load time. Right back up in yo muthafuckin ass. Sleep \s-1SEC\s0 secondz before checkin load
again. I aint talkin' bout chicken n' gravy biatch. Default is 1 second.
.IP "\fB\-\-verbose\fR" 9
.IX Item "--verbose"
.PD 0
.IP "\fB\-v\fR" 9
.IX Item "-v"
.PD
Verbose. Print some extra output on what tha fuck is happening. Use \fB\-v\fR until
you know what tha fuck yo' is bustin.
.SH "EXAMPLE: See sickload up in action"
.IX Header "EXAMPLE: See sickload up in action"
In terminal 1 run: top
.PP
In terminal 2 run:
.PP
\&\fBniceload \-q perl \-e '$|=1;do{$l==$r or print \*(L".\*(R"; \f(CB$l\fB=$r}until(($r=time\-$^T)\fR>\fB50)'\fR
.PP
This will print a '.' every last muthafuckin second fo' 50 secondz n' smoke a shitload of
\&\s-1CPU.\s0 When tha load rises ta 1.0 tha process is suspended.
.SH "EXAMPLE: Run updatedb"
.IX Header "EXAMPLE: Run updatedb"
Hustlin updatedb can often starve tha system fo' disk I/O n' thus result up in a high load.
.PP
Run updatedb but suspend updatedb if tha load be above 2.00:
.PP
\&\fBniceload \-L 2 updatedb\fR
.SH "EXAMPLE: Run rsync"
.IX Header "EXAMPLE: Run rsync"
rsync can just like updatedb starve tha system fo' disk I/O n' thus result up in a high load.
.PP
Run rsync but keep load below 3.4. If load reaches 7 chill for
(7\-3.4)*12 seconds:
.PP
\&\fBniceload \-L 3.4 \-f 12 rsync \-Ha /home/ /backup/home/\fR
.SH "EXAMPLE: Ensure enough disk cache"
.IX Header "EXAMPLE: Ensure enough disk cache"
Assume tha program \fBfoo\fR uses 2 \s-1GB\s0 filez intensively. \fBfoo\fR will run
fast if tha filez is up in disk cache n' be slow as a cold-ass lil crawl if they are
not up in tha cache.
.PP
To ensure 2 \s-1GB\s0 is reserved fo' disk cache run:
.PP
\&\fBniceload \-\-hard \-\-run\-mem 2g foo\fR
.PP
This aint gonna guarantee dat tha 2 \s-1GB\s0 memory is ghon be used fo' the
filez fo' \fBfoo\fR yo, but it will stop \fBfoo\fR if tha memory fo' disk cache
is too low.
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
None. In future versions \f(CW$NICELOAD\fR is ghon be able ta contain default settings.
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
Exit status should be tha same as tha command bein run (untested).
.SH "REPORTING BUGS"
.IX Header "REPORTING BUGS"
Report bugs ta <bug\-parallel@gnu.org>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (C) 2004\-11\-19 Ole Tange, http://ole.tange.dk
.PP
Copyright (C) 2005,2006,2006,2008,2009,2010 Ole Tange, http://ole.tange.dk
.PP
Copyright (C) 2010,2011,2012 Ole Tange, http://ole.tange.dk n' Free
Software Foundation, Inc.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2010,2011,2012 Jacked Software Foundation, Inc.
.PP
This program is free software; you can redistribute it and/or modify
it under tha termz of tha \s-1GNU\s0 General Public License as published by
the Jacked Software Foundation; either version 3 of tha License, or
at yo' option any lata version.
.PP
This program is distributed up in tha hope dat it is ghon be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even tha implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE. \s0 See the
\&\s-1GNU\s0 General Public License fo' mo' details.
.PP
Yo ass should have received a cold-ass lil copy of tha \s-1GNU\s0 General Public License
along wit dis program.  If not, peep <http://www.gnu.org/licenses/>.
.SS "Documentation license I"
.IX Subsection "Documentation license I"
Permission is granted ta copy, distribute and/or modify dis documentation
under tha termz of tha \s-1GNU\s0 Jacked Documentation License, Version 1.3 or
any lata version published by tha Jacked Software Foundation; wit no
Invariant Sections, wit no Front-Cover Texts, n' wit no Back-Cover
Texts, n' you can put dat on yo' toast.  A copy of tha license is included up in tha file fdl.txt.
.SS "Documentation license \s-1II\s0"
.IX Subsection "Documentation license Pt II"
Yo ass is free:
.IP "\fBto Share\fR" 9
.IX Item "to Share"
to copy, distribute n' transmit tha work
.IP "\fBto Remix\fR" 9
.IX Item "to Remix"
to adapt tha work
.PP
Under tha followin conditions:
.IP "\fBAttribution\fR" 9
.IX Item "Attribution"
Yo ass must attribute tha work up in tha manner specified by tha lyricist or
licensor (but not up in any way dat suggests dat they endorse you or
your use of tha work).
.IP "\fBSmoke up Alike\fR" 9
.IX Item "Smoke up Alike"
If you alter, transform, or build upon dis work, you may distribute
the resultin work only under tha same, similar or a cold-ass lil compatible
license.
.PP
With tha understandin that:
.IP "\fBWaiver\fR" 9
.IX Item "Waiver"
Any of tha above conditions can be waived if you git permission from
the copyright holder.
.IP "\fBPublic Domain\fR" 9
.IX Item "Public Domain"
Where tha work or any of its elements is up in tha hood domain under
applicable law, dat status is up in no way affected by tha license.
.IP "\fBOther Rights\fR" 9
.IX Item "Other Rights"
In no way is any of tha followin muthafuckin rights affected by tha license:
.RS 9
.IP "\(bu" 2
Yo crazy-ass fair dealin or fair use rights, or other applicable
copyright exceptions n' limitations;
.IP "\(bu" 2
Da authorz moral rights;
.IP "\(bu" 2
Rights other peeps may have either up in tha work itself or in
how tha work is used, like fuckin publicitizzle or privacy rights.
.RE
.RS 9
.RE
.IP "\fBNotice\fR" 9
.IX Item "Notice"
For any reuse or distribution, you must make clear ta others the
license termz of dis work.
.PP
A copy of tha full license is included up in tha file as cc\-by\-sa.txt.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
\&\s-1GNU \s0\fBniceload\fR uses Perl, n' tha Perl modulez \s-1POSIX,\s0 and
Getopt::Long.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBparallel\fR(1), \fBnice\fR(1), \fBuptime\fR(1)
