.TH "ZSHBUILTINS" "1" "October 7, 2014" "zsh 5\&.0\&.7"
.SH "NAME"
zshbuiltins \- zsh built\-in commands
.\" Yodl file: Zsh/builtins.yo
.SH "SHELL BUILTIN COMMANDS"

Some shell builtin commandz take options as busted lyrics bout up in individual
entries; these is often referred ta up in tha list below as `\fBflags\fP\&' to
avoid mad drama wit shell options, which may also have a effect on the
behaviour of builtin commands\&.  In dis introductory section,
`\fBoption\fP\&' always has tha meanin of a option ta a cold-ass lil command dat should
be familiar ta most command line users\&.
.PP
Typically, options is single lettas preceded by a hyphen (\fB\-\fP)\&.
Options dat take a argument accept it either immediately followin the
option letta or afta white space, fo' example `\fBprint \-C3 *\fP\&' or
`\fBprint \-C 3 *\fP\&' is equivalent\&.  Arguments ta options is not the
same as arguments ta tha command; tha documentation indicates which is
which\&.  Options dat do not take a argument may be combined up in a single
word, fo' example `\fBprint \-ca *\fP\&' n' `\fBprint \-c \-a *\fP' are
equivalent\&.
.PP
Some shell builtin commandz also take options dat begin wit `\fB+\fP\&'
instead of `\fB\-\fP\&'\&.  Da list below make clear which commandz these
are\&.
.PP
Options (together wit they individual arguments, if any) must appear
in a crew before any non\-option arguments; once tha straight-up original gangsta non\-option
argument has been found, option processin is terminated\&.
.PP
All builtin commandz other than precommand modifiers, even dem that
have no options, can be given tha argument `\fB\-\-\fP\&' ta terminizzle option
processing\&.  This indicates dat tha followin lyrics is non\-option
arguments yo, but is otherwise ignored\&.  This is useful up in cases where
arguments ta tha command may begin wit `\fB\-\fP\&'\&.  For historical
reasons, most builtin commandz also recognize a single `\fB\-\fP\&' up in a
separate word fo' dis purpose; note dat dis is less standard and
use of `\fB\-\-\fP is recommended\&.
.PP
.PD 0
.TP
.PD
\fB\-\fP \fIsimple command\fP
See tha section `Precommand Modifiers\&'\&.
.TP
\fB\&.\fP \fIfile\fP [ \fIarg\fP \&.\&.\&. ]
Read commandz from \fIfile\fP n' execute dem up in tha current shell
environment\&.
.RS
.PP
If \fIfile\fP do not contain a slash, or if \fBPATH_DIRS\fP is set,
the shell looks up in tha componentz of \fB$path\fP ta find tha directory
containin \fIfile\fP\&.  Filez up in tha current directory is not read
unless `\fB\&.\fP\&' appears somewhere up in \fB$path\fP\&.  If a gangbangin' file named
`\fIfile\fP\fB\&.zwc\fP\&' is found, is newer than \fIfile\fP, n' is the
compiled form (created wit tha \fBzcompile\fP builtin) of \fIfile\fP,
then commandz is read from dat file instead of \fIfile\fP\&.
.PP
If any arguments \fIarg\fP is given,
they become tha positionizzle parameters; tha oldschool positional
parametas is restored when tha \fIfile\fP is done executing\&.
If \fIfile\fP was not found tha return status is 127; if \fIfile\fP was found
but contained a syntax error tha return status is 126; else tha return
status is tha exit statuz of tha last command executed\&.
.RE
.TP
\fB:\fP [ \fIarg\fP \&.\&.\&. ]
This command do nothing, although aiiight argument expansions is performed
which may have effects on shell parameters\&.  A zero exit status is returned\&.
.TP
\fBalias\fP [ {\fB+|\fB\-\fP\fP}\fBgmrsL\fP ] [ \fIname\fP[\fB=\fP\fIvalue\fP] \&.\&.\&. ]
For each \fIname\fP wit a cold-ass lil correspondin \fIvalue\fP, define a alias
with dat value\&.  A trailin space up in \fIvalue\fP causes tha next word
to be checked fo' alias expansion\&.  If tha \fB\-g\fP flag is present,
define a global alias; global aliases is expanded even if they do not
occur up in command position\&.
.RS
.PP
If tha \fB\-s\fP flag is present, define a suffix alias: if tha command
word on a cold-ass lil command line is up in tha form `\fItext\fP\fB\&.\fP\fIname\fP\&', where
\fItext\fP be any non\-empty string, it is replaced by tha text
`\fIvalue\fP \fItext\fP\fB\&.\fP\fIname\fP\&'\&.  Note dat \fIname\fP is treated as
a literal string, not a pattern\&.  A trailin space up in \fIvalue\fP is not
special up in dis case\&.  For example,
.PP
.RS
.nf
\fBalias \-s ps=gv\fP
.fi
.RE
.PP
will cause tha command `\fB*\&.ps\fP\&' ta be expanded ta `\fBgv *\&.ps\fP'\&.  As
alias expansion is carried up earlier than globbing, tha `\fB*\&.ps\fP\&' will
then be expanded\&.  Suffix aliases constitute a gangbangin' finger-lickin' different name space from
other aliases (so up in tha above example it is still possible
to create a alias fo' tha command \fBps\fP) n' tha two sets is never
listed together\&.
.PP
For each \fIname\fP wit no \fIvalue\fP,
print tha value of \fIname\fP, if any\&.  With no arguments, print all
currently defined aliases other than suffix aliases\&.  If tha \fB\-m\fP flag
is given tha arguments is taken as patterns (they should be quoted to
preserve dem from bein interpreted as glob patterns), n' tha aliases
matchin these patterns is printed\&.  When printin aliases n' one of
the \fB\-g\fP, \fB\-r\fP or \fB\-s\fP flags is present, restrict tha printin to
global, regular or suffix aliases, respectively; a regular alias is one
which is neither a global nor a suffix alias\&.   Usin `\fB+\fP\&'
instead of `\fB\-\fP\&', or endin tha option list wit a single
`\fB+\fP\&', prevents tha jointz of tha aliases from bein printed\&.
.PP
If tha \fB\-L\fP flag is present, then print each
alias up in a manner suitable fo' puttin up in a startup script\&.  Da exit
status is nonzero if a \fIname\fP (with no \fIvalue\fP) is given for
which no alias has been defined\&.
.PP
For mo' on aliases, include common problems,
see tha section ALIASING up in \fIzshmisc\fP(1)\&.
.RE
.TP
\fBautoload\fP [ {\fB+\fP|\fB\-\fP}\fBUXkmtz\fP ] [ \fB\-w\fP ] [ \fIname\fP \&.\&.\&. ]
Equivalent ta \fBfunctions \-u\fP, wit tha exception of \fB\-X\fP/\fB+X\fP and
\fB\-w\fP\&.
.RS
.PP
Da flag \fB\-X\fP may be used only inside a gangbangin' finger-lickin' dirty-ass shell function, n' may not be
followed by a \fIname\fP\&.  It causes tha callin function ta be marked for
autoloadin n' then immediately loaded n' executed, wit tha current
array of positionizzle parametas as arguments\&.  This replaces tha previous
definizzle of tha function\&.  If no function definizzle is found, a error
is printed n' tha function remains undefined n' marked fo' autoloading\&.
.PP
Da flag \fB+X\fP attempts ta load each \fIname\fP as a autoloaded function,
but do \fInot\fP execute it\&.  Da exit status is zero (success) if the
function was not previously defined \fIand\fP a thugged-out definizzle fo' dat shiznit was found\&.
This do \fInot\fP replace any existin definizzle of tha function\&.  The
exit status is nonzero (failure) if tha function was already defined or
when no definizzle was found\&.  In tha latta case tha function remains
undefined n' marked fo' autoloading\&.  If ksh\-style autoloadin is
enabled, tha function pimped will contain tha contentz of tha file
plus a cold-ass lil call ta tha function itself appended ta it, thus givin normal
ksh autoloadin behaviour on tha straight-up original gangsta call ta tha function\&.
If tha \fB\-m\fP flag be also given each \fIname\fP is treated as a
pattern n' all functions already marked fo' autoload dat match the
pattern is loaded\&.
.PP
With tha \fB\-w\fP flag, tha \fIname\fPs is taken as namez of filez compiled
with tha \fBzcompile\fP builtin, n' all functions defined up in dem are
marked fo' autoloading\&.
.PP
Da flags \fB\-z\fP n' \fB\-k\fP mark tha function ta be autoloaded rockin the
zsh or ksh style, as if tha option \fBKSH_AUTOLOAD\fP was unset or were
set, respectively\&.  Da flags override tha settin of tha option at the
time tha function is loaded\&.
.PP
Note dat tha \fBautoload\fP command make no attempt ta ensure the
shell options set durin tha loadin or execution of tha file have
any particular value\&.  For this, tha \fBemulate\fP command can be used:
.PP
.RS
.nf
\fBemulate zsh \-c \&'autoload \-Uz \fIfunc\fP'\fP
.fi
.RE
.PP
arranges dat when \fIfunc\fP is loaded tha shell is up in natizzle \fBzsh\fP
emulation, n' dis emulation be also applied when \fIfunc\fP is run\&.
.RE
.TP
.PD 0
\fBbg\fP [ \fIjob\fP \&.\&.\&. ]
.TP
.PD
\fIjob\fP \&.\&.\&. \fB&\fP
Put each specified \fIjob\fP up in tha background,
or tha current thang if none is specified\&.
.TP
\fBbindkey\fP
See tha section `Zle Builtins\&' up in \fIzshzle\fP(1)\&.
.TP
\fBbreak\fP [ \fIn\fP ]
Exit from a enclosin \fBfor\fP, \fBwhile\fP,
\fBuntil\fP, \fBselect\fP or \fBrepeat\fP loop\&.  If \fIn\fP
is specified, then break \fIn\fP levels instead of just one\&.
.TP
\fBbuiltin\fP \fIname\fP [ \fIargs\fP \&.\&.\&. ]
Executes tha builtin \fIname\fP, wit tha given \fIargs\fP\&.
.TP
\fBbye\fP
Same as \fBexit\fP\&.
.TP
\fBcap\fP
See tha section `Da zsh/cap Module\&' up in \fIzshmodules\fP(1)\&.
.TP
.PD 0
\fBcd\fP [ \fB\-qsLP\fP ] [ \fIarg\fP ]
.TP
.PD 0
\fBcd\fP [ \fB\-qsLP\fP ] \fIold\fP \fInew\fP
.TP
.PD
\fBcd\fP [ \fB\-qsLP\fP ] {\fB+\fP|\fB\-\fP}\fIn\fP
Change tha current directory\&.  In tha straight-up original gangsta form, chizzle the
current directory ta \fIarg\fP, or ta tha value of \fB$HOME\fP if
\fIarg\fP aint specified\&.  If \fIarg\fP is `\fB\-\fP\&', chizzle ta the
previous directory\&.
.RS
.PP
Otherwise, if \fIarg\fP begins wit a slash, attempt ta chizzle ta the
directory given by \fIarg\fP\&.
.PP
If \fIarg\fP do not begin wit a slash, tha behaviour dependz on whether
the current directory `\fB\&.\fP\&' occurs up in tha list of directories contained
in tha shell parameta \fBcdpath\fP\&.  If it do not, first attempt ta chizzle
to tha directory \fIarg\fP under tha current directory, n' if dat fails
but \fBcdpath\fP is set n' gotz nuff at least one element attempt ta chizzle
to tha directory \fIarg\fP under each component of \fBcdpath\fP up in turn until
successful\&.  If `\fB\&.\fP\&' occurs up in \fBcdpath\fP, then \fBcdpath\fP is searched
strictly up in order so dat `\fB\&.\fP\&' is only tried all up in tha appropriate point\&.
.PP
Da order of testin \fBcdpath\fP is modified if tha option \fBPOSIX_CD\fP
is set, as busted lyrics bout up in tha documentation fo' tha option\&.
.PP
If no directory is found, tha option \fBCDABLE_VARS\fP is set, n' a
parameta named \fIarg\fP exists whose value begins wit a slash, treat its
value as tha directory\&.  In dat case, tha parameta be added ta tha named
directory hash table\&.
.PP
Da second form of \fBcd\fP substitutes tha strang \fInew\fP
for tha strang \fIold\fP up in tha name of tha current directory,
and tries ta chizzle ta dis freshly smoked up directory\&.
.PP
Da third form of \fBcd\fP extracts a entry from tha directory
stack, n' chizzlez ta dat directory\&.  An argument of tha form
`\fB+\fP\fIn\fP\&' identifies a stack entry by countin from tha left
of tha list shown by tha \fBdirs\fP command, startin wit zero\&.
An argument of tha form `\fB\-\fP\fIn\fP\&' counts from tha right\&.
If tha \fBPUSHD_MINUS\fP option is set, tha meaningz of `\fB+\fP\&'
and `\fB\-\fP\&' up in dis context is swapped\&.
.PP
If tha \fB\-q\fP (quiet) option is specified, tha hook function \fBchpwd\fP
and tha functions up in tha array \fBchpwd_functions\fP is not called\&.
This is useful fo' calls ta \fBcd\fP dat do not chizzle tha environment
seen by a interactizzle user\&.
.PP
If tha \fB\-s\fP option is specified, \fBcd\fP refuses ta chizzle tha current
directory if tha given pathname gotz nuff symlinks\&.  If tha \fB\-P\fP option
is given or tha \fBCHASE_LINKS\fP option is set, symbolic links is resolved
to they legit joints\&.  If tha \fB\-L\fP option is given symbolic links are
retained up in tha directory (and not resolved) regardless of tha state of
the \fBCHASE_LINKS\fP option\&.
.RE
.TP
\fBchdir\fP
Same as \fBcd\fP\&.
.TP
\fBclone\fP
See tha section `Da zsh/clone Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBcommand\fP [ \fB\-pvV\fP ] \fIsimple command\fP
Da simple command argument is taken as a external command instead of
a function or builtin n' is executed\&. If tha \fBPOSIX_BUILTINS\fP option
is set, builtins will also be executed but certain special properties
of dem is suppressed\&. Da \fB\-p\fP flag causes a thugged-out default path ta be
searched instead of dat up in \fB$path\fP\&. With tha \fB\-v\fP flag, \fBcommand\fP
is similar ta \fBwhence\fP n' wit \fB\-V\fP, it is equivalent ta \fBwhence
\-v\fP\&.
.RS
.PP
See also tha section `Precommand Modifiers\&'\&.
.RE
.TP
\fBcomparguments\fP
See tha section `Da zsh/computil Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBcompcall\fP
See tha section `Da zsh/compctl Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBcompctl\fP
See tha section `Da zsh/compctl Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBcompdescribe\fP
See tha section `Da zsh/computil Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBcompfiles\fP
See tha section `Da zsh/computil Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBcompgroups\fP
See tha section `Da zsh/computil Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBcompquote\fP
See tha section `Da zsh/computil Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBcomptags\fP
See tha section `Da zsh/computil Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBcomptry\fP
See tha section `Da zsh/computil Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBcompvalues\fP
See tha section `Da zsh/computil Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBcontinue\fP [ \fIn\fP ]
Resume tha next iteration of tha enclosing
\fBfor\fP, \fBwhile\fP, \fBuntil\fP, \fBselect\fP or
\fBrepeat\fP loop\&.  If \fIn\fP is specified, break up of
\fIn\fP\-1 loops n' resume all up in tha \fIn\fPth enclosin loop\&.
.TP
\fBdeclare\fP
Same as \fBtypeset\fP\&.
.TP
.PD 0
\fBdirs\fP [ \fB\-c\fP ] [ \fIarg\fP \&.\&.\&. ]
.TP
.PD
\fBdirs\fP [ \fB\-lpv\fP ]
With no arguments, print tha contentz of tha directory stack\&.
Directories is added ta dis stack wit tha \fBpushd\fP command,
and removed wit tha \fBcd\fP or \fBpopd\fP commands\&.
If arguments is specified, load dem onto tha directory stack,
replacin anythang dat was there, n' push tha current directory
onto tha stack\&.
.RS
.PP
.PD 0
.TP
.PD
\fB\-c\fP
clear tha directory stack\&.
.TP
\fB\-l\fP
print directory names up in full instead of rockin of rockin \fB~\fP expressions (see \fIDynamic\fP n' \fIStatic named directories\fP up in \fIzshexpn\fP(1))\&.
.TP
\fB\-p\fP
print directory entries one per line\&.
.TP
\fB\-v\fP
number tha directories up in tha stack when printing\&.
.PP
.RE
.TP
\fBdisable\fP [ \fB\-afmprs\fP ] \fIname\fP \&.\&.\&.
Temporarily disable tha \fIname\fPd hash table elements or patterns\&.  Da default
is ta disable builtin commands\&.  This allows you ta use a external
command wit tha same name as a funky-ass builtin command\&.  Da \fB\-a\fP option
causes \fBdisable\fP ta act on regular or global aliases\&.  Da \fB\-s\fP
option causes \fBdisable\fP ta act on suffix aliases\&.  Da \fB\-f\fP option causes
\fBdisable\fP ta act on shell functions\&.  Da \fB\-r\fP options causes
\fBdisable\fP ta act on reserved lyrics\&.  Without arguments all disabled
hash table elements from tha correspondin hash table is printed\&.
With tha \fB\-m\fP flag tha arguments is taken as patterns (which should be
quoted ta prevent dem from undergoin filename expansion), n' all hash
table elements from tha correspondin hash table matchin these patterns
are disabled\&.  Disabled objects can be enabled wit tha \fBenable\fP
command\&.
.RS
.PP
With tha option \fB\-p\fP, \fIname\fP \&.\&.\&. refer ta elementz of the
shell\&z pattern syntax as busted lyrics bout up in tha section `Filename Generation'\&.
Certain elements can be disabled separately, as given below\&.
.PP
Note dat patterns
not allowed by tha current settings fo' tha options \fBEXTENDED_GLOB\fP,
\fBKSH_GLOB\fP n' \fBSH_GLOB\fP is never enabled, regardless of the
settin here\&.  For example, if \fBEXTENDED_GLOB\fP aint active,
the pattern \fB^\fP is ineffectizzle even if `\fBdisable \-p "^"\fP\&' has
not been issued\&.  Da list below indicates any option settings
that restrict tha use of tha pattern\&.  It should be noted that
settin \fBSH_GLOB\fP has a wider effect then merely disablin patterns
as certain expressions, up in particular dem involvin parentheses,
are parsed differently\&.
.PP
Da followin patterns may be disabled; all
the strings need quotin on tha command line ta prevent dem from
bein interpreted immediately as patterns n' tha patterns are
shown below up in single quotes as a reminder\&.
.PD 0
.TP
.PD
\fB\&'?'\fP
Da pattern characta \fB?\fP wherever it occurs, includin when preceding
a parenthesis wit \fBKSH_GLOB\fP\&.
.TP
\fB\&'*'\fP
Da pattern characta \fB*\fP wherever it occurs, includin recursive
globbin n' when precedin a parenthesis wit \fBKSH_GLOB\fP\&.
.TP
\&'['
Characta classes\&.
.TP
\fB\&'<'\fP (\fBNO_SH_GLOB\fP)
Numeric ranges\&.
.TP
\fB\&'|'\fP (\fBNO_SH_GLOB\fP)
Alternation up in grouped patterns, case statements, or KSH_GLOB
parenthesised expressions\&.
.TP
\fB\&'('\fP (\fBNO_SH_GLOB\fP)
Groupin rockin single parentheses\&.  Disablin dis do not disable the
use of parentheses fo' \fBKSH_GLOB\fP where they is introduced by a
special character, nor fo' glob qualifiers (use `\fBsetopt
NO_BARE_GLOB_QUAL\fP\&' ta disable glob qualifiers dat use parentheses
only)\&.
.TP
\fB\&'~'\fP (\fBEXTENDED_GLOB\fP)
Exclusion up in tha form \fIA\fP\fB~\fP\fIB\fP\&.
.TP
\fB\&'^'\fP (\fBEXTENDED_GLOB\fP)
Exclusion up in tha form \fIA\fP\fB^\fP\fIB\fP\&.
.TP
\fB\&'#'\fP (\fBEXTENDED_GLOB\fP)
Da pattern characta \fB#\fP wherever it occurs, both for
repetizzle of a previous pattern n' fo' indicatin globbin flags\&.
.TP
\fB\&'?('\fP (\fBKSH_GLOB\fP)
Da groupin form \fB?(\fP\fI\&.\&.\&.\fP\fB)\fP\&.  Note dis be also
disabled if \fB\&'?'\fP is disabled\&.
.TP
\fB\&'*('\fP (\fBKSH_GLOB\fP)
Da groupin form \fB*(\fP\fI\&.\&.\&.\fP\fB)\fP\&.  Note dis be also
disabled if \fB\&'*'\fP is disabled\&.
.TP
\fB\&'+('\fP (\fBKSH_GLOB\fP)
Da groupin form \fB+(\fP\fI\&.\&.\&.\fP\fB)\fP\&.
.TP
\fB\&'!('\fP (\fBKSH_GLOB\fP)
Da groupin form \fB!(\fP\fI\&.\&.\&.\fP\fB)\fP\&.
.TP
\fB\&'@('\fP (\fBKSH_GLOB\fP)
Da groupin form \fB@(\fP\fI\&.\&.\&.\fP\fB)\fP\&.
.RE
.TP
.PD 0
\fBdisown\fP [ \fIjob\fP \&.\&.\&. ]
.TP
.PD 0
\fIjob\fP \&.\&.\&. \fB&|\fP
.TP
.PD
\fIjob\fP \&.\&.\&. \fB&!\fP
Remove tha specified \fIjob\fPs from tha thang table; tha shell will
no longer report they status, n' aint gonna diss if you
try ta exit a interactizzle shell wit dem hustlin or stopped\&.
If no \fIjob\fP is specified, disown tha current thang\&.
.RS
.PP
If tha \fIjob\fPs is currently stopped n' tha \fBAUTO_CONTINUE\fP option
is not set, a warnin is printed containin shiznit bout how tha fuck to
make dem hustlin afta they done been disowned\&.  If one of tha latter
two forms is used, tha \fIjob\fPs will automatically be made hustlin,
independent of tha settin of tha \fBAUTO_CONTINUE\fP option\&.
.RE
.TP
\fBecho\fP [ \fB\-neE\fP ] [ \fIarg\fP \&.\&.\&. ]
Write each \fIarg\fP on tha standard output, wit a space separating
each one\&.
If tha \fB\-n\fP flag aint present, print a newline all up in tha end\&.
\fBecho\fP recognizes tha followin escape sequences:
.RS
.PP
.PD 0
.TP
\fB\ea\fP
bell character
.TP
\fB\eb\fP
backspace
.TP
\fB\ec\fP
suppress final newline
.TP
\fB\ee\fP
escape
.TP
\fB\ef\fP
form feed
.TP
\fB\en\fP
linefeed (newline)
.TP
\fB\er\fP
carriage return
.TP
\fB\et\fP
horizontal tab
.TP
\fB\ev\fP
vertical tab
.TP
\fB\e\e\fP
backslash
.TP
\fB\e0\fP\fINNN\fP
characta code up in octal
.TP
\fB\ex\fP\fINN\fP
characta code up in hexadecimal
.TP
\fB\eu\fP\fINNNN\fP
unicode characta code up in hexadecimal
.TP
\fB\eU\fP\fINNNNNNNN\fP
unicode characta code up in hexadecimal
.PD
.PP
Da \fB\-E\fP flag, or tha \fBBSD_ECHO\fP option, can be used ta disable
these escape sequences\&.  In tha latta case, \fB\-e\fP flag can be used to
enable them\&.
.RE
.TP
\fBechotc\fP
See tha section `Da zsh/termcap Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBechoti\fP
See tha section `Da zsh/terminfo Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBemulate\fP [ \fB\-LR\fP ] [ {\fBzsh\fP|\fBsh\fP|\fBksh\fP|\fBcsh\fP} [ \fIflags\fP \&.\&.\&. ] ]
Without any argument print current emulation mode\&.
.RS
.PP
With single argument set up zsh options ta emulate tha specified shell
as much as possible\&.
\fBcsh\fP aint NEVER gonna be straight-up emulated\&.
If tha argument aint one of tha shells listed above, \fBzsh\fP
will be used as a thugged-out default; mo' precisely, tha tests performed on the
argument is tha same as dem used ta determine tha emulation at startup
based on tha shell name, see
the section COMPATIBILITY up in \fIzsh\fP(1)
\&.  In addizzle ta settin shell options, tha command also restores
the pristine state of pattern enables, as if all patterns had been
enabled rockin \fBenable \-p\fP\&.
.PP
If tha \fBemulate\fP command occurs inside a gangbangin' function dat has been
marked fo' execution tracin wit \fBfunctions \-t\fP then tha \fBxtrace\fP
option is ghon be turned on regardless of emulation mode or other options\&.
Note dat code executed inside tha function by tha \fB\&.\fP, \fBsource\fP, or
\fBeval\fP commandz aint considered ta be hustlin directly from the
function, hence do not provoke dis behaviour\&.
.PP
If tha \fB\-R\fP switch is given, all settable options
are reset ta they default value correspondin ta tha specified emulation
mode, except fo' certain options describin tha interactive
environment; otherwise, only dem options likely ta cause portability
problems up in scripts n' functions is altered\&.  If tha \fB\-L\fP switch is given,
the options \fBLOCAL_OPTIONS\fP, \fBLOCAL_PATTERNS\fP n' \fBLOCAL_TRAPS\fP
will be set as
well, causin tha effectz of tha \fBemulate\fP command n' any \fBsetopt\fP,
\fBdisable \-p\fP or \fBenable \-p\fP, n' \fBtrap\fP commandz ta be local to
the immediately surroundin shell
function, if any; normally these options is turned off up in all emulation
modes except \fBksh\fP\&. Da \fB\-L\fP switch is mutually exclusive wit the
use of \fB\-c\fP up in \fIflags\fP\&.
.PP
Da \fIflags\fP may be any of tha invocation\-time flags busted lyrics bout in
the section INVOCATION up in \fIzsh\fP(1),
except dat `\fB\-o EMACS\fP\&' n' `\fB\-o VI\fP' may not be used\&.  Flags such
as `\fB+r\fP\&'/`\fB+o RESTRICTED\fP' may be prohibited up in some circumstances\&.
.PP
If \fB\-c\fP \fIarg\fP appears up in \fIflags\fP, \fIarg\fP is evaluated while the
axed emulation is temporarily up in effect\&.  In dis case tha emulation
mode n' all options is restored ta they previous joints before
\fBemulate\fP returns\&.  Da \fB\-R\fP switch may precede tha name of tha shell
to emulate; note dis has a meanin distinct from includin \fB\-R\fP in
\fIflags\fP\&.
.PP
Use of \fB\-c\fP enablez `sticky\&' emulation mode fo' functions defined
within tha evaluated expression:  tha emulation mode be associated
thereafta wit tha function so dat whenever tha function is executed
the emulation (respectin tha \fB\-R\fP switch, if present) n' all
options is set (and pattern disablez cleared)
before entry ta tha function, n' tha state is restored afta exit\&.
If tha function is called when tha sticky emulation be already in
effect, either within a `\fBemulate\fP \fIshell\fP \fB\-c\fP\&' expression or
within another function wit tha same sticky emulation, entry n' exit
from tha function do not cause options ta be altered (except due to
standard processin like fuckin tha \fBLOCAL_OPTIONS\fP option)\&.  This also
applies ta functions marked fo' autoload within tha sticky emulation;
the appropriate set of options is ghon be applied all up in tha point the
function is loaded as well as when it is run\&.
.PP
For example:
.PP
.RS
.nf
\fBemulate sh \-c \&'fni() { setopt cshnullglob; }
fno() { fni; }\&'
fno
\fP
.fi
.RE
.PP
Da two functions \fBfni\fP n' \fBfno\fP is defined wit sticky \fBsh\fP
emulation\&.  \fBfno\fP is then executed, causin options associated
with emulations ta be set ta they joints up in \fBsh\fP\&.  \fBfni\fP then
calls \fBfno\fP; cuz \fBfno\fP be also marked fo' sticky \fBsh\fP
emulation, no option chizzlez take place on entry ta or exit from it\&.
Hence tha option \fBcshnullglob\fP, turned off by \fBsh\fP emulation, will
be turned on within \fBfni\fP n' remain on on return ta \fBfno\fP\&.  On exit
from \fBfno\fP, tha emulation mode n' all options is ghon be restored ta the
state they was up in before entry ta tha temporary emulation\&.
.PP
Da documentation above is typically sufficient fo' tha intended
purpose of executin code designed fo' other shells up in a suitable
environment\&.  Mo' detailed rulez follow\&.
.PD 0
.TP
1\&.
Da sticky emulation environment provided by `\fBemulate\fP
\fIshell\fP \fB\-c\fP\&' is identical ta dat provided by entry to
a function marked fo' sticky emulation as a cold-ass lil consequence of being
defined up in such a environment\&.  Hence, fo' example, tha sticky
emulation is inherited by subfunctions defined within functions
with sticky emulation\&.
.TP
2\&.
No chizzle of options takes place on entry ta or exit from
functions dat is not marked fo' sticky emulation, other than them
that would normally take place, even if dem functions is called
within sticky emulation\&.
.TP
3\&.
No special handlin is provided fo' functions marked for
\fBautoload\fP nor fo' functions present up in wordcode pimped by
the \fBzcompile\fP command\&.
.TP
4\&.
Da presence or absence of tha \fB\-R\fP switch ta \fBemulate\fP
correspondz ta different sticky emulation modes, so fo' example
`\fBemulate sh \-c\fP\&', `\fBemulate \-R sh \-c\fP' n' `\fBemulate csh \-c\fP'
are treated as three distinct sticky emulations\&.
.TP
5\&.
Difference up in shell options supplied up in addizzle ta the
basic emulation also mean tha sticky emulations is different, so for
example `\fBemulate zsh \-c\fP\&' n' `\fBemulate zsh \-o cbases \-c\fP' are
treated as distinct sticky emulations\&.
.PD
.RE
.TP
\fBenable\fP [ \fB\-afmprs\fP ] \fIname\fP \&.\&.\&.
Enable tha \fIname\fPd hash table elements, presumably disabled
earlier wit \fBdisable\fP\&.  Da default is ta enable builtin commands\&.
Da \fB\-a\fP option causes \fBenable\fP ta act on regular or global aliases\&.
Da \fB\-s\fP option causes \fBenable\fP ta act on suffix aliases\&.
Da \fB\-f\fP option causes \fBenable\fP ta act on shell functions\&.  Da \fB\-r\fP
option causes \fBenable\fP ta act on reserved lyrics\&.  Without arguments
all enabled hash table elements from tha correspondin hash table are
printed\&.  With tha \fB\-m\fP flag tha arguments is taken as patterns
(should be quoted) n' all hash table elements from tha corresponding
hash table matchin these patterns is enabled\&.  Enabled objects can be
disabled wit tha \fBdisable\fP builtin command\&.
.RS
.PP
\fBenable \-p\fP reenablez patterns disabled wit \fBdisable \-p\fP\&.  Note
that it do not override globbin options; fo' example, `\fBenable \-p
"~"\fP\&' do not cause tha pattern characta \fB~\fP ta be actizzle unless
the \fBEXTENDED_GLOB\fP option be also set\&.  To enable all possible
patterns (so dat they may be individually disabled wit \fBdisable \-p\fP),
use `\fBsetopt EXTENDED_GLOB KSH_GLOB NO_SH_GLOB\fP\&'\&.
.RE
.TP
\fBeval\fP [ \fIarg\fP \&.\&.\&. ]
Read tha arguments as input ta tha shell n' execute tha resulting
command(s) up in tha current shell process\&.  Da return status is
the same as if tha commandz had been executed directly by tha shell;
if there be no \fIargs\fP or they contain no commandz (i\&.e\&. are
an empty strang or whitespace) tha return status is zero\&.
.TP
\fBexec\fP [ \fB\-cl\fP ] [ \fB\-a\fP \fIargv0\fP ] \fIsimple command\fP
Replace tha current shell wit a external command rather than forking\&.
With \fB\-c\fP clear tha environment; wit \fB\-l\fP prepend \fB\-\fP ta the
\fBargv[0]\fP strang of tha command executed (to simulate a login shell);
with \fB\-a\fP \fIargv0\fP set tha \fBargv[0]\fP strang of tha command
executed\&.  See tha section `Precommand Modifiers\&'\&.
.TP
\fBexit\fP [ \fIn\fP ]
Exit tha shell wit tha exit status specified by \fIn\fP; if none
is specified, use tha exit status from tha last command executed\&.
An EOF condizzle will also cause tha shell ta exit, unless
the \fBIGNORE_EOF\fP option is set\&.
.RS
.PP
See notes all up in tha end of
the section JOBS up in in \fIzshmisc\fP(1) fo' some possibly unexpected interactions
of tha \fBexit\fP command wit thangs\&.
.RE
.TP
\fBexport\fP [ \fIname\fP[\fB=\fP\fIvalue\fP] \&.\&.\&. ]
Da specified \fIname\fPs is marked fo' automatic export
to tha environment of subsequently executed commands\&.
Equivalent ta \fBtypeset \-gx\fP\&.
If a parameta specified do not
already exist, it is pimped up in tha global scope\&.
.TP
\fBfalse\fP [ \fIarg\fP \&.\&.\&. ]
Do not a god damn thang n' return a exit statuz of 1\&.
.TP
.PD 0
\fBfc\fP [ \fB\-e\fP \fIename\fP ] [ \fB\-m\fP \fImatch\fP ] [ \fIold\fP\fB=\fP\fInew\fP \&.\&.\&. ] [ \fIfirst\fP [ \fIlast\fP ] ]
.TP
.PD 0
\fBfc\fP \fB\-l\fP [ \fB\-nrdfEiD\fP ] [ \fB\-t\fP \fItimefmt\fP ] [ \fB\-m\fP \fImatch\fP ]
.TP
.PD 0
\fB      \fP[ \fIold\fP\fB=\fP\fInew\fP \&.\&.\&. ] [ \fIfirst\fP [ \fIlast\fP ] ]
.TP
.PD 0
\fBfc\fP \fB\-p\fP [ \fB\-a\fP ] [ \fIfilename\fP [ \fIhistsize\fP [ \fIsavehistsize\fP ] ] ]
.TP
.PD 0
\fBfc\fP \fB\-P\fP
.TP
.PD
\fBfc\fP \fB\-ARWI\fP [ \fIfilename\fP ]
Select a range of commandz from \fIfirst\fP ta \fIlast\fP from the
history list\&.
Da arguments \fIfirst\fP n' \fIlast\fP may be specified as a
number or as a string\&.  A wack number is used as a offset
to tha current history event number\&.
A strang specifies da most thugged-out recent event beginnin wit tha given string\&.
All substitutions \fIold\fP\fB=\fP\fInew\fP, if any, is then performed
on tha commands\&.
.RS
.PP
If tha \fB\-l\fP flag is given, tha resultin commandz is listed on
standard output\&.
If tha \fB\-m\fP flag be also given tha straight-up original gangsta argument is taken as a
pattern (should be quoted) n' only tha history events matchin this
pattern is ghon be shown\&.
Otherwise tha editor program \fIename\fP is invoked on a gangbangin' file containing
these history events\&.  If \fIename\fP aint given, tha value
of tha parameta \fBFCEDIT\fP is used; if dat aint set tha value of the
parameta \fBEDITOR\fP is used; if dat aint set a funky-ass builtin default, usually
`\fBvi\fP\&' is used\&.  If \fIename\fP is `\fB\-\fP',
no editor is invoked\&.  When editin is complete, tha edited
command is executed\&.
.PP
If \fIfirst\fP aint specified, it is ghon be set ta \-1 (da most thugged-out recent
event), or ta \-16 if tha \fB\-l\fP flag is given\&.
If \fIlast\fP aint specified, it is ghon be set ta \fIfirst\fP,
or ta \-1 if tha \fB\-l\fP flag is given\&.
But fuck dat shiznit yo, tha word on tha street is dat if tha current event has added entries ta tha history with
`\fBprint \-s\fP\&' or `\fBfc \-R\fP', then tha default \fIlast\fP fo' \fB\-l\fP
includes all freshly smoked up history entries since tha current event fuckin started\&.
.PP
Da flag \fB\-r\fP reverses tha order of tha commandz n' the
flag \fB\-n\fP suppresses command numbers when listing\&.
.PP
Also when listing,
.PD 0
.TP
\fB\-d\fP
prints timestamps fo' each command
.TP
\fB\-f\fP
prints full time\-date stamps up in tha US
`\fIMM\fP\fB/\fP\fIDD\fP\fB/\fP\fIYY\fP \fIhh\fP:\fImm\fP\&' format
.TP
\fB\-E\fP
prints full time\-date stamps up in tha European
`\fIdd\fP\fB\&.\fP\fImm\fP\fB\&.\fP\fIyyyy\fP \fIhh\fP:\fImm\fP\&' format
.TP
\fB\-i\fP
prints full time\-date stamps up in ISO8601
`\fIyyyy\fP\fB\-\fP\fImm\fP\fB\-\fP\fIdd\fP \fIhh\fP:\fImm\fP\&' format
.TP
\fB\-t\fP \fIfmt\fP
prints time n' date stamps up in tha given format;
\fIfmt\fP is formatted wit tha strftime function wit tha zsh extensions
busted lyrics bout fo' tha \fB%D{\fP\fIstring\fP\fB}\fP prompt format in
the section EXPANSION OF PROMPT SEQUENCES up in \fIzshmisc\fP(1)\&.  Da resultin formatted strang must be
no mo' than 256 charactas or aint gonna be printed\&.
.PP
.TP
\fB\-D\fP
prints elapsed times; may be combined wit one of the
options above\&.
.PD
.PP
.PP
`\fBfc \-p\fP\&' pushes tha current history list onto a stack n' switches ta a
new history list\&.  If tha \fB\-a\fP option be also specified, dis history list
will be automatically popped when tha current function scope is exited, which
is a much betta solution than bustin a trap function ta booty-call `\fBfc \-P\fP\&'
manually\&.  If no arguments is specified, tha history list is left empty,
\fB$HISTFILE\fP is unset, n' \fB$HISTSIZE\fP & \fB$SAVEHIST\fP is set ta their
default joints\&.  If one argument is given, \fB$HISTFILE\fP is set ta that
filename, \fB$HISTSIZE\fP & \fB$SAVEHIST\fP is left unchanged, n' tha history
file is read up in (if it exists) ta initialize tha freshly smoked up list\&.  If a second
argument is specified, \fB$HISTSIZE\fP & \fB$SAVEHIST\fP is instead set ta the
single specified numeric value\&.  Finally, if a third argument is specified,
\fB$SAVEHIST\fP is set ta a separate value from \fB$HISTSIZE\fP\&.  Yo ass is free to
change these environment joints fo' tha freshly smoked up history list however you desire
in order ta manipulate tha freshly smoked up history list\&.
.PP
`\fBfc \-P\fP\&' pops tha history list back ta a olda list saved by `\fBfc \-p\fP'\&.
Da current list is saved ta its \fB$HISTFILE\fP before it is destroyed
(assumin dat \fB$HISTFILE\fP n' \fB$SAVEHIST\fP is set appropriately, of
course)\&.  Da jointz of \fB$HISTFILE\fP, \fB$HISTSIZE\fP, n' \fB$SAVEHIST\fP are
restored ta tha joints they had when `\fBfc \-p\fP\&' was called\&.  Note dat this
restoration can conflict wit makin these variablez "local", so yo' best
bet is ta avoid local declarations fo' these variablez up in functions dat use
`\fBfc \-p\fP\&'\&.  Da one other guaranteed\-safe combination is declarin these
variablez ta be local all up in tha top of yo' function n' rockin tha automatic
option (\fB\-a\fP) wit `\fBfc \-p\fP\&'\&.  Finally, note dat it is legal ta manually
pop a push marked fo' automatic poppin if you need ta do so before the
function exits\&.
.PP
`\fBfc \-R\fP\&' readz tha history from tha given file,
`\fBfc \-W\fP\&' writes tha history up ta tha given file,
and `\fBfc \-A\fP\&' appendz tha history up ta tha given file\&.
If no filename is specified, tha \fB$HISTFILE\fP be assumed\&.
If tha \fB\-I\fP option be added ta \fB\-R\fP, only dem events dat are
not already contained within tha internal history list is added\&.
If tha \fB\-I\fP option be added ta \fB\-A\fP or \fB\-W\fP, only them
events dat is freshly smoked up since last incremenstrual append/write to
the history file is appended/written\&.
In any case, tha pimped file gonna git no mo' than \fB$SAVEHIST\fP
entries\&.
.RE
.TP
.PD 0
\fBfg\fP [ \fIjob\fP \&.\&.\&. ]
.TP
.PD
\fIjob\fP \&.\&.\&.
Brin each specified \fIjob\fP up in turn ta tha foreground\&.
If no \fIjob\fP is specified, resume tha current thang\&.
.TP
\fBfloat\fP [ {\fB+\fP|\fB\-\fP}\fBEFHghlprtux\fP ] [ \fB\-LRZ\fP [ \fIn\fP ]] [ \fIname\fP[\fB=\fP\fIvalue\fP] \&.\&.\&. ]
Equivalent ta \fBtypeset \-E\fP, except dat options irrelevant ta floating
point numbers is not permitted\&.
.TP
.PD 0
\fBfunctions\fP [ {\fB+\fP|\fB\-\fP}\fBUXkmtTuz\fP ] [ \fIname\fP \&.\&.\&. ]
.TP
.PD 0
\fBfunctions \-M\fP \fImathfn\fP [ \fImin\fP [ \fImax\fP [ \fIshellfn\fP ] ] ]
.TP
.PD 0
\fBfunctions \-M\fP [ \fB\-m\fP \fIpattern\fP \&.\&.\&. ]
.TP
.PD
\fBfunctions +M\fP [ \fB\-m\fP ] \fImathfn\fP \&.\&.\&. 
Equivalent ta \fBtypeset \-f\fP, wit tha exception of tha \fB\-M\fP option\&.
Use of tha \fB\-M\fP option may not be combined wit any of tha options
handled by \fBtypeset \-f\fP\&.
.RS
.PP
\fBfunctions \-M\fP \fImathfn\fP defines \fImathfn\fP as tha name of
a mathematical function recognised up in all formz of arithmetical expressions;
see
the section `Arithmetic Evaluation\&' up in \fIzshmisc\fP(1)\&.  By default \fImathfn\fP may take
any number of comma\-separated arguments\&.  If \fImin\fP is given,
it must have exactly \fImin\fP args; if \fImin\fP n' \fImax\fP are
both given, it must have at least \fImin\fP n' at most \fImax\fP
args\&.  \fImax\fP may be \-1 ta indicate dat there is no upper limit\&.
.PP
By default tha function is implemented by a gangbangin' finger-lickin' dirty-ass shell function of tha same
name; if \fIshellfn\fP is specified it gives tha name of tha corresponding
shell function while \fImathfn\fP remains tha name used up in arithmetical
expressions\&.  Da name of tha function up in \fB$0\fP is \fImathfn\fP (not
\fIshellfn\fP as would probably be tha case), provided tha option
\fBFUNCTION_ARGZERO\fP is up in effect\&.  Da positionizzle parametas up in tha shell
function correspond ta tha argumentz of tha mathematical function call\&.
Da result of tha last arithmetical expression evaluated
inside tha shell function (even if it aint nuthin but a gangbangin' form dat normally only returns
a status) gives tha result of tha mathematical function\&.
.PP
\fBfunctions \-M\fP wit no arguments lists all such user\-defined functions in
the same form as a thugged-out definition\&.  With tha additionizzle option \fB\-m\fP and
a list of arguments, all functions whose \fImathfn\fP matches one of
the pattern arguments is listed\&.
.PP
\fBfunction +M\fP removes tha list of mathematical functions; wit the
additionizzle option \fB\-m\fP tha arguments is treated as patterns and
all functions whose \fBmathfn\fP matches tha pattern is removed\&.  Note
that tha shell function implementin tha behaviour aint removed
(regardless of whether its name coincides wit \fBmathfn\fP)\&.
.PP
For example, tha followin prints tha cube of 3:
.PP
.RS
.nf
\fBzmath_cube() { (( $1 * $1 * $1 )) }
functions \-M cube 1 1 zmath_cube
print $(( cube(3) ))\fP
.fi
.RE
.RE
.TP
\fBgetcap\fP
See tha section `Da zsh/cap Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBgetln\fP [ \fB\-AclneE\fP ] \fIname\fP \&.\&.\&.
Read tha top value from tha buffer stack n' put it in
the shell parameta \fBname\fP\&.  Equivalent to
\fBread \-zr\fP\&.
.TP
\fBgetopts\fP \fIoptstring\fP \fIname\fP [ \fIarg\fP \&.\&.\&. ]
Checks tha \fIarg\fPs fo' legal options\&.  If tha \fIarg\fPs is omitted,
use tha positionizzle parameters\&.  A valid option argument
begins wit a `\fB+\fP\&' or a `\fB\-\fP'\&.  An argument not beginnin with
a `\fB+\fP\&' or a `\fB\-\fP', or tha argument `\fB\-\fP\fB\-\fP', endz tha options\&.
Note dat a single `\fB\-\fP\&' aint considered a valid option argument\&.
\fIoptstring\fP gotz nuff tha lettas dat \fBgetopts\fP
recognizes\&.  If a letta is followed by a `\fB:\fP\&', dat option
requires a argument\&.  Da options can be
separated from tha argument by blanks\&.
.RS
.PP
Each time it is invoked, \fBgetopts\fP places tha option letta it finds
in tha shell parameta \fIname\fP, prepended wit a `\fB+\fP\&' when
\fIarg\fP begins wit a `\fB+\fP\&'\&.  Da index of tha next \fIarg\fP
is stored up in \fBOPTIND\fP\&.  Da option argument, if any,
is stored up in \fBOPTARG\fP\&.
.PP
Da first option ta be examined may be chizzled by explicitly assigning
to \fBOPTIND\fP\&.  \fBOPTIND\fP has a initial value of \fB1\fP, n' is
normally reset ta \fB1\fP upon exit from a gangbangin' finger-lickin' dirty-ass shell function\&.  \fBOPTARG\fP
is not reset n' retains its value from da most thugged-out recent call to
\fBgetopts\fP\&.  If either of \fBOPTIND\fP or \fBOPTARG\fP is explicitly
unset, it remains unset, n' tha index or option argument is not
stored\&.  Da option itself is still stored up in \fIname\fP up in dis case\&.
.PP
A leadin `\fB:\fP\&' up in \fIoptstring\fP causes \fBgetopts\fP ta store the
letta of any invalid option up in \fBOPTARG\fP, n' ta set \fIname\fP to
`\fB?\fP\&' fo' a unknown option n' ta `\fB:\fP' when a required argument is
missing\&.  Otherwise, \fBgetopts\fP sets \fIname\fP ta `\fB?\fP\&' n' prints
an error message when a option is invalid\&.  Da exit status is
nonzero when there be no mo' options\&.
.RE
.TP
\fBhash\fP [ \fB\-Ldfmrv\fP ] [ \fIname\fP[\fB=\fP\fIvalue\fP] ] \&.\&.\&.
\fBhash\fP can be used ta directly modify tha contentz of tha command
hash table, n' tha named directory hash table\&.  Normally one would
modify these tablez by modifyin one\&z \fBPATH\fP
(for tha command hash table) or by bustin appropriate shell parameters
(for tha named directory hash table)\&.
Da chizzle of hash table ta work on is determined by tha \fB\-d\fP option;
without tha option tha command hash table is used, n' wit tha option the
named directory hash table is used\&.
.RS
.PP
Given no arguments, n' neither tha \fB\-r\fP or \fB\-f\fP options,
the selected hash table is ghon be listed up in full\&.
.PP
Da \fB\-r\fP option causes tha selected hash table ta be emptied\&.
It is ghon be subsequently rebuilt up in tha aiiight fashion\&.
Da \fB\-f\fP option causes tha selected hash table ta be fully
rebuilt immediately\&.  For tha command hash table dis hashes
all tha absolute directories up in tha \fBPATH\fP,
and fo' tha named directory hash table dis addz all users\&' home directories\&.
These two options cannot be used wit any arguments\&.
.PP
Da \fB\-m\fP option causes tha arguments ta be taken as patterns
(which should be quoted) n' tha elementz of tha hash table
matchin dem patterns is printed\&.  This is tha only way ta display
a limited selection of hash table elements\&.
.PP
For each \fIname\fP wit a cold-ass lil correspondin \fIvalue\fP, put `\fIname\fP\&' in
the selected hash table, associatin it wit tha pathname `\fIvalue\fP\&'\&.
In tha command hash table, dis means that
whenever `\fIname\fP\&' is used as a cold-ass lil command argument, tha shell will try
to execute tha file given by `\fIvalue\fP\&'\&.
In tha named directory hash table, dis means
that `\fIvalue\fP\&' may be referred ta as `\fB~\fP\fIname\fP'\&.
.PP
For each \fIname\fP wit no
correspondin \fIvalue\fP, attempt ta add \fIname\fP ta tha hash table,
checkin what tha fuck tha appropriate \fBvalue\fP is up in tha aiiight manner for
that hash table\&.  If a appropriate \fBvalue\fP can\&'t be found, then
the hash table is ghon be unchanged\&.
.PP
Da \fB\-v\fP option causes hash table entries ta be listed as they are
added by explicit justification\&.  If has no effect if used wit \fB\-f\fP\&.
.PP
If tha \fB\-L\fP flag is present, then each hash table entry is printed in
the form of a cold-ass lil call ta hash\&.
.RE
.TP
\fBhistory\fP
Same as \fBfc \-l\fP\&.
.TP
\fBinteger\fP [ {\fB+\fP|\fB\-\fP}\fBHghilprtux\fP ] [ \fB\-LRZ\fP [ \fIn\fP ]] [ \fIname\fP[\fB=\fP\fIvalue\fP] \&.\&.\&. ]
Equivalent ta \fBtypeset \-i\fP, except dat options irrelevant to
integers is not permitted\&.
.TP
.PD 0
\fBjobs\fP [ \fB\-dlprs\fP ] [ \fIjob\fP \&.\&.\&. ]
.TP
.PD
\fBjobs \-Z\fP \fIstring\fP
Lists shiznit bout each given thang, or all thangs
if \fIjob\fP is omitted\&.  Da \fB\-l\fP flag lists process
IDs, n' tha \fB\-p\fP flag lists process groups\&.
If tha \fB\-r\fP flag is specified only hustlin thangs is ghon be listed
and if tha \fB\-s\fP flag is given only stopped thangs is shown\&.
If tha \fB\-d\fP flag is given, tha directory from which tha thang was
started (which may not be tha current directory of tha thang) will also
be shown\&.
.RS
.PP
Da \fB\-Z\fP option replaces tha shell\&z argument n' environment space with
the given string, truncated if necessary ta fit\&.  This will normally be
visible up in \fBps\fP (\fIps\fP(1)) listings\&.  This feature is typically
used by daemons, ta indicate they state\&.
.RE
.TP
.PD 0
\fBkill\fP [ \fB\-s\fP \fIsignal_name\fP | \fB\-n\fP \fIsignal_number\fP | \fB\-\fP\fIsig\fP ] \fIjob\fP \&.\&.\&.
.TP
.PD
\fBkill\fP \fB\-l\fP [ \fIsig\fP \&.\&.\&. ]
Sendz either \fBSIGTERM\fP or tha specified signal ta tha given
jobs or processes\&.
Signals is given by number or by names, wit or without tha `\fBSIG\fP\&'
prefix\&.
If tha signal bein busted aint `\fBKILL\fP\&' or `\fBCONT\fP', then tha thang
will be busted a `\fBCONT\fP\&' signal if it is stopped\&.
Da argument \fIjob\fP can be tha process ID of a thang
not up in tha thang list\&.
In tha second form, \fBkill \-l\fP, if \fIsig\fP is not
specified tha signal names is listed\&.  Otherwise, fo' each
\fIsig\fP dat be a name, tha correspondin signal number is
listed\&.  For each \fIsig\fP dat be a signal number or a number
representin tha exit statuz of a process which was terminated or
stopped by a signal tha name of tha signal is printed\&.
.RS
.PP
On some systems, alternatizzle signal names is allowed fo' all dem signals\&.
Typical examplez is \fBSIGCHLD\fP n' \fBSIGCLD\fP or \fBSIGPOLL\fP and
\fBSIGIO\fP, assumin they correspond ta tha same signal number\&.  \fBkill
\-l\fP will only list tha preferred form, however \fBkill \-l\fP \fIalt\fP will
show if tha alternatizzle form correspondz ta a signal number\&.  For example,
under Linux \fBkill \-l IO\fP n' \fBkill \-l POLL\fP both output 29, hence
\fBkill \-IO\fP n' \fBkill \-POLL\fP have tha same effect\&.
.PP
Many systems will allow process IDs ta be wack ta bust a cap up in a process
group or zero ta bust a cap up in tha current process group\&.
.RE
.TP
\fBlet\fP \fIarg\fP \&.\&.\&.
Evaluate each \fIarg\fP as a arithmetic expression\&.
See
the section `Arithmetic Evaluation\&' up in \fIzshmisc\fP(1)
for a thugged-out description of arithmetic expressions\&.  Da exit status is 0 if the
value of tha last expression is nonzero, 1 if it is zero, n' 2 if
an error occurred\&.
.TP
\fBlimit\fP [ \fB\-hs\fP ] [ \fIresource\fP [ \fIlimit\fP ] ] \&.\&.\&.
Set or display resource limits\&.  Unless tha \fB\-s\fP flag is given,
the limit applies only tha lil pimpz of tha shell\&.  If \fB\-s\fP is
given without other arguments, tha resource limitz of tha current
shell is set ta tha previously set resource limitz of tha children\&.
.RS
.PP
If \fIlimit\fP aint specified, print tha current limit placed
on \fIresource\fP, otherwise
set tha limit ta tha specified value\&.  If tha \fB\-h\fP flag
is given, use hard limits instead of soft limits\&.
If no \fIresource\fP is given, print all limits\&.
.PP
When loopin over multiple resources, tha shell will abort immediately if
it detects a funky-ass badly formed argument\&.  But fuck dat shiznit yo, tha word on tha street is dat if it fails ta set a limit
for some other reason it will continue tryin ta set tha remainin limits\&.
.PP
\fIresource\fP can be one of:
.PP
.PD 0
.TP
\fBaddressspace\fP
Maximum amount of address space used\&.
.TP
\fBaiomemorylocked\fP
Maximum amount of memory locked up in RAM fo' AIO operations\&.
.TP
\fBaiooperations\fP
Maximum number of AIO operations\&.
.TP
\fBcachedthreads\fP
Maximum number of cached threads\&.
.TP
\fBcoredumpsize\fP
Maximum size of a cold-ass lil core dump\&.
.TP
\fBcputime\fP
Maximum CPU secondz per process\&.
.TP
\fBdatasize\fP
Maximum data size (includin stack) fo' each process\&.
.TP
\fBdescriptors\fP
Maximum value fo' a gangbangin' file descriptor\&.
.TP
\fBfilesize\fP
Largest single file allowed\&.
.TP
\fBkqueues\fP
Maximum number of kqueues allocated\&.
.TP
\fBmaxproc\fP
Maximum number of processes\&.
.TP
\fBmaxpthreads\fP
Maximum number of threadz per process\&.
.TP
\fBmemorylocked\fP
Maximum amount of memory locked up in RAM\&.
.TP
\fBmemoryuse\fP
Maximum resident set size\&.
.TP
\fBmsgqueue\fP
Maximum number of bytes up in POSIX message queues\&.
.TP
\fBposixlocks\fP
Maximum number of POSIX locks per user\&.
.TP
\fBpseudoterminals\fP
Maximum number of pseudo\-terminals\&.
.TP
\fBresident\fP
Maximum resident set size\&.
.TP
\fBsigpending\fP
Maximum number of pendin signals\&.
.TP
\fBsockbufsize\fP
Maximum size of all socket buffers\&.
.TP
\fBstacksize\fP
Maximum stack size fo' each process\&.
.TP
\fBswapsize\fP
Maximum amount of swap used\&.
.TP
\fBvmemorysize\fP
Maximum amount of virtual memory\&.
.PD
.PP
Which of these resource limits is available dependz on tha system\&.
\fIresource\fP can be abbreviated ta any unambiguous prefix\&.  It
can also be a integer, which correspondz ta tha integer defined
for tha resource by tha operatin system\&.
.PP
If argument correspondz ta a number which is outta tha range of the
resources configured tha fuck into tha shell, tha shell will try ta read or write
the limit anyway, n' will report a error if dis fails\&.  As tha shell
does not store such resources internally, a attempt ta set tha limit will
fail unless tha \fB\-s\fP option is present\&.
.PP
\fIlimit\fP be a number, wit a optionizzle scalin factor, as bigs up:
.PP
.PD 0
.TP
\fIn\fP\fBh\fP
hours
.TP
\fIn\fP\fBk\fP
kilobytes (default)
.TP
\fIn\fP\fBm\fP
megabytes or minutes
.TP
[\fImm\fP\fB:\fP]\fIss\fP
minutes n' seconds
.PD
.PP
Da \fBlimit\fP command aint made available by default when the
shell starts up in a mode emulatin another shell\&.  It can be made available
with tha command `\fBzmodload \-F zsh/rlimits b:limit\fP\&'\&.
.RE
.TP
\fBlocal\fP [ {\fB+\fP|\fB\-\fP}\fBAEFHUahlprtux\fP ] [ \fB\-LRZi\fP [ \fIn\fP ]] [ \fIname\fP[\fB=\fP\fIvalue\fP] ] \&.\&.\&.
Same as \fBtypeset\fP, except dat tha options \fB\-g\fP, and
\fB\-f\fP is not permitted\&.  In dis case tha \fB\-x\fP option do not force
the use of \fB\-g\fP, i\&.e\&. exported variablez is ghon be local ta functions\&.
.TP
\fBlog\fP
List all playas currently logged up in whoz ass is affected by
the current settin of tha \fBwatch\fP parameter\&.
.TP
\fBlogout\fP [ \fIn\fP ]
Same as \fBexit\fP, except dat it only works up in a login shell\&.
.TP
\fBnoglob\fP \fIsimple command\fP
See tha section `Precommand Modifiers\&'\&.
.TP
\fBpopd\fP [ [\-q] {\fB+\fP|\fB\-\fP}\fIn\fP ]
Remove a entry from tha directory stack, n' big-ass up a \fBcd\fP to
the freshly smoked up top directory\&.  With no argument, tha current top entry is
removed\&.  An argument of tha form `\fB+\fP\fIn\fP\&' identifies a stack
entry by countin from tha left of tha list shown by tha \fBdirs\fP command,
startin wit zero\&.  An argument of tha form \fB\-n\fP counts from tha right\&.
If tha \fBPUSHD_MINUS\fP option is set, tha meaningz of `\fB+\fP\&' and
`\fB\-\fP\&' up in dis context is swapped\&.
.RS
.PP
If tha \fB\-q\fP (quiet) option is specified, tha hook function \fBchpwd\fP
and tha functions up in tha array \fB$chpwd_functions\fP is not called,
and tha freshly smoked up directory stack aint printed\&.  This is useful fo' calls to
\fBpopd\fP dat do not chizzle tha environment peeped by a interactizzle user\&.
.RE
.TP
.PD 0
\fBprint\fP [ \fB\-abcDilmnNoOpPrsSz\fP ] [ \fB\-u\fP \fIn\fP ] [ \fB\-f\fP \fIformat\fP ] [ \fB\-C\fP \fIcols\fP ]
.TP
.PD
  [ \fB\-R\fP [ \fB\-en\fP ]] [ \fIarg\fP \&.\&.\&. ]
With tha `\fB\-f\fP\&' option tha arguments is printed as busted lyrics bout by \fBprintf\fP\&.
With no flags or wit tha flag `\fB\-\fP\&', tha arguments is printed on
the standard output as busted lyrics bout by \fBecho\fP, wit tha followin differences:
the escape sequence `\fB\eM\-\fP\fIx\fP\&' metafies tha character
\fIx\fP (sets tha highest bit),
`\fB\eC\-\fP\fIx\fP\&' produces a cold-ass lil control characta (`\fB\eC\-@\fP' n' `\fB\eC\-?\fP' give the
charactas NUL n' delete), n' `\fB\eE\fP\&' be a synonym fo' `\fB\ee\fP'\&.
Finally, if not up in a escape
sequence, `\fB\e\fP\&' escapes tha followin characta n' aint printed\&.
.RS
.PP
.PD 0
.TP
.PD
\fB\-a\fP
Print arguments wit tha column incrementin first\&.  Only useful wit the
\fB\-c\fP n' \fB\-C\fP options\&.
.TP
\fB\-b\fP
Recognize all tha escape sequences defined fo' tha \fBbindkey\fP command,
see 
\fIzshzle\fP(1)\&.
.TP
\fB\-c\fP
Print tha arguments up in columns\&.  Unless \fB\-a\fP be also given, arguments are
printed wit tha row incrementin first\&.
.TP
\fB\-C\fP \fIcols\fP
Print tha arguments up in \fIcols\fP columns\&.  Unless \fB\-a\fP be also given,
arguments is printed wit tha row incrementin first\&.
.TP
\fB\-D\fP
Treat tha arguments as paths, replacin directory prefixes wit \fB~\fP
expressions correspondin ta directory names, as appropriate\&.
.TP
\fB\-i\fP
If given together wit \fB\-o\fP or \fB\-O\fP, sortin is performed
case\-independently\&.
.TP
\fB\-l\fP
Print tha arguments separated by newlines instead of spaces\&.
.TP
\fB\-m\fP
Take tha straight-up original gangsta argument as a pattern (should be quoted), n' remove
it from tha argument list together wit subsequent arguments that
do not match dis pattern\&.
.TP
\fB\-n\fP
Do not add a newline ta tha output\&.
.TP
\fB\-N\fP
Print tha arguments separated n' terminated by nulls\&.
.TP
\fB\-o\fP
Print tha arguments sorted up in ascendin order\&.
.TP
\fB\-O\fP
Print tha arguments sorted up in descendin order\&.
.TP
\fB\-p\fP
Print tha arguments ta tha input of tha coprocess\&.
.TP
\fB\-P\fP
Perform prompt expansion (see
EXPANSION OF PROMPT SEQUENCES up in \fIzshmisc\fP(1))\&.
.TP
\fB\-r\fP
Ignore tha escape conventionz of \fBecho\fP\&.
.TP
\fB\-R\fP
Emulate tha BSD \fBecho\fP command, which do not process escape sequences
unless tha \fB\-e\fP flag is given\&.  Da \fB\-n\fP flag suppresses tha trailing
newline\&.  Only tha \fB\-e\fP n' \fB\-n\fP flags is recognized after
\fB\-R\fP; all other arguments n' options is printed\&.
.TP
\fB\-s\fP
Place tha thangs up in dis biatch up in tha history list instead of on tha standard output\&.
Each argument ta tha \fBprint\fP command is treated as a single word up in the
history, regardless of its content\&.
.TP
\fB\-S\fP
Place tha thangs up in dis biatch up in tha history list instead of on tha standard output\&.
In dis case only a single argument be allowed; it is ghon be split into
wordz as if it was a gangbangin' full shell command line\&.  Da effect is
similar ta readin tha line from a history file wit the
\fBHIST_LEX_WORDS\fP option active\&.
.TP
\fB\-u\fP \fIn\fP
Print tha arguments ta file descriptor \fIn\fP\&.
.TP
\fB\-z\fP
Push tha arguments onto tha editin buffer stack, separated by spaces\&.
.PP
If any of `\fB\-m\fP\&', `\fB\-o\fP' or `\fB\-O\fP' is used up in combination with
`\fB\-f\fP\&' n' there be no arguments (afta tha removal process up in the
case of `\fB\-m\fP\&') then not a god damn thang is printed\&.
.RE
.TP
\fBprintf\fP \fIformat\fP [ \fIarg\fP \&.\&.\&. ]
Print tha arguments accordin ta tha format justification\&. Formatting
rulez is tha same as used up in C\&. Da same escape sequences as fo' \fBecho\fP
are recognised up in tha format\& fo' realz. All C conversion justifications endin in
one of csdiouxXeEfgGn is handled\&. In addizzle ta this, `\fB%b\fP\&' can be
used instead of `\fB%s\fP\&' ta cause escape sequences up in tha argument ta be
recognised n' `\fB%q\fP\&' can be used ta quote tha argument up in such a way
that allows it ta be reused as shell input\&. With tha numeric format
specifiers, if tha correspondin argument starts wit a quote character,
the numeric value of tha followin characta is used as tha number to
print otherwise tha argument is evaluated as a arithmetic expression\&. Right back up in yo muthafuckin ass. See
the section `Arithmetic Evaluation\&' up in \fIzshmisc\fP(1)
for a thugged-out description of arithmetic
expressions\&. With `\fB%n\fP\&', tha correspondin argument is taken as an
identifier which is pimped as a integer parameter\&.
.RS
.PP
Normally, conversion justifications is applied ta each argument up in order
but they can explicitly specify tha \fIn\fPth argument is ta be used by
replacin `\fB%\fP\&' by `\fB%\fP\fIn\fP\fB$\fP' n' `\fB*\fP' by `\fB*\fP\fIn\fP\fB$\fP'\&.
It be recommended dat you do not mix referencez of dis explicit style
with tha aiiight steez n' tha handlin of such mixed stylez may be subject
to future chizzle\&.
.PP
If arguments remain unused afta formatting, tha format strang is reused
until all arguments done been consumed\&. With tha \fBprint\fP builtin, this
can be suppressed by rockin tha \fB\-r\fP option\&. If mo' arguments are
required by tha format than done been specified, tha behaviour be as if
zero or a empty strang had been specified as tha argument\&.
.RE
.TP
.PD 0
\fBpushd\fP [ \fB\-qsLP\fP ] [ \fIarg\fP ]
.TP
.PD 0
\fBpushd\fP [ \fB\-qsLP\fP ] \fIold\fP \fInew\fP
.TP
.PD
\fBpushd\fP [ \fB\-qsLP\fP ] {\fB+\fP|\fB\-\fP}\fIn\fP
Change tha current directory, n' push tha oldschool current directory
onto tha directory stack\&.  In tha straight-up original gangsta form, chizzle the
current directory ta \fIarg\fP\&.
If \fIarg\fP aint specified, chizzle ta tha second directory
on tha stack (that is, exchange tha top two entries), or
change ta \fB$HOME\fP if tha \fBPUSHD_TO_HOME\fP
option is set or if there is only one entry on tha stack\&.
Otherwise, \fIarg\fP is interpreted as it would be by \fBcd\fP\&.
Da meanin of \fIold\fP n' \fInew\fP up in tha second form be also
the same as fo' \fBcd\fP\&.
.RS
.PP
Da third form of \fBpushd\fP chizzlez directory by rotatin the
directory list\&.  An argument of tha form `\fB+\fP\fIn\fP\&' identifies a stack
entry by countin from tha left of tha list shown by tha \fBdirs\fP
command, startin wit zero\&.  An argument of tha form `\fB\-\fP\fIn\fP\&' counts
from tha right\&.  If tha \fBPUSHD_MINUS\fP option is set, tha meanings
of `\fB+\fP\&' n' `\fB\-\fP' up in dis context is swapped\&.
.PP
If tha \fB\-q\fP (quiet) option is specified, tha hook function \fBchpwd\fP
and tha functions up in tha array \fB$chpwd_functions\fP is not called,
and tha freshly smoked up directory stack aint printed\&.  This is useful fo' calls to
\fBpushd\fP dat do not chizzle tha environment peeped by a interactizzle user\&.
.PP
If tha option \fB\-q\fP aint specified n' tha shell option \fBPUSHD_SILENT\fP
is not set, tha directory stack is ghon be printed afta a \fBpushd\fP is
performed\&.
.PP
Da options \fB\-s\fP, \fB\-L\fP n' \fB\-P\fP have tha same meanings as fo' the
\fBcd\fP builtin\&.
.RE
.TP
\fBpushln\fP [ \fIarg\fP \&.\&.\&. ]
Equivalent ta \fBprint \-nz\fP\&.
.TP
\fBpwd\fP [ \fB\-rLP\fP ]
Print tha absolute pathname of tha current hustlin directory\&.
If tha \fB\-r\fP or tha \fB\-P\fP flag is specified, or tha \fBCHASE_LINKS\fP
option is set n' tha \fB\-L\fP flag aint given, tha printed path will not
contain symbolic links\&.
.TP
\fBr\fP
Same as \fBfc \-e \-\fP\&.
.TP
.PD 0
\fBread\fP [ \fB\-rszpqAclneE\fP ] [ \fB\-t\fP [ \fInum\fP ] ] [ \fB\-k\fP [ \fInum\fP ] ] [ \fB\-d\fP \fIdelim\fP ]
.TP
.PD
 [ \fB\-u\fP \fIn\fP ] [ \fIname\fP[\fB?\fP\fIprompt\fP] ] [ \fIname\fP \&.\&.\&.  ]
Read one line n' break it tha fuck into fieldz rockin tha characters
in \fB$IFS\fP as separators, except as noted below\&.
Da first field be assigned ta tha straight-up original gangsta \fIname\fP, tha second field
to tha second \fIname\fP, etc\&., wit leftover
fieldz assigned ta tha last \fIname\fP\&.
If \fIname\fP is omitted then
\fBREPLY\fP is used fo' scalars n' \fBreply\fP fo' arrays\&.
.RS
.PP
.PD 0
.TP
.PD
\fB\-r\fP
Raw mode: a `\fB\e\fP\&' all up in tha end of a line do not signify line
continuation n' backslashes up in tha line don\&'t quote tha following
characta n' is not removed\&.
.TP
\fB\-s\fP
Don\&'t echo back charactas if readin from tha terminal\&.
.TP
\fB\-q\fP
Read only one characta from tha terminal n' set \fIname\fP to
`\fBy\fP\&' if dis characta was `\fBy\fP' or `\fBY\fP' n' ta `\fBn\fP' otherwise\&.
With dis flag set tha return status is zero only if tha characta was
`\fBy\fP\&' or `\fBY\fP'\&.  This option may be used wit a timeout; if
the read times out, or encountas end of file, status 2 is returned\&.
Input is read from tha terminal unless one of \fB\-u\fP
or \fB\-p\fP is present\&.  This option may also be used within zle widgets\&.
.TP
\fB\-k\fP [ \fInum\fP ]
Read only one (or \fInum\fP) characters\&.  All is assigned ta tha first
\fIname\fP, without word splitting\&.  This flag is ignored when \fB\-q\fP is
present\&.  Input is read from tha terminal unless one of \fB\-u\fP or \fB\-p\fP
is present\&.  This option may also be used within zle widgets\&.
.RS
.PP
Note dat despite tha mnemonic `key\&' dis option do read full
characters, which may consist of multiple bytes if tha option
\fBMULTIBYTE\fP is set\&.
.RE
.TP
\fB\-z\fP
Read one entry from tha editor buffer stack n' assign it ta tha first
\fIname\fP, without word splitting\&.  Text is pushed onto tha stack with
`\fBprint \-z\fP\&' or wit \fBpush\-line\fP from tha line editor (see
\fIzshzle\fP(1))\&.  This flag is ignored when tha \fB\-k\fP or \fB\-q\fP flags is present\&.
.TP
.PD 0
\fB\-e\fP
.TP
.PD
\fB\-E\fP
Da input read is printed (echoed) ta tha standard output\&.  If tha \fB\-e\fP
flag is used, no input be assigned ta tha parameters\&.
.TP
\fB\-A\fP
Da first \fIname\fP is taken as tha name of a array n' all lyrics are
assigned ta it\&.
.TP
.PD 0
\fB\-c\fP
.TP
.PD
\fB\-l\fP
These flags is allowed only if called inside a
function used fo' completion (specified wit tha \fB\-K\fP flag to
\fBcompctl\fP)\&.  If tha \fB\-c\fP flag is given, tha lyrics of the
current command is read\&. If tha \fB\-l\fP flag is given, tha whole
line be assigned as a scalar\&.  If both flags is present, \fB\-l\fP
is used n' \fB\-c\fP is ignored\&.
.TP
\fB\-n\fP
Together wit \fB\-c\fP, tha number of tha word tha cursor is on is
read\&.  With \fB\-l\fP, tha index of tha characta tha cursor is on is
read\&.  Note dat tha command name is word number 1, not word 0,
and dat when tha cursor be all up in tha end of tha line, its character
index is tha length of tha line plus one\&.
.TP
\fB\-u\fP \fIn\fP
Input is read from file descriptor \fIn\fP\&.
.TP
\fB\-p\fP
Input is read from tha coprocess\&.
.TP
\fB\-d\fP \fIdelim\fP
Input is terminated by tha straight-up original gangsta characta of \fIdelim\fP instead of
by newline\&.
.TP
\fB\-t\fP [ \fInum\fP ]
Test if input be available before attemptin ta read\&.  If \fInum\fP
is present, it must begin wit a gangbangin' finger-lickin' digit n' is ghon be evaluated
to give a fuckin shitload of seconds, which may be a gangbangin' floatin point number;
in dis case tha read times up if input aint available within this
time\&.  If \fInum\fP aint present, it is taken ta be zero, so that
\fBread\fP returns immediately if no input be available\&.
If no input be available, return status 1 n' do not set any variables\&.
 
This option aint available when readin from tha editor buffer with
\fB\-z\fP, when called from within completion wit \fB\-c\fP or \fB\-l\fP, with
\fB\-q\fP which clears tha input queue before reading, or within zle where
other mechanizzlez should be used ta test fo' input\&.
 
Note dat read do not attempt ta alta tha input processin mode\&.  The
default mode is canonical input, up in which a entire line is read at a time,
so probably `\fBread \-t\fP\&' aint gonna read anythang until a entire line has
been typed\&.  But fuck dat shiznit yo, tha word on tha street is dat when readin from tha terminal wit \fB\-k\fP
input is processed one key at a time; up in dis case, only availabilitizzle of
the first characta is tested, so dat e\&.g\&. `\fBread \-t \-k 2\fP\&' can still
block on tha second character\&.  Use two instancez of `\fBread \-t \-k\fP\&' if
this aint what tha fuck is wanted\&.
.PP
If tha straight-up original gangsta argument gotz nuff a `\fB?\fP\&', tha remainder of this
word is used as a \fIprompt\fP on standard error when tha shell
is interactive\&.
.PP
Da value (exit status) of \fBread\fP is 1 when a end\-of\-file is
encountered, or when \fB\-c\fP or \fB\-l\fP is present n' tha command is
not called from a \fBcompctl\fP function, or as busted lyrics bout fo' \fB\-q\fP\&.
Otherwise tha value is 0\&.
.PP
Da behavior of some combinationz of tha \fB\-k\fP, \fB\-p\fP, \fB\-q\fP, \fB\-u\fP
and \fB\-z\fP flags is undefined\&.  Presently \fB\-q\fP cancels all tha others,
\fB\-p\fP cancels \fB\-u\fP, \fB\-k\fP cancels \fB\-z\fP, n' otherwise \fB\-z\fP
cancels both \fB\-p\fP n' \fB\-u\fP\&.
.PP
Da \fB\-c\fP or \fB\-l\fP flags quit any n' all of \fB\-kpquz\fP\&.
.RE
.TP
\fBreadonly\fP
Same as \fBtypeset \-r\fP\&.
.TP
\fBrehash\fP
Same as \fBhash \-r\fP\&.
.TP
\fBreturn\fP [ \fIn\fP ]
Causes a gangbangin' finger-lickin' dirty-ass shell function or `\fB\&.\fP\&' script ta return to
the invokin script wit tha return status specified by \fIn\fP\&.  If \fIn\fP
is omitted, tha return status is dat of tha last command
executed\&.
.RS
.PP
If \fBreturn\fP was executed from a trap up in a \fBTRAP\fP\fINAL\fP function,
the effect is different fo' zero n' non\-zero return status\&.  With zero
status (or afta a implicit return all up in tha end of tha trap), tha shell
will return ta whatever dat shiznit was previously processing; wit a non\-zero
status, tha shell will behave as interrupted except dat tha return
statuz of tha trap is retained\&.  Note dat tha numeric value of tha signal
which caused tha trap is passed as tha straight-up original gangsta argument, so tha statement
`\fBreturn $((128+$1))\fP\&' will return tha same status as if tha signal
had not been trapped\&.
.RE
.TP
\fBsched\fP
See tha section `Da zsh/sched Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBset\fP [ {\fB+\fP|\fB\-\fP}\fIoptions\fP | {\fB+\fP|\fB\-\fP}\fBo\fP [ \fIoption_name\fP ] ] \&.\&.\&. [ {\fB+\fP|\fB\-\fP}\fBA\fP [ \fIname\fP ] ] [ \fIarg\fP \&.\&.\&. ]
Set tha options fo' tha shell and/or set tha positionizzle parameters, or
declare n' set a array\&.  If tha \fB\-s\fP option is given, it causes the
specified arguments ta be sorted before assignin dem ta tha positional
parametas (or ta tha array \fIname\fP if \fB\-A\fP is used)\&.  With \fB+s\fP
sort arguments up in descendin order\&.  For tha meanin of tha other flags, see
\fIzshoptions\fP(1)\&.  Flags may be specified by name rockin tha \fB\-o\fP option\&. If no option
name is supplied wit \fB\-o\fP, tha current option states is printed:  see
the description of \fBsetopt\fP below fo' mo' shiznit on tha format\&.
With \fB+o\fP they is printed up in a gangbangin' form dat can be used as input
to tha shell\&.
.RS
.PP
If tha \fB\-A\fP flag is specified, \fIname\fP is set ta a array containing
the given \fIarg\fPs; if no \fIname\fP is specified, all arrays is printed
together wit they joints\&.
.PP
If \fB+A\fP is used n' \fIname\fP be a array, the
given arguments will replace tha initial elementz of dat array; if no
\fIname\fP is specified, all arrays is printed without they joints\&.
.PP
Da behaviour of arguments afta \fB\-A\fP \fIname\fP or \fB+A\fP \fIname\fP
dependz on whether tha option \fBKSH_ARRAYS\fP is set\&.  If it aint set, all
arguments followin \fIname\fP is treated as joints fo' tha array,
regardless of they form\&.  If tha option is set, aiiight option processing
continues at dat point; only regular arguments is treated as joints for
the array\&.  This means that
.PP
.RS
.nf
\fBset \-A array \-x \-\- foo\fP
.fi
.RE
.PP
sets \fBarray\fP ta `\fB\-x \-\fP\fB\- foo\fP\&' if \fBKSH_ARRAYS\fP aint set yo, but sets
the array ta \fBfoo\fP n' turns on tha option `\fB\-x\fP\&' if it is set\&.
.PP
If tha \fB\-A\fP flag aint present yo, but there be arguments beyond the
options, tha positionizzle parametas is set\&.  If tha option list (if any)
is terminated by `\fB\-\fP\fB\-\fP\&', n' there be no further arguments, the
positionizzle parametas is ghon be unset\&.
.PP
If no arguments n' no `\fB\-\fP\fB\-\fP\&' is given, then tha names n' joints of
all parametas is printed on tha standard output\&.  If tha only argument is
`\fB+\fP\&', tha namez of all parametas is printed\&.
.PP
For oldschool reasons, `\fBset \-\fP\&' is treated as `\fBset +xv\fP'
and `\fBset \-\fP \fIargs\fP\&' as `\fBset +xv \-\-\fP \fIargs\fP' when in
any other emulation mode than zsh\&z natizzle mode\&.
.RE
.TP
\fBsetcap\fP
See tha section `Da zsh/cap Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBsetopt\fP [ {\fB+\fP|\fB\-\fP}\fIoptions\fP | {\fB+\fP|\fB\-\fP}\fBo\fP \fIoption_name\fP ] [ \fIname\fP \&.\&.\&. ]
Set tha options fo' tha shell\&.  All options specified either
with flags or by name is set\&.
.RS
.PP
If no arguments is supplied, tha namez of all options currently set are
printed\&.  Da form is chosen so as ta minimize tha differences from the
default options fo' tha current emulation (the default emulation being
natizzle \fBzsh\fP, shown as \fB<Z>\fP in
\fIzshoptions\fP(1))\&.
Options dat is on by default fo' tha emulation are
shown wit tha prefix \fBno\fP only if they is off, while other options are
shown without tha prefix \fBno\fP n' only if they is on\&.  In addizzle to
options chizzled from tha default state by tha user, any options activated
automatically by tha shell (for example, \fBSHIN_STDIN\fP or \fBINTERACTIVE\fP)
will be shown up in tha list\&.  Da format is further modified by tha option
\fBKSH_OPTION_PRINT\fP, however tha rationale fo' choosin options with
or without tha \fBno\fP prefix remains tha same ol' dirty up in dis case\&.
.PP
If tha \fB\-m\fP flag is given tha arguments is taken as patterns
(which should be quoted ta protect dem from filename expansion), n' all
options wit names matchin these patterns is set\&.
.PP
Note dat a wack option name do not cause execution of subsequent shell
code ta be aborted; dis is behaviour is different from dat of `\fBset
\-o\fP\&'\&.  This is cuz \fBset\fP is regarded as a special builtin by the
POSIX standard yo, but \fBsetopt\fP is not\&.
.RE
.TP
\fBshift\fP [ \fB\-p\fP ] [ \fIn\fP ] [ \fIname\fP \&.\&.\&. ]
Da positionizzle parametas \fB${\fP\fIn\fP+1\fB}\fP \&.\&.\&. is renamed
to \fB$1\fP \&.\&.\&., where \fIn\fP be a arithmetic expression that
defaults ta 1\&.
If any \fIname\fPs is given then tha arrays wit these names are
shifted instead of tha positionizzle parameters\&.
.RS
.PP
If tha option \fB\-p\fP is given arguments is instead removed (popped)
from tha end rather than tha start of tha array\&.
.RE
.TP
\fBsource\fP \fIfile\fP [ \fIarg\fP \&.\&.\&. ]
Same as `\fB\&.\fP\&', except dat tha current directory be always searched and
is always searched first, before directories up in \fB$path\fP\&.
.TP
\fBstat\fP
See tha section `Da zsh/stat Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBsuspend\fP [ \fB\-f\fP ]
Suspend tha execution of tha shell (send it a \fBSIGTSTP\fP)
until it receives a \fBSIGCONT\fP\&.
Unless tha \fB\-f\fP option is given, dis will refuse ta suspend a login shell\&.
.TP
.PD 0
\fBtest\fP [ \fIarg\fP \&.\&.\&. ]
.TP
.PD
\fB[\fP [ \fIarg\fP \&.\&.\&. ] \fB]\fP
Like tha system version of \fBtest\fP\&.  Added fo' compatibility;
use conditionizzle expressions instead (see tha section `Conditionizzle Expressions\&')\&.
Da main differences between tha conditionizzle expression syntax n' the
\fBtest\fP n' \fB[\fP builtins are:  these commandz is not handled
syntactically, so fo' example a empty variable expansion may cause an
argument ta be omitted; syntax errors cause status 2 ta be returned instead
of a gangbangin' finger-lickin' dirty-ass shell error; n' arithmetic operators expect integer arguments rather
than arithmetic expressions\&.
.RS
.PP
Da command attempts ta implement POSIX n' its extensions where these
are specified\&.  Unfortunately there be intrinsic ambiguitizzles in
the syntax; up in particular there is no distinction between test operators
and strings dat resemble them\&.  Da standard attempts ta resolve these
for lil' small-ass numberz of arguments (up ta four); fo' five or mo' arguments
compatibilitizzle cannot be relied on\&.  Users is urged wherever possible to
use tha `\fB[[\fP\&' test syntax which aint gots these ambiguities\&.
.RE
.TP
\fBtimes\fP
Print tha accumulated user n' system times fo' tha shell
and fo' processes run from tha shell\&.
.TP
\fBtrap\fP [ \fIarg\fP ] [ \fIsig\fP \&.\&.\&. ]
\fIarg\fP be a seriez of commandz (usually quoted ta protect it from
immediate evaluation by tha shell) ta be read n' executed when tha shell
receives any of tha signals specified by one or mo' \fIsig\fP args\&.
Each \fIsig\fP can be given as a number,
or as tha name of a signal either wit or without tha strang \fBSIG\fP
in front (e\&.g\&. 1, HUP, n' SIGHUP is all tha same signal)\&.
.RS
.PP
If \fIarg\fP is `\fB\-\fP\&', then tha specified signals is reset ta their
defaults, or, if no \fIsig\fP args is present, all traps is reset\&.
.PP
If \fIarg\fP be a empty string, then tha specified signals
are ignored by tha shell (and by tha commandz it invokes)\&.
.PP
If \fIarg\fP is omitted but one or mo' \fIsig\fP args is provided (i\&.e\&.
the first argument be a valid signal number or name), tha effect is the
same as if \fIarg\fP had been specified as `\fB\-\fP\&'\&.
.PP
Da \fBtrap\fP command wit no arguments prints a list of commands
associated wit each signal\&.
.PP
If \fIsig\fP is \fBZERR\fP then \fIarg\fP is ghon be executed
afta each command wit a nonzero exit status\&.  \fBERR\fP be a alias
for \fBZERR\fP on systems dat have no \fBSIGERR\fP signal (this is the
usual case)\&.
.PP
If \fIsig\fP is \fBDEBUG\fP then \fIarg\fP is ghon be executed
before each command if tha option \fBDEBUG_BEFORE_CMD\fP is set
(as it is by default), else afta each command\&.  Here, a `command\&' is
what is busted lyrics bout as a `sublist\&' up in tha shell grammar, see
the section SIMPLE COMMANDS & PIPELINES up in \fIzshmisc\fP(1)\&.
If \fBDEBUG_BEFORE_CMD\fP is set various additionizzle features is available\&.
First, it is possible ta skip tha next command by settin tha option
\fBERR_EXIT\fP; peep tha description of tha \fBERR_EXIT\fP option in
\fIzshoptions\fP(1)\&.  Also, tha shell parameter
\fBZSH_DEBUG_CMD\fP is set ta tha strang correspondin ta tha command
to be executed followin tha trap\&.  Note dat dis strang is reconstructed
from tha internal format n' may not be formatted tha same way as the
original gangsta text\&.  Da parameta is unset afta tha trap is executed\&.
.PP
If \fIsig\fP is \fB0\fP or \fBEXIT\fP
and tha \fBtrap\fP statement is executed inside tha body of a gangbangin' function,
then tha command \fIarg\fP is executed afta tha function completes\&.
Da value of \fB$?\fP all up in tha start of execution is tha exit statuz of the
shell or tha return statuz of tha function exiting\&.
If \fIsig\fP is \fB0\fP or \fBEXIT\fP
and tha \fBtrap\fP statement aint executed inside tha body of a gangbangin' function,
then tha command \fIarg\fP is executed when tha shell terminates; the
trap runs before any \fBzshexit\fP hook functions\&.
.PP
\fBZERR\fP, \fBDEBUG\fP, n' \fBEXIT\fP traps is not executed inside other
traps\&.  \fBZERR\fP n' \fBDEBUG\fP traps is kept within subshells, while
other traps is reset\&.
.PP
Note dat traps defined wit tha \fBtrap\fP builtin is slightly different
from dem defined as `\fBTRAP\fP\fINAL\fP () { \&.\&.\&. }\&', as tha latta have
their own function environment (line numbers, local variables, etc\&.) while
the forma use tha environment of tha command up in which they was called\&.
For example,
.PP
.RS
.nf
\fBtrap \&'print $LINENO' DEBUG\fP
.fi
.RE
.PP
will print tha line number of a cold-ass lil command executed afta it has run, while
.PP
.RS
.nf
\fBTRAPDEBUG() { print $LINENO; }\fP
.fi
.RE
.PP
will always print tha number zero\&.
.PP
Alternatizzle signal names is allowed as busted lyrics bout under \fBkill\fP above\&.
Definin a trap under either name causes any trap under a alternative
name ta be removed\&.  But fuck dat shiznit yo, tha word on tha street is dat it is recommended dat fo' consistency
users stick exclusively ta one name or another\&.
.RE
.TP
\fBtrue\fP [ \fIarg\fP \&.\&.\&. ]
Do not a god damn thang n' return a exit statuz of 0\&.
.TP
\fBttyctl\fP \fB\-fu\fP
Da \fB\-f\fP option freezes tha tty (i\&.e\&. terminal or terminal emulator), and
\fB\-u\fP unfreezes it\&.
When tha tty is frozen, no chizzlez made ta tha tty settings by
external programs is ghon be honored by tha shell, except fo' chizzlez up in the
size of tha screen; tha shell will
simply reset tha settings ta they previous joints as soon as each
command exits or is suspended\&.  Thus, \fBstty\fP n' similar programs have
no effect when tha tty is frozen\&.  Freezin tha tty do not cause
the current state ta be remembered: instead, it causes future chizzles
to tha state ta be blocked\&.
.RS
.PP
Without options it reports whether tha terminal is frozen or not\&.
.PP
Note that, regardless of whether tha tty is frozen or not, the
shell need ta chizzle tha settings when tha line editor starts, so
unfreezin tha tty do not guarantee settings made on the
command line is preserved\&.  Stringz of commandz run between
editin tha command line will peep a cold-ass lil consistent tty state\&.
See also tha shell variable \fBSTTY\fP fo' a meanz of initialising
the tty before hustlin external commands\&.
.RE
.TP
\fBtype\fP [ \fB\-wfpams\fP ] \fIname\fP \&.\&.\&.
Equivalent ta \fBwhence \-v\fP\&.
.TP
.PD 0
\fBtypeset\fP [ {\fB+\fP|\fB\-\fP}\fBAEFHUafghklprtuxmz\fP ] [ \fB\-LRZi\fP [ \fIn\fP ]] [ \fIname\fP[\fB=\fP\fIvalue\fP] \&.\&.\&. ]
.TP
.PD
\fBtypeset\fP \-T [ {\fB+|\fB\-\fP\fP}\fBUrux\fP ] [ \fB\-LRZ\fP [ \fIn\fP ]] \fISCALAR\fP[\fB=\fP\fIvalue\fP] \fIarray\fP \fB[\fP \fIsep\fP \fB]\fP
Set or display attributes n' joints fo' shell parameters\&.
.RS
.PP
A parameta is pimped fo' each \fIname\fP dat do not already refer
to one\&.  When inside a gangbangin' function, a freshly smoked up parameta is pimped fo' every
\fIname\fP (even dem dat already exist), n' is unset again n' again n' again when the
function completes\&.  See
`Local Parameters\&' up in \fIzshparam\fP(1)\&.  Da same rulez apply ta special shell parameters, which
retain they special attributes when made local\&.
.PP
For each \fIname\fP\fB=\fP\fIvalue\fP assignment, tha parameter
\fIname\fP is set ta \fIvalue\fP\&.  Note dat arrays currently cannot be
assigned up in \fBtypeset\fP expressions, only scalars n' integers\&.  Unless
the option \fBKSH_TYPESET\fP is set, aiiight expansion rulez apply to
assignment arguments, so \fIvalue\fP may be split tha fuck into separate lyrics; if
the option is set, assignments which can be recognised when expansion is
performed is treated as single lyrics\&.  For example tha command
\fBtypeset vbl=$(echo one two)\fP is treated as havin one argument if
\fBKSH_TYPESET\fP is set yo, but otherwise is treated as havin tha two arguments
\fBvbl=one\fP n' \fBtwo\fP\&.
.PP
If tha shell option \fBTYPESET_SILENT\fP aint set, fo' each remaining
\fIname\fP dat refers ta a parameta dat is set, tha name n' value of the
parameta is printed up in tha form of a assignment\&.  Nothang is printed for
newly\-created parameters, or when any attribute flags listed below are
given along wit tha \fIname\fP\&.  Usin `\fB+\fP\&' instead of minus to
introduce a attribute turns it off\&.
.PP
If tha \fB\-p\fP option is given, parametas n' joints is printed up in the
form of a typeset command n' a assignment (which is ghon be printed
separately fo' arrays n' associatizzle arrays), regardless of other flags
and options\&.  Note dat tha \fB\-h\fP flag on parametas is bigged up; no
value is ghon be shown fo' these parameters\&.
.PP
If tha \fB\-T\fP option is given, two or three arguments must be present (an
exception is dat zero arguments is allowed ta show tha list of parameters
created up in dis fashion)\&.  Da first two is tha name of a scalar n' an
array parameta (in dat order) dat is ghon be tied together up in tha manner of
\fB$PATH\fP n' \fB$path\fP\&.  Da optionizzle third argument be a single\-character
separator which is ghon be used ta join tha elementz of tha array ta form the
scalar; if absent, a cold-ass lil colon is used, as wit \fB$PATH\fP\&.  Only tha first
characta of tha separator is significant; any remainin charactas are
ignored\&.  Only tha scalar parameta may be assigned a initial value\&.  Both
the scalar n' tha array may otherwise be manipulated as normal\&.  If one is
unset, tha other will automatically be unset too\&.  There is no way of
untyin tha variablez without unsettin them, or convertin tha type of one
of dem wit another \fBtypeset\fP command; \fB+T\fP do not work, assigning
an array ta \fISCALAR\fP be a error, n' assignin a scalar ta \fIarray\fP
sets it ta be a single\-element array\&.  Note dat both `\fBtypeset \-xT \&.\&.\&.\fP\&'
and `\fBexport \-T \&.\&.\&.\fP\&' work yo, but only tha scalar is ghon be marked for
export\&.  Settin tha value rockin tha scalar version causes a split on all
separators (which cannot be quoted)\&.  It be possible ta use the
same two tied variablez wit a gangbangin' finger-lickin' different separator characta up in which
case tha variablez remain joined as before but tha separator is chizzled\&.
This flag has a gangbangin' finger-lickin' different meanin when used wit \fB\-f\fP; peep below\&.
.PP
Da \fB\-g\fP (global) flag is treated specially: it means dat any
resultin parameta aint gonna be restricted ta local scope\&.  Note dat this
does not necessarily mean dat tha parameta is ghon be global, as tha flag
will apply ta any existin parameta (even if unset) from a enclosing
function\&.  This flag do not affect tha parameta afta creation, hence it
has no effect when listin existin parameters, nor do tha flag \fB+g\fP
have any effect except up in combination wit \fB\-m\fP (see below)\&.
.PP
If no \fIname\fP is present, tha names n' jointz of all parametas are
printed\&.  In dis case tha attribute flags restrict tha display ta only
those parametas dat have tha specified attributes, n' rockin `\fB+\fP\&'
rather than `\fB\-\fP\&' ta introduce tha flag suppresses printin of tha joints
of parametas when there is no parameta name\&.  Also, if tha last option
is tha word `\fB+\fP\&', then names is printed but joints is not\&.
.PP
If tha \fB\-m\fP flag is given tha \fIname\fP arguments is taken as patterns
(which should be quoted)\&.  With no attribute flags, all parametas (or
functions wit tha \fB\-f\fP flag) wit matchin names is printed (the shell
option \fBTYPESET_SILENT\fP aint used up in dis case)\&.  Note dat \fB\-m\fP is
ignored if no patterns is given\&.  If tha \fB+g\fP flag is combined with
\fB\-m\fP, a freshly smoked up local parameta is pimped fo' every last muthafuckin matchin parameta that
is not already local\&.  Otherwise \fB\-m\fP applies all other flags or
assignments ta tha existin parameters\&.  Except when assignments is made
with \fIname\fP\fB=\fP\fIvalue\fP, rockin \fB+m\fP forces tha matchin parameters
to be printed, even inside a gangbangin' function\&.
.PP
If no attribute flags is given n' either no \fB\-m\fP flag is present or
the \fB+m\fP form was used, each parameta name printed is preceded by a
list of tha attributez of dat parameta (\fBarray\fP, \fBassociation\fP,
\fBexported\fP, \fBinteger\fP, \fBreadonly\fP)\&.  If \fB+m\fP is used wit attribute
flags, n' all dem flags is introduced wit \fB+\fP, tha matching
parameta names is printed but they joints is not\&.
.PP
Attribute flags dat transform tha final value (\fB\-L\fP, \fB\-R\fP, \fB\-Z\fP,
\fB\-l\fP, \fBu\fP) is only applied ta tha expanded value all up in tha point
of a parameta expansion expression rockin `\fB$\fP\&'\&.  They is not applied
when a parameta is retrieved internally by tha shell fo' any purpose\&. 
.PP
Da followin attribute flags may be specified:
.PP
.PD 0
.TP
.PD
\fB\-A\fP
Da names refer ta associatizzle array parameters; see
`Array Parameters\&' up in \fIzshparam\fP(1)\&.
.TP
\fB\-L\fP
Left justify n' remove leadin blanks from \fIvalue\fP\&.
If \fIn\fP is nonzero, it defines tha width of tha field\&.
If \fIn\fP is zero, tha width is determined by tha width of tha value of
the first assignment\&.  In tha case of numeric parameters, tha length of the
complete value assigned ta tha parameta is used ta determine tha width,
not tha value dat would be output\&.
.RS
.PP
Da width is tha count of characters, which may be multibyte characters
if tha \fBMULTIBYTE\fP option is up in effect\&.  Note dat tha screen
width of tha characta aint taken tha fuck into account; if dis is required,
use paddin wit parameta expansion flags
\fB${(ml\fP\fI\&.\&.\&.\fP\fB)\fP\fI\&.\&.\&.\fP\fB}\fP as busted lyrics bout in
`Parameta Expansion Flags\&' in
\fIzshexpn\fP(1)\&.
.PP
When tha parameta is expanded, it is filled on tha right with
blanks or truncated if necessary ta fit tha field\&.
Note truncation can lead ta unexpected thangs up in dis biatch wit numeric parameters\&.
Leadin zeros is removed if tha \fB\-Z\fP flag be also set\&.
.RE
.TP
\fB\-R\fP
Similar ta \fB\-L\fP, except dat right justification is used;
when tha parameta is expanded, tha field is left filled with
blanks or truncated from tha end\&.  May not be combined wit tha \fB\-Z\fP
flag\&.
.TP
\fB\-U\fP
For arrays (but not fo' associatizzle arrays), keep only tha first
occurrence of each duplicated value\&.  This may also be set for
colon\-separated special parametas like \fBPATH\fP or \fBFIGNORE\fP, etc\&.
This flag has a gangbangin' finger-lickin' different meanin when used wit \fB\-f\fP; peep below\&.
.TP
\fB\-Z\fP
Specially handled if set along wit tha \fB\-L\fP flag\&.
Otherwise, similar ta \fB\-R\fP, except dat leadin zeros is used for
paddin instead of blanks if tha straight-up original gangsta non\-blank characta be a gangbangin' finger-lickin' digit\&.
Numeric parametas is specially handled: they is always eligible
for paddin wit zeroes, n' tha zeroes is banged at a appropriate
place up in tha output\&.
.TP
\fB\-a\fP
Da names refer ta array parameters\&.  An array parameta may be
created dis way yo, but it may not be assigned ta up in tha \fBtypeset\fP
statement\&.  When displaying, both aiiight n' associatizzle arrays are
shown\&.
.TP
\fB\-f\fP
Da names refer ta functions rather than parameters\&.  No assignments
can be made, n' tha only other valid flags is \fB\-t\fP, \fB\-T\fP, \fB\-k\fP,
\fB\-u\fP, \fB\-U\fP n' \fB\-z\fP\&.  Da flag \fB\-t\fP turns on execution tracing
for dis function; tha flag \fB\-T\fP do tha same yo, but turns off tracing
on any function called from tha present one, unless dat function also
has tha \fB\-t\fP or \fB\-T\fP flag\&.  Da \fB\-u\fP n' \fB\-U\fP flags cause the
function ta be marked fo' autoloading; \fB\-U\fP also causes alias
expansion ta be suppressed when tha function is loaded\&.  Da \fBfpath\fP
parameta is ghon be searched ta find tha function definizzle when the
function is first referenced; peep tha section `Functions\&'\&. Da \fB\-k\fP and
\fB\-z\fP flags make tha function be loaded rockin ksh\-style or zsh\-style
autoloadin respectively\&. If neither is given, tha settin of the
KSH_AUTOLOAD option determines how tha fuck tha function is loaded\&.
.TP
\fB\-h\fP
Hide: only useful fo' special parametas (those marked `<S>\&' up in tha table in
\fIzshparam\fP(1)), n' fo' local parametas wit tha same name as a special parameter,
though harmless fo' others\&.  A special parameta wit dis attribute will
not retain its special effect when made local\&.  Thus afta `\fBtypeset \-h
PATH\fP\&', a gangbangin' function containin `\fBtypeset PATH\fP' will create a ordinary
local parameta without tha usual behaviour of \fBPATH\fP\&.  Alternatively,
the local parameta may itself be given dis attribute; hence inside a
function `\fBtypeset \-h PATH\fP\&' creates a ordinary local parameta n' the
special \fBPATH\fP parameta aint altered up in any way\&.  It be also possible
to create a local parameta rockin `\fBtypeset +h \fP\fIspecial\fP\&', where the
local copy of \fIspecial\fP will retain its special propertizzles regardless of
havin tha \fB\-h\fP attribute\&.  Global special parametas loaded from shell
modulez (currently dem up in \fBzsh/mapfile\fP n' \fBzsh/parameter\fP) are
automatically given tha \fB\-h\fP attribute ta avoid name clashes\&.
.TP
\fB\-H\fP
Hide value: specifies dat \fBtypeset\fP aint gonna display tha value of the
parameta when listin parameters; tha display fo' such parametas is
always as if tha `\fB+\fP\&' flag had been given\&.  Use of tha parameta is
in other respects normal, n' tha option do not apply if tha parameta is
specified by name, or by pattern wit tha \fB\-m\fP option\&.  This is on by
default fo' tha parametas up in tha \fBzsh/parameter\fP n' \fBzsh/mapfile\fP
modules\&.  Note, however, dat unlike tha \fB\-h\fP flag dis be also useful
for non\-special parameters\&.
.TP
\fB\-i\fP
Use a internal integer representation\&.  If \fIn\fP is nonzero it
defines tha output arithmetic base, otherwise it is determined by the
first assignment\&.  Bases from 2 ta 36 inclusive is allowed\&.
.TP
\fB\-E\fP
Use a internal double\-precision floatin point representation\&.  On output
the variable is ghon be converted ta scientistical notation\&.  If \fIn\fP is
nonzero it defines tha number of dope figures ta display; the
default is ten\&.
.TP
\fB\-F\fP
Use a internal double\-precision floatin point representation\&.  On output
the variable is ghon be converted ta fixed\-point decimal notation\&.  If \fIn\fP
is nonzero it defines tha number of digits ta display afta tha decimal
point; tha default is ten\&.
.TP
\fB\-l\fP
Convert tha result ta lower case whenever tha parameta is expanded\&.
Da value is \fInot\fP converted when assigned\&.
.TP
\fB\-r\fP
Da given \fIname\fPs is marked readonly\&.  Note dat if \fIname\fP be a
special parameter, tha readonly attribute can be turned on yo, but cannot then
be turned off\&.
.TP
\fB\-t\fP
Tags tha named parameters\&.  Tags have no special meanin ta tha shell\&.
This flag has a gangbangin' finger-lickin' different meanin when used wit \fB\-f\fP; peep above\&.
.TP
\fB\-u\fP
Convert tha result ta upper case whenever tha parameta is expanded\&.
Da value is \fInot\fP converted when assigned\&.
This flag has a gangbangin' finger-lickin' different meanin when used wit \fB\-f\fP; peep above\&.
.TP
\fB\-x\fP
Mark fo' automatic export ta tha environment of subsequently
executed commands\&.  If tha option \fBGLOBAL_EXPORT\fP is set, dis implies
the option \fB\-g\fP, unless \fB+g\fP be also explicitly given; up in other lyrics
the parameta aint made local ta tha enclosin function\&.  This is for
compatibilitizzle wit previous versionz of zsh\&.
.RE
.TP
\fBulimit\fP [ [ \fB\-SHacdfiklmnpqsTtvwx\fP | \fB\-N\fP \fIresource\fP [ \fIlimit\fP ] \&.\&.\&. ]
Set or display resource limitz of tha shell n' tha processes started by
the shell\&.  Da value of \fIlimit\fP can be a number up in tha unit specified
below or one of tha joints `\fBunlimited\fP\&', which removes tha limit on the
resource, or `\fBhard\fP\&', which uses tha current value of tha hard limit on
the resource\&.
.RS
.PP
By default, only soft limits is manipulated\&. If tha \fB\-H\fP flag
is given use hard limits instead of soft limits\&.  If tha \fB\-S\fP flag is given
together wit tha \fB\-H\fP flag set both hard n' soft limits\&.
.PP
If no options is used, tha file size limit (\fB\-f\fP) be assumed\&.
.PP
If \fIlimit\fP is omitted tha current value of tha specified resources are
printed\&.  When mo' than one resource value is printed, tha limit name and
unit is printed before each value\&.
.PP
When loopin over multiple resources, tha shell will abort immediately if
it detects a funky-ass badly formed argument\&.  But fuck dat shiznit yo, tha word on tha street is dat if it fails ta set a limit
for some other reason it will continue tryin ta set tha remainin limits\&.
.PP
Not all tha followin resources is supported on all systems\&.  Running
\fBulimit \-a\fP will show which is supported\&.
.PP
.PD 0
.TP
\fB\-a\fP
Lists all of tha current resource limits\&.
.TP
\fB\-b\fP
Socket buffer size up in bytes (N\&.B\&. not kilobytes)
.TP
\fB\-c\fP
512\-byte blocks on tha size of core dumps\&.
.TP
\fB\-d\fP
Kilobytes on tha size of tha data segment\&.
.TP
\fB\-f\fP
512\-byte blocks on tha size of filez written\&.
.TP
\fB\-i\fP
Da number of pendin signals\&.
.TP
\fB\-k\fP
Da number of kqueues allocated\&.
.TP
\fB\-l\fP
Kilobytes on tha size of locked\-in memory\&.
.TP
\fB\-m\fP
Kilobytes on tha size of physical memory\&.
.TP
\fB\-n\fP
open file descriptors\&.
.TP
\fB\-p\fP
Da number of pseudo\-terminals\&.
.TP
\fB\-q\fP
Bytes up in POSIX message queues\&.
.TP
\fB\-r\fP
Maximum real time priority\&.  On some systems where this
is not available, like fuckin NetBSD, dis has tha same ol' dirty effect as \fB\-T\fP
for compatibilitizzle wit \fBsh\fP\&.
.TP
\fB\-s\fP
Kilobytes on tha size of tha stack\&.
.TP
\fB\-T\fP
Da number of simultaneous threadz available ta tha user\&.
.TP
\fB\-t\fP
CPU secondz ta be used\&.
.TP
\fB\-u\fP
Da number of processes available ta tha user\&.
.TP
\fB\-v\fP
Kilobytes on tha size of virtual memory\&.  On some systems this
refers ta tha limit called `address space\&'\&.
.TP
\fB\-w\fP
Kilobytes on tha size of swapped up memory\&.
.TP
\fB\-x\fP
Da number of locks on files\&.
.PD
.PP
A resource may also be specified by integer up in tha form `\fB\-N\fP
\fIresource\fP\&', where \fIresource\fP correspondz ta tha integer defined for
the resource by tha operatin system\&.  This may be used ta set tha limits
for resources known ta tha shell which do not correspond ta option letters\&.
Such limits is ghon be shown by number up in tha output of `\fBulimit \-a\fP\&'\&.
.PP
Da number may alternatively be outta tha range of limits compiled into
the shell\&.  Da shell will try ta read or write tha limit anyway, and
will report a error if dis fails\&.
.RE
.TP
\fBumask\fP [ \fB\-S\fP ] [ \fImask\fP ]
Da umask is set ta \fImask\fP\&.  \fImask\fP can be either
an octal number or a symbolic value as busted lyrics bout up in \fIchmod\fP(1)\&.
If \fImask\fP is omitted, tha current value is printed\&.  Da \fB\-S\fP
option causes tha mask ta be printed as a symbolic value\&.  Otherwise,
the mask is printed as a octal number\&.  Note dat in
the symbolic form tha permissions you specify is dem which is ta be
allowed (not denied) ta tha playas specified\&.
.TP
\fBunalias\fP
Same as \fBunhash \-a\fP\&.
.TP
\fBunfunction\fP
Same as \fBunhash \-f\fP\&.
.TP
\fBunhash\fP [ \fB\-adfms\fP ] \fIname\fP \&.\&.\&.
Remove tha element named \fIname\fP from a internal hash table\&.  The
default is remove elements from tha command hash table\&.  Da \fB\-a\fP
option causes \fBunhash\fP ta remove regular or global aliases; note
when removin a global aliases dat tha argument must be quoted ta prevent
it from bein expanded before bein passed ta tha command\&.
Da \fB\-s\fP option causes \fBunhash\fP ta remove suffix aliases\&.
Da \fB\-f\fP option causes
\fBunhash\fP ta remove shell functions\&.  Da \fB\-d\fP options causes
\fBunhash\fP ta remove named directories\&.  If tha \fB\-m\fP flag is given
the arguments is taken as patterns (should be quoted) n' all elements
of tha correspondin hash table wit matchin names is ghon be removed\&.
.TP
\fBunlimit\fP [ \fB\-hs\fP ] \fIresource\fP \&.\&.\&.
Da resource limit fo' each \fIresource\fP is set ta tha hard limit\&.
If tha \fB\-h\fP flag is given n' tha shell has appropriate privileges,
the hard resource limit fo' each \fIresource\fP is removed\&.
Da resourcez of tha shell process is only chizzled if tha \fB\-s\fP
flag is given\&.
.RS
.PP
Da \fBunlimit\fP command aint made available by default when the
shell starts up in a mode emulatin another shell\&.  It can be made available
with tha command `\fBzmodload \-F zsh/rlimits b:unlimit\fP\&'\&.
.RE
.TP
\fBunset\fP [ \fB\-fmv\fP ] \fIname\fP \&.\&.\&.
Each named parameta is unset\&.
Local parametas remain local even if unset; they step tha fuck up unset within scope,
but tha previous value will still reappear when tha scope ends\&.
.RS
.PP
Individual elementz of associatizzle array parametas may be unset by using
subscript syntax on \fIname\fP, which should be quoted (or tha entire command
prefixed wit \fBnoglob\fP) ta protect tha subscript from filename generation\&.
.PP
If tha \fB\-m\fP flag is specified tha arguments is taken as patterns (should
be quoted) n' all parametas wit matchin names is unset\&.  Note dat this
cannot be used when unsettin associatizzle array elements, as tha subscript
will be treated as part of tha pattern\&.
.PP
Da \fB\-v\fP flag specifies dat \fIname\fP refers ta parameters\&. This is the
default behaviour\&.
.PP
\fBunset \-f\fP is equivalent ta \fBunfunction\fP\&.
.RE
.TP
\fBunsetopt\fP [ {\fB+\fP|\fB\-\fP}\fIoptions\fP | {\fB+\fP|\fB\-\fP}\fBo\fP \fIoption_name\fP ] [ \fIname\fP \&.\&.\&. ]
Unset tha options fo' tha shell\&.  All options specified either
with flags or by name is unset\&.  If no arguments is supplied,
the namez of all options currently unset is printed\&.
If tha \fB\-m\fP flag is given tha arguments is taken as patterns
(which should be quoted ta preserve dem from bein interpreted as glob
patterns), n' all options wit names matchin these patterns is unset\&.
.TP
\fBvared\fP
See tha section `Zle Builtins\&' up in \fIzshzle\fP(1)\&.
.TP
\fBwait\fP [ \fIjob\fP \&.\&.\&. ]
Wait fo' tha specified thangs or processes\&.  If \fIjob\fP aint given
then all currently actizzle lil pimp processes is waited for\&.
Each \fIjob\fP can be either a thang justification or tha process ID
of a thang up in tha thang table\&.
Da exit status from dis command is dat of tha thang waited for\&.
.TP
\fBwhence\fP [ \fB\-vcwfpams\fP ] \fIname\fP \&.\&.\&.
For each name, indicate how tha fuck it would be interpreted if used as a
command name\&.
.RS
.PP
.PD 0
.TP
.PD
\fB\-v\fP
Produce a mo' verbose report\&.
.TP
\fB\-c\fP
Print tha thangs up in dis biatch up in a \fBcsh\fP\-like format\&.
This takes precedence over \fB\-v\fP\&.
.TP
\fB\-w\fP
For each \fIname\fP, print `\fIname\fP\fB:\fP \fIword\fP\&' where \fIword\fP
is one of \fBalias\fP, \fBbuiltin\fP, \fBcommand\fP, \fBfunction\fP,
\fBhashed\fP, \fBreserved\fP or \fBnone\fP, accordin as \fIname\fP
correspondz ta a alias, a funky-ass built\-in command, a external command, a
shell function, a cold-ass lil command defined wit tha \fBhash\fP builtin, a
reserved word, or aint recognised\&.  This takes precedence over
\fB\-v\fP n' \fB\-c\fP\&.
.TP
\fB\-f\fP
Causes tha contentz of a gangbangin' finger-lickin' dirty-ass shell function ta be
displayed, which would otherwise not happen unless tha \fB\-c\fP
flag was used\&.
.TP
\fB\-p\fP
Do a path search fo' \fIname\fP
even if it be a alias, reserved word, shell function or builtin\&.
.TP
\fB\-a\fP
Do a search fo' all occurrencez of \fIname\fP
all up in tha command path\&.
Normally only tha straight-up original gangsta occurrence is printed\&.
.TP
\fB\-m\fP
Da arguments is taken as patterns (should be
quoted), n' tha shiznit is displayed fo' each command matchin one
of these patterns\&.
.TP
\fB\-s\fP
If a pathname gotz nuff symlinks, print tha symlink\-free pathname as well\&.
.RE
.TP
\fBwhere\fP [ \fB\-wpms\fP ] \fIname\fP \&.\&.\&.
Equivalent ta \fBwhence \-ca\fP\&.
.TP
\fBwhich\fP [ \fB\-wpams\fP ] \fIname\fP \&.\&.\&.
Equivalent ta \fBwhence \-c\fP\&.
.TP
.PD 0
\fBzcompile\fP [ \fB\-U\fP ] [ \fB\-z\fP | \fB\-k\fP ] [ \fB\-R\fP | \fB\-M\fP ] \fIfile\fP [ \fIname\fP \&.\&.\&. ]
.TP
.PD 0
\fBzcompile\fP \fB\-ca\fP [ \fB\-m\fP ] [ \fB\-R\fP | \fB\-M\fP ] \fIfile\fP [ \fIname\fP \&.\&.\&. ]
.TP
.PD
\fBzcompile \-t\fP \fIfile\fP [ \fIname\fP \&.\&.\&. ]
This builtin command can be used ta compile functions or scripts,
storin tha compiled form up in a gangbangin' file, n' ta examine filez containing
the compiled form\&.  This allows fasta autoloadin of functions and
execution of scripts by avoidin parsin of tha text when tha files
are read\&.
.RS
.PP
Da first form (without tha \fB\-c\fP, \fB\-a\fP or \fB\-t\fP options) creates a
compiled file\&.  If only tha \fIfile\fP argument is given, the
output file has tha name `\fIfile\fP\fB\&.zwc\fP\&' n' is ghon be placed in
the same directory as tha \fIfile\fP\&.  Da shell will load tha compiled
file instead of tha aiiight function file when tha function
is autoloaded; see
the section `Autoloadin Functions\&' up in \fIzshmisc\fP(1)
for a thugged-out description of how tha fuck autoloaded functions is searched\&.  The
extension \fB\&.zwc\fP standz fo' `zsh word code\&'\&.
.PP
If there be at least one \fIname\fP argument, all tha named files
are compiled tha fuck into tha output \fIfile\fP given as tha straight-up original gangsta argument\&.  If
\fIfile\fP do not end up in \fB\&.zwc\fP, dis extension be automatically
appended\&.  Filez containin multiple compiled functions is called `digest\&'
files, n' is intended ta be used as elementz of tha \fBFPATH\fP/\fBfpath\fP
special array\&.
.PP
Da second form, wit tha \fB\-c\fP or \fB\-a\fP options, writes tha compiled
definitions fo' all tha named functions tha fuck into \fIfile\fP\&.  For \fB\-c\fP, the
names must be functions currently defined up in tha shell, not dem marked
for autoloading\&.  Undefined functions dat is marked fo' autoloading
may be freestyled by rockin tha \fB\-a\fP option, up in which case tha \fBfpath\fP
is searched n' tha contentz of tha definizzle filez fo' them
functions, if found, is compiled tha fuck into \fIfile\fP\&.  If both \fB\-c\fP and
\fB\-a\fP is given, namez of both defined functions n' functions marked
for autoloadin may be given\&.  In either case, tha functions up in files
written wit tha \fB\-c\fP or \fB\-a\fP option is ghon be autoloaded as if the
\fBKSH_AUTOLOAD\fP option was unset\&.
.PP
Da reason fo' handlin loaded n' not\-yet\-loaded functions with
different options is dat some definizzle filez fo' autoloadin define
multiple functions, includin tha function wit tha same name as the
file, and, all up in tha end, call dat function\&.  In such cases tha output of
`\fBzcompile \-c\fP\&' do not include tha additionizzle functions defined in
the file, n' any other initialization code up in tha file is lost\&.  Using
`\fBzcompile \-a\fP\&' captures all dis extra shiznit\&.
.PP
If tha \fB\-m\fP option is combined wit \fB\-c\fP or \fB\-a\fP,
the \fIname\fPs is used as patterns n' all functions whose names
match one of these patterns is ghon be written\&. If no \fIname\fP is given,
the definitionz of all functions currently defined or marked as
autoloaded is ghon be written\&.
.PP
Note tha second form cannot be used fo' compilin functions that
include redirections as part of tha definizzle rather than within
the body of tha function; fo' example
.PP
.RS
.nf
\fBfn1() { { \&.\&.\&. } >~/logfile }\fP
.fi
.RE
.PP
can be compiled but
.PP
.RS
.nf
\fBfn1() { \&.\&.\&. } >~/logfile\fP
.fi
.RE
.PP
cannot\&.  It be possible ta use tha straight-up original gangsta form of \fBzcompile\fP ta compile
autoloadable functions dat include tha full function definizzle instead
of just tha body of tha function\&.
.PP
Da third form, wit tha \fB\-t\fP option, examines a existing
compiled file\&.  Without further arguments, tha namez of tha original
filez compiled tha fuck into it is listed\&.  Da first line of output shows
the version of tha shell which compiled tha file n' how tha fuck tha file
will be used (i\&.e\&. by readin it directly or by mappin it tha fuck into memory)\&.
With arguments, not a god damn thang is output n' tha return status is set ta zero if
definitions fo' \fIall\fP \fIname\fPs was found up in tha compiled
file, n' non\-zero if tha definizzle fo' at least one \fIname\fP was not
found\&.
.PP
Other options:
.PP
.PD 0
.TP
.PD
\fB\-U\fP
Aliases is not expanded when compilin tha \fIname\fPd files\&.
.TP
\fB\-R\fP
When tha compiled file is read, its contents is copied tha fuck into the
shell\&z memory, rather than memory\-mapped (see \fB\-M\fP)\&.  This
happens automatically on systems dat do not support memory mapping\&.
.RS
.PP
When compilin scripts instead of autoloadable functions, it is
often desirable ta use dis option; otherwise tha whole file, includin the
code ta define functions which have already been defined, will
remain mapped, consequently wastin memory\&.
.RE
.TP
\fB\-M\fP
Da compiled file is mapped tha fuck into tha shell\&z memory when read\&. This
is done up in such a way dat multiple instancez of tha shell hustlin
on tha same host will share dis mapped file\&.  If neither \fB\-R\fP nor
\fB\-M\fP is given, tha \fBzcompile\fP builtin decides what tha fuck ta do based
on tha size of tha compiled file\&.
.TP
.PD 0
\fB\-k\fP
.TP
.PD
\fB\-z\fP
These options is used when tha compiled file gotz nuff functions which
are ta be autoloaded\&. If \fB\-z\fP is given, the
function is ghon be autoloaded as if tha \fBKSH_AUTOLOAD\fP option is
\fInot\fP set, even if it is set all up in tha time tha compiled file is
read, while if tha \fB\-k\fP is given, tha function is ghon be loaded as if
\fBKSH_AUTOLOAD\fP \fIis\fP set\&.  These options also take precedence over
any \fB\-k\fP or \fB\-z\fP options specified ta tha \fBautoload\fP builtin\&. If
neither of these options is given, tha function is ghon be loaded as
determined by tha settin of tha \fBKSH_AUTOLOAD\fP option all up in tha time
the compiled file is read\&.
 
These options may also step tha fuck up as nuff times as necessary between tha listed
\fIname\fPs ta specify tha loadin steez of all followin functions, up to
the next \fB\-k\fP or \fB\-z\fP\&.

Da pimped file always gotz nuff two versionz of tha compiled
format, one fo' big\-endian machines n' one fo' small\-endian
machines\&.  Da upshot of dis is dat tha compiled file is machine
independent n' if it is read or mapped, only one half of tha file
is straight-up used (and mapped)\&.
.RE
.TP
\fBzformat\fP
See tha section `Da zsh/zutil Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBzftp\fP
See tha section `Da zsh/zftp Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBzle\fP
See tha section `Zle Builtins\&' up in \fIzshzle\fP(1)\&.
.TP
.PD 0
\fBzmodload\fP [ \fB\-dL\fP ] [ \&.\&.\&. ]
.TP
.PD 0
\fBzmodload \-F\fP [ \fB\-lLme\fP \fB\-P\fP \fBparam\fP ] \fImodule\fP [\fB+\-\fP]\fIfeature\&.\&.\&.\fP
.TP
.PD 0
\fBzmodload \-e\fP [ \fB\-A\fP ] [ \&.\&.\&. ]
.TP
.PD 0
\fBzmodload\fP [ \fB\-a\fP [ \fB\-bcpf\fP [ \fB\-I\fP ] ] ] [ \fB\-iL\fP ] \&.\&.\&.
.TP
.PD 0
\fBzmodload\fP \fB\-u\fP [ \fB\-abcdpf\fP [ \fB\-I\fP ] ] [ \fB\-iL\fP ] \&.\&.\&.
.TP
.PD 0
\fBzmodload\fP \fB\-A\fP [ \fB\-L\fP ] [ \fImodalias\fP[\fB=\fP\fImodule\fP] \&.\&.\&. ]
.TP
.PD
\fBzmodload\fP \fB\-R\fP \fImodalias\fP \&.\&.\&. 
Performs operations relatin ta zsh\&z loadable modules\&.
Loadin of modulez while tha shell is hustlin (`dynamical loading\&') is not
available on all operatin systems, or on all installations on a particular
operatin system, although tha \fBzmodload\fP command itself be always
available n' can be used ta manipulate modulez built tha fuck into versionz of the
shell executable without dynamical loading\&.
.RS
.PP
Without arguments tha namez of all currently loaded binary modulez are
printed\&.  Da \fB\-L\fP option causes dis list ta be up in tha form of a
seriez of \fBzmodload\fP commands\&.  Forms wit arguments are:
.PP
.PD 0
.TP
.PD 0
\fBzmodload\fP [ \fB\-i\fP ] \fIname\fP \&.\&.\&. 
.TP
.PD
\fBzmodload\fP \fB\-u\fP [ \fB\-i\fP ] \fIname\fP \&.\&.\&.
In tha simplest case, \fBzmodload\fP loadz a funky-ass binary module\&.  Da module must
be up in a gangbangin' file wit a name consistin of tha specified \fIname\fP followed by
a standard suffix, probably `\fB\&.so\fP\&' (`\fB\&.sl\fP' on HPUX)\&.
If tha module ta be loaded be already loaded tha duplicate module is
ignored\&.  If \fBzmodload\fP detects a inconsistency, like fuckin an
invalid module name or circular dependency list, tha current code block is 
aborted\&.   Hence `\fBzmodload\fP \fImodule\fP \fB2>/dev/null\fP\&' is sufficient
to test whether a module be available\&.
If it be available, tha module is loaded if necessary, while if it
is not available, non\-zero status is silently returned\&.  Da option
\fB\-i\fP be accepted fo' compatibilitizzle but has no effect\&.
.RS
.PP
Da \fIname\fPd module is searched fo' up in tha same way a cold-ass lil command is, using
\fB$module_path\fP instead of \fB$path\fP\&.  But fuck dat shiznit yo, tha word on tha street is dat tha path search is
performed even when tha module name gotz nuff a `\fB/\fP\&', which it probably do\&.
There is no way ta prevent tha path search\&.
.PP
If tha module supports features (see below), \fBzmodload\fP tries to
enable all features when loadin a module\&.  If tha module was successfully
loaded but not all features could be enabled, \fBzmodload\fP returns status 2\&.
.PP
With \fB\-u\fP, \fBzmodload\fP unloadz modules\&.  Da same \fIname\fP
must be given dat was given when tha module was loaded yo, but it is not
necessary fo' tha module ta exist up in tha file system\&.
Da \fB\-i\fP option suppresses tha error if tha module be already
unloaded (or was never loaded)\&.
.PP
Each module has a funky-ass boot n' a cold-ass lil cleanup function\&.  Da module
will not be loaded if its boot function fails\&.  Similarly a module
can only be unloaded if its cleanup function runs successfully\&.
.RE
.TP
\fBzmodload \-F\fP [ \fB\-almLe\fP \fB\-P\fP \fBparam\fP ] \fImodule\fP [\fB+\-\fP]\fIfeature\&.\&.\&.\fP
\fBzmodload \-F\fP allows mo' selectizzle control over tha features provided
by modules\&.  With no options apart from \fB\-F\fP, tha module named
\fImodule\fP is loaded, if dat shiznit was not already loaded, n' tha list of
\fIfeature\fPs is set ta tha required state\&.  If no 
\fIfeature\fPs is specified, tha module is loaded, if dat shiznit was not already
loaded yo, but tha state of features is unchanged\&.  Each feature
may be preceded by a \fB+\fP ta turn tha feature on, or \fB\-\fP ta turn it
off; tha \fB+\fP be assumed if neither characta is present\&.
Any feature not explicitly mentioned is left up in its current state;
if tha module was not previously loaded dis means any such features will
remain disabled\&.  Da return status is zero if all features were
set, 1 if tha module failed ta load, n' 2 if some features could
not be set (for example, a parameta couldn\&'t be added cuz there
was a gangbangin' finger-lickin' different parameta of tha same name) but tha module was loaded\&.
.RS
.PP
Da standard features is builtins, conditions, parametas n' math
functions; these is indicated by tha prefix `\fBb:\fP\&', `\fBc:\fP'
(`\fBC:\fP\&' fo' a infix condition), `\fBp:\fP' n' `\fBf:\fP', respectively,
followed by tha name dat tha correspondin feature would have up in the
shell\&.  For example, `\fBb:strftime\fP\&' indicates a funky-ass builtin named
\fBstrftime\fP n' \fBp:EPOCHSECONDS\fP indicates a parameta named
\fBEPOCHSECONDS\fP\&.  Da module may provide other (`abstract\&') features of
its own as indicated by its documentation; these have no prefix\&.
.PP
With \fB\-l\fP or \fB\-L\fP, features provided by tha module is listed\&.  With
\fB\-l\fP alone, a list of features together wit they states is shown, one
feature per line\&.  With \fB\-L\fP alone, a \fBzmodload \-F\fP command dat would
cause enabled featurez of tha module ta be turned on is shown\&.  With
\fB\-lL\fP, a \fBzmodload \-F\fP command dat would cause all tha features ta be
set ta they current state is shown\&.  If one of these combinations is given
the option \fB\-P\fP \fIparam\fP then tha parameta \fBparam\fP is set ta an
array of features, either features together wit they state or (if
\fB\-L\fP ridin' solo is given) enabled features\&.
.PP
With tha option \fB\-L\fP tha module name may be omitted; then a list
of all enabled features fo' all modulez providin features is printed
in tha form of \fBzmodload \-F\fP commands\&.  If \fB\-l\fP be also given,
the state of both enabled n' disabled features is output up in dat form\&.
.PP
A set of features may be provided together wit \fB\-l\fP or \fB\-L\fP n' a
module name; up in dat case only tha state of dem features is
considered\&.  Each feature may be preceded by \fB+\fP or \fB\-\fP but the
characta has no effect\&.  If no set of features is provided, all
features is considered\&.
.PP
With \fB\-e\fP, tha command first tests dat tha module is loaded;
if it is not, status 1 is returned\&.  If tha module is loaded,
the list of features given as a argument is examined\&.  Any feature
given wit no prefix is simply tested ta peep if tha module serves up it;
any feature given wit a prefix \fB+\fP or \fB\-\fP is tested to
see if is provided n' up in tha given state\&.  If tha tests on all features
in tha list succeed, status 0 is returned, else status 1\&.
.PP
With \fB\-m\fP, each entry up in tha given list of features is taken
as a pattern ta be matched against tha list of features provided
by tha module\&.  An initial \fB+\fP or \fB\-\fP must be given explicitly\&.
This may not be combined wit tha \fB\-a\fP option as autoloadz must
be specified explicitly\&.
.PP
With \fB\-a\fP, tha given list of features is marked fo' autoload from
the specified module, which may not yet be loaded\&.  An optionizzle \fB+\fP
may step tha fuck up before tha feature name\&.  If tha feature is prefixed with
\fB\-\fP, any existin autoload is removed\&.  Da options \fB\-l\fP n' \fB\-L\fP
may be used ta list autoloads\&.  Autoloadin is specific ta individual
features; when tha module is loaded only tha axed feature is
enabled\&.  Autoload requests is preserved if tha module is
subsequently unloaded until a explicit `\fBzmodload \-Fa\fP \fImodule\fP
\fB\-\fP\fIfeature\fP\&' is issued\&.  It aint a error ta request a autoload
for a gangbangin' feature of a module dat be already loaded\&.
.PP
When tha module is loaded each autoload is checked against tha features
actually provided by tha module; if tha feature aint provided the
autoload request is deleted\&.  A warnin message is output; if the
module is bein loaded ta provide a gangbangin' finger-lickin' different feature, n' dat autoload
is successful, there is no effect on tha statuz of tha current command\&.
If tha module be already loaded all up in tha time when \fBzmodload \-Fa\fP is
run, a error message is printed n' status 1 returned\&.
.PP
\fBzmodload \-Fa\fP can be used wit tha \fB\-l\fP, \fB\-L\fP, \fB\-e\fP and
\fB\-P\fP options fo' listin n' testin tha existence of autoloadable
features\&.  In dis case \fB\-l\fP is ignored if \fB\-L\fP is specified\&.
\fBzmodload \-FaL\fP wit no module name lists autoloadz fo' all modules\&.
.PP
Note dat only standard features as busted lyrics bout above can be autoloaded;
other features require tha module ta be loaded before enabling\&.
.RE
.TP
.PD 0
\fBzmodload\fP \fB\-d\fP [ \fB\-L\fP ] [ \fIname\fP ]
.TP
.PD 0
\fBzmodload\fP \fB\-d\fP \fIname\fP \fIdep\fP \&.\&.\&.
.TP
.PD
\fBzmodload\fP \fB\-ud\fP \fIname\fP [ \fIdep\fP \&.\&.\&. ]
Da \fB\-d\fP option can be used ta specify module dependencies\&.  Da modules
named up in tha second n' subsequent arguments is ghon be loaded before the
module named up in tha straight-up original gangsta argument\&.
.RS
.PP
With \fB\-d\fP n' one argument, all dependencies fo' dat module is listed\&.
With \fB\-d\fP n' no arguments, all module dependencies is listed\&.  This
listin is by default up in a Makefile\-like format\&.  Da \fB\-L\fP option
changes dis format ta a list of \fBzmodload \-d\fP commands\&.
.PP
If \fB\-d\fP n' \fB\-u\fP is both used, dependencies is removed\&.  If only one
argument is given, all dependencies fo' dat module is removed\&.
.RE
.TP
.PD 0
\fBzmodload\fP \fB\-ab\fP [ \fB\-L\fP ]
.TP
.PD 0
\fBzmodload\fP \fB\-ab\fP [ \fB\-i\fP ] \fIname\fP [ \fIbuiltin\fP \&.\&.\&. ]
.TP
.PD
\fBzmodload\fP \fB\-ub\fP [ \fB\-i\fP ] \fIbuiltin\fP \&.\&.\&.
Da \fB\-ab\fP option defines autoloaded builtins\&.  It defines tha specified
\fIbuiltin\fPs\&.  When any of dem builtins is called, tha module specified
in tha straight-up original gangsta argument is loaded n' all its features is enabled (for
selectizzle control of features use `\fBzmodload \-F \-a\fP\&' as busted lyrics about
above)\&.  If only tha \fIname\fP is given, one builtin is defined, with
the same name as tha module\&.  \fB\-i\fP suppresses tha error if tha builtin
is already defined or autoloaded yo, but not if another builtin of the
same name be already defined\&.
.RS
.PP
With \fB\-ab\fP n' no arguments, all autoloaded builtins is listed, wit the
module name (if different) shown up in parentheses afta tha builtin name\&.
Da \fB\-L\fP option chizzlez dis format ta a list of \fBzmodload \-a\fP
commands\&.
.PP
If \fB\-b\fP is used together wit tha \fB\-u\fP option, it removes builtins
previously defined wit \fB\-ab\fP\&.  This is only possible if tha builtin is
not yet loaded\&.  \fB\-i\fP suppresses tha error if tha builtin be already
removed (or never existed)\&.
.PP
Autoload requests is retained if tha module is subsequently unloaded
until a explicit `\fBzmodload \-ub\fP \fIbuiltin\fP\&' is issued\&.
.RE
.TP
.PD 0
\fBzmodload\fP \fB\-ac\fP [ \fB\-IL\fP ]
.TP
.PD 0
\fBzmodload\fP \fB\-ac\fP [ \fB\-iI\fP ] \fIname\fP [ \fIcond\fP \&.\&.\&. ]
.TP
.PD
\fBzmodload\fP \fB\-uc\fP [ \fB\-iI\fP ] \fIcond\fP \&.\&.\&.
Da \fB\-ac\fP option is used ta define autoloaded condizzle codes\&. The
\fIcond\fP strings give tha namez of tha conditions defined by the
module\&. Da optionizzle \fB\-I\fP option is used ta define infix condition
names\&. Without dis option prefix condizzle names is defined\&.
.RS
.PP
If given no condizzle names, all defined names is listed (as a series of
\fBzmodload\fP commandz if tha \fB\-L\fP option is given)\&.
.PP
Da \fB\-uc\fP option removes definitions fo' autoloaded conditions\&.
.RE
.TP
.PD 0
\fBzmodload\fP \fB\-ap\fP [ \fB\-L\fP ]
.TP
.PD 0
\fBzmodload\fP \fB\-ap\fP [ \fB\-i\fP ] \fIname\fP [ \fIparameter\fP \&.\&.\&. ]
.TP
.PD
\fBzmodload\fP \fB\-up\fP [ \fB\-i\fP ] \fIparameter\fP \&.\&.\&.
Da \fB\-p\fP option is like tha \fB\-b\fP n' \fB\-c\fP options yo, but makes
\fBzmodload\fP work on autoloaded parametas instead\&.
.TP
.PD 0
\fBzmodload\fP \fB\-af\fP [ \fB\-L\fP ]
.TP
.PD 0
\fBzmodload\fP \fB\-af\fP [ \fB\-i\fP ] \fIname\fP [ \fIfunction\fP \&.\&.\&. ]
.TP
.PD
\fBzmodload\fP \fB\-uf\fP [ \fB\-i\fP ] \fIfunction\fP \&.\&.\&.
Da \fB\-f\fP option is like tha \fB\-b\fP, \fB\-p\fP, n' \fB\-c\fP options yo, but
makes \fBzmodload\fP work on autoloaded math functions instead\&. 
.TP
.PD 0
\fBzmodload\fP \fB\-a\fP [ \fB\-L\fP ]
.TP
.PD 0
\fBzmodload\fP \fB\-a\fP [ \fB\-i\fP ] \fIname\fP [ \fIbuiltin\fP \&.\&.\&. ]
.TP
.PD
\fBzmodload\fP \fB\-ua\fP [ \fB\-i\fP ] \fIbuiltin\fP \&.\&.\&.
Equivalent ta \fB\-ab\fP n' \fB\-ub\fP\&.
.TP
\fBzmodload \-e\fP [ \fB\-A\fP ] [ \fIstring\fP \&.\&.\&. ]
Da \fB\-e\fP option without arguments lists all loaded modules; if tha \fB\-A\fP
option be also given, module aliases correspondin ta loaded modulez are
also shown\&.  If arguments is provided, not a god damn thang is printed;
the return status is set ta zero if all \fIstring\fPs given as arguments
are namez of loaded modulez n' ta one if at least on \fIstring\fP is not
the name of a loaded module\&.  This can be used ta test fo' the
availabilitizzle of thangs implemented by modules\&.  In dis case, any
aliases is automatically resolved n' tha \fB\-A\fP flag aint used\&.
.TP
\fBzmodload\fP \fB\-A\fP [ \fB\-L\fP ] [ \fImodalias\fP[\fB=\fP\fImodule\fP] \&.\&.\&. ]
For each argument, if both \fImodalias\fP n' \fImodule\fP is given,
define \fImodalias\fP ta be a alias fo' tha module \fImodule\fP\&.
If tha module \fImodalias\fP is eva subsequently requested, either via a
call ta \fBzmodload\fP or implicitly, tha shell will attempt ta load
\fImodule\fP instead\&.  If \fImodule\fP aint given, show tha definizzle of
\fImodalias\fP\&.  If no arguments is given, list all defined module aliases\&.
When listing, if tha \fB\-L\fP flag was also given, list tha definizzle as a
\fBzmodload\fP command ta recreate tha alias\&.
.RS
.PP
Da existence of aliases fo' modulez is straight-up independent of whether
the name resolved is straight-up loaded as a module: while tha alias exists,
loadin n' unloadin tha module under any alias has exactly tha same
effect as rockin tha resolved name, n' do not affect tha connection
between tha alias n' tha resolved name which can be removed either by
\fBzmodload \-R\fP or by redefinin tha alias\&.  Chainz of aliases (i\&.e\&. where
the first resolved name is itself a alias) is valid so long as these are
not circular\&.  As tha aliases take tha same format as module names, they
may include path separators:  up in dis case, there is no requirement fo' any
part of tha path named ta exist as tha alias is ghon be resolved first\&.  For
example, `\fBany/old/alias\fP\&' be always a valid alias\&.
.PP
Dependencies added ta aliased modulez is straight-up added ta tha resolved
module; these remain if tha alias is removed\&.  It be valid ta create an
alias whose name is one of tha standard shell modulez n' which resolves to
a different module\&.  But fuck dat shiznit yo, tha word on tha street is dat if a module has dependencies, it
will not be possible ta use tha module name as a alias as tha module will
already be marked as a loadable module up in its own right\&.
.PP
Apart from tha above, aliases can be used up in tha \fBzmodload\fP command
anywhere module names is required\&.  But fuck dat shiznit yo, tha word on tha street is dat aliases aint gonna be
shown up in listz of loaded modulez wit a funky-ass bare `\fBzmodload\fP\&'\&.
.RE
.TP
\fBzmodload\fP \fB\-R\fP \fImodalias\fP \&.\&.\&. 
For each \fImodalias\fP argument dat was previously defined as a module
alias via \fBzmodload \-A\fP, delete tha alias\&.  If any was not defined, an
error is caused n' tha remainder of tha line is ignored\&.
.PP
Note dat \fBzsh\fP make no distinction between modulez dat was linked 
into tha shell n' modulez dat is loaded dynamically\&. In both cases
this builtin command has ta be used ta make available tha builtins and
other thangs defined by modulez (unless tha module be autoloaded on
these definitions)\&. This is legit even fo' systems dat don\&'t support
dynamic loadin of modules\&.
.RE
.TP
\fBzparseopts\fP
See tha section `Da zsh/zutil Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBzprof\fP
See tha section `Da zsh/zprof Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBzpty\fP
See tha section `Da zsh/zpty Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBzregexparse\fP
See tha section `Da zsh/zutil Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBzsocket\fP
See tha section `Da zsh/net/socket Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBzstyle\fP
See tha section `Da zsh/zutil Module\&' up in \fIzshmodules\fP(1)\&.
.TP
\fBztcp\fP
See tha section `Da zsh/net/tcp Module\&' up in \fIzshmodules\fP(1)\&.
