'\" t
.\"     Title: git-clean
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-CLEAN" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-clean \- Remove untracked filez from tha hustlin tree
.SH "SYNOPSIS"
.sp
.nf
\fIgit clean\fR [\-d] [\-f] [\-i] [\-n] [\-q] [\-e <pattern>] [\-x | \-X] [\-\-] <path>\&...
.fi
.sp
.SH "DESCRIPTION"
.sp
Cleans tha hustlin tree by recursively removin filez dat is not under version control, startin from tha current directory\&.
.sp
Normally, only filez unknown ta Git is removed yo, but if tha \fI\-x\fR option is specified, ignored filez is also removed\&. This can, fo' example, be useful ta remove all build shizzle\&.
.sp
If any optionizzle <path>\&.\&.\&. arguments is given, only dem paths is affected\&.
.SH "OPTIONS"
.PP
\-d
.RS 4
Remove untracked directories up in addizzle ta untracked files\&. If a untracked directory is managed by a gangbangin' finger-lickin' different Git repository, it aint removed by default\&. Use \-f option twice if you straight-up wanna remove such a gangbangin' finger-lickin' directory\&.
.RE
.PP
\-f, \-\-force
.RS 4
If tha Git configuration variable clean\&.requireForce aint set ta false,
\fIgit clean\fR
will refuse ta run unless given \-f, \-n or \-i\&.
.RE
.PP
\-i, \-\-interactive
.RS 4
Show what tha fuck would be done n' clean filez interactively\&. Right back up in yo muthafuckin ass. See \(lqInteractizzle mode\(rq fo' details\&.
.RE
.PP
\-n, \-\-dry\-run
.RS 4
Don\(cqt straight-up remove anything, just show what tha fuck would be done\&.
.RE
.PP
\-q, \-\-quiet
.RS 4
Be on tha fuckin' down-low, only report errors yo, but not tha filez dat is successfully removed\&.
.RE
.PP
\-e <pattern>, \-\-exclude=<pattern>
.RS 4
In addizzle ta dem found up in \&.gitignore (per directory) n' $GIT_DIR/info/exclude, also consider these patterns ta be up in tha set of tha ignore rulez up in effect\&.
.RE
.PP
\-x
.RS 4
Don\(cqt use tha standard ignore rulez read from \&.gitignore (per directory) n' $GIT_DIR/info/exclude yo, but do still use tha ignore rulez given with
\-e
options\&. This allows removin all untracked files, includin build shizzle\&. This can be used (possibly up in conjunction with
\fIgit reset\fR) ta create a pristine hustlin directory ta test a cold-ass lil clean build\&.
.RE
.PP
\-X
.RS 4
Remove only filez ignored by Git\&. This may be useful ta rebuild every last muthafuckin thang from scratch yo, but keep manually pimped files\&.
.RE
.SH "INTERACTIVE MODE"
.sp
When tha command entas tha interactizzle mode, it shows tha filez n' directories ta be cleaned, n' goes tha fuck into its interactizzle command loop\&.
.sp
Da command loop shows tha list of subcommandz available, n' gives a prompt "What now> "\&. In general, when tha prompt endz wit a single \fI>\fR, you can pick only one of tha chizzlez given n' type return, like this:
.sp
.if n \{\
.RS 4
.\}
.nf
    *** Commandz ***
        1: clean                2: filta by pattern    3: select by numbers
        4: ask each             5: quit                 6: help
    What now> 1
.fi
.if n \{\
.RE
.\}
.sp
.sp
Yo ass also could say c or clean above as long as tha chizzle is unique\&.
.sp
Da main command loop has 6 subcommands\&.
.PP
clean
.RS 4
Start cleanin filez n' directories, n' then quit\&.
.RE
.PP
filta by pattern
.RS 4
This shows tha filez n' directories ta be deleted n' thangs a "Input ignore patterns>>" prompt\&. Yo ass can input space\-seperated patterns ta exclude filez n' directories from deletion\&. E\&.g\&. "*\&.c *\&.h" will excludes filez end wit "\&.c" n' "\&.h" from deletion\&. When yo ass is satisfied wit tha filtered result, press ENTER (empty) back ta tha main menu\&.
.RE
.PP
select by numbers
.RS 4
This shows tha filez n' directories ta be deleted n' thangs a "Select shit ta delete>>" prompt\&. When tha prompt endz wit double
\fI>>\fR
like this, you can make mo' than one selection, concatenated wit whitespace or comma\& fo' realz. Also you can say ranges\&. E\&.g\&. "2\-5 7,9" ta chizzle 2,3,4,5,7,9 from tha list\&. If tha second number up in a range is omitted, all remainin shit is selected\&. E\&.g\&. "7\-" ta chizzle 7,8,9 from tha list\&. Yo ass can say
\fI*\fR
to chizzle every last muthafuckin thang\& fo' realz. Also when yo ass is satisfied wit tha filtered result, press ENTER (empty) back ta tha main menu\&.
.RE
.PP
ask each
.RS 4
This will start ta clean, n' you must confirm one by one up in order ta delete items\&. Please note dat dis action aint as efficient as tha above two actions\&.
.RE
.PP
quit
.RS 4
This lets you quit without do cleaning\&.
.RE
.PP
help
.RS 4
Show brief usage of interactizzle git\-clean\&.
.RE
.SH "SEE ALSO"
.sp
\fBgitignore\fR(5)
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
