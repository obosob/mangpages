.TH "FbTerm" "1" "October 2010" "FbTerm 1.7" "FbTerm User Manual"
.SH "NAME"
FbTerm - a gangbangin' fast Frame Buffer based TERMinal emulator fo' linux
.SH "SYNOPSIS"
\fBfbterm\fR [\fIoptions\fR] [--] [\fIcommand\fR [\fIarguments\fR]]
.SH "DESCRIPTION"
FbTerm be a gangbangin' fast terminal emulator fo' linux wit frame buffer thang or VESA vizzle card. Y'all KNOW dat shit, muthafucka! Features include:
  
  * mostly as fast as terminal of linux kernel while accelerated scrollin is enabled
  * select font wit fontconfig n' draw text wit freetype2, same as Qt/Gtk+ based GUI apps
  * dynamically create/destroy up ta 10 windows initially hustlin default shell
  * record scroll-back history fo' every last muthafuckin window
  * auto-detect current locale n' convert text encoding, support double width scripts like Chinese, Japanese etc
  * switch between configurable additionizzle text encodings wit bangin' keys on tha fly
  * copy/past selected text between windows wit mouse when gpm server is hustlin
  * chizzle tha orientation of screen display, a.k.a. screen rotation
  * lightweight input method framework wit client-server architecture
  * background image fo' eye candy
.SH "OPTIONS"
\fIcommand\fR [\fIarguments\fR] may be given ta override tha built-in chizzle of shell program. Normally FbTerm
checks tha \fISHELL\fR variable. If dat aint set, it tries ta use tha userz login shell program specified up in tha password
file. If dat aint set, /bin/sh is ghon be used. Y'all KNOW dat shit, muthafucka! Yo ass should use tha \fI--\fR argument ta separate FbTermz options from
the arguments supplied ta tha \fIcommand\fR.

FbTerm first uses option value specified up in command line arguments, then up in tha configure file \fI$HOME/.fbtermrc\fR.
If dat file don't exist, FbTerm will create it wit default options on startup.
.TP
\fB-h, --help\fR
display tha help n' exit
.TP
\fB-V, --version\fR
display FbTerm version n' exit
.TP
\fB-v, --verbose\fR
display extra FbTermz shiznit
.TP
\fB-n, --font-names=\fR\fItext\fR
specify font crew names
.TP
\fB-s, --font-size=\fR\fInum\fR
specify font pixel size
.TP
\fB--font-width=\fR\fInum\fR
force font width
.TP
\fB--font-height=\fR\fInum\fR
force font height
.TP
\fB-f, --color-foreground=\fR\fInum\fR
specify foreground color
.TP
\fB-b, --color-background=\fR\fInum\fR
specify background color
.TP
\fB-e, --text-encodings=\fR\fItext\fR
specify additionizzle text encodings
.TP
\fB-a, --ambiguous-wide
treat ambiguous width charactas as wide
.TP
\fB-r, --screen-rotate=\fR\fInum\fR
specify tha orientation of screen display
.TP
\fB-i, --input-method=\fR\fItext\fR
specify input method program
.TP
\fB--cursor-shape=\fR\fInum\fR
specify default cursor shape
.TP
\fB--cursor-interval=\fR\fInum\fR
specify cursor flash interval
.TP
\fB--vesa-mode=\fR\fInum\fR
specify VESA vizzle mode
.TP
\fB--vesa-mode=list\fR
display available VESA vizzle modes

.TP
see comments up in \fI$HOME/.fbtermrc\fR fo' detailz of these options.
.SH "SHORTCUT SUMMARY"
keyboard:
  CTRL_ALT_E:    exit from FbTerm
  CTRL_ALT_C:    create a freshly smoked up window
  CTRL_ALT_D:    destroy current window
  CTRL_ALT_1:    switch ta window 1
  CTRL_ALT_2:    switch ta window 2
  CTRL_ALT_3:    switch ta window 3
  CTRL_ALT_4:    switch ta window 4
  CTRL_ALT_5:    switch ta window 5
  CTRL_ALT_6:    switch ta window 6
  CTRL_ALT_7:    switch ta window 7
  CTRL_ALT_8:    switch ta window 8
  CTRL_ALT_9:    switch ta window 9
  CTRL_ALT_0:    switch ta window 10
  SHIFT_LEFT:    switch ta previous window
  SHIFT_RIGHT:   switch ta next window
  SHIFT_PAGEUP:    history scroll up
  SHIFT_PAGEDOWN:  history scroll down
  CTRL_ALT_F1:                 switch ta encodin of current locale
  CTRL_ALT_F2 ta CTRL_ALT_F6:  switch ta additionizzle encodings
  CTRL_SPACE:    toggle input method
  CTRL_ALT_K:    bust a cap up in input method server

mouse:
  move when left button down:      select text
  double click wit left button:   auto select text
  click wit right button:         paste selected text

Sometimes above actions aint gonna work, please try ta redo dem wit shift key holdin down.
.SH "FRAME BUFFER DEVICE"
Before executin FbTerm, make shizzle there be a gangbangin' frame buffer thang up in yo' system, n' you have read/write access right
with dat shit. Normally FbTerm tries ta open /dev/fb0 n' /dev/fb/0, environment variable "\fIFRAMEBUFFER\fR" may be used ta override this
built-in behavior.
.SH "VESA VIDEO DEVICE"
From version 1.6, FbTerm addz VESA vizzle card support. By default, FbTerm tries frame buffer thang first, if failure, 
then tries ta use VESA thang wit highest resolution n' color depth. option "\fIvesa-mode\fR" may be given ta force only open
VESA thang wit tha specified vizzle mode. To peep available vizzle modes fo' yo' VESA card, execute "\fBfbterm --vesa-mode=list\fR".

Attention: 1) VESA support requires root privilege ta work; 2) do not force ta use VESA thang on tha system wit frame buffer device
enabled, they maybe conflict wit each other.
.SH "FONT"
FbTerm invokes fontconfig ta git a gangbangin' font list, if tha straight-up original gangsta font don't contain tha glyph fo' tha renderin character,
it will try second font, then tha third, ... n' so on, user can peep dis ordered font list wit "\fBfbterm -v\fR".

If you don't like tha fonts selected by FbTerm, execute "fc-list" ta git available fonts, chizzle favorites as
the value of option "\fIfont-names\fR". Yo ass may also modify tha configure file of fontconfig, which will
change tha behavior of all programs based on fontconfig!
.SH "TEXT ENCODING"
By rockin iconv, FbTerm converts other encodings ta internal encodin UTF-8. On startup, FbTerm checks variable
\fILC_CTYPE\fR ta determine tha default text encoding, which is binded ta shortcut CTRL_ALT_F1.
User can specify up ta 5 additionizzle encodings wit option "\fItext-encodings\fR", fo' example, as a Chinese user,
you set "text-encodings=gbk,big5", shortcut CTRL_ALT_F2 will bind ta gbk, n' CTRL_ALT_F3 bind ta big5.

In a fuckin shitload of CJK encodings there be ambiguous width charactas which gotz a width of either narrow or wide
dependin on tha context of they use. By default, FbTerm treats dem as narrow width characters,
option "\fIambiguous-wide\fR" may be used ta chizzle tha behavior.
.SH "BACKGROUND IMAGE"
FbTerm don't load n' parse any image file wit various formats directly, instead it takes a screen blasted of
frame buffer thang on startup if variable \fIFBTERM_BACKGROUND_IMAGE\fR is defined, then uses dis screen blasted as
the background fo' text rendering. In order ta enable background image support, user should first
put a image ta frame buffer thang wit a image viewer n' shiznit fo' realz. A wrapper script rockin fbv is listed below:
\fB
.br

    #!/bin/bash

    # fbterm-bi: a wrapper script ta enable background image wit fbterm
    # usage: fbterm-bi /path/to/image fbterm-options

    echo -ne "\\e[?25l" # hide cursor

    fbv -ciuker "$1" << EOF
    q
    EOF

    shift
    export FBTERM_BACKGROUND_IMAGE=1
    exec fbterm "$@"
\fR    
Attention: 1) do not enable background image on frame buffer thang wit 8bpp depth, cuz FbTerm chizzlez color map
table fo' erect text rendering; 2) if tha screen blasted is different from tha original gangsta image, try ta bust a gangbangin' fast scrolling
disabled frame buffer device.
.SH "256 COLOR EXTENSION"
FbTerm supports xtermz 256 color mode extension. I aint talkin' bout chicken n' gravy biatch. Da first 16 flavas is tha default terminal colors fo' realz. Additionally, there's
a 6x6x6 color cube, n' 24 grayscale tones. But xtermz 256 color escape sequences conflict wit tha linux sequences implemented by FbTerm,
so private escape sequences was introduced ta support dis feature:
\fB
.br

    ESC [ 1 ; n }                   set foreground color ta n (0 - 255)
    ESC [ 2 ; n }                   set background color ta n (0 - 255)
    ESC [ 3 ; n ; r ; g ; b }       set color n ta (r, g, b) ,  n, r, g, b all up in (0 - 255)
\fR

A freshly smoked up terminfo database entry named "fbterm" was added ta use these private sequences, all program based on terminfo should work wit dat shit.
By default, FbTerm sets environment variable "TERM" ta value "linux", user need run "TERM=fbterm /path/to/program" ta enable 256 color mode.
.SH "INPUT METHOD"
Instead of addin input method directly up in FbTerm, a cold-ass lil client-server based input method framework is designed ta do
this work. FbTerm acts as a cold-ass lil client, standalone IM program as a server, n' they run up in separated processes.

As a aiiight IM user, you should install a IM program freestyled fo' FbTerm, n' specify it as tha value of option "\fIinput-method\fR".
CTRL_SPACE is tha shortcut ta activate/deactivate input method. Y'all KNOW dat shit, muthafucka! And CTRL_ALT_K may be used ta bust a cap up in tha IM program when it has freezed. Y'all KNOW dat shit, muthafucka! 

.SH "SECURITY NOTES"
FbTerm tries ta chizzle linux kernel key map table ta setup shortcuts, which requires \fISYS_TTY_CONFIG\fR capabilitizzle since kernel
version 2.6.15. Well shiiiit, it means FbTerm should be a setuid 0 program ta allow non-root playas ta use shortcuts, n' you can put dat on yo' toast. FbTerm only
switches ta root privilege temporarily when changin key map table, we believe itz pretty much free from securitizzle problems.
If you straight-up don't like dis n' gotz a linux kernel wit file system capabilitizzles enabled, which allow user ta give
binaries a subset of rootz powers without rockin setuid 0 (straight-up legit kernel 2.6.27 includes it), you can run command
"\fBsudo setcap 'cap_sys_tty_config+ep' /path/to/fbterm\fR".

FbTerm redirects /dev/tty0 output ta tha pseudo terminal of current sub-window. In linux before version 2.6.10, anybody can do this
as long as tha output was not repimped up yet; since version 2.6.10, only root or a process wit tha \fICAP_SYS_ADMIN\fR capabilitizzle may do all dis bullshit.
Yo ass should do similar work wit above ones fo' FbTerm ta enable dis feature fo' non-root users. 

.SH "PERFORMANCE"
Accordin test result, FbTerm spendz mo' than 95% time on paintin screen. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Speedup paintin will significantly
increase performizzle yo. Here is some suggestions fo' frame buffer device:

  * Enable fast scrollin on frame buffer device. Da visible screen is ghon be just a window of tha vizzle memory,
when scrolling, FbTerm only chizzle tha start of window, no need ta repaint tha whole screen.
    
  * On Intel P6 crew processors tha Memory Type Range Registas (MTRRs) may be used ta control processor access to
memory ranges. If you have vizzle card on a PCI or AGP bus, enablin write-combinin allows bus write transfers
to be combined tha fuck into a larger transfer before burstin over tha PCI/AGP bus. This can increase performizzle of
FbTermz paint operations.

Maybe you need ta enable dem manually fo' yo' vizzle card. Y'all KNOW dat shit, muthafucka! For example, by default fast scrollin n' write-combining
are all disabled on general VESA frame buffer device, GRUB/LILO configure file should be modified ta enable em.
A GRUB example is flossed below:

title Ubuntu
    root (hd0,0)
    kernel /boot/vmlinuz ro root=LABEL=UBUNTU splash vga=0x317 \fBvideo=vesafb:ywrap,mtrr:3\fR
    initrd /boot/initrd.img
    
Yo ass may check fast scrollin status wit "\fBfbterm -v\fR", a message wit "scrolling: redraw" means fast scrolling
is disabled, otherwise enabled.
.SH "AUTHOR"
Written by dragchan.
.SH "REPORTING BUGS"
Please submit bug reports ta <\fBhttp://code.google.com/p/fbterm/issues\fR>.
.SH "COPYRIGHT"
Copyright \(co 2008-2010 dragchan. I aint talkin' bout chicken n' gravy biatch.  License GPLv2: GNU GPL version 2 or lata <http://gnu.org/licenses/gpl.html>.
.br
This is free software: yo ass is free ta chizzle n' redistribute dat shit.  There is NO WARRANTY, ta tha extent permitted by law.
