.TH cpack 1 "February 11, 2014" "cpack 2.8.12.2"
.SH NAME
.PP
.nf
  cpack \- Packagin driver provided by CMake.
.fi

.SH USAGE
.PP
.nf
  cpack \-G <generator> [options]
.fi

.SH DESCRIPTION
.PP
Da "cpack" executable is tha CMake packagin program.  CMake\-generated build trees pimped fo' projects dat use tha INSTALL_* commandz have packagin support.  This program will generate tha package.

.PP
CMake be a cold-ass lil cross\-platform build system generator. Shiiit, dis aint no joke.  Projects specify they build process wit platform\-independent CMake listfilez included up in each directory of a source tree wit tha name CMakeLists.txt. Users build a project by rockin CMake ta generate a funky-ass build system fo' a natizzle tool on they platform.

.SH OPTIONS
.TP
.B -G <generator>
Use tha specified generator ta generate package.

CPack may support multiple natizzle packagin systems on certain platforms fo' realz. A generator is responsible fo' generatin input filez fo' particular system n' invokin dat systems. Possible generator names is specified up in tha Generators section.

.TP
.B -C <Configuration>
Specify tha project configuration

This option specifies tha configuration dat tha project was build with, fo' example 'Debug', 'Release'.

.TP
.B -D <var>=<value>
Set a CPack variable.

Set a variable dat can be used by tha generator.

.TP
.B --config <config file>
Specify tha config file.

Specify tha config file ta use ta create tha package. By default CPackConfig.cmake up in tha current directory is ghon be used.

.TP
.B --verbose,-V
enable verbose output

Run cpack wit verbose output.

.TP
.B --debug
enable debug output (for CPack pimpers)

Run cpack wit debug output (for CPack pimpers).

.TP
.B -P <package name>
override/define CPACK_PACKAGE_NAME

If tha package name aint specified on cpack commmand line thenCPack.cmake defines it as CMAKE_PROJECT_NAME

.TP
.B -R <package version>
override/define CPACK_PACKAGE_VERSION

If version aint specified on cpack command line thenCPack.cmake defines it from CPACK_PACKAGE_VERSION_[MAJOR|MINOR|PATCH]look tha fuck into CPack.cmake fo' detail

.TP
.B -B <package directory>
override/define CPACK_PACKAGE_DIRECTORY

Da directory where CPack is ghon be bustin its packagin work.Da resultin package is ghon be found there, so peek-a-boo, clear tha way, I be comin' thru fo'sho. Inside dis directoryCPack creates '_CPack_Packages' sub\-directory which is theCPack temporary directory.

.TP
.B --vendor <vendor name>
override/define CPACK_PACKAGE_VENDOR

If vendor aint specified on cpack command line (or inside CMakeLists.txt) thenCPack.cmake defines it wit a thugged-out default value

.TP
.B --help-command cmd [file]
Print help fo' a single command n' exit.

Full documentation specific ta tha given command is displayed. Y'all KNOW dat shit, muthafucka! If a gangbangin' file is specified, tha documentation is freestyled tha fuck into n' tha output format is determined dependin on tha filename suffix. Right back up in yo muthafuckin ass. Supported is playa page, HTML, DocBook n' plain text.

.TP
.B --help-command-list [file]
List available commandz n' exit.

Da list gotz nuff all commandz fo' which help may be obtained by rockin tha \-\-help\-command argument followed by a cold-ass lil command name. If a gangbangin' file is specified, tha documentation is freestyled tha fuck into n' tha output format is determined dependin on tha filename suffix. Right back up in yo muthafuckin ass. Supported is playa page, HTML, DocBook n' plain text.

.TP
.B --help-commandz [file]
Print help fo' all commandz n' exit.

Full documentation specific fo' all current command is displayed.If a gangbangin' file is specified, tha documentation is freestyled tha fuck into n' tha output format is determined dependin on tha filename suffix. Right back up in yo muthafuckin ass. Supported is playa page, HTML, DocBook n' plain text.

.TP
.B --help-variable var [file]
Print help fo' a single variable n' exit.

Full documentation specific ta tha given variable is displayed.If a gangbangin' file is specified, tha documentation is freestyled tha fuck into n' tha output format is determined dependin on tha filename suffix. Right back up in yo muthafuckin ass. Supported is playa page, HTML, DocBook n' plain text.

.TP
.B --help-variable-list [file]
List documented variablez n' exit.

Da list gotz nuff all variablez fo' which help may be obtained by rockin tha \-\-help\-variable argument followed by a variable name.  If a gangbangin' file is specified, tha help is freestyled tha fuck into dat shit.If a gangbangin' file is specified, tha documentation is freestyled tha fuck into n' tha output format is determined dependin on tha filename suffix. Right back up in yo muthafuckin ass. Supported is playa page, HTML, DocBook n' plain text.

.TP
.B --help-variablez [file]
Print help fo' all variablez n' exit.

Full documentation fo' all variablez is displayed.If a gangbangin' file is specified, tha documentation is freestyled tha fuck into n' tha output format is determined dependin on tha filename suffix. Right back up in yo muthafuckin ass. Supported is playa page, HTML, DocBook n' plain text.

.TP
.B --copyright [file]
Print tha CMake copyright n' exit.

If a gangbangin' file is specified, tha copyright is freestyled tha fuck into dat shit.

.TP
.B --help,-help,-usage,-h,-H,/?
Print usage shiznit n' exit.

Usage raps bout tha basic command line intercourse n' its options.

.TP
.B --help-full [file]
Print full help n' exit.

Full help displays most of tha documentation provided by tha UNIX playa page.  It be provided fo' use on non\-UNIX platforms yo, but be also convenient if tha playa page aint installed. Y'all KNOW dat shit, muthafucka!  If a gangbangin' file is specified, tha help is freestyled tha fuck into dat shit.

.TP
.B --help-html [file]
Print full help up in HTML format.

This option is used by CMake authors ta help produce wizzy pages.  If a gangbangin' file is specified, tha help is freestyled tha fuck into dat shit.

.TP
.B --help-man [file]
Print full help as a UNIX playa page n' exit.

This option is used by tha cmake build ta generate tha UNIX playa page.  If a gangbangin' file is specified, tha help is freestyled tha fuck into dat shit.

.TP
.B --version,-version,/V [file]
Show program name/version banner n' exit.

If a gangbangin' file is specified, tha version is freestyled tha fuck into dat shit.

.SH GENERATORS
.TP
.B DEB
Debian packages

.TP
.B NSIS
Null Soft Installer

.TP
.B NSIS64
Null Soft Installa (64\-bit)

.TP
.B RPM
RPM packages

.TP
.B STGZ
Self extractin Tar GZip compression

.TP
.B TBZ2
Tar BZip2 compression

.TP
.B TGZ
Tar GZip compression

.TP
.B TZ
Tar Compress compression

.TP
.B ZIP
ZIP file format

.SH COMMANDS
.TP
.B cpack_add_component
Describes a CPack installation component named by tha COMPONENT argument ta a CMake INSTALL command.

.nf
  cpack_add_component(compname
                      [DISPLAY_NAME name]
                      [DESCRIPTION description]
                      [HIDDEN | REQUIRED | DISABLED ]
                      [GROUP group]
                      [DEPENDS comp1 comp2 ... ]
                      [INSTALL_TYPES type1 type2 ... ]
                      [DOWNLOADED]
                      [ARCHIVE_FILE filename])
.fi




Da cmake_add_component command raps bout a installation component, which tha user can opt ta install or remove as part of tha graphical installation process. compname is tha name of tha component, as provided ta tha COMPONENT argument of one or mo' CMake INSTALL commands.


DISPLAY_NAME is tha displayed name of tha component, used up in graphical installaz ta display tha component name. This value can be any string.


DESCRIPTION be a extended description of tha component, used up in graphical installaz ta give tha user additionizzle shiznit bout tha component. Descriptions can span multiple lines rockin "\\n" as tha line separator. Shiiit, dis aint no joke. Typically, these descriptions should be no mo' than all dem lines long.


HIDDEN indicates dat dis component is ghon be hidden up in tha graphical installer, so dat tha user cannot directly chizzle whether it is installed or not.


REQUIRED indicates dat dis component is required, n' therefore will always be installed. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is ghon be visible up in tha graphical installa yo, but it cannot be unselected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. (Typically, required components is shown greyed out).


DISABLED indicates dat dis component should be disabled (unselected) by default. Da user is free ta select dis component fo' installation, unless it be also HIDDEN.


DEPENDS lists tha components on which dis component depends. If dis component is selected, then each of tha components listed must also be selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da dependency shiznit is encoded within tha installa itself, so dat playas cannot install inconsistent setz of components.


GROUP names tha component crew of which dis component be a part. If not provided, tha component is ghon be a standalone component, not part of any component group. Component crews is busted lyrics bout wit tha cpack_add_component_group command, detailed below.


INSTALL_TYPES lists tha installation typez of which dis component be a part. When one of these installations types is selected, dis component will automatically be selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Installation types is busted lyrics bout wit tha cpack_add_install_type command, detailed below.


DOWNLOADED indicates dat dis component should be downloaded on\-the\-fly by tha installer, rather than packaged up in wit tha installa itself. For mo' shiznit, peep tha cpack_configure_downloadz command.


ARCHIVE_FILE serves up a name fo' tha archive file pimped by CPack ta be used fo' downloaded components, n' you can put dat on yo' toast. If not supplied, CPack will create a gangbangin' file wit some name based on CPACK_PACKAGE_FILE_NAME n' tha name of tha component. Right back up in yo muthafuckin ass. See cpack_configure_downloadz fo' mo' shiznit.

.TP
.B cpack_add_component_group
Describes a crew of related CPack installation components.

.nf
  cpack_add_component_group(groupname
                           [DISPLAY_NAME name]
                           [DESCRIPTION description]
                           [PARENT_GROUP parent]
                           [EXPANDED]
                           [BOLD_TITLE])
.fi




Da cpack_add_component_group raps on some crew of installation components, which is ghon be placed together within tha listin of options. Typically, component crews allow tha user ta select/deselect all of tha components within a single crew via a single group\-level option. I aint talkin' bout chicken n' gravy biatch. Use component crews ta reduce tha complexitizzle of installaz wit nuff options. groupname be a arbitrary name used ta identify tha crew up in tha GROUP argument of tha cpack_add_component command, which is used ta place a cold-ass lil component up in a group. Da name of tha crew must not conflict wit tha name of any component.


DISPLAY_NAME is tha displayed name of tha component group, used up in graphical installaz ta display tha component crew name. This value can be any string.


DESCRIPTION be a extended description of tha component group, used up in graphical installaz ta give tha user additionizzle shiznit bout tha components within dat group. Descriptions can span multiple lines rockin "\\n" as tha line separator. Shiiit, dis aint no joke. Typically, these descriptions should be no mo' than all dem lines long.


PARENT_GROUP, if supplied, names tha parent crew of dis group. Parent crews is used ta establish a hierarchy of groups, providin a arbitrary hierarchy of groups.


EXPANDED indicates that, by default, tha crew should show up as "expanded", so dat tha user immediately sees all of tha components within tha group. Otherwise, tha crew will initially show up as a single entry.


BOLD_TITLE indicates dat tha crew title should step tha fuck up in bold, ta booty-call tha userz attention ta tha group.

.TP
.B cpack_add_install_type
Add a freshly smoked up installation type containin a set of predefined component selections ta tha graphical installer.

.nf
  cpack_add_install_type(typename
                         [DISPLAY_NAME name])
.fi




Da cpack_add_install_type command identifies a set of preselected components dat represents a cold-ass lil common use case fo' a application. I aint talkin' bout chicken n' gravy biatch. For example, a "Developer" install type might include a application along wit its header n' library files, while a "End user" install type might just include tha applicationz executable. Each component identifies itself wit one or mo' install types via tha INSTALL_TYPES argument ta cpack_add_component.


DISPLAY_NAME is tha displayed name of tha install type, which will typically show up in a thugged-out drop\-down box within a graphical installa n' shit. This value can be any string.

.TP
.B cpack_configure_downloads
Configure CPack ta downlizzle selected components on\-the\-fly as part of tha installation process.

.nf
  cpack_configure_downloads(site
                            [UPLOAD_DIRECTORY dirname]
                            [ALL]
                            [ADD_REMOVE|NO_ADD_REMOVE])
.fi




Da cpack_configure_downloadz command configures installation\-time downloadz of selected components, n' you can put dat on yo' toast. For each downloadable component, CPack will create a archive containin tha contentz of dat component, which should be uploaded ta tha given crib. When tha user selects dat component fo' installation, tha installa will downlizzle n' extract tha component up in place. This feature is useful fo' bustin lil' small-ass installaz dat only downlizzle tha axed components, savin bandwidth fo' realz. Additionally, tha installaz is lil' small-ass enough dat they is ghon be installed as part of tha aiiight installation process, n' tha "Change" button up in Windows Add/Remove Programs control panel will allow one ta add or remove partz of tha application afta tha original gangsta installation. I aint talkin' bout chicken n' gravy biatch. On Windows, tha downloaded\-components functionalitizzle requires tha ZipDLL plug\-in fo' NSIS, available at:


.nf
  http://nsis.sourceforge.net/ZipDLL_plug\-in
.fi




On Mac OS X, installaz dat downlizzle components on\-the\-fly can only be built n' installed on system rockin Mac OS X 10.5 or later.


Da joint argument be a URL where tha archives fo' downloadable components will reside, e.g., http://www.cmake.org/files/2.6.1/installer/ All of tha archives produced by CPack should be uploaded ta dat location.


UPLOAD_DIRECTORY is tha local directory where CPack will create tha various archives fo' each of tha components, n' you can put dat on yo' toast. Da contentz of dis directory should be uploaded ta a location accessible by tha URL given up in tha joint argument. If omitted, CPack will use tha directory CPackUploadz inside tha CMake binary directory ta store tha generated archives.


Da ALL flag indicates dat all components be downloaded. Y'all KNOW dat shit, muthafucka! Otherwise, only dem components explicitly marked as DOWNLOADED or dat gotz a specified ARCHIVE_FILE is ghon be downloaded. Y'all KNOW dat shit, muthafucka! Additionally, tha ALL option implies ADD_REMOVE (unless NO_ADD_REMOVE is specified).


ADD_REMOVE indicates dat CPack should install a cold-ass lil copy of tha installa dat can be called from Windows' Add/Remove Programs dialog (via tha "Modify" button) ta chizzle tha set of installed components, n' you can put dat on yo' toast. NO_ADD_REMOVE turns off dis behavior. Shiiit, dis aint no joke. This option is ignored on Mac OS X.

.TP
.B break
Break from a enclosin foreach or while loop.

.nf
  break()
.fi

Breaks from a enclosin foreach loop or while loop

.TP
.B cmake_host_system_information
Query host system specific shiznit.

.nf
  cmake_host_system_information(RESULT <variable> QUERY <key> ...)
.fi

Queries system shiznit of tha host system on which cmake runs. One or mo' <key> can be provided ta select tha shiznit ta be queried. Y'all KNOW dat shit, muthafucka! Da list of queried joints is stored up in <variable>.


<key> can be one of tha followin joints:


.nf
  NUMBER_OF_LOGICAL_CORES   = Number of logical cores.
  NUMBER_OF_PHYSICAL_CORES  = Number of physical cores.
  HOSTNAME                  = Hostname.
  FQDN                      = Fully qualified domain name.
  TOTAL_VIRTUAL_MEMORY      = Total virtual memory up in megabytes.
  AVAILABLE_VIRTUAL_MEMORY  = Available virtual memory up in megabytes.
  TOTAL_PHYSICAL_MEMORY     = Total physical memory up in megabytes.
  AVAILABLE_PHYSICAL_MEMORY = Available physical memory up in megabytes.
.fi

.TP
.B cmake_minimum_required
Set tha minimum required version of cmake fo' a project.

.nf
  cmake_minimum_required(VERSION major[.minor[.patch[.tweak]]]
                         [FATAL_ERROR])
.fi

If tha current version of CMake is lower than dat required it will stop processin tha project n' report a error. Shiiit, dis aint no joke.  When a version higher than 2.4 is specified tha command implicitly invokes


.nf
  cmake_policy(VERSION major[.minor[.patch[.tweak]]])
.fi

which sets tha cmake policy version level ta tha version specified. Y'all KNOW dat shit, muthafucka!  When version 2.4 or lower is given tha command implicitly invokes


.nf
  cmake_policy(VERSION 2.4)
.fi

which enablez compatibilitizzle features fo' CMake 2.4 n' lower.


Da FATAL_ERROR option be accepted but ignored by CMake 2.6 n' higher n' shit.  It should be specified so CMake versions 2.4 n' lower fail wit a error instead of just a warning.

.TP
.B cmake_policy
Manage CMake Policy settings.

As CMake evolves it is sometimes necessary ta chizzle existin behavior up in order ta fix bugs or improve implementationz of existin features.  Da CMake Policy mechanizzle is designed ta help keep existin projects buildin as freshly smoked up versionz of CMake introduce chizzlez up in behavior. Shiiit, dis aint no joke.  Each freshly smoked up policy (behavioral chizzle) is given a identifier of tha form "CMP<NNNN>" where "<NNNN>" be a integer index.  Documentation associated wit each policy raps bout tha OLD n' NEW behavior n' tha reason tha policy was introduced. Y'all KNOW dat shit, muthafucka!  Projects may set each policy ta select tha desired behavior. Shiiit, dis aint no joke.  When CMake need ta know which behavior ta use it checks fo' a settin specified by tha project.  If no settin be available tha OLD behavior be assumed n' a warnin is produced requestin dat tha policy be set.


Da cmake_policy command is used ta set policies ta OLD or NEW behavior. Shiiit, dis aint no joke.  While settin policies individually is supported, we encourage projects ta set policies based on CMake versions.


.nf
  cmake_policy(VERSION major.minor[.patch[.tweak]])
.fi

Specify dat tha current CMake list file is freestyled fo' tha given version of CMake.  All policies introduced up in tha specified version or earlier is ghon be set ta use NEW behavior. Shiiit, dis aint no joke.  All policies introduced afta tha specified version is ghon be unset (unless variable CMAKE_POLICY_DEFAULT_CMP<NNNN> sets a thugged-out default).  This effectively requests behavior preferred az of a given CMake version n'  drops some lyrics ta newer CMake versions ta warn bout they freshly smoked up policies. Put ya muthafuckin choppers up if ya feel dis!  Da policy version specified must be at least 2.4 or tha command will report a error. Shiiit, dis aint no joke.  In order ta git compatibilitizzle features supportin versions earlier than 2.4 peep documentation of policy CMP0001.


.nf
  cmake_policy(SET CMP<NNNN> NEW)
  cmake_policy(SET CMP<NNNN> OLD)
.fi

Tell CMake ta use tha OLD or NEW behavior fo' a given policy.  Projects dependin on tha oldschool behavior of a given policy may silence a policy warnin by settin tha policy state ta OLD.  Alternatively one may fix tha project ta work wit tha freshly smoked up behavior n' set tha policy state ta NEW.


.nf
  cmake_policy(GET CMP<NNNN> <variable>)
.fi

Peep whether a given policy is set ta OLD or NEW behavior. Shiiit, dis aint no joke.  Da output variable value is ghon be "OLD" or "NEW" if tha policy is set, n' empty otherwise.


CMake keeps policy settings on a stack, so chizzlez made by tha cmake_policy command affect only tha top of tha stack.  A freshly smoked up entry on tha policy stack is managed automatically fo' each subdirectory ta protect its muthafathas n' siblings.  CMake also manages a freshly smoked up entry fo' scripts loaded by include() n' find_package() commandz except when invoked wit tha NO_POLICY_SCOPE option (see also policy CMP0011).  Da cmake_policy command serves up a intercourse ta manage custom entries on tha policy stack:


.nf
  cmake_policy(PUSH)
  cmake_policy(POP)
.fi

Each PUSH must gotz a matchin POP ta erase any chizzles.  This is useful ta make temporary chizzlez ta policy settings.


Functions n' macros record policy settings when they is pimped n' use tha pre\-record policies when they is invoked. Y'all KNOW dat shit, muthafucka!  If tha function or macro implementation sets policies, tha chizzlez automatically propagate up all up in callaz until they reach tha closest nested policy stack entry.

.TP
.B configure_file
Copy a gangbangin' file ta another location n' modify its contents.

.nf
  configure_file(<input> <output>
                 [COPYONLY] [ESCAPE_QUOTES] [@ONLY] 
                 [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ])
.fi

Copies a gangbangin' file <input> ta file <output> n' substitutes variable joints referenced up in tha file content.  If <input> be a relatizzle path it is evaluated wit respect ta tha current source directory.  Da <input> must be a gangbangin' file, not a gangbangin' finger-lickin' directory.  If <output> be a relatizzle path it is evaluated wit respect ta tha current binary directory.  If <output> names a existin directory tha input file is placed up in dat directory wit its original gangsta name.  


If tha <input> file is modified tha build system will re\-run CMake ta re\-configure tha file n' generate tha build system again.


This command replaces any variablez up in tha input file referenced as ${VAR} or @VAR@ wit they joints as determined by CMake.  If a variable aint defined, it is ghon be replaced wit nothing.  If COPYONLY is specified, then no variable expansion will take place.  If ESCAPE_QUOTES is specified then any substituted quotes is ghon be C\-style escaped. Y'all KNOW dat shit, muthafucka!  Da file is ghon be configured wit tha current jointz of CMake variables. If @ONLY is specified, only variablez of tha form @VAR@ is ghon be replaced n' ${VAR} is ghon be ignored. Y'all KNOW dat shit, muthafucka!  This is useful fo' configurin scripts dat use ${VAR}.


Input file linez of tha form "#cmakedefine VAR ..." is ghon be replaced wit either "#define VAR ..." or "/* #undef VAR */" dependin on whether VAR is set up in CMake ta any value not considered a gangbangin' false constant by tha if() command. Y'all KNOW dat shit, muthafucka! (Content of "...", if any, is processed as above.) Input file linez of tha form "#cmakedefine01 VAR" is ghon be replaced wit either "#define VAR 1" or "#define VAR 0" similarly.


With NEWLINE_STYLE tha line endin could be adjusted: 


.nf
    'UNIX' or 'LF' fo' \\n, 'DOS', 'WIN32' or 'CRLF' fo' \\r\\n.
.fi

COPYONLY must not be used wit NEWLINE_STYLE.


.TP
.B else
Starts tha else portion of a if block.

.nf
  else(expression)
.fi

See tha if command.

.TP
.B elseif
Starts tha elseif portion of a if block.

.nf
  elseif(expression)
.fi

See tha if command.

.TP
.B endforeach
Endz a list of commandz up in a FOREACH block.

.nf
  endforeach(expression)
.fi

See tha FOREACH command.

.TP
.B endfunction
Endz a list of commandz up in a gangbangin' function block.

.nf
  endfunction(expression)
.fi

See tha function command.

.TP
.B endif
Endz a list of commandz up in a if block.

.nf
  endif(expression)
.fi

See tha if command.

.TP
.B endmacro
Endz a list of commandz up in a macro block.

.nf
  endmacro(expression)
.fi

See tha macro command.

.TP
.B endwhile
Endz a list of commandz up in a while block.

.nf
  endwhile(expression)
.fi

See tha while command.

.TP
.B execute_process
Execute one or mo' lil pimp processes.

.nf
  execute_process(COMMAND <cmd1> [args1...]]
                  [COMMAND <cmd2> [args2...] [...]]
                  [WORKING_DIRECTORY <directory>]
                  [TIMEOUT <seconds>]
                  [RESULT_VARIABLE <variable>]
                  [OUTPUT_VARIABLE <variable>]
                  [ERROR_VARIABLE <variable>]
                  [INPUT_FILE <file>]
                  [OUTPUT_FILE <file>]
                  [ERROR_FILE <file>]
                  [OUTPUT_QUIET]
                  [ERROR_QUIET]
                  [OUTPUT_STRIP_TRAILING_WHITESPACE]
                  [ERROR_STRIP_TRAILING_WHITESPACE])
.fi

Runs tha given sequence of one or mo' commandz wit tha standard output of each process piped ta tha standard input of tha next.  A single standard error pipe is used fo' all processes.  If WORKING_DIRECTORY is given tha named directory is ghon be set as tha current hustlin directory of tha lil pimp processes.  If TIMEOUT is given tha lil pimp processes is ghon be terminated if they do not finish up in tha specified number of secondz (fractions is allowed).  If RESULT_VARIABLE is given tha variable is ghon be set ta contain tha result of hustlin tha processes.  This is ghon be a integer return code from tha last lil pimp or a strang describin a error condition. I aint talkin' bout chicken n' gravy biatch.  If OUTPUT_VARIABLE or ERROR_VARIABLE is given tha variable named is ghon be set wit tha contentz of tha standard output n' standard error pipes respectively.  If tha same variable is named fo' both pipes they output is ghon be merged up in tha order produced. Y'all KNOW dat shit, muthafucka!  If INPUT_FILE, OUTPUT_FILE, or ERROR_FILE is given tha file named is ghon be attached ta tha standard input of tha straight-up original gangsta process, standard output of tha last process, or standard error of all processes respectively.  If OUTPUT_QUIET or ERROR_QUIET is given then tha standard output or standard error thangs up in dis biatch is ghon be on tha fuckin' down-lowly ignored. Y'all KNOW dat shit, muthafucka!  If mo' than one OUTPUT_* or ERROR_* option is given fo' tha same pipe tha precedence aint specified. Y'all KNOW dat shit, muthafucka!  If no OUTPUT_* or ERROR_* options is given tha output is ghon be shared wit tha correspondin pipez of tha CMake process itself.


Da execute_process command be a newer mo' bangin version of exec_program yo, but tha oldschool command has been kept fo' compatibility.

.TP
.B file
File manipulation command.

.nf
  file(WRITE filename "message ta write"... )
  file(APPEND filename "message ta write"... )
  file(READ filename variable [LIMIT numBytes] [OFFSET offset] [HEX])
  file(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512> filename variable)
  file(STRINGS filename variable [LIMIT_COUNT num]
       [LIMIT_INPUT numBytes] [LIMIT_OUTPUT numBytes]
       [LENGTH_MINIMUM numBytes] [LENGTH_MAXIMUM numBytes]
       [NEWLINE_CONSUME] [REGEX regex]
       [NO_HEX_CONVERSION])
  file(GLOB variable [RELATIVE path] [globbin expressions]...)
  file(GLOB_RECURSE variable [RELATIVE path] 
       [FOLLOW_SYMLINKS] [globbin expressions]...)
  file(RENAME <oldname> <newname>)
  file(REMOVE [file1 ...])
  file(REMOVE_RECURSE [file1 ...])
  file(MAKE_DIRECTORY [directory1 directory2 ...])
  file(RELATIVE_PATH variable directory file)
  file(TO_CMAKE_PATH path result)
  file(TO_NATIVE_PATH path result)
  file(DOWNLOAD url file [INACTIVITY_TIMEOUT timeout]
       [TIMEOUT timeout] [STATUS status] [LOG log] [SHOW_PROGRESS]
       [EXPECTED_HASH ALGO=value] [EXPECTED_MD5 sum]
       [TLS_VERIFY on|off] [TLS_CAINFO file])
  file(UPLOAD filename url [INACTIVITY_TIMEOUT timeout]
       [TIMEOUT timeout] [STATUS status] [LOG log] [SHOW_PROGRESS])
  file(TIMESTAMP filename variable [<format string>] [UTC])
  file(GENERATE OUTPUT output_file
       <INPUT input_file|CONTENT input_content>
       [CONDITION expression])
.fi

WRITE will write a message tha fuck into a gangbangin' file called 'filename'. Well shiiiit, it overwrites tha file if it already exists, n' creates tha file if it do not exist. (If tha file be a funky-ass build input, use configure_file ta update tha file only when its content chizzles.)


APPEND will write a message tha fuck into a gangbangin' file same as WRITE, except it will append it ta tha end of tha file


READ will read tha content of a gangbangin' file n' store it tha fuck into tha variable. Well shiiiit, it will start all up in tha given offset n' read up ta numBytes. If tha argument HEX is given, tha binary data is ghon be converted ta hexadecimal representation n' dis is ghon be stored up in tha variable.


MD5, SHA1, SHA224, SHA256, SHA384, n' SHA512 will compute a cold-ass lil cryptographic hash of tha content of a gangbangin' file.


STRINGS will parse a list of ASCII strings from a gangbangin' file n' store it up in a variable. Binary data up in tha file is ignored. Y'all KNOW dat shit, muthafucka! Carriage return (CR) charactas is ignored. Y'all KNOW dat shit, muthafucka! Well shiiiit, it works also fo' Intel Hex n' Motorola S\-record files, which is automatically converted ta binary format when readin em. Disable dis rockin NO_HEX_CONVERSION.


LIMIT_COUNT sets tha maximum number of strings ta return, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. LIMIT_INPUT sets tha maximum number of bytes ta read from tha input file. LIMIT_OUTPUT sets tha maximum number of bytes ta store up in tha output variable. LENGTH_MINIMUM sets tha minimum length of a strang ta return, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Shorta strings is ignored. Y'all KNOW dat shit, muthafucka! LENGTH_MAXIMUM sets tha maximum length of a strang ta return, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch.  Longer strings is split tha fuck into strings no longer than tha maximum length. NEWLINE_CONSUME allows newlines ta be included up in strings instead of terminatin em.


REGEX specifies a regular expression dat a strang must match ta be returned. Y'all KNOW dat shit, muthafucka! Typical usage 


.nf
  file(STRINGS myfile.txt myfile)
.fi

stores a list up in tha variable "myfile" up in which each item be a line from tha input file.


GLOB will generate a list of all filez dat match tha globbin expressions n' store it tha fuck into tha variable. Globbin expressions is similar ta regular expressions yo, but much simpla n' shit. If RELATIVE flag is specified fo' a expression, tha thangs up in dis biatch is ghon be returned as a relatizzle path ta tha given path.  (Us dudes do not recommend rockin GLOB ta collect a list of source filez from yo' source tree.  If no CMakeLists.txt file chizzlez when a source be added or removed then tha generated build system cannot know when ta ask CMake ta regenerate.)


Examplez of globbin expressions include:


.nf
   *.cxx      \- match all filez wit extension cxx
   *.vt?      \- match all filez wit extension vta,...,vtz
   f[3\-5].txt \- match filez f3.txt, f4.txt, f5.txt
.fi

GLOB_RECURSE will generate a list similar ta tha regular GLOB, except it will traverse all tha subdirectoriez of tha matched directory n' match tha files. Right back up in yo muthafuckin ass. Subdirectories dat is symlinks is only traversed if FOLLOW_SYMLINKS is given or cmake policy CMP0009 aint set ta NEW. Right back up in yo muthafuckin ass. See cmake \-\-help\-policy CMP0009 fo' mo' shiznit.


Examplez of recursive globbin include:


.nf
   /dir/*.py  \- match all python filez up in /dir n' subdirectories
.fi

MAKE_DIRECTORY will create tha given directories, also if they parent directories don't exist yet


RENAME moves a gangbangin' file or directory within a gangbangin' filesystem, replacin tha destination atomically.


REMOVE will remove tha given files, also up in subdirectories


REMOVE_RECURSE will remove tha given filez n' directories, also non\-empty directories


RELATIVE_PATH will determine relatizzle path from directory ta tha given file.


TO_CMAKE_PATH will convert path tha fuck into a cold-ass lil cmake steez path wit unix /.  Da input can be a single path or a system path like "$ENV{PATH}".  Note tha double quotes round tha ENV call TO_CMAKE_PATH only takes  one argument. This command will also convert tha natizzle list delimitas fo' a list of paths like tha PATH environment variable.


TO_NATIVE_PATH works just like TO_CMAKE_PATH yo, but will convert from  a cold-ass lil cmake steez path tha fuck into tha natizzle path steez \\ fo' windows n' / fo' UNIX.


DOWNLOAD will downlizzle tha given URL ta tha given file. If LOG var is specified a log of tha downlizzle is ghon be put up in var. Shiiit, dis aint no joke. If STATUS var is specified tha statuz of tha operation is ghon be put up in var. Shiiit, dis aint no joke. Da status is returned up in a list of length 2. Da first element is tha numeric return value fo' tha operation, n' tha second element be a strang value fo' tha error fo' realz. A 0 numeric error means no error up in tha operation. I aint talkin' bout chicken n' gravy biatch. If TIMEOUT time is specified, tha operation will timeout afta time seconds, time should be specified as a integer n' shit. Da INACTIVITY_TIMEOUT specifies a integer number of secondz of inactivitizzle afta which tha operation should terminate. If EXPECTED_HASH ALGO=value is specified, tha operation will verify dat tha downloaded filez actual hash matches tha expected value, where ALGO is one of MD5, SHA1, SHA224, SHA256, SHA384, or SHA512.  If it do not match, tha operation fails wit a error. Shiiit, dis aint no joke. ("EXPECTED_MD5 sum" is short\-hand fo' "EXPECTED_HASH MD5=sum".) If SHOW_PROGRESS is specified, progress shiznit is ghon be printed as status lyrics until tha operation is complete. For https URLs CMake must be built wit OpenSSL.  TLS/SSL certificates is not checked by default.  Set TLS_VERIFY ta ON ta check certificates and/or use EXPECTED_HASH ta verify downloaded content.  Set TLS_CAINFO ta specify a cold-ass lil custom Certificate Authoritizzle file.  If either TLS option aint given CMake will check variablez CMAKE_TLS_VERIFY n' CMAKE_TLS_CAINFO, respectively.


UPLOAD will upload tha given file ta tha given URL. If LOG var is specified a log of tha upload is ghon be put up in var. Shiiit, dis aint no joke. If STATUS var is specified tha statuz of tha operation is ghon be put up in var. Shiiit, dis aint no joke. Da status is returned up in a list of length 2. Da first element is tha numeric return value fo' tha operation, n' tha second element be a strang value fo' tha error fo' realz. A 0 numeric error means no error up in tha operation. I aint talkin' bout chicken n' gravy biatch. If TIMEOUT time is specified, tha operation will timeout afta time seconds, time should be specified as a integer n' shit. Da INACTIVITY_TIMEOUT specifies a integer number of secondz of inactivitizzle afta which tha operation should terminate. If SHOW_PROGRESS is specified, progress shiznit is ghon be printed as status lyrics until tha operation is complete.


TIMESTAMP will write a strang representation of tha modification time of filename ta variable.


Should tha command be unable ta obtain a timestamp variable is ghon be set ta tha empty strang "".


See documentation of tha strang TIMESTAMP sub\-command fo' mo' details.


Da file() command also serves up COPY n' INSTALL signatures:


.nf
  file(<COPY|INSTALL> files... DESTINATION <dir>
       [FILE_PERMISSIONS permissions...]
       [DIRECTORY_PERMISSIONS permissions...]
       [NO_SOURCE_PERMISSIONS] [USE_SOURCE_PERMISSIONS]
       [FILES_MATCHING]
       [[PATTERN <pattern> | REGEX <regex>]
        [EXCLUDE] [PERMISSIONS permissions...]] [...])
.fi

Da COPY signature copies files, directories, n' symlinks ta a thugged-out destination folda n' shit.  Relatizzle input paths is evaluated wit respect ta tha current source directory, n' a relatizzle destination is evaluated wit respect ta tha current build directory.  Copyin preserves input file timestamps, n' optimizes up a gangbangin' file if it exists all up in tha destination wit tha same timestamp.  Copyin preserves input permissions unless explicit permissions or NO_SOURCE_PERMISSIONS is given (default is USE_SOURCE_PERMISSIONS).  See tha install(DIRECTORY) command fo' documentation of permissions, PATTERN, REGEX, n' EXCLUDE options.  


Da INSTALL signature differs slightly from COPY: it prints status lyrics, n' NO_SOURCE_PERMISSIONS is default.  Installation scripts generated by tha install() command use dis signature (with some undocumented options fo' internal use).


GENERATE will write a <output_file> wit content from a <input_file>, or from <input_content>.  Da output is generated conditionally based on tha content of tha <condition>.  Da file is freestyled at CMake generate\-time n' tha input may contain generator expressions.  Da <condition>, <output_file> n' <input_file> may also contain generator expressions.  Da <condition> must evaluate ta either '0' or '1'.  Da <output_file> must evaluate ta a unique name among all configurations n' among all invocationz of file(GENERATE).

.TP
.B find_file
Find tha full path ta a gangbangin' file.

.nf
   find_file(<VAR> name1 [path1 path2 ...])
.fi

This is tha short\-hand signature fo' tha command dat is sufficient up in nuff cases.  It be tha same as find_file(<VAR> name1 [PATHS path1 path2 ...])


.nf
   find_file(
             <VAR>
             name | NAMES name1 [name2 ...]
             [HINTS path1 [path2 ... ENV var]]
             [PATHS path1 [path2 ... ENV var]]
             [PATH_SUFFIXES suffix1 [suffix2 ...]]
             [DOC "cache documentation string"]
             [NO_DEFAULT_PATH]
             [NO_CMAKE_ENVIRONMENT_PATH]
             [NO_CMAKE_PATH]
             [NO_SYSTEM_ENVIRONMENT_PATH]
             [NO_CMAKE_SYSTEM_PATH]
             [CMAKE_FIND_ROOT_PATH_BOTH |
              ONLY_CMAKE_FIND_ROOT_PATH |
              NO_CMAKE_FIND_ROOT_PATH]
            )
.fi

This command is used ta find a gangbangin' full path ta named file fo' realz. A cache entry named by <VAR> is pimped ta store tha result of dis command. Y'all KNOW dat shit, muthafucka!  If tha full path ta a gangbangin' file is found tha result is stored up in tha variable n' tha search aint gonna be repeated unless tha variable is cleared. Y'all KNOW dat shit, muthafucka!  If not a god damn thang is found, tha result is ghon be <VAR>\-NOTFOUND, n' tha search is ghon be attempted again n' again n' again tha next time find_file is invoked wit tha same variable.  Da name of tha full path ta a gangbangin' file dat is searched fo' is specified by tha names listed afta tha NAMES argument.   Additionizzle search locations can be specified afta tha PATHS argument.  If ENV var is found up in tha HINTS or PATHS section tha environment variable var is ghon be read n' converted from a system environment variable ta a cold-ass lil cmake steez list of paths.  For example ENV PATH would be a way ta list tha system path variable. Da argument afta DOC is ghon be used fo' tha documentation strang up in tha cache.  PATH_SUFFIXES specifies additionizzle subdirectories ta check below each search path.


If NO_DEFAULT_PATH is specified, then no additionizzle paths is added ta tha search. If NO_DEFAULT_PATH aint specified, tha search process be as bigs up:


1. Right back up in yo muthafuckin ass. Search paths specified up in cmake\-specific cache variables.  These is intended ta be used on tha command line wit a \-DVAR=value.  This can be skipped if NO_CMAKE_PATH is passed.


.nf
   <prefix>/include/<arch> if CMAKE_LIBRARY_ARCHITECTURE is set, and
   <prefix>/include fo' each <prefix> up in CMAKE_PREFIX_PATH
   CMAKE_INCLUDE_PATH
   CMAKE_FRAMEWORK_PATH
.fi

2. Right back up in yo muthafuckin ass. Search paths specified up in cmake\-specific environment variables.  These is intended ta be set up in tha userz shell configuration. I aint talkin' bout chicken n' gravy biatch.  This can be skipped if NO_CMAKE_ENVIRONMENT_PATH is passed.


.nf
   <prefix>/include/<arch> if CMAKE_LIBRARY_ARCHITECTURE is set, and
   <prefix>/include fo' each <prefix> up in CMAKE_PREFIX_PATH
   CMAKE_INCLUDE_PATH
   CMAKE_FRAMEWORK_PATH
.fi

3. Right back up in yo muthafuckin ass. Search tha paths specified by tha HINTS option. I aint talkin' bout chicken n' gravy biatch.  These should be paths computed by system introspection, like fuckin a hint provided by tha location of another item already found. Y'all KNOW dat shit, muthafucka!  Hard\-coded guesses should be specified wit tha PATHS option.


4. Right back up in yo muthafuckin ass. Search tha standard system environment variables. This can be skipped if NO_SYSTEM_ENVIRONMENT_PATH be a argument.


.nf
   PATH
   INCLUDE
.fi

5. Right back up in yo muthafuckin ass. Search cmake variablez defined up in tha Platform filez fo' tha current system.  This can be skipped if NO_CMAKE_SYSTEM_PATH is passed.


.nf
   <prefix>/include/<arch> if CMAKE_LIBRARY_ARCHITECTURE is set, and
   <prefix>/include fo' each <prefix> up in CMAKE_SYSTEM_PREFIX_PATH
   CMAKE_SYSTEM_INCLUDE_PATH
   CMAKE_SYSTEM_FRAMEWORK_PATH
.fi

6. Right back up in yo muthafuckin ass. Search tha paths specified by tha PATHS option or up in tha short\-hand version of tha command. Y'all KNOW dat shit, muthafucka!  These is typically hard\-coded guesses.


On Darwin or systems supportin OS X Frameworks, tha cmake variable    CMAKE_FIND_FRAMEWORK can be set ta empty or one of tha following:


.nf
   "FIRST"  \- Try ta find frameworks before standard
              libraries or headers. This is tha default on Darwin.
   "LAST"   \- Try ta find frameworks afta standard
              libraries or headers.
   "ONLY"   \- Only try ta find frameworks.
   "NEVER" \- Never try ta find frameworks.
.fi

On Darwin or systems supportin OS X Application Bundles, tha cmake variable CMAKE_FIND_APPBUNDLE can be set ta empty or one of tha following:


.nf
   "FIRST"  \- Try ta find application bundlez before standard
              programs. This is tha default on Darwin.
   "LAST"   \- Try ta find application bundlez afta standard
              programs.
   "ONLY"   \- Only try ta find application bundles.
   "NEVER" \- Never try ta find application bundles.
.fi

Da CMake variable CMAKE_FIND_ROOT_PATH specifies one or mo' directories ta be prepended ta all other search directories. Put ya muthafuckin choppers up if ya feel dis! This effectively "re\-roots" tha entire search under given locations. By default it is empty. Well shiiiit, it is especially useful when cross\-compilin ta point ta tha root directory of tha target environment n' CMake will search there like a muthafucka. By default at first tha directories listed up in CMAKE_FIND_ROOT_PATH n' then tha non\-rooted directories is ghon be searched. Y'all KNOW dat shit, muthafucka! Da default behavior can be adjusted by settin CMAKE_FIND_ROOT_PATH_MODE_INCLUDE.  This behavior can be manually overridden on a per\-call basis. By rockin CMAKE_FIND_ROOT_PATH_BOTH tha search order is ghon be as busted lyrics bout above. If NO_CMAKE_FIND_ROOT_PATH is used then CMAKE_FIND_ROOT_PATH aint gonna be used. Y'all KNOW dat shit, muthafucka! If ONLY_CMAKE_FIND_ROOT_PATH is used then only tha re\-rooted directories is ghon be searched.


Da default search order is designed ta be most\-specific ta least\-specific fo' common use cases.  Projects may override tha order by simply callin tha command multiple times n' rockin tha NO_* options:


.nf
   find_file(<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)
   find_file(<VAR> NAMES name)
.fi

Once one of tha calls succeedz tha result variable is ghon be set n' stored up in tha cache so dat no call will search again.

.TP
.B find_library
Find a library.

.nf
   find_library(<VAR> name1 [path1 path2 ...])
.fi

This is tha short\-hand signature fo' tha command dat is sufficient up in nuff cases.  It be tha same as find_library(<VAR> name1 [PATHS path1 path2 ...])


.nf
   find_library(
             <VAR>
             name | NAMES name1 [name2 ...] [NAMES_PER_DIR]
             [HINTS path1 [path2 ... ENV var]]
             [PATHS path1 [path2 ... ENV var]]
             [PATH_SUFFIXES suffix1 [suffix2 ...]]
             [DOC "cache documentation string"]
             [NO_DEFAULT_PATH]
             [NO_CMAKE_ENVIRONMENT_PATH]
             [NO_CMAKE_PATH]
             [NO_SYSTEM_ENVIRONMENT_PATH]
             [NO_CMAKE_SYSTEM_PATH]
             [CMAKE_FIND_ROOT_PATH_BOTH |
              ONLY_CMAKE_FIND_ROOT_PATH |
              NO_CMAKE_FIND_ROOT_PATH]
            )
.fi

This command is used ta find a library fo' realz. A cache entry named by <VAR> is pimped ta store tha result of dis command. Y'all KNOW dat shit, muthafucka!  If tha library is found tha result is stored up in tha variable n' tha search aint gonna be repeated unless tha variable is cleared. Y'all KNOW dat shit, muthafucka!  If not a god damn thang is found, tha result is ghon be <VAR>\-NOTFOUND, n' tha search is ghon be attempted again n' again n' again tha next time find_library is invoked wit tha same variable.  Da name of tha library dat is searched fo' is specified by tha names listed afta tha NAMES argument.   Additionizzle search locations can be specified afta tha PATHS argument.  If ENV var is found up in tha HINTS or PATHS section tha environment variable var is ghon be read n' converted from a system environment variable ta a cold-ass lil cmake steez list of paths.  For example ENV PATH would be a way ta list tha system path variable. Da argument afta DOC is ghon be used fo' tha documentation strang up in tha cache.  PATH_SUFFIXES specifies additionizzle subdirectories ta check below each search path.


If NO_DEFAULT_PATH is specified, then no additionizzle paths is added ta tha search. If NO_DEFAULT_PATH aint specified, tha search process be as bigs up:


1. Right back up in yo muthafuckin ass. Search paths specified up in cmake\-specific cache variables.  These is intended ta be used on tha command line wit a \-DVAR=value.  This can be skipped if NO_CMAKE_PATH is passed.


.nf
   <prefix>/lib/<arch> if CMAKE_LIBRARY_ARCHITECTURE is set, and
   <prefix>/lib fo' each <prefix> up in CMAKE_PREFIX_PATH
   CMAKE_LIBRARY_PATH
   CMAKE_FRAMEWORK_PATH
.fi

2. Right back up in yo muthafuckin ass. Search paths specified up in cmake\-specific environment variables.  These is intended ta be set up in tha userz shell configuration. I aint talkin' bout chicken n' gravy biatch.  This can be skipped if NO_CMAKE_ENVIRONMENT_PATH is passed.


.nf
   <prefix>/lib/<arch> if CMAKE_LIBRARY_ARCHITECTURE is set, and
   <prefix>/lib fo' each <prefix> up in CMAKE_PREFIX_PATH
   CMAKE_LIBRARY_PATH
   CMAKE_FRAMEWORK_PATH
.fi

3. Right back up in yo muthafuckin ass. Search tha paths specified by tha HINTS option. I aint talkin' bout chicken n' gravy biatch.  These should be paths computed by system introspection, like fuckin a hint provided by tha location of another item already found. Y'all KNOW dat shit, muthafucka!  Hard\-coded guesses should be specified wit tha PATHS option.


4. Right back up in yo muthafuckin ass. Search tha standard system environment variables. This can be skipped if NO_SYSTEM_ENVIRONMENT_PATH be a argument.


.nf
   PATH
   LIB
.fi

5. Right back up in yo muthafuckin ass. Search cmake variablez defined up in tha Platform filez fo' tha current system.  This can be skipped if NO_CMAKE_SYSTEM_PATH is passed.


.nf
   <prefix>/lib/<arch> if CMAKE_LIBRARY_ARCHITECTURE is set, and
   <prefix>/lib fo' each <prefix> up in CMAKE_SYSTEM_PREFIX_PATH
   CMAKE_SYSTEM_LIBRARY_PATH
   CMAKE_SYSTEM_FRAMEWORK_PATH
.fi

6. Right back up in yo muthafuckin ass. Search tha paths specified by tha PATHS option or up in tha short\-hand version of tha command. Y'all KNOW dat shit, muthafucka!  These is typically hard\-coded guesses.


On Darwin or systems supportin OS X Frameworks, tha cmake variable    CMAKE_FIND_FRAMEWORK can be set ta empty or one of tha following:


.nf
   "FIRST"  \- Try ta find frameworks before standard
              libraries or headers. This is tha default on Darwin.
   "LAST"   \- Try ta find frameworks afta standard
              libraries or headers.
   "ONLY"   \- Only try ta find frameworks.
   "NEVER" \- Never try ta find frameworks.
.fi

On Darwin or systems supportin OS X Application Bundles, tha cmake variable CMAKE_FIND_APPBUNDLE can be set ta empty or one of tha following:


.nf
   "FIRST"  \- Try ta find application bundlez before standard
              programs. This is tha default on Darwin.
   "LAST"   \- Try ta find application bundlez afta standard
              programs.
   "ONLY"   \- Only try ta find application bundles.
   "NEVER" \- Never try ta find application bundles.
.fi

Da CMake variable CMAKE_FIND_ROOT_PATH specifies one or mo' directories ta be prepended ta all other search directories. Put ya muthafuckin choppers up if ya feel dis! This effectively "re\-roots" tha entire search under given locations. By default it is empty. Well shiiiit, it is especially useful when cross\-compilin ta point ta tha root directory of tha target environment n' CMake will search there like a muthafucka. By default at first tha directories listed up in CMAKE_FIND_ROOT_PATH n' then tha non\-rooted directories is ghon be searched. Y'all KNOW dat shit, muthafucka! Da default behavior can be adjusted by settin CMAKE_FIND_ROOT_PATH_MODE_LIBRARY.  This behavior can be manually overridden on a per\-call basis. By rockin CMAKE_FIND_ROOT_PATH_BOTH tha search order is ghon be as busted lyrics bout above. If NO_CMAKE_FIND_ROOT_PATH is used then CMAKE_FIND_ROOT_PATH aint gonna be used. Y'all KNOW dat shit, muthafucka! If ONLY_CMAKE_FIND_ROOT_PATH is used then only tha re\-rooted directories is ghon be searched.


Da default search order is designed ta be most\-specific ta least\-specific fo' common use cases.  Projects may override tha order by simply callin tha command multiple times n' rockin tha NO_* options:


.nf
   find_library(<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)
   find_library(<VAR> NAMES name)
.fi

Once one of tha calls succeedz tha result variable is ghon be set n' stored up in tha cache so dat no call will search again.


When mo' than one value is given ta tha NAMES option dis command by default will consider one name at a time n' search every last muthafuckin directory fo' dat shit.  Da NAMES_PER_DIR option  drops some lyrics ta dis command ta consider one directory at a time n' search fo' all names up in dat shit.


If tha library found be a gangbangin' framework, then VAR is ghon be set ta tha full path ta tha framework <fullPath>/A.framework. When a gangbangin' full path ta a gangbangin' framework is used as a library, CMake will bust a \-framework A, n' a \-F<fullPath> ta link tha framework ta tha target.


If tha global property FIND_LIBRARY_USE_LIB64_PATHS is set all search paths is ghon be tested as normal, wit "64/" appended, n' wit all matchez of "lib/" replaced wit "lib64/". This property be automatically set fo' tha platforms dat is known ta need it if at least one of tha languages supported by tha PROJECT command is enabled.

.TP
.B find_package
Load settings fo' a external project.

.nf
  find_package(<package> [version] [EXACT] [QUIET] [MODULE]
               [REQUIRED] [[COMPONENTS] [components...]]
               [OPTIONAL_COMPONENTS components...]
               [NO_POLICY_SCOPE])
.fi

Findz n' loadz settings from a external project.  <package>_FOUND is ghon be set ta indicate whether tha package was found. Y'all KNOW dat shit, muthafucka!  When tha package is found package\-specific shiznit is provided all up in variablez n' imported targets documented by tha package itself.  Da QUIET option disablez lyrics if tha package cannot be found. Y'all KNOW dat shit, muthafucka!  Da MODULE option disablez tha second signature documented below.  Da REQUIRED option stops processin wit a error message if tha package cannot be found.


A package\-specific list of required components may be listed afta tha COMPONENTS option (or afta tha REQUIRED option if present).  Additionizzle optionizzle components may be listed afta OPTIONAL_COMPONENTS.  Available components n' they influence on whether a package is considered ta be found is defined by tha target package.


Da [version] argument requests a version wit which tha package found should be compatible (format is major[.minor[.patch[.tweak]]]).  Da EXACT option requests dat tha version be matched exactly.  If no [version] and/or component list is given ta a recursive invocation inside a gangbangin' find\-module, tha correspondin arguments is forwarded automatically from tha outa call (includin tha EXACT flag fo' [version]).  Version support is currently provided only on a package\-by\-package basis (details below).


User code should generally look fo' packages rockin tha above simple signature.  Da remainder of dis command documentation specifies tha full command signature n' detailz of tha search process.  Project maintainers wishin ta provide a package ta be found by dis command is encouraged ta read on.


Da command has two modes by which it searches fo' packages: "Module" mode n' "Config" mode.  Module mode be available when tha command is invoked wit tha above reduced signature.  CMake searches fo' a gangbangin' file called "Find<package>.cmake" up in tha CMAKE_MODULE_PATH followed by tha CMake installation. I aint talkin' bout chicken n' gravy biatch.  If tha file is found, it is read n' processed by CMake.  It be responsible fo' findin tha package, checkin tha version, n' producin any needed lyrics.  Many find\-modulez provide limited or no support fo' versioning; check tha module documentation. I aint talkin' bout chicken n' gravy biatch.  If no module is found n' tha MODULE option aint given tha command proceedz ta Config mode.


Da complete Config mode command signature is:


.nf
  find_package(<package> [version] [EXACT] [QUIET]
               [REQUIRED] [[COMPONENTS] [components...]]
               [CONFIG|NO_MODULE]
               [NO_POLICY_SCOPE]
               [NAMES name1 [name2 ...]]
               [CONFIGS config1 [config2 ...]]
               [HINTS path1 [path2 ... ]]
               [PATHS path1 [path2 ... ]]
               [PATH_SUFFIXES suffix1 [suffix2 ...]]
               [NO_DEFAULT_PATH]
               [NO_CMAKE_ENVIRONMENT_PATH]
               [NO_CMAKE_PATH]
               [NO_SYSTEM_ENVIRONMENT_PATH]
               [NO_CMAKE_PACKAGE_REGISTRY]
               [NO_CMAKE_BUILDS_PATH]
               [NO_CMAKE_SYSTEM_PATH]
               [NO_CMAKE_SYSTEM_PACKAGE_REGISTRY]
               [CMAKE_FIND_ROOT_PATH_BOTH |
                ONLY_CMAKE_FIND_ROOT_PATH |
                NO_CMAKE_FIND_ROOT_PATH])
.fi

Da CONFIG option may be used ta skip Module mode explicitly n' switch ta Config mode.  It be synonymous ta rockin NO_MODULE.  Config mode be also implied by use of options not specified up in tha reduced signature.  


Config mode attempts ta locate a cold-ass lil configuration file provided by tha package ta be found. Y'all KNOW dat shit, muthafucka!  A cache entry called <package>_DIR is pimped ta hold tha directory containin tha file.  By default tha command searches fo' a package wit tha name <package>.  If tha NAMES option is given tha names followin it is used instead of <package>.  Da command searches fo' a gangbangin' file called "<name>Config.cmake" or "<lower\-case\-name>\-config.cmake" fo' each name specified. Y'all KNOW dat shit, muthafucka!  A replacement set of possible configuration file names may be given rockin tha CONFIGS option. I aint talkin' bout chicken n' gravy biatch.  Da search procedure is specified below.  Once found, tha configuration file is read n' processed by CMake.  Since tha file is provided by tha package it already knows tha location of package contents, n' you can put dat on yo' toast.  Da full path ta tha configuration file is stored up in tha cmake variable <package>_CONFIG.


All configuration filez which done been considered by CMake while searchin fo' a installation of tha package wit a appropriate version is stored up in tha cmake variable <package>_CONSIDERED_CONFIGS, tha associated versions up in <package>_CONSIDERED_VERSIONS. 


If tha package configuration file cannot be found CMake will generate a error describin tha problem unless tha QUIET argument is specified. Y'all KNOW dat shit, muthafucka!  If REQUIRED is specified n' tha package aint found a gangbangin' fatal error is generated n' tha configure step stops executing.  If <package>_DIR has been set ta a gangbangin' finger-lickin' directory not containin a cold-ass lil configuration file CMake will ignore it n' search from scratch.


When tha [version] argument is given Config mode will only find a version of tha package dat fronts compatibilitizzle wit tha axed version (format is major[.minor[.patch[.tweak]]]).  If tha EXACT option is given only a version of tha package frontin a exact match of tha axed version may be found. Y'all KNOW dat shit, muthafucka!  CMake do not establish any convention fo' tha meanin of version numbers.  Package version numbers is checked by "version" filez provided by tha packages theyselves.  For a cold-ass lil muthafucka package configuration file "<config\-file>.cmake" tha correspondin version file is located next ta it n' named either "<config\-file>\-version.cmake" or "<config\-file>Version.cmake".  If no such version file be available then tha configuration file be assumed ta not be compatible wit any axed version. I aint talkin' bout chicken n' gravy biatch.  A basic version file containin generic version matchin code can be pimped rockin tha macro write_basic_package_version_file(), peep its documentation fo' mo' details.  When a version file is found it is loaded ta check tha axed version number n' shit.  Da version file is loaded up in a nested scope up in which tha followin variablez done been defined:


.nf
  PACKAGE_FIND_NAME          = tha <package> name
  PACKAGE_FIND_VERSION       = full axed version string
  PACKAGE_FIND_VERSION_MAJOR = major version if requested, else 0
  PACKAGE_FIND_VERSION_MINOR = minor version if requested, else 0
  PACKAGE_FIND_VERSION_PATCH = patch version if requested, else 0
  PACKAGE_FIND_VERSION_TWEAK = tweak version if requested, else 0
  PACKAGE_FIND_VERSION_COUNT = number of version components, 0 ta 4
.fi

Da version file checks whether it satisfies tha axed version n' sets these variables:


.nf
  PACKAGE_VERSION            = full provided version string
  PACKAGE_VERSION_EXACT      = legit if version is exact match
  PACKAGE_VERSION_COMPATIBLE = legit if version is compatible
  PACKAGE_VERSION_UNSUITABLE = legit if unsuitable as any version
.fi

These variablez is checked by tha find_package command ta determine whether tha configuration file serves up a aaight version. I aint talkin' bout chicken n' gravy biatch.  They is not available afta tha find_package call returns.  If tha version be aaight tha followin variablez is set:


.nf
  <package>_VERSION       = full provided version string
  <package>_VERSION_MAJOR = major version if provided, else 0
  <package>_VERSION_MINOR = minor version if provided, else 0
  <package>_VERSION_PATCH = patch version if provided, else 0
  <package>_VERSION_TWEAK = tweak version if provided, else 0
  <package>_VERSION_COUNT = number of version components, 0 ta 4
.fi

and tha correspondin package configuration file is loaded. Y'all KNOW dat shit, muthafucka!  When multiple package configuration filez is available whose version filez claim compatibilitizzle wit tha version axed it is unspecified which one is chosen. I aint talkin' bout chicken n' gravy biatch.  No attempt is made ta chizzle a highest or closest version number.


Config mode serves up a elaborate intercourse n' search procedure.  Much of tha intercourse is provided fo' completenizz n' fo' use internally by find\-modulez loaded by Module mode.  Most user code should simply call


.nf
  find_package(<package> [major[.minor]] [EXACT] [REQUIRED|QUIET])
.fi

in order ta find a package.  Package maintainers providin CMake package configuration filez is encouraged ta name n' install dem such dat tha procedure outlined below will find dem without requirin use of additionizzle options.


CMake constructs a set of possible installation prefixes fo' tha package.  Under each prefix nuff muthafuckin directories is searched fo' a cold-ass lil configuration file.  Da tablez below show tha directories searched. Y'all KNOW dat shit, muthafucka!  Each entry is meant fo' installation trees followin Windows (W), UNIX (U), or Applez (A) conventions.


.nf
  <prefix>/                                               (W)
  <prefix>/(cmake|CMake)/                                 (W)
  <prefix>/<name>*/                                       (W)
  <prefix>/<name>*/(cmake|CMake)/                         (W)
  <prefix>/(lib/<arch>|lib|share)/cmake/<name>*/          (U)
  <prefix>/(lib/<arch>|lib|share)/<name>*/                (U)
  <prefix>/(lib/<arch>|lib|share)/<name>*/(cmake|CMake)/  (U)
.fi

On systems supportin OS X Frameworks n' Application Bundlez tha followin directories is searched fo' frameworks or bundlez containin a cold-ass lil configuration file:


.nf
  <prefix>/<name>.framework/Resources/                    (A)
  <prefix>/<name>.framework/Resources/CMake/              (A)
  <prefix>/<name>.framework/Versions/*/Resources/         (A)
  <prefix>/<name>.framework/Versions/*/Resources/CMake/   (A)
  <prefix>/<name>.app/Contents/Resources/                 (A)
  <prefix>/<name>.app/Contents/Resources/CMake/           (A)
.fi

In all cases tha <name> is treated as case\-insensitizzle n' correspondz ta any of tha names specified (<package> or names given by NAMES).  Paths wit lib/<arch> is enabled if CMAKE_LIBRARY_ARCHITECTURE is set.  If PATH_SUFFIXES is specified tha suffixes is appended ta each (W) or (U) directory entry one\-by\-one.


This set of directories is intended ta work up in cooperation wit projects dat provide configuration filez up in they installation trees.  Directories above marked wit (W) is intended fo' installations on Windows where tha prefix may point all up in tha top of a applicationz installation directory.  Those marked wit (U) is intended fo' installations on UNIX platforms where tha prefix is shared by multiple packages.  This is merely a cold-ass lil convention, so all (W) n' (U) directories is still searched on all platforms.  Directories marked wit (A) is intended fo' installations on Applez platforms.  Da cmake variablez CMAKE_FIND_FRAMEWORK n' CMAKE_FIND_APPBUNDLE determine tha order of preference as specified below.


Da set of installation prefixes is constructed rockin tha followin steps.  If NO_DEFAULT_PATH is specified all NO_* options is enabled.


1. Right back up in yo muthafuckin ass. Search paths specified up in cmake\-specific cache variables.  These is intended ta be used on tha command line wit a \-DVAR=value.  This can be skipped if NO_CMAKE_PATH is passed.


.nf
   CMAKE_PREFIX_PATH
   CMAKE_FRAMEWORK_PATH
   CMAKE_APPBUNDLE_PATH
.fi

2. Right back up in yo muthafuckin ass. Search paths specified up in cmake\-specific environment variables.  These is intended ta be set up in tha userz shell configuration. I aint talkin' bout chicken n' gravy biatch.  This can be skipped if NO_CMAKE_ENVIRONMENT_PATH is passed.


.nf
   <package>_DIR
   CMAKE_PREFIX_PATH
   CMAKE_FRAMEWORK_PATH
   CMAKE_APPBUNDLE_PATH
.fi

3. Right back up in yo muthafuckin ass. Search paths specified by tha HINTS option. I aint talkin' bout chicken n' gravy biatch.  These should be paths computed by system introspection, like fuckin a hint provided by tha location of another item already found. Y'all KNOW dat shit, muthafucka!  Hard\-coded guesses should be specified wit tha PATHS option.


4. Right back up in yo muthafuckin ass. Search tha standard system environment variables. This can be skipped if NO_SYSTEM_ENVIRONMENT_PATH is passed. Y'all KNOW dat shit, muthafucka!  Path entries endin up in "/bin" or "/sbin" is automatically converted ta they parent directories.


.nf
   PATH
.fi

5. Right back up in yo muthafuckin ass. Search project build trees recently configured up in a CMake GUI.  This can be skipped if NO_CMAKE_BUILDS_PATH is passed. Y'all KNOW dat shit, muthafucka!  It be intended fo' tha case when a user is buildin multiple dependent projects one afta another.


6. Right back up in yo muthafuckin ass. Search paths stored up in tha CMake user package registry.  This can be skipped if NO_CMAKE_PACKAGE_REGISTRY is passed. Y'all KNOW dat shit, muthafucka!  On Windows a <package> may step tha fuck up under registry key


.nf
  HKEY_CURRENT_USER\\Software\\Kitware\\CMake\\Packages\\<package>
.fi

as a REG_SZ value, wit arbitrary name, dat specifies tha directory containin tha package configuration file.  On UNIX platforms a <package> may step tha fuck up under tha directory


.nf
  ~/.cmake/packages/<package>
.fi

as a gangbangin' file, wit arbitrary name, whose content specifies tha directory containin tha package configuration file.  See tha export(PACKAGE) command ta create user package registry entries fo' project build trees.


7. Right back up in yo muthafuckin ass. Search cmake variablez defined up in tha Platform filez fo' tha current system.  This can be skipped if NO_CMAKE_SYSTEM_PATH is passed.


.nf
   CMAKE_SYSTEM_PREFIX_PATH
   CMAKE_SYSTEM_FRAMEWORK_PATH
   CMAKE_SYSTEM_APPBUNDLE_PATH
.fi

8. Right back up in yo muthafuckin ass. Search paths stored up in tha CMake system package registry.  This can be skipped if NO_CMAKE_SYSTEM_PACKAGE_REGISTRY is passed. Y'all KNOW dat shit, muthafucka!  On Windows a <package> may step tha fuck up under registry key


.nf
  HKEY_LOCAL_MACHINE\\Software\\Kitware\\CMake\\Packages\\<package>
.fi

as a REG_SZ value, wit arbitrary name, dat specifies tha directory containin tha package configuration file.  There is no system package registry on non\-Windows platforms.


9. Right back up in yo muthafuckin ass. Search paths specified by tha PATHS option. I aint talkin' bout chicken n' gravy biatch.  These is typically hard\-coded guesses.


On Darwin or systems supportin OS X Frameworks, tha cmake variable    CMAKE_FIND_FRAMEWORK can be set ta empty or one of tha following:


.nf
   "FIRST"  \- Try ta find frameworks before standard
              libraries or headers. This is tha default on Darwin.
   "LAST"   \- Try ta find frameworks afta standard
              libraries or headers.
   "ONLY"   \- Only try ta find frameworks.
   "NEVER" \- Never try ta find frameworks.
.fi

On Darwin or systems supportin OS X Application Bundles, tha cmake variable CMAKE_FIND_APPBUNDLE can be set ta empty or one of tha following:


.nf
   "FIRST"  \- Try ta find application bundlez before standard
              programs. This is tha default on Darwin.
   "LAST"   \- Try ta find application bundlez afta standard
              programs.
   "ONLY"   \- Only try ta find application bundles.
   "NEVER" \- Never try ta find application bundles.
.fi

Da CMake variable CMAKE_FIND_ROOT_PATH specifies one or mo' directories ta be prepended ta all other search directories. Put ya muthafuckin choppers up if ya feel dis! This effectively "re\-roots" tha entire search under given locations. By default it is empty. Well shiiiit, it is especially useful when cross\-compilin ta point ta tha root directory of tha target environment n' CMake will search there like a muthafucka. By default at first tha directories listed up in CMAKE_FIND_ROOT_PATH n' then tha non\-rooted directories is ghon be searched. Y'all KNOW dat shit, muthafucka! Da default behavior can be adjusted by settin CMAKE_FIND_ROOT_PATH_MODE_PACKAGE.  This behavior can be manually overridden on a per\-call basis. By rockin CMAKE_FIND_ROOT_PATH_BOTH tha search order is ghon be as busted lyrics bout above. If NO_CMAKE_FIND_ROOT_PATH is used then CMAKE_FIND_ROOT_PATH aint gonna be used. Y'all KNOW dat shit, muthafucka! If ONLY_CMAKE_FIND_ROOT_PATH is used then only tha re\-rooted directories is ghon be searched.


Da default search order is designed ta be most\-specific ta least\-specific fo' common use cases.  Projects may override tha order by simply callin tha command multiple times n' rockin tha NO_* options:


.nf
   find_package(<package> PATHS paths... NO_DEFAULT_PATH)
   find_package(<package>)
.fi

Once one of tha calls succeedz tha result variable is ghon be set n' stored up in tha cache so dat no call will search again.


Every non\-REQUIRED find_package() call can be disabled by settin tha variable CMAKE_DISABLE_FIND_PACKAGE_<package> ta TRUE. Right back up in yo muthafuckin ass. See tha documentation fo' tha CMAKE_DISABLE_FIND_PACKAGE_<package> variable fo' mo' shiznit.


When loadin a gangbangin' find module or package configuration file find_package defines variablez ta provide shiznit bout tha call arguments (and restores they original gangsta state before returning):


.nf
 <package>_FIND_REQUIRED      = legit if REQUIRED option was given
 <package>_FIND_QUIETLY       = legit if QUIET option was given
 <package>_FIND_VERSION       = full axed version string
 <package>_FIND_VERSION_MAJOR = major version if requested, else 0
 <package>_FIND_VERSION_MINOR = minor version if requested, else 0
 <package>_FIND_VERSION_PATCH = patch version if requested, else 0
 <package>_FIND_VERSION_TWEAK = tweak version if requested, else 0
 <package>_FIND_VERSION_COUNT = number of version components, 0 ta 4
 <package>_FIND_VERSION_EXACT = legit if EXACT option was given
 <package>_FIND_COMPONENTS    = list of axed components
 <package>_FIND_REQUIRED_<c>  = legit if component <c> is required
                                false if component <c> is optional
.fi

In Module mode tha loaded find module is responsible ta honor tha request detailed by these variables; peep tha find module fo' details.  In Config mode find_package handlez REQUIRED, QUIET, n' version options automatically but leaves it ta tha package configuration file ta handle components up in a way dat make sense fo' tha package.  Da package configuration file may set <package>_FOUND ta false ta tell find_package dat component requirements is not satisfied.


See tha cmake_policy() command documentation fo' rap of tha NO_POLICY_SCOPE option.

.TP
.B find_path
Find tha directory containin a gangbangin' file.

.nf
   find_path(<VAR> name1 [path1 path2 ...])
.fi

This is tha short\-hand signature fo' tha command dat is sufficient up in nuff cases.  It be tha same as find_path(<VAR> name1 [PATHS path1 path2 ...])


.nf
   find_path(
             <VAR>
             name | NAMES name1 [name2 ...]
             [HINTS path1 [path2 ... ENV var]]
             [PATHS path1 [path2 ... ENV var]]
             [PATH_SUFFIXES suffix1 [suffix2 ...]]
             [DOC "cache documentation string"]
             [NO_DEFAULT_PATH]
             [NO_CMAKE_ENVIRONMENT_PATH]
             [NO_CMAKE_PATH]
             [NO_SYSTEM_ENVIRONMENT_PATH]
             [NO_CMAKE_SYSTEM_PATH]
             [CMAKE_FIND_ROOT_PATH_BOTH |
              ONLY_CMAKE_FIND_ROOT_PATH |
              NO_CMAKE_FIND_ROOT_PATH]
            )
.fi

This command is used ta find a gangbangin' finger-lickin' directory containin tha named file fo' realz. A cache entry named by <VAR> is pimped ta store tha result of dis command. Y'all KNOW dat shit, muthafucka!  If tha file up in a gangbangin' finger-lickin' directory is found tha result is stored up in tha variable n' tha search aint gonna be repeated unless tha variable is cleared. Y'all KNOW dat shit, muthafucka!  If not a god damn thang is found, tha result is ghon be <VAR>\-NOTFOUND, n' tha search is ghon be attempted again n' again n' again tha next time find_path is invoked wit tha same variable.  Da name of tha file up in a gangbangin' finger-lickin' directory dat is searched fo' is specified by tha names listed afta tha NAMES argument.   Additionizzle search locations can be specified afta tha PATHS argument.  If ENV var is found up in tha HINTS or PATHS section tha environment variable var is ghon be read n' converted from a system environment variable ta a cold-ass lil cmake steez list of paths.  For example ENV PATH would be a way ta list tha system path variable. Da argument afta DOC is ghon be used fo' tha documentation strang up in tha cache.  PATH_SUFFIXES specifies additionizzle subdirectories ta check below each search path.


If NO_DEFAULT_PATH is specified, then no additionizzle paths is added ta tha search. If NO_DEFAULT_PATH aint specified, tha search process be as bigs up:


1. Right back up in yo muthafuckin ass. Search paths specified up in cmake\-specific cache variables.  These is intended ta be used on tha command line wit a \-DVAR=value.  This can be skipped if NO_CMAKE_PATH is passed.


.nf
   <prefix>/include/<arch> if CMAKE_LIBRARY_ARCHITECTURE is set, and
   <prefix>/include fo' each <prefix> up in CMAKE_PREFIX_PATH
   CMAKE_INCLUDE_PATH
   CMAKE_FRAMEWORK_PATH
.fi

2. Right back up in yo muthafuckin ass. Search paths specified up in cmake\-specific environment variables.  These is intended ta be set up in tha userz shell configuration. I aint talkin' bout chicken n' gravy biatch.  This can be skipped if NO_CMAKE_ENVIRONMENT_PATH is passed.


.nf
   <prefix>/include/<arch> if CMAKE_LIBRARY_ARCHITECTURE is set, and
   <prefix>/include fo' each <prefix> up in CMAKE_PREFIX_PATH
   CMAKE_INCLUDE_PATH
   CMAKE_FRAMEWORK_PATH
.fi

3. Right back up in yo muthafuckin ass. Search tha paths specified by tha HINTS option. I aint talkin' bout chicken n' gravy biatch.  These should be paths computed by system introspection, like fuckin a hint provided by tha location of another item already found. Y'all KNOW dat shit, muthafucka!  Hard\-coded guesses should be specified wit tha PATHS option.


4. Right back up in yo muthafuckin ass. Search tha standard system environment variables. This can be skipped if NO_SYSTEM_ENVIRONMENT_PATH be a argument.


.nf
   PATH
   INCLUDE
.fi

5. Right back up in yo muthafuckin ass. Search cmake variablez defined up in tha Platform filez fo' tha current system.  This can be skipped if NO_CMAKE_SYSTEM_PATH is passed.


.nf
   <prefix>/include/<arch> if CMAKE_LIBRARY_ARCHITECTURE is set, and
   <prefix>/include fo' each <prefix> up in CMAKE_SYSTEM_PREFIX_PATH
   CMAKE_SYSTEM_INCLUDE_PATH
   CMAKE_SYSTEM_FRAMEWORK_PATH
.fi

6. Right back up in yo muthafuckin ass. Search tha paths specified by tha PATHS option or up in tha short\-hand version of tha command. Y'all KNOW dat shit, muthafucka!  These is typically hard\-coded guesses.


On Darwin or systems supportin OS X Frameworks, tha cmake variable    CMAKE_FIND_FRAMEWORK can be set ta empty or one of tha following:


.nf
   "FIRST"  \- Try ta find frameworks before standard
              libraries or headers. This is tha default on Darwin.
   "LAST"   \- Try ta find frameworks afta standard
              libraries or headers.
   "ONLY"   \- Only try ta find frameworks.
   "NEVER" \- Never try ta find frameworks.
.fi

On Darwin or systems supportin OS X Application Bundles, tha cmake variable CMAKE_FIND_APPBUNDLE can be set ta empty or one of tha following:


.nf
   "FIRST"  \- Try ta find application bundlez before standard
              programs. This is tha default on Darwin.
   "LAST"   \- Try ta find application bundlez afta standard
              programs.
   "ONLY"   \- Only try ta find application bundles.
   "NEVER" \- Never try ta find application bundles.
.fi

Da CMake variable CMAKE_FIND_ROOT_PATH specifies one or mo' directories ta be prepended ta all other search directories. Put ya muthafuckin choppers up if ya feel dis! This effectively "re\-roots" tha entire search under given locations. By default it is empty. Well shiiiit, it is especially useful when cross\-compilin ta point ta tha root directory of tha target environment n' CMake will search there like a muthafucka. By default at first tha directories listed up in CMAKE_FIND_ROOT_PATH n' then tha non\-rooted directories is ghon be searched. Y'all KNOW dat shit, muthafucka! Da default behavior can be adjusted by settin CMAKE_FIND_ROOT_PATH_MODE_INCLUDE.  This behavior can be manually overridden on a per\-call basis. By rockin CMAKE_FIND_ROOT_PATH_BOTH tha search order is ghon be as busted lyrics bout above. If NO_CMAKE_FIND_ROOT_PATH is used then CMAKE_FIND_ROOT_PATH aint gonna be used. Y'all KNOW dat shit, muthafucka! If ONLY_CMAKE_FIND_ROOT_PATH is used then only tha re\-rooted directories is ghon be searched.


Da default search order is designed ta be most\-specific ta least\-specific fo' common use cases.  Projects may override tha order by simply callin tha command multiple times n' rockin tha NO_* options:


.nf
   find_path(<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)
   find_path(<VAR> NAMES name)
.fi

Once one of tha calls succeedz tha result variable is ghon be set n' stored up in tha cache so dat no call will search again.


When searchin fo' frameworks, if tha file is specified as A/b.h, then tha framework search will look fo' A.framework/Headers/b.h. If dat is found tha path is ghon be set ta tha path ta tha framework. CMake will convert dis ta tha erect \-F option ta include tha file. 

.TP
.B find_program
Find a executable program.

.nf
   find_program(<VAR> name1 [path1 path2 ...])
.fi

This is tha short\-hand signature fo' tha command dat is sufficient up in nuff cases.  It be tha same as find_program(<VAR> name1 [PATHS path1 path2 ...])


.nf
   find_program(
             <VAR>
             name | NAMES name1 [name2 ...]
             [HINTS path1 [path2 ... ENV var]]
             [PATHS path1 [path2 ... ENV var]]
             [PATH_SUFFIXES suffix1 [suffix2 ...]]
             [DOC "cache documentation string"]
             [NO_DEFAULT_PATH]
             [NO_CMAKE_ENVIRONMENT_PATH]
             [NO_CMAKE_PATH]
             [NO_SYSTEM_ENVIRONMENT_PATH]
             [NO_CMAKE_SYSTEM_PATH]
             [CMAKE_FIND_ROOT_PATH_BOTH |
              ONLY_CMAKE_FIND_ROOT_PATH |
              NO_CMAKE_FIND_ROOT_PATH]
            )
.fi

This command is used ta find a program fo' realz. A cache entry named by <VAR> is pimped ta store tha result of dis command. Y'all KNOW dat shit, muthafucka!  If tha program is found tha result is stored up in tha variable n' tha search aint gonna be repeated unless tha variable is cleared. Y'all KNOW dat shit, muthafucka!  If not a god damn thang is found, tha result is ghon be <VAR>\-NOTFOUND, n' tha search is ghon be attempted again n' again n' again tha next time find_program is invoked wit tha same variable.  Da name of tha program dat is searched fo' is specified by tha names listed afta tha NAMES argument.   Additionizzle search locations can be specified afta tha PATHS argument.  If ENV var is found up in tha HINTS or PATHS section tha environment variable var is ghon be read n' converted from a system environment variable ta a cold-ass lil cmake steez list of paths.  For example ENV PATH would be a way ta list tha system path variable. Da argument afta DOC is ghon be used fo' tha documentation strang up in tha cache.  PATH_SUFFIXES specifies additionizzle subdirectories ta check below each search path.


If NO_DEFAULT_PATH is specified, then no additionizzle paths is added ta tha search. If NO_DEFAULT_PATH aint specified, tha search process be as bigs up:


1. Right back up in yo muthafuckin ass. Search paths specified up in cmake\-specific cache variables.  These is intended ta be used on tha command line wit a \-DVAR=value.  This can be skipped if NO_CMAKE_PATH is passed.


.nf
   <prefix>/[s]bin fo' each <prefix> up in CMAKE_PREFIX_PATH
   CMAKE_PROGRAM_PATH
   CMAKE_APPBUNDLE_PATH
.fi

2. Right back up in yo muthafuckin ass. Search paths specified up in cmake\-specific environment variables.  These is intended ta be set up in tha userz shell configuration. I aint talkin' bout chicken n' gravy biatch.  This can be skipped if NO_CMAKE_ENVIRONMENT_PATH is passed.


.nf
   <prefix>/[s]bin fo' each <prefix> up in CMAKE_PREFIX_PATH
   CMAKE_PROGRAM_PATH
   CMAKE_APPBUNDLE_PATH
.fi

3. Right back up in yo muthafuckin ass. Search tha paths specified by tha HINTS option. I aint talkin' bout chicken n' gravy biatch.  These should be paths computed by system introspection, like fuckin a hint provided by tha location of another item already found. Y'all KNOW dat shit, muthafucka!  Hard\-coded guesses should be specified wit tha PATHS option.


4. Right back up in yo muthafuckin ass. Search tha standard system environment variables. This can be skipped if NO_SYSTEM_ENVIRONMENT_PATH be a argument.


.nf
   PATH
   
.fi

5. Right back up in yo muthafuckin ass. Search cmake variablez defined up in tha Platform filez fo' tha current system.  This can be skipped if NO_CMAKE_SYSTEM_PATH is passed.


.nf
   <prefix>/[s]bin fo' each <prefix> up in CMAKE_SYSTEM_PREFIX_PATH
   CMAKE_SYSTEM_PROGRAM_PATH
   CMAKE_SYSTEM_APPBUNDLE_PATH
.fi

6. Right back up in yo muthafuckin ass. Search tha paths specified by tha PATHS option or up in tha short\-hand version of tha command. Y'all KNOW dat shit, muthafucka!  These is typically hard\-coded guesses.


On Darwin or systems supportin OS X Frameworks, tha cmake variable    CMAKE_FIND_FRAMEWORK can be set ta empty or one of tha following:


.nf
   "FIRST"  \- Try ta find frameworks before standard
              libraries or headers. This is tha default on Darwin.
   "LAST"   \- Try ta find frameworks afta standard
              libraries or headers.
   "ONLY"   \- Only try ta find frameworks.
   "NEVER" \- Never try ta find frameworks.
.fi

On Darwin or systems supportin OS X Application Bundles, tha cmake variable CMAKE_FIND_APPBUNDLE can be set ta empty or one of tha following:


.nf
   "FIRST"  \- Try ta find application bundlez before standard
              programs. This is tha default on Darwin.
   "LAST"   \- Try ta find application bundlez afta standard
              programs.
   "ONLY"   \- Only try ta find application bundles.
   "NEVER" \- Never try ta find application bundles.
.fi

Da CMake variable CMAKE_FIND_ROOT_PATH specifies one or mo' directories ta be prepended ta all other search directories. Put ya muthafuckin choppers up if ya feel dis! This effectively "re\-roots" tha entire search under given locations. By default it is empty. Well shiiiit, it is especially useful when cross\-compilin ta point ta tha root directory of tha target environment n' CMake will search there like a muthafucka. By default at first tha directories listed up in CMAKE_FIND_ROOT_PATH n' then tha non\-rooted directories is ghon be searched. Y'all KNOW dat shit, muthafucka! Da default behavior can be adjusted by settin CMAKE_FIND_ROOT_PATH_MODE_PROGRAM.  This behavior can be manually overridden on a per\-call basis. By rockin CMAKE_FIND_ROOT_PATH_BOTH tha search order is ghon be as busted lyrics bout above. If NO_CMAKE_FIND_ROOT_PATH is used then CMAKE_FIND_ROOT_PATH aint gonna be used. Y'all KNOW dat shit, muthafucka! If ONLY_CMAKE_FIND_ROOT_PATH is used then only tha re\-rooted directories is ghon be searched.


Da default search order is designed ta be most\-specific ta least\-specific fo' common use cases.  Projects may override tha order by simply callin tha command multiple times n' rockin tha NO_* options:


.nf
   find_program(<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)
   find_program(<VAR> NAMES name)
.fi

Once one of tha calls succeedz tha result variable is ghon be set n' stored up in tha cache so dat no call will search again.

.TP
.B foreach
Evaluate a crew of commandz fo' each value up in a list.

.nf
  foreach(loop_var arg1 arg2 ...)
    COMMAND1(ARGS ...)
    COMMAND2(ARGS ...)
    ...
  endforeach(loop_var)
.fi

All commandz between foreach n' tha matchin endforeach is recorded without bein invoked. Y'all KNOW dat shit, muthafucka!  Once tha endforeach is evaluated, tha recorded list of commandz is invoked once fo' each argument listed up in tha original gangsta foreach command. Y'all KNOW dat shit, muthafucka!  Before each iteration of tha loop "${loop_var}" is ghon be set as a variable wit tha current value up in tha list.


.nf
  foreach(loop_var RANGE total)
  foreach(loop_var RANGE start stop [step])
.fi

Foreach can also iterate over a generated range of numbers. There is three typez of dis iteration:


* When specifyin single number, tha range gonna git elements 0 ta "total".


* When specifyin two numbers, tha range gonna git elements from tha straight-up original gangsta number ta tha second number.


* Da third optionizzle number is tha increment used ta iterate from tha straight-up original gangsta number ta tha second number.


.nf
  foreach(loop_var IN [LISTS [list1 [...]]]
                      [ITEMS [item1 [...]]])
.fi

Iterates over a precise list of items.  Da LISTS option names list\-valued variablez ta be traversed, includin empty elements (an empty strang be a zero\-length list).  Da ITEMS option endz argument parsin n' includes all arguments followin it up in tha iteration.

.TP
.B function
Start recordin a gangbangin' function fo' lata invocation as a cold-ass lil command.

.nf
  function(<name> [arg1 [arg2 [arg3 ...]]])
    COMMAND1(ARGS ...)
    COMMAND2(ARGS ...)
    ...
  endfunction(<name>)
.fi

Define a gangbangin' function named <name> dat takes arguments named arg1 arg2 arg3 (...).  Commandz listed afta function yo, but before tha matchin endfunction, is not invoked until tha function is invoked. Y'all KNOW dat shit, muthafucka!  When it is invoked, tha commandz recorded up in tha function is first modified by replacin formal parametas (${arg1}) wit tha arguments passed, n' then invoked as aiiight commands. In addizzle ta referencin tha formal parametas you can reference tha variable ARGC which is ghon be set ta tha number of arguments passed tha fuck into tha function as well as ARGV0 ARGV1 ARGV2 ... which gonna git tha actual jointz of tha arguments passed in. I aint talkin' bout chicken n' gravy biatch. This facilitates bustin functions wit optionizzle arguments fo' realz. Additionally ARGV holdz tha list of all arguments given ta tha function n' ARGN holdz tha list of arguments past tha last expected argument.


A function opens a freshly smoked up scope: peep set(var PARENT_SCOPE) fo' details.


See tha cmake_policy() command documentation fo' tha behavior of policies inside functions.

.TP
.B get_cmake_property
Git a property of tha CMake instance.

.nf
  get_cmake_property(VAR property)
.fi

Git a property from tha CMake instance.  Da value of tha property is stored up in tha variable VAR.  If tha property aint found, VAR is ghon be set ta "NOTFOUND".  Some supported propertizzles include: VARIABLES, CACHE_VARIABLES, COMMANDS, MACROS, n' COMPONENTS.


See also tha mo' general get_property() command.

.TP
.B get_directory_property
Git a property of DIRECTORY scope.

.nf
  get_directory_property(<variable> [DIRECTORY <dir>] <prop\-name>)
.fi

Store a property of directory scope up in tha named variable.  If tha property aint defined tha empty\-strin is returned. Y'all KNOW dat shit, muthafucka!  Da DIRECTORY argument specifies another directory from which ta retrieve tha property value.  Da specified directory must have already been traversed by CMake.


.nf
  get_directory_property(<variable> [DIRECTORY <dir>]
                         DEFINITION <var\-name>)
.fi

Git a variable definizzle from a gangbangin' finger-lickin' directory.  This form is useful ta git a variable definizzle from another directory.


See also tha mo' general get_property() command.

.TP
.B get_filename_component
Git a specific component of a gangbangin' full filename.

.nf
  get_filename_component(<VAR> <FileName> <COMP> [CACHE])
.fi

Set <VAR> ta a cold-ass lil component of <FileName>, where <COMP> is one of:


.nf
 DIRECTORY = Directory without file name
 NAME      = File name without directory
 EXT       = File name longest extension (.b.c from d/a.b.c)
 NAME_WE   = File name without directory or longest extension
 ABSOLUTE  = Full path ta file
 REALPATH  = Full path ta existin file wit symlinks resolved
 PATH      = Legacy alias fo' DIRECTORY (use fo' CMake <= 2.8.11)
.fi

Paths is returned wit forward slashes n' have no trailin slahes. Da longest file extension be always considered. Y'all KNOW dat shit, muthafucka! If tha optionizzle CACHE argument is specified, tha result variable be added ta tha cache.


.nf
  get_filename_component(<VAR> FileName
                         PROGRAM [PROGRAM_ARGS <ARG_VAR>]
                         [CACHE])
.fi

Da program up in FileName is ghon be found up in tha system search path or left as a gangbangin' full path.  If PROGRAM_ARGS is present wit PROGRAM, then any command\-line arguments present up in tha FileName strang is split from tha program name n' stored up in <ARG_VAR>.  This is used ta separate a program name from its arguments up in a cold-ass lil command line string.

.TP
.B get_property
Git a property.

.nf
  get_property(<variable>
               <GLOBAL             |
                DIRECTORY [dir]    |
                TARGET    <target> |
                SOURCE    <source> |
                TEST      <test>   |
                CACHE     <entry>  |
                VARIABLE>
               PROPERTY <name>
               [SET | DEFINED | BRIEF_DOCS | FULL_DOCS])
.fi

Git one property from one object up in a scope.  Da first argument specifies tha variable up in which ta store tha result.  Da second argument determines tha scope from which ta git tha property.  It must be one of tha following:


GLOBAL scope is unique n' do not accept a name.


DIRECTORY scope defaults ta tha current directory but another directory (already processed by CMake) may be named by full or relatizzle path.


TARGET scope must name one existin target.


SOURCE scope must name one source file.


TEST scope must name one existin test.


CACHE scope must name one cache entry.


VARIABLE scope is unique n' do not accept a name.


Da required PROPERTY option is immediately followed by tha name of tha property ta get.  If tha property aint set a empty value is returned. Y'all KNOW dat shit, muthafucka!  If tha SET option is given tha variable is set ta a funky-ass boolean value indicatin whether tha property has been set.  If tha DEFINED option is given tha variable is set ta a funky-ass boolean value indicatin whether tha property has been defined like fuckin wit define_property. If BRIEF_DOCS or FULL_DOCS is given then tha variable is set ta a strang containin documentation fo' tha axed property.  If documentation be axed fo' a property dat has not been defined NOTFOUND is returned.

.TP
.B if
Conditionally execute a crew of commands.

.nf
  if(expression)
    # then section.
    COMMAND1(ARGS ...)
    COMMAND2(ARGS ...)
    ...
  elseif(expression2)
    # elseif section.
    COMMAND1(ARGS ...)
    COMMAND2(ARGS ...)
    ...
  else(expression)
    # else section.
    COMMAND1(ARGS ...)
    COMMAND2(ARGS ...)
    ...
  endif(expression)
.fi

Evaluates tha given expression. I aint talkin' bout chicken n' gravy biatch.  If tha result is true, tha commandz up in tha THEN section is invoked. Y'all KNOW dat shit, muthafucka!  Otherwise, tha commandz up in tha else section is invoked. Y'all KNOW dat shit, muthafucka!  Da elseif n' else sections is optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Yo ass may have multiple elseif clauses. Note dat tha expression up in tha else n' endif clause is optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Long expressions can be used n' there be a traditionizzle order of precedence. Parenthetical expressions is evaluated first followed by unary operators like fuckin EXISTS, COMMAND, n' DEFINED. Then any EQUAL, LESS, GREATER, STRLESS, STRGREATER, STREQUAL, MATCHES is ghon be evaluated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Then NOT operators n' finally AND, OR operators is ghon be evaluated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Possible expressions are:


.nf
  if(<constant>)
.fi

True if tha constant is 1, ON, YES, TRUE, Y, or a non\-zero number n' shit.  False if tha constant is 0, OFF, NO, FALSE, N, IGNORE, NOTFOUND, '', or endz up in tha suffix '\-NOTFOUND'.  Named boolean constants is case\-insensitive.  If tha argument aint one of these constants, it is treated as a variable:


.nf
  if(<variable>)
.fi

True if tha variable is defined ta a value dat aint a gangbangin' false constant.  False otherwise.  (Note macro arguments is not variables.)


.nf
  if(NOT <expression>)
.fi

True if tha expression aint true.


.nf
  if(<expr1> AND <expr2>)
.fi

True if both expressions would be considered legit individually.


.nf
  if(<expr1> OR <expr2>)
.fi

True if either expression would be considered legit individually.


.nf
  if(COMMAND command\-name)
.fi

True if tha given name be a cold-ass lil command, macro or function dat can be invoked.


.nf
  if(POLICY policy\-id)
.fi

True if tha given name be a existin policy (of tha form CMP<NNNN>).


.nf
  if(TARGET target\-name)
.fi

True if tha given name be a existin target, built or imported.


.nf
  if(EXISTS file\-name)
  if(EXISTS directory\-name)
.fi

True if tha named file or directory exists, n' you can put dat on yo' toast.  Behavior is well\-defined only fo' full paths.


.nf
  if(file1 IS_NEWER_THAN file2)
.fi

True if file1 is newer than file2 or if one of tha two filez don't exist. Behavior is well\-defined only fo' full paths. If tha file time stamps is exactly tha same, a IS_NEWER_THAN comparison returns true, so dat any dependent build operations will occur up in tha event of a tie. This includes tha case of passin tha same file name fo' both file1 n' file2.


.nf
  if(IS_DIRECTORY directory\-name)
.fi

True if tha given name be a gangbangin' finger-lickin' directory.  Behavior is well\-defined only fo' full paths.


.nf
  if(IS_SYMLINK file\-name)
.fi

True if tha given name be a symbolic link.  Behavior is well\-defined only fo' full paths.


.nf
  if(IS_ABSOLUTE path)
.fi

True if tha given path be a absolute path.


.nf
  if(<variable|string> MATCHES regex)
.fi

True if tha given strang or variablez value matches tha given regular expression.


.nf
  if(<variable|string> LESS <variable|string>)
  if(<variable|string> GREATER <variable|string>)
  if(<variable|string> EQUAL <variable|string>)
.fi

True if tha given strang or variablez value be a valid number n' tha inequalitizzle or equalitizzle is true.


.nf
  if(<variable|string> STRLESS <variable|string>)
  if(<variable|string> STRGREATER <variable|string>)
  if(<variable|string> STREQUAL <variable|string>)
.fi

True if tha given strang or variablez value is lexicographically less (or pimped outer, or equal) than tha strang or variable on tha right.


.nf
  if(<variable|string> VERSION_LESS <variable|string>)
  if(<variable|string> VERSION_EQUAL <variable|string>)
  if(<variable|string> VERSION_GREATER <variable|string>)
.fi

Component\-wise integer version number comparison (version format is major[.minor[.patch[.tweak]]]).


.nf
  if(DEFINED <variable>)
.fi

True if tha given variable is defined. Y'all KNOW dat shit, muthafucka! Well shiiiit, it do not matta if tha variable is legit or false just if it has been set.


.nf
  if((expression) AND (expression OR (expression)))
.fi

Da expressions inside tha parenthesis is evaluated first n' then tha remainin expression is evaluated as up in tha previous examples. Where there be nested parenthesis tha innermost is evaluated as part of evaluatin tha expression dat gotz nuff em.


Da if command was freestyled straight-up early up in CMakez history, prepimpin tha ${} variable evaluation syntax, n' fo' convenience evaluates variablez named by its arguments as shown up in tha above signatures.  Note dat aiiight variable evaluation wit ${} applies before tha if command even receives tha arguments, n' you can put dat on yo' toast.  Therefore code like


.nf
  set(var1 OFF)
  set(var2 "var1")
  if(${var2})
.fi

appears ta tha if command as


.nf
  if(var1)
.fi

and is evaluated accordin ta tha if(<variable>) case documented above.  Da result is OFF which is false.  But fuck dat shiznit yo, tha word on tha street is dat if we remove tha ${} from tha example then tha command sees


.nf
  if(var2)
.fi

which is legit cuz var2 is defined ta "var1" which aint a gangbangin' false constant.


Automatic evaluation applies up in tha other cases whenever tha above\-documented signature accepts <variable|string>:


1) Da left hand argument ta MATCHES is first checked ta peep if it aint nuthin but a thugged-out defined variable, if so tha variablez value is used, otherwise tha original gangsta value is used. Y'all KNOW dat shit, muthafucka! 


2) If tha left hand argument ta MATCHES is missin it returns false without error 


3) Both left n' right hand arguments ta LESS GREATER EQUAL is independently tested ta peep if they is defined variables, if so they defined joints is used otherwise tha original gangsta value is used. Y'all KNOW dat shit, muthafucka! 


4) Both left n' right hand arguments ta STRLESS STREQUAL STRGREATER is independently tested ta peep if they is defined variables, if so they defined joints is used otherwise tha original gangsta value is used. Y'all KNOW dat shit, muthafucka! 


5) Both left n' right hand argumemnts ta VERSION_LESS VERSION_EQUAL VERSION_GREATER is independently tested ta peep if they is defined variables, if so they defined joints is used otherwise tha original gangsta value is used. Y'all KNOW dat shit, muthafucka! 


6) Da right hand argument ta NOT is tested ta peep if it aint nuthin but a funky-ass boolean constant, if so tha value is used, otherwise it be assumed ta be a variable n' it is dereferenced. Y'all KNOW dat shit, muthafucka! 


7) Da left n' right hand arguments ta AND OR is independently tested ta peep if they is boolean constants, if so they is used as such, otherwise they is assumed ta be variablez n' is dereferenced. Y'all KNOW dat shit, muthafucka! 


.TP
.B include
Load n' run CMake code from a gangbangin' file or module.

.nf
  include(<file|module> [OPTIONAL] [RESULT_VARIABLE <VAR>]
                        [NO_POLICY_SCOPE])
.fi

Load n' run CMake code from tha file given. I aint talkin' bout chicken n' gravy biatch.  Variable readz n' writes access tha scope of tha calla (dynamic scoping).  If OPTIONAL is present, then no error is raised if tha file do not exist.  If RESULT_VARIABLE is given tha variable is ghon be set ta tha full filename which has been included or NOTFOUND if it failed.


If a module is specified instead of a gangbangin' file, tha file wit name <modulename>.cmake is searched first up in CMAKE_MODULE_PATH, then up in tha CMake module directory. There is one exception ta this: if tha file which calls include() is located itself up in tha CMake module directory, then first tha CMake module directory is searched n' CMAKE_MODULE_PATH afterwards. Right back up in yo muthafuckin ass. See also policy CMP0017.


See tha cmake_policy() command documentation fo' rap of tha NO_POLICY_SCOPE option.

.TP
.B list
List operations.

.nf
  list(LENGTH <list> <output variable>)
  list(GET <list> <element index> [<element index> ...]
       <output variable>)
  list(APPEND <list> <element> [<element> ...])
  list(FIND <list> <value> <output variable>)
  list(INSERT <list> <element_index> <element> [<element> ...])
  list(REMOVE_ITEM <list> <value> [<value> ...])
  list(REMOVE_AT <list> <index> [<index> ...])
  list(REMOVE_DUPLICATES <list>)
  list(REVERSE <list>)
  list(SORT <list>)
.fi

LENGTH will return a given listz length.


GET will return list of elements specified by indices from tha list.


APPEND will append elements ta tha list.


FIND will return tha index of tha element specified up in tha list or \-1 if it wasn't found.


INSERT will bang elements ta tha list ta tha specified location.


REMOVE_AT n' REMOVE_ITEM will remove shit from tha list. Da difference is dat REMOVE_ITEM will remove tha given items, while REMOVE_AT will remove tha shit all up in tha given indices.


REMOVE_DUPLICATES will remove duplicated shit up in tha list.


REVERSE reverses tha contentz of tha list in\-place.


SORT sorts tha list in\-place alphabetically.


Da list subcommandz APPEND, INSERT, REMOVE_AT, REMOVE_ITEM, REMOVE_DUPLICATES, REVERSE n' SORT may create freshly smoked up joints fo' tha list within tha current CMake variable scope. Right back up in yo muthafuckin ass. Similar ta tha SET command, tha LIST command creates freshly smoked up variable joints up in tha current scope, even if tha list itself is straight-up defined up in a parent scope. To propagate tha thangs up in dis biatch of these operations upwards, use SET wit PARENT_SCOPE, SET wit CACHE INTERNAL, or some other meanz of value propagation.


NOTES: A list up in cmake be a ; separated crew of strings. To create a list tha set command can be used. Y'all KNOW dat shit, muthafucka! For example, set(var a funky-ass b c d e)  creates a list wit a;b;c;d;e, n' set(var "a b c d e") creates a strang or a list wit one item up in dat shit.


When specifyin index joints, if <element index> is 0 or pimped outer, it is indexed from tha beginnin of tha list, wit 0 representin tha straight-up original gangsta list element. If <element index> is \-1 or lesser, it is indexed from tha end of tha list, wit \-1 representin tha last list element. Be careful when countin wit wack indices: they do not start from 0. \-0 is equivalent ta 0, tha straight-up original gangsta list element.


.TP
.B macro
Start recordin a macro fo' lata invocation as a cold-ass lil command.

.nf
  macro(<name> [arg1 [arg2 [arg3 ...]]])
    COMMAND1(ARGS ...)
    COMMAND2(ARGS ...)
    ...
  endmacro(<name>)
.fi

Define a macro named <name> dat takes arguments named arg1 arg2 arg3 (...).  Commandz listed afta macro yo, but before tha matchin endmacro, is not invoked until tha macro is invoked. Y'all KNOW dat shit, muthafucka!  When it is invoked, tha commandz recorded up in tha macro is first modified by replacin formal parametas (${arg1}) wit tha arguments passed, n' then invoked as aiiight commands. In addizzle ta referencin tha formal parametas you can reference tha joints ${ARGC} which is ghon be set ta tha number of arguments passed tha fuck into tha function as well as ${ARGV0} ${ARGV1} ${ARGV2} ... which gonna git tha actual jointz of tha arguments passed in. I aint talkin' bout chicken n' gravy biatch. This facilitates bustin macros wit optionizzle arguments fo' realz. Additionally ${ARGV} holdz tha list of all arguments given ta tha macro n' ${ARGN} holdz tha list of arguments past tha last expected argument. Note dat tha parametas ta a macro n' joints like fuckin ARGN is not variablez up in tha usual CMake sense. They is strang replacements much like tha C preprocessor would do wit a macro. If you want legit CMake variablez and/or betta CMake scope control you should peep tha function command.


See tha cmake_policy() command documentation fo' tha behavior of policies inside macros.

.TP
.B mark_as_advanced
Mark cmake cached variablez as advanced.

.nf
  mark_as_advanced([CLEAR|FORCE] VAR VAR2 VAR...)
.fi

Mark tha named cached variablez as advanced. Y'all KNOW dat shit, muthafucka!  An advanced variable aint gonna be displayed up in any of tha cmake GUIs unless tha show advanced option is on. I aint talkin' bout chicken n' gravy biatch.  If CLEAR is tha straight-up original gangsta argument advanced variablez is chizzled back ta unadvanced. Y'all KNOW dat shit, muthafucka!  If FORCE is tha straight-up original gangsta argument, then tha variable is made advanced. Y'all KNOW dat shit, muthafucka!  If neither FORCE nor CLEAR is specified, freshly smoked up joints is ghon be marked as advanced yo, but if tha variable already has a advanced/non\-advanced state, it aint gonna be chizzled.


It do not a god damn thang up in script mode.

.TP
.B math
Mathematical expressions.

.nf
  math(EXPR <output variable> <math expression>)
.fi

EXPR evaluates mathematical expression n' returns result up in tha output variable. Example mathematical expression is '5 * ( 10 + 13 )'.  Supported operators is + \- * / % | & ^ ~ << >> * / %.  They have tha same meanin  as they do up in C code.

.TP
.B message
Display a message ta tha user.

.nf
  message([STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR]
          "message ta display" ...)
.fi

Da optionizzle keyword determines tha type of message:


.nf
  (none)         = Important shiznit
  STATUS         = Incidental shiznit
  WARNING        = CMake Warning, continue processing
  AUTHOR_WARNING = CMake Warnin (dev), continue processing
  SEND_ERROR     = CMake Error, continue processing,
                                but skip generation
  FATAL_ERROR    = CMake Error, stop processin n' generation
.fi

Da CMake command\-line tool displays STATUS lyrics on stdout n' all other message types on stderr. Shiiit, dis aint no joke.  Da CMake GUI displays all lyrics up in its log area.  Da interactizzle dialogs (ccmake n' CMakeSetup) show STATUS lyrics one at a time on a status line n' other lyrics up in interactizzle pop\-up boxes.


CMake Warnin n' Error message text displays rockin a simple markup language.  Non\-indented text is formatted up in line\-wrapped paragraphs delimited by newlines.  Indented text is considered pre\-formatted.

.TP
.B option
Provides a option dat tha user can optionally select.

.nf
  option(<option_variable> "help strang describin option"
         [initial value])
.fi

Provide a option fo' tha user ta select as ON or OFF.  If no initial value is provided, OFF is used.


If you have options dat depend on tha jointz of other options, peep tha module help fo' CMakeDependentOption.

.TP
.B return
Return from a gangbangin' file, directory or function.

.nf
  return()
.fi

Returns from a gangbangin' file, directory or function. I aint talkin' bout chicken n' gravy biatch. When dis command is encountered up in a included file (via include() or find_package()), it causes processin of tha current file ta stop n' control is moonwalked back ta tha includin file. If it is encountered up in a gangbangin' file which aint included by another file, e.g. a CMakeLists.txt, control is moonwalked back ta tha parent directory if there is one. If return is called up in a gangbangin' function, control is moonwalked back ta tha calla of tha function. I aint talkin' bout chicken n' gravy biatch. Note dat a macro aint a gangbangin' function n' do not handle return like a gangbangin' function do.

.TP
.B separate_arguments
Parse space\-separated arguments tha fuck into a semicolon\-separated list.

.nf
  separate_arguments(<var> <UNIX|WINDOWS>_COMMAND "<args>")
.fi

Parses a unix\- or windows\-style command\-line strang "<args>" n' stores a semicolon\-separated list of tha arguments up in <var>.  Da entire command line must be given up in one "<args>" argument.


Da UNIX_COMMAND mode separates arguments by unquoted whitespace.  It recognizes both single\-quote n' double\-quote pairs.  A backslash escapes tha next literal characta (\\" is "); there be no special escapes (\\n is just n).


Da WINDOWS_COMMAND mode parses a windows command\-line rockin tha same syntax tha runtime library uses ta construct argv at startup.  It separates arguments by whitespace dat aint double\-quoted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Backslashes is literal unless they precede double\-quotes.  See tha MSDN article "Parsin C Command\-Line Arguments" fo' details.


.nf
  separate_arguments(VARIABLE)
.fi

Convert tha value of VARIABLE ta a semi\-colon separated list.  All spaces is replaced wit ';'.  This helps wit generatin command lines.

.TP
.B set
Set a CMake, cache or environment variable ta a given value.

.nf
  set(<variable> <value>
      [[CACHE <type> <docstring> [FORCE]] | PARENT_SCOPE])
.fi

Within CMake sets <variable> ta tha value <value>.  <value> is expanded before <variable> is set ta dat shit.  Normally, set will set a regular CMake variable. If CACHE is present, then tha <variable> is put up in tha cache instead, unless it be already up in tha cache. Right back up in yo muthafuckin ass. See section 'Variable types up in CMake' below fo' detailz of regular n' cache variablez n' they interactions. If CACHE is used, <type> n' <docstring> is required. Y'all KNOW dat shit, muthafucka! <type> is used by tha CMake GUI ta chizzle a widget wit which tha user sets a value. Da value fo' <type> may be one of


.nf
  FILEPATH = File chizzla dialog.
  PATH     = Directory chizzla dialog.
  STRING   = Arbitrary string.
  BOOL     = Boolean ON/OFF checkbox.
  INTERNAL = No GUI entry (used fo' persistent variables).
.fi

If <type> is INTERNAL, tha cache variable is marked as internal, n' aint gonna be shown ta tha user up in tools like cmake\-gui. This is intended fo' joints dat should be persisted up in tha cache yo, but which playas should not normally chizzle. INTERNAL implies FORCE.


Normally, set(...CACHE...) creates cache variablez yo, but do not modify em. If FORCE is specified, tha value of tha cache variable is set, even if tha variable be already up in tha cache. This should normally be avoided, as it will remove any chizzlez ta tha cache variablez value by tha user.


If PARENT_SCOPE is present, tha variable is ghon be set up in tha scope above tha current scope. Each freshly smoked up directory or function creates a freshly smoked up scope. This command will set tha value of a variable tha fuck into tha parent directory or callin function (whichever be applicable ta tha case at hand). PARENT_SCOPE cannot be combined wit CACHE.


If <value> aint specified then tha variable is removed instead of set.  See also: tha unset() command.


.nf
  set(<variable> <value1> ... <valueN>)
.fi

In dis case <variable> is set ta a semicolon separated list of joints.


<variable> can be a environment variable such as:


.nf
  set( ENV{PATH} /home/martink )
.fi

in which case tha environment variable is ghon be set.


*** Variable types up in CMake ***


In CMake there be two typez of variables: aiiight variablez n' cache variables. Normal variablez is meant fo' tha internal use of tha script (just like variablez up in most programmin languages); they is not persisted across CMake runs. Cache variablez (unless set wit INTERNAL) is mostly intended fo' configuration settings where tha straight-up original gangsta CMake run determines a suitable default value, which tha user can then override, by editin tha cache wit tools like fuckin ccmake or cmake\-gui. Cache variablez is stored up in tha CMake cache file, n' is persisted across CMake runs. 


Both types can exist all up in tha same time wit tha same name but different joints, n' you can put dat on yo' toast. When ${FOO} is evaluated, CMake first looks fo' a aiiight variable 'FOO' up in scope n' uses it if set. If n' only if no aiiight variable exists then it falls back ta tha cache variable 'FOO'.


Some examples:


Da code 'set(FOO "x")' sets tha aiiight variable 'FOO'. Well shiiiit, it do not bust a nut on tha cache yo, but it will hide any existin cache value 'FOO'.


Da code 'set(FOO "x" CACHE ...)' checks fo' 'FOO' up in tha cache, ignorin any aiiight variable of tha same name. If 'FOO' is up in tha cache then not a god damn thang happens ta either tha aiiight variable or tha cache variable. If 'FOO' aint up in tha cache, then it be added ta tha cache.


Finally, whenever a cold-ass lil cache variable be added or modified by a cold-ass lil command, CMake also *removes* tha aiiight variable of tha same name from tha current scope so dat a immediately followin evaluation of it will expose tha newly cached value.


Normally projects should avoid rockin aiiight n' cache variablez of tha same name, as dis interaction can be hard ta follow. But fuck dat shiznit yo, tha word on tha street is dat up in some thangs it can be useful naaahhmean? One example (used by some projects):


A project has a subproject up in its source tree. Da lil pimp project has its own CMakeLists.txt, which is included from tha parent CMakeLists.txt rockin add_subdirectory(). Now, if tha parent n' tha lil pimp project provide tha same option (for example a cold-ass lil compila option), tha parent gets tha straight-up original gangsta chizzle ta add a user\-editable option ta tha cache. Normally, tha lil pimp would then use tha same value dat tha parent uses. But fuck dat shiznit yo, tha word on tha street is dat it may be necessary ta hard\-code tha value fo' tha lil pimp projectz option while still allowin tha user ta edit tha value used by tha parent project. Da parent project can bust dis simply by settin a aiiight variable wit tha same name as tha option up in a scope sufficient ta hide tha optionz cache variable from tha lil pimp straight-up. Da parent has already set tha cache variable,  so tha childz set(...CACHE...) will do nothing, n' evaluatin tha option variable will use tha value from tha aiiight variable, which hides tha cache variable.

.TP
.B set_directory_properties
Set a property of tha directory.

.nf
  set_directory_properties(PROPERTIES prop1 value1 prop2 value2)
.fi

Set a property fo' tha current directory n' subdirectories. Put ya muthafuckin choppers up if ya feel dis! If tha property aint found, CMake will report a error. Shiiit, dis aint no joke. Da propertizzles include: INCLUDE_DIRECTORIES, LINK_DIRECTORIES, INCLUDE_REGULAR_EXPRESSION, n' ADDITIONAL_MAKE_CLEAN_FILES fo' realz. ADDITIONAL_MAKE_CLEAN_FILES be a list of filez dat is ghon be cleaned as a part of "make clean" stage.

.TP
.B set_property
Set a named property up in a given scope.

.nf
  set_property(<GLOBAL                            |
                DIRECTORY [dir]                   |
                TARGET    [target1 [target2 ...]] |
                SOURCE    [src1 [src2 ...]]       |
                TEST      [test1 [test2 ...]]     |
                CACHE     [entry1 [entry2 ...]]>
               [APPEND] [APPEND_STRING]
               PROPERTY <name> [value1 [value2 ...]])
.fi

Set one property on zero or mo' objectz of a scope.  Da first argument determines tha scope up in which tha property is set.  It must be one of tha following:


GLOBAL scope is unique n' do not accept a name.


DIRECTORY scope defaults ta tha current directory but another directory (already processed by CMake) may be named by full or relatizzle path.


TARGET scope may name zero or mo' existin targets.


SOURCE scope may name zero or mo' source files.  Note dat source file propertizzles is visible only ta targets added up in tha same directory (CMakeLists.txt).


TEST scope may name zero or mo' existin tests.


CACHE scope must name zero or mo' cache existin entries.


Da required PROPERTY option is immediately followed by tha name of tha property ta set.  Remainin arguments is used ta compose tha property value up in tha form of a semicolon\-separated list.  If tha APPEND option is given tha list be appended ta any existin property value.If tha APPEND_STRING option is given tha strang be append ta any existin property value as string, i.e. it thangs up in dis biatch up in a longer strang n' not a list of strings.

.TP
.B crib_name
Set tha given variable ta tha name of tha computer.

.nf
  crib_name(variable)
.fi

.TP
.B string
Strin operations.

.nf
  string(REGEX MATCH <regular_expression>
         <output variable> <input> [<input>...])
  string(REGEX MATCHALL <regular_expression>
         <output variable> <input> [<input>...])
  string(REGEX REPLACE <regular_expression>
         <replace_expression> <output variable>
         <input> [<input>...])
  string(REPLACE <match_string>
         <replace_string> <output variable>
         <input> [<input>...])
  string(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512>
         <output variable> <input>)
  string(COMPARE EQUAL <string1> <string2> <output variable>)
  string(COMPARE NOTEQUAL <string1> <string2> <output variable>)
  string(COMPARE LESS <string1> <string2> <output variable>)
  string(COMPARE GREATER <string1> <string2> <output variable>)
  string(ASCII <number> [<number> ...] <output variable>)
  string(CONFIGURE <string1> <output variable>
         [@ONLY] [ESCAPE_QUOTES])
  string(TOUPPER <string1> <output variable>)
  string(TOLOWER <string1> <output variable>)
  string(LENGTH <string> <output variable>)
  string(SUBSTRING <string> <begin> <length> <output variable>)
  string(STRIP <string> <output variable>)
  string(RANDOM [LENGTH <length>] [ALPHABET <alphabet>]
         [RANDOM_SEED <seed>] <output variable>)
  string(FIND <string> <substring> <output variable> [REVERSE])
  string(TIMESTAMP <output variable> [<format string>] [UTC])
  string(MAKE_C_IDENTIFIER <input string> <output variable>)
.fi

REGEX MATCH will match tha regular expression once n' store tha match up in tha output variable.


REGEX MATCHALL will match tha regular expression as nuff times as possible n' store tha matches up in tha output variable as a list.


REGEX REPLACE will match tha regular expression as nuff times as possible n' substitute tha replacement expression fo' tha match up in tha output.  Da replace expression may refer ta paren\-delimited subexpressionz of tha match rockin \\1, \\2, ..., \\9.  Note dat two backslashes (\\\\1) is required up in CMake code ta git a funky-ass backslash all up in argument parsing.


REPLACE will replace all occurrencez of match_strin up in tha input wit replace_strin n' store tha result up in tha output.


MD5, SHA1, SHA224, SHA256, SHA384, n' SHA512 will compute a cold-ass lil cryptographic hash of tha input string.


COMPARE EQUAL/NOTEQUAL/LESS/GREATER will compare tha strings n' store legit or false up in tha output variable.


ASCII'ma convert all numbers tha fuck into correspondin ASCII characters.


CONFIGURE will transform a strang like CONFIGURE_FILE transforms a gangbangin' file.


TOUPPER/TOLOWER will convert strang ta upper/lower characters.


LENGTH will return a given stringz length.


SUBSTRING will return a substrin of a given string. If length is \-1 tha remainder of tha strang startin at begin is ghon be returned.


STRIP will return a substrin of a given strang wit leadin n' trailin spaces removed.


RANDOM will return a random strang of given length consistin of charactas from tha given alphabet. Default length is 5 charactas n' default alphabet be all numbers n' upper n' lower case letters.  If a integer RANDOM_SEED is given, its value is ghon be used ta seed tha random number generator.


FIND will return tha posizzle where tha given substrin was found up in tha supplied string. If tha REVERSE flag was used, tha command will search fo' tha posizzle of tha last occurrence of tha specified substring.


Da followin charactas have special meanin up in regular expressions:


.nf
   ^         Matches at beginnin of input
   $         Matches at end of input
   .         Matches any single character
   [ ]       Matches any character(s) inside tha brackets
   [^ ]      Matches any character(s) not inside tha brackets
    \-        Inside brackets, specifies a inclusive range between
             charactas on either side e.g. [a\-f] is [abcdef]
             To match a literal \- rockin brackets, make it tha first
             or tha last characta e.g. [+*/\-] matches basic
             mathematical operators.
   *         Matches precedin pattern zero or mo' times
   +         Matches precedin pattern one or mo' times
   ?         Matches precedin pattern zero or once only
   |         Matches a pattern on either side of tha |
   ()        Saves a matched subexpression, which can be referenced 
             up in tha REGEX REPLACE operation. I aint talkin' bout chicken n' gravy biatch fo' realz. Additionally it is saved
             by all regular expression\-related commands, includin 
             e.g. if( MATCHES ), up in tha variablez CMAKE_MATCH_(0..9).
.fi

*, + n' ? have higher precedence than concatenation. I aint talkin' bout chicken n' gravy biatch. | has lower precedence than concatenation. I aint talkin' bout chicken n' gravy biatch. This means dat tha regular expression "^ab+d$" matches "abbd" but not "ababd", n' tha regular expression "^(ab|cd)$" matches "ab" but not "abd".


TIMESTAMP will write a strang representation of tha current date and/or time ta tha output variable.


Should tha command be unable ta obtain a timestamp tha output variable is ghon be set ta tha empty strang "".


Da optionizzle UTC flag requests tha current date/time representation ta be up in Coordinated Universal Time (UTC) rather than local time.


Da optionizzle <format string> may contain tha followin format specifiers: 


.nf
   %d        Da dizzle of tha current month (01\-31).
   %H        Da minute on a 24\-hour clock (00\-23).
   %I        Da minute on a 12\-hour clock (01\-12).
   %j        Da dizzle of tha current year (001\-366).
   %m        Da month of tha current year (01\-12).
   %M        Da minute of tha current minute (00\-59).
   %S        Da second of tha current minute.
             60 represents a leap second. Y'all KNOW dat shit, muthafucka! (00\-60)
   %U        Da week number of tha current year (00\-53).
   %w        Da dizzle of tha current week. 0 is Sunday. It make me wanna hollar playa! (0\-6)
   %y        Da last two digitz of tha current year (00\-99)
   %Y        Da current year. Shiiit, dis aint no joke. 
.fi

Unknown format specifiers is ghon be ignored n' copied ta tha output as\-is.


If no explicit <format string> is given it will default to:


.nf
   %Y\-%m\-%dT%H:%M:%S    fo' local time.
   %Y\-%m\-%dT%H:%M:%SZ   fo' UTC.
.fi

MAKE_C_IDENTIFIER will write a strang which can be used as a identifier up in C.

.TP
.B unset
Unset a variable, cache variable, or environment variable.

.nf
  unset(<variable> [CACHE])
.fi

Removes tha specified variable causin it ta become undefined. Y'all KNOW dat shit, muthafucka!  If CACHE is present then tha variable is removed from tha cache instead of tha current scope.


<variable> can be a environment variable such as:


.nf
  unset(ENV{LD_LIBRARY_PATH})
.fi

in which case tha variable is ghon be removed from tha current environment.

.TP
.B variable_watch
Watch tha CMake variable fo' chizzle.

.nf
  variable_watch(<variable name> [<command ta execute>])
.fi

If tha specified variable chizzles, tha message is ghon be printed bout tha variable bein chizzled. Y'all KNOW dat shit, muthafucka! If tha command is specified, tha command is ghon be executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da command will receive tha followin arguments: COMMAND(<variable> <access> <value> <current list file> <stack>)

.TP
.B while
Evaluate a crew of commandz while a cold-ass lil condizzle is true

.nf
  while(condition)
    COMMAND1(ARGS ...)
    COMMAND2(ARGS ...)
    ...
  endwhile(condition)
.fi

All commandz between while n' tha matchin endwhile is recorded without bein invoked. Y'all KNOW dat shit, muthafucka!  Once tha endwhile is evaluated, tha recorded list of commandz is invoked as long as tha condizzle is true. Da condizzle is evaluated rockin tha same logic as tha if command.

.SH COMPATIBILITY COMMANDS
.PP
.nf
  CMake Compatibilitizzle Listfile Commandz \- Obsolete commandz supported by CMake fo' compatibility.
.fi

.PP
This is tha documentation fo' now obsolete listfile commandz from previous CMake versions, which is still supported fo' compatibilitizzle reasons. Yo ass should instead use tha newer, fasta n' shinier freshly smoked up commands. ;\-)

.SH MODULES
.SH PROPERTIES OF GLOBAL SCOPE
.TP
.B ALLOW_DUPLICATE_CUSTOM_TARGETS
Allow duplicate custom targets ta be pimped.

Normally CMake requires dat all targets built up in a project have globally unique logical names (see policy CMP0002).  This is necessary ta generate meaningful project file names up in Xcode n' VS IDE generators.  It also allows tha target names ta be referenced unambiguously.


Makefile generators is capable of supportin duplicate custom target names.  For projects dat care only bout Makefile generators n' do not wish ta support Xcode or VS IDE generators, one may set dis property ta legit ta allow duplicate custom targets, n' you can put dat on yo' toast.  Da property allows multiple add_custom_target command calls up in different directories ta specify tha same target name.  But fuck dat shiznit yo, tha word on tha street is dat settin dis property will cause non\-Makefile generators ta produce a error n' refuse ta generate tha project.

.TP
.B AUTOMOC_TARGETS_FOLDER
Name of FOLDER fo' *_automoc targets dat is added automatically by CMake fo' targets fo' which AUTOMOC is enabled.

If not set, CMake uses tha FOLDER property of tha parent target as a thugged-out default value fo' dis property. Right back up in yo muthafuckin ass. See also tha documentation fo' tha FOLDER target property n' tha AUTOMOC target property.

.TP
.B DEBUG_CONFIGURATIONS
Specify which configurations is fo' debugging.

Da value must be a semi\-colon separated list of configuration names.  Currently dis property is used only by tha target_link_libraries command (see its documentation fo' details).  Additionizzle uses may be defined up in tha future.  


This property must be set all up in tha top level of tha project n' before tha straight-up original gangsta target_link_libraries command invocation. I aint talkin' bout chicken n' gravy biatch.  If any entry up in tha list do not match a valid configuration fo' tha project tha behavior is undefined.

.TP
.B DISABLED_FEATURES
List of features which is disabled durin tha CMake run.

List of features which is disabled durin tha CMake run. I aint talkin' bout chicken n' gravy biatch. By default it gotz nuff tha namez of all packages which was not found. Y'all KNOW dat shit, muthafucka! This is determined rockin tha <NAME>_FOUND variables. Packages which is searched QUIET is not listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. A project can add its own features ta dis list. This property is used by tha macros up in FeatureSummary.cmake.

.TP
.B ENABLED_FEATURES
List of features which is enabled durin tha CMake run.

List of features which is enabled durin tha CMake run. I aint talkin' bout chicken n' gravy biatch. By default it gotz nuff tha namez of all packages which was found. Y'all KNOW dat shit, muthafucka! This is determined rockin tha <NAME>_FOUND variables. Packages which is searched QUIET is not listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. A project can add its own features ta dis list. This property is used by tha macros up in FeatureSummary.cmake.

.TP
.B ENABLED_LANGUAGES
Read\-only property dat gotz nuff tha list of currently enabled languages

Set ta list of currently enabled languages.

.TP
.B FIND_LIBRARY_USE_LIB64_PATHS
Whether FIND_LIBRARY should automatically search lib64 directories.

FIND_LIBRARY_USE_LIB64_PATHS be a funky-ass boolean specifyin whether tha FIND_LIBRARY command should automatically search tha lib64 variant of directories called lib up in tha search path when buildin 64\-bit binaries.

.TP
.B FIND_LIBRARY_USE_OPENBSD_VERSIONING
Whether FIND_LIBRARY should find OpenBSD\-style shared libraries.

This property be a funky-ass boolean specifyin whether tha FIND_LIBRARY command should find shared libraries wit OpenBSD\-style versioned extension: ".so.<major>.<minor>".  Da property is set ta legit on OpenBSD n' false on other platforms.

.TP
.B GLOBAL_DEPENDS_DEBUG_MODE
Enable global target dependency graph debug mode.

CMake automatically analyzes tha global inter\-target dependency graph all up in tha beginnin of natizzle build system generation. I aint talkin' bout chicken n' gravy biatch.  This property causes it ta display detailz of its analysis ta stderr.

.TP
.B GLOBAL_DEPENDS_NO_CYCLES
Disallow global target dependency graph cycles.

CMake automatically analyzes tha global inter\-target dependency graph all up in tha beginnin of natizzle build system generation. I aint talkin' bout chicken n' gravy biatch.  It reports a error if tha dependency graph gotz nuff a cold-ass lil cycle dat do not consist of all STATIC library targets, n' you can put dat on yo' toast.  This property  drops some lyrics ta CMake ta disallow all cyclez straight-up, even among static libraries.

.TP
.B IN_TRY_COMPILE
Read\-only property dat is legit durin a try\-compile configuration.

True when buildin a project inside a TRY_COMPILE or TRY_RUN command.

.TP
.B PACKAGES_FOUND
List of packages which was found durin tha CMake run.

List of packages which was found durin tha CMake run. I aint talkin' bout chicken n' gravy biatch. Whether a package has been found is determined rockin tha <NAME>_FOUND variables.

.TP
.B PACKAGES_NOT_FOUND
List of packages which was not found durin tha CMake run.

List of packages which was not found durin tha CMake run. I aint talkin' bout chicken n' gravy biatch. Whether a package has been found is determined rockin tha <NAME>_FOUND variables.

.TP
.B PREDEFINED_TARGETS_FOLDER
Name of FOLDER fo' targets dat is added automatically by CMake.

If not set, CMake uses "CMakePredefinedTargets" as a thugged-out default value fo' dis property. Targets like fuckin INSTALL, PACKAGE n' RUN_TESTS is ghon be organized tha fuck into dis FOLDER. Right back up in yo muthafuckin ass. See also tha documentation fo' tha FOLDER target property.

.TP
.B REPORT_UNDEFINED_PROPERTIES
If set, report any undefined propertizzles ta dis file.

If dis property is set ta a gangbangin' filename then when CMake runs it will report any propertizzles or variablez dat was accessed but not defined tha fuck into tha filename specified up in dis property.

.TP
.B RULE_LAUNCH_COMPILE
Specify a launcher fo' compile rules.

Makefile generators prefix compila commandz wit tha given launcher command line.  This is intended ta allow launchers ta intercept build problems wit high granularity.  Non\-Makefile generators currently ignore dis property.

.TP
.B RULE_LAUNCH_CUSTOM
Specify a launcher fo' custom rules.

Makefile generators prefix custom commandz wit tha given launcher command line.  This is intended ta allow launchers ta intercept build problems wit high granularity.  Non\-Makefile generators currently ignore dis property.

.TP
.B RULE_LAUNCH_LINK
Specify a launcher fo' link rules.

Makefile generators prefix link n' archive commandz wit tha given launcher command line.  This is intended ta allow launchers ta intercept build problems wit high granularity.  Non\-Makefile generators currently ignore dis property.

.TP
.B RULE_MESSAGES
Specify whether ta report a message fo' each make rule.

This property specifies whether Makefile generators should add a progress message describin what tha fuck each build rule do.  If tha property aint set tha default is ON.  Set tha property ta OFF ta disable granular lyrics n' report only as each target completes.  This is intended ta allow scripted buildz ta avoid tha build time cost of detailed reports, n' you can put dat on yo' toast.  If a CMAKE_RULE_MESSAGES cache entry exists its value initializes tha value of dis property.  Non\-Makefile generators currently ignore dis property.

.TP
.B TARGET_ARCHIVES_MAY_BE_SHARED_LIBS
Set if shared libraries may be named like archives.

On AIX shared libraries may be named "lib<name>.a".  This property is set ta legit on such platforms.

.TP
.B TARGET_SUPPORTS_SHARED_LIBS
Do tha target platform support shared libraries.

TARGET_SUPPORTS_SHARED_LIBS be a funky-ass boolean specifyin whether tha target platform supports shared libraries. Put ya muthafuckin choppers up if ya feel dis! Basically all current general general purpose OS do so, tha exception is probably embedded systems wit no or special OSs.

.TP
.B USE_FOLDERS
Use tha FOLDER target property ta organize targets tha fuck into folders.

If not set, CMake treats dis property as OFF by default. CMake generators dat is capable of organizin tha fuck into a hierarchy of foldaz use tha jointz of tha FOLDER target property ta name dem folders. Right back up in yo muthafuckin ass. See also tha documentation fo' tha FOLDER target property.

.TP
.B __CMAKE_DELETE_CACHE_CHANGE_VARS_
Internal property

Used ta detect compila chizzles, Do not set.

.SH PROPERTIES ON CACHE ENTRIES
.TP
.B ADVANCED
True if entry should be hidden by default up in GUIs.

This be a funky-ass boolean value indicatin whether tha entry is considered bangin-ass only fo' advanced configuration. I aint talkin' bout chicken n' gravy biatch.  Da mark_as_advanced() command modifies dis property.

.TP
.B HELPSTRING
Help associated wit entry up in GUIs.

This strang summarizes tha purpose of a entry ta help playas set it all up in a CMake GUI.

.TP
.B MODIFIED
Internal pimpment property.  Do not set or get.

This be a internal cache entry property managed by CMake ta track interactizzle user modification of entries. Put ya muthafuckin choppers up if ya feel dis!  Ignore dat shit.

.TP
.B STRINGS
Enumerate possible STRING entry joints fo' GUI selection.

For cache entries wit type STRING, dis enumerates a set of joints, n' you can put dat on yo' toast.  CMake GUIs may use dis ta provide a selection widget instead of a generic strang entry field. Y'all KNOW dat shit, muthafucka!  This is fo' convenience only.  CMake do not enforce dat tha value matches one of dem listed.

.TP
.B TYPE
Widget type fo' entry up in GUIs.

Cache entry joints is always strings yo, but CMake GUIs present widgets ta help playas set joints, n' you can put dat on yo' toast.  Da GUIs use dis property as a hint ta determine tha widget type.  Valid TYPE joints are:


.nf
  BOOL          = Boolean ON/OFF value.
  PATH          = Path ta a gangbangin' finger-lickin' directory.
  FILEPATH      = Path ta a gangbangin' file.
  STRING        = Generic strang value.
  INTERNAL      = Do not present up in GUI at all.
  STATIC        = Value managed by CMake, do not chizzle.
  UNINITIALIZED = Type not yet specified.
.fi

Generally tha TYPE of a cold-ass lil cache entry should be set by tha command which creates it (set, option, find_library, etc.).

.TP
.B VALUE
Value of a cold-ass lil cache entry.

This property maps ta tha actual value of a cold-ass lil cache entry.  Settin dis property always sets tha value without checking, so use wit care.

.SH PROPERTIES ON DIRECTORIES
.TP
.B ADDITIONAL_MAKE_CLEAN_FILES
Additionizzle filez ta clean durin tha make clean stage.

A list of filez dat is ghon be cleaned as a part of tha "make clean" stage. 

.TP
.B CACHE_VARIABLES
List of cache variablez available up in tha current directory.

This read\-only property specifies tha list of CMake cache variablez currently defined. Y'all KNOW dat shit, muthafucka!  It be intended fo' debuggin purposes.

.TP
.B CLEAN_NO_CUSTOM
Should tha output of custom commandz be left.

If dis is legit then tha outputz of custom commandz fo' dis directory aint gonna be removed durin tha "make clean" stage. 

.TP
.B COMPILE_DEFINITIONS
Preprocessor definitions fo' compilin a gangbangin' finger-lickin' directoryz sources.

Da COMPILE_DEFINITIONS property may be set ta a semicolon\-separated list of preprocessor definitions rockin tha syntax VAR or VAR=value.  Function\-style definitions is not supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  CMake will automatically escape tha value erectly fo' tha natizzle build system (note dat CMake language syntax may require escapes ta specify some joints).  This property may be set on a per\-configuration basis rockin tha name COMPILE_DEFINITIONS_<CONFIG> where <CONFIG> be a upper\-case name (ex. "COMPILE_DEFINITIONS_DEBUG").  This property is ghon be initialized up in each directory by its value up in tha directoryz parent.


CMake will automatically drop some definitions dat is not supported by tha natizzle build tool.  Da VS6 IDE do not support definizzle joints wit spaces (but NMake do).


Disclaimer: Most natizzle build tools have skanky support fo' escapin certain joints, n' you can put dat on yo' toast.  CMake has work\-aroundz fo' nuff cases but some joints may just not be possible ta pass erectly.  If a value do not seem ta be escaped erectly, do not attempt ta work\-around tha problem by addin escape sequences ta tha value.  Yo crazy-ass work\-around may break up in a gangbangin' future version of CMake dat has improved escape support.  Instead consider definin tha macro up in a (configured) header file.  Then report tha limitation. I aint talkin' bout chicken n' gravy biatch.  Known limitations include:


.nf
  #          \- fucked up almost everywhere
  ;          \- fucked up in VS IDE 7.0 n' Borland Makefiles
  ,          \- fucked up in VS IDE
  %          \- fucked up in some cases up in NMake
  & |        \- fucked up in some cases on MinGW
  ^ < > \\"   \- fucked up in most Make tools on Windows
.fi

CMake do not reject these joints outright cuz they do work up in some cases.  Use wit caution. I aint talkin' bout chicken n' gravy biatch.  

.TP
.B COMPILE_DEFINITIONS_<CONFIG>
Per\-configuration preprocessor definitions up in a gangbangin' finger-lickin' directory.

This is tha configuration\-specific version of COMPILE_DEFINITIONS.  This property is ghon be initialized up in each directory by its value up in tha directoryz parent.


.TP
.B COMPILE_OPTIONS
List of options ta pass ta tha compiler.

This property specifies tha list of directories given so far fo' dis property.  This property exists on directories n' targets.


Da target property joints is used by tha generators ta set tha options fo' tha compiler.


Contentz of COMPILE_OPTIONS may use "generator expressions" wit tha syntax "$<...>".  Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

.TP
.B DEFINITIONS
For CMake 2.4 compatibilitizzle only.  Use COMPILE_DEFINITIONS instead.

This read\-only property specifies tha list of flags given so far ta tha add_definitions command. Y'all KNOW dat shit, muthafucka!  It be intended fo' debuggin purposes.  Use tha COMPILE_DEFINITIONS instead.

.TP
.B EXCLUDE_FROM_ALL
Exclude tha directory from tha all target of its parent.

A property on a gangbangin' finger-lickin' directory dat indicates if its targets is excluded from tha default build target. If it is not, then wit a Makefile fo' example typin make will cause tha targets ta be built. Da same concept applies ta tha default build of other generators.

.TP
.B IMPLICIT_DEPENDS_INCLUDE_TRANSFORM
Specify #include line transforms fo' dependencies up in a gangbangin' finger-lickin' directory.

This property specifies rulez ta transform macro\-like #include lines durin implicit dependency scannin of C n' C++ source files.  Da list of rulez must be semicolon\-separated wit each entry of tha form "A_MACRO(%)=value\-with\-%" (the % must be literal).  Durin dependency scannin occurrencez of A_MACRO(...) on #include lines is ghon be replaced by tha value given wit tha macro argument substituted fo' '%'.  For example, tha entry


.nf
  MYDIR(%)=<mydir/%>
.fi

will convert linez of tha form


.nf
  #include MYDIR(myheader.h)
.fi

to


.nf
  #include <mydir/myheader.h>
.fi

allowin tha dependency ta be followed.


This property applies ta sources up in all targets within a gangbangin' finger-lickin' directory.  Da property value is initialized up in each directory by its value up in tha directoryz parent.

.TP
.B INCLUDE_DIRECTORIES
List of preprocessor include file search directories.

This property specifies tha list of directories given so far ta tha include_directories command. Y'all KNOW dat shit, muthafucka!  This property exists on directories n' targets, n' you can put dat on yo' toast.  In addizzle ta acceptin joints from tha include_directories command, joints may be set directly on any directory or any target rockin tha set_property command. Y'all KNOW dat shit, muthafucka!  A target gets its initial value fo' dis property from tha value of tha directory property.  A directory gets its initial value from its parent directory if it has one.  Both directory n' target property joints is adjusted by calls ta tha include_directories command.


Da target property joints is used by tha generators ta set tha include paths fo' tha compila n' shit.  See also tha include_directories command.

.TP
.B INCLUDE_REGULAR_EXPRESSION
Include file scannin regular expression.

This read\-only property specifies tha regular expression used durin dependency scannin ta match include filez dat should be followed. Y'all KNOW dat shit, muthafucka!  See tha include_regular_expression command.

.TP
.B INTERPROCEDURAL_OPTIMIZATION
Enable interprocedural optimization fo' targets up in a gangbangin' finger-lickin' directory.

If set ta true, enablez interprocedural optimizations if they is known ta be supported by tha compiler.

.TP
.B INTERPROCEDURAL_OPTIMIZATION_<CONFIG>
Per\-configuration interprocedural optimization fo' a gangbangin' finger-lickin' directory.

This be a per\-configuration version of INTERPROCEDURAL_OPTIMIZATION.  If set, dis property overrides tha generic property fo' tha named configuration.

.TP
.B LINK_DIRECTORIES
List of linker search directories.

This read\-only property specifies tha list of directories given so far ta tha link_directories command. Y'all KNOW dat shit, muthafucka!  It be intended fo' debuggin purposes.

.TP
.B LISTFILE_STACK
Da current stack of listfilez bein processed.

This property is mainly useful when tryin ta debug errors up in yo' CMake scripts, n' you can put dat on yo' toast. Well shiiiit, it returns a list of what tha fuck list filez is currently bein processed, up in order n' shit. Right back up in yo muthafuckin ass. So if one listfile do a INCLUDE command then dat is effectively pushin tha included listfile onto tha stack.

.TP
.B MACROS
List of macro commandz available up in tha current directory.

This read\-only property specifies tha list of CMake macros currently defined. Y'all KNOW dat shit, muthafucka!  It be intended fo' debuggin purposes.  See tha macro command.

.TP
.B PARENT_DIRECTORY
Source directory dat added current subdirectory.

This read\-only property specifies tha source directory dat added tha current source directory as a subdirectory of tha build. Y'all KNOW dat shit, muthafucka!  In tha top\-level directory tha value is tha empty\-string.

.TP
.B RULE_LAUNCH_COMPILE
Specify a launcher fo' compile rules.

See tha global property of tha same name fo' details.  This overrides tha global property fo' a gangbangin' finger-lickin' directory.

.TP
.B RULE_LAUNCH_CUSTOM
Specify a launcher fo' custom rules.

See tha global property of tha same name fo' details.  This overrides tha global property fo' a gangbangin' finger-lickin' directory.

.TP
.B RULE_LAUNCH_LINK
Specify a launcher fo' link rules.

See tha global property of tha same name fo' details.  This overrides tha global property fo' a gangbangin' finger-lickin' directory.

.TP
.B TEST_INCLUDE_FILE
A cmake file dat is ghon be included when ctest is run.

If you specify TEST_INCLUDE_FILE, dat file is ghon be included n' processed when ctest is run on tha directory.

.TP
.B VARIABLES
List of variablez defined up in tha current directory.

This read\-only property specifies tha list of CMake variablez currently defined. Y'all KNOW dat shit, muthafucka!  It be intended fo' debuggin purposes.

.TP
.B VS_GLOBAL_SECTION_POST_<section>
Specify a postSolution global section up in Visual Studio.

Settin a property like dis generates a entry of tha followin form up in tha solution file:


.nf
  GlobalSection(<section>) = postSolution
    <contents based on property value>
  EndGlobalSection
.fi

Da property must be set ta a semicolon\-separated list of key=value pairs. Each such pair is ghon be transformed tha fuck into a entry up in tha solution global section. I aint talkin' bout chicken n' gravy biatch. Whitespace round key n' value is ignored. Y'all KNOW dat shit, muthafucka! List elements which do not contain a equal sign is skipped.


This property only works fo' Visual Studio 7 n' above; it is ignored on other generators. Da property only applies when set on a gangbangin' finger-lickin' directory whose CMakeLists.txt gotz nuff a project() command.


Note dat CMake generates postSolution sections ExtensibilityGlobals n' ExtensibilityAddIns by default. If you set tha correspondin property, it will override tha default section. I aint talkin' bout chicken n' gravy biatch. For example, settin VS_GLOBAL_SECTION_POST_ExtensibilityGlobals will override tha default contentz of tha ExtensibilityGlobals section, while keepin ExtensibilityAddIns on its default.

.TP
.B VS_GLOBAL_SECTION_PRE_<section>
Specify a preSolution global section up in Visual Studio.

Settin a property like dis generates a entry of tha followin form up in tha solution file:


.nf
  GlobalSection(<section>) = preSolution
    <contents based on property value>
  EndGlobalSection
.fi

Da property must be set ta a semicolon\-separated list of key=value pairs. Each such pair is ghon be transformed tha fuck into a entry up in tha solution global section. I aint talkin' bout chicken n' gravy biatch. Whitespace round key n' value is ignored. Y'all KNOW dat shit, muthafucka! List elements which do not contain a equal sign is skipped.


This property only works fo' Visual Studio 7 n' above; it is ignored on other generators. Da property only applies when set on a gangbangin' finger-lickin' directory whose CMakeLists.txt gotz nuff a project() command.

.SH PROPERTIES ON SOURCE FILES
.TP
.B ABSTRACT
Is dis source file a abstract class.

A property on a source file dat indicates if tha source file represents a cold-ass lil class dat be abstract. This only make sense fo' languages dat gotz a notion of a abstract class n' it is only used by some tools dat wrap classes tha fuck into other languages.

.TP
.B COMPILE_DEFINITIONS
Preprocessor definitions fo' compilin a source file.

Da COMPILE_DEFINITIONS property may be set ta a semicolon\-separated list of preprocessor definitions rockin tha syntax VAR or VAR=value.  Function\-style definitions is not supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  CMake will automatically escape tha value erectly fo' tha natizzle build system (note dat CMake language syntax may require escapes ta specify some joints).  This property may be set on a per\-configuration basis rockin tha name COMPILE_DEFINITIONS_<CONFIG> where <CONFIG> be a upper\-case name (ex. "COMPILE_DEFINITIONS_DEBUG").


CMake will automatically drop some definitions dat is not supported by tha natizzle build tool.  Da VS6 IDE do not support definizzle joints wit spaces (but NMake do).  Xcode do not support per\-configuration definitions on source files.


Disclaimer: Most natizzle build tools have skanky support fo' escapin certain joints, n' you can put dat on yo' toast.  CMake has work\-aroundz fo' nuff cases but some joints may just not be possible ta pass erectly.  If a value do not seem ta be escaped erectly, do not attempt ta work\-around tha problem by addin escape sequences ta tha value.  Yo crazy-ass work\-around may break up in a gangbangin' future version of CMake dat has improved escape support.  Instead consider definin tha macro up in a (configured) header file.  Then report tha limitation. I aint talkin' bout chicken n' gravy biatch.  Known limitations include:


.nf
  #          \- fucked up almost everywhere
  ;          \- fucked up in VS IDE 7.0 n' Borland Makefiles
  ,          \- fucked up in VS IDE
  %          \- fucked up in some cases up in NMake
  & |        \- fucked up in some cases on MinGW
  ^ < > \\"   \- fucked up in most Make tools on Windows
.fi

CMake do not reject these joints outright cuz they do work up in some cases.  Use wit caution. I aint talkin' bout chicken n' gravy biatch.  

.TP
.B COMPILE_DEFINITIONS_<CONFIG>
Per\-configuration preprocessor definitions on a source file.

This is tha configuration\-specific version of COMPILE_DEFINITIONS.  Note dat Xcode do not support per\-configuration source file flags so dis property is ghon be ignored by tha Xcode generator.

.TP
.B COMPILE_FLAGS
Additionizzle flags ta be added when compilin dis source file.

These flags is ghon be added ta tha list of compile flags when dis source file builds.  Use COMPILE_DEFINITIONS ta pass additionizzle preprocessor definitions.

.TP
.B EXTERNAL_OBJECT
If set ta legit then dis be a object file.

If dis property is set ta legit then tha source file is straight-up a object file n' should not be compiled. Y'all KNOW dat shit, muthafucka!  It will still be linked tha fuck into tha target though.

.TP
.B Fortran_FORMAT
Set ta FIXED or FREE ta indicate tha Fortran source layout.

This property  drops some lyrics ta CMake whether a given Fortran source file uses fixed\-format or free\-format.  CMake will pass tha correspondin format flag ta tha compila n' shit.  Consider rockin tha target\-wide Fortran_FORMAT property if all source filez up in a target share tha same format.

.TP
.B GENERATED
Is dis source file generated as part of tha build process.

If a source file is generated by tha build process CMake will handle it differently up in termz of dependency checkin etc. Otherwise havin a non\-existent source file could create problems.

.TP
.B HEADER_FILE_ONLY
Is dis source file only a header file.

A property on a source file dat indicates if tha source file be a header file wit no associated implementation. I aint talkin' bout chicken n' gravy biatch. This is set automatically based on tha file extension n' is used by CMake ta determine if certain dependency shiznit should be computed.

.TP
.B KEEP_EXTENSION
Make tha output file have tha same extension as tha source file.

If dis property is set then tha file extension of tha output file is ghon be tha same as dat of tha source file. Normally tha output file extension is computed based on tha language of tha source file, fo' example .cxx will git all up in a .o extension.

.TP
.B LABELS
Specify a list of text labels associated wit a source file.

This property has meanin only when tha source file is listed up in a target whose LABELS property be also set.  No other semantics is currently specified.

.TP
.B LANGUAGE
What programmin language is tha file.

A property dat can be set ta indicate what tha fuck programmin language tha source file is. If it aint set tha language is determined based on tha file extension. I aint talkin' bout chicken n' gravy biatch. Typical joints is CXX C etc. Right back up in yo muthafuckin ass. Settin dis property fo' a gangbangin' file means dis file is ghon be compiled. Y'all KNOW dat shit, muthafucka! Do not set dis fo' headaz or filez dat should not be compiled.

.TP
.B LOCATION
Da full path ta a source file.

A read only property on a SOURCE FILE dat gotz nuff tha full path ta tha source file.

.TP
.B MACOSX_PACKAGE_LOCATION
Place a source file inside a Mac OS X bundle, CFBundle, or framework.

Executable targets wit tha MACOSX_BUNDLE property set is built as Mac OS X application bundlez on Applez platforms.  Shared library targets wit tha FRAMEWORK property set is built as Mac OS X frameworks on Applez platforms.  Module library targets wit tha BUNDLE property set is built as Mac OS X CFBundle bundlez on Applez platforms.  Source filez listed up in tha target wit dis property set is ghon be copied ta a gangbangin' finger-lickin' directory inside tha bundle or framework content folda specified by tha property value.  For bundlez tha content folda is "<name>.app/Contents".  For frameworks tha content folda is "<name>.framework/Versions/<version>".  For cfbundlez tha content folda is "<name>.bundle/Contents" (unless tha extension is chizzled).  See tha PUBLIC_HEADER, PRIVATE_HEADER, n' RESOURCE target propertizzles fo' specifyin filez meant fo' Headers, PrivateHeaders, or Resources directories.

.TP
.B OBJECT_DEPENDS
Additionizzle filez on which a cold-ass lil compiled object file depends.

Specifies a semicolon\-separated list of full\-paths ta filez on which any object filez compiled from dis source file depend yo, but it ain't no stoppin cause I be still poppin'.  An object file is ghon be recompiled if any of tha named filez is newer than dat shit.


This property need not be used ta specify tha dependency of a source file on a generated header file dat it includes.  Although tha property was originally introduced fo' dis purpose, it is no longer necessary.  If tha generated header file is pimped by a cold-ass lil custom command up in tha same target as tha source file, tha automatic dependency scannin process will recognize tha dependency.  If tha generated header file is pimped by another target, a inter\-target dependency should be pimped wit tha add_dependencies command (if one do not already exist cuz of linkin relationshizzles).

.TP
.B OBJECT_OUTPUTS
Additionizzle outputs fo' a Makefile rule.

Additionizzle outputs pimped by compilation of dis source file. If any of these outputs is missin tha object is ghon be recompiled. Y'all KNOW dat shit, muthafucka! This is supported only on Makefile generators n' is ghon be ignored on other generators.

.TP
.B SYMBOLIC
Is dis just a name fo' a rule.

If SYMBOLIC (boolean) is set ta legit tha build system is ghon be informed dat tha source file aint straight-up pimped on disk but instead used as a symbolic name fo' a funky-ass build rule.

.TP
.B WRAP_EXCLUDE
Exclude dis source file from any code wrappin steez.

Some packages can wrap source filez tha fuck into alternate languages ta provide additionizzle functionality. For example, C++ code can be wrapped tha fuck into Java or Python etc rockin SWIG etc. If WRAP_EXCLUDE is set ta legit (1 etc) dat indicates dat dis source file should not be wrapped.

.SH PROPERTIES ON TARGETS
.TP
.B <CONFIG>_OUTPUT_NAME
Oldskool per\-configuration target file base name.

This be a cold-ass lil configuration\-specific version of OUTPUT_NAME.  Use OUTPUT_NAME_<CONFIG> instead.

.TP
.B <CONFIG>_POSTFIX
Postfix ta append ta tha target file name fo' configuration <CONFIG>.

When buildin wit configuration <CONFIG> tha value of dis property be appended ta tha target file name built on disk.  For non\-executable targets, dis property is initialized by tha value of tha variable CMAKE_<CONFIG>_POSTFIX if it is set when a target is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This property is ignored on tha Mac fo' Frameworks n' App Bundles.

.TP
.B <LANG>_VISIBILITY_PRESET
Value fo' symbol visibilitizzle compile flags

Da <LANG>_VISIBILITY_PRESET property determines tha value passed up in a visibilitizzle related compile option, like fuckin \-fvisibility= fo' <LANG>.  This property only has a affect fo' libraries n' executablez wit exports, n' you can put dat on yo' toast.  This property is initialized by tha value of tha variable CMAKE_<LANG>_VISIBILITY_PRESET if it is set when a target is pimped.

.TP
.B ALIASED_TARGET
Name of target aliased by dis target.

If dis be a ALIAS target, dis property gotz nuff tha name of tha target aliased.

.TP
.B ARCHIVE_OUTPUT_DIRECTORY
Output directory up in which ta build ARCHIVE target files.

This property specifies tha directory tha fuck into which archive target filez should be built. Multi\-configuration generators (VS, Xcode) append a per\-configuration subdirectory ta tha specified directory.  There is three kindz of target filez dat may be built: archive, library, n' runtime.  Executablez is always treated as runtime targets, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Static libraries is always treated as archive targets, n' you can put dat on yo' toast. Module libraries is always treated as library targets, n' you can put dat on yo' toast. For non\-DLL platforms shared libraries is treated as library targets, n' you can put dat on yo' toast. For DLL platforms tha DLL part of a gangbangin' finger-lickin' dirty-ass shared library is treated as a runtime target n' tha correspondin import library is treated as a archive target fo' realz. All Windows\-based systems includin Cygwin is DLL platforms.  This property is initialized by tha value of tha variable CMAKE_ARCHIVE_OUTPUT_DIRECTORY if it is set when a target is pimped.

.TP
.B ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>
Per\-configuration output directory fo' ARCHIVE target files.

This be a per\-configuration version of ARCHIVE_OUTPUT_DIRECTORY yo, but multi\-configuration generators (VS, Xcode) do NOT append a per\-configuration subdirectory ta tha specified directory.  This property is initialized by tha value of tha variable CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG> if it is set when a target is pimped.

.TP
.B ARCHIVE_OUTPUT_NAME
Output name fo' ARCHIVE target files.

This property specifies tha base name fo' archive target files. Well shiiiit, it overrides OUTPUT_NAME n' OUTPUT_NAME_<CONFIG> properties. Put ya muthafuckin choppers up if ya feel dis!  There is three kindz of target filez dat may be built: archive, library, n' runtime.  Executablez is always treated as runtime targets, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Static libraries is always treated as archive targets, n' you can put dat on yo' toast. Module libraries is always treated as library targets, n' you can put dat on yo' toast. For non\-DLL platforms shared libraries is treated as library targets, n' you can put dat on yo' toast. For DLL platforms tha DLL part of a gangbangin' finger-lickin' dirty-ass shared library is treated as a runtime target n' tha correspondin import library is treated as a archive target fo' realz. All Windows\-based systems includin Cygwin is DLL platforms.

.TP
.B ARCHIVE_OUTPUT_NAME_<CONFIG>
Per\-configuration output name fo' ARCHIVE target files.

This is tha configuration\-specific version of ARCHIVE_OUTPUT_NAME.

.TP
.B AUTOMOC
Should tha target be processed wit automoc (for Qt projects).

AUTOMOC be a funky-ass boolean specifyin whether CMake will handle tha Qt moc preprocessor automatically, i.e. without havin ta use tha QT4_WRAP_CPP() or QT5_WRAP_CPP() macro. Currently Qt4 n' Qt5 is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  When dis property is set ta TRUE, CMake will scan tha source filez at build time n' invoke moc accordingly. If a #include statement like #include "moc_foo.cpp" is found, tha Q_OBJECT class declaration is expected up in tha header, n' moc is run on tha header file. If a #include statement like #include "foo.moc" is found, then a Q_OBJECT is expected up in tha current source file n' moc is run on tha file itself fo' realz. Additionally, all header filez is parsed fo' Q_OBJECT macros, n' if found, moc be also executed on dem files. Da resultin moc files, which is not included as shown above up in any of tha source filez is included up in a generated <targetname>_automoc.cpp file, which is compiled as part of tha target.This property is initialized by tha value of tha variable CMAKE_AUTOMOC if it is set when a target is pimped.


Additionizzle command line options fo' moc can be set via tha AUTOMOC_MOC_OPTIONS property.


By settin tha CMAKE_AUTOMOC_RELAXED_MODE variable ta TRUE tha rulez fo' searchin tha filez which is ghon be processed by moc can be chillaxed. Y'all KNOW dat shit, muthafucka! See tha documentation fo' dis variable fo' mo' details.


Da global property AUTOMOC_TARGETS_FOLDER can be used ta crew tha automoc targets together up in a IDE, e.g. up in MSVS.

.TP
.B AUTOMOC_MOC_OPTIONS
Additionizzle options fo' moc when rockin automoc (see tha AUTOMOC property)

This property is only used if tha AUTOMOC property is set ta TRUE fo' dis target. In dis case, it holdz additionizzle command line options which is ghon be used when moc is executed durin tha build, i.e. it is equivalent ta tha optionizzle OPTIONS argument of tha qt4_wrap_cpp() macro.


By default it is empty.

.TP
.B BUILD_WITH_INSTALL_RPATH
Should build tree targets have install tree rpaths.

BUILD_WITH_INSTALL_RPATH be a funky-ass boolean specifyin whether ta link tha target up in tha build tree wit tha INSTALL_RPATH.  This takes precedence over SKIP_BUILD_RPATH n' avoidz tha need fo' relinkin before installation. I aint talkin' bout chicken n' gravy biatch.  This property is initialized by tha value of tha variable CMAKE_BUILD_WITH_INSTALL_RPATH if it is set when a target is pimped.

.TP
.B BUNDLE
This target be a CFBundle on tha Mac.

If a module library target has dis property set ta legit it is ghon be built as a CFBundle when built on tha mac. Well shiiiit, it gonna git tha directory structure required fo' a CFBundle n' is ghon be suitable ta be used fo' bustin Browser Plugins or other application resources.

.TP
.B BUNDLE_EXTENSION
Da file extension used ta name a BUNDLE target on tha Mac.

Da default value is "bundle" \- you can also use "plugin" or whatever file extension is required by tha host app fo' yo' bundle.

.TP
.B COMPATIBLE_INTERFACE_BOOL
Propertizzles which must be compatible wit they link intercourse

Da COMPATIBLE_INTERFACE_BOOL property may contain a list of propertiesfor dis target which must be consistent when evaluated as a funky-ass boolean up in tha INTERFACE of all linked dependees.  For example, if a property "FOO" appears up in tha list, then fo' each dependee, tha "INTERFACE_FOO" property content up in all of its dependencies must be consistent wit each other, n' wit tha "FOO" property up in tha dependee.  Consistency up in dis sense has tha meanin dat if tha property is set, then it must have tha same boolean value as all others, n' if tha property aint set, then it is ignored. Y'all KNOW dat shit, muthafucka!  Note dat fo' each dependee, tha set of propertizzles from dis property must not intersect wit tha set of propertizzles from tha COMPATIBLE_INTERFACE_STRING property.

.TP
.B COMPATIBLE_INTERFACE_STRING
Propertizzles which must be string\-compatible wit they link intercourse

Da COMPATIBLE_INTERFACE_STRING property may contain a list of propertizzles fo' dis target which must be tha same when evaluated as a strang up in tha INTERFACE of all linked dependees.  For example, if a property "FOO" appears up in tha list, then fo' each dependee, tha "INTERFACE_FOO" property content up in all of its dependencies must be equal wit each other, n' wit tha "FOO" property up in tha dependee.  If tha property aint set, then it is ignored. Y'all KNOW dat shit, muthafucka!  Note dat fo' each dependee, tha set of propertizzles from dis property must not intersect wit tha set of propertizzles from tha COMPATIBLE_INTERFACE_BOOL property.

.TP
.B COMPILE_DEFINITIONS
Preprocessor definitions fo' compilin a targetz sources.

Da COMPILE_DEFINITIONS property may be set ta a semicolon\-separated list of preprocessor definitions rockin tha syntax VAR or VAR=value.  Function\-style definitions is not supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  CMake will automatically escape tha value erectly fo' tha natizzle build system (note dat CMake language syntax may require escapes ta specify some joints).  This property may be set on a per\-configuration basis rockin tha name COMPILE_DEFINITIONS_<CONFIG> where <CONFIG> be a upper\-case name (ex. "COMPILE_DEFINITIONS_DEBUG").


CMake will automatically drop some definitions dat is not supported by tha natizzle build tool.  Da VS6 IDE do not support definizzle joints wit spaces (but NMake do).


Contentz of COMPILE_DEFINITIONS may use "generator expressions" wit tha syntax "$<...>".  Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

Disclaimer: Most natizzle build tools have skanky support fo' escapin certain joints, n' you can put dat on yo' toast.  CMake has work\-aroundz fo' nuff cases but some joints may just not be possible ta pass erectly.  If a value do not seem ta be escaped erectly, do not attempt ta work\-around tha problem by addin escape sequences ta tha value.  Yo crazy-ass work\-around may break up in a gangbangin' future version of CMake dat has improved escape support.  Instead consider definin tha macro up in a (configured) header file.  Then report tha limitation. I aint talkin' bout chicken n' gravy biatch.  Known limitations include:


.nf
  #          \- fucked up almost everywhere
  ;          \- fucked up in VS IDE 7.0 n' Borland Makefiles
  ,          \- fucked up in VS IDE
  %          \- fucked up in some cases up in NMake
  & |        \- fucked up in some cases on MinGW
  ^ < > \\"   \- fucked up in most Make tools on Windows
.fi

CMake do not reject these joints outright cuz they do work up in some cases.  Use wit caution. I aint talkin' bout chicken n' gravy biatch.  

.TP
.B COMPILE_DEFINITIONS_<CONFIG>
Per\-configuration preprocessor definitions on a target.

This is tha configuration\-specific version of COMPILE_DEFINITIONS.

.TP
.B COMPILE_FLAGS
Additionizzle flags ta use when compilin dis targetz sources.

Da COMPILE_FLAGS property sets additionizzle compila flags used ta build sources within tha target.  Use COMPILE_DEFINITIONS ta pass additionizzle preprocessor definitions.

.TP
.B COMPILE_OPTIONS
List of options ta pass ta tha compiler.

This property specifies tha list of options specified so far fo' dis property.  This property exists on directories n' targets.


Da target property joints is used by tha generators ta set tha options fo' tha compiler.


Contentz of COMPILE_OPTIONS may use "generator expressions" wit tha syntax "$<...>".  Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

.TP
.B DEBUG_POSTFIX
See target property <CONFIG>_POSTFIX.

This property be a special case of tha more\-general <CONFIG>_POSTFIX property fo' tha DEBUG configuration.

.TP
.B DEFINE_SYMBOL
Define a symbol when compilin dis targetz sources.

DEFINE_SYMBOL sets tha name of tha preprocessor symbol defined when compilin sources up in a gangbangin' finger-lickin' dirty-ass shared library. If not set here then it is set ta target_EXPORTS by default (with some substitutions if tha target aint a valid C identifier). This is useful fo' headaz ta know whether they is bein included from inside they library or outside ta properly setup dllexport/dllimport decorations. 

.TP
.B ENABLE_EXPORTS
Specify whether a executable exports symbols fo' loadable modules.

Normally a executable do not export any symbols cuz it is tha final program.  It be possible fo' a executable ta export symbols ta be used by loadable modules.  When dis property is set ta legit CMake will allow other targets ta "link" ta tha executable wit tha TARGET_LINK_LIBRARIES command. Y'all KNOW dat shit, muthafucka!  On all platforms a target\-level dependency on tha executable is pimped fo' targets dat link ta dat shit.  For DLL platforms a import library is ghon be pimped fo' tha exported symbols n' then used fo' linking.  All Windows\-based systems includin Cygwin is DLL platforms.  For non\-DLL platforms dat require all symbols ta be resolved at link time, like fuckin Mac OS X, tha module will "link" ta tha executable rockin a gangbangin' flag like "\-bundle_loader".  For other non\-DLL platforms tha link rule is simply ignored since tha dynamic loader will automatically bind symbols when tha module is loaded. Y'all KNOW dat shit, muthafucka!  

.TP
.B EXCLUDE_FROM_ALL
Exclude tha target from tha all target.

A property on a target dat indicates if tha target is excluded from tha default build target. If it is not, then wit a Makefile fo' example typin make will cause dis target ta be built. Da same concept applies ta tha default build of other generators. Installin a target wit EXCLUDE_FROM_ALL set ta legit has undefined behavior.

.TP
.B EXCLUDE_FROM_DEFAULT_BUILD
Exclude target from "Build Solution".

This property is only used by Visual Studio generators 7 n' above. When set ta TRUE, tha target aint gonna be built when you press "Build Solution".

.TP
.B EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>
Per\-configuration version of target exclusion from "Build Solution". 

This is tha configuration\-specific version of EXCLUDE_FROM_DEFAULT_BUILD. If tha generic EXCLUDE_FROM_DEFAULT_BUILD be also set on a target, EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG> takes precedence up in configurations fo' which it has a value.

.TP
.B EXPORT_NAME
Exported name fo' target files.

This sets tha name fo' tha IMPORTED target generated when it dis target is is exported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If not set, tha logical target name is used by default.

.TP
.B EchoString
A message ta be displayed when tha target is built.

A message ta display on some generators (like fuckin makefiles) when tha target is built.

.TP
.B FOLDER
Set tha folda name. Use ta organize targets up in a IDE.

Targets wit no FOLDER property will step tha fuck up as top level entitizzles up in IDEs like Visual Studio. Targets wit tha same FOLDER property value will step tha fuck up next ta each other up in a gangbangin' folda of dat name. To nest folders, use FOLDER joints like fuckin 'GUI/Dialogs' wit '/' charactas separatin folda levels.

.TP
.B FRAMEWORK
This target be a gangbangin' framework on tha Mac.

If a gangbangin' finger-lickin' dirty-ass shared library target has dis property set ta legit it is ghon be built as a gangbangin' framework when built on tha mac. Well shiiiit, it gonna git tha directory structure required fo' a gangbangin' framework n' is ghon be suitable ta be used wit tha \-framework option

.TP
.B Fortran_FORMAT
Set ta FIXED or FREE ta indicate tha Fortran source layout.

This property  drops some lyrics ta CMake whether tha Fortran source filez up in a target use fixed\-format or free\-format.  CMake will pass tha correspondin format flag ta tha compila n' shit.  Use tha source\-specific Fortran_FORMAT property ta chizzle tha format of a specific source file.  If tha variable CMAKE_Fortran_FORMAT is set when a target is pimped its value is used ta initialize dis property.

.TP
.B Fortran_MODULE_DIRECTORY
Specify output directory fo' Fortran modulez provided by tha target.

If tha target gotz nuff Fortran source filez dat provide modulez n' tha compila supports a module output directory dis specifies tha directory up in which tha modulez is ghon be placed. Y'all KNOW dat shit, muthafucka!  When dis property aint set tha modulez is ghon be placed up in tha build directory correspondin ta tha targetz source directory.  If tha variable CMAKE_Fortran_MODULE_DIRECTORY is set when a target is pimped its value is used ta initialize dis property.


Note dat some compilaz will automatically search tha module output directory fo' modulez USEd durin compilation but others will not.  If yo' sources USE modulez they location must be specified by INCLUDE_DIRECTORIES regardless of dis property.

.TP
.B GENERATOR_FILE_NAME
Generatorz file fo' dis target.

An internal property used by some generators ta record tha name of tha project or dsp file associated wit dis target. Note dat at configure time, dis property is only set fo' targets pimped by include_external_msproject().

.TP
.B GNUtoMS
Convert GNU import library (.dll.a) ta MS format (.lib).

When linkin a gangbangin' finger-lickin' dirty-ass shared library or executable dat exports symbols rockin GNU tools on Windows (MinGW/MSYS) wit Visual Studio installed convert tha import library (.dll.a) from GNU ta MS format (.lib).  Both import libraries is ghon be installed by install(TARGETS) n' exported by install(EXPORT) n' export() ta be linked by applications wit either GNU\- or MS\-compatible tools.


If tha variable CMAKE_GNUtoMS is set when a target is pimped its value is used ta initialize dis property.  Da variable must be set prior ta tha straight-up original gangsta command dat enablez a language like fuckin project() or enable_language().  CMake serves up tha variable as a option ta tha user automatically when configurin on Windows wit GNU tools.

.TP
.B HAS_CXX
Link tha target rockin tha C++ linker tool (obsolete).

This is equivalent ta settin tha LINKER_LANGUAGE property ta CXX.  See dat propertyz documentation fo' details.

.TP
.B IMPLICIT_DEPENDS_INCLUDE_TRANSFORM
Specify #include line transforms fo' dependencies up in a target.

This property specifies rulez ta transform macro\-like #include lines durin implicit dependency scannin of C n' C++ source files.  Da list of rulez must be semicolon\-separated wit each entry of tha form "A_MACRO(%)=value\-with\-%" (the % must be literal).  Durin dependency scannin occurrencez of A_MACRO(...) on #include lines is ghon be replaced by tha value given wit tha macro argument substituted fo' '%'.  For example, tha entry


.nf
  MYDIR(%)=<mydir/%>
.fi

will convert linez of tha form


.nf
  #include MYDIR(myheader.h)
.fi

to


.nf
  #include <mydir/myheader.h>
.fi

allowin tha dependency ta be followed.


This property applies ta sources up in tha target on which it is set.

.TP
.B IMPORTED
Read\-only indication of whether a target is IMPORTED.

Da boolean value of dis property is legit fo' targets pimped wit tha IMPORTED option ta add_executable or add_library.  It be false fo' targets built within tha project.

.TP
.B IMPORTED_CONFIGURATIONS
Configurations provided fo' a IMPORTED target.

Set dis ta tha list of configuration names available fo' a IMPORTED target.  Da names correspond ta configurations defined up in tha project from which tha target is imported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If tha importin project uses a gangbangin' finger-lickin' different set of configurations tha names may be mapped rockin tha MAP_IMPORTED_CONFIG_<CONFIG> property.  Ignored fo' non\-imported targets.

.TP
.B IMPORTED_IMPLIB
Full path ta tha import library fo' a IMPORTED target.

Set dis ta tha location of tha ".lib" part of a windows DLL.  Ignored fo' non\-imported targets.

.TP
.B IMPORTED_IMPLIB_<CONFIG>
<CONFIG>\-specific version of IMPORTED_IMPLIB property.

Configuration names correspond ta dem provided by tha project from which tha target is imported.

.TP
.B IMPORTED_LINK_DEPENDENT_LIBRARIES
Dependent shared librariez of a imported shared library.

Shared libraries may be linked ta other shared libraries as part of they implementation. I aint talkin' bout chicken n' gravy biatch.  On some platforms tha linker searches fo' tha dependent librariez of shared libraries they is includin up in tha link.  Set dis property ta tha list of dependent shared librariez of a imported library.  Da list should be disjoint from tha list of intercourse libraries up in tha INTERFACE_LINK_LIBRARIES property.  On platforms requirin dependent shared libraries ta be found at link time CMake uses dis list ta add appropriate filez or paths ta tha link command line.  Ignored fo' non\-imported targets.

.TP
.B IMPORTED_LINK_DEPENDENT_LIBRARIES_<CONFIG>
<CONFIG>\-specific version of IMPORTED_LINK_DEPENDENT_LIBRARIES.

Configuration names correspond ta dem provided by tha project from which tha target is imported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If set, dis property straight-up overrides tha generic property fo' tha named configuration.

.TP
.B IMPORTED_LINK_INTERFACE_LANGUAGES
Languages compiled tha fuck into a IMPORTED static library.

Set dis ta tha list of languagez of source filez compiled ta produce a STATIC IMPORTED library (like fuckin "C" or "CXX").  CMake accounts fo' these languages when computin how tha fuck ta link a target ta tha imported library.  For example, when a C executable links ta a imported C++ static library CMake chizzlez tha C++ linker ta satisfy language runtime dependenciez of tha static library.  


This property is ignored fo' targets dat is not STATIC libraries. Put ya muthafuckin choppers up if ya feel dis!  This property is ignored fo' non\-imported targets.

.TP
.B IMPORTED_LINK_INTERFACE_LANGUAGES_<CONFIG>
<CONFIG>\-specific version of IMPORTED_LINK_INTERFACE_LANGUAGES.

Configuration names correspond ta dem provided by tha project from which tha target is imported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If set, dis property straight-up overrides tha generic property fo' tha named configuration.

.TP
.B IMPORTED_LINK_INTERFACE_LIBRARIES
Transitizzle link intercourse of a IMPORTED target.

Set dis ta tha list of libraries whose intercourse is included when a IMPORTED library target is linked ta another target.  Da libraries is ghon be included on tha link line fo' tha target.  Unlike tha LINK_INTERFACE_LIBRARIES property, dis property applies ta all imported target types, includin STATIC libraries. Put ya muthafuckin choppers up if ya feel dis!  This property is ignored fo' non\-imported targets.


This property is ignored if tha target also has a non\-empty INTERFACE_LINK_LIBRARIES property.


This property is deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use INTERFACE_LINK_LIBRARIES instead.

.TP
.B IMPORTED_LINK_INTERFACE_LIBRARIES_<CONFIG>
<CONFIG>\-specific version of IMPORTED_LINK_INTERFACE_LIBRARIES.

Configuration names correspond ta dem provided by tha project from which tha target is imported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If set, dis property straight-up overrides tha generic property fo' tha named configuration.


This property is ignored if tha target also has a non\-empty INTERFACE_LINK_LIBRARIES property.


This property is deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use INTERFACE_LINK_LIBRARIES instead.

.TP
.B IMPORTED_LINK_INTERFACE_MULTIPLICITY
Repetizzle count fo' cyclez of IMPORTED static libraries.

This is LINK_INTERFACE_MULTIPLICITY fo' IMPORTED targets.

.TP
.B IMPORTED_LINK_INTERFACE_MULTIPLICITY_<CONFIG>
<CONFIG>\-specific version of IMPORTED_LINK_INTERFACE_MULTIPLICITY.

If set, dis property straight-up overrides tha generic property fo' tha named configuration.

.TP
.B IMPORTED_LOCATION
Full path ta tha main file on disk fo' a IMPORTED target.

Set dis ta tha location of a IMPORTED target file on disk.  For executablez dis is tha location of tha executable file.  For bundlez on OS X dis is tha location of tha executable file inside Contents/MacOS under tha application bundle folda n' shit.  For static libraries n' modulez dis is tha location of tha library or module.  For shared libraries on non\-DLL platforms dis is tha location of tha shared library.  For frameworks on OS X dis is tha location of tha library file symlink just inside tha framework folda n' shit.  For DLLs dis is tha location of tha ".dll" part of tha library.  For UNKNOWN libraries dis is tha location of tha file ta be linked. Y'all KNOW dat shit, muthafucka!  Ignored fo' non\-imported targets.


Projects may skip IMPORTED_LOCATION if tha configuration\-specific property IMPORTED_LOCATION_<CONFIG> is set.  To git tha location of a imported target read one of tha LOCATION or LOCATION_<CONFIG> properties.

.TP
.B IMPORTED_LOCATION_<CONFIG>
<CONFIG>\-specific version of IMPORTED_LOCATION property.

Configuration names correspond ta dem provided by tha project from which tha target is imported.

.TP
.B IMPORTED_NO_SONAME
Specifies dat a IMPORTED shared library target has no "soname".  

Set dis property ta legit fo' a imported shared library file dat has no "soname" field. Y'all KNOW dat shit, muthafucka!  CMake may adjust generated link commandz fo' some platforms ta prevent tha linker from rockin tha path ta tha library up in place of its missin soname.  Ignored fo' non\-imported targets.

.TP
.B IMPORTED_NO_SONAME_<CONFIG>
<CONFIG>\-specific version of IMPORTED_NO_SONAME property.

Configuration names correspond ta dem provided by tha project from which tha target is imported.

.TP
.B IMPORTED_SONAME
Da "soname" of a IMPORTED target of shared library type.

Set dis ta tha "soname" embedded up in a imported shared library.  This is meaningful only on platforms supportin tha feature.  Ignored fo' non\-imported targets.

.TP
.B IMPORTED_SONAME_<CONFIG>
<CONFIG>\-specific version of IMPORTED_SONAME property.

Configuration names correspond ta dem provided by tha project from which tha target is imported.

.TP
.B IMPORT_PREFIX
What comes before tha import library name.

Similar ta tha target property PREFIX yo, but used fo' import libraries (typically correspondin ta a DLL) instead of regular libraries fo' realz. A target property dat can be set ta override tha prefix (like fuckin "lib") on a import library name.

.TP
.B IMPORT_SUFFIX
What comes afta tha import library name.

Similar ta tha target property SUFFIX yo, but used fo' import libraries (typically correspondin ta a DLL) instead of regular libraries fo' realz. A target property dat can be set ta override tha suffix (like fuckin ".lib") on a import library name.

.TP
.B INCLUDE_DIRECTORIES
List of preprocessor include file search directories.

This property specifies tha list of directories given so far ta tha include_directories command. Y'all KNOW dat shit, muthafucka! This property exists on directories n' targets, n' you can put dat on yo' toast. In addizzle ta acceptin joints from tha include_directories command, joints may be set directly on any directory or any target rockin tha set_property command. Y'all KNOW dat shit, muthafucka! A target gets its initial value fo' dis property from tha value of tha directory property fo' realz. A directory gets its initial value from its parent directory if it has one. Both directory n' target property joints is adjusted by calls ta tha include_directories command.


Da target property joints is used by tha generators ta set tha include paths fo' tha compila n' shit.  See also tha include_directories command.


Contentz of INCLUDE_DIRECTORIES may use "generator expressions" wit tha syntax "$<...>".  Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

.TP
.B INSTALL_NAME_DIR
Mac OSX directory name fo' installed targets.

INSTALL_NAME_DIR be a strang specifyin tha directory portion of tha "install_name" field of shared libraries on Mac OSX ta use up in tha installed targets, n' you can put dat on yo' toast. 

.TP
.B INSTALL_RPATH
Da rpath ta use fo' installed targets.

A semicolon\-separated list specifyin tha rpath ta use up in installed targets (for platforms dat support it).  This property is initialized by tha value of tha variable CMAKE_INSTALL_RPATH if it is set when a target is pimped.

.TP
.B INSTALL_RPATH_USE_LINK_PATH
Add paths ta linker search n' installed rpath.

INSTALL_RPATH_USE_LINK_PATH be a funky-ass boolean dat if set ta legit will append directories up in tha linker search path n' outside tha project ta tha INSTALL_RPATH.  This property is initialized by tha value of tha variable CMAKE_INSTALL_RPATH_USE_LINK_PATH if it is set when a target is pimped.

.TP
.B INTERFACE_COMPILE_DEFINITIONS
List of hood compile definitions fo' a library.

Targets may populate dis property ta publish tha compile definitions required ta compile against tha headaz fo' tha target.  Consumin targets can add entries ta they own COMPILE_DEFINITIONS property like fuckin $<TARGET_PROPERTY:foo,INTERFACE_COMPILE_DEFINITIONS> ta use tha compile definitions specified up in tha intercourse of 'foo'.


Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

.TP
.B INTERFACE_COMPILE_OPTIONS
List of intercourse options ta pass ta tha compiler.

Targets may populate dis property ta publish tha compile options required ta compile against tha headaz fo' tha target.  Consumin targets can add entries ta they own COMPILE_OPTIONS property like fuckin $<TARGET_PROPERTY:foo,INTERFACE_COMPILE_OPTIONS> ta use tha compile options specified up in tha intercourse of 'foo'.


Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

.TP
.B INTERFACE_INCLUDE_DIRECTORIES
List of hood include directories fo' a library.

Targets may populate dis property ta publish tha include directories required ta compile against tha headaz fo' tha target.  Consumin targets can add entries ta they own INCLUDE_DIRECTORIES property like fuckin $<TARGET_PROPERTY:foo,INTERFACE_INCLUDE_DIRECTORIES> ta use tha include directories specified up in tha intercourse of 'foo'.


Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

.TP
.B INTERFACE_LINK_LIBRARIES
List hood intercourse libraries fo' a library.

This property gotz nuff tha list of transitizzle link dependencies. Put ya muthafuckin choppers up if ya feel dis!  When tha target is linked tha fuck into another target tha libraries listed (and recursively they link intercourse libraries) is ghon be provided ta tha other target also.  This property is overridden by tha LINK_INTERFACE_LIBRARIES or LINK_INTERFACE_LIBRARIES_<CONFIG> property if policy CMP0022 is OLD or unset.





Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

.TP
.B INTERFACE_POSITION_INDEPENDENT_CODE
Whether thugs need ta create a position\-independent target

Da INTERFACE_POSITION_INDEPENDENT_CODE property informs thugz of dis target whether they must set they POSITION_INDEPENDENT_CODE property ta ON.  If dis property is set ta ON, then tha POSITION_INDEPENDENT_CODE property on all thugs is ghon be set ta ON.  Similarly, if dis property is set ta OFF, then tha POSITION_INDEPENDENT_CODE property on all thugs is ghon be set ta OFF.  If dis property is undefined, then thugs will determine they POSITION_INDEPENDENT_CODE property by other means.  Consumers must ensure dat tha targets dat they link ta git a cold-ass lil consistent requirement fo' they INTERFACE_POSITION_INDEPENDENT_CODE property.

.TP
.B INTERFACE_SYSTEM_INCLUDE_DIRECTORIES
List of hood system include directories fo' a library.

Targets may populate dis property ta publish tha include directories which contain system headers, n' therefore should not result up in compila warnings.  Consumin targets will then mark tha same include directories as system headers.


Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

.TP
.B INTERPROCEDURAL_OPTIMIZATION
Enable interprocedural optimization fo' a target.

If set ta true, enablez interprocedural optimizations if they is known ta be supported by tha compiler.

.TP
.B INTERPROCEDURAL_OPTIMIZATION_<CONFIG>
Per\-configuration interprocedural optimization fo' a target.

This be a per\-configuration version of INTERPROCEDURAL_OPTIMIZATION.  If set, dis property overrides tha generic property fo' tha named configuration.

.TP
.B LABELS
Specify a list of text labels associated wit a target.

Target label semantics is currently unspecified.

.TP
.B LIBRARY_OUTPUT_DIRECTORY
Output directory up in which ta build LIBRARY target files.

This property specifies tha directory tha fuck into which library target filez should be built. Multi\-configuration generators (VS, Xcode) append a per\-configuration subdirectory ta tha specified directory.  There is three kindz of target filez dat may be built: archive, library, n' runtime.  Executablez is always treated as runtime targets, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Static libraries is always treated as archive targets, n' you can put dat on yo' toast. Module libraries is always treated as library targets, n' you can put dat on yo' toast. For non\-DLL platforms shared libraries is treated as library targets, n' you can put dat on yo' toast. For DLL platforms tha DLL part of a gangbangin' finger-lickin' dirty-ass shared library is treated as a runtime target n' tha correspondin import library is treated as a archive target fo' realz. All Windows\-based systems includin Cygwin is DLL platforms.  This property is initialized by tha value of tha variable CMAKE_LIBRARY_OUTPUT_DIRECTORY if it is set when a target is pimped.

.TP
.B LIBRARY_OUTPUT_DIRECTORY_<CONFIG>
Per\-configuration output directory fo' LIBRARY target files.

This be a per\-configuration version of LIBRARY_OUTPUT_DIRECTORY yo, but multi\-configuration generators (VS, Xcode) do NOT append a per\-configuration subdirectory ta tha specified directory.  This property is initialized by tha value of tha variable CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG> if it is set when a target is pimped.

.TP
.B LIBRARY_OUTPUT_NAME
Output name fo' LIBRARY target files.

This property specifies tha base name fo' library target files. Well shiiiit, it overrides OUTPUT_NAME n' OUTPUT_NAME_<CONFIG> properties. Put ya muthafuckin choppers up if ya feel dis!  There is three kindz of target filez dat may be built: archive, library, n' runtime.  Executablez is always treated as runtime targets, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Static libraries is always treated as archive targets, n' you can put dat on yo' toast. Module libraries is always treated as library targets, n' you can put dat on yo' toast. For non\-DLL platforms shared libraries is treated as library targets, n' you can put dat on yo' toast. For DLL platforms tha DLL part of a gangbangin' finger-lickin' dirty-ass shared library is treated as a runtime target n' tha correspondin import library is treated as a archive target fo' realz. All Windows\-based systems includin Cygwin is DLL platforms.

.TP
.B LIBRARY_OUTPUT_NAME_<CONFIG>
Per\-configuration output name fo' LIBRARY target files.

This is tha configuration\-specific version of LIBRARY_OUTPUT_NAME.

.TP
.B LINKER_LANGUAGE
Specifies language whose compila will invoke tha linker.

For executables, shared libraries, n' modules, dis sets tha language whose compila is used ta link tha target (like fuckin "C" or "CXX").  A typical value fo' a executable is tha language of tha source file providin tha program entry point (main).  If not set, tha language wit tha highest linker preference value is tha default.  See documentation of CMAKE_<LANG>_LINKER_PREFERENCE variables.


If dis property aint set by tha user, it is ghon be calculated at generate\-time by CMake.

.TP
.B LINK_DEPENDS
Additionizzle filez on which a target binary dependz fo' linking.

Specifies a semicolon\-separated list of full\-paths ta filez on which tha link rule fo' dis target depends.  Da target binary is ghon be linked if any of tha named filez is newer than dat shit.


This property is ignored by non\-Makefile generators.  It be intended ta specify dependencies on "linker scripts" fo' custom Makefile link rules.

.TP
.B LINK_DEPENDS_NO_SHARED
Do not depend on linked shared library files.

Set dis property ta legit ta tell CMake generators not ta add file\-level dependencies on tha shared library filez linked by dis target.  Modification ta tha shared libraries aint gonna be sufficient ta re\-link dis target.  Logical target\-level dependencies aint gonna be affected so tha linked shared libraries will still be brought up ta date before dis target is built.


This property is initialized by tha value of tha variable CMAKE_LINK_DEPENDS_NO_SHARED if it is set when a target is pimped.

.TP
.B LINK_FLAGS
Additionizzle flags ta use when linkin dis target.

Da LINK_FLAGS property can be used ta add extra flags ta tha link step of a target. LINK_FLAGS_<CONFIG> will add ta tha configuration <CONFIG>, fo' example, DEBUG, RELEASE, MINSIZEREL, RELWITHDEBINFO. 

.TP
.B LINK_FLAGS_<CONFIG>
Per\-configuration linker flags fo' a target.

This is tha configuration\-specific version of LINK_FLAGS.

.TP
.B LINK_INTERFACE_LIBRARIES
List hood intercourse libraries fo' a gangbangin' finger-lickin' dirty-ass shared library or executable.

By default linkin ta a gangbangin' finger-lickin' dirty-ass shared library target transitively links ta targets wit which tha library itself was linked. Y'all KNOW dat shit, muthafucka!  For a executable wit exports (see tha ENABLE_EXPORTS property) no default transitizzle link dependencies is used. Y'all KNOW dat shit, muthafucka!  This property replaces tha default transitizzle link dependencies wit a explicit list.  When tha target is linked tha fuck into another target tha libraries listed (and recursively they link intercourse libraries) is ghon be provided ta tha other target also.  If tha list is empty then no transitizzle link dependencies is ghon be incorporated when dis target is linked tha fuck into another target even if tha default set is non\-empty.  This property is initialized by tha value of tha variable CMAKE_LINK_INTERFACE_LIBRARIES if it is set when a target is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This property is ignored fo' STATIC libraries.


This property is overridden by tha INTERFACE_LINK_LIBRARIES property if policy CMP0022 is NEW.


This property is deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use INTERFACE_LINK_LIBRARIES instead.

.TP
.B LINK_INTERFACE_LIBRARIES_<CONFIG>
Per\-configuration list of hood intercourse libraries fo' a target.

This is tha configuration\-specific version of LINK_INTERFACE_LIBRARIES.  If set, dis property straight-up overrides tha generic property fo' tha named configuration.


This property is overridden by tha INTERFACE_LINK_LIBRARIES property if policy CMP0022 is NEW.


This property is deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use INTERFACE_LINK_LIBRARIES instead.

.TP
.B LINK_INTERFACE_MULTIPLICITY
Repetizzle count fo' STATIC libraries wit cyclic dependencies.

When linkin ta a STATIC library target wit cyclic dependencies tha linker may need ta scan mo' than once all up in tha archives up in tha straight fuckin connected component of tha dependency graph.  CMake by default constructs tha link line so dat tha linker will scan all up in tha component at least twice.  This property specifies tha minimum number of scans if it is larger than tha default.  CMake uses tha phattest value specified by any target up in a cold-ass lil component.

.TP
.B LINK_INTERFACE_MULTIPLICITY_<CONFIG>
Per\-configuration repetizzle count fo' cyclez of STATIC libraries.

This is tha configuration\-specific version of LINK_INTERFACE_MULTIPLICITY.  If set, dis property straight-up overrides tha generic property fo' tha named configuration.

.TP
.B LINK_LIBRARIES
List of direct link dependencies.

This property specifies tha list of libraries or targets which is ghon be used fo' linking. In addizzle ta acceptin joints from tha target_link_libraries command, joints may be set directly on any target rockin tha set_property command. Y'all KNOW dat shit, muthafucka! 


Da target property joints is used by tha generators ta set tha link libraries fo' tha compila n' shit.  See also tha target_link_libraries command.


Contentz of LINK_LIBRARIES may use "generator expressions" wit tha syntax "$<...>".  Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

.TP
.B LINK_SEARCH_END_STATIC
End a link line such dat static system libraries is used.

Some linkers support switches like fuckin \-Bstatic n' \-Bdynamic ta determine whether ta use static or shared libraries fo' \-lXXX options.  CMake uses these options ta set tha link type fo' libraries whose full paths is not known or (in some cases) is up in implicit link directories fo' tha platform.  By default CMake addz a option all up in tha end of tha library list (if necessary) ta set tha linker search type back ta its startin type.  This property switches tha final linker search type ta \-Bstatic regardless of how tha fuck it started. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See also LINK_SEARCH_START_STATIC.

.TP
.B LINK_SEARCH_START_STATIC
Assume tha linker looks fo' static libraries by default.

Some linkers support switches like fuckin \-Bstatic n' \-Bdynamic ta determine whether ta use static or shared libraries fo' \-lXXX options.  CMake uses these options ta set tha link type fo' libraries whose full paths is not known or (in some cases) is up in implicit link directories fo' tha platform.  By default tha linker search type be assumed ta be \-Bdynamic all up in tha beginnin of tha library list.  This property switches tha assumption ta \-Bstatic.  It be intended fo' use when linkin a executable statically (e.g. wit tha GNU \-static option).  See also LINK_SEARCH_END_STATIC.

.TP
.B LOCATION
Read\-only location of a target on disk.

For a imported target, dis read\-only property returns tha value of tha LOCATION_<CONFIG> property fo' a unspecified configuration <CONFIG> provided by tha target.


For a non\-imported target, dis property is provided fo' compatibilitizzle wit CMake 2.4 n' below.  Dat shiznit was meant ta git tha location of a executable targetz output file fo' use up in add_custom_command. Y'all KNOW dat shit, muthafucka!  Da path may contain a funky-ass build\-system\-specific portion dat is replaced at build time wit tha configuration gettin built (like fuckin "$(ConfigurationName)" up in VS). In CMake 2.6 n' above add_custom_command automatically recognizes a target name up in its COMMAND n' DEPENDS options n' computes tha target location. I aint talkin' bout chicken n' gravy biatch.  In CMake 2.8.4 n' above add_custom_command recognizes generator expressions ta refer ta target locations anywhere up in tha command. Y'all KNOW dat shit, muthafucka!  Therefore dis property aint needed fo' bustin custom commands.


Do not set propertizzles dat affect tha location of a target afta readin dis property.  These include propertizzles whose names match "(RUNTIME|LIBRARY|ARCHIVE)_OUTPUT_(NAME|DIRECTORY)(_<CONFIG>)?", "(IMPLIB_)?(PREFIX|SUFFIX)", or "LINKER_LANGUAGE".  Failure ta follow dis rule aint diagnosed n' leaves tha location of tha target undefined.

.TP
.B LOCATION_<CONFIG>
Read\-only property providin a target location on disk.

A read\-only property dat indicates where a targetz main file is located on disk fo' tha configuration <CONFIG>.  Da property is defined only fo' library n' executable targets, n' you can put dat on yo' toast.  An imported target may provide a set of configurations different from dat of tha importin project.  By default CMake looks fo' a exact\-match but otherwise uses a arbitrary available configuration. I aint talkin' bout chicken n' gravy biatch.  Use tha MAP_IMPORTED_CONFIG_<CONFIG> property ta map imported configurations explicitly.


Do not set propertizzles dat affect tha location of a target afta readin dis property.  These include propertizzles whose names match "(RUNTIME|LIBRARY|ARCHIVE)_OUTPUT_(NAME|DIRECTORY)(_<CONFIG>)?", "(IMPLIB_)?(PREFIX|SUFFIX)", or "LINKER_LANGUAGE".  Failure ta follow dis rule aint diagnosed n' leaves tha location of tha target undefined.

.TP
.B MACOSX_BUNDLE
Build a executable as a application bundle on Mac OS X.

When dis property is set ta legit tha executable when built on Mac OS X is ghon be pimped as a application bundle.  This make it a GUI executable dat can be launched from tha Finder n' shit.  See tha MACOSX_BUNDLE_INFO_PLIST target property fo' shiznit bout creation of tha Info.plist file fo' tha application bundle.  This property is initialized by tha value of tha variable CMAKE_MACOSX_BUNDLE if it is set when a target is pimped.

.TP
.B MACOSX_BUNDLE_INFO_PLIST
Specify a cold-ass lil custom Info.plist template fo' a Mac OS X App Bundle.

An executable target wit MACOSX_BUNDLE enabled is ghon be built as a application bundle on Mac OS X.  By default its Info.plist file is pimped by configurin a template called MacOSXBundleInfo.plist.in located up in tha CMAKE_MODULE_PATH.  This property specifies a alternatizzle template file name which may be a gangbangin' full path.


Da followin target propertizzles may be set ta specify content ta be configured tha fuck into tha file:


.nf
  MACOSX_BUNDLE_INFO_STRING
  MACOSX_BUNDLE_ICON_FILE
  MACOSX_BUNDLE_GUI_IDENTIFIER
  MACOSX_BUNDLE_LONG_VERSION_STRING
  MACOSX_BUNDLE_BUNDLE_NAME
  MACOSX_BUNDLE_SHORT_VERSION_STRING
  MACOSX_BUNDLE_BUNDLE_VERSION
  MACOSX_BUNDLE_COPYRIGHT
.fi

CMake variablez of tha same name may be set ta affect all targets up in a gangbangin' finger-lickin' directory dat aint gots each specific property set.  If a cold-ass lil custom Info.plist is specified by dis property it may of course hard\-code all tha settings instead of rockin tha target properties.

.TP
.B MACOSX_FRAMEWORK_INFO_PLIST
Specify a cold-ass lil custom Info.plist template fo' a Mac OS X Framework.

A library target wit FRAMEWORK enabled is ghon be built as a gangbangin' framework on Mac OS X.  By default its Info.plist file is pimped by configurin a template called MacOSXFrameworkInfo.plist.in located up in tha CMAKE_MODULE_PATH.  This property specifies a alternatizzle template file name which may be a gangbangin' full path.


Da followin target propertizzles may be set ta specify content ta be configured tha fuck into tha file:


.nf
  MACOSX_FRAMEWORK_ICON_FILE
  MACOSX_FRAMEWORK_IDENTIFIER
  MACOSX_FRAMEWORK_SHORT_VERSION_STRING
  MACOSX_FRAMEWORK_BUNDLE_VERSION
.fi

CMake variablez of tha same name may be set ta affect all targets up in a gangbangin' finger-lickin' directory dat aint gots each specific property set.  If a cold-ass lil custom Info.plist is specified by dis property it may of course hard\-code all tha settings instead of rockin tha target properties.

.TP
.B MACOSX_RPATH
Whether ta use rpaths on Mac OS X.

When dis property is set ta true, tha directory portion of the"install_name" field of shared libraries will default ta "@rpath".Runtime paths will also be embedded up in binaries rockin dis target.This property is initialized by tha value of tha variable CMAKE_MACOSX_RPATH if it is set when a target is pimped.

.TP
.B MAP_IMPORTED_CONFIG_<CONFIG>
Map from project configuration ta IMPORTED targetz configuration.

Set dis ta tha list of configurationz of a imported target dat may be used fo' tha current projectz <CONFIG> configuration. I aint talkin' bout chicken n' gravy biatch.  Targets imported from another project may not provide tha same set of configuration names available up in tha current project.  Settin dis property  drops some lyrics ta CMake what tha fuck imported configurations is suitable fo' use when buildin tha <CONFIG> configuration. I aint talkin' bout chicken n' gravy biatch.  Da first configuration up in tha list found ta be provided by tha imported target is selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If dis property is set n' no matchin configurations is available, then tha imported target is considered ta be not found. Y'all KNOW dat shit, muthafucka!  This property is ignored fo' non\-imported targets.

.TP
.B NAME
Logical name fo' tha target.

Read\-only logical name fo' tha target as used by CMake.

.TP
.B NO_SONAME
Whether ta set "soname" when linkin a gangbangin' finger-lickin' dirty-ass shared library or module.

Enable dis boolean property if a generated shared library or module should not have "soname" set. Default is ta set "soname" on all shared libraries n' modulez as long as tha platform supports dat shit. Generally, use dis property only fo' leaf private libraries or plugins. If you use it on aiiight shared libraries which other targets link against, on some platforms a linker will bang a gangbangin' full path ta tha library (as specified at link time) tha fuck into tha dynamic section of tha dependent binary. Therefore, once installed, dynamic loader may eventually fail ta locate tha library fo' tha binary.

.TP
.B OSX_ARCHITECTURES
Target specific architectures fo' OS X.

Da OSX_ARCHITECTURES property sets tha target binary architecture fo' targets on OS X.  This property is initialized by tha value of tha variable CMAKE_OSX_ARCHITECTURES if it is set when a target is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Use OSX_ARCHITECTURES_<CONFIG> ta set tha binary architectures on a per\-configuration basis.  <CONFIG> be a upper\-case name (ex: "OSX_ARCHITECTURES_DEBUG").

.TP
.B OSX_ARCHITECTURES_<CONFIG>
Per\-configuration OS X binary architectures fo' a target.

This property is tha configuration\-specific version of OSX_ARCHITECTURES.

.TP
.B OUTPUT_NAME
Output name fo' target files.

This sets tha base name fo' output filez pimped fo' a executable or library target.  If not set, tha logical target name is used by default.

.TP
.B OUTPUT_NAME_<CONFIG>
Per\-configuration target file base name.

This is tha configuration\-specific version of OUTPUT_NAME.

.TP
.B PDB_NAME
Output name fo' MS debug symbols .pdb file from linker.

Set tha base name fo' debug symbols file pimped fo' a executable or shared library target.  If not set, tha logical target name is used by default.  


This property aint implemented by tha Visual Studio 6 generator.

.TP
.B PDB_NAME_<CONFIG>
Per\-configuration name fo' MS debug symbols .pdb file.  

This is tha configuration\-specific version of PDB_NAME.  


This property aint implemented by tha Visual Studio 6 generator.

.TP
.B PDB_OUTPUT_DIRECTORY
Output directory fo' MS debug symbols .pdb file from linker.

This property specifies tha directory tha fuck into which tha MS debug symbols is ghon be placed by tha linker n' shit.  This property is initialized by tha value of tha variable CMAKE_PDB_OUTPUT_DIRECTORY if it is set when a target is pimped.


This property aint implemented by tha Visual Studio 6 generator.

.TP
.B PDB_OUTPUT_DIRECTORY_<CONFIG>
Per\-configuration output directory fo' MS debug symbols .pdb files.

This be a per\-configuration version of PDB_OUTPUT_DIRECTORY yo, but multi\-configuration generators (VS, Xcode) do NOT append a per\-configuration subdirectory ta tha specified directory. This property is initialized by tha value of tha variable CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG> if it is set when a target is pimped.


This property aint implemented by tha Visual Studio 6 generator.

.TP
.B POSITION_INDEPENDENT_CODE
Whether ta create a position\-independent target

Da POSITION_INDEPENDENT_CODE property determines whether posizzle independent executablez or shared libraries is ghon be pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This property is legit by default fo' SHARED n' MODULE library targets n' false otherwise.  This property is initialized by tha value of tha variable CMAKE_POSITION_INDEPENDENT_CODE if it is set when a target is pimped.

.TP
.B POST_INSTALL_SCRIPT
Deprecated install support.

Da PRE_INSTALL_SCRIPT n' POST_INSTALL_SCRIPT propertizzles is tha oldschool way ta specify CMake scripts ta run before n' afta installin a target.  They is used only when tha oldschool INSTALL_TARGETS command is used ta install tha target.  Use tha INSTALL command instead.

.TP
.B PREFIX
What comes before tha library name.

A target property dat can be set ta override tha prefix (like fuckin "lib") on a library name.

.TP
.B PRE_INSTALL_SCRIPT
Deprecated install support.

Da PRE_INSTALL_SCRIPT n' POST_INSTALL_SCRIPT propertizzles is tha oldschool way ta specify CMake scripts ta run before n' afta installin a target.  They is used only when tha oldschool INSTALL_TARGETS command is used ta install tha target.  Use tha INSTALL command instead.

.TP
.B PRIVATE_HEADER
Specify private header filez up in a FRAMEWORK shared library target.

Shared library targets marked wit tha FRAMEWORK property generate frameworks on OS X n' aiiight shared libraries on other platforms.  This property may be set ta a list of header filez ta be placed up in tha PrivateHeadaz directory inside tha framework folda n' shit.  On non\-Applez platforms these headaz may be installed rockin tha PRIVATE_HEADER option ta tha install(TARGETS) command.

.TP
.B PROJECT_LABEL
Change tha name of a target up in a IDE.

Can be used ta chizzle tha name of tha target up in a IDE like Visual Studio. 

.TP
.B PUBLIC_HEADER
Specify hood header filez up in a FRAMEWORK shared library target.

Shared library targets marked wit tha FRAMEWORK property generate frameworks on OS X n' aiiight shared libraries on other platforms.  This property may be set ta a list of header filez ta be placed up in tha Headaz directory inside tha framework folda n' shit.  On non\-Applez platforms these headaz may be installed rockin tha PUBLIC_HEADER option ta tha install(TARGETS) command.

.TP
.B RESOURCE
Specify resource filez up in a FRAMEWORK shared library target.

Shared library targets marked wit tha FRAMEWORK property generate frameworks on OS X n' aiiight shared libraries on other platforms.  This property may be set ta a list of filez ta be placed up in tha Resources directory inside tha framework folda n' shit.  On non\-Applez platforms these filez may be installed rockin tha RESOURCE option ta tha install(TARGETS) command.

.TP
.B RULE_LAUNCH_COMPILE
Specify a launcher fo' compile rules.

See tha global property of tha same name fo' details.  This overrides tha global n' directory property fo' a target.

.TP
.B RULE_LAUNCH_CUSTOM
Specify a launcher fo' custom rules.

See tha global property of tha same name fo' details.  This overrides tha global n' directory property fo' a target.

.TP
.B RULE_LAUNCH_LINK
Specify a launcher fo' link rules.

See tha global property of tha same name fo' details.  This overrides tha global n' directory property fo' a target.

.TP
.B RUNTIME_OUTPUT_DIRECTORY
Output directory up in which ta build RUNTIME target files.

This property specifies tha directory tha fuck into which runtime target filez should be built. Multi\-configuration generators (VS, Xcode) append a per\-configuration subdirectory ta tha specified directory.  There is three kindz of target filez dat may be built: archive, library, n' runtime.  Executablez is always treated as runtime targets, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Static libraries is always treated as archive targets, n' you can put dat on yo' toast. Module libraries is always treated as library targets, n' you can put dat on yo' toast. For non\-DLL platforms shared libraries is treated as library targets, n' you can put dat on yo' toast. For DLL platforms tha DLL part of a gangbangin' finger-lickin' dirty-ass shared library is treated as a runtime target n' tha correspondin import library is treated as a archive target fo' realz. All Windows\-based systems includin Cygwin is DLL platforms.  This property is initialized by tha value of tha variable CMAKE_RUNTIME_OUTPUT_DIRECTORY if it is set when a target is pimped.

.TP
.B RUNTIME_OUTPUT_DIRECTORY_<CONFIG>
Per\-configuration output directory fo' RUNTIME target files.

This be a per\-configuration version of RUNTIME_OUTPUT_DIRECTORY yo, but multi\-configuration generators (VS, Xcode) do NOT append a per\-configuration subdirectory ta tha specified directory.  This property is initialized by tha value of tha variable CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG> if it is set when a target is pimped.

.TP
.B RUNTIME_OUTPUT_NAME
Output name fo' RUNTIME target files.

This property specifies tha base name fo' runtime target files.  It overrides OUTPUT_NAME n' OUTPUT_NAME_<CONFIG> properties. Put ya muthafuckin choppers up if ya feel dis!  There is three kindz of target filez dat may be built: archive, library, n' runtime.  Executablez is always treated as runtime targets, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Static libraries is always treated as archive targets, n' you can put dat on yo' toast. Module libraries is always treated as library targets, n' you can put dat on yo' toast. For non\-DLL platforms shared libraries is treated as library targets, n' you can put dat on yo' toast. For DLL platforms tha DLL part of a gangbangin' finger-lickin' dirty-ass shared library is treated as a runtime target n' tha correspondin import library is treated as a archive target fo' realz. All Windows\-based systems includin Cygwin is DLL platforms.

.TP
.B RUNTIME_OUTPUT_NAME_<CONFIG>
Per\-configuration output name fo' RUNTIME target files.

This is tha configuration\-specific version of RUNTIME_OUTPUT_NAME.

.TP
.B SKIP_BUILD_RPATH
Should rpaths be used fo' tha build tree.

SKIP_BUILD_RPATH be a funky-ass boolean specifyin whether ta skip automatic generation of a rpath allowin tha target ta run from tha build tree.  This property is initialized by tha value of tha variable CMAKE_SKIP_BUILD_RPATH if it is set when a target is pimped.

.TP
.B SOURCES
Source names specified fo' a target.

Read\-only list of sources specified fo' a target.  Da names returned is suitable fo' passin ta tha set_source_files_propertizzles command.

.TP
.B SOVERSION
What version number is dis target.

For shared libraries VERSION n' SOVERSION can be used ta specify tha build version n' API version respectively. When buildin or installin appropriate symlinks is pimped if tha platform supports symlinks n' tha linker supports so\-names. If only one of both is specified tha missin be assumed ta have tha same version number n' shit. Right back up in yo muthafuckin ass. SOVERSION is ignored if NO_SONAME property is set. For shared libraries n' executablez on Windows tha VERSION attribute is parsed ta extract a "major.minor" version number n' shit. These numbers is used as tha image version of tha binary. 

.TP
.B STATIC_LIBRARY_FLAGS
Extra flags ta use when linkin static libraries.

Extra flags ta use when linkin a static library.

.TP
.B STATIC_LIBRARY_FLAGS_<CONFIG>
Per\-configuration flags fo' bustin a static library.

This is tha configuration\-specific version of STATIC_LIBRARY_FLAGS.

.TP
.B SUFFIX
What comes afta tha target name.

A target property dat can be set ta override tha suffix (like fuckin ".so" or ".exe") on tha name of a library, module or executable.

.TP
.B TYPE
Da type of tha target.

This read\-only property can be used ta test tha type of tha given target. Well shiiiit, it is ghon be one of STATIC_LIBRARY, MODULE_LIBRARY, SHARED_LIBRARY, EXECUTABLE or one of tha internal target types.

.TP
.B VERSION
What version number is dis target.

For shared libraries VERSION n' SOVERSION can be used ta specify tha build version n' API version respectively. When buildin or installin appropriate symlinks is pimped if tha platform supports symlinks n' tha linker supports so\-names. If only one of both is specified tha missin be assumed ta have tha same version number n' shit. For executablez VERSION can be used ta specify tha build version. I aint talkin' bout chicken n' gravy biatch. When buildin or installin appropriate symlinks is pimped if tha platform supports symlinks. For shared libraries n' executablez on Windows tha VERSION attribute is parsed ta extract a "major.minor" version number n' shit. These numbers is used as tha image version of tha binary. 

.TP
.B VISIBILITY_INLINES_HIDDEN
Whether ta add a cold-ass lil compile flag ta hide symbolz of inline functions

Da VISIBILITY_INLINES_HIDDEN property determines whether a gangbangin' flag fo' hidin symbols fo' inline functions. tha value passed used up in a visibilitizzle related compile option, like fuckin \-fvisibility=.  This property only has a affect fo' libraries n' executablez wit exports, n' you can put dat on yo' toast.  This property is initialized by tha value of tha variable CMAKE_VISIBILITY_INLINES_HIDDEN if it is set when a target is pimped.

.TP
.B VS_DOTNET_REFERENCES
Visual Studio managed project .NET references

Addz one or mo' semicolon\-delimited .NET references ta a generated Visual Studio project. For example, "System;System.Windows.Forms".

.TP
.B VS_DOTNET_TARGET_FRAMEWORK_VERSION
Specify tha .NET target framework version.

Used ta specify tha .NET target framework version fo' C++/CLI. For example, "v4.5".

.TP
.B VS_GLOBAL_<variable>
Visual Studio project\-specific global variable.

Tell tha Visual Studio generator ta set tha global variable '<variable>' ta a given value up in tha generated Visual Studio project. Ignored on other generators. Qt integration works betta if VS_GLOBAL_QtVersion is set ta tha version FindQt4.cmake found. Y'all KNOW dat shit, muthafucka! For example, "4.7.3"

.TP
.B VS_GLOBAL_KEYWORD
Visual Studio project keyword.

Sets tha "keyword" attribute fo' a generated Visual Studio project. Defaults ta "Win32Proj". Yo ass may wish ta override dis value wit "ManagedCProj", fo' example, up in a Visual Studio managed C++ unit test project.

.TP
.B VS_GLOBAL_PROJECT_TYPES
Visual Studio project type(s).

Can be set ta one or mo' UUIDs recognized by Visual Studio ta indicate tha type of project. This value is copied verbatim tha fuck into tha generated project file. Example fo' a managed C++ unit testin project:


.nf
 {3AC096D0\-A1C2\-E12C\-1390\-A8335801FDAB};{8BC9CEB8\-8B4A\-11D0\-8D11\-00A0C91BC942}
.fi

UUIDs is semicolon\-delimited.

.TP
.B VS_GLOBAL_ROOTNAMESPACE
Visual Studio project root namespace.

Sets tha "RootNamespace" attribute fo' a generated Visual Studio project.  Da attribute is ghon be generated only if dis is set.

.TP
.B VS_KEYWORD
Visual Studio project keyword.

Can be set ta chizzle tha visual basement keyword, fo' example Qt integration works betta if dis is set ta Qt4VSv1.0. 

.TP
.B VS_SCC_AUXPATH
Visual Studio Source Code Control Aux Path.

Can be set ta chizzle tha visual basement source code control auxpath property.

.TP
.B VS_SCC_LOCALPATH
Visual Studio Source Code Control Local Path.

Can be set ta chizzle tha visual basement source code control local path property.

.TP
.B VS_SCC_PROJECTNAME
Visual Studio Source Code Control Project.

Can be set ta chizzle tha visual basement source code control project name property.

.TP
.B VS_SCC_PROVIDER
Visual Studio Source Code Control Provider.

Can be set ta chizzle tha visual basement source code control provider property.

.TP
.B VS_WINRT_EXTENSIONS
Visual Studio project C++/CX language extensions fo' Windows Runtime

Can be set ta enable C++/CX language extensions.

.TP
.B VS_WINRT_REFERENCES
Visual Studio project Windows Runtime Metadata references

Addz one or mo' semicolon\-delimited WinRT references ta a generated Visual Studio project. For example, "Windows;Windows.UI.Core".

.TP
.B WIN32_EXECUTABLE
Build a executable wit a WinMain entry point on windows.

When dis property is set ta legit tha executable when linked on Windows is ghon be pimped wit a WinMain() entry point instead of just main().  This make it a GUI executable instead of a cold-ass lil console application. I aint talkin' bout chicken n' gravy biatch.  See tha CMAKE_MFC_FLAG variable documentation ta configure use of MFC fo' WinMain executables.  This property is initialized by tha value of tha variable CMAKE_WIN32_EXECUTABLE if it is set when a target is pimped.

.TP
.B XCODE_ATTRIBUTE_<an-attribute>
Set Xcode target attributes directly.

Tell tha Xcode generator ta set '<an\-attribute>' ta a given value up in tha generated Xcode project.  Ignored on other generators.

.SH PROPERTIES ON TESTS
.TP
.B ATTACHED_FILES
Attach a list of filez ta a thugged-out dashboard submission.

Set dis property ta a list of filez dat is ghon be encoded n' submitted ta tha dashboard as a addizzle ta tha test result.

.TP
.B ATTACHED_FILES_ON_FAIL
Attach a list of filez ta a thugged-out dashboard submission if tha test fails.

Same as ATTACHED_FILES yo, but these filez will only be included if tha test do not pass.

.TP
.B COST
Set dis ta a gangbangin' floatin point value. Tests up in a test set is ghon be run up in descendin order of cost.

This property raps bout tha cost of a test. Yo ass can explicitly set dis value; tests wit higher COST joints will run first.

.TP
.B DEPENDS
Specifies dat dis test should only be run afta tha specified list of tests.

Set dis ta a list of tests dat must finish before dis test is run.

.TP
.B ENVIRONMENT
Specify environment variablez dat should be defined fo' hustlin a test.

If set ta a list of environment variablez n' jointz of tha form MYVAR=value dem environment variablez is ghon be defined while hustlin tha test. Da environment is restored ta its previous state afta tha test is done.

.TP
.B FAIL_REGULAR_EXPRESSION
If tha output matches dis regular expression tha test will fail.

If set, if tha output matches one of specified regular expressions, tha test will fail.For example: FAIL_REGULAR_EXPRESSION "[^a\-z]Error;ERROR;Failed"

.TP
.B LABELS
Specify a list of text labels associated wit a test.

Da list is reported up in dashboard submissions.

.TP
.B MEASUREMENT
Specify a CDASH measurement n' value ta be reported fo' a test.

If set ta a name then dat name is ghon be reported ta CDASH as a named measurement wit a value of 1. Yo ass may also specify a value by settin MEASUREMENT ta "measurement=value".

.TP
.B PASS_REGULAR_EXPRESSION
Da output must match dis regular expression fo' tha test ta pass.

If set, tha test output is ghon be checked against tha specified regular expressions n' at least one of tha regular expressions has ta match, otherwise tha test will fail.

.TP
.B PROCESSORS
How tha fuck nuff process slots dis test requires

Denotes tha number of processors dat dis test will require. This is typically used fo' MPI tests, n' should be used up in conjunction wit tha ctest_test PARALLEL_LEVEL option.

.TP
.B REQUIRED_FILES
List of filez required ta run tha test.

If set ta a list of files, tha test aint gonna be run unless all of tha filez exist.

.TP
.B RESOURCE_LOCK
Specify a list of resources dat is locked by dis test.

If multiple tests specify tha same resource lock, they is guaranteed not ta run concurrently.

.TP
.B RUN_SERIAL
Do not run dis test up in parallel wit any other test.

Use dis option up in conjunction wit tha ctest_test PARALLEL_LEVEL option ta specify dat dis test should not be run up in parallel wit any other tests.

.TP
.B TIMEOUT
How tha fuck nuff secondz ta allow fo' dis test.

This property if set will limit a test ta not take mo' than tha specified number of secondz ta run. I aint talkin' bout chicken n' gravy biatch. If it exceedz dat tha test process is ghon be capped n' ctest will move ta tha next test. This settin takes precedence over CTEST_TESTING_TIMEOUT.

.TP
.B WILL_FAIL
If set ta true, dis will invert tha pass/fail flag of tha test.

This property can be used fo' tests dat is sposed ta fuckin fail n' return a non zero return code.

.TP
.B WORKING_DIRECTORY
Da directory from which tha test executable is ghon be called.

If dis aint set it is called from tha directory tha test executable is located in.

.SH VARIABLES
.TP
.B CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION
Ask CPack ta error up as soon as a gangbangin' file wit absolute INSTALL DESTINATION is encountered.

Da fatal error is emitted before tha installation of tha offendin file takes place. Right back up in yo muthafuckin ass. Some CPack generators, like NSIS,enforce dis internally. This variable triggers tha definizzle ofCMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION when CPack runsVariablez common ta all CPack generators

.SH VARIABLES THAT CHANGE BEHAVIOR
.TP
.B BUILD_SHARED_LIBS
Global flag ta cause add_library ta create shared libraries if on.

If present n' true, dis will cause all libraries ta be built shared unless tha library was explicitly added as a static library.  This variable is often added ta projects as a OPTION so dat each user of a project can decizzle if they wanna build tha project rockin shared or static libraries.

.TP
.B CMAKE_ABSOLUTE_DESTINATION_FILES
List of filez which done been installed rockin  a ABSOLUTE DESTINATION path.

This variable is defined by CMake\-generated cmake_install.cmake scripts, n' you can put dat on yo' toast. Well shiiiit, it can be used (read\-only) by programs or scripts dat source dem install scripts, n' you can put dat on yo' toast. This is used by some CPack generators (e.g. RPM).

.TP
.B CMAKE_AUTOMOC_RELAXED_MODE
Switch between strict n' chillaxed automoc mode.

By default, automoc behaves exactly as busted lyrics bout up in tha documentation of tha AUTOMOC target property.  When set ta TRUE, it accepts mo' input n' tries ta find tha erect input file fo' moc even if it differs from tha documented behaviour. Shiiit, dis aint no joke.  In dis mode it e.g. also checks whether a header file is intended ta be processed by moc when a "foo.moc" file has been included.


Relaxed mode has ta be enabled fo' KDE4 compatibility.

.TP
.B CMAKE_BACKWARDS_COMPATIBILITY
Version of cmake required ta build project

From tha deal wit view of backwardz compatibility, dis specifies what tha fuck version of CMake should be supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. By default dis value is tha version number of CMake dat yo ass is hustlin. Yo ass can set dis ta a olda version of CMake ta support deprecated commandz of CMake up in projects dat was freestyled ta use olda versionz of CMake. This can be set by tha user or set all up in tha beginnin of a CMakeLists file.

.TP
.B CMAKE_BUILD_TYPE
Specifies tha build type on single\-configuration generators.

This statically specifies what tha fuck build type (configuration) is ghon be built up in dis build tree. Possible joints is empty, Debug, Release, RelWithDebInfo n' MinSizeRel.  This variable is only meaningful ta single\-configuration generators (like fuckin make n' Ninja) i.e. dem which chizzle a single configuration when CMake runs ta generate a funky-ass build tree as opposed ta multi\-configuration generators which offer selection of tha build configuration within tha generated build environment.  There is nuff per\-config propertizzles n' variablez (usually followin clean SOME_VAR_<CONFIG> order conventions), like fuckin CMAKE_C_FLAGS_<CONFIG>, specified as uppercase: CMAKE_C_FLAGS_[DEBUG|RELEASE|RELWITHDEBINFO|MINSIZEREL].  For example, up in a funky-ass build tree configured ta build type Debug, CMake will peep ta havin CMAKE_C_FLAGS_DEBUG settings git added ta tha CMAKE_C_FLAGS settings.  See also CMAKE_CONFIGURATION_TYPES.

.TP
.B CMAKE_COLOR_MAKEFILE
Enablez color output when rockin tha Makefile generator.

When enabled, tha generated Makefilez will produce colored output.  Default is ON.

.TP
.B CMAKE_CONFIGURATION_TYPES
Specifies tha available build types on multi\-config generators.

This specifies what tha fuck build types (configurations) is ghon be available like fuckin Debug, Release, RelWithDebInfo etc.  This has reasonable defaults on most platforms yo, but can be extended ta provide other build types.  See also CMAKE_BUILD_TYPE fo' detailz of managin configuration data, n' CMAKE_CFG_INTDIR.

.TP
.B CMAKE_DEBUG_TARGET_PROPERTIES
Enablez tracin output fo' target properties.

This variable can be populated wit a list of propertizzles ta generate debug output fo' when evaluatin target properties. Put ya muthafuckin choppers up if ya feel dis!  Currently it can only be used when evaluatin tha INCLUDE_DIRECTORIES, COMPILE_DEFINITIONS n' COMPILE_OPTIONS target properties. Put ya muthafuckin choppers up if ya feel dis!  In dat case, it outputs a funky-ass backtrace fo' each entry up in tha target property.  Default is unset.

.TP
.B CMAKE_DISABLE_FIND_PACKAGE_<PackageName>
Variable fo' disablin find_package() calls.

Every non\-REQUIRED find_package() call up in a project can be disabled by settin tha variable CMAKE_DISABLE_FIND_PACKAGE_<PackageName> ta TRUE. This can be used ta build a project without a optionizzle package, although dat package is installed.


This switch should be used durin tha initial CMake run. I aint talkin' bout chicken n' gravy biatch. Otherwise if tha package has already been found up in a previous CMake run, tha variablez which done been stored up in tha cache will still be there, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  In dat case it is recommended ta remove tha cache variablez fo' dis package from tha cache rockin tha cache editor or cmake \-U

.TP
.B CMAKE_ERROR_DEPRECATED
Whether ta issue deprecation errors fo' macros n' functions.

If TRUE, dis can be used by macros n' functions ta issue fatal errors when deprecated macros or functions is used. Y'all KNOW dat shit, muthafucka!  This variable is FALSE by default.

.TP
.B CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION
Ask cmake_install.cmake script ta error up as soon as a gangbangin' file wit absolute INSTALL DESTINATION is encountered.

Da fatal error is emitted before tha installation of tha offendin file takes place. This variable is used by CMake\-generated cmake_install.cmake scripts, n' you can put dat on yo' toast. If one sets dis variable ta ON while hustlin tha script, it may git fatal error lyrics from tha script.

.TP
.B CMAKE_FIND_LIBRARY_PREFIXES
Prefixes ta prepend when lookin fo' libraries.

This specifies what tha fuck prefixes ta add ta library names when tha find_library command looks fo' libraries. Put ya muthafuckin choppers up if ya feel dis! On UNIX systems dis is typically lib, meanin dat when tryin ta find tha foo library it will look fo' libfoo.

.TP
.B CMAKE_FIND_LIBRARY_SUFFIXES
Suffixes ta append when lookin fo' libraries.

This specifies what tha fuck suffixes ta add ta library names when tha find_library command looks fo' libraries. Put ya muthafuckin choppers up if ya feel dis! On Windows systems dis is typically .lib n' .dll, meanin dat when tryin ta find tha foo library it will look fo' foo.dll etc.

.TP
.B CMAKE_FIND_PACKAGE_WARN_NO_MODULE
Tell find_package ta warn if called without a explicit mode.

If find_package is called without a explicit mode option (MODULE, CONFIG or NO_MODULE) n' no Find<pkg>.cmake module is up in CMAKE_MODULE_PATH then CMake implicitly assumes dat tha calla intendz ta search fo' a package configuration file.  If no package configuration file is found then tha wordin of tha failure message must account fo' both tha case dat tha package is straight-up missin n' tha case dat tha project has a funky-ass bug n' failed ta provide tha intended Find module.  If instead tha calla specifies a explicit mode option then tha failure message can be mo' specific.


Set CMAKE_FIND_PACKAGE_WARN_NO_MODULE ta TRUE ta tell find_package ta warn when it implicitly assumes Config mode.  This helps pimpers enforce use of a explicit mode up in all calls ta find_package within a project.

.TP
.B CMAKE_IGNORE_PATH
Path ta be ignored by FIND_XXX() commands.

Specifies directories ta be ignored by searches up in FIND_XXX() commands.  This is useful up in cross\-compiled environments where some system directories contain incompatible but possibly linkable libraries. Put ya muthafuckin choppers up if ya feel dis! For example, on cross\-compiled clusta environments, dis allows a user ta ignore directories containin libraries meant fo' tha front\-end machine dat modulez like FindX11 (and others) would normally search.  By default dis is empty; it is intended ta be set by tha project.  Note dat CMAKE_IGNORE_PATH takes a list of directory names, NOT a list of prefixes. If you wanna ignore paths under prefixes (bin, include, lib, etc.), you gonna need ta specify dem explicitly.  See also CMAKE_PREFIX_PATH, CMAKE_LIBRARY_PATH, CMAKE_INCLUDE_PATH, CMAKE_PROGRAM_PATH.

.TP
.B CMAKE_INCLUDE_PATH
Path used fo' searchin by FIND_FILE() n' FIND_PATH().

Specifies a path which is ghon be used both by FIND_FILE() n' FIND_PATH(). Both commandz will check each of tha contained directories fo' tha existence of tha file which is currently searched. Y'all KNOW dat shit, muthafucka! By default it is empty, it is intended ta be set by tha project. Right back up in yo muthafuckin ass. See also CMAKE_SYSTEM_INCLUDE_PATH, CMAKE_PREFIX_PATH.

.TP
.B CMAKE_INSTALL_DEFAULT_COMPONENT_NAME
Default component used up in install() commands.

If a install() command is used without tha COMPONENT argument, these filez is ghon be grouped tha fuck into a thugged-out default component. Da name of dis default install component is ghon be taken from dis variable.  It defaults ta "Unspecified".

.TP
.B CMAKE_INSTALL_PREFIX
Install directory used by install.

If "make install" is invoked or INSTALL is built, dis directory is prepended onto all install directories. Put ya muthafuckin choppers up if ya feel dis! This variable defaults ta /usr/local on UNIX n' c:/Program Filez on Windows.


On UNIX one can use tha DESTDIR mechanizzle up in order ta relocate tha whole installation. I aint talkin' bout chicken n' gravy biatch.  DESTDIR means DESTination DIRectory. Well shiiiit, it is commonly used by makefile playas up in order ta install software at non\-default location. I aint talkin' bout chicken n' gravy biatch.  It be probably invoked like this:


.nf
 make DESTDIR=/home/john install
.fi

which will install tha concerned software rockin tha installation prefix, e.g. "/usr/local" prepended wit tha DESTDIR value which finally gives "/home/john/usr/local".


WARNING: DESTDIR may not be used on Windows cuz installation prefix probably gotz nuff a thugged-out drive letta like up in "C:/Program Files" which cannot be prepended wit some other prefix.


Da installation prefix be also added ta CMAKE_SYSTEM_PREFIX_PATH so dat find_package, find_program, find_library, find_path, n' find_file will search tha prefix fo' other software.

.TP
.B CMAKE_LIBRARY_PATH
Path used fo' searchin by FIND_LIBRARY().

Specifies a path which is ghon be used by FIND_LIBRARY(). FIND_LIBRARY() will check each of tha contained directories fo' tha existence of tha library which is currently searched. Y'all KNOW dat shit, muthafucka! By default it is empty, it is intended ta be set by tha project. Right back up in yo muthafuckin ass. See also CMAKE_SYSTEM_LIBRARY_PATH, CMAKE_PREFIX_PATH.

.TP
.B CMAKE_MFC_FLAG
Tell cmake ta use MFC fo' a executable or dll.

This can be set up in a CMakeLists.txt file n' will enable MFC up in tha application. I aint talkin' bout chicken n' gravy biatch.  It should be set ta 1 fo' tha static MFC library, n' 2 fo' tha shared MFC library.  This is used up in Visual Studio 6 n' 7 project files.   Da CMakeSetup dialog used MFC n' tha CMakeLists.txt be lookin like this:


.nf
  add_definitions(\-D_AFXDLL)
  set(CMAKE_MFC_FLAG 2)
  add_executable(CMakeSetup WIN32 ${SRCS})
.fi

.TP
.B CMAKE_MODULE_PATH
List of directories ta search fo' CMake modules.

Commandz like include() n' find_package() search fo' filez up in directories listed by dis variable before checkin tha default modulez dat come wit CMake.

.TP
.B CMAKE_NOT_USING_CONFIG_FLAGS
Skip _BUILD_TYPE flags if true.

This be a internal flag used by tha generators up in CMake ta tell CMake ta skip tha _BUILD_TYPE flags.

.TP
.B CMAKE_POLICY_DEFAULT_CMP<NNNN>
Default fo' CMake Policy CMP<NNNN> when it is otherwise left unset.

Commandz cmake_minimum_required(VERSION) n' cmake_policy(VERSION) by default leave policies introduced afta tha given version unset.  Set CMAKE_POLICY_DEFAULT_CMP<NNNN> ta OLD or NEW ta specify tha default fo' policy CMP<NNNN>, where <NNNN> is tha policy number.


This variable should not be set by a project up in CMake code; use cmake_policy(SET) instead. Y'all KNOW dat shit, muthafucka!  Users hustlin CMake may set dis variable up in tha cache (e.g. \-DCMAKE_POLICY_DEFAULT_CMP<NNNN>=<OLD|NEW>) ta set a policy not otherwise set by tha project.  Set ta OLD ta on tha down-low a policy warnin while rockin oldschool behavior or ta NEW ta try buildin tha project wit freshly smoked up behavior.

.TP
.B CMAKE_PREFIX_PATH
Path used fo' searchin by FIND_XXX(), wit appropriate suffixes added.

Specifies a path which is ghon be used by tha FIND_XXX() commands. Well shiiiit, it gotz nuff tha "base" directories, tha FIND_XXX() commandz append appropriate subdirectories ta tha base directories. Put ya muthafuckin choppers up if ya feel dis! Right back up in yo muthafuckin ass. So FIND_PROGRAM() addz /bin ta each of tha directories up in tha path, FIND_LIBRARY() appendz /lib ta each of tha directories, n' FIND_PATH() n' FIND_FILE() append /include . By default it is empty, it is intended ta be set by tha project. Right back up in yo muthafuckin ass. See also CMAKE_SYSTEM_PREFIX_PATH, CMAKE_INCLUDE_PATH, CMAKE_LIBRARY_PATH, CMAKE_PROGRAM_PATH.

.TP
.B CMAKE_PROGRAM_PATH
Path used fo' searchin by FIND_PROGRAM().

Specifies a path which is ghon be used by FIND_PROGRAM(). FIND_PROGRAM() will check each of tha contained directories fo' tha existence of tha program which is currently searched. Y'all KNOW dat shit, muthafucka! By default it is empty, it is intended ta be set by tha project. Right back up in yo muthafuckin ass. See also CMAKE_SYSTEM_PROGRAM_PATH,  CMAKE_PREFIX_PATH.

.TP
.B CMAKE_SKIP_INSTALL_ALL_DEPENDENCY
Don't make tha install target depend on tha all target.

By default, tha "install" target dependz on tha "all" target.  This has tha effect, dat when "make install" is invoked or INSTALL is built, first tha "all" target is built, then tha installation starts, n' you can put dat on yo' toast.  If CMAKE_SKIP_INSTALL_ALL_DEPENDENCY is set ta TRUE, dis dependency aint pimped, so tha installation process will start immediately, independent from whether tha project has been straight-up built or not.

.TP
.B CMAKE_SYSTEM_IGNORE_PATH
Path ta be ignored by FIND_XXX() commands.

Specifies directories ta be ignored by searches up in FIND_XXX() commands.  This is useful up in cross\-compiled environments where some system directories contain incompatible but possibly linkable libraries. Put ya muthafuckin choppers up if ya feel dis! For example, on cross\-compiled clusta environments, dis allows a user ta ignore directories containin libraries meant fo' tha front\-end machine dat modulez like FindX11 (and others) would normally search.  By default dis gotz nuff a list of directories containin incompatible binaries fo' tha host system.  See also CMAKE_SYSTEM_PREFIX_PATH, CMAKE_SYSTEM_LIBRARY_PATH, CMAKE_SYSTEM_INCLUDE_PATH, n' CMAKE_SYSTEM_PROGRAM_PATH.

.TP
.B CMAKE_SYSTEM_INCLUDE_PATH
Path used fo' searchin by FIND_FILE() n' FIND_PATH().

Specifies a path which is ghon be used both by FIND_FILE() n' FIND_PATH(). Both commandz will check each of tha contained directories fo' tha existence of tha file which is currently searched. Y'all KNOW dat shit, muthafucka! By default it gotz nuff tha standard directories fo' tha current system. Well shiiiit, it is NOT intended ta be modified by tha project, use CMAKE_INCLUDE_PATH fo' all dis bullshit. Right back up in yo muthafuckin ass. See also CMAKE_SYSTEM_PREFIX_PATH.

.TP
.B CMAKE_SYSTEM_LIBRARY_PATH
Path used fo' searchin by FIND_LIBRARY().

Specifies a path which is ghon be used by FIND_LIBRARY(). FIND_LIBRARY() will check each of tha contained directories fo' tha existence of tha library which is currently searched. Y'all KNOW dat shit, muthafucka! By default it gotz nuff tha standard directories fo' tha current system. Well shiiiit, it is NOT intended ta be modified by tha project, use CMAKE_LIBRARY_PATH fo' all dis bullshit. Right back up in yo muthafuckin ass. See also CMAKE_SYSTEM_PREFIX_PATH.

.TP
.B CMAKE_SYSTEM_PREFIX_PATH
Path used fo' searchin by FIND_XXX(), wit appropriate suffixes added.

Specifies a path which is ghon be used by tha FIND_XXX() commands. Well shiiiit, it gotz nuff tha "base" directories, tha FIND_XXX() commandz append appropriate subdirectories ta tha base directories. Put ya muthafuckin choppers up if ya feel dis! Right back up in yo muthafuckin ass. So FIND_PROGRAM() addz /bin ta each of tha directories up in tha path, FIND_LIBRARY() appendz /lib ta each of tha directories, n' FIND_PATH() n' FIND_FILE() append /include . By default dis gotz nuff tha standard directories fo' tha current system n' tha CMAKE_INSTALL_PREFIX.  It be NOT intended ta be modified by tha project, use CMAKE_PREFIX_PATH fo' all dis bullshit. Right back up in yo muthafuckin ass. See also CMAKE_SYSTEM_INCLUDE_PATH, CMAKE_SYSTEM_LIBRARY_PATH, CMAKE_SYSTEM_PROGRAM_PATH, n' CMAKE_SYSTEM_IGNORE_PATH.

.TP
.B CMAKE_SYSTEM_PROGRAM_PATH
Path used fo' searchin by FIND_PROGRAM().

Specifies a path which is ghon be used by FIND_PROGRAM(). FIND_PROGRAM() will check each of tha contained directories fo' tha existence of tha program which is currently searched. Y'all KNOW dat shit, muthafucka! By default it gotz nuff tha standard directories fo' tha current system. Well shiiiit, it is NOT intended ta be modified by tha project, use CMAKE_PROGRAM_PATH fo' all dis bullshit. Right back up in yo muthafuckin ass. See also CMAKE_SYSTEM_PREFIX_PATH.

.TP
.B CMAKE_USER_MAKE_RULES_OVERRIDE
Specify a CMake file dat overrides platform shiznit.

CMake loadz tha specified file while enablin support fo' each language from either tha project() or enable_language() commands.  It be loaded afta CMakez builtin compila n' platform shiznit modulez done been loaded but before tha shiznit is used. Y'all KNOW dat shit, muthafucka!  Da file may set platform shiznit variablez ta override CMakez defaults.


This feature is intended fo' use only up in overridin shiznit variablez dat must be set before CMake buildz its first test project ta check dat tha compila fo' a language works.  It should not be used ta load a gangbangin' file up in cases dat a aiiight include() will work.  Use it only as a last resort fo' behavior dat cannot be  bigged up  any other way.  For example, one may set CMAKE_C_FLAGS_INIT ta chizzle tha default value used ta initialize CMAKE_C_FLAGS before it is cached. Y'all KNOW dat shit, muthafucka!  Da override file should NOT be used ta set anythang dat could be set afta languages is enabled, like fuckin variablez like CMAKE_RUNTIME_OUTPUT_DIRECTORY dat affect tha placement of binaries. Put ya muthafuckin choppers up if ya feel dis!  Hype set up in tha file is ghon be used fo' try_compile n' try_run buildz like a muthafucka.

.TP
.B CMAKE_WARN_DEPRECATED
Whether ta issue deprecation warnings fo' macros n' functions.

If TRUE, dis can be used by macros n' functions ta issue deprecation warnings.  This variable is FALSE by default.

.TP
.B CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION
Ask cmake_install.cmake script ta warn each time a gangbangin' file wit absolute INSTALL DESTINATION is encountered.

This variable is used by CMake\-generated cmake_install.cmake scripts, n' you can put dat on yo' toast. If one sets dis variable ta ON while hustlin tha script, it may git warnin lyrics from tha script.

.SH VARIABLES THAT DESCRIBE THE SYSTEM
.TP
.B APPLE
True if hustlin on Mac OS X.

Set ta legit on Mac OS X.

.TP
.B BORLAND
True if tha Borland compila is bein used.

This is set ta legit if tha Borland compila is bein used.

.TP
.B CMAKE_CL_64
Usin tha 64 bit compila from Microsoft

Set ta legit when rockin tha 64 bit cl compila from Microsoft.

.TP
.B CMAKE_COMPILER_2005
Usin tha Visual Studio 2005 compila from Microsoft

Set ta legit when rockin tha Visual Studio 2005 compila from Microsoft.

.TP
.B CMAKE_HOST_APPLE
True fo' Applez OS X operatin systems.

Set ta legit when tha host system is Applez OS X.

.TP
.B CMAKE_HOST_SYSTEM
Name of system cmake is bein run on.

Da same as CMAKE_SYSTEM but fo' tha host system instead of tha target system when cross compiling.

.TP
.B CMAKE_HOST_SYSTEM_NAME
Name of tha OS CMake is hustlin on.

Da same as CMAKE_SYSTEM_NAME but fo' tha host system instead of tha target system when cross compiling.

.TP
.B CMAKE_HOST_SYSTEM_PROCESSOR
Da name of tha CPU CMake is hustlin on.

Da same as CMAKE_SYSTEM_PROCESSOR but fo' tha host system instead of tha target system when cross compiling.

.TP
.B CMAKE_HOST_SYSTEM_VERSION
OS version CMake is hustlin on.

Da same as CMAKE_SYSTEM_VERSION but fo' tha host system instead of tha target system when cross compiling.

.TP
.B CMAKE_HOST_UNIX
True fo' UNIX n' UNIX like operatin systems.

Set ta legit when tha host system is UNIX or UNIX like (i.e fo' realz. APPLE n' CYGWIN).

.TP
.B CMAKE_HOST_WIN32
True on windows systems, includin win64.

Set ta legit when tha host system is Windows n' on Cygwin.

.TP
.B CMAKE_LIBRARY_ARCHITECTURE
Target architecture library directory name, if detected.

This is tha value of CMAKE_<lang>_LIBRARY_ARCHITECTURE as detected fo' one of tha enabled languages.

.TP
.B CMAKE_LIBRARY_ARCHITECTURE_REGEX
Regex matchin possible target architecture library directory names.

This is used ta detect CMAKE_<lang>_LIBRARY_ARCHITECTURE from tha implicit linker search path by matchin tha <arch> name.

.TP
.B CMAKE_OBJECT_PATH_MAX
Maximum object file full\-path length allowed by natizzle build tools.

CMake computes fo' every last muthafuckin source file a object file name dat is unique ta tha source file n' deterministic wit respect ta tha full path ta tha source file.  This allows multiple source filez up in a target ta share tha same name if they lie up in different directories without rebuildin when one be added or removed. Y'all KNOW dat shit, muthafucka!  But fuck dat shiznit yo, tha word on tha street is dat it can produce long full paths up in all dem cases, so CMake shortens tha path rockin a hashin scheme when tha full path ta a object file exceedz a limit.  CMake has a funky-ass built\-in limit fo' each platform dat is sufficient fo' common tools yo, but some natizzle tools may gotz a lower limit.  This variable may be set ta specify tha limit explicitly.  Da value must be a integer no less than 128.

.TP
.B CMAKE_SYSTEM
Name of system cmake is compilin for.

This variable is tha composite of CMAKE_SYSTEM_NAME n' CMAKE_SYSTEM_VERSION, like dis ${CMAKE_SYSTEM_NAME}\-${CMAKE_SYSTEM_VERSION}.  If CMAKE_SYSTEM_VERSION aint set, then CMAKE_SYSTEM is tha same ol' dirty as CMAKE_SYSTEM_NAME.

.TP
.B CMAKE_SYSTEM_NAME
Name of tha OS CMake is buildin for.

This is tha name of tha operatin system on which CMake is targeting.   On systems dat have tha uname command, dis variable is set ta tha output of uname \-s.  Linux, Windows,  n' Darwin fo' Mac OS X is tha joints found  on tha big-ass three operatin systems.

.TP
.B CMAKE_SYSTEM_PROCESSOR
Da name of tha CPU CMake is buildin for.

On systems dat support uname, dis variable is set ta tha output of uname \-p, on windows it is set ta tha value of tha environment variable PROCESSOR_ARCHITECTURE

.TP
.B CMAKE_SYSTEM_VERSION
OS version CMake is buildin for.

A numeric version strang fo' tha system, on systems dat support uname, dis variable is set ta tha output of uname \-r. Shiiit, dis aint no joke. On other systems dis is set ta major\-minor version numbers.

.TP
.B CYGWIN
True fo' Cygwin.

Set ta legit when rockin Cygwin.

.TP
.B ENV
Access environment variables.

Use tha syntax $ENV{VAR} ta read environment variable VAR.  See also tha set() command ta set ENV{VAR}.

.TP
.B MSVC
True when rockin Microsizzlez Visual C

Set ta legit when tha compila is some version of Microsizzlez Visual C.

.TP
.B MSVC10
True when rockin Microsizzlez Visual C 10.0

Set ta legit when tha compila is version 10.0 of Microsizzlez Visual C.

.TP
.B MSVC11
True when rockin Microsizzlez Visual C 11.0

Set ta legit when tha compila is version 11.0 of Microsizzlez Visual C.

.TP
.B MSVC12
True when rockin Microsizzlez Visual C 12.0

Set ta legit when tha compila is version 12.0 of Microsizzlez Visual C.

.TP
.B MSVC60
True when rockin Microsizzlez Visual C 6.0

Set ta legit when tha compila is version 6.0 of Microsizzlez Visual C.

.TP
.B MSVC70
True when rockin Microsizzlez Visual C 7.0

Set ta legit when tha compila is version 7.0 of Microsizzlez Visual C.

.TP
.B MSVC71
True when rockin Microsizzlez Visual C 7.1

Set ta legit when tha compila is version 7.1 of Microsizzlez Visual C.

.TP
.B MSVC80
True when rockin Microsizzlez Visual C 8.0

Set ta legit when tha compila is version 8.0 of Microsizzlez Visual C.

.TP
.B MSVC90
True when rockin Microsizzlez Visual C 9.0

Set ta legit when tha compila is version 9.0 of Microsizzlez Visual C.

.TP
.B MSVC_IDE
True when rockin tha Microsizzlez Visual C IDE

Set ta legit when tha target platform is tha Microsizzlez Visual C IDE, as opposed ta tha command line compiler.

.TP
.B MSVC_VERSION
Da version of Microsizzlez Visual C/C++ bein used if any.

Known version numbers are:


.nf
  1200 = VS  6.0
  1300 = VS  7.0
  1310 = VS  7.1
  1400 = VS  8.0
  1500 = VS  9.0
  1600 = VS 10.0
  1700 = VS 11.0
  1800 = VS 12.0
.fi

.TP
.B UNIX
True fo' UNIX n' UNIX like operatin systems.

Set ta legit when tha target system is UNIX or UNIX like (i.e fo' realz. APPLE n' CYGWIN).

.TP
.B WIN32
True on windows systems, includin win64.

Set ta legit when tha target system is Windows.

.TP
.B XCODE_VERSION
Version of Xcode (Xcode generator only).

Under tha Xcode generator, dis is tha version of Xcode as specified up in "Xcode.app/Contents/version.plist" (like fuckin "3.1.2").

.SH VARIABLES COMMON TO ALL CPACK GENERATORS
.TP
.B CPACK_ABSOLUTE_DESTINATION_FILES
List of filez which done been installed rockin  a ABSOLUTE DESTINATION path.

This variable be a Read\-Only variable which is set internally by CPack durin installation n' before packagin rockin CMAKE_ABSOLUTE_DESTINATION_FILES defined up in cmake_install.cmake scripts, n' you can put dat on yo' toast. Da value can be used within CPack project configuration file and/or CPack<GEN>.cmake file of <GEN> generator.

.TP
.B CPACK_BINARY_<GENNAME>
CPack generated options fo' binary generators

Da CPack.cmake module generates (when CPACK_GENERATOR aint set) a set of CMake options (see CMake option command) which may then be used ta select tha CPack generator(s) ta be used when launchin tha package target.

.TP
.B CPACK_CMAKE_GENERATOR
What CMake generator should be used if tha project is CMake project.

Defaults ta tha value of CMAKE_GENERATOR few playas will wanna chizzle dis setting.

.TP
.B CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY
Boolean toggle ta include/exclude top level directory (component case).

Similar usage as CPACK_INCLUDE_TOPLEVEL_DIRECTORY but fo' tha component case. Right back up in yo muthafuckin ass. See CPACK_INCLUDE_TOPLEVEL_DIRECTORY documentation fo' tha detail.

.TP
.B CPACK_CREATE_DESKTOP_LINKS
List of desktop links ta create

.TP
.B CPACK_GENERATOR
List of CPack generators ta use

If not specified, CPack will create a set of options CPACK_BINARY_<GENNAME> (e.g., CPACK_BINARY_NSIS) allowin tha user ta enable/disable individual generators. This variable may be used on tha command line as well as in:


.nf
    cpack \-D CPACK_GENERATOR="ZIP;TGZ" /path/to/build/tree
.fi

.TP
.B CPACK_INCLUDE_TOPLEVEL_DIRECTORY
Boolean toggle ta include/exclude top level directory.

When preparin a package CPack installs tha item under tha so\-called top level directory. Da purpose of is ta include (set ta 1 or ON or TRUE) tha top level directory up in tha package or not (set ta 0 or OFF or FALSE).


Each CPack generator has a funky-ass built\-in default value fo' dis variable. E.g fo' realz. Archive generators (ZIP, TGZ, ...) includes tha top level whereas RPM or DEB don't. Da user may override tha default value by settin dis variable.


There be a similar variable CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY which may be used ta override tha behavior fo' tha component packagin case which may have different default value fo' oldschool (now backward compatibility) reason.

.TP
.B CPACK_INSTALLED_DIRECTORIES
Extra directories ta install

.TP
.B CPACK_INSTALL_CMAKE_PROJECTS
List of four joints dat specify what tha fuck project ta install.

Da four joints are: Build directory, Project Name, Project Component, Directory. If omitted, CPack will build a installa dat installaz every last muthafuckin thang.

.TP
.B CPACK_INSTALL_COMMANDS
Extra commandz ta install components

.TP
.B CPACK_INSTALL_SCRIPT
Extra CMake script provided by tha user.

If set dis CMake script is ghon be executed by CPack durin its local [CPack\-private] installation which is done right before packagin tha files. Da script aint called by e.g.: make install.

.TP
.B CPACK_MONOLITHIC_INSTALL
Disablez tha component\-based installation mechanism.

When set tha component justification is ignored n' all installed shit is put up in a single "MONOLITHIC" package. Right back up in yo muthafuckin ass. Some CPack generators do monolithic packagin by default n' may be axed ta do component packagin by settin CPACK_<GENNAME>_COMPONENT_INSTALL ta 1/TRUE.

.TP
.B CPACK_OUTPUT_CONFIG_FILE
Da name of tha CPack binary configuration file.

This file is tha CPack configuration generated by tha CPack module fo' binary installers. Defaults ta CPackConfig.cmake.

.TP
.B CPACK_PACKAGE_DESCRIPTION_FILE
A text file used ta describe tha project.

Used, fo' example, tha introduction screen of a CPack\-generated Windows installa ta describe tha project.

.TP
.B CPACK_PACKAGE_DESCRIPTION_SUMMARY
Short description of tha project (only all dem lyrics).

.TP
.B CPACK_PACKAGE_DIRECTORY
Da directory up in which CPack is bustin its packaging.

If it aint set then dis will default (internally) ta tha build dir. Shiiit, dis aint no joke. This variable may be defined up in CPack config file or from tha cpack command line option "\-B". If set tha command line option override tha value found up in tha config file.

.TP
.B CPACK_PACKAGE_EXECUTABLES
Lists each of tha executablez n' associated text label ta be used ta create Start Menu shortcuts.

For example, settin dis ta tha list ccmake;CMake will create a gangbangin' finger-lickin' dirty-ass shortcut named "CMake" dat will execute tha installed executable ccmake. Not all CPack generators use it (at least NSIS n' OSXX11 do).

.TP
.B CPACK_PACKAGE_FILE_NAME
Da name of tha package file ta generate, not includin tha extension.

For example, cmake\-2.6.1\-Linux\-i686. Da default value is


.nf
  ${CPACK_PACKAGE_NAME}\-${CPACK_PACKAGE_VERSION}\-${CPACK_SYSTEM_NAME}.
.fi

.TP
.B CPACK_PACKAGE_ICON
A brandin image dat is ghon be displayed inside tha installa (used by GUI installers).

.TP
.B CPACK_PACKAGE_INSTALL_DIRECTORY
Installation directory on tha target system.

This may be used by some CPack generators like NSIS ta create a installation directory e.g., "CMake 2.5" below tha installation prefix fo' realz. All installed element is ghon be put inside dis directory.

.TP
.B CPACK_PACKAGE_INSTALL_REGISTRY_KEY
Registry key used when installin dis project.

This is only used by installa fo' Windows.   Da default value is based on tha installation directory.


.TP
.B CPACK_PACKAGE_NAME
Da name of tha package (or application)

If not specified, defaults ta tha project name.

.TP
.B CPACK_PACKAGE_VENDOR
Da name of tha package vendor

(e.g., "Kitware").

.TP
.B CPACK_PACKAGE_VERSION
Package full version, used internally

By default, dis is built from CPACK_PACKAGE_VERSION_MAJOR, CPACK_PACKAGE_VERSION_MINOR, n' CPACK_PACKAGE_VERSION_PATCH.

.TP
.B CPACK_PACKAGE_VERSION_MAJOR
Package major Version

.TP
.B CPACK_PACKAGE_VERSION_MINOR
Package minor Version

.TP
.B CPACK_PACKAGE_VERSION_PATCH
Package patch Version

.TP
.B CPACK_PACKAGING_INSTALL_PREFIX
Da prefix used up in tha built package.

Each CPack generator has a thugged-out default value (like /usr). This default value may be overwritten from tha CMakeLists.txt or tha cpack command line by settin a alternatizzle value.


e.g.  set(CPACK_PACKAGING_INSTALL_PREFIX "/opt")


This aint tha same purpose as CMAKE_INSTALL_PREFIX which is used when installin from tha build tree without buildin a package.

.TP
.B CPACK_PROJECT_CONFIG_FILE
CPack\-time project CPack configuration file.

This file included at cpack time, once per generator afta CPack has set CPACK_GENERATOR ta tha actual generator bein used. Y'all KNOW dat shit, muthafucka! Well shiiiit, it allows per\-generator settin of CPACK_* variablez at cpack time.

.TP
.B CPACK_RESOURCE_FILE_LICENSE
License ta be embedded up in tha installer

It will typically be displayed ta tha user by tha produced installa (often wit a explicit "Accept" button, fo' graphical installers) prior ta installation. I aint talkin' bout chicken n' gravy biatch. This license file is NOT added ta installed file but is used by some CPack generators like NSIS. If you wanna install a license file (may be tha same as dis one) along wit yo' project you must add a appropriate CMake INSTALL command up in yo' CMakeLists.txt.

.TP
.B CPACK_RESOURCE_FILE_README
ReadMe file ta be embedded up in tha installer

It typically raps bout up in some detail tha purpose of tha project durin tha installation. I aint talkin' bout chicken n' gravy biatch. Not all CPack generators uses dis file.

.TP
.B CPACK_RESOURCE_FILE_WELCOME
Welcome file ta be embedded up in tha installer.

It welcomes playas ta dis installa n' shit. Typically used up in tha graphical installaz on Windows n' Mac OS X.

.TP
.B CPACK_SET_DESTDIR
Boolean toggle ta make CPack use DESTDIR mechanizzle when packaging.

DESTDIR means DESTination DIRectory. Well shiiiit, it is commonly used by makefile playas up in order ta install software at non\-default location. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it aint nuthin but a funky-ass basic relocation mechanizzle dat should not be used on Windows (see CMAKE_INSTALL_PREFIX documentation). Well shiiiit, it is probably invoked like this:


.nf
 make DESTDIR=/home/john install
.fi

which will install tha concerned software rockin tha installation prefix, e.g. "/usr/local" prepended wit tha DESTDIR value which finally gives "/home/john/usr/local". When preparin a package, CPack first installs tha shit ta be packaged up in a local (to tha build tree) directory by rockin tha same DESTDIR mechanism. Nevertheless, if CPACK_SET_DESTDIR is set then CPack will set DESTDIR before bustin tha local install. Da most noticeable difference is dat without CPACK_SET_DESTDIR, CPack uses CPACK_PACKAGING_INSTALL_PREFIX as a prefix whereas wit CPACK_SET_DESTDIR set, CPack will use CMAKE_INSTALL_PREFIX as a prefix.


Manually settin CPACK_SET_DESTDIR may help (or simply be necessary) if some install rulez uses absolute DESTINATION (see CMake INSTALL command). But fuck dat shiznit yo, tha word on tha street is dat startin wit CPack/CMake 2.8.3 RPM n' DEB installaz tries ta handle DESTDIR automatically so dat it is seldom necessary fo' tha user ta set dat shit.

.TP
.B CPACK_SOURCE_GENERATOR
List of generators used fo' tha source packages.

As wit CPACK_GENERATOR, if dis aint specified then CPack will create a set of options (e.g., CPACK_SOURCE_ZIP) allowin playas ta select which packages is ghon be generated.

.TP
.B CPACK_SOURCE_IGNORE_FILES
Pattern of filez up in tha source tree dat won't be packaged when buildin a source package.

This be a list of regular expression patterns (that must be properly escaped), e.g., /CVS/;/\\\\.svn/;\\\\.swp$;\\\\.#;/#;.*~;cscope.*

.TP
.B CPACK_SOURCE_OUTPUT_CONFIG_FILE
Da name of tha CPack source configuration file.

This file is tha CPack configuration generated by tha CPack module fo' source installers. Defaults ta CPackSourceConfig.cmake.

.TP
.B CPACK_SOURCE_PACKAGE_FILE_NAME
Da name of tha source package

For example cmake\-2.6.1.

.TP
.B CPACK_SOURCE_STRIP_FILES
List of filez up in tha source tree dat is ghon be stripped.

Startin wit CMake 2.6.0 CPACK_SOURCE_STRIP_FILES is ghon be a funky-ass boolean variable which enablez strippin of all filez (a list of filez evaluates ta TRUE up in CMake, so dis chizzle is compatible).

.TP
.B CPACK_STRIP_FILES
List of filez ta be stripped

Startin wit CMake 2.6.0 CPACK_STRIP_FILES is ghon be a funky-ass boolean variable which enablez strippin of all filez (a list of filez evaluates ta TRUE up in CMake, so dis chizzle is compatible).

.TP
.B CPACK_SYSTEM_NAME
System name, defaults ta tha value of ${CMAKE_SYSTEM_NAME}.

.TP
.B CPACK_TOPLEVEL_TAG
Directory fo' tha installed files

.TP
.B CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION
Ask CPack ta warn each time a gangbangin' file wit absolute INSTALL DESTINATION is encountered.

This variable triggers tha definizzle of CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION when CPack runs cmake_install.cmake scripts.

.SH VARIABLES CONCERNING CPACK COMPONENTS
.TP
.B CPACK_<GENNAME>_COMPONENT_INSTALL
Enable/Disable component install fo' CPack generator <GENNAME>.

Each CPack Generator (RPM, DEB, ARCHIVE, NSIS, DMG, etc...) has a legacy default behavior. Shiiit, dis aint no joke. e.g. RPM buildz monolithic whereas NSIS buildz component. One can chizzle tha default behavior by settin dis variable ta 0/1 or OFF/ON.

.TP
.B CPACK_COMPONENTS_ALL
Da list of component ta install

Da default value of dis variable is computed by CPack n' gotz nuff all components defined by tha project. Da user may set it ta only include tha specified components.

.TP
.B CPACK_COMPONENTS_GROUPING
Specify how tha fuck components is grouped fo' multi\-package component\-aware CPack generators.

Some generators like RPM or ARCHIVE crew (TGZ, ZIP, ...) generates nuff muthafuckin packages filez when axed fo' component packaging. They crew tha component differently dependin on tha value of dis variable:


.nf
  \- ONE_PER_GROUP (default): creates one package file per component group
  \- ALL_COMPONENTS_IN_ONE : creates a single package wit all (requested) component
  \- IGNORE : creates one package per component, i.e. IGNORE component group
.fi

One can specify different groupin fo' different CPack generator by rockin a CPACK_PROJECT_CONFIG_FILE.

.TP
.B CPACK_COMPONENT_<compName>_DEPENDS
Da dependencies (list of components) on which dis component depends.

.TP
.B CPACK_COMPONENT_<compName>_DESCRIPTION
Da description of a cold-ass lil component

.TP
.B CPACK_COMPONENT_<compName>_DISPLAY_NAME
Da name ta be displayed fo' a cold-ass lil component

.TP
.B CPACK_COMPONENT_<compName>_GROUP
Da crew of a cold-ass lil component

.TP
.B CPACK_COMPONENT_<compName>_REQUIRED
True is dis component is required

.SH VARIABLES FOR LANGUAGES
.TP
.B CMAKE_<LANG>_ARCHIVE_APPEND
Rule variable ta append ta a static archive.

This be a rule variable dat  drops some lyrics ta CMake how tha fuck ta append ta a static archive.  It be used up in place of CMAKE_<LANG>_CREATE_STATIC_LIBRARY on some platforms up in order ta support big-ass object counts, n' you can put dat on yo' toast.  See also CMAKE_<LANG>_ARCHIVE_CREATE n' CMAKE_<LANG>_ARCHIVE_FINISH.

.TP
.B CMAKE_<LANG>_ARCHIVE_CREATE
Rule variable ta create a freshly smoked up static archive.

This be a rule variable dat  drops some lyrics ta CMake how tha fuck ta create a static archive.  It be used up in place of CMAKE_<LANG>_CREATE_STATIC_LIBRARY on some platforms up in order ta support big-ass object counts, n' you can put dat on yo' toast.  See also CMAKE_<LANG>_ARCHIVE_APPEND n' CMAKE_<LANG>_ARCHIVE_FINISH.

.TP
.B CMAKE_<LANG>_ARCHIVE_FINISH
Rule variable ta finish a existin static archive.

This be a rule variable dat  drops some lyrics ta CMake how tha fuck ta finish a static archive.  It be used up in place of CMAKE_<LANG>_CREATE_STATIC_LIBRARY on some platforms up in order ta support big-ass object counts, n' you can put dat on yo' toast.  See also CMAKE_<LANG>_ARCHIVE_CREATE n' CMAKE_<LANG>_ARCHIVE_APPEND.

.TP
.B CMAKE_<LANG>_COMPILER
Da full path ta tha compila fo' LANG.

This is tha command dat is ghon be used as tha <LANG> compila n' shit.  Once set, you can not chizzle dis variable.

.TP
.B CMAKE_<LANG>_COMPILER_ABI
An internal variable subject ta chizzle.

This is used up in determinin tha compila ABI n' is subject ta chizzle.

.TP
.B CMAKE_<LANG>_COMPILER_ID
Compila identification string.

A short strang unique ta tha compila vendor. Shiiit, dis aint no joke.  Possible joints include:


.nf
  Absoft = Absoft Fortran (absoft.com)
  ADSP = Analog VisualDSP++ (analog.com)
  Clang = LLVM Clang (clang.llvm.org)
  Cray = Cray Compila (cray.com)
  Embarcadero, Borland = Embarcadero (embarcadero.com)
  G95 = G95 Fortran (g95.org)
  GNU = GNU Compila Collection (gcc.gnu.org)
  HP = Hewlett\-Packard Compila (hp.com)
  Intel = Intel Compila (intel.com)
  MIPSpro = SGI MIPSpro (sgi.com)
  MSVC = Microsizzlez Visual Studio (microsoft.com)
  PGI = Da Portland Group (pgroup.com)
  PathScale = PathScale (pathscale.com)
  SDCC = Lil Small-Ass Device C Compila (sdcc.sourceforge.net)
  SunPro = Oracle Solaris Studio (oracle.com)
  TI = Texas Instruments (ti.com)
  TinyCC = Tiny C Compila (tinycc.org)
  Watcom = Open Watcom (openwatcom.org)
  XL, VisualAge, zOS = IBM XL (ibm.com)
.fi

This variable aint guaranteed ta be defined fo' all compilaz or languages.

.TP
.B CMAKE_<LANG>_COMPILER_LOADED
Defined ta legit if tha language is enabled.

When language <LANG> is enabled by project() or enable_language() dis variable is defined ta 1.

.TP
.B CMAKE_<LANG>_COMPILER_VERSION
Compila version string.

Compila version up in major[.minor[.patch[.tweak]]] format.  This variable aint guaranteed ta be defined fo' all compilaz or languages.

.TP
.B CMAKE_<LANG>_COMPILE_OBJECT
Rule variable ta compile a single object file.

This be a rule variable dat  drops some lyrics ta CMake how tha fuck ta compile a single object file fo' tha language <LANG>.

.TP
.B CMAKE_<LANG>_CREATE_SHARED_LIBRARY
Rule variable ta create a gangbangin' finger-lickin' dirty-ass shared library.

This be a rule variable dat  drops some lyrics ta CMake how tha fuck ta create a gangbangin' finger-lickin' dirty-ass shared library fo' tha language <LANG>.

.TP
.B CMAKE_<LANG>_CREATE_SHARED_MODULE
Rule variable ta create a gangbangin' finger-lickin' dirty-ass shared module.

This be a rule variable dat  drops some lyrics ta CMake how tha fuck ta create a gangbangin' finger-lickin' dirty-ass shared library fo' tha language <LANG>.

.TP
.B CMAKE_<LANG>_CREATE_STATIC_LIBRARY
Rule variable ta create a static library.

This be a rule variable dat  drops some lyrics ta CMake how tha fuck ta create a static library fo' tha language <LANG>.

.TP
.B CMAKE_<LANG>_FLAGS
Flags fo' all build types.

<LANG> flags used regardless of tha value of CMAKE_BUILD_TYPE.

.TP
.B CMAKE_<LANG>_FLAGS_DEBUG
Flags fo' Debug build type or configuration.

<LANG> flags used when CMAKE_BUILD_TYPE is Debug.

.TP
.B CMAKE_<LANG>_FLAGS_MINSIZEREL
Flags fo' MinSizeRel build type or configuration.

<LANG> flags used when CMAKE_BUILD_TYPE is MinSizeRel.Short fo' minimum size release.

.TP
.B CMAKE_<LANG>_FLAGS_RELEASE
Flags fo' Release build type or configuration.

<LANG> flags used when CMAKE_BUILD_TYPE is Release

.TP
.B CMAKE_<LANG>_FLAGS_RELWITHDEBINFO
Flags fo' RelWithDebInfo type or configuration.

<LANG> flags used when CMAKE_BUILD_TYPE is RelWithDebInfo.  Short fo' Release With Debug Information.

.TP
.B CMAKE_<LANG>_IGNORE_EXTENSIONS
File extensions dat should be ignored by tha build.

This be a list of file extensions dat may be part of a project fo' a given language but is not compiled.

.TP
.B CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES
Directories implicitly searched by tha compila fo' header files.

CMake do not explicitly specify these directories on compila command lines fo' language <LANG>.  This prevents system include directories from bein treated as user include directories on some compilers.

.TP
.B CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES
Implicit linker search path detected fo' language <LANG>.

Compilaz typically pass directories containin language runtime libraries n' default library search paths when they invoke a linker n' shit.  These paths is implicit linker search directories fo' tha compilerz language.  CMake automatically detects these directories fo' each language n' reports tha thangs up in dis biatch up in dis variable.


When a library up in one of these directories is given by full path ta target_link_libraries() CMake will generate tha \-l<name> form on link lines ta ensure tha linker searches its implicit directories fo' tha library.  Note dat some toolchains read implicit directories from a environment variable like fuckin LIBRARY_PATH so keep its value consistent when operatin up in a given build tree.

.TP
.B CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES
Implicit linker framework search path detected fo' language <LANG>.

These paths is implicit linker framework search directories fo' tha compilerz language.  CMake automatically detects these directories fo' each language n' reports tha thangs up in dis biatch up in dis variable.

.TP
.B CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES
Implicit link libraries n' flags detected fo' language <LANG>.

Compilaz typically pass language runtime library names n' other flags when they invoke a linker n' shit.  These flags is implicit link options fo' tha compilerz language.  CMake automatically detects these libraries n' flags fo' each language n' reports tha thangs up in dis biatch up in dis variable.

.TP
.B CMAKE_<LANG>_LIBRARY_ARCHITECTURE
Target architecture library directory name detected fo' <lang>.

If tha <lang> compila passes ta tha linker a architecture\-specific system library search directory like fuckin <prefix>/lib/<arch> dis variable gotz nuff tha <arch> name if/as detected by CMake.

.TP
.B CMAKE_<LANG>_LINKER_PREFERENCE
Preference value fo' linker language selection.

Da "linker language" fo' executable, shared library, n' module targets is tha language whose compila will invoke tha linker n' shit.  Da LINKER_LANGUAGE target property sets tha language explicitly.  Otherwise, tha linker language is dat whose linker preference value is highest among languages compiled n' linked tha fuck into tha target.  See also tha CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES variable.

.TP
.B CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES
True if CMAKE_<LANG>_LINKER_PREFERENCE propagates across targets.

This is used when CMake selects a linker language fo' a target.  Languages compiled directly tha fuck into tha target is always considered. Y'all KNOW dat shit, muthafucka!  A language compiled tha fuck into static libraries linked by tha target is considered if dis variable is true.

.TP
.B CMAKE_<LANG>_LINK_EXECUTABLE 
Rule variable ta link a executable.

Rule variable ta link a executable fo' tha given language.

.TP
.B CMAKE_<LANG>_OUTPUT_EXTENSION
Extension fo' tha output of a cold-ass lil compile fo' a single file.

This is tha extension fo' a object file fo' tha given <LANG>. For example .obj fo' C on Windows.

.TP
.B CMAKE_<LANG>_PLATFORM_ID
An internal variable subject ta chizzle.

This is used up in determinin tha platform n' is subject ta chizzle.

.TP
.B CMAKE_<LANG>_SIZEOF_DATA_PTR
Size of pointer\-to\-data types fo' language <LANG>.

This holdz tha size (in bytes) of pointer\-to\-data types up in tha target platform ABI.  It be defined fo' languages C n' CXX (C++).

.TP
.B CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS
Extensionz of source filez fo' tha given language.

This is tha list of extensions fo' a given languagez source files.

.TP
.B CMAKE_COMPILER_IS_GNU<LANG>
True if tha compila is GNU.

If tha selected <LANG> compila is tha GNU compila then dis is TRUE, if not it is FALSE.  Unlike tha other per\-language variables, dis uses tha GNU syntax fo' identifyin languages instead of tha CMake syntax. Recognized jointz of tha <LANG> suffix are:


.nf
  CC = C compiler
  CXX = C++ compiler
  G77 = Fortran compiler
.fi

.TP
.B CMAKE_Fortran_MODDIR_DEFAULT
Fortran default module output directory.

Most Fortran compilaz write .mod filez ta tha current hustlin directory.  For dem dat do not, dis is set ta "." n' used when tha Fortran_MODULE_DIRECTORY target property aint set.

.TP
.B CMAKE_Fortran_MODDIR_FLAG
Fortran flag fo' module output directory.

This stores tha flag needed ta pass tha value of tha Fortran_MODULE_DIRECTORY target property ta tha compiler.

.TP
.B CMAKE_Fortran_MODOUT_FLAG
Fortran flag ta enable module output.

Most Fortran compilaz write .mod filez up by default.  For others, dis stores tha flag needed ta enable module output.

.TP
.B CMAKE_INTERNAL_PLATFORM_ABI
An internal variable subject ta chizzle.

This is used up in determinin tha compila ABI n' is subject ta chizzle.

.TP
.B CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>
Specify a CMake file dat overrides platform shiznit fo' <LANG>.

This be a language\-specific version of CMAKE_USER_MAKE_RULES_OVERRIDE loaded only when enablin language <LANG>.

.SH VARIABLES SPECIFIC TO CPACK BUNDLE GENERATOR
.TP
.B CPACK_BUNDLE_ICON
Path ta a OSX icon file dat is ghon be used as tha icon fo' tha generated bundle.

This is tha icon dat appears up in tha OSX finder fo' tha bundle, n' up in tha OSX dock when tha bundle is opened. Y'all KNOW dat shit, muthafucka! Required.

.TP
.B CPACK_BUNDLE_NAME
Da name of tha generated bundle

This appears up in tha OSX finder as tha bundle name. Required.

.TP
.B CPACK_BUNDLE_PLIST
Path ta a OSX plist file dat is ghon be used fo' tha generated bundle.

This assumes dat tha calla has generated or specified they own Info.plist file. Required.

.TP
.B CPACK_BUNDLE_STARTUP_COMMAND
Path ta a startup script

This be a path ta a executable or script dat is ghon be run whenever a end\-user double\-clicks tha generated bundle up in tha OSX Finder n' shit. Optional.

.SH VARIABLES SPECIFIC TO CPACK CYGWIN GENERATOR
.TP
.B CPACK_CYGWIN_BUILD_SCRIPT
Da Cygwin build script

.nf
   FIXME: This documentation is incomplete.
.fi

.TP
.B CPACK_CYGWIN_PATCH_FILE
Da Cygwin patch file

.nf
   FIXME: This documentation is incomplete.
.fi

.TP
.B CPACK_CYGWIN_PATCH_NUMBER
Da Cygwin patch number

.nf
   FIXME: This documentation is incomplete.
.fi

.SH VARIABLES SPECIFIC TO CPACK DEBIAN (DEB) GENERATOR
.TP
.B CPACK_DEBIAN_PACKAGE_ARCHITECTURE
.nf
     Mandatory : YES
     Default   : Output of dpkg \-\-print\-architecture (or i386 if dpkg aint found)
     Da debian package architecture
.fi

.TP
.B CPACK_DEBIAN_PACKAGE_BREAKS
.nf
     Mandatory : NO
     Default   : \-
     peep http://www.debian.org/doc/debian\-policy/ch\-relationships.html#s\-binarydeps
     When one binary package declares dat it breaks another, dpkg will refuse ta allow the
     package which declares Breaks be installed unless tha fucked up package is deconfigured first,
     n' it will refuse ta allow tha fucked up package ta be reconfigured.
.fi

.TP
.B CPACK_DEBIAN_PACKAGE_CONFLICTS
.nf
     Mandatory : NO
     Default   : \-
     peep http://www.debian.org/doc/debian\-policy/ch\-relationships.html#s\-binarydeps
     When one binary package declares a cold-ass lil conflict wit another rockin a Conflicts field,
     dpkg will refuse ta allow dem ta be installed on tha system all up in tha same time.
.fi

.TP
.B CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA
.nf
     Mandatory : NO
     Default   : \-
     This variable allow advanced user ta add custom script ta tha control.tar.gz
     Typical usage is fo' conffiles, postinst, postrm, prerm.
     Usage: set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA
            "${CMAKE_CURRENT_SOURCE_DIR/prerm;${CMAKE_CURRENT_SOURCE_DIR}/postrm")
.fi

.TP
.B CPACK_DEBIAN_PACKAGE_DEBUG
.nf
     Mandatory : NO
     Default   : \-
     May be set when invokin cpack up in order ta trace debug shiznit
     durin CPackDeb run.
.fi

.TP
.B CPACK_DEBIAN_PACKAGE_DEPENDS
.nf
     Mandatory : NO
     Default   : \-
     May be used ta set deb dependencies.
.fi

.TP
.B CPACK_DEBIAN_PACKAGE_DESCRIPTION
.nf
     Mandatory : YES
     Default   : CPACK_PACKAGE_DESCRIPTION_SUMMARY
     Da debian package description
.fi

.TP
.B CPACK_DEBIAN_PACKAGE_ENHANCES
.nf
     Mandatory : NO
     Default   : \-
     peep http://www.debian.org/doc/debian\-policy/ch\-relationships.html#s\-binarydeps
     This field is similar ta Suggests but works up in tha opposite direction.
     It be used ta declare dat a package can enhizzle tha functionalitizzle of another package.
.fi

.TP
.B CPACK_DEBIAN_PACKAGE_HOMEPAGE
.nf
     Mandatory : NO
     Default   : \-
     Da URL of tha wizzy joint fo' dis package, preferably (when applicable) the
     joint from which tha original gangsta source can be obtained n' any additional
     upstream documentation or shiznit may be found.
     Da content of dis field be a simple URL without any surrounding
     charactas like fuckin <>.
.fi

.TP
.B CPACK_DEBIAN_PACKAGE_MAINTAINER
.nf
     Mandatory : YES
     Default   : CPACK_PACKAGE_CONTACT
     Da debian package maintainer
.fi

.TP
.B CPACK_DEBIAN_PACKAGE_NAME
.nf
     Mandatory : YES
     Default   : CPACK_PACKAGE_NAME (lower case)
     Da debian package summary
.fi

.TP
.B CPACK_DEBIAN_PACKAGE_PREDEPENDS
.nf
     Mandatory : NO
     Default   : \-
     peep http://www.debian.org/doc/debian\-policy/ch\-relationships.html#s\-binarydeps
     This field is like Depends, except dat it also forces dpkg ta complete installation of
     tha packages named before even startin tha installation of tha package which declares
     tha pre\-dependency.
.fi

.TP
.B CPACK_DEBIAN_PACKAGE_PRIORITY
.nf
     Mandatory : YES
     Default   : 'optional'
     Da debian package priority
.fi

.TP
.B CPACK_DEBIAN_PACKAGE_PROVIDES
.nf
     Mandatory : NO
     Default   : \-
     peep http://www.debian.org/doc/debian\-policy/ch\-relationships.html#s\-binarydeps
     A virtual package is one which appears up in tha Provides control field of another package.
.fi

.TP
.B CPACK_DEBIAN_PACKAGE_RECOMMENDS
.nf
     Mandatory : NO
     Default   : \-
     peep http://www.debian.org/doc/debian\-policy/ch\-relationships.html#s\-binarydeps
     Allows packages ta declare a strong yo, but not absolute, dependency on other packages.
.fi

.TP
.B CPACK_DEBIAN_PACKAGE_REPLACES
.nf
     Mandatory : NO
     Default   : \-
     peep http://www.debian.org/doc/debian\-policy/ch\-relationships.html#s\-binarydeps
     Packages can declare up in they control file dat they should overwrite
     filez up in certain other packages, or straight-up replace other packages.
.fi

.TP
.B CPACK_DEBIAN_PACKAGE_SECTION
.nf
     Mandatory : YES
     Default   : 'devel'
     Da debian package section
.fi

.TP
.B CPACK_DEBIAN_PACKAGE_SHLIBDEPS
.nf
     Mandatory : NO
     Default   : OFF
     May be set ta ON up in order ta use dpkg\-shlibdeps ta generate
     betta package dependency list.
     Yo ass may need set CMAKE_INSTALL_RPATH toi appropriate value
     if you use dis feature, cuz if you don't dpkg\-shlibdeps
     may fail ta find yo' own shared libs.
     See http://www.cmake.org/Wiki/CMake_RPATH_handling.
.fi

.TP
.B CPACK_DEBIAN_PACKAGE_SUGGESTS
.nf
     Mandatory : NO
     Default   : \-
     peep http://www.debian.org/doc/debian\-policy/ch\-relationships.html#s\-binarydeps
     Allows packages ta declare a suggested package install grouping.
.fi

.TP
.B CPACK_DEBIAN_PACKAGE_VERSION
.nf
     Mandatory : YES
     Default   : CPACK_PACKAGE_VERSION
     Da debian package version
.fi

.SH VARIABLES SPECIFIC TO CPACK DRAGNDROP GENERATOR
.TP
.B CPACK_COMMAND_HDIUTIL
Path ta tha hdiutil(1) command used ta operate on disk image filez on Mac OS X.

This variable can be used ta override tha automatically detected command (or specify its location if tha auto\-detection fails ta find dat shit.)

.TP
.B CPACK_COMMAND_REZ
Path ta tha Rez(1) command used ta compile resources on Mac OS X.

This variable can be used ta override tha automatically detected command (or specify its location if tha auto\-detection fails ta find dat shit.)

.TP
.B CPACK_COMMAND_SETFILE
Path ta tha SetFile(1) command used ta set extended attributes on filez n' directories on Mac OS X.

This variable can be used ta override tha automatically detected command (or specify its location if tha auto\-detection fails ta find dat shit.)

.TP
.B CPACK_DMG_BACKGROUND_IMAGE
Path ta a funky-ass background image file

This file is ghon be used as tha background fo' tha Finder Window when tha disk image is opened. Y'all KNOW dat shit, muthafucka!  By default no background image is set. Da background image be applied afta applyin tha custom .DS_Store file.

.TP
.B CPACK_DMG_DS_STORE
Path ta a cold-ass lil custom DS_Store file

This .DS_Store file e.g. can be used ta specify tha Finder window position/geometry n' layout (like fuckin hidden toolbars, placement of tha icons etc.). This file has ta be generated by tha Finder (either manually or all up in OSA\-script) rockin a aiiight folda from which tha .DS_Store file can then be extracted.

.TP
.B CPACK_DMG_FORMAT
Da disk image format

Common joints is UDRO (UDIF read\-only), UDZO (UDIF zlib\-compressed) or UDBZ (UDIF bzip2\-compressed). Refer ta hdiutil(1) fo' mo' shiznit on other available formats.

.TP
.B CPACK_DMG_VOLUME_NAME
Da volume name of tha generated disk image.

Defaults ta CPACK_PACKAGE_FILE_NAME.

.SH VARIABLES SPECIFIC TO CPACK NSIS GENERATOR
.TP
.B CPACK_NSIS_COMPRESSOR
Da arguments dat is ghon be passed ta tha NSIS SetCompressor command.

.TP
.B CPACK_NSIS_CONTACT
Contact shiznit fo' thangs n' comments bout tha installation process.

.TP
.B CPACK_NSIS_CREATE_ICONS_EXTRA
Additionizzle NSIS commandz fo' bustin start menu shortcuts.

.TP
.B CPACK_NSIS_DELETE_ICONS_EXTRA
Additionizzle NSIS commandz ta uninstall start menu shortcuts.

.TP
.B CPACK_NSIS_DISPLAY_NAME
Da display name strang dat appears up in   tha Windows Add/Remove Program control panel


.TP
.B CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL
Ask bout uninstallin previous versions first.

.nf
   If dis is set ta "ON", then a installa will look fo' previous
   installed versions n' if one is found, ask tha user whether to
   uninstall it before proceedin wit tha install.
.fi

.TP
.B CPACK_NSIS_EXECUTABLES_DIRECTORY
Creatin NSIS start menu links assumes dat they is up in 'bin' unless dis variable is set.

.nf
   For example, you would set dis ta 'exec' if yo' executablez are
   up in a exec directory.
.fi

.TP
.B CPACK_NSIS_EXTRA_INSTALL_COMMANDS
Extra NSIS commandz dat   is ghon be added ta tha end of tha install Section, afta your


.nf
 install tree be available on tha target system.
.fi

.TP
.B CPACK_NSIS_EXTRA_PREINSTALL_COMMANDS
Extra NSIS commandz dat   is ghon be added ta tha beginnin of tha install Section, before your


.nf
 install tree be available on tha target system.
.fi

.TP
.B CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS
Extra NSIS commandz dat will   be added ta tha uninstall Section, before yo' install tree is


.nf
 removed from tha target system.
.fi

.TP
.B CPACK_NSIS_HELP_LINK
URL ta a wizzy joint providin assistizzle up in installin yo' application.

.TP
.B CPACK_NSIS_INSTALLED_ICON_NAME
A path ta tha executable dat gotz nuff tha installa icon.

.TP
.B CPACK_NSIS_INSTALLER_MUI_ICON_CODE
undocumented

.TP
.B CPACK_NSIS_INSTALL_ROOT
Da default installation directory presented ta tha end user by tha NSIS installa is under dis root dir.

Da full   directory presented ta tha end user is:


.nf
   ${CPACK_NSIS_INSTALL_ROOT}/${CPACK_PACKAGE_INSTALL_DIRECTORY}
.fi

.TP
.B CPACK_NSIS_MENU_LINKS
Specify links up in [application] menu

.nf
   This should contain a list of pair "link" "link name". Da link
   may be a URL or a path relatizzle ta installation prefix.
   Like:
     set(CPACK_NSIS_MENU_LINKS
         "doc/cmake\-@CMake_VERSION_MAJOR@.@CMake_VERSION_MINOR@/cmake.html" "CMake Help"
         "http://www.cmake.org" "CMake Web Joint")
.fi

.TP
.B CPACK_NSIS_MODIFY_PATH
Modify PATH toggle

.nf
   If dis is set ta "ON", then a extra page
   will step tha fuck up in tha installa dat will allow tha user ta chizzle
   whether tha program directory should be added ta tha system PATH
   variable.
.fi

.TP
.B CPACK_NSIS_MUI_FINISHPAGE_RUN
Specify a executable ta add a option ta run on tha finish page of tha NSIS installer.

.TP
.B CPACK_NSIS_MUI_ICON
An icon filename

.nf
   Da name of a *.ico file used as tha main icon fo' tha generated
   install program.
.fi

.TP
.B CPACK_NSIS_MUI_UNIICON
An icon filename

.nf
   Da name of a *.ico file used as tha main icon fo' tha generated
   uninstall program.
.fi

.TP
.B CPACK_NSIS_PACKAGE_NAME
Da title displayed all up in tha top of tha installer.

.TP
.B CPACK_NSIS_URL_INFO_ABOUT
URL ta a wizzy joint providin mo' shiznit bout yo' application.

.SH VARIABLES SPECIFIC TO CPACK PACKAGEMAKER GENERATOR
.TP
.B CPACK_OSX_PACKAGE_VERSION
Da version of Mac OS X dat tha resultin PackageMaker archive should be compatible with.

Different versionz of Mac OS X support different features. For example, CPack can only build component\-based installaz fo' Mac OS X 10.4 or newer, n' can only build installaz dat downlizzle component son\-the\-fly fo' Mac OS X 10.5 or newer n' shit. If left blank, dis value is ghon be set ta tha minimum version of Mac OS X dat supports tha axed features. Right back up in yo muthafuckin ass. Set dis variable ta some value (e.g., 10.4) only if you wanna guarantee dat yo' installa will work on dat version of Mac OS X, n' don't mind missin extra features available up in tha installa shippin wit lata versionz of Mac OS X.

.SH VARIABLES SPECIFIC TO CPACK RPM GENERATOR
.TP
.B CPACK_RPM_CHANGELOG_FILE
RPM chizzlelog file

.nf
     Mandatory : NO
     Default   : \-
     May be used ta embed a cold-ass lil chizzlelog up in tha spec file.
     Da refered file is ghon be read n' directly put afta tha %changelog
     section.
.fi

.TP
.B CPACK_RPM_COMPRESSION_TYPE
RPM compression type

.nf
     Mandatory : NO
     Default   : \-
     May be used ta override RPM compression type ta be used
     ta build tha RPM. For example some Linux distribution now default
     ta lzma or xz compression whereas olda cannot use such RPM.
     Usin dis one can enforce compression type ta be used.
     Possible value are: lzma, xz, bzip2 n' gzip.
.fi

.TP
.B CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST
list of path ta be excluded

.nf
     Mandatory : NO
     Default   : /etc /etc/init.d /usr /usr/share /usr/share/doc /usr/bin /usr/lib /usr/lib64 /usr/include
     May be used ta exclude path (directories or files) from tha auto\-generated
     list of paths discovered by CPack RPM. Da defaut value gotz nuff a reasonable
     set of joints if tha variable aint defined by tha user n' shit. If tha variable
     is defined by tha user then CPackRPM will NOT any of tha default path.
     If you wanna add some path ta tha default list then you can use
     CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION variable.
.fi

.TP
.B CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION
additionizzle list of path ta be excluded

.nf
     Mandatory : NO
     Default   : \-
     May be used ta add mo' exclude path (directories or files) from tha initial
     default list of excluded paths. Right back up in yo muthafuckin ass. See CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST.
.fi

.TP
.B CPACK_RPM_GENERATE_USER_BINARY_SPECFILE_TEMPLATE
Spec file template

.nf
     Mandatory : NO
     Default   : \-
     If set CPack will generate a template fo' USER specified binary
     spec file n' stop wit a error. Shiiit, dis aint no joke. For example launch CPack like this
     cpack \-D CPACK_RPM_GENERATE_USER_BINARY_SPECFILE_TEMPLATE=1 \-G RPM
     Da user may then use dis file up in order ta hand\-craft is own
     binary spec file which may be used wit CPACK_RPM_USER_BINARY_SPECFILE.
.fi

.TP
.B CPACK_RPM_PACKAGE_ARCHITECTURE
Da RPM package architecture

.nf
     Mandatory : NO
     Default   : \-
     This may be set ta "noarch" if you
     know yo ass is buildin a noarch package.
.fi

.TP
.B CPACK_RPM_PACKAGE_DEBUG
Toggle CPackRPM debug output

.nf
     Mandatory : NO
     Default   : \-
     May be set when invokin cpack up in order ta trace debug shiznit
     durin CPack RPM run. I aint talkin' bout chicken n' gravy biatch. For example you may launch CPack like this
     cpack \-D CPACK_RPM_PACKAGE_DEBUG=1 \-G RPM
.fi

.TP
.B CPACK_RPM_PACKAGE_DESCRIPTION
RPM package description

.nf
     Mandatory : YES
     Default   : CPACK_PACKAGE_DESCRIPTION_FILE if set or "no package description available"
.fi

.TP
.B CPACK_RPM_PACKAGE_GROUP
Da RPM package group

.nf
     Mandatory : YES
     Default   : "unknown"
.fi

.TP
.B CPACK_RPM_PACKAGE_LICENSE
Da RPM package license policy

.nf
     Mandatory : YES
     Default   : "unknown"
.fi

.TP
.B CPACK_RPM_PACKAGE_NAME
Da RPM package name

.nf
     Mandatory : YES
     Default   : CPACK_PACKAGE_NAME
.fi

.TP
.B CPACK_RPM_PACKAGE_OBSOLETES
RPM spec obsoletes field

.nf
     Mandatory : NO
     Default   : \-
     May be used ta set RPM packages dat is obsoleted by dis one.
.fi

.TP
.B CPACK_RPM_PACKAGE_PROVIDES
RPM spec serves up field

.nf
     Mandatory : NO
     Default   : \-
     May be used ta set RPM dependencies (provides).
     Da provided package list of a RPM file could be printed with
     rpm \-qp \-\-provides file.rpm
.fi

.TP
.B CPACK_RPM_PACKAGE_RELEASE
Da RPM package release

.nf
     Mandatory : YES
     Default   : 1
     This is tha numberin of tha RPM package
     itself, i.e. tha version of tha packagin n' not tha version of the
     content (see CPACK_RPM_PACKAGE_VERSION). One may chizzle tha default
     value if tha previous packagin was buggy and/or you wanna put here
     a gangbangin' fancy Linux distro specific numbering.
.fi

.TP
.B CPACK_RPM_PACKAGE_RELOCATABLE
build a relocatable RPM

.nf
     Mandatory : NO
     Default   : CPACK_PACKAGE_RELOCATABLE
     If dis variable is set ta TRUE or ON CPackRPM will try
     ta build a relocatable RPM package fo' realz. A relocatable RPM may
     be installed rockin rpm \-\-prefix or \-\-relocate up in order to
     install it at a alternate place peep rpm(8).
     Note dat currently dis may fail if CPACK_SET_DESTDIR is set ta ON.
     If CPACK_SET_DESTDIR is set then yo big-ass booty is ghon git a warnin message
     but if there is file installed wit absolute path you gonna get
     unexpected behavior.
.fi

.TP
.B CPACK_RPM_PACKAGE_REQUIRES
RPM spec requires field

.nf
     Mandatory : NO
     Default   : \-
     May be used ta set RPM dependencies (requires).
     Note dat you must enclose tha complete requires strang between quotes,
     fo' example:
     set(CPACK_RPM_PACKAGE_REQUIRES "python >= 2.5.0, cmake >= 2.8")
     Da required package list of a RPM file could be printed with
     rpm \-qp \-\-requires file.rpm
.fi

.TP
.B CPACK_RPM_PACKAGE_SUGGESTS
RPM spec suggest field

.nf
     Mandatory : NO
     Default   : \-
     May be used ta set weak RPM dependencies (suggests).
     Note dat you must enclose tha complete requires strang between quotes.
.fi

.TP
.B CPACK_RPM_PACKAGE_SUMMARY
Da RPM package summary

.nf
     Mandatory : YES
     Default   : CPACK_PACKAGE_DESCRIPTION_SUMMARY
.fi

.TP
.B CPACK_RPM_PACKAGE_URL
Da projects URL

.nf
     Mandatory : NO
     Default   : \-
.fi

.TP
.B CPACK_RPM_PACKAGE_VENDOR
Da RPM package vendor

.nf
     Mandatory : YES
     Default   : CPACK_PACKAGE_VENDOR if set or "unknown"
.fi

.TP
.B CPACK_RPM_PACKAGE_VERSION
Da RPM package version

.nf
     Mandatory : YES
     Default   : CPACK_PACKAGE_VERSION
.fi

.TP
.B CPACK_RPM_POST_INSTALL_SCRIPT_FILE
.nf
  CPACK_RPM_POST_UNINSTALL_SCRIPT_FILE
     Mandatory : NO
     Default   : \-
     May be used ta embed a post (un)installation script up in tha spec file.
     Da refered script file(s) is ghon be read n' directly
     put afta tha %post or %postun section
     If CPACK_RPM_COMPONENT_INSTALL is set ta ON tha (un)install script for
     each component can be overridden with
     CPACK_RPM_<COMPONENT>_POST_INSTALL_SCRIPT_FILE and
     CPACK_RPM_<COMPONENT>_POST_UNINSTALL_SCRIPT_FILE
     One may verify which scriptlet has been included with
      rpm \-qp \-\-scripts  package.rpm
.fi

.TP
.B CPACK_RPM_PRE_INSTALL_SCRIPT_FILE
.nf
  CPACK_RPM_PRE_UNINSTALL_SCRIPT_FILE
     Mandatory : NO
     Default   : \-
     May be used ta embed a pre (un)installation script up in tha spec file.
     Da refered script file(s) is ghon be read n' directly
     put afta tha %pre or %preun section
     If CPACK_RPM_COMPONENT_INSTALL is set ta ON tha (un)install script for
     each component can be overridden with
     CPACK_RPM_<COMPONENT>_PRE_INSTALL_SCRIPT_FILE and
     CPACK_RPM_<COMPONENT>_PRE_UNINSTALL_SCRIPT_FILE
     One may verify which scriptlet has been included with
      rpm \-qp \-\-scripts  package.rpm
.fi

.TP
.B CPACK_RPM_SPEC_INSTALL_POST
[deprecated]

.nf
     Mandatory : NO
     Default   : \-
     This way of specifyin post\-install script is deprecated use
     CPACK_RPM_POST_INSTALL_SCRIPT_FILE
     May be used ta set a RPM post\-install command inside tha spec file.
     For example settin it ta "/bin/true" may be used ta prevent
     rpmbuild ta strip binaries.
.fi

.TP
.B CPACK_RPM_SPEC_MORE_DEFINE
RPM extended spec definitions lines

.nf
     Mandatory : NO
     Default   : \-
     May be used ta add any %define lines ta tha generated spec file.
.fi

.TP
.B CPACK_RPM_USER_BINARY_SPECFILE
A user provided spec file

.nf
     Mandatory : NO
     Default   : \-
     May be set by tha user up in order ta specify a USER binary spec file
     ta be used by CPackRPM instead of generatin tha file.
     Da specified file is ghon be processed by configure_file( @ONLY).
     One can provide a cold-ass lil component specific file by setting
     CPACK_RPM_<componentName>_USER_BINARY_SPECFILE.
.fi

.TP
.B CPACK_RPM_USER_FILELIST
.nf
  CPACK_RPM_<COMPONENT>_USER_FILELIST
     Mandatory : NO
     Default   : \-
     May be used ta explicitly specify %(<directive>) file line
     up in tha spec file. Like %config(noreplace) or any other directive
     dat be found up in tha %filez section. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Since CPackRPM is generating
     tha list of filez (and directories) tha user specified filez of
     tha CPACK_RPM_<COMPONENT>_USER_FILELIST list is ghon be removed from tha generated list.
.fi

.SH VARIABLES SPECIFIC TO CPACK WIX GENERATOR
.TP
.B CPACK_WIX_CULTURES
Language(s) of tha installer

Languages is compiled tha fuck into tha WixUI extension library. To use them, simply provide tha name of tha culture.  If you specify mo' than one culture identifier up in a cold-ass lil comma or semicolon delimited list, tha straight-up original gangsta one dat is found is ghon be used. Y'all KNOW dat shit, muthafucka!  Yo ass can find a list of supported languages at: http://wix.sourceforge.net/manual\-wix3/WixUI_localization.htm


.TP
.B CPACK_WIX_LICENSE_RTF
RTF License File

If CPACK_RESOURCE_FILE_LICENSE has a .rtf extension it is used as\-is.


If CPACK_RESOURCE_FILE_LICENSE has a .txt extension it is implicitly converted ta RTF by tha WiX Generator.


With CPACK_WIX_LICENSE_RTF you can override tha license file used by tha WiX Generator up in case CPACK_RESOURCE_FILE_LICENSE is up in a unsupported format or tha .txt \-> .rtf conversion do not work as expected.


.TP
.B CPACK_WIX_PRODUCT_GUID
Product GUID (Product/@Id)

Will be automatically generated unless explicitly provided.


If explicitly provided dis will set tha Product Id of yo' installer.


Da installa will abort if it detects a pre\-existin installation dat uses tha same ol' dirty GUID.


Da GUID shall use tha syntax busted lyrics bout fo' CPACK_WIX_UPGRADE_GUID.

.TP
.B CPACK_WIX_PRODUCT_ICON
Da Icon shown next ta tha program name up in Add/Remove programs

If set, dis icon is used up in place of tha default icon.


.TP
.B CPACK_WIX_PROGRAM_MENU_FOLDER
Start menu folda name fo' launcher

If dis variable aint set, it is ghon be initialized wit CPACK_PACKAGE_NAME


.TP
.B CPACK_WIX_TEMPLATE
Template file fo' WiX generation

If dis variable is set, tha specified template is ghon be used ta generate tha WiX wxs file. This should be used if further customization of tha output is required.


If dis variable aint set, tha default MSI template included wit CMake is ghon be used.


.TP
.B CPACK_WIX_UI_BANNER
Da bitmap will step tha fuck up all up in tha top of all installa pages other than tha welcome n' completion dialogs

If set, dis image will replace tha default banner image.


This image must be 493 by 58 pixels.


.TP
.B CPACK_WIX_UI_DIALOG
Background bitmap used on tha welcome n' completion dialogs

If dis variable is set, tha installa will replace tha default dialog image.


This image must be 493 by 312 pixels.


.TP
.B CPACK_WIX_UPGRADE_GUID
Upgrade GUID (Product/@UpgradeCode)

Will be automatically generated unless explicitly provided.


It should be explicitly set ta a cold-ass lil constant generated gloabally unique identifier (GUID) ta allow yo' installaz ta replace existin installations dat use tha same GUID.


Yo ass may fo' example explicitly set dis variable up in yo' CMakeLists.txt ta tha value dat has been generated per default. Yo ass should not use GUIDs dat you did not generate yo ass or which may belong ta other projects.


A GUID shall have tha followin fixed length syntax: XXXXXXXX\-XXXX\-XXXX\-XXXX\-XXXXXXXXXXXX


.nf
  (each X represents a uppercase hexadecimal digit)
.fi

.SH VARIABLES THAT CONTROL THE BUILD
.TP
.B CMAKE_<CONFIG>_POSTFIX
Default filename postfix fo' libraries under configuration <CONFIG>.

When a non\-executable target is pimped its <CONFIG>_POSTFIX target property is initialized wit tha value of dis variable if it is set.

.TP
.B CMAKE_<LANG>_VISIBILITY_PRESET
Default value fo' <LANG>_VISIBILITY_PRESET of targets.

This variable is used ta initialize tha <LANG>_VISIBILITY_PRESET property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_ARCHIVE_OUTPUT_DIRECTORY
Where ta put all tha ARCHIVE targets when built.

This variable is used ta initialize tha ARCHIVE_OUTPUT_DIRECTORY property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_AUTOMOC
Whether ta handle moc automatically fo' Qt targets.

This variable is used ta initialize tha AUTOMOC property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_AUTOMOC_MOC_OPTIONS
Additionizzle options fo' moc when rockin automoc (see CMAKE_AUTOMOC).

This variable is used ta initialize tha AUTOMOC_MOC_OPTIONS property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_BUILD_WITH_INSTALL_RPATH
Use tha install path fo' tha RPATH

Normally CMake uses tha build tree fo' tha RPATH when buildin executablez etc on systems dat use RPATH. When tha software is installed tha executablez etc is relinked by CMake ta have tha install RPATH. If dis variable is set ta legit then tha software be always built wit tha install path fo' tha RPATH n' do not need ta be relinked when installed.

.TP
.B CMAKE_DEBUG_POSTFIX
See variable CMAKE_<CONFIG>_POSTFIX.

This variable be a special case of tha more\-general CMAKE_<CONFIG>_POSTFIX variable fo' tha DEBUG configuration.

.TP
.B CMAKE_EXE_LINKER_FLAGS
Linker flags ta be used ta create executables.

These flags is ghon be used by tha linker when bustin a executable.

.TP
.B CMAKE_EXE_LINKER_FLAGS_<CONFIG>
Flags ta be used when linkin a executable.

Same as CMAKE_C_FLAGS_* but used by tha linker when bustin executables.

.TP
.B CMAKE_Fortran_FORMAT
Set ta FIXED or FREE ta indicate tha Fortran source layout.

This variable is used ta initialize tha Fortran_FORMAT property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_Fortran_MODULE_DIRECTORY
Fortran module output directory.

This variable is used ta initialize tha Fortran_MODULE_DIRECTORY property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_GNUtoMS
Convert GNU import libraries (.dll.a) ta MS format (.lib).

This variable is used ta initialize tha GNUtoMS property on targets when they is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_INCLUDE_CURRENT_DIR
Automatically add tha current source\- n' build directories ta tha include path.

If dis variable is enabled, CMake automatically addz up in each directory ${CMAKE_CURRENT_SOURCE_DIR} n' ${CMAKE_CURRENT_BINARY_DIR} ta tha include path fo' dis directory. These additionizzle include directories do not propagate down ta subdirectories. Put ya muthafuckin choppers up if ya feel dis! This is useful mainly fo' out\-of\-source builds, where filez generated tha fuck into tha build tree is included by filez located up in tha source tree.


By default CMAKE_INCLUDE_CURRENT_DIR is OFF.

.TP
.B CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE
Automatically add tha current source\- n' build directories ta tha INTERFACE_INCLUDE_DIRECTORIES.

If dis variable is enabled, CMake automatically addz fo' each shared library target, static library target, module target n' executable target, ${CMAKE_CURRENT_SOURCE_DIR} n' ${CMAKE_CURRENT_BINARY_DIR} ta tha INTERFACE_INCLUDE_DIRECTORIES.By default CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE is OFF.

.TP
.B CMAKE_INSTALL_NAME_DIR
Mac OS X directory name fo' installed targets.

CMAKE_INSTALL_NAME_DIR is used ta initialize tha INSTALL_NAME_DIR property on all targets, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. See dat target property fo' mo' shiznit.

.TP
.B CMAKE_INSTALL_RPATH
Da rpath ta use fo' installed targets.

A semicolon\-separated list specifyin tha rpath ta use up in installed targets (for platforms dat support it).  This is used ta initialize tha target property INSTALL_RPATH fo' all targets.

.TP
.B CMAKE_INSTALL_RPATH_USE_LINK_PATH
Add paths ta linker search n' installed rpath.

CMAKE_INSTALL_RPATH_USE_LINK_PATH be a funky-ass boolean dat if set ta legit will append directories up in tha linker search path n' outside tha project ta tha INSTALL_RPATH.  This is used ta initialize tha target property INSTALL_RPATH_USE_LINK_PATH fo' all targets.

.TP
.B CMAKE_LIBRARY_OUTPUT_DIRECTORY
Where ta put all tha LIBRARY targets when built.

This variable is used ta initialize tha LIBRARY_OUTPUT_DIRECTORY property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_LIBRARY_PATH_FLAG
Da flag ta be used ta add a library search path ta a cold-ass lil compiler.

Da flag is ghon be used ta specify a library directory ta tha compila n' shit.  On most compilaz dis is "\-L".

.TP
.B CMAKE_LINK_DEF_FILE_FLAG  
Linker flag ta be used ta specify a .def file fo' dll creation.

Da flag is ghon be used ta add a .def file when bustin a thugged-out dll on Windows; dis is only defined on Windows.

.TP
.B CMAKE_LINK_DEPENDS_NO_SHARED
Whether ta skip link dependencies on shared library files.

This variable initializes tha LINK_DEPENDS_NO_SHARED property on targets when they is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_LINK_INTERFACE_LIBRARIES
Default value fo' LINK_INTERFACE_LIBRARIES of targets.

This variable is used ta initialize tha LINK_INTERFACE_LIBRARIES property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_LINK_LIBRARY_FILE_FLAG
Flag ta be used ta link a library specified by a path ta its file.

Da flag is ghon be used before a library file path is given ta tha linker n' shit.  This is needed only on straight-up few platforms.

.TP
.B CMAKE_LINK_LIBRARY_FLAG
Flag ta be used ta link a library tha fuck into a executable.

Da flag is ghon be used ta specify a library ta link ta a executable.  On most compilaz dis is "\-l".

.TP
.B CMAKE_MACOSX_BUNDLE
Default value fo' MACOSX_BUNDLE of targets.

This variable is used ta initialize tha MACOSX_BUNDLE property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_MODULE_LINKER_FLAGS
Linker flags ta be used ta create modules.

These flags is ghon be used by tha linker when bustin a module.

.TP
.B CMAKE_MODULE_LINKER_FLAGS_<CONFIG>
Flags ta be used when linkin a module.

Same as CMAKE_C_FLAGS_* but used by tha linker when bustin modules.

.TP
.B CMAKE_NO_BUILTIN_CHRPATH
Do not use tha builtin ELF editor ta fix RPATHs on installation.

When a ELF binary need ta gotz a gangbangin' finger-lickin' different RPATH afta installation than it do up in tha build tree, CMake uses a funky-ass builtin editor ta chizzle tha RPATH up in tha installed copy.  If dis variable is set ta legit then CMake will relink tha binary before installation instead of rockin its builtin editor.

.TP
.B CMAKE_PDB_OUTPUT_DIRECTORY
Where ta put all tha MS debug symbol filez from linker.

This variable is used ta initialize tha PDB_OUTPUT_DIRECTORY property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_POSITION_INDEPENDENT_CODE
Default value fo' POSITION_INDEPENDENT_CODE of targets.

This variable is used ta initialize tha POSITION_INDEPENDENT_CODE property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_RUNTIME_OUTPUT_DIRECTORY
Where ta put all tha RUNTIME targets when built.

This variable is used ta initialize tha RUNTIME_OUTPUT_DIRECTORY property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_SHARED_LINKER_FLAGS
Linker flags ta be used ta create shared libraries.

These flags is ghon be used by tha linker when bustin a gangbangin' finger-lickin' dirty-ass shared library.

.TP
.B CMAKE_SHARED_LINKER_FLAGS_<CONFIG>
Flags ta be used when linkin a gangbangin' finger-lickin' dirty-ass shared library.

Same as CMAKE_C_FLAGS_* but used by tha linker when bustin shared libraries.

.TP
.B CMAKE_SKIP_BUILD_RPATH
Do not include RPATHs up in tha build tree.

Normally CMake uses tha build tree fo' tha RPATH when buildin executablez etc on systems dat use RPATH. When tha software is installed tha executablez etc is relinked by CMake ta have tha install RPATH. If dis variable is set ta legit then tha software be always built wit no RPATH.

.TP
.B CMAKE_SKIP_INSTALL_RPATH
Do not include RPATHs up in tha install tree.

Normally CMake uses tha build tree fo' tha RPATH when buildin executablez etc on systems dat use RPATH. When tha software is installed tha executablez etc is relinked by CMake ta have tha install RPATH. If dis variable is set ta legit then tha software be always installed without RPATH, even if RPATH is enabled when building.  This can be useful fo' example ta allow hustlin tests from tha build directory wit RPATH enabled before tha installation step.  To omit RPATH up in both tha build n' install steps, use CMAKE_SKIP_RPATH instead.

.TP
.B CMAKE_STATIC_LINKER_FLAGS
Linker flags ta be used ta create static libraries.

These flags is ghon be used by tha linker when bustin a static library.

.TP
.B CMAKE_STATIC_LINKER_FLAGS_<CONFIG>
Flags ta be used when linkin a static library.

Same as CMAKE_C_FLAGS_* but used by tha linker when bustin static libraries.

.TP
.B CMAKE_TRY_COMPILE_CONFIGURATION
Build configuration used fo' try_compile n' try_run projects.

Projects built by try_compile n' try_run is built synchronously durin tha CMake configuration step.  Therefore a specific build configuration must be chosen even if tha generated build system supports multiple configurations.

.TP
.B CMAKE_USE_RELATIVE_PATHS
Use relatizzle paths (May not work!).

If dis is set ta TRUE, then CMake will use relatizzle paths between tha source n' binary tree.  This option do not work fo' mo' fucked up projects, n' relatizzle paths is used when possible.  In general, it aint possible ta move CMake generated makefilez ta a gangbangin' finger-lickin' different location regardless of tha value of dis variable.

.TP
.B CMAKE_VISIBILITY_INLINES_HIDDEN
Default value fo' VISIBILITY_INLINES_HIDDEN of targets.

This variable is used ta initialize tha VISIBILITY_INLINES_HIDDEN property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_WIN32_EXECUTABLE
Default value fo' WIN32_EXECUTABLE of targets.

This variable is used ta initialize tha WIN32_EXECUTABLE property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B EXECUTABLE_OUTPUT_PATH
Oldskool executable location variable.

Da target property RUNTIME_OUTPUT_DIRECTORY supercedes dis variable fo' a target if it is set.  Executable targets is otherwise placed up in dis directory.

.TP
.B LIBRARY_OUTPUT_PATH
Oldskool library location variable.

Da target propertizzles ARCHIVE_OUTPUT_DIRECTORY, LIBRARY_OUTPUT_DIRECTORY, n' RUNTIME_OUTPUT_DIRECTORY supercede dis variable fo' a target if they is set.  Library targets is otherwise placed up in dis directory.

.SH VARIABLES THAT PROVIDE INFORMATION
.TP
.B CMAKE_AR
Name of archivin tool fo' static libraries.

This specifies tha name of tha program dat creates archive or static libraries.

.TP
.B CMAKE_ARGC
Number of command line arguments passed ta CMake up in script mode.

When run up in \-P script mode, CMake sets dis variable ta tha number of command line arguments, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. See also CMAKE_ARGV0, 1, 2 ...

.TP
.B CMAKE_ARGV0
Command line argument passed ta CMake up in script mode.

When run up in \-P script mode, CMake sets dis variable ta tha straight-up original gangsta command line argument. Well shiiiit, it then also sets CMAKE_ARGV1, CMAKE_ARGV2, ... n' so on, up ta tha number of command line arguments given. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See also CMAKE_ARGC.

.TP
.B CMAKE_BINARY_DIR
Da path ta tha top level of tha build tree.

This is tha full path ta tha top level of tha current CMake build tree. For a in\-source build, dis would be tha same as CMAKE_SOURCE_DIR.

.TP
.B CMAKE_BUILD_TOOL
Tool used fo' tha actual build process.

This variable is set ta tha program dat is ghon be needed ta build tha output of CMake.   If tha generator selected was Visual Studio 6, tha CMAKE_BUILD_TOOL is ghon be set ta msdev, fo' Unix Makefilez it is ghon be set ta make or gmake, n' fo' Visual Studio 7 it set ta devenv.  For NMake Makefilez tha value is nmake. This can be useful fo' addin special flags n' commandz based on tha final build environment.

.TP
.B CMAKE_CACHEFILE_DIR
Da directory wit tha CMakeCache.txt file.

This is tha full path ta tha directory dat has tha CMakeCache.txt file up in dat shit.  This is tha same ol' dirty as CMAKE_BINARY_DIR.

.TP
.B CMAKE_CACHE_MAJOR_VERSION
Major version of CMake used ta create tha CMakeCache.txt file

This stores tha major version of CMake used ta write a CMake cache file. Well shiiiit, it is only different when a gangbangin' finger-lickin' different version of CMake is run on a previously pimped cache file.

.TP
.B CMAKE_CACHE_MINOR_VERSION
Minor version of CMake used ta create tha CMakeCache.txt file

This stores tha minor version of CMake used ta write a CMake cache file. Well shiiiit, it is only different when a gangbangin' finger-lickin' different version of CMake is run on a previously pimped cache file.

.TP
.B CMAKE_CACHE_PATCH_VERSION
Patch version of CMake used ta create tha CMakeCache.txt file

This stores tha patch version of CMake used ta write a CMake cache file. Well shiiiit, it is only different when a gangbangin' finger-lickin' different version of CMake is run on a previously pimped cache file.

.TP
.B CMAKE_CFG_INTDIR
Build\-time reference ta per\-configuration output subdirectory.

For natizzle build systems supportin multiple configurations up in tha build tree (like fuckin Visual Studio n' Xcode), tha value be a reference ta a funky-ass build\-time variable specifyin tha name of tha per\-configuration output subdirectory.  On Makefile generators dis evaluates ta "." cuz there is only one configuration up in a funky-ass build tree.  Example joints:


.nf
  $(IntDir)        = Visual Studio 6
  $(OutDir)        = Visual Studio 7, 8, 9
  $(Configuration) = Visual Studio 10
  $(CONFIGURATION) = Xcode
  .                = Make\-based tools
.fi

Since these joints is evaluated by tha natizzle build system, dis variable is suitable only fo' use up in command lines dat is ghon be evaluated at build time.  Example of intended usage:


.nf
  add_executable(mytool mytool.c)
  add_custom_command(
    OUTPUT out.txt
    COMMAND ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mytool
            ${CMAKE_CURRENT_SOURCE_DIR}/in.txt out.txt
    DEPENDS mytool in.txt
    )
  add_custom_target(drive ALL DEPENDS out.txt)
.fi

Note dat CMAKE_CFG_INTDIR is no longer necessary fo' dis purpose but has been left fo' compatibilitizzle wit existin projects, n' you can put dat on yo' toast.  Instead add_custom_command() recognizes executable target names up in its COMMAND option, so "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mytool" can be replaced by just "mytool".


This variable is read\-only.  Settin it is undefined behavior. Shiiit, dis aint no joke.  In multi\-configuration build systems tha value of dis variable is passed as tha value of preprocessor symbol "CMAKE_INTDIR" ta tha compilation of all source files.

.TP
.B CMAKE_COMMAND
Da full path ta tha cmake executable.

This is tha full path ta tha CMake executable cmake which is useful from custom commandz dat wanna use tha cmake \-E option fo' portable system commands.  (e.g. /usr/local/bin/cmake

.TP
.B CMAKE_CROSSCOMPILING
Is CMake currently cross compiling.

This variable is ghon be set ta legit by CMake if CMake is cross compiling. Right back up in yo muthafuckin ass. Specifically if tha build platform is different from tha target platform.

.TP
.B CMAKE_CTEST_COMMAND
Full path ta ctest command installed wit cmake.

This is tha full path ta tha CTest executable ctest which is useful from custom commandz dat wanna use tha cmake \-E option fo' portable system commands.

.TP
.B CMAKE_CURRENT_BINARY_DIR
Da path ta tha binary directory currently bein processed.

This tha full path ta tha build directory dat is currently bein processed by cmake.  Each directory added by add_subdirectory will create a funky-ass binary directory up in tha build tree, n' as it is bein processed dis variable is ghon be set.  For in\-source buildz dis is tha current source directory bein processed.

.TP
.B CMAKE_CURRENT_LIST_DIR
Full directory of tha listfile currently bein processed.

As CMake processes tha listfilez up in yo' project dis variable will always be set ta tha directory where tha listfile which is currently bein processed (CMAKE_CURRENT_LIST_FILE) is located. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da value has dynamic scope.  When CMake starts processin commandz up in a source file it sets dis variable ta tha directory where dis file is located. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  When CMake finishes processin commandz from tha file it restores tha previous value.  Therefore tha value of tha variable inside a macro or function is tha directory of tha file invokin tha bottom\-most entry on tha call stack, not tha directory of tha file containin tha macro or function definition.


See also CMAKE_CURRENT_LIST_FILE.

.TP
.B CMAKE_CURRENT_LIST_FILE
Full path ta tha listfile currently bein processed.

As CMake processes tha listfilez up in yo' project dis variable will always be set ta tha one currently bein processed. Y'all KNOW dat shit, muthafucka!  Da value has dynamic scope.  When CMake starts processin commandz up in a source file it sets dis variable ta tha location of tha file.  When CMake finishes processin commandz from tha file it restores tha previous value.  Therefore tha value of tha variable inside a macro or function is tha file invokin tha bottom\-most entry on tha call stack, not tha file containin tha macro or function definition.


See also CMAKE_PARENT_LIST_FILE.

.TP
.B CMAKE_CURRENT_LIST_LINE
Da line number of tha current file bein processed.

This is tha line number of tha file currently bein processed by cmake.

.TP
.B CMAKE_CURRENT_SOURCE_DIR
Da path ta tha source directory currently bein processed.

This tha full path ta tha source directory dat is currently bein processed by cmake.  

.TP
.B CMAKE_DL_LIBS
Name of library containin dlopen n' dlcose.

Da name of tha library dat has dlopen n' dlclose up in it, probably \-ldl on most UNIX machines.

.TP
.B CMAKE_EDIT_COMMAND
Full path ta cmake\-gui or ccmake.

This is tha full path ta tha CMake executable dat can graphically edit tha cache.  For example, cmake\-gui, ccmake, or cmake \-i.

.TP
.B CMAKE_EXECUTABLE_SUFFIX
Da suffix fo' executablez on dis platform.

Da suffix ta use fo' tha end of a executable filename if any, .exe on Windows.


CMAKE_EXECUTABLE_SUFFIX_<LANG> overrides dis fo' language <LANG>.

.TP
.B CMAKE_EXTRA_GENERATOR
Da extra generator used ta build tha project.

When rockin tha Eclipse, CodeBlocks or KDevelop generators, CMake generates Makefilez (CMAKE_GENERATOR) n' additionally project filez fo' tha respectizzle IDE. This IDE project file generator is stored up in CMAKE_EXTRA_GENERATOR (e.g. "Eclipse CDT4").

.TP
.B CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES
Additionizzle suffixes fo' shared libraries.

Extensions fo' shared libraries other than dat specified by CMAKE_SHARED_LIBRARY_SUFFIX, if any.  CMake uses dis ta recognize external shared library filez durin analysiz of libraries linked by a target.

.TP
.B CMAKE_GENERATOR
Da generator used ta build tha project.

Da name of tha generator dat is bein used ta generate tha build files.  (e.g. "Unix Makefiles", "Visual Studio 6", etc.)

.TP
.B CMAKE_GENERATOR_TOOLSET
Natizzle build system toolset name specified by user.

Some CMake generators support a toolset name ta be given ta tha natizzle build system ta chizzle a cold-ass lil compila n' shit.  If tha user specifies a toolset name (e.g. via tha cmake \-T option) tha value is ghon be available up in dis variable.

.TP
.B CMAKE_HOME_DIRECTORY
Path ta top of source tree.

This is tha path ta tha top level of tha source tree.

.TP
.B CMAKE_IMPORT_LIBRARY_PREFIX
Da prefix fo' import libraries dat you link to.

Da prefix ta use fo' tha name of a import library if used on dis platform.


CMAKE_IMPORT_LIBRARY_PREFIX_<LANG> overrides dis fo' language <LANG>.

.TP
.B CMAKE_IMPORT_LIBRARY_SUFFIX
Da suffix fo' import libraries dat you link to.

Da suffix ta use fo' tha end of a import library filename if used on dis platform.


CMAKE_IMPORT_LIBRARY_SUFFIX_<LANG> overrides dis fo' language <LANG>.

.TP
.B CMAKE_LINK_LIBRARY_SUFFIX
Da suffix fo' libraries dat you link to.

Da suffix ta use fo' tha end of a library filename, .lib on Windows.

.TP
.B CMAKE_MAJOR_VERSION
Da Major version of cmake (i.e. tha 2 up in 2.X.X)

This specifies tha major version of tha CMake executable bein run.

.TP
.B CMAKE_MAKE_PROGRAM
See CMAKE_BUILD_TOOL.

This variable is round fo' backwardz compatibility, peep CMAKE_BUILD_TOOL.

.TP
.B CMAKE_MINIMUM_REQUIRED_VERSION
Version specified ta cmake_minimum_required command

Variable containin tha VERSION component specified up in tha cmake_minimum_required command.

.TP
.B CMAKE_MINOR_VERSION
Da Minor version of cmake (i.e. tha 4 up in X.4.X).

This specifies tha minor version of tha CMake executable bein run.

.TP
.B CMAKE_PARENT_LIST_FILE
Full path ta tha CMake file dat included tha current one.

While processin a CMake file loaded by include() or find_package() dis variable gotz nuff tha full path ta tha file includin dat shit.  Da top of tha include stack be always tha CMakeLists.txt fo' tha current directory.  See also CMAKE_CURRENT_LIST_FILE.

.TP
.B CMAKE_PATCH_VERSION
Da patch version of cmake (i.e. tha 3 up in X.X.3).

This specifies tha patch version of tha CMake executable bein run.

.TP
.B CMAKE_PROJECT_NAME
Da name of tha current project.

This specifies name of tha current project from tha closest inherited PROJECT command.

.TP
.B CMAKE_RANLIB
Name of randomizin tool fo' static libraries.

This specifies name of tha program dat randomizes libraries on UNIX, not used on Windows yo, but may be present.

.TP
.B CMAKE_ROOT
Install directory fo' hustlin cmake.

This is tha install root fo' tha hustlin CMake n' tha Modulez directory can be found here, so peek-a-boo, clear tha way, I be comin' thru fo'sho. This is commonly used up in dis format: ${CMAKE_ROOT}/Modules

.TP
.B CMAKE_SCRIPT_MODE_FILE
Full path ta tha \-P script file currently bein processed.

When run up in \-P script mode, CMake sets dis variable ta tha full path of tha script file. When run ta configure a CMakeLists.txt file, dis variable aint set.

.TP
.B CMAKE_SHARED_LIBRARY_PREFIX
Da prefix fo' shared libraries dat you link to.

Da prefix ta use fo' tha name of a gangbangin' finger-lickin' dirty-ass shared library, lib on UNIX.


CMAKE_SHARED_LIBRARY_PREFIX_<LANG> overrides dis fo' language <LANG>.

.TP
.B CMAKE_SHARED_LIBRARY_SUFFIX
Da suffix fo' shared libraries dat you link to.

Da suffix ta use fo' tha end of a gangbangin' finger-lickin' dirty-ass shared library filename, .dll on Windows.


CMAKE_SHARED_LIBRARY_SUFFIX_<LANG> overrides dis fo' language <LANG>.

.TP
.B CMAKE_SHARED_MODULE_PREFIX
Da prefix fo' loadable modulez dat you link to.

Da prefix ta use fo' tha name of a loadable module on dis platform.


CMAKE_SHARED_MODULE_PREFIX_<LANG> overrides dis fo' language <LANG>.

.TP
.B CMAKE_SHARED_MODULE_SUFFIX
Da suffix fo' shared libraries dat you link to.

Da suffix ta use fo' tha end of a loadable module filename on dis platform


CMAKE_SHARED_MODULE_SUFFIX_<LANG> overrides dis fo' language <LANG>.

.TP
.B CMAKE_SIZEOF_VOID_P
Size of a void pointer.

This is set ta tha size of a pointa on tha machine, n' is determined by a try compile. If a 64 bit size is found, then tha library search path is modified ta look fo' 64 bit libraries first.

.TP
.B CMAKE_SKIP_RPATH
If true, do not add run time path shiznit.

If dis is set ta TRUE, then tha rpath shiznit aint added ta compiled executables.  Da default is ta add rpath shiznit if tha platform supports dat shit.  This allows fo' easy as fuck  hustlin from tha build tree.  To omit RPATH up in tha install step yo, but not tha build step, use CMAKE_SKIP_INSTALL_RPATH instead.

.TP
.B CMAKE_SOURCE_DIR
Da path ta tha top level of tha source tree.

This is tha full path ta tha top level of tha current CMake source tree. For a in\-source build, dis would be tha same as CMAKE_BINARY_DIR.

.TP
.B CMAKE_STANDARD_LIBRARIES
Libraries linked tha fuck into every last muthafuckin executable n' shared library.

This is tha list of libraries dat is linked tha fuck into all executablez n' libraries.

.TP
.B CMAKE_STATIC_LIBRARY_PREFIX
Da prefix fo' static libraries dat you link to.

Da prefix ta use fo' tha name of a static library, lib on UNIX.


CMAKE_STATIC_LIBRARY_PREFIX_<LANG> overrides dis fo' language <LANG>.

.TP
.B CMAKE_STATIC_LIBRARY_SUFFIX
Da suffix fo' static libraries dat you link to.

Da suffix ta use fo' tha end of a static library filename, .lib on Windows.


CMAKE_STATIC_LIBRARY_SUFFIX_<LANG> overrides dis fo' language <LANG>.

.TP
.B CMAKE_TWEAK_VERSION
Da tweak version of cmake (i.e. tha 1 up in X.X.X.1).

This specifies tha tweak version of tha CMake executable bein run. I aint talkin' bout chicken n' gravy biatch.  Releases use tweak < 20000000 n' pimpment versions use tha date format CCYYMMDD fo' tha tweak level.

.TP
.B CMAKE_VERBOSE_MAKEFILE
Smoke verbose makefilez if on.

This variable defaults ta false. Yo ass can set dis variable ta legit ta make CMake produce verbose makefilez dat show each command line as it is used.

.TP
.B CMAKE_VERSION
Da full version of cmake up in major.minor.patch[.tweak[\-id]] format.

This specifies tha full version of tha CMake executable bein run. I aint talkin' bout chicken n' gravy biatch.  This variable is defined by versions 2.6.3 n' higher n' shit.  See variablez CMAKE_MAJOR_VERSION, CMAKE_MINOR_VERSION, CMAKE_PATCH_VERSION, n' CMAKE_TWEAK_VERSION fo' individual version components, n' you can put dat on yo' toast.  Da [\-id] component appears up in non\-release versions n' may be arbitrary text.

.TP
.B CMAKE_VS_PLATFORM_TOOLSET
Visual Studio Platform Toolset name.

VS 10 n' above use MSBuild under tha hood n' support multiple compila toolchains.  CMake may specify a toolset explicitly, like fuckin "v110" fo' VS 11 or "Windows7.1SDK" fo' 64\-bit support up in VS 10 Express.  CMake serves up tha name of tha chosen toolset up in dis variable.

.TP
.B CMAKE_XCODE_PLATFORM_TOOLSET
Xcode compila selection.

Xcode supports selection of a cold-ass lil compila from one of tha installed toolsets, n' you can put dat on yo' toast.  CMake serves up tha name of tha chosen toolset up in dis variable, if any is explicitly selected (e.g. via tha cmake \-T option).

.TP
.B PROJECT_BINARY_DIR
Full path ta build directory fo' project.

This is tha binary directory of da most thugged-out recent PROJECT command.

.TP
.B PROJECT_NAME
Name of tha project given ta tha project command.

This is tha name given ta da most thugged-out recent PROJECT command.

.TP
.B PROJECT_SOURCE_DIR
Top level source directory fo' tha current project.

This is tha source directory of da most thugged-out recent PROJECT command.

.TP
.B [Project name]_BINARY_DIR
Top level binary directory fo' tha named project.

A variable is pimped wit tha name used up in tha PROJECT command, n' is tha binary directory fo' tha project.   This can be useful when SUBDIR is used ta connect nuff muthafuckin projects.

.TP
.B [Project name]_SOURCE_DIR
Top level source directory fo' tha named project.

A variable is pimped wit tha name used up in tha PROJECT command, n' is tha source directory fo' tha project.   This can be useful when add_subdirectory is used ta connect nuff muthafuckin projects.

.SH COPYRIGHT
.PP
Copyright 2000\-2012 Kitware, Inc., Insight Software Consortium.  All muthafuckin rights reserved.

.PP
Redistribution n' use up in source n' binary forms, wit or without modification, is permitted provided dat tha followin conditions is met:

.PP
Redistributionz of source code must retain tha above copyright notice, dis list of conditions n' tha followin disclaimer.

.PP
Redistributions up in binary form must reproduce tha above copyright notice, dis list of conditions n' tha followin disclaimer up in tha documentation and/or other shiznit provided wit tha distribution.

.PP
Neither tha namez of Kitware, Inc., tha Insight Software Consortium, nor tha namez of they contributors may be used ta endorse or promote shizzle derived from dis software without specific prior freestyled permission.

.PP
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

.SH SEE ALSO
.PP
.B cmake(1), ccmake(1)

.PP
Da followin resources is available ta git help rockin CMake:

.TP
.B Home Page
http://www.cmake.org

Da primary startin point fo' peepin' bout CMake.

.TP
.B Frequently Axed Questions
http://www.cmake.org/Wiki/CMake_FAQ

A Wiki is provided containin lyrics ta frequently axed thangs. 

.TP
.B Online Documentation
http://www.cmake.org/HTML/Documentation.html

Links ta available documentation may be found on dis wizzy page.

.TP
.B Mailin List
http://www.cmake.org/HTML/MailingLists.html

For help n' rap bout rockin cmake, a mailin list is provided at cmake@cmake.org. Da list is member\-post\-only but one may sign up on tha CMake wizzy page. Please first read tha full documentation at http://www.cmake.org before postin thangs ta tha list.

.SH AUTHOR
.PP
This manual page was generated by tha "\-\-help\-man" option.

