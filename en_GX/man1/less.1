.TH LESS 1 "Version 458: 04 Apr 2013"
.SH NAME
less \- opposite of more
.SH SYNOPSIS
.B "less \-?"
.br
.B "less \-\-help"
.br
.B "less \-V"
.br
.B "less \-\-version"
.br
.B "less [\-[+]aABcCdeEfFgGiIJKLmMnNqQrRsSuUVwWX~]"
.br
.B "     [\-b \fIspace\fP] [\-h \fIlines\fP] [\-j \fIline\fP] [\-k \fIkeyfile\fP]"
.br
.B "     [\-{oO} \fIlogfile\fP] [\-p \fIpattern\fP] [\-P \fIprompt\fP] [\-t \fItag\fP]"
.br
.B "     [\-T \fItagsfile\fP] [\-x \fItab\fP,...] [\-y \fIlines\fP] [\-[z] \fIlines\fP]"
.br
.B "     [\-# \fIshift\fP] [+[+]\fIcmd\fP] [\-\-] [\fIfilename\fP]..."
.br
(See tha OPTIONS section fo' alternate option syntax wit long option names.)

.SH DESCRIPTION
.I Less
is a program similar ta 
.I more
(1) yo, but which allows backward movement
in tha file as well as forward movement.
Also,
.I less
does not gotta read tha entire input file before starting,
so wit big-ass input filez it starts up fasta than text editors like
.I vi
(1).
.I Less
uses termcap (or terminfo on some systems),
so it can run on a variety of terminals.
There is even limited support fo' hardcopy terminals.
(On a hardcopy terminal, lines which should be printed all up in tha top
of tha screen is prefixed wit a cold-ass lil caret.)
.PP
Commandz is based on both
.I more
and
.I vi.
Commandz may be preceded by a thugged-out decimal number, 
called N up in tha descriptions below.
Da number is used by some commands, as indicated.

.SH COMMANDS
In tha followin descriptions, ^X means control-X.
ESC standz fo' tha ESCAPE key; fo' example ESC-v means the
two characta sequence "ESCAPE", then "v".
.IP "h or H"
Help: display a summary of these commands.
If you forget all tha other commands, remember dis one.
.IP "SPACE or ^V or f or ^F"
Scroll forward N lines, default one window (see option \-z below).
If N is mo' than tha screen size, only tha final screenful is displayed.
Warning: some systems use ^V as a special literalization character.
.IP "z"
Like SPACE yo, but if N is specified, it becomes tha freshly smoked up window size.
.IP "ESC-SPACE"
Like SPACE yo, but scrolls a gangbangin' full screenful, even if it reaches
end-of-file up in tha process.
.IP "ENTER or RETURN or ^N or e or ^E or j or ^J"
Scroll forward N lines, default 1.
Da entire N lines is displayed, even if N is mo' than tha screen size.
.IP "d or ^D"
Scroll forward N lines, default one half of tha screen size.
If N is specified, it becomes tha freshly smoked up default fo' 
subsequent d n' u commands.
.IP "b or ^B or ESC-v"
Scroll backward N lines, default one window (see option \-z below).
If N is mo' than tha screen size, only tha final screenful is displayed.
.IP "w"
Like ESC-v yo, but if N is specified, it becomes tha freshly smoked up window size.
.IP "y or ^Y or ^P or k or ^K"
Scroll backward N lines, default 1.
Da entire N lines is displayed, even if N is mo' than tha screen size.
Warning: some systems use ^Y as a special thang control character.
.IP "u or ^U"
Scroll backward N lines, default one half of tha screen size.
If N is specified, it becomes tha freshly smoked up default fo' 
subsequent d n' u commands.
.IP "ESC-) or RIGHTARROW"
Scroll horizontally right N characters, default half tha screen width
(see tha \-# option).
If a number N is specified, it becomes tha default fo' future RIGHTARROW
and LEFTARROW commands.
While tha text is scrolled, it acts as though tha \-S option
(chop lines) was up in effect.
.IP "ESC-( or LEFTARROW"
Scroll horizontally left N characters, default half tha screen width
(see tha \-# option).
If a number N is specified, it becomes tha default fo' future RIGHTARROW
and LEFTARROW commands.
.IP "r or ^R or ^L"
Repaint tha screen.
.IP R
Repaint tha screen, discardin any buffered input.
Useful if tha file is changin while it is bein viewed.
.IP "F"
Scroll forward, n' keep tryin ta read when the
end of file is reached.
Normally dis command would be used when already all up in tha end of tha file.
It be a way ta monitor tha tail of a gangbangin' file which is growing
while it is bein viewed.
(Da behavior is similar ta tha "tail \-f" command.)
.IP "ESC-F"
Like F yo, but as soon as a line is found which matches
the last search pattern, tha terminal bell is rung 
and forward scrollin stops.
.IP "g or < or ESC-<"
Go ta line N up in tha file, default 1 (beginnin of file).
(Warning: dis may be slow if N is large.)
.IP "G or > or ESC->"
Go ta line N up in tha file, default tha end of tha file.
(Warning: dis may be slow if N is large,
or if N aint specified and
standard input, rather than a gangbangin' file, is bein read.)
.IP "p or %"
Go ta a posizzle N cement tha fuck into tha file.
N should be between 0 n' 100, n' may contain a thugged-out decimal point.
.IP "P"
Go ta tha line containin byte offset N up in tha file.
.IP "{"
If a left curly bracket appears up in tha top line displayed
on tha screen,
the { command will git all up in tha matchin right curly bracket.
Da matchin right curly bracket is positioned on tha bottom
line of tha screen.
If there is mo' than one left curly bracket on tha top line,
a number N may be used ta specify tha N-th bracket on tha line.
.IP "}"
If a right curly bracket appears up in tha bottom line displayed
on tha screen,
the } command will git all up in tha matchin left curly bracket.
Da matchin left curly bracket is positioned on tha top
line of tha screen.
If there is mo' than one right curly bracket on tha top line,
a number N may be used ta specify tha N-th bracket on tha line.
.IP "("
Like { yo, but applies ta parentheses rather than curly brackets.
.IP ")"
Like } yo, but applies ta parentheses rather than curly brackets.
.IP "["
Like { yo, but applies ta square brackets rather than curly brackets.
.IP "]"
Like } yo, but applies ta square brackets rather than curly brackets.
.IP "ESC-^F"
Followed by two characters,
acts like { yo, but uses tha two charactas as open n' close brackets,
respectively.
For example, "ESC ^F < >" could be used ta 
go forward ta tha > which matches tha < up in tha top displayed line.
.IP "ESC-^B"
Followed by two characters,
acts like } yo, but uses tha two charactas as open n' close brackets,
respectively.
For example, "ESC ^B < >" could be used ta 
go backward ta tha < which matches tha > up in tha bottom displayed line.
.IP m
Followed by any lowercase letter, 
marks tha current posizzle wit dat letter.
.IP "'"
(Single quote.)
Followed by any lowercase letter, returns ta tha posizzle which
was previously marked wit dat letter.
Followed by another single quote, returns ta tha posizzle at
which tha last "large" movement command was executed.
Followed by a ^ or $, jumps ta tha beginnin or end of the
file respectively.
Marks is preserved when a freshly smoked up file is examined,
so tha ' command can be used ta switch between input files.
.IP "^X^X"
Same as single quote.
.IP /pattern
Search forward up in tha file fo' tha N-th line containin tha pattern.
N defaults ta 1.
Da pattern be a regular expression, as recognized by
the regular expression library supplied by yo' system.
Da search starts all up in tha straight-up original gangsta line displayed
(but peep tha \-a n' \-j options, which chizzle this).
.sp
Certain charactas is special
if entered all up in tha beginnin of tha pattern;
they modify tha type of search rather than become part of tha pattern:
.RS
.IP "^N or !"
Search fo' lines which do NOT match tha pattern.
.IP "^E or *"
Search multiple files.
That is, if tha search reaches tha END of tha current file 
without findin a match,
the search continues up in tha next file up in tha command line list.
.IP "^F or @"
Begin tha search all up in tha straight-up original gangsta line of tha FIRST file
in tha command line list,
regardless of what tha fuck is currently displayed on tha screen
or tha settingz of tha \-a or \-j options.
.IP "^K"
Highlight any text which matches tha pattern on tha current screen, 
but don't move ta tha straight-up original gangsta match (KEEP current position).
.IP "^R"
Don't interpret regular expression metacharacters;
that is, do a simple textual comparison.
.RE
.IP ?pattern
Search backward up in tha file fo' tha N-th line containin tha pattern.
Da search starts all up in tha line immediately before tha top line displayed.
.sp
Certain charactas is special as up in tha / command:
.RS
.IP "^N or !"
Search fo' lines which do NOT match tha pattern.
.IP "^E or *"
Search multiple files.
That is, if tha search reaches tha beginnin of tha current file 
without findin a match,
the search continues up in tha previous file up in tha command line list.
.IP "^F or @"
Begin tha search all up in tha last line of tha last file
in tha command line list,
regardless of what tha fuck is currently displayed on tha screen
or tha settingz of tha \-a or \-j options.
.IP "^K"
As up in forward searches.
.IP "^R"
As up in forward searches.
.RE
.IP "ESC-/pattern"
Same as "/*".
.IP "ESC-?pattern"
Same as "?*".
.IP n
Repeat previous search, fo' N-th line containin tha last pattern.
If tha previous search was modified by ^N, tha search is made fo' the
N-th line NOT containin tha pattern.
If tha previous search was modified by ^E, tha search continues
in tha next (or previous) file if not satisfied up in tha current file.
If tha previous search was modified by ^R, tha search is done
without rockin regular expressions.
There is no effect if tha previous search was modified by ^F or ^K.
.IP N
Repeat previous search yo, but up in tha reverse direction.
.IP "ESC-n"
Repeat previous search yo, but crossin file boundaries.
Da effect be as if tha previous search was modified by *.
.IP "ESC-N"
Repeat previous search yo, but up in tha reverse direction
and crossin file boundaries.
.IP "ESC-u"
Undo search highlighting.
Turn off highlightin of strings matchin tha current search pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. 
If highlightin be already off cuz of a previous ESC-u command,
turn highlightin back on.
Any search command will also turn highlightin back on.
(Highlightin can also be disabled by togglin tha \-G option;
in dat case search commandz do not turn highlightin back on.)
.IP "&pattern"
Display only lines which match tha pattern;
lines which do not match tha pattern is not displayed.
If pattern is empty (if you type & immediately followed by ENTER),
any filterin is turned off, n' all lines is displayed.
While filterin is up in effect, a ampersand is displayed at the
beginnin of tha prompt,
as a reminder dat some lines up in tha file may be hidden.
.sp
Certain charactas is special as up in tha / command:
.RS
.IP "^N or !"
Display only lines which do NOT match tha pattern.
.IP "^R"
Don't interpret regular expression metacharacters;
that is, do a simple textual comparison.
.RE
.IP ":e [filename]"
Examine a freshly smoked up file.
If tha filename is missing, tha "current" file (see tha :n n' :p commands
below) from tha list of filez up in tha command line is re-examined.
A cement sign (%) up in tha filename is replaced by tha name of the
current file.  
A pound sign (#) is replaced by tha name of tha previously examined file.
But fuck dat shiznit yo, tha word on tha street is dat two consecutizzle cement signs is simply 
replaced wit a single cement sign. I aint talkin' bout chicken n' gravy biatch.  
This allows you ta enta a gangbangin' filename dat gotz nuff a cement sign
in tha name.
Similarly, two consecutizzle pound signs is replaced wit a single pound sign.
Da filename is banged tha fuck into tha command line list of files
so dat it can be peeped by subsequent :n n' :p commands.
If tha filename consistz of nuff muthafuckin files, they is all banged into
the list of filez n' tha straight-up original gangsta one is examined.
If tha filename gotz nuff one or mo' spaces,
the entire filename should be enclosed up in double quotes
(also peep tha \-" option).
.IP "^X^V or E"
Same as :e.
Warning: some systems use ^V as a special literalization character.
On such systems, you may not be able ta use ^V.
.IP ":n"
Examine tha next file (from tha list of filez given up in tha command line).
If a number N is specified, tha N-th next file is examined.
.IP ":p"
Examine tha previous file up in tha command line list.
If a number N is specified, tha N-th previous file is examined.
.IP ":x"
Examine tha straight-up original gangsta file up in tha command line list.
If a number N is specified, tha N-th file up in tha list is examined.
.IP ":d"
Remove tha current file from tha list of files.
.IP "t"
Go ta tha next tag, if there was mo' than one matches fo' tha current tag.
See tha \-t option fo' mo' details bout tags.
.IP "T"
Go ta tha previous tag, if there was mo' than one matches fo' tha current tag.
.IP "= or ^G or :f"
Prints some shiznit bout tha file bein viewed,
includin its name
and tha line number n' byte offset of tha bottom line bein displayed.
If possible, it also prints tha length of tha file,
the number of lines up in tha file
and tha cement of tha file above tha last displayed line.
.IP \-
Followed by one of tha command line option lettas (see OPTIONS below),
this will chizzle tha settin of dat option
and print a message describin tha freshly smoked up setting.
If a ^P (CONTROL-P) is entered immediately afta tha dash,
the settin of tha option is chizzled but no message is printed.
If tha option letta has a numeric value (like fuckin \-b or \-h),
or a strang value (like fuckin \-P or \-t),
a freshly smoked up value may be entered afta tha option letter.
If no freshly smoked up value is entered, a message describing
the current settin is printed n' not a god damn thang is chizzled.
.IP \-\-
Like tha \- command yo, but takes a long-ass option name (see OPTIONS below)
rather than a single option letter.
Yo ass must press ENTER or RETURN afta typin tha option name.
A ^P immediately afta tha second dash suppresses printin of a 
message describin tha freshly smoked up setting, as up in tha \- command.
.IP \-+
Followed by one of tha command line option letters
this will reset tha option ta its default setting
and print a message describin tha freshly smoked up setting.
(Da "\-+\fIX\fP" command do tha same thang
as "\-+\fIX\fP" on tha command line.)
This do not work fo' string-valued options.
.IP \-\-+
Like tha \-+ command yo, but takes a long-ass option name
rather than a single option letter.
.IP \-!
Followed by one of tha command line option letters,
this will reset tha option ta tha "opposite" of its default setting
and print a message describin tha freshly smoked up setting.
This do not work fo' numeric or string-valued options.
.IP \-\-!
Like tha \-! command yo, but takes a long-ass option name
rather than a single option letter.
.IP _
(Underscore.)
Followed by one of tha command line option letters,
this will print a message describin tha current settin of dat option.
Da settin of tha option aint chizzled.
.IP __
(Double underscore.)
Like tha _ (underscore) command yo, but takes a long-ass option name
rather than a single option letter.
Yo ass must press ENTER or RETURN afta typin tha option name.
.IP +cmd
Causes tha specified cmd ta be executed each time a freshly smoked up file is examined.
For example, +G causes 
.I less
to initially display each file startin all up in tha end 
rather than tha beginning.
.IP V
Prints tha version number of 
.I less 
bein run.
.IP "q or Q or :q or :Q or ZZ"
Exits
.I less.
.PP
Da followin 
four
commandz may or may not be valid, dependin on yo' particular installation.
.PP
.IP v
Invokes a editor ta edit tha current file bein viewed.
Da editor is taken from tha environment variable VISUAL if defined,
or EDITOR if VISUAL aint defined,
or defaults ta "vi" if neither VISUAL nor EDITOR is defined.
See also tha rap of LESSEDIT under tha section on PROMPTS below.
.IP "! shell-command"
Invokes a gangbangin' finger-lickin' dirty-ass shell ta run tha shell-command given.
A cement sign (%) up in tha command is replaced by tha name of the
current file.  
A pound sign (#) is replaced by tha name of tha previously examined file.
"!!" repeats tha last shell command.
"!" wit no shell command simply invokes a gangbangin' finger-lickin' dirty-ass shell.
On Unix systems, tha shell is taken from tha environment variable SHELL,
or defaults ta "sh".
On MS-DOS n' OS/2 systems, tha shell is tha aiiight command processor.
.IP "| <m> shell-command"
<m> represents any mark letter.
Pipes a section of tha input file ta tha given shell command.
Da section of tha file ta be piped is between tha straight-up original gangsta line on
the current screen n' tha posizzle marked by tha letter.
<m> may also be ^ or $ ta indicate beginnin or end of file respectively.
If <m> is . or newline, tha current screen is piped.
.IP "s filename"
Save tha input ta a gangbangin' file.
This only works if tha input be a pipe, not a ordinary file.
.PP
.SH OPTIONS
Command line options is busted lyrics bout below.
Most options may be chizzled while
.I less 
is hustlin, via tha "\-" command.
.PP
Most options may be given up in one of two forms: 
either a thugged-out dash followed by a single letter,
or two dashes followed by a long-ass option name.
A long option name may be abbreviated as long as
the abbreviation is unambiguous.
For example, \-\-quit-at-eof may be abbreviated \-\-quit yo, but not
--qui, since both \-\-quit-at-eof n' \-\-quiet begin wit \-\-qui.
Some long option names is up in uppercase, like fuckin \-\-QUIT-AT-EOF, as
distinct from \-\-quit-at-eof.
Such option names need only have they first letta capitalized;
the remainder of tha name may be up in either case.
For example, \-\-Quit-at-eof is equivalent ta \-\-QUIT-AT-EOF.
.PP
Options is also taken from tha environment variable "LESS".
For example, 
to avoid typin "less \-options ..." each time 
.I less 
is invoked, you might tell 
.I csh:
.sp
setenv LESS "-options"
.sp
or if you use 
.I sh:
.sp
LESS="-options"; export LESS
.sp
On MS-DOS, you don't need tha quotes yo, but you should replace any 
percent signs up in tha options strang by double cement signs.
.sp
Da environment variable is parsed before tha command line,
so command line options override tha LESS environment variable.
If a option appears up in tha LESS variable, it can be reset
to its default value on tha command line by beginnin tha command
line option wit "\-+".
.sp
Some options like \-k or \-D require a strang ta follow tha option letter.
Da strang fo' dat option is considered ta end when a thugged-out dollar sign ($) is found.
For example, you can set two \-D options on MS-DOS like this:
.sp
LESS="Dn9.1$Ds4.1"
.sp
If tha --use-backslash option appears earlier up in tha options, then
a dollar sign or backslash may be included literally up in a option string
by precedin it wit a funky-ass backslash.
If tha --use-backslash option aint up in effect, then backslashes are
not treated specially, n' there is no way ta include a thugged-out dollar sign 
in tha option string.
.IP "\-? or \-\-help"
This option displays a summary of tha commandz accepted by
.I less
(the same as tha h command).
(Dependin on how tha fuck yo' shell interprets tha question mark,
it may be necessary ta quote tha question mark, thus: "\-\e?".)
.IP "\-a or \-\-search-skip-screen"
By default, forward searches start all up in tha top of tha displayed screen
and backwardz searches start all up in tha bottom of tha displayed screen
(except fo' repeated searches invoked by tha n or N commands,
which start afta or before tha "target" line respectively;
see tha \-j option fo' mo' bout tha target line).
Da \-a option causes forward searches ta instead start at
the bottom of tha screen
and backward searches ta start all up in tha top of tha screen,
thus skippin all lines displayed on tha screen.
.IP "\-A or \-\-SEARCH-SKIP-SCREEN"
Causes all forward searches (not just non-repeated searches) 
to start just afta tha target line, n' all backward searches 
to start just before tha target line.
Thus, forward searches will skip part of tha displayed screen
(from tha straight-up original gangsta line up ta n' includin tha target line).
Similarly backwardz searches will skip tha displayed screen
from tha last line up ta n' includin tha target line.
This was tha default behavior up in less versions prior ta 441.
.IP "\-b\fIn\fP or \-\-buffers=\fIn\fP"
Specifies tha amount of buffer space
.I less
will use fo' each file, up in unitz of kilobytes (1024 bytes).
By default 64K of buffer space is used fo' each file
(unless tha file be a pipe; peep tha \-B option).
Da \-b option specifies instead dat \fIn\fP kilobytez of 
buffer space should be used fo' each file.
If \fIn\fP is \-1, buffer space is unlimited; dat is,
the entire file can be read tha fuck into memory.
.IP "\-B or \-\-auto-buffers"
By default, when data is read from a pipe,
buffers is allocated automatically as needed.
If a big-ass amount of data is read from tha pipe, dis can cause
a big-ass amount of memory ta be allocated.
Da \-B option disablez dis automatic allocation of buffers fo' pipes,
so dat only 64K 
(or tha amount of space specified by tha \-b option)
is used fo' tha pipe.
Warning: use of \-B can result up in erroneous display, since only the
most recently viewed part of tha piped data is kept up in memory; 
any earlier data is lost.
.IP "\-c or \-\-clear-screen"
Causes full screen repaints ta be painted from tha top line down.
By default,
full screen repaints is done by scrollin from tha bottom of tha screen.
.IP "\-C or \-\-CLEAR-SCREEN"
Same as \-c, fo' compatibilitizzle wit olda versionz of 
.I less.
.IP "\-d or \-\-dumb"
Da \-d option suppresses tha error message
normally displayed if tha terminal is dumb;
that is, lacks some blingin capability,
like fuckin tha mobilitizzle ta clear tha screen or scroll backward.
Da \-d option do not otherwise chizzle tha behavior of
.I less
on a thugged-out dumb terminal.
.IP "\-D\fBx\fP\fIcolor\fP or \-\-color=\fBx\fP\fIcolor\fP"
[MS-DOS only]
Sets tha color of tha text displayed.
\fBx\fP be a single characta which selects tha type of text whose color is 
bein set: n=normal, s=standout, d=bold, u=underlined, k=blink.
\fIcolor\fP be a pair of numbers separated by a period. Y'all KNOW dat shit, muthafucka!  
Da first number selects tha foreground color n' tha second selects 
the background color of tha text.
A single number \fIN\fP is tha same ol' dirty as \fIN.M\fP,
where \fIM\fP is tha aiiight background color.

.IP "\-e or \-\-quit-at-eof"
Causes 
.I less 
to automatically exit
the second time it reaches end-of-file.
By default, tha only way ta exit 
.I less
is via tha "q" command.
.IP "\-E or \-\-QUIT-AT-EOF"
Causes 
.I less
to automatically exit tha last time it reaches end-of-file.
.IP "\-f or \-\-force"
Forces non-regular filez ta be opened.
(A non-regular file be a gangbangin' finger-lickin' directory or a thang special file.)
Also suppresses tha warnin message when a funky-ass binary file is opened.
By default,
.I less
will refuse ta open non-regular files.
Note dat some operatin systems aint gonna allow directories
to be read, even if \-f is set.
.IP "\-F or \-\-quit-if-one-screen"
Causes
.I less
to automatically exit
if tha entire file can be displayed on tha straight-up original gangsta screen.
.IP "\-g or \-\-hilite-search"
Normally, 
.I less 
will highlight ALL strings which match tha last search command.
Da \-g option chizzlez dis behavior ta highlight only tha particular strang 
which was found by tha last search command.
This can cause 
.I less 
to run somewhat fasta than tha default.
.IP "\-G or \-\-HILITE-SEARCH"
Da \-G option suppresses all highlightin of strings found by search commands.
.IP "\-\-old-bot"
Reverts ta tha oldschool bottom of screen behavior. Shiiit, dis aint no joke.  This can be sometimes  
desirable  if  tha  long lines is not wrapped  erectly
when  reachin  tha  bottom  of  tha  terminal,  while scrollin forward.
.IP "\-h\fIn\fP or \-\-max-back-scroll=\fIn\fP"
Specifies a maximum number of lines ta scroll backward.
If it is necessary ta scroll backward mo' than \fIn\fP lines,
the screen is repainted up in a gangbangin' forward direction instead.
(If tha terminal aint gots tha mobilitizzle ta scroll
backward, \-h0 is implied.)
.IP "\-i or \-\-ignore-case"
Causes searches ta ignore case; dat is,
uppercase n' lowercase is considered identical.
This option is ignored if any uppercase letters
appear up in tha search pattern; 
in other lyrics,
if a pattern gotz nuff uppercase letters, then dat search do not ignore case.
.IP "\-I or \-\-IGNORE-CASE"
Like \-i yo, but searches ignore case even if 
the pattern gotz nuff uppercase letters.
.IP "\-j\fIn\fP or \-\-jump-target=\fIn\fP"
Specifies a line on tha screen where tha "target" line
is ta be positioned.
Da target line is tha line specified by any command to
search fo' a pattern, jump ta a line number,
jump ta a gangbangin' file cementage or jump ta a tag.
Da screen line may be specified by a number: tha top line on tha screen
is 1, tha next is 2, n' so on.
Da number may be wack ta specify a line relatizzle ta tha bottom
of tha screen: tha bottom line on tha screen is \-1, tha second
to tha bottom is \-2, n' so on.
Alternately, tha screen line may be specified as a gangbangin' fraction of tha height
of tha screen, startin wit a thugged-out decimal point: .5 is up in tha middle of the
screen, .3 is three tenths down from tha straight-up original gangsta line, n' so on.
If tha line is specified as a gangbangin' fraction, tha actual line number
is recalculated if tha terminal window is resized, so dat the
target line remains all up in tha specified fraction of tha screen height.
If any form of tha \-j option is used, 
forward searches begin all up in tha line immediately afta tha target line,
and backward searches begin all up in tha target line,
unless chizzled by \-a or \-A.
For example, if "\-j4" is used, tha target line is the
fourth line on tha screen, so forward searches begin all up in tha fifth line
on tha screen.
.IP "\-J or \-\-status-column"
Displays a status column all up in tha left edge of tha screen.
Da status column shows tha lines dat matched tha current search.
Da status column be also used if tha \-w or \-W option is up in effect.
.IP "\-k\fIfilename\fP or \-\-lesskey-file=\fIfilename\fP"
Causes
.I less
to open n' interpret tha named file as a
.I lesskey
(1) file.
Multiple \-k options may be specified.
If tha LESSKEY or LESSKEY_SYSTEM environment variable is set, or
if a lesskey file is found up in a standard place (see KEY BINDINGS),
it be also used as a 
.I lesskey
file.
.IP "\-K or \-\-quit-on-intr"
Causes
.I less
to exit immediately (with status 2)
when a interrupt characta (usually ^C) is typed.
Normally, a interrupt characta causes
.I less
to stop whatever it is bustin n' return ta its command prompt.
Note dat use of dis option make it impossible ta return ta tha 
command prompt from tha "F" command.
.IP "\-L or \-\-no-lessopen"
Ignore tha LESSOPEN environment variable
(see tha INPUT PREPROCESSOR section below).
This option can be set from within \fIless\fP, 
but it will apply only ta filez opened subsequently, not ta tha 
file which is currently open.
.IP "\-m or \-\-long-prompt"
Causes 
.I less
to prompt verbosely (like \fImore\fP),
with tha cement tha fuck into tha file.
By default,
.I less
prompts wit a cold-ass lil colon.
.IP "\-M or \-\-LONG-PROMPT"
Causes 
.I less
to prompt even mo' verbosely than 
.I more.
.IP "\-n or \-\-line-numbers"
Suppresses line numbers.
Da default (to use line numbers) may cause
.I less
to run mo' slowly up in some cases, especially wit a straight-up big-ass input file.
Suppressin line numbers wit tha \-n option will avoid dis problem.
Usin line numbers means: tha line number is ghon be displayed up in tha verbose
prompt n' up in tha = command,
and tha v command will pass tha current line number ta tha editor
(see also tha rap of LESSEDIT up in PROMPTS below).
.IP "\-N or \-\-LINE-NUMBERS"
Causes a line number ta be displayed all up in tha beginnin of
each line up in tha display.
.IP "\-o\fIfilename\fP or \-\-log-file=\fIfilename\fP"
Causes
.I less
to copy its input ta tha named file as it is bein viewed.
This applies only when tha input file be a pipe,
not a ordinary file.
If tha file already exists, 
.I less
will ask fo' confirmation before overwritin dat shit.
.IP "\-O\fIfilename\fP or \-\-LOG-FILE=\fIfilename\fP"
Da \-O option is like \-o yo, but it will overwrite a existing
file without askin fo' confirmation.
.sp
If no log file has been specified,
the \-o n' \-O options can be used from within 
.I less
to specify a log file.
Without a gangbangin' file name, they will simply report tha name of tha log file.
Da "s" command is equivalent ta specifyin \-o from within
.I less.
.IP "\-p\fIpattern\fP or \-\-pattern=\fIpattern\fP"
Da \-p option on tha command line is equivalent ta 
specifyin +/\fIpattern\fP;
that is, it tells
.I less
to start all up in tha straight-up original gangsta occurrence of \fIpattern\fP up in tha file.
.IP "\-P\fIprompt\fP or \-\-prompt=\fIprompt\fP"
Provides a way ta tailor tha three prompt
stylez ta yo' own preference.
This option would normally be put up in tha LESS environment
variable, rather than bein typed up in wit each 
.I less
command.
Such a option must either be tha last option up in tha LESS variable,
or be terminated by a thugged-out dollar sign.
-Ps followed by a strang chizzlez tha default (short) prompt 
to dat string.
-Pm chizzlez tha medium (\-m) prompt.
-PM chizzlez tha long (\-M) prompt.
-Ph chizzlez tha prompt fo' tha help screen.
-P= chizzlez tha message printed by tha = command.
-Pw chizzlez tha message printed while waitin fo' data (in tha F command).
All prompt strings consist of a sequence of 
lettas n' special escape sequences.
See tha section on PROMPTS fo' mo' details.
.IP "\-q or \-\-quiet or \-\-silent"
Causes moderately "quiet" operation:
the terminal bell aint rung 
if a attempt is made ta scroll past tha end of tha file
or before tha beginnin of tha file.
If tha terminal has a "visual bell", it is used instead.
Da bell is ghon be rung on certain other errors,
like fuckin typin a invalid character.
Da default is ta rang tha terminal bell up in all such cases.
.IP "\-Q or \-\-QUIET or \-\-SILENT"
Causes straight-up "quiet" operation:
the terminal bell is never rung.
.IP "\-r or \-\-raw-control-chars"
Causes "raw" control charactas ta be displayed.
Da default is ta display control charactas rockin tha caret notation;
for example, a cold-ass lil control-A (octal 001) is displayed as "^A".
Warning: when tha \-r option is used,
.I less
cannot keep track of tha actual appearizzle of tha screen
(since dis dependz on how tha fuck tha screen respondz to
each type of control character).
Thus, various display problems may result,
like fuckin long lines bein split up in tha wack place.
.IP "\-R or \-\-RAW-CONTROL-CHARS"
Like \-r yo, but only ANSI "color" escape sequences is output up in "raw" form.
Unlike \-r, tha screen appearizzle is maintained erectly up in most cases.
ANSI "color" escape sequences is sequencez of tha form:
.sp
	ESC [ ... m
.sp
where tha "..." is zero or mo' color justification charactas 
For tha purpose of keepin track of screen appearance,
ANSI color escape sequences is assumed ta not move tha cursor.
Yo ass can make
.I less
think dat charactas other than "m" can end ANSI color escape sequences
by settin tha environment variable LESSANSIENDCHARS ta tha list of
charactas which can end a cold-ass lil color escape sequence.
And you can make 
.I less 
think dat charactas other than tha standard ones may step tha fuck up between 
the ESC n' tha m by settin tha environment variable LESSANSIMIDCHARS
to tha list of charactas which can appear.
.IP "\-s or \-\-squeeze-blank-lines"
Causes consecutizzle blank lines ta be squeezed tha fuck into a single blank line.
This is useful when viewing
.I nroff
output.
.IP "\-S or \-\-chop-long-lines"
Causes lines longer than tha screen width ta be
chopped (truncated) rather than wrapped.
That is, tha portion of a long-ass line dat do not fit in
the screen width aint shown.
Da default is ta wrap long lines; dat is, display tha remainder
on tha next line.
.IP "\-t\fItag\fP or \-\-tag=\fItag\fP"
Da \-t option, followed immediately by a TAG,
will edit tha file containin dat tag.
For dis ta work, tag shiznit must be available;
for example, there may be a gangbangin' file up in tha current directory called "tags",
which was previously built by 
.I ctags
(1) or a equivalent command.
If tha environment variable LESSGLOBALTAGS is set, it is taken ta be
the name of a cold-ass lil command compatible wit 
.I global
(1), n' dat command is executed ta find tha tag.
(See http://www.gnu.org/software/global/global.html).
Da \-t option may also be specified from within 
.I less 
(usin tha \- command) as a way of examinin a freshly smoked up file.
Da command ":t" is equivalent ta specifyin \-t from within
.I less.
.IP "\-T\fItagsfile\fP or \-\-tag-file=\fItagsfile\fP"
Specifies a tags file ta be used instead of "tags".
.IP "\-u or \-\-underline-special"
Causes backspaces n' carriage returns ta be treated as printable characters;
that is, they is busted ta tha terminal when they step tha fuck up in tha input.
.IP "\-U or \-\-UNDERLINE-SPECIAL"
Causes backspaces, tabs n' carriage returns ta be 
treated as control characters;
that is, they is handled as specified by tha \-r option.
.sp
By default, if neither \-u nor \-U is given,
backspaces which step tha fuck up adjacent ta a underscore character
are treated specially:
the underlined text is displayed 
usin tha terminalz hardware underlinin capability.
Also, backspaces which step tha fuck up between two identical characters
are treated specially: 
the overstruck text is printed 
usin tha terminalz hardware boldface capability.
Other backspaces is deleted, along wit tha precedin character.
Carriage returns immediately followed by a newline is deleted.
Other carriage returns is handled as specified by tha \-r option.
Text which is overstruck or underlined can be searched for
if neither \-u nor \-U is up in effect.
.IP "\-V or \-\-version"
Displays tha version number of 
.I less.
.IP "\-w or \-\-hilite-unread"
Temporarily highlights tha straight-up original gangsta "new" line afta a gangbangin' forward movement
of a gangbangin' full page.
Da first "new" line is tha line immediately followin tha line previously
at tha bottom of tha screen.
Also highlights tha target line afta a g or p command.
Da highlight is removed all up in tha next command which causes movement.
Da entire line is highlighted, unless tha \-J option is up in effect,
in which case only tha status column is highlighted.
.IP "\-W or \-\-HILITE-UNREAD"
Like \-w yo, but temporarily highlights tha straight-up original gangsta freshly smoked up line afta any 
forward movement command larger than one line.
.IP "\-x\fIn\fP,... or \-\-tabs=\fIn\fP,..."
Sets tab stops.
If only one \fIn\fP is specified, tab stops is set at multiplez of \fIn\fP.
If multiple joints separated by commas is specified, tab stops
are set at dem positions, n' then continue wit tha same spacin as the
last two.
For example, \fI-x9,17\fP will set tabs at positions 9, 17, 25, 33, etc.
Da default fo' \fIn\fP is 8.
.IP "\-X or \-\-no-init"
Disablez bustin  tha termcap initialization n' deinitialization strings
to tha terminal.
This is sometimes desirable if tha deinitialization strang do
suttin' unnecessary, like clearin tha screen.
.IP "\-y\fIn\fP or \-\-max-forw-scroll=\fIn\fP"
Specifies a maximum number of lines ta scroll forward.
If it is necessary ta scroll forward mo' than \fIn\fP lines,
the screen is repainted instead.
Da \-c or \-C option may be used ta repaint from tha top of
the screen if desired.
By default, any forward movement causes scrolling.
.IP "\-[z]\fIn\fP or \-\-window=\fIn\fP"
Changes tha default scrollin window size ta \fIn\fP lines.
Da default is one screenful.
Da z n' w commandz can also be used ta chizzle tha window size.
Da "z" may be omitted fo' compatibilitizzle wit some versionz of 
.I more.
If tha number
.I n
is negative, it indicates 
.I n
lines less than tha current screen size.
For example, if tha screen is 24 lines, \fI\-z-4\fP sets tha 
scrollin window ta 20 lines.  If tha screen is resized ta 40 lines,
the scrollin window automatically chizzlez ta 36 lines.
.IP "\-\fI\(dqcc\fP\ or\ \-\-quotes=\fIcc\fP"
Changes tha filename quotin character.
This may be necessary if yo ass is tryin ta name a gangbangin' file
which gotz nuff both spaces n' quote characters.
Followed by a single character, dis chizzlez tha quote characta ta that
character.
Filenames containin a space should then be surrounded by dat character
rather than by double quotes.
Followed by two characters, chizzlez tha open quote ta tha straight-up original gangsta character,
and tha close quote ta tha second character.
Filenames containin a space should then be preceded by tha open quote
characta n' followed by tha close quote character.
Note dat even afta tha quote charactas is chizzled, dis option
remains \-" (a dash followed by a thugged-out double quote).
.IP "\-~ or \-\-tilde"
Normally lines afta end of file is displayed as a single tilde (~).
This option causes lines afta end of file ta be displayed as blank lines.
.IP "\-# or \-\-shift"
Specifies tha default number of positions ta scroll horizontally
in tha RIGHTARROW n' LEFTARROW commands.
If tha number specified is zero, it sets tha default number of
positions ta one half of tha screen width.
Alternately, tha number may be specified as a gangbangin' fraction of tha width
of tha screen, startin wit a thugged-out decimal point: .5 is half of the
screen width, .3 is three tenthz of tha screen width, n' so on.
If tha number is specified as a gangbangin' fraction, tha actual number of 
scroll positions is recalculated if tha terminal window is resized, 
so dat tha actual scroll remains all up in tha specified fraction 
of tha screen width.
.IP "\-\-follow-name"
Normally, if tha input file is renamed while a F command is executing, 
.I less
will continue ta display tha contentz of tha original gangsta file despite
its name chizzle.
If \-\-follow-name is specified, durin a F command
.I less
will periodically attempt ta reopen tha file by name.
If tha reopen succeedz n' tha file be a gangbangin' finger-lickin' different file from tha original
(which means dat a freshly smoked up file has been pimped 
with tha same name as tha original gangsta (now renamed) file),
.I less
will display tha contentz of dat freshly smoked up file.
.IP "\-\-no-keypad"
Disablez bustin  tha keypad initialization n' deinitialization strings
to tha terminal.
This is sometimes useful if tha keypad strings make tha numeric
keypad behave up in a undesirable manner.
.IP "\-\-use-backslash"
This option chizzlez tha interpretationz of options which follow dis one.
Afta tha \-\-use-backslash option, any backslash up in a option strang is
removed n' tha followin characta is taken literally.
This allows a thugged-out dollar sign ta be included up in option strings.
.IP \-\-
A command line argument of "\-\-" marks tha end of option arguments.
Any arguments followin dis is interpreted as filenames.
This can be useful when viewin a gangbangin' file whose name begins wit a "\-" or "+".
.IP +
If a cold-ass lil command line option begins wit \fB+\fP,
the remainder of dat option is taken ta be a initial command to
.I less.
For example, +G tells
.I less
to start all up in tha end of tha file rather than tha beginning,
and +/xyz  drops some lyrics ta it ta start all up in tha straight-up original gangsta occurrence of "xyz" up in tha file.
As a special case, +<number> acts like +<number>g; 
that is, it starts tha display all up in tha specified line number
(however, peep tha caveat under tha "g" command above).
If tha option starts wit ++, tha initial command applies to
every file bein viewed, not just tha straight-up original gangsta one.
Da + command busted lyrics bout previously
may also be used ta set (or chizzle) a initial command fo' every last muthafuckin file.

.SH "LINE EDITING"
When enterin command line all up in tha bottom of tha screen
(for example, a gangbangin' filename fo' tha :e command,
or tha pattern fo' a search command),
certain keys can be used ta manipulate tha command line.
Most commandz have a alternate form up in [ brackets ] which can be used if
a key do not exist on a particular keyboard. Y'all KNOW dat shit, muthafucka! 
(Note dat tha forms beginnin wit ESC do not work 
in some MS-DOS n' Windows systems cuz ESC is tha line erase character.)
Any of these special keys may be entered literally by preceding
it wit tha "literal" character, either ^V or ^A.
A backslash itself may also be entered literally by enterin two backslashes.
.IP "LEFTARROW [ ESC-h ]"
Move tha cursor one space ta tha left.
.IP "RIGHTARROW [ ESC-l ]"
Move tha cursor one space ta tha right.
.IP "^LEFTARROW [ ESC-b or ESC-LEFTARROW ]"
(That is, CONTROL n' LEFTARROW simultaneously.)
Move tha cursor one word ta tha left.
.IP "^RIGHTARROW [ ESC-w or ESC-RIGHTARROW ]"
(That is, CONTROL n' RIGHTARROW simultaneously.)
Move tha cursor one word ta tha right.
.IP "HOME [ ESC-0 ]"
Move tha cursor ta tha beginnin of tha line.
.IP "END [ ESC-$ ]"
Move tha cursor ta tha end of tha line.
.IP "BACKSPACE"
Delete tha characta ta tha left of tha cursor,
or quit tha command if tha command line is empty.
.IP "DELETE or [ ESC-x ]"
Delete tha characta under tha cursor.
.IP "^BACKSPACE [ ESC-BACKSPACE ]"
(That is, CONTROL n' BACKSPACE simultaneously.)
Delete tha word ta tha left of tha cursor.
.IP "^DELETE [ ESC-X or ESC-DELETE ]"
(That is, CONTROL n' DELETE simultaneously.)
Delete tha word under tha cursor.
.IP "UPARROW [ ESC-k ]"
Retrieve tha previous command line.
If you first enta some text n' then press UPARROW,
it will retrieve tha previous command which begins wit dat text.
.IP "DOWNARROW [ ESC-j ]"
Retrieve tha next command line.
If you first enta some text n' then press DOWNARROW,
it will retrieve tha next command which begins wit dat text.
.IP "TAB"
Complete tha partial filename ta tha left of tha cursor.
If it matches mo' than one filename, tha straight-up original gangsta match
is entered tha fuck into tha command line.
Repeated TABs will cycle thru tha other matchin filenames.
If tha completed filename be a gangbangin' finger-lickin' directory, a "/" be appended ta tha filename.
(On MS-DOS systems, a "\e" be appended.)
Da environment variable LESSSEPARATOR can be used ta specify a 
different characta ta append ta a gangbangin' finger-lickin' directory name.
.IP "BACKTAB [ ESC-TAB ]"
Like, TAB yo, but cyclez up in tha reverse direction thru tha matchin filenames.
.IP "^L"
Complete tha partial filename ta tha left of tha cursor.
If it matches mo' than one filename, all matches is entered into
the command line (if they fit).
.IP "^U (Unix n' OS/2) or ESC (MS-DOS)"
Delete tha entire command line,
or quit tha command if tha command line is empty.
If you have chizzled yo' line-kill characta up in Unix ta something
other than ^U, dat characta is used instead of ^U.
.IP "^G"
Delete tha entire command line n' return ta tha main prompt.

.SH "KEY BINDINGS"
Yo ass may define yo' own 
.I less
commandz by rockin tha program 
.I lesskey
(1)
to create a lesskey file.
This file specifies a set of command keys n' a action
associated wit each key.
Yo ass may also use
.I lesskey
to chizzle tha line-editin keys (see LINE EDITING),
and ta set environment variables.
If tha environment variable LESSKEY is set,
.I less
uses dat as tha name of tha lesskey file.
Otherwise, 
.I less
looks up in a standard place fo' tha lesskey file:
On Unix systems,
.I less
looks fo' a lesskey file called "$HOME/.less".
On MS-DOS n' Windows systems,
.I less
looks fo' a lesskey file called "$HOME/_less", n' if it aint found there,
then looks fo' a lesskey file called "_less" up in any directory specified
in tha PATH environment variable.
On OS/2 systems,
.I less
looks fo' a lesskey file called "$HOME/less.ini", n' if it aint found,
then looks fo' a lesskey file called "less.ini" up in any directory specified
in tha INIT environment variable, n' if it not found there,
then looks fo' a lesskey file called "less.ini" up in any directory specified
in tha PATH environment variable.
See the
.I lesskey
manual page fo' mo' details.
.P
A system-wide lesskey file may also be set up ta provide key bindings.
If a key is defined up in both a local lesskey file n' up in the
system-wide file, key bindings up in tha local file take precedence over 
those up in tha system-wide file.
If tha environment variable LESSKEY_SYSTEM is set,
.I less
uses dat as tha name of tha system-wide lesskey file.
Otherwise,
.I less 
looks up in a standard place fo' tha system-wide lesskey file:
On Unix systems, tha system-wide lesskey file is /usr/local/etc/sysless.
(But fuck dat shiznit yo, tha word on tha street is dat if 
.I less 
was built wit a gangbangin' finger-lickin' different sysconf directory than /usr/local/etc,
that directory is where tha sysless file is found.)
On MS-DOS n' Windows systems, tha system-wide lesskey file is c:\e_sysless.
On OS/2 systems, tha system-wide lesskey file is c:\esysless.ini.

.SH "INPUT PREPROCESSOR"
Yo ass may define a "input preprocessor" fo' 
.I less.
Before
.I less
opens a gangbangin' file, it first gives yo' input preprocessor a cold-ass lil chizzle ta modify the
way tha contentz of tha file is displayed.
An input preprocessor is simply a executable program (or shell script),
which writes tha contentz of tha file ta a gangbangin' finger-lickin' different file,
called tha replacement file.
Da contentz of tha replacement file is then displayed 
in place of tha contentz of tha original gangsta file.
But fuck dat shiznit yo, tha word on tha street is dat it will step tha fuck up ta tha user as if tha original gangsta file is opened;
that is, 
.I less
will display tha original gangsta filename as tha name of tha current file.
.PP
An input preprocessor receives one command line argument, tha original gangsta filename,
as entered by tha user.
It should create tha replacement file, n' when finished,
print tha name of tha replacement file ta its standard output.
If tha input preprocessor do not output a replacement filename, 
.I less
uses tha original gangsta file, as normal.
Da input preprocessor aint called when viewin standard input.
To set up a input preprocessor, set tha LESSOPEN environment variable
to a cold-ass lil command line which will invoke yo' input preprocessor.
This command line should include one occurrence of tha strang "%s", 
which is ghon be replaced by tha filename
when tha input preprocessor command is invoked.
.PP
When 
.I less
closes a gangbangin' file opened up in such a way, it will call another program,
called tha input postprocessor,
which may big-ass up any desired clean-up action (like fuckin deletin the
replacement file pimped by LESSOPEN).
This program receives two command line arguments, tha original gangsta filename
as entered by tha user, n' tha name of tha replacement file.
To set up a input postprocessor, set tha LESSCLOSE environment variable 
to a cold-ass lil command line which will invoke yo' input postprocessor.
It may include two occurrencez of tha strang "%s"; 
the first is replaced wit tha original gangsta name of tha file n' 
the second wit tha name of tha replacement file, 
which was output by LESSOPEN.
.PP
For example, on nuff Unix systems, these two scripts will allow you
to keep filez up in compressed format yo, but still let
.I less
view dem directly:
.PP
lessopen.sh:
.br
	#! /bin/sh
.br
	case "$1" in
.br
	*.Z)	uncompress -\c $1  >/tmp/less.$$  2>/dev/null
.br
		if [ \-s /tmp/less.$$ ]; then 
.br
			echo /tmp/less.$$
.br
		else
.br
			rm \-f /tmp/less.$$
.br
		fi
.br
		;;
.br
	esac
.PP
lessclose.sh:
.br
	#! /bin/sh
.br
	rm $2
.PP
To use these scripts, put dem both where they can be executed and
set LESSOPEN="lessopen.sh\ %s", and
LESSCLOSE="lessclose.sh\ %s\ %s".
Mo' complex LESSOPEN n' LESSCLOSE scripts may be written
to accept other typez of compressed files, n' so on.
.PP
It be also possible ta set up a input preprocessor to
pipe tha file data directly ta 
.I less,
rather than puttin tha data tha fuck into a replacement file.
This avoidz tha need ta decompress tha entire file before 
startin ta view dat shit.
An input preprocessor dat works dis way is called a input pipe.
An input pipe, instead of freestylin tha name of a replacement file on
its standard output,
writes tha entire contentz of tha replacement file on its standard output.
If tha input pipe do not write any charactas on its standard output,
then there is no replacement file n' 
.I less
uses tha original gangsta file, as normal.
To use a input pipe,
make tha straight-up original gangsta characta up in tha LESSOPEN environment variable a 
vertical bar (|) ta signify dat tha input preprocessor be a input pipe.
.PP
For example, on nuff Unix systems, dis script will work like the
previous example scripts:
.PP
lesspipe.sh:
.br
	#! /bin/sh
.br
	case "$1" in
.br
	*.Z)	uncompress \-c $1  2>/dev/null
.br
	*)	exit 1
.br
		;;
.br
	esac
.br
	exit $?
.br
.PP
To use dis script, put it where it can be executed n' set
LESSOPEN="|lesspipe.sh %s".
.PP
Note dat a preprocessor cannot output a empty file, since that
is interpreted as meanin there is no replacement, n' 
the original gangsta file is used.
To avoid this, if LESSOPEN starts wit two vertical bars,
the exit statuz of tha script becomes meaningful.
If tha exit status is zero, tha output is considered ta be 
replacement text, even if it empty.
If tha exit status is nonzero, any output is ignored n' the
original gangsta file is used.
For compatibilitizzle wit previous versions of
.I less,
if LESSOPEN starts wit only one vertical bar, tha exit status
of tha preprocessor is ignored.
.PP
When a input pipe is used, a LESSCLOSE postprocessor can be used,
but it is probably not necessary since there is no replacement file
to clean up.
In dis case, tha replacement file name passed ta tha LESSCLOSE
postprocessor is "\-".
.PP
For compatibilitizzle wit previous versions of
.I less,
the input preprocessor or pipe aint used if
.I less
is viewin standard input.  
But fuck dat shiznit yo, tha word on tha street is dat if tha straight-up original gangsta characta of LESSOPEN be a thugged-out dash (\-),
the input preprocessor is used on standard input as well as other files.
In dis case, tha dash aint considered ta be part of 
the preprocessor command.
If standard input is bein viewed, tha input preprocessor is passed
a file name consistin of a single dash.
Similarly, if tha straight-up original gangsta two charactaz of LESSOPEN is vertical bar n' dash
(|\-) or two vertical bars n' a thugged-out dash (||\-), 
the input pipe is used on standard input as well as other files.
Again, up in dis case tha dash aint considered ta be part of 
the input pipe command.
.PP
There is used followin filez ta set up default preprocessor:
.br
	/etc/profile.d/less.sh
.br
	/etc/profile.d/less.csh
.br
These filez set up /usr/bin/lesspipe.sh as a thugged-out default filter n' shiznit fo' realz. An user defined
filta can be specified up in ~/.lessfilter n' shit. This file should have a execute bit
set n' accept only one parameter, which represents a gangbangin' filename. If
the user defined filta process tha file, zero should be returned. Y'all KNOW dat shit, muthafucka! Otherwise
~/.lessfilta tries ta handle tha file.

.SH "NATIONAL CHARACTER SETS"
There is three typez of charactas up in tha input file:
.IP "normal characters"
can be displayed directly ta tha screen.
.IP "control characters"
should not be displayed directly yo, but is sposed ta fuckin be found
in ordinary text filez (like fuckin backspace n' tab).
.IP "binary characters"
should not be displayed directly n' is not sposed ta fuckin be found
in text files.
.PP
A "characta set" is simply a thugged-out description of which charactas is to
be considered normal, control, n' binary.
Da LESSCHARSET environment variable may be used ta select a cold-ass lil characta set.
Possible joints fo' LESSCHARSET are:
.IP ascii
BS, TAB, NL, CR, n' formfeed is control characters,
all chars wit joints between 32 n' 126 is normal,
and all others is binary.
.IP iso8859
Selects a ISO 8859 characta set.
This is tha same ol' dirty as ASCII, except charactas between 160 n' 255 are
treated as aiiight characters.
.IP latin1
Same as iso8859.
.IP latin9
Same as iso8859.
.IP dos
Selects a cold-ass lil characta set appropriate fo' MS-DOS.
.IP ebcdic
Selects a EBCDIC characta set.
.IP IBM-1047
Selects a EBCDIC characta set used by OS/390 Unix Skillz.
This is tha EBCDIC analogue of latin1.  Yo ass git similar thangs up in dis biatch
by settin either LESSCHARSET=IBM-1047 or LC_CTYPE=en_US
in yo' environment.
.IP koi8-r
Selects a Russian characta set.
.IP next
Selects a cold-ass lil characta set appropriate fo' NeXT computers.
.IP utf-8
Selects tha UTF-8 encodin of tha ISO 10646 characta set.
UTF-8 is special up in dat it supports multi-byte charactas up in tha input file.
It be tha only characta set dat supports multi-byte characters.
.IP windows
Selects a cold-ass lil characta set appropriate fo' Microsizzlez Windows (cp 1251).
.PP
In rare cases, it may be desired ta tailor
.I less
to bust a cold-ass lil characta set other than tha ones definable by LESSCHARSET.
In dis case, tha environment variable LESSCHARDEF can be used
to define a cold-ass lil characta set.
It should be set ta a strang where each characta up in tha strang represents
one characta up in tha characta set.
Da characta "." is used fo' a aiiight character, "c" fo' control,
and "b" fo' binary.
A decimal number may be used fo' repetition.
For example, "bccc4b." would mean characta 0 is binary,
1, 2 n' 3 is control, 4, 5, 6 n' 7 is binary, n' 8 is normal.
All charactas afta tha last is taken ta be tha same as tha last,
so charactas 9 all up in 255 would be normal.
(This be a example, n' do not necessarily 
represent any real characta set.)
.PP
This table shows tha value of LESSCHARDEF which is equivalent
to each of tha possible joints fo' LESSCHARSET:
.sp
	ascii\ 	8bcccbcc18b95.b
.br
	dos\ \ \ 	8bcccbcc12bc5b95.b.
.br
	ebcdic	5bc6bcc7bcc41b.9b7.9b5.b..8b6.10b6.b9.7b
.br
	\ \ \ \ \ \ 	9.8b8.17b3.3b9.7b9.8b8.6b10.b.b.b.
.br
	IBM-1047	4cbcbc3b9cbccbccbb4c6bcc5b3cbbc4bc4bccbc
.br
	\ \ \ \ \ \ 	191.b
.br
	iso8859	8bcccbcc18b95.33b.
.br
	koi8-r	8bcccbcc18b95.b128.
.br
	latin1	8bcccbcc18b95.33b.
.br
	next\ \ 	8bcccbcc18b95.bb125.bb
.PP
If neither LESSCHARSET nor LESSCHARDEF is set,
but any of tha strings "UTF-8", "UTF8", "utf-8" or "utf8" 
is found up in tha LC_ALL, LC_CTYPE or LANG
environment variables, then tha default characta set is utf-8.
.PP
If dat strang aint found yo, but yo' system supports the
.I setlocale
interface,
.I less
will use setlocale ta determine tha characta set.
setlocale is controlled by settin tha LANG or LC_CTYPE environment
variables.
.PP
Finally, if the
.I setlocale
interface be also not available, tha default characta set is latin1.
.PP
Control n' binary charactas is displayed up in standout (reverse vizzle).
Each such characta is displayed up in caret notation if possible
(e.g. ^A fo' control-A).  Caret notation is used only if 
invertin tha 0100 bit thangs up in dis biatch up in a aiiight printable character.
Otherwise, tha characta is displayed as a hex number up in angle brackets.
This format can be chizzled by 
settin tha LESSBINFMT environment variable.
LESSBINFMT may begin wit a "*" n' one characta ta select 
the display attribute:
"*k" is blinking, "*d" is bold, "*u" is underlined, "*s" is standout,
and "*n" is normal.
If LESSBINFMT do not begin wit a "*", aiiight attribute be assumed.
Da remainder of LESSBINFMT be a strang which may include one
printf-style escape sequence (a % followed by x, X, o, d, etc.).
For example, if LESSBINFMT is "*u[%x]", binary characters
are displayed up in underlined hexadecimal surrounded by brackets.
Da default if no LESSBINFMT is specified is "*s<%02X>".
Warning: tha result of expandin tha characta via LESSBINFMT must
be less than 31 characters.
.PP
When tha characta set is utf-8, tha LESSUTSTDNFMT environment variable
acts similarly ta LESSBINFMT but it applies ta Unicode code points
that was successfully decoded but is unsuitable fo' display (e.g.,
unassigned code points).
Its default value is "<U+%04lX>".
Note dat LESSUTSTDNFMT n' LESSBINFMT share they display attribute 
settin ("*x") so specifyin one will affect both; 
LESSUTSTDNFMT is read afta LESSBINFMT so its setting, if any,
will have priority. 
Problematic octets up in a UTF-8 file (octetz of a truncated sequence,
octetz of a cold-ass lil complete but non-shortest form sequence, illegal octets, 
and stray trailin octets)
are displayed individually rockin LESSBINFMT so as ta facilitate diagnostic
of how tha fuck tha UTF-8 file is ill-formed.

.SH "PROMPTS"
Da \-P option allows you ta tailor tha prompt ta yo' preference.
Da strang given ta tha \-P option replaces tha specified prompt string.
Certain charactas up in tha strang is interpreted specially.
Da prompt mechanizzle is rather fucked up ta provide flexibility,
but tha ordinary user need not KNOW tha detailz of constructing
personalized prompt strings.
.sp
A cement sign followed by a single characta is expanded
accordin ta what tha fuck tha followin characta is:
.IP "%b\fIX\fP"
Replaced by tha byte offset tha fuck into tha current input file.
Da b is followed by a single characta (shown as \fIX\fP above)
which specifies tha line whose byte offset is ta be used.
If tha characta be a "t", tha byte offset of tha top line up in the
display is used,
an "m" means use tha middle line,
a "b" means use tha bottom line,
a "B" means use tha line just afta tha bottom line,
and a "j" means use tha "target" line, as specified by tha \-j option.
.IP "%B"
Replaced by tha size of tha current input file.
.IP "%c"
Replaced by tha column number of tha text appearin up in tha first
column of tha screen.
.IP "%d\fIX\fP"
Replaced by tha page number of a line up in tha input file.
Da line ta be used is determined by tha \fIX\fP, as wit tha %b option.
.IP "%D"
Replaced by tha number of pages up in tha input file,
or equivalently, tha page number of tha last line up in tha input file.
.IP "%E"
Replaced by tha name of tha editor (from tha VISUAL environment variable,
or tha EDITOR environment variable if VISUAL aint defined).
See tha rap of tha LESSEDIT feature below.
.IP "%f"
Replaced by tha name of tha current input file.
.IP "%F"
Replaced by tha last component of tha name of tha current input file.
.IP "%i"
Replaced by tha index of tha current file up in tha list of
input files.
.IP "%l\fIX\fP"
Replaced by tha line number of a line up in tha input file.
Da line ta be used is determined by tha \fIX\fP, as wit tha %b option.
.IP "%L"
Replaced by tha line number of tha last line up in tha input file.
.IP "%m"
Replaced by tha total number of input files.
.IP "%p\fIX\fP"
Replaced by tha cement tha fuck into tha current input file, based on byte offsets.
Da line used is determined by tha \fIX\fP as wit tha %b option.
.IP "%P\fIX\fP"
Replaced by tha cement tha fuck into tha current input file, based on line numbers.
Da line used is determined by tha \fIX\fP as wit tha %b option.
.IP "%s"
Same as %B.
.IP "%t"
Causes any trailin spaces ta be removed.
Usually used all up in tha end of tha strin yo, but may step tha fuck up anywhere.
.IP "%x"
Replaced by tha name of tha next input file up in tha list.
.PP
If any item is unknown (for example, tha file size if input
is a pipe), a question mark is printed instead.
.PP
Da format of tha prompt strang can be chizzled
dependin on certain conditions.
A question mark followed by a single characta acts like a "IF":
dependin on tha followin character, a cold-ass lil condizzle is evaluated.
If tha condizzle is true, any charactas followin tha question mark
and condizzle character, up ta a period, is included up in tha prompt.
If tha condizzle is false, such charactas is not included.
A colon appearin between tha question mark n' the
period can be used ta establish a "ELSE": any charactas between
the colon n' tha period is included up in tha strang if n' only if
the IF condizzle is false.
Condizzle charactas (which follow a question mark) may be:
.IP "?a"
True if any charactas done been included up in tha prompt so far.
.IP "?b\fIX\fP"
True if tha byte offset of tha specified line is known.
.IP "?B"
True if tha size of current input file is known.
.IP "?c"
True if tha text is horizontally shifted (%c aint zero).
.IP "?d\fIX\fP"
True if tha page number of tha specified line is known.
.IP "?e"
True if at end-of-file.
.IP "?f"
True if there be a input filename
(that is, if input aint a pipe).
.IP "?l\fIX\fP"
True if tha line number of tha specified line is known.
.IP "?L"
True if tha line number of tha last line up in tha file is known.
.IP "?m"
True if there is mo' than one input file.
.IP "?n"
True if dis is tha straight-up original gangsta prompt up in a freshly smoked up input file.
.IP "?p\fIX\fP"
True if tha cement tha fuck into tha current input file, based on byte offsets,
of tha specified line is known.
.IP "?P\fIX\fP"
True if tha cement tha fuck into tha current input file, based on line numbers,
of tha specified line is known.
.IP "?s"
Same as "?B".
.IP "?x"
True if there be a next input file
(that is, if tha current input file aint tha last one).
.PP
Any charactas other than tha special ones
(question mark, colon, period, cement, n' backslash)
become literally part of tha prompt.
Any of tha special charactas may be included up in tha prompt literally
by precedin it wit a funky-ass backslash.
.PP
Some examples:
.sp
?f%f:Standard input.
.sp
This prompt prints tha filename, if known;
otherwise tha strang "Standard input".
.sp
?f%f .?ltLine %lt:?pt%pt\e%:?btByte %bt:-...
.sp
This prompt would print tha filename, if known.
Da filename is followed by tha line number, if known,
otherwise tha cement if known, otherwise tha byte offset if known.
Otherwise, a thugged-out dash is printed.
Notice how tha fuck each question mark has a matchin period,
and how tha fuck tha % afta tha %pt
is included literally by escapin it wit a funky-ass backslash.
.sp
?n?f%f\ .?m(file\ %i\ of\ %m)\ ..?e(END)\ ?x-\ Next\e:\ %x..%t
.sp
This prints tha filename if dis is tha straight-up original gangsta prompt up in a gangbangin' file,
followed by tha "file N of N" message if there is more
than one input file.
Then, if we is at end-of-file, tha strang "(END)" is printed
followed by tha name of tha next file, if there is one.
Finally, any trailin spaces is truncated.
This is tha default prompt.
For reference, here is tha defaults for
the other two prompts (\-m n' \-M respectively).
Each is fucked up tha fuck into two lines here fo' readabilitizzle only.
.nf
.sp
?n?f%f\ .?m(file\ %i\ of\ %m)\ ..?e(END)\ ?x-\ Next\e:\ %x.:
	?pB%pB\e%:byte\ %bB?s/%s...%t
.sp
?f%f\ .?n?m(file\ %i\ of\ %m)\ ..?ltlines\ %lt-%lb?L/%L.\ :
	byte\ %bB?s/%s.\ .?e(END)\ ?x-\ Next\e:\ %x.:?pB%pB\e%..%t
.sp
.fi
And here is tha default message produced by tha = command:
.nf
.sp
?f%f\ .?m(file\ %i\ of\ %m)\ .?ltlines\ %lt-%lb?L/%L.\ .
	byte\ %bB?s/%s.\ ?e(END)\ :?pB%pB\e%..%t
.fi
.PP
Da prompt expansion features is also used fo' another purpose:
if a environment variable LESSEDIT is defined, it is used
as tha command ta be executed when tha v command is invoked.
Da LESSEDIT strang is expanded up in tha same way as tha prompt strings.
Da default value fo' LESSEDIT is:
.nf
.sp
	%E\ ?lm+%lm.\ %f
.sp
.fi
Note dat dis expandz ta tha editor name, followed by a + n' the
line number, followed by tha file name.
If yo' editor do not accept tha "+linenumber" syntax, or has other
differences up in invocation syntax, tha LESSEDIT variable can be 
changed ta modify dis default.

.SH SECURITY
When tha environment variable LESSSECURE is set ta 1,
.I less
runs up in a "secure" mode.
This means these features is disabled:
.RS
.IP "!"
the shell command
.IP "|"
the pipe command
.IP ":e"
the examine command.
.IP "v"
the editin command
.IP "s  \-o"
log files
.IP "\-k"
use of lesskey files
.IP "\-t"
use of tags files
.IP " "
metacharactas up in filenames, like fuckin *
.IP " "
filename completion (TAB, ^L)
.RE
.PP
Less can also be compiled ta be permanently up in "secure" mode.

.SH "COMPATIBILITY WITH MORE"
If tha environment variable LESS_IS_MORE is set ta 1,
or if tha program is invoked via a gangbangin' file link named "more",
.I less
behaves (mostly) up in conformizzle wit tha POSIX "more" command justification.
In dis mode, less behaves differently up in these ways:
.PP
Da \-e option works differently.
If tha \-e option aint set, 
.I less
behaves as if tha \-E option was set.
If tha \-e option is set, 
.I less
behaves as if tha \-e n' \-F options was set.
.PP
Da \-m option works differently.
If tha \-m option aint set, tha medium prompt is used,
and it is prefixed wit tha strang "--Mo'--".
If tha \-m option is set, tha short prompt is used.
.PP
Da \-n option acts like tha \-z option.
Da aiiight behavior of tha \-n option is unavailable up in dis mode.
.PP
Da parameta ta tha \-p option is taken ta be a 
.I less
command rather than a search pattern.
.PP
Da LESS environment variable is ignored,
and tha MORE environment variable is used up in its place.

.SH "ENVIRONMENT VARIABLES"
Environment variablez may be specified either up in tha system environment
as usual, or up in a 
.I lesskey
(1) file.
If environment variablez is defined up in mo' than one place, 
variablez defined up in a local lesskey file take precedence over
variablez defined up in tha system environment, which take precedence
over variablez defined up in tha system-wide lesskey file.
.IP COLUMNS
Sets tha number of columns on tha screen.
Takes precedence over tha number of columns specified by tha TERM variable.
(But if you gotz a windowin system which supports TIOCGWINSZ or WIOCGETD,
the window systemz scam of tha screen size takes precedence over the
LINES n' COLUMNS environment variables.)
.IP EDITOR
Da name of tha editor (used fo' tha v command).
.IP HOME
Name of tha userz home directory
(used ta find a lesskey file on Unix n' OS/2 systems).
.IP "HOMEDRIVE, HOMEPATH"
Concatenation of tha HOMEDRIVE n' HOMEPATH environment variablez is
the name of tha userz home directory if tha HOME variable aint set
(only up in tha Windows version).
.IP INIT
Name of tha userz init directory (used ta find a lesskey file on OS/2 systems).
.IP LANG
Language fo' determinin tha characta set.
.IP LC_CTYPE
Language fo' determinin tha characta set.
.IP LESS
Options which is passed ta 
.I less
automatically.
.IP LESSANSIENDCHARS
Charactas which may end a ANSI color escape sequence
(default "m").
.IP LESSANSIMIDCHARS
Charactas which may step tha fuck up between tha ESC characta n' the
end characta up in a ANSI color escape sequence
(default "0123456789;[?!"'#%()*+\ ".
.IP LESSBINFMT
Format fo' displayin non-printable, non-control characters.
.IP LESSCHARDEF
Defines a cold-ass lil characta set.
.IP LESSCHARSET
Selects a predefined characta set.
.IP LESSCLOSE
Command line ta invoke tha (optional) input-postprocessor.
.IP LESSECHO
Name of tha lessecho program (default "lessecho").
Da lessecho program is needed ta expand metacharacters, like fuckin * n' ?,
in filenames on Unix systems.
.IP LESSEDIT
Editor prototype strang (used fo' tha v command).
See rap under PROMPTS.
.IP LESSGLOBALTAGS
Name of tha command used by tha \-t option ta find global tags.
Normally should be set ta "global" if yo' system has the
.I global
(1) command. Y'all KNOW dat shit, muthafucka!  If not set, global tags is not used.
.IP LESSHISTFILE
Name of tha history file used ta remember search commandz and
shell commandz between invocationz of 
.I less.
If set ta "\-" or "/dev/null", a history file aint used.
Da default is "$HOME/.lesshst" on Unix systems, "$HOME/_lesshst" on
DOS n' Windows systems, or "$HOME/lesshst.ini" or "$INIT/lesshst.ini" 
on OS/2 systems.
.IP LESSHISTSIZE
Da maximum number of commandz ta save up in tha history file.
Da default is 100.
.IP LESSKEY
Name of tha default lesskey(1) file.
.IP LESSKEY_SYSTEM
Name of tha default system-wide lesskey(1) file.
.IP LESSMETACHARS
List of charactas which is considered "metacharacters" by tha shell.
.IP LESSMETAESCAPE
Prefix which less will add before each metacharacta up in a
command busted ta tha shell.
If LESSMETAESCAPE be a empty string, commandz containing
metacharactas aint gonna be passed ta tha shell.
.IP LESSOPEN
Command line ta invoke tha (optional) input-preprocessor.
.IP LESSSECURE
Runs less up in "secure" mode.
See rap under SECURITY.
.IP LESSSEPARATOR
Strin ta be appended ta a gangbangin' finger-lickin' directory name up in filename completion.
.IP LESSUTSTDNFMT
Format fo' displayin non-printable Unicode code points.
.IP LESS_IS_MORE
Emulate tha 
.I more
(1) command.
.IP LINES
Sets tha number of lines on tha screen.
Takes precedence over tha number of lines specified by tha TERM variable.
(But if you gotz a windowin system which supports TIOCGWINSZ or WIOCGETD,
the window systemz scam of tha screen size takes precedence over the
LINES n' COLUMNS environment variables.)
.IP MORE
Options which is passed to
.I less
automatically when hustlin up in 
.I more
compatible mode.
.IP PATH
Userz search path (used ta find a lesskey file 
on MS-DOS n' OS/2 systems).
.IP SHELL
Da shell used ta execute tha ! command, as well as ta expand filenames.
.IP TERM
Da type of terminal on which
.I less
is bein run.
.IP VISUAL
Da name of tha editor (used fo' tha v command).

.SH "SEE ALSO"
lesskey(1)

.SH COPYRIGHT
Copyright (C) 1984-2012  Mark Nudelman
.PP
less is part of tha GNU project n' is free software.
Yo ass can redistribute it and/or modify it
under tha termz of either
(1) tha GNU General Public License as published by
the Jacked Software Foundation; or (2) tha Less License.
See tha file README up in tha less distribution fo' mo' details
regardin redistribution.
Yo ass should have received a cold-ass lil copy of tha GNU General Public License 
along wit tha source fo' less; peep tha file COPYING.
If not, write ta tha Jacked Software Foundation, 59 Temple Place,
Suite 330, Boston, MA  02111-1307, USA.
Yo ass should also have received a cold-ass lil copy of tha Less License;
see tha file LICENSE.
.PP
less is distributed up in tha hope dat it is ghon be useful yo, but
WITHOUT ANY WARRANTY; without even tha implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.
See tha GNU General Public License fo' mo' details.

.SH AUTHOR
.PP
Mark Nudelman 
.br
Send bug reports or comments ta <bug-less@gnu.org>
.br
See http://www.greenwoodsoftware.com/less/bugs.html fo' tha sickest fuckin list of known bugs up in less.
.br
For mo' shiznit, peep tha less homepizzy at 
.br
http://www.greenwoodsoftware.com/less.
