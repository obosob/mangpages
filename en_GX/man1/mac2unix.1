.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "dos2unix 1"
.TH dos2unix 1 "2012-09-15" "dos2unix" "2013-08-03"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
dos2unix \- DOS/Mac ta Unix n' vice versa text file format converter
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    dos2unix [options] [FILE ...] [\-n INFILE OUTFILE ...]
\&    unix2dos [options] [FILE ...] [\-n INFILE OUTFILE ...]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da Dos2unix package includes utilitizzles \f(CW\*(C`dos2unix\*(C'\fR n' \f(CW\*(C`unix2dos\*(C'\fR ta convert
plain text filez up in \s-1DOS\s0 or Mac format ta Unix format n' vice versa.
.PP
In DOS/Windows text filez a line break, also known as newline, be a cold-ass lil combination
of two characters: a Carriage Return (\s-1CR\s0) followed by a Line Feed (\s-1LF\s0). In Unix
text filez a line break be a single character: tha Line Feed (\s-1LF\s0). In Mac text
files, prior ta Mac \s-1OS X,\s0 a line break was single Carriage Return (\s-1CR\s0)
character n' shit. Nowadays Mac \s-1OS\s0 uses Unix steez (\s-1LF\s0) line breaks.
.PP
Binary filez is automatically skipped, unless conversion is forced.
.PP
Non-regular files, like fuckin directories n' FIFOs, is automatically skipped.
.PP
Symbolic links n' they targets is by default kept untouched.
Symbolic links can optionally be replaced, or tha output can be written
to tha symbolic link target.
Symbolic links on Windows is not supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Windows symbolic links
always replaced, keepin tha targets unchanged.
.PP
Dos2unix was modelled afta dos2unix under SunOS/Solaris n' has similar
conversion modes.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-\fR" 4
.IX Item "--"
Treat all followin options as file names. Use dis option if you want to
convert filez whose names start wit a thugged-out dash. For instizzle ta convert
a file named \*(L"\-foo\*(R", you can use dis command:
.Sp
.Vb 1
\&    dos2unix \-\- \-foo
.Ve
.Sp
Or up in freshly smoked up file mode:
.Sp
.Vb 1
\&    dos2unix \-n \-\- \-foo out.txt
.Ve
.IP "\fB\-ascii\fR" 4
.IX Item "-ascii"
Convert only line breaks. This is tha default conversion mode.
.IP "\fB\-iso\fR" 4
.IX Item "-iso"
Conversion between \s-1DOS\s0 n' \s-1ISO\-8859\-1\s0 characta set. Right back up in yo muthafuckin ass. See also section
\&\s-1CONVERSION MODES.\s0
.IP "\fB\-1252\fR" 4
.IX Item "-1252"
Use Windows code page 1252 (Westside European).
.IP "\fB\-437\fR" 4
.IX Item "-437"
Use \s-1DOS\s0 code page 437 (\s-1US\s0). This is tha default code page used fo' \s-1ISO\s0 conversion.
.IP "\fB\-850\fR" 4
.IX Item "-850"
Use \s-1DOS\s0 code page 850 (Westside European).
.IP "\fB\-860\fR" 4
.IX Item "-860"
Use \s-1DOS\s0 code page 860 (Portuguese).
.IP "\fB\-863\fR" 4
.IX Item "-863"
Use \s-1DOS\s0 code page 863 (French Canuck).
.IP "\fB\-865\fR" 4
.IX Item "-865"
Use \s-1DOS\s0 code page 865 (Nordic).
.IP "\fB\-7\fR" 4
.IX Item "-7"
Convert 8 bit charactas ta 7 bit space.
.IP "\fB\-c, \-\-convmode \s-1CONVMODE\s0\fR" 4
.IX Item "-c, --convmode CONVMODE"
Set conversion mode. Where \s-1CONVMODE\s0 is one of:
\&\fIascii\fR, \fI7bit\fR, \fIiso\fR, \fImac\fR
with ascii bein tha default.
.IP "\fB\-f, \-\-force\fR" 4
.IX Item "-f, --force"
Force conversion of binary files.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Display help n' exit.
.IP "\fB\-k, \-\-keepdate\fR" 4
.IX Item "-k, --keepdate"
Keep tha date stamp of output file same as input file.
.IP "\fB\-L, \-\-license\fR" 4
.IX Item "-L, --license"
Display programz license.
.IP "\fB\-l, \-\-newline\fR" 4
.IX Item "-l, --newline"
Add additionizzle newline.
.Sp
\&\fBdos2unix\fR: Only \s-1DOS\s0 line breaks is chizzled ta two Unix line breaks.
In Mac mode only Mac line breaks is chizzled ta two Unix
line breaks.
.Sp
\&\fBunix2dos\fR: Only Unix line breaks is chizzled ta two \s-1DOS\s0 line breaks.
In Mac mode Unix line breaks is chizzled ta two Mac line breaks.
.IP "\fB\-m, \-\-add\-bom\fR" 4
.IX Item "-m, --add-bom"
Write a \s-1UTF\-8\s0 Byte Order Mark up in tha output file. Never use dis option when
the output encodin is other than \s-1UTF\-8.\s0 See also section \s-1UNICODE.\s0
.IP "\fB\-n, \-\-newfile \s-1INFILE OUTFILE ...\s0\fR" 4
.IX Item "-n, --newfile INFILE OUTFILE ..."
New file mode. Convert file \s-1INFILE\s0 n' write output ta file \s-1OUTFILE.\s0
File names must be given up in pairs n' wildcard names should \fInot\fR be
used or you \fIwill\fR lose yo' files.
.Sp
Da thug whoz ass starts tha conversion up in freshly smoked up file (paired) mode is ghon be tha baller
of tha converted file. Da read/write permissionz of tha freshly smoked up file is ghon be the
permissionz of tha original gangsta file minus tha \fIumask\fR\|(1) of tha thug whoz ass runs the
conversion.
.IP "\fB\-o, \-\-oldfile \s-1FILE ...\s0\fR" 4
.IX Item "-o, --oldfile FILE ..."
Oldskool file mode. Convert file \s-1FILE\s0 n' overwrite output ta dat shit. Da program
defaults ta run up in dis mode. Wildcard names may be used.
.Sp
In oldschool file (in-place) mode tha converted file gets tha same ol' dirty baller, group, and
read/write permissions as tha original gangsta file fo' realz. Also when tha file is converted by
another user whoz ass has write permissions on tha file (e.g. user root).  The
conversion is ghon be aborted when it aint possible ta preserve tha original
values.  Chizzle of balla could mean dat tha original gangsta balla aint able ta read
the file any mo' n' mo' n' mo'. Chizzle of crew could be a securitizzle risk, tha file could be
made readable fo' peeps fo' whom it aint intended. Y'all KNOW dat shit, muthafucka!  Preservation of baller,
group, n' read/write permissions is only supported on Unix.
.IP "\fB\-q, \-\-quiet\fR" 4
.IX Item "-q, --quiet"
Quiet mode. Right back up in yo muthafuckin ass. Suppress all warnings n' lyrics. Da return value is zero.
Except when wack command-line options is used.
.IP "\fB\-s, \-\-safe\fR" 4
.IX Item "-s, --safe"
Skip binary filez (default).
.IP "\fB\-F, \-\-follow\-symlink\fR" 4
.IX Item "-F, --follow-symlink"
Big up symbolic links n' convert tha targets.
.IP "\fB\-R, \-\-replace\-symlink\fR" 4
.IX Item "-R, --replace-symlink"
Replace symbolic links wit converted files
(original gangsta target filez remain unchanged).
.IP "\fB\-S, \-\-skip\-symlink\fR" 4
.IX Item "-S, --skip-symlink"
Keep symbolic links n' targets unchanged (default).
.IP "\fB\-V, \-\-version\fR" 4
.IX Item "-V, --version"
Display version shiznit n' exit.
.SH "MAC MODE"
.IX Header "MAC MODE"
In aiiight mode line breaks is converted from \s-1DOS\s0 ta Unix n' vice versa.
Mac line breaks is not converted.
.PP
In Mac mode line breaks is converted from Mac ta Unix n' vice versa. \s-1DOS\s0
line breaks is not chizzled.
.PP
To run up in Mac mode use tha command-line option \f(CW\*(C`\-c mac\*(C'\fR or use the
commandz \f(CW\*(C`mac2unix\*(C'\fR or \f(CW\*(C`unix2mac\*(C'\fR.
.SH "CONVERSION MODES"
.IX Header "CONVERSION MODES"
Conversion modes \fIascii\fR, \fI7bit\fR, n' \fIiso\fR
are similar ta dem of dos2unix/unix2dos under SunOS/Solaris.
.IP "\fBascii\fR" 4
.IX Item "ascii"
In mode \f(CW\*(C`ascii\*(C'\fR only line breaks is converted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This is tha default
conversion mode.
.Sp
Although tha name of dis mode is \s-1ASCII,\s0 which be a 7 bit standard, the
actual mode is 8 bit. Use always dis mode when convertin Unicode \s-1UTF\-8\s0
files.
.IP "\fB7bit\fR" 4
.IX Item "7bit"
In dis mode all 8 bit non-ASCII charactas (with joints from 128 ta 255)
are converted ta a 7 bit space.
.IP "\fBiso\fR" 4
.IX Item "iso"
Charactas is converted between a \s-1DOS\s0 characta set (code page) n' \s-1ISO\s0
characta set \s-1ISO\-8859\-1 \s0(Latin\-1) on Unix. \s-1DOS\s0 charactas without \s-1ISO\-8859\-1\s0
equivalent, fo' which conversion aint possible, is converted ta a thugged-out dot. The
same counts fo' \s-1ISO\-8859\-1\s0 charactas without \s-1DOS\s0 counterpart.
.Sp
When only option \f(CW\*(C`\-iso\*(C'\fR is used dos2unix will try ta determine tha actizzle code
page. When dis aint possible dos2unix will use default code page \s-1CP437,\s0
which is mainly used up in tha \s-1USA. \s0 To force a specific code page use options
\&\f(CW\*(C`\-437\*(C'\fR (\s-1US\s0), \f(CW\*(C`\-850\*(C'\fR (Westside European), \f(CW\*(C`\-860\*(C'\fR (Portuguese), \f(CW\*(C`\-863\*(C'\fR (French
Canadian), or \f(CW\*(C`\-865\*(C'\fR (Nordic).  Windows code page \s-1CP1252 \s0(Westside European) is
also supported wit option \f(CW\*(C`\-1252\*(C'\fR. For other code pages use dos2unix in
combination wit \fIiconv\fR\|(1).  Iconv can convert between a long-ass list of character
encodings.
.Sp
Never use \s-1ISO\s0 converion on Unicode text files. Well shiiiit, it will corrupt \s-1UTF\-8\s0 encoded files.
.Sp
Some examples:
.Sp
Convert from \s-1DOS\s0 default code page ta Unix Latin\-1
.Sp
.Vb 1
\&    dos2unix \-iso \-n in.txt out.txt
.Ve
.Sp
Convert from \s-1DOS CP850\s0 ta Unix Latin\-1
.Sp
.Vb 1
\&    dos2unix \-850 \-n in.txt out.txt
.Ve
.Sp
Convert from Windows \s-1CP1252\s0 ta Unix Latin\-1
.Sp
.Vb 1
\&    dos2unix \-1252 \-n in.txt out.txt
.Ve
.Sp
Convert from Windows \s-1CP1252\s0 ta Unix \s-1UTF\-8 \s0(Unicode)
.Sp
.Vb 1
\&    iconv \-f CP1252 \-t UTF\-8 in.txt | dos2unix > out.txt
.Ve
.Sp
Convert from Unix Latin\-1 ta \s-1DOS\s0 default code page.
.Sp
.Vb 1
\&    unix2dos \-iso \-n in.txt out.txt
.Ve
.Sp
Convert from Unix Latin\-1 ta \s-1DOS CP850\s0
.Sp
.Vb 1
\&    unix2dos \-850 \-n in.txt out.txt
.Ve
.Sp
Convert from Unix Latin\-1 ta Windows \s-1CP1252\s0
.Sp
.Vb 1
\&    unix2dos \-1252 \-n in.txt out.txt
.Ve
.Sp
Convert from Unix \s-1UTF\-8 \s0(Unicode) ta Windows \s-1CP1252\s0
.Sp
.Vb 1
\&    unix2dos < in.txt | iconv \-f UTF\-8 \-t CP1252 > out.txt
.Ve
.Sp
See also <http://czyborra.com/charsets/codepages.html>
and <http://czyborra.com/charsets/iso8859.html>.
.SH "UNICODE"
.IX Header "UNICODE"
.SS "Encodings"
.IX Subsection "Encodings"
There exist different Unicode encodings. On Unix n' Linux Unicode filez are
typically encoded up in \s-1UTF\-8\s0 encoding. On Windows Unicode text filez can be
encoded up in \s-1UTF\-8, UTF\-16,\s0 or \s-1UTF\-16\s0 big-ass endian yo, but is mostly encoded in
\&\s-1UTF\-16\s0 format.
.SS "Conversion"
.IX Subsection "Conversion"
Unicode text filez can have \s-1DOS,\s0 Unix or Mac line breaks, like regular text
files.
.PP
All versionz of dos2unix n' unix2dos can convert \s-1UTF\-8\s0 encoded files, cuz
\&\s-1UTF\-8\s0 was designed fo' backward compatiblitizzle wit \s-1ASCII.\s0
.PP
Dos2unix n' unix2dos wit Unicode \s-1UTF\-16\s0 support, can read lil n' big
endian \s-1UTF\-16\s0 encoded text files. To peep if dos2unix was built wit \s-1UTF\-16\s0
support type \f(CW\*(C`dos2unix \-V\*(C'\fR.
.PP
Da Windows versionz of dos2unix n' unix2dos convert \s-1UTF\-16\s0 encoded files
always ta \s-1UTF\-8\s0 encoded files. Unix versionz of dos2unix/unix2dos convert
\&\s-1UTF\-16\s0 encoded filez ta tha locale characta encodin when it is set ta \s-1UTF\-8.\s0
Use tha \fIlocale\fR\|(1) command ta smoke up what tha fuck tha locale characta encodin is.
.PP
Because \s-1UTF\-8\s0 formatted text filez is well supported on both Windows n' Unix,
dos2unix n' unix2dos have no option ta write \s-1UTF\-16\s0 filez fo' realz. All \s-1UTF\-16\s0
charactas can be encoded up in \s-1UTF\-8.\s0 Conversion from \s-1UTF\-16\s0 ta \s-1UTF\-8\s0 is without
loss. \s-1UTF\-16\s0 filez is ghon be skipped on Unix when tha locale characta encoding
is not \s-1UTF\-8,\s0 ta prevent accidental loss of text. When a \s-1UTF\-16\s0 ta \s-1UTF\-8\s0
conversion error occurs, fo' instizzle when tha \s-1UTF\-16\s0 input file gotz nuff
an error, tha file is ghon be skipped.
.PP
\&\s-1ISO\s0 n' 7\-bit mode conversion do not work on \s-1UTF\-16\s0 files.
.SS "Byte Order Mark"
.IX Subsection "Byte Order Mark"
On Windows Unicode text filez typically gotz a Byte Order Mark (\s-1BOM\s0), cuz
many Windows programs (includin Notepad) add BOMs by default. Right back up in yo muthafuckin ass. See also
<http://en.wikipedia.org/wiki/Byte_order_mark>.
.PP
On Unix Unicode filez typically aint gots a \s-1BOM.\s0 It be assumed dat text files
are encoded up in tha locale characta encoding.
.PP
Dos2unix can only detect if a gangbangin' file is up in \s-1UTF\-16\s0 format if tha file has a \s-1BOM.\s0
When a \s-1UTF\-16\s0 file aint gots a \s-1BOM,\s0 dos2unix will peep tha file as a funky-ass binary
file.
.PP
Use dos2unix up in combination wit \fIiconv\fR\|(1) ta convert a \s-1UTF\-16\s0 file without
\&\s-1BOM.\s0
.PP
Dos2unix never writes a \s-1BOM\s0 up in tha output file, unless you use option \f(CW\*(C`\-m\*(C'\fR.
.PP
Unix2dos writes a \s-1BOM\s0 up in tha output file when tha input file has a \s-1BOM,\s0 or
when option \f(CW\*(C`\-m\*(C'\fR is used.
.SS "Unicode examples"
.IX Subsection "Unicode examples"
Convert from Windows \s-1UTF\-16 \s0(with \s-1BOM\s0) ta Unix \s-1UTF\-8\s0
.PP
.Vb 1
\&    dos2unix \-n in.txt out.txt
.Ve
.PP
Convert from Windows \s-1UTF\-16 \s0(without \s-1BOM\s0) ta Unix \s-1UTF\-8\s0
.PP
.Vb 1
\&    iconv \-f UTF\-16 \-t UTF\-8 in.txt | dos2unix > out.txt
.Ve
.PP
Convert from Unix \s-1UTF\-8\s0 ta Windows \s-1UTF\-8\s0 wit \s-1BOM\s0
.PP
.Vb 1
\&    unix2dos \-m \-n in.txt out.txt
.Ve
.PP
Convert from Unix \s-1UTF\-8\s0 ta Windows \s-1UTF\-16\s0
.PP
.Vb 1
\&    unix2dos < in.txt | iconv \-f UTF\-8 \-t UTF\-16 > out.txt
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Read input from 'stdin' n' write output ta 'stdout'.
.PP
.Vb 2
\&    dos2unix
\&    dos2unix \-l \-c mac
.Ve
.PP
Convert n' replace a.txt. Convert n' replace b.txt.
.PP
.Vb 2
\&    dos2unix a.txt b.txt
\&    dos2unix \-o a.txt b.txt
.Ve
.PP
Convert n' replace a.txt up in ascii conversion mode.
.PP
.Vb 1
\&    dos2unix a.txt
.Ve
.PP
Convert n' replace a.txt up in ascii conversion mode.
Convert n' replace b.txt up in 7bit conversion mode.
.PP
.Vb 3
\&    dos2unix a.txt \-c 7bit b.txt
\&    dos2unix \-c ascii a.txt \-c 7bit b.txt
\&    dos2unix \-ascii a.txt \-7 b.txt
.Ve
.PP
Convert a.txt from Mac ta Unix format.
.PP
.Vb 2
\&    dos2unix \-c mac a.txt
\&    mac2unix a.txt
.Ve
.PP
Convert a.txt from Unix ta Mac format.
.PP
.Vb 2
\&    unix2dos \-c mac a.txt
\&    unix2mac a.txt
.Ve
.PP
Convert n' replace a.txt while keepin original gangsta date stamp.
.PP
.Vb 2
\&    dos2unix \-k a.txt
\&    dos2unix \-k \-o a.txt
.Ve
.PP
Convert a.txt n' write ta e.txt.
.PP
.Vb 1
\&    dos2unix \-n a.txt e.txt
.Ve
.PP
Convert a.txt n' write ta e.txt, keep date stamp of e.txt same as a.txt.
.PP
.Vb 1
\&    dos2unix \-k \-n a.txt e.txt
.Ve
.PP
Convert n' replace a.txt. Convert b.txt n' write ta e.txt.
.PP
.Vb 2
\&    dos2unix a.txt \-n b.txt e.txt
\&    dos2unix \-o a.txt \-n b.txt e.txt
.Ve
.PP
Convert c.txt n' write ta e.txt. Convert n' replace a.txt.
Convert n' replace b.txt. Convert d.txt n' write ta f.txt.
.PP
.Vb 1
\&    dos2unix \-n c.txt e.txt \-o a.txt b.txt \-n d.txt f.txt
.Ve
.SH "RECURSIVE CONVERSION"
.IX Header "RECURSIVE CONVERSION"
Use dos2unix up in combination wit tha \fIfind\fR\|(1) n' \fIxargs\fR\|(1) commandz to
recursively convert text filez up in a gangbangin' finger-lickin' directory tree structure. For instizzle to
convert all .txt filez up in tha directory tree under tha current directory type:
.PP
.Vb 1
\&    find . \-name *.txt |xargs dos2unix
.Ve
.SH "LOCALIZATION"
.IX Header "LOCALIZATION"
.IP "\fB\s-1LANG\s0\fR" 4
.IX Item "LANG"
Da primary language is selected wit tha environment variable \s-1LANG.\s0 Da \s-1LANG\s0
variable consists outta nuff muthafuckin parts, n' you can put dat on yo' toast. Da first part is up in lil' small-ass lettas the
language code. Da second is optionizzle n' is tha ghetto code up in capital
letters, preceded wit a underscore. There be also a optionizzle third part:
characta encoding, preceded wit a thugged-out dot fo' realz. A few examplez fo' \s-1POSIX\s0 standard type
shells:
.Sp
.Vb 7
\&    export LANG=nl               Dutch
\&    export LANG=nl_NL            Dutch, Da Netherlands
\&    export LANG=nl_BE            Dutch, Belgium
\&    export LANG=es_ES            Spanish, Spain
\&    export LANG=es_MX            Spanish, Mexico
\&    export LANG=en_US.iso88591   Gangsta, USA, Latin\-1 encoding
\&    export LANG=en_GB.UTF\-8      Gangsta, UK, UTF\-8 encoding
.Ve
.Sp
For a cold-ass lil complete list of language n' ghetto codes peep tha gettext manual:
<http://www.gnu.org/software/gettext/manual/gettext.html#Language\-Codes>
.Sp
On Unix systems you can use ta command \fIlocale\fR\|(1) ta git locale specific
information.
.IP "\fB\s-1LANGUAGE\s0\fR" 4
.IX Item "LANGUAGE"
With tha \s-1LANGUAGE\s0 environment variable you can specify a prioritizzle list of
languages, separated by colons. Dos2unix gives preference ta \s-1LANGUAGE\s0 over \s-1LANG.\s0
For instance, first Dutch n' then German: \f(CW\*(C`LANGUAGE=nl:de\*(C'\fR. Yo ass gotta first
enable localization, by settin \s-1LANG \s0(or \s-1LC_ALL\s0) ta a value other than
\&\*(L"C\*(R", before you can bust a language prioritizzle list all up in tha \s-1LANGUAGE\s0
variable. Right back up in yo muthafuckin ass. See also tha gettext manual:
<http://www.gnu.org/software/gettext/manual/gettext.html#The\-LANGUAGE\-variable>
.Sp
If you select a language which aint available yo big-ass booty is ghon git the
standard Gangsta lyrics.
.IP "\fB\s-1DOS2UNIX_LOCALEDIR\s0\fR" 4
.IX Item "DOS2UNIX_LOCALEDIR"
With tha environment variable \s-1DOS2UNIX_LOCALEDIR\s0 tha \s-1LOCALEDIR\s0 set
durin compilation can be overruled. Y'all KNOW dat shit, muthafucka! \s-1LOCALEDIR\s0 is used ta find the
language files. Da \s-1GNU\s0 default value is \f(CW\*(C`/usr/local/share/locale\*(C'\fR.
Option \fB\-\-version\fR will display tha \s-1LOCALEDIR\s0 dat is used.
.Sp
Example (\s-1POSIX\s0 shell):
.Sp
.Vb 1
\&    export DOS2UNIX_LOCALEDIR=$HOME/share/locale
.Ve
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
On success, zero is returned. Y'all KNOW dat shit, muthafucka!  When a system error occurs tha last system error will be
returned. Y'all KNOW dat shit, muthafucka! For other errors 1 is returned.
.PP
Da return value be always zero up in on tha down-low mode, except when wack command-line options
are used.
.SH "STANDARDS"
.IX Header "STANDARDS"
<http://en.wikipedia.org/wiki/Text_file>
.PP
<http://en.wikipedia.org/wiki/Carriage_return>
.PP
<http://en.wikipedia.org/wiki/Newline>
.PP
<http://en.wikipedia.org/wiki/Unicode>
.SH "AUTHORS"
.IX Header "AUTHORS"
Benjamin Lin \- <blin@socs.uts.edu.au>
Bernd Johannes Wuebben (mac2unix mode) \- <wuebben@kde.org>,
Christian Wurll (add extra newline) \- <wurll@ira.uka.de>,
Erwin Waterlander \- <waterlan@xs4all.nl> (Maintainer)
.PP
Project page: <http://waterlan.home.xs4all.nl/dos2unix.html>
.PP
SourceForge page: <http://sourceforge.net/projects/dos2unix/>
.PP
Freecode: <http://freecode.com/projects/dos2unix>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIfile\fR\|(1)
\&\fIfind\fR\|(1)
\&\fIiconv\fR\|(1)
\&\fIlocale\fR\|(1)
\&\fIxargs\fR\|(1)
