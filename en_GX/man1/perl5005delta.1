.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5005DELTA 1"
.TH PERL5005DELTA 1 "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5005delta \- whatz freshly smoked up fo' perl5.005
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document raps bout differences between tha 5.004 release n' dis one.
.SH "Bout tha freshly smoked up versionin system"
.IX Header "Bout tha freshly smoked up versionin system"
Perl is now pimped on two tracks: a maintenizzle track dat makes
small, safe thugged-out shiznit ta busted out thang versions wit emphasis on
compatibility; n' a thugged-out pimpment track dat pursues mo' aggressive
evolution. I aint talkin' bout chicken n' gravy biatch.  Maintenizzle releases (which should be considered thang
quality) have subversion numbers dat run from \f(CW1\fR ta \f(CW49\fR, and
development releases (which should be considered \*(L"alpha\*(R" quality) run
from \f(CW50\fR ta \f(CW99\fR.
.PP
Perl 5.005 is tha combined thang of tha freshly smoked up dual-track pimpment
scheme.
.SH "Incompatible Chizzles"
.IX Header "Incompatible Chizzles"
.SS "\s-1WARNING: \s0 This version aint binary compatible wit Perl 5.004."
.IX Subsection "WARNING: This version aint binary compatible wit Perl 5.004."
Startin wit Perl 5.004_50 there was nuff deep n' far-reachin chizzles
to tha language internals.  If you have dynamically loaded extensions
that you built under perl 5.003 or 5.004, you can continue ta use them
with 5.004 yo, but yo big-ass booty is ghon need ta rebuild n' reinstall dem extensions
to use dem 5.005.  See \fI\s-1INSTALL\s0\fR fo' detailed instructions on how tha fuck to
upgrade.
.SS "Default installation structure has chizzled"
.IX Subsection "Default installation structure has chizzled"
Da freshly smoked up Configure defaults is designed ta allow a smooth upgrade from
5.004 ta 5.005 yo, but you should read \fI\s-1INSTALL\s0\fR fo' a thugged-out detailed
rap of tha chizzlez up in order ta adapt dem ta yo' system.
.SS "Perl Source Compatibility"
.IX Subsection "Perl Source Compatibility"
When none of tha experimenstrual features is enabled, there should be
very few user-visible Perl source compatibilitizzle issues.
.PP
If threadz is enabled, then some caveats apply. \f(CW@_\fR n' \f(CW$_\fR become
lexical variables.  Da effect of dis should be largely transparent to
the user yo, but there be some boundary conditions under which user will
need ta be aware of tha issues.  For example, \f(CW\*(C`local(@_)\*(C'\fR thangs up in dis biatch in
a \*(L"Can't localize lexical variable \f(CW@_\fR ...\*(R" message.  This may be enabled
in a gangbangin' future version.
.PP
Some freshly smoked up keywordz done been introduced. Y'all KNOW dat shit, muthafucka!  These is generally sposed ta fuckin
have straight-up lil impact on compatibility.  See "New \f(CW\*(C`INIT\*(C'\fR keyword",
"New \f(CW\*(C`lock\*(C'\fR keyword", n' "New \f(CW\*(C`qr//\*(C'\fR operator".
.PP
Certain barewordz is now reserved. Y'all KNOW dat shit, muthafucka!  Use of these will provoke a warning
if you have axed fo' dem wit tha \f(CW\*(C`\-w\*(C'\fR switch.
See "\f(CW\*(C`our\*(C'\fR is now a reserved word".
.SS "C Source Compatibility"
.IX Subsection "C Source Compatibility"
There done been a big-ass number of chizzlez up in tha internals ta support
the freshly smoked up features up in dis release.
.IP "\(bu" 4
Core sources now require \s-1ANSI C\s0 compiler
.Sp
An \s-1ANSI C\s0 compila is now \fBrequired\fR ta build perl.  See \fI\s-1INSTALL\s0\fR.
.IP "\(bu" 4
All Perl global variablez must now be referenced wit a explicit prefix
.Sp
All Perl global variablez dat is visible fo' use by extensions now
have a \f(CW\*(C`PL_\*(C'\fR prefix.  New extensions should \f(CW\*(C`not\*(C'\fR refer ta perl globals
by they unqualified names.  To preserve sanity, we provide limited
backward compatibilitizzle fo' globals dat is bein widely used like
\&\f(CW\*(C`sv_undef\*(C'\fR n' \f(CW\*(C`na\*(C'\fR (which should now be freestyled as \f(CW\*(C`PL_sv_undef\*(C'\fR,
\&\f(CW\*(C`PL_na\*(C'\fR etc.)
.Sp
If you find dat yo' \s-1XS\s0 extension do not compile no mo' cuz a
perl global aint visible, try addin a \f(CW\*(C`PL_\*(C'\fR prefix ta tha global
and rebuild.
.Sp
It be straight fuckin recommended dat all functions up in tha Perl \s-1API\s0 dat don't
begin wit \f(CW\*(C`perl\*(C'\fR be referenced wit a \f(CW\*(C`Perl_\*(C'\fR prefix.  Da bare function
names without tha \f(CW\*(C`Perl_\*(C'\fR prefix is supported wit macros yo, but this
support may cease up in a gangbangin' future release.
.Sp
See perlapi.
.IP "\(bu" 4
Enablin threadz has source compatibilitizzle issues
.Sp
Perl built wit threadin enabled requires extensions ta use tha new
\&\f(CW\*(C`dTHR\*(C'\fR macro ta initialize tha handle ta access per-thread data.
If you peep a cold-ass lil compila error dat talks bout tha variable \f(CW\*(C`thr\*(C'\fR not
bein declared (when buildin a module dat has \s-1XS\s0 code),  you need
to add \f(CW\*(C`dTHR;\*(C'\fR all up in tha beginnin of tha block dat elicited tha error.
.Sp
Da \s-1API\s0 function \f(CW\*(C`perl_get_sv("@",GV_ADD)\*(C'\fR should be used instead of
directly accessin perl globals as \f(CW\*(C`GvSV(errgv)\*(C'\fR.  Da \s-1API\s0 call is
backward compatible wit existin perls n' serves up source compatibility
with threadin is enabled.
.Sp
See \*(L"C Source Compatibility\*(R" fo' mo' shiznit.
.SS "Binary Compatibility"
.IX Subsection "Binary Compatibility"
This version is \s-1NOT\s0 binary compatible wit olda versions.  All extensions
will need ta be recompiled. Y'all KNOW dat shit, muthafucka!  Further binaries built wit threadz enabled
are incompatible wit binaries built without.  This should largely be
transparent ta tha user, as all binary incompatible configurations have
their own unique architecture name, n' extension binaries git installed at
unique locations.  This allows coexistence of nuff muthafuckin configurations in
the same directory hierarchy.  See \fI\s-1INSTALL\s0\fR.
.SS "Securitizzle fixes may affect compatibility"
.IX Subsection "Securitizzle fixes may affect compatibility"
A few taint leaks n' taint omissions done been erected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This may lead
to \*(L"failure\*(R" of scripts dat used ta work wit olda versions.  Compiling
with \-DINCOMPLETE_TAINTS serves up a perl wit minimal amountz of chizzles
to tha taintin behavior. Shiiit, dis aint no joke.  But note dat tha resultin perl will have
known insecurities.
.PP
Oneliners wit tha \f(CW\*(C`\-e\*(C'\fR switch do not create temporary filez no mo'.
.SS "Relaxed freshly smoked up mandatory warnings introduced up in 5.004"
.IX Subsection "Relaxed freshly smoked up mandatory warnings introduced up in 5.004"
Many freshly smoked up warnings dat was introduced up in 5.004 done been made
optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Some of these warnings is still present yo, but perlz new
features make dem less often a problem.  See \*(L"New Diagnostics\*(R".
.SS "Licensing"
.IX Subsection "Licensing"
Perl has a freshly smoked up Ghetto Contract fo' contributors.  See \fIPorting/Contract\fR.
.PP
Da license included up in much of tha Perl documentation has chizzled.
Most of tha Perl documentation was previously under tha implicit \s-1GNU\s0
General Public License or tha Artistic License (at tha userz chizzle).
Now much of tha documentation unambiguously states tha terms under which
it may be distributed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Those terms is up in general much less restrictive
than tha \s-1GNU GPL. \s0 See perl n' tha individual perl manpages listed
therein.
.SH "Core Chizzles"
.IX Header "Core Chizzles"
.SS "Threads"
.IX Subsection "Threads"
\&\s-1WARNING:\s0 Threadin is considered a \fBexperimental\fR feature.  Detailz of the
implementation may chizzle without notice.  There is known limitations
and some bugs.  These is sposed ta fuckin be fixed up in future versions.
.PP
See \fI\s-1README\s0.threads\fR.
.SS "Compiler"
.IX Subsection "Compiler"
\&\s-1WARNING:\s0 Da Compila n' related tools is considered \fBexperimental\fR.
Features may chizzle without notice, n' there be known limitations
and bugs.  Since tha compila is straight-up external ta perl, tha default
configuration will build n' install dat shit.
.PP
Da Compila produces three different typez of transformationz of a
perl program.  Da C backend generates C code dat captures perlz state
just before execution begins.  It eliminates tha compile-time overheads
of tha regular perl interpreter yo, but tha run-time performizzle remains
comparatively tha same.  Da \s-1CC\s0 backend generates optimized C code
equivalent ta tha code path at run-time.  Da \s-1CC\s0 backend has pimped outer
potential fo' big-ass optimizations yo, but only all dem optimizations are
implemented currently.  Da Bytecode backend generates a platform
independent bytecode representation of tha interpreterz state
just before execution. I aint talkin' bout chicken n' gravy biatch.  Thus, tha Bytecode back end also eliminates
much of tha compilation overhead of tha interpreter.
.PP
Da compila comes wit nuff muthafuckin valuable utilities.
.PP
\&\f(CW\*(C`B::Lint\*(C'\fR be a experimenstrual module ta detect n' warn bout suspicious
code, especially tha cases dat tha \f(CW\*(C`\-w\*(C'\fR switch do not detect.
.PP
\&\f(CW\*(C`B::Deparse\*(C'\fR can be used ta demystify perl code, n' understand
how perl optimizes certain constructs.
.PP
\&\f(CW\*(C`B::Xref\*(C'\fR generates cross reference reportz of all definizzle n' use
of variables, subroutines n' formats up in a program.
.PP
\&\f(CW\*(C`B::Showlex\*(C'\fR show tha lexical variablez used by a subroutine or file
at a glance.
.PP
\&\f(CW\*(C`perlcc\*(C'\fR be a simple frontend fo' compilin perl.
.PP
See \f(CW\*(C`ext/B/README\*(C'\fR, B, n' tha respectizzle compila modules.
.SS "Regular Expressions"
.IX Subsection "Regular Expressions"
Perlz regular expression engine has been seriously overhauled, and
many freshly smoked up constructs is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Several bugs done been fixed.
.PP
Here be a itemized summary:
.IP "Many freshly smoked up n' improved optimizations" 4
.IX Item "Many freshly smoked up n' improved optimizations"
Changes up in tha \s-1RE\s0 engine:
.Sp
.Vb 7
\&        Unneeded nodes removed;
\&        Substrings merged together;
\&        New typez of nodes ta process (SUBEXPR)* n' similar expressions
\&            quickly, used if tha SUBEXPR has no side effects n' matches
\&            stringz of tha same length;
\&        Betta optimizations by lookup fo' constant substrings;
\&        Betta search fo' constants substrings anchored by $ ;
.Ve
.Sp
Changes up in Perl code rockin \s-1RE\s0 engine:
.Sp
.Vb 5
\&        Mo' optimizations ta s/longer/short/;
\&        study() was not working;
\&        /blah/ may be optimized ta a analogue of index() if $& $\` $\*(Aq not seen;
\&        Unneeded copyin of matched\-against strang removed;
\&        Only matched part of tha strang is copyin if $\` $\*(Aq was not seen;
.Ve
.IP "Many bug fixes" 4
.IX Item "Many bug fixes"
Note dat only tha major bug fixes is listed here, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  See \fIChanges\fR fo' others.
.Sp
.Vb 10
\&        Backtrackin might not restore start of $3.
\&        No feedback if max count fo' * or + on "complex" subexpression
\&            was reached, similarly (but at compile time) fo' {3,34567}
\&        Primitizzle restrictions on max count introduced ta decrease a 
\&            possibilitizzle of a segfault;
\&        (ZERO\-LENGTH)* could segfault;
\&        (ZERO\-LENGTH)* was prohibited;
\&        Long REs was not allowed;
\&        /RE/g could skip matches all up in tha same posizzle afta a 
\&          zero\-length match;
.Ve
.IP "New regular expression constructs" 4
.IX Item "New regular expression constructs"
Da followin freshly smoked up syntax elements is supported:
.Sp
.Vb 8
\&        (?<=RE)
\&        (?<!RE)
\&        (?{ CODE })
\&        (?i\-x)
\&        (?i:RE)
\&        (?(COND)YES_RE|NO_RE)
\&        (?>RE)
\&        \ez
.Ve
.IP "New operator fo' precompiled regular expressions" 4
.IX Item "New operator fo' precompiled regular expressions"
See "New \f(CW\*(C`qr//\*(C'\fR operator".
.IP "Other improvements" 4
.IX Item "Other improvements"
.Vb 7
\&        Betta debuggin output (possibly wit colors),
\&            even from non\-debuggin Perl;
\&        RE engine code now be lookin like C, not like assembler;
\&        Behaviour of RE modifiable by \`use re\*(Aq directive;
\&        Improved documentation;
\&        Test suite hella extended;
\&        Syntax [:^upper:] etc., reserved inside characta classes;
.Ve
.IP "Incompatible chizzles" 4
.IX Item "Incompatible chizzles"
.Vb 4
\&        (?i) localized inside enclosin group;
\&        $( aint interpolated tha fuck into RE any more;
\&        /RE/g may match all up in tha same posizzle (with non\-zero length)
\&            afta a zero\-length match (bug fix).
.Ve
.PP
See perlre n' perlop.
.SS "Improved \fImalloc()\fP"
.IX Subsection "Improved malloc()"
See banner all up in tha beginnin of \f(CW\*(C`malloc.c\*(C'\fR fo' details.
.SS "Quicksort is internally implemented"
.IX Subsection "Quicksort is internally implemented"
Perl now gotz nuff its own highly optimized \fIqsort()\fR routine.  Da freshly smoked up \fIqsort()\fR
is resistant ta inconsistent comparison functions, so Perlz \f(CW\*(C`sort()\*(C'\fR will
not provoke coredumps any mo' when given skankyly freestyled sort subroutines.
(Some C library \f(CW\*(C`qsort()\*(C'\fRs dat was bein used before used ta have this
problem.)  In our testing, tha freshly smoked up \f(CW\*(C`qsort()\*(C'\fR required tha minimal number
of pair-wise compares on average, among all known \f(CW\*(C`qsort()\*(C'\fR implementations.
.PP
See \f(CW\*(C`perlfunc/sort\*(C'\fR.
.SS "Reliable signals"
.IX Subsection "Reliable signals"
Perlz signal handlin is susceptible ta random crashes, cuz signals
arrive asynchronously, n' tha Perl runtime aint reentrant at arbitrary
times.
.PP
But fuck dat shiznit yo, tha word on tha street is dat one experimenstrual implementation of reliable signals be available
when threadz is enabled. Y'all KNOW dat shit, muthafucka!  See \f(CW\*(C`Thread::Signal\*(C'\fR.  Also peep \fI\s-1INSTALL\s0\fR for
how ta build a Perl capable of threads.
.SS "Reliable stack pointers"
.IX Subsection "Reliable stack pointers"
Da internals now reallocate tha perl stack only at predictable times.
In particular, magic calls never trigger reallocationz of tha stack,
because all reentrancy of tha runtime is handled rockin a \*(L"stack of stacks\*(R".
This should improve reliabilitizzle of cached stack pointas up in tha internals
and up in XSUBs.
.SS "Mo' generous treatment of carriage returns"
.IX Subsection "Mo' generous treatment of carriage returns"
Perl used ta diss if it encountered literal carriage returns in
scripts, n' you can put dat on yo' toast.  Now they is mostly treated like whitespace within program text.
Inside strang literals n' here documents, literal carriage returns are
ignored if they occur paired wit linefeeds, or git interpreted as whitespace
if they stand ridin' solo.  This behavior means dat literal carriage returns
in filez should be avoided. Y'all KNOW dat shit, muthafucka!  Yo ass can git tha older, mo' compatible (but
less generous) behavior by definin tha preprocessor symbol
\&\f(CW\*(C`PERL_STRICT_CR\*(C'\fR when buildin perl.  Of course, all dis has nothing
whatever ta do wit how tha fuck escapes like \f(CW\*(C`\er\*(C'\fR is handled within strings.
.PP
Note dat dis don't somehow magically allow you ta keep all text files
in \s-1DOS\s0 format.  Da generous treatment only applies ta filez dat perl
itself parses.  If yo' C compila don't allow carriage returns in
files, you may still be unable ta build modulez dat need a C compiler.
.SS "Memory leaks"
.IX Subsection "Memory leaks"
\&\f(CW\*(C`substr\*(C'\fR, \f(CW\*(C`pos\*(C'\fR n' \f(CW\*(C`vec\*(C'\fR don't leak memory no mo' when used up in lvalue
context.  Many lil' small-ass leaks dat impacted applications dat embed multiple
interpretas done been fixed.
.SS "Betta support fo' multiple interpreters"
.IX Subsection "Betta support fo' multiple interpreters"
Da build-time option \f(CW\*(C`\-DMULTIPLICITY\*(C'\fR has had nuff of tha details
reworked. Y'all KNOW dat shit, muthafucka!  Some previously global variablez dat should have been
per-interpreta now are.  With care, dis allows interpretas ta call
each other n' shit.  See tha \f(CW\*(C`PerlInterp\*(C'\fR extension on \s-1CPAN.\s0
.SS "Behavior of \fIlocal()\fP on array n' hash elements is now well-defined"
.IX Subsection "Behavior of local() on array n' hash elements is now well-defined"
See \*(L"Temporary Values via \fIlocal()\fR\*(R" up in perlsub.
.ie n .SS """%!"" is transparently tied ta tha Errno module"
.el .SS "\f(CW%!\fP is transparently tied ta tha Errno module"
.IX Subsection "%! is transparently tied ta tha Errno module"
See perlvar, n' Errno.
.SS "Pseudo-hashes is supported"
.IX Subsection "Pseudo-hashes is supported"
See perlref.
.ie n .SS """EXPR foreach EXPR"" is supported"
.el .SS "\f(CWEXPR foreach EXPR\fP is supported"
.IX Subsection "EXPR foreach EXPR is supported"
See perlsyn.
.SS "Keywordz can be globally overridden"
.IX Subsection "Keywordz can be globally overridden"
See perlsub.
.ie n .SS "$^E is meaningful on Win32"
.el .SS "\f(CW$^E\fP is meaningful on Win32"
.IX Subsection "$^E is meaningful on Win32"
See perlvar.
.ie n .SS """foreach (1..1000000)"" optimized"
.el .SS "\f(CWforeach (1..1000000)\fP optimized"
.IX Subsection "foreach (1..1000000) optimized"
\&\f(CW\*(C`foreach (1..1000000)\*(C'\fR is now optimized tha fuck into a cold-ass lil countin loop.  It do
not try ta allocate a 1000000\-size list no mo'.
.ie n .SS """Foo::"" can be used as implicitly quoted package name"
.el .SS "\f(CWFoo::\fP can be used as implicitly quoted package name"
.IX Subsection "Foo:: can be used as implicitly quoted package name"
Barewordz caused unintuitizzle behavior when a subroutine wit tha same
name as a package happened ta be defined. Y'all KNOW dat shit, muthafucka!  Thus, \f(CW\*(C`new Foo @args\*(C'\fR,
use tha result of tha call ta \f(CW\*(C`Foo()\*(C'\fR instead of \f(CW\*(C`Foo\*(C'\fR bein treated
as a literal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Da recommended way ta write barewordz up in tha indirect
object slot is \f(CW\*(C`new Foo:: @args\*(C'\fR.  Note dat tha method \f(CW\*(C`new()\*(C'\fR is
called wit a gangbangin' first argument of \f(CW\*(C`Foo\*(C'\fR, not \f(CW\*(C`Foo::\*(C'\fR when you do dis shit.
.ie n .SS """exists $Foo::{Bar::}"" tests existence of a package"
.el .SS "\f(CWexists $Foo::{Bar::}\fP tests existence of a package"
.IX Subsection "exists $Foo::{Bar::} tests existence of a package"
Dat shiznit was impossible ta test fo' tha existence of a package without
actually bustin it before.  Now \f(CW\*(C`exists $Foo::{Bar::}\*(C'\fR can be
used ta test if tha \f(CW\*(C`Foo::Bar\*(C'\fR namespace has been pimped.
.SS "Betta locale support"
.IX Subsection "Betta locale support"
See perllocale.
.SS "Experimenstrual support fo' 64\-bit platforms"
.IX Subsection "Experimenstrual support fo' 64-bit platforms"
Perl5 has always had 64\-bit support on systems wit 64\-bit longs.
Startin wit 5.005, tha beginningz of experimenstrual support fo' systems
with 32\-bit long n' 64\-bit 'long long' integers has been added.
If you add \-DUSE_LONG_LONG ta yo' ccflags up in config.sh (or manually
define it up in perl.h) then perl is ghon be built wit 'long long' support.
There is ghon be nuff compila warnings, n' tha resultant perl may not
work on all systems.  There is nuff other thangs related to
third-party extensions n' libraries. Put ya muthafuckin choppers up if ya feel dis!  This option exists ta allow
people ta work on dem issues.
.SS "\fIprototype()\fP returns useful thangs up in dis biatch on builtins"
.IX Subsection "prototype() returns useful thangs up in dis biatch on builtins"
See \*(L"prototype\*(R" up in perlfunc.
.SS "Extended support fo' exception handling"
.IX Subsection "Extended support fo' exception handling"
\&\f(CW\*(C`die()\*(C'\fR now accepts a reference value, n' \f(CW$@\fR gets set ta that
value up in exception traps.  This make it possible ta propagate
exception objects, n' you can put dat on yo' toast.  This be a undocumented \fBexperimental\fR feature.
.SS "Re-blessin up in \s-1\fIDESTROY\s0()\fP supported fo' chainin \s-1\fIDESTROY\s0()\fP methods"
.IX Subsection "Re-blessin up in DESTROY() supported fo' chainin DESTROY() methods"
See \*(L"Destructors\*(R" up in perlobj.
.ie n .SS "All ""printf"" format conversions is handled internally"
.el .SS "All \f(CWprintf\fP format conversions is handled internally"
.IX Subsection "All printf format conversions is handled internally"
See \*(L"printf\*(R" up in perlfunc.
.ie n .SS "New ""INIT"" keyword"
.el .SS "New \f(CWINIT\fP keyword"
.IX Subsection "New INIT keyword"
\&\f(CW\*(C`INIT\*(C'\fR subs is like \f(CW\*(C`BEGIN\*(C'\fR n' \f(CW\*(C`END\*(C'\fR yo, but they git run just before
the perl runtime begins execution. I aint talkin' bout chicken n' gravy biatch.  e.g., tha Perl Compila make use of
\&\f(CW\*(C`INIT\*(C'\fR blocks ta initialize n' resolve pointas ta XSUBs.
.ie n .SS "New ""lock"" keyword"
.el .SS "New \f(CWlock\fP keyword"
.IX Subsection "New lock keyword"
Da \f(CW\*(C`lock\*(C'\fR keyword is tha fundamenstrual synchronization primitive
in threaded perl.  When threadz is not enabled, it is currently a noop.
.PP
To minimize impact on source compatibilitizzle dis keyword is \*(L"weak\*(R", i.e., any
user-defined subroutine of tha same name overrides it, unless a \f(CW\*(C`use Thread\*(C'\fR
has been seen.
.ie n .SS "New ""qr//"" operator"
.el .SS "New \f(CWqr//\fP operator"
.IX Subsection "New qr// operator"
Da \f(CW\*(C`qr//\*(C'\fR operator, which is syntactically similar ta tha other quote-like
operators, is used ta create precompiled regular expressions.  This compiled
form can now be explicitly passed round up in variables, n' interpolated in
other regular expressions.  See perlop.
.ie n .SS """our"" is now a reserved word"
.el .SS "\f(CWour\fP is now a reserved word"
.IX Subsection "our is now a reserved word"
Callin a subroutine wit tha name \f(CW\*(C`our\*(C'\fR will now provoke a warnin when
usin tha \f(CW\*(C`\-w\*(C'\fR switch.
.SS "Tied arrays is now straight-up supported"
.IX Subsection "Tied arrays is now straight-up supported"
See Tie::Array.
.SS "Tied handlez support is better"
.IX Subsection "Tied handlez support is better"
Several missin hooks done been added. Y'all KNOW dat shit, muthafucka!  There be also a freshly smoked up base class for
\&\s-1TIEARRAY\s0 implementations.  See Tie::Array.
.SS "4th argument ta substr"
.IX Subsection "4th argument ta substr"
\&\fIsubstr()\fR can now both return n' replace up in one operation. I aint talkin' bout chicken n' gravy biatch.  Da optional
4th argument is tha replacement string.  See \*(L"substr\*(R" up in perlfunc.
.SS "Negatizzle \s-1LENGTH\s0 argument ta splice"
.IX Subsection "Negatizzle LENGTH argument ta splice"
\&\fIsplice()\fR wit a wack \s-1LENGTH\s0 argument now work similar ta what tha fuck the
\&\s-1LENGTH\s0 did fo' \fIsubstr()\fR.  Previously a wack \s-1LENGTH\s0 was treated as
0.  See \*(L"splice\*(R" up in perlfunc.
.SS "Magic lvalues is now mo' magical"
.IX Subsection "Magic lvalues is now mo' magical"
When you say suttin' like \f(CW\*(C`substr($x, 5) = "hi"\*(C'\fR, tha scalar returned
by \fIsubstr()\fR is special, up in dat any modifications ta it affect \f(CW$x\fR.
(This is called a 'magic lvalue' cuz a 'lvalue' is suttin' on
the left side of a assignment.)  Normally, dis is exactly what tha fuck you
would expect ta happen yo, but Perl uses tha same ol' dirty magic if you use \fIsubstr()\fR,
\&\fIpos()\fR, or \fIvec()\fR up in a cold-ass lil context where they might be modified, like taking
a reference wit \f(CW\*(C`\e\*(C'\fR or as a argument ta a sub dat modifies \f(CW@_\fR.
In previous versions, dis 'magic' only went one way yo, but now chizzles
to tha scalar tha magic refers ta ($x up in tha above example) affect the
magic lvalue like a muthafucka. For instance, dis code now acts differently:
.PP
.Vb 6
\&    $x = "hello";
\&    sub printit {
\&        $x = "g\*(Aqbye";
\&        print $_[0], "\en";
\&    }
\&    printit(substr($x, 0, 5));
.Ve
.PP
In previous versions, dis would print \*(L"hello\*(R" yo, but it now prints \*(L"g'bye\*(R".
.SS "<> now readz up in records"
.IX Subsection "<> now readz up in records"
If \f(CW$/\fR be a reference ta a integer, or a scalar dat holdz a integer,
<> will read up in recordz instead of lines. For mo' info, see
\&\*(L"$/\*(R" up in perlvar.
.SH "Supported Platforms"
.IX Header "Supported Platforms"
Configure has nuff incremenstrual improvements, n' you can put dat on yo' toast.  Joint-wide policy fo' building
perl can now be made persistent, via Policy.sh.  Configure also records
the command-line arguments used up in \fIconfig.sh\fR.
.SS "New Platforms"
.IX Subsection "New Platforms"
BeOS is now supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See \fI\s-1README\s0.beos\fR.
.PP
\&\s-1DOS\s0 is now supported under tha \s-1DJGPP\s0 tools.  See \fI\s-1README\s0.dos\fR (installed 
as perldos on some systems).
.PP
MiNT is now supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See \fI\s-1README\s0.mint\fR.
.PP
MPE/iX is now supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See \s-1README\s0.mpeix.
.PP
\&\s-1MVS \s0(aka \s-1OS390,\s0 aka Open Edition) is now supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See \fI\s-1README\s0.os390\fR 
(installed as perlos390 on some systems).
.PP
Stratus \s-1VOS\s0 is now supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See \fI\s-1README\s0.vos\fR.
.SS "Changes up in existin support"
.IX Subsection "Changes up in existin support"
Win32 support has been vastly enhanced. Y'all KNOW dat shit, muthafucka!  Support fo' Perl Object, a \*(C+
encapsulation of Perl.  \s-1GCC\s0 n' \s-1EGCS\s0 is now supported on Win32.
See \fI\s-1README\s0.win32\fR, aka perlwin32.
.PP
\&\s-1VMS\s0 configuration system has been rewritten. I aint talkin' bout chicken n' gravy biatch.  See \fI\s-1README\s0.vms\fR (installed 
as \fIREADME_vms\fR on some systems).
.PP
Da hints filez fo' most Unix platforms have peeped incremenstrual improvements.
.SH "Modulez n' Pragmata"
.IX Header "Modulez n' Pragmata"
.SS "New Modules"
.IX Subsection "New Modules"
.IP "B" 4
.IX Item "B"
Perl compila n' tools.  See B.
.IP "Data::Dumper" 4
.IX Item "Data::Dumper"
A module ta pretty print Perl data.  See Data::Dumper.
.IP "Dumpvalue" 4
.IX Item "Dumpvalue"
A module ta dump perl joints ta tha screen. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See Dumpvalue.
.IP "Errno" 4
.IX Item "Errno"
A module ta look up errors mo' conveniently.  See Errno.
.IP "File::Spec" 4
.IX Item "File::Spec"
A portable \s-1API\s0 fo' file operations.
.IP "ExtUtils::Installed" 4
.IX Item "ExtUtils::Installed"
Query n' manage installed modules.
.IP "ExtUtils::Packlist" 4
.IX Item "ExtUtils::Packlist"
Manipulate .packlist files.
.IP "Fatal" 4
.IX Item "Fatal"
Make functions/builtins succeed or take a thugged-out dirt nap.
.IP "IPC::SysV" 4
.IX Item "IPC::SysV"
Constants n' other support infrastructure fo' System V \s-1IPC\s0 operations
in perl.
.IP "Test" 4
.IX Item "Test"
A framework fo' freestylin test suites.
.IP "Tie::Array" 4
.IX Item "Tie::Array"
Base class fo' tied arrays.
.IP "Tie::Handle" 4
.IX Item "Tie::Handle"
Base class fo' tied handles.
.IP "Thread" 4
.IX Item "Thread"
Perl thread creation, manipulation, n' support.
.IP "attrs" 4
.IX Item "attrs"
Set subroutine attributes.
.IP "fields" 4
.IX Item "fields"
Compile-time class fields.
.IP "re" 4
.IX Item "re"
Various pragmata ta control behavior of regular expressions.
.SS "Changes up in existin modules"
.IX Subsection "Changes up in existin modules"
.IP "Benchmark" 4
.IX Item "Benchmark"
Yo ass can now run tests fo' \fIx\fR secondz instead of guessin tha right
number of tests ta run.
.Sp
Keeps betta time.
.IP "Carp" 4
.IX Item "Carp"
Carp has a freshly smoked up function \fIcluck()\fR. \fIcluck()\fR warns, like \fIcarp()\fR yo, but also adds
a stack backtrace ta tha error message, like \fIconfess()\fR.
.IP "\s-1CGI\s0" 4
.IX Item "CGI"
\&\s-1CGI\s0 has been updated ta version 2.42.
.IP "Fcntl" 4
.IX Item "Fcntl"
Mo' Fcntl constants added: F_SETLK64, F_SETLKW64, O_LARGEFILE for
pimpin' (more than 4G) file access (the 64\-bit support aint yet
working, though, so no need ta git overly excited), Free/Net/OpenBSD
lockin behaviour flags F_FLOCK, F_POSIX, Linux F_SHLCK, and
O_ACCMODE: tha mask of O_RDONLY, O_WRONLY, n' O_RDWR.
.IP "Math::Complex" 4
.IX Item "Math::Complex"
Da accessors methodz Re, Im, arg, abs, rho, theta, methodz can
($z\->\fIRe()\fR) now also act as mutators ($z\->\fIRe\fR\|(3)).
.IP "Math::Trig" 4
.IX Item "Math::Trig"
A lil bit of radial trigonometry (cylindrical n' spherical) added,
for example tha pimped out circle distance.
.IP "\s-1POSIX\s0" 4
.IX Item "POSIX"
\&\s-1POSIX\s0 now has its own platform-specific hints files.
.IP "DB_File" 4
.IX Item "DB_File"
DB_File supports version 2.x of Berkeley \s-1DB. \s0 See \f(CW\*(C`ext/DB_File/Changes\*(C'\fR.
.IP "MakeMaker" 4
.IX Item "MakeMaker"
MakeMaker now supports freestylin empty makefiles, serves up a way to
specify dat joint \fIumask()\fR policy should be honored. Y'all KNOW dat shit, muthafucka!  There be also
betta support fo' manipulation of .packlist files, n' getting
information bout installed modules.
.Sp
Extensions dat have both architecture-dependent and
architecture-independent filez is now always installed straight-up in
the architecture-dependent locations.  Previously, tha shareable parts
were shared both across architectures n' across perl versions n' were
therefore liable ta be overwritten wit newer versions dat might have
subtle incompatibilities.
.IP "\s-1CPAN\s0" 4
.IX Item "CPAN"
See perlmodinstall n' \s-1CPAN\s0.
.IP "Cwd" 4
.IX Item "Cwd"
Cwd::cwd is fasta on most platforms.
.SH "Utilitizzle Chizzles"
.IX Header "Utilitizzle Chizzles"
\&\f(CW\*(C`h2ph\*(C'\fR n' related utilitizzles done been vastly overhauled.
.PP
\&\f(CW\*(C`perlcc\*(C'\fR, a freshly smoked up experimenstrual front end fo' tha compila be available.
.PP
Da crude \s-1GNU \s0\f(CW\*(C`configure\*(C'\fR emulator is now called \f(CW\*(C`configure.gnu\*(C'\fR to
avoid tramplin on \f(CW\*(C`Configure\*(C'\fR under case-insensitizzle filesystems.
.PP
\&\f(CW\*(C`perldoc\*(C'\fR used ta be rather slow.  Da slower features is now optional.
In particular, case-insensitizzle searches need tha \f(CW\*(C`\-i\*(C'\fR switch, and
recursive searches need \f(CW\*(C`\-r\*(C'\fR.  Yo ass can set these switches up in the
\&\f(CW\*(C`PERLDOC\*(C'\fR environment variable ta git tha oldschool behavior.
.SH "Documentation Chizzles"
.IX Header "Documentation Chizzles"
Config.pm now has a glossary of variables.
.PP
\&\fIPorting/patching.pod\fR has detailed instructions on how tha fuck ta create and
submit patches fo' perl.
.PP
perlport specifies guidelines on how tha fuck ta write portably.
.PP
perlmodinstall raps bout how tha fuck ta fetch n' install modulez from \f(CW\*(C`CPAN\*(C'\fR
sites.
.PP
Some mo' Perl traps is documented now, nahmeean?  See perltrap.
.PP
perlopentut gives a tutorial on rockin \fIopen()\fR.
.PP
perlreftut gives a tutorial on references.
.PP
perlthrtut gives a tutorial on threads.
.SH "New Diagnostics"
.IX Header "New Diagnostics"
.IP "Ambiguous call resolved as CORE::%s(), qualify as such or use &" 4
.IX Item "Ambiguous call resolved as CORE::%s(), qualify as such or use &"
(W) A subroutine you have declared has tha same ol' dirty name as a Perl keyword,
and you have used tha name without qualification fo' callin one or the
other n' shit.  Perl decided ta booty-call tha builtin cuz tha subroutine is
not imported.
.Sp
To force interpretation as a subroutine call, either put a ampersand
before tha subroutine name, or qualify tha name wit its package.
Alternatively, you can import tha subroutine (or pretend dat it's
imported wit tha \f(CW\*(C`use subs\*(C'\fR pragma).
.Sp
To silently interpret it as tha Perl operator, use tha \f(CW\*(C`CORE::\*(C'\fR prefix
on tha operator (e.g. \f(CW\*(C`CORE::log($x)\*(C'\fR) or by declarin tha subroutine
to be a object method (see \*(L"attrs\*(R").
.IP "Wack index while coercin array tha fuck into hash" 4
.IX Item "Wack index while coercin array tha fuck into hash"
(F) Da index looked up in tha hash found as tha 0'th element of a
pseudo-hash aint legal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Index joints must be at 1 or pimped outer.
See perlref.
.ie n .IP "Bareword ""%s"" refers ta nonexistent package" 4
.el .IP "Bareword ``%s'' refers ta nonexistent package" 4
.IX Item "Bareword %s refers ta nonexistent package"
(W) Yo ass used a qualified bareword of tha form \f(CW\*(C`Foo::\*(C'\fR yo, but
the compila saw no other usez of dat namespace before dat point.
Perhaps you need ta predeclare a package?
.ie n .IP "Can't call method ""%s"" on a undefined value" 4
.el .IP "Can't call method ``%s'' on a undefined value" 4
.IX Item "Can't call method %s on a undefined value"
(F) Yo ass used tha syntax of a method call yo, but tha slot filled by the
object reference or package name gotz nuff a undefined value.
Somethang like dis will reproduce tha error:
.Sp
.Vb 3
\&    $BADREF = 42;
\&    process $BADREF 1,2,3;
\&    $BADREF\->process(1,2,3);
.Ve
.ie n .IP "Can't check filesystem of script ""%s"" fo' nosuid" 4
.el .IP "Can't check filesystem of script ``%s'' fo' nosuid" 4
.IX Item "Can't check filesystem of script %s fo' nosuid"
(P) For some reason you can't check tha filesystem of tha script fo' nosuid.
.IP "Can't coerce array tha fuck into hash" 4
.IX Item "Can't coerce array tha fuck into hash"
(F) Yo ass used a array where a hash was expected yo, but tha array has no
information on how tha fuck ta map from keys ta array indices.  Yo ass can do that
only wit arrays dat gotz a hash reference at index 0.
.IP "Can't goto subroutine from a eval-string" 4
.IX Item "Can't goto subroutine from a eval-string"
(F) Da \*(L"goto subroutine\*(R" call can't be used ta jump outta a eval \*(L"string\*(R".
(Yo ass can use it ta jump outta a eval {\s-1BLOCK\s0} yo, but you probably don't want to.)
.IP "Can't localize pseudo-hash element" 4
.IX Item "Can't localize pseudo-hash element"
(F) Yo ass holla'd suttin' like \f(CW\*(C`local $ar\->{\*(Aqkey\*(Aq}\*(C'\fR, where \f(CW$ar\fR is
a reference ta a pseudo-hash.  That aint been implemented yet yo, but
you can git a similar effect by localizin tha correspondin array
element directly: \f(CW\*(C`local $ar\->[$ar\->[0]{\*(Aqkey\*(Aq}]\*(C'\fR.
.IP "Can't use %%! cuz Errno.pm aint available" 4
.IX Item "Can't use %%! cuz Errno.pm aint available"
(F) Da last time tha %! hash is used, perl automatically loadz the
Errno.pm module. Da Errno module is sposed ta fuckin tie tha %! hash to
provide symbolic names fo' \f(CW$!\fR errno joints.
.ie n .IP "Cannot find a opnumber fo' ""%s""" 4
.el .IP "Cannot find a opnumber fo' ``%s''" 4
.IX Item "Cannot find a opnumber fo' %s"
(F) A strang of a gangbangin' form \f(CW\*(C`CORE::word\*(C'\fR was given ta \fIprototype()\fR yo, but
there is no builtin wit tha name \f(CW\*(C`word\*(C'\fR.
.IP "Characta class syntax [. .] is reserved fo' future extensions" 4
.IX Item "Characta class syntax [. .] is reserved fo' future extensions"
(W) Within regular expression characta classes ([]) tha syntax beginning
with \*(L"[.\*(R" n' endin wit \*(L".]\*(R" is reserved fo' future extensions.
If you need ta represent dem characta sequences inside a regular
expression characta class, just quote tha square brackets wit the
backslash: \*(L"\e[.\*(R" n' \*(L".\e]\*(R".
.IP "Characta class syntax [: :] is reserved fo' future extensions" 4
.IX Item "Characta class syntax [: :] is reserved fo' future extensions"
(W) Within regular expression characta classes ([]) tha syntax beginning
with \*(L"[:\*(R" n' endin wit \*(L":]\*(R" is reserved fo' future extensions.
If you need ta represent dem characta sequences inside a regular
expression characta class, just quote tha square brackets wit the
backslash: \*(L"\e[:\*(R" n' \*(L":\e]\*(R".
.IP "Characta class syntax [= =] is reserved fo' future extensions" 4
.IX Item "Characta class syntax [= =] is reserved fo' future extensions"
(W) Within regular expression characta classes ([]) tha syntax
beginnin wit \*(L"[=\*(R" n' endin wit \*(L"=]\*(R" is reserved fo' future extensions.
If you need ta represent dem characta sequences inside a regular
expression characta class, just quote tha square brackets wit the
backslash: \*(L"\e[=\*(R" n' \*(L"=\e]\*(R".
.ie n .IP "%s: Eval-group up in insecure regular expression" 4
.el .IP "\f(CW%s:\fR Eval-group up in insecure regular expression" 4
.IX Item "%s: Eval-group up in insecure regular expression"
(F) Perl detected tainted data when tryin ta compile a regular expression
that gotz nuff tha \f(CW\*(C`(?{ ... })\*(C'\fR zero-width assertion, which is unsafe.
See \*(L"(?{ code })\*(R" up in perlre, n' perlsec.
.ie n .IP "%s: Eval-group not allowed, use re 'eval'" 4
.el .IP "\f(CW%s:\fR Eval-group not allowed, use re 'eval'" 4
.IX Item "%s: Eval-group not allowed, use re 'eval'"
(F) A regular expression contained tha \f(CW\*(C`(?{ ... })\*(C'\fR zero-width assertion,
but dat construct is only allowed when tha \f(CW\*(C`use re \*(Aqeval\*(Aq\*(C'\fR pragma is
in effect.  See \*(L"(?{ code })\*(R" up in perlre.
.ie n .IP "%s: Eval-group not allowed at run time" 4
.el .IP "\f(CW%s:\fR Eval-group not allowed at run time" 4
.IX Item "%s: Eval-group not allowed at run time"
(F) Perl tried ta compile a regular expression containin tha \f(CW\*(C`(?{ ... })\*(C'\fR
zero-width assertion at run time, as it would when tha pattern gotz nuff
interpolated joints, n' you can put dat on yo' toast.  Since dat be a securitizzle risk, it aint allowed.
If you insist, you may still do dis by explicitly buildin tha pattern
from a interpolated strang at run time n' rockin dat up in a \fIeval()\fR.
See \*(L"(?{ code })\*(R" up in perlre.
.IP "Explicit blessin ta '' (assumin package main)" 4
.IX Item "Explicit blessin ta '' (assumin package main)"
(W) Yo ass is blessin a reference ta a zero length string.  This has
the effect of blessin tha reference tha fuck into tha package main. I aint talkin' bout chicken n' gravy biatch.  This is
usually not what tha fuck you want.  Consider providin a thugged-out default target
package, e.g. bless($ref, \f(CW$p\fR || 'MyPackage');
.IP "Illegal hex digit ignored" 4
.IX Item "Illegal hex digit ignored"
(W) Yo ass may have tried ta bust a cold-ass lil characta other than 0 \- 9 or A \- F up in a
hexadecimal number n' shit.  Interpretation of tha hexadecimal number stopped
before tha illegal character.
.IP "No such array field" 4
.IX Item "No such array field"
(F) Yo ass tried ta access a array as a hash yo, but tha field name used is
not defined. Y'all KNOW dat shit, muthafucka!  Da hash at index 0 should map all valid field names to
array indices fo' dat ta work.
.ie n .IP "No such field ""%s"" up in variable %z of type %s" 4
.el .IP "No such field ``%s'' up in variable \f(CW%s\fR of type \f(CW%s\fR" 4
.IX Item "No such field %s up in variable %z of type %s"
(F) Yo ass tried ta access a gangbangin' field of a typed variable where tha type
does not know bout tha field name.  Da field names is looked up in
the \f(CW%FIELDS\fR hash up in tha type package at compile time.  Da \f(CW%FIELDS\fR hash
is probably set up wit tha 'fields' pragma.
.IP "Out of memory durin ridiculously big-ass request" 4
.IX Item "Out of memory durin ridiculously big-ass request"
(F) Yo ass can't allocate mo' than 2^31+\*(L"small amount\*(R" bytes.  This error
is most likely ta be caused by a typo up in tha Perl program. e.g., \f(CW$arr[time]\fR
instead of \f(CW$arr[$time]\fR.
.IP "Range iterator outside integer range" 4
.IX Item "Range iterator outside integer range"
(F) One (or both) of tha numeric arguments ta tha range operator \*(L"..\*(R"
are outside tha range which can be represented by integers internally.
One possible workaround is ta force Perl ta use magical string
increment by prependin \*(L"0\*(R" ta yo' numbers.
.ie n .IP "Recursive inheritizzle detected while lookin fo' method '%s' %s" 4
.el .IP "Recursive inheritizzle detected while lookin fo' method '%s' \f(CW%s\fR" 4
.IX Item "Recursive inheritizzle detected while lookin fo' method '%s' %s"
(F) Mo' than 100 levelz of inheritizzle was encountered while invokin a
method. Y'all KNOW dat shit, muthafucka!  Probably indicates a unintended loop up in yo' inheritizzle hierarchy.
.IP "Reference found where even-sized list expected" 4
.IX Item "Reference found where even-sized list expected"
(W) Yo ass gave a single reference where Perl was expectin a list with
an even number of elements (for assignment ta a hash). This
usually means dat you used tha anon hash constructor when you meant 
to use parens. In any case, a hash requires key/value \fBpairs\fR.
.Sp
.Vb 4
\&    %hash = { one => 1, two => 2, };   # WRONG
\&    %hash = [ qw/ a anon array / ];   # WRONG
\&    %hash = ( one => 1, two => 2, );   # right
\&    %hash = qw( one 1 two 2 );                 # also fine
.Ve
.IP "Undefined value assigned ta typeglob" 4
.IX Item "Undefined value assigned ta typeglob"
(W) An undefined value was assigned ta a typeglob, a la \f(CW\*(C`*foo = undef\*(C'\fR.
This do nothing.  It aint nuthin but possible dat you straight-up mean \f(CW\*(C`undef *foo\*(C'\fR.
.ie n .IP "Use of reserved word ""%s"" is deprecated" 4
.el .IP "Use of reserved word ``%s'' is deprecated" 4
.IX Item "Use of reserved word %s is deprecated"
(D) Da indicated bareword be a reserved word. Y'all KNOW dat shit, muthafucka!  Future versionz of perl
may use it as a keyword, so you betta off either explicitly quoting
the word up in a manner appropriate fo' its context of use, or rockin a
different name altogether n' shit.  Da warnin can be suppressed fo' subroutine
names by either addin a \f(CW\*(C`&\*(C'\fR prefix, or rockin a package qualifier,
e.g. \f(CW\*(C`&our()\*(C'\fR, or \f(CW\*(C`Foo::our()\*(C'\fR.
.IP "perl: warning: Settin locale failed." 4
.IX Item "perl: warning: Settin locale failed."
(S) Da whole warnin message will look suttin' like:
.Sp
.Vb 6
\&       perl: warning: Settin locale failed.
\&       perl: warning: Please check dat yo' locale settings:
\&               LC_ALL = "En_US",
\&               LANG = (unset)
\&           is supported n' installed on yo' system.
\&       perl: warning: Fallin back ta tha standard locale ("C").
.Ve
.Sp
Exactly what tha fuck was tha failed locale settings varies. Put ya muthafuckin choppers up if ya feel dis!  In tha above the
settings was dat tha \s-1LC_ALL\s0 was \*(L"En_US\*(R" n' tha \s-1LANG\s0 had no value.
This error means dat Perl detected dat you and/or yo' system
administrator have set up tha so-called variable system but Perl could
not use dem settings.  This was not dead serious, fortunately: there
is a \*(L"default locale\*(R" called \*(L"C\*(R" dat Perl can n' will use, the
script is ghon be run. I aint talkin' bout chicken n' gravy biatch.  Before you straight-up fix tha problem, however, you
will git tha same error message each time you run Perl.  How tha fuck ta straight-up
fix tha problem can be found up in \*(L"\s-1LOCALE PROBLEMS\*(R"\s0 up in perllocale.
.SH "Obsolete Diagnostics"
.IX Header "Obsolete Diagnostics"
.IP "Can't \fImktemp()\fR" 4
.IX Item "Can't mktemp()"
(F) Da \fImktemp()\fR routine failed fo' some reason while tryin ta process
a \fB\-e\fR switch.  Maybe yo' /tmp partizzle is full, or clobbered.
.Sp
Removed cuz \fB\-e\fR don't use temporary filez any more.
.ie n .IP "Can't write ta temp file fo' \fB\-e\fR: %s" 4
.el .IP "Can't write ta temp file fo' \fB\-e\fR: \f(CW%s\fR" 4
.IX Item "Can't write ta temp file fo' -e: %s"
(F) Da write routine failed fo' some reason while tryin ta process
a \fB\-e\fR switch.  Maybe yo' /tmp partizzle is full, or clobbered.
.Sp
Removed cuz \fB\-e\fR don't use temporary filez any more.
.IP "Cannot open temporary file" 4
.IX Item "Cannot open temporary file"
(F) Da create routine failed fo' some reason while tryin ta process
a \fB\-e\fR switch.  Maybe yo' /tmp partizzle is full, or clobbered.
.Sp
Removed cuz \fB\-e\fR don't use temporary filez any more.
.IP "regexp too big" 4
.IX Item "regexp too big"
(F) Da current implementation of regular expressions uses shorts as
address offsets within a string.  Unfortunately dis means dat if
the regular expression compilez ta longer than 32767, it'll blow up.
Usually when you want a regular expression dis big, there be a funky-ass better
way ta do it wit multiple statements, n' you can put dat on yo' toast.  See perlre.
.SH "Configuration Chizzles"
.IX Header "Configuration Chizzles"
Yo ass can use \*(L"Configure \-Uinstallusrbinperl\*(R" which causes installperl
to skip installin perl also as /usr/bin/perl.  This is useful if you
prefer not ta modify /usr/bin fo' some reason or another but harmful
because nuff scripts assume ta find Perl up in /usr/bin/perl.
.SH "BUGS"
.IX Header "BUGS"
If you find what tha fuck you be thinkin be a funky-ass bug, you might check tha headaz of
recently posted articlez up in tha comp.lang.perl.misc newsgroup.
There may also be shiznit at http://www.perl.com/perl/ , tha Perl
Home Page.
.PP
If you believe you have a unreported bug, please run tha \fBperlbug\fR
program included wit yo' release.  Make shizzle you trim yo' bug down
to a tiny but sufficient test case.  Yo crazy-ass bug report, along wit the
output of \f(CW\*(C`perl \-V\*(C'\fR, is ghon be busted off ta <\fIperlbug@perl.com\fR> ta be
analysed by tha Perl portin crew.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Da \fIChanges\fR file fo' exhaustizzle details on what tha fuck chizzled.
.PP
Da \fI\s-1INSTALL\s0\fR file fo' how tha fuck ta build Perl.
.PP
Da \fI\s-1README\s0\fR file fo' general stuff.
.PP
Da \fIArtistic\fR n' \fICopying\fR filez fo' copyright shiznit.
.SH "HISTORY"
.IX Header "HISTORY"
Written by Gurusamy Sarathy <\fIgsar@activestate.com\fR>, wit nuff contributions
from Da Perl Porters.
.PP
Send omissions or erections ta <\fIperlbug@perl.com\fR>.
