'\" t
.\"     Title: git-reset
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-RESET" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-reset \- Reset current HEAD ta tha specified state
.SH "SYNOPSIS"
.sp
.nf
\fIgit reset\fR [\-q] [<tree\-ish>] [\-\-] <paths>\&...
\fIgit reset\fR (\-\-patch | \-p) [<tree\-ish>] [\-\-] [<paths>\&...]
\fIgit reset\fR [\-\-soft | \-\-mixed | \-\-hard | \-\-merge | \-\-keep] [\-q] [<commit>]
.fi
.sp
.SH "DESCRIPTION"
.sp
In tha straight-up original gangsta n' second form, copy entries from <tree\-ish> ta tha index\&. In tha third form, set tha current branch head (HEAD) ta <commit>, optionally modifyin index n' hustlin tree ta match\&. Da <tree\-ish>/<commit> defaults ta HEAD up in all forms\&.
.PP
\fIgit reset\fR [\-q] [<tree\-ish>] [\-\-] <paths>\&...
.RS 4
This form resets tha index entries fo' all <paths> ta they state at <tree\-ish>\&. (It do not affect tha hustlin tree or tha current branch\&.)
.sp
This means that
git reset <paths>
is tha opposite of
git add <paths>\&.
.sp
Afta hustlin
git reset <paths>
to update tha index entry, you can use
\fBgit-checkout\fR(1)
to check tha contents outta tha index ta tha hustlin tree\& fo' realz. Alternatively, using
\fBgit-checkout\fR(1)
and specifyin a cold-ass lil commit, you can copy tha contentz of a path outta a cold-ass lil commit ta tha index n' ta tha hustlin tree up in one go\&.
.RE
.PP
\fIgit reset\fR (\-\-patch | \-p) [<tree\-ish>] [\-\-] [<paths>\&...]
.RS 4
Interactively select hunks up in tha difference between tha index n' <tree\-ish> (defaults ta HEAD)\&. Da chosen hunks is applied up in reverse ta tha index\&.
.sp
This means that
git reset \-p
is tha opposite of
git add \-p, i\&.e\&. you can use it ta selectively reset hunks\&. Right back up in yo muthafuckin ass. See tha \(lqInteractizzle Mode\(rq section of
\fBgit-add\fR(1)
to learn how tha fuck ta operate the
\-\-patch
mode\&.
.RE
.PP
\fIgit reset\fR [<mode>] [<commit>]
.RS 4
This form resets tha current branch head ta <commit> n' possibly thugged-out shiznit tha index (resettin it ta tha tree of <commit>) n' tha hustlin tree dependin on <mode>\&. If <mode> is omitted, defaults ta "\-\-mixed"\&. Da <mode> must be one of tha following:
.PP
\-\-soft
.RS 4
Do not bust a nut on tha index file or tha hustlin tree at all (but resets tha head ta <commit>, just like all modes do)\&. This leaves all yo' chizzled filez "Changes ta be committed", as
\fIgit status\fR
would put it\&.
.RE
.PP
\-\-mixed
.RS 4
Resets tha index but not tha hustlin tree (i\&.e\&., tha chizzled filez is preserved but not marked fo' commit) n' reports what tha fuck has not been updated\&. This is tha default action\&.
.RE
.PP
\-\-hard
.RS 4
Resets tha index n' hustlin tree\& fo' realz. Any chizzlez ta tracked filez up in tha hustlin tree since <commit> is discarded\&.
.RE
.PP
\-\-merge
.RS 4
Resets tha index n' thugged-out shiznit tha filez up in tha hustlin tree dat is different between <commit> n' HEAD yo, but keeps dem which is different between tha index n' hustlin tree (i\&.e\&. which have chizzlez which aint been added)\&. If a gangbangin' file dat is different between <commit> n' tha index has unstaged chizzles, reset be aborted\&.
.sp
In other lyrics, \-\-merge do suttin' like a
\fIgit read\-tree \-u \-m <commit>\fR yo, but carries forward unmerged index entries\&.
.RE
.PP
\-\-keep
.RS 4
Resets index entries n' thugged-out shiznit filez up in tha hustlin tree dat is different between <commit> n' HEAD\&. If a gangbangin' file dat is different between <commit> n' HEAD has local chizzles, reset be aborted\&.
.RE
.RE
.sp
If you wanna undo a cold-ass lil commit other than tha sickest fuckin on a funky-ass branch, \fBgit-revert\fR(1) is yo' playa\&.
.SH "OPTIONS"
.PP
\-q, \-\-quiet
.RS 4
Be on tha fuckin' down-low, only report errors\&.
.RE
.SH "EXAMPLES"
.PP
Undo add
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
$ edit                                     \fB(1)\fR
$ git add frotz\&.c filfre\&.c
$ mailx                                    \fB(2)\fR
$ git reset                                \fB(3)\fR
$ git pull git://info\&.example\&.com/ nitfol  \fB(4)\fR
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fRYo ass is happily hustlin on something, n' find tha chizzlez up in these filez is up in phat order\&. Yo ass do not wanna peep dem when you run "git diff", cuz you plan ta work on other filez n' chizzlez wit these filez is distracting\&.
.br
\fB2. \fRSome Muthafucka asks you ta pull, n' tha chizzlez soundz worthy of merging\&.
.br
\fB3. \fRBut fuck dat shiznit yo, tha word on tha street is dat you already dirtied tha index (i\&.e\&. yo' index do not match tha HEAD commit)\&. But you know tha pull yo ass is goin ta make do not affect frotz\&.c or filfre\&.c, so you revert tha index chizzlez fo' these two files\&. Yo crazy-ass chizzlez up in hustlin tree remain there\&.
.br
\fB4. \fRThen you can pull n' merge, leavin frotz\&.c n' filfre\&.c chizzlez still up in tha hustlin tree\&.
.br
.RE
.PP
Undo a cold-ass lil commit n' redo
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
$ git commit \&.\&.\&.
$ git reset \-\-soft HEAD^      \fB(1)\fR
$ edit                        \fB(2)\fR
$ git commit \-a \-c ORIG_HEAD  \fB(3)\fR
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fRThis is most often done when you remembered what tha fuck you just committed is incomplete, or you misspelled yo' commit message, or both\&. Leaves hustlin tree as dat shiznit was before "reset"\&.
.br
\fB2. \fRMake erections ta hustlin tree files\&.
.br
\fB3. \fR"reset" copies tha oldschool head ta \&.git/ORIG_HEAD; redo tha commit by startin wit its log message\&. If you do not need ta edit tha message further, you can give \-C option instead\&.
.sp
See also tha \-\-amend option to
\fBgit-commit\fR(1)\&.
.br
.RE
.PP
Undo a cold-ass lil commit, makin it a topic branch
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
$ git branch topic/wip     \fB(1)\fR
$ git reset \-\-hard HEAD~3  \fB(2)\fR
$ git checkout topic/wip   \fB(3)\fR
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fRYo ass have made some commits yo, but realize they was premature ta be up in tha "master" branch\&. Yo ass wanna continue polishin dem up in a topic branch, so create "topic/wip" branch off of tha current HEAD\&.
.br
\fB2. \fRRewind tha masta branch ta git rid of dem three commits\&.
.br
\fB3. \fRSwitch ta "topic/wip" branch n' keep working\&.
.br
.RE
.PP
Undo commits permanently
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
$ git commit \&.\&.\&.
$ git reset \-\-hard HEAD~3   \fB(1)\fR
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fRDa last three commits (HEAD, HEAD^, n' HEAD~2) was wack n' you do not wanna eva peep dem again\&. Do
\fBnot\fR
do dis if you have already given these commits ta some muthafucka else\&. (See tha "RECOVERING FROM UPSTREAM REBASE" section in
\fBgit-rebase\fR(1)
for tha implicationz of bustin so\&.)
.br
.RE
.PP
Undo a merge or pull
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
$ git pull                         \fB(1)\fR
Auto\-mergin nitfol
CONFLICT (content): Merge conflict up in nitfol
Automatic merge failed; fix conflicts n' then commit tha result\&.
$ git reset \-\-hard                 \fB(2)\fR
$ git pull \&. topic/branch          \fB(3)\fR
Uppimpin from 41223\&.\&.\&. ta 13134\&.\&.\&.
Fast\-forward
$ git reset \-\-hard ORIG_HEAD       \fB(4)\fR
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fRTry ta update from tha upstream resulted up in a shitload of conflicts; you was not locked n loaded ta spend a shitload of time mergin up in dis biatch, so you decizzle ta do dat later\&.
.br
\fB2. \fR"pull" has not made merge commit, so "git reset \-\-hard" which be a synonym fo' "git reset \-\-hard HEAD" clears tha mess from tha index file n' tha hustlin tree\&.
.br
\fB3. \fRMerge a topic branch tha fuck into tha current branch, which resulted up in a gangbangin' fast\-forward\&.
.br
\fB4. \fRBut you decided dat tha topic branch aint locked n loaded fo' hood consumption yet\&. "pull" or "merge" always leaves tha original gangsta tip of tha current branch up in ORIG_HEAD, so resettin hard ta it brangs yo' index file n' tha hustlin tree back ta dat state, n' resets tha tip of tha branch ta dat commit\&.
.br
.RE
.PP
Undo a merge or pull inside a gangbangin' finger-lickin' dirty hustlin tree
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
$ git pull                         \fB(1)\fR
Auto\-mergin nitfol
Merge made by recursive\&.
 nitfol                |   20 +++++\-\-\-\-
 \&.\&.\&.
$ git reset \-\-merge ORIG_HEAD      \fB(2)\fR
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fREven if you may have local modifications up in yo' hustlin tree, you can safely say "git pull" when you know dat tha chizzle up in tha other branch do not overlap wit them\&.
.br
\fB2. \fRAfta inspectin tha result of tha merge, you may find dat tha chizzle up in tha other branch is unsatisfactory\&. Hustlin "git reset \-\-hard ORIG_HEAD" will let you go back ta where you was yo, but it will discard yo' local chizzles, which you do not want\&. "git reset \-\-merge" keeps yo' local chizzles\&.
.br
.RE
.PP
Interrupted workflow
.RS 4
Suppose yo ass is interrupted by a urgent fix request while yo ass is up in tha middle of a big-ass chizzle\&. Da filez up in yo' hustlin tree is not up in any shape ta be committed yet yo, but you need ta git ta tha other branch fo' a quick bugfix\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ git checkout feature ;# you was hustlin up in "feature" branch and
$ work work work       ;# gots interrupted
$ git commit \-a \-m "snapshot WIP"                 \fB(1)\fR
$ git checkout master
$ fix fix fix
$ git commit ;# commit wit real log
$ git checkout feature
$ git reset \-\-soft HEAD^ ;# go back ta WIP state  \fB(2)\fR
$ git reset                                       \fB(3)\fR
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fRThis commit will git blown away so a throw\-away log message is OK\&.
.br
\fB2. \fRThis removes the
\fIWIP\fR
commit from tha commit history, n' sets yo' hustlin tree ta tha state just before you made dat snapshot\&.
.br
\fB3. \fRAt dis point tha index file still has all tha WIP chizzlez you committed as
\fIsnapshot WIP\fR\&. This thugged-out shiznit tha index ta show yo' WIP filez as uncommitted\&.
.sp
See also
\fBgit-stash\fR(1)\&.
.br
.RE
.PP
Reset a single file up in tha index
.RS 4
Suppose you have added a gangbangin' file ta yo' index yo, but lata decizzle you do not wanna add it ta yo' commit\&. Yo ass can remove tha file from tha index while keepin yo' chizzlez wit git reset\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ git reset \-\- frotz\&.c                      \fB(1)\fR
$ git commit \-m "Commit filez up in index"     \fB(2)\fR
$ git add frotz\&.c                           \fB(3)\fR
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fRThis removes tha file from tha index while keepin it up in tha hustlin directory\&.
.br
\fB2. \fRThis commits all other chizzlez up in tha index\&.
.br
\fB3. \fRAddz tha file ta tha index again\&.
.br
.RE
.PP
Keep chizzlez up in hustlin tree while discardin some previous commits
.RS 4
Suppose yo ass is hustlin on suttin' n' you commit it, n' then you continue hustlin a lil' bit mo' yo, but now you be thinkin dat what tha fuck you have up in yo' hustlin tree should be up in another branch dat has not a god damn thang ta do wit what tha fuck you committed previously\&. Yo ass can start a freshly smoked up branch n' reset it while keepin tha chizzlez up in yo' hustlin tree\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ git tag start
$ git checkout \-b branch1
$ edit
$ git commit \&.\&.\&.                            \fB(1)\fR
$ edit
$ git checkout \-b branch2                   \fB(2)\fR
$ git reset \-\-keep start                    \fB(3)\fR
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fRThis commits yo' first edits up in branch1\&.
.br
\fB2. \fRIn tha ideal ghetto, you could have realized dat tha earlier commit did not belong ta tha freshly smoked up topic when you pimped n' switched ta branch2 (i\&.e\&. "git checkout \-b branch2 start") yo, but no muthafucka is perfect\&.
.br
\fB3. \fRBut you can use "reset \-\-keep" ta remove tha unwanted commit afta you switched ta "branch2"\&.
.br
.RE
.SH "DISCUSSION"
.sp
Da tablez below show what tha fuck happens when hustlin:
.sp
.if n \{\
.RS 4
.\}
.nf
git reset \-\-option target
.fi
.if n \{\
.RE
.\}
.sp
.sp
to reset tha HEAD ta another commit (target) wit tha different reset options dependin on tha state of tha files\&.
.sp
In these tables, A, B, C n' D is some different statez of a gangbangin' file\&. For example, tha straight-up original gangsta line of tha straight-up original gangsta table means dat if a gangbangin' file is up in state A up in tha hustlin tree, up in state B up in tha index, up in state C up in HEAD n' up in state D up in tha target, then "git reset \-\-soft target" will leave tha file up in tha hustlin tree up in state A n' up in tha index up in state B\&. Well shiiiit, it resets (i\&.e\&. moves) tha HEAD (i\&.e\&. tha tip of tha current branch, if yo ass is on one) ta "target" (which has tha file up in state D)\&.
.sp
.if n \{\
.RS 4
.\}
.nf
workin index HEAD target         hustlin index HEAD
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
 A       B     C    D     \-\-soft   A       B     D
                          \-\-mixed  A       D     D
                          \-\-hard   D       D     D
                          \-\-merge (disallowed)
                          \-\-keep  (disallowed)
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
workin index HEAD target         hustlin index HEAD
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
 A       B     C    C     \-\-soft   A       B     C
                          \-\-mixed  A       C     C
                          \-\-hard   C       C     C
                          \-\-merge (disallowed)
                          \-\-keep   A       C     C
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
workin index HEAD target         hustlin index HEAD
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
 B       B     C    D     \-\-soft   B       B     D
                          \-\-mixed  B       D     D
                          \-\-hard   D       D     D
                          \-\-merge  D       D     D
                          \-\-keep  (disallowed)
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
workin index HEAD target         hustlin index HEAD
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
 B       B     C    C     \-\-soft   B       B     C
                          \-\-mixed  B       C     C
                          \-\-hard   C       C     C
                          \-\-merge  C       C     C
                          \-\-keep   B       C     C
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
workin index HEAD target         hustlin index HEAD
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
 B       C     C    D     \-\-soft   B       C     D
                          \-\-mixed  B       D     D
                          \-\-hard   D       D     D
                          \-\-merge (disallowed)
                          \-\-keep  (disallowed)
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
workin index HEAD target         hustlin index HEAD
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
 B       C     C    C     \-\-soft   B       C     C
                          \-\-mixed  B       C     C
                          \-\-hard   C       C     C
                          \-\-merge  B       C     C
                          \-\-keep   B       C     C
.fi
.if n \{\
.RE
.\}
.sp
"reset \-\-merge" is meant ta be used when resettin outta a cold-ass lil conflicted merge\& fo' realz. Any mergy operation guarantees dat tha hustlin tree file dat is involved up in tha merge aint gots local chizzle wrt tha index before it starts, n' dat it writes tha result up ta tha hustlin tree\&. Right back up in yo muthafuckin ass. So if we peep some difference between tha index n' tha target n' also between tha index n' tha hustlin tree, then it means dat we is not resettin up from a state dat a mergy operation left afta failin wit a cold-ass lil conflict\&. That is why our phat asses disallow \-\-merge option up in dis case\&.
.sp
"reset \-\-keep" is meant ta be used when removin a shitload of tha last commits up in tha current branch while keepin chizzlez up in tha hustlin tree\&. If there could be conflicts between tha chizzlez up in tha commit we wanna remove n' tha chizzlez up in tha hustlin tree we wanna keep, tha reset is disallowed\&. That\(cqs why it is disallowed if there be both chizzlez between tha hustlin tree n' HEAD, n' between HEAD n' tha target\&. To be safe, it be also disallowed when there be unmerged entries\&.
.sp
Da followin tablez show what tha fuck happens when there be unmerged entries:
.sp
.if n \{\
.RS 4
.\}
.nf
workin index HEAD target         hustlin index HEAD
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
 X       U     A    B     \-\-soft  (disallowed)
                          \-\-mixed  X       B     B
                          \-\-hard   B       B     B
                          \-\-merge  B       B     B
                          \-\-keep  (disallowed)
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
workin index HEAD target         hustlin index HEAD
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
 X       U     A    A     \-\-soft  (disallowed)
                          \-\-mixed  X       A     A
                          \-\-hard   A       A     A
                          \-\-merge  A       A     A
                          \-\-keep  (disallowed)
.fi
.if n \{\
.RE
.\}
.sp
X means any state n' U means a unmerged index\&.
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
