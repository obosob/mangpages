.TH SYSLINUX 1 "19 July 2010" "SYSLINUX"
.SH NAME
syslinux \- install tha \s-1SYSLINUX\s+1 bootloader on a FAT filesystem
.SH SYNOPSIS
.B syslinux
[\fBOPTIONS\fP]
.I device
.SH DESCRIPTION
\fBSyslinux\fP be a funky-ass boot loader fo' tha Linux operatin system which
operates off a MS-DOS/Windows FAT filesystem. Well shiiiit, it is intended to
simplify first-time installation of Linux, n' fo' creation of rescue
and other special-purpose boot disks.
.PP
In order ta create a funky-ass bootable Linux floppy rockin \fBSyslinux\fP, prepare a
normal MS-DOS formatted floppy. Copy one or mo' Linux kernel filez to
it, then execute tha command:
.IP
.B syslinux \-\-install /dev/fd0
.PP
This will alta tha boot sector on tha disk n' copy a gangbangin' file named
.I ldlinux.sys
into its root directory.
.PP
On boot time, by default, tha kernel is ghon be loaded from tha image named
LINUX on tha boot floppy.  This default can be chizzled, peep tha section
on tha \fBsyslinux\fP configuration file.
.PP
If tha Shift or Alt keys is held down durin boot, or tha Caps or Scroll
locks is set, \fBsyslinux\fP will display a
.BR lilo (8)
-style "boot:" prompt. Da user can then type a kernel file name
followed by any kernel parameters. Da \s-1SYSLINUX\s+1 bootloader
does not need ta know bout tha kernel file up in advance; all dat is
required is dat it aint nuthin but a gangbangin' file located up in tha root directory on the
disk.
.PP
\fBSyslinux\fP supports tha loadin of initial ramdisks (initrd) n' the
bzImage kernel format.
.SH OPTIONS
.TP
\fB\-i\fP, \fB\-\-install\fP
Install \s-1SYSLINUX\s+1 on a freshly smoked up medium, overwritin any previously
installed bootloader.
.TP
\fB\-U\fP, \fB\-\-update\fP
Install \s-1SYSLINUX\s+1 on a freshly smoked up medium if n' only if a version of
\s-1SYSLINUX\s+1 be already installed.
.TP
\fB\-s\fP, \fB\-\-stupid\fP
Install a "safe, slow n' stupid" version of \s-1SYSLINUX\s+1. This version may
work on some straight-up buggy BIOSes on which \s-1SYSLINUX\s+1 would otherwise fail.
If you find a machine on which tha \-s option is required ta make it boot
reliably, please bust as much info bout yo' machine as you can, n' include
the failure mode.
.TP
\fB\-f\fP, \fB\-\-force\fP
Force install even if it appears unsafe.
.TP
\fB\-r\fP, \fB\-\-raid\fB
RAID mode.  If boot fails, tell tha BIOS ta boot tha next thang in
the boot sequence (usually tha next hard disk) instead of stopping
with a error message.  This is useful fo' RAID-1 booting.
.TP
\fB\-d\fP, \fB\-\-directory\fP \fIsubdirectory\fP
Install tha \s-1SYSLINUX\s+1 control filez up in a subdirectory wit the
specified name (relatizzle ta tha root directory on tha device).
.TP
\fB\-t\fP, \fB\-\-offset\fP \fIoffset\fP
Indicates dat tha filesystem be at a offset from tha base of the
device or file.
.TP
\fB\-\-once\fP \fIcommand\fP
Declare a funky-ass boot command ta be tried on tha straight-up original gangsta boot only.
.TP
\fB\-O\fP, \fB\-\-clear-once\fP
Clear tha boot-once command.
.TP
\fB\-H\fP, \fB\-\-heads\fP \fIhead-count\fP
Override tha detected number of headz fo' tha geometry.
.TP
\fB\-S\fP, \fB\-\-sectors\fP \fIsector-count\fP
Override tha detected number of sectors fo' tha geometry.
.TP
\fB\-z\fP, \fB\-\-zipdrive\fP
Assume zipdrive geometry (\fI\-\-headz 64 \-\-sectors 32).
.SH FILES
.SS "Configuration file"
All tha configurable defaults up in \s-1SYSLINUX\s+1 can be chizzled by puttin a
file called
.B syslinux.cfg
in tha install directory of tha boot disk. This
is a text file up in either UNIX or DOS format, containin one or mo' of
the followin shit (case is insensitizzle fo' keywords).
.PP
This list is outta date.
.PP
In tha configuration file blank lines n' comment lines beginning
with a hash mark (#) is ignored.
.TP
\fBdefault\fP \fIkernel\fP [ \fIoptions ...\fP ]
Sets tha default command line. If \fBsyslinux\fP boots automatically,
it will act just as if tha entries afta "default" had been typed in
at tha "boot:" prompt.
.IP
If no DEFAULT or UI statement is found, or tha configuration file is missing
entirely, \s-1SYSLINUX\s+1 drops ta tha boot: prompt wit a error message (if
NOESCAPE is set, it stops wit a "boot failed" message; dis be also tha case
for PXELINUX if tha configuration file aint found.)
.TP
NOTE: Until \s-1SYSLINUX\s+1 3.85, if no configuration file is present, or no
"default" entry is present up in tha configuration file, tha default is
"linux auto".
.TP
Even earlier versionz of \s-1SYSLINUX\s+1 used ta automatically
append tha strang "auto" ta whatever tha user specified using
the DEFAULT command. Y'all KNOW dat shit, muthafucka!  Az of version 1.54, dis is no longer
true, as it caused problems when rockin a gangbangin' finger-lickin' dirty-ass shell as a substitute
for "init."  Yo ass may wanna include dis option manually.
.TP
.BI append " options ..."
Add one or mo' \fIoptions\fP ta tha kernel command line. These is added both
for automatic n' manual boots, n' you can put dat on yo' toast. Da options is added all up in tha straight-up beginnin of
the kernel command line, probably permittin explicitly entered kernel options
to override em. This is tha equivalent of the
.BR lilo (8)
 "append" option.
.PP
.nf
.BI label\  label
.RS 2
.BI kernel\  image
.BI append\  options\ ...
.RE
.fi
.RS
Indicates dat if \fIlabel\fP is entered as tha kernel ta boot, \fBsyslinux\fP should
instead boot \fIimage\fP, n' tha specified "append" options should be used
instead of tha ones specified up in tha global section of tha file (before the
first "label" command.) Da default fo' \fIimage\fP is tha same ol' dirty as \fIlabel\fP,
and if no "append" is given tha default is ta use tha global entry (if any).
Use "append -" ta use no options at all.  Up ta 128 "label" entries are
permitted.
.IP
Da "image" don't gotta be a Linux kernel; it can be a funky-ass boot sector or a
COMBOOT file (see below.)
.RE
.TP
.BI implicit\  flag_val
If \fIflag_val\fP is 0, do not load a kernel image unless it has been
explicitly named up in a "label" statement.  Da default is 1.
.TP
.BI timeout\  timeout
Indicates how tha fuck long ta wait all up in tha "boot:" prompt until bootin automatically, in
unitz of 1/10 s. Da timeout is shut down as soon as tha user types anything
on tha keyboard, tha assumption bein dat tha user will complete tha command
line already begun. I aint talkin' bout chicken n' gravy biatch fo' realz. A timeout of zero will disable tha timeout straight-up,
this be also tha default. Da maximum possible timeout value is 35996;
correspondin ta just below one hour.
.TP
\fBserial\fP \fIport\fP [ \fIbaudrate\fP ]
Enablez a serial port ta act as tha console. "port" be a number (0 = /dev/ttyS0
= COM1, etc.); if "baudrate" is omitted, tha baud rate defaults ta 9600 bps.
Da serial parametas is hardcoded ta be 8 bits, no parity, 1 stop bit.
.IP
For dis directizzle ta be guaranteed ta work properly, it
should be tha straight-up original gangsta directizzle up in tha configuration file.
.TP
.BI font\  filename
Load a gangbangin' font up in .psf format before displayin any output (except tha copyright
line, which is output as ldlinux.sys itself is loaded.) \fBsyslinux\fP only loads
the font onto tha vizzle card; if tha .psf file gotz nuff a Unicode table it is
ignored. Y'all KNOW dat shit, muthafucka!  This only works on EGA n' VGA cards; hopefully it should do nothing
on others.
.TP
.BI kbdmap\  keymap
Install a simple keyboard map. Da keyboard remapper used is \fIvery\fP
simplistic (it simply remaps tha keycodes received from tha BIOS, which means
that only tha key combinations relevant up in tha default layout \- probably U.S.
Gangsta \- can be mapped) but should at least help playas wit AZERTY keyboard
layout n' tha locationz of = n' , (two special charactas used heavily on the
Linux kernel command line.)
.IP
Da included program
.BR keytab-lilo.pl (8)
from the
.BR lilo (8)
 distribution can be used ta create such keymaps.
.TP
.BI display\  filename
Displays tha indicated file on tha screen at boot time (before tha boot:
prompt, if displayed). Please peep tha section below on DISPLAY files. If the
file is missing, dis option is simply ignored.
.TP
.BI prompt\  flag_val
If \fIflag_val\fP is 0, display tha "boot:" prompt only if tha Shift or Alt key
is pressed, or Caps Lock or Scroll lock is set (this is tha default).  If
\fIflag_val\fP is 1, always display tha "boot:" prompt.
.PP
.nf
.BI f1\  filename
.BI f2\  filename
.I ...
.BI f9\  filename
.BI f10\  filename
.BI f11\  filename
.BI f12\  filename
.fi
.RS
Displays tha indicated file on tha screen when a gangbangin' function key is pressed at the
"boot:" prompt. This can be used ta implement pre-boot online help (presumably
for tha kernel command line options.)
.RE
.IP
When rockin tha serial console, press \fI<Ctrl-F><digit>\fP ta git to
the help screens, e.g. \fI<Ctrl-F>2\fP ta git ta tha f2 screen. I aint talkin' bout chicken n' gravy biatch.  For
f10-f12, hit \fI<Ctrl-F>A\fP, \fI<Ctrl-F>B\fP, \fI<Ctrl-F>C\fP.  For
compatiblitizzle wit earlier versions, f10 can also be entered as
\fI<Ctrl-F>0\fP.
.SS "Display file format"
DISPLAY n' function-key help filez is text filez up in either DOS or UNIX
format (with or without \fI<CR>\fP). In addition, tha followin special codes
are interpreted:
.TP
\fI<FF>\fP = \fI<Ctrl-L>\fP = ASCII 12
Clear tha screen, home tha cursor. Shiiit, dis aint no joke.  Note dat tha screen is
filled wit tha current display color.
.TP
\fI<SI><bg><fg>\fP, \fI<SI>\fP = \fI<Ctrl-O>\fP = ASCII 15
Set tha display flavas ta tha specified background n' foreground colors, where
\fI<bg>\fP n' \fI<fg>\fP is hex digits, correspondin ta tha standard PC
display attributes:
.IP
.nf
.ta \w'5 = dark purple    'u
0 = black	8 = dark grey
1 = dark blue	9 = bright blue
2 = dark green	a = bright green
3 = dark cyan	b = bright cyan
4 = dark red	c = bright red
5 = dark purple	d = bright purple
6 = brown	e = yellow
7 = light grey	f = white
.fi
.IP
Pickin a funky-ass bright color (8-f) fo' tha background thangs up in dis biatch up in the
correspondin dark color (0-7), wit tha foreground flashing.
.IP
colors is not visible over tha serial console.
.TP
\fI<CAN>\fPfilename\fI<newline>\fP, \fI<CAN>\fP = \fI<Ctrl-X>\fP = ASCII 24
If a VGA display is present, enta graphics mode n' display
the graphic included up in tha specified file.  Da file format
is a ad hoc format called LSS16; tha included Perl program
"ppmtolss16" can be used ta produce these images.  This Perl
program also includes tha file format justification.
.IP
Da image is displayed up in 640x480 16-color mode.  Once in
graphics mode, tha display attributes (set by \fI<SI>\fP code
sequences) work slightly differently: tha background color is
ignored, n' tha foreground flavas is tha 16 flavas specified
in tha image file.  For dat reason, ppmtolss16 allows you to
specify dat certain flavas should be assigned ta specific
color indicies.
.IP
Color indicies 0 n' 7, up in particular, should be chosen with
care: 0 is tha background color, n' 7 is tha color used for
the text printed by \s-1SYSLINUX\s+1 itself.
.TP
\fI<EM>\fP, \fI<EM>\fP = \fI<Ctrl-U>\fP = ASCII 25
If we is currently up in graphics mode, return ta text mode.
.TP
\fI<DLE>\fP..\fI<ETB>\fB, \fI<Ctrl-P>\fP..\fI<Ctrl-W>\fP = ASCII 16-23
These codes can be used ta select which modes ta print a
certain part of tha message file in. I aint talkin' bout chicken n' gravy biatch.  Each of these control
charactas select a specific set of modes (text screen,
graphics screen, serial port) fo' which tha output be actually
displayed:
.IP
.nf
Characta                       Text    Graph   Serial
------------------------------------------------------
<DLE> = <Ctrl-P> = ASCII 16     No      No      No
<DC1> = <Ctrl-Q> = ASCII 17     Yes yes y'all,     No      No
<DC2> = <Ctrl-R> = ASCII 18     No      Yes yes y'all,     No
<DC3> = <Ctrl-S> = ASCII 19     Yes yes y'all,     Yes yes y'all,     No
<DC4> = <Ctrl-T> = ASCII 20     No      No      Yes
<NAK> = <Ctrl-U> = ASCII 21     Yes yes y'all,     No      Yes
<SYN> = <Ctrl-V> = ASCII 22     No      Yes yes y'all,     Yes
<ETB> = <Ctrl-W> = ASCII 23     Yes yes y'all,     Yes yes y'all,     Yes
.fi
.IP
For example:
.nf
<DC1>Text mode<DC2>Graphics mode<DC4>Serial port<ETB>
.fi
 ... will straight-up print up which mode tha console is in!
.TP
\fI<SUB>\fP = \fI<Ctrl-Z>\fP = ASCII 26
End of file (DOS convention).
.SS Comboot Images n' other operatin systems
This version of \fBsyslinux\fP supports chain loadin of other operating
systems (like fuckin MS-DOS n' its derivatives, includin Windows 95/98),
as well as COMBOOT-style standalone executablez (a subset of DOS .COM
files; peep separate section below.)
.PP
Chain loadin requires tha boot sector of tha foreign operatin system
to be stored up in a gangbangin' file up in tha root directory of tha filesystem.
Because neither Linux kernels, boot sector images, nor COMBOOT files
have reliable magic numbers, \fBsyslinux\fP will peep tha file
extension. I aint talkin' bout chicken n' gravy biatch. Da followin extensions is recognised:
.PP
.nf
.ta \w'none or other    'u
none or other	Linux kernel image
CBT	COMBOOT image (not runnable from DOS)
BSS	Boot sector (DOS superblock is ghon be patched in)
BS	Boot sector
COM	COMBOOT image (runnable from DOS)
.fi
.PP
For filenames given on tha command line, \fBsyslinux\fP will search fo' the
file by addin extensions up in tha order listed above if tha plain
filename aint found. Y'all KNOW dat shit, muthafucka! Filenames up in KERNEL statements must be fully
qualified.
.PP
A COMBOOT file be a standalone executable up in DOS .COM format. They
can, among other thangs, be produced by tha Etherboot package by
Markus Gutschke n' Ken Yap. Da followin requirements apply for
these filez ta be sufficiently "standalone" fo' \fBsyslinux\fP ta be able to
load n' run them:
.IP \(bu
Da program must not execute any DOS calls (since there is no
DOS), although it may call tha BIOS. Da only exception is that
the program may execute INT 20h (Terminizzle Program) ta return to
the \fBsyslinux\fP prompt. Note especially dat INT 21h AH=4Ch, INT 21h
AH=31h or INT 27h is not supported.
.IP \(bu
Only tha fieldz pspInt20 at offset 00h, pspNextParagraph at offset 02h and
pspCommandTail at offset 80h (gotz nuff tha arguments from tha \fBsyslinux\fP command
line) up in tha PSP is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. All other fieldz will contain zero.
.IP \(bu
Da program must not modify any main memory outside its 64K segment if it
returns ta \fBsyslinux\fP via INT 20h.
.PP
\fBSyslinux\fP currently don't provide any form of API fo' tha use of
COMBOOT files.  If there is need, a gangbangin' future version may contain a INT
interface ta some \fBsyslinux\fP functions; please contact me if you have a
need or scams fo' such a API.
.SS Novice protection
\fBSyslinux\fP will attempt ta detect if tha user is tryin ta boot on a 286
or lower class machine, or a machine wit less than 608K of low ("DOS")
RAM (which means tha Linux boot sequence cannot complete).  If so, a
message is displayed n' tha boot sequence aborted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Holdin down the
Ctrl key while bootin disablez dis feature.
.PP
Da compile time n' date of a specific \fBsyslinux\fP version can be obtained
by tha DOS command "type ldlinux.sys". This be also used as the
signature fo' tha LDLINUX.SYS file, which must match tha boot sector
.PP
Any file dat \fBsyslinux\fP uses can be marked hidden, system or readonly if
so is convenient; \fBsyslinux\fP ignores all file attributes.  Da \s-1SYSLINUX\s+1
installed automatically sets tha readonly attribute on LDLINUX.SYS.
.SS Bootable CD-ROMs
\s-1SYSLINUX\s+1 can be used ta create bootdisk images fo' El
Torito-compatible bootable CD-ROMs. But fuck dat shiznit yo, tha word on tha street is dat it appears dat many
BIOSes is straight-up buggy when it comes ta bootin CD-ROMs. Right back up in yo muthafuckin ass. Some users
have reported dat tha followin steps is helpful up in bustin a CD-ROM
that is bootable on tha phattest possible number of machines:
.IP \(bu
Use tha -s (safe, slow n' stupid) option ta \s-1SYSLINUX\s+1
.IP \(bu
Put tha boot image as close ta tha beginnin of the
ISO 9660 filesystem as possible.
.PP
A CD-ROM is so much fasta than a gangbangin' floppy dat tha -s option shouldn't
matta from a speed perspective.
.PP
Of course, you probably wanna use ISOLINUX instead. Y'all KNOW dat shit, muthafucka!  See the
documentation file
.BR isolinux.doc .
.SS Bootin from a FAT partizzle on a hard disk
\s-1SYSLINUX\s+1 can boot from a FAT filesystem partizzle on a hard
disk (includin FAT32). Da installation procedure is identical ta the
procedure fo' installin it on a gangbangin' floppy, n' should work under either
DOS or Linux. To boot from a partition, \s-1SYSLINUX\s+1 need ta be
launched from a Masta Boot Record or another boot loader, just like
DOS itself would. Y'all KNOW dat shit, muthafucka! A sample masta boot sector (\fBmbr.bin\fP) is
included wit \s-1SYSLINUX\s+1.
.SH BUGS
I would appreciate hearin of any problems you have wit \s-1SYSLINUX\s+1.  I
would also like ta hear from you if you have successfully used \s-1SYSLINUX\s+1,
especially if yo ass is rockin it fo' a gangbangin' finger-lickin' distribution.
.PP
If yo ass is reportin problems, please include all possible shiznit
about yo' system n' yo' BIOS; tha vast majoritizzle of all problems
reported turn up ta be BIOS or hardware bugs, n' I need as much
information as possible up in order ta diagnose tha problems.
.PP
There be a mailin list fo' rap among \s-1SYSLINUX\s+1 playas n' for
announcementz of freshly smoked up n' test versions. To join, bust a message to
majordomo@linux.kernel.org wit tha line:
.PP
.B subscribe syslinux
.PP
in tha body of tha message. Da submission address is syslinux@linux.kernel.org.
.SH SEE ALSO
.BR lilo (8),
.BR keytab-lilo.pl (8),
.BR fdisk (8),
.BR mkfs (8),
.BR superformat (1).
.SH AUTHOR
This manual page be a modified version of tha original gangsta \fBsyslinux\fP
documentation by H. Peta Anvin <hpa@zytor.com>. Da conversion ta a manpage
was made by Arthur Korn <arthur@korn.ch>.
