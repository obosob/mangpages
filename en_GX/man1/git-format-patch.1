'\" t
.\"     Title: git-format-patch
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-FORMAT\-PATCH" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-format-patch \- Prepare patches fo' e\-mail submission
.SH "SYNOPSIS"
.sp
.nf
\fIgit format\-patch\fR [\-k] [(\-o|\-\-output\-directory) <dir> | \-\-stdout]
                   [\-\-no\-thread | \-\-thread[=<style>]]
                   [(\-\-attach|\-\-inline)[=<boundary>] | \-\-no\-attach]
                   [\-s | \-\-signoff]
                   [\-\-signature=<signature> | \-\-no\-signature]
                   [\-n | \-\-numbered | \-N | \-\-no\-numbered]
                   [\-\-start\-number <n>] [\-\-numbered\-files]
                   [\-\-in\-reply\-to=Message\-Id] [\-\-suffix=\&.<sfx>]
                   [\-\-ignore\-if\-in\-upstream]
                   [\-\-subject\-prefix=Subject\-Prefix] [(\-\-reroll\-count|\-v) <n>]
                   [\-\-to=<email>] [\-\-cc=<email>]
                   [\-\-[no\-]cover\-letter] [\-\-quiet] [\-\-notes[=<ref>]]
                   [<common diff options>]
                   [ <since> | <revision range> ]
.fi
.sp
.SH "DESCRIPTION"
.sp
Prepare each commit wit its patch up in one file per commit, formatted ta resemble UNIX mailbox format\&. Da output of dis command is convenient fo' e\-mail submission or fo' use wit \fIgit am\fR\&.
.sp
There is two ways ta specify which commits ta operate on\&.
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
A single commit, <since>, specifies dat tha commits leadin ta tha tip of tha current branch dat is not up in tha history dat leadz ta tha <since> ta be output\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Generic <revision range> expression (see "SPECIFYING REVISIONS" section in
\fBgitrevisions\fR(7)) means tha commits up in tha specified range\&.
.RE
.sp
Da first rule takes precedence up in tha case of a single <commit>\&. To apply tha second rule, i\&.e\&., format every last muthafuckin thang since tha beginnin of history up until <commit>, use tha \fI\-\-root\fR option: git format\-patch \-\-root <commit>\&. If you wanna format only <commit> itself, you can do dis wit git format\-patch \-1 <commit>\&.
.sp
By default, each output file is numbered sequentially from 1, n' uses tha straight-up original gangsta line of tha commit message (massaged fo' pathname safety) as tha filename\&. With tha \-\-numbered\-filez option, tha output file names will only be numbers, without tha straight-up original gangsta line of tha commit appended\&. Da namez of tha output filez is printed ta standard output, unless tha \-\-stdout option is specified\&.
.sp
If \-o is specified, output filez is pimped up in <dir>\&. Otherwise they is pimped up in tha current hustlin directory\&.
.sp
By default, tha subject of a single patch is "[PATCH] " followed by tha concatenation of lines from tha commit message up ta tha straight-up original gangsta blank line (see tha DISCUSSION section of \fBgit-commit\fR(1))\&.
.sp
When multiple patches is output, tha subject prefix will instead be "[PATCH n/m] "\&. To force 1/1 ta be added fo' a single patch, use \-n\&. To omit patch numbers from tha subject, use \-N\&.
.sp
If given \-\-thread, git\-format\-patch will generate In\-Reply\-To n' References headaz ta make tha second n' subsequent patch mails step tha fuck up as replies ta tha straight-up original gangsta mail; dis also generates a Message\-Id header ta reference\&.
.SH "OPTIONS"
.PP
\-p, \-\-no\-stat
.RS 4
Generate plain patches without any diffstats\&.
.RE
.PP
\-s, \-\-no\-patch
.RS 4
Suppress diff output\&. Useful fo' commandz like
git show
that show tha patch by default, or ta quit tha effect of
\-\-patch\&.
.RE
.PP
\-U<n>, \-\-unified=<n>
.RS 4
Generate diffs wit <n> linez of context instead of tha usual three\&.
.RE
.PP
\-\-minimal
.RS 4
Spend extra time ta make shizzle tha smallest possible diff is produced\&.
.RE
.PP
\-\-patience
.RS 4
Generate a gangbangin' finger-lickin' diff rockin tha "patience diff" algorithm\&.
.RE
.PP
\-\-histogram
.RS 4
Generate a gangbangin' finger-lickin' diff rockin tha "histogram diff" algorithm\&.
.RE
.PP
\-\-diff\-algorithm={patience|minimal|histogram|myers}
.RS 4
Choose a gangbangin' finger-lickin' diff algorithm\&. Da variants is as bigs up:
.PP
default, myers
.RS 4
Da basic greedy diff algorithm\&. Currently, dis is tha default\&.
.RE
.PP
minimal
.RS 4
Spend extra time ta make shizzle tha smallest possible diff is produced\&.
.RE
.PP
patience
.RS 4
Use "patience diff" algorithm when generatin patches\&.
.RE
.PP
histogram
.RS 4
This algorithm extendz tha patience algorithm ta "support low\-occurrence common elements"\&.
.RE
.sp
For instance, if you configured diff\&.algorithm variable ta a non\-default value n' wanna use tha default one, then you gotta use
\-\-diff\-algorithm=default
option\&.
.RE
.PP
\-\-stat[=<width>[,<name\-width>[,<count>]]]
.RS 4
Generate a gangbangin' finger-lickin' diffstat\&. By default, as much space as necessary is ghon be used fo' tha filename part, n' tha rest fo' tha graph part\&. Maximum width defaults ta terminal width, or 80 columns if not connected ta a terminal, n' can be overridden by
<width>\&. Da width of tha filename part can be limited by givin another width
<name\-width>
afta a cold-ass lil comma\&. Da width of tha graph part can be limited by using
\-\-stat\-graph\-width=<width>
(affects all commandz generatin a stat graph) or by setting
diff\&.statGraphWidth=<width>
(does not affect
git format\-patch)\&. By givin a third parameter
<count>, you can limit tha output ta tha first
<count>
lines, followed by
\&.\&.\&.
if there be more\&.
.sp
These parametas can also be set individually with
\-\-stat\-width=<width>,
\-\-stat\-name\-width=<name\-width>
and
\-\-stat\-count=<count>\&.
.RE
.PP
\-\-numstat
.RS 4
Similar to
\-\-stat yo, but shows number of added n' deleted lines up in decimal notation n' pathname without abbreviation, ta make it mo' machine bumpin'\&. For binary files, outputs two
\-
instead of saying
0 0\&.
.RE
.PP
\-\-shortstat
.RS 4
Output only tha last line of the
\-\-stat
format containin total number of modified files, as well as number of added n' deleted lines\&.
.RE
.PP
\-\-dirstat[=<param1,param2,\&...>]
.RS 4
Output tha distribution of relatizzle amount of chizzlez fo' each sub\-directory\&. Da behavior of
\-\-dirstat
can be customized by passin it a cold-ass lil comma separated list of parameters\&. Da defaults is controlled by the
diff\&.dirstat
configuration variable (see
\fBgit-config\fR(1))\&. Da followin parametas is available:
.PP
changes
.RS 4
Compute tha dirstat numbers by countin tha lines dat done been removed from tha source, or added ta tha destination\&. This ignores tha amount of pure code movements within a gangbangin' file\&. In other lyrics, rearrangin lines up in a gangbangin' file aint counted as much as other chizzles\&. This is tha default behavior when no parameta is given\&.
.RE
.PP
lines
.RS 4
Compute tha dirstat numbers by bustin tha regular line\-based diff analysis, n' summin tha removed/added line counts\&. (For binary files, count 64\-byte chunks instead, since binary filez have no natural concept of lines)\&. This be a mo' expensive
\-\-dirstat
behavior than the
changes
behavior yo, but it do count rearranged lines within a gangbangin' file as much as other chizzles\&. Da resultin output is consistent wit what tha fuck you git from tha other
\-\-*stat
options\&.
.RE
.PP
files
.RS 4
Compute tha dirstat numbers by countin tha number of filez chizzled\&. Each chizzled file counts equally up in tha dirstat analysis\&. This is tha computationally skankyest
\-\-dirstat
behavior, since it do not gotta peep tha file contents at all\&.
.RE
.PP
cumulative
.RS 4
Count chizzlez up in a cold-ass lil lil pimp directory fo' tha parent directory as well\&. Note dat when using
cumulative, tha sum of tha cementages reported may exceed 100%\&. Da default (non\-cumulative) behavior can be specified wit the
noncumulative
parameter\&.
.RE
.PP
<limit>
.RS 4
An integer parameta specifies a cold-ass lil cut\-off cement (3% by default)\&. Directories contributin less than dis cementage of tha chizzlez is not shown up in tha output\&.
.RE
.sp
Example: Da followin will count chizzled files, while ignorin directories wit less than 10% of tha total amount of chizzled files, n' accumulatin lil pimp directory counts up in tha parent directories:
\-\-dirstat=files,10,cumulative\&.
.RE
.PP
\-\-summary
.RS 4
Output a cold-ass lil condensed summary of extended header shiznit like fuckin creations, renames n' mode chizzles\&.
.RE
.PP
\-\-no\-renames
.RS 4
Turn off rename detection, even when tha configuration file gives tha default ta do so\&.
.RE
.PP
\-\-full\-index
.RS 4
Instead of tha straight-up original gangsta handful of characters, show tha full pre\- n' post\-image blob object names on tha "index" line when generatin patch format output\&.
.RE
.PP
\-\-binary
.RS 4
In addizzle to
\-\-full\-index, output a funky-ass binary diff dat can be applied with
git\-apply\&.
.RE
.PP
\-\-abbrev[=<n>]
.RS 4
Instead of showin tha full 40\-byte hexadecimal object name up in diff\-raw format output n' diff\-tree header lines, show only a partial prefix\&. This is independent of the
\-\-full\-index
option above, which controls tha diff\-patch output format\&. Non default number of digits can be specified with
\-\-abbrev=<n>\&.
.RE
.PP
\-B[<n>][/<m>], \-\-break\-rewrites[=[<n>][/<m>]]
.RS 4
Break complete rewrite chizzlez tha fuck into pairz of delete n' create\&. This serves two purposes:
.sp
It affects tha way a cold-ass lil chizzle dat amounts ta a total rewrite of a gangbangin' file not as a seriez of deletion n' insertion mixed together wit a straight-up few lines dat happen ta match textually as tha context yo, but as a single deletion of every last muthafuckin thang oldschool followed by a single insertion of every last muthafuckin thang new, n' tha number
m
controls dis aspect of tha \-B option (defaults ta 60%)\&.
\-B/70%
specifies dat less than 30% of tha original gangsta should remain up in tha result fo' Git ta consider it a total rewrite (i\&.e\&. otherwise tha resultin patch is ghon be a seriez of deletion n' insertion mixed together wit context lines)\&.
.sp
When used wit \-M, a straight-up\-rewritten file be also considered as tha source of a rename (usually \-M only considaz a gangbangin' file dat disappeared as tha source of a rename), n' tha number
n
controls dis aspect of tha \-B option (defaults ta 50%)\&.
\-B20%
specifies dat a cold-ass lil chizzle wit addizzle n' deletion compared ta 20% or mo' of tha file\(cqs size is eligible fo' bein picked up as a possible source of a rename ta another file\&.
.RE
.PP
\-M[<n>], \-\-find\-renames[=<n>]
.RS 4
Detect renames\&. If
n
is specified, it aint nuthin but a threshold on tha similaritizzle index (i\&.e\&. amount of addition/deletions compared ta tha file\(cqs size)\&. For example,
\-M90%
means Git should consider a thugged-out delete/add pair ta be a rename if mo' than 90% of tha file hasn\(cqt chizzled\&. Without a
%
sign, tha number is ta be read as a gangbangin' fraction, wit a thugged-out decimal point before it\&. I\&.e\&.,
\-M5
becomes 0\&.5, n' is thus tha same ol' dirty as
\-M50%\&. Right back up in yo muthafuckin ass. Similarly,
\-M05
is tha same ol' dirty as
\-M5%\&. To limit detection ta exact renames, use
\-M100%\&. Da default similaritizzle index is 50%\&.
.RE
.PP
\-C[<n>], \-\-find\-copies[=<n>]
.RS 4
Detect copies as well as renames\&. Right back up in yo muthafuckin ass. See also
\-\-find\-copies\-harder\&. If
n
is specified, it has tha same ol' dirty meanin as for
\-M<n>\&.
.RE
.PP
\-\-find\-copies\-harder
.RS 4
For performizzle reasons, by default,
\-C
option findz copies only if tha original gangsta file of tha copy was modified up in tha same chizzleset\&. This flag make tha command inspect unmodified filez as muthafuckas fo' tha source of copy\&. This be a straight-up high-rollin' operation fo' big-ass projects, so use it wit caution\&. Givin mo' than one
\-C
option has tha same ol' dirty effect\&.
.RE
.PP
\-D, \-\-irreversible\-delete
.RS 4
Omit tha preimage fo' deletes, i\&.e\&. print only tha header but not tha diff between tha preimage and
/dev/null\&. Da resultin patch aint meant ta be applied with
patch
or
git apply; dis is solely fo' playas whoz ass wanna just concentrate on reviewin tha text afta tha chizzle\&. In addition, tha output obviously lack enough shiznit ta apply such a patch up in reverse, even manually, hence tha name of tha option\&.
.sp
When used together with
\-B, omit also tha preimage up in tha deletion part of a thugged-out delete/create pair\&.
.RE
.PP
\-l<num>
.RS 4
The
\-M
and
\-C
options require O(n^2) processin time where n is tha number of potential rename/copy targets\&. This option prevents rename/copy detection from hustlin if tha number of rename/copy targets exceedz tha specified number\&.
.RE
.PP
\-O<orderfile>
.RS 4
Output tha patch up in tha order specified up in tha <orderfile>, which has one shell glob pattern per line\&. This overrides the
diff\&.orderfile
configuration variable (see
\fBgit-config\fR(1))\&. To cancel
diff\&.orderfile, use
\-O/dev/null\&.
.RE
.PP
\-a, \-\-text
.RS 4
Treat all filez as text\&.
.RE
.PP
\-\-ignore\-space\-at\-eol
.RS 4
Ignore chizzlez up in whitespace at EOL\&.
.RE
.PP
\-b, \-\-ignore\-space\-change
.RS 4
Ignore chizzlez up in amount of whitespace\&. This ignores whitespace at line end, n' considaz all other sequencez of one or mo' whitespace charactas ta be equivalent\&.
.RE
.PP
\-w, \-\-ignore\-all\-space
.RS 4
Ignore whitespace when comparin lines\&. This ignores differences even if one line has whitespace where tha other line has none\&.
.RE
.PP
\-\-ignore\-blank\-lines
.RS 4
Ignore chizzlez whose lines is all blank\&.
.RE
.PP
\-\-inter\-hunk\-context=<lines>
.RS 4
Show tha context between diff hunks, up ta tha specified number of lines, thereby fusin hunks dat is close ta each other\&.
.RE
.PP
\-W, \-\-function\-context
.RS 4
Show whole surroundin functionz of chizzles\&.
.RE
.PP
\-\-ext\-diff
.RS 4
Allow a external diff helper ta be executed\&. If you set a external diff driver with
\fBgitattributes\fR(5), you need ta use dis option with
\fBgit-log\fR(1)
and playas\&.
.RE
.PP
\-\-no\-ext\-diff
.RS 4
Disallow external diff drivers\&.
.RE
.PP
\-\-textconv, \-\-no\-textconv
.RS 4
Allow (or disallow) external text conversion filtas ta be run when comparin binary files\&. Right back up in yo muthafuckin ass. See
\fBgitattributes\fR(5)
for details\&. Because textconv filtas is typically a one\-way conversion, tha resultin diff is suitable fo' human consumption yo, but cannot be applied\&. For dis reason, textconv filtas is enabled by default only for
\fBgit-diff\fR(1)
and
\fBgit-log\fR(1) yo, but not for
\fBgit-format-patch\fR(1)
or diff plumbin commands\&.
.RE
.PP
\-\-ignore\-submodules[=<when>]
.RS 4
Ignore chizzlez ta submodulez up in tha diff generation\&. <when> can be either "none", "untracked", "dirty" or "all", which is tha default\&. Usin "none" will consider tha submodule modified when it either gotz nuff untracked or modified filez or its HEAD differs from tha commit recorded up in tha superproject n' can be used ta override any settingz of the
\fIignore\fR
option in
\fBgit-config\fR(1)
or
\fBgitmodules\fR(5)\&. When "untracked" is used submodulez is not considered dirty when they only contain untracked content (but they is still scanned fo' modified content)\&. Usin "dirty" ignores all chizzlez ta tha work tree of submodules, only chizzlez ta tha commits stored up in tha superproject is shown (this was tha behavior until 1\&.7\&.0)\&. Usin "all" hides all chizzlez ta submodules\&.
.RE
.PP
\-\-src\-prefix=<prefix>
.RS 4
Show tha given source prefix instead of "a/"\&.
.RE
.PP
\-\-dst\-prefix=<prefix>
.RS 4
Show tha given destination prefix instead of "b/"\&.
.RE
.PP
\-\-no\-prefix
.RS 4
Do not show any source or destination prefix\&.
.RE
.sp
For mo' detailed explanation on these common options, peep also \fBgitdiffcore\fR(7)\&.
.PP
\-<n>
.RS 4
Prepare patches from tha topmost <n> commits\&.
.RE
.PP
\-o <dir>, \-\-output\-directory <dir>
.RS 4
Use <dir> ta store tha resultin files, instead of tha current hustlin directory\&.
.RE
.PP
\-n, \-\-numbered
.RS 4
Name output in
\fI[PATCH n/m]\fR
format, even wit a single patch\&.
.RE
.PP
\-N, \-\-no\-numbered
.RS 4
Name output in
\fI[PATCH]\fR
format\&.
.RE
.PP
\-\-start\-number <n>
.RS 4
Start numberin tha patches at <n> instead of 1\&.
.RE
.PP
\-\-numbered\-files
.RS 4
Output file names is ghon be a simple number sequence without tha default first line of tha commit appended\&.
.RE
.PP
\-k, \-\-keep\-subject
.RS 4
Do not strip/add
\fI[PATCH]\fR
from tha straight-up original gangsta line of tha commit log message\&.
.RE
.PP
\-s, \-\-signoff
.RS 4
Add
Signed\-off\-by:
line ta tha commit message, rockin tha committa identitizzle of yo ass\&.
.RE
.PP
\-\-stdout
.RS 4
Print all commits ta tha standard output up in mbox format, instead of bustin a gangbangin' file fo' each one\&.
.RE
.PP
\-\-attach[=<boundary>]
.RS 4
Smoke multipart/mixed attachment, tha straight-up original gangsta part of which is tha commit message n' tha patch itself up in tha second part, with
Content\-Disposition: attachment\&.
.RE
.PP
\-\-no\-attach
.RS 4
Disable tha creation of a attachment, overridin tha configuration setting\&.
.RE
.PP
\-\-inline[=<boundary>]
.RS 4
Smoke multipart/mixed attachment, tha straight-up original gangsta part of which is tha commit message n' tha patch itself up in tha second part, with
Content\-Disposition: inline\&.
.RE
.PP
\-\-thread[=<style>], \-\-no\-thread
.RS 4
Controls addizzle of
In\-Reply\-To
and
References
headaz ta make tha second n' subsequent mails step tha fuck up as replies ta tha first\& fo' realz. Also controls generation of the
Message\-Id
header ta reference\&.
.sp
Da optionizzle <style> argument can be either
shallow
or
deep\&.
\fIshallow\fR
threadin make every last muthafuckin mail a reply ta tha head of tha series, where tha head is chosen from tha cover letter, the
\-\-in\-reply\-to, n' tha straight-up original gangsta patch mail, up in dis order\&.
\fIdeep\fR
threadin make every last muthafuckin mail a reply ta tha previous one\&.
.sp
Da default is
\-\-no\-thread, unless the
\fIformat\&.thread\fR
configuration is set\&. If
\-\-thread
is specified without a style, it defaults ta tha steez specified by
\fIformat\&.thread\fR
if any, or else
shallow\&.
.sp
Beware dat tha default for
\fIgit send\-email\fR
is ta thread emails itself\&. If you want
git format\-patch
to take care of threading, yo big-ass booty is ghon wanna ensure dat threadin is disabled for
git send\-email\&.
.RE
.PP
\-\-in\-reply\-to=Message\-Id
.RS 4
Make tha straight-up original gangsta mail (or all tha mails with
\-\-no\-thread) step tha fuck up as a reply ta tha given Message\-Id, which avoidz breakin threadz ta provide a freshly smoked up patch series\&.
.RE
.PP
\-\-ignore\-if\-in\-upstream
.RS 4
Do not include a patch dat matches a cold-ass lil commit up in <until>\&.\&.<since>\&. This will examine all patches reachable from <since> but not from <until> n' compare dem wit tha patches bein generated, n' any patch dat matches is ignored\&.
.RE
.PP
\-\-subject\-prefix=<Subject\-Prefix>
.RS 4
Instead of tha standard
\fI[PATCH]\fR
prefix up in tha subject line, instead use
\fI[<Subject\-Prefix>]\fR\&. This allows fo' useful namin of a patch series, n' can be combined wit the
\-\-numbered
option\&.
.RE
.PP
\-v <n>, \-\-reroll\-count=<n>
.RS 4
Mark tha series as tha <n>\-th iteration of tha topic\&. Da output filenames have
v<n>
pretended ta them, n' tha subject prefix ("PATCH" by default yo, but configurable via the
\-\-subject\-prefix
option) has ` v<n>` appended ta it\&. E\&.g\&.
\-\-reroll\-count=4
may produce
v4\-0001\-add\-makefile\&.patch
file dat has "Subject: [PATCH v4 1/20] Add makefile" up in it\&.
.RE
.PP
\-\-to=<email>
.RS 4
Add a
To:
header ta tha email headers\&. This is up in addizzle ta any configured headers, n' may be used multiple times\&. Da negated form
\-\-no\-to
discardz all
To:
headaz added so far (from config or command line)\&.
.RE
.PP
\-\-cc=<email>
.RS 4
Add a
Cc:
header ta tha email headers\&. This is up in addizzle ta any configured headers, n' may be used multiple times\&. Da negated form
\-\-no\-cc
discardz all
Cc:
headaz added so far (from config or command line)\&.
.RE
.PP
\-\-from, \-\-from=<ident>
.RS 4
Use
ident
in the
From:
header of each commit email\&. If tha lyricist ident of tha commit aint textually identical ta tha provided
ident, place a
From:
header up in tha body of tha message wit tha original gangsta author\&. If no
ident
is given, use tha committa ident\&.
.sp
Note dat dis option is only useful if yo ass is straight-up bustin  tha emails n' wanna identify yo ass as tha sender yo, but retain tha original gangsta lyricist (and
git am
will erectly pick up tha in\-body header)\&. Note also that
git send\-email
already handlez dis transformation fo' you, n' dis option should not be used if yo ass is feedin tha result to
git send\-email\&.
.RE
.PP
\-\-add\-header=<header>
.RS 4
Add a arbitrary header ta tha email headers\&. This is up in addizzle ta any configured headers, n' may be used multiple times\&. For example,
\-\-add\-header="Organization: git\-foo"\&. Da negated form
\-\-no\-add\-header
discards
\fBall\fR
(To:,
Cc:, n' custom) headaz added so far from config or command line\&.
.RE
.PP
\-\-[no\-]cover\-letter
.RS 4
In addizzle ta tha patches, generate a cold-ass lil cover letta file containin tha shortlog n' tha overall diffstat\&. Yo ass can fill up in a thugged-out description up in tha file before bustin  it out\&.
.RE
.PP
\-\-notes[=<ref>]
.RS 4
Append tha notes (see
\fBgit-notes\fR(1)) fo' tha commit afta tha three\-dash line\&.
.sp
Da expected use case of dis is ta write supportin explanation fo' tha commit dat do not belong ta tha commit log message proper, n' include it wit tha patch submission\&. While one can simply write these explanations after
format\-patch
has run but before sending, keepin dem as Git notes allows dem ta be maintained between versionz of tha patch series (but peep tha rap of the
notes\&.rewrite
configuration options in
\fBgit-notes\fR(1)
to use dis workflow)\&.
.RE
.PP
\-\-[no]\-signature=<signature>
.RS 4
Add a signature ta each message produced\&. Per RFC 3676 tha signature is separated from tha body by a line wit \(aq\-\- \(aq on it\&. If tha signature option is omitted tha signature defaults ta tha Git version number\&.
.RE
.PP
\-\-suffix=\&.<sfx>
.RS 4
Instead of using
\&.patch
as tha suffix fo' generated filenames, use specified suffix\& fo' realz. A common alternatizzle is
\-\-suffix=\&.txt\&. Leavin dis empty will remove the
\&.patch
suffix\&.
.sp
Note dat tha leadin characta do not gotta be a thugged-out dot; fo' example, you can use
\-\-suffix=\-patch
to get
0001\-description\-of\-my\-change\-patch\&.
.RE
.PP
\-q, \-\-quiet
.RS 4
Do not print tha namez of tha generated filez ta standard output\&.
.RE
.PP
\-\-no\-binary
.RS 4
Do not output contentz of chizzlez up in binary files, instead display a notice dat dem filez chizzled\&. Patches generated rockin dis option cannot be applied properly yo, but they is still useful fo' code review\&.
.RE
.PP
\-\-root
.RS 4
Treat tha revision argument as a <revision range>, even if it is just a single commit (that would normally be treated as a <since>)\&. Note dat root commits included up in tha specified range is always formatted as creation patches, independently of dis flag\&.
.RE
.SH "CONFIGURATION"
.sp
Yo ass can specify extra mail header lines ta be added ta each message, defaults fo' tha subject prefix n' file suffix, number patches when outputtin mo' than one patch, add "To" or "Cc:" headers, configure attachments, n' sign off patches wit configuration variables\&.
.sp
.if n \{\
.RS 4
.\}
.nf
[format]
        headaz = "Organization: git\-foo\en"
        subjectprefix = CHANGE
        suffix = \&.txt
        numbered = auto
        ta = <email>
        cc = <email>
        attach [ = mime\-boundary\-strin ]
        signoff = true
        coverletta = auto
.fi
.if n \{\
.RE
.\}
.sp
.SH "DISCUSSION"
.sp
Da patch produced by \fIgit format\-patch\fR is up in UNIX mailbox format, wit a gangbangin' fixed "magic" time stamp ta indicate dat tha file is output from format\-patch rather than a real mailbox, like so:
.sp
.if n \{\
.RS 4
.\}
.nf
From 8f72bad1baf19a53459661343e21d6491c3908d3 Mon Sep 17 00:00:00 2001
From: Tony Luck <tony\&.luck@intel\&.com>
Date: Tue, 13 Jul 2010 11:42:54 \-0700
Subject: [PATCH] =?UTF\-8?q?[IA64]=20Put=20ia64=20config=20files=20on=20the=20?=
 =?UTF\-8?q?Uwe=20Kleine\-K=C3=B6nig=20diet?=
MIME\-Version: 1\&.0
Content\-Type: text/plain; charset=UTF\-8
Content\-Transfer\-Encoding: 8bit

arch/arm config filez was slimmed down rockin a python script
(See commit c2330e286f68f1c408b4aa6515ba49d57f05beae comment)

Do tha same fo' ia64 so we can have sleek & trim looking
\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
Typically it is ghon be placed up in a MUA\(cqs drafts folder, edited ta add timely commentary dat should not go up in tha chizzlelog afta tha three dashes, n' then busted as a message whose body, up in our example, starts wit "arch/arm config filez were\&..."\&. On tha receivin end, readaz can save bangin-ass patches up in a UNIX mailbox n' apply dem wit \fBgit-am\fR(1)\&.
.sp
When a patch is part of a ongoin rap, tha patch generated by \fIgit format\-patch\fR can be tweaked ta take advantage of tha \fIgit be \-\-scissors\fR feature\& fo' realz. Afta yo' response ta tha rap comes a line dat consists solely of "\-\- >8 \-\-" (scissors n' perforation), followed by tha patch wit unnecessary header fieldz removed:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.
> So we should do such\-and\-such\&.

Makes sense ta me\&.  How tha fuck bout dis patch?

\-\- >8 \-\-
Subject: [IA64] Put ia64 config filez on tha Uwe Kleine\-K\(:onig diet

arch/arm config filez was slimmed down rockin a python script
\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
When bustin  a patch dis way, most often yo ass is bustin  yo' own patch, so up in addizzle ta tha "From $SHA1 $magic_timestamp" marker you should omit From: n' Date: lines from tha patch file\&. Da patch title is likely ta be different from tha subject of tha rap tha patch is up in response to, so it is likely dat you would wanna keep tha Subject: line, like tha example above\&.
.SS "Checkin fo' patch corruption"
.sp
Many mailaz if not set up properly will corrupt whitespace\& yo. Here is two common typez of corruption:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Empty context lines dat do not have
\fIany\fR
whitespace\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Non\-empty context lines dat have one extra whitespace all up in tha beginning\&.
.RE
.sp
One way ta test if yo' MUA is set up erectly is:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Send tha patch ta yo ass, exactly tha way you would, except wit To: n' Cc: lines dat do not contain tha list n' maintainer address\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Save dat patch ta a gangbangin' file up in UNIX mailbox format\&. Call it a\&.patch, say\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Apply it:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git fetch <project> master:test\-apply
$ git checkout test\-apply
$ git reset \-\-hard
$ git be a\&.patch
.fi
.if n \{\
.RE
.\}
.RE
.sp
If it do not apply erectly, there can be various reasons\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da patch itself do not apply cleanly\&. That is
\fIbad\fR
but aint gots much ta do wit yo' MUA\&. Yo ass might wanna rebase tha patch with
\fBgit-rebase\fR(1)
before regeneratin it up in dis case\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da MUA corrupted yo' patch; "am" would diss dat tha patch do not apply\&. Look up in tha \&.git/rebase\-apply/ subdirectory n' peep what
\fIpatch\fR
file gotz nuff n' check fo' tha common corruption patterns mentioned above\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
While at it, check the
\fIinfo\fR
and
\fIfinal\-commit\fR
filez as well\&. If what tha fuck is in
\fIfinal\-commit\fR
is not exactly what tha fuck you would wanna peep up in tha commit log message, it is straight-up likely dat tha receiver would end up hand editin tha log message when applyin yo' patch\&. Things like "Yea muthafucka, dis is mah first patch\&.\en" up in tha patch e\-mail should come afta tha three\-dash line dat signals tha end of tha commit message\&.
.RE
.SH "MUA-SPECIFIC HINTS"
.sp
Here is some hints on how tha fuck ta successfully submit patches inline rockin various mailers\&.
.SS "GMail"
.sp
GMail aint gots any way ta turn off line wrappin up in tha wizzy intercourse, so it will mangle any emails dat you send\&. Yo ass can however use "git send\-email" n' bust yo' patches all up in tha GMail SMTP server, or use any IMAP email client ta connect ta tha google IMAP server n' forward tha emails all up in that\&.
.sp
For hints on rockin \fIgit send\-email\fR ta bust yo' patches all up in tha GMail SMTP server, peep tha EXAMPLE section of \fBgit-send-email\fR(1)\&.
.sp
For hints on submission rockin tha IMAP intercourse, peep tha EXAMPLE section of \fBgit-imap-send\fR(1)\&.
.SS "Thunderbird"
.sp
By default, Thunderbird will both wrap emails as well as flag dem as bein \fIformat=flowed\fR, both of which will make tha resultin email unusable by Git\&.
.sp
There is three different approaches: use a add\-on ta turn off line wraps, configure Thunderbird ta not mangle patches, or use a external editor ta keep Thunderbird from manglin tha patches\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBApproach #1 (add-on)\fR
.RS 4
.sp
Install tha Toggle Word Wrap add\-on dat be available from \m[blue]\fBhttps://addons\&.mozilla\&.org/thunderbird/addon/toggle\-word\-wrap/\fR\m[] It addz a menu entry "Enable Word Wrap" up in tha composer\(cqs "Options" menu dat you can tick off\&. Now you can compose tha message as you otherwise do (cut + paste, \fIgit format\-patch\fR | \fIgit imap\-send\fR, etc) yo, but you gotta bang line breaks manually up in any text dat you type\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBApproach #2 (configuration)\fR
.RS 4
.sp
Three steps:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Configure yo' mail server composizzle as plain text: Edit\&...Account Settings\&...Composizzle & Addressing, uncheck "Compose Lyrics up in HTML"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Configure yo' general composizzle window ta not wrap\&.
.sp
In Thunderbird 2: Edit\&.\&.Preferences\&.\&.Composition, wrap plain text lyrics at 0
.sp
In Thunderbird 3: Edit\&.\&.Preferences\&.\&.Advanced\&.\&.Config Editor\&. Right back up in yo muthafuckin ass. Search fo' "mail\&.wrap_long_lines"\&. Toggle it ta make shizzle it is set to
false\& fo' realz. Also, search fo' "mailnews\&.wraplength" n' set tha value ta 0\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Disable tha use of format=flowed: Edit\&.\&.Preferences\&.\&.Advanced\&.\&.Config Editor\&. Right back up in yo muthafuckin ass. Search fo' "mailnews\&.send_plaintext_flowed"\&. Toggle it ta make shizzle it is set to
false\&.
.RE
.sp
Afta dat is done, you should be able ta compose email as you otherwise would (cut + paste, \fIgit format\-patch\fR | \fIgit imap\-send\fR, etc), n' tha patches aint gonna be mangled\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBApproach #3 (external editor)\fR
.RS 4
.sp
Da followin Thunderbird extensions is needed: AboutConfig from \m[blue]\fBhttp://aboutconfig\&.mozdev\&.org/\fR\m[] n' External Editor from \m[blue]\fBhttp://globs\&.org/articles\&.php?lng=en&pg=8\fR\m[]
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Prepare tha patch as a text file rockin yo' method of chizzle\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Before openin a cold-ass lil compose window, use Edit\(->Account Settings ta uncheck tha "Compose lyrics up in HTML format" settin up in tha "Composizzle & Addressing" panel of tha account ta be used ta bust tha patch\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
In tha main Thunderbird window,
\fIbefore\fR
you open tha compose window fo' tha patch, use Tools\(->about:config ta set tha followin ta tha indicated joints:
.sp
.if n \{\
.RS 4
.\}
.nf
        mailnews\&.send_plaintext_flowed  => false
        mailnews\&.wraplength             => 0
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
Open a cold-ass lil compose window n' click tha external editor icon\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
In tha external editor window, read up in tha patch file n' exit tha editor normally\&.
.RE
.sp
Side note: it may be possible ta do step 2 wit about:config n' tha followin settings but no one\(cqs tried yet\&.
.sp
.if n \{\
.RS 4
.\}
.nf
        mail\&.html_compose                       => false
        mail\&.identity\&.default\&.compose_html      => false
        mail\&.identity\&.id?\&.compose_html          => false
.fi
.if n \{\
.RE
.\}
.sp
.sp
There be a script up in contrib/thunderbird\-patch\-inline which can help you include patches wit Thunderbird up in a easy as fuck  way\&. To use it, do tha steps above n' then use tha script as tha external editor\&.
.RE
.SS "KMail"
.sp
This should help you ta submit patches inline rockin KMail\&.
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Prepare tha patch as a text file\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Click on New Mail\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Go under "Options" up in tha Composer window n' be shizzle dat "Word wrap" aint set\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
Use Message \(-> Insert file\&... n' bang tha patch\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
Back up in tha compose window: add whatever other text you wish ta tha message, complete tha addressin n' subject fields, n' press send\&.
.RE
.SH "EXAMPLES"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Extract commits between revisions R1 n' R2, n' apply dem on top of tha current branch using
\fIgit am\fR
to cherry\-pick them:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git format\-patch \-k \-\-stdout R1\&.\&.R2 | git be \-3 \-k
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Extract all commits which is up in tha current branch but not up in tha origin branch:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git format\-patch origin
.fi
.if n \{\
.RE
.\}
.sp
For each commit a separate file is pimped up in tha current directory\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Extract all commits dat lead to
\fIorigin\fR
since tha inception of tha project:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git format\-patch \-\-root origin
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da same as tha previous one:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git format\-patch \-M \-B origin
.fi
.if n \{\
.RE
.\}
.sp
Additionally, it detects n' handlez renames n' complete rewrites intelligently ta produce a renamin patch\& fo' realz. A renamin patch reduces tha amount of text output, n' generally make it easier ta review\&. Note dat non\-Git "patch" programs won\(cqt KNOW renamin patches, so use it only when you know tha recipient uses Git ta apply yo' patch\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Extract three topmost commits from tha current branch n' format dem as e\-mailable patches:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git format\-patch \-3
.fi
.if n \{\
.RE
.\}
.sp
.RE
.SH "SEE ALSO"
.sp
\fBgit-am\fR(1), \fBgit-send-email\fR(1)
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
