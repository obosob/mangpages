.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "QEMU 1"
.TH QEMU 1 "2014-12-09" " " " "
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
qemu\-doc \- QEMU Emulator User Documentation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
usage: qemu\-system\-i386 [options] [\fIdisk_image\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \s-1QEMU PC\s0 System emulator simulates the
followin peripherals:
.IP "\-" 4
i440FX host \s-1PCI\s0 bridge n' \s-1PIIX3 PCI\s0 ta \s-1ISA\s0 bridge
.IP "\-" 4
Cirrus \s-1CLGD 5446 PCI VGA\s0 card or dummy \s-1VGA\s0 card wit Bochs \s-1VESA\s0
extensions (hardware level, includin all non standard modes).
.IP "\-" 4
\&\s-1PS/2\s0 mouse n' keyboard
.IP "\-" 4
2 \s-1PCI IDE\s0 intercourses wit hard disk n' CD-ROM support
.IP "\-" 4
Floppy disk
.IP "\-" 4
\&\s-1PCI\s0 n' \s-1ISA\s0 network adapters
.IP "\-" 4
Serial ports
.IP "\-" 4
Creatizzle SoundBlasta 16 sound card
.IP "\-" 4
\&\s-1ENSONIQ\s0 AudioPCI \s-1ES1370\s0 sound card
.IP "\-" 4
Intel 82801AA \s-1AC97\s0 Audio compatible sound card
.IP "\-" 4
Intel \s-1HD\s0 Audio Controlla n' \s-1HDA\s0 codec
.IP "\-" 4
Adlib (\s-1OPL2\s0) \- Yamaha \s-1YM3812\s0 compatible chip
.IP "\-" 4
Gravis Ultrasound \s-1GF1\s0 sound card
.IP "\-" 4
\&\s-1CS4231A\s0 compatible sound card
.IP "\-" 4
\&\s-1PCI UHCI STD\s0 controlla n' a virtual \s-1STD\s0 hub.
.PP
\&\s-1SMP\s0 is supported wit up ta 255 CPUs.
.PP
\&\s-1QEMU\s0 uses tha \s-1PC BIOS\s0 from tha Seabios project n' tha Plex86/Bochs \s-1LGPL
VGA BIOS.\s0
.PP
\&\s-1QEMU\s0 uses \s-1YM3812\s0 emulation by Tatsuyuki Satoh.
.PP
\&\s-1QEMU\s0 uses \s-1GUS\s0 emulation (\s-1GUSEMU32\s0 <\fBhttp://www.deinmeister.de/gusemu/\fR>)
by Tibor \*(L"\s-1TS\*(R"\s0 Sch√ºtz.
.PP
Note that, by default, \s-1GUS\s0 shares \s-1\fIIRQ\s0\fR\|(7) wit parallel ports n' so
\&\s-1QEMU\s0 must be holla'd at ta not have parallel ports ta have hustlin \s-1GUS.\s0
.PP
.Vb 1
\&        qemu\-system\-i386 dos.img \-soundhw gus \-parallel none
.Ve
.PP
Alternatively:
.PP
.Vb 1
\&        qemu\-system\-i386 dos.img \-device gus,irq=5
.Ve
.PP
Or some other unclaimed \s-1IRQ.\s0
.PP
\&\s-1CS4231A\s0 is tha chip used up in Windows Sound System n' \s-1GUSMAX\s0 shizzle
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fIdisk_image\fR be a raw hard disk image fo' \s-1IDE\s0 hard disk 0. Right back up in yo muthafuckin ass. Some
targets do not need a gangbangin' finger-lickin' disk image.
.PP
Standard options:
.IP "\fB\-h\fR" 4
.IX Item "-h"
Display help n' exit
.IP "\fB\-version\fR" 4
.IX Item "-version"
Display version shiznit n' exit
.IP "\fB\-machine [type=]\fR\fIname\fR\fB[,prop=\fR\fIvalue\fR\fB[,...]]\fR" 4
.IX Item "-machine [type=]name[,prop=value[,...]]"
Select tha emulated machine by \fIname\fR. Use \f(CW\*(C`\-machine help\*(C'\fR ta list
available machines. Right back up in yo muthafuckin ass. Supported machine propertizzles are:
.RS 4
.IP "\fBaccel=\fR\fIaccels1\fR\fB[:\fR\fIaccels2\fR\fB[:...]]\fR" 4
.IX Item "accel=accels1[:accels2[:...]]"
This is used ta enable a accelerator. Shiiit, dis aint no joke. Dependin on tha target architecture,
kvm, xen, or tcg can be available. By default, tcg is used. Y'all KNOW dat shit, muthafucka! If there is more
than one accelerator specified, tha next one is used if tha previous one fails
to initialize.
.IP "\fBkernel_irqchip=on|off\fR" 4
.IX Item "kernel_irqchip=on|off"
Enablez in-kernel irqchip support fo' tha chosen accelerator when available.
.IP "\fBkvm_shadow_mem=size\fR" 4
.IX Item "kvm_shadow_mem=size"
Defines tha size of tha \s-1KVM\s0 shadow \s-1MMU.\s0
.IP "\fBdump\-guest\-core=on|off\fR" 4
.IX Item "dump-guest-core=on|off"
Include hommie memory up in a cold-ass lil core dump. Da default is on.
.IP "\fBmem\-merge=on|off\fR" 4
.IX Item "mem-merge=on|off"
Enablez or disablez memory merge support. This feature, when supported by
the host, de-duplicates identical memory pages among VMs instances
(enabled by default).
.RE
.RS 4
.RE
.IP "\fB\-cpu\fR \fImodel\fR" 4
.IX Item "-cpu model"
Select \s-1CPU\s0 model (\f(CW\*(C`\-cpu help\*(C'\fR fo' list n' additionizzle feature selection)
.IP "\fB\-smp [cpus=]\fR\fIn\fR\fB[,cores=\fR\fIcores\fR\fB][,threads=\fR\fIthreads\fR\fB][,sockets=\fR\fIsockets\fR\fB][,maxcpus=\fR\fImaxcpus\fR\fB]\fR" 4
.IX Item "-smp [cpus=]n[,cores=cores][,threads=threads][,sockets=sockets][,maxcpus=maxcpus]"
Simulate a \s-1SMP\s0 system wit \fIn\fR CPUs. On tha \s-1PC\s0 target, up ta 255
CPUs is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. On Sparc32 target, Linux limits tha number of usable CPUs
to 4.
For tha \s-1PC\s0 target, tha number of \fIcores\fR per socket, tha number
of \fIthreads\fR per cores n' tha total number of \fIsockets\fR can be
specified. Y'all KNOW dat shit, muthafucka! Missin joints is ghon be computed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If any on tha three joints is
given, tha total number of CPUs \fIn\fR can be omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. \fImaxcpus\fR
specifies tha maximum number of hotpluggable CPUs.
.IP "\fB\-numa\fR \fIopts\fR" 4
.IX Item "-numa opts"
Simulate a multi node \s-1NUMA\s0 system. If mem n' cpus is omitted, resources
are split equally.
.IP "\fB\-add\-fd fd=\fR\fIfd\fR\fB,set=\fR\fIset\fR\fB[,opaque=\fR\fIopaque\fR\fB]\fR" 4
.IX Item "-add-fd fd=fd,set=set[,opaque=opaque]"
Add a gangbangin' file descriptor ta a fd set.  Valid options are:
.RS 4
.IP "\fBfd=\fR\fIfd\fR" 4
.IX Item "fd=fd"
This option defines tha file descriptor of which a thugged-out duplicate be added ta fd set.
Da file descriptor cannot be stdin, stdout, or stderr.
.IP "\fBset=\fR\fIset\fR" 4
.IX Item "set=set"
This option defines tha \s-1ID\s0 of tha fd set ta add tha file descriptor to.
.IP "\fBopaque=\fR\fIopaque\fR" 4
.IX Item "opaque=opaque"
This option defines a gangbangin' free-form strang dat can be used ta describe \fIfd\fR.
.RE
.RS 4
.Sp
Yo ass can open a image rockin pre-opened file descriptors from a fd set:
.Sp
.Vb 4
\&        qemu\-system\-i386
\&        \-add\-fd fd=3,set=2,opaque="rdwr:/path/to/file"
\&        \-add\-fd fd=4,set=2,opaque="rdonly:/path/to/file"
\&        \-drive file=/dev/fdset/2,index=0,media=disk
.Ve
.RE
.IP "\fB\-set\fR \fIgroup\fR\fB.\fR\fIid\fR\fB.\fR\fIarg\fR\fB=\fR\fIvalue\fR" 4
.IX Item "-set group.id.arg=value"
Set parameta \fIarg\fR fo' item \fIid\fR of type \fIgroup\fR\en"
.IP "\fB\-global\fR \fIdriver\fR\fB.\fR\fIprop\fR\fB=\fR\fIvalue\fR" 4
.IX Item "-global driver.prop=value"
Set default value of \fIdriver\fRz property \fIprop\fR ta \fIvalue\fR, e.g.:
.Sp
.Vb 1
\&        qemu\-system\-i386 \-global ide\-drive.physical_block_size=4096 \-drive file=file,if=ide,index=0,media=disk
.Ve
.Sp
In particular, you can use dis ta set driver propertizzles fo' devices which are
created automatically by tha machine model. To create a thang which is not
created automatically n' set propertizzles on it, use \-\fBdevice\fR.
.IP "\fB\-boot [order=\fR\fIdrives\fR\fB][,once=\fR\fIdrives\fR\fB][,menu=on|off][,splash=\fR\fIsp_name\fR\fB][,splash\-time=\fR\fIsp_time\fR\fB][,reboot\-timeout=\fR\fIrb_timeout\fR\fB][,strict=on|off]\fR" 4
.IX Item "-boot [order=drives][,once=drives][,menu=on|off][,splash=sp_name][,splash-time=sp_time][,reboot-timeout=rb_timeout][,strict=on|off]"
Specify boot order \fIdrives\fR as a strang of drive letters. Valid
drive lettas depend on tha target achitecture. Da x86 \s-1PC\s0 uses: a, b
(floppy 1 n' 2), c (first hard disk), d (first CD-ROM), n\-p (Etherboot
from network adapta 1\-4), hard disk boot is tha default. To apply a
particular boot order only on tha straight-up original gangsta startup, specify it via
\&\fBonce\fR.
.Sp
Interactizzle boot menus/prompts can be enabled via \fBmenu=on\fR as far
as firmware/BIOS supports em. Da default is non-interactizzle boot.
.Sp
A splash picture could be passed ta bios, enablin user ta show it as logo,
when option splash=\fIsp_name\fR is given n' menu=on, If firmware/BIOS
supports em. Currently Seabios fo' X86 system support dat shit.
limitation: Da splash file could be a jpeg file or a \s-1BMP\s0 file up in 24 \s-1BPP\s0
format(true color). Da resolution should be supported by tha \s-1SVGA\s0 mode, so
the recommended is 320x240, 640x480, 800x640.
.Sp
A timeout could be passed ta bios, hommie will pause fo' \fIrb_timeout\fR ms
when boot failed, then reboot. If \fIrb_timeout\fR is '\-1', hommie will not
reboot, qemu passes '\-1' ta bios by default. Currently Seabios fo' X86
system support dat shit.
.Sp
Do strict boot via \fBstrict=on\fR as far as firmware/BIOS
supports dat shit. This only effects when boot prioritizzle is chizzled by
bootindex options. Da default is non-strict boot.
.Sp
.Vb 6
\&        # try ta boot from network first, then from hard disk
\&        qemu\-system\-i386 \-boot order=nc
\&        # boot from CD\-ROM first, switch back ta default order afta reboot
\&        qemu\-system\-i386 \-boot once=d
\&        # boot wit a splash picture fo' 5 seconds.
\&        qemu\-system\-i386 \-boot menu=on,splash=/root/boot.bmp,splash\-time=5000
.Ve
.Sp
Note: Da legacy format '\-boot \fIdrives\fR' is still supported but its
use is discouraged as it may be removed from future versions.
.IP "\fB\-m\fR \fImegs\fR" 4
.IX Item "-m megs"
Set virtual \s-1RAM\s0 size ta \fImegs\fR megabytes. Default is 128 MiB.  Optionally,
a suffix of \*(L"M\*(R" or \*(L"G\*(R" can be used ta signify a value up in megabytes or
gigabytes respectively.
.IP "\fB\-mem\-path\fR \fIpath\fR" 4
.IX Item "-mem-path path"
Allocate hommie \s-1RAM\s0 from a temporarily pimped file up in \fIpath\fR.
.IP "\fB\-mem\-prealloc\fR" 4
.IX Item "-mem-prealloc"
Preallocate memory when rockin \-mem\-path.
.IP "\fB\-k\fR \fIlanguage\fR" 4
.IX Item "-k language"
Use keyboard layout \fIlanguage\fR (for example \f(CW\*(C`fr\*(C'\fR for
French). This option is only needed where it aint easy as fuck  ta git raw \s-1PC\s0
keycodes (e.g. on Macs, wit some X11 servers or wit a \s-1VNC\s0
display). Yo ass don't normally need ta use it on PC/Linux or PC/Windows
hosts.
.Sp
Da available layouts are:
.Sp
.Vb 3
\&        ar  de\-ch  es  fo     fr\-ca  hu  ja  mk     no  pt\-br  sv
\&        da  en\-gb  et  fr     fr\-ch  is  lt  nl     pl  ru     th
\&        de  en\-us  fi  fr\-be  hr     it  lv  nl\-be  pt  sl     tr
.Ve
.Sp
Da default is \f(CW\*(C`en\-us\*(C'\fR.
.IP "\fB\-audio\-help\fR" 4
.IX Item "-audio-help"
Will show tha audio subsystem help: list of drivers, tunable
parameters.
.IP "\fB\-soundhw\fR \fIcard1\fR\fB[,\fR\fIcard2\fR\fB,...] or \-soundhw all\fR" 4
.IX Item "-soundhw card1[,card2,...] or -soundhw all"
Enable audio n' selected sound hardware. Use 'help' ta print all
available sound hardware.
.Sp
.Vb 6
\&        qemu\-system\-i386 \-soundhw sb16,adlib disk.img
\&        qemu\-system\-i386 \-soundhw es1370 disk.img
\&        qemu\-system\-i386 \-soundhw ac97 disk.img
\&        qemu\-system\-i386 \-soundhw hda disk.img
\&        qemu\-system\-i386 \-soundhw all disk.img
\&        qemu\-system\-i386 \-soundhw help
.Ve
.Sp
Note dat Linuxz i810_audio \s-1OSS\s0 kernel (for \s-1AC97\s0) module might
require manually specifyin clocking.
.Sp
.Vb 1
\&        modprobe i810_audio clocking=48000
.Ve
.IP "\fB\-balloon none\fR" 4
.IX Item "-balloon none"
Disable balloon device.
.IP "\fB\-balloon virtio[,addr=\fR\fIaddr\fR\fB]\fR" 4
.IX Item "-balloon virtio[,addr=addr]"
Enable virtio balloon thang (default), optionally wit \s-1PCI\s0 address
\&\fIaddr\fR.
.IP "\fB\-device\fR \fIdriver\fR\fB[,\fR\fIprop\fR\fB[=\fR\fIvalue\fR\fB][,...]]\fR" 4
.IX Item "-device driver[,prop[=value][,...]]"
Add thang \fIdriver\fR.  \fIprop\fR=\fIvalue\fR sets driver
properties. Put ya muthafuckin choppers up if ya feel dis!  Valid propertizzles depend on tha driver n' shit.  To git help on
possible drivers n' properties, use \f(CW\*(C`\-device help\*(C'\fR and
\&\f(CW\*(C`\-device \f(CIdriver\f(CW,help\*(C'\fR.
.IP "\fB\-name\fR \fIname\fR" 4
.IX Item "-name name"
Sets tha \fIname\fR of tha guest.
This name is ghon be displayed up in tha \s-1SDL\s0 window caption.
Da \fIname\fR will also be used fo' tha \s-1VNC\s0 server.
Also optionally set tha top visible process name up in Linux.
.IP "\fB\-uuid\fR \fIuuid\fR" 4
.IX Item "-uuid uuid"
Set system \s-1UUID.\s0
.PP
Block thang options:
.IP "\fB\-fda\fR \fIfile\fR" 4
.IX Item "-fda file"
.PD 0
.IP "\fB\-fdb\fR \fIfile\fR" 4
.IX Item "-fdb file"
.PD
Use \fIfile\fR as floppy disk 0/1 image. Yo ass can
use tha host floppy by rockin \fI/dev/fd0\fR as filename.
.IP "\fB\-hda\fR \fIfile\fR" 4
.IX Item "-hda file"
.PD 0
.IP "\fB\-hdb\fR \fIfile\fR" 4
.IX Item "-hdb file"
.IP "\fB\-hdc\fR \fIfile\fR" 4
.IX Item "-hdc file"
.IP "\fB\-hdd\fR \fIfile\fR" 4
.IX Item "-hdd file"
.PD
Use \fIfile\fR as hard disk 0, 1, 2 or 3 image.
.IP "\fB\-cdrom\fR \fIfile\fR" 4
.IX Item "-cdrom file"
Use \fIfile\fR as CD-ROM image (you cannot use \fB\-hdc\fR and
\&\fB\-cdrom\fR all up in tha same time). Yo ass can use tha host CD-ROM by
usin \fI/dev/cdrom\fR as filename.
.IP "\fB\-drive\fR \fIoption\fR\fB[,\fR\fIoption\fR\fB[,\fR\fIoption\fR\fB[,...]]]\fR" 4
.IX Item "-drive option[,option[,option[,...]]]"
Define a freshly smoked up drive. Valid options are:
.RS 4
.IP "\fBfile=\fR\fIfile\fR" 4
.IX Item "file=file"
This option defines which disk image ta use with
this drive. If tha filename gotz nuff comma, you must double it
(for instance, \*(L"file=my,,file\*(R" ta use file \*(L"my,file\*(R").
.Sp
Special filez like fuckin iSCSI devices can be specified rockin protocol
specific URLs. Right back up in yo muthafuckin ass. See tha section fo' \*(L"Device \s-1URL\s0 Syntax\*(R" fo' mo' shiznit.
.IP "\fBif=\fR\fIinterface\fR" 4
.IX Item "if=interface"
This option defines on which type on intercourse tha drive is connected.
Available types are: ide, scsi, sd, mtd, floppy, pflash, virtio.
.IP "\fBbus=\fR\fIbus\fR\fB,unit=\fR\fIunit\fR" 4
.IX Item "bus=bus,unit=unit"
These options define where is connected tha drive by definin tha bus number and
the unit id.
.IP "\fBindex=\fR\fIindex\fR" 4
.IX Item "index=index"
This option defines where is connected tha drive by rockin a index up in tha list
of available connectorz of a given intercourse type.
.IP "\fBmedia=\fR\fImedia\fR" 4
.IX Item "media=media"
This option defines tha type of tha media: disk or cdrom.
.IP "\fBcyls=\fR\fIc\fR\fB,heads=\fR\fIh\fR\fB,secs=\fR\fIs\fR\fB[,trans=\fR\fIt\fR\fB]\fR" 4
.IX Item "cyls=c,heads=h,secs=s[,trans=t]"
These options have tha same definizzle as they have up in \fB\-hdachs\fR.
.IP "\fBsnapshot=\fR\fIsnapshot\fR" 4
.IX Item "snapshot=snapshot"
\&\fIsnapshot\fR is \*(L"on\*(R" or \*(L"off\*(R" n' allows ta enable snapshot fo' given drive (see \fB\-snapshot\fR).
.IP "\fBcache=\fR\fIcache\fR" 4
.IX Item "cache=cache"
\&\fIcache\fR is \*(L"none\*(R", \*(L"writeback\*(R", \*(L"unsafe\*(R", \*(L"directsync\*(R" or \*(L"writethrough\*(R" n' controls how tha fuck tha host cache is used ta access block data.
.IP "\fBaio=\fR\fIaio\fR" 4
.IX Item "aio=aio"
\&\fIaio\fR is \*(L"threads\*(R", or \*(L"native\*(R" n' selects between pthread based disk I/O n' natizzle Linux \s-1AIO.\s0
.IP "\fBdiscard=\fR\fIdiscard\fR" 4
.IX Item "discard=discard"
\&\fIdiscard\fR is one of \*(L"ignore\*(R" (or \*(L"off\*(R") or \*(L"unmap\*(R" (or \*(L"on\*(R") n' controls whether \fIdiscard\fR (also known as \fItrim\fR or \fIunmap\fR) requests is ignored or passed ta tha filesystem.  Some machine types may not support discard requests.
.IP "\fBformat=\fR\fIformat\fR" 4
.IX Item "format=format"
Specify which disk \fIformat\fR is ghon be used rather than detecting
the format.  Can be used ta specifiy format=raw ta avoid interpreting
an untrusted format header.
.IP "\fBserial=\fR\fIserial\fR" 4
.IX Item "serial=serial"
This option specifies tha serial number ta assign ta tha device.
.IP "\fBaddr=\fR\fIaddr\fR" 4
.IX Item "addr=addr"
Specify tha controllerz \s-1PCI\s0 address (if=virtio only).
.IP "\fBwerror=\fR\fIaction\fR\fB,rerror=\fR\fIaction\fR" 4
.IX Item "werror=action,rerror=action"
Specify which \fIaction\fR ta take on write n' read errors. Valid actions are:
\&\*(L"ignore\*(R" (ignore tha error n' try ta continue), \*(L"stop\*(R" (pause \s-1QEMU\s0),
\&\*(L"report\*(R" (report tha error ta tha guest), \*(L"enospc\*(R" (pause \s-1QEMU\s0 only if the
host disk is full; report tha error ta tha hommie otherwise).
Da default settin is \fBwerror=enospc\fR n' \fBrerror=report\fR.
.IP "\fBreadonly\fR" 4
.IX Item "readonly"
Open drive \fBfile\fR as read-only. Guest write attempts will fail.
.IP "\fBcopy\-on\-read=\fR\fIcopy-on-read\fR" 4
.IX Item "copy-on-read=copy-on-read"
\&\fIcopy-on-read\fR is \*(L"on\*(R" or \*(L"off\*(R" n' enablez whether ta copy read backing
file sectors tha fuck into tha image file.
.RE
.RS 4
.Sp
By default, tha \fBcache=writeback\fR mode is used. Y'all KNOW dat shit, muthafucka! Well shiiiit, it will report data
writes as completed as soon as tha data is present up in tha host page cache.
This is safe as long as yo' hommie \s-1OS\s0 make shizzle ta erectly flush disk caches
where needed. Y'all KNOW dat shit, muthafucka! If yo' hommie \s-1OS\s0 do not handle volatile disk write caches
correctly n' yo' host crashes or loses power, then tha hommie may experience
data corruption.
.Sp
For such guests, you should consider rockin \fBcache=writethrough\fR. This
means dat tha host page cache is ghon be used ta read n' write data yo, but write
notification is ghon be busted ta tha hommie only afta \s-1QEMU\s0 has made shizzle ta flush
each write ta tha disk. Be aware dat dis has a major impact on performance.
.Sp
Da host page cache can be avoided entirely wit \fBcache=none\fR.  This will
attempt ta do disk \s-1IO\s0 directly ta tha guestz memory.  \s-1QEMU\s0 may still perform
an internal copy of tha data. Note dat dis is considered a writeback mode and
the hommie \s-1OS\s0 must handle tha disk write cache erectly up in order ta avoid data
corruption on host crashes.
.Sp
Da host page cache can be avoided while only bustin  write notifications to
the hommie when tha data has been flushed ta tha disk using
\&\fBcache=directsync\fR.
.Sp
In case you couldn't give a fuckin shiznit bout data integritizzle over host failures, use
\&\fBcache=unsafe\fR. This option  drops some lyrics ta \s-1QEMU\s0 dat it never need ta write any
data ta tha disk but can instead keep thangs up in cache. If anythang goes wrong,
like yo' host losin power, tha disk storage gettin disconnected accidentally,
etc. yo' image will most probably be rendered unusable.   When using
the \fB\-snapshot\fR option, unsafe cachin be always used.
.Sp
Copy-on-read avoidz accessin tha same backin file sectors repeatedly n' is
useful when tha backin file is over a slow network.  By default copy-on-read
is off.
.Sp
Instead of \fB\-cdrom\fR you can use:
.Sp
.Vb 1
\&        qemu\-system\-i386 \-drive file=file,index=2,media=cdrom
.Ve
.Sp
Instead of \fB\-hda\fR, \fB\-hdb\fR, \fB\-hdc\fR, \fB\-hdd\fR, you can
use:
.Sp
.Vb 4
\&        qemu\-system\-i386 \-drive file=file,index=0,media=disk
\&        qemu\-system\-i386 \-drive file=file,index=1,media=disk
\&        qemu\-system\-i386 \-drive file=file,index=2,media=disk
\&        qemu\-system\-i386 \-drive file=file,index=3,media=disk
.Ve
.Sp
Yo ass can open a image rockin pre-opened file descriptors from a fd set:
.Sp
.Vb 4
\&        qemu\-system\-i386
\&        \-add\-fd fd=3,set=2,opaque="rdwr:/path/to/file"
\&        \-add\-fd fd=4,set=2,opaque="rdonly:/path/to/file"
\&        \-drive file=/dev/fdset/2,index=0,media=disk
.Ve
.Sp
Yo ass can connect a \s-1CDROM\s0 ta tha slave of ide0:
.Sp
.Vb 1
\&        qemu\-system\-i386 \-drive file=file,if=ide,index=1,media=cdrom
.Ve
.Sp
If you don't specify tha \*(L"file=\*(R" argument, you define a empty drive:
.Sp
.Vb 1
\&        qemu\-system\-i386 \-drive if=ide,index=1,media=cdrom
.Ve
.Sp
Yo ass can connect a \s-1SCSI\s0 disk wit unit \s-1ID 6\s0 on tha bus #0:
.Sp
.Vb 1
\&        qemu\-system\-i386 \-drive file=file,if=scsi,bus=0,unit=6
.Ve
.Sp
Instead of \fB\-fda\fR, \fB\-fdb\fR, you can use:
.Sp
.Vb 2
\&        qemu\-system\-i386 \-drive file=file,index=0,if=floppy
\&        qemu\-system\-i386 \-drive file=file,index=1,if=floppy
.Ve
.Sp
By default, \fIinterface\fR is \*(L"ide\*(R" n' \fIindex\fR be automatically
incremented:
.Sp
.Vb 1
\&        qemu\-system\-i386 \-drive file=a \-drive file=b"
.Ve
.Sp
is interpreted like:
.Sp
.Vb 1
\&        qemu\-system\-i386 \-hda a \-hdb b
.Ve
.RE
.IP "\fB\-mtdblock\fR \fIfile\fR" 4
.IX Item "-mtdblock file"
Use \fIfile\fR as on-board Flash memory image.
.IP "\fB\-sd\fR \fIfile\fR" 4
.IX Item "-sd file"
Use \fIfile\fR as SecureDigital card image.
.IP "\fB\-pflash\fR \fIfile\fR" 4
.IX Item "-pflash file"
Use \fIfile\fR as a parallel flash image.
.IP "\fB\-snapshot\fR" 4
.IX Item "-snapshot"
Write ta temporary filez instead of disk image files. In dis case,
the raw disk image you use aint freestyled back. Yo ass can however force
the write back by pressin \fBC\-a s\fR.
.IP "\fB\-hdachs\fR \fIc\fR\fB,\fR\fIh\fR\fB,\fR\fIs\fR\fB,[,\fR\fIt\fR\fB]\fR" 4
.IX Item "-hdachs c,h,s,[,t]"
Force hard disk 0 physical geometry (1 <= \fIc\fR <= 16383, 1 <=
\&\fIh\fR <= 16, 1 <= \fIs\fR <= 63) n' optionally force tha \s-1BIOS\s0
translation mode (\fIt\fR=none, lba or auto). Usually \s-1QEMU\s0 can guess
all dem parameters. This option is useful fo' oldschool MS-DOS disk
images.
.IP "\fB\-fsdev\fR \fIfsdriver\fR\fB,id=\fR\fIid\fR\fB,path=\fR\fIpath\fR\fB,[security_model=\fR\fIsecurity_model\fR\fB][,writeout=\fR\fIwriteout\fR\fB][,readonly][,socket=\fR\fIsocket\fR\fB|sock_fd=\fR\fIsock_fd\fR\fB]\fR" 4
.IX Item "-fsdev fsdriver,id=id,path=path,[security_model=security_model][,writeout=writeout][,readonly][,socket=socket|sock_fd=sock_fd]"
Define a freshly smoked up file system device. Valid options are:
.RS 4
.IP "\fIfsdriver\fR" 4
.IX Item "fsdriver"
This option specifies tha fs driver backend ta use.
Currently \*(L"local\*(R", \*(L"handle\*(R" n' \*(L"proxy\*(R" file system drivers is supported.
.IP "\fBid=\fR\fIid\fR" 4
.IX Item "id=id"
Specifies identifier fo' dis device
.IP "\fBpath=\fR\fIpath\fR" 4
.IX Item "path=path"
Specifies tha export path fo' tha file system device. Filez under
this path is ghon be available ta tha 9p client on tha guest.
.IP "\fBsecurity_model=\fR\fIsecurity_model\fR" 4
.IX Item "security_model=security_model"
Specifies tha securitizzle model ta be used fo' dis export path.
Supported securitizzle models is \*(L"passthrough\*(R", \*(L"mapped-xattr\*(R", \*(L"mapped-file\*(R" n' \*(L"none\*(R".
In \*(L"passthrough\*(R" securitizzle model, filez is stored rockin tha same
credentials as they is pimped on tha guest. This requires \s-1QEMU\s0
to run as root. In \*(L"mapped-xattr\*(R" securitizzle model, a shitload of tha file
attributes like uid, gid, mode bits n' link target is stored as
file attributes. For \*(L"mapped-file\*(R" these attributes is stored up in the
hidden .virtfs_metadata directory. Directories exported by dis securitizzle model cannot
interact wit other unix tools. \*(L"none\*(R" securitizzle model is same as
passall up in except tha sever won't report failures if it fails to
set file attributes like ballership. Right back up in yo muthafuckin ass. Securitizzle model is mandatory
only fo' local fsdriver n' shit. Other fsdrivers (like handle, proxy) don't take
securitizzle model as a parameter.
.IP "\fBwriteout=\fR\fIwriteout\fR" 4
.IX Item "writeout=writeout"
This be a optionizzle argument. Da only supported value is \*(L"immediate\*(R".
This means dat host page cache is ghon be used ta read n' write data but
write notification is ghon be busted ta tha hommie only when tha data has been
reported as freestyled by tha storage subsystem.
.IP "\fBreadonly\fR" 4
.IX Item "readonly"
Enablez exportin 9p share as a readonly mount fo' guests, n' you can put dat on yo' toast. By default
read-write access is given.
.IP "\fBsocket=\fR\fIsocket\fR" 4
.IX Item "socket=socket"
Enablez proxy filesystem driver ta use passed socket file fo' communicating
with virtfs-proxy-helper
.IP "\fBsock_fd=\fR\fIsock_fd\fR" 4
.IX Item "sock_fd=sock_fd"
Enablez proxy filesystem driver ta use passed socket descriptor for
communicatin wit virtfs-proxy-helper n' shit. Usually a helper like libvirt
will create socketpair n' pass one of tha fdz as sock_fd
.RE
.RS 4
.Sp
\&\-fsdev option is used along wit \-device driver \*(L"virtio\-9p\-pci\*(R".
.RE
.IP "\fB\-device virtio\-9p\-pci,fsdev=\fR\fIid\fR\fB,mount_tag=\fR\fImount_tag\fR" 4
.IX Item "-device virtio-9p-pci,fsdev=id,mount_tag=mount_tag"
Options fo' virtio\-9p\-pci driver are:
.RS 4
.IP "\fBfsdev=\fR\fIid\fR" 4
.IX Item "fsdev=id"
Specifies tha id value specified along wit \-fsdev option
.IP "\fBmount_tag=\fR\fImount_tag\fR" 4
.IX Item "mount_tag=mount_tag"
Specifies tha tag name ta be used by tha hommie ta mount dis export point
.RE
.RS 4
.RE
.IP "\fB\-virtfs\fR \fIfsdriver\fR\fB[,path=\fR\fIpath\fR\fB],mount_tag=\fR\fImount_tag\fR\fB[,security_model=\fR\fIsecurity_model\fR\fB][,writeout=\fR\fIwriteout\fR\fB][,readonly][,socket=\fR\fIsocket\fR\fB|sock_fd=\fR\fIsock_fd\fR\fB]\fR" 4
.IX Item "-virtfs fsdriver[,path=path],mount_tag=mount_tag[,security_model=security_model][,writeout=writeout][,readonly][,socket=socket|sock_fd=sock_fd]"
Da general form of a Virtual File system pass-all up in options are:
.RS 4
.IP "\fIfsdriver\fR" 4
.IX Item "fsdriver"
This option specifies tha fs driver backend ta use.
Currently \*(L"local\*(R", \*(L"handle\*(R" n' \*(L"proxy\*(R" file system drivers is supported.
.IP "\fBid=\fR\fIid\fR" 4
.IX Item "id=id"
Specifies identifier fo' dis device
.IP "\fBpath=\fR\fIpath\fR" 4
.IX Item "path=path"
Specifies tha export path fo' tha file system device. Filez under
this path is ghon be available ta tha 9p client on tha guest.
.IP "\fBsecurity_model=\fR\fIsecurity_model\fR" 4
.IX Item "security_model=security_model"
Specifies tha securitizzle model ta be used fo' dis export path.
Supported securitizzle models is \*(L"passthrough\*(R", \*(L"mapped-xattr\*(R", \*(L"mapped-file\*(R" n' \*(L"none\*(R".
In \*(L"passthrough\*(R" securitizzle model, filez is stored rockin tha same
credentials as they is pimped on tha guest. This requires \s-1QEMU\s0
to run as root. In \*(L"mapped-xattr\*(R" securitizzle model, a shitload of tha file
attributes like uid, gid, mode bits n' link target is stored as
file attributes. For \*(L"mapped-file\*(R" these attributes is stored up in the
hidden .virtfs_metadata directory. Directories exported by dis securitizzle model cannot
interact wit other unix tools. \*(L"none\*(R" securitizzle model is same as
passall up in except tha sever won't report failures if it fails to
set file attributes like ballership. Right back up in yo muthafuckin ass. Securitizzle model is mandatory only
for local fsdriver n' shit. Other fsdrivers (like handle, proxy) don't take security
model as a parameter.
.IP "\fBwriteout=\fR\fIwriteout\fR" 4
.IX Item "writeout=writeout"
This be a optionizzle argument. Da only supported value is \*(L"immediate\*(R".
This means dat host page cache is ghon be used ta read n' write data but
write notification is ghon be busted ta tha hommie only when tha data has been
reported as freestyled by tha storage subsystem.
.IP "\fBreadonly\fR" 4
.IX Item "readonly"
Enablez exportin 9p share as a readonly mount fo' guests, n' you can put dat on yo' toast. By default
read-write access is given.
.IP "\fBsocket=\fR\fIsocket\fR" 4
.IX Item "socket=socket"
Enablez proxy filesystem driver ta use passed socket file for
communicatin wit virtfs-proxy-helper n' shit. Usually a helper like libvirt
will create socketpair n' pass one of tha fdz as sock_fd
.IP "\fBsock_fd\fR" 4
.IX Item "sock_fd"
Enablez proxy filesystem driver ta use passed 'sock_fd' as tha socket
descriptor fo' interfacin wit virtfs-proxy-helper
.RE
.RS 4
.RE
.IP "\fB\-virtfs_synth\fR" 4
.IX Item "-virtfs_synth"
Smoke synthetic file system image
.PP
\&\s-1STD\s0 options:
.IP "\fB\-usb\fR" 4
.IX Item "-usb"
Enable tha \s-1STD\s0 driver (will be tha default soon)
.IP "\fB\-usbdevice\fR \fIdevname\fR" 4
.IX Item "-usbdevice devname"
Add tha \s-1STD\s0 thang \fIdevname\fR.
.RS 4
.IP "\fBmouse\fR" 4
.IX Item "mouse"
Virtual Mouse. This will override tha \s-1PS/2\s0 mouse emulation when activated.
.IP "\fBtablet\fR" 4
.IX Item "tablet"
Pointa thang dat uses absolute coordinates (like a touchscreen). This
means \s-1QEMU\s0 be able ta report tha mouse posizzle without havin ta grab the
mouse fo' realz. Also overrides tha \s-1PS/2\s0 mouse emulation when activated.
.IP "\fBdisk:[format=\fR\fIformat\fR\fB]:\fR\fIfile\fR" 4
.IX Item "disk:[format=format]:file"
Mass storage thang based on file. Da optionizzle \fIformat\fR argument
will be used rather than detectin tha format. Can be used ta specifiy
\&\f(CW\*(C`format=raw\*(C'\fR ta avoid interpretin a untrusted format header.
.IP "\fBhost:\fR\fIbus\fR\fB.\fR\fIaddr\fR" 4
.IX Item "host:bus.addr"
Pass all up in tha host thang identified by \fIbus\fR.\fIaddr\fR (Linux only).
.IP "\fBhost:\fR\fIvendor_id\fR\fB:\fR\fIproduct_id\fR" 4
.IX Item "host:vendor_id:product_id"
Pass all up in tha host thang identified by \fIvendor_id\fR:\fIproduct_id\fR
(Linux only).
.IP "\fBserial:[vendorid=\fR\fIvendor_id\fR\fB][,productid=\fR\fIproduct_id\fR\fB]:\fR\fIdev\fR" 4
.IX Item "serial:[vendorid=vendor_id][,productid=product_id]:dev"
Serial converta ta host characta thang \fIdev\fR, peep \f(CW\*(C`\-serial\*(C'\fR fo' the
available devices.
.IP "\fBbraille\fR" 4
.IX Item "braille"
Braille device.  This will use BrlAPI ta display tha braille output on a real
or fake device.
.IP "\fBnet:\fR\fIoptions\fR" 4
.IX Item "net:options"
Network adapta dat supports \s-1CDC\s0 ethernet n' \s-1RNDIS\s0 protocols.
.RE
.RS 4
.RE
.PP
Display options:
.IP "\fB\-display\fR \fItype\fR" 4
.IX Item "-display type"
Select type of display ta use. This option be a replacement fo' the
old steez \-sdl/\-curses/... options. Valid joints fo' \fItype\fR are
.RS 4
.IP "\fBsdl\fR" 4
.IX Item "sdl"
Display vizzle output via \s-1SDL \s0(usually up in a separate graphics
window; peep tha \s-1SDL\s0 documentation fo' other possibilities).
.IP "\fBcurses\fR" 4
.IX Item "curses"
Display vizzle output via curses. For graphics thang models which
support a text mode, \s-1QEMU\s0 can display dis output rockin a
curses/ncurses intercourse. Nothang is displayed when tha graphics
device is up in graphical mode or if tha graphics thang do not support
a text mode. Generally only tha \s-1VGA\s0 thang models support text mode.
.IP "\fBnone\fR" 4
.IX Item "none"
Do not display vizzle output. Da hommie will still peep a emulated
graphics card yo, but its output aint gonna be displayed ta tha \s-1QEMU\s0
user n' shit. This option differs from tha \-nographic option up in dat it
only affects what tha fuck is done wit vizzle output; \-nographic also chizzles
the destination of tha serial n' parallel port data.
.IP "\fBvnc\fR" 4
.IX Item "vnc"
Start a \s-1VNC\s0 server on display <arg>
.RE
.RS 4
.RE
.IP "\fB\-nographic\fR" 4
.IX Item "-nographic"
Normally, \s-1QEMU\s0 uses \s-1SDL\s0 ta display tha \s-1VGA\s0 output. With dis option,
you can straight-up disable graphical output so dat \s-1QEMU\s0 be a simple
command line application. I aint talkin' bout chicken n' gravy biatch. Da emulated serial port is repimped up on
the console n' muxed wit tha monitor (unless repimped up elsewhere
explicitly). Therefore, you can still use \s-1QEMU\s0 ta debug a Linux kernel
with a serial console.  Use \fBC\-a h\fR fo' help on switchin between
the console n' monitor.
.IP "\fB\-curses\fR" 4
.IX Item "-curses"
Normally, \s-1QEMU\s0 uses \s-1SDL\s0 ta display tha \s-1VGA\s0 output.  With dis option,
\&\s-1QEMU\s0 can display tha \s-1VGA\s0 output when up in text mode rockin a
curses/ncurses intercourse.  Nothang is displayed up in graphical mode.
.IP "\fB\-no\-frame\fR" 4
.IX Item "-no-frame"
Do not use decorations fo' \s-1SDL\s0 windows n' start dem rockin tha whole
available screen space. This make tha rockin \s-1QEMU\s0 up in a thugged-out dedicated desktop
workspace mo' convenient.
.IP "\fB\-alt\-grab\fR" 4
.IX Item "-alt-grab"
Use Ctrl-Alt-Shift ta grab mouse (instead of Ctrl-Alt). Note dat dis also
affects tha special keys (for fullscreen, monitor-mode switching, etc).
.IP "\fB\-ctrl\-grab\fR" 4
.IX Item "-ctrl-grab"
Use Right-Ctrl ta grab mouse (instead of Ctrl-Alt). Note dat dis also
affects tha special keys (for fullscreen, monitor-mode switching, etc).
.IP "\fB\-no\-quit\fR" 4
.IX Item "-no-quit"
Disable \s-1SDL\s0 window close capability.
.IP "\fB\-sdl\fR" 4
.IX Item "-sdl"
Enable \s-1SDL.\s0
.IP "\fB\-spice\fR \fIoption\fR\fB[,\fR\fIoption\fR\fB[,...]]\fR" 4
.IX Item "-spice option[,option[,...]]"
Enable tha spice remote desktop protocol. Valid options are
.RS 4
.IP "\fBport=<nr>\fR" 4
.IX Item "port=<nr>"
Set tha \s-1TCP\s0 port spice is listenin on fo' plaintext channels.
.IP "\fBaddr=<addr>\fR" 4
.IX Item "addr=<addr>"
Set tha \s-1IP\s0 address spice is listenin on. I aint talkin' bout chicken n' gravy biatch.  Default be any address.
.IP "\fBipv4\fR" 4
.IX Item "ipv4"
.PD 0
.IP "\fBipv6\fR" 4
.IX Item "ipv6"
.PD
Force rockin tha specified \s-1IP\s0 version.
.IP "\fBpassword=<secret>\fR" 4
.IX Item "password=<secret>"
Set tha password you need ta authenticate.
.IP "\fBsasl\fR" 4
.IX Item "sasl"
Require dat tha client use \s-1SASL\s0 ta authenticate wit tha spice.
Da exact chizzle of authentication method used is controlled from the
system / userz \s-1SASL\s0 configuration file fo' tha 'qemu' service. This
is typically found up in /etc/sasl2/qemu.conf. If hustlin \s-1QEMU\s0 as an
unprivileged user, a environment variable \s-1SASL_CONF_PATH\s0 can be used
to make it search alternate locations fo' tha steez config.
While some \s-1SASL\s0 auth methodz can also provide data encryption (eg \s-1GSSAPI\s0),
it is recommended dat \s-1SASL\s0 always be combined wit tha 'tls' and
\&'x509' settings ta enable use of \s-1SSL\s0 n' server certificates. This
ensures a thugged-out data encryption preventin compromise of authentication
credentials.
.IP "\fBdisable-ticketing\fR" 4
.IX Item "disable-ticketing"
Allow client connects without authentication.
.IP "\fBdisable-copy-paste\fR" 4
.IX Item "disable-copy-paste"
Disable copy paste between tha client n' tha guest.
.IP "\fBdisable-agent-file-xfer\fR" 4
.IX Item "disable-agent-file-xfer"
Disable spice-vdagent based file-xfer between tha client n' tha guest.
.IP "\fBtls\-port=<nr>\fR" 4
.IX Item "tls-port=<nr>"
Set tha \s-1TCP\s0 port spice is listenin on fo' encrypted channels.
.IP "\fBx509\-dir=<dir>\fR" 4
.IX Item "x509-dir=<dir>"
Set tha x509 file directory. Expects same filenames as \-vnc \f(CW$display\fR,x509=$dir
.IP "\fBx509\-key\-file=<file>\fR" 4
.IX Item "x509-key-file=<file>"
.PD 0
.IP "\fBx509\-key\-password=<file>\fR" 4
.IX Item "x509-key-password=<file>"
.IP "\fBx509\-cert\-file=<file>\fR" 4
.IX Item "x509-cert-file=<file>"
.IP "\fBx509\-cacert\-file=<file>\fR" 4
.IX Item "x509-cacert-file=<file>"
.IP "\fBx509\-dh\-key\-file=<file>\fR" 4
.IX Item "x509-dh-key-file=<file>"
.PD
Da x509 file names can also be configured individually.
.IP "\fBtls\-ciphers=<list>\fR" 4
.IX Item "tls-ciphers=<list>"
Specify which ciphers ta use.
.IP "\fBtls\-channel=[main|display|cursor|inputs|record|playback]\fR" 4
.IX Item "tls-channel=[main|display|cursor|inputs|record|playback]"
.PD 0
.IP "\fBplaintext\-channel=[main|display|cursor|inputs|record|playback]\fR" 4
.IX Item "plaintext-channel=[main|display|cursor|inputs|record|playback]"
.PD
Force specific channel ta be used wit or without \s-1TLS\s0 encryption. I aint talkin' bout chicken n' gravy biatch.  The
options can be specified multiple times ta configure multiple
channels.  Da special name \*(L"default\*(R" can be used ta set tha default
mode.  For channels which is not explicitly forced tha fuck into one mode the
spice client be allowed ta pick tls/plaintext as he pleases.
.IP "\fBimage\-compression=[auto_glz|auto_lz|quic|glz|lz|off]\fR" 4
.IX Item "image-compression=[auto_glz|auto_lz|quic|glz|lz|off]"
Configure image compression (lossless).
Default be auto_glz.
.IP "\fBjpeg\-wan\-compression=[auto|never|always]\fR" 4
.IX Item "jpeg-wan-compression=[auto|never|always]"
.PD 0
.IP "\fBzlib\-glz\-wan\-compression=[auto|never|always]\fR" 4
.IX Item "zlib-glz-wan-compression=[auto|never|always]"
.PD
Configure wan image compression (lossy fo' slow links).
Default be auto.
.IP "\fBstreaming\-video=[off|all|filter]\fR" 4
.IX Item "streaming-video=[off|all|filter]"
Configure vizzle stream detection. I aint talkin' bout chicken n' gravy biatch.  Default is filter.
.IP "\fBagent\-mouse=[on|off]\fR" 4
.IX Item "agent-mouse=[on|off]"
Enable/disable passin mouse events via vdagent.  Default is on.
.IP "\fBplayback\-compression=[on|off]\fR" 4
.IX Item "playback-compression=[on|off]"
Enable/disable audio stream compression (usin celt 0.5.1).  Default is on.
.IP "\fBseamless\-migration=[on|off]\fR" 4
.IX Item "seamless-migration=[on|off]"
Enable/disable spice seamless migration. I aint talkin' bout chicken n' gravy biatch. Default is off.
.RE
.RS 4
.RE
.IP "\fB\-portrait\fR" 4
.IX Item "-portrait"
Rotate graphical output 90 deg left (only \s-1PXA LCD\s0).
.IP "\fB\-rotate\fR \fIdeg\fR" 4
.IX Item "-rotate deg"
Rotate graphical output some deg left (only \s-1PXA LCD\s0).
.IP "\fB\-vga\fR \fItype\fR" 4
.IX Item "-vga type"
Select type of \s-1VGA\s0 card ta emulate. Valid joints fo' \fItype\fR are
.RS 4
.IP "\fBcirrus\fR" 4
.IX Item "cirrus"
Cirrus Logic \s-1GD5446\s0 Video card. Y'all KNOW dat shit, muthafucka! All Windows versions startin from
Windows 95 should recognize n' use dis graphic card. Y'all KNOW dat shit, muthafucka! For optimal
performances, use 16 bit color depth up in tha hommie n' tha host \s-1OS.
\&\s0(This one is tha default)
.IP "\fBstd\fR" 4
.IX Item "std"
Standard \s-1VGA\s0 card wit Bochs \s-1VBE\s0 extensions.  If yo' hommie \s-1OS\s0
supports tha \s-1VESA 2.0 VBE\s0 extensions (e.g. Windows \s-1XP\s0) n' if you want
to use high resolution modes (>= 1280x1024x16) then you should use
this option.
.IP "\fBvmware\fR" 4
.IX Item "vmware"
VMWare SVGA-II compatible adapter n' shit. Use it if you have sufficiently
recent XFree86/XOrg server or Windows hommie wit a thugged-out driver fo' this
card.
.IP "\fBqxl\fR" 4
.IX Item "qxl"
\&\s-1QXL\s0 paravirtual graphic card. Y'all KNOW dat shit, muthafucka!  It be \s-1VGA\s0 compatible (includin \s-1VESA
2.0 VBE\s0 support).  Works dopest wit qxl hommie drivers installed though.
Recommended chizzle when rockin tha spice protocol.
.IP "\fBnone\fR" 4
.IX Item "none"
Disable \s-1VGA\s0 card.
.RE
.RS 4
.RE
.IP "\fB\-full\-screen\fR" 4
.IX Item "-full-screen"
Start up in full screen.
.IP "\fB\-g\fR \fIwidth\fR\fBx\fR\fIheight\fR\fB[x\fR\fIdepth\fR\fB]\fR" 4
.IX Item "-g widthxheight[xdepth]"
Set tha initial graphical resolution n' depth (\s-1PPC, SPARC\s0 only).
.IP "\fB\-vnc\fR \fIdisplay\fR\fB[,\fR\fIoption\fR\fB[,\fR\fIoption\fR\fB[,...]]]\fR" 4
.IX Item "-vnc display[,option[,option[,...]]]"
Normally, \s-1QEMU\s0 uses \s-1SDL\s0 ta display tha \s-1VGA\s0 output.  With dis option,
you can have \s-1QEMU\s0 listen on \s-1VNC\s0 display \fIdisplay\fR n' redirect tha \s-1VGA\s0
display over tha \s-1VNC\s0 session. I aint talkin' bout chicken n' gravy biatch.  It be straight-up useful ta enable tha usb
tablet thang when rockin dis option (option \fB\-usbdevice
tablet\fR). When rockin tha \s-1VNC\s0 display, you must use tha \fB\-k\fR
parameta ta set tha keyboard layout if yo ass is not rockin en-us. Valid
syntax fo' tha \fIdisplay\fR is
.RS 4
.IP "\fIhost\fR\fB:\fR\fId\fR" 4
.IX Item "host:d"
\&\s-1TCP\s0 connections will only be allowed from \fIhost\fR on display \fId\fR.
By convention tha \s-1TCP\s0 port is 5900+\fId\fR. Optionally, \fIhost\fR can
be omitted up in which case tha server will accept connections from any host.
.IP "\fBunix:\fR\fIpath\fR" 4
.IX Item "unix:path"
Connections is ghon be allowed over \s-1UNIX\s0 domain sockets where \fIpath\fR is the
location of a unix socket ta listen fo' connections on.
.IP "\fBnone\fR" 4
.IX Item "none"
\&\s-1VNC\s0 is initialized but not started. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da monitor \f(CW\*(C`change\*(C'\fR command
can be used ta lata start tha \s-1VNC\s0 server.
.RE
.RS 4
.Sp
Peepin tha \fIdisplay\fR value there may be one or mo' \fIoption\fR flags
separated by commas. Valid options are
.IP "\fBreverse\fR" 4
.IX Item "reverse"
Connect ta a listenin \s-1VNC\s0 client via a \*(L"reverse\*(R" connection. I aint talkin' bout chicken n' gravy biatch. The
client is specified by tha \fIdisplay\fR. For reverse network
connections (\fIhost\fR:\fId\fR,\f(CW\*(C`reverse\*(C'\fR), tha \fId\fR argument
is a \s-1TCP\s0 port number, not a gangbangin' finger-lickin' display number.
.IP "\fBwebsocket\fR" 4
.IX Item "websocket"
Opens a additionizzle \s-1TCP\s0 listenin port all bout \s-1VNC\s0 Websocket connections.
By definizzle tha Websocket port is 5700+\fIdisplay\fR. If \fIhost\fR is
specified connections will only be allowed from dis host.
As a alternatizzle tha Websocket port could be specified by using
\&\f(CW\*(C`websocket\*(C'\fR=\fIport\fR.
\&\s-1TLS\s0 encryption fo' tha Websocket connection is supported if tha required
certificates is specified wit tha \s-1VNC\s0 option \fBx509\fR.
.IP "\fBpassword\fR" 4
.IX Item "password"
Require dat password based authentication is used fo' client connections.
.Sp
Da password must be set separately rockin tha \f(CW\*(C`set_password\*(C'\fR command in
the \fBpcsys_monitor\fR. Da syntax ta chizzle yo' password is:
\&\f(CW\*(C`set_password <protocol> <password>\*(C'\fR where <protocol> could be either
\&\*(L"vnc\*(R" or \*(L"spice\*(R".
.Sp
If you wanna chizzle <protocol> password expiration, you should use
\&\f(CW\*(C`expire_password <protocol> <expiration\-time>\*(C'\fR where expiration time could
be one of tha followin options: now, never, +secondz or \s-1UNIX\s0 time of
expiration, e.g. +60 ta make password expire up in 60 seconds, or 1335196800
to make password expire on \*(L"Mon Apr 23 12:00:00 \s-1EDT 2012\*(R" \s0(\s-1UNIX\s0 time fo' this
date n' time).
.Sp
Yo ass can also use keywordz \*(L"now\*(R" or \*(L"never\*(R" fo' tha expiration time to
allow <protocol> password ta expire immediately or never expire.
.IP "\fBtls\fR" 4
.IX Item "tls"
Require dat client use \s-1TLS\s0 when communicatin wit tha \s-1VNC\s0 server n' shit. This
uses anonymous \s-1TLS\s0 credentials so is susceptible ta a man-in-the-middle
attack. Well shiiiit, it is recommended dat dis option be combined wit either the
\&\fBx509\fR or \fBx509verify\fR options.
.IP "\fBx509=\fR\fI/path/to/certificate/dir\fR" 4
.IX Item "x509=/path/to/certificate/dir"
Valid if \fBtls\fR is specified. Y'all KNOW dat shit, muthafucka! Require dat x509 credentials is used
for negotiatin tha \s-1TLS\s0 session. I aint talkin' bout chicken n' gravy biatch. Da server will bust its x509 certificate
to tha client. Well shiiiit, it is recommended dat a password be set on tha \s-1VNC\s0 server
to provide authentication of tha client when dis is used. Y'all KNOW dat shit, muthafucka! Da path following
this option specifies where tha x509 certificates is ta be loaded from.
See tha \fBvnc_security\fR section fo' details on generatin certificates.
.IP "\fBx509verify=\fR\fI/path/to/certificate/dir\fR" 4
.IX Item "x509verify=/path/to/certificate/dir"
Valid if \fBtls\fR is specified. Y'all KNOW dat shit, muthafucka! Require dat x509 credentials is used
for negotiatin tha \s-1TLS\s0 session. I aint talkin' bout chicken n' gravy biatch. Da server will bust its x509 certificate
to tha client, n' request dat tha client bust its own x509 certificate.
Da server will validate tha clientz certificate against tha \s-1CA\s0 certificate,
and reject clients when validation fails. If tha certificate authoritizzle is
trusted, dis be a sufficient authentication mechanism. Yo ass may still wish
to set a password on tha \s-1VNC\s0 server as a second authentication layer n' shit. The
path followin dis option specifies where tha x509 certificates is to
be loaded from. Right back up in yo muthafuckin ass. See tha \fBvnc_security\fR section fo' details on generating
certificates.
.IP "\fBsasl\fR" 4
.IX Item "sasl"
Require dat tha client use \s-1SASL\s0 ta authenticate wit tha \s-1VNC\s0 server.
Da exact chizzle of authentication method used is controlled from the
system / userz \s-1SASL\s0 configuration file fo' tha 'qemu' service. This
is typically found up in /etc/sasl2/qemu.conf. If hustlin \s-1QEMU\s0 as an
unprivileged user, a environment variable \s-1SASL_CONF_PATH\s0 can be used
to make it search alternate locations fo' tha steez config.
While some \s-1SASL\s0 auth methodz can also provide data encryption (eg \s-1GSSAPI\s0),
it is recommended dat \s-1SASL\s0 always be combined wit tha 'tls' and
\&'x509' settings ta enable use of \s-1SSL\s0 n' server certificates. This
ensures a thugged-out data encryption preventin compromise of authentication
credentials. Right back up in yo muthafuckin ass. See tha \fBvnc_security\fR section fo' details on using
\&\s-1SASL\s0 authentication.
.IP "\fBacl\fR" 4
.IX Item "acl"
Turn on access control lists fo' checkin of tha x509 client certificate
and \s-1SASL\s0 party. For x509 certs, tha \s-1ACL\s0 check is made against the
certificatez distinguished name. This is suttin' dat looks like
\&\f(CW\*(C`C=GB,O=ACME,L=Boston,CN=bob\*(C'\fR. For \s-1SASL\s0 party, tha \s-1ACL\s0 check is
made against tha username, which dependin on tha \s-1SASL\s0 plugin, may
include a realm component, eg \f(CW\*(C`bob\*(C'\fR or \f(CW\*(C`bob@EXAMPLE.COM\*(C'\fR.
When tha \fBacl\fR flag is set, tha initial access list will be
empty, wit a \f(CW\*(C`deny\*(C'\fR policy. Thus no one is ghon be allowed to
use tha \s-1VNC\s0 server until tha ACLs done been loaded. Y'all KNOW dat shit, muthafucka! This can be
 bigged up  rockin tha \f(CW\*(C`acl\*(C'\fR monitor command.
.IP "\fBlossy\fR" 4
.IX Item "lossy"
Enable lossy compression methodz (gradient, \s-1JPEG, ...\s0). If this
option is set, \s-1VNC\s0 client may receive lossy framebuffer thugged-out shit
dependin on its encodin settings. Enablin dis option can save
a shitload of bandwidth all up in tha expense of quality.
.IP "\fBnon-adaptive\fR" 4
.IX Item "non-adaptive"
Disable adaptizzle encodings fo' realz. Adaptizzle encodings is enabled by default.
An adaptizzle encodin will try ta detect frequently updated screen regions,
and bust thugged-out shiznit up in these regions rockin a lossy encodin (like \s-1JPEG\s0).
This can be straight-up helpful ta save bandwidth when playin vizzles. Disabling
adaptizzle encodings allows ta restore tha original gangsta static behavior of encodings
like Tight.
.IP "\fBshare=[allow\-exclusive|force\-shared|ignore]\fR" 4
.IX Item "share=[allow-exclusive|force-shared|ignore]"
Set display pluggin policy.  'allow\-exclusive' allows clients ta ask
for exclusive access.  As suggested by tha rfb spec dis is
implemented by droppin other connections.  Connectin multiple
clients up in parallel requires all clients askin fo' a gangbangin' finger-lickin' dirty-ass shared session
(vncviewer: \-shared switch).  This is tha default.  'force\-shared'
disablez exclusive client access.  Useful fo' shared desktop sessions,
where you don't want one of mah thugs forgettin specify \-shared disconnect
everybody else.  'ignore' straight-up ignores tha shared flag and
allows dem hoes connect unconditionally.  Don't conform ta tha rfb
spec but is traditionizzle \s-1QEMU\s0 behavior.
.RE
.RS 4
.RE
.PP
i386 target only:
.IP "\fB\-win2k\-hack\fR" 4
.IX Item "-win2k-hack"
Use it when installin Windows 2000 ta avoid a gangbangin' finger-lickin' disk full bug fo' realz. After
Windows 2000 is installed, you no longer need dis option (this option
slows down tha \s-1IDE\s0 transfers).
.IP "\fB\-no\-fd\-bootchk\fR" 4
.IX Item "-no-fd-bootchk"
Disable boot signature checkin fo' floppy disks up in \s-1BIOS.\s0 May
be needed ta boot from oldschool floppy disks.
.IP "\fB\-no\-acpi\fR" 4
.IX Item "-no-acpi"
Disable \s-1ACPI \s0(Advanced Configuration n' Juice Interface) support. Use
it if yo' hommie \s-1OS\s0 bitches bout \s-1ACPI\s0 problems (\s-1PC\s0 target machine
only).
.IP "\fB\-no\-hpet\fR" 4
.IX Item "-no-hpet"
Disable \s-1HPET\s0 support.
.IP "\fB\-acpitable [sig=\fR\fIstr\fR\fB][,rev=\fR\fIn\fR\fB][,oem_id=\fR\fIstr\fR\fB][,oem_table_id=\fR\fIstr\fR\fB][,oem_rev=\fR\fIn\fR\fB] [,asl_compiler_id=\fR\fIstr\fR\fB][,asl_compiler_rev=\fR\fIn\fR\fB][,data=\fR\fIfile1\fR\fB[:\fR\fIfile2\fR\fB]...]\fR" 4
.IX Item "-acpitable [sig=str][,rev=n][,oem_id=str][,oem_table_id=str][,oem_rev=n] [,asl_compiler_id=str][,asl_compiler_rev=n][,data=file1[:file2]...]"
Add \s-1ACPI\s0 table wit specified header fieldz n' context from specified files.
For file=, take whole \s-1ACPI\s0 table from tha specified files, includin all
\&\s-1ACPI\s0 headaz (possible overridden by other options).
For data=, only data
portion of tha table is used, all header shiznit is specified up in the
command line.
.IP "\fB\-smbios file=\fR\fIbinary\fR" 4
.IX Item "-smbios file=binary"
Load \s-1SMBIOS\s0 entry from binary file.
.ie n .IP "\fB\-smbios type=0[,vendor=\fR\fIstr\fR\fB][,version=\fR\fIstr\fR\fB][,date=\fR\fIstr\fR\fB][,release=\fR\fI\fI%d\fI.%d\fR\fB]\fR" 4
.el .IP "\fB\-smbios type=0[,vendor=\fR\fIstr\fR\fB][,version=\fR\fIstr\fR\fB][,date=\fR\fIstr\fR\fB][,release=\fR\fI\f(CI%d\fI.%d\fR\fB]\fR" 4
.IX Item "-smbios type=0[,vendor=str][,version=str][,date=str][,release=%d.%d]"
Specify \s-1SMBIOS\s0 type 0 fields
.IP "\fB\-smbios type=1[,manufacturer=\fR\fIstr\fR\fB][,product=\fR\fIstr\fR\fB] [,version=\fR\fIstr\fR\fB][,serial=\fR\fIstr\fR\fB][,uuid=\fR\fIuuid\fR\fB][,sku=\fR\fIstr\fR\fB] [,family=\fR\fIstr\fR\fB]\fR" 4
.IX Item "-smbios type=1[,manufacturer=str][,product=str] [,version=str][,serial=str][,uuid=uuid][,sku=str] [,family=str]"
Specify \s-1SMBIOS\s0 type 1 fields
.PP
Network options:
.IP "\fB\-net nic[,vlan=\fR\fIn\fR\fB][,macaddr=\fR\fImac\fR\fB][,model=\fR\fItype\fR\fB] [,name=\fR\fIname\fR\fB][,addr=\fR\fIaddr\fR\fB][,vectors=\fR\fIv\fR\fB]\fR" 4
.IX Item "-net nic[,vlan=n][,macaddr=mac][,model=type] [,name=name][,addr=addr][,vectors=v]"
Smoke a freshly smoked up Network Interface Card n' connect it ta \s-1VLAN \s0\fIn\fR (\fIn\fR
= 0 is tha default). Da \s-1NIC\s0 be a e1000 by default on tha \s-1PC\s0
target. Optionally, tha \s-1MAC\s0 address can be chizzled ta \fImac\fR, the
device address set ta \fIaddr\fR (\s-1PCI\s0 cardz only),
and a \fIname\fR can be assigned fo' use up in monitor commands.
Optionally, fo' \s-1PCI\s0 cards, you can specify tha number \fIv\fR of MSI-X vectors
that tha card should have; dis option currently only affects virtio cards; set
\&\fIv\fR = 0 ta disable MSI-X. If no \fB\-net\fR option is specified, a single
\&\s-1NIC\s0 is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  \s-1QEMU\s0 can emulate nuff muthafuckin different modelz of network card.
Valid joints fo' \fItype\fR are
\&\f(CW\*(C`virtio\*(C'\fR, \f(CW\*(C`i82551\*(C'\fR, \f(CW\*(C`i82557b\*(C'\fR, \f(CW\*(C`i82559er\*(C'\fR,
\&\f(CW\*(C`ne2k_pci\*(C'\fR, \f(CW\*(C`ne2k_isa\*(C'\fR, \f(CW\*(C`pcnet\*(C'\fR, \f(CW\*(C`rtl8139\*(C'\fR,
\&\f(CW\*(C`e1000\*(C'\fR, \f(CW\*(C`smc91c111\*(C'\fR, \f(CW\*(C`lance\*(C'\fR n' \f(CW\*(C`mcf_fec\*(C'\fR.
Not all devices is supported on all targets, n' you can put dat on yo' toast.  Use \f(CW\*(C`\-net nic,model=help\*(C'\fR
for a list of available devices fo' yo' target.
.IP "\fB\-netdev user,id=\fR\fIid\fR\fB[,\fR\fIoption\fR\fB][,\fR\fIoption\fR\fB][,...]\fR" 4
.IX Item "-netdev user,id=id[,option][,option][,...]"
.PD 0
.IP "\fB\-net user[,\fR\fIoption\fR\fB][,\fR\fIoption\fR\fB][,...]\fR" 4
.IX Item "-net user[,option][,option][,...]"
.PD
Use tha user mode network stack which requires no administrator
privilege ta run. I aint talkin' bout chicken n' gravy biatch. Valid options are:
.RS 4
.IP "\fBvlan=\fR\fIn\fR" 4
.IX Item "vlan=n"
Connect user mode stack ta \s-1VLAN \s0\fIn\fR (\fIn\fR = 0 is tha default).
.IP "\fBid=\fR\fIid\fR" 4
.IX Item "id=id"
.PD 0
.IP "\fBname=\fR\fIname\fR" 4
.IX Item "name=name"
.PD
Assign symbolic name fo' use up in monitor commands.
.IP "\fBnet=\fR\fIaddr\fR\fB[/\fR\fImask\fR\fB]\fR" 4
.IX Item "net=addr[/mask]"
Set \s-1IP\s0 network address tha hommie will see. Optionally specify tha netmask,
either up in tha form a.b.c.d or as number of valid top-most bits, n' you can put dat on yo' toast. Default is
10.0.2.0/24.
.IP "\fBhost=\fR\fIaddr\fR" 4
.IX Item "host=addr"
Specify tha guest-visible address of tha host. Default is tha 2nd \s-1IP\s0 up in the
guest network, i.e. x.x.x.2.
.IP "\fBrestrict=on|off\fR" 4
.IX Item "restrict=on|off"
If dis option is enabled, tha hommie is ghon be isolated, i.e. it aint gonna be
able ta contact tha host n' no hommie \s-1IP\s0 packets is ghon be routed over tha host
to tha outside. This option do not affect any explicitly set forwardin rules.
.IP "\fBhostname=\fR\fIname\fR" 4
.IX Item "hostname=name"
Specifies tha client hostname reported by tha built-in \s-1DHCP\s0 server.
.IP "\fBdhcpstart=\fR\fIaddr\fR" 4
.IX Item "dhcpstart=addr"
Specify tha straight-up original gangsta of tha 16 IPs tha built-in \s-1DHCP\s0 server can assign. I aint talkin' bout chicken n' gravy biatch. Default
is tha 15th ta 31st \s-1IP\s0 up in tha hommie network, i.e. x.x.x.15 ta x.x.x.31.
.IP "\fBdns=\fR\fIaddr\fR" 4
.IX Item "dns=addr"
Specify tha guest-visible address of tha virtual nameserver n' shit. Da address must
be different from tha host address. Default is tha 3rd \s-1IP\s0 up in tha hommie network,
i.e. x.x.x.3.
.IP "\fBdnssearch=\fR\fIdomain\fR" 4
.IX Item "dnssearch=domain"
Provides a entry fo' tha domain-search list busted by tha built-in
\&\s-1DHCP\s0 server n' shit. Mo' than one domain suffix can be transmitted by specifying
this option multiple times. If supported, dis will cause tha hommie to
automatically try ta append tha given domain suffix(es) up in case a thugged-out domain name
can not be resolved.
.Sp
Example:
.Sp
.Vb 1
\&        qemu \-net user,dnssearch=mgmt.example.org,dnssearch=example.org [...]
.Ve
.IP "\fBtftp=\fR\fIdir\fR" 4
.IX Item "tftp=dir"
When rockin tha user mode network stack, activate a funky-ass built-in \s-1TFTP\s0
server n' shit. Da filez up in \fIdir\fR is ghon be exposed as tha root of a \s-1TFTP\s0 server.
Da \s-1TFTP\s0 client on tha hommie must be configured up in binary mode (use tha command
\&\f(CW\*(C`bin\*(C'\fR of tha Unix \s-1TFTP\s0 client).
.IP "\fBbootfile=\fR\fIfile\fR" 4
.IX Item "bootfile=file"
When rockin tha user mode network stack, broadcast \fIfile\fR as tha \s-1BOOTP\s0
filename. In conjunction wit \fBtftp\fR, dis can be used ta network boot
a hommie from a local directory.
.Sp
Example (usin pxelinux):
.Sp
.Vb 1
\&        qemu\-system\-i386 \-hda linux.img \-boot n \-net user,tftp=/path/to/tftp/files,bootfile=/pxelinux.0
.Ve
.IP "\fBsmb=\fR\fIdir\fR\fB[,smbserver=\fR\fIaddr\fR\fB]\fR" 4
.IX Item "smb=dir[,smbserver=addr]"
When rockin tha user mode network stack, activate a funky-ass built-in \s-1SMB\s0
server so dat Windows OSes can access ta tha host filez up in \fI\fIdir\fI\fR
transparently. Da \s-1IP\s0 address of tha \s-1SMB\s0 server can be set ta \fIaddr\fR. By
default tha 4th \s-1IP\s0 up in tha hommie network is used, i.e. x.x.x.4.
.Sp
In tha hommie Windows \s-1OS,\s0 tha line:
.Sp
.Vb 1
\&        10.0.2.4 smbserver
.Ve
.Sp
must be added up in tha file \fIC:\eWINDOWS\eLMHOSTS\fR (for windows 9x/Me)
or \fIC:\eWINNT\eSYSTEM32\eDRIVERS\eETC\eLMHOSTS\fR (Windows \s-1NT/2000\s0).
.Sp
Then \fI\fIdir\fI\fR can be accessed up in \fI\e\esmbserver\eqemu\fR.
.Sp
Note dat a \s-1SAMBA\s0 server must be installed on tha host \s-1OS.
QEMU\s0 was tested successfully wit smbd versions from Red Hat 9,
Fedora Core 3 n' OpenSUSE 11.x.
.IP "\fBhostfwd=[tcp|udp]:[\fR\fIhostaddr\fR\fB]:\fR\fIhostport\fR\fB\-[\fR\fIguestaddr\fR\fB]:\fR\fIguestport\fR" 4
.IX Item "hostfwd=[tcp|udp]:[hostaddr]:hostport-[guestaddr]:guestport"
Redirect incomin \s-1TCP\s0 or \s-1UDP\s0 connections ta tha host port \fIhostport\fR to
the hommie \s-1IP\s0 address \fIguestaddr\fR on hommie port \fIguestport\fR. If
\&\fIguestaddr\fR aint specified, its value is x.x.x.15 (default first address
given by tha built-in \s-1DHCP\s0 server). By specifyin \fIhostaddr\fR, tha rule can
be bound ta a specific host intercourse. If no connection type is set, \s-1TCP\s0 is
used. Y'all KNOW dat shit, muthafucka! This option can be given multiple times.
.Sp
For example, ta redirect host X11 connection from screen 1 ta guest
screen 0, use tha following:
.Sp
.Vb 4
\&        # on tha host
\&        qemu\-system\-i386 \-net user,hostfwd=tcp:127.0.0.1:6001\-:6000 [...]
\&        # dis host xterm should open up in tha hommie X11 server
\&        xterm \-display :1
.Ve
.Sp
To redirect telnet connections from host port 5555 ta telnet port on
the guest, use tha following:
.Sp
.Vb 3
\&        # on tha host
\&        qemu\-system\-i386 \-net user,hostfwd=tcp::5555\-:23 [...]
\&        telnet localhost 5555
.Ve
.Sp
Then when you use on tha host \f(CW\*(C`telnet localhost 5555\*(C'\fR, you
connect ta tha hommie telnet server.
.IP "\fBguestfwd=[tcp]:\fR\fIserver\fR\fB:\fR\fIport\fR\fB\-\fR\fIdev\fR" 4
.IX Item "guestfwd=[tcp]:server:port-dev"
.PD 0
.IP "\fBguestfwd=[tcp]:\fR\fIserver\fR\fB:\fR\fIport\fR\fB\-\fR\fIcmd:command\fR" 4
.IX Item "guestfwd=[tcp]:server:port-cmd:command"
.PD
Forward hommie \s-1TCP\s0 connections ta tha \s-1IP\s0 address \fIserver\fR on port \fIport\fR
to tha characta thang \fIdev\fR or ta a program executed by \fIcmd:command\fR
which gets spawned fo' each connection. I aint talkin' bout chicken n' gravy biatch. This option can be given multiple times.
.Sp
Yo ass can either bust a cold-ass lil chardev directly n' have dat one used all up in \s-1QEMU\s0's
lifetime, like up in tha followin example:
.Sp
.Vb 3
\&        # open 10.10.1.1:4321 on bootup, connect 10.0.2.100:1234 ta it whenever
\&        # tha hommie accesses it
\&        qemu \-net user,guestfwd=tcp:10.0.2.100:1234\-tcp:10.10.1.1:4321 [...]
.Ve
.Sp
Or you can execute a cold-ass lil command on every last muthafuckin \s-1TCP\s0 connection established by tha guest,
so dat \s-1QEMU\s0 behaves similar ta a inetd process fo' dat virtual server:
.Sp
.Vb 3
\&        # call "netcat 10.10.1.1 4321" on every last muthafuckin TCP connection ta 10.0.2.100:1234
\&        # n' connect tha TCP stream ta its stdin/stdout
\&        qemu \-net \*(Aquser,guestfwd=tcp:10.0.2.100:1234\-cmd:netcat 10.10.1.1 4321\*(Aq
.Ve
.RE
.RS 4
.Sp
Note: Legacy stand-alone options \-tftp, \-bootp, \-smb n' \-redir is still
processed n' applied ta \-net user n' shit. Mixin dem wit tha freshly smoked up configuration
syntax gives undefined thangs up in dis biatch. Their use fo' freshly smoked up applications is discouraged
as they is ghon be removed from future versions.
.RE
.IP "\fB\-netdev tap,id=\fR\fIid\fR\fB[,fd=\fR\fIh\fR\fB][,ifname=\fR\fIname\fR\fB][,script=\fR\fIfile\fR\fB][,downscript=\fR\fIdfile\fR\fB][,helper=\fR\fIhelper\fR\fB]\fR" 4
.IX Item "-netdev tap,id=id[,fd=h][,ifname=name][,script=file][,downscript=dfile][,helper=helper]"
.PD 0
.IP "\fB\-net tap[,vlan=\fR\fIn\fR\fB][,name=\fR\fIname\fR\fB][,fd=\fR\fIh\fR\fB][,ifname=\fR\fIname\fR\fB][,script=\fR\fIfile\fR\fB][,downscript=\fR\fIdfile\fR\fB][,helper=\fR\fIhelper\fR\fB]\fR" 4
.IX Item "-net tap[,vlan=n][,name=name][,fd=h][,ifname=name][,script=file][,downscript=dfile][,helper=helper]"
.PD
Connect tha host \s-1TAP\s0 network intercourse \fIname\fR ta \s-1VLAN \s0\fIn\fR.
.Sp
Use tha network script \fIfile\fR ta configure it n' tha network script
\&\fIdfile\fR ta deconfigure dat shit. If \fIname\fR aint provided, tha \s-1OS\s0
automatically serves up one. Da default network configure script is
\&\fI/etc/qemu\-ifup\fR n' tha default network deconfigure script is
\&\fI/etc/qemu\-ifdown\fR. Use \fBscript=no\fR or \fBdownscript=no\fR
to disable script execution.
.Sp
If hustlin \s-1QEMU\s0 as a unprivileged user, use tha network helper
\&\fIhelper\fR ta configure tha \s-1TAP\s0 intercourse. Da default network
helper executable is \fI/usr/local/libexec/qemu\-bridge\-helper\fR.
.Sp
\&\fBfd\fR=\fIh\fR can be used ta specify tha handle of a already
opened host \s-1TAP\s0 intercourse.
.Sp
Examples:
.Sp
.Vb 2
\&        #launch a QEMU instizzle wit tha default network script
\&        qemu\-system\-i386 linux.img \-net nic \-net tap
\&
\&
\&        
\&        #launch a QEMU instizzle wit two NICs, each one connected
\&        #to a TAP device
\&        qemu\-system\-i386 linux.img \e
\&        \-net nic,vlan=0 \-net tap,vlan=0,ifname=tap0 \e
\&        \-net nic,vlan=1 \-net tap,vlan=1,ifname=tap1
\&
\&
\&        
\&        #launch a QEMU instizzle wit tha default network helper to
\&        #connect a TAP thang ta bridge br0
\&        qemu\-system\-i386 linux.img \e
\&        \-net nic \-net tap,"helper=/usr/local/libexec/qemu\-bridge\-helper"
.Ve
.IP "\fB\-netdev bridge,id=\fR\fIid\fR\fB[,br=\fR\fIbridge\fR\fB][,helper=\fR\fIhelper\fR\fB]\fR" 4
.IX Item "-netdev bridge,id=id[,br=bridge][,helper=helper]"
.PD 0
.IP "\fB\-net bridge[,vlan=\fR\fIn\fR\fB][,name=\fR\fIname\fR\fB][,br=\fR\fIbridge\fR\fB][,helper=\fR\fIhelper\fR\fB]\fR" 4
.IX Item "-net bridge[,vlan=n][,name=name][,br=bridge][,helper=helper]"
.PD
Connect a host \s-1TAP\s0 network intercourse ta a host bridge device.
.Sp
Use tha network helper \fIhelper\fR ta configure tha \s-1TAP\s0 intercourse and
attach it ta tha bridge. Da default network helper executable is
\&\fI/usr/local/libexec/qemu\-bridge\-helper\fR n' tha default bridge
device is \fIbr0\fR.
.Sp
Examples:
.Sp
.Vb 3
\&        #launch a QEMU instizzle wit tha default network helper to
\&        #connect a TAP thang ta bridge br0
\&        qemu\-system\-i386 linux.img \-net bridge \-net nic,model=virtio
\&
\&
\&        
\&        #launch a QEMU instizzle wit tha default network helper to
\&        #connect a TAP thang ta bridge qemubr0
\&        qemu\-system\-i386 linux.img \-net bridge,br=qemubr0 \-net nic,model=virtio
.Ve
.IP "\fB\-netdev socket,id=\fR\fIid\fR\fB[,fd=\fR\fIh\fR\fB][,listen=[\fR\fIhost\fR\fB]:\fR\fIport\fR\fB][,connect=\fR\fIhost\fR\fB:\fR\fIport\fR\fB]\fR" 4
.IX Item "-netdev socket,id=id[,fd=h][,listen=[host]:port][,connect=host:port]"
.PD 0
.IP "\fB\-net socket[,vlan=\fR\fIn\fR\fB][,name=\fR\fIname\fR\fB][,fd=\fR\fIh\fR\fB] [,listen=[\fR\fIhost\fR\fB]:\fR\fIport\fR\fB][,connect=\fR\fIhost\fR\fB:\fR\fIport\fR\fB]\fR" 4
.IX Item "-net socket[,vlan=n][,name=name][,fd=h] [,listen=[host]:port][,connect=host:port]"
.PD
Connect tha \s-1VLAN \s0\fIn\fR ta a remote \s-1VLAN\s0 up in another \s-1QEMU\s0 virtual
machine rockin a \s-1TCP\s0 socket connection. I aint talkin' bout chicken n' gravy biatch. If \fBlisten\fR is
specified, \s-1QEMU\s0 waits fo' incomin connections on \fIport\fR
(\fIhost\fR is optional). \fBconnect\fR is used ta connect to
another \s-1QEMU\s0 instizzle rockin tha \fBlisten\fR option. I aint talkin' bout chicken n' gravy biatch. \fBfd\fR=\fIh\fR
specifies a already opened \s-1TCP\s0 socket.
.Sp
Example:
.Sp
.Vb 9
\&        # launch a gangbangin' first QEMU instance
\&        qemu\-system\-i386 linux.img \e
\&        \-net nic,macaddr=52:54:00:12:34:56 \e
\&        \-net socket,listen=:1234
\&        # connect tha VLAN 0 of dis instizzle ta tha VLAN 0
\&        # of tha straight-up original gangsta instance
\&        qemu\-system\-i386 linux.img \e
\&        \-net nic,macaddr=52:54:00:12:34:57 \e
\&        \-net socket,connect=127.0.0.1:1234
.Ve
.IP "\fB\-netdev socket,id=\fR\fIid\fR\fB[,fd=\fR\fIh\fR\fB][,mcast=\fR\fImaddr\fR\fB:\fR\fIport\fR\fB[,localaddr=\fR\fIaddr\fR\fB]]\fR" 4
.IX Item "-netdev socket,id=id[,fd=h][,mcast=maddr:port[,localaddr=addr]]"
.PD 0
.IP "\fB\-net socket[,vlan=\fR\fIn\fR\fB][,name=\fR\fIname\fR\fB][,fd=\fR\fIh\fR\fB][,mcast=\fR\fImaddr\fR\fB:\fR\fIport\fR\fB[,localaddr=\fR\fIaddr\fR\fB]]\fR" 4
.IX Item "-net socket[,vlan=n][,name=name][,fd=h][,mcast=maddr:port[,localaddr=addr]]"
.PD
Smoke a \s-1VLAN \s0\fIn\fR shared wit another \s-1QEMU\s0 virtual
machines rockin a \s-1UDP\s0 multicast socket, effectively bustin a funky-ass bus for
every \s-1QEMU\s0 wit same multicast address \fImaddr\fR n' \fIport\fR.
\&\s-1NOTES:\s0
.RS 4
.IP "1." 4
Several \s-1QEMU\s0 can be hustlin on different hosts n' share same bus (assuming
correct multicast setup fo' these hosts).
.IP "2." 4
mcast support is compatible wit User Mode Linux (argument \fBeth\fR\fIN\fR\fB=mcast\fR), see
<\fBhttp://user\-mode\-linux.sf.net\fR>.
.IP "3." 4
Use \fBfd=h\fR ta specify a already opened \s-1UDP\s0 multicast socket.
.RE
.RS 4
.Sp
Example:
.Sp
.Vb 12
\&        # launch one QEMU instance
\&        qemu\-system\-i386 linux.img \e
\&        \-net nic,macaddr=52:54:00:12:34:56 \e
\&        \-net socket,mcast=230.0.0.1:1234
\&        # launch another QEMU instizzle on same "bus"
\&        qemu\-system\-i386 linux.img \e
\&        \-net nic,macaddr=52:54:00:12:34:57 \e
\&        \-net socket,mcast=230.0.0.1:1234
\&        # launch yet another QEMU instizzle on same "bus"
\&        qemu\-system\-i386 linux.img \e
\&        \-net nic,macaddr=52:54:00:12:34:58 \e
\&        \-net socket,mcast=230.0.0.1:1234
.Ve
.Sp
Example (User Mode Linux compat.):
.Sp
.Vb 7
\&        # launch QEMU instizzle (note mcast address selected
\&        # is UML\*(Aqs default)
\&        qemu\-system\-i386 linux.img \e
\&        \-net nic,macaddr=52:54:00:12:34:56 \e
\&        \-net socket,mcast=239.192.168.1:1102
\&        # launch UML
\&        /path/to/linux ubd0=/path/to/root_fs eth0=mcast
.Ve
.Sp
Example (send packets from hostz 1.2.3.4):
.Sp
.Vb 3
\&        qemu\-system\-i386 linux.img \e
\&        \-net nic,macaddr=52:54:00:12:34:56 \e
\&        \-net socket,mcast=239.192.168.1:1102,localaddr=1.2.3.4
.Ve
.RE
.IP "\fB\-netdev vde,id=\fR\fIid\fR\fB[,sock=\fR\fIsocketpath\fR\fB][,port=\fR\fIn\fR\fB][,group=\fR\fIgroupname\fR\fB][,mode=\fR\fIoctalmode\fR\fB]\fR" 4
.IX Item "-netdev vde,id=id[,sock=socketpath][,port=n][,group=groupname][,mode=octalmode]"
.PD 0
.IP "\fB\-net vde[,vlan=\fR\fIn\fR\fB][,name=\fR\fIname\fR\fB][,sock=\fR\fIsocketpath\fR\fB] [,port=\fR\fIn\fR\fB][,group=\fR\fIgroupname\fR\fB][,mode=\fR\fIoctalmode\fR\fB]\fR" 4
.IX Item "-net vde[,vlan=n][,name=name][,sock=socketpath] [,port=n][,group=groupname][,mode=octalmode]"
.PD
Connect \s-1VLAN \s0\fIn\fR ta \s-1PORT \s0\fIn\fR of a vde switch hustlin on host and
listenin fo' incomin connections on \fIsocketpath\fR. Use \s-1GROUP \s0\fIgroupname\fR
and \s-1MODE \s0\fIoctalmode\fR ta chizzle default ballershizzle n' permissions for
communication port. This option is only available if \s-1QEMU\s0 has been compiled
with vde support enabled.
.Sp
Example:
.Sp
.Vb 4
\&        # launch vde switch
\&        vde_switch \-F \-sock /tmp/myswitch
\&        # launch QEMU instance
\&        qemu\-system\-i386 linux.img \-net nic \-net vde,sock=/tmp/myswitch
.Ve
.IP "\fB\-netdev hubport,id=\fR\fIid\fR\fB,hubid=\fR\fIhubid\fR" 4
.IX Item "-netdev hubport,id=id,hubid=hubid"
Smoke a hub port on \s-1QEMU \s0\*(L"vlan\*(R" \fIhubid\fR.
.Sp
Da hubport netdev lets you connect a \s-1NIC\s0 ta a \s-1QEMU \s0\*(L"vlan\*(R" instead of a single
netdev.  \f(CW\*(C`\-net\*(C'\fR n' \f(CW\*(C`\-device\*(C'\fR wit parameta \fBvlan\fR create the
required hub automatically.
.IP "\fB\-net dump[,vlan=\fR\fIn\fR\fB][,file=\fR\fIfile\fR\fB][,len=\fR\fIlen\fR\fB]\fR" 4
.IX Item "-net dump[,vlan=n][,file=file][,len=len]"
Dump network traffic on \s-1VLAN \s0\fIn\fR ta file \fIfile\fR (\fIqemu\-vlan0.pcap\fR by default).
At most \fIlen\fR bytes (64k by default) per packet is stored. Y'all KNOW dat shit, muthafucka! Da file format is
libpcap, so it can be analyzed wit tools like fuckin tcpdump or Wireshark.
.IP "\fB\-net none\fR" 4
.IX Item "-net none"
Indicate dat no network devices should be configured. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is used to
override tha default configuration (\fB\-net nic \-net user\fR) which
is activated if no \fB\-net\fR options is provided.
.PP
Characta thang options:
.PP
Da general form of a cold-ass lil characta thang option is:
.IP "\fB\-chardev\fR \fIbackend\fR \fB,id=\fR\fIid\fR \fB[,mux=on|off] [,\fR\fIoptions\fR\fB]\fR" 4
.IX Item "-chardev backend ,id=id [,mux=on|off] [,options]"
Backend is one of:
\&\fBnull\fR,
\&\fBsocket\fR,
\&\fBudp\fR,
\&\fBmsmouse\fR,
\&\fBvc\fR,
\&\fBringbuf\fR,
\&\fBfile\fR,
\&\fBpipe\fR,
\&\fBconsole\fR,
\&\fBserial\fR,
\&\fBpty\fR,
\&\fBstdio\fR,
\&\fBbraille\fR,
\&\fBtty\fR,
\&\fBparallel\fR,
\&\fBparport\fR,
\&\fBspicevmc\fR.
\&\fBspiceport\fR.
Da specific backend will determine tha applicable options.
.Sp
All devices must have a id, which can be any strang up ta 127 charactas long.
It be used ta uniquely identify dis thang up in other command line directives.
.Sp
A characta thang may be used up in multiplexin mode by multiple front-ends.
Da key sequence of \fBControl-a\fR n' \fBc\fR will rotate tha input focus
between attached front-ends. Right back up in yo muthafuckin ass. Specify \fBmux=on\fR ta enable dis mode.
.Sp
Options ta each backend is busted lyrics bout below.
.IP "\fB\-chardev null ,id=\fR\fIid\fR" 4
.IX Item "-chardev null ,id=id"
A void device. This thang aint gonna emit any data, n' will drop any data it
receives. Da null backend do not take any options.
.IP "\fB\-chardev socket ,id=\fR\fIid\fR \fB[\fR\fI\s-1TCP\s0 options\fR \fBor\fR \fIunix options\fR\fB] [,server] [,nowait] [,telnet]\fR" 4
.IX Item "-chardev socket ,id=id [TCP options or unix options] [,server] [,nowait] [,telnet]"
Smoke a two-way stream socket, which can be either a \s-1TCP\s0 or a unix socket fo' realz. A
unix socket is ghon be pimped if \fBpath\fR is specified. Y'all KNOW dat shit, muthafucka! Behaviour is
undefined if \s-1TCP\s0 options is specified fo' a unix socket.
.Sp
\&\fBserver\fR specifies dat tha socket shall be a listenin socket.
.Sp
\&\fBnowait\fR specifies dat \s-1QEMU\s0 should not block waitin fo' a cold-ass lil client to
connect ta a listenin socket.
.Sp
\&\fBtelnet\fR specifies dat traffic on tha socket should interpret telnet
escape sequences.
.Sp
\&\s-1TCP\s0 n' unix socket options is given below:
.RS 4
.IP "\fB\s-1TCP\s0 options: port=\fR\fIport\fR \fB[,host=\fR\fIhost\fR\fB] [,to=\fR\fIto\fR\fB] [,ipv4] [,ipv6] [,nodelay]\fR" 4
.IX Item "TCP options: port=port [,host=host] [,to=to] [,ipv4] [,ipv6] [,nodelay]"
\&\fBhost\fR fo' a listenin socket specifies tha local address ta be bound.
For a cold-ass lil connectin socket species tha remote host ta connect to. \fBhost\fR is
optionizzle fo' listenin sockets, n' you can put dat on yo' toast. If not specified it defaults ta \f(CW0.0.0.0\fR.
.Sp
\&\fBport\fR fo' a listenin socket specifies tha local port ta be bound. Y'all KNOW dat shit, muthafucka! For a
connectin socket specifies tha port on tha remote host ta connect to.
\&\fBport\fR can be given as either a port number or a steez name.
\&\fBport\fR is required.
.Sp
\&\fBto\fR is only relevant ta listenin sockets, n' you can put dat on yo' toast. If it is specified, and
\&\fBport\fR cannot be bound, \s-1QEMU\s0 will attempt ta bind ta subsequent ports up
to n' includin \fBto\fR until it succeeds. \fBto\fR must be specified
as a port number.
.Sp
\&\fBipv4\fR n' \fBipv6\fR specify dat either IPv4 or IPv6 must be used.
If neither is specified tha socket may use either protocol.
.Sp
\&\fBnodelay\fR disablez tha Nagle algorithm.
.IP "\fBunix options: path=\fR\fIpath\fR" 4
.IX Item "unix options: path=path"
\&\fBpath\fR specifies tha local path of tha unix socket. \fBpath\fR is
required.
.RE
.RS 4
.RE
.IP "\fB\-chardev udp ,id=\fR\fIid\fR \fB[,host=\fR\fIhost\fR\fB] ,port=\fR\fIport\fR \fB[,localaddr=\fR\fIlocaladdr\fR\fB] [,localport=\fR\fIlocalport\fR\fB] [,ipv4] [,ipv6]\fR" 4
.IX Item "-chardev udp ,id=id [,host=host] ,port=port [,localaddr=localaddr] [,localport=localport] [,ipv4] [,ipv6]"
Sendz all traffic from tha hommie ta a remote host over \s-1UDP.\s0
.Sp
\&\fBhost\fR specifies tha remote host ta connect to. If not specified it
defaults ta \f(CW\*(C`localhost\*(C'\fR.
.Sp
\&\fBport\fR specifies tha port on tha remote host ta connect to. \fBport\fR
is required.
.Sp
\&\fBlocaladdr\fR specifies tha local address ta bind to. If not specified it
defaults ta \f(CW0.0.0.0\fR.
.Sp
\&\fBlocalport\fR specifies tha local port ta bind to. If not specified any
available local port is ghon be used.
.Sp
\&\fBipv4\fR n' \fBipv6\fR specify dat either IPv4 or IPv6 must be used.
If neither is specified tha thang may use either protocol.
.IP "\fB\-chardev msmouse ,id=\fR\fIid\fR" 4
.IX Item "-chardev msmouse ,id=id"
Forward \s-1QEMU\s0z emulated msmouse events ta tha guest. \fBmsmouse\fR do not
take any options.
.IP "\fB\-chardev vc ,id=\fR\fIid\fR \fB[[,width=\fR\fIwidth\fR\fB] [,height=\fR\fIheight\fR\fB]] [[,cols=\fR\fIcols\fR\fB] [,rows=\fR\fIrows\fR\fB]]\fR" 4
.IX Item "-chardev vc ,id=id [[,width=width] [,height=height]] [[,cols=cols] [,rows=rows]]"
Connect ta a \s-1QEMU\s0 text console. \fBvc\fR may optionally be given a specific
size.
.Sp
\&\fBwidth\fR n' \fBheight\fR specify tha width n' height respectively of
the console, up in pixels.
.Sp
\&\fBcols\fR n' \fBrows\fR specify dat tha console be sized ta fit a text
console wit tha given dimensions.
.IP "\fB\-chardev ringbuf ,id=\fR\fIid\fR \fB[,size=\fR\fIsize\fR\fB]\fR" 4
.IX Item "-chardev ringbuf ,id=id [,size=size]"
Smoke a rang buffer wit fixed size \fBsize\fR.
\&\fIsize\fR must be a juice of two, n' defaults ta \f(CW\*(C`64K\*(C'\fR).
.IP "\fB\-chardev file ,id=\fR\fIid\fR \fB,path=\fR\fIpath\fR" 4
.IX Item "-chardev file ,id=id ,path=path"
Log all traffic received from tha hommie ta a gangbangin' file.
.Sp
\&\fBpath\fR specifies tha path of tha file ta be opened. Y'all KNOW dat shit, muthafucka! This file will be
created if it do not already exist, n' overwritten if it do. \fBpath\fR
is required.
.IP "\fB\-chardev pipe ,id=\fR\fIid\fR \fB,path=\fR\fIpath\fR" 4
.IX Item "-chardev pipe ,id=id ,path=path"
Smoke a two-way connection ta tha guest. Da behaviour differs slightly between
Windows hosts n' other hosts:
.Sp
On Windows, a single duplex pipe is ghon be pimped at
\&\fI\e\e.pipe\e\f(BIpath\fI\fR.
.Sp
On other hosts, 2 pipes is ghon be pimped called \fI\f(BIpath\fI.in\fR and
\&\fI\f(BIpath\fI.out\fR. Data freestyled ta \fI\f(BIpath\fI.in\fR will be
received by tha guest. Data freestyled by tha hommie can be read from
\&\fI\f(BIpath\fI.out\fR. \s-1QEMU\s0 aint gonna create these fifos, n' requires dem to
be present.
.Sp
\&\fBpath\fR forms part of tha pipe path as busted lyrics bout above. \fBpath\fR is
required.
.IP "\fB\-chardev console ,id=\fR\fIid\fR" 4
.IX Item "-chardev console ,id=id"
Send traffic from tha hommie ta \s-1QEMU\s0z standard output. \fBconsole\fR do not
take any options.
.Sp
\&\fBconsole\fR is only available on Windows hosts.
.IP "\fB\-chardev serial ,id=\fR\fIid\fR \fB,path=\fR\fBpath\fR" 4
.IX Item "-chardev serial ,id=id ,path=path"
Send traffic from tha hommie ta a serial thang on tha host.
.Sp
On Unix hosts serial will straight-up accept any tty device,
not only serial lines.
.Sp
\&\fBpath\fR specifies tha name of tha serial thang ta open.
.IP "\fB\-chardev pty ,id=\fR\fIid\fR" 4
.IX Item "-chardev pty ,id=id"
Smoke a freshly smoked up pseudo-terminal on tha host n' connect ta dat shit. \fBpty\fR do
not take any options.
.Sp
\&\fBpty\fR aint available on Windows hosts.
.IP "\fB\-chardev stdio ,id=\fR\fIid\fR \fB[,signal=on|off]\fR" 4
.IX Item "-chardev stdio ,id=id [,signal=on|off]"
Connect ta standard input n' standard output of tha \s-1QEMU\s0 process.
.Sp
\&\fBsignal\fR controls if signals is enabled on tha terminal, dat includes
exitin \s-1QEMU\s0 wit tha key sequence \fBControl-c\fR. This option is enabled by
default, use \fBsignal=off\fR ta disable dat shit.
.Sp
\&\fBstdio\fR aint available on Windows hosts.
.IP "\fB\-chardev braille ,id=\fR\fIid\fR" 4
.IX Item "-chardev braille ,id=id"
Connect ta a local BrlAPI server n' shit. \fBbraille\fR do not take any options.
.IP "\fB\-chardev tty ,id=\fR\fIid\fR \fB,path=\fR\fIpath\fR" 4
.IX Item "-chardev tty ,id=id ,path=path"
\&\fBtty\fR is only available on Linux, Sun, FreeBSD, NetBSD, OpenBSD and
DragonFlyBSD hosts, n' you can put dat on yo' toast.  It be a alias fo' \fBserial\fR.
.Sp
\&\fBpath\fR specifies tha path ta tha tty. \fBpath\fR is required.
.IP "\fB\-chardev parallel ,id=\fR\fIid\fR \fB,path=\fR\fIpath\fR" 4
.IX Item "-chardev parallel ,id=id ,path=path"
.PD 0
.IP "\fB\-chardev parport ,id=\fR\fIid\fR \fB,path=\fR\fIpath\fR" 4
.IX Item "-chardev parport ,id=id ,path=path"
.PD
\&\fBparallel\fR is only available on Linux, FreeBSD n' DragonFlyBSD hosts.
.Sp
Connect ta a local parallel port.
.Sp
\&\fBpath\fR specifies tha path ta tha parallel port device. \fBpath\fR is
required.
.IP "\fB\-chardev spicevmc ,id=\fR\fIid\fR \fB,debug=\fR\fIdebug\fR\fB, name=\fR\fIname\fR" 4
.IX Item "-chardev spicevmc ,id=id ,debug=debug, name=name"
\&\fBspicevmc\fR is only available when spice support is built in.
.Sp
\&\fBdebug\fR debug level fo' spicevmc
.Sp
\&\fBname\fR name of spice channel ta connect to
.Sp
Connect ta a spice virtual machine channel, like fuckin vdiport.
.IP "\fB\-chardev spiceport ,id=\fR\fIid\fR \fB,debug=\fR\fIdebug\fR\fB, name=\fR\fIname\fR" 4
.IX Item "-chardev spiceport ,id=id ,debug=debug, name=name"
\&\fBspiceport\fR is only available when spice support is built in.
.Sp
\&\fBdebug\fR debug level fo' spicevmc
.Sp
\&\fBname\fR name of spice port ta connect to
.Sp
Connect ta a spice port, allowin a Spice client ta handle tha traffic
identified by a name (preferably a gangbangin' fqdn).
.PP
Device \s-1URL\s0 Syntax:
.PP
In addizzle ta rockin aiiight file images fo' tha emulated storage devices,
\&\s-1QEMU\s0 can also use networked resources like fuckin iSCSI devices. These are
specified rockin a special \s-1URL\s0 syntax.
.IP "\fBiSCSI\fR" 4
.IX Item "iSCSI"
iSCSI support allows \s-1QEMU\s0 ta access iSCSI resources directly n' use as
images fo' tha hommie storage. Both disk n' cdrom images is supported.
.Sp
Syntax fo' specifyin iSCSI LUNs is
\&\*(L"iscsi://<target\-ip>[:<port>]/<target\-iqn>/<lun>\*(R"
.Sp
By default qemu will use tha iSCSI initiator-name
\&'iqn.2008\-11.org.linux\-kvm[:<name>]' but dis can also be set from tha command
line or a cold-ass lil configuration file.
.Sp
Example (without authentication):
.Sp
.Vb 3
\&        qemu\-system\-i386 \-iscsi initiator\-name=iqn.2001\-04.com.example:my\-initiator \e
\&        \-cdrom iscsi://192.0.2.1/iqn.2001\-04.com.example/2 \e
\&        \-drive file=iscsi://192.0.2.1/iqn.2001\-04.com.example/1
.Ve
.Sp
Example (\s-1CHAP\s0 username/password via \s-1URL\s0):
.Sp
.Vb 1
\&        qemu\-system\-i386 \-drive file=iscsi://user%password@192.0.2.1/iqn.2001\-04.com.example/1
.Ve
.Sp
Example (\s-1CHAP\s0 username/password via environment variables):
.Sp
.Vb 3
\&        LIBISCSI_CHAP_USERNAME="user" \e
\&        LIBISCSI_CHAP_PASSWORD="password" \e
\&        qemu\-system\-i386 \-drive file=iscsi://192.0.2.1/iqn.2001\-04.com.example/1
.Ve
.Sp
iSCSI support be a optionizzle feature of \s-1QEMU\s0 n' only available when
compiled n' linked against libiscsi.
.Sp
iSCSI parametas like fuckin username n' password can also be specified via
a configuration file. Right back up in yo muthafuckin ass. See qemu-doc fo' mo' shiznit n' examples.
.IP "\fB\s-1NBD\s0\fR" 4
.IX Item "NBD"
\&\s-1QEMU\s0 supports \s-1NBD \s0(Network Block Devices) both rockin \s-1TCP\s0 protocol as well
as Unix Domain Sockets.
.Sp
Syntax fo' specifyin a \s-1NBD\s0 thang rockin \s-1TCP
\&\s0\*(L"nbd:<server\-ip>:<port>[:exportname=<export>]\*(R"
.Sp
Syntax fo' specifyin a \s-1NBD\s0 thang rockin Unix Domain Sockets
\&\*(L"nbd:unix:<domain\-socket>[:exportname=<export>]\*(R"
.Sp
Example fo' \s-1TCP\s0
.Sp
.Vb 1
\&        qemu\-system\-i386 \-\-drive file=nbd:192.0.2.1:30000
.Ve
.Sp
Example fo' Unix Domain Sockets
.Sp
.Vb 1
\&        qemu\-system\-i386 \-\-drive file=nbd:unix:/tmp/nbd\-socket
.Ve
.IP "\fB\s-1SSH\s0\fR" 4
.IX Item "SSH"
\&\s-1QEMU\s0 supports \s-1SSH \s0(Secure Shell) access ta remote disks.
.Sp
Examples:
.Sp
.Vb 2
\&        qemu\-system\-i386 \-drive file=ssh://user@host/path/to/disk.img
\&        qemu\-system\-i386 \-drive file.driver=ssh,file.user=user,file.host=host,file.port=22,file.path=/path/to/disk.img
.Ve
.Sp
Currently authentication must be done rockin ssh-agent.  Other
authentication methodz may be supported up in future.
.IP "\fBSheepdog\fR" 4
.IX Item "Sheepdog"
Sheepdog be a gangbangin' finger-lickin' distributed storage system fo' \s-1QEMU.
QEMU\s0 supports rockin either local sheepdog devices or remote networked
devices.
.Sp
Syntax fo' specifyin a gangbangin' finger-lickin' dirty-ass sheepdog device
.Sp
.Vb 1
\&        sheepdog[+tcp|+unix]://[host:port]/vdiname[?socket=path][#snapid|#tag]
.Ve
.Sp
Example
.Sp
.Vb 1
\&        qemu\-system\-i386 \-\-drive file=sheepdog://192.0.2.1:30000/MyVirtualMachine
.Ve
.Sp
See also <\fBhttp://http://www.osrg.net/sheepdog/\fR>.
.IP "\fBGlusterFS\fR" 4
.IX Item "GlusterFS"
GlusterFS be a user space distributed file system.
\&\s-1QEMU\s0 supports tha use of GlusterFS volumes fo' hostin \s-1VM\s0 disk images using
\&\s-1TCP,\s0 Unix Domain Sockets n' \s-1RDMA\s0 transhiznit protocols.
.Sp
Syntax fo' specifyin a \s-1VM\s0 disk image on GlusterFS volume is
.Sp
.Vb 1
\&        gluster[+transport]://[server[:port]]/volname/image[?socket=...]
.Ve
.Sp
Example
.Sp
.Vb 1
\&        qemu\-system\-x86_64 \-\-drive file=gluster://192.0.2.1/testvol/a.img
.Ve
.Sp
See also <\fBhttp://www.gluster.org\fR>.
.PP
Bluetooth(R) options:
.IP "\fB\-bt hci[...]\fR" 4
.IX Item "-bt hci[...]"
Defines tha function of tha correspondin Bluetooth \s-1HCI. \s0 \-bt options
are matched wit tha HCIs present up in tha chosen machine type.  For
example when emulatin a machine wit only one \s-1HCI\s0 built tha fuck into it, only
the first \f(CW\*(C`\-bt hci[...]\*(C'\fR option is valid n' defines tha \s-1HCI\s0's
logic.  Da Transhiznit Layer is decided by tha machine type.  Currently
the machines \f(CW\*(C`n800\*(C'\fR n' \f(CW\*(C`n810\*(C'\fR have one \s-1HCI\s0 n' all other
machines have none.
.Sp
Da followin three types is recognized:
.RS 4
.IP "\fB\-bt hci,null\fR" 4
.IX Item "-bt hci,null"
(default) Da correspondin Bluetooth \s-1HCI\s0 assumes no internal logic
and aint gonna respond ta any \s-1HCI\s0 commandz or emit events.
.IP "\fB\-bt hci,host[:\fR\fIid\fR\fB]\fR" 4
.IX Item "-bt hci,host[:id]"
(\f(CW\*(C`bluez\*(C'\fR only) Da correspondin \s-1HCI\s0 passes commandz / events
to / from tha physical \s-1HCI\s0 identified by tha name \fIid\fR (default:
\&\f(CW\*(C`hci0\*(C'\fR) on tha computa hustlin \s-1QEMU. \s0 Only available on \f(CW\*(C`bluez\*(C'\fR
capable systems like Linux.
.IP "\fB\-bt hci[,vlan=\fR\fIn\fR\fB]\fR" 4
.IX Item "-bt hci[,vlan=n]"
Add a virtual, standard \s-1HCI\s0 dat will participate up in tha Bluetooth
scatternizzle \fIn\fR (default \f(CW0\fR).  Similarly ta \fB\-net\fR
VLANs, devices inside a funky-ass bluetooth network \fIn\fR can only communicate
with other devices up in tha same network (scatternet).
.RE
.RS 4
.RE
.IP "\fB\-bt vhci[,vlan=\fR\fIn\fR\fB]\fR" 4
.IX Item "-bt vhci[,vlan=n]"
(Linux-host only) Smoke a \s-1HCI\s0 up in scatternizzle \fIn\fR (default 0) attached
to tha host bluetooth stack instead of ta tha emulated target.  This
allows tha host n' target machines ta participate up in a cold-ass lil common scatternet
and rap.  Requires tha Linux \f(CW\*(C`vhci\*(C'\fR driver installed. Y'all KNOW dat shit, muthafucka!  Can
be used as following:
.Sp
.Vb 1
\&        qemu\-system\-i386 [...OPTIONS...] \-bt hci,vlan=5 \-bt vhci,vlan=5
.Ve
.IP "\fB\-bt device:\fR\fIdev\fR\fB[,vlan=\fR\fIn\fR\fB]\fR" 4
.IX Item "-bt device:dev[,vlan=n]"
Emulate a funky-ass bluetooth thang \fIdev\fR n' place it up in network \fIn\fR
(default \f(CW0\fR).  \s-1QEMU\s0 can only emulate one type of bluetooth devices
currently:
.RS 4
.IP "\fBkeyboard\fR" 4
.IX Item "keyboard"
Virtual wireless keyboard implementin tha \s-1HIDP\s0 bluetooth profile.
.RE
.RS 4
.RE
.PP
\&\s-1TPM\s0 thang options:
.PP
Da general form of a \s-1TPM\s0 thang option is:
.IP "\fB\-tpmdev\fR \fIbackend\fR \fB,id=\fR\fIid\fR \fB[,\fR\fIoptions\fR\fB]\fR" 4
.IX Item "-tpmdev backend ,id=id [,options]"
Backend type must be:
\&\fBpassthrough\fR.
.Sp
Da specific backend type will determine tha applicable options.
Da \f(CW\*(C`\-tpmdev\*(C'\fR option creates tha \s-1TPM\s0 backend n' requires a
\&\f(CW\*(C`\-device\*(C'\fR option dat specifies tha \s-1TPM\s0 frontend intercourse model.
.Sp
Options ta each backend is busted lyrics bout below.
.Sp
Use 'help' ta print all available \s-1TPM\s0 backend types.
.Sp
.Vb 1
\&        qemu \-tpmdev help
.Ve
.IP "\fB\-tpmdev passthrough, id=\fR\fIid\fR\fB, path=\fR\fIpath\fR\fB, cancel\-path=\fR\fIcancel-path\fR" 4
.IX Item "-tpmdev passthrough, id=id, path=path, cancel-path=cancel-path"
(Linux-host only) Enable access ta tha hostz \s-1TPM\s0 rockin tha passthrough
driver.
.Sp
\&\fBpath\fR specifies tha path ta tha hostz \s-1TPM\s0 device, i.e., on
a Linux host dis would be \f(CW\*(C`/dev/tpm0\*(C'\fR.
\&\fBpath\fR is optionizzle n' by default \f(CW\*(C`/dev/tpm0\*(C'\fR is used.
.Sp
\&\fBcancel-path\fR specifies tha path ta tha host \s-1TPM\s0 devicez sysfs
entry allowin fo' cancellation of a ongoin \s-1TPM\s0 command.
\&\fBcancel-path\fR is optionizzle n' by default \s-1QEMU\s0 will search fo' the
sysfs entry ta use.
.Sp
Some notes bout rockin tha hostz \s-1TPM\s0 wit tha passall up in driver:
.Sp
Da \s-1TPM\s0 thang accessed by tha passall up in driver must not be
used by any other application on tha host.
.Sp
Since tha hostz firmware (\s-1BIOS/UEFI\s0) has already initialized tha \s-1TPM,\s0
the \s-1VM\s0z firmware (\s-1BIOS/UEFI\s0) aint gonna be able ta initialize the
\&\s-1TPM\s0 again n' again n' again n' may therefore not show a TPM-specific menu dat would
otherwise allow tha user ta configure tha \s-1TPM,\s0 e.g., allow tha user to
enable/disable or activate/deactivate tha \s-1TPM.\s0
Further, if \s-1TPM\s0 ballershizzle is busted out from within a \s-1VM\s0 then tha hostz \s-1TPM\s0
will git disabled n' deactivated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. To enable n' activate the
\&\s-1TPM\s0 again n' again n' again afterwards, tha host has ta be rebooted n' tha user is
required ta enta tha firmwarez menu ta enable n' activate tha \s-1TPM.\s0
If tha \s-1TPM\s0 is left disabled and/or deactivated most \s-1TPM\s0 commandz will fail.
.Sp
To create a passall up in \s-1TPM\s0 use tha followin two options:
.Sp
.Vb 1
\&        \-tpmdev passthrough,id=tpm0 \-device tpm\-tis,tpmdev=tpm0
.Ve
.Sp
Note dat tha \f(CW\*(C`\-tpmdev\*(C'\fR id is \f(CW\*(C`tpm0\*(C'\fR n' is referenced by
\&\f(CW\*(C`tpmdev=tpm0\*(C'\fR up in tha thang option.
.PP
Linux/Multiboot boot specific:
.PP
When rockin these options, you can bust a given Linux or Multiboot
kernel without installin it up in tha disk image. Well shiiiit, it can be useful
for easier testin of various kernels.
.IP "\fB\-kernel\fR \fIbzImage\fR" 4
.IX Item "-kernel bzImage"
Use \fIbzImage\fR as kernel image. Da kernel can be either a Linux kernel
or up in multiboot format.
.IP "\fB\-append\fR \fIcmdline\fR" 4
.IX Item "-append cmdline"
Use \fIcmdline\fR as kernel command line
.IP "\fB\-initrd\fR \fIfile\fR" 4
.IX Item "-initrd file"
Use \fIfile\fR as initial ram disk.
.ie n .IP "\fB\-initrd ""\fR\fIfile1\fR \fBarg=foo,\fR\fIfile2\fR\fB""\fR" 4
.el .IP "\fB\-initrd ``\fR\fIfile1\fR \fBarg=foo,\fR\fIfile2\fR\fB''\fR" 4
.IX Item "-initrd ""file1 arg=foo,file2"""
This syntax is only available wit multiboot.
.Sp
Use \fIfile1\fR n' \fIfile2\fR as modulez n' pass arg=foo as parameta ta the
first module.
.IP "\fB\-dtb\fR \fIfile\fR" 4
.IX Item "-dtb file"
Use \fIfile\fR as a thang tree binary (dtb) image n' pass it ta tha kernel
on boot.
.PP
Debug/Expert options:
.IP "\fB\-serial\fR \fIdev\fR" 4
.IX Item "-serial dev"
Redirect tha virtual serial port ta host characta device
\&\fIdev\fR. Da default thang is \f(CW\*(C`vc\*(C'\fR up in graphical mode and
\&\f(CW\*(C`stdio\*(C'\fR up in non graphical mode.
.Sp
This option can be used nuff muthafuckin times ta simulate up ta 4 serial
ports.
.Sp
Use \f(CW\*(C`\-serial none\*(C'\fR ta disable all serial ports.
.Sp
Available characta devices are:
.RS 4
.IP "\fBvc[:\fR\fIW\fR\fBx\fR\fIH\fR\fB]\fR" 4
.IX Item "vc[:WxH]"
Virtual console. Optionally, a width n' height can be given up in pixel with
.Sp
.Vb 1
\&        vc:800x600
.Ve
.Sp
It be also possible ta specify width or height up in characters:
.Sp
.Vb 1
\&        vc:80Cx24C
.Ve
.IP "\fBpty\fR" 4
.IX Item "pty"
[Linux only] Pseudo \s-1TTY \s0(a freshly smoked up \s-1PTY\s0 be automatically allocated)
.IP "\fBnone\fR" 4
.IX Item "none"
No thang be allocated.
.IP "\fBnull\fR" 4
.IX Item "null"
void device
.IP "\fB/dev/XXX\fR" 4
.IX Item "/dev/XXX"
[Linux only] Use host tty, e.g. \fI/dev/ttyS0\fR. Da host serial port
parametas is set accordin ta tha emulated ones.
.IP "\fB/dev/parport\fR\fIN\fR" 4
.IX Item "/dev/parportN"
[Linux only, parallel port only] Use host parallel port
\&\fIN\fR. Currently \s-1SPP\s0 n' \s-1EPP\s0 parallel port features can be used.
.IP "\fBfile:\fR\fIfilename\fR" 4
.IX Item "file:filename"
Write output ta \fIfilename\fR. No characta can be read.
.IP "\fBstdio\fR" 4
.IX Item "stdio"
[Unix only] standard input/output
.IP "\fBpipe:\fR\fIfilename\fR" 4
.IX Item "pipe:filename"
name pipe \fIfilename\fR
.IP "\fB\s-1COM\s0\fR\fIn\fR" 4
.IX Item "COMn"
[Windows only] Use host serial port \fIn\fR
.IP "\fBudp:[\fR\fIremote_host\fR\fB]:\fR\fIremote_port\fR\fB[@[\fR\fIsrc_ip\fR\fB]:\fR\fIsrc_port\fR\fB]\fR" 4
.IX Item "udp:[remote_host]:remote_port[@[src_ip]:src_port]"
This implements \s-1UDP\s0 Net Console.
When \fIremote_host\fR or \fIsrc_ip\fR is not specified
they default ta \f(CW0.0.0.0\fR.
When not rockin a specified \fIsrc_port\fR a random port be automatically chosen.
.Sp
If you just want a simple readonly console you can use \f(CW\*(C`netcat\*(C'\fR or
\&\f(CW\*(C`nc\*(C'\fR, by startin \s-1QEMU\s0 with: \f(CW\*(C`\-serial udp::4555\*(C'\fR n' nc as:
\&\f(CW\*(C`nc \-u \-l \-p 4555\*(C'\fR fo' realz. Any time \s-1QEMU\s0 writes suttin' ta dat port it
will step tha fuck up in tha netconsole session.
.Sp
If you plan ta bust charactas back via netconsole or you wanna stop
and start \s-1QEMU\s0 a shitload of times, you should have \s-1QEMU\s0 use tha same
source port each time by rockin suttin' like \f(CW\*(C`\-serial
udp::4555@4556\*(C'\fR ta \s-1QEMU.\s0 Another approach is ta bust a patched
version of netcat which can dig a \s-1TCP\s0 port n' bust n' receive
charactas via udp.  If you gotz a patched version of netcat which
activates telnet remote echo n' single char transfer, then you can
use tha followin options ta step up a netcat redirector ta allow
telnet on port 5555 ta access tha \s-1QEMU\s0 port.
.RS 4
.ie n .IP """QEMU Options:""" 4
.el .IP "\f(CWQEMU Options:\fR" 4
.IX Item "QEMU Options:"
\&\-serial udp::4555@4556
.ie n .IP """netcat options:""" 4
.el .IP "\f(CWnetcat options:\fR" 4
.IX Item "netcat options:"
\&\-u \-P 4555 \-L 0.0.0.0:4556 \-t \-p 5555 \-I \-T
.ie n .IP """telnet options:""" 4
.el .IP "\f(CWtelnet options:\fR" 4
.IX Item "telnet options:"
localhost 5555
.RE
.RS 4
.RE
.IP "\fBtcp:[\fR\fIhost\fR\fB]:\fR\fIport\fR\fB[,\fR\fIserver\fR\fB][,nowait][,nodelay]\fR" 4
.IX Item "tcp:[host]:port[,server][,nowait][,nodelay]"
Da \s-1TCP\s0 Net Console has two modez of operation. I aint talkin' bout chicken n' gravy biatch.  It can bust tha serial
I/O ta a location or wait fo' a cold-ass lil connection from a location. I aint talkin' bout chicken n' gravy biatch.  By default
the \s-1TCP\s0 Net Console is busted ta \fIhost\fR all up in tha \fIport\fR.  If you use
the \fIserver\fR option \s-1QEMU\s0 will wait fo' a cold-ass lil client socket application
to connect ta tha port before continuing, unless tha \f(CW\*(C`nowait\*(C'\fR
option was specified. Y'all KNOW dat shit, muthafucka!  Da \f(CW\*(C`nodelay\*(C'\fR option disablez tha Nagle buffering
algorithm.  If \fIhost\fR is omitted, 0.0.0.0 be assumed. Y'all KNOW dat shit, muthafucka! Only
one \s-1TCP\s0 connection at a time be accepted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Yo ass can use \f(CW\*(C`telnet\*(C'\fR to
connect ta tha correspondin characta device.
.RS 4
.ie n .IP """Example ta bust tcp console ta 192.168.0.2 port 4444""" 4
.el .IP "\f(CWExample ta bust tcp console ta 192.168.0.2 port 4444\fR" 4
.IX Item "Example ta bust tcp console ta 192.168.0.2 port 4444"
\&\-serial tcp:192.168.0.2:4444
.ie n .IP """Example ta listen n' wait on port 4444 fo' connection""" 4
.el .IP "\f(CWExample ta listen n' wait on port 4444 fo' connection\fR" 4
.IX Item "Example ta listen n' wait on port 4444 fo' connection"
\&\-serial tcp::4444,server
.ie n .IP """Example ta not wait n' listen on ip 192.168.0.100 port 4444""" 4
.el .IP "\f(CWExample ta not wait n' listen on ip 192.168.0.100 port 4444\fR" 4
.IX Item "Example ta not wait n' listen on ip 192.168.0.100 port 4444"
\&\-serial tcp:192.168.0.100:4444,server,nowait
.RE
.RS 4
.RE
.IP "\fBtelnet:\fR\fIhost\fR\fB:\fR\fIport\fR\fB[,server][,nowait][,nodelay]\fR" 4
.IX Item "telnet:host:port[,server][,nowait][,nodelay]"
Da telnet protocol is used instead of raw tcp sockets, n' you can put dat on yo' toast.  Da options
work tha same as if you had specified \f(CW\*(C`\-serial tcp\*(C'\fR.  The
difference is dat tha port acts like a telnet server or client using
telnet option negotiation. I aint talkin' bout chicken n' gravy biatch.  This will also allow you ta bust the
\&\s-1MAGIC_SYSRQ\s0 sequence if you bust a telnet dat supports bustin  tha break
sequence.  Typically up in unix telnet you do it wit Control\-] n' then
type \*(L"send break\*(R" followed by pressin tha enta key.
.IP "\fBunix:\fR\fIpath\fR\fB[,server][,nowait]\fR" 4
.IX Item "unix:path[,server][,nowait]"
A unix domain socket is used instead of a tcp socket.  Da option works the
same as if you had specified \f(CW\*(C`\-serial tcp\*(C'\fR except tha unix domain socket
\&\fIpath\fR is used fo' connections.
.IP "\fBmon:\fR\fIdev_string\fR" 4
.IX Item "mon:dev_string"
This be a special option ta allow tha monitor ta be multiplexed onto
another serial port.  Da monitor be accessed wit key sequence of
\&\fBControl-a\fR n' then pressin \fBc\fR.
\&\fIdev_string\fR should be any one of tha serial devices specified
above.  An example ta multiplex tha monitor onto a telnet server
listenin on port 4444 would be:
.RS 4
.ie n .IP """\-serial mon:telnet::4444,server,nowait""" 4
.el .IP "\f(CW\-serial mon:telnet::4444,server,nowait\fR" 4
.IX Item "-serial mon:telnet::4444,server,nowait"
.RE
.RS 4
.Sp
When tha monitor is multiplexed ta stdio up in dis way, Ctrl+C aint gonna terminate
\&\s-1QEMU\s0 any mo' but is ghon be passed ta tha hommie instead.
.RE
.IP "\fBbraille\fR" 4
.IX Item "braille"
Braille device.  This will use BrlAPI ta display tha braille output on a real
or fake device.
.IP "\fBmsmouse\fR" 4
.IX Item "msmouse"
Three button serial mouse. Configure tha hommie ta use Microsizzlez protocol.
.RE
.RS 4
.RE
.IP "\fB\-parallel\fR \fIdev\fR" 4
.IX Item "-parallel dev"
Redirect tha virtual parallel port ta host thang \fIdev\fR (same
devices as tha serial port). On Linux hosts, \fI/dev/parportN\fR can
be used ta use hardware devices connected on tha correspondin host
parallel port.
.Sp
This option can be used nuff muthafuckin times ta simulate up ta 3 parallel
ports.
.Sp
Use \f(CW\*(C`\-parallel none\*(C'\fR ta disable all parallel ports.
.IP "\fB\-monitor\fR \fIdev\fR" 4
.IX Item "-monitor dev"
Redirect tha monitor ta host thang \fIdev\fR (same devices as the
serial port).
Da default thang is \f(CW\*(C`vc\*(C'\fR up in graphical mode n' \f(CW\*(C`stdio\*(C'\fR in
non graphical mode.
Use \f(CW\*(C`\-monitor none\*(C'\fR ta disable tha default monitor.
.IP "\fB\-qmp\fR \fIdev\fR" 4
.IX Item "-qmp dev"
Like \-monitor but opens up in 'control' mode.
.IP "\fB\-mon [chardev=]name[,mode=readline|control][,default]\fR" 4
.IX Item "-mon [chardev=]name[,mode=readline|control][,default]"
Setup monitor on chardev \fIname\fR.
.IP "\fB\-debugcon\fR \fIdev\fR" 4
.IX Item "-debugcon dev"
Redirect tha debug console ta host thang \fIdev\fR (same devices as the
serial port).  Da debug console be a I/O port which is typically port
0xe9; freestylin ta dat I/O port sendz output ta dis device.
Da default thang is \f(CW\*(C`vc\*(C'\fR up in graphical mode n' \f(CW\*(C`stdio\*(C'\fR in
non graphical mode.
.IP "\fB\-pidfile\fR \fIfile\fR" 4
.IX Item "-pidfile file"
Store tha \s-1QEMU\s0 process \s-1PID\s0 up in \fIfile\fR. Well shiiiit, it is useful if you launch \s-1QEMU\s0
from a script.
.IP "\fB\-singlestep\fR" 4
.IX Item "-singlestep"
Run tha emulation up in single step mode.
.IP "\fB\-S\fR" 4
.IX Item "-S"
Do not start \s-1CPU\s0 at startup (you must type 'c' up in tha monitor).
.IP "\fB\-realtime mlock=on|off\fR" 4
.IX Item "-realtime mlock=on|off"
Run qemu wit realtime features.
mlockin qemu n' hommie memory can be enabled via \fBmlock=on\fR
(enabled by default).
.IP "\fB\-gdb\fR \fIdev\fR" 4
.IX Item "-gdb dev"
Wait fo' gdb connection on thang \fIdev\fR. Typical
connections will likely be TCP-based yo, but also \s-1UDP,\s0 pseudo \s-1TTY,\s0 or even
stdio is reasonable use case. Da latta be allowin ta start \s-1QEMU\s0 from
within gdb n' establish tha connection via a pipe:
.Sp
.Vb 1
\&        (gdb) target remote | exec qemu\-system\-i386 \-gdb stdio ...
.Ve
.IP "\fB\-s\fR" 4
.IX Item "-s"
Shorthand fo' \-gdb tcp::1234, i.e. open a gdbserver on \s-1TCP\s0 port 1234.
.IP "\fB\-d\fR \fIitem1\fR\fB[,...]\fR" 4
.IX Item "-d item1[,...]"
Enable loggin of specified items. Use '\-d help' fo' a list of log items.
.IP "\fB\-D\fR \fIlogfile\fR" 4
.IX Item "-D logfile"
Output log up in \fIlogfile\fR instead of ta stderr
.IP "\fB\-L\fR  \fIpath\fR" 4
.IX Item "-L path"
Set tha directory fo' tha \s-1BIOS, VGA BIOS\s0 n' keymaps.
.IP "\fB\-bios\fR \fIfile\fR" 4
.IX Item "-bios file"
Set tha filename fo' tha \s-1BIOS.\s0
.IP "\fB\-enable\-kvm\fR" 4
.IX Item "-enable-kvm"
Enable \s-1KVM\s0 full virtualization support. This option is only available
if \s-1KVM\s0 support is enabled when compiling.
.IP "\fB\-xen\-domid\fR \fIid\fR" 4
.IX Item "-xen-domid id"
Specify xen hommie domain \fIid\fR (\s-1XEN\s0 only).
.IP "\fB\-xen\-create\fR" 4
.IX Item "-xen-create"
Smoke domain rockin xen hypercalls, bypassin xend.
Warning: should not be used when xend is up in use (\s-1XEN\s0 only).
.IP "\fB\-xen\-attach\fR" 4
.IX Item "-xen-attach"
Attach ta existin xen domain.
xend will use dis when startin \s-1QEMU \s0(\s-1XEN\s0 only).
.IP "\fB\-no\-reboot\fR" 4
.IX Item "-no-reboot"
Exit instead of rebooting.
.IP "\fB\-no\-shutdown\fR" 4
.IX Item "-no-shutdown"
Don't exit \s-1QEMU\s0 on hommie shutdown yo, but instead only stop tha emulation.
This allows fo' instizzle switchin ta monitor ta commit chizzlez ta the
disk image.
.IP "\fB\-loadvm\fR \fIfile\fR" 4
.IX Item "-loadvm file"
Start right away wit a saved state (\f(CW\*(C`loadvm\*(C'\fR up in monitor)
.IP "\fB\-daemonize\fR" 4
.IX Item "-daemonize"
Daemonize tha \s-1QEMU\s0 process afta initialization. I aint talkin' bout chicken n' gravy biatch.  \s-1QEMU\s0 aint gonna detach from
standard \s-1IO\s0 until it is locked n loaded ta receive connections on any of its devices.
This option be a useful way fo' external programs ta launch \s-1QEMU\s0 without having
to cope wit initialization race conditions.
.IP "\fB\-option\-rom\fR \fIfile\fR" 4
.IX Item "-option-rom file"
Load tha contentz of \fIfile\fR as a option \s-1ROM.\s0
This option is useful ta load thangs like EtherBoot.
.IP "\fB\-clock\fR \fImethod\fR" 4
.IX Item "-clock method"
Force tha use of tha given methodz fo' timer alarm. To peep what tha fuck timers
are available use \f(CW\*(C`\-clock help\*(C'\fR.
.IP "\fB\-rtc [base=utc|localtime|\fR\fIdate\fR\fB][,clock=host|vm][,driftfix=none|slew]\fR" 4
.IX Item "-rtc [base=utc|localtime|date][,clock=host|vm][,driftfix=none|slew]"
Specify \fBbase\fR as \f(CW\*(C`utc\*(C'\fR or \f(CW\*(C`localtime\*(C'\fR ta let tha \s-1RTC\s0 start all up in tha current
\&\s-1UTC\s0 or local time, respectively. \f(CW\*(C`localtime\*(C'\fR is required fo' erect date in
MS-DOS or Windows. To start at a specific point up in time, provide \fIdate\fR up in the
format \f(CW\*(C`2006\-06\-17T16:01:21\*(C'\fR or \f(CW\*(C`2006\-06\-17\*(C'\fR. Da default base is \s-1UTC.\s0
.Sp
By default tha \s-1RTC\s0 is driven by tha host system time. This allows ta use the
\&\s-1RTC\s0 as accurate reference clock inside tha guest, specifically if tha host
time is smoothly followin a accurate external reference clock, e.g. via \s-1NTP.\s0
If you wanna isolate tha hommie time from tha host, you can set \fBclock\fR
to \f(CW\*(C`rt\*(C'\fR instead. Y'all KNOW dat shit, muthafucka!  To even prevent it from progressin durin suspension,
you can set it ta \f(CW\*(C`vm\*(C'\fR.
.Sp
Enable \fBdriftfix\fR (i386 targets only) if you experience time drift problems,
specifically wit Windows' \s-1ACPI HAL.\s0 This option will try ta figure up how
many timer interrupts was not processed by tha Windows hommie n' will
re-inject em.
.IP "\fB\-icount [\fR\fIN\fR\fB|auto]\fR" 4
.IX Item "-icount [N|auto]"
Enable virtual instruction counter n' shit.  Da virtual cpu will execute one
instruction every last muthafuckin 2^\fIN\fR nz of virtual time.  If \f(CW\*(C`auto\*(C'\fR is specified
then tha virtual cpu speed is ghon be automatically adjusted ta keep virtual
time within all dem secondz of real time.
.Sp
Note dat while dis option can give deterministic behavior, it do not
provide cycle accurate emulation. I aint talkin' bout chicken n' gravy biatch.  Modern CPUs contain superscalar up of
order cores wit complex cache hierarchies. Put ya muthafuckin choppers up if ya feel dis!  Da number of instructions
executed often has lil or no correlation wit actual performance.
.IP "\fB\-watchdog\fR \fImodel\fR" 4
.IX Item "-watchdog model"
Smoke a virtual hardware watchdog device.  Once enabled (by a guest
action), tha watchdog must be periodically polled by a agent inside
the hommie or else tha hommie is ghon be restarted.
.Sp
Da \fImodel\fR is tha model of hardware watchdog ta emulate.  Chizzles
for model are: \f(CW\*(C`ib700\*(C'\fR (iBASE 700) which be a straight-up simple \s-1ISA\s0
watchdog wit a single timer, or \f(CW\*(C`i6300esb\*(C'\fR (Intel 6300ESB I/O
controlla hub) which be a much mo' featureful PCI-based dual-timer
watchdog.  Chizzle a model fo' which yo' hommie has drivers.
.Sp
Use \f(CW\*(C`\-watchdog help\*(C'\fR ta list available hardware models.  Only one
watchdog can be enabled fo' a guest.
.IP "\fB\-watchdog\-action\fR \fIaction\fR" 4
.IX Item "-watchdog-action action"
Da \fIaction\fR controls what tha fuck \s-1QEMU\s0 will do when tha watchdog timer
expires.
Da default is
\&\f(CW\*(C`reset\*(C'\fR (forcefully reset tha guest).
Other possible actions are:
\&\f(CW\*(C`shutdown\*(C'\fR (attempt ta gracefully shutdown tha guest),
\&\f(CW\*(C`poweroff\*(C'\fR (forcefully poweroff tha guest),
\&\f(CW\*(C`pause\*(C'\fR (pause tha guest),
\&\f(CW\*(C`debug\*(C'\fR (print a thugged-out debug message n' continue), or
\&\f(CW\*(C`none\*(C'\fR (do nothing).
.Sp
Note dat tha \f(CW\*(C`shutdown\*(C'\fR action requires dat tha hommie responds
to \s-1ACPI\s0 signals, which it may not be able ta do up in tha sort of
situations where tha watchdog would have expired, n' thus
\&\f(CW\*(C`\-watchdog\-action shutdown\*(C'\fR aint recommended fo' thang use.
.Sp
Examples:
.RS 4
.ie n .IP """\-watchdog i6300esb \-watchdog\-action pause""" 4
.el .IP "\f(CW\-watchdog i6300esb \-watchdog\-action pause\fR" 4
.IX Item "-watchdog i6300esb -watchdog-action pause"
.PD 0
.ie n .IP """\-watchdog ib700""" 4
.el .IP "\f(CW\-watchdog ib700\fR" 4
.IX Item "-watchdog ib700"
.RE
.RS 4
.RE
.IP "\fB\-echr\fR \fInumeric_ascii_value\fR" 4
.IX Item "-echr numeric_ascii_value"
.PD
Change tha escape characta used fo' switchin ta tha monitor when using
monitor n' serial sharing.  Da default is \f(CW0x01\fR when rockin the
\&\f(CW\*(C`\-nographic\*(C'\fR option. I aint talkin' bout chicken n' gravy biatch.  \f(CW0x01\fR is equal ta pressing
\&\f(CW\*(C`Control\-a\*(C'\fR.  Yo ass can select a gangbangin' finger-lickin' different characta from tha ascii
control keys where 1 all up in 26 map ta Control-a all up in Control-z.  For
instizzle you could use tha either of tha followin ta chizzle tha escape
characta ta Control-t.
.RS 4
.ie n .IP """\-echr 0x14""" 4
.el .IP "\f(CW\-echr 0x14\fR" 4
.IX Item "-echr 0x14"
.PD 0
.ie n .IP """\-echr 20""" 4
.el .IP "\f(CW\-echr 20\fR" 4
.IX Item "-echr 20"
.RE
.RS 4
.RE
.IP "\fB\-virtioconsole\fR \fIc\fR" 4
.IX Item "-virtioconsole c"
.PD
Set virtio console.
.Sp
This option is maintained fo' backward compatibility.
.Sp
Please use \f(CW\*(C`\-device virtconsole\*(C'\fR fo' tha freshly smoked up way of invocation.
.IP "\fB\-show\-cursor\fR" 4
.IX Item "-show-cursor"
Show cursor.
.IP "\fB\-tb\-size\fR \fIn\fR" 4
.IX Item "-tb-size n"
Set \s-1TB\s0 size.
.IP "\fB\-incoming\fR \fIport\fR" 4
.IX Item "-incomin port"
Prepare fo' incomin migration, listen on \fIport\fR.
.IP "\fB\-nodefaults\fR" 4
.IX Item "-nodefaults"
Don't create default devices. Normally, \s-1QEMU\s0 sets tha default devices like serial
port, parallel port, virtual console, monitor device, \s-1VGA\s0 adapter, floppy and
CD-ROM drive n' others. Da \f(CW\*(C`\-nodefaults\*(C'\fR option will disable all them
default devices.
.IP "\fB\-chroot\fR \fIdir\fR" 4
.IX Item "-chroot dir"
Immediately before startin hommie execution, chroot ta tha specified
directory.  Especially useful up in combination wit \-runas.
.IP "\fB\-runas\fR \fIuser\fR" 4
.IX Item "-runas user"
Immediately before startin hommie execution, drop root privileges, switching
to tha specified user.
.IP "\fB\-prom\-env\fR \fIvariable\fR\fB=\fR\fIvalue\fR" 4
.IX Item "-prom-env variable=value"
Set OpenBIOS nvram \fIvariable\fR ta given \fIvalue\fR (\s-1PPC, SPARC\s0 only).
.IP "\fB\-semihosting\fR" 4
.IX Item "-semihosting"
Semihostin mode (\s-1ARM, M68K,\s0 Xtensa only).
.IP "\fB\-old\-param\fR" 4
.IX Item "-old-param"
Oldskool param mode (\s-1ARM\s0 only).
.IP "\fB\-sandbox\fR \fIarg\fR" 4
.IX Item "-sandbox arg"
Enable Seccomp mode 2 system call filter n' shit. 'on' will enable syscall filterin n' 'off' will
disable dat shit.  Da default is 'off'.
.IP "\fB\-readconfig\fR \fIfile\fR" 4
.IX Item "-readconfig file"
Read thang configuration from \fIfile\fR. This approach is useful when you wanna spawn
\&\s-1QEMU\s0 process wit nuff command line options but you don't wanna exceed tha command line
characta limit.
.IP "\fB\-writeconfig\fR \fIfile\fR" 4
.IX Item "-writeconfig file"
Write thang configuration ta \fIfile\fR. Da \fIfile\fR can be either filename ta save
command line n' thang configuration tha fuck into file or dash \f(CW\*(C`\-\*(C'\fR) characta ta print the
output ta stdout. This can be lata used as input file fo' \f(CW\*(C`\-readconfig\*(C'\fR option.
.IP "\fB\-nodefconfig\fR" 4
.IX Item "-nodefconfig"
Normally \s-1QEMU\s0 loadz configuration filez from \fIsysconfdir\fR n' \fIdatadir\fR at startup.
Da \f(CW\*(C`\-nodefconfig\*(C'\fR option will prevent \s-1QEMU\s0 from loadin any of dem config files.
.IP "\fB\-no\-user\-config\fR" 4
.IX Item "-no-user-config"
Da \f(CW\*(C`\-no\-user\-config\*(C'\fR option make \s-1QEMU\s0 not load any of tha user-provided
config filez on \fIsysconfdir\fR yo, but won't make it skip tha QEMU-provided config
filez from \fIdatadir\fR.
.IP "\fB\-trace [events=\fR\fIfile\fR\fB][,file=\fR\fIfile\fR\fB]\fR" 4
.IX Item "-trace [events=file][,file=file]"
Specify tracin options.
.RS 4
.IP "\fBevents=\fR\fIfile\fR" 4
.IX Item "events=file"
Immediately enable events listed up in \fIfile\fR.
Da file must contain one event name (as listed up in tha \fItrace-events\fR file)
per line.
This option is only available if \s-1QEMU\s0 has been compiled with
either \fIsimple\fR or \fIstderr\fR tracin backend.
.IP "\fBfile=\fR\fIfile\fR" 4
.IX Item "file=file"
Log output traces ta \fIfile\fR.
.Sp
This option is only available if \s-1QEMU\s0 has been compiled with
the \fIsimple\fR tracin backend.
.RE
.RS 4
.RE
.IP "\fB\-enable\-fips\fR" 4
.IX Item "-enable-fips"
Enable \s-1FIPS 140\-2\s0 compliizzle mode.
.IP "\fB\-object\fR \fItypename\fR\fB[,\fR\fIprop1\fR\fB=\fR\fIvalue1\fR\fB,...]\fR" 4
.IX Item "-object typename[,prop1=value1,...]"
Smoke a freshly smoked up object of type \fItypename\fR settin properties
in tha order they is specified. Y'all KNOW dat shit, muthafucka!  Note dat tha 'id'
property must be set.  These objects is placed up in the
\&'/objects' path.
.IP "\fB\-msg timestamp[=on|off]\fR" 4
.IX Item "-msg timestamp[=on|off]"
prepend a timestamp ta each log message.(default:on)
.PP
Durin tha graphical emulation, you can use special key combinations ta chizzle
modes. Da default key mappings is shown below yo, but if you use \f(CW\*(C`\-alt\-grab\*(C'\fR
then tha modifier is Ctrl-Alt-Shift (instead of Ctrl-Alt) n' if you use
\&\f(CW\*(C`\-ctrl\-grab\*(C'\fR then tha modifier is tha right Ctrl key (instead of Ctrl-Alt):
.IP "\fBCtrl-Alt-f\fR" 4
.IX Item "Ctrl-Alt-f"
Toggle full screen
.IP "\fBCtrl\-Alt\-+\fR" 4
.IX Item "Ctrl-Alt-+"
Enpimpin' tha screen
.IP "\fBCtrl\-Alt\*(--\fR" 4
.IX Item "Ctrl-Alt"
Shrink tha screen
.IP "\fBCtrl-Alt-u\fR" 4
.IX Item "Ctrl-Alt-u"
Restore tha screenz un-scaled dimensions
.IP "\fBCtrl-Alt-n\fR" 4
.IX Item "Ctrl-Alt-n"
Switch ta virtual console 'n'. Right back up in yo muthafuckin ass. Standard console mappings are:
.RS 4
.IP "\fI1\fR" 4
.IX Item "1"
Target system display
.IP "\fI2\fR" 4
.IX Item "2"
Monitor
.IP "\fI3\fR" 4
.IX Item "3"
Serial port
.RE
.RS 4
.RE
.IP "\fBCtrl-Alt\fR" 4
.IX Item "Ctrl-Alt"
Toggle mouse n' keyboard grab.
.PP
In tha virtual consoles, you can use \fBCtrl-Up\fR, \fBCtrl-Down\fR,
\&\fBCtrl-PageUp\fR n' \fBCtrl-PageDown\fR ta move up in tha back log.
.PP
Durin emulation, if yo ass is rockin tha \fB\-nographic\fR option, use
\&\fBCtrl-a h\fR ta git terminal commands:
.IP "\fBCtrl-a h\fR" 4
.IX Item "Ctrl-a h"
.PD 0
.IP "\fBCtrl-a ?\fR" 4
.IX Item "Ctrl-a ?"
.PD
Print dis help
.IP "\fBCtrl-a x\fR" 4
.IX Item "Ctrl-a x"
Exit emulator
.IP "\fBCtrl-a s\fR" 4
.IX Item "Ctrl-a s"
Save disk data back ta file (if \-snapshot)
.IP "\fBCtrl-a t\fR" 4
.IX Item "Ctrl-a t"
Toggle console timestamps
.IP "\fBCtrl-a b\fR" 4
.IX Item "Ctrl-a b"
Send break (magic sysrq up in Linux)
.IP "\fBCtrl-a c\fR" 4
.IX Item "Ctrl-a c"
Switch between console n' monitor
.IP "\fBCtrl-a Ctrl-a\fR" 4
.IX Item "Ctrl-a Ctrl-a"
Send Ctrl-a
.PP
Da followin options is specific ta tha PowerPC emulation:
.IP "\fB\-g\fR \fIW\fR\fBx\fR\fIH\fR\fB[x\fR\fI\s-1DEPTH\s0\fR\fB]\fR" 4
.IX Item "-g WxH[xDEPTH]"
Set tha initial \s-1VGA\s0 graphic mode. Da default is 800x600x15.
.IP "\fB\-prom\-env\fR \fIstring\fR" 4
.IX Item "-prom-env string"
Set OpenBIOS variablez up in \s-1NVRAM,\s0 fo' example:
.Sp
.Vb 3
\&        qemu\-system\-ppc \-prom\-env \*(Aqauto\-boot?=false\*(Aq \e
\&         \-prom\-env \*(Aqboot\-device=hd:2,\eyaboot\*(Aq \e
\&         \-prom\-env \*(Aqboot\-args=conf=hd:2,\eyaboot.conf\*(Aq
.Ve
.Sp
These variablez is not used by Open Hack'Ware.
.PP
Da followin options is specific ta tha Sparc32 emulation:
.IP "\fB\-g\fR \fIW\fR\fBx\fR\fIH\fR\fBx[x\fR\fI\s-1DEPTH\s0\fR\fB]\fR" 4
.IX Item "-g WxHx[xDEPTH]"
Set tha initial \s-1TCX\s0 graphic mode. Da default is 1024x768x8, currently
the only other possible mode is 1024x768x24.
.IP "\fB\-prom\-env\fR \fIstring\fR" 4
.IX Item "-prom-env string"
Set OpenBIOS variablez up in \s-1NVRAM,\s0 fo' example:
.Sp
.Vb 2
\&        qemu\-system\-sparc \-prom\-env \*(Aqauto\-boot?=false\*(Aq \e
\&         \-prom\-env \*(Aqboot\-device=sd(0,2,0):d\*(Aq \-prom\-env \*(Aqboot\-args=linux single\*(Aq
.Ve
.IP "\fB\-M [SS\-4|SS\-5|SS\-10|SS\-20|SS\-600MP|LX|Voyager|SPARCClassic] [|SPARCbook]\fR" 4
.IX Item "-M [SS-4|SS-5|SS-10|SS-20|SS-600MP|LX|Voyager|SPARCClassic] [|SPARCbook]"
Set tha emulated machine type. Default is \s-1SS\-5.\s0
.PP
Da followin options is specific ta tha Sparc64 emulation:
.IP "\fB\-prom\-env\fR \fIstring\fR" 4
.IX Item "-prom-env string"
Set OpenBIOS variablez up in \s-1NVRAM,\s0 fo' example:
.Sp
.Vb 1
\&        qemu\-system\-sparc64 \-prom\-env \*(Aqauto\-boot?=false\*(Aq
.Ve
.IP "\fB\-M [sun4u|sun4v|Niagara]\fR" 4
.IX Item "-M [sun4u|sun4v|Niagara]"
Set tha emulated machine type. Da default is sun4u.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Da \s-1HTML\s0 documentation of \s-1QEMU\s0 fo' mo' precise shiznit n' Linux
user mode emulator invocation.
.SH "AUTHOR"
.IX Header "AUTHOR"
Fabrice Bellard
