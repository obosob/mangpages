.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5101DELTA 1"
.TH PERL5101DELTA 1 "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5101delta \- what tha fuck is freshly smoked up fo' perl v5.10.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document raps bout differences between tha 5.10.0 release and
the 5.10.1 release.
.PP
If yo ass is upgradin from a earlier release like fuckin 5.8.8, first read
the perl5100delta, which raps bout differences between 5.8.8 and
5.10.0
.SH "Incompatible Chizzles"
.IX Header "Incompatible Chizzles"
.SS "Switch statement chizzles"
.IX Subsection "Switch statement chizzles"
Da handlin of complex expressions by tha \f(CW\*(C`given\*(C'\fR/\f(CW\*(C`when\*(C'\fR switch
statement has been enhanced. Y'all KNOW dat shit, muthafucka! There is two freshly smoked up cases where \f(CW\*(C`when\*(C'\fR now
interprets its argument as a funky-ass boolean, instead of a expression ta be used
in a smart-ass match:
.IP "flip-flop operators" 4
.IX Item "flip-flop operators"
Da \f(CW\*(C`..\*(C'\fR n' \f(CW\*(C`...\*(C'\fR flip-flop operators is now evaluated up in boolean
context, followin they usual semantics; peep \*(L"Range Operators\*(R" up in perlop.
.Sp
Note that, as up in perl 5.10.0, \f(CW\*(C`when (1..10)\*(C'\fR aint gonna work ta test
whether a given value be a integer between 1 n' 10; you should use
\&\f(CW\*(C`when ([1..10])\*(C'\fR instead (note tha array reference).
.Sp
But fuck dat shiznit yo, tha word on tha street is dat contrary ta 5.10.0, evaluatin tha flip-flop operators up in boolean
context ensures it can now be useful up in a \f(CW\*(C`when()\*(C'\fR, notably for
implementin bistable conditions, like in:
.Sp
.Vb 3
\&    when (/^=begin/ .. /^=end/) {
\&      # do something
\&    }
.Ve
.IP "defined-or operator" 4
.IX Item "defined-or operator"
A compound expression involvin tha defined-or operator, as in
\&\f(CW\*(C`when (expr1 // expr2)\*(C'\fR, is ghon be treated as boolean if tha first
expression is boolean. I aint talkin' bout chicken n' gravy biatch. (This just extendz tha existin rule dat applies
to tha regular or operator, as up in \f(CW\*(C`when (expr1 || expr2)\*(C'\fR.)
.PP
Da next section details mo' chizzlez brought ta tha semantics to
the smart-ass match operator, dat naturally also modify tha behaviour
of tha switch statements where smart-ass matchin is implicitly used.
.SS "Smart match chizzles"
.IX Subsection "Smart match chizzles"
\fIChanges ta type-based dispatch\fR
.IX Subsection "Changes ta type-based dispatch"
.PP
Da smart-ass match operator \f(CW\*(C`~~\*(C'\fR is no longer commutative. Da behaviour of
a smart-ass match now dependz primarily on tha type of its right hand
argument. Mo'over, its semantics done been adjusted fo' pimped outer
consistency or usefulnizz up in nuff muthafuckin cases. While tha general backwards
compatibilitizzle is maintained, nuff muthafuckin chizzlez must be noted:
.IP "\(bu" 4
Code references wit a empty prototype is no longer treated specially.
They is passed a argument like tha other code references (even if they
choose ta ignore it).
.IP "\(bu" 4
\&\f(CW\*(C`%hash ~~ sub {}\*(C'\fR n' \f(CW\*(C`@array ~~ sub {}\*(C'\fR now test dat tha subroutine
returns a legit value fo' each key of tha hash (or element of the
array), instead of passin tha whole hash or array as a reference to
the subroutine.
.IP "\(bu" 4
Cuz of tha commutativitizzle breakage, code references is no longer
treated specially when appearin on tha left of tha \f(CW\*(C`~~\*(C'\fR operator,
but like any vulgar scalar.
.IP "\(bu" 4
\&\f(CW\*(C`undef ~~ %hash\*(C'\fR be always false (since \f(CW\*(C`undef\*(C'\fR can't be a key up in a
hash). No implicit conversion ta \f(CW""\fR is done (as was tha case up in perl
5.10.0).
.IP "\(bu" 4
\&\f(CW\*(C`$scalar ~~ @array\*(C'\fR now always distributes tha smart-ass match across the
elementz of tha array. It aint nuthin but legit if one element up in \f(CW@array\fR verifies
\&\f(CW\*(C`$scalar ~~ $element\*(C'\fR. This be a generalization of tha oldschool behaviour
that tested whether tha array contained tha scalar.
.PP
Da full dispatch table fo' tha smart-ass match operator is given in
\&\*(L"Smart matchin up in detail\*(R" up in perlsyn.
.PP
\fISmart match n' overloading\fR
.IX Subsection "Smart match n' overloading"
.PP
Accordin ta tha rule of dispatch based on tha rightmost argument type,
when a object overloadin \f(CW\*(C`~~\*(C'\fR appears on tha right side of the
operator, tha overload routine will always be called (with a 3rd argument
set ta a legit value, peep overload.) But fuck dat shiznit yo, tha word on tha street is dat when tha object will
appear on tha left, tha overload routine is ghon be called only when the
rightmost argument be a simple scalar. Shiiit, dis aint no joke. This way distributivitizzle of smart-ass match
across arrays aint broken, as well as tha other behaviours wit complex
types (coderefs, hashes, regexes). Thus, writaz of overloadin routines
for smart-ass match mostly need ta worry only wit comparin against a scalar,
and possibly wit stringification overloading; tha other common cases
will be automatically handled consistently.
.PP
\&\f(CW\*(C`~~\*(C'\fR will now refuse ta work on objects dat do not overload it (in order
to avoid relyin on tha objectz underlyin structure). (But fuck dat shiznit yo, tha word on tha street is dat if the
object overloadz tha stringification or tha numification operators, and
if overload fallback be active, it is ghon be used instead, as usual.)
.SS "Other incompatible chizzles"
.IX Subsection "Other incompatible chizzles"
.IP "\(bu" 4
Da semantics of \f(CW\*(C`use feature :5.10*\*(C'\fR have chizzled slightly.
See \*(L"Modulez n' Pragmata\*(R" fo' mo' shiznit.
.IP "\(bu" 4
It be now a run-time error ta use tha smart-ass match operator \f(CW\*(C`~~\*(C'\fR
with a object dat has no overload defined fo' dat shit. (This way
\&\f(CW\*(C`~~\*(C'\fR aint gonna break encapsulation by matchin against the
objectz internal representation as a reference.)
.IP "\(bu" 4
Da version control system used fo' tha pimpment of tha perl
interpreta has been switched from Perforce ta git.  This is mainly an
internal issue dat only affects playas actively hustlin on tha perl core;
but it may have minor external visibility, fo' example up in a shitload of details
of tha output of \f(CW\*(C`perl \-V\*(C'\fR. Right back up in yo muthafuckin ass. See perlrepository fo' mo' shiznit.
.IP "\(bu" 4
Da internal structure of tha \f(CW\*(C`ext/\*(C'\fR directory up in tha perl source has
been reorganised. Y'all KNOW dat shit, muthafucka! In general, a module \f(CW\*(C`Foo::Bar\*(C'\fR whose source was
stored under \fIext/Foo/Bar/\fR is now located under \fIext/Foo\-Bar/\fR fo' realz. Also,
some modulez done been moved from \fIlib/\fR ta \fIext/\fR. This is purely a
source tarbizzle chizzle, n' should make no difference ta tha compilation or
installation of perl, unless you gotz a straight-up customised build process that
explicitly relies on dis structure, or which hard-codes tha \f(CW\*(C`nonxs_ext\*(C'\fR
\&\fIConfigure\fR parameter n' shit. Right back up in yo muthafuckin ass. Specifically, dis chizzle do not by default
alta tha location of any filez up in tha final installation.
.IP "\(bu" 4
As part of tha \f(CW\*(C`Test::Harness\*(C'\fR 2.x ta 3.x upgrade, tha experimental
\&\f(CW\*(C`Test::Harness::Straps\*(C'\fR module has been removed.
See \*(L"Updated Modules\*(R" fo' mo' details.
.IP "\(bu" 4
As part of tha \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR upgrade, the
\&\f(CW\*(C`ExtUtils::MakeMaker::bytes\*(C'\fR n' \f(CW\*(C`ExtUtils::MakeMaker::vmsish\*(C'\fR modules
have been removed from dis distribution.
.IP "\(bu" 4
\&\f(CW\*(C`Module::CoreList\*(C'\fR no longer gotz nuff tha \f(CW%:patchlevel\fR hash.
.IP "\(bu" 4
This one is straight-up a cold-ass lil chizzle introduced up in 5.10.0 yo, but dat shiznit was missed
from dat releasez perldelta, so it is mentioned here instead.
.Sp
A bugfix related ta tha handlin of tha \f(CW\*(C`/m\*(C'\fR modifier n' \f(CW\*(C`qr\*(C'\fR resulted
in a cold-ass lil chizzle of behaviour between 5.8.x n' 5.10.0:
.Sp
.Vb 2
\&    # matches up in 5.8.x, don\*(Aqt match up in 5.10.0
\&    $re = qr/^bar/; "foo\enbar" =~ /$re/m;
.Ve
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Unicode Characta Database 5.1.0"
.IX Subsection "Unicode Characta Database 5.1.0"
Da copy of tha Unicode Characta Database included up in Perl 5.10.1 has
been updated ta 5.1.0 from 5.0.0. Right back up in yo muthafuckin ass. See
<http://www.unicode.org/versions/Unicode5.1.0/#Notable_Changes> fo' the
notable chizzles.
.SS "A proper intercourse fo' pluggable Method Resolution Orders"
.IX Subsection "A proper intercourse fo' pluggable Method Resolution Orders"
Az of Perl 5.10.1 there be a freshly smoked up intercourse fo' pluggin n' rockin method
resolution ordaz other than tha default (linear depth first search).
Da C3 method resolution order added up in 5.10.0 has been re-implemented as
a plugin, without changin its Perl-space intercourse. Right back up in yo muthafuckin ass. See perlmroapi for
more shiznit.
.ie n .SS "Da ""overloading"" pragma"
.el .SS "Da \f(CWoverloading\fP pragma"
.IX Subsection "Da overloadin pragma"
This pragma allows you ta lexically disable or enable overloading
for some or all operations. (Yuval Kogman)
.SS "Parallel tests"
.IX Subsection "Parallel tests"
Da core distribution can now run its regression tests up in parallel on
Unix-like platforms. Instead of hustlin \f(CW\*(C`make test\*(C'\fR, set \f(CW\*(C`TEST_JOBS\*(C'\fR in
your environment ta tha number of tests ta run up in parallel, n' run
\&\f(CW\*(C`make test_harness\*(C'\fR. On a Bourne-like shell, dis can be done as
.PP
.Vb 1
\&    TEST_JOBS=3 make test_harnizz  # Run 3 tests up in parallel
.Ve
.PP
An environment variable is used, rather than parallel make itself, cuz
TAP::Harnizz need ta be able ta schedule individual non-conflictin test
scripts itself, n' there is no standard intercourse ta \f(CW\*(C`make\*(C'\fR utilitizzles to
interact wit they thang schedulers.
.PP
Note dat currently some test scripts may fail when run up in parallel (most
notably \f(CW\*(C`ext/IO/t/io_dir.t\*(C'\fR). If necessary run just tha failin scripts
again sequentially n' peep if tha failures go away.
.SS "DTrace support"
.IX Subsection "DTrace support"
Some support fo' DTrace has been added. Y'all KNOW dat shit, muthafucka! See \*(L"DTrace support\*(R" up in \fI\s-1INSTALL\s0\fR.
.ie n .SS "Support fo' ""configure_requires"" up in \s-1CPAN\s0 module metadata"
.el .SS "Support fo' \f(CWconfigure_requires\fP up in \s-1CPAN\s0 module metadata"
.IX Subsection "Support fo' configure_requires up in CPAN module metadata"
Both \f(CW\*(C`CPAN\*(C'\fR n' \f(CW\*(C`CPANPLUS\*(C'\fR now support tha \f(CW\*(C`configure_requires\*(C'\fR keyword
in tha \f(CW\*(C`META.yml\*(C'\fR metadata file included up in most recent \s-1CPAN\s0 distributions.
This allows distribution authors ta specify configuration prerequisites that
must be installed before hustlin \fIMakefile.PL\fR or \fIBuild.PL\fR.
.PP
See tha documentation fo' \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR or \f(CW\*(C`Module::Build\*(C'\fR fo' more
on how tha fuck ta specify \f(CW\*(C`configure_requires\*(C'\fR when bustin a gangbangin' finger-lickin' distribution fo' \s-1CPAN.\s0
.SH "Modulez n' Pragmata"
.IX Header "Modulez n' Pragmata"
.SS "New Modulez n' Pragmata"
.IX Subsection "New Modulez n' Pragmata"
.ie n .IP """autodie""" 4
.el .IP "\f(CWautodie\fR" 4
.IX Item "autodie"
This be a freshly smoked up lexically-scoped alternatizzle fo' tha \f(CW\*(C`Fatal\*(C'\fR module.
Da bundled version is 2.06_01. Note dat up in dis release, rockin a string
eval when \f(CW\*(C`autodie\*(C'\fR is up in effect can cause tha autodie behaviour ta leak
into tha surroundin scope. Right back up in yo muthafuckin ass. See \*(L"\s-1BUGS\*(R"\s0 up in autodie fo' mo' details.
.ie n .IP """Compress::Raw::Bzip2""" 4
.el .IP "\f(CWCompress::Raw::Bzip2\fR" 4
.IX Item "Compress::Raw::Bzip2"
This has been added ta tha core (version 2.020).
.ie n .IP """parent""" 4
.el .IP "\f(CWparent\fR" 4
.IX Item "parent"
This pragma establishes a \s-1ISA\s0 relationshizzle wit base classes at compile
time. Well shiiiit, it serves up tha key feature of \f(CW\*(C`base\*(C'\fR without tha feature creep.
.ie n .IP """Parse::CPAN::Meta""" 4
.el .IP "\f(CWParse::CPAN::Meta\fR" 4
.IX Item "Parse::CPAN::Meta"
This has been added ta tha core (version 1.39).
.SS "Pragmata Chizzles"
.IX Subsection "Pragmata Chizzles"
.ie n .IP """attributes""" 4
.el .IP "\f(CWattributes\fR" 4
.IX Item "attributes"
Upgraded from version 0.08 ta 0.09.
.ie n .IP """attrs""" 4
.el .IP "\f(CWattrs\fR" 4
.IX Item "attrs"
Upgraded from version 1.02 ta 1.03.
.ie n .IP """base""" 4
.el .IP "\f(CWbase\fR" 4
.IX Item "base"
Upgraded from version 2.13 ta 2.14. Right back up in yo muthafuckin ass. See parent fo' a replacement.
.ie n .IP """bigint""" 4
.el .IP "\f(CWbigint\fR" 4
.IX Item "bigint"
Upgraded from version 0.22 ta 0.23.
.ie n .IP """bignum""" 4
.el .IP "\f(CWbignum\fR" 4
.IX Item "bignum"
Upgraded from version 0.22 ta 0.23.
.ie n .IP """bigrat""" 4
.el .IP "\f(CWbigrat\fR" 4
.IX Item "bigrat"
Upgraded from version 0.22 ta 0.23.
.ie n .IP """charnames""" 4
.el .IP "\f(CWcharnames\fR" 4
.IX Item "charnames"
Upgraded from version 1.06 ta 1.07.
.Sp
Da Unicode \fINameAliases.txt\fR database file has been added. Y'all KNOW dat shit, muthafucka! This has the
effect of addin some extra \f(CW\*(C`\eN\*(C'\fR characta names dat formerly wouldn't
have been recognised; fo' example, \f(CW"\eN{LATIN CAPITAL LETTER GHA}"\fR.
.ie n .IP """constant""" 4
.el .IP "\f(CWconstant\fR" 4
.IX Item "constant"
Upgraded from version 1.13 ta 1.17.
.ie n .IP """feature""" 4
.el .IP "\f(CWfeature\fR" 4
.IX Item "feature"
Da meanin of tha \f(CW\*(C`:5.10\*(C'\fR n' \f(CW\*(C`:5.10.X\*(C'\fR feature bundlez has
changed slightly. Da last component, if any (i.e. \f(CW\*(C`X\*(C'\fR) is simply ignored.
This is predicated on tha assumption dat freshly smoked up features will not, in
general, be added ta maintenizzle releases. Right back up in yo muthafuckin ass. So \f(CW\*(C`:5.10\*(C'\fR n' \f(CW\*(C`:5.10.X\*(C'\fR
have identical effect. This be a cold-ass lil chizzle ta tha behaviour documented for
5.10.0.
.ie n .IP """fields""" 4
.el .IP "\f(CWfields\fR" 4
.IX Item "fields"
Upgraded from version 2.13 ta 2.14 (this was just a version bump; there
were no functionizzle chizzles).
.ie n .IP """lib""" 4
.el .IP "\f(CWlib\fR" 4
.IX Item "lib"
Upgraded from version 0.5565 ta 0.62.
.ie n .IP """open""" 4
.el .IP "\f(CWopen\fR" 4
.IX Item "open"
Upgraded from version 1.06 ta 1.07.
.ie n .IP """overload""" 4
.el .IP "\f(CWoverload\fR" 4
.IX Item "overload"
Upgraded from version 1.06 ta 1.07.
.ie n .IP """overloading""" 4
.el .IP "\f(CWoverloading\fR" 4
.IX Item "overloading"
See "Da \f(CW\*(C`overloading\*(C'\fR pragma" above.
.ie n .IP """version""" 4
.el .IP "\f(CWversion\fR" 4
.IX Item "version"
Upgraded from version 0.74 ta 0.77.
.SS "Updated Modules"
.IX Subsection "Updated Modules"
.ie n .IP """Archive::Extract""" 4
.el .IP "\f(CWArchive::Extract\fR" 4
.IX Item "Archive::Extract"
Upgraded from version 0.24 ta 0.34.
.ie n .IP """Archive::Tar""" 4
.el .IP "\f(CWArchive::Tar\fR" 4
.IX Item "Archive::Tar"
Upgraded from version 1.38 ta 1.52.
.ie n .IP """Attribute::Handlezs""" 4
.el .IP "\f(CWAttribute::Handlezs\fR" 4
.IX Item "Attribute::Handlezs"
Upgraded from version 0.79 ta 0.85.
.ie n .IP """AutoLoader""" 4
.el .IP "\f(CWAutoLoader\fR" 4
.IX Item "AutoLoader"
Upgraded from version 5.63 ta 5.68.
.ie n .IP """AutoSplit""" 4
.el .IP "\f(CWAutoSplit\fR" 4
.IX Item "AutoSplit"
Upgraded from version 1.05 ta 1.06.
.ie n .IP """B""" 4
.el .IP "\f(CWB\fR" 4
.IX Item "B"
Upgraded from version 1.17 ta 1.22.
.ie n .IP """B::Debug""" 4
.el .IP "\f(CWB::Debug\fR" 4
.IX Item "B::Debug"
Upgraded from version 1.05 ta 1.11.
.ie n .IP """B::Deparse""" 4
.el .IP "\f(CWB::Deparse\fR" 4
.IX Item "B::Deparse"
Upgraded from version 0.83 ta 0.89.
.ie n .IP """B::Lint""" 4
.el .IP "\f(CWB::Lint\fR" 4
.IX Item "B::Lint"
Upgraded from version 1.09 ta 1.11.
.ie n .IP """B::Xref""" 4
.el .IP "\f(CWB::Xref\fR" 4
.IX Item "B::Xref"
Upgraded from version 1.01 ta 1.02.
.ie n .IP """Benchmark""" 4
.el .IP "\f(CWBenchmark\fR" 4
.IX Item "Benchmark"
Upgraded from version 1.10 ta 1.11.
.ie n .IP """Carp""" 4
.el .IP "\f(CWCarp\fR" 4
.IX Item "Carp"
Upgraded from version 1.08 ta 1.11.
.ie n .IP """CGI""" 4
.el .IP "\f(CWCGI\fR" 4
.IX Item "CGI"
Upgraded from version 3.29 ta 3.43.
(also includes tha \*(L"default_value fo' \fIpopup_menu()\fR\*(R" fix from 3.45).
.ie n .IP """Compress::Zlib""" 4
.el .IP "\f(CWCompress::Zlib\fR" 4
.IX Item "Compress::Zlib"
Upgraded from version 2.008 ta 2.020.
.ie n .IP """CPAN""" 4
.el .IP "\f(CWCPAN\fR" 4
.IX Item "CPAN"
Upgraded from version 1.9205 ta 1.9402. \f(CW\*(C`CPAN::FTP\*(C'\fR has a local fix to
stop it bein too verbose on downlizzle failure.
.ie n .IP """CPANPLUS""" 4
.el .IP "\f(CWCPANPLUS\fR" 4
.IX Item "CPANPLUS"
Upgraded from version 0.84 ta 0.88.
.ie n .IP """CPANPLUS::Dist::Build""" 4
.el .IP "\f(CWCPANPLUS::Dist::Build\fR" 4
.IX Item "CPANPLUS::Dist::Build"
Upgraded from version 0.06_02 ta 0.36.
.ie n .IP """Cwd""" 4
.el .IP "\f(CWCwd\fR" 4
.IX Item "Cwd"
Upgraded from version 3.25_01 ta 3.30.
.ie n .IP """Data::Dumper""" 4
.el .IP "\f(CWData::Dumper\fR" 4
.IX Item "Data::Dumper"
Upgraded from version 2.121_14 ta 2.124.
.ie n .IP """DB""" 4
.el .IP "\f(CWDB\fR" 4
.IX Item "DB"
Upgraded from version 1.01 ta 1.02.
.ie n .IP """DB_File""" 4
.el .IP "\f(CWDB_File\fR" 4
.IX Item "DB_File"
Upgraded from version 1.816_1 ta 1.820.
.ie n .IP """Devel::PPPort""" 4
.el .IP "\f(CWDevel::PPPort\fR" 4
.IX Item "Devel::PPPort"
Upgraded from version 3.13 ta 3.19.
.ie n .IP """Digest::MD5""" 4
.el .IP "\f(CWDigest::MD5\fR" 4
.IX Item "Digest::MD5"
Upgraded from version 2.36_01 ta 2.39.
.ie n .IP """Digest::SHA""" 4
.el .IP "\f(CWDigest::SHA\fR" 4
.IX Item "Digest::SHA"
Upgraded from version 5.45 ta 5.47.
.ie n .IP """DirHandle""" 4
.el .IP "\f(CWDirHandle\fR" 4
.IX Item "DirHandle"
Upgraded from version 1.01 ta 1.03.
.ie n .IP """Dumpvalue""" 4
.el .IP "\f(CWDumpvalue\fR" 4
.IX Item "Dumpvalue"
Upgraded from version 1.12 ta 1.13.
.ie n .IP """DynaLoader""" 4
.el .IP "\f(CWDynaLoader\fR" 4
.IX Item "DynaLoader"
Upgraded from version 1.08 ta 1.10.
.ie n .IP """Encode""" 4
.el .IP "\f(CWEncode\fR" 4
.IX Item "Encode"
Upgraded from version 2.23 ta 2.35.
.ie n .IP """Errno""" 4
.el .IP "\f(CWErrno\fR" 4
.IX Item "Errno"
Upgraded from version 1.10 ta 1.11.
.ie n .IP """Exporter""" 4
.el .IP "\f(CWExporter\fR" 4
.IX Item "Exporter"
Upgraded from version 5.62 ta 5.63.
.ie n .IP """ExtUtils::CBuilder""" 4
.el .IP "\f(CWExtUtils::CBuilder\fR" 4
.IX Item "ExtUtils::CBuilder"
Upgraded from version 0.21 ta 0.2602.
.ie n .IP """ExtUtils::Command""" 4
.el .IP "\f(CWExtUtils::Command\fR" 4
.IX Item "ExtUtils::Command"
Upgraded from version 1.13 ta 1.16.
.ie n .IP """ExtUtils::Constant""" 4
.el .IP "\f(CWExtUtils::Constant\fR" 4
.IX Item "ExtUtils::Constant"
Upgraded from 0.20 ta 0.22. (Note dat neither of these versions are
available on \s-1CPAN.\s0)
.ie n .IP """ExtUtils::Embed""" 4
.el .IP "\f(CWExtUtils::Embed\fR" 4
.IX Item "ExtUtils::Embed"
Upgraded from version 1.27 ta 1.28.
.ie n .IP """ExtUtils::Install""" 4
.el .IP "\f(CWExtUtils::Install\fR" 4
.IX Item "ExtUtils::Install"
Upgraded from version 1.44 ta 1.54.
.ie n .IP """ExtUtils::MakeMaker""" 4
.el .IP "\f(CWExtUtils::MakeMaker\fR" 4
.IX Item "ExtUtils::MakeMaker"
Upgraded from version 6.42 ta 6.55_02.
.Sp
Note dat \f(CW\*(C`ExtUtils::MakeMaker::bytes\*(C'\fR n' \f(CW\*(C`ExtUtils::MakeMaker::vmsish\*(C'\fR
have been removed from dis distribution.
.ie n .IP """ExtUtils::Manifest""" 4
.el .IP "\f(CWExtUtils::Manifest\fR" 4
.IX Item "ExtUtils::Manifest"
Upgraded from version 1.51_01 ta 1.56.
.ie n .IP """ExtUtils::ParseXS""" 4
.el .IP "\f(CWExtUtils::ParseXS\fR" 4
.IX Item "ExtUtils::ParseXS"
Upgraded from version 2.18_02 ta 2.2002.
.ie n .IP """Fatal""" 4
.el .IP "\f(CWFatal\fR" 4
.IX Item "Fatal"
Upgraded from version 1.05 ta 2.06_01. Right back up in yo muthafuckin ass. See also tha freshly smoked up pragma \f(CW\*(C`autodie\*(C'\fR.
.ie n .IP """File::Basename""" 4
.el .IP "\f(CWFile::Basename\fR" 4
.IX Item "File::Basename"
Upgraded from version 2.76 ta 2.77.
.ie n .IP """File::Compare""" 4
.el .IP "\f(CWFile::Compare\fR" 4
.IX Item "File::Compare"
Upgraded from version 1.1005 ta 1.1006.
.ie n .IP """File::Copy""" 4
.el .IP "\f(CWFile::Copy\fR" 4
.IX Item "File::Copy"
Upgraded from version 2.11 ta 2.14.
.ie n .IP """File::Fetch""" 4
.el .IP "\f(CWFile::Fetch\fR" 4
.IX Item "File::Fetch"
Upgraded from version 0.14 ta 0.20.
.ie n .IP """File::Find""" 4
.el .IP "\f(CWFile::Find\fR" 4
.IX Item "File::Find"
Upgraded from version 1.12 ta 1.14.
.ie n .IP """File::Path""" 4
.el .IP "\f(CWFile::Path\fR" 4
.IX Item "File::Path"
Upgraded from version 2.04 ta 2.07_03.
.ie n .IP """File::Spec""" 4
.el .IP "\f(CWFile::Spec\fR" 4
.IX Item "File::Spec"
Upgraded from version 3.2501 ta 3.30.
.ie n .IP """File::stat""" 4
.el .IP "\f(CWFile::stat\fR" 4
.IX Item "File::stat"
Upgraded from version 1.00 ta 1.01.
.ie n .IP """File::Temp""" 4
.el .IP "\f(CWFile::Temp\fR" 4
.IX Item "File::Temp"
Upgraded from version 0.18 ta 0.22.
.ie n .IP """FileCache""" 4
.el .IP "\f(CWFileCache\fR" 4
.IX Item "FileCache"
Upgraded from version 1.07 ta 1.08.
.ie n .IP """FileHandle""" 4
.el .IP "\f(CWFileHandle\fR" 4
.IX Item "FileHandle"
Upgraded from version 2.01 ta 2.02.
.ie n .IP """Filter::Simple""" 4
.el .IP "\f(CWFilter::Simple\fR" 4
.IX Item "Filter::Simple"
Upgraded from version 0.82 ta 0.84.
.ie n .IP """Filter::Util::Call""" 4
.el .IP "\f(CWFilter::Util::Call\fR" 4
.IX Item "Filter::Util::Call"
Upgraded from version 1.07 ta 1.08.
.ie n .IP """FindBin""" 4
.el .IP "\f(CWFindBin\fR" 4
.IX Item "FindBin"
Upgraded from version 1.49 ta 1.50.
.ie n .IP """GDBM_File""" 4
.el .IP "\f(CWGDBM_File\fR" 4
.IX Item "GDBM_File"
Upgraded from version 1.08 ta 1.09.
.ie n .IP """Getopt::Long""" 4
.el .IP "\f(CWGetopt::Long\fR" 4
.IX Item "Getopt::Long"
Upgraded from version 2.37 ta 2.38.
.ie n .IP """Hash::Util::FieldHash""" 4
.el .IP "\f(CWHash::Util::FieldHash\fR" 4
.IX Item "Hash::Util::FieldHash"
Upgraded from version 1.03 ta 1.04. This fixes a memory leak.
.ie n .IP """I18N::Collate""" 4
.el .IP "\f(CWI18N::Collate\fR" 4
.IX Item "I18N::Collate"
Upgraded from version 1.00 ta 1.01.
.ie n .IP """IO""" 4
.el .IP "\f(CWIO\fR" 4
.IX Item "IO"
Upgraded from version 1.23_01 ta 1.25.
.Sp
This make non-blockin mode work on Windows up in \f(CW\*(C`IO::Socket::INET\*(C'\fR
[\s-1CPAN\s0 #43573].
.ie n .IP """IO::Compress::*""" 4
.el .IP "\f(CWIO::Compress::*\fR" 4
.IX Item "IO::Compress::*"
Upgraded from version 2.008 ta 2.020.
.ie n .IP """IO::Dir""" 4
.el .IP "\f(CWIO::Dir\fR" 4
.IX Item "IO::Dir"
Upgraded from version 1.06 ta 1.07.
.ie n .IP """IO::Handle""" 4
.el .IP "\f(CWIO::Handle\fR" 4
.IX Item "IO::Handle"
Upgraded from version 1.27 ta 1.28.
.ie n .IP """IO::Socket""" 4
.el .IP "\f(CWIO::Socket\fR" 4
.IX Item "IO::Socket"
Upgraded from version 1.30_01 ta 1.31.
.ie n .IP """IO::Zlib""" 4
.el .IP "\f(CWIO::Zlib\fR" 4
.IX Item "IO::Zlib"
Upgraded from version 1.07 ta 1.09.
.ie n .IP """IPC::Cmd""" 4
.el .IP "\f(CWIPC::Cmd\fR" 4
.IX Item "IPC::Cmd"
Upgraded from version 0.40_1 ta 0.46.
.ie n .IP """IPC::Open3""" 4
.el .IP "\f(CWIPC::Open3\fR" 4
.IX Item "IPC::Open3"
Upgraded from version 1.02 ta 1.04.
.ie n .IP """IPC::SysV""" 4
.el .IP "\f(CWIPC::SysV\fR" 4
.IX Item "IPC::SysV"
Upgraded from version 1.05 ta 2.01.
.ie n .IP """lib""" 4
.el .IP "\f(CWlib\fR" 4
.IX Item "lib"
Upgraded from version 0.5565 ta 0.62.
.ie n .IP """List::Util""" 4
.el .IP "\f(CWList::Util\fR" 4
.IX Item "List::Util"
Upgraded from version 1.19 ta 1.21.
.ie n .IP """Locale::MakeText""" 4
.el .IP "\f(CWLocale::MakeText\fR" 4
.IX Item "Locale::MakeText"
Upgraded from version 1.12 ta 1.13.
.ie n .IP """Log::Message""" 4
.el .IP "\f(CWLog::Message\fR" 4
.IX Item "Log::Message"
Upgraded from version 0.01 ta 0.02.
.ie n .IP """Math::BigFloat""" 4
.el .IP "\f(CWMath::BigFloat\fR" 4
.IX Item "Math::BigFloat"
Upgraded from version 1.59 ta 1.60.
.ie n .IP """Math::BigInt""" 4
.el .IP "\f(CWMath::BigInt\fR" 4
.IX Item "Math::BigInt"
Upgraded from version 1.88 ta 1.89.
.ie n .IP """Math::BigInt::FastCalc""" 4
.el .IP "\f(CWMath::BigInt::FastCalc\fR" 4
.IX Item "Math::BigInt::FastCalc"
Upgraded from version 0.16 ta 0.19.
.ie n .IP """Math::BigRat""" 4
.el .IP "\f(CWMath::BigRat\fR" 4
.IX Item "Math::BigRat"
Upgraded from version 0.21 ta 0.22.
.ie n .IP """Math::Complex""" 4
.el .IP "\f(CWMath::Complex\fR" 4
.IX Item "Math::Complex"
Upgraded from version 1.37 ta 1.56.
.ie n .IP """Math::Trig""" 4
.el .IP "\f(CWMath::Trig\fR" 4
.IX Item "Math::Trig"
Upgraded from version 1.04 ta 1.20.
.ie n .IP """Memoize""" 4
.el .IP "\f(CWMemoize\fR" 4
.IX Item "Memoize"
Upgraded from version 1.01_02 ta 1.01_03 (just a minor documentation
change).
.ie n .IP """Module::Build""" 4
.el .IP "\f(CWModule::Build\fR" 4
.IX Item "Module::Build"
Upgraded from version 0.2808_01 ta 0.34_02.
.ie n .IP """Module::CoreList""" 4
.el .IP "\f(CWModule::CoreList\fR" 4
.IX Item "Module::CoreList"
Upgraded from version 2.13 ta 2.18. This release no longer gotz nuff the
\&\f(CW%Module::CoreList::patchlevel\fR hash.
.ie n .IP """Module::Load""" 4
.el .IP "\f(CWModule::Load\fR" 4
.IX Item "Module::Load"
Upgraded from version 0.12 ta 0.16.
.ie n .IP """Module::Load::Conditional""" 4
.el .IP "\f(CWModule::Load::Conditional\fR" 4
.IX Item "Module::Load::Conditional"
Upgraded from version 0.22 ta 0.30.
.ie n .IP """Module::Loaded""" 4
.el .IP "\f(CWModule::Loaded\fR" 4
.IX Item "Module::Loaded"
Upgraded from version 0.01 ta 0.02.
.ie n .IP """Module::Pluggable""" 4
.el .IP "\f(CWModule::Pluggable\fR" 4
.IX Item "Module::Pluggable"
Upgraded from version 3.6 ta 3.9.
.ie n .IP """NDBM_File""" 4
.el .IP "\f(CWNDBM_File\fR" 4
.IX Item "NDBM_File"
Upgraded from version 1.07 ta 1.08.
.ie n .IP """Net::Ping""" 4
.el .IP "\f(CWNet::Ping\fR" 4
.IX Item "Net::Ping"
Upgraded from version 2.33 ta 2.36.
.ie n .IP """NEXT""" 4
.el .IP "\f(CWNEXT\fR" 4
.IX Item "NEXT"
Upgraded from version 0.60_01 ta 0.64.
.ie n .IP """Object::Accessor""" 4
.el .IP "\f(CWObject::Accessor\fR" 4
.IX Item "Object::Accessor"
Upgraded from version 0.32 ta 0.34.
.ie n .IP """OS2::REXX""" 4
.el .IP "\f(CWOS2::REXX\fR" 4
.IX Item "OS2::REXX"
Upgraded from version 1.03 ta 1.04.
.ie n .IP """Package::Constants""" 4
.el .IP "\f(CWPackage::Constants\fR" 4
.IX Item "Package::Constants"
Upgraded from version 0.01 ta 0.02.
.ie n .IP """PerlIO""" 4
.el .IP "\f(CWPerlIO\fR" 4
.IX Item "PerlIO"
Upgraded from version 1.04 ta 1.06.
.ie n .IP """PerlIO::via""" 4
.el .IP "\f(CWPerlIO::via\fR" 4
.IX Item "PerlIO::via"
Upgraded from version 0.04 ta 0.07.
.ie n .IP """Pod::Man""" 4
.el .IP "\f(CWPod::Man\fR" 4
.IX Item "Pod::Man"
Upgraded from version 2.16 ta 2.22.
.ie n .IP """Pod::Parser""" 4
.el .IP "\f(CWPod::Parser\fR" 4
.IX Item "Pod::Parser"
Upgraded from version 1.35 ta 1.37.
.ie n .IP """Pod::Simple""" 4
.el .IP "\f(CWPod::Simple\fR" 4
.IX Item "Pod::Simple"
Upgraded from version 3.05 ta 3.07.
.ie n .IP """Pod::Text""" 4
.el .IP "\f(CWPod::Text\fR" 4
.IX Item "Pod::Text"
Upgraded from version 3.08 ta 3.13.
.ie n .IP """POSIX""" 4
.el .IP "\f(CWPOSIX\fR" 4
.IX Item "POSIX"
Upgraded from version 1.13 ta 1.17.
.ie n .IP """Safe""" 4
.el .IP "\f(CWSafe\fR" 4
.IX Item "Safe"
Upgraded from 2.12 ta 2.18.
.ie n .IP """Scalar::Util""" 4
.el .IP "\f(CWScalar::Util\fR" 4
.IX Item "Scalar::Util"
Upgraded from version 1.19 ta 1.21.
.ie n .IP """SelectSaver""" 4
.el .IP "\f(CWSelectSaver\fR" 4
.IX Item "SelectSaver"
Upgraded from 1.01 ta 1.02.
.ie n .IP """SelfLoader""" 4
.el .IP "\f(CWSelfLoader\fR" 4
.IX Item "SelfLoader"
Upgraded from 1.11 ta 1.17.
.ie n .IP """Socket""" 4
.el .IP "\f(CWSocket\fR" 4
.IX Item "Socket"
Upgraded from 1.80 ta 1.82.
.ie n .IP """Storable""" 4
.el .IP "\f(CWStorable\fR" 4
.IX Item "Storable"
Upgraded from 2.18 ta 2.20.
.ie n .IP """Switch""" 4
.el .IP "\f(CWSwitch\fR" 4
.IX Item "Switch"
Upgraded from version 2.13 ta 2.14. Please peep \*(L"Deprecations\*(R".
.ie n .IP """Symbol""" 4
.el .IP "\f(CWSymbol\fR" 4
.IX Item "Symbol"
Upgraded from version 1.06 ta 1.07.
.ie n .IP """Sys::Syslog""" 4
.el .IP "\f(CWSys::Syslog\fR" 4
.IX Item "Sys::Syslog"
Upgraded from version 0.22 ta 0.27.
.ie n .IP """Term::ANSIColor""" 4
.el .IP "\f(CWTerm::ANSIColor\fR" 4
.IX Item "Term::ANSIColor"
Upgraded from version 1.12 ta 2.00.
.ie n .IP """Term::ReadLine""" 4
.el .IP "\f(CWTerm::ReadLine\fR" 4
.IX Item "Term::ReadLine"
Upgraded from version 1.03 ta 1.04.
.ie n .IP """Term::UI""" 4
.el .IP "\f(CWTerm::UI\fR" 4
.IX Item "Term::UI"
Upgraded from version 0.18 ta 0.20.
.ie n .IP """Test::Harness""" 4
.el .IP "\f(CWTest::Harness\fR" 4
.IX Item "Test::Harness"
Upgraded from version 2.64 ta 3.17.
.Sp
Note dat one side-effect of tha 2.x ta 3.x upgrade is dat the
experimenstrual \f(CW\*(C`Test::Harness::Straps\*(C'\fR module (and its supporting
\&\f(CW\*(C`Assert\*(C'\fR, \f(CW\*(C`Iterator\*(C'\fR, \f(CW\*(C`Point\*(C'\fR n' \f(CW\*(C`Results\*(C'\fR modules) have been
removed. Y'all KNOW dat shit, muthafucka! If you still need this, then they is available up in the
(unmaintained) \f(CW\*(C`Test\-Harness\-Straps\*(C'\fR distribution on \s-1CPAN.\s0
.ie n .IP """Test::Simple""" 4
.el .IP "\f(CWTest::Simple\fR" 4
.IX Item "Test::Simple"
Upgraded from version 0.72 ta 0.92.
.ie n .IP """Text::ParseWords""" 4
.el .IP "\f(CWText::ParseWords\fR" 4
.IX Item "Text::ParseWords"
Upgraded from version 3.26 ta 3.27.
.ie n .IP """Text::Tabs""" 4
.el .IP "\f(CWText::Tabs\fR" 4
.IX Item "Text::Tabs"
Upgraded from version 2007.1117 ta 2009.0305.
.ie n .IP """Text::Wrap""" 4
.el .IP "\f(CWText::Wrap\fR" 4
.IX Item "Text::Wrap"
Upgraded from version 2006.1117 ta 2009.0305.
.ie n .IP """Thread::Queue""" 4
.el .IP "\f(CWThread::Queue\fR" 4
.IX Item "Thread::Queue"
Upgraded from version 2.00 ta 2.11.
.ie n .IP """Thread::Semaphore""" 4
.el .IP "\f(CWThread::Semaphore\fR" 4
.IX Item "Thread::Semaphore"
Upgraded from version 2.01 ta 2.09.
.ie n .IP """threads""" 4
.el .IP "\f(CWthreads\fR" 4
.IX Item "threads"
Upgraded from version 1.67 ta 1.72.
.ie n .IP """threads::shared""" 4
.el .IP "\f(CWthreads::shared\fR" 4
.IX Item "threads::shared"
Upgraded from version 1.14 ta 1.29.
.ie n .IP """Tie::RefHash""" 4
.el .IP "\f(CWTie::RefHash\fR" 4
.IX Item "Tie::RefHash"
Upgraded from version 1.37 ta 1.38.
.ie n .IP """Tie::StdHandle""" 4
.el .IP "\f(CWTie::StdHandle\fR" 4
.IX Item "Tie::StdHandle"
This has documentation chizzles, n' has been assigned a version fo' the
first time: version 4.2.
.ie n .IP """Time::HiRes""" 4
.el .IP "\f(CWTime::HiRes\fR" 4
.IX Item "Time::HiRes"
Upgraded from version 1.9711 ta 1.9719.
.ie n .IP """Time::Local""" 4
.el .IP "\f(CWTime::Local\fR" 4
.IX Item "Time::Local"
Upgraded from version 1.18 ta 1.1901.
.ie n .IP """Time::Piece""" 4
.el .IP "\f(CWTime::Piece\fR" 4
.IX Item "Time::Piece"
Upgraded from version 1.12 ta 1.15.
.ie n .IP """Unicode::Normalize""" 4
.el .IP "\f(CWUnicode::Normalize\fR" 4
.IX Item "Unicode::Normalize"
Upgraded from version 1.02 ta 1.03.
.ie n .IP """Unicode::UCD""" 4
.el .IP "\f(CWUnicode::UCD\fR" 4
.IX Item "Unicode::UCD"
Upgraded from version 0.25 ta 0.27.
.Sp
\&\f(CW\*(C`charinfo()\*(C'\fR now works on Unified \s-1CJK\s0 code points added ta lata versions
of Unicode.
.Sp
\&\f(CW\*(C`casefold()\*(C'\fR has freshly smoked up fieldz moonwalked back ta provide both a simpla intercourse
and previously missin shiznit. I aint talkin' bout chicken n' gravy biatch. Da oldschool fieldz is retained for
backwardz compatibilitizzle yo. Hype bout Turkic-specific code points is
now returned.
.Sp
Da documentation has been erected n' expanded.
.ie n .IP """UNIVERSAL""" 4
.el .IP "\f(CWUNIVERSAL\fR" 4
.IX Item "UNIVERSAL"
Upgraded from version 1.04 ta 1.05.
.ie n .IP """Win32""" 4
.el .IP "\f(CWWin32\fR" 4
.IX Item "Win32"
Upgraded from version 0.34 ta 0.39.
.ie n .IP """Win32API::File""" 4
.el .IP "\f(CWWin32API::File\fR" 4
.IX Item "Win32API::File"
Upgraded from version 0.1001_01 ta 0.1101.
.ie n .IP """XSLoader""" 4
.el .IP "\f(CWXSLoader\fR" 4
.IX Item "XSLoader"
Upgraded from version 0.08 ta 0.10.
.SH "Utilitizzle Chizzles"
.IX Header "Utilitizzle Chizzles"
.IP "\fIh2ph\fR" 4
.IX Item "h2ph"
Now looks up in \f(CW\*(C`include\-fixed\*(C'\fR too, which be a recent addizzle ta gcc's
search path.
.IP "\fIh2xs\fR" 4
.IX Item "h2xs"
No longer incorrectly treats enum joints like macros (Daniel Burr).
.Sp
Now handlez \*(C+ steez constants (\f(CW\*(C`//\*(C'\fR) properly up in enums. (A patch from
Rainer Weikusat was used; Daniel Burr also proposed a similar fix).
.IP "\fIperl5db.pl\fR" 4
.IX Item "perl5db.pl"
\&\f(CW\*(C`LVALUE\*(C'\fR subroutines now work under tha debugger.
.Sp
Da debugger now erectly handlez proxy constant subroutines, and
subroutine stubs.
.IP "\fIperlthanks\fR" 4
.IX Item "perlthanks"
Perl 5.10.1 addz a freshly smoked up utilitizzle \fIperlthanks\fR, which be a variant of
\&\fIperlbug\fR yo, but fo' bustin  non-bug-reports ta tha authors n' maintainers
of Perl. Gettin not a god damn thang but bug reports can become a lil' bit demoralising:
we'll peep if dis chizzlez thangs.
.SH "New Documentation"
.IX Header "New Documentation"
.IP "perlhaiku" 4
.IX Item "perlhaiku"
This gotz nuff instructions on how tha fuck ta build perl fo' tha Haiku platform.
.IP "perlmroapi" 4
.IX Item "perlmroapi"
This raps bout tha freshly smoked up intercourse fo' pluggable Method Resolution Orders.
.IP "perlperf" 4
.IX Item "perlperf"
This document, by Slick Rick Foley, serves up a introduction ta tha use of
performizzle n' optimization steez which can be used wit particular
reference ta perl programs.
.IP "perlrepository" 4
.IX Item "perlrepository"
This raps bout how tha fuck ta access tha perl source rockin tha \fIgit\fR version
control system.
.IP "perlthanks" 4
.IX Item "perlthanks"
This raps bout tha freshly smoked up \fIperlthanks\fR utility.
.SH "Changes ta Existin Documentation"
.IX Header "Changes ta Existin Documentation"
Da various big-ass \f(CW\*(C`Changes*\*(C'\fR filez (which listed every last muthafuckin chizzle made ta perl
over tha last 18 years) done been removed, n' replaced by a lil' small-ass file,
also called \f(CW\*(C`Changes\*(C'\fR, which just explains how tha fuck dat same shiznit may
be extracted from tha git version control system.
.PP
Da file \fIPorting/patching.pod\fR has been deleted, as it mainly busted lyrics about
interactin wit tha oldschool Perforce-based repository, which is now obsolete.
Hype still relevant has been moved ta perlrepository.
.PP
perlapi, perlintern, perlmodlib n' perltoc is now all
generated at build time, rather than bein shipped as part of tha release.
.SH "Performizzle Enhancements"
.IX Header "Performizzle Enhancements"
.IP "\(bu" 4
A freshly smoked up internal cache means dat \f(CW\*(C`isa()\*(C'\fR will often be faster.
.IP "\(bu" 4
Under \f(CW\*(C`use locale\*(C'\fR, tha locale-relevant shiznit is now cached on
read-only joints, like fuckin tha list returned by \f(CW\*(C`keys %hash\*(C'\fR. This makes
operations like fuckin \f(CW\*(C`sort keys %hash\*(C'\fR up in tha scope of \f(CW\*(C`use locale\*(C'\fR much
faster.
.IP "\(bu" 4
Empty \f(CW\*(C`DESTROY\*(C'\fR methodz is no longer called.
.SH "Installation n' Configuration Improvements"
.IX Header "Installation n' Configuration Improvements"
.SS "\fIext/\fP reorganisation"
.IX Subsection "ext/ reorganisation"
Da layout of directories up in \fIext\fR has been revised. Y'all KNOW dat shit, muthafucka! Specifically, all
extensions is now flat, n' all up in tha top level, wit \f(CW\*(C`/\*(C'\fR up in pathnames
replaced by \f(CW\*(C`\-\*(C'\fR, so dat \fIext/Data/Dumper/\fR is now \fIext/Data\-Dumper/\fR,
etc.  Da namez of tha extensions as specified ta \fIConfigure\fR, n' as
reported by \f(CW%Config::Config\fR under tha keys \f(CW\*(C`dynamic_ext\*(C'\fR,
\&\f(CW\*(C`known_extensions\*(C'\fR, \f(CW\*(C`nonxs_ext\*(C'\fR n' \f(CW\*(C`static_ext\*(C'\fR aint chizzled, and
still use \f(CW\*(C`/\*(C'\fR yo. Hence dis chizzle aint gonna have any affect once perl is
installed. Y'all KNOW dat shit, muthafucka! But fuck dat shiznit yo, tha word on tha street is dat \f(CW\*(C`Attribute::Handlezs\*(C'\fR, \f(CW\*(C`Safe\*(C'\fR n' \f(CW\*(C`mro\*(C'\fR have now
become extensions up in they own right, so if you run \fIConfigure\fR with
options ta specify a exact list of extensions ta build, yo big-ass booty is ghon need to
change it ta account fo' all dis bullshit.
.PP
For 5.10.2, it is planned dat nuff dual-life modulez gonna git been moved
from \fIlib\fR ta \fIext\fR; again n' again n' again dis gonna git no effect on a installed
perl yo, but will matta if you invoke \fIConfigure\fR wit a pre-canned list of
extensions ta build.
.SS "Configuration improvements"
.IX Subsection "Configuration improvements"
If \f(CW\*(C`vendorlib\*(C'\fR n' \f(CW\*(C`vendorarch\*(C'\fR is tha same, then they is only added to
\&\f(CW@INC\fR once.
.PP
\&\f(CW$Config{usedevel}\fR n' tha C\-level \f(CW\*(C`PERL_USE_DEVEL\*(C'\fR is now defined if
perl is built wit  \f(CW\*(C`\-Dusedevel\*(C'\fR.
.PP
\&\fIConfigure\fR will enable use of \f(CW\*(C`\-fstack\-protector\*(C'\fR, ta provide protection
against stack-smashin attacks, if tha compila supports dat shit.
.PP
\&\fIConfigure\fR will now determine tha erect prototypes fo' re-entrant
functions, n' fo' \f(CW\*(C`gconvert\*(C'\fR, if yo ass is rockin a \*(C+ compila rather
than a C compiler.
.PP
On Unix, if you build from a tree containin a git repository, the
configuration process will note tha commit hash you have checked out, for
display up in tha output of \f(CW\*(C`perl \-v\*(C'\fR n' \f(CW\*(C`perl \-V\*(C'\fR. Unpushed local commits
are automatically added ta tha list of local patches displayed by
\&\f(CW\*(C`perl \-V\*(C'\fR.
.SS "Compilation improvements"
.IX Subsection "Compilation improvements"
As part of tha flattenin of \fIext\fR, all extensions on all platforms are
built by \fImake_ext.pl\fR. This replaces tha Unix-specific
\&\fIext/util/make_ext\fR, VMS-specific \fImake_ext.com\fR n' Win32\-specific
\&\fIwin32/buildext.pl\fR.
.SS "Platform Specific Chizzles"
.IX Subsection "Platform Specific Chizzles"
.IP "\s-1AIX\s0" 4
.IX Item "AIX"
Removed \fIlibbsd\fR fo' \s-1AIX 5L\s0 n' 6.1. Only \fIflock()\fR was used from \fIlibbsd\fR.
.Sp
Removed \fIlibgdbm\fR fo' \s-1AIX 5L\s0 n' 6.1. Da \fIlibgdbm\fR is served up as an
optionizzle package wit tha \s-1AIX\s0 Toolbox. Unfortunately tha 64 bit version 
is broken.
.Sp
Hints chizzlez mean dat \s-1AIX 4.2\s0 should work again.
.IP "Cygwin" 4
.IX Item "Cygwin"
On Cygwin we now strip tha last number from tha \s-1DLL.\s0 This has been the
behaviour up in tha cygwin.com build fo' years. Da hints filez have been
updated.
.IP "FreeBSD" 4
.IX Item "FreeBSD"
Da hints filez now identify tha erect threadin libraries on FreeBSD 7
and later.
.IP "Irix" 4
.IX Item "Irix"
We now work round a funky-ass bizarre preprocessor bug up in tha Irix 6.5 compiler:
\&\f(CW\*(C`cc \-E \-\*(C'\fR unfortunately goes tha fuck into K&R mode yo, but \f(CW\*(C`cc \-E file.c\*(C'\fR don't.
.IP "Haiku" 4
.IX Item "Haiku"
Patches from tha Haiku maintainers done been merged in. I aint talkin' bout chicken n' gravy biatch. Perl should now
build on Haiku.
.IP "MirOS \s-1BSD\s0" 4
.IX Item "MirOS BSD"
Perl should now build on MirOS \s-1BSD.\s0
.IP "NetBSD" 4
.IX Item "NetBSD"
Hints now supports versions 5.*.
.IP "Stratus \s-1VOS\s0" 4
.IX Item "Stratus VOS"
Various chizzlez from Stratus done been merged in.
.IP "Symbian" 4
.IX Item "Symbian"
There is now support fo' Symbian S60 3.2 \s-1SDK\s0 n' S60 5.0 \s-1SDK.\s0
.IP "Win32" 4
.IX Item "Win32"
Improved message window handlin means dat \f(CW\*(C`alarm\*(C'\fR n' \f(CW\*(C`kill\*(C'\fR lyrics
will no longer be dropped under race conditions.
.IP "\s-1VMS\s0" 4
.IX Item "VMS"
Readz from tha in-memory temporary filez of \f(CW\*(C`PerlIO::scalar\*(C'\fR used ta fail
if \f(CW$/\fR was set ta a numeric reference (to indicate record-style reads).
This is now fixed.
.Sp
\&\s-1VMS\s0 now supports \f(CW\*(C`getgrgid\*(C'\fR.
.Sp
Many improvements n' cleanups done been made ta tha \s-1VMS\s0 file name handling
and conversion code.
.Sp
Enablin tha \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR logical name now encodes a \s-1POSIX\s0 exit
status up in a \s-1VMS\s0 condizzle value fo' betta interaction wit \s-1GNV\s0z bash
shell n' other utilitizzles dat depend on \s-1POSIX\s0 exit joints, n' you can put dat on yo' toast.  See
\&\*(L"$?\*(R" up in perlvms fo' details.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
5.10.0 inadvertently disabled a optimisation, which caused a measurable
performizzle drop up in list assignment, like fuckin is often used ta assign
function parametas from \f(CW@_\fR. Da optimisation has been re-instated, and
the performizzle regression fixed.
.IP "\(bu" 4
Fixed memory leak on \f(CW\*(C`while (1) { map 1, 1 }\*(C'\fR [\s-1RT\s0 #53038].
.IP "\(bu" 4
Some potential coredumps up in PerlIO fixed [\s-1RT\s0 #57322,54828].
.IP "\(bu" 4
Da debugger now works wit lvalue subroutines.
.IP "\(bu" 4
Da debuggerz \f(CW\*(C`m\*(C'\fR command was fucked up on modulez dat defined constants
[\s-1RT\s0 #61222].
.IP "\(bu" 4
\&\f(CW\*(C`crypt()\*(C'\fR n' strang complement could return tainted joints fo' untainted
arguments [\s-1RT\s0 #59998].
.IP "\(bu" 4
Da \f(CW\*(C`\-i.suffix\*(C'\fR command-line switch now recreates tha file using
restricted permissions, before changin its mode ta match tha original
file. This eliminates a potential race condizzle [\s-1RT\s0 #60904].
.IP "\(bu" 4
On some Unix systems, tha value up in \f(CW$?\fR would not have tha top bit set
(\f(CW\*(C`$? & 128\*(C'\fR) even if tha lil pimp core dumped.
.IP "\(bu" 4
Under some circumstances, $^R could incorrectly become undefined
[\s-1RT\s0 #57042].
.IP "\(bu" 4
(\s-1XS\s0) In various hash functions, passin a pre-computed hash ta when the
key is \s-1UTF\-8\s0 might result up in a incorrect lookup.
.IP "\(bu" 4
(\s-1XS\s0) Includin \fI\s-1XSUB\s0.h\fR before \fIperl.h\fR gave a cold-ass lil compile-time error
[\s-1RT\s0 #57176].
.IP "\(bu" 4
\&\f(CW\*(C`$object\->isa(\*(AqFoo\*(Aq)\*(C'\fR would report false if tha package \f(CW\*(C`Foo\*(C'\fR didn't
exist, even if tha objectz \f(CW@ISA\fR contained \f(CW\*(C`Foo\*(C'\fR.
.IP "\(bu" 4
Various bugs up in tha new-to 5.10.0 mro code, triggered by manipulating
\&\f(CW@ISA\fR, done been found n' fixed.
.IP "\(bu" 4
Bitwise operations on references could crash tha interpreter, e.g.
\&\f(CW\*(C`$x=\e$y; $x |= "foo"\*(C'\fR [\s-1RT\s0 #54956].
.IP "\(bu" 4
Patterns includin alternation might be sensitizzle ta tha internal \s-1UTF\-8\s0
representation, e.g.
.Sp
.Vb 3
\&    mah $byte = chr(192);
\&    mah $utf8 = chr(192); utf8::upgrade($utf8);
\&    $utf8 =~ /$byte|X}/i;       # failed up in 5.10.0
.Ve
.IP "\(bu" 4
Within UTF8\-encoded Perl source filez (i.e. where \f(CW\*(C`use utf8\*(C'\fR is in
effect), double-quoted literal strings could be corrupted where a \f(CW\*(C`\exNN\*(C'\fR,
\&\f(CW\*(C`\e0NNN\*(C'\fR or \f(CW\*(C`\eN{}\*(C'\fR is followed by a literal characta wit ordinal value
greata than 255 [\s-1RT\s0 #59908].
.IP "\(bu" 4
\&\f(CW\*(C`B::Deparse\*(C'\fR failed ta erectly deparse various constructs:
\&\f(CW\*(C`readpipe STRING\*(C'\fR [\s-1RT\s0 #62428], \f(CW\*(C`CORE::require(STRING)\*(C'\fR [\s-1RT\s0 #62488],
\&\f(CW\*(C`sub foo(_)\*(C'\fR [\s-1RT\s0 #62484].
.IP "\(bu" 4
Usin \f(CW\*(C`setpgrp()\*(C'\fR wit no arguments could corrupt tha perl stack.
.IP "\(bu" 4
Da block form of \f(CW\*(C`eval\*(C'\fR is now specifically trappable by \f(CW\*(C`Safe\*(C'\fR and
\&\f(CW\*(C`ops\*(C'\fR.  Previously dat shiznit was erroneously treated like strang \f(CW\*(C`eval\*(C'\fR.
.IP "\(bu" 4
In 5.10.0, tha two charactas \f(CW\*(C`[~\*(C'\fR was sometimes parsed as tha smart
match operator (\f(CW\*(C`~~\*(C'\fR) [\s-1RT\s0 #63854].
.IP "\(bu" 4
In 5.10.0, tha \f(CW\*(C`*\*(C'\fR quantifier up in patterns was sometimes treated as
\&\f(CW\*(C`{0,32767}\*(C'\fR [\s-1RT\s0 #60034, #60464]. For example, dis match would fail:
.Sp
.Vb 1
\&    ("ab" x 32768) =~ /^(ab)*$/
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`shmget\*(C'\fR was limited ta a 32 bit segment size on a 64 bit \s-1OS\s0 [\s-1RT\s0 #63924].
.IP "\(bu" 4
Usin \f(CW\*(C`next\*(C'\fR or \f(CW\*(C`last\*(C'\fR ta exit a \f(CW\*(C`given\*(C'\fR block no longer produces a
spurious warnin like tha following:
.Sp
.Vb 1
\&    Exitin given via last at foo.pl line 123
.Ve
.IP "\(bu" 4
On Windows, \f(CW\*(Aq.\efoo\*(Aq\fR n' \f(CW\*(Aq..\efoo\*(Aq\fR  was treated differently than
\&\f(CW\*(Aq./foo\*(Aq\fR n' \f(CW\*(Aq../foo\*(Aq\fR by \f(CW\*(C`do\*(C'\fR n' \f(CW\*(C`require\*(C'\fR [\s-1RT\s0 #63492].
.IP "\(bu" 4
Assignin a gangbangin' format ta a glob could corrupt tha format; e.g.:
.Sp
.Vb 1
\&     *bar=*foo{FORMAT}; # foo format now bad
.Ve
.IP "\(bu" 4
Attemptin ta coerce a typeglob ta a strang or number could cause an
assertion failure. Da erect error message is now generated,
\&\f(CW\*(C`Can\*(Aqt coerce GLOB ta \f(CI$type\f(CW\*(C'\fR.
.IP "\(bu" 4
Under \f(CW\*(C`use filetest \*(Aqaccess\*(Aq\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR was rockin tha wack access mode. This
has been fixed [\s-1RT\s0 #49003].
.IP "\(bu" 4
\&\f(CW\*(C`length\*(C'\fR on a tied scalar dat returned a Unicode value would not be
correct tha last time. This has been fixed.
.IP "\(bu" 4
Usin a array \f(CW\*(C`tie\*(C'\fR inside up in array \f(CW\*(C`tie\*(C'\fR could \s-1SEGV.\s0 This has been
fixed. Y'all KNOW dat shit, muthafucka! [\s-1RT\s0 #51636]
.IP "\(bu" 4
A race condizzle inside \f(CW\*(C`PerlIOStdio_close()\*(C'\fR has been identified and
fixed. Y'all KNOW dat shit, muthafucka! This used ta cause various threadin issues, includin SEGVs.
.IP "\(bu" 4
In \f(CW\*(C`unpack\*(C'\fR, tha use of \f(CW\*(C`()\*(C'\fR crews up in scalar context was internally
placin a list on tha interpreterz stack, which manifested up in various
ways, includin SEGVs.  This is now fixed [\s-1RT\s0 #50256].
.IP "\(bu" 4
Magic was called twice up in \f(CW\*(C`substr\*(C'\fR, \f(CW\*(C`\e&$x\*(C'\fR, \f(CW\*(C`tie $x, $m\*(C'\fR n' \f(CW\*(C`chop\*(C'\fR.
These have all been fixed.
.IP "\(bu" 4
A 5.10.0 optimisation ta clear tha temporary stack within tha implicit
loop of \f(CW\*(C`s///ge\*(C'\fR has been reverted, as it turned up ta be tha cause of
obscure bugs up in seemingly unrelated partz of tha interpreta [commit 
ef0d4e17921ee3de].
.IP "\(bu" 4
Da line numbers fo' warnings inside \f(CW\*(C`elsif\*(C'\fR is now erect.
.IP "\(bu" 4
Da \f(CW\*(C`..\*(C'\fR operator now works erectly wit ranges whose endz is at or
close ta tha jointz of tha smallest n' phattest integers.
.IP "\(bu" 4
\&\f(CW\*(C`binmode STDIN, \*(Aq:raw\*(Aq\*(C'\fR could lead ta segmentation faults on some platforms.
This has been fixed [\s-1RT\s0 #54828].
.IP "\(bu" 4
An off-by-one error meant dat \f(CW\*(C`index $str, ...\*(C'\fR was effectively being
executed as \f(CW\*(C`index "$str\e0", ...\*(C'\fR. This has been fixed [\s-1RT\s0 #53746].
.IP "\(bu" 4
Various leaks associated wit named captures up in regexes done been fixed
[\s-1RT\s0 #57024].
.IP "\(bu" 4
A weak reference ta a hash would leak. This was affectin \f(CW\*(C`DBI\*(C'\fR
[\s-1RT\s0 #56908].
.IP "\(bu" 4
Usin (?|) up in a regex could cause a segfault [\s-1RT\s0 #59734].
.IP "\(bu" 4
Use of a \s-1UTF\-8 \s0\f(CW\*(C`tr//\*(C'\fR within a cold-ass lil closure could cause a segfault [\s-1RT\s0 #61520].
.IP "\(bu" 4
Callin \f(CW\*(C`sv_chop()\*(C'\fR or otherwise upgradin a \s-1SV\s0 could result up in an
unaligned 64\-bit access on tha \s-1SPARC\s0 architecture [\s-1RT\s0 #60574].
.IP "\(bu" 4
In tha 5.10.0 release, \f(CW\*(C`inc_version_list\*(C'\fR would incorrectly list
\&\f(CW\*(C`5.10.*\*(C'\fR afta \f(CW\*(C`5.8.*\*(C'\fR; dis affected tha \f(CW@INC\fR search order
[\s-1RT\s0 #67628].
.IP "\(bu" 4
In 5.10.0, \f(CW\*(C`pack "a*", $tainted_value\*(C'\fR returned a non-tainted value
[\s-1RT\s0 #52552].
.IP "\(bu" 4
In 5.10.0, \f(CW\*(C`printf\*(C'\fR n' \f(CW\*(C`sprintf\*(C'\fR could produce tha fatal error
\&\f(CW\*(C`panic: utf8_mg_pos_cache_update\*(C'\fR when printin \s-1UTF\-8\s0 strings
[\s-1RT\s0 #62666].
.IP "\(bu" 4
In tha 5.10.0 release, a thugged-out dynamically pimped \f(CW\*(C`AUTOLOAD\*(C'\fR method might be
missed (method cache issue) [\s-1RT\s0 #60220,60232].
.IP "\(bu" 4
In tha 5.10.0 release, a cold-ass lil combination of \f(CW\*(C`use feature\*(C'\fR n' \f(CW\*(C`//ee\*(C'\fR could
cause a memory leak [\s-1RT\s0 #63110].
.IP "\(bu" 4
\&\f(CW\*(C`\-C\*(C'\fR on tha shebang (\f(CW\*(C`#!\*(C'\fR) line is once mo' permitted if it be also
specified on tha command line. \f(CW\*(C`\-C\*(C'\fR on tha shebang line used ta be a
silent no-op \fIif\fR dat shiznit was not also on tha command line, so perl 5.10.0
disallowed it, which broke some scripts, n' you can put dat on yo' toast. Now perl checks whether it is
also on tha command line n' only takes a thugged-out dirt nap if it aint [\s-1RT\s0 #67880].
.IP "\(bu" 4
In 5.10.0, certain typez of re-entrant regular expression could crash,
or cause tha followin assertion failure [\s-1RT\s0 #60508]:
.Sp
.Vb 1
\&    Assertion rx\->sublen >= (s \- rx\->subbeg) + i failed
.Ve
.SH "New or Chizzled Diagnostics"
.IX Header "New or Chizzled Diagnostics"
.ie n .IP """panic: sv_chop %s""" 4
.el .IP "\f(CWpanic: sv_chop %s\fR" 4
.IX Item "panic: sv_chop %s"
This freshly smoked up fatal error occurs when tha C routine \f(CW\*(C`Perl_sv_chop()\*(C'\fR was
passed a posizzle dat aint within tha scalarz strang buffer n' shit. This
could be caused by buggy \s-1XS\s0 code, n' at dis point recovery is not
possible.
.ie n .IP """Can\*(Aqt locate package %s fo' tha muthafathaz of %s""" 4
.el .IP "\f(CWCan\*(Aqt locate package %s fo' tha muthafathaz of %s\fR" 4
.IX Item "Cant locate package %s fo' tha muthafathaz of %s"
This warnin has been removed. Y'all KNOW dat shit, muthafucka! In general, it only gots produced in
conjunction wit other warnings, n' removin it allowed a \s-1ISA\s0 lookup
optimisation ta be added.
.ie n .IP """v\-strin up in use/require is non\-portable""" 4
.el .IP "\f(CWv\-strin up in use/require is non\-portable\fR" 4
.IX Item "v-strin up in use/require is non-portable"
This warnin has been removed.
.ie n .IP """Deep recursion on subroutine ""%s""""" 4
.el .IP "\f(CWDeep recursion on subroutine ``%s''\fR" 4
.IX Item "Deep recursion on subroutine ""%s"""
It be now possible ta chizzle tha depth threshold fo' dis warnin from the
default of 100, by recompilin tha \fIperl\fR binary, settin tha C
pre-processor macro \f(CW\*(C`PERL_SUB_DEPTH_WARN\*(C'\fR ta tha desired value.
.SH "Changed Internals"
.IX Header "Changed Internals"
.IP "\(bu" 4
Da J.R.R. Tolkien quotes all up in tha head of C source file done been checked and
proper citations added, props ta a patch from Tomothy Christiansen.
.IP "\(bu" 4
\&\f(CW\*(C`vcroak()\*(C'\fR now accepts a null first argument. In addition, a gangbangin' full audit
was made of tha \*(L"not \s-1NULL\*(R"\s0 compila annotations, n' dem fo' several
other internal functions was erected.
.IP "\(bu" 4
New macros \f(CW\*(C`dSAVEDERRNO\*(C'\fR, \f(CW\*(C`dSAVE_ERRNO\*(C'\fR, \f(CW\*(C`SAVE_ERRNO\*(C'\fR, \f(CW\*(C`RESTORE_ERRNO\*(C'\fR
have been added ta formalise tha temporary savin of tha \f(CW\*(C`errno\*(C'\fR
variable.
.IP "\(bu" 4
Da function \f(CW\*(C`Perl_sv_insert_flags\*(C'\fR has been added ta augment
\&\f(CW\*(C`Perl_sv_insert\*(C'\fR.
.IP "\(bu" 4
Da function \f(CW\*(C`Perl_newSV_type(type)\*(C'\fR has been added, equivalent to
\&\f(CW\*(C`Perl_newSV()\*(C'\fR followed by \f(CW\*(C`Perl_sv_upgrade(type)\*(C'\fR.
.IP "\(bu" 4
Da function \f(CW\*(C`Perl_newSVpvn_flags()\*(C'\fR has been added, equivalent to
\&\f(CW\*(C`Perl_newSVpvn()\*(C'\fR n' then struttin tha action relevant ta tha flag.
.Sp
Two flag bits is currently supported.
.RS 4
.ie n .IP """SVf_UTF8""" 4
.el .IP "\f(CWSVf_UTF8\fR" 4
.IX Item "SVf_UTF8"
This will call \f(CW\*(C`SvUTF8_on()\*(C'\fR fo' yo thugged-out ass. (Note dat dis do not convert an
sequence of \s-1ISO 8859\-1\s0 charactas ta \s-1UTF\-8\s0) fo' realz. A wrapper, \f(CW\*(C`newSVpvn_utf8()\*(C'\fR
is available fo' all dis bullshit.
.ie n .IP """SVs_TEMP""" 4
.el .IP "\f(CWSVs_TEMP\fR" 4
.IX Item "SVs_TEMP"
Call \f(CW\*(C`sv_2mortal()\*(C'\fR on tha freshly smoked up \s-1SV.\s0
.RE
.RS 4
.Sp
There be also a wrapper dat takes constant strings, \f(CW\*(C`newSVpvs_flags()\*(C'\fR.
.RE
.IP "\(bu" 4
Da function \f(CW\*(C`Perl_croak_xs_usage\*(C'\fR has been added as a wrapper to
\&\f(CW\*(C`Perl_croak\*(C'\fR.
.IP "\(bu" 4
Da functions \f(CW\*(C`PerlIO_find_layer\*(C'\fR n' \f(CW\*(C`PerlIO_list_alloc\*(C'\fR is now
exported.
.IP "\(bu" 4
\&\f(CW\*(C`PL_na\*(C'\fR has been exterminated from tha core code, replaced by local \s-1STRLEN\s0
temporaries, or \f(CW\*(C`*_nolen()\*(C'\fR calls. Either approach is fasta than \f(CW\*(C`PL_na\*(C'\fR,
which be a pointa deference tha fuck into tha interpreta structure under ithreads,
and a global variable otherwise.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_mg_free()\*(C'\fR used ta leave freed memory accessible via \fISvMAGIC()\fR on
the scalar. Shiiit, dis aint no joke. Well shiiiit, it now thugged-out shiznit tha linked list ta remove each piece of magic
as it is freed.
.IP "\(bu" 4
Under ithreads, tha regex up in \f(CW\*(C`PL_reg_curpm\*(C'\fR is now reference counted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This
eliminates a shitload of hackish workaroundz ta cope wit it not bein reference
counted.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_mg_magical()\*(C'\fR would sometimes incorrectly turn on \f(CW\*(C`SvRMAGICAL()\*(C'\fR.
This has been fixed.
.IP "\(bu" 4
Da \fIpublic\fR \s-1IV\s0 n' \s-1NV\s0 flags is now not set if tha strang value has
trailin \*(L"garbage\*(R". This behaviour is consistent wit not settin the
hood \s-1IV\s0 or \s-1NV\s0 flags if tha value is outta range fo' tha type.
.IP "\(bu" 4
\&\s-1SV\s0 allocation tracin has been added ta tha diagnostics enabled by \f(CW\*(C`\-Dm\*(C'\fR.
Da tracin can alternatively output via tha \f(CW\*(C`PERL_MEM_LOG\*(C'\fR mechanism, if
that was enabled when tha \fIperl\fR binary was compiled.
.IP "\(bu" 4
Usez of \f(CW\*(C`Nullav\*(C'\fR, \f(CW\*(C`Nullcv\*(C'\fR, \f(CW\*(C`Nullhv\*(C'\fR, \f(CW\*(C`Nullop\*(C'\fR, \f(CW\*(C`Nullsv\*(C'\fR etc have been
replaced by \f(CW\*(C`NULL\*(C'\fR up in tha core code, n' non-dual-life modules, as \f(CW\*(C`NULL\*(C'\fR
is clearer ta dem unfamiliar wit tha core code.
.IP "\(bu" 4
A macro \f(CWMUTABLE_PTR(p)\fR has been added, which on (non-pedantic) gcc will
not cast away \f(CW\*(C`const\*(C'\fR, returnin a \f(CW\*(C`void *\*(C'\fR. Macros \f(CW\*(C`MUTABLE_SV(av)\*(C'\fR,
\&\f(CW\*(C`MUTABLE_SV(cv)\*(C'\fR etc build on this, castin ta \f(CW\*(C`AV *\*(C'\fR etc without
castin away \f(CW\*(C`const\*(C'\fR. This allows proper compile-time auditin of
\&\f(CW\*(C`const\*(C'\fR erectnizz up in tha core, n' helped picked up some errors (now
fixed).
.IP "\(bu" 4
Macros \f(CW\*(C`mPUSHs()\*(C'\fR n' \f(CW\*(C`mXPUSHs()\*(C'\fR done been added, fo' pushin SVs on the
stack n' mortalizin em.
.IP "\(bu" 4
Use of tha private structure \f(CW\*(C`mro_meta\*(C'\fR has chizzled slightly. Nothing
outside tha core should be accessin dis directly anyway.
.IP "\(bu" 4
A freshly smoked up tool, \f(CW\*(C`Porting/expand\-macro.pl\*(C'\fR has been added, dat allows you
to view how tha fuck a C preprocessor macro would be expanded when compiled.
This is handy when tryin ta decode tha macro hell dat is tha perl
guts.
.SH "New Tests"
.IX Header "New Tests"
Many modulez updated from \s-1CPAN\s0 incorporate freshly smoked up tests.
.PP
Several tests dat have tha potential ta hang forever if they fail now
incorporate a \*(L"watchdog\*(R" functionalitizzle dat will bust a cap up in dem afta a timeout,
which helps ensure dat \f(CW\*(C`make test\*(C'\fR n' \f(CW\*(C`make test_harness\*(C'\fR run to
completion automatically. (Jeremy Hedden).
.PP
Some core-specific tests done been added:
.IP "t/comp/retainedlines.t" 4
.IX Item "t/comp/retainedlines.t"
Peep dat tha debugger can retain source lines from \f(CW\*(C`eval\*(C'\fR.
.IP "t/io/perlio_fail.t" 4
.IX Item "t/io/perlio_fail.t"
Peep dat wack layers fail.
.IP "t/io/perlio_leaks.t" 4
.IX Item "t/io/perlio_leaks.t"
Peep dat PerlIO layers is not leaking.
.IP "t/io/perlio_open.t" 4
.IX Item "t/io/perlio_open.t"
Peep dat certain special formz of open work.
.IP "t/io/perlio.t" 4
.IX Item "t/io/perlio.t"
General PerlIO tests.
.IP "t/io/pvbm.t" 4
.IX Item "t/io/pvbm.t"
Peep dat there is no unexpected interaction between tha internal types
\&\f(CW\*(C`PVBM\*(C'\fR n' \f(CW\*(C`PVGV\*(C'\fR.
.IP "t/mro/package_aliases.t" 4
.IX Item "t/mro/package_aliases.t"
Peep dat mro works properly up in tha presence of aliased packages.
.IP "t/op/dbm.t" 4
.IX Item "t/op/dbm.t"
Tests fo' \f(CW\*(C`dbmopen\*(C'\fR n' \f(CW\*(C`dbmclose\*(C'\fR.
.IP "t/op/index_thr.t" 4
.IX Item "t/op/index_thr.t"
Tests fo' tha interaction of \f(CW\*(C`index\*(C'\fR n' threads.
.IP "t/op/pat_thr.t" 4
.IX Item "t/op/pat_thr.t"
Tests fo' tha interaction of esoteric patterns n' threads.
.IP "t/op/qr_gc.t" 4
.IX Item "t/op/qr_gc.t"
Test dat \f(CW\*(C`qr\*(C'\fR don't leak.
.IP "t/op/reg_email_thr.t" 4
.IX Item "t/op/reg_email_thr.t"
Tests fo' tha interaction of regex recursion n' threads.
.IP "t/op/regexp_qr_embed_thr.t" 4
.IX Item "t/op/regexp_qr_embed_thr.t"
Tests fo' tha interaction of patterns wit embedded \f(CW\*(C`qr//\*(C'\fR n' threads.
.IP "t/op/regexp_unicode_prop.t" 4
.IX Item "t/op/regexp_unicode_prop.t"
Tests fo' Unicode propertizzles up in regular expressions.
.IP "t/op/regexp_unicode_prop_thr.t" 4
.IX Item "t/op/regexp_unicode_prop_thr.t"
Tests fo' tha interaction of Unicode propertizzles n' threads.
.IP "t/op/reg_nc_tie.t" 4
.IX Item "t/op/reg_nc_tie.t"
Test tha tied methodz of \f(CW\*(C`Tie::Hash::NamedCapture\*(C'\fR.
.IP "t/op/reg_posixcc.t" 4
.IX Item "t/op/reg_posixcc.t"
Peep dat \s-1POSIX\s0 characta classes behave consistently.
.IP "t/op/re.t" 4
.IX Item "t/op/re.t"
Peep dat exportable \f(CW\*(C`re\*(C'\fR functions up in \fIuniversal.c\fR work.
.IP "t/op/setpgrpstack.t" 4
.IX Item "t/op/setpgrpstack.t"
Peep dat \f(CW\*(C`setpgrp\*(C'\fR works.
.IP "t/op/substr_thr.t" 4
.IX Item "t/op/substr_thr.t"
Tests fo' tha interaction of \f(CW\*(C`substr\*(C'\fR n' threads.
.IP "t/op/upgrade.t" 4
.IX Item "t/op/upgrade.t"
Peep dat upgradin n' assignin scalars works.
.IP "t/uni/lex_utf8.t" 4
.IX Item "t/uni/lex_utf8.t"
Peep dat Unicode up in tha lexer works.
.IP "t/uni/tie.t" 4
.IX Item "t/uni/tie.t"
Peep dat Unicode n' \f(CW\*(C`tie\*(C'\fR work.
.SH "Known Problems"
.IX Header "Known Problems"
This be a list of some dope unfixed bugs, which is regressions
from either 5.10.0 or 5.8.x.
.IP "\(bu" 4
\&\f(CW\*(C`List::Util::first\*(C'\fR misbehaves up in tha presence of a lexical \f(CW$_\fR
(typically introduced by \f(CW\*(C`my $_\*(C'\fR or implicitly by \f(CW\*(C`given\*(C'\fR). Da variable
which gets set fo' each iteration is tha package variable \f(CW$_\fR, not the
lexical \f(CW$_\fR [\s-1RT\s0 #67694].
.Sp
A similar issue may occur up in other modulez dat provide functions which
take a funky-ass block as they first argument, like
.Sp
.Vb 1
\&    foo { ... $_ ...} list
.Ve
.IP "\(bu" 4
Da \f(CW\*(C`charnames\*(C'\fR pragma may generate a run-time error when a regex is
interpolated [\s-1RT\s0 #56444]:
.Sp
.Vb 4
\&    use charnames \*(Aq:full\*(Aq;
\&    mah $r1 = qr/\eN{THAI CHARACTER SARA I}/;
\&    "foo" =~ $r1;    # aiiight
\&    "foo" =~ /$r1+/; # runtime error
.Ve
.Sp
A workaround is ta generate tha characta outside of tha regex:
.Sp
.Vb 2
\&    mah $a = "\eN{THAI CHARACTER SARA I}";
\&    mah $r1 = qr/$a/;
.Ve
.IP "\(bu" 4
Some regexes may run much mo' slowly when run up in a cold-ass lil lil pimp thread compared
with tha thread tha pattern was compiled tha fuck into [\s-1RT\s0 #55600].
.SH "Deprecations"
.IX Header "Deprecations"
Da followin shit is now deprecated.
.IP "\(bu" 4
\&\f(CW\*(C`Switch\*(C'\fR is buggy n' should be avoided. Y'all KNOW dat shit, muthafucka! From perl 5.11.0 onwards, it is
intended dat any use of tha core version of dis module will emit a
warning, n' dat tha module will eventually be removed from tha core
(probably up in perl 5.14.0). Right back up in yo muthafuckin ass. See \*(L"Switch statements\*(R" up in perlsyn fo' its
replacement.
.IP "\(bu" 4
\&\f(CW\*(C`suidperl\*(C'\fR is ghon be removed up in 5.12.0. This serves up a mechanizzle to
emulate setuid permission bits on systems dat don't support it properly.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Some of tha work up in dis release was funded by a \s-1TPF\s0 grant.
.PP
Nicholas Clark officially retired from maintenizzle pumpkin duty at the
end of 2008; however up in realitizzle dat schmoooove muthafucka has put much effort up in since then to
help git 5.10.1 tha fuck into a gangbangin' fit state ta be busted out, includin freestylin a
considerable chunk of dis perldelta.
.PP
Steffen Muella n' Dizzy Golden up in particular helped gettin \s-1CPAN\s0 modules
polished n' synchronised wit they in-core equivalents.
.PP
Craig Berry was tireless up in gettin maint ta run under \s-1VMS,\s0 no matta how
many times we broke it fo' his muthafuckin ass.
.PP
Da other core committas contributed most of tha chizzles, n' applied most
of tha patches busted up in by tha hundredz of contributors listed up in \fI\s-1AUTHORS\s0\fR.
.PP
(Sorry ta all tha playas I aint mentioned by name).
.PP
Finally, props ta Larry Wall, without whom none of dis would be
necessary.
.SH "Reportin Bugs"
.IX Header "Reportin Bugs"
If you find what tha fuck you be thinkin be a funky-ass bug, you might check tha articles
recently posted ta tha comp.lang.perl.misc newsgroup n' tha perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , tha Perl Home Page.
.PP
If you believe you have a unreported bug, please run tha \fBperlbug\fR
program included wit yo' release.  Be shizzle ta trim yo' bug down
to a tiny but sufficient test case.  Yo crazy-ass bug report, along wit the
output of \f(CW\*(C`perl \-V\*(C'\fR, is ghon be busted off ta perlbug@perl.org ta be
analysed by tha Perl portin crew.
.PP
If tha bug yo ass is reportin has securitizzle implications, which make it
inappropriate ta bust ta a publicly archived mailin list, then please send
it ta perl5\-security\-report@perl.org. This points ta a cold-ass lil closed subscription
unarchived mailin list, which includes
all tha core committers, whoz ass is ghon be able
to help assess tha impact of issues, figure up a resolution, n' help
co-ordinizzle tha release of patches ta mitigate or fix tha problem across all
platforms on which Perl is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Please only use dis address for
securitizzle thangs up in tha Perl core, not fo' modulez independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Da \fIChanges\fR file fo' a explanation of how tha fuck ta view exhaustizzle details
on what tha fuck chizzled.
.PP
Da \fI\s-1INSTALL\s0\fR file fo' how tha fuck ta build Perl.
.PP
Da \fI\s-1README\s0\fR file fo' general stuff.
.PP
Da \fIArtistic\fR n' \fICopying\fR filez fo' copyright shiznit.
