.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FFMPEG-SCALER 1"
.TH FFMPEG-SCALER 1 "2015-01-03" " " " "
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
ffmpeg\-scala \- FFmpeg vizzle scalin n' pixel format converter
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da FFmpeg rescala serves up a high-level intercourse ta tha libswscale
library image conversion utilities. Put ya muthafuckin choppers up if ya feel dis! In particular it allows ta perform
image rescalin n' pixel format conversion.
.SH "SCALER OPTIONS"
.IX Header "SCALER OPTIONS"
Da vizzle scala supports tha followin named options.
.PP
Options may be set by specifyin \-\fIoption\fR \fIvalue\fR up in the
FFmpeg tools. For programmatic use, they can be set explicitly up in the
\&\f(CW\*(C`SwsContext\*(C'\fR options or all up in tha \fIlibavutil/opt.h\fR \s-1API.\s0
.IP "\fBsws_flags\fR" 4
.IX Item "sws_flags"
Set tha scala flags. This be also used ta set tha scaling
algorithm. Only a single algorithm should be selected.
.Sp
It accepts tha followin joints:
.RS 4
.IP "\fBfast_bilinear\fR" 4
.IX Item "fast_bilinear"
Select fast bilinear scalin algorithm.
.IP "\fBbilinear\fR" 4
.IX Item "bilinear"
Select bilinear scalin algorithm.
.IP "\fBbicubic\fR" 4
.IX Item "bicubic"
Select bicubic scalin algorithm.
.IP "\fBexperimental\fR" 4
.IX Item "experimental"
Select experimenstrual scalin algorithm.
.IP "\fBneighbor\fR" 4
.IX Item "neighbor"
Select nearest neighbor rescalin algorithm.
.IP "\fBarea\fR" 4
.IX Item "area"
Select averagin area rescalin algorithm.
.IP "\fBbicublin\fR" 4
.IX Item "bicublin"
Select bicubic scalin algorithm fo' tha luma component, bilinear for
chroma components.
.IP "\fBgauss\fR" 4
.IX Item "gauss"
Select Gaussian rescalin algorithm.
.IP "\fBsinc\fR" 4
.IX Item "sinc"
Select sinc rescalin algorithm.
.IP "\fBlanczos\fR" 4
.IX Item "lanczos"
Select lanczos rescalin algorithm.
.IP "\fBspline\fR" 4
.IX Item "spline"
Select natural bicubic spline rescalin algorithm.
.IP "\fBprint_info\fR" 4
.IX Item "print_info"
Enable printing/debug logging.
.IP "\fBaccurate_rnd\fR" 4
.IX Item "accurate_rnd"
Enable accurate rounding.
.IP "\fBfull_chroma_int\fR" 4
.IX Item "full_chroma_int"
Enable full chroma interpolation.
.IP "\fBfull_chroma_inp\fR" 4
.IX Item "full_chroma_inp"
Select full chroma input.
.IP "\fBbitexact\fR" 4
.IX Item "bitexact"
Enable bitexact output.
.RE
.RS 4
.RE
.IP "\fBsrcw\fR" 4
.IX Item "srcw"
Set source width.
.IP "\fBsrch\fR" 4
.IX Item "srch"
Set source height.
.IP "\fBdstw\fR" 4
.IX Item "dstw"
Set destination width.
.IP "\fBdsth\fR" 4
.IX Item "dsth"
Set destination height.
.IP "\fBsrc_format\fR" 4
.IX Item "src_format"
Set source pixel format (must be expressed as a integer).
.IP "\fBdst_format\fR" 4
.IX Item "dst_format"
Set destination pixel format (must be expressed as a integer).
.IP "\fBsrc_range\fR" 4
.IX Item "src_range"
Select source range.
.IP "\fBdst_range\fR" 4
.IX Item "dst_range"
Select destination range.
.IP "\fBparam0, param1\fR" 4
.IX Item "param0, param1"
Set scalin algorithm parameters. Da specified joints is specific of
some scalin algorithms n' ignored by others. Da specified joints
are floatin point number joints.
.IP "\fBsws_dither\fR" 4
.IX Item "sws_dither"
Set tha ditherin algorithm fo' realz. Accepts one of tha following
values. Default value is \fBauto\fR.
.RS 4
.IP "\fBauto\fR" 4
.IX Item "auto"
automatic chizzle
.IP "\fBnone\fR" 4
.IX Item "none"
no dithering
.IP "\fBbayer\fR" 4
.IX Item "bayer"
bayer dither
.IP "\fBed\fR" 4
.IX Item "ed"
error diffusion dither
.RE
.RS 4
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIffmpeg\fR\|(1), \fIffplay\fR\|(1), \fIffprobe\fR\|(1), \fIffserver\fR\|(1), \fIlibswscale\fR\|(3)
.SH "AUTHORS"
.IX Header "AUTHORS"
Da FFmpeg pimpers.
.PP
For details bout tha authorship, peep tha Git history of tha project
(git://source.ffmpeg.org/ffmpeg), e.g. by typin tha command
\&\fBgit log\fR up in tha FFmpeg source directory, or browsin the
online repository at <\fBhttp://source.ffmpeg.org\fR>.
.PP
Maintainers fo' tha specific components is listed up in tha file
\&\fI\s-1MAINTAINERS\s0\fR up in tha source code tree.
