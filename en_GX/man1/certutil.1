'\" t
.\"     Title: CERTUTIL
.\"    Author: [see tha "Authors" section]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 29 July 2014
.\"    Manual: NSS Securitizzle Tools
.\"    Source: nss-tools
.\"  Language: Gangsta
.\"
.TH "CERTUTIL" "1" "29 July 2014" "nss-tools" "NSS Securitizzle Tools"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
certutil \- Manage keys n' certificate up in both NSS databases n' other NSS tokens
.SH "SYNOPSIS"
.HP \w'\fBcertutil\fR\ 'u
\fBcertutil\fR [\fIoptions\fR] [[\fIarguments\fR]]
.SH "STATUS"
.PP
This documentation is still work up in progress\&. Please contribute ta tha initial review in
\m[blue]\fBMo'jizzle NSS bug 836477\fR\m[]\&\s-2\u[1]\d\s+2
.SH "DESCRIPTION"
.PP
Da Certificate Database Tool,
\fBcertutil\fR, be a cold-ass lil command\-line utilitizzle dat can create n' modify certificate n' key databases\&. Well shiiiit, it can specifically list, generate, modify, or delete certificates, create or chizzle tha password, generate freshly smoked up hood n' private key pairs, display tha contentz of tha key database, or delete key pairs within tha key database\&.
.PP
Certificate issuance, part of tha key n' certificate pimpment process, requires dat keys n' certificates be pimped up in tha key database\&. This document discusses certificate n' key database pimpment\&. For shiznit on tha securitizzle module database pimpment, peep the
\fBmodutil\fR
manpage\&.
.SH "COMMAND OPTIONS AND ARGUMENTS"
.PP
Running
\fBcertutil\fR
always requires one n' only one command option ta specify tha type of certificate operation\&. Each command option may take zero or mo' arguments\&. Da command option
\fB\-H\fR
will list all tha command options n' they relevant arguments\&.
.PP
\fBCommand Options\fR
.PP
\-A
.RS 4
Add a existin certificate ta a cold-ass lil certificate database\&. Da certificate database should already exist; if one aint present, dis command option will initialize one by default\&.
.RE
.PP
\-B
.RS 4
Run a seriez of commandz from tha specified batch file\&. This requires the
\fB\-i\fR
argument\&.
.RE
.PP
\-C
.RS 4
Smoke a freshly smoked up binary certificate file from a funky-ass binary certificate request file\&. Use the
\fB\-i\fR
argument ta specify tha certificate request file\&. If dis argument aint used,
\fBcertutil\fR
prompts fo' a gangbangin' filename\&.
.RE
.PP
\-D
.RS 4
Delete a cold-ass lil certificate from tha certificate database\&.
.RE
.PP
\-E
.RS 4
Add a email certificate ta tha certificate database\&.
.RE
.PP
\-F
.RS 4
Delete a private key from a key database\&. Right back up in yo muthafuckin ass. Specify tha key ta delete wit tha \-n argument\&. Right back up in yo muthafuckin ass. Specify tha database from which ta delete tha key wit the
\fB\-d\fR
argument\&. Use the
\fB\-k\fR
argument ta specify explicitly whether ta delete a DSA, RSA, or ECC key\&. If you don\*(Aqt use the
\fB\-k\fR
argument, tha option looks fo' a RSA key matchin tha specified nickname\&.
.sp
When you delete keys, be shizzle ta also remove any certificates associated wit dem keys from tha certificate database, by rockin \-D\&. Right back up in yo muthafuckin ass. Some smart-ass cardz do not let you remove a hood key you have generated\&. In such a cold-ass lil case, only tha private key is deleted from tha key pair\&. Yo ass can display tha hood key wit tha command certutil \-K \-h tokenname\&.
.RE
.PP
\-G
.RS 4
Generate a freshly smoked up hood n' private key pair within a key database\&. Da key database should already exist; if one aint present, dis command option will initialize one by default\&. Right back up in yo muthafuckin ass. Some smart-ass cardz can store only one key pair\&. If you create a freshly smoked up key pair fo' such a cold-ass lil card, tha previous pair is overwritten\&.
.RE
.PP
\-H
.RS 4
Display a list of tha command options n' arguments\&.
.RE
.PP
\-K
.RS 4
List tha key ID of keys up in tha key database\& fo' realz. A key ID is tha moduluz of tha RSA key or tha publicValue of tha DSA key\&. IDs is displayed up in hexadecimal ("0x" aint shown)\&.
.RE
.PP
\-L
.RS 4
List all tha certificates, or display shiznit on some named certificate, up in a cold-ass lil certificate database\&. Use tha \-h tokenname argument ta specify tha certificate database on a particular hardware or software token\&.
.RE
.PP
\-M
.RS 4
Modify a cold-ass lil certificate\*(Aqs trust attributes rockin tha jointz of tha \-t argument\&.
.RE
.PP
\-N
.RS 4
Smoke freshly smoked up certificate n' key databases\&.
.RE
.PP
\-O
.RS 4
Print tha certificate chain\&.
.RE
.PP
\-R
.RS 4
Smoke a cold-ass lil certificate request file dat can be submitted ta a Certificate Authoritizzle (CA) fo' processin tha fuck into a gangbangin' finished certificate\&. Output defaults ta standard up unless you use \-o output\-file argument\&. Use tha \-a argument ta specify ASCII output\&.
.RE
.PP
\-S
.RS 4
Smoke a individual certificate n' add it ta a cold-ass lil certificate database\&.
.RE
.PP
\-T
.RS 4
Reset tha key database or token\&.
.RE
.PP
\-U
.RS 4
List all available modulez or print a single named module\&.
.RE
.PP
\-V
.RS 4
Peep tha validitizzle of a cold-ass lil certificate n' its attributes\&.
.RE
.PP
\-W
.RS 4
Change tha password ta a key database\&.
.RE
.PP
\-\-merge
.RS 4
Merge two databases tha fuck into one\&.
.RE
.PP
\-\-upgrade\-merge
.RS 4
Upgrade a oldschool database n' merge it tha fuck into a freshly smoked up database\&. This is used ta migrate legacy NSS databases (cert8\&.db
and
key3\&.db) tha fuck into tha newer SQLite databases (cert9\&.db
and
key4\&.db)\&.
.RE
.PP
\fBArguments\fR
.PP
Arguments modify a cold-ass lil command option n' is probably lower case, numbers, or symbols\&.
.PP
\-a
.RS 4
Use ASCII format or allow tha use of ASCII format fo' input or output\&. This formattin bigs up RFC 1113\&. For certificate requests, ASCII output defaults ta standard output unless redirected\&.
.RE
.PP
\-b validity\-time
.RS 4
Specify a time at which a cold-ass lil certificate is required ta be valid\&. Use when checkin certificate validitizzle wit the
\fB\-V\fR
option\&. Da format of the
\fIvalidity\-time\fR
argument is
\fIYYMMDDHHMMSS[+HHMM|\-HHMM|Z]\fR, which allows offsets ta be set relatizzle ta tha validitizzle end time\&. Right back up in yo muthafuckin ass. Specifyin secondz (\fISS\fR) is optional\&. When specifyin a explicit time, bust a Z all up in tha end of tha term,
\fIYYMMDDHHMMSSZ\fR, ta close it\&. When specifyin a offset time, use
\fIYYMMDDHHMMSS+HHMM\fR
or
\fIYYMMDDHHMMSS\-HHMM\fR
for addin or subtractin time, respectively\&.
.sp
If dis option aint used, tha validitizzle check defaults ta tha current system time\&.
.RE
.PP
\-c issuer
.RS 4
Identify tha certificate of tha CA from which a freshly smoked up certificate will derive its authenticity\&. Use tha exact nickname or aliaz of tha CA certificate, or use tha CA\*(Aqs email address\&. Bracket tha issuer strang wit quotation marks if it gotz nuff spaces\&.
.RE
.PP
\-d [prefix]directory
.RS 4
Specify tha database directory containin tha certificate n' key database files\&.
.sp
\fBcertutil\fR
supports two typez of databases: tha legacy securitizzle databases (cert8\&.db,
key3\&.db, and
secmod\&.db) n' freshly smoked up SQLite databases (cert9\&.db,
key4\&.db, and
pkcs11\&.txt)\&.
.sp
NSS recognizes tha followin prefixes:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBsql:\fR
requests tha newer database
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBdbm:\fR
requests tha legacy database
.RE
.sp
If no prefix is specified tha default type is retrieved from NSS_DEFAULT_DB_TYPE\&. If NSS_DEFAULT_DB_TYPE aint set then
\fBdbm:\fR
is tha default\&.
.RE
.PP
\-\-dump\-ext\-val OID
.RS 4
For single cert, print binary DER encodin of extension OID\&.
.RE
.PP
\-e
.RS 4
Peep a cold-ass lil certificate\*(Aqs signature durin tha process of valipimpin a cold-ass lil certificate\&.
.RE
.PP
\-\-email email\-address
.RS 4
Specify tha email address of a cold-ass lil certificate ta list\&. Used wit tha \-L command option\&.
.RE
.PP
\-\-extGeneric OID:critical\-flag:filename[,OID:critical\-flag:filename]\&.\&.\&.
.RS 4
Add one or multiple extensions dat certutil cannot encode yet, by loadin they encodings from external files\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
OID (example): 1\&.2\&.3\&.4
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
critical\-flag: critical or not\-critical
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
filename: full path ta a gangbangin' file containin a encoded extension
.RE
.RE
.PP
\-f password\-file
.RS 4
Specify a gangbangin' file dat will automatically supply tha password ta include up in a cold-ass lil certificate or ta access a cold-ass lil certificate database\&. This be a plain\-text file containin one password\&. Be shizzle ta prevent unauthorized access ta dis file\&.
.RE
.PP
\-g keysize
.RS 4
Set a key size ta use when generatin freshly smoked up hood n' private key pairs\&. Da minimum is 512 bits n' tha maximum is 16384 bits\&. Da default is 1024 bits\& fo' realz. Any size between tha minimum n' maximum be allowed\&.
.RE
.PP
\-h tokenname
.RS 4
Specify tha name of a token ta use or act on\&. If not specified tha default token is tha internal database slot\&.
.RE
.PP
\-i input_file
.RS 4
Pass a input file ta tha command\&. Dependin on tha command option, a input file can be a specific certificate, a cold-ass lil certificate request file, or a funky-ass batch file of commands\&.
.RE
.PP
\-k key\-type\-or\-id
.RS 4
Specify tha type or specific ID of a key\&.
.sp
Da valid key type options is rsa, dsa, ec, or all\&. Da default value is rsa\&. Right back up in yo muthafuckin ass. Specifyin tha type of key can avoid mistakes caused by duplicate nicknames\&. Givin a key type generates a freshly smoked up key pair; givin tha ID of a existin key reuses dat key pair (which is required ta renew certificates)\&.
.RE
.PP
\-l
.RS 4
Display detailed shiznit when valipimpin a cold-ass lil certificate wit tha \-V option\&.
.RE
.PP
\-m serial\-number
.RS 4
Assign a unique serial number ta a cold-ass lil certificate bein pimped\&. This operation should be performed by a CA\&. If no serial number is provided a thugged-out default serial number is made from tha current time\&. Right back up in yo muthafuckin ass. Serial numbers is limited ta integers
.RE
.PP
\-n nickname
.RS 4
Specify tha nickname of a cold-ass lil certificate or key ta list, create, add ta a thugged-out database, modify, or validate\&. Bracket tha nickname strang wit quotation marks if it gotz nuff spaces\&.
.RE
.PP
\-o output\-file
.RS 4
Specify tha output file name fo' freshly smoked up certificates or binary certificate requests\&. Bracket tha output\-file strang wit quotation marks if it gotz nuff spaces\&. If dis argument aint used tha output destination defaults ta standard output\&.
.RE
.PP
\-P dbPrefix
.RS 4
Specify tha prefix used on tha certificate n' key database file\&. This argument is provided ta support legacy servers\&. Most applications do not bust a thugged-out database prefix\&.
.RE
.PP
\-p phone
.RS 4
Specify a cold-ass lil contact telephone number ta include up in freshly smoked up certificates or certificate requests\&. Bracket dis strang wit quotation marks if it gotz nuff spaces\&.
.RE
.PP
\-q pqgfile or curve\-name
.RS 4
Read a alternate PQG value from tha specified file when generatin DSA key pairs\&. If dis argument aint used,
\fBcertutil\fR
generates its own PQG value\&. PQG filez is pimped wit a separate DSA utility\&.
.sp
Elliptic curve name is one of tha ones from SUITE B: nistp256, nistp384, nistp521
.sp
If NSS has been compiled wit support curves outside of SUITE B: sect163k1, nistk163, sect163r1, sect163r2, nistb163, sect193r1, sect193r2, sect233k1, nistk233, sect233r1, nistb233, sect239k1, sect283k1, nistk283, sect283r1, nistb283, sect409k1, nistk409, sect409r1, nistb409, sect571k1, nistk571, sect571r1, nistb571, secp160k1, secp160r1, secp160r2, secp192k1, secp192r1, nistp192, secp224k1, secp224r1, nistp224, secp256k1, secp256r1, secp384r1, secp521r1, prime192v1, prime192v2, prime192v3, prime239v1, prime239v2, prime239v3, c2pnb163v1, c2pnb163v2, c2pnb163v3, c2pnb176v1, c2tnb191v1, c2tnb191v2, c2tnb191v3, c2pnb208w1, c2tnb239v1, c2tnb239v2, c2tnb239v3, c2pnb272w1, c2pnb304w1, c2tnb359w1, c2pnb368w1, c2tnb431r1, secp112r1, secp112r2, secp128r1, secp128r2, sect113r1, sect113r2 sect131r1, sect131r2
.RE
.PP
\-r
.RS 4
Display a cold-ass lil certificate\*(Aqs binary DER encodin when listin shiznit bout dat certificate wit tha \-L option\&.
.RE
.PP
\-s subject
.RS 4
Identify a particular certificate balla fo' freshly smoked up certificates or certificate requests\&. Bracket dis strang wit quotation marks if it gotz nuff spaces\&. Da subject identification format bigs up RFC #1485\&.
.RE
.PP
\-t trustargs
.RS 4
Specify tha trust attributes ta modify up in a existin certificate or ta apply ta a cold-ass lil certificate when bustin it or addin it ta a thugged-out database\&. There is three available trust categories fo' each certificate, expressed up in tha order
\fISSL, email, object signing\fR
for each trust setting\&. In each category position, use none, any, or all of tha attribute codes:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBp\fR
\- Valid peer
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBP\fR
\- Trusted peer (implies p)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBc\fR
\- Valid CA
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBT\fR
\- Trusted CA (implies c)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBC\fR
\- trusted CA fo' client authentication (ssl server only)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBu\fR
\- user
.RE
.sp
Da attribute codes fo' tha categories is separated by commas, n' tha entire set of attributes enclosed by quotation marks\&. For example:
.sp
\fB\-t "TCu,Cu,Tu"\fR
.sp
Use tha \-L option ta peep a list of tha current certificates n' trust attributes up in a cold-ass lil certificate database\&.
.RE
.PP
\-u certusage
.RS 4
Specify a usage context ta apply when valipimpin a cold-ass lil certificate wit tha \-V option\&.
.sp
Da contexts is tha following:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBC\fR
(as a SSL client)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBV\fR
(as a SSL server)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBL\fR
(as a SSL CA)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBA\fR
(as Any CA)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBY\fR
(Verify CA)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBS\fR
(as a email signer)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBR\fR
(as a email recipient)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBO\fR
(as a OCSP status responder)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBJ\fR
(as a object signer)
.RE
.RE
.PP
\-v valid\-months
.RS 4
Set tha number of months a freshly smoked up certificate is ghon be valid\&. Da validitizzle period begins all up in tha current system time unless a offset be added or subtracted wit the
\fB\-w\fR
option\&. If dis argument aint used, tha default validitizzle period is three months\&.
.RE
.PP
\-w offset\-months
.RS 4
Set a offset from tha current system time, up in months, fo' tha beginnin of a cold-ass lil certificate\*(Aqs validitizzle period\&. Use when bustin tha certificate or addin it ta a thugged-out database\&. Express tha offset up in integers, rockin a minus sign (\-) ta indicate a wack offset\&. If dis argument aint used, tha validitizzle period begins all up in tha current system time\&. Da length of tha validitizzle period is set wit tha \-v argument\&.
.RE
.PP
\-X
.RS 4
Force tha key n' certificate database ta open up in read\-write mode\&. This is used wit the
\fB\-U\fR
and
\fB\-L\fR
command options\&.
.RE
.PP
\-x
.RS 4
Use
\fBcertutil\fR
to generate tha signature fo' a cold-ass lil certificate bein pimped or added ta a thugged-out database, rather than obtainin a signature from a separate CA\&.
.RE
.PP
\-y exp
.RS 4
Set a alternate exponent value ta use up in generatin a freshly smoked up RSA hood key fo' tha database, instead of tha default value of 65537\&. Da available alternate joints is 3 n' 17\&.
.RE
.PP
\-z noise\-file
.RS 4
Read a seed value from tha specified file ta generate a freshly smoked up private n' hood key pair\&. This argument make it possible ta use hardware\-generated seed joints or manually create a value from tha keyboard\&. Da minimum file size is 20 bytes\&.
.RE
.PP
\-0 SSO_password
.RS 4
Set a joint securitizzle fool password on a token\&.
.RE
.PP
\-1 | \-\-keyUsage keyword,keyword
.RS 4
Set a X\&.509 V3 Certificate Type Extension up in tha certificate\&. There is nuff muthafuckin available keywords:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
digitalSignature
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
nonRepudiation
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
keyEncipherment
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
dataEncipherment
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
keyAgreement
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
certSigning
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
crlSigning
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
critical
.RE
.RE
.PP
\-2
.RS 4
Add a funky-ass basic constraint extension ta a cold-ass lil certificate dat is bein pimped or added ta a thugged-out database\&. This extension supports tha certificate chain verification process\&.
\fBcertutil\fR
prompts fo' tha certificate constraint extension ta select\&.
.sp
X\&.509 certificate extensions is busted lyrics bout up in RFC 5280\&.
.RE
.PP
\-3
.RS 4
Add a authoritizzle key ID extension ta a cold-ass lil certificate dat is bein pimped or added ta a thugged-out database\&. This extension supports tha identification of a particular certificate, from among multiple certificates associated wit one subject name, as tha erect issuer of a cold-ass lil certificate\&. Da Certificate Database Tool will prompt you ta select tha authoritizzle key ID extension\&.
.sp
X\&.509 certificate extensions is busted lyrics bout up in RFC 5280\&.
.RE
.PP
\-4
.RS 4
Add a CRL distribution point extension ta a cold-ass lil certificate dat is bein pimped or added ta a thugged-out database\&. This extension identifies tha URL of a cold-ass lil certificate\*(Aqs associated certificate revocation list (CRL)\&.
\fBcertutil\fR
prompts fo' tha URL\&.
.sp
X\&.509 certificate extensions is busted lyrics bout up in RFC 5280\&.
.RE
.PP
\-5 | \-\-nsCertType keyword,keyword
.RS 4
Add a X\&.509 V3 certificate type extension ta a cold-ass lil certificate dat is bein pimped or added ta tha database\&. There is nuff muthafuckin available keywords:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
sslClient
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
sslServer
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
smime
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
objectSigning
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
sslCA
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
smimeCA
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
objectSigningCA
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
critical
.RE
.sp
X\&.509 certificate extensions is busted lyrics bout up in RFC 5280\&.
.RE
.PP
\-6 | \-\-extKeyUsage keyword,keyword
.RS 4
Add a extended key usage extension ta a cold-ass lil certificate dat is bein pimped or added ta tha database\&. Right back up in yo muthafuckin ass. Several keywordz is available:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
serverAuth
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
clientAuth
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
codeSigning
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
emailProtection
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
timeStamp
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ocspResponder
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
stepUp
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
msTrustListSign
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
critical
.RE
.sp
X\&.509 certificate extensions is busted lyrics bout up in RFC 5280\&.
.RE
.PP
\-7 emailAddrs
.RS 4
Add a cold-ass lil comma\-separated list of email addresses ta tha subject alternatizzle name extension of a cold-ass lil certificate or certificate request dat is bein pimped or added ta tha database\&. Right back up in yo muthafuckin ass. Subject alternatizzle name extensions is busted lyrics bout up in Section 4\&.2\&.1\&.7 of RFC 3280\&.
.RE
.PP
\-8 dns\-names
.RS 4
Add a cold-ass lil comma\-separated list of DNS names ta tha subject alternatizzle name extension of a cold-ass lil certificate or certificate request dat is bein pimped or added ta tha database\&. Right back up in yo muthafuckin ass. Subject alternatizzle name extensions is busted lyrics bout up in Section 4\&.2\&.1\&.7 of RFC 3280\&.
.RE
.PP
\-\-extAIA
.RS 4
Add tha Authoritizzle Hype Access extension ta tha certificate\&. X\&.509 certificate extensions is busted lyrics bout up in RFC 5280\&.
.RE
.PP
\-\-extSIA
.RS 4
Add tha Subject Hype Access extension ta tha certificate\&. X\&.509 certificate extensions is busted lyrics bout up in RFC 5280\&.
.RE
.PP
\-\-extCP
.RS 4
Add tha Certificate Policies extension ta tha certificate\&. X\&.509 certificate extensions is busted lyrics bout up in RFC 5280\&.
.RE
.PP
\-\-extPM
.RS 4
Add tha Policy Mappings extension ta tha certificate\&. X\&.509 certificate extensions is busted lyrics bout up in RFC 5280\&.
.RE
.PP
\-\-extPC
.RS 4
Add tha Policy Constraints extension ta tha certificate\&. X\&.509 certificate extensions is busted lyrics bout up in RFC 5280\&.
.RE
.PP
\-\-extIA
.RS 4
Add tha Inhibit Any Policy Access extension ta tha certificate\&. X\&.509 certificate extensions is busted lyrics bout up in RFC 5280\&.
.RE
.PP
\-\-extSKID
.RS 4
Add tha Subject Key ID extension ta tha certificate\&. X\&.509 certificate extensions is busted lyrics bout up in RFC 5280\&.
.RE
.PP
\-\-extNC
.RS 4
Add a Name Constraint extension ta tha certificate\&. X\&.509 certificate extensions is busted lyrics bout up in RFC 5280\&.
.RE
.PP
\-\-extSAN type:name[,type:name]\&.\&.\&.
.RS 4
Smoke a Subject Alt Name extension wit one or multiple names\&.
.sp
\-type: directory, dn, dns, edi, ediparty, email, ip, ipaddr, other, registerid, rfc822, uri, x400, x400addr
.RE
.PP
\-\-empty\-password
.RS 4
Use empty password when bustin freshly smoked up certificate database wit \-N\&.
.RE
.PP
\-\-keyAttrFlags attrflags
.RS 4
PKCS #11 key Attributes\&. Comma separated list of key attribute flags, selected from tha followin list of chizzles: {token | session} {hood | private} {sensitizzle | insensitive} {modifiable | unmodifiable} {extractable | unextractable}
.RE
.PP
\-\-keyOpFlagsOn opflags, \-\-keyOpFlagsOff opflags
.RS 4
PKCS #11 key Operation Flags\&. Comma separated list of one or mo' of tha following: {token | session} {hood | private} {sensitizzle | insensitive} {modifiable | unmodifiable} {extractable | unextractable}
.RE
.PP
\-\-source\-dir certdir
.RS 4
Identify tha certificate database directory ta upgrade\&.
.RE
.PP
\-\-source\-prefix certdir
.RS 4
Give tha prefix of tha certificate n' key databases ta upgrade\&.
.RE
.PP
\-\-upgrade\-id uniqueID
.RS 4
Give tha unique ID of tha database ta upgrade\&.
.RE
.PP
\-\-upgrade\-token\-name name
.RS 4
Set tha name of tha token ta use while it is bein upgraded\&.
.RE
.PP
\-@ pwfile
.RS 4
Give tha name of a password file ta use fo' tha database bein upgraded\&.
.RE
.SH "USAGE AND EXAMPLES"
.PP
Most of tha command options up in tha examplez listed here have mo' arguments available\&. Da arguments included up in these examplez is da most thugged-out common ones or is used ta illustrate a specific scenario\&. Use the
\fB\-H\fR
option ta show tha complete list of arguments fo' each command option\&.
.PP
\fBCreatin New Securitizzle Databases\fR
.PP
Certificates, keys, n' securitizzle modulez related ta managin certificates is stored up in three related databases:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
cert8\&.db or cert9\&.db
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
key3\&.db or key4\&.db
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
secmod\&.db or pkcs11\&.txt
.RE
.PP
These databases must be pimped before certificates or keys can be generated\&.
.sp
.if n \{\
.RS 4
.\}
.nf
certutil \-N \-d [sql:]directory
.fi
.if n \{\
.RE
.\}
.PP
\fBCreatin a Certificate Request\fR
.PP
A certificate request gotz nuff most or all of tha shiznit dat is used ta generate tha final certificate\&. This request is submitted separately ta a cold-ass lil certificate authoritizzle n' is then approved by some mechanizzle (automatically or by human review)\&. Once tha request be approved, then tha certificate is generated\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-R \-k key\-type\-or\-id [\-q pqgfile|curve\-name] \-g key\-size \-s subject [\-h tokenname] \-d [sql:]directory [\-p phone] [\-o output\-file] [\-a]
.fi
.if n \{\
.RE
.\}
.PP
The
\fB\-R\fR
command options requires four arguments:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-k\fR
to specify either tha key type ta generate or, when renewin a cold-ass lil certificate, tha existin key pair ta use
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-g\fR
to set tha keysize of tha key ta generate
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-s\fR
to set tha subject name of tha certificate
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-d\fR
to give tha securitizzle database directory
.RE
.PP
Da freshly smoked up certificate request can be output up in ASCII format (\fB\-a\fR) or can be freestyled ta a specified file (\fB\-o\fR)\&.
.PP
For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-R \-k rsa \-g 1024 \-s "CN=Jizzy Smizzle,O=Example Corp,L=Mountain View,ST=California,C=US" \-d sql:$HOME/nssdb \-p 650\-555\-0123 \-a \-o cert\&.cer

Generatin key\&.  This may take all dem moments\&.\&.\&.

.fi
.if n \{\
.RE
.\}
.PP
\fBCreatin a Certificate\fR
.PP
A valid certificate must be issued by a trusted CA\&. This can be done by specifyin a CA certificate (\fB\-c\fR) dat is stored up in tha certificate database\&. If a CA key pair aint available, you can create a self\-signed certificate rockin the
\fB\-x\fR
argument wit the
\fB\-S\fR
command option\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-S \-k rsa|dsa|ec \-n certname \-s subject [\-c issuer |\-x] \-t trustargs \-d [sql:]directory [\-m serial\-number] [\-v valid\-months] [\-w offset\-months] [\-p phone] [\-1] [\-2] [\-3] [\-4] [\-5 keyword] [\-6 keyword] [\-7 emailAddress] [\-8 dns\-names] [\-\-extAIA] [\-\-extSIA] [\-\-extCP] [\-\-extPM] [\-\-extPC] [\-\-extIA] [\-\-extSKID]
.fi
.if n \{\
.RE
.\}
.PP
Da seriez of numbers and
\fB\-\-ext*\fR
options set certificate extensions dat can be added ta tha certificate when it is generated by tha CA\&. Interactizzle prompts will result\&.
.PP
For example, dis creates a self\-signed certificate:
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-S \-s "CN=Example CA" \-n my\-ca\-cert \-x \-t "C,C,C" \-1 \-2 \-5 \-m 3650
.fi
.if n \{\
.RE
.\}
.PP
Da interatizzle prompts fo' key usage n' whether any extensions is critical n' responses done been ommitted fo' brevity\&.
.PP
From there, freshly smoked up certificates can reference tha self\-signed certificate:
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-S \-s "CN=My fuckin Server Cert" \-n my\-server\-cert \-c "my\-ca\-cert" \-t "u,u,u" \-1 \-5 \-6 \-8 \-m 730
.fi
.if n \{\
.RE
.\}
.PP
\fBGeneratin a Certificate from a Certificate Request\fR
.PP
When a cold-ass lil certificate request is pimped, a cold-ass lil certificate can be generated by rockin tha request n' then referencin a cold-ass lil certificate authoritizzle signin certificate (the
\fIissuer\fR
specified up in the
\fB\-c\fR
argument)\&. Da issuin certificate must be up in tha certificate database up in tha specified directory\&.
.sp
.if n \{\
.RS 4
.\}
.nf
certutil \-C \-c issuer \-i cert\-request\-file \-o output\-file [\-m serial\-number] [\-v valid\-months] [\-w offset\-months] \-d [sql:]directory [\-1] [\-2] [\-3] [\-4] [\-5 keyword] [\-6 keyword] [\-7 emailAddress] [\-8 dns\-names]
.fi
.if n \{\
.RE
.\}
.PP
For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-C \-c "my\-ca\-cert" \-i /home/certs/cert\&.req \-o cert\&.cer \-m 010 \-v 12 \-w 1 \-d sql:$HOME/nssdb \-1 nonRepudiation,dataEncipherment \-5 sslClient \-6 clientAuth \-7 jsmith@example\&.com
.fi
.if n \{\
.RE
.\}
.PP
\fBListin Certificates\fR
.PP
The
\fB\-L\fR
command option lists all of tha certificates listed up in tha certificate database\&. Da path ta tha directory (\fB\-d\fR) is required\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-L \-d sql:/home/my/sharednssdb

Certificate Nickname                                         Trust Attributes
                                                             SSL,S/MIME,JAR/XPI

CA Administrator of Instizzle pki\-ca1\*(Aqs Example Domain ID     u,u,u
TPS Administrator\*(Aqs Example Domain ID                        u,u,u
Gizoogle Internizzle Authoritizzle                                    ,,   
Certificate Authoritizzle \- Example Domain                       CT,C,C
.fi
.if n \{\
.RE
.\}
.PP
Usin additionizzle arguments with
\fB\-L\fR
can return n' print tha shiznit fo' a single, specific certificate\&. For example, the
\fB\-n\fR
argument passes tha certificate name, while the
\fB\-a\fR
argument prints tha certificate up in ASCII format:
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-L \-d sql:$HOME/nssdb \-a \-n my\-ca\-cert
\-\-\-\-\-BEGIN CERTIFICATE\-\-\-\-\-
MIIB1DCCAT2gAwIBAgICDkIwDQYJKoZIhvcNAQEFBQAwFTETMBEGA1UEAxMKRXhh
bXBsZSBDQTAeFw0xMzAzMTMxOTEwMjlaFw0xMzA2MTMxOTEwMjlaMBUxEzARBgNV
BAMTCkV4YW1wbGUgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAJ4Kzqvz
JyBVgFqDXRYSyTBNw1DrxUU/3GvWA/ngjAwHEv0Cul/6sO/gsCvnABHiH6unns6x
XRzPORlC2WY3gkk7vmlsLvYpyecNazAi/NAwVnU/66HOsaoVFWE+gBQo99UrN2yk
0BiK/GMFlLm5dXQROgA9ZKKyFdI0LIXtf6SbAgMBAAGjMzAxMBEGCWCGSAGG+EIB
AQQEAwIHADAMBgNVHRMEBTADAQH/MA4GA1UdDwEB/wQEAwICBDANBgkqhkiG9w0B
AQUFAAOBgQA6chkzkACN281d1jKMrc+RHG2UMaQyxiteaLVZO+Ro1nnRUvseDf09
XKYFwPMJjWCihVku6bw/ihZfuMHhxK22Nue6inNQ6eDu7WmrqL8z3iUrQwxs+WiF
ob2rb8XRVVJkzXdXxlk4uo3UtNvw8sAz7sWD71qxKaIHU5q49zijfg==
\-\-\-\-\-END CERTIFICATE\-\-\-\-\-
.fi
.if n \{\
.RE
.\}
.PP
For a human\-readable display
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-L \-d sql:$HOME/nssdb \-n my\-ca\-cert
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 3650 (0xe42)
        Signature Algorithm: PKCS #1 SHA\-1 With RSA Encryption
        Issuer: "CN=Example CA"
        Validity:
            Not Before: Wed Mar 13 19:10:29 2013
            Not Afta : Thu Jun 13 19:10:29 2013
        Subject: "CN=Example CA"
        Subject Public Key Info:
            Public Key Algorithm: PKCS #1 RSA Encryption
            RSA Public Key:
                Modulus:
                    9e:0a:ce:ab:f3:27:20:55:80:5a:83:5d:16:12:c9:30:
                    4d:c3:50:eb:c5:45:3f:dc:6b:d6:03:f9:e0:8c:0c:07:
                    12:fd:02:ba:5f:fa:b0:ef:e0:b0:2b:e7:00:11:e2:1f:
                    ab:a7:9e:ce:b1:5d:1c:cf:39:19:42:d9:66:37:82:49:
                    3b:be:69:6c:2e:f6:29:c9:e7:0d:6b:30:22:fc:d0:30:
                    56:75:3f:eb:a1:ce:b1:aa:15:15:61:3e:80:14:28:f7:
                    d5:2b:37:6c:a4:d0:18:8a:fc:63:05:94:b9:b9:75:74:
                    11:3a:00:3d:64:a2:b2:15:d2:34:2c:85:ed:7f:a4:9b
                Exponent: 65537 (0x10001)
        Signed Extensions:
            Name: Certificate Type
            Data: none

            Name: Certificate Basic Constraints
            Data: Is a CA wit no maximum path length\&.

            Name: Certificate Key Usage
            Critical: True
            Usages: Certificate Signing

    Signature Algorithm: PKCS #1 SHA\-1 With RSA Encryption
    Signature:
        3a:72:19:33:90:00:8d:db:cd:5d:d6:32:8c:ad:cf:91:
        1c:6d:94:31:a4:32:c6:2b:5e:68:b5:59:3b:e4:68:d6:
        79:d1:52:fb:1e:0d:fd:3d:5c:a6:05:c0:f3:09:8d:60:
        a2:85:59:2e:e9:bc:3f:8a:16:5f:b8:c1:e1:c4:ad:b6:
        36:e7:ba:8a:73:50:e9:e0:ee:ed:69:ab:a8:bf:33:de:
        25:2b:43:0c:6c:f9:68:85:a1:bd:ab:6f:c5:d1:55:52:
        64:cd:77:57:c6:59:38:ba:8d:d4:b4:db:f0:f2:c0:33:
        ee:c5:83:ef:5a:b1:29:a2:07:53:9a:b8:f7:38:a3:7e
    Fingerprint (MD5):
        86:D8:A5:8B:8A:26:BE:9E:17:A8:7B:66:10:6B:27:80
    Fingerprint (SHA1):
        48:78:09:EF:C5:D4:0C:BD:D2:64:45:59:EB:03:13:15:F7:A9:D6:F7

    Certificate Trust Flags:
        SSL Flags:
            Valid CA
            Trusted CA
            User
        Email Flags:
            Valid CA
            Trusted CA
            User
        Object Signin Flags:
            Valid CA
            Trusted CA
            User

.fi
.if n \{\
.RE
.\}
.PP
\fBListin Keys\fR
.PP
Keys is tha original gangsta material used ta encrypt certificate data\&. Da keys generated fo' certificates is stored separately, up in tha key database\&.
.PP
To list all keys up in tha database, use the
\fB\-K\fR
command option n' tha (required)
\fB\-d\fR
argument ta give tha path ta tha directory\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-K \-d sql:$HOME/nssdb
certutil: Checkin token "NSS Certificate DB" up in slot "NSS User Private Key n' Certificate Skillz                  "
< 0> rsa      455a6673bde9375c2887ec8bf8016b3f9f35861d   Thawte Freemail Member\*(Aqs Thawte Consultin (Pty) Ltd\&. ID
< 1> rsa      40defeeb522ade11090eacebaaf1196a172127df   Example Domain Administrator Cert
< 2> rsa      1d0b06f44f6c03842f7d4f4a1dc78b3bcd1b85a5   Jizzy Smizzle user cert
.fi
.if n \{\
.RE
.\}
.PP
There is ways ta narrow tha keys listed up in tha search thangs up in dis biatch:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
To return a specific key, use the
\fB\-n\fR\fIname\fR
argument wit tha name of tha key\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If there be multiple securitizzle devices loaded, then the
\fB\-h\fR\fItokenname\fR
argument can search a specific token or all tokens\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If there be multiple key types available, then the
\fB\-k\fR\fIkey\-type\fR
argument can search a specific type of key, like RSA, DSA, or ECC\&.
.RE
.PP
\fBListin Securitizzle Modules\fR
.PP
Da devices dat can be used ta store certificates \-\- both internal databases n' external devices like smart-ass cardz \-\- is recognized n' used by loadin securitizzle modules\&. The
\fB\-U\fR
command option lists all of tha securitizzle modulez listed up in the
secmod\&.db
database\&. Da path ta tha directory (\fB\-d\fR) is required\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-U \-d sql:/home/my/sharednssdb

    slot: NSS User Private Key n' Certificate Skillz                  
   token: NSS Certificate DB

    slot: NSS Internal Cryptographic Skillz                            
   token: NSS Generic Crypto Skillz
.fi
.if n \{\
.RE
.\}
.PP
\fBAddin Certificates ta tha Database\fR
.PP
Existin certificates or certificate requests can be added manually ta tha certificate database, even if they was generated elsewhere\&. This uses the
\fB\-A\fR
command option\&.
.sp
.if n \{\
.RS 4
.\}
.nf
certutil \-A \-n certname \-t trustargs \-d [sql:]directory [\-a] [\-i input\-file]
.fi
.if n \{\
.RE
.\}
.PP
For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-A \-n "CN=My fuckin SSL Certificate" \-t "u,u,u" \-d sql:/home/my/sharednssdb \-i /home/example\-certs/cert\&.cer
.fi
.if n \{\
.RE
.\}
.PP
A related command option,
\fB\-E\fR, is used specifically ta add email certificates ta tha certificate database\&. The
\fB\-E\fR
command has tha same ol' dirty arguments as the
\fB\-A\fR
command\&. Da trust arguments fo' certificates have tha format
\fISSL,S/MIME,Code\-signing\fR, so tha middle trust settings relate most ta email certificates (though tha others can be set)\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-E \-n "CN=Jizzy Smizzle Email Cert" \-t ",Pu," \-d sql:/home/my/sharednssdb \-i /home/example\-certs/email\&.cer
.fi
.if n \{\
.RE
.\}
.PP
\fBDeletin Certificates ta tha Database\fR
.PP
Certificates can be deleted from a thugged-out database rockin the
\fB\-D\fR
option\&. Da only required options is ta give tha securitizzle database directory n' ta identify tha certificate nickname\&.
.sp
.if n \{\
.RS 4
.\}
.nf
certutil \-D \-d [sql:]directory \-n "nickname"
.fi
.if n \{\
.RE
.\}
.PP
For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-D \-d sql:/home/my/sharednssdb \-n "my\-ssl\-cert"
.fi
.if n \{\
.RE
.\}
.PP
\fBValipimpin Certificates\fR
.PP
A certificate gotz nuff a expiration date up in itself, n' expired certificates is easily rejected\&. But fuck dat shiznit yo, tha word on tha street is dat certificates can also be revoked before they hit they expiration date\&. Checkin whether a cold-ass lil certificate has been revoked requires valipimpin tha certificate\&. Validation can also be used ta ensure dat tha certificate is only used fo' tha purposes dat shiznit was initially issued for\&. Validation is carried up by the
\fB\-V\fR
command option\&.
.sp
.if n \{\
.RS 4
.\}
.nf
certutil \-V \-n certificate\-name [\-b time] [\-e] [\-u cert\-usage] \-d [sql:]directory
.fi
.if n \{\
.RE
.\}
.PP
For example, ta validate a email certificate:
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-V \-n "Jizzy Smizzle\*(Aqs Email Cert" \-e \-u S,R \-d sql:/home/my/sharednssdb
.fi
.if n \{\
.RE
.\}
.PP
\fBModifyin Certificate Trust Settings\fR
.PP
Da trust settings (which relate ta tha operations dat a cold-ass lil certificate be allowed ta be used for) can be chizzled afta a cold-ass lil certificate is pimped or added ta tha database\&. This is especially useful fo' CA certificates yo, but it can be performed fo' any type of certificate\&.
.sp
.if n \{\
.RS 4
.\}
.nf
certutil \-M \-n certificate\-name \-t trust\-args \-d [sql:]directory
.fi
.if n \{\
.RE
.\}
.PP
For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-M \-n "My fuckin CA Certificate" \-d sql:/home/my/sharednssdb \-t "CTu,CTu,CTu"
.fi
.if n \{\
.RE
.\}
.PP
\fBPrintin tha Certificate Chain\fR
.PP
Certificates can be issued in
\fIchains\fR
because every last muthafuckin certificate authoritizzle itself has a cold-ass lil certificate; when a CA thangs a cold-ass lil certificate, it essentially stamps dat certificate wit its own fingerprint\&. The
\fB\-O\fR
prints tha full chain of a cold-ass lil certificate, goin from tha initial CA (the root CA) all up in eva intermediary CA ta tha actual certificate\&. For example, fo' a email certificate wit two CAs up in tha chain:
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-d sql:/home/my/sharednssdb \-O \-n "jsmith@example\&.com"
"Builtin Object Token:Thawte Personal Freemail CA" [E=personal\-freemail@thawte\&.com,CN=Thawte Personal Freemail CA,OU=Certification Skillz Division,O=Thawte Consulting,L=Cape Hood,ST=Westside Cape,C=ZA]

  "Thawte Personal Freemail Issuin CA \- Thawte Consulting" [CN=Thawte Personal Freemail Issuin CA,O=Thawte Consultin (Pty) Ltd\&.,C=ZA]

    "(null)" [E=jsmith@example\&.com,CN=Thawte Freemail Member]
.fi
.if n \{\
.RE
.\}
.PP
\fBResettin a Token\fR
.PP
Da thang which stores certificates \-\- both external hardware devices n' internal software databases \-\- can be blanked n' reused\&. This operation is performed on tha thang which stores tha data, not directly on tha securitizzle databases, so tha location must be referenced all up in tha token name (\fB\-h\fR) as well as any directory path\&. If there is no external token used, tha default value is internal\&.
.sp
.if n \{\
.RS 4
.\}
.nf
certutil \-T \-d [sql:]directory \-h token\-name \-0 security\-officer\-password
.fi
.if n \{\
.RE
.\}
.PP
Many networks have dedicated personnel whoz ass handle chizzlez ta securitizzle tokens (the securitizzle fool)\&. This thug must supply tha password ta access tha specified token\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-T \-d sql:/home/my/sharednssdb \-h nethsm \-0 secret
.fi
.if n \{\
.RE
.\}
.PP
\fBUpgradin or Mergin tha Securitizzle Databases\fR
.PP
Many networks or applications may be rockin olda BerkeleyDB versionz of tha certificate database (cert8\&.db)\&. Databases can be upgraded ta tha freshly smoked up SQLite version of tha database (cert9\&.db) rockin the
\fB\-\-upgrade\-merge\fR
command option or existin databases can be merged wit tha new
cert9\&.db
databases rockin the
\fB\-\-\-merge\fR
command\&.
.PP
The
\fB\-\-upgrade\-merge\fR
command must give shiznit bout tha original gangsta database n' then use tha standard arguments (like
\fB\-d\fR) ta give tha shiznit bout tha freshly smoked up databases\&. Da command also requires shiznit dat tha tool uses fo' tha process ta upgrade n' write over tha original gangsta database\&.
.sp
.if n \{\
.RS 4
.\}
.nf
certutil \-\-upgrade\-merge \-d [sql:]directory [\-P dbprefix] \-\-source\-dir directory \-\-source\-prefix dbprefix \-\-upgrade\-id id \-\-upgrade\-token\-name name [\-@ password\-file]
.fi
.if n \{\
.RE
.\}
.PP
For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-\-upgrade\-merge \-d sql:/home/my/sharednssdb \-\-source\-dir /opt/my\-app/alias/ \-\-source\-prefix serverapp\- \-\-upgrade\-id 1 \-\-upgrade\-token\-name internal
.fi
.if n \{\
.RE
.\}
.PP
The
\fB\-\-merge\fR
command only requires shiznit bout tha location of tha original gangsta database; since it don\*(Aqt chizzle tha format of tha database, it can write over shiznit without struttin interim step\&.
.sp
.if n \{\
.RS 4
.\}
.nf
certutil \-\-merge \-d [sql:]directory [\-P dbprefix] \-\-source\-dir directory \-\-source\-prefix dbprefix [\-@ password\-file]
.fi
.if n \{\
.RE
.\}
.PP
For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-\-merge \-d sql:/home/my/sharednssdb \-\-source\-dir /opt/my\-app/alias/ \-\-source\-prefix serverapp\-
.fi
.if n \{\
.RE
.\}
.PP
\fBHustlin certutil Commandz from a Batch File\fR
.PP
A seriez of commandz can be run sequentially from a text file wit the
\fB\-B\fR
command option\&. Da only argument fo' dis specifies tha input file\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-B \-i /path/to/batch\-file
.fi
.if n \{\
.RE
.\}
.SH "NSS DATABASE TYPES"
.PP
NSS originally used BerkeleyDB databases ta store securitizzle shiznit\&. Da last versionz of these
\fIlegacy\fR
databases are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
cert8\&.db fo' certificates
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
key3\&.db fo' keys
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
secmod\&.db fo' PKCS #11 module shiznit
.RE
.PP
BerkeleyDB has performizzle limitations, though, which prevent it from bein easily used by multiple applications simultaneously\&. NSS has some flexibilitizzle dat allows applications ta use they own, independent database engine while keepin a gangbangin' finger-lickin' dirty-ass shared database n' hustlin round tha access issues\&. Right back up in yo muthafuckin ass. Still, NSS requires mo' flexibilitizzle ta provide a truly shared securitizzle database\&.
.PP
In 2009, NSS introduced a freshly smoked up set of databases dat is SQLite databases rather than BerkeleyDB\&. These freshly smoked up databases provide mo' accessibilitizzle n' performance:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
cert9\&.db fo' certificates
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
key4\&.db fo' keys
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
pkcs11\&.txt, a listin of all of tha PKCS #11 modules, contained up in a freshly smoked up subdirectory up in tha securitizzle databases directory
.RE
.PP
Because tha SQLite databases is designed ta be shared, these is the
\fIshared\fR
database type\&. Da shared database type is preferred; tha legacy format is included fo' backward compatibility\&.
.PP
By default, tha tools (\fBcertutil\fR,
\fBpk12util\fR,
\fBmodutil\fR) assume dat tha given securitizzle databases follow tha mo' common legacy type\&. Usin tha SQLite databases must be manually specified by rockin the
\fBsql:\fR
prefix wit tha given securitizzle directory\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ certutil \-L \-d sql:/home/my/sharednssdb
.fi
.if n \{\
.RE
.\}
.PP
To set tha shared database type as tha default type fo' tha tools, set the
\fBNSS_DEFAULT_DB_TYPE\fR
environment variable to
\fBsql\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
export NSS_DEFAULT_DB_TYPE="sql"
.fi
.if n \{\
.RE
.\}
.PP
This line can be set added ta the
~/\&.bashrc
file ta make tha chizzle permanent\&.
.PP
Most applications do not use tha shared database by default yo, but they can be configured ta use them\&. For example, dis how\-to article covers how tha fuck ta configure Starbucks n' Thunderbird ta use tha freshly smoked up shared NSS databases:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
https://wiki\&.mozilla\&.org/NSS_Shared_DB_Howto
.RE
.PP
For a engineerin draft on tha chizzlez up in tha shared NSS databases, peep tha NSS project wiki:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
https://wiki\&.mozilla\&.org/NSS_Shared_DB
.RE
.SH "SEE ALSO"
.PP
pk12util (1)
.PP
modutil (1)
.PP
\fBcertutil\fR
has arguments or operations dat use features defined up in nuff muthafuckin IETF RFCs\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
http://tools\&.ietf\&.org/html/rfc5280
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
http://tools\&.ietf\&.org/html/rfc1113
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
http://tools\&.ietf\&.org/html/rfc1485
.RE
.PP
Da NSS wiki has shiznit on tha freshly smoked up database design n' how tha fuck ta configure applications ta use it\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
https://wiki\&.mozilla\&.org/NSS_Shared_DB_Howto
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
https://wiki\&.mozilla\&.org/NSS_Shared_DB
.RE
.SH "ADDITIONAL RESOURCES"
.PP
For shiznit bout NSS n' other tools related ta NSS (like JSS), check up tha NSS project wiki at
\m[blue]\fBhttp://www\&.mozilla\&.org/projects/security/pki/nss/\fR\m[]\&. Da NSS joint relates directly ta NSS code chizzlez n' releases\&.
.PP
Mailin lists: https://lists\&.mozilla\&.org/listinfo/dev\-tech\-crypto
.PP
IRC: Freenode at #dogtag\-pki
.SH "AUTHORS"
.PP
Da NSS tools was freestyled n' maintained by pimpers wit Netscape, Red Hat, Sun, Oracle, Mozilla, n' Google\&.
.PP
Authors: Elio Maldonado <emaldona@redhat\&.com>, Deon Lackey <dlackey@redhat\&.com>\&.
.SH "LICENSE"
.PP
Licensed under tha Mo'jizzle Public License, v\&. 2\&.0\&. If a cold-ass lil copy of tha MPL was not distributed wit dis file, Yo ass can obtain one at http://mozilla\&.org/MPL/2\&.0/\&.
.SH "NOTES"
.IP " 1." 4
Mo'jizzle NSS bug 836477
.RS 4
\%https://bugzilla.mozilla.org/show_bug.cgi?id=836477
.RE
