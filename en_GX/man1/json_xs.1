.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "JSON_XS 1"
.TH JSON_XS 1 "2011-11-07" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
json_xs \- JSON::XS commandline utility
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   json_xs [\-v] [\-f inputformat] [\-t outputformat]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIjson_xs\fR converts between some input n' output formats (one of dem is
\&\s-1JSON\s0).
.PP
Da default input format is \f(CW\*(C`json\*(C'\fR n' tha default output format is
\&\f(CW\*(C`json\-pretty\*(C'\fR.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-v" 4
.IX Item "-v"
Be slightly mo' verbose.
.IP "\-f fromformat" 4
.IX Item "-f fromformat"
Read a gangbangin' file up in tha given format from \s-1STDIN.\s0
.Sp
\&\f(CW\*(C`fromformat\*(C'\fR can be one of:
.RS 4
.IP "json \- a json text encoded, either utf\-8, utf16\-be/le, utf32\-be/le" 4
.IX Item "json - a json text encoded, either utf-8, utf16-be/le, utf32-be/le"
.PD 0
.IP "storable \- a Storable frozen value" 4
.IX Item "storable - a Storable frozen value"
.IP "storable-file \- a Storable file (Storable has two incompatible formats)" 4
.IX Item "storable-file - a Storable file (Storable has two incompatible formats)"
.IP "bencode \- use Convert::Bencode, if available (used by torrent files, among others)" 4
.IX Item "bencode - use Convert::Bencode, if available (used by torrent files, among others)"
.IP "clzf \- Compress::LZF format (requires dat module ta be installed)" 4
.IX Item "clzf - Compress::LZF format (requires dat module ta be installed)"
.ie n .IP "eval \- evaluate tha given code as (non\-utf\-8) Perl, basically tha reverse of ""\-t dump""" 4
.el .IP "eval \- evaluate tha given code as (non\-utf\-8) Perl, basically tha reverse of ``\-t dump''" 4
.IX Item "eval - evaluate tha given code as (non-utf-8) Perl, basically tha reverse of -t dump"
.IP "yaml \- \s-1YAML \s0(avoid at all costs, requires tha \s-1YAML\s0 module :)" 4
.IX Item "yaml - YAML (avoid at all costs, requires tha YAML module :)"
.IP "strin \- do not attempt ta decode te file data" 4
.IX Item "strin - do not attempt ta decode te file data"
.ie n .IP "none \- not a god damn thang is read, creates a ""undef"" scalar \- mainly useful wit ""\-e""" 4
.el .IP "none \- not a god damn thang is read, creates a \f(CWundef\fR scalar \- mainly useful wit \f(CW\-e\fR" 4
.IX Item "none - not a god damn thang is read, creates a undef scalar - mainly useful wit -e"
.RE
.RS 4
.RE
.IP "\-t toformat" 4
.IX Item "-t toformat"
.PD
Write tha file up in tha given format ta \s-1STDOUT.\s0
.Sp
\&\f(CW\*(C`toformat\*(C'\fR can be one of:
.RS 4
.IP "json, json\-utf\-8 \- json, utf\-8 encoded" 4
.IX Item "json, json-utf-8 - json, utf-8 encoded"
.PD 0
.IP "json-pretty \- as above yo, but pretty-printed" 4
.IX Item "json-pretty - as above yo, but pretty-printed"
.IP "json\-utf\-16le, json\-utf\-16be \- lil endian/bangin' endian utf\-16" 4
.IX Item "json-utf-16le, json-utf-16be - lil endian/bangin' endian utf-16"
.IP "json\-utf\-32le, json\-utf\-32be \- lil endian/bangin' endian utf\-32" 4
.IX Item "json-utf-32le, json-utf-32be - lil endian/bangin' endian utf-32"
.IP "storable \- a Storable frozen value up in network format" 4
.IX Item "storable - a Storable frozen value up in network format"
.IP "storable-file \- a Storable file up in network format (Storable has two incompatible formats)" 4
.IX Item "storable-file - a Storable file up in network format (Storable has two incompatible formats)"
.IP "bencode \- use Convert::Bencode, if available (used by torrent files, among others)" 4
.IX Item "bencode - use Convert::Bencode, if available (used by torrent files, among others)"
.IP "clzf \- Compress::LZF format" 4
.IX Item "clzf - Compress::LZF format"
.IP "yaml \- \s-1YAML\s0" 4
.IX Item "yaml - YAML"
.IP "dump \- Data::Dump" 4
.IX Item "dump - Data::Dump"
.IP "dumper \- Data::Dumper" 4
.IX Item "dumper - Data::Dumper"
.IP "strin \- writes tha data up as if it was a string" 4
.IX Item "strin - writes tha data up as if it was a string"
.ie n .IP "none \- not a god damn thang gets written, mainly useful together wit ""\-e""" 4
.el .IP "none \- not a god damn thang gets written, mainly useful together wit \f(CW\-e\fR" 4
.IX Item "none - not a god damn thang gets written, mainly useful together wit -e"
.PD
Note dat Data::Dumper don't handle self-referential data structures
correctly \- use \*(L"dump\*(R" instead.
.RE
.RS 4
.RE
.IP "\-e code" 4
.IX Item "-e code"
Evaluate perl code afta readin tha data n' before freestylin it up again
\&\- can be used ta filter, create or extract data. Da data dat has been
written is up in \f(CW$_\fR, n' whatever is up in there is freestyled up afterwards.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 1
\&   json_xs \-t none <isitreally.json
.Ve
.PP
\&\*(L"\s-1JSON\s0 Lint\*(R" \- tries ta parse tha file \fIisitreally.json\fR as \s-1JSON \-\s0 if it
is valid \s-1JSON,\s0 tha command outputs nothing, otherwise it will print an
error message n' exit wit non-zero exit status.
.PP
.Vb 1
\&   <src.json json_xs >pretty.json
.Ve
.PP
Prettify tha \s-1JSON\s0 file \fIsrc.json\fR ta \fIdst.json\fR.
.PP
.Vb 1
\&   json_xs \-f storable\-file <file
.Ve
.PP
Read tha serialised Storable file \fIfile\fR n' print a human-readable \s-1JSON\s0
version of it ta \s-1STDOUT.\s0
.PP
.Vb 1
\&   json_xs \-f storable\-file \-t yaml <file
.Ve
.PP
Same as above yo, but write \s-1YAML\s0 instead (not rockin \s-1JSON\s0 at all :)
.PP
.Vb 1
\&   json_xs \-f none \-e \*(Aq$_ = [1, 2, 3]\*(Aq
.Ve
.PP
Dump tha perl array as \s-1UTF\-8\s0 encoded \s-1JSON\s0 text.
.PP
.Vb 1
\&   <torrentfile json_xs \-f bencode \-e \*(Aq$_ = join "\en", map @$_, @{$_\->{"announce\-list"}}\*(Aq \-t string
.Ve
.PP
Print tha tracker list inside a torrent file.
.PP
.Vb 1
\&   lwp\-request http://cpantesters.perl.org/show/JSON\-XS.json | json_xs
.Ve
.PP
Fetch tha cpan-testas result summary \f(CW\*(C`JSON::XS\*(C'\fR n' pretty-print dat shit.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (C) 2008 Marc Lehmann <json@schmorp.de>
