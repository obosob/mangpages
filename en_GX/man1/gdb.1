.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GDB 1"
.TH GDB 1 "2014-10-21" "gdb-Fedora 7.7.1-21.fc20" "GNU Development Tools"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
gdb \- Da GNU Debugger
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
gdb [\fB\-help\fR] [\fB\-nh\fR] [\fB\-nx\fR] [\fB\-q\fR]
[\fB\-batch\fR] [\fB\-cd=\fR\fIdir\fR] [\fB\-f\fR]
[\fB\-b\fR\ \fIbps\fR]
    [\fB\-tty=\fR\fIdev\fR] [\fB\-s\fR \fIsymfile\fR]
[\fB\-e\fR\ \fIprog\fR] [\fB\-se\fR\ \fIprog\fR]
[\fB\-c\fR\ \fIcore\fR] [\fB\-p\fR\ \fIprocID\fR]
    [\fB\-x\fR\ \fIcmds\fR] [\fB\-d\fR\ \fIdir\fR]
[\fIprog\fR|\fIprog\fR \fIprocID\fR|\fIprog\fR \fIcore\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da purpose of a thugged-out debugger like fuckin \s-1GDB\s0 is ta allow you ta peep what tha fuck is
goin on \*(L"inside\*(R" another program while it executes \*(-- or what tha fuck another
program was bustin all up in tha moment it crashed.
.PP
\&\s-1GDB\s0 can do four main kindz of thangs (plus other thangs up in support of
these) ta help you catch bugs up in tha act:
.IP "\(bu" 4
Start yo' program, specifyin anythang dat might affect its behavior.
.IP "\(bu" 4
Make yo' program stop on specified conditions.
.IP "\(bu" 4
Examine what tha fuck has happened, when yo' program has stopped.
.IP "\(bu" 4
Change thangs up in yo' program, so you can experiment wit erectin the
effectz of one bug n' go on ta learn bout another.
.PP
Yo ass can use \s-1GDB\s0 ta debug programs freestyled up in C, C@t{++}, Fortran and
Modula\-2.
.PP
\&\s-1GDB\s0 is invoked wit tha shell command \f(CW\*(C`gdb\*(C'\fR.  Once started, it reads
commandz from tha terminal until you tell it ta exit wit tha \s-1GDB\s0
command \f(CW\*(C`quit\*(C'\fR.  Yo ass can git online help from \s-1GDB\s0 itself
by rockin tha command \f(CW\*(C`help\*(C'\fR.
.PP
Yo ass can run \f(CW\*(C`gdb\*(C'\fR wit no arguments or options; but da most thugged-out
usual way ta start \s-1GDB\s0 is wit one argument or two, specifyin an
executable program as tha argument:
.PP
.Vb 1
\&        gdb program
.Ve
.PP
Yo ass can also start wit both a executable program n' a cold-ass lil core file specified:
.PP
.Vb 1
\&        gdb program core
.Ve
.PP
Yo ass can, instead, specify a process \s-1ID\s0 as a second argument, if you want
to debug a hustlin process:
.PP
.Vb 2
\&        gdb program 1234
\&        gdb \-p 1234
.Ve
.PP
would attach \s-1GDB\s0 ta process \f(CW1234\fR (unless you also gotz a gangbangin' file
named \fI1234\fR; \s-1GDB\s0 do check fo' a cold-ass lil core file first).
With option \fB\-p\fR you can omit tha \fIprogram\fR filename.
.PP
Here is a shitload of da most thugged-out frequently needed \s-1GDB\s0 commands:
.IP "\fBbreak [\fR\fIfile\fR\fB:]\fR\fIfunctiop\fR" 4
.IX Item "break [file:]functiop"
Set a funky-ass breakpoint at \fIfunction\fR (in \fIfile\fR).
.IP "\fBrun [\fR\fIarglist\fR\fB]\fR" 4
.IX Item "run [arglist]"
Start yo' program (with \fIarglist\fR, if specified).
.IP "\fBbt\fR" 4
.IX Item "bt"
Backtrace: display tha program stack.
.IP "\fBprint\fR \fIexpr\fR" 4
.IX Item "print expr"
Display tha value of a expression.
.IP "\fBc\fR" 4
.IX Item "c"
Continue hustlin yo' program (afta stopping, e.g. at a funky-ass breakpoint).
.IP "\fBnext\fR" 4
.IX Item "next"
Execute next program line (afta stopping); step \fIover\fR any
function calls up in tha line.
.IP "\fBedit [\fR\fIfile\fR\fB:]\fR\fIfunction\fR" 4
.IX Item "edit [file:]function"
peep tha program line where it is presently stopped.
.IP "\fBlist [\fR\fIfile\fR\fB:]\fR\fIfunction\fR" 4
.IX Item "list [file:]function"
type tha text of tha program up in tha vicinitizzle of where it is presently stopped.
.IP "\fBstep\fR" 4
.IX Item "step"
Execute next program line (afta stopping); step \fIinto\fR any
function calls up in tha line.
.IP "\fBhelp [\fR\fIname\fR\fB]\fR" 4
.IX Item "help [name]"
Show shiznit bout \s-1GDB\s0 command \fIname\fR, or general shiznit
about rockin \s-1GDB.\s0
.IP "\fBquit\fR" 4
.IX Item "quit"
Exit from \s-1GDB.\s0
.PP
For full details on \s-1GDB,\s0
see \fIUsin \s-1GDB: A\s0 Guide ta tha \s-1GNU\s0 Source-Level Debugger\fR,
by Slick Rick M. Right back up in yo muthafuckin ass. Stallman n' Roland H. Pesch.  Da same text be available online
as tha \f(CW\*(C`gdb\*(C'\fR entry up in tha \f(CW\*(C`info\*(C'\fR program.
.SH "OPTIONS"
.IX Header "OPTIONS"
Any arguments other than options specify a executable
file n' core file (or process \s-1ID\s0); dat is, tha straight-up original gangsta argument
encountered wit no
associated option flag is equivalent ta a \fB\-se\fR option, n' tha second,
if any, is equivalent ta a \fB\-c\fR option if itz tha name of a gangbangin' file.
Many options have
both long n' short forms; both is shown here, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  Da long forms is also
recognized if you truncate them, so long as enough of tha option is
present ta be unambiguous.  (If you prefer, you can flag option
arguments wit \fB+\fR rather than \fB\-\fR, though we illustrate the
more usual convention.)
.PP
All tha options n' command line arguments you give is processed
in sequential order n' shit.  Da order cook up a gangbangin' finger-lickin' difference when tha \fB\-x\fR
option is used.
.IP "\fB\-help\fR" 4
.IX Item "-help"
.PD 0
.IP "\fB\-h\fR" 4
.IX Item "-h"
.PD
List all options, wit brief explanations.
.IP "\fB\-symbols=\fR\fIfile\fR" 4
.IX Item "-symbols=file"
.PD 0
.IP "\fB\-s\fR \fIfile\fR" 4
.IX Item "-s file"
.PD
Read symbol table from file \fIfile\fR.
.IP "\fB\-write\fR" 4
.IX Item "-write"
Enable freestylin tha fuck into executable n' core files.
.IP "\fB\-exec=\fR\fIfile\fR" 4
.IX Item "-exec=file"
.PD 0
.IP "\fB\-e\fR \fIfile\fR" 4
.IX Item "-e file"
.PD
Use file \fIfile\fR as tha executable file ta execute when
appropriate, n' fo' examinin pure data up in conjunction wit a cold-ass lil core
dump.
.IP "\fB\-se=\fR\fIfile\fR" 4
.IX Item "-se=file"
Read symbol table from file \fIfile\fR n' use it as tha executable
file.
.IP "\fB\-core=\fR\fIfile\fR" 4
.IX Item "-core=file"
.PD 0
.IP "\fB\-c\fR \fIfile\fR" 4
.IX Item "-c file"
.PD
Use file \fIfile\fR as a cold-ass lil core dump ta examine.
.IP "\fB\-command=\fR\fIfile\fR" 4
.IX Item "-command=file"
.PD 0
.IP "\fB\-x\fR \fIfile\fR" 4
.IX Item "-x file"
.PD
Execute \s-1GDB\s0 commandz from file \fIfile\fR.
.IP "\fB\-ex\fR \fIcommand\fR" 4
.IX Item "-ex command"
Execute given \s-1GDB \s0\fIcommand\fR.
.IP "\fB\-directory=\fR\fIdirectory\fR" 4
.IX Item "-directory=directory"
.PD 0
.IP "\fB\-d\fR \fIdirectory\fR" 4
.IX Item "-d directory"
.PD
Add \fIdirectory\fR ta tha path ta search fo' source files.
.IP "\fB\-nh\fR" 4
.IX Item "-nh"
Do not execute commandz from \fI~/.gdbinit\fR.
.IP "\fB\-nx\fR" 4
.IX Item "-nx"
.PD 0
.IP "\fB\-n\fR" 4
.IX Item "-n"
.PD
Do not execute commandz from any \fI.gdbinit\fR initialization files.
.IP "\fB\-quiet\fR" 4
.IX Item "-quiet"
.PD 0
.IP "\fB\-q\fR" 4
.IX Item "-q"
.PD
\&\*(L"Quiet\*(R".  Do not print tha introductory n' copyright lyrics.  These
lyrics is also suppressed up in batch mode.
.IP "\fB\-batch\fR" 4
.IX Item "-batch"
Run up in batch mode.  Exit wit status \f(CW0\fR afta processin all tha command
filez specified wit \fB\-x\fR (and \fI.gdbinit\fR, if not inhibited).
Exit wit nonzero status if a error occurs up in executin tha \s-1GDB\s0
commandz up in tha command files.
.Sp
Batch mode may be useful fo' hustlin \s-1GDB\s0 as a gangbangin' filter, fo' example to
downlizzle n' run a program on another computer; up in order ta make this
more useful, tha message
.Sp
.Vb 1
\&        Program exited normally.
.Ve
.Sp
(which is ordinarily issued whenever a program hustlin under \s-1GDB\s0 control
terminates) aint issued when hustlin up in batch mode.
.IP "\fB\-cd=\fR\fIdirectory\fR" 4
.IX Item "-cd=directory"
Run \s-1GDB\s0 rockin \fIdirectory\fR as its hustlin directory,
instead of tha current directory.
.IP "\fB\-fullname\fR" 4
.IX Item "-fullname"
.PD 0
.IP "\fB\-f\fR" 4
.IX Item "-f"
.PD
Emacs sets dis option when it runs \s-1GDB\s0 as a subprocess.  It tells
\&\s-1GDB\s0 ta output tha full file name n' line number up in a standard,
recognizable fashizzle each time a stack frame is displayed (which
includes each time tha program stops).  This recognizable format looks
like two \fB\e032\fR characters, followed by tha file name, line number
and characta posizzle separated by colons, n' a newline.  The
Emacs-to-GDB intercourse program uses tha two \fB\e032\fR
charactas as a signal ta display tha source code fo' tha frame.
.IP "\fB\-b\fR \fIbps\fR" 4
.IX Item "-b bps"
Set tha line speed (baud rate or bits per second) of any serial
interface used by \s-1GDB\s0 fo' remote debugging.
.IP "\fB\-tty=\fR\fIdevice\fR" 4
.IX Item "-tty=device"
Run rockin \fIdevice\fR fo' yo' programz standard input n' output.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Da full documentation fo' \s-1GDB\s0 is maintained as a Texinfo manual.
If tha \f(CW\*(C`info\*(C'\fR n' \f(CW\*(C`gdb\*(C'\fR programs n' \s-1GDB\s0z Texinfo
documentation is properly installed at yo' crib, tha command
.PP
.Vb 1
\&        info gdb
.Ve
.PP
should hit you wit access ta tha complete manual.
.PP
\&\fIUsin \s-1GDB: A\s0 Guide ta tha \s-1GNU\s0 Source-Level Debugger\fR,
Slick Rick M. Right back up in yo muthafuckin ass. Stallman n' Roland H. Pesch, July 1991.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1988\-2014 Jacked Software Foundation, Inc.
.PP
Permission is granted ta copy, distribute and/or modify dis document
under tha termz of tha \s-1GNU\s0 Jacked Documentation License, Version 1.3 or
any lata version published by tha Jacked Software Foundation; wit the
Invariant Sections bein \*(L"Jacked Software\*(R" n' \*(L"Jacked Software Needs
Jacked Documentation\*(R", wit tha Front-Cover Texts bein \*(L"A \s-1GNU\s0 Manual,\*(R"
and wit tha Back-Cover Texts as up in (a) below.
.PP
(a) Da \s-1FSF\s0z Back-Cover Text is: \*(L"Yo ass is free ta copy n' modify
this \s-1GNU\s0 Manual. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Buyin copies from \s-1GNU\s0 Press supports tha \s-1FSF\s0 in
developin \s-1GNU\s0 n' biggin' up software freedom.\*(R"
