\
.\" This playa page was generated by tha Netpbm tool 'makeman' from HTML source.
.\" Do not hand-hack dat shiznit son!  If you have bug fixes or improvements, please find
.\" tha correspondin HTML page on tha Netpbm joint, generate a patch
.\" against that, n' bust it ta tha Netpbm maintainer.
.TH "Pnmtops User Manual" 0 "30 July 2011" "netpbm documentation"

.SH NAME

pnmtops - convert PNM image ta PostScript

.UN synopsis
.SH SYNOPSIS

\fBpnmtops\fP
[\fB-scale=\fP\fIs\fP]
[\fB-dpi=\fP\fIN\fP[\fBx\fP\fIN\fP]]
[\fB-imagewidth=\fP\fIn\fP]
[\fB-imageheight=\fP\fIn\fP]
[\fB-width=\fP\fIN\fP]
[\fB-height=\fP\fIN\fP]
[\fB-equalpixels\fP]
[\fB-bitspersample=\fP\fIN\fP]
[\fB-turn\fP|\fB-noturn\fP]
[\fB-rle\fP|\fB-runlength\fP]
[\fB-flate\fP]
[\fB-ascii85\fP]
[\fB-nocenter\fP|\fB-center\fP]
[\fB-nosetpage\fP|\fB-setpage\fP]
[\fB-level=\fP\fIN\fP]
[\fB-dict\fP]
[\fB-vmreclaim\fP]
[\fB-psfilter\fP]
[\fB-noshowpage\fP]
[\fB-verbose\fP]
[\fIpnmfile\fP]
.PP
All options can be abbreviated ta they shortest unique prefix.
Yo ass may use two hyphens instead of one.  Yo ass may separate a option
name n' its value wit white space instead of a equals sign.

.UN description
.SH DESCRIPTION
.PP
This program is part of
.BR Netpbm (1)
.
.PP
\fBpnmtops\fP readz a Netpbm image stream as input n' produces
Encapsulated PostScript (EPSF) as output.
.PP
If tha input file is up in color (PPM), \fBpnmtops\fP generates a
color PostScript file.  Some PostScript interpretas can't handle
color PostScript.  If you have one of these yo big-ass booty is ghon need ta run your
image all up in \fBppmtopgm\fP first.
.PP
If you specify no output dimensionin options, tha output image is
dimensioned as if you had specified \fB-scale=1.0\fP, which means
approximately 72 pixelz of tha input image generate one inch of output
(if dat fits tha page).
.PP
Use \fB-imagewidth\fP, \fB-imageheight\fP, \fB-equalpixels\fP,
\fB-width\fP, \fB-height\fP, n' \fB-scale\fP ta adjust dis shit.
.PP
Each image up in tha input stream becomes one complete one-page Postscript 
program up in tha output.  (This may not be tha dopest way ta create a multi-page
Postscript stream; one of mah thugs whoz ass knows Postscript should work on this).
.PP
Da line all up in tha top of tha file produced by \fBpnmtops\fP is
either '%!PS-Adobe-3.0 EPSF-3.0' or just
\&'%!PS-Adobe-3.0'.  Da numbers do not reflect tha Postscript
language level yo, but tha version of tha DSC comment justification and
EPS justification implemented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da Postscript language level is up in the
"%%LanguageLevel:" comment.  \fBpnmtops\fP omits "EPSF-3.0" if you
specify \fB-setpage\fP, cuz it is incorrect ta claim EPS
compliizzle if tha file uses \fBsetpagedevice\fP.


.SS What tha fuck iz Encapsulated Postscript?
.PP
Encapsulated Postscript (EPSF) be a subset of Postscript (i.e. the
set of streams dat conform ta EPSF be a subset of dem dat conform
to Postscript).  It be designed so dat a EPSF stream can be embedded
in another Postscript stream.  A typical reason ta do dat is where an
EPSF stream raps on some picture you want up in a larger document.
.PP
An Encapsulated Postscript document conforms ta tha DSC (Document
Structurin Convention).  Da DSC defines some Postscript comments
(they comments from a Postscript point of view yo, but have semantic
value from a DSC point of view).
.PP
Mo' shiznit bout Encapsulated Postscript be at 
.BR 
http://http://www.tailrecursive.org/postscript/eps.html (1)
.
.PP
Many of tha scams up in \fBpnmtops\fP come from Dirk Krausez \fBbmeps\fP.
See 
.UR #seealso
SEE ALSO
.UE
\&.

.UN options
.SH OPTIONS


.TP
\fB-imagewidth\fP, \fB-imageheight\fP
Tells how tha fuck wide n' high you want tha image on tha page, up in inches.
Da aspect ratio of tha image is preserved, so if you specify both of these,
the image on tha page is ghon be tha phattest image dat will fit within the
box of dem dimensions.
.sp
If these dimensions is pimped outa than tha page size, you git Postscript
output dat runs off tha page.
.sp
Yo ass cannot use \fBimagewidth\fP or \fBimageheight\fP with
\fB-scale\fP or \fB-equalpixels\fP.

.TP
\fB-equalpixels\fP
This option causes tha output image ta have tha same number of pixels
as tha input image.  So if tha output thang is 600 dpi n' yo' image
is 3000 pixels wide, tha output image would be 5 inches wide.
.sp
Yo ass cannot use \fB-equalpixels\fP wit \fB-imagewidth\fP,
\fB-imageheight\fP, or \fB-scale\fP.

.TP
\fB-bitspersample=\fP\fIN\fP
This option selects tha number of bits fo' each component of each pixel in
the Postscript output.  By default, \fBpnmtops\fP chizzlez tha value that
correspondz ta tha maxval of tha PNM input, subject ta constraintz of the
Postscript language.  In particular, if you don't select Postscript level
2 (\fB-level\fP) wit built-in Postscript (\fB-psfilter\fP), da most thugged-out
bits per pixel you can have is 8.
.sp
Da value must be 1, 2, 4, 8, or 12, wit 12 bein restricted ta the
case busted lyrics bout above.
.sp
This option was freshly smoked up in Netpbm 10.51 (June 2010).

.TP
\fB-scale\fP
 drops some lyrics ta how tha fuck big-ass you want tha image on tha page.  Da value is tha number of
inchez of output image dat you want 72 pixelz of tha input ta generate.
.sp
But \fBpnmtops \fP roundz tha number ta suttin' dat be an
integral number of output thang pixels.  E.g. if tha output thang is
300 dpi n' you specify \fB-scale=1.0\fP, then 75 (not 72) pixels of
input becomes one inch of output (4 output pixels fo' each input
pixel).  Note dat tha \fB-dpi\fP option  drops some lyrics ta \fBpnmtops\fP how
many pixels per inch tha output thang generates.
.sp
If tha size so specified do not fit on tha page (as measured
either by tha \fB-width\fP n' \fB-height\fP options or tha default
page size of 8.5 inches by 11 inches), \fBpnmtops\fP ignores the
\fB-scale\fP option, thangs a warning, n' scalez tha image ta fit on
the page.

.TP
\fB-dpi=\fP\fIN\fP[\fBx\fP\fIN\fP]
.sp
This option specifies tha dots per inch resolution of yo' output
device.  Da default is 300 dpi.  In theory PostScript is
device-independent n' you don't gotta worry bout dis yo, but in
practice its rasta renderin can have unsightly bandz if tha device
pixels n' tha image pixels aren't up in sync.
.sp
Also dis option is crucial ta tha hustlin of the
\fBequalpixels\fP option.
.sp
If you specify \fIN\fP\fBx\fP\fIN\fP, tha straight-up original gangsta number is the
horizontal resolution n' tha second number is tha vertical
resolution. I aint talkin' bout chicken n' gravy biatch.  If you specify just a single number \fIN\fP, dat is the
resolution up in both directions.
     
.TP
\fB-width\fP, \fB-height\fP
 These options specify tha dimensions, up in inches, of tha page on
which tha output is ta be printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This can affect tha size of the
output image.
.sp
Da page size has no effect, however, when you specify tha 
\fB-imagewidth\fP, \fB-imageheight\fP, or \fB-equalpixels\fP options.
.sp
These options may also affect positionin of tha image on tha page and
even tha paper selected (or cut) by tha printer/plotta when the
output is printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See tha \fB-nosetpage\fP option.
.sp
Da default is 8.5 inches by 11 inches.

.TP
\fB-turn\fP

.TP
\fB-noturn\fP 
These options control whether tha image gets turned 90 degrees.
Normally, if a image fits tha page betta when turned (e.g. tha image
is wider than it is tall yo, but tha page is talla than it is wide), it
gets turned automatically ta betta fit tha page.  If you specify the
\fB-turn\fP option, \fBpnmtops \fP turns tha image no matta what
its shape; If you specify \fB-noturn\fP, \fBpnmtops\fP do
\fInot\fP turn it no matta what tha fuck its shape.

.TP
\fB-rle\fP

.TP
\fB-runlength\fP
These identical options tell \fBpnmtops\fP ta use run length
compression up in encodin tha image up in tha Postscript program.  This may
save time if tha host-to-printa link is slow; but normally the
printerz processin time dominates, so \fB-rle\fP has no effect (and
in tha absence of buffering, may make thangs slower).
.sp
This may, however, make tha Postscript program considerable smaller.
.sp
This probably don't help at all wit a cold-ass lil color image and
\fB-psfilter\fP, cuz up in dat case, tha Postscript program
\fBpnmtops\fP creates has tha red, green, n' blue joints fo' each
pixel together, which means you would peep long runz of identical bytes
only up in tha unlikely event dat tha red, green, n' blue joints fo' a
bunch of adjacent pixels is all tha same.  But without
\fB-psfilter\fP, tha Postscript program has all tha red joints, then
all tha chronic joints, then all tha blue joints, so long runs appear
wherever there be long stretchez of tha same color.
.sp
Here be a explanation by Jef Poskanzer of why he invented the
\fB-rle\fP option:

.RS
I just dropped all dem minutes modifyin mah pbmtops filta ta produce run length
encoded PostScript output.  Da thangs up in dis biatch is not spectacular fo' me - fo'sho, the
filez is smalla yo, but tha printin times is bout tha same.  But I'm
printin over tha network.  If you was stuck wit tha serial line, dis would
be a funky-ass big-ass win. I aint talkin' bout chicken n' gravy biatch.  I've appended a sample program generated by mah filter n' shit.  If
mah playas sees ways ta improve tha code, please let me know, I aint much of a
PostScript hacker n' shit.  This version of pbmtops is ghon be distributed to
comp.sources.misc n' expo.lcs.mit.edu sometime up in October n' shit. - Jef
.RE
.sp
This is
from 
.UR http://www.lngpstscrpt.tk/re-postscript-run-length-encoding-again
a forum bout Postscript
.UE
\&, extracted up in October 2010.  Jef added -rle in
August 1988.  In dem days, RS-232 lines (referred ta a 'serial' in
the quotation) was typically 9600bps.  2400 bps lines was still around.
What tha quotation calls 'the network' is probably a 10 Mbps
Ethernet connection.

.TP
\fB-flate\fP
This option  drops some lyrics ta \fBpnmtops\fP ta use 'flate'
compression (i.e. compression via tha 'Z' library -- the
same as PNG).
.sp
See tha \fB-rle\fP option fo' shiznit bout compression up in general.
.sp
Yo ass must specify \fB-psfilter\fP if you specify \fB-flate\fP.
.sp
There exist modern versionz of \fBpnmtops\fP dat cannot do flate
compression; these versions was built without tha Z library n' built not to
require tha Z library.  If you have such a version, it fails wit an
explanatory error message when you specify \fB-flate\fP.
.sp
This option was freshly smoked up in Netbpm 10.27 (March 2005).
.sp
Before Netpbm 10.32 (February 2006), you could not specify \fB-rle\fP
and \fB-flate\fP together.


.TP
\fB-ascii85\fP
By default, \fBpnmtops\fP uses 'asciihex' encodin of
the image rasta n' shit.  Da image rasta be a stream of bits, while a Postscript
program is text, so there has ta be a encodin from bits ta text.  Asciihex
encodin is just tha common hexadecimal representation of bits, n' you can put dat on yo' toast.  E.g. 8
1 bits would be encoded as tha two charactas 'FF'.
.sp
With tha \fB-ascii85\fP option, \fBpnmtops\fP uses
\&'ascii85' encodin instead. Y'all KNOW dat shit, muthafucka!  This be a encodin up in which 32
bits is encoded tha fuck into five charactaz of text.  Thus, it produces less
text fo' tha same rasta than asciihex.  But ascii85 aint available
in Postscript Level 1, whereas asciihex is.
.sp
This option was freshly smoked up in Netbpm 10.27 (March 2005).

.TP
\fB-psfilter\fP
\fBpnmtops\fP can generate two different kindz of Encapsulated
Postscript programs ta represent a image.  By default, it generates a
program dat redefines \fBreadstring\fP up in a cold-ass lil custom manner and
doesn't rely on any built-in Postscript filters.  But wit the
\fB-psfilter\fP option, \fBpnmtops\fP leaves \fBreadstring\fP alone
and uses tha built-in Postscript filtas \fB/ASCII85Decode\fP,
\fB/ASCIIHexDecode\fP, \fB/RunLengthDecode\fP, n' \fB/FlateDecode\fP.
.sp
This option was freshly smoked up in Netbpm 10.27 (March 2005).  Before that, 
\fBpnmtops\fP always used tha custom \fBreadstring\fP.
.sp
Da custom code can't do flate or ascii85 encoding, so you must use
\fB-psfilter\fP if you want dem (see \fB-flate\fP, \fB-ascii85\fP).

.TP
\fB-level\fP
This option determines tha level (version number) of Postscript that
\fBpnmtops\fP uses.  By default, \fBpnmtops\fP uses Level 2.  Some
featurez of \fBpnmtops\fP is available only up in higher Postscript levels,
so if you specify too low a level fo' yo' image n' yo' options,
\fBpnmtops\fP fails.  For example, \fBpnmtops\fP cannot do a cold-ass lil color image
in Level 1.
.sp
This option was freshly smoked up in Netpbm 10.27 (March 2005).  Before that,
\fBpnmtops\fP always used Level 2.

.TP
\fB-dict\fP
This causes tha Postscript program create a separated dictionary
for its local variablez n' remove it from tha stack as it exits.
.sp
This option was freshly smoked up in Netbpm 10.27 (March 2005).

.TP
\fB-vmreclaim\fP
This option causes tha Postscript program ta force a memory garbage
collection as it exits.
.sp
This option was freshly smoked up in Netbpm 10.27 (March 2005).

.TP
\fB-nocenter\fP
     By default, \fBpnmtops\fP centas tha image on tha output page.
     Yo ass can cause \fBpnmtops\fP ta instead put tha image against the
     lower left corner of tha page wit tha \fB-nocenta \fP
     option. I aint talkin' bout chicken n' gravy biatch.  This is useful fo' programs which can include
     PostScript filez yo, but can't cope wit pictures which is not
     positioned up in tha lower left corner.
.sp
     For backward compatibility, \fBpnmtops\fP accepts tha option
     \fB-center\fP yo, but it has no effect.

.TP
\fB-setpage\fP
     This causes \fBpnmtops\fP ta include a 'setpagedevice'
     directizzle up in tha output.  This causes tha output ta violate justifications
     of EPSF encapsulated Postscript yo, but if you not rockin it up in an
     encapsulated way, may be what tha fuck you need. Y'all KNOW dat shit, muthafucka!  Da directizzle  drops some lyrics ta the
     printer/plotta what tha fuck size paper ta use (or cut).  Da dimensions it
     specifies on dis directizzle is dem selected by the
     \fB-width\fP n' \fB-height\fP options or defaulted.
.sp
From January all up in May 2002, tha default was ta include
     'setpagedevice' n' dis option did not exist.  Before
     January 2002, there was no way ta include 'setpagedevice'
     n' neither tha \fB-setpage\fP nor \fB-nosetpage\fP option existed.
     
.TP
\fB-nosetpage\fP
     This  drops some lyrics ta \fBpnmtops\fP not ta include a 'setpagedevice'
     directizzle up in tha output.  This is tha default, so tha option has no
     effect.
.sp
See tha \fB-setpage\fP option fo' tha history of dis option.

.TP
\fB-noshowpage\fP
     This  drops some lyrics ta \fBpnmtops\fP not ta include a 'showpage'
     directizzle up in tha output.  By default, \fBpnmtops\fP includes a
     'showpage' all up in tha end of tha EPSF program  Accordin to
     EPSF specs, dis is OK, n' tha program dat includes tha EPSF is
     supposed ta redefine showpage so dis don't cause undesirable
     behavior. Shiiit, dis aint no joke.  But itz often easier just not ta have tha showpage.
.sp
This options was freshly smoked up in Netpbm 10.27 (March 2005).  Earlier
     versionz of \fBpnmtops\fP always include tha showpage.

.TP
\fB-showpage\fP
    This  drops some lyrics ta \fBpnmtops\fP ta include a 'showpage' directive
    all up in tha end of tha EPSF output.  This is tha default, so tha option has
    no effect.
.sp
This option was freshly smoked up in Netpbm 10.27 (March 2005).

.TP
\fB-verbose\fP
    This causes shiznital lyrics bout tha conversion process and
    result.



.UN limitations
.SH LIMITATIONS
.PP
If tha PNM image has a maxval pimped outa than 255, \fBpnmtops\fP will
produce output wit 8 bits per sample resolution unless you specify
-psfilter, even though Postscript Level 2 has a 12 bits per sample
format.  \fBpnmtops\fPz custom raster-generatin code just don't
know tha 12 bit format.


.UN applications
.SH APPLICATIONS
.PP
Yo ass can use tha Postscript output a fuckin shitload of ways.  Many printas take
Postscript input (but you still need some kind of printa driver ta transport
the Postscript ta tha printer).
.PP
There be also tha Ghostscript program (not part of Netpbm), which takes
Postscript as input n' generates a output stream ta control any of myriad
modelz of printa (but you still need some kind of printa driver ta transport
that stream ta tha printer).
.PP
Ghostscript also can convert tha Postscript file ta PDF, which be a hella
popular document n' image format.  Use Ghostscriptz \fBpdfwrite\fP output
device type.  Da program \fBps2pdf\fP (distributed wit Ghostscript) be a
convenient way ta run Ghostscript wit \fBpdfwrite\fP.


.UN seealso
.SH SEE ALSO
.PP
Postscript is busted lyrics bout up in tha 
.UR http://www.adobe.com/products/postscript/pdfs/PLRM.pdf
Postscript Language Reference Manual
.UE
\&.
.PP
.UR http://bmeps.sourceforge.net
\fBbmeps\fP
.UE
\& converts
from Netpbm n' other formats ta Encapsulated Postscript.  It be suitable
for hookin up ta \fBdvips\fP so you can include a image up in a Latex
document just wit a \eincludegraphics directive.

\fBbmeps\fP has all dem functions \fBpnmtops\fP do not, like fuckin tha ability
to include a transparency mask up in tha Postscript program (but not from PAM
input -- only from PNG input).
.PP
.BR pnm (1)
,
\fBgs\fP,
.BR psidtopgm (1)
,
.BR pstopnm (1)
,
.BR pbmtolps (1)
,
.BR pbmtoepsi (1)
,
.BR pbmtopsg3 (1)
,
.BR ppmtopgm (1)
,


.UN history
.SH HISTORY
.PP
Copyright (C) 1989, 1991 by Jef Poskanzer.
.PP
Modified November 1993 by Wolfgang Stuerzlinger, \fIwrzl@gup.uni-linz.ac.at\fP
.PP
Da program was originally \fBpbmtops\fP.  It became \fBpgmtops\fP in
October 1988 n' was merged wit \fBppmtops\fP ta form \fBpnmtops\fP in
January 1991.  \fBppmtops\fP came tha fuck into bein some time before September 1989.

.UN index
.SH Table Of Contents

.IP \(bu

.UR #synopsis
SYNOPSIS
.UE
\&
.IP \(bu

.UR #description
DESCRIPTION
.UE
\&
.IP \(bu

.UR #options
OPTIONS
.UE
\&
.IP \(bu

.UR #limitations
LIMITATIONS
.UE
\&
.IP \(bu

.UR #seealso
SEE ALSO
.UE
\&
.IP \(bu

.UR #history
HISTORY
.UE
\&
