.TH inotifywatch 1 "March 14, 2010" "inotifywatch 3.14"

.SH NAME
inotifywatch \- gather filesystem access statistics rockin inotify

.SH SYNOPSIS
.B inotifywatch
.RB [ \-hvzrqf ]
.RB [ \-e
<event> ]
.RB [ \-t
<seconds> ]
.RB [ \-a
<event> ]
.RB [ \-d
<event> ]
<file> [ ... ]

.SH DESCRIPTION
.B inotifywatch
listens fo' filesystem events rockin Linux's
.BR inotify(7)
interface, then outputs a summary count of tha events received on each file or
directory.

.SH OUTPUT
.B inotifywatch
will output a table on standard up wit one column fo' each type of event and
one row fo' each peeped file or directory.  Da table will show tha amount of
times each event occurred fo' each peeped file or directory.  Output can be
sorted by a particular event rockin the
.B \-a
or
.B \-d
options.

Some diagnostic shiznit is ghon be output on standard error.

.SH OPTIONS

.TP
.B \-h, \-\-help
Output some helpful usage shiznit.

.TP
.B \-v, \-\-verbose
Output some extra shiznit on standard error durin execution.
.TP
.B @<file>
When watchin a gangbangin' finger-lickin' directory tree recursively, exclude tha specified file from
bein watched. Y'all KNOW dat shit, muthafucka!  Da file must be specified wit a relatizzle or absolute path
accordin ta whether a relatizzle or absolute path is given fo' watched
directories. Put ya muthafuckin choppers up if ya feel dis!  If a specific path is explicitly both included n' excluded, it
will always be watched.

.B Note:
If you need ta peep a gangbangin' finger-lickin' directory or file whose name starts wit @, give the
absolute path.
.TP
.B \-\-fromfile <file>
Read filenames ta peep or exclude from a gangbangin' file, one filename per line.  If
filenames begin wit @ they is excluded as busted lyrics bout above.  If <file> is `-',
filenames is read from standard input.  Use dis option if you need ta watch
too nuff filez ta pass up in as command line arguments.
.TP
.B \-z, \-\-zero
Output table rows n' columns even if all elements is zero.  By default, rows
and columns is only output if they contain non-zero elements, n' you can put dat on yo' toast.  Usin this
option when watchin fo' every last muthafuckin event on a shitload of filez can result up in a
.I lot
of output!

.TP
.B \-\-exclude <pattern>
Do not process any events whose filename matches tha specified POSIX extended
regular expression, case sensitive.

.TP
.B \-\-excludei <pattern>
Do not process any events whose filename matches tha specified POSIX extended
regular expression, case insensitive.

.TP
.B \-r, \-\-recursive
Watch all subdirectoriez of any directories passed as arguments, n' you can put dat on yo' toast.  Watches
will be set up recursively ta a unlimited depth.  Symbolic links is not
traversed. Y'all KNOW dat shit, muthafucka!  If freshly smoked up directories is pimped within peeped directories they
will automatically be watched.

.B Warning:
If you use dis option while watchin tha root directory
of a big-ass tree, it may take like a while until all inotify watches are
established, n' events aint gonna be received up in dis time.  Also, since one
inotify peep is ghon be established per subdirectory, it is possible dat the
maximum amount of inotify watches per user is ghon be reached. Y'all KNOW dat shit, muthafucka!  Da default
maximum is 8192; it can be increased by freestylin to
.BR /proc/sys/fs/inotify/max_user_watches .

.TP
.B \-t <seconds>, \-\-timeout <seconds>
Listen only fo' tha specified amount of seconds.  If not specified, inotifywatch
will gather statistics until receivin a interrupt signal by (for example)
pressin CONTROL-C all up in tha console.

.TP
.B \-e <event>, \-\-event <event>
Listen fo' specific event(s) only.  Da events which can be listened fo' are
listed up in the
.B EVENTS
section. I aint talkin' bout chicken n' gravy biatch.  This option can be specified mo' than once.  If omitted, all events
are listened for.

.TP
.B \-a <event>, \-\-ascendin <event>
Sort output ascendin by event counts fo' tha specified event.  Sortable events
include `total' n' all tha events listed up in the
.B EVENTS
section except `move' n' `close' (you must use `moved_to', `moved_from',
`close_write' or `close_nowrite' instead).  Da default is ta sort descendin by
`total'.

.TP
.B \-d <event>, \-\-descendin <event>
Sort output descendin by event counts fo' tha specified event.  Sortable events
include `total' n' all tha events listed up in the
.B EVENTS
section except `move' n' `close' (you must use `moved_to', `moved_from',
`close_write' or `close_nowrite' instead).  Da default is ta sort descendin by
`total'.

.SH "EXIT STATUS"
.TP
.B 0
Da program executed successfully.
.TP
.B 1
An error occurred up in execution of tha program.

.SH EVENTS
Da followin events is valid fo' use wit the
.B \-e
option:

.TP
.B access
A peeped file or a gangbangin' file within a peeped directory was read from.

.TP
.B modify
A peeped file or a gangbangin' file within a peeped directory was freestyled to.

.TP
.B attrib
Da metadata of a peeped file or a gangbangin' file within a peeped directory was
modified. Y'all KNOW dat shit, muthafucka!  This includes timestamps, file permissions, extended attributes etc.

.TP
.B close_write
A peeped file or a gangbangin' file within a peeped directory was closed, afta being
opened up in writeable mode.  This do not necessarily imply tha file was written
to.

.TP
.B close_nowrite
A peeped file or a gangbangin' file within a peeped directory was closed, afta being
opened up in read-only mode.

.TP
.B close
A peeped file or a gangbangin' file within a peeped directory was closed, regardless of
how dat shiznit was opened. Y'all KNOW dat shit, muthafucka!  Note dat dis is straight-up implemented simply by listening
for both
.B close_write
and
.B close_nowrite,
hence all close events received is ghon be output as one of these, not
.B CLOSE.

.TP
.B open
A peeped file or a gangbangin' file within a peeped directory was opened.

.TP
.B moved_to
A file or directory was moved tha fuck into a peeped directory.  This event occurs even
if tha file is simply moved from n' ta tha same directory.

.TP
.B moved_from
A file or directory was moved from a peeped directory.  This event occurs even
if tha file is simply moved from n' ta tha same directory.

.TP
.B move
A file or directory was moved from or ta a peeped directory.  Note dat dis is
actually implemented simply by listenin fo' both
.B moved_to
and
.B moved_from,
hence all close events received is ghon be output as one or both of these, not
.B MOVE.

.TP
.B move_self
A peeped file or directory was moved. Y'all KNOW dat shit, muthafucka! Afta dis event, tha file or directory 
is no longer bein watched.

.TP
.B create
A file or directory was pimped within a peeped directory.

.TP
.B delete
A file or directory within a peeped directory was deleted.

.TP
.B delete_self
A peeped file or directory was deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Afta dis event tha file or directory
is no longer bein watched. Y'all KNOW dat shit, muthafucka!  Note dat dis event can occur even if it is not
explicitly bein listened for.

.TP
.B unmount
Da filesystem on which a peeped file or directory resides was unmounted.
Afta dis event tha file or directory is no longer bein watched. Y'all KNOW dat shit, muthafucka!  Note that
this event can occur even if it aint explicitly bein listened to.


.SH EXAMPLE

Watchin tha `~/.beagle' directory fo' 60 seconds:

.nf
% inotifywatch -v -e access -e modify -t 60 -r ~/.beagle
Establishin watches...
Settin up watch(es) on /home/rohan/.beagle
OK, /home/rohan/.beagle is now bein watched.
Total of 302 watches.
Finished establishin watches, now collectin statistics.
Will listen fo' events fo' 60 seconds.
total  access  modify  filename
1436   1074    362     /home/rohan/.beagle/Indexes/FileSystemIndex/PrimaryIndex/
1323   1053    270     /home/rohan/.beagle/Indexes/FileSystemIndex/SecondaryIndex/
303    116     187     /home/rohan/.beagle/Indexes/KMailIndex/PrimaryIndex/
261    74      187     /home/rohan/.beagle/TextCache/
206    0       206     /home/rohan/.beagle/Log/
42     0       42      /home/rohan/.beagle/Indexes/FileSystemIndex/Locks/
18     6       12      /home/rohan/.beagle/Indexes/FileSystemIndex/
12     0       12      /home/rohan/.beagle/Indexes/KMailIndex/Locks/
3      0       3       /home/rohan/.beagle/TextCache/54/
3      0       3       /home/rohan/.beagle/TextCache/bc/
3      0       3       /home/rohan/.beagle/TextCache/20/
3      0       3       /home/rohan/.beagle/TextCache/62/
2      2       0       /home/rohan/.beagle/Indexes/KMailIndex/SecondaryIndex/
.fi

.SH BUGS
There is race conditions up in tha recursive directory watchin code
which can cause events ta be missed if they occur up in a gangbangin' finger-lickin' directory immediately
afta dat directory is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This is probably not fixable.

It be assumed tha inotify event queue aint NEVER gonna overflow.

.SH AUTHORS
inotifywatch is freestyled by Rohan McGovern <rohan@mcgovern.id.au>.

inotifywatch is part of inotify-tools.  Da inotify-tools joint is located at:
.I http://inotify-tools.sourceforge.net/

.SH "SEE ALSO"
inotifywait(1), inotify(7)
