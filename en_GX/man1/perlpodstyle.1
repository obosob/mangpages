.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLPODSTYLE 1"
.TH PERLPODSTYLE 1 "2010-10-11" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlpodstyle \- Perl POD steez guide
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These is general guidelines fo' how tha fuck ta write \s-1POD\s0 documentation fo' Perl
scripts n' modules, based on general guidelines fo' freestylin phat \s-1UNIX\s0 man
pages.  All of these guidelines are, of course, optionizzle yo, but following
them will make yo' documentation mo' consistent wit other documentation
on tha system.
.PP
Da name of tha program bein documented is conventionally freestyled up in bold
(usin B<>) wherever it occurs, as is all program options.
Arguments should be freestyled up in italics (I<>).  Function names are
traditionally freestyled up in italics; if you write a gangbangin' function as \fIfunction()\fR,
Pod::Man will take care of dis fo' yo thugged-out ass.  Literal code or commandz should
be up in C<>.  References ta other playa pages should be up in tha form
\&\f(CW\*(C`manpage(section)\*(C'\fR or \f(CW\*(C`L<manpage(section)>\*(C'\fR, n' Pod::Man will
automatically format dem appropriately.  Da second form, with
L<>, is used ta request dat a \s-1POD\s0 formatta cook up a link ta the
man page if possible.  As a exception, one normally omits tha section
when referrin ta module documentation since it aint clear what tha fuck section
module documentation is ghon be in; use \f(CW\*(C`L<Module::Name>\*(C'\fR fo' module
references instead.
.PP
References ta other programs or functions is normally up in tha form of man
page references so dat cross-referencin tools can provide tha user with
links n' tha like.  It aint nuthin but possible ta overdo this, though, so be careful not
to clutta yo' documentation wit too much markup.  References ta other
programs dat is not given as playa page references should be enclosed in
B<>.
.PP
Da major headaz should be set up rockin a \f(CW\*(C`=head1\*(C'\fR directive, n' are
historically freestyled up in tha rather startlin \s-1ALL UPPER CASE\s0 format; this
is not mandatory yo, but itz straight fuckin recommended so dat sections have
consistent namin across different software packages.  Minor headaz may
be included rockin \f(CW\*(C`=head2\*(C'\fR, n' is typically up in mixed case.
.PP
Da standard sectionz of a manual page are:
.IP "\s-1NAME\s0" 4
.IX Item "NAME"
Mandatory section; should be a cold-ass lil comma-separated list of programs or
functions documented by dis \s-1POD\s0 page, such as:
.Sp
.Vb 1
\&    foo, bar \- programs ta do something
.Ve
.Sp
Manual page indexers is often mad picky bout tha format of this
section, so don't put anythang up in it except dis line.  Every program or
function documented by dis \s-1POD\s0 page should be listed, separated by a
comma n' a space.  For a Perl module, just give tha module name.  A
single dash, n' only a single dash, should separate tha list of programs
or functions from tha description. I aint talkin' bout chicken n' gravy biatch.  Do not use any markup such as
C<> or B<> anywhere up in dis line.  Functions should not be
qualified wit \f(CW\*(C`()\*(C'\fR or tha like.  Da description should ideally fit on a
single line, even if a playa program replaces tha dash wit all dem tabs.
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
A short usage summary fo' programs n' functions.  This section is
mandatory fo' section 3 pages.  For Perl module documentation, it's
usually convenient ta have tha contentz of dis section be a verbatim
block showin some (brief) examplez of typical ways tha module is used.
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
Extended description n' rap of tha program or functions, or the
body of tha documentation fo' playa pages dat document suttin' else.  If
particularly long, itz a phat scam ta break dis up tha fuck into subsections
\&\f(CW\*(C`=head2\*(C'\fR directives like:
.Sp
.Vb 1
\&    =head2 Normal Usage
\&
\&    =head2 Advanced Features
\&
\&    =head2 Freestylin Configuration Files
.Ve
.Sp
or whatever be appropriate fo' yo' documentation.
.Sp
For a module, dis is generally where tha documentation of tha intercourses
provided by tha module goes, probably up in tha form of a list wit an
\&\f(CW\*(C`=item\*(C'\fR fo' each intercourse.  Dependin on how tha fuck nuff intercourses there are,
you may wanna put dat documentation up in separate \s-1METHODS, FUNCTIONS,
CLASS METHODS,\s0 or \s-1INSTANCE METHODS\s0 sections instead n' save the
\&\s-1DESCRIPTION\s0 section fo' a overview.
.IP "\s-1OPTIONS\s0" 4
.IX Item "OPTIONS"
Detailed description of each of tha command-line options taken by the
program.  This should be separate from tha description fo' tha use of
parsers like Pod::Usage.  This is normally presented as a list, with
each option as a separate \f(CW\*(C`=item\*(C'\fR.  Da specific option strang should be
enclosed up in B<>.  Any joints dat tha option takes should be
enclosed up in I<>.  For example, tha section fo' tha option
\&\fB\-\-section\fR=\fImanext\fR would be introduced with:
.Sp
.Vb 1
\&    =item B<\-\-section>=I<manext>
.Ve
.Sp
Synonymous options (like both tha short n' long forms) is separated by a
comma n' a space on tha same \f(CW\*(C`=item\*(C'\fR line, or optionally listed as their
own item wit a reference ta tha canonical name.  For example, since
\&\fB\-\-section\fR can also be freestyled as \fB\-s\fR, tha above would be:
.Sp
.Vb 1
\&    =item B<\-s> I<manext>, B<\-\-section>=I<manext>
.Ve
.Sp
Freestylin tha short option first is recommended cuz itz easier ta read.
Da long option is long enough ta draw tha eye ta it anyway n' tha short
option can otherwise git lost up in visual noise.
.IP "\s-1RETURN VALUE\s0" 4
.IX Item "RETURN VALUE"
What tha program or function returns, if successful naaahhmean?  This section can be
omitted fo' programs whose precise exit codes aren't blingin, provided
they return 0 on success n' non-zero on failure as is standard. Y'all KNOW dat shit, muthafucka!  It
should always be present fo' functions.  For modules, it may be useful to
summarize return joints from tha module intercourse here, or it may be more
useful ta say shit bout return joints separately up in tha documentation of each
function or method tha module provides.
.IP "\s-1ERRORS\s0" 4
.IX Item "ERRORS"
Exceptions, error return codes, exit statuses, n' errno settings.
Typically used fo' function or module documentation; program documentation
uses \s-1DIAGNOSTICS\s0 instead. Y'all KNOW dat shit, muthafucka!  Da general rule of thumb is dat errors
printed ta \f(CW\*(C`STDOUT\*(C'\fR or \f(CW\*(C`STDERR\*(C'\fR n' intended fo' tha end user are
documented up in \s-1DIAGNOSTICS\s0 while errors passed internal ta tha calling
program n' intended fo' other programmers is documented up in \s-1ERRORS. \s0 When
documentin a gangbangin' function dat sets errno, a gangbangin' full list of tha possible errno
values should be given here.
.IP "\s-1DIAGNOSTICS\s0" 4
.IX Item "DIAGNOSTICS"
All possible lyrics tha program can print up n' what tha fuck they mean. I aint talkin' bout chicken n' gravy biatch.  You
may wish ta follow tha same documentation steez as tha Perl documentation;
see \fIperldiag\fR\|(1) fo' mo' details (and peep tha \s-1POD\s0 source as well).
.Sp
If applicable, please include details on what tha fuck tha user should do to
correct tha error; documentin a error as indicatin \*(L"the input buffer is
too small\*(R" without spittin some lyrics ta tha user how tha fuck ta increase tha size of tha input
buffer (or at least spittin some lyrics ta dem dat it aint possible) aren't hella
useful.
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
Give some example usez of tha program or function. I aint talkin' bout chicken n' gravy biatch.  Don't skimp; users
often find dis da most thugged-out useful part of tha documentation. I aint talkin' bout chicken n' gravy biatch.  Da examples
are generally given as verbatim paragraphs.
.Sp
Don't just present a example without explainin what tha fuck it do.  Addin a
short paragraph sayin what tha fuck tha example will do can increase tha value of
the example immensely.
.IP "\s-1ENVIRONMENT\s0" 4
.IX Item "ENVIRONMENT"
Environment variablez dat tha program cares about, normally presented as
a list rockin \f(CW\*(C`=over\*(C'\fR, \f(CW\*(C`=item\*(C'\fR, n' \f(CW\*(C`=back\*(C'\fR.  For example:
.Sp
.Vb 1
\&    =over 6
\&
\&    =item HOME
\&
\&    Used ta determine tha user\*(Aqs home directory.  F<.foorc> up in this
\&    directory is read fo' configuration details, if it exists.
\&
\&    =back
.Ve
.Sp
Since environment variablez is normally up in all uppercase, no additional
special formattin is generally needed; they glarin enough as it is.
.IP "\s-1FILES\s0" 4
.IX Item "FILES"
All filez used by tha program or function, normally presented as a list,
and what tha fuck it uses dem for. Shiiit, dis aint no joke.  File names should be enclosed up in F<>.
It aint nuthin but particularly blingin ta document filez dat is ghon be potentially
modified.
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
Things ta take special care with, sometimes called \s-1WARNINGS.\s0
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
Things dat is fucked up or just don't work like right.
.IP "\s-1RESTRICTIONS\s0" 4
.IX Item "RESTRICTIONS"
Bugs you don't plan ta fix.  :\-)
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
Miscellaneous commentary.
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
Dum diddy-dum, here I come biaaatch! Who tha fuck freestyled it (use \s-1AUTHORS\s0 fo' multiple people).  It aint nuthin but a phat scam to
include yo' current e\-mail address (or some e\-mail address ta which bug
reports should be sent) or some other contact shiznit so dat users
have a way of contactin yo thugged-out ass.  Remember dat program documentation tends
to roam tha wild fo' far longer than you expect n' pick a cold-ass lil contact method
thatz likely ta last.
.IP "\s-1HISTORY\s0" 4
.IX Item "HISTORY"
Programs derived from other sources sometimes have all dis bullshit.  Some playas keep
a modification log here yo, but dat probably gets long n' is normally better
maintained up in a separate file.
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
For copyright
.Sp
.Vb 1
\&    Copyright YEAR(s) YOUR NAME(s)
.Ve
.Sp
(Fuck dat shit, (C) aint needed. Y'all KNOW dat shit, muthafucka!  Fuck dat shit, \*(L"all muthafuckin rights reserved\*(R" aint needed.)
.Sp
For licensin tha easiest way is ta use tha same licensin as Perl itself:
.Sp
.Vb 2
\&    This library is free software; you may redistribute it and/or modify
\&    it under tha same terms as Perl itself.
.Ve
.Sp
This make it easy as fuck  fo' playas ta use yo' module wit Perl.  Note that
this licensin example is neither a endorsement or a requirement, yo ass is
of course free ta chizzle any licensing.
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
Other playa pages ta check out, like \fIman\fR\|(1), \fIman\fR\|(7), \fImakewhatis\fR\|(8), or
\&\fIcatman\fR\|(8).  Normally a simple list of playa pages separated by commas, or a
paragraph givin tha name of a reference work.  Man page references, if
they use tha standard \f(CW\*(C`name(section)\*(C'\fR form, don't gotta be enclosed in
L<> (although itz recommended) yo, but other thangs up in dis section
probably should be when appropriate.
.Sp
If tha package has a mailin list, include a \s-1URL\s0 or subscription
instructions here.
.Sp
If tha package has a wizzy crib, include a \s-1URL\s0 here.
.PP
Documentation of object-oriented libraries or modulez may wanna use
\&\s-1CONSTRUCTORS\s0 n' \s-1METHODS\s0 sections, or \s-1CLASS METHODS\s0 n' \s-1INSTANCE METHODS\s0
sections, fo' detailed documentation of tha partz of tha library n' save
the \s-1DESCRIPTION\s0 section fo' a overview.  Big-Ass modulez wit a gangbangin' function
interface may wanna use \s-1FUNCTIONS\s0 fo' similar reasons.  Some playas use
\&\s-1OVERVIEW\s0 ta summarize tha description if itz like long.
.PP
Section orderin varies, although \s-1NAME\s0 must always be tha straight-up original gangsta section
(yo dirty ass is gonna break some playa page systems otherwise), n' \s-1NAME, SYNOPSIS,
DESCRIPTION,\s0 n' \s-1OPTIONS\s0 generally always occur first n' up in dat order if
present.  In general, \s-1SEE ALSO, AUTHOR,\s0 n' similar material should be
left fo' last.  Some systems also move \s-1WARNINGS\s0 n' \s-1NOTES\s0 ta last.  The
order given above should be reasonable fo' most purposes.
.PP
Some systems use \s-1CONFORMING TO\s0 ta note conformizzle ta relevant standards
and MT-LEVEL ta note safenizz fo' use up in threaded programs or signal
handlezs.  These headings is primarily useful when documentin partz of a
C library.
.PP
Finally, as a general note, try not ta use a excessive amount of markup.
As documented here n' up in Pod::Man, you can safely leave Perl
variables, function names, playa page references, n' tha like unadorned by
markup n' tha \s-1POD\s0 translators will figure it up fo' yo thugged-out ass.  This make it
much easier ta lata edit tha documentation. I aint talkin' bout chicken n' gravy biatch.  Note dat nuff existing
translators will do tha wack thang wit e\-mail addresses when wrapped in
L<>, so don't do dis shit.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
For additionizzle shiznit dat may be mo' accurate fo' yo' specific
system, peep either \fIman\fR\|(5) or \fIman\fR\|(7) dependin on yo' system manual
section numberin conventions.
.PP
This documentation is maintained as part of tha podlators distribution.
Da current version be always available from its wizzy joint at
<http://www.eyrie.org/~eagle/software/podlators/>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Russ Allbery <rra@stanford.edu>, wit big-ass portionz of dis documentation
taken from tha documentation of tha original gangsta \fBpod2man\fR implementation by
Larry Wall n' Tomothy Christiansen.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 1999, 2000, 2001, 2004, 2006, 2008, 2010 Russ Allbery
<rra@stanford.edu>.
.PP
This documentation is free software; you may redistribute it and/or modify
it under tha same terms as Perl itself.
