.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "S_SERVER 1"
.TH S_SERVER 1 "2015-01-13" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
s_server \- SSL/TLS server program
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBopenssl\fR \fBs_server\fR
[\fB\-accept port\fR]
[\fB\-context id\fR]
[\fB\-verify depth\fR]
[\fB\-Verify depth\fR]
[\fB\-crl_check\fR]
[\fB\-crl_check_all\fR]
[\fB\-cert filename\fR]
[\fB\-certform DER|PEM\fR]
[\fB\-key keyfile\fR]
[\fB\-keyform DER|PEM\fR]
[\fB\-pass arg\fR]
[\fB\-dcert filename\fR]
[\fB\-dcertform DER|PEM\fR]
[\fB\-dkey keyfile\fR]
[\fB\-dkeyform DER|PEM\fR]
[\fB\-dpass arg\fR]
[\fB\-dhparam filename\fR]
[\fB\-nbio\fR]
[\fB\-nbio_test\fR]
[\fB\-crlf\fR]
[\fB\-debug\fR]
[\fB\-msg\fR]
[\fB\-state\fR]
[\fB\-CApath directory\fR]
[\fB\-CAfile filename\fR]
[\fB\-trusted_first\fR]
[\fB\-nocert\fR]
[\fB\-cipher cipherlist\fR]
[\fB\-quiet\fR]
[\fB\-no_tmp_rsa\fR]
[\fB\-ssl2\fR]
[\fB\-ssl3\fR]
[\fB\-tls1\fR]
[\fB\-tls1_1\fR]
[\fB\-tls1_2\fR]
[\fB\-dtls1\fR]
[\fB\-no_ssl2\fR]
[\fB\-no_ssl3\fR]
[\fB\-no_tls1\fR]
[\fB\-no_tls1_1\fR]
[\fB\-no_tls1_2\fR]
[\fB\-no_dhe\fR]
[\fB\-no_ecdhe\fR]
[\fB\-bugs\fR]
[\fB\-hack\fR]
[\fB\-www\fR]
[\fB\-WWW\fR]
[\fB\-HTTP\fR]
[\fB\-engine id\fR]
[\fB\-tlsextdebug\fR]
[\fB\-no_ticket\fR]
[\fB\-id_prefix arg\fR]
[\fB\-rand file(s)\fR]
[\fB\-nextprotoneg protocols\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \fBs_server\fR command implements a generic \s-1SSL/TLS\s0 server which listens
for connections on a given port rockin \s-1SSL/TLS.\s0
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-accept port\fR" 4
.IX Item "-accept port"
the \s-1TCP\s0 port ta listen on fo' connections. If not specified 4433 is used.
.IP "\fB\-context id\fR" 4
.IX Item "-context id"
sets tha \s-1SSL\s0 context id. Y'all KNOW dat shit, muthafucka! Well shiiiit, it can be given any strang value. If dis option
is not present a thugged-out default value is ghon be used.
.IP "\fB\-cert certname\fR" 4
.IX Item "-cert certname"
Da certificate ta use, most servers cipher suites require tha use of a
certificate n' some require a cold-ass lil certificate wit a cold-ass lil certain hood key type:
for example tha \s-1DSS\s0 cipher suites require a cold-ass lil certificate containin a \s-1DSS
\&\s0(\s-1DSA\s0) key. If not specified then tha filename \*(L"server.pem\*(R" is ghon be used.
.IP "\fB\-certform format\fR" 4
.IX Item "-certform format"
Da certificate format ta use: \s-1DER\s0 or \s-1PEM. PEM\s0 is tha default.
.IP "\fB\-key keyfile\fR" 4
.IX Item "-key keyfile"
Da private key ta use. If not specified then tha certificate file will
be used.
.IP "\fB\-keyform format\fR" 4
.IX Item "-keyform format"
Da private format ta use: \s-1DER\s0 or \s-1PEM. PEM\s0 is tha default.
.IP "\fB\-pass arg\fR" 4
.IX Item "-pass arg"
the private key password source. For mo' shiznit bout tha format of \fBarg\fR
see tha \fB\s-1PASS PHRASE ARGUMENTS\s0\fR section up in \fIopenssl\fR\|(1).
.IP "\fB\-dcert filename\fR, \fB\-dkey keyname\fR" 4
.IX Item "-dcert filename, -dkey keyname"
specify a additionizzle certificate n' private key, these behave up in the
same manner as tha \fB\-cert\fR n' \fB\-key\fR options except there is no default
if they is not specified (no additionizzle certificate n' key is used) fo' realz. As
noted above some cipher suites require a cold-ass lil certificate containin a key of
a certain type. Right back up in yo muthafuckin ass. Some cipher suites need a cold-ass lil certificate carryin a \s-1RSA\s0 key
and some a \s-1DSS \s0(\s-1DSA\s0) key. By rockin \s-1RSA\s0 n' \s-1DSS\s0 certificates n' keys
a server can support clients which only support \s-1RSA\s0 or \s-1DSS\s0 cipher suites
by rockin a appropriate certificate.
.IP "\fB\-dcertform format\fR, \fB\-dkeyform format\fR, \fB\-dpass arg\fR" 4
.IX Item "-dcertform format, -dkeyform format, -dpass arg"
addtionizzle certificate n' private key format n' passphrase respectively.
.IP "\fB\-nocert\fR" 4
.IX Item "-nocert"
if dis option is set then no certificate is used. Y'all KNOW dat shit, muthafucka! This restricts the
cipher suites available ta tha anonymous ones (currently just anonymous
\&\s-1DH\s0).
.IP "\fB\-dhparam filename\fR" 4
.IX Item "-dhparam filename"
the \s-1DH\s0 parameta file ta use. Da ephemeral \s-1DH\s0 cipher suites generate keys
usin a set of \s-1DH\s0 parameters. If not specified then a attempt is made to
load tha parametas from tha server certificate file. If dis fails then
a static set of parametas hard coded tha fuck into tha s_server program is ghon be used.
.IP "\fB\-no_dhe\fR" 4
.IX Item "-no_dhe"
if dis option is set then no \s-1DH\s0 parametas is ghon be loaded effectively
disablin tha ephemeral \s-1DH\s0 cipher suites.
.IP "\fB\-no_ecdhe\fR" 4
.IX Item "-no_ecdhe"
if dis option is set then ephemeral \s-1ECDH\s0 cipher suites is ghon be disabled.
.IP "\fB\-no_tmp_rsa\fR" 4
.IX Item "-no_tmp_rsa"
certain export cipher suites sometimes bust a temporary \s-1RSA\s0 key, dis option
disablez temporary \s-1RSA\s0 key generation.
.IP "\fB\-verify depth\fR, \fB\-Verify depth\fR" 4
.IX Item "-verify depth, -Verify depth"
Da verify depth ta use. This specifies tha maximum length of the
client certificate chain n' make tha server request a cold-ass lil certificate from
the client. With tha \fB\-verify\fR option a cold-ass lil certificate be axed but the
client do not gotta bust one, wit tha \fB\-Verify\fR option tha client
must supply a cold-ass lil certificate or a error occurs.
.IP "\fB\-crl_check\fR, \fB\-crl_check_all\fR" 4
.IX Item "-crl_check, -crl_check_all"
Peep tha peer certificate has not been revoked by its \s-1CA.\s0
Da \s-1CRL\s0(s) is appended ta tha certificate file. With tha \fB\-crl_check_all\fR
option all CRLz of all CAs up in tha chain is checked.
.IP "\fB\-CApath directory\fR" 4
.IX Item "-CApath directory"
Da directory ta use fo' client certificate verification. I aint talkin' bout chicken n' gravy biatch. This directory
must be up in \*(L"hash format\*(R", peep \fBverify\fR fo' mo' shiznit. I aint talkin' bout chicken n' gravy biatch. These are
also used when buildin tha server certificate chain.
.IP "\fB\-CAfile file\fR" 4
.IX Item "-CAfile file"
A file containin trusted certificates ta use durin client authentication
and ta use when attemptin ta build tha server certificate chain. I aint talkin' bout chicken n' gravy biatch. Da list
is also used up in tha list of aaight client CAs passed ta tha client when
a certificate is requested.
.IP "\fB\-trusted_first\fR" 4
.IX Item "-trusted_first"
Use certificates up in \s-1CA\s0 file or \s-1CA\s0 directory before other certificates 
when buildin tha trust chain ta verify client certificates.
This is mainly useful up in environments wit Bridge \s-1CA\s0 or Cross-Certified CAs.
.IP "\fB\-state\fR" 4
.IX Item "-state"
prints up tha \s-1SSL\s0 session states.
.IP "\fB\-debug\fR" 4
.IX Item "-debug"
print extensive debuggin shiznit includin a hex dump of all traffic.
.IP "\fB\-msg\fR" 4
.IX Item "-msg"
show all protocol lyrics wit hex dump.
.IP "\fB\-nbio_test\fR" 4
.IX Item "-nbio_test"
tests non blockin I/O
.IP "\fB\-nbio\fR" 4
.IX Item "-nbio"
turns on non blockin I/O
.IP "\fB\-crlf\fR" 4
.IX Item "-crlf"
this option translated a line feed from tha terminal tha fuck into \s-1CR+LF.\s0
.IP "\fB\-quiet\fR" 4
.IX Item "-quiet"
inhibit printin of session n' certificate shiznit.
.IP "\fB\-psk_hint hint\fR" 4
.IX Item "-psk_hint hint"
Use tha \s-1PSK\s0 identitizzle hint \fBhint\fR when rockin a \s-1PSK\s0 cipher suite.
.IP "\fB\-psk key\fR" 4
.IX Item "-psk key"
Use tha \s-1PSK\s0 key \fBkey\fR when rockin a \s-1PSK\s0 cipher suite. Da key is
given as a hexadecimal number without leadin 0x, fo' example \-psk
1a2b3c4d.
.IP "\fB\-ssl2\fR, \fB\-ssl3\fR, \fB\-tls1\fR, \fB\-tls1_1\fR, \fB\-tls1_2\fR, \fB\-dtls1\fR, \fB\-no_ssl2\fR, \fB\-no_ssl3\fR, \fB\-no_tls1\fR, \fB\-no_tls1_1\fR, \fB\-no_tls1_2\fR" 4
.IX Item "-ssl2, -ssl3, -tls1, -tls1_1, -tls1_2, -dtls1, -no_ssl2, -no_ssl3, -no_tls1, -no_tls1_1, -no_tls1_2"
these options disable tha use of certain \s-1SSL\s0 or \s-1TLS\s0 protocols. By default
the initial handshake uses a method which should be compatible wit all
servers n' permit dem ta use \s-1SSL\s0 v3, \s-1SSL\s0 v2 or \s-1TLS\s0 as appropriate.
.IP "\fB\-bugs\fR" 4
.IX Item "-bugs"
there is nuff muthafuckin known bug up in \s-1SSL\s0 n' \s-1TLS\s0 implementations fo' realz. Addin this
option enablez various workarounds.
.IP "\fB\-hack\fR" 4
.IX Item "-hack"
this option enablez a gangbangin' further workaround fo' some some early Netscape
\&\s-1SSL\s0 code (?).
.IP "\fB\-cipher cipherlist\fR" 4
.IX Item "-cipher cipherlist"
this allows tha cipher list used by tha server ta be modified. Y'all KNOW dat shit, muthafucka!  When
the client sendz a list of supported ciphers tha straight-up original gangsta client cipher
also included up in tha server list is used. Y'all KNOW dat shit, muthafucka! Because tha client specifies
the preference order, tha order of tha server cipherlist irrelevant. Right back up in yo muthafuckin ass. See
the \fBciphers\fR command fo' mo' shiznit.
.IP "\fB\-tlsextdebug\fR" 4
.IX Item "-tlsextdebug"
print up a hex dump of any \s-1TLS\s0 extensions received from tha server.
.IP "\fB\-no_ticket\fR" 4
.IX Item "-no_ticket"
disable RFC4507bis session ticket support.
.IP "\fB\-www\fR" 4
.IX Item "-www"
sendz a status message back ta tha client when it connects, n' you can put dat on yo' toast. This includes
lotz of shiznit bout tha ciphers used n' various session parameters.
Da output is up in \s-1HTML\s0 format so dis option will normally be used wit a
web browser.
.IP "\fB\-WWW\fR" 4
.IX Item "-WWW"
emulates a simple wizzy server n' shit. Pages is ghon be resolved relatizzle ta the
current directory, fo' example if tha \s-1URL\s0 https://myhost/page.html is
axed tha file ./page.html is ghon be loaded.
.IP "\fB\-HTTP\fR" 4
.IX Item "-HTTP"
emulates a simple wizzy server n' shit. Pages is ghon be resolved relatizzle ta the
current directory, fo' example if tha \s-1URL\s0 https://myhost/page.html is
axed tha file ./page.html is ghon be loaded. Y'all KNOW dat shit, muthafucka! Da filez loaded are
assumed ta contain a cold-ass lil complete n' erect \s-1HTTP\s0 response (lines that
are part of tha \s-1HTTP\s0 response line n' headaz must end wit \s-1CRLF\s0).
.IP "\fB\-engine id\fR" 4
.IX Item "-engine id"
specifyin a engine (by its unique \fBid\fR string) will cause \fBs_server\fR
to attempt ta obtain a gangbangin' functionizzle reference ta tha specified engine,
thus initialisin it if needed. Y'all KNOW dat shit, muthafucka! Da engine will then be set as tha default
for all available algorithms.
.IP "\fB\-id_prefix arg\fR" 4
.IX Item "-id_prefix arg"
generate \s-1SSL/TLS\s0 session IDs prefixed by \fBarg\fR. This is mostly useful
for testin any \s-1SSL/TLS\s0 code (eg. proxies) dat wish ta deal wit multiple
servers, when each of which might be generatin a unique range of session
IDs (eg. wit a cold-ass lil certain prefix).
.IP "\fB\-rand file(s)\fR" 4
.IX Item "-rand file(s)"
a file or filez containin random data used ta seed tha random number
generator, or a \s-1EGD\s0 socket (see \fIRAND_egd\fR\|(3)).
Multiple filez can be specified separated by a OS-dependent character.
Da separator is \fB;\fR fo' MS-Windows, \fB,\fR fo' OpenVMS, n' \fB:\fR for
all others.
.IP "\fB\-nextprotoneg protocols\fR" 4
.IX Item "-nextprotoneg protocols"
enable Next Protocol Negotiation \s-1TLS\s0 extension n' provide a
comma-separated list of supported protocol names.
Da list should contain most wanted protocols first.
Protocol names is printable \s-1ASCII\s0 strings, fo' example \*(L"http/1.1\*(R" or
\&\*(L"spdy/3\*(R".
.SH "CONNECTED COMMANDS"
.IX Header "CONNECTED COMMANDS"
If a cold-ass lil connection request is established wit a \s-1SSL\s0 client n' neither the
\&\fB\-www\fR nor tha \fB\-WWW\fR option has been used then normally any data received
from tha client is displayed n' any key presses is ghon be busted ta tha client.
.PP
Certain single letta commandz is also recognized which big-ass up special
operations: these is listed below.
.IP "\fBq\fR" 4
.IX Item "q"
end tha current \s-1SSL\s0 connection but still accept freshly smoked up connections.
.IP "\fBQ\fR" 4
.IX Item "Q"
end tha current \s-1SSL\s0 connection n' exit.
.IP "\fBr\fR" 4
.IX Item "r"
renegotiate tha \s-1SSL\s0 session.
.IP "\fBR\fR" 4
.IX Item "R"
renegotiate tha \s-1SSL\s0 session n' request a cold-ass lil client certificate.
.IP "\fBP\fR" 4
.IX Item "P"
send some plain text down tha underlyin \s-1TCP\s0 connection: dis should
cause tha client ta disconnect cuz of a protocol violation.
.IP "\fBS\fR" 4
.IX Item "S"
print up some session cache status shiznit.
.SH "NOTES"
.IX Header "NOTES"
\&\fBs_server\fR can be used ta debug \s-1SSL\s0 clients, n' you can put dat on yo' toast. To accept connections from
a wizzy browser tha command:
.PP
.Vb 1
\& openssl s_server \-accept 443 \-www
.Ve
.PP
can be used fo' example.
.PP
Most wizzy browsers (in particular Netscape n' \s-1MSIE\s0) only support \s-1RSA\s0 cipher
suites, so they cannot connect ta servers which don't bust a cold-ass lil certificate
carryin a \s-1RSA\s0 key or a version of OpenSSL wit \s-1RSA\s0 disabled.
.PP
Although specifyin a empty list of CAs when requestin a cold-ass lil client certificate
is strictly bustin lyrics a protocol violation, some \s-1SSL\s0 clients interpret dis to
mean any \s-1CA\s0 be acceptable. This is useful fo' debuggin purposes.
.PP
Da session parametas can printed up rockin tha \fBsess_id\fR program.
.SH "BUGS"
.IX Header "BUGS"
Because dis program has a shitload of options n' also cuz some of
the steez used is rather old, tha C source of s_server is rather
hard ta read n' not a model of how tha fuck thangs should be done fo' realz. A typical
\&\s-1SSL\s0 server program would be much simpler.
.PP
Da output of common ciphers is wrong: it just gives tha list of ciphers that
OpenSSL recognizes n' tha client supports.
.PP
There should be a way fo' tha \fBs_server\fR program ta print up detailz of any
unknown cipher suites a cold-ass lil client say it supports.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIsess_id\fR\|(1), \fIs_client\fR\|(1), \fIciphers\fR\|(1)
