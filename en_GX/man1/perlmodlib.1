.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMODLIB 1"
.TH PERLMODLIB 1 "2014-10-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmodlib \- constructin freshly smoked up Perl modulez n' findin existin ones
.SH "THE PERL MODULE LIBRARY"
.IX Header "THE PERL MODULE LIBRARY"
Many modulez is included up in tha Perl distribution. I aint talkin' bout chicken n' gravy biatch.  These is busted lyrics about
below, n' all end up in \fI.pm\fR.  Yo ass may discover compiled library
filez (usually endin up in \fI.so\fR) or lil' small-ass piecez of modulez ta be
autoloaded (endin up in \fI.al\fR); these was automatically generated
by tha installation process.  Yo ass may also discover filez up in the
library directory dat end up in either \fI.pl\fR or \fI.ph\fR.  These are
old libraries supplied so dat oldschool programs dat use dem still
run. I aint talkin' bout chicken n' gravy biatch.  Da \fI.pl\fR filez will all eventually be converted tha fuck into standard
modules, n' tha \fI.ph\fR filez made by \fBh2ph\fR will probably end up
as extension modulez made by \fBh2xs\fR.  (Some \fI.ph\fR joints may
already be available all up in tha \s-1POSIX,\s0 Errno, or Fcntl modules.)
Da \fBpl2pm\fR file up in tha distribution may help up in yo' conversion,
but itz just a mechanical process n' therefore far from cap-proof.
.SS "Pragmatic Modules"
.IX Subsection "Pragmatic Modules"
They work somewhat like compila directives (pragmata) up in dat they
tend ta affect tha compilation of yo' program, n' thus will usually
work well only when used within a \f(CW\*(C`use\*(C'\fR, or \f(CW\*(C`no\*(C'\fR.  Most of these
are lexically scoped, so a inner \s-1BLOCK\s0 may countermand them
by saying:
.PP
.Vb 3
\&    no integer;
\&    no strict \*(Aqrefs\*(Aq;
\&    no warnings;
.Ve
.PP
which lasts until tha end of dat \s-1BLOCK.\s0
.PP
Some pragmas is lexically scoped\*(--typically dem dat affect the
\&\f(CW$^H\fR hints variable.  Others affect tha current package instead,
like \f(CW\*(C`use vars\*(C'\fR n' \f(CW\*(C`use subs\*(C'\fR, which allow you ta predeclare a
variablez or subroutines within a particular \fIfile\fR rather than
just a funky-ass block.  Such declarations is effectizzle fo' tha entire file
for which they was declared. Y'all KNOW dat shit, muthafucka!  Yo ass cannot rescind dem wit \f(CW\*(C`no
vars\*(C'\fR or \f(CW\*(C`no subs\*(C'\fR.
.PP
Da followin pragmas is defined (and have they own documentation).
.IP "arybase" 12
.IX Item "arybase"
Set indexin base via $[
.IP "attributes" 12
.IX Item "attributes"
Get/set subroutine or variable attributes
.IP "autodie" 12
.IX Item "autodie"
Replace functions wit ones dat succeed or take a thugged-out dirtnap wit lexical scope
.IP "autodie::exception" 12
.IX Item "autodie::exception"
Exceptions from autodyin functions.
.IP "autodie::exception::system" 12
.IX Item "autodie::exception::system"
Exceptions from autodyin \fIsystem()\fR.
.IP "autodie::hints" 12
.IX Item "autodie::hints"
Provide hints bout user subroutines ta autodie
.IP "autouse" 12
.IX Item "autouse"
Postpone load of modulez until a gangbangin' function is used
.IP "base" 12
.IX Item "base"
Establish a \s-1ISA\s0 relationshizzle wit base classes at compile time
.IP "bigint" 12
.IX Item "bigint"
Transparent BigInteger support fo' Perl
.IP "bignum" 12
.IX Item "bignum"
Transparent BigNumber support fo' Perl
.IP "bigrat" 12
.IX Item "bigrat"
Transparent BigNumber/BigRationizzle support fo' Perl
.IP "blib" 12
.IX Item "blib"
Use MakeMakerz uninstalled version of a package
.IP "bytes" 12
.IX Item "bytes"
Force byte semantics rather than characta semantics
.IP "charnames" 12
.IX Item "charnames"
Access ta Unicode characta names n' named characta sequences; also define characta names
.IP "constant" 12
.IX Item "constant"
Declare constants
.IP "deprecate" 12
.IX Item "deprecate"
Perl pragma fo' deprecatin tha core version of a module
.IP "diagnostics" 12
.IX Item "diagnostics"
Produce verbose warnin diagnostics
.IP "encoding" 12
.IX Item "encoding"
Allows you ta write yo' script up in non-ascii or non\-utf8
.IP "encoding::warnings" 12
.IX Item "encoding::warnings"
Warn on implicit encodin conversions
.IP "feature" 12
.IX Item "feature"
Enable freshly smoked up features
.IP "fields" 12
.IX Item "fields"
Compile-time class fields
.IP "filetest" 12
.IX Item "filetest"
Control tha filetest permission operators
.IP "if" 12
.IX Item "if"
\&\f(CW\*(C`use\*(C'\fR a Perl module if a cold-ass lil condizzle holds
.IP "inc::latest" 12
.IX Item "inc::latest"
Use modulez bundled up in inc/ if they is newer than installed ones
.IP "integer" 12
.IX Item "integer"
Use integer arithmetic instead of floatin point
.IP "less" 12
.IX Item "less"
Request less of something
.IP "lib" 12
.IX Item "lib"
Manipulate \f(CW@INC\fR at compile time
.IP "locale" 12
.IX Item "locale"
Use or avoid \s-1POSIX\s0 localez fo' built-in operations
.IP "mro" 12
.IX Item "mro"
Method Resolution Order
.IP "open" 12
.IX Item "open"
Set default PerlIO layers fo' input n' output
.IP "ops" 12
.IX Item "ops"
Restrict unsafe operations when compiling
.IP "overload" 12
.IX Item "overload"
Package fo' overloadin Perl operations
.IP "overloading" 12
.IX Item "overloading"
Lexically control overloading
.IP "parent" 12
.IX Item "parent"
Establish a \s-1ISA\s0 relationshizzle wit base classes at compile time
.IP "perldoc" 12
.IX Item "perldoc"
Look up Perl documentation up in Pod format.
.IP "perlfaq" 12
.IX Item "perlfaq"
Frequently axed thangs bout Perl
.IP "perlfaq1" 12
.IX Item "perlfaq1"
General Thangs Bout Perl
.IP "perlfaq2" 12
.IX Item "perlfaq2"
Obtainin n' Learnin bout Perl
.IP "perlfaq3" 12
.IX Item "perlfaq3"
Programmin Tools
.IP "perlfaq4" 12
.IX Item "perlfaq4"
Data Manipulation
.IP "perlfaq5" 12
.IX Item "perlfaq5"
Filez n' Formats
.IP "perlfaq6" 12
.IX Item "perlfaq6"
Regular Expressions
.IP "perlfaq7" 12
.IX Item "perlfaq7"
General Perl Language Issues
.IP "perlfaq8" 12
.IX Item "perlfaq8"
System Interaction
.IP "perlfaq9" 12
.IX Item "perlfaq9"
Web, Email n' Networking
.IP "perlfunc" 12
.IX Item "perlfunc"
Perl builtin functions
.IP "perlglossary" 12
.IX Item "perlglossary"
Perl Glossary
.IP "perlpodspeccopy" 12
.IX Item "perlpodspeccopy"
Plain Oldskool Documentation: format justification n' notes
.IP "perlvarcopy" 12
.IX Item "perlvarcopy"
Perl predefined variables
.IP "perlxs" 12
.IX Item "perlxs"
\&\s-1XS\s0 language reference manual
.IP "perlxstut" 12
.IX Item "perlxstut"
Tutorial fo' freestylin XSUBs
.IP "perlxstypemap" 12
.IX Item "perlxstypemap"
Perl \s-1XS\s0 C/Perl type mapping
.IP "re" 12
.IX Item "re"
Alta regular expression behaviour
.IP "sigtrap" 12
.IX Item "sigtrap"
Enable simple signal handling
.IP "sort" 12
.IX Item "sort"
Control \fIsort()\fR behaviour
.IP "strict" 12
.IX Item "strict"
Restrict unsafe constructs
.IP "subs" 12
.IX Item "subs"
Predeclare sub names
.IP "threads" 12
.IX Item "threads"
Perl interpreter-based threads
.IP "threads::shared" 12
.IX Item "threads::shared"
Perl extension fo' pluggin data structures between threads
.IP "utf8" 12
.IX Item "utf8"
Enable/disable \s-1UTF\-8 \s0(or UTF-EBCDIC) up in source code
.IP "vars" 12
.IX Item "vars"
Predeclare global variable names
.IP "version" 12
.IX Item "version"
Perl extension fo' Version Objects
.IP "vmsish" 12
.IX Item "vmsish"
Control VMS-specific language features
.IP "warnings" 12
.IX Item "warnings"
Control optionizzle warnings
.IP "warnings::register" 12
.IX Item "warnings::register"
Warnings import function
.SS "Standard Modules"
.IX Subsection "Standard Modules"
Standard, bundled modulez is all sposed ta fuckin behave up in a well-defined
manner wit respect ta namespace bullshit cuz they use the
Exporta module.  See they own documentation fo' details.
.PP
It aint nuthin but possible dat not all modulez listed below is installed on your
system. For example, tha GDBM_File module aint gonna be installed if you
don't have tha gdbm library.
.IP "AnyDBM_File" 12
.IX Item "AnyDBM_File"
Provide framework fo' multiple DBMs
.IP "App::Cpan" 12
.IX Item "App::Cpan"
Easily interact wit \s-1CPAN\s0 from tha command line
.IP "App::Prove" 12
.IX Item "App::Prove"
Implements tha \f(CW\*(C`prove\*(C'\fR command.
.IP "App::Prove::State" 12
.IX Item "App::Prove::State"
State storage fo' tha \f(CW\*(C`prove\*(C'\fR command.
.IP "App::Prove::State::Result" 12
.IX Item "App::Prove::State::Result"
Individual test suite thangs up in dis biatch.
.IP "App::Prove::State::Result::Test" 12
.IX Item "App::Prove::State::Result::Test"
Individual test thangs up in dis biatch.
.IP "Archive::Extract" 12
.IX Item "Archive::Extract"
A generic archive extractin mechanism
.IP "Archive::Tar" 12
.IX Item "Archive::Tar"
Module fo' manipulationz of tar archives
.IP "Archive::Tar::File" 12
.IX Item "Archive::Tar::File"
A subclass fo' in-memory extracted file from Archive::Tar
.IP "Attribute::Handlezs" 12
.IX Item "Attribute::Handlezs"
Simpla definizzle of attribute handlezs
.IP "AutoLoader" 12
.IX Item "AutoLoader"
Load subroutines only on demand
.IP "AutoSplit" 12
.IX Item "AutoSplit"
Split a package fo' autoloading
.IP "B" 12
.IX Item "B"
Da Perl Compila Backend
.IP "B::Concise" 12
.IX Item "B::Concise"
Walk Perl syntax tree, printin concise info bout ops
.IP "B::Debug" 12
.IX Item "B::Debug"
Walk Perl syntax tree, printin debug info bout ops
.IP "B::Deparse" 12
.IX Item "B::Deparse"
Perl compila backend ta produce perl code
.IP "B::Lint" 12
.IX Item "B::Lint"
Perl lint
.IP "B::Lint::Debug" 12
.IX Item "B::Lint::Debug"
Addz debuggin stringification ta B::
.IP "B::Showlex" 12
.IX Item "B::Showlex"
Show lexical variablez used up in functions or files
.IP "B::Terse" 12
.IX Item "B::Terse"
Walk Perl syntax tree, printin terse info bout ops
.IP "B::Xref" 12
.IX Item "B::Xref"
Generates cross reference reports fo' Perl programs
.IP "Benchmark" 12
.IX Item "Benchmark"
Benchmark hustlin timez of Perl code
.ie n .IP """Socket""" 12
.el .IP "\f(CWSocket\fR" 12
.IX Item "Socket"
Networkin constants n' support functions
.IP "\s-1CGI\s0" 12
.IX Item "CGI"
Handle Common Gateway Interface requests n' responses
.IP "CGI::Apache" 12
.IX Item "CGI::Apache"
Backward compatibilitizzle module fo' \s-1CGI\s0.pm
.IP "CGI::Carp" 12
.IX Item "CGI::Carp"
\&\s-1CGI\s0 routines fo' freestylin ta tha \s-1HTTPD \s0(or other) error log
.IP "CGI::Cookie" 12
.IX Item "CGI::Cookie"
Interface ta \s-1HTTP\s0 Cookies
.IP "CGI::Fast" 12
.IX Item "CGI::Fast"
\&\s-1CGI\s0 Interface fo' Fast \s-1CGI\s0
.IP "CGI::Pretty" 12
.IX Item "CGI::Pretty"
Module ta produce sickly formatted \s-1HTML\s0 code
.IP "CGI::Push" 12
.IX Item "CGI::Push"
Simple Interface ta Server Push
.IP "CGI::Switch" 12
.IX Item "CGI::Switch"
Backward compatibilitizzle module fo' defunct CGI::Switch
.IP "CGI::Util" 12
.IX Item "CGI::Util"
Internal utilitizzles used by \s-1CGI\s0 module
.IP "\s-1CORE\s0" 12
.IX Item "CORE"
Namespace fo' Perlz core routines
.IP "\s-1CPAN\s0" 12
.IX Item "CPAN"
Query, downlizzle n' build perl modulez from \s-1CPAN\s0 cribs
.IP "\s-1CPAN::API::HOWTO\s0" 12
.IX Item "CPAN::API::HOWTO"
A recipe book fo' programmin wit \s-1CPAN\s0.pm
.IP "CPAN::Debug" 12
.IX Item "CPAN::Debug"
Internal debuggin fo' \s-1CPAN\s0.pm
.IP "CPAN::Distroprefs" 12
.IX Item "CPAN::Distroprefs"
Read n' match distroprefs
.IP "CPAN::FirstTime" 12
.IX Item "CPAN::FirstTime"
Utilitizzle fo' CPAN::Config file Initialization
.IP "CPAN::HandleConfig" 12
.IX Item "CPAN::HandleConfig"
Internal configuration handlin fo' \s-1CPAN\s0.pm
.IP "CPAN::Kwalify" 12
.IX Item "CPAN::Kwalify"
Interface between \s-1CPAN\s0.pm n' Kwalify.pm
.IP "CPAN::Meta" 12
.IX Item "CPAN::Meta"
Da distribution metadata fo' a \s-1CPAN\s0 dist
.IP "CPAN::Meta::Converter" 12
.IX Item "CPAN::Meta::Converter"
Convert \s-1CPAN\s0 distribution metadata structures
.IP "CPAN::Meta::Feature" 12
.IX Item "CPAN::Meta::Feature"
An optionizzle feature provided by a \s-1CPAN\s0 distribution
.IP "CPAN::Meta::History" 12
.IX Item "CPAN::Meta::History"
History of \s-1CPAN\s0 Meta Spec chizzles
.IP "CPAN::Meta::Prereqs" 12
.IX Item "CPAN::Meta::Prereqs"
A set of distribution prerequisites by phase n' type
.IP "CPAN::Meta::Requirements" 12
.IX Item "CPAN::Meta::Requirements"
A set of version requirements fo' a \s-1CPAN\s0 dist
.IP "CPAN::Meta::Spec" 12
.IX Item "CPAN::Meta::Spec"
Specification fo' \s-1CPAN\s0 distribution metadata
.IP "CPAN::Meta::Validator" 12
.IX Item "CPAN::Meta::Validator"
Validate \s-1CPAN\s0 distribution metadata structures
.IP "CPAN::Meta::YAML" 12
.IX Item "CPAN::Meta::YAML"
Read n' write a subset of \s-1YAML\s0 fo' \s-1CPAN\s0 Meta files
.IP "CPAN::Nox" 12
.IX Item "CPAN::Nox"
Wrapper round \s-1CPAN\s0.pm without rockin any \s-1XS\s0 module
.IP "CPAN::Queue" 12
.IX Item "CPAN::Queue"
Internal queue support fo' \s-1CPAN\s0.pm
.IP "CPAN::Tarzip" 12
.IX Item "CPAN::Tarzip"
Internal handlin of tar archives fo' \s-1CPAN\s0.pm
.IP "CPAN::Version" 12
.IX Item "CPAN::Version"
Utilitizzle functions ta compare \s-1CPAN\s0 versions
.IP "\s-1CPANPLUS\s0" 12
.IX Item "CPANPLUS"
\&\s-1API & CLI\s0 access ta tha \s-1CPAN\s0 mirrors
.IP "CPANPLUS::Backend" 12
.IX Item "CPANPLUS::Backend"
Programmerz intercourse ta \s-1CPANPLUS\s0
.IP "CPANPLUS::Backend::RV" 12
.IX Item "CPANPLUS::Backend::RV"
Return value objects
.IP "CPANPLUS::Config" 12
.IX Item "CPANPLUS::Config"
Configuration defaults n' heuristics fo' \s-1CPANPLUS\s0
.IP "CPANPLUS::Config::HomeEnv" 12
.IX Item "CPANPLUS::Config::HomeEnv"
Set tha environment fo' tha \s-1CPANPLUS\s0 base dir
.IP "CPANPLUS::Configure" 12
.IX Item "CPANPLUS::Configure"
Configuration fo' \s-1CPANPLUS\s0
.IP "CPANPLUS::Dist" 12
.IX Item "CPANPLUS::Dist"
Base class fo' plugins
.IP "CPANPLUS::Dist::Autobundle" 12
.IX Item "CPANPLUS::Dist::Autobundle"
Distribution class fo' installation snapshots
.IP "CPANPLUS::Dist::Base" 12
.IX Item "CPANPLUS::Dist::Base"
Base class fo' custom distribution classes
.IP "CPANPLUS::Dist::Build" 12
.IX Item "CPANPLUS::Dist::Build"
\&\s-1CPANPLUS\s0 plugin ta install packages dat use Build.PL
.IP "CPANPLUS::Dist::Build::Constants" 12
.IX Item "CPANPLUS::Dist::Build::Constants"
Constants fo' CPANPLUS::Dist::Build
.IP "CPANPLUS::Dist::MM" 12
.IX Item "CPANPLUS::Dist::MM"
Distribution class fo' MakeMaker related modules
.IP "CPANPLUS::Dist::Sample" 12
.IX Item "CPANPLUS::Dist::Sample"
Sample code ta create yo' own Dist::* plugin
.IP "CPANPLUS::Error" 12
.IX Item "CPANPLUS::Error"
Error handlin fo' \s-1CPANPLUS\s0
.IP "\s-1CPANPLUS::FAQ\s0" 12
.IX Item "CPANPLUS::FAQ"
\&\s-1CPANPLUS\s0 Frequently Axed Questions
.IP "CPANPLUS::Hacking" 12
.IX Item "CPANPLUS::Hacking"
Developin \s-1CPANPLUS\s0
.IP "CPANPLUS::Internals" 12
.IX Item "CPANPLUS::Internals"
\&\s-1CPANPLUS\s0 internals
.IP "CPANPLUS::Internals::Extract" 12
.IX Item "CPANPLUS::Internals::Extract"
Internals fo' archive extraction
.IP "CPANPLUS::Internals::Fetch" 12
.IX Item "CPANPLUS::Internals::Fetch"
Internals fo' fetchin files
.IP "CPANPLUS::Internals::Report" 12
.IX Item "CPANPLUS::Internals::Report"
Internals fo' bustin  test reports
.IP "CPANPLUS::Internals::Search" 12
.IX Item "CPANPLUS::Internals::Search"
Internals fo' searchin fo' modules
.IP "CPANPLUS::Internals::Source" 12
.IX Item "CPANPLUS::Internals::Source"
Internals fo' uppimpin source files
.IP "CPANPLUS::Internals::Source::Memory" 12
.IX Item "CPANPLUS::Internals::Source::Memory"
In memory implementation
.IP "CPANPLUS::Internals::Source::SQLite" 12
.IX Item "CPANPLUS::Internals::Source::SQLite"
SQLite implementation
.IP "CPANPLUS::Internals::Utils" 12
.IX Item "CPANPLUS::Internals::Utils"
Convenience functions fo' \s-1CPANPLUS\s0
.IP "CPANPLUS::Module" 12
.IX Item "CPANPLUS::Module"
\&\s-1CPAN\s0 module objects fo' \s-1CPANPLUS\s0
.IP "CPANPLUS::Module::Author" 12
.IX Item "CPANPLUS::Module::Author"
\&\s-1CPAN\s0 lyricist object fo' \s-1CPANPLUS\s0
.IP "CPANPLUS::Module::Author::Fake" 12
.IX Item "CPANPLUS::Module::Author::Fake"
Dummy lyricist object fo' \s-1CPANPLUS\s0
.IP "CPANPLUS::Module::Checksums" 12
.IX Item "CPANPLUS::Module::Checksums"
Checkin tha checksum of a gangbangin' finger-lickin' distribution
.IP "CPANPLUS::Module::Fake" 12
.IX Item "CPANPLUS::Module::Fake"
Fake module object fo' internal use
.IP "CPANPLUS::Selfupdate" 12
.IX Item "CPANPLUS::Selfupdate"
Self-uppimpin fo' \s-1CPANPLUS\s0
.IP "CPANPLUS::Shell" 12
.IX Item "CPANPLUS::Shell"
Base class fo' \s-1CPANPLUS\s0 shells
.IP "CPANPLUS::Shell::Classic" 12
.IX Item "CPANPLUS::Shell::Classic"
\&\s-1CPAN\s0.pm emulation fo' \s-1CPANPLUS\s0
.IP "CPANPLUS::Shell::Default" 12
.IX Item "CPANPLUS::Shell::Default"
Da default \s-1CPANPLUS\s0 shell
.IP "CPANPLUS::Shell::Default::Plugins::CustomSource" 12
.IX Item "CPANPLUS::Shell::Default::Plugins::CustomSource"
Add custom sources ta \s-1CPANPLUS\s0
.IP "CPANPLUS::Shell::Default::Plugins::HOWTO" 12
.IX Item "CPANPLUS::Shell::Default::Plugins::HOWTO"
Documentation on how tha fuck ta write yo' own plugins
.IP "CPANPLUS::Shell::Default::Plugins::Remote" 12
.IX Item "CPANPLUS::Shell::Default::Plugins::Remote"
Connect ta a remote \s-1CPANPLUS\s0
.IP "CPANPLUS::Shell::Default::Plugins::Source" 12
.IX Item "CPANPLUS::Shell::Default::Plugins::Source"
Read up in \s-1CPANPLUS\s0 commands
.IP "Carp" 12
.IX Item "Carp"
Alternatizzle warn n' take a thugged-out dirtnap fo' modules
.IP "Class::Struct" 12
.IX Item "Class::Struct"
Declare struct-like datatypes as Perl classes
.IP "Compress::Raw::Bzip2" 12
.IX Item "Compress::Raw::Bzip2"
Low-Level Interface ta bzip2 compression library
.IP "Compress::Raw::Zlib" 12
.IX Item "Compress::Raw::Zlib"
Low-Level Interface ta zlib compression library
.IP "Compress::Zlib" 12
.IX Item "Compress::Zlib"
Interface ta zlib compression library
.IP "Config" 12
.IX Item "Config"
Access Perl configuration shiznit
.IP "Config::Perl::V" 12
.IX Item "Config::Perl::V"
Structured data retrieval of perl \-V output
.IP "Cwd" 12
.IX Item "Cwd"
Git pathname of current hustlin directory
.IP "\s-1DB\s0" 12
.IX Item "DB"
Programmatic intercourse ta tha Perl debuggin \s-1API\s0
.IP "DBM_Filter" 12
.IX Item "DBM_Filter"
Filta \s-1DBM\s0 keys/values
.IP "DBM_Filter::compress" 12
.IX Item "DBM_Filter::compress"
Filta fo' DBM_Filter
.IP "DBM_Filter::encode" 12
.IX Item "DBM_Filter::encode"
Filta fo' DBM_Filter
.IP "DBM_Filter::int32" 12
.IX Item "DBM_Filter::int32"
Filta fo' DBM_Filter
.IP "DBM_Filter::null" 12
.IX Item "DBM_Filter::null"
Filta fo' DBM_Filter
.IP "DBM_Filter::utf8" 12
.IX Item "DBM_Filter::utf8"
Filta fo' DBM_Filter
.IP "DB_File" 12
.IX Item "DB_File"
Perl5 access ta Berkeley \s-1DB\s0 version 1.x
.IP "Data::Dumper" 12
.IX Item "Data::Dumper"
Stringified perl data structures, suitable fo' both printin n' \f(CW\*(C`eval\*(C'\fR
.IP "Devel::InnerPackage" 12
.IX Item "Devel::InnerPackage"
Find all tha inner packagez of a package
.IP "Devel::PPPort" 12
.IX Item "Devel::PPPort"
Perl/Pollution/Portability
.IP "Devel::Peek" 12
.IX Item "Devel::Peek"
A data debuggin tool fo' tha \s-1XS\s0 programmer
.IP "Devel::SelfStubber" 12
.IX Item "Devel::SelfStubber"
Generate stubs fo' a SelfLoadin module
.IP "Digest" 12
.IX Item "Digest"
Modulez dat calculate message digests
.IP "Digest::MD5" 12
.IX Item "Digest::MD5"
Perl intercourse ta tha \s-1MD5\s0 Algorithm
.IP "Digest::SHA" 12
.IX Item "Digest::SHA"
Perl extension fo' \s-1SHA\-1/224/256/384/512\s0
.IP "Digest::base" 12
.IX Item "Digest::base"
Digest base class
.IP "Digest::file" 12
.IX Item "Digest::file"
Calculate digestz of files
.IP "DirHandle" 12
.IX Item "DirHandle"
Supply object methodz fo' directory handles
.IP "Dumpvalue" 12
.IX Item "Dumpvalue"
Provides screen dump of Perl data.
.IP "DynaLoader" 12
.IX Item "DynaLoader"
Dynamically load C libraries tha fuck into Perl code
.IP "Encode" 12
.IX Item "Encode"
Characta encodings up in Perl
.IP "Encode::Alias" 12
.IX Item "Encode::Alias"
Alias definitions ta encodings
.IP "Encode::Byte" 12
.IX Item "Encode::Byte"
Single Byte Encodings
.IP "Encode::CJKConstants" 12
.IX Item "Encode::CJKConstants"
Internally used by Encode::??::ISO_2022_*
.IP "Encode::CN" 12
.IX Item "Encode::CN"
China-based Chinese Encodings
.IP "Encode::CN::HZ" 12
.IX Item "Encode::CN::HZ"
Internally used by Encode::CN
.IP "Encode::Config" 12
.IX Item "Encode::Config"
Internally used by Encode
.IP "Encode::EBCDIC" 12
.IX Item "Encode::EBCDIC"
\&\s-1EBCDIC\s0 Encodings
.IP "Encode::Encoder" 12
.IX Item "Encode::Encoder"
Object Oriented Encoder
.IP "Encode::Encoding" 12
.IX Item "Encode::Encoding"
Encode Implementation Base Class
.IP "Encode::GSM0338" 12
.IX Item "Encode::GSM0338"
\&\s-1ESTI GSM 03.38\s0 Encoding
.IP "Encode::Guess" 12
.IX Item "Encode::Guess"
Guesses encodin from data
.IP "Encode::JP" 12
.IX Item "Encode::JP"
Japanese Encodings
.IP "Encode::JP::H2Z" 12
.IX Item "Encode::JP::H2Z"
Internally used by Encode::JP::2022_JP*
.IP "Encode::JP::JIS7" 12
.IX Item "Encode::JP::JIS7"
Internally used by Encode::JP
.IP "Encode::KR" 12
.IX Item "Encode::KR"
Korean Encodings
.IP "Encode::KR::2022_KR" 12
.IX Item "Encode::KR::2022_KR"
Internally used by Encode::KR
.IP "Encode::MIME::Header" 12
.IX Item "Encode::MIME::Header"
\&\s-1MIME \s0'B' n' 'Q' header encoding
.IP "Encode::MIME::Name" 12
.IX Item "Encode::MIME::Name"
Internally used by Encode
.IP "Encode::PerlIO" 12
.IX Item "Encode::PerlIO"
A detailed document on Encode n' PerlIO
.IP "Encode::Supported" 12
.IX Item "Encode::Supported"
Encodings supported by Encode
.IP "Encode::Symbol" 12
.IX Item "Encode::Symbol"
Symbol Encodings
.IP "Encode::TW" 12
.IX Item "Encode::TW"
Taiwan-based Chinese Encodings
.IP "Encode::Unicode" 12
.IX Item "Encode::Unicode"
Various Unicode Transformation Formats
.IP "Encode::Unicode::UTF7" 12
.IX Item "Encode::Unicode::UTF7"
\&\s-1UTF\-7\s0 encoding
.IP "English" 12
.IX Item "English"
Use sick Gangsta (or awk) names fo' skanky punctuation variables
.IP "Env" 12
.IX Item "Env"
Perl module dat imports environment variablez as scalars or arrays
.IP "Errno" 12
.IX Item "Errno"
System errno constants
.IP "Exporter" 12
.IX Item "Exporter"
Implements default import method fo' modules
.IP "Exporter::Heavy" 12
.IX Item "Exporter::Heavy"
Exporta guts
.IP "ExtUtils::CBuilder" 12
.IX Item "ExtUtils::CBuilder"
Compile n' link C code fo' Perl modules
.IP "ExtUtils::CBuilder::Platform::Windows" 12
.IX Item "ExtUtils::CBuilder::Platform::Windows"
Builder class fo' Windows platforms
.IP "ExtUtils::Command" 12
.IX Item "ExtUtils::Command"
Utilitizzles ta replace common \s-1UNIX\s0 commandz up in Makefilez etc.
.IP "ExtUtils::Command::MM" 12
.IX Item "ExtUtils::Command::MM"
Commandz fo' tha \s-1MM\s0z ta use up in Makefiles
.IP "ExtUtils::Constant" 12
.IX Item "ExtUtils::Constant"
Generate \s-1XS\s0 code ta import C header constants
.IP "ExtUtils::Constant::Base" 12
.IX Item "ExtUtils::Constant::Base"
Base class fo' ExtUtils::Constant objects
.IP "ExtUtils::Constant::Utils" 12
.IX Item "ExtUtils::Constant::Utils"
Helper functions fo' ExtUtils::Constant
.IP "ExtUtils::Constant::XS" 12
.IX Item "ExtUtils::Constant::XS"
Generate C code fo' \s-1XS\s0 modules' constants.
.IP "ExtUtils::Embed" 12
.IX Item "ExtUtils::Embed"
Utilitizzles fo' embeddin Perl up in C/\*(C+ applications
.IP "ExtUtils::Install" 12
.IX Item "ExtUtils::Install"
Install filez from here ta there
.IP "ExtUtils::Installed" 12
.IX Item "ExtUtils::Installed"
Inventory pimpment of installed modules
.IP "ExtUtils::Liblist" 12
.IX Item "ExtUtils::Liblist"
Determine libraries ta use n' how tha fuck ta use them
.IP "ExtUtils::MM" 12
.IX Item "ExtUtils::MM"
\&\s-1OS\s0 adjusted ExtUtils::MakeMaker subclass
.IP "ExtUtils::MM_AIX" 12
.IX Item "ExtUtils::MM_AIX"
\&\s-1AIX\s0 specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_Any" 12
.IX Item "ExtUtils::MM_Any"
Platform-agnostic \s-1MM\s0 methods
.IP "ExtUtils::MM_BeOS" 12
.IX Item "ExtUtils::MM_BeOS"
Methodz ta override UN*X behaviour up in ExtUtils::MakeMaker
.IP "ExtUtils::MM_Cygwin" 12
.IX Item "ExtUtils::MM_Cygwin"
Methodz ta override UN*X behaviour up in ExtUtils::MakeMaker
.IP "ExtUtils::MM_DOS" 12
.IX Item "ExtUtils::MM_DOS"
\&\s-1DOS\s0 specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_Darwin" 12
.IX Item "ExtUtils::MM_Darwin"
Special behaviors fo' \s-1OS X\s0
.IP "ExtUtils::MM_MacOS" 12
.IX Item "ExtUtils::MM_MacOS"
Once produced Makefilez fo' MacOS Classic
.IP "ExtUtils::MM_NW5" 12
.IX Item "ExtUtils::MM_NW5"
Methodz ta override UN*X behaviour up in ExtUtils::MakeMaker
.IP "ExtUtils::MM_OS2" 12
.IX Item "ExtUtils::MM_OS2"
Methodz ta override UN*X behaviour up in ExtUtils::MakeMaker
.IP "ExtUtils::MM_QNX" 12
.IX Item "ExtUtils::MM_QNX"
\&\s-1QNX\s0 specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_UWIN" 12
.IX Item "ExtUtils::MM_UWIN"
U/WIN specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_Unix" 12
.IX Item "ExtUtils::MM_Unix"
Methodz used by ExtUtils::MakeMaker
.IP "ExtUtils::MM_VMS" 12
.IX Item "ExtUtils::MM_VMS"
Methodz ta override UN*X behaviour up in ExtUtils::MakeMaker
.IP "ExtUtils::MM_VOS" 12
.IX Item "ExtUtils::MM_VOS"
\&\s-1VOS\s0 specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_Win32" 12
.IX Item "ExtUtils::MM_Win32"
Methodz ta override UN*X behaviour up in ExtUtils::MakeMaker
.IP "ExtUtils::MM_Win95" 12
.IX Item "ExtUtils::MM_Win95"
Method ta customize MakeMaker fo' Win9X
.IP "ExtUtils::MY" 12
.IX Item "ExtUtils::MY"
ExtUtils::MakeMaker subclass fo' customization
.IP "ExtUtils::MakeMaker" 12
.IX Item "ExtUtils::MakeMaker"
Smoke a module Makefile
.IP "ExtUtils::MakeMaker::Config" 12
.IX Item "ExtUtils::MakeMaker::Config"
Wrapper round Config.pm
.IP "ExtUtils::MakeMaker::FAQ" 12
.IX Item "ExtUtils::MakeMaker::FAQ"
Frequently Axed Thangs Bout MakeMaker
.IP "ExtUtils::MakeMaker::Tutorial" 12
.IX Item "ExtUtils::MakeMaker::Tutorial"
Freestylin a module wit MakeMaker
.IP "ExtUtils::Manifest" 12
.IX Item "ExtUtils::Manifest"
Utilitizzles ta write n' check a \s-1MANIFEST\s0 file
.IP "ExtUtils::Mkbootstrap" 12
.IX Item "ExtUtils::Mkbootstrap"
Make a funky-ass bootstrap file fo' use by DynaLoader
.IP "ExtUtils::Mksymlists" 12
.IX Item "ExtUtils::Mksymlists"
Write linker options filez fo' dynamic extension
.IP "ExtUtils::Packlist" 12
.IX Item "ExtUtils::Packlist"
Manage .packlist files
.IP "ExtUtils::ParseXS" 12
.IX Item "ExtUtils::ParseXS"
Converts Perl \s-1XS\s0 code tha fuck into C code
.IP "ExtUtils::ParseXS::Constants" 12
.IX Item "ExtUtils::ParseXS::Constants"
Initialization joints fo' some globals
.IP "ExtUtils::ParseXS::Utilities" 12
.IX Item "ExtUtils::ParseXS::Utilities"
Subroutines used wit ExtUtils::ParseXS
.IP "ExtUtils::Typemaps" 12
.IX Item "ExtUtils::Typemaps"
Read/Write/Modify Perl/XS typemap files
.IP "ExtUtils::Typemaps::Cmd" 12
.IX Item "ExtUtils::Typemaps::Cmd"
Quick commandz fo' handlin typemaps
.IP "ExtUtils::Typemaps::InputMap" 12
.IX Item "ExtUtils::Typemaps::InputMap"
Entry up in tha \s-1INPUT\s0 section of a typemap
.IP "ExtUtils::Typemaps::OutputMap" 12
.IX Item "ExtUtils::Typemaps::OutputMap"
Entry up in tha \s-1OUTPUT\s0 section of a typemap
.IP "ExtUtils::Typemaps::Type" 12
.IX Item "ExtUtils::Typemaps::Type"
Entry up in tha \s-1TYPEMAP\s0 section of a typemap
.IP "ExtUtils::XSSymSet" 12
.IX Item "ExtUtils::XSSymSet"
Keep setz of symbol names palatable ta tha \s-1VMS\s0 linker
.IP "ExtUtils::testlib" 12
.IX Item "ExtUtils::testlib"
Add blib/* directories ta \f(CW@INC\fR
.IP "Fatal" 12
.IX Item "Fatal"
Replace functions wit equivalents which succeed or die
.IP "Fcntl" 12
.IX Item "Fcntl"
Load tha C Fcntl.h defines
.IP "File::Basename" 12
.IX Item "File::Basename"
Parse file paths tha fuck into directory, filename n' suffix.
.IP "File::CheckTree" 12
.IX Item "File::CheckTree"
Run nuff filetest checks on a tree
.IP "File::Compare" 12
.IX Item "File::Compare"
Compare filez or filehandles
.IP "File::Copy" 12
.IX Item "File::Copy"
Copy filez or filehandles
.IP "File::DosGlob" 12
.IX Item "File::DosGlob"
\&\s-1DOS\s0 like globbin n' then some
.IP "File::Fetch" 12
.IX Item "File::Fetch"
A generic file fetchin mechanism
.IP "File::Find" 12
.IX Item "File::Find"
Traverse a gangbangin' finger-lickin' directory tree.
.IP "File::Glob" 12
.IX Item "File::Glob"
Perl extension fo' \s-1BSD\s0 glob routine
.IP "File::GlobMapper" 12
.IX Item "File::GlobMapper"
Extend File Glob ta Allow Input n' Output Files
.IP "File::Path" 12
.IX Item "File::Path"
Smoke or remove directory trees
.IP "File::Spec" 12
.IX Item "File::Spec"
Portably big-ass up operations on file names
.IP "File::Spec::Cygwin" 12
.IX Item "File::Spec::Cygwin"
Methodz fo' Cygwin file specs
.IP "File::Spec::Epoc" 12
.IX Item "File::Spec::Epoc"
Methodz fo' Epoc file specs
.IP "File::Spec::Functions" 12
.IX Item "File::Spec::Functions"
Portably big-ass up operations on file names
.IP "File::Spec::Mac" 12
.IX Item "File::Spec::Mac"
File::Spec fo' Mac \s-1OS \s0(Classic)
.IP "File::Spec::OS2" 12
.IX Item "File::Spec::OS2"
Methodz fo' \s-1OS/2\s0 file specs
.IP "File::Spec::Unix" 12
.IX Item "File::Spec::Unix"
File::Spec fo' Unix, base fo' other File::Spec modules
.IP "File::Spec::VMS" 12
.IX Item "File::Spec::VMS"
Methodz fo' \s-1VMS\s0 file specs
.IP "File::Spec::Win32" 12
.IX Item "File::Spec::Win32"
Methodz fo' Win32 file specs
.IP "File::Temp" 12
.IX Item "File::Temp"
Return name n' handle of a temporary file safely
.IP "File::stat" 12
.IX Item "File::stat"
By-name intercourse ta Perlz built-in \fIstat()\fR functions
.IP "FileCache" 12
.IX Item "FileCache"
Keep mo' filez open than tha system permits
.IP "FileHandle" 12
.IX Item "FileHandle"
Supply object methodz fo' filehandles
.IP "Filter::Simple" 12
.IX Item "Filter::Simple"
Simplified source filtering
.IP "Filter::Util::Call" 12
.IX Item "Filter::Util::Call"
Perl Source Filta Utilitizzle Module
.IP "FindBin" 12
.IX Item "FindBin"
Locate directory of original gangsta perl script
.IP "GDBM_File" 12
.IX Item "GDBM_File"
Perl5 access ta tha gdbm library.
.IP "Getopt::Long" 12
.IX Item "Getopt::Long"
Extended processin of command line options
.IP "Getopt::Std" 12
.IX Item "Getopt::Std"
Process single-characta switches wit switch clustering
.IP "HTTP::Tiny" 12
.IX Item "HTTP::Tiny"
A small, simple, erect \s-1HTTP/1.1\s0 client
.IP "Hash::Util" 12
.IX Item "Hash::Util"
A selection of general-utilitizzle hash subroutines
.IP "Hash::Util::FieldHash" 12
.IX Item "Hash::Util::FieldHash"
Support fo' Inside-Out Classes
.IP "I18N::Collate" 12
.IX Item "I18N::Collate"
Compare 8\-bit scalar data accordin ta tha current locale
.IP "I18N::LangTags" 12
.IX Item "I18N::LangTags"
Functions fo' dealin wit RFC3066\-style language tags
.IP "I18N::LangTags::Detect" 12
.IX Item "I18N::LangTags::Detect"
Detect tha userz language preferences
.IP "I18N::LangTags::List" 12
.IX Item "I18N::LangTags::List"
Tags n' names fo' human languages
.IP "I18N::Langinfo" 12
.IX Item "I18N::Langinfo"
Query locale shiznit
.IP "\s-1IO\s0" 12
.IX Item "IO"
Load various \s-1IO\s0 modules
.IP "IO::Compress::Base" 12
.IX Item "IO::Compress::Base"
Base Class fo' IO::Compress modules
.IP "IO::Compress::Bzip2" 12
.IX Item "IO::Compress::Bzip2"
Write bzip2 files/buffers
.IP "IO::Compress::Deflate" 12
.IX Item "IO::Compress::Deflate"
Write \s-1RFC 1950\s0 files/buffers
.IP "IO::Compress::FAQ" 12
.IX Item "IO::Compress::FAQ"
Frequently Axed Thangs bout IO::Compress
.IP "IO::Compress::Gzip" 12
.IX Item "IO::Compress::Gzip"
Write \s-1RFC 1952\s0 files/buffers
.IP "IO::Compress::RawDeflate" 12
.IX Item "IO::Compress::RawDeflate"
Write \s-1RFC 1951\s0 files/buffers
.IP "IO::Compress::Zip" 12
.IX Item "IO::Compress::Zip"
Write zip files/buffers
.IP "IO::Dir" 12
.IX Item "IO::Dir"
Supply object methodz fo' directory handles
.IP "IO::File" 12
.IX Item "IO::File"
Supply object methodz fo' filehandles
.IP "IO::Handle" 12
.IX Item "IO::Handle"
Supply object methodz fo' I/O handles
.IP "IO::Pipe" 12
.IX Item "IO::Pipe"
Supply object methodz fo' pipes
.IP "IO::Poll" 12
.IX Item "IO::Poll"
Object intercourse ta system poll call
.IP "IO::Seekable" 12
.IX Item "IO::Seekable"
Supply seek based methodz fo' I/O objects
.IP "IO::Select" 12
.IX Item "IO::Select"
\&\s-1OO\s0 intercourse ta tha select system call
.IP "IO::Socket" 12
.IX Item "IO::Socket"
Object intercourse ta socket communications
.IP "IO::Socket::INET" 12
.IX Item "IO::Socket::INET"
Object intercourse fo' \s-1AF_INET\s0 domain sockets
.IP "IO::Socket::UNIX" 12
.IX Item "IO::Socket::UNIX"
Object intercourse fo' \s-1AF_UNIX\s0 domain sockets
.IP "IO::Uncompress::AnyInflate" 12
.IX Item "IO::Uncompress::AnyInflate"
Uncompress zlib-based (zip, gzip) file/buffer
.IP "IO::Uncompress::AnyUncompress" 12
.IX Item "IO::Uncompress::AnyUncompress"
Uncompress gzip, zip, bzip2 or lzop file/buffer
.IP "IO::Uncompress::Base" 12
.IX Item "IO::Uncompress::Base"
Base Class fo' IO::Uncompress modules
.IP "IO::Uncompress::Bunzip2" 12
.IX Item "IO::Uncompress::Bunzip2"
Read bzip2 files/buffers
.IP "IO::Uncompress::Gunzip" 12
.IX Item "IO::Uncompress::Gunzip"
Read \s-1RFC 1952\s0 files/buffers
.IP "IO::Uncompress::Inflate" 12
.IX Item "IO::Uncompress::Inflate"
Read \s-1RFC 1950\s0 files/buffers
.IP "IO::Uncompress::RawInflate" 12
.IX Item "IO::Uncompress::RawInflate"
Read \s-1RFC 1951\s0 files/buffers
.IP "IO::Uncompress::Unzip" 12
.IX Item "IO::Uncompress::Unzip"
Read zip files/buffers
.IP "IO::Zlib" 12
.IX Item "IO::Zlib"
\&\s-1IO::\s0 steez intercourse ta Compress::Zlib
.IP "IPC::Cmd" 12
.IX Item "IPC::Cmd"
Findin n' hustlin system commandz made easy as fuck 
.IP "IPC::Msg" 12
.IX Item "IPC::Msg"
SysV Msg \s-1IPC\s0 object class
.IP "IPC::Open2" 12
.IX Item "IPC::Open2"
Open a process fo' both readin n' freestylin rockin \fIopen2()\fR
.IP "IPC::Open3" 12
.IX Item "IPC::Open3"
Open a process fo' reading, writing, n' error handlin rockin \fIopen3()\fR
.IP "IPC::Semaphore" 12
.IX Item "IPC::Semaphore"
SysV Semaphore \s-1IPC\s0 object class
.IP "IPC::SharedMem" 12
.IX Item "IPC::SharedMem"
SysV Shared Memory \s-1IPC\s0 object class
.IP "IPC::SysV" 12
.IX Item "IPC::SysV"
System V \s-1IPC\s0 constants n' system calls
.IP "\s-1JSON::PP\s0" 12
.IX Item "JSON::PP"
\&\s-1JSON::XS\s0 compatible pure-Perl module.
.IP "JSON::PP::Boolean" 12
.IX Item "JSON::PP::Boolean"
Dummy module providin JSON::PP::Boolean
.IP "List::Util" 12
.IX Item "List::Util"
A selection of general-utilitizzle list subroutines
.IP "List::Util::XS" 12
.IX Item "List::Util::XS"
Indicate if List::Util was compiled wit a C compiler
.IP "Locale::Codes" 12
.IX Item "Locale::Codes"
A distribution of modulez ta handle locale codes
.IP "Locale::Codes::API" 12
.IX Item "Locale::Codes::API"
A description of tha callable function up in each module
.IP "Locale::Codes::Changes" 12
.IX Item "Locale::Codes::Changes"
Details chizzlez ta Locale::Codes
.IP "Locale::Codes::Constants" 12
.IX Item "Locale::Codes::Constants"
Constants fo' Locale codes
.IP "Locale::Codes::Country" 12
.IX Item "Locale::Codes::Country"
Standard codes fo' ghetto identification
.IP "Locale::Codes::Country_Codes" 12
.IX Item "Locale::Codes::Country_Codes"
Ghetto codes fo' tha Locale::Codes::Ghetto module
.IP "Locale::Codes::Country_Retired" 12
.IX Item "Locale::Codes::Country_Retired"
Retired ghetto codes fo' tha Locale::Codes::Ghetto module
.IP "Locale::Codes::Currency" 12
.IX Item "Locale::Codes::Currency"
Standard codes fo' currency identification
.IP "Locale::Codes::Currency_Codes" 12
.IX Item "Locale::Codes::Currency_Codes"
Currency codes fo' tha Locale::Codes::Currency module
.IP "Locale::Codes::Currency_Retired" 12
.IX Item "Locale::Codes::Currency_Retired"
Retired currency codes fo' tha Locale::Codes::Currency module
.IP "Locale::Codes::LangExt" 12
.IX Item "Locale::Codes::LangExt"
Standard codes fo' language extension identification
.IP "Locale::Codes::LangExt_Codes" 12
.IX Item "Locale::Codes::LangExt_Codes"
Langext codes fo' tha Locale::Codes::LangExt module
.IP "Locale::Codes::LangExt_Retired" 12
.IX Item "Locale::Codes::LangExt_Retired"
Retired langext codes fo' tha Locale::Codes::LangExt module
.IP "Locale::Codes::LangFam" 12
.IX Item "Locale::Codes::LangFam"
Standard codes fo' language extension identification
.IP "Locale::Codes::LangFam_Codes" 12
.IX Item "Locale::Codes::LangFam_Codes"
Langfam codes fo' tha Locale::Codes::LangFam module
.IP "Locale::Codes::LangFam_Retired" 12
.IX Item "Locale::Codes::LangFam_Retired"
Retired langfam codes fo' tha Locale::Codes::LangFam module
.IP "Locale::Codes::LangVar" 12
.IX Item "Locale::Codes::LangVar"
Standard codes fo' language variation identification
.IP "Locale::Codes::LangVar_Codes" 12
.IX Item "Locale::Codes::LangVar_Codes"
Langvar codes fo' tha Locale::Codes::LangVar module
.IP "Locale::Codes::LangVar_Retired" 12
.IX Item "Locale::Codes::LangVar_Retired"
Retired langvar codes fo' tha Locale::Codes::LangVar module
.IP "Locale::Codes::Language" 12
.IX Item "Locale::Codes::Language"
Standard codes fo' language identification
.IP "Locale::Codes::Language_Codes" 12
.IX Item "Locale::Codes::Language_Codes"
Language codes fo' tha Locale::Codes::Language module
.IP "Locale::Codes::Language_Retired" 12
.IX Item "Locale::Codes::Language_Retired"
Retired language codes fo' tha Locale::Codes::Language module
.IP "Locale::Codes::Script" 12
.IX Item "Locale::Codes::Script"
Standard codes fo' script identification
.IP "Locale::Codes::Script_Codes" 12
.IX Item "Locale::Codes::Script_Codes"
Script codes fo' tha Locale::Codes::Script module
.IP "Locale::Codes::Script_Retired" 12
.IX Item "Locale::Codes::Script_Retired"
Retired script codes fo' tha Locale::Codes::Script module
.IP "Locale::Country" 12
.IX Item "Locale::Country"
Standard codes fo' ghetto identification
.IP "Locale::Currency" 12
.IX Item "Locale::Currency"
Standard codes fo' currency identification
.IP "Locale::Language" 12
.IX Item "Locale::Language"
Standard codes fo' language identification
.IP "Locale::Maketext" 12
.IX Item "Locale::Maketext"
Framework fo' localization
.IP "Locale::Maketext::Cookbook" 12
.IX Item "Locale::Maketext::Cookbook"
Recipes fo' rockin Locale::Maketext
.IP "Locale::Maketext::Guts" 12
.IX Item "Locale::Maketext::Guts"
Deprecated module ta load Locale::Maketext utf8 code
.IP "Locale::Maketext::GutsLoader" 12
.IX Item "Locale::Maketext::GutsLoader"
Deprecated module ta load Locale::Maketext utf8 code
.IP "Locale::Maketext::Simple" 12
.IX Item "Locale::Maketext::Simple"
Simple intercourse ta Locale::Maketext::Lexicon
.IP "Locale::Maketext::TPJ13" 12
.IX Item "Locale::Maketext::TPJ13"
Article bout software localization
.IP "Locale::Script" 12
.IX Item "Locale::Script"
Standard codes fo' script identification
.IP "Log::Message" 12
.IX Item "Log::Message"
A generic message storin mechanism;
.IP "Log::Message::Config" 12
.IX Item "Log::Message::Config"
Configuration options fo' Log::Message
.IP "Log::Message::Handlezs" 12
.IX Item "Log::Message::Handlezs"
Message handlezs fo' Log::Message
.IP "Log::Message::Item" 12
.IX Item "Log::Message::Item"
Message objects fo' Log::Message
.IP "Log::Message::Simple" 12
.IX Item "Log::Message::Simple"
Simplified intercourse ta Log::Message
.IP "MIME::Base64" 12
.IX Item "MIME::Base64"
Encodin n' decodin of base64 strings
.IP "MIME::QuotedPrint" 12
.IX Item "MIME::QuotedPrint"
Encodin n' decodin of quoted-printable strings
.IP "Math::BigFloat" 12
.IX Item "Math::BigFloat"
Arbitrary size floatin point math package
.IP "Math::BigInt" 12
.IX Item "Math::BigInt"
Arbitrary size integer/float math package
.IP "Math::BigInt::Calc" 12
.IX Item "Math::BigInt::Calc"
Pure Perl module ta support Math::BigInt
.IP "Math::BigInt::CalcEmu" 12
.IX Item "Math::BigInt::CalcEmu"
Emulate low-level math wit BigInt code
.IP "Math::BigInt::FastCalc" 12
.IX Item "Math::BigInt::FastCalc"
Math::BigInt::Calc wit some \s-1XS\s0 fo' mo' speed
.IP "Math::BigRat" 12
.IX Item "Math::BigRat"
Arbitrary big-ass rationizzle numbers
.IP "Math::Complex" 12
.IX Item "Math::Complex"
Complex numbers n' associated mathematical functions
.IP "Math::Trig" 12
.IX Item "Math::Trig"
Trigonometric functions
.IP "Memoize" 12
.IX Item "Memoize"
Make functions fasta by tradin space fo' time
.IP "Memoize::AnyDBM_File" 12
.IX Item "Memoize::AnyDBM_File"
Glue ta provide \s-1EXISTS\s0 fo' AnyDBM_File fo' Storable use
.IP "Memoize::Expire" 12
.IX Item "Memoize::Expire"
Plug-in module fo' automatic expiration of memoized joints
.IP "Memoize::ExpireFile" 12
.IX Item "Memoize::ExpireFile"
Test fo' Memoize expiration semantics
.IP "Memoize::ExpireTest" 12
.IX Item "Memoize::ExpireTest"
Test fo' Memoize expiration semantics
.IP "Memoize::NDBM_File" 12
.IX Item "Memoize::NDBM_File"
Glue ta provide \s-1EXISTS\s0 fo' NDBM_File fo' Storable use
.IP "Memoize::SDBM_File" 12
.IX Item "Memoize::SDBM_File"
Glue ta provide \s-1EXISTS\s0 fo' SDBM_File fo' Storable use
.IP "Memoize::Storable" 12
.IX Item "Memoize::Storable"
Store Memoized data up in Storable database
.IP "Module::Build" 12
.IX Item "Module::Build"
Build n' install Perl modules
.IP "Module::Build::API" 12
.IX Item "Module::Build::API"
\&\s-1API\s0 Reference fo' Module Authors
.IP "Module::Build::Authoring" 12
.IX Item "Module::Build::Authoring"
Authorin Module::Build modules
.IP "Module::Build::Base" 12
.IX Item "Module::Build::Base"
Default methodz fo' Module::Build
.IP "Module::Build::Bundling" 12
.IX Item "Module::Build::Bundling"
How tha fuck ta bundle Module::Build wit a gangbangin' finger-lickin' distribution
.IP "Module::Build::Compat" 12
.IX Item "Module::Build::Compat"
Compatibilitizzle wit ExtUtils::MakeMaker
.IP "Module::Build::ConfigData" 12
.IX Item "Module::Build::ConfigData"
Configuration fo' Module::Build
.IP "Module::Build::Cookbook" 12
.IX Item "Module::Build::Cookbook"
Examplez of Module::Build Usage
.IP "Module::Build::ModuleInfo" 12
.IX Item "Module::Build::ModuleInfo"
\&\s-1DEPRECATED\s0
.IP "Module::Build::Notes" 12
.IX Item "Module::Build::Notes"
Smoke persistent distribution configuration modules
.IP "Module::Build::PPMMaker" 12
.IX Item "Module::Build::PPMMaker"
Perl Package Manager file creation
.IP "Module::Build::Platform::Amiga" 12
.IX Item "Module::Build::Platform::Amiga"
Builder class fo' Amiga platforms
.IP "Module::Build::Platform::Default" 12
.IX Item "Module::Build::Platform::Default"
Stub class fo' unknown platforms
.IP "Module::Build::Platform::EBCDIC" 12
.IX Item "Module::Build::Platform::EBCDIC"
Builder class fo' \s-1EBCDIC\s0 platforms
.IP "Module::Build::Platform::MPEiX" 12
.IX Item "Module::Build::Platform::MPEiX"
Builder class fo' MPEiX platforms
.IP "Module::Build::Platform::MacOS" 12
.IX Item "Module::Build::Platform::MacOS"
Builder class fo' MacOS platforms
.IP "Module::Build::Platform::RiscOS" 12
.IX Item "Module::Build::Platform::RiscOS"
Builder class fo' RiscOS platforms
.IP "Module::Build::Platform::Unix" 12
.IX Item "Module::Build::Platform::Unix"
Builder class fo' Unix platforms
.IP "Module::Build::Platform::VMS" 12
.IX Item "Module::Build::Platform::VMS"
Builder class fo' \s-1VMS\s0 platforms
.IP "Module::Build::Platform::VOS" 12
.IX Item "Module::Build::Platform::VOS"
Builder class fo' \s-1VOS\s0 platforms
.IP "Module::Build::Platform::Windows" 12
.IX Item "Module::Build::Platform::Windows"
Builder class fo' Windows platforms
.IP "Module::Build::Platform::aix" 12
.IX Item "Module::Build::Platform::aix"
Builder class fo' \s-1AIX\s0 platform
.IP "Module::Build::Platform::cygwin" 12
.IX Item "Module::Build::Platform::cygwin"
Builder class fo' Cygwin platform
.IP "Module::Build::Platform::darwin" 12
.IX Item "Module::Build::Platform::darwin"
Builder class fo' Mac \s-1OS X\s0 platform
.IP "Module::Build::Platform::os2" 12
.IX Item "Module::Build::Platform::os2"
Builder class fo' \s-1OS/2\s0 platform
.IP "Module::Build::Version" 12
.IX Item "Module::Build::Version"
\&\s-1DEPRECATED\s0
.IP "Module::Build::YAML" 12
.IX Item "Module::Build::YAML"
\&\s-1DEPRECATED\s0
.IP "Module::CoreList" 12
.IX Item "Module::CoreList"
What modulez shipped wit versionz of perl
.IP "Module::CoreList::Utils" 12
.IX Item "Module::CoreList::Utils"
What utilitizzles shipped wit versionz of perl
.IP "Module::Load" 12
.IX Item "Module::Load"
Runtime require of both modulez n' files
.IP "Module::Load::Conditional" 12
.IX Item "Module::Load::Conditional"
Lookin up module shiznit / loadin at runtime
.IP "Module::Loaded" 12
.IX Item "Module::Loaded"
Mark modulez as loaded or unloaded
.IP "Module::Metadata" 12
.IX Item "Module::Metadata"
Gather package n' \s-1POD\s0 shiznit from perl module files
.IP "Module::Pluggable" 12
.IX Item "Module::Pluggable"
Automatically give yo' module tha mobilitizzle ta have plugins
.IP "Module::Pluggable::Object" 12
.IX Item "Module::Pluggable::Object"
Automatically give yo' module tha mobilitizzle ta have plugins
.IP "NDBM_File" 12
.IX Item "NDBM_File"
Tied access ta ndbm files
.IP "\s-1NEXT\s0" 12
.IX Item "NEXT"
Provide a pseudo-class \s-1NEXT \s0(et al) dat allows method redispatch
.IP "Net::Cmd" 12
.IX Item "Net::Cmd"
Network Command class (as used by \s-1FTP, SMTP\s0 etc)
.IP "Net::Config" 12
.IX Item "Net::Config"
Local configuration data fo' libnet
.IP "Net::Domain" 12
.IX Item "Net::Domain"
Attempt ta evaluate tha current hostz internizzle name n' domain
.IP "Net::FTP" 12
.IX Item "Net::FTP"
\&\s-1FTP\s0 Client class
.IP "Net::NNTP" 12
.IX Item "Net::NNTP"
\&\s-1NNTP\s0 Client class
.IP "Net::Netrc" 12
.IX Item "Net::Netrc"
\&\s-1OO\s0 intercourse ta playas netrc file
.IP "Net::POP3" 12
.IX Item "Net::POP3"
Post Office Protocol 3 Client class (\s-1RFC1939\s0)
.IP "Net::Ping" 12
.IX Item "Net::Ping"
Peep a remote host fo' reachability
.IP "Net::SMTP" 12
.IX Item "Net::SMTP"
Simple Mail Transfer Protocol Client
.IP "Net::Time" 12
.IX Item "Net::Time"
Time n' daytime network client intercourse
.IP "Net::hostent" 12
.IX Item "Net::hostent"
By-name intercourse ta Perlz built-in gethost*() functions
.IP "Net::libnetFAQ" 12
.IX Item "Net::libnetFAQ"
Libnet Frequently Axed Questions
.IP "Net::netent" 12
.IX Item "Net::netent"
By-name intercourse ta Perlz built-in getnet*() functions
.IP "Net::protoent" 12
.IX Item "Net::protoent"
By-name intercourse ta Perlz built-in getproto*() functions
.IP "Net::servent" 12
.IX Item "Net::servent"
By-name intercourse ta Perlz built-in getserv*() functions
.IP "O" 12
.IX Item "O"
Generic intercourse ta Perl Compila backends
.IP "ODBM_File" 12
.IX Item "ODBM_File"
Tied access ta odbm files
.IP "Object::Accessor" 12
.IX Item "Object::Accessor"
Interface ta create per object accessors
.IP "Opcode" 12
.IX Item "Opcode"
Disable named opcodes when compilin perl code
.IP "\s-1POSIX\s0" 12
.IX Item "POSIX"
Perl intercourse ta \s-1IEEE\s0 Std 1003.1
.IP "Package::Constants" 12
.IX Item "Package::Constants"
List all constants declared up in a package
.IP "Params::Check" 12
.IX Item "Params::Check"
A generic input parsing/checkin mechanism.
.IP "Parse::CPAN::Meta" 12
.IX Item "Parse::CPAN::Meta"
Parse \s-1META\s0.yml n' \s-1META\s0.json \s-1CPAN\s0 metadata files
.IP "Perl::OSType" 12
.IX Item "Perl::OSType"
Map Perl operatin system names ta generic types
.IP "PerlIO" 12
.IX Item "PerlIO"
On demand loader fo' PerlIO layers n' root of PerlIO::* name space
.IP "PerlIO::encoding" 12
.IX Item "PerlIO::encoding"
Encodin layer
.IP "PerlIO::mmap" 12
.IX Item "PerlIO::mmap"
Memory mapped \s-1IO\s0
.IP "PerlIO::scalar" 12
.IX Item "PerlIO::scalar"
In-memory \s-1IO,\s0 scalar \s-1IO\s0
.IP "PerlIO::via" 12
.IX Item "PerlIO::via"
Helper class fo' PerlIO layers implemented up in perl
.IP "PerlIO::via::QuotedPrint" 12
.IX Item "PerlIO::via::QuotedPrint"
PerlIO layer fo' quoted-printable strings
.IP "Pod::Escapes" 12
.IX Item "Pod::Escapes"
For resolvin Pod E<...> sequences
.IP "Pod::Functions" 12
.IX Item "Pod::Functions"
Group Perlz functions a la perlfunc.pod
.IP "Pod::Html" 12
.IX Item "Pod::Html"
Module ta convert pod filez ta \s-1HTML\s0
.IP "Pod::LaTeX" 12
.IX Item "Pod::LaTeX"
Convert Pod data ta formatted Latex
.IP "Pod::Man" 12
.IX Item "Pod::Man"
Convert \s-1POD\s0 data ta formatted *roff input
.IP "Pod::ParseLink" 12
.IX Item "Pod::ParseLink"
Parse a L<> formattin code up in \s-1POD\s0 text
.IP "Pod::Perldoc" 12
.IX Item "Pod::Perldoc"
Look up Perl documentation up in Pod format.
.IP "Pod::Perldoc::BaseTo" 12
.IX Item "Pod::Perldoc::BaseTo"
Base fo' Pod::Perldoc formatters
.IP "Pod::Perldoc::GetOptsOO" 12
.IX Item "Pod::Perldoc::GetOptsOO"
Customized option parser fo' Pod::Perldoc
.IP "Pod::Perldoc::ToANSI" 12
.IX Item "Pod::Perldoc::ToANSI"
Render Pod wit \s-1ANSI\s0 color escapes
.IP "Pod::Perldoc::ToChecker" 12
.IX Item "Pod::Perldoc::ToChecker"
Let Perldoc check Pod fo' errors
.IP "Pod::Perldoc::ToMan" 12
.IX Item "Pod::Perldoc::ToMan"
Let Perldoc render Pod as playa pages
.IP "Pod::Perldoc::ToNroff" 12
.IX Item "Pod::Perldoc::ToNroff"
Let Perldoc convert Pod ta nroff
.IP "Pod::Perldoc::ToPod" 12
.IX Item "Pod::Perldoc::ToPod"
Let Perldoc render Pod as ... Pod!
.IP "Pod::Perldoc::ToRtf" 12
.IX Item "Pod::Perldoc::ToRtf"
Let Perldoc render Pod as \s-1RTF\s0
.IP "Pod::Perldoc::ToTerm" 12
.IX Item "Pod::Perldoc::ToTerm"
Render Pod wit terminal escapes
.IP "Pod::Perldoc::ToText" 12
.IX Item "Pod::Perldoc::ToText"
Let Perldoc render Pod as plaintext
.IP "Pod::Perldoc::ToTk" 12
.IX Item "Pod::Perldoc::ToTk"
Let Perldoc use Tk::Pod ta render Pod
.IP "Pod::Perldoc::ToXml" 12
.IX Item "Pod::Perldoc::ToXml"
Let Perldoc render Pod as \s-1XML\s0
.IP "Pod::Simple" 12
.IX Item "Pod::Simple"
Framework fo' parsin Pod
.IP "Pod::Simple::Checker" 12
.IX Item "Pod::Simple::Checker"
Peep tha Pod syntax of a thugged-out document
.IP "Pod::Simple::Debug" 12
.IX Item "Pod::Simple::Debug"
Put Pod::Simple tha fuck into trace/debug mode
.IP "Pod::Simple::DumpAsText" 12
.IX Item "Pod::Simple::DumpAsText"
Dump Pod-parsin events as text
.IP "Pod::Simple::DumpAsXML" 12
.IX Item "Pod::Simple::DumpAsXML"
Turn Pod tha fuck into \s-1XML\s0
.IP "Pod::Simple::HTML" 12
.IX Item "Pod::Simple::HTML"
Convert Pod ta \s-1HTML\s0
.IP "Pod::Simple::HTMLBatch" 12
.IX Item "Pod::Simple::HTMLBatch"
Convert nuff muthafuckin Pod filez ta nuff muthafuckin \s-1HTML\s0 files
.IP "Pod::Simple::LinkSection" 12
.IX Item "Pod::Simple::LinkSection"
Represent \*(L"section\*(R" attributez of L codes
.IP "Pod::Simple::Methody" 12
.IX Item "Pod::Simple::Methody"
Turn Pod::Simple events tha fuck into method calls
.IP "Pod::Simple::PullParser" 12
.IX Item "Pod::Simple::PullParser"
A pull-parser intercourse ta parsin Pod
.IP "Pod::Simple::PullParserEndToken" 12
.IX Item "Pod::Simple::PullParserEndToken"
End-tokens from Pod::Simple::PullParser
.IP "Pod::Simple::PullParserStartToken" 12
.IX Item "Pod::Simple::PullParserStartToken"
Start-tokens from Pod::Simple::PullParser
.IP "Pod::Simple::PullParserTextToken" 12
.IX Item "Pod::Simple::PullParserTextToken"
Text-tokens from Pod::Simple::PullParser
.IP "Pod::Simple::PullParserToken" 12
.IX Item "Pod::Simple::PullParserToken"
Tokens from Pod::Simple::PullParser
.IP "Pod::Simple::RTF" 12
.IX Item "Pod::Simple::RTF"
Format Pod as \s-1RTF\s0
.IP "Pod::Simple::Search" 12
.IX Item "Pod::Simple::Search"
Find \s-1POD\s0 documents up in directory trees
.IP "Pod::Simple::SimpleTree" 12
.IX Item "Pod::Simple::SimpleTree"
Parse Pod tha fuck into a simple parse tree
.IP "Pod::Simple::Subclassing" 12
.IX Item "Pod::Simple::Subclassing"
Write a gangbangin' formatta as a Pod::Simple subclass
.IP "Pod::Simple::Text" 12
.IX Item "Pod::Simple::Text"
Format Pod as plaintext
.IP "Pod::Simple::TextContent" 12
.IX Item "Pod::Simple::TextContent"
Git tha text content of Pod
.IP "Pod::Simple::XHTML" 12
.IX Item "Pod::Simple::XHTML"
Format Pod as valipimpin \s-1XHTML\s0
.IP "Pod::Simple::XMLOutStream" 12
.IX Item "Pod::Simple::XMLOutStream"
Turn Pod tha fuck into \s-1XML\s0
.IP "Pod::Text" 12
.IX Item "Pod::Text"
Convert \s-1POD\s0 data ta formatted \s-1ASCII\s0 text
.IP "Pod::Text::Color" 12
.IX Item "Pod::Text::Color"
Convert \s-1POD\s0 data ta formatted color \s-1ASCII\s0 text
.IP "Pod::Text::Termcap" 12
.IX Item "Pod::Text::Termcap"
Convert \s-1POD\s0 data ta \s-1ASCII\s0 text wit format escapes
.IP "SDBM_File" 12
.IX Item "SDBM_File"
Tied access ta sdbm files
.IP "Safe" 12
.IX Item "Safe"
Compile n' execute code up in restricted compartments
.IP "Scalar::Util" 12
.IX Item "Scalar::Util"
A selection of general-utilitizzle scalar subroutines
.IP "Search::Dict" 12
.IX Item "Search::Dict"
Look \- search fo' key up in doggtionary file
.IP "SelectSaver" 12
.IX Item "SelectSaver"
Save n' restore selected file handle
.IP "SelfLoader" 12
.IX Item "SelfLoader"
Load functions only on demand
.IP "Storable" 12
.IX Item "Storable"
Persistence fo' Perl data structures
.IP "Symbol" 12
.IX Item "Symbol"
Manipulate Perl symbols n' they names
.IP "Sys::Hostname" 12
.IX Item "Sys::Hostname"
Try every last muthafuckin conceivable way ta git hostname
.IP "Sys::Syslog" 12
.IX Item "Sys::Syslog"
Perl intercourse ta tha \s-1UNIX\s0 \fIsyslog\fR\|(3) calls
.IP "Sys::Syslog::Win32" 12
.IX Item "Sys::Syslog::Win32"
Win32 support fo' Sys::Syslog
.IP "TAP::Base" 12
.IX Item "TAP::Base"
Base class dat serves up common functionalitizzle ta TAP::Parser
.IP "TAP::Formatter::Base" 12
.IX Item "TAP::Formatter::Base"
Base class fo' harnizz output delegates
.IP "TAP::Formatter::Color" 12
.IX Item "TAP::Formatter::Color"
Run Perl test scripts wit color
.IP "TAP::Formatter::Console" 12
.IX Item "TAP::Formatter::Console"
Harnizz output delegate fo' default console output
.IP "TAP::Formatter::Console::ParallelSession" 12
.IX Item "TAP::Formatter::Console::ParallelSession"
Harnizz output delegate fo' parallel console output
.IP "TAP::Formatter::Console::Session" 12
.IX Item "TAP::Formatter::Console::Session"
Harnizz output delegate fo' default console output
.IP "TAP::Formatter::File" 12
.IX Item "TAP::Formatter::File"
Harnizz output delegate fo' file output
.IP "TAP::Formatter::File::Session" 12
.IX Item "TAP::Formatter::File::Session"
Harnizz output delegate fo' file output
.IP "TAP::Formatter::Session" 12
.IX Item "TAP::Formatter::Session"
Abstract base class fo' harnizz output delegate
.IP "TAP::Harness" 12
.IX Item "TAP::Harness"
Run test scripts wit statistics
.IP "TAP::Object" 12
.IX Item "TAP::Object"
Base class dat serves up common functionalitizzle ta all \f(CW\*(C`TAP::*\*(C'\fR modules
.IP "TAP::Parser" 12
.IX Item "TAP::Parser"
Parse \s-1TAP\s0 output
.IP "TAP::Parser::Aggregator" 12
.IX Item "TAP::Parser::Aggregator"
Aggregate TAP::Parser thangs up in dis biatch
.IP "TAP::Parser::Grammar" 12
.IX Item "TAP::Parser::Grammar"
A grammar fo' tha Test Anythang Protocol.
.IP "TAP::Parser::Iterator" 12
.IX Item "TAP::Parser::Iterator"
Base class fo' \s-1TAP\s0 source iterators
.IP "TAP::Parser::Iterator::Array" 12
.IX Item "TAP::Parser::Iterator::Array"
Iterator fo' array-based \s-1TAP\s0 sources
.IP "TAP::Parser::Iterator::Process" 12
.IX Item "TAP::Parser::Iterator::Process"
Iterator fo' process-based \s-1TAP\s0 sources
.IP "TAP::Parser::Iterator::Stream" 12
.IX Item "TAP::Parser::Iterator::Stream"
Iterator fo' filehandle-based \s-1TAP\s0 sources
.IP "TAP::Parser::IteratorFactory" 12
.IX Item "TAP::Parser::IteratorFactory"
Figures up which SourceHandlez objects ta use fo' a given Source
.IP "TAP::Parser::Multiplexer" 12
.IX Item "TAP::Parser::Multiplexer"
Multiplex multiple TAP::Parsers
.IP "TAP::Parser::Result" 12
.IX Item "TAP::Parser::Result"
Base class fo' TAP::Parser output objects
.IP "TAP::Parser::Result::Bailout" 12
.IX Item "TAP::Parser::Result::Bailout"
Bailout result token.
.IP "TAP::Parser::Result::Comment" 12
.IX Item "TAP::Parser::Result::Comment"
Comment result token.
.IP "TAP::Parser::Result::Plan" 12
.IX Item "TAP::Parser::Result::Plan"
Plan result token.
.IP "TAP::Parser::Result::Pragma" 12
.IX Item "TAP::Parser::Result::Pragma"
\&\s-1TAP\s0 pragma token.
.IP "TAP::Parser::Result::Test" 12
.IX Item "TAP::Parser::Result::Test"
Test result token.
.IP "TAP::Parser::Result::Unknown" 12
.IX Item "TAP::Parser::Result::Unknown"
Unknown result token.
.IP "TAP::Parser::Result::Version" 12
.IX Item "TAP::Parser::Result::Version"
\&\s-1TAP\s0 syntax version token.
.IP "TAP::Parser::Result::YAML" 12
.IX Item "TAP::Parser::Result::YAML"
\&\s-1YAML\s0 result token.
.IP "TAP::Parser::ResultFactory" 12
.IX Item "TAP::Parser::ResultFactory"
Factory fo' bustin TAP::Parser output objects
.IP "TAP::Parser::Scheduler" 12
.IX Item "TAP::Parser::Scheduler"
Schedule tests durin parallel testing
.IP "TAP::Parser::Scheduler::Job" 12
.IX Item "TAP::Parser::Scheduler::Job"
A single testin thang.
.IP "TAP::Parser::Scheduler::Spinner" 12
.IX Item "TAP::Parser::Scheduler::Spinner"
A no-op thang.
.IP "TAP::Parser::Source" 12
.IX Item "TAP::Parser::Source"
A \s-1TAP\s0 source & meta data bout it
.IP "TAP::Parser::SourceHandlez" 12
.IX Item "TAP::Parser::SourceHandlez"
Base class fo' different \s-1TAP\s0 source handlezs
.IP "TAP::Parser::SourceHandlez::Executable" 12
.IX Item "TAP::Parser::SourceHandlez::Executable"
Stream output from a executable \s-1TAP\s0 source
.IP "TAP::Parser::SourceHandlez::File" 12
.IX Item "TAP::Parser::SourceHandlez::File"
Stream \s-1TAP\s0 from a text file.
.IP "TAP::Parser::SourceHandlez::Handle" 12
.IX Item "TAP::Parser::SourceHandlez::Handle"
Stream \s-1TAP\s0 from a IO::Handle or a \s-1GLOB.\s0
.IP "TAP::Parser::SourceHandlez::Perl" 12
.IX Item "TAP::Parser::SourceHandlez::Perl"
Stream \s-1TAP\s0 from a Perl executable
.IP "TAP::Parser::SourceHandlez::RawTAP" 12
.IX Item "TAP::Parser::SourceHandlez::RawTAP"
Stream output from raw \s-1TAP\s0 up in a scalar/array ref.
.IP "TAP::Parser::Utils" 12
.IX Item "TAP::Parser::Utils"
Internal TAP::Parser utilities
.IP "TAP::Parser::YAMLish::Reader" 12
.IX Item "TAP::Parser::YAMLish::Reader"
Read YAMLish data from iterator
.IP "TAP::Parser::YAMLish::Writer" 12
.IX Item "TAP::Parser::YAMLish::Writer"
Write YAMLish data
.IP "Term::ANSIColor" 12
.IX Item "Term::ANSIColor"
Color screen output rockin \s-1ANSI\s0 escape sequences
.IP "Term::Cap" 12
.IX Item "Term::Cap"
Perl termcap intercourse
.IP "Term::Complete" 12
.IX Item "Term::Complete"
Perl word completion module
.IP "Term::ReadLine" 12
.IX Item "Term::ReadLine"
Perl intercourse ta various \f(CW\*(C`readline\*(C'\fR packages.
.IP "Term::UI" 12
.IX Item "Term::UI"
Term::ReadLine \s-1UI\s0 made easy as fuck 
.IP "Term::UI::History" 12
.IX Item "Term::UI::History"
History function
.IP "Test" 12
.IX Item "Test"
Provides a simple framework fo' freestylin test scripts
.IP "Test::Builder" 12
.IX Item "Test::Builder"
Backend fo' buildin test libraries
.IP "Test::Builder::Module" 12
.IX Item "Test::Builder::Module"
Base class fo' test modules
.IP "Test::Builder::Tester" 12
.IX Item "Test::Builder::Tester"
Test testsuites dat done been built with
.IP "Test::Builder::Tester::Color" 12
.IX Item "Test::Builder::Tester::Color"
Turn on colour up in Test::Builder::Tester
.IP "Test::Harness" 12
.IX Item "Test::Harness"
Run Perl standard test scripts wit statistics
.IP "Test::Mo'" 12
.IX Item "Test::Mo'"
Yet another framework fo' freestylin test scripts
.IP "Test::Simple" 12
.IX Item "Test::Simple"
Basic utilitizzles fo' freestylin tests.
.IP "Test::Tutorial" 12
.IX Item "Test::Tutorial"
A tutorial bout freestylin straight-up basic tests
.IP "Text::Abbrev" 12
.IX Item "Text::Abbrev"
Abbrev \- create a abbreviation table from a list
.IP "Text::Balanced" 12
.IX Item "Text::Balanced"
Extract delimited text sequences from strings.
.IP "Text::ParseWords" 12
.IX Item "Text::ParseWords"
Parse text tha fuck into a array of tokens or array of arrays
.IP "Text::Soundex" 12
.IX Item "Text::Soundex"
Implementation of tha soundex algorithm.
.IP "Text::Tabs" 12
.IX Item "Text::Tabs"
Expand n' unexpand tabs like unix \fIexpand\fR\|(1) n' \fIunexpand\fR\|(1)
.IP "Text::Wrap" 12
.IX Item "Text::Wrap"
Line wrappin ta form simple paragraphs
.IP "Thread" 12
.IX Item "Thread"
Manipulate threadz up in Perl (for oldschool code only)
.IP "Thread::Queue" 12
.IX Item "Thread::Queue"
Thread-safe queues
.IP "Thread::Semaphore" 12
.IX Item "Thread::Semaphore"
Thread-safe semaphores
.IP "Tie::Array" 12
.IX Item "Tie::Array"
Base class fo' tied arrays
.IP "Tie::File" 12
.IX Item "Tie::File"
Access tha linez of a gangbangin' finger-lickin' disk file via a Perl array
.IP "Tie::Handle" 12
.IX Item "Tie::Handle"
Base class definitions fo' tied handles
.IP "Tie::Hash" 12
.IX Item "Tie::Hash"
Base class definitions fo' tied hashes
.IP "Tie::Hash::NamedCapture" 12
.IX Item "Tie::Hash::NamedCapture"
Named regexp capture buffers
.IP "Tie::Memoize" 12
.IX Item "Tie::Memoize"
Add data ta hash when needed
.IP "Tie::RefHash" 12
.IX Item "Tie::RefHash"
Use references as hash keys
.IP "Tie::Scalar" 12
.IX Item "Tie::Scalar"
Base class definitions fo' tied scalars
.IP "Tie::StdHandle" 12
.IX Item "Tie::StdHandle"
Base class definitions fo' tied handles
.IP "Tie::SubstrHash" 12
.IX Item "Tie::SubstrHash"
Fixed-table-size, fixed-key-length hashing
.IP "Time::HiRes" 12
.IX Item "Time::HiRes"
High resolution alarm, chill, gettimeofday, interval timers
.IP "Time::Local" 12
.IX Item "Time::Local"
Efficiently compute time from local n' \s-1GMT\s0 time
.IP "Time::Piece" 12
.IX Item "Time::Piece"
Object Oriented time objects
.IP "Time::Seconds" 12
.IX Item "Time::Seconds"
A simple \s-1API\s0 ta convert secondz ta other date joints
.IP "Time::gmtime" 12
.IX Item "Time::gmtime"
By-name intercourse ta Perlz built-in \fIgmtime()\fR function
.IP "Time::localtime" 12
.IX Item "Time::localtime"
By-name intercourse ta Perlz built-in \fIlocaltime()\fR function
.IP "Time::tm" 12
.IX Item "Time::tm"
Internal object used by Time::gmtime n' Time::localtime
.IP "\s-1UNIVERSAL\s0" 12
.IX Item "UNIVERSAL"
Base class fo' \s-1ALL\s0 classes (blessed references)
.IP "Unicode::Collate" 12
.IX Item "Unicode::Collate"
Unicode Collation Algorithm
.IP "Unicode::Collate::CJK::Big5" 12
.IX Item "Unicode::Collate::CJK::Big5"
Weightin \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::CJK::GB2312" 12
.IX Item "Unicode::Collate::CJK::GB2312"
Weightin \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::CJK::JISX0208" 12
.IX Item "Unicode::Collate::CJK::JISX0208"
Weightin \s-1JIS KANJI\s0 fo' Unicode::Collate
.IP "Unicode::Collate::CJK::Korean" 12
.IX Item "Unicode::Collate::CJK::Korean"
Weightin \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::CJK::Pinyin" 12
.IX Item "Unicode::Collate::CJK::Pinyin"
Weightin \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::CJK::Stroke" 12
.IX Item "Unicode::Collate::CJK::Stroke"
Weightin \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::CJK::Zhuyin" 12
.IX Item "Unicode::Collate::CJK::Zhuyin"
Weightin \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::Locale" 12
.IX Item "Unicode::Collate::Locale"
Linguistic tailorin fo' \s-1DUCET\s0 via Unicode::Collate
.IP "Unicode::Normalize" 12
.IX Item "Unicode::Normalize"
Unicode Normalization Forms
.IP "Unicode::UCD" 12
.IX Item "Unicode::UCD"
Unicode characta database
.IP "User::grent" 12
.IX Item "User::grent"
By-name intercourse ta Perlz built-in getgr*() functions
.IP "User::pwent" 12
.IX Item "User::pwent"
By-name intercourse ta Perlz built-in getpw*() functions
.IP "VMS::DCLsym" 12
.IX Item "VMS::DCLsym"
Perl extension ta manipulate \s-1DCL\s0 symbols
.IP "VMS::Stdio" 12
.IX Item "VMS::Stdio"
Standard I/O functions via \s-1VMS\s0 extensions
.IP "Win32" 12
.IX Item "Win32"
Interfaces ta some Win32 \s-1API\s0 Functions
.IP "Win32API::File" 12
.IX Item "Win32API::File"
Low-level access ta Win32 system \s-1API\s0 calls fo' files/dirs.
.IP "Win32CORE" 12
.IX Item "Win32CORE"
Win32 \s-1CORE\s0 function stubs
.IP "XS::APItest" 12
.IX Item "XS::APItest"
Test tha perl C \s-1API\s0
.IP "XS::Typemap" 12
.IX Item "XS::Typemap"
Module ta test tha \s-1XS\s0 typemaps distributed wit perl
.IP "XSLoader" 12
.IX Item "XSLoader"
Dynamically load C libraries tha fuck into Perl code
.IP "version::Internals" 12
.IX Item "version::Internals"
Perl extension fo' Version Objects
.PP
To smoke up \fIall\fR modulez installed on yo' system, including
those without documentation or outside tha standard release,
just use tha followin command (under tha default win32 shell,
double quotes should be used instead of single quotes).
.PP
.Vb 3
\&    % perl \-MFile::Find=find \-MFile::Spec::Functions \-Tlwe \e
\&      \*(Aqfind { wanted => sub { print canonpath $_ if /\e.pm\ez/ },
\&      no_chdir => 1 }, @INC\*(Aq
.Ve
.PP
(Da \-T is here ta prevent '.' from bein listed up in \f(CW@INC\fR.)
They should all have they own documentation installed n' accessible
via yo' system \fIman\fR\|(1) command. Y'all KNOW dat shit, muthafucka!  If you aint gots a \fBfind\fR
program, you can use tha Perl \fBfind2perl\fR program instead, which
generates Perl code as output you can run all up in perl.  If you
have a \fBman\fR program but it don't find yo' modules, you gonna have
to fix yo' manpath.  See perl fo' details.  If you have no
system \fBman\fR command, you might try tha \fBperldoc\fR program.
.PP
Note also dat tha command \f(CW\*(C`perldoc perllocal\*(C'\fR gives you a (possibly
incomplete) list of tha modulez dat done been further installed on
your system. (Da perllocal.pod file is updated by tha standard MakeMaker
install process.)
.SS "Extension Modules"
.IX Subsection "Extension Modules"
Extension modulez is freestyled up in C (or a mix of Perl n' C).  They
are probably dynamically loaded tha fuck into Perl if n' when you need them,
but may also be linked up in statically.  Supported extension modules
include Socket, Fcntl, n' \s-1POSIX.\s0
.PP
Many ghettofab C extension modulez do not come bundled (at least, not
completely) cuz of they sizes, volatility, or simply lack of time
for adequate testin n' configuration across tha multitude of
platforms on which Perl was beta-tested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Yo ass is encouraged to
look fo' dem on \s-1CPAN \s0(busted lyrics bout below), or rockin wizzy search engines
like Alta Vista or Google.
.SH "CPAN"
.IX Header "CPAN"
\&\s-1CPAN\s0 standz fo' Comprehensive Perl Archive Network; itz a globally
replicated trove of Perl shit, includin documentation, style
guides, tricks n' traps, alternate ports ta non-Unix systems and
occasionizzle binary distributions fo' these n' you can put dat on yo' toast.   Search engines for
\&\s-1CPAN\s0 can be found at http://www.cpan.org/
.PP
Most blinginly, \s-1CPAN\s0 includes round a thousand unbundled modules,
some of which require a C compila ta build. Y'all KNOW dat shit, muthafucka!  Major categories of
modulez are:
.IP "\(bu" 4
Language Extensions n' Documentation Tools
.IP "\(bu" 4
Development Support
.IP "\(bu" 4
Operatin System Interfaces
.IP "\(bu" 4
Networking, Device Control (modems) n' InterProcess Communication
.IP "\(bu" 4
Data Types n' Data Type Utilities
.IP "\(bu" 4
Database Interfaces
.IP "\(bu" 4
User Interfaces
.IP "\(bu" 4
Interfaces ta / Emulationz of Other Programmin Languages
.IP "\(bu" 4
File Names, File Systems n' File Lockin (see also File Handles)
.IP "\(bu" 4
Strin Processing, Language Text Processing, Parsing, n' Searching
.IP "\(bu" 4
Option, Argument, Parameter, n' Configuration File Processing
.IP "\(bu" 4
Internationalization n' Locale
.IP "\(bu" 4
Authentication, Security, n' Encryption
.IP "\(bu" 4
Ghetto Wide Web, \s-1HTML, HTTP, CGI, MIME\s0
.IP "\(bu" 4
Server n' Daemon Utilities
.IP "\(bu" 4
Archivin n' Compression
.IP "\(bu" 4
Images, Pixmap n' Bitmap Manipulation, Drawing, n' Graphing
.IP "\(bu" 4
Mail n' Usenet Shit
.IP "\(bu" 4
Control Flow Utilitizzles (callbacks n' exceptions etc)
.IP "\(bu" 4
File Handle n' Input/Output Stream Utilities
.IP "\(bu" 4
Miscellaneous Modules
.PP
Da list of tha registered \s-1CPAN\s0 cribs bigs up.
Please note dat tha sortin order be alphabetical on fields:
.PP
Continent
   |
   |\-\->Country
         |
         |\-\->[state/province]
                   |
                   |\-\->ftp
                   |
                   |\-\->[http]
.PP
and thus tha Uptown Gangsta servers happen ta be listed between the
European n' tha Downtown Gangsta cribs.
.PP
Registered \s-1CPAN\s0 cribs
.SS "Africa"
.IX Subsection "Africa"
.IP "Downtown Africa" 4
.IX Item "Downtown Africa"
.Vb 5
\&  http://cpan.mirror.ac.za/
\&  ftp://cpan.mirror.ac.za/
\&  http://mirror.is.co.za/pub/cpan/
\&  ftp://ftp.is.co.za/pub/cpan/
\&  ftp://ftp.saix.net/pub/CPAN/
.Ve
.SS "Asia"
.IX Subsection "Asia"
.IP "China" 4
.IX Item "China"
.Vb 1
\&  http://cpan.wenzk.com/
.Ve
.IP "Hong Kong" 4
.IX Item "Hong Kong"
.Vb 3
\&  http://ftp.cuhk.edu.hk/pub/packages/perl/CPAN/
\&  ftp://ftp.cuhk.edu.hk/pub/packages/perl/CPAN/
\&  http://mirrors.geoexpat.com/cpan/
.Ve
.IP "India" 4
.IX Item "India"
.Vb 1
\&  http://perlmirror.indialinks.com/
.Ve
.IP "Indonesia" 4
.IX Item "Indonesia"
.Vb 6
\&  http://cpan.biz.net.id/
\&  http://komo.vlsm.org/CPAN/
\&  ftp://komo.vlsm.org/CPAN/
\&  http://cpan.cermin.lipi.go.id/
\&  ftp://cermin.lipi.go.id/pub/CPAN/
\&  http://cpan.pesat.net.id/
.Ve
.IP "Japan" 4
.IX Item "Japan"
.Vb 12
\&  ftp://ftp.u\-aizu.ac.jp/pub/CPAN
\&  ftp://ftp.kddilabs.jp/CPAN/
\&  http://ftp.nara.wide.ad.jp/pub/CPAN/
\&  ftp://ftp.nara.wide.ad.jp/pub/CPAN/
\&  http://ftp.jaist.ac.jp/pub/CPAN/
\&  ftp://ftp.jaist.ac.jp/pub/CPAN/
\&  ftp://ftp.dti.ad.jp/pub/lang/CPAN/
\&  ftp://ftp.ring.gr.jp/pub/lang/perl/CPAN/
\&  http://ftp.riken.jp/lang/CPAN/
\&  ftp://ftp.riken.jp/lang/CPAN/
\&  http://ftp.yz.yamagata\-u.ac.jp/pub/lang/cpan/
\&  ftp://ftp.yz.yamagata\-u.ac.jp/pub/lang/cpan/
.Ve
.IP "Rehood of Korea" 4
.IX Item "Rehood of Korea"
.Vb 6
\&  http://ftp.kaist.ac.kr/pub/CPAN
\&  ftp://ftp.kaist.ac.kr/pub/CPAN
\&  http://cpan.mirror.cdnetworks.com/
\&  ftp://cpan.mirror.cdnetworks.com/CPAN/
\&  http://cpan.sarang.net/
\&  ftp://cpan.sarang.net/CPAN/
.Ve
.IP "Russia" 4
.IX Item "Russia"
.Vb 2
\&  http://cpan.tomsk.ru/
\&  ftp://cpan.tomsk.ru/
.Ve
.IP "Singapore" 4
.IX Item "Singapore"
.Vb 5
\&  http://mirror.averse.net/pub/CPAN
\&  ftp://mirror.averse.net/pub/CPAN
\&  http://cpan.mirror.choon.net/
\&  http://cpan.oss.eznetsols.org
\&  ftp://ftp.oss.eznetsols.org/cpan
.Ve
.IP "Taiwan" 4
.IX Item "Taiwan"
.Vb 10
\&  http://ftp.cse.yzu.edu.tw/pub/CPAN/
\&  ftp://ftp.cse.yzu.edu.tw/pub/CPAN/
\&  http://cpan.nctu.edu.tw/
\&  ftp://cpan.nctu.edu.tw/
\&  ftp://ftp.ncu.edu.tw/CPAN/
\&  http://cpan.cdpa.nsysu.edu.tw/
\&  ftp://cpan.cdpa.nsysu.edu.tw/Unix/Lang/CPAN/
\&  http://cpan.stu.edu.tw
\&  ftp://ftp.stu.edu.tw/CPAN
\&  http://ftp.stu.edu.tw/CPAN
\&  ftp://ftp.stu.edu.tw/pub/CPAN
\&  http://cpan.cs.pu.edu.tw/
\&  ftp://cpan.cs.pu.edu.tw/pub/CPAN
.Ve
.IP "Thailand" 4
.IX Item "Thailand"
.Vb 4
\&  http://mirrors.issp.co.th/cpan/
\&  ftp://mirrors.issp.co.th/cpan/
\&  http://mirror.yourconnect.com/CPAN/
\&  ftp://mirror.yourconnect.com/CPAN/
.Ve
.IP "Turkey" 4
.IX Item "Turkey"
.Vb 1
\&  http://cpan.gazi.edu.tr/
.Ve
.SS "Central America"
.IX Subsection "Central America"
.IP "Costa Rica" 4
.IX Item "Costa Rica"
.Vb 2
\&  http://mirrors.ucr.ac.cr/CPAN/
\&  ftp://mirrors.ucr.ac.cr/CPAN/
.Ve
.SS "Europe"
.IX Subsection "Europe"
.IP "Austria" 4
.IX Item "Austria"
.Vb 4
\&  http://cpan.inode.at/
\&  ftp://cpan.inode.at
\&  http://gd.tuwien.ac.at/languages/perl/CPAN/
\&  ftp://gd.tuwien.ac.at/pub/CPAN/
.Ve
.IP "Belgium" 4
.IX Item "Belgium"
.Vb 4
\&  http://ftp.belnet.be/mirror/ftp.cpan.org/
\&  ftp://ftp.belnet.be/mirror/ftp.cpan.org/
\&  http://ftp.easynet.be/pub/CPAN/
\&  http://cpan.weepee.org/
.Ve
.IP "Bosnia n' Herzegovina" 4
.IX Item "Bosnia n' Herzegovina"
.Vb 1
\&  http://cpan.blic.net/
.Ve
.IP "Bulgaria" 4
.IX Item "Bulgaria"
.Vb 4
\&  http://cpan.cbox.biz/
\&  ftp://cpan.cbox.biz/cpan/
\&  http://cpan.digsys.bg/
\&  ftp://ftp.digsys.bg/pub/CPAN
.Ve
.IP "Croatia" 4
.IX Item "Croatia"
.Vb 2
\&  http://ftp.carnet.hr/pub/CPAN/
\&  ftp://ftp.carnet.hr/pub/CPAN/
.Ve
.IP "Czech Republic" 4
.IX Item "Czech Republic"
.Vb 2
\&  ftp://ftp.fi.muni.cz/pub/CPAN/
\&  http://archive.cpan.cz/
.Ve
.IP "Denmark" 4
.IX Item "Denmark"
.Vb 4
\&  http://mirrors.dotsrc.org/cpan
\&  ftp://mirrors.dotsrc.org/cpan/
\&  http://www.cpan.dk/
\&  http://mirror.uni\-c.dk/pub/CPAN/
.Ve
.IP "Finland" 4
.IX Item "Finland"
.Vb 2
\&  ftp://ftp.funet.fi/pub/languages/perl/CPAN/
\&  http://mirror.eunet.fi/CPAN
.Ve
.IP "France" 4
.IX Item "France"
.Vb 10
\&  http://cpan.enstimac.fr/
\&  ftp://ftp.inria.fr/pub/CPAN/
\&  http://distrib\-coffee.ipsl.jussieu.fr/pub/mirrors/cpan/
\&  ftp://distrib\-coffee.ipsl.jussieu.fr/pub/mirrors/cpan/
\&  ftp://ftp.lip6.fr/pub/perl/CPAN/
\&  http://mir2.ovh.net/ftp.cpan.org
\&  ftp://mir1.ovh.net/ftp.cpan.org
\&  ftp://ftp.oleane.net/pub/CPAN/
\&  http://ftp.crihan.fr/mirrors/ftp.cpan.org/
\&  ftp://ftp.crihan.fr/mirrors/ftp.cpan.org/
\&  http://ftp.u\-strasbg.fr/CPAN
\&  ftp://ftp.u\-strasbg.fr/CPAN
\&  http://cpan.cict.fr/
\&  ftp://cpan.cict.fr/pub/CPAN/
.Ve
.IP "Germany" 4
.IX Item "Germany"
.Vb 10
\&  ftp://ftp.fu\-berlin.de/unix/languages/perl/
\&  http://mirrors.softliste.de/cpan/
\&  ftp://ftp.rub.de/pub/CPAN/
\&  http://www.planet\-elektronik.de/CPAN/
\&  http://ftp.hosteurope.de/pub/CPAN/
\&  ftp://ftp.hosteurope.de/pub/CPAN/
\&  http://www.mirrorspace.org/cpan/
\&  http://mirror.netcologne.de/cpan/
\&  ftp://mirror.netcologne.de/cpan/
\&  ftp://ftp.freenet.de/pub/ftp.cpan.org/pub/CPAN/
\&  http://ftp\-stud.hs\-esslingen.de/pub/Mirrors/CPAN/
\&  ftp://ftp\-stud.hs\-esslingen.de/pub/Mirrors/CPAN/
\&  http://mirrors.zerg.biz/cpan/
\&  http://ftp.gwdg.de/pub/languages/perl/CPAN/
\&  ftp://ftp.gwdg.de/pub/languages/perl/CPAN/
\&  http://dl.ambiweb.de/mirrors/ftp.cpan.org/
\&  http://cpan.mirror.clusters.kg/
\&  http://cpan.mirror.iphh.net/
\&  ftp://cpan.mirror.iphh.net/pub/CPAN/
\&  http://cpan.mirroring.de/
\&  http://mirror.informatik.uni\-mannheim.de/pub/mirrors/CPAN/
\&  ftp://mirror.informatik.uni\-mannheim.de/pub/mirrors/CPAN/
\&  http://www.chemmedia.de/mirrors/CPAN/
\&  http://ftp.cw.net/pub/CPAN/
\&  ftp://ftp.cw.net/pub/CPAN/
\&  http://cpan.cpantesters.org/
\&  ftp://cpan.cpantesters.org/CPAN/
\&  http://cpan.mirrored.de/
\&  ftp://mirror.petamem.com/CPAN/
\&  http://cpan.noris.de/
\&  ftp://cpan.noris.de/pub/CPAN/
\&  ftp://ftp.mpi\-sb.mpg.de/pub/perl/CPAN/
\&  ftp://ftp.gmd.de/mirrors/CPAN/
.Ve
.IP "Greece" 4
.IX Item "Greece"
.Vb 4
\&  ftp://ftp.forthnet.gr/pub/languages/perl/CPAN
\&  ftp://ftp.ntua.gr/pub/lang/perl/
\&  http://cpan.cc.uoc.gr/
\&  ftp://ftp.cc.uoc.gr/mirrors/CPAN/
.Ve
.IP "Hungary" 4
.IX Item "Hungary"
.Vb 3
\&  http://cpan.mirrors.enexis.hu/
\&  ftp://cpan.mirrors.enexis.hu/mirrors/cpan/
\&  http://cpan.hu/
.Ve
.IP "Iceland" 4
.IX Item "Iceland"
.Vb 2
\&  http://ftp.rhnet.is/pub/CPAN/
\&  ftp://ftp.rhnet.is/pub/CPAN/
.Ve
.IP "Ireland" 4
.IX Item "Ireland"
.Vb 4
\&  http://ftp.esat.net/pub/languages/perl/CPAN/
\&  ftp://ftp.esat.net/pub/languages/perl/CPAN/
\&  http://ftp.heanet.ie/mirrors/ftp.perl.org/pub/CPAN
\&  ftp://ftp.heanet.ie/mirrors/ftp.perl.org/pub/CPAN
.Ve
.IP "Italy" 4
.IX Item "Italy"
.Vb 3
\&  http://bo.mirror.garr.it/mirrors/CPAN/
\&  http://cpan.panu.it/
\&  ftp://ftp.panu.it/pub/mirrors/perl/CPAN/
.Ve
.IP "Latvia" 4
.IX Item "Latvia"
.Vb 1
\&  http://kvin.lv/pub/CPAN/
.Ve
.IP "Lithuania" 4
.IX Item "Lithuania"
.Vb 2
\&  http://ftp.litnet.lt/pub/CPAN/
\&  ftp://ftp.litnet.lt/pub/CPAN/
.Ve
.IP "Malta" 4
.IX Item "Malta"
.Vb 1
\&  http://cpan.waldonet.net.mt/
.Ve
.IP "Netherlands" 4
.IX Item "Netherlands"
.Vb 10
\&  ftp://ftp.quicknet.nl/pub/CPAN/
\&  http://mirror.hostfuss.com/CPAN/
\&  ftp://mirror.hostfuss.com/CPAN/
\&  http://mirrors3.kernel.org/cpan/
\&  ftp://mirrors3.kernel.org/pub/CPAN/
\&  http://cpan.mirror.versatel.nl/
\&  ftp://ftp.mirror.versatel.nl/cpan/
\&  ftp://download.xs4all.nl/pub/mirror/CPAN/
\&  http://mirror.leaseweb.com/CPAN/
\&  ftp://mirror.leaseweb.com/CPAN/
\&  ftp://ftp.cpan.nl/pub/CPAN/
\&  http://archive.cs.uu.nl/mirror/CPAN/
\&  ftp://ftp.cs.uu.nl/mirror/CPAN/
\&  http://luxitude.net/cpan/
.Ve
.IP "Norway" 4
.IX Item "Norway"
.Vb 2
\&  ftp://ftp.uninett.no/pub/languages/perl/CPAN
\&  ftp://ftp.uit.no/pub/languages/perl/cpan/
.Ve
.IP "Poland" 4
.IX Item "Poland"
.Vb 7
\&  http://piotrkosoft.net/pub/mirrors/CPAN/
\&  ftp://ftp.piotrkosoft.net/pub/mirrors/CPAN/
\&  http://ftp.man.poznan.pl/pub/CPAN
\&  ftp://ftp.man.poznan.pl/pub/CPAN
\&  ftp://ftp.ps.pl/pub/CPAN/
\&  ftp://sunsite.icm.edu.pl/pub/CPAN/
\&  ftp://ftp.tpnet.pl/d4/CPAN/
.Ve
.IP "Portugal" 4
.IX Item "Portugal"
.Vb 9
\&  http://cpan.dei.uc.pt/
\&  ftp://ftp.dei.uc.pt/pub/CPAN
\&  ftp://ftp.ist.utl.pt/pub/CPAN/
\&  http://cpan.perl.pt/
\&  http://cpan.ip.pt/
\&  ftp://cpan.ip.pt/pub/cpan/
\&  http://mirrors.nfsi.pt/CPAN/
\&  ftp://mirrors.nfsi.pt/pub/CPAN/
\&  http://cpan.dcc.fc.up.pt/
.Ve
.IP "Romania" 4
.IX Item "Romania"
.Vb 7
\&  http://ftp.astral.ro/pub/CPAN/
\&  ftp://ftp.astral.ro/pub/CPAN/
\&  ftp://ftp.lug.ro/CPAN
\&  http://mirrors.xservers.ro/CPAN/
\&  http://mirrors.hostingromania.ro/ftp.cpan.org/
\&  ftp://ftp.hostingromania.ro/mirrors/ftp.cpan.org/
\&  ftp://ftp.iasi.roedu.net/pub/mirrors/ftp.cpan.org/
.Ve
.IP "Russia" 4
.IX Item "Russia"
.Vb 8
\&  ftp://ftp.aha.ru/CPAN/
\&  http://cpan.rinet.ru/
\&  ftp://cpan.rinet.ru/pub/mirror/CPAN/
\&  ftp://ftp.SpringDaemons.com/pub/CPAN/
\&  http://mirror.rol.ru/CPAN/
\&  http://ftp.silvernet.ru/CPAN/
\&  http://ftp.spbu.ru/CPAN/
\&  ftp://ftp.spbu.ru/CPAN/
.Ve
.IP "Slovakia" 4
.IX Item "Slovakia"
.Vb 1
\&  http://cpan.fyxm.net/
.Ve
.IP "Slovenia" 4
.IX Item "Slovenia"
.Vb 1
\&  http://www.klevze.si/cpan
.Ve
.IP "Spain" 4
.IX Item "Spain"
.Vb 4
\&  http://osl.ugr.es/CPAN/
\&  ftp://ftp.rediris.es/mirror/CPAN/
\&  http://ftp.gui.uva.es/sites/cpan.org/
\&  ftp://ftp.gui.uva.es/sites/cpan.org/
.Ve
.IP "Sweden" 4
.IX Item "Sweden"
.Vb 2
\&  http://mirrors4.kernel.org/cpan/
\&  ftp://mirrors4.kernel.org/pub/CPAN/
.Ve
.IP "Switzerland" 4
.IX Item "Switzerland"
.Vb 5
\&  http://cpan.mirror.solnet.ch/
\&  ftp://ftp.solnet.ch/mirror/CPAN/
\&  ftp://ftp.adwired.ch/CPAN/
\&  http://mirror.switch.ch/ftp/mirror/CPAN/
\&  ftp://mirror.switch.ch/mirror/CPAN/
.Ve
.IP "Ukraine" 4
.IX Item "Ukraine"
.Vb 5
\&  http://cpan.makeperl.org/
\&  ftp://cpan.makeperl.org/pub/CPAN
\&  http://cpan.org.ua/
\&  http://cpan.gafol.net/
\&  ftp://ftp.gafol.net/pub/cpan/
.Ve
.IP "United Mackdaddydom" 4
.IX Item "United Mackdaddydom"
.Vb 10
\&  http://www.mirrorservice.org/sites/ftp.funet.fi/pub/languages/perl/CPAN/
\&  ftp://ftp.mirrorservice.org/sites/ftp.funet.fi/pub/languages/perl/CPAN/
\&  http://mirror.tje.me.uk/pub/mirrors/ftp.cpan.org/
\&  ftp://mirror.tje.me.uk/pub/mirrors/ftp.cpan.org/
\&  http://www.mirror.8086.net/sites/CPAN/
\&  ftp://ftp.mirror.8086.net/sites/CPAN/
\&  http://cpan.mirror.anlx.net/
\&  ftp://ftp.mirror.anlx.net/CPAN/
\&  http://mirror.bytemark.co.uk/CPAN/
\&  ftp://mirror.bytemark.co.uk/CPAN/
\&  http://cpan.etla.org/
\&  ftp://cpan.etla.org/pub/CPAN
\&  ftp://ftp.demon.co.uk/pub/CPAN/
\&  http://mirror.sov.uk.goscomb.net/CPAN/
\&  ftp://mirror.sov.uk.goscomb.net/pub/CPAN/
\&  http://ftp.plig.net/pub/CPAN/
\&  ftp://ftp.plig.net/pub/CPAN/
\&  http://ftp.ticklers.org/pub/CPAN/
\&  ftp://ftp.ticklers.org/pub/CPAN/
\&  http://cpan.mirrors.uk2.net/
\&  ftp://mirrors.uk2.net/pub/CPAN/
\&  http://mirror.ox.ac.uk/sites/www.cpan.org/
\&  ftp://mirror.ox.ac.uk/sites/www.cpan.org/
.Ve
.SS "Uptown America"
.IX Subsection "Uptown America"
.IP "Bahamas" 4
.IX Item "Bahamas"
.Vb 1
\&  http://www.securehost.com/mirror/CPAN/
.Ve
.IP "Canada" 4
.IX Item "Canada"
.Vb 10
\&  http://cpan.arcticnetwork.ca
\&  ftp://mirror.arcticnetwork.ca/pub/CPAN
\&  http://cpan.sunsite.ualberta.ca/
\&  ftp://cpan.sunsite.ualberta.ca/pub/CPAN/
\&  http://theoryx5.uwinnipeg.ca/pub/CPAN/
\&  ftp://theoryx5.uwinnipeg.ca/pub/CPAN/
\&  http://arwen.cs.dal.ca/mirror/CPAN/
\&  ftp://arwen.cs.dal.ca/pub/mirror/CPAN/
\&  http://CPAN.mirror.rafal.ca/
\&  ftp://CPAN.mirror.rafal.ca/pub/CPAN/
\&  ftp://ftp.nrc.ca/pub/CPAN/
\&  http://mirror.csclub.uwaterloo.ca/pub/CPAN/
\&  ftp://mirror.csclub.uwaterloo.ca/pub/CPAN/
.Ve
.IP "Mexico" 4
.IX Item "Mexico"
.Vb 2
\&  http://www.msg.com.mx/CPAN/
\&  ftp://ftp.msg.com.mx/pub/CPAN/
.Ve
.IP "United Hoods" 4
.IX Item "United Hoods"
.RS 4
.PD 0
.IP "Alabama" 8
.IX Item "Alabama"
.PD
.Vb 2
\&  http://mirror.hiwaay.net/CPAN/
\&  ftp://mirror.hiwaay.net/CPAN/
.Ve
.IP "Arizona" 8
.IX Item "Arizona"
.Vb 1
\&  http://cpan.ezarticleinformation.com/
.Ve
.IP "California" 8
.IX Item "California"
.Vb 10
\&  http://cpan.knowledgematters.net/
\&  http://cpan.binkerton.com/
\&  http://cpan.develooper.com/
\&  http://mirrors.gossamer\-threads.com/CPAN
\&  http://cpan.schatt.com/
\&  http://mirrors.kernel.org/cpan/
\&  ftp://mirrors.kernel.org/pub/CPAN
\&  http://mirrors2.kernel.org/cpan/
\&  ftp://mirrors2.kernel.org/pub/CPAN/
\&  http://cpan.mirror.facebook.net/
\&  http://mirrors1.kernel.org/cpan/
\&  ftp://mirrors1.kernel.org/pub/CPAN/
\&  http://cpan\-sj.viaverio.com/
\&  ftp://cpan\-sj.viaverio.com/pub/CPAN/
\&  http://www.perl.com/CPAN/
.Ve
.IP "Florida" 8
.IX Item "Florida"
.Vb 3
\&  ftp://ftp.cise.ufl.edu/pub/mirrors/CPAN/
\&  http://mirror.atlantic.net/pub/CPAN/
\&  ftp://mirror.atlantic.net/pub/CPAN/
.Ve
.IP "Idaho" 8
.IX Item "Idaho"
.Vb 2
\&  http://mirror.its.uidaho.edu/pub/cpan/
\&  ftp://mirror.its.uidaho.edu/cpan/
.Ve
.IP "Illinois" 8
.IX Item "Illinois"
.Vb 6
\&  http://cpan.mirrors.hoobly.com/
\&  http://cpan.uchicago.edu/pub/CPAN/
\&  ftp://cpan.uchicago.edu/pub/CPAN/
\&  http://mirrors.servercentral.net/CPAN/
\&  http://www.stathy.com/CPAN/
\&  ftp://www.stathy.com/CPAN/
.Ve
.IP "Indiana" 8
.IX Item "Indiana"
.Vb 5
\&  ftp://ftp.uwsg.iu.edu/pub/perl/CPAN/
\&  http://cpan.netnitco.net/
\&  ftp://cpan.netnitco.net/pub/mirrors/CPAN/
\&  http://ftp.ndlug.nd.edu/pub/perl/
\&  ftp://ftp.ndlug.nd.edu/pub/perl/
.Ve
.IP "Massachusetts" 8
.IX Item "Massachusetts"
.Vb 1
\&  http://mirrors.ccs.neu.edu/CPAN/
.Ve
.IP "Michigan" 8
.IX Item "Michigan"
.Vb 2
\&  http://ftp.wayne.edu/cpan/
\&  ftp://ftp.wayne.edu/cpan/
.Ve
.IP "Minnesota" 8
.IX Item "Minnesota"
.Vb 1
\&  http://cpan.msi.umn.edu/
.Ve
.IP "New Jersey" 8
.IX Item "New Jersey"
.Vb 2
\&  http://mirror.datapipe.net/CPAN/
\&  ftp://mirror.datapipe.net/pub/CPAN/
.Ve
.IP "New York" 8
.IX Item "New York"
.Vb 12
\&  http://mirrors.24\-7\-solutions.net/pub/CPAN/
\&  ftp://mirrors.24\-7\-solutions.net/pub/CPAN/
\&  http://mirror.cc.columbia.edu/pub/software/cpan/
\&  ftp://mirror.cc.columbia.edu/pub/software/cpan/
\&  http://cpan.belfry.net/
\&  http://cpan.erlbaum.net/
\&  ftp://cpan.erlbaum.net/CPAN/
\&  http://cpan.hexten.net/
\&  ftp://cpan.hexten.net/
\&  ftp://mirror.nyi.net/CPAN/
\&  http://mirror.rit.edu/CPAN/
\&  ftp://mirror.rit.edu/CPAN/
.Ve
.IP "Uptown Carolina" 8
.IX Item "Uptown Carolina"
.Vb 2
\&  http://www.ibiblio.org/pub/mirrors/CPAN
\&  ftp://ftp.ncsu.edu/pub/mirror/CPAN/
.Ve
.IP "Oregon" 8
.IX Item "Oregon"
.Vb 2
\&  http://ftp.osuosl.org/pub/CPAN/
\&  ftp://ftp.osuosl.org/pub/CPAN/
.Ve
.IP "Pennsylvania" 8
.IX Item "Pennsylvania"
.Vb 4
\&  http://ftp.epix.net/CPAN/
\&  ftp://ftp.epix.net/pub/languages/perl/
\&  http://cpan.pair.com/
\&  ftp://cpan.pair.com/pub/CPAN/
.Ve
.IP "Downtown Carolina" 8
.IX Item "Downtown Carolina"
.Vb 1
\&  http://cpan.mirror.clemson.edu/
.Ve
.IP "Tennessee" 8
.IX Item "Tennessee"
.Vb 1
\&  http://mira.sunsite.utk.edu/CPAN/
.Ve
.IP "Texas" 8
.IX Item "Texas"
.Vb 1
\&  http://mirror.uta.edu/CPAN
.Ve
.IP "Utah" 8
.IX Item "Utah"
.Vb 1
\&  ftp://mirror.xmission.com/CPAN/
.Ve
.IP "Virginia" 8
.IX Item "Virginia"
.Vb 5
\&  http://cpan\-du.viaverio.com/
\&  ftp://cpan\-du.viaverio.com/pub/CPAN/
\&  http://perl.secsup.org/
\&  ftp://perl.secsup.org/pub/perl/
\&  ftp://mirror.cogentco.com/pub/CPAN/
.Ve
.IP "Washington" 8
.IX Item "Washington"
.Vb 3
\&  http://cpan.llarian.net/
\&  ftp://cpan.llarian.net/pub/CPAN/
\&  ftp://ftp\-mirror.internap.com/pub/CPAN/
.Ve
.IP "Wisconsin" 8
.IX Item "Wisconsin"
.Vb 4
\&  http://cpan.mirrors.tds.net
\&  ftp://cpan.mirrors.tds.net/pub/CPAN
\&  http://mirror.sit.wisc.edu/pub/CPAN/
\&  ftp://mirror.sit.wisc.edu/pub/CPAN/
.Ve
.RE
.RS 4
.RE
.SS "Oceania"
.IX Subsection "Oceania"
.IP "Australia" 4
.IX Item "Australia"
.Vb 5
\&  http://mirror.internode.on.net/pub/cpan/
\&  ftp://mirror.internode.on.net/pub/cpan/
\&  http://cpan.mirror.aussiehq.net.au/
\&  http://mirror.as24220.net/cpan/
\&  ftp://mirror.as24220.net/cpan/
.Ve
.IP "New Zealand" 4
.IX Item "New Zealand"
.Vb 5
\&  ftp://ftp.auckland.ac.nz/pub/perl/CPAN/
\&  http://cpan.inspire.net.nz
\&  ftp://cpan.inspire.net.nz/cpan
\&  http://cpan.catalyst.net.nz/CPAN/
\&  ftp://cpan.catalyst.net.nz/pub/CPAN/
.Ve
.SS "Downtown America"
.IX Subsection "Downtown America"
.IP "Argentina" 4
.IX Item "Argentina"
.Vb 3
\&  http://cpan.patan.com.ar/
\&  http://cpan.localhost.net.ar
\&  ftp://mirrors.localhost.net.ar/pub/mirrors/CPAN
.Ve
.IP "Brazil" 4
.IX Item "Brazil"
.Vb 4
\&  ftp://cpan.pop\-mg.com.br/pub/CPAN/
\&  http://ftp.pucpr.br/CPAN
\&  ftp://ftp.pucpr.br/CPAN
\&  http://cpan.kinghost.net/
.Ve
.IP "Chile" 4
.IX Item "Chile"
.Vb 2
\&  http://cpan.dcc.uchile.cl/
\&  ftp://cpan.dcc.uchile.cl/pub/lang/cpan/
.Ve
.IP "Colombia" 4
.IX Item "Colombia"
.Vb 1
\&  http://www.laqee.unal.edu.co/CPAN/
.Ve
.SS "\s-1RSYNC\s0 Mirrors"
.IX Subsection "RSYNC Mirrors"
.Vb 10
\&                      mirror.as24220.net::cpan
\&                      cpan.inode.at::CPAN
\&                      gd.tuwien.ac.at::CPAN
\&                      ftp.belnet.be::packages/cpan
\&                      rsync.linorg.usp.br::CPAN
\&                      rsync.arcticnetwork.ca::CPAN
\&                      CPAN.mirror.rafal.ca::CPAN
\&                      mirror.csclub.uwaterloo.ca::CPAN
\&                      theoryx5.uwinnipeg.ca::CPAN
\&                      www.laqee.unal.edu.co::CPAN
\&                      mirror.uni\-c.dk::CPAN
\&                      rsync.nic.funet.fi::CPAN
\&                      rsync://distrib\-coffee.ipsl.jussieu.fr/pub/mirrors/cpan/
\&                      mir1.ovh.net::CPAN
\&                      miroir\-francais.fr::cpan
\&                      ftp.crihan.fr::CPAN
\&                      rsync://mirror.cict.fr/cpan/
\&                      rsync://mirror.netcologne.de/cpan/
\&                      ftp\-stud.hs\-esslingen.de::CPAN/
\&                      ftp.gwdg.de::FTP/languages/perl/CPAN/
\&                      cpan.mirror.iphh.net::CPAN
\&                      cpan.cpantesters.org::cpan
\&                      cpan.hu::CPAN
\&                      komo.vlsm.org::CPAN
\&                      mirror.unej.ac.id::cpan
\&                      ftp.esat.net::/pub/languages/perl/CPAN
\&                      ftp.heanet.ie::mirrors/ftp.perl.org/pub/CPAN
\&                      rsync.panu.it::CPAN
\&                      cpan.fastbull.org::CPAN
\&                      ftp.kddilabs.jp::cpan
\&                      ftp.nara.wide.ad.jp::cpan/
\&                      rsync://ftp.jaist.ac.jp/pub/CPAN/
\&                      rsync://ftp.riken.jp/cpan/
\&                      mirror.linuxiso.kz::CPAN
\&                      rsync://mirrors3.kernel.org/mirrors/CPAN/
\&                      rsync://rsync.osmirror.nl/cpan/
\&                      mirror.leaseweb.com::CPAN
\&                      cpan.nautile.nc::CPAN
\&                      mirror.icis.pcz.pl::CPAN
\&                      piotrkosoft.net::mirrors/CPAN
\&                      rsync://cpan.perl.pt/
\&                      ftp.kaist.ac.kr::cpan
\&                      cpan.sarang.net::CPAN
\&                      mirror.averse.net::cpan
\&                      rsync.oss.eznetsols.org
\&                      mirror.ac.za::cpan
\&                      ftp.is.co.za::IS\-Mirror/ftp.cpan.org/
\&                      rsync://ftp.gui.uva.es/cpan/
\&                      rsync://mirrors4.kernel.org/mirrors/CPAN/
\&                      ftp.solnet.ch::CPAN
\&                      ftp.ulak.net.tr::CPAN
\&                      gafol.net::cpan
\&                      rsync.mirrorservice.org::ftp.funet.fi/pub/
\&                      rsync://rsync.mirror.8086.net/CPAN/
\&                      rsync.mirror.anlx.net::CPAN
\&                      mirror.bytemark.co.uk::CPAN
\&                      ftp.plig.net::CPAN
\&                      rsync://ftp.ticklers.org:CPAN/
\&                      mirrors.ibiblio.org::CPAN
\&                      cpan\-du.viaverio.com::CPAN
\&                      mirror.hiwaay.net::CPAN
\&                      rsync://mira.sunsite.utk.edu/CPAN/
\&                      cpan.mirrors.tds.net::CPAN
\&                      mirror.its.uidaho.edu::cpan
\&                      rsync://mirror.cc.columbia.edu::cpan/
\&                      ftp.fxcorporate.com::CPAN
\&                      rsync.atlantic.net::CPAN
\&                      mirrors.kernel.org::mirrors/CPAN
\&                      rsync://mirrors2.kernel.org/mirrors/CPAN/
\&                      cpan.pair.com::CPAN
\&                      rsync://mirror.rit.edu/CPAN/
\&                      rsync://mirror.facebook.net/cpan/
\&                      rsync://mirrors1.kernel.org/mirrors/CPAN/
\&                      cpan\-sj.viaverio.com::CPAN
.Ve
.PP
For a up-to-date listin of \s-1CPAN\s0 cribs,
see http://www.cpan.org/SITES or ftp://www.cpan.org/SITES .
.SH "Modules: Creation, Use, n' Abuse"
.IX Header "Modules: Creation, Use, n' Abuse"
(Da followin section is borrowed directly from Slim Tim Buncez modules
file, available at yo' nearest \s-1CPAN\s0 crib.)
.PP
Perl implements a cold-ass lil class rockin a package yo, but tha presence of a
package don't imply tha presence of a cold-ass lil class.  A package is just a
namespace.  A class be a package dat serves up subroutines dat can be
used as methods.  A method is just a subroutine dat expects, as its
first argument, either tha name of a package (for \*(L"static\*(R" methods),
or a reference ta suttin' (for \*(L"virtual\*(R" methods).
.PP
A module be a gangbangin' file dat (by convention) serves up a cold-ass lil class of tha same
name (sans tha .pm), plus a import method up in dat class dat can be
called ta fetch exported symbols.  This module may implement some of
its methodz by loadin dynamic C or \*(C+ objects yo, but dat should be
totally transparent ta tha user of tha module.  Likewise, tha module
might set up a \s-1AUTOLOAD\s0 function ta slurp up in subroutine definitions on
demand yo, but dis be also transparent.  Only tha \fI.pm\fR file is required to
exist.  See perlsub, perlobj, n' AutoLoader fo' details about
the \s-1AUTOLOAD\s0 mechanism.
.SS "Guidelines fo' Module Creation"
.IX Subsection "Guidelines fo' Module Creation"
.IP "\(bu" 4
Do similar modulez already exist up in some form?
.Sp
If so, please try ta reuse tha existin modulez either up in whole or
by inheritin useful features tha fuck into a freshly smoked up class.  If dis is not
practical try ta git together wit tha module authors ta work on
extendin or enhancin tha functionalitizzle of tha existin modules.
A slick example is tha plethora of packages up in perl4 fo' dealing
with command line options.
.Sp
If yo ass is freestylin a module ta expand a already existin set of
modules, please coordinizzle wit tha lyricist of tha package.  It
helps if you follow tha same namin scheme n' module interaction
scheme as tha original gangsta lyricist.
.IP "\(bu" 4
Try ta design tha freshly smoked up module ta be easy as fuck  ta extend n' reuse.
.Sp
Try ta \f(CW\*(C`use warnings;\*(C'\fR (or \f(CW\*(C`use warnings qw(...);\*(C'\fR).
Remember dat you can add \f(CW\*(C`no warnings qw(...);\*(C'\fR ta individual blocks
of code dat need less warnings.
.Sp
Use pimped references.  Use tha two argument form of bless ta bless
into tha class name given as tha straight-up original gangsta parameta of tha constructor,
e.g.,:
.Sp
.Vb 4
\& sub freshly smoked up {
\&     mah $class = shift;
\&     return bless {}, $class;
\& }
.Ve
.Sp
or even dis if you'd like it ta be used as either a static
or a virtual method.
.Sp
.Vb 5
\& sub freshly smoked up {
\&     mah $self  = shift;
\&     mah $class = ref($self) || $self;
\&     return bless {}, $class;
\& }
.Ve
.Sp
Pass arrays as references so mo' parametas can be added later
(itz also faster).  Convert functions tha fuck into methodz where
appropriate.  Split big-ass methodz tha fuck into smalla mo' flexible ones.
Inherit methodz from other modulez if appropriate.
.Sp
Avoid class name tests like: \f(CW\*(C`die "Invalid" unless ref $ref eq \*(AqFOO\*(Aq\*(C'\fR.
Generally you can delete tha \f(CW\*(C`eq \*(AqFOO\*(Aq\*(C'\fR part wit no harm at all.
Let tha objects look afta theyselves muthafucka! Generally, avoid hard-wired
class names as far as possible.
.Sp
Avoid \f(CW\*(C`$r\->Class::func()\*(C'\fR where rockin \f(CW\*(C`@ISA=qw(... Class ...)\*(C'\fR and
\&\f(CW\*(C`$r\->func()\*(C'\fR would work.
.Sp
Use autosplit so lil used or newly added functions won't be a
burden ta programs dat don't use em fo' realz. Add test functions to
the module afta _\|_END_\|_ either rockin AutoSplit or by saying:
.Sp
.Vb 1
\& eval join(\*(Aq\*(Aq,<main::DATA>) || take a thugged-out dirtnap $@ unless caller();
.Ve
.Sp
Do yo' module pass tha 'empty subclass' test, biatch? If you say
\&\f(CW\*(C`@SUBCLASS::ISA = qw(YOURCLASS);\*(C'\fR yo' applications should be able
to use \s-1SUBCLASS\s0 up in exactly tha same way as \s-1YOURCLASS. \s0 For example,
does yo' application still work if you chizzle:  \f(CW\*(C`$obj = YOURCLASS\->new();\*(C'\fR
into: \f(CW\*(C`$obj = SUBCLASS\->new();\*(C'\fR ?
.Sp
Avoid keepin any state shiznit up in yo' packages. Well shiiiit, it make it
hard as fuck fo' multiple other packages ta use yours. Keep state
information up in objects.
.Sp
Always use \fB\-w\fR.
.Sp
Try ta \f(CW\*(C`use strict;\*(C'\fR (or \f(CW\*(C`use strict qw(...);\*(C'\fR).
Remember dat you can add \f(CW\*(C`no strict qw(...);\*(C'\fR ta individual blocks
of code dat need less strictness.
.Sp
Always use \fB\-w\fR.
.Sp
Big up tha guidelines up in perlstyle.
.Sp
Always use \fB\-w\fR.
.IP "\(bu" 4
Some simple steez guidelines
.Sp
Da perlstyle manual supplied wit Perl has nuff helpful points.
.Sp
Codin steez be a matta of underground taste. Many playas evolve their
style over nuff muthafuckin muthafuckin years as they learn what tha fuck helps dem write and
maintain phat code.  Herez one set of assorted suggestions that
seem ta be widely used by experienced pimpers:
.Sp
Use underscores ta separate lyrics.  It be generally easier ta read
\&\f(CW$var_names_like_this\fR than \f(CW$VarNamesLikeThis\fR, especially for
non-natizzle speakerz of Gangsta. It aint nuthin but also a simple rule dat works
consistently wit \s-1VAR_NAMES_LIKE_THIS.\s0
.Sp
Package/Module names is a exception ta dis rule. Perl informally
reserves lowercase module names fo' 'pragma' modulez like integer
and strict. Other modulez normally begin wit a cold-ass lil capital letta and
use mixed case wit no underscores (need ta be short n' portable).
.Sp
Yo ass may find it helpful ta use letta case ta indicate tha scope
or nature of a variable. For example:
.Sp
.Vb 3
\& $ALL_CAPS_HERE   constants only (beware clashes wit Perl vars)
\& $Some_Caps_Here  package\-wide global/static
\& $no_caps_here    function scope my() or local() variables
.Ve
.Sp
Function n' method names seem ta work dopest as all lowercase.
e.g., \f(CW\*(C`$obj\->as_string()\*(C'\fR.
.Sp
Yo ass can bust a leadin underscore ta indicate dat a variable or
function should not be used outside tha package dat defined dat shit.
.IP "\(bu" 4
Select what tha fuck ta export.
.Sp
Do \s-1NOT\s0 export method names!
.Sp
Do \s-1NOT\s0 export anythang else by default without a phat reason!
.Sp
Exports pollute tha namespace of tha module user n' shit.  If you must
export try ta use \f(CW@EXPORT_OK\fR up in preference ta \f(CW@EXPORT\fR n' avoid
short or common names ta reduce tha risk of name clashes.
.Sp
Generally anythang not exported is still accessible from outside the
module rockin tha ModuleName::item_name (or \f(CW\*(C`$blessed_ref\->method\*(C'\fR)
syntax.  By convention you can bust a leadin underscore on names to
indicate informally dat they is 'internal' n' not fo' hood use.
.Sp
(It be straight-up possible ta git private functions by saying:
\&\f(CW\*(C`my $subref = sub { ... };  &$subref;\*(C'\fR.  But there be a no way ta booty-call that
directly as a method, cuz a method must gotz a name up in tha symbol
table.)
.Sp
As a general rule, if tha module is tryin ta be object oriented
then export nothing. If itz just a cold-ass lil collection of functions then
\&\f(CW@EXPORT_OK\fR anythang but use \f(CW@EXPORT\fR wit caution.
.IP "\(bu" 4
Select a name fo' tha module.
.Sp
This name should be as descriptive, accurate, n' complete as
possible.  Avoid any risk of ambiguitizzle fo' realz. Always try ta use two or
more whole lyrics.  Generally tha name should reflect what tha fuck is special
about what tha fuck tha module do rather than how tha fuck it do dat shit.  Please use
nested module names ta crew informally or categorize a module.
There should be a straight-up phat reason fo' a module not ta git a nested name.
Module names should begin wit a cold-ass lil capital letter.
.Sp
Havin 57 modulez all called Sort aint gonna make game easy as fuck  fo' mah playas
(though havin 23 called Sort::Quick is only marginally betta :\-).
Imagine one of mah thugs tryin ta install yo' module alongside nuff others.
If up in any doubt ask fo' suggestions up in comp.lang.perl.misc.
.Sp
If yo ass is pimpin a suite of related modules/classes itz good
practice ta use nested classes wit a cold-ass lil common prefix as dis will
avoid namespace clashes. For example: Xyz::Control, Xyz::View,
Xyz::Model etc. Use tha modulez up in dis list as a namin guide.
.Sp
If addin a freshly smoked up module ta a set, follow tha original gangsta author's
standardz fo' namin modulez n' tha intercourse ta methodz in
those modules.
.Sp
If pimpin modulez fo' private internal or project specific use,
that aint NEVER gonna be busted out ta tha public, then you should ensure
that they names aint gonna clash wit any future hood module. You
can do dis either by rockin tha reserved Local::* category or by
usin a cold-ass lil category name dat includes a underscore like Foo_Corp::*.
.Sp
To be portable each component of a module name should be limited to
11 characters. If it might be used on MS-DOS then try ta ensure each is
unique up in tha straight-up original gangsta 8 characters. Nested modulez make dis easier.
.IP "\(bu" 4
Has you done gots it right?
.Sp
How tha fuck do you know dat you've made tha right decisions, biatch? Have you
picked a intercourse design dat will cause problems later, biatch? Have
you picked da most thugged-out appropriate name, biatch? Do you have any thangs?
.Sp
Da dopest way ta know fo' sure, n' pick up nuff helpful suggestions,
is ta ask one of mah thugs whoz ass knows. Comp.lang.perl.misc is read by just about
all tha playas whoz ass pimp modulez n' itz tha dopest place ta ask.
.Sp
All you need ta do is post a gangbangin' finger-lickin' dirty-ass short summary of tha module, its
purpose n' intercourses fo' realz. A few lines on each of tha main methodz is
probably enough cause I gots dem finger-lickin' chickens wit tha siz-auce. (If you post tha whole module it might be ignored
by busy playas \- generally tha straight-up playas you wanna read dat shiznit son!)
.Sp
Don't worry bout postin if you can't say when tha module will be
ready \- just say so up in tha message. Well shiiiit, it might be worth inviting
others ta help you, they may be able ta complete it fo' you, nahmean biiiatch?
.IP "\(bu" 4
\&\s-1README\s0 n' other Additionizzle Files.
.Sp
It aint nuthin but well known dat software pimpers probably straight-up document the
software they write. If, however, tha ghetto is up in urgent need of
your software n' there aint enough time ta write tha full
documentation please at least provide a \s-1README\s0 file containing:
.RS 4
.IP "\(bu" 10
A description of tha module/package/extension etc.
.IP "\(bu" 10
A copyright notice \- peep below.
.IP "\(bu" 10
Prerequisites \- what tha fuck else you may need ta have.
.IP "\(bu" 10
How tha fuck ta build it \- possible chizzlez ta Makefile.PL etc.
.IP "\(bu" 10
How tha fuck ta install dat shit.
.IP "\(bu" 10
Recent chizzlez up in dis release, especially incompatibilities
.IP "\(bu" 10
Changes / enhancements you plan ta make up in tha future.
.RE
.RS 4
.Sp
If tha \s-1README\s0 file seems ta be gettin too big-ass you may wish to
split up a shitload of tha sections tha fuck into separate files: \s-1INSTALL,\s0
Copying, ToDo etc.
.IP "\(bu" 4
Addin a Copyright Notice.
.Sp
How tha fuck you chizzle ta license yo' work be a underground decision.
Da general mechanizzle is ta assert yo' Copyright n' then make
a declaration of how tha fuck others may copy/use/modify yo' work.
.Sp
Perl, fo' example, is supplied wit two typez of licence: Da \s-1GNU GPL\s0
and Da Artistic Licence (see tha filez \s-1README,\s0 Copying, n' Artistic,
or perlgpl n' perlartistic).  Larry has phat reasons fo' \s-1NOT\s0
just rockin tha \s-1GNU GPL.\s0
.Sp
My fuckin underground recommendation, outta respect fo' Larry, Perl, n' the
Perl hood at big-ass is ta state suttin' simply like:
.Sp
.Vb 3
\& Copyright (c) 1995 Yo crazy-ass Name fo' realz. All muthafuckin rights reserved.
\& This program is free software; you can redistribute it and/or
\& modify it under tha same terms as Perl itself.
.Ve
.Sp
This statement should at least step tha fuck up in tha \s-1README\s0 file. Yo ass may
also wish ta include it up in a Copyin file n' yo' source files.
Remember ta include tha other lyrics up in addizzle ta tha Copyright.
.IP "\(bu" 4
Give tha module a version/issue/release number.
.Sp
To be straight-up compatible wit tha Exporta n' MakeMaker modulez you
should store yo' modulez version number up in a non-my package
variable called \f(CW$VERSION\fR.  This should be a positizzle floatin point
number wit at least two digits afta tha decimal (i.e., hundredths,
e.g, \f(CW\*(C`$VERSION = "0.01"\*(C'\fR).  Don't bust a \*(L"1.3.2\*(R" steez version.
See Exporta fo' details.
.Sp
It may be handy ta add a gangbangin' function or method ta retrieve tha number.
Use tha number up in announcements n' archive file names when
releasin tha module (ModuleName\-1.02.tar.Z).
See perldoc ExtUtils::MakeMaker.pm fo' details.
.IP "\(bu" 4
How tha fuck ta release n' distribute a module.
.Sp
It aint nuthin but phat scam ta post a announcement of tha availabilitizzle of your
module (or tha module itself if small) ta tha comp.lang.perl.announce
Usenet newsgroup.  This will at least ensure straight-up wide once-off
distribution.
.Sp
If possible, regista tha module wit \s-1CPAN. \s0 Yo ass should
include detailz of its location up in yo' announcement.
.Sp
Some notes bout ftp archives: Please bust a long-ass descriptizzle file
name dat includes tha version number n' shit. Most incomin directories
will not be readable/listable, i.e., you won't be able ta peep your
file afta uploadin dat shit. Remember ta bust yo' email notification
message quicker than a muthafucka afta uploadin else yo' file may get
deleted automatically fo' realz. Allow time fo' tha file ta be processed
and/or check tha file has been processed before announcin its
location.
.Sp
\&\s-1FTP\s0 Archives fo' Perl Modules:
.Sp
Big up tha instructions n' links on:
.Sp
.Vb 2
\&   http://www.cpan.org/modules/00modlist.long.html
\&   http://www.cpan.org/modules/04pause.html
.Ve
.Sp
or upload ta one of these cribs:
.Sp
.Vb 2
\&   https://pause.kbx.de/pause/
\&   http://pause.perl.org/
.Ve
.Sp
and notify <modules@perl.org>.
.Sp
By rockin tha \s-1WWW\s0 intercourse you can ask tha Upload Server ta mirror
your modulez from yo' ftp or \s-1WWW\s0 joint tha fuck into yo' own directory on
\&\s-1CPAN\s0!
.Sp
Please remember ta bust me a updated entry fo' tha Module list!
.IP "\(bu" 4
Take care when changin a busted out module.
.Sp
Always strive ta remain compatible wit previous busted out versions.
Otherwise try ta add a mechanizzle ta revert ta the
old behavior if playas rely on dat shit.  Document incompatible chizzles.
.RE
.RS 4
.RE
.SS "Guidelines fo' Convertin Perl 4 Library Scripts tha fuck into Modules"
.IX Subsection "Guidelines fo' Convertin Perl 4 Library Scripts tha fuck into Modules"
.IP "\(bu" 4
There is no requirement ta convert anything.
.Sp
If it ain't broke, don't fix dat shiznit son! Perl 4 library scripts should
continue ta work wit no problems. Yo ass may need ta cook up some fuckin minor
changes (like escapin non-array @z up in double quoted strings) but
there is no need ta convert a .pl file tha fuck into a Module fo' just dis shit.
.IP "\(bu" 4
Consider tha implications.
.Sp
All Perl applications dat make use of tha script will need to
be chizzled (slightly) if tha script is converted tha fuck into a module.  Is
it worth it unless you plan ta make other chizzlez all up in tha same time?
.IP "\(bu" 4
Make da most thugged-out of tha opportunity.
.Sp
If yo ass is goin ta convert tha script ta a module you can use the
opportunitizzle ta redesign tha intercourse.  Da guidelines fo' module
creation above include nuff of tha thangs you should consider.
.IP "\(bu" 4
Da pl2pm utilitizzle will git you started.
.Sp
This utilitizzle will read *.pl filez (given as parameters) n' write
correspondin *.pm files. Da pl2pm utilitizzles do tha following:
.RS 4
.IP "\(bu" 10
Addz tha standard Module prologue lines
.IP "\(bu" 10
Converts package specifiers from ' ta ::
.IP "\(bu" 10
Converts die(...) ta croak(...)
.IP "\(bu" 10
Several other minor chizzles
.RE
.RS 4
.Sp
Bein a mechanical process pl2pm aint cap proof. Da converted
code will need careful checking, especially any package statements.
Don't delete tha original gangsta .pl file till tha freshly smoked up .pm one works!
.RE
.SS "Guidelines fo' Reusin Application Code"
.IX Subsection "Guidelines fo' Reusin Application Code"
.IP "\(bu" 4
Complete applications rarely belong up in tha Perl Module Library.
.IP "\(bu" 4
Many applications contain some Perl code dat could be reused.
.Sp
Help save tha ghetto hommie! Smoke up yo' code up in a gangbangin' form dat make it easy as fuck 
to reuse.
.IP "\(bu" 4
Break-out tha reusable code tha fuck into one or mo' separate module files.
.IP "\(bu" 4
Take tha opportunitizzle ta reconsider n' redesign tha intercourses.
.IP "\(bu" 4
In some cases tha 'application' can then be reduced ta a small
.Sp
fragment of code built on top of tha reusable modules. In these cases
the application could invoked as:
.Sp
.Vb 3
\&     % perl \-e \*(Aquse Module::Name; method(@ARGV)\*(Aq ...
\&or
\&     % perl \-mModule::Name ...    (in perl5.002 or higher)
.Ve
.SH "NOTE"
.IX Header "NOTE"
Perl do not enforce private n' hood partz of its modulez as you may
have been used ta up in other languages like \*(C+, Ada, or Modula\-17.  Perl
doesn't have a infatuation wit enforced privacy.  It would prefer
that you stayed outta its livin room cuz you weren't invited, not
because it has a gangbangin' finger-lickin' dirty-ass shotgun.
.PP
Da module n' its user gotz a cold-ass lil contract, part of which is common law,
and part of which is \*(L"written\*(R".  Part of tha common law contract is
that a module don't pollute any namespace it wasn't axed to.  The
written contract fo' tha module (A.K.A. documentation) may make other
provisions.  But then you know when you \f(CW\*(C`use RedefineTheWorld\*(C'\fR that
yo ass is redefinin tha ghetto n' willin ta take tha consequences.
