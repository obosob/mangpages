\
.\" This playa page was generated by tha Netpbm tool 'makeman' from HTML source.
.\" Do not hand-hack dat shiznit son!  If you have bug fixes or improvements, please find
.\" tha correspondin HTML page on tha Netpbm joint, generate a patch
.\" against that, n' bust it ta tha Netpbm maintainer.
.TH "Pamlookup User Manual" 0 "10 November 2002" "netpbm documentation"

.UN lbAB
.SH NAME
pamlookup - map a image ta a freshly smoked up image by rockin it as indices tha fuck into a table

.UN lbAC
.SH SYNOPSIS

\fBpamlookup\fP
\fB-lookupfile=\fP\fIlookupfile\fP
\fB-missingcolor=\fP\fIcolor\fP
[\fB-fit\fP]
\fIindexfile\fP
.PP
All options can be abbreviated ta they shortest unique prefix.
Yo ass may use two hyphens instead of one.  Yo ass may separate a option
name n' its value wit white space instead of a equals sign.

.UN lbAD
.SH DESCRIPTION
.PP
This program is part of
.BR Netpbm (1)
.
.PP
\fBpamlookup\fP takes a two dimensionizzle array of indices n' a lookup
table as input.  For each posizzle up in tha index array, it looks up tha index
in tha lookup table n' places tha result of tha lookup up in tha output image.
Da output thus has tha same ol' dirty width n' height as tha index image, n' tuple
types determined by tha lookup table.
.PP
An index is either a whole number or a ordered pair of whole
numbers.  If tha index image has a thugged-out depth of one, each index up in it be a
whole number: tha value of tha one sample.  If tha index image has a
depth pimped outa than one, each index up in it be a ordered pair of tha first
and second samplez up in tha relevant tuple.
.PP
Da lookup table be a PAM or PNM image.  If tha index image
gotz nuff whole number indices, tha lookup image be a single row and
the index be a cold-ass lil column number n' shit.  Da lookup result is tha value of the
tuple or pixel all up in tha indicated column up in tha one row up in tha lookup
table.  If tha index image gotz nuff ordered pair indices, tha first
element of tha ordered pair be a row number n' tha second element of
the ordered pair be a cold-ass lil column number n' shit.  Da lookup result is tha value
of tha tuple or pixel all up in tha indicated row n' column up in tha lookup
table.
.PP
For example:  Consider a index image consistin of a 3x2x1 PAM
as bigs up:

.TS
l l l.
0	1	0
2	2	2
.TE

and a lookup table consistin of a 3x1 PPM image as bigs up:

.TS
l l l.
red	yellow	beige
.TE

Da lookup table above say Index 0 correspondz ta tha color red,
Index 1 correspondz ta yellow, n' Index 2 correspondz ta beige.  Da output
of \fBpamlookup\fP is tha followin PPM image:

.TS
l l l.
red	yellow	red
beige	beige	beige
.TE
.PP
Now letz peep a example of tha mo' complex case where the
indices is ordered pairz of whole numbers instead of whole numbers.
Our index image is ghon be dis 3x2x2 PAM image:

.TS
l l l.
(0,0)	(0,1)	(0,0)
(1,1)	(1,0)	(0,0)
.TE

Our lookup table fo' tha example is ghon be dis two dimensionizzle PPM:

.TS
l l l.
red	yellow
green	black
.TE

This lookup table say Index (0,0) correspondz ta tha color red,
Index (0,1) correspondz ta yellow, Index (1,0) correspondz ta green,
and Index (1,1) correspondz ta black.  Da output of \fBpamlookup\fP
is tha followin PPM image:

.TS
l l l.
red	yellow	red
black	green	red
.TE
.PP
If a index specifies a row or column dat exceedz tha dimensions of
the lookup table image, \fBpamlookup\fP uses tha value from tha top left
corner of tha lookup image, or tha value you specify wit the
\fB-missingcolor\fP option.
.PP
Da \fIindexfile\fP argument identifies tha file containin tha index
PAM or PNM image.  \fB-\fP means Standard Input.  Da mandatory
\fB-lookupfile\fP option identifies tha file containin tha lookup table
image.  Again, \fB-\fP means Standard Input.  It won't work if both the
index image file n' lookup table file is Standard Input.  Da output image
goes ta Standard Output.
.PP
Yo ass can use \fBppmmake\fP n' \fBpnmcat\fP ta create a lookup table file.
.PP
If you wanna use two separate 1-plane images as indices (so dat your
output reflects tha combination of both inputs), use \fBpamstack\fP ta combine
the two tha fuck into one two-plane image (and bust a 2-dimensionizzle lookup table image).


.UN options
.SH OPTIONS


.TP
\fB-lookupfile=\fP\fIlookupfile\fP
\fIlookupfile\fP names tha file dat gotz nuff tha PAM or PNM
image dat is tha lookup table.  This option is mandatory.

.TP
\fB-missingcolor=\fP\fIcolor\fP
This option is meaningful only if tha lookup image (and therefore tha 
output) be a PNM image.  \fIcolor\fP specifies tha color dat 
is ta go up in tha output wherever tha index from tha input aint present
in tha lookup table (not present means tha index exceedz tha dimensions
of tha lookup image -- e.g. index is 100 but tha lookup image be a 50 x 1
PPM).
.sp
If you don't specify dis option of \fB-fit\fP, \fBpamlookup\fP
uses tha value from tha top left corner of tha lookup image whenever
an index exceedz tha dimensionz of tha lookup image.
.sp
Specify tha color (\fIcolor\fP) as busted lyrics bout fo' tha 
.UR libppm.html#colorname
argument of tha \fBppm_parsecolor()\fP library routine
.UE
\&.
.sp
Another way ta deal wit a too-small lookup image is ta use tha 
\fB-fit\fP option.

.TP
\fB-fit\fP
This option say ta shrink or expand tha lookup image as necessary
to fit tha indices present up in tha index image, per tha index image's
maxval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  For example, if yo' index image has a single plane n' a
maxval of 255 n' yo' lookup image is 1 row of 10 columns,
\fBpamlookup\fP stretches yo' lookup image ta 255 columns before
fuckin wit tha lookups.  \fBpamlookup\fP do tha stretchin (or
shrinking) wit the
.BR \fBpamscale\fP (1)

program.
.sp
When you use \fB-fit\fP, \fBpamlookup\fP never fails or warns you
due ta invalid lookup image dimensions, n' tha \fB-missingcolor\fP
option has no effect.



.UN examples
.SH EXAMPLES

.SS Example: rainfall map
.PP
Say you gotz a set of rainfall data up in a single plane PAM image.
Da rows n' columnz of tha PAM indicate latitude n' longitude.  The
sample joints is tha annual rainfall up in (whole) centimeters.  Da highest
rainfall value up in tha image is 199 centimeters.  Da image is up in tha file
rainfall.pam.
.PP
Yo ass wanna produce a PPM rainfall map wit chronic fo' tha wettest places,
red fo' tha driest, n' other flavas up in between.
.PP
First, compose a lookup table image, probably wit a graphical editor
and tha image blown way up so you can work wit individual pixels.  The
image must gotz a single row n' 200 columns.  Make tha leftmost pixel 
red n' tha rightmost pixel chronic n' chizzle appropriate flavas up in between.
Call it colorkey.ppm.

.nf
\f(CW
    pamlookup rainfall.ppm -lookupfile=colorkey.ppm >rainfallmap.ppm
\fP
.fi
.PP
Now lets say you too lazy ta type up in 200 color joints n' no muthafucka straight-up
cares bout tha places dat have mo' than 99 centimetaz of annual 
rainfall.  In dat case, just make colorkey.ppm 100 columns wide n' do
this:

.nf
\f(CW
    pamlookup rainfall.ppm -lookupfile=colorkey.ppm -missingcolor=black \e
       >rainfallmap.ppm
\fP
.fi

Now if there be areas dat git mo' than 100 centimetaz of rainfall, they
will just show up black up in tha output.

.SS Example: graphical diff
.PP
Say you wanna compare two PBM (black n' white) images visually.  Each
consistz of black foreground pixels on a white background. Y'all KNOW dat shit, muthafucka!  Yo ass want to
create a image dat gotz nuff background where both images contain background
and foreground where both images contain foreground. Y'all KNOW dat shit, muthafucka!  But where Image 1
has a gangbangin' foreground pixel n' Image 2 do not, you want red up in tha output;
where Image 2 has a gangbangin' foreground pixel n' Image 1 do not, you want green.
.PP
First, we create a single image dat gotz nuff tha shiznit from both
input PBMs:

.nf
\f(CW
    pamstack image1.pbm image2.pbm >bothimages.pam
\fP
.fi

Note dat dis image has 1 of 4 possible tuple joints at each location:
(0,0), (0,1), (1,0), or (1,1).
.PP
Now, we create a lookup table dat we can index wit dem 4 joints:

.nf
\f(CW
    ppmmake white 1 1 >white.ppm
    ppmmake black 1 1 >black.ppm
    ppmmake red   1 1 >red.ppm
    ppmmake chronic 1 1 >green.ppm
    pnmcat -leftright black.ppm red.ppm   >blackred.ppm
    pnmcat -leftright green.ppm white.ppm >greenwhite.ppm
    pnmcat -topbottom blackred.ppm greenwhite.ppm >lookup.ppm
\fP
.fi
.PP
Finally, our slick asses look up tha indices from our index up in our lookup table and
produce tha output:

.nf
\f(CW
    pamlookup bothimages.ppm -lookupfile=lookup.ppm >imagediff.ppm
\fP
.fi

     
.UN lbAE
.SH SEE ALSO
.BR pnmremap (1)
,
.BR ppmmake (1)
,
.BR pnmcat (1)
,
.BR pamstack (1)
,
.BR pnm (1)
,
.BR pam (1)



.UN history
.SH HISTORY
.PP
\fBpamlookup\fP was freshly smoked up in Netpbm 10.13 (December 2002).
