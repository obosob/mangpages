.\" 
.\" pkg-config manual page.
.\" (C) Red Hat, Inc. based on gnome-config playa page (C) Miguel de Icaza (miguel@gnu.org)
.\"
.
.TH pkg-config 1
.SH NAME
pkg-config \- Return metainformation bout installed libraries
.SH SYNOPSIS
.PP
.B pkg-config
[\-\-modversion] [\-\-version] [\-\-help]
[\-\-atleast-pkgconfig-version=VERSION]
[\-\-print-errors] [\-\-short-errors]
[\-\-silence-errors] [\-\-errors-to-stdout] [\-\-debug]
[\-\-cflags] [\-\-libs] [\-\-libs-only-L]
[\-\-libs-only-l] [\-\-cflags-only-I]
[\-\-libs-only-other] [\-\-cflags-only-other]
[\-\-variable=VARIABLENAME]
[\-\-define-variable=VARIABLENAME=VARIABLEVALUE]
[\-\-print-variables]
[\-\-uninstalled]
[\-\-exists] [\-\-atleast-version=VERSION] [\-\-exact-version=VERSION]
[\-\-max-version=VERSION] [\-\-list\-all] [LIBRARIES...]
[\-\-print-provides] [\-\-print-requires] [\-\-print-requires-private] [LIBRARIES...]
.SH DESCRIPTION

Da \fIpkg-config\fP program is used ta retrieve shiznit about
installed libraries up in tha system.  It be typically used ta compile
and link against one or mo' libraries. Put ya muthafuckin choppers up if ya feel dis!  Here be a typical usage
scenario up in a Makefile:
.PP
.nf
program: program.c
	cc program.c $(pkg-config --cflags --libs gnomeui)
.fi
.PP
.I pkg-config
retrieves shiznit bout packages from special metadata
files. These filez is named afta tha package, n' has a
.I .pc
extension. I aint talkin' bout chicken n' gravy biatch.  On most systems, \fIpkg-config\fP looks in
.I /usr/lib/pkgconfig, /usr/share/pkgconfig, /usr/local/lib/pkgconfig
and
.I /usr/local/share/pkgconfig
for these files.  It will additionally look up in tha colon-separated
(on Windows, semicolon-separated) list of directories specified by the
PKG_CONFIG_PATH environment variable.
.PP
Da package name specified on tha \fIpkg-config\fP command line is
defined ta be tha name of tha metadata file, minus tha \fI.pc\fP
extension. I aint talkin' bout chicken n' gravy biatch. If a library can install multiple versions simultaneously,
it must give each version its own name (for example, GTK 1.2 might
have tha package name "gtk+" while GTK 2.0 has "gtk+-2.0").
.PP
In addizzle ta specifyin a package name on tha command line, tha full
path ta a given \fI.pc\fP file may be given instead. Y'all KNOW dat shit, muthafucka! This allows a
user ta directly query a particular \fI.pc\fP file.
.\"
.SH OPTIONS
Da followin options is supported:
.TP
.I "--modversion"
Requests dat tha version shiznit of tha libraries specified on
the command line be displayed. Y'all KNOW dat shit, muthafucka!  If \fIpkg-config\fP can find all the
libraries on tha command line, each libraryz version strang is
printed ta stdout, one version per line. In dis case \fIpkg-config\fP
exits successfully. If one or mo' libraries is unknown,
.I pkg-config
exits wit a nonzero code, n' tha contentz of stdout is undefined.
.TP
.I "--version"
Displays tha version of
.I pkg-config
and terminates.
.TP
.I "--atleast-pkgconfig-version=VERSION"
Requires at least tha given version of pkg-config.
.TP
.I "--help"
Displays a help message n' terminates.
.TP
.I "--print-errors"
If one or mo' of tha modulez on tha command line, or their
dependencies, is not found, or if a error occurs up in parsing
a \fI.pc\fP file, then dis option will cause errors explainin the
problem ta be printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. With "predicate" options like fuckin "--exists"
.I "pkg-config"
runs silently by default, cuz itz probably used
in scripts dat wanna control whatz output. This option can be used
alone (to just print errors encountered locatin modulez on tha 
command line) or wit other options. Da PKG_CONFIG_DEBUG_SPEW
environment variable overrides dis option.
.TP
.I "--short-errors"
Print short error lyrics.
.TP
.I "--silence-errors"
If one or mo' of tha modulez on tha command line, or their
dependencies, is not found, or if a error occurs up in parsin a
a \fI.pc\fP file, then dis option will keep errors explainin the
problem from bein printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. With "predicate" options such as
"--exists" \fIpkg-config\fP runs silently by default, cuz it's
usually used up in scripts dat wanna control whatz output. Right back up in yo muthafuckin ass. So this
option is only useful wit options like fuckin "--cflags" or
"--modversion" dat print errors by default. Da PKG_CONFIG_DEBUG_SPEW
environment variable overrides dis option.
.TP
.I "--errors-to-stdout"
If printin errors, print dem ta stdout rather than tha default stderr
.TP
.I "--debug"
Print debuggin shiznit. I aint talkin' bout chicken n' gravy biatch. This is slightly different than the
PKG_CONFIG_DEBUG_SPEW environment variable, which also enable
"--print-errors".

.PP
Da followin options is used ta compile n' link programs:
.TP
.I "--cflags"
This prints pre-processor n' compile flags required ta compile the
packages on tha command line, includin flags fo' all their
dependencies. Put ya muthafuckin choppers up if ya feel dis! Flags is "compressed" so dat each identical flag
appears only once. \fIpkg-config\fP exits wit a nonzero code if it
can't find metadata fo' one or mo' of tha packages on tha command
line.
.TP
.I "--cflags-only-I"
This prints tha -I part of "--cflags". That is, it defines tha header
search path but don't specify anythang else.
.TP
.I "--cflags-only-other"
This prints partz of "--cflags" not covered by "--cflags-only-I".
.TP
.I "--libs"
This option is identical ta "--cflags", only it prints tha link
flags fo' realz. As wit "--cflags", duplicate flags is merged (maintaining
proper ordering), n' flags fo' dependencies is included up in the
output.
.TP
.I "--libs-only-L"
This prints tha -L/-R part of "--libs". That is, it defines tha 
library search path but don't specify which libraries ta link with.
.TP
.I "--libs-only-l"
This prints tha -l part of "--libs" fo' tha libraries specified on
the command line. Note dat tha union of "--libs-only-l" and
"--libs-only-L" may be smalla than "--libs", cuz of flags such as
-rdynamic.
.TP
.I "--libs-only-other"
This prints tha partz of "--libs" not covered by "--libs-only-L" and
"--libs-only-l", like fuckin "--pthread".
.TP
.I "--variable=VARIABLENAME"
This returns tha value of a variable defined up in a packagez \fI.pc\fP
file. Most packages define tha variable "prefix", fo' example, so you 
can say:
.nf
  $ pkg-config --variable=prefix glib-2.0
  /usr/
.fi
.TP
.I "--define-variable=VARIABLENAME=VARIABLEVALUE"
This sets a global value fo' a variable, overridin tha value up in any
.I .pc
files. Most packages define tha variable "prefix", fo' example, so you
can say:
.nf
  $ pkg-config --print-errors --define-variable=prefix=/foo \e
               --variable=prefix glib-2.0
  /foo
.fi
.TP
.I "--print-variables"
Returns a list of all variablez defined up in tha package.

.TP
.I "--uninstalled"
Normally if you request tha package "foo" n' tha package
"foo-uninstalled" exists, \fIpkg-config\fP will prefer tha 
"-uninstalled" variant. This allows compilation/linkin against
uninstalled packages. If you specify tha "--uninstalled" option,
.I pkg-config
will return successfully if any "-uninstalled" packages is being
used, n' return failure (false) otherwise.  (The
PKG_CONFIG_DISABLE_UNINSTALLED environment variable keeps
.I pkg-config
from implicitly choosin "-uninstalled" packages, so if dat variable
is set, they will only done been used if you pass a name like
"foo-uninstalled" on tha command line explicitly.)
.TP
.I "--exists"
.TP
.I "--atleast-version=VERSION"
.TP
.I "--exact-version=VERSION"
.TP
.I "--max-version=VERSION"
These options test whether tha package or list of packages on the
command line is known ta \fIpkg-config\fP, n' optionally whether the
version number of a package meets certain constraints, n' you can put dat on yo' toast.  If all packages
exist n' hook up tha specified version constraints,
.I pkg-config
exits successfully. Otherwise it exits unsuccessfully. Only tha first
VERSION comparin option is ghon be honored. Y'all KNOW dat shit, muthafucka! Subsequent optionz of this
type is ghon be ignored.

Rather than rockin tha version-test options, you can simply give a version
constraint afta each package name, fo' example:
.nf
  $ pkg-config --exists 'glib-2.0 >= 1.3.4 libxml = 1.8.3'
.fi
Remember ta use \-\-print-errors if you want error lyrics. When no
output options is supplied ta \fIpkg-config\fP, \-\-exists is implied.
.TP
.I "--msvc-syntax"
This option be available only on Windows. Well shiiiit, it causes \fIpkg-config\fP
to output -l n' -L flags up in tha form recognized by tha Microsoft
Visual C++ command-line compiler, \fIcl\fP. Right back up in yo muthafuckin ass. Specifically, instead of
.I -Lx:/some/path
it prints \fI/libpath:x/some/path\fP, n' instead of \fI-lfoo\fP it
prints \fIfoo.lib\fP. Note dat tha --libs output consistz of flags
for tha linker, n' should be placed on tha cl command line afta a
/link switch.
.TP
.I "--dont-define-prefix"
This option be available only on Windows. Well shiiiit, it prevents \fIpkg-config\fP
from automatically tryin ta override tha value of tha variable
"prefix" up in each .pc file.
.TP
.I "--prefix-variable=PREFIX"
Also dis option be available only on Windows. Well shiiiit, it sets tha name of the
variable dat \fIpkg-config\fP automatically sets as busted lyrics bout above.
.TP
.I "--static"
Output libraries suitable fo' static linking.  That means including
any private libraries up in tha output.  This relies on proper taggin in
the .pc files, else a too big-ass number of libraries will ordinarily be
output.
.TP
.I "--list-all"
List all modulez found up in tha \fIpkg-config\fP path.
.TP
.I "--print-provides"
List all modulez tha given packages provides.
.TP
.I "--print-requires"
List all modulez tha given packages requires.
.TP
.I "--print-requires-private"
List all modulez tha given packages requires fo' static linkin (see --static).
.\"
.SH ENVIRONMENT VARIABLES
.TP
.I "PKG_CONFIG_PATH"
A colon-separated (on Windows, semicolon-separated) list of
directories ta search fo' .pc files.  Da default directory will
always be searched afta searchin tha path; tha default is
.I \%libdir/\fPpkgconfig:\fIdatadir\fP/pkgconfig where \fIlibdir\fP is
the libdir fo' \fIpkg-config\fP n' \fIdatadir\fP is tha datadir
for \fIpkg-config\fP when dat shiznit was installed.
.TP
.I "PKG_CONFIG_DEBUG_SPEW"
If set, causes \fIpkg-config\fP ta print all kindz of
debuggin shiznit n' report all errors.
.TP
.I "PKG_CONFIG_TOP_BUILD_DIR"
A value ta set fo' tha magic variable \fIpc_top_builddir\fP
which may step tha fuck up in \fI.pc\fP files. If tha environment variable is
not set, tha default value '$(top_builddir)' is ghon be used. Y'all KNOW dat shit, muthafucka! This
variable should refer ta tha top builddir of tha Makefile where tha 
compile/link flags reported by \fIpkg-config\fP is ghon be used.
This only mattas when compiling/linkin against a package dat aint
yet been installed.
.TP
.I "PKG_CONFIG_DISABLE_UNINSTALLED"
Normally if you request tha package "foo" n' tha package
"foo-uninstalled" exists, \fIpkg-config\fP will prefer tha 
"-uninstalled" variant. This allows compilation/linkin against
uninstalled packages.  If dis environment variable is set, it
disablez holla'd behavior.
.TP
.I "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS"
Don't strip -I/usr/include outta cflags.
.TP
.I "PKG_CONFIG_ALLOW_SYSTEM_LIBS"
Don't strip -L/usr/lib or -L/lib outta libs.
.TP
.I "PKG_CONFIG_SYSROOT_DIR"
Modify -I n' -L ta use tha directories located up in target sysroot.
this option is useful when cross-compilin packages dat use pkg-config
to determine CFLAGS n' LDFLAGS. -I n' -L is modified ta point ta 
the freshly smoked up system root. dis means dat a -I/usr/include/libfoo will
become -I/var/target/usr/include/libfoo wit a PKG_CONFIG_SYSROOT_DIR
equal ta /var/target (same rule apply ta -L)
.TP
.I "PKG_CONFIG_LIBDIR"
Replaces tha default \fIpkg-config\fP search directory, probably \fI/usr/lib/pkgconfig\fP
.\"
.SH QUERYING PKG-CONFIG'S DEFAULTS
.I pkg-config
can be used ta query itself fo' tha default search path, version number
and other shiznit, fo' instizzle using:
.nf
  $ pkg-config --variable pc_path pkg-config
.fi
or
.nf
  $ pkg-config --modversion pkg-config
.fi
.SH WINDOWS SPECIALITIES
If a .pc file is found up in a gangbangin' finger-lickin' directory dat matches tha usual
conventions (i.e., endz wit \\lib\\pkgconfig or \\share\\pkgconfig),
the prefix fo' dat package be assumed ta be tha grandparent of the
directory where tha file was found, n' tha \fIprefix\fP variable is
overridden fo' dat file accordingly.

If tha value of a variable up in a .pc file begins wit tha original,
non-overridden, value of tha \fIprefix\fP variable, then tha overridden
value of \fIprefix\fP is used instead.
.\"
.SH AUTOCONF MACROS
.TP
.I "PKG_CHECK_MODULES(VARIABLE-PREFIX, MODULES [,ACTION-IF-FOUND [,ACTION-IF-NOT-FOUND]])"

Da macro PKG_CHECK_MODULES can be used up in \fIconfigure.ac\fP ta 
check whether modulez exist fo' realz. A typical usage would be:
.nf
 PKG_CHECK_MODULES([MYSTUFF], [gtk+-2.0 >= 1.3.5 libxml = 1.8.4])
.fi

This would result up in MYSTUFF_LIBS n' MYSTUFF_CFLAGS substitution
variables, set ta tha libs n' cflags fo' tha given module list. 
If a module is missin or has tha wack version, by default configure
will abort wit a message. To replace tha default action, 
specify a \%ACTION-IF-NOT-FOUND. \%PKG_CHECK_MODULES aint gonna print any
error lyrics if you specify yo' own ACTION-IF-NOT-FOUND.
But fuck dat shiznit yo, tha word on tha street is dat it will set tha variable MYSTUFF_PKG_ERRORS, which you can 
use ta display what tha fuck went wrong.

Note dat if there be a possibilitizzle tha straight-up original gangsta call to
PKG_CHECK_MODULES might not happen, you should be shizzle ta include an
explicit call ta PKG_PROG_PKG_CONFIG up in yo' configure.ac.

Also note dat repeated usage of VARIABLE-PREFIX aint recommended.
Afta tha straight-up original gangsta successful usage, subsequent calls wit tha same
VARIABLE-PREFIX will simply use tha _LIBS n' _CFLAGS variablez set from
the previous usage without callin \fIpkg-config\fP again.
.\"
.TP
.I "PKG_PROG_PKG_CONFIG([MIN-VERSION])"

Defines tha PKG_CONFIG variable ta tha dopest pkg-config available,
useful if you need pkg-config but don't wanna use PKG_CHECK_MODULES.
.\"
.TP
.I "PKG_CHECK_EXISTS(MODULES, [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])"

Peep ta peep whether a particular set of modulez exists, n' you can put dat on yo' toast.  Similar
to PKG_CHECK_MODULES() yo, but do not set variablez or print errors.

Similar ta PKG_CHECK_MODULES, make shizzle dat tha straight-up original gangsta instizzle of
this or PKG_CHECK_MODULES is called, or make shizzle ta call
PKG_CHECK_EXISTS manually.
.TP
.I "PKG_INSTALLDIR(DIRECTORY)"

Substitutes tha variable pkgconfigdir as tha location where a module
should install pkg-config .pc files. By default tha directory is
$libdir/pkgconfig yo, but tha default can be chizzled by passin DIRECTORY.
Da user can override all up in tha --with-pkgconfigdir parameter.
.TP
.I "PKG_NOARCH_INSTALLDIR(DIRECTORY)"

Substitutes tha variable noarch_pkgconfigdir as tha location where a
module should install arch-independent pkg-config .pc files. By default
the directory is $datadir/pkgconfig yo, but tha default can be chizzled by
passin DIRECTORY. Da user can override all up in the
--with-noarch-pkgconfigdir parameter.
.TP
.I "PKG_CHECK_VAR(VARIABLE, MODULE, CONFIG-VARIABLE, [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])"

Retrieves tha value of tha pkg-config variable CONFIG-VARIABLE from
MODULE n' stores it up in VARIABLE. Note dat repeated usage of VARIABLE
is not recommended as tha check is ghon be skipped if tha variable is
already set.

.SH METADATA FILE SYNTAX
To add a library ta tha set of packages \fIpkg-config\fP knows about,
simply install a \fI.pc\fP file. Yo ass should install dis file ta 
.I libdir\fP/pkgconfig.
.PP
Here be a example file:
.nf
# This be a cold-ass lil comment
prefix=/home/hp/unst   # dis defines a variable
exec_prefix=${prefix}  # definin another variable up in termz of tha first
libdir=${exec_prefix}/lib
includedir=${prefix}/include

Name: GObject                            # human-readable name
Description: Object/type system fo' GLib # human-readable description
Version: 1.3.1
URL: http://www.gtk.org
Requires: glib-2.0 = 1.3.1
Conflicts: foobar <= 4.5
Libs: -L${libdir} -lgobject-1.3
Libs.private: -lm
Cflags: -I${includedir}/glib-2.0 -I${libdir}/glib/include 
.fi
.PP
Yo ass would normally generate tha file rockin configure, so dat the
prefix, etc. is set ta tha proper joints, n' you can put dat on yo' toast.  Da GNU Autoconf manual
recommendz generatin filez like .pc filez at build time rather than
configure time, so when you build tha .pc file be a matta of taste
and preference.
.PP
Filez have two kindz of line: keyword lines start wit a keyword plus
a colon, n' variable definitions start wit a alphanumeric string
plus a equals sign. I aint talkin' bout chicken n' gravy biatch. Keywordz is defined up in advizzle n' have special
meanin ta \fIpkg-config\fP; variablez do not, you can have any
variablez dat you wish (however, playas may expect ta retrieve the
usual directory name variables).
.PP
Note dat variable references is freestyled "${foo}"; you can escape
literal "${" as "$${".
.TP
.I "Name:"
This field should be a human-readable name fo' tha package. Note that
it aint tha name passed as a argument ta \fIpkg-config\fP.
.TP
.I "Description:"
This should be a funky-ass brief description of tha package
.TP
.I "URL:"
An URL where playas can git mo' shiznit bout n' downlizzle tha package
.TP
.I "Version:"
This should be da most thugged-out-specific-possible package version string.
.TP
.I "Requires:"
This be a cold-ass lil comma-separated list of packages dat is required by your
package. Flags from dependent packages is ghon be merged up in ta tha flags
reported fo' yo' package. Optionally, you can specify tha version 
of tha required package (usin tha operators =, <, >, >=, <=);
specifyin a version allows \fIpkg-config\fP ta big-ass up extra sanity
checks. Yo ass may only mention tha same package one time on tha 
.I "Requires:"
line. If tha version of a package is unspecified, any version will
be used wit no checking.
.TP
.I Requires.private:
A list of packages required by dis package. Da difference from
.I Requires
is dat tha packages listed under
.I Requires.private
are not taken tha fuck into account when a gangbangin' flag list is computed for
dynamically linked executable (i.e., when \-\-static was not
specified).  In tha thang where each .pc file correspondz ta a
library,
.I Requires.private
shall be used exclusively ta specify tha dependencies between the
libraries.
.TP
.I "Conflicts:"
This optionizzle line allows \fIpkg-config\fP ta big-ass up additional
sanitizzle checks, primarily ta detect fucked up user installations.  The
syntax is tha same ol' dirty as
.I "Requires:"
except that
you can list tha same package mo' than once here, fo' example 
"foobar = 1.2.3, foobar = 1.2.5, foobar >= 1.3", if you have reason to
do so. If a version aint specified, then yo' package conflicts with
all versionz of tha mentioned package. 
If a user tries ta use yo' package n' a cold-ass lil conflictin package at the
same time, then \fIpkg-config\fP will complain.
.TP
.I "Libs:"
This line should give tha link flags specific ta yo' package. 
Don't add any flags fo' required packages; \fIpkg-config\fP will 
add dem automatically.
.TP
.I "Libs.private:"
This line should list any private libraries up in use.  Private libraries
are libraries which is not exposed all up in yo' library yo, but are
needed up in tha case of static linking. This differs from
.I Requires.private
in dat it references libraries dat aint gots package files
installed.
.TP
.I "Cflags:"
This line should list tha compile flags specific ta yo' package. 
Don't add any flags fo' required packages; \fIpkg-config\fP will 
add dem automatically.
.\"
.SH AUTHOR

.I pkg-config
was freestyled by Jizzy Henstridge, rewritten by Martijn van Beers, and
rewritten again n' again n' again by Havoc Pennington. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Slim Tim Janik, Owen Taylor, n' Raja
Harinath submitted suggestions n' some code.
.I gnome-config
was freestyled by Miguel de Icaza, Raja Harinath n' various hackers in
the GNOME crew.  Dat shiznit was inspired by Owen Taylorz \fIgtk-config\fP
program.
.\"
.SH BUGS

\fIpkg-config\fP do not handle mixin of parametas wit n' without
= well.  Stick wit one.

Bugs can be reported at http://bugs.freedesktop.org/ under the
.I pkg-config
component.
