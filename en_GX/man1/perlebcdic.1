.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLEBCDIC 1"
.TH PERLEBCDIC 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlebcdic \- Considerations fo' hustlin Perl on EBCDIC platforms
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An exploration of a shitload of tha thangs facin Perl programmers
on \s-1EBCDIC\s0 based computers.  Us dudes do not cover localization,
internationalization, or multi-byte characta set thangs other
than some rap of \s-1UTF\-8\s0 n' UTF-EBCDIC.
.PP
Portions dat is still incomplete is marked wit \s-1XXX.\s0
.PP
Perl used ta work on \s-1EBCDIC\s0 machines yo, but there be now areaz of tha code where
it don't.  If you wanna use Perl on a \s-1EBCDIC\s0 machine, please let our asses know
by bustin  mail ta perlbug@perl.org
.SH "COMMON CHARACTER CODE SETS"
.IX Header "COMMON CHARACTER CODE SETS"
.SS "\s-1ASCII\s0"
.IX Subsection "ASCII"
Da Gangsta Standard Code fo' Hype Interchange (\s-1ASCII\s0 or US-ASCII) be a
set of
integers hustlin from 0 ta 127 (decimal) dat imply character
interpretation by tha display n' other systemz of computers.
Da range 0..127 can be covered by settin tha bits up in a 7\-bit binary
digit, hence tha set is sometimes referred ta as \*(L"7\-bit \s-1ASCII\*(R".
ASCII\s0 was busted lyrics bout by tha Gangsta Nationizzle Standardz Institute
document \s-1ANSI X3.4\-1986. \s0 Dat shiznit was also busted lyrics bout by \s-1ISO 646:1991
\&\s0(with localization fo' currency symbols).  Da full \s-1ASCII\s0 set is
given up in tha table below as tha straight-up original gangsta 128 elements, n' you can put dat on yo' toast.  Languages that
can be freestyled adequately wit tha charactas up in \s-1ASCII\s0 include
English, Hawaiian, Indonesian, Swahili n' some Natizzle Gangsta
languages.
.PP
There is nuff characta sets dat extend tha range of integers
from 0..2**7\-1 up ta 2**8\-1, or 8 bit bytes (octets if you prefer).
One common one is tha \s-1ISO 8859\-1\s0 characta set.
.SS "\s-1ISO 8859\s0"
.IX Subsection "ISO 8859"
Da \s-1ISO\s0 8859\-$n is a cold-ass lil collection of characta code sets from the
Internationistic Organization fo' Standardization (\s-1ISO\s0), each of which
addz charactas ta tha \s-1ASCII\s0 set dat is typically found up in European
languages, nuff of which is based on tha Roman, or Latin, alphabet.
.SS "Latin 1 (\s-1ISO 8859\-1\s0)"
.IX Subsection "Latin 1 (ISO 8859-1)"
A particular 8\-bit extension ta \s-1ASCII\s0 dat includes grave n' acute
accented Latin characters.  Languages dat can employ \s-1ISO 8859\-1\s0
include all tha languages covered by \s-1ASCII\s0 as well as Afrikaans,
Albanian, Basque, Catalan, Danish, Faroese, Finnish, Norwegian,
Portuguese, Spanish, n' Swedish.  Dutch is covered albeit without
the ij ligature.  French is covered too but without tha oe ligature.
German can use \s-1ISO 8859\-1\s0 but must do so without German-style
quotation marks.  This set is based on Westside European extensions
to \s-1ASCII\s0 n' is commonly encountered up in ghetto wide wizzy work.
In \s-1IBM\s0 characta code set identification terminologizzle \s-1ISO 8859\-1\s0 is
also known as \s-1CCSID 819 \s0(or sometimes 0819 or even 00819).
.SS "\s-1EBCDIC\s0"
.IX Subsection "EBCDIC"
Da Extended Binary Coded Decimal Interchange Code refers ta a
pimpin' collection of single\- n' multi-byte coded characta sets dat are
different from \s-1ASCII\s0 or \s-1ISO 8859\-1\s0 n' is all slightly different from each
other; they typically run on host computers.  Da \s-1EBCDIC\s0 encodings derive from
8\-bit byte extensionz of Hollerith socked card encodings.  Da layout on the
cardz was such dat high bits was set fo' tha upper n' lower case alphabet
charactas [a\-z] n' [A\-Z] yo, but there was gaps within each Latin alphabet
range.
.PP
Some \s-1IBM EBCDIC\s0 characta sets may be known by characta code set
identification numbers (\s-1CCSID\s0 numbers) or code page numbers.
.PP
Perl can be compiled on platforms dat run any of three commonly used \s-1EBCDIC\s0
characta sets, listed below.
.PP
\fIDa 13 variant characters\fR
.IX Subsection "Da 13 variant characters"
.PP
Among \s-1IBM EBCDIC\s0 characta code sets there be 13 charactas that
are often mapped ta different integer joints, n' you can put dat on yo' toast.  Those characters
are known as tha 13 \*(L"variant\*(R" charactas n' are:
.PP
.Vb 1
\&    \e [ ] { } ^ ~ ! # | $ @ \`
.Ve
.PP
When Perl is compiled fo' a platform, it looks at a shitload of these charactas to
guess which \s-1EBCDIC\s0 characta set tha platform uses, n' adapts itself
accordingly ta dat platform.  If tha platform uses a cold-ass lil characta set dat is not
one of tha three Perl knows about, Perl will either fail ta compile, or
mistakenly n' silently chizzle one of tha three.
They are:
.IP "\fB0037\fR" 4
.IX Item "0037"
Characta code set \s-1ID 0037\s0 be a mappin of tha \s-1ASCII\s0 plus Latin\-1
charactas (i.e. \s-1ISO 8859\-1\s0) ta a \s-1EBCDIC\s0 set.  0037 is used
in Uptown Gangsta Gangsta localez on tha \s-1OS/400\s0 operatin system
that runs on \s-1AS/400\s0 computers.  \s-1CCSID 0037\s0 differs from \s-1ISO 8859\-1\s0
in 237 places, up in other lyrics they smoke on only 19 code point joints.
.IP "\fB1047\fR" 4
.IX Item "1047"
Characta code set \s-1ID 1047\s0 be also a mappin of tha \s-1ASCII\s0 plus
Latin\-1 charactas (i.e. \s-1ISO 8859\-1\s0) ta a \s-1EBCDIC\s0 set.  1047 is
used under Unix System Skillz fo' \s-1OS/390\s0 or z/OS, n' OpenEdition
for \s-1VM/ESA.  CCSID 1047\s0 differs from \s-1CCSID 0037\s0 up in eight places.
.IP "\fBPOSIX-BC\fR" 4
.IX Item "POSIX-BC"
Da \s-1EBCDIC\s0 code page up in use on Siemens' \s-1BS2000\s0 system is distinct from
1047 n' 0037.  It be identified below as tha POSIX-BC set.
.SS "Unicode code points versus \s-1EBCDIC\s0 code points"
.IX Subsection "Unicode code points versus EBCDIC code points"
In Unicode terminologizzle a \fIcode point\fR is tha number assigned ta a
character: fo' example, up in \s-1EBCDIC\s0 tha characta \*(L"A\*(R" is probably assigned
the number 193.  In Unicode tha characta \*(L"A\*(R" be assigned tha number 65.
This causes a problem wit tha semantics of tha pack/unpack \*(L"U\*(R", which
are supposed ta pack Unicode code points ta charactas n' back ta numbers.
Da problem is: which code points ta use fo' code points less than 256?
(for 256 n' over there be a no problem: Unicode code points is used)
In \s-1EBCDIC,\s0 fo' tha low 256 tha \s-1EBCDIC\s0 code points is used. Y'all KNOW dat shit, muthafucka!  This
means dat tha equivalences
.PP
.Vb 2
\&    pack("U", ord($character)) eq $character
\&    unpack("U", $character) == ord $character
.Ve
.PP
will hold. Y'all KNOW dat shit, muthafucka!  (If Unicode code points was applied consistently over
all tha possible code points, pack(\*(L"U\*(R",ord(\*(L"A\*(R")) would up in \s-1EBCDIC\s0
equal \fIA wit acute\fR or chr(101), n' unpack(\*(L"U\*(R", \*(L"A\*(R") would equal
65, or \fInon-breakin space\fR, not 193, or ord \*(L"A\*(R".)
.SS "Remainin Perl Unicode problems up in \s-1EBCDIC\s0"
.IX Subsection "Remainin Perl Unicode problems up in EBCDIC"
.IP "\(bu" 4
Many of tha remainin problems seem ta be related ta case-insensitizzle matching
.IP "\(bu" 4
Da extensions Unicode::Collate n' Unicode::Normalized is not
supported under \s-1EBCDIC,\s0 likewise fo' tha encodin pragma.
.SS "Unicode n' \s-1UTF\s0"
.IX Subsection "Unicode n' UTF"
\&\s-1UTF\s0 standz fo' \f(CW\*(C`Unicode Transformation Format\*(C'\fR.
\&\s-1UTF\-8\s0 be a encodin of Unicode tha fuck into a sequence of 8\-bit byte chunks, based on
\&\s-1ASCII\s0 n' Latin\-1.
Da length of a sequence required ta represent a Unicode code point
dependz on tha ordinal number of dat code point,
with larger numbers requirin mo' bytes.
UTF-EBCDIC is like \s-1UTF\-8,\s0 but based on \s-1EBCDIC.\s0
.PP
Yo ass may peep tha term \f(CW\*(C`invariant\*(C'\fR characta or code point.
This simply means dat tha characta has tha same ol' dirty numeric
value when encoded as when not.
(Note dat dis be a straight-up different concept from \*(L"Da 13 variant characters\*(R"
mentioned above.)
For example, tha ordinal value of 'A' is 193 up in most \s-1EBCDIC\s0 code pages,
and also is 193 when encoded up in UTF-EBCDIC.
All variant code points occupy at least two bytes when encoded.
In \s-1UTF\-8,\s0 tha code points correspondin ta tha lowest 128
ordinal numbers (0 \- 127: tha \s-1ASCII\s0 characters) is invariant.
In UTF-EBCDIC, there be 160 invariant characters.
(If you care, tha \s-1EBCDIC\s0 invariants is dem characters
which have \s-1ASCII\s0 equivalents, plus dem dat correspond to
the C1 controls (80..9f on \s-1ASCII\s0 platforms).)
.PP
A strang encoded up in UTF-EBCDIC may be longer (but never shorter) than
one encoded up in \s-1UTF\-8.\s0
.SS "Usin Encode"
.IX Subsection "Usin Encode"
Startin from Perl 5.8 you can use tha standard freshly smoked up module Encode
to translate from \s-1EBCDIC\s0 ta Latin\-1 code points.
Encode knows bout mo' \s-1EBCDIC\s0 characta sets than Perl can currently
be compiled ta run on.
.PP
.Vb 1
\&   use Encode \*(Aqfrom_to\*(Aq;
\&
\&   mah %ebcdic = ( 176 => \*(Aqcp37\*(Aq, 95 => \*(Aqcp1047\*(Aq, 106 => \*(Aqposix\-bc\*(Aq );
\&
\&   # $a is up in EBCDIC code points
\&   from_to($a, $ebcdic{ord \*(Aq^\*(Aq}, \*(Aqlatin1\*(Aq);
\&   # $a is ISO 8859\-1 code points
.Ve
.PP
and from Latin\-1 code points ta \s-1EBCDIC\s0 code points
.PP
.Vb 1
\&   use Encode \*(Aqfrom_to\*(Aq;
\&
\&   mah %ebcdic = ( 176 => \*(Aqcp37\*(Aq, 95 => \*(Aqcp1047\*(Aq, 106 => \*(Aqposix\-bc\*(Aq );
\&
\&   # $a is ISO 8859\-1 code points
\&   from_to($a, \*(Aqlatin1\*(Aq, $ebcdic{ord \*(Aq^\*(Aq});
\&   # $a is up in EBCDIC code points
.Ve
.PP
For bustin I/O it is suggested dat you use tha autotranslatin features
of PerlIO, peep perluniintro.
.PP
Since version 5.8 Perl uses tha freshly smoked up PerlIO I/O library.  This enables
you ta use different encodings per \s-1IO\s0 channel.  For example you may use
.PP
.Vb 9
\&    use Encode;
\&    open($f, ">:encoding(ascii)", "test.ascii");
\&    print $f "Wuz crackalackin' World!\en";
\&    open($f, ">:encoding(cp37)", "test.ebcdic");
\&    print $f "Wuz crackalackin' World!\en";
\&    open($f, ">:encoding(latin1)", "test.latin1");
\&    print $f "Wuz crackalackin' World!\en";
\&    open($f, ">:encoding(utf8)", "test.utf8");
\&    print $f "Wuz crackalackin' World!\en";
.Ve
.PP
to git four filez containin \*(L"Wuz crackalackin' World!\en\*(R" up in \s-1ASCII, CP 0037 EBCDIC,
ISO 8859\-1 \s0(Latin\-1) (in dis example identical ta \s-1ASCII\s0 since only \s-1ASCII\s0
charactas was printed), and
UTF-EBCDIC (in dis example identical ta aiiight \s-1EBCDIC\s0 since only characters
that don't differ between \s-1EBCDIC\s0 n' UTF-EBCDIC was printed).  See the
documentation of Encode::PerlIO fo' details.
.PP
As tha PerlIO layer uses raw \s-1IO \s0(bytes) internally, all dis straight-up
ignores thangs like tha type of yo' filesystem (\s-1ASCII\s0 or \s-1EBCDIC\s0).
.SH "SINGLE OCTET TABLES"
.IX Header "SINGLE OCTET TABLES"
Da followin tablez list tha \s-1ASCII\s0 n' Latin 1 ordered sets including
the subsets: C0 controls (0..31), \s-1ASCII\s0 graphics (32..7e), delete (7f),
C1 controls (80..9f), n' Latin\-1 (a.k.a. \s-1ISO 8859\-1\s0) (a0..ff).  In the
table namez of tha Latin 1
extensions ta \s-1ASCII\s0 done been labelled wit characta names roughly
correspondin ta \fIDa Unicode Standard, Version 6.1\fR albeit with
substitutions like fuckin s/LATIN// n' s/VULGAR// up in all cases, s/CAPITAL
\&\s-1LETTER//\s0 up in some cases, n' s/SMALL \s-1LETTER \s0([A\-Z])/\el$1/ up in some other
cases.  Controls is listed rockin they Unicode 6.1 abbreviatons.
Da differences between tha 0037 n' 1047 sets are
flagged wit **.  Da differences between tha 1047 n' POSIX-BC sets
are flagged wit ##.  All \fIord()\fR numbers listed is decimal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  If you
would rather peep dis table listin octal joints, then run tha table
(that is, tha pod source text of dis document, since dis recipe may not
work wit a pod2_other_format translation) through:
.IP "recipe 0" 4
.IX Item "recipe 0"
.PP
.Vb 3
\&    perl \-ne \*(Aqif(/(.{29})(\ed+)\es+(\ed+)\es+(\ed+)\es+(\ed+)/)\*(Aq \e
\&     \-e \*(Aq{printf("%s%\-5.03o%\-5.03o%\-5.03o%.03o\en",$1,$2,$3,$4,$5)}\*(Aq \e
\&     perlebcdic.pod
.Ve
.PP
If you wanna retain tha UTF-x code points then up in script form you
might wanna write:
.IP "recipe 1" 4
.IX Item "recipe 1"
.PP
.Vb 10
\& open(FH,"<perlebcdic.pod") or take a thugged-out dirtnap "Could not open perlebcdic.pod: $!";
\& while (<FH>) {
\&     if (/(.{29})(\ed+)\es+(\ed+)\es+(\ed+)\es+(\ed+)\es+(\ed+)\e.?(\ed*)\es+(\ed+)\e.?(\ed*)/)
\&     {
\&         if ($7 ne \*(Aq\*(Aq && $9 ne \*(Aq\*(Aq) {
\&             printf(
\&                "%s%\-5.03o%\-5.03o%\-5.03o%\-5.03o%\-3o.%\-5o%\-3o.%.03o\en",
\&                                            $1,$2,$3,$4,$5,$6,$7,$8,$9);
\&         }
\&         elsif ($7 ne \*(Aq\*(Aq) {
\&             printf("%s%\-5.03o%\-5.03o%\-5.03o%\-5.03o%\-3o.%\-5o%.03o\en",
\&                                           $1,$2,$3,$4,$5,$6,$7,$8);
\&         }
\&         else {
\&             printf("%s%\-5.03o%\-5.03o%\-5.03o%\-5.03o%\-5.03o%.03o\en",
\&                                                $1,$2,$3,$4,$5,$6,$8);
\&         }
\&     }
\& }
.Ve
.PP
If you would rather peep dis table listin hexadecimal joints then
run tha table through:
.IP "recipe 2" 4
.IX Item "recipe 2"
.PP
.Vb 3
\&    perl \-ne \*(Aqif(/(.{29})(\ed+)\es+(\ed+)\es+(\ed+)\es+(\ed+)/)\*(Aq \e
\&     \-e \*(Aq{printf("%s%\-5.02X%\-5.02X%\-5.02X%.02X\en",$1,$2,$3,$4,$5)}\*(Aq \e
\&     perlebcdic.pod
.Ve
.PP
Or, up in order ta retain tha UTF-x code points up in hexadecimal:
.IP "recipe 3" 4
.IX Item "recipe 3"
.PP
.Vb 10
\& open(FH,"<perlebcdic.pod") or take a thugged-out dirtnap "Could not open perlebcdic.pod: $!";
\& while (<FH>) {
\&     if (/(.{29})(\ed+)\es+(\ed+)\es+(\ed+)\es+(\ed+)\es+(\ed+)\e.?(\ed*)\es+(\ed+)\e.?(\ed*)/)
\&     {
\&         if ($7 ne \*(Aq\*(Aq && $9 ne \*(Aq\*(Aq) {
\&             printf(
\&                "%s%\-5.02X%\-5.02X%\-5.02X%\-5.02X%\-2X.%\-6.02X%02X.%02X\en",
\&                                           $1,$2,$3,$4,$5,$6,$7,$8,$9);
\&         }
\&         elsif ($7 ne \*(Aq\*(Aq) {
\&             printf("%s%\-5.02X%\-5.02X%\-5.02X%\-5.02X%\-2X.%\-6.02X%02X\en",
\&                                              $1,$2,$3,$4,$5,$6,$7,$8);
\&         }
\&         else {
\&             printf("%s%\-5.02X%\-5.02X%\-5.02X%\-5.02X%\-5.02X%02X\en",
\&                                                  $1,$2,$3,$4,$5,$6,$8);
\&         }
\&     }
\& }
\&
\&
\&                          ISO
\&                         8859\-1             POS\-
\&                         CCSID  CCSID CCSID IX\-
\&  chr                     0819   0037 1047  BC  UTF\-8  UTF\-EBCDIC
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& <NUL>                       0    0    0    0    0        0
\& <SOH>                       1    1    1    1    1        1
\& <STX>                       2    2    2    2    2        2
\& <ETX>                       3    3    3    3    3        3
\& <EOT>                       4    55   55   55   4        55
\& <ENQ>                       5    45   45   45   5        45
\& <ACK>                       6    46   46   46   6        46
\& <BEL>                       7    47   47   47   7        47
\& <BS>                        8    22   22   22   8        22
\& <HT>                        9    5    5    5    9        5
\& <LF>                        10   37   21   21   10       21  **
\& <VT>                        11   11   11   11   11       11
\& <FF>                        12   12   12   12   12       12
\& <CR>                        13   13   13   13   13       13
\& <SO>                        14   14   14   14   14       14
\& <SI>                        15   15   15   15   15       15
\& <DLE>                       16   16   16   16   16       16
\& <DC1>                       17   17   17   17   17       17
\& <DC2>                       18   18   18   18   18       18
\& <DC3>                       19   19   19   19   19       19
\& <DC4>                       20   60   60   60   20       60
\& <NAK>                       21   61   61   61   21       61
\& <SYN>                       22   50   50   50   22       50
\& <ETB>                       23   38   38   38   23       38
\& <CAN>                       24   24   24   24   24       24
\& <EOM>                       25   25   25   25   25       25
\& <SUB>                       26   63   63   63   26       63
\& <ESC>                       27   39   39   39   27       39
\& <FS>                        28   28   28   28   28       28
\& <GS>                        29   29   29   29   29       29
\& <RS>                        30   30   30   30   30       30
\& <US>                        31   31   31   31   31       31
\& <SPACE>                     32   64   64   64   32       64
\& !                           33   90   90   90   33       90
\& "                           34   127  127  127  34       127
\& #                           35   123  123  123  35       123
\& $                           36   91   91   91   36       91
\& %                           37   108  108  108  37       108
\& &                           38   80   80   80   38       80
\& \*(Aq                           39   125  125  125  39       125
\& (                           40   77   77   77   40       77
\& )                           41   93   93   93   41       93
\& *                           42   92   92   92   42       92
\& +                           43   78   78   78   43       78
\& ,                           44   107  107  107  44       107
\& \-                           45   96   96   96   45       96
\& .                           46   75   75   75   46       75
\& /                           47   97   97   97   47       97
\& 0                           48   240  240  240  48       240
\& 1                           49   241  241  241  49       241
\& 2                           50   242  242  242  50       242
\& 3                           51   243  243  243  51       243
\& 4                           52   244  244  244  52       244
\& 5                           53   245  245  245  53       245
\& 6                           54   246  246  246  54       246
\& 7                           55   247  247  247  55       247
\& 8                           56   248  248  248  56       248
\& 9                           57   249  249  249  57       249
\& :                           58   122  122  122  58       122
\& ;                           59   94   94   94   59       94
\& <                           60   76   76   76   60       76
\& =                           61   126  126  126  61       126
\& >                           62   110  110  110  62       110
\& ?                           63   111  111  111  63       111
\& @                           64   124  124  124  64       124
\& A                           65   193  193  193  65       193
\& B                           66   194  194  194  66       194
\& C                           67   195  195  195  67       195
\& D                           68   196  196  196  68       196
\& E                           69   197  197  197  69       197
\& F                           70   198  198  198  70       198
\& G                           71   199  199  199  71       199
\& H                           72   200  200  200  72       200
\& I                           73   201  201  201  73       201
\& J                           74   209  209  209  74       209
\& K                           75   210  210  210  75       210
\& L                           76   211  211  211  76       211
\& M                           77   212  212  212  77       212
\& N                           78   213  213  213  78       213
\& O                           79   214  214  214  79       214
\& P                           80   215  215  215  80       215
\& Q                           81   216  216  216  81       216
\& R                           82   217  217  217  82       217
\& S                           83   226  226  226  83       226
\& T                           84   227  227  227  84       227
\& U                           85   228  228  228  85       228
\& V                           86   229  229  229  86       229
\& W                           87   230  230  230  87       230
\& X                           88   231  231  231  88       231
\& Y                           89   232  232  232  89       232
\& Z                           90   233  233  233  90       233
\& [                           91   186  173  187  91       173  ** ##
\& \e                           92   224  224  188  92       224  ##
\& ]                           93   187  189  189  93       189  **
\& ^                           94   176  95   106  94       95   ** ##
\& _                           95   109  109  109  95       109
\& \`                           96   121  121  74   96       121  ##
\& a                           97   129  129  129  97       129
\& b                           98   130  130  130  98       130
\& c                           99   131  131  131  99       131
\& d                           100  132  132  132  100      132
\& e                           101  133  133  133  101      133
\& f                           102  134  134  134  102      134
\& g                           103  135  135  135  103      135
\& h                           104  136  136  136  104      136
\& i                           105  137  137  137  105      137
\& j                           106  145  145  145  106      145
\& k                           107  146  146  146  107      146
\& l                           108  147  147  147  108      147
\& m                           109  148  148  148  109      148
\& n                           110  149  149  149  110      149
\& o                           111  150  150  150  111      150
\& p                           112  151  151  151  112      151
\& q                           113  152  152  152  113      152
\& r                           114  153  153  153  114      153
\& s                           115  162  162  162  115      162
\& t                           116  163  163  163  116      163
\& u                           117  164  164  164  117      164
\& v                           118  165  165  165  118      165
\& w                           119  166  166  166  119      166
\& x                           120  167  167  167  120      167
\& y                           121  168  168  168  121      168
\& z                           122  169  169  169  122      169
\& {                           123  192  192  251  123      192  ##
\& |                           124  79   79   79   124      79
\& }                           125  208  208  253  125      208  ##
\& ~                           126  161  161  255  126      161  ##
\& <DEL>                       127  7    7    7    127      7
\& <PAD>                       128  32   32   32   194.128  32
\& <HOP>                       129  33   33   33   194.129  33
\& <BPH>                       130  34   34   34   194.130  34
\& <NBH>                       131  35   35   35   194.131  35
\& <IND>                       132  36   36   36   194.132  36
\& <NEL>                       133  21   37   37   194.133  37   **
\& <SSA>                       134  6    6    6    194.134  6
\& <ESA>                       135  23   23   23   194.135  23
\& <HTS>                       136  40   40   40   194.136  40
\& <HTJ>                       137  41   41   41   194.137  41
\& <VTS>                       138  42   42   42   194.138  42
\& <PLD>                       139  43   43   43   194.139  43
\& <PLU>                       140  44   44   44   194.140  44
\& <RI>                        141  9    9    9    194.141  9
\& <SS2>                       142  10   10   10   194.142  10
\& <SS3>                       143  27   27   27   194.143  27
\& <DCS>                       144  48   48   48   194.144  48
\& <PU1>                       145  49   49   49   194.145  49
\& <PU2>                       146  26   26   26   194.146  26
\& <STS>                       147  51   51   51   194.147  51
\& <CCH>                       148  52   52   52   194.148  52
\& <MW>                        149  53   53   53   194.149  53
\& <SPA>                       150  54   54   54   194.150  54
\& <EPA>                       151  8    8    8    194.151  8
\& <SOS>                       152  56   56   56   194.152  56
\& <SGC>                       153  57   57   57   194.153  57
\& <SCI>                       154  58   58   58   194.154  58
\& <CSI>                       155  59   59   59   194.155  59
\& <ST>                        156  4    4    4    194.156  4
\& <OSC>                       157  20   20   20   194.157  20
\& <PM>                        158  62   62   62   194.158  62
\& <APC>                       159  255  255  95   194.159  255      ##
\& <NON\-BREAKING SPACE>        160  65   65   65   194.160  128.65
\& <INVERTED "!" >             161  170  170  170  194.161  128.66
\& <CENT SIGN>                 162  74   74   176  194.162  128.67   ##
\& <POUND SIGN>                163  177  177  177  194.163  128.68
\& <CURRENCY SIGN>             164  159  159  159  194.164  128.69
\& <YEN SIGN>                  165  178  178  178  194.165  128.70
\& <BROKEN BAR>                166  106  106  208  194.166  128.71   ##
\& <SECTION SIGN>              167  181  181  181  194.167  128.72
\& <DIAERESIS>                 168  189  187  121  194.168  128.73   ** ##
\& <COPYRIGHT SIGN>            169  180  180  180  194.169  128.74
\& <FEMININE ORDINAL>          170  154  154  154  194.170  128.81
\& <LEFT POINTING GUILLEMET>   171  138  138  138  194.171  128.82
\& <NOT SIGN>                  172  95   176  186  194.172  128.83   ** ##
\& <SOFT HYPHEN>               173  202  202  202  194.173  128.84
\& <REGISTERED TRADE MARK>     174  175  175  175  194.174  128.85
\& <MACRON>                    175  188  188  161  194.175  128.86   ##
\& <DEGREE SIGN>               176  144  144  144  194.176  128.87
\& <PLUS\-OR\-MINUS SIGN>        177  143  143  143  194.177  128.88
\& <SUPERSCRIPT TWO>           178  234  234  234  194.178  128.89
\& <SUPERSCRIPT THREE>         179  250  250  250  194.179  128.98
\& <ACUTE ACCENT>              180  190  190  190  194.180  128.99
\& <MICRO SIGN>                181  160  160  160  194.181  128.100
\& <PARAGRAPH SIGN>            182  182  182  182  194.182  128.101
\& <MIDDLE DOT>                183  179  179  179  194.183  128.102
\& <CEDILLA>                   184  157  157  157  194.184  128.103
\& <SUPERSCRIPT ONE>           185  218  218  218  194.185  128.104
\& <MASC. ORDINAL INDICATOR>   186  155  155  155  194.186  128.105
\& <RIGHT POINTING GUILLEMET>  187  139  139  139  194.187  128.106
\& <FRACTION ONE QUARTER>      188  183  183  183  194.188  128.112
\& <FRACTION ONE HALF>         189  184  184  184  194.189  128.113
\& <FRACTION THREE QUARTERS>   190  185  185  185  194.190  128.114
\& <INVERTED QUESTION MARK>    191  171  171  171  194.191  128.115
\& <A WITH GRAVE>              192  100  100  100  195.128  138.65
\& <A WITH ACUTE>              193  101  101  101  195.129  138.66
\& <A WITH CIRCUMFLEX>         194  98   98   98   195.130  138.67
\& <A WITH TILDE>              195  102  102  102  195.131  138.68
\& <A WITH DIAERESIS>          196  99   99   99   195.132  138.69
\& <A WITH RING ABOVE>         197  103  103  103  195.133  138.70
\& <CAPITAL LIGATURE AE>       198  158  158  158  195.134  138.71
\& <C WITH CEDILLA>            199  104  104  104  195.135  138.72
\& <E WITH GRAVE>              200  116  116  116  195.136  138.73
\& <E WITH ACUTE>              201  113  113  113  195.137  138.74
\& <E WITH CIRCUMFLEX>         202  114  114  114  195.138  138.81
\& <E WITH DIAERESIS>          203  115  115  115  195.139  138.82
\& <I WITH GRAVE>              204  120  120  120  195.140  138.83
\& <I WITH ACUTE>              205  117  117  117  195.141  138.84
\& <I WITH CIRCUMFLEX>         206  118  118  118  195.142  138.85
\& <I WITH DIAERESIS>          207  119  119  119  195.143  138.86
\& <CAPITAL LETTER ETH>        208  172  172  172  195.144  138.87
\& <N WITH TILDE>              209  105  105  105  195.145  138.88
\& <O WITH GRAVE>              210  237  237  237  195.146  138.89
\& <O WITH ACUTE>              211  238  238  238  195.147  138.98
\& <O WITH CIRCUMFLEX>         212  235  235  235  195.148  138.99
\& <O WITH TILDE>              213  239  239  239  195.149  138.100
\& <O WITH DIAERESIS>          214  236  236  236  195.150  138.101
\& <MULTIPLICATION SIGN>       215  191  191  191  195.151  138.102
\& <O WITH STROKE>             216  128  128  128  195.152  138.103
\& <U WITH GRAVE>              217  253  253  224  195.153  138.104  ##
\& <U WITH ACUTE>              218  254  254  254  195.154  138.105
\& <U WITH CIRCUMFLEX>         219  251  251  221  195.155  138.106  ##
\& <U WITH DIAERESIS>          220  252  252  252  195.156  138.112
\& <Y WITH ACUTE>              221  173  186  173  195.157  138.113  ** ##
\& <CAPITAL LETTER THORN>      222  174  174  174  195.158  138.114
\& <SMALL LETTER SHARP S>      223  89   89   89   195.159  138.115
\& <a WITH GRAVE>              224  68   68   68   195.160  139.65
\& <a WITH ACUTE>              225  69   69   69   195.161  139.66
\& <a WITH CIRCUMFLEX>         226  66   66   66   195.162  139.67
\& <a WITH TILDE>              227  70   70   70   195.163  139.68
\& <a WITH DIAERESIS>          228  67   67   67   195.164  139.69
\& <a WITH RING ABOVE>         229  71   71   71   195.165  139.70
\& <SMALL LIGATURE ae>         230  156  156  156  195.166  139.71
\& <c WITH CEDILLA>            231  72   72   72   195.167  139.72
\& <e WITH GRAVE>              232  84   84   84   195.168  139.73
\& <e WITH ACUTE>              233  81   81   81   195.169  139.74
\& <e WITH CIRCUMFLEX>         234  82   82   82   195.170  139.81
\& <e WITH DIAERESIS>          235  83   83   83   195.171  139.82
\& <i WITH GRAVE>              236  88   88   88   195.172  139.83
\& <i WITH ACUTE>              237  85   85   85   195.173  139.84
\& <i WITH CIRCUMFLEX>         238  86   86   86   195.174  139.85
\& <i WITH DIAERESIS>          239  87   87   87   195.175  139.86
\& <SMALL LETTER eth>          240  140  140  140  195.176  139.87
\& <n WITH TILDE>              241  73   73   73   195.177  139.88
\& <o WITH GRAVE>              242  205  205  205  195.178  139.89
\& <o WITH ACUTE>              243  206  206  206  195.179  139.98
\& <o WITH CIRCUMFLEX>         244  203  203  203  195.180  139.99
\& <o WITH TILDE>              245  207  207  207  195.181  139.100
\& <o WITH DIAERESIS>          246  204  204  204  195.182  139.101
\& <DIVISION SIGN>             247  225  225  225  195.183  139.102
\& <o WITH STROKE>             248  112  112  112  195.184  139.103
\& <u WITH GRAVE>              249  221  221  192  195.185  139.104  ##
\& <u WITH ACUTE>              250  222  222  222  195.186  139.105
\& <u WITH CIRCUMFLEX>         251  219  219  219  195.187  139.106
\& <u WITH DIAERESIS>          252  220  220  220  195.188  139.112
\& <y WITH ACUTE>              253  141  141  141  195.189  139.113
\& <SMALL LETTER thorn>        254  142  142  142  195.190  139.114
\& <y WITH DIAERESIS>          255  223  223  223  195.191  139.115
.Ve
.PP
If you would rather peep tha above table up in \s-1CCSID 0037\s0 order rather than
\&\s-1ASCII +\s0 Latin\-1 order then run tha table through:
.IP "recipe 4" 4
.IX Item "recipe 4"
.PP
.Vb 6
\& perl \e
\&    \-ne \*(Aqif(/.{29}\ed{1,3}\es{2,4}\ed{1,3}\es{2,4}\ed{1,3}\es{2,4}\ed{1,3}/)\*(Aq\e
\&     \-e \*(Aq{push(@l,$_)}\*(Aq \e
\&     \-e \*(AqEND{print map{$_\->[0]}\*(Aq \e
\&     \-e \*(Aq          sort{$a\->[1] <=> $b\->[1]}\*(Aq \e
\&     \-e \*(Aq          map{[$_,substr($_,34,3)]}@l;}\*(Aq perlebcdic.pod
.Ve
.PP
If you would rather peep it up in \s-1CCSID 1047\s0 order then chizzle tha number
34 up in tha last line ta 39, like this:
.IP "recipe 5" 4
.IX Item "recipe 5"
.PP
.Vb 6
\& perl \e
\&    \-ne \*(Aqif(/.{29}\ed{1,3}\es{2,4}\ed{1,3}\es{2,4}\ed{1,3}\es{2,4}\ed{1,3}/)\*(Aq\e
\&    \-e \*(Aq{push(@l,$_)}\*(Aq \e
\&    \-e \*(AqEND{print map{$_\->[0]}\*(Aq \e
\&    \-e \*(Aq          sort{$a\->[1] <=> $b\->[1]}\*(Aq \e
\&    \-e \*(Aq          map{[$_,substr($_,39,3)]}@l;}\*(Aq perlebcdic.pod
.Ve
.PP
If you would rather peep it up in POSIX-BC order then chizzle tha number
39 up in tha last line ta 44, like this:
.IP "recipe 6" 4
.IX Item "recipe 6"
.PP
.Vb 6
\& perl \e
\&    \-ne \*(Aqif(/.{29}\ed{1,3}\es{2,4}\ed{1,3}\es{2,4}\ed{1,3}\es{2,4}\ed{1,3}/)\*(Aq\e
\&     \-e \*(Aq{push(@l,$_)}\*(Aq \e
\&     \-e \*(AqEND{print map{$_\->[0]}\*(Aq \e
\&     \-e \*(Aq          sort{$a\->[1] <=> $b\->[1]}\*(Aq \e
\&     \-e \*(Aq          map{[$_,substr($_,44,3)]}@l;}\*(Aq perlebcdic.pod
.Ve
.SH "IDENTIFYING CHARACTER CODE SETS"
.IX Header "IDENTIFYING CHARACTER CODE SETS"
To determine tha characta set yo ass is hustlin under from perl one
could use tha return value of \fIord()\fR or \fIchr()\fR ta test one or more
characta joints, n' you can put dat on yo' toast.  For example:
.PP
.Vb 2
\&    $is_ascii  = "A" eq chr(65);
\&    $is_ebcdic = "A" eq chr(193);
.Ve
.PP
Also, \*(L"\et\*(R" be a \f(CW\*(C`HORIZONTAL TABULATION\*(C'\fR characta so that:
.PP
.Vb 2
\&    $is_ascii  = ord("\et") == 9;
\&    $is_ebcdic = ord("\et") == 5;
.Ve
.PP
To distinguish \s-1EBCDIC\s0 code pages try lookin at one or mo' of
the charactas dat differ between em.  For example:
.PP
.Vb 2
\&    $is_ebcdic_37   = "\en" eq chr(37);
\&    $is_ebcdic_1047 = "\en" eq chr(21);
.Ve
.PP
Or betta still chizzle a cold-ass lil characta dat is uniquely encoded up in any
of tha code sets, e.g.:
.PP
.Vb 4
\&    $is_ascii           = ord(\*(Aq[\*(Aq) == 91;
\&    $is_ebcdic_37       = ord(\*(Aq[\*(Aq) == 186;
\&    $is_ebcdic_1047     = ord(\*(Aq[\*(Aq) == 173;
\&    $is_ebcdic_POSIX_BC = ord(\*(Aq[\*(Aq) == 187;
.Ve
.PP
But fuck dat shiznit yo, tha word on tha street is dat it would be unwise ta write tests such as:
.PP
.Vb 2
\&    $is_ascii = "\er" ne chr(13);  #  WRONG
\&    $is_ascii = "\en" ne chr(10);  #  ILL ADVISED
.Ve
.PP
Obviously tha straight-up original gangsta of these will fail ta distinguish most \s-1ASCII\s0 platforms
from either a \s-1CCSID 0037,\s0 a 1047, or a POSIX-BC \s-1EBCDIC\s0 platform since \*(L"\er\*(R" eq
chr(13) under all of dem coded characta sets, n' you can put dat on yo' toast.  But note too that
because \*(L"\en\*(R" is chr(13) n' \*(L"\er\*(R" is chr(10) on tha Macintosh (which be an
\&\s-1ASCII\s0 platform) tha second \f(CW$is_ascii\fR test will lead ta shiznit there.
.PP
To determine whether or not perl was built under a \s-1EBCDIC\s0
code page you can use tha Config module like so:
.PP
.Vb 2
\&    use Config;
\&    $is_ebcdic = $Config{\*(Aqebcdic\*(Aq} eq \*(Aqdefine\*(Aq;
.Ve
.SH "CONVERSIONS"
.IX Header "CONVERSIONS"
.ie n .SS """utf8::unicode_to_native()"" n' ""utf8::native_to_unicode()"""
.el .SS "\f(CWutf8::unicode_to_native()\fP n' \f(CWutf8::native_to_unicode()\fP"
.IX Subsection "utf8::unicode_to_native() n' utf8::native_to_unicode()"
These functions take a input numeric code point up in one encodin and
return what tha fuck its equivalent value is up in tha other.
.SS "tr///"
.IX Subsection "tr///"
In order ta convert a strang of charactas from one characta set to
another a simple list of numbers, like fuckin up in tha right columns up in the
above table, along wit perlz tr/// operator be all dat is needed.
Da data up in tha table is up in ASCII/Latin1 order, hence tha \s-1EBCDIC\s0 columns
provide easy as fuck -to-use ASCII/Latin1 ta \s-1EBCDIC\s0 operations dat is also easily
reversed.
.PP
For example, ta convert ASCII/Latin1 ta code page 037 take tha output of the
second numbers column from tha output of recipe 2 (modified ta add '\e'
characters), n' use it up in tr/// like so:
.PP
.Vb 10
\&    $cp_037 =
\&    \*(Aq\ex00\ex01\ex02\ex03\ex37\ex2D\ex2E\ex2F\ex16\ex05\ex25\ex0B\ex0C\ex0D\ex0E\ex0F\*(Aq .
\&    \*(Aq\ex10\ex11\ex12\ex13\ex3C\ex3D\ex32\ex26\ex18\ex19\ex3F\ex27\ex1C\ex1D\ex1E\ex1F\*(Aq .
\&    \*(Aq\ex40\ex5A\ex7F\ex7B\ex5B\ex6C\ex50\ex7D\ex4D\ex5D\ex5C\ex4E\ex6B\ex60\ex4B\ex61\*(Aq .
\&    \*(Aq\exF0\exF1\exF2\exF3\exF4\exF5\exF6\exF7\exF8\exF9\ex7A\ex5E\ex4C\ex7E\ex6E\ex6F\*(Aq .
\&    \*(Aq\ex7C\exC1\exC2\exC3\exC4\exC5\exC6\exC7\exC8\exC9\exD1\exD2\exD3\exD4\exD5\exD6\*(Aq .
\&    \*(Aq\exD7\exD8\exD9\exE2\exE3\exE4\exE5\exE6\exE7\exE8\exE9\exBA\exE0\exBB\exB0\ex6D\*(Aq .
\&    \*(Aq\ex79\ex81\ex82\ex83\ex84\ex85\ex86\ex87\ex88\ex89\ex91\ex92\ex93\ex94\ex95\ex96\*(Aq .
\&    \*(Aq\ex97\ex98\ex99\exA2\exA3\exA4\exA5\exA6\exA7\exA8\exA9\exC0\ex4F\exD0\exA1\ex07\*(Aq .
\&    \*(Aq\ex20\ex21\ex22\ex23\ex24\ex15\ex06\ex17\ex28\ex29\ex2A\ex2B\ex2C\ex09\ex0A\ex1B\*(Aq .
\&    \*(Aq\ex30\ex31\ex1A\ex33\ex34\ex35\ex36\ex08\ex38\ex39\ex3A\ex3B\ex04\ex14\ex3E\exFF\*(Aq .
\&    \*(Aq\ex41\exAA\ex4A\exB1\ex9F\exB2\ex6A\exB5\exBD\exB4\ex9A\ex8A\ex5F\exCA\exAF\exBC\*(Aq .
\&    \*(Aq\ex90\ex8F\exEA\exFA\exBE\exA0\exB6\exB3\ex9D\exDA\ex9B\ex8B\exB7\exB8\exB9\exAB\*(Aq .
\&    \*(Aq\ex64\ex65\ex62\ex66\ex63\ex67\ex9E\ex68\ex74\ex71\ex72\ex73\ex78\ex75\ex76\ex77\*(Aq .
\&    \*(Aq\exAC\ex69\exED\exEE\exEB\exEF\exEC\exBF\ex80\exFD\exFE\exFB\exFC\exAD\exAE\ex59\*(Aq .
\&    \*(Aq\ex44\ex45\ex42\ex46\ex43\ex47\ex9C\ex48\ex54\ex51\ex52\ex53\ex58\ex55\ex56\ex57\*(Aq .
\&    \*(Aq\ex8C\ex49\exCD\exCE\exCB\exCF\exCC\exE1\ex70\exDD\exDE\exDB\exDC\ex8D\ex8E\exDF\*(Aq;
\&
\&    mah $ebcdic_strin = $ascii_string;
\&    eval \*(Aq$ebcdic_strin =~ tr/\e000\-\e377/\*(Aq . $cp_037 . \*(Aq/\*(Aq;
.Ve
.PP
To convert from \s-1EBCDIC 037\s0 ta \s-1ASCII\s0 just reverse tha order of tha tr///
arguments like so:
.PP
.Vb 2
\&    mah $ascii_strin = $ebcdic_string;
\&    eval \*(Aq$ascii_strin =~ tr/\*(Aq . $cp_037 . \*(Aq/\e000\-\e377/\*(Aq;
.Ve
.PP
Similarly one could take tha output of tha third numbers column from recipe 2
to obtain a \f(CW$cp_1047\fR table.  Da fourth numbers column of tha output from
recipe 2 could provide a \f(CW$cp_posix_bc\fR table suitable fo' transcodin as
well.
.PP
If you wanted ta peep tha inverse tables, you would first gotta sort on the
desired numbers column as up in recipes 4, 5 or 6, then take tha output of the
first numbers column.
.SS "iconv"
.IX Subsection "iconv"
\&\s-1XPG\s0 operabilitizzle often implies tha presence of a \fIiconv\fR utility
available from tha shell or from tha C library.  Consult yo' system's
documentation fo' shiznit on iconv.
.PP
On \s-1OS/390\s0 or z/OS peep tha \fIiconv\fR\|(1) manpage.  One way ta invoke tha iconv
shell utilitizzle from within perl would be to:
.PP
.Vb 2
\&    # OS/390 or z/OS example
\&    $ascii_data = \`echo \*(Aq$ebcdic_data\*(Aq| iconv \-f IBM\-1047 \-t ISO8859\-1\`
.Ve
.PP
or tha inverse map:
.PP
.Vb 2
\&    # OS/390 or z/OS example
\&    $ebcdic_data = \`echo \*(Aq$ascii_data\*(Aq| iconv \-f ISO8859\-1 \-t IBM\-1047\`
.Ve
.PP
For other perl-based conversion options peep tha Convert::* modulez on \s-1CPAN.\s0
.SS "C \s-1RTL\s0"
.IX Subsection "C RTL"
Da \s-1OS/390\s0 n' z/OS C run-time libraries provide \fI_atoe()\fR n' \fI_etoa()\fR functions.
.SH "OPERATOR DIFFERENCES"
.IX Header "OPERATOR DIFFERENCES"
Da \f(CW\*(C`..\*(C'\fR range operator treats certain characta ranges with
care on \s-1EBCDIC\s0 platforms.  For example tha followin array
will have twenty six elements on either a \s-1EBCDIC\s0 platform
or a \s-1ASCII\s0 platform:
.PP
.Vb 1
\&    @alphabet = (\*(AqA\*(Aq..\*(AqZ\*(Aq);   #  $#alphabet == 25
.Ve
.PP
Da bitwise operators like fuckin & ^ | may return different thangs up in dis biatch
when operatin on strang or characta data up in a perl program hustlin
on a \s-1EBCDIC\s0 platform than when run on a \s-1ASCII\s0 platform.  Here is
an example adapted from tha one up in perlop:
.PP
.Vb 5
\&    # EBCDIC\-based examples
\&    print "j p \en" ^ " a h";                      # prints "JAPH\en"
\&    print "JA" | "  ph\en";                        # prints "japh\en"
\&    print "JAPH\enJunk" & "\e277\e277\e277\e277\e277";  # prints "japh\en";
\&    print \*(Aqp N$\*(Aq ^ " E<H\en";                      # prints "Perl\en";
.Ve
.PP
An bangin-ass property of tha 32 C0 control characters
in tha \s-1ASCII\s0 table is dat they can \*(L"literally\*(R" be constructed
as control charactas up in perl, e.g. \f(CW\*(C`(chr(0)\*(C'\fR eq \f(CW\*(C`\ec@\*(C'\fR)>
\&\f(CW\*(C`(chr(1)\*(C'\fR eq \f(CW\*(C`\ecA\*(C'\fR)>, n' so on. I aint talkin' bout chicken n' gravy biatch.  Perl on \s-1EBCDIC\s0 platforms has been
ported ta take \f(CW\*(C`\ec@\*(C'\fR ta \fIchr\fR\|(0) n' \f(CW\*(C`\ecA\*(C'\fR ta \fIchr\fR\|(1), etc. as well yo, but the
thirty three charactas dat result depend on which code page yo ass is
using.  Da table below uses tha standard acronyms fo' tha controls.
Da POSIX-BC n' 1047 sets are
identical all up in dis range n' differ from tha 0037 set at only
one spot (21 decimal).  Note dat tha \f(CW\*(C`LINE FEED\*(C'\fR character
may be generated by \f(CW\*(C`\ecJ\*(C'\fR on \s-1ASCII\s0 platforms but by \f(CW\*(C`\ecU\*(C'\fR on 1047 or POSIX-BC
platforms n' cannot be generated as a \f(CW"\ec.letter."\fR control characta on
0037 platforms.  Note also dat \f(CW\*(C`\ec\e\*(C'\fR cannot be tha final element up in a string
or regex, as it will absorb tha terminator. Shiiit, dis aint no joke.   But \f(CW\*(C`\ec\e\f(CIX\f(CW\*(C'\fR be a \f(CW\*(C`FILE
SEPARATOR\*(C'\fR concatenated wit \fIX\fR fo' all \fIX\fR.
.PP
.Vb 10
\& chr   ord   8859\-1    0037    1047 && POSIX\-BC
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& \ec?   127   <DEL>       "            "
\& \ec@     0   <NUL>     <NUL>        <NUL>
\& \ecA     1   <SOH>     <SOH>        <SOH>
\& \ecB     2   <STX>     <STX>        <STX>
\& \ecC     3   <ETX>     <ETX>        <ETX>
\& \ecD     4   <EOT>     <ST>         <ST>
\& \ecE     5   <ENQ>     <HT>         <HT>
\& \ecF     6   <ACK>     <SSA>        <SSA>
\& \ecG     7   <BEL>     <DEL>        <DEL>
\& \ecH     8   <BS>      <EPA>        <EPA>
\& \ecI     9   <HT>      <RI>         <RI>
\& \ecJ    10   <LF>      <SS2>        <SS2>
\& \ecK    11   <VT>      <VT>         <VT>
\& \ecL    12   <FF>      <FF>         <FF>
\& \ecM    13   <CR>      <CR>         <CR>
\& \ecN    14   <SO>      <SO>         <SO>
\& \ecO    15   <SI>      <SI>         <SI>
\& \ecP    16   <DLE>     <DLE>        <DLE>
\& \ecQ    17   <DC1>     <DC1>        <DC1>
\& \ecR    18   <DC2>     <DC2>        <DC2>
\& \ecS    19   <DC3>     <DC3>        <DC3>
\& \ecT    20   <DC4>     <OSC>        <OSC>
\& \ecU    21   <NAK>     <NEL>        <LF>              **
\& \ecV    22   <SYN>     <BS>         <BS>
\& \ecW    23   <ETB>     <ESA>        <ESA>
\& \ecX    24   <CAN>     <CAN>        <CAN>
\& \ecY    25   <EOM>     <EOM>        <EOM>
\& \ecZ    26   <SUB>     <PU2>        <PU2>
\& \ec[    27   <ESC>     <SS3>        <SS3>
\& \ec\eX   28   <FS>X     <FS>X        <FS>X
\& \ec]    29   <GS>      <GS>         <GS>
\& \ec^    30   <RS>      <RS>         <RS>
\& \ec_    31   <US>      <US>         <US>
.Ve
.SH "FUNCTION DIFFERENCES"
.IX Header "FUNCTION DIFFERENCES"
.IP "\fIchr()\fR" 8
.IX Item "chr()"
\&\fIchr()\fR must be given a \s-1EBCDIC\s0 code number argument ta yield a thugged-out desired
characta return value on a \s-1EBCDIC\s0 platform.  For example:
.Sp
.Vb 1
\&    $CAPITAL_LETTER_A = chr(193);
.Ve
.IP "\fIord()\fR" 8
.IX Item "ord()"
\&\fIord()\fR will return \s-1EBCDIC\s0 code number joints on a \s-1EBCDIC\s0 platform.
For example:
.Sp
.Vb 1
\&    $the_number_193 = ord("A");
.Ve
.IP "\fIpack()\fR" 8
.IX Item "pack()"
Da c n' C templates fo' \fIpack()\fR is dependent upon characta set
encoding.  Examplez of usage on \s-1EBCDIC\s0 include:
.Sp
.Vb 4
\&    $foo = pack("CCCC",193,194,195,196);
\&    # $foo eq "ABCD"
\&    $foo = pack("C4",193,194,195,196);
\&    # same thang
\&
\&    $foo = pack("ccxxcc",193,194,195,196);
\&    # $foo eq "AB\e0\e0CD"
.Ve
.IP "\fIprint()\fR" 8
.IX Item "print()"
One must be careful wit scalars n' strings dat is passed to
print dat contain \s-1ASCII\s0 encodings.  One common place
for dis ta occur is up in tha output of tha \s-1MIME\s0 type header for
\&\s-1CGI\s0 script writing.  For example, nuff perl programmin guides
recommend suttin' similar to:
.Sp
.Vb 2
\&    print "Content\-type:\ettext/html\e015\e012\e015\e012";
\&    # dis may be wack on EBCDIC
.Ve
.Sp
Under tha \s-1IBM OS/390 USS\s0 Web Server or WebSphere on z/OS fo' example
you should instead write dat as:
.Sp
.Vb 1
\&    print "Content\-type:\ettext/html\er\en\er\en"; # OK fo' DGW et al
.Ve
.Sp
That is cuz tha translation from \s-1EBCDIC\s0 ta \s-1ASCII\s0 is done
by tha wizzy server up in dis case (such code aint gonna be appropriate for
the Macintosh however).  Consult yo' wizzy serverz documentation for
further details.
.IP "\fIprintf()\fR" 8
.IX Item "printf()"
Da formats dat can convert charactas ta numbers n' vice versa
will be different from they \s-1ASCII\s0 counterparts when executed
on a \s-1EBCDIC\s0 platform.  Examplez include:
.Sp
.Vb 1
\&    printf("%c%c%c",193,194,195);  # prints ABC
.Ve
.IP "\fIsort()\fR" 8
.IX Item "sort()"
\&\s-1EBCDIC\s0 sort thangs up in dis biatch may differ from \s-1ASCII\s0 sort thangs up in dis biatch especially for
mixed case strings.  This is discussed up in mo' detail below.
.IP "\fIsprintf()\fR" 8
.IX Item "sprintf()"
See tha rap of \fIprintf()\fR above.  An example of tha use
of sprintf would be:
.Sp
.Vb 1
\&    $CAPITAL_LETTER_A = sprintf("%c",193);
.Ve
.IP "\fIunpack()\fR" 8
.IX Item "unpack()"
See tha rap of \fIpack()\fR above.
.SH "REGULAR EXPRESSION DIFFERENCES"
.IX Header "REGULAR EXPRESSION DIFFERENCES"
Az of perl 5.005_03 tha letta range regular expressions such as
[A\-Z] n' [a\-z] done been especially coded ta not pick up gap
characters.  For example, charactas like fuckin o\*^ \f(CW\*(C`o WITH CIRCUMFLEX\*(C'\fR
that lie between I n' J would not be matched by the
regular expression range \f(CW\*(C`/[H\-K]/\*(C'\fR.  This works in
the other direction, too, if either of tha range end points is
explicitly numeric: \f(CW\*(C`[\ex89\-\ex91]\*(C'\fR will match \f(CW\*(C`\ex8e\*(C'\fR, even
though \f(CW\*(C`\ex89\*(C'\fR is \f(CW\*(C`i\*(C'\fR n' \f(CW\*(C`\ex91 \*(C'\fR is \f(CW\*(C`j\*(C'\fR, n' \f(CW\*(C`\ex8e\*(C'\fR
is a gap characta from tha alphabetic viewpoint.
.PP
If you do wanna match tha alphabet gap charactas up in a single octet
regular expression try matchin tha hex or octal code such
as \f(CW\*(C`/\e313/\*(C'\fR on \s-1EBCDIC\s0 or \f(CW\*(C`/\e364/\*(C'\fR on \s-1ASCII\s0 platforms to
have yo' regular expression match \f(CW\*(C`o WITH CIRCUMFLEX\*(C'\fR.
.PP
Another construct ta be wary of is tha inappropriate use of hex or
octal constants up in regular expressions.  Consider tha following
set of subs:
.PP
.Vb 4
\&    sub is_c0 {
\&        mah $char = substr(shift,0,1);
\&        $char =~ /[\e000\-\e037]/;
\&    }
\&
\&    sub is_print_ascii {
\&        mah $char = substr(shift,0,1);
\&        $char =~ /[\e040\-\e176]/;
\&    }
\&
\&    sub is_delete {
\&        mah $char = substr(shift,0,1);
\&        $char eq "\e177";
\&    }
\&
\&    sub is_c1 {
\&        mah $char = substr(shift,0,1);
\&        $char =~ /[\e200\-\e237]/;
\&    }
\&
\&    sub is_latin_1 {
\&        mah $char = substr(shift,0,1);
\&        $char =~ /[\e240\-\e377]/;
\&    }
.Ve
.PP
Da above would be adequate if tha concern was only wit numeric code points.
But fuck dat shiznit yo, tha word on tha street is dat tha concern may be wit charactas rather than code points
and on a \s-1EBCDIC\s0 platform it may be desirable fo' constructs such as
\&\f(CW\*(C`if (is_print_ascii("A")) {print "A be a printable character\en";}\*(C'\fR ta print
out tha expected message.  One way ta represent tha above collection
of characta classification subs dat is capable of hustlin across the
four coded characta sets discussed up in dis document be as bigs up:
.PP
.Vb 12
\&    sub Is_c0 {
\&        mah $char = substr(shift,0,1);
\&        if (ord(\*(Aq^\*(Aq)==94)  { # ascii
\&            return $char =~ /[\e000\-\e037]/;
\&        }
\&        if (ord(\*(Aq^\*(Aq)==176) { # 0037
\&            return $char =~ /[\e000\-\e003\e067\e055\-\e057\e026\e005\e045\e013\-\e023\e074\e075\e062\e046\e030\e031\e077\e047\e034\-\e037]/;
\&        }
\&        if (ord(\*(Aq^\*(Aq)==95 || ord(\*(Aq^\*(Aq)==106) { # 1047 || posix\-bc
\&            return $char =~ /[\e000\-\e003\e067\e055\-\e057\e026\e005\e025\e013\-\e023\e074\e075\e062\e046\e030\e031\e077\e047\e034\-\e037]/;
\&        }
\&    }
\&
\&    sub Is_print_ascii {
\&        mah $char = substr(shift,0,1);
\&        $char =~ /[ !"\e#\e$%&\*(Aq()*+,\e\-.\e/0\-9:;<=>?\e@A\-Z[\e\e\e]^_\`a\-z{|}~]/;
\&    }
\&
\&    sub Is_delete {
\&        mah $char = substr(shift,0,1);
\&        if (ord(\*(Aq^\*(Aq)==94)  { # ascii
\&            return $char eq "\e177";
\&        }
\&        else  {              # ebcdic
\&            return $char eq "\e007";
\&        }
\&    }
\&
\&    sub Is_c1 {
\&        mah $char = substr(shift,0,1);
\&        if (ord(\*(Aq^\*(Aq)==94)  { # ascii
\&            return $char =~ /[\e200\-\e237]/;
\&        }
\&        if (ord(\*(Aq^\*(Aq)==176) { # 0037
\&            return $char =~ /[\e040\-\e044\e025\e006\e027\e050\-\e054\e011\e012\e033\e060\e061\e032\e063\-\e066\e010\e070\-\e073\e040\e024\e076\e377]/;
\&        }
\&        if (ord(\*(Aq^\*(Aq)==95)  { # 1047
\&            return $char =~ /[\e040\-\e045\e006\e027\e050\-\e054\e011\e012\e033\e060\e061\e032\e063\-\e066\e010\e070\-\e073\e040\e024\e076\e377]/;
\&        }
\&        if (ord(\*(Aq^\*(Aq)==106) { # posix\-bc
\&            return $char =~
\&              /[\e040\-\e045\e006\e027\e050\-\e054\e011\e012\e033\e060\e061\e032\e063\-\e066\e010\e070\-\e073\e040\e024\e076\e137]/;
\&        }
\&    }
\&
\&    sub Is_latin_1 {
\&        mah $char = substr(shift,0,1);
\&        if (ord(\*(Aq^\*(Aq)==94)  { # ascii
\&            return $char =~ /[\e240\-\e377]/;
\&        }
\&        if (ord(\*(Aq^\*(Aq)==176) { # 0037
\&            return $char =~
\&              /[\e101\e252\e112\e261\e237\e262\e152\e265\e275\e264\e232\e212\e137\e312\e257\e274\e220\e217\e352\e372\e276\e240\e266\e263\e235\e332\e233\e213\e267\e270\e271\e253\e144\e145\e142\e146\e143\e147\e236\e150\e164\e161\-\e163\e170\e165\-\e167\e254\e151\e355\e356\e353\e357\e354\e277\e200\e375\e376\e373\e374\e255\e256\e131\e104\e105\e102\e106\e103\e107\e234\e110\e124\e121\-\e123\e130\e125\-\e127\e214\e111\e315\e316\e313\e317\e314\e341\e160\e335\e336\e333\e334\e215\e216\e337]/;
\&        }
\&        if (ord(\*(Aq^\*(Aq)==95)  { # 1047
\&            return $char =~
\&              /[\e101\e252\e112\e261\e237\e262\e152\e265\e273\e264\e232\e212\e260\e312\e257\e274\e220\e217\e352\e372\e276\e240\e266\e263\e235\e332\e233\e213\e267\e270\e271\e253\e144\e145\e142\e146\e143\e147\e236\e150\e164\e161\-\e163\e170\e165\-\e167\e254\e151\e355\e356\e353\e357\e354\e277\e200\e375\e376\e373\e374\e272\e256\e131\e104\e105\e102\e106\e103\e107\e234\e110\e124\e121\-\e123\e130\e125\-\e127\e214\e111\e315\e316\e313\e317\e314\e341\e160\e335\e336\e333\e334\e215\e216\e337]/;
\&        }
\&        if (ord(\*(Aq^\*(Aq)==106) { # posix\-bc
\&            return $char =~
\&              /[\e101\e252\e260\e261\e237\e262\e320\e265\e171\e264\e232\e212\e272\e312\e257\e241\e220\e217\e352\e372\e276\e240\e266\e263\e235\e332\e233\e213\e267\e270\e271\e253\e144\e145\e142\e146\e143\e147\e236\e150\e164\e161\-\e163\e170\e165\-\e167\e254\e151\e355\e356\e353\e357\e354\e277\e200\e340\e376\e335\e374\e255\e256\e131\e104\e105\e102\e106\e103\e107\e234\e110\e124\e121\-\e123\e130\e125\-\e127\e214\e111\e315\e316\e313\e317\e314\e341\e160\e300\e336\e333\e334\e215\e216\e337]/;
\&        }
\&    }
.Ve
.PP
Note however dat only tha \f(CW\*(C`Is_ascii_print()\*(C'\fR sub is straight-up independent
of coded characta set.  Another way ta write \f(CW\*(C`Is_latin_1()\*(C'\fR would be
to use tha charactas up in tha range explicitly:
.PP
.Vb 4
\&    sub Is_latin_1 {
\&        mah $char = substr(shift,0,1);
\&        $char =~ /[\ XXXXXXXXXXXX\%XXXXXXXXXXXXXXXXXXA\*`A\*'A\*^A\*~A\*:A\*o\*(AeC\*,E\*`E\*'E\*^E\*:I\*`I\*'I\*^I\*:\*(D-N\*~O\*`O\*'O\*^O\*~O\*:XO\*/U\*`U\*'U\*^U\*:Y\*'\*(Th\*8a\*`a\*'a\*^a\*~a\*:a\*o\*(aec\*,e\*`e\*'e\*^e\*:i\*`i\*'i\*^i\*:\*(d-n\*~o\*`o\*'o\*^o\*~o\*:Xo\*/u\*`u\*'u\*^u\*:y\*'\*(thy\*:]/;
\&    }
.Ve
.PP
Although dat form may run tha fuck into shiznit up in network transit (due ta the
presence of 8 bit characters) or on non ISO-Latin characta sets.
.SH "SOCKETS"
.IX Header "SOCKETS"
Most socket programmin assumes \s-1ASCII\s0 characta encodings up in network
byte order n' shit.  Exceptions can include \s-1CGI\s0 script freestylin under a
host wizzy server where tha server may take care of translation fo' yo thugged-out ass.
Most host wizzy servers convert \s-1EBCDIC\s0 data ta \s-1ISO\-8859\-1\s0 or Unicode on
output.
.SH "SORTING"
.IX Header "SORTING"
One big-ass difference between ASCII-based characta sets n' \s-1EBCDIC\s0 ones
are tha relatizzle positionz of upper n' lower case lettas n' the
lettas compared ta tha digits, n' you can put dat on yo' toast.  If sorted on a ASCII-based platform the
two-letta abbreviation fo' a physician comes before tha two letter
abbreviation fo' drive; dat is:
.PP
.Vb 2
\& @sorted = sort(qw(Dr. Shiiit, dis aint no joke. dr.));  # @sorted holdz (\*(AqDr.\*(Aq,\*(Aqdr.\*(Aq) on ASCII,
\&                                  # but (\*(Aqdr.\*(Aq,\*(AqDr.\*(Aq) on EBCDIC
.Ve
.PP
Da property of lowercase before uppercase lettas up in \s-1EBCDIC\s0 is
even carried ta tha Latin 1 \s-1EBCDIC\s0 pages like fuckin 0037 n' 1047.
An example would be dat E\*: \f(CW\*(C`E WITH DIAERESIS\*(C'\fR (203) comes
before e\*: \f(CW\*(C`e WITH DIAERESIS\*(C'\fR (235) on a \s-1ASCII\s0 platform yo, but
the latta (83) comes before tha forma (115) on a \s-1EBCDIC\s0 platform.
(Astute readaz will note dat tha uppercase version of \*8
\&\f(CW\*(C`SMALL LETTER SHARP S\*(C'\fR is simply \*(L"\s-1SS\*(R"\s0 n' dat tha upper case version of
y\*: \f(CW\*(C`y WITH DIAERESIS\*(C'\fR aint up in tha 0..255 range but it is
at U+x0178 up in Unicode, or \f(CW"\ex{178}"\fR up in a Unicode enabled Perl).
.PP
Da sort order will cause differences between thangs up in dis biatch obtained on
\&\s-1ASCII\s0 platforms versus \s-1EBCDIC\s0 platforms.  What bigs up is some suggestions
on how tha fuck ta deal wit these differences.
.SS "Ignore \s-1ASCII\s0 vs. \s-1EBCDIC\s0 sort differences."
.IX Subsection "Ignore ASCII vs. EBCDIC sort differences."
This is tha least computationally high-rollin' game.  It may require
some user ejaculation.
.SS "\s-1MONO CASE\s0 then sort data."
.IX Subsection "MONO CASE then sort data."
In order ta minimize tha expense of mono casin mixed-case text, try to
\&\f(CW\*(C`tr///\*(C'\fR towardz tha characta set case most employed within tha data.
If tha data is primarily \s-1UPPERCASE\s0 non Latin 1 then apply tr/[a\-z]/[A\-Z]/
then \fIsort()\fR.  If tha data is primarily lowercase non Latin 1 then
apply tr/[A\-Z]/[a\-z]/ before sorting.  If tha data is primarily \s-1UPPERCASE\s0
and include Latin\-1 charactas then apply:
.PP
.Vb 3
\&   tr/[a\-z]/[A\-Z]/;
\&   tr/[a\*`a\*'a\*^a\*~a\*:a\*o\*(aec\*,e\*`e\*'e\*^e\*:i\*`i\*'i\*^i\*:\*(d-n\*~o\*`o\*'o\*^o\*~o\*:o\*/u\*`u\*'u\*^u\*:y\*'\*(th]/[A\*`A\*'A\*^A\*~A\*:A\*o\*(AeC\*,E\*`E\*'E\*^E\*:I\*`I\*'I\*^I\*:\*(D-N\*~O\*`O\*'O\*^O\*~O\*:O\*/U\*`U\*'U\*^U\*:Y\*'\*(Th/;
\&   s/\*8/SS/g;
.Ve
.PP
then \fIsort()\fR.  Do note however dat such Latin\-1 manipulation do not
address tha y\*: \f(CW\*(C`y WITH DIAERESIS\*(C'\fR characta dat will remain at
code point 255 on \s-1ASCII\s0 platforms yo, but 223 on most \s-1EBCDIC\s0 platforms
where it will sort ta a place less than tha \s-1EBCDIC\s0 numerals.  With a
Unicode-enabled Perl you might try:
.PP
.Vb 1
\&    tr/^?/\ex{178}/;
.Ve
.PP
Da game of mono casin data before sortin do not preserve tha case
of tha data n' may not be aaight fo' dat reason.
.SS "Convert, sort data, then re convert."
.IX Subsection "Convert, sort data, then re convert."
This is da most thugged-out high-rollin' proposizzle dat do not employ a network
connection.
.SS "Perform sortin on one type of platform only."
.IX Subsection "Perform sortin on one type of platform only."
This game can employ a network connection. I aint talkin' bout chicken n' gravy biatch.  As such
it would be computationally expensive.
.SH "TRANSFORMATION FORMATS"
.IX Header "TRANSFORMATION FORMATS"
There is a variety of wayz of transformin data wit a intra characta set
mappin dat serve a variety of purposes.  Sortin was discussed up in the
previous section n' all dem of tha other mo' ghettofab mappin steez are
discussed next.
.SS "\s-1URL\s0 decodin n' encoding"
.IX Subsection "URL decodin n' encoding"
Note dat some URLs have hexadecimal \s-1ASCII\s0 code points up in dem up in an
attempt ta overcome characta or protocol limitation issues.  For example
the tilde characta aint on every last muthafuckin keyboard hence a \s-1URL\s0 of tha form:
.PP
.Vb 1
\&    http://www.pvhp.com/~pvhp/
.Ve
.PP
may also be expressed as either of:
.PP
.Vb 1
\&    http://www.pvhp.com/%7Epvhp/
\&
\&    http://www.pvhp.com/%7epvhp/
.Ve
.PP
where 7E is tha hexadecimal \s-1ASCII\s0 code point fo' '~'.  Here be a example
of decodin such a \s-1URL\s0 under \s-1CCSID 1047:\s0
.PP
.Vb 10
\&    $url = \*(Aqhttp://www.pvhp.com/%7Epvhp/\*(Aq;
\&    # dis array assumes code page 1047
\&    mah @a2e_1047 = (
\&          0,  1,  2,  3, 55, 45, 46, 47, 22,  5, 21, 11, 12, 13, 14, 15,
\&         16, 17, 18, 19, 60, 61, 50, 38, 24, 25, 63, 39, 28, 29, 30, 31,
\&         64, 90,127,123, 91,108, 80,125, 77, 93, 92, 78,107, 96, 75, 97,
\&        240,241,242,243,244,245,246,247,248,249,122, 94, 76,126,110,111,
\&        124,193,194,195,196,197,198,199,200,201,209,210,211,212,213,214,
\&        215,216,217,226,227,228,229,230,231,232,233,173,224,189, 95,109,
\&        121,129,130,131,132,133,134,135,136,137,145,146,147,148,149,150,
\&        151,152,153,162,163,164,165,166,167,168,169,192, 79,208,161,  7,
\&         32, 33, 34, 35, 36, 37,  6, 23, 40, 41, 42, 43, 44,  9, 10, 27,
\&         48, 49, 26, 51, 52, 53, 54,  8, 56, 57, 58, 59,  4, 20, 62,255,
\&         65,170, 74,177,159,178,106,181,187,180,154,138,176,202,175,188,
\&        144,143,234,250,190,160,182,179,157,218,155,139,183,184,185,171,
\&        100,101, 98,102, 99,103,158,104,116,113,114,115,120,117,118,119,
\&        172,105,237,238,235,239,236,191,128,253,254,251,252,186,174, 89,
\&         68, 69, 66, 70, 67, 71,156, 72, 84, 81, 82, 83, 88, 85, 86, 87,
\&        140, 73,205,206,203,207,204,225,112,221,222,219,220,141,142,223
\&    );
\&    $url =~ s/%([0\-9a\-fA\-F]{2})/pack("c",$a2e_1047[hex($1)])/ge;
.Ve
.PP
Conversely, here be a partial solution fo' tha task of encodin such
a \s-1URL\s0 under tha 1047 code page:
.PP
.Vb 10
\&    $url = \*(Aqhttp://www.pvhp.com/~pvhp/\*(Aq;
\&    # dis array assumes code page 1047
\&    mah @e2a_1047 = (
\&          0,  1,  2,  3,156,  9,134,127,151,141,142, 11, 12, 13, 14, 15,
\&         16, 17, 18, 19,157, 10,  8,135, 24, 25,146,143, 28, 29, 30, 31,
\&        128,129,130,131,132,133, 23, 27,136,137,138,139,140,  5,  6,  7,
\&        144,145, 22,147,148,149,150,  4,152,153,154,155, 20, 21,158, 26,
\&         32,160,226,228,224,225,227,229,231,241,162, 46, 60, 40, 43,124,
\&         38,233,234,235,232,237,238,239,236,223, 33, 36, 42, 41, 59, 94,
\&         45, 47,194,196,192,193,195,197,199,209,166, 44, 37, 95, 62, 63,
\&        248,201,202,203,200,205,206,207,204, 96, 58, 35, 64, 39, 61, 34,
\&        216, 97, 98, 99,100,101,102,103,104,105,171,187,240,253,254,177,
\&        176,106,107,108,109,110,111,112,113,114,170,186,230,184,198,164,
\&        181,126,115,116,117,118,119,120,121,122,161,191,208, 91,222,174,
\&        172,163,165,183,169,167,182,188,189,190,221,168,175, 93,180,215,
\&        123, 65, 66, 67, 68, 69, 70, 71, 72, 73,173,244,246,242,243,245,
\&        125, 74, 75, 76, 77, 78, 79, 80, 81, 82,185,251,252,249,250,255,
\&         92,247, 83, 84, 85, 86, 87, 88, 89, 90,178,212,214,210,211,213,
\&         48, 49, 50, 51, 52, 53, 54, 55, 56, 57,179,219,220,217,218,159
\&    );
\&    # Da followin regular expression do not address the
\&    # mappings for: (\*(Aq.\*(Aq => \*(Aq%2E\*(Aq, \*(Aq/\*(Aq => \*(Aq%2F\*(Aq, \*(Aq:\*(Aq => \*(Aq%3A\*(Aq)
\&    $url =~ s/([\et "#%&\e(\e),;<=>\e?\e@\e[\e\e\e]^\`{|}~])/sprintf("%%%02X",$e2a_1047[ord($1)])/ge;
.Ve
.PP
where a mo' complete solution would split tha \s-1URL\s0 tha fuck into components
and apply a gangbangin' full s/// substitution only ta tha appropriate parts.
.PP
In tha remainin examplez a \f(CW@e2a\fR or \f(CW@a2e\fR array may be employed
but tha assignment aint gonna be shown explicitly.  For code page 1047
you could use tha \f(CW@a2e_1047\fR or \f(CW@e2a_1047\fR arrays just shown.
.SS "uu encodin n' decoding"
.IX Subsection "uu encodin n' decoding"
Da \f(CW\*(C`u\*(C'\fR template ta \fIpack()\fR or \fIunpack()\fR will render \s-1EBCDIC\s0 data up in \s-1EBCDIC\s0
charactas equivalent ta they \s-1ASCII\s0 counterparts, n' you can put dat on yo' toast.  For example, the
followin will print \*(L"Yes yes y'all, indeed\en\*(R" on either a \s-1ASCII\s0 or \s-1EBCDIC\s0 computer:
.PP
.Vb 10
\&    $all_byte_chrs = \*(Aq\*(Aq;
\&    fo' (0..255) { $all_byte_chrs .= chr($_); }
\&    $uuencode_byte_chrs = pack(\*(Aqu\*(Aq, $all_byte_chrs);
\&    ($uu = <<\*(AqENDOFHEREDOC\*(Aq) =~ s/^\es*//gm;
\&    M\`\`$"\`P0%!@<("0H+#\`T.#Q\`1$A,4%187&!D:&QP=\*(AqA\e@(2(C)"4F)R@I*BLL
\&    M+2XO,#$R,S0U\-C<X.3H[/#T^/T!!0D\-$149\*(Aq2$E*2TQ\-3D]045)35%565UA9
\&    M6EM<75Y?8&%B8V1E9F=H:6IK;&UN;W!Q<G\-T=79W>\*(AqEZ>WQ]?G^\`@8*#A(6&
\&    MAXB)BHN,C8Z/D)&2DY25EI>8F9J;G)V>GZ"AHJ.DI::GJ*FJJZRMKJ^PL;*S
\&    MM+6VM[BYNKN\eO;Z_P,\*(Aq"P\e3%QL?(R<K+S,W.S]#1TM/4U=;7V\-G:V]S=WM_@
\&    ?X>+CY.7FY^CIZNOL[>[O\e/\*(AqR\e_3U]O?X^?K[_/W^_P\`\`
\&    ENDOFHEREDOC
\&    if ($uuencode_byte_chrs eq $uu) {
\&        print "Yes yes y'all, ";
\&    }
\&    $uudecode_byte_chrs = unpack(\*(Aqu\*(Aq, $uuencode_byte_chrs);
\&    if ($uudecode_byte_chrs eq $all_byte_chrs) {
\&        print "indeed\en";
\&    }
.Ve
.PP
Here be a straight-up spartan uudecoder dat will work on \s-1EBCDIC\s0 provided
that tha \f(CW@e2a\fR array is filled up in appropriately:
.PP
.Vb 10
\&    #!/usr/local/bin/perl
\&    @e2a = ( # dis must be filled in
\&           );
\&    $_ = <> until ($mode,$file) = /^begin\es*(\ed*)\es*(\eS*)/;
\&    open(OUT, "> $file") if $file ne "";
\&    while(<>) {
\&        last if /^end/;
\&        next if /[a\-z]/;
\&        next unless int(((($e2a[ord()] \- 32 ) & 077) + 2) / 3) ==
\&            int(length() / 4);
\&        print OUT unpack("u", $_);
\&    }
\&    close(OUT);
\&    chmod oct($mode), $file;
.Ve
.SS "Quoted-Printable encodin n' decoding"
.IX Subsection "Quoted-Printable encodin n' decoding"
On ASCII-encoded platforms it is possible ta strip charactas outside of
the printable set using:
.PP
.Vb 2
\&    # This QP encoder works on ASCII only
\&    $qp_strin =~ s/([=\ex00\-\ex1F\ex80\-\exFF])/sprintf("=%02X",ord($1))/ge;
.Ve
.PP
Whereas a \s-1QP\s0 encoder dat works on both \s-1ASCII\s0 n' \s-1EBCDIC\s0 platforms
would look somewhat like tha followin (where tha \s-1EBCDIC\s0 branch \f(CW@e2a\fR
array is omitted fo' brevity):
.PP
.Vb 10
\&    if (ord(\*(AqA\*(Aq) == 65) {    # ASCII
\&        $delete = "\ex7F";    # ASCII
\&        @e2a = (0 .. 255)    # ASCII ta ASCII identitizzle map
\&    }
\&    else {                   # EBCDIC
\&        $delete = "\ex07";    # EBCDIC
\&        @e2a =               # EBCDIC ta ASCII map (as shown above)
\&    }
\&    $qp_strin =~
\&      s/([^ !"\e#\e$%&\*(Aq()*+,\e\-.\e/0\-9:;<>?\e@A\-Z[\e\e\e]^_\`a\-z{|}~$delete])/sprintf("=%02X",$e2a[ord($1)])/ge;
.Ve
.PP
(although up in thang code tha substitutions might be done
in tha \s-1EBCDIC\s0 branch wit tha \f(CW@e2a\fR array n' separately up in the
\&\s-1ASCII\s0 branch without tha expense of tha identitizzle map).
.PP
Such \s-1QP\s0 strings can be decoded with:
.PP
.Vb 3
\&    # This QP decoder is limited ta ASCII only
\&    $strin =~ s/=([0\-9A\-Fa\-f][0\-9A\-Fa\-f])/chr hex $1/ge;
\&    $strin =~ s/=[\en\er]+$//;
.Ve
.PP
Whereas a \s-1QP\s0 decoder dat works on both \s-1ASCII\s0 n' \s-1EBCDIC\s0 platforms
would look somewhat like tha followin (where tha \f(CW@a2e\fR array is
omitted fo' brevity):
.PP
.Vb 2
\&    $strin =~ s/=([0\-9A\-Fa\-f][0\-9A\-Fa\-f])/chr $a2e[hex $1]/ge;
\&    $strin =~ s/=[\en\er]+$//;
.Ve
.SS "Caesarean ciphers"
.IX Subsection "Caesarean ciphers"
Da practice of shiftin a alphabet one or mo' charactas fo' encipherment
dates back thousandz of muthafuckin years n' was explicitly detailed by Gaius Julius
Caesar up in his \fBGallic Wars\fR text.  A single alphabet shift is sometimes
referred ta as a rotation n' tha shift amount is given as a number \f(CW$n\fR after
the strang 'rot' or \*(L"rot$n\*(R".  Rot0 n' rot26 would designate identitizzle maps
on tha 26\-letta Gangsta version of tha Latin alphabet.  Rot13 has the
interestin property dat alternate subsequent invocations is identitizzle maps
(thus rot13 is its own non-trivial inverse up in tha crew of 26 alphabet
rotations).  Hence tha followin be a rot13 encoder n' decoder dat will
work on \s-1ASCII\s0 n' \s-1EBCDIC\s0 platforms:
.PP
.Vb 1
\&    #!/usr/local/bin/perl
\&
\&    while(<>){
\&        tr/n\-za\-mN\-ZA\-M/a\-zA\-Z/;
\&        print;
\&    }
.Ve
.PP
In one-liner form:
.PP
.Vb 1
\&    perl \-ne \*(Aqtr/n\-za\-mN\-ZA\-M/a\-zA\-Z/;print\*(Aq
.Ve
.SH "Hashin order n' checksums"
.IX Header "Hashin order n' checksums"
To tha extent dat it is possible ta write code dat dependz on
hashin order there may be differences between hashes as stored
on a ASCII-based platform n' hashes stored on a EBCDIC-based platform.
\&\s-1XXX\s0
.SH "I18N AND L10N"
.IX Header "I18N AND L10N"
Internationalization (I18N) n' localization (L10N) is supported at least
in principle even on \s-1EBCDIC\s0 platforms.  Da details is system-dependent
and discussed under tha \*(L"\s-1OS ISSUES\*(R"\s0 up in perlebcdic section below.
.SH "MULTI-OCTET CHARACTER SETS"
.IX Header "MULTI-OCTET CHARACTER SETS"
Perl may work wit a internal UTF-EBCDIC encodin form fo' wide characters
on \s-1EBCDIC\s0 platforms up in a manner analogous ta tha way dat it works with
the \s-1UTF\-8\s0 internal encodin form on \s-1ASCII\s0 based platforms.
.PP
Legacy multi byte \s-1EBCDIC\s0 code pages \s-1XXX.\s0
.SH "OS ISSUES"
.IX Header "OS ISSUES"
There may be all dem system-dependent issues
of concern ta \s-1EBCDIC\s0 Perl programmers.
.SS "\s-1OS/400\s0"
.IX Subsection "OS/400"
.IP "\s-1PASE\s0" 8
.IX Item "PASE"
Da \s-1PASE\s0 environment be a runtime environment fo' \s-1OS/400\s0 dat can run
executablez built fo' PowerPC \s-1AIX\s0 up in \s-1OS/400\s0; peep perlos400.  \s-1PASE\s0
is ASCII-based, not EBCDIC-based as tha \s-1ILE.\s0
.IP "\s-1IFS\s0 access" 8
.IX Item "IFS access"
\&\s-1XXX.\s0
.SS "\s-1OS/390,\s0 z/OS"
.IX Subsection "OS/390, z/OS"
Perl runs under Unix Systems Skillz or \s-1USS.\s0
.IP "chcp" 8
.IX Item "chcp"
\&\fBchcp\fR is supported as a gangbangin' finger-lickin' dirty-ass shell utilitizzle fo' displayin n' changing
onez code page.  See also \fIchcp\fR\|(1).
.IP "dataset access" 8
.IX Item "dataset access"
For sequential data set access try:
.Sp
.Vb 1
\&    mah @ds_recordz = \`cat //DSNAME\`;
.Ve
.Sp
or:
.Sp
.Vb 1
\&    mah @ds_recordz = \`cat //\*(AqHLQ.DSNAME\*(Aq\`;
.Ve
.Sp
See also tha OS390::Stdio module on \s-1CPAN.\s0
.IP "\s-1OS/390,\s0 z/OS iconv" 8
.IX Item "OS/390, z/OS iconv"
\&\fBiconv\fR is supported as both a gangbangin' finger-lickin' dirty-ass shell utilitizzle n' a C \s-1RTL\s0 routine.
See also tha \fIiconv\fR\|(1) n' \fIiconv\fR\|(3) manual pages.
.IP "locales" 8
.IX Item "locales"
On \s-1OS/390\s0 or z/OS peep locale fo' shiznit on locales.  Da L10N files
are up in \fI/usr/nls/locale\fR.  \f(CW$Config\fR{d_setlocale} is 'define' on \s-1OS/390\s0
or z/OS.
.SS "POSIX-BC?"
.IX Subsection "POSIX-BC?"
\&\s-1XXX.\s0
.SH "BUGS"
.IX Header "BUGS"
This pod document gotz nuff literal Latin 1 charactas n' may encounter
translation difficulties. Put ya muthafuckin choppers up if ya feel dis!  In particular one ghettofab nroff implementation
was known ta strip accented charactas ta they unaccented counterparts
while attemptin ta view dis document all up in tha \fBpod2man\fR program
(for example, you may peep a plain \f(CW\*(C`y\*(C'\fR rather than one wit a gangbangin' finger-lickin' diaeresis
as up in y\*:).  Another nroff truncated tha resultant manpage at
the first occurrence of 8 bit characters.
.PP
Not all shells will allow multiple \f(CW\*(C`\-e\*(C'\fR strang arguments ta perl to
be concatenated together properly as recipes 0, 2, 4, 5, n' 6 might
seem ta imply.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perllocale, perlfunc, perlunicode, utf8.
.SH "REFERENCES"
.IX Header "REFERENCES"
<http://anubis.dkuug.dk/i18n/charmaps>
.PP
<http://www.unicode.org/>
.PP
<http://www.unicode.org/unicode/reports/tr16/>
.PP
<http://www.wps.com/projects/codes/>
\&\fB\s-1ASCII:\s0 Gangsta Standard Code fo' Hype Infiltration\fR Tomothy Jennings,
September 1999.
.PP
\&\fBDa Unicode Standard, Version 3.0\fR Da Unicode Consortium, Lisa Moore ed.,
\&\s-1ISBN 0\-201\-61633\-5,\s0 Addison Wesley Developers Press, February 2000.
.PP
\&\fB\s-1CDRA: IBM \-\s0 Characta Data Representation Architecture \-
Reference n' Registry\fR, \s-1IBM SC09\-2190\-00,\s0 December 1996.
.PP
\&\*(L"Demystifyin Characta Sets\*(R", Andrea Vine, Multilingual Computing
& Technology, \fB#26 Vol. 10 Issue 4\fR, August/September 1999;
\&\s-1ISSN 1523\-0309\s0; Multilingual Computin Inc. Right back up in yo muthafuckin ass. Sandpoint \s-1ID, USA.\s0
.PP
\&\fBCodes, Ciphers, n' Other Cryptic n' Clandestine Communication\fR
Fred B. Wrixon, \s-1ISBN 1\-57912\-040\-7,\s0 Black Dawg & Leventhal Publishers,
1998.
.PP
<http://www.bobbemer.com/P\-BIT.HTM>
\&\fB\s-1IBM \- EBCDIC\s0 n' tha P\-bit; Da freshest Computa Goof Ever\fR Robert Bemer.
.SH "HISTORY"
.IX Header "HISTORY"
15 April 2001: added \s-1UTF\-8\s0 n' UTF-EBCDIC ta main table, pvhp.
.SH "AUTHOR"
.IX Header "AUTHOR"
Peta Prymmer pvhp@best.com freestyled dis up in 1999 n' 2000
with \s-1CCSID 0819\s0 n' 0037 help from Chris Leach and
Andre\*' Pirard A.Pirard@ulg.ac.be as well as POSIX-BC
help from Thomas Dorner Thomas.Dorner@start.de.
Thanks also ta Vickie Cooper, Philip Newton, Lil' Willy Raffloer, and
Joe Smizzle.  Trademarks, registered trademarks, steez marks and
registered steez marks used up in dis document is tha property of
their respectizzle ballers.
