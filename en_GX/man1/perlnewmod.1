.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLNEWMOD 1"
.TH PERLNEWMOD 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlnewmod \- preparin a freshly smoked up module fo' distribution
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document gives you some suggestions bout how tha fuck ta go bout writing
Perl modules, preparin dem fo' distribution, n' makin dem available
via \s-1CPAN.\s0
.PP
One of tha thangs dat make Perl straight-up bangin is tha fact dat Perl
hackers tend ta wanna share tha solutions ta problems they've faced,
so you n' I don't gotta battle wit tha same problem again.
.PP
Da main way they do dis is by abstractin tha solution tha fuck into a Perl
module. If you don't give a fuck what tha fuck one of these is, tha rest of this
document aint goin ta be much use ta yo thugged-out ass. Yo ass be also missin up on
an wack lot of useful code; consider havin a peep perlmod,
perlmodlib n' perlmodinstall before comin back here.
.PP
When you've found dat there aint a module available fo' what tha fuck you is
tryin ta do, n' you've had ta write tha code yo ass, consider
packagin up tha solution tha fuck into a module n' uploadin it ta \s-1CPAN\s0 so that
others can benefit.
.SS "Warning"
.IX Subsection "Warning"
We goin ta primarily concentrate on Perl-only modulez here, rather
than \s-1XS\s0 modules. \s-1XS\s0 modulez serve a rather different purpose, and
you should consider different thangs before distributin dem \- the
popularitizzle of tha library yo ass is gluing, tha portabilitizzle ta other
operatin systems, n' so on. I aint talkin' bout chicken n' gravy biatch. But fuck dat shiznit yo, tha word on tha street is dat tha notes on preparin tha Perl
side of tha module n' packagin n' distributin it will apply equally
well ta a \s-1XS\s0 module as a pure-Perl one.
.SS "What should I make tha fuck into a module?"
.IX Subsection "What should I make tha fuck into a module?"
Yo ass should cook up a module outta any code dat you be thinkin is goin ta be
useful ta others fo' realz. Anythang thatz likely ta fill a hole up in tha communal
library n' which one of mah thugs can slot directly tha fuck into they program fo' realz. Any
part of yo' code which you can isolate n' extract n' plug into
suttin' else be a likely muthafucka.
.PP
Letz take a example. Right back up in yo muthafuckin ass. Suppose you readin up in data from a local
format tha fuck into a hash-of-hashes up in Perl, turnin dat tha fuck into a tree, strutting
the tree n' then pipin each node ta a Acme Transmogrifier Server.
.PP
Now, like all dem playas have tha Acme Transmogrifier, n' you've had to
write suttin' ta rap tha protocol from scratch \- you'd almost
certainly wanna make dat tha fuck into a module. Da level at which you pitch
it is up ta you: you might want protocol-level modulez analogous to
Net::SMTP which then rap ta higher level modulez analogous
to Mail::Send yo, but it ain't no stoppin cause I be still poppin'. Da chizzle is yours yo, but you do wanna get
a module up fo' dat server protocol.
.PP
No Muthafucka else on tha hood is goin ta rap yo' local data format, so we
can ignore dis shit. But what tha fuck bout tha thang up in tha middle, biatch? Buildin tree
structures from Perl variablez n' then traversin dem be a sick,
general problem, n' if no muthafuckaz already freestyled a module dat do
that, you might wanna modularise dat code like a muthafucka.
.PP
So hopefully you've now gots all dem scams bout whatz phat ta modularise.
Letz now peep how tha fuck itz done.
.SS "Step-by-step: Preparin tha ground"
.IX Subsection "Step-by-step: Preparin tha ground"
Before we even start scrapin up tha code, there be all dem thangs we'll
wanna do up in advance.
.IP "Look around" 3
.IX Item "Look around"
Dig tha fuck into a funky-ass bunch of modulez ta peep how tha fuck they written. I aint talkin' bout chicken n' gravy biatch. I'd suggest
startin wit Text::Tabs, since itz up in tha standard
library n' is sick n' simple, n' then lookin at suttin' a lil
more complex like File::Copy.  For object oriented
code, \f(CW\*(C`WWW::Mechanize\*(C'\fR or tha \f(CW\*(C`Email::*\*(C'\fR modulez provide some good
examples.
.Sp
These should hit you wit a overall feel fo' how tha fuck modulez is laid up and
written.
.IP "Peep itz new" 3
.IX Item "Peep itz new"
There is a shitload of modulez on \s-1CPAN,\s0 n' itz easy as fuck  ta miss one that's
similar ta what tha fuck you plannin on contributin yo. Have a phat plough
all up in tha <http://search.cpan.org> n' make shizzle you not tha one
reinventin tha wheel!
.IP "Discuss tha need" 3
.IX Item "Discuss tha need"
Yo ass might ludd dat shit. Yo ass might feel dat any suckas needz dat shit. But there
might not straight-up be any real demand fo' it up there, so peek-a-boo, clear tha way, I be comin' thru fo'sho. If you unsure
about tha demand yo' module will have, consider bustin  up feelers
on tha \f(CW\*(C`comp.lang.perl.modules\*(C'\fR newsgroup, or as a last resort, ask the
modulez list at \f(CW\*(C`modules@perl.org\*(C'\fR. Remember dat dis be a cold-ass lil closed list
with a straight-up long turn-around time \- be prepared ta wait a phat while for
a response from em.
.IP "Choose a name" 3
.IX Item "Choose a name"
Perl modulez included on \s-1CPAN\s0 gotz a namin hierarchy you should try to
fit up in with. Right back up in yo muthafuckin ass. See perlmodlib fo' mo' details on how tha fuck dis works, and
browse round \s-1CPAN\s0 n' tha modulez list ta git a gangbangin' feel of it fo' realz. At tha hella
least, remember this: modulez should be title capitalised, (This::Thing)
fit up in wit a cold-ass lil category, n' explain they purpose succinctly.
.IP "Peep again" 3
.IX Item "Peep again"
While you bustin that, make straight-up shizzle you aint missed a module
similar ta tha one you bout ta write.
.Sp
When you've gots yo' name sorted up n' you shizzle dat yo' module is
wanted n' not currently available, itz time ta start coding.
.SS "Step-by-step: Makin tha module"
.IX Subsection "Step-by-step: Makin tha module"
.IP "Start wit \fImodule-starter\fR or \fIh2xs\fR" 3
.IX Item "Start wit module-starta or h2xs"
Da \fImodule-starter\fR utilitizzle is distributed as part of the
Module::Starta \s-1CPAN\s0 package.  It creates a gangbangin' finger-lickin' directory
with stubz of all tha necessary filez ta start a freshly smoked up module, according
to recent \*(L"best practice\*(R" fo' module pimpment, n' is invoked from
the command line, thus:
.Sp
.Vb 2
\&    module\-starta \-\-module=Foo::Bar \e
\&       \-\-author="Yo crazy-ass Name" \-\-email=yourname@cpan.org
.Ve
.Sp
If you do not wish ta install tha Module::Starter
package from \s-1CPAN, \s0\fIh2xs\fR be a olda tool, originally intended fo' the
development of \s-1XS\s0 modules, which comes packaged wit tha Perl
distribution.
.Sp
A typical invocation of h2xs fo' a pure Perl module is:
.Sp
.Vb 1
\&    h2xs \-AX \-\-skip\-exporta \-\-use\-new\-tests \-n Foo::Bar
.Ve
.Sp
Da \f(CW\*(C`\-A\*(C'\fR omits tha Autoloader code, \f(CW\*(C`\-X\*(C'\fR omits \s-1XS\s0 elements,
\&\f(CW\*(C`\-\-skip\-exporter\*(C'\fR omits tha Exporta code, \f(CW\*(C`\-\-use\-new\-tests\*(C'\fR sets up a
modern testin environment, n' \f(CW\*(C`\-n\*(C'\fR specifies tha name of tha module.
.IP "Use strict n' warnings" 3
.IX Item "Use strict n' warnings"
A modulez code has ta be warnin n' strict-clean, since you can't
guarantee tha conditions dat it'll be used under n' shit. Besides, you wouldn't
wanna distribute code dat wasn't warnin or strict-clean anyway,
right?
.IP "Use Carp" 3
.IX Item "Use Carp"
Da Carp module allows you ta present yo' error lyrics from
the callerz perspective; dis gives you a way ta signal a problem with
the calla n' not yo' module. For instance, if you say this:
.Sp
.Vb 1
\&    warn "No hostname given";
.Ve
.Sp
the user will peep suttin' like this:
.Sp
.Vb 2
\&    No hostname given at /usr/local/lib/perl5/site_perl/5.6.0/Net/Acme.pm
\&    line 123.
.Ve
.Sp
which be lookin like yo' module is bustin suttin' wrong. Instead, you want
to put tha blame on tha user, n' say this:
.Sp
.Vb 1
\&    No hostname given at bad_code, line 10.
.Ve
.Sp
Yo ass do dis by rockin Carp n' replacin yo' \f(CW\*(C`warn\*(C'\fRs with
\&\f(CW\*(C`carp\*(C'\fRs. If you need ta \f(CW\*(C`die\*(C'\fR, say \f(CW\*(C`croak\*(C'\fR instead. Y'all KNOW dat shit, muthafucka! But fuck dat shiznit yo, tha word on tha street is dat keep
\&\f(CW\*(C`warn\*(C'\fR n' \f(CW\*(C`die\*(C'\fR up in place fo' yo' sanitizzle checks \- where it straight-up is
your module at fault.
.IP "Use Exporta \- wisely!" 3
.IX Item "Use Exporta - wisely!"
Exporta gives you a standard way of exportin symbols and
subroutines from yo' module tha fuck into tha callerz namespace. For instance,
sayin \f(CW\*(C`use Net::Acme qw(&frob)\*(C'\fR would import tha \f(CW\*(C`frob\*(C'\fR subroutine.
.Sp
Da package variable \f(CW@EXPORT\fR will determine which symbols will get
exported when tha calla simply say \f(CW\*(C`use Net::Acme\*(C'\fR \- yo big-ass booty is ghon hardly
ever wanna put anythang up in there, so peek-a-boo, clear tha way, I be comin' thru fo'sho. \f(CW@EXPORT_OK\fR, on tha other hand,
specifies which symbols you willin ta export. If you do want to
export a funky-ass bunch of symbols, use tha \f(CW%EXPORT_TAGS\fR n' define a standard
export set \- peep Exporta fo' mo' details.
.IP "Use plain oldschool documentation" 3
.IX Item "Use plain oldschool documentation"
Da work aint over until tha paperwork is done, n' you goin to
need ta put up in some time freestylin some documentation fo' yo' module.
\&\f(CW\*(C`module\-starter\*(C'\fR or \f(CW\*(C`h2xs\*(C'\fR will provide a stub fo' you ta fill in; if
yo ass is not shizzle bout tha format, peep perlpod fo' an
introduction. I aint talkin' bout chicken n' gravy biatch. Provide a phat synopsiz of how tha fuck yo' module is used in
code, a thugged-out description, n' then notes on tha syntax n' function of the
individual subroutines or methods. Use Perl comments fo' pimper notes
and \s-1POD\s0 fo' end-user notes.
.IP "Write tests" 3
.IX Item "Write tests"
Yo ass is encouraged ta create self-tests fo' yo' module ta ensure it's
workin as intended on tha myriad platforms Perl supports; if you upload
your module ta \s-1CPAN,\s0 a host of testas will build yo' module n' send
you tha thangs up in dis biatch of tha tests fo' realz. Again, \f(CW\*(C`module\-starter\*(C'\fR n' \f(CW\*(C`h2xs\*(C'\fR
provide a test framework which you can extend \- you should do something
more than just checkin yo' module will compile.
Test::Simple n' Test::Mo' is good
places ta start when freestylin a test suite.
.IP "Write tha \s-1README\s0" 3
.IX Item "Write tha README"
If you uploadin ta \s-1CPAN,\s0 tha automated gremlins will extract the
\&\s-1README\s0 file n' place dat up in yo' \s-1CPAN\s0 directory. It'll also step tha fuck up in
the main \fIby-module\fR n' \fIby-category\fR directories if you make it onto
the modulez list. It aint nuthin but a phat scam ta put here what tha fuck tha module actually
does up in detail, n' tha user-visible chizzlez since tha last release.
.SS "Step-by-step: Distributin yo' module"
.IX Subsection "Step-by-step: Distributin yo' module"
.IP "Git a \s-1CPAN\s0 user \s-1ID\s0" 3
.IX Item "Git a CPAN user ID"
Every pimper publishin modulez on \s-1CPAN\s0 needz a \s-1CPAN ID. \s0 Visit
\&\f(CW\*(C`http://pause.perl.org/\*(C'\fR, select \*(L"Request \s-1PAUSE\s0 Account\*(R", n' wait for
your request ta be approved by tha \s-1PAUSE\s0 administrators.
.ie n .IP """perl Makefile.PL; make test; make dist""" 3
.el .IP "\f(CWperl Makefile.PL; make test; make dist\fR" 3
.IX Item "perl Makefile.PL; make test; make dist"
Once again, \f(CW\*(C`module\-starter\*(C'\fR or \f(CW\*(C`h2xs\*(C'\fR has done all tha work fo' yo thugged-out ass.
They produce tha standard \f(CW\*(C`Makefile.PL\*(C'\fR you peep when you downlizzle and
install modules, n' dis produces a Makefile wit a \f(CW\*(C`dist\*(C'\fR target.
.Sp
Once you've ensured dat yo' module passes its own tests \- always a
phat thang ta make shizzle \- you can \f(CW\*(C`make dist\*(C'\fR, n' tha Makefile will
hopefully produce you a sick tarbizzle of yo' module, locked n loaded fo' upload.
.IP "Upload tha tarball" 3
.IX Item "Upload tha tarball"
Da email you gots when you received yo' \s-1CPAN ID\s0 will rap  how tha fuck to
log up in ta \s-1PAUSE,\s0 tha Perl Authors Upload SErver n' shit. From tha menus there,
you can upload yo' module ta \s-1CPAN.\s0
.IP "Announce ta tha modulez list" 3
.IX Item "Announce ta tha modulez list"
Once uploaded, it'll sit unnoticed up in yo' lyricist directory. If you want
it connected ta tha rest of tha \s-1CPAN,\s0 you gonna need ta git all up in \*(L"Register
Namespace\*(R" on \s-1PAUSE. \s0 Once registered, yo' module will step tha fuck up in the
by-module n' by-category listings on \s-1CPAN.\s0
.IP "Announce ta clpa" 3
.IX Item "Announce ta clpa"
If you gotz a funky-ass burnin desire ta tell tha ghetto bout yo' release, post
an announcement ta tha moderated \f(CW\*(C`comp.lang.perl.announce\*(C'\fR newsgroup.
.IP "Fix bugs!" 3
.IX Item "Fix bugs!"
Once you start accumulatin users, they'll bust you bug reports, n' you can put dat on yo' toast. If
yo ass is dirty, they'll even bust you patches. Yo, wuz crackalackin', biatch? Yo ass is smokin tha joys of
maintainin a software project...
.SH "AUTHOR"
.IX Header "AUTHOR"
Semen Cozens, \f(CW\*(C`simon@cpan.org\*(C'\fR
.PP
Updated by Kirrily \*(L"Skud\*(R" Robert, \f(CW\*(C`skud@cpan.org\*(C'\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlmod, perlmodlib, perlmodinstall, h2xs, strict,
Carp, Exporter, perlpod, Test::Simple, Test::Mo'
ExtUtils::MakeMaker, Module::Build, Module::Starter
http://www.cpan.org/ , Ken Williamss tutorial on buildin yo' own
module at http://mathforum.org/~ken/perl_modules.html
