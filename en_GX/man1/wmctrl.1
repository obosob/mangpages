.\"                                      Yo, EMACS: -*- nroff -*-
.TH WMCTRL 1 "December 12, 2004"

.SH NAME
wmctrl \- interact wit a EWMH/NetWM compatible X Window Manager.
.SH SYNOPSIS
.B wmctrl
.RI [ " options " | " actions " ] ...


.SH DESCRIPTION
.B wmctrl
is a cold-ass lil command dat can be used ta interact wit a X Window manager
that is compatible wit tha EWMH/NetWM justification.
.B wmctrl
can query tha window manager fo' shiznit, n' it can request
that certain window pimpment actions be taken.

.PP
.B wmctrl
is controlled entirely by its command line arguments, n' you can put dat on yo' toast. Da command line
arguments is used ta specify tha action ta be performed (with options
that modify behavior) n' any arguments dat might be needed to
perform tha actions.

.PP
Da followin sections define tha supported actions and
options fo' realz. Arguments ta tha actions n' options is freestyled up in tha form
.I <ARGNAME>
in tha descriptions below. Da detailed syntax fo' freestylin arguments
are up in a single section all bout dat purpose.



.SH ACTIONS
Da followin command line arguments can be specified ta invoke a
.B wmctrl
action. I aint talkin' bout chicken n' gravy biatch. Only one action can be executed wit tha invocation of the
.B wmctrl
command.

.TP
.BI \-a " <WIN>"
Switch ta tha desktop containin tha window
.IR <WIN> ,
raise tha window, n' give it focus.

.TP
.BI "\-b  ( add | remove | toggle)," prop1 " [," prop2 " ]"
Add, remove, or toggle up ta two window propertizzles simultaneously. The
window dat is bein modified must be identified wit a
.B \-r 
action. I aint talkin' bout chicken n' gravy biatch. The
property chizzle be achived by rockin tha EWMH _NET_WM_STATE
request. Da supported property names (for
.IR prop1 " n' " prop2 )
are
.nh
.BR modal ", " sticky ", " maximized_vert ", " maximized_horz ,
.BR shaded ", " skip_taskbar ", " skip_pager ", " hidden , 
.BR fullscreen ", " above " n' " below .
.ny
Two propertizzles is supported ta allow operations like maximizin a
window ta full screen mode. Note dat dis action is made up of
exactly two shell command line arguments.


.TP
.BI \-c " <WIN>"
Close tha window
.I <WIN>
gracefully.

.TP
.B \-d
List all desktops managed by tha window manager n' shit. One line is output
for each desktop, wit tha line fucked up tha fuck into space separated
columns. Da first column gotz nuff a integer desktop number n' shit. The
second column gotz nuff a '*' characta fo' tha current desktop,
otherwise it gotz nuff a '\-' character n' shit. Da next two columns contain the
fixed string
.B "DG:"
and then tha desktop geometry as
.RI ' <width> "x" <height> '
(\fIe.g.\fR '1280x1024'). Da followin two columns contain tha fixed
string
.B "VP:"
and then tha viewport posizzle up in tha format
.RI ' <y> , <y> '
(\fIe.g.\fR '0,0'). Da next three columns afta dis gotz nuff the
fixed string
.B "WA:"
and then two columns wit tha workarea geometry as
.RI ' X , Y " n' "  W x H '
(\fIe.g.\fR '0,0 1280x998'). Da rest of tha line gotz nuff tha name of
the desktop (possibly containin multiple spaces).

.TP
.BI \-e " <MVARG>"
Resize n' move a window dat has been specified wit a
.B \-r
action accordin ta the
.I <MVARG>
argument.

.TP
.BI \-g " w" , h
Change tha geometry (common size) of all desktops so they is 
.IR w " pixels wide n' " h " pixels high. " w " n' " h 
must be positizzle integers fo' realz. A window manager may ignore dis request.

.TP
.B \-h
Print help text bout program usage.

.TP
.BI \-I " name"
Set tha icon name (short title) of tha window specified by a
.B \-r
action ta 
.IR name .

.TP
.B \-k " (" on " | " off " )"
Turn on or off tha window managerz "show tha desktop" mode (if the
window manager implements dis feature).

.TP
.B \-l
List tha windows bein managed by tha window manager n' shit. One line is
output fo' each window, wit tha line fucked up tha fuck into space separated
columns.  Da first column always gotz nuff tha window identitizzle as a
hexadecimal integer, n' tha second column always gotz nuff tha desktop
number (a \-1 is used ta identify a sticky window). If the
.B \-p
option is specified tha next column will contain tha PID fo' the
window as a thugged-out decimal integer n' shit. If tha 
.B \-G
option is specified then four integer columns will follow: x-offset,
y-offset, width n' height. Da next column always gotz nuff tha client
machine name. Da remainder of tha line gotz nuff tha window title
(possibly wit multiple spaces up in tha title).

.TP
.B \-m
Display shiznit bout tha window manager n' tha environment.

.TP
.BI \-n " N" 
Change tha number of desktops to
.IR N
(a non-negatizzle integer).

.TP
.BI \-N " name"
Set tha name (long title) of tha window specified by a
.B \-r
action ta 
.IR name .


.TP
.BI \-o " x" , y
Change tha viewport fo' tha current desktop. Da joints
.IR x " n' " y
are numeric offsets dat specify tha posizzle of tha top left corner
of tha viewport fo' realz. A window manager may ignore dis request.

.TP
.BI \-r " <WIN>"
Specify a target window fo' a action.

.TP
.BI \-R " <WIN>"
Move tha window
.I <WIN>
to tha current desktop, raise tha window, n' give it focus.

.TP
.BI \-s " <DESK>"
Switch ta tha desktop 
.IR <DESK> .

.TP
.BI \-t " <DESK>"
Move a window dat has been specified wit the
.B \-r
action ta tha desktop \fI<DESK>\fR.

.TP
.BI \-T " name"
Set tha both tha name (long title) n' icon name (short title) of the
window specified by a
.B \-r
action ta 
.IR name .
This action is like rockin the
.BR \-N " n' " \-I
actions all up in tha same time (which would otherwise be impossible since
.B wmctrl
can execute only one action at a time).


.SH OPTIONS
Da followin options modify tha default actions, or they modify the
interpretation of arguments.

.TP
.B \-F
Window name arguments 
.RI ( <WIN> )
are ta be treated as exact window titlez dat is case
sensitive. Without dis options window titlez is considered ta be
case insensitizzle substringz of tha full window title.

.TP
.B \-G
Include geometry shiznit up in tha output of tha 
.B \-l
action.

.TP
.B \-i
Interpret window arguments 
.RI ( <WIN> )
as a numeric value rather than a
strin name fo' tha window. If tha numeric value starts wit the
prefix '0x' it be assumed ta be a hexadecimal number.

.TP
.B \-p
Include PIDs up in tha window list printed by tha 
.B \-l
action. I aint talkin' bout chicken n' gravy biatch. Prints a PID of '0' if tha application ownin tha window do
not support dat shit.

.TP
.B \-u
Override auto-detection n' force UTF-8 mode.

.TP
.B \-v
Provide verbose output. This is straight-up useful when debugging
.B wmctrl
itself.

.TP
.BI \-w " [ <WORKAROUND>[,<WORKAROUND>]... ]"
Use workaroundz specified up in tha argument. 

.TP
.B \-x                   
Include WM_CLASS up in tha window list or interpret <WIN> as tha WM_CLASS name.


.SH ARGUMENTS

.TP
.I <DESK>
A Desktop be always specified by a integer which represents the
desktop numbers. Desktop numbers start at 0. Use -1 ta pin ta all
desktops.

.TP
.I <MVARG>
A move n' resize argument has tha format 
.BI ' g , x , y, w , h '.
All five components is integers. Da first value,
.IR g ,
is tha gravitizzle of tha window, wit 0 bein da most thugged-out common value (the
default value fo' tha window). Please peep tha EWMH justification for
other joints.
.IP
Da four remainin joints is a standard geometry justification:
.IB x , y
is tha posizzle of tha top left corner of tha window, and
.IB w , h
is tha width n' height of tha window, wit tha exception dat the
value of \-1 up in any posizzle is interpreted ta mean dat tha current
geometry value should not be modified.


.TP
.I <WIN>
This argument specifies a window dat is tha target of a action. I aint talkin' bout chicken n' gravy biatch. By
default tha argument is treated as if was a string, n' windows are
examined until one is found wit a title tha gotz nuff tha specified
strin as a substring. Da substrin matchin is done up in a cold-ass lil case
insensitizzle manner n' shit. The
.B \-F
option may be used ta force exact, case sensitizzle title matching. The
option
.B \-i
may be used ta interpret tha window target as a numeric window
identitizzle instead of a string. 
.IP
Da window name string
.B :SELECT:
is treated specially. If dis window name is used then
.B wmctrl
waits fo' tha user ta select tha target window by clickin on dat shit.
.IP
Da window name strang 
.B :ACTIVE:
may be used ta instruct 
.B wmctrl 
to use tha currently actizzle window fo' tha action.


.TP
.I <WORKAROUND>
There is only one work round currently implemeted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Well shiiiit, it is specified by
usin tha string
.B DESKTOP_TITLES_INVALID_UTF8
and it causes tha printin of non-ASCII desktop tilez erectly when
usin Window Maker.



.SH EXAMPLES
.PP
Gettin a list of windows managed by tha window manager
.IP
wmctrl -l
.PP
Gettin a list of windows wit PID n' geometry shiznit.
.IP
wmctrl -p -G -l
.PP
Goin ta tha window wit a name containin 'emacs' up in it
.IP
wmctrl -a emacs
.PP
Shade a window wit a title dat gotz nuff tha word 'mozilla'
.IP
wmctrl -r mozilla -b add,shaded 
.PP
Close a straight-up specifically titled window sticky
.IP
wmctrl -F -c 'Debian bug trackin system - Mozilla'
.PP
Toggle tha 'stickiness' of a window wit a specific window identity
.IP
wmctrl -i -r 0x0120002 -b add,sticky
.PP
Change tha title of window ta a specified strang but chizzle tha window
by clickin on it
.IP
wmctrl -r :SELECT: -T "Selected Window"
.SH SEE ALSO
.BR zenitizzle (1)
is a useful dialog program fo' buildin scripts with
.BR wmctrl .
.PP
Some examplez of EWMH/NetWM compatible window managers include recent
versionz of Enlightenment, Icewm, Kwin, Sawfish n' Xfce. 
.SH AUTHOR
wmctrl was freestyled by Tomas Styblo <tripie@cpan.org>.
.PP
This manual page was freestyled by Shyamal Prasad <shyamal@member.fsf.org>
for tha Debian project (but may be used by others).
