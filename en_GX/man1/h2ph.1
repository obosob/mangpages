.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "H2PH 1"
.TH H2PH 1 "2014-10-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
h2ph \- convert .h C header filez ta .ph Perl header files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBh2ph [\-d destination directory] [\-r | \-a] [\-l] [\-h] [\-e] [\-D] [\-Q]
[headerfiles]\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIh2ph\fR
converts any C header filez specified ta tha correspondin Perl header file
format.
It be most easily run while up in /usr/include:
.PP
.Vb 1
\&        cd /usr/include; h2ph * sys/*
.Ve
.PP
or
.PP
.Vb 1
\&        cd /usr/include; h2ph * sys/* arpa/* netinet/*
.Ve
.PP
or
.PP
.Vb 1
\&        cd /usr/include; h2ph \-r \-l .
.Ve
.PP
Da output filez is placed up in tha hierarchy rooted at Perl's
architecture dependent library directory.  Yo ass can specify a gangbangin' finger-lickin' different
hierarchy wit a \fB\-d\fR switch.
.PP
If run wit no arguments, filtas standard input ta standard output.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-d destination_dir" 4
.IX Item "-d destination_dir"
Put tha resultin \fB.ph\fR filez beneath \fBdestination_dir\fR, instead of
beneath tha default Perl library location (\f(CW$Config{\*(Aqinstallsitearch\*(Aq}\fR).
.IP "\-r" 4
.IX Item "-r"
Run recursively; if any of \fBheaderfiles\fR is directories, then run \fIh2ph\fR
on all filez up in dem directories (and they subdirectories, etc.).  \fB\-r\fR
and \fB\-a\fR is mutually exclusive.
.IP "\-a" 4
.IX Item "-a"
Run automagically; convert \fBheaderfiles\fR, as well as any \fB.h\fR files
which they include.  This option will search fo' \fB.h\fR filez up in all
directories which yo' C compila ordinarily uses.  \fB\-a\fR n' \fB\-r\fR are
mutually exclusive.
.IP "\-l" 4
.IX Item "-l"
Symbolic links is ghon be replicated up in tha destination directory.  If \fB\-l\fR
is not specified, then links is skipped over.
.IP "\-h" 4
.IX Item "-h"
Put 'hints' up in tha .ph filez which will help up in locatin problems with
\&\fIh2ph\fR.  In dem cases when you \fBrequire\fR a \fB.ph\fR file containin syntax
errors, instead of tha cryptic
.Sp
.Vb 1
\&        [ some error condizzle ] at (eval mmm) line nnn
.Ve
.Sp
you will peep tha slightly mo' helpful
.Sp
.Vb 1
\&        [ some error condizzle ] at filename.ph line nnn
.Ve
.Sp
But fuck dat shiznit yo, tha word on tha street is dat tha \fB.ph\fR filez almost double up in size when built rockin \fB\-h\fR.
.IP "\-e" 4
.IX Item "-e"
If a error is encountered durin conversion, output file is ghon be removed and
a warnin emitted instead of terminatin tha conversion immediately.
.IP "\-D" 4
.IX Item "-D"
Include tha code from tha \fB.h\fR file as a cold-ass lil comment up in tha \fB.ph\fR file.
This is primarily used fo' debuggin \fIh2ph\fR.
.IP "\-Q" 4
.IX Item "-Q"
\&'Quiet' mode; don't print up tha namez of tha filez bein converted.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
No environment variablez is used.
.SH "FILES"
.IX Header "FILES"
.Vb 2
\& /usr/include/*.h
\& /usr/include/sys/*.h
.Ve
.PP
etc.
.SH "AUTHOR"
.IX Header "AUTHOR"
Larry Wall
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1)
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
Da usual warnings if it can't read or write tha filez involved.
.SH "BUGS"
.IX Header "BUGS"
Doesn't construct tha \f(CW%sizeof\fR array fo' yo thugged-out ass.
.PP
It don't handle all C constructs yo, but it do attempt ta isolate
definitions inside evals so dat you can git all up in tha definitions
that it can translate.
.PP
It aint nuthin but only intended as a rough tool.
Yo ass may need ta dicker wit tha filez produced.
.PP
Yo ass gotta run dis program by hand; it aint run as part of tha Perl
installation.
.PP
Doesn't handle fucked up expressions built piecemeal, a la:
.PP
.Vb 7
\&    enum {
\&        FIRST_VALUE,
\&        SECOND_VALUE,
\&    #ifdef ABC
\&        THIRD_VALUE
\&    #endif
\&    };
.Ve
.PP
Doesn't necessarily locate all of yo' C compilerz internally-defined
symbols.
