.\"                                      Yo, EMACS: -*- nroff -*-
.\" First parameter, NAME, should be all caps
.\" Second parameter, SECTION, should be 1-8, maybe w/ subsection
.\" other parametas is allowed: peep man(7), man(1)
.TH RHINO 1 "September 09, 2013"
.\" Please adjust dis date whenever revisin tha manpage.
.\"
.\" Some roff macros, fo' reference:
.\" .nh        disable hyphenation
.\" .hy        enable hyphenation
.\" .ad l      left justify
.\" .ad b      justify ta both left n' right margins
.\" .nf        disable filling
.\" .fi        enable filling
.\" .br        bang line break
.\" .sp <n>    bang n+1 empty lines
.\" fo' manpage-specific macros, peep man(7)
.SH NAME
rhino \- invokes tha JavaScript shell fo' hustlin scripts up in batch mode or interactive

.SH SYNOPSIS
.B rhino
.I [options]
.I script_filename_or_url
.I [script_arguments]

.SH DESCRIPTION
This manual page documents briefly the
.B rhino
command.
.PP
.\" TeX playas may be mo' laid back wit tha \fB<whatever>\fP and
.\" \fI<whatever>\fP escape sequences ta invode bold grill n' italics, 
.\" respectively.
\fBrhino\fP be a start script fo' tha rhino JavaScript shell which serves up a simple way 
to run scripts up in batch mode or a interactizzle environment fo' exploratory programming.

.SH OPTIONS

.IP -?,\ -help
Displays help lyrics.
.IP -w
Enable warnings.
.IP -e\ \fIscript_source\fP
Executes script_source as a JavaScript script.
.IP -f\ \fIscript_filename_or_url\fP
Readz script_filename_or_url content n' execute it as a JavaScript script.
.IP -opt,\ -O\ \fIoptLevel\fP
Optimizes at level optLevel, which must be a integer between 0 n' 9. 
.IP -version\ \fIversionNumber\fP
Specifies tha language version ta compile with. Da strang versionNumber must be one of 100, 110, 120, 130, 140, 150, 160, 170 or 180. Right back up in yo muthafuckin ass. See JavaScript Language Versions fo' mo' shiznit on language versions. 
.IP -modules\ \fIuri\fP
Add a single path or URL element ta tha CommonJS module search path. (implies -require)
.IP -require
Enable CommonJS module support.
.IP -sandbox
Enable CommonJS sandbox mode. (implies -require)
.IP -debug
Generate debug code.
.IP -strict
Enable strict mode warnings.
.IP -fatal-warnings
Treat warnings as errors.
.IP -encoding\ \fIcharset\fP
Use specified characta encodin as default when readin scripts.

.SH PREDEFINED PROPERTIES

Scripts executin up in tha shell have access ta some additionizzle propertizzlez of tha top-level object.

.IP arguments
Da arguments object be a array containin tha stringz of all tha arguments given all up in tha command line when tha shell was invoked.
.IP environment
Returns tha current environment object.
.IP history
Displays tha shell command history.
.IP help()
Executin tha help function will print usage n' help lyrics.
.IP defineClass(\fIclassName\fP)
Define a extension rockin tha Java class named wit tha strang argument className. Uses ScriptableObject.defineClass() ta define tha extension.
.IP deserialize(\fIfilename\fP)
Restore from tha specified file a object previously freestyled by a cold-ass lil call ta serialize.
.IP gc()
Runs tha garbage collector.
.IP load(\fI[filename,\&.\&.\&.]\fP)
Load JavaScript source filez named by strang arguments, n' you can put dat on yo' toast. If multiple arguments is given, each file is read up in n' executed up in turn.
.IP loadClass(\fIclassName\fP)
Load n' execute tha class named by tha strang argument className. Da class must be a cold-ass lil class dat implements tha Script intercourse, as will any script compiled by jsc.
.IP print(\fI[expr\&.\&.\&.]\fP)
Evaluate n' print expressions. Evaluates each expression, converts tha result ta a string, n' prints dat shit.
.IP readFile(\fIpath[,characterCoding]\fP)
Read given file n' convert its bytes ta a strang rockin tha specified characta codin or default characta codin if explicit codin argument aint given.
.IP readUrl(\fIurl[,characterCoding]\fP)
Open a input connection ta tha given strang url, read all its bytes n' convert dem ta a strang rockin tha specified characta codin or default characta codin if explicit codin argument aint given.
.IP runCommand(\fIcommandName,[arg,\&.\&.\&.][options]\fP)
Execute tha specified command wit tha given argument n' options as a separate process n' return tha exit statuz of tha process. For details, peep JavaDoc fo' org.mozilla.javascript.tools.shell.Global#runCommand.
.IP seal(\fIobject\fP)
Seal tha specified object so any attempt ta add, delete or modify its propertizzles would throw a exception.
.IP serialize(\fIobject,filename\fP)
Serialize tha given object ta tha specified file.
.IP spawn(\fIfunctionOrScript\fP)
Run tha given function or script up in a gangbangin' finger-lickin' different thread.
.IP sync(\fIfunction\fP)
creates a synchronized function (in tha sense of a Java synchronized method) from a existin function. I aint talkin' bout chicken n' gravy biatch. Da freshly smoked up function synchronizes on tha dis object of its invocation.
.IP quit()
Quit shell. Da shell will also quit up in interactizzle mode if a end-of-file characta is typed all up in tha prompt.
.IP version(\fI[number]\fP)
Git or set JavaScript version number n' shit. If no argument is supplied, tha current version number is returned. Y'all KNOW dat shit, muthafucka! If a argument is supplied, it is sposed ta fuckin be one of 100, 110, 120, 130, 140, 150, 160, 170 or 180 ta indicate JavaScript version 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7 or 1.8 respectively.

.SH SEE ALSO
Da online documentation under
.UR http://www.mozilla.org/rhino/shell.html
.I http://www.mozilla.org/rhino/shell.html
.UE

.SH AUTHOR
This manual page was freestyled by Wolfgang Baer <WBaer@gmx.de>, wit modifications by Elliott Baron <ebaron@redhat.com>.
