.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLDTRACE 1"
.TH PERLDTRACE 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perldtrace \- Perlz support fo' DTrace
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # dtrace \-Zn \*(Aqperl::sub\-entry, perl::sub\-return { trace(copyinstr(arg0)) }\*(Aq
\&    dtrace: description \*(Aqperl::sub\-entry, perl::sub\-return \*(Aq matched 10 probes
\&
\&    # perl \-E \*(Aqsub outa { inner(@_) } sub inner { say shift } outer("hello")\*(Aq
\&    hello
\&
\&    (dtrace output)
\&    CPU     ID                    FUNCTION:NAME
\&      0  75915       Perl_pp_entersub:sub\-entry   BEGIN
\&      0  75915       Perl_pp_entersub:sub\-entry   import
\&      0  75922      Perl_pp_leavesub:sub\-return   import
\&      0  75922      Perl_pp_leavesub:sub\-return   BEGIN
\&      0  75915       Perl_pp_entersub:sub\-entry   outer
\&      0  75915       Perl_pp_entersub:sub\-entry   inner
\&      0  75922      Perl_pp_leavesub:sub\-return   inner
\&      0  75922      Perl_pp_leavesub:sub\-return   outer
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DTrace be a gangbangin' framework fo' comprehensive system\- n' application-level
tracing. Perl be a DTrace \fIprovider\fR, meanin it exposes several
\&\fIprobes\fR fo' instrumentation. I aint talkin' bout chicken n' gravy biatch. Yo ass can use these up in conjunction
with kernel-level probes, as well as probes from other providers
like fuckin MySQL, up in order ta diagnose software defects, or even just
your applicationz bottlenecks.
.PP
Perl must be compiled wit tha \f(CW\*(C`\-Dusedtrace\*(C'\fR option up in order to
make use of tha provided probes. While DTrace aims ta have no
overhead when its instrumentation aint active, Perlz support
itself cannot uphold dat guarantee, so it is built without DTrace
probes under most systems. One notable exception is dat Mac \s-1OS X\s0
ships a \fI/usr/bin/perl\fR wit DTrace support enabled.
.SH "HISTORY"
.IX Header "HISTORY"
.IP "5.10.1" 4
.IX Item "5.10.1"
Perlz initial DTrace support was added, providin \f(CW\*(C`sub\-entry\*(C'\fR and
\&\f(CW\*(C`sub\-return\*(C'\fR probes.
.IP "5.14.0" 4
.IX Item "5.14.0"
Da \f(CW\*(C`sub\-entry\*(C'\fR n' \f(CW\*(C`sub\-return\*(C'\fR probes bust a gangbangin' fourth argument: the
package name of tha function.
.IP "5.16.0" 4
.IX Item "5.16.0"
Da \f(CW\*(C`phase\-change\*(C'\fR probe was added.
.IP "5.18.0" 4
.IX Item "5.18.0"
Da \f(CW\*(C`op\-entry\*(C'\fR, \f(CW\*(C`loading\-file\*(C'\fR, n' \f(CW\*(C`loaded\-file\*(C'\fR probes was added.
.SH "PROBES"
.IX Header "PROBES"
.IP "sub\-entry(\s-1SUBNAME, FILE, LINE, PACKAGE\s0)" 4
.IX Item "sub-entry(SUBNAME, FILE, LINE, PACKAGE)"
Traces tha entry of any subroutine. Note dat all of tha variables
refer ta tha subroutine dat is bein invoked; there is currently
no way ta git ahold of any shiznit bout tha subroutine's
\&\fIcaller\fR from a DTrace action.
.Sp
.Vb 4
\&    :*perl*::sub\-entry {
\&        printf("%s::%s entered at %s line %d\en",
\&               copyinstr(arg3), copyinstr(arg0), copyinstr(arg1), arg2);
\&    }
.Ve
.IP "sub\-return(\s-1SUBNAME, FILE, LINE, PACKAGE\s0)" 4
.IX Item "sub-return(SUBNAME, FILE, LINE, PACKAGE)"
Traces tha exit of any subroutine. Note dat all of tha variables
refer ta tha subroutine dat is returning; there is currently no
way ta git ahold of any shiznit bout tha subroutinez \fIcaller\fR
from a DTrace action.
.Sp
.Vb 4
\&    :*perl*::sub\-return {
\&        printf("%s::%s returned at %s line %d\en",
\&               copyinstr(arg3), copyinstr(arg0), copyinstr(arg1), arg2);
\&    }
.Ve
.IP "phase\-change(\s-1NEWPHASE, OLDPHASE\s0)" 4
.IX Item "phase-change(NEWPHASE, OLDPHASE)"
Traces chizzlez ta Perlz interpreta state. Yo ass can internalize this
as tracin chizzlez ta Perlz \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR variable, especially
since tha joints fo' \f(CW\*(C`NEWPHASE\*(C'\fR n' \f(CW\*(C`OLDPHASE\*(C'\fR is tha strings that
\&\f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR reports.
.Sp
.Vb 4
\&    :*perl*::phase\-change {
\&        printf("Phase chizzled from %s ta %s\en",
\&            copyinstr(arg1), copyinstr(arg0));
\&    }
.Ve
.IP "op\-entry(\s-1OPNAME\s0)" 4
.IX Item "op-entry(OPNAME)"
Traces tha execution of each opcode up in tha Perl runloop. This probe
is fired before tha opcode is executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. When tha Perl debugger is
enabled, tha DTrace probe is fired \fIafter\fR tha debugger hooks (but
still before tha opcode itself is executed).
.Sp
.Vb 3
\&    :*perl*::op\-entry {
\&        printf("Bout ta execute opcode %s\en", copyinstr(arg0));
\&    }
.Ve
.IP "loading\-file(\s-1FILENAME\s0)" 4
.IX Item "loading-file(FILENAME)"
Fires when Perl be bout ta load a individual file, whether from
\&\f(CW\*(C`use\*(C'\fR, \f(CW\*(C`require\*(C'\fR, or \f(CW\*(C`do\*(C'\fR. This probe fires before tha file is
read from disk. Da filename argument is converted ta local filesystem
paths instead of providin \f(CW\*(C`Module::Name\*(C'\fR\-style names.
.Sp
.Vb 3
\&    :*perl*:loading\-file {
\&        printf("Bout ta load %s\en", copyinstr(arg0));
\&    }
.Ve
.IP "loaded\-file(\s-1FILENAME\s0)" 4
.IX Item "loaded-file(FILENAME)"
Fires when Perl has successfully loaded a individual file, whether
from \f(CW\*(C`use\*(C'\fR, \f(CW\*(C`require\*(C'\fR, or \f(CW\*(C`do\*(C'\fR. This probe fires afta tha file
is read from disk n' its contentss evaluated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da filename argument
is converted ta local filesystem paths instead of providing
\&\f(CW\*(C`Module::Name\*(C'\fR\-style names.
.Sp
.Vb 3
\&    :*perl*:loaded\-file {
\&        printf("Successfully loaded %s\en", copyinstr(arg0));
\&    }
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.IP "Most frequently called functions" 4
.IX Item "Most frequently called functions"
.Vb 1
\&    # dtrace \-qZn \*(Aqsub\-entry { @[strjoin(strjoin(copyinstr(arg3),"::"),copyinstr(arg0))] = count() } END {trunc(@, 10)}\*(Aq
\&
\&    Class::MOP::Attribute::slots                                    400
\&    Try::Tiny::catch                                                411
\&    Try::Tiny::try                                                  411
\&    Class::MOP::Instance::inline_slot_access                        451
\&    Class::MOP::Class::Immutable::Trait:::around                    472
\&    Class::MOP::Mixin::AttributeCore::has_initializer               496
\&    Class::MOP::Method::Wrapped::_\|_ANON_\|_                           544
\&    Class::MOP::Package::_package_stash                             737
\&    Class::MOP::Class::initialize                                  1128
\&    Class::MOP::get_metaclass_by_name                              1204
.Ve
.IP "Trace function calls" 4
.IX Item "Trace function calls"
.Vb 1
\&    # dtrace \-qFZn \*(Aqsub\-entry, sub\-return { trace(copyinstr(arg0)) }\*(Aq
\&
\&    0  \-> Perl_pp_entersub                        BEGIN
\&    0  <\- Perl_pp_leavesub                        BEGIN
\&    0  \-> Perl_pp_entersub                        BEGIN
\&    0    \-> Perl_pp_entersub                      import
\&    0    <\- Perl_pp_leavesub                      import
\&    0  <\- Perl_pp_leavesub                        BEGIN
\&    0  \-> Perl_pp_entersub                        BEGIN
\&    0    \-> Perl_pp_entersub                      dress
\&    0    <\- Perl_pp_leavesub                      dress
\&    0    \-> Perl_pp_entersub                      dirty
\&    0    <\- Perl_pp_leavesub                      dirty
\&    0    \-> Perl_pp_entersub                      whiten
\&    0    <\- Perl_pp_leavesub                      whiten
\&    0  <\- Perl_dounwind                           BEGIN
.Ve
.IP "Function calls durin interpreta cleanup" 4
.IX Item "Function calls durin interpreta cleanup"
.Vb 1
\&    # dtrace \-Zn \*(Aqphase\-change /copyinstr(arg0) == "END"/ { self\->endin = 1 } sub\-entry /self\->ending/ { trace(copyinstr(arg0)) }\*(Aq
\&
\&    CPU     ID                    FUNCTION:NAME
\&      1  77214       Perl_pp_entersub:sub\-entry   END
\&      1  77214       Perl_pp_entersub:sub\-entry   END
\&      1  77214       Perl_pp_entersub:sub\-entry   cleanup
\&      1  77214       Perl_pp_entersub:sub\-entry   _force_writable
\&      1  77214       Perl_pp_entersub:sub\-entry   _force_writable
.Ve
.IP "System calls at compile time" 4
.IX Item "System calls at compile time"
.Vb 1
\&    # dtrace \-qZn \*(Aqphase\-change /copyinstr(arg0) == "START"/ { self\->interestin = 1 } phase\-change /copyinstr(arg0) == "RUN"/ { self\->interestin = 0 } syscall::: /self\->interesting/ { @[probefunc] = count() } END { trunc(@, 3) }\*(Aq
\&
\&    lseek                                                           310
\&    read                                                            374
\&    stat64                                                         1056
.Ve
.IP "Perl functions dat execute da most thugged-out opcodes" 4
.IX Item "Perl functions dat execute da most thugged-out opcodes"
.Vb 1
\&    # dtrace \-qZn \*(Aqsub\-entry { self\->fqn = strjoin(copyinstr(arg3), strjoin("::", copyinstr(arg0))) } op\-entry /self\->fqn != ""/ { @[self\->fqn] = count() } END { trunc(@, 3) }\*(Aq
\&
\&    warnings::unimport                                             4589
\&    Exporter::Heavy::_rebuild_cache                                5039
\&    Exporter::import                                              14578
.Ve
.SH "REFERENCES"
.IX Header "REFERENCES"
.IP "DTrace Dynamic Tracin Guide" 4
.IX Item "DTrace Dynamic Tracin Guide"
<http://dtrace.org/guide/preface.html>
.IP "DTrace: Dynamic Tracin up in Oracle Solaris, Mac \s-1OS X\s0 n' FreeBSD" 4
.IX Item "DTrace: Dynamic Tracin up in Oracle Solaris, Mac OS X n' FreeBSD"
<http://www.amazon.com/DTrace\-Dynamic\-Tracing\-Solaris\-FreeBSD/dp/0132091518/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Devel::DTrace::Provider" 4
.IX Item "Devel::DTrace::Provider"
This \s-1CPAN\s0 module lets you create application-level DTrace probes freestyled in
Perl.
.SH "AUTHORS"
.IX Header "AUTHORS"
Shawn M Moore \f(CW\*(C`sartak@gmail.com\*(C'\fR
