'\" t
.\"     Title: git-update-index
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-UPDATE\-INDEX" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-update-index \- Regista file contents up in tha hustlin tree ta tha index
.SH "SYNOPSIS"
.sp
.nf
\fIgit update\-index\fR
             [\-\-add] [\-\-remove | \-\-force\-remove] [\-\-replace]
             [\-\-refresh] [\-q] [\-\-unmerged] [\-\-ignore\-missing]
             [(\-\-cacheinfo <mode> <object> <file>)\&...]
             [\-\-chmod=(+|\-)x]
             [\-\-[no\-]assume\-unchanged]
             [\-\-[no\-]skip\-worktree]
             [\-\-ignore\-submodules]
             [\-\-really\-refresh] [\-\-unresolve] [\-\-again | \-g]
             [\-\-info\-only] [\-\-index\-info]
             [\-z] [\-\-stdin] [\-\-index\-version <n>]
             [\-\-verbose]
             [\-\-] [<file>\&...]
.fi
.sp
.SH "DESCRIPTION"
.sp
Modifies tha index or directory cache\&. Each file mentioned is updated tha fuck into tha index n' any \fIunmerged\fR or \fIneedz updating\fR state is cleared\&.
.sp
See also \fBgit-add\fR(1) fo' a mo' user\-friendly way ta do a shitload of da most thugged-out common operations on tha index\&.
.sp
Da way \fIgit update\-index\fR handlez filez it is holla'd at bout can be modified rockin tha various options:
.SH "OPTIONS"
.PP
\-\-add
.RS 4
If a specified file isn\(cqt up in tha index already then it\(cqs added\&. Default behaviour is ta ignore freshly smoked up files\&.
.RE
.PP
\-\-remove
.RS 4
If a specified file is up in tha index but is missin then it\(cqs removed\&. Default behavior is ta ignore removed file\&.
.RE
.PP
\-\-refresh
.RS 4
Looks all up in tha current index n' checks ta peep if merges or thugged-out shiznit is needed by checkin stat() shiznit\&.
.RE
.PP
\-q
.RS 4
Quiet\&. If \-\-refresh findz dat tha index needz a update, tha default behavior is ta error out\&. This option makes
\fIgit update\-index\fR
continue anyway\&.
.RE
.PP
\-\-ignore\-submodules
.RS 4
Do not try ta update submodules\&. This option is only bigged up when passed before \-\-refresh\&.
.RE
.PP
\-\-unmerged
.RS 4
If \-\-refresh findz unmerged chizzlez up in tha index, tha default behavior is ta error out\&. This option makes
\fIgit update\-index\fR
continue anyway\&.
.RE
.PP
\-\-ignore\-missing
.RS 4
Ignores missin filez durin a \-\-refresh
.RE
.PP
\-\-cacheinfo <mode> <object> <path>
.RS 4
Directly bang tha specified info tha fuck into tha index\&.
.RE
.PP
\-\-index\-info
.RS 4
Read index shiznit from stdin\&.
.RE
.PP
\-\-chmod=(+|\-)x
.RS 4
Set tha execute permissions on tha updated files\&.
.RE
.PP
\-\-[no\-]assume\-unchanged
.RS 4
When these flags is specified, tha object names recorded fo' tha paths is not updated\&. Instead, these options set n' unset tha "assume unchanged" bit fo' tha paths\&. When tha "assume unchanged" bit is on, Git stops checkin tha hustlin tree filez fo' possible modifications, so you need ta manually unset tha bit ta tell Git when you chizzle tha hustlin tree file\&. This is sometimes helpful when hustlin wit a funky-ass big-ass project on a gangbangin' filesystem dat has straight-up slow lstat(2) system call (e\&.g\&. cifs)\&.
.sp
This option can be also used as a cold-ass lil coarse file\-level mechanizzle ta ignore uncommitted chizzlez up in tracked filez (akin ta what
\&.gitignore
does fo' untracked files)\&. Git will fail (gracefully) up in case it need ta modify dis file up in tha index e\&.g\&. when mergin up in a cold-ass lil commit; thus, up in case tha assumed\-untracked file is chizzled upstream, yo big-ass booty is ghon need ta handle tha thang manually\&.
.RE
.PP
\-\-really\-refresh
.RS 4
Like
\fI\-\-refresh\fR yo, but checks stat shiznit unconditionally, without regard ta tha "assume unchanged" setting\&.
.RE
.PP
\-\-[no\-]skip\-worktree
.RS 4
When one of these flags is specified, tha object name recorded fo' tha paths is not updated\&. Instead, these options set n' unset tha "skip\-worktree" bit fo' tha paths\&. Right back up in yo muthafuckin ass. See section "Skip\-worktree bit" below fo' mo' shiznit\&.
.RE
.PP
\-g, \-\-again
.RS 4
Runs
\fIgit update\-index\fR
itself on tha paths whose index entries is different from dem from the
HEAD
commit\&.
.RE
.PP
\-\-unresolve
.RS 4
Restores the
\fIunmerged\fR
or
\fIneedz updating\fR
state of a gangbangin' file durin a merge if dat shiznit was cleared by accident\&.
.RE
.PP
\-\-info\-only
.RS 4
Do not create objects up in tha object database fo' all <file> arguments dat follow dis flag; just bang they object IDs tha fuck into tha index\&.
.RE
.PP
\-\-force\-remove
.RS 4
Remove tha file from tha index even when tha hustlin directory still has such a gangbangin' file\&. (Implies \-\-remove\&.)
.RE
.PP
\-\-replace
.RS 4
By default, when a gangbangin' file
path
exists up in tha index,
\fIgit update\-index\fR
refuses a attempt ta add
path/file\&. Right back up in yo muthafuckin ass. Similarly if a gangbangin' file
path/file
exists, a gangbangin' file
path
cannot be added\&. With \-\-replace flag, existin entries dat conflict wit tha entry bein added is automatically removed wit warnin lyrics\&.
.RE
.PP
\-\-stdin
.RS 4
Instead of takin list of paths from tha command line, read list of paths from tha standard input\&. Paths is separated by LF (i\&.e\&. one path per line) by default\&.
.RE
.PP
\-\-verbose
.RS 4
Report what tha fuck is bein added n' removed from index\&.
.RE
.PP
\-\-index\-version <n>
.RS 4
Write tha resultin index up in tha named on\-disk format version\&. Right back up in yo muthafuckin ass. Supported versions is 2, 3 n' 4\&. Da current default version is 2 or 3, dependin on whether extra features is used, such as
git add \-N\&.
.sp
Version 4 performs a simple pathname compression dat reduces index size by 30%\-50% on big-ass repositories, which thangs up in dis biatch up in fasta load time\&. Version 4 is relatively lil' (first busted out up in in 1\&.8\&.0 up in October 2012)\&. Other Git implementations like fuckin JGit n' libgit2 may not support it yet\&.
.RE
.PP
\-z
.RS 4
Only meaningful with
\-\-stdin
or
\-\-index\-info; paths is separated wit NUL characta instead of LF\&.
.RE
.PP
\-\-
.RS 4
Do not interpret any mo' arguments as options\&.
.RE
.PP
<file>
.RS 4
Filez ta act on\&. Note dat filez beginnin with
\fI\&.\fR
are discarded\&. This includes
\&./file
and
dir/\&./file\&. If you don\(cqt want this, then use cleaner names\&. Da same applies ta directories ending
\fI/\fR
and paths with
\fI//\fR
.RE
.SH "USING --REFRESH"
.sp
\fI\-\-refresh\fR do not calculate a freshly smoked up sha1 file or brang tha index up\-to\-date fo' mode/content chizzles\&. But what tha fuck it \fBdoes\fR do is ta "re\-match" tha stat shiznit of a gangbangin' file wit tha index, so dat you can refresh tha index fo' a gangbangin' file dat hasn\(cqt been chizzled but where tha stat entry is outta date\&.
.sp
For example, you\(cqd wanna do dis afta bustin a \fIgit read\-tree\fR, ta link up tha stat index details wit tha proper files\&.
.SH "USING --CACHEINFO OR --INFO-ONLY"
.sp
\fI\-\-cacheinfo\fR is used ta regista a gangbangin' file dat aint up in tha current hustlin directory\&. This is useful fo' minimum\-checkout merging\&.
.sp
To pretend you gotz a gangbangin' file wit mode n' sha1 at path, say:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git update\-index \-\-cacheinfo mode sha1 path
.fi
.if n \{\
.RE
.\}
.sp
.sp
\fI\-\-info\-only\fR is used ta regista filez without placin dem up in tha object database\&. This is useful fo' status\-only repositories\&.
.sp
Both \fI\-\-cacheinfo\fR n' \fI\-\-info\-only\fR behave similarly: tha index is updated but tha object database isn\(cqt\&. \fI\-\-cacheinfo\fR is useful when tha object is up in tha database but tha file isn\(cqt available locally\&. \fI\-\-info\-only\fR is useful when tha file be available yo, but you do not wish ta update tha object database\&.
.SH "USING --INDEX-INFO"
.sp
\-\-index\-info be a mo' bangin mechanizzle dat lets you feed multiple entry definitions from tha standard input, n' designed specifically fo' scripts\&. Well shiiiit, it can take inputz of three formats:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
mode SP sha1 TAB path
.sp
Da first format is what tha fuck "git\-apply \-\-index\-info" reports, n' used ta reconstruct a partial tree dat is used fo' phony merge base tree when fallin back on 3\-way merge\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
mode SP type SP sha1 TAB path
.sp
Da second format is ta stuff
\fIgit ls\-tree\fR
output tha fuck into tha index file\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
mode SP sha1 SP stage TAB path
.sp
This format is ta put higher order stages tha fuck into tha index file n' matches
\fIgit ls\-filez \-\-stage\fR
output\&.
.RE
.sp
To place a higher stage entry ta tha index, tha path should first be removed by feedin a mode=0 entry fo' tha path, n' then feedin necessary input lines up in tha third format\&.
.sp
For example, startin wit dis index:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git ls\-filez \-s
100644 8a1218a1024a212bb3db30becd860315f9f3ac52 0       frotz
.fi
.if n \{\
.RE
.\}
.sp
.sp
you can feed tha followin input ta \-\-index\-info:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git update\-index \-\-index\-info
0 0000000000000000000000000000000000000000      frotz
100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1       frotz
100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2       frotz
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da first line of tha input feedz 0 as tha mode ta remove tha path; tha SHA\-1 do not matta as long as it is well formatted\&. Then tha second n' third line feedz stage 1 n' stage 2 entries fo' dat path\& fo' realz. Afta tha above, we would end up wit this:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git ls\-filez \-s
100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1       frotz
100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2       frotz
.fi
.if n \{\
.RE
.\}
.sp
.SH "USING \(lqASSUME UNCHANGED\(rq BIT"
.sp
Many operations up in Git depend on yo' filesystem ta have a efficient lstat(2) implementation, so dat st_mtime shiznit fo' hustlin tree filez can be skankyly checked ta peep if tha file contents have chizzled from tha version recorded up in tha index file\&. Unfortunately, some filesystems have inefficient lstat(2)\&. If yo' filesystem is one of them, you can set "assume unchanged" bit ta paths you aint chizzled ta cause Git not ta do dis check\&. Note dat settin dis bit on a path do not mean Git will check tha contentz of tha file ta peep if it has chizzled \(em it make Git ta omit any checkin n' assume it has \fBnot\fR chizzled\&. When you make chizzlez ta hustlin tree files, you gotta explicitly tell Git bout it by droppin "assume unchanged" bit, either before or afta you modify them\&.
.sp
In order ta set "assume unchanged" bit, use \-\-assume\-unchanged option\&. To unset, use \-\-no\-assume\-unchanged\&. To peep which filez have tha "assume unchanged" bit set, use git ls\-filez \-v (see \fBgit-ls-files\fR(1))\&.
.sp
Da command looks at core\&.ignorestat configuration variable\&. When dis is true, paths updated wit git update\-index paths\&.\&.\&. n' paths updated wit other Git commandz dat update both index n' hustlin tree (e\&.g\&. \fIgit apply \-\-index\fR, \fIgit checkout\-index \-u\fR, n' \fIgit read\-tree \-u\fR) is automatically marked as "assume unchanged"\&. Note dat "assume unchanged" bit is \fBnot\fR set if git update\-index \-\-refresh findz tha hustlin tree file matches tha index (use git update\-index \-\-really\-refresh if you wanna mark dem as "assume unchanged")\&.
.SH "EXAMPLES"
.sp
To update n' refresh only tha filez already checked out:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git checkout\-index \-n \-f \-a && git update\-index \-\-ignore\-missin \-\-refresh
.fi
.if n \{\
.RE
.\}
.sp

.PP
On a inefficient filesystem wit core\&.ignorestat set
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
$ git update\-index \-\-really\-refresh              \fB(1)\fR
$ git update\-index \-\-no\-assume\-unchanged foo\&.c   \fB(2)\fR
$ git diff \-\-name\-only                           \fB(3)\fR
$ edit foo\&.c
$ git diff \-\-name\-only                           \fB(4)\fR
M foo\&.c
$ git update\-index foo\&.c                         \fB(5)\fR
$ git diff \-\-name\-only                           \fB(6)\fR
$ edit foo\&.c
$ git diff \-\-name\-only                           \fB(7)\fR
$ git update\-index \-\-no\-assume\-unchanged foo\&.c   \fB(8)\fR
$ git diff \-\-name\-only                           \fB(9)\fR
M foo\&.c
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fRforces lstat(2) ta set "assume unchanged" bits fo' paths dat match index\&.
.br
\fB2. \fRmark tha path ta be edited\&.
.br
\fB3. \fRthis do lstat(2) n' findz index matches tha path\&.
.br
\fB4. \fRthis do lstat(2) n' findz index do
\fBnot\fR
match tha path\&.
.br
\fB5. \fRregisterin tha freshly smoked up version ta index sets "assume unchanged" bit\&.
.br
\fB6. \fRand it be assumed unchanged\&.
.br
\fB7. \fReven afta you edit it\&.
.br
\fB8. \fRyou can tell bout tha chizzle afta tha fact\&.
.br
\fB9. \fRnow it checks wit lstat(2) n' findz it has been chizzled\&.
.br
.RE
.SH "SKIP-WORKTREE BIT"
.sp
Skip\-worktree bit can be defined up in one (long) sentence: When readin a entry, if it is marked as skip\-worktree, then Git pretendz its hustlin directory version is up ta date n' read tha index version instead\&.
.sp
To elaborate, "reading" means checkin fo' file existence, readin file attributes or file content\&. Da hustlin directory version may be present or absent\&. If present, its content may match against tha index version or not\&. Freestylin aint affected by dis bit, content safety is still first priority\&. Note dat Git \fIcan\fR update hustlin directory file, dat is marked skip\-worktree, if it is safe ta do so (i\&.e\&. hustlin directory version matches index version)
.sp
Although dis bit looks similar ta assume\-unchanged bit, its goal is different from assume\-unchanged bit\(cqs\&. Right back up in yo muthafuckin ass. Skip\-worktree also takes precedence over assume\-unchanged bit when both is set\&.
.SH "CONFIGURATION"
.sp
Da command honors core\&.filemode configuration variable\&. If yo' repository is on a gangbangin' filesystem whose executable bits is unreliable, dis should be set ta \fIfalse\fR (see \fBgit-config\fR(1))\&. This causes tha command ta ignore differences up in file modes recorded up in tha index n' tha file mode on tha filesystem if they differ only on executable bit\&. On such a fucked up filesystem, you may need ta use \fIgit update\-index \-\-chmod=\fR\&.
.sp
Quite similarly, if core\&.symlinks configuration variable is set ta \fIfalse\fR (see \fBgit-config\fR(1)), symbolic links is checked up as plain files, n' dis command do not modify a recorded file mode from symbolic link ta regular file\&.
.sp
Da command looks at core\&.ignorestat configuration variable\&. Right back up in yo muthafuckin ass. See \fIUsin "assume unchanged" bit\fR section above\&.
.sp
Da command also looks at core\&.trustctime configuration variable\&. Well shiiiit, it can be useful when tha inode chizzle time is regularly modified by suttin' outside Git (file system crawlaz n' backup systems use ctime fo' markin filez processed) (see \fBgit-config\fR(1))\&.
.SH "SEE ALSO"
.sp
\fBgit-config\fR(1), \fBgit-add\fR(1), \fBgit-ls-files\fR(1)
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
