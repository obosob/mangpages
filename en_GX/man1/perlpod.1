.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLPOD 1"
.TH PERLPOD 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlpod \- tha Plain Oldskool Documentation format
.IX Xref "POD plain oldschool documentation"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Pod be a simple-to-use markup language used fo' freestylin documentation
for Perl, Perl programs, n' Perl modules.
.PP
Translators is available fo' convertin Pod ta various formats
like plain text, \s-1HTML,\s0 playa pages, n' more.
.PP
Pod markup consistz of three basic kindz of paragraphs:
ordinary,
verbatim, n' 
command.
.SS "Ordinary Paragraph"
.IX Xref "POD, ordinary paragraph"
.IX Subsection "Ordinary Paragraph"
Most paragraphs up in yo' documentation is ghon be ordinary blocks
of text, like dis one.  Yo ass can simply type up in yo' text without
any markup whatsoever, n' wit just a funky-ass blank line before and
after n' shit.  When it gets formatted, it will undergo minimal formatting, 
like bein rewrapped, probably put tha fuck into a proportionally spaced
font, n' maybe even justified.
.PP
Yo ass can use formattin codes up in ordinary paragraphs, fo' \fBbold\fR,
\&\fIitalic\fR, \f(CW\*(C`code\-style\*(C'\fR, hyperlinks, n' mo' n' mo' n' mo'.  Such
codes is explained up in tha "Formattin Codes"
section, below.
.SS "Verbatim Paragraph"
.IX Xref "POD, verbatim paragraph verbatim"
.IX Subsection "Verbatim Paragraph"
Verbatim paragraphs is probably used fo' presentin a cold-ass lil codeblock or
other text which do not require any special parsin or formatting,
and which shouldn't be wrapped.
.PP
A verbatim paragraph is distinguished by havin its first character
be a space or a tab.  (And commonly, all its lines begin wit spaces
and/or tabs.)  It should be reproduced exactly, wit tabs assumed to
be on 8\-column boundaries. Put ya muthafuckin choppers up if ya feel dis!  There is no special formattin codes,
so you can't italicize or anythang like dis shit.  A \e means \e, and
nothang else.
.SS "Command Paragraph"
.IX Xref "POD, command"
.IX Subsection "Command Paragraph"
A command paragraph is used fo' special treatment of whole chunks
of text, probably as headings or partz of lists.
.PP
All command paragraphs (which is typically only one line long) start
with \*(L"=\*(R", followed by a identifier, followed by arbitrary text that
the command can use however it pleases.  Currently recognized commands
are
.PP
.Vb 10
\&    =pod
\&    =head1 Headin Text
\&    =head2 Headin Text
\&    =head3 Headin Text
\&    =head4 Headin Text
\&    =over indentlevel
\&    =item stuff
\&    =back
\&    =begin format
\&    =end format
\&    =for format text...
\&    =encodin type
\&    =cut
.Ve
.PP
To explain dem each up in detail:
.ie n .IP """=head1 \f(CIHeadin Text\f(CW""" 4
.el .IP "\f(CW=head1 \f(CIHeadin Text\f(CW\fR" 4
.IX Xref "=head1 =head2 =head3 =head4 head1 head2 head3 head4"
.IX Item "=head1 Headin Text"
.PD 0
.ie n .IP """=head2 \f(CIHeadin Text\f(CW""" 4
.el .IP "\f(CW=head2 \f(CIHeadin Text\f(CW\fR" 4
.IX Item "=head2 Headin Text"
.ie n .IP """=head3 \f(CIHeadin Text\f(CW""" 4
.el .IP "\f(CW=head3 \f(CIHeadin Text\f(CW\fR" 4
.IX Item "=head3 Headin Text"
.ie n .IP """=head4 \f(CIHeadin Text\f(CW""" 4
.el .IP "\f(CW=head4 \f(CIHeadin Text\f(CW\fR" 4
.IX Item "=head4 Headin Text"
.PD
Head1 all up in head4 produce headings, head1 bein tha highest
level.  Da text up in tha rest of dis paragraph is tha content of the
heading.  For example:
.Sp
.Vb 1
\&  =head2 Object Attributes
.Ve
.Sp
Da text \*(L"Object Attributes\*(R" comprises tha headin there.
Da text up in these headin commandz can use formattin codes, as peeped here:
.Sp
.Vb 1
\&  =head2 Possible Values fo' C<$/>
.Ve
.Sp
Such commandz is explained up in the
"Formattin Codes" section, below.
.ie n .IP """=over \f(CIindentlevel\f(CW""" 4
.el .IP "\f(CW=over \f(CIindentlevel\f(CW\fR" 4
.IX Xref "=over =item =back over item back"
.IX Item "=over indentlevel"
.PD 0
.ie n .IP """=item \f(CIstuff...\f(CW""" 4
.el .IP "\f(CW=item \f(CIstuff...\f(CW\fR" 4
.IX Item "=item stuff..."
.ie n .IP """=back""" 4
.el .IP "\f(CW=back\fR" 4
.IX Item "=back"
.PD
Item, over, n' back require a lil mo' explanation:  \*(L"=over\*(R" starts
a region specifically fo' tha generation of a list rockin \*(L"=item\*(R"
commands, or fo' indentin (groups of) aiiight paragraphs.  At tha end
of yo' list, use \*(L"=back\*(R" ta end dat shit.  Da \fIindentlevel\fR option to
\&\*(L"=over\*(R" indicates how tha fuck far over ta indent, generally up in ems (where
one em is tha width of a \*(L"M\*(R" up in tha documentz base font) or roughly
comparable units; if there is no \fIindentlevel\fR option, it defaults
to four. Shiiit, dis aint no joke.  (And some formattas may just ignore whatever \fIindentlevel\fR
you provide.)  In tha \fIstuff\fR up in \f(CW\*(C`=item \f(CIstuff...\f(CW\*(C'\fR, you may
use formattin codes, as peeped here:
.Sp
.Vb 1
\&  =item Usin C<$|> ta Control Buffering
.Ve
.Sp
Such commandz is explained up in the
"Formattin Codes" section, below.
.Sp
Note also dat there be some basic rulez ta rockin \*(L"=over\*(R" ...
\&\*(L"=back\*(R" regions:
.RS 4
.IP "\(bu" 4
Don't use \*(L"=item\*(R"s outside of a \*(L"=over\*(R" ... \*(L"=back\*(R" region.
.IP "\(bu" 4
Da first thang afta tha \*(L"=over\*(R" command should be a \*(L"=item\*(R", unless
there aren't goin ta be any shit at all up in dis \*(L"=over\*(R" ... \*(L"=back\*(R"
region.
.IP "\(bu" 4
Don't put "=head\fIn\fR\*(L" commandz inside a \*(R"=over\*(L" ... \*(R"=back" region.
.IP "\(bu" 4
And like most blinginly, keep tha shit consistent: either use
\&\*(L"=item *\*(R" fo' all of them, ta produce bullets; or use \*(L"=item 1.\*(R",
\&\*(L"=item 2.\*(R", etc., ta produce numbered lists; or use \*(L"=item foo\*(R",
\&\*(L"=item bar\*(R", etc.\-\-namely, thangs dat look not a god damn thang like bullets or
numbers.
.Sp
If you start wit bullets or numbers, stick wit them, as
formattas use tha straight-up original gangsta \*(L"=item\*(R" type ta decizzle how tha fuck ta format the
list.
.RE
.RS 4
.RE
.ie n .IP """=cut""" 4
.el .IP "\f(CW=cut\fR" 4
.IX Xref "=cut cut"
.IX Item "=cut"
To end a Pod block, bust a funky-ass blank line,
then a line beginnin wit \*(L"=cut\*(R", n' a funky-ass blank
line afta dat shit.  This lets Perl (and tha Pod formatter) know that
this is where Perl code is resuming.  (Da blank line before tha \*(L"=cut\*(R"
is not technologically necessary yo, but nuff olda Pod processors require dat shit.)
.ie n .IP """=pod""" 4
.el .IP "\f(CW=pod\fR" 4
.IX Xref "=pod pod"
.IX Item "=pod"
Da \*(L"=pod\*(R" command by itself don't do much of anythang yo, but it
signals ta Perl (and Pod formatters) dat a Pod block starts here, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  A
Pod block starts wit \fIany\fR command paragraph, so a \*(L"=pod\*(R" command is
usually used just when you wanna start a Pod block wit a ordinary
paragraph or a verbatim paragraph.  For example:
.Sp
.Vb 1
\&  =item stuff()
\&
\&  This function do stuff.
\&
\&  =cut
\&
\&  sub shiznit {
\&    ...
\&  }
\&
\&  =pod
\&
\&  Remember ta check its return value, as in:
\&
\&    stuff() || take a thugged-out dirtnap "Couldn\*(Aqt do stuff!";
\&
\&  =cut
.Ve
.ie n .IP """=begin \f(CIformatname\f(CW""" 4
.el .IP "\f(CW=begin \f(CIformatname\f(CW\fR" 4
.IX Xref "=begin =end =for begin end for"
.IX Item "=begin formatname"
.PD 0
.ie n .IP """=end \f(CIformatname\f(CW""" 4
.el .IP "\f(CW=end \f(CIformatname\f(CW\fR" 4
.IX Item "=end formatname"
.ie n .IP """=for \f(CIformatname\f(CW \f(CItext...\f(CW""" 4
.el .IP "\f(CW=for \f(CIformatname\f(CW \f(CItext...\f(CW\fR" 4
.IX Item "=for formatname text..."
.PD
For, begin, n' end will let you have regionz of text/code/data that
are not generally interpreted as aiiight Pod text yo, but is passed
directly ta particular formatters, or is otherwise special. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  A
formatta dat can use dat format will use tha region, otherwise it
will be straight-up ignored.
.Sp
A command "=begin \fIformatname\fR\*(L", some paragraphs, n' a
command \*(R"=end \fIformatname\fR", mean dat tha text/data up in between
is meant fo' formattas dat KNOW tha special format
called \fIformatname\fR.  For example,
.Sp
.Vb 1
\&  =begin html
\&
\&  <hr> <img src="thang.png">
\&  <p> This be a raw HTML paragraph </p>
\&
\&  =end html
.Ve
.Sp
Da command "=for \fIformatname\fR \fItext...\fR"
specifies dat tha remainder of just dis paragraph (starting
right afta \fIformatname\fR) is up in dat special format.
.Sp
.Vb 2
\&  =for html <hr> <img src="thang.png">
\&  <p> This be a raw HTML paragraph </p>
.Ve
.Sp
This means tha same ol' dirty thang as tha above \*(L"=begin html\*(R" ... \*(L"=end html\*(R"
region.
.Sp
That is, wit \*(L"=for\*(R", you can have only one paragraphz worth
of text (i.e., tha text up in \*(L"=foo targetname text...\*(R") yo, but with
\&\*(L"=begin targetname\*(R" ... \*(L"=end targetname\*(R", you can have any amount
of shiznit up in between. I aint talkin' bout chicken n' gravy biatch.  (Note dat there still must be a funky-ass blank line
afta tha \*(L"=begin\*(R" command n' a funky-ass blank line before tha \*(L"=end\*(R"
command.)
.Sp
Here is some examplez of how tha fuck ta use these:
.Sp
.Vb 1
\&  =begin html
\&
\&  <br>Figure 1.<br><IMG SRC="figure1.png"><br>
\&
\&  =end html
\&
\&  =begin text
\&
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    |  foo        |
\&    |        bar  |
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&  ^^^^ Figure 1. ^^^^
\&
\&  =end text
.Ve
.Sp
Some format names dat formattas currently is known ta accept
include \*(L"roff\*(R", \*(L"man\*(R", \*(L"latex\*(R", \*(L"tex\*(R", \*(L"text\*(R", n' \*(L"html\*(R".  (Some
formattas will treat a shitload of these as synonyms.)
.Sp
A format name of \*(L"comment\*(R" is common fo' just makin notes (presumably
to yo ass) dat won't step tha fuck up in any formatted version of tha Pod
document:
.Sp
.Vb 2
\&  =for comment
\&  Make shizzle dat all tha available options is documented!
.Ve
.Sp
Some \fIformatnames\fR will require a leadin colon (as in
\&\f(CW"=for :formatname"\fR, or
\&\f(CW"=begin :formatname" ... "=end :formatname"\fR),
to signal dat tha text aint raw data yo, but instead \fIis\fR Pod text
(i.e., possibly containin formattin codes) thatz just not for
normal formattin (e.g., may not be a normal-use paragraph yo, but might
be fo' formattin as a gangbangin' footnote).
.ie n .IP """=encodin \f(CIencodingname\f(CW""" 4
.el .IP "\f(CW=encodin \f(CIencodingname\f(CW\fR" 4
.IX Xref "=encodin encoding"
.IX Item "=encodin encodingname"
This command is used fo' declarin tha encodin of a thugged-out document.  Most
users won't need this; but if yo' encodin aint US-ASCII or Latin\-1,
then put a \f(CW\*(C`=encodin \f(CIencodingname\f(CW\*(C'\fR command early up in tha document so
that pod formattas will know how tha fuck ta decode tha document.  For
\&\fIencodingname\fR, bust a name recognized by tha Encode::Supported
module.  Examples:
.Sp
.Vb 1
\&  =encodin utf8
\&
\&  =encodin koi8\-r
\&
\&  =encodin ShiftJIS
\&
\&  =encodin big5
.Ve
.PP
\&\f(CW\*(C`=encoding\*(C'\fR affects tha whole document, n' must occur only once.
.PP
And don't forget, when rockin any other command, dat tha command lasts up
until tha end of its \fIparagraph\fR, not its line.  So up in the
examplez below, you can peep dat every last muthafuckin command needz tha blank
line afta it, ta end its paragraph.
.PP
Some examplez of lists include:
.PP
.Vb 1
\&  =over
\&
\&  =item *
\&
\&  First item
\&
\&  =item *
\&
\&  Second item
\&
\&  =back
\&
\&  =over
\&
\&  =item Foo()
\&
\&  Description of Foo function
\&
\&  =item Bar()
\&
\&  Description of Bar function
\&
\&  =back
.Ve
.SS "Formattin Codes"
.IX Xref "POD, formattin code formattin code POD, interior sequence interior sequence"
.IX Subsection "Formattin Codes"
In ordinary paragraphs n' up in some command paragraphs, various
formattin codes (a.k.a. \*(L"interior sequences\*(R") can be used:
.ie n .IP """I<text>"" \*(-- italic text" 4
.el .IP "\f(CWI<text>\fR \*(-- italic text" 4
.IX Xref "I I<> POD, formattin code, italic italic"
.IX Item "I<text> italic text"
Used fo' emphasis ("\f(CW\*(C`be I<careful!>\*(C'\fR\*(L") n' parameters
(\*(R"\f(CW\*(C`redo I<LABEL>\*(C'\fR")
.ie n .IP """B<text>"" \*(-- bold text" 4
.el .IP "\f(CWB<text>\fR \*(-- bold text" 4
.IX Xref "B B<> POD, formattin code, bold bold"
.IX Item "B<text> bold text"
Used fo' switches ("\f(CW\*(C`perl\*(Aqs B<\-n> switch\*(C'\fR\*(L"), programs
(\*(R"\f(CW\*(C`some systems provide a B<chfn> fo' that\*(C'\fR\*(L"),
emphasis (\*(R"\f(CW\*(C`be B<careful!>\*(C'\fR\*(L"), n' so on
(\*(R"\f(CW\*(C`and dat feature is known as B<autovivification>\*(C'\fR").
.ie n .IP """C<code>"" \*(-- code text" 4
.el .IP "\f(CWC<code>\fR \*(-- code text" 4
.IX Xref "C C<> POD, formattin code, code code"
.IX Item "C<code> code text"
Rendaz code up in a typewrita font, or gives some other indication that
this represents program text ("\f(CW\*(C`C<gmtime($^T)>\*(C'\fR\*(L") or some other
form of computerese (\*(R"\f(CW\*(C`C<drwxr\-xr\-x>\*(C'\fR").
.ie n .IP """L<name>"" \*(-- a hyperlink" 4
.el .IP "\f(CWL<name>\fR \*(-- a hyperlink" 4
.IX Xref "L L<> POD, formattin code, hyperlink hyperlink"
.IX Item "L<name> a hyperlink"
There is various syntaxes, listed below.  In tha syntaxes given,
\&\f(CW\*(C`text\*(C'\fR, \f(CW\*(C`name\*(C'\fR, n' \f(CW\*(C`section\*(C'\fR cannot contain tha characters
\&'/' n' '|'; n' any '<' or '>' should be matched.
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`L<name>\*(C'\fR
.Sp
Link ta a Perl manual page (e.g., \f(CW\*(C`L<Net::Ping>\*(C'\fR).  Note
that \f(CW\*(C`name\*(C'\fR should not contain spaces.  This syntax
is also occasionally used fo' references ta Unix playa pages, as in
\&\f(CW\*(C`L<crontab(5)>\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`L<name/"sec">\*(C'\fR or \f(CW\*(C`L<name/sec>\*(C'\fR
.Sp
Link ta a section up in other manual page.  E.g.,
\&\f(CW\*(C`L<perlsyn/"For Loops">\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`L</"sec">\*(C'\fR or \f(CW\*(C`L</sec>\*(C'\fR
.Sp
Link ta a section up in dis manual page.  E.g.,
\&\f(CW\*(C`L</"Object Methods">\*(C'\fR
.RE
.RS 4
.Sp
A section is started by tha named headin or item.  For
example, \f(CW\*(C`L<perlvar/$.>\*(C'\fR or \f(CW\*(C`L<perlvar/"$.">\*(C'\fR both
link ta tha section started by "\f(CW\*(C`=item $.\*(C'\fR" up in perlvar. Shiiit, dis aint no joke.  And
\&\f(CW\*(C`L<perlsyn/For Loops>\*(C'\fR or \f(CW\*(C`L<perlsyn/"For Loops">\*(C'\fR
both link ta tha section started by "\f(CW\*(C`=head2 For Loops\*(C'\fR"
in perlsyn.
.Sp
To control what tha fuck text is used fo' display, you
use "\f(CW\*(C`L<text|...>\*(C'\fR", as in:
.IP "\(bu" 4
\&\f(CW\*(C`L<text|name>\*(C'\fR
.Sp
Link dis text ta dat manual page.  E.g.,
\&\f(CW\*(C`L<Perl Error Lyrics|perldiag>\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`L<text|name/"sec">\*(C'\fR or \f(CW\*(C`L<text|name/sec>\*(C'\fR
.Sp
Link dis text ta dat section up in dat manual page.  E.g.,
\&\f(CW\*(C`L<postfix "if"|perlsyn/"Statement Modifiers">\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`L<text|/"sec">\*(C'\fR or \f(CW\*(C`L<text|/sec>\*(C'\fR
or \f(CW\*(C`L<text|"sec">\*(C'\fR
.Sp
Link dis text ta dat section up in dis manual page.  E.g.,
\&\f(CW\*(C`L<the various attributes|/"Member Data">\*(C'\fR
.RE
.RS 4
.Sp
Or you can link ta a wizzy page:
.IP "\(bu" 4
\&\f(CW\*(C`L<scheme:...>\*(C'\fR
.Sp
\&\f(CW\*(C`L<text|scheme:...>\*(C'\fR
.Sp
Links ta a absolute \s-1URL. \s0 For example, \f(CW\*(C`L<http://www.perl.org/>\*(C'\fR or
\&\f(CW\*(C`L<Da Perl Home Page|http://www.perl.org/>\*(C'\fR.
.RE
.RS 4
.RE
.ie n .IP """E<escape>"" \*(-- a cold-ass lil characta escape" 4
.el .IP "\f(CWE<escape>\fR \*(-- a cold-ass lil characta escape" 4
.IX Xref "E E<> POD, formattin code, escape escape"
.IX Item "E<escape> a cold-ass lil characta escape"
Straight-up similar ta \s-1HTML/XML \s0\f(CW\*(C`&\f(CIfoo\f(CW;\*(C'\fR \*(L"entitizzle references\*(R":
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`E<lt>\*(C'\fR \*(-- a literal < (less than)
.IP "\(bu" 4
\&\f(CW\*(C`E<gt>\*(C'\fR \*(-- a literal > (greata than)
.IP "\(bu" 4
\&\f(CW\*(C`E<verbar>\*(C'\fR \*(-- a literal | (\fIver\fRtical \fIbar\fR)
.IP "\(bu" 4
\&\f(CW\*(C`E<sol>\*(C'\fR \*(-- a literal / (\fIsol\fRidus)
.Sp
Da above four is optionizzle except up in other formattin codes,
notably \f(CW\*(C`L<...>\*(C'\fR, n' when preceded by a
capital letter.
.IP "\(bu" 4
\&\f(CW\*(C`E<htmlname>\*(C'\fR
.Sp
Some non-numeric \s-1HTML\s0 entitizzle name, like fuckin \f(CW\*(C`E<eacute>\*(C'\fR,
meanin tha same thang as \f(CW\*(C`&eacute;\*(C'\fR up in \s-1HTML\s0 \*(-- i.e., a lowercase
e wit a acute (/\-shaped) accent.
.IP "\(bu" 4
\&\f(CW\*(C`E<number>\*(C'\fR
.Sp
Da ASCII/Latin\-1/Unicode characta wit dat number n' shit.  A
leadin \*(L"0x\*(R" means dat \fInumber\fR is hex, as in
\&\f(CW\*(C`E<0x201E>\*(C'\fR.  A leadin \*(L"0\*(R" means dat \fInumber\fR is octal,
as up in \f(CW\*(C`E<075>\*(C'\fR.  Otherwise \fInumber\fR is interpreted as being
in decimal, as up in \f(CW\*(C`E<181>\*(C'\fR.
.Sp
Note dat olda Pod formattas might not recognize octal or
hex numeric escapes, n' dat nuff formattas cannot reliably
render charactas above 255.  (Some formattas may even have
to use compromised renderingz of Latin\-1 characters, like
renderin \f(CW\*(C`E<eacute>\*(C'\fR as just a plain \*(L"e\*(R".)
.RE
.RS 4
.RE
.ie n .IP """F<filename>"" \*(-- used fo' filenames" 4
.el .IP "\f(CWF<filename>\fR \*(-- used fo' filenames" 4
.IX Xref "F F<> POD, formattin code, filename filename"
.IX Item "F<filename> used fo' filenames"
Typically displayed up in italics.  Example: "\f(CW\*(C`F<.cshrc>\*(C'\fR"
.ie n .IP """S<text>"" \*(-- text gotz nuff non-breakin spaces" 4
.el .IP "\f(CWS<text>\fR \*(-- text gotz nuff non-breakin spaces" 4
.IX Xref "S S<> POD, formattin code, non-breakin space non-breakin space"
.IX Item "S<text> text gotz nuff non-breakin spaces"
This means dat tha lyrics up in \fItext\fR should not be broken
across lines.  Example: \f(CW\*(C`S<$x\ ?\ $y\ :\ $z>\*(C'\fR.
.ie n .IP """X<topic name>"" \*(-- a index entry" 4
.el .IP "\f(CWX<topic name>\fR \*(-- a index entry" 4
.IX Xref "X X<> POD, formattin code, index entry index entry"
.IX Item "X<topic name> a index entry"
This is ignored by most formattas yo, but some may use it fo' building
indexes.  It always rendaz as empty-string.
Example: \f(CW\*(C`X<absolutizin relatizzle URLs>\*(C'\fR
.ie n .IP """Z<>"" \*(-- a null (zero-effect) formattin code" 4
.el .IP "\f(CWZ<>\fR \*(-- a null (zero-effect) formattin code" 4
.IX Xref "Z Z<> POD, formattin code, null null"
.IX Item "Z<> a null (zero-effect) formattin code"
This is rarely used. Y'all KNOW dat shit, muthafucka!  It aint nuthin but one way ta git round rockin an
E<...> code sometimes.  For example, instead of
"\f(CW\*(C`NE<lt>3\*(C'\fR\*(L" (for \*(R"N<3\*(L") you could write
\&\*(R"\f(CW\*(C`NZ<><3\*(C'\fR\*(L" (the \*(R"Z<>\*(L" breaks up tha \*(R"N\*(L" and
the \*(R"<\*(L" so they can't be considered
the part of a (fictitious) \*(R"N<...>" code).
.PP
Most of tha time, yo big-ass booty is ghon need only a single set of angle brackets to
delimit tha beginnin n' end of formattin codes.  However,
sometimes yo big-ass booty is ghon wanna put a real right angle bracket (a
greater-than sign, '>') inside of a gangbangin' formattin code.  This is particularly
common when rockin a gangbangin' formattin code ta provide a gangbangin' finger-lickin' different font-type fo' a
snippet of code.  As wit all thangs up in Perl, there is mo' than
one way ta do dat shit.  One way is ta simply escape tha closin bracket
usin a \f(CW\*(C`E\*(C'\fR code:
.PP
.Vb 1
\&    C<$a E<lt>=E<gt> $b>
.Ve
.PP
This will produce: "\f(CW\*(C`$a <=> $b\*(C'\fR"
.PP
A mo' readable, n' like mo' \*(L"plain\*(R" way is ta use a alternate
set of delimitas dat don't require a single \*(L">\*(R" ta be escaped.
Doubled angle brackets (\*(L"<<\*(R" n' \*(L">>\*(R") may be used \fIif n' only if there is
whitespace right afta tha openin delimita n' whitespace right
before tha closin delimiter!\fR  For example, tha followin will
do tha trick:
.IX Xref "POD, formattin code, escapin wit multiple brackets"
.PP
.Vb 1
\&    C<< $a <=> $b >>
.Ve
.PP
In fact, you can use as nuff repeated angle-brackets as you like so
long as you have tha same number of dem up in tha openin n' closing
delimiters, n' make shizzle dat whitespace immediately bigs up tha last
\&'<' of tha openin delimiter, n' immediately precedes tha straight-up original gangsta '>'
of tha closin delimiter n' shit.  (Da whitespace is ignored.)  So the
followin will also work:
.IX Xref "POD, formattin code, escapin wit multiple brackets"
.PP
.Vb 2
\&    C<<< $a <=> $b >>>
\&    C<<<<  $a <=> $b     >>>>
.Ve
.PP
And they all mean exactly tha same as this:
.PP
.Vb 1
\&    C<$a E<lt>=E<gt> $b>
.Ve
.PP
Da multiple-bracket form do not affect tha interpretation of tha contents of
the formattin code, only how tha fuck it must end yo, but it ain't no stoppin cause I be still poppin'.  That means dat tha examplez above
are also exactly tha same as this:
.PP
.Vb 1
\&    C<< $a E<lt>=E<gt> $b >>
.Ve
.PP
As a gangbangin' further example, dis means dat if you wanted ta put these bits of
code up in \f(CW\*(C`C\*(C'\fR (code) style:
.PP
.Vb 2
\&    open(X, ">>thing.dat") || take a thugged-out dirtnap $!
\&    $foo\->bar();
.Ve
.PP
you could do it like so:
.PP
.Vb 2
\&    C<<< open(X, ">>thing.dat") || take a thugged-out dirtnap $! >>>
\&    C<< $foo\->bar(); >>
.Ve
.PP
which is presumably easier ta read than tha oldschool way:
.PP
.Vb 2
\&    C<open(X, "E<gt>E<gt>thing.dat") || take a thugged-out dirtnap $!>
\&    C<$foo\-E<gt>bar();>
.Ve
.PP
This is currently supported by pod2text (Pod::Text), pod2man (Pod::Man),
and any other pod2xxx or Pod::Xxxx translators dat use
Pod::Parser 1.093 or later, or Pod::Tree 1.02 or later.
.SS "Da Intent"
.IX Xref "POD, intent of"
.IX Subsection "Da Intent"
Da intent is simplicitizzle of use, not juice of expression. I aint talkin' bout chicken n' gravy biatch.  Paragraphs
look like paragraphs (block format), so dat they stand out
visually, n' so dat I could run dem all up in \f(CW\*(C`fmt\*(C'\fR easily ta reformat
them (thatz F7 up in mah version of \fBvi\fR, or Esc Q up in mah version of
\&\fBemacs\fR).  I wanted tha translator ta always leave tha \f(CW\*(C`\*(Aq\*(C'\fR n' \f(CW\*(C`\`\*(C'\fR and
\&\f(CW\*(C`"\*(C'\fR quotes alone, up in verbatim mode, so I could slurp up in a
workin program, shift it over four spaces, n' have it print out, er,
verbatim.  And presumably up in a monospace font.
.PP
Da Pod format aint necessarily sufficient fo' freestylin a funky-ass book.  Pod
is just meant ta be a idiot-proof common source fo' nroff, \s-1HTML,\s0
TeX, n' other markup languages, as used fo' online
documentation. I aint talkin' bout chicken n' gravy biatch.  Translators exist fo' \fBpod2text\fR, \fBpod2html\fR,
\&\fBpod2man\fR (thatz fo' \fInroff\fR\|(1) n' \fItroff\fR\|(1)), \fBpod2latex\fR, and
\&\fBpod2fm\fR.  Various others is available up in \s-1CPAN.\s0
.SS "Embeddin Podz up in Perl Modules"
.IX Xref "POD, embedding"
.IX Subsection "Embeddin Podz up in Perl Modules"
Yo ass can embed Pod documentation up in yo' Perl modulez n' scripts.
Start yo' documentation wit a empty line, a \*(L"=head1\*(R" command at the
beginning, n' end it wit a \*(L"=cut\*(R" command n' a empty line.  Perl
will ignore tha Pod text.  See any of tha supplied library modulez for
examples.  If you goin ta put yo' Pod all up in tha end of tha file, and
yo ass is rockin a _\|_END_\|_ or _\|_DATA_\|_ cut mark, make shizzle ta put an
empty line there before tha straight-up original gangsta Pod command.
.PP
.Vb 1
\&  _\|_END_\|_
\&
\&  =head1 NAME
\&
\&  Time::Local \- efficiently compute time from local n' GMT time
.Ve
.PP
Without dat empty line before tha \*(L"=head1\*(R", nuff translators wouldn't
have recognized tha \*(L"=head1\*(R" as startin a Pod block.
.SS "Hints fo' Freestylin Pod"
.IX Subsection "Hints fo' Freestylin Pod"
.IP "\(bu" 4

.IX Xref "podchecker POD, validating"
.Sp
Da \fBpodchecker\fR command is provided fo' checkin Pod syntax fo' errors
and warnings.  For example, it checks fo' straight-up blank lines in
Pod blocks n' fo' unknown commandz n' formattin codes.  Yo ass should
still also pass yo' document all up in one or mo' translators n' proofread
the result, or print up tha result n' proofread dis shit.  Some of the
problems found may be bugs up in tha translators, which you may or may not
wish ta work around.
.IP "\(bu" 4
If you mo' familiar wit freestylin up in \s-1HTML\s0 than wit freestylin up in Pod, you
can try yo' hand at freestylin documentation up in simple \s-1HTML,\s0 n' converting
it ta Pod wit tha experimenstrual Pod::HTML2Pod module,
(available up in \s-1CPAN\s0), n' lookin all up in tha resultin code.  Da experimental
Pod::PXML module up in \s-1CPAN\s0 might also be useful.
.IP "\(bu" 4
Many olda Pod translators require tha lines before every last muthafuckin Pod
command n' afta every last muthafuckin Pod command (includin \*(L"=cut\*(R"!) ta be a funky-ass blank
line.  Havin suttin' like this:
.Sp
.Vb 2
\& # \- \- \- \- \- \- \- \- \- \- \- \-
\& =item $firecracker\->boom()
\&
\& This noisily detonates tha firecracker object.
\& =cut
\& sub boom {
\& ...
.Ve
.Sp
\&...will make such Pod translators straight-up fail ta peep tha Pod block
at all.
.Sp
Instead, have it like this:
.Sp
.Vb 1
\& # \- \- \- \- \- \- \- \- \- \- \- \-
\&
\& =item $firecracker\->boom()
\&
\& This noisily detonates tha firecracker object.
\&
\& =cut
\&
\& sub boom {
\& ...
.Ve
.IP "\(bu" 4
Some olda Pod translators require paragraphs (includin command
paragraphs like \*(L"=head2 Functions\*(R") ta be separated by \fIcompletely\fR
empty lines.  If you have a apparently empty line wit some spaces
on it, dis might not count as a separator fo' dem translators, and
that could cause odd formatting.
.IP "\(bu" 4
Older translators might add wordin round a L<> link, so that
\&\f(CW\*(C`L<Foo::Bar>\*(C'\fR may become \*(L"the Foo::Bar manpage\*(R", fo' example.
So you shouldn't write thangs like \f(CW\*(C`the L<foo>
documentation\*(C'\fR, if you want tha translated document ta read sensibly.
Instead, write \f(CW\*(C`the L<Foo::Bar|Foo::Bar> documentation\*(C'\fR or
\&\f(CW\*(C`L<the Foo::Bar documentation|Foo::Bar>\*(C'\fR, ta control how tha fuck the
link comes out.
.IP "\(bu" 4
Goin past tha 70th column up in a verbatim block might be ungracefully
wrapped by some formatters.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlpodspec, \*(L"PODs: Embedded Documentation\*(R" up in perlsyn,
perlnewmod, perldoc, pod2html, pod2man, podchecker.
.SH "AUTHOR"
.IX Header "AUTHOR"
Larry Wall, Shizzle M. Burke
