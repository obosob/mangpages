.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLSOLARIS 1"
.TH PERLSOLARIS 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlsolaris \- Perl version 5 on Solaris systems
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document raps bout various featurez of Sunz Solaris operatin system
that will affect how tha fuck Perl version 5 (hereafta just perl) is
compiled and/or runs.  Some thangs relatin ta tha olda SunOS 4.x are
also discussed, though they may be outta date.
.PP
For da most thugged-out part, every last muthafuckin thang should just work.
.PP
Startin wit Solaris 8, perl5.00503 (or higher) is supplied wit the
operatin system, so you might not even need ta build a newer version
of perl at all.  Da Sun-supplied version is installed up in /usr/perl5
with \fI/usr/bin/perl\fR pointin ta \fI/usr/perl5/bin/perl\fR.  Do not disturb
that installation unless you straight-up know what tha fuck yo ass is bustin.  If you
remove tha perl supplied wit tha \s-1OS,\s0 yo big-ass booty is ghon render some bits of
your system inoperable.  If you wish ta install a newer version of perl,
install it under a gangbangin' finger-lickin' different prefix from /usr/perl5.  Common prefixes
to use is /usr/local n' /opt/perl.
.PP
Yo ass may wish ta put yo' version of perl up in tha \s-1PATH\s0 of all playas by
changin tha link \fI/usr/bin/perl\fR.  This is probably \s-1OK,\s0 as most perl
scripts shipped wit Solaris use a explicit path.  (There is a gangbangin' few
exceptions, like fuckin \fI/usr/bin/rpm2cpio\fR n' \fI/etc/rcm/scripts/README\fR yo, but
these is also sufficiently generic dat tha actual version of perl
probably don't matta too much.)
.PP
Solaris ships wit a range of Solaris-specific modules.  If you chizzle
to install yo' own version of perl yo big-ass booty is ghon find tha source of nuff of
these modulez be available on \s-1CPAN\s0 under tha Sun::Solaris:: namespace.
.PP
Solaris may include two versionz of perl, e.g. Right back up in yo muthafuckin ass. Solaris 9 includes
both 5.005_03 n' 5.6.1.  This is ta provide stabilitizzle across Solaris
releases, up in cases where a lata perl version has incompatibilities
with tha version included up in tha precedin Solaris release.  The
default perl version will always be da most thugged-out recent, n' up in general
the oldschool version will only be retained fo' one Solaris release.  Note
also dat tha default perl will \s-1NOT\s0 be configured ta search fo' modules
in tha olda version, again n' again n' again cuz of compatibility/stabilitizzle concerns.
As a cold-ass lil consequence if you upgrade Solaris, you gonna git to
rebuild/reinstall any additionizzle \s-1CPAN\s0 modulez dat you installed for
the previous Solaris version. I aint talkin' bout chicken n' gravy biatch.  See tha \s-1CPAN\s0 manpage under 'autobundle'
for a quick way of bustin all dis bullshit.
.PP
As a interim measure, you may either chizzle tha #! line of your
scripts ta specifically refer ta tha oldschool perl version, e.g. on
Solaris 9 use #!/usr/perl5/5.00503/bin/perl ta use tha perl version
that was tha default fo' Solaris 8, or if you gotz a big-ass number of
scripts it may be mo' convenient ta make tha oldschool version of perl the
default on yo' system.  Yo ass can do dis by changin tha appropriate
symlinks under /usr/perl5 as bigs up (example fo' Solaris 9):
.PP
.Vb 7
\& # cd /usr/perl5
\& # rm bin playa pod
\& # ln \-s ./5.00503/bin
\& # ln \-s ./5.00503/man
\& # ln \-s ./5.00503/lib/pod
\& # rm /usr/bin/perl
\& # ln \-s ../perl5/5.00503/bin/perl /usr/bin/perl
.Ve
.PP
In both cases dis should only be considered ta be a temporary
measure \- you should upgrade ta tha lata version of perl as soon as
is practicable.
.PP
Note also dat tha perl command-line utilitizzles (e.g. perldoc) n' any
that is added by modulez dat you install is ghon be under
/usr/perl5/bin, so dat directory should be added ta yo' \s-1PATH.\s0
.SS "Solaris Version Numbers."
.IX Subsection "Solaris Version Numbers."
For consistency wit common usage, perlz Configure script performs
some minor manipulations on tha operatin system name n' version
number as reported by uname.  Herez a partial translation table:
.PP
.Vb 7
\&          Sun:                      perl\*(Aqs Configure:
\& uname    uname \-r   Name           osname     osvers
\& SunOS    4.1.3     Solaris 1.1     sunos      4.1.3
\& SunOS    5.6       Solaris 2.6     solaris    2.6
\& SunOS    5.8       Solaris 8       solaris    2.8
\& SunOS    5.9       Solaris 9       solaris    2.9
\& SunOS    5.10      Solaris 10      solaris    2.10
.Ve
.PP
Da complete table can be found up in tha Sun Managers' \s-1FAQ
\&\s0<ftp://ftp.cs.toronto.edu/pub/jdd/sunmanagers/faq> under
\&\*(L"9.1) Which Sun models run which versionz of SunOS?\*(R".
.SH "RESOURCES"
.IX Header "RESOURCES"
There is many, nuff sources fo' Solaris shiznit. I aint talkin' bout chicken n' gravy biatch.  A few of the
important ones fo' perl:
.IP "Solaris \s-1FAQ\s0" 4
.IX Item "Solaris FAQUIZZY"
Da Solaris \s-1FAQ\s0 be available at
<http://www.science.uva.nl/pub/solaris/solaris2.html>.
.Sp
Da Sun Managers' \s-1FAQ\s0 be available at
<ftp://ftp.cs.toronto.edu/pub/jdd/sunmanagers/faq>
.IP "Precompiled Binaries" 4
.IX Item "Precompiled Binaries"
Precompiled binaries, links ta nuff cribs, n' much, much mo' are
available at <http://www.sunfreeware.com/> and
<http://www.blastwave.org/>.
.IP "Solaris Documentation" 4
.IX Item "Solaris Documentation"
All Solaris documentation be available on-line at <http://docs.sun.com/>.
.SH "SETTING UP"
.IX Header "SETTING UP"
.SS "File Extraction Problems on Solaris."
.IX Subsection "File Extraction Problems on Solaris."
Be shizzle ta bust a tar program compiled under Solaris (not SunOS 4.x)
to extract tha perl\-5.x.x.tar.gz file.  Do not use \s-1GNU\s0 tar compiled
for SunOS4 on Solaris.  (\s-1GNU\s0 tar compiled fo' Solaris should be fine.)
When you run SunOS4 binaries on Solaris, tha run-time system magically
altas pathnames matchin m#lib/locale# so dat when tar tries ta create
lib/locale.pm, a gangbangin' file named lib/oldlocale.pm gets pimped instead.
If you found dis lyrics too late n' used a SunOS4\-compiled tar
anyway, you must find tha incorrectly renamed file n' move it back
to lib/locale.pm.
.SS "Compila n' Related Tools on Solaris."
.IX Subsection "Compila n' Related Tools on Solaris."
Yo ass must use a \s-1ANSI C\s0 compila ta build perl.  Perl can be compiled
with either Sunz add-on C compila or wit gcc.  Da C compila that
shipped wit SunOS4 aint gonna do.
.PP
\fIInclude /usr/ccs/bin/ up in yo' \s-1PATH.\s0\fR
.IX Subsection "Include /usr/ccs/bin/ up in yo' PATH."
.PP
Several tools needed ta build perl is located up in /usr/ccs/bin/:  ar,
as, ld, n' make.  Make shizzle dat /usr/ccs/bin/ is up in yo' \s-1PATH.\s0
.PP
On all tha busted out versionz of Solaris (8, 9 n' 10) you need ta make shizzle tha followin packages is installed (this info is extracted from tha Solaris \s-1FAQ\s0):
.PP
for tools (sccs, lex, yacc, make, nm, truss, ld, as): SUNWbtool,
SUNWsprot, SUNWtoo
.PP
for libraries & headers: SUNWhea, SUNWarc, SUNWlibm, SUNWlibms, SUNWdfbh,
SUNWcg6h, SUNWxwinc
.PP
Additionaly, on Solaris 8 n' 9 you also need:
.PP
for 64 bit pimpment: SUNWarcx, SUNWbtoox, SUNWdplx, SUNWscpux,
SUNWsprox, SUNWtoox, SUNWlmsx, SUNWlmx, SUNWlibCx
.PP
And only on Solaris 8 you also need:
.PP
for libraries & headers: SUNWolinc
.PP
If yo ass is up in doubt which package gotz nuff a gangbangin' file yo ass is missing,
try ta find a installation dat has dat file. Then do a
.PP
.Vb 1
\& $ grep /my/missing/file /var/sadm/install/contents
.Ve
.PP
This will display a line like this:
.PP
/usr/include/sys/errno.h f none 0644 root bin 7471 37605 956241356 SUNWhea
.PP
Da last item listed (SUNWhea up in dis example) is tha package you need.
.PP
\fIAvoid /usr/ucb/cc.\fR
.IX Subsection "Avoid /usr/ucb/cc."
.PP
Yo ass don't need ta have /usr/ucb/ up in yo' \s-1PATH\s0 ta build perl.  If you
want /usr/ucb/ up in yo' \s-1PATH\s0 anyway, make shizzle dat /usr/ucb/ is \s-1NOT\s0
in yo' \s-1PATH\s0 before tha directory containin tha right C compiler.
.PP
\fISunz C Compiler\fR
.IX Subsection "Sunz C Compiler"
.PP
If you use Sunz C compiler, make shizzle tha erect directory
(usually /opt/SUNWspro/bin/) is up in yo' \s-1PATH \s0(before /usr/ucb/).
.PP
\fI\s-1GCC\s0\fR
.IX Subsection "GCC"
.PP
If you use gcc, make shizzle yo' installation is recent n' complete.
perl versions since 5.6.0 build fine wit gcc > 2.8.1 on Solaris >=
2.6.
.PP
Yo ass must Configure perl with
.PP
.Vb 1
\& $ sh Configure \-Dcc=gcc
.Ve
.PP
If you don't, you may experience strange build errors.
.PP
If you have updated yo' Solaris version, you may also gotta update
your gcc.  For example, if yo ass is hustlin Solaris 2.6 n' yo' gcc is
installed under /usr/local, check up in /usr/local/lib/gcc\-lib n' make
sure you have tha appropriate directory, sparc\-sun\-solaris2.6/ or
i386\-pc\-solaris2.6/.  If gccs directory is fo' a gangbangin' finger-lickin' different version of
Solaris than yo ass is hustlin, then yo big-ass booty is ghon need ta rebuild gcc for
your freshly smoked up version of Solaris.
.PP
Yo ass can git a precompiled version of gcc from
<http://www.sunfreeware.com/> or <http://www.blastwave.org/>. Make
sure you pick up tha package fo' yo' Solaris release.
.PP
If you wish ta use gcc ta build add-on modulez fo' use wit tha perl
shipped wit Solaris, you should use tha Solaris::PerlGcc module
which be available from \s-1CPAN. \s0 Da perl shipped wit Solaris
is configured n' built wit tha Sun compilers, n' tha compiler
configuration shiznit stored up in Config.pm is therefore only
relevant ta tha Sun compilers.  Da Solaris:PerlGcc module gotz nuff a
replacement Config.pm dat is erect fo' gcc \- peep tha module for
details.
.PP
\fI\s-1GNU\s0 as n' \s-1GNU\s0 ld\fR
.IX Subsection "GNU as n' GNU ld"
.PP
Da followin shiznit applies ta gcc version 2.  Volunteers to
update it as appropriately fo' gcc version 3 would be appreciated.
.PP
Da versionz of as n' ld supplied wit Solaris work fine fo' building
perl.  There is normally no need ta install tha \s-1GNU\s0 versions to
compile perl.
.PP
If you decizzle ta ignore dis lyrics n' use tha \s-1GNU\s0 versions anyway,
then be shizzle dat they is relatively recent.  Versions newer than 2.7
are apparently freshly smoked up enough cause I gots dem finger-lickin' chickens wit tha siz-auce.  Older versions may have shiznit with
dynamic loading.
.PP
If you wish ta use \s-1GNU\s0 ld, then you need ta pass it tha \-Wl,\-E flag.
Da hints/solaris_2.sh file tries ta do dis automatically by setting
the followin Configure variables:
.PP
.Vb 2
\& ccdlflags="$ccdlflags \-Wl,\-E"
\& lddlflags="$lddlflags \-Wl,\-E \-G"
.Ve
.PP
But fuck dat shiznit yo, tha word on tha street is dat over tha years, chizzlez up in gcc, \s-1GNU\s0 ld, n' Solaris ld have made
it hard as fuck ta automatically detect which ld ultimately gets called.
Yo ass may gotta manually edit config.sh n' add tha \-Wl,\-E flags
yo ass, or else run Configure interactively n' add tha flags at the
appropriate prompts.
.PP
If yo' gcc is configured ta use \s-1GNU\s0 as n' ld but you wanna use the
Solaris ones instead ta build perl, then you gonna need ta add
\&\-B/usr/ccs/bin/ ta tha gcc command line.  One convenient way ta do
that is with
.PP
.Vb 1
\& $ sh Configure \-Dcc=\*(Aqgcc \-B/usr/ccs/bin/\*(Aq
.Ve
.PP
Note dat tha trailin slash is required. Y'all KNOW dat shit, muthafucka!  This will result up in some
harmless warnings as Configure is run:
.PP
.Vb 1
\& gcc: file path prefix \`/usr/ccs/bin/\*(Aq never used
.Ve
.PP
These lyrics may safely be ignored.
(Note dat fo' a SunOS4 system, you must use \-B/bin/ instead.)
.PP
Alternatively, you can use tha \s-1GCC_EXEC_PREFIX\s0 environment variable to
ensure dat Sunz as n' ld is used. Y'all KNOW dat shit, muthafucka!  Consult yo' gcc documentation
for further shiznit on tha \-B option n' tha \s-1GCC_EXEC_PREFIX\s0 variable.
.PP
\fISun n' \s-1GNU\s0 make\fR
.IX Subsection "Sun n' GNU make"
.PP
Da make under /usr/ccs/bin works fine fo' buildin perl.  If you
have tha Sun C compilers, yo big-ass booty is ghon also gotz a parallel version of
make (dmake).  This works fine ta build perl yo, but can sometimes cause
problems when hustlin 'make test' cuz of underspecified dependencies
between tha different test harnizz files.  Da same problem can also
affect tha buildin of some add-on modules, so up in dem cases either
specify '\-m serial' on tha dmake command line, or use
/usr/ccs/bin/make instead. Y'all KNOW dat shit, muthafucka!  If you wish ta use \s-1GNU\s0 make, be shizzle that
the set-group-id bit aint set.  If it is, then arrange yo' \s-1PATH\s0 so
that /usr/ccs/bin/make is before \s-1GNU\s0 make or else have tha system
administrator disable tha set-group-id bit on \s-1GNU\s0 make.
.PP
\fIAvoid libucb.\fR
.IX Subsection "Avoid libucb."
.PP
Solaris serves up some BSD-compatibilitizzle functions up in /usr/ucblib/libucb.a.
Perl aint gonna build n' run erectly if linked against \-lucb since it
gotz nuff routines dat is incompatible wit tha standard Solaris libc.
Normally dis aint a problem since tha solaris hints file prevents
Configure from even lookin up in /usr/ucblib fo' libraries, n' also
explicitly omits \-lucb.
.SS "Environment fo' Compilin perl on Solaris"
.IX Subsection "Environment fo' Compilin perl on Solaris"
\fI\s-1PATH\s0\fR
.IX Subsection "PATH"
.PP
Make shizzle yo' \s-1PATH\s0 includes tha compila (/opt/SUNWspro/bin/ if you is
usin Sunz compiler) as well as /usr/ccs/bin/ ta pick up tha other
development tools (like fuckin make, ar, as, n' ld).  Make shizzle yo' path
either don't include /usr/ucb or dat it includes it afta the
compila n' compila tools n' other standard Solaris directories.
Yo ass definitely don't want /usr/ucb/cc.
.PP
\fI\s-1LD_LIBRARY_PATH\s0\fR
.IX Subsection "LD_LIBRARY_PATH"
.PP
If you have tha \s-1LD_LIBRARY_PATH\s0 environment variable set, be shizzle that
it do \s-1NOT\s0 include /lib or /usr/lib.  If yo big-ass booty is ghon be building
extensions dat call third-party shared libraries (e.g. Berkeley \s-1DB\s0)
then make shizzle dat yo' \s-1LD_LIBRARY_PATH\s0 environment variable includes
the directory wit dat library (e.g. /usr/local/lib).
.PP
If you git a error message
.PP
.Vb 1
\& dlopen: stub erection failed
.Ve
.PP
it is probably cuz yo' \s-1LD_LIBRARY_PATH\s0 environment variable
includes a gangbangin' finger-lickin' directory which be a symlink ta /usr/lib (like fuckin /lib).
Da reason dis causes a problem is like subtle.  Da file
libdl.so.1.0 straight-up *only* gotz nuff functions which generate 'stub
interception failed' errors muthafucka!  Da runtime linker intercepts links to
\&\*(L"/usr/lib/libdl.so.1.0\*(R" n' links up in internal implementationz of them
functions instead. Y'all KNOW dat shit, muthafucka!  [Thanks ta Slim Tim Bunce fo' dis explanation.]
.SH "RUN CONFIGURE."
.IX Header "RUN CONFIGURE."
See tha \s-1INSTALL\s0 file fo' general shiznit regardin Configure.
Only Solaris-specific thangs is discussed here, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  Usually, the
defaults should be fine.
.SS "64\-bit perl on Solaris."
.IX Subsection "64-bit perl on Solaris."
See tha \s-1INSTALL\s0 file fo' general shiznit regardin 64\-bit compiles.
In general, tha defaults should be fine fo' most people.
.PP
By default, perl\-5.6.0 (or later) is compiled as a 32\-bit application
with largefile n' long-long support.
.PP
\fIGeneral 32\-bit vs. 64\-bit issues.\fR
.IX Subsection "General 32-bit vs. 64-bit issues."
.PP
Solaris 7 n' above will run up in either 32 bit or 64 bit mode on \s-1SPARC\s0
CPUs, via a reboot. Yo ass can build 64 bit apps whilst hustlin 32 bit
mode n' vice-versa. 32 bit apps will run under Solaris hustlin in
either 32 or 64 bit mode.  64 bit apps require Solaris ta be hustlin
64 bit mode.
.PP
Existin 32 bit apps is properly known as \s-1LP32,\s0 i.e. Longs and
Pointas is 32 bit.  64\-bit apps is mo' properly known as \s-1LP64.\s0
Da discriminatin feature of a \s-1LP64\s0 bit app is its mobilitizzle ta utilise a
64\-bit address space.  It be perfectly possible ta git a \s-1LP32\s0 bit app
that supports both 64\-bit integers (long long) n' largefilez (> 2GB),
and dis is tha default fo' perl\-5.6.0.
.PP
For a mo' complete explanation of 64\-bit issues, peep the
\&\*(L"Solaris 64\-bit Developerz Guide\*(R" at <http://docs.sun.com/>
.PP
Yo ass can detect tha \s-1OS\s0 mode rockin \*(L"isainfo \-v\*(R", e.g.
.PP
.Vb 3
\& $ isainfo \-v   # Ultra 30 up in 64 bit mode
\& 64\-bit sparcv9 applications
\& 32\-bit sparc applications
.Ve
.PP
By default, perl is ghon be compiled as a 32\-bit application. I aint talkin' bout chicken n' gravy biatch.  Unless
you wanna allocate mo' than ~ 4GB of memory inside perl, or unless
you need mo' than 255 open file descriptors, you probably don't need
perl ta be a 64\-bit app.
.PP
\fIBig-Ass File Support\fR
.IX Subsection "Big-Ass File Support"
.PP
For Solaris 2.6 n' onwards, there be two different ways fo' 32\-bit
applications ta manipulate big-ass filez (filez whose size is > 2GByte).
(A 64\-bit application automatically has largefile support built in
by default.)
.PP
First is tha \*(L"transitionizzle compilation environment\*(R", busted lyrics bout in
\&\fIlfcompile64\fR\|(5).  Accordin ta tha playa page,
.PP
.Vb 7
\& Da transitionizzle compilation  environment  exports  all  the
\& explicit 64\-bit functions (xxx64()) n' types up in addizzle to
\& all tha regular functions (xxx()) n' types. Both xxx()  and
\& xxx64()  functions  is  available ta tha program source.  A
\& 32\-bit application must use tha xxx64() functions up in  order
\& ta  access  big-ass  files.  See tha lf64(5) manual page fo' a
\& complete listin of tha 64\-bit transitionizzle intercourses.
.Ve
.PP
Da transitionizzle compilation environment is obtained wit the
followin compila n' linker flags:
.PP
.Vb 3
\& getconf LFS64_CFLAGS        \-D_LARGEFILE64_SOURCE
\& getconf LFS64_LDFLAG        # not a god damn thang special needed
\& getconf LFS64_LIBS          # not a god damn thang special needed
.Ve
.PP
Second is tha \*(L"pimpin' file compilation environment\*(R", busted lyrics bout in
\&\fIlfcompile\fR\|(5).  Accordin ta tha playa page,
.PP
.Vb 5
\& Each intercourse named xxx() dat need ta access 64\-bit entities
\& ta  access  big-ass  filez maps ta a xxx64() call up in the
\& resultin binary fo' realz. All relevant data types is defined ta  be
\& of erect size (for example, off_t has a typedef definition
\& fo' a 64\-bit entity).
\&
\& An application compiled up in dis environment be able  ta  use
\& tha  xxx()  source intercourses ta access both big-ass n' small
\& files, rather than havin ta explicitly utilize tha  transitional
\& xxx64()  intercourse  calls ta access big-ass files.
.Ve
.PP
Two exceptions is \fIfseek()\fR n' \fIftell()\fR.  32\-bit applications should
use fseeko(3C) n' ftello(3C).  These will git automatically mapped
to \fIfseeko64()\fR n' \fIftello64()\fR.
.PP
Da big-ass file compilation environment is obtained with
.PP
.Vb 3
\& getconf LFS_CFLAGS      \-D_LARGEFILE_SOURCE \-D_FILE_OFFSET_BITS=64
\& getconf LFS_LDFLAGS     # not a god damn thang special needed
\& getconf LFS_LIBS        # not a god damn thang special needed
.Ve
.PP
By default, perl uses tha big-ass file compilation environment and
relies on Solaris ta do tha underlyin mappin of intercourses.
.PP
\fIBuildin a \s-1LP64\s0 perl\fR
.IX Subsection "Buildin a LP64 perl"
.PP
To compile a 64\-bit application on a UltraSparc wit a recent Sun Compiler,
you need ta use tha flag \*(L"\-xarch=v9\*(R".  \fIgetconf\fR\|(1) will rap  this, e.g.
.PP
.Vb 10
\& $ getconf \-a | grep v9
\& XBS5_LP64_OFF64_CFLAGS:         \-xarch=v9
\& XBS5_LP64_OFF64_LDFLAGS:        \-xarch=v9
\& XBS5_LP64_OFF64_LINTFLAGS:      \-xarch=v9
\& XBS5_LPBIG_OFSTDG_CFLAGS:       \-xarch=v9
\& XBS5_LPBIG_OFSTDG_LDFLAGS:      \-xarch=v9
\& XBS5_LPBIG_OFSTDG_LINTFLAGS:    \-xarch=v9
\& _XBS5_LP64_OFF64_CFLAGS:        \-xarch=v9
\& _XBS5_LP64_OFF64_LDFLAGS:       \-xarch=v9
\& _XBS5_LP64_OFF64_LINTFLAGS:     \-xarch=v9
\& _XBS5_LPBIG_OFSTDG_CFLAGS:      \-xarch=v9
\& _XBS5_LPBIG_OFSTDG_LDFLAGS:     \-xarch=v9
\& _XBS5_LPBIG_OFSTDG_LINTFLAGS:   \-xarch=v9
.Ve
.PP
This flag is supported up in Sun WorkShop Compilaz 5.0 n' onwards
(now marketed under tha name Forte) when used on Solaris 7 or lata on
UltraSparc systems.
.PP
If yo ass is rockin gcc, you would need ta use \-mcpu=v9 \-m64 instead. Y'all KNOW dat shit, muthafucka!  This
option aint yet supported az of gcc 2.95.2; from install/SPECIFIC
in dat release:
.PP
.Vb 5
\& GCC version 2.95 aint able ta compile code erectly fo' sparc64
\& targets, n' you can put dat on yo' toast. Userz of tha Linux kernel, at least, can use tha sparc32
\& program ta start up a freshly smoked up shell invocation wit a environment that
\& causes configure ta recognize (via uname \-a) tha system as sparc\-*\-*
\& instead.
.Ve
.PP
All dis should be handled automatically by tha hints file, if
requested.
.PP
\fILong Doubles.\fR
.IX Subsection "Long Doubles."
.PP
Az of 5.8.1, long doublez is hustlin if you use tha Sun compilers
(needed fo' additionizzle math routines not included up in libm).
.SS "Threadz up in perl on Solaris."
.IX Subsection "Threadz up in perl on Solaris."
It be possible ta build a threaded version of perl on Solaris.  Da entire
perl thread implementation is still experimental, however, so beware.
.SS "Malloc Issues wit perl on Solaris."
.IX Subsection "Malloc Issues wit perl on Solaris."
Startin from perl 5.7.1 perl uses tha Solaris malloc, since tha perl
malloc breaks when dealin wit mo' than 2GB of memory, n' tha Solaris
malloc also seems ta be faster.
.PP
If you fo' some reason (like fuckin binary backward compatibility) straight-up
need ta use perlz malloc, you can rebuild perl from tha sources
and Configure tha build with
.PP
.Vb 1
\& $ sh Configure \-Dusemymalloc
.Ve
.PP
Yo ass should not use perlz malloc if yo ass is buildin wit gcc.  There
are reportz of core dumps, especially up in tha \s-1PDL\s0 module.  Da problem
appears ta go away under \-DDEBUGGING, so it has been hard as fuck to
track down. I aint talkin' bout chicken n' gravy biatch.  Sunz compila appears ta be aiiight wit or without perl's
malloc. [\s-1XXX\s0 further investigation is needed here.]
.SH "MAKE PROBLEMS."
.IX Header "MAKE PROBLEMS."
.IP "Dynamic Loadin Problems With \s-1GNU\s0 as n' \s-1GNU\s0 ld" 4
.IX Item "Dynamic Loadin Problems With GNU as n' GNU ld"
If you have problems wit dynamic loadin rockin gcc on SunOS or
Solaris, n' yo ass is rockin \s-1GNU\s0 as n' \s-1GNU\s0 ld, peep tha section
\&\*(L"\s-1GNU\s0 as n' \s-1GNU\s0 ld\*(R" above.
.IP "ld.so.1: ./perl: fatal: relocation error:" 4
.IX Item "ld.so.1: ./perl: fatal: relocation error:"
If you git dis message on SunOS or Solaris, n' you rockin gcc,
itz probably tha \s-1GNU\s0 as or \s-1GNU\s0 ld problem up in tha previous item
\&\*(L"\s-1GNU\s0 as n' \s-1GNU\s0 ld\*(R".
.IP "dlopen: stub erection failed" 4
.IX Item "dlopen: stub erection failed"
Da primary cause of tha 'dlopen: stub erection failed' message is
that tha \s-1LD_LIBRARY_PATH\s0 environment variable includes a gangbangin' finger-lickin' directory
which be a symlink ta /usr/lib (like fuckin /lib).  See
\&\*(L"\s-1LD_LIBRARY_PATH\*(R"\s0 above.
.ie n .IP "#error ""No \s-1DATAMODEL_NATIVE\s0 specified""" 4
.el .IP "#error ``No \s-1DATAMODEL_NATIVE\s0 specified''" 4
.IX Item "#error No DATAMODEL_NATIVE specified"
This be a cold-ass lil common error when tryin ta build perl on Solaris 2.6 wit a
gcc installation from Solaris 2.5 or 2.5.1.  Da Solaris header files
changed, so you need ta update yo' gcc installation. I aint talkin' bout chicken n' gravy biatch.  Yo ass can either
rerun tha fixincludes script from gcc or take tha opportunitizzle to
update yo' gcc installation.
.IP "sh: ar: not found" 4
.IX Item "sh: ar: not found"
This be a message from yo' shell spittin some lyrics ta you dat tha command 'ar'
was not found. Y'all KNOW dat shit, muthafucka!  Yo ass need ta check yo' \s-1PATH\s0 environment variable to
make shizzle dat it includes tha directory wit tha 'ar' command. Y'all KNOW dat shit, muthafucka!  This
is a cold-ass lil common problem on Solaris, where 'ar' is up in tha /usr/ccs/bin/
directory.
.SH "MAKE TEST"
.IX Header "MAKE TEST"
.SS "op/stat.t test 4 up in Solaris"
.IX Subsection "op/stat.t test 4 up in Solaris"
\&\fIop/stat.t\fR test 4 may fail if yo ass is on a tmpfz of some sort.
Buildin up in /tmp sometimes shows dis behavior. Shiiit, dis aint no joke.  The
test suite detects if yo ass is buildin up in /tmp yo, but it may not be able
to catch all tmpfs thangs.
.SS "nss_delete core dump from op/pwent or op/grent"
.IX Subsection "nss_delete core dump from op/pwent or op/grent"
See \*(L"nss_delete core dump from op/pwent or op/grent\*(R" up in perlhpux.
.SH "PREBUILT BINARIES OF PERL FOR SOLARIS."
.IX Header "PREBUILT BINARIES OF PERL FOR SOLARIS."
Yo ass can pick up prebuilt binaries fo' Solaris from
<http://www.sunfreeware.com/>, <http://www.blastwave.org>,
ActiveState <http://www.activestate.com/>, and
<http://www.perl.com/> under tha Binaries list all up in tha top of the
page.  There is probably other sources as well.  Please note that
these cribs is under tha control of they respectizzle ballers, not the
perl pimpers.
.SH "RUNTIME ISSUES FOR PERL ON SOLARIS."
.IX Header "RUNTIME ISSUES FOR PERL ON SOLARIS."
.SS "Limits on Numberz of Open Filez on Solaris."
.IX Subsection "Limits on Numberz of Open Filez on Solaris."
Da stdio(3C) manpage notes dat fo' \s-1LP32\s0 applications, only 255
filez may be opened rockin \fIfopen()\fR, n' only file descriptors 0
all up in 255 can be used up in a stream.  Since perl calls \fIopen()\fR and
then fdopen(3C) wit tha resultin file descriptor, perl is limited
to 255 simultaneous open files, even if \fIsysopen()\fR is used. Y'all KNOW dat shit, muthafucka!  If this
proves ta be a insurmountable problem, you can compile perl as a
\&\s-1LP64\s0 application, peep \*(L"Buildin a \s-1LP64\s0 perl\*(R" fo' details.  Note
also dat tha default resource limit fo' open file descriptors on
Solaris is 255, so yo big-ass booty is ghon gotta modify yo' ulimit or rctl
(Solaris 9 onwards) appropriately.
.SH "SOLARIS-SPECIFIC MODULES."
.IX Header "SOLARIS-SPECIFIC MODULES."
See tha modulez under tha Solaris:: n' Sun::Solaris namespaces on \s-1CPAN,\s0
see <http://www.cpan.org/modules/by\-module/Solaris/> and
<http://www.cpan.org/modules/by\-module/Sun/>.
.SH "SOLARIS-SPECIFIC PROBLEMS WITH MODULES."
.IX Header "SOLARIS-SPECIFIC PROBLEMS WITH MODULES."
.SS "Proc::ProcessTable on Solaris"
.IX Subsection "Proc::ProcessTable on Solaris"
Proc::ProcessTable do not compile on Solaris wit perl5.6.0 n' higher
if you have \s-1LARGEFILES\s0 defined. Y'all KNOW dat shit, muthafucka!  Since largefile support is the
default up in 5.6.0 n' later, you gotta take special steps ta use this
module.
.PP
Da problem is dat various structures visible via procfs use off_t,
and if you compile wit largefile support these chizzle from 32 bits to
64 bits, n' you can put dat on yo' toast.  Thus what tha fuck you git back from procfs don't match up with
the structures up in perl, resultin up in garbage.  See \fIproc\fR\|(4) fo' further
rap.
.PP
A fix fo' Proc::ProcessTable is ta edit Makefile to
explicitly remove tha largefile flags from tha ones MakeMaker picks up
from Config.pm.  This will result up in Proc::ProcessTable bein built
under tha erect environment.  Everythang should then be \s-1OK\s0 as long as
Proc::ProcessTable don't try ta share off_tz wit tha rest of perl,
or if it do they should be explicitly specified as off64_t.
.SS "BSD::Resource on Solaris"
.IX Subsection "BSD::Resource on Solaris"
BSD::Resource versions earlier than 1.09 do not compile on Solaris
with perl 5.6.0 n' higher, fo' tha same reasons as Proc::ProcessTable.
BSD::Resource versions startin from 1.09 gotz a workaround fo' tha problem.
.SS "Net::SSLeay on Solaris"
.IX Subsection "Net::SSLeay on Solaris"
Net::SSLeay requires a /dev/urandom ta be present. This thang is
available from Solaris 9 onwards.  For earlier Solaris versions you
can either git tha package SUNWski (packaged wit nuff muthafuckin Sun
software shizzle, fo' example tha Sun WebServer, which is part of
the Solaris Server Intranet Extension, or tha Sun Directory Skillz,
part of Solaris fo' ISPs) or downlizzle tha ANDIrand package from
<http://www.cosy.sbg.ac.at/~andi/>. If you use SUNWski, make a
symbolic link /dev/urandom pointin ta /dev/random.  For mo' details,
see Document \s-1ID27606\s0 entitled \*(L"Differin /dev/random support requirements
within Solaris[\s-1TM\s0] Operatin Environments\*(R", available at
<http://sunsolve.sun.com> .
.PP
It may be possible ta use tha Entropy Gatherin Daemon (written in
Perl!), available from <http://www.lothar.com/tech/crypto/>.
.SH "SunOS 4.x"
.IX Header "SunOS 4.x"
In SunOS 4.x you most probably wanna use tha SunOS ld, /usr/bin/ld,
since tha mo' recent versionz of \s-1GNU\s0 ld (like 2.13) do not seem to
work fo' buildin Perl no mo'.  When linkin tha extensions, the
\&\s-1GNU\s0 ld gets straight-up unaiiight n' spews a shitload of errors like this
.PP
.Vb 1
\&  ... relocation truncated ta fit: BASE13 ...
.Ve
.PP
and dies. Put ya muthafuckin choppers up if ya feel dis!  Therefore tha SunOS 4.1 hints file explicitly sets the
ld ta be \fI/usr/bin/ld\fR.
.PP
Az of Perl 5.8.1 tha dynamic loadin of libraries (DynaLoader, XSLoader)
also seems ta have become fucked up in in SunOS 4.x.  Therefore tha default
is ta build Perl statically.
.PP
Hustlin tha test suite up in SunOS 4.1 be a lil' bit tricky since the
\&\fIlib/Tie/File/t/09_gen_rs\fR test hangs (subtest #51, \s-1FWIW\s0) fo' some
unknown reason. I aint talkin' bout chicken n' gravy biatch.  Just stop tha test n' bust a cap up in dat particular Perl
process.
.PP
There is various other failures, dat az of SunOS 4.1.4 n' gcc 3.2.2
look a shitload like gcc bugs.  Many of tha failures happen up in tha Encode
tests, where fo' example when tha test expects \*(L"0\*(R" you git \*(L"&#48;\*(R"
which should afta a lil squintin look straight-up odd indeed.
Another example is earlier up in \fIt/run/fresh_perl\fR where \fIchr\fR\|(0xff) is
expected but tha test fails cuz tha result is \fIchr\fR\|(0xff).  Exactly.
.PP
This is tha \*(L"make test\*(R" result from tha holla'd combination:
.PP
.Vb 1
\&  Failed 27 test scripts outta 745, 96.38% aiiight.
.Ve
.PP
Hustlin tha \f(CW\*(C`harness\*(C'\fR is fucked up cuz of tha nuff failing
Unicode-related tests will output megabytez of failure lyrics,
but if one patiently waits, one gets these thangs up in dis biatch:
.PP
.Vb 10
\& Failed Test                     Stat Wstat Total Fail  Failed  List of Failed
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& ...
\& ../ext/Encode/t/at\-cn.t            4  1024    29    4  13.79%  14\-17
\& ../ext/Encode/t/at\-tw.t           10  2560    17   10  58.82%  2 4 6 8 10 12
\&                                                                14\-17
\& ../ext/Encode/t/enc_data.t        29  7424    ??   ??       %  ??
\& ../ext/Encode/t/enc_eucjp.t       29  7424    ??   ??       %  ??
\& ../ext/Encode/t/enc_module.t      29  7424    ??   ??       %  ??
\& ../ext/Encode/t/encoding.t        29  7424    ??   ??       %  ??
\& ../ext/Encode/t/grow.t            12  3072    24   12  50.00%  2 4 6 8 10 12 14
\&                                                                16 18 20 22 24
\&  Failed Test                     Stat Wstat Total Fail  Failed  List of Failed
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& ../ext/Encode/t/guess.t          255 65280    29   40 137.93%  10\-29
\& ../ext/Encode/t/jperl.t           29  7424    15   30 200.00%  1\-15
\& ../ext/Encode/t/mime\-header.t      2   512    10    2  20.00%  2\-3
\& ../ext/Encode/t/perlio.t          22  5632    38   22  57.89%  1\-4 9\-16 19\-20
\&                                                                23\-24 27\-32
\& ../ext/List/Util/t/shuffle.t       0   139    ??   ??       %  ??
\& ../ext/PerlIO/t/encoding.t                    14    1   7.14%  11
\& ../ext/PerlIO/t/fallback.t                     9    2  22.22%  3 5
\& ../ext/Socket/t/socketpair.t       0     2    45   70 155.56%  11\-45
\& ../lib/CPAN/t/vcmp.t                          30    1   3.33%  25
\& ../lib/Tie/File/t/09_gen_rs.t      0    15    ??   ??       %  ??
\& ../lib/Unicode/Collate/t/test.t              199   30  15.08%  7 26\-27 71\-75
\&                                                                81\-88 95 101
\&                                                                103\-104 106 108\-
\&                                                                109 122 124 161
\&                                                                169\-172
\& ../lib/sort.t                      0   139   119   26  21.85%  107\-119
\& op/alarm.t                                     4    1  25.00%  4
\& op/utfhash.t                                  97    1   1.03%  31
\& run/fresh_perl.t                              91    1   1.10%  32
\& uni/tr_7jis.t                                 ??   ??       %  ??
\& uni/tr_eucjp.t                    29  7424     6   12 200.00%  1\-6
\& uni/tr_sjis.t                     29  7424     6   12 200.00%  1\-6
\& 56 tests n' 467 subtests skipped.
\& Failed 27/811 test scripts, 96.67% aiiight. 1383/75399 subtests failed, 98.17% aiiight.
.Ve
.PP
Da \fIalarm()\fR test failure is caused by \fIsystem()\fR apparently blocking
\&\fIalarm()\fR.  That is probably a libc bug, n' given dat SunOS 4.x
has been end-of-lifed muthafuckin years ago, don't git freaky wit yo' breath fo' a gangbangin' fix.
In addizzle ta that, don't try anythang too Unicode-y, especially
with Encode, n' you should be fine up in SunOS 4.x.
.SH "AUTHOR"
.IX Header "AUTHOR"
Da original gangsta was freestyled by Andy Dougherty \fIdoughera@lafayette.edu\fR
drawin heavily on lyrics from Alan Burlison, Nick Ing-Simmons, Slim Tim Bunce,
and nuff other Solaris playas over tha years.
.PP
Please report any errors, thugged-out shit, or suggestions ta \fIperlbug@perl.org\fR.
