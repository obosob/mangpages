'\" t
.\"     Title: git-rebase
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-REBASE" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-rebase \- Forward\-port local commits ta tha updated upstream head
.SH "SYNOPSIS"
.sp
.nf
\fIgit rebase\fR [\-i | \-\-interactive] [options] [\-\-exec <cmd>] [\-\-onto <newbase>]
        [<upstream>] [<branch>]
\fIgit rebase\fR [\-i | \-\-interactive] [options] [\-\-exec <cmd>] [\-\-onto <newbase>]
        \-\-root [<branch>]
\fIgit rebase\fR \-\-continue | \-\-skip | \-\-abort | \-\-edit\-todo
.fi
.sp
.SH "DESCRIPTION"
.sp
If <branch> is specified, \fIgit rebase\fR will big-ass up a automatic git checkout <branch> before bustin anythang else\&. Otherwise it remains on tha current branch\&.
.sp
If <upstream> aint specified, tha upstream configured up in branch\&.<name>\&.remote n' branch\&.<name>\&.merge options is ghon be used; peep \fBgit-config\fR(1) fo' details\&. If yo ass is currently not on any branch or if tha current branch aint gots a cold-ass lil configured upstream, tha rebase will abort\&.
.sp
All chizzlez made by commits up in tha current branch but dat is not up in <upstream> is saved ta a temporary area\&. This is tha same ol' dirty set of commits dat would be shown by git log <upstream>\&.\&.HEAD (or git log HEAD, if \-\-root is specified)\&.
.sp
Da current branch is reset ta <upstream>, or <newbase> if tha \-\-onto option was supplied\&. This has tha exact same effect as git reset \-\-hard <upstream> (or <newbase>)\&. ORIG_HEAD is set ta point all up in tha tip of tha branch before tha reset\&.
.sp
Da commits dat was previously saved tha fuck into tha temporary area is then reapplied ta tha current branch, one by one, up in order\&. Note dat any commits up in HEAD which introduce tha same textual chizzlez as a cold-ass lil commit up in HEAD\&.\&.<upstream> is omitted (i\&.e\&., a patch already accepted upstream wit a gangbangin' finger-lickin' different commit message or timestamp is ghon be skipped)\&.
.sp
It be possible dat a merge failure will prevent dis process from bein straight-up automatic\&. Yo ass will gotta resolve any such merge failure n' run git rebase \-\-continue\& fo' realz. Another option is ta bypass tha commit dat caused tha merge failure wit git rebase \-\-skip\&. To check up tha original gangsta <branch> n' remove tha \&.git/rebase\-apply hustlin files, use tha command git rebase \-\-abort instead\&.
.sp
Assume tha followin history exists n' tha current branch is "topic":
.sp
.if n \{\
.RS 4
.\}
.nf
          A\-\-\-B\-\-\-C topic
         /
    D\-\-\-E\-\-\-F\-\-\-G master
.fi
.if n \{\
.RE
.\}
.sp
.sp
From dis point, tha result of either of tha followin commands:
.sp
.if n \{\
.RS 4
.\}
.nf
git rebase master
git rebase masta topic
.fi
.if n \{\
.RE
.\}
.sp
would be:
.sp
.if n \{\
.RS 4
.\}
.nf
                  A\(aq\-\-B\(aq\-\-C\(aq topic
                 /
    D\-\-\-E\-\-\-F\-\-\-G master
.fi
.if n \{\
.RE
.\}
.sp
.sp
\fBNOTE:\fR Da latta form is just a gangbangin' finger-lickin' dirty-ass short\-hand of git checkout topic followed by git rebase master\&. When rebase exits topic will remain tha checked\-out branch\&.
.sp
If tha upstream branch already gotz nuff a cold-ass lil chizzle you have made (e\&.g\&., cuz you mailed a patch which was applied upstream), then dat commit is ghon be skipped\&. For example, hustlin \(oqgit rebase master` on tha followin history (in which A\(cq n' A introduce tha same set of chizzlez yo, but have different committa shiznit):
.sp
.if n \{\
.RS 4
.\}
.nf
          A\-\-\-B\-\-\-C topic
         /
    D\-\-\-E\-\-\-A\(aq\-\-\-F master
.fi
.if n \{\
.RE
.\}
.sp
.sp
will result in:
.sp
.if n \{\
.RS 4
.\}
.nf
                   B\(aq\-\-\-C\(aq topic
                  /
    D\-\-\-E\-\-\-A\(aq\-\-\-F master
.fi
.if n \{\
.RE
.\}
.sp
.sp
Here is how tha fuck you would transplant a topic branch based on one branch ta another, ta pretend dat you forked tha topic branch from tha latta branch, rockin rebase \-\-onto\&.
.sp
First let\(cqs assume yo' \fItopic\fR is based on branch \fInext\fR\&. For example, a gangbangin' feature pimped up in \fItopic\fR dependz on some functionalitizzle which is found up in \fInext\fR\&.
.sp
.if n \{\
.RS 4
.\}
.nf
    o\-\-\-o\-\-\-o\-\-\-o\-\-\-o  master
         \e
          o\-\-\-o\-\-\-o\-\-\-o\-\-\-o  next
                           \e
                            o\-\-\-o\-\-\-o  topic
.fi
.if n \{\
.RE
.\}
.sp
.sp
Us thugs wanna make \fItopic\fR forked from branch \fImaster\fR; fo' example, cuz tha functionalitizzle on which \fItopic\fR dependz was merged tha fuck into tha mo' stable \fImaster\fR branch\&. Us thugs want our tree ta be lookin like this:
.sp
.if n \{\
.RS 4
.\}
.nf
    o\-\-\-o\-\-\-o\-\-\-o\-\-\-o  master
        |            \e
        |             o\(aq\-\-o\(aq\-\-o\(aq  topic
         \e
          o\-\-\-o\-\-\-o\-\-\-o\-\-\-o  next
.fi
.if n \{\
.RE
.\}
.sp
.sp
We can git dis rockin tha followin command:
.sp
.if n \{\
.RS 4
.\}
.nf
git rebase \-\-onto masta next topic
.fi
.if n \{\
.RE
.\}
.sp
Another example of \-\-onto option is ta rebase part of a funky-ass branch\&. If our crazy asses have tha followin thang:
.sp
.if n \{\
.RS 4
.\}
.nf
                            H\-\-\-I\-\-\-J topicB
                           /
                  E\-\-\-F\-\-\-G  topicA
                 /
    A\-\-\-B\-\-\-C\-\-\-D  master
.fi
.if n \{\
.RE
.\}
.sp
.sp
then tha command
.sp
.if n \{\
.RS 4
.\}
.nf
git rebase \-\-onto masta topicA topicB
.fi
.if n \{\
.RE
.\}
.sp
would result in:
.sp
.if n \{\
.RS 4
.\}
.nf
                 H\(aq\-\-I\(aq\-\-J\(aq  topicB
                /
                | E\-\-\-F\-\-\-G  topicA
                |/
    A\-\-\-B\-\-\-C\-\-\-D  master
.fi
.if n \{\
.RE
.\}
.sp
.sp
This is useful when topicB do not depend on topicA\&.
.sp
A range of commits could also be removed wit rebase\&. If our crazy asses have tha followin thang:
.sp
.if n \{\
.RS 4
.\}
.nf
    E\-\-\-F\-\-\-G\-\-\-H\-\-\-I\-\-\-J  topicA
.fi
.if n \{\
.RE
.\}
.sp
.sp
then tha command
.sp
.if n \{\
.RS 4
.\}
.nf
git rebase \-\-onto topicA~5 topicA~3 topicA
.fi
.if n \{\
.RE
.\}
.sp
would result up in tha removal of commits F n' G:
.sp
.if n \{\
.RS 4
.\}
.nf
    E\-\-\-H\(aq\-\-\-I\(aq\-\-\-J\(aq  topicA
.fi
.if n \{\
.RE
.\}
.sp
.sp
This is useful if F n' G was flawed up in some way, or should not be part of topicA\&. Note dat tha argument ta \-\-onto n' tha <upstream> parameta can be any valid commit\-ish\&.
.sp
In case of conflict, \fIgit rebase\fR will stop all up in tha straight-up original gangsta problematic commit n' leave conflict markers up in tha tree\&. Yo ass can use \fIgit diff\fR ta locate tha markers (<<<<<<) n' make edits ta resolve tha conflict\&. For each file you edit, you need ta tell Git dat tha conflict has been resolved, typically dis would be done with
.sp
.if n \{\
.RS 4
.\}
.nf
git add <filename>
.fi
.if n \{\
.RE
.\}
.sp
Afta resolvin tha conflict manually n' uppimpin tha index wit tha desired resolution, you can continue tha rebasin process with
.sp
.if n \{\
.RS 4
.\}
.nf
git rebase \-\-continue
.fi
.if n \{\
.RE
.\}
.sp
Alternatively, you can undo tha \fIgit rebase\fR with
.sp
.if n \{\
.RS 4
.\}
.nf
git rebase \-\-abort
.fi
.if n \{\
.RE
.\}
.SH "CONFIGURATION"
.PP
rebase\&.stat
.RS 4
Whether ta show a gangbangin' finger-lickin' diffstat of what tha fuck chizzled upstream since tha last rebase\&. False by default\&.
.RE
.PP
rebase\&.autosquash
.RS 4
If set ta legit enable
\fI\-\-autosquash\fR
option by default\&.
.RE
.PP
rebase\&.autostash
.RS 4
If set ta legit enable
\fI\-\-autostash\fR
option by default\&.
.RE
.SH "OPTIONS"
.PP
\-\-onto <newbase>
.RS 4
Startin point at which ta create tha freshly smoked up commits\&. If tha \-\-onto option aint specified, tha startin point is <upstream>\&. May be any valid commit, n' not just a existin branch name\&.
.sp
As a special case, you may use "A\&.\&.\&.B" as a gangbangin' finger-lickin' dirty-ass shortcut fo' tha merge base of A n' B if there is exactly one merge base\&. Yo ass can leave up at most one of A n' B, up in which case it defaults ta HEAD\&.
.RE
.PP
<upstream>
.RS 4
Upstream branch ta compare against\&. May be any valid commit, not just a existin branch name\&. Defaults ta tha configured upstream fo' tha current branch\&.
.RE
.PP
<branch>
.RS 4
Workin branch; defaults ta HEAD\&.
.RE
.PP
\-\-continue
.RS 4
Restart tha rebasin process afta havin resolved a merge conflict\&.
.RE
.PP
\-\-abort
.RS 4
Abort tha rebase operation n' reset HEAD ta tha original gangsta branch\&. If <branch> was provided when tha rebase operation was started, then HEAD is ghon be reset ta <branch>\&. Otherwise HEAD is ghon be reset ta where dat shiznit was when tha rebase operation was started\&.
.RE
.PP
\-\-keep\-empty
.RS 4
Keep tha commits dat do not chizzle anythang from its muthafathas up in tha result\&.
.RE
.PP
\-\-skip
.RS 4
Restart tha rebasin process by skippin tha current patch\&.
.RE
.PP
\-\-edit\-todo
.RS 4
Edit tha todo list durin a interactizzle rebase\&.
.RE
.PP
\-m, \-\-merge
.RS 4
Use mergin strategies ta rebase\&. When tha recursive (default) merge game is used, dis allows rebase ta be aware of renames on tha upstream side\&.
.sp
Note dat a rebase merge works by replayin each commit from tha hustlin branch on top of tha <upstream> branch\&. Because of this, when a merge conflict happens, tha side reported as
\fIours\fR
is tha so\-far rebased series, startin wit <upstream>, and
\fItheirs\fR
is tha hustlin branch\&. In other lyrics, tha sides is swapped\&.
.RE
.PP
\-s <strategy>, \-\-strategy=<strategy>
.RS 4
Use tha given merge game\&. If there is no
\-s
option
\fIgit merge\-recursive\fR
is used instead\&. This implies \-\-merge\&.
.sp
Because
\fIgit rebase\fR
replays each commit from tha hustlin branch on top of tha <upstream> branch rockin tha given game, rockin the
\fIours\fR
strategy simply discardz all patches from tha <branch>, which make lil sense\&.
.RE
.PP
\-X <strategy\-option>, \-\-strategy\-option=<strategy\-option>
.RS 4
Pass tha <strategy\-option> all up in ta tha merge game\&. This implies
\-\-merge
and, if no game has been specified,
\-s recursive\&. Note tha reversal of
\fIours\fR
and
\fItheirs\fR
as noted above fo' the
\-m
option\&.
.RE
.PP
\-q, \-\-quiet
.RS 4
Be on tha fuckin' down-low\&. Implies \-\-no\-stat\&.
.RE
.PP
\-v, \-\-verbose
.RS 4
Be verbose\&. Implies \-\-stat\&.
.RE
.PP
\-\-stat
.RS 4
Show a gangbangin' finger-lickin' diffstat of what tha fuck chizzled upstream since tha last rebase\&. Da diffstat be also controlled by tha configuration option rebase\&.stat\&.
.RE
.PP
\-n, \-\-no\-stat
.RS 4
Do not show a gangbangin' finger-lickin' diffstat as part of tha rebase process\&.
.RE
.PP
\-\-no\-verify
.RS 4
This option bypasses tha pre\-rebase hook\&. Right back up in yo muthafuckin ass. See also
\fBgithooks\fR(5)\&.
.RE
.PP
\-\-verify
.RS 4
Allows tha pre\-rebase hook ta run, which is tha default\&. This option can be used ta override \-\-no\-verify\&. Right back up in yo muthafuckin ass. See also
\fBgithooks\fR(5)\&.
.RE
.PP
\-C<n>
.RS 4
Ensure at least <n> linez of surroundin context match before n' afta each chizzle\&. When fewer linez of surroundin context exist they all must match\&. By default no context is eva ignored\&.
.RE
.PP
\-f, \-\-force\-rebase
.RS 4
Force tha rebase even if tha current branch be a thugged-out descendant of tha commit yo ass is rebasin onto\&. Normally non\-interactizzle rebase will exit wit tha message "Current branch is up ta date" up in such a thang\&. Incompatible wit tha \-\-interactizzle option\&.
.sp
Yo ass may find dis (or \-\-no\-ff wit a interactizzle rebase) helpful afta revertin a topic branch merge, as dis option recreates tha topic branch wit fresh commits so it can be remerged successfully without needin ta "revert tha reversion" (see the
\m[blue]\fBrevert\-a\-faulty\-merge How\-To\fR\m[]\&\s-2\u[1]\d\s+2
for details)\&.
.RE
.PP
\-\-fork\-point, \-\-no\-fork\-point
.RS 4
Use
\fIgit merge\-base \-\-fork\-point\fR
to find a funky-ass betta common ancestor between
upstream
and
branch
when calculatin which commits have done been introduced by
branch
(see
\fBgit-merge-base\fR(1))\&.
.sp
If no non\-option arguments is given on tha command line, then tha default is
\-\-fork\-point @{u}
otherwise the
upstream
argument is interpreted literally unless the
\-\-fork\-point
option is specified\&.
.RE
.PP
\-\-ignore\-whitespace, \-\-whitespace=<option>
.RS 4
These flag is passed ta the
\fIgit apply\fR
program (see
\fBgit-apply\fR(1)) dat applies tha patch\&. Incompatible wit tha \-\-interactizzle option\&.
.RE
.PP
\-\-committer\-date\-is\-author\-date, \-\-ignore\-date
.RS 4
These flags is passed to
\fIgit am\fR
to easily chizzle tha datez of tha rebased commits (see
\fBgit-am\fR(1))\&. Incompatible wit tha \-\-interactizzle option\&.
.RE
.PP
\-i, \-\-interactive
.RS 4
Make a list of tha commits which is bout ta be rebased\&. Let tha user edit dat list before rebasing\&. This mode can also be used ta split commits (see SPLITTING COMMITS below)\&.
.RE
.PP
\-p, \-\-preserve\-merges
.RS 4
Instead of ignorin merges, try ta recreate them\&.
.sp
This uses the
\-\-interactive
machinery internally yo, but combinin it wit the
\-\-interactive
option explicitly is generally not a phat scam unless you know what tha fuck yo ass is bustin (see BUGS below)\&.
.RE
.PP
\-x <cmd>, \-\-exec <cmd>
.RS 4
Append "exec <cmd>" afta each line bustin a cold-ass lil commit up in tha final history\&. <cmd> is ghon be interpreted as one or mo' shell commands\&.
.sp
This option can only be used wit the
\-\-interactive
option (see INTERACTIVE MODE below)\&.
.sp
Yo ass may execute nuff muthafuckin commandz by either rockin one instizzle of
\-\-exec
with nuff muthafuckin commands:
.sp
.if n \{\
.RS 4
.\}
.nf
git rebase \-i \-\-exec "cmd1 && cmd2 && \&.\&.\&."
.fi
.if n \{\
.RE
.\}
.sp
or by givin mo' than one
\-\-exec:
.sp
.if n \{\
.RS 4
.\}
.nf
git rebase \-i \-\-exec "cmd1" \-\-exec "cmd2" \-\-exec \&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
If
\-\-autosquash
is used, "exec" lines aint gonna be appended fo' tha intermediate commits, n' will only step tha fuck up all up in tha end of each squash/fixup series\&.
.RE
.PP
\-\-root
.RS 4
Rebase all commits reachable from <branch>, instead of limitin dem wit a <upstream>\&. This allows you ta rebase tha root commit(s) on a funky-ass branch\&. When used wit \-\-onto, it will skip chizzlez already contained up in <newbase> (instead of <upstream>) whereas without \-\-onto it will operate on every last muthafuckin chizzle\&. When used together wit both \-\-onto n' \-\-preserve\-merges,
\fIall\fR
root commits is ghon be rewritten ta have <newbase> as parent instead\&.
.RE
.PP
\-\-autosquash, \-\-no\-autosquash
.RS 4
When tha commit log message begins wit "squash! \&..." (or "fixup! \&..."), n' there be a cold-ass lil commit whose title begins wit tha same \&..., automatically modify tha todo list of rebase \-i so dat tha commit marked fo' squashin comes right afta tha commit ta be modified, n' chizzle tha action of tha moved commit from
pick
to
squash
(or
fixup)\&. Ignores subsequent "fixup! " or "squash! " afta tha first, up in case you referred ta a earlier fixup/squash with
git commit \-\-fixup/\-\-squash\&.
.sp
This option is only valid when the
\fI\-\-interactive\fR
option is used\&.
.sp
If the
\fI\-\-autosquash\fR
option is enabled by default rockin tha configuration variable
rebase\&.autosquash, dis option can be used ta override n' disable dis setting\&.
.RE
.PP
\-\-[no\-]autostash
.RS 4
Automatically create a temporary stash before tha operation begins, n' apply it afta tha operation ends\&. This means dat you can run rebase on a gangbangin' finger-lickin' dirty worktree\&. But fuck dat shiznit yo, tha word on tha street is dat use wit care: tha final stash application afta a successful rebase might result up in non\-trivial conflicts\&.
.RE
.PP
\-\-no\-ff
.RS 4
With \-\-interactive, cherry\-pick all rebased commits instead of fast\-forwardin over tha unchanged ones\&. This ensures dat tha entire history of tha rebased branch is composed of freshly smoked up commits\&.
.sp
Without \-\-interactive, dis be a synonym fo' \-\-force\-rebase\&.
.sp
Yo ass may find dis helpful afta revertin a topic branch merge, as dis option recreates tha topic branch wit fresh commits so it can be remerged successfully without needin ta "revert tha reversion" (see the
\m[blue]\fBrevert\-a\-faulty\-merge How\-To\fR\m[]\&\s-2\u[1]\d\s+2
for details)\&.
.RE
.SH "MERGE STRATEGIES"
.sp
Da merge mechanizzle (git merge n' git pull commands) allows tha backend \fImerge strategies\fR ta be chosen wit \-s option\&. Right back up in yo muthafuckin ass. Some strategies can also take they own options, which can be passed by givin \-X<option> arguments ta git merge and/or git pull\&.
.PP
resolve
.RS 4
This can only resolve two headz (i\&.e\&. tha current branch n' another branch you pulled from) rockin a 3\-way merge algorithm\&. Well shiiiit, it tries ta carefully detect criss\-cross merge ambiguitizzles n' is considered generally safe n' fast\&.
.RE
.PP
recursive
.RS 4
This can only resolve two headz rockin a 3\-way merge algorithm\&. When there is mo' than one common ancestor dat can be used fo' 3\-way merge, it creates a merged tree of tha common ancestors n' uses dat as tha reference tree fo' tha 3\-way merge\&. This has been reported ta result up in fewer merge conflicts without causin mis\-merges by tests done on actual merge commits taken from Linux 2\&.6 kernel pimpment history\& fo' realz. Additionally dis can detect n' handle merges involvin renames\&. This is tha default merge game when pullin or mergin one branch\&.
.sp
The
\fIrecursive\fR
strategy can take tha followin options:
.PP
ours
.RS 4
This option forces conflictin hunks ta be auto\-resolved cleanly by favoring
\fIour\fR
version\&. Chizzlez from tha other tree dat do not conflict wit our side is reflected ta tha merge result\&. For a funky-ass binary file, tha entire contents is taken from our side\&.
.sp
This should not be trippin wit the
\fIours\fR
merge game, which do not even peep what tha fuck tha other tree gotz nuff at all\&. Well shiiiit, it discardz every last muthafuckin thang tha other tree did, declaring
\fIour\fR
history gotz nuff all dat happened up in it\&.
.RE
.PP
theirs
.RS 4
This is tha opposite of
\fIours\fR\&.
.RE
.PP
patience
.RS 4
With dis option,
\fImerge\-recursive\fR
spendz a lil extra time ta avoid mismerges dat sometimes occur cuz of unimportant matchin lines (e\&.g\&., braces from distinct functions)\&. Use dis when tha branches ta be merged have diverged wildly\&. Right back up in yo muthafuckin ass. See also
\fBgit-diff\fR(1)\-\-patience\&.
.RE
.PP
diff\-algorithm=[patience|minimal|histogram|myers]
.RS 4
Tells
\fImerge\-recursive\fR
to bust a gangbangin' finger-lickin' different diff algorithm, which can help avoid mismerges dat occur cuz of unimportant matchin lines (like fuckin braces from distinct functions)\&. Right back up in yo muthafuckin ass. See also
\fBgit-diff\fR(1)\-\-diff\-algorithm\&.
.RE
.PP
ignore\-space\-change, ignore\-all\-space, ignore\-space\-at\-eol
.RS 4
Treats lines wit tha indicated type of whitespace chizzle as unchanged fo' tha sake of a three\-way merge\&. Whitespace chizzlez mixed wit other chizzlez ta a line is not ignored\&. Right back up in yo muthafuckin ass. See also
\fBgit-diff\fR(1)\-b,
\-w, and
\-\-ignore\-space\-at\-eol\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
\fItheir\fR
version only introduces whitespace chizzlez ta a line,
\fIour\fR
version is used;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
\fIour\fR
version introduces whitespace chizzlez but
\fItheir\fR
version includes a substantial chizzle,
\fItheir\fR
version is used;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Otherwise, tha merge proceedz up in tha usual way\&.
.RE
.RE
.PP
renormalize
.RS 4
This runs a virtual check\-out n' check\-in of all three stagez of a gangbangin' file when resolvin a three\-way merge\&. This option is meant ta be used when mergin branches wit different clean filtas or end\-of\-line normalization rules\&. Right back up in yo muthafuckin ass. See "Mergin branches wit differin checkin/checkout attributes" in
\fBgitattributes\fR(5)
for details\&.
.RE
.PP
no\-renormalize
.RS 4
Disablez the
renormalize
option\&. This overrides the
merge\&.renormalize
configuration variable\&.
.RE
.PP
rename\-threshold=<n>
.RS 4
Controls tha similaritizzle threshold used fo' rename detection\&. Right back up in yo muthafuckin ass. See also
\fBgit-diff\fR(1)\-M\&.
.RE
.PP
subtree[=<path>]
.RS 4
This option be a mo' advanced form of
\fIsubtree\fR
strategy, where tha game cook up a guess on how tha fuck two trees must be shifted ta match wit each other when merging\&. Instead, tha specified path is prefixed (or stripped from tha beginning) ta make tha shape of two trees ta match\&.
.RE
.RE
.PP
octopus
.RS 4
This resolves cases wit mo' than two headz yo, but refuses ta do a cold-ass lil complex merge dat needz manual resolution\&. Well shiiiit, it is primarily meant ta be used fo' bundlin topic branch headz together\&. This is tha default merge game when pullin or mergin mo' than one branch\&.
.RE
.PP
ours
.RS 4
This resolves any number of headz yo, but tha resultin tree of tha merge be always dat of tha current branch head, effectively ignorin all chizzlez from all other branches\&. Well shiiiit, it is meant ta be used ta supersede oldschool pimpment history of side branches\&. Note dat dis is different from tha \-Xours option ta the
\fIrecursive\fR
merge game\&.
.RE
.PP
subtree
.RS 4
This be a modified recursive game\&. When mergin trees A n' B, if B correspondz ta a subtree of A, B is first adjusted ta match tha tree structure of A, instead of readin tha trees all up in tha same level\&. This adjustment be also done ta tha common ancestor tree\&.
.RE
.sp
With tha strategies dat use 3\-way merge (includin tha default, \fIrecursive\fR), if a cold-ass lil chizzle is made on both branches yo, but lata reverted on one of tha branches, dat chizzle is ghon be present up in tha merged result; some playas find dis behavior confusing\&. Well shiiiit, it occurs cuz only tha headz n' tha merge base is considered when struttin a merge, not tha individual commits\&. Da merge algorithm therefore considaz tha reverted chizzle as no chizzle at all, n' substitutes tha chizzled version instead\&.
.SH "NOTES"
.sp
Yo ass should KNOW tha implicationz of rockin \fIgit rebase\fR on a repository dat you share\&. Right back up in yo muthafuckin ass. See also RECOVERING FROM UPSTREAM REBASE below\&.
.sp
When tha git\-rebase command is run, it will first execute a "pre\-rebase" hook if one exists\&. Yo ass can use dis hook ta do sanitizzle checks n' reject tha rebase if it isn\(cqt appropriate\&. Please peep tha template pre\-rebase hook script fo' a example\&.
.sp
Upon completion, <branch> is ghon be tha current branch\&.
.SH "INTERACTIVE MODE"
.sp
Rebasin interactively means dat you gotz a cold-ass lil chizzle ta edit tha commits which is rebased\&. Yo ass can reorder tha commits, n' you can remove dem (weedin up wack or otherwise unwanted patches)\&.
.sp
Da interactizzle mode is meant fo' dis type of workflow:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
have a straight-up dope idea
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
hack on tha code
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
prepare a series fo' submission
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
submit
.RE
.sp
where point 2\&. consistz of nuff muthafuckin instances of
.sp
a) regular use
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
finish suttin' worthy of a cold-ass lil commit
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
commit
.RE
.sp
b) independent fixup
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
realize dat suttin' do not work
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
fix that
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
commit it
.RE
.sp
Sometimes tha thang fixed up in b\&.2\&. cannot be amended ta tha not\-quite slick commit it fixes, cuz dat commit is buried deeply up in a patch series\&. That is exactly what tha fuck interactizzle rebase is for: use it afta nuff "a"s n' "b"s, by rearrangin n' editin commits, n' squashin multiple commits tha fuck into one\&.
.sp
Start it wit tha last commit you wanna retain as\-is:
.sp
.if n \{\
.RS 4
.\}
.nf
git rebase \-i <after\-this\-commit>
.fi
.if n \{\
.RE
.\}
.sp
An editor is ghon be fired up wit all tha commits up in yo' current branch (ignorin merge commits), which come afta tha given commit\&. Yo ass can reorder tha commits up in dis list ta yo' heart\(cqs content, n' you can remove them\&. Da list looks mo' or less like this:
.sp
.if n \{\
.RS 4
.\}
.nf
pick deadbee Da oneline of dis commit
pick fa1afe1 Da oneline of tha next commit
\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da oneline descriptions is purely fo' yo' pleasure; \fIgit rebase\fR aint gonna peep dem but all up in tha commit names ("deadbee" n' "fa1afe1" up in dis example), so do not delete or edit tha names\&.
.sp
By replacin tha command "pick" wit tha command "edit", you can tell \fIgit rebase\fR ta stop afta applyin dat commit, so dat you can edit tha filez and/or tha commit message, amend tha commit, n' continue rebasing\&.
.sp
If you just wanna edit tha commit message fo' a cold-ass lil commit, replace tha command "pick" wit tha command "reword"\&.
.sp
If you wanna fold two or mo' commits tha fuck into one, replace tha command "pick" fo' tha second n' subsequent commits wit "squash" or "fixup"\&. If tha commits had different authors, tha folded commit is ghon be attributed ta tha lyricist of tha straight-up original gangsta commit\&. Da suggested commit message fo' tha folded commit is tha concatenation of tha commit lyrics of tha straight-up original gangsta commit n' of dem wit tha "squash" command yo, but omits tha commit lyrics of commits wit tha "fixup" command\&.
.sp
\fIgit rebase\fR will stop when "pick" has been replaced wit "edit" or when a cold-ass lil command fails cuz of merge errors\&. When yo ass is done editin and/or resolvin conflicts you can continue wit git rebase \-\-continue\&.
.sp
For example, if you wanna reorder tha last 5 commits, such dat what tha fuck was HEAD~4 becomes tha freshly smoked up HEAD\&. To big up that, you would call \fIgit rebase\fR like this:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git rebase \-i HEAD~5
.fi
.if n \{\
.RE
.\}
.sp
.sp
And move tha straight-up original gangsta patch ta tha end of tha list\&.
.sp
Yo ass might wanna preserve merges, if you gotz a history like this:
.sp
.if n \{\
.RS 4
.\}
.nf
           X
            \e
         A\-\-\-M\-\-\-B
        /
\-\-\-o\-\-\-O\-\-\-P\-\-\-Q
.fi
.if n \{\
.RE
.\}
.sp
.sp
Suppose you wanna rebase tha side branch startin at "A" ta "Q"\&. Make shizzle dat tha current HEAD is "B", n' call
.sp
.if n \{\
.RS 4
.\}
.nf
$ git rebase \-i \-p \-\-onto Q O
.fi
.if n \{\
.RE
.\}
.sp
.sp
Reorderin n' editin commits probably creates untested intermediate steps\&. Yo ass may wanna check dat yo' history editin did not break anythang by hustlin a test, or at least recompilin at intermediate points up in history by rockin tha "exec" command (shortcut "x")\&. Yo ass may do so by bustin a todo list like dis one:
.sp
.if n \{\
.RS 4
.\}
.nf
pick deadbee Implement feature XXX
fixup f1a5c00 Fix ta feature XXX
exec make
pick c0ffeee Da oneline of tha next commit
edit deadbab Da oneline of tha commit after
exec cd subdir; make test
\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da interactizzle rebase will stop when a cold-ass lil command fails (i\&.e\&. exits wit non\-0 status) ta hit you wit a opportunitizzle ta fix tha problem\&. Yo ass can continue wit git rebase \-\-continue\&.
.sp
Da "exec" command launches tha command up in a gangbangin' finger-lickin' dirty-ass shell (the one specified up in $SHELL, or tha default shell if $SHELL aint set), so you can use shell features (like "cd", ">", ";" \&...)\&. Da command is run from tha root of tha hustlin tree\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ git rebase \-i \-\-exec "make test"
.fi
.if n \{\
.RE
.\}
.sp
.sp
This command lets you check dat intermediate commits is compilable\&. Da todo list becomes like that:
.sp
.if n \{\
.RS 4
.\}
.nf
pick 5928aea one
exec make test
pick 04d0fda two
exec make test
pick ba46169 three
exec make test
pick f4593f9 four
exec make test
.fi
.if n \{\
.RE
.\}
.sp
.SH "SPLITTING COMMITS"
.sp
In interactizzle mode, you can mark commits wit tha action "edit"\&. But fuck dat shiznit yo, tha word on tha street is dat dis do not necessarily mean dat \fIgit rebase\fR expects tha result of dis edit ta be exactly one commit\&. Git tha fuck outta mah grill wit dat bullshit, you can undo tha commit, or you can add other commits\&. This can be used ta split a cold-ass lil commit tha fuck into two:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Start a interactizzle rebase with
git rebase \-i <commit>^, where <commit> is tha commit you wanna split\&. In fact, any commit range will do, as long as it gotz nuff dat commit\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Mark tha commit you wanna split wit tha action "edit"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
When it comes ta editin dat commit, execute
git reset HEAD^\&. Da effect is dat tha HEAD is rewound by one, n' tha index bigs up suit\&. But fuck dat shiznit yo, tha word on tha street is dat tha hustlin tree stays tha same\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Now add tha chizzlez ta tha index dat you wanna have up in tha straight-up original gangsta commit\&. Yo ass can use
git add
(possibly interactively) or
\fIgit gui\fR
(or both) ta do that\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Commit tha now\-current index wit whatever commit message be appropriate now\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Repeat tha last two steps until yo' hustlin tree is clean\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Continue tha rebase with
git rebase \-\-continue\&.
.RE
.sp
If yo ass is not straight-up shizzle dat tha intermediate revisions is consistent (they compile, pass tha testsuite, etc\&.) you should use \fIgit stash\fR ta stash away tha not\-yet\-committed chizzlez afta each commit, test, n' amend tha commit if fixes is necessary\&.
.SH "RECOVERING FROM UPSTREAM REBASE"
.sp
Rebasin (or any other form of rewriting) a funky-ass branch dat others have based work on be a wack idea: mah playas downstream of it is forced ta manually fix they history\&. This section explains how tha fuck ta do tha fix from tha downstream\(cqs point of view\&. Da real fix, however, would be ta avoid rebasin tha upstream up in tha straight-up original gangsta place\&.
.sp
To illustrate, suppose yo ass is up in a thang where one of mah thugs pimps a \fIsubsystem\fR branch, n' yo ass is hustlin on a \fItopic\fR dat is dependent on dis \fIsubsystem\fR\&. Yo ass might end up wit a history like tha following:
.sp
.if n \{\
.RS 4
.\}
.nf
    o\-\-\-o\-\-\-o\-\-\-o\-\-\-o\-\-\-o\-\-\-o\-\-\-o\-\-\-o  master
         \e
          o\-\-\-o\-\-\-o\-\-\-o\-\-\-o  subsystem
                           \e
                            *\-\-\-*\-\-\-*  topic
.fi
.if n \{\
.RE
.\}
.sp
.sp
If \fIsubsystem\fR is rebased against \fImaster\fR, tha followin happens:
.sp
.if n \{\
.RS 4
.\}
.nf
    o\-\-\-o\-\-\-o\-\-\-o\-\-\-o\-\-\-o\-\-\-o\-\-\-o  master
         \e                       \e
          o\-\-\-o\-\-\-o\-\-\-o\-\-\-o       o\(aq\-\-o\(aq\-\-o\(aq\-\-o\(aq\-\-o\(aq  subsystem
                           \e
                            *\-\-\-*\-\-\-*  topic
.fi
.if n \{\
.RE
.\}
.sp
.sp
If you now continue pimpment as usual, n' eventually merge \fItopic\fR ta \fIsubsystem\fR, tha commits from \fIsubsystem\fR will remain duplicated forever:
.sp
.if n \{\
.RS 4
.\}
.nf
    o\-\-\-o\-\-\-o\-\-\-o\-\-\-o\-\-\-o\-\-\-o\-\-\-o  master
         \e                       \e
          o\-\-\-o\-\-\-o\-\-\-o\-\-\-o       o\(aq\-\-o\(aq\-\-o\(aq\-\-o\(aq\-\-o\(aq\-\-M  subsystem
                           \e                         /
                            *\-\-\-*\-\-\-*\-\&.\&.\&.\&.\&.\&.\&.\&.\&.\&.\-*\-\-*  topic
.fi
.if n \{\
.RE
.\}
.sp
.sp
Such duplicates is generally frowned upon cuz they clutta up history, makin it harder ta follow\&. To clean thangs up, you need ta transplant tha commits on \fItopic\fR ta tha freshly smoked up \fIsubsystem\fR tip, i\&.e\&., rebase \fItopic\fR\&. This becomes a ripple effect: mah playas downstream from \fItopic\fR is forced ta rebase too, n' so on!
.sp
There is two kindz of fixes, discussed up in tha followin subsections:
.PP
Easy case: Da chizzlez is literally tha same\&.
.RS 4
This happens if the
\fIsubsystem\fR
rebase was a simple rebase n' had no conflicts\&.
.RE
.PP
Hard case: Da chizzlez is not tha same\&.
.RS 4
This happens if the
\fIsubsystem\fR
rebase had conflicts, or used
\-\-interactive
to omit, edit, squash, or fixup commits; or if tha upstream used one of
commit \-\-amend,
reset, or
filter\-branch\&.
.RE
.SS "Da easy as fuck  case"
.sp
Only works if tha chizzlez (patch IDs based on tha diff contents) on \fIsubsystem\fR is literally tha same before n' afta tha rebase \fIsubsystem\fR did\&.
.sp
In dat case, tha fix is easy as fuck  cuz \fIgit rebase\fR knows ta skip chizzlez dat is already present up in tha freshly smoked up upstream\&. Right back up in yo muthafuckin ass. So if you say (assumin you\(cqre on \fItopic\fR)
.sp
.if n \{\
.RS 4
.\}
.nf
    $ git rebase subsystem
.fi
.if n \{\
.RE
.\}
.sp
.sp
you will end up wit tha fixed history
.sp
.if n \{\
.RS 4
.\}
.nf
    o\-\-\-o\-\-\-o\-\-\-o\-\-\-o\-\-\-o\-\-\-o\-\-\-o  master
                                 \e
                                  o\(aq\-\-o\(aq\-\-o\(aq\-\-o\(aq\-\-o\(aq  subsystem
                                                   \e
                                                    *\-\-\-*\-\-\-*  topic
.fi
.if n \{\
.RE
.\}
.sp
.SS "Da hard case"
.sp
Things git mo' fucked up if tha \fIsubsystem\fR chizzlez do not exactly correspond ta tha ones before tha rebase\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
While a "easy case recovery" sometimes appears ta be successful even up in tha hard case, it may have unintended consequences\&. For example, a cold-ass lil commit dat was removed via git rebase \-\-interactizzle is ghon be \fBresurrected\fR!
.sp .5v
.RE
.sp
Da scam is ta manually tell \fIgit rebase\fR "where tha oldschool \fIsubsystem\fR ended n' yo' \fItopic\fR fuckin started", dat is, what tha fuck tha oldschool merge\-base between dem was\&. Yo ass will gotta find a way ta name tha last commit of tha oldschool \fIsubsystem\fR, fo' example:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
With the
\fIsubsystem\fR
reflog: after
\fIgit fetch\fR, tha oldschool tip of
\fIsubsystem\fR
is at
subsystem@{1}\&. Right back up in yo muthafuckin ass. Subsequent fetches will increase tha number\&. (See
\fBgit-reflog\fR(1)\&.)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Relatizzle ta tha tip of
\fItopic\fR: knowin dat your
\fItopic\fR
has three commits, tha oldschool tip of
\fIsubsystem\fR
must be
topic~3\&.
.RE
.sp
Yo ass can then transplant tha oldschool subsystem\&.\&.topic ta tha freshly smoked up tip by sayin (for tha reflog case, n' assumin yo ass is on \fItopic\fR already):
.sp
.if n \{\
.RS 4
.\}
.nf
    $ git rebase \-\-onto subsystem subsystem@{1}
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da ripple effect of a "hard case" recovery is especially bad: \fIeveryone\fR downstream from \fItopic\fR will now gotta big-ass up a "hard case" recovery too!
.SH "BUGS"
.sp
Da todo list presented by \-\-preserve\-merges \-\-interactizzle do not represent tha topologizzle of tha revision graph\&. Editin commits n' rewordin they commit lyrics should work fine yo, but attempts ta reorder commits tend ta produce counterintuitizzle thangs up in dis biatch\&.
.sp
For example, a attempt ta rearrange
.sp
.if n \{\
.RS 4
.\}
.nf
1 \-\-\- 2 \-\-\- 3 \-\-\- 4 \-\-\- 5
.fi
.if n \{\
.RE
.\}
.sp
.sp
to
.sp
.if n \{\
.RS 4
.\}
.nf
1 \-\-\- 2 \-\-\- 4 \-\-\- 3 \-\-\- 5
.fi
.if n \{\
.RE
.\}
.sp
.sp
by movin tha "pick 4" line will result up in tha followin history:
.sp
.if n \{\
.RS 4
.\}
.nf
        3
       /
1 \-\-\- 2 \-\-\- 4 \-\-\- 5
.fi
.if n \{\
.RE
.\}
.sp
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
.SH "NOTES"
.IP " 1." 4
revert-a-faulty-merge How-To
.RS 4
\%file:///usr/share/doc/git/howto/revert-a-faulty-merge.html
.RE
