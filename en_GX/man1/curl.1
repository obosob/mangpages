.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2013, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as busted lyrics bout up in tha file COPYING, which
.\" * you should have received as part of dis distribution. I aint talkin' bout chicken n' gravy biatch. Da terms
.\" * is also available at http://curl.haxx.se/docs/copyright.html.
.\" *
.\" * Yo ass may opt ta use, copy, modify, merge, publish, distribute and/or sell
.\" * copiez of tha Software, n' permit peeps ta whom tha Software is
.\" * furnished ta do so, under tha termz of tha COPYING file.
.\" *
.\" * This software is distributed on a "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.\"
.TH curl 1 "27 July 2012" "Curl 7.27.0" "Curl Manual"
.SH NAME
curl \- transfer a URL
.SH SYNOPSIS
.B curl [options]
.I [URL...]
.SH DESCRIPTION
.B curl
is a tool ta transfer data from or ta a server, rockin one of tha supported
protocols (DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP,
LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMTP, SMTPS, TELNET n' TFTP).  The
command is designed ta work without user interaction.

curl offers a funky-ass busload of useful tricks like proxy support, user
authentication, FTP upload, HTTP post, SSL connections, cookies, file transfer
resume, Metalink, n' mo' n' mo' n' mo' fo' realz. As yo big-ass booty is ghon peep below, tha number of features will
make yo' head spin!

curl is powered by libcurl fo' all transfer-related features. Right back up in yo muthafuckin ass. See
.BR libcurl (3)
for details.
.SH URL
Da URL syntax is protocol-dependent. You'll find a thugged-out detailed description in
RFC 3986.

Yo ass can specify multiple URLs or partz of URLs by freestylin part sets within
braces as in:

 http://site.{one,two,three}.com

or you can git sequencez of alphanumeric series by rockin [] as in:

 ftp://ftp.numericals.com/file[1-100].txt
 ftp://ftp.numericals.com/file[001-100].txt    (with leadin zeros)
 ftp://ftp.letters.com/file[a-z].txt

Nested sequences is not supported yo, but you can use nuff muthafuckin ones next ta each
other:

 http://any.org/archive[1996-1999]/vol[1-4]/part{a,b,c}.html

Yo ass can specify any amount of URLs on tha command line. They is ghon be fetched
in a sequential manner up in tha specified order.

Yo ass can specify a step counta fo' tha ranges ta git every last muthafuckin Nth number or
letter:

 http://www.numericals.com/file[1-100:10].txt
 http://www.letters.com/file[a-z:2].txt

If you specify URL without protocol:// prefix, curl will attempt ta guess what
protocol you might want. Well shiiiit, it will then default ta HTTP but try other protocols
based on often-used host name prefixes. For example, fo' host names starting
with "ftp." curl will assume you wanna drop a rhyme FTP.

curl will do its dopest ta use what tha fuck you pass ta it as a URL. Well shiiiit, it aint tryin to
validate it as a syntactically erect URL by any means but is instead
\fBvery\fP liberal wit what tha fuck it accepts.

curl will attempt ta re-use connections fo' multiple file transfers, so that
gettin nuff filez from tha same server aint gonna do multiple connects /
handshakes. This improves speed. Y'all KNOW dat shit, muthafucka! Of course dis is only done on files
specified on a single command line n' cannot be used between separate curl
invokes.
.SH "PROGRESS METER"
curl normally displays a progress meta durin operations, indicatin the
amount of transferred data, transfer speedz n' estimated time left, etc.

curl displays dis data ta tha terminal by default, so if you invoke curl to
do a operation n' it be bout ta write data ta tha terminal, it
\fIdisables\fP tha progress meta as otherwise it would mess up tha output
mixin progress meta n' response data.

If you want a progress meta fo' HTTP POST or PUT requests, you need to
redirect tha response output ta a gangbangin' file, rockin shell redirect (>), -o [file] or
similar.

It aint tha same case fo' FTP upload as dat operation do not spit out
any response data ta tha terminal.

If you prefer a progress "bar" instead of tha regular meter, \fI-#\fP is your
friend.
.SH OPTIONS
In general, all boolean options is enabled wit --\fBoption\fP n' yet again
disabled wit --\fBno-\fPoption. I aint talkin' bout chicken n' gravy biatch. That is, you use tha exact same option name
but prefix it wit "no-". But fuck dat shiznit yo, tha word on tha street is dat up in dis list we mostly only list n' show
the --option version of em. (This concept wit --no options was added in
7.19.0. Previously most options was toggled on/off on repeated use of the
same command line option.)
.IP "-#, --progress-bar"
Make curl display progress as a simple progress bar instead of tha standard,
more shiznital, meter.
.IP "-0, --http1.0"
(HTTP) Forces curl ta issue its requests rockin HTTP 1.0 instead of rockin its
internally preferred: HTTP 1.1.
.IP "-1, --tlsv1"
(SSL)
Forces curl ta use TLS version 1.x when negotiatin wit a remote TLS server.
Yo ass can use options \fI--tlsv1.0\fP, \fI--tlsv1.1\fP, n' \fI--tlsv1.2\fP to
control tha TLS version mo' precisely (if tha SSL backend up in use supports such
a level of control).
.IP "--tlsv1.0"
(SSL)
Forces curl ta use TLS version 1.0 when negotiatin wit a remote TLS server.
(Added up in 7.34.0)
.IP "--tlsv1.1"
(SSL)
Forces curl ta use TLS version 1.1 when negotiatin wit a remote TLS server.
(Added up in 7.34.0)
.IP "--tlsv1.2"
(SSL)
Forces curl ta use TLS version 1.2 when negotiatin wit a remote TLS server.
(Added up in 7.34.0)
.IP "-2, --sslv2"
(SSL)
Forces curl ta use SSL version 2 when negotiatin wit a remote SSL server.
.IP "-3, --sslv3"
(SSL)
Forces curl ta use SSL version 3 when negotiatin wit a remote SSL server.
.IP "-4, --ipv4"
If curl is capable of resolvin a address ta multiple IP versions (which it
is if it is IPv6-capable), dis option  drops some lyrics ta curl ta resolve names ta IPv4
addresses only.
.IP "-6, --ipv6"
If curl is capable of resolvin a address ta multiple IP versions (which it
is if it is IPv6-capable), dis option  drops some lyrics ta curl ta resolve names ta IPv6
addresses only.
.IP "-a, --append"
(FTP/SFTP) When used up in a upload, dis will tell curl ta append ta tha target
file instead of overwritin dat shit. If tha file don't exist, it is ghon be pimped.
Note dat dis flag is ignored by some SSH servers (includin OpenSSH).
.IP "-A, --user-agent <agent string>"
(HTTP) Specify tha User-Agent strang ta bust ta tha HTTP server n' shit. Right back up in yo muthafuckin ass. Some badly
done CGIs fail if dis field aint set ta "Mozilla/4.0". To encode blanks in
the string, surround tha strang wit single quote marks. This can also be set
with tha \fI-H, --header\fP option of course.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--anyauth"
(HTTP) Tells curl ta figure up authentication method by itself, n' use the
most secure one tha remote joint fronts ta support. This is done by first
fuckin wit a request n' checkin tha response-headers, thus possibly inducin an
extra network round-trip. This is used instead of settin a specific
authentication method, which you can do wit \fI--basic\fP, \fI--digest\fP,
\fI--ntlm\fP, n' \fI--negotiate\fP.

Note dat rockin --anyauth aint recommended if you do uploadz from stdin,
since it may require data ta be busted twice n' then tha client must be able to
rewind. Y'all KNOW dat shit, muthafucka! If tha need should arise when uploadin from stdin, tha upload
operation will fail.
.IP "-b, --cookie <name=data>"
(HTTP)
Pass tha data ta tha HTTP server as a cold-ass lil cookie. Well shiiiit, it is supposedly the
data previously received from tha server up in a "Set-Cookie:" line.
Da data should be up in tha format "NAME1=VALUE1; NAME2=VALUE2".

If no '=' symbol is used up in tha line, it is treated as a gangbangin' filename ta use to
read previously stored cookie lines from, which should be used up in dis session
if they match. Usin dis method also activates tha "cookie parser" which will
make curl record incomin dem scooby snacks too, which may be handy if you rockin this
in combination wit tha \fI-L, --location\fP option. I aint talkin' bout chicken n' gravy biatch. Da file format of the
file ta read dem scooby snacks from should be plain HTTP headaz or tha Netscape/Mozilla
cookie file format.

\fBNOTE\fP dat tha file specified wit \fI-b, --cookie\fP is only used as
input. No dem scooby snacks is ghon be stored up in tha file. To store cookies, use the
\fI-c, --cookie-jar\fP option or you could even save tha HTTP headaz ta a gangbangin' file
usin \fI-D, --dump-header\fP!

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "-B, --use-ascii"
(FTP/LDAP) Enable ASCII transfer n' shit. For FTP, dis can also be
enforced by rockin a URL dat endz wit ";type=A". This option causes data
sent ta stdout ta be up in text mode fo' win32 systems.
.IP "--basic"
(HTTP) Tells curl ta use HTTP Basic authentication. I aint talkin' bout chicken n' gravy biatch. This is tha default and
this option is probably pointless, unless you use it ta override a previously
set option dat sets a gangbangin' finger-lickin' different authentication method (like fuckin \fI--ntlm\fP,
\fI--digest\fP, or \fI--negotiate\fP).
.IP "-c, --cookie-jar <file name>"
(HTTP) Specify ta which file you want curl ta write all dem scooby snacks afta a
completed operation. I aint talkin' bout chicken n' gravy biatch. Curl writes all dem scooby snacks previously read from a specified
file as well as all dem scooby snacks received from remote server(s). If no dem scooby snacks are
known, no file is ghon be written. I aint talkin' bout chicken n' gravy biatch. Da file is ghon be freestyled rockin tha Netscape
cookie file format. If you set tha file name ta a single dash, "-", the
cookies is ghon be freestyled ta stdout.

This command line option will activate tha cookie engine dat make curl
record n' use cookies fo' realz. Another way ta activate it is ta use tha \fI-b,
--cookie\fP option.

If tha cookie jar can't be pimped or freestyled to, tha whole curl operation
won't fail or even report a error clearly. Usin -v will git a warning
displayed yo, but dat is tha only visible feedback you git bout dis possibly
lethal thang.

If dis option is used nuff muthafuckin times, tha last specified file name will be
used.
.IP "-C, --continue-at <offset>"
Continue/Resume a previous file transfer all up in tha given offset. Da given offset
is tha exact number of bytes dat is ghon be skipped, countin from tha beginning
of tha source file before it is transferred ta tha destination. I aint talkin' bout chicken n' gravy biatch.  If used with
uploads, tha FTP server command SIZE aint gonna be used by curl.

Use "-C -" ta tell curl ta automatically smoke up where/how ta resume the
transfer n' shit. Well shiiiit, it then uses tha given output/input filez ta figure dat out.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--ciphers <list of ciphers>"
(SSL) Specifies which ciphers ta use up in tha connection. I aint talkin' bout chicken n' gravy biatch. Da list of ciphers
must specify valid ciphers. Read up on SSL cipher list details on dis URL:
\fIhttp://www.openssl.org/docs/apps/ciphers.html\fP

NSS ciphers is done differently than OpenSSL n' GnuTLS. Da full list of NSS
ciphers is up in tha NSSCipherSuite entry at dis URL:
\fIhttp://git.fedorahosted.org/cgit/mod_nss.git/plain/docs/mod_nss.html#Directives\fP

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--compressed"
(HTTP) Request a cold-ass lil compressed response rockin one of tha algorithms curl
supports, n' save tha uncompressed document.  If dis option is used n' the
server sendz a unsupported encoding, curl will report a error.
.IP "--connect-timeout <seconds>"
Maximum time up in secondz dat you allow tha connection ta tha server ta take.
This only limits tha connection phase, once curl has connected dis option is
of no mo' use.  Since 7.32.0, dis option accepts decimal joints yo, but the
actual timeout will decrease up in accuracy as tha specified timeout increases in
decimal precision. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See also tha \fI-m, --max-time\fP option.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--create-dirs"
When used up in conjunction wit tha \fI-o\fP option, curl will create the
necessary local directory hierarchy as needed. Y'all KNOW dat shit, muthafucka! This option creates tha dirs
mentioned wit tha \fI-o\fP option, not a god damn thang else. If tha \fI-o\fP file name
uses no dir or if tha dirs it mentions already exist, no dir is ghon be pimped.

To create remote directories when rockin FTP or SFTP, try
\fI--ftp-create-dirs\fP.
.IP "--crlf"
(FTP) Convert LF ta CRLF up in upload. Y'all KNOW dat shit, muthafucka! Useful fo' MVS (OS/390).
.IP "--crlfile <file>"
(HTTPS/FTPS) Provide a gangbangin' file rockin PEM format wit a Certificate Revocation
List dat may specify peer certificates dat is ta be considered revoked.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.

(Added up in 7.19.7)
.IP "-d, --data <data>"
(HTTP) Sendz tha specified data up in a POST request ta tha HTTP server, up in the
same way dat a funky-ass browser do when a user has filled up in a HTML form and
presses tha submit button. I aint talkin' bout chicken n' gravy biatch. This will cause curl ta pass tha data ta tha server
usin tha content-type application/x-www-form-urlencoded. Y'all KNOW dat shit, muthafucka!  Compare to
\fI-F, --form\fP.

\fI-d, --data\fP is tha same ol' dirty as \fI--data-ascii\fP. To post data purely binary,
you should instead use tha \fI--data-binary\fP option. I aint talkin' bout chicken n' gravy biatch. To URL-encode tha value
of a gangbangin' form field you may use \fI--data-urlencode\fP.

If any of these options is used mo' than once on tha same command line, the
data pieces specified is ghon be merged together wit a separating
&-symbol. Thus, rockin '-d name=daniel -d skill=lousy' would generate a post
chunk dat be lookin like \&'name=daniel&skill=lousy'.

If you start tha data wit tha letta @, tha rest should be a gangbangin' file name to
read tha data from, or - if you want curl ta read tha data from stdin. I aint talkin' bout chicken n' gravy biatch.  The
contentz of tha file must already be URL-encoded. Y'all KNOW dat shit, muthafucka! Multiple filez can also be
specified. Y'all KNOW dat shit, muthafucka! Postin data from a gangbangin' file named 'foobar' would thus be done with
\fI--data @foobar\fP.
.IP "-D, --dump-header <file>"
Write tha protocol headaz ta tha specified file.

This option is handy ta use when you wanna store tha headaz dat a HTTP
site sendz ta yo thugged-out ass. Cookies from tha headaz could then be read up in a second
curl invocation by rockin tha \fI-b, --cookie\fP option! The
\fI-c, --cookie-jar\fP option is however a funky-ass betta way ta store cookies.

When used up in FTP, tha FTP server response lines is considered bein "headers"
and thus is saved there.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.

.IP "--data-ascii <data>"
See \fI-d, --data\fP.
.IP "--data-binary <data>"
(HTTP) This posts data exactly as specified wit no extra processing
whatsoever.

If you start tha data wit tha letta @, tha rest should be a gangbangin' filename.  Data
is posted up in a similar manner as \fI--data-ascii\fP do, except dat newlines
are preserved n' conversions is never done.

If dis option is used nuff muthafuckin times, tha ones followin tha straight-up original gangsta will append
data as busted lyrics bout up in \fI-d, --data\fP.
.IP "--data-urlencode <data>"
(HTTP) This posts data, similar ta tha other --data options wit tha exception
that dis performs URL-encoding. (Added up in 7.18.0)

To be CGI-compliant, tha <data> part should begin wit a \fIname\fP followed
by a separator n' a cold-ass lil content justification. I aint talkin' bout chicken n' gravy biatch. Da <data> part can be passed to
curl rockin one of tha followin syntaxes:
.RS
.IP "content"
This will make curl URL-encode tha content n' pass dat on. I aint talkin' bout chicken n' gravy biatch. Just be careful
so dat tha content don't contain any = or @ symbols, as dat will then make
the syntax match one of tha other cases below!
.IP "=content"
This will make curl URL-encode tha content n' pass dat on. I aint talkin' bout chicken n' gravy biatch. Da precedin =
symbol aint included up in tha data.
.IP "name=content"
This will make curl URL-encode tha content part n' pass dat on. I aint talkin' bout chicken n' gravy biatch. Note that
the name part is sposed ta fuckin be URL-encoded already.
.IP "@filename"
This will make curl load data from tha given file (includin any newlines),
URL-encode dat data n' pass it on up in tha POST.
.IP "name@filename"
This will make curl load data from tha given file (includin any newlines),
URL-encode dat data n' pass it on up in tha POST. Da name part gets a equal
sign appended, resultin up in \fIname=urlencoded-file-content\fP. Note dat the
name is sposed ta fuckin be URL-encoded already.
.RE
.IP "--delegation LEVEL"
Set \fILEVEL\fP ta tell tha server what tha fuck it be allowed ta delegate when it
comes ta user credentials. Used wit GSS/kerberos.
.RS
.IP "none"
Don't allow any delegation.
.IP "policy"
Delegates if n' only if tha OK-AS-DELEGATE flag is set up in tha Kerberos
service ticket, which be a matta of realm policy.
.IP "always"
Unconditionally allow tha server ta delegate.
.RE
.IP "--digest"
(HTTP) Enablez HTTP Digest authentication. I aint talkin' bout chicken n' gravy biatch. This be a authentication scheme
that prevents tha password from bein busted over tha wire up in clear text. Use
this up in combination wit tha aiiight \fI-u, --user\fP option ta set user name
and password. Y'all KNOW dat shit, muthafucka! See also \fI--ntlm\fP, \fI--negotiate\fP n' \fI--anyauth\fP for
related options.

If dis option is used nuff muthafuckin times, only tha straight-up original gangsta one is used.
.IP "--disable-eprt"
(FTP) Tell curl ta disable tha use of tha EPRT n' LPRT commandz when bustin
actizzle FTP transfers. Curl will normally always first attempt ta use EPRT,
then LPRT before rockin PORT yo, but wit dis option, it will use PORT right
away. EPRT n' LPRT is extensions ta tha original gangsta FTP protocol, n' may not
work on all servers yo, but they enable mo' functionalitizzle up in a funky-ass betta way than
the traditionizzle PORT command.

\fB--eprt\fP can be used ta explicitly enable EPRT again n' again n' again n' \fB--no-eprt\fP
is a alias fo' \fB--disable-eprt\fP.

Disablin EPRT only chizzlez tha actizzle behavior. Shiiit, dis aint no joke. If you wanna switch to
passive mode you need ta not use \fI-P, --ftp-port\fP or force it with
\fI--ftp-pasv\fP.
.IP "--disable-epsv"
(FTP) Tell curl ta disable tha use of tha EPSV command when bustin passive FTP
transfers. Curl will normally always first attempt ta use EPSV before PASV,
but wit dis option, it aint gonna try rockin EPSV.

\fB--epsv\fP can be used ta explicitly enable EPSV again n' again n' again n' \fB--no-epsv\fP
is a alias fo' \fB--disable-epsv\fP.

Disablin EPSV only chizzlez tha passive behavior. Shiiit, dis aint no joke. If you wanna switch to
actizzle mode you need ta use \fI-P, --ftp-port\fP.
.IP "-e, --referer <URL>"
(HTTP) Sendz tha "Referer Page" shiznit ta tha HTTP server n' shit. This can also
be set wit tha \fI-H, --header\fP flag of course.  When used with
\fI-L, --location\fP you can append ";auto" ta tha --referer URL ta make curl
automatically set tha previous URL when it bigs up a Location: header n' shit. The
\&";auto" strang can be used alone, even if you don't set a initial --referer.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "-E, --cert <certificate[:password]>"
(SSL) Tells curl ta use tha specified client certificate file when gettin a
file wit HTTPS, FTPS or another SSL-based protocol. Da certificate must be
in PEM format.  If tha optionizzle password aint specified, it is ghon be queried
for on tha terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Note dat dis option assumes a \&"certificate" file that
is tha private key n' tha private certificate concatenated hommie! See \fI--cert\fP
and \fI--key\fP ta specify dem independently.

If curl is built against tha NSS SSL library then dis option can tell
curl tha nickname of tha certificate ta use within tha NSS database defined
by tha environment variable SSL_DIR (or by default /etc/pki/nssdb). If the
NSS PEM PKCS#11 module (libnsspem.so) be available then PEM filez may be
loaded. Y'all KNOW dat shit, muthafucka! If you wanna bust a gangbangin' file from tha current directory, please precede
it wit "./" prefix, up in order ta avoid mad drama wit a nickname.  If the
nickname gotz nuff ":", it need ta be preceded by "\\" so dat it is not
recognized as password delimiter n' shit.  If tha nickname gotz nuff "\\", it needz to
be escaped as "\\\\" so dat it aint recognized as a escape character.

(iOS n' Mac OS X only) If curl is built against Secure Transport, then the
certificate strang must match tha name of a cold-ass lil certificate thatz up in tha system or
user keychain. I aint talkin' bout chicken n' gravy biatch. Da private key correspondin ta tha certificate, and
certificate chain (if any),  must also be present up in tha keychain.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--engine <name>"
Select tha OpenSSL crypto engine ta use fo' cipher
operations. Use \fI--engine list\fP ta print a list of build-time supported
engines. Note dat not all (or none) of tha engines may be available at
run-time.
.IP "--environment"
(RISC OS ONLY) Sets a range of environment variables, rockin tha names the
\fI-w\fP option supports, ta allow easier extraction of useful shiznit
afta havin run curl.
.IP "--egd-file <file>"
(SSL) Specify tha path name ta tha Entropy Gatherin Daemon socket. Da socket
is used ta seed tha random engine fo' SSL connections. Right back up in yo muthafuckin ass. See also the
\fI--random-file\fP option.
.IP "--cert-type <type>"
(SSL) Tells curl what tha fuck certificate type tha provided certificate is in. I aint talkin' bout chicken n' gravy biatch. PEM,
DER n' ENG is recognized types.  If not specified, PEM be assumed.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--cacert <CA certificate>"
(SSL) Tells curl ta use tha specified certificate file ta verify tha peer n' shit. The
file may contain multiple CA certificates. Da certificate(s) must be up in PEM
format. Normally curl is built ta bust a thugged-out default file fo' this, so dis option
is typically used ta alta dat default file.

curl recognizes tha environment variable named 'CURL_CA_BUNDLE' if it is
set, n' uses tha given path as a path ta a CA cert bundle. This option
overrides dat variable.

Da windows version of curl will automatically look fo' a CA certs file named
\'curl-ca-bundle.crt\', either up in tha same directory as curl.exe, or up in the
Current Workin Directory, or up in any folda along yo' PATH.

If curl is built against tha NSS SSL library, tha NSS PEM PKCS#11 module
(libnsspem.so) need ta be available fo' dis option ta work properly.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--capath <CA certificate directory>"
(SSL) Tells curl ta use tha specified certificate directory ta verify the
peer n' shit. Multiple paths can be provided by separatin dem wit ":" (e.g.
\&"path1:path2:path3"). Da certificates must be up in PEM format, n' if curl is
built against OpenSSL, tha directory must done been processed rockin the
c_rehash utilitizzle supplied wit OpenSSL. Usin \fI--capath\fP can allow
OpenSSL-powered curl ta make SSL-connections much mo' efficiently than using
\fI--cacert\fP if tha \fI--cacert\fP file gotz nuff nuff CA certificates.

If dis option is set, tha default capath value is ghon be ignored, n' if it is
used nuff muthafuckin times, tha last one is ghon be used.
.IP "-f, --fail"
(HTTP) Fail silently (no output at all) on server errors. This is mostly done
to betta enable scripts etc ta betta deal wit failed attempts, n' you can put dat on yo' toast. In
normal cases when a HTTP server fails ta serve up a thugged-out document, it returns an
HTML document statin so (which often also raps bout why n' more). This flag
will prevent curl from outputtin dat n' return error 22.

This method aint fail-safe n' there be occasions where non-successful
response codes will slip through, especially when authentication is involved
(response codes 401 n' 407).
.IP "-F, --form <name=content>"
(HTTP) This lets curl emulate a gangbangin' filled-in form up in which a user has pressed the
submit button. I aint talkin' bout chicken n' gravy biatch. This causes curl ta POST data rockin tha Content-Type
multipart/form-data accordin ta RFC 2388. This enablez uploadin of binary
filez etc. To force tha 'content' part ta be a gangbangin' file, prefix tha file name
with a @ sign. I aint talkin' bout chicken n' gravy biatch. To just git tha content part from a gangbangin' file, prefix tha file name
with tha symbol <. Da difference between @ n' < is then dat @ cook up a gangbangin' file
get attached up in tha post as a gangbangin' file upload, while tha < cook up a text field and
just git tha contents fo' dat text field from a gangbangin' file.

Example, ta bust yo' password file ta tha server, where
\&'password' is tha name of tha form-field ta which /etc/passwd is ghon be the
input:

\fBcurl\fP -F password=@/etc/passwd www.mypasswords.com

To read content from stdin instead of a gangbangin' file, use - as tha filename. This goes
for both @ n' < constructs.

Yo ass can also tell curl what tha fuck Content-Type ta use by rockin 'type=', up in a manner
similar to:

\fBcurl\fP -F "web=@index.html;type=text/html" url.com

or

\fBcurl\fP -F "name=daniel;type=text/foo" url.com

Yo ass can also explicitly chizzle tha name field of a gangbangin' file upload part by setting
filename=, like this:

\fBcurl\fP -F "file=@localfile;filename=nameinpost" url.com

If filename/path gotz nuff ',' or ';', it must be quoted by double-quotes like:

\fBcurl\fP -F "file=@\\"localfile\\";filename=\\"nameinpost\\"" url.com

or

\fBcurl\fP -F 'file=@"localfile";filename="nameinpost"' url.com

Note dat if a gangbangin' filename/path is quoted by double-quotes, any double-quote
or backslash within tha filename must be escaped by backslash.

See further examplez n' details up in tha MANUAL.

This option can be used multiple times.
.IP "--ftp-account [data]"
(FTP) When a FTP server asks fo' "account data" afta user name n' password
has been provided, dis data is busted off rockin tha ACCT command. Y'all KNOW dat shit, muthafucka! (Added in
7.13.0)

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--ftp-alternative-to-user <command>"
(FTP) If authenticatin wit tha USER n' PASS commandz fails, bust this
command. Y'all KNOW dat shit, muthafucka!  When connectin ta Tumbleweedz Secure Transhiznit server over FTPS
usin a cold-ass lil client certificate, rockin "SITE AUTH" will tell tha server ta retrieve
the username from tha certificate. (Added up in 7.15.5)
.IP "--ftp-create-dirs"
(FTP/SFTP) When a FTP or SFTP URL/operation uses a path dat don't
currently exist on tha server, tha standard behavior of curl is to
fail. Usin dis option, curl will instead attempt ta create missing
directories.
.IP "--ftp-method [method]"
(FTP) Control what tha fuck method curl should use ta reach a gangbangin' file on a FTP(S)
server n' shit. Da method argument should be one of tha followin alternatives:
.RS
.IP multicwd
curl do a single CWD operation fo' each path part up in tha given URL. For deep
hierarchies dis means straight-up nuff commands. This is how tha fuck RFC 1738 say it should
be done. This is tha default but tha slowest behavior.
.IP nocwd
curl do no CWD at all. curl will do SIZE, RETR, STOR etc n' give a gangbangin' full
path ta tha server fo' all these commands. This is tha fastest behavior.
.IP singlecwd
curl do one CWD wit tha full target directory n' then operates on tha file
\&"normally" (like up in tha multicwd case). This is somewhat mo' standards
compliant than 'nocwd' but without tha full penalty of 'multicwd'.
.RE
(Added up in 7.15.1)
.IP "--ftp-pasv"
(FTP) Use passive mode fo' tha data connection. I aint talkin' bout chicken n' gravy biatch. Passive is tha internal default
behavior yo, but rockin dis option can be used ta override a previous
\fI-P/-ftp-port\fP option. I aint talkin' bout chicken n' gravy biatch. (Added up in 7.11.0)

If dis option is used nuff muthafuckin times, only tha straight-up original gangsta one is used. Y'all KNOW dat shit, muthafucka! Unfuckin wit an
enforced passive straight-up aint doable but you must then instead enforce the
correct \fI-P, --ftp-port\fP again.

Passive mode means dat curl will try tha EPSV command first n' then PASV,
unless \fI--disable-epsv\fP is used.
.IP "--ftp-skip-pasv-ip"
(FTP) Tell curl ta not use tha IP address tha server suggests up in its response
to curlz PASV command when curl connects tha data connection. I aint talkin' bout chicken n' gravy biatch. Instead curl
will re-use tha same IP address it already uses fo' tha control
connection. I aint talkin' bout chicken n' gravy biatch. (Added up in 7.14.2)

This option has no effect if PORT, EPRT or EPSV is used instead of PASV.
.IP "--ftp-pret"
(FTP) Tell curl ta bust a PRET command before PASV (and EPSV). Certain
FTP servers, mainly drftpd, require dis non-standard command for
directory listings as well as up n' downloadz up in PASV mode.
(Added up in 7.20.x)
.IP "--ftp-ssl-ccc"
(FTP) Use CCC (Clear Command Channel)
Shuts down tha SSL/TLS layer afta authenticating. Da rest of the
control channel communication is ghon be unencrypted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This allows
NAT routas ta follow tha FTP transaction. I aint talkin' bout chicken n' gravy biatch. Da default mode is
passive. Right back up in yo muthafuckin ass. See \fI--ftp-ssl-ccc-mode\fP fo' other modes.
(Added up in 7.16.1)
.IP "--ftp-ssl-ccc-mode [active/passive]"
(FTP) Use CCC (Clear Command Channel)
Sets tha CCC mode. Da passive mode aint gonna initiate tha shutdown yo, but
instead wait fo' tha server ta do it, n' aint gonna reply ta the
shutdown from tha server n' shit. Da actizzle mode initiates tha shutdown and
waits fo' a reply from tha server.
(Added up in 7.16.2)
.IP "--ftp-ssl-control"
(FTP) Require SSL/TLS fo' tha FTP login, clear fo' transfer n' shit.  Allows secure
authentication yo, but non-encrypted data transfers fo' efficiency.  Fails the
transfer if tha server don't support SSL/TLS.  (Added up in 7.16.0)
that can still be used but is ghon be removed up in a gangbangin' future version.
.IP "--form-strin <name=string>"
(HTTP) Similar ta \fI--form\fP except dat tha value strang fo' tha named
parameta is used literally. Leadin \&'@' n' \&'<' characters, n' the
\&';type=' strang up in tha value have no special meaning. Use dis up in preference
to \fI--form\fP if there be a any possibilitizzle dat tha strang value may
accidentally trigger tha \&'@' or \&'<' featurez of \fI--form\fP.
.IP "-g, --globoff"
This option switches off tha "URL globbin parser". When you set dis option,
you can specify URLs dat contain tha lettas {}[] without havin dem being
interpreted by curl itself. Note dat these lettas is not aiiight legal URL
contents but they should be encoded accordin ta tha URI standard.
.IP "-G, --get"
When used, dis option will make all data specified wit \fI-d, --data\fP or
\fI--data-binary\fP ta be used up in a HTTP GET request instead of tha POST
request dat otherwise would be used. Y'all KNOW dat shit, muthafucka! Da data is ghon be appended ta tha URL
with a '?' separator.

If used up in combination wit -I, tha POST data will instead be appended ta the
URL wit a HEAD request.

If dis option is used nuff muthafuckin times, only tha straight-up original gangsta one is used. Y'all KNOW dat shit, muthafucka! This is
because unfuckin wit a GET don't make sense yo, but you should then instead enforce
the alternatizzle method you prefer.
.IP "-H, --header <header>"
(HTTP) Extra header ta use when gettin a wizzy page. Yo ass may specify any number
of extra headers. Note dat if you should add a cold-ass lil custom header dat has the
same name as one of tha internal ones curl would use, yo' externally set
header is ghon be used instead of tha internal one. This allows you ta make even
trickier shiznit than curl would normally do. Yo ass should not replace internally
set headaz without knowin perfectly well what tha fuck you bustin. Remove an
internal header by givin a replacement without content on tha right side of
the colon, as in: -H \&"Host:". If you bust tha custom header wit no-value
then its header must be terminated wit a semicolon, like fuckin \-H
\&"X-Custom-Header;" ta bust "X-Custom-Header:".

curl will make shizzle dat each header you add/replace is busted wit tha proper
end-of-line marker, you should thus \fBnot\fP add dat as a part of tha header
content: do not add newlines or carriage returns, they will only mess thangs up
for yo thugged-out ass.

See also tha \fI-A, --user-agent\fP n' \fI-e, --referer\fP options.

This option can be used multiple times ta add/replace/remove multiple headers.
.IP "--hostpubmd5 <md5>"
(SCP/SFTP) Pass a strang containin 32 hexadecimal digits, n' you can put dat on yo' toast. Da strang should
be tha 128 bit MD5 checksum of tha remote hostz hood key, curl will refuse
the connection wit tha host unless tha md5sums match. (Added up in 7.17.1)
.IP "--ignore-content-length"
(HTTP)
Ignore tha Content-Length header n' shit. This is particularly useful fo' servers
runnin Apache 1.x, which will report incorrect Content-Length fo' files
larger than 2 gigabytes.
.IP "-i, --include"
(HTTP) Include tha HTTP-header up in tha output. Da HTTP-header includes thangs
like server-name, date of tha document, HTTP-version n' more...
.IP "-I, --head"
(HTTP/FTP/FILE)
Fetch tha HTTP-header only dawwwwg! HTTP-servers feature tha command HEAD
which dis uses ta git not a god damn thang but tha header of a thugged-out document. When used
on a FTP or FILE file, curl displays tha file size n' last modification
time only.
.IP "--interface <name>"
Perform a operation rockin a specified intercourse. Yo ass can enta intercourse
name, IP address or host name fo' realz. An example could look like:

 curl --interface eth0:1 http://www.netscape.com/

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "-j, --junk-session-cookies"
(HTTP) When curl is holla'd at ta read dem scooby snacks from a given file, dis option will
make it discard all "session cookies". This will basically have tha same effect
as if a freshly smoked up session is started. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Typical browsers always discard session
cookies when they closed down.
.IP "-J, --remote-header-name"
(HTTP) This option  drops some lyrics ta tha \fI-O, --remote-name\fP option ta use the
server-specified Content-Disposizzle filename instead of extractin a gangbangin' filename
from tha URL.
.IP "-k, --insecure"
(SSL) This option explicitly allows curl ta big-ass up "insecure" SSL connections
and transfers fo' realz. All SSL connections is attempted ta be made secure by using
the CA certificate bundle installed by default. This make all connections
considered "insecure" fail unless \fI-k, --insecure\fP is used.

See dis online resource fo' further details:
\fBhttp://curl.haxx.se/docs/sslcerts.html\fP
.IP "-K, --config <config file>"
Specify which config file ta read curl arguments from. Da config file be a
text file up in which command line arguments can be freestyled which then will be
used as if they was freestyled on tha actual command line. Options n' their
parametas must be specified on tha same config file line, separated by
whitespace, colon, tha equals sign or any combination thereof (however,
the preferred separator is tha equals sign). If tha parameta is ta contain
whitespace, tha parameta must be enclosed within quotes. Within double
quotes, tha followin escape sequences is available: \\\\, \\", \\t, \\n,
\\r n' \\v fo' realz. A backslash precedin any other letta is ignored. Y'all KNOW dat shit, muthafucka! If the
first column of a cold-ass lil config line be a '#' character, tha rest of tha line will be
treated as a cold-ass lil comment. Only write one option per physical line up in tha config
file.

Specify tha filename ta -K, --config as '-' ta make curl read tha file from
stdin.

Note dat ta be able ta specify a URL up in tha config file, you need ta specify
it rockin tha \fI--url\fP option, n' not by simply freestylin tha URL on its own
line. Right back up in yo muthafuckin ass. So, it could look similar ta this:

url = "http://curl.haxx.se/docs/"

Long option names can optionally be given up in tha config file without the
initial double dashes.

When curl is invoked, it always (unless \fI-q\fP is used) checks fo' a thugged-out default
config file n' uses it if found. Y'all KNOW dat shit, muthafucka! Da default config file is checked fo' in
the followin places up in dis order:

1) curl tries ta find tha "home dir": It first checks fo' tha CURL_HOME and
then tha HOME environment variables. Failin that, it uses getpwuid() on
UNIX-like systems (which returns tha home dir given tha current user up in your
system). On Windows, it then checks fo' tha APPDATA variable, or as a last
resort tha '%USERPROFILE%\\Application Data'.

2) On windows, if there is no _curlrc file up in tha home dir, it checks fo' one
in tha same dir tha curl executable is placed. Y'all KNOW dat shit, muthafucka! On UNIX-like systems, it will
simply try ta load .curlrc from tha determined home dir.

.nf
# --- Example file ---
# dis be a cold-ass lil comment
url = "curl.haxx.se"
output = "curlhere.html"
user-agent = "superagent/1.0"

# n' fetch another URL too
url = "curl.haxx.se/docs/manpage.html"
-O
referer = "http://nowhereatall.com/"
# --- End of example file ---
.fi

This option can be used multiple times ta load multiple config files.
.IP "--keepkickin it-time <seconds>"
This option sets tha time a cold-ass lil connection need ta remain idle before sending
keepkickin it probes n' tha time between individual keepkickin it probes. Well shiiiit, it is
currently effectizzle on operatin systems offerin tha TCP_KEEPIDLE and
TCP_KEEPINTVL socket options (meanin Linux, recent AIX, HP-UX n' more). This
option has no effect if \fI--no-keepkickin it\fP is used. Y'all KNOW dat shit, muthafucka! (Added up in 7.18.0)

If dis option is used nuff muthafuckin times, tha last one is ghon be used. Y'all KNOW dat shit, muthafucka! If
unspecified, tha option defaults ta 60 seconds.
.IP "--key <key>"
(SSL/SSH) Private key file name fo' realz. Allows you ta provide yo' private key up in this
separate file.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--key-type <type>"
(SSL) Private key file type. Right back up in yo muthafuckin ass. Specify which type yo' \fI--key\fP provided
private key is. DER, PEM, n' ENG is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If not specified, PEM is
assumed.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--krb <level>"
(FTP) Enable Kerberos authentication n' use. Da level must be entered and
should be one of 'clear', 'safe', 'confidential', or 'private'. Right back up in yo muthafuckin ass. Should you use
a level dat aint one of these, 'private' will instead be used.

This option requires a library built wit kerberos4 or GSSAPI
(GSS-Negotiate) support. This aint straight-up common. I aint talkin' bout chicken n' gravy biatch. Use \fI-V, --version\fP to
see if yo' curl supports dat shit.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "-l, --list-only"
(FTP)
When listin a FTP directory, dis switch forces a name-only view.
Especially useful if you wanna machine-parse tha contentz of a FTP
directory since tha aiiight directory view don't bust a standard look
or format.

This option causes a FTP NLST command ta be sent.  Some FTP servers
list only filez up in they response ta NLST; they do not include
subdirectories n' symbolic links.

.IP "-L, --location"
(HTTP/HTTPS) If tha server reports dat tha axed page has moved ta a
different location (indicated wit a Location: header n' a 3XX response code),
this option will make curl redo tha request on tha freshly smoked up place. If used together
with \fI-i, --include\fP or \fI-I, --head\fP, headaz from all axed pages
will be shown. I aint talkin' bout chicken n' gravy biatch. When authentication is used, curl only sendz its credentials to
the initial host. If a redirect takes curl ta a gangbangin' finger-lickin' different host, it won't be
able ta intercept tha user+password. Y'all KNOW dat shit, muthafucka! See also \fI--location-trusted\fP on how
to chizzle all dis bullshit. Yo ass can limit tha amount of redirects ta follow by rockin the
\fI--max-redirs\fP option.

When curl bigs up a redirect n' tha request aint a plain GET (for example
POST or PUT), it will do tha followin request wit a GET if tha HTTP response
was 301, 302, or 303. If tha response code was any other 3xx code, curl will
re-send tha followin request rockin tha same unmodified method.
.IP "--libcurl <file>"
Append dis option ta any ordinary curl command line, n' yo big-ass booty is ghon git a
libcurl-usin C source code freestyled ta tha file dat do tha equivalent
of what tha fuck yo' command-line operation do!

If dis option is used nuff muthafuckin times, tha last given file name will be
used. Y'all KNOW dat shit, muthafucka! (Added up in 7.16.1)
.IP "--limit-rate <speed>"
Specify tha maximum transfer rate you want curl ta use. This feature is useful
if you gotz a limited pipe n' you'd like yo' transfer not ta use yo' entire
bandwidth.

Da given speed is measured up in bytes/second, unless a suffix be appended.
Appendin 'k' or 'K' will count tha number as kilobytes, 'm' or M' make it
megabytes, while 'g' or 'G' make it gigabytes. Examples: 200K, 3m n' 1G.

Da given rate is tha average speed counted durin tha entire transfer n' shit. It
means dat curl might use higher transfer speedz up in short bursts yo, but over
time it uses no mo' than tha given rate.

If you also use tha \fI-Y, --speed-limit\fP option, dat option will take
precedence n' might cripple tha rate-limitin slightly, ta help keepin the
speed-limit logic working.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--local-port <num>[-num]"
Set a preferred number or range of local port numbers ta use fo' the
connection(s).  Note dat port numbers by nature is a scarce resource that
will be busy at times so settin dis range ta suttin' too narrow might
cause unnecessary connection setup failures. (Added up in 7.15.2)
.IP "--location-trusted"
(HTTP/HTTPS) Like \fI-L, --location\fP yo, but will allow bustin  tha name +
password ta all hosts dat tha joint may redirect to. This may or may not
introduce a securitizzle breach if tha joint redirects you ta a joint ta which
yo dirty ass is gonna bust yo' authentication info (which is plaintext up in tha case of HTTP
Basic authentication).
.IP "-m, --max-time <seconds>"
Maximum time up in secondz dat you allow tha whole operation ta take.  This is
useful fo' preventin yo' batch thangs from hangin fo' minutes cuz of slow
networks or links goin down. I aint talkin' bout chicken n' gravy biatch.  Since 7.32.0, dis option accepts decimal
values yo, but tha actual timeout will decrease up in accuracy as tha specified
timeout increases up in decimal precision. I aint talkin' bout chicken n' gravy biatch.  See also tha \fI--connect-timeout\fP
option.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--mail-auth <address>"
(SMTP) Specify a single address. This is ghon be used ta specify the
authentication address (identity) of a submitted message dat is bein relayed
to another server.

(Added up in 7.25.0)
.IP "--mail-from <address>"
(SMTP) Specify a single address dat tha given mail should git busted from.

(Added up in 7.20.0)
.IP "--max-filesize <bytes>"
Specify tha maximum size (in bytes) of a gangbangin' file ta download. Y'all KNOW dat shit, muthafucka! If tha file
axed is larger than dis value, tha transfer aint gonna start n' curl will
return wit exit code 63.

\fBNOTE:\fP Da file size aint always known prior ta download, n' fo' such
filez dis option has no effect even if tha file transfer endz up bein larger
than dis given limit. This concerns both FTP n' HTTP transfers.
.IP "--mail-rcpt <address>"
(SMTP) Specify a single address dat tha given mail should git busted to. This
option can be used multiple times ta specify nuff recipients.

(Added up in 7.20.0)
.IP "--max-redirs <num>"
Set maximum number of redirection-followings allowed. Y'all KNOW dat shit, muthafucka! If \fI-L, --location\fP
is used, dis option can be used ta prevent curl from followin redirections
\&"in absurdum". By default, tha limit is set ta 50 redirections. Right back up in yo muthafuckin ass. Set this
option ta -1 ta make it limitless.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--metalink"
This option can tell curl ta parse n' process a given URI as Metalink file
(both version 3 n' 4 (RFC 5854) is supported) n' make use of tha mirrors
listed within fo' failover if there be errors (like fuckin tha file or server not
bein available). Well shiiiit, it will also verify tha hash of tha file afta tha download
completes. Da Metalink file itself is downloaded n' processed up in memory and
not stored up in tha local file system.

Example ta bust a remote Metalink file:

\fBcurl\fP --metalink http://www.example.com/example.metalink

To bust a Metalink file up in tha local file system, use FILE protocol
(file://):

\fBcurl\fP --metalink file://example.metalink

Please note dat if FILE protocol is disabled, there is no way ta use
a local Metalink file all up in tha time of dis writin fo' realz. Also note dat if
\fI--metalink\fP n' \fI--include\fP is used together, \fI--include\fP will be
ignored. Y'all KNOW dat shit, muthafucka! This is cuz includin headaz up in tha response will break
Metalink parser n' if tha headaz is included up in tha file busted lyrics about
in Metalink file, hash check will fail.

(Added up in 7.27.0, if built against tha libmetalink library.)
.IP "-n, --netrc"
Makes curl scan tha \fI.netrc\fP (\fI_netrc\fP on Windows) file up in tha user's
home directory fo' login name n' password. Y'all KNOW dat shit, muthafucka! This is typically used fo' FTP on
UNIX. If used wit HTTP, curl will enable user authentication. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See
.BR netrc(4)
or
.BR ftp(1)
for details on tha file format. Curl aint gonna diss if dat file
doesn't have tha right permissions (it should not be either ghetto- or
group-readable). Da environment variable "HOME" is used ta find tha home
directory.

A quick n' straight-up simple example of how tha fuck ta setup a \fI.netrc\fP ta allow curl
to FTP ta tha machine host.domain.com wit user name \&'myself' n' password
\&'secret' should look similar to:

.B "machine host.domain.com login mah dirty ass password secret"
.IP "-N, --no-buffer"
Disablez tha bufferin of tha output stream. In aiiight work thangs, curl
will bust a standard buffered output stream dat gonna git tha effect dat it
will output tha data up in chunks, not necessarily exactly when tha data arrives.
Usin dis option will disable dat buffering.

Note dat dis is tha negated option name documented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Yo ass can thus use
\fI--buffer\fP ta enforce tha buffering.
.IP "--netrc-file"
This option is similar ta \fI--netrc\fP, except dat you provide tha path
(absolute or relative) ta tha netrc file dat Curl should use.
Yo ass can only specify one netrc file per invocation. I aint talkin' bout chicken n' gravy biatch. If several
\fI--netrc-file\fP options is provided, only tha \fBlast one\fP is ghon be used.
(Added up in 7.21.5)

This option overrides any use of \fI--netrc\fP as they is mutually exclusive.
It will also abide by \fI--netrc-optional\fP if specified.

.IP "--netrc-optional"
Straight-up similar ta \fI--netrc\fP yo, but dis option make tha .netrc usage
\fBoptional\fP n' not mandatory as tha \fI--netrc\fP option do.

.IP "--negotiate"
(HTTP) Enablez GSS-Negotiate authentication. I aint talkin' bout chicken n' gravy biatch. Da GSS-Negotiate method was
designed by Microsizzlez n' is used up in they wizzy applications. Well shiiiit, it is primarily
meant as a support fo' Kerberos5 authentication but may be also used along
with another authentication method. Y'all KNOW dat shit, muthafucka! For mo' shiznit peep IETF draft
draft-brezak-spnego-http-04.txt.

If you wanna enable Negotiate fo' yo' proxy authentication, then use
\fI--proxy-negotiate\fP.

This option requires a library built wit GSSAPI support. This is
not straight-up common. I aint talkin' bout chicken n' gravy biatch. Use \fI-V, --version\fP ta peep if yo' version supports
GSS-Negotiate.

When rockin dis option, you must also provide a gangbangin' fake \fI-u, --user\fP option to
activate tha authentication code properly. Right back up in yo muthafuckin ass. Sendin a '-u :' is enough as the
user name n' password from tha \fI-u\fP option aren't straight-up used.

If dis option is used nuff muthafuckin times, only tha straight-up original gangsta one is used.
.IP "--no-keepkickin it"
Disablez tha use of keepkickin it lyrics on tha TCP connection, as by default
curl enablez em.

Note dat dis is tha negated option name documented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Yo ass can thus use
\fI--keepkickin it\fP ta enforce keepkickin it.
.IP "--no-sessionid"
(SSL) Disable curlz use of SSL session-ID caching.  By default all transfers
are done rockin tha cache. Note dat while not a god damn thang should eva git hurt by
attemptin ta reuse SSL session-IDs, there seem ta be fucked up SSL
implementations up in tha wild dat may require you ta disable dis up in order for
you ta succeed. Y'all KNOW dat shit, muthafucka! (Added up in 7.16.0)

Note dat dis is tha negated option name documented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Yo ass can thus use
\fI--sessionid\fP ta enforce session-ID caching.
.IP "--noproxy <no-proxy-list>"
Comma-separated list of hosts which do not bust a proxy, if one is specified.
Da only wildcard be a single * character, which matches all hosts, and
effectively disablez tha proxy. Each name up in dis list is matched as either
a domain which gotz nuff tha hostname, or tha hostname itself. For example,
local.com would match local.com, local.com:80, n' www.local.com yo, but not
www.notlocal.com.  (Added up in 7.19.4).
.IP "--ntlm"
(HTTP) Enablez NTLM authentication. I aint talkin' bout chicken n' gravy biatch. Da NTLM authentication method was
designed by Microsizzlez n' is used by Pt IIS wizzy servers. Well shiiiit, it aint nuthin but a proprietary
protocol, reverse-engineered by smart-ass playas n' implemented up in curl based
on they efforts, n' you can put dat on yo' toast. This kind of behavior should not be endorsed, you should
encourage all dem fools dat uses NTLM ta switch ta a hood n' documented
authentication method instead, like fuckin Digest.

If you wanna enable NTLM fo' yo' proxy authentication, then use
\fI--proxy-ntlm\fP.

This option requires a library built wit SSL support. Use
\fI-V, --version\fP ta peep if yo' curl supports NTLM.

If dis option is used nuff muthafuckin times, only tha straight-up original gangsta one is used.
.IP "-o, --output <file>"
Write output ta <file> instead of stdout. If yo ass is rockin {} or [] ta fetch
multiple documents, you can use '#' followed by a number up in tha <file>
specifier n' shit. That variable is ghon be replaced wit tha current strang fo' tha URL
bein fetched. Y'all KNOW dat shit, muthafucka! Like in:

  curl http://{one,two}.site.com -o "file_#1.txt"

or use nuff muthafuckin variablez like:

  curl http://{site,host}.host[1-5].com -o "#1_#2"

Yo ass may use dis option as nuff times as tha number of URLs you have.

See also tha \fI--create-dirs\fP option ta create tha local directories
dynamically. Right back up in yo muthafuckin ass. Specifyin tha output as '-' (a single dash) will force the
output ta be done ta stdout.
.IP "-O, --remote-name"
Write output ta a local file named like tha remote file we get. (Only tha file
part of tha remote file is used, tha path is cut off.)

Da remote file name ta use fo' savin is extracted from tha given URL,
nothang else.

Consequentially, tha file is ghon be saved up in tha current hustlin directory. If
you want tha file saved up in a gangbangin' finger-lickin' different directory, make shizzle you chizzle current
workin directory before you invoke curl wit tha \fB-O, --remote-name\fP flag!

Yo ass may use dis option as nuff times as tha number of URLs you have.
.IP "-p, --proxytunnel"
When a HTTP proxy is used (\fI-x, --proxy\fP), dis option will cause non-HTTP
protocols ta attempt ta tunnel all up in tha proxy instead of merely rockin it to
do HTTP-like operations. Da tunnel approach is made wit tha HTTP proxy
CONNECT request n' requires dat tha proxy allows direct connect ta the
remote port number curl wants ta tunnel all up in to.
.IP "-P, --ftp-port <address>"
(FTP) Reverses tha default initiator/listener rolez when connectin with
FTP. This switch make curl use actizzle mode. In practice, curl then  drops some lyrics ta the
server ta connect back ta tha clientz specified address n' port, while
passive mode asks tha server ta setup a IP address n' port fo' it ta connect
to. <address> should be one of:
.RS
.IP intercourse
i.e "eth0" ta specify which intercoursez IP address you wanna use (Unix only)
.IP "IP address"
i.e "192.168.10.1" ta specify tha exact IP address
.IP "host name"
i.e "my.host.domain" ta specify tha machine
.IP "-"
make curl pick tha same IP address dat be already used fo' tha control
connection
.RE

If dis option is used nuff muthafuckin times, tha last one is ghon be used. Y'all KNOW dat shit, muthafucka! Disable the
use of PORT wit \fI--ftp-pasv\fP. Disable tha attempt ta use tha EPRT command
instead of PORT by rockin \fI--disable-eprt\fP. EPRT is straight-up PORT++.

Startin up in 7.19.5, you can append \&":[start]-[end]\&" ta tha right of the
address, ta tell curl what tha fuck TCP port range ta use. That means you specify a
port range, from a lower ta a higher number n' shiznit fo' realz. A single number works as well,
but do note dat it increases tha risk of failure since tha port may not be
available.
.IP "--pass <phrase>"
(SSL/SSH) Passphrase fo' tha private key

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--post301"
(HTTP) Tells curl ta respect RFC 2616/10.3.2 n' not convert POST requests
into GET requests when followin a 301 redirection. I aint talkin' bout chicken n' gravy biatch. Da non-RFC behaviour is
ubiquitous up in wizzy browsers, so curl do tha conversion by default ta maintain
consistency. But fuck dat shiznit yo, tha word on tha street is dat a server may require a POST ta remain a POST afta such
a redirection. I aint talkin' bout chicken n' gravy biatch. This option is meaningful only when rockin \fI-L, --location\fP
(Added up in 7.17.1)
.IP "--post302"
(HTTP) Tells curl ta respect RFC 2616/10.3.2 n' not convert POST requests
into GET requests when followin a 302 redirection. I aint talkin' bout chicken n' gravy biatch. Da non-RFC behaviour is
ubiquitous up in wizzy browsers, so curl do tha conversion by default ta maintain
consistency. But fuck dat shiznit yo, tha word on tha street is dat a server may require a POST ta remain a POST afta such
a redirection. I aint talkin' bout chicken n' gravy biatch. This option is meaningful only when rockin \fI-L, --location\fP
(Added up in 7.19.1)
.IP "--post303"
(HTTP) Tells curl ta respect RFC 2616/10.3.2 n' not convert POST requests
into GET requests when followin a 303 redirection. I aint talkin' bout chicken n' gravy biatch. Da non-RFC behaviour is
ubiquitous up in wizzy browsers, so curl do tha conversion by default ta maintain
consistency. But fuck dat shiznit yo, tha word on tha street is dat a server may require a POST ta remain a POST afta such
a redirection. I aint talkin' bout chicken n' gravy biatch. This option is meaningful only when rockin \fI-L, --location\fP
(Added up in 7.26.0)
.IP "--proto <protocols>"
Tells curl ta use tha listed protocols fo' its initial retrieval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Protocols
are evaluated left ta right, is comma separated, n' is each a protocol
name or 'all', optionally prefixed by zero or mo' modifiers fo' realz. Available
modifiers are:
.RS
.TP 3
.B +
Permit dis protocol up in addizzle ta protocols already permitted (this is
the default if no modifier is used).
.TP
.B -
Deny dis protocol, removin it from tha list of protocols already permitted.
.TP
.B =
Permit only dis protocol (ignorin tha list already permitted), though
subject ta lata modification by subsequent entries up in tha comma separated
list.
.RE
.IP
For example:
.RS
.TP 15
.B --proto -ftps
uses tha default protocols yo, but disablez ftps
.TP
.B  --proto -all,https,+http
only enablez http n' https
.TP
.B --proto =http,https
also only enablez http n' https
.RE
.IP
Unknown protocols produce a warning. This allows scripts ta safely rely on
bein able ta disable potentially fucked up protocols, without relyin upon
support fo' dat protocol bein built tha fuck into curl ta avoid a error.

This option can be used multiple times, up in which case tha effect is tha same
as concatenatin tha protocols tha fuck into one instizzle of tha option.

(Added up in 7.20.2)
.IP "--proto-redir <protocols>"
Tells curl ta use tha listed protocols afta a redirect. Right back up in yo muthafuckin ass. See --proto for
how protocols is represented.

(Added up in 7.20.2)
.IP "--proxy-anyauth"
Tells curl ta pick a suitable authentication method when communicatin with
the given proxy. This might cause a extra request/response round-trip. (Added
in 7.13.2)
.IP "--proxy-basic"
Tells curl ta use HTTP Basic authentication when communicatin wit tha given
proxy. Use \fI--basic\fP fo' enablin HTTP Basic wit a remote host. Basic is
the default authentication method curl uses wit proxies.
.IP "--proxy-digest"
Tells curl ta use HTTP Digest authentication when communicatin wit tha given
proxy. Use \fI--digest\fP fo' enablin HTTP Digest wit a remote host.
.IP "--proxy-negotiate"
Tells curl ta use HTTP Negotiate authentication when communicating
with tha given proxy. Use \fI--negotiate\fP fo' enablin HTTP Negotiate
with a remote host. (Added up in 7.17.1)
.IP "--proxy-ntlm"
Tells curl ta use HTTP NTLM authentication when communicatin wit tha given
proxy. Use \fI--ntlm\fP fo' enablin NTLM wit a remote host.
.IP "--proxy1.0 <proxyhost[:port]>"
Use tha specified HTTP 1.0 proxy. If tha port number aint specified, it is
assumed at port 1080.

Da only difference between dis n' tha HTTP proxy option (\fI-x, --proxy\fP),
is dat attempts ta use CONNECT all up in tha proxy will specify a HTTP 1.0
protocol instead of tha default HTTP 1.1.
.IP "--pubkey <key>"
(SSH) Public key file name fo' realz. Allows you ta provide yo' hood key up in this
separate file.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "-q"
If used as tha straight-up original gangsta parameta on tha command line, tha \fIcurlrc\fP config
file aint gonna be read n' used. Y'all KNOW dat shit, muthafucka! See tha \fI-K, --config\fP fo' details on the
default config file search path.
.IP "-Q, --quote <command>"
(FTP/SFTP) Send a arbitrary command ta tha remote FTP or SFTP server n' shit. Quote
commandz is busted BEFORE tha transfer takes place (just afta tha initial PWD
command up in a FTP transfer, ta be exact). To make commandz take place afta a
successful transfer, prefix dem wit a thugged-out dash '-'.  To make commandz be sent
afta curl has chizzled tha hustlin directory, just before tha transfer
command(s), prefix tha command wit a '+' (this is only supported for
FTP). Yo ass may specify any number of commands. If tha server returns failure
for one of tha commands, tha entire operation is ghon be aborted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Yo ass must send
syntactically erect FTP commandz as RFC 959 defines ta FTP servers, or one
of tha commandz listed below ta SFTP servers.  This option can be used
multiple times. When bustin lyrics ta a FTP server, prefix tha command wit an
asterisk (*) ta make curl continue even if tha command fails as by default
curl will stop at first failure.

SFTP be a funky-ass binary protocol. Unlike fo' FTP, curl interprets SFTP quote commands
itself before bustin  dem ta tha server n' shit.  File names may be quoted
shell-style ta embed spaces or special characters.  Peepin is tha list of
all supported SFTP quote commands:
.RS
.IP "chgrp crew file"
Da chgrp command sets tha crew ID of tha file named by tha file operand to
the crew ID specified by tha crew operand. Y'all KNOW dat shit, muthafucka! Da crew operand be a thugged-out decimal
integer crew ID.
.IP "chmod mode file"
Da chmod command modifies tha file mode bitz of tha specified file. The
mode operand be a octal integer mode number.
.IP "chown user file"
Da chown command sets tha balla of tha file named by tha file operand ta the
user ID specified by tha user operand. Y'all KNOW dat shit, muthafucka! Da user operand be a thugged-out decimal
integer user ID.
.IP "ln source_file target_file"
Da ln n' symlink commandz create a symbolic link all up in tha target_file location
pointin ta tha source_file location.
.IP "mkdir directory_name"
Da mkdir command creates tha directory named by tha directory_name operand.
.IP "pwd"
Da pwd command returns tha absolute pathname of tha current hustlin directory.
.IP "rename source target"
Da rename command renames tha file or directory named by tha source
operand ta tha destination path named by tha target operand.
.IP "rm file"
Da rm command removes tha file specified by tha file operand.
.IP "rmdir directory"
Da rmdir command removes tha directory entry specified by tha directory
operand, provided it is empty.
.IP "symlink source_file target_file"
See ln.
.RE
.IP "-r, --range <range>"
(HTTP/FTP/SFTP/FILE) Retrieve a funky-ass byte range (i.e a partial document) from a
HTTP/1.1, FTP or SFTP server or a local FILE. Ranges can be specified
in a fuckin shitload of ways.
.RS
.TP 10
.B 0-499
specifies tha straight-up original gangsta 500 bytes
.TP
.B 500-999
specifies tha second 500 bytes
.TP
.B -500
specifies tha last 500 bytes
.TP
.B 9500-
specifies tha bytes from offset 9500 n' forward
.TP
.B 0-0,-1
specifies tha straight-up original gangsta n' last byte only(*)(H)
.TP
.B 500-700,600-799
specifies 300 bytes from offset 500(H)
.TP
.B 100-199,500-599
specifies two separate 100-byte ranges(*)(H)
.RE

(*) = NOTE dat dis will cause tha server ta reply wit a multipart
response!

Only digit charactas (0-9) is valid up in tha 'start' n' 'stop' fieldz of the
\&'start-stop' range syntax. If a non-digit characta is given up in tha range,
the serverz response is ghon be unspecified, dependin on tha server's
configuration.

Yo ass should also be aware dat nuff HTTP/1.1 servers aint gots dis feature
enabled, so dat when you attempt ta git a range, you gonna instead git tha whole
document.

FTP n' SFTP range downloadz only support tha simple 'start-stop' syntax
(optionally wit one of tha numbers omitted). FTP use dependz on tha extended
FTP command SIZE.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "-R, --remote-time"
When used, dis will make curl attempt ta figure up tha timestamp of the
remote file, n' if dat be available make tha local file git dat same
timestamp.
.IP "--random-file <file>"
(SSL) Specify tha path name ta file containin what tha fuck is ghon be considered as
random data. Da data is used ta seed tha random engine fo' SSL connections.
See also tha \fI--egd-file\fP option.
.IP "--raw"
(HTTP) When used, it disablez all internal HTTP decodin of content or transfer
encodings n' instead make dem passed on unaltered, raw. (Added up in 7.16.2)
.IP "--remote-name-all"
This option chizzlez tha default action fo' all given URLs ta be dealt wit as
if \fI-O, --remote-name\fP was used fo' each one. Right back up in yo muthafuckin ass. So if you wanna disable
that fo' a specific URL afta \fI--remote-name-all\fP has been used, you must
use "-o -" or \fI--no-remote-name\fP. (Added up in 7.19.0)
.IP "--resolve <host:port:address>"
Provide a cold-ass lil custom address fo' a specific host n' port pair. Shiiit, dis aint no joke. Usin this, you
can make tha curl requests(s) bust a specified address n' prevent the
otherwise normally resolved address ta be used. Y'all KNOW dat shit, muthafucka! Consider it a sort of
/etc/hosts alternatizzle provided on tha command line. Da port number should be
the number used fo' tha specific protocol tha host is ghon be used for. Shiiit, dis aint no joke. Well shiiiit, it means
you need nuff muthafuckin entries if you wanna provide address fo' tha same host but
different ports.

This option can be used nuff times ta add nuff host names ta resolve.

(Added up in 7.21.3)
.IP "--retry <num>"
If a transient error is returned when curl tries ta big-ass up a transfer, it
will retry dis number of times before givin up. Right back up in yo muthafuckin ass. Settin tha number ta 0
makes curl do no retries (which is tha default). Transient error means either:
a timeout, a FTP 4xx response code or a HTTP 5xx response code.

When curl be bout ta retry a transfer, it will first wait one second n' then
for all forthcomin retries it will double tha waitin time until it reaches
10 minutes which then is ghon be tha delay between tha rest of tha retries. Put ya muthafuckin choppers up if ya feel dis!  By
usin \fI--retry-delay\fP you disable dis exponential backoff algorithm. Right back up in yo muthafuckin ass. See
also \fI--retry-max-time\fP ta limit tha total time allowed for
retries. Put ya muthafuckin choppers up if ya feel dis! (Added up in 7.12.3)

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--retry-delay <seconds>"
Make curl chill dis amount of time before each retry when a transfer has
failed wit a transient error (it chizzlez tha default backoff time algorithm
between retries). This option is only bangin-ass if \fI--retry\fP be also
used. Y'all KNOW dat shit, muthafucka! Settin dis delay ta zero will make curl use tha default backoff time.
(Added up in 7.12.3)

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--retry-max-time <seconds>"
Da retry timer is reset before tha straight-up original gangsta transfer attempt. Retries will be
done as usual (see \fI--retry\fP) as long as tha timer aint reached this
given limit. Notice dat if tha timer aint reached tha limit, tha request
will be made n' while struttin, it may take longer than dis given time
period. Y'all KNOW dat shit, muthafucka! To limit a single request\z maximum time, use \fI-m, --max-time\fP.
Set dis option ta zero ta not timeout retries. Put ya muthafuckin choppers up if ya feel dis! (Added up in 7.12.3)

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "-s, --silent"
Silent or on tha down-low mode. Don't show progress meta or error lyrics.  Makes Curl
mute. Well shiiiit, it will still output tha data you ask for, potentially even ta the
terminal/stdout unless you redirect dat shit.
.IP "--sasl-ir"
Enable initial response up in SASL authentication.
(Added up in 7.31.0)
.IP "-S, --show-error"
When used wit \fI-s\fP it make curl show a error message if it fails.
.IP "--ssl"
(FTP, POP3, IMAP, SMTP) Try ta use SSL/TLS fo' tha connection. I aint talkin' bout chicken n' gravy biatch.  Reverts ta a
non-secure connection if tha server don't support SSL/TLS.  See also
\fI--ftp-ssl-control\fP n' \fI--ssl-reqd\fP fo' different levels of
encryption required. Y'all KNOW dat shit, muthafucka! (Added up in 7.20.0)

This option was formerly known as \fI--ftp-ssl\fP (Added up in 7.11.0). That
option name can still be used but is ghon be removed up in a gangbangin' future version.
.IP "--ssl-reqd"
(FTP, POP3, IMAP, SMTP) Require SSL/TLS fo' tha connection. I aint talkin' bout chicken n' gravy biatch.  Terminates the
connection if tha server don't support SSL/TLS. (Added up in 7.20.0)

This option was formerly known as \fI--ftp-ssl-reqd\fP (added up in 7.15.5). That
option name can still be used but is ghon be removed up in a gangbangin' future version.
.IP "--ssl-allow-beast"
(SSL) This option  drops some lyrics ta curl ta not work round a securitizzle flaw up in tha SSL3
and TLS1.0 protocols known as BEAST.  If dis option aint used, tha SSL layer
may use work-aroundz known ta cause interoperabilitizzle problems wit some older
SSL implementations. WARNING: dis option loosens tha SSL security, n' by
usin dis flag you ask fo' exactly dis shit.  (Added up in 7.25.0)
.IP "--socks4 <host[:port]>"
Use tha specified SOCKS4 proxy. If tha port number aint specified, it is
assumed at port 1080. (Added up in 7.15.2)

This option overrides any previous use of \fI-x, --proxy\fP, as they are
mutually exclusive.

Since 7.21.7, dis option is superfluous since you can specify a socks4 proxy
with \fI-x, --proxy\fP rockin a socks4:// protocol prefix.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--socks4a <host[:port]>"
Use tha specified SOCKS4a proxy. If tha port number aint specified, it is
assumed at port 1080. (Added up in 7.18.0)

This option overrides any previous use of \fI-x, --proxy\fP, as they are
mutually exclusive.

Since 7.21.7, dis option is superfluous since you can specify a socks4a proxy
with \fI-x, --proxy\fP rockin a socks4a:// protocol prefix.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--socks5-hostname <host[:port]>"
Use tha specified SOCKS5 proxy (and let tha proxy resolve tha host name). If
the port number aint specified, it be assumed at port 1080. (Added in
7.18.0)

This option overrides any previous use of \fI-x, --proxy\fP, as they are
mutually exclusive.

Since 7.21.7, dis option is superfluous since you can specify a socks5
hostname proxy wit \fI-x, --proxy\fP rockin a socks5h:// protocol prefix.

If dis option is used nuff muthafuckin times, tha last one is ghon be used. Y'all KNOW dat shit, muthafucka! (This option
was previously wrongly documented n' used as --socks without tha number
appended.)
.IP "--socks5 <host[:port]>"
Use tha specified SOCKS5 proxy - but resolve tha host name locally. If the
port number aint specified, it be assumed at port 1080.

This option overrides any previous use of \fI-x, --proxy\fP, as they are
mutually exclusive.

Since 7.21.7, dis option is superfluous since you can specify a socks5 proxy
with \fI-x, --proxy\fP rockin a socks5:// protocol prefix.

If dis option is used nuff muthafuckin times, tha last one is ghon be used. Y'all KNOW dat shit, muthafucka! (This option
was previously wrongly documented n' used as --socks without tha number
appended.)

This option (as well as \fI--socks4\fP) do not work wit IPV6, FTPS or LDAP.
.IP "--socks5-gssapi-service <servicename>"
Da default steez name fo' a socks server is rcmd/server-fqdn. I aint talkin' bout chicken n' gravy biatch. This option
allows you ta chizzle dat shit.

Examples: --socks5 proxy-name \fI--socks5-gssapi-service\fP sockd would use
sockd/proxy-name --socks5 proxy-name \fI--socks5-gssapi-service\fP
sockd/real-name would use sockd/real-name fo' cases where tha proxy-name do
not match tha principal name.  (Added up in 7.19.4).
.IP "--socks5-gssapi-nec"
As part of tha gssapi negotiation a protection mode is negotiated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. RFC 1961
says up in section 4.3/4.4 it should be protected yo, but tha NEC reference
implementation do not.  Da option \fI--socks5-gssapi-nec\fP allows the
unprotected exchange of tha protection mode negotiation. I aint talkin' bout chicken n' gravy biatch. (Added up in 7.19.4).
.IP "--stderr <file>"
Redirect all writes ta stderr ta tha specified file instead. Y'all KNOW dat shit, muthafucka! If tha file name
is a plain '-', it is instead freestyled ta stdout.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "-t, --telnet-option <OPT=val>"
Pass options ta tha telnet protocol. Right back up in yo muthafuckin ass. Supported options are:

TTYPE=<term> Sets tha terminal type.

XDISPLOC=<X display> Sets tha X display location.

NEW_ENV=<var,val> Sets a environment variable.
.IP "-T, --upload-file <file>"
This transfers tha specified local file ta tha remote URL. If there is no file
part up in tha specified URL, Curl will append tha local file name. NOTE dat you
must bust a trailin / on tha last directory ta straight-up prove ta Curl dat there
is no file name or curl is ghon be thinkin dat yo' last directory name is tha remote
file name ta use. That will most likely cause tha upload operation ta fail. If
this is used on a HTTP(S) server, tha PUT command is ghon be used.

Use tha file name "-" (a single dash) ta use stdin instead of a given file.
Alternately, tha file name "." (a single period) may be specified instead
of "-" ta use stdin up in non-blockin mode ta allow readin server output
while stdin is bein uploaded.

Yo ass can specify one -T fo' each URL on tha command line. Each -T + URL pair
specifies what tha fuck ta upload n' ta where, so peek-a-boo, clear tha way, I be comin' thru fo'sho. curl also supports "globbing" of tha -T
argument, meanin dat you can upload multiple filez ta a single URL by using
the same URL globbin steez supported up in tha URL, like this:

curl -T "{file1,file2}" http://www.uploadtothissite.com

or even

curl -T "img[1-1000].png" ftp://ftp.picturemania.com/upload/
.IP "--tcp-nodelay"
Turn on tha TCP_NODELAY option. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See tha \fIcurl_easy_setopt(3)\fP playa page for
details bout dis option. I aint talkin' bout chicken n' gravy biatch. (Added up in 7.11.2)
.IP "--tftp-blksize <value>"
(TFTP) Set TFTP BLKSIZE option (must be >512). This is tha block size that
curl will try ta use when transferrin data ta or from a TFTP server n' shit. By
default 512 bytes is ghon be used.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.

(Added up in 7.20.0)
.IP "--tlsauthtype <authtype>"
Set TLS authentication type. Currently, tha only supported option is "SRP",
for TLS-SRP (RFC 5054). If \fI--tlsuser\fP n' \fI--tlspassword\fP are
specified but \fI--tlsauthtype\fP is not, then dis option defaults ta "SRP".
(Added up in 7.21.4)
.IP "--tlsuser <user>"
Set username fo' use wit tha TLS authentication method specified with
\fI--tlsauthtype\fP. Requires dat \fI--tlspassword\fP also be set.  (Added in
7.21.4)
.IP "--tlspassword <password>"
Set password fo' use wit tha TLS authentication method specified with
\fI--tlsauthtype\fP. Requires dat \fI--tlsuser\fP also be set.  (Added in
7.21.4)
.IP "--tr-encoding"
(HTTP) Request a cold-ass lil compressed Transfer-Encodin response rockin one of the
algorithms curl supports, n' uncompress tha data while receivin dat shit.

(Added up in 7.21.6)
.IP "--trace <file>"
Enablez a gangbangin' full trace dump of all incomin n' outgoin data, including
descriptizzle shiznit, ta tha given output file. Use "-" as filename ta have
the output busted ta stdout.

This option overrides previous usez of \fI-v, --verbose\fP or
\fI--trace-ascii\fP.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--trace-ascii <file>"
Enablez a gangbangin' full trace dump of all incomin n' outgoin data, including
descriptizzle shiznit, ta tha given output file. Use "-" as filename ta have
the output busted ta stdout.

This is straight-up similar ta \fI--trace\fP yo, but leaves up tha hex part n' only
shows tha ASCII part of tha dump. Well shiiiit, it make smalla output dat might be easier
to read fo' untrained humans.

This option overrides previous usez of \fI-v, --verbose\fP or \fI--trace\fP.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--trace-time"
Prependz a time stamp ta each trace or verbose line dat curl displays.
(Added up in 7.14.0)
.IP "-u, --user <user:password>"
Specify tha user name n' password ta use fo' server authentication. I aint talkin' bout chicken n' gravy biatch. Overrides
\fI-n, --netrc\fP n' \fI--netrc-optional\fP.

If you just give tha user name (without enterin a cold-ass lil colon) curl will prompt for
a password.

If you use a SSPI-enabled curl binary n' do NTLM authentication, you can
force curl ta pick up tha user name n' password from yo' environment by
simply specifyin a single colon wit dis option: "-u :".

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "-U, --proxy-user <user:password>"
Specify tha user name n' password ta use fo' proxy authentication.

If you use a SSPI-enabled curl binary n' do NTLM authentication, you can
force curl ta pick up tha user name n' password from yo' environment by
simply specifyin a single colon wit dis option: "-U :".

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "--url <URL>"
Specify a URL ta fetch. This option is mostly handy when you wanna specify
URL(s) up in a cold-ass lil config file.

This option may be used any number of times. To control where dis URL is
written, use tha \fI-o, --output\fP or tha \fI-O, --remote-name\fP options.
.IP "-v, --verbose"
Makes tha fetchin mo' verbose/talkative. Mostly useful fo' debuggin fo' realz. A line
startin wit '>' means "header data" busted by curl, '<' means "header data"
received by curl dat is hidden up in aiiight cases, n' a line startin wit '*'
means additionizzle info provided by curl.

Note dat if you only want HTTP headaz up in tha output, \fI-i, --include\fP
might be tha option you lookin for.

If you be thinkin dis option still don't hit you wit enough details, consider using
\fI--trace\fP or \fI--trace-ascii\fP instead.

This option overrides previous usez of \fI--trace-ascii\fP or \fI--trace\fP.

Use \fI-s, --silent\fP ta make curl on tha fuckin' down-low.
.IP "-w, --write-out <format>"
Defines what tha fuck ta display on stdout afta a cold-ass lil completed n' successful
operation. I aint talkin' bout chicken n' gravy biatch. Da format be a strang dat may contain plain text mixed wit any
number of variables. Da strang can be specified as "string", ta git read from
a particular file you specify it "@filename" n' ta tell curl ta read the
format from stdin you write "@-".

Da variablez present up in tha output format is ghon be substituted by tha value or
text dat curl be thinkin fit, as busted lyrics bout below fo' realz. All variablez is specified
as %{variable_name} n' ta output a aiiight % you just write dem as
%%. Yo ass can output a newline by rockin \\n, a cold-ass lil carriage return wit \\r n' a tab
space wit \\t.

.B NOTE:
Da %-symbol be a special symbol up in tha win32-environment, where all
occurrencez of % must be doubled when rockin dis option.

Da variablez available are:
.RS
.TP 15
.B content_type
Da Content-Type of tha axed document, if there was any.
.TP
.B filename_effective
Da illest filename dat curl writes up to. This is only meaningful if curl
is holla'd at ta write ta a gangbangin' file wit tha \fI--remote-name\fP or \fI--output\fP
option. I aint talkin' bout chicken n' gravy biatch. It aint nuthin but most useful up in combination wit tha \fI--remote-header-name\fP
option. I aint talkin' bout chicken n' gravy biatch. (Added up in 7.25.1)
.TP
.B ftp_entry_path
Da initial path curl ended up in when loggin on ta tha remote FTP
server n' shit. (Added up in 7.15.4)
.TP
.B http_code
Da numerical response code dat was found up in tha last retrieved HTTP(S) or
FTP(s) transfer n' shit. In 7.18.2 tha alias \fBresponse_code\fP was added ta show the
same info.
.TP
.B http_connect
Da numerical code dat was found up in tha last response (from a proxy) ta a
curl CONNECT request. (Added up in 7.12.4)
.TP
.B local_ip
Da IP address of tha local end of da most thugged-out recently done connection - can be
either IPv4 or IPv6 (Added up in 7.29.0)
.TP
.B local_port
Da local port number of da most thugged-out recently done connection (Added up in 7.29.0)
.TP
.B num_connects
Number of freshly smoked up connects made up in tha recent transfer n' shit. (Added up in 7.12.3)
.TP
.B num_redirects
Number of redirects dat was followed up in tha request. (Added up in 7.12.3)
.TP
.B redirect_url
When a HTTP request was made without -L ta follow redirects, dis variable
will show tha actual URL a redirect \fIwould\fP take you to. (Added up in 7.18.2)
.TP
.B remote_ip
Da remote IP address of da most thugged-out recently done connection - can be either
IPv4 or IPv6 (Added up in 7.29.0)
.TP
.B remote_port
Da remote port number of da most thugged-out recently done connection (Added up in 7.29.0)
.TP
.B size_download
Da total amount of bytes dat was downloaded.
.TP
.B size_header
Da total amount of bytez of tha downloaded headers.
.TP
.B size_request
Da total amount of bytes dat was busted up in tha HTTP request.
.TP
.B size_upload
Da total amount of bytes dat was uploaded.
.TP
.B speed_download
Da average downlizzle speed dat curl measured fo' tha complete download. Y'all KNOW dat shit, muthafucka! Bytes
per second.
.TP
.B speed_upload
Da average upload speed dat curl measured fo' tha complete upload. Y'all KNOW dat shit, muthafucka! Bytes per
second.
.TP
.B ssl_verify_result
Da result of tha SSL peer certificate verification dat was requested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 0
means tha verification was successful naaahhmean, biatch? (Added up in 7.19.0)
.TP
.B time_appconnect
Da time, up in seconds, it took from tha start until tha SSL/SSH/etc
connect/handshake ta tha remote host was completed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. (Added up in 7.19.0)
.TP
.B time_connect
Da time, up in seconds, it took from tha start until tha TCP connect ta the
remote host (or proxy) was completed.
.TP
.B time_namelookup
Da time, up in seconds, it took from tha start until tha name resolvin was
completed.
.TP
.B time_pretransfer
Da time, up in seconds, it took from tha start until tha file transfer was just
about ta begin. I aint talkin' bout chicken n' gravy biatch. This includes all pre-transfer commandz n' negotiations that
are specific ta tha particular protocol(s) involved.
.TP
.B time_redirect
Da time, up in seconds, it took fo' all redirection steps include name lookup,
connect, pretransfer n' transfer before tha final transaction was
started. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. time_redirect shows tha complete execution time fo' multiple
redirections. (Added up in 7.12.3)
.TP
.B time_starttransfer
Da time, up in seconds, it took from tha start until tha straight-up original gangsta byte was just
about ta be transferred. Y'all KNOW dat shit, muthafucka! This includes time_pretransfer n' also tha time the
server needed ta calculate tha result.
.TP
.B time_total
Da total time, up in seconds, dat tha full operation lasted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da time will be
displayed wit millisecond resolution.
.TP
.B url_effective
Da URL dat was fetched last. This is most meaningful if you've holla'd at curl
to follow location: headers.
.RE

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "-x, --proxy <[protocol://][user:password@]proxyhost[:port]>"
Use tha specified HTTP proxy. If tha port number aint specified, it is
assumed at port 1080.

This option overrides existin environment variablez dat set tha proxy to
use. If there be a a environment variable settin a proxy, you can set proxy to
\&"" ta override dat shit.

All operations dat is performed over a HTTP proxy will transparently be
converted ta HTTP. Well shiiiit, it means dat certain protocol specific operations might
not be available. This aint tha case if you can tunnel all up in tha proxy, as
one wit tha \fI-p, --proxytunnel\fP option.

User n' password dat might be provided up in tha proxy strang is URL decoded
by curl. This allows you ta pass up in special charactas like fuckin @ by rockin %40
or pass up in a cold-ass lil colon wit %3a.

Da proxy host can be specified tha exact same way as tha proxy environment
variables, includin tha protocol prefix (http://) n' tha embedded user +
password.

From 7.21.7, tha proxy strang may be specified wit a protocol:// prefix to
specify alternatizzle proxy protocols. Use socks4://, socks4a://, socks5:// or
socks5h:// ta request tha specific SOCKS version ta be used. Y'all KNOW dat shit, muthafucka! No protocol
specified, http:// n' all others is ghon be treated as HTTP proxies.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "-X, --request <command>"
(HTTP) Specifies a cold-ass lil custom request method ta use when communicatin wit the
HTTP server n' shit.  Da specified request is ghon be used instead of tha method
otherwise used (which defaults ta GET). Read tha HTTP 1.1 justification for
details n' explanations. Common additionizzle HTTP requests include PUT and
DELETE yo, but related technologies like WebDAV offers PROPFIND, COPY, MOVE and
more.

Normally you don't need dis option. I aint talkin' bout chicken n' gravy biatch fo' realz. All sortz of GET, HEAD, POST n' PUT
requests is rather invoked by rockin dedicated command line options.

This option only chizzlez tha actual word used up in tha HTTP request, it do not
alta tha way curl behaves. Right back up in yo muthafuckin ass. So fo' example if you wanna cook up a proper HEAD
request, rockin -X HEAD aint gonna suffice. Yo ass need ta use tha \fI-I, --head\fP
option.

(FTP)
Specifies a cold-ass lil custom FTP command ta use instead of LIST when bustin file lists
with FTP.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.

.IP "--xattr"
When savin output ta a gangbangin' file, dis option  drops some lyrics ta curl ta store certain file
metadata up in extended file attributes. Currently, tha URL is stored up in the
xdg.origin.url attribute and, fo' HTTP, tha content type is stored in
the mime_type attribute. If tha file system do not support extended
attributes, a warnin is issued.

.IP "-y, --speed-time <time>"
If a thugged-out downlizzle is slower than speed-limit bytes per second durin a speed-time
period, tha downlizzle gets aborted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If speed-time is used, tha default
speed-limit is ghon be 1 unless set wit \fI-Y\fP.

This option controls transfers n' thus aint gonna affect slow connects etc. If
this be a cold-ass lil concern fo' you, try tha \fI--connect-timeout\fP option.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "-Y, --speed-limit <speed>"
If a thugged-out downlizzle is slower than dis given speed (in bytes per second) for
speed-time secondz it gets aborted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. speed-time is set wit \fI-y\fP n' is 30
if not set.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "-z, --time-cond <date expression>|<file>"
(HTTP/FTP) Request a gangbangin' file dat has been modified lata than tha given time and
date, or one dat has been modified before dat time. Da <date expression>
can be all sortz of date strings or if it don't match any internal ones, it
is taken as a gangbangin' filename n' tries ta git tha modification date (mtime) from
<file> instead. Y'all KNOW dat shit, muthafucka! See tha \fIcurl_getdate(3)\fP playa pages fo' date expression
details.

Start tha date expression wit a thugged-out dash (-) ta make it request fo' a thugged-out document
that is olda than tha given date/time, default be a thugged-out document dat is newer
than tha specified date/time.

If dis option is used nuff muthafuckin times, tha last one is ghon be used.
.IP "-h, --help"
Usage help.
.IP "-M, --manual"
Manual. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Display tha big-ass help text.
.IP "-V, --version"
Displays shiznit bout curl n' tha libcurl version it uses.

Da first line includes tha full version of curl, libcurl n' other 3rd party
libraries linked wit tha executable.

Da second line (starts wit "Protocols:") shows all protocols dat libcurl
reports ta support.

Da third line (starts wit "Features:") shows specific features libcurl
reports ta offer n' shiznit fo' realz. Available features include:
.RS
.IP "IPv6"
Yo ass can use IPv6 wit all dis bullshit.
.IP "krb4"
Krb4 fo' FTP is supported.
.IP "SSL"
HTTPS n' FTPS is supported.
.IP "libz"
Automatic decompression of compressed filez over HTTP is supported.
.IP "NTLM"
NTLM authentication is supported.
.IP "GSS-Negotiate"
Negotiate authentication n' krb5 fo' FTP is supported.
.IP "Debug"
This curl uses a libcurl built wit Debug. This enablez mo' error-tracking
and memory debuggin etc. For curl-developers only!
.IP "AsynchDNS"
This curl uses asynchronous name resolves.
.IP "SPNEGO"
SPNEGO Negotiate authentication is supported.
.IP "Largefile"
This curl supports transferz of big-ass files, filez larger than 2GB.
.IP "IDN"
This curl supports IDN - internationistic domain names.
.IP "SSPI"
SSPI is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If you use NTLM n' set a funky-ass blank user name, curl will
authenticate wit yo' current user n' password.
.IP "TLS-SRP"
SRP (Secure Remote Password) authentication is supported fo' TLS.
.IP "Metalink"
This curl supports Metalink (both version 3 n' 4 (RFC 5854)), which
raps bout mirrors n' hashes.  curl will use mirrors fo' failover if
there is errors (like fuckin tha file or server not bein available).
.RE
.SH FILES
.I ~/.curlrc
.RS
Default config file, peep \fI-K, --config\fP fo' details.
.SH ENVIRONMENT
Da environment variablez can be specified up in lower case or upper case. The
lower case version has precedence. http_proxy be a exception as it is only
available up in lower case.

Usin a environment variable ta set tha proxy has tha same ol' dirty effect as using
the \fI--proxy\fP option.

.IP "http_proxy [protocol://]<host>[:port]"
Sets tha proxy server ta use fo' HTTP.
.IP "HTTPS_PROXY [protocol://]<host>[:port]"
Sets tha proxy server ta use fo' HTTPS.
.IP "[url-protocol]_PROXY [protocol://]<host>[:port]"
Sets tha proxy server ta use fo' [url-protocol], where tha protocol be a
protocol dat curl supports n' as specified up in a URL. FTP, FTPS, POP3, IMAP,
SMTP, LDAP etc.
.IP "ALL_PROXY [protocol://]<host>[:port]"
Sets tha proxy server ta use if no protocol-specific proxy is set.
.IP "NO_PROXY <comma-separated list of hosts>"
list of host names dat shouldn't go all up in any proxy. If set ta a asterisk
\&'*' only, it matches all hosts.
.SH "PROXY PROTOCOL PREFIXES"
Since curl version 7.21.7, tha proxy strang may be specified wit a
protocol:// prefix ta specify alternatizzle proxy protocols.

If no protocol is specified up in tha proxy strang or if tha strang don't match
a supported one, tha proxy is ghon be treated as a HTTP proxy.

Da supported proxy protocol prefixes is as bigs up:
.IP "socks4://"
Makes it tha equivalent of \fI--socks4\fP
.IP "socks4a://"
Makes it tha equivalent of \fI--socks4a\fP
.IP "socks5://"
Makes it tha equivalent of \fI--socks5\fP
.IP "socks5h://"
Makes it tha equivalent of \fI--socks5-hostname\fP
.SH EXIT CODES
There is a funky-ass bunch of different error codes n' they correspondin error
lyrics dat may step tha fuck up durin wack conditions fo' realz. At tha time of dis writing,
the exit codes are:
.IP 1
Unsupported protocol. This build of curl has no support fo' dis protocol.
.IP 2
Failed ta initialize.
.IP 3
URL malformed. Y'all KNOW dat shit, muthafucka! Da syntax was not erect.
.IP 4
A feature or option dat was needed ta big-ass up tha desired request was not
enabled or was explicitly disabled at build-time. To make curl able ta do
this, you probably need another build of libcurl!
.IP 5
Couldn't resolve proxy. Da given proxy host could not be resolved.
.IP 6
Couldn't resolve host. Da given remote host was not resolved.
.IP 7
Failed ta connect ta host.
.IP 8
FTP weird server reply. Da server busted data curl couldn't parse.
.IP 9
FTP access denied. Y'all KNOW dat shit, muthafucka! Da server denied login or denied access ta tha particular
resource or directory you wanted ta reach. Most often you tried ta chizzle ta a
directory dat don't exist on tha server.
.IP 11
FTP weird PASS reply. Curl couldn't parse tha reply busted ta tha PASS request.
.IP 13
FTP weird PASV reply, Curl couldn't parse tha reply busted ta tha PASV request.
.IP 14
FTP weird 227 format. Curl couldn't parse tha 227-line tha server sent.
.IP 15
FTP can't git host. Couldn't resolve tha host IP we gots up in tha 227-line.
.IP 17
FTP couldn't set binary. Couldn't chizzle transfer method ta binary.
.IP 18
Partial file. Only a part of tha file was transferred.
.IP 19
FTP couldn't download/access tha given file, tha RETR (or similar) command
failed.
.IP 21
FTP quote error fo' realz. A quote command returned error from tha server.
.IP 22
HTTP page not retrieved. Y'all KNOW dat shit, muthafucka! Da axed url was not found or returned another
error wit tha HTTP error code bein 400 or above. This return code only
appears if \fI-f, --fail\fP is used.
.IP 23
Write error. Shiiit, dis aint no joke. Curl couldn't write data ta a local filesystem or similar.
.IP 25
FTP couldn't STOR file. Da server denied tha STOR operation, used fo' FTP
uploading.
.IP 26
Read error. Shiiit, dis aint no joke. Various readin problems.
.IP 27
Out of memory fo' realz. A memory allocation request failed.
.IP 28
Operation timeout. Da specified time-out period was reached accordin ta the
conditions.
.IP 30
FTP PORT failed. Y'all KNOW dat shit, muthafucka! Da PORT command failed. Y'all KNOW dat shit, muthafucka! Not all FTP servers support tha PORT
command, try bustin a transfer rockin PASV instead!
.IP 31
FTP couldn't use REST. Da REST command failed. Y'all KNOW dat shit, muthafucka! This command is used for
resumed FTP transfers.
.IP 33
HTTP range error. Shiiit, dis aint no joke. Da range "command" didn't work.
.IP 34
HTTP post error. Shiiit, dis aint no joke. Internal post-request generation error.
.IP 35
SSL connect error. Shiiit, dis aint no joke. Da SSL handbobbin failed.
.IP 36
FTP wack downlizzle resume. Couldn't continue a earlier aborted download.
.IP 37
FILE couldn't read file. Failed ta open tha file. Permissions?
.IP 38
LDAP cannot bind. Y'all KNOW dat shit, muthafucka! LDAP bind operation failed.
.IP 39
LDAP search failed.
.IP 41
Function not found. Y'all KNOW dat shit, muthafucka! A required LDAP function was not found.
.IP 42
Aborted by callback fo' realz. An application holla'd at curl ta abort tha operation.
.IP 43
Internal error fo' realz. A function was called wit a wack parameter.
.IP 45
Interface error fo' realz. A specified outgoin intercourse could not be used.
.IP 47
Too nuff redirects, n' you can put dat on yo' toast. When followin redirects, curl hit tha maximum amount.
.IP 48
Unknown option specified ta libcurl. This indicates dat you passed a weird
option ta curl dat was passed on ta libcurl n' rejected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Read up in the
manual!
.IP 49
Malformed telnet option.
.IP 51
Da peerz SSL certificate or SSH MD5 fingerprint was not OK.
.IP 52
Da server didn't reply anything, which here is considered a error.
.IP 53
SSL crypto engine not found.
.IP 54
Cannot set SSL crypto engine as default.
.IP 55
Failed bustin  network data.
.IP 56
Failure up in receivin network data.
.IP 58
Problem wit tha local certificate.
.IP 59
Couldn't use specified SSL cipher.
.IP 60
Peer certificate cannot be authenticated wit known CA certificates.
.IP 61
Unrecognized transfer encoding.
.IP 62
Invalid LDAP URL.
.IP 63
Maximum file size exceeded.
.IP 64
Requested FTP SSL level failed.
.IP 65
Sendin tha data requires a rewind dat failed.
.IP 66
Failed ta initialise SSL Engine.
.IP 67
Da user name, password, or similar was not accepted n' curl failed ta log in.
.IP 68
File not found on TFTP server.
.IP 69
Permission problem on TFTP server.
.IP 70
Out of disk space on TFTP server.
.IP 71
Illegal TFTP operation.
.IP 72
Unknown TFTP transfer ID.
.IP 73
File already exists (TFTP).
.IP 74
No such user (TFTP).
.IP 75
Characta conversion failed.
.IP 76
Characta conversion functions required.
.IP 77
Problem wit readin tha SSL CA cert (path, biatch? access rights?).
.IP 78
Da resource referenced up in tha URL do not exist.
.IP 79
An unspecified error occurred durin tha SSH session.
.IP 80
Failed ta shut down tha SSL connection.
.IP 82
Could not load CRL file, missin or wack format (added up in 7.19.0).
.IP 83
Issuer check failed (added up in 7.19.0).
.IP 84
Da FTP PRET command failed
.IP 85
RTSP: mismatch of CSeq numbers
.IP 86
RTSP: mismatch of Session Identifiers
.IP 87
unable ta parse FTP file list
.IP 88
FTP chunk callback reported error
.IP XX
Mo' error codes will step tha fuck up here up in future releases. Da existin ones
are meant ta never chizzle.
.SH AUTHORS / CONTRIBUTORS
Daniel Stenberg is tha main lyricist yo, but tha whole list of contributors is
found up in tha separate THANKS file.
.SH WWW
http://curl.haxx.se
.SH FTP
ftp://ftp.sunet.se/pub/www/utilities/curl/
.SH "SEE ALSO"
.BR ftp (1),
.BR wget (1)
