.\"  Copyright (c) 1990-2009 Info-ZIP.  All muthafuckin rights reserved.
.\"
.\"  See tha accompanyin file LICENSE, version 2009-Jan-02 or later
.\"  (the contentz of which is also included up in unzip.h) fo' termz of use.
.\"  If, fo' some reason, all these filez is missing, tha Info-ZIP license
.\"  also may be found at:  ftp://ftp.info-zip.org/pub/infozip/license.html
.\"
.\" unzip.1 by Greg Roelofs, Fulvio Marino, Jim van Zandt n' others.
.\"
.\" =========================================================================
.\" define .EX/.EE (for multiline user-command examples; aiiight Courier font)
.de EX
.in +4n
.nf
.ft CW
..
.de EE
.ft R
.fi
.in -4n
..
.\" =========================================================================
.TH UNZIP 1L "20 April 2009 (v6.0)" "Info-ZIP"
.SH NAME
unzip \- list, test n' extract compressed filez up in a ZIP archive
.PD
.SH SYNOPSIS
\fBunzip\fP [\fB\-Z\fP] [\fB\-cflptTuvz\fP[\fBabjnoqsCDKLMUVWX$/:^\fP]]
\fIfile\fP[\fI.zip\fP] [\fIfile(s)\fP\ .\|.\|.]
[\fB\-x\fP\ \fIxfile(s)\fP\ .\|.\|.] [\fB\-d\fP\ \fIexdir\fP]
.PD
.\" =========================================================================
.SH DESCRIPTION
\fIunzip\fP will list, test, or extract filez from a ZIP archive, commonly
found on MS-DOS systems.  Da default behavior (with no options) is ta extract
into tha current directory (and subdirectories below it) all filez from the
specified ZIP archive.  A companion program, \fIzip\fP(1L), creates ZIP
archives; both programs is compatible wit archives pimped by PKWARE's
\fIPKZIP\fP n' \fIPKUNZIP\fP fo' MS-DOS yo, but up in nuff cases tha program
options or default behaviors differ.
.PD
.\" =========================================================================
.SH ARGUMENTS
.TP
.IR file [ .zip ]
Path of tha ZIP archive(s).  If tha file justification be a wildcard,
each matchin file is processed up in a order determined by tha operating
system (or file system).  Only tha filename can be a wildcard; tha path
itself cannot.  Wildcard expressions is similar ta dem supported in
commonly used Unix shells (\fIsh\fP, \fIksh\fP, \fIcsh\fP) n' may contain:
.RS
.IP *
matches a sequence of 0 or mo' characters
.IP ?
matches exactly 1 character
.IP [.\|.\|.]
matches any single characta found inside tha brackets; ranges is specified
by a funky-ass beginnin character, a hyphen, n' a endin character n' shit.  If a exclamation
point or a cold-ass lil caret (`!' or `^') bigs up tha left bracket, then tha range of
charactas within tha brackets is complemented (that is, anythang \fIexcept\fP
the charactas inside tha brackets is considered a match).  To specify a
verbatim left bracket, tha three-characta sequence ``[[]'' has ta be used.
.RE
.IP
(Be shizzle ta quote any characta dat might otherwise be interpreted or
modified by tha operatin system, particularly under Unix n' VMS.)  If no
matches is found, tha justification be assumed ta be a literal filename;
and if dat also fails, tha suffix \fC.zip\fR be appended. Y'all KNOW dat shit, muthafucka!  Note that
self-extractin ZIP filez is supported, as wit any other ZIP archive;
just specify tha \fC.exe\fR suffix (if any) explicitly.
.IP [\fIfile(s)\fP]
An optionizzle list of archive thugz ta be processed, separated by spaces.
(VMS versions compiled wit VMSCLI defined must delimit filez wit commas
instead. Y'all KNOW dat shit, muthafucka!  See \fB\-v\fP up in \fBOPTIONS\fP below.)
Regular expressions (wildcards) may be used ta match multiple members; see
above.  Again, be shizzle ta quote expressions dat would otherwise be expanded
or modified by tha operatin system.
.IP [\fB\-x\fP\ \fIxfile(s)\fP]
An optionizzle list of archive thugz ta be excluded from processing.
Since wildcard charactas normally match (`/') directory separators
(for exceptions peep tha option \fB\-W\fP), dis option may be used
to exclude any filez dat is up in subdirectories. Put ya muthafuckin choppers up if ya feel dis!  For
example, ``\fCunzip foo *.[ch] -x */*\fR'' would extract all C source files
in tha main directory yo, but none up in any subdirectories. Put ya muthafuckin choppers up if ya feel dis!  Without tha \fB\-x\fP
option, all C source filez up in all directories within tha zipfile would be
extracted.
.IP [\fB\-d\fP\ \fIexdir\fP]
An optionizzle directory ta which ta extract files.  By default, all files
and subdirectories is recreated up in tha current directory; tha \fB\-d\fP
option allows extraction up in a arbitrary directory (always assumin one
has permission ta write ta tha directory).  This option need not appear
at tha end of tha command line; it be also accepted before tha zipfile
specification (with tha aiiight options), immediately afta tha zipfile
specification, or between tha \fIfile(s)\fP n' tha \fB\-x\fP option.
Da option n' directory may be concatenated without any white space
between dem yo, but note dat dis may cause aiiight shell behavior ta be
suppressed. Y'all KNOW dat shit, muthafucka!  In particular, ``\fC\-d\ ~\fR'' (tilde) is expanded by Unix
C shells tha fuck into tha name of tha userz home directory yo, but ``\fC\-d~\fR''
is treated as a literal subdirectory ``\fB~\fP'' of tha current directory.
.\" =========================================================================
.SH OPTIONS
Note that, up in order ta support obsolescent hardware, \fIunzip\fPz usage
screen is limited ta 22 or 23 lines n' should therefore be considered
only a reminder of tha basic \fIunzip\fP syntax rather than a exhaustive
list of all possible flags.  Da exhaustizzle list bigs up:
.TP
.B \-Z
\fIzipinfo\fP(1L) mode.  If tha straight-up original gangsta option on tha command line is \fB\-Z\fP,
the remainin options is taken ta be \fIzipinfo\fP(1L) options.  See the
appropriate manual page fo' a thugged-out description of these options.
.TP
.B \-A
[OS/2, Unix DLL] print extended help fo' tha DLLz programmin intercourse (API).
.TP
.B \-c
extract filez ta stdout/screen (``CRT'').  This option is similar ta the
\fB\-p\fP option except dat tha name of each file is printed as it is
extracted, tha \fB\-a\fP option be allowed, n' ASCII-EBCDIC conversion
is automatically performed if appropriate.  This option aint listed in
the \fIunzip\fP usage screen.
.TP
.B \-f
freshen existin files, i.e., extract only dem filez that
already exist on disk n' dat is newer than tha disk copies. Put ya muthafuckin choppers up if ya feel dis!  By
default \fIunzip\fP queries before overwritin yo, but tha \fB\-o\fP option
may be used ta suppress tha queries. Put ya muthafuckin choppers up if ya feel dis!  Note dat under nuff operatin systems,
the TZ (timezone) environment variable must be set erectly up in order for
\fB\-f\fP n' \fB\-u\fP ta work properly (under Unix tha variable is usually
set automatically).  Da reasons fo' dis is somewhat subtle but
have ta do wit tha differences between DOS-format file times (always local
time) n' Unix-format times (always up in GMT/UTC) n' tha necessitizzle ta compare
the two.  A typical TZ value is ``PST8PDT'' (US Pacific time wit automatic
adjustment fo' Daylight Savings Time or ``summer time'').
.TP
.B \-l
list archive filez (short format).  Da names, uncompressed file sizes and
modification dates n' timez of tha specified filez is printed, along
with totals fo' all filez specified. Y'all KNOW dat shit, muthafucka!  If UnZip was compiled wit OS2_EAS
defined, tha \fB\-l\fP option also lists columns fo' tha sizez of stored
OS/2 extended attributes (EAs) n' OS/2 access control lists (ACLs).  In
addition, tha zipfile comment n' individual file comments (if any) are
displayed. Y'all KNOW dat shit, muthafucka!  If a gangbangin' file was archived from a single-case file system (for
example, tha oldschool MS-DOS FAT file system) n' tha \fB\-L\fP option was given,
the filename is converted ta lowercase n' is prefixed wit a cold-ass lil caret (^).
.TP
.B \-p
extract filez ta pipe (stdout).  Nothang but tha file data is busted to
stdout, n' tha filez is always extracted up in binary format, just as they
are stored (no conversions).
.TP
.B \-t
test archive files.  This option extracts each specified file up in memory
and compares tha CRC (cyclic redundancy check, a enhanced checksum) of
the expanded file wit tha original gangsta filez stored CRC value.
.TP
.B \-T
[most OSes] set tha timestamp on tha archive(s) ta dat of tha newest file
in each one.  This correspondz ta \fIzip\fPz \fB\-go\fP option except that
it can be used on wildcard zipfilez (e.g., ``\fCunzip \-T \e*.zip\fR'') and
is much faster.
.TP
.B \-u
update existin filez n' create freshly smoked up ones if needed. Y'all KNOW dat shit, muthafucka!  This option performs
the same function as tha \fB\-f\fP option, extractin (with query) files
that is newer than dem wit tha same name on disk, n' up in addizzle it
extracts dem filez dat do not already exist on disk.  See \fB\-f\fP
above fo' shiznit on settin tha timezone properly.
.TP
.B \-v
list archive filez (verbose format) or show diagnostic version info.
This option has evolved n' now behaves as both a option n' a modifier.
As a option it has two purposes:  when a zipfile is specified wit no
other options, \fB\-v\fP lists archive filez verbosely, addin ta the
basic \fB\-l\fP info tha compression method, compressed size,
compression ratio n' 32-bit CRC.  In contrast ta most of tha competing
utilities, \fIunzip\fP removes tha 12 additionizzle header bytes of
encrypted entries from tha compressed size numbers.  Therefore,
compressed size n' compression ratio figures is independent of tha entry's
encryption status n' show tha erect compression performance.  (Da complete
size of tha encrypted compressed data stream fo' zipfile entries is reported
by tha mo' verbose \fIzipinfo\fP(1L) reports, peep tha separate manual.)
When no zipfile is specified (that is, tha complete command is simply
``\fCunzip \-v\fR''), a gangbangin' finger-lickin' diagnostic screen is printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  In addizzle to
the aiiight header wit release date n' version, \fIunzip\fP lists the
home Info-ZIP ftp joint n' where ta find a list of other ftp n' non-ftp
sites; tha target operatin system fo' which dat shiznit was compiled, as well
as (possibly) tha hardware on which dat shiznit was compiled, tha compila and
version used, n' tha compilation date; any special compilation options
that might affect tha programz operation (see also \fBDECRYPTION\fP below);
and any options stored up in environment variablez dat might do tha same
(see \fBENVIRONMENT OPTIONS\fP below).  As a modifier it works in
conjunction wit other options (e.g., \fB\-t\fP) ta produce more
verbose or debuggin output; dis aint yet straight-up implemented
but is ghon be up in future releases.
.TP
.B \-z
display only tha archive comment.
.PD
.\" =========================================================================
.SH MODIFIERS
.TP
.B \-a
convert text files.  Ordinarily all filez is extracted exactly as they
are stored (as ``binary'' files).  Da \fB\-a\fP option causes filez identified
by \fIzip\fP as text filez (those wit tha `t' label up in \fIzipinfo\fP
listings, rather than `b') ta be automatically extracted as such, converting
line endings, end-of-file charactas n' tha characta set itself as necessary.
(For example, Unix filez use line feedz (LFs) fo' end-of-line (EOL) and
have no end-of-file (EOF) marker; Macintoshes use carriage returns (CRs)
for EOLs; n' most PC operatin systems use CR+LF fo' EOLs n' control-Z for
EOF.  In addition, IBM mainframes n' tha Michigan Terminal System use EBCDIC
rather than tha mo' common ASCII characta set, n' NT supports Unicode.)
Note dat \fIzip\fPz identification of text filez is by no means perfect; some
``text'' filez may straight-up be binary n' vice versa.  \fIunzip\fP therefore
prints ``\fC[text]\fR'' or ``\fC[binary]\fR'' as a visual check fo' each file
it extracts when rockin tha \fB\-a\fP option. I aint talkin' bout chicken n' gravy biatch.  Da \fB\-aa\fP option forces
all filez ta be extracted as text, regardless of tha supposed file type.
On VMS, peep also \fB\-S\fP.
.TP
.B \-b
[general] treat all filez as binary (no text conversions).  This be a gangbangin' finger-lickin' dirty-ass shortcut
for \fB\-\-\-a\fP.
.TP
.B \-b
[Tandem] force tha creation filez wit filecode type 180 ('C') when
extractin Zip entries marked as "text". (On Tandem, \fB\-a\fP is enabled
by default, peep above).
.TP
.B \-b
[VMS] auto-convert binary filez (see \fB\-a\fP above) ta fixed-length,
512-byte record format.  Doublin tha option (\fB\-bb\fP) forces all files
to be extracted up in dis format. When extractin ta standard output
(\fB\-c\fP or \fB\-p\fP option up in effect), tha default conversion of text
record delimitas is disabled fo' binary (\fB\-b\fP) resp. all (\fB\-bb\fP)
files.
.TP
.B \-B
[when compiled wit UNIXBACKUP defined] save a funky-ass backup copy of each
overwritten file. Da backup file is gets tha name of tha target file with
a tilde n' optionally a unique sequence number (up ta 5 digits) appended.
Da sequence number be applied whenever another file wit tha original gangsta name
plus tilde already exists, n' you can put dat on yo' toast.  When used together wit tha "overwrite all"
option \fB\-o\fP, numbered backup filez is never pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. In dis case,
all backup filez is named as tha original gangsta file wit a appended tilde,
existin backup filez is deleted without notice.
This feature works similarly ta tha default behavior of \fIemacs\fP(1)
in nuff locations.
.IP
Example: tha oldschool copy of ``\fCfoo\fR'' is renamed ta ``\fCfoo~\fR''.
.IP
Warning: Users should be aware dat tha \fB-B\fP option do not prevent
loss of existin data under all circumstances.  For example, when
\fIunzip\fP is run up in overwrite-all mode, a existin ``\fCfoo~\fR'' file
is deleted before \fIunzip\fP attempts ta rename ``\fCfoo\fR'' to
``\fCfoo~\fR''.  When dis rename attempt fails (because of a gangbangin' file locks,
insufficient privileges, or ...), tha extraction of ``\fCfoo~\fR'' gets
cancelled yo, but tha oldschool backup file be already lost.  A similar scenario
takes place when tha sequence number range fo' numbered backup filez gets
exhausted (99999, or 65535 fo' 16-bit systems).  In dis case, tha backup
file wit tha maximum sequence number is deleted n' replaced by tha new
backup version without notice.
.TP
.B \-C
use case-insensitizzle matchin fo' tha selection of archive entries
from tha command-line list of extract selection patterns.
\fIunzip\fPz philosophy is ``you git what tha fuck you ask for'' (this is
also responsible fo' tha \fB\-L\fP/\fB\-U\fP chizzle; peep tha relevant
options below).  Because some file systems is straight-up case-sensitive
(notably dem under tha Unix operatin system) n' cuz
both ZIP archives n' \fIunzip\fP itself is portable across platforms,
\fIunzip\fPz default behavior is ta match both wildcard n' literal
filenames case-sensitively.  That is, specifyin ``\fCmakefile\fR''
on tha command line will \fIonly\fP match ``makefile'' up in tha archive,
not ``Makefile'' or ``MAKEFILE'' (and similarly fo' wildcard justifications).
Since dis do not correspond ta tha behavior of nuff other
operating/file systems (for example, OS/2 HPFS, which preserves
mixed case but aint sensitizzle ta it), tha \fB\-C\fP option may be
used ta force all filename matches ta be case-insensitive.  In the
example above, all three filez would then match ``\fCmakefile\fR''
(or ``\fCmake*\fR'', or similar).  Da \fB\-C\fP option affects
file specs up in both tha aiiight file list n' tha excluded-file list (xlist).
.IP
Please note dat tha \fB\-C\fP option do neither affect tha search for
the zipfile(s) nor tha matchin of archive entries ta existin filez on
the extraction path.  On a cold-ass lil case-sensitizzle file system, \fIunzip\fP will
never try ta overwrite a gangbangin' file ``FOO'' when extractin a entry ``foo''!
.TP
.B \-D
skip restoration of timestamps fo' extracted items.  Normally, \fIunzip\fP
tries ta restore all meta-information fo' extracted shit dat is supplied
in tha Zip archive (and do not require privileges or impose a securitizzle risk).
By specifyin \fB\-D\fP, \fIunzip\fP is holla'd at ta suppress restoration of
timestamps fo' directories explicitly pimped from Zip archive entries.
This option only applies ta ports dat support settin timestamps for
directories (currently ATheOS, BeOS, MacOS, OS/2, Unix, VMS, Win32, fo' other
\fIunzip\fP ports, \fB\-D\fP has no effect).
Da duplicated option \fB\-DD\fP forces suppression of timestamp restoration
for all extracted entries (filez n' directories).  This option thangs up in dis biatch in
settin tha timestamps fo' all extracted entries ta tha current time.
.IP
On VMS, tha default settin fo' dis option is \fB\-D\fP fo' consistency
with tha behaviour of BACKUP: file timestamps is restored, timestamps of
extracted directories is left all up in tha current time.  To enable restoration
of directory timestamps, tha negated option \fB\--D\fP should be specified.
On VMS, tha option \fB\-D\fP disablez timestamp restoration fo' all extracted
Zip archive items.  (Here, a single \fB\-D\fP on tha command line combines
with tha default \fB\-D\fP ta do what tha fuck a explicit \fB\-DD\fP do on other
systems.)
.TP
.B \-E
[MacOS only] display contentz of MacOS extra field durin restore operation.
.TP
.B \-F
[Acorn only] suppress removal of NFS filetype extension from stored filenames.
.TP
.B \-F
[non-Acorn systems supportin long filenames wit embedded commas,
and only if compiled wit ACORN_FTYPE_NFS defined] translate
filetype shiznit from ACORN RISC OS extra field blocks tha fuck into a
NFS filetype extension n' append it ta tha namez of tha extracted files.
(When tha stored filename appears ta already have a appended NFS filetype
extension, it is replaced by tha info from tha extra field.)
.TP
.B \-i
[MacOS only] ignore filenames stored up in MacOS extra fields. Instead, the
most compatible filename stored up in tha generic part of tha entryz header
is used.
.TP
.B \-j
junk paths.  Da archivez directory structure aint recreated; all files
are deposited up in tha extraction directory (by default, tha current one).
.TP
.B \-J
[BeOS only] junk file attributes.  Da filez BeOS file attributes is not
restored, just tha filez data.
.TP
.B \-J
[MacOS only] ignore MacOS extra fields.  All Macintosh specific info
is skipped. Y'all KNOW dat shit, muthafucka! Data-fork n' resource-fork is restored as separate files.
.TP
.B \-K
[AtheOS, BeOS, Unix only] retain SUID/SGID/Tacky file attributes.  Without
this flag, these attribute bits is cleared fo' securitizzle reasons.
.TP
.B \-L
convert ta lowercase any filename originatin on a uppercase-only operating
system or file system.  (This was \fIunzip\fPz default behavior up in releases
prior ta 5.11; tha freshly smoked up default behavior is identical ta tha oldschool behavior with
the \fB\-U\fP option, which is now obsolete n' is ghon be removed up in a gangbangin' future
release.)  Dependin on tha archiver, filez archived under single-case
file systems (VMS, oldschool MS-DOS FAT, etc.) may be stored as all-uppercase names;
this can be skanky or inconvenient when extractin ta a cold-ass lil case-preserving
file system like fuckin OS/2 HPFS or a cold-ass lil case-sensitizzle one like fuckin under
Unix.  By default \fIunzip\fP lists n' extracts such filenames exactly as
they stored (exceptin truncation, conversion of unsupported characters,
etc.); dis option causes tha namez of all filez from certain systems ta be
converted ta lowercase.  Da \fB\-LL\fP option forces conversion of every
filename ta lowercase, regardless of tha originatin file system.
.TP
.B \-M
pipe all output all up in a internal pager similar ta tha Unix \fImore\fP(1)
command. Y'all KNOW dat shit, muthafucka!  At tha end of a screenful of output, \fIunzip\fP pauses wit a
``\-\-Mo'\-\-'' prompt; tha next screenful may be viewed by pressin the
Enta (Return) key or tha space bar. Shiiit, dis aint no joke.  \fIunzip\fP can be terminated by
pressin tha ``q'' key and, on some systems, tha Enter/Return key.  Unlike
Unix \fImore\fP(1), there is no forward-searchin or editin capability.
Also, \fIunzip\fP don't notice if long lines wrap all up in tha edge of tha screen,
effectively resultin up in tha printin of two or mo' lines n' tha likelihood
that some text will scroll off tha top of tha screen before bein viewed.
On some systems tha number of available lines on tha screen aint detected,
in which case \fIunzip\fP assumes tha height is 24 lines.
.TP
.B \-n
never overwrite existin files.  If a gangbangin' file already exists, skip tha extraction
of dat file without prompting.  By default \fIunzip\fP queries before
extractin any file dat already exists; tha user may chizzle ta overwrite
only tha current file, overwrite all files, skip extraction of tha current
file, skip extraction of all existin files, or rename tha current file.
.TP
.B \-N
[Amiga] extract file comments as Amiga filenotes.  File comments is pimped
with tha \-c option of \fIzip\fP(1L), or wit tha \-N option of tha Amiga port
of \fIzip\fP(1L), which stores filenotes as comments.
.TP
.B \-o
overwrite existin filez without prompting.  This be a gangbangin' fucked up option, so
use it wit care.  (It be often used wit \fB\-f\fP, however, n' is tha only
way ta overwrite directory EAs under OS/2.)
.IP \fB\-P\fP\ \fIpassword\fP
use \fIpassword\fP ta decrypt encrypted zipfile entries (if any).  \fBTHIS IS
INSECURE!\fP  Many multi-user operatin systems provide ways fo' any user to
see tha current command line of any other user; even on stand-alone systems
there be always tha threat of over-the-shoulder peeking.  Storin tha plaintext
password as part of a cold-ass lil command line up in a automated script is even worse.
Whenever possible, use tha non-echoing, interactizzle prompt ta enta passwords.
(And where securitizzle is truly blingin, use phat encryption like fuckin Pretty
Dope Privacy instead of tha relatively weak encryption provided by standard
zipfile utilities.)
.TP
.B \-q
perform operations on tha fuckin' down-lowly (\fB\-qq\fP = even on tha fuckin' down-lower).  Ordinarily \fIunzip\fP
prints tha namez of tha filez itz extractin or testing, tha extraction
methods, any file or zipfile comments dat may be stored up in tha archive,
and possibly a summary when finished wit each archive.  Da \fB\-q\fP[\fBq\fP]
options suppress tha printin of some or all of these lyrics.
.TP
.B \-s
[OS/2, NT, MS-DOS] convert spaces up in filenames ta underscores.  Since all PC
operatin systems allow spaces up in filenames, \fIunzip\fP by default extracts
filenames wit spaces intact (e.g., ``\fCEA\ DATA.\ SF\fR'').  This can be
awkward, however, since MS-DOS up in particular do not gracefully support
spaces up in filenames.  Conversion of spaces ta underscores can eliminizzle the
awkwardnizz up in some cases.
.TP
.B \-S
[VMS] convert text filez (\fB\-a\fP, \fB\-aa\fP) tha fuck into Stream_LF record format,
instead of tha text-file default, variable-length record format.
(Stream_LF is tha default record format of VMS \fIunzip\fP. Well shiiiit, it be applied
unless conversion (\fB\-a\fP, \fB\-aa\fP and/or \fB\-b\fP, \fB\-bb\fP) is
axed or a VMS-specific entry is processed.)
.TP
.B \-U
[UNICODE_SUPPORT only] modify or disable UTF-8 handling.
When UNICODE_SUPPORT be available, tha option \fB\-U\fP forces \fIunzip\fP
to escape all non-ASCII charactas from UTF-8 coded filenames as ``#Uxxxx''
(for UCS-2 characters, or ``#Lxxxxxx'' fo' unicode codepoints needin 3
octets).  This option is mainly provided fo' debuggin purpose when the
fairly freshly smoked up UTF-8 support is suspected ta mangle up extracted filenames.
.IP
Da option \fB\-UU\fP allows ta entirely disable tha recognizzle of UTF-8
encoded filenames.  Da handlin of filename codings within \fIunzip\fP falls
back ta tha behaviour of previous versions.
.IP
[old, obsolete usage] leave filenames uppercase if
created under MS-DOS, VMS, etc.  See \fB\-L\fP above.
.TP
.B \-V
retain (VMS) file version numbers.  VMS filez can be stored wit a version
number, up in tha format \fCfile.ext;##\fR.  By default tha ``\fC;##\fR'' version
numbers is stripped yo, but dis option allows dem ta be retained. Y'all KNOW dat shit, muthafucka!  (On
file systems dat limit filenames ta particularly short lengths, tha version
numbers may be truncated or stripped regardless of dis option.)
.TP
.B \-W
[only when WILD_STOP_AT_DIR compile-time option enabled]
modifies tha pattern matchin routine so dat both `?' (single-char wildcard)
and `*' (multi-char wildcard) do not match tha directory separator character
`/'.  (Da two-characta sequence ``**'' acts as a multi-char wildcard that
includes tha directory separator up in its matched characters.)  Examples:
.PP
.EX
    "*.c" matches "foo.c" but not "mydir/foo.c"
    "**.c" matches both "foo.c" n' "mydir/foo.c"
    "*/*.c" matches "bar/foo.c" but not "baz/bar/foo.c"
    "??*/*" matches "ab/foo" n' "abc/foo"
            but not "a/foo" or "a/b/foo"
.EE
.IP
This modified behaviour is equivalent ta tha pattern matchin style
used by tha shellz of a shitload of UnZipz supported target OSs (one
example is Acorn RISC OS).  This option may not be available on systems
where tha Zip archivez internal directory separator characta `/' is
allowed as regular characta up in natizzle operatin system filenames.
(Currently, UnZip uses tha same ol' dirty pattern matchin rulez fo' both wildcard
zipfile justifications n' zip entry selection patterns up in most ports.
For systems allowin `/' as regular filename character, tha -W option
would not work as expected on a wildcard zipfile justification.)
.TP
.B \-X
[VMS, Unix, OS/2, NT, Tandem] restore baller/protection info (UICs n' ACL
entries) under VMS, or user n' crew info (UID/GID) under Unix, or access
control lists (ACLs) under certain network-enabled versionz of OS/2
(Warp Server wit IBM LAN Server/Requesta 3.0 ta 5.0; Warp Connect with
IBM Peer 1.0), or securitizzle ACLs under Windows NT.  In most cases dis will
require special system privileges, n' doublin tha option (\fB\-XX\fP)
under NT instructs \fIunzip\fP ta use privileges fo' extraction; but under
Unix, fo' example, a user whoz ass belongs ta nuff muthafuckin crews can restore files
owned by any of dem groups, as long as tha user IDs match his or her own.
Note dat ordinary file attributes is always restored--this option applies
only ta optional, extra ballershizzle info available on some operatin systems.
[NTz access control lists do not step tha fuck up ta be especially compatible with
OS/2's, so no attempt is made at cross-platform portabilitizzle of access
privileges.  It aint clear under what tha fuck conditions dis would eva be
useful anyway.]
.TP
.B \-Y
[VMS] treat archived file name endingz of ``.nnn'' (where ``nnn'' be a
decimal  number) as if they was VMS version numbers (``;nnn'').
(Da default is ta treat dem as file types.)  Example:
.EX
     "a.b.3" -> "a.b;3".
.EE
.TP
.B \-$
.\" Amiga support possible eventually yo, but not yet
[MS-DOS, OS/2, NT] restore tha volume label if tha extraction medium is
removable (e.g., a gangbangin' finger-lickin' diskette).  Doublin tha option (\fB\-$$\fP) allows fixed
media (hard disks) ta be labeled as well.  By default, volume labels are
ignored.
.IP \fB\-/\fP\ \fIextensions\fP
[Acorn only] overrides tha extension list supplied by Unzip$Ext environment
variable. Durin extraction, filename extensions dat match one of tha items
in dis extension list is swapped up in front of tha base name of tha extracted
file.
.TP
.B \-:
[all but Acorn, VM/CMS, MVS, Tandem] allows ta extract archive thugz into
locations outside of tha current `` extraction root folder''. For security
reasons, \fIunzip\fP normally removes ``parent dir'' path components
(``../'') from tha namez of extracted file.  This safety feature (new for
version 5.50) prevents \fIunzip\fP from accidentally freestylin filez to
``sensitive'' areas outside tha actizzle extraction folda tree head. Y'all KNOW dat shit, muthafucka!  The
\fB\-:\fP option lets \fIunzip\fP switch back ta its previous, mo' liberal
behaviour, ta allow exact extraction of (older) archives dat used ``../''
components ta create multiple directory trees all up in tha level of tha current
extraction folda n' shit.  This option do not enable freestylin explicitly ta the
root directory (``/'').  To bust dis, it is necessary ta set the
extraction target folda ta root (e.g. \fB\-d / \fP).  But fuck dat shiznit yo, tha word on tha street is dat when the
\fB\-:\fP option is specified, it is still possible ta implicitly write to
the root directory by specifyin enough ``../'' path components within the
zip archive.
Use dis option wit off tha hook caution.
.TP
.B \-^
[Unix only] allow control charactas up in namez of extracted ZIP archive
entries. Put ya muthafuckin choppers up if ya feel dis!  On Unix, a gangbangin' file name may contain any (8-bit) characta code with
the two exception '/' (directory delimiter) n' NUL (0x00, tha C string
termination indicator), unless tha specific file system has more
restrictizzle conventions.  Generally, dis allows ta embed ASCII control
charactas (or even sophisticated control sequences) up in file names, at least
on 'native' Unix file systems.  But fuck dat shiznit yo, tha word on tha street is dat it may be highly suspicious to
make use of dis Unix "feature".  Embedded control charactas up in file names
might have nasty side effects when displayed on screen by some listin code
without sufficient filtering.  And, fo' ordinary users, it may be difficult
to handle such file names (e.g. when tryin ta specify it fo' open, copy,
move, or delete operations).  Therefore, \fIunzip\fP applies a gangbangin' filta by
default dat removes potentially fucked up control charactas from the
extracted file names. Da \fB-^\fP option allows ta override dis filter
in tha rare case dat embedded filename control charactas is ta be
intentionally restored.
.TP
.B \-2
[VMS] force unconditionally conversion of file names ta ODS2-compatible
names.  Da default is ta exploit tha destination file system, preserving
case n' extended file name charactas on a ODS5 destination file system;
and applyin tha ODS2-compatibilitizzle file name filterin on a ODS2 destination
file system.
.PD
.\" =========================================================================
.SH "ENVIRONMENT OPTIONS"
\fIunzip\fPz default behavior may be modified via options placed in
an environment variable.  This can be done wit any option yo, but it
is probably most useful wit tha \fB\-a\fP, \fB\-L\fP, \fB\-C\fP, \fB\-q\fP,
\fB\-o\fP, or \fB\-n\fP modifiers:  make \fIunzip\fP auto-convert text
filez by default, make it convert filenames from uppercase systems to
lowercase, make it match names case-insensitively, make it on tha fuckin' down-lower,
or make it always overwrite or never overwrite filez as it extracts
them.  For example, ta make \fIunzip\fP act as on tha fuckin' down-lowly as possible, only
reportin errors, one would use one of tha followin commands:
.TP
  Unix Bourne shell:
UNZIP=\-qq; export UNZIP
.TP
  Unix C shell:
setenv UNZIP \-qq
.TP
  OS/2 or MS-DOS:
set UNZIP=\-qq
.TP
  VMS (quotes fo' \fIlowercase\fP):
define UNZIP_OPTS "\-qq"
.PP
Environment options are, up in effect, considered ta be just like any other
command-line options, except dat they is effectively tha straight-up original gangsta options
on tha command line.  To override a environment option, one may use the
``minus operator'' ta remove dat shit.  For instance, ta override one of the
quiet-flags up in tha example above, use tha command
.PP
.EX
unzip \-\-q[\fIother options\fP] zipfile
.EE
.PP
Da first hyphen is tha normal
switch character, n' tha second be a minus sign, actin on tha q option.
Thus tha effect here is ta quit one quantum of on tha fuckin' down-lowness.  To cancel
both on tha down-low flags, two (or more) minuses may be used:
.PP
.EX
unzip \-t\-\-q zipfile
unzip \-\-\-qt zipfile
.EE
.PP
(the two is equivalent).  This may seem awkward
or confusin yo, but it is reasonably intuitive:  just ignore tha first
hyphen n' go from there, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  It be also consistent wit tha behavior of
Unix \fInice\fP(1).
.PP
As suggested by tha examplez above, tha default variable names is UNZIP_OPTS
for VMS (where tha symbol used ta install \fIunzip\fP as a gangbangin' foreign command
would otherwise be trippin wit tha environment variable), n' UNZIP
for all other operatin systems.  For compatibilitizzle wit \fIzip\fP(1L),
UNZIPOPT be also accepted (don't ask).  If both UNZIP n' UNZIPOPT
are defined, however, UNZIP takes precedence.  \fIunzip\fPz diagnostic
option (\fB\-v\fP wit no zipfile name) can be used ta check tha joints
of all four possible \fIunzip\fP n' \fIzipinfo\fP environment variables.
.PP
Da timezone variable (TZ) should be set accordin ta tha local timezone
in order fo' tha \fB\-f\fP n' \fB\-u\fP ta operate erectly.  See the
description of \fB\-f\fP above fo' details.  This variable may also be
necessary ta git timestampz of extracted filez ta be set erectly.
Da WIN32 (Win9x/ME/NT4/2K/XP/2K3) port of \fIunzip\fP gets tha timezone
configuration from tha registry, assumin it is erectly set up in the
Control Panel.  Da TZ variable is ignored fo' dis port.
.PD
.\" =========================================================================
.SH DECRYPTION
Encrypted archives is straight-up supported by Info-ZIP software yo, but due to
United Hoodz export restrictions, de-/encryption support might be disabled
in yo' compiled binary.  But fuck dat shiznit yo, tha word on tha street is dat since sprang 2000, US export restrictions
have been liberated, n' our source archives do now include full crypt code.
In case you need binary distributions wit crypt support enabled, peep the
file ``WHERE'' up in any Info-ZIP source or binary distribution fo' locations
both inside n' outside tha US.
.PP
Some compiled versionz of \fIunzip\fP may not support decryption.
To check a version fo' crypt support, either attempt ta test or extract
an encrypted archive, or else check \fIunzip\fPz diagnostic
screen (see tha \fB\-v\fP option above) fo' ``\fC[decryption]\fR'' as one
of tha special compilation options.
.PP
As noted above, tha \fB\-P\fP option may be used ta supply a password on
the command line yo, but at a cold-ass lil cost up in security.  Da preferred decryption
method is simply ta extract normally; if a zipfile member is encrypted,
\fIunzip\fP will prompt fo' tha password without echoin what tha fuck is typed.
\fIunzip\fP continues ta use tha same password as long as it appears ta be
valid, by testin a 12-byte header on each file.  Da erect password will
always check up against tha header yo, but there be a 1-in-256 chizzle dat an
incorrect password will as well.  (This be a securitizzle feature of tha PKWARE
zipfile format; it helps prevent brute-force attacks dat might otherwise
gain a big-ass speed advantage by testin only tha header.)  In tha case that
an incorrect password is given but it passes tha header test anyway, either
an incorrect CRC is ghon be generated fo' tha extracted data or else \fIunzip\fP
will fail durin tha extraction cuz tha ``decrypted'' bytes do not
constitute a valid compressed data stream.
.PP
If tha straight-up original gangsta password fails tha header check on some file, \fIunzip\fP will
prompt fo' another password, n' so on until all filez is extracted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If
a password aint known, enterin a null password (that is, just a cold-ass lil carriage
return or ``Enter'') is taken as a signal ta skip all further prompting.
Only unencrypted filez up in tha archive(s) will thereafta be extracted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  (In
fact, thatz not like true; olda versionz of \fIzip\fP(1L) and
\fIzipcloak\fP(1L) allowed null passwords, so \fIunzip\fP checks each encrypted
file ta peep if tha null password works.  This may result up in ``false positives''
and extraction errors, as noted above.)
.PP
Archives encrypted wit 8-bit passwordz (for example, passwordz wit accented
European characters) may not be portable across systems and/or other
archivers.  This problem stems from tha use of multiple encodin methodz for
such characters, includin Latin-1 (ISO 8859-1) n' OEM code page 850.
DOS \fIPKZIP\fP 2.04g uses tha OEM code page; Windows \fIPKZIP\fP 2.50
uses Latin-1 (and is therefore incompatible wit DOS \fIPKZIP\fP); Info-ZIP
uses tha OEM code page on DOS, OS/2 n' Win3.x ports but ISO coding
(Latin-1 etc.) everywhere else; n' Nico Makz \fIWinZip\fP 6.x do not
allow 8-bit passwordz at all.  \fIUnZip\fP 5.3 (or newer) attempts ta use
the default characta set first (e.g., Latin-1), followed by tha alternate
one (e.g., OEM code page) ta test passwords.  On EBCDIC systems, if both
of these fail, EBCDIC encodin is ghon be tested as a last resort.  (EBCDIC is
not tested on non-EBCDIC systems, cuz there be no known archivers
that encrypt rockin EBCDIC encoding.)  ISO characta encodings other than
Latin-1 is not supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da freshly smoked up addizzle of (partially) Unicode (resp.
UTF-8) support up in \fIUnZip\fP 6.0 has not yet been adapted ta tha encryption
password handlin up in \fIunzip\fP.  On systems dat use UTF-8 as native
characta encoding, \fIunzip\fP simply tries decryption wit tha native
UTF-8 encoded password; tha built-in attempts ta check tha password in
translated encodin aint yet been adapted fo' UTF-8 support and
will consequently fail.
.PD
.\" =========================================================================
.SH EXAMPLES
To use \fIunzip\fP ta extract all thugz of tha archive \fIletters.zip\fP
into tha current directory n' subdirectories below it, bustin any
subdirectories as necessary:
.PP
.EX
unzip letters
.EE
.PP
To extract all thugz of \fIletters.zip\fP tha fuck into tha current directory only:
.PP
.EX
unzip -j letters
.EE
.PP
To test \fIletters.zip\fP, printin only a summary message indicating
whether tha archive is OK or not:
.PP
.EX
unzip -tq letters
.EE
.PP
To test \fIall\fP zipfilez up in tha current directory, printin only the
summaries:
.PP
.EX
unzip -tq \e*.zip
.EE
.PP
(Da backslash before tha asterisk is only required if tha shell expands
wildcards, as up in Unix; double quotes could done been used instead, as in
the source examplez below.)\ \ To extract ta standard output all thugz of
\fIletters.zip\fP whose names end up in \fI.tex\fP, auto-convertin ta the
local end-of-line convention n' pipin tha output tha fuck into \fImore\fP(1):
.PP
.EX
unzip \-ca lettas \e*.tex | more
.EE
.PP
To extract tha binary file \fIpaper1.dvi\fP ta standard output n' pipe it
to a printin program:
.PP
.EX
unzip \-p articlez paper1.dvi | dvips
.EE
.PP
To extract all FORTRAN n' C source files--*.f, *.c, *.h, n' Makefile--into
the /tmp directory:
.PP
.EX
unzip source.zip "*.[fch]" Makefile -d /tmp
.EE
.PP
(the double quotes is necessary only up in Unix n' only if globbin is turned
on).  To extract all FORTRAN n' C source files, regardless of case (e.g.,
both *.c n' *.C, n' any makefile, Makefile, MAKEFILE or similar):
.PP
.EX
unzip \-C source.zip "*.[fch]" makefile -d /tmp
.EE
.PP
To extract any such filez but convert any uppercase MS-DOS or VMS names to
lowercase n' convert tha line-endingz of all of tha filez ta tha local
standard (without respect ta any filez dat might be marked ``binary''):
.PP
.EX
unzip \-aaCL source.zip "*.[fch]" makefile -d /tmp
.EE
.PP
To extract only newer versionz of tha filez already up in tha current
directory, without queryin (NOTE:  be careful of unzippin up in one timezone a
zipfile pimped up in another--ZIP archives other than dem pimped by Zip 2.1
or lata contain no timezone shiznit, n' a ``newer'' file from a eastsideern
timezone may, up in fact, be older):
.PP
.EX
unzip \-fo sources
.EE
.PP
To extract newer versionz of tha filez already up in tha current directory and
to create any filez not already there (same caveat as previous example):
.PP
.EX
unzip \-uo sources
.EE
.PP
To display a gangbangin' finger-lickin' diagnostic screen showin which \fIunzip\fP n' \fIzipinfo\fP
options is stored up in environment variables, whether decryption support was
compiled in, tha compila wit which \fIunzip\fP was compiled, etc.:
.PP
.EX
unzip \-v
.EE
.PP
In tha last five examples, assume dat UNZIP or UNZIP_OPTS is set ta -q.
To do a singly on tha down-low listing:
.PP
.EX
unzip \-l file.zip
.EE
.PP
To do a thugged-out doubly on tha down-low listing:
.PP
.EX
unzip \-ql file.zip
.EE
.PP
(Note dat tha ``\fC.zip\fR'' is generally not necessary.)  To do a standard
listing:
.PP
.EX
unzip \-\-ql file.zip
.EE
or
.EX
unzip \-l\-q file.zip
.EE
or
.EX
unzip \-l\-\-q file.zip
.EE
\fR(Extra minuses up in options don't hurt.)
.PD
.\" =========================================================================
.SH TIPS
Da current maintainer, bein a lazy sort, findz it straight-up useful ta define
a pair of aliases:  \fCtt\fR fo' ``\fCunzip \-tq\fR'' n' \fCii\fR for
``\fCunzip \-Z\fR'' (or ``\fCzipinfo\fR'').  One may then simply type
``\fCtt zipfile\fR'' ta test a archive, suttin' dat is worth makin a
g-thang of bustin.  With luck \fIunzip\fP will report ``\fCNo errors detected
in compressed data of zipfile.zip\fR,'' afta which one may breathe a sigh
of relief.
.PP
Da maintainer also findz it useful ta set tha UNZIP environment variable
to ``\fC\-aL\fR'' n' is tempted ta add ``\fC\-C\fR'' as well.  His ZIPINFO
variable is set ta ``\fC\-z\fR''.
.PD
.\" =========================================================================
.SH DIAGNOSTICS
Da exit status (or error level) approximates tha exit codes defined by PKWARE
and takes on tha followin joints, except under VMS:
.RS
.IP 0
normal; no errors or warnings detected.
.IP 1
one or mo' warnin errors was encountered yo, but processin completed
successfully anyway.  This includes zipfilez where one or mo' files
was skipped cuz of unsupported compression method or encryption wit an
unknown password.
.IP 2
a generic error up in tha zipfile format was detected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Processin may have
completed successfully anyway; some fucked up zipfilez pimped by other
archivers have simple work-arounds.
.IP 3
a severe error up in tha zipfile format was detected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Processin probably
failed immediately.
.IP 4
\fIunzip\fP was unable ta allocate memory fo' one or mo' buffers during
program initialization.
.IP 5
\fIunzip\fP was unable ta allocate memory or unable ta obtain a tty ta read
the decryption password(s).
.IP 6
\fIunzip\fP was unable ta allocate memory durin decompression ta disk.
.IP 7
\fIunzip\fP was unable ta allocate memory durin in-memory decompression.
.IP 8
[currently not used]
.IP 9
the specified zipfilez was not found.
.IP 10
invalid options was specified on tha command line.
.IP 11
no matchin filez was found.
.IP 50
the disk is (or was) full durin extraction.
.IP 51
the end of tha ZIP archive was encountered prematurely.
.IP 80
the user aborted \fIunzip\fP prematurely wit control-C (or similar)
.IP 81
testin or extraction of one or mo' filez failed cuz of unsupported
compression methodz or unsupported decryption.
.IP 82
no filez was found cuz of wack decryption password(s).  (If even one file is
successfully processed, however, tha exit status is 1.)
.RE
.PP
VMS interprets standard Unix (or PC) return joints as other, scarier-looking
things, so \fIunzip\fP instead maps dem tha fuck into VMS-style status codes.  The
current mappin be as bigs up:   1 (success) fo' aiiight exit, 0x7fff0001
for warnin errors, n' (0x7fff000? + 16*normal_unzip_exit_status) fo' all
other errors, where tha `?' is 2 (error) fo' \fIunzip\fP joints 2, 9-11 and
80-82, n' 4 (fatal error) fo' tha remainin ones (3-8, 50, 51).  In addition,
there be a cold-ass lil compilation option ta expand upon dis behavior:  defining
RETURN_CODES thangs up in dis biatch up in a human-readable explanation of what tha fuck tha error
status means.
.PD
.\" =========================================================================
.SH BUGS
Multi-part archives is not yet supported, except up in conjunction with
\fIzip\fP.  (All parts must be concatenated together up in order, n' then
``\fCzip \-F\fR'' (for \fIzip 2.x\fP) or ``\fCzip \-FF\fR'' (for
\fIzip 3.x\fP) must be performed on tha concatenated archive up in order to
``fix'' dat shit.  Also, \fIzip 3.0\fP n' lata can combine multi-part (split)
archives tha fuck into a cold-ass lil combined single-file archive rockin ``\fCzip \-s\- inarchive
-O outarchive\fR''.  See tha \fIzip 3\fP manual page fo' mo' shiznit.)
This will definitely be erected up in tha next major release.
.PP
Archives read from standard input is not yet supported, except with
\fIfunzip\fP (and then only tha straight-up original gangsta gangmember of tha archive can be extracted).
.PP
Archives encrypted wit 8-bit passwordz (e.g., passwordz wit accented
European characters) may not be portable across systems and/or other
archivers.  See tha rap up in \fBDECRYPTION\fP above.
.PP
\fIunzip\fPz \fB\-M\fP (``more'') option tries ta take tha fuck into account automatic
wrappin of long lines. But fuck dat shiznit yo, tha word on tha street is dat tha code may fail ta detect tha erect
wrappin locations. First, TAB charactas (and similar control sequences) are
not taken tha fuck into account, they is handled as ordinary printable characters.
Second, dependin on tha actual system / OS port, \fIunzip\fP may not detect
the legit screen geometry but rather rely on "commonly used" default dimensions.
Da erect handlin of tabs would require tha implementation of a query for
the actual tabulator setup on tha output console.
.PP
Dates, times n' permissionz of stored directories is not restored except
under Unix. (On Windows NT n' successors, timestamps is now restored.)
.PP
[MS-DOS] When extractin or testin filez from a archive on a thugged-out defective
floppy diskette, if tha ``Fail'' option is chosen from DOSz ``Abort, Retry,
Fail?'' message, olda versionz of \fIunzip\fP may hang tha system, requiring
a reboot.  This problem appears ta be fixed yo, but control-C (or control-Break)
can still be used ta terminizzle \fIunzip\fP.
.PP
Under DEC Ultrix, \fIunzip\fP would sometimes fail on long zipfilez (bad CRC,
not always reproducible).  This was apparently due either ta a hardware bug
(cache memory) or a operatin system bug (improper handlin of page faults?).
Since Ultrix has been abandoned up in favor of Digital Unix (OSF/1), dis may not
be a issue no mo'.
.PP
[Unix] Unix special filez like fuckin FIFO buffers (named pipes), block devices
and characta devices is not restored even if they is somehow represented
in tha zipfile, nor is hard-linked filez relinked. Y'all KNOW dat shit, muthafucka!  Basically tha only file
types restored by \fIunzip\fP is regular files, directories n' symbolic
(soft) links.
.PP
[OS/2] Extended attributes fo' existin directories is only updated if the
\fB\-o\fP (``overwrite all'') option is given. I aint talkin' bout chicken n' gravy biatch.  This be a limitation of the
operatin system; cuz directories only gotz a cold-ass lil creation time associated
with them, \fIunzip\fP has no way ta determine whether tha stored attributes
are newer or olda than dem on disk.  In practice dis may mean a two-pass
approach is required:  first unpack tha archive normally (with or without
freshening/uppimpin existin files), then overwrite just tha directory entries
(e.g., ``\fCunzip -o foo */\fR'').
.PP
[VMS] When extractin ta another directory, only tha \fI[.foo]\fP syntax is
accepted fo' tha \fB\-d\fP option; tha simple Unix \fIfoo\fP syntax is
silently ignored (as is tha less common VMS \fIfoo.dir\fP syntax).
.PP
[VMS] When tha file bein extracted already exists, \fIunzip\fPz query only
allows skipping, overwritin or renaming; there should additionally be a
choice fo' bustin a freshly smoked up version of tha file.  In fact, tha ``overwrite''
choice do create a freshly smoked up version; tha oldschool version aint overwritten or
deleted.
.PD
.\" =========================================================================
.SH "SEE ALSO"
\fIfunzip\fP(1L), \fIzip\fP(1L), \fIzipcloak\fP(1L), \fIzipgrep\fP(1L),
\fIzipinfo\fP(1L), \fIzipnote\fP(1L), \fIzipsplit\fP(1L)
.PD
.\" =========================================================================
.SH URL
Da Info-ZIP home page is currently at
.EX
\fChttp://www.info-zip.org/pub/infozip/\fR
.EE
or
.EX
\fCftp://ftp.info-zip.org/pub/infozip/\fR .
.EE
.PD
.\" =========================================================================
.SH AUTHORS
Da primary Info-ZIP authors (current semi-actizzle thugz of tha Zip-Bugs
workgroup) are:  Ed Gordon (Zip, general maintenance, shared code, Zip64,
Win32, Unix, Unicode); Christian Spiela (UnZip maintenizzle coordination,
VMS, MS-DOS, Win32, shared code, general Zip n' UnZip integration and
optimization); Onno van der Linden (Zip); Mike White (Win32, Windows GUI,
Windows DLLs); Kai Uwe Rommel (OS/2, Win32); Steven M. Right back up in yo muthafuckin ass. Schweda (VMS, Unix,
support of freshly smoked up features); Pizzle Kienitz (Amiga, Win32, Unicode); Chris
Herborth (BeOS, QNX, Atari); Jonathan Hudson (SMS/QDOS); Sergio Monesi
(Acorn RISC OS); Harald Denker (Atari, MVS); Jizzy Bush (Solaris, Amiga);
Hunta Goatley (VMS, Info-ZIP Joint maintenance); Steve Salisbury (Win32);
Steve Milla (Windows CE GUI), Jizzy Lee (MS-DOS, Win32, Zip64); n' Dave
Smith (Tandem NSK).
.PP
Da followin playas was forma thugz of tha Info-ZIP pimpment group
and provided major contributions ta key partz of tha current code:
Greg ``Cave Newt'' Roelofs (UnZip, unshrink decompression);
Jean-loup Gailly (deflate compression);
Mark Adla (inflate decompression, fUnZip).
.PP
Da lyricist of tha original gangsta unzip code upon which Info-ZIPz was based
is Samuel H. Right back up in yo muthafuckin ass. Smizzle; Carl Mascott did tha straight-up original gangsta Unix port; n' Dizzy P.
Kirschbaum organized n' hustled Info-ZIP up in its early minutes wit Keith Petersen
hostin tha original gangsta mailin list at WSMR-SimTel20.  Da full list of
contributors ta UnZip has grown like large; please refer ta tha CONTRIBS
file up in tha UnZip source distribution fo' a relatively complete version.
.PD
.\" =========================================================================
.SH VERSIONS
.ta \w'vx.xxnn'u +\w'fall 1989'u+3n
.PD 0
.IP "v1.2\t15 Mar 89" \w'\t\t'u
Samuel H. Right back up in yo muthafuckin ass. Smizzle
.IP "v2.0\t\ 9 Sep 89"
Samuel H. Right back up in yo muthafuckin ass. Smizzle
.IP "v2.x\tfall 1989"
many Usenet contributors
.IP "v3.0\t\ 1 May 90"
Info-ZIP (DPK, consolidator)
.IP "v3.1\t15 Aug 90"
Info-ZIP (DPK, consolidator)
.IP "v4.0\t\ 1 Dec 90"
Info-ZIP (GRR, maintainer)
.IP "v4.1\t12 May 91"
Info-ZIP
.IP "v4.2\t20 Mar 92"
Info-ZIP (Zip-Bugs subgroup, GRR)
.IP "v5.0\t21 Aug 92"
Info-ZIP (Zip-Bugs subgroup, GRR)
.IP "v5.01\t15 Jan 93"
Info-ZIP (Zip-Bugs subgroup, GRR)
.IP "v5.1\t\ 7 Feb 94"
Info-ZIP (Zip-Bugs subgroup, GRR)
.IP "v5.11\t\ 2 Aug 94"
Info-ZIP (Zip-Bugs subgroup, GRR)
.IP "v5.12\t28 Aug 94"
Info-ZIP (Zip-Bugs subgroup, GRR)
.IP "v5.2\t30 Apr 96"
Info-ZIP (Zip-Bugs subgroup, GRR)
.IP "v5.3\t22 Apr 97"
Info-ZIP (Zip-Bugs subgroup, GRR)
.IP "v5.31\t31 May 97"
Info-ZIP (Zip-Bugs subgroup, GRR)
.IP "v5.32\t\ 3 Nov 97"
Info-ZIP (Zip-Bugs subgroup, GRR)
.IP "v5.4\t28 Nov 98"
Info-ZIP (Zip-Bugs subgroup, SPC)
.IP "v5.41\t16 Apr 00"
Info-ZIP (Zip-Bugs subgroup, SPC)
.IP "v5.42\t14 Jan 01"
Info-ZIP (Zip-Bugs subgroup, SPC)
.IP "v5.5\t17 Feb 02"
Info-ZIP (Zip-Bugs subgroup, SPC)
.IP "v5.51\t22 May 04"
Info-ZIP (Zip-Bugs subgroup, SPC)
.IP "v5.52\t28 Feb 05"
Info-ZIP (Zip-Bugs subgroup, SPC)
.IP "v6.0\t20 Apr 09"
Info-ZIP (Zip-Bugs subgroup, SPC)
.PD
