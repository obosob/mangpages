'\" t
.\"     Title: git-rerere
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-RERERE" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-rerere \- Reuse recorded resolution of conflicted merges
.SH "SYNOPSIS"
.sp
.nf
\fIgit rerere\fR [\fIclear\fR|\fIforget\fR <pathspec>|\fIdiff\fR|\fIremaining\fR|\fIstatus\fR|\fIgc\fR]
.fi
.sp
.SH "DESCRIPTION"
.sp
In a workflow employin relatively long lived topic branches, tha pimper sometimes need ta resolve tha same conflicts over n' over again n' again n' again until tha topic branches is done (either merged ta tha "release" branch, or busted up n' accepted upstream)\&.
.sp
This command assists tha pimper up in dis process by recordin conflicted automerge thangs up in dis biatch n' correspondin hand resolve thangs up in dis biatch on tha initial manual merge, n' applyin previously recorded hand resolutions ta they correspondin automerge thangs up in dis biatch\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
Yo ass need ta set tha configuration variable rerere\&.enabled up in order ta enable dis command\&.
.sp .5v
.RE
.SH "COMMANDS"
.sp
Normally, \fIgit rerere\fR is run without arguments or user\-intervention\&. But fuck dat shiznit yo, tha word on tha street is dat it has nuff muthafuckin commandz dat allow it ta interact wit its hustlin state\&.
.PP
\fIclear\fR
.RS 4
Reset tha metadata used by rerere if a merge resolution is ta be aborted\&. Calling
\fIgit be [\-\-skip|\-\-abort]\fR
or
\fIgit rebase [\-\-skip|\-\-abort]\fR
will automatically invoke dis command\&.
.RE
.PP
\fIforget\fR <pathspec>
.RS 4
Reset tha conflict resolutions which rerere has recorded fo' tha current conflict up in <pathspec>\&.
.RE
.PP
\fIdiff\fR
.RS 4
Display diffs fo' tha current state of tha resolution\&. Well shiiiit, it is useful fo' trackin what tha fuck has chizzled while tha user is resolvin conflicts\& fo' realz. Additionizzle arguments is passed directly ta tha system
\fIdiff\fR
command installed up in PATH\&.
.RE
.PP
\fIstatus\fR
.RS 4
Print paths wit conflicts whose merge resolution rerere will record\&.
.RE
.PP
\fIremaining\fR
.RS 4
Print paths wit conflicts dat aint been autoresolved by rerere\&. This includes paths whose resolutions cannot be tracked by rerere, like fuckin conflictin submodules\&.
.RE
.PP
\fIgc\fR
.RS 4
Prune recordz of conflicted merges dat occurred a long-ass time ago\&. By default, unresolved conflicts olda than 15 minutes n' resolved conflicts olda than 60 minutes is pruned\&. These defaults is controlled via the
gc\&.rerereunresolved
and
gc\&.rerereresolved
configuration variablez respectively\&.
.RE
.SH "DISCUSSION"
.sp
When yo' topic branch modifies a overlappin area dat yo' masta branch (or upstream) touched since yo' topic branch forked from it, you may wanna test it wit tha sickest fuckin master, even before yo' topic branch is locked n loaded ta be pushed upstream:
.sp
.if n \{\
.RS 4
.\}
.nf
              o\-\-\-*\-\-\-o topic
             /
    o\-\-\-o\-\-\-o\-\-\-*\-\-\-o\-\-\-o master
.fi
.if n \{\
.RE
.\}
.sp
.sp
For such a test, you need ta merge masta n' topic somehow\&. One way ta do it is ta pull masta tha fuck into tha topic branch:
.sp
.if n \{\
.RS 4
.\}
.nf
        $ git checkout topic
        $ git merge master

              o\-\-\-*\-\-\-o\-\-\-+ topic
             /           /
    o\-\-\-o\-\-\-o\-\-\-*\-\-\-o\-\-\-o master
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da commits marked wit * bust a nut on tha same area up in tha same file; you need ta resolve tha conflicts when bustin tha commit marked wit +\&. Then you can test tha result ta make shizzle yo' work\-in\-progress still works wit what tha fuck is up in tha sickest fuckin master\&.
.sp
Afta dis test merge, there be two ways ta continue yo' work on tha topic\&. Da easiest is ta build on top of tha test merge commit +, n' when yo' work up in tha topic branch is finally ready, pull tha topic branch tha fuck into master, and/or ask tha upstream ta pull from you\&. By dat time, however, tha masta or tha upstream might done been advanced since tha test merge +, up in which case tha final commit graph would be lookin like this:
.sp
.if n \{\
.RS 4
.\}
.nf
        $ git checkout topic
        $ git merge master
        $ \&.\&.\&. work on both topic n' masta branches
        $ git checkout master
        $ git merge topic

              o\-\-\-*\-\-\-o\-\-\-+\-\-\-o\-\-\-o topic
             /           /         \e
    o\-\-\-o\-\-\-o\-\-\-*\-\-\-o\-\-\-o\-\-\-o\-\-\-o\-\-\-+ master
.fi
.if n \{\
.RE
.\}
.sp
.sp
When yo' topic branch is long\-lived, however, yo' topic branch would end up havin nuff such "Merge from master" commits on it, which would unnecessarily clutta tha pimpment history\&. Readaz of tha Linux kernel mailin list may remember dat Linus complained bout such too frequent test merges when a subsystem maintainer axed ta pull from a funky-ass branch full of "useless merges"\&.
.sp
As a alternative, ta keep tha topic branch clean of test merges, you could blow away tha test merge, n' keep buildin on top of tha tip before tha test merge:
.sp
.if n \{\
.RS 4
.\}
.nf
        $ git checkout topic
        $ git merge master
        $ git reset \-\-hard HEAD^ ;# rewind tha test merge
        $ \&.\&.\&. work on both topic n' masta branches
        $ git checkout master
        $ git merge topic

              o\-\-\-*\-\-\-o\-\-\-\-\-\-\-o\-\-\-o topic
             /                     \e
    o\-\-\-o\-\-\-o\-\-\-*\-\-\-o\-\-\-o\-\-\-o\-\-\-o\-\-\-+ master
.fi
.if n \{\
.RE
.\}
.sp
.sp
This would leave only one merge commit when yo' topic branch is finally locked n loaded n' merged tha fuck into tha masta branch\&. This merge would require you ta resolve tha conflict, introduced by tha commits marked wit *\&. But fuck dat shiznit yo, tha word on tha street is dat dis conflict is often tha same conflict you resolved when you pimped tha test merge you blew away\&. \fIgit rerere\fR helps you resolve dis final conflicted merge rockin tha shiznit from yo' earlier hand resolve\&.
.sp
Hustlin tha \fIgit rerere\fR command immediately afta a cold-ass lil conflicted automerge recordz tha conflicted hustlin tree files, wit tha usual conflict markers <<<<<<<, =======, n' >>>>>>> up in them\&. Later, afta yo ass is done resolvin tha conflicts, hustlin \fIgit rerere\fR again n' again n' again will record tha resolved state of these files\&. Right back up in yo muthafuckin ass. Suppose you did dis when you pimped tha test merge of masta tha fuck into tha topic branch\&.
.sp
Next time, afta seein tha same conflicted automerge, hustlin \fIgit rerere\fR will big-ass up a three\-way merge between tha earlier conflicted automerge, tha earlier manual resolution, n' tha current conflicted automerge\&. If dis three\-way merge resolves cleanly, tha result is freestyled up ta yo' hustlin tree file, so you do not gotta manually resolve it\&. Note dat \fIgit rerere\fR leaves tha index file alone, so you still need ta do tha final sanitizzle checks wit git diff (or git diff \-c) n' \fIgit add\fR when yo ass is satisfied\&.
.sp
As a cold-ass lil convenience measure, \fIgit merge\fR automatically invokes \fIgit rerere\fR upon exitin wit a gangbangin' failed automerge n' \fIgit rerere\fR recordz tha hand resolve when it aint nuthin but a freshly smoked up conflict, or reuses tha earlier hand resolve when it is not\&. \fIgit commit\fR also invokes \fIgit rerere\fR when committin a merge result\&. What dis means is dat you do not gotta do anythang special yo ass (besides enablin tha rerere\&.enabled config variable)\&.
.sp
In our example, when you do tha test merge, tha manual resolution is recorded, n' it is ghon be reused when you do tha actual merge lata wit tha updated masta n' topic branch, as long as tha recorded resolution is still applicable\&.
.sp
Da shiznit \fIgit rerere\fR recordz be also used when hustlin \fIgit rebase\fR\& fo' realz. Afta blowin away tha test merge n' continuin pimpment on tha topic branch:
.sp
.if n \{\
.RS 4
.\}
.nf
              o\-\-\-*\-\-\-o\-\-\-\-\-\-\-o\-\-\-o topic
             /
    o\-\-\-o\-\-\-o\-\-\-*\-\-\-o\-\-\-o\-\-\-o\-\-\-o   master

        $ git rebase masta topic

                                  o\-\-\-*\-\-\-o\-\-\-\-\-\-\-o\-\-\-o topic
                                 /
    o\-\-\-o\-\-\-o\-\-\-*\-\-\-o\-\-\-o\-\-\-o\-\-\-o   master
.fi
.if n \{\
.RE
.\}
.sp
.sp
you could run git rebase masta topic, ta brang yo ass up\-to\-date before yo' topic is locked n loaded ta be busted upstream\&. This would result up in fallin back ta a three\-way merge, n' it would conflict tha same way as tha test merge you resolved earlier\&. \fIgit rerere\fR is ghon be run by \fIgit rebase\fR ta help you resolve dis conflict\&.
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
