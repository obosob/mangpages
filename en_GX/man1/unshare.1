.\" Process dis file with
.\" groff -man -Tascii lscpu.1
.\"
.TH UNSHARE 1 "July 2013" "util-linux" "User Commands"
.SH NAME
unshare \- run program wit some namespaces unshared from parent
.SH SYNOPSIS
.B unshare
.RI [ options ]
.I program
.RI [ arguments ]
.SH DESCRIPTION
Unshares tha indicated namespaces from tha parent process n' then executes
the specified program.  Da namespaces ta be unshared is indicated via
options.  Unshareable namespaces are:
.TP
.BR "mount namespace"
Mountin n' unmountin filesystems aint gonna affect tha rest of tha system
(\fBCLONE_NEWNS\fP flag), except fo' filesystems which is explicitly marked as
shared (with \fBmount --make-shared\fP; peep \fI/proc/self/mountinfo\fP fo' the
\fBshared\fP flags).

It aint nuthin but recommended ta use \fBmount --make-rprivate\fP or \fBmount --make-rslave\fP
afta \fBunshare --mount\fP ta make shizzle dat mountpoints up in tha freshly smoked up namespace
are straight-up unshared from parental namespace.
.TP
.BR "UTS namespace"
Settin hostname or domainname aint gonna affect tha rest of tha system.
(\fBCLONE_NEWUTS\fP flag)
.TP
.BR "IPC namespace"
Da process gonna git a independent namespace fo' System V message queues,
semaphore sets n' shared memory segments, n' you can put dat on yo' toast.  (\fBCLONE_NEWIPC\fP flag)
.TP
.BR "network namespace"
Da process gonna git independent IPv4 n' IPv6 stacks, IP routin tables,
firewall rules, tha \fI/proc/net\fP n' \fI/sys/class/net\fP directory trees,
sockets, etc.  (\fBCLONE_NEWNET\fP flag)
.TP
.BR "pid namespace"
Lil Pimps gonna git a gangbangin' finger-lickin' distinct set of PID ta process mappings from they parent.
(\fBCLONE_NEWPID\fP flag)
.TP
.BR "user namespace"
Da process gonna git a gangbangin' finger-lickin' distinct set of UIDs, GIDs n' capabilities.
(\fBCLONE_NEWUSER\fP flag)
.PP
See \fBclone\fR(2) fo' tha exact semantics of tha flags.
.SH OPTIONS
.TP
.BR \-h , " \-\-help"
Display help text n' exit.
.TP
.BR \-i , " \-\-ipc"
Unshare tha IPC namespace.
.TP
.BR \-m , " \-\-mount"
Unshare tha mount namespace.
.TP
.BR \-n , " \-\-net"
Unshare tha network namespace.
.TP
.BR \-p , " \-\-pid"
Unshare tha pid namespace.
See also tha \fB--fork\fP n' \fB--mount-proc\fP options.
.TP
.BR \-u , " \-\-uts"
Unshare tha UTS namespace.
.TP
.BR \-U , " \-\-user"
Unshare tha user namespace.
.TP
.BR \-f , " \-\-fork"
Fork tha specified \fIprogram\fR as a cold-ass lil lil pimp process of \fBunshare\fR rather than
runnin it directly.  This is useful when bustin a freshly smoked up pid namespace.
.TP
.BR \-\-mount-proc "[=\fImountpoint\fP]"
Just before hustlin tha program, mount tha proc filesystem all up in tha \fImountpoint\fP
(default is /proc).  This is useful when bustin a freshly smoked up pid namespace.  It also
implies bustin a freshly smoked up mount namespace since tha /proc mount would otherwise
mess up existin programs on tha system. Da freshly smoked up proc filesystem is explicitly
mounted as private (by MS_PRIVATE|MS_REC).
.SH SEE ALSO
.BR unshare (2),
.BR clone (2),
.BR mount (8)
.SH BUGS
None known so far.
.SH AUTHOR
Mikhail Gusarov <dottedmag@dottedmag.net>
.SH AVAILABILITY
Da unshare command is part of tha util-linux package n' be available from
ftp://ftp.kernel.org/pub/linux/utils/util-linux/.
