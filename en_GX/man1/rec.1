'\" t
'\" Da line above instructs most `man' programs ta invoke tbl
'\"
'\" Separate paragraphs; not tha same as PP which resets indent level.
.de SP
.if t .sp .5
.if n .sp
..
'\"
'\" Replacement em-dash fo' nroff (default is too short).
.ie n .ds m " - 
.el .ds m \(em
'\"
'\" Placeholda macro fo' if longer nroff arrow is needed.
.ds RA \(->
'\"
'\" Decimal point set slightly raised
.if t .ds d \v'-.15m'.\v'+.15m'
.if n .ds d .
'\"
'\" Enclosure macro fo' examples
.de EX
.SP
.nf
.ft CW
..
.de EE
.ft R
.SP
.fi
..
.TH SoX 1 "February 1, 2013" "sox" "Sound eXchange"
.SH NAME
SoX \- Sound eXchange, tha Swiss Army knife of audio manipulation
.SH SYNOPSIS
.nf
\fBsox\fR [\fIglobal-options\fR] [\fIformat-options\fR] \fIinfile1\fR
	[[\fIformat-options\fR] \fIinfile2\fR] ... [\fIformat-options\fR] \fIoutfile\fR
	[\fIeffect\fR [\fIeffect-options\fR]] ...
.SP
\fBplay\fR [\fIglobal-options\fR] [\fIformat-options\fR] \fIinfile1\fR
	[[\fIformat-options\fR] \fIinfile2\fR] ... [\fIformat-options\fR]
	[\fIeffect\fR [\fIeffect-options\fR]] ...
.SP
\fBrec\fR [\fIglobal-options\fR] [\fIformat-options\fR] \fIoutfile\fR
	[\fIeffect\fR [\fIeffect-options\fR]] ...
.fi
.SH DESCRIPTION
.SS Introduction
SoX readz n' writes audio filez up in most ghettofab formats n' can
optionally apply effects ta em. Well shiiiit, it can combine multiple input
sources, synthesise audio, and, on nuff systems, act as a general
purpose audio playa or a multi-track audio recorder n' shit. Well shiiiit, it also has
limited mobilitizzle ta split tha input tha fuck into multiple output files.
.SP
All SoX functionalitizzle be available rockin just tha \fBsox\fR command.
To simplify playin n' recordin audio, if SoX is invoked as
\fBplay\fR, tha output file be automatically set ta be tha default sound
device, n' if invoked as \fBrec\fR, tha default sound thang is used as an
input source.
Additionally, the
.BR soxi (1)
command serves up a cold-ass lil convenient way ta just query audio file header shiznit.
.SP
Da ass of SoX be a library called libSoX.  Those interested in
extendin SoX or rockin it up in other programs should refer ta tha libSoX
manual page:
.BR libsox (3).
.SP
SoX be a cold-ass lil command-line audio processin tool, particularly suited ta making
quick, simple edits n' ta batch processing.
If you need a interactive, graphical audio editor, use
.BR audacitizzle (1).
.TS
center;
c8 c8 c.
*	*	*
.TE
.DT
.SP
Da overall SoX processin chain can be summarised as bigs up:
.TS
center;
l.
Input(s) \*(RA Combiner \*(RA Effects \*(RA Output(s)
.TE
.DT
.SP
Note however, dat on tha SoX command line, tha positionz of the
Output(s) n' tha Effects is swapped w.r.t. tha logical flow just
shown. I aint talkin' bout chicken n' gravy biatch.  Note also dat whilst options pertainin ta filez is placed
before they respectizzle file name, tha opposite is legit fo' effects.
To show how tha fuck dis works up in practice, here be a selection of examplez of
how SoX might be used. Y'all KNOW dat shit, muthafucka!  Da simple
.EX
   sox recital.au recital.wav
.EE
translates a audio file up in Sun AU format ta a Microsizzlez WAV file, whilst
.EX
   sox recital.au \-b 16 recital.wav channels 1 rate 16k fade 3 norm
.EE
performs tha same ol' dirty format translation yo, but also applies four effects
(down-mix ta one channel, sample rate chizzle, fade-in, nomalize),
and stores tha result at a funky-ass bit-depth of 16.
.EX
   sox \-r 16k \-e signed \-b 8 \-c 1 voice-memo.raw voice-memo.wav
.EE
converts `raw' (a.k.a. `headerless') audio ta a self-describin file format,
.EX
   sox slow.aiff fixed.aiff speed 1.027
.EE
adjusts audio speed,
.EX
   sox short.wav long.wav longer.wav
.EE
concatenates two audio files, and
.EX
   sox \-m music.mp3 voice.wav mixed.flac
.EE
mixes together two audio files.
.EX
   play \(dqDa Moonbeams/Greatest/*.ogg\(dq bass +3
.EE
plays a cold-ass lil collection of audio filez whilst applyin a funky-ass bass boostin effect,
.EX
   play \-n \-c1 synth sin %\-12 sin %\-9 sin %\-5 sin %\-2 fade h 0.1 1 0.1
.EE
plays a synthesised `A minor seventh' chord wit a pipe-organ sound,
.EX
   rec \-c 2 radio.aiff trim 0 30:00
.EE
recordz half a minute of stereo audio, and
.EX
   play \-q take1.aiff & rec \-M take1.aiff take1\-dub.aiff
.EE
(with POSIX shell n' where supported by hardware)
recordz a freshly smoked up track up in a multi-track recording.  Finally,
.EX
.ne 3
   rec \-r 44100 \-b 16 \-s \-p silence 1 0.50 0.1% 1 10:00 0.1% | \\
	sox \-p song.ogg silence 1 0.50 0.1% 1 2.0 0.1% : \\
	newfile : restart
.EE
recordz a stream of audio like fuckin LP/cassette n' splits up in ta multiple
audio filez at points wit 2 secondz of silence.  Also, it do not start
recordin until it detects audio is playin n' stops afta it sees
10 minutez of silence.
.SP
N.B.  Da above is just a overview of SoXz capabilities; detailed
explanationz of how tha fuck ta use \fIall\fR SoX parameters, file formats, and
effects can be found below up in dis manual, in
.BR soxformat (7),
and in
.BR soxi (1).
.SS File Format Types
SoX can work wit `self-describing' n' `raw' audio files.
`self-describing' formats (e.g. WAV, FLAC, MP3) gotz a header that
completely raps bout tha signal n' encodin attributez of tha audio
data dat bigs up. `raw' or `headerless' formats do not contain this
information, so tha audio characteristics of these must be busted lyrics about
on tha SoX command line or inferred from dem of tha input file.
.SP
Da followin four characteristics is used ta describe tha format of
audio data such dat it can be processed wit SoX:
.TP
sample rate
Da sample rate up in samplez per second (`Hertz' or `Hz').
Digital telephony traditionally uses a sample rate of 8000\ Hz (8\ kHz),
though these days, 16 n' even 32\ kHz is becomin mo' common. I aint talkin' bout chicken n' gravy biatch fo' realz. Audio
Compact Discs use 44100\ Hz (44\*d1\ kHz). Digital Audio Tape n' many
computa systems use 48\ kHz. Professionizzle audio systems often use 96
kHz.
.TP
sample size
Da number of bits used ta store each sample.  Today, 16-bit is
commonly used. Y'all KNOW dat shit, muthafucka! 8-bit was ghettofab up in tha early minutez of computer
audio. 24-bit is used up in tha professionizzle audio arena. Other sizes are
also used.
.TP
data encoding
Da way up in which each audio sample is represented (or `encoded').  Some
encodings have variants wit different byte-orderings or bit-orderings.
Some compress tha audio data so dat tha stored audio data takes up less
space (i.e. disk space or transmission bandwidth) than tha other format
parametas n' tha number of samplez would imply.  Commonly-used
encodin types include floating-point, \(*m-law, ADPCM, signed-integer
PCM, MP3, n' FLAC.
.TP
channels
Da number of audio channels contained up in tha file.  One (`mono') and
two (`stereo') is widely used. Y'all KNOW dat shit, muthafucka!  `Surround sound' audio typically
gotz nuff six or mo' channels.
.PP
Da term `bit-rate' be a measure of tha amount of storage occupied by an
encoded audio signal over a unit of time.  It can depend on all of the
above n' is typically denoted as a fuckin shitload of kilo-bits per second
(kbps).  An A-law telephony signal has a funky-ass bit-rate of 64 kbps. MP3-encoded
stereo noize typically has a funky-ass bit-rate of 128\-196 kbps. FLAC-encoded
stereo noize typically has a funky-ass bit-rate of 550\-760 kbps.
.SP
Most self-describin formats also allow textual `comments' ta be
embedded up in tha file dat can be used ta describe tha audio up in some way,
e.g. fo' beatz, tha title, tha lyricist, etc.
.SP
One blingin use of audio file comments is ta convey `Replay Gain'
information. I aint talkin' bout chicken n' gravy biatch.  SoX supports applyin Replay Gain shiznit yo, but not
generatin dat shit.  Note dat by default, SoX copies input file comments
to output filez dat support comments, so output filez may contain
Replay Gain shiznit if some was present up in tha input file.  In this
case, if anythang other than a simple format conversion was performed
then tha output file Replay Gain shiznit is likely ta be incorrect
and so should be recalculated rockin a tool dat supports dis (not SoX).
.SP
The
.BR soxi (1)
command can be used ta display shiznit from audio file headers.
.SS Determinin & Settin Da File Format
There is nuff muthafuckin mechanizzlez available fo' SoX ta use ta determine or set the
format characteristics of a audio file.  Dependin on tha circumstances,
individual characteristics may be determined or set rockin different mechanisms.
.SP
To determine tha format of a input file, SoX will use, up in order of
precedence n' as given or available:
.IP 1. 4
Command-line format options.
.IP 2. 4
Da contentz of tha file header.
.IP 3. 4
Da filename extension.
.PP
To set tha output file format, SoX will use, up in order of
precedence n' as given or available:
.IP 1. 4
Command-line format options.
.IP 2. 4
Da filename extension.
.IP 3. 4
Da input file format characteristics, or tha closest
that is supported by tha output file type.
.PP
For all files, SoX will exit wit a error
if tha file type cannot be determined. Y'all KNOW dat shit, muthafucka! Command-line format options may
need ta be added or chizzled ta resolve tha problem.
.SS Playin & Recordin Audio
The
.B play
and
.B rec
commandz is provided so dat basic playin and
recordin be as simple as
.EX
   play existing-file.wav
.EE
and
.EX
   rec new-file.wav
.EE
These two commandz is functionally equivalent to
.EX
   sox existing-file.wav \-d
.EE
and
.EX
   sox \-d new-file.wav
.EE
Of course, further options n' effects (as busted lyrics bout below) can be
added ta tha commandz up in either form.
.TS
center;
c8 c8 c.
*	*	*
.TE
.DT
.SP
Some systems provide mo' than one type of (SoX-compatible) audio
driver, e.g fo' realz. ALSA & OSS, or SUNAU & AO.
Systems can also have mo' than one audio thang (a.k.a. `sound card').
If mo' than one audio driver has been
built-in ta SoX, n' tha default selected by SoX when recordin or playing
is not tha one dat is wanted, then the
.B AUDIODRIVER
environment variable can be used ta override tha default.  For example
(on nuff systems):
.EX
   set AUDIODRIVER=oss
   play ...
.EE
The
.B AUDIODEV
environment variable can be used ta override tha default audio device,
e.g.
.EX
   set AUDIODEV=/dev/dsp2
   play ...
   sox ... \-t oss
.EE
or
.EX
   set AUDIODEV=hw:soundwave,1,2
   play ...
   sox ... \-t alsa
.EE
Note dat tha way of settin environment variablez varies from system
to system\*mfor some specific examples, peep `SOX_OPTS' below.
.SP
When playin a gangbangin' file wit a sample rate dat aint supported by the
audio output device, SoX will automatically invoke tha \fBrate\fR effect
to big-ass up tha necessary sample rate conversion. I aint talkin' bout chicken n' gravy biatch.  For
compatibilitizzle wit oldschool hardware, the
default \fBrate\fR qualitizzle level is set ta `low'. This
can be chizzled by explicitly specifyin tha \fBrate\fR
effect wit a gangbangin' finger-lickin' different qualitizzle level, e.g.
.EX
   play ... rate \-m
.EE
or by rockin the
.B \-\-play\-rate\-arg
option (see below).
.TS
center;
c8 c8 c.
*	*	*
.TE
.DT
.SP
On some systems, SoX allows audio playback volume ta be adjusted whilst
using
.BR play .
Where supported, dis be  bigged up  by tappin tha `v' & `V' keys during
playback.
.SP
To help wit settin a suitable recordin level, SoX includes a peak-level
meta which can be invoked (before makin tha actual recording) as bigs up:
.EX
   rec \-n
.EE
Da recordin level should be adjusted (usin tha system-provided mixer
program, not SoX) so dat tha meta is \fIat most occasionally\fR full
scale, n' never `in tha red' (an exclamation mark is shown).
See also \fB\-S\fR below.
.SS Accuracy
Many file formats dat compress audio discard a shitload of tha audio signal
information whilst bustin so. Convertin ta such a gangbangin' format n' then converting
back again n' again n' again aint gonna produce a exact copy of tha original gangsta audio.  This
is tha case fo' nuff formats used up in telephony (e.g fo' realz. A-law, GSM) where
low signal bandwidth is mo' blingin than high audio fidelity, n' for
many formats used up in portable noize playas (e.g. MP3, Vorbis) where
adequate fidelitizzle can be retained even wit tha big-ass compression ratios
that is needed ta make portable playas practical.
.SP
Formats dat discard audio signal shiznit is called `lossy'.
Formats dat do not is called `lossless'.  Da term `quality' is used as a
measure of how tha fuck closely tha original gangsta audio signal can be reproduced when
usin a lossy format.
.SP
Audio file conversion wit SoX is lossless when it can be, i.e. when not
usin lossy compression, when not reducin tha samplin rate or number
of channels, n' when tha number of bits used up in tha destination format
is not less than up in tha source format.  E.g.  convertin from a 8-bit
PCM format ta a 16-bit PCM format is lossless but convertin from an
8-bit PCM format ta (8-bit) A-law aint.
.SP
.B N.B.
SoX converts all audio filez ta a internal uncompressed
format before struttin any audio processing. This means that
manipulatin a gangbangin' file dat is stored up in a lossy format can cause further
losses up in audio fidelity.  E.g. with
.EX
   sox long.mp3 short.mp3 trim 10
.EE
SoX first decompresses tha input MP3 file, then applies the
.B trim
effect, n' finally creates tha output MP3 file by re-compressin the
audio\*mwith a possible reduction up in fidelitizzle above dat which
occurred when tha input file was pimped.
Hence, if what tha fuck is ultimately desired is lossily compressed audio, it is
highly recommended ta big-ass up all audio processin rockin lossless file
formats n' then convert ta tha lossy format only all up in tha final stage.
.SP
.B N.B.
Applyin multiple effects wit a single SoX invocation will,
in general, produce mo' accurate thangs up in dis biatch than dem produced using
multiple SoX invocations.
.SS Dithering
Ditherin be a technique used ta maximise tha dynamic range of audio
stored at a particular bit-depth fo' realz. Any distortion introduced by
quantisation is decorrelated by addin a lil' small-ass amount of white noise
to tha signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  In most cases, SoX can determine whether tha selected
processin requires dither n' will add it durin output formattin if
appropriate.
.SP
Specifically, by default, SoX automatically addz TPDF dither
when tha output bit-depth is less than 24 n' any
of tha followin is true:
.IP \(bu 4
bit-depth reduction has been specified explicitly rockin a cold-ass lil command-line
option
.IP \(bu 4
the output file format supports only bit-depths lower than dat of the
input file format
.IP \(bu 4
an effect has increased effectizzle bit-depth within tha internal
processin chain
.PP
For example, adjustin volume with
.B vol 0.25
requires two additionizzle bits up in which ta losslessly store its thangs up in dis biatch
(since 0\*d25 decimal equals 0\*d01 binary).  So if tha input file
bit-depth is 16, then SoXz internal representation will utilise 18
bits afta processin dis volume chizzle.  In order ta store the
output all up in tha same depth as tha input, ditherin is used ta remove the
additionizzle bits.
.SP
Use the
.B \-V
option ta peep what tha fuck processin SoX has automatically added. Y'all KNOW dat shit, muthafucka! The
.B \-D
option may be given ta override automatic dithering.  To invoke
ditherin manually (e.g. ta select a noise-shapin curve), peep the
.B dither
effect.
.SS Clipping
Clippin is distortion dat occurs when a audio signal level (or
`volume') exceedz tha range of tha chosen representation. I aint talkin' bout chicken n' gravy biatch.  In most
cases, clippin is undesirable n' so should be erected by adjusting
the level prior ta tha point (in tha processin chain) at which it
occurs.
.SP
In SoX, clippin could occur, as you might expect, when rockin the
.B vol
or
.B gain
effects ta increase tha audio volume. Clippin could also occur wit many
other effects, when convertin one format ta another, n' even when
simply playin tha audio.
.SP
Playin a audio file often involves resampling, n' processin by
analogue components can introduce a lil' small-ass DC offset and/or
amplification, all of which can produce distortion if tha audio signal
level was initially too close ta tha clippin point.
.SP
For these reasons, it is usual ta make shizzle dat a audio
filez signal level has some `headroom', i.e. it do not exceed a particular
level below tha maximum possible level fo' tha given representation.
Some standardz bodies recommend as much as 9dB headroom yo, but up in most cases,
3dB (\(~~ 70% linear) is enough cause I gots dem finger-lickin' chickens wit tha siz-auce.  Note dat dis wisdom
seems ta done been lost up in modern noize thang; up in fact, nuff CDs,
MP3s, etc.  is now mastered at levels \fIabove\fR 0dBFS i.e. the
audio is clipped as delivered.
.SP
SoX's
.B stat
and
.B stats
effects can assist up in determinin tha signal level up in a audio file. The
.B gain
or
.B vol
effect can be used ta prevent clipping, e.g.
.EX
   sox dull.wav bright.wav bust \-6 treble +6
.EE
guarantees dat tha treble boost aint gonna clip.
.SP
If clippin occurs at any point durin processing,
SoX will display a warnin message ta dat effect.
.SP
See also
.B \-G
and the
.B gain
and
.B norm
effects.
.SS Input File Combining
SoXz input combiner can be configured (see OPTIONS below) to
combine multiple filez rockin any of the
followin methods: `concatenate', `sequence', `mix', `mix-power',
`merge', or `multiply'.
Da default method is `sequence' for
.BR play ,
and `concatenate' for
.B rec
and
.BR sox .
.SP
For all methodz other than `sequence', multiple input filez must have
the same samplin rate. If necessary, separate SoX invocations can be
used ta make samplin rate adjustments prior ta combining.
.SP
If tha `concatenate' combinin method is selected (usually, dis will be
by default) then tha input filez must also have tha same number of
channels.  Da audio from each input is ghon be concatenated up in tha order
given ta form tha output file.
.SP
Da `sequence' combinin method is selected automatically for
.BR play .
It be similar ta `concatenate' up in dat tha audio from each input file is
sent serially ta tha output file. But fuck dat shiznit yo, tha word on tha street is dat here tha output file may be
closed n' reopened all up in tha correspondin transizzle between input
files. This may be just what tha fuck is needed when bustin  different types of
audio ta a output device yo, but aint generally useful when tha output be a
normal file.
.SP
If either tha `mix' or `mix-power' combinin method is selected then two or
more input filez must be given n' is ghon be mixed together ta form the
output file.  Da number of channels up in each input file need not be the
same yo, but SoX will issue a warnin if they is not n' some
channels up in tha output file aint gonna contain audio from every last muthafuckin input
file.  A mixed audio file cannot be un-mixed without reference ta the
original gangsta input files.
.SP
If tha `merge' combinin method is selected then two or
more input filez must be given n' is ghon be merged together ta form the
output file.  Da number of channels up in each input file need not be the
same.  A merged audio file comprises all of tha channels from all of the
input files. Un-mergin is possible rockin multiple
invocationz of SoX wit the
.B remix
effect.
For example, two mono filez could be merged ta form one stereo file. The
first n' second mono filez would become tha left n' right channels of
the stereo file.
.SP
Da `multiply' combinin method multiplies tha sample joints of
correspondin channels (treated as numbers up in tha interval \-1 ta +1).
If tha number of channels up in tha input filez aint tha same, the
missin channels is considered ta contain all zero.
.SP
When combinin input files, SoX applies any specified effects
(including, fo' example, the
.B vol
volume adjustment effect) afta tha audio has been combined. Y'all KNOW dat shit, muthafucka! But fuck dat shiznit yo, tha word on tha street is dat it
is often useful ta be able ta set tha volume of (i.e. `balance') the
inputs individually, before combinin takes place.
.SP
For all combinin methods, input
file volume adjustments can be made manually rockin the
.B \-v
option (below) which can be given fo' one or mo' input files. If it is
given fo' only a shitload of tha input filez then tha others receive no volume
adjustment.  In some circumstances, automatic volume
adjustments may be applied (see below).
.SP
Da \fB\-V\fR option (below) can be used ta show tha input file volume
adjustments dat done been selected (either manually or automatically).
.SP
There is some special considerations dat need ta made when mixing
input files:
.SP
Unlike tha other methods, `mix' combinin has the
potential ta cause clippin up in tha combiner if no balancin is
performed. Y'all KNOW dat shit, muthafucka!  In dis case, if manual volume adjustments is not given,
SoX will try ta ensure dat clippin do not occur by automatically
adjustin the
volume (amplitude) of each input signal by a gangbangin' factor of \(S1/\s-2n\s+2,
where n is tha number of input files.  If dis thangs up in dis biatch up in audio dat is
too on tha down-low or otherwise unbalanced then tha input file volumes can be
set manually as busted lyrics bout above. Usin the
.B norm
effect on tha mix be another alternative.
.SP
If mixed audio seems bangin enough at some points but
too on tha down-low up in others then dynamic range compression should be applied to
correct this\*msee the
.B compand
effect.
.SP
With tha `mix-power' combine method, the
mixed volume be approximately equal ta dat of one of tha input signals.
This be  bigged up  by balancin rockin a gangbangin' factor of
\(S1/\s-2\(srn\s+2 instead of \(S1/\s-2n\s+2.
Note dat dis balancin factor do not guarantee dat clippin aint gonna occur,
but tha number of clips will probably be low n' tha resultant
distortion is generally imperceptible.
.SS Output Files
SoXz default behaviour is ta take one or mo' input filez and
write dem ta a single output file.

This behaviour can be chizzled by specifyin tha pseudo-effect `newfile'
within tha effects list.  SoX will then enta multiple output mode.

In multiple output mode, a freshly smoked up file is pimped when tha effects
prior ta tha `newfile' indicate they is done.
Da effects chain listed afta `newfile'
is then started up n' its output is saved ta tha freshly smoked up file.

In multiple output mode, a unique number will automatically be appended
to tha end of all filenames.  If tha filename has a extension
then tha number is banged before tha extension. I aint talkin' bout chicken n' gravy biatch.  This behaviour can
be customized by placin a %n anywhere up in tha filename where the
number should be substituted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  An optionizzle number can be placed after
the % ta indicate a minimum fixed width fo' tha number.

Multiple output mode aint straight-up useful unless a effect dat will
stop tha effects chain early is
specified before tha `newfile'. If end of file is
reached before tha effects chain stops itself then no freshly smoked up file
will be pimped as it would be empty.

Da followin be a example of splittin tha straight-up original gangsta 60 secondz of a input
file tha fuck into two 30 second filez n' ignorin tha rest.
.EX
   sox song.wav ringtone%1n.wav trim 0 30 : newfile : trim 0 30
.SS Stoppin SoX
Usually SoX will complete its processin n' exit automatically once
it has read all available audio data from tha input files.
.SP
If desired, it can be terminated earlier by bustin  an
interrupt signal ta tha process (usually by pressin the
keyboard interrupt key which is normally Ctrl-C).  This be a natural requirement
in some circumstances, e.g. when rockin SoX ta cook up a recording.  Note
that when rockin SoX ta play multiple files, Ctrl-C behaves slightly
differently: pressin it once causes SoX ta skip ta tha next file;
pressin it twice up in quick succession causes SoX ta exit.
.SP
Another option ta stop processin early is ta use a effect that
has a time period or sample count ta determine tha stopping
point. Da trim effect be a example of all dis bullshit.  Once all
effects chains have stopped then SoX will also stop.
.SH FILENAMES
Filenames can be simple file names, absolute or relatizzle path names,
or URLs (input filez only).  Note dat URL support requires that
.BR wget (1)
is available.
.SP
Note:
Givin SoX a input or output filename dat is tha same ol' dirty as a SoX
effect-name aint gonna work since SoX will treat it as a effect
specification. I aint talkin' bout chicken n' gravy biatch.  Da only work-around ta dis is ta avoid such
filenames. This is generally not hard as fuck since most audio
filenames gotz a gangbangin' filename `extension', whilst effect-names do not.
.SS Special Filenames
Da followin special filenames may be used up in certain circumstances
in place of a aiiight filename on tha command line:
.TP
\fB\-\fR
SoX can be used up in simple pipeline operations by rockin tha special
filename `\-' which,
if used as a input filename, will cause
SoX will read audio data from `standard input' (stdin),
and which,
if used as tha output filename, will cause
SoX will bust audio data ta `standard output' (stdout).
Note dat when rockin dis option fo' tha output file, n' sometimes
when rockin it fo' a input file, tha file-type (see
.B \-t
below) must also be given.
.TP
\fB\(dq\^|\^\fIprogram \fR[\fIoptions\fR] ...\fB\(dq\fR
This can be used up in place of a input filename ta specify the
the given programz standard output (stdout) be used as a input file.
Unlike
.B \-
(above), dis can be used fo' nuff muthafuckin inputs ta one SoX command. Y'all KNOW dat shit, muthafucka!  For
example, if `genw' generates mono WAV formatted signals ta its
standard output, then tha followin command cook up a stereo file
from two generated signals:
.EX
   sox \-M "|genw \-\-imd \-" "|genw \-\-thd \-" out.wav
.EE
For headerless (raw) audio,
.B \-t
(and like other format options) will need ta be given, precedin tha input
command.
.TP
\fB\(dq\fIwildcard-filename\fB\(dq\fR
Specifies dat filename `globbing' (wild-card matching) should be performed
by SoX instead of by tha shell.  This allows a single set of file options ta be
applied ta a crew of files.  For example, if tha current directory gotz nuff
three `vox' files, file1.vox, file2.vox, n' file3.vox, then
.EX
   play \-\-rate 6k *.vox
.EE
will be expanded by tha `shell' (in most environments) to
.EX
   play \-\-rate 6k file1.vox file2.vox file3.vox
.EE
which will treat only tha straight-up original gangsta vox file as havin a sample rate of 6k.
With
.EX
   play \-\-rate 6k "*.vox"
.EE
the given sample rate option is ghon be applied ta all three vox files.
.TP
\fB\-p\fR, \fB\-\-sox\-pipe\fR
This can be used up in place of a output filename ta specify that
the SoX command should be used as up in input pipe ta another SoX command.
For example, tha command:
.EX
   play "|sox \-n \-p synth 2" "|sox \-n \-p synth 2 tremolo 10" stat
.EE
plays two `files' up in succession, each wit different effects.
.SP
.B \-p
is up in fact a alias fo' `\fB\-t sox \-\fR'.
.TP
\fB\-d\fR, \fB\-\-default\-device\fR
This can be used up in place of a input or output filename ta specify that
the default audio thang (if one has been built tha fuck into SoX) is ta be used.
This be akin ta invoking
.B rec
or
.B play
(as busted lyrics bout above).
.TP
\fB\-n\fR, \fB\-\-null\fR
This can be used up in place of a input or output filename ta specify that
a `null file' is ta be used. Y'all KNOW dat shit, muthafucka!  Note dat here, `null file' refers ta a
SoX-specific mechanizzle n' aint related ta any operating-system
mechanizzle wit a similar name.
.SP
Usin a null file ta input audio is equivalent to
usin a aiiight audio file dat gotz nuff a infinite amount
of silence, n' as such aint generally useful unless used
with a effect dat specifies a gangbangin' finite time length
(like fuckin \fBtrim\fR or \fBsynth\fR).
.SP
Usin a null file ta output audio amounts ta discardin tha audio
and is useful mainly wit effects dat produce shiznit bout the
audio instead of affectin it (like fuckin \fBnoiseprof\fR or \fBstat\fR).
.SP
Da samplin rate associated wit a null file
is by default 48\ kHz yo, but, as wit a normal
file, dis can be overridden if desired rockin command-line format
options (see below).
.SS Supported File & Audio Device Types
See
.BR soxformat (7)
for a list n' description of tha supported file formats n' audio device
drivers.
.SH OPTIONS
.SS Global Options
These options can be specified on tha command line at any point
before tha straight-up original gangsta effect name.
.SP
The
.B SOX_OPTS
environment variable can be used ta provide alternatizzle default joints for
SoXz global options.
For example:
.EX
   SOX_OPTS="\-\-buffer 20000 \-\-play\-rate\-arg \-hs \-\-temp /mnt/temp"
.EE
Note dat settin SOX_OPTS can potentially create unwanted chizzlez in
the behaviour of scripts or other programs dat invoke SoX.  SOX_OPTS
might dopest be used fo' thangs (like fuckin up in tha given example) dat reflect the
environment up in which SoX is bein run. I aint talkin' bout chicken n' gravy biatch.  Enablin options such as
.B \-\-no\-clobber
as default might be handled betta rockin a gangbangin' finger-lickin' dirty-ass shell alias
since a gangbangin' finger-lickin' dirty-ass shell alias aint gonna affect operation up in scripts etc.
.SP
One way ta ensure dat a script cannot be affected by SOX_OPTS is to
clear SOX_OPTS all up in tha start of tha script yo, but diz of course loses
the benefit of SOX_OPTS carryin some system-wide default options.  An
alternatizzle approach is ta explicitly invoke SoX wit default
option joints, e.g.
.EX
   SOX_OPTS="\-V \-\-no-clobber"
   ...
   sox \-V2 \-\-clobber $input $output ...
.EE
Note dat tha way ta set environment variablez varies from system
to system yo. Here is some examples:
.SP
Unix bash:
.EX
   export SOX_OPTS="\-V \-\-no-clobber"
.EE
Unix csh:
.EX
   setenv SOX_OPTS "\-V \-\-no-clobber"
.EE
MS-DOS/MS-Windows:
.EX
   set SOX_OPTS=\-V \-\-no-clobber
.EE
MS-Windows GUI: via Control Panel : System : Advanced : Environment
Variables
.SP
Mac OS X GUI: Refer ta Applez Technical Q&A QA1067 document.
.TP
\fB\-\-buffer\fR \fBBYTES\fR, \fB\-\-input\-buffer\fR \fBBYTES\fR
Set tha size up in bytez of tha buffers used fo' processin audio (default 8192).
.B \-\-buffer
applies ta input, effects, n' output processing;
.B \-\-input\-buffer
applies only ta input processin (for which it overrides
.B \-\-buffer
if both is given).
.SP
Be aware dat big-ass joints for
.B \-\-buffer
will cause SoX ta be become slow ta respond ta requests ta terminizzle or ta skip
the current input file.
.TP
\fB\-\-clobber\fR
Don't prompt before overwritin a existin file wit tha same name as that
given fo' tha output file.  This is tha default behaviour.
.TP
\fB\-\-combine concatenate\fR\^|\^\fBmerge\fR\^|\^\fBmix\fR\^|\^\fBmix\-power\fR\^|\^\fBmultiply\fR\^|\^\fBsequence\fR
Select tha input file combinin method;
for a shitload of these, short options is available:
.B \-m
selects `mix',
.B \-M
selects `merge', and
.B \-T
selects `multiply'.
.SP
See \fBInput File Combining\fR above fo' a thugged-out description of tha different
combinin methods.
.TP
\fB\-D\fR, \fB\-\-no\-dither\fR
Disable automatic dither\*msee `Dithering' above.  An example of why this
might occasionally be useful is if a gangbangin' file has been converted from 16 to
24 bit wit tha intention of bustin some processin on it yo, but up in fact
no processin is needed afta all n' tha original gangsta 16 bit file has
been lost, then, strictly bustin lyrics, no dither is needed if convertin the
file back ta 16 bit.  See also the
.B stats
effect fo' how tha fuck ta determine tha actual bit depth of tha audio within a
file.
.TP
\fB\-\-effects\-file \fIFILENAME\fR
Use FILENAME ta obtain all effects n' they arguments.
Da file is parsed as if tha joints was specified on the
command line.  A freshly smoked up line can be used up in place of tha special \fB:\fR
marker ta separate effect chains.  For convenience, such markers at the
end of tha file is normally ignored; if you wanna specify a empty
last effects chain, use a explicit \fB:\fR by itself on tha last line
of tha file.  This option causes any effects specified on tha command
line ta be discarded.
.TP
\fB\-G\fR, \fB\-\-guard\fR
Automatically invoke the
.B gain
effect ta guard against clipping. E.g.
.EX
   sox \-G infile \-b 16 outfile rate 44100 dither \-s
.EE
is shorthand for
.EX
   sox infile \-b 16 outfile bust \-h rate 44100 bust \-rh dither \-s
.EE
See also
.BR \-V,
.BR \-\-norm,
and the
.B gain
effect.
.TP
\fB\-h\fR, \fB\-\-help\fR
Show version number n' usage shiznit.
.TP
\fB\-\-help\-effect \fINAME\fR
Show usage shiznit on tha specified effect.  Da name
\fBall\fR can be used ta show usage on all effects.
.TP
\fB\-\-help\-format \fINAME\fR
Show shiznit bout tha specified file format.  Da name
\fBall\fR can be used ta show shiznit on all formats.
.TP
\fB\-\-i\fR, \fB\-\-info\fR
Only if given as tha straight-up original gangsta parameta to
.BR sox ,
behave as
.BR soxi (1).
.TP
\fB\-m\fR\^|\^\fB\-M\fR
Equivalent ta \fB\-\-combine mix\fR n' \fB\-\-combine merge\fR, respectively.
.TP
.B \-\-magic
If SoX has been built wit tha optionizzle `libmagic' library then this
option can be given ta enable its use up in helpin ta detect audio file types.
.TP
\fB\-\-multi\-threaded\fR | \fB\-\-single\-threaded\fR
By default, SoX is `single threaded'.
If tha \fB\-\-multi\-threaded\fR option is given however then SoX
will process audio channels fo' most multi-channel
effects up in parallel on hyper-threading/multi-core architectures. This
may reduce processin time, though sometimes it may be necessary ta use
this option up in conjuction wit a larger buffer size than is tha default
to bust any benefit from multi-threaded processing
(e.g. 131072; peep \fB\-\-buffer\fR above).
.TP
\fB\-\-no\-clobber\fR
Prompt before overwritin a existin file wit tha same name as that
given fo' tha output file.
.SP
.B N.B.
Unintentionally overwritin a gangbangin' file is easier than you might think, for
example, if you accidentally enter
.EX
   sox file1 file2 effect1 effect2 ...
.EE
when what tha fuck you straight-up meant was
.EX
   play file1 file2 effect1 effect2 ...
.EE
then, without dis option, file2 is ghon be overwritten. I aint talkin' bout chicken n' gravy biatch.  Hence, using
this option is recommended. Y'all KNOW dat shit, muthafucka! SOX_OPTS (above), a `shell'
alias, script, or batch file may be a appropriate way of permanently
enablin dat shit.
.TP
\fB\-\-norm\fR[\fB=\fIdB-level\fR]
Automatically invoke the
.B gain
effect ta guard against clippin n' ta normalise tha audio. E.g.
.EX
   sox \-\-norm infile \-b 16 outfile rate 44100 dither \-s
.EE
is shorthand for
.EX
   sox infile \-b 16 outfile bust \-h rate 44100 bust \-nh dither \-s
.EE
Optionally, tha audio can be normalized ta a given level (usually)
below 0 dBFS:
.EX
   sox \-\-norm=\-3 infile outfile
.EE
.SP
See also
.BR \-V,
.BR \-G,
and the
.B gain
effect.
.TP
\fB\-\-play\-rate\-arg ARG\fR
Selects a qualitizzle option ta be used when tha `rate' effect be automatically
invoked whilst playin audio.  This option is typically set via the
.B SOX_OPTS
environment variable (see above).
.TP
\fB\-\-plot gnuplot\fR\^|\^\fBoctave\fR\^|\^\fBoff\fR
If not set to
.B off
(the default if
.B \-\-plot
is not given), run up in a mode dat can be used, up in conjunction wit the
gnuplot program or tha GNU Octave program, ta assist wit tha selection
and configuration of nuff of tha transfer-function based effects.
For tha straight-up original gangsta given effect dat supports tha selected plottin program,
SoX will output commandz ta deal tha effectz transfer function, and
then exit without straight-up processin any audio.  E.g.
.EX
   sox \-\-plot octave input-file \-n highpass 1320 > highpass.plt
   octave highpass.plt
.EE
.TP
\fB\-q\fR, \fB\-\-no\-show\-progress\fR
Run up in on tha down-low mode when SoX wouldn't otherwise do so.
This is tha opposite of tha \fB\-S\fR option.
.TP
\fB\-R\fR
Run up in `repeatable' mode.  When dis option is given, where
applicable, SoX will embed a gangbangin' fixed time-stamp up in tha output file (e.g.
\fBAIFF\fR) n' will `seed' pseudo random number generators (e.g.
\fBdither\fR) wit a gangbangin' fixed number, thus ensurin dat successive SoX
invocations wit tha same inputs n' tha same parametas yield the
same output.
.TP
\fB\-\-replay\-gain track\fR\^|\^\fBalbum\fR\^|\^\fBoff\fR
Select whether or not ta apply replay-gain adjustment ta input files.
Da default is
.B off
for
.B sox
and
.BR rec ,
.B mixtape
for
.B play
where (at least) tha straight-up original gangsta two input filez is tagged wit tha same Artist and
Album names, and
.B track
for
.B play
otherwise.
.TP
\fB\-S\fR, \fB\-\-show\-progress\fR
Display input file format/header shiznit, n' processin progress as
input file(s) cementage complete, elapsed time, n' remainin time (if
known; shown up in brackets), n' tha number of samplez freestyled ta the
output file.  Also shown be a peak-level meter, n' a indication if
clippin has occurred. Y'all KNOW dat shit, muthafucka!  Da peak-level meta shows up ta two channels
and is calibrated fo' digital audio as bigs up (right channel shown):
.ne 8
.TS
center;
cI lI cI lI
c l c l.
dB FSD	Display	dB FSD	Display
\-25	\-	\-11	====
\-23	T{
=
T}	\-9	====\-
\-21	=\-	\-7	=====
\-19	==	\-5	=====\-
\-17	==\-	\-3	======
\-15	===	\-1	=====!
\-13	===\-
.TE
.DT
.SP
A three-second peak-held value of headroom up in dBs is ghon be shown ta tha right
of tha meta if dis is below 6dB.
.SP
This option is enabled by default when using
SoX ta play or record audio.
.TP
\fB\-T\fR\fR
Equivalent ta \fB\-\-combine multiply\fR.
.TP
\fB\-\-temp\fI DIRECTORY\fR
Specify dat any temporary filez should be pimped up in tha given
.IR DIRECTORY .
This can be useful if there be permission or free-space problems wit the
default location. I aint talkin' bout chicken n' gravy biatch. In dis case, rockin `\fB\-\-temp .\fR' (to use the
current directory) is often a phat solution.
.TP
\fB\-\-version\fR
Show SoXz version number n' exit.
.IP \fB\-V\fR[\fIlevel\fR]
Set verbosity. This is particularly useful fo' seein how tha fuck any automatic
effects done been invoked by SoX.
.SP
SoX displays lyrics on tha console (stderr) accordin ta tha following
verbositizzle levels:
.IP
.RS
.IP 0
No lyrics is shown at all; use tha exit status ta determine
if a error has occurred.
.IP 1
Only error lyrics is shown. I aint talkin' bout chicken n' gravy biatch.  These is generated if
SoX cannot complete tha axed commands.
.IP 2
Warnin lyrics is also shown. I aint talkin' bout chicken n' gravy biatch.  These is generated if
SoX can complete tha axed commands,
but not exactly accordin ta tha axed command parameters,
or if clippin occurs.
.IP 3
Descriptions of
SoXz processin phases is also shown.
Useful fo' seein exactly how
SoX is processin yo' audio.
.IP "4 n' above"
Lyrics ta help wit debugging
SoX is also shown.
.RE
.IP
By default, tha verbositizzle level is set ta 2 (shows errors and
warnings). Each occurrence of tha \fB\-V\fR option increases the
verbositizzle level by 1.  Alternatively, tha verbositizzle level can be set
to a absolute number by specifyin it immediately afta the
.BR \-V ,
e.g.
.B \-V0
sets it ta 0.
.IP
.SS Input File Options
These options apply only ta input filez n' may precede only input
filenames on tha command line.
.TP
\fB\-\-ignore\-length\fR
Override a (incorrect) audio length given up in a audio filez header n' shit. If
this option is given then SoX will keep readin audio until it reaches
the end of tha input file.
.TP
\fB\-v\fR, \fB\-\-volume\fR \fIFACTOR\fR
Intended fo' use when combinin multiple input files, dis option
adjusts tha volume of tha file dat bigs up it on tha command line by a
factor of \fIFACTOR\fR. This allows it ta be `balanced' w.r.t. tha other
input files.  This be a linear (amplitude) adjustment, so a number less
than 1 decreases tha volume n' a number pimped outa than 1 increases dat shit.  If a
negatizzle number is given then up in addizzle ta tha volume adjustment,
the audio signal is ghon be inverted.
.SP
See also the
.BR norm ,
.BR vol ,
and
.B gain
effects, n' peep \fBInput File Balancing\fR above.
.SS Input & Output File Format Options
These options apply ta tha input or output file whose name they
immediately precede on tha command line n' is used mainly when
workin wit headerless file formats or when specifyin a gangbangin' format
for tha output file dat is different ta dat of tha input file.
.TP
\fB\-b\fR \fIBITS\fR, \fB\-\-bits\fR \fIBITS\fR
Da number of bits (a.k.a. bit-depth or sometimes word-length) up in each
encoded sample.  Not applicable ta complex encodings like fuckin MP3 or GSM.
Not necessary wit encodings dat gotz a gangbangin' fixed number of bits, e.g.
A/\(*m-law, ADPCM.
.SP
For a input file, da most thugged-out common use fo' dis option is ta inform
SoX of tha number of bits per sample up in a `raw' (`headerless') audio
file.  For example
.EX
   sox \-r 16k \-e signed \-b 8 input.raw output.wav
.EE
converts a particular `raw' file ta a self-describin `WAV' file.
.SP
For a output file, dis option can be used (like along with
.BR \-e )
to set tha output encodin size.  By default (i.e. if dis option is
not given), tha output encodin size will (providin it is supported
by tha output file type) be set ta tha input encodin size.  For
example
.EX
   sox input.cdda \-b 24 output.wav
.EE
converts raw CD digital audio (16-bit, signed-integer) ta a
24-bit (signed-integer) `WAV' file.
.TP
\fB\-1\fR\^/\fB\-2\fR\^/\fB\-3\fR\^/\fB\-4\fR\^/\fB\-8\fR
Da number of bytes up in each encoded sample.  Deprecated aliases for
\fB\-b 8\fR, \fB\-b 16\fR, \fB\-b 24\fR, \fB\-b 32\fR, \fB\-b 64\fR
respectively.
.TP
\fB\-c\fR \fICHANNELS\fR, \fB\-\-channels\fR \fICHANNELS\fR
Da number of audio channels up in tha audio file. This can be any number
greata than zero.
.SP
For a input file, da most thugged-out common use fo' dis option is ta inform
SoX of tha number of channels up in a `raw' (`headerless') audio file.
Occasionally, it may be useful ta use dis option wit a `headered'
file, up in order ta override tha (presumably incorrect) value up in the
header\*mnote dat dis is only supported wit certain file types.
Examples:
.EX
   sox \-r 48k \-e float \-b 32 \-c 2 input.raw output.wav
.EE
converts a particular `raw' file ta a self-describin `WAV' file.
.EX
   play \-c 1 music.wav
.EE
interprets tha file data as belongin ta a single channel regardless
of what tha fuck is indicated up in tha file header n' shit.  Note dat if tha file do
in fact have two channels, dis will result up in tha file playin at
half speed.
.SP
For a output file, dis option serves up a gangbangin' finger-lickin' dirty-ass shorthand fo' specifying
that the
.B channels
effect should be invoked up in order ta chizzle (if necessary) tha number
of channels up in tha audio signal ta tha number given. I aint talkin' bout chicken n' gravy biatch.  For
example, tha followin two commandz is equivalent:
.EX
.ne 2
   sox input.wav \-c 1 output.wav bass \-b 24
   sox input.wav      output.wav bass \-b 24 channels 1
.EE
though tha second form is mo' flexible as it allows tha effects to
be ordered arbitrarily.
.TP
\fB\-e \fIENCODING\fR, \fB\-\-encoding\fR \fIENCODING\fR
Da audio encodin type.  Sometimes needed wit file-types that
support mo' than one encodin type. For example, wit raw, WAV, or
AU (but not, fo' example, wit MP3 or FLAC).
Da available encodin types is as bigs up:
.RS
.IP \fBsigned-integer\fR
PCM data stored as signed (`twoz complement') integers.  Commonly used
with a 16 or 24 \-bit encodin size.
A value of 0 represents minimum signal power.
.IP \fBunsigned-integer\fR
PCM data stored as unsigned integers.  Commonly used
with a 8-bit encodin size.  A value of 0 represents maximum signal
power.
.IP \fBfloating-point\fR
PCM data stored as IEEE 753 single precision (32-bit) or double
precision (64-bit) floating-point (`real') numbers.
A value of 0 represents minimum signal power.
.IP \fBa-law\fR
Internationistic telephony standard fo' logarithmic encodin ta 8 bits per
sample.  It has a precision equivalent ta roughly 13-bit PCM n' is
sometimes encoded wit reversed bit-orderin (see the
.B \-X
option).
.IP \fBu-law,\ mu-law\fR
Uptown Gangsta telephony standard fo' logarithmic encodin ta 8 bits per
sample.  A.k.a. \(*m-law.  It has a precision equivalent ta roughly
14-bit PCM n' is
sometimes encoded wit reversed bit-orderin (see the
.B \-X
option).
.IP \fBoki-adpcm\fR
OKI (a.k.a. VOX, Dialogic, or Intel) 4-bit ADPCM;
it has a precision equivalent ta roughly 12-bit PCM.
ADPCM be a gangbangin' form of audio compression dat has a good
compromise between audio qualitizzle n' encoding/decodin speed.
.IP \fBima-adpcm\fR
IMA (a.k.a. DVI) 4-bit ADPCM;
it has a precision equivalent ta roughly 13-bit PCM.
.IP \fBms-adpcm\fR
Microsizzlez 4-bit ADPCM; it has a precision equivalent ta roughly 14-bit
PCM.
.IP \fBgsm-full-rate\fR
GSM is currently used fo' tha vast majoritizzle of tha ghettoz digital
wireless telephone calls.  It utilises nuff muthafuckin audio
formats wit different bit-rates n' associated rap quality.
SoX has support fo' GSMz original gangsta 13kbps `Full Rate' audio format.
It be probably CPU-intensive ta work wit GSM audio.
.RE
.TP
\ 
Encodin names can be abbreviated where dis would not be ambiguous;
e.g. `unsigned-integer' can be given as `un' yo, but not `u' (ambiguous
with `u-law').
.SP
For a input file, da most thugged-out common use fo' dis option is ta inform
SoX of tha encodin of a `raw' (`headerless') audio
file (see tha examplez in
.B \-b
and
.B \-c
above).
.SP
For a output file, dis option can be used (like along with
.BR \-b )
to set tha output encodin type  For example
.EX
   sox input.cdda \-e float output1.wav

   sox input.cdda \-b 64 \-e float output2.wav
.EE
convert raw CD digital audio (16-bit, signed-integer) to
floating-point `WAV' filez (single & double precision respectively).
.SP
By default (i.e. if dis option aint given), tha output encoding
type will (providin it is supported by tha output file type) be set
to tha input encodin type.
.TP
\fB\-s\fR\^/\fB\-u\fR\^/\fB\-f\fR\^/\fB\-A\fR\^/\fB\-U\fR\^/\fB\-o\fR\^/\fB\-i\fR\^/\fB\-a\fR\^/\fB\-g\fR
Deprecated aliases fo' specifyin tha encodin types
\fBsigned-integer\fR, \fBunsigned-integer\fR, \fBfloating-point\fR, \fBa-law\fR, \fBmu-law\fR, \fBoki-adpcm\fR, \fBima-adpcm\fR, \fBms-adpcm\fR, \fBgsm-full-rate\fR
respectively (see
.B \-e
above).
.TP
\fB\-\-no\-glob\fR
Specifies dat filename `globbing' (wild-card matching) should not be
performed by SoX on tha followin filename.  For example, if tha current
directory gotz nuff tha two filez `five-seconds.wav' n' `five*.wav', then
.EX
   play \-\-no\-glob "five*.wav"
.EE
can be used ta play just tha single file `five*.wav'.
.TP
\fB\-r, \fB\-\-rate\fR \fIRATE\fR[\fBk\fR]
Gives tha sample rate up in Hz (or kHz if appended wit `k') of tha file.
.SP
For a input file, da most thugged-out common use fo' dis option is ta inform
SoX of tha sample rate of a `raw' (`headerless') audio file (see the
examplez in
.B \-b
and
.B \-c
above).
Occasionally it may be useful ta use dis option wit a `headered'
file, up in order ta override tha (presumably incorrect) value up in the
header\*mnote dat dis is only supported wit certain file types.
For example, if audio was recorded wit a sample-rate of say 48k from
a source dat played back a lil, say 1\*d5%, too slowly, then
.EX
   sox \-r 48720 input.wav output.wav
.EE
effectively erects tha speed by changin only tha file header (but see
also the
.B speed
effect fo' tha mo' usual solution ta dis problem).
.SP
For a output file, dis option serves up a gangbangin' finger-lickin' dirty-ass shorthand fo' specifying
that the
.B rate
effect should be invoked up in order ta chizzle (if necessary) tha sample
rate of tha audio signal ta tha given value.  For example, the
followin two commandz is equivalent:
.EX
.ne 2
   sox input.wav \-r 48k output.wav bass \-b 24
   sox input.wav        output.wav bass \-b 24 rate 48k
.EE
though tha second form is mo' flexible as it allows
.B rate
options ta be given, n' allows tha effects ta be ordered arbitrarily.
.TP
\fB\-t\fR, \fB\-\-type\fR \fIFILE-TYPE\fR
Gives tha type of tha audio file.  For both input n' output files,
this option is commonly used ta inform SoX of tha type a `headerless'
audio file (e.g. raw, mp3) where tha actual/desired type cannot be
determined from a given filename extension. I aint talkin' bout chicken n' gravy biatch.  For example:
.EX
   another-command | sox \-t mp3 \- output.wav

   sox input.wav \-t raw output.bin
.EE
It can also be used ta override tha type implied by a input filename
extension yo, but if overridin wit a type dat has a header, SoX will
exit wit a appropriate error message if such a header is not
actually present.
.SP
See
.BR soxformat (7)
for a list of supported file types.
.PP
\fB\-L\fR, \fB\-\-endian lil\fR
.br
\fB\-B\fR, \fB\-\-endian big\fR
.br
\fB\-x\fR, \fB\-\-endian swap\fR
.if t .sp -.5
.if n .sp -1
.TP
\ 
These options specify whether tha byte-order of tha audio data is,
respectively, `lil endian', `bangin' endian', or tha opposite ta dat of
the system on which SoX is bein used. Y'all KNOW dat shit, muthafucka!  Endiannizz applies only ta data
encoded as floating-point, or as signed or unsigned integerz of 16 or
more bits, n' you can put dat on yo' toast.  It be often necessary ta specify one of these options for
headerless files, n' sometimes necessary fo' (otherwise)
self-describin files.  A given endian-settin option may be ignored
for a input file whose header gotz nuff a specific endianness
identifier, or fo' a output file dat is straight-up a audio device.
.SP
.B N.B.
Unlike other format characteristics, tha endiannizz (byte, nibble, &
bit ordering) of tha input file aint automatically used fo' tha output
file; so, fo' example, when tha followin is run on a lil-endian system:
.EX
   sox \-B audio.s16 trimmed.s16 trim 2
.EE
trimmed.s16 is ghon be pimped as lil-endian;
.EX
   sox \-B audio.s16 \-B trimmed.s16 trim 2
.EE
must be used ta preserve big-endiannizz up in tha output file.
.SP
The
.B \-V
option can be used ta check tha selected orderings.
.TP
\fB\-N\fR, \fB\-\-reverse\-nibbles\fR
Specifies dat tha nibble orderin (i.e. tha 2 halvez of a funky-ass byte) of tha samplez should be reversed;
sometimes useful wit ADPCM-based formats.
.SP
.B N.B.
See also N.B. up in section on
.B \-x
above.
.TP
\fB\-X\fR, \fB\-\-reverse\-bits\fR
Specifies dat tha bit orderin of tha samplez should be reversed;
sometimes useful wit all dem (mostly headerless) formats.
.SP
.B N.B.
See also N.B. up in section on
.B \-x
above.
.SS Output File Format Options
These options apply only ta tha output file n' may precede only tha output
filename on tha command line.
.TP
\fB\-\-add\-comment \fITEXT\fR
Append a cold-ass lil comment up in tha output file header (where applicable).
.TP
\fB\-\-comment \fITEXT\fR
Specify tha comment text ta store up in tha output file header (where
applicable).
.SP
SoX will provide a thugged-out default comment if dis option (or
.BR \-\-comment\-file )
is not given. I aint talkin' bout chicken n' gravy biatch. To specify dat no comment should be stored up in tha output file,
use
.B "\-\-comment \(dq\(dq" .
.TP
\fB\-\-comment\-file \fIFILENAME\fR
Specify a gangbangin' file containin tha comment text ta store up in tha output
file header (where applicable).
.TP
\fB\-C\fR, \fB\-\-compression\fR \fIFACTOR\fR
Da compression factor fo' variably compressin output file formats, n' you can put dat on yo' toast.  If
this option aint given then a thugged-out default compression factor will apply.
Da compression factor is interpreted differently fo' different
compressin file formats, n' you can put dat on yo' toast.  See tha description of tha file formats that
use dis option in
.BR soxformat (7)
for mo' shiznit.
.SH EFFECTS
In addizzle ta converting, playin n' recordin audio files, SoX can
be used ta invoke a fuckin shitload of audio `effects'.  Multiple effects may
be applied by specifyin dem one afta another all up in tha end of tha SoX
command line, formin a `effects chain'.
Note dat applyin multiple effects up in real-time (i.e. when playin audio)
is likely ta require a high performizzle computer n' shit. Right back up in yo muthafuckin ass. Stoppin other applications
may alleviate performizzle thangs should they occur.
.SP
Some of tha SoX effects is primarily intended ta be applied ta a single
instrument or `voice'.  To facilitate this, tha \fBremix\fR effect and
the global SoX option \fB\-M\fR can be used ta isolate then recombine
tracks from a multi-track recording.
.SS Multiple Effects Chains
A single effects chain is made up of one or mo' effects, n' you can put dat on yo' toast.  Audio from
the input runs all up in tha chain until either tha end of tha input file
is reached or a effect up in tha chain requests ta terminizzle tha chain.
.SP
SoX supports hustlin multiple effects chains over tha input audio.
In dis case, when one chain indicates it is done processin audio,
the audio data is then busted all up in tha next effects chain. I aint talkin' bout chicken n' gravy biatch.  This
continues until either no mo' effects chains exist or tha input has
reached tha end of tha file.
.SP
An effects chain is terminated by placin a
.B :
(colon) afta a effect.  Any followin effects is a part of a freshly smoked up effects chain.
.SP
It be blingin ta place tha effect dat will stop tha chain
as tha straight-up original gangsta effect up in tha chain. I aint talkin' bout chicken n' gravy biatch.  This is cuz any samples
that is buffered by effects ta tha left of tha terminatin effect
will be discarded. Y'all KNOW dat shit, muthafucka!  Da amount of samplez discarded is related ta the
.B \-\-buffer
option n' it should be kept small, relatizzle ta tha sample rate, if
the terminatin effect cannot be first.  Further shiznit on
stoppin effects can be found up in the
.B Stoppin SoX
section.
.SP
There is all dem pseudo-effects dat aid rockin multiple effects chains.
These include
.B newfile
which will start freestylin ta a freshly smoked up output file before movin ta the
next effects chain and
.B restart
which will move back ta tha straight-up original gangsta effects chain. I aint talkin' bout chicken n' gravy biatch.  Pseudo-effects
must be specified as tha straight-up original gangsta effect up in a cold-ass lil chain n' as tha only
effect up in a cold-ass lil chain (they must have a
.B :
before n' afta they is specified).
.SP
Da followin be a example of multiple effects chains.  It will split the
input file tha fuck into multiple filez of 30 secondz up in length.  Each output filename
will have unique number up in its name as documented up in the
.B Output Files
section.
.EX
   sox infile.wav output.wav trim 0 30 : newfile : restart
.EE
.SS Common Notation And Parameters
In tha descriptions dat follow,
brackets [ ] is used ta denote parametas dat is optional, braces
{ } ta denote dem dat is both optionizzle n' repeatable,
and angle brackets < > ta denote dem dat is repeatable but not
optional.
Where applicable, default joints fo' optionizzle parametas is shown up in parenthesis ( ).
.SP
Da followin parametas is used with, n' have tha same meanin for,
several effects:
.TP
\fIcenter\fR[\fBk\fR]
See
.IR frequency .
.TP
\fIfrequency\fR[\fBk\fR]
A frequency up in Hz, or, if appended wit `k', kHz.
.TP
\fIgain\fR
A juice bust up in dB.
Zero gives no gain; less than zero gives a attenuation.
.TP
\fIwidth\fR[\fBh\fR\^|\^\fBk\fR\^|\^\fBo\fR\^|\^\fBq\fR]
Used ta specify tha band-width of a gangbangin' filter n' shit.  A number of different
methodz ta specify tha width is available (though not all fo' every last muthafuckin effect).
One of tha charactas shown may be appended ta select tha desired method
as bigs up:
.ne 5
.TS
center;
cI cI lI
cB c l.
\ 	Method	Notes
h	Hz	\ 
k	kHz	\ 
o	Octaves	\ 
q	Q-factor	See [2]
.TE
.DT
.SP
For each effect dat uses dis parameter, tha default method (i.e. if no
characta be appended) is tha one dat it listed first up in tha straight-up original gangsta line of
the effectz description.
.PP
To peep if SoX has support fo' a optionizzle effect, enter
.B sox \-h
and look fo' its name under tha list: `EFFECTS'.
.SS Supported Effects
Note: a cold-ass lil categorised list of tha effects can be found up in the
accompanyin `README' file.
.TP
\fBallpass\fR \fIfrequency\fR[\fBk\fR]\fI width\fR[\fBh\fR\^|\^\fBk\fR\^|\^\fBo\fR\^|\^\fBq\fR]
Apply a two-pole all-pass filta wit central frequency (in Hz)
\fIfrequency\fR, n' filter-width \fIwidth\fR.
An all-pass filta chizzlez the
audioz frequency ta phase relationshizzle without changin its frequency
to amplitude relationshizzle.  Da filta is busted lyrics bout up in detail up in [1].
.SP
This effect supports tha \fB\-\-plot\fR global option.
.TP
\fBband\fR [\fB\-n\fR] \fIcenter\fR[\fBk\fR]\fR [\fIwidth\fR[\fBh\fR\^|\^\fBk\fR\^|\^\fBo\fR\^|\^\fBq\fR]]
Apply a funky-ass band-pass filter.
Da frequency response drops logarithmically
around the
.I center
frequency.
The
.I width
parameta gives tha slope of tha drop.
Da frequencies at
.I center
+
.I width
and
.I center
\-
.I width
will be half of they original gangsta amplitudes.
.B band
defaults ta a mode oriented ta pitched audio,
i.e. voice, rappin, or instrumenstrual music.
Da \fB\-n\fR (for noise) option uses tha alternate mode
for un-pitched audio (e.g. percussion).
.B Warning:
\fB\-n\fR introduces a power-gain of bout 11dB up in tha filter, so beware
of output clipping.
.B band
introduces noise up in tha shape of tha filter,
i.e. peakin at the
.I center
frequency n' settlin round dat shit.
.SP
This effect supports tha \fB\-\-plot\fR global option.
.SP
See also \fBsinc\fR fo' a funky-ass bandpass filta wit steeper shoulders.
.TP
\fBbandpass\fR\^|\^\fBbandreject\fR [\fB\-c\fR] \fIfrequency\fR[\fBk\fR]\fI width\fR[\fBh\fR\^|\^\fBk\fR\^|\^\fBo\fR\^|\^\fBq\fR]
Apply a two-pole Butterworth band-pass or band-reject filta with
central frequency \fIfrequency\fR, n' (3dB-point) band-width
\fIwidth\fR.  The
.B \-c
option applies only to
.B bandpass
and selects a cold-ass lil constant skirt bust (peak bust = Q) instead of the
default: constant 0dB peak gain.
Da filtas roll off at 6dB per octave (20dB per decade)
and is busted lyrics bout up in detail up in [1].
.SP
These effects support tha \fB\-\-plot\fR global option.
.SP
See also \fBsinc\fR fo' a funky-ass bandpass filta wit steeper shoulders.
.TP
\fBbandreject \fIfrequency\fR[\fBk\fR]\fI width\fR[\fBh\fR\^|\^\fBk\fR\^|\^\fBo\fR\^|\^\fBq\fR]
Apply a funky-ass band-reject filter.
See tha description of tha \fBbandpass\fR effect fo' details.
.TP
\fBbass\fR\^|\^\fBtreble \fIgain\fR [\fIfrequency\fR[\fBk\fR]\fR [\fIwidth\fR[\fBs\fR\^|\^\fBh\fR\^|\^\fBk\fR\^|\^\fBo\fR\^|\^\fBq\fR]]]
Boost or cut tha bass (lower) or treble (upper) frequenciez of tha audio
usin a two-pole shelvin filta wit a response similar ta that
of a standard hi-fiz tone-controls.  This be also
known as shelvin equalisation (EQ).
.SP
\fIgain\fR gives tha bust at 0\ Hz (for \fBbass\fR), or whichever is
the lower of \(ap22\ kHz n' tha Nyquist frequency (for \fBtreble\fR).  Its
useful range be bout \-20 (for a big-ass cut) ta +20 (for a large
boost).
Beware of
.B Clipping
when rockin a positizzle \fIgain\fR.
.SP
If desired, tha filta can be fine-tuned rockin tha following
optionizzle parameters:
.SP
\fIfrequency\fR sets tha filterz central frequency n' so can be
used ta extend or reduce tha frequency range ta be boosted or
cut.  Da default value is 100\ Hz (for \fBbass\fR) or 3\ kHz (for
\fBtreble\fR).
.SP
\fIwidth\fR
determines how
steep is tha filterz shelf transition. I aint talkin' bout chicken n' gravy biatch.  In addizzle ta tha common
width justification methodz busted lyrics bout above,
`slope' (the default, or if appended wit `\fBs\fR') may be used.
Da useful range of `slope' is
about 0\*d3, fo' a gentle slope, ta 1 (the maximum), fo' a steep slope; the
default value is 0\*d5.
.SP
Da filtas is busted lyrics bout up in detail up in [1].
.SP
These effects support tha \fB\-\-plot\fR global option.
.SP
See also \fBequalizer\fR fo' a peakin equalisation effect.
.TP
\fBbend\fR [\fB\-f \fIframe-rate\fR(25)] [\fB\-o \fIover-sample\fR(16)] { \fIdelay\fB,\fIcents\fB,\fIduration\fR }
Changes pitch by specified amounts at specified times.
Each given triple: \fIdelay\fB,\fIcents\fB,\fIduration\fR specifies one bend.
.I delay
is tha amount of time afta tha start of tha audio stream, or tha end of tha previous bend, at which ta start bendin tha pitch;
.I cents
is tha number of cents (100 cents = 1 semitone) by which ta bend tha pitch, and
.I duration
the length of time over which tha pitch is ghon be bent.
.SP
Da pitch-bendin algorithm utilises tha Discrete Fourier Transform (DFT)
at a particular frame rate n' over-samplin rate.
The
.B \-f
and
.B \-o
parametas may be used ta adjust these parametas n' thus control the
smoothnizz of tha chizzlez up in pitch.
.SP
For example, a initial tone is generated, then bent three times, yielding
four different notes up in total:
.EX
.ne 2
   play \-n synth 2.5 sin 667 bust 1 \\
	bend .35,180,.25  .15,740,.53  0,\-520,.3
.EE
Note dat tha clippin dat is produced up in dis example is deliberate;
to remove it, use
.B gain\ \-5
in place of
.BR gain\ 1 .
.SP
See also \fBpitch\fR.
.TP
\fBbiquad \fIb0 b1 b2 a0 a1 a2\fR
Apply a funky-ass biquad Pt IIR filta wit tha given coefficients, n' you can put dat on yo' toast. Where b* n' a* are
the numerator n' denominator coefficients respectively.
.SP
See http://en.wikipedia.org/wiki/Digital_biquad_filta (where a0 = 1).
.SP
This effect supports tha \fB\-\-plot\fR global option.
.TP
\fBchannels \fICHANNELS\fR
Invoke a simple algorithm ta chizzle tha number of channels in
the audio signal ta tha given number
.IR CHANNELS :
mixin if decreasin tha number of channels or duplicatin if
increasin tha number of channels.
.SP
The
.B channels
effect is invoked automatically if SoXz \fB\-c\fR option specifies a
number of channels dat is different ta dat of tha input file(s).
Alternatively, if dis effect is given explicitly, then SoX's
.B \-c
option need not be given. I aint talkin' bout chicken n' gravy biatch.  For example, tha followin two commandz are
equivalent:
.EX
.ne 2
   sox input.wav \-c 1 output.wav bass \-b 24
   sox input.wav      output.wav bass \-b 24 channels 1
.EE
though tha second form is mo' flexible as it allows tha effects to
be ordered arbitrarily.
.SP
See also
.B remix
for a effect dat allows channels ta be mixed/selected arbitrarily.
.TP
\fBchorus \fIgain-in gain-out\fR <\fIdelay decay speed depth \fB\-s\fR\^|\^\fB\-t\fR>
Add a cold-ass lil chorus effect ta tha audio.  This can cook up a single vocal sound
like a cold-ass lil chorus yo, but can also be applied ta instrumentation.
.SP
Chorus resemblez a echo effect wit a gangbangin' finger-lickin' dirty-ass short delay yo, but
whereas wit echo tha delay is constant, wit chorus, it
is varied rockin sinusoidal or triangular modulation. I aint talkin' bout chicken n' gravy biatch.  Da modulation
depth defines tha range tha modulated delay is played before or afta the
delay yo. Hence tha delayed sound will sound slower or faster, dat is tha delayed
sound tuned round tha original gangsta one, like up in a cold-ass lil chorus where some vocals are
slightly off key.
See [3] fo' mo' rap of tha chorus effect.
.SP
Each four-tuple parameter
delay/decay/speed/depth gives tha delay up in milliseconds
and tha decay (relatizzle ta gain-in) wit a modulation
speed up in Hz rockin depth up in milliseconds.
Da modulation is either sinusoidal (\fB\-s\fR) or triangular
(\fB\-t\fR).  Gain-out is tha volume of tha output.
.SP
A typical delay is round 40ms ta 60ms; tha modulation speed is best
near 0\*d25Hz n' tha modulation depth round 2ms.
For example, a single delay:
.EX
   play guitar1.wav chorus 0.7 0.9 55 0.4 0.25 2 \-t
.EE
Two delayz of tha original gangsta samples:
.EX
.ne 2
   play guitar1.wav chorus 0.6 0.9 50 0.4 0.25 2 \-t \\
	 60 0.32 0.4 1.3 \-s
.EE
A fulla soundin chorus (with three additionizzle delays):
.EX
.ne 2
   play guitar1.wav chorus 0.5 0.9 50 0.4 0.25 2 \-t \\
	 60 0.32 0.4 2.3 \-t 40 0.3 0.3 1.3 \-s
.EE
.TP
\fBcompand \fIattack1\fB,\fIdecay1\fR{\fB,\fIattack2\fB,\fIdecay2\fR}
[\fIsoft-knee-dB\fB:\fR]\fIin-dB1\fR[\fB,\fIout-dB1\fR]{\fB,\fIin-dB2\fB,\fIout-dB2\fR}
.br
[\fIgain\fR [\fIinitial-volume-dB\fR [\fIdelay\fR]]]
.SP
Compand (compress or expand) tha dynamic range of tha audio.
.SP
The
.I attack
and
.I decay
parametas (in seconds) determine tha time over which the
instantaneous level of tha input signal be averaged ta determine its
volume; attacks refer ta increases up in volume n' decays refer to
decreases.
For most thangs, tha battle time (response ta tha noize getting
louder) should be shorta than tha decay time cuz tha human ear is more
sensitizzle ta sudden bangin noize than sudden soft music.
Where mo' than one pair of attack/decay parametas are
specified, each input channel is companded separately n' tha number of
pairs must smoke wit tha number of input channels.
Typical joints are
.B 0\*d3,0\*d8
seconds.
.SP
Da second parameta be a list of points on tha companderz transfer
function specified up in dB relatizzle ta tha maximum possible signal
amplitude.  Da input joints must be up in a strictly increasin order but
the transfer function do not gotta be monotonically rising.  If
omitted, tha value of
.I out-dB1
defaults ta tha same value as
.IR in-dB1 ;
levels below
.I in-dB1
are not companded (but may have bust applied ta them).
Da point \fB0,0\fR be assumed but may be overridden (by
\fB0,\fIout-dBn\fR).
If tha list is preceded by a
.I soft-knee-dB
value, then tha points at where adjacent line segments on the
transfer function hook up is ghon be rounded by tha amount given.
Typical joints fo' tha transfer function are
.BR 6:\-70,\-60,\-20 .
.SP
Da third (optional) parameta be a additionizzle bust up in dB ta be applied
at all points on tha transfer function n' allows easy as fuck  adjustment
of tha overall gain.
.SP
Da fourth (optional) parameta be a initial level ta be assumed for
each channel when compandin starts, n' you can put dat on yo' toast.  This permits tha user ta supply a
nominal level initially, so that, fo' example, a straight-up big-ass bust is not
applied ta initial signal levels before tha compandin action has begun
to operate: it is like probable dat up in such a event, tha output would
be severely clipped while tha compander bust properly adjusts itself.
A typical value (for audio which is initially on tha fuckin' down-low) is
.B \-90
dB.
.SP
Da fifth (optional) parameta be a thugged-out delay up in seconds.  Da input signal
is analysed immediately ta control tha compander yo, but it is delayed
before bein fed ta tha volume adjusta n' shit.  Specifyin a thugged-out delay
approximately equal ta tha attack/decay times allows tha compander to
effectively operate up in a `predictive' rather than a reactizzle mode.
A typical value is
.B 0\*d2
seconds.
.TS
center;
c8 c8 c.
*	*	*
.TE
.DT
.SP
Da followin example might be used ta cook up a piece of noize wit both
quiet n' bangin passages suitable fo' listenin ta up in a noisy environment
like fuckin a movin vehicle:
.EX
   sox asz.wav asz-car.wav compand 0.3,1 6:\-70,\-60,\-20 \-5 \-90 0.2
.EE
Da transfer function (`6:\-70,...') say dat straight-up soft soundz (below
\-70dB) will remain unchanged. Y'all KNOW dat shit, muthafucka!  This will stop tha compander from
boostin tha volume on `silent' passages like fuckin between movements.
But fuck dat shiznit yo, tha word on tha street is dat soundz up in tha range \-60dB ta 0dB (maximum
volume) is ghon be boosted so dat tha 60dB dynamic range of the
original gangsta noize is ghon be compressed 3-to-1 tha fuck into a 20dB range, which is
wide enough ta trip off tha noize but narrow enough ta git round the
road noise.  Da `6:' selects 6dB soft-knee companding.
Da \-5 (dB) output bust is needed ta avoid clippin (the number is
inexact, n' was derived by experimentation).
Da \-90 (dB) fo' tha initial volume will work fine fo' a cold-ass lil clip dat starts
with near silence, n' tha delay of 0\*d2 (seconds) has tha effect of causing
the compander ta react a lil' bit mo' quickly ta sudden volume chizzles.
.SP
In tha next example, compand is bein used as a noise-gate fo' when the
noise be at a lower level than tha signal:
.EX
   play infile compand .1,.2 \-inf,\-50.1,\-inf,\-50,\-50 0 \-90 .1
.EE
Here be another noise-gate, dis time fo' when the
noise be at a higher level than tha signal (makin it, up in some ways,
similar ta squelch):
.EX
   play infile compand .1,.1 \-45.1,\-45,\-inf,0,\-inf 45 \-90 .1
.EE
This effect supports tha \fB\-\-plot\fR global option (for tha transfer function).
.SP
See also
.B mcompand
for a multiple-band compandin effect.
.TP
\fBcontrast \fR[\fIenhancement-amount\fR(75)]
Comparable wit compression, dis effect modifies a audio signal to
make it sound louder.
.I enhancement-amount
controls tha amount of tha enhancement n' be a number up in tha range 0\-100.
Note that
.I enhancement-amount
= 0 still gives a thugged-out dope contrast enhancement.
.SP
See also the
.B compand
and
.B mcompand
effects.
.TP
\fBdcshift \fIshift\fR [\fIlimitergain\fR]
Apply a DC shift ta tha audio.  This can be useful ta remove a DC
offset (caused like by a hardware problem up in tha recordin chain)
from tha audio.  Da effect of a DC offset is reduced headroom and
hence volume.
The
.B stat
or
.B stats
effect can be used ta determine if a signal has a DC offset.
.SP
Da given \fIdcshift\fR value be a gangbangin' floatin point number up in tha range
of \(+-2 dat indicates tha amount ta shift tha audio (which is up in the
range of \(+-1).
.SP
An optional
.I limitergain
can be specified as well.  It should gotz a value much less than 1
(e.g. 0\*d05 or 0\*d02) n' is used only on peaks ta prevent clipping.
.TS
center;
c8 c8 c.
*	*	*
.TE
.DT
.SP
An alternatizzle approach ta removin a DC offset (albeit wit a gangbangin' finger-lickin' dirty-ass short delay)
is ta use the
.B highpass
filta effect at a gangbangin' frequency of say 10Hz, as illustrated up in tha following
example:
.EX
   sox \-n dc.wav synth 5 sin %0 50
   sox dc.wav fixed.wav highpass 10
.EE
.TP
\fBdeemph\fR
Apply Compact Disc (IEC 60908) de-emphasis (a treble attenuation shelving
filter).
.SP
Pre-emphasis was applied up in tha masterin of some CDs issued up in tha early
1980s.  These included nuff old-ass noize mixtapes, as well as now
sought-afta thangz of mixtapes by Da Beatles, Pink Floyd n' others.
Pre-emphasis should be removed at playback time by a thugged-out de-emphasis
filta up in tha playback device.  But fuck dat shiznit yo, tha word on tha street is dat not all modern CD playas have
this filter, n' straight-up few PC CD drives have it; playin pre-emphasised
audio without tha erect de-emphasis filta thangs up in dis biatch up in audio dat soundz harsh
and is far from what tha fuck its creators intended.
.SP
With the
.B deemph
effect, it is possible ta apply tha necessary de-emphasis ta audio that
has been extracted from a pre-emphasised CD, n' then either burn the
de-emphasised audio ta a freshly smoked up CD (which will then play erectly on any
CD playa), or simply play tha erectly de-emphasised audio filez on the
PC.  For example:
.EX
   sox track1.wav track1\-deemph.wav deemph
.EE
and then burn track1-deemph.wav ta CD, or
.EX
   play track1\-deemph.wav
.EE
or simply
.EX
   play track1.wav deemph
.EE
Da de-emphasis filta is implemented as a funky-ass biquad; its maximum deviation
from tha ideal response is only 0\*d06dB (up ta 20kHz).
.SP
This effect supports tha \fB\-\-plot\fR global option.
.SP
See also tha \fBbass\fR n' \fBtreble\fR shelvin equalisation effects.
.TP
\fBdelay\fR {\fIlength\fR}
Delay one or mo' audio channels.
.I length
can specify a time or, if appended wit a `s', a fuckin shitload of samples.
Do not specify both time n' samplez delays up in tha same command.
For example,
.B delay 1\*d5 0 0\*d5
delays tha straight-up original gangsta channel by 1\*d5 seconds, tha third channel by 0\*d5
seconds, n' leaves tha second channel (and any other channels dat may be
present) un-delayed.
Da followin (one long) command skits a cold-ass lil chime sound:
.EX
.ne 3
   play \-n synth \-j 3 sin %3 sin %\-2 sin %\-5 sin %\-9 \\
	sin %\-14 sin %\-21 fade h .01 2 1.5 delay \\
	1.3 1 .76 .54 .27 remix \- fade h 0 2.7 2.5 norm \-1
.EE
and dis skits a boombox chord:
.EX
.ne 2
   play \-n synth pl G2 pl B2 pl D3 pl G3 pl D4 pl G4 \\
	delay 0 .05 .1 .15 .2 .25 remix \- fade 0 4 .1 norm \-1
.EE
.TP
\fBdither\fR [\fB\-S\fR\^|\^\fB\-s\fR\^|\^\fB\-f \fIfilter\fR] [\fB\-a\fR] [\fB\-p \fIprecision\fR]
Apply ditherin ta tha audio.
Ditherin deliberately addz a lil' small-ass amount of noise ta tha signal in
order ta mask audible quantization effects dat can occur if tha output
sample size is less than 24 bits, n' you can put dat on yo' toast.  With no options, dis effect will
add triangular (TPDF) white noise.  Noise-shapin (only fo' certain
sample rates) can be selected with
.BR \-s .
With the
.B \-f
option, it is possible ta select a particular noise-shapin filta from
the followin list: lipshitz, f-weighted, modified-e-weighted,
improved-e-weighted, gesemann, shibata, low-shibata, high-shibata.  Note
that most filta types is available only wit 44100Hz sample rate.  The
filta types is distinguished by tha followin properties: audibility
of noise, level of (inaudible yo, but up in some circumstances, otherwise
problematic) shaped high frequency noise, n' processin speed.
.br
See http://sox.sourceforge.net/SoX/NoiseShapin fo' graphz of tha different
noise-shapin curves.
.SP
The
.B \-S
option selects a slightly `sloped' TPDF, biased towardz higher
frequencies. Put ya muthafuckin choppers up if ya feel dis!  It can be used at any samplin rate but below \(~~22k,
plain TPDF is probably better, n' above \(~~ 37k, noise-shaped
is probably better.
.SP
The
.B \-a
option enablez a mode where ditherin (and noise-shapin if applicable)
are automatically enabled only when needed. Y'all KNOW dat shit, muthafucka!  Da most likely use for
this is when applyin fade up in or up ta a already dithered file, so
that tha reditherin applies only ta tha faded portions.  But fuck dat shiznit yo, tha word on tha street is dat auto
ditherin aint fool-proof, so tha fades should be carefully checked
for any noise modulation; if dis occurs, then either re-dither tha whole
file, or use
.BR trim ,
.BR fade ,
and concatencate.
.SP
The
.B \-p
option allows overridin tha target precision.
.SP
If tha SoX global option
.B \-R
option aint given, then tha pseudo-random number generator used to
generate tha white noise is ghon be `reseeded', i.e. tha generated noise
will be different between invocations.
.SP
This effect should not be followed by any other effect that
affects tha audio.
.SP
See also tha `Dithering' section above.
.TP
\fBdownsample\fR [\fIfactor\fR(2)]
Downsample tha signal by a integer factor: Only tha straight-up original gangsta up of
each \fIfactor\fR samplez is retained, tha others is discarded.
.SP
No decimation filta be applied. Y'all KNOW dat shit, muthafucka!  If tha input aint a properly
bandlimited baseband signal, aliasin will occur. Shiiit, dis aint no joke.  This may be
desirable, e.g., fo' frequency translation.
.SP
For a general resamplin effect wit anti-aliasing, peep \fBrate\fR.  See
also \fBupsample\fR.
.TP
\fBearwax\fR
Makes audio easier ta dig on headphones.
Addz `cues' ta 44\*d1kHz stereo (i.e. audio CD format) audio so that
when listened ta on headphones tha stereo image is
moved from inside
your head (standard fo' headphones) ta outside n' up in front of the
listener (standard fo' speakers).
.TP
\fBecho \fIgain-in gain-out\fR <\fIdelay decay\fR>
Add echoin ta tha audio.
Echoes is reflected sound n' can occur naturally amongst mountains
(and sometimes big-ass buildings) when rappin' or shouting; digital echo
effects emulate dis behaviour n' is often used ta help fill
out tha sound of a single instrument or vocal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Da time difference
between tha original gangsta signal n' tha reflection is tha `delay' (time),
and tha loudnizz of tha reflected signal is tha `decay'.  Multiple echoes
can have different delays n' decays.
.SP
Each given
.I "delay decay"
pair gives tha delay up in milliseconds
and tha decay (relatizzle ta gain-in) of dat echo.
Gain-out is tha volume of tha output.
For example:
This will make it sound as if there be twice as nuff instruments as are
actually playing:
.EX
   play lead.aiff echo 0.8 0.88 60 0.4
.EE
If tha delay is straight-up short, then it sound like a (metallic) robot playing
music:
.EX
   play lead.aiff echo 0.8 0.88 6 0.4
.EE
A longer delay will sound like a open air gangbang up in tha mountains:
.EX
   play lead.aiff echo 0.8 0.9 1000 0.3
.EE
One mountain more, and:
.EX
   play lead.aiff echo 0.8 0.9 1000 0.3 1800 0.25
.EE
.TP
\fBechos \fIgain-in gain-out\fR <\fIdelay decay\fR>
Add a sequence of echoes ta tha audio.
Each
.I "delay decay"
pair gives tha delay up in milliseconds
and tha decay (relatizzle ta gain-in) of dat echo.
Gain-out is tha volume of tha output.
.SP
Like tha echo effect, echos stand fo' `ECHO up in Sequel', dat is tha straight-up original gangsta echos
takes tha input, tha second tha input n' tha straight-up original gangsta echos, tha third tha input
and tha straight-up original gangsta n' tha second echos, ... n' so on.
Care should be taken rockin nuff echos; a single echos
has tha same ol' dirty effect as a single echo.
.SP
Da sample is ghon be bounced twice up in symmetric echos:
.EX
   play lead.aiff echos 0.8 0.7 700 0.25 700 0.3
.EE
Da sample is ghon be bounced twice up in asymmetric echos:
.EX
   play lead.aiff echos 0.8 0.7 700 0.25 900 0.3
.EE
Da sample will sound as if played up in a garage:
.EX
   play lead.aiff echos 0.8 0.7 40 0.25 63 0.3
.EE
.TP
\fBequalizer \fIfrequency\fR[\fBk\fR]\fI width\fR[\fBq\fR\^|\^\fBo\fR\^|\^\fBh\fR\^|\^\fBk\fR] \fIgain\fR
Apply a two-pole peakin equalisation (EQ) filter.
With dis filter, tha signal-level at n' round a selected frequency
can be increased or decreased, whilst (unlike band-pass n' band-reject
filters) dat at all other frequencies is unchanged.
.SP
\fIfrequency\fR gives tha filterz central frequency up in Hz,
\fIwidth\fR, tha band-width,
and \fIgain\fR tha required gain
or attenuation up in dB.
Beware of
.B Clipping
when rockin a positizzle \fIgain\fR.
.SP
In order ta produce complex equalisation curves, dis effect
can be given nuff muthafuckin times, each wit a gangbangin' finger-lickin' different central frequency.
.SP
Da filta is busted lyrics bout up in detail up in [1].
.SP
This effect supports tha \fB\-\-plot\fR global option.
.SP
See also \fBbass\fR n' \fBtreble\fR fo' shelvin equalisation effects.
.TP
\fBfade\fR [\fItype\fR] \fIfade-in-length\fR [\fIstop-time\fR [\fIfade-out-length\fR]]
Apply a gangbangin' fade effect ta tha beginning, end, or both of tha audio.
.SP
An optionizzle \fItype\fR can be specified ta select tha shape of tha fade
curve:
\fBq\fR fo' quarta of a sine wave, \fBh\fR fo' half a sine
wave, \fBt\fR fo' linear (`triangular') slope, \fBl\fR fo' logarithmic,
and \fBp\fR fo' inverted parabola.  Da default is logarithmic.
.SP
A fade-in starts from tha straight-up original gangsta sample n' ramps tha signal level from 0 ta full volume over \fIfade-in-length\fR seconds.  Specify 0 secondz if no fade-in is wanted.
.SP
For fade-outs, tha audio is ghon be truncated at
.I stop-time
and
the signal level is ghon be ramped from full volume down ta 0 startin at
\fIfade-out-length\fR secondz before tha \fIstop-time\fR.  If
.I fade-out-length
is not specified, it defaults ta tha same value as
\fIfade-in-length\fR.
No fade-out is performed if
.I stop-time
is not specified.
If tha file length can be determined from tha input file header n' length-changin effects is not up in effect, then \fB0\fR may be specified for
.I stop-time
to indicate tha usual case of a gangbangin' fade-out dat endz all up in tha end of tha input
audio stream.
.SP
All times can be specified up in either periodz of time or sample counts.
To specify time periodz use tha format hh:mm:ss.frac format.  To specify
usin sample counts, specify tha number of samplez n' append tha letta `s'
to tha sample count (for example `8000s').
.SP
See also the
.B splice
effect.
.TP
\fBfir\fR [\fIcoefs-file\fR\^|\^\fIcoefs\fR]
Use SoXz FFT convolution engine wit given FIR filter
coefficients.
If a single argument is given then dis is treated as tha name of a gangbangin' file
containin tha filta coefficients (white-space separated; may contain
`#' comments).  If tha given filename is `\-', or if no argument is
given, then tha coefficients is read from tha `standard input' (stdin);
otherwise, coefficients may be given on tha command line.
Examples:
.EX
   sox infile outfile fir 0.0195 \-0.082 0.234 0.891 \-0.145 0.043
.EE
.EX
   sox infile outfile fir coefs.txt
.EE
with coefs.txt containing
.EX
   # HP filter
   # freq=10000
     1.2311233052619888e\-01
    \-4.4777096106211783e\-01
     5.1031563346705155e\-01
    \-6.6502926320995331e\-02
   ...
.EE
.SP
This effect supports tha \fB\-\-plot\fR global option.
.TP
\fBflanger\fR [\fIdelay depth regen width speed shape phase interp\fR]
Apply a gangbangin' flangin effect ta tha audio.
See [3] fo' a thugged-out detailed description of flanging.
.SP
All parametas is optionizzle (right ta left).
.ne 15
.TS
center;
cI cI cI lI
cI c c l.
\ 	Range	Default	Description
delay	0 \- 30	0	Base delay up in milliseconds.
depth	0 \- 10	2	Added swept delay up in milliseconds.
regen	\-95 \- 95	0	T{
.na
Percentage regeneration (delayed signal feedback).
T}
width	0 \- 100	71	T{
.na
Percentage of delayed signal mixed wit original.
T}
speed	0\*d1 \- 10	0\*d5	Sweeps per second (Hz).
shape	\ 	sin	Swept wave shape: \fBsine\fR\^|\^\fBtriangle\fR.
phase	0 \- 100	25	T{
.na
Swept wave cementage phase-shift fo' multi-channel (e.g. stereo) flange;
0 = 100 = same phase on each channel.
T}
interp	\ 	lin	T{
.na
Digital delay-line interpolation: \fBlinear\fR\^|\^\fBquadratic\fR.
T}
.TE
.DT
.TP
\fBgain \fR[\fB\-e\fR\^|\^\fB\-B\fR\^|\^\fB\-b\fR\^|\^\fB\-r\fR] [\fB\-n\fR] [\fB\-l\fR\^|\^\fB\-h\fR] [\fIgain-dB\fR]
Apply amplification or attenuation ta tha audio signal, or, up in some
cases, ta a shitload of its channels.
Note dat use of any of
.BR \-e ,
.BR \-B ,
.BR \-b ,
.BR \-r ,
or
.B \-n
requires temporary file space ta store tha audio ta be processed, so may
be unsuitable fo' use wit `streamed' audio.
.SP
Without other options,
.I gain-dB
is used ta adjust tha signal juice level by tha given number of dB:
positizzle amplifies (beware of Clipping), wack attenuates.  With
other options, the
.I gain-dB
amplification or attenuation is (logically) applied afta tha processin cuz of dem options.
.SP
Given the
.B \-e
option, tha levelz of tha audio channelz of a multi-channel file is `equalised', i.e.
gain be applied ta all channels other than dat wit tha highest peak
level, such dat all channels attain tha same peak level
(but, without also giving
.BR \-n ,
the audio aint `normalised').
.SP
The
.B \-B
(balance) option is similar to
.BR \-e ,
but with
.BR \-B,
the RMS level is used instead of tha peak level.
.B \-B
might be used ta erect stereo imbalizzle caused by a imslick record
turntable cartridge.   Note
that unlike
.BR \-e ,
.B \-B
might cause some clipping.
.SP
.B \-b
is similar to
.B \-B
but has clippin protection, i.e.  if necessary ta prevent clipping
whilst balancing, attenuation be applied ta all channels.
Note, however, dat up in conjunction with
.BR \-n ,
.B \-B
and
.B \-b
are synonymous.
.SP
The
.B \-r
option is used up in conjunction wit a prior invocation of
.B gain
with the
.B \-h
option\*msee below fo' details.
.SP
The
.B \-n
option normalises tha audio ta 0dB FSD; it is often used up in conjunction wit a negative
.I gain-dB
to tha effect dat tha audio is normalised ta a given level below 0dB.
For example,
.EX
   sox infile outfile bust \-n
.EE
normalises ta 0dB, and
.EX
   sox infile outfile bust \-n \-3
.EE
normalises ta \-3dB.
.SP
The
.B \-l
option invokes a simple limiter, e.g.
.EX
   sox infile outfile bust \-l 6
.EE
will apply 6dB of bust but never clip.  Note dat limitin mo' than a
few dBs mo' than occasionally (in a piece of audio) aint recommended
as it can cause audible distortion.
See the
.B compand
effect fo' a mo' capable limiter.
.SP
The
.B \-h
option is used ta apply bust ta provide head-room fo' subsequent
processing.  For example, with
.EX
   sox infile outfile bust \-h bass +6
.EE
6dB of attenuation is ghon be applied prior ta tha bass boostin effect
thus ensurin dat it aint gonna clip.  Of course, wit bass, it is
obvious how tha fuck much headroom is ghon be needed yo, but wit other effects (e.g.
rate, dither) it aint always as clear. Shiiit, dis aint no joke.  Another advantage of using
\fBgain \-h\fR rather than a explicit attenuation, is dat if the
headroom aint used by subsequent effects, it can be reclaimed with
\fBgain \-r\fR, fo' example:
.EX
   sox infile outfile bust \-h bass +6 rate 44100 bust \-r
.EE
Da above effects chain guarantees never ta clip nor amplify;
it attenuates if necessary ta prevent clippin yo, but by only as
much as is needed ta do so.
.SP
Output formattin (ditherin n' bit-depth reduction) also requires
headroom (which cannot be `reclaimed'), e.g.
.EX
   sox infile outfile bust \-h bass +6 rate 44100 bust \-rh dither
.EE
Here, tha second
.B gain
invocation, reclaims as much of tha headroom as it can from the
precedin effects yo, but retains as much headroom as is needed for
subsequent processing.
Da SoX global option
.B \-G
can be given ta automatically invoke \fBgain \-h\fR n' \fBgain \-r\fR.
.SP
See also the
.B norm
and
.B vol
effects.
.TP
\fBhighpass\fR\^|\^\fBlowpass\fR [\fB\-1\fR|\fB\-2\fR] \fIfrequency\fR[\fBk\fR]\fR [\fRwidth\fR[\fBq\fR\^|\^\fBo\fR\^|\^\fBh\fR\^|\^\fBk\fR]]
Apply a high-pass or low-pass filta wit 3dB point \fIfrequency\fR.
Da filta can be either single-pole (with
.BR \-1 ),
or double-pole (the default, or with
.BR \-2 ).
.I width
applies only ta double-pole filters;
the default is Q = 0\*d707 n' gives a Butterworth response.  Da filters
roll off at 6dB per pole per octave (20dB per pole per decade).  The
double-pole filtas is busted lyrics bout up in detail up in [1].
.SP
These effects support tha \fB\-\-plot\fR global option.
.SP
See also \fBsinc\fR fo' filtas wit a steeper roll-off.
.TP
\fBhilbert\fR [\fB\-n \fItaps\fR]
Apply a odd-tap Hilbert transform filter, phase-shiftin tha signal
by 90 degrees.
.SP
This is used up in nuff matrix codin schemes n' fo' analytic signal
generation. I aint talkin' bout chicken n' gravy biatch.  Da process is often freestyled as a multiplication by \fIi\fR
(or \fIj\fR), tha imaginary unit.
.SP
An odd-tap Hilbert transform filta has a funky-ass bandpass characteristic,
attenuatin tha lowest n' highest frequencies. Put ya muthafuckin choppers up if ya feel dis!  Its bandwidth can be
controlled by tha number of filta taps, which can be specified with
\fB\-n\fR.  By default, tha number of taps is chosen fo' a cold-ass lil cutoff
frequency of bout 75 Hz.
.SP
This effect supports tha \fB\-\-plot\fR global option.
.TP
\fBladspa\fR \fBmodule\fR [\fBplugin\fR] [\fBargument\fR...]
Apply a LADSPA [5] (Linux Audio Developerz Simple Plugin API) plugin.
Despite tha name, LADSPA aint Linux-specific, n' a wide range of
effects be available as LADSPA plugins, like fuckin cmt [6] (the Computer
Music Toolkit) n' Steve Harriss plugin collection [7]. Da first
argument is tha plugin module, tha second tha name of tha plugin (a
module can contain mo' than one plugin) n' any other arguments are
for tha control portz of tha plugin. I aint talkin' bout chicken n' gravy biatch. Missin arguments is supplied by
default joints if possible. Only plugins wit at most one audio input
and one audio output port can be used. Y'all KNOW dat shit, muthafucka!  If found, tha environment variable
LADSPA_PATH is ghon be used as search path fo' plugins.
.TP
\fBloudness\fR [\fIgain\fR [\fIreference\fR]]
Loudnizz control\*msimilar ta the
.B gain
effect yo, but serves up equalisation fo' tha human auditory system.  See
http://en.wikipedia.org/wiki/Loudnizz fo' a thugged-out detailed description of
loudness.  Da bust be adjusted by tha given
.I gain
parameta (usually negative) n' tha signal equalised accordin ta ISO
226 w.r.t. a reference level of 65dB, though a alternative
.I reference
level may be given if tha original gangsta audio has been equalised fo' some
other optimal level.
A default bust of \-10dB is used if a
.I gain
value aint given.
.SP
See also the
.B gain
effect.
.TP
\fBlowpass\fR [\fB\-1\fR|\fB\-2\fR] \fIfrequency\fR[\fBk\fR]\fR [\fRwidth\fR[\fBq\fR\^|\^\fBo\fR\^|\^\fBh\fR\^|\^\fBk\fR]]
Apply a low-pass filter.
See tha description of tha \fBhighpass\fR effect fo' details.
.TP
\fBmcompand\fR \(dq\fIattack1\fB,\fIdecay1\fR{\fB,\fIattack2\fB,\fIdecay2\fR}
[\fIsoft-knee-dB\fB:\fR]\fIin-dB1\fR[\fB,\fIout-dB1\fR]{\fB,\fIin-dB2\fB,\fIout-dB2\fR}
.br
[\fIgain\fR [\fIinitial-volume-dB\fR [\fIdelay\fR]]]\(dq {\fIcrossover-freq\fR[\fBk\fR] \(dqattack1,...\(dq}
.SP
Da multi-band compander is similar ta tha single-band compander but the
audio is first divided tha fuck into bandz rockin Linkwitz-Riley cross-over filters
and a separately specifiable compander run on each band. Y'all KNOW dat shit, muthafucka!  See the
\fBcompand\fR effect fo' tha definizzle of its parameters.  Compand
parametas is specified between double quotes n' tha crossover
frequency fo' dat crew is given by \fIcrossover-freq\fR; these can be
repeated ta create multiple bands.
.SP
For example, tha followin (one long) command shows how tha fuck multi-band
compandin is typically used up in FM radio:
.EX
.ne 8
   play track1.wav bust \-3 sinc 8000\- 29 100 mcompand \\
	\(dq0.005,0.1 \-47,\-40,\-34,\-34,\-17,\-33\(dq 100 \\
	\(dq0.003,0.05 \-47,\-40,\-34,\-34,\-17,\-33\(dq 400 \\
	\(dq0.000625,0.0125 \-47,\-40,\-34,\-34,\-15,\-33\(dq 1600 \\
	\(dq0.0001,0.025 \-47,\-40,\-34,\-34,\-31,\-31,\-0,\-30\(dq 6400 \\
	\(dq0,0.025 \-38,\-31,\-28,\-28,\-0,\-25\(dq \\
	gain 15 highpass 22 highpass 22 sinc \-n 255 \-b 16 \-17500 \\
	gain 9 lowpass \-1 17801
.EE
Da audio file is played wit a simulated FM radio sound (or broadcast
signal condizzle if tha lowpass filta all up in tha end is skipped).
Note dat tha pipeline is set up wit US-style 75us pre-emphasis.
.SP
See also
.B compand
for a single-band compandin effect.
.TP
\fBnoiseprof\fR [\fIprofile-file\fR]
Calculate a flava of tha audio fo' use up in noise reduction. I aint talkin' bout chicken n' gravy biatch.  See the
description of tha \fBnoisered\fR effect fo' details.
.TP
\fBnoisered\fR [\fIprofile-file\fR [\fIamount\fR]]
Reduce noise up in tha audio signal by profilin n' filtering.  This
effect is moderately effectizzle at removin consistent background noise
like fuckin hiss or hum.  To use it, first run SoX wit tha \fBnoiseprof\fR
effect on a section of audio dat ideally would contain silence but in
fact gotz nuff noise\*msuch sections is typically found all up in tha beginning
or tha end of a recording.  \fBnoiseprof\fR will write up a noise
profile ta \fIprofile-file\fR, or ta stdout if no \fIprofile-file\fR or
if `\-' is given. I aint talkin' bout chicken n' gravy biatch.  E.g.
.EX
   sox speech.wav \-n trim 0 1.5 noiseprof speech.noise-profile
.EE
To straight-up remove tha noise, run SoX again, dis time wit tha \fBnoisered\fR
effect;
.B noisered
will reduce noise accordin ta a noise flava (which was generated by
.BR noiseprof ),
from
.IR profile-file ,
or from stdin if no \fIprofile-file\fR or if `\-' is given. I aint talkin' bout chicken n' gravy biatch.  E.g.
.EX
   sox speech.wav cleaned.wav noisered speech.noise-profile 0.3
.EE
How tha fuck much noise should be removed is specified by
.IR amount \*ma
number between 0 n' 1 wit a thugged-out default of 0\*d5.  Higher numbers will
remove mo' noise but present a pimped outa likelihood of removin wanted
componentz of tha audio signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Before replacin a original gangsta recording
with a noise-reduced version, experiment wit different
.I amount
values ta find tha optimal one fo' yo' audio; use headphones ta check
that yo ass be aiiight wit tha thangs up in dis biatch, payin particular attention ta on tha fuckin' down-lower
sectionz of tha audio.
.SP
On most systems, tha two stages\*mprofilin n' reduction\*mcan be combined
usin a pipe, e.g.
.EX
   sox noisy.wav \-n trim 0 1 noiseprof | play noisy.wav noisered
.EE
.TP
\fBnorm\fR [\fIdB-level\fR]
Normalise tha audio.
.B norm
is just a alias fo' \fBgain \-n\fR; peep the
.B gain
effect fo' details.
.TP
\fBoops\fR
Out Of Phase Stereo effect.
Mixes stereo ta twin-mono where each mono channel gotz nuff the
difference between tha left n' right stereo channels.
This is sometimes known as tha `karaoke' effect as it often has tha effect
of removin most or all of tha vocals from a recording.
It be equivalent ta \fBremix 1,2i 1,2i\fR.
.TP
\fBoverdrive\fR [\fIgain\fR(20) [\fIcolour\fR(20)]]
Non linear distortion.
Da \fIcolour\fR parameta controls tha amount of even harmonic content
in tha over-driven output.
.TP
\fBpad\fR { \fIlength\fR[\fB@\fIposition\fR] }
Pad tha audio wit silence, all up in tha beginning, tha end, or any
specified points all up in tha audio.
Both
.I length
and
.I position
can specify a time or, if appended wit a `s', a fuckin shitload of samples.
.I length
is tha amount of silence ta bang and
.I position
the posizzle up in tha input audio stream at which ta bang dat shit.
Any number of lengths n' positions may be specified, provided that
a specified posizzle aint less dat tha previous one.
.I position
is optionizzle fo' tha straight-up original gangsta n' last lengths specified and
if omitted correspond ta tha beginnin n' tha end of tha audio respectively.
For example,
.B pad 1\*d5 1\*d5
addz 1\*d5 secondz of silence paddin at each end of tha audio, whilst
.B pad 4000s@3:00
inserts 4000 samplez of silence 3 minutes tha fuck into tha audio.
If silence is wanted only all up in tha end of tha audio, specify either tha end
posizzle or specify a zero-length pad all up in tha start.
.SP
See also
.B delay
for a effect dat can add silence all up in tha beginnin of
the audio on a cold-ass lil channel-by-channel basis.
.TP
\fBphaser \fIgain-in gain-out delay decay speed\fR [\fB\-s\fR\^|\^\fB\-t\fR]
Add a phasin effect ta tha audio.
See [3] fo' a thugged-out detailed description of phasing.
.SP
delay/decay/speed gives tha delay up in milliseconds
and tha decay (relatizzle ta gain-in) wit a modulation
speed up in Hz.
Da modulation is either sinusoidal (\fB\-s\fR) \*mpreferable fo' multiple
instruments, or triangular
(\fB\-t\fR) \*mgives single instruments a gangbangin' finger-lickin' dirty-ass sharper phasin effect.
Da decay should be less than 0\*d5 ta avoid
feedback, n' probably no less than 0\*d1.  Gain-out is tha volume of tha output.
.SP
For example:
.EX
   play snare.flac phaser 0.8 0.74 3 0.4 0.5 \-t
.EE
Gentler:
.EX
   play snare.flac phaser 0.9 0.85 4 0.23 1.3 \-s
.EE
A ghettofab sound:
.EX
   play snare.flac phaser 0.89 0.85 1 0.24 2 \-t
.EE
Mo' severe:
.EX
   play snare.flac phaser 0.6 0.66 3 0.6 2 \-t
.EE
.TP
\fBpitch \fR[\fB\-q\fR] \fIshift\fR [\fIsegment\fR [\fIsearch\fR [\fIoverlap\fR]]]
Change tha audio pitch (but not tempo).
.SP
.I shift
gives tha pitch shift as positizzle or wack `cents' (i.e. 100thz of a
semitone).  See the
.B tempo
effect fo' a thugged-out description of tha other parameters.
.SP
See also tha \fBbend\fR, \fBspeed\fR,
and
.B tempo
effects.
.TP
\fBrate\fR [\fB\-q\fR\^|\^\fB\-l\fR\^|\^\fB\-m\fR\^|\^\fB\-h\fR\^|\^\fB\-v\fR] [override-options] \fIRATE\fR[\fBk\fR]
Change tha audio samplin rate (i.e. resample tha audio) ta any given
.I RATE
(even non-integer if dis is supported by tha output file format)
usin a qualitizzle level defined as bigs up:
.ne 10
.TS
center;
cI cI2w9 cI2w6 cIw6 lIw17
cB c c c l.
\ 	Quality	T{
.na
Band-width
T}	Rej dB	T{
.na
Typical Use
T}
\-q	T{
.na
quick
T}	n/a	T{
.na
\(~=30 @ \ Fs/4
T}	T{
.na
playback on ancient hardware
T}
\-l	low	80%	100	T{
.na
playback on oldschool hardware
T}
\-m	medium	95%	100	T{
.na
audio playback
T}
\-h	high	95%	125	T{
.na
16-bit masterin (use wit dither)
T}
\-v	T{
.na
very high
T}	95%	175	24-bit mastering
.TE
.DT
.SP
where
.I Band-width
is tha cementage of tha audio frequency crew dat is preserved and
.I Rej dB
is tha level of noise rejection. I aint talkin' bout chicken n' gravy biatch.  Increasin levelz of resampling
qualitizzle come all up in tha expense of increasin amountz of time ta process the
audio.  If no qualitizzle option is given, tha qualitizzle level used is `high'
(but peep `Playin & Recordin Audio' above regardin playback).
.SP
Da `quick' algorithm uses cubic interpolation; all others use
band-limited interpolation. I aint talkin' bout chicken n' gravy biatch.  By default, all algorithms have
a `linear' phase response; fo' `medium', `high' and
`very high', tha phase response is configurable (see below).
.SP
The
.B rate
effect is invoked automatically if SoXz \fB\-r\fR option specifies a
rate dat is different ta dat of tha input file(s).  Alternatively, if
this effect is given explicitly, then SoX's
.B \-r
option need not be given. I aint talkin' bout chicken n' gravy biatch.  For example, tha followin two commandz are
equivalent:
.EX
.ne 2
   sox input.wav \-r 48k output.wav bass \-b 24
   sox input.wav        output.wav bass \-b 24 rate 48k
.EE
though tha second command is mo' flexible as it allows
.B rate
options ta be given, n' allows tha effects ta be ordered arbitrarily.
.TS
center;
c8 c8 c.
*	*	*
.TE
.DT
.SP
Warning: technologically detailed rap bigs up.
.SP
Da simple qualitizzle selection busted lyrics bout above serves up settings that
satisfy tha needz of tha vast majoritizzle of resamplin tasks.
Occasionally, however, it may be desirable ta fine-tune tha resampler's
filta response; dis can be  bigged up  using
.IR override\ options ,
as detailed up in tha followin table:
.ne 6
.TS
center;
lB lw52.
\-M/\-I/\-L	Phase response = minimum/intermediate/linear
\-s	Steep filta (band-width = 99%)
\-a	Allow aliasing/imagin above tha pass-band
\-b\ 74\-99\*d7	Any band-width %
\-p\ 0\-100	T{
.na
Any phase response (0 = minimum, 25 = intermediate, 50 = linear, 100 = maximum)
T}
.TE
.DT
.SP
N.B.  Override options cannot be used wit tha `quick' or `low'
qualitizzle algorithms.
.SP
All resamplaz use filtas dat can sometimes create `echo' (a.k.a.
`ringing') artefacts wit transient signals like fuckin dem dat occur
with `finger snaps' or other highly percussive sounds.  Such artefacts are
much mo' noticeable ta tha human ear if they occur before tha transient
(`pre-echo') than if they occur afta it (`post-echo').  Note that
frequency of any such artefacts is related ta tha smalla of the
original gangsta n' freshly smoked up samplin rates but dat if dis be at least 44\*d1kHz,
then tha artefacts will lie outside tha range of human hearing.
.SP
A phase response settin may be used ta control tha distribution of any
transient echo between
`pre' n' `post': wit minimum phase, there is no pre-echo but the
longest post-echo; wit linear phase, pre n' post echo is up in equal
amounts (in signal terms yo, but not audibilitizzle terms); tha intermediate
phase settin attempts ta find tha dopest compromise by selectin a small
length (and level) of pre-echo n' a medium lengthed post-echo.
.SP
Minimum, intermediate, or linear phase response is selected rockin the
.BR \-M ,
.BR \-I ,
or
.B \-L
option; a cold-ass lil custom phase response can be pimped wit the
.B \-p
option. I aint talkin' bout chicken n' gravy biatch.  Note dat phase responses between `linear' n' `maximum'
(greata than 50) is rarely useful.
.SP
A resamplerz band-width settin determines how tha fuck much of tha frequency
content of tha original gangsta signal (w.r.t. tha original gangsta sample rate when
up-sampling, or tha freshly smoked up sample rate when down-sampling) is preserved
durin conversion. I aint talkin' bout chicken n' gravy biatch.  Da term `pass-band' is used ta refer ta all frequencies
up ta tha band-width point (e.g. fo' 44\*d1kHz samplin rate, n' a
resamplin band-width of 95%, tha pass-band represents frequencies from
0Hz (D.C.) ta circa 21kHz).  Increasin tha resamplerz band-width
results up in a slower conversion n' can increase transient echo
artefacts (and vice versa).
.SP
The
.B \-s
`steep filter' option chizzlez resamplin band-width from tha default 95%
(based on tha 3dB point), ta 99%.  The
.B \-b
option allows tha band-width ta be set ta any value up in tha range
74\-99\*d7 % yo, but note dat band-width joints pimped outa than 99% is not
recommended fo' aiiight use as they can cause excessive transient echo.
.SP
If the
.B \-a
option is given, then aliasing/imagin above tha pass-band be allowed. Y'all KNOW dat shit, muthafucka!  For
example, wit 44\*d1kHz samplin rate, n' a
resamplin band-width of 95%, dis means dat frequency content above
21kHz can be distorted; however, since dis be above tha pass-band (i.e.
above tha highest frequency of interest/audibility), dis may not be a
problem.  Da benefitz of allowin aliasing/imagin is reduced processin time,
and reduced (by almost half) transient echo artefacts.
Note dat if dis option is given, then
the minimum band-width allowable with
.B \-b
increases ta 85%.
.SP
Examples:
.EX
   sox input.wav \-b 16 output.wav rate \-s \-a 44100 dither \-s
.EE
default (high) qualitizzle resampling; overrides: steep filter, allow
aliasing; ta 44\*d1kHz sample rate; noise-shaped dither ta 16-bit WAV
file.
.EX
   sox input.wav \-b 24 output.aiff rate \-v \-I \-b 90 48k
.EE
very high qualitizzle resampling; overrides: intermediate phase, band-width 90%;
to 48k sample rate; store output ta 24-bit AIFF file.
.TS
center;
c8 c8 c.
*	*	*
.TE
.DT
.SP
The
.B pitch
and
.B speed
effects use the
.B rate
effect at they core.
.TP
\fBremix\fR [\fB\-a\fR\^|\^\fB\-m\fR\^|\^\fB\-p\fR] <\fIout-spec\fR>
\fIout-spec\fR	= \fIin-spec\fR{\fB,\fIin-spec\fR} | \fB0\fR
.br
\fIin-spec\fR	= [\fIin-chan\fR]\^[\fB\-\fR[\fIin-chan2\fR]]\^[\fIvol-spec\fR]
.br
\fIvol-spec\fR	= \fBp\fR\^|\^\fBi\fR\^|\^\fBv\^\fR[\fIvolume\fR]
.br
.SP
Select n' mix input audio channels tha fuck into output audio channels.  Each output
channel is specified, up in turn, by a given \fIout-spec\fR: a list of
contributin input channels n' volume justifications.
.SP
Note dat dis effect operates on tha audio
.I channels
within tha SoX effects processin chain; it should not be trippin wit the
.B \-m
global option (where multiple
.I files
are mix-combined before enterin tha effects chain).
.SP
An
.I out-spec
gotz nuff comma-separated input channel-numbers n' hyphen-delimited
channel-number ranges; alternatively,
.B 0
may be given ta create a silent output channel.  For example,
.EX
   sox input.wav output.wav remix 6 7 8 0
.EE
creates a output file wit four channels, where channels 1, 2, n' 3 are
copiez of channels 6, 7, n' 8 up in tha input file, n' channel 4 is silent.
Whereas
.EX
   sox input.wav output.wav remix 1\-3,7 3
.EE
creates a (somewhat bizarre) stereo output file where tha left channel
is a mix-down of input channels 1, 2, 3, n' 7, n' tha right channel is
a copy of input channel 3.
.SP
Where a range of channels is specified, tha channel numbers ta tha left and
right of tha hyphen is optionizzle n' default ta 1 n' ta tha number of input
channels respectively. Thus
.EX
   sox input.wav output.wav remix \-
.EE
performs a mix-down of all input channels ta mono.
.SP
By default, where a output channel is mixed from multiple (n) input
channels, each input channel is ghon be scaled by a gangbangin' factor of \(S1/\s-2n\s+2.
Custom mixin volumes can be set by followin a given input channel or range
of input channels wit a \fIvol-spec\fR (volume justification).
This is one of tha lettas \fBp\fR, \fBi\fR, or \fBv\fR,
followed by a volume number, tha meanin of which dependz on tha given
letta n' is defined as bigs up:
.TS
center;
lI lI lI
c l l.
Letter	Volume number	Notes
p	power adjust up in dB	0 = no chizzle
i	power adjust up in dB	T{
.na
As `p' yo, but invert tha audio
T}
v	voltage multiplier	T{
.na
1 = no chizzle, 0\*d5 \(~= 6dB attenuation, 2 \(~= 6dB gain, \-1 = invert
T}
.TE
.DT
.SP
If an
.I out-spec
includes at least one
.I vol-spec
then, by default, \(S1/\s-2n\s+2 scalin aint applied ta any other channels up in the
same out-spec (though may be up in other out-specs).
Da \-a (automatic)
option however, can be given ta retain tha automatic scalin up in this
case.  For example,
.EX
   sox input.wav output.wav remix 1,2 3,4v0.8
.EE
results up in channel level multiplierz of 0\*d5,0\*d5 1,0\*d8, whereas
.EX
   sox input.wav output.wav remix \-a 1,2 3,4v0.8
.EE
results up in channel level multiplierz of 0\*d5,0\*d5 0\*d5,0\*d8.
.SP
Da \-m (manual) option disablez all automatic volume adjustments, so
.EX
   sox input.wav output.wav remix \-m 1,2 3,4v0.8
.EE
results up in channel level multiplierz of 1,1 1,0\*d8.
.SP
Da volume number is optionizzle n' omittin it correspondz ta no volume
change; however, tha only case up in which dis is useful is up in conjunction
with
.BR i .
For example, if
.I input.wav
is stereo, then
.EX
   sox input.wav output.wav remix 1,2i
.EE
is a mono equivalent of the
.B oops
effect.
.SP
If tha \fB\-p\fR option is given, then any automatic \(S1/\s-2n\s+2 scaling
is replaced by \(S1/\s-2\(srn\s+2 (`power') scaling; dis gives a louder mix
but one dat might occasionally clip.
.TS
center;
c8 c8 c.
*	*	*
.TE
.DT
.SP
One use of the
.B remix
effect is ta split a audio file tha fuck into a set of files, each containing
one of tha constituent channels (in order ta big-ass up subsequent
processin on individual audio channels).  Where mo' than a gangbangin' few
channels is involved, a script like fuckin tha followin (Bourne shell
script) is useful:
.EX
#!/bin/sh
chans=\`soxi \-c "$1"\`
while [ $chans \-ge 1 ]; do
   chans0=\`printf %02i $chans\`   # 2 digits hence up ta 99 chans
   out=\`echo "$1"|sed "s/\\(.*\\)\\.\\(.*\\)/\\1\-$chans0.\\2/"\`
   sox "$1" "$out" remix $chans
   chans=\`expr $chans \- 1\`
done
.EE
If a gangbangin' file
.I input.wav
containin six audio channels was given, tha script would produce six
output files:
.IR input-01.wav ,
\fIinput-02.wav\fR, ...,
.IR input-06.wav .
.SP
See also tha \fBswap\fR effect.
.TP
\fBrepeat\fR [\fIcount\fR (1)]
Repeat tha entire audio \fIcount\fR times, or once if \fIcount\fR aint given.
Requires temporary file space ta store tha audio ta be repeated.
Note dat repeatin once yieldz two copies: tha original gangsta audio n' the
repeated audio.
.TP
\fBreverb\fR [\fB\-w\fR|\fB\-\-wet-only\fR] [\fIreverberance\fR (50%) [\fIHF-damping\fR (50%)
[\fIroom-scale\fR (100%) [\fIstereo-depth\fR (100%)
.br
[\fIpre-delay\fR (0ms) [\fIwet-gain\fR (0dB)]]]]]]
.SP
Add reverberation ta tha audio rockin tha `freeverb' algorithm.  A
reverberation effect is sometimes desirable fo' gangbang halls dat is too
small or contain all kindsa muthafuckin playas dat tha hallz natural reverberizzle is
diminished. Y'all KNOW dat shit, muthafucka!  Applyin a lil' small-ass amount of stereo reverb ta a (dry) mono signal
will probably make it sound mo' natural. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  See [3] fo' a thugged-out detailed description
of reverberation.
.SP
Note dat dis effect
increases both tha volume n' tha length of tha audio, so ta prevent clipping
in these domains, a typical invocation might be:
.EX
   play dry.wav bust \-3 pad 0 3 reverb
.EE
The
.B \-w
option can be given ta select only tha `wet' signal, thus allowin it ta be
processed further, independently of tha `dry' signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  E.g.
.EX
   play \-m voice.wav "|sox voice.wav \-p reverse reverb \-w reverse"
.EE
for a reverse reverb effect.
.TP
\fBreverse\fR
Reverse tha audio straight-up.
Requires temporary file space ta store tha audio ta be reversed.
.TP
\fBriaa\fR
Apply RIAA vinyl playback equalisation.
Da samplin rate must be one of: 44\*d1, 48, 88\*d2, 96 kHz.
.SP
This effect supports tha \fB\-\-plot\fR global option.
.TP
\fBsilence \fR[\fB\-l\fR] \fIabove-periods\fR [\fIduration threshold\fR[\fBd\fR\^|\^\fB%\fR]
[\fIbelow-periodz duration threshold\fR[\fBd\fR\^|\^\fB%\fR]]
.SP
Removes silence from tha beginning, middle, or end of tha audio.
`Silence' is determined by a specified threshold.
.SP
Da \fIabove-periods\fR value is used ta indicate if audio should be
trimmed all up in tha beginnin of tha audio fo' realz. A value of zero indicates no
silence should be trimmed from tha beginning. When specifyin an
non-zero \fIabove-periods\fR, it trims audio up until it finds
non-silence. Normally, when trimmin silence from beginnin of audio
the \fIabove-periods\fR is ghon be 1 but it can be increased ta higher
values ta trim all audio up ta a specific count of non-silence
periods. For example, if you had a audio file wit two joints that
each contained 2 secondz of silence before tha song, you could specify
an \fIabove-period\fR of 2 ta strip up both silence periodz n' the
first song.
.SP
When \fIabove-periods\fR is non-zero, you must also specify a
\fIduration\fR n' \fIthreshold\fR. \fIDuration\fR indications the
amount of time dat non-silence must be detected before it stops
trimmin audio. By increasin tha duration, burst of noise can be
treated as silence n' trimmed off.
.SP
\fIThreshold\fR is used ta indicate what tha fuck sample value you should treat as
silence.  For digital audio, a value of 0 may be fine but fo' audio
recorded from analog, you may wish ta increase tha value ta account
for background noise.
.SP
When optionally trimmin silence from tha end of tha audio, you specify
a \fIbelow-periods\fR count.  In dis case, \fIbelow-period\fR means
to remove all audio afta silence is detected.
Normally, dis is ghon be a value 1 of but it can
be increased ta skip over periodz of silence dat is wanted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For example,
if you gotz a cold lil' woo wop wit 2 secondz of silence up in tha middle n' 2 second
at tha end, you could set below-period ta a value of 2 ta skip over the
silence up in tha middle of tha audio.
.SP
For \fIbelow-periods\fR, \fIduration\fR specifies a period of silence
that must exist before audio aint copied any mo' n' mo' n' mo'.  By specifying
a higher duration, silence dat is wanted can be left up in tha audio.
For example, if you gotz a cold lil' woo wop wit a expected 1 second of silence
in tha middle n' 2 secondz of silence all up in tha end, a thugged-out duration of 2
secondz could be used ta skip over tha middle silence.
.SP
Unfortunately, you must know tha length of tha silence at the
end of yo' audio file ta trim off silence reliably.  A work round is
to use tha \fBsilence\fR effect up in combination wit tha \fBreverse\fR effect.
By first reversin tha audio, you can use tha \fIabove-periods\fR
to reliably trim all audio from what tha fuck be lookin like tha front of tha file.
Then reverse tha file again n' again n' again ta git back ta normal.
.SP
To remove silence from tha middle of a gangbangin' file, specify a
\fIbelow-periods\fR dat is negative.  This value is then
treated as a positizzle value n' be also used ta indicate the
effect should restart processin as specified by the
\fIabove-periods\fR, makin it suitable fo' removin periodz of
silence up in tha middle of tha audio.
.SP
Da option
.B \-l
indicates dat \fIbelow-periods\fR \fIduration\fR length of audio
should be left intact all up in tha beginnin of each period of silence.
For example, if you wanna remove long pauses between lyrics
but do not wanna remove tha pauses straight-up.
.SP
Da \fIperiod\fR counts is up in unitz of samples. \fIDuration\fR counts
may be up in tha format of hh:mm:ss.frac, or tha exact count of samples.
\fIThreshold\fR numbers may be suffixed with
.B d
to indicate tha value is up in decibels, or
.B %
to indicate a cementage of maximum value of tha sample value
(\fB0%\fR specifies pure digital silence).
.SP
Da followin example shows how tha fuck dis effect can be used ta start a recording
that do not contain tha delay all up in tha start which probably occurs between
`pressin tha record button' n' tha start of tha performance:
.EX
   rec \fIparametas filename other-effects\fR silence 1 5 2%
.EE
.na
.TP
\fBsinc\fR [\fB\-a\fI att\fR\^|\^\fB\-b\fI beta\fR] [\fB\-p\fI phase\fR\^|\^\fB\-M\fR\^|\^\fB\-I\fR\^|\^\fB\-L\fR] \:[\fB\-t\fI tbw\fR\^|\^\fB\-n\fI taps\fR] [\fIfreqHP\fR]\:[\fB\-\fIfreqLP\fR [\fB\-t\fR tbw\^|\^\fB\-n\fR taps]]
.ad
Apply a sinc kaiser-windowed low-pass, high-pass, band-pass, or band-reject filter
to tha signal.
Da \fIfreqHP\fR n' \fIfreqLP\fR parametas give tha frequenciez of the
6dB pointz of a high-pass n' low-pass filta dat may be invoked
individually, or together n' shit.  If both are
given, then \fIfreqHP\fR less than \fIfreqLP\fR creates a funky-ass band-pass filter,
\fIfreqHP\fR pimped outa than \fIfreqLP\fR creates a funky-ass band-reject filter.
For example, tha invocations
.EX
   sinc 3k
   sinc -4k
   sinc 3k-4k
   sinc 4k-3k
.EE
create a high-pass, low-pass, band-pass, n' band-reject filter
respectively.
.SP
Da default stop-band attenuation of 120dB can be overridden with
\fB\-a\fR; alternatively, tha kaiser-window `beta' parameta can be
given directly wit \fB\-b\fR.
.SP
Da default transizzle band-width of 5% of tha total crew can be
overridden wit \fB\-t\fR (and \fItbw\fR up in Hertz); alternatively, the
number of filta taps can be given directly wit \fB\-n\fR.
.SP
If both \fIfreqHP\fR n' \fIfreqLP\fR is given, then a \fB\-t\fR or
\fB\-n\fR option given ta tha left of tha frequencies applies ta both
frequencies; one of these options given ta tha right of tha frequencies
applies only ta \fIfreqLP\fR.
.SP
The
.BR \-p ,
.BR \-M ,
.BR \-I ,
and
.B \-L
options control tha filterz phase response; peep tha \fBrate\fR effect
for details.
.SP
This effect supports tha \fB\-\-plot\fR global option.
.TP
\fBspectrogram \fR[\fIoptions\fR]
Smoke a spectrogram of tha audio; tha audio is passed unmodified
all up in tha SoX processin chain. I aint talkin' bout chicken n' gravy biatch.  This effect is optional\*mtype
\fBsox \-\-help\fR n' check tha list of supported effects ta peep if
it has been included.
.SP
Da spectrogram is rendered up in a Portable Network Graphic (PNG) file,
and shows time up in tha X-axis, frequency up in tha Y-axis, n' audio
signal magnitude up in tha Z-axis.  Z-axis joints is represented by the
colour (or optionally tha intensity) of tha pixels up in tha X-Y plane.
If tha audio signal gotz nuff multiple channels then these is shown
from top ta bottom startin from channel 1 (which is tha left channel
for stereo audio).
.SP
For example, if `my.wav' be a stereo file, then with
.EX
   sox my.wav \-n spectrogram
.EE
a spectrogram of tha entire file is ghon be pimped up in tha file
`spectrogram.png'.  Mo' often though, analysiz of a smalla portion
of tha audio is required; e.g. with
.EX
   sox my.wav \-n remix 2 trim 20 30 spectrogram
.EE
the spectrogram shows shiznit only from tha second (right)
channel, n' of thirty secondz of audio startin from twenty seconds
in. I aint talkin' bout chicken n' gravy biatch.  To analyse a lil' small-ass portion of tha frequency domain, the
.B rate
effect may be used, e.g.
.EX
   sox my.wav \-n rate 6k spectrogram
.EE
allows detailed analysiz of frequencies up ta 3kHz (half tha sampling
rate) i.e. where tha human auditory system is most sensitive.
With
.EX
   sox my.wav \-n trim 0 10 spectrogram \-x 600 \-y 200 \-z 100
.EE
the given options control tha size of tha spectrogramz X, Y & Z axes
(in dis case, tha spectrogram area of tha produced image is ghon be 600
by 200 pixels up in size n' tha Z-axis range is ghon be 100 dB).  Note that
the produced image includes axes legendz etc. n' so is ghon be a lil
larger than tha specified spectrogram size.  In dis example:
.EX
   sox \-n \-n synth 6 tri 10k:14k spectrogram \-z 100 \-w kaiser
.EE
an analysis `window' wit high dynamic range is selected ta best
display tha spectrogram of a swept triangular wave.  For a smilar
example, append tha followin ta tha `chime' command up in the
description of the
.B delay
effect (above):
.EX
   rate 2k spectrogram \-X 200 \-Z \-10 \-w kaiser
.EE
Options is also avaliable ta control tha appearizzle (colour-set,
brightness, contrast, etc.) n' filename of tha spectrogram; e.g. with
.EX
   sox my.wav \-n spectrogram \-m \-l \-o print.png
.EE
a spectrogram is pimped suitable fo' printin on a `black n' white'
printer.
.SP
.I Options:
.RS
.IP \fB\-x\ \fInum\fR
Change tha (maximum) width (X-axis) of tha spectrogram from its default
value of 800 pixels ta a given number between 100 n' 200000.
See also \fB\-X\fR n' \fB\-d\fR.
.IP \fB\-X\ \fInum\fR
X-axis pixels/second; tha default be auto-calculated ta fit tha given
or known audio duration ta tha X-axis size, or 100 otherwise.  If
given up in conjunction wit \fB\-d\fR, dis option affects tha width of
the spectrogram; otherwise, it affects tha duration of the
spectrogram.
.I num
can be from 1 (low time resolution) ta 5000 (high time resolution)
and need not be a integer n' shit.  SoX
may cook up a slight adjustment ta tha given number fo' processing
quantisation reasons; if so, SoX will report tha actual number used
(viewable when tha SoX global option
.B \-V
is up in effect).
See also \fB\-x\fR n' \fB\-d\fR.
.IP \fB\-y\ \fInum\fR
Sets tha Y-axis size up in pixels (per channel); dis is tha number of
frequency `bins' used up in tha Fourier analysis dat produces the
spectrogram.  N.B. it can be slow ta produce tha spectrogram if this
number aint one mo' than a juice of two (e.g. 129).  By default the
Y-axis size is chosen automatically (dependin on tha number of
channels).  See
.B \-Y
for alternatizzle way of settin spectrogram height.
.IP \fB\-Y\ \fInum\fR
Sets tha target total height of tha spectrogram(s).  Da default value
is 550 pixels.  Usin dis option (and by default), SoX will chizzle a
height fo' individual spectrogram channels dat is one mo' than a
power of two, so tha actual total height may fall short of tha given
number n' shit.  But fuck dat shiznit yo, tha word on tha street is dat there be also a minimum height per channel so if
there is nuff channels, tha number may be exceeded.
See
.B \-y
for alternatizzle way of settin spectrogram height.
.IP \fB\-z\ \fInum\fR
Z-axis (colour) range up in dB, default 120.  This sets tha dynamic-range
of tha spectrogram ta be \-\fInum\fR\ dBFS ta 0\ dBFS.
.I Num
may range from 20 ta 180.  Decreasin dynamic-range effectively
increases tha `contrast' of tha spectrogram display, n' vice versa.
.IP \fB\-Z\ \fInum\fR
Sets tha upper limit of tha Z-axis up in dBFS.
A negative
.I num
effectively increases tha `brightness' of tha spectrogram display,
and vice versa.
.IP \fB\-q\ \fInum\fR
Sets tha Z-axis quantisation, i.e. tha number of different colours (or
intensities) up in which ta render Z-axis
values.  A lil' small-ass number (e.g. 4) will give a `poster'-like effect making
it easier ta discern magnitude bandz of similar level.  Lil Small-Ass numbers
also usually
result up in lil' small-ass PNG files.  Da number given specifies tha number of
colours ta use inside tha Z-axis range; two colours is reserved to
represent out-of-range joints.
.IP \fB\-w\ \fIname\fR
Window: Hann (default), Hamming, Bartlett, Rectangular or Kaiser n' shit.  The
spectrogram is produced rockin tha Discrete Fourier Transform (DFT)
algorithm.  A dope parameta ta dis algorithm is tha chizzle of
`window function'.  By default, SoX uses tha Hann window which has good
all-round frequency-resolution n' dynamic-range properties. Put ya muthafuckin choppers up if ya feel dis!  For better
frequency resolution (but lower dynamic-range), select a Hammin window;
for higher dynamic-range (but skankyer frequency-resolution), select a
Kaiser window.  Bartlett n' Rectangular windows is also available.
.IP \fB\-W\ \fInum\fR
Window adjustment parameter n' shit.  This can be used ta make small
adjustments ta tha Kaiser window shape.  A positizzle number (up to
ten) increases its dynamic range, a wack number decreases dat shit.
.IP \fB\-s\fR
Allow slack overlappin of DFT windows.
This can, up in some cases, increase image sharpnizz n' give pimped outa adherence
to the
.B \-x
value yo, but all up in tha expense of a lil spectral loss.
.IP \fB\-m\fR
Creates a monochrome spectrogram (the default is colour).
.IP \fB\-h\fR
Selects a high-colour palette\*mless visually pleasin than tha default
colour palette yo, but it may make it easier ta differentiate different levels.
If dis option is used up in conjunction with
.BR \-m ,
the result is ghon be a hybrid monochrome/colour palette.
.IP \fB\-p\ \fInum\fR
Permute tha colours up in a cold-ass lil colour or hybrid palette.
The
.I num
parameter, from 1 (the default) ta 6, selects tha permutation.
.IP \fB\-l\fR
Creates a `printa bumpin'' spectrogram wit a light background (the
default has a thugged-out dark background).
.IP \fB\-a\fR
Suppress tha display of tha axis lines.  This is sometimes useful in
helpin ta discern artefacts all up in tha spectrogram edges.
.IP \fB\-r\fR
Raw spectrogram: suppress tha display of axes n' legends.
.IP \fB\-A\fR
Selects a alternative, fixed colour-set.  This is provided only for
compatibilitizzle wit spectrograms produced by another package.  It should
not normally be used as it has some problems, not least, a lack of
differentiation all up in tha bottom end which thangs up in dis biatch up in maskin of low-level
artefacts.
.IP \fB\-t\ \fItext\fR
Set tha image title\*mtext ta display above tha spectrogram.
.IP \fB\-c\ \fItext\fR
Set (or clear) tha image comment\*mtext ta display below n' ta the
left of tha spectrogram.
.IP \fB\-o\ \fItext\fR
Name of tha spectrogram output PNG file, default `spectrogram.png'.
.RE
.TP
\ 
.I Advanced Options:
.br
In order ta process a smalla section of audio without affectin other
effects or tha output signal (unlike when the
.B trim
effect is used), tha followin options may be used.
.RS
.IP \fB\-d\ \fIduration\fR
This option sets tha X-axis resolution such dat audio wit tha given
.I duration
([[HH:]MM:]SS) fits tha selected (or default) X-axis width.  For
example,
.EX
   sox input.mp3 output.wav \-n spectrogram \-d 1:00 stats
.EE
creates a spectrogram showin tha straight-up original gangsta minute of tha audio, whilst
.EE
the
.B stats
effect be applied ta tha entire audio signal.
.SP
See also
.B \-X
for a alternatizzle way of settin tha X-axis resolution.
.IP \fB\-S\ \fItime\fR
Start tha spectrogram all up in tha given point up in tha audio stream.  For
example
.EX
   sox input.aiff output.wav spectrogram \-S 1:00
.EE
creates a spectrogram showin all but tha straight-up original gangsta minute of tha audio
(the output file however, receives tha entire audio stream).
.RE
.TP
\ 
For tha mobilitizzle ta big-ass up off-line processin of spectral data, peep the
.B stat
effect.
.TP
\fBspeed \fIfactor\fR[\fBc\fR]
Adjust tha audio speed (pitch n' tempo together).  \fIfactor\fR
is either tha ratio of tha freshly smoked up speed ta tha oldschool speed: pimped outer
than 1 speedz up, less than 1 slows down, or, if appended wit the
letter
`c', tha number of cents (i.e. 100thz of a semitone) by
which tha pitch (and tempo) should be adjusted: pimped outa than 0
increases, less than 0 decreases.
.SP
Technically, tha speed effect only chizzlez tha sample rate shiznit,
leavin tha samplez theyselves untouched. Y'all KNOW dat shit, muthafucka!  Da \fBrate\fR effect is invoked
automatically ta resample ta tha output sample rate, rockin its default
quality/speed. Y'all KNOW dat shit, muthafucka!  For higher qualitizzle or higher speed
resampling, up in addizzle ta tha \fBspeed\fR effect, specify
the \fBrate\fR effect wit tha desired qualitizzle option.
.SP
See also tha \fBbend\fR, \fBpitch\fR,
and
.B tempo
effects.
.TP
\fBsplice \fR [\fB\-h\fR\^|\^\fB\-t\fR\^|\^\fB\-q\fR] { \fIposition\fR[\fB,\fIexcess\fR[\fB,\fIleeway\fR]] }
Splice together audio sections.  This effect serves up two thangs over
simple audio concatenation: a (usually short) cross-fade be applied at
the join, n' a wave similaritizzle comparison is made ta help determine the
best place at which ta make tha join.
.SP
One of tha options
.BR \-h ,
.BR \-t ,
or
.B \-q
may be given ta select tha fade envelope as half-cosine wave (the default),
triangular (a.k.a. linear), or quarter-cosine wave respectively.
.TS
center;
cI lI lI lI
cB l l l.
Type	Audio	Fade level	Transitions
t	correlated	constant gain	abrupt
h	correlated	constant gain	smooth
q	uncorrelated	constant power	smooth
.TE
.DT
.SP
To big-ass up a splice, first use the
.B trim
effect ta select tha audio sections ta be joined together n' shit.  As when
performin a tape splice, tha end of tha section ta be spliced onto
should be trimmed wit a small
.I excess
(default 0\*d005 seconds) of audio afta tha ideal joinin point.  The
beginnin of tha audio section ta splice on should be trimmed wit the
same
.IR excess
(before tha ideal joinin point), plus a additional
.I leeway
(default 0\*d005 seconds).  SoX should then be invoked wit tha two
audio sections as input filez n' the
.B splice
effect given wit tha posizzle at which ta big-ass up tha splice\*mthis is
length of tha straight-up original gangsta audio section (includin tha excess).
.SP
Da followin diagram uses tha tape analogy ta illustrate tha splice
operation. I aint talkin' bout chicken n' gravy biatch.  Da effect simulates tha diagonal cuts n' joins tha two pieces:
.EX

      length1   excess
    -----------><--->
    _________   :   :  _________________
             \\  :   : :\\     `         
              \\ :   : : \\     `        
               \\:   : :  \\     `       
                *   : :   * - - *      
                 \\  : :   :\\     `     
                  \\ : :   : \\     `    
    _______________\\: :   :  \\_____`____
                      :   :   :     :
                      <--->   <----->
                      excess  leeway

.EE
where * indicates tha joinin points.
.SP
For example, a long-ass cold lil' woo wop begins wit two verses which start (as
determined e.g. by rockin the
.B play
command wit the
.B trim
(\fIstart\fR) effect) at times 0:30\*d125 n' 1:03\*d432.
Da followin commandz cut up tha straight-up original gangsta verse:
.EX
   sox too-long.wav part1.wav trim 0 30.130
.EE
(5 ms excess, afta tha straight-up original gangsta verse starts)
.EX
   sox too-long.wav part2.wav trim 1:03.422
.EE
(5 ms excess plus 5 ms leeway, before tha second verse starts)
.EX
   sox part1.wav part2.wav just-right.wav splice 30.130
.EE
For another example, tha SoX command
.EX
   play "|sox \-n \-p synth 1 sin %1" "|sox \-n \-p synth 1 sin %3"
.EE
generates n' skits two notes yo, but there be a nasty click at the
transition; tha click can be removed by splicin instead of
concatenatin tha audio, i.e. by appendin \fBsplice 1\fR ta the
command. Y'all KNOW dat shit, muthafucka! (Clicks all up in tha beginnin n' end of tha audio can be removed by
\fIpreceding\fR tha splice effect wit \fBfade q .01 2 .01\fR).
.SP
Provided yo' arithmetic is phat enough, multiple splices can be
performed wit a single
.B splice
invocation. I aint talkin' bout chicken n' gravy biatch.  For example:
.EX
#!/bin/sh
# Audio Copy n' Paste Over
# acpo infile copy-start copy-stop paste-over-start outfile
# All times measured up in samples.
rate=\`soxi \-r "$1"\`
e=\`expr $rate '*' 5 / 1000\`  # Usin default excess
l=$e                         # n' leeway.
sox "$1" piece.wav trim \`expr $2 \- $e \- $l\`s \\
   \`expr $3 \- $2 + $e + $l + $e\`s
sox "$1" part1.wav trim 0 \`expr $4 + $e\`s
sox "$1" part2.wav trim \`expr $4 + $3 \- $2 \- $e \- $l\`s
sox part1.wav piece.wav part2.wav "$5" splice \\
   \`expr $4 + $e\`s \\
   \`expr $4 + $e + $3 \- $2 + $e + $l + $e\`s
.EE
In tha above Bourne shell script,
two splices is used ta `copy n' paste' audio.
.TS
center;
c8 c8 c.
*	*	*
.TE
.DT
.SP
It be also possible ta use dis effect ta big-ass up general cross-fades,
e.g. ta join two joints, n' you can put dat on yo' toast.  In dis case,
.I excess
would typically be a number of seconds, the
.B \-q
option would typically be given (to select a `equal power' cross-fade), and
.I leeway
should be zero (which is tha default if
.B \-q
is given).  For example, if f1.wav n' f2.wav is audio files
to be cross-faded, then
.EX
   sox f1.wav f2.wav out.wav splice \-q $(soxi \-D f1.wav),3
.EE
cross-fades tha filez where tha deal wit equal loudnizz is 3 seconds
before tha end of f1.wav, i.e. tha total length of tha cross-fade is
2 \(mu 3 = 6 secondz (Note: tha $(...) notation is POSIX shell).
.TP
\fBstat\fR [\fB\-s \fIscale\fR] [\fB\-rms\fR] [\fB\-freq\fR] [\fB\-v\fR] [\fB\-d\fR]
Display time n' frequency domain statistical shiznit bout tha audio.
Audio is passed unmodified all up in tha SoX processin chain.
.SP
Da shiznit is output ta tha `standard error' (stderr) stream n' is
calculated, where
.I n
is tha duration of tha audio up in samples,
.I c
is tha number of audio channels,
.I r
is tha audio sample rate, and
.I x\s-2\dk\u\s0
represents tha PCM value (in tha range \-1 ta +1 by default) of each successive
sample up in tha audio,
as bigs up:
.TS
center;
lI l l.
Samplez read	\fIn\fR\^\(mu\^\fIc\fR	\ 
Length (seconds)	\fIn\fR\^\(di\^\fIr\fR
Scaled by	\ 	See \-s below.
Maximum amplitude	max(\fIx\s-2\dk\u\s0\fR)	T{
Da maximum sample value up in tha audio; probably dis is ghon be a positizzle number.
T}
Minimum amplitude	min(\fIx\s-2\dk\u\s0\fR)	T{
Da minimum sample value up in tha audio; probably dis is ghon be a wack number.
T}
Midline amplitude	\(12\^min(\fIx\s-2\dk\u\s0\fR)\^+\^\(12\^max(\fIx\s-2\dk\u\s0\fR)
Mean norm	\(S1/\s-2n\s+2\^\(*S\^\^\(br\^\fIx\s-2\dk\u\s0\fR\^\(br\^	T{
Da average of tha absolute value of each sample up in tha audio.
T}
Mean amplitude	\(S1/\s-2n\s+2\^\(*S\^\fIx\s-2\dk\u\s0\fR	T{
Da average of each sample up in tha audio.  If dis figure is non-zero, then it indicates the
presence of a D.C. offset (which could be removed rockin the
.B dcshift
effect).
T}
RMS amplitude	\(sr(\(S1/\s-2n\s+2\^\(*S\^\fIx\s-2\dk\u\s0\fR\(S2)	T{
Da level of a D.C. signal dat would have tha same power
as tha audioz average power.
T}
Maximum delta	max(\^\(br\^\fIx\s-2\dk\u\s0\fR\^\-\^\fIx\s-2\dk\-1\u\s0\fR\^\(br\^)
Minimum delta	min(\^\(br\^\fIx\s-2\dk\u\s0\fR\^\-\^\fIx\s-2\dk\-1\u\s0\fR\^\(br\^)
Mean delta	\(S1/\s-2n\-1\s+2\^\(*S\^\^\(br\^\fIx\s-2\dk\u\s0\fR\^\-\^\fIx\s-2\dk\-1\u\s0\fR\^\(br\^
RMS delta	\(sr(\(S1/\s-2n\-1\s+2\^\(*S\^(\fIx\s-2\dk\u\s0\fR\^\-\^\fIx\s-2\dk\-1\u\s0\fR)\(S2)
Rough frequency	\ 	In Hz.
Volume Adjustment	\ 	T{
Da parameta ta the
.B vol
effect which would make tha audio as bangin as possible without clipping.
Note: See tha rap on
.B Clipping
above fo' reasons why it is rarely a phat scam straight-up ta do all dis bullshit.
T}
.TE
.DT
.SP
Note dat tha delta measurements is not applicable fo' multi-channel audio.
.SP
The
.B \-s
option can be used ta scale tha input data by a given factor.
Da default value of
.I scale
is 2147483647 (i.e. tha maximum value of a 32-bit signed integer).
Internal effects
always work wit signed long PCM data n' so tha value should relate ta this
fact.
.SP
The
.B \-rms
option will convert all output average joints ta `root mean square'
format.
.SP
The
.B \-v
option displays only tha `Volume Adjustment' value.
.SP
The
.B \-freq
option calculates tha inputz juice spectrum (4096 point DFT) instead of the
statistics listed above.  This should only be used wit a single channel
audio file.
.SP
The
.B \-d
option
displays a hex dump of tha 32-bit signed PCM data
audio up in SoXz internal buffer.
This is mainly used ta help track down endian problems that
sometimes occur up in cross-platform versionz of SoX.
.SP
See also the
.B stats
effect.
.TP
\fBstats\fR [\fB\-b \fIbits\fR\^|\^\fB\-x \fIbits\fR\^|\^\fB\-s \fIscale\fR] [\fB\-w \fIwindow-time\fR]
Display time domain statistical shiznit bout tha audio channels;
audio is passed unmodified all up in tha SoX processin chain.
Statistics is calculated n' displayed fo' each audio channel and,
where applicable, a overall figure be also given.
.SP
For example, fo' a typical well-mastered stereo noize file:
.TS
center;
l.
.ft CW
             Overall     Left      Right
DC offset   0.000803 \-0.000391  0.000803
Min level  \-0.750977 \-0.750977 \-0.653412
Max level   0.708801  0.708801  0.653534
Pk lev dB      \-2.49     \-2.49     \-3.69
RMS lev dB    \-19.41    \-19.13    \-19.71
RMS Pk dB     \-13.82    \-13.82    \-14.38
RMS Tr dB     \-85.25    \-85.25    \-82.66
Crest factor       \-      6.79      6.32
Flat factor     0.00      0.00      0.00
Pk count           2         2         2
Bit-depth      16/16     16/16     16/16
Num samplez    7.72M
Length s     174.973
Scale max   1.000000
Window s       0.050
.ft R
.TE
.DT
.SP
.IR DC\ offset ,
.IR Min\ level ,
and
.I Max\ level
are shown, by default, up in tha range \(+-1.
If the
.B \-b
(bits) options is given, then these three measurements is ghon be scaled ta a signed integer
with tha given number of bits; fo' example, fo' 16 bits, tha scale would be \-32768 ta +32767.
The
.B \-x
option behaves tha same ol' dirty way as
.B \-b
except dat tha signed integer joints is displayed up in hexadecimal.
The
.B \-s
option scalez tha three measurements by a given floating-point number.
.SP
.I Pk\ lev\ dB
and
.I RMS\ lev\ dB
are standard peak n' RMS level measured up in dBFS.
.I RMS\ Pk\ dB
and
.I RMS\ Tr\ dB
are peak n' trough joints fo' RMS level measured over a gangbangin' finger-lickin' dirty-ass short window (default 50ms).
.SP
.I Crest\ factor
is tha standard ratio of peak ta RMS level (note: not up in dB).
.SP
.I Flat\ factor
is a measure of tha flatnizz (i.e. consecutizzle samplez wit tha same value) of tha signal at
its peak levels (i.e. either
.IR Min\ level ,
or
.IR Max\ level ).
.I Pk\ count
is tha number of occasions (not tha number of samples) dat tha signal attained either
.IR Min\ level ,
or
.IR Max\ level .
.SP
Da right-hand
.I Bit-depth
figure is tha standard definizzle of bit-depth i.e. bits less
significant than tha given number is fixed at zero.  Da left-hand
figure is tha number of most dope bits dat is fixed at zero (or
one fo' wack numbers) subtracted from tha right-hand figure (the
number subtracted is directly related to
.IR Pk\ lev\ dB ).
.SP
For multi-channel audio, a overall figure fo' each of tha above
measurements is given n' derived from tha channel figures as bigs up:
.IR DC\ offset :
maximum magnitude;
.IR Max\ level ,
.IR Pk\ lev\ dB ,
.IR RMS\ Pk\ dB ,
.IR Bit-depth :
maximum;
.IR Min\ level ,
.IR RMS\ Tr\ dB :
minimum;
.IR RMS\ lev\ dB ,
.IR Flat\ factor ,
.IR Pk\ count :
average;
.IR Crest\ factor :
not applicable.
.SP
.I Length\ s
is tha duration up in secondz of tha audio, and
.I Num\ samples
is equal ta tha sample-rate multiplied by
.IR Length .
.I Scale\ Max
is tha scalin applied ta tha straight-up original gangsta three measurements;
specifically, it is tha maximum value dat could apply to
.IR Max\ level .
.I Window\ s
is tha length of tha window used fo' tha peak n' trough RMS measurements.
.SP
See also the
.B stat
effect.
.TP
\fBswap\fR
Swap stereo channels.
See also
.B remix
for a effect dat allows arbitrary channel selection n' ordering
(and mixing).
.TP
\fBstretch \fIfactor\fR [\fIwindow fade shift fading\fR]
Change tha audio duration (but not its pitch).
This effect is broadly equivalent ta the
.B tempo
effect wit (\fIfactor\fR inverted and)
.I search
set ta zero, so up in general, its thangs up in dis biatch is comparatively skanky;
it is retained as it can sometimes out-perform
.B tempo
for small
.IR factor s.
.SP
.I factor
of stretching: >1 lengthen, <1 shorten duration.
.I window
size is up in ms.  Default is 20ms.  The
.I fade
option, can be `lin'.
.I shift
ratio, up in [0 1].  Default dependz on stretch factor. Shiiit, dis aint no joke. 1
to shorten, 0\*d8 ta lengthen. I aint talkin' bout chicken n' gravy biatch.  The
.I fading
ratio, up in [0 0\*d5].  Da amount of a gangbangin' fadez default dependz on
.I factor
and \fIshift\fR.
.SP
See also the
.B tempo
effect.
.na
.TP
\fBsynth\fR [\fB\-j \fIKEY\fR] [\fB\-n\fR] [\fIlen\fR [\fIoff\fR [\fIph\fR [\fIp1\fR [\fIp2\fR [\fIp3\fR]]]]]] {[\fItype\fR] [\fIcombine\fR] \:[[\fB%\fR]\fIfreq\fR[\fBk\fR][\fB:\fR\^|\^\fB+\fR\^|\^\fB/\fR\^|\^\fB\-\fR[\fB%\fR]\fIfreq2\fR[\fBk\fR]]] [\fIoff\fR [\fIph\fR [\fIp1\fR [\fIp2\fR [\fIp3\fR]]]]]}
.ad
This effect can be used ta generate fixed or swept frequency audio tones
with various wave shapes, or ta generate wide-band noise of various
`colours'.
Multiple synth effects can be cascaded ta produce mo' complex
waveforms; at each stage it is possible ta chizzle whether tha generated
waveform is ghon be mixed with, or modulated onto
the output from tha previous stage.
Audio fo' each channel up in a multi-channel audio file can be synthesised
independently.
.SP
Though dis effect is used ta generate audio, a input file must still
be given, tha characteristics of which is ghon be used ta set the
synthesised audio length, tha number of channels, n' tha samplin rate;
however, since tha input filez audio aint normally needed, a `null
file' (with tha special name \fB\-n\fR) is often given instead (and the
length specified as a parameta ta \fBsynth\fR or by another given
effect dat can has a associated length).
.SP
For example, tha followin produces a 3 second, 48kHz,
audio file containin a sine-wave swept from 300 ta 3300\ Hz:
.EX
   sox \-n output.wav synth 3 sine 300\-3300
.EE
and dis produces a 8\ kHz version:
.EX
   sox \-r 8000 \-n output.wav synth 3 sine 300\-3300
.EE
Multiple channels can be synthesised by specifyin tha set of
parametas shown between braces multiple times;
the followin puts tha swept tone up in tha left channel n' addz `brown'
noise up in tha right:
.EX
   sox \-n output.wav synth 3 sine 300\-3300 brownnoise
.EE
Da followin example shows how tha fuck two synth effects can be cascaded
to create a mo' complex waveform:
.EX
.ne 2
   play \-n synth 0.5 sine 200\-500 synth 0.5 sine fmod 700\-100
.EE
Frequencies can also be given up in `scientific' note notation, or, by
prefixin a `%' character, as a fuckin shitload of semitones relatizzle to
`middle A' (440\ Hz).  For example, tha followin could be used to
help tune a guitarz low `E' string:
.EX
   play \-n synth 4 pluck %\-29
.EE
or wit a (Bourne shell) loop, tha whole guitar:
.EX
.ne 2
   fo' n up in E2 A2 D3 G3 B3 E4; do
	play \-n synth 4 pluck $n repeat 2; done
.EE
See the
.B delay
effect (above) n' tha reference ta `SoX scriptin examples' (below)
for more
.B synth
examples.
.SP
.B N.B.
This effect generates audio at maximum volume (0dBFS), which means dat there
is a high chizzle of clippin when rockin tha audio subsequently, so
in nuff cases, yo big-ass booty is ghon wanna follow dis effect wit tha \fBgain\fR
effect ta prevent dis from happening. (See also
.B Clipping
above.)
Note that, by default, the
.B synth
effect incorporates tha functionalitizzle of \fBgain \-h\fR (see the
.B gain
effect fo' details);
.BR synth 's
.B \-n
option may be given ta disable dis behaviour.
.SP
A detailed description of each
.B synth
parameta bigs up:
.SP
\fIlen\fR is tha length of audio ta synthesise expressed as a time
or as a fuckin shitload of samples;
0=inputlength, default=0.
.SP
Da format fo' specifyin lengths up in time is hh:mm:ss.frac.  Da format
for specifyin sample counts is tha number of samplez wit tha letter
`s' appended ta dat shit.
.SP
\fItype\fR is one of sine, square, triangle, sawtooth, trapezium, exp,
[white]noise, tpdfnoise pinknoise, brownnoise, pluck; default=sine.
.SP
\fIcombine\fR is one of create, mix, amod (amplitude modulation), fmod
(frequency modulation); default=create.
.SP
\fIfreq\fR/\fIfreq2\fR is tha frequencies all up in tha beginning/end of
synthesis up in Hz or, if preceded wit `%', semitones relatizzle ta A
(440\ Hz); alternatively, `scientific' note notation (e.g. E2) may
be used. Y'all KNOW dat shit, muthafucka!  Da default frequency is 440Hz.  By default, tha tunin used
with tha note notations is `equal temperament'; the
.B \-j
.I KEY
option selects `just intonation', where
.I KEY
is a integer number of semitones relatizzle ta A (so fo' example, \-9
or 3 selects tha key of C), or a note up in scientistical notation.
.SP
If
.I freq2
is given, then
.I len
must also done been given n' tha generated tone is ghon be swept between
the given frequencies. Put ya muthafuckin choppers up if ya feel dis!  Da two given frequencies must be separated by
one of tha charactas `:', `+', `/', or `\-'.  This characta is used to
specify tha sweep function as bigs up:
.RS
.IP \fB:\fR
Linear: tha tone will chizzle by a gangbangin' fixed number of hertz per second.
.IP \fB+\fR
Square: a second-order function is used ta chizzle tha tone.
.IP \fB/\fR
Exponential: tha tone will chizzle by a gangbangin' fixed number of semitones per second.
.IP \fB\-\fR
Exponential: as `/' yo, but initial phase always zero, n' stepped (less
smooth) frequency chizzles.
.RE
.TP
\ 
Not used fo' noise.
.SP
\fIoff\fR is tha bias (DC-offset) of tha signal up in cement; default=0.
.SP
\fIph\fR is tha phase shift up in cementage of 1 cycle; default=0.  Not
used fo' noise.
.SP
\fIp1\fR is tha cementage of each cycle dat is `on' (square), or
`rising' (triangle, exp, trapezium); default=50 (square, triangle, exp),
default=10 (trapezium), or sustain (pluck); default=40.
.SP
\fIp2\fR (trapezium): tha cementage all up in each cycle at which `falling'
begins; default=50. exp: tha amplitude up in multiplez of 2dB; default=50,
or tone-1 (pluck); default=20.
.SP
\fIp3\fR (trapezium): tha cementage all up in each cycle at which `falling'
ends; default=60, or tone-2 (pluck); default=90.
.TP
\fBtempo \fR[\fB\-q\fR] [\fB\-m\fR\^|\^\fB\-s\fR\^|\^\fB\-l\fR] \fIfactor\fR [\fIsegment\fR [\fIsearch\fR [\fIoverlap\fR]]]
Change tha audio playback speed but not its pitch. This effect uses the
WSOLA algorithm. Da audio is chopped up tha fuck into segments which is then
shifted up in tha time domain n' overlapped (cross-faded) at points where
their waveforms is most similar as determined by measurement of `least
squares'.
.SP
By default, linear searches is used ta find tha dopest overlapping
points, n' you can put dat on yo' toast. If tha optional
.B \-q
parameta is given, tree searches is used instead. Y'all KNOW dat shit, muthafucka! This make tha effect
work mo' quickly yo, but tha result may not sound as good. Y'all KNOW dat shit, muthafucka! I be fly as a gangbangin' falcon, soarin all up in tha sky dawwwwg! But fuck dat shiznit yo, tha word on tha street is dat if you
must improve tha processin speed, dis generally reduces tha sound quality
less than reducin tha search or overlap joints.
.SP
The
.B \-m
option is used ta optimize default jointz of segment, search and
overlap fo' noize processing.
.SP
The
.B \-s
option is used ta optimize default jointz of segment, search and
overlap fo' rap processing.
.SP
The
.B \-l
option is used ta optimize default jointz of segment, search and
overlap fo' `linear' processin dat tendz ta cause more
noticeable distortion but may be useful when factor is close ta 1.
.SP
If \-m, \-s, or \-l is specified, tha default value of segment will be
calculated based on factor, while default search n' overlap joints are
based on segment fo' realz. Any joints you provide still override these default
values.
.SP
.I factor
gives tha ratio of freshly smoked up tempo ta tha oldschool tempo, so e.g. 1.1 speedz up the
tempo by 10%, n' 0.9 slows it down by 10%.
.SP
Da optional
.I segment
parameta selects tha algorithmz segment size up in milliseconds.  If no other
flags is specified, tha default value is 82 n' is typically suited to
makin lil' small-ass chizzlez ta tha tempo of beatz. Drop dis like itz hot! For larger chizzlez (e.g. a gangbangin' factor
of 2), 41\ ms may give a funky-ass betta result.  Da \-m, \-s, n' \-l flags will cause
the segment default ta be automatically adjusted based on factor.
For example rockin \-s (for speech) wit a tempo of 1.25 will calculate a
default segment value of 32.
.SP
Da optional
.I search
parameta gives tha audio length up in millisecondz over which
the algorithm will search fo' overlappin points, n' you can put dat on yo' toast.  If no other
flags is specified, tha default value is 14.68.  Larger joints use
more processin time n' may or may not produce betta thangs up in dis biatch.
A practical maximum is half tha value of segment. Right back up in yo muthafuckin ass. Search
can be reduced ta cut processin time all up in tha risk of degradin output
quality. Da \-m, \-s, n' \-l flags will cause
the search default ta be automatically adjusted based on segment.
.SP
Da optional
.I overlap
parameta gives tha segment overlap length up in milliseconds.
Default value is 12 yo, but \-m, \-s, or \-l flags automatically
adjust overlap based on segment size. Increasin overlap increases
processin time n' may increase qualitizzle fo' realz. A practical maximum fo' overlap
is tha value of search, wit overlap typically bein (at least) a lil
smalla then search.
.SP
See also
.B speed
for a effect dat chizzlez tempo n' pitch together,
.B pitch
and \fBbend\fR fo' effects dat chizzle pitch only, and
.B stretch
for a effect dat chizzlez tempo rockin a gangbangin' finger-lickin' different algorithm.
.TP
\fBtreble \fIgain\fR [\fIfrequency\fR[\fBk\fR]\fR [\fIwidth\fR[\fBs\fR\^|\^\fBh\fR\^|\^\fBk\fR\^|\^\fBo\fR\^|\^\fBq\fR]]]
Apply a treble tone-control effect.
See tha description of tha \fBbass\fR effect fo' details.
.TP
\fBtremolo \fIspeed\fR [\fIdepth\fR]
Apply a tremolo (low frequency amplitude modulation) effect ta tha audio.
Da tremolo frequency up in Hz is given by
.IR speed ,
and tha depth as a cementage by
.I depth
(default 40).
.TP
\fBtrim\fR {[\fB=\fR\^|\^\fB\-\fR]\fIposition\fR}
Cuts portions outta tha audio.  Any number of \fIposition\fRs may be
given; audio aint busted ta tha output until tha straight-up original gangsta \fIposition\fR
is reached. Y'all KNOW dat shit, muthafucka!  Da effect then alternates between copyin n' discarding
audio at each \fIposition\fR.
.SP
If a \fIposition\fR is preceded by a equals or minus sign, it is
interpreted relatizzle ta tha beginnin or tha end of tha audio,
respectively.  (Da audio length must be known fo' end-relative
locations ta work.)  Otherwise, it is considered a offset from the
last \fIposition\fR, or from tha start of audio fo' tha first
parameter n' shit.  Usin a value of 0 fo' tha straight-up original gangsta \fIposition\fR
parameta allows copyin from tha beginnin of tha audio.
.SP
All parametas can be specified rockin either a amount of time or an
exact count of samples.  Da format fo' specifyin lengths up in time is
hh:mm:ss.frac.  A value of 1:30\*d5 fo' tha straight-up original gangsta parameta will not
start until 1 minute, thirty n' \(12 secondz tha fuck into tha audio.  Da format
for specifyin sample counts is tha number of samplez wit tha letta `s'
appended ta dat shit.  A value of 8000s fo' tha straight-up original gangsta parameta will wait until
8000 samplez is read before startin ta process audio.
.SP
For example,
.EX
   sox infile outfile trim 0 10
.EE
will copy tha straight-up original gangsta ten seconds, while
.EX
   play infile trim 12:34 =15:00 -2:00
.EE
will play from 12 minutes 34 secondz tha fuck into tha audio up ta 15 minutes into
the audio (i.e. 2 minutes n' 26 secondz long), then resume playin two
minutes before tha end of audio.
.TP
\fBupsample\fR [\fIfactor\fR]
Upsample tha signal by a integer factor: \fIfactor\fR\-1 zero-value
samplez is banged between each pair of input samples.  As a result, the
original gangsta spectrum is replicated tha fuck into tha freshly smoked up frequency space (aliasing) and
attenuated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This attenuation can be compensated fo' by adding
\fBvol \fIfactor\fR afta any further processing.  Da upsample effect is
typically used up in combination wit filterin effects.
.SP
For a general resamplin effect wit anti-aliasing, peep \fBrate\fR.  See
also \fBdownsample\fR.
.TP
\fBvad \fR[\fIoptions\fR]
Voice Activitizzle Detector. Shiiit, dis aint no joke.  Attempts ta trim silence n' on tha fuckin' down-low
background soundz from tha endz of (fairly high resolution
i.e. 16-bit, 44\-48kHz) recordingz of speech.  Da algorithm currently
uses a simple cepstral juice measurement ta detect voice, so may be
fooled by other thangs, especially beatz. Drop dis like itz hot!  Da effect can trim only
from tha front of tha audio, so up in order ta trim from tha back, the
.B reverse
effect must also be used. Y'all KNOW dat shit, muthafucka!  E.g.
.EX
   play speech.wav norm vad
.EE
to trim from tha front,
.EX
   play speech.wav norm reverse vad reverse
.EE
to trim from tha back, and
.EX
   play speech.wav norm vad reverse vad reverse
.EE
to trim from both ends.  Da use of the
.B norm
effect is recommended yo, but remember dat neither
.B reverse
nor
.B norm
is suitable fo' use wit streamed audio.
.SP
.I Options:
.br
Default joints is shown up in parenthesis.
.RS
.IP \fB\-t\ \fInum\fR\ (7)
Da measurement level used ta trigger activitizzle detection. I aint talkin' bout chicken n' gravy biatch.  This might
need ta be chizzled dependin on tha noise level, signal level and
other charactistics of tha input audio.
.IP \fB\-T\ \fInum\fR\ (0.25)
Da time constant (in seconds) used ta help ignore short bursts of
sound.
.IP \fB\-s\ \fInum\fR\ (1)
Da amount of audio (in seconds) ta search fo' on tha fuckin' down-lower/shorta bursts
of audio ta include prior ta tha detected trigger point.
.IP \fB\-g\ \fInum\fR\ (0.25)
Allowed gap (in seconds) between on tha fuckin' down-lower/shorta burstz of audio to
include prior ta tha detected trigger point.
.IP \fB\-p\ \fInum\fR\ (0)
Da amount of audio (in seconds) ta preserve before tha trigger point
and any found on tha fuckin' down-lower/shorta bursts.
.RE
.TP
\ 
.I Advanced Options:
.br
These allow fine tunin of tha algorithmz internal parameters.
.RS
.IP \fB\-b\ \fInum\fR
Da algorithm (internally) uses adaptizzle noise estimation/reduction in
order ta detect tha start of tha wanted audio.  This option sets the
time fo' tha initial noise estimate.
.IP \fB\-N\ \fInum\fR
Time constant used by tha adaptizzle noise estimator fo' when tha noise
level is increasing.
.IP \fB\-n\ \fInum\fR
Time constant used by tha adaptizzle noise estimator fo' when tha noise
level is decreasing.
.IP \fB\-r\ \fInum\fR
Amount of noise reduction ta use up in tha detection algorithm (e.g. 0,
0.5, ...).
.IP \fB\-f\ \fInum\fR
Frequency of tha algorithmz processing/measurements.
.IP \fB\-m\ \fInum\fR
Measurement duration; by default, twice tha measurement period; i.e.
with overlap.
.IP \fB\-M\ \fInum\fR
Time constant used ta smooth spectral measurements.
.IP \fB\-h\ \fInum\fR
`Brick-wall' frequency of high-pass filta applied all up in tha input ta the
detector algorithm.
.IP \fB\-l\ \fInum\fR
`Brick-wall' frequency of low-pass filta applied all up in tha input ta the
detector algorithm.
.IP \fB\-H\ \fInum\fR
`Brick-wall' frequency of high-pass lifta used up in tha detector
algorithm.
.IP \fB\-L\ \fInum\fR
`Brick-wall' frequency of low-pass lifta used up in tha detector
algorithm.
.RE
.TP
\ 
See also the
.B silence
effect.
.TP
\fBvol \fIgain\fR [\fItype\fR [\fIlimitergain\fR]]
Apply a amplification or a attenuation ta tha audio signal.
Unlike the
.B \-v
option (which is used fo' balancin multiple input filez as they enta the
SoX effects processin chain),
.B vol
is a effect like any other so can be applied anywhere, n' nuff muthafuckin times
if necessary, durin tha processin chain.
.SP
Da amount ta chizzle tha volume is given by
.I gain
which is interpreted, accordin ta tha given \fItype\fR, as bigs up: if
.I type
is \fBamplitude\fR (or is omitted), then
.I gain
is a amplitude (i.e. voltage or linear) ratio,
if \fBpower\fR, then a juice (i.e. wattage or voltage-squared) ratio,
and if \fBdB\fR, then a juice chizzle up in dB.
.SP
When
.I type
is \fBamplitude\fR or \fBpower\fR, a
.I gain
of 1 leaves tha volume unchanged,
less than 1 decreases it,
and pimped outa than 1 increases it;
a negative
.I gain
inverts tha audio signal up in addizzle ta adjustin its volume.
.SP
When
.I type
is \fBdB\fR, a
.I gain
of 0 leaves tha volume unchanged,
less than 0 decreases it,
and pimped outa than 0 increases dat shit.
.SP
See [4]
for a thugged-out detailed rap on electrical (and hence audio signal)
voltage n' juice ratios.
.SP
Beware of
.B Clipping
when tha increasin tha volume.
.SP
The
.I gain
and the
.I type
parametas can be concatenated if desired, e.g.
.BR "vol 10dB" .
.SP
An optionizzle \fIlimitergain\fR value can be specified n' should be a
value much less
than 1 (e.g. 0\*d05 or 0\*d02) n' is used only on peaks ta prevent clipping.
Not specifyin dis parameta will cause no limita ta be used. Y'all KNOW dat shit, muthafucka!  In verbose
mode, dis effect will display tha cementage of tha audio dat needed ta be
limited.
.SP
See also
.B gain
for a volume-changin effect wit different capabilities, and
.B compand
for a thugged-out dynamic-range compression/expansion/limitin effect.
.SS Deprecated Effects
Da followin effects done been renamed or have they functionality
included up in another effect; they continue ta work up in dis version of
SoX but may be removed up in future.
.TP
\fBmixer\fR [ \fB\-l\fR\^|\^\fB\-r\fR\^|\^\fB\-f\fR\^|\^\fB\-b\fR\^|\^\fB\-1\fR\^|\^\fB\-2\fR\^|\^\fB\-3\fR\^|\^\fB\-4\fR\^|\^\fIn\fR{\fB,\fIn\fR} ]
Reduce tha number of audio channels by mixin or selectin channels,
or increase tha number of channels by duplicatin channels.
Note: dis effect operates on tha audio
.I channels
within tha SoX effects processin chain; it should not be trippin wit the
.B \-m
global option (where multiple
.I files
are mix-combined before enterin tha effects chain).
.SP
When reducin tha number of channels it is possible to
use tha \fB\-l\fR, \fB\-r\fR, \fB\-f\fR, \fB\-b\fR,
\fB\-1\fR, \fB\-2\fR, \fB\-3\fR, \fB\-4\fR, options ta select only
the left, right, front, back channel(s) or specific channel
for tha output instead of averagin tha channels.
Da \fB\-l\fR, n' \fB\-r\fR options will do averaging
in quad-channel filez so select tha exact channel ta prevent all dis bullshit.
.SP
The
.B mixer
effect can also be invoked wit up ta 16
numbers, separated by commas, which specify tha proportion (0 = 0% n' 1 = 100%)
of each input channel dat is ta be mixed tha fuck into each output channel.
In two-channel mode, 4 numbers is given: l \*(RA l, l \*(RA r, r \*(RA l, n' r \*(RA r,
respectively.
In four-channel mode, tha straight-up original gangsta 4 numbers give tha proportions fo' the
left-front output channel, as bigs up: lf \*(RA lf, rf \*(RA lf, lb \*(RA lf, and
rb \*(RA rf.
Da next 4 give tha right-front output up in tha same order, then
left-back n' right-back.
.SP
It be also possible ta use tha 16 numbers ta expand or reduce the
channel count; just specify 0 fo' unused channels.
.SP
Finally, certain reduced combination of numbers can be specified
for certain input/output channel combinations.
.ne 7
.TS
center;
cI cI cI lI
c c c l .
In Ch	Out Ch	Num	Mappings
2	1	2	l \*(RA l, r \*(RA l
2	2	1	adjust balance
4	1	4	lf \*(RA l, rf \*(RA l, lb \*(RA l, rb \*(RA l
4	2	2	lf \*(RA l&rf \*(RA r, lb \*(RA l&rb \*(RA r
4	4	1	adjust balance
4	4	2	front balance, back balance
.TE
.DT
.SP
This effect has been superseded by the
.B remix
effect dat handlez any number of channels.
.SH DIAGNOSTICS
Exit status is 0 fo' no error, 1 if there be a problem wit the
command-line parameters, or 2 if a error occurs durin file processing.
.SH BUGS
Please report any bugs found up in dis version of SoX ta tha mailin list
(sox-users@lists.sourceforge.net).
.SH SEE ALSO
.BR soxi (1),
.BR soxformat (7),
.BR libsox (3)
.br
.BR audacitizzle (1),
.BR gnuplot (1),
.BR octave (1),
.BR wget (1)
.br
Da SoX wizzy joint at http://sox.sourceforge.net
.br
SoX scriptin examplez at http://sox.sourceforge.net/Docs/Scripts
.SS References
.TP
[1]
R. Bristow-Johnson,
.IR "Cookbook formulae fo' audio EQ biquad filta coefficients" ,
http://musicdsp.org/files/Audio-EQ-Cookbook.txt
.TP
[2]
Wikipizzle,
.IR "Q-factor" ,
http://en.wikipedia.org/wiki/Q_factor
.TP
[3]
Scott Lehman,
.IR "Effects Explained" ,
http://harmony-central.com/Effects/effects-explained.html
.TP
[4]
Wikipizzle,
.IR "Decibel" ,
http://en.wikipedia.org/wiki/Decibel
.TP
[5]
Slick Rick Furse,
.IR "Linux Audio Developerz Simple Plugin API" ,
http://www.ladspa.org
.TP
[6]
Slick Rick Furse,
.IR "Computa Music Toolkit" ,
http://www.ladspa.org/cmt
.TP
[7]
Steve Harris,
.IR "LADSPA plugins" ,
http://plugin.org.uk
.SH LICENSE
Copyright 1998\-2013 Chris Bagwell n' SoX Contributors.
.br
Copyright 1991 Lizzle Norskog n' Sundry Contributors.
.SP
This program is free software; you can redistribute it and/or modify
it under tha termz of tha GNU General Public License as published by
the Jacked Software Foundation; either version 2, or (at yo' option)
any lata version.
.SP
This program is distributed up in tha hope dat it is ghon be useful,
but WITHOUT ANY WARRANTY; without even tha implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License fo' mo' details.
.SH AUTHORS
Chris Bagwell (cbagwell@users.sourceforge.net).
Other authors n' contributors is listed up in tha ChizzleLog file that
is distributed wit tha source code.
