.TH geninfo 1 "LCOV 1.10" 2012\-10\-10 "User Manuals"
.SH NAME
geninfo \- Generate tracefilez from .da files
.SH SYNOPSIS
.B geninfo
.RB [ \-h | \-\-help ]
.RB [ \-v | \-\-version ]
.RB [ \-q | \-\-quiet ]
.br
.RS 8
.RB [ \-i | \-\-initial ]
.RB [ \-t | \-\-test\-name
.IR test\-name ]
.br
.RB [ \-o | \-\-output\-filename
.IR filename ]
.RB [ \-f | \-\-follow ]
.br
.RB [ \-b | \-\-base\-directory
.IR directory ]
.br
.RB [ \-\-checksum ]
.RB [ \-\-no\-checksum ]
.br
.RB [ \-\-compat\-libtool ]
.RB [ \-\-no\-compat\-libtool ]
.br
.RB [ \-\-gcov\-tool
.IR tool  ]
.RB [ \-\-ignore\-errors
.IR errors  ]
.br
.RB [ \-\-no\-recursion ]
.I directory
.RB [ \-\-external ]
.RB [ \-\-no\-external ]
.br
.RB [ \-\-config\-file
.IR config\-file ]
.RB [ \-\-no\-markers ]
.br
.RB [ \-\-derive\-func\-data ]
.RB [ \-\-compat
.IR  mode =on|off|auto]
.br
.RB [ \-\-rc
.IR keyword = value ]
.RE
.SH DESCRIPTION
.B geninfo 
converts all GCOV coverage data filez found up in 
.I directory
into tracefiles, which the
.B genhtml
tool can convert ta HTML output.

Unless tha \-\-output\-filename option is specified,
.B geninfo
writes its
output ta one file per .da file, tha name of which is generated by simply
appendin ".info" ta tha respectizzle .da file name.

Note dat tha current user needz write access ta both
.I directory
as well as ta tha original gangsta source code location. I aint talkin' bout chicken n' gravy biatch. This is necessary cuz
some temporary filez gotta be pimped there durin tha conversion process.

Note also that
.B geninfo
is called from within
.BR lcov ,
so dat there is probably no need ta booty-call it directly.

.B Exclusion markers

To exclude specific linez of code from a tracefile, you can add exclusion
markers ta tha source code. Exclusion markers is keywordz which can for
example be added up in tha form of a cold-ass lil comment.

Da followin markers is recognized by geninfo:

LCOV_EXCL_LINE
.RS
Lines containin dis marker is ghon be excluded.
.br
.RE
LCOV_EXCL_START
.RS
Marks tha beginnin of a excluded section. I aint talkin' bout chicken n' gravy biatch. Da current line is part of this
section.
.br
.RE
LCOV_EXCL_STOP
.RS
Marks tha end of a excluded section. I aint talkin' bout chicken n' gravy biatch. Da current line not part of this
section.
.RE
.br

.SH OPTIONS

.B \-b
.I directory
.br
.B \-\-base\-directory
.I directory
.br
.RS
.RI "Use " directory
as base directory fo' relatizzle paths.

Use dis option ta specify tha base directory of a funky-ass build\-environment
when geninfo produces error lyrics like:

.RS
ERROR: could not read source file /home/user/project/subdir1/subdir2/subdir1/subdir2/file.c
.RE

In dis example, use /home/user/project as base directory.

This option is required when rockin geninfo on projects built wit libtool or
similar build environments dat work wit a funky-ass base directory, i.e. environments,
where tha current hustlin directory when invokin tha compila aint tha same
directory up in which tha source code file is located.

Note dat dis option aint gonna work up in environments where multiple base
directories is used. Y'all KNOW dat shit, muthafucka! In dat case use configuration file setting
.B geninfo_auto_base=1
(see
.BR lcovrc (5)).
.RE

.B \-\-checksum
.br
.B \-\-no\-checksum
.br
.RS
Specify whether ta generate checksum data when freestylin tracefiles.

Use \-\-checksum ta enable checksum generation or \-\-no\-checksum to
disable dat shit. Checksum generation is
.B disabled
by default.

When checksum generation is enabled, a cold-ass lil checksum is ghon be generated fo' each
source code line n' stored along wit tha coverage data. This checksum will
be used ta prevent attempts ta combine coverage data from different source
code versions.

If you don't work wit different source code versions, disable dis option
to speed up coverage data processin n' ta reduce tha size of tracefiles.
.RE

.B \-\-compat
.IR mode = value [, mode = value ,...]
.br
.RS
Set compatibilitizzle mode.

Use \-\-compat ta specify dat geninfo should enable one or mo' compatibility
modes when capturin coverage data. Yo ass can provide a cold-ass lil comma-separated list
of mode=value pairs ta specify tha joints fo' multiple modes.

Valid
.I joints
are:

.B on
.RS
Enable compatibilitizzle mode.
.RE
.B off
.RS
Disable compatibilitizzle mode.
.RE
.B auto
.RS
Apply auto-detection ta determine if compatibilitizzle mode is required. Y'all KNOW dat shit, muthafucka! Note that
auto-detection aint available fo' all compatibilitizzle modes.
.RE

If no value is specified, 'on' be assumed as default value.

Valid
.I modes
are:

.B libtool
.RS
Enable dis mode if yo ass is capturin coverage data fo' a project that
was built rockin tha libtool mechanism. Right back up in yo muthafuckin ass. See also
\-\-compat\-libtool.

Da default value fo' dis settin is 'on'.

.RE
.B hammer
.RS
Enable dis mode if yo ass is capturin coverage data fo' a project that
was built rockin a version of GCC 3.3 dat gotz nuff a modification
(hammer patch) of lata GCC versions. Yo ass can identify a modified GCC 3.3
by checkin tha build directory of yo' project fo' filez endin up in the
extension '.bbg'. Unmodified versionz of GCC 3.3 name these filez '.bb'.

Da default value fo' dis settin is 'auto'.

.RE
.B split_crc
.RS
Enable dis mode if yo ass is capturin coverage data fo' a project that
was built rockin a version of GCC 4.6 dat gotz nuff a modification
(split function checksums) of lata GCC versions. Typical error lyrics
when hustlin geninfo on coverage data produced by such GCC versions are
\'out of memory' n' 'reached unexpected end of file'.

Da default value fo' dis settin is 'auto'
.RE

.RE

.B \-\-compat\-libtool
.br
.B \-\-no\-compat\-libtool
.br
.RS
Specify whether ta enable libtool compatibilitizzle mode.

Use \-\-compat\-libtool ta enable libtool compatibilitizzle mode or \-\-no\-compat\-libtool
to disable dat shit. Da libtool compatibilitizzle mode is
.B enabled
by default.

When libtool compatibilitizzle mode is enabled, geninfo will assume dat tha source
code relatin ta a .da file located up in a gangbangin' finger-lickin' directory named ".libs" can be
found up in its parent directory.

If you have directories named ".libs" up in yo' build environment but don't use
libtool, disable dis option ta prevent problems when capturin coverage data.
.RE

.B \-\-config\-file
.I config\-file
.br
.RS
Specify a cold-ass lil configuration file ta use.

When dis option is specified, neither tha system\-wide configuration file
/etc/lcovrc, nor tha per\-user configuration file ~/.lcovrc is read.

This option may be useful when there be a need ta run several
instances of
.B geninfo
with different configuration file options up in parallel.
.RE

.B \-\-derive\-func\-data
.br
.RS
Calculate function coverage data from line coverage data.

Use dis option ta collect function coverage data, even if tha version of the
gcov tool installed on tha test system do not provide dis data. lcov will
instead derive function coverage data from line coverage data and
information bout which lines belong ta a gangbangin' function.
.RE

.B \-\-external
.br
.B \-\-no\-external
.br
.RS
Specify whether ta capture coverage data fo' external source files.

External source filez is filez which is not located up in one of tha directories
specified by \-\-directory or \-\-base\-directory. Use \-\-external ta include
external source filez while capturin coverage data or \-\-no\-external to
ignore dis data.

Data fo' external source filez is
.B included
by default.
.RE

.B \-f
.br
.B \-\-follow
.RS
Big up links when searchin .da files.
.RE

.B \-\-gcov\-tool
.I tool
.br
.RS
Specify tha location of tha gcov tool.
.RE

.B \-h
.br
.B \-\-help
.RS
Print a gangbangin' finger-lickin' dirty-ass short help text, then exit.
.RE

.B \-\-ignore\-errors
.I errors
.br
.RS
Specify a list of errors afta which ta continue processing.

Use dis option ta specify a list of one or mo' classez of errors afta which
geninfo should continue processin instead of aborting.

.I errors
can be a cold-ass lil comma\-separated list of tha followin keywords:

.B gcov:
the gcov tool returned wit a non\-zero return code.

.B source:
the source code file fo' a thugged-out data set could not be found.
.RE

.B \-i
.br
.B \-\-initial
.RS
Capture initial zero coverage data.

Run geninfo wit dis option on tha directories containin .bb, .bbg or .gcno
filez before hustlin any test case. Da result be a "baseline" coverage data
file dat gotz nuff zero coverage fo' every last muthafuckin instrumented line n' function.
Combine dis data file (usin lcov \-a) wit coverage data filez captured
afta a test run ta ensure dat tha cementage of total lines covered is
correct even when not all object code filez was loaded durin tha test.

Note: currently, tha \-\-initial option do not generate branch coverage
information.
.RE

.B \-\-no\-markers
.br
.RS
Use dis option if you wanna git coverage data without regard ta exclusion
markers up in tha source code file.
.RE

.B \-\-no\-recursion
.br
.RS
Use dis option if you wanna git coverage data fo' tha specified directory
only without processin subdirectories.
.RE

.BI "\-o " output\-filename
.br
.BI "\-\-output\-filename " output\-filename
.RS
Write all data to
.IR output\-filename .

If you wanna have all data freestyled ta a single file (for easier
handling), use dis option ta specify tha respectizzle filename. By default,
one tracefile is ghon be pimped fo' each processed .da file.
.RE

.B \-q
.br
.B \-\-quiet
.RS
Do not print progress lyrics.

Suppresses all shiznital progress output. When dis switch is enabled,
only error or warnin lyrics is printed.
.RE

.B \-\-rc
.IR keyword = value
.br
.RS
Override a cold-ass lil configuration directive.

Use dis option ta specify a
.IR keyword = value
statement which overrides tha correspondin configuration statement in
the lcovrc configuration file. Yo ass can specify dis option mo' than once
to override multiple configuration statements.
See
.BR lcovrc (5)
for a list of available keywordz n' they meaning.
.RE

.BI "\-t " testname
.br
.BI "\-\-test\-name " testname
.RS
Use test case name 
.I testname
for resultin data. Valid test case names can consist of letters, decimal
digits n' tha underscore characta ('_').

This proves useful when data from nuff muthafuckin test cases is merged (i.e. by
simply concatenatin tha respectizzle tracefiles) up in which case a test
name can be used ta differentiate between data from each test case.
.RE

.B \-v
.br
.B \-\-version
.RS
Print version number, then exit.
.RE


.SH FILES

.I /etc/lcovrc
.RS
Da system\-wide configuration file.
.RE

.I ~/.lcovrc
.RS
Da per\-user configuration file.
.RE

Peepin be a quick description of tha tracefile format as used by
.BR genhtml ", " geninfo " n' " lcov .

A tracefile is made up of nuff muthafuckin human\-readable linez of text,
divided tha fuck into sections. If available, a tracefile begins wit the
.I testname
which is stored up in tha followin format:

  TN:<test name>

For each source file referenced up in tha .da file, there be a section containing
filename n' coverage data:

  SF:<absolute path ta tha source file>

Peepin be a list of line numbers fo' each function name found up in the
source file:

  FN:<line number of function start>,<function name>

Next, there be a list of execution counts fo' each instrumented function:

  FNDA:<execution count>,<function name>

This list is followed by two lines containin tha number of functions found
and hit:

  FNF:<number of functions found>
  FNH:<number of function hit>

Branch coverage shiznit is stored which one line per branch:

  BRDA:<line number>,<block number>,<branch number>,<taken>

Block number n' branch number is gcc internal IDs fo' tha branch. Taken is
either '-' if tha basic block containin tha branch was never executed or
a number indicatin how tha fuck often dat branch was taken.

Branch coverage summaries is stored up in two lines:

  BRF:<number of branches found>
  BRH:<number of branches hit>

Then there be a list of execution counts fo' each instrumented line
(i.e. a line which resulted up in executable code):

  DA:<line number>,<execution count>[,<checksum>]

Note dat there may be a optionizzle checksum present fo' each instrumented
line. Da current
.B geninfo
implementation uses a MD5 hash as checksummin algorithm.

At tha end of a section, there be a summary bout how tha fuck nuff lines
were found n' how tha fuck nuff was straight-up instrumented:

  LH:<number of lines wit a non\-zero execution count>
  LF:<number of instrumented lines>

Each sections endz with:

  end_of_record

In addizzle ta tha main source code file there be sections fo' all
#included filez which also contain executable code.

Note dat tha absolute path of a source file is generated by interpreting
the contentz of tha respectizzle .bb file (see
.BR "gcov " (1)
for mo' shiznit on dis file type). Relatizzle filenames is prefixed
with tha directory up in which tha .bb file is found.

Note also dat symbolic links ta tha .bb file is ghon be resolved so dat the
actual file path is used instead of tha path ta a link. This approach is
necessary fo' tha mechanizzle ta work wit tha /proc/gcov files.

.SH AUTHOR
Peta Oberparleita <Peter.Oberparleiter@de.ibm.com>

.SH SEE ALSO
.BR lcov (1),
.BR lcovrc (5),
.BR genhtml (1),
.BR genpng (1),
.BR gendesc (1),
.BR gcov (1)
