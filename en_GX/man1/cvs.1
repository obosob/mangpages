.\" This is tha playa page fo' CVS.  It be auto-generated from the
.\" cvs.man.header, cvs.texinfo, & cvs.man.foota files.  Please make chizzles
.\" there, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  A full copyright & license notice may also be found up in cvs.texinfo.
.\"
.\" Man page autogeneration, includin dis header file, is
.\" Copyright 2004-2005 Da Jacked Software Foundation, Inc.,
.\"                     Derek R. Price, & Ximbiot <http://ximbiot.com>.
.\"
.\" This documentation is free software; you can redistribute it and/or modify
.\" it under tha termz of tha GNU General Public License as published by
.\" tha Jacked Software Foundation; either version 2, or (at yo' option)
.\" any lata version.
.\"
.\" This documentation is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public License
.\" along wit dis documentation; if not, write ta tha Jacked Software
.\" Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
.de Id
.ds Rv \\$3
.ds Dt \\$4
..
.TH CVS 1
.\" Full space up in nroff; half space up in troff
.de SP
.if n .sp
.if t .sp .5
..
.\" quoted command
.de `
.RB ` "\|\\$1\|" '\\$2
..
.SH "NAME"
cvs \- Concurrent Versions System
.SH "SYNOPSIS"
.TP
\fBcvs\fP [ \fIcvs_options\fP ]
.I cvs_command
[
.I command_options
] [
.I command_args
]
.SH "NOTE"
.IX "revision control system" "\fLcvs\fR"
.IX  cvs  ""  "\fLcvs\fP \- concurrent versions system"
.IX  "concurrent versions system \- \fLcvs\fP"
.IX  "release control system"  "cvs command"  ""  "\fLcvs\fP \- concurrent versions system"
.IX  "source control system"  "cvs command"  ""  "\fLcvs\fP \- concurrent versions system"
.IX  revisions  "cvs command"  ""  "\fLcvs\fP \- source control"
This manpage be a summary of a shitload of tha features of
\fBcvs\fP.  It be auto-generated from a appendix of tha CVS manual.
For mo' in-depth documentation, please consult the
Cederqvist manual (via the
.B info CVS
command or otherwise,
as busted lyrics bout up in tha SEE ALSO section of dis manpage).  Cross-references
in dis playa page refer ta nodes up in tha same.
.SH "CVS commands"
.SS "Guide ta CVS commands"
.SP
This appendix raps bout tha overall structure of
\fBcvs\fR commands, n' raps bout some commandz in
detail (others is busted lyrics bout elsewhere; fo' a quick
reference ta \fBcvs\fR commands, peep node `Invokin CVS\(aq up in tha CVS manual).
.SP
.SH "Structure"
.SS "Overall structure of CVS commands"
.IX "Structure"
.IX "CVS command structure"
.IX "Command structure"
.IX "Format of CVS commands"
.SP
Da overall format of all \fBcvs\fR commandz is:
.SP
.PD 0
.SP
.IP "" 2
cvs [ cvs_options ] cvs_command [ command_options ] [ command_args ]

.PD
.IP "" 0
.SP
.IP "" 0
\fBcvs\fR
.IP "" 2
Da name of tha \fBcvs\fR program.
.SP
.IP "" 0
\fBcvs_options\fR
.IP "" 2
Some options dat affect all sub-commandz of \fBcvs\fR.  These are
busted lyrics bout below.
.SP
.IP "" 0
\fBcvs_command\fR
.IP "" 2
One of nuff muthafuckin different sub-commands.  Some of tha commandz have
aliases dat can be used instead; dem aliases is noted up in the
reference manual fo' dat command. Y'all KNOW dat shit, muthafucka!  There is only two thangs
where you may omit \fBcvs_command\fR: \fBcvs -H\fR elicits a
list of available commands, n' \fBcvs -v\fR displays version
information on \fBcvs\fR itself.
.SP
.IP "" 0
\fBcommand_options\fR
.IP "" 2
Options dat is specific fo' tha command.
.SP
.IP "" 0
\fBcommand_args\fR
.IP "" 2
Arguments ta tha commands.
.SP
There is unfortunately some mad drama between
\fBcvs_options\fR n' \fBcommand_options\fR.
When given as a \fBcvs_option\fR, some options only
affect a shitload of tha commands.  When given as a
\fBcommand_option\fR it may gotz a gangbangin' finger-lickin' different meaning, and
be accepted by mo' commands.  In other lyrics, do not
take tha above categorization too seriously.  Look at
the documentation instead.
.SP
.SH "Exit status"
.SS "CVS\(aqs exit status"
.IX "Exit status, of CVS"
.SP
\fBcvs\fR can indicate ta tha callin environment whether it
succeeded or failed by settin its \fIexit status\fR.
Da exact way of testin tha exit status will vary from
one operatin system ta another n' shit.  For example up in a unix
shell script tha \fB$?\fR variable is ghon be 0 if the
last command returned a successful exit status, or
greata than 0 if tha exit status indicated failure.
.SP
If \fBcvs\fR is successful, it returns a successful status;
if there be a error, it prints a error message and
returns a gangbangin' failure status.  Da one exception ta dis is
the \fBcvs diff\fR command. Y'all KNOW dat shit, muthafucka!  It will return a
successful status if it found no differences, or a
failure status if there was differences or if there
was a error. Shiiit, dis aint no joke.  Because dis behavior serves up no good
way ta detect errors, up in tha future it is possible that
\fBcvs diff\fR is ghon be chizzled ta behave like the
other \fBcvs\fR commands.
.SP
.SH "~/.cvsrc"
.SS "Default options n' tha ~/.cvsrc file"
.IX "\&.cvsrc file"
.IX "Option defaults"
.SP
There is some \fBcommand_options\fR dat is used so
often dat you might have set up a alias or some other
means ta make shizzle you always specify dat option. I aint talkin' bout chicken n' gravy biatch.  One
example (the one dat drove tha implementation of the
\fB.cvsrc\fR support, actually) is dat nuff playas find the
default output of tha \fBdiff\fR command ta be hella
hard ta read, n' dat either context diffs or unidiffs
are much easier ta understand.
.SP
Da \fB~/.cvsrc\fR file be a way dat you can add
default options ta \fBcvs_commands\fR within cvs,
instead of relyin on aliases or other shell scripts.
.SP
Da format of tha \fB~/.cvsrc\fR file is simple.  The
file is searched fo' a line dat begins wit tha same
name as tha \fBcvs_command\fR bein executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If a
match is found, then tha remainder of tha line is split
up (at whitespace characters) tha fuck into separate options and
added ta tha command arguments \fIbefore\fR any
options from tha command line.
.SP
If a cold-ass lil command has two names (e.g., \fBcheckout\fR and
\fBco\fR), tha straight-up legit name, not necessarily tha one
used on tha command line, is ghon be used ta match against
the file.  So if dis is tha contentz of tha user\(aqs
\fB~/.cvsrc\fR file:
.SP
.PD 0
.SP
.IP "" 2
log -N
.IP "" 2
diff -uN
.IP "" 2
rdiff -u
.IP "" 2
update -Pd
.IP "" 2
checkout -P
.IP "" 2
release -d

.PD
.IP "" 0
.SP
the command \fBcvs checkout foo\fR would have the
\fB-P\fR option added ta tha arguments, as well as
\fBcvs co foo\fR.
.SP
With tha example file above, tha output from \fBcvs
diff foobar\fR is ghon be up in unidiff format.  \fBcvs diff
-c foobar\fR will provide context diffs, as usual.
Gettin "old" format diffs would be slightly more
fucked up, cuz \fBdiff\fR don\(aqt have a option
to specify use of tha "old" format, so you would need
\fBcvs -f diff foobar\fR.
.SP
In place of tha command name you can use \fBcvs\fR to
specify global options (see node `Global options\(aq up in tha CVS manual).  For
example tha followin line up in \fB.cvsrc\fR
.SP
.PD 0
.SP
.IP "" 2
cvs -z6

.PD
.IP "" 0
.SP
causes \fBcvs\fR ta use compression level 6.
.SP
.SH "Global options"
.IX "Options, global"
.IX "Global options"
.IX "Left-hand options"
.SP
Da available \fBcvs_options\fR (that is given ta the
left of \fBcvs_command\fR) are:
.SP
.IP "" 0
\fB--allow-root=\fIrootdir\fB\fR
.IP "" 2
Specify legal \fBcvsroot\fR directory.  See
`Password authentication server\(aq up in tha CVS manual.
.SP
.IX "Authentication, stream"
.IX "Stream authentication"
.IP "" 0
\fB-a\fR
.IP "" 2
Authenticate all communication between tha client and
the server n' shit.  Only has a effect on tha \fBcvs\fR client.
Az of dis writing, dis is only implemented when using
a GSSAPI connection (see node `GSSAPI authenticated\(aq up in tha CVS manual).
Authentication prevents certain sortz of attacks
involvin hijackin tha actizzle \fBtcp\fR connection.
Enablin authentication do not enable encryption.
.SP
.IX "RCSBIN, overriding"
.IX "Overridin RCSBIN"
.IP "" 0
\fB-b \fIbindir\fB\fR
.IP "" 2
In \fBcvs\fR 1.9.18 n' older, dis specified that
\fBrcs\fR programs is up in tha \fIbindir\fR directory.
Current versionz of \fBcvs\fR do not run \fBrcs\fR
programs; fo' compatibilitizzle dis option be accepted,
but it do nothing.
.SP
.IX "TMPDIR, overriding"
.IX "Overridin TMPDIR"
.IP "" 0
\fB-T \fItempdir\fB\fR
.IP "" 2
Use \fItempdir\fR as tha directory where temporary filez are
located. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Overrides tha settin of tha \fB$TMPDIR\fR environment
variable n' any precompiled directory.  This parameta should be
specified as a absolute pathname.
(When hustlin client/server, \fB-T\fR affects only tha local process;
specifyin \fB-T\fR fo' tha client has no effect on tha server and
vice versa.)
.SP
.IX "CVSROOT, overriding"
.IX "Overridin CVSROOT"
.IP "" 0
\fB-d \fIcvs_root_directory\fB\fR
.IP "" 2
Use \fIcvs_root_directory\fR as tha root directory
pathname of tha repository.  Overrides tha settin of
the \fB$CVSROOT\fR environment variable.  See `Repository\(aq up in tha CVS manual.
.SP
.IX "EDITOR, overriding"
.IX "Overridin EDITOR"
.IP "" 0
\fB-e \fIeditor\fB\fR
.IP "" 2
Use \fIeditor\fR ta enta revision log shiznit. I aint talkin' bout chicken n' gravy biatch.  Overrides the
settin of tha \fB$CVSEDITOR\fR n' \fB$EDITOR\fR
environment variables.  For mo' shiznit, see
`Committin yo' chizzles\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB-f\fR
.IP "" 2
Do not read tha \fB~/.cvsrc\fR file.  This
option is most often used cuz of the
non-orthogonalitizzle of tha \fBcvs\fR option set.  For
example, tha \fBcvs log\fR option \fB-N\fR (turn off
display of tag names) aint gots a cold-ass lil corresponding
option ta turn tha display on. I aint talkin' bout chicken n' gravy biatch.  So if you have
\fB-N\fR up in tha \fB~/.cvsrc\fR entry fo' \fBlog\fR,
you may need ta use \fB-f\fR ta show tha tag names.
.SP
.IP "" 0
\fB-H\fR
.IP "" 2
.IP "" 0
\fB--help\fR
.IP "" 2
Display usage shiznit bout tha specified \fBcvs_command\fR
(but do not straight-up execute tha command).  If you don\(aqt specify
a command name, \fBcvs -H\fR displays overall help for
\fBcvs\fR, includin a list of other help options.
.SP
.IX "Read-only mode"
.IP "" 0
\fB-n\fR
.IP "" 2
Do not chizzle any files.  Attempt ta execute the
\fBcvs_command\fR yo, but only ta issue reports; do not remove,
update, or merge any existin files, or create any freshly smoked up files.
.SP
Note dat \fBcvs\fR aint gonna necessarily produce exactly
the same output as without \fB-n\fR.  In some cases
the output is ghon be tha same yo, but up in other cases
\fBcvs\fR will skip a shitload of tha processin dat would
have been required ta produce tha exact same output.
.SP
.IP "" 0
\fB-Q\fR
.IP "" 2
Cause tha command ta be straight-up on tha fuckin' down-low; tha command will only
generate output fo' straight-up problems.
.SP
.IP "" 0
\fB-q\fR
.IP "" 2
Cause tha command ta be somewhat on tha fuckin' down-low; shiznital lyrics,
like fuckin reportz of recursion all up in subdirectories, are
suppressed.
.SP
.IX "Read-only files, n' -r"
.IP "" 0
\fB-r\fR
.IP "" 2
Make freshly smoked up hustlin filez read-only.  Same effect
as if tha \fB$CVSREAD\fR environment variable is set
(see node `Environment variables\(aq up in tha CVS manual).  Da default is to
make hustlin filez writable, unless watches is on
(see node `Watches\(aq up in tha CVS manual).
.SP
.IP "" 0
\fB-s \fIvariable\fB=\fIvalue\fB\fR
.IP "" 2
Set a user variable (see node `Variables\(aq up in tha CVS manual).
.SP
.IX "Trace"
.IP "" 0
\fB-t\fR
.IP "" 2
Trace program execution; display lyrics showin tha steps of
\fBcvs\fR activity.  Particularly useful wit \fB-n\fR ta explore the
potential impact of a unfamiliar command.
.SP
.IP "" 0
\fB-v\fR
.IP "" 2
.IP "" 0
\fB--version\fR
.IP "" 2
Display version n' copyright shiznit fo' \fBcvs\fR.
.SP
.IX "CVSREAD, overriding"
.IX "Overridin CVSREAD"
.IP "" 0
\fB-w\fR
.IP "" 2
Make freshly smoked up hustlin filez read-write.  Overrides the
settin of tha \fB$CVSREAD\fR environment variable.
Filez is pimped read-write by default, unless \fB$CVSREAD\fR is
set or \fB-r\fR is given.
.SP
.IP "" 0
\fB-x\fR
.IP "" 2
.IX "Encryption"
Encrypt all communication between tha client n' the
server n' shit.  Only has a effect on tha \fBcvs\fR client.  As
of dis writing, dis is only implemented when rockin a
GSSAPI connection (see node `GSSAPI authenticated\(aq up in tha CVS manual) or a
Kerberos connection (see node `Kerberos authenticated\(aq up in tha CVS manual).
Enablin encryption implies dat message traffic is
also authenticated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Encryption support is not
available by default; it must be enabled rockin a
special configure option, \fB--enable-encryption\fR,
when you build \fBcvs\fR.
.SP
.IP "" 0
\fB-z \fIgzip-level\fB\fR
.IP "" 2
.IX "Compression"
.IX "Gzip"
Set tha compression level.
Valid levels is 1 (high speed, low compression) to
9 (low speed, high compression), or 0 ta disable
compression (the default).
Only has a effect on tha \fBcvs\fR client.
.SP
.SP
.SH "Common options"
.SS "Common command options"
.IX "Common options"
.IX "Right-hand options"
.SP
This section raps bout tha \fBcommand_options\fR that
are available across nuff muthafuckin \fBcvs\fR commands.  These
options is always given ta tha right of
\fBcvs_command\fR. Not all
commandz support all of these options; each option is
only supported fo' commandz where it make sense.
But fuck dat shiznit yo, tha word on tha street is dat when a cold-ass lil command has one of these options you
can almost always count on tha same behavior of the
option as up in other commands.  (Other command options,
which is listed wit tha individual commands, may have
different behavior from one \fBcvs\fR command ta tha other).
.SP
\fBDa \fBhistory\fB command be a exception; it supports
many options dat conflict even wit these standard options.\fR
.SP
.IX "Dates"
.IX "Time"
.IX "Specifyin dates"
.IP "" 0
\fB-D \fIdate_spec\fB\fR
.IP "" 2
Use da most thugged-out recent revision no lata than \fIdate_spec\fR.
\fIdate_spec\fR be a single argument, a thugged-out date description
specifyin a thugged-out date up in tha past.
.SP
Da justification is \fIsticky\fR when you use it ta make a
private copy of a source file; dat is, when you git a working
file rockin \fB-D\fR, \fBcvs\fR recordz tha date you specified, so that
further thugged-out shiznit up in tha same directory will use tha same date
(for mo' shiznit on sticky tags/dates, peep node `Sticky tags\(aq up in tha CVS manual).
.SP
\fB-D\fR be available wit tha \fBannotate\fR, \fBcheckout\fR,
\fBdiff\fR, \fBexport\fR, \fBhistory\fR,
\fBrdiff\fR, \fBrtag\fR, n' \fBupdate\fR commands.
(Da \fBhistory\fR command uses dis option up in a
slightly different way; peep node `history options\(aq up in tha CVS manual).
.SP
.IX "Timezone, up in input"
.IX "Zone, time, up in input"
A wide variety of date formats is supported by
\fBcvs\fR.  Da most standard ones is ISO8601 (from the
Internationistic Standardz Organization) n' tha Internet
e-mail standard (specified up in RFC822 as amended by
RFC1123).
.SP
ISO8601 dates have nuff variants but all dem examples
are:
.SP
.PD 0
.SP
.IP "" 4
1972-09-24
.IP "" 4
1972-09-24 20:05

.PD
.IP "" 2
.SP
There is a shitload mo' ISO8601 date formats, n' \fBcvs\fR
accepts nuff of dem yo, but you probably don\(aqt want to
hear tha \fIwhole\fR long rap :-).
.SP
In addizzle ta tha dates allowed up in Internizzle e-mail
itself, \fBcvs\fR also allows a shitload of tha fieldz ta be
omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For example:
.SP
.PD 0
.SP
.IP "" 4
24 Sep 1972 20:05
.IP "" 4
24 Sep

.PD
.IP "" 2
.SP
Da date is interpreted as bein up in the
local timezone, unless a specific timezone is
specified.
.SP
These two date formats is preferred. Y'all KNOW dat shit, muthafucka!  However,
\fBcvs\fR currently accepts a wide variety of other date
formats, n' you can put dat on yo' toast.  They is intentionally not documented here in
any detail, n' future versionz of \fBcvs\fR might not
accept all of em.
.SP
One such format is
\fB\fImonth\fB/\fIday\fB/\fIyear\fB\fR.  This may
confuse playas whoz ass is accustomed ta havin tha month
and dizzle up in tha other order; \fB1/4/96\fR is January 4,
not April 1.
.SP
Remember ta quote tha argument ta tha \fB-D\fR
flag so dat yo' shell don\(aqt interpret spaces as
argument separators.  A command rockin tha \fB-D\fR
flag can be lookin like this:
.SP
.PD 0
.SP
.IP "" 4
$ cvs diff -D "1 minute ago" cvs.texinfo

.PD
.IP "" 2
.SP
.IX "Forcin a tag match"
.IP "" 0
\fB-f\fR
.IP "" 2
When you specify a particular date or tag ta \fBcvs\fR commands, they
normally ignore filez dat do not contain tha tag (or did not
exist prior ta tha date) dat you specified. Y'all KNOW dat shit, muthafucka!  Use tha \fB-f\fR option
if you want filez retrieved even when there is no match fo' the
tag or date.  (Da most recent revision of tha file
will be used).
.SP
Note dat even wit \fB-f\fR, a tag dat you specify
must exist (that is, up in some file, not necessary in
every file).  This is so dat \fBcvs\fR will continue to
give a error if you mistype a tag name.
.SP
\fB-f\fR be available wit these commands:
\fBannotate\fR, \fBcheckout\fR, \fBexport\fR,
\fBrdiff\fR, \fBrtag\fR, n' \fBupdate\fR.
.SP
\fBWARNING:  Da \fBcommit\fB n' \fBremove\fB
commandz also have a
\fB-f\fB option yo, but it has a gangbangin' finger-lickin' different behavior for
those commands.  See `commit options\(aq up in tha CVS manual, and
`Removin files\(aq up in tha CVS manual.\fR
.SP
.IP "" 0
\fB-k \fIkflag\fB\fR
.IP "" 2
Alta tha default processin of keywords.
See `Keyword substitution\(aq up in tha CVS manual, fo' tha meanin of
\fIkflag\fR.  Yo crazy-ass \fIkflag\fR justification is
\fIsticky\fR when you use it ta create a private copy
of a source file; dat is, when you use dis option
with tha \fBcheckout\fR or \fBupdate\fR commands,
\fBcvs\fR associates yo' selected \fIkflag\fR wit the
file, n' continues ta use it wit future update
commandz on tha same file until you specify otherwise.
.SP
Da \fB-k\fR option be available wit tha \fBadd\fR,
\fBcheckout\fR, \fBdiff\fR, \fBrdiff\fR, \fBimport\fR and
\fBupdate\fR commands.
.SP
.IP "" 0
\fB-l\fR
.IP "" 2
Local; run only up in current hustlin directory, rather than
recursin all up in subdirectories.
.SP
Available wit tha followin commands: \fBannotate\fR, \fBcheckout\fR,
\fBcommit\fR, \fBdiff\fR, \fBedit\fR, \fBeditors\fR, \fBexport\fR,
\fBlog\fR, \fBrdiff\fR, \fBremove\fR, \fBrtag\fR,
\fBstatus\fR, \fBtag\fR, \fBunedit\fR, \fBupdate\fR, \fBwatch\fR,
and \fBwatchers\fR.
.SP
.IX "Editor, avoidin invocation of"
.IX "Avoidin editor invocation"
.IP "" 0
\fB-m \fImessage\fB\fR
.IP "" 2
Use \fImessage\fR as log shiznit, instead of
invokin a editor.
.SP
Available wit tha followin commands: \fBadd\fR,
\fBcommit\fR n' \fBimport\fR.
.SP
.IP "" 0
\fB-n\fR
.IP "" 2
Do not run any tag program.  (A program can be
specified ta run up in tha modules
database (see node `modules\(aq up in tha CVS manual); dis option bypasses it).
.SP
\fBThis aint tha same as tha \fBcvs -n\fB
program option, which you can specify ta tha left of a cold-ass lil cvs command!\fR
.SP
Available wit tha \fBcheckout\fR, \fBexport\fR,
and \fBrtag\fR commands.
.SP
.IP "" 0
\fB-P\fR
.IP "" 2
Prune empty directories. Put ya muthafuckin choppers up if ya feel dis!  See `Removin directories\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB-p\fR
.IP "" 2
Pipe tha filez retrieved from tha repository ta standard output,
rather than freestylin dem up in tha current directory.  Available
with tha \fBcheckout\fR n' \fBupdate\fR commands.
.SP
.IP "" 0
\fB-R\fR
.IP "" 2
Process directories recursively.  This is on by default.
.SP
Available wit tha followin commands: \fBannotate\fR, \fBcheckout\fR,
\fBcommit\fR, \fBdiff\fR, \fBedit\fR, \fBeditors\fR, \fBexport\fR,
\fBrdiff\fR, \fBremove\fR, \fBrtag\fR,
\fBstatus\fR, \fBtag\fR, \fBunedit\fR, \fBupdate\fR, \fBwatch\fR,
and \fBwatchers\fR.
.SP
.IP "" 0
\fB-r \fItag\fB\fR
.IP "" 2
.IX "HEAD, special tag"
.IX "BASE, special tag"
Use tha revision specified by tha \fItag\fR argument instead of the
default \fIhead\fR revision. I aint talkin' bout chicken n' gravy biatch.  As well as arbitrary tags defined
with tha \fBtag\fR or \fBrtag\fR command, two special tags are
always available: \fBHEAD\fR refers ta da most thugged-out recent version
available up in tha repository, n' \fBBASE\fR refers ta the
revision you last checked up tha fuck into tha current hustlin directory.
.SP
Da tag justification is sticky when you use this
with \fBcheckout\fR or \fBupdate\fR ta make yo' own
copy of a gangbangin' file: \fBcvs\fR rethugz tha tag n' continues ta use it on
future update commands, until you specify otherwise (for mo' shiznit
on sticky tags/dates, peep node `Sticky tags\(aq up in tha CVS manual).
.SP
Da tag can be either a symbolic or numeric tag, as
busted lyrics bout up in `Tags\(aq up in tha CVS manual, or tha name of a funky-ass branch, as
busted lyrics bout up in `Branchin n' merging\(aq up in tha CVS manual.
When a cold-ass lil command expects a specific revision,
the name of a funky-ass branch is interpreted as da most thugged-out recent
revision on dat branch.
.SP
Specifyin tha \fB-q\fR global option along wit the
\fB-r\fR command option is often useful, ta suppress
the warnin lyrics when tha \fBrcs\fR file
does not contain tha specified tag.
.SP
\fBThis aint tha same as tha overall \fBcvs -r\fB option,
which you can specify ta tha left of a \fBcvs\fB command!\fR
.SP
\fB-r\fR be available wit tha \fBannotate\fR, \fBcheckout\fR,
\fBcommit\fR, \fBdiff\fR, \fBhistory\fR, \fBexport\fR, \fBrdiff\fR, 
\fBrtag\fR, n' \fBupdate\fR commands.
.SP
.IP "" 0
\fB-W\fR
.IP "" 2
Specify file names dat should be filtered. Y'all KNOW dat shit, muthafucka!  Yo ass can
use dis option repeatedly.  Da spec can be a gangbangin' file
name pattern of tha same type dat you can specify in
the \fB.cvswrappers\fR file.
Available wit tha followin commands: \fBimport\fR,
and \fBupdate\fR.
.SP
.SP
.SH "add"
.SS "Add filez n' directories ta tha repository"
.IX "add (subcommand)"
.SP
.IP "\(bu" 2
Synopsis: add [-k rcs-kflag] [-m message] files...
.IP "\(bu" 2
Requires: repository, hustlin directory.
.IP "\(bu" 2
Changes: repository, hustlin directory.
.SP
Da \fBadd\fR command is used ta present freshly smoked up files
and directories fo' addizzle tha fuck into tha \fBcvs\fR
repository.  When \fBadd\fR is used on a gangbangin' finger-lickin' directory,
a freshly smoked up directory is pimped up in tha repository
immediately.  When used on a gangbangin' file, only tha working
directory is updated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Chizzlez ta tha repository are
not made until tha \fBcommit\fR command is used on
the newly added file. 
.SP
Da \fBadd\fR command also resurrects filez that
have been previously removed. Y'all KNOW dat shit, muthafucka!  This can be done
before or afta tha \fBcommit\fR command is used
to finalize tha removal of files.  Resurrected files
are restored tha fuck into tha hustlin directory all up in tha time
the \fBadd\fR command is executed.
.SP
.SH "add options"
.SP
These standard options is supported by \fBadd\fR
(see node `Common options\(aq up in tha CVS manual, fo' a cold-ass lil complete description of
them):
.SP
.IP "" 0
\fB-k \fIkflag\fB\fR
.IP "" 2
Process keywordz accordin ta \fIkflag\fR.  See
`Keyword substitution\(aq up in tha CVS manual.
This option is sticky; future thugged-out shiznit of
this file up in dis hustlin directory will use tha same
\fIkflag\fR.  Da \fBstatus\fR command can be viewed
to peep tha sticky options.  For mo' shiznit on
the \fBstatus\fR command, peep node `Invokin CVS\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB-m \fImessage\fB\fR
.IP "" 2
Use \fImessage\fR as tha log message, instead of
invokin a editor.
.SP
.SH "add examples"
.SP
.SS "Addin a gangbangin' finger-lickin' directory"
.SP
.PD 0
.SP
.IP "" 2
$ mkdir doc
.IP "" 2
$ cvs add doc
.IP "" 2
Directory /path/to/repository/doc added ta tha repository

.PD
.IP "" 0
.SP
.SS "Addin a gangbangin' file"
.SP
.PD 0
.SP
.SP
.IP "" 2
$ >TODO
.IP "" 2
$ cvs add TODO
.IP "" 2
cvs add: schedulin file \`TODO\(aq fo' addition
.IP "" 2
cvs add: use \(aqcvs commit\(aq ta add dis file permanently

.PD
.IP "" 0
.SP
.SS "Unfuckin wit a \fBremove\fR command"
.SP
.PD 0
.SP
.IP "" 2
$ rm -f makefile
.IP "" 2
$ cvs remove makefile
.IP "" 2
cvs remove: schedulin \`makefile\(aq fo' removal
.IP "" 2
cvs remove: use \(aqcvs commit\(aq ta remove dis file permanently
.IP "" 2
$ cvs add makefile
.IP "" 2
U makefile
.IP "" 2
cvs add: makefile, version 1.2, resurrected

.PD
.IP "" 0
.SP
.SH "admin"
.SS "Administration"
.IX "Admin (subcommand)"
.SP
.IP "\(bu" 2
Requires: repository, hustlin directory.
.IP "\(bu" 2
Changes: repository.
.IP "\(bu" 2
Synonym: rcs
.SP
This is tha \fBcvs\fR intercourse ta assorted
administratizzle facilities. Put ya muthafuckin choppers up if ya feel dis!  Some of dem have
questionable usefulnizz fo' \fBcvs\fR but exist for
historical purposes.  Some of tha questionable options
are likely ta disappear up in tha future.  This command
\fIdoes\fR work recursively, so off tha hook care should be
used.
.SP
.IX "cvsadmin"
On unix, if there be a crew named \fBcvsadmin\fR,
only thugz of dat crew can run \fBcvs admin\fR
(except fo' tha \fBcvs admin -k\fR command, which can
be run by anybody).  This crew should exist on the
server, or any system hustlin tha non-client/server
\fBcvs\fR.  To disallow \fBcvs admin\fR fo' all users,
create a crew wit no playas up in dat shit.  On NT, the
\fBcvsadmin\fR feature do not exist n' all users
can run \fBcvs admin\fR.
.SP
.SH "admin options"
.SP
Some of these options have questionable usefulnizz for
\fBcvs\fR but exist fo' oldschool purposes.  Some even
make it impossible ta use \fBcvs\fR until you undo the
effect!
.SP
.IP "" 0
\fB-A\fIoldfile\fB\fR
.IP "" 2
Might not work together wit \fBcvs\fR.  Append the
access list of \fIoldfile\fR ta tha access list of the
\fBrcs\fR file.
.SP
.IP "" 0
\fB-a\fIlogins\fB\fR
.IP "" 2
Might not work together wit \fBcvs\fR.  Append the
login names appearin up in tha comma-separated list
\fIlogins\fR ta tha access list of tha \fBrcs\fR file.
.SP
.IP "" 0
\fB-b[\fIrev\fB]\fR
.IP "" 2
Set tha default branch ta \fIrev\fR.  In \fBcvs\fR, you
normally do not manipulate default branches; sticky
tags (see node `Sticky tags\(aq up in tha CVS manual) is a funky-ass betta way ta decide
which branch you wanna work on. I aint talkin' bout chicken n' gravy biatch.  There is one reason
to run \fBcvs admin -b\fR: ta revert ta tha vendor\(aqs
version when rockin vendor branches (see node `Reverting
local chizzles\(aq up in tha CVS manual).
There can be no space between \fB-b\fR n' its argument.
.SP
.IX "Comment leader"
.IP "" 0
\fB-c\fIstring\fB\fR
.IP "" 2
Sets tha comment leader ta \fIstring\fR.  Da comment
leader aint used by current versionz of \fBcvs\fR or
\fBrcs\fR 5.7.  Therefore, you can almost surely not
worry bout dat shit.  See `Keyword substitution\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB-e[\fIlogins\fB]\fR
.IP "" 2
Might not work together wit \fBcvs\fR.  Erase tha login
names appearin up in tha comma-separated list
\fIlogins\fR from tha access list of tha RCS file.  If
\fIlogins\fR is omitted, erase tha entire access list.
There can be no space between \fB-e\fR n' its argument.
.SP
.IP "" 0
\fB-I\fR
.IP "" 2
Run interactively, even if tha standard input aint a
terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  This option do not work wit the
client/server \fBcvs\fR n' is likely ta disappear in
a future release of \fBcvs\fR.
.SP
.IP "" 0
\fB-i\fR
.IP "" 2
Useless wit \fBcvs\fR.  This creates n' initializes a
new \fBrcs\fR file, without depositin a revision. I aint talkin' bout chicken n' gravy biatch.  With
\fBcvs\fR, add filez wit tha \fBcvs add\fR command
(see node `Addin files\(aq up in tha CVS manual).
.SP
.IP "" 0
\fB-k\fIsubst\fB\fR
.IP "" 2
Set tha default keyword
substitution ta \fIsubst\fR.  See `Keyword
substitution\(aq up in tha CVS manual. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Givin a explicit \fB-k\fR option to
\fBcvs update\fR, \fBcvs export\fR, or \fBcvs
checkout\fR overrides dis default.
.SP
.IP "" 0
\fB-l[\fIrev\fB]\fR
.IP "" 2
Lock tha revision wit number \fIrev\fR.  If a funky-ass branch
is given, lock tha sickest fuckin revision on dat branch.  If
\fIrev\fR is omitted, lock tha sickest fuckin revision on the
default branch.  There can be no space between
\fB-l\fR n' its argument.
.SP
This can be used up in conjunction wit the
\fBrcslock.pl\fR script up in tha \fBcontrib\fR
directory of tha \fBcvs\fR source distribution to
provide reserved checkouts (where only one user can be
editin a given file at a time).  See tha comments in
that file fo' details (and peep tha \fBREADME\fR file
in dat directory fo' disclaimers bout tha unsupported
nature of contrib).  Accordin ta comments up in that
file, lockin must set ta strict (which is tha default).
.SP
.IP "" 0
\fB-L\fR
.IP "" 2
Set lockin ta strict.  Strict lockin means dat the
balla of a RCS file aint exempt from lockin for
checkin. I aint talkin' bout chicken n' gravy biatch.  For use wit \fBcvs\fR, strict lockin must be
set; peep tha rap under tha \fB-l\fR option above.
.SP
.IX "Changin a log message"
.IX "Replacin a log message"
.IX "Correctin a log message"
.IX "Fixin a log message"
.IX "Log message, erecting"
.IP "" 0
\fB-m\fIrev\fB:\fImsg\fB\fR
.IP "" 2
Replace tha log message of revision \fIrev\fR with
\fImsg\fR.
.SP
.IP "" 0
\fB-N\fIname\fB[:[\fIrev\fB]]\fR
.IP "" 2
Act like \fB-n\fR, except override any previous
assignment of \fIname\fR.  For use wit magic branches,
see `Magic branch numbers\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB-n\fIname\fB[:[\fIrev\fB]]\fR
.IP "" 2
Associate tha symbolic name \fIname\fR wit tha branch
or revision \fIrev\fR.  It be normally betta ta use
\fBcvs tag\fR or \fBcvs rtag\fR instead. Y'all KNOW dat shit, muthafucka!  Delete the
symbolic name if both \fB:\fR n' \fIrev\fR are
omitted; otherwise, print a error message if
\fIname\fR be already associated wit another number.
If \fIrev\fR is symbolic, it is expanded before
association. I aint talkin' bout chicken n' gravy biatch.  A \fIrev\fR consistin of a funky-ass branch number
followed by a \fB.\fR standz fo' tha current sickest fuckin
revision up in tha branch.  A \fB:\fR wit a empty
\fIrev\fR standz fo' tha current sickest fuckin revision on the
default branch, normally tha trunk.  For example,
\fBcvs admin -n\fIname\fB:\fR associates \fIname\fR wit the
current sickest fuckin revision of all tha RCS files;
this contrasts wit \fBcvs admin -n\fIname\fB:$\fR which
associates \fIname\fR wit tha revision numbers
extracted from keyword strings up in tha corresponding
workin files.
.SP
.IX "Deletin revisions"
.IX "Outpimpin revisions"
.IX "Savin space"
.IP "" 0
\fB-o\fIrange\fB\fR
.IP "" 2
Deletes (\fIoutdates\fR) tha revisions given by
\fIrange\fR.
.SP
Note dat dis command can be like fucked up unless
you know \fIexactly\fR what tha fuck yo ass is bustin (for example
see tha warnings below bout how tha fuck the
\fIrev1\fR:\fIrev2\fR syntax is confusing).
.SP
If yo ass is short on disc dis option might help yo thugged-out ass.
But be thinkin twice before rockin it\(emthere is no way short
of restorin tha sickest fuckin backup ta undo dis command!
If you delete different revisions than you planned,
either cuz of carelessnizz or (heaven forbid) a \fBcvs\fR
bug, there is no opportunitizzle ta erect tha error
before tha revisions is deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  It probably would be
a phat scam ta experiment on a cold-ass lil copy of tha repository
first.
.SP
Specify \fIrange\fR up in one of tha followin ways:
.SP
.IP "" 2
\fB\fIrev1\fB::\fIrev2\fB\fR
.IP "" 4
Collapse all revisions between rev1 n' rev2, so that
\fBcvs\fR only stores tha differences associated wit going
from rev1 ta rev2, not intermediate steps.  For
example, afta \fB-o 1.3::1.5\fR one can retrieve
revision 1.3, revision 1.5, or tha differences ta get
from 1.3 ta 1.5 yo, but not tha revision 1.4, or the
differences between 1.3 n' 1.4.  Other examples:
\fB-o 1.3::1.4\fR n' \fB-o 1.3::1.3\fR have no
effect, cuz there be no intermediate revisions to
remove.
.SP
.IP "" 2
\fB::\fIrev\fB\fR
.IP "" 4
Collapse revisions between tha beginnin of tha branch
containin \fIrev\fR n' \fIrev\fR itself.  The
branchpoint n' \fIrev\fR is left intact.  For
example, \fB-o ::1.3.2.6\fR deletes revision 1.3.2.1,
revision 1.3.2.5, n' every last muthafuckin thang up in between yo, but leaves
1.3 n' 1.3.2.6 intact.
.SP
.IP "" 2
\fB\fIrev\fB::\fR
.IP "" 4
Collapse revisions between \fIrev\fR n' tha end of the
branch containin \fIrev\fR.  Revision \fIrev\fR is
left intact but tha head revision is deleted.
.SP
.IP "" 2
\fB\fIrev\fB\fR
.IP "" 4
Delete tha revision \fIrev\fR.  For example, \fB-o
1.3\fR is equivalent ta \fB-o 1.2::1.4\fR.
.SP
.IP "" 2
\fB\fIrev1\fB:\fIrev2\fB\fR
.IP "" 4
Delete tha revisions from \fIrev1\fR ta \fIrev2\fR,
inclusive, on tha same branch.  One aint gonna be able to
retrieve \fIrev1\fR or \fIrev2\fR or any of the
revisions up in between. I aint talkin' bout chicken n' gravy biatch.  For example, tha command
\fBcvs admin -oR_1_01:R_1_02 \&.\fR is rarely useful.
It means ta delete revisions up to, n' including, the
tag R_1_02.  But beware biaaatch!  If there be filez dat have not
changed between R_1_02 n' R_1_03 tha file will have
\fIthe same\fR numerical revision number assigned to
the tags R_1_02 n' R_1_03.  So not only will it be
impossible ta retrieve R_1_02; R_1_03 will also have to
be restored from tha tapes muthafucka!  In most cases you want to
specify \fIrev1\fR::\fIrev2\fR instead.
.SP
.IP "" 2
\fB:\fIrev\fB\fR
.IP "" 4
Delete revisions from tha beginnin of the
branch containin \fIrev\fR up ta n' including
\fIrev\fR.
.SP
.IP "" 2
\fB\fIrev\fB:\fR
.IP "" 4
Delete revisions from revision \fIrev\fR, including
\fIrev\fR itself, ta tha end of tha branch containing
\fIrev\fR.
.SP
None of tha revisions ta be deleted may have
branches or locks.
.SP
If any of tha revisions ta be deleted have symbolic
names, n' one specifies one of tha \fB::\fR syntaxes,
then \fBcvs\fR will give a error n' not delete any
revisions.  If you straight-up wanna delete both the
symbolic names n' tha revisions, first delete the
symbolic names wit \fBcvs tag -d\fR, then run
\fBcvs admin -o\fR.  If one specifies the
non-\fB::\fR syntaxes, then \fBcvs\fR will delete the
revisions but leave tha symbolic names pointin to
nonexistent revisions.  This behavior is preserved for
compatibilitizzle wit previous versionz of \fBcvs\fR yo, but
because it isn\(aqt straight-up useful, up in tha future it may
change ta be like tha \fB::\fR case.
.SP
Cuz of tha way \fBcvs\fR handlez branches \fIrev\fR
cannot be specified symbolically if it aint nuthin but a funky-ass branch.
See `Magic branch numbers\(aq up in tha CVS manual fo' a explanation.
.SP
Make shizzle dat no-one has checked up a cold-ass lil copy of the
revision you outdate.  Strange thangs will happen if he
starts ta edit it n' tries ta check it back in. I aint talkin' bout chicken n' gravy biatch.  For
this reason, dis option aint a phat way ta take back
a bogus commit; commit a freshly smoked up revision unfuckin wit tha bogus
change instead (see node `Mergin two revisions\(aq up in tha CVS manual).
.SP
.IP "" 0
\fB-q\fR
.IP "" 2
Run on tha fuckin' down-lowly; do not print diagnostics.
.SP
.IP "" 0
\fB-s\fIstate\fB[:\fIrev\fB]\fR
.IP "" 2
Useful wit \fBcvs\fR.  Set tha state attribute of the
revision \fIrev\fR ta \fIstate\fR.  If \fIrev\fR be a
branch number, assume tha sickest fuckin revision on that
branch.  If \fIrev\fR is omitted, assume tha sickest fuckin
revision on tha default branch.  Any identifier is
acceptable fo' \fIstate\fR.  A useful set of states is
\fBExp\fR (for experimental), \fBStab\fR (for
stable), n' \fBRel\fR (for busted out).  By default,
the state of a freshly smoked up revision is set ta \fBExp\fR when
it is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da state is visible up in tha output from
\fIcvs log\fR (see node `log\(aq up in tha CVS manual), n' up in the
\fB$\fP\fPLog$\fR n' \fB$\fP\fPState$\fR keywords
(see node `Keyword substitution\(aq up in tha CVS manual).  Note dat \fBcvs\fR
uses tha \fBdead\fR state fo' its own purposes (see node `Attic\(aq up in tha CVS manual); to
take a gangbangin' file ta or from tha \fBdead\fR state use
commandz like \fBcvs remove\fR n' \fBcvs add\fR
(see node `Addin n' removing\(aq up in tha CVS manual), not \fBcvs admin -s\fR.
.SP
.IP "" 0
\fB-t[\fIfile\fB]\fR
.IP "" 2
Useful wit \fBcvs\fR.  Write descriptizzle text from the
contentz of tha named \fIfile\fR tha fuck into tha RCS file,
deletin tha existin text.  Da \fIfile\fR pathname
may not begin wit \fB-\fR.  Da descriptizzle text can be peeped up in the
output from \fBcvs log\fR (see node `log\(aq up in tha CVS manual).
There can be no space between \fB-t\fR n' its argument.
.SP
If \fIfile\fR is omitted,
obtain tha text from standard input, terminated by
end-of-file or by a line containin \fB.\fR by itself.
Prompt fo' tha text if interaction is possible; see
\fB-I\fR.
.SP
.IP "" 0
\fB-t-\fIstring\fB\fR
.IP "" 2
Similar ta \fB-t\fIfile\fB\fR. Write descriptizzle text
from tha \fIstring\fR tha fuck into tha \fBrcs\fR file, deleting
the existin text.
There can be no space between \fB-t\fR n' its argument.
.SP
.IP "" 0
\fB-U\fR
.IP "" 2
Set lockin ta non-strict.  Non-strict lockin means
that tha balla of a gangbangin' file need not lock a revision for
checkin. I aint talkin' bout chicken n' gravy biatch.  For use wit \fBcvs\fR, strict lockin must be
set; peep tha rap under tha \fB-l\fR option
above.
.SP
.IP "" 0
\fB-u[\fIrev\fB]\fR
.IP "" 2
See tha option \fB-l\fR above, fo' a gangbangin' finger-lickin' rap of
usin dis option wit \fBcvs\fR.  Unlock tha revision
with number \fIrev\fR.  If a funky-ass branch is given, unlock
the sickest fuckin revision on dat branch.  If \fIrev\fR is
omitted, remove tha sickest fuckin lock held by tha caller.
Normally, only tha locker of a revision may unlock it;
somebody else unlockin a revision breaks tha lock.
This causes tha original gangsta locker ta be busted a \fBcommit\fR
notification (see node `Gettin Notified\(aq up in tha CVS manual).
There can be no space between \fB-u\fR n' its argument.
.SP
.IP "" 0
\fB-V\fIn\fB\fR
.IP "" 2
In previous versionz of \fBcvs\fR, dis option meant to
write a \fBrcs\fR file which would be aaight to
\fBrcs\fR version \fIn\fR yo, but it is now obsolete and
specifyin it will produce a error.
.SP
.IP "" 0
\fB-x\fIsuffixes\fB\fR
.IP "" 2
In previous versionz of \fBcvs\fR, dis was documented
as a way of specifyin tha namez of tha \fBrcs\fR
files.  But fuck dat shiznit yo, tha word on tha street is dat \fBcvs\fR has always required dat the
\fBrcs\fR filez used by \fBcvs\fR end up in \fB,v\fR, so
this option has never done anythang useful.
.SP
.SP
.SH "annotate"
.SS "What revision modified each line of a gangbangin' file?"
.IX "annotate (subcommand)"
.SP
.IP "\(bu" 2
Synopsis: annotate [options] files\&...
.IP "\(bu" 2
Requires: repository.
.IP "\(bu" 2
Synonym: blame
.IP "\(bu" 2
Changes: nothing.
.SP
For each file up in \fIfiles\fR, print tha head revision
of tha trunk, together wit shiznit on tha last
modification fo' each line.  
.SP
.SH "annotate options"
.SP
These standard options is supported by \fBannotate\fR
(see node `Common options\(aq up in tha CVS manual fo' a cold-ass lil complete description of
them):
.SP
.IP "" 0
\fB-l\fR
.IP "" 2
Local directory only, no recursion.
.SP
.IP "" 0
\fB-R\fR
.IP "" 2
Process directories recursively.
.SP
.IP "" 0
\fB-f\fR
.IP "" 2
Use head revision if tag/date not found.
.SP
.IP "" 0
\fB-F\fR
.IP "" 2
Annotate binary files.
.SP
.IP "" 0
\fB-r \fIrevision\fB\fR
.IP "" 2
Annotate file az of specified revision/tag.
.SP
.IP "" 0
\fB-D \fIdate\fB\fR
.IP "" 2
Annotate file az of specified date.
.SP
.SH "annotate example"
.SP
For example:
.SP
.PD 0
.SP
.IP "" 2
$ cvs annotate ssfile
.IP "" 2
Annotations fo' ssfile
.IP "" 2
***************
.IP "" 2
1.1          (mary     27-Mar-96): ssfile line 1
.IP "" 2
1.2          (joe      28-Mar-96): ssfile line 2

.PD
.IP "" 0
.SP
Da file \fBssfile\fR currently gotz nuff two lines.
Da \fBssfile line 1\fR line was checked up in by
\fBmary\fR on March 27.  Then, on March 28, \fBjoe\fR
added a line \fBssfile line 2\fR, without modifying
the \fBssfile line 1\fR line.  This report don\(aqt
tell you anythang bout lines which done been deleted
or replaced; you need ta use \fBcvs diff\fR fo' that
(see node `diff\(aq up in tha CVS manual).
.SP
Da options ta \fBcvs annotate\fR is listed in
`Invokin CVS\(aq up in tha CVS manual, n' can be used ta select tha files
and revisions ta annotate.  Da options is busted lyrics about
in mo' detail there n' up in `Common options\(aq up in tha CVS manual.
.SP
.SH "checkout"
.SS "Peep up sources fo' editing"
.IX "checkout (subcommand)"
.IX "co (subcommand)"
.SP
.IP "\(bu" 2
Synopsis: checkout [options] modules\&...
.IP "\(bu" 2
Requires: repository.
.IP "\(bu" 2
Changes: hustlin directory.
.IP "\(bu" 2
Synonyms: co, get
.SP
Smoke or update a hustlin directory containin copiez of the
source filez specified by \fImodules\fR.  Yo ass must execute
\fBcheckout\fR before rockin most of tha other \fBcvs\fR
commands, since most of dem operate on yo' working
directory.
.SP
Da \fImodules\fR is either
symbolic names fo' some
collection of source directories n' files, or paths to
directories or filez up in tha repository.  Da symbolic
names is defined up in tha \fBmodules\fR file.
See `modules\(aq up in tha CVS manual.
.SP
Dependin on tha modulez you specify, \fBcheckout\fR may
recursively create directories n' populate dem with
the appropriate source files.  Yo ass can then edit these
source filez at any time (regardless of whether other
software pimpers is editin they own copiez of the
sources); update dem ta include freshly smoked up chizzlez applied by
others ta tha source repository; or commit yo' work as
a permanent chizzle ta tha source repository.
.SP
Note dat \fBcheckout\fR is used ta create
directories. Put ya muthafuckin choppers up if ya feel dis!  Da top-level directory pimped be always
added ta tha directory where \fBcheckout\fR is
invoked, n' probably has tha same ol' dirty name as tha specified
module.  In tha case of a module alias, tha pimped
sub-directory may gotz a gangbangin' finger-lickin' different name yo, but you can be
sure dat it is ghon be a sub-directory, n' that
\fBcheckout\fR will show tha relatizzle path leadin to
each file as it is extracted tha fuck into yo' private work
area (unless you specify tha \fB-Q\fR global option).
.SP
Da filez pimped by \fBcheckout\fR is pimped
read-write, unless tha \fB-r\fR option ta \fBcvs\fR
(see node `Global options\(aq up in tha CVS manual) is specified, the
\fBCVSREAD\fR environment variable is specified
(see node `Environment variables\(aq up in tha CVS manual), or a peep is in
effect fo' dat file (see node `Watches\(aq up in tha CVS manual).
.SP
Note dat hustlin \fBcheckout\fR on a gangbangin' finger-lickin' directory dat was already
built by a prior \fBcheckout\fR be also permitted.
This is similar ta specifyin tha \fB-d\fR option
to tha \fBupdate\fR command up in tha sense dat new
directories dat done been pimped up in tha repository
will step tha fuck up in yo' work area.
But fuck dat shiznit yo, tha word on tha street is dat \fBcheckout\fR takes a module name whereas
\fBupdate\fR takes a gangbangin' finger-lickin' directory name.  Also
to use \fBcheckout\fR dis way it must be run from the
top level directory (where you originally ran
\fBcheckout\fR from), so before you run
\fBcheckout\fR ta update a existin directory, don\(aqt
forget ta chizzle yo' directory ta tha top level
directory.
.SP
For tha output produced by tha \fBcheckout\fR command,
see node `update output\(aq up in tha CVS manual.
.SP
.SH "checkout options"
.SP
These standard options is supported by \fBcheckout\fR
(see node `Common options\(aq up in tha CVS manual fo' a cold-ass lil complete description of
them):
.SP
.IP "" 0
\fB-D \fIdate\fB\fR
.IP "" 2
Use da most thugged-out recent revision no lata than \fIdate\fR.
This option is sticky, n' implies \fB-P\fR.  See
`Sticky tags\(aq up in tha CVS manual fo' mo' shiznit on sticky tags/dates.
.SP
.IP "" 0
\fB-f\fR
.IP "" 2
Only useful wit tha \fB-D \fIdate\fB\fR or \fB-r
\fItag\fB\fR flags.  If no matchin revision is found,
retrieve da most thugged-out recent revision (instead of ignoring
the file).
.SP
.IP "" 0
\fB-k \fIkflag\fB\fR
.IP "" 2
Process keywordz accordin ta \fIkflag\fR.  See
`Keyword substitution\(aq up in tha CVS manual.
This option is sticky; future thugged-out shiznit of
this file up in dis hustlin directory will use tha same
\fIkflag\fR.  Da \fBstatus\fR command can be viewed
to peep tha sticky options.  See `Invokin CVS\(aq up in tha CVS manual for
more shiznit on tha \fBstatus\fR command.
.SP
.IP "" 0
\fB-l\fR
.IP "" 2
Local; run only up in current hustlin directory.
.SP
.IP "" 0
\fB-n\fR
.IP "" 2
Do not run any checkout program (as specified
with tha \fB-o\fR option up in tha modulez file;
see node `modules\(aq up in tha CVS manual).
.SP
.IP "" 0
\fB-P\fR
.IP "" 2
Prune empty directories. Put ya muthafuckin choppers up if ya feel dis!  See `Movin directories\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB-p\fR
.IP "" 2
Pipe filez ta tha standard output.
.SP
.IP "" 0
\fB-R\fR
.IP "" 2
Checkout directories recursively.  This option is on by default.
.SP
.IP "" 0
\fB-r \fItag\fB\fR
.IP "" 2
Use revision \fItag\fR.  This option is sticky, n' implies \fB-P\fR.
See `Sticky tags\(aq up in tha CVS manual, fo' mo' shiznit on sticky tags/dates.
.SP
In addizzle ta them, you can use these special command
options wit \fBcheckout\fR:
.SP
.IP "" 0
\fB-A\fR
.IP "" 2
Reset any sticky tags, dates, or \fB-k\fR options.
Do not reset sticky \fB-k\fR options on modified files.
See `Sticky tags\(aq up in tha CVS manual fo' mo' shiznit on sticky tags/dates.
.SP
.IP "" 0
\fB-c\fR
.IP "" 2
Copy tha module file, sorted, ta tha standard output,
instead of bustin or modifyin any filez or
directories up in yo' hustlin directory.
.SP
.IP "" 0
\fB-d \fIdir\fB\fR
.IP "" 2
Smoke a gangbangin' finger-lickin' directory called \fIdir\fR fo' tha working
files, instead of rockin tha module name.  In general,
usin dis flag is equivalent ta rockin \fBmkdir
\fIdir\fB; cd \fIdir\fB\fR followed by tha checkout
command without tha \fB-d\fR flag.
.SP
There be a blingin exception, however n' shit.  It be hella
convenient when checkin up a single item ta have the
output step tha fuck up in a gangbangin' finger-lickin' directory dat don\(aqt contain empty
intermediate directories. Put ya muthafuckin choppers up if ya feel dis!  In dis case \fIonly\fR,
\fBcvs\fR tries ta \`\`shorten\(aq\(aq pathnames ta avoid dem empty
directories.
.SP
For example, given a module \fBfoo\fR dat gotz nuff
the file \fBbar.c\fR, tha command \fBcvs co -d dir
foo\fR will create directory \fBdir\fR n' place
\fBbar.c\fR inside.  Similarly, given a module
\fBbar\fR which has subdirectory \fBbaz\fR wherein
there be a gangbangin' file \fBquux.c\fR, tha command \fBcvs co
-d dir bar/baz\fR will create directory \fBdir\fR and
place \fBquux.c\fR inside.
.SP
Usin tha \fB-N\fR flag will defeat dis behavior.
Given tha same module definitions above, \fBcvs co
-N -d dir foo\fR will create directories \fBdir/foo\fR
and place \fBbar.c\fR inside, while \fBcvs co -N -d
dir bar/baz\fR will create directories \fBdir/bar/baz\fR
and place \fBquux.c\fR inside.
.SP
.IP "" 0
\fB-j \fItag\fB\fR
.IP "" 2
With two \fB-j\fR options, merge chizzlez from the
revision specified wit tha straight-up original gangsta \fB-j\fR option to
the revision specified wit tha second \fBj\fR option,
into tha hustlin directory.
.SP
With one \fB-j\fR option, merge chizzlez from the
ancestor revision ta tha revision specified wit the
\fB-j\fR option, tha fuck into tha hustlin directory.  The
ancestor revision is tha common ancestor of the
revision which tha hustlin directory is based on, and
the revision specified up in tha \fB-j\fR option.
.SP
In addition, each -j option can contain a optional
date justification which, when used wit branches, can
limit tha chosen revision ta one within a specific
date.  An optionizzle date is specified by addin a cold-ass lil colon
(:) ta tha tag:
\fB-j\fISymbolic_Tag\fB:\fIDate_Specifier\fB\fR.
.SP
See `Branchin n' merging\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB-N\fR
.IP "" 2
Only useful together wit \fB-d \fIdir\fB\fR.  With
this option, \fBcvs\fR aint gonna \`\`shorten\(aq\(aq module paths
in yo' hustlin directory when you check up a single
module.  See tha \fB-d\fR flag fo' examplez n' a
rap.
.SP
.IP "" 0
\fB-s\fR
.IP "" 2
Like \fB-c\fR yo, but include tha statuz of all modules,
and sort it by tha status string.  See `modules\(aq up in tha CVS manual, for
info bout tha \fB-s\fR option dat is used inside the
modulez file ta set tha module status.
.SP
.SH "checkout examples"
.SP
Git a cold-ass lil copy of tha module \fBtc\fR:
.SP
.PD 0
.SP
.IP "" 2
$ cvs checkout tc

.PD
.IP "" 0
.SP
Git a cold-ass lil copy of tha module \fBtc\fR as it looked one day
ago:
.SP
.PD 0
.SP
.IP "" 2
$ cvs checkout -D yesterdizzle tc

.PD
.IP "" 0
.SP
.SH "commit"
.SS "Peep filez tha fuck into tha repository"
.IX "commit (subcommand)"
.SP
.IP "\(bu" 2
Synopsis: commit [-lRf] [-m \(aqlog_message\(aq |
-F file] [-r revision] [files\&...]
.IP "\(bu" 2
Requires: hustlin directory, repository.
.IP "\(bu" 2
Changes: repository.
.IP "\(bu" 2
Synonym: ci
.SP
Use \fBcommit\fR when you wanna incorporate chizzles
from yo' hustlin source filez tha fuck into tha source
repository.
.SP
If you don\(aqt specify particular filez ta commit, all of
the filez up in yo' hustlin current directory are
examined. Y'all KNOW dat shit, muthafucka!  \fBcommit\fR is careful ta chizzle up in the
repository only dem filez dat you have straight-up
changed. Y'all KNOW dat shit, muthafucka!  By default (or if you explicitly specify the
\fB-R\fR option), filez up in subdirectories is also
examined n' committed if they have chizzled; you can
use tha \fB-l\fR option ta limit \fBcommit\fR ta the
current directory only.
.SP
\fBcommit\fR verifies dat tha selected filez is up
to date wit tha current revisions up in tha source
repository; it will notify you, n' exit without
committing, if any of tha specified filez must be made
current first wit \fBupdate\fR (see node `update\(aq up in tha CVS manual).
\fBcommit\fR do not call tha \fBupdate\fR command
for you yo, but rather leaves dat fo' you ta do when the
time is right.
.SP
When all is well, a editor is invoked ta allow you to
enta a log message dat is ghon be freestyled ta one or more
loggin programs (see node `modules\(aq up in tha CVS manual, n' peep node `loginfo\(aq up in tha CVS manual)
and placed up in tha \fBrcs\fR file inside the
repository.  This log message can be retrieved wit the
\fBlog\fR command; peep node `log\(aq up in tha CVS manual. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Yo ass can specify the
log message on tha command line wit tha \fB-m
\fImessage\fB\fR option, n' thus avoid tha editor invocation,
or use tha \fB-F \fIfile\fB\fR option ta specify
that tha argument file gotz nuff tha log message.
.SP
.SH "commit options"
.SP
These standard options is supported by \fBcommit\fR
(see node `Common options\(aq up in tha CVS manual fo' a cold-ass lil complete description of
them):
.SP
.IP "" 0
\fB-l\fR
.IP "" 2
Local; run only up in current hustlin directory.
.SP
.IP "" 0
\fB-R\fR
.IP "" 2
Commit directories recursively.  This is on by default.
.SP
.IP "" 0
\fB-r \fIrevision\fB\fR
.IP "" 2
Commit ta \fIrevision\fR.  \fIrevision\fR must be
either a funky-ass branch, or a revision on tha main trunk that
is higher than any existin revision number
(see node `Assignin revisions\(aq up in tha CVS manual).  You
cannot commit ta a specific revision on a funky-ass branch.
.SP
\fBcommit\fR also supports these options:
.SP
.IP "" 0
\fB-F \fIfile\fB\fR
.IP "" 2
Read tha log message from \fIfile\fR, instead
of invokin a editor.
.SP
.IP "" 0
\fB-f\fR
.IP "" 2
Note dat dis aint tha standard behavior of
the \fB-f\fR option as defined up in `Common options\(aq up in tha CVS manual.
.SP
Force \fBcvs\fR ta commit a freshly smoked up revision even if you haven\(aqt
made any chizzlez ta tha file.  If tha current revision
of \fIfile\fR is 1.7, then tha followin two commands
are equivalent:
.SP
.PD 0
.SP
.IP "" 4
$ cvs commit -f \fIfile\fR
.IP "" 4
$ cvs commit -r 1.8 \fIfile\fR

.PD
.IP "" 2
.SP
Da \fB-f\fR option disablez recursion (i.e., it
implies \fB-l\fR).  To force \fBcvs\fR ta commit a new
revision fo' all filez up in all subdirectories, you must
use \fB-f -R\fR.
.SP
.IP "" 0
\fB-m \fImessage\fB\fR
.IP "" 2
Use \fImessage\fR as tha log message, instead of
invokin a editor.
.SP
.SH "commit examples"
.SP
.SS "Committin ta a funky-ass branch"
.SP
Yo ass can commit ta a funky-ass branch revision (one dat has an
even number of dots) wit tha \fB-r\fR option. I aint talkin' bout chicken n' gravy biatch.  To
create a funky-ass branch revision, use tha \fB-b\fR option
of tha \fBrtag\fR or \fBtag\fR commands
(see node `Branchin n' merging\(aq up in tha CVS manual).  Then, either \fBcheckout\fR or
\fBupdate\fR can be used ta base yo' sources on the
newly pimped branch.  From dat point on, all
\fBcommit\fR chizzlez made within these hustlin sources
will be automatically added ta a funky-ass branch revision,
thereby not disturbin main-line pimpment up in any
way.  For example, if you had ta create a patch ta the
1.2 version of tha product, even though tha 2.0 version
is already under pimpment, you might do:
.SP
.PD 0
.SP
.IP "" 2
$ cvs rtag -b -r FCS1_2 FCS1_2_Patch product_module
.IP "" 2
$ cvs checkout -r FCS1_2_Patch product_module
.IP "" 2
$ cd product_module
.IP "" 2
[[ hack away ]]
.IP "" 2
$ cvs commit

.PD
.IP "" 0
.SP
This works automatically since tha \fB-r\fR option is
sticky.
.SP
.SS "Creatin tha branch afta editing"
.SP
Say you done been hustlin on some mad
experimenstrual software, based on whatever revision you
happened ta checkout last week.  If others up in your
group wanna work on dis software wit you yo, but
without disturbin main-line pimpment, you could
commit yo' chizzle ta a freshly smoked up branch.  Others can then
checkout yo' experimenstrual shiznit n' utilize tha full
benefit of \fBcvs\fR conflict resolution. I aint talkin' bout chicken n' gravy biatch.  Da scenario might
look like:
.SP
.PD 0
.SP
.IP "" 2
[[ jacked sources is present ]]
.IP "" 2
$ cvs tag -b EXPR1
.IP "" 2
$ cvs update -r EXPR1
.IP "" 2
$ cvs commit

.PD
.IP "" 0
.SP
Da \fBupdate\fR command will make tha \fB-r
EXPR1\fR option sticky on all files.  Note dat your
changes ta tha filez aint NEVER gonna be removed by the
\fBupdate\fR command. Y'all KNOW dat shit, muthafucka!  Da \fBcommit\fR will
automatically commit ta tha erect branch, cuz the
\fB-r\fR is sticky.  Yo ass could also do like this:
.SP
.PD 0
.SP
.IP "" 2
[[ jacked sources is present ]]
.IP "" 2
$ cvs tag -b EXPR1
.IP "" 2
$ cvs commit -r EXPR1

.PD
.IP "" 0
.SP
but then, only dem filez dat was chizzled by you
will have tha \fB-r EXPR1\fR sticky flag.  If you hack
away, n' commit without specifyin tha \fB-r EXPR1\fR
flag, some filez may accidentally end up on tha main
trunk.
.SP
To work wit you on tha experimenstrual chizzle, others
would simply do
.SP
.PD 0
.SP
.IP "" 2
$ cvs checkout -r EXPR1 whatever_module

.PD
.IP "" 0
.SP
.SH "diff"
.SS "Show differences between revisions"
.IX "diff (subcommand)"
.SP
.IP "\(bu" 2
Synopsis: diff [-lR] [-k kflag] [format_options] [[-r rev1 | -D date1] [-r rev2 |  -D date2]] [files\&...]
.IP "\(bu" 2
Requires: hustlin directory, repository.
.IP "\(bu" 2
Changes: nothing.
.SP
Da \fBdiff\fR command is used ta compare different
revisionz of files.  Da default action is ta compare
your hustlin filez wit tha revisions they was based
on, n' report any differences dat is found.
.SP
If any file names is given, only dem filez are
compared. Y'all KNOW dat shit, muthafucka!  If any directories is given, all files
under dem is ghon be compared.
.SP
Da exit status fo' diff is different than fo' other
\fBcvs\fR commands; fo' details peep node `Exit status\(aq up in tha CVS manual.
.SP
.SH "diff options"
.SP
These standard options is supported by \fBdiff\fR
(see node `Common options\(aq up in tha CVS manual fo' a cold-ass lil complete description of
them):
.SP
.IP "" 0
\fB-D \fIdate\fB\fR
.IP "" 2
Use da most thugged-out recent revision no lata than \fIdate\fR.
See \fB-r\fR fo' how tha fuck dis affects tha comparison.
.SP
.IP "" 0
\fB-k \fIkflag\fB\fR
.IP "" 2
Process keywordz accordin ta \fIkflag\fR.  See
`Keyword substitution\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB-l\fR
.IP "" 2
Local; run only up in current hustlin directory.
.SP
.IP "" 0
\fB-R\fR
.IP "" 2
Examine directories recursively.  This option is on by
default.
.SP
.IP "" 0
\fB-r \fItag\fB\fR
.IP "" 2
Compare wit revision \fItag\fR.  Zero, one or two
\fB-r\fR options can be present.  With no \fB-r\fR
option, tha hustlin file is ghon be compared wit the
revision dat shiznit was based on. I aint talkin' bout chicken n' gravy biatch.  With one \fB-r\fR, that
revision is ghon be compared ta yo' current hustlin file.
With two \fB-r\fR options dem two revisions will be
compared (and yo' hustlin file aint gonna affect the
outcome up in any way).
.SP
One or both \fB-r\fR options can be replaced by a
\fB-D \fIdate\fB\fR option, busted lyrics bout above.
.SP
Da followin options specify tha format of the
output.  They have tha same meanin as up in GNU diff.
Most options have two equivalent names, one of which be a single letter
preceded by \fB-\fR, n' tha other of which be a long-ass name preceded by
\fB--\fR.
.SP
.IP "" 0
\fB-\fIlines\fB\fR
.IP "" 2
Show \fIlines\fR (an integer) linez of context.  This option do not
specify a output format by itself; it has no effect unless it is
combined wit \fB-c\fR or \fB-u\fR.  This option is obsolete.  For proper
operation, \fBpatch\fR typically needz at least two linez of context.
.SP
.IP "" 0
\fB-a\fR
.IP "" 2
Treat all filez as text n' compare dem line-by-line, even if they
do not seem ta be text.
.SP
.IP "" 0
\fB-b\fR
.IP "" 2
Ignore trailin white space n' consider all other sequencez of one or
more white space charactas ta be equivalent.
.SP
.IP "" 0
\fB-B\fR
.IP "" 2
Ignore chizzlez dat just bang or delete blank lines.
.SP
.IP "" 0
\fB--binary\fR
.IP "" 2
Read n' write data up in binary mode.
.SP
.IP "" 0
\fB--brief\fR
.IP "" 2
Report only whether tha filez differ, not tha detailz of the
differences.
.SP
.IP "" 0
\fB-c\fR
.IP "" 2
Use tha context output format.
.SP
.IP "" 0
\fB-C \fIlines\fB\fR
.IP "" 2
.IP "" 0
\fB--context\fR[\fB=\fIlines\fB\fR]\fB\fR
.IP "" 2
Use tha context output format, showin \fIlines\fR (an integer) lines of
context, or three if \fIlines\fR aint given.
For proper operation, \fBpatch\fR typically needz at least two lines of
context.
.SP
.IP "" 0
\fB--changed-group-format=\fIformat\fB\fR
.IP "" 2
Use \fIformat\fR ta output a line crew containin differin lines from
both filez up in if-then-else format.  See `Line crew formats\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB-d\fR
.IP "" 2
Change tha algorithm ta like find a smalla set of chizzles.  This makes
\fBdiff\fR slower (sometimes much slower).
.SP
.IP "" 0
\fB-e\fR
.IP "" 2
.IP "" 0
\fB--ed\fR
.IP "" 2
Make output dat be a valid \fBed\fR script.
.SP
.IP "" 0
\fB--expand-tabs\fR
.IP "" 2
Expand tabs ta spaces up in tha output, ta preserve tha alignment of tabs
in tha input files.
.SP
.IP "" 0
\fB-f\fR
.IP "" 2
Make output dat looks vaguely like a \fBed\fR script but has chizzles
in tha order they step tha fuck up in tha file.
.SP
.IP "" 0
\fB-F \fIregexp\fB\fR
.IP "" 2
In context n' unified format, fo' each hunk of differences, show some
of tha last precedin line dat matches \fIregexp\fR.
.SP
.IP "" 0
\fB--forward-ed\fR
.IP "" 2
Make output dat looks vaguely like a \fBed\fR script but has chizzles
in tha order they step tha fuck up in tha file.
.SP
.IP "" 0
\fB-H\fR
.IP "" 2
Use heuristics ta speed handlin of big-ass filez dat gotz a shitload of
scattered lil' small-ass chizzles.
.SP
.IP "" 0
\fB--horizon-lines=\fIlines\fB\fR
.IP "" 2
Do not discard tha last \fIlines\fR linez of tha common prefix
and tha straight-up original gangsta \fIlines\fR linez of tha common suffix.
.SP
.IP "" 0
\fB-i\fR
.IP "" 2
Ignore chizzlez up in case; consider upper- n' lower-case letters
equivalent.
.SP
.IP "" 0
\fB-I \fIregexp\fB\fR
.IP "" 2
Ignore chizzlez dat just bang or delete lines dat match \fIregexp\fR.
.SP
.IP "" 0
\fB--ifdef=\fIname\fB\fR
.IP "" 2
Make merged if-then-else output rockin \fIname\fR.
.SP
.IP "" 0
\fB--ignore-all-space\fR
.IP "" 2
Ignore white space when comparin lines.
.SP
.IP "" 0
\fB--ignore-blank-lines\fR
.IP "" 2
Ignore chizzlez dat just bang or delete blank lines.
.SP
.IP "" 0
\fB--ignore-case\fR
.IP "" 2
Ignore chizzlez up in case; consider upper- n' lower-case ta be tha same.
.SP
.IP "" 0
\fB--ignore-matching-lines=\fIregexp\fB\fR
.IP "" 2
Ignore chizzlez dat just bang or delete lines dat match \fIregexp\fR.
.SP
.IP "" 0
\fB--ignore-space-change\fR
.IP "" 2
Ignore trailin white space n' consider all other sequencez of one or
more white space charactas ta be equivalent.
.SP
.IP "" 0
\fB--initial-tab\fR
.IP "" 2
Output a tab rather than a space before tha text of a line up in aiiight or
context format.  This causes tha alignment of tabs up in tha line ta look
normal.
.SP
.IP "" 0
\fB-L \fIlabel\fB\fR
.IP "" 2
Use \fIlabel\fR instead of tha file name up in tha context format
and unified format headers.
.SP
.IP "" 0
\fB--label=\fIlabel\fB\fR
.IP "" 2
Use \fIlabel\fR instead of tha file name up in tha context format
and unified format headers.
.SP
.IP "" 0
\fB--left-column\fR
.IP "" 2
Print only tha left column of two common lines up in side by side format.
.SP
.IP "" 0
\fB--line-format=\fIformat\fB\fR
.IP "" 2
Use \fIformat\fR ta output all input lines up in if-then-else format.
See `Line formats\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB--minimal\fR
.IP "" 2
Change tha algorithm ta like find a smalla set of chizzles.  This
makes \fBdiff\fR slower (sometimes much slower).
.SP
.IP "" 0
\fB-n\fR
.IP "" 2
Output RCS-format diffs; like \fB-f\fR except dat each command
specifies tha number of lines affected.
.SP
.IP "" 0
\fB-N\fR
.IP "" 2
.IP "" 0
\fB--new-file\fR
.IP "" 2
In directory comparison, if a gangbangin' file is found up in only one directory,
treat it as present but empty up in tha other directory.
.SP
.IP "" 0
\fB--new-group-format=\fIformat\fB\fR
.IP "" 2
Use \fIformat\fR ta output a crew of lines taken from just tha second
file up in if-then-else format.  See `Line crew formats\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB--new-line-format=\fIformat\fB\fR
.IP "" 2
Use \fIformat\fR ta output a line taken from just tha second file in
if-then-else format.  See `Line formats\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB--old-group-format=\fIformat\fB\fR
.IP "" 2
Use \fIformat\fR ta output a crew of lines taken from just tha first
file up in if-then-else format.  See `Line crew formats\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB--old-line-format=\fIformat\fB\fR
.IP "" 2
Use \fIformat\fR ta output a line taken from just tha straight-up original gangsta file in
if-then-else format.  See `Line formats\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB-p\fR
.IP "" 2
Show which C function each chizzle is in.
.SP
.IP "" 0
\fB--rcs\fR
.IP "" 2
Output RCS-format diffs; like \fB-f\fR except dat each command
specifies tha number of lines affected.
.SP
.IP "" 0
\fB--report-identical-files\fR
.IP "" 2
.IP "" 0
\fB-s\fR
.IP "" 2
Report when two filez is tha same.
.SP
.IP "" 0
\fB--show-c-function\fR
.IP "" 2
Show which C function each chizzle is in.
.SP
.IP "" 0
\fB--show-function-line=\fIregexp\fB\fR
.IP "" 2
In context n' unified format, fo' each hunk of differences, show some
of tha last precedin line dat matches \fIregexp\fR.
.SP
.IP "" 0
\fB--side-by-side\fR
.IP "" 2
Use tha side by side output format.
.SP
.IP "" 0
\fB--speed-large-files\fR
.IP "" 2
Use heuristics ta speed handlin of big-ass filez dat gotz a shitload of
scattered lil' small-ass chizzles.
.SP
.IP "" 0
\fB--suppress-common-lines\fR
.IP "" 2
Do not print common lines up in side by side format.
.SP
.IP "" 0
\fB-t\fR
.IP "" 2
Expand tabs ta spaces up in tha output, ta preserve tha alignment of tabs
in tha input files.
.SP
.IP "" 0
\fB-T\fR
.IP "" 2
Output a tab rather than a space before tha text of a line up in aiiight or
context format.  This causes tha alignment of tabs up in tha line ta look
normal.
.SP
.IP "" 0
\fB--text\fR
.IP "" 2
Treat all filez as text n' compare dem line-by-line, even if they
do not step tha fuck up ta be text.
.SP
.IP "" 0
\fB-u\fR
.IP "" 2
Use tha unified output format.
.SP
.IP "" 0
\fB--unchanged-group-format=\fIformat\fB\fR
.IP "" 2
Use \fIformat\fR ta output a crew of common lines taken from both files
in if-then-else format.  peep node `Line crew formats\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB--unchanged-line-format=\fIformat\fB\fR
.IP "" 2
Use \fIformat\fR ta output a line common ta both filez up in if-then-else
format.  peep node `Line formats\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB-U \fIlines\fB\fR
.IP "" 2
.IP "" 0
\fB--unified\fR[\fB=\fIlines\fB\fR]\fB\fR
.IP "" 2
Use tha unified output format, showin \fIlines\fR (an integer) lines of
context, or three if \fIlines\fR aint given.
For proper operation, \fBpatch\fR typically needz at least two lines of
context.
.SP
.IP "" 0
\fB-w\fR
.IP "" 2
Ignore white space when comparin lines.
.SP
.IP "" 0
\fB-W \fIcolumns\fB\fR
.IP "" 2
.IP "" 0
\fB--width=\fIcolumns\fB\fR
.IP "" 2
Use a output width of \fIcolumns\fR up in side by side format.
.SP
.IP "" 0
\fB-y\fR
.IP "" 2
Use tha side by side output format.
.SP
.SH "Line crew formats"
.SP
Line crew formats let you specify formats suitable fo' many
applications dat allow if-then-else input, includin programming
languages n' text formattin languages.  A line crew format specifies
the output format fo' a cold-ass lil contiguous crew of similar lines.
.SP
For example, tha followin command compares tha TeX file \fBmyfile\fR
with tha original gangsta version from tha repository,
and outputs a merged file up in which oldschool regions are
surrounded by \fB\\begin{em}\fR-\fB\\end{em}\fR lines, n' new
regions is surrounded by \fB\\begin{bf}\fR-\fB\\end{bf}\fR lines.
.SP
.PD 0
.SP
.IP "" 2
cvs diff \\
.IP "" 2
   --old-group-format=\(aq\\begin{em}
.IP "" 2
%<\\end{em}
.IP "" 2
\(aq \\
.IP "" 2
   --new-group-format=\(aq\\begin{bf}
.IP "" 2
%>\\end{bf}
.IP "" 2
\(aq \\
.IP "" 2
   myfile

.PD
.IP "" 0
.SP
Da followin command is equivalent ta tha above example yo, but it be a
lil mo' verbose, cuz it spells up tha default line crew formats.
.SP
.PD 0
.SP
.IP "" 2
cvs diff \\
.IP "" 2
   --old-group-format=\(aq\\begin{em}
.IP "" 2
%<\\end{em}
.IP "" 2
\(aq \\
.IP "" 2
   --new-group-format=\(aq\\begin{bf}
.IP "" 2
%>\\end{bf}
.IP "" 2
\(aq \\
.IP "" 2
   --unchanged-group-format=\(aq%=\(aq \\
.IP "" 2
   --changed-group-format=\(aq\\begin{em}
.IP "" 2
%<\\end{em}
.IP "" 2
\\begin{bf}
.IP "" 2
%>\\end{bf}
.IP "" 2
\(aq \\
.IP "" 2
   myfile

.PD
.IP "" 0
.SP
Here be a mo' advanced example, which outputs a gangbangin' finger-lickin' diff listin with
headaz containin line numbers up in a \`\`plain Gangsta\(aq\(aq style.
.SP
.PD 0
.SP
.IP "" 2
cvs diff \\
.IP "" 2
   --unchanged-group-format=\(aq\(aq \\
.IP "" 2
   --old-group-format=\(aq-------- %dn line%(n=1?:s) deleted at %df:
.IP "" 2
%<\(aq \\
.IP "" 2
   --new-group-format=\(aq-------- %dN line%(N=1?:s) added afta %de:
.IP "" 2
%>\(aq \\
.IP "" 2
   --changed-group-format=\(aq-------- %dn line%(n=1?:s) chizzled at %df:
.IP "" 2
%<-------- to:
.IP "" 2
%>\(aq \\
.IP "" 2
   myfile

.PD
.IP "" 0
.SP
To specify a line crew format, use one of tha options
listed below.  Yo ass can specify up ta four line crew formats, one for
each kind of line group.  Yo ass should quote \fIformat\fR, cuz it
typically gotz nuff shell metacharacters.
.SP
.IP "" 0
\fB--old-group-format=\fIformat\fB\fR
.IP "" 2
These line crews is hunks containin only lines from tha straight-up original gangsta file.
Da default oldschool crew format is tha same ol' dirty as tha chizzled crew format if
it is specified; otherwise it aint nuthin but a gangbangin' format dat outputs tha line crew as-is.
.SP
.IP "" 0
\fB--new-group-format=\fIformat\fB\fR
.IP "" 2
These line crews is hunks containin only lines from tha second
file.  Da default freshly smoked up crew format is same as tha chizzled group
format if it is specified; otherwise it aint nuthin but a gangbangin' format dat outputs the
line crew as-is.
.SP
.IP "" 0
\fB--changed-group-format=\fIformat\fB\fR
.IP "" 2
These line crews is hunks containin lines from both files.  The
default chizzled crew format is tha concatenation of tha oldschool n' new
group formats.
.SP
.IP "" 0
\fB--unchanged-group-format=\fIformat\fB\fR
.IP "" 2
These line crews contain lines common ta both files.  Da default
unchanged crew format be a gangbangin' format dat outputs tha line crew as-is.
.SP
In a line crew format, ordinary charactas represent theyselves;
conversion justifications start wit \fB%\fR n' have one of the
followin forms.
.SP
.IP "" 0
\fB%<\fR
.IP "" 2
standz fo' tha lines from tha straight-up original gangsta file, includin tha trailin newline.
Each line is formatted accordin ta tha oldschool line format (see node `Line formats\(aq up in tha CVS manual).
.SP
.IP "" 0
\fB%>\fR
.IP "" 2
standz fo' tha lines from tha second file, includin tha trailin newline.
Each line is formatted accordin ta tha freshly smoked up line format.
.SP
.IP "" 0
\fB%=\fR
.IP "" 2
standz fo' tha lines common ta both files, includin tha trailin newline.
Each line is formatted accordin ta tha unchanged line format.
.SP
.IP "" 0
\fB%%\fR
.IP "" 2
standz fo' \fB%\fR.
.SP
.IP "" 0
\fB%c\(aq\fIC\fB\(aq\fR
.IP "" 2
where \fIC\fR be a single character, standz fo' \fIC\fR.
\fIC\fR may not be a funky-ass backslash or a apostrophe.
For example, \fB%c\(aq:\(aq\fR standz fo' a cold-ass lil colon, even inside
the then-part of a if-then-else format, which a cold-ass lil colon would
normally terminate.
.SP
.IP "" 0
\fB%c\(aq\\\fIO\fB\(aq\fR
.IP "" 2
where \fIO\fR be a strang of 1, 2, or 3 octal digits,
standz fo' tha characta wit octal code \fIO\fR.
For example, \fB%c\(aq\\0\(aq\fR standz fo' a null character.
.SP
.IP "" 0
\fB\fIF\fB\fIn\fB\fR
.IP "" 2
where \fIF\fR be a \fBprintf\fR conversion justification n' \fIn\fR is one
of tha followin letters, standz fo' \fIn\fR\(aqs value formatted wit \fIF\fR.
.SP
.IP "" 2
\fBe\fR
.IP "" 4
Da line number of tha line just before tha crew up in tha oldschool file.
.SP
.IP "" 2
\fBf\fR
.IP "" 4
Da line number of tha straight-up original gangsta line up in tha crew up in tha oldschool file;
equals \fIe\fR + 1.
.SP
.IP "" 2
\fBl\fR
.IP "" 4
Da line number of tha last line up in tha crew up in tha oldschool file.
.SP
.IP "" 2
\fBm\fR
.IP "" 4
Da line number of tha line just afta tha crew up in tha oldschool file;
equals \fIl\fR + 1.
.SP
.IP "" 2
\fBn\fR
.IP "" 4
Da number of lines up in tha crew up in tha oldschool file; equals \fIl\fR - \fIf\fR + 1.
.SP
.IP "" 2
\fBE, F, L, M, N\fR
.IP "" 4
Likewise, fo' lines up in tha freshly smoked up file.
.SP
.SP
Da \fBprintf\fR conversion justification can be \fB%d\fR,
\fB%o\fR, \fB%x\fR, or \fB%X\fR, specifyin decimal, octal,
lower case hexadecimal, or upper case hexadecimal output
respectively.  Afta tha \fB%\fR tha followin options can step tha fuck up in
sequence: a \fB-\fR specifyin left-justification; a integer
specifyin tha minimum field width; n' a period followed by an
optionizzle integer specifyin tha minimum number of digits.
For example, \fB%5dN\fR prints tha number of freshly smoked up lines up in tha group
in a gangbangin' field of width 5 characters, rockin tha \fBprintf\fR format \fB"%5d"\fR.
.SP
.IP "" 0
\fB(\fIA\fB=\fIB\fB?\fIT\fB:\fIE\fB)\fR
.IP "" 2
If \fIA\fR equals \fIB\fR then \fIT\fR else \fIE\fR.
\fIA\fR n' \fIB\fR is each either a thugged-out decimal constant
or a single letta interpreted as above.
This format spec is equivalent ta \fIT\fR if
\fIA\fR\(aqs value equals \fIB\fR\(aqs; otherwise it is equivalent ta \fIE\fR.
.SP
For example, \fB%(N=0?no:%dN) line%(N=1?:s)\fR is equivalent to
\fBno lines\fR if \fIN\fR (the number of lines up in tha crew up in the
new file) is 0, ta \fB1 line\fR if \fIN\fR is 1, n' ta \fB%dN lines\fR
otherwise.
.SP
.SH "Line formats"
.SP
Line formats control how tha fuck each line taken from a input file is
output as part of a line crew up in if-then-else format.
.SP
For example, tha followin command outputs text wit a one-column
change indicator ta tha left of tha text.  Da first column of output
is \fB-\fR fo' deleted lines, \fB|\fR fo' added lines, n' a space
for unchanged lines.  Da formats contain newline charactas where
newlines is desired on output.
.SP
.PD 0
.SP
.IP "" 2
cvs diff \\
.IP "" 2
   --old-line-format=\(aq-%l
.IP "" 2
\(aq \\
.IP "" 2
   --new-line-format=\(aq|%l
.IP "" 2
\(aq \\
.IP "" 2
   --unchanged-line-format=\(aq %l
.IP "" 2
\(aq \\
.IP "" 2
   myfile

.PD
.IP "" 0
.SP
To specify a line format, use one of tha followin options.  Yo ass should
quote \fIformat\fR, since it often gotz nuff shell metacharacters.
.SP
.IP "" 0
\fB--old-line-format=\fIformat\fB\fR
.IP "" 2
formats lines just from tha straight-up original gangsta file.
.SP
.IP "" 0
\fB--new-line-format=\fIformat\fB\fR
.IP "" 2
formats lines just from tha second file.
.SP
.IP "" 0
\fB--unchanged-line-format=\fIformat\fB\fR
.IP "" 2
formats lines common ta both files.
.SP
.IP "" 0
\fB--line-format=\fIformat\fB\fR
.IP "" 2
formats all lines; up in effect, it sets all three above options simultaneously.
.SP
In a line format, ordinary charactas represent theyselves;
conversion justifications start wit \fB%\fR n' have one of the
followin forms.
.SP
.IP "" 0
\fB%l\fR
.IP "" 2
standz fo' tha contentz of tha line, not countin its trailing
newline (if any).  This format ignores whether tha line is incomplete.
.SP
.IP "" 0
\fB%L\fR
.IP "" 2
standz fo' tha contentz of tha line, includin its trailin newline
(if any).  If a line is incomplete, dis format preserves its
incompleteness.
.SP
.IP "" 0
\fB%%\fR
.IP "" 2
standz fo' \fB%\fR.
.SP
.IP "" 0
\fB%c\(aq\fIC\fB\(aq\fR
.IP "" 2
where \fIC\fR be a single character, standz fo' \fIC\fR.
\fIC\fR may not be a funky-ass backslash or a apostrophe.
For example, \fB%c\(aq:\(aq\fR standz fo' a cold-ass lil colon.
.SP
.IP "" 0
\fB%c\(aq\\\fIO\fB\(aq\fR
.IP "" 2
where \fIO\fR be a strang of 1, 2, or 3 octal digits,
standz fo' tha characta wit octal code \fIO\fR.
For example, \fB%c\(aq\\0\(aq\fR standz fo' a null character.
.SP
.IP "" 0
\fB\fIF\fBn\fR
.IP "" 2
where \fIF\fR be a \fBprintf\fR conversion justification,
standz fo' tha line number formatted wit \fIF\fR.
For example, \fB%.5dn\fR prints tha line number rockin the
\fBprintf\fR format \fB"%.5d"\fR.  peep node `Line crew formats\(aq up in tha CVS manual, for
more bout printf conversion justifications.
.SP
.SP
Da default line format is \fB%l\fR followed by a newline character.
.SP
If tha input gotz nuff tab charactas n' it is blingin dat they line
up on output, you should ensure dat \fB%l\fR or \fB%L\fR up in a line
format is just afta a tab stop (e.g. by precedin \fB%l\fR or
\fB%L\fR wit a tab character), or you should use tha \fB-t\fR or
\fB--expand-tabs\fR option.
.SP
Taken together, tha line n' line crew formats let you specify many
different formats, n' you can put dat on yo' toast.  For example, tha followin command uses a gangbangin' format
similar ta \fBdiff\fR\(aqs aiiight format.  Yo ass can tailor dis command
to git fine control over \fBdiff\fR\(aqs output.
.SP
.PD 0
.SP
.IP "" 2
cvs diff \\
.IP "" 2
   --old-line-format=\(aq< %l
.IP "" 2
\(aq \\
.IP "" 2
   --new-line-format=\(aq> %l
.IP "" 2
\(aq \\
.IP "" 2
   --old-group-format=\(aq%df%(f=l?:,%dl)d%dE
.IP "" 2
%<\(aq \\
.IP "" 2
   --new-group-format=\(aq%dea%dF%(F=L?:,%dL)
.IP "" 2
%>\(aq \\
.IP "" 2
   --changed-group-format=\(aq%df%(f=l?:,%dl)c%dF%(F=L?:,%dL)
.IP "" 2
%<\(em
.IP "" 2
%>\(aq \\
.IP "" 2
   --unchanged-group-format=\(aq\(aq \\
.IP "" 2
   myfile

.PD
.IP "" 0
.SP
.SH "diff examples"
.SP
Da followin line produces a Unidiff (\fB-u\fR flag)
between revision 1.14 n' 1.19 of
\fBbackend.c\fR.  Cuz of tha \fB-kk\fR flag no
keywordz is substituted, so differences dat only depend
on keyword substitution is ignored.
.SP
.PD 0
.SP
.IP "" 2
$ cvs diff -kk -u -r 1.14 -r 1.19 backend.c

.PD
.IP "" 0
.SP
Suppose tha experimenstrual branch EXPR1 was based on a
set of filez tagged RELEASE_1_0.  To peep what tha fuck has
happened on dat branch, tha followin can be used:
.SP
.PD 0
.SP
.IP "" 2
$ cvs diff -r RELEASE_1_0 -r EXPR1

.PD
.IP "" 0
.SP
A command like dis can be used ta produce a cold-ass lil context
diff between two releases:
.SP
.PD 0
.SP
.IP "" 2
$ cvs diff -c -r RELEASE_1_0 -r RELEASE_1_1 > diffs

.PD
.IP "" 0
.SP
If yo ass is maintainin ChizzleLogs, a cold-ass lil command like tha following
just before you commit yo' chizzlez may help you write
the ChizzleLog entry.  All local modifications dat have
not yet been committed is ghon be printed.
.SP
.PD 0
.SP
.IP "" 2
$ cvs diff -u | less

.PD
.IP "" 0
.SP
.SH "export"
.SS "Export sources from CVS, similar ta checkout"
.IX "export (subcommand)"
.SP
.IP "\(bu" 2
Synopsis: export [-flNnR] [-r rev|-D date] [-k subst] [-d dir] module\&...
.IP "\(bu" 2
Requires: repository.
.IP "\(bu" 2
Changes: current directory.
.SP
This command be a variant of \fBcheckout\fR; use it
when you want a cold-ass lil copy of tha source fo' module without
the \fBcvs\fR administratizzle directories. Put ya muthafuckin choppers up if ya feel dis!  For example, you
might use \fBexport\fR ta prepare source fo' shipment
off-site.  This command requires dat you specify a
date or tag (with \fB-D\fR or \fB-r\fR), so dat you
can count on reproducin tha source you shizzle ta others
(and thus it always prunes empty directories).
.SP
One often wanna use \fB-kv\fR wit \fBcvs
export\fR.  This causes any keywordz ta be
expanded such dat a import done at some other crib
will not lose tha keyword revision shiznit. I aint talkin' bout chicken n' gravy biatch.  But be
aware dat don\(aqt handle a export containin binary
filez erectly.  Also be aware dat afta havin used
\fB-kv\fR, one can no longer use tha \fBident\fR
command (which is part of tha \fBrcs\fR suite\(emsee
ident(1)) which looks fo' keyword strings.  If
you wanna be able ta use \fBident\fR you must not
use \fB-kv\fR.
.SP
.SH "export options"
.SP
These standard options is supported by \fBexport\fR
(see node `Common options\(aq up in tha CVS manual, fo' a cold-ass lil complete description of
them):
.SP
.IP "" 0
\fB-D \fIdate\fB\fR
.IP "" 2
Use da most thugged-out recent revision no lata than \fIdate\fR.
.SP
.IP "" 0
\fB-f\fR
.IP "" 2
If no matchin revision is found, retrieve da most thugged-out
recent revision (instead of ignorin tha file).
.SP
.IP "" 0
\fB-l\fR
.IP "" 2
Local; run only up in current hustlin directory.
.SP
.IP "" 0
\fB-n\fR
.IP "" 2
Do not run any checkout program.
.SP
.IP "" 0
\fB-R\fR
.IP "" 2
Export directories recursively.  This is on by default.
.SP
.IP "" 0
\fB-r \fItag\fB\fR
.IP "" 2
Use revision \fItag\fR.
.SP
In addition, these options (that is common to
\fBcheckout\fR n' \fBexport\fR) is also supported:
.SP
.IP "" 0
\fB-d \fIdir\fB\fR
.IP "" 2
Smoke a gangbangin' finger-lickin' directory called \fIdir\fR fo' tha working
files, instead of rockin tha module name.
See `checkout options\(aq up in tha CVS manual fo' complete details on how
\fBcvs\fR handlez dis flag.
.SP
.IP "" 0
\fB-k \fIsubst\fB\fR
.IP "" 2
Set keyword expansion mode (see node `Substitution modes\(aq up in tha CVS manual).
.SP
.IP "" 0
\fB-N\fR
.IP "" 2
Only useful together wit \fB-d \fIdir\fB\fR.
See `checkout options\(aq up in tha CVS manual fo' complete details on how
\fBcvs\fR handlez dis flag.
.SP
.SH "history"
.SS "Show statuz of filez n' users"
.IX "history (subcommand)"
.SP
.IP "\(bu" 2
Synopsis:     history [-report] [-flags] [-options args] [files\&...]
.IP "\(bu" 2
Requires: tha file \fB$CVSROOT/CVSROOT/history\fR
.IP "\(bu" 2
Changes: nothing.
.SP
\fBcvs\fR can keep a history file dat tracks each use of the
\fBcheckout\fR, \fBcommit\fR, \fBrtag\fR,
\fBupdate\fR, n' \fBrelease\fR commands.  Yo ass can
use \fBhistory\fR ta display dis shiznit in
various formats.
.SP
Loggin must be enabled by bustin tha file
\fB$CVSROOT/CVSROOT/history\fR.
.SP
\fB\fBhistory\fB uses \fB-f\fB, \fB-l\fB,
\fB-n\fB, n' \fB-p\fB up in ways dat conflict wit the
normal use inside \fBcvs\fB (see node `Common options\(aq up in tha CVS manual).\fR
.SP
.SH "history options"
.SP
Several options (shown above as \fB-report\fR)  control  what
kind of report is generated:
.SP
.IP "" 0
\fB-c\fR
.IP "" 2
Report on each time commit was used (i.e., each time
the repository was modified).
.SP
.IP "" 0
\fB-e\fR
.IP "" 2
Everythang (all record types).  Equivalent to
specifyin \fB-x\fR wit all record types.  Of course,
\fB-e\fR will also include record types which are
added up in a gangbangin' future version of \fBcvs\fR; if yo ass is
writin a script which can only handle certain record
types, you\(aqll wanna specify \fB-x\fR.
.SP
.IP "" 0
\fB-m \fImodule\fB\fR
.IP "" 2
Report on a particular module.  (Yo ass can meaningfully
use \fB-m\fR mo' than once on tha command line.)
.SP
.IP "" 0
\fB-o\fR
.IP "" 2
Report on checked-out modules.  This is tha default report type.
.SP
.IP "" 0
\fB-T\fR
.IP "" 2
Report on all tags.
.SP
.IP "" 0
\fB-x \fItype\fB\fR
.IP "" 2
Extract a particular set of record types \fItype\fR from tha \fBcvs\fR
history.  Da types is indicated by single letters,
which you may specify up in combination.
.SP
Certain commandz gotz a single record type:
.SP
.IP "" 2
\fBF\fR
.IP "" 4
release
.IP "" 2
\fBO\fR
.IP "" 4
checkout
.IP "" 2
\fBE\fR
.IP "" 4
export
.IP "" 2
\fBT\fR
.IP "" 4
rtag
.SP
One of five record types may result from a update:
.SP
.IP "" 2
\fBC\fR
.IP "" 4
A merge was necessary but collisions were
detected (requirin manual merging).
.IP "" 2
\fBG\fR
.IP "" 4
A merge was necessary n' it succeeded.
.IP "" 2
\fBU\fR
.IP "" 4
A hustlin file was copied from tha repository.
.IP "" 2
\fBP\fR
.IP "" 4
A hustlin file was patched ta match tha repository.
.IP "" 2
\fBW\fR
.IP "" 4
Da hustlin copy of a gangbangin' file was deleted during
update (because dat shiznit was gone from tha repository).
.SP
One of three record types thangs up in dis biatch from commit:
.SP
.IP "" 2
\fBA\fR
.IP "" 4
A file was added fo' tha last time.
.IP "" 2
\fBM\fR
.IP "" 4
A file was modified.
.IP "" 2
\fBR\fR
.IP "" 4
A file was removed.
.SP
Da options shown as \fB-flags\fR constrain or expand
the report without requirin option arguments:
.SP
.IP "" 0
\fB-a\fR
.IP "" 2
Show data fo' all playas (the default is ta show data
only fo' tha user executin \fBhistory\fR).
.SP
.IP "" 0
\fB-l\fR
.IP "" 2
Show last modification only.
.SP
.IP "" 0
\fB-w\fR
.IP "" 2
Show only tha recordz fo' modifications done from the
same hustlin directory where \fBhistory\fR is
executing.
.SP
Da options shown as \fB-options \fIargs\fB\fR constrain tha report
based on a argument:
.SP
.IP "" 0
\fB-b \fIstr\fB\fR
.IP "" 2
Show data back ta a record containin  tha  string
\fIstr\fR  up in  either tha module name, tha file name, or
the repository path.
.SP
.IP "" 0
\fB-D \fIdate\fB\fR
.IP "" 2
Show data since \fIdate\fR.  This is slightly different
from tha aiiight use of \fB-D \fIdate\fB\fR, which
selects tha newest revision olda than \fIdate\fR.
.SP
.IP "" 0
\fB-f \fIfile\fB\fR
.IP "" 2
Show data fo' a particular file
(you can specify nuff muthafuckin \fB-f\fR options on tha same command line).
This is equivalent ta specifyin tha file on tha command line.
.SP
.IP "" 0
\fB-n \fImodule\fB\fR
.IP "" 2
Show data fo' a particular module
(you can specify nuff muthafuckin \fB-n\fR options on tha same command line).
.SP
.IP "" 0
\fB-p \fIrepository\fB\fR
.IP "" 2
Show data fo' a particular source repository  (you
can specify nuff muthafuckin \fB-p\fR options on tha same command
line).
.SP
.IP "" 0
\fB-r \fIrev\fB\fR
.IP "" 2
Show recordz referrin ta revisions since tha revision
or tag named \fIrev\fR appears up in individual \fBrcs\fR
files.  Each \fBrcs\fR file is searched fo' tha revision or
tag.
.SP
.IP "" 0
\fB-t \fItag\fB\fR
.IP "" 2
Show recordz since tag \fItag\fR was last added ta the
history file.  This differs from tha \fB-r\fR flag
above up in dat it readz only tha history file, not the
\fBrcs\fR files, n' is much faster.
.SP
.IP "" 0
\fB-u \fIname\fB\fR
.IP "" 2
Show recordz fo' user \fIname\fR.
.SP
.IP "" 0
\fB-z \fItimezone\fB\fR
.IP "" 2
Show times up in tha selected recordz rockin tha specified
time unit instead of UTC.
.SP
.SH "import"
.SS "Import sources tha fuck into CVS, rockin vendor branches"
.IX "import (subcommand)"
.SP
.IP "\(bu" 2
Synopsis: import [-options] repository vendortag releasetag\&...
.IP "\(bu" 2
Requires: Repository, source distribution directory.
.IP "\(bu" 2
Changes: repository.
.SP
Use \fBimport\fR ta incorporate a entire source
distribution from a outside source (e.g., a source
vendor) tha fuck into yo' source repository directory.  Yo ass can
use dis command both fo' initial creation of a
repository, n' fo' wholesale thugged-out shiznit ta tha module
from tha outside source.  See `Trackin sources\(aq up in tha CVS manual for
a rap on dis subject.
.SP
Da \fIrepository\fR argument gives a gangbangin' finger-lickin' directory name
(or a path ta a gangbangin' finger-lickin' directory) under tha \fBcvs\fR root directory
for repositories; if tha directory did not exist,
import creates dat shit.
.SP
When you use import fo' thugged-out shiznit ta source dat has been
modified up in yo' source repository (since a prior
import), it will notify you of any filez dat conflict
in tha two branchez of pimpment; use \fBcheckout
-j\fR ta reconcile tha differences, as import instructs
you ta do.
.SP
If \fBcvs\fR decides a gangbangin' file should be ignored
(see node `cvsignore\(aq up in tha CVS manual), it do not import it n' prints
\fBI \fR followed by tha filename (see node `import output\(aq up in tha CVS manual fo' a
complete description of tha output).
.SP
If tha file \fB$CVSROOT/CVSROOT/cvswrappers\fR exists,
any file whose names match tha justifications up in that
file is ghon be treated as packages n' tha appropriate
filterin is ghon be performed on tha file/directory
before bein imported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See `Wrappers\(aq up in tha CVS manual.
.SP
Da outside source is saved up in a gangbangin' first-level
branch, by default 1.1.1.  Updates is leavez of this
branch; fo' example, filez from tha straight-up original gangsta imported
collection of source is ghon be revision 1.1.1.1, then
filez from tha straight-up original gangsta imported update is ghon be revision
1.1.1.2, n' so on.
.SP
At least three arguments is required.
\fIrepository\fR is needed ta identify tha collection
of source.  \fIvendortag\fR be a tag fo' tha entire
branch (e.g., fo' 1.1.1).  Yo ass must also specify at
least one \fIreleasetag\fR ta uniquely identify tha filez at
the leaves pimped each time you execute \fBimport\fR.  The
\fIreleasetag\fR should be new, not previously existin up in the
repository file, n' uniquely identify tha imported release,
.SP
Note dat \fBimport\fR do \fInot\fR chizzle the
directory up in which you invoke dat shit.  In particular, it
does not set up dat directory as a \fBcvs\fR working
directory; if you wanna work wit tha sources import
them first n' then check dem up tha fuck into a gangbangin' finger-lickin' different
directory (see node `Gettin tha source\(aq up in tha CVS manual).
.SP
.SH "import options"
.SP
This standard option is supported by \fBimport\fR
(see node `Common options\(aq up in tha CVS manual fo' a cold-ass lil complete description):
.SP
.IP "" 0
\fB-m \fImessage\fB\fR
.IP "" 2
Use \fImessage\fR as log shiznit, instead of
invokin a editor.
.SP
There is tha followin additionizzle special options.
.SP
.IP "" 0
\fB-b \fIbranch\fB\fR
.IP "" 2
See `Multiple vendor branches\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB-d\fR
.IP "" 2
Use each file\(aqs modification time as tha time of import
rather than tha current time.
.SP
.IP "" 0
\fB-k \fIsubst\fB\fR
.IP "" 2
Indicate tha keyword expansion mode desired. Y'all KNOW dat shit, muthafucka!  This
settin will apply ta all filez pimped durin the
import yo, but not ta any filez dat previously existed in
the repository.  See `Substitution modes\(aq up in tha CVS manual fo' a
list of valid \fB-k\fR settings.
.SP
.IP "" 0
\fB-I \fIname\fB\fR
.IP "" 2
Specify file names dat should be ignored during
import.  Yo ass can use dis option repeatedly.  To avoid
ignorin any filez at all (even dem ignored by
default), specify \`-I !\(aq.
.SP
\fIname\fR can be a gangbangin' file name pattern of tha same type
that you can specify up in tha \fB.cvsignore\fR file.
See `cvsignore\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB-W \fIspec\fB\fR
.IP "" 2
Specify file names dat should be filtered during
import.  Yo ass can use dis option repeatedly.
.SP
\fIspec\fR can be a gangbangin' file name pattern of tha same type
that you can specify up in tha \fB.cvswrappers\fR
file. peep node `Wrappers\(aq up in tha CVS manual.
.SP
.SH "import output"
.SP
\fBimport\fR keeps you informed of its progress by printin a line
for each file, preceded by one characta indicatin tha statuz of tha file:
.SP
.IP "" 0
\fBU \fIfile\fB\fR
.IP "" 2
Da file already exists up in tha repository n' has not been locally
modified; a freshly smoked up revision has been pimped (if necessary).
.SP
.IP "" 0
\fBN \fIfile\fB\fR
.IP "" 2
Da file be a freshly smoked up file which has been added ta tha repository.
.SP
.IP "" 0
\fBC \fIfile\fB\fR
.IP "" 2
Da file already exists up in tha repository but has been locally modified;
you will gotta merge tha chizzles.
.SP
.IP "" 0
\fBI \fIfile\fB\fR
.IP "" 2
Da file is bein ignored (see node `cvsignore\(aq up in tha CVS manual).
.SP
.IX "Symbolic link, importing"
.IX "Link, symbolic, importing"
.IP "" 0
\fBL \fIfile\fB\fR
.IP "" 2
Da file be a symbolic link; \fBcvs import\fR ignores symbolic links.
Muthafuckas periodically suggest dat dis behavior should
be chizzled yo, but if there be a cold-ass lil consensus on what tha fuck it
should be chizzled to, it don\(aqt seem ta be apparent.
(Various options up in tha \fBmodules\fR file can be used
to recreate symbolic links on checkout, update, etc.;
see node `modules\(aq up in tha CVS manual.)
.SP
.SH "import examples"
.SP
See `Trackin sources\(aq up in tha CVS manual, n' `From files\(aq up in tha CVS manual.
.SP
.SH "log"
.SS "Print up log shiznit fo' files"
.IX "log (subcommand)"
.SP
.IP "\(bu" 2
Synopsis: log [options] [files\&...]
.IP "\(bu" 2
Requires: repository, hustlin directory.
.IP "\(bu" 2
Changes: nothing.
.SP
Display log shiznit fo' files.  \fBlog\fR used to
call tha \fBrcs\fR utilitizzle \fBrlog\fR.  Although this
is no longer legit up in tha current sources, dis history
determines tha format of tha output n' tha options,
which is not like up in tha steez of tha other \fBcvs\fR
commands.
.SP
.IX "Timezone, up in output"
.IX "Zone, time, up in output"
Da output includes tha location of tha \fBrcs\fR file,
the \fIhead\fR revision (the sickest fuckin revision on the
trunk), all symbolic names (tags) n' some other
things.  For each revision, tha revision number, the
lyricist, tha number of lines added/deleted n' tha log
message is printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  All times is displayed in
Coordinated Universal Time (UTC).  (Other parts of
\fBcvs\fR print times up in tha local timezone).
.SP
\fB\fBlog\fB uses \fB-R\fB up in a way dat conflicts
with tha aiiight use inside \fBcvs\fB (see node `Common options\(aq up in tha CVS manual).\fR
.SP
.SH "log options"
.SP
By default, \fBlog\fR prints all shiznit dat is
available.  All other options restrict tha output.  Note dat tha revision
selection options (\fB-b\fR, \fB-d\fR, \fB-r\fR, \fB-s\fR, n' \fB-w\fR)
have no
effect, other than possibly causin a search fo' filez up in Attic directories,
when used up in conjunction wit tha options dat restrict tha output ta only
\fBlog\fR header fieldz (\fB-h\fR, \fB-R\fR, n' \fB-t\fR)
unless tha \fB-S\fR option be also specified.
.SP
.IP "" 0
\fB-b\fR
.IP "" 2
Print shiznit bout tha revisions on tha default
branch, normally tha highest branch on tha trunk.
.SP
.IP "" 0
\fB-d \fIdates\fB\fR
.IP "" 2
Print shiznit bout revisions wit a cold-ass lil checkin
date/time up in tha range given by the
semicolon-separated list of dates.  Da date formats
accepted is dem accepted by tha \fB-D\fR option to
many other \fBcvs\fR commandz (see node `Common options\(aq up in tha CVS manual).
Dates can be combined tha fuck into ranges as bigs up:
.SP
.IP "" 2
\fB\fId1\fB<\fId2\fB\fR
.IP "" 4
.IP "" 2
\fB\fId2\fB>\fId1\fB\fR
.IP "" 4
Select tha revisions dat was deposited between
\fId1\fR n' \fId2\fR.
.SP
.IP "" 2
\fB<\fId\fB\fR
.IP "" 4
.IP "" 2
\fB\fId\fB>\fR
.IP "" 4
Select all revisions dated \fId\fR or earlier.
.SP
.IP "" 2
\fB\fId\fB<\fR
.IP "" 4
.IP "" 2
\fB>\fId\fB\fR
.IP "" 4
Select all revisions dated \fId\fR or later.
.SP
.IP "" 2
\fB\fId\fB\fR
.IP "" 4
Select tha single, sickest fuckin revision dated \fId\fR or
earlier.
.SP
Da \fB>\fR or \fB<\fR charactas may be followed by
\fB=\fR ta indicate a inclusive range rather than an
exclusive one.
.SP
Note dat tha separator be a semicolon (;).
.SP
.IP "" 0
\fB-h\fR
.IP "" 2
Print only tha name of tha \fBrcs\fR file, name
of tha file up in tha hustlin directory, head,
default branch, access list, locks, symbolic names, and
suffix.
.SP
.IP "" 0
\fB-l\fR
.IP "" 2
Local; run only up in current hustlin directory.  (Default
is ta run recursively).
.SP
.IP "" 0
\fB-N\fR
.IP "" 2
Do not print tha list of tags fo' dis file.  This
option can be straight-up useful when yo' joint uses a shitload of
tags, so rather than "more"\(aqin over 3 pagez of tag
information, tha log shiznit is presented without
tags at all.
.SP
.IP "" 0
\fB-n\fR
.IP "" 2
Print tha list of tags fo' dis file. This option can
be straight-up useful when yo' \fB.cvsrc\fR file has a
\fBlizzay -N\fR entry as a way ta git a gangbangin' full list of all
of tha tags.
.SP
.IP "" 0
\fB-R\fR
.IP "" 2
Print only tha name of tha \fBrcs\fR file.
.SP
.IP "" 0
\fB-r\fIrevisions\fB\fR
.IP "" 2
Print shiznit bout revisions given up in the
comma-separated list \fIrevisions\fR of revisions and
ranges.  Da followin table explains tha available
range formats:
.SP
.IP "" 2
\fB\fIrev1\fB:\fIrev2\fB\fR
.IP "" 4
Revisions \fIrev1\fR ta \fIrev2\fR (which must be on
the same branch).
.SP
.IP "" 2
\fB\fIrev1\fB::\fIrev2\fB\fR
.IP "" 4
Da same yo, but excludin \fIrev1\fR.
.SP
.IP "" 2
\fB:\fIrev\fB\fR
.IP "" 4
.IP "" 2
\fB::\fIrev\fB\fR
.IP "" 4
Revisions from tha beginnin of tha branch up to
and includin \fIrev\fR.
.SP
.IP "" 2
\fB\fIrev\fB:\fR
.IP "" 4
Revisions startin wit \fIrev\fR ta tha end of the
branch containin \fIrev\fR.
.SP
.IP "" 2
\fB\fIrev\fB::\fR
.IP "" 4
Revisions startin just afta \fIrev\fR ta tha end of the
branch containin \fIrev\fR.
.SP
.IP "" 2
\fB\fIbranch\fB\fR
.IP "" 4
An argument dat be a funky-ass branch means all revisions on
that branch.
.SP
.IP "" 2
\fB\fIbranch1\fB:\fIbranch2\fB\fR
.IP "" 4
.IP "" 2
\fB\fIbranch1\fB::\fIbranch2\fB\fR
.IP "" 4
A range of branches means all revisions
on tha branches up in dat range.
.SP
.IP "" 2
\fB\fIbranch\fB.\fR
.IP "" 4
Da sickest fuckin revision up in \fIbranch\fR.
.SP
A bare \fB-r\fR wit no revisions means tha sickest fuckin
revision on tha default branch, normally tha trunk.
There can be no space between tha \fB-r\fR option and
its argument.
.SP
.IP "" 0
\fB-S\fR
.IP "" 2
Suppress tha header if no revisions is selected.
.SP
.IP "" 0
\fB-s \fIstates\fB\fR
.IP "" 2
Print shiznit bout revisions whose state
attributes match one of tha states given up in the
comma-separated list \fIstates\fR.  Individual states may
be any text string, though \fBcvs\fR commonly only uses two
states, \fBExp\fR n' \fBdead\fR.  See `admin options\(aq up in tha CVS manual
for mo' shiznit.
.SP
.IP "" 0
\fB-t\fR
.IP "" 2
Print tha same as \fB-h\fR, plus tha descriptizzle text.
.SP
.IP "" 0
\fB-w\fIlogins\fB\fR
.IP "" 2
Print shiznit bout revisions checked up in by users
with login names appearin up in tha comma-separated list
\fIlogins\fR.  If \fIlogins\fR is omitted, tha user\(aqs
login be assumed. Y'all KNOW dat shit, muthafucka!  There can be no space between the
\fB-w\fR option n' its argument.
.SP
\fBlog\fR prints tha intersection of tha revisions
selected wit tha options \fB-d\fR, \fB-s\fR, and
\fB-w\fR, intersected wit tha union of tha revisions
selected by \fB-b\fR n' \fB-r\fR.
.SP
.SH "log examples"
.SP
Contributed examplez is gratefully accepted.
.SP
.SH "rdiff"
.SS "\(aqpatch\(aq format diffs between releases"
.IX "rdiff (subcommand)"
.SP
.IP "\(bu" 2
rdiff [-flags] [-V vn] [-r t|-D d [-r t2|-D d2]] modules\&...
.IP "\(bu" 2
Requires: repository.
.IP "\(bu" 2
Changes: nothing.
.IP "\(bu" 2
Synonym: patch
.SP
Buildz a Larry Wall format patch(1) file between two
releases, dat can be fed directly tha fuck into tha \fBpatch\fR
program ta brang a oldschool release up-to-date wit tha new
release.  (This is one of tha few \fBcvs\fR commandz that
operates directly from tha repository, n' don\(aqt
require a prior checkout.) Da diff output is busted to
the standard output device.
.SP
Yo ass can specify (usin tha standard \fB-r\fR and
\fB-D\fR options) any combination of one or two
revisions or dates.  If only one revision or date is
specified, tha patch file reflects differences between
that revision or date n' tha current head revisions in
the \fBrcs\fR file.
.SP
Note dat if tha software release affected is contained
in mo' than one directory, then it may be necessary to
specify tha \fB-p\fR option ta tha \fBpatch\fR command when
patchin tha oldschool sources, so dat \fBpatch\fR be able ta find
the filez dat is located up in other directories.
.SP
.SH "rdiff options"
.SP
These standard options is supported by \fBrdiff\fR
(see node `Common options\(aq up in tha CVS manual fo' a cold-ass lil complete description of
them):
.SP
.IP "" 0
\fB-D \fIdate\fB\fR
.IP "" 2
Use da most thugged-out recent revision no lata than \fIdate\fR.
.SP
.IP "" 0
\fB-f\fR
.IP "" 2
If no matchin revision is found, retrieve da most thugged-out
recent revision (instead of ignorin tha file).
.SP
.IP "" 0
\fB-k \fIkflag\fB\fR
.IP "" 2
Process keywordz accordin ta \fIkflag\fR.  See
`Keyword substitution\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB-l\fR
.IP "" 2
Local; don\(aqt descend subdirectories.
.SP
.IP "" 0
\fB-R\fR
.IP "" 2
Examine directories recursively.  This option is on by default.
.SP
.IP "" 0
\fB-r \fItag\fB\fR
.IP "" 2
Use revision \fItag\fR.
.SP
In addizzle ta tha above, these options is available:
.SP
.IP "" 0
\fB-c\fR
.IP "" 2
Use tha context diff format.  This is tha default format.
.SP
.IP "" 0
\fB-s\fR
.IP "" 2
Smoke a summary chizzle report instead of a patch.  The
summary includes shiznit bout filez dat were
changed or added between tha releases.  It be busted to
the standard output device.  This is useful fo' finding
out, fo' example, which filez have chizzled between two
dates or revisions.
.SP
.IP "" 0
\fB-t\fR
.IP "" 2
A diff of tha top two revisions is busted ta tha standard
output device.  This is most useful fo' seein what tha fuck the
last chizzle ta a gangbangin' file was.
.SP
.IP "" 0
\fB-u\fR
.IP "" 2
Use tha unidiff format fo' tha context diffs.
Remember dat oldschool versions
of tha \fBpatch\fR program can\(aqt handle tha unidiff
format, so if you plan ta post dis patch ta tha net
you should probably not use \fB-u\fR.
.SP
.IP "" 0
\fB-V \fIvn\fB\fR
.IP "" 2
Expand keywordz accordin ta tha rulez current in
\fBrcs\fR version \fIvn\fR (the expansion format chizzled with
\fBrcs\fR version 5).  Note dat dis option is no
longer accepted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  \fBcvs\fR will always expand keywordz the
way dat \fBrcs\fR version 5 do.
.SP
.SH "rdiff examples"
.SP
Suppose you receive mail from \fRfoo@example.net\fR askin fo' an
update from release 1.2 ta 1.4 of tha tc compila n' shit.  You
have no such patches on hand yo, but wit \fBcvs\fR dat can
easily be fixed wit a cold-ass lil command like fuckin this:
.SP
.PD 0
.SP
.IP "" 2
$ cvs rdiff -c -r FOO1_2 -r FOO1_4 tc | \\
.IP "" 2
> Mail -s \(aqDa patches you axed for\(aq foo@example.net

.PD
.IP "" 0
.SP
Suppose you have made release 1.3, n' forked a funky-ass branch
called \fBR_1_3fix\fR fo' bug fixes.  \fBR_1_3_1\fR
correspondz ta release 1.3.1, which was made some time
ago.  Now, you wanna peep how tha fuck much pimpment has been
done on tha branch.  This command can be used:
.SP
.PD 0
.SP
.IP "" 2
$ cvs patch -s -r R_1_3_1 -r R_1_3fix module-name
.IP "" 2
cvs rdiff: Diffin module-name
.IP "" 2
File ChizzleLog,v chizzled from revision 1.52.2.5 ta 1.52.2.6
.IP "" 2
File foo.c,v chizzled from revision 1.52.2.3 ta 1.52.2.4
.IP "" 2
File bar.h,v chizzled from revision 1.29.2.1 ta 1.2

.PD
.IP "" 0
.SP
.SH "release"
.SS "Indicate dat a Module is no longer up in use"
.IX "release (subcommand)"
.SP
.IP "\(bu" 2
release [-d] directories\&...
.IP "\(bu" 2
Requires: Workin directory.
.IP "\(bu" 2
Changes: Workin directory, history log.
.SP
This command is meant ta safely quit tha effect of
\fBcvs checkout\fR.  Since \fBcvs\fR don\(aqt lock files, it
isn\(aqt strictly necessary ta use dis command. Y'all KNOW dat shit, muthafucka!  Yo ass can
always simply delete yo' hustlin directory, if you
like; but you risk losin chizzlez you may have
forgotten, n' you leave no trace up in tha \fBcvs\fR history
file (see node `history file\(aq up in tha CVS manual) dat you\(aqve abandoned your
checkout.
.SP
Use \fBcvs release\fR ta avoid these problems.  This
command checks dat no uncommitted chizzlez are
present; dat yo ass is executin it from immediately
above a \fBcvs\fR hustlin directory; n' dat tha repository
recorded fo' yo' filez is tha same ol' dirty as tha repository
defined up in tha module database.
.SP
If all these conditions is true, \fBcvs release\fR
leaves a record of its execution (attestin ta your
intentionally abandonin yo' checkout) up in tha \fBcvs\fR
history log.
.SP
.SH "release options"
.SP
Da \fBrelease\fR command supports one command option:
.SP
.IP "" 0
\fB-d\fR
.IP "" 2
Delete yo' hustlin copy of tha file if tha release
succeeds.  If dis flag aint given yo' filez will
remain up in yo' hustlin directory.
.SP
\fBWARNING:  Da \fBrelease\fB command deletes
all directories n' filez recursively.  This
has tha straight-up straight-up side-effect dat any directory
created inside checked-out sources, n' not added to
the repository (usin tha \fBadd\fB command;
see node `Addin files\(aq up in tha CVS manual) is ghon be silently deleted\(emeven
if it is non-empty!\fR
.SP
.SH "release output"
.SP
Before \fBrelease\fR releases yo' sources it will
print a one-line message fo' any file dat is not
up-to-date.
.SP
.IP "" 0
\fBU \fIfile\fB\fR
.IP "" 2
.IP "" 0
\fBP \fIfile\fB\fR
.IP "" 2
There exists a newer revision of dis file up in the
repository, n' you aint modified yo' local copy
of tha file (\fBU\fR n' \fBP\fR mean tha same thang).
.SP
.IP "" 0
\fBA \fIfile\fB\fR
.IP "" 2
Da file has been added ta yo' private copy of the
sources yo, but has not yet been committed ta the
repository.  If you delete yo' copy of tha sources
this file is ghon be lost.
.SP
.IP "" 0
\fBR \fIfile\fB\fR
.IP "" 2
Da file has been removed from yo' private copy of the
sources yo, but has not yet been removed from the
repository, since you aint yet committed the
removal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  See `commit\(aq up in tha CVS manual.
.SP
.IP "" 0
\fBM \fIfile\fB\fR
.IP "" 2
Da file is modified up in yo' hustlin directory.  There
might also be a newer revision inside tha repository.
.SP
.IP "" 0
\fB? \fIfile\fB\fR
.IP "" 2
\fIfile\fR is up in yo' hustlin directory yo, but do not
correspond ta anythang up in tha source repository, n' is
not up in tha list of filez fo' \fBcvs\fR ta ignore (see the
description of tha \fB-I\fR option, and
see node `cvsignore\(aq up in tha CVS manual).  If you remove yo' working
sources, dis file is ghon be lost.
.SP
.SH "release examples"
.SP
Release tha \fBtc\fR directory, n' delete yo' local hustlin copy
of tha files.
.SP
.PD 0
.SP
.IP "" 2
$ cd \&..         # \fRYo ass must stand immediately above the\fR
.IP "" 2
                # \fRsources when you issue \fBcvs release\fR.\fR
.IP "" 2
$ cvs release -d tc
.IP "" 2
Yo ass have [0] altered filez up in dis repository.
.IP "" 2
Is you shizzle you wanna release (and delete) directory \`tc\(aq: y
.IP "" 2
$

.PD
.IP "" 0
.SP
.SH "remove"
.SS "Remove filez from actizzle use"
.IX "remove (subcommand)"
.SP
.IP "\(bu" 2
Synopsis: remove [-flR] [files...]
.IP "\(bu" 2
Requires: repository, hustlin directory.
.IP "\(bu" 2
Changes: hustlin directory.
.SP
Da \fBremove\fR command is used ta remove unwanted
filez from actizzle use.  Da user normally deletes the
filez from tha hustlin directory prior ta invocation
of tha \fBremove\fR command. Y'all KNOW dat shit, muthafucka!  Only tha working
directory is updated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Chizzlez ta tha repository are
not made until tha \fBcommit\fR command is run.
.SP
Da \fBremove\fR command do not delete filez from
from tha repository.  \fBcvs\fR keeps all historical
data up in tha repository so dat it is possible to
reconstruct previous statez of tha projects under
revision control.
.SP
To undo \fBcvs\fR \fBremove\fR or ta resurrect files
that was previously removed, peep node `add\(aq up in tha CVS manual.
.SP
.SH "remove options"
.SP
These standard options is supported by \fBremove\fR
(see node `Common options\(aq up in tha CVS manual fo' a cold-ass lil complete description of
them):
.SP
.IP "" 0
\fB-l\fR
.IP "" 2
Local; run only up in current hustlin directory.  See `Recursive behavior\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB-R\fR
.IP "" 2
Process directories recursively.  See `Recursive behavior\(aq up in tha CVS manual.
.SP
.SP
In addition, these options is also supported:
.SP
.IP "" 0
\fB-f\fR
.IP "" 2
Note dat dis aint tha standard behavior of
the \fB-f\fR option as defined up in `Common options\(aq up in tha CVS manual.
.SP
Delete filez before removin em.
.SP
Entire directory hierarchies is easily removed
usin \fB-f\fR yo, but take note dat it aint as
easy ta resurrect directory hierarchies as it is
to remove em.
.SP
.SP
.SH "remove examples"
.SP
.SS "Removin a gangbangin' file"
.SP
.PD 0
.SP
.IP "" 2
$ cvs remove remove.me
.IP "" 2
cvs remove: file \`remove.me\(aq still up in hustlin directory
.IP "" 2
cvs remove: 1 file exists; remove it first
.IP "" 2
$ rm -f remove.me
.IP "" 2
$ cvs remove remove.me
.IP "" 2
cvs remove: schedulin \`remove.me\(aq fo' removal
.IP "" 2
cvs remove: use \(aqcvs commit\(aq ta remove dis file permanently
.SP
.IP "" 2
$ ls remove.it
.IP "" 2
remove.it
.IP "" 2
$ cvs remove -f remove.it
.IP "" 2
cvs remove: schedulin \`remove.it\(aq fo' removal
.IP "" 2
cvs remove: use \(aqcvs commit\(aq ta remove dis file permanently

.PD
.IP "" 0
.SP
.SS "Removin entire directories"
.SP
.PD 0
.IP "" 2
$ tree -d a
.IP "" 2
a
.IP "" 2
|-- CVS
.IP "" 2
\`-- b
.IP "" 2
    \`-- CVS
.SP
.IP "" 2
3 directories
.IP "" 2
$ cvs remove -f a
.IP "" 2
cvs remove: Removin a
.IP "" 2
cvs remove: Removin a/b
.IP "" 2
cvs remove: schedulin \`a/b/c\(aq fo' removal
.IP "" 2
cvs remove: use \(aqcvs commit\(aq ta remove dis file permanently

.PD
.IP "" 0
.SP
.SH "update"
.SS "Brin work tree up in sync wit repository"
.IX "update (subcommand)"
.SP
.IP "\(bu" 2
update [-ACdflPpR] [-I name] [-j rev [-j rev]] [-k kflag] [-r tag|-D date] [-W spec] files\&...
.IP "\(bu" 2
Requires: repository, hustlin directory.
.IP "\(bu" 2
Changes: hustlin directory.
.SP
Afta you\(aqve run checkout ta create yo' private copy
of source from tha common repository, other pimpers
will continue changin tha central source.  From time
to time, when it is convenient up in yo' pimpment
process, you can use tha \fBupdate\fR command from
within yo' hustlin directory ta reconcile yo' work
with any revisions applied ta tha source repository
since yo' last checkout or update.
.SP
.SH "update options"
.SP
These standard options is available wit \fBupdate\fR
(see node `Common options\(aq up in tha CVS manual fo' a cold-ass lil complete description of
them):
.SP
.IP "" 0
\fB-D date\fR
.IP "" 2
Use da most thugged-out recent revision no lata than \fIdate\fR.
This option is sticky, n' implies \fB-P\fR.
See `Sticky tags\(aq up in tha CVS manual fo' mo' shiznit on sticky tags/dates.
.SP
.IP "" 0
\fB-f\fR
.IP "" 2
Only useful wit tha \fB-D \fIdate\fB\fR or \fB-r
\fItag\fB\fR flags.  If no matchin revision is found,
retrieve da most thugged-out recent revision (instead of ignoring
the file).
.SP
.IP "" 0
\fB-k \fIkflag\fB\fR
.IP "" 2
Process keywordz accordin ta \fIkflag\fR.  See
`Keyword substitution\(aq up in tha CVS manual.
This option is sticky; future thugged-out shiznit of
this file up in dis hustlin directory will use tha same
\fIkflag\fR.  Da \fBstatus\fR command can be viewed
to peep tha sticky options.  See `Invokin CVS\(aq up in tha CVS manual for
more shiznit on tha \fBstatus\fR command.
.SP
.IP "" 0
\fB-l\fR
.IP "" 2
Local; run only up in current hustlin directory.  See `Recursive behavior\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB-P\fR
.IP "" 2
Prune empty directories. Put ya muthafuckin choppers up if ya feel dis!  See `Movin directories\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB-p\fR
.IP "" 2
Pipe filez ta tha standard output.
.SP
.IP "" 0
\fB-R\fR
.IP "" 2
Update directories recursively (default).  See `Recursive
behavior\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB-r rev\fR
.IP "" 2
Retrieve revision/tag \fIrev\fR.  This option is sticky,
and implies \fB-P\fR.
See `Sticky tags\(aq up in tha CVS manual, fo' mo' shiznit on sticky tags/dates.
.SP
These special options is also available with
\fBupdate\fR.
.SP
.IP "" 0
\fB-A\fR
.IP "" 2
Reset any sticky tags, dates, or \fB-k\fR options.
Do not reset sticky \fB-k\fR options on modified files.
See `Sticky tags\(aq up in tha CVS manual fo' mo' shiznit on sticky tags/dates.
.SP
.IP "" 0
\fB-C\fR
.IP "" 2
Overwrite locally modified filez wit clean copies from
the repository (the modified file is saved in
\fB.#\fIfile\fB.\fIrevision\fB\fR, however).
.SP
.IP "" 0
\fB-d\fR
.IP "" 2
Smoke any directories dat exist up in tha repository if
they\(aqre missin from tha hustlin directory.  Normally,
\fBupdate\fR acts only on directories n' filez that
were already enrolled up in yo' hustlin directory.
.SP
This is useful fo' uppimpin directories dat were
created up in tha repository since tha initial checkout;
but it has a fucked up side effect.  If you
deliberately avoided certain directories up in the
repository when you pimped yo' hustlin directory
(either all up in use of a module name or by listing
explicitly tha filez n' directories you wanted on the
command line), then uppimpin wit \fB-d\fR will create
those directories, which may not be what tha fuck you want.
.SP
.IP "" 0
\fB-I \fIname\fB\fR
.IP "" 2
Ignore filez whose names match \fIname\fR (in your
workin directory) durin tha update.  Yo ass can specify
\fB-I\fR mo' than once on tha command line ta specify
several filez ta ignore.  Use \fB-I !\fR ta avoid
ignorin any filez at all.  See `cvsignore\(aq up in tha CVS manual fo' other
ways ta make \fBcvs\fR ignore some files.
.SP
.IP "" 0
\fB-W\fIspec\fB\fR
.IP "" 2
Specify file names dat should be filtered during
update.  Yo ass can use dis option repeatedly.
.SP
\fIspec\fR can be a gangbangin' file name pattern of tha same type
that you can specify up in tha \fB.cvswrappers\fR
file.  See `Wrappers\(aq up in tha CVS manual.
.SP
.IP "" 0
\fB-j\fIrevision\fB\fR
.IP "" 2
With two \fB-j\fR options, merge chizzlez from the
revision specified wit tha straight-up original gangsta \fB-j\fR option to
the revision specified wit tha second \fBj\fR option,
into tha hustlin directory.
.SP
With one \fB-j\fR option, merge chizzlez from the
ancestor revision ta tha revision specified wit the
\fB-j\fR option, tha fuck into tha hustlin directory.  The
ancestor revision is tha common ancestor of the
revision which tha hustlin directory is based on, and
the revision specified up in tha \fB-j\fR option.
.SP
Note dat rockin a single \fB-j \fItagname\fB\fR option rather than
\fB-j \fIbranchname\fB\fR ta merge chizzlez from a funky-ass branch will
often not remove filez which was removed on tha branch.
See `Mergin addz n' removals\(aq up in tha CVS manual fo' mo' shiznit.
.SP
In addition, each \fB-j\fR option can contain a optional
date justification which, when used wit branches, can
limit tha chosen revision ta one within a specific
date.  An optionizzle date is specified by addin a cold-ass lil colon
(:) ta tha tag:
\fB-j\fISymbolic_Tag\fB:\fIDate_Specifier\fB\fR.
.SP
See `Branchin n' merging\(aq up in tha CVS manual.
.SP
.SP
.SH "update output"
.SP
\fBupdate\fR n' \fBcheckout\fR keep you informed of
their progress by printin a line fo' each file, preceded
by one characta indicatin tha statuz of tha file:
.SP
.IP "" 0
\fBU \fIfile\fB\fR
.IP "" 2
Da file was brought up ta date wit respect ta the
repository.  This is done fo' any file dat exists in
the repository but not up in yo' hustlin directory, n' fo' files
that you haven\(aqt chizzled but is not da most thugged-out recent
versions available up in tha repository.
.SP
.IP "" 0
\fBP \fIfile\fB\fR
.IP "" 2
Like \fBU\fR yo, but tha \fBcvs\fR server sendz a patch instead of a entire
file.  This accomplishes tha same ol' dirty thang as \fBU\fR rockin less bandwidth.
.SP
.IP "" 0
\fBA \fIfile\fB\fR
.IP "" 2
Da file has been added ta yo' private copy of the
sources, n' is ghon be added ta tha source repository
when you run \fBcommit\fR on tha file.  This be a
reminder ta you dat tha file need ta be committed.
.SP
.IP "" 0
\fBR \fIfile\fB\fR
.IP "" 2
Da file has been removed from yo' private copy of the
sources, n' is ghon be removed from tha source repository
when you run \fBcommit\fR on tha file.  This be a
reminder ta you dat tha file need ta be committed.
.SP
.IP "" 0
\fBM \fIfile\fB\fR
.IP "" 2
Da file is modified up in  yo'  hustlin  directory.
.SP
\fBM\fR can indicate one of two states fo' a gangbangin' file
you\(aqre hustlin on: either there was no modifications
to tha same file up in tha repository, so dat yo' file
remains as you last saw it; or there was modifications
in tha repository as well as up in yo' copy yo, but they
were merged successfully, without conflict, up in your
workin directory.
.SP
\fBcvs\fR will print some lyrics if it merges yo' work,
and a funky-ass backup copy of yo' hustlin file (as it looked
before you ran \fBupdate\fR) is ghon be made.  Da exact
name of dat file is printed while \fBupdate\fR runs.
.SP
.IP "" 0
\fBC \fIfile\fB\fR
.IP "" 2
.IX "\&.# files"
.IX "__ filez (VMS)"
A conflict was detected while tryin ta merge your
changes ta \fIfile\fR wit chizzlez from tha source
repository.  \fIfile\fR (the copy up in yo' working
directory) is now tha result of attemptin ta merge
the two revisions; a unmodified copy of yo' file
is also up in yo' hustlin directory, wit tha name
\fB.#\fIfile\fB.\fIrevision\fB\fR where \fIrevision\fR
is tha revision dat yo' modified file started
from.  Resolve tha conflict as busted lyrics bout in
`Conflicts example\(aq up in tha CVS manual.
(Note dat some systems automatically purge
filez dat begin wit \fB.#\fR if they aint been
accessed fo' all dem days.  If you intend ta keep a cold-ass lil copy
of yo' original gangsta file, it aint nuthin but a straight-up phat scam ta rename
it.)  Under \fBvms\fR, tha file name starts with
\fB__\fR rather than \fB.#\fR.
.SP
.IP "" 0
\fB? \fIfile\fB\fR
.IP "" 2
\fIfile\fR is up in yo' hustlin directory yo, but do not
correspond ta anythang up in tha source repository, n' is
not up in tha list of filez fo' \fBcvs\fR ta ignore (see the
description of tha \fB-I\fR option, and
see node `cvsignore\(aq up in tha CVS manual).
.SH "AUTHORS"
.TP
Dick Grune
Original Gangsta lyricist of the
.B cvs
shell script version posted to
.B comp.sources.unix
in tha volume6 release of December, 1986.
Credited wit much of the
.B cvs
conflict resolution algorithms.
.TP
Brian Berliner
Coder n' designer of the
.B cvs
program itself up in April, 1989, based on tha original gangsta work done by Dick.
.TP
Jeff Polk
Helped Brian wit tha design of the
.B cvs
module n' vendor branch support n' lyricist of the
.BR checkin ( 1 )
shell script (the ancestor of \fBcvs import\fP).
.TP
Larry Jones, Derek R. Price, n' Mark D. Baushke
Have helped maintain
.B cvs
for nuff years.
.TP
And nuff others too a shitload of ta mention here.
.SH "SEE ALSO"
Da most comprehensive manual fo' CVS is
Version Management wit CVS by Per Cederqvist et al. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Dependin on
your system, you may be able ta git it wit the
.B info CVS
command or it may be available as cvs.pdf (Portable Document Format),
cvs.ps (PostScript), cvs.texinfo (Texinfo source), or cvs.html.
.SP
For CVS thugged-out shit, mo' shiznit on documentation, software related
to CVS, pimpment of CVS, n' more, see:
.in +1i
.SP
.PD 0
.IP "" 4
.B http://cvs.nongnu.org
.in -1i
.SP
.BR ci ( 1 ),
.BR co ( 1 ),
.BR cvs ( 5 ),
.BR cvsbug ( 8 ),
.BR diff ( 1 ),
.BR grep ( 1 ),
.BR patch ( 1 ),
.BR rcs ( 1 ),
.BR rcsdiff ( 1 ),
.BR rcsmerge ( 1 ),
.BR rlog ( 1 ).
