'\" t
.\"     Title: git-bundle
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-BUNDLE" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-bundle \- Move objects n' refs by archive
.SH "SYNOPSIS"
.sp
.nf
\fIgit bundle\fR create <file> <git\-rev\-list\-args>
\fIgit bundle\fR verify <file>
\fIgit bundle\fR list\-headz <file> [<refname>\&...]
\fIgit bundle\fR unbundle <file> [<refname>\&...]
.fi
.sp
.SH "DESCRIPTION"
.sp
Some workflows require dat one or mo' branchez of pimpment on one machine be replicated on another machine yo, but tha two machines cannot be directly connected, n' therefore tha interactizzle Git protocols (git, ssh, rsync, http) cannot be used\&. This command serves up support fo' \fIgit fetch\fR n' \fIgit pull\fR ta operate by packagin objects n' references up in a archive all up in tha originatin machine, then importin dem tha fuck into another repository rockin \fIgit fetch\fR n' \fIgit pull\fR afta movin tha archive by some means (e\&.g\&., by sneakernet)\& fo' realz. As no direct connection between tha repositories exists, tha user must specify a funky-ass basis fo' tha bundle dat is held by tha destination repository: tha bundle assumes dat all objects up in tha basis is already up in tha destination repository\&.
.SH "OPTIONS"
.PP
create <file>
.RS 4
Used ta create a funky-ass bundle named
\fIfile\fR\&. This requires the
\fIgit\-rev\-list\-args\fR
arguments ta define tha bundle contents\&.
.RE
.PP
verify <file>
.RS 4
Used ta check dat a funky-ass bundle file is valid n' will apply cleanly ta tha current repository\&. This includes checks on tha bundle format itself as well as checkin dat tha prerequisite commits exist n' is straight-up linked up in tha current repository\&.
\fIgit bundle\fR
prints a list of missin commits, if any, n' exits wit a non\-zero status\&.
.RE
.PP
list\-headz <file>
.RS 4
Lists tha references defined up in tha bundle\&. If followed by a list of references, only references matchin dem given is printed out\&.
.RE
.PP
unbundle <file>
.RS 4
Passes tha objects up in tha bundle to
\fIgit index\-pack\fR
for storage up in tha repository, then prints tha namez of all defined references\&. If a list of references is given, only references matchin dem up in tha list is printed\&. This command is straight-up plumbing, intended ta be called only by
\fIgit fetch\fR\&.
.RE
.PP
<git\-rev\-list\-args>
.RS 4
A list of arguments, aaight to
\fIgit rev\-parse\fR
and
\fIgit rev\-list\fR
(and containin a named ref, peep SPECIFYING REFERENCES below), dat specifies tha specific objects n' references ta transport\&. For example,
master~10\&.\&.master
causes tha current masta reference ta be packaged along wit all objects added since its 10th ancestor commit\&. There is no explicit limit ta tha number of references n' objects dat may be packaged\&.
.RE
.PP
[<refname>\&...]
.RS 4
A list of references used ta limit tha references reported as available\&. This is principally of use to
\fIgit fetch\fR, which expects ta receive only dem references axed fo' n' not necessarily every last muthafuckin thang up in tha pack (in dis case,
\fIgit bundle\fR
acts like
\fIgit fetch\-pack\fR)\&.
.RE
.SH "SPECIFYING REFERENCES"
.sp
\fIgit bundle\fR will only package references dat is shown by \fIgit show\-ref\fR: dis includes heads, tags, n' remote heads\&. References like fuckin master~1 cannot be packaged yo, but is perfectly suitable fo' definin tha basis\&. Mo' than one reference may be packaged, n' mo' than one basis can be specified\&. Da objects packaged is dem not contained up in tha union of tha given bases\&. Each basis can be specified explicitly (e\&.g\&. ^master~10), or implicitly (e\&.g\&. master~10\&.\&.master, \-\-since=10\&.days\&.ago master)\&.
.sp
It be straight-up blingin dat tha basis used be held by tha destination\&. Well shiiiit, it be all gravy ta err on tha side of caution, causin tha bundle file ta contain objects already up in tha destination, as these is ignored when unpackin all up in tha destination\&.
.SH "EXAMPLE"
.sp
Assume you wanna transfer tha history from a repository R1 on machine A ta another repository R2 on machine B\&. For whatever reason, direct connection between A n' B aint allowed yo, but we can move data from A ta B via some mechanizzle (CD, email, etc\&.)\&. Us thugs wanna update R2 wit pimpment made on tha branch masta up in R1\&.
.sp
To bootstrap tha process, you can first create a funky-ass bundle dat aint gots any basis\&. Yo ass can bust a tag ta remember up ta what tha fuck commit you last processed, up in order ta make it easy as fuck  ta lata update tha other repository wit a incremenstrual bundle:
.sp
.if n \{\
.RS 4
.\}
.nf
machineA$ cd R1
machineA$ git bundle create file\&.bundle master
machineA$ git tag \-f lastR2bundle master
.fi
.if n \{\
.RE
.\}
.sp
.sp
Then you transfer file\&.bundle ta tha target machine B\&. Because dis bundle do not require any existin object ta be extracted, you can create a freshly smoked up repository on machine B by clonin from it:
.sp
.if n \{\
.RS 4
.\}
.nf
machineB$ git clone \-b masta /home/me/tmp/file\&.bundle R2
.fi
.if n \{\
.RE
.\}
.sp
.sp
This will define a remote called "origin" up in tha resultin repository dat lets you fetch n' pull from tha bundle\&. Da $GIT_DIR/config file up in R2 gonna git a entry like this:
.sp
.if n \{\
.RS 4
.\}
.nf
[remote "origin"]
    url = /home/me/tmp/file\&.bundle
    fetch = refs/heads/*:refs/remotes/origin/*
.fi
.if n \{\
.RE
.\}
.sp
.sp
To update tha resultin mine\&.git repository, you can fetch or pull afta replacin tha bundle stored at /home/me/tmp/file\&.bundle wit incremenstrual thugged-out shit\&.
.sp
Afta hustlin some mo' up in tha original gangsta repository, you can create a incremenstrual bundle ta update tha other repository:
.sp
.if n \{\
.RS 4
.\}
.nf
machineA$ cd R1
machineA$ git bundle create file\&.bundle lastR2bundle\&.\&.master
machineA$ git tag \-f lastR2bundle master
.fi
.if n \{\
.RE
.\}
.sp
.sp
Yo ass then transfer tha bundle ta tha other machine ta replace /home/me/tmp/file\&.bundle, n' pull from it\&.
.sp
.if n \{\
.RS 4
.\}
.nf
machineB$ cd R2
machineB$ git pull
.fi
.if n \{\
.RE
.\}
.sp
.sp
If you know up ta what tha fuck commit tha intended recipient repository should have tha necessary objects, you can use dat knowledge ta specify tha basis, givin a cold-ass lil cut\-off point ta limit tha revisions n' objects dat go up in tha resultin bundle\&. Da previous example used tha lastR2bundle tag fo' dis purpose yo, but you can use any other options dat you would give ta tha \fBgit-log\fR(1) command\& yo. Here is mo' examples:
.sp
Yo ass can bust a tag dat is present up in both:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bundle create mybundle v1\&.0\&.0\&.\&.master
.fi
.if n \{\
.RE
.\}
.sp
.sp
Yo ass can bust a funky-ass basis based on time:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bundle create mybundle \-\-since=10\&.days master
.fi
.if n \{\
.RE
.\}
.sp
.sp
Yo ass can use tha number of commits:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bundle create mybundle \-10 master
.fi
.if n \{\
.RE
.\}
.sp
.sp
Yo ass can run git\-bundle verify ta peep if you can extract from a funky-ass bundle dat was pimped wit a funky-ass basis:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bundle verify mybundle
.fi
.if n \{\
.RE
.\}
.sp
.sp
This will list what tha fuck commits you must have up in order ta extract from tha bundle n' will error up if you aint gots them\&.
.sp
A bundle from a recipient repository\(cqs point of view is just like a regular repository which it fetches or pulls from\&. Yo ass can, fo' example, map references when fetching:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git fetch mybundle master:localRef
.fi
.if n \{\
.RE
.\}
.sp
.sp
Yo ass can also peep what tha fuck references it offers:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git ls\-remote mybundle
.fi
.if n \{\
.RE
.\}
.sp
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
