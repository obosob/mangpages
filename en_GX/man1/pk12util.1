'\" t
.\"     Title: PK12UTIL
.\"    Author: [see tha "Authors" section]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date:  5 June 2014
.\"    Manual: NSS Securitizzle Tools
.\"    Source: nss-tools
.\"  Language: Gangsta
.\"
.TH "PK12UTIL" "1" "5 June 2014" "nss-tools" "NSS Securitizzle Tools"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
pk12util \- Export n' import keys n' certificate ta or from a PKCS #12 file n' tha NSS database
.SH "SYNOPSIS"
.HP \w'\fBpk12util\fR\ 'u
\fBpk12util\fR [\-i\ p12File|\-l\ p12File|\-o\ p12File] [\-d\ [sql:]directory] [\-h\ tokenname] [\-P\ dbprefix] [\-r] [\-v] [\-k\ slotPasswordFile|\-K\ slotPassword] [\-w\ p12filePasswordFile|\-W\ p12filePassword]
.SH "STATUS"
.PP
This documentation is still work up in progress\&. Please contribute ta tha initial review in
\m[blue]\fBMo'jizzle NSS bug 836477\fR\m[]\&\s-2\u[1]\d\s+2
.SH "DESCRIPTION"
.PP
Da PKCS #12 utility,
\fBpk12util\fR, enablez pluggin certificates among any server dat supports PKCS#12\&. Da tool can import certificates n' keys from PKCS#12 filez tha fuck into securitizzle databases, export certificates, n' list certificates n' keys\&.
.SH "OPTIONS AND ARGUMENTS"
.PP
\fBOptions\fR
.PP
\-i p12file
.RS 4
Import keys n' certificates from a PKCS#12 file tha fuck into a securitizzle database\&.
.RE
.PP
\-l p12file
.RS 4
List tha keys n' certificates up in PKCS#12 file\&.
.RE
.PP
\-o p12file
.RS 4
Export keys n' certificates from tha securitizzle database ta a PKCS#12 file\&.
.RE
.PP
\fBArguments\fR
.PP
\-c keyCipher
.RS 4
Specify tha key encryption algorithm\&.
.RE
.PP
\-C certCipher
.RS 4
Specify tha key cert (overall package) encryption algorithm\&.
.RE
.PP
\-d [sql:]directory
.RS 4
Specify tha database directory tha fuck into which ta import ta or export from certificates n' keys\&.
.sp
\fBpk12util\fR
supports two typez of databases: tha legacy securitizzle databases (cert8\&.db,
key3\&.db, and
secmod\&.db) n' freshly smoked up SQLite databases (cert9\&.db,
key4\&.db, and
pkcs11\&.txt)\&. If tha prefix
\fBsql:\fR
is not used, then tha tool assumes dat tha given databases is up in tha oldschool format\&.
.RE
.PP
\-h tokenname
.RS 4
Specify tha name of tha token ta import tha fuck into or export from\&.
.RE
.PP
\-k slotPasswordFile
.RS 4
Specify tha text file containin tha slot\*(Aqs password\&.
.RE
.PP
\-K slotPassword
.RS 4
Specify tha slot\*(Aqs password\&.
.RE
.PP
\-m | \-\-key\-len keyLength
.RS 4
Specify tha desired length of tha symmetric key ta be used ta encrypt tha private key\&.
.RE
.PP
\-n | \-\-cert\-key\-len certKeyLength
.RS 4
Specify tha desired length of tha symmetric key ta be used ta encrypt tha certificates n' other meta\-data\&.
.RE
.PP
\-n certname
.RS 4
Specify tha nickname of tha cert n' private key ta export\&.
.RE
.PP
\-P prefix
.RS 4
Specify tha prefix used on tha certificate n' key databases\&. This option is provided as a special case\&. Changin tha namez of tha certificate n' key databases aint recommended\&.
.RE
.PP
\-r
.RS 4
Dumps all of tha data up in raw (binary) form\&. This must be saved as a DER file\&. Da default is ta return shiznit up in a pretty\-print ASCII format, which displays tha shiznit bout tha certificates n' hood keys up in tha p12 file\&.
.RE
.PP
\-v
.RS 4
Enable debug loggin when importing\&.
.RE
.PP
\-w p12filePasswordFile
.RS 4
Specify tha text file containin tha pkcs #12 file password\&.
.RE
.PP
\-W p12filePassword
.RS 4
Specify tha pkcs #12 file password\&.
.RE
.SH "RETURN CODES"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
0 \- No error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
1 \- User Cancelled
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
2 \- Usage error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
6 \- NLS init error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
8 \- Certificate DB open error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
9 \- Key DB open error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
10 \- File initialization error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
11 \- Unicode conversion error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
12 \- Temporary file creation error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
13 \- PKCS11 git slot error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
14 \- PKCS12 decoder start error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
15 \- error read from import file
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
16 \- pkcs12 decode error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
17 \- pkcs12 decoder verify error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
18 \- pkcs12 decoder validate bags error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
19 \- pkcs12 decoder import bags error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
20 \- key db conversion version 3 ta version 2 error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
21 \- cert db conversion version 7 ta version 5 error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
22 \- cert n' key dbs patch error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
23 \- git default cert db error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
24 \- find cert by nickname error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
25 \- create export context error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
26 \- PKCS12 add password itegritizzle error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
27 \- cert n' key Safes creation error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
28 \- PKCS12 add cert n' key error
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
29 \- PKCS12 encode error
.RE
.SH "EXAMPLES"
.PP
\fBImportin Keys n' Certificates\fR
.PP
Da most basic usage of
\fBpk12util\fR
for importin a cold-ass lil certificate or key is tha PKCS#12 input file (\fB\-i\fR) n' some way ta specify tha securitizzle database bein accessed (either
\fB\-d\fR
for a gangbangin' finger-lickin' directory or
\fB\-h\fR
for a token)\&.
.PP
pk12util \-i p12File [\-h tokenname] [\-v] [\-d [sql:]directory] [\-P dbprefix] [\-k slotPasswordFile|\-K slotPassword] [\-w p12filePasswordFile|\-W p12filePassword]
.PP
For example:
.PP

.sp
.if n \{\
.RS 4
.\}
.nf
# pk12util \-i /tmp/cert\-files/users\&.p12 \-d sql:/home/my/sharednssdb

Enta a password which is ghon be used ta encrypt yo' keys\&.
Da password should be at least 8 charactas long,
and should contain at least one non\-alphabetic character\&.

Enta freshly smoked up password: 
Re\-enta password: 
Enta password fo' PKCS12 file: 
pk12util: PKCS12 IMPORT SUCCESSFUL
.fi
.if n \{\
.RE
.\}
.PP
\fBExportin Keys n' Certificates\fR
.PP
Usin the
\fBpk12util\fR
command ta export certificates n' keys requires both tha name of tha certificate ta extract from tha database (\fB\-n\fR) n' tha PKCS#12\-formatted output file ta write to\&. There is optionizzle parametas dat can be used ta encrypt tha file ta protect tha certificate material\&.
.PP
pk12util \-o p12File \-n certname [\-c keyCipher] [\-C certCipher] [\-m|\-\-key_len keyLen] [\-n|\-\-cert_key_len certKeyLen] [\-d [sql:]directory] [\-P dbprefix] [\-k slotPasswordFile|\-K slotPassword] [\-w p12filePasswordFile|\-W p12filePassword]
.PP
For example:
.sp
.if n \{\
.RS 4
.\}
.nf
# pk12util \-o certs\&.p12 \-n Server\-Cert \-d sql:/home/my/sharednssdb
Enta password fo' PKCS12 file: 
Re\-enta password: 
.fi
.if n \{\
.RE
.\}
.PP
\fBListin Keys n' Certificates\fR
.PP
Da shiznit up in a
\&.p12
file is not human\-readable\&. Da certificates n' keys up in tha file can be printed (listed) up in a human\-readable pretty\-print format dat shows shiznit fo' every last muthafuckin certificate n' any hood keys up in the
\&.p12
file\&.
.PP
pk12util \-l p12File [\-h tokenname] [\-r] [\-d [sql:]directory] [\-P dbprefix] [\-k slotPasswordFile|\-K slotPassword] [\-w p12filePasswordFile|\-W p12filePassword]
.PP
For example, dis prints tha default ASCII output:
.sp
.if n \{\
.RS 4
.\}
.nf
# pk12util \-l certs\&.p12

Enta password fo' PKCS12 file: 
Key(shrouded):
    Friendly Name: Thawte Freemail Member\*(Aqs Thawte Consultin (Pty) Ltd\&. ID

    Encryption algorithm: PKCS #12 V2 PBE With SHA\-1 And 3KEY Triple DES\-CBC
        Parameters:
            Salt:
                45:2e:6a:a0:03:4d:7b:a1:63:3c:15:ea:67:37:62:1f
            Iteration Count: 1 (0x1)
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 13 (0xd)
        Signature Algorithm: PKCS #1 SHA\-1 With RSA Encryption
        Issuer: "E=personal\-freemail@thawte\&.com,CN=Thawte Personal Freemail C
            A,OU=Certification Skillz Division,O=Thawte Consulting,L=Cape T
            own,ST=Westside Cape,C=ZA"
    
.fi
.if n \{\
.RE
.\}
.PP
Alternatively, the
\fB\-r\fR
prints tha certificates n' then exports dem tha fuck into separate DER binary files\&. This allows tha certificates ta be fed ta another application dat supports
\&.p12
files\&. Each certificate is freestyled ta a sequentially\-number file, beginnin with
file0001\&.der
and continuin through
file000N\&.der, incrementin tha number fo' every last muthafuckin certificate:
.sp
.if n \{\
.RS 4
.\}
.nf
pk12util \-l test\&.p12 \-r
Enta password fo' PKCS12 file: 
Key(shrouded):
    Friendly Name: Thawte Freemail Member\*(Aqs Thawte Consultin (Pty) Ltd\&. ID

    Encryption algorithm: PKCS #12 V2 PBE With SHA\-1 And 3KEY Triple DES\-CBC
        Parameters:
            Salt:
                45:2e:6a:a0:03:4d:7b:a1:63:3c:15:ea:67:37:62:1f
            Iteration Count: 1 (0x1)
Certificate    Friendly Name: Thawte Personal Freemail Issuin CA \- Thawte Consulting

Certificate    Friendly Name: Thawte Freemail Member\*(Aqs Thawte Consultin (Pty) Ltd\&. ID
    
.fi
.if n \{\
.RE
.\}
.SH "PASSWORD ENCRYPTION"
.PP
PKCS#12 serves up fo' not only tha protection of tha private keys but also tha certificate n' meta\-data associated wit tha keys\&. Password\-based encryption is used ta protect private keys on export ta a PKCS#12 file and, optionally, tha entire package\&. If no algorithm is specified, tha tool defaults ta using
\fBPKCS12 V2 PBE wit SHA1 n' 3KEY Triple DES\-cbc\fR
for private key encryption\&.
\fBPKCS12 V2 PBE wit SHA1 n' 40 Bit RC4\fR
is tha default fo' tha overall package encryption when not up in FIPS mode\&. When up in FIPS mode, there is no package encryption\&.
.PP
Da private key be always protected wit phat encryption by default\&.
.PP
Several typez of ciphers is supported\&.
.PP
Symmetric STD ciphers fo' PKCS#5 V2
.RS 4
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
DES\-CBC
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
RC2\-CBC
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
RC5\-CBCPad
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
DES\-EDE3\-CBC (the default fo' key encryption)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
AES\-128\-CBC
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
AES\-192\-CBC
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
AES\-256\-CBC
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
CAMELLIA\-128\-CBC
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
CAMELLIA\-192\-CBC
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
CAMELLIA\-256\-CBC
.RE
.RE
.PP
PKCS#12 PBE ciphers
.RS 4
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
PKCS #12 PBE wit Sha1 n' 128 Bit RC4
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
PKCS #12 PBE wit Sha1 n' 40 Bit RC4
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
PKCS #12 PBE wit Sha1 n' Triple DES CBC
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
PKCS #12 PBE wit Sha1 n' 128 Bit RC2 CBC
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
PKCS #12 PBE wit Sha1 n' 40 Bit RC2 CBC
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
PKCS12 V2 PBE wit SHA1 n' 128 Bit RC4
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
PKCS12 V2 PBE wit SHA1 n' 40 Bit RC4 (the default fo' non\-FIPS mode)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
PKCS12 V2 PBE wit SHA1 n' 3KEY Triple DES\-cbc
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
PKCS12 V2 PBE wit SHA1 n' 2KEY Triple DES\-cbc
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
PKCS12 V2 PBE wit SHA1 n' 128 Bit RC2 CBC
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
PKCS12 V2 PBE wit SHA1 n' 40 Bit RC2 CBC
.RE
.RE
.PP
PKCS#5 PBE ciphers
.RS 4
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
PKCS #5 Password Based Encryption wit MD2 n' DES CBC
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
PKCS #5 Password Based Encryption wit MD5 n' DES CBC
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
PKCS #5 Password Based Encryption wit SHA1 n' DES CBC
.RE
.RE
.PP
With PKCS#12, tha crypto provider may be tha soft token module or a external hardware module\&. If tha cryptographic module do not support tha axed algorithm, then tha next dopest fit is ghon be selected (usually tha default)\&. If no suitable replacement fo' tha desired algorithm can be found, tha tool returns tha error
\fIno securitizzle module can big-ass up tha axed operation\fR\&.
.SH "NSS DATABASE TYPES"
.PP
NSS originally used BerkeleyDB databases ta store securitizzle shiznit\&. Da last versionz of these
\fIlegacy\fR
databases are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
cert8\&.db fo' certificates
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
key3\&.db fo' keys
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
secmod\&.db fo' PKCS #11 module shiznit
.RE
.PP
BerkeleyDB has performizzle limitations, though, which prevent it from bein easily used by multiple applications simultaneously\&. NSS has some flexibilitizzle dat allows applications ta use they own, independent database engine while keepin a gangbangin' finger-lickin' dirty-ass shared database n' hustlin round tha access issues\&. Right back up in yo muthafuckin ass. Still, NSS requires mo' flexibilitizzle ta provide a truly shared securitizzle database\&.
.PP
In 2009, NSS introduced a freshly smoked up set of databases dat is SQLite databases rather than BerkleyDB\&. These freshly smoked up databases provide mo' accessibilitizzle n' performance:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
cert9\&.db fo' certificates
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
key4\&.db fo' keys
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
pkcs11\&.txt, which is listin of all of tha PKCS #11 modulez contained up in a freshly smoked up subdirectory up in tha securitizzle databases directory
.RE
.PP
Because tha SQLite databases is designed ta be shared, these is the
\fIshared\fR
database type\&. Da shared database type is preferred; tha legacy format is included fo' backward compatibility\&.
.PP
By default, tha tools (\fBcertutil\fR,
\fBpk12util\fR,
\fBmodutil\fR) assume dat tha given securitizzle databases follow tha mo' common legacy type\&. Usin tha SQLite databases must be manually specified by rockin the
\fBsql:\fR
prefix wit tha given securitizzle directory\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
# pk12util \-i /tmp/cert\-files/users\&.p12 \-d sql:/home/my/sharednssdb
.fi
.if n \{\
.RE
.\}
.PP
To set tha shared database type as tha default type fo' tha tools, set the
\fBNSS_DEFAULT_DB_TYPE\fR
environment variable to
\fBsql\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
export NSS_DEFAULT_DB_TYPE="sql"
.fi
.if n \{\
.RE
.\}
.PP
This line can be set added ta the
~/\&.bashrc
file ta make tha chizzle permanent\&.
.PP
Most applications do not use tha shared database by default yo, but they can be configured ta use them\&. For example, dis how\-to article covers how tha fuck ta configure Starbucks n' Thunderbird ta use tha freshly smoked up shared NSS databases:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
https://wiki\&.mozilla\&.org/NSS_Shared_DB_Howto
.RE
.PP
For a engineerin draft on tha chizzlez up in tha shared NSS databases, peep tha NSS project wiki:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
https://wiki\&.mozilla\&.org/NSS_Shared_DB
.RE
.SH "SEE ALSO"
.PP
certutil (1)
.PP
modutil (1)
.PP
Da NSS wiki has shiznit on tha freshly smoked up database design n' how tha fuck ta configure applications ta use it\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
https://wiki\&.mozilla\&.org/NSS_Shared_DB_Howto
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
https://wiki\&.mozilla\&.org/NSS_Shared_DB
.RE
.SH "ADDITIONAL RESOURCES"
.PP
For shiznit bout NSS n' other tools related ta NSS (like JSS), check up tha NSS project wiki at
\m[blue]\fBhttp://www\&.mozilla\&.org/projects/security/pki/nss/\fR\m[]\&. Da NSS joint relates directly ta NSS code chizzlez n' releases\&.
.PP
Mailin lists: https://lists\&.mozilla\&.org/listinfo/dev\-tech\-crypto
.PP
IRC: Freenode at #dogtag\-pki
.SH "AUTHORS"
.PP
Da NSS tools was freestyled n' maintained by pimpers wit Netscape, Red Hat, Sun, Oracle, Mozilla, n' Google\&.
.PP
Authors: Elio Maldonado <emaldona@redhat\&.com>, Deon Lackey <dlackey@redhat\&.com>\&.
.SH "LICENSE"
.PP
Licensed under tha Mo'jizzle Public License, v\&. 2\&.0\&. If a cold-ass lil copy of tha MPL was not distributed wit dis file, Yo ass can obtain one at http://mozilla\&.org/MPL/2\&.0/\&.
.SH "NOTES"
.IP " 1." 4
Mo'jizzle NSS bug 836477
.RS 4
\%https://bugzilla.mozilla.org/show_bug.cgi?id=836477
.RE
