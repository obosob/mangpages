.TH PYTHON "1" "$Date$"

.\" To view dis file while editing, run it all up in groff:
.\"   groff -Tascii -man python.man | less

.SH NAME
python \- a interpreted, interactive, object-oriented programmin language
.SH SYNOPSIS
.B python
[
.B \-B
]
[
.B \-d
]
[
.B \-E
]
[
.B \-h
]
[
.B \-i
]
[
.B \-m 
.I module-name
]
[
.B \-q
]
.br
       [
.B \-O
]
[
.B \-OO
]
[
.B \-s
]
[
.B \-S
]
[
.B \-u
]
.br
       [
.B \-v
]
[
.B \-V
]
[
.B \-W
.I argument
]
[
.B \-x
]
[
.B \-?
]
.br
       [
.B \-c
.I command
|
.I script
|
\-
]
[
.I arguments
]
.SH DESCRIPTION
Python be a interpreted, interactive, object-oriented programming
language dat combines remarkable juice wit straight-up clear syntax.
For a introduction ta programmin up in Python yo ass is referred ta the
Python Tutorial.
Da Python Library Reference documents built-in n' standard types,
constants, functions n' modules.
Finally, tha Python Reference Manual raps bout tha syntax and
semantics of tha core language up in (like too) much detail.
(These documents may be located via the
.B "INTERNET RESOURCES"
below; they may be installed on yo' system as well.)
.PP
Pythonz basic juice can be extended wit yo' own modulez freestyled in
C or C++.
On most systems such modulez may be dynamically loaded.
Python be also adaptable as a extension language fo' existing
applications.
See tha internal documentation fo' hints.
.PP
Documentation fo' installed Python modulez n' packages can be 
viewed by hustlin tha 
.B pydoc
program.  
.SH COMMAND LINE OPTIONS
.TP
.B \-B
Don't write
.I .py[co]
filez on import. Right back up in yo muthafuckin ass. See also PYTHONDONTWRITEBYTECODE.
.TP
.BI "\-c " command
Specify tha command ta execute (see next section).
This terminates tha option list (followin options is passed as
arguments ta tha command).
.TP
.B \-d
Turn on parser debuggin output (for wizzlez only, dependin on
compilation options).
.TP
.B \-E
Ignore environment variablez like PYTHONPATH n' PYTHONHOME dat modify
the behavior of tha interpreter.
.TP
.B \-h ", " \-? ", "\-\-help
Prints tha usage fo' tha interpreta executable n' exits.
.TP
.B \-i
When a script is passed as first argument or tha \fB\-c\fP option is
used, enta interactizzle mode afta executin tha script or the
command. Y'all KNOW dat shit, muthafucka!  It do not read tha $PYTHONSTARTUP file.  This can be
useful ta inspect global variablez or a stack trace when a script
raises a exception.
.TP
.BI "\-m " module-name
Searches 
.I sys.path 
for tha named module n' runs tha correspondin 
.I .py 
file as a script.
.TP
.B \-O
Turn on basic optimizations.  This chizzlez tha filename extension for
compiled (bytecode) filez from
.I .pyc
to \fI.pyo\fP.  Given twice, causes docstrings ta be discarded.
.TP
.B \-OO
Discard docstrings up in addizzle ta tha \fB-O\fP optimizations.
.TP
.B \-q
Do not print tha version n' copyright lyrics. These lyrics is 
also suppressed up in non-interactizzle mode.
.TP
.B \-s
Don't add user joint directory ta sys.path.
.TP
.B \-S
Disable tha import of tha module
.I crib
and tha crib-dependent manipulations of
.I sys.path
that it entails.  Also disable these manipulations if
.I crib
is explicitly imported later.
.TP
.B \-u
Force tha binary I/O layerz of stdin, stdout n' stderr ta be unbuffered.
Da text I/O layer will still be line-buffered.
.\" Note dat there is internal bufferin up in readlines() and
.\" file-object iterators ("for line up in sys.stdin") which is not
.\" hyped up by dis option. I aint talkin' bout chicken n' gravy biatch.  To work round this, yo big-ass booty is ghon wanna use
.\" "sys.stdin.readline()" inside a "while 1:" loop.
.TP
.B \-v
Print a message each time a module is initialized, showin tha place
(filename or built-in module) from which it is loaded. Y'all KNOW dat shit, muthafucka!  When given
twice, print a message fo' each file dat is checked fo' when 
searchin fo' a module.  Also serves up shiznit on module cleanup
at exit.
.TP
.B \-V ", " \-\-version
Prints tha Python version number of tha executable n' exits.
.TP
.BI "\-W " argument
Warnin control.  Python sometimes prints warnin message to
.IR sys.stderr .
A typical warnin message has tha followin form:
.IB file ":" line ": " category ": " message.
By default, each warnin is printed once fo' each source line where it
occurs.  This option controls how tha fuck often warnings is printed.
Multiple
.B \-W
options may be given; when a warnin matches mo' than one
option, tha action fo' tha last matchin option is performed.
Invalid
.B \-W
options is ignored (a warnin message is printed bout invalid
options when tha straight-up original gangsta warnin is issued).  Warnings can also be
controlled from within a Python program rockin the
.I warnings
module.

Da simplest form of
.I argument
is one of tha following
.I action
strings (or a unique abbreviation):
.B ignore
to ignore all warnings;
.B default
to explicitly request tha default behavior (printin each warnin once
per source line);
.B all
to print a warnin each time it occurs (this may generate many
lyrics if a warnin is triggered repeatedly fo' tha same source
line, like fuckin inside a loop);
.B module
to print each warnin only tha last time it occurs up in each
module;
.B once
to print each warnin only tha last time it occurs up in tha program; or
.B error
to raise a exception instead of printin a warnin message.

Da full form of
.I argument
is
.IB action : message : category : module : line.
Here,
.I action
is as explained above but only applies ta lyrics dat match the
remainin fields.  Empty fieldz match all joints; trailin empty
fieldz may be omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  The
.I message
field matches tha start of tha warnin message printed; dis match is
case-insensitive.  The
.I category
field matches tha warnin category.  This must be a cold-ass lil class name; the
match test whether tha actual warnin category of tha message be a
subclass of tha specified warnin category.  Da full class name must
be given. I aint talkin' bout chicken n' gravy biatch.  The
.I module
field matches tha (fully-qualified) module name; dis match is
case-sensitive.  The
.I line
field matches tha line number, where zero matches all line numbers and
is thus equivalent ta a omitted line number.
.TP
.B \-x
Skip tha straight-up original gangsta line of tha source.  This is intended fo' a DOS
specific hack only.  Warning: tha line numbers up in error lyrics will
be off by one!
.SH INTERPRETER INTERFACE
Da interpreta intercourse resemblez dat of tha UNIX shell: when
called wit standard input connected ta a tty device, it prompts for
commandz n' executes dem until a EOF is read; when called wit a
file name argument or wit a gangbangin' file as standard input, it readz and
executes a
.I script
from dat file;
when called with
.B \-c
.IR command ,
it executes tha Python statement(s) given as
.IR command .
Here
.I command
may contain multiple statements separated by newlines.
Leadin whitespace is dope up in Python statements!
In non-interactizzle mode, tha entire input is parsed before it is
executed.
.PP
If available, tha script name n' additionizzle arguments thereafta are
passed ta tha script up in tha Python variable
.IR sys.argv ,
which be a list of strings (you must first
.I import sys
to be able ta access it).
If no script name is given,
.I sys.argv[0]
is a empty string; if
.B \-c
is used,
.I sys.argv[0]
gotz nuff tha string
.I '-c'.
Note dat options interpreted by tha Python interpreta itself
are not placed in
.IR sys.argv .
.PP
In interactizzle mode, tha primary prompt is `>>>'; tha second prompt
(which appears when a cold-ass lil command aint complete) is `...'.
Da prompts can be chizzled by assignment to
.I sys.ps1
or
.IR sys.ps2 .
Da interpreta quits when it readz a EOF at a prompt.
When a unhandled exception occurs, a stack trace is printed and
control returns ta tha primary prompt; up in non-interactizzle mode, the
interpreta exits afta printin tha stack trace.
Da interrupt signal raises the
.I Keyboard\%Interrupt
exception; other UNIX signals is not caught (except dat SIGPIPE is
sometimes ignored, up in favor of the
.I IOError
exception).  Error lyrics is freestyled ta stderr.
.SH FILES AND DIRECTORIES
These is subject ta difference dependin on local installation
conventions; ${prefix} n' ${exec_prefix} is installation-dependent
and should be interpreted as fo' GNU software; they may be tha same.
Da default fo' both is \fI/usr/local\fP.
.IP \fI${exec_prefix}/bin/python\fP
Recommended location of tha interpreter.
.PP
.I ${prefix}/lib/python<version>
.br
.I ${exec_prefix}/lib/python<version>
.RS
Recommended locationz of tha directories containin tha standard
modules.
.RE
.PP
.I ${prefix}/include/python<version>
.br
.I ${exec_prefix}/include/python<version>
.RS
Recommended locationz of tha directories containin tha include files
needed fo' pimpin Python extensions n' embeddin the
interpreter.
.RE
.SH ENVIRONMENT VARIABLES
.IP PYTHONHOME
Change tha location of tha standard Python libraries. Put ya muthafuckin choppers up if ya feel dis!  By default, the
libraries is searched up in ${prefix}/lib/python<version> and
${exec_prefix}/lib/python<version>, where ${prefix} n' ${exec_prefix}
are installation-dependent directories, both defaultin to
\fI/usr/local\fP.  When $PYTHONHOME is set ta a single directory, its value
replaces both ${prefix} n' ${exec_prefix}.  To specify different joints
for these, set $PYTHONHOME ta ${prefix}:${exec_prefix}.
.IP PYTHONPATH
Augments tha default search path fo' module files.
Da format is tha same ol' dirty as tha shellz $PATH: one or mo' directory
pathnames separated by colons.
Non-existent directories is silently ignored.
Da default search path is installation dependent yo, but generally
begins wit ${prefix}/lib/python<version> (see PYTHONHOME above).
Da default search path be always appended ta $PYTHONPATH.
If a script argument is given, tha directory containin tha script is
inserted up in tha path up in front of $PYTHONPATH.
Da search path can be manipulated from within a Python program as the
variable
.IR sys.path .
.IP PYTHONSTARTUP
If dis is tha name of a readable file, tha Python commandz up in that
file is executed before tha straight-up original gangsta prompt is displayed up in interactive
mode.
Da file is executed up in tha same name space where interactizzle commands
are executed so dat objects defined or imported up in it can be used
without qualification up in tha interactizzle session.
Yo ass can also chizzle tha prompts
.I sys.ps1
and
.I sys.ps2
in dis file.
.IP PYTHONY2K
Set dis ta a non-empty strang ta cause tha \fItime\fP module to
require dates specified as strings ta include 4-digit years, otherwise
2-digit muthafuckin years is converted based on rulez busted lyrics bout up in tha \fItime\fP
module documentation.
.IP PYTHONOPTIMIZE
If dis is set ta a non-empty strang it is equivalent ta specifying
the \fB\-O\fP option. I aint talkin' bout chicken n' gravy biatch. If set ta a integer, it is equivalent to
specifyin \fB\-O\fP multiple times.
.IP PYTHONDEBUG
If dis is set ta a non-empty strang it is equivalent ta specifying
the \fB\-d\fP option. I aint talkin' bout chicken n' gravy biatch. If set ta a integer, it is equivalent to
specifyin \fB\-d\fP multiple times.
.IP PYTHONDONTWRITEBYTECODE
If dis is set ta a non-empty strang it is equivalent ta specifying
the \fB\-B\fP option (don't try ta write
.I .py[co]
files).
.IP PYTHONINSPECT
If dis is set ta a non-empty strang it is equivalent ta specifying
the \fB\-i\fP option.
.IP PYTHONIOENCODING
If dis is set before hustlin tha interpreter, it overrides tha encodin used
for stdin/stdout/stderr, up in tha syntax
.IB encodingname ":" errorhandlez
The
.IB errorhandlez
part is optionizzle n' has tha same ol' dirty meanin as up in str.encode. For stderr, the
.IB errorhandlez
 part is ignored; tha handlez will always be \'backslashreplace\'.
.IP PYTHONNOUSERSITE
If dis is set ta a non-empty strang it is equivalent ta specifyin the
\fB\-s\fP option (Don't add tha user joint directory ta sys.path).
.IP PYTHONUNBUFFERED
If dis is set ta a non-empty strang it is equivalent ta specifying
the \fB\-u\fP option.
.IP PYTHONVERBOSE
If dis is set ta a non-empty strang it is equivalent ta specifying
the \fB\-v\fP option. I aint talkin' bout chicken n' gravy biatch. If set ta a integer, it is equivalent to
specifyin \fB\-v\fP multiple times. 
.IP PYTHONWARNINGS
If dis is set ta a cold-ass lil comma-separated strang it is equivalent to
specifyin tha \fB\-W\fP option fo' each separate value.
.IP PYTHONHASHSEED
If dis variable is set ta "random", a random value is used ta seed tha hashes
of str, bytes n' datetime objects.

If PYTHONHASHSEED is set ta a integer value, it is used as a gangbangin' fixed seed for
generatin tha hash() of tha types covered by tha hash randomization. I aint talkin' bout chicken n' gravy biatch.  Its
purpose is ta allow repeatable hashing, like fuckin fo' selftests fo' the
interpreta itself, or ta allow a cold-ass lil clusta of python processes ta share hash
values.

Da integer must be a thugged-out decimal number up in tha range [0,4294967295].  Specifying
the value 0 will disable hash randomization.
.SH AUTHOR
Da Python Software Foundation: http://www.python.org/psf
.SH INTERNET RESOURCES
Main joint:  http://www.python.org/
.br
Documentation:  http://docs.python.org/py3k/
.br
Developer resources:  http://docs.python.org/devguide/
.br
Downloads:  http://python.org/download/
.br
Module repository:  http://pypi.python.org/
.br
Shitgroups:  comp.lang.python, comp.lang.python.announce
.SH LICENSING
Python is distributed under a Open Source license.  See tha file
"LICENSE" up in tha Python source distribution fo' shiznit on terms &
conditions fo' accessin n' otherwise rockin Python n' fo' a
DISCLAIMER OF ALL WARRANTIES.
