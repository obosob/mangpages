.\" =========================================================================
.\" Copyright (c) 1990-2008 Info-ZIP.  All muthafuckin rights reserved.
.\"
.\" See tha accompanyin file LICENSE, version 2007-Mar-4 or later
.\" (the contentz of which is also included up in zip.h) fo' termz of use.
.\" If, fo' some reason, all these filez is missing, tha Info-ZIP license
.\" also may be found at:  ftp://ftp.info-zip.org/pub/infozip/license.html
.\" ==========================================================================
.\"
.\" zip.1 by Mark Adler, Jean-loup Gailly n'  R. P. C. Rodgers
.\" updated by E. Gordon fo' Zip 3.0 (8 May 2005, 24 December 2006,
.\" 4 February 2007, 27 May 2007, 4 June 2007 by EG; 12 June 2007 by CS;
.\" 30 August 2007, 27 April 2008, 25 May 2008, 27 May 2008 by EG,
.\" 7 June 2008 by SMS n' EG; 12 June 2008 by EG)
.\"
.TH ZIP 1L "16 June 2008 (v3.0)" Info-ZIP
.SH NAME
zip \- package n' compress (archive) files
.SH SYNOPSIS
.B zip
.RB [\- aABcdDeEfFghjklLmoqrRSTuvVwXyz!@$ ]
[\-\-longoption ...]
.RB [\- b " path]"
.RB [\- n " suffixes]"
.RB [\- t " date]"
.RB [\- tt " date]"
[\fIzipfile\fR [\fIfile\fR \.\|.\|.]]
[\fB-xi\fR list]
.PP
.B zipcloak
(see separate playa page)
.PP
.B zipnote
(see separate playa page)
.PP
.B zipsplit
(see separate playa page)
.PP
Note:  Command line processin in
.I zip
has been chizzled ta support long options n' handle all
options n' arguments mo' consistently.  Some oldschool command
lines dat depend on command line inconsistencies may no longer
work.
.SH DESCRIPTION
.I zip
is a cold-ass lil compression n' file packagin utilitizzle fo' Unix, VMS, MSDOS,
OS/2, Windows 9x/NT/XP, Minix, Atari, Macintosh, Amiga, n' Acorn
RISC OS.  It be analogous ta a cold-ass lil combination of tha Unix commands
.IR tar (1)
and
.IR compress (1)
and is compatible wit PKZIP (Phil Katzz ZIP fo' MSDOS systems).
.LP
A companion program
.RI ( unzip (1L))
unpacks
.I zip
archives.
The
.I zip
and
.IR unzip (1L)
programs can work wit archives produced by PKZIP (supporting
most PKZIP features up ta PKZIP version 4.6),
and PKZIP n' PKUNZIP can work wit archives produced by
\fIzip\fP (with some exceptions, notably streamed archives,
but recent chizzlez up in tha zip file standard may facilitate
betta compatibility).
.I zip
version 3.0 is compatible wit PKZIP 2.04 n' also supports
the Zip64 extensionz of PKZIP 4.5 which allow archives
as well as filez ta exceed tha previous 2 GB limit (4 GB in
some cases).  \fIzip\fP also now supports \fBbzip2\fP compression
if tha \fBbzip2\fP library is included when \fIzip\fP is compiled.
Note dat PKUNZIP 1.10 cannot extract filez produced by
PKZIP 2.04 or
\fIzip\ 3.0\fP. Yo ass must use PKUNZIP 2.04g or
\fIunzip\ 5.0p1\fP (or lata versions) ta extract em.
.PP
See tha \fBEXAMPLES\fP section all up in tha bottom of dis page
for examplez of some typical usez of \fIzip\fP.
.PP
\fBLarge\ Archives\ and\ Zip64.\fP
.I zip
automatically uses tha Zip64 extensions when filez larger than 4 GB are
added ta a archive, a archive containin Zip64 entries is updated
(if tha resultin archive still needz Zip64),
the size of tha archive will exceed 4 GB, or when the
number of entries up in tha archive will exceed bout 64K.
Zip64 be also used fo' archives streamed from standard input as tha size
of such archives is not known up in advizzle yo, but tha option \fB\-fz\-\fP can
be used ta force \fIzip\fP ta create PKZIP 2 compatible archives (as long
as Zip64 extensions is not needed).  Yo ass must bust a PKZIP 4.5
compatible unzip, like fuckin \fIunzip\ 6.0\fP or later, ta extract files
usin tha Zip64 extensions.
.PP
In addition, streamed archives, entries encrypted wit standard encryption,
or split archives pimped wit tha pause option may not be compatible with
PKZIP as data descriptors is used
and PKZIP all up in tha time of dis freestylin do not support data descriptors
(but recent chizzlez up in tha PKWare published zip standard now include some
support fo' tha data descriptor format \fIzip\fP uses).

.PP
\fBMac OS X.\fP  Though previous Mac versions had they own \fIzip\fP port,
\fIzip\fP supports Mac OS X as part of tha Unix port n' most Unix features
apply.  References ta "MacOS" below generally refer ta MacOS versions older
than OS X.  Support fo' some Mac OS features up in tha Unix Mac OS X port, such
as resource forks, is expected up in tha next \fIzip\fP release.

.PP
For a funky-ass brief help on \fIzip\fP n' \fIunzip\fP,
run each without specifyin any parametas on tha command line.

.SH "USE"
.PP
Da program is useful fo' packagin a set of filez fo' distribution;
for archivin files;
and fo' savin disk space by temporarily
compressin unused filez or directories.
.LP
The
.I zip
program puts one or mo' compressed filez tha fuck into a single
.I zip
archive,
along wit shiznit bout tha files
(name, path, date, time of last modification, protection,
and check shiznit ta verify file integrity).
An entire directory structure can be packed tha fuck into a
.I zip
archive wit a single command.
Compression ratioz of 2:1 ta 3:1 is common fo' text files.
.I zip
has one compression method (deflation) n' can also store filez without
compression. I aint talkin' bout chicken n' gravy biatch.  (If \fBbzip2\fP support be added, \fIzip\fP can also
compress rockin \fBbzip2\fP compression yo, but such entries require a
reasonably modern unzip ta decompress.  When \fBbzip2\fP compression
is selected, it replaces deflation as tha default method.)
.I zip
automatically chizzlez tha betta of tha two (deflation or store or, if
\fBbzip2\fP is selected, \fBbzip2\fP or store) fo' each file ta be
compressed.
.LP
\fBCommand\ format.\fP  Da basic command format is
.IP
\fBzip\fR options archive inpath inpath ...
.LP
where \fBarchive\fR be a freshly smoked up or existin \fIzip\fR archive
and \fBinpath\fR be a gangbangin' finger-lickin' directory or file path optionally includin wildcards.
When given tha name of a existing
.I zip
archive,
.I zip
will replace identically named entries up in the
.I zip
archive (matchin tha relatizzle names as stored in
the archive) or add entries fo' freshly smoked up names.
For example,
if
.I foo.zip
exists n' gotz nuff
.I foo/file1
and
.IR foo/file2 ,
and tha directory
.I foo
gotz nuff tha files
.I foo/file1
and
.IR foo/file3 ,
then:
.IP
\fCzip -r foo.zip foo\fP
.LP
or mo' concisely
.IP
\fCzip -r foo foo\fP
.LP
will replace
.I foo/file1
in
.I foo.zip
and add
.I foo/file3
to
.IR foo.zip .
Afta this,
.I foo.zip
gotz nuff
.IR foo/file1 ,
.IR foo/file2 ,
and
.IR foo/file3 ,
with
.I foo/file2
unchanged from before.
.LP
So if before tha zip command is executed \fIfoo.zip\fP has:
.IP
\fC foo/file1 foo/file2
.LP
and directory foo has:
.IP
\fC file1 file3\fP
.LP
then \fIfoo.zip\fP will have:
.IP
\fC foo/file1 foo/file2 foo/file3\fP
.LP
where \fIfoo/file1\fP is replaced and
\fIfoo/file3\fP is new.
.LP
\fB\-@\ file\ lists.\fP  If a gangbangin' file list is specified as
\fB\-@\fP
[Not on MacOS],
.I zip
takes tha list of input filez from standard input instead of from
the command line.  For example,
.IP
\fCzip -@ foo\fP
.LP
will store tha filez listed one per line on stdin up in \fIfoo.zip\fP.
.LP
Under Unix,
this option can be used ta bangin effect up in conjunction wit the
\fIfind\fP\ (1)
command.
For example,
to archive all tha C source filez up in tha current directory and
its subdirectories:
.IP
\fCfind . -name "*.[ch]" -print | zip source -@\fP
.LP
(note dat tha pattern must be quoted ta keep tha shell from expandin it).
.LP
\fBStreaming\ input\ and\ output.\fP
.I zip
will also accept a single dash ("-") as tha zip file name, up in which case it
will write tha zip file ta standard output, allowin tha output ta be piped
to another program. For example:
.IP
\fCzip -r - . | dd of=/dev/nrst0 obs=16k\fP
.LP
would write tha zip output directly ta a tape wit tha specified block size
for tha purpose of backin up tha current directory.
.LP
.I zip
also accepts a single dash ("-") as tha name of a gangbangin' file ta be compressed, in
which case it will read tha file from standard input, allowin zip ta take
input from another program. For example:
.IP
\fCtar cf - . | zip backup -\fP
.LP
would compress tha output of tha tar command fo' tha purpose of backin up
the current directory. This generally produces betta compression than
the previous example rockin tha -r option cuz
.I zip
can take advantage of redundancy between files. Da backup can be restored
usin tha command
.IP
\fCunzip -p backup | tar xf -\fP
.LP
When no zip file name is given n' stdout aint a terminal,
.I zip
acts as a gangbangin' filter, compressin standard input ta standard output.
For example,
.IP
\fCtar cf - . | zip | dd of=/dev/nrst0 obs=16k\fP
.LP
is equivalent to
.IP
\fCtar cf - . | zip - - | dd of=/dev/nrst0 obs=16k\fP
.LP
.I zip
archives pimped up in dis manner can be extracted wit tha program
.I funzip
which is provided up in the
.I unzip
package, or by
.I gunzip
which is provided up in the
.I gzip
package (but some
.I gunzip
may not support dis if
.I zip
used tha Zip64 extensions). For example:
.IP
\fPdd if=/dev/nrst0  ibs=16k | funzip | tar xvf -\fC
.LP
Da stream can also be saved ta a gangbangin' file and
.I unzip
used.
.LP
If Zip64 support fo' big-ass filez n' archives is enabled and
\fIzip\fR is used as a gangbangin' filter, \fIzip\fR creates a Zip64 archive
that requires a PKZIP 4.5 or lata compatible unzip ta read dat shit.  This is
to avoid amgibuitizzles up in tha zip file structure as defined up in tha current
zip standard (PKWARE AppNote) where tha decision ta use Zip64 needz to
be made before data is freestyled fo' tha entry yo, but fo' a stream tha size
of tha data aint known at dat point.  If tha data is known ta be smaller
than 4 GB, tha option \fB\-fz\-\fP can be used ta prevent use of Zip64,
but \fIzip\fP will exit wit a error if Zip64 was up in fact needed.
\fIzip\ 3\fR n' \fIunzip\ 6\fR n' lata can read archives wit Zip64
entries. Put ya muthafuckin choppers up if ya feel dis!  Also, \fIzip\fP removes tha Zip64 extensions if not needed
when archive entries is copied (see tha \fB\-U\fP (\fB\-\-copy\fP)
option).
.LP
When directin tha output ta another file, note dat all options should be
before tha redirection includin \fB-x\fP.  For example:
.IP
\fPzip archive "*.h" "*.c" -x donotinclude.h orthis.h > tofile\fC
.LP
\fBZip\ files.\fP  When changin a existing
.I zip
archive,
.I zip
will write a temporary file wit tha freshly smoked up contents,
and only replace tha oldschool one when tha process of bustin tha freshly smoked up version
has been completed without error.
.LP
If tha name of the
.I zip
archive do not contain a extension, tha extension
\fB.zip\fP
is added. Y'all KNOW dat shit, muthafucka! If tha name already gotz nuff a extension other than
\fB.zip\fP,
the existin extension is kept unchanged. Y'all KNOW dat shit, muthafucka!  But fuck dat shiznit yo, tha word on tha street is dat split archives
(archives split over multiple files) require tha \fB.zip\fP extension
on tha last split.
.PP
\fBScanning\ and\ reading\ files.\fP
When \fIzip\fP starts, it scans fo' filez ta process (if needed).  If
this scan takes longer than bout 5 seconds, \fIzip\fP will display
a "Scannin files" message n' start displayin progress dots every last muthafuckin 2 seconds
or every last muthafuckin all kindsa muthafuckin entries processed, whichever takes longer n' shit.  If there is more
than 2 secondz between dots it could indicate dat findin each file is taking
time n' could mean a slow network connection fo' example.
(Actually tha initial file scan is
a two-step process where tha directory scan is followed by a sort n' these
two steps is separated wit a space up in tha dots, n' you can put dat on yo' toast.  If uppimpin a existing
archive, a space also appears between tha existin file scan n' tha new
file scan.)  Da scannin filez dots is not controlled by tha \fB\-ds\fP
dot size option yo, but tha dots is turned off by tha \fB\-q\fP on tha down-low option. I aint talkin' bout chicken n' gravy biatch.  The
\fB\-sf\fP show filez option can be used ta scan fo' filez n' git tha list of
filez scanned without straight-up processin em.
.LP
If \fIzip\fR aint able ta read a gangbangin' file, it
issues a warnin but
continues.  See tha \fB\-MM\fP option below fo' mo' on how tha fuck \fIzip\fP handles
patterns dat is not matched n' filez dat is not readable.
If some filez was skipped, a
warnin is issued all up in tha end of tha zip operation notin how tha fuck nuff files
were read n' how tha fuck nuff skipped.
.PP
\fBCommand\ modes.\fP  \fIzip\fP now supports two distinct typez of command
modes, \fBexternal\fP n' \fBinternal\fP.  Da \fBexternal\fP modes
(add, update, n' freshen) read filez from tha file system (as well as from an
existin archive) while tha \fBinternal\fP modes (delete n' copy) operate
exclusively on entries up in a existin archive.
.LP
.TP
.BI add\ \ \ \ \ \ 
Update existin entries n' add freshly smoked up files.  If tha archive do not exist
create dat shit.  This is tha default mode.
.TP
.BI update\ \fP(\fB\-u\fP)
Update existin entries if newer on tha file system n' add freshly smoked up files.  If
the archive do not exist issue warnin then create a freshly smoked up archive.
.TP
.BI freshen\ \fP(\fB\-f\fP)
Update existin entriez of a archive if newer on tha file system.
Do not add freshly smoked up filez ta tha archive.
.TP
.BI delete\ \fP(\fB\-d\fP)
Select entries up in a existin archive n' delete em.
.TP
.BI copy\ \fP(\fB\-U\fP)
Select entries up in a existin archive n' copy dem ta a freshly smoked up archive.
This freshly smoked up mode is similar ta \fBupdate\fP but command line patterns
select entries up in tha existin archive rather than filez from
the file system n' it uses tha \fB\-\-out\fP option ta write the
resultin archive ta a freshly smoked up file rather than update tha existing
archive, leavin tha original gangsta archive unchanged.
.LP
Da freshly smoked up File Sync option (\fB\-FS\fP) be also considered a freshly smoked up mode,
though it is similar ta \fBupdate\fP.  This mode synchronizes the
archive wit tha filez on tha OS, only replacin filez up in the
archive if tha file time or size of tha OS file is different, adding
new files, n' deletin entries from tha archive where there is
no matchin file.  As dis mode can delete entries from tha archive,
consider bustin a funky-ass backup copy of tha archive.

Also peep \fB\-DF\fP fo' bustin difference archives.

See each option description below fo' details n' tha \fBEXAMPLES\fP section
below fo' examples.
.PP
\fBSplit\ archives.\fP  \fIzip\fP version 3.0 n' lata can create split
archives.  A
\fBsplit archive\fP be a standard zip archive split over multiple
files.  (Note dat split archives is not just archives split up in to
pieces, as tha offsetz of entries is now based on tha start of each
split.  Concatenatin tha pieces together will invalidate these offsets,
but \fIunzip\fP can probably deal wit dat shit.  \fIzip\fP will probably refuse
to process such a spliced archive unless tha \fB\-FF\fP fix option is
used ta fix tha offsets.)
.LP
One use of split archives is storin a big-ass archive on multiple
removable media.
For a split archive wit 20 split filez tha filez is typically named (replace
ARCHIVE wit tha name of yo' archive) ARCHIVE.z01, ARCHIVE.z02, ..., ARCHIVE.z19,
ARCHIVE.zip.  Note dat tha last file is tha \fB.zip\fP file.  In contrast,
\fBspanned archives\fP is tha original gangsta multi-disk archive generally requiring
floppy disks n' rockin volume labels ta store disk numbers.  \fIzip\fP supports
split archives but not spanned archives, though a procedure exists fo' converting
split archivez of tha right size ta spanned archives.  Da reverse be also true,
where each file of a spanned archive can be copied up in order ta filez wit the
above names ta create a split archive.
.LP
Use \fB\-s\fP ta set tha split size n' create a split archive.  Da size is
given as a number followed optionally by one of k (kB), m (MB), g (GB), or t (TB)
(the default is m).  Da \fB\-sp\fP option can be used ta pause \fIzip\fP between
splits ta allow changin removable media, fo' example yo, but read tha descriptions
and warnings fo' both \fB\-s\fP n' \fB\-sp\fP below.
.LP
Though \fIzip\fP do not update split archives, \fIzip\fP serves up tha new
option \fB\-O\fP (\fB\-\-output\-file\fP or \fB\-\-out\fP) ta allow split archives
to be updated n' saved up in a freshly smoked up archive.  For example,
.IP
\fCzip inarchive.zip foo.c bar.c \-\-out outarchive.zip\fP
.LP
readz archive \fBinarchive.zip\fP, even if split, addz tha filez \fBfoo.c\fP and
\fBbar.c\fP, n' writes tha resultin archive ta \fBoutarchive.zip\fP.  If
\fBinarchive.zip\fP is split then \fBoutarchive.zip\fP defaults ta tha same
split size.  Be aware dat if \fBoutarchive.zip\fP n' any split filez dat are
created wit it already exist, these is always overwritten as needed without
warning.  This may be chizzled up in tha future.
.PP
\fBUnicode.\fP  Though tha zip standard requires storin paths up in a archive using
a specific characta set, up in practice zips have stored paths up in archives up in whatever
the local characta set is.  This creates problems when a archive is pimped or
updated on a system rockin one characta set n' then extracted on another system
usin a gangbangin' finger-lickin' different characta set.  When compiled wit Unicode support enabled on
platforms dat support wide characters, \fIzip\fP now stores, up in addizzle ta the
standard local path fo' backward compatibility, tha UTF-8 translation of tha path.
This serves up a cold-ass lil common universal characta set fo' storin paths dat allows these
paths ta be straight-up extracted on other systems dat support Unicode n' ta match as
close as possible on systems dat don't.

On Win32 systems where paths is internally stored as Unicode but represented in
the local characta set, itz possible dat some paths is ghon be skipped durin a
local characta set directory scan. I aint talkin' bout chicken n' gravy biatch.  \fIzip\fP wit Unicode support now can read
and store these paths.  Note dat Win 9x systems n' FAT file systems don't fully
support Unicode.

Be aware dat console windows on Win32 n' Unix, fo' example, sometimes don't
accurately show all charactas cuz of how tha fuck each operatin system switches in
characta sets fo' display.  But fuck dat shiznit yo, tha word on tha street is dat directory mastabation tools should show the
correct paths if tha needed fonts is loaded.
.PP
\fBCommand line format.\fP  This version of
.I zip
has updated command line processin n' support fo' long options.
.PP
Short options take tha form
.IP
\fC-s[-][s[-]...][value][=value][\ value]\fP
.LP
where s be a one or two characta short option. I aint talkin' bout chicken n' gravy biatch.  A short option
that takes a value is last up in a argument n' anythang afta it is
taken as tha value.  If tha option can be negated n' "-" immediately
bigs up tha option, tha option is negated.
Short options can also be given as separate arguments
.IP
\fC-s[-][value][=value][\ value]\ -s[-][value][=value][\ value]\ ...\fP
.LP
Short options up in general take joints either as part of tha same
argument or as tha followin argument.  An optionizzle = be also supported.
So
.IP
\fC-ttmmddyyyy\fP
.LP
and
.IP
\fC-tt=mmddyyyy\fP
.LP
and
.IP
\fC-tt mmddyyyy\fP
.LP
all work.  Da \fB\-x\fP n' \fB\-i\fP options accept listz of joints
and bust a slightly different format busted lyrics bout below.  See the
\fB\-x\fP n' \fB\-i\fP options.
.PP
Long options take tha form
.IP
\fC--longoption[-][=value][ value]\fP
.LP
where tha option starts wit --, has a multicharacta name, can
include a trailin dash ta negate tha option (if tha option
supports it), n' can gotz a value (option argument) specified by
preceedin it wit = (no spaces).  Values can also follow the
argument.  So
.IP
\fC--before-date=mmddyyyy\fP
.LP
and
.IP
\fC--before-date mmddyyyy\fP
.LP
both work.

Long option names can be shortened ta tha shortest unique
abbreviation. I aint talkin' bout chicken n' gravy biatch.  See tha option descriptions below fo' which
support long options.  To avoid mad drama, avoid abbreviating
a negatable option wit a embedded dash ("-") all up in tha dash
if you plan ta negate it (the parser would consider
a trailin dash, like fuckin fo' tha option \fB\-\-some\-option\fP using
\fB\-\-some\-\fP as tha option, as part of tha name rather
than a negatin dash).  This may be chizzled ta force tha last
dash up in \fB\-\-some\-\fP ta be negatin up in tha future.
.SH "OPTIONS"
.TP
.PD 0
.BI \-a
.TP
.PD
.B \-\-ascii
[Systems rockin EBCDIC] Translate file ta ASCII format.

.TP
.PD 0
.B \-A
.TP
.PD
.B \-\-adjust-sfx
Adjust self-extractin executable archive.
A self-extractin executable archive is pimped by prepending
the SFX stub ta a existin archive. The
.B \-A
option tells
.I zip
to adjust tha entry offsets stored
in tha archive ta take tha fuck into account dis "preamble" data.
.LP
Note: self-extractin archives fo' tha Amiga is a special case.
At present, only tha Amiga port of \fIzip\fP is capable of adjusting
or uppimpin these without corruptin em. -J can be used ta remove
the SFX stub if other thugged-out shiznit need ta be made.

.TP
.PD 0
.B \-AC
.TP
.PD
.B \-\-archive-clear
[WIN32]  Once archive is pimped (and tested if \fB\-T\fP is used,
which is recommended), clear tha archive bitz of filez processed. Y'all KNOW dat shit, muthafucka!  WARNING:
Once tha bits is cleared they is cleared. Y'all KNOW dat shit, muthafucka!  Yo ass may wanna use the
\fB\-sf\fP show filez option ta store tha list of filez processed up in case
the archive operation must be repeated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Also consider using
the \fB\-MM\fP must match option. I aint talkin' bout chicken n' gravy biatch.  Be shizzle ta check up \fB\-DF\fP as a
possibly betta way ta do incremenstrual backups.

.TP
.PD 0
.B \-AS
.TP
.PD
.B \-\-archive-set
[WIN32]  Only include filez dat have tha archive bit set.  Directories
are not stored when \fB\-AS\fP is used, though by default tha paths
of entries, includin directories, is stored as usual n' can be used
by most unzips ta recreate directories.

Da archive bit is set by tha operatin system when a gangbangin' file is modified
and, if used wit \fB\-AC\fP, \fB\-AS\fP can provide an
incremenstrual backup capability.  But fuck dat shiznit yo, tha word on tha street is dat other applications can
modify tha archive bit n' it may not be a reliable indicator of
which filez have chizzled since tha last archive operation. I aint talkin' bout chicken n' gravy biatch.  Alternative
ways ta create incremenstrual backups is rockin \fB\-t\fP ta use file dates,
though dis won't catch oldschool filez copied ta directories bein archived,
and \fB\-DF\fP ta create a gangbangin' finger-lickin' differential archive.

.TP
.PD 0
.B \-B
.TP
.PD
.B \-\-binary
[VM/CMS n' MVS] force file ta be read binary (default is text).

.TP
.B \-B\fRn
[TANDEM] set Edit/Enscribe formattin options wit n defined as
.RS
bit  0: Don't add delimita (Edit/Enscribe)
.RE
.RS
bit  1: Use LF rather than CR/LF as delimita (Edit/Enscribe)
.RE
.RS
bit  2: Space fill record ta maximum record length (Enscribe)
.RE
.RS
bit  3: Trim trailin space (Enscribe)
.RE
.RS
bit  8: Force 30K (Expand) big-ass read fo' unstructured files
.RE

.TP
.PD 0
.BI \-b\ \fRpath
.TP
.PD
.B \-\-temp-path\ \fRpath
Use tha specified
.I path
for tha temporary
.I zip
archive. For example:
.RS
.IP
\fCzip -b /tmp shiznit *\fP
.RE
.IP
will put tha temporary
.I zip
archive up in tha directory
.IR /tmp ,
copyin over
.I stuff.zip
to tha current directory when done. This option is useful when
uppimpin a existin archive n' tha file system containin this
old archive aint gots enough space ta hold both oldschool n' freshly smoked up archives
at tha same time.  It may also be useful when streamin up in some
cases ta avoid tha need fo' data descriptors.  Note dat using
this option may require \fIzip\fP take additionizzle time ta copy
the archive file when done ta tha destination file system.

.TP
.PD 0
.B \-c
.TP
.PD
.B \-\-entry-comments
Add one-line comments fo' each file.
File operations (adding, updating) is done first,
and tha user is then prompted fo' a one-line comment fo' each file.
Enta tha comment followed by return, or just return fo' no comment.

.TP
.PD 0
.B \-C
.TP
.PD
.B \-\-preserve-case
[VMS]  Preserve case all on VMS.  Negatin dis option
(\fB\-C-\fP) downcases.

.TP
.PD 0
.B \-C2
.TP
.PD
.BI \-\-preserve-case-2
[VMS]  Preserve case ODS2 on VMS.  Negatin dis option
(\fB\-C2-\fP) downcases.

.TP
.PD 0
.B \-C5
.TP
.PD
.B \-\-preserve-case-5
[VMS]  Preserve case ODS5 on VMS.  Negatin dis option
(\fB\-C5-\fP) downcases.

.TP
.PD 0
.B \-d
.TP
.PD
.B \-\-delete
Remove (delete) entries from a
.I zip
archive.
For example:
.RS
.IP
\fCzip -d foo foo/tom/junk foo/harry/\\* \\*.o\fP
.RE
.IP
will remove tha entry
.IR foo/tom/junk ,
all of tha filez dat start with
.IR foo/harry/ ,
and all of tha filez dat end with
.B \&.o
(in any path).
Note dat shell pathname expansion has been inhibited wit backslashes,
so that
.I zip
can peep tha asterisks,
enabling
.I zip
to match on tha contentz of the
.I zip
archive instead of tha contentz of tha current directory.
(Da backslashes is not used on MSDOS-based platforms.)
Can also use quotes ta escape tha asterisks as in
.RS
.IP
\fCzip -d foo foo/tom/junk "foo/harry/*" "*.o"\fP
.RE
.IP
Not escapin tha asterisks on a system where tha shell expands
wildcardz could result up in tha asterisks bein converted ta a
list of filez up in tha current directory n' dat list used to
delete entries from tha archive.
.IP
Under MSDOS,
.B \-d
is case sensitizzle when it matches names up in the
.I zip
archive.
This requires dat file names be entered up in upper case if they were
zipped by PKZIP on a MSDOS system.  (We considered makin this
case insensitizzle on systems where paths was case insensitive,
but it is possible tha archive came from a system where case do
matta n' tha archive could include both \fBBar\fP n' \fBbar\fP
as separate filez up in tha archive.)  But peep tha freshly smoked up option \fB\-ic\fP
to ignore case up in tha archive.

.TP
.PD 0
.B \-db
.TP
.PD
.B \-\-display-bytes
Display hustlin byte counts showin tha bytes zipped n' tha bytes ta bounce tha fuck out.

.TP
.PD 0
.B \-dc
.TP
.PD
.B \-\-display-counts
Display hustlin count of entries zipped n' entries ta bounce tha fuck out.

.TP
.PD 0
.B \-dd
.TP
.PD
.B \-\-display-dots
Display dots while each entry is zipped (except on ports dat have they own
progress indicator).  See \fB-ds\fR below fo' settin dot size.  Da default is
a dot every last muthafuckin 10 MB of input file processed. Y'all KNOW dat shit, muthafucka!  Da \fB-v\fR option
also displays dots (previously at a much higher rate than dis but now \fB\-v\fP
also defaults ta 10 MB) n' dis rate be also controlled by \fB-ds\fR.

.TP
.PD 0
.B \-df
.TP
.PD
.B \-\-datafork
[MacOS] Include only data-fork of filez zipped tha fuck into tha archive.
Dope fo' exportin filez ta foreign operating-systems.
Resource-forks is ghon be ignored at all.

.TP
.PD 0
.B \-dg
.TP
.PD
.B \-\-display-globaldots
Display progress dots fo' tha archive instead of fo' each file.  Da command
.RS
.IP
    zip -qdgdz 10m
.RE
.IP
will turn off most output except dots every last muthafuckin 10 MB.

.TP
.PD 0
.B \-ds\ \fRsize
.TP
.PD
.B \-\-dot-size\ \fRsize
Set amount of input file processed fo' each dot displayed. Y'all KNOW dat shit, muthafucka!  See \fB-dd\fR to
enable displayin dots, n' you can put dat on yo' toast.  Settin dis option implies \fB-dd\fR.  Size is
in tha format nm where n be a number n' m be a multiplier n' shit.  Currently m can
be k (KB), m (MB), g (GB), or t (TB), so if n is 100 n' m is k, size would be
100k which is 100 KB.  Da default is 10 MB.
.IP
Da \fB-v\fR option also displays dots n' now defaults to
10 MB also.  This rate be also controlled by dis option. I aint talkin' bout chicken n' gravy biatch.  A size of 0 turns dots off.
.IP
This option do not control tha dots from tha "Scannin files" message as
\fIzip\fP scans fo' input files.  Da dot size fo' dat is fixed at 2 seconds
or a gangbangin' fixed number of entries, whichever is longer.

.TP
.PD 0
.B \-du
.TP
.PD
.B \-\-display-usize
Display tha uncompressed size of each entry.

.TP
.PD 0
.B \-dv
.TP
.PD
.B \-\-display-volume
Display tha volume (disk) number each entry is bein read from,
if readin a existin archive, n' bein freestyled to.

.TP
.PD 0
.B \-D
.TP
.PD
.B \-\-no-dir-entries
Do not create entries up in the
.I zip
archive fo' directories. Put ya muthafuckin choppers up if ya feel dis!  Directory entries is pimped by default so that
their attributes can be saved up in tha zip archive.
Da environment variable ZIPOPT can be used ta chizzle tha default options. For
example under Unix wit sh:
.RS
.IP
ZIPOPT="-D"; export ZIPOPT
.RE
.IP
(Da variable ZIPOPT can be used fo' any option, includin \fB\-i\fP n' \fB\-x\fP
usin a freshly smoked up option format detailed below, n' can include nuff muthafuckin options.) Da option
.B \-D
is a gangbangin' finger-lickin' dirty-ass shorthand
for
.B \-x
"*/" but tha latta previously could not be set as default up in tha ZIPOPT
environment variable as tha contentz of ZIPOPT gets banged near tha beginning
of tha command line n' tha file list had ta end all up in tha end of tha line.
.IP
This version of
.I zip
does allow
.B \-x
and
.B \-i
options up in ZIPOPT if tha form
.IP
\fC
.BR \-x \ file\ file\ ... \ @\fP
.IP
is used, where tha @ (an argument dat is just @) terminates
the list.

.TP
.PD 0
.B \-DF
.TP
.PD
.B \-\-difference-archive
Smoke a archive dat gotz nuff all freshly smoked up n' chizzled filez since
the original gangsta archive was pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For dis ta work, tha input
file list n' current directory must be tha same as durin the
original gangsta \fIzip\fP operation.
.IP
For example, if tha existin archive was pimped using
.RS
.IP
\fCzip -r foofull .
.RE
.IP
from tha \fIbar\fP directory, then tha command
.RS
.IP
\fCzip -r foofull . -DF --out foonew
.RE
.IP
also from tha \fIbar\fP directory creates tha archive \fIfoonew\fP
with just tha filez not up in \fIfoofull\fP n' tha filez where
the size or file time of tha filez do not match dem up in \fIfoofull\fP.

Note dat tha timezone environment variable TZ should be set accordin to
the local timezone up in order fo' dis option ta work erectly.  A
change up in timezone since tha original gangsta archive was pimped could
result up in no times matchin n' all filez bein included.

A possible approach ta backin up a gangbangin' finger-lickin' directory might be ta create
a aiiight archive of tha contentz of tha directory as a gangbangin' full
backup, then use dis option ta create incremenstrual backups.

.TP
.PD 0
.B \-e
.TP
.PD
.B \-\-encrypt
Encrypt tha contentz of the
.I zip
archive rockin a password which is entered on tha terminal up in response
to a prompt
(this aint gonna be echoed; if standard error aint a tty,
.I zip
will exit wit a error).
Da password prompt is repeated ta save tha user from typin errors.

.TP
.PD 0
.B \-E
.TP
.PD
.B \-\-longnames
[OS/2] Use tha .LONGNAME Extended Attribute (if found) as filename.

.TP
.PD 0
.B \-f
.TP
.PD
.B \-\-freshen
Replace (freshen) a existin entry up in the
.I zip
archive only if it has been modified mo' recently than the
version already up in the
.I zip
archive;
unlike tha update option
.RB ( \-u )
this aint gonna add filez dat is not already up in the
.I zip
archive.
For example:
.RS
.IP
\fCzip -f foo\fP
.RE
.IP
This command should be run from tha same directory from which tha original
.I zip
command was run, since paths stored in
.I zip
archives is always relative.
.IP
Note dat tha timezone environment variable TZ should be set accordin to
the local timezone up in order fo' the
\fB\-f\fP, \fB\-u\fP n' \fB\-o\fP
options ta work erectly.
.IP
Da reasons behind dis is somewhat subtle but gotta do wit tha differences
between tha Unix-format file times (always up in GMT) n' most of tha other
operatin systems (always local time) n' tha necessitizzle ta compare tha two.
A typical TZ value is ``MET-1MEST'' (Middle European time wit automatic
adjustment fo' ``summertime'' or Daylight Savings Time).
.IP
Da format is TTThhDDD, where TTT is tha time unit like fuckin MET, hh is the
difference between GMT n' local time like fuckin -1 above, n' DDD is
the time unit when daylight savings time is up in effect.  Leave off
the DDD if there is no daylight savings time.  For tha US Eastern
time unit EST5EDT.

.TP
.PD 0
.B \-F
.TP
.B \-\-fix\ \ \ \ \ \ 
.TP
.B \-FF
.TP
.PD
.B \-\-fixfix\ \ 
Fix the
.I zip
archive. Da \fB\-F\fP option can be used if some portionz of tha archive
are missin yo, but requires a reasonably intact central directory.
Da input archive is scanned as usual yo, but \fIzip\fP will ignore
some problems.  Da resultin archive should be valid yo, but any
inconsistent entries is ghon be left out.
.IP
When doubled as in
\fB\-FF\fP,
the archive is scanned from tha beginnin n' \fIzip\fP scans fo' special
signatures ta identify tha limits between tha archive members. The
single
.B \-F
is mo' reliable if tha archive aint too much damaged, so try this
option first.
.IP
If tha archive is too damaged or tha end has been truncated, you
must use \fB\-FF\fP.  This be a cold-ass lil chizzle from \fIzip\ 2.32\fP, where
the \fB\-F\fP option be able ta read a truncated archive.  The
\fB\-F\fP option now mo' reliably fixes archives wit minor
damage n' tha \fB\-FF\fP option is needed ta fix archives where
\fB\-F\fP might done been sufficient before.
.IP
Neither option will recover archives dat done been incorrectly
transferred up in ascii mode instead of binary fo' realz. Afta tha repair, the
.B \-t
option of
.I unzip
may show dat some filez gotz a wack CRC. Right back up in yo muthafuckin ass. Such filez cannot be recovered;
you can remove dem from tha archive rockin the
.B \-d
option of
\fIzip\fP.
.IP
Note dat \fB\-FF\fP may have shiznit fixin archives dat include an
embedded zip archive dat was stored (without compression) up in tha archive
and, dependin on tha damage, it may find tha entries up in tha embedded
archive rather than tha archive itself.  Try \fB\-F\fP first as it
does not have dis problem.
.IP
Da format of tha fix commandz have chizzled. Y'all KNOW dat shit, muthafucka!  For example, ta fix
the damaged archive \fIfoo.zip\fP,
.RS
.IP
\fCzip -F foo --out foofix
.RE
.IP
tries ta read tha entries normally, copyin phat entries ta the
new archive \fIfoofix.zip\fP.  If dis don't work, as when the
archive is truncated, or if some entries you know is up in tha archive
are missed, then try
.RS
.IP
\fCzip -FF foo --out foofixfix
.RE
.IP
and compare tha resultin archive ta tha archive pimped by \fB\-F\fP.  The
\fB\-FF\fP option may create a inconsistent archive.  Dependin on
what is damaged, you can then use tha \fB\-F\fP option ta fix dat archive.
.IP
A split archive wit missin split filez can be fixed using
\fB\-F\fP if you have tha last split of tha archive (the \fB\.zip\fP file).
If dis file is missing, you must use \fB\-FF\fP ta fix tha archive,
which will prompt you fo' tha splits you have.
.IP
Currently tha fix options can't recover entries dat gotz a wack checksum
or is otherwise damaged.

.TP
.PD 0
.B \-FI
.TP
.PD
.B \-\-fifo
[Unix]  Normally \fIzip\fP skips readin any FIFOs (named pipes) encountered, as
\fIzip\fP can hang if tha FIFO aint bein fed. Y'all KNOW dat shit, muthafucka!  This option  drops some lyrics ta \fIzip\fP to
read tha contentz of any FIFO it finds.

.TP
.PD 0
.B \-FS
.TP
.PD
.B \-\-filesync
Synchronize tha contentz of a archive wit tha filez on tha OS.
Normally when a archive is updated, freshly smoked up filez is added n' chizzled
filez is updated but filez dat no longer exist on tha OS is not
deleted from tha archive.  This option enablez a freshly smoked up mode dat checks
entries up in tha archive against tha file system.  If tha file time and
file size of tha entry matches dat of tha OS file, tha entry is
copied from tha oldschool archive instead of bein read from tha file system
and compressed. Y'all KNOW dat shit, muthafucka!  If tha OS file has chizzled, tha entry is read and
compressed as usual. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  If tha entry up in tha archive do not match a
file on tha OS, tha entry is deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Enablin dis option should
create archives dat is tha same as freshly smoked up archives yo, but since existing
entries is copied instead of compressed, uppimpin a existin archive
with \fB\-FS\fP can be much fasta than bustin a freshly smoked up archive.  Also
consider rockin \fB\-u\fP fo' uppimpin a archive.
.IP
For dis option ta work, tha archive should be updated from tha same
directory dat shiznit was pimped up in so tha relatizzle paths match.  If few files
are bein copied from tha oldschool archive, it may be fasta ta create a
new archive instead.
.IP
Note dat tha timezone environment variable TZ should be set accordin to
the local timezone up in order fo' dis option ta work erectly.  A
change up in timezone since tha original gangsta archive was pimped could
result up in no times matchin n' recompression of all files.
.IP
This option deletes filez from tha archive.  If you need ta preserve
the original gangsta archive, cook up a cold-ass lil copy of tha archive first or use the
\fB\-\-out\fP option ta output tha updated archive ta a freshly smoked up file.
Even though it may be slower, bustin a freshly smoked up archive wit a freshly smoked up archive
name is safer, avoidz mismatches between archive n' OS paths, and
is preferred.

.TP
.PD 0
.B \-g
.TP
.PD
.B \-\-grow \ \ \ \ \ \ 
Grow (append to) tha specified
.I zip
archive, instead of bustin a freshly smoked up one. If dis operation fails,
.I zip
attempts ta restore tha archive ta its original gangsta state. If tha restoration
fails, tha archive might become corrupted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This option is ignored when
therez no existin archive or when at least one archive member must be
updated or deleted.

.TP
.PD 0
.B \-h
.TP
.PD 0
.B \-?
.TP
.PD
.B \-\-help \ \ \ \ \ \ 
Display the
.I zip
help shiznit (this also appears if
.I zip
is run wit no arguments).

.TP
.PD 0
.B \-h2
.TP
.PD
.B \-\-more-help
Display extended help includin mo' on command line format, pattern matching, and
more obscure options.

.TP
.PD 0
.B \-i\ \fRfiles
.TP
.PD
.B \-\-include\ \fRfiles
Include only tha specified files, as in:
.RS
.IP
\fCzip -r foo . -i \\*.c\fP
.RE
.IP
which will include only tha filez dat end in
.IR \& .c
in tha current directory n' its subdirectories. Put ya muthafuckin choppers up if ya feel dis! (Note fo' PKZIP
users: tha equivalent command is
.RS
.IP
\fCpkzip -rP foo *.c\fP
.RE
.IP
PKZIP do not allow recursion up in directories other than tha current one.)
Da backslash avoidz tha shell filename substitution, so dat the
name matchin is performed by
.I zip
at all directory levels.
[This is fo' Unix n' other systems where \\  escapes the
next character n' shit.  For other systems where tha shell do not
process * do not use \\ n' tha above is
.RS
.IP
\fCzip -r foo . -i *.c\fP
.RE
.IP
Examplez is fo' Unix unless otherwise specified.]  So ta include dir,
a directory directly under tha current directory, use
.RS
.IP
\fCzip -r foo . -i dir/\\*
.RE
.IP
or
.RS
.IP
\fCzip -r foo . -i "dir/*"
.RE
.IP
to match paths like fuckin dir/a n' dir/b/file.c [on
ports without wildcard expansion up in tha shell like fuckin MSDOS n' Windows
.RS
.IP
\fCzip -r foo . -i dir/*
.RE
.IP
is used.]  Note dat currently tha trailin / is needed
for directories (as in
.RS
.IP
\fCzip -r foo . -i dir/
.RE
.IP
to include directory dir).
.IP
Da long option form of tha straight-up original gangsta example is
.RS
.IP
\fCzip -r foo . --include \\*.c
.RE
.IP
and do tha same thang as tha short option form.
.IP
Though tha command syntax used ta require \fB-i\fR at
the end of tha command line, dis version actually
allows \fB\-i\fP (or \fB\-\-include\fP) anywhere, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  The
list of filez terminates all up in tha next argument starting
with \fB-\fR, tha end of tha command line, or tha list
terminator \fB@\fR (an argument dat is just @).  So
the above can be given as
.RS
.IP
zip -i \\*.c @ -r foo .\fP
.RE
.IP
for example.  There must be a space between
the option n' tha straight-up original gangsta file of a list.  For just
one file you can use tha single value form
.RS
.IP
\fCzip -i\\*.c -r foo .\fP
.RE
.IP
(no space between option n' value) or
.RS
.IP
\fCzip --include=\\*.c -r foo .\fP
.RE
.IP
as additionizzle examples.  Da single value forms are
not recommended cuz they can be confusin and,
in particular, tha \fB\-ifile\fP format can cause
problems if tha straight-up original gangsta letta of \fBfile\fP combines with
\fBi\fP ta form a two-letta option startin with
\fBi\fP.  Use \fB\-sc\fP ta peep how tha fuck yo' command line
will be parsed.
.IP
Also possible:
.RS
.IP
\fCzip -r foo  . -i@include.lst\fP
.RE
.IP
which will only include tha filez up in tha current directory n' its
subdirectories dat match tha patterns up in tha file include.lst.
.IP
Filez ta \fB\-i\fR n' \fB\-x\fR is patterns matchin internal archive paths.  See
\fB-R\fR fo' mo' on patterns.

.TP
.PD 0
.B \-I
.TP
.PD
.B \-\-no-image
[Acorn RISC OS] Don't scan all up in Image files.  When used, \fIzip\fP will not
consider Image filez (eg. DOS partitions or Spark archives when SparkFS
is loaded) as directories but will store dem as single files.

For example, if you have SparkFS loaded, zippin a Spark archive will result
in a zipfile containin a gangbangin' finger-lickin' directory (and its content) while rockin tha 'I'
option will result up in a zipfile containin a Spark archive. Obviously this
second case will also be obtained (without tha 'I' option) if SparkFS aint
loaded.

.TP
.PD 0
.B \-ic
.TP
.PD
.B \-\-ignore-case
[VMS, WIN32] Ignore case when matchin archive entries. Put ya muthafuckin choppers up if ya feel dis!  This option is
only available on systems where tha case of filez is ignored. Y'all KNOW dat shit, muthafucka!  On systems
with case-insensitizzle file systems, case is normally ignored when matchin files
on tha file system but aint ignored fo' -f (freshen), -d (delete), -U (copy),
and similar modes when matchin against archive entries (currently -f
ignores case on VMS) cuz archive entries can be from systems where
case do matta n' names dat is tha same except fo' case can exist
in a archive.  Da \fB\-ic\fR option make all matchin case insensitive.
This can result up in multiple archive entries matchin a cold-ass lil command line pattern.

.TP
.PD 0
.B \-j
.TP
.PD
.B \-\-junk-paths
Store just tha name of a saved file (junk tha path), n' do not store
directory names. By default,
.I zip
will store tha full path (relatizzle ta tha current directory).

.TP
.PD 0
.B \-jj
.TP
.PD
.B \-\-absolute-path
[MacOS] record Fullpath (+ Volname). Da complete path including
volume is ghon be stored. Y'all KNOW dat shit, muthafucka! By default tha relatizzle path is ghon be stored.

.TP
.PD 0
.B \-J
.TP
.PD
.B \-\-junk-sfx
Strip any prepended data (e.g. a SFX stub) from tha archive.
.TP
.PD 0
.B \-k
.TP
.PD
.B \-\-DOS-names
Attempt ta convert tha names n' paths ta conform ta MSDOS,
store only tha MSDOS attribute (just tha user write attribute from Unix),
and mark tha entry as made under MSDOS (even though dat shiznit was not);
for compatibilitizzle wit PKUNZIP under MSDOS which cannot handle certain
names like fuckin dem wit two dots.
.TP
.PD 0
.B \-l
.TP
.PD
.B \-\-to-crlf
Translate tha Unix end-of-line characta LF tha fuck into the
MSDOS convention CR LF. This option should not be used on binary files.
This option can be used on Unix if tha zip file is intended fo' PKUNZIP
under MSDOS. If tha input filez already contain CR LF, dis option adds
an extra CR. This is ta ensure that
\fBunzip -a\fP
on Unix will git back a exact copy of tha original gangsta file,
to undo tha effect of
\fBzip -l\fP.  See \fB-ll\fR fo' how tha fuck binary filez is handled.
.TP
.PD 0
.B \-la
.TP
.PD
.B \-\-log-append
Append ta existin logfile.  Default is ta overwrite.
.TP
.PD 0
.B \-lf\ \fPlogfilepath
.TP
.PD
.B \-\-logfile-path\ \fPlogfilepath
Open a logfile all up in tha given path.  By default any existin file at dat location
is overwritten yo, but tha \fB\-la\fP option will result up in a existin file being
opened n' tha freshly smoked up log shiznit appended ta any existin shiznit.
Only warnings n' errors is freestyled ta tha log unless tha \fB\-li\fP option is
also given, then all shiznit lyrics is also freestyled ta tha log.
.TP
.PD 0
.B \-li
.TP
.PD
.B \-\-log-info
Include shiznit lyrics, like fuckin file names bein zipped, up in tha log.
Da default is ta only include tha command line, any warnings n' errors, and
the final status.
.TP
.PD 0
.B \-ll
.TP
.PD
.B \-\-from-crlf
Translate tha MSDOS end-of-line CR LF tha fuck into Unix LF.
This option should not be used on binary files.
This option can be used on MSDOS if tha zip file is intended fo' unzip
under Unix.  If tha file is converted n' tha file is lata determined
to be binary a warnin is issued n' tha file is probably
corrupted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  In dis release if \fB-ll\fR detects binary up in tha straight-up original gangsta buffer
read from a gangbangin' file, \fIzip\fR now thangs a warnin n' skips line end
conversion on tha file.  This check seems ta catch all binary files
tested yo, but tha original gangsta check remains n' if a cold-ass lil converted file is
lata determined ta be binary dat warnin is still issued. Y'all KNOW dat shit, muthafucka!  A freshly smoked up algorithm
is now bein used fo' binary detection dat should allow line end conversion
of text filez up in \fBUTF-8\fR n' similar encodings.
.TP
.PD 0
.B \-L
.TP
.PD
.B \-\-license
Display the
.I zip
license.
.TP
.PD 0
.B \-m
.TP
.PD
.B \-\-move \ \ \ 
Move tha specified filez tha fuck into the
.I zip
archive; actually,
this deletes tha target directories/filez afta makin tha specified
.I zip
archive. If a gangbangin' finger-lickin' directory becomes empty afta removal of tha files, the
directory be also removed. Y'all KNOW dat shit, muthafucka! No deletions is done until
.I zip
has pimped tha archive without error.
This is useful fo' conservin disk space,
but is potentially fucked up so it is recommended ta use it in
combination with
.B \-T
to test tha archive before removin all input files.
.TP
.PD 0
.B \-MM
.TP
.PD
.B \-\-must-match
All input patterns must match at least one file n' all input files
found must be readable.  Normally when a input pattern do not match
a file tha "name not matched" warnin is issued n' when a input file
has been found but lata is missin or not readable a missin or not
readable warnin is issued. Y'all KNOW dat shit, muthafucka!  In either case
.I zip
continues bustin tha archive, wit missin or unreadable freshly smoked up files
bein skipped n' filez already up in tha archive remainin unchanged.
Afta tha archive is pimped, if any filez was not readable
.I zip
returns tha OPEN error code (18 on most systems) instead of tha normal
success return (0 on most systems).  With \fB\-MM\fP set,
.I zip
exits as soon as a input pattern aint matched (whenever the
"name not matched" warnin would be issued) or when a input file is
not readable.  In either case \fIzip\fR exits wit a OPEN error
and no archive is pimped.
.IP
This option is useful when a known list of filez is ta be zipped so
any missin or unreadable filez will result up in a error. Shiiit, dis aint no joke.  It be less
useful when used wit wildcardz yo, but \fIzip\fR will still exit wit an
error if any input pattern don't match at least one file n' if any
matched filez is unreadable.  If you wanna create tha archive
anyway n' only need ta know if filez was skipped, don't use
.B \-MM
and just check tha return code.  Also \fB\-lf\fP could be useful.
.TP
.PD 0
.BI \-n\ \fRsuffixes
.TP
.PD
.B \-\-suffixes\ \fRsuffixes
Do not attempt ta compress filez named wit tha given
\fBsuffixes\fR.
Such filez is simply stored (0% compression) up in tha output zip file,
so that
.I zip
doesn't waste its time tryin ta compress em.
Da suffixes is separated by
either colons or semicolons.  For example:
.RS
.IP
\fCzip -rn .Z:.zip:.tiff:.gif:.snd  foo foo\fP
.RE
.IP
will copy every last muthafuckin thang from
.I foo
into
.IR foo.zip ,
but will store any filez dat end in
.IR .Z ,
.IR .zip ,
.IR .tiff ,
.IR .gif ,
or
.I .snd
without tryin ta compress them
(image n' sound filez often have they own specialized compression methods).
By default,
.I zip
does not compress filez wit extensions up in tha list
.I .Z:.zip:.zoo:.arc:.lzh:.arj.
Such filez is stored directly up in tha output archive.
Da environment variable ZIPOPT can be used ta chizzle tha default options. For
example under Unix wit csh:
.RS
.IP
setenv ZIPOPT "-n .gif:.zip"
.RE
.IP
To attempt compression on all files, use:
.RS
.IP
zip -n : foo
.RE
.IP
Da maximum compression option
.B \-9
also attempts compression on all filez regardless of extension.
.IP
On Acorn RISC OS systems tha suffixes is straight-up filetypes (3 hex digit
format). By default, \fIzip\fP do not compress filez wit filetypes up in tha list
DDC:D96:68E (i.e fo' realz. Archives, CFS filez n' PackDir files).
.TP
.PD 0
.B \-nw
.TP
.PD
.B \-\-no-wild
Do not big-ass up internal wildcard processin (shell processin of wildcardz is still done
by tha shell unless tha arguments is escaped).  Useful if a list of paths is being
read n' no wildcard substitution is desired.
.TP
.PD 0
.B \-N
.TP
.PD
.B \-\-notes
[Amiga, MacOS] Save Amiga or MacOS filenotes as zipfile comments, n' you can put dat on yo' toast. They can be
restored by rockin tha -N option of \fIunzip\fP. If -c is used also, yo ass is
prompted fo' comments only fo' dem filez dat aint gots filenotes.
.TP
.PD 0
.B \-o
.TP
.PD
.B \-\-latest-time
Set tha "last modified" time of the
.I zip
archive ta tha sickest fuckin (oldest) "last modified" time
found among tha entries up in the
.I zip
archive.
This can be used without any other operations, if desired.
For example:
.IP
\fCzip -o foo\fP
.IP
will chizzle tha last modified time of
\fBfoo.zip\fP
to tha sickest fuckin time of tha entries in
.BR foo.zip .
.TP
.PD 0
.B \-O \fPoutput-file
.TP
.PD
.B \-\-output-file \fPoutput-file
Process tha archive chizzlez as usual yo, but instead of uppimpin tha existin archive,
output tha freshly smoked up archive ta output-file.  Useful fo' uppimpin a archive
without changin tha existin archive n' tha input archive must be a gangbangin' finger-lickin' different file
than tha output archive.

This option can be used ta create updated split archives.
It can also be used wit \fB\-U\fP ta copy entries from a existin archive ta a new
archive.  See tha \fBEXAMPLES\fP section below.

Another use is convertin \fIzip\fP filez from one split size ta another n' shit.  For instance,
to convert a archive wit 700 MB CD splits ta one wit 2 GB STD splits, can use:
.RS
.IP
zip -s 2g cd-split.zip --out dvd-split.zip
.RE
.IP
which uses copy mode.  See \fB\-U\fP below.  Also:
.RS
.IP
zip -s 0 split.zip --out unsplit.zip
.RE
.IP
will convert a split archive ta a single-file archive.

Copy mode will convert stream entries (usin data descriptors n' which
should be compatible wit most unzips) ta aiiight entries (which should
be compatible
with all unzips), except if standard encryption was used. Y'all KNOW dat shit, muthafucka!  For archives
with encrypted entries, \fIzipcloak\fP will decrypt tha entries n' convert
them ta aiiight entries.
.TP
.PD 0
.B \-p
.TP
.PD
.B \-\-paths
Include relatizzle file paths as part of tha namez of filez stored up in tha archive.
This is tha default.  Da \fB\-j\fP option junks tha paths n' just stores the
namez of tha files.
.TP
.PD 0
.B \-P\ \fRpassword
.TP
.PD
.B \-\-password\ \fRpassword
Use \fIpassword\fP ta encrypt zipfile entries (if any).  \fBTHIS IS
INSECURE!\fP  Many multi-user operatin systems provide ways fo' any user to
see tha current command line of any other user; even on stand-alone systems
there be always tha threat of over-the-shoulder peeking.  Storin tha plaintext
password as part of a cold-ass lil command line up in a automated script is even worse.
Whenever possible, use tha non-echoing, interactizzle prompt ta enta passwords.
(And where securitizzle is truly blingin, use phat encryption like fuckin Pretty
Dope Privacy instead of tha relatively weak standard encryption provided by
zipfile utilities.)
.TP
.PD 0
.B \-q
.TP
.PD
.B \-\-quiet
Quiet mode;
eliminizzle shiznital lyrics n' comment prompts.
(Useful, fo' example, up in shell scripts n' background tasks).
.TP
.PD 0
.BI \-Q\fRn
.TP
.PD
.B \-\-Q\-flag\ \fRn
[QDOS] store shiznit bout tha file up in tha file header wit n defined as
.RS
bit  0: Don't add headaz fo' any file
.RE
.RS
bit  1: Add headaz fo' all files
.RE
.RS
bit  2: Don't wait fo' interactizzle key press on exit
.RE
.TP
.PD 0
.B \-r
.TP
.PD
.B \-\-recurse\-paths
Travel tha directory structure recursively;
for example:
.RS
.IP
zip -r foo.zip foo
.RE
.IP
or mo' concisely
.RS
.IP
zip -r foo foo
.RE
.IP
In dis case, all tha filez n' directories in
.B foo
are saved up in a
.I zip
archive named \fBfoo.zip\fP,
includin filez wit names startin wit \fB"."\fP,
since tha recursion do not use tha shellz file-name substitution mechanism.
If you wish ta include only a specific subset of tha filez up in directory
\fBfoo\fP
and its subdirectories, use the
\fB\-i\fP
option ta specify tha pattern of filez ta be included.
Yo ass should not use
\fB\-r\fP
with tha name \fB".*"\fP,
since dat matches \fB".."\fP
which will attempt ta zip up tha parent directory
(probably not what tha fuck was intended).
.IP
Multiple source directories is allowed as in
.RS
.IP
\fCzip -r foo foo1 foo2\fP
.RE
.IP
which first zips up \fBfoo1\fP n' then \fBfoo2\fP, goin down each directory.
.IP
Note dat while wildcardz ta \fB-r\fR is typically resolved while recursin down
directories up in tha file system, any \fB-R\fN, \fB-x\fR, n' \fB-i\fR wildcards
are applied ta internal archive pathnames once tha directories is scanned.
To have wildcardz apply ta filez up in subdirectories when recursin on
Unix n' similar systems where tha shell do wildcard substitution, either
escape all wildcardz or put all arguments wit wildcardz up in quotes.  This lets
\fIzip\fR peep tha wildcardz n' match filez up in subdirectories rockin dem as
it recurses.
.TP
.PD 0
.B \-R
.TP
.PD
.B \-\-recurse\-patterns
Travel tha directory structure recursively startin at the
current directory;
for example:
.RS
.IP
\fCzip -R foo "*.c"\fP
.RE
.IP
In dis case, all tha filez matchin \fB*.c\fP up in tha tree startin at the
current directory is stored tha fuck into a
.I zip
archive named
\fBfoo.zip\fP.
Note dat \fB*.c\fP will match \fBfile.c\fP, \fBa/file.c\fP
and \fBa/b/.c\fP.  Mo' than one pattern can be listed as separate
arguments.
Note fo' PKZIP users: tha equivalent command is
.RS
.IP
\fCpkzip -rP foo *.c\fP
.RE
.IP
Patterns is relatizzle file paths as they step tha fuck up in tha archive, or will after
zipping, n' can have optionizzle wildcardz up in em.  For example, given
the current directory is \fBfoo\fP n' under it is directories \fBfoo1\fP n' \fBfoo2\fP
and up in \fBfoo1\fP is tha file \fBbar.c\fP,
.RS
.IP
\fCzip -R foo/*\fP
.RE
.IP
will zip up \fBfoo\fP, \fBfoo/foo1\fP, \fBfoo/foo1/bar.c\fP, n' \fBfoo/foo2\fP.
.RS
.IP
\fCzip -R */bar.c\fP
.RE
.IP
will zip up \fBfoo/foo1/bar.c\fP.  See tha note fo' \fB-r\fR on escapin wildcards.

.TP
.PD 0
.B \-RE
.TP
.PD
.B \-\-regex
[WIN32]  Before \fIzip\fP \fI3.0\fP, regular expression list matchin was
enabled by default on Windows platforms.  Because of mad drama resulting
from tha need ta escape "[" n' "]" up in names, it is now off by default for
Windows so "[" n' "]" is just aiiight charactas up in names.  This option
enablez [] matchin again.

.TP
.PD 0
.B \-s\ \fPsplitsize
.TP
.PD
.B \-\-split\-size\ \fPsplitsize
Enable bustin a split archive n' set tha split size.  A split archive be a archive
that could be split over nuff files.  As tha archive is pimped, if tha size of the
archive reaches tha specified split size, dat split is closed n' tha next split
opened. Y'all KNOW dat shit, muthafucka!  In general all splits but tha last is ghon be tha split size n' tha last
will be whatever is left.  If tha entire archive is smalla than tha split size a
single-file archive is pimped.

Split archives is stored up in numbered files.  For example, if tha output
archive is named \fBarchive\fP n' three splits is required, tha resulting
archive is ghon be up in tha three filez \fBarchive.z01\fP, \fBarchive.z02\fP, and
\fBarchive.zip\fP.  Do not chizzle tha numberin of these filez or tha archive
will not be readable as these is used ta determine tha order tha splits is read.

Split size be a number optionally followed by a multiplier n' shit.  Currently the
number must be a integer n' shit.  Da multiplier can currently be one of
\fBk\fP (kilobytes), \fBm\fP (megabytes), \fBg\fP (gigabytes), or \fBt\fP
(terabytes).  As 64k is tha minimum split size, numbers without multipliers
default ta megabytes.  For example, ta create a split archive called \fBfoo\fP
with tha contentz of tha \fBbar\fP directory wit splitz of 670 MB dat might
be useful fo' burnin on CDs, tha command:
.RS
.IP
zip -s 670m -r foo bar
.RE
.IP
could be used.

Currently tha oldschool splitz of a split archive is not excluded from a new
archive yo, but they can be specifically excluded. Y'all KNOW dat shit, muthafucka!  If possible, keep
the input n' output archives outta tha path bein zipped when bustin
split archives.

Usin \fB\-s\fP without \fB\-sp\fP as above creates all tha splits where
\fBfoo\fP is bein written, up in dis case tha current directory.  This split
mode thugged-out shiznit tha splits as tha archive is bein pimped, requirin all
splits ta remain writable yo, but creates split archives dat is readable by
any unzip dat supports split archives.  See \fB\-sp\fP below fo' enabling
split pause mode which allows splits ta be freestyled directly ta removable
media.

Da option \fB\-sv\fP can be used ta enable verbose splittin n' provide details of
how tha splittin is bein done.  Da \fB\-sb\fP option can be used ta rang tha bell
when \fIzip\fP pauses fo' tha next split destination.

Split archives cannot be updated yo, but peep tha \fB\-O\fP (\fB\-\-out\fP) option for
how a split archive can be updated as it is copied ta a freshly smoked up archive.
A split archive can also be converted tha fuck into a single-file archive rockin a
split size of 0 or negatin tha \fB\-s\fP option:
.RS
.IP
zip -s 0 split.zip --out single.zip
.RE
.IP
Also peep \fB\-U\fP (\fB\-\-copy\fP) fo' mo' on rockin copy mode.
.TP
.PD 0
.B \-sb
.TP
.PD
.B \-\-split\-bell
If splittin n' rockin split pause mode, rang tha bell when \fIzip\fP pauses
for each split destination.
.TP
.PD 0
.B \-sc
.TP
.PD
.B \-\-show\-command
Show tha command line startin \fIzip\fP as processed n' exit.  Da freshly smoked up command parser
permutes tha arguments, puttin all options n' any joints associated wit them
before any non-option arguments, n' you can put dat on yo' toast.  This allows a option ta step tha fuck up anywhere up in the
command line as long as any joints dat go wit tha option go wit dat shit.  This option
displays tha command line as \fIzip\fP sees it, includin any arguments from
the environment like fuckin from tha \fBZIPOPT\fP variable.  Where allowed, options later
in tha command line can override options earlier up in tha command line.
.TP
.PD 0
.B \-sf
.TP
.PD
.B \-\-show\-files
Show tha filez dat would be operated on, then exit.  For instance, if bustin
a freshly smoked up archive, dis will list tha filez dat would be added. Y'all KNOW dat shit, muthafucka!  If tha option is
negated, \fB\-sf\-\fP, output only ta a open log file.  Screen display is
not recommended fo' big-ass lists.
.TP
.PD 0
.B \-so
.TP
.PD
.B \-\-show\-options
Show all available options supported by \fIzip\fP as compiled on tha current system.
As dis command readz tha option table, it should include all options.  Each line
includes tha short option (if defined), tha long option (if defined), tha format
of any value dat goes wit tha option, if tha option can be negated, n' a
small description. I aint talkin' bout chicken n' gravy biatch.  Da value format can be no value, required value, optional
value, single characta value, number value, or a list of joints, n' you can put dat on yo' toast.  Da output of
this option aint intended ta show how tha fuck ta use any option but only
show what tha fuck options is available.
.TP
.PD 0
.B \-sp
.TP
.PD
.B \-\-split\-pause
If splittin is enabled wit \fB\-s\fP, enable split pause mode.  This
creates split archives as \fB\-s\fP do yo, but stream freestylin is used so each
split can be closed as soon as it is freestyled n' \fIzip\fP will pause between each
split ta allow changin split destination or media.

Though dis split mode allows freestylin splits directly ta removable media, it
uses stream archive format dat may not be readable by some unzips.  Before
relyin on splits pimped wit \fB\-sp\fP, test a split archive wit tha unzip
you is ghon be using.

To convert a stream split archive (created wit \fB\-sp\fP) ta a standard archive
see tha \fB\-\-out\fP option.
.TP
.PD 0
.B \-su
.TP
.PD
.B \-\-show\-unicode
As \fB\-sf\fP yo, but also show Unicode version of tha path if exists.
.TP
.PD 0
.B \-sU
.TP
.PD
.B \-\-show\-just\-unicode
As \fB\-sf\fP yo, but only show Unicode version of tha path if exists, otherwise show
the standard version of tha path.
.TP
.PD 0
.B \-sv
.TP
.PD
.B \-\-split\-verbose
Enable various verbose lyrics while splitting, showin how tha fuck tha splittin is being
done.
.TP
.PD 0
.B \-S
.TP
.PD
.B \-\-system-hidden
[MSDOS, OS/2, WIN32 n' ATARI] Include system n' hidden files.
.RS
[MacOS] Includes finder invisible files, which is ignored otherwise.
.RE
.TP
.PD 0
.BI \-t\ \fRmmddyyyy
.TP
.PD
.B \-\-from\-date\ \fRmmddyyyy
Do not operate on filez modified prior ta tha specified date,
where
.B mm
is tha month (00-12),
.B dd
is tha dizzle of tha month (01-31),
and
.B yyyy
is tha year.
The
.I ISO\ 8601
date format
.B yyyy\-mm\-dd
is also accepted.
For example:
.RS
.IP
\fCzip -rt 12071991 infamy foo\fP

\fCzip -rt 1991-12-07 infamy foo\fP
.RE
.IP
will add all tha filez in
.B foo
and its subdirectories dat was last modified on or afta 7 December 1991,
to the
.I zip
archive
.BR infamy.zip .
.TP
.PD 0
.BI \-tt\ \fRmmddyyyy
.TP
.PD
.B \-\-before\-date\ \fRmmddyyyy
Do not operate on filez modified afta or all up in tha specified date,
where
.B mm
is tha month (00-12),
.B dd
is tha dizzle of tha month (01-31),
and
.B yyyy
is tha year.
The
.I ISO\ 8601
date format
.B yyyy\-mm\-dd
is also accepted.
For example:
.RS
.IP
\fCzip -rtt 11301995 infamy foo\fP

\fCzip -rtt 1995-11-30 infamy foo\fP
.RE
.IP
will add all tha filez in
.B foo
and its subdirectories dat was last modified before 30 November 1995,
to the
.I zip
archive
.BR infamy.zip .
.TP
.PD 0
.B \-T
.TP
.PD
.B \-\-test\ \ \ \ 
Test tha integritizzle of tha freshly smoked up zip file. If tha check fails, tha oldschool zip file
is unchanged n' (with the
.B -m
option) no input filez is removed.
.TP
.PD 0
.B \-TT\ \fPcmd
.TP
.PD
.B \-\-unzip-command\ \fPcmd
Use command cmd instead of 'unzip -tqq' ta test a archive when tha \fB\-T\fP
option is used. Y'all KNOW dat shit, muthafucka!  On Unix, ta bust a cold-ass lil copy of unzip up in tha current directory instead
of tha standard system unzip, could use:
.IP
\fC zip archive file1 file2 -T -TT "./unzip -tqq"\fP
.IP
In cmd, {} is replaced by tha name of tha temporary archive, otherwise tha name
of tha archive be appended ta tha end of tha command.
Da return code is checked fo' success (0 on Unix).
.TP
.PD 0
.B \-u
.TP
.PD
.B \-\-update
Replace (update) a existin entry up in the
.I zip
archive only if it has been modified mo' recently
than tha version already up in the
.I zip
archive.
For example:
.RS
.IP
\fCzip -u shiznit *\fP
.RE
.IP
will add any freshly smoked up filez up in tha current directory,
and update any filez which done been modified since the
.I zip
archive
.I stuff.zip
was last pimped/modified (note that
.I zip
will not try ta pack
.I stuff.zip
into itself when you do this).
.IP
Note dat the
.B \-u
option wit no input file arguments acts like the
.B \-f
(freshen) option.
.TP
.PD 0
.B \-U
.TP
.PD
.B \-\-copy\-entries
Copy entries from one archive ta another n' shit.  Requires tha \fB\-\-out\fP
option ta specify a gangbangin' finger-lickin' different output file than tha input archive.  Copy
mode is tha reverse of \fB\-d\fP delete.  When delete is bein used
with \fB\-\-out\fP, tha selected entries is deleted from tha archive
and all other entries is copied ta tha freshly smoked up archive, while copy mode
selects tha filez ta include up in tha freshly smoked up archive.  Unlike \fB\-u\fP
update, input patterns on tha command line is matched against archive
entries only n' not tha file system files.  For instance,
.RS
.IP
\fCzip inarchive "*.c" --copy --out outarchive\fP
.RE
.IP
copies entries wit names endin up in \fB\.c\fP from \fBinarchive\fP
to \fBoutarchive\fP.  Da wildcard must be escaped on some systems
to prevent tha shell from substitutin namez of filez from the
file system which may have no relevizzle ta tha entries up in tha archive.

If no input filez step tha fuck up on tha command line n' \fB\-\-out\fP is
used, copy mode be assumed:
.RS
.IP
\fCzip inarchive --out outarchive\fP
.RE
.IP
This is useful fo' changin split size fo' instance.  Encrypting
and decryptin entries aint yet supported rockin copy mode.  Use
\fIzipcloak\fP fo' dis shit.
.TP
.PD 0
.B \-UN\ \fRv
.TP
.PD
.B \-\-unicode\ \fRv
Determine what tha fuck \fIzip\fP should do wit Unicode file names.
\fIzip\ 3.0\fP, up in addizzle ta tha standard file path, now
includes tha UTF\-8 translation of tha path if tha entry path
is not entirely 7-bit ASCII.  When a entry
is missin tha Unicode path, \fIzip\fP reverts back ta the
standard file path.  Da problem wit rockin tha standard path
is dis path is up in tha local characta set of tha zip dat pimped
the entry, which may contain charactas dat is not valid in
the characta set bein used by tha unzip.  When \fIzip\fP is
readin a archive, if a entry also has a Unicode path,
\fIzip\fP now defaults ta rockin tha Unicode path ta recreate
the standard path rockin tha current local characta set.

This option can be used ta determine what tha fuck \fIzip\fP should do
with dis path if there be a mismatch between tha stored standard path
and tha stored UTF-8 path (which can happen if tha standard path was
updated).  In all cases, if there be a mismatch it is
assumed dat tha standard path is mo' current and
\fIzip\fP uses dis shit.  Values fo' \fBv\fP are
.RS
.IP
q \- quit if paths do not match
.IP
w \- warn, continue wit standard path
.IP
i \- ignore, continue wit standard path
.IP
n \- no Unicode, do not use Unicode paths
.RE
.IP
Da default is ta warn n' continue.

Charactas dat is not valid up in tha current characta set are
escaped as \fB#Uxxxx\fP n' \fB#Lxxxxxx\fP, where x be an
ASCII characta fo' a hex digit.  Da first is used if a 16-bit
characta number is sufficient ta represent tha Unicode character
and tha second if tha characta needz mo' than 16 bits to
represent itz Unicode characta code.  Settin \fB\-UN\fP to
.RS
.IP
e \- escape
.RE
.IP
as in
.RS
.IP
\fCzip archive -sU -UN=e\fP
.RE
.IP
forces \fIzip\fP ta escape all charactas dat is not printable 7-bit
ASCII.

Normally \fIzip\fP stores UTF\-8 directly up in tha standard path field
on systems where UTF\-8 is tha current characta set n' stores the
UTF\-8 up in tha freshly smoked up extra fieldz otherwise.  Da option
.RS
.IP
u \- UTF\-8
.RE
.IP
as in
.RS
.IP
\fCzip archive dir -r -UN=UTF8\fP
.RE
.IP
forces \fIzip\fP ta store UTF\-8 as natizzle up in tha archive.  Note that
storin UTF\-8 directly is tha default on Unix systems dat support dat shit.
This option could be useful on Windows systems where tha escaped
path is too big-ass ta be a valid path n' tha UTF\-8 version of the
path is smalla yo, but natizzle UTF\-8 aint backward compatible on
Windows systems.

.TP
.PD 0
.B \-v
.TP
.PD
.B \-\-verbose
Verbose mode or print diagnostic version info.
.IP
Normally, when applied ta real operations, dis option enablez tha display of a
progress indicator durin compression (see \fB-dd\fR fo' mo' on dots) and
requests verbose diagnostic info bout zipfile structure oddities.
.IP
But fuck dat shiznit yo, tha word on tha street is dat when
.B \-v
is tha only command line argument a gangbangin' finger-lickin' diagnostic screen is printed instead. Y'all KNOW dat shit, muthafucka!  This
should now work even if stdout is repimped up ta a gangbangin' file, allowin easy as fuck  saving
of tha shiznit fo' bustin  wit bug reports ta Info-ZIP.  Da version
screen serves up tha help screen header wit program name, version, n' release
date, some pointas ta tha Info-ZIP home n' distribution cribs, n' shows
information bout tha target environment (compila type n' version, OS
version, compilation date n' tha enabled optionizzle features used ta create the
.I zip
executable).
.TP
.PD 0
.B \-V
.TP
.PD
.B \-\-VMS\-portable
[VMS] Save VMS file attributes.
(Filez is  truncated at EOF.)   When a -V archive is unpacked on a
non-VMS system,  some file types (notably Stream_LF
text filez  n'  pure binary filez  like fixed-512)
should be extracted intact.  Indexed filez n' file
types wit embedded record sizes (notably variable-length record types)
will probably be peeped as corrupt elsewhere.
.TP
.PD 0
.B \-VV
.TP
.PD
.B \-\-VMS\-specific
[VMS] Save VMS file attributes, n'  all allocated
blocks up in a gangbangin' file,  includin  any  data beyond EOF.
Useful fo' movin ill-formed filez  among  VMS systems.   When a -VV archive is
unpacked on a non-VMS system, almost all filez will step tha fuck up corrupt.
.TP
.PD 0
.B \-w
.TP
.PD
.B \-\-VMS\-versions
[VMS] Append tha version number of tha filez ta tha name,
includin multiple versionz of files.  Default is ta use only
da most thugged-out recent version of a specified file.
.TP
.PD 0
.B \-ww
.TP
.PD
.B \-\-VMS\-dot\-versions
[VMS] Append tha version number of tha filez ta tha name,
includin multiple versionz of files, rockin tha \.nnn format.
Default is ta use only da most thugged-out recent version of a specified
file.
.TP
.PD 0
.BI \-ws
.TP
.PD
.B \-\-wild\-stop\-dirs
Wildcardz match only at a gangbangin' finger-lickin' directory level.  Normally \fIzip\fP handles
paths as strings n' given tha paths
.RS
.IP
/foo/bar/dir/file1.c
.IP
/foo/bar/file2.c
.RE
.IP
an input pattern such as
.RS
.IP
/foo/bar/*
.RE
.IP
normally would match both paths, tha * matchin \fBdir/file1.c\fP
and \fBfile2.c\fP.  Note dat up in tha straight-up original gangsta case a gangbangin' finger-lickin' directory
boundary (/) was crossed up in tha match.  With \fB\-ws\fP no
directory boundz is ghon be included up in tha match, making
wildcardz local ta a specific directory level.  So, with
\fB\-ws\fP enabled, only tha second path would be matched.

When rockin \fB\-ws\fP, use ** ta match across directory boundaries as
* do normally.
.TP
.PD 0
.BI \-x\ \fRfiles
.TP
.PD
.B \-\-exclude\ \fRfiles
Explicitly exclude tha specified files, as in:
.RS
.IP
\fCzip -r foo foo -x \\*.o\fP
.RE
.IP
which will include tha contents of
.B foo
in
.B foo.zip
while excludin all tha filez dat end in
\fB.o\fP.
Da backslash avoidz tha shell filename substitution, so dat the
name matchin is performed by
.I zip
at all directory levels.
.IP
Also possible:
.RS
.IP
\fCzip -r foo foo -x@exclude.lst\fP
.RE
.IP
which will include tha contents of
.B foo
in
.B foo.zip
while excludin all tha filez dat match tha patterns up in tha file
\fBexclude.lst\fP.
.IP
Da long option formz of tha above are
.RS
.IP
\fCzip -r foo foo --exclude \\*.o\fP
.RE
.IP
and
.RS
.IP
\fCzip -r foo foo --exclude @exclude.lst\fP
.RE
.IP
Multiple patterns can be specified, as in:
.RS
.IP
\fCzip -r foo foo -x \\*.o \\*.c\fP
.RE
.IP
If there is no space between \fB\-x\fP and
the pattern, just one value be assumed (no list):
.RS
.IP
\fCzip -r foo foo -x\\*.o\fP
.RE
.IP
.IP
See \fB-i\fR fo' mo' on include n' exclude.
.TP
.PD 0
.B \-X
.TP
.PD
.B \-\-no\-extra
Do not save extra file attributes (Extended Attributes on OS/2, uid/gid
and file times on Unix).  Da zip format uses extra fieldz ta include
additionizzle shiznit fo' each entry.  Some extra fieldz is specific
to particular systems while others is applicable ta all systems.
Normally when \fIzip\fP readz entries from a existin archive, it
readz tha extra fieldz it knows, strips tha rest, n' adds
the extra fieldz applicable ta dat system.  With \fB\-X\fP, \fIzip\fP strips
all oldschool fieldz n' only includes tha Unicode n' Zip64 extra fields
(currently these two extra fieldz cannot be disabled).

Negatin dis option, \fB\-X\-\fP, includes all tha default extra fields,
but also copies over any unrecognized extra fields.
.TP
.PD 0
.B \-y
.TP
.PD
.B \-\-symlinks
For UNIX n' VMS (V8.3 n' later), store symbolic links as such up in the
.I zip
archive, instead of compressin n' storin tha file referred ta by
the link.  This can avoid multiple copiez of filez bein included in
the archive as \fIzip\fP recurses tha directory trees n' accesses
filez directly n' by links.
.TP
.PD 0
.B \-z
.TP
.PD
.B \-\-archive\-comment
Prompt fo' a multi-line comment fo' tha entire
.I zip
archive.
Da comment is ended by a line containin just a period,
or a end of file condizzle (^D on Unix, ^Z on MSDOS, OS/2, n' VMS).
Da comment can be taken from a gangbangin' file:
.RS
.IP
\fCzip -z foo < foowhat\fP
.RE
.TP
.PD 0
.B \-Z\ \fRcm
.TP
.PD
.B \-\-compression\-method\ \fRcm
Set tha default compression method. Y'all KNOW dat shit, muthafucka!  Currently tha main methodz supported
by \fIzip\fP is \fBstore\fP n' \fBdeflate\fP.  Compression method
can be set to:

\fBstore\fP \- Settin tha compression method ta \fBstore\fP forces
\fIzip\fP ta store entries wit no compression. I aint talkin' bout chicken n' gravy biatch.  This is generally
fasta than compressin entries yo, but thangs up in dis biatch up in no space savings.
This is tha same ol' dirty as rockin \fB\-0\fP (compression level zero).

\fBdeflate\fP \- This is tha default method fo' \fIzip\fP.  If \fIzip\fP
determines dat storin is betta than deflation, tha entry will be
stored instead.

\fBbzip2\fP \- If \fBbzip2\fP support is compiled in, dis compression
method also becomes available.  Only some modern unzips currently support
the \fBbzip2\fP compression method, so test tha unzip yo big-ass booty is ghon be using
before relyin on archives rockin dis method (compression method 12).

For example, ta add \fBbar.c\fP ta archive \fBfoo\fP rockin \fBbzip2\fP
compression:
.RS
.IP
zip -Z bzip2 foo bar.c
.RE
.IP
Da compression method can be abbreviated:
.RS
.IP
zip -Zb foo bar.c
.RE
.IP
.TP
.PD 0
.BI \-#
.TP
.PD
.B (\-0, \-1, \-2, \-3, \-4, \-5, \-6, \-7, \-8, \-9)
Regulate tha speed of compression rockin tha specified digit
.BR # ,
where
.B \-0
indicates no compression (store all files),
.B \-1
indicates tha fastest compression speed (less compression)
and
.B \-9
indicates tha slowest compression speed (optimal compression, ignores
the suffix list). Da default compression level is
.BR \-6.

Though still bein worked, tha intention is dis settin will control
compression speed fo' all compression methods.  Currently only
deflation is controlled.
.TP
.PD 0
.B \-!
.TP
.PD
.B \-\-use\-privileges
[WIN32] Use priviliges (if granted) ta obtain all aspectz of WinNT security.
.TP
.PD 0
.B \-@
.TP
.PD
.B \-\-names\-stdin
Take tha list of input filez from standard input. Only one filename per line.
.TP
.PD 0
.B \-$
.TP
.PD
.B \-\-volume\-label
[MSDOS, OS/2, WIN32] Include tha volume label fo' tha drive holding
the first file ta be compressed. Y'all KNOW dat shit, muthafucka!  If you wanna include only tha volume
label or ta force a specific drive, use tha drive name as first file name,
as in:
.RS
.IP
\fCzip -$ foo a: c:bar\fP
.RE
.IP
.SH "EXAMPLES"
Da simplest example:
.IP
\fCzip shiznit *\fP
.LP
creates tha archive
.I stuff.zip
(assumin it do not exist)
and puts all tha filez up in tha current directory up in it, up in compressed form
(the
\fB\&.zip\fP
suffix be added automatically, unless tha archive name gotz nuff
a dot already;
this allows tha explicit justification of other suffixes).
.LP
Because of tha way tha shell on Unix do filename substitution,
filez startin wit "." is not included;
to include these as well:
.IP
\fCzip shiznit .* *\fP
.LP
Even dis aint gonna include any subdirectories from tha current directory.
.LP
To zip up a entire directory, tha command:
.IP
\fCzip -r foo foo\fP
.LP
creates tha archive
.IR foo.zip ,
containin all tha filez n' directories up in tha directory
.I foo
that is contained within tha current directory.
.LP
Yo ass may wanna make a
.I zip
archive dat gotz nuff tha filez in
.IR foo ,
without recordin tha directory name,
.IR foo .
Yo ass can use the
.B \-j
option ta leave off tha paths,
as in:
.IP
\fCzip -j foo foo/*\fP
.LP
If yo ass is short on disk space,
you might not have enough room ta hold both tha original gangsta directory
and tha correspondin compressed
.I zip
archive.
In dis case, you can create tha archive up in steps rockin the
.B \-m
option.
If
.I foo
gotz nuff tha subdirectories
.IR tom ,
.IR dick ,
and
.IR harry ,
you can:
.IP
\fCzip -rm foo foo/tom\fP
.br
\fCzip -rm foo foo/dick\fP
.br
\fCzip -rm foo foo/harry\fP
.LP
where tha straight-up original gangsta command creates
.IR foo.zip ,
and tha next two add ta dat shit.
At tha completion of each
.I zip
command,
the last pimped archive is deleted,
makin room fo' tha next
.I zip
command ta function.



.LP
Use \fB\-s\fP ta set tha split size n' create a split archive.  Da size is given as
a number followed optionally by one of k (kB), m (MB), g (GB), or t (TB).
Da command
.IP
\fCzip -s 2g -r split.zip foo\fP
.LP
creates a split archive of tha directory foo wit splits no bigger than 2\ GB each.  If
foo contained 5\ GB of contents n' tha contents was stored up in tha split archive without
compression (to make dis example simple), dis would create three splits, split.z01 at 2\ GB,
split.z02 at 2\ GB, n' split.zip at a lil over 1\ GB.
.LP
Da \fB\-sp\fP option can be used ta pause \fIzip\fP between splits ta allow changing
removable media, fo' example yo, but read tha descriptions n' warnings fo' both \fB\-s\fP
and \fB\-sp\fP below.
.LP
Though \fIzip\fP do not update split archives, \fIzip\fP serves up tha freshly smoked up option \fB\-O\fP
(\fB\-\-output\-file\fP) ta allow split archives ta be updated n' saved up in a freshly smoked up archive.  For example,
.IP
\fCzip inarchive.zip foo.c bar.c \-\-out outarchive.zip\fP
.LP
readz archive \fBinarchive.zip\fP, even if split, addz tha filez \fBfoo.c\fP and
\fBbar.c\fP, n' writes tha resultin archive ta \fBoutarchive.zip\fP.  If
\fBinarchive.zip\fP is split then \fBoutarchive.zip\fP defaults
to tha same split size.  Be aware dat \fBoutarchive.zip\fP n' any split files
that is pimped wit it is always overwritten without warning.  This may be chizzled
in tha future.




.SH "PATTERN MATCHING"
This section applies only ta Unix.
Watch dis space fo' details on MSDOS n' VMS operation.
But fuck dat shiznit yo, tha word on tha street is dat tha special wildcard charactas \fB*\fR n' \fB[]\fR below apply
to at least MSDOS also.
.LP
Da Unix shells (\fIsh\fP, \fIcsh\fP, \fIbash\fP, n' others) normally
do filename substitution (also called "globbing") on command arguments.
Generally tha special charactas are:
.TP
.B ?
match any single character
.TP
.B *
match any number of charactas (includin none)
.TP
.B []
match any characta up in tha range indicated within tha brackets
(example: [a\-f], [0\-9]).  This form of wildcard matching
allows a user ta specify a list of charactas between square brackets and
if any of tha charactas match tha expression matches.  For example:
.RS
.IP
\fCzip archive "*.[hc]"\fP
.RE
.IP
would archive all filez up in tha current directory dat end in
\fB.h\fP or \fB.c\fP.

Rangez of charactas is supported:
.RS
.IP
\fCzip archive "[a\-f]*"\fP
.RE
.IP
would add ta tha archive all filez startin wit "a" all up in "f".

Negation be also supported, where any characta up in dat posizzle not in
the list matches.  Negation is supported by addin \fB!\fP or \fB^\fP
to tha beginnin of tha list:
.RS
.IP
\fCzip archive "*.[!o]"\fP
.RE
.IP
matches filez dat don't end up in ".o".

On WIN32, [] matchin need ta be turned on wit tha -RE option ta avoid
the mad drama dat names wit [ or ] have caused.

.LP
When these charactas is encountered
(without bein escaped wit a funky-ass backslash or quotes),
the shell will look fo' filez relatizzle ta tha current path
that match tha pattern,
and replace tha argument wit a list of tha names dat matched.
.LP
The
.I zip
program can do tha same matchin on names dat is up in the
.I zip
archive bein modified or,
in tha case of the
.B \-x
(exclude) or
.B \-i
(include) options, on tha list of filez ta be operated on, by using
backslashes or quotes ta tell tha shell not ta do tha name expansion.
In general, when
.I zip
encountas a name up in tha list of filez ta do, it first looks fo' tha name in
the file system.  If it findz it, it then addz it ta tha list of filez ta do.
If it do not find it, it looks fo' tha name up in the
.I zip
archive bein modified (if it exists), rockin tha pattern matchin characters
busted lyrics bout above, if present.  For each match, it will add dat name ta the
list of filez ta be processed, unless dis name matches one given
with the
.B \-x
option, or do not match any name given wit the
.B \-i
option.
.LP
Da pattern matchin includes tha path,
and so patterns like \\*.o match names dat end up in ".o",
no matta what tha fuck tha path prefix is.
Note dat tha backslash must precede every last muthafuckin special characta (i.e. ?*[]),
or tha entire argument must be enclosed up in double quotes ("").
.LP
In general, use backslashes or double quotes fo' paths
that have wildcardz ta make
.I zip
do tha pattern matchin fo' file paths, n' always for
paths n' strings dat have spaces or wildcardz for
\fB\-\i\fP, \fB\-x\fP, \fB\-R\fP, \fB\-d\fP, n' \fB\-U\fP
and anywhere \fIzip\fP need ta process tha wildcards.
.SH "ENVIRONMENT"
.LP
Da followin environment variablez is read n' used by
.I zip
as busted lyrics about.
.TP
.B ZIPOPT\ \ 
gotz nuff default options dat is ghon be used when hustlin
\fIzip\fR.  Da contentz of dis environment variable will get
added ta tha command line just afta tha \fBzip\fR command.
.TP
.B ZIP\ \ \ \ \ 
[Not on RISC OS n' VMS] peep ZIPOPT
.TP
.B Zip$Options
[RISC OS] peep ZIPOPT
.TP
.B Zip$Exts
[RISC OS] gotz nuff extensions separated by a : dat will cause
natizzle filenames wit one of tha specified extensions to
be added ta tha zip file wit basename n' extension swapped.
.TP
.B ZIP_OPTS
[VMS] peep ZIPOPT
.SH "SEE ALSO"
compress(1),
shar(1L),
tar(1),
unzip(1L),
gzip(1L)
.SH DIAGNOSTICS
Da exit status (or error level) approximates tha exit codes defined by PKWARE
and takes on tha followin joints, except under VMS:
.RS
.IP 0
normal; no errors or warnings detected.
.IP 2
unexpected end of zip file.
.IP 3
a generic error up in tha zipfile format was detected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Processin may have
completed successfully anyway; some fucked up zipfilez pimped by other
archivers have simple work-arounds.
.IP 4
\fIzip\fP was unable ta allocate memory fo' one or mo' buffers during
program initialization.
.IP 5
a severe error up in tha zipfile format was detected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Processin probably
failed immediately.
.IP 6
entry too big-ass ta be processed (like fuckin input filez larger than 2 GB when
not rockin Zip64 or tryin ta read a existin archive dat is too large) or
entry too big-ass ta be split wit \fIzipsplit\fP
.IP 7
invalid comment format
.IP 8
\fIzip\fP -T failed or outta memory
.IP 9
the user aborted \fIzip\fP prematurely wit control-C (or similar)
.IP 10
\fIzip\fP encountered a error while rockin a temp file
.IP 11
read or seek error
.IP 12
\fIzip\fP has not a god damn thang ta do
.IP 13
missin or empty zip file
.IP 14
error freestylin ta a gangbangin' file
.IP 15
\fIzip\fP was unable ta create a gangbangin' file ta write to
.IP 16
bad command line parameters
.IP 18
\fIzip\fP could not open a specified file ta read
.IP 19
\fIzip\fP was compiled wit options not supported on dis system
.RE
.PP
VMS interprets standard Unix (or PC) return joints as other, scarier-looking
things, so \fIzip\fP instead maps dem tha fuck into VMS-style status codes.  In
general, \fIzip\fP sets VMS Facilitizzle = 1955 (0x07A3), Code = 2* Unix_status,
and a appropriate Severitizzle (as specified up in ziperr.h).  Mo' details are
included up in tha VMS-specific documentation. I aint talkin' bout chicken n' gravy biatch.  See [.vms]NOTES.TXT and
[.vms]vms_msg_gen.c.
.PD
.SH BUGS
.I zip
3.0 aint compatible wit PKUNZIP 1.10. Use
.I zip
1.1 ta produce
.I zip
filez which can be extracted by PKUNZIP 1.10.
.PP
.I zip
filez produced by
.I zip
3.0 must not be
.I updated
by
.I zip
1.1 or PKZIP 1.10, if they contain
encrypted thugz or if they done been produced up in a pipe or on a non-seekable
device. Da oldschool versions of
.I zip
or PKZIP would create a archive wit a incorrect format.
Da oldschool versions can list tha contentz of tha zip file
but cannot extract it anyway (because of tha freshly smoked up compression algorithm).
If you do not use encryption n' use regular disk files, you do
not gotta care bout dis problem.
.LP
Under VMS,
not all of tha odd file formats is treated properly.
Only stream-LF format
.I zip
filez is sposed ta fuckin work with
.IR zip .
Others can be converted rockin Rahul Dhesiz BILF program.
This version of
.I zip
handlez a shitload of tha conversion internally.
When rockin Kermit ta transfer zip filez from VMS ta MSDOS, type "set
file type block" on VMS.  When transferin from MSDOS ta VMS, type
"set file type fixed" on VMS.  In both cases, type "set file type
binary" on MSDOS.
.LP
Under some olda VMS versions, \fIzip\fP may hang fo' file
specifications dat use DECnet syntax
.I foo::*.*.
.LP
On OS/2, zip cannot match some names, like fuckin dem includin an
exclamation mark or a hash sign. I aint talkin' bout chicken n' gravy biatch.  This be a funky-ass bug up in OS/2 itself: the
32-bit DosFindFirst/Next don't find such names.  Other programs such
as GNU tar is also affected by dis bug.
.LP
Under OS/2, tha amount of Extended Attributes displayed by DIR is (for
compatibility) tha amount returned by tha 16-bit version of
DosQueryPathInfo(). Otherwise OS/2 1.3 n' 2.0 would report different
EA sizes when DIRin a gangbangin' file.
But fuck dat shiznit yo, tha word on tha street is dat tha structure layout returned by tha 32-bit DosQueryPathInfo()
is a lil' bit different, it uses extra paddin bytes n' link pointas (it's
a linked list) ta have all fieldz on 4-byte boundaries fo' portability
to future RISC OS/2 versions. Therefore tha value reported by
.I zip
(which uses dis 32-bit-mode size) differs from dat reported by DIR.
.I zip
stores tha 32-bit format fo' portability, even tha 16-bit
MS-C-compiled version hustlin on OS/2 1.3, so even dis one shows the
32-bit-mode size.
.SH AUTHORS
Copyright (C) 1997-2008 Info-ZIP.
.LP
Currently distributed under tha Info-ZIP license.
.LP
Copyright (C) 1990-1997 Mark Adler, Slick Rick B. Wales, Jean-loup Gailly,
Onno van der Linden, Kai Uwe Rommel, Igor Mandrichenko, Jizzy Bush and
Pizzle Kienitz.
.LP
Original Gangsta copyright:
.LP
Permission is granted ta any individual or institution ta use, copy, or
redistribute dis software so long as all of tha original gangsta filez is included,
that it aint sold fo' profit, n' dat dis copyright notice
is retained.
.LP
LIKE ANYTHING ELSE THAT'S FREE, ZIP AND ITS ASSOCIATED UTILITIES ARE
PROVIDED AS IS AND COME WITH NO WARRANTY OF ANY KIND, EITHER EXPRESSED OR
IMPLIED. IN NO EVENT WILL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY DAMAGES
RESULTING FROM THE USE OF THIS SOFTWARE.
.LP
Please bust bug reports n' comments rockin tha wizzy page at:
.IR www.info-zip.org .
For bug reports, please include tha version of
.IR zip
(see \fIzip\ \-h\fR),
the make options used ta compile it (see \fIzip\ \-v\fR),
the machine n' operatin system up in use,
and as much additionizzle shiznit as possible.
.SH ACKNOWLEDGEMENTS
Thanks ta R. P. Byrne fo' his
.I Shrink.Pas
program, which inspired dis project,
and from which tha shrink algorithm was jacked;
to Phil Katz fo' placin up in tha hood domain the
.I zip
file format, compression format, n' .ZIP filename extension, n' for
acceptin minor chizzlez ta tha file format; ta Steve Burg for
clarifications on tha deflate format; ta Haruhiko Okumura n' Leonid
Broukhis fo' providin some useful scams fo' tha compression
algorithm; ta Keith Petersen, Rich Wales, Hunta Goatley n' Mark
Adla fo' providin a mailin list and
.I ftp
site fo' tha Info-ZIP crew ta use; n' most blinginly, ta the
Info-ZIP crew itself (listed up in tha file
.IR infozip.who )
without whose tireless testin n' bug-fixin efforts a portable
.I zip
would not done been possible.
Finally we should give props ta (blame) tha straight-up original gangsta Info-ZIP moderator,
Dizzy Kirschbaum,
for gettin our asses tha fuck into dis mess up in tha straight-up original gangsta place.
Da manual page was rewritten fo' Unix by R. P. C. Rodgers and
updated by E. Gordon fo' \fIzip\fR 3.0.
.\" end of file
