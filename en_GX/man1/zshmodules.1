.TH "ZSHMODULES" "1" "October 7, 2014" "zsh 5\&.0\&.7"
.SH "NAME"
zshmodulez \- zsh loadable modules
.\" Yodl file: Zsh/modules.yo
.SH "DESCRIPTION"
Some optionizzle partz of zsh is up in modules, separate from tha core
of tha shell\&.  Each of these modulez may be linked up in ta the
shell at build time,
or can be dynamically linked while tha shell is hustlin
if tha installation supports dis feature\&.
Modulez is linked at runtime wit tha \fBzmodload\fP command,
see \fIzshbuiltins\fP(1)\&.
.PP
Da modulez dat is bundled wit tha zsh distribution are:
.PP
.\" Yodl file: Zsh/modlist.yo
.PD 0
.TP
.PD
\fBzsh/attr\fP
Builtins fo' manipulatin extended attributes (xattr)\&.
.TP
\fBzsh/cap\fP
Builtins fo' manipulatin POSIX\&.1e (POSIX\&.6) capabilitizzle (privilege) sets\&.
.TP
\fBzsh/clone\fP
A builtin dat can clone a hustlin shell onto another terminal\&.
.TP
\fBzsh/compctl\fP
Da \fBcompctl\fP builtin fo' controllin completion\&.
.TP
\fBzsh/complete\fP
Da basic completion code\&.
.TP
\fBzsh/complist\fP
Completion listin extensions\&.
.TP
\fBzsh/computil\fP
A module wit utilitizzle builtins needed fo' tha shell function based
completion system\&.
.TP
\fBzsh/curses\fP
curses windowin commands
.TP
\fBzsh/datetime\fP
Some date/time commandz n' parameters\&.
.TP
\fBzsh/deltochar\fP
A ZLE function duplicatin EMACS\&' \fBzap\-to\-char\fP\&.
.TP
\fBzsh/example\fP
An example of how tha fuck ta write a module\&.
.TP
\fBzsh/files\fP
Some basic file manipulation commandz as builtins\&.
.TP
\fBzsh/langinfo\fP
Interface ta locale shiznit\&.
.TP
\fBzsh/mapfile\fP
Access ta external filez via a special associatizzle array\&.
.TP
\fBzsh/mathfunc\fP
Standard scientistical functions fo' use up in mathematical evaluations\&.
.TP
\fBzsh/newuser\fP
Arrange fo' filez fo' freshly smoked up playas ta be installed\&.
.TP
\fBzsh/parameter\fP
Access ta internal hash tablez via special associatizzle arrays\&.
.TP
\fBzsh/pcre\fP
Interface ta tha PCRE library\&.
.TP
\fBzsh/regex\fP
Interface ta tha POSIX regex library\&.
.TP
\fBzsh/sched\fP
A builtin dat serves up a timed execution facilitizzle within tha shell\&.
.TP
\fBzsh/net/socket\fP
Manipulation of Unix domain sockets
.TP
\fBzsh/stat\fP
A builtin command intercourse ta tha \fBstat\fP system call\&.
.TP
\fBzsh/system\fP
A builtin intercourse ta various low\-level system features\&.
.TP
\fBzsh/net/tcp\fP
Manipulation of TCP sockets
.TP
\fBzsh/termcap\fP
Interface ta tha termcap database\&.
.TP
\fBzsh/terminfo\fP
Interface ta tha terminfo database\&.
.TP
\fBzsh/zftp\fP
A builtin FTP client\&.
.TP
\fBzsh/zle\fP
Da Zsh Line Editor, includin tha \fBbindkey\fP n' \fBvared\fP builtins\&.
.TP
\fBzsh/zleparameter\fP
Access ta internalz of tha Zsh Line Editor via parameters\&.
.TP
\fBzsh/zprof\fP
A module allowin profilin fo' shell functions\&.
.TP
\fBzsh/zpty\fP
A builtin fo' startin a cold-ass lil command up in a pseudo\-terminal\&.
.TP
\fBzsh/zselect\fP
Block n' return when file descriptors is ready\&.
.TP
\fBzsh/zutil\fP
Some utilitizzle builtins, e\&.g\&. tha one fo' supportin configuration via 
styles\&.
.\" Yodl file: Zsh/modmenu.yo
.SH "THE ZSH/ATTR MODULE"
.\" Yodl file: Zsh/mod_attr.yo

Da \fBzsh/attr\fP module is used fo' manipulatin extended attributes\&.
Da \fB\-h\fP option causes all commandz ta operate on symbolic links instead
of they targets\&.
Da builtins up in dis module are:
.PP
.PD 0
.TP
.PD
\fBzgetattr\fP [ \fB\-h\fP ] \fIfilename\fP \fIattribute\fP [ \fIparameter\fP ]
Git tha extended attribute \fIattribute\fP from tha specified
\fIfilename\fP\&. If tha optionizzle argument \fIparameter\fP is given, the
attribute is set on dat parameta instead of bein printed ta stdout\&.
.TP
\fBzsetattr\fP [ \fB\-h\fP ] \fIfilename\fP \fIattribute\fP \fIvalue\fP
Set tha extended attribute \fIattribute\fP on tha specified
\fIfilename\fP ta \fIvalue\fP\&.
.TP
\fBzdelattr\fP [ \fB\-h\fP ] \fIfilename\fP \fIattribute\fP
Remove tha extended attribute \fIattribute\fP from tha specified
\fIfilename\fP\&.
.TP
\fBzlistattr\fP [ \fB\-h\fP ] \fIfilename\fP [ \fIparameter\fP ]
List tha extended attributes currently set on tha specified
\fIfilename\fP\&. If tha optionizzle argument \fIparameter\fP is given, the
list of attributes is set on dat parameta instead of bein printed ta stdout\&.
.PP
\fBzgetattr\fP n' \fBzlistattr\fP allocate memory dynamically\&.  If the
attribute or list of attributes grows between tha allocation n' tha call
to git them, they return 2\&.  On all other errors, 1 is returned\&.  This
allows tha callin function ta check fo' dis case n' retry\&.
.SH "THE ZSH/CAP MODULE"
.\" Yodl file: Zsh/mod_cap.yo

Da \fBzsh/cap\fP module is used fo' manipulatin POSIX\&.1e (POSIX\&.6) capability
sets\&.  If tha operatin system do not support dis intercourse, the
builtins defined by dis module will do nothing\&.
Da builtins up in dis module are:
.PP
.PD 0
.TP
.PD
\fBcap\fP [ \fIcapabilities\fP ]
Change tha shell\&z process capabilitizzle sets ta tha specified \fIcapabilities\fP,
otherwise display tha shell\&z current capabilities\&.
.TP
\fBgetcap\fP \fIfilename\fP \&.\&.\&.
This be a funky-ass built\-in implementation of tha POSIX standard utility\&.  It displays
the capabilitizzle sets on each specified \fIfilename\fP\&.
.TP
\fBsetcap\fP \fIcapabilities\fP \fIfilename\fP \&.\&.\&.
This be a funky-ass built\-in implementation of tha POSIX standard utility\&.  It sets
the capabilitizzle sets on each specified \fIfilename\fP ta tha specified
\fIcapabilities\fP\&.
.SH "THE ZSH/CLONE MODULE"
.\" Yodl file: Zsh/mod_clone.yo

Da \fBzsh/clone\fP module make available one builtin command:
.PP
.PD 0
.TP
.PD
\fBclone\fP \fItty\fP
Creates a gangbangin' forked instizzle of tha current shell, attached ta tha specified
\fItty\fP\&.  In tha freshly smoked up shell, tha \fBPID\fP, \fBPPID\fP n' \fBTTY\fP special
parametas is chizzled appropriately\&.  \fB$!\fP is set ta zero up in tha new
shell, n' ta tha freshly smoked up shell\&z PID up in tha original gangsta shell\&.
.RS
.PP
Da return statuz of tha builtin is zero up in both shells if successful,
and non\-zero on error\&.
.PP
Da target of \fBclone\fP should be a unused terminal, like fuckin a unused virtual
console or a virtual terminal pimped by
.PP
xterm \-e sh \-c \&'trap : INT QUIT TSTP; tty; while :; do chill 100000000; done'
.PP
Some lyrics of explanation is warranted bout dis long xterm command
line: when bustin clone on a pseudo\-terminal, some other session
("session" meant as a unix session group, or SID) be already owning
the terminal\& yo. Hence tha cloned zsh cannot acquire tha pseudo\-terminal
as a cold-ass lil controllin tty\&. That means two thangs:
.PP
the thang control signals will git all up in tha sh\-started\-by\-xterm process
      crew (that\&z why our phat asses disable INT QUIT n' TSTP wit trap; otherwise
      tha while loop could git suspended or capped)
.PP
the cloned shell gonna git thang control disabled, n' tha thang
      control keys (control\-C, control\-\e n' control\-Z) aint gonna work\&.
.PP
This do not apply when clonin ta a \fBunused\fP vc\&.
.PP
Clonin ta a used (and unprepared) terminal will result up in two
processes readin simultaneously from tha same terminal, with
input bytes goin randomly ta either process\&.
.PP
\fBclone\fP is mostly useful as a gangbangin' finger-lickin' dirty-ass shell built\-in replacement for
openvt\&.
.RE
.SH "THE ZSH/COMPCTL MODULE"
.\" Yodl file: Zsh/mod_compctl.yo

Da \fBzsh/compctl\fP module make available two builtin commands\&. \fBcompctl\fP,
is tha old, deprecated way ta control completions fo' ZLE\&.  See
\fIzshcompctl\fP(1)\&.
Da other builtin command, \fBcompcall\fP can be used up in user\-defined
completion widgets, see
\fIzshcompwid\fP(1)\&.
.SH "THE ZSH/COMPLETE MODULE"
.\" Yodl file: Zsh/mod_complete.yo

Da \fBzsh/complete\fP module make available nuff muthafuckin builtin commandz which
can be used up in user\-defined completion widgets, see
\fIzshcompwid\fP(1)\&.
.SH "THE ZSH/COMPLIST MODULE"
.\" Yodl file: Zsh/mod_complist.yo

Da \fBzsh/complist\fP module offers three extensions ta completion listings:
the mobilitizzle ta highlight matches up in such a list, tha mobilitizzle to
scroll all up in long lists n' a gangbangin' finger-lickin' different steez of menu completion\&.
.PP
.SS "Colored completion listings"
Whenever one of tha parametas \fBZLS_COLORS\fP or \fBZLS_COLOURS\fP is set 
and tha \fBzsh/complist\fP module is loaded or linked tha fuck into tha shell,
completion lists is ghon be colored\&.  Note, however, dat \fBcomplist\fP will
not automatically be loaded if it aint linked in:  on systems with
dynamic loading, `\fBzmodload zsh/complist\fP\&' is required\&.
.PP
Da parametas \fBZLS_COLORS\fP n' \fBZLS_COLOURS\fP describe how tha fuck matches
are highlighted\&.  To turn on highlightin a empty value suffices, in
which case all tha default joints given below is ghon be used\&.  Da format of
the value of these parametas is tha same ol' dirty as used by tha GNU version of the
\fBls\fP command: a cold-ass lil colon\-separated list of justificationz of tha form
`\fIname\fP=\fIvalue\fP\&'\&.  Da \fIname\fP may be one of tha followin strings,
most of which specify file types fo' which tha \fIvalue\fP is ghon be used\&.
Da strings n' they default joints are:
.PP
.PD 0
.TP
.PD
\fBno 0\fP
for aiiight text (i\&.e\&. when displayin suttin' other than a matched file)
.TP
\fBfi 0\fP
for regular files
.TP
\fBdi 32\fP
for directories
.TP
\fBln 36\fP
for symbolic links\&.  If dis has tha special value \fBtarget\fP,
symbolic links is dereferenced n' tha target file used to
determine tha display format\&.
.TP
\fBpi 31\fP
for named pipes (FIFOs)
.TP
\fBso 33\fP
for sockets
.TP
\fBbd 44;37\fP
for block devices
.TP
\fBcd 44;37\fP
for characta devices
.TP
\fBor\fP \fInone\fP
for a symlink ta nonexistent file (default is tha value defined fo' \fBln\fP)
.TP
\fBmi\fP \fInone\fP
for a non\-existent file (default is tha value defined fo' \fBfi\fP); dis code
is currently not used
.TP
\fBsu 37;41\fP
for filez wit setuid bit set
.TP
\fBsg 30;43\fP
for filez wit setgid bit set
.TP
\fBtw 30;42\fP
for ghetto writable directories wit sticky bit set
.TP
\fBow 34;43\fP
for ghetto writable directories without sticky bit set
.TP
\fBsa\fP \fInone\fP
for filez wit a associated suffix alias; dis is only tested
afta specific suffixes, as busted lyrics bout below
.TP
\fBst 37;44\fP
for directories wit sticky bit set but not ghetto writable
.TP
\fBex 35\fP
for executable files
.TP
\fBlc \ee[\fP
for tha left code (see below)
.TP
\fBrc m\fP
for tha right code
.TP
\fBtc 0\fP
for tha characta indicatin tha file type  printed afta filenames if
the \fBLIST_TYPES\fP option is set
.TP
\fBsp 0\fP
for tha spaces printed afta matches ta align tha next column
.TP
\fBec\fP \fInone\fP
for tha end code
.PP
Apart from these strings, tha \fIname\fP may also be a asterisk
(`\fB*\fP\&') followed by any string\&. Da \fIvalue\fP given fo' such a
strin is ghon be used fo' all filez whose name endz wit tha string\&.
Da \fIname\fP may also be a equals sign (`\fB=\fP\&') followed by a
pattern; tha \fBEXTENDED_GLOB\fP option is ghon be turned on fo' evaluation
of tha pattern\&.  Da \fIvalue\fP given fo' dis pattern is ghon be used fo' all
matches (not just filenames) whose display strang is matched by
the pattern\&.  Definitions fo' tha form wit tha leadin equal sign take
precedence over tha joints defined fo' file types, which up in turn take
precedence over tha form wit tha leadin asterisk (file extensions)\&.
.PP
Da leading\-equals form also allows different partz of tha displayed
strings ta be colored differently\&.  For this, tha pattern has ta use the
`\fB(#b)\fP\&' globbin flag n' pairz of parentheses surroundin the
partz of tha strings dat is ta be colored differently\&.  In dis case 
the \fIvalue\fP may consist of mo' than one color code separated by
equal signs\&.  Da first code is ghon be used fo' all parts fo' which no
explicit code is specified n' tha followin codes is ghon be used for
the parts matched by tha sub\-patterns up in parentheses\&.  For example,
the justification `\fB=(#b)(?)*(?)=0=3=7\fP\&' is ghon be used fo' all
matches which is at least two charactas long n' will use
the code `\fB3\fP\&' fo' tha straight-up original gangsta character, `\fB7\fP' fo' tha last
characta n' `\fB0\fP\&' fo' tha rest\&.
.PP
All three formz of \fIname\fP may be preceded by a pattern in
parentheses\&.  If dis is given, tha \fIvalue\fP is ghon be used
only fo' matches up in crews whose names is matched by tha pattern
given up in tha parentheses\&.  For example, `\fB(g*)m*=43\fP\&' highlights all
matches beginnin wit `\fBm\fP\&' up in crews whose names  begin with
`\fBg\fP\&' rockin tha color code `\fB43\fP'\&.  In case of tha `\fBlc\fP',
`\fBrc\fP\&', n' `\fBec\fP' codes, tha crew pattern is ignored\&.
.PP
Note also dat all patterns is tried up in tha order up in which they
appear up in tha parameta value until tha straight-up original gangsta one matches which is
then used\&.
.PP
When printin a match, tha code prints tha value of \fBlc\fP, tha value
for tha file\-type or tha last matchin justification wit a `\fB*\fP\&',
the value of \fBrc\fP, tha strang ta display fo' tha match itself, and
then tha value of \fBec\fP if dat is defined or tha jointz of \fBlc\fP,
\fBno\fP, n' \fBrc\fP if \fBec\fP aint defined\&.
.PP
Da default joints is ISO 6429 (ANSI) compliant n' can be used on
vt100 compatible terminals like fuckin \fBxterm\fPs\&.  On monochrome terminals
the default joints gonna git no visible effect\&.  Da \fBcolors\fP
function from tha contribution can be used ta git associatizzle arrays
containin tha codes fo' ANSI terminals (see
the section `Other Functions\&' up in \fIzshcontrib\fP(1))\&.  For example, afta loadin \fBcolors\fP, one could use
`\fB$colors[red]\fP\&' ta git tha code fo' foreground color red and
`\fB$colors[bg\-green]\fP\&' fo' tha code fo' background color green\&.
.PP
If tha completion system invoked by compinit is used, these
parametas should not be set directly cuz tha system controls dem 
itself\&.  Instead, tha \fBlist\-colors\fP steez should be used (see
the section `Completion System Configuration\&' up in \fIzshcompsys\fP(1))\&.
.PP
.SS "Scrollin up in completion listings"
To enable scrollin all up in a cold-ass lil completion list, tha \fBLISTPROMPT\fP
parameta must be set\&.  Its value is ghon be used as tha prompt; if it
is tha empty string, a thugged-out default prompt is ghon be used\&.  Da value may
contain escapez of tha form `\fB%x\fP\&'\&.  It supports tha escapes
`\fB%B\fP\&', `\fB%b\fP', `\fB%S\fP', `\fB%s\fP', `\fB%U\fP', `\fB%u\fP', `\fB%F\fP',
`\fB%f\fP\&', `\fB%K\fP', `\fB%k\fP' and
`\fB%{\&.\&.\&.%}\fP\&' used also up in shell prompts as well as three pairs of
additionizzle sequences: a `\fB%l\fP\&' or `\fB%L\fP' is replaced by tha number
of tha last line shown n' tha total number of lines up in tha form
`\fInumber\fP\fB/\fP\fItotal\fP\&'; a `\fB%m\fP' or `\fB%M\fP' is replaced with
the number of tha last match shown n' tha total number of matches; n' 
`\fB%p\fP\&' or `\fB%P\fP' is replaced wit `\fBTop\fP', `\fBBottom\fP' or the
posizzle of tha straight-up original gangsta line shown up in cement of tha total number of
lines, respectively\&.  In each of these cases tha form wit tha uppercase
letta is ghon be replaced wit a strang of fixed width, padded ta the
right wit spaces, while tha lowercase form aint gonna be padded\&.
.PP
If tha parameta \fBLISTPROMPT\fP is set, tha completion code aint gonna ask if
the list should be shown\&.  Instead it immediately starts displayin the
list, stoppin afta tha straight-up original gangsta screenful, showin tha prompt all up in tha bottom,
waitin fo' a keypress afta temporarily switchin ta tha \fBlistscroll\fP
keymap\&.  Some of tha zle functions gotz a special meanin while scrolling
lists:
.PP
.PD 0
.TP
.PD
\fBsend\-break\fP
stops listin discardin tha key pressed
.TP
.PD 0
\fBaccept\-line\fP, \fBdown\-history\fP, \fBdown\-line\-or\-history\fP
.TP
.PD
\fBdown\-line\-or\-search\fP, \fBvi\-down\-line\-or\-history\fP
scrolls forward one line
.TP
.PD 0
\fBcomplete\-word\fP, \fBmenu\-complete\fP, \fBexpand\-or\-complete\fP
.TP
.PD
\fBexpand\-or\-complete\-prefix\fP, \fBmenu\-complete\-or\-expand\fP
scrolls forward one screenful
.TP
\fBaccept\-search\fP
stop listin but take no other action
.PP
Every other characta stops listin n' immediately processes tha key
as usual\&.  Any key dat aint bound up in tha \fBlistscroll\fP keymap or
that is bound ta \fBundefined\-key\fP is looked up in tha keymap
currently selected\&.
.PP
As fo' tha \fBZLS_COLORS\fP n' \fBZLS_COLOURS\fP parameters,
\fBLISTPROMPT\fP should not be set directly when rockin tha shell
function based completion system\&.  Instead, tha \fBlist\-prompt\fP style
should be used\&.
.PP
.SS "Menu selection"
Da \fBzsh/complist\fP module also offers a alternatizzle steez of selecting
matches from a list, called menu selection, which can be used if the
shell is set up ta return ta tha last prompt afta showin a
completion list (see tha \fBALWAYS_LAST_PROMPT\fP option in
\fIzshoptions\fP(1))\&.
.PP
Menu selection can be invoked directly by
the widget \fBmenu\-select\fP defined by dis module\&.  This be a standard
ZLE widget dat can be bound ta a key up in tha usual way as busted lyrics about
in \fIzshzle\fP(1)\&.
.PP
Alternatively,
the parameta \fBMENUSELECT\fP can be set ta a integer, which gives the
minimum number of matches dat must be present before menu selection is
automatically turned on\&.  This second method requires dat menu completion
be started, either directly from a widget like fuckin \fBmenu\-complete\fP, or due
to one of tha options \fBMENU_COMPLETE\fP or \fBAUTO_MENU\fP bein set\&.  If
\fBMENUSELECT\fP is set yo, but is 0, 1 or empty, menu selection will always be
started durin a ambiguous menu completion\&.
.PP
When rockin tha completion system based on shell functions, the
\fBMENUSELECT\fP parameta should not be used (like tha \fBZLS_COLORS\fP
and \fBZLS_COLOURS\fP parametas busted lyrics bout above)\&.  Instead, tha \fBmenu\fP 
style should be used wit tha \fBselect=\fP\fI\&.\&.\&.\fP keyword\&.
.PP
Afta menu selection is started, tha matches is ghon be listed\&. If there
are mo' matches than fit on tha screen, only tha straight-up original gangsta screenful is
shown\&.  The
matches ta bang tha fuck into tha command line can be selected from this
list\&.  In tha list one match is highlighted rockin tha value fo' \fBma\fP
from tha \fBZLS_COLORS\fP or \fBZLS_COLOURS\fP parameter\&.  Da default
value fo' dis is `\fB7\fP\&' which forces tha selected match ta be
highlighted rockin standout mode on a vt100\-compatible terminal\&.  If
neither \fBZLS_COLORS\fP nor \fBZLS_COLOURS\fP is set, tha same terminal
control sequence as fo' tha `\fB%S\fP\&' escape up in prompts is used\&.
.PP
If there be mo' matches than fit on tha screen n' tha parameter
\fBMENUPROMPT\fP is set, its value is ghon be shown below tha matches\&.  It
supports tha same ol' dirty escape sequences as \fBLISTPROMPT\fP yo, but tha number
of tha match or line shown is ghon be dat of tha one where tha mark is
placed\&.  If its value is tha empty string, a thugged-out default prompt will be
used\&.
.PP
Da \fBMENUSCROLL\fP parameta can be used ta specify how tha fuck tha list is
scrolled\&.  If tha parameta is unset, dis is done line by line, if it
is set ta `\fB0\fP\&' (zero), tha list will scroll half tha number of
linez of tha screen\&.  If tha value is positive, it gives tha number of
lines ta scroll n' if it is negative, tha list is ghon be scrolled
the number of linez of tha screen minus tha (absolute) value\&.
.PP
As fo' tha \fBZLS_COLORS\fP, \fBZLS_COLOURS\fP n' \fBLISTPROMPT\fP
parameters, neither \fBMENUPROMPT\fP nor \fBMENUSCROLL\fP should be
set directly when rockin tha shell function based completion
system\&.  Instead, tha \fBselect\-prompt\fP n' \fBselect\-scroll\fP styles
should be used\&.
.PP
Da completion code sometimes decides not ta show all of tha matches
in tha list\&.  These hidden matches is either matches fo' which the
completion function which added dem explicitly axed dat they
not step tha fuck up in tha list (usin tha \fB\-n\fP option of tha \fBcompadd\fP
builtin command) or they is matches which duplicate a strang already
in tha list (because they differ only up in thangs like prefixes or
suffixes dat is not displayed)\&.  In tha list used fo' menu selection,
however, even these matches is shown so dat it is possible ta select
them\&.  To highlight such matches tha \fBhi\fP n' \fBdu\fP capabilitizzles in
the \fBZLS_COLORS\fP n' \fBZLS_COLOURS\fP parametas is supported for
hidden matchez of tha straight-up original gangsta n' second kind, respectively\&.
.PP
Selectin matches is done by movin tha mark round rockin tha zle movement
functions\&.  When not all matches can be shown on tha screen all up in tha same 
time, tha list will scroll up n' down when crossin tha top or
bottom line\&.  Da followin zle functions have special meanin during
menu selection\&.  Note dat tha followin always
perform tha same task within tha menu selection map n' cannot be
replaced by user defined widgets, nor can tha set of functions
be extended:
.PP
.PD 0
.TP
.PD
\fBaccept\-line\fP, \fBaccept\-search\fP
accept tha current match n' leave menu selection (but do
not cause tha command line ta be accepted)
.TP
\fBsend\-break\fP
leaves menu selection n' restores tha previous contentz of the
command line
.TP
\fBredisplay\fP, \fBclear\-screen\fP
execute they aiiight function without leavin menu selection
.TP
\fBaccept\-and\-hold\fP, \fBaccept\-and\-menu\-complete\fP
accept tha currently banged match n' continue selection allowin ta 
select tha next match ta bang tha fuck into tha line
.TP
\fBaccept\-and\-infer\-next\-history\fP
accepts tha current match n' then tries completion with
menu selection again;  up in tha case of filez dis allows one ta select
a directory n' immediately attempt ta complete filez up in it;  if there 
are no matches, a message is shown n' one can use \fBundo\fP ta go back 
to completion on tha previous level, every last muthafuckin other key leaves menu
selection (includin tha other zle functions which is otherwise
special durin menu selection)
.TP
\fBundo\fP
removes matches banged durin tha menu selection by one of tha three 
functions before
.TP
.PD 0
\fBdown\-history\fP, \fBdown\-line\-or\-history\fP
.TP
.PD
\fBvi\-down\-line\-or\-history\fP,  \fBdown\-line\-or\-search\fP
moves tha mark one line down
.TP
.PD 0
\fBup\-history\fP, \fBup\-line\-or\-history\fP
.TP
.PD
\fBvi\-up\-line\-or\-history\fP, \fBup\-line\-or\-search\fP
moves tha mark one line up
.TP
\fBforward\-char\fP, \fBvi\-forward\-char\fP
moves tha mark one column right
.TP
\fBbackward\-char\fP, \fBvi\-backward\-char\fP
moves tha mark one column left
.TP
.PD 0
\fBforward\-word\fP, \fBvi\-forward\-word\fP
.TP
.PD
\fBvi\-forward\-word\-end\fP, \fBemacs\-forward\-word\fP
moves tha mark one screenful down
.TP
\fBbackward\-word\fP, \fBvi\-backward\-word\fP, \fBemacs\-backward\-word\fP
moves tha mark one screenful up
.TP
\fBvi\-forward\-blank\-word\fP, \fBvi\-forward\-blank\-word\-end\fP
moves tha mark ta tha straight-up original gangsta line of tha next crew of matches
.TP
\fBvi\-backward\-blank\-word\fP
moves tha mark ta tha last line of tha previous crew of matches
.TP
\fBbeginning\-of\-history\fP
moves tha mark ta tha straight-up original gangsta line
.TP
\fBend\-of\-history\fP
moves tha mark ta tha last line
.TP
.PD 0
\fBbeginning\-of\-buffer\-or\-history\fP, \fBbeginning\-of\-line\fP
.TP
.PD
\fBbeginning\-of\-line\-hist\fP, \fBvi\-beginning\-of\-line\fP
moves tha mark ta tha leftmost column
.TP
.PD 0
\fBend\-of\-buffer\-or\-history\fP, \fBend\-of\-line\fP
.TP
.PD
\fBend\-of\-line\-hist\fP, \fBvi\-end\-of\-line\fP
moves tha mark ta tha rightmost column
.TP
.PD 0
\fBcomplete\-word\fP, \fBmenu\-complete\fP, \fBexpand\-or\-complete\fP
.TP
.PD
\fBexpand\-or\-complete\-prefix\fP, \fBmenu\-expand\-or\-complete\fP
moves tha mark ta tha next match
.TP
\fBreverse\-menu\-complete\fP
moves tha mark ta tha previous match
.TP
\fBvi\-insert\fP
this togglez between aiiight n' interactizzle mode; up in interactizzle mode
the keys bound ta \fBself\-insert\fP n' \fBself\-insert\-unmeta\fP insert
into tha command line as up in aiiight editin mode but without leaving
menu selection; afta each characta completion is tried again n' again n' again n' the
list chizzlez ta contain only tha freshly smoked up matches; tha completion widgets
make tha longest unambiguous strang be banged up in tha command line
and \fBundo\fP n' \fBbackward\-delete\-char\fP go back ta tha previous set
of matches
.TP
.PD 0
\fBhistory\-incremental\-search\-forward\fP
.TP
.PD
\fBhistory\-incremental\-search\-backward\fP
this starts incremenstrual searches up in tha list of completions displayed;
in dis mode, \fBaccept\-line\fP only leaves incremenstrual search, going
back ta tha aiiight menu selection mode
.PP
All movement functions wrap round all up in tha edges; any other zle function not
listed leaves menu selection n' executes dat function\&.  It be possible to
make widgets up in tha above list do tha same by rockin tha form of tha widget
with a `\fB\&.\fP\&' up in front\&.  For example, tha widget `\fB\&.accept\-line\fP' has
the effect of leavin menu selection n' acceptin tha entire command line\&.
.PP
Durin dis selection tha widget uses tha keymap \fBmenuselect\fP\&.  Any
key dat aint defined up in dis keymap or dat is bound to
\fBundefined\-key\fP is looked up in tha keymap currently selected\&.  This
is used ta ensure dat da most thugged-out blingin keys used durin selection
(namely tha cursor keys, return, n' TAB) have sensible defaults\&.  However,
keys up in tha \fBmenuselect\fP keymap can be modified directly rockin the
\fBbindkey\fP builtin command (see
\fIzshmodules\fP(1))\&. For example, ta make tha return key leave menu selection without
acceptin tha match currently selected one could call
.PP
.RS
.nf
\fBbindkey \-M menuselect \&'^M' send\-break\fP
.fi
.RE
.PP
afta loadin tha \fBzsh/complist\fP module\&.
.SH "THE ZSH/COMPUTIL MODULE"
.\" Yodl file: Zsh/mod_computil.yo

Da \fBzsh/computil\fP module addz nuff muthafuckin builtin commandz dat is used by
some of tha completion functions up in tha completion system based on shell
functions (see 
\fIzshcompsys\fP(1)
)\&.  Except fo' \fBcompquote\fP these builtin commandz is hella
specialised n' thus not straight-up bangin-ass when freestylin yo' own
completion functions\&.  In summary, these builtin commandz are:
.PP
.PD 0
.TP
.PD
\fBcomparguments\fP
This is used by tha \fB_arguments\fP function ta do tha argument and
command line parsing\&.  Like \fBcompdescribe\fP it has a option \fB\-i\fP ta 
do tha parsin n' initialize some internal state n' various options
to access tha state shiznit ta decizzle what tha fuck should be completed\&.
.TP
\fBcompdescribe\fP
This is used by tha \fB_describe\fP function ta build tha displays for
the matches n' ta git tha strings ta add as matches wit their
options\&.  On tha straight-up original gangsta call one of tha options \fB\-i\fP or \fB\-I\fP should be
supplied as tha straight-up original gangsta argument\&.  In tha straight-up original gangsta case, display strings without
the descriptions is ghon be generated, up in tha second case, tha strang used to
separate tha matches from they descriptions must be given as the
second argument n' tha descriptions (if any) is ghon be shown\&.  All other 
arguments is like tha definizzle arguments ta \fB_describe\fP itself\&.
.RS
.PP
Once \fBcompdescribe\fP has been called wit either tha \fB\-i\fP or the
\fB\-I\fP option, it can be repeatedly called wit tha \fB\-g\fP option and
the namez of four parametas as its arguments\&.  This will step through
the different setz of matches n' store tha value of \fBcompstate[list]\fP
in tha straight-up original gangsta scalar, tha options fo' \fBcompadd\fP up in tha second array,
the matches up in tha third array, n' tha strings ta be displayed up in the
completion listin up in tha fourth array\&.  Da arrays may then be directly
given ta \fBcompadd\fP ta regista tha matches wit tha completion code\&.
.RE
.TP
\fBcompfiles\fP
Used by tha \fB_path_files\fP function ta optimize complex recursive
filename generation (globbing)\&.  It do three thangs\&.  With the
\fB\-p\fP n' \fB\-P\fP options it buildz tha glob patterns ta use,
includin tha paths already handled n' tryin ta optimize the
patterns wit respect ta tha prefix n' suffix from tha line n' the
match justification currently used\&.  Da \fB\-i\fP option do the
directory tests fo' tha \fBignore\-parents\fP steez n' tha \fB\-r\fP option 
tests if a cold-ass lil component fo' a shitload of tha matches is equal ta tha string
on tha line n' removes all other matches if dat is true\&.
.TP
\fBcompgroups\fP
Used by tha \fB_tags\fP function ta implement tha internalz of the
\fBgroup\-order\fP style\&.  This only takes its arguments as names of
completion crews n' creates tha crews fo' it (all six types: sorted 
and unsorted, both without removin duplicates, wit removin all
duplicates n' wit removin consecutizzle duplicates)\&.
.TP
\fBcompquote\fP [ \fB\-p\fP ] \fInames\fP \&.\&.\&.
There may be reasons ta write completion functions dat gotta add
the matches rockin tha \fB\-Q\fP option ta \fBcompadd\fP n' big-ass up quoting
themselves\&.  Instead of interpretin tha straight-up original gangsta characta of the
\fBall_quotes\fP key of tha \fBcompstate\fP special association n' using
the \fBq\fP flag fo' parameta expansions, one can use dis builtin
command\&.  Da arguments is tha namez of scalar or array parameters
and tha jointz of these parametas is quoted as needed fo' the
innermost quotin level\&.  If tha \fB\-p\fP option is given, quotin is
done as if there is some prefix before tha jointz of tha parameters,
so dat a leadin equal sign aint gonna be quoted\&.
.RS
.PP
Da return status is non\-zero up in case of a error n' zero otherwise\&.
.RE
.TP
.PD 0
\fBcomptags\fP
.TP
.PD
\fBcomptry\fP
These implement tha internalz of tha tags mechanism\&.
.TP
\fBcompvalues\fP
Like \fBcomparguments\fP yo, but fo' tha \fB_values\fP function\&.
.SH "THE ZSH/CURSES MODULE"
.\" Yodl file: Zsh/mod_curses.yo

Da \fBzsh/curses\fP module make available one builtin command and
various parameters\&.
.PP
.SS "Builtin"
.PP
.PD 0
.TP
.PD 0
\fBzcurses\fP \fBinit\fP
.TP
.PD 0
\fBzcurses\fP \fBend\fP
.TP
.PD 0
\fBzcurses\fP \fBaddwin\fP \fItargetwin\fP \fInlines\fP \fIncols\fP \fIbegin_y\fP \fIbegin_x\fP [ \fIparentwin\fP ] 
.TP
.PD 0
\fBzcurses\fP \fBdelwin\fP \fItargetwin\fP 
.TP
.PD 0
\fBzcurses\fP \fBrefresh\fP [ \fItargetwin\fP \&.\&.\&. ] 
.TP
.PD 0
\fBzcurses\fP \fBtouch\fP \fItargetwin\fP \&.\&.\&.
.TP
.PD 0
\fBzcurses\fP \fBmove\fP \fItargetwin\fP \fInew_y\fP \fInew_x\fP 
.TP
.PD 0
\fBzcurses\fP \fBclear\fP \fItargetwin\fP [ \fBredraw\fP | \fBeol\fP | \fBbot\fP ]
.TP
.PD 0
\fBzcurses\fP \fBposition\fP \fItargetwin\fP \fIarray\fP
.TP
.PD 0
\fBzcurses\fP \fBchar\fP \fItargetwin\fP \fIcharacter\fP 
.TP
.PD 0
\fBzcurses\fP \fBstring\fP \fItargetwin\fP \fIstring\fP 
.TP
.PD 0
\fBzcurses\fP \fBborder\fP \fItargetwin\fP \fIborder\fP 
.TP
.PD 0
\fBzcurses\fP \fBattr\fP \fItargetwin\fP [ \fI{+/\-}attribute\fP | \fIfg_col\fP\fB/\fP\fIbg_col\fP ] [\&.\&.\&.]
.TP
.PD 0
\fBzcurses\fP \fBbg\fP \fItargetwin\fP [ \fI{+/\-}attribute\fP | \fIfg_col\fP\fB/\fP\fIbg_col\fP | \fB@\fP\fIchar\fP ] [\&.\&.\&.]
.TP
.PD 0
\fBzcurses\fP \fBscroll\fP \fItargetwin\fP [ \fBon\fP | \fBoff\fP | {+/\-}\fIlines\fP ]
.TP
.PD 0
\fBzcurses\fP \fBinput\fP \fItargetwin\fP [ \fIparam\fP [ \fIkparam\fP [ \fImparam\fP ] ] ]
.TP
.PD 0
\fBzcurses\fP \fBmouse\fP [ \fBdelay\fP \fInum\fP | {+/\-}\fBmotion\fP ]
.TP
.PD 0
\fBzcurses\fP \fBtimeout\fP \fItargetwin\fP \fIintval\fP
.TP
.PD
\fBzcurses\fP \fBquerychar\fP \fItargetwin\fP [ \fIparam\fP ]
Manipulate curses windows\&.  All usez of dis command should be
bracketed by `\fBzcurses init\fP\&' ta initialise use of curses, and
`\fBzcurses end\fP\&' ta end it; omittin `\fBzcurses end\fP' can cause
the terminal ta be up in a unwanted state\&.
.RS
.PP
Da subcommand \fBaddwin\fP creates a window wit \fInlines\fP lines and
\fIncols\fP columns\&.  Its upper left corner is ghon be placed at row
\fIbegin_y\fP n' column
\fIbegin_x\fP of tha screen\&.  \fItargetwin\fP be a strang n' refers
to tha name of a window dat aint currently assigned\&.  Note
in particular tha curses convention dat vertical joints appear
before horizontal joints\&.
.PP
If \fBaddwin\fP is given a existin window as tha final argument, tha new
window is pimped as a subwindow of \fIparentwin\fP\&.  This differs from an
ordinary freshly smoked up window up in dat tha memory of tha window contents is shared
with tha parent\&z memory\&.  Subwindows must be deleted before they parent\&.
Note dat tha coordinatez of subwindows is relatizzle ta tha screen, not
the parent, as wit other windows\&.
.PP
Use tha subcommand \fBdelwin\fP ta delete a window pimped with
\fBaddwin\fP\&.  Note dat \fBend\fP do \fInot\fP implicitly delete windows,
and dat \fBdelwin\fP do not erase tha screen image of tha window\&.
.PP
Da window correspondin ta tha full visible screen is called
\fBstdscr\fP; it always exists afta `\fBzcurses init\fP\&' n' cannot
be delete wit \fBdelwin\fP\&.
.PP
Da subcommand \fBrefresh\fP will refresh window \fItargetwin\fP; dis is
necessary ta make any pendin chizzlez (like fuckin charactas you have
prepared fo' output wit \fBchar\fP) visible on tha screen\&.  \fBrefresh\fP
without a argument causes tha screen ta be cleared n' redrawn\&.
If multiple windows is given, tha screen is updated once all up in tha end\&.
.PP
Da subcommand \fBtouch\fP marks tha \fItargetwin\fPs listed as chizzled\&.
This is necessary before \fBrefresh\fPin windows if a window that
was up in front of another window (which may be \fBstdscr\fP) is deleted\&.
.PP
Da subcommand \fBmove\fP moves tha cursor posizzle up in \fItargetwin\fP to
new coordinates \fInew_y\fP n' \fInew_x\fP\&.  Note dat tha 
subcommand \fBstring\fP (but not tha subcommand \fBchar\fP) advances the
cursor posizzle over tha charactas added\&.
.PP
Da subcommand \fBclear\fP erases tha contentz of \fItargetwin\fP\&.  One
(and no mo' than one) of three options may be specified\&.  With the
option \fBredraw\fP, up in addizzle tha next \fBrefresh\fP of \fItargetwin\fP
will cause tha screen ta be cleared n' repainted\&.  With tha option
\fBeol\fP, \fItargetwin\fP is only cleared ta tha end of tha current cursor
line\&.  With tha option
\fBbot\fP, \fItargetwin\fP is cleared ta tha end of tha window, i\&.e
everythang ta tha right n' below tha cursor is cleared\&.
.PP
Da subcommand \fBposition\fP writes various positions associated with
\fItargetwin\fP tha fuck into tha array named \fIarray\fP\&.
These are, up in order:
.PD 0
.TP
\-
Da y n' x coordinatez of tha cursor relatizzle ta tha top left
of \fItargetwin\fP
.TP
\-
Da y n' x coordinatez of tha top left of \fItargetwin\fP on the
screen
.TP
\-
Da size of \fItargetwin\fP up in y n' x dimensions\&.
.PD
.PP
Outputtin charactas n' strings is  bigged up  by \fBchar\fP n' \fBstring\fP
respectively\&.
.PP
To draw a funky-ass border round window \fItargetwin\fP, use \fBborder\fP\&.  Note
that tha border aint subsequently handled specially:  up in other lyrics,
the border is simply a set of charactas output all up in tha edge of the
window\&.  Hence it can be overwritten, can scroll off tha window, etc\&.
.PP
Da subcommand \fBattr\fP will set \fItargetwin\fP\&z attributes or
foreground/background color pair fo' any successive characta output\&.
Each \fIattribute\fP given on tha line may be prepended by a \fB+\fP ta set
or a \fB\-\fP ta unset dat attribute; \fB+\fP be assumed if absent\&.  The
attributes supported is \fBblink\fP, \fBbold\fP, \fBdim\fP, \fBreverse\fP,
\fBstandout\fP, n' \fBunderline\fP\&.
.PP
Each \fIfg_col\fP\fB/\fP\fIbg_col\fP attribute (to be read as
`\fIfg_col\fP on \fIbg_col\fP\&') sets tha foreground n' background color
for characta output\&.  Da color \fBdefault\fP is sometimes available
(in particular if tha library is ncurses), specifyin tha foreground
or background color wit which tha terminal started\&.  Da color pair
\fBdefault/default\fP be always available\&.
.PP
\fBbg\fP overrides tha color n' other attributez of all charactas up in the
window\&.  Its usual use is ta set tha background initially yo, but it will
overwrite tha attributez of any charactas all up in tha time when it is called\&.
In addizzle ta tha arguments allowed wit \fBattr\fP, a argument \fB@\fP\fIchar\fP
specifies a cold-ass lil characta ta be shown up in otherwise blank areaz of tha window\&.
Owin ta limitationz of curses dis cannot be a multibyte character
(use of ASCII charactas only is recommended)\&.  As tha specified set
of attributes override tha existin background, turnin attributes
off up in tha arguments aint useful, though dis do not cause a error\&.
.PP
Da subcommand \fBscroll\fP can be used wit \fBon\fP or \fBoff\fP ta enabled
or disable scrollin of a window when tha cursor would otherwise move
below tha window cuz of typin or output\&.  It can also be used wit a
positizzle or wack integer ta scroll tha window up or down tha given
number of lines without changin tha current cursor posizzle (which
therefore appears ta move up in tha opposite direction relatizzle ta the
window)\&.  In tha second case, if scrollin is \fBoff\fP it is temporarily
turned \fBon\fP ta allow tha window ta be scrolled\&.
.PP
Da subcommand \fBinput\fP readz a single characta from tha window
without echoin it back\&.  If \fIparam\fP is supplied tha characta is
assigned ta tha parameta \fIparam\fP, else it be assigned ta the
parameta \fIREPLY\fP\&.
.PP
If both \fIparam\fP n' \fIkparam\fP is supplied, tha key is read in
`keypad\&' mode\&.  In dis mode special keys like fuckin function keys and
arrow keys return tha name of tha key up in tha parameta \fIkparam\fP\&.  The
key names is tha macros defined up in tha \fBcurses\&.h\fP or \fBncurses\&.h\fP
with tha prefix `\fBKEY_\fP\&' removed; peep also tha description of the
parameta \fBzcurses_keycodes\fP below\&.  Other keys cause a value ta be
set up in \fIparam\fP as before\&.  On a successful return only one of
\fIparam\fP or \fIkparam\fP gotz nuff a non\-empty string; tha other is set
to a empty string\&.
.PP
If \fImparam\fP be also supplied, \fBinput\fP attempts ta handle mouse
input\&.  This is only available wit tha ncurses library; mouse handling
can be detected by checkin fo' tha exit statuz of `\fBzcurses mouse\fP\&' with
no arguments\&.  If a mouse
button is clicked (or double\- or triple\-clicked, or pressed or busted out with
a configurable delay from bein clicked) then \fBkparam\fP is set ta tha string
\fBMOUSE\fP, n' \fImparam\fP is set ta a array consistin of the
followin elements:
.PD 0
.TP
\-
An identifier ta discriminizzle different input devices; this
is only rarely useful\&.
.TP
\-
Da x, y n' z coordinatez of tha mouse click relatizzle to
the full screen, as three elements up in dat order (i\&.e\&. tha y coordinate
is, unusually, afta tha x coordinate)\&.  Da z coordinizzle is only
available fo' all dem unusual input devices n' is otherwise set ta zero\&.
.TP
\-
Any events dat occurred as separate items; usually
there is ghon be just one\&.  An event consistz of \fBPRESSED\fP, \fBRELEASED\fP,
\fBCLICKED\fP, \fBDOUBLE_CLICKED\fP or \fBTRIPLE_CLICKED\fP followed
immediately (in tha same element) by tha number of tha button\&.
.TP
\-
If tha shift key was pressed, tha strang \fBSHIFT\fP\&.
.TP
\-
If tha control key was pressed, tha strang \fBCTRL\fP\&.
.TP
\-
If tha alt key was pressed, tha strang \fBALT\fP\&.
.PD
.PP
Not all mouse events may be passed all up in ta tha terminal window;
most terminal emulators handle some mouse events theyselves\&.  Note
that tha ncurses manual implies dat rockin input both wit and
without mouse handlin may cause tha mouse cursor ta step tha fuck up and
disappear\&.
.PP
Da subcommand \fBmouse\fP can be used ta configure tha use of tha mouse\&.
There is no window argument; mouse options is global\&.
`\fBzcurses mouse\fP\&' wit no arguments returns status 0 if mouse handling
is possible, else status 1\&.  Otherwise, tha possible arguments (which
may be combined on tha same command line) is as bigs up\&.
\fBdelay\fP \fInum\fP sets tha maximum delay up in millisecondz between press and
release events ta be considered as a cold-ass lil click; tha value 0 disablez click
resolution, n' tha default is one sixth of a second\&.  \fBmotion\fP proceeded
by a optionizzle `\fB+\fP\&' (the default) or \fB\-\fP turns on or off
reportin of mouse motion up in addizzle ta clicks, presses n' releases,
which is always reported\&.  But fuck dat shiznit yo, tha word on tha street is dat it appears reports fo' mouse
motion is not currently implemented\&.
.PP
Da subcommand \fBtimeout\fP specifies a timeout value fo' input from
\fItargetwin\fP\&.  If \fIintval\fP is negative, `\fBzcurses input\fP\&' waits
indefinitely fo' a cold-ass lil characta ta be typed; dis is tha default\&.  If
\fIintval\fP is zero, `\fBzcurses input\fP\&' returns immediately; if there
is typeahead it is returned, else no input is done n' status 1 is
returned\&.  If \fIintval\fP is positive, `\fBzcurses input\fP\&' waits
\fIintval\fP millisecondz fo' input n' if there is none all up in tha end of
that period returns status 1\&.
.PP
Da subcommand \fBquerychar\fP queries tha characta all up in tha current cursor
position\&.  Da return joints is stored up in tha array named \fIparam\fP if
supplied, else up in tha array \fBreply\fP\&.  Da first value is tha character
(which may be a multibyte characta if tha system supports them); the
second is tha color pair up in tha usual \fIfg_col\fP\fB/\fP\fIbg_col\fP
notation, or \fB0\fP if color aint supported\&.  Any attributes other than
color dat apply ta tha character, as set wit tha subcommand \fBattr\fP,
appear as additionizzle elements\&.
.RE
.PP
.SS "Parameters"
.PP
.PD 0
.TP
.PD
\fBZCURSES_COLORS\fP
Readonly integer\&.  Da maximum number of flavas tha terminal
supports\&.  This value is initialised by tha curses library n' is not
available until tha last time \fBzcurses init\fP is run\&.
.TP
\fBZCURSES_COLOR_PAIRS\fP
Readonly integer\&.  Da maximum number of color pairs
\fIfg_col\fP\fB/\fP\fIbg_col\fP dat may be defined up in `\fBzcurses attr\fP\&'
commands; note dis limit applies ta all color pairs dat have been
used whether or not they is currently active\&.  This value is initialised
by tha curses library n' aint available until tha last time \fBzcurses
init\fP is run\&.
.TP
\fBzcurses_attrs\fP
Readonly array\&.  Da attributes supported by \fBzsh/curses\fP; available
as soon as tha module is loaded\&.
.TP
\fBzcurses_colors\fP
Readonly array\&.  Da flavas supported by \fBzsh/curses\fP; available
as soon as tha module is loaded\&.
.TP
\fBzcurses_keycodes\fP
Readonly array\&.  Da joints dat may be returned up in tha second
parameta supplied ta `\fBzcurses input\fP\&' up in tha order up in which they
are defined internally by curses\&.  Not all function keys
are listed, only \fBF0\fP; curses reserves space fo' \fBF0\fP up ta \fBF63\fP\&.
.TP
\fBzcurses_windows\fP
Readonly array\&.  Da current list of windows, i\&.e\&. all windows that
have been pimped wit `\fBzcurses addwin\fP\&' n' not removed with
`\fBzcurses delwin\fP\&'\&.
.SH "THE ZSH/DATETIME MODULE"
.\" Yodl file: Zsh/mod_datetime.yo

Da \fBzsh/datetime\fP module make available one builtin command:
.PP
.PD 0
.TP
.PD 0
\fBstrftime\fP [ \fB\-s\fP \fIscalar\fP ] \fIformat\fP \fIepochtime\fP 
.TP
.PD
\fBstrftime\fP \fB\-r\fP [ \fB\-q\fP ] [ \fB\-s\fP \fIscalar\fP ] \fIformat\fP \fItimestring\fP 
Output tha date denoted by \fIepochtime\fP up in tha \fIformat\fP
specified\&.
.RS
.PP
With tha option \fB\-r\fP (reverse), use tha format \fIformat\fP ta parse the
input strang \fItimestring\fP n' output tha number of secondz since the
epoch at which tha time occurred\&.  If no timezone is parsed, tha current
timezone is used; other parametas is set ta zero if not present\&.  If
\fItimestring\fP do not match \fIformat\fP tha command returns status 1; it
will additionally print a error message unless tha option \fB\-q\fP (quiet)
is given\&.  If \fItimestring\fP matches \fIformat\fP but not all charactas in
\fItimestring\fP was used, tha conversion succeeds; however, a warnin is
issued unless tha option \fB\-q\fP is given\&.  Da matchin is implemented by
the system function \fBstrptime\fP; peep \fIstrptime\fP(3)\&.  This means that
zsh format extensions is not available, however fo' reverse lookup they
are not required\&.  If tha function aint implemented, tha command returns
status 2 n' (unless \fB\-q\fP is given) prints a message\&.
.PP
If \fB\-s\fP \fIscalar\fP is given, assign tha date strang (or epoch time
in secondz if \fB\-r\fP is given) ta \fIscalar\fP instead of printin it\&.
.RE
.PP
Da \fBzsh/datetime\fP module make available nuff muthafuckin parameters;
all is readonly:
.PP
.PD 0
.TP
.PD
\fBEPOCHREALTIME\fP
A floatin point value representin tha number of secondz since
the epoch\&.  Da notionizzle accuracy is ta nanosecondz if the
\fBclock_gettime\fP call be available n' ta microsecondz otherwise,
but up in practice tha range of double precision floatin point and
shell schedulin latencies may be dope effects\&.
.TP
\fBEPOCHSECONDS\fP
An integer value representin tha number of secondz since the
epoch\&.
.TP
\fBepochtime\fP
An array value containin tha number of secondz since tha epoch
in tha straight-up original gangsta element n' tha remainder of tha time since tha epoch
in nanosecondz up in tha second element\&.  To ensure tha two elements
are consistent tha array should be copied or otherwise referenced
as a single substitution before tha joints is used\&.  Da following
idiom may be used:
.RS
.PP
.RS
.nf
\fBfor secs nsecs up in $epochtime; do
  \&.\&.\&.
done\fP
.fi
.RE
.PP
.RE
.SH "THE ZSH/DELTOCHAR MODULE"
.\" Yodl file: Zsh/mod_deltochar.yo

Da \fBzsh/deltochar\fP module make available two ZLE functions:
.PP
.PD 0
.TP
.PD
\fBdelete\-to\-char\fP
Read a cold-ass lil characta from tha keyboard, and
delete from tha cursor posizzle up ta n' includin tha next
(or, wit repeat count \fIn\fP, tha \fIn\fPth) instizzle of dat character\&.
Negatizzle repeat counts mean delete backwards\&.
.TP
\fBzap\-to\-char\fP
This behaves like \fBdelete\-to\-char\fP, except dat tha final occurrence of
the characta itself aint deleted\&.
.SH "THE ZSH/EXAMPLE MODULE"
.\" Yodl file: Zsh/mod_example.yo

Da \fBzsh/example\fP module make available one builtin command:
.PP
.PD 0
.TP
.PD
\fBexample\fP [ \fB\-flags\fP ] [ \fIargs\fP \&.\&.\&. ]
Displays tha flags n' arguments it is invoked with\&.
.PP
Da purpose of tha module is ta serve as a example of how tha fuck ta write a
module\&.
.SH "THE ZSH/FILES MODULE"
.\" Yodl file: Zsh/mod_files.yo

Da \fBzsh/files\fP module make available some common commandz fo' file
manipulation as builtins; these commandz is probably not needed for
many aiiight thangs but can be useful up in emergency recovery
situations wit constrained resources\&.  Da commandz do not implement
all features now required by relevant standardz committees\&.
.PP
For all commands, a variant beginnin \fBzf_\fP be also available n' loaded
automatically\&.  Usin tha features capabilitizzle of zmodload will let you load
only dem names you want\&.
.PP
Da commandz loaded by default are:
.PP
.PD 0
.TP
.PD
\fBchgrp\fP [ \fB\-hRs\fP ] \fIgroup\fP \fIfilename\fP \&.\&.\&.
Changes crew of filez specified\&.  This is equivalent ta \fBchown\fP with
a \fIuser\-spec\fP argument of `\fB:\fP\fIgroup\fP\&'\&.
.TP
\fBchown\fP [ \fB\-hRs\fP ] \fIuser\-spec\fP \fIfilename\fP \&.\&.\&.
Changes ballershizzle n' crew of filez specified\&.
.RS
.PP
Da \fIuser\-spec\fP can be up in four forms:
.PP
.PD 0
.TP
\fIuser\fP
change balla ta \fIuser\fP; do not chizzle group
.TP
\fIuser\fP\fB::\fP
change balla ta \fIuser\fP; do not chizzle group
.TP
\fIuser\fP\fB:\fP
change balla ta \fIuser\fP; chizzle crew ta \fIuser\fP\&z primary group
.TP
\fIuser\fP\fB:\fP\fIgroup\fP
change balla ta \fIuser\fP; chizzle crew ta \fIgroup\fP
.TP
\fB:\fP\fIgroup\fP
do not chizzle baller; chizzle crew ta \fIgroup\fP
.PD
.PP
In each case, tha `\fB:\fP\&' may instead be a `\fB\&.\fP'\&.  Da rule is that
if there be a `\fB:\fP\&' then tha separator is `\fB:\fP', otherwise
if there be a `\fB\&.\fP\&' then tha separator is `\fB\&.\fP', otherwise
there is no separator\&.
.PP
Each of \fIuser\fP n' \fIgroup\fP may be either a username (or crew name, as
appropriate) or a thugged-out decimal user ID (group ID)\&.  Interpretation as a name
takes precedence, if there be a all\-numeric username (or crew name)\&.
.PP
If tha target be a symbolic link, tha \fB\-h\fP option causes \fBchown\fP ta set
the ballershizzle of tha link instead of its target\&.
.PP
Da \fB\-R\fP option causes \fBchown\fP ta recursively descend tha fuck into directories,
changin tha ballershizzle of all filez up in tha directory after
changin tha ballershizzle of tha directory itself\&.
.PP
Da \fB\-s\fP option be a zsh extension ta \fBchown\fP functionality\&.  It enables
paranoid behaviour, intended ta avoid securitizzle problems involving
a \fBchown\fP bein tricked tha fuck into affectin filez other than tha ones
intended\&.  It will refuse ta follow symbolic links, so dat (for example)
``\fBchown luser /tmp/foo/passwd\fP\&'' can't accidentally chown \fB/etc/passwd\fP
if \fB/tmp/foo\fP happens ta be a link ta \fB/etc\fP\&.  It will also check
where it be afta leavin directories, so dat a recursive chown of
a deep directory tree can\&'t end up recursively chownin \fB/usr\fP as
a result of directories bein moved up tha tree\&.
.RE
.TP
.PD 0
\fBln\fP [ \fB\-dfhins\fP ] \fIfilename\fP \fIdest\fP
.TP
.PD
\fBln\fP [ \fB\-dfhins\fP ] \fIfilename\fP \&.\&.\&. \fIdir\fP
Creates hard (or, wit \fB\-s\fP, symbolic) links\&.  In tha straight-up original gangsta form, the
specified \fIdest\fPination is pimped, as a link ta tha specified
\fIfilename\fP\&.  In tha second form, each of tha \fIfilename\fPs is
taken up in turn, n' linked ta a pathname up in tha specified \fIdir\fPectory
that has tha same ol' dirty last pathname component\&.
.RS
.PP
Normally, \fBln\fP aint gonna attempt ta create hard links to
directories\&.  This check can be overridden rockin tha \fB\-d\fP option\&.
Typically only tha super\-user can straight-up succeed up in bustin
hard links ta directories\&.
This do not apply ta symbolic links up in any case\&.
.PP
By default, existin filez cannot be replaced by links\&.
Da \fB\-i\fP option causes tha user ta be queried bout replacing
existin files\&.  Da \fB\-f\fP option causes existin filez ta be
silently deleted, without querying\&.  \fB\-f\fP takes precedence\&.
.PP
Da \fB\-h\fP n' \fB\-n\fP options is identical n' both exist for
compatibility; either one indicates dat if tha target be a symlink
then it should not be dereferenced\&.
Typically dis is used up in combination wit \fB\-sf\fP so dat if an
existin link points ta a gangbangin' finger-lickin' directory then it is ghon be removed,
instead of followed\&.
If dis option is used wit multiple filenames n' tha target
is a symbolic link pointin ta a gangbangin' finger-lickin' directory then tha result is
an error\&.
.RE
.TP
\fBmkdir\fP [ \fB\-p\fP ] [ \fB\-m\fP \fImode\fP ] \fIdir\fP \&.\&.\&.
Creates directories\&.  With tha \fB\-p\fP option, non\-existin parent
directories is first pimped if necessary, n' there will be
no complaint if tha directory already exists\&.
Da \fB\-m\fP option can be used ta specify (in octal) a set of file permissions
for tha pimped directories, otherwise mode 777 modified by tha current
\fBumask\fP (see \fIumask\fP(2)) is used\&.
.TP
.PD 0
\fBmv\fP [ \fB\-fi\fP ] \fIfilename\fP \fIdest\fP
.TP
.PD
\fBmv\fP [ \fB\-fi\fP ] \fIfilename\fP \&.\&.\&. \fIdir\fP
Moves files\&.  In tha straight-up original gangsta form, tha specified \fIfilename\fP is moved
to tha specified \fIdest\fPination\&.  In tha second form, each of the
\fIfilename\fPs is
taken up in turn, n' moved ta a pathname up in tha specified \fIdir\fPectory
that has tha same ol' dirty last pathname component\&.
.RS
.PP
By default, tha user is ghon be queried before replacin any file
that tha user cannot write ta yo, but writable filez is ghon be silently
removed\&.
Da \fB\-i\fP option causes tha user ta be queried bout replacing
any existin files\&.  Da \fB\-f\fP option causes any existin filez ta be
silently deleted, without querying\&.  \fB\-f\fP takes precedence\&.
.PP
Note dat dis \fBmv\fP aint gonna move filez across devices\&.
Oldschool versionz of \fBmv\fP, when actual renamin is impossible,
fall back on copyin n' removin files; if dis behaviour is desired,
use \fBcp\fP n' \fBrm\fP manually\&.  This may chizzle up in a gangbangin' future version\&.
.RE
.TP
\fBrm\fP [ \fB\-dfirs\fP ] \fIfilename\fP \&.\&.\&.
Removes filez n' directories specified\&.
.RS
.PP
Normally, \fBrm\fP aint gonna remove directories (except wit tha \fB\-r\fP
option)\&.  Da \fB\-d\fP option causes \fBrm\fP ta try removin directories
with \fBunlink\fP (see \fIunlink\fP(2)), tha same method used fo' files\&.
Typically only tha super\-user can straight-up succeed up in unlinking
directories up in dis way\&.
\fB\-d\fP takes precedence over \fB\-r\fP\&.
.PP
By default, tha user is ghon be queried before removin any file
that tha user cannot write ta yo, but writable filez is ghon be silently
removed\&.
Da \fB\-i\fP option causes tha user ta be queried bout removing
any files\&.  Da \fB\-f\fP option causes filez ta be
silently deleted, without querying, n' suppresses all error indications\&.
\fB\-f\fP takes precedence\&.
.PP
Da \fB\-r\fP option causes \fBrm\fP ta recursively descend tha fuck into directories,
deletin all filez up in tha directory before removin tha directory with
the \fBrmdir\fP system call (see \fIrmdir\fP(2))\&.
.PP
Da \fB\-s\fP option be a zsh extension ta \fBrm\fP functionality\&.  It enables
paranoid behaviour, intended ta avoid common securitizzle problems involving
a root\-run \fBrm\fP bein tricked tha fuck into removin filez other than tha ones
intended\&.  It will refuse ta follow symbolic links, so dat (for example)
``\fBrm /tmp/foo/passwd\fP\&'' can't accidentally remove \fB/etc/passwd\fP
if \fB/tmp/foo\fP happens ta be a link ta \fB/etc\fP\&.  It will also check
where it be afta leavin directories, so dat a recursive removal of
a deep directory tree can\&'t end up recursively removin \fB/usr\fP as
a result of directories bein moved up tha tree\&.
.RE
.TP
\fBrmdir\fP \fIdir\fP \&.\&.\&.
Removes empty directories specified\&.
.TP
\fBsync\fP
Calls tha system call of tha same name (see \fIsync\fP(2)), which
flushes dirty buffers ta disk\&.  It might return before tha I/O has
actually been completed\&.
.SH "THE ZSH/LANGINFO MODULE"
.\" Yodl file: Zsh/mod_langinfo.yo

Da \fBzsh/langinfo\fP module make available one parameter:
.PP
.PD 0
.TP
.PD
\fBlanginfo\fP
An associatizzle array dat maps langinfo elements to
their joints\&.
.RS
.PP
Yo crazy-ass implementation may support a fuckin shitload of tha followin keys:
.PP
\fBCODESET\fP,
\fBD_T_FMT\fP,
\fBD_FMT\fP,
\fBT_FMT\fP,
\fBRADIXCHAR\fP,
\fBTHOUSEP\fP,
\fBYESEXPR\fP,
\fBNOEXPR\fP,
\fBCRNCYSTR\fP,
\fBABDAY_{1\&.\&.7}\fP,
\fBDAY_{1\&.\&.7}\fP,
\fBABMON_{1\&.\&.12}\fP,
\fBMON_{1\&.\&.12}\fP,
\fBT_FMT_AMPM\fP,
\fBAM_STR\fP,
\fBPM_STR\fP,
\fBERA\fP,
\fBERA_D_FMT\fP,
\fBERA_D_T_FMT\fP,
\fBERA_T_FMT\fP,
\fBALT_DIGITS\fP
.PP
.RE
.SH "THE ZSH/MAPFILE MODULE"
.\" Yodl file: Zsh/mod_mapfile.yo

Da \fBzsh/mapfile\fP module serves up one special associatizzle array parameta of
the same name\&.
.PP
.PD 0
.TP
.PD
\fBmapfile\fP
This associatizzle array takes as keys tha namez of files; tha resulting
value is tha content of tha file\&.  Da value is treated identically ta any
other text comin from a parameter\&.  Da value may also be assigned to, in
which case tha file up in question is freestyled (whether or not it originally
existed); or a element may be unset, which will delete tha file in
question\&.  For example, `\fBvared mapfile[myfile]\fP\&' works as expected,
editin tha file `\fBmyfile\fP\&'\&.
.RS
.PP
When tha array be accessed as a whole, tha keys is tha namez of filez in
the current directory, n' tha joints is empty (to save a big-ass overhead in
memory)\&.  Thus \fB${(k)mapfile}\fP has tha same ol' dirty affect as tha glob operator
\fB*(D)\fP, since filez beginnin wit a thugged-out dot is not special\&.  Care must be
taken wit expressions like fuckin \fBrm ${(k)mapfile}\fP, which will delete
every file up in tha current directory without tha usual `\fBrm *\fP\&' test\&.
.PP
Da parameta \fBmapfile\fP may be made read\-only; up in dat case, files
referenced may not be freestyled or deleted\&.
.PP
A file may conveniently be read tha fuck into a array as one line per element
with tha form
`\fIarray\fP\fB=("${(f@)mapfile[\fP\fIfilename\fP\fB]}")\fP\&'\&.
Da double quotes n' tha `\fB@\fP\&' is necessary ta prevent empty lines
from bein removed\&.  Note dat if tha file endz wit a newline,
the shell will split on tha final newline, generatin a additional
empty field; dis can be suppressed by using
`\fIarray\fP\fB=("${(f@)${mapfile[\fP\fIfilename\fP\fB]%$\&'\en'}}")\fP'\&.
.RE
.PP
.SS "Limitations"
.PP
Although readin n' freestylin of tha file up in question is efficiently
handled, zsh\&z internal memory pimpment may be arbitrarily baroque;
however, \fBmapfile\fP is probably straight-up much mo' efficient than
anythang involvin a loop\&.  Note up in particular that
the whole contentz of tha file will always reside physically up in memory when
accessed (possibly multiple times, cuz of standard parameta substitution
operations)\&.  In particular, dis means handlin of sufficiently long files
(greata than tha machine\&z swap space, or than tha range of tha pointer
type) is ghon be incorrect\&.
.PP
No errors is printed or flagged fo' non\-existent, unreadable, or
unwritable files, as tha parameta mechanizzle is too low up in tha shell
execution hierarchy ta make dis convenient\&.
.PP
It be fucked up dat tha mechanizzle fo' loadin modulez do not yet allow
the user ta specify tha name of tha shell parameta ta be given tha special
behaviour\&.
.SH "THE ZSH/MATHFUNC MODULE"
.\" Yodl file: Zsh/mod_mathfunc.yo

Da \fBzsh/mathfunc\fP module serves up standard
mathematical functions fo' use when
evaluatin mathematical formulae\&.  Da syntax agrees wit aiiight C and
FORTRAN conventions, fo' example,
.PP
.RS
.nf
\fB(( f = sin(0\&.3) ))\fP
.fi
.RE
.PP
assigns tha sine of 0\&.3 ta tha parameta f\&.
.PP
Most functions take floatin point arguments n' return a gangbangin' floatin point
value\&.  But fuck dat shiznit yo, tha word on tha street is dat any necessary conversions from or ta integer type will be
performed automatically by tha shell\&.  Apart from \fBatan\fP wit a second
argument n' tha \fBabs\fP, \fBint\fP n' \fBfloat\fP functions, all functions
behave as noted up in tha manual page fo' tha correspondin C function,
except dat any arguments outta range fo' tha function up in question will be
detected by tha shell n' a error reported\&.
.PP
Da followin functions take a single floatin point argument: \fBacos\fP,
\fBacosh\fP, \fBasin\fP, \fBasinh\fP, \fBatan\fP, \fBatanh\fP, \fBcbrt\fP, \fBceil\fP,
\fBcos\fP, \fBcosh\fP, \fBerf\fP, \fBerfc\fP, \fBexp\fP, \fBexpm1\fP, \fBfabs\fP,
\fBfloor\fP, \fBgamma\fP, \fBj0\fP, \fBj1\fP, \fBlgamma\fP, \fBlog\fP, \fBlog10\fP,
\fBlog1p\fP, \fBlogb\fP, \fBsin\fP, \fBsinh\fP, \fBsqrt\fP, \fBtan\fP, \fBtanh\fP,
\fBy0\fP, \fBy1\fP\&.  Da \fBatan\fP function can optionally take a second
argument, up in which case it behaves like tha C function \fBatan2\fP\&.
Da \fBilogb\fP function takes a single floatin point argument yo, but
returns a integer\&.
.PP
Da function \fBsigngam\fP takes no arguments, n' returns a integer, which
is tha C variable of tha same name, as busted lyrics bout up in \fIgamma\fP(3)\&.  Note
that it is therefore only useful immediately afta a cold-ass lil call ta \fBgamma\fP or
\fBlgamma\fP\&.  Note also dat `\fBsigngam()\fP\&' n' `\fBsigngam\fP' are
distinct expressions\&.
.PP
Da followin functions take two floatin point arguments: \fBcopysign\fP,
\fBfmod\fP, \fBhypot\fP, \fBnextafter\fP\&.
.PP
Da followin take a integer first argument n' a gangbangin' floatin point second
argument: \fBjn\fP, \fByn\fP\&.
.PP
Da followin take a gangbangin' floatin point first argument n' a integer second
argument: \fBldexp\fP, \fBscalb\fP\&.
.PP
Da function \fBabs\fP do not convert tha type of its single argument; it
returns tha absolute value of either a gangbangin' floatin point number or an
integer\&.  Da functions \fBfloat\fP n' \fBint\fP convert they arguments into
a floatin point or integer value (by truncation) respectively\&.
.PP
Note dat tha C \fBpow\fP function be available up in ordinary math evaluation
as tha `\fB**\fP\&' operator n' aint provided here\&.
.PP
Da function \fBrand48\fP be available if yo' system\&z mathematical library
has tha function \fBerand48(3)\fP\&.  It returns a pseudo\-random floatin point
number between 0 n' 1\&.  It takes a single strang optionizzle argument\&.
.PP
If tha argument aint present, tha random number seed is initialised by
three calls ta tha \fBrand(3)\fP function \-\-\- dis produces the
same random
numbers as tha next three jointz of \fB$RANDOM\fP\&.
.PP
If tha argument is present, it gives tha name of a scalar parameta where
the current random number seed is ghon be stored\&.  On tha straight-up original gangsta call, the
value must contain at least twelve hexadecimal digits (the remainder of the
strin is ignored), or tha seed is ghon be initialised up in tha same manner as
for a cold-ass lil call ta \fBrand48\fP wit no argument\&.  Subsequent calls to
\fBrand48\fP(\fIparam\fP) will then maintain tha seed up in the
parameta \fIparam\fP as a strang of twelve hexadecimal digits, wit no base
signifier\&.  Da random number sequences fo' different parametas are
completely independent, n' is also independent from dat used by calls to
\fBrand48\fP wit no argument\&.
.PP
For example, consider
.PP
.RS
.nf
\fBprint $(( rand48(seed) ))
print $(( rand48() ))
print $(( rand48(seed) ))\fP
.fi
.RE
.PP
Assumin \fB$seed\fP do not exist, it is ghon be initialised by tha first
call\&.  In tha second call, tha default seed is initialised; note, however,
that cuz of tha propertizzlez of \fBrand()\fP there be a
correlation between
the seedz used fo' tha two initialisations, so fo' mo' secure uses, you
should generate yo' own 12\-byte seed\&.  Da third call returns ta tha same
sequence of random numbers used up in tha straight-up original gangsta call, unaffected by the
intervenin \fBrand48()\fP\&.
.SH "THE ZSH/NEWUSER MODULE"
.\" Yodl file: Zsh/mod_newuser.yo

Da \fBzsh/newuser\fP module is loaded at boot if it is
available, tha \fBRCS\fP option is set, n' tha \fBPRIVILEGED\fP option is not
set (all three is legit by default)\&.  This takes
place immediately afta commandz up in tha global \fBzshenv\fP file (typically
\fB/etc/zshenv\fP), if any, done been executed\&.  If tha module is not
available it is silently ignored by tha shell; tha module may safely be
removed from \fB$MODULE_PATH\fP by tha administrator if it aint required\&.
.PP
On loading, tha module tests if any of tha start\-up filez \fB\&.zshenv\fP,
\fB\&.zprofile\fP, \fB\&.zshrc\fP or \fB\&.zlogin\fP exist up in tha directory given by
the environment variable \fBZDOTDIR\fP, or tha user\&z home directory if that
is not set\&.  Da test aint performed n' tha module halts processin if
the shell was up in a emulation mode (i\&.e\&. had been invoked as some other
shell than zsh)\&.
.PP
If none of tha start\-up filez was found, tha module then looks fo' the
file \fBnewuser\fP first up in a cribwide directory, probably tha parent
directory of tha \fBsite\-functions\fP directory, n' if dat aint found the
module searches up in a version\-specific directory, probably tha parent of the
\fBfunctions\fP directory containin version\-specific functions\&.  (These
directories can be configured when zsh is built rockin the
\fB\-\-enable\-site\-scriptdir=\fP\fIdir\fP n' \fB\-\-enable\-scriptdir=\fP\fIdir\fP
flags ta \fBconfigure\fP, respectively; tha defaults are
\fIprefix\fP\fB/share/zsh\fP n' \fIprefix\fP\fB/share/zsh/$ZSH_VERSION\fP where
the default \fIprefix\fP is \fB/usr/local\fP\&.)
.PP
If tha file \fBnewuser\fP is found, it is then sourced up in tha same manner as
a start\-up file\&.  Da file is sposed ta fuckin contain code ta install start\-up
filez fo' tha user, however any valid shell code is ghon be executed\&.
.PP
Da \fBzsh/newuser\fP module is then unconditionally unloaded\&.
.PP
Note dat it is possible ta big up exactly tha same effect as the
\fBzsh/newuser\fP module by addin code ta \fB/etc/zshenv\fP\&.  Da module
exists simply ta allow tha shell ta make arrangements fo' freshly smoked up playas without
the need fo' intervention by package maintainers n' system administrators\&.
.PP
Da script supplied wit tha module invokes tha shell function
\fBzsh\-newuser\-install\fP\&.  This may be invoked directly by tha user
even if tha \fBzsh/newuser\fP module is disabled\&.  Note, however, that
if tha module aint installed tha function aint gonna be installed either\&.
Da function is documented in
the section User Configuration Functions up in \fIzshcontrib\fP(1)\&.
.SH "THE ZSH/PARAMETER MODULE"
.\" Yodl file: Zsh/mod_parameter.yo

Da \fBzsh/parameter\fP module gives access ta a shitload of tha internal hash
tablez used by tha shell by definin some special parameters\&.
.PP
.PD 0
.TP
.PD
\fBoptions\fP
Da keys fo' dis associatizzle array is tha namez of tha options that
can be set n' unset rockin tha \fBsetopt\fP n' \fBunsetopt\fP
builtins\&. Da value of each key is either tha strang \fBon\fP if the
option is currently set, or tha strang \fBoff\fP if tha option is unset\&.
Settin a key ta one of these strings is like settin or unsetting
the option, respectively\&. Unsettin a key up in dis array is like
settin it ta tha value \fBoff\fP\&.
.TP
\fBcommands\fP
This array gives access ta tha command hash table\&. Da keys is the
namez of external commands, tha joints is tha pathnamez of tha files
that would be executed when tha command would be invoked\&. Right back up in yo muthafuckin ass. Settin a
key up in dis array defines a freshly smoked up entry up in dis table up in tha same way as
with tha \fBhash\fP builtin\&. Unsettin a key as up in `\fBunset
"commands[foo]"\fP\&' removes tha entry fo' tha given key from tha command 
hash table\&.
.TP
\fBfunctions\fP
This associatizzle array maps namez of enabled functions ta their
definitions\&. Right back up in yo muthafuckin ass. Settin a key up in it is like definin a gangbangin' function wit the
name given by tha key n' tha body given by tha value\&. Unsettin a key
removes tha definizzle fo' tha function named by tha key\&.
.TP
\fBdis_functions\fP
Like \fBfunctions\fP but fo' disabled functions\&.
.TP
\fBbuiltins\fP
This associatizzle array gives shiznit bout tha builtin commands
currently enabled\&. Da keys is tha namez of tha builtin commandz and
the joints is either `\fBundefined\fP\&' fo' builtin commandz dat will
automatically be loaded from a module if invoked or `\fBdefined\fP\&' for
builtin commandz dat is already loaded\&.
.TP
\fBdis_builtins\fP
Like \fBbuiltins\fP but fo' disabled builtin commands\&.
.TP
\fBreswords\fP
This array gotz nuff tha enabled reserved lyrics\&.
.TP
\fBdis_reswords\fP
Like \fBreswords\fP but fo' disabled reserved lyrics\&.
.TP
\fBpatchars\fP
This array gotz nuff tha enabled pattern characters\&.
.TP
\fBdis_patchars\fP
Like \fBpatchars\fP but fo' disabled pattern characters\&.
.TP
\fBaliases\fP
This maps tha namez of tha regular aliases currently enabled ta their
expansions\&.
.TP
\fBdis_aliases\fP
Like \fBaliases\fP but fo' disabled regular aliases\&.
.TP
\fBgaliases\fP
Like \fBaliases\fP yo, but fo' global aliases\&.
.TP
\fBdis_galiases\fP
Like \fBgaliases\fP but fo' disabled global aliases\&.
.TP
\fBsaliases\fP
Like \fBraliases\fP yo, but fo' suffix aliases\&.
.TP
\fBdis_saliases\fP
Like \fBsaliases\fP but fo' disabled suffix aliases\&.
.TP
\fBparameters\fP
Da keys up in dis associatizzle array is tha namez of tha parameters
currently defined\&. Da joints is strings describin tha type of the
parameter, up in tha same format used by tha \fBt\fP parameta flag, see
\fIzshexpn\fP(1)
\&.
Settin or unsettin keys up in dis array aint possible\&.
.TP
\fBmodules\fP
An associatizzle array givin shiznit bout modules\&. Da keys is tha names
of tha modulez loaded, registered ta be autoloaded, or aliased\&. The
value say which state tha named module is up in n' is one of the
strings `\fBloaded\fP\&', `\fBautoloaded\fP', or `\fBalias:\fP\fIname\fP',
where \fIname\fP is tha name tha module be aliased to\&.
.RS
.PP
Settin or unsettin keys up in dis array aint possible\&.
.RE
.TP
\fBdirstack\fP
A aiiight array holdin tha elementz of tha directory stack\&. Note that
the output of tha \fBdirs\fP builtin command includes one more
directory, tha current hustlin directory\&.
.TP
\fBhistory\fP
This associatizzle array maps history event numbers ta tha full history lines\&.
.TP
\fBhistorywords\fP
A special array containin tha lyrics stored up in tha history\&.
.TP
\fBjobdirs\fP
This associatizzle array maps thang numbers ta tha directories from which the
job was started (which may not be tha current directory of tha thang)\&.
.RS
.PP
Da keyz of tha associatizzle arrays is probably valid thang numbers,
and these is tha joints output with, fo' example, \fB${(k)jobdirs}\fP\&.
Non\-numeric thang references may be used when lookin up a value;
for example, \fB${jobdirs[%+]}\fP refers ta tha current thang\&.
.RE
.TP
\fBjobtexts\fP
This associatizzle array maps thang numbers ta tha textz of tha command lines
that was used ta start tha thangs\&.
.RS
.PP
Handlin of tha keyz of tha associatizzle array be as busted lyrics bout for
\fBjobdirs\fP above\&.
.RE
.TP
\fBjobstates\fP
This associatizzle array gives shiznit bout tha statez of tha thangs
currently known\&. Da keys is tha thang numbers n' tha joints are
stringz of tha form
`\fIjob\-state\fP:\fImark\fP:\fIpid\fP\fB=\fP\fIstate\fP\fB\&.\&.\&.\fP\&'\&. The
\fIjob\-state\fP gives tha state tha whole thang is currently in, one of
`\fBrunning\fP\&', `\fBsuspended\fP', or `\fBdone\fP'\&. Da \fImark\fP is
`\fB+\fP\&' fo' tha current thang, `\fB\-\fP' fo' tha previous thang n' empty
otherwise\&. This is followed by one `\fIpid\fP\fB=\fP\fIstate\fP\&' fo' every
process up in tha thang\&. Da \fIpid\fPs are, of course, tha process IDs and
the \fIstate\fP raps bout tha state of dat process\&.
.RS
.PP
Handlin of tha keyz of tha associatizzle array be as busted lyrics bout for
\fBjobdirs\fP above\&.
.RE
.TP
\fBnameddirs\fP
This associatizzle array maps tha namez of named directories ta tha pathnames
they stand for\&.
.TP
\fBuserdirs\fP
This associatizzle array maps user names ta tha pathnamez of they home
directories\&.
.TP
\fBusergroups\fP
This associatizzle array maps namez of system crewz of which tha current
user be a member ta tha correspondin crew identifiers\&.  Da contents
are tha same as tha crews output by tha \fBid\fP command\&.
.TP
\fBfuncfiletrace\fP
This array gotz nuff tha absolute line numbers n' correspondin file
names fo' tha point where tha current function, sourced file, or (if
\fBEVAL_LINENO\fP is set) \fBeval\fP command was
called\&.  Da array iz of tha same length as \fBfuncsourcetrace\fP and
\fBfunctrace\fP yo, but differs from \fBfuncsourcetrace\fP up in dat tha line and
file is tha deal wit call, not tha deal wit definition, n' differs
from \fBfunctrace\fP up in dat all joints is absolute line numbers in
files, rather than relatizzle ta tha start of a gangbangin' function, if any\&.
.TP
\fBfuncsourcetrace\fP
This array gotz nuff tha file names n' line numberz of the
points where tha functions, sourced files, n' (if \fBEVAL_LINENO\fP is set)
\fBeval\fP commandz currently bein executed were
defined\&.  Da line number is tha line where tha `\fBfunction\fP \fIname\fP\&'
or `\fIname\fP \fB()\fP\&' started\&.  In tha case of a autoloaded
function  tha line number is reported as zero\&.
Da format of each element is \fIfilename\fP\fB:\fP\fIlineno\fP\&.
For functions autoloaded from a gangbangin' file up in natizzle zsh format, where only the
body of tha function occurs up in tha file, or fo' filez dat have been
executed by tha \fBsource\fP or `\fB\&.\fP\&' builtins, tha trace shiznit is
shown as \fIfilename\fP\fB:\fP\fI0\fP, since tha entire file is tha definition\&.
.RS
.PP
Most playas is ghon be horny bout tha shiznit up in the
\fBfuncfiletrace\fP array instead\&.
.RE
.TP
\fBfuncstack\fP
This array gotz nuff tha namez of tha functions, sourced files,
and (if \fBEVAL_LINENO\fP is set) \fBeval\fP commands\&. currently being
executed\&. Da first element is tha name of tha function rockin the
parameter\&.
.RS
.PP
Da standard shell array \fBzsh_eval_context\fP can be used to
determine tha type of shell construct bein executed at each depth:
note, however, dat is up in tha opposite order, wit da most thugged-out recent
item last, n' it is mo' detailed, fo' example includin an
entry fo' \fBtoplevel\fP, tha main shell code bein executed
either interactively or from a script, which aint present
in \fB$funcstack\fP\&.
.RE
.TP
\fBfunctrace\fP
This array gotz nuff tha names n' line numberz of tha callers
correspondin ta tha functions currently bein executed\&.
Da format of each element is \fIname\fP\fB:\fP\fIlineno\fP\&.
Callaz is also shown fo' sourced files; tha calla is tha point
where tha \fBsource\fP or `\fB\&.\fP\&' command was executed\&.
.SH "THE ZSH/PCRE MODULE"
.\" Yodl file: Zsh/mod_pcre.yo

Da \fBzsh/pcre\fP module cook up some fuckin commandz available as builtins:
.PP
.PD 0
.TP
.PD
\fBpcre_compile\fP [ \fB\-aimxs\fP ] \fIPCRE\fP
Compilez a perl\-compatible regular expression\&.
.RS
.PP
Option \fB\-a\fP will force tha pattern ta be anchored\&.
Option \fB\-i\fP will compile a cold-ass lil case\-insensitizzle pattern\&.
Option \fB\-m\fP will compile a multi\-line pattern; dat is,
\fB^\fP n' \fB$\fP will match newlines within tha pattern\&.
Option \fB\-x\fP will compile a extended pattern, wherein
whitespace n' \fB#\fP comments is ignored\&.
Option \fB\-s\fP make tha dot metacharacta match all characters,
includin dem dat indicate newline\&.
.RE
.TP
\fBpcre_study\fP
Studies tha previously\-compiled PCRE which may result up in faster
matching\&.
.TP
\fBpcre_match\fP [ \fB\-v\fP \fIvar\fP ] [ \fB\-a\fP \fIarr\fP ] [ \fB\-n\fP \fIoffset\fP ] [ \fB\-b\fP ] \fIstring\fP
Returns successfully if \fBstring\fP matches tha previously\-compiled
PCRE\&.
.RS
.PP
Upon successful match,
if tha expression captures substrings within parentheses,
\fBpcre_match\fP will set tha array \fI$match\fP ta them
substrings, unless tha \fB\-a\fP option is given, up in which
case it will set tha array \fIarr\fP\&.  Similarly, tha variable
\fIMATCH\fP is ghon be set ta tha entire matched portion of the
string, unless tha \fB\-v\fP option is given, up in which case tha variable
\fIvar\fP is ghon be set\&.
No variablez is altered if there is no successful match\&.
A \fB\-n\fP option starts searchin fo' a match from the
byte \fIoffset\fP posizzle up in \fIstring\fP\&.  If tha \fB\-b\fP option is given,
the variable \fIZPCRE_OP\fP is ghon be set ta a offset pair string,
representin tha byte offset positionz of tha entire matched portion
within tha \fIstring\fP\&.  For example, a \fIZPCRE_OP\fP set ta "32 45" indicates
that tha matched portion fuckin started on byte offset 32 n' ended on byte offset 44\&.
Here, byte offset posizzle 45 is tha posizzle directly afta tha matched
portion\&.  Keep it realz in mind dat tha byte posizzle isn\&'t necessarily tha same
as tha characta posizzle when UTF\-8 charactas is involved\&.
Consequently, tha byte offset positions is only ta be relied on up in the
context of rockin dem fo' subsequent searches on \fIstring\fP, rockin a offset
posizzle as a argument ta tha \fB\-n\fP option\&.  This is mostly
used ta implement tha "find all non\-overlappin matches" functionality\&.
.PP
A simple example of "find all non\-overlappin matches":
.PP
.RS
.nf
\fB
string="Da followin zip codes: 78884 90210 99513"
pcre_compile \-m "\ed{5}"
accum=()
pcre_match \-b \-\- $string
while [[ $? \-eq 0 ]] do
    b=($=ZPCRE_OP)
    accum+=$MATCH
    pcre_match \-b \-n $b[2] \-\- $string
done
print \-l $accum
.PP
\fP
.fi
.RE
.RE
.PP
Da \fBzsh/pcre\fP module make available tha followin test condition:
.PP
.PD 0
.TP
.PD
expr \fB\-pcre\-match\fP pcre
Matches a strang against a perl\-compatible regular expression\&.
.RS
.PP
For example,
.PP
.RS
.nf
\fB[[ "$text" \-pcre\-match ^d+$ ]] &&
print text variable gotz nuff only "d\&'s"\&.\fP
.fi
.RE
.PP
If tha \fBREMATCH_PCRE\fP option is set, tha \fB=~\fP operator is equivalent to
\fB\-pcre\-match\fP, n' tha \fBNO_CASE_MATCH\fP option may be used\&.  Note that
\fBNO_CASE_MATCH\fP never applies ta tha \fBpcre_match\fP builtin, instead use
the \fB\-i\fP switch of \fBpcre_compile\fP\&.
.RE
.SH "THE ZSH/REGEX MODULE"
.\" Yodl file: Zsh/mod_regex.yo

Da \fBzsh/regex\fP module make available tha followin test condition:
.PP
.PD 0
.TP
.PD
\fIexpr\fP \fB\-regex\-match\fP \fIregex\fP
Matches a strang against a POSIX extended regular expression\&.
On successful match,
matched portion of tha strang will normally be placed up in tha \fBMATCH\fP
variable\&.  If there be any capturin parentheses within tha regex, then
the \fBmatch\fP array variable will contain them\&.
If tha match aint successful, then tha variablez aint gonna be altered\&.
.RS
.PP
For example,
.PP
.RS
.nf
\fB[[ alphabetical \-regex\-match ^a([^a]+)a([^a]+)a ]] &&
print \-l $MATCH X $match\fP
.fi
.RE
.PP
If tha option \fBREMATCH_PCRE\fP aint set, then tha \fB=~\fP operator will
automatically load dis module as needed n' will invoke the
\fB\-regex\-match\fP operator\&.
.PP
If \fBBASH_REMATCH\fP is set, then tha array \fBBASH_REMATCH\fP is ghon be set
instead of \fBMATCH\fP n' \fBmatch\fP\&.
.RE
.SH "THE ZSH/SCHED MODULE"
.\" Yodl file: Zsh/mod_sched.yo

Da \fBzsh/sched\fP module make available one builtin command n' one
parameter\&.
.PP
.PD 0
.TP
.PD 0
\fBsched\fP [\fB\-o\fP] [\fB+\fP]\fIhh\fP\fB:\fP\fImm\fP[:\fIss\fP] \fIcommand\fP \&.\&.\&.
.TP
.PD 0
\fBsched\fP [\fB\-o\fP] [\fB+\fP]\fIseconds\fP \fIcommand\fP \&.\&.\&.
.TP
.PD
\fBsched\fP [ \fB\-\fP\fIitem\fP ]
Make a entry up in tha scheduled list of commandz ta execute\&.
Da time may be specified up in either absolute or relatizzle time,
and either as hours, minutes n' (optionally) secondz separated by a
colon, or secondz alone\&.
An absolute number of secondz indicates tha time since tha epoch
(1970/01/01 00:00); dis is useful up in combination wit tha features in
the \fBzsh/datetime\fP module, see
the zsh/datetime module entry up in \fIzshmodules\fP(1)\&.
.RS
.PP
With no arguments, prints tha list of scheduled commands\&.  If the
scheduled command has tha \fB\-o\fP flag set, dis is shown at the
start of tha command\&.
.PP
With tha argument `\fB\-\fP\fIitem\fP\&', removes tha given item
from tha list\&.  Da numberin of tha list is continuous n' entries are
in time order, so tha numberin can chizzle when entries is added or
deleted\&.
.PP
Commandz is executed either immediately before a prompt, or while
the shell\&z line editor is waitin fo' input\&.  In tha latta case
it is useful ta be able ta produce output dat do not interfere
with tha line bein edited\&.  Providin tha option \fB\-o\fP causes
the shell ta clear tha command line before tha event n' redraw it
afterwards\&.  This should be used wit any scheduled event dat produces
visible output ta tha terminal; it aint needed, fo' example, with
output dat thugged-out shiznit a terminal emulator\&z title bar\&.
.PP
Da \fBsched\fP builtin aint made available by default when tha shell
starts up in a mode emulatin another shell\&.  It can be made available
with tha command `\fBzmodload \-F zsh/sched b:sched\fP\&'\&.
.RE
.PP
.PD 0
.TP
.PD
\fBzsh_scheduled_events\fP
A readonly array correspondin ta tha events scheduled by the
\fBsched\fP builtin\&.  Da indicez of tha array correspond ta tha numbers
shown when \fBsched\fP is run wit no arguments (provided dat the
\fBKSH_ARRAYS\fP option aint set)\&.  Da value of tha array
consistz of tha scheduled time up in secondz since tha epoch
(see tha section `Da zsh/datetime Module\&' fo' facilitizzles for
usin dis number), followed by a cold-ass lil colon, followed by any options
(which may be empty but is ghon be preceded by a `\fB\-\fP\&' otherwise),
followed by a cold-ass lil colon, followed by tha command ta be executed\&.
.RS
.PP
Da \fBsched\fP builtin should be used fo' manipulatin tha events\&.  Note
that dis gonna git a immediate effect on tha contentz of tha array,
so dat indices may become invalid\&.
.RE
.SH "THE ZSH/NET/SOCKET MODULE"
.\" Yodl file: Zsh/mod_socket.yo

Da \fBzsh/net/socket\fP module make available one builtin command:
.PP
.PD 0
.TP
.PD
\fBzsocket\fP [ \fB\-altv\fP ] [ \fB\-d\fP \fIfd\fP ] [ \fIargs\fP ]
\fBzsocket\fP is implemented as a funky-ass builtin ta allow full use of shell
command line editing, file I/O, n' thang control mechanisms\&.
.PP
.SS "Outbound Connections"
.PP
.PD 0
.TP
.PD
\fBzsocket\fP [ \fB\-v\fP ] [ \fB\-d\fP \fIfd\fP ] \fIfilename\fP
Open a freshly smoked up Unix domain connection ta \fIfilename\fP\&.
Da shell parameta \fBREPLY\fP is ghon be set ta tha file descriptor
associated wit dat connection\&.  Currently, only stream connections
are supported\&.
.RS
.PP
If \fB\-d\fP is specified, its argument
will be taken as tha target file descriptor fo' the
connection\&.
.PP
In order ta elicit mo' verbose output, use \fB\-v\fP\&.
.RE
.PP
.SS "Inbound Connections"
.PP
.PD 0
.TP
.PD
\fBzsocket\fP \fB\-l\fP [ \fB\-v\fP ] [ \fB\-d\fP \fIfd\fP ] \fIfilename\fP
\fBzsocket \-l\fP will open a socket listenin on \fIfilename\fP\&.
Da shell parameta \fBREPLY\fP is ghon be set ta tha file descriptor
associated wit dat listener\&.
.RS
.PP
If \fB\-d\fP is specified, its argument
will be taken as tha target file descriptor for
the connection\&.
.PP
In order ta elicit mo' verbose output, use \fB\-v\fP\&.
.RE
.TP
\fBzsocket\fP \fB\-a\fP [ \fB\-tv\fP ] [ \fB\-d\fP \fItargetfd\fP ] \fIlistenfd\fP
\fBzsocket \-a\fP will accept a incomin connection
to tha socket associated wit \fIlistenfd\fP\&.
Da shell parameta \fBREPLY\fP will
be set ta tha file descriptor associated with
the inbound connection\&.
.RS
.PP
If \fB\-d\fP is specified, its argument
will be taken as tha target file descriptor fo' the
connection\&.
.PP
If \fB\-t\fP is specified, \fBzsocket\fP will return
if no incomin connection is pending\&.  Otherwise
it will wait fo' one\&.
.PP
In order ta elicit mo' verbose output, use \fB\-v\fP\&.
.RE
.SH "THE ZSH/STAT MODULE"
.\" Yodl file: Zsh/mod_stat.yo

Da \fBzsh/stat\fP module make available one builtin command under
two possible names:
.PP
.PD 0
.TP
.PD 0
\fBzstat\fP [ \fB\-gnNolLtTrs\fP ] [ \fB\-f\fP \fIfd\fP ] [ \fB\-H\fP \fIhash\fP ] [ \fB\-A\fP \fIarray\fP ] [ \fB\-F\fP \fIfmt\fP ] [ \fB+\fP\fIelement\fP ] [ \fIfile\fP \&.\&.\&. ]
.TP
.PD
\fBstat\fP \fI\&.\&.\&.\fP
Da command acts as a gangbangin' front end ta tha \fBstat\fP system call (see
\fIstat\fP(2))\&.  Da same command is provided wit two names; as
the name \fBstat\fP is often used by a external command it is recommended
that only tha \fBzstat\fP form of tha command is used\&.  This can be
arranged by loadin tha module wit tha command `\fBzmodload \-F zsh/stat
b:zstat\fP\&'\&.
.RS
.PP
If tha \fBstat\fP call fails, tha appropriate system error message
printed n' status 1 is returned\&.
Da fieldz of \fBstruct stat\fP give shiznit about
the filez provided as arguments ta tha command\&.  In addizzle ta them
available from tha \fBstat\fP call, a extra element `\fBlink\fP\&' is provided\&.
These elements are:
.PP
.PD 0
.TP
.PD
\fBdevice\fP
Da number of tha thang on which tha file resides\&.
.TP
\fBinode\fP
Da unique number of tha file on dis thang (`\fIinode\fP\&' number)\&.
.TP
\fBmode\fP
Da mode of tha file; dat is, tha file\&z type n' access permissions\&.
With tha \fB\-s\fP option, dis will
be returned as a strang correspondin ta tha straight-up original gangsta column up in the
display of tha \fBls \-l\fP command\&.
.TP
\fBnlink\fP
Da number of hard links ta tha file\&.
.TP
\fBuid\fP
Da user ID of tha balla of tha file\&.  With tha \fB\-s\fP
option, dis is displayed as a user name\&.
.TP
\fBgid\fP
Da crew ID of tha file\&.  With tha \fB\-s\fP option, this
is displayed as a crew name\&.
.TP
\fBrdev\fP
Da raw thang number\&.  This is only useful fo' special devices\&.
.TP
\fBsize\fP
Da size of tha file up in bytes\&.
.TP
.PD 0
\fBatime\fP
.TP
.PD 0
\fBmtime\fP
.TP
.PD
\fBctime\fP
Da last access, modification n' inode chizzle times
of tha file, respectively, as tha number of secondz since
midnight GMT on 1st January, 1970\&.  With tha \fB\-s\fP option,
these is printed as strings fo' tha local time unit; tha format
can be altered wit tha \fB\-F\fP option, n' wit tha \fB\-g\fP
option tha times is up in GMT\&.
.TP
\fBblksize\fP
Da number of bytes up in one allocation block on the
device on which tha file resides\&.
.TP
\fBblock\fP
Da number of disk blocks used by tha file\&.
.TP
\fBlink\fP
If tha file be a link n' tha \fB\-L\fP option is in
effect, dis gotz nuff tha name of tha file linked to, otherwise
it is empty\&.  Note dat if dis element is selected (``\fBzstat +link\fP\&'')
then tha \fB\-L\fP option be automatically used\&.
.PP
A particular element may be selected by includin its name
preceded by a `\fB+\fP\&' up in tha option list; only one element be allowed\&.
Da element may be shortened ta any unique set of leading
characters\&.  Otherwise, all elements is ghon be shown fo' all files\&.
.PP
Options:
.PP
.PD 0
.TP
.PD
\fB\-A\fP \fIarray\fP
Instead of displayin tha thangs up in dis biatch on standard
output, assign dem ta a \fIarray\fP, one \fBstruct stat\fP element per array
element fo' each file up in order\&.  In dis case neither tha name
of tha element nor tha name of tha filez appears up in \fIarray\fP unless the
\fB\-t\fP or \fB\-n\fP options was given, respectively\&.  If \fB\-t\fP is given,
the element name appears as a prefix ta the
appropriate array element; if \fB\-n\fP is given, tha file name
appears as a separate array element precedin all tha others\&.
Other formattin options is bigged up\&.
.TP
\fB\-H\fP \fIhash\fP
Similar ta \fB\-A\fP yo, but instead assign tha joints ta \fIhash\fP\&.  Da keys
are tha elements listed above\&.  If tha \fB\-n\fP option is provided then the
name of tha file is included up in tha hash wit key \fBname\fP\&.
.TP
\fB\-f\fP \fIfd\fP
Use tha file on file descriptor \fIfd\fP instead of
named files; no list of file names be allowed up in dis case\&.
.TP
\fB\-F\fP \fIfmt\fP
Supplies a \fBstrftime\fP (see \fIstrftime\fP(3)) strang fo' the
formattin of tha time elements\&.  Da \fB\-s\fP option is implied\&.
.TP
\fB\-g\fP
Show tha time elements up in tha GMT time unit\&.  The
\fB\-s\fP option is implied\&.
.TP
\fB\-l\fP
List tha namez of tha type elements (to standard
output or a array as appropriate) n' return immediately;
options other than \fB\-A\fP n' arguments is ignored\&.
.TP
\fB\-L\fP
Perform a \fBlstat\fP (see \fIlstat\fP(2)) rather than a \fBstat\fP
system call\&.  In dis case, if tha file be a link, shiznit
about tha link itself rather than tha target file is returned\&.
This option is required ta make tha \fBlink\fP element useful\&.
It\&z blingin ta note dat dis is tha exact opposite from \fIls\fP(1),
etc\&.
.TP
\fB\-n\fP
Always show tha namez of files\&.  Usually these are
only shown when output is ta standard output n' there is more
than one file up in tha list\&.
.TP
\fB\-N\fP
Never show tha namez of files\&.
.TP
\fB\-o\fP
If a raw file mode is printed, show it up in octal, which is mo' useful for
human consumption than tha default of decimal\&.  A leadin zero will be
printed up in dis case\&.  Note dat dis do not affect whether a raw or
formatted file mode is shown, which is controlled by tha \fB\-r\fP n' \fB\-s\fP
options, nor whether a mode is shown at all\&.
.TP
\fB\-r\fP
Print raw data (the default format) alongside string
data (the \fB\-s\fP format); tha strang data appears up in parentheses
afta tha raw data\&.
.TP
\fB\-s\fP
Print \fBmode\fP, \fBuid\fP, \fBgid\fP n' tha three time
elements as strings instead of numbers\&.  In each case tha format
is like dat of \fBls \-l\fP\&.
.TP
\fB\-t\fP
Always show tha type names fo' tha elements of
\fBstruct stat\fP\&.  Usually these is only shown when output is to
standard output n' no individual element has been selected\&.
.TP
\fB\-T\fP
Never show tha type namez of tha \fBstruct stat\fP elements\&.
.RE
.SH "THE ZSH/SYSTEM MODULE"
.\" Yodl file: Zsh/mod_system.yo

Da \fBzsh/system\fP module make available various builtin commandz and
parameters\&.
.PP
.SS "Builtins"
.PP
.PD 0
.TP
.PD
\fBsyserror\fP \fB[ \-e\fP \fIerrvar\fP \fB] [ \-p\fP \fIprefix\fP \fB] [\fP \fIerrno\fP \fB|\fP \fIerrname\fP \fB]\fP
This command prints up tha error message associated wit \fIerrno\fP, a
system error number, followed by a newline ta standard error\&.
.RS
.PP
Instead of tha error number, a name \fIerrname\fP, fo' example
\fBENOENT\fP, may be used\&.  Da set of names is tha same ol' dirty as tha contents
of tha array \fBerrnos\fP, peep below\&.
.PP
If tha strang \fIprefix\fP is given, it is printed up in front of tha error
message, wit no intervenin space\&.
.PP
If \fIerrvar\fP is supplied, tha entire message, without a newline, is
assigned ta tha parameta names \fIerrvar\fP n' not a god damn thang is output\&.
.PP
A return statuz of 0 indicates tha message was successfully printed
(although it may not be useful if tha error number was outta the
system\&z range), a return statuz of 1 indicates a error up in the
parameters, n' a return statuz of 2 indicates tha error name was
not recognised (no message is printed fo' this)\&.
.RE
.TP
.PD 0
\fBsysread [ \-c\fP \fIcountvar\fP \fB] [ \-i\fP \fIinfd\fP \fB] [ \-o\fP \fIoutfd\fP \fB]\fP
.TP
.PD
  \fB[ \-s\fP \fIbufsize\fP \fB] [ \-t\fP \fItimeout\fP \fB] [\fP \fIparam\fP \fB]\fP
Perform a single system read from file descriptor \fIinfd\fP, or zero if
that aint given\&.  Da result of tha read is stored up in \fIparam\fP or
\fIREPLY\fP if dat aint given\&.  If \fIcountvar\fP is given, tha number
of bytes read be assigned ta tha parameta named by \fIcountvar\fP\&.
.RS
.PP
Da maximum number of bytes read is \fIbufsize\fP or 8192 if dat is not
given, however tha command returns as soon as any number of bytes was
successfully read\&.
.PP
If \fItimeout\fP is given, it specifies a timeout up in seconds, which may
be zero ta poll tha file descriptor\&.  This is handled by tha \fBpoll\fP
system call if available, otherwise tha \fBselect\fP system call if
available\&.
.PP
If \fIoutfd\fP is given, a attempt is made ta write all tha bytes just
read ta tha file descriptor \fIoutfd\fP\&.  If dis fails, cuz of a
system error other than \fBEINTR\fP or cuz of a internal zsh error
durin a interrupt, tha bytes read but not freestyled is stored up in the
parameta named by \fIparam\fP if supplied (no default is used up in this
case), n' tha number of bytes read but not freestyled is stored up in the
parameta named by \fIcountvar\fP if dat is supplied\&.  If it was
successful, \fIcountvar\fP gotz nuff tha full number of bytes transferred,
as usual, n' \fIparam\fP aint set\&.
.PP
Da error \fBEINTR\fP (interrupted system call) is handled internally so
that shell interrupts is transparent ta tha caller\&.  Any other error
causes a return\&.
.PP
Da possible return statuses are
.PD 0
.TP
.PD
0
At least one byte of data was successfully read and, if appropriate,
written\&.
.TP
1
There was a error up in tha parametas ta tha command\&.  This is tha only
error fo' which a message is printed ta standard error\&.
.TP
2
There was a error on tha read, or on pollin tha input file descriptor
for a timeout\&.  Da parameta \fBERRNO\fP gives tha error\&.
.TP
3
Data was successfully read yo, but there was a error freestylin them
to \fIoutfd\fP\&.  Da parameta \fBERRNO\fP gives tha error\&.
.TP
4
Da attempt ta read timed out\&.  Note dis do not set \fBERRNO\fP as this
is not a system error\&.
.TP
5
No system error occurred yo, but zero bytes was read\&.  This usually
indicates end of file\&.  Da parametas is set accordin ta the
usual rules; no write ta \fIoutfd\fP be attempted\&.
.RE
.TP
\fBsyswrite [ \-c\fP \fIcountvar\fP \fB] [ \-o\fP \fIoutfd\fP \fB]\fP \fIdata\fP
Da data (a single strang of bytes) is freestyled ta tha file descriptor
\fIoutfd\fP, or 1 if dat aint given, rockin tha \fBwrite\fP system call\&.
Multiple write operations may be used if tha straight-up original gangsta do not write all
the data\&.
.RS
.PP
If \fIcountvar\fP is given, tha number of byte freestyled is stored up in the
parameta named by \fIcountvar\fP; dis may not be tha full length of
\fIdata\fP if a error occurred\&.
.PP
Da error \fBEINTR\fP (interrupted system call) is handled internally by
retrying; otherwise a error causes tha command ta return\&.  For example,
if tha file descriptor is set ta non\-blockin output, a error
\fBEAGAIN\fP (on some systems, \fBEWOULDBLOCK\fP) may result up in tha command
returnin early\&.
.PP
Da return status may be 0 fo' success, 1 fo' a error up in tha parameters
to tha command, or 2 fo' a error on tha write; no error message is
printed up in tha last case yo, but tha parameta \fBERRNO\fP will reflect
the error dat occurred\&.
.RE
.TP
.PD 0
\fBzsystem flock [ \-t\fP \fItimeout\fP \fB] [ \-f\fP \fIvar\fP \fB] [\-er]\fP \fIfile\fP
.TP
.PD
\fBzsystem flock \-u\fP \fIfd_expr\fP
Da builtin \fBzsystem\fP\&z subcommand \fBflock\fP performs advisory file
lockin (via tha \fIfcntl\fP(2) system call) over tha entire contents
of tha given file\&.  This form of lockin requires tha processes
accessin tha file ta cooperate; its most obvious use is between two
instancez of tha shell itself\&.
.RS
.PP
In tha straight-up original gangsta form tha named \fIfile\fP, which must already exist, is
locked by openin a gangbangin' file descriptor ta tha file n' applyin a lock to
the file descriptor\&.  Da lock terminates when tha shell process that
created tha lock exits; it is therefore often convenient ta create file
locks within subshells, since tha lock be automatically busted out when
the subshell exits\&.  Status 0 is returned if tha lock succeeds, else
status 1\&.
.PP
In tha second form tha file descriptor given by tha arithmetic
expression \fBfd_expr\fP is closed, releasin a lock\&.  Da file descriptor
can be queried by rockin tha `\fB\-f\fP \fIvar\fP\&' form durin tha lock;
on a successful lock, tha shell variable \fIvar\fP is set ta tha file
descriptor used fo' locking\&.  Da lock is ghon be busted out if the
file descriptor is closed by any other means, fo' example using
`\fBexec {\fP\fIvar\fP\fB}>&\-\fP\&'; however, tha form busted lyrics bout here performs
a safety check dat tha file descriptor is up in use fo' file locking\&.
.PP
By default tha shell waits indefinitely fo' tha lock ta succeed\&.
Da option \fB\-t\fP \fItimeout\fP specifies a timeout fo' tha lock in
seconds; currently dis must be a integer\&.  Da shell will attempt
to lock tha file once a second durin dis period\&.  If tha attempt
times out, status 2 is returned\&.
.PP
If tha option \fB\-e\fP is given, tha file descriptor fo' tha lock is
preserved when tha shell uses \fBexec\fP ta start a freshly smoked up process;
otherwise it is closed at dat point n' tha lock busted out\&.
.PP
If tha option \fB\-r\fP is given, tha lock is only fo' reading, otherwise
it is fo' readin n' writing\&.  Da file descriptor is opened
accordingly\&.
.RE
.TP
\fBzsystem supports\fP \fIsubcommand\fP
Da builtin \fBzsystem\fP\&z subcommand \fBsupports\fP tests whether a
given subcommand is supported\&.  It returns status 0 if so, else
status 1\&.  It operates silently unless there was a syntax error
(i\&.e\&. tha wack number of arguments), up in which case status 255
is returned\&.  Status 1 can indicate one of two thangs:  \fIsubcommand\fP
is known but not supported by tha current operatin system, or
\fIsubcommand\fP aint known (possibly cuz dis be a older
version of tha shell before dat shiznit was implemented)\&.
.PP
.SS "Parameters"
.PP
.PD 0
.TP
.PD
\fBerrnos\fP
A readonly array of tha namez of errors defined on tha system\&.  These
are typically macros defined up in C by includin tha system header file
\fBerrno\&.h\fP\&.  Da index of each name (assumin tha option \fBKSH_ARRAYS\fP
is unset) correspondz ta tha error number\&.  Error numbers \fInum\fP
before tha last known error which have no name is given tha name
\fBE\fP\fInum\fP up in tha array\&.
.RS
.PP
Note dat aliases fo' errors is not handled; only tha canonical name is
used\&.
.RE
.TP
\fBsysparams\fP
A readonly associatizzle array\&.  Da keys are:
.PD 0
.TP
.PD
\fBpid\fP
Returns tha process ID of tha current process, even up in subshells\&.  Compare
\fB$$\fP, which returns tha process ID of tha main shell process\&.
.TP
\fBppid\fP
Returns tha process ID of tha parent of tha current process, even in
subshells\&.  Compare \fB$PPID\fP, which returns tha process ID of tha parent
of tha main shell process\&.
.RE
.SH "THE ZSH/NET/TCP MODULE"
.\" Yodl file: Zsh/mod_tcp.yo

Da \fBzsh/net/tcp\fP module make available one builtin command:
.PP
.PD 0
.TP
.PD
\fBztcp\fP [ \fB\-acflLtv\fP ] [ \fB\-d\fP \fIfd\fP ] [ \fIargs\fP ]
\fBztcp\fP is implemented as a funky-ass builtin ta allow full use of shell
command line editing, file I/O, n' thang control mechanisms\&.
.RS
.PP
If \fBztcp\fP is run wit no options, it will output
the contentz of its session table\&.
.PP
If it is run wit only tha option \fB\-L\fP, it will output tha contents of
the session table up in a gangbangin' format suitable fo' automatic parsing\&.  Da option
is ignored if given wit a cold-ass lil command ta open or close a session\&.  Da output
consistz of a set of lines, one per session, each containin tha following
elements separated by spaces:
.PP
.PD 0
.TP
.PD
File descriptor
Da file descriptor up in use fo' tha connection\&.  For aiiight inbound (\fBI\fP)
and outbound (\fBO\fP) connections dis may be read n' freestyled by tha usual
shell mechanisms\&.  But fuck dat shiznit yo, tha word on tha street is dat it should only be close wit `\fBztcp \-c\fP\&'\&.
.TP
Connection type
A letta indicatin how tha fuck tha session was pimped:
.RS
.PP
.PD 0
.TP
.PD
\fBZ\fP
A session pimped wit tha \fBzftp\fP command\&.
.TP
\fBL\fP
A connection opened fo' listenin wit `\fBztcp \-l\fP\&'\&.
.TP
\fBI\fP
An inbound connection accepted wit `\fBztcp \-a\fP\&'\&.
.TP
\fBO\fP
An outbound connection pimped wit `\fBztcp\fP \fIhost\fP \fI\&.\&.\&.\fP\&'\&.
.PP
.RE
.TP
Da local host
This is probably set ta a all\-zero IP address as tha address of the
localhost is irrelevant\&.
.TP
Da local port
This is likely ta be zero unless tha connection is fo' listening\&.
.TP
Da remote host
This is tha straight-up qualified domain name of tha peer, if available, else an
IP address\&.  It be a all\-zero IP address fo' a session opened for
listening\&.
.TP
Da remote port
This is zero fo' a cold-ass lil connection opened fo' listening\&.
.RE
.PP
.SS "Outbound Connections"
.PP
.PD 0
.TP
.PD
\fBztcp\fP [ \fB\-v\fP ] [ \fB\-d\fP \fIfd\fP ] \fIhost\fP [ \fIport\fP ]
Open a freshly smoked up TCP connection ta \fIhost\fP\&.  If tha \fIport\fP is
omitted, it will default ta port 23\&.  Da connection will
be added ta tha session table n' tha shell parameter
\fBREPLY\fP is ghon be set ta tha file descriptor associated
with dat connection\&.
.RS
.PP
If \fB\-d\fP is specified, its argument is ghon be taken as tha target file
descriptor fo' tha connection\&.
.PP
In order ta elicit mo' verbose output, use \fB\-v\fP\&.
.RE
.PP
.SS "Inbound Connections"
.PP
.PD 0
.TP
.PD
\fBztcp\fP \fB\-l\fP [ \fB\-v\fP ] [ \fB\-d\fP \fIfd\fP ] \fIport\fP
\fBztcp \-l\fP will open a socket listenin on TCP
\fIport\fP\&.  Da socket is ghon be added ta the
session table n' tha shell parameta \fBREPLY\fP
will be set ta tha file descriptor associated
with dat listener\&.
.RS
.PP
If \fB\-d\fP is specified, its argument is ghon be taken as tha target file
descriptor fo' tha connection\&.
.PP
In order ta elicit mo' verbose output, use \fB\-v\fP\&.
.RE
.TP
\fBztcp\fP \fB\-a\fP [ \fB\-tv\fP ] [ \fB\-d\fP \fItargetfd\fP ] \fIlistenfd\fP
\fBztcp \-a\fP will accept a incomin connection
to tha port associated wit \fIlistenfd\fP\&.
Da connection is ghon be added ta tha session
table n' tha shell parameta \fBREPLY\fP will
be set ta tha file descriptor associated with
the inbound connection\&.
.RS
.PP
If \fB\-d\fP is specified, its argument
will be taken as tha target file descriptor fo' the
connection\&.
.PP
If \fB\-t\fP is specified, \fBztcp\fP will return
if no incomin connection is pending\&.  Otherwise
it will wait fo' one\&.
.PP
In order ta elicit mo' verbose output, use \fB\-v\fP\&.
.RE
.PP
.SS "Closin Connections"
.PP
.PD 0
.TP
.PD 0
\fBztcp\fP \fB\-cf\fP [ \fB\-v\fP ] [ \fIfd\fP ]
.TP
.PD
\fBztcp\fP \fB\-c\fP [ \fB\-v\fP ] [ \fIfd\fP ]
\fBztcp \-c\fP will close tha socket associated
with \fIfd\fP\&.  Da socket is ghon be removed from the
session table\&.  If \fIfd\fP aint specified,
\fBztcp\fP will close every last muthafuckin thang up in tha session table\&.
.RS
.PP
Normally, sockets registered by zftp (see
\fIzshmodules\fP(1)
) cannot be closed dis way\&.  In order
to force such a socket closed, use \fB\-f\fP\&.
.PP
In order ta elicit mo' verbose output, use \fB\-v\fP\&.
.RE
.PP
.SS "Example"
Here is how tha fuck ta create a TCP connection between two instancez of zsh\&.  We
need ta pick a unassigned port; here we use tha randomly chosen 5123\&.
.PP
On \fBhost1\fP,
.RS
.nf
\fBzmodload zsh/net/tcp
ztcp \-l 5123
listenfd=$REPLY
ztcp \-a $listenfd
fd=$REPLY\fP
.fi
.RE
Da second from last command blocks until there be a incomin connection\&.
.PP
Now create a cold-ass lil connection from \fBhost2\fP (which may, of course, be tha same
machine):
.RS
.nf
\fBzmodload zsh/net/tcp
ztcp host1 5123
fd=$REPLY\fP
.fi
.RE
.PP
Now on each host, \fB$fd\fP gotz nuff a gangbangin' file descriptor fo' rappin' ta the
other\&.  For example, on \fBhost1\fP:
.RS
.nf
\fBprint This be a message >&$fd\fP
.fi
.RE
and on \fBhost2\fP:
.RS
.nf
\fBread \-r line <&$fd; print \-r \- $line\fP
.fi
.RE
prints `\fBThis be a message\fP\&'\&.
.PP
To tidy up, on \fBhost1\fP:
.RS
.nf
\fBztcp \-c $listenfd
ztcp \-c $fd\fP
.fi
.RE
and on \fBhost2\fP
.RS
.nf
\fBztcp \-c $fd\fP
.fi
.RE
.SH "THE ZSH/TERMCAP MODULE"
.\" Yodl file: Zsh/mod_termcap.yo

Da \fBzsh/termcap\fP module make available one builtin command:
.PP
.PD 0
.TP
.PD
\fBechotc\fP \fIcap\fP [ \fIarg\fP \&.\&.\&. ]
Output tha termcap value correspondin ta tha capability
\fIcap\fP, wit optionizzle arguments\&.
.PP
Da \fBzsh/termcap\fP module make available one parameter:
.PP
.PD 0
.TP
.PD
\fBtermcap\fP
An associatizzle array dat maps termcap capabilitizzle codes to
their joints\&.
.SH "THE ZSH/TERMINFO MODULE"
.\" Yodl file: Zsh/mod_terminfo.yo

Da \fBzsh/terminfo\fP module make available one builtin command:
.PP
.PD 0
.TP
.PD
\fBechoti\fP \fIcap\fP [ \fIarg\fP ]
Output tha terminfo value correspondin ta tha capability
\fIcap\fP, instantiated wit \fIarg\fP if applicable\&.
.PP
Da \fBzsh/terminfo\fP module make available one parameter:
.PP
.PD 0
.TP
.PD
\fBterminfo\fP
An associatizzle array dat maps terminfo capabilitizzle names to
their joints\&.
.SH "THE ZSH/ZFTP MODULE"
.\" Yodl file: Zsh/mod_zftp.yo

Da \fBzsh/zftp\fP module make available one builtin command:
.PP
.PD 0
.TP
.PD
\fBzftp\fP \fIsubcommand\fP [ \fIargs\fP ]
Da \fBzsh/zftp\fP module be a cold-ass lil client fo' FTP (file transfer protocol)\&.  It
is implemented as a funky-ass builtin ta allow full use of shell command line
editing, file I/O, n' thang control mechanisms\&.  Often, playas will
access it via shell functions providin a mo' bangin intercourse; a set is
provided wit tha \fBzsh\fP distribution n' is busted lyrics bout in
\fIzshzftpsys\fP(1)\&.  But fuck dat shiznit yo, tha word on tha street is dat tha \fBzftp\fP command is entirely usable up in its
own right\&.
.RS
.PP
All commandz consist of tha command name \fBzftp\fP followed by tha name
of a subcommand\&.  These is listed below\&.  Da return statuz of each
subcommand is supposed ta reflect tha success or failure of tha remote
operation\&.  See a thugged-out description of tha variable \fBZFTP_VERBOSE\fP for
more shiznit on how tha fuck responses from tha server may be printed\&.
.RE
.PP
.SS "Subcommands"
.PP
.PD 0
.TP
.PD
\fBopen\fP \fIhost\fP[\fB:\fP\fIport\fP] [ \fIuser\fP [ \fIpassword\fP [ \fIaccount\fP ] ] ]
Open a freshly smoked up FTP session ta \fIhost\fP, which may be tha name of a TCP/IP
connected host or a IP number up in tha standard dot notation\&.  If the
argument is up in tha form \fIhost\fP\fB:\fP\fIport\fP, open a cold-ass lil connection to
TCP port \fIport\fP instead of tha standard FTP port 21\&.  This may be
the name of a TCP steez or a number:  peep tha description of
\fBZFTP_PORT\fP below fo' mo' shiznit\&.
.RS
.PP
If IPv6 addresses up in colon format is used, tha \fIhost\fP should be
surrounded by quoted square brackets ta distinguish it from tha \fIport\fP,
for example \fB\&'[fe80::203:baff:fe02:8b56]'\fP\&.  For consistency dis is
allowed wit all formz of \fIhost\fP\&.
.PP
Remainin arguments is passed ta tha \fBlogin\fP subcommand\&.  Note that
if no arguments beyond \fIhost\fP is supplied, \fBopen\fP will \fInot\fP
automatically call \fBlogin\fP\&.  If no arguments at all is supplied,
\fBopen\fP will use tha parametas set by tha \fBparams\fP subcommand\&.
.PP
Afta a successful open, tha shell variablez \fBZFTP_HOST\fP, \fBZFTP_PORT\fP,
\fBZFTP_IP\fP n' \fBZFTP_SYSTEM\fP is available; peep `Variables\&'
below\&.
.RE
.TP
.PD 0
\fBlogin\fP [ \fIname\fP [ \fIpassword\fP [ \fIaccount\fP ] ] ]
.TP
.PD
\fBuser\fP [ \fIname\fP [ \fIpassword\fP [ \fIaccount\fP ] ] ]
Login tha user \fIname\fP wit parametas \fIpassword\fP n' \fIaccount\fP\&.
Any of tha parametas can be omitted, n' is ghon be read from standard
input if needed (\fIname\fP be always needed)\&.  If 
standard input be a terminal, a prompt fo' each one is ghon be printed on
standard error n' \fIpassword\fP aint gonna be echoed\&.  If any of the
parametas is not used, a warnin message is printed\&.
.RS
.PP
Afta a successful login, tha shell variablez \fBZFTP_USER\fP,
\fBZFTP_ACCOUNT\fP n' \fBZFTP_PWD\fP is available; peep `Variables\&'
below\&.
.PP
This command may be re\-issued when a user be already logged in, and
the server will first be reinitialized fo' a freshly smoked up user\&.
.RE
.TP
.PD 0
\fBparams\fP [ \fIhost\fP [ \fIuser\fP [ \fIpassword\fP [ \fIaccount\fP ] ] ] ]
.TP
.PD
\fBparams\fP \fB\-\fP
Store tha given parametas fo' a lata \fBopen\fP command wit no
arguments\&.  Only dem given on tha command line is ghon be remembered\&.
If no arguments is given, tha parametas currently set is printed,
although tha password will step tha fuck up as a line of stars; tha return status is
one if no parametas was set, zero otherwise\&.
.RS
.PP
Any of tha parametas may be specified as a `\fB?\fP\&', which
may need ta be quoted ta protect it from shell expansion\&.  In dis case,
the appropriate parameta is ghon be read from stdin as wit the
\fBlogin\fP subcommand, includin special handlin of \fIpassword\fP\&.  If the
`\fB?\fP\&' is followed by a string, dat is used as tha prompt fo' readin the
parameta instead of tha default message (any necessary punctuation and
whitespace should be included all up in tha end of tha prompt)\&.  Da first letter
of tha parameta (only) may be quoted wit a `\fB\e\fP\&'; hence a argument
\fB"\e\e$word"\fP guarantees dat tha strang from tha shell parameta \fB$word\fP
will be treated literally, whether or not it begins wit a `\fB?\fP\&'\&.
.PP
If instead a single `\fB\-\fP\&' is given, tha existin parameters, if any,
are deleted\&.  In dat case, callin \fBopen\fP wit no arguments will
cause a error\&.
.PP
Da list of parametas aint deleted afta a \fBclose\fP, however it
will be deleted if tha \fBzsh/zftp\fP module is unloaded\&.
.PP
For example,
.PP
.RS
.nf
\fBzftp params ftp\&.elsewhere\&.xx juser \&'?Password fo' juser: '\fP
.fi
.RE
.PP
will store tha host \fBftp\&.elsewhere\&.xx\fP n' tha user \fBjuser\fP and
then prompt tha user fo' tha correspondin password wit tha given prompt\&.
.RE
.TP
\fBtest\fP
Test tha connection; if tha server has reported
that it has closed tha connection (maybe cuz of a timeout), return
status 2; if no connection was open anyway, return status 1; else
return status 0\&.  Da \fBtest\fP subcommand is
silent, apart from lyrics printed by tha \fB$ZFTP_VERBOSE\fP
mechanism, or error lyrics if tha connection closes\&.  There is no
network overhead fo' dis test\&.
.RS
.PP
Da test is only supported on systems wit either the
\fBselect(2)\fP or
\fBpoll(2)\fP system calls; otherwise tha message `\fBnot
supported on dis system\fP\&' is printed instead\&.
.PP
Da \fBtest\fP subcommand will automatically be called all up in tha start of any
other subcommand fo' tha current session when a cold-ass lil connection is open\&.
.RE
.TP
\fBcd\fP \fIdirectory\fP
Change tha remote directory ta \fIdirectory\fP\&.  Also altas tha shell
variable \fBZFTP_PWD\fP\&.
.TP
\fBcdup\fP
Change tha remote directory ta tha one higher up in tha directory tree\&.
Note dat \fBcd \&.\&.\fP will also work erectly on non\-UNIX systems\&.
.TP
\fBdir\fP [ \fIargs\&.\&.\&.\fP ]
Give a (verbose) listin of tha remote directory\&.  Da \fIargs\fP are
passed directly ta tha server\&. Da command\&z behaviour is implementation
dependent yo, but a UNIX server will typically interpret \fIargs\fP as
arguments ta tha \fBls\fP command n' wit no arguments return the
result of `\fBls \-l\fP\&'\&. Da directory is listed ta standard output\&.
.TP
\fBls\fP [ \fIargs\fP ]
Give a (short) listin of tha remote directory\&.  With no \fIargs\fP,
produces a raw list of tha filez up in tha directory, one per line\&.
Otherwise, up ta vagariez of tha server implementation, behaves
similar ta \fBdir\fP\&.
.TP
\fBtype\fP [ \fItype\fP ]
Change tha type fo' tha transfer ta \fItype\fP, or print tha current type
if \fItype\fP be absent\&.  Da allowed joints is `\fBA\fP\&' (ASCII),
`\fBI\fP\&' (Image, i\&.e\&. binary), or `\fBB\fP' (a synonym fo' `\fBI\fP')\&.
.RS
.PP
Da FTP default fo' a transfer is ASCII\&.  But fuck dat shiznit yo, tha word on tha street is dat if \fBzftp\fP finds
that tha remote host be a UNIX machine wit 8\-bit byes, it will
automatically switch ta rockin binary fo' file transfers upon
\fBopen\fP\&.  This can subsequently be overridden\&.
.PP
Da transfer type is only passed ta tha remote host when a thugged-out data
connection is established; dis command involves no network overhead\&.
.RE
.TP
\fBascii\fP
Da same as \fBtype A\fP\&.
.TP
\fBbinary\fP
Da same as \fBtype I\fP\&.
.TP
\fBmode\fP [ \fBS\fP | \fBB\fP ]
Set tha mode type ta stream (\fBS\fP) or block (\fBB\fP)\&.  Stream mode is
the default; block mode aint widely supported\&.
.TP
.PD 0
\fBremote\fP \fIfiles\&.\&.\&.\fP
.TP
.PD
\fBlocal\fP [ \fIfiles\&.\&.\&.\fP ]
Print tha size n' last modification time of tha remote or local
files\&.  If there is mo' than one item on tha list, tha name of the
file is printed first\&.  Da first number is tha file size, tha second
is tha last modification time of tha file up in tha format
\fBCCYYMMDDhhmmSS\fP consistin of year, month, date, hour, minutes and
secondz up in GMT\&.  Note dat dis format, includin tha length, is
guaranteed, so dat time strings can be directly compared via the
\fB[[\fP builtin\&z \fB<\fP n' \fB>\fP operators, even if they is too long
to be represented as integers\&.
.RS
.PP
Not all servers support tha commandz fo' retrievin dis shiznit\&.
In dat case, tha \fBremote\fP command will print not a god damn thang n' return
status 2, compared wit status 1 fo' a gangbangin' file not found\&.
.PP
Da \fBlocal\fP command (but not \fBremote\fP) may be used wit no
arguments, up in which case tha shiznit be reppin examinin file
descriptor zero\&.  This is tha same ol' dirty file as peeped by a \fBput\fP command
with no further redirection\&.
.RE
.TP
\fBget\fP \fIfile\fP [\&.\&.\&.]
Retrieve all \fIfile\fPs from tha server, concatenatin them
and bustin  dem ta standard output\&.
.TP
\fBput\fP \fIfile\fP [\&.\&.\&.]
For each \fIfile\fP, read a gangbangin' file from standard input n' bust dat to
the remote host wit tha given name\&.
.TP
\fBappend\fP \fIfile\fP [\&.\&.\&.]
As \fBput\fP yo, but if tha remote \fIfile\fP already exists, data is
appended ta it instead of overwritin it\&.
.TP
.PD 0
\fBgetat\fP \fIfile\fP \fIpoint\fP
.TP
.PD 0
\fBputat\fP \fIfile\fP \fIpoint\fP
.TP
.PD
\fBappendat\fP \fIfile\fP \fIpoint\fP
Versionz of \fBget\fP, \fBput\fP n' \fBappend\fP which will start the
transfer all up in tha given \fIpoint\fP up in tha remote \fIfile\fP\&.  This is
useful fo' appendin ta a incomplete local file\&.  But fuck dat shiznit yo, tha word on tha street is dat note that
this mobilitizzle aint universally supported by servers (and aint quite
the behaviour specified by tha standard)\&.
.TP
\fBdelete\fP \fIfile\fP [\&.\&.\&.]
Delete tha list of filez on tha server\&.
.TP
\fBmkdir\fP \fIdirectory\fP
Smoke a freshly smoked up directory \fIdirectory\fP on tha server\&.
.TP
\fBrmdir\fP \fIdirectory\fP
Delete tha directory \fIdirectory\fP  on tha server\&.
.TP
\fBrename\fP \fIold\-name\fP \fInew\-name\fP
Rename file \fIold\-name\fP ta \fInew\-name\fP on tha server\&.
.TP
\fBsite\fP \fIargs\&.\&.\&.\fP
Send a host\-specific command ta tha server\&.  Yo ass will probably
only need dis if instructed by tha server ta use it\&.
.TP
\fBquote\fP \fIargs\&.\&.\&.\fP
Send tha raw FTP command sequence ta tha server\&.  Yo ass should be
familiar wit tha FTP command set as defined up in RFC959 before bustin
this\&.  Useful commandz may include \fBSTAT\fP n' \fBHELP\fP\&.  Note also
the mechanizzle fo' returnin lyrics as busted lyrics bout fo' tha variable
\fBZFTP_VERBOSE\fP below, up in particular dat all lyrics from the
control connection is busted ta standard error\&.
.TP
.PD 0
\fBclose\fP
.TP
.PD
\fBquit\fP
Close tha current data connection\&.  This unsets tha shell parameters
\fBZFTP_HOST\fP, \fBZFTP_PORT\fP, \fBZFTP_IP\fP, \fBZFTP_SYSTEM\fP, \fBZFTP_USER\fP,
\fBZFTP_ACCOUNT\fP, \fBZFTP_PWD\fP, \fBZFTP_TYPE\fP n' \fBZFTP_MODE\fP\&.
.TP
\fBsession\fP [ \fIsessname\fP ]
Allows multiple FTP sessions ta be used at once\&.  Da name of tha session
is a arbitrary strang of characters; tha default session is called
`\fBdefault\fP\&'\&.  If dis command is called without a argument, it will list
all tha current sessions; wit a argument, it will either switch ta the
existin session called \fIsessname\fP, or create a freshly smoked up session of dat name\&.
.RS
.PP
Each session rethugz tha statuz of tha connection, tha set of
connection\-specific shell parametas (the same set as is unset when a
connection closes, as given up in tha description of \fBclose\fP), n' any user
parametas specified wit tha \fBparams\fP subcommand\&.  Changin ta a
previous session restores dem joints; changin ta a freshly smoked up session
initialises dem up in tha same way as if \fBzftp\fP had just been loaded\&.  The
name of tha current session is given by tha parameta \fBZFTP_SESSION\fP\&.
.RE
.TP
\fBrmsession\fP [ \fIsessname\fP ]
Delete a session; if a name aint given, tha current session is deleted\&.
If tha current session is deleted, tha earliest existin session becomes
the freshly smoked up current session, otherwise tha current session aint chizzled\&.
If tha session bein deleted is tha only one, a freshly smoked up session called
`\fBdefault\fP\&' is pimped n' becomes tha current session; note dat dis is
a freshly smoked up session even if tha session bein deleted be also called
`\fBdefault\fP\&'\&. Well shiiiit, it is recommended dat sessions not be deleted while
background commandz which use \fBzftp\fP is still active\&.
.PP
.SS "Parameters"
Da followin shell parametas is used by \fBzftp\fP\&.  Currently none
of dem is special\&.
.PP
.PD 0
.TP
.PD
\fBZFTP_TMOUT\fP
Integer\&.  Da time up in secondz ta wait fo' a network operation to
complete before returnin a error\&.  If dis aint set when the
module is loaded, it is ghon be given tha default value 60\&.  A value of
zero turns off timeouts\&.  If a timeout occurs on tha control
connection it is ghon be closed\&.  Use a larger value if dis occurs too
frequently\&.
.TP
\fBZFTP_IP\fP
Readonly\&.  Da IP address of tha current connection up in dot notation\&.
.TP
\fBZFTP_HOST\fP
Readonly\&.  Da hostname of tha current remote server\&.  If tha host was
opened as a IP number, \fBZFTP_HOST\fP gotz nuff dat instead; this
saves tha overhead fo' a name lookup, as IP numbers is most commonly
used when a nameserver is unavailable\&.
.TP
\fBZFTP_PORT\fP
Readonly\&.  Da number of tha remote TCP port ta which tha connection is
open (even if tha port was originally specified as a named service)\&.
Usually dis is tha standard FTP port, 21\&.
.RS
.PP
In tha unlikely event dat yo' system aint gots tha appropriate
conversion functions, dis appears up in network byte order\&.  If your
system is lil\-endian, tha port then consistz of two swapped bytes n' the
standard port is ghon be reported as 5376\&.  In dat case, numeric ports passed
to \fBzftp open\fP will also need ta be up in dis format\&.
.RE
.TP
\fBZFTP_SYSTEM\fP
Readonly\&.  Da system type strang returned by tha server up in response
to a FTP \fBSYST\fP request\&.  Da most bangin-ass case be a string
beginnin \fB"UNIX Type: L8"\fP, which ensures maximum compatibility
with a local UNIX host\&.
.TP
\fBZFTP_TYPE\fP
Readonly\&.  Da type ta be used fo' data transfers , either `\fBA\fP\&' or
`\fBI\fP\&'\&.   Use tha \fBtype\fP subcommand ta chizzle this\&.
.TP
\fBZFTP_USER\fP
Readonly\&.  Da username currently logged in, if any\&.
.TP
\fBZFTP_ACCOUNT\fP
Readonly\&.  Da account name of tha current user, if any\&.  Most servers
do not require a account name\&.
.TP
\fBZFTP_PWD\fP
Readonly\&.  Da current directory on tha server\&.
.TP
\fBZFTP_CODE\fP
Readonly\&.  Da three digit code of tha last FTP reply from tha server
as a string\&.  This can still be read afta tha connection is closed, and
is not chizzled when tha current session chizzles\&.
.TP
\fBZFTP_REPLY\fP
Readonly\&.  Da last line of tha last reply busted by tha server\&.  This
can still be read afta tha connection is closed, n' aint chizzled when
the current session chizzles\&.
.TP
\fBZFTP_SESSION\fP
Readonly\&.  Da name of tha current FTP session; peep tha description of the
\fBsession\fP subcommand\&.
.TP
\fBZFTP_PREFS\fP
A strang of preferences fo' alterin aspectz of \fBzftp\fP\&z behaviour\&.
Each preference be a single character\&.  Da followin is defined:
.RS
.PP
.PD 0
.TP
.PD
\fBP\fP
Passive:  attempt ta make tha remote server initiate data transfers\&.
This is slightly mo' efficient than sendport mode\&.  If tha letter
\fBS\fP occurs lata up in tha string, \fBzftp\fP will use sendport mode if
passive mode aint available\&.
.TP
\fBS\fP
Sendport:  initiate transfers by tha FTP \fBPORT\fP command\&.  If this
occurs before any \fBP\fP up in tha string, passive mode aint NEVER gonna be
attempted\&.
.TP
\fBD\fP
Dumb:  use only tha bare minimum of FTP commands\&.  This prevents
the variablez \fBZFTP_SYSTEM\fP n' \fBZFTP_PWD\fP from bein set, and
will mean all connections default ta ASCII type\&.  It may prevent
\fBZFTP_SIZE\fP from bein set durin a transfer if tha server
does not bust it anyway (many servers do)\&.
.PP
If \fBZFTP_PREFS\fP aint set when \fBzftp\fP is loaded, it is ghon be set ta a
default of `\fBPS\fP\&', i\&.e\&. use passive mode if available, otherwise
fall back ta sendport mode\&.
.RE
.TP
\fBZFTP_VERBOSE\fP
A strang of digits between 0 n' 5 inclusive, specifyin which
responses from tha server should be printed\&.  All responses go to
standard error\&.  If any of tha numbers 1 ta 5 step tha fuck up in tha string,
raw responses from tha server wit reply codes beginnin wit that
digit is ghon be printed ta standard error\&.  Da first digit of tha three
digit reply code is defined by RFC959 ta correspond to:
.RS
.PP
.PD 0
.TP
.PD
1\&.
A positizzle preliminary reply\&.
.TP
2\&.
A positizzle completion reply\&.
.TP
3\&.
A positizzle intermediate reply\&.
.TP
4\&.
A transient wack completion reply\&.
.TP
5\&.
A permanent wack completion reply\&.
.PP
It should be noted that, fo' unknown reasons, tha reply `Service not
available\&', which forces termination of a cold-ass lil connection, is classified as
421, i\&.e\&. `transient negative\&', a bangin-ass interpretation of tha word
`transient\&'\&.
.PP
Da code 0 is special:  it indicates dat all but tha last line of
multiline replies read from tha server is ghon be printed ta standard
error up in a processed format\&.  By convention, servers use this
mechanizzle fo' bustin  shiznit fo' tha user ta read\&.  The
appropriate reply code, if it matches tha same ol' dirty response, takes
priority\&.
.PP
If \fBZFTP_VERBOSE\fP aint set when \fBzftp\fP is loaded, it will be
set ta tha default value \fB450\fP, i\&.e\&., lyrics destined fo' tha user
and all errors is ghon be printed\&.  A null strang is valid and
specifies dat no lyrics should be printed\&.
.RE
.PP
.SS "Functions"
.PP
.PD 0
.TP
.PD
\fBzftp_chpwd\fP
If dis function is set by tha user, it is called every last muthafuckin time the
directory chizzlez on tha server, includin when a user is logged
in, or when a cold-ass lil connection is closed\&.  In tha last case, \fB$ZFTP_PWD\fP
will be unset; otherwise it will reflect tha freshly smoked up directory\&.
.TP
\fBzftp_progress\fP
If dis function is set by tha user, it is ghon be called during
a \fBget\fP, \fBput\fP or \fBappend\fP operation each time sufficient data
has been received from tha host\&.  Durin a \fBget\fP, tha data is sent
to standard output, so it is vital dat dis function should write
to standard error or directly ta tha terminal, \fInot\fP ta standard
output\&.
.RS
.PP
When it is called wit a transfer up in progress, tha following
additionizzle shell parametas is set:
.PP
.PD 0
.TP
.PD
\fBZFTP_FILE\fP
Da name of tha remote file bein transferred from or to\&.
.TP
\fBZFTP_TRANSFER\fP
A \fBG\fP fo' a \fBget\fP operation n' a \fBP\fP fo' a \fBput\fP operation\&.
.TP
\fBZFTP_SIZE\fP
Da total size of tha complete file bein transferred:
the same as tha straight-up original gangsta value provided by the
\fBremote\fP n' \fBlocal\fP subcommandz fo' a particular file\&.
If tha server cannot supply dis value fo' a remote file being
retrieved, it aint gonna be set\&.  If input is from a pipe tha value may
be incorrect n' correspond simply ta a gangbangin' full pipe buffer\&.
.TP
\fBZFTP_COUNT\fP
Da amount of data so far transferred; a number between zero and
\fB$ZFTP_SIZE\fP, if dat is set\&.  This number be always available\&.
.PP
Da function is initially called wit \fBZFTP_TRANSFER\fP set
appropriately n' \fBZFTP_COUNT\fP set ta zero\&.  Afta tha transfer is
finished, tha function is ghon be called one mo' time with
\fBZFTP_TRANSFER\fP set ta \fBGF\fP or \fBPF\fP, up in case it wishes ta tidy
up\&.  It be otherwise never called twice wit tha same value of
\fBZFTP_COUNT\fP\&.
.PP
Sometimes tha progress meta may cause disruption\&.  It be up ta the
user ta decizzle whether tha function should be defined n' ta use
\fBunfunction\fP when necessary\&.
.RE
.PP
.SS "Problems"
.PP
A connection may not be opened up in tha left hand side of a pipe as this
occurs up in a subshell n' tha file shiznit aint updated up in tha main
shell\&.  In tha case of type or mode chizzlez or closin tha connection up in a
subshell, tha shiznit is returned but variablez is not updated until
the next call ta \fBzftp\fP\&.  Other status chizzlez up in subshells aint gonna be
reflected by chizzlez ta tha variablez (but should be otherwise harmless)\&.
.PP
Deletin sessions while a \fBzftp\fP command be actizzle up in tha background can
have unexpected effects, even if it do not use tha session bein deleted\&.
This is cuz all shell subprocesses share shiznit on tha state of
all connections, n' deletin a session chizzlez tha orderin of that
information\&.
.PP
On some operatin systems, tha control connection aint valid afta a
fork(), so dat operations up in subshells, on tha left hand side
of a pipeline, or up in tha background is not possible, as they should be\&.
This is presumably a funky-ass bug up in tha operatin system\&.
.SH "THE ZSH/ZLE MODULE"
.\" Yodl file: Zsh/mod_zle.yo

Da \fBzsh/zle\fP module gotz nuff tha Zsh Line Editor\&.  See
\fIzshzle\fP(1)\&.
.SH "THE ZSH/ZLEPARAMETER MODULE"
.\" Yodl file: Zsh/mod_zleparameter.yo

Da \fBzsh/zleparameter\fP module defines two special parametas dat can be 
used ta access internal shiznit of tha Zsh Line Editor (see
\fIzshzle\fP(1))\&.
.PP
.PD 0
.TP
.PD
\fBkeymaps\fP
This array gotz nuff tha namez of tha keymaps currently defined\&.
.TP
\fBwidgets\fP
This associatizzle array gotz nuff one entry per widget defined\&. Da name 
of tha widget is tha key n' tha value gives shiznit bout the
widget\&. Well shiiiit, it is either tha strang `\fBbuiltin\fP\&' fo' builtin widgets, a
strin of tha form `\fBuser:\fP\fIname\fP\&' fo' user\-defined widgets,
where \fIname\fP is tha name of tha shell function implementin the
widget, or it aint nuthin but a strang of tha form
`\fBcompletion:\fP\fItype\fP\fB:\fP\fIname\fP\&', fo' completion widgets\&. In
the last case \fItype\fP is tha name of tha builtin widgets the
completion widget imitates up in its behavior n' \fIname\fP is tha name
of tha shell function implementin tha completion widget\&.
.SH "THE ZSH/ZPROF MODULE"
.\" Yodl file: Zsh/mod_zprof.yo

When loaded, tha \fBzsh/zprof\fP causes shell functions ta be profiled\&.
Da profilin thangs up in dis biatch can be obtained wit tha \fBzprof\fP
builtin command made available by dis module\&.  There is no way ta turn 
profilin off other than unloadin tha module\&.
.PP
.PD 0
.TP
.PD
\fBzprof\fP [ \fB\-c\fP ]
Without tha \fB\-c\fP option, \fBzprof\fP lists profilin thangs up in dis biatch to
standard output\&.  Da format is comparable ta dat of commandz like
\fBgprof\fP\&.
.RS
.PP
At tha top there be a summary listin all functions dat was called
at least once\&.  This summary is sorted up in decreasin order of the
amount of time dropped up in each\&.  Da lines contain
the number of tha function up in order, which is used up in 
other partz of tha list up in suffixez of tha form
`\fB[\fP\fInum\fP\fB]\fP\&', then tha number of calls made ta tha function\&.
Da next three columns list tha time in
millisecondz dropped up in tha function n' its descendants, tha average
time up in millisecondz dropped up in tha function n' its descendants per
call n' tha cementage of time dropped up in all shell functions used in
this function n' its descendants\&.  Da followin three columns give
the same shiznit yo, but countin only tha time dropped up in tha function 
itself\&.  Da final column shows tha name of tha function\&.
.PP
Afta tha summary, detailed shiznit bout every last muthafuckin function dat was
invoked is listed, sorted up in decreasin order of tha amount of time spent
in each function n' its descendants\&.  Each of these entries consists of
descriptions fo' tha functions dat called tha function busted lyrics about, the
function itself, n' tha functions dat was called from it\&.  The
description fo' tha function itself has tha same ol' dirty format as up in tha summary
(and shows tha same ol' dirty shiznit)\&.  Da other lines don\&'t show tha number of
the function all up in tha beginnin n' have they function named indented to
make it easier ta distinguish tha line showin tha function busted lyrics bout in
the section from tha surroundin lines\&.
.PP
Da shiznit shown up in dis case be almost tha same as up in tha summary,
but only refers ta tha call hierarchy bein displayed\&.  For example, fo' a
callin function tha column showin tha total hustlin time lists tha time
spent up in tha busted lyrics bout function n' its descendants only fo' tha times when
it was called from dat particular callin function\&.  Likewise, fo' a
called function, dis columns lists tha total time dropped up in tha called
function n' its descendants only fo' tha times when dat shiznit was called from the
function busted lyrics about\&.
.PP
Also up in dis case, tha column showin tha number of calls ta a gangbangin' function
also shows a slash n' then tha total number of invocations made ta the
called function\&.
.PP
As long as tha \fBzsh/zprof\fP module is loaded, profilin is ghon be done and
multiple invocationz of tha \fBzprof\fP builtin command will show the
times n' numberz of calls since tha module was loaded\&.  With the
\fB\-c\fP option, tha \fBzprof\fP builtin command will reset its internal
countas n' aint gonna show tha listing\&.
.RE
.SH "THE ZSH/ZPTY MODULE"
.\" Yodl file: Zsh/mod_zpty.yo

Da \fBzsh/zpty\fP module offers one builtin:
.PP
.PD 0
.TP
.PD
\fBzpty\fP [ \fB\-e\fP ] [ \fB\-b\fP ] \fIname\fP [ \fIarg \&.\&.\&.\fP ]
Da arguments followin \fIname\fP is concatenated wit spaces between,
then executed as a cold-ass lil command, as if passed ta tha \fBeval\fP builtin\&.  The
command runs under a newly assigned pseudo\-terminal; dis is useful for
runnin commandz non\-interactively which expect a interactive
environment\&.  Da \fIname\fP aint part of tha command yo, but is used to
refer ta dis command up in lata calls ta \fBzpty\fP\&.
.RS
.PP
With tha \fB\-e\fP option, tha pseudo\-terminal is set up so dat input
charactas is echoed\&.
.PP
With tha \fB\-b\fP option, input ta n' output from tha pseudo\-terminal are
made non\-blocking\&.
.RE
.TP
\fBzpty\fP \fB\-d\fP [ \fInames\fP \&.\&.\&. ]
Da second form, wit tha \fB\-d\fP option, is used ta delete commands
previously started, by supplyin a list of they \fIname\fPs\&.  If no
\fInames\fP is given, all commandz is deleted\&.  Deletin a cold-ass lil command causes
the HUP signal ta be busted ta tha correspondin process\&.
.TP
\fBzpty\fP \fB\-w\fP [ \fB\-n\fP ] \fIname\fP [ \fIstrings \&.\&.\&.\fP ]
Da \fB\-w\fP option can be used ta bust tha ta command \fIname\fP tha given
\fIstrings\fP as input (separated by spaces)\&.  If tha \fB\-n\fP option is
\fInot\fP given, a newline be added all up in tha end\&.
.RS
.PP
If no \fIstrings\fP is provided, tha standard input is copied ta the
pseudo\-terminal; dis may stop before copyin tha full input if the
pseudo\-terminal is non\-blocking\&.
.PP
Note dat tha command under tha pseudo\-terminal sees dis input as if it
were typed, so beware when bustin  special tty driver charactas such as
word\-erase, line\-kill, n' end\-of\-file\&.
.RE
.TP
\fBzpty\fP \fB\-r\fP [ \fB\-mt\fP ] \fIname\fP [ \fIparam\fP [ \fIpattern\fP ] ]
Da \fB\-r\fP option can be used ta read tha output of tha command \fIname\fP\&.
With only a \fIname\fP argument, tha output read is copied ta tha standard
output\&.  Unless tha pseudo\-terminal is non\-blocking, copyin continues
until tha command under tha pseudo\-terminal exits; when non\-blocking, only
as much output as is immediately available is copied\&.  Da return status is
zero if any output is copied\&.
.RS
.PP
When also given a \fIparam\fP argument, at most one line is read n' stored
in tha parameta named \fIparam\fP\&.  Less than a gangbangin' full line may be read if
the pseudo\-terminal is non\-blocking\&.  Da return status is zero if at least
one characta is stored up in \fIparam\fP\&.
.PP
If a \fIpattern\fP is given as well, output is read until tha whole string
read matches tha \fIpattern\fP, even up in tha non\-blockin case\&.  Da return
status is zero if tha strang read matches tha pattern, or if tha command
has exited but at least one characta could still be read\&.  If tha option
\fB\-m\fP is present, tha return status is zero only if tha pattern matches\&.
Az of dis writing, a maximum of one megabyte of output can be consumed
this way; if a gangbangin' full megabyte is read without matchin tha pattern, the
return status is non\-zero\&.
.PP
In all cases, tha return status is non\-zero if not a god damn thang could be read, and
is \fB2\fP if dis is cuz tha command has finished\&.
.PP
If tha \fB\-r\fP option is combined wit tha \fB\-t\fP option, \fBzpty\fP tests
whether output be available before tryin ta read\&.  If no output is
available, \fBzpty\fP immediately returns tha status \fB1\fP\&.  When used
with a \fIpattern\fP, tha behaviour on a gangbangin' failed poll is similar to
when tha command has exited:  tha return value is zero if at least
one characta could still be read even if tha pattern failed ta match\&.
.RE
.TP
\fBzpty\fP \fB\-t\fP \fIname\fP
Da \fB\-t\fP option without tha \fB\-r\fP option can be used ta test
whether tha command \fIname\fP is still hustlin\&.  It returns a zero
status if tha command is hustlin n' a non\-zero value otherwise\&.
.TP
\fBzpty\fP [ \fB\-L\fP ]
Da last form, without any arguments, is used ta list tha commands
currently defined\&.  If tha \fB\-L\fP option is given, dis is done up in the
form of calls ta tha \fBzpty\fP builtin\&.
.SH "THE ZSH/ZSELECT MODULE"
.\" Yodl file: Zsh/mod_zselect.yo

Da \fBzsh/zselect\fP module make available one builtin command:
.PP
.PD 0
.TP
.PD
\fBzselect\fP [ \fB\-rwe\fP \fB\-t\fP \fItimeout\fP \fB\-a\fP \fIarray\fP ] [ \fIfd\fP \&.\&.\&. ]
Da \fBzselect\fP builtin be a gangbangin' front\-end ta tha `select\&' system call, which
blocks until a gangbangin' file descriptor is locked n loaded fo' readin or writing, or has an
error condition, wit a optionizzle timeout\&.  If dis aint available on
your system, tha command prints a error message n' returns status 2
(normal errors return status 1)\&.  For mo' shiznit, peep yo' systems
documentation fo' \fIselect\fP(3)\&.  Note there is no connection wit the
shell builtin of tha same name\&.
.RS
.PP
Arguments n' options may be intermingled up in any order\&.  Non\-option
arguments is file descriptors, which must be decimal integers\&.  By
default, file descriptors is ta be tested fo' reading, i\&.e\&. \fBzselect\fP
will return when data be available ta be read from tha file descriptor, or
more precisely, when a read operation from tha file descriptor will not
block\&.  Afta a \fB\-r\fP, \fB\-w\fP n' \fB\-e\fP, tha given file descriptors are
to be tested fo' reading, writing, or error conditions\&.  These options and
an arbitrary list of file descriptors may be given up in any order\&.
.PP
(Da presence of a `error condition\&' aint well defined up in the
documentation fo' nuff implementationz of tha select system call\&.
Accordin ta recent versionz of tha POSIX justification, it is straight-up an
\fIexception\fP condition, of which tha only standard example is out\-of\-band
data received on a socket\&.  So zsh playas is unlikely ta find tha \fB\-e\fP
option useful\&.)
.PP
Da option `\fB\-t\fP \fItimeout\fP\&' specifies a timeout up in hundredthz of a
second\&.  This may be zero, up in which case tha file descriptors will simply
be polled n' \fBzselect\fP will return immediately\&.  It be possible ta call
zselect wit no file descriptors n' a non\-zero timeout fo' use as a
finer\-grained replacement fo' `sleep\&'; note, however, tha return status is
always 1 fo' a timeout\&.
.PP
Da option `\fB\-a\fP \fIarray\fP\&' indicates dat \fBarray\fP should be set to
indicate tha file descriptor(s) which is ready\&.  If tha option
is not
given, tha array \fBreply\fP is ghon be used fo' dis purpose\&.  Da array will
contain a strang similar ta tha arguments fo' \fBzselect\fP\&.  For example,
.PP
.RS
.nf
\fBzselect \-t 0 \-r 0 \-w 1\fP
.fi
.RE
.PP
might return immediately wit status 0 n' \fB$reply\fP containin `\fB\-r 0 \-w
1\fP\&' ta show dat both file descriptors is locked n loaded fo' tha requested
operations\&.
.PP
Da option `\fB\-A\fP \fIassoc\fP\&' indicates dat tha associatizzle array
\fBassoc\fP should be set ta indicate tha file descriptor(s(
which is ready\&.  This option overrides tha option \fB\-a\fP, nor will
\fBreply\fP be modified\&.  Da keyz of \fBassoc\fP is tha file descriptors, and
the correspondin joints is any of tha charactas `\fBrwe\fP\&' ta indicate
the condition\&.
.PP
Da command returns status 0 if some file descriptors is locked n loaded for
reading\&.  If tha operation timed out, or a timeout of 0 was given n' no
file descriptors was ready, or there was a error, it returns status 1 and
the array aint gonna be set (nor modified up in any way)\&.  If there was a error
in tha select operation tha appropriate error message is printed\&.
.RE
.SH "THE ZSH/ZUTIL MODULE"
.\" Yodl file: Zsh/mod_zutil.yo

Da \fBzsh/zutil\fP module only addz some builtins:
.PP
.PD 0
.TP
.PD 0
\fBzstyle\fP [ \fB\-L\fP [ \fIpattern\fP [ \fIstyle\fP ] ] ]
.TP
.PD 0
\fBzstyle\fP [ \fB\-e\fP | \fB\-\fP | \fB\-\fP\fB\-\fP ] \fIpattern\fP \fIstyle\fP \fIstrings\fP \&.\&.\&.
.TP
.PD 0
\fBzstyle \-d\fP [ \fIpattern\fP [ \fIstyles\fP \&.\&.\&. ] ]
.TP
.PD 0
\fBzstyle \-g\fP \fIname\fP [ \fIpattern\fP [ \fIstyle\fP ] ]
.TP
.PD 0
\fBzstyle \-abs\fP \fIcontext\fP \fIstyle\fP \fIname\fP [ \fIsep\fP ]
.TP
.PD 0
\fBzstyle \-Tt\fP \fIcontext\fP \fIstyle\fP [ \fIstrings\fP \&.\&.\&.]
.TP
.PD
\fBzstyle \-m\fP \fIcontext\fP \fIstyle\fP \fIpattern\fP
This builtin command is used ta define n' lookup styles\&.  Stylez are
pairz of names n' joints, where tha joints consist of any number of
strings\&.  They is stored together wit patterns n' lookup is done by
givin a string, called tha `context\&', which is compared ta the
patterns\&.  Da definizzle stored fo' tha straight-up original gangsta matchin pattern is ghon be 
returned\&.
.RS
.PP
For orderin of comparisons, patterns is searched from most specific to
least specific, n' patterns dat is equally specific keep tha order up in 
which they was defined\&.  A pattern is considered ta be mo' specific
than another if it gotz nuff mo' components (substrings separated by
colons) or if tha patterns fo' tha components is mo' specific, where 
simple strings is considered ta be mo' specific than patterns and
complex patterns is considered ta be mo' specific than tha pattern
`\fB*\fP\&'\&.
.PP
Da first form (without arguments) lists tha definitions\&.  Styles
are shown up in alphabetic order n' patterns is shown up in tha order
\fBzstyle\fP will test them\&.
.PP
If tha \fB\-L\fP option is given, listin is done up in tha form of calls to
\fBzstyle\fP\&.  Da optionizzle first argument be a pattern which is ghon be matched
against tha strang supplied as tha pattern fo' tha context; note that
this means, fo' example, `\fBzstyle \-L ":completion:*"\fP\&' will
match any supplied pattern beginnin `\fB:completion:\fP\&', not
just \fB":completion:*"\fP:  use \fB":completion:\e*"\fP ta match that\&.
Da optionizzle second argument limits tha output ta a specific steez (not a
pattern)\&.  \fB\-L\fP aint compatible wit any other options\&.
.PP
Da other forms is tha following:
.PP
.PD 0
.TP
.PD
\fBzstyle\fP [ \fB\-\fP | \fB\-\fP\fB\-\fP | \fB\-e\fP ] \fIpattern\fP \fIstyle\fP \fIstrings\fP \&.\&.\&.
Defines tha given \fIstyle\fP fo' tha \fIpattern\fP wit tha \fIstrings\fP as
the value\&.  If tha \fB\-e\fP option is given, tha \fIstrings\fP will be
concatenated (separated by spaces) n' tha resultin strang will be
evaluated (in tha same way as it is done by tha \fBeval\fP builtin
command) when tha steez is looked up\&.  In dis case tha parameter
`\fBreply\fP\&' must be assigned ta set tha strings returned afta the
evaluation\&.  Before evaluatin tha value, \fBreply\fP is unset, and
if it is still unset afta tha evaluation, tha steez is treated as if
it was not set\&.
.TP
\fBzstyle \-d\fP [ \fIpattern\fP [ \fIstyles\fP \&.\&.\&. ] ]
Delete steez definitions\&. Without arguments all definitions is deleted,
with a \fIpattern\fP all definitions fo' dat pattern is deleted n' if
any \fIstyles\fP is given, then only dem stylez is deleted fo' the
\fIpattern\fP\&.
.TP
\fBzstyle \-g\fP \fIname\fP [ \fIpattern\fP [ \fIstyle\fP ] ]
Retrieve a steez definition\&. Da \fIname\fP is
used as tha name of a array up in which tha thangs up in dis biatch is stored\&. Without
any further arguments, all \fIpatterns\fP defined is returned\&. With a
\fIpattern\fP tha stylez defined fo' dat pattern is returned n' wit 
both a \fIpattern\fP n' a \fIstyle\fP, tha value stringz of that
combination is returned\&.
.PP
Da other forms can be used ta look up or test patterns\&.
.PP
.PD 0
.TP
.PD
\fBzstyle \-s\fP \fIcontext\fP \fIstyle\fP \fIname\fP [ \fIsep\fP ]
Da parameta \fIname\fP is set ta tha value of tha steez interpreted as a
string\&.  If tha value gotz nuff nuff muthafuckin strings they is concatenated with
spaces (or wit tha \fIsep\fP strang if dat is given) between them\&.
.TP
\fBzstyle \-b\fP \fIcontext\fP \fIstyle\fP \fIname\fP
Da value is stored up in \fIname\fP as a funky-ass boolean, i\&.e\&. as tha string
`\fByes\fP\&' if tha value has only one strang n' dat strang is equal ta one
of `\fByes\fP\&', `\fBtrue\fP', `\fBon\fP', or `\fB1\fP'\&. If tha value be any other
strin or has mo' than one string, tha parameta is set ta `\fBno\fP\&'\&.
.TP
\fBzstyle \-a\fP \fIcontext\fP \fIstyle\fP \fIname\fP
Da value is stored up in \fIname\fP as a array\&. If \fIname\fP is declared 
as a associatizzle array,  tha first, third, etc\&. strings is used as the
keys n' tha other strings is used as tha joints\&.
.TP
.PD 0
\fBzstyle \-t\fP \fIcontext\fP \fIstyle\fP [ \fIstrings\fP \&.\&.\&.]
.TP
.PD
\fBzstyle \-T\fP \fIcontext\fP \fIstyle\fP [ \fIstrings\fP \&.\&.\&.]
Test tha value of a style, i\&.e\&. tha \fB\-t\fP option only returns a status
(sets \fB$?\fP)\&.  Without any \fIstrings\fP tha return status is zero if the
style is defined fo' at least one matchin pattern, has only one strang in
its value, n' dat is equal ta one of `\fBtrue\fP\&', `\fByes\fP', `\fBon\fP' or
`\fB1\fP\&'\&. If any \fIstrings\fP is given tha status is zero if n' only if
at least one of tha \fIstrings\fP is equal ta at least one of tha strings
in tha value\&. If tha steez is defined but don\&'t match, tha return status
is \fB1\fP\&. If tha steez aint defined, tha status is \fB2\fP\&.
.RS
.PP
Da \fB\-T\fP option tests tha jointz of tha steez like \fB\-t\fP yo, but it
returns status zero (rather than \fB2\fP) if tha steez aint defined fo' any
matchin pattern\&.
.RE
.TP
\fBzstyle \-m\fP \fIcontext\fP \fIstyle\fP \fIpattern\fP
Match a value\&. Returns status zero if tha 
\fIpattern\fP matches at least one of tha strings up in tha value\&.
.RE
.TP
.PD 0
\fBzformat \-f\fP \fIparam\fP \fIformat\fP \fIspecs\fP \&.\&.\&.
.TP
.PD
\fBzformat \-a\fP \fIarray\fP \fIsep\fP \fIspecs\fP \&.\&.\&.
This builtin serves up two different formz of formatting\&. Da first form 
is selected wit tha \fB\-f\fP option\&. In dis case tha \fIformat\fP
strin is ghon be modified by replacin sequences startin wit a cement 
sign up in it wit strings from tha \fIspecs\fP\&.  Each \fIspec\fP should be
of tha form `\fIchar\fP\fB:\fP\fIstring\fP\&' which will cause every
appearizzle of tha sequence `\fB%\fP\fIchar\fP\&' up in \fIformat\fP ta be replaced 
by tha \fIstring\fP\&.  Da `\fB%\fP\&' sequence may also contain optional
minimum n' maximum field width justifications between tha `\fB%\fP\&' n' 
the `\fIchar\fP\&' up in tha form `\fB%\fP\fImin\fP\fB\&.\fP\fImax\fP\fBc\fP',
i\&.e\&. tha minimum field width is given first n' if tha maximum field
width is used, it has ta be preceded by a thugged-out dot\&.  Specifyin a minimum field
width make tha result be padded wit spaces ta tha right if the
\fIstring\fP is shorta than tha axed width\&.  Paddin ta tha left
can be  bigged up  by givin a wack minimum field width\&.  If a maximum 
field width is specified, tha \fIstring\fP is ghon be truncated afta that
many characters\&.  Afta all `\fB%\fP\&' sequences fo' tha given \fIspecs\fP
have been processed, tha resultin strang is stored up in tha parameter
\fIparam\fP\&.
.RS
.PP
Da \fB%\fP\-escapes also KNOW ternary expressions up in tha form used by
prompts\&.  Da \fB%\fP is followed by a `\fB(\fP\&' n' then a ordinary
format specifier characta as busted lyrics bout above\&.  There may be a set of
digits either before or afta tha `\fB(\fP\&'; these specify a test
number, which defaults ta zero\&.  Negatizzle numbers is also allowed\&.  An
arbitrary delimita characta bigs up tha format specifier, which is
followed by a piece of `true\&' text, tha delimita characta again, a piece
of `false\&' text, n' a cold-ass lil closin parenthesis\&.  Da complete expression
(without tha digits) thus looks like
`\fB%(\fP\fIX\fP\fB\&.\fP\fItext1\fP\fB\&.\fP\fItext2\fP\fB)\fP\&', except that
the `\fB\&.\fP\&' characta be arbitrary\&.  Da value given fo' tha format
specifier up in tha \fIchar\fP\fB:\fP\fIstring\fP expressions is evaluated as a
mathematical expression, n' compared wit tha test number\&.  If they are
the same, \fItext1\fP is output, else \fItext2\fP is output\&.  A parenthesis
may be escaped up in \fItext2\fP as \fB%)\fP\&.  Either of \fItext1\fP or
\fItext2\fP may contain nested \fB%\fP\-escapes\&.
.PP
For example:
.PP
.RS
.nf
\fBzformat \-f REPLY "Da answer is \&'%3(c\&.yes\&.no)'\&." c:3\fP
.fi
.RE
.PP
outputs "Da answer is \&'yes'\&." ta \fBREPLY\fP since tha value fo' tha format
specifier \fBc\fP is 3, agreein wit tha digit argument ta tha ternary
expression\&.
.PP
Da second form, rockin tha \fB\-a\fP option, can be used fo' aligning
strings\&.  Here, tha \fIspecs\fP iz of tha form
`\fIleft\fP\fB:\fP\fIright\fP\&' where `\fIleft\fP' n' `\fIright\fP' are
arbitrary strings\&.  These strings is modified by replacin tha colons
by tha \fIsep\fP strang n' paddin tha \fIleft\fP strings wit spaces 
to tha right so dat tha \fIsep\fP strings up in tha result (and hence tha 
\fIright\fP strings afta them) is all aligned if tha strings are
printed below each other\&.  All strings without a cold-ass lil colon is left
unchanged n' all strings wit a empty \fIright\fP strang have the
trailin colon removed\&.  In both cases tha lengthz of tha strings
are not used ta determine how tha fuck tha other strings is ta be aligned\&.
Da resultin strings is stored up in tha \fIarray\fP\&.
.RE
.TP
\fBzregexparse\fP
This implements some internalz of tha \fB_regex_arguments\fP function\&.
.TP
\fBzparseopts\fP [ \fB\-D\fP ] [ \fB\-K\fP ] [ \fB\-M\fP ] [ \fB\-E\fP ] [ \fB\-a\fP \fIarray\fP ] [ \fB\-A\fP \fIassoc\fP ] \fIspecs\fP
This builtin simplifies tha parsin of options up in positionizzle parameters,
i\&.e\&. tha set of arguments given by \fB$*\fP\&.  Each \fIspec\fP raps bout one
option n' must be of tha form `\fIopt\fP[\fB=\fP\fIarray\fP]\&'\&.  If a option
busted lyrics bout by \fIopt\fP is found up in tha positionizzle parametas it is copied
into tha \fIarray\fP specified wit tha \fB\-a\fP option; if tha optional
`\fB=\fP\fIarray\fP\&' is given, it is instead copied tha fuck into dat array\&.
.RS
.PP
Note dat it be a error ta give any \fIspec\fP without an
`\fB=\fP\fIarray\fP\&' unless one of tha \fB\-a\fP or \fB\-A\fP options is used\&.
.PP
Unless tha \fB\-E\fP option is given, parsin stops all up in tha straight-up original gangsta string
that isn\&'t busted lyrics bout by one of tha \fIspecs\fP\&.  Even wit \fB\-E\fP,
parsin always stops at a positionizzle parameta equal ta `\fB\-\fP\&' or
`\fB\-\fP\fB\-\fP\&'\&.
.PP
Da \fIopt\fP description must be one of tha following\&.  Any of tha special
charactas can step tha fuck up in tha option name provided it is preceded by a
backslash\&.
.PP
.PD 0
.TP
.PD 0
\fIname\fP
.TP
.PD
\fIname\fP\fB+\fP
Da \fIname\fP is tha name of tha option without tha leadin `\fB\-\fP\&'\&.  To
specify a GNU\-style long option, one of tha usual two leadin `\fB\-\fP\&' must
be included up in \fIname\fP; fo' example, a `\fB\-\fP\fB\-file\fP\&' option is
represented by a \fIname\fP of `\fB\-file\fP\&'\&.
.RS
.PP
If a `\fB+\fP\&' appears afta \fIname\fP, tha option be appended ta \fIarray\fP
each time it is found up in tha positionizzle parameters; without tha `\fB+\fP\&'
only tha \fIlast\fP occurrence of tha option is preserved\&.
.PP
If one of these forms is used, tha option takes no argument, so parsing
stops if tha next positionizzle parameta do not also begin wit `\fB\-\fP\&'
(unless tha \fB\-E\fP option is used)\&.
.RE
.TP
.PD 0
\fIname\fP\fB:\fP
.TP
.PD 0
\fIname\fP\fB:\-\fP
.TP
.PD
\fIname\fP\fB::\fP
If one or two colons is given, tha option takes a argument; wit one
colon, tha argument is mandatory n' wit two colons it is optional\&.  The
argument be appended ta tha \fIarray\fP afta tha option itself\&.
.RS
.PP
An optionizzle argument is put tha fuck into tha same array element as tha option name
(note dat dis make empty strings as arguments indistinguishable)\&.  A
mandatory argument be added as a separate element unless tha `\fB:\-\fP\&' form
is used, up in which case tha argument is put tha fuck into tha same element\&.
.PP
A `\fB+\fP\&' as busted lyrics bout above may step tha fuck up between tha \fIname\fP n' the
first colon\&.
.RE
.PP
Da optionz of \fBzparseopts\fP itself are:
.PP
.PD 0
.TP
.PD
\fB\-a\fP \fIarray\fP
As busted lyrics bout above, dis names tha default array up in which ta store the
recognised options\&.
.TP
\fB\-A\fP \fIassoc\fP
If dis is given, tha options n' they joints is also put tha fuck into an
associatizzle array wit tha option names as keys n' tha arguments (if any)
as tha joints\&.
.TP
\fB\-D\fP
If dis option is given, all options found is removed from tha positional
parametaz of tha callin shell or shell function, up ta but not including
any not busted lyrics bout by tha \fIspecs\fP\&.  This is similar ta rockin tha \fBshift\fP
builtin\&.
.TP
\fB\-K\fP
With dis option, tha arrays specified wit tha \fB\-a\fP option n' wit the
`\fB=\fP\fIarray\fP\&' forms is kept unchanged when none of tha \fIspecs\fP for
them is used\&.  Otherwise tha entire array is replaced when any of the
\fIspecs\fP is used\&.  Individual elementz of associatizzle arrays specified
with tha \fB\-A\fP option is preserved by \fB\-K\fP\&.  This allows assignment of
default joints ta arrays before callin \fBzparseopts\fP\&.
.TP
\fB\-M\fP
This chizzlez tha assignment rulez ta implement a map among equivalent
option names\&.  If any \fIspec\fP uses tha `\fB=\fP\fIarray\fP\&' form, the
strin \fIarray\fP is interpreted as tha name of another \fIspec\fP,
which is used ta chizzle where ta store tha joints\&.  If no other \fIspec\fP
is found, tha joints is stored as usual\&.  This chizzlez only tha way the
values is stored, not tha way \fB$*\fP is parsed, so thangs up in dis biatch may be
unpredictable if tha `\fIname\fP\fB+\fP\&' specifier is used inconsistently\&.
.TP
\fB\-E\fP
This chizzlez tha parsin rulez ta \fInot\fP stop all up in tha straight-up original gangsta string
that isn\&'t busted lyrics bout by one of tha \fIspec\fPs\&.  It can be used ta test
for or (if used together wit \fB\-D\fP) extract options n' their
arguments, ignorin all other options n' arguments dat may be up in the
positionizzle parameters\&.
.PP
For example,
.PP
.RS
.nf
\fBset \-\- \-a \-bx \-c y \-cs baz \-cend
zparseopts a=foo b:=bar c+:=bar\fP
.fi
.RE
.PP
will have tha effect of
.PP
.RS
.nf
\fBfoo=(\-a)
bar=(\-b x \-c y \-c z)\fP
.fi
.RE
.PP
Da arguments from `\fBbaz\fP\&' on aint gonna be used\&.
.PP
As a example fo' tha \fB\-E\fP option, consider:
.PP
.RS
.nf
\fBset \-\- \-a x \-b y \-c z arg1 arg2
zparseopts \-E \-D b:=bar\fP
.fi
.RE
.PP
will have tha effect of
.PP
.RS
.nf
\fBbar=(\-b y)
set \-\- \-a x \-c z arg1 arg2\fP
.fi
.RE
.PP
I\&.e\&., tha option \fB\-b\fP n' its arguments is taken from the
positionizzle parametas n' put tha fuck into tha array \fBbar\fP\&.
.PP
Da \fB\-M\fP option can be used like this:
.PP
.RS
.nf
\fBset \-\- \-a \-bx \-c y \-cs baz \-cend
zparseopts \-A bar \-M a=foo b+: c:=b\fP
.fi
.RE
.PP
to have tha effect of
.PP
.RS
.nf
\fBfoo=(\-a)
bar=(\-a \&'' \-b xyz)\fP
.fi
.RE
.RE
