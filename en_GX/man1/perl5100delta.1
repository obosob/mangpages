.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5100DELTA 1"
.TH PERL5100DELTA 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5100delta \- what tha fuck is freshly smoked up fo' perl 5.10.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document raps bout tha differences between tha 5.8.8 release and
the 5.10.0 release.
.PP
Many of tha bug fixes up in 5.10.0 was already peeped up in tha 5.8.X maintenance
releases; they is not duplicated here n' is documented up in tha set of
man pages named perl58[1\-8]?delta.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.ie n .SS "Da ""feature"" pragma"
.el .SS "Da \f(CWfeature\fP pragma"
.IX Subsection "Da feature pragma"
Da \f(CW\*(C`feature\*(C'\fR pragma is used ta enable freshly smoked up syntax dat would break Perl's
backwards-compatibilitizzle wit olda releasez of tha language. It aint nuthin but a lexical
pragma, like \f(CW\*(C`strict\*(C'\fR or \f(CW\*(C`warnings\*(C'\fR.
.PP
Currently tha followin freshly smoked up features is available: \f(CW\*(C`switch\*(C'\fR (addz a
switch statement), \f(CW\*(C`say\*(C'\fR (addz a \f(CW\*(C`say\*(C'\fR built-in function), n' \f(CW\*(C`state\*(C'\fR
(addz a \f(CW\*(C`state\*(C'\fR keyword fo' declarin \*(L"static\*(R" variables). Those
features is busted lyrics bout up in they own sectionz of dis document.
.PP
Da \f(CW\*(C`feature\*(C'\fR pragma be also implicitly loaded when you require a minimal
perl version (with tha \f(CW\*(C`use VERSION\*(C'\fR construct) pimped outa than, or equal
to, 5.9.5. Right back up in yo muthafuckin ass. See feature fo' details.
.SS "New \fB\-E\fP command-line switch"
.IX Subsection "New -E command-line switch"
\&\fB\-E\fR is equivalent ta \fB\-e\fR yo, but it implicitly enablez all
optionizzle features (like \f(CW\*(C`use feature ":5.10"\*(C'\fR).
.SS "Defined-or operator"
.IX Subsection "Defined-or operator"
A freshly smoked up operator \f(CW\*(C`//\*(C'\fR (defined-or) has been implemented.
Da followin expression:
.PP
.Vb 1
\&    $a // $b
.Ve
.PP
is merely equivalent to
.PP
.Vb 1
\&   defined $a , biatch? $a : $b
.Ve
.PP
and tha statement
.PP
.Vb 1
\&   $c //= $d;
.Ve
.PP
can now be used instead of
.PP
.Vb 1
\&   $c = $d unless defined $c;
.Ve
.PP
Da \f(CW\*(C`//\*(C'\fR operator has tha same ol' dirty precedence n' associativitizzle as \f(CW\*(C`||\*(C'\fR.
Special care has been taken ta ensure dat dis operator Do What Yo ass Mean
while not breakin oldschool code yo, but some edge cases involvin tha empty
regular expression may now parse differently.  See perlop for
details.
.SS "Switch n' Smart Match operator"
.IX Subsection "Switch n' Smart Match operator"
Perl 5 now has a switch statement. It aint nuthin but available when \f(CW\*(C`use feature
\&\*(Aqswitch\*(Aq\*(C'\fR is up in effect. This feature introduces three freshly smoked up keywords,
\&\f(CW\*(C`given\*(C'\fR, \f(CW\*(C`when\*(C'\fR, n' \f(CW\*(C`default\*(C'\fR:
.PP
.Vb 6
\&    given ($foo) {
\&        when (/^abc/) { $abc = 1; }
\&        when (/^def/) { $def = 1; }
\&        when (/^xyz/) { $xyz = 1; }
\&        default { $nothang = 1; }
\&    }
.Ve
.PP
A mo' complete description of how tha fuck Perl matches tha switch variable
against tha \f(CW\*(C`when\*(C'\fR conditions is given up in \*(L"Switch statements\*(R" up in perlsyn.
.PP
This kind of match is called \fIsmart match\fR, n' itz also possible ta use
it outside of switch statements, via tha freshly smoked up \f(CW\*(C`~~\*(C'\fR operator. Shiiit, dis aint no joke. Right back up in yo muthafuckin ass. See
\&\*(L"Smart matchin up in detail\*(R" up in perlsyn.
.PP
This feature was contributed by Robin Houston.
.SS "Regular expressions"
.IX Subsection "Regular expressions"
.IP "Recursive Patterns" 4
.IX Item "Recursive Patterns"
It be now possible ta write recursive patterns without rockin tha \f(CW\*(C`(??{})\*(C'\fR
construct. This freshly smoked up way is mo' efficient, n' up in nuff cases easier to
read.
.Sp
Each capturin parenthesis can now be treated as a independent pattern
that can be entered by rockin tha \f(CW\*(C`(?PARNO)\*(C'\fR syntax (\f(CW\*(C`PARNO\*(C'\fR standin for
\&\*(L"parenthesis number\*(R"). For example, tha followin pattern will match
nested balanced angle brackets:
.Sp
.Vb 10
\&    /
\&     ^                      # start of line
\&     (                      # start capture buffer 1
\&        <                   #   match a openin angle bracket
\&        (?:                 #   match one of:
\&            (?>             #     don\*(Aqt backtrack over tha inside of dis group
\&                [^<>]+      #       one or mo' non angle brackets
\&            )               #     end non backtrackin group
\&        |                   #     ... or ...
\&            (?1)            #     recurse ta bracket 1 n' try it again
\&        )*                  #   0 or mo' times.
\&        >                   #   match a cold-ass lil closin angle bracket
\&     )                      # end capture buffer one
\&     $                      # end of line
\&    /x
.Ve
.Sp
\&\s-1PCRE\s0 playas should note dat Perlz recursive regex feature allows
backtrackin tha fuck into a recursed pattern, whereas up in \s-1PCRE\s0 tha recursion is
atomic or \*(L"possessive\*(R" up in nature.  As up in tha example above, you can
add (?>) ta control dis selectively.  (Yves Orton)
.IP "Named Capture Buffers" 4
.IX Item "Named Capture Buffers"
It be now possible ta name capturin parenthesis up in a pattern n' refer to
the captured contents by name. Da namin syntax is \f(CW\*(C`(?<NAME>....)\*(C'\fR.
It aint nuthin but possible ta backreference ta a named buffer wit tha \f(CW\*(C`\ek<NAME>\*(C'\fR
syntax. In code, tha freshly smoked up magical hashes \f(CW\*(C`%+\*(C'\fR n' \f(CW\*(C`%\-\*(C'\fR can be used to
access tha contentz of tha capture buffers.
.Sp
Thus, ta replace all doubled chars wit a single copy, one could write
.Sp
.Vb 1
\&    s/(?<letter>.)\ek<letter>/$+{letter}/g
.Ve
.Sp
Only buffers wit defined contents is ghon be \*(L"visible\*(R" up in tha \f(CW\*(C`%+\*(C'\fR hash, so
itz possible ta do suttin' like
.Sp
.Vb 3
\&    foreach mah $name (keys %+) {
\&        print "content of buffer \*(Aq$name\*(Aq is $+{$name}\en";
\&    }
.Ve
.Sp
Da \f(CW\*(C`%\-\*(C'\fR hash be a lil' bit mo' complete, since it will contain array refs
holdin joints from all capture buffers similarly named, if there should
be nuff of em.
.Sp
\&\f(CW\*(C`%+\*(C'\fR n' \f(CW\*(C`%\-\*(C'\fR is implemented as tied hashes all up in tha freshly smoked up module
\&\f(CW\*(C`Tie::Hash::NamedCapture\*(C'\fR.
.Sp
Users exposed ta tha .NET regex engine will find dat tha perl
implementation differs up in dat tha numerical orderin of tha buffers
is sequential, n' not \*(L"unnamed first, then named\*(R". Thus up in tha pattern
.Sp
.Vb 1
\&   /(A)(?<B>B)(C)(?<D>D)/
.Ve
.Sp
\&\f(CW$1\fR is ghon be 'A', \f(CW$2\fR is ghon be 'B', \f(CW$3\fR is ghon be 'C' n' \f(CW$4\fR is ghon be 'D' n' not
\&\f(CW$1\fR is 'A', \f(CW$2\fR is 'C' n' \f(CW$3\fR is 'B' n' \f(CW$4\fR is 'D' dat a .NET programmer
would expect. This is considered a gangbangin' feature. :\-) (Yves Orton)
.IP "Possessive Quantifiers" 4
.IX Item "Possessive Quantifiers"
Perl now supports tha \*(L"possessive quantifier\*(R" syntax of tha \*(L"atomic match\*(R"
pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. Basically a possessive quantifier matches as much as it can n' never
gives any back. Thus it can be used ta control backtracking. Da syntax is
similar ta non-greedy matching, except instead of rockin a '?' as tha modifier
the '+' is used. Y'all KNOW dat shit, muthafucka! Thus \f(CW\*(C`?+\*(C'\fR, \f(CW\*(C`*+\*(C'\fR, \f(CW\*(C`++\*(C'\fR, \f(CW\*(C`{min,max}+\*(C'\fR is now legal
quantifiers. (Yves Orton)
.IP "Backtrackin control verbs" 4
.IX Item "Backtrackin control verbs"
Da regex engine now supports a fuckin shitload of special-purpose backtrack
control verbs: (*THEN), (*PRUNE), (*MARK), (*SKIP), (*COMMIT), (*FAIL)
and (*ACCEPT). Right back up in yo muthafuckin ass. See perlre fo' they descriptions. (Yves Orton)
.IP "Relatizzle backreferences" 4
.IX Item "Relatizzle backreferences"
A freshly smoked up syntax \f(CW\*(C`\eg{N}\*(C'\fR or \f(CW\*(C`\egN\*(C'\fR where \*(L"N\*(R" be a thugged-out decimal integer allows a
safer form of back-reference notation as well as allowin relative
backreferences. This should make it easier ta generate n' embed patterns
that contain backreferences. Right back up in yo muthafuckin ass. See \*(L"Capture buffers\*(R" up in perlre. (Yves Orton)
.ie n .IP """\eK"" escape" 4
.el .IP "\f(CW\eK\fR escape" 4
.IX Item "K escape"
Da functionalitizzle of Jeff Pinyanz module Regexp::Keep has been added to
the core. In regular expressions you can now use tha special escape \f(CW\*(C`\eK\*(C'\fR
as a way ta do suttin' like floatin length positizzle lookbehind. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is
also useful up in substitutions like:
.Sp
.Vb 1
\&  s/(foo)bar/$1/g
.Ve
.Sp
that can now be converted to
.Sp
.Vb 1
\&  s/foo\eKbar//g
.Ve
.Sp
which is much mo' efficient. (Yves Orton)
.IP "Vertical n' horizontal whitespace, n' linebreak" 4
.IX Item "Vertical n' horizontal whitespace, n' linebreak"
Regular expressions now recognize tha \f(CW\*(C`\ev\*(C'\fR n' \f(CW\*(C`\eh\*(C'\fR escapes dat match
vertical n' horizontal whitespace, respectively. \f(CW\*(C`\eV\*(C'\fR n' \f(CW\*(C`\eH\*(C'\fR
logically match they complements.
.Sp
\&\f(CW\*(C`\eR\*(C'\fR matches a generic linebreak, dat is, vertical whitespace, plus
the multi-characta sequence \f(CW"\ex0D\ex0A"\fR.
.ie n .SS """say()"""
.el .SS "\f(CWsay()\fP"
.IX Subsection "say()"
\&\fIsay()\fR be a freshly smoked up built-in, only available when \f(CW\*(C`use feature \*(Aqsay\*(Aq\*(C'\fR is in
effect, dat is similar ta \fIprint()\fR yo, but dat implicitly appendz a newline
to tha printed string. Right back up in yo muthafuckin ass. See \*(L"say\*(R" up in perlfunc. (Robin Houston)
.ie n .SS "Lexical $_"
.el .SS "Lexical \f(CW$_\fP"
.IX Subsection "Lexical $_"
Da default variable \f(CW$_\fR can now be lexicalized, by declarin it like
any other lexical variable, wit a simple
.PP
.Vb 1
\&    mah $_;
.Ve
.PP
Da operations dat default on \f(CW$_\fR will use tha lexically-scoped
version of \f(CW$_\fR when it exists, instead of tha global \f(CW$_\fR.
.PP
In a \f(CW\*(C`map\*(C'\fR or a \f(CW\*(C`grep\*(C'\fR block, if \f(CW$_\fR was previously my'ed, then the
\&\f(CW$_\fR inside tha block is lexical as well (and scoped ta tha block).
.PP
In a scope where \f(CW$_\fR has been lexicalized, you can still have access to
the global version of \f(CW$_\fR by rockin \f(CW$::_\fR, or, mo' simply, by
overridin tha lexical declaration wit \f(CW\*(C`our $_\*(C'\fR. (Rafael Garcia-Suarez)
.ie n .SS "Da ""_"" prototype"
.el .SS "Da \f(CW_\fP prototype"
.IX Subsection "Da _ prototype"
A freshly smoked up prototype characta has been added. Y'all KNOW dat shit, muthafucka! \f(CW\*(C`_\*(C'\fR is equivalent ta \f(CW\*(C`$\*(C'\fR but
defaults ta \f(CW$_\fR if tha correspondin argument aint supplied (both \f(CW\*(C`$\*(C'\fR
and \f(CW\*(C`_\*(C'\fR denote a scalar). Cuz of tha optionizzle nature of tha argument, 
you can only use it all up in tha end of a prototype, or before a semicolon.
.PP
This has a lil' small-ass incompatible consequence: tha \fIprototype()\fR function has
been adjusted ta return \f(CW\*(C`_\*(C'\fR fo' some built-ins up in appropriate cases (for
example, \f(CW\*(C`prototype(\*(AqCORE::rmdir\*(Aq)\*(C'\fR). (Rafael Garcia-Suarez)
.SS "\s-1UNITCHECK\s0 blocks"
.IX Subsection "UNITCHECK blocks"
\&\f(CW\*(C`UNITCHECK\*(C'\fR, a freshly smoked up special code block has been introduced, up in addizzle to
\&\f(CW\*(C`BEGIN\*(C'\fR, \f(CW\*(C`CHECK\*(C'\fR, \f(CW\*(C`INIT\*(C'\fR n' \f(CW\*(C`END\*(C'\fR.
.PP
\&\f(CW\*(C`CHECK\*(C'\fR n' \f(CW\*(C`INIT\*(C'\fR blocks, while useful fo' some specialized purposes,
are always executed all up in tha transizzle between tha compilation n' the
execution of tha main program, n' thus is useless whenever code is
loaded at runtime. On tha other hand, \f(CW\*(C`UNITCHECK\*(C'\fR blocks is executed
just afta tha unit which defined dem has been compiled. Y'all KNOW dat shit, muthafucka! See perlmod
for mo' shiznit. I aint talkin' bout chicken n' gravy biatch. (Alex Gough)
.ie n .SS "New Pragma, ""mro"""
.el .SS "New Pragma, \f(CWmro\fP"
.IX Subsection "New Pragma, mro"
A freshly smoked up pragma, \f(CW\*(C`mro\*(C'\fR (for Method Resolution Order) has been added. Y'all KNOW dat shit, muthafucka! It
permits ta switch, on a per-class basis, tha algorithm dat perl uses to
find inherited methodz up in case of a multiple inheritizzle hierarchy. The
default \s-1MRO\s0 aint chizzled (\s-1DFS,\s0 fo' Depth First Search) fo' realz. Another \s-1MRO\s0 is
available: tha C3 algorithm. Right back up in yo muthafuckin ass. See mro fo' mo' shiznit.
(Brandon Black)
.PP
Note that, cuz of chizzlez up in tha implementation of class hierarchy search,
code dat used ta undef tha \f(CW*ISA\fR glob will most probably break fo' realz. Anyway,
undef'in \f(CW*ISA\fR had tha side-effect of removin tha magic on tha \f(CW@ISA\fR
array n' should not done been done up in tha straight-up original gangsta place fo' realz. Also, the
cache \f(CW*::ISA::CACHE::\fR no longer exists; ta force reset tha \f(CW@ISA\fR cache,
you now need ta use tha \f(CW\*(C`mro\*(C'\fR \s-1API,\s0 or mo' simply ta assign ta \f(CW@ISA\fR
(e.g. wit \f(CW\*(C`@ISA = @ISA\*(C'\fR).
.ie n .SS "\fIreaddir()\fP may return a ""short filename"" on Windows"
.el .SS "\fIreaddir()\fP may return a ``short filename'' on Windows"
.IX Subsection "readdir() may return a gangbangin' finger-lickin' dirty-ass short filename on Windows"
Da \fIreaddir()\fR function may return a \*(L"short filename\*(R" when tha long
filename gotz nuff charactas outside tha \s-1ANSI\s0 codepage.  Similarly
\&\fICwd::cwd()\fR may return a gangbangin' finger-lickin' dirty-ass short directory name, n' \fIglob()\fR may return short
names as well.  On tha \s-1NTFS\s0 file system these short names can always be
represented up in tha \s-1ANSI\s0 codepage.  This aint gonna be legit fo' all other file
system drivers; e.g. tha \s-1FAT\s0 filesystem stores short filenames up in tha \s-1OEM\s0
codepage, so some filez on \s-1FAT\s0 volumes remain unaccessible all up in the
\&\s-1ANSI\s0 APIs.
.PP
Similarly, $^X, \f(CW@INC\fR, n' \f(CW$ENV\fR{\s-1PATH\s0} is preprocessed at startup ta make
sure all paths is valid up in tha \s-1ANSI\s0 codepage (if possible).
.PP
Da \fIWin32::GetLongPathName()\fR function now returns tha \s-1UTF\-8\s0 encoded
correct long file name instead of rockin replacement charactas ta force
the name tha fuck into tha \s-1ANSI\s0 codepage.  Da freshly smoked up \fIWin32::GetANSIPathName()\fR
function can be used ta turn a long-ass pathname tha fuck into a gangbangin' finger-lickin' dirty-ass short one only if the
long one cannot be represented up in tha \s-1ANSI\s0 codepage.
.PP
Many other functions up in tha \f(CW\*(C`Win32\*(C'\fR module done been improved ta accept
\&\s-1UTF\-8\s0 encoded arguments, n' you can put dat on yo' toast.  Please peep Win32 fo' details.
.SS "\fIreadpipe()\fP is now overridable"
.IX Subsection "readpipe() is now overridable"
Da built-in function \fIreadpipe()\fR is now overridable. Overridin it permits
also ta override its operator counterpart, \f(CW\*(C`qx//\*(C'\fR (a.k.a. \f(CW\*(C`\`\`\*(C'\fR).
Mo'over, it now defaults ta \f(CW$_\fR if no argument is provided. Y'all KNOW dat shit, muthafucka! (Rafael
Garcia-Suarez)
.SS "Default argument fo' \fIreadline()\fP"
.IX Subsection "Default argument fo' readline()"
\&\fIreadline()\fR now defaults ta \f(CW*ARGV\fR if no argument is provided. Y'all KNOW dat shit, muthafucka! (Rafael
Garcia-Suarez)
.SS "\fIstate()\fP variables"
.IX Subsection "state() variables"
A freshly smoked up class of variablez has been introduced. Y'all KNOW dat shit, muthafucka! State variablez is similar
to \f(CW\*(C`my\*(C'\fR variablez yo, but is declared wit tha \f(CW\*(C`state\*(C'\fR keyword up in place of
\&\f(CW\*(C`my\*(C'\fR. They're visible only up in they lexical scope yo, but they value is
persistent: unlike \f(CW\*(C`my\*(C'\fR variables, they not undefined at scope entry,
but retain they previous value. (Rafael Garcia-Suarez, Nicholas Clark)
.PP
To use state variables, one need ta enable dem by using
.PP
.Vb 1
\&    use feature \*(Aqstate\*(Aq;
.Ve
.PP
or by rockin tha \f(CW\*(C`\-E\*(C'\fR command-line switch up in one-liners.
See \*(L"Persistent Private Variables\*(R" up in perlsub.
.SS "Stacked filetest operators"
.IX Subsection "Stacked filetest operators"
As a freshly smoked up form of syntactic sugar, itz now possible ta stack up filetest
operators. Yo ass can now write \f(CW\*(C`\-f \-w \-x $file\*(C'\fR up in a row ta mean
\&\f(CW\*(C`\-x $file && \-w _ && \-f _\*(C'\fR. Right back up in yo muthafuckin ass. See \*(L"\-X\*(R" up in perlfunc.
.SS "\s-1\fIUNIVERSAL::DOES\s0()\fP"
.IX Subsection "UNIVERSAL::DOES()"
Da \f(CW\*(C`UNIVERSAL\*(C'\fR class has a freshly smoked up method, \f(CW\*(C`DOES()\*(C'\fR. Well shiiiit, it has been added to
solve semantic problems wit tha \f(CW\*(C`isa()\*(C'\fR method. Y'all KNOW dat shit, muthafucka! \f(CW\*(C`isa()\*(C'\fR checks for
inheritance, while \f(CW\*(C`DOES()\*(C'\fR has been designed ta be overridden when
module authors use other typez of relations between classes (in addition
to inheritance). (chromatic)
.PP
See \*(L"$obj\->\s-1DOES\s0( \s-1ROLE \s0)\*(R" up in \s-1UNIVERSAL\s0.
.SS "Formats"
.IX Subsection "Formats"
Formats was improved up in nuff muthafuckin ways fo' realz. A freshly smoked up field, \f(CW\*(C`^*\*(C'\fR, can be used for
variable-width, one-line-at-a-time text. Null charactas is now handled
correctly up in picture lines. Usin \f(CW\*(C`@#\*(C'\fR n' \f(CW\*(C`~~\*(C'\fR together will now
produce a cold-ass lil compile-time error, as dem format fieldz is incompatible.
perlform has been improved, n' miscellaneous bugs fixed.
.SS "Byte-order modifiers fo' \fIpack()\fP n' \fIunpack()\fP"
.IX Subsection "Byte-order modifiers fo' pack() n' unpack()"
There is two freshly smoked up byte-order modifiers, \f(CW\*(C`>\*(C'\fR (big-endian) n' \f(CW\*(C`<\*(C'\fR
(lil-endian), dat can be appended ta most \fIpack()\fR n' \fIunpack()\fR template
charactas n' crews ta force a cold-ass lil certain byte-order fo' dat type or group.
See \*(L"pack\*(R" up in perlfunc n' perlpacktut fo' details.
.ie n .SS """no VERSION"""
.el .SS "\f(CWno VERSION\fP"
.IX Subsection "no VERSION"
Yo ass can now use \f(CW\*(C`no\*(C'\fR followed by a version number ta specify dat you
wanna bust a version of perl olda than tha specified one.
.ie n .SS """chdir"", ""chmod"" n' ""chown"" on filehandles"
.el .SS "\f(CWchdir\fP, \f(CWchmod\fP n' \f(CWchown\fP on filehandles"
.IX Subsection "chdir, chmod n' chown on filehandles"
\&\f(CW\*(C`chdir\*(C'\fR, \f(CW\*(C`chmod\*(C'\fR n' \f(CW\*(C`chown\*(C'\fR can now work on filehandlez as well as
filenames, if tha system supports respectively \f(CW\*(C`fchdir\*(C'\fR, \f(CW\*(C`fchmod\*(C'\fR and
\&\f(CW\*(C`fchown\*(C'\fR, props ta a patch provided by Gisle Aas.
.SS "\s-1OS\s0 groups"
.IX Subsection "OS groups"
\&\f(CW$(\fR n' \f(CW$)\fR now return crews up in tha order where tha \s-1OS\s0 returns them,
thanks ta Gisle Aas. This wasn't previously tha case.
.SS "Recursive sort subs"
.IX Subsection "Recursive sort subs"
Yo ass can now use recursive subroutines wit \fIsort()\fR, props ta Robin Houston.
.SS "Exceptions up in constant folding"
.IX Subsection "Exceptions up in constant folding"
Da constant foldin routine is now wrapped up in a exception handlez, and
if foldin throws a exception (like fuckin attemptin ta evaluate 0/0), perl
now retains tha current optree, rather than abortin tha whole program.
Without dis chizzle, programs would not compile if they had expressions that
happened ta generate exceptions, even though dem expressions was up in code
that could never be reached at runtime. (Nicholas Clark, Dizzle Mitchell)
.ie n .SS "Source filtas up in @INC"
.el .SS "Source filtas up in \f(CW@INC\fP"
.IX Subsection "Source filtas up in @INC"
It aint nuthin but possible ta enhizzle tha mechanizzle of subroutine hooks up in \f(CW@INC\fR by
addin a source filta on top of tha filehandle opened n' returned by the
hook. This feature was planned a long-ass time ago yo, but wasn't like working
until now, nahmeean, biatch? Right back up in yo muthafuckin ass. See \*(L"require\*(R" up in perlfunc fo' details. (Nicholas Clark)
.SS "New internal variables"
.IX Subsection "New internal variables"
.ie n .IP """${^RE_DEBUG_FLAGS}""" 4
.el .IP "\f(CW${^RE_DEBUG_FLAGS}\fR" 4
.IX Item "${^RE_DEBUG_FLAGS}"
This variable controls what tha fuck debug flags is up in effect fo' tha regular
expression engine when hustlin under \f(CW\*(C`use re "debug"\*(C'\fR. Right back up in yo muthafuckin ass. See re for
details.
.ie n .IP """${^CHILD_ERROR_NATIVE}""" 4
.el .IP "\f(CW${^CHILD_ERROR_NATIVE}\fR" 4
.IX Item "${^CHILD_ERROR_NATIVE}"
This variable gives tha natizzle status returned by tha last pipe close,
backtick command, successful call ta \fIwait()\fR or \fIwaitpid()\fR, or from the
\&\fIsystem()\fR operator. Shiiit, dis aint no joke. Right back up in yo muthafuckin ass. See perlvar fo' details. (Contributed by Gisle Aas.)
.ie n .IP """${^RE_TRIE_MAXBUF}""" 4
.el .IP "\f(CW${^RE_TRIE_MAXBUF}\fR" 4
.IX Item "${^RE_TRIE_MAXBUF}"
See \*(L"Trie optimisation of literal strang alternations\*(R".
.ie n .IP """${^WIN32_SLOPPY_STAT}""" 4
.el .IP "\f(CW${^WIN32_SLOPPY_STAT}\fR" 4
.IX Item "${^WIN32_SLOPPY_STAT}"
See \*(L"Sloppy stat on Windows\*(R".
.SS "Miscellaneous"
.IX Subsection "Miscellaneous"
\&\f(CW\*(C`unpack()\*(C'\fR now defaults ta unpackin tha \f(CW$_\fR variable.
.PP
\&\f(CW\*(C`mkdir()\*(C'\fR without arguments now defaults ta \f(CW$_\fR.
.PP
Da internal dump output has been improved, so dat non-printable characters
like fuckin newline n' backspace is output up in \f(CW\*(C`\ex\*(C'\fR notation, rather than
octal.
.PP
Da \fB\-C\fR option can no longer be used on tha \f(CW\*(C`#!\*(C'\fR line. Well shiiiit, it wasn't
workin there anyway, since tha standard streams is already set up
at dis point up in tha execution of tha perl interpreter n' shit. Yo ass can use
\&\fIbinmode()\fR instead ta git tha desired behaviour.
.SS "\s-1UCD 5.0.0\s0"
.IX Subsection "UCD 5.0.0"
Da copy of tha Unicode Characta Database included up in Perl 5 has
been updated ta version 5.0.0.
.SS "\s-1MAD\s0"
.IX Subsection "MAD"
\&\s-1MAD,\s0 which standz fo' \fIMiscellaneous Attribute Decoration\fR, be a
still-in-development work leadin ta a Perl 5 ta Perl 6 converter n' shit. To
enable it, itz necessary ta pass tha argument \f(CW\*(C`\-Dmad\*(C'\fR ta Configure. The
obtained perl aint binary compatible wit a regular perl 5.10, n' has
space n' speed penalties; moreover not all regression tests still pass
with dat shit. (Larry Wall, Nicholas Clark)
.SS "\fIkill()\fP on Windows"
.IX Subsection "kill() on Windows"
On Windows platforms, \f(CW\*(C`kill(\-9, $pid)\*(C'\fR now kills a process tree.
(On Unix, dis delivers tha signal ta all processes up in tha same process
group.)
.SH "Incompatible Chizzles"
.IX Header "Incompatible Chizzles"
.SS "Packin n' \s-1UTF\-8\s0 strings"
.IX Subsection "Packin n' UTF-8 strings"
Da semantics of \fIpack()\fR n' \fIunpack()\fR regardin UTF\-8\-encoded data has been
changed. Y'all KNOW dat shit, muthafucka! Processin is now by default characta per characta instead of
byte per byte on tha underlyin encoding. Notably, code dat used thangs
like \f(CW\*(C`pack("a*", $string)\*(C'\fR ta peep all up in tha encodin of strang will now
simply git back tha original gangsta \f(CW$string\fR. Packed strings can also git upgraded
durin processin when you store upgraded characters. Yo ass can git tha old
behaviour by rockin \f(CW\*(C`use bytes\*(C'\fR.
.PP
To be consistent wit \fIpack()\fR, tha \f(CW\*(C`C0\*(C'\fR up in \fIunpack()\fR templates indicates
that tha data is ta be processed up in characta mode, i.e. characta by
character; on tha contrary, \f(CW\*(C`U0\*(C'\fR up in \fIunpack()\fR indicates \s-1UTF\-8\s0 mode, where
the packed strang is processed up in its UTF\-8\-encoded Unicode form on a funky-ass byte
by byte basis. This is reversed wit regard ta perl 5.8.X yo, but now consistent
between \fIpack()\fR n' \fIunpack()\fR.
.PP
Mo'over, \f(CW\*(C`C0\*(C'\fR n' \f(CW\*(C`U0\*(C'\fR can also be used up in \fIpack()\fR templates ta specify
respectively characta n' byte modes.
.PP
\&\f(CW\*(C`C0\*(C'\fR n' \f(CW\*(C`U0\*(C'\fR up in tha middle of a pack or unpack format now switch ta the
specified encodin mode, honorin parens grouping. Previously, parens were
ignored.
.PP
Also, there be a freshly smoked up \fIpack()\fR characta format, \f(CW\*(C`W\*(C'\fR, which is intended to
replace tha oldschool \f(CW\*(C`C\*(C'\fR. \f(CW\*(C`C\*(C'\fR is kept fo' unsigned chars coded as bytes in
the strings internal representation. I aint talkin' bout chicken n' gravy biatch. \f(CW\*(C`W\*(C'\fR represents unsigned (logical)
characta joints, which can be pimped outa than 255. Well shiiiit, it is therefore more
robust when dealin wit potentially UTF\-8\-encoded data (as \f(CW\*(C`C\*(C'\fR will wrap
values outside tha range 0..255, n' not respect tha strang encoding).
.PP
In practice, dat means dat pack formats is now encoding-neutral, except
\&\f(CW\*(C`C\*(C'\fR.
.PP
For consistency, \f(CW\*(C`A\*(C'\fR up in \fIunpack()\fR format now trims all Unicode whitespace
from tha end of tha string. Before perl 5.9.2, it used ta strip only the
classical \s-1ASCII\s0 space characters.
.SS "Byte/characta count feature up in \fIunpack()\fP"
.IX Subsection "Byte/characta count feature up in unpack()"
A freshly smoked up \fIunpack()\fR template character, \f(CW"."\fR, returns tha number of bytes or
charactas (dependin on tha selected encodin mode, peep above) read so far.
.ie n .SS "Da $* n' $# variablez done been removed"
.el .SS "Da \f(CW$*\fP n' \f(CW$#\fP variablez done been removed"
.IX Subsection "Da $* n' $# variablez done been removed"
\&\f(CW$*\fR, which was deprecated up in favor of tha \f(CW\*(C`/s\*(C'\fR n' \f(CW\*(C`/m\*(C'\fR regexp
modifiers, has been removed.
.PP
Da deprecated \f(CW$#\fR variable (output format fo' numbers) has been
removed.
.PP
Two freshly smoked up severe warnings, \f(CW\*(C`$#/$* is no longer supported\*(C'\fR, done been added.
.SS "\fIsubstr()\fP lvalues is no longer fixed-length"
.IX Subsection "substr() lvalues is no longer fixed-length"
Da lvalues returned by tha three argument form of \fIsubstr()\fR used ta be a
\&\*(L"fixed length window\*(R" on tha original gangsta string. In some cases dis could
cause surprisin action at distizzle or other undefined behaviour. Shiiit, dis aint no joke. Now the
length of tha window adjusts itself ta tha length of tha strang assigned to
it.
.ie n .SS "Parsin of ""\-f _"""
.el .SS "Parsin of \f(CW\-f _\fP"
.IX Subsection "Parsin of -f _"
Da identifier \f(CW\*(C`_\*(C'\fR is now forced ta be a funky-ass bareword afta a gangbangin' filetest
operator. Shiiit, dis aint no joke. This solves a fuckin shitload of misparsin thangs when a global \f(CW\*(C`_\*(C'\fR
subroutine is defined.
.ie n .SS """:unique"""
.el .SS "\f(CW:unique\fP"
.IX Subsection ":unique"
Da \f(CW\*(C`:unique\*(C'\fR attribute has been done cooked up a no-op, since its current
implementation was fundamentally flawed n' not threadsafe.
.SS "Effect of pragmas up in eval"
.IX Subsection "Effect of pragmas up in eval"
Da compile-time value of tha \f(CW\*(C`%^H\*(C'\fR hint variable can now propagate into
eval("")uated code. This make it mo' useful ta implement lexical
pragmas.
.PP
As a side-effect of this, tha overloaded-nizz of constants now propagates
into eval("").
.SS "chdir \s-1FOO\s0"
.IX Subsection "chdir FOO"
A bareword argument ta \fIchdir()\fR is now recognized as a gangbangin' file handle.
Earlier releases interpreted tha bareword as a gangbangin' finger-lickin' directory name.
(Gisle Aas)
.SS "Handlin of .pmc files"
.IX Subsection "Handlin of .pmc files"
An oldschool feature of perl was dat before \f(CW\*(C`require\*(C'\fR or \f(CW\*(C`use\*(C'\fR look fo' a
file wit a \fI.pm\fR extension, they will first look fo' a similar filename
with a \fI.pmc\fR extension. I aint talkin' bout chicken n' gravy biatch. If dis file is found, it is ghon be loaded in
place of any potentially existin file endin up in a \fI.pm\fR extension.
.PP
Previously, \fI.pmc\fR filez was loaded only if mo' recent than the
matchin \fI.pm\fR file. Right back up in yo muthafuckin ass. Startin wit 5.9.4, they'll be always loaded if
they exist.
.ie n .SS "$^V is now a ""version"" object instead of a v\-string"
.el .SS "$^V is now a \f(CWversion\fP object instead of a v\-string"
.IX Subsection "$^V is now a version object instead of a v-string"
$^V can still be used wit tha \f(CW%vd\fR format up in printf yo, but any
character-level operations will now access tha strang representation
of tha \f(CW\*(C`version\*(C'\fR object n' not tha ordinalz of a v\-string.
Expressions like \f(CW\*(C`substr($^V, 0, 2)\*(C'\fR or \f(CW\*(C`split //, $^V\*(C'\fR
no longer work n' must be rewritten.
.SS "@\- n' @+ up in patterns"
.IX Subsection "@- n' @+ up in patterns"
Da special arrays \f(CW\*(C`@\-\*(C'\fR n' \f(CW\*(C`@+\*(C'\fR is no longer interpolated up in regular
expressions. (Sadahiro Tomoyuki)
.ie n .SS "$AUTOLOAD can now be tainted"
.el .SS "\f(CW$AUTOLOAD\fP can now be tainted"
.IX Subsection "$AUTOLOAD can now be tainted"
If you call a subroutine by a tainted name, n' if it defers ta an
\&\s-1AUTOLOAD\s0 function, then \f(CW$AUTOLOAD\fR is ghon be (correctly) tainted.
(Rick Delaney)
.SS "Taintin n' printf"
.IX Subsection "Taintin n' printf"
When perl is run under taint mode, \f(CW\*(C`printf()\*(C'\fR n' \f(CW\*(C`sprintf()\*(C'\fR will now
reject any tainted format argument. (Rafael Garcia-Suarez)
.SS "undef n' signal handlezs"
.IX Subsection "undef n' signal handlezs"
Undefinin or deletin a signal handlez via \f(CW\*(C`undef $SIG{FOO}\*(C'\fR is now
equivalent ta settin it ta \f(CW\*(AqDEFAULT\*(Aq\fR. (Rafael Garcia-Suarez)
.SS "strictures n' dereferencin up in \fIdefined()\fP"
.IX Subsection "strictures n' dereferencin up in defined()"
\&\f(CW\*(C`use strict \*(Aqrefs\*(Aq\*(C'\fR was ignorin takin a hard reference up in a argument
to \fIdefined()\fR, as up in :
.PP
.Vb 3
\&    use strict \*(Aqrefs\*(Aq;
\&    mah $x = \*(Aqfoo\*(Aq;
\&    if (defined $$x) {...}
.Ve
.PP
This now erectly produces tha run-time error \f(CW\*(C`Can\*(Aqt use strang as a
SCALAR ref while "strict refs" up in use\*(C'\fR.
.PP
\&\f(CW\*(C`defined @$foo\*(C'\fR n' \f(CW\*(C`defined %$bar\*(C'\fR is now also subject ta \f(CW\*(C`strict
\&\*(Aqrefs\*(Aq\*(C'\fR (that is, \f(CW$foo\fR n' \f(CW$bar\fR shall be proper references there.)
(\f(CW\*(C`defined(@foo)\*(C'\fR n' \f(CW\*(C`defined(%bar)\*(C'\fR is discouraged constructs anyway.)
(Nicholas Clark)
.ie n .SS """(?p{})"" has been removed"
.el .SS "\f(CW(?p{})\fP has been removed"
.IX Subsection "(?p{}) has been removed"
Da regular expression construct \f(CW\*(C`(?p{})\*(C'\fR, which was deprecated up in perl
5.8, has been removed. Y'all KNOW dat shit, muthafucka! Use \f(CW\*(C`(??{})\*(C'\fR instead. Y'all KNOW dat shit, muthafucka! (Rafael Garcia-Suarez)
.SS "Pseudo-hashes done been removed"
.IX Subsection "Pseudo-hashes done been removed"
Support fo' pseudo-hashes has been removed from Perl 5.9. (Da \f(CW\*(C`fields\*(C'\fR
pragma remains here yo, but uses a alternate implementation.)
.SS "Removal of tha bytecode compila n' of perlcc"
.IX Subsection "Removal of tha bytecode compila n' of perlcc"
\&\f(CW\*(C`perlcc\*(C'\fR, tha byteloader n' tha supportin modulez (B::C, B::CC,
B::Bytecode, etc.) is no longer distributed wit tha perl sources. Those
experimenstrual tools have never hit dat shiznit reliably, and, cuz of tha lack of
volunteers ta keep dem up in line wit tha perl interpreta pimpments, it
was decided ta remove dem instead of shippin a gangbangin' fucked up version of them.
Da last version of dem modulez can be found wit perl 5.9.4.
.PP
However tha B compila framework stays supported up in tha perl core, as with
the mo' useful modulez it has permitted (among others, B::Deparse and
B::Concise).
.SS "Removal of tha \s-1JPL\s0"
.IX Subsection "Removal of tha JPL"
Da \s-1JPL \s0(Java-Perl Lingo) has been removed from tha perl sources tarball.
.SS "Recursive inheritizzle detected earlier"
.IX Subsection "Recursive inheritizzle detected earlier"
Perl will now immediately throw a exception if you modify any package's
\&\f(CW@ISA\fR up in such a way dat it would cause recursive inheritance.
.PP
Previously, tha exception would not occur until Perl attempted ta make
use of tha recursive inheritizzle while resolvin a method or bustin a
\&\f(CW\*(C`$foo\->isa($bar)\*(C'\fR lookup.
.SS "warnings::enabled n' warnings::warnif chizzled ta favor playaz of modules"
.IX Subsection "warnings::enabled n' warnings::warnif chizzled ta favor playaz of modules"
Da behaviour up in 5.10.x favors tha thug rockin tha module;
Da behaviour up in 5.8.x favors tha module writer;
.PP
Assume tha followin code:
.PP
.Vb 5
\&  main calls Foo::Bar::baz()
\&  Foo::Bar inherits from Foo::Base
\&  Foo::Bar::baz() calls Foo::Base::_bazbaz()
\&  Foo::Base::_bazbaz() calls: warnings::warnif(\*(Aqsubstr\*(Aq, \*(Aqsome warnin 
\&message\*(Aq);
.Ve
.PP
On 5.8.x, tha code warns when Foo::Bar gotz nuff \f(CW\*(C`use warnings;\*(C'\fR
It do not matta if Foo::Base or main have warnings enabled
to disable tha warnin one has ta modify Foo::Bar.
.PP
On 5.10.0 n' newer, tha code warns when main gotz nuff \f(CW\*(C`use warnings;\*(C'\fR
It do not matta if Foo::Base or Foo::Bar have warnings enabled
to disable tha warnin one has ta modify main.
.SH "Modulez n' Pragmata"
.IX Header "Modulez n' Pragmata"
.SS "Upgradin individual core modules"
.IX Subsection "Upgradin individual core modules"
Even mo' core modulez is now also available separately all up in the
\&\s-1CPAN. \s0 If you wish ta update one of these modules, you don't need to
wait fo' a freshly smoked up perl release.  From within tha cpan shell, hustlin the
\&'r' command will report on modulez wit upgrades available.  See
\&\f(CW\*(C`perldoc CPAN\*(C'\fR fo' mo' shiznit.
.SS "Pragmata Chizzles"
.IX Subsection "Pragmata Chizzles"
.ie n .IP """feature""" 4
.el .IP "\f(CWfeature\fR" 4
.IX Item "feature"
Da freshly smoked up pragma \f(CW\*(C`feature\*(C'\fR is used ta enable freshly smoked up features dat might break
old code. Right back up in yo muthafuckin ass. See "Da \f(CW\*(C`feature\*(C'\fR pragma" above.
.ie n .IP """mro""" 4
.el .IP "\f(CWmro\fR" 4
.IX Item "mro"
This freshly smoked up pragma enablez ta chizzle tha algorithm used ta resolve inherited
methods. Right back up in yo muthafuckin ass. See "New Pragma, \f(CW\*(C`mro\*(C'\fR" above.
.ie n .IP "Scopin of tha ""sort"" pragma" 4
.el .IP "Scopin of tha \f(CWsort\fR pragma" 4
.IX Item "Scopin of tha sort pragma"
Da \f(CW\*(C`sort\*(C'\fR pragma is now lexically scoped. Y'all KNOW dat shit, muthafucka! Its effect used ta be global.
.ie n .IP "Scopin of ""bignum"", ""bigint"", ""bigrat""" 4
.el .IP "Scopin of \f(CWbignum\fR, \f(CWbigint\fR, \f(CWbigrat\fR" 4
.IX Item "Scopin of bignum, bigint, bigrat"
Da three numeric pragmas \f(CW\*(C`bignum\*(C'\fR, \f(CW\*(C`bigint\*(C'\fR n' \f(CW\*(C`bigrat\*(C'\fR is now
lexically scoped. Y'all KNOW dat shit, muthafucka! (Tels)
.ie n .IP """base""" 4
.el .IP "\f(CWbase\fR" 4
.IX Item "base"
Da \f(CW\*(C`base\*(C'\fR pragma now warns if a cold-ass lil class tries ta inherit from itself.
(Curtis \*(L"Ovid\*(R" Poe)
.ie n .IP """strict"" n' ""warnings""" 4
.el .IP "\f(CWstrict\fR n' \f(CWwarnings\fR" 4
.IX Item "strict n' warnings"
\&\f(CW\*(C`strict\*(C'\fR n' \f(CW\*(C`warnings\*(C'\fR will now diss loudly if they is loaded via
incorrect casin (as up in \f(CW\*(C`use Strict;\*(C'\fR). (Johan Vromans)
.ie n .IP """version""" 4
.el .IP "\f(CWversion\fR" 4
.IX Item "version"
Da \f(CW\*(C`version\*(C'\fR module serves up support fo' version objects.
.ie n .IP """warnings""" 4
.el .IP "\f(CWwarnings\fR" 4
.IX Item "warnings"
Da \f(CW\*(C`warnings\*(C'\fR pragma don't load \f(CW\*(C`Carp\*(C'\fR no mo'. That means dat code
that used \f(CW\*(C`Carp\*(C'\fR routines without havin loaded it at compile time might
need ta be adjusted; typically, tha followin (faulty) code won't work
anymore, n' will require parentheses ta be added afta tha function name:
.Sp
.Vb 3
\&    use warnings;
\&    require Carp;
\&    Carp::confess \*(Aqargh\*(Aq;
.Ve
.ie n .IP """less""" 4
.el .IP "\f(CWless\fR" 4
.IX Item "less"
\&\f(CW\*(C`less\*(C'\fR now do suttin' useful (or at least it tries to). In fact, it
has been turned tha fuck into a lexical pragma. Right back up in yo muthafuckin ass. So, up in yo' modules, you can now
test whether yo' playas have axed ta use less \s-1CPU,\s0 or less memory,
less magic, or maybe even less fat. Right back up in yo muthafuckin ass. See less fo' mo' n' mo' n' mo'. (Joshua ben
Jore)
.SS "New modules"
.IX Subsection "New modules"
.IP "\(bu" 4
\&\f(CW\*(C`encoding::warnings\*(C'\fR, by Audrey Tang, be a module ta emit warnings
whenever a \s-1ASCII\s0 characta strang containin high-bit bytes is implicitly
converted tha fuck into \s-1UTF\-8.\s0 It aint nuthin but a lexical pragma since Perl 5.9.4; on older
perls, its effect is global.
.IP "\(bu" 4
\&\f(CW\*(C`Module::CoreList\*(C'\fR, by Slick Rick Clamp, be a lil' small-ass handy module dat tells
you what tha fuck versionz of core modulez shizzle wit any versionz of Perl 5. It
comes wit a cold-ass lil command-line frontend, \f(CW\*(C`corelist\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`Math::BigInt::FastCalc\*(C'\fR be a XS-enabled, n' thus faster, version of
\&\f(CW\*(C`Math::BigInt::Calc\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`Compress::Zlib\*(C'\fR be a intercourse ta tha zlib compression library. It
comes wit a funky-ass bundled version of zlib, so havin a hustlin zlib aint a
prerequisite ta install dat shit. It aint nuthin but used by \f(CW\*(C`Archive::Tar\*(C'\fR (see below).
.IP "\(bu" 4
\&\f(CW\*(C`IO::Zlib\*(C'\fR be a \f(CW\*(C`IO::\*(C'\fR\-style intercourse ta \f(CW\*(C`Compress::Zlib\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`Archive::Tar\*(C'\fR be a module ta manipulate \f(CW\*(C`tar\*(C'\fR archives.
.IP "\(bu" 4
\&\f(CW\*(C`Digest::SHA\*(C'\fR be a module used ta calculate nuff typez of \s-1SHA\s0 digests,
has been included fo' \s-1SHA\s0 support up in tha \s-1CPAN\s0 module.
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::CBuilder\*(C'\fR n' \f(CW\*(C`ExtUtils::ParseXS\*(C'\fR done been added.
.IP "\(bu" 4
\&\f(CW\*(C`Hash::Util::FieldHash\*(C'\fR, by Anno Siegel, has been added. Y'all KNOW dat shit, muthafucka! This module
provides support fo' \fIfield hashes\fR: hashes dat maintain a association
of a reference wit a value, up in a thread-safe garbage-collected way.
Such hashes is useful ta implement inside-out objects.
.IP "\(bu" 4
\&\f(CW\*(C`Module::Build\*(C'\fR, by Ken Williams, has been added. Y'all KNOW dat shit, muthafucka! It aint nuthin but a alternatizzle to
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR ta build n' install perl modules.
.IP "\(bu" 4
\&\f(CW\*(C`Module::Load\*(C'\fR, by Jos Boumans, has been added. Y'all KNOW dat shit, muthafucka! Well shiiiit, it serves up a single
interface ta load Perl modulez n' \fI.pl\fR files.
.IP "\(bu" 4
\&\f(CW\*(C`Module::Loaded\*(C'\fR, by Jos Boumans, has been added. Y'all KNOW dat shit, muthafucka! It aint nuthin but used ta mark
modulez as loaded or unloaded.
.IP "\(bu" 4
\&\f(CW\*(C`Package::Constants\*(C'\fR, by Jos Boumans, has been added. Y'all KNOW dat shit, muthafucka! It aint nuthin but a simple
helper ta list all constants declared up in a given package.
.IP "\(bu" 4
\&\f(CW\*(C`Win32API::File\*(C'\fR, by Tye McQueen, has been added (for Windows builds).
This module serves up low-level access ta Win32 system \s-1API\s0 calls for
files/dirs.
.IP "\(bu" 4
\&\f(CW\*(C`Locale::Maketext::Simple\*(C'\fR, needed by \s-1CPANPLUS,\s0 be a simple wrapper around
\&\f(CW\*(C`Locale::Maketext::Lexicon\*(C'\fR. Note dat \f(CW\*(C`Locale::Maketext::Lexicon\*(C'\fR aint
included up in tha perl core; tha behaviour of \f(CW\*(C`Locale::Maketext::Simple\*(C'\fR
gracefully degrades when tha lata aint present.
.IP "\(bu" 4
\&\f(CW\*(C`Params::Check\*(C'\fR implements a generic input parsing/checkin mechanism. It
is used by \s-1CPANPLUS.\s0
.IP "\(bu" 4
\&\f(CW\*(C`Term::UI\*(C'\fR simplifies tha task ta ask thangs at a terminal prompt.
.IP "\(bu" 4
\&\f(CW\*(C`Object::Accessor\*(C'\fR serves up a intercourse ta create per-object accessors.
.IP "\(bu" 4
\&\f(CW\*(C`Module::Pluggable\*(C'\fR be a simple framework ta create modulez dat accept
pluggable sub-modules.
.IP "\(bu" 4
\&\f(CW\*(C`Module::Load::Conditional\*(C'\fR serves up simple ways ta query n' possibly
load installed modules.
.IP "\(bu" 4
\&\f(CW\*(C`Time::Piece\*(C'\fR serves up a object oriented intercourse ta time functions,
overridin tha built-ins \fIlocaltime()\fR n' \fIgmtime()\fR.
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Cmd\*(C'\fR helps ta find n' run external commands, possibly
interactively.
.IP "\(bu" 4
\&\f(CW\*(C`File::Fetch\*(C'\fR provide a simple generic file fetchin mechanism.
.IP "\(bu" 4
\&\f(CW\*(C`Log::Message\*(C'\fR n' \f(CW\*(C`Log::Message::Simple\*(C'\fR is used by tha log facility
of \f(CW\*(C`CPANPLUS\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`Archive::Extract\*(C'\fR be a generic archive extraction mechanism
for \fI.tar\fR (plain, gzipped or bzipped) or \fI.zip\fR files.
.IP "\(bu" 4
\&\f(CW\*(C`CPANPLUS\*(C'\fR serves up a \s-1API\s0 n' a cold-ass lil command-line tool ta access tha \s-1CPAN\s0
mirrors.
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Escapes\*(C'\fR serves up utilitizzles dat is useful up in decodin Pod
E<...> sequences.
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Simple\*(C'\fR is now tha backend fo' nuff muthafuckin of tha Pod-related modules
included wit Perl.
.SS "Selected Chizzlez ta Core Modules"
.IX Subsection "Selected Chizzlez ta Core Modules"
.ie n .IP """Attribute::Handlezs""" 4
.el .IP "\f(CWAttribute::Handlezs\fR" 4
.IX Item "Attribute::Handlezs"
\&\f(CW\*(C`Attribute::Handlezs\*(C'\fR can now report tha callerz file n' line number.
(Dizzy Feldman)
.Sp
All interpreted attributes is now passed as array references. (Damian
Conway)
.ie n .IP """B::Lint""" 4
.el .IP "\f(CWB::Lint\fR" 4
.IX Item "B::Lint"
\&\f(CW\*(C`B::Lint\*(C'\fR is now based on \f(CW\*(C`Module::Pluggable\*(C'\fR, n' so can be extended
with plugins. (Joshua ben Jore)
.ie n .IP """B""" 4
.el .IP "\f(CWB\fR" 4
.IX Item "B"
It aint nuthin but now possible ta access tha lexical pragma hints (\f(CW\*(C`%^H\*(C'\fR) by rockin the
method \fIB::COP::hints_hash()\fR. Well shiiiit, it returns a \f(CW\*(C`B::RHE\*(C'\fR object, which up in turn
can be used ta git a hash reference via tha method \fIB::RHE::HASH()\fR. (Joshua
ben Jore)
.ie n .IP """Thread""" 4
.el .IP "\f(CWThread\fR" 4
.IX Item "Thread"
As tha oldschool 5005thread threadin model has been removed, up in favor of the
ithreadz scheme, tha \f(CW\*(C`Thread\*(C'\fR module is now a cold-ass lil compatibilitizzle wrapper, to
be used up in oldschool code only. Well shiiiit, it has been removed from tha default list of
dynamic extensions.
.SH "Utilitizzle Chizzles"
.IX Header "Utilitizzle Chizzles"
.IP "perl \-d" 4
.IX Item "perl -d"
Da Perl debugger can now save all debugger commandz fo' sourcin later;
notably, it can now emulate steppin backwards, by restartin and
rerunnin all bar tha last command from a saved command history.
.Sp
It can also display tha parent inheritizzle tree of a given class, wit the
\&\f(CW\*(C`i\*(C'\fR command.
.IP "ptar" 4
.IX Item "ptar"
\&\f(CW\*(C`ptar\*(C'\fR be a pure perl implementation of \f(CW\*(C`tar\*(C'\fR dat comes with
\&\f(CW\*(C`Archive::Tar\*(C'\fR.
.IP "ptardiff" 4
.IX Item "ptardiff"
\&\f(CW\*(C`ptardiff\*(C'\fR be a lil' small-ass utilitizzle used ta generate a gangbangin' finger-lickin' diff between tha contents
of a tar archive n' a gangbangin' finger-lickin' directory tree. Like \f(CW\*(C`ptar\*(C'\fR, it comes with
\&\f(CW\*(C`Archive::Tar\*(C'\fR.
.IP "shasum" 4
.IX Item "shasum"
\&\f(CW\*(C`shasum\*(C'\fR be a cold-ass lil command-line utility, used ta print or ta check \s-1SHA\s0
digests, n' you can put dat on yo' toast. Well shiiiit, it comes wit tha freshly smoked up \f(CW\*(C`Digest::SHA\*(C'\fR module.
.IP "corelist" 4
.IX Item "corelist"
Da \f(CW\*(C`corelist\*(C'\fR utilitizzle is now installed wit perl (see \*(L"New modules\*(R"
above).
.IP "h2ph n' h2xs" 4
.IX Item "h2ph n' h2xs"
\&\f(CW\*(C`h2ph\*(C'\fR n' \f(CW\*(C`h2xs\*(C'\fR done been made mo' robust wit regard to
\&\*(L"modern\*(R" C code.
.Sp
\&\f(CW\*(C`h2xs\*(C'\fR implements a freshly smoked up option \f(CW\*(C`\-\-use\-xsloader\*(C'\fR ta force use of
\&\f(CW\*(C`XSLoader\*(C'\fR even up in backwardz compatible modules.
.Sp
Da handlin of authors' names dat had apostrophes has been fixed.
.Sp
Any enums wit wack joints is now skipped.
.IP "perlivp" 4
.IX Item "perlivp"
\&\f(CW\*(C`perlivp\*(C'\fR no longer checks fo' \fI*.ph\fR filez by default.  Use tha freshly smoked up \f(CW\*(C`\-a\*(C'\fR
option ta run \fIall\fR tests.
.IP "find2perl" 4
.IX Item "find2perl"
\&\f(CW\*(C`find2perl\*(C'\fR now assumes \f(CW\*(C`\-print\*(C'\fR as a thugged-out default action. I aint talkin' bout chicken n' gravy biatch. Previously, it
needed ta be specified explicitly.
.Sp
Several bugs done been fixed up in \f(CW\*(C`find2perl\*(C'\fR, regardin \f(CW\*(C`\-exec\*(C'\fR and
\&\f(CW\*(C`\-eval\*(C'\fR fo' realz. Also tha options \f(CW\*(C`\-path\*(C'\fR, \f(CW\*(C`\-ipath\*(C'\fR n' \f(CW\*(C`\-iname\*(C'\fR have been
added.
.IP "config_data" 4
.IX Item "config_data"
\&\f(CW\*(C`config_data\*(C'\fR be a freshly smoked up utilitizzle dat comes wit \f(CW\*(C`Module::Build\*(C'\fR. It
provides a cold-ass lil command-line intercourse ta tha configuration of Perl modules
that use Module::Buildz framework of configurabilitizzle (that is,
\&\f(CW*::ConfigData\fR modulez dat contain local configuration shiznit for
their parent modules.)
.IP "cpanp" 4
.IX Item "cpanp"
\&\f(CW\*(C`cpanp\*(C'\fR, tha \s-1CPANPLUS\s0 shell, has been added. Y'all KNOW dat shit, muthafucka! (\f(CW\*(C`cpanp\-run\-perl\*(C'\fR, a
helper fo' \s-1CPANPLUS\s0 operation, has been added too yo, but aint intended for
direct use).
.IP "cpan2dist" 4
.IX Item "cpan2dist"
\&\f(CW\*(C`cpan2dist\*(C'\fR be a freshly smoked up utilitizzle dat comes wit \s-1CPANPLUS.\s0 It aint nuthin but a tool to
create distributions (or packages) from \s-1CPAN\s0 modules.
.IP "pod2html" 4
.IX Item "pod2html"
Da output of \f(CW\*(C`pod2html\*(C'\fR has been enhanced ta be mo' customizable via
\&\s-1CSS.\s0 Some formattin problems was also erected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. (Jari Aalto)
.SH "New Documentation"
.IX Header "New Documentation"
Da perlpragma manpage documents how tha fuck ta write onez own lexical
pragmas up in pure Perl (suttin' dat is possible startin wit 5.9.4).
.PP
Da freshly smoked up perlglossary manpage be a glossary of terms used up in tha Perl
documentation, technical n' otherwise, kindly provided by O'Reilly Media,
Inc.
.PP
Da perlreguts manpage, courtesy of Yves Orton, raps bout internalz of the
Perl regular expression engine.
.PP
Da perlreapi manpage raps bout tha intercourse ta tha perl interpreter
used ta write pluggable regular expression engines (by \*(Aevar Arnfjo\*:r\*(d-
Bjarmason).
.PP
Da perlunitut manpage be a tutorial fo' programmin wit Unicode and
strin encodings up in Perl, courtesy of Juerd Waalboer.
.PP
A freshly smoked up manual page, perlunifaq (the Perl Unicode \s-1FAQ\s0), has been added
(Juerd Waalboer).
.PP
Da perlcommunitizzle manpage gives a thugged-out description of tha Perl hood
on tha Internizzle n' up in real game. (Edgar \*(L"Trizor\*(R" Bering)
.PP
Da \s-1CORE\s0 manual page documents tha \f(CW\*(C`CORE::\*(C'\fR namespace. (Tels)
.PP
Da long-existin feature of \f(CW\*(C`/(?{...})/\*(C'\fR regexps settin \f(CW$_\fR n' \fIpos()\fR
is now documented.
.SH "Performizzle Enhancements"
.IX Header "Performizzle Enhancements"
.SS "In-place sorting"
.IX Subsection "In-place sorting"
Sortin arrays up in place (\f(CW\*(C`@a = sort @a\*(C'\fR) is now optimized ta avoid
makin a temporary copy of tha array.
.PP
Likewise, \f(CW\*(C`reverse sort ...\*(C'\fR is now optimized ta sort up in reverse,
avoidin tha generation of a temporary intermediate list.
.SS "Lexical array access"
.IX Subsection "Lexical array access"
Access ta elementz of lexical arrays via a numeric constant between 0 and
255 is now fasta n' shit. (This used ta be only tha case fo' global arrays.)
.SS "XS-assisted \s-1SWASHGET\s0"
.IX Subsection "XS-assisted SWASHGET"
Some pure-perl code dat perl was rockin ta retrieve Unicode propertizzles and
transliteration mappings has been reimplemented up in \s-1XS.\s0
.SS "Constant subroutines"
.IX Subsection "Constant subroutines"
Da interpreta internals now support a gangbangin' far mo' memory efficient form of
inlineable constants, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Storin a reference ta a cold-ass lil constant value up in a symbol
table is equivalent ta a gangbangin' full typeglob referencin a cold-ass lil constant subroutine,
but rockin bout 400 bytes less memory. This proxy constant subroutine is
automatically upgraded ta a real typeglob wit subroutine if necessary.
Da approach taken be analogous ta tha existin space optimisation for
subroutine stub declarations, which is stored as plain scalars up in place
of tha full typeglob.
.PP
Several of tha core modulez done been converted ta use dis feature for
their system dependent constants \- as a result \f(CW\*(C`use POSIX;\*(C'\fR now takes about
200K less memory.
.ie n .SS """PERL_DONT_CREATE_GVSV"""
.el .SS "\f(CWPERL_DONT_CREATE_GVSV\fP"
.IX Subsection "PERL_DONT_CREATE_GVSV"
Da freshly smoked up compilation flag \f(CW\*(C`PERL_DONT_CREATE_GVSV\*(C'\fR, introduced as a option
in perl 5.8.8, is turned on by default up in perl 5.9.3. Well shiiiit, it prevents perl
from bustin a empty scalar wit every last muthafuckin freshly smoked up typeglob. Right back up in yo muthafuckin ass. See perl589delta
for details.
.SS "Weak references is skankyer"
.IX Subsection "Weak references is skankyer"
Weak reference creation is now \fIO(1)\fR rather than \fIO(n)\fR, courtesy of
Nicholas Clark. Weak reference deletion remains \fIO(n)\fR yo, but if deletion only
happens at program exit, it may be skipped straight-up.
.SS "\fIsort()\fP enhancements"
.IX Subsection "sort() enhancements"
Salvador Fandin\*~o provided improvements ta reduce tha memory usage of \f(CW\*(C`sort\*(C'\fR
and ta speed up some cases.
.SS "Memory optimisations"
.IX Subsection "Memory optimisations"
Several internal data structures (typeglobs, GVs, CVs, formats) have been
restructured ta use less memory. (Nicholas Clark)
.SS "\s-1UTF\-8\s0 cache optimisation"
.IX Subsection "UTF-8 cache optimisation"
Da \s-1UTF\-8\s0 cachin code is now mo' efficient, n' used mo' often.
(Nicholas Clark)
.SS "Sloppy stat on Windows"
.IX Subsection "Sloppy stat on Windows"
On Windows, perlz \fIstat()\fR function normally opens tha file ta determine
the link count n' update attributes dat may done been chizzled through
hard links. Right back up in yo muthafuckin ass. Settin ${^WIN32_SLOPPY_STAT} ta a legit value speedz up
\&\fIstat()\fR by not struttin dis operation. I aint talkin' bout chicken n' gravy biatch. (Jan Dubois)
.SS "Regular expressions optimisations"
.IX Subsection "Regular expressions optimisations"
.IP "Engine de-recursivised" 4
.IX Item "Engine de-recursivised"
Da regular expression engine is no longer recursive, meanin that
patterns dat used ta overflow tha stack will either take a thugged-out dirtnap wit useful
explanations, or run ta completion, which, since they was able ta blow
the stack before, will likely take a straight-up long time ta happen. I aint talkin' bout chicken n' gravy biatch. If you were
experiencin tha occasionizzle stack overflow (or segfault) n' upgrade to
discover dat now perl apparently hangs instead, look fo' a thugged-out degenerate
regex. (Dizzle Mitchell)
.IP "Single char char-classes treated as literals" 4
.IX Item "Single char char-classes treated as literals"
Classez of a single characta is now treated tha same as if tha character
had been used as a literal, meanin dat code dat uses char-classes as an
escapin mechanizzle will peep a speedup. (Yves Orton)
.IP "Trie optimisation of literal strang alternations" 4
.IX Item "Trie optimisation of literal strang alternations"
Alternations, where possible, is optimised tha fuck into mo' efficient matching
structures. Right back up in yo muthafuckin ass. Strin literal alternations is merged tha fuck into a trie n' are
matched simultaneously.  This means dat instead of O(N) time fo' matching
N alternations at a given point, tha freshly smoked up code performs up in O(1) time.
A freshly smoked up special variable, ${^RE_TRIE_MAXBUF}, has been added ta fine-tune
this optimization. I aint talkin' bout chicken n' gravy biatch. (Yves Orton)
.Sp
\&\fBNote:\fR Much code exists dat works round perlz phat skanky
performizzle on alternations. Often tha tricks used ta do so will disable
the freshly smoked up optimisations yo. Hopefully tha utilitizzle modulez used fo' dis purpose
will be constipated bout these freshly smoked up optimisations.
.IP "Aho-Corasick start-point optimisation" 4
.IX Item "Aho-Corasick start-point optimisation"
When a pattern starts wit a trie-able alternation n' there aren't
betta optimisations available, tha regex engine will use Aho-Corasick
matchin ta find tha start point. (Yves Orton)
.SH "Installation n' Configuration Improvements"
.IX Header "Installation n' Configuration Improvements"
.SS "Configuration improvements"
.IX Subsection "Configuration improvements"
.ie n .IP """\-Dusesitecustomize""" 4
.el .IP "\f(CW\-Dusesitecustomize\fR" 4
.IX Item "-Dusesitecustomize"
Run-time customization of \f(CW@INC\fR can be enabled by passin the
\&\f(CW\*(C`\-Dusesitecustomize\*(C'\fR flag ta Configure. When enabled, dis will make perl
run \fI\f(CI$sitelibexp\fI/sitecustomize.pl\fR before anythang else.  This script can
then be set up ta add additionizzle entries ta \f(CW@INC\fR.
.IP "Relocatable installations" 4
.IX Item "Relocatable installations"
There is now Configure support fo' bustin a relocatable perl tree. If
you Configure wit \f(CW\*(C`\-Duserelocatableinc\*(C'\fR, then tha paths up in \f(CW@INC\fR (and
everythang else up in \f(CW%Config\fR) can be optionally located via tha path of the
perl executable.
.Sp
That means that, if tha strang \f(CW".../"\fR is found all up in tha start of any
path, itz substituted wit tha directory of $^X. Right back up in yo muthafuckin ass. So, tha relocation can
be configured on a per-directory basis, although tha default with
\&\f(CW\*(C`\-Duserelocatableinc\*(C'\fR is dat every last muthafuckin thang is relocated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da initial
install is done ta tha original gangsta configured prefix.
.IP "\fIstrlcat()\fR n' \fIstrlcpy()\fR" 4
.IX Item "strlcat() n' strlcpy()"
Da configuration process now detects whether \fIstrlcat()\fR n' \fIstrlcpy()\fR are
available.  When they is not available, perlz own version is used (from
Russ Allberyz hood domain implementation).  Various places up in tha perl
interpreta now use em. (Steve Peters)
.ie n .IP """d_pseudofork"" n' ""d_printf_format_null""" 4
.el .IP "\f(CWd_pseudofork\fR n' \f(CWd_printf_format_null\fR" 4
.IX Item "d_pseudofork n' d_printf_format_null"
A freshly smoked up configuration variable, available as \f(CW$Config{d_pseudofork}\fR in
the Config module, has been added, ta distinguish real \fIfork()\fR support
from fake pseudofork used on Windows platforms.
.Sp
A freshly smoked up configuration variable, \f(CW\*(C`d_printf_format_null\*(C'\fR, has been added, 
to peep if printf-like formats is allowed ta be \s-1NULL.\s0
.IP "Configure help" 4
.IX Item "Configure help"
\&\f(CW\*(C`Configure \-h\*(C'\fR has been extended wit da most thugged-out commonly used options.
.SS "Compilation improvements"
.IX Subsection "Compilation improvements"
.IP "Parallel build" 4
.IX Item "Parallel build"
Parallel make should work properly now, although there may still be problems
if \f(CW\*(C`make test\*(C'\fR is instructed ta run up in parallel.
.IP "Borlandz compilaz support" 4
.IX Item "Borlandz compilaz support"
Buildin wit Borlandz compilaz on Win32 should work mo' smoothly. In
particular Steve Hay has hit dat shiznit ta side step nuff warnings emitted by their
compilaz n' at least one C compila internal error.
.IP "Static build on Windows" 4
.IX Item "Static build on Windows"
Perl extensions on Windows now can be statically built tha fuck into tha Perl \s-1DLL.\s0
.Sp
Also, itz now possible ta build a \f(CW\*(C`perl\-static.exe\*(C'\fR dat don't depend
on tha Perl \s-1DLL\s0 on Win32. Right back up in yo muthafuckin ass. See tha Win32 makefilez fo' details.
(Vadim Konovalov)
.IP "ppport.h files" 4
.IX Item "ppport.h files"
All \fIppport.h\fR filez up in tha \s-1XS\s0 modulez bundled wit perl is now
autogenerated at build time. (Marcus Holland-Moritz)
.IP "\*(C+ compatibility" 4
.IX Item " compatibility"
Efforts done been made ta make perl n' tha core \s-1XS\s0 modulez compilable
with various \*(C+ compilaz (although tha thang aint slick with
some of tha compilaz on a shitload of tha platforms tested.)
.IP "Support fo' Microsizzlez 64\-bit compiler" 4
.IX Item "Support fo' Microsizzlez 64-bit compiler"
Support fo' buildin perl wit Microsoftz 64\-bit compila has been
improved. Y'all KNOW dat shit, muthafucka! (ActiveState)
.IP "Visual \*(C+" 4
.IX Item "Visual "
Perl can now be compiled wit Microsizzlez Visual \*(C+ 2005 (and 2008 Beta 2).
.IP "Win32 builds" 4
.IX Item "Win32 builds"
All win32 buildz (MS-Win, WinCE) done been merged n' cleaned up.
.SS "Installation improvements"
.IX Subsection "Installation improvements"
.IP "Module auxiliary files" 4
.IX Item "Module auxiliary files"
\&\s-1README\s0 filez n' chizzlelogs fo' \s-1CPAN\s0 modulez bundled wit perl is no
longer installed.
.SS "New Or Improved Platforms"
.IX Subsection "New Or Improved Platforms"
Perl has been reported ta work on Symbian \s-1OS.\s0 See perlsymbian fo' more
information.
.PP
Many improvements done been made towardz makin Perl work erectly on
z/OS.
.PP
Perl has been reported ta work on DragonFlyBSD n' MidnightBSD.
.PP
Perl has also been reported ta work on NexentaOS
( http://www.gnusolaris.org/ ).
.PP
Da \s-1VMS\s0 port has been improved. Y'all KNOW dat shit, muthafucka! See perlvms.
.PP
Support fo' Cray \s-1XT4\s0 Catamount/Qk has been added. Y'all KNOW dat shit, muthafucka! See
\&\fIhints/catamount.sh\fR up in tha source code distribution fo' more
information.
.PP
Vendor patches done been merged fo' RedHat n' Gentoo.
.PP
\&\fIDynaLoader::dl_unload_file()\fR now works on Windows.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "strictures up in regexp-eval blocks" 4
.IX Item "strictures up in regexp-eval blocks"
\&\f(CW\*(C`strict\*(C'\fR wasn't up in effect up in regexp-eval blocks (\f(CW\*(C`/(?{...})/\*(C'\fR).
.IP "Callin \fICORE::require()\fR" 4
.IX Item "Callin CORE::require()"
\&\fICORE::require()\fR n' \fICORE::do()\fR was always parsed as \fIrequire()\fR n' \fIdo()\fR
when they was overridden. I aint talkin' bout chicken n' gravy biatch. This is now fixed.
.IP "Subscriptz of slices" 4
.IX Item "Subscriptz of slices"
Yo ass can now bust a non-arrowed form fo' chained subscripts afta a list
slice, like in:
.Sp
.Vb 1
\&    ({foo => "bar"})[0]{foo}
.Ve
.Sp
This used ta be a syntax error; a \f(CW\*(C`\->\*(C'\fR was required.
.ie n .IP """no warnings \*(Aqcategory\*(Aq"" works erectly wit \-w" 4
.el .IP "\f(CWno warnings \*(Aqcategory\*(Aq\fR works erectly wit \-w" 4
.IX Item "no warnings category works erectly wit -w"
Previously when hustlin wit warnings enabled globally via \f(CW\*(C`\-w\*(C'\fR, selective
disablin of specific warnin categories would straight-up turn off all warnings.
This is now fixed; now \f(CW\*(C`no warnings \*(Aqio\*(Aq;\*(C'\fR will only turn off warnings up in the
\&\f(CW\*(C`io\*(C'\fR class. Previously it would erroneously turn off all warnings.
.IP "threadz improvements" 4
.IX Item "threadz improvements"
Several memory leaks up in ithreadz was closed. Y'all KNOW dat shit, muthafucka! Also, ithreadz was made
less memory-intensive.
.Sp
\&\f(CW\*(C`threads\*(C'\fR is now a thugged-out dual-life module, also available on \s-1CPAN.\s0 It has been
expanded up in nuff ways fo' realz. A \fIkill()\fR method be available fo' thread signalling.
One can git thread status, or tha list of hustlin or joinable threads.
.Sp
A freshly smoked up \f(CW\*(C`threads\->exit()\*(C'\fR method is used ta exit from tha application
(this is tha default fo' tha main thread) or from tha current thread only
(this is tha default fo' all other threads). On tha other hand, tha \fIexit()\fR
built-in now always causes tha whole application ta terminate. (Jerry
D yo. Hedden)
.IP "\fIchr()\fR n' wack joints" 4
.IX Item "chr() n' wack joints"
\&\fIchr()\fR on a wack value now gives \f(CW\*(C`\ex{FFFD}\*(C'\fR, tha Unicode replacement
character, unless when tha \f(CW\*(C`bytes\*(C'\fR pragma is up in effect, where tha low
eight bitz of tha value is used.
.IP "\s-1PERL5SHELL\s0 n' tainting" 4
.IX Item "PERL5SHELL n' tainting"
On Windows, tha \s-1PERL5SHELL\s0 environment variable is now checked for
taintedness. (Rafael Garcia-Suarez)
.IP "Usin *FILE{\s-1IO\s0}" 4
.IX Item "Usin *FILE{IO}"
\&\f(CW\*(C`stat()\*(C'\fR n' \f(CW\*(C`\-X\*(C'\fR filetests now treat *FILE{\s-1IO\s0} filehandlez like *FILE
filehandles. (Steve Peters)
.IP "Overloadin n' reblessing" 4
.IX Item "Overloadin n' reblessing"
Overloadin now works when references is reblessed tha fuck into another class.
Internally, dis has been implemented by movin tha flag fo' \*(L"overloading\*(R"
from tha reference ta tha referent, which logically is where it should
always have been. I aint talkin' bout chicken n' gravy biatch. (Nicholas Clark)
.IP "Overloadin n' \s-1UTF\-8\s0" 4
.IX Item "Overloadin n' UTF-8"
A few bugs related ta \s-1UTF\-8\s0 handlin wit objects dat have
stringification overloaded done been fixed. Y'all KNOW dat shit, muthafucka! (Nicholas Clark)
.IP "eval memory leaks fixed" 4
.IX Item "eval memory leaks fixed"
Traditionally, \f(CW\*(C`eval \*(Aqsyntax error\*(Aq\*(C'\fR has leaked badly. Many (but not all)
of these leaks have now been eliminated or reduced. Y'all KNOW dat shit, muthafucka! (Dizzle Mitchell)
.IP "Random thang on Windows" 4
.IX Item "Random thang on Windows"
In previous versions, perl would read tha file \fI/dev/urandom\fR if it
existed when seedin its random number generator. Shiiit, dis aint no joke.  That file is unlikely
to exist on Windows, n' if it did would probably not contain appropriate
data, so perl no longer tries ta read it on Windows. (Alex Davies)
.IP "\s-1PERLIO_DEBUG\s0" 4
.IX Item "PERLIO_DEBUG"
Da \f(CW\*(C`PERLIO_DEBUG\*(C'\fR environment variable no longer has any effect for
setuid scripts n' fo' scripts run wit \fB\-T\fR.
.Sp
Mo'over, wit a thread-enabled perl, rockin \f(CW\*(C`PERLIO_DEBUG\*(C'\fR could lead to
an internal buffer overflow. This has been fixed.
.IP "PerlIO::scalar n' read-only scalars" 4
.IX Item "PerlIO::scalar n' read-only scalars"
PerlIO::scalar will now prevent freestylin ta read-only scalars. Mo'over,
\&\fIseek()\fR is now supported wit PerlIO::scalar\-based filehandles, the
underlyin strang bein zero-filled as needed. Y'all KNOW dat shit, muthafucka! (Rafael, Jarkko Hietaniemi)
.IP "\fIstudy()\fR n' \s-1UTF\-8\s0" 4
.IX Item "study() n' UTF-8"
\&\fIstudy()\fR never hit dat shiznit fo' \s-1UTF\-8\s0 strings yo, but could lead ta false thangs up in dis biatch.
It aint nuthin but now a no-op on \s-1UTF\-8\s0 data. (Yves Orton)
.IP "Critical signals" 4
.IX Item "Critical signals"
Da signals \s-1SIGILL, SIGBUS\s0 n' \s-1SIGSEGV\s0 is now always served up in an
\&\*(L"unsafe\*(R" manner (contrary ta other signals, dat is deferred until the
perl interpreta reaches a reasonably stable state; see
\&\*(L"Deferred Signals (Safe Signals)\*(R" up in perlipc). (Rafael)
.ie n .IP "@INC\-hook fix" 4
.el .IP "\f(CW@INC\fR\-hook fix" 4
.IX Item "@INC-hook fix"
When a module or a gangbangin' file is loaded all up in a \f(CW@INC\fR\-hook, n' when dis hook
has set a gangbangin' filename entry up in \f(CW%INC\fR, _\|_FILE_\|_ is now set fo' dis module
accordingly ta tha contentz of dat \f(CW%INC\fR entry. (Rafael)
.ie n .IP """\-t"" switch fix" 4
.el .IP "\f(CW\-t\fR switch fix" 4
.IX Item "-t switch fix"
Da \f(CW\*(C`\-w\*(C'\fR n' \f(CW\*(C`\-t\*(C'\fR switches can now be used together without messing
up which categoriez of warnings is activated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. (Rafael)
.IP "Dupin \s-1UTF\-8\s0 filehandles" 4
.IX Item "Dupin UTF-8 filehandles"
Dupin a gangbangin' filehandle which has tha \f(CW\*(C`:utf8\*(C'\fR PerlIO layer set will now
properly carry dat layer on tha duped filehandle. (Rafael)
.IP "Localisation of hash elements" 4
.IX Item "Localisation of hash elements"
Localizin a hash element whose key was given as a variable didn't work
correctly if tha variable was chizzled while tha \fIlocal()\fR was up in effect (as
in \f(CW\*(C`local $h{$x}; ++$x\*(C'\fR). (Bo Lindbergh)
.SH "New or Chizzled Diagnostics"
.IX Header "New or Chizzled Diagnostics"
.IP "Use of uninitialized value" 4
.IX Item "Use of uninitialized value"
Perl will now try ta rap  tha name of tha variable (if any) dat was
undefined.
.IP "Deprecated use of \fImy()\fR up in false conditional" 4
.IX Item "Deprecated use of my() up in false conditional"
A freshly smoked up deprecation warning, \fIDeprecated use of \fImy()\fI up in false conditional\fR,
has been added, ta warn against tha use of tha dubious n' deprecated
construct
.Sp
.Vb 1
\&    mah $x if 0;
.Ve
.Sp
See perldiag. Use \f(CW\*(C`state\*(C'\fR variablez instead.
.IP "!=~ should be !~" 4
.IX Item "!=~ should be !~"
A freshly smoked up warning, \f(CW\*(C`!=~ should be !~\*(C'\fR, is emitted ta prevent dis misspelling
of tha non-matchin operator.
.IP "Newline up in left-justified string" 4
.IX Item "Newline up in left-justified string"
Da warnin \fINewline up in left-justified string\fR has been removed.
.ie n .IP "Too late fo' ""\-T"" option" 4
.el .IP "Too late fo' ``\-T'' option" 4
.IX Item "Too late fo' -T option"
Da error \fIToo late fo' \*(L"\-T\*(R" option\fR has been reformulated ta be more
descriptive.
.ie n .IP """%s"" variable %s masks earlier declaration" 4
.el .IP "``%s'' variable \f(CW%s\fR masks earlier declaration" 4
.IX Item "%s variable %s masks earlier declaration"
This warnin is now emitted up in mo' consistent cases; up in short, when one
of tha declarations involved be a \f(CW\*(C`my\*(C'\fR variable:
.Sp
.Vb 3
\&    mah $x;   mah $x;     # warns
\&    mah $x;  our $x;     # warns
\&    our $x;  mah $x;     # warns
.Ve
.Sp
On tha other hand, tha following:
.Sp
.Vb 1
\&    our $x; our $x;
.Ve
.Sp
now gives a \f(CW\*(C`"our" variable %s redeclared\*(C'\fR warning.
.IP "\fIreaddir()\fR/\fIclosedir()\fR/etc. attempted on invalid dirhandle" 4
.IX Item "readdir()/closedir()/etc. attempted on invalid dirhandle"
These freshly smoked up warnings is now emitted when a gangbangin' finger-lickin' dirhandle is used but is
either closed or not straight-up a gangbangin' finger-lickin' dirhandle.
.ie n .IP "Openin dirhandle/filehandle %s also as a gangbangin' file/directory" 4
.el .IP "Openin dirhandle/filehandle \f(CW%s\fR also as a gangbangin' file/directory" 4
.IX Item "Openin dirhandle/filehandle %s also as a gangbangin' file/directory"
Two deprecation warnings done been added: (Rafael)
.Sp
.Vb 2
\&    Openin dirhandle %s also as a gangbangin' file
\&    Openin filehandle %s also as a gangbangin' finger-lickin' directory
.Ve
.IP "Use of \-P is deprecated" 4
.IX Item "Use of -P is deprecated"
Perlz command-line switch \f(CW\*(C`\-P\*(C'\fR is now deprecated.
.IP "v\-strin up in use/require is non-portable" 4
.IX Item "v-strin up in use/require is non-portable"
Perl will warn you against potential backwardz compatibilitizzle problems with
the \f(CW\*(C`use VERSION\*(C'\fR syntax.
.IP "perl \-V" 4
.IX Item "perl -V"
\&\f(CW\*(C`perl \-V\*(C'\fR has nuff muthafuckin improvements, makin it mo' useable from shell
scripts ta git tha value of configuration variables. Right back up in yo muthafuckin ass. See perlrun for
details.
.SH "Changed Internals"
.IX Header "Changed Internals"
In general, tha source code of perl has been refactored, tidied up,
and optimized up in nuff places fo' realz. Also, memory pimpment n' allocation
has been improved up in nuff muthafuckin points.
.PP
When compilin tha perl core wit gcc, as nuff gcc warnin flags are
turned on as is possible on tha platform.  (This quest fo' cleanliness
doesn't extend ta \s-1XS\s0 code cuz we cannot guarantee tha tidinizz of
code our phat asses didn't write.)  Similar strictnizz flags done been added or
tightened fo' various other C compilers.
.SS "Reorderin of SVt_* constants"
.IX Subsection "Reorderin of SVt_* constants"
Da relatizzle orderin of constants dat define tha various typez of \f(CW\*(C`SV\*(C'\fR
have chizzled; up in particular, \f(CW\*(C`SVt_PVGV\*(C'\fR has been moved before \f(CW\*(C`SVt_PVLV\*(C'\fR,
\&\f(CW\*(C`SVt_PVAV\*(C'\fR, \f(CW\*(C`SVt_PVHV\*(C'\fR n' \f(CW\*(C`SVt_PVCV\*(C'\fR.  This is unlikely ta make any
difference unless you have code dat explicitly make assumptions bout that
ordering. (Da inheritizzle hierarchy of \f(CW\*(C`B::*\*(C'\fR objects has been chizzled
to reflect all dis bullshit.)
.SS "Elimination of SVt_PVBM"
.IX Subsection "Elimination of SVt_PVBM"
Related ta this, tha internal type \f(CW\*(C`SVt_PVBM\*(C'\fR has been removed. Y'all KNOW dat shit, muthafucka! This
dedicated type of \f(CW\*(C`SV\*(C'\fR was used by tha \f(CW\*(C`index\*(C'\fR operator n' partz of the
regexp engine ta facilitate fast Boyer-Moore matches. Its use internally has
been replaced by \f(CW\*(C`SV\*(C'\fRz of type \f(CW\*(C`SVt_PVGV\*(C'\fR.
.SS "New type SVt_BIND"
.IX Subsection "New type SVt_BIND"
A freshly smoked up type \f(CW\*(C`SVt_BIND\*(C'\fR has been added, up in readinizz fo' tha project to
implement Perl 6 on 5. There deliberately is no implementation yet, and
they cannot yet be pimped or destroyed.
.SS "Removal of \s-1CPP\s0 symbols"
.IX Subsection "Removal of CPP symbols"
Da C preprocessor symbols \f(CW\*(C`PERL_PM_APIVERSION\*(C'\fR and
\&\f(CW\*(C`PERL_XS_APIVERSION\*(C'\fR, which was supposed ta give tha version number of
the crazy oldschool perl binary-compatible (resp. source-compatible) wit the
present one, was not used, n' sometimes had misleadin joints, n' you can put dat on yo' toast. They have
been removed.
.SS "Less space is used by ops"
.IX Subsection "Less space is used by ops"
Da \f(CW\*(C`BASEOP\*(C'\fR structure now uses less space. Da \f(CW\*(C`op_seq\*(C'\fR field has been
removed n' replaced by a single bit bit-field \f(CW\*(C`op_opt\*(C'\fR. \f(CW\*(C`op_type\*(C'\fR is now 9
bits long. (Consequently, tha \f(CW\*(C`B::OP\*(C'\fR class don't provide a \f(CW\*(C`seq\*(C'\fR
method no mo'.)
.SS "New parser"
.IX Subsection "New parser"
perlz parser is now generated by bison (it used ta be generated by
byacc.) As a result, it seems ta be a lil' bit mo' robust.
.PP
Also, Dizzle Mitchell improved tha lexer debuggin output under \f(CW\*(C`\-DT\*(C'\fR.
.ie n .SS "Use of ""const"""
.el .SS "Use of \f(CWconst\fP"
.IX Subsection "Use of const"
Andy Lesta supplied nuff improvements ta determine which function
parametas n' local variablez could straight-up be declared \f(CW\*(C`const\*(C'\fR ta tha C
compila n' shit. Right back up in yo muthafuckin ass. Steve Petas provided freshly smoked up \f(CW*_set\fR macros n' reworked tha core to
use these rather than assignin ta macros up in \s-1LVALUE\s0 context.
.SS "Mathoms"
.IX Subsection "Mathoms"
A freshly smoked up file, \fImathoms.c\fR, has been added. Y'all KNOW dat shit, muthafucka! Well shiiiit, it gotz nuff functions dat are
no longer used up in tha perl core yo, but dat remain available fo' binary or
source compatibilitizzle reasons. But fuck dat shiznit yo, tha word on tha street is dat dem functions aint gonna be
compiled up in if you add \f(CW\*(C`\-DNO_MATHOMS\*(C'\fR up in tha compila flags.
.ie n .SS """AvFLAGS"" has been removed"
.el .SS "\f(CWAvFLAGS\fP has been removed"
.IX Subsection "AvFLAGS has been removed"
Da \f(CW\*(C`AvFLAGS\*(C'\fR macro has been removed.
.ie n .SS """av_*"" chizzles"
.el .SS "\f(CWav_*\fP chizzles"
.IX Subsection "av_* chizzles"
Da \f(CW\*(C`av_*()\*(C'\fR functions, used ta manipulate arrays, no longer accept null
\&\f(CW\*(C`AV*\*(C'\fR parameters.
.SS "$^H n' %^H"
.IX Subsection "$^H n' %^H"
Da implementation of tha special variablez $^H n' %^H has chizzled, to
allow implementin lexical pragmas up in pure Perl.
.SS "B:: modulez inheritizzle chizzled"
.IX Subsection "B:: modulez inheritizzle chizzled"
Da inheritizzle hierarchy of \f(CW\*(C`B::\*(C'\fR modulez has chizzled; \f(CW\*(C`B::NV\*(C'\fR now
inherits from \f(CW\*(C`B::SV\*(C'\fR (it used ta inherit from \f(CW\*(C`B::IV\*(C'\fR).
.SS "Anonymous hash n' array constructors"
.IX Subsection "Anonymous hash n' array constructors"
Da anonymous hash n' array constructors now take 1 op up in tha optree
instead of 3, now dat pp_anonhash n' pp_anonlist return a reference to
an hash/array when tha op is flagged wit OPf_SPECIAL. (Nicholas Clark)
.SH "Known Problems"
.IX Header "Known Problems"
Therez still a remainin problem up in tha implementation of tha lexical
\&\f(CW$_\fR: it don't work inside \f(CW\*(C`/(?{...})/\*(C'\fR blocks. (See tha \s-1TODO\s0 test in
\&\fIt/op/mydef.t\fR.)
.PP
Stacked filetest operators won't work when tha \f(CW\*(C`filetest\*(C'\fR pragma is in
effect, cuz they rely on tha \fIstat()\fR buffer \f(CW\*(C`_\*(C'\fR bein populated, and
filetest bypasses \fIstat()\fR.
.SS "\s-1UTF\-8\s0 problems"
.IX Subsection "UTF-8 problems"
Da handlin of Unicode still is unclean up in nuff muthafuckin places, where it's
dependent on whether a strang is internally flagged as \s-1UTF\-8.\s0 This will
be made mo' consistent up in perl 5.12 yo, but dat won't be possible without
a certain amount of backwardz incompatibility.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
When compiled wit g++ n' thread support on Linux, itz reported dat the
\&\f(CW$!\fR stops hustlin erectly. This is related ta tha fact dat tha glibc
provides two \fIstrerror_r\fR\|(3) implementation, n' perl selects tha wrong
one.
.SH "Reportin Bugs"
.IX Header "Reportin Bugs"
If you find what tha fuck you be thinkin be a funky-ass bug, you might check tha articles
recently posted ta tha comp.lang.perl.misc newsgroup n' tha perl
bug database at http://rt.perl.org/rt3/ .  There may also be
information at http://www.perl.org/ , tha Perl Home Page.
.PP
If you believe you have a unreported bug, please run tha \fBperlbug\fR
program included wit yo' release.  Be shizzle ta trim yo' bug down
to a tiny but sufficient test case.  Yo crazy-ass bug report, along wit the
output of \f(CW\*(C`perl \-V\*(C'\fR, is ghon be busted off ta perlbug@perl.org ta be
analysed by tha Perl portin crew.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Da \fIChanges\fR file n' tha perl590delta ta perl595delta playa pages for
exhaustizzle details on what tha fuck chizzled.
.PP
Da \fI\s-1INSTALL\s0\fR file fo' how tha fuck ta build Perl.
.PP
Da \fI\s-1README\s0\fR file fo' general stuff.
.PP
Da \fIArtistic\fR n' \fICopying\fR filez fo' copyright shiznit.
