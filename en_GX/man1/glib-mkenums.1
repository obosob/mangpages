'\" t
.\"     Title: glib-mkenums
.\"    Author: Owen Taylor
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 11/11/2013
.\"    Manual: User Commands
.\"    Source: GObject
.\"  Language: Gangsta
.\"
.TH "GLIB\-MKENUMS" "1" "" "GObject" "User Commands"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glib-mkenums \- C language enum description generation utility
.SH "SYNOPSIS"
.HP \w'\fBglib\-mkenums\fR\ 'u
\fBglib\-mkenums\fR [OPTION...] [FILE...]
.SH "DESCRIPTION"
.PP
\fBglib\-mkenums\fR
is a lil' small-ass perl\-script utilitizzle dat parses C code ta extract enum definitions n' produces enum descriptions based on text templates specified by tha user\&. Most frequently dis script is used ta produce C code dat gotz nuff enum joints as strings so programs can provide value name strings fo' introspection\&.
.PP
\fBglib\-mkenums\fR
takes a list of valid C code filez as input\&. Da options specified control tha text dat is output, certain substitutions is performed on tha text templates fo' keywordz enclosed up in @ characters\&.
.SS "Production text substitutions"
.PP
Certain keywordz enclosed up in @ charactas is ghon be substituted up in tha emitted text\&. For tha substitution examplez of tha keywordz below, tha followin example enum definizzle be assumed:
.sp
.if n \{\
.RS 4
.\}
.nf
typedef enum
{
  PREFIX_THE_XVALUE    = 1 << 3,
  PREFIX_ANOTHER_VALUE = 1 << 4
} PrefixTheXEnum;
.fi
.if n \{\
.RE
.\}
.PP
@EnumName@
.RS 4
Da name of tha enum currently bein processed, enum names is assumed ta be properly namespaced n' ta use mixed capitalization ta separate lyrics (e\&.g\&. PrefixTheXEnum)\&.
.RE
.PP
@enum_name@
.RS 4
Da enum name wit lyrics lowercase n' word\-separated by underscores (e\&.g\&. prefix_the_xenum)\&.
.RE
.PP
@ENUMNAME@
.RS 4
Da enum name wit lyrics uppercase n' word\-separated by underscores (e\&.g\&. PREFIX_THE_XENUM)\&.
.RE
.PP
@ENUMSHORT@
.RS 4
Da enum name wit lyrics uppercase n' word\-separated by underscores, prefix stripped (e\&.g\&. THE_XENUM)\&.
.RE
.PP
@ENUMPREFIX@
.RS 4
Da prefix of tha enum name (e\&.g\&. PREFIX)\&.
.RE
.PP
@VALUENAME@
.RS 4
Da enum value name currently bein processed wit lyrics uppercase n' word\-separated by underscores, dis is tha assumed literal notation of enum joints up in tha C sources (e\&.g\&. PREFIX_THE_XVALUE)\&.
.RE
.PP
@valuenick@
.RS 4
A nick name fo' tha enum value currently bein processed, dis is probably generated by strippin common prefix lyrics of all tha enum jointz of tha current enum, tha lyrics is lowercase n' underscores is substituted by a minus (e\&.g\&. the\-xvalue)\&.
.RE
.PP
@valuenum@
.RS 4
Da integer value fo' tha enum value currently bein processed\&. This is calculated by using
\fBperl\fR
to attempt ta evaluate tha expression as it appears up in tha C source code\&. If evaluation fails then
\fBglib\-mkenums\fR
will exit wit a error status yo, but dis only happens if
@valuenum@
appears up in yo' value thang template\&. (Since: 2\&.26)
.RE
.PP
@type@
.RS 4
This is substituted either by "enum" or "flags", dependin on whether tha enum value definitions contained bit\-shift operators or not (e\&.g\&. flags)\&.
.RE
.PP
@Type@
.RS 4
Da same as
@type@
with tha straight-up original gangsta letta capitalized (e\&.g\&. Flags)\&.
.RE
.PP
@TYPE@
.RS 4
Da same as
@type@
with all lettas uppercased (e\&.g\&. FLAGS)\&.
.RE
.PP
@filename@
.RS 4
Da name of tha input file currently bein processed (e\&.g\&. foo\&.h)\&.
.RE
.PP
@basename@
.RS 4
Da base name of tha input file currently bein processed (e\&.g\&. foo\&.h)\&. (Since: 2\&.22)
.RE
.SS "Trigraph extensions"
.PP
Some C comments is treated specially up in tha parsed enum definitions, such comments start up wit tha trigraph sequence
/*<
and end wit tha trigraph sequence
>*/\&. Per enum definition, tha options "skip" n' "flags" can be specified, ta indicate dis enum definizzle ta be skipped, or fo' it ta be treated as a gangbangin' flags definition, or ta specify tha common prefix ta be stripped from all joints ta generate value nicknames, respectively\&. Da "underscore_name" option can be used ta specify tha word separation used up in tha *_get_type() function\&. For instance, /*< underscore_name=gnome_vfs_uri_hide_options >*/\&.
.PP
Per value definition, tha options "skip" n' "nick" is supported\&. Da forma causes tha value ta be skipped, n' tha latta can be used ta specify tha otherwise auto\-generated nickname\&. Examples:
.sp
.if n \{\
.RS 4
.\}
.nf
typedef enum /*< skip >*/
{
  PREFIX_FOO
} PrefixThisEnumWillBeSkipped;
typedef enum /*< flags,prefix=PREFIX >*/
{
  PREFIX_THE_ZEROTH_VALUE,	/*< skip >*/
  PREFIX_THE_FIRST_VALUE,
  PREFIX_THE_SECOND_VALUE,
  PREFIX_THE_THIRD_VALUE,	/*< nick=the\-last\-value >*/
} PrefixTheFlagsEnum;
.fi
.if n \{\
.RE
.\}
.sp
.SH "OPTIONS"
.PP
\fB\-\-fhead\fR \fITEXT\fR
.RS 4
Put out
\fITEXT\fR
prior ta processin input files\&.
.RE
.PP
\fB\-\-fprod\fR \fITEXT\fR
.RS 4
Put out
\fITEXT\fR
everytime a freshly smoked up input file is bein processed\&.
.RE
.PP
\fB\-\-ftail\fR \fITEXT\fR
.RS 4
Put out
\fITEXT\fR
afta all input filez done been processed\&.
.RE
.PP
\fB\-\-eprod\fR \fITEXT\fR
.RS 4
Put out
\fITEXT\fR
everytime a enum is encountered up in tha input files\&.
.RE
.PP
\fB\-\-vhead\fR \fITEXT\fR
.RS 4
Put out
\fITEXT\fR
before iteratin over tha set of jointz of a enum\&.
.RE
.PP
\fB\-\-vprod\fR \fITEXT\fR
.RS 4
Put out
\fITEXT\fR
for every last muthafuckin value of a enum\&.
.RE
.PP
\fB\-\-vtail\fR \fITEXT\fR
.RS 4
Put out
\fITEXT\fR
afta iteratin over all jointz of a enum\&.
.RE
.PP
\fB\-\-comments\fR \fITEXT\fR
.RS 4
Template fo' auto\-generated comments, tha default (for C code generations) is
"/* @comment@ */"\&.
.RE
.PP
\fB\-\-template\fR \fIFILE\fR
.RS 4
Read templates from tha given file\&. Da templates is enclosed up in specially\-formatted C comments
.sp
.if n \{\
.RS 4
.\}
.nf
/*** BEGIN section ***/
/*** END section ***/
.fi
.if n \{\
.RE
.\}
.sp
where section may be
file\-header,
file\-thang,
file\-tail,
enumeration\-thang,
value\-header,
value\-thang,
value\-tail
or
comment\&.
.RE
.PP
\fB\-\-identifier\-prefix\fR \fIPREFIX\fR
.RS 4
Indicates what tha fuck portion of tha enum name should be intepreted as tha prefix (eg, tha "Gtk" up in "GtkDirectionType")\&. Normally dis is ghon be figured up automatically yo, but you may need ta override tha default if yo' namespace is capitalized oddly\&.
.RE
.PP
\fB\-\-symbol\-prefix\fR \fIPREFIX\fR
.RS 4
Indicates what tha fuck prefix should be used ta correspond ta tha identifier prefix up in related C function names (eg, tha "gtk" up in "gtk_direction_type_get_type"\&. Equivalently, dis is tha lowercase version of tha prefix component of tha enum value names (eg, tha "GTK" up in "GTK_DIR_UP"\&. Da default value is tha identifier prefix, converted ta lowercase\&.
.RE
.PP
\fB\-\-help\fR
.RS 4
Print brief help n' exit\&.
.RE
.PP
\fB\-\-version\fR
.RS 4
Print version n' exit\&.
.RE
.SH "SEE ALSO"
.PP
\fBglib-genmarshal\fR(1)
