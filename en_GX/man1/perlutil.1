.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLUTIL 1"
.TH PERLUTIL 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlutil \- utilitizzles packaged wit tha Perl distribution
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Along wit tha Perl interpreta itself, tha Perl distribution installs a
range of utilitizzles on yo' system. There is also nuff muthafuckin utilities
which is used by tha Perl distribution itself as part of tha install
process. This document exists ta list all of these utilities, explain
what they is fo' n' provide pointas ta each modulez documentation,
if appropriate.
.SH "LIST OF UTILITIES"
.IX Header "LIST OF UTILITIES"
.SS "Documentation"
.IX Subsection "Documentation"
.IP "perldoc" 3
.IX Item "perldoc"
Da main intercourse ta Perlz documentation is \f(CW\*(C`perldoc\*(C'\fR, although
if you readin this, itz mo' than likely dat you've already found
it. \fIperldoc\fR will extract n' format tha documentation from any file
in tha current directory, any Perl module installed on tha system, or
any of tha standard documentation pages, like fuckin dis one. Use 
\&\f(CW\*(C`perldoc <name>\*(C'\fR ta git shiznit on any of tha utilities
busted lyrics bout up in dis document.
.IP "pod2man n' pod2text" 3
.IX Item "pod2man n' pod2text"
If itz run from a terminal, \fIperldoc\fR will probably call \fIpod2man\fR to
translate \s-1POD \s0(Plain Oldskool Documentation \- peep perlpod fo' an
explanation) tha fuck into a manpage, n' then run \fIman\fR ta display it; if
\&\fIman\fR aint available, \fIpod2text\fR is ghon be used instead n' tha output
piped all up in yo' most straight-up bangin pager.
.IP "pod2html n' pod2latex" 3
.IX Item "pod2html n' pod2latex"
As well as these two, there be two other converters: \fIpod2html\fR will
produce \s-1HTML\s0 pages from \s-1POD,\s0 n' \fIpod2latex\fR, which produces LaTeX
files.
.IP "pod2usage" 3
.IX Item "pod2usage"
If you just wanna know how tha fuck ta use tha utilitizzles busted lyrics bout here,
\&\fIpod2usage\fR will just extract tha \*(L"\s-1USAGE\*(R"\s0 section; some of
the utilitizzles will automatically call \fIpod2usage\fR on theyselves when
you call dem wit \f(CW\*(C`\-help\*(C'\fR.
.IP "podselect" 3
.IX Item "podselect"
\&\fIpod2usage\fR be a special case of \fIpodselect\fR, a utilitizzle ta extract
named sections from documents freestyled up in \s-1POD.\s0 For instance, while
utilitizzles have \*(L"\s-1USAGE\*(R"\s0 sections, Perl modulez probably have \*(L"\s-1SYNOPSIS\*(R"\s0
sections: \f(CW\*(C`podselect \-s "SYNOPSIS" ...\*(C'\fR will extract dis section for
a given file.
.IP "podchecker" 3
.IX Item "podchecker"
If you freestylin yo' own documentation up in \s-1POD,\s0 tha \fIpodchecker\fR
utilitizzle will look fo' errors up in yo' markup.
.IP "splain" 3
.IX Item "splain"
\&\fIsplain\fR be a intercourse ta perldiag \- paste up in yo' error message
to it, n' it'll explain it fo' yo thugged-out ass.
.ie n .IP """roffitall""" 3
.el .IP "\f(CWroffitall\fR" 3
.IX Item "roffitall"
Da \f(CW\*(C`roffitall\*(C'\fR utilitizzle aint installed on yo' system but be reppin
the \fIpod/\fR directory of yo' Perl source kit; it converts all the
documentation from tha distribution ta \fI*roff\fR format, n' produces a
typeset PostScript or text file of tha whole lot.
.SS "Converters"
.IX Subsection "Converters"
To help you convert legacy programs ta Perl, we've included three
conversion filters:
.IP "a2p" 3
.IX Item "a2p"
\&\fIa2p\fR converts \fIawk\fR scripts ta Perl programs; fo' example, \f(CW\*(C`a2p \-F:\*(C'\fR
on tha simple \fIawk\fR script \f(CW\*(C`{print $2}\*(C'\fR will produce a Perl program
based round dis code:
.Sp
.Vb 4
\&    while (<>) {
\&        ($Fld1,$Fld2) = split(/[:\en]/, $_, \-1);
\&        print $Fld2;
\&    }
.Ve
.IP "s2p n' psed" 3
.IX Item "s2p n' psed"
Similarly, \fIs2p\fR converts \fIsed\fR scripts ta Perl programs. \fIs2p\fR run
on \f(CW\*(C`s/foo/bar\*(C'\fR will produce a Perl program based round this:
.Sp
.Vb 5
\&    while (<>) {
\&        chomp;
\&        s/foo/bar/g;
\&        print if $printit;
\&    }
.Ve
.Sp
When invoked as \fIpsed\fR, it behaves as a \fIsed\fR implementation, freestyled in
Perl.
.IP "find2perl" 3
.IX Item "find2perl"
Finally, \fIfind2perl\fR translates \f(CW\*(C`find\*(C'\fR commandz ta Perl equivalents which 
use tha File::Find module fo' realz. As a example, 
\&\f(CW\*(C`find2perl . \-user root \-perm 4000 \-print\*(C'\fR produces tha followin callback
subroutine fo' \f(CW\*(C`File::Find\*(C'\fR:
.Sp
.Vb 7
\&    sub wanted {
\&        mah ($dev,$ino,$mode,$nlink,$uid,$gid);
\&        (($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_)) &&
\&        $uid == $uid{\*(Aqroot\*(Aq}) &&
\&        (($mode & 0777) == 04000);
\&        print("$name\en");
\&    }
.Ve
.PP
As well as these filtas fo' convertin other languages, the
pl2pm utilitizzle will help you convert old-style Perl 4 libraries ta 
new-style Perl5 modules.
.SS "Administration"
.IX Subsection "Administration"
.IP "config_data" 3
.IX Item "config_data"
Query or chizzle configuration of Perl modulez dat use Module::Build\-based
configuration filez fo' features n' config data.
.IP "libnetcfg" 3
.IX Item "libnetcfg"
To display n' chizzle tha libnet configuration run tha libnetcfg command.
.IP "perlivp" 3
.IX Item "perlivp"
Da \fIperlivp\fR program is set up at Perl source code build time ta test
the Perl version dat shiznit was built under n' shit.  It can be used afta hustlin \f(CW\*(C`make
install\*(C'\fR (or yo' platformz equivalent procedure) ta verify dat perl
and its libraries done been installed erectly.
.SS "Development"
.IX Subsection "Development"
There is a set of utilitizzles which help you up in pimpin Perl programs, 
and up in particular, extendin Perl wit C.
.IP "perlbug" 3
.IX Item "perlbug"
\&\fIperlbug\fR is tha recommended way ta report bugs up in tha perl interpreter
itself or any of tha standard library modulez back ta tha pimpers;
please read all up in tha documentation fo' \fIperlbug\fR thoroughly before
usin it ta submit a funky-ass bug report.
.IP "perlthanks" 3
.IX Item "perlthanks"
This program serves up a easy as fuck  way ta bust a thank-you message back ta the
authors n' maintainerz of perl. It aint nuthin but just \fIperlbug\fR installed under
another name.
.IP "h2ph" 3
.IX Item "h2ph"
Back before Perl had tha \s-1XS\s0 system fo' connectin wit C libraries,
programmers used ta git library constants by readin all up in tha C
header files. Yo ass may still peep \f(CW\*(C`require \*(Aqsyscall.ph\*(Aq\*(C'\fR or similar
around \- tha \fI.ph\fR file should be pimped by hustlin \fIh2ph\fR on the
correspondin \fI.h\fR file. Right back up in yo muthafuckin ass. See tha \fIh2ph\fR documentation fo' mo' on how
to convert a whole bunch of header filez at once.
.IP "c2ph n' pstruct" 3
.IX Item "c2ph n' pstruct"
\&\fIc2ph\fR n' \fIpstruct\fR, which is straight-up tha same program but behave
differently dependin on how tha fuck they is called, provide another way of
gettin at C wit Perl \- they'll convert C structures n' union declarations
to Perl code. This is deprecated up in favour of \fIh2xs\fR these days.
.IP "h2xs" 3
.IX Item "h2xs"
\&\fIh2xs\fR converts C header filez tha fuck into \s-1XS\s0 modules, n' will try n' write
as much glue between C libraries n' Perl modulez as it can. I aint talkin' bout chicken n' gravy biatch. It aint nuthin but also
very useful fo' bustin skeletonz of pure Perl modules.
.IP "enc2xs" 3
.IX Item "enc2xs"
\&\fIenc2xs\fR buildz a Perl extension fo' use by Encode from either
Unicode Characta Mappin filez (.ucm) or Tcl Encodin Filez (.enc).
Besides bein used internally durin tha build process of tha Encode
module, you can use \fIenc2xs\fR ta add yo' own encodin ta perl.
No knowledge of \s-1XS\s0 is necessary.
.IP "xsubpp" 3
.IX Item "xsubpp"
\&\fIxsubpp\fR be a cold-ass lil compila ta convert Perl \s-1XS\s0 code tha fuck into C code.
It be typically run by tha makefilez pimped by ExtUtils::MakeMaker.
.Sp
\&\fIxsubpp\fR will compile \s-1XS\s0 code tha fuck into C code by embeddin tha constructs
necessary ta let C functions manipulate Perl joints n' creates tha glue
necessary ta let Perl access dem functions.
.IP "prove" 3
.IX Item "prove"
\&\fIprove\fR be a cold-ass lil command-line intercourse ta tha test-runnin functionality
of \fITest::Harness\fR.  It aint nuthin but a alternatizzle ta \f(CW\*(C`make test\*(C'\fR.
.IP "corelist" 3
.IX Item "corelist"
A command-line front-end ta \f(CW\*(C`Module::CoreList\*(C'\fR, ta query what tha fuck modules
were shipped wit given versionz of perl.
.SS "General tools"
.IX Subsection "General tools"
A few general-purpose tools is shipped wit perl, mostly cuz they
came along modulez included up in tha perl distribution.
.IP "piconv" 3
.IX Item "piconv"
\&\fBpiconv\fR be a Perl version of \fBiconv\fR, a cold-ass lil characta encodin converter
widely available fo' various Unixen todizzle. It make me wanna hollar playa!  This script was primarily a
technologizzle demonstrator fo' Perl v5.8.0 yo, but you can use piconv up in the
place of iconv fo' virtually any case.
.IP "ptar" 3
.IX Item "ptar"
\&\fIptar\fR be a tar-like program, freestyled up in pure Perl.
.IP "ptardiff" 3
.IX Item "ptardiff"
\&\fIptardiff\fR be a lil' small-ass utilitizzle dat produces a gangbangin' finger-lickin' diff between a extracted
archive n' a unextracted one. (Note dat dis utilitizzle requires the
\&\f(CW\*(C`Text::Diff\*(C'\fR module ta function properly; dis module aint distributed
with perl yo, but be available from tha \s-1CPAN.\s0)
.IP "ptargrep" 3
.IX Item "ptargrep"
\&\fIptargrep\fR be a utilitizzle ta apply pattern matchin ta tha contentz of filez 
in a tar archive.
.IP "shasum" 3
.IX Item "shasum"
This utility, dat comes wit tha \f(CW\*(C`Digest::SHA\*(C'\fR module, is used ta print
or verify \s-1SHA\s0 checksums.
.IP "zipdetails" 3
.IX Item "zipdetails"
zipdetails displays shiznit bout tha internal record structure of tha zip file.
It aint concerned wit displayin any detailz of tha compressed data stored up in tha zip file.
.SS "Installation"
.IX Subsection "Installation"
These utilitizzles help manage extra Perl modulez dat don't come wit tha perl
distribution.
.IP "cpan" 3
.IX Item "cpan"
\&\fIcpan\fR be a cold-ass lil command-line intercourse ta \s-1CPAN\s0.pm.  It allows you ta install
modulez or distributions from \s-1CPAN,\s0 or just git shiznit bout them, and
a shitload mo' n' mo' n' mo'.  It be similar ta tha command line mode of tha \s-1CPAN\s0 module,
.Sp
.Vb 1
\&    perl \-MCPAN \-e shell
.Ve
.IP "cpanp" 3
.IX Item "cpanp"
\&\fIcpanp\fR is, like \fIcpan\fR, a cold-ass lil command-line intercourse ta tha \s-1CPAN,\s0 using
the \f(CW\*(C`CPANPLUS\*(C'\fR module as a funky-ass back-end yo, but it ain't no stoppin cause I be still poppin'. Well shiiiit, it can be used interactively or
imperatively.
.IP "cpan2dist" 3
.IX Item "cpan2dist"
\&\fIcpan2dist\fR be a tool ta create distributions (or packages) from \s-1CPAN\s0
modules, then suitable fo' yo' package manager of chizzle. Right back up in yo muthafuckin ass. Support for
specific formats is available from \s-1CPAN\s0 as \f(CW\*(C`CPANPLUS::Dist::*\*(C'\fR modules.
.IP "instmodsh" 3
.IX Item "instmodsh"
A lil intercourse ta ExtUtils::Installed ta examine installed modules,
validate yo' packlists n' even create a tarbizzle from a installed module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perldoc, pod2man, perlpod,
pod2html, pod2usage, podselect,
podchecker, splain, perldiag,
\&\f(CW\*(C`roffitall|roffitall\*(C'\fR, a2p, s2p, find2perl,
File::Find, pl2pm, perlbug,
h2ph, c2ph, h2xs, enc2xs, xsubpp,
cpan, cpanp, cpan2dist, instmodsh, piconv, prove,
corelist, ptar, ptardiff, shasum, zipdetails
