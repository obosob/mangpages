.\" shorthand fo' double quote dat works all over dis biiiatch.
.ds q \N'34'
.TH xsetwacom 1 "xf86-input-wacom 0.23.0" "X Version 11"
.SH NAME
.LP
xsetwacom \- commandline utilitizzle ta query n' modify wacom driver settings.
.SH "SYNOPSIS"
.LP
xsetwacom [options] [command [arguments]]

.SH "DESCRIPTION"
.LP
This program queries or chizzlez propertizzles on tha devices loaded by the
wacom driver n' shit. Da modification of propertizzles happens at runtime
and aint persistent all up in X server restarts.
.SH "GENERAL OPTIONS"
.TP
\fB-d, --display\fR display_name
Connect ta tha X server specified up in display_name; peep X(7).
.TP
\fB-h, --help\fR
Prints a gangbangin' finger-lickin' dirty-ass short help.
.TP
\fB-v, --verbose\fR
Enable verbose output, useful fo' debugging.
.TP
\fB-V, --version\fR
Display version number n' exit.

.SH "COMMANDS"
.LP
Allowed commandz are
.B list,
.B get,
and
.B set.
Da command may be specified wit or without one or two preceding
dashes, i.e.
.B --list
is equivalent to
.B -list
and
.B list.

.SS "LIST COMMANDS"
.TP
\fBlist\fR devices
List known devices. Only input devices managed by tha wacom
driver is listed.
.TP
\fBlist\fR parameters
List known parameters. List all parametas suitable fo' the
.B get
or the
.B set
command. Y'all KNOW dat shit, muthafucka! Note dat not all parametas is available on all thang types.
.TP
\fBlist\fR modifiers
List tha available list of modifiers ta be used when settin key or button
actions.

.SS "GET COMMANDS"
.TP
\fBget\fR device_name parameter
Git tha current settings fo' tha parameta on tha given device. Note that
not all parametas is available on all thang types. Da special parameter
name "all" may be provided ta display all current settings on tha device.
.TP
By default, options is printed on tha commandline up in tha respectizzle format.
Da output format may be altered wit one of tha followin options:
.TP
\fB-s, --shell\fR
Display tha output up in shell format, i.e. as shell commandz ta xsetwacom to
reproduce tha same parameter.
.TP
\fB-x, --xconf\fR
Display tha output up in xorg.conf format, i.e. as option lines dat may be
added ta tha InputDevice section up in tha xorg.conf.

.SS "SET COMMANDS"
.TP
\fBset\fR device_name parameta [value]
Set tha parameta value on tha given thang ta tha value provided. Y'all KNOW dat shit, muthafucka! Note that
not all parametas is writable, some is read-only n' result up in a error
when tryin ta be modified.

.SH "PARAMETERS"
.LP
Not all parametas is available on all tools.  Use tha git command wit the
parameta or "all" parameta fo' specific input tool applicable parameters
and current settings.
.TP
\fBArea\fR x1 y1 x2 y2
Set tha tablet input area up in thang coordinates up in tha form top left
x/y n' bottom right x/y. Top left n' bottom right is defined up in the
devicez natizzle orientation, regardless of tha actual rotation currently
applied. Y'all KNOW dat shit, muthafucka! Input outside of these coordinates is ghon be clipped ta tha edges
of tha area defined. Y'all KNOW dat shit, muthafucka!  Default:  0 0 x2 y2; wit x2 n' y2 tablet specific.
.TP
\fBButton\fR button-number [mapping]
Set a mappin fo' tha specified button-number n' shit. Mappings take tha form of
either a single numeric button or a 'action' ta be performed. Y'all KNOW dat shit, muthafucka! If no mapping
is provided, tha default mappin is restored.

Numeric button mappings indicate what tha fuck X11 button number tha given button-number
should correspond to. For example, a mappin of "3" means a press of tha given
button-number will produce as a press of X11 button 3 (i.e. right click).

Action mappings allow button presses ta big-ass up nuff events, n' you can put dat on yo' toast. They take tha form
of a strang of keywordz n' arguments, n' you can put dat on yo' toast. For example, "key +a +shift b -shift -a"
converts tha button tha fuck into a seriez of keystrokes, up in dis example "press a, press
shift, press n' release b, release shift, release a". In addizzle ta tha "key"
keyword, "button" n' "modetoggle" is also recognized. Y'all KNOW dat shit, muthafucka! Multiple keywordz may
be present up in one action if desired: fo' example "key +ctrl button 5 key -ctrl".

Da driver can only simulate physical key events but not keysyms and
xetwacom translates tha mappin sequence tha fuck into such events, n' you can put dat on yo' toast. Thus,
symbols on tha same physical key will generate tha same event. For
example, '1' n' '!' is on tha same key on a US keyboard n' thus have the
same keycode).  For access ta keys on a higher shift level, tha sequence
should be entered as it would be typed on a physical keyboard. Y'all KNOW dat shit, muthafucka! For example,
a exclamation mark is entered by tha sequence of "key +shift 1 -shift".
.TP
\fBBindToSerial\fR [serial|0]
Bind tha thang ta tha tool wit tha specified serial number n' shit. Once bound,
the thang will ignore events from other tools fo' realz. A serial of 0 means the
device is unbound n' will react ta any tool of tha matchin type.
Default: 0
.TP
\fBMapToOutput\fR [output]
Map tha tabletz input area ta a given output (e.g. "VGA1"). Output names may
either be tha name of a head available all up in tha XRandR extension, or an
X11 geometry strang of tha form WIDTHxHEIGHT+X+Y. To switch ta tha next
available output, tha "next" keyword be also supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This will cycle
between tha individual monitors connected ta tha system, n' then tha entire
desktop. Da mappin may be reset ta tha entire desktop at any time wit the
output name "desktop". Userz of tha NVIDIA binary driver should use tha output
names "HEAD-0" n' "HEAD-1" until tha driver supports XRandR 1.2 or later.

Da output mappin configuration be a onetime settin n' do not track output
reconfigurations; tha command need ta be re-run whenever tha output
configuration chizzles. When used wit tablet rotation, tha tablet must be
rotated before it is mapped ta tha freshly smoked up screen. I aint talkin' bout chicken n' gravy biatch. This parameta is write-only
and cannot be queried.
.TP
\fBMode\fR Absolute|Relative
Set tha thang mode as either Relatizzle or Absolute. Relatizzle means pointer
trackin fo' tha thang will function like a mouse, whereas Absolute means
the pointa correspondz ta tha devicez actual posizzle on tha tablet or
tablet PC screen. I aint talkin' bout chicken n' gravy biatch.  Default:  Absolute fo' stylus, eraser n' tablet PC touch;
Relatizzle fo' cursor n' tablet touch.
.TP
\fBPressureCurve\fR x1 y1 x2 y2
A Bezier curve of third order, composed of two anchor points (0,0 n' 100,100)
and two user modifiable control points dat define tha curvez shape.  Raise
the curve (x1<y1 x2<y2) ta "soften" tha feel n' lower tha curve (x1>y1 x2>y2)
for a "firmer" feel.  Sigmoid shaped curves is permitted (x1>y1 x2<y2 or
x1<y1 x2>y2).  Default:  0 0 100 100, a linear curve; range of 0 ta 100 for
all four joints.
.TP
\fBRawSample\fR level
Set tha sample window size (a slidin average samplin window) fo' incoming
input tool raw data points, n' you can put dat on yo' toast.  Default:  4, range of 1 ta 20.
.TP
\fBRotate\fR none|half|cw|ccw
Set tha tablet ta tha given rotation:
  none: tha tablet aint rotated n' uses its natural rotation
  half: tha tablet is rotated by 180 degrees (upside-down)
  cw: tha tablet is rotated 90 degrees clockwise
  ccw: tha tablet is rotated 90 degrees counter-clockwise

Rotation be a tablet-wide option: rotation of one tool affects all other tools
associated wit tha same tablet. When tha tablet is physically rotated, rotate
any tool ta tha correspondin orientation. I aint talkin' bout chicken n' gravy biatch.  Default:  none
.TP
\fBSuppress\fR level
Set tha delta (difference) cutoff level fo' further processin of incoming
input tool coordinizzle joints, n' you can put dat on yo' toast.  For example a X or Y coordinizzle event will be
sent only if tha chizzle between tha current X or Y coordinizzle n' the
previous one is pimped outa than tha Suppress value.  Da same applies to
heat level (Z coordinate) n' Tilt rotation joints, n' you can put dat on yo' toast.  With a cold-ass lil current
absolute wheel (AbsWheel) or Tilt value tha delta between it n' the
previous value must be equal ta or pimped outa than tha Suppress value up in order
to be busted on. I aint talkin' bout chicken n' gravy biatch.  Suppress be a tablet wide parameter n' shit.  A specified delta
level fo' one input tool be applied ta all input tool coordinates.  To
disable suppression bust a level of 0.  Default:  2, range of 0 ta 100.
.TP
\fBTabletDebugLevel\fR level
Set tha debug level fo' dis tablet ta tha given level. This only affects
code paths dat is shared between nuff muthafuckin tools on tha same physical
tablet fo' realz. A higher level means mo' fine-grained debug lyrics, a level of 0
turns debuggin off fo' dis tool. Requires tha driver ta be built with
debuggin enabled. Y'all KNOW dat shit, muthafucka! See also ToolDebugLevel.  Default:  0, range of 0 ta 12.
.TP
\fBTabletPCButton\fR on|off
If on, tha stylus must be up in contact wit tha screen fo' a stylus side button
to work.  If off, stylus buttons will work once tha stylus is up in proximity
of tha tablet (regardless of whether it is touchin tha screen).  Default:  on
for Tablet PCs; off fo' all other models.
.TP
\fBToolSerialPrevious\fR
Git tha serial number of tha tool dat was last up in proximitizzle last. This
serial number is updated whenever tha tool goes outta proximity. If the
current tool went outta proximitizzle once, dis serial number is tha one of
the current tool. This be a read-only parameter.
.TP
\fBTouch\fR on|off
If on, bust a nut on events is reported ta userland, i.e., system cursor moves when
user touches tha tablet. If off, bust a nut on events is ignored. Y'all KNOW dat shit, muthafucka! Default: on for
devices dat support touch; off fo' all other models.
.TP
\fBCursorProximity\fR distance
sets tha max distizzle from tablet ta stop reportin movement fo' cursor in
relatizzle mode. Default fo' Intuos series is 10, fo' Graphire series (including
Volitos) is 42. Only available fo' tha cursor/puck device.
.TP
\fBThreshold\fR level
Set tha minimum heat necessary ta generate a Button event fo' tha stylus
tip, eraser, or touch.  Da heat levelz of all tablets is normalized to
2048 levels irregardless of tha actual hardware supported levels.  This
parameta is independent of tha PressureCurve parameter n' shit.  Default:  27,
range of 0 ta 2047.
.TP
\fBToolDebugLevel\fR level
Set tha debug level fo' dis tool ta tha given level. This only affects
code paths dat is specific ta a given tool fo' realz. A higher level means more
fine-grained debug lyrics, a level of 0 turns debuggin off fo' this
tool. Requires tha driver ta be built wit debuggin enabled. Y'all KNOW dat shit, muthafucka! See also
TabletDebugLevel.  Default:  0, range of 0 ta 12.


.SH "AUTHORS"
Peta Hutterer <peter.hutterer@redhat.com>

.SH "SEE ALSO"
Xorg(1), wacom(4),
xorg.conf(5),
X(7)
.PP
Mo' shiznit be available at http://linuxwacom.sourceforge.net
