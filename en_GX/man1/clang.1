.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CLANG 1"
.TH CLANG 1 "2013-11-18" "clang 3.4.2" "Clang Tools Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
clang \- tha Clang C, C++, n' Objective\-C compiler
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBclang\fR [\fB\-c\fR|\fB\-S\fR|\fB\-E\fR] \fB\-std=\fR\fIstandard\fR \fB\-g\fR
  [\fB\-O0\fR|\fB\-O1\fR|\fB\-O2\fR|\fB\-O3\fR|\fB\-Ofast\fR|\fB\-Os\fR|\fB\-Oz\fR|\fB\-O\fR|\fB\-O4\fR]
  \fB\-W\fR\fIwarnings...\fR \fB\-pedantic\fR
  \fB\-I\fR\fIdir...\fR \fB\-L\fR\fIdir...\fR
  \fB\-D\fR\fImacro[=defn]\fR
  \fB\-f\fR\fIfeature-option...\fR
  \fB\-m\fR\fImachine-option...\fR
  \fB\-o\fR \fIoutput-file\fR
  \fB\-stdlib=\fR\fIlibrary\fR 
  \fIinput-filenames\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBclang\fR be a C, \*(C+, n' Objective-C compila which encompasses preprocessing,
parsing, optimization, code generation, assembly, n' linking.  Dependin on
which high-level mode settin is passed, Clang will stop before bustin a gangbangin' full
link.  While Clang is highly integrated, it is blingin ta KNOW the
stagez of compilation, ta KNOW how tha fuck ta invoke dat shit.  These stages are:
.IP "\fBDriver\fR" 4
.IX Item "Driver"
Da \fBclang\fR executable is straight-up a lil' small-ass driver which controls tha overall
execution of other tools like fuckin tha compiler, assembla n' linker n' shit.  Typically
you do not need ta interact wit tha driver yo, but you transparently use it ta run
the other tools.
.IP "\fBPreprocessing\fR" 4
.IX Item "Preprocessing"
This stage handlez tokenization of tha input source file, macro expansion,
#include expansion n' handlin of other preprocessor directives.  Da output of
this stage is typically called a \*(L".i\*(R" (for C), \*(L".ii\*(R" (for \*(C+), \*(L".mi\*(R" (for 
Objective-C) , or \*(L".mii\*(R" (for Objective\-\*(C+) file.
.IP "\fBParsin n' Semantic Analysis\fR" 4
.IX Item "Parsin n' Semantic Analysis"
This stage parses tha input file, translatin preprocessor tokens tha fuck into a parse
tree.  Once up in tha form of a parser tree, it applies semantic analysis ta compute
types fo' expressions as well n' determine whether tha code is well formed. Y'all KNOW dat shit, muthafucka! This
stage is responsible fo' generatin most of tha compila warnings as well as
parse errors.  Da output of dis stage be a \*(L"Abstract Syntax Tree\*(R" (\s-1AST\s0).
.IP "\fBCode Generation n' Optimization\fR" 4
.IX Item "Code Generation n' Optimization"
This stage translates a \s-1AST\s0 tha fuck into low-level intermediate code (known as \*(L"\s-1LLVM
IR\*(R"\s0) n' ultimately ta machine code.  This phase is responsible fo' optimizing
the generated code n' handlin target-specific code generation. I aint talkin' bout chicken n' gravy biatch.  Da output of
this stage is typically called a \*(L".s\*(R" file or \*(L"assembly\*(R" file.
.Sp
Clang also supports tha use of a integrated assembler, up in which tha code
generator produces object filez directly. This avoidz tha overhead of generating
the \*(L".s\*(R" file n' of callin tha target assembler.
.IP "\fBAssembler\fR" 4
.IX Item "Assembler"
This stage runs tha target assembla ta translate tha output of tha compiler
into a target object file.  Da output of dis stage is typically called a \*(L".o\*(R"
file or \*(L"object\*(R" file.
.IP "\fBLinker\fR" 4
.IX Item "Linker"
This stage runs tha target linker ta merge multiple object filez tha fuck into an
executable or dynamic library.  Da output of dis stage is typically called an
\&\*(L"a.out\*(R", \*(L".dylib\*(R" or \*(L".so\*(R" file.
.PP
Da Clang compila supports a big-ass number of options ta control each of these
stages.  In addizzle ta compilation of code, Clang also supports other tools:
.PP
\&\fBClang Static Analyzer\fR
.PP
Da Clang Static Analyzer be a tool dat scans source code ta try ta find bugs
all up in code analysis.  This tool uses nuff partz of Clang n' is built tha fuck into the
same driver n' shit.  Please peep <http://clang\-analyzer.llvm.org> fo' mo' details
on how tha fuck ta use tha static analyzer.
.SH "OPTIONS"
.IX Header "OPTIONS"
.SS "Stage Selection Options"
.IX Subsection "Stage Selection Options"
.IP "\fB\-E\fR" 4
.IX Item "-E"
Run tha preprocessor stage.
.IP "\fB\-fsyntax\-only\fR" 4
.IX Item "-fsyntax-only"
Run tha preprocessor, parser n' type checkin stages.
.IP "\fB\-S\fR" 4
.IX Item "-S"
Run tha previous stages as well as \s-1LLVM\s0 generation n' optimization stages and
target-specific code generation, producin a assembly file.
.IP "\fB\-c\fR" 4
.IX Item "-c"
Run all of tha above, plus tha assembler, generatin a target \*(L".o\*(R" object file.
.IP "\fBno stage selection option\fR" 4
.IX Item "no stage selection option"
If no stage selection option is specified, all stages above is run, n' the
linker is run ta combine tha thangs up in dis biatch tha fuck into a executable or shared library.
.SS "Language Selection n' Mode Options"
.IX Subsection "Language Selection n' Mode Options"
.IP "\fB\-x\fR \fIlanguage\fR" 4
.IX Item "-x language"
Treat subsequent input filez as havin type \fIlanguage\fR.
.IP "\fB\-std\fR=\fIlanguage\fR" 4
.IX Item "-std=language"
Specify tha language standard ta compile for.
.IP "\fB\-stdlib\fR=\fIlibrary\fR" 4
.IX Item "-stdlib=library"
Specify tha \*(C+ standard library ta use; supported options is libstdc++ and
libc++.
.IP "\fB\-ansi\fR" 4
.IX Item "-ansi"
Same as \fB\-std=c89\fR.
.IP "\fB\-ObjC++\fR" 4
.IX Item "-ObjC++"
Treat source input filez as Objective\-\*(C+ inputs.
.IP "\fB\-ObjC\fR" 4
.IX Item "-ObjC"
Treat source input filez as Objective-C inputs.
.IP "\fB\-trigraphs\fR" 4
.IX Item "-trigraphs"
Enable trigraphs.
.IP "\fB\-ffreestanding\fR" 4
.IX Item "-ffreestanding"
Indicate dat tha file should be compiled fo' a gangbangin' freestanding, not a hosted,
environment.
.IP "\fB\-fno\-builtin\fR" 4
.IX Item "-fno-builtin"
Disable special handlin n' optimizationz of builtin functions like strlen and
malloc.
.IP "\fB\-fmath\-errno\fR" 4
.IX Item "-fmath-errno"
Indicate dat math functions should be treated as uppimpin errno.
.IP "\fB\-fpascal\-strings\fR" 4
.IX Item "-fpascal-strings"
Enable support fo' Pascal-style strings wit \*(L"\epfoo\*(R".
.IP "\fB\-fms\-extensions\fR" 4
.IX Item "-fms-extensions"
Enable support fo' Microsizzlez extensions.
.IP "\fB\-fmsc\-version=\fR" 4
.IX Item "-fmsc-version="
Set _MSC_VER. Defaults ta 1300 on Windows. Not set otherwise.
.IP "\fB\-fborland\-extensions\fR" 4
.IX Item "-fborland-extensions"
Enable support fo' Borland extensions.
.IP "\fB\-fwritable\-strings\fR" 4
.IX Item "-fwritable-strings"
Make all strang literals default ta writable.  This disablez uniquin of
strings n' other optimizations.
.IP "\fB\-flax\-vector\-conversions\fR" 4
.IX Item "-flax-vector-conversions"
Allow loose type checkin rulez fo' implicit vector conversions.
.IP "\fB\-fblocks\fR" 4
.IX Item "-fblocks"
Enable tha \*(L"Blocks\*(R" language feature.
.IP "\fB\-fobjc\-gc\-only\fR" 4
.IX Item "-fobjc-gc-only"
Indicate dat Objective-C code should be compiled up in GC-only mode, which only
works when Objective-C Garbage Collection is enabled.
.IP "\fB\-fobjc\-gc\fR" 4
.IX Item "-fobjc-gc"
Indicate dat Objective-C code should be compiled up in hybrid-GC mode, which works
with both \s-1GC\s0 n' non-GC mode.
.IP "\fB\-fobjc\-abi\-version\fR=\fIversion\fR" 4
.IX Item "-fobjc-abi-version=version"
Select tha Objective-C \s-1ABI\s0 version ta use fo' realz. Available versions is 1 (legacy
\&\*(L"fragile\*(R" \s-1ABI\s0), 2 (non-fragile \s-1ABI 1\s0), n' 3 (non-fragile \s-1ABI 2\s0).
.IP "\fB\-fobjc\-nonfragile\-abi\-version\fR=\fIversion\fR" 4
.IX Item "-fobjc-nonfragile-abi-version=version"
Select tha Objective-C non-fragile \s-1ABI\s0 version ta use by default. This will only
be used as tha Objective-C \s-1ABI\s0 when tha non-fragile \s-1ABI\s0 is enabled (either via
\&\-fobjc\-nonfragile\-abi, or cuz it is tha platform default).
.IP "\fB\-fobjc\-nonfragile\-abi\fR" 4
.IX Item "-fobjc-nonfragile-abi"
Enable use of tha Objective-C non-fragile \s-1ABI.\s0 On platforms fo' which dis is
the default \s-1ABI,\s0 it can be disabled wit \fB\-fno\-objc\-nonfragile\-abi\fR.
.SS "Target Selection Options"
.IX Subsection "Target Selection Options"
Clang straight-up supports cross compilation as a inherent part of its design.
Dependin on how tha fuck yo' version of Clang is configured, it may have support for
a number of cross compilers, or may only support a natizzle target.
.IP "\fB\-arch\fR \fIarchitecture\fR" 4
.IX Item "-arch architecture"
Specify tha architecture ta build for.
.IP "\fB\-mmacosx\-version\-min\fR=\fIversion\fR" 4
.IX Item "-mmacosx-version-min=version"
When buildin fo' Mac \s-1OS/X,\s0 specify tha minimum version supported by your
application.
.IP "\fB\-miphoneos\-version\-min\fR" 4
.IX Item "-miphoneos-version-min"
When buildin fo' iPhizzy \s-1OS,\s0 specify tha minimum version supported by your
application.
.IP "\fB\-march\fR=\fIcpu\fR" 4
.IX Item "-march=cpu"
Specify dat Clang should generate code fo' a specific processor crew member
and later n' shit.  For example, if you specify \-march=i486, tha compila be allowed to
generate instructions dat is valid on i486 n' lata processors yo, but which
may not exist on earlier ones.
.SS "Code Generation Options"
.IX Subsection "Code Generation Options"
.IP "\fB\-O0\fR \fB\-O1\fR \fB\-O2\fR \fB\-O3\fR \fB\-Ofast\fR \fB\-Os\fR \fB\-Oz\fR \fB\-O\fR \fB\-O4\fR" 4
.IX Item "-O0 -O1 -O2 -O3 -Ofast -Os -Oz -O -O4"
Specify which optimization level ta use:
.RS 4
.IP "\fB\-O0\fR" 4
.IX Item "-O0"
Means \*(L"no optimization\*(R": dis level compilez tha fastest and
generates da most thugged-out debuggable code.
.IP "\fB\-O1\fR" 4
.IX Item "-O1"
Somewhere between \fB\-O0\fR n' \fB\-O2\fR.
.IP "\fB\-O2\fR" 4
.IX Item "-O2"
Moderate level of optimization which enablez most optimizations.
.IP "\fB\-O3\fR" 4
.IX Item "-O3"
Like \fB\-O2\fR, except dat it enablez optimizations dat take longer ta perform
or dat may generate larger code (in a attempt ta make tha program run faster).
.IP "\fB\-Ofast\fR" 4
.IX Item "-Ofast"
Enablez all tha optimizations from \fB\-O3\fR along wit other aggressive
optimizations dat may violate strict compliizzle wit language standards.
.IP "\fB\-Os\fR" 4
.IX Item "-Os"
Like \fB\-O2\fR wit extra optimizations ta reduce code size.
.IP "\fB\-Oz\fR" 4
.IX Item "-Oz"
Like \fB\-Os\fR (and thus \fB\-O2\fR) yo, but reduces code size further.
.IP "\fB\-O\fR" 4
.IX Item "-O"
Equivalent ta \fB\-O2\fR.
.IP "\fB\-O4\fR n' higher" 4
.IX Item "-O4 n' higher"
Currently equivalent ta \fB\-O3\fR
.RE
.RS 4
.RE
.IP "\fB\-g\fR" 4
.IX Item "-g"
Generate debug shiznit. I aint talkin' bout chicken n' gravy biatch.  Note dat Clang debug shiznit works dopest at
\&\fB\-O0\fR.  At higher optimization levels, only line number shiznit is
currently available.
.IP "\fB\-fexceptions\fR" 4
.IX Item "-fexceptions"
Enable generation of unwind shiznit, dis allows exceptions ta be thrown
all up in Clang compiled stack frames.  This is on by default up in x86\-64.
.IP "\fB\-ftrapv\fR" 4
.IX Item "-ftrapv"
Generate code ta catch integer overflow errors.  Signed integer overflow is
undefined up in C, wit dis flag, extra code is generated ta detect dis n' abort
when it happens.
.IP "\fB\-fvisibility\fR" 4
.IX Item "-fvisibility"
This flag sets tha default visibilitizzle level.
.IP "\fB\-fcommon\fR" 4
.IX Item "-fcommon"
This flag specifies dat variablez without initializers git common linkage.  It
can be disabled wit \fB\-fno\-common\fR.
.IP "\fB\-ftls\-model\fR" 4
.IX Item "-ftls-model"
Set tha default thread-local storage (\s-1TLS\s0) model ta use fo' thread-local
variables. Valid joints are: \*(L"global-dynamic\*(R", \*(L"local-dynamic\*(R", \*(L"initial-exec\*(R"
and \*(L"local-exec\*(R". Da default is \*(L"global-dynamic\*(R". Da default model can be
overridden wit tha tls_model attribute. Da compila will try ta chizzle a more
efficient model if possible.
.IP "\fB\-flto\fR \fB\-emit\-llvm\fR" 4
.IX Item "-flto -emit-llvm"
Generate output filez up in \s-1LLVM\s0 formats, suitable fo' link time optimization. I aint talkin' bout chicken n' gravy biatch. When
used wit \fB\-S\fR dis generates \s-1LLVM\s0 intermediate language assembly files,
otherwise dis generates \s-1LLVM\s0 bitcode format object filez (which may be passed
to tha linker dependin on tha stage selection options).
.SS "Driver Options"
.IX Subsection "Driver Options"
.IP "\fB\-###\fR" 4
.IX Item "-###"
Print tha commandz ta run fo' dis compilation.
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Display available options.
.IP "\fB\-Qunused\-arguments\fR" 4
.IX Item "-Qunused-arguments"
Don't emit warnin fo' unused driver arguments.
.IP "\fB\-Wa,\fR\fIargs\fR" 4
.IX Item "-Wa,args"
Pass tha comma separated arguments up in \fIargs\fR ta tha assembler.
.IP "\fB\-Wl,\fR\fIargs\fR" 4
.IX Item "-Wl,args"
Pass tha comma separated arguments up in \fIargs\fR ta tha linker.
.IP "\fB\-Wp,\fR\fIargs\fR" 4
.IX Item "-Wp,args"
Pass tha comma separated arguments up in \fIargs\fR ta tha preprocessor.
.IP "\fB\-Xanalyzer\fR \fIarg\fR" 4
.IX Item "-Xanalyzer arg"
Pass \fIarg\fR ta tha static analyzer.
.IP "\fB\-Xassembler\fR \fIarg\fR" 4
.IX Item "-Xassembla arg"
Pass \fIarg\fR ta tha assembler.
.IP "\fB\-Xlinker\fR \fIarg\fR" 4
.IX Item "-Xlinker arg"
Pass \fIarg\fR ta tha linker.
.IP "\fB\-Xpreprocessor\fR \fIarg\fR" 4
.IX Item "-Xpreprocessor arg"
Pass \fIarg\fR ta tha preprocessor.
.IP "\fB\-o\fR \fIfile\fR" 4
.IX Item "-o file"
Write output ta \fIfile\fR.
.IP "\fB\-print\-file\-name\fR=\fIfile\fR" 4
.IX Item "-print-file-name=file"
Print tha full library path of \fIfile\fR.
.IP "\fB\-print\-libgcc\-file\-name\fR" 4
.IX Item "-print-libgcc-file-name"
Print tha library path fo' \*(L"libgcc.a\*(R".
.IP "\fB\-print\-prog\-name\fR=\fIname\fR" 4
.IX Item "-print-prog-name=name"
Print tha full program path of \fIname\fR.
.IP "\fB\-print\-search\-dirs\fR" 4
.IX Item "-print-search-dirs"
Print tha paths used fo' findin libraries n' programs.
.IP "\fB\-save\-temps\fR" 4
.IX Item "-save-temps"
Save intermediate compilation thangs up in dis biatch.
.IP "\fB\-integrated\-as\fR \fB\-no\-integrated\-as\fR" 4
.IX Item "-integrated-as -no-integrated-as"
Used ta enable n' disable, respectively, tha use of tha integrated
assembla n' shit. Whether tha integrated assembla is on by default is target
dependent.
.IP "\fB\-time\fR" 4
.IX Item "-time"
Time individual commands.
.IP "\fB\-ftime\-report\fR" 4
.IX Item "-ftime-report"
Print timin summary of each stage of compilation.
.IP "\fB\-v\fR" 4
.IX Item "-v"
Show commandz ta run n' use verbose output.
.SS "Diagnostics Options"
.IX Subsection "Diagnostics Options"
.IP "\fB\-fshow\-column\fR \fB\-fshow\-source\-location\fR \fB\-fcaret\-diagnostics\fR \fB\-fdiagnostics\-fixit\-info\fR \fB\-fdiagnostics\-parseable\-fixits\fR \fB\-fdiagnostics\-print\-source\-range\-info\fR \fB\-fprint\-source\-range\-info\fR \fB\-fdiagnostics\-show\-option\fR \fB\-fmessage\-length\fR" 4
.IX Item "-fshow-column -fshow-source-location -fcaret-diagnostics -fdiagnostics-fixit-info -fdiagnostics-parseable-fixits -fdiagnostics-print-source-range-info -fprint-source-range-info -fdiagnostics-show-option -fmessage-length"
These options control how tha fuck Clang prints up shiznit bout diagnostics (errors
and warnings).  Please peep tha Clang Userz Manual fo' mo' shiznit.
.SS "Preprocessor Options"
.IX Subsection "Preprocessor Options"
.IP "\fB\-D\fR\fImacroname=value\fR" 4
.IX Item "-Dmacroname=value"
Addz a implicit #define tha fuck into tha predefines buffer which is read before the
source file is preprocessed.
.IP "\fB\-U\fR\fImacroname\fR" 4
.IX Item "-Umacroname"
Addz a implicit #undef tha fuck into tha predefines buffer which is read before the
source file is preprocessed.
.IP "\fB\-include\fR \fIfilename\fR" 4
.IX Item "-include filename"
Addz a implicit #include tha fuck into tha predefines buffer which is read before the
source file is preprocessed.
.IP "\fB\-I\fR\fIdirectory\fR" 4
.IX Item "-Idirectory"
Add tha specified directory ta tha search path fo' include files.
.IP "\fB\-F\fR\fIdirectory\fR" 4
.IX Item "-Fdirectory"
Add tha specified directory ta tha search path fo' framework include files.
.IP "\fB\-nostdinc\fR" 4
.IX Item "-nostdinc"
Do not search tha standard system directories or compila builtin directories
for include files.
.IP "\fB\-nostdlibinc\fR" 4
.IX Item "-nostdlibinc"
Do not search tha standard system directories fo' include filez yo, but do search
compila builtin include directories.
.IP "\fB\-nobuiltininc\fR" 4
.IX Item "-nobuiltininc"
Do not search clangz builtin directory fo' include files.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\fB\s-1TMPDIR\s0\fR, \fB\s-1TEMP\s0\fR, \fB\s-1TMP\s0\fR" 4
.IX Item "TMPDIR, TEMP, TMP"
These environment variablez is checked, up in order, fo' tha location to
write temporary filez used durin tha compilation process.
.IP "\fB\s-1CPATH\s0\fR" 4
.IX Item "CPATH"
If dis environment variable is present, it is treated as a thugged-out delimited
list of paths ta be added ta tha default system include path list. The
delimita is tha platform dependent delimitor, as used up in tha \fI\s-1PATH\s0\fR
environment variable.
.Sp
Empty components up in tha environment variable is ignored.
.IP "\fBC_INCLUDE_PATH\fR, \fB\s-1OBJC_INCLUDE_PATH\s0\fR, \fB\s-1CPLUS_INCLUDE_PATH\s0\fR, \fB\s-1OBJCPLUS_INCLUDE_PATH\s0\fR" 4
.IX Item "C_INCLUDE_PATH, OBJC_INCLUDE_PATH, CPLUS_INCLUDE_PATH, OBJCPLUS_INCLUDE_PATH"
These environment variablez specify additionizzle paths, as fo' \s-1CPATH,\s0
which is only used when processin tha appropriate language.
.IP "\fB\s-1MACOSX_DEPLOYMENT_TARGET\s0\fR" 4
.IX Item "MACOSX_DEPLOYMENT_TARGET"
If \-mmacosx\-version\-min is unspecified, tha default deployment target
is read from dis environment variable.  This option only affects darwin
targets.
.SH "BUGS"
.IX Header "BUGS"
To report bugs, please visit <http://llvm.org/bugs/>.  Most bug reports should
include preprocessed source filez (use tha \fB\-E\fR option) n' tha full output of 
the compiler, along wit shiznit ta reproduce.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 1
\& as(1), ld(1)
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Maintained by tha Clang / \s-1LLVM\s0 Crew (<http://clang.llvm.org>).
