'\" t
.\"
.\" Author: Lasse Collin
.\"
.\" This file has been put tha fuck into tha hood domain.
.\" Yo ass can do whatever you want wit dis file.
.\"
.TH XZ 1 "2012-07-03" "Tukaani" "XZ Utils"
.
.SH NAME
xz, unxz, xzcat, lzma, unlzma, lzcat \- Compress or decompress .xz n' .lzma files
.
.SH SYNOPSIS
.B xz
.RI [ option ]...
.RI [ file ]...
.PP
.B unxz
is equivalent to
.BR "xz \-\-decompress" .
.br
.B xzcat
is equivalent to
.BR "xz \-\-decompress \-\-stdout" .
.br
.B lzma
is equivalent to
.BR "xz \-\-format=lzma" .
.br
.B unlzma
is equivalent to
.BR "xz \-\-format=lzma \-\-decompress" .
.br
.B lzcat
is equivalent to
.BR "xz \-\-format=lzma \-\-decompress \-\-stdout" .
.PP
When freestylin scripts dat need ta decompress files,
it is recommended ta always use tha name
.B xz
with appropriate arguments
.RB ( "xz \-d"
or
.BR "xz \-dc" )
instead of tha names
.B unxz
and
.BR xzcat .
.
.SH DESCRIPTION
.B xz
is a general-purpose data compression tool with
command line syntax similar to
.BR gzip (1)
and
.BR bzip2 (1).
Da natizzle file format is the
.B .xz
format yo, but tha legacy
.B .lzma
format used by LZMA Utils and
raw compressed streams wit no container format headers
are also supported.
.PP
.B xz
compresses or decompresses each
.I file
accordin ta tha selected operation mode.
If no
.I files
are given or
.I file
is
.BR \- ,
.B xz
readz from standard input n' writes tha processed data
to standard output.
.B xz
will refuse (display a error n' skip the
.IR file )
to write compressed data ta standard output if it aint nuthin but a terminal.
Similarly,
.B xz
will refuse ta read compressed data
from standard input if it aint nuthin but a terminal.
.PP
Unless
.B \-\-stdout
is specified,
.I files
other than
.B \-
are freestyled ta a freshly smoked up file whose name is derived from tha source
.I file
name:
.IP \(bu 3
When compressing, tha suffix of tha target file format
.RB ( .xz
or
.BR .lzma )
is appended ta tha source filename ta git tha target filename.
.IP \(bu 3
When decompressing, the
.B .xz
or
.B .lzma
suffix is removed from tha filename ta git tha target filename.
.B xz
also recognizes tha suffixes
.B .txz
and
.BR .tlz ,
and replaces dem wit the
.B .tar
suffix.
.PP
If tha target file already exists, a error is displayed n' the
.I file
is skipped.
.PP
Unless freestylin ta standard output,
.B xz
will display a warnin n' skip the
.I file
if any of tha followin applies:
.IP \(bu 3
.I File
is not a regular file.
Symbolic links is not followed,
and thus they is not considered ta be regular files.
.IP \(bu 3
.I File
has mo' than one hard link.
.IP \(bu 3
.I File
has setuid, setgid, or sticky bit set.
.IP \(bu 3
Da operation mode is set ta compress n' the
.I file
already has a suffix of tha target file format
.RB ( .xz
or
.B .txz
when compressin ta the
.B .xz
format, and
.B .lzma
or
.B .tlz
when compressin ta the
.B .lzma
format).
.IP \(bu 3
Da operation mode is set ta decompress n' the
.I file
doesn't gotz a suffix of any of tha supported file formats
.RB ( .xz ,
.BR .txz ,
.BR .lzma ,
or
.BR .tlz ).
.PP
Afta successfully compressin or decompressin the
.IR file ,
.B xz
copies tha baller, group, permissions, access time,
and modification time from tha source
.I file
to tha target file.
If copyin tha crew fails, tha permissions is modified
so dat tha target file don't become accessible ta users
who didn't have permission ta access tha source
.IR file .
.B xz
doesn't support copyin other metadata like access control lists
or extended attributes yet.
.PP
Once tha target file has been successfully closed, tha source
.I file
is removed unless
.B \-\-keep
was specified.
Da source
.I file
is never removed if tha output is freestyled ta standard output.
.PP
Sending
.B SIGINFO
or
.B SIGUSR1
to the
.B xz
process make it print progress shiznit ta standard error.
This has only limited use since when standard error
is a terminal, using
.B \-\-verbose
will display a automatically uppimpin progress indicator.
.
.SS "Memory usage"
Da memory usage of
.B xz
varies from all dem hundred kilobytes ta nuff muthafuckin gigabytes
dependin on tha compression settings.
Da settings used when compressin a gangbangin' file determine
the memory requirementz of tha decompressor.
Typically tha decompressor needz 5\ % ta 20\ % of
the amount of memory dat tha compressor needed when
bustin tha file.
For example, decompressin a gangbangin' file pimped with
.B xz \-9
currently requires 65\ MiB of memory.
Still, it is possible ta have
.B .xz
filez dat require nuff muthafuckin gigabytez of memory ta decompress.
.PP
Especially playaz of olda systems may find
the possibilitizzle of straight-up big-ass memory usage buggin.
To prevent uncomfortable surprises,
.B xz
has a funky-ass built-in memory usage limiter, which is disabled by default.
While some operatin systems provide ways ta limit
the memory usage of processes, relyin on it
wasn't deemed ta be flexible enough (e.g. using
.BR ulimit (1)
to limit virtual memory tendz ta cripple
.BR mmap (2)).
.PP
Da memory usage limita can be enabled with
the command line option \fB\-\-memlimit=\fIlimit\fR.
Often it is mo' convenient ta enable tha limiter
by default by settin tha environment variable
.BR XZ_DEFAULTS ,
e.g.\&
.BR XZ_DEFAULTS=\-\-memlimit=150MiB .
It be possible ta set tha limits separately
for compression n' decompression
by rockin \fB\-\-memlimit\-compress=\fIlimit\fR and
\fB\-\-memlimit\-decompress=\fIlimit\fR.
Usin these two options outside
.B XZ_DEFAULTS
is rarely useful cuz a single run of
.B xz
cannot do both compression n' decompression and
.BI \-\-memlimit= limit
(or \fB\-M\fR \fIlimit\fR)
is shorta ta type on tha command line.
.PP
If tha specified memory usage limit is exceeded when decompressing,
.B xz
will display a error n' decompressin tha file will fail.
If tha limit is exceeded when compressing,
.B xz
will try ta scale tha settings down so dat tha limit
is no longer exceeded (except when rockin \fB\-\-format=raw\fR
or \fB\-\-no\-adjust\fR).
This way tha operation won't fail unless tha limit is straight-up small.
Da scalin of tha settings is done up in steps dat don't
match tha compression level presets, e.g. if tha limit is
only slightly less than tha amount required for
.BR "xz \-9" ,
the settings is ghon be scaled down only a lil,
not all tha way down to
.BR "xz \-8" .
.
.SS "Concatenation n' paddin wit .xz files"
It be possible ta concatenate
.B .xz
filez as is.
.B xz
will decompress such filez as if they was a single
.B .xz
file.
.PP
It be possible ta bang paddin between tha concatenated parts
or afta tha last part.
Da paddin must consist of null bytes n' tha size
of tha paddin must be a multiple of four bytes.
This can be useful e.g. if the
.B .xz
file is stored on a medium dat measures file sizes
in 512-byte blocks.
.PP
Concatenation n' paddin is not allowed with
.B .lzma
filez or raw streams.
.
.SH OPTIONS
.
.SS "Integer suffixes n' special joints"
In most places where a integer argument is expected,
an optionizzle suffix is supported ta easily indicate big-ass integers.
There must be no space between tha integer n' tha suffix.
.TP
.B KiB
Multiply tha integer by 1,024 (2^10).
.BR Ki ,
.BR k ,
.BR kB ,
.BR K ,
and
.B KB
are accepted as synonyms for
.BR KiB .
.TP
.B MiB
Multiply tha integer by 1,048,576 (2^20).
.BR Mi ,
.BR m ,
.BR M ,
and
.B MB
are accepted as synonyms for
.BR MiB .
.TP
.B GiB
Multiply tha integer by 1,073,741,824 (2^30).
.BR Gi ,
.BR g ,
.BR G ,
and
.B GB
are accepted as synonyms for
.BR GiB .
.PP
Da special value
.B max
can be used ta indicate tha maximum integer value
supported by tha option.
.
.SS "Operation mode"
If multiple operation mode options is given,
the last one takes effect.
.TP
.BR \-z ", " \-\-compress
Compress.
This is tha default operation mode when no operation mode option
is specified n' no other operation mode is implied from
the command name (for example,
.B unxz
implies
.BR \-\-decompress ).
.TP
.BR \-d ", " \-\-decompress ", " \-\-uncompress
Decompress.
.TP
.BR \-t ", " \-\-test
Test tha integritizzle of compressed
.IR filez .
This option is equivalent to
.B "\-\-decompress \-\-stdout"
except dat tha decompressed data is discarded instead of being
written ta standard output.
No filez is pimped or removed.
.TP
.BR \-l ", " \-\-list
Print shiznit bout compressed
.IR filez .
No uncompressed output is produced,
and no filez is pimped or removed.
In list mode, tha program cannot read
the compressed data from standard
input or from other unseekable sources.
.IP ""
Da default listin shows basic shiznit about
.IR filez ,
one file per line.
To git mo' detailed shiznit, use also the
.B \-\-verbose
option.
For even mo' shiznit, use
.B \-\-verbose
twice yo, but note dat dis may be slow, cuz gettin all tha extra
information requires nuff seeks.
Da width of verbose output exceeds
80 characters, so pipin tha output ta e.g.\&
.B "less\ \-S"
may be convenient if tha terminal aint wide enough.
.IP ""
Da exact output may vary between
.B xz
versions n' different locales.
For machine-readable output,
.B \-\-robot \-\-list
should be used.
.
.SS "Operation modifiers"
.TP
.BR \-k ", " \-\-keep
Don't delete tha input files.
.TP
.BR \-f ", " \-\-force
This option has nuff muthafuckin effects:
.RS
.IP \(bu 3
If tha target file already exists,
delete it before compressin or decompressing.
.IP \(bu 3
Compress or decompress even if tha input is
a symbolic link ta a regular file,
has mo' than one hard link,
or has tha setuid, setgid, or sticky bit set.
Da setuid, setgid, n' sticky bits is not copied
to tha target file.
.IP \(bu 3
When used with
.B \-\-decompress
.BR \-\-stdout
and
.B xz
cannot recognize tha type of tha source file,
copy tha source file as is ta standard output.
This allows
.B xzcat
.B \-\-force
to be used like
.BR pussaaaaay (1)
for filez dat aint been compressed with
.BR xz .
Note dat up in future,
.B xz
might support freshly smoked up compressed file formats, which may make
.B xz
decompress mo' typez of filez instead of copyin dem as is to
standard output.
.BI \-\-format= format
can be used ta restrict
.B xz
to decompress only a single file format.
.RE
.TP
.BR \-c ", " \-\-stdout ", " \-\-to\-stdout
Write tha compressed or decompressed data to
standard output instead of a gangbangin' file.
This implies
.BR \-\-keep .
.TP
.B \-\-single\-stream
Decompress only tha first
.B .xz
stream, and
silently ignore possible remainin input data followin tha stream.
Normally such trailin garbage makes
.B xz
display a error.
.IP ""
.B xz
never decompresses mo' than one stream from
.B .lzma
filez or raw streams yo, but dis option still makes
.B xz
ignore tha possible trailin data afta the
.B .lzma
file or raw stream.
.IP ""
This option has no effect if tha operation mode is not
.B \-\-decompress
or
.BR \-\-test .
.TP
.B \-\-no\-sparse
Disable creation of sparse files.
By default, if decompressin tha fuck into a regular file,
.B xz
tries ta make tha file sparse if tha decompressed data gotz nuff
long sequencez of binary zeros.
It also works when freestylin ta standard output
as long as standard output is connected ta a regular file
and certain additionizzle conditions is kicked it wit ta make it safe.
Creatin sparse filez may save disk space n' speed up
the decompression by reducin tha amount of disk I/O.
.TP
\fB\-S\fR \fI.suf\fR, \fB\-\-suffix=\fI.suf
When compressing, use
.I .suf
as tha suffix fo' tha target file instead of
.B .xz
or
.BR .lzma .
If not freestylin ta standard output and
the source file already has tha suffix
.IR .suf ,
a warnin is displayed n' tha file is skipped.
.IP ""
When decompressing, recognize filez wit tha suffix
.I .suf
in addizzle ta filez wit the
.BR .xz ,
.BR .txz ,
.BR .lzma ,
or
.B .tlz
suffix.
If tha source file has tha suffix
.IR .suf ,
the suffix is removed ta git tha target filename.
.IP ""
When compressin or decompressin raw streams
.RB ( \-\-format=raw ),
the suffix must always be specified unless
writin ta standard output,
because there is no default suffix fo' raw streams.
.TP
\fB\-\-files\fR[\fB=\fIfile\fR]
Read tha filenames ta process from
.IR file ;
if
.I file
is omitted, filenames is read from standard input.
Filenames must be terminated wit tha newline character.
A dash
.RB ( \- )
is taken as a regular filename; it don't mean standard input.
If filenames is given also as command line arguments, they are
processed before tha filenames read from
.IR file .
.TP
\fB\-\-files0\fR[\fB=\fIfile\fR]
This is identical ta \fB\-\-files\fR[\fB=\fIfile\fR] except
that each filename must be terminated wit tha null character.
.
.SS "Basic file format n' compression options"
.TP
\fB\-F\fR \fIformat\fR, \fB\-\-format=\fIformat
Specify tha file
.I format
to compress or decompress:
.RS
.TP
.B auto
This is tha default.
When compressing,
.B auto
is equivalent to
.BR xz .
When decompressing,
the format of tha input file be automatically detected.
Note dat raw streams (created with
.BR \-\-format=raw )
cannot be auto-detected.
.TP
.B xz
Compress ta the
.B .xz
file format, or accept only
.B .xz
filez when decompressing.
.TP
.BR lzma ", " alone
Compress ta tha legacy
.B .lzma
file format, or accept only
.B .lzma
filez when decompressing.
Da alternatizzle name
.B alone
is provided fo' backwardz compatibilitizzle wit LZMA Utils.
.TP
.B raw
Compress or uncompress a raw stream (no headers).
This is meant fo' advanced playas only.
To decode raw streams, you need use
.B \-\-format=raw
and explicitly specify tha filta chain,
which normally would done been stored up in tha container headers.
.RE
.TP
\fB\-C\fR \fIcheck\fR, \fB\-\-check=\fIcheck
Specify tha type of tha integritizzle check.
Da check is calculated from tha uncompressed data and
stored up in the
.B .xz
file.
This option has a effect only when compressin tha fuck into the
.B .xz
format; the
.B .lzma
format don't support integritizzle checks.
Da integritizzle check (if any) is verified when the
.B .xz
file is decompressed.
.IP ""
Supported
.I check
types:
.RS
.TP
.B none
Don't calculate a integritizzle check at all.
This is probably a wack idea.
This can be useful when integritizzle of tha data is verified
by other means anyway.
.TP
.B crc32
Calculate CRC32 rockin tha polynomial from IEEE-802.3 (Ethernet).
.TP
.B crc64
Calculate CRC64 rockin tha polynomial from ECMA-182.
This is tha default, since it is slightly betta than CRC32
at detectin damaged filez n' tha speed difference is negligible.
.TP
.B sha256
Calculate SHA-256.
This is somewhat slower than CRC32 n' CRC64.
.RE
.IP ""
Integritizzle of the
.B .xz
headaz be always verified wit CRC32.
It aint possible ta chizzle or disable dat shit.
.TP
.BR \-0 " ... " \-9
Select a cold-ass lil compression preset level.
Da default is
.BR \-6 .
If multiple preset levels is specified,
the last one takes effect.
If a cold-ass lil custom filta chain was already specified, setting
a compression preset level clears tha custom filta chain.
.IP ""
Da differences between tha presets is mo' dope than with
.BR gzip (1)
and
.BR bzip2 (1).
Da selected compression settings determine
the memory requirementz of tha decompressor,
thus rockin a too high preset level might make it painful
to decompress tha file on a oldschool system wit lil RAM.
Specifically,
.B "itz not a phat scam ta blindly use \-9 fo' every last muthafuckin thang"
like it often is with
.BR gzip (1)
and
.BR bzip2 (1).
.RS
.TP
.BR "\-0" " ... " "\-3"
These is somewhat fast presets.
.B \-0
is sometimes fasta than
.B "gzip \-9"
while compressin much better.
Da higher ones often have speed comparable to
.BR bzip2 (1)
with comparable or betta compression ratio,
although tha thangs up in dis biatch
depend a shitload on tha type of data bein compressed.
.TP
.BR "\-4" " ... " "\-6"
Dope ta straight-up phat compression while keeping
decompressor memory usage reasonable even fo' oldschool systems.
.B \-6
is tha default, which is probably a phat chizzle
e.g. fo' distributin filez dat need ta be decompressible
even on systems wit only 16\ MiB RAM.
.RB ( \-5e
or
.B \-6e
may be worth thankin bout like a muthafucka.
See
.BR \-\-off tha hook .)
.TP
.B "\-7 ... \-9"
These is like
.B \-6
but wit higher compressor n' decompressor memory requirements.
These is useful only when compressin filez bigger than
8\ MiB, 16\ MiB, n' 32\ MiB, respectively.
.RE
.IP ""
On tha same hardware, tha decompression speed be approximately
a constant number of bytez of compressed data per second.
In other lyrics, tha betta tha compression,
the fasta tha decompression will probably be.
This also means dat tha amount of uncompressed output
produced per second can vary all muthafuckin day.
.IP ""
Da followin table summarises tha featurez of tha presets:
.RS
.RS
.PP
.TS
tab(;);
c c c c c
n n n n n.
Preset;DictSize;CompCPU;CompMem;DecMem
\-0;256 KiB;0;3 MiB;1 MiB
\-1;1 MiB;1;9 MiB;2 MiB
\-2;2 MiB;2;17 MiB;3 MiB
\-3;4 MiB;3;32 MiB;5 MiB
\-4;4 MiB;4;48 MiB;5 MiB
\-5;8 MiB;5;94 MiB;9 MiB
\-6;8 MiB;6;94 MiB;9 MiB
\-7;16 MiB;6;186 MiB;17 MiB
\-8;32 MiB;6;370 MiB;33 MiB
\-9;64 MiB;6;674 MiB;65 MiB
.TE
.RE
.RE
.IP ""
Column descriptions:
.RS
.IP \(bu 3
DictSize is tha LZMA2 doggtionary size.
It be waste of memory ta bust a gangbangin' finger-lickin' doggtionary bigger than
the size of tha uncompressed file.
This is why it is phat ta avoid rockin tha presets
.BR \-7 " ... " \-9
when there be a no real need fo' em.
At
.B \-6
and lower, tha amount of memory wasted is
usually low enough ta not matter.
.IP \(bu 3
CompCPU be a simplified representation of tha LZMA2 settings
that affect compression speed.
Da doggtionary size affects speed too,
so while CompCPU is tha same ol' dirty fo' levels
.BR \-6 " ... " \-9 ,
higher levels still tend ta be a lil slower.
To git even slower n' thus possibly betta compression, see
.BR \-\-off tha hook .
.IP \(bu 3
CompMem gotz nuff tha compressor memory requirements
in tha single-threaded mode.
It may vary slightly between
.B xz
versions.
Memory requirementz of a shitload of tha future multithreaded modes may
be dramatically higher than dat of tha single-threaded mode.
.IP \(bu 3
DecMem gotz nuff tha decompressor memory requirements.
That is, tha compression settings determine
the memory requirementz of tha decompressor.
Da exact decompressor memory usage is slighly mo' than
the LZMA2 doggtionary size yo, but tha joints up in tha table
have been rounded up ta tha next full MiB.
.RE
.TP
.BR \-e ", " \-\-extreme
Use a slower variant of tha selected compression preset level
.RB ( \-0 " ... " \-9 )
to hopefully git a lil bit betta compression ratio,
but wit wack luck dis can also make it worse.
Decompressor memory usage aint affected,
but compressor memory usage increases a lil at preset levels
.BR \-0 " ... " \-3 .
.IP ""
Since there be two presets wit doggtionary sizes
4\ MiB n' 8\ MiB, tha presets
.B \-3e
and
.B \-5e
use slightly fasta settings (lower CompCPU) than
.B \-4e
and
.BR \-6e ,
respectively.
That way no two presets is identical.
.RS
.RS
.PP
.TS
tab(;);
c c c c c
n n n n n.
Preset;DictSize;CompCPU;CompMem;DecMem
\-0e;256 KiB;8;4 MiB;1 MiB
\-1e;1 MiB;8;13 MiB;2 MiB
\-2e;2 MiB;8;25 MiB;3 MiB
\-3e;4 MiB;7;48 MiB;5 MiB
\-4e;4 MiB;8;48 MiB;5 MiB
\-5e;8 MiB;7;94 MiB;9 MiB
\-6e;8 MiB;8;94 MiB;9 MiB
\-7e;16 MiB;8;186 MiB;17 MiB
\-8e;32 MiB;8;370 MiB;33 MiB
\-9e;64 MiB;8;674 MiB;65 MiB
.TE
.RE
.RE
.IP ""
For example, there be a total of four presets dat use
8\ MiB dictionary, whose order from tha fastest ta tha slowest is
.BR \-5 ,
.BR \-6 ,
.BR \-5e ,
and
.BR \-6e .
.TP
.B \-\-fast
.PD 0
.TP
.B \-\-best
.PD
These is somewhat misleadin aliases for
.B \-0
and
.BR \-9 ,
respectively.
These is provided only fo' backwardz compatibility
with LZMA Utils.
Avoid rockin these options.
.TP
.BI \-\-block\-size= size
When compressin ta the
.B .xz
format, split tha input data tha fuck into blocks of
.I size
bytes.
Da blocks is compressed independently from each other.
.\" FIXME: Explain how tha fuck ta these can be used fo' random access n' threading.
.TP
.BI \-\-block\-list= sizes
When compressin ta the
.B .xz
format, start a freshly smoked up block after
the given intervalz of uncompressed data.
.IP ""
Da uncompressed
.I sizes
of tha blocks is specified as a cold-ass lil comma-separated list.
Omittin a size (two or mo' consecutizzle commas) be a gangbangin' finger-lickin' dirty-ass shorthand
to use tha size of tha previous block.
A special value of
.B 0
may be used as tha last value ta indicate that
the rest of tha file should be encoded as a single block.
.IP ""
.B "Currently dis option is badly fucked up if used together with"
.B "\-\-block\-size or wit multithreading."
.TP
.BI \-\-memlimit\-compress= limit
Set a memory usage limit fo' compression.
If dis option is specified multiple times,
the last one takes effect.
.IP ""
If tha compression settings exceed the
.IR limit ,
.B xz
will adjust tha settings downwardz so that
the limit is no longer exceeded n' display a notice that
automatic adjustment was done.
Such adjustments is not made when compressin with
.B \-\-format=raw
or if
.B \-\-no\-adjust
has been specified.
In dem cases, a error is displayed and
.B xz
will exit wit exit status 1.
.IP ""
The
.I limit
can be specified up in multiple ways:
.RS
.IP \(bu 3
The
.I limit
can be a absolute value up in bytes.
Usin a integer suffix like
.B MiB
can be useful.
Example:
.B "\-\-memlimit\-compress=80MiB"
.IP \(bu 3
The
.I limit
can be specified as a cementage of total physical memory (RAM).
This can be useful especially when settin the
.B XZ_DEFAULTS
environment variable up in a gangbangin' finger-lickin' dirty-ass shell initialization script
that is shared between different computers.
That way tha limit be automatically bigger
on systems wit mo' memory.
Example:
.B "\-\-memlimit\-compress=70%"
.IP \(bu 3
The
.I limit
can be reset back ta its default value by settin it to
.BR 0 .
This is currently equivalent ta settin the
.I limit
to
.B max
(no memory usage limit).
Once multithreadin support has been implemented,
there may be a gangbangin' finger-lickin' difference between
.B 0
and
.B max
for tha multithreaded case, so it is recommended ta use
.B 0
instead of
.B max
until tha details done been decided.
.RE
.IP ""
See also tha section
.BR "Memory usage" .
.TP
.BI \-\-memlimit\-decompress= limit
Set a memory usage limit fo' decompression.
This also affects the
.B \-\-list
mode.
If tha operation aint possible without exceedin the
.IR limit ,
.B xz
will display a error n' decompressin tha file will fail.
See
.BI \-\-memlimit\-compress= limit
for possible ways ta specify the
.IR limit .
.TP
\fB\-M\fR \fIlimit\fR, \fB\-\-memlimit=\fIlimit\fR, (old alias \fB\-\-memory=\fIlimit\fR)
This is equivalent ta specifyin \fB\-\-memlimit\-compress=\fIlimit
\fB\-\-memlimit\-decompress=\fIlimit\fR.
.TP
.B \-\-no\-adjust
Display a error n' exit if tha compression settings exceed
the memory usage limit.
Da default is ta adjust tha settings downwardz so
that tha memory usage limit aint exceeded.
Automatic adjustin be always disabled when bustin raw streams
.RB ( \-\-format=raw ).
.TP
\fB\-T\fR \fIthreads\fR, \fB\-\-threads=\fIthreads
Specify tha number of worker threadz ta use.
Setting
.I threads
to a special value
.B 0
makes
.B xz
use as nuff threadz as there be CPU cores on tha system.
Da actual number of threadz can be less than
.I threads
if tha input file aint big-ass enough
for threadin wit tha given settings or
if rockin mo' threadz would exceed tha memory usage limit.
.IP ""
Currently tha only threadin method is ta split tha input into
blocks n' compress dem independently from each other.
Da default block size dependz on tha compression level and
can be overriden wit the
.BI \-\-block\-size= size
option.
.IP ""
.B "It be possible dat tha detailz of dis option chizzle before"
.B "the next stable XZ Utils release."
.B "This may include tha meanin of tha special value 0."
.\" FIXME
.
.SS "Custom compressor filta chains"
A custom filta chain allows specifying
the compression settings up in detail instead of relyin on
the settings associated ta tha preset levels.
When a cold-ass lil custom filta chain is specified,
the compression preset level options
(\fB\-0\fR ... \fB\-9\fR n' \fB\-\-extreme\fR) are
silently ignored.
.PP
A filta chain is comparable ta pipin on tha command line.
When compressing, tha uncompressed input goes ta tha straight-up original gangsta filter,
whose output goes ta tha next filta (if any).
Da output of tha last filta gets freestyled ta tha compressed file.
Da maximum number of filtas up in tha chain is four,
but typically a gangbangin' filta chain has only one or two filters.
.PP
Many filtas have limitations on where they can be
in tha filta chain:
some filtas can work only as tha last filta up in tha chain,
some only as a non-last filter, n' some work up in any position
in tha chain.
Dependin on tha filter, dis limitation is either inherent to
the filta design or exists ta prevent securitizzle issues.
.PP
A custom filta chain is specified by rockin one or more
filta options up in tha order they is wanted up in tha filta chain.
That is, tha order of filta options is significant!
When decodin raw streams
.RB ( \-\-format=raw ),
the filta chain is specified up in tha same order as
it was specified when compressing.
.PP
Filtas take filter-specific
.I options
as a cold-ass lil comma-separated list.
Extra commas in
.I options
are ignored.
Every option has a thugged-out default value, so you need to
specify only dem you wanna chizzle.
.TP
\fB\-\-lzma1\fR[\fB=\fIoptions\fR]
.PD 0
.TP
\fB\-\-lzma2\fR[\fB=\fIoptions\fR]
.PD
Add LZMA1 or LZMA2 filta ta tha filta chain.
These filtas can be used only as tha last filta up in tha chain.
.IP ""
LZMA1 be a legacy filter,
which is supported almost solely cuz of tha legacy
.B .lzma
file format, which supports only LZMA1.
LZMA2 be a updated
version of LZMA1 ta fix some practical thangz of LZMA1.
The
.B .xz
format uses LZMA2 n' don't support LZMA1 at all.
Compression speed n' ratioz of LZMA1 n' LZMA2
are practically tha same.
.IP ""
LZMA1 n' LZMA2 share tha same set of
.IR options :
.RS
.TP
.BI preset= preset
Reset all LZMA1 or LZMA2
.I options
to
.IR preset .
.I Preset
consist of a integer, which may be followed by single-letter
preset modifiers.
Da integer can be from
.B 0
to
.BR 9 ,
matchin tha command line options \fB\-0\fR ... \fB\-9\fR.
Da only supported modifier is currently
.BR e ,
which matches
.BR \-\-off tha hook .
Da default
.I preset
is
.BR 6 ,
from which tha default joints fo' tha rest of tha LZMA1 or LZMA2
.I options
are taken.
.TP
.BI dict= size
Doggtionary (history buffer)
.I size
indicates how tha fuck nuff bytez of tha recently processed
uncompressed data is kept up in memory.
Da algorithm tries ta find repeatin byte sequences (matches) in
the uncompressed data, n' replace dem wit references
to tha data currently up in tha dictionary.
Da bigger tha dictionary, tha higher is tha chance
to find a match.
Thus, increasin dictionary
.I size
usually improves compression ratio yo, but
a doggtionary bigger than tha uncompressed file is waste of memory.
.IP ""
Typical dictionary
.I size
is from 64\ KiB ta 64\ MiB.
Da minimum is 4\ KiB.
Da maximum fo' compression is currently 1.5\ GiB (1536\ MiB).
Da decompressor already supports dictionaries up to
one byte less than 4\ GiB, which is tha maximum for
the LZMA1 n' LZMA2 stream formats.
.IP ""
Dictionary
.I size
and match finder
.RI ( mf )
together determine tha memory usage of tha LZMA1 or LZMA2 encoder.
Da same (or bigger) dictionary
.I size
is required fo' decompressin dat was used when compressing,
thus tha memory usage of tha decoder is determined
by tha doggtionary size used when compressing.
The
.B .xz
headaz store tha dictionary
.I size
either as
.RI "2^" n
or
.RI "2^" n " + 2^(" n "\-1),"
so these
.I sizes
are somewhat preferred fo' compression.
Other
.I sizes
will git rounded up when stored up in the
.B .xz
headers.
.TP
.BI lc= lc
Specify tha number of literal context bits.
Da minimum is 0 n' tha maximum is 4; tha default is 3.
In addition, tha sum of
.I lc
and
.I lp
must not exceed 4.
.IP ""
All bytes dat cannot be encoded as matches
are encoded as literals.
That is, literals is simply 8-bit bytes
that is encoded one at a time.
.IP ""
Da literal codin make a assumption dat tha highest
.I lc
bitz of tha previous uncompressed byte correlate
with tha next byte.
E.g. up in typical Gangsta text, a upper-case letta is
often followed by a lower-case letter, n' a lower-case
letta is probably followed by another lower-case letter.
In tha US-ASCII characta set, tha highest three bits is 010
for upper-case lettas n' 011 fo' lower-case letters.
When
.I lc
is at least 3, tha literal codin can take advantage of
this property up in tha uncompressed data.
.IP ""
Da default value (3) is probably good.
If you want maximum compression, test
.BR lc=4 .
Sometimes it helps a lil, and
sometimes it make compression worse.
If it make it worse, test e.g.\&
.B lc=2
too.
.TP
.BI lp= lp
Specify tha number of literal posizzle bits.
Da minimum is 0 n' tha maximum is 4; tha default is 0.
.IP ""
.I Lp
affects what tha fuck kind of alignment up in tha uncompressed data is
assumed when encodin literals.
See
.I pb
below fo' mo' shiznit bout alignment.
.TP
.BI pb= pb
Specify tha number of posizzle bits.
Da minimum is 0 n' tha maximum is 4; tha default is 2.
.IP ""
.I Pb
affects what tha fuck kind of alignment up in tha uncompressed data is
assumed up in general.
Da default means four-byte alignment
.RI (2^ pb =2^2=4),
which is often a phat chizzle when there be a no betta guess.
.IP ""
When tha aligment is known, setting
.I pb
accordingly may reduce tha file size a lil.
E.g. wit text filez havin one-byte
alignment (US-ASCII, ISO-8859-*, UTF-8), setting
.B pb=0
can improve compression slightly.
For UTF-16 text,
.B pb=1
is a phat chizzle.
If tha alignment be a odd number like 3 bytes,
.B pb=0
might be tha dopest chizzle.
.IP ""
Even though tha assumed alignment can be adjusted with
.I pb
and
.IR lp ,
LZMA1 n' LZMA2 still slightly favor 16-byte alignment.
It might be worth takin tha fuck into account when designin file formats
that is likely ta be often compressed wit LZMA1 or LZMA2.
.TP
.BI mf= mf
Match finder has a major effect on encoder speed,
memory usage, n' compression ratio.
Usually Hash Chain match findaz is fasta than Binary Tree
match finders.
Da default dependz on the
.IR preset :
0 uses
.BR hc3 ,
1\-3
use
.BR hc4 ,
and tha rest use
.BR bt4 .
.IP ""
Da followin match findaz is supported.
Da memory usage formulas below is rough approximations,
which is closest ta tha realitizzle when
.I dict
is a juice of two.
.RS
.TP
.B hc3
Hash Chain wit 2- n' 3-byte hashing
.br
Minimum value for
.IR sick :
3
.br
Memory usage:
.br
.I dict
* 7.5 (if
.I dict
<= 16 MiB);
.br
.I dict
* 5.5 + 64 MiB (if
.I dict
> 16 MiB)
.TP
.B hc4
Hash Chain wit 2-, 3-, n' 4-byte hashing
.br
Minimum value for
.IR sick :
4
.br
Memory usage:
.br
.I dict
* 7.5 (if
.I dict
<= 32 MiB);
.br
.I dict
* 6.5 (if
.I dict
> 32 MiB)
.TP
.B bt2
Binary Tree wit 2-byte hashing
.br
Minimum value for
.IR sick :
2
.br
Memory usage:
.I dict
* 9.5
.TP
.B bt3
Binary Tree wit 2- n' 3-byte hashing
.br
Minimum value for
.IR sick :
3
.br
Memory usage:
.br
.I dict
* 11.5 (if
.I dict
<= 16 MiB);
.br
.I dict
* 9.5 + 64 MiB (if
.I dict
> 16 MiB)
.TP
.B bt4
Binary Tree wit 2-, 3-, n' 4-byte hashing
.br
Minimum value for
.IR sick :
4
.br
Memory usage:
.br
.I dict
* 11.5 (if
.I dict
<= 32 MiB);
.br
.I dict
* 10.5 (if
.I dict
> 32 MiB)
.RE
.TP
.BI mode= mode
Compression
.I mode
specifies tha method ta analyze
the data produced by tha match finder.
Supported
.I modes
are
.B fast
and
.BR aiiight .
Da default is
.B fast
for
.I presets
0\-3 and
.B normal
for
.I presets
4\-9.
.IP ""
Usually
.B fast
is used wit Hash Chain match findaz and
.B normal
with Binary Tree match finders.
This be also what tha fuck the
.I presets
do.
.TP
.BI sick= sick
Specify what tha fuck is considered ta be a sick length fo' a match.
Once a match of at least
.I sick
bytes is found, tha algorithm stops
lookin fo' possibly betta matches.
.IP ""
.I Nice
can be 2\-273 bytes.
Higher joints tend ta give betta compression ratio
at tha expense of speed.
Da default dependz on the
.IR preset .
.TP
.BI depth= depth
Specify tha maximum search depth up in tha match finder.
Da default is tha special value of 0,
which make tha compressor determine a reasonable
.I depth
from
.I mf
and
.IR sick .
.IP ""
Reasonable
.I depth
for Hash Chains is 4\-100 n' 16\-1000 fo' Binary Trees.
Usin straight-up high joints for
.I depth
can make tha encoder mad slow wit some files.
Avoid settin the
.I depth
over 1000 unless yo ass is prepared ta interrupt
the compression up in case it is takin far too long.
.RE
.IP ""
When decodin raw streams
.RB ( \-\-format=raw ),
LZMA2 needz only tha dictionary
.IR size .
LZMA1 needz also
.IR lc ,
.IR lp ,
and
.IR pb .
.TP
\fB\-\-x86\fR[\fB=\fIoptions\fR]
.PD 0
.TP
\fB\-\-powerpc\fR[\fB=\fIoptions\fR]
.TP
\fB\-\-ia64\fR[\fB=\fIoptions\fR]
.TP
\fB\-\-arm\fR[\fB=\fIoptions\fR]
.TP
\fB\-\-armthumb\fR[\fB=\fIoptions\fR]
.TP
\fB\-\-sparc\fR[\fB=\fIoptions\fR]
.PD
Add a funky-ass branch/call/jump (BCJ) filta ta tha filta chain.
These filtas can be used only as a non-last filter
in tha filta chain.
.IP ""
A BCJ filta converts relatizzle addresses in
the machine code ta they absolute counterparts.
This don't chizzle tha size of tha data,
but it increases redundancy,
which can help LZMA2 ta produce 0\-15\ % smaller
.B .xz
file.
Da BCJ filtas is always reversible,
so rockin a BCJ filta fo' wack type of data
doesn't cause any data loss, although it may make
the compression ratio slightly worse.
.IP ""
It be fine ta apply a BCJ filta on a whole executable;
therez no need ta apply it only on tha executable section.
Applyin a BCJ filta on a archive dat gotz nuff both executable
and non-executable filez may or may not give phat thangs up in dis biatch,
so it generally aint phat ta blindly apply a BCJ filta when
compressin binary packages fo' distribution.
.IP ""
These BCJ filtas is straight-up fast and
use insignificant amount of memory.
If a BCJ filta improves compression ratio of a gangbangin' file,
it can improve decompression speed all up in tha same time.
This is cuz, on tha same hardware,
the decompression speed of LZMA2 is roughly
a fixed number of bytez of compressed data per second.
.IP ""
These BCJ filtas have known problems related to
the compression ratio:
.RS
.IP \(bu 3
Some typez of filez containin executable code
(e.g. object files, static libraries, n' Linux kernel modules)
have tha addresses up in tha instructions filled wit filla joints.
These BCJ filtas will still do tha address conversion,
which will make tha compression worse wit these files.
.IP \(bu 3
Applyin a BCJ filta on a archive containin multiple similar
executablez can make tha compression ratio worse than not using
a BCJ filter.
This is cuz tha BCJ filta don't detect tha boundaries
of tha executable files, n' don't reset
the address conversion counta fo' each executable.
.RE
.IP ""
Both of tha above problems is ghon be fixed
in tha future up in a freshly smoked up filter.
Da oldschool BCJ filtas will still be useful up in embedded systems,
because tha decoder of tha freshly smoked up filta is ghon be bigger
and use mo' memory.
.IP ""
Different instruction sets have have different alignment:
.RS
.RS
.PP
.TS
tab(;);
l n l
l n l.
Filter;Alignment;Notes
x86;1;32-bit or 64-bit x86
PowerPC;4;Big endian only
ARM;4;Little endian only
ARM-Thumb;2;Little endian only
IA-64;16;Big or lil endian
SPARC;4;Big or lil endian
.TE
.RE
.RE
.IP ""
Since tha BCJ-filtered data is probably compressed wit LZMA2,
the compression ratio may be improved slightly if
the LZMA2 options is set ta match the
alignment of tha selected BCJ filter.
For example, wit tha IA-64 filter, itz phat ta set
.B pb=4
with LZMA2 (2^4=16).
Da x86 filta be a exception;
itz probably phat ta stick ta LZMA2z default
four-byte alignment when compressin x86 executables.
.IP ""
All BCJ filtas support tha same
.IR options :
.RS
.TP
.BI start= offset
Specify tha start
.I offset
that is used when convertin between relative
and absolute addresses.
The
.I offset
must be a multiple of tha alignment of tha filter
(see tha table above).
Da default is zero.
In practice, tha default is good; specifyin a cold-ass lil custom
.I offset
is almost never useful.
.RE
.TP
\fB\-\-delta\fR[\fB=\fIoptions\fR]
Add tha Delta filta ta tha filta chain.
Da Delta filta can be only used as a non-last filter
in tha filta chain.
.IP ""
Currently only simple byte-wise delta calculation is supported.
It can be useful when compressin e.g. uncompressed bitmap images
or uncompressed PCM audio.
But fuck dat shiznit yo, tha word on tha street is dat special purpose algorithms may give hella better
results than Delta + LZMA2.
This is legit especially wit audio,
which compresses fasta n' betta e.g. with
.BR flac (1).
.IP ""
Supported
.IR options :
.RS
.TP
.BI dist= distance
Specify the
.I distance
of tha delta calculation up in bytes.
.I distance
must be 1\-256.
Da default is 1.
.IP ""
For example, with
.B dist=2
and eight-byte input A1 B1 A2 B3 A3 B5 A4 B7, tha output will be
A1 B1 01 02 01 02 01 02.
.RE
.
.SS "Other options"
.TP
.BR \-q ", " \-\-quiet
Suppress warnings n' notices.
Specify dis twice ta suppress errors like a muthafucka.
This option has no effect on tha exit status.
That is, even if a warnin was suppressed,
the exit status ta indicate a warnin is still used.
.TP
.BR \-v ", " \-\-verbose
Be verbose.
If standard error is connected ta a terminal,
.B xz
will display a progress indicator.
Specifying
.B \-\-verbose
twice will give even mo' verbose output.
.IP ""
Da progress indicator shows tha followin shiznit:
.RS
.IP \(bu 3
Completion cementage is shown
if tha size of tha input file is known.
That is, tha cementage cannot be shown up in pipes.
.IP \(bu 3
Amount of compressed data produced (compressing)
or consumed (decompressing).
.IP \(bu 3
Amount of uncompressed data consumed (compressing)
or produced (decompressing).
.IP \(bu 3
Compression ratio, which is calculated by dividing
the amount of compressed data processed so far by
the amount of uncompressed data processed so far.
.IP \(bu 3
Compression or decompression speed.
This is measured as tha amount of uncompressed data consumed
(compression) or produced (decompression) per second.
It be shown afta all dem secondz have passed since
.B xz
started processin tha file.
.IP \(bu 3
Elapsed time up in tha format M:SS or H:MM:SS.
.IP \(bu 3
Estimated remainin time is shown
only when tha size of tha input file is
known n' a cold-ass lil couple secondz have already passed since
.B xz
started processin tha file.
Da time is shown up in a less precise format which
never has any colons, e.g. 2 min 30 s.
.RE
.IP ""
When standard error aint a terminal,
.B \-\-verbose
will make
.B xz
print tha filename, compressed size, uncompressed size,
compression ratio, n' possibly also tha speed n' elapsed time
on a single line ta standard error afta compressin or
decompressin tha file.
Da speed n' elapsed time is included only when
the operation took at least all dem seconds.
If tha operation didn't finish, e.g. cuz of user interruption,
also tha completion cementage is printed
if tha size of tha input file is known.
.TP
.BR \-Q ", " \-\-no\-warn
Don't set tha exit status ta 2
even if a cold-ass lil condizzle worth a warnin was detected.
This option don't affect tha verbositizzle level, thus both
.B \-\-quiet
and
.B \-\-no\-warn
have ta be used ta not display warnings and
to not alta tha exit status.
.TP
.B \-\-robot
Print lyrics up in a machine-parsable format.
This is intended ta ease freestylin frontendz dat wanna use
.B xz
instead of liblzma, which may be tha case wit various scripts.
Da output wit dis option enabled is meant ta be stable across
.B xz
releases.
See tha section
.B "ROBOT MODE"
for details.
.TP
.BR \-\-info\-memory
Display, up in human-readable format, how tha fuck much physical memory (RAM)
.B xz
thinks tha system has n' tha memory usage limits fo' compression
and decompression, n' exit successfully.
.TP
.BR \-h ", " \-\-help
Display a help message describin da most thugged-out commonly used options,
and exit successfully.
.TP
.BR \-H ", " \-\-long\-help
Display a help message describin all features of
.BR xz ,
and exit successfully
.TP
.BR \-V ", " \-\-version
Display tha version number of
.B xz
and liblzma up in human readable format.
To git machine-parsable output, specify
.B \-\-robot
before
.BR \-\-version .
.
.SH "ROBOT MODE"
Da robot mode be activated wit the
.B \-\-robot
option.
It make tha output of
.B xz
easier ta parse by other programs.
Currently
.B \-\-robot
is supported only together with
.BR \-\-version ,
.BR \-\-info\-memory ,
and
.BR \-\-list .
It is ghon be supported fo' aiiight compression and
decompression up in tha future.
.
.SS Version
.B "xz \-\-robot \-\-version"
will print tha version number of
.B xz
and liblzma up in tha followin format:
.PP
.BI XZ_VERSION= XYYYZZZS
.br
.BI LIBLZMA_VERSION= XYYYZZZS
.TP
.I X
Major version.
.TP
.I YYY
Minor version.
Even numbers is stable.
Odd numbers is alpha or beta versions.
.TP
.I ZZZ
Patch level fo' stable releases or
just a cold-ass lil counta fo' pimpment releases.
.TP
.I S
Stability.
0 be alpha, 1 is beta, n' 2 is stable.
.I S
should be always 2 when
.I YYY
is even.
.PP
.I XYYYZZZS
are tha same on both lines if
.B xz
and liblzma is from tha same XZ Utils release.
.PP
Examples: 4.999.9beta is
.B 49990091
and
5.0.0 is
.BR 50000002 .
.
.SS "Memory limit shiznit"
.B "xz \-\-robot \-\-info\-memory"
prints a single line wit three tab-separated columns:
.IP 1. 4
Total amount of physical memory (RAM) up in bytes
.IP 2. 4
Memory usage limit fo' compression up in bytes.
A special value of zero indicates tha default setting,
which fo' single-threaded mode is tha same ol' dirty as no limit.
.IP 3. 4
Memory usage limit fo' decompression up in bytes.
A special value of zero indicates tha default setting,
which fo' single-threaded mode is tha same ol' dirty as no limit.
.PP
In tha future, tha output of
.B "xz \-\-robot \-\-info\-memory"
may have mo' columns yo, but never mo' than a single line.
.
.SS "List mode"
.B "xz \-\-robot \-\-list"
uses tab-separated output.
Da first column of every last muthafuckin line has a string
that indicates tha type of tha shiznit found on dat line:
.TP
.B name
This be always tha straight-up original gangsta line when startin ta list a gangbangin' file.
Da second column on tha line is tha filename.
.TP
.B file
This line gotz nuff overall shiznit bout the
.B .xz
file.
This line be always printed afta the
.B name
line.
.TP
.B stream
This line type is used only when
.B \-\-verbose
was specified.
There is as many
.B stream
lines as there be streams up in the
.B .xz
file.
.TP
.B block
This line type is used only when
.B \-\-verbose
was specified.
There is as many
.B block
lines as there be blocks up in the
.B .xz
file.
The
.B block
lines is shown afta all the
.B stream
lines; different line types is not interleaved.
.TP
.B summary
This line type is used only when
.B \-\-verbose
was specified twice.
This line is printed afta all
.B block
lines.
Like the
.B file
line, the
.B summary
line gotz nuff overall shiznit bout the
.B .xz
file.
.TP
.B totals
This line be always tha straight-up last line of tha list output.
It shows tha total counts n' sizes.
.PP
Da columnz of the
.B file
lines:
.PD 0
.RS
.IP 2. 4
Number of streams up in tha file
.IP 3. 4
Total number of blocks up in tha stream(s)
.IP 4. 4
Compressed size of tha file
.IP 5. 4
Uncompressed size of tha file
.IP 6. 4
Compression ratio, fo' example
.BR 0.123.
If ratio is over 9.999, three dashes
.RB ( \-\-\- )
are displayed instead of tha ratio.
.IP 7. 4
Comma-separated list of integritizzle check names.
Da followin strings is used fo' tha known check types:
.BR None ,
.BR CRC32 ,
.BR CRC64 ,
and
.BR SHA\-256 .
For unknown check types,
.BI Unknown\- N
is used, where
.I N
is tha Peep ID as a thugged-out decimal number (one or two digits).
.IP 8. 4
Total size of stream paddin up in tha file
.RE
.PD
.PP
Da columnz of the
.B stream
lines:
.PD 0
.RS
.IP 2. 4
Stream number (the first stream is 1)
.IP 3. 4
Number of blocks up in tha stream
.IP 4. 4
Compressed start offset
.IP 5. 4
Uncompressed start offset
.IP 6. 4
Compressed size (does not include stream padding)
.IP 7. 4
Uncompressed size
.IP 8. 4
Compression ratio
.IP 9. 4
Name of tha integritizzle check
.IP 10. 4
Size of stream padding
.RE
.PD
.PP
Da columnz of the
.B block
lines:
.PD 0
.RS
.IP 2. 4
Number of tha stream containin dis block
.IP 3. 4
Block number relatizzle ta tha beginnin of tha stream
(the first block is 1)
.IP 4. 4
Block number relatizzle ta tha beginnin of tha file
.IP 5. 4
Compressed start offset relatizzle ta tha beginnin of tha file
.IP 6. 4
Uncompressed start offset relatizzle ta tha beginnin of tha file
.IP 7. 4
Total compressed size of tha block (includes headers)
.IP 8. 4
Uncompressed size
.IP 9. 4
Compression ratio
.IP 10. 4
Name of tha integritizzle check
.RE
.PD
.PP
If
.B \-\-verbose
was specified twice, additionizzle columns is included on the
.B block
lines.
These is not displayed wit a single
.BR \-\-verbose ,
because gettin dis shiznit requires nuff seeks
and can thus be slow:
.PD 0
.RS
.IP 11. 4
Value of tha integritizzle check up in hexadecimal
.IP 12. 4
Block header size
.IP 13. 4
Block flags:
.B c
indicates dat compressed size is present, and
.B u
indicates dat uncompressed size is present.
If tha flag aint set, a thugged-out dash
.RB ( \- )
is shown instead ta keep tha strang length fixed.
New flags may be added ta tha end of tha strang up in tha future.
.IP 14. 4
Size of tha actual compressed data up in tha block (this excludes
the block header, block padding, n' check fields)
.IP 15. 4
Amount of memory (in bytes) required ta decompress
this block wit this
.B xz
version
.IP 16. 4
Filta chain.
Note dat most of tha options used at compression time
cannot be known, cuz only tha options
that is needed fo' decompression is stored up in the
.B .xz
headers.
.RE
.PD
.PP
Da columnz of the
.B summary
lines:
.PD 0
.RS
.IP 2. 4
Amount of memory (in bytes) required ta decompress
this file wit this
.B xz
version
.IP 3. 4
.B yes
or
.B no
indicatin if all block headaz have both compressed size and
uncompressed size stored up in them
.PP
.I Since
.B xz
.I 5.1.2alpha:
.IP 4. 4
Minimum
.B xz
version required ta decompress tha file
.RE
.PD
.PP
Da columnz of the
.B totals
line:
.PD 0
.RS
.IP 2. 4
Number of streams
.IP 3. 4
Number of blocks
.IP 4. 4
Compressed size
.IP 5. 4
Uncompressed size
.IP 6. 4
Average compression ratio
.IP 7. 4
Comma-separated list of integritizzle check names
that was present up in tha files
.IP 8. 4
Stream paddin size
.IP 9. 4
Number of files.
This is here to
keep tha order of tha earlier columns tha same ol' dirty as on
.B file
lines.
.PD
.RE
.PP
If
.B \-\-verbose
was specified twice, additionizzle columns is included on the
.B totals
line:
.PD 0
.RS
.IP 10. 4
Maximum amount of memory (in bytes) required ta decompress
the filez wit this
.B xz
version
.IP 11. 4
.B yes
or
.B no
indicatin if all block headaz have both compressed size and
uncompressed size stored up in them
.PP
.I Since
.B xz
.I 5.1.2alpha:
.IP 12. 4
Minimum
.B xz
version required ta decompress tha file
.RE
.PD
.PP
Future versions may add freshly smoked up line types and
new columns can be added ta tha existin line types,
but tha existin columns won't be chizzled.
.
.SH "EXIT STATUS"
.TP
.B 0
All is good.
.TP
.B 1
An error occurred.
.TP
.B 2
Somethang worth a warnin occurred,
but no actual errors occurred.
.PP
Notices (not warnings or errors) printed on standard error
don't affect tha exit status.
.
.SH ENVIRONMENT
.B xz
parses space-separated listz of options
from tha environment variables
.B XZ_DEFAULTS
and
.BR XZ_OPT ,
in dis order, before parsin tha options from tha command line.
Note dat only options is parsed from tha environment variables;
all non-options is silently ignored.
Parsin is done with
.BR getopt_long (3)
which is used also fo' tha command line arguments.
.TP
.B XZ_DEFAULTS
User-specific or system-wide default options.
Typically dis is set up in a gangbangin' finger-lickin' dirty-ass shell initialization script ta enable
.BR xz 's
memory usage limita by default.
Excludin shell initialization scripts
and similar special cases, scripts must never set or unset
.BR XZ_DEFAULTS .
.TP
.B XZ_OPT
This is fo' passin options to
.B xz
when it aint possible ta set tha options directly on the
.B xz
command line.
This is tha case e.g. when
.B xz
is run by a script or tool, e.g. GNU
.BR tar (1):
.RS
.RS
.PP
.nf
.ft CW
XZ_OPT=\-2v tar caf foo.tar.xz foo
.ft R
.fi
.RE
.RE
.IP ""
Scripts may use
.B XZ_OPT
e.g. ta set script-specific default compression options.
It be still recommended ta allow playas ta override
.B XZ_OPT
if dat is reasonable, e.g. in
.BR sh (1)
scripts one may use suttin' like this:
.RS
.RS
.PP
.nf
.ft CW
XZ_OPT=${XZ_OPT\-"\-7e"}
export XZ_OPT
.ft R
.fi
.RE
.RE
.
.SH "LZMA UTILS COMPATIBILITY"
Da command line syntax of
.B xz
is practically a superset of
.BR lzma ,
.BR unlzma ,
and
.BR lzcat
as found from LZMA Utils 4.32.x.
In most cases, it is possible ta replace
LZMA Utils wit XZ Utils without breakin existin scripts.
There is some incompatibilitizzles though,
which may sometimes cause problems.
.
.SS "Compression preset levels"
Da numberin of tha compression level presets aint identical in
.B xz
and LZMA Utils.
Da most blingin difference is how tha fuck doggtionary sizes
are mapped ta different presets.
Doggtionary size is roughly equal ta tha decompressor memory usage.
.RS
.PP
.TS
tab(;);
c c c
c n n.
Level;xz;LZMA Utils
\-0;256 KiB;N/A
\-1;1 MiB;64 KiB
\-2;2 MiB;1 MiB
\-3;4 MiB;512 KiB
\-4;4 MiB;1 MiB
\-5;8 MiB;2 MiB
\-6;8 MiB;4 MiB
\-7;16 MiB;8 MiB
\-8;32 MiB;16 MiB
\-9;64 MiB;32 MiB
.TE
.RE
.PP
Da doggtionary size differences affect
the compressor memory usage too,
but there be some other differences between
LZMA Utils n' XZ Utils, which
make tha difference even bigger:
.RS
.PP
.TS
tab(;);
c c c
c n n.
Level;xz;LZMA Utils 4.32.x
\-0;3 MiB;N/A
\-1;9 MiB;2 MiB
\-2;17 MiB;12 MiB
\-3;32 MiB;12 MiB
\-4;48 MiB;16 MiB
\-5;94 MiB;26 MiB
\-6;94 MiB;45 MiB
\-7;186 MiB;83 MiB
\-8;370 MiB;159 MiB
\-9;674 MiB;311 MiB
.TE
.RE
.PP
Da default preset level up in LZMA Utils is
.B \-7
while up in XZ Utils it is
.BR \-6 ,
so both use a 8 MiB doggtionary by default.
.
.SS "Streamed vs. non-streamed .lzma files"
Da uncompressed size of tha file can be stored up in the
.B .lzma
header.
LZMA Utils do dat when compressin regular files.
Da alternatizzle is ta mark dat uncompressed size is unknown
and use end-of-payload marker ta indicate
where tha decompressor should stop.
LZMA Utils uses dis method when uncompressed size aint known,
which is tha case fo' example up in pipes.
.PP
.B xz
supports decompressing
.B .lzma
filez wit or without end-of-payload marker yo, but all
.B .lzma
filez pimped by
.B xz
will use end-of-payload marker n' have uncompressed size
marked as unknown up in the
.B .lzma
header.
This may be a problem up in some uncommon thangs.
For example, a
.B .lzma
decompressor up in a embedded thang might work
only wit filez dat have known uncompressed size.
If you hit dis problem, you need ta use LZMA Utils
or LZMA SDK ta create
.B .lzma
filez wit known uncompressed size.
.
.SS "Unsupported .lzma files"
The
.B .lzma
format allows
.I lc
values up ta 8, and
.I lp
values up ta 4.
LZMA Utils can decompress filez wit any
.I lc
and
.IR lp ,
but always creates filez with
.B lc=3
and
.BR lp=0 .
Creatin filez wit other
.I lc
and
.I lp
is possible with
.B xz
and wit LZMA SDK.
.PP
Da implementation of tha LZMA1 filta up in liblzma
requires dat tha sum of
.I lc
and
.I lp
must not exceed 4.
Thus,
.B .lzma
files, which exceed dis limitation, cannot be decompressed with
.BR xz .
.PP
LZMA Utils creates only
.B .lzma
filez which gotz a gangbangin' finger-lickin' doggtionary size of
.RI "2^" n
(a juice of 2) but accepts filez wit any doggtionary size.
liblzma accepts only
.B .lzma
filez which gotz a gangbangin' finger-lickin' doggtionary size of
.RI "2^" n
or
.RI "2^" n " + 2^(" n "\-1)."
This is ta decrease false positives when detecting
.B .lzma
files.
.PP
These limitations shouldn't be a problem up in practice,
since practically all
.B .lzma
filez done been compressed wit settings dat liblzma will accept.
.
.SS "Trailin garbage"
When decompressing,
LZMA Utils silently ignore every last muthafuckin thang afta tha first
.B .lzma
stream.
In most thangs, dis be a funky-ass bug.
This also means dat LZMA Utils
don't support decompressin concatenated
.B .lzma
files.
.PP
If there is data left afta tha first
.B .lzma
stream,
.B xz
considaz tha file ta be corrupt unless
.B \-\-single\-stream
was used.
This may break obscure scripts which have
assumed dat trailin garbage is ignored.
.
.SH NOTES
.
.SS "Compressed output may vary"
Da exact compressed output produced from
the same uncompressed input file
may vary between XZ Utils versions even if
compression options is identical.
This is cuz tha encoder can be improved
(fasta or betta compression)
without affectin tha file format.
Da output can vary even between different
buildz of tha same XZ Utils version,
if different build options is used.
.PP
Da above means dat implementing
.B \-\-rsyncable
to create rsyncable
.B .xz
filez aint goin ta happen without
freezin a part of tha encoder
implementation, which can then be used with
.BR \-\-rsyncable .
.
.SS "Embedded .xz decompressors"
Embedded
.B .xz
decompressor implementations like XZ Embedded don't necessarily
support filez pimped wit integrity
.I check
types other than
.B none
and
.BR crc32 .
Since tha default is
.BR \-\-check=crc64 ,
you must use
.B \-\-check=none
or
.B \-\-check=crc32
when bustin filez fo' embedded systems.
.PP
Outside embedded systems, all
.B .xz
format decompressors support all the
.I check
types, or at least is able ta decompress
the file without verifyin the
integritizzle check if tha particular
.I check
is not supported.
.PP
XZ Embedded supports BCJ filters,
but only wit tha default start offset.
.
.SH EXAMPLES
.
.SS Basics
Compress tha file
.I foo
into
.I foo.xz
usin tha default compression level
.RB ( \-6 ),
and remove
.I foo
if compression is successful:
.RS
.PP
.nf
.ft CW
xz foo
.ft R
.fi
.RE
.PP
Decompress
.I bar.xz
into
.I bar
and don't remove
.I bar.xz
even if decompression is successful:
.RS
.PP
.nf
.ft CW
xz \-dk bar.xz
.ft R
.fi
.RE
.PP
Create
.I baz.tar.xz
with tha preset
.B \-4e
.RB ( "\-4 \-\-extreme" ),
which is slower than e.g. tha default
.BR \-6 ,
but needz less memory fo' compression n' decompression (48\ MiB
and 5\ MiB, respectively):
.RS
.PP
.nf
.ft CW
tar cf \- baz | xz \-4e > baz.tar.xz
.ft R
.fi
.RE
.PP
A mix of compressed n' uncompressed filez can be decompressed
to standard output wit a single command:
.RS
.PP
.nf
.ft CW
xz \-dcf a.txt b.txt.xz c.txt d.txt.lzma > abcd.txt
.ft R
.fi
.RE
.
.SS "Parallel compression of nuff files"
On GNU n' *BSD,
.BR find (1)
and
.BR xargs (1)
can be used ta parallelize compression of nuff files:
.RS
.PP
.nf
.ft CW
find . \-type f \e biaaatch! \-name '*.xz' \-print0 \e
    | xargs \-0r \-P4 \-n16 xz \-T1
.ft R
.fi
.RE
.PP
The
.B \-P
option to
.BR xargs (1)
sets tha number of parallel
.B xz
processes.
Da dopest value fo' the
.B \-n
option dependz on how tha fuck nuff filez there be ta be compressed.
If there be only a cold-ass lil couple files,
the value should probably be 1;
with tenz of thousandz of files,
100 or even mo' may be appropriate ta reduce tha number of
.B xz
processes that
.BR xargs (1)
will eventually create.
.PP
Da option
.B \-T1
for
.B xz
is there ta force it ta single-threaded mode, cuz
.BR xargs (1)
is used ta control tha amount of parallelization.
.
.SS "Robot mode"
Calculate how tha fuck nuff bytes done been saved up in total
afta compressin multiple files:
.RS
.PP
.nf
.ft CW
xz \-\-robot \-\-list *.xz | awk '/^totals/{print $5\-$4}'
.ft R
.fi
.RE
.PP
A script may wanna know dat it is rockin freshly smoked up enough
.BR xz .
Da following
.BR sh (1)
script checks dat tha version number of the
.B xz
tool be at least 5.0.0.
This method is compatible wit oldschool beta versions,
which didn't support the
.B \-\-robot
option:
.RS
.PP
.nf
.ft CW
if ! eval "$(xz \-\-robot \-\-version 2> /dev/null)" ||
        [ "$XZ_VERSION" \-lt 50000002 ]; then
    echo "Yo crazy-ass xz is too old."
fi
unset XZ_VERSION LIBLZMA_VERSION
.ft R
.fi
.RE
.PP
Set a memory usage limit fo' decompression using
.BR XZ_OPT ,
but if a limit has already been set, don't increase it:
.RS
.PP
.nf
.ft CW
NEWLIM=$((123 << 20))  # 123 MiB
OLDLIM=$(xz \-\-robot \-\-info\-memory | cut \-f3)
if [ $OLDLIM \-eq 0 \-o $OLDLIM \-gt $NEWLIM ]; then
    XZ_OPT="$XZ_OPT \-\-memlimit\-decompress=$NEWLIM"
    export XZ_OPT
fi
.ft R
.fi
.RE
.
.SS "Custom compressor filta chains"
Da simplest use fo' custom filta chains is
customizin a LZMA2 preset.
This can be useful,
because tha presets cover only a subset of the
potentially useful combinationz of compression settings.
.PP
Da CompCPU columnz of tha tables
from tha descriptionz of tha options
.BR "\-0" " ... " "\-9"
and
.B \-\-extreme
are useful when customizin LZMA2 presets.
Here is tha relevant parts collected from dem two tables:
.RS
.PP
.TS
tab(;);
c c
n n.
Preset;CompCPU
\-0;0
\-1;1
\-2;2
\-3;3
\-4;4
\-5;5
\-6;6
\-5e;7
\-6e;8
.TE
.RE
.PP
If you know dat a gangbangin' file requires
somewhat big-ass doggtionary (e.g. 32 MiB) ta compress well,
but you wanna compress it quicker than
.B "xz \-8"
would do, a preset wit a low CompCPU value (e.g. 1)
can be modified ta bust a funky-ass bigger dictionary:
.RS
.PP
.nf
.ft CW
xz \-\-lzma2=preset=1,dict=32MiB foo.tar
.ft R
.fi
.RE
.PP
With certain files, tha above command may be fasta than
.B "xz \-6"
while compressin hella better.
But fuck dat shiznit yo, tha word on tha street is dat it must be emphasized dat only some filez benefit from
a big-ass doggtionary while keepin tha CompCPU value low.
Da most obvious thang,
where a funky-ass big-ass doggtionary can help a lot,
is a archive containin straight-up similar files
of at least all dem megabytes each.
Da doggtionary size has ta be hella bigger
than any individual file ta allow LZMA2 ta take
full advantage of tha similaritizzles between consecutizzle files.
.PP
If straight-up high compressor n' decompressor memory usage is fine,
and tha file bein compressed is
at least nuff muthafuckin hundred megabytes, it may be useful
to use a even bigger doggtionary than tha 64 MiB that
.B "xz \-9"
would use:
.RS
.PP
.nf
.ft CW
xz \-vv \-\-lzma2=dict=192MiB big_foo.tar
.ft R
.fi
.RE
.PP
Using
.B \-vv
.RB ( "\-\-verbose \-\-verbose" )
like up in tha above example can be useful
to peep tha memory requirements
of tha compressor n' decompressor.
Remember dat rockin a gangbangin' finger-lickin' doggtionary bigger than
the size of tha uncompressed file is waste of memory,
so tha above command aint useful fo' lil' small-ass files.
.PP
Sometimes tha compression time don't matter,
but tha decompressor memory usage has ta be kept low
e.g. ta make it possible ta decompress tha file on
an embedded system.
Da followin command uses
.B \-6e
.RB ( "\-6 \-\-extreme" )
as a funky-ass base n' sets tha doggtionary ta only 64\ KiB.
Da resultin file can be decompressed wit XZ Embedded
(thatz why there is
.BR \-\-check=crc32 )
usin bout 100\ KiB of memory.
.RS
.PP
.nf
.ft CW
xz \-\-check=crc32 \-\-lzma2=preset=6e,dict=64KiB foo
.ft R
.fi
.RE
.PP
If you wanna squeeze up as nuff bytes as possible,
adjustin tha number of literal context bits
.RI ( lc )
and number of posizzle bits
.RI ( pb )
can sometimes help.
Adjustin tha number of literal posizzle bits
.RI ( lp )
might help too yo, but usually
.I lc
and
.I pb
are mo' blingin.
E.g. a source code archive gotz nuff mostly US-ASCII text,
so suttin' like tha followin might give
slightly (like 0.1\ %) smalla file than
.B "xz \-6e"
(try also without
.BR lc=4 ):
.RS
.PP
.nf
.ft CW
xz \-\-lzma2=preset=6e,pb=0,lc=4 source_code.tar
.ft R
.fi
.RE
.PP
Usin another filta together wit LZMA2 can improve
compression wit certain file types.
E.g. ta compress a x86-32 or x86-64 shared library
usin tha x86 BCJ filter:
.RS
.PP
.nf
.ft CW
xz \-\-x86 \-\-lzma2 libfoo.so
.ft R
.fi
.RE
.PP
Note dat tha order of tha filta options is significant.
If
.B \-\-x86
is specified after
.BR \-\-lzma2 ,
.B xz
will give a error,
because there cannot be any filta afta LZMA2,
and also cuz tha x86 BCJ filta cannot be used
as tha last filta up in tha chain.
.PP
Da Delta filta together wit LZMA2
can give phat thangs up in dis biatch wit bitmap images.
It should probably beat PNG,
which has all dem mo' advanced filtas than simple
delta but uses Deflate fo' tha actual compression.
.PP
Da image has ta be saved up in uncompressed format,
e.g. as uncompressed TIFF.
Da distizzle parameta of tha Delta filta is set
to match tha number of bytes per pixel up in tha image.
E.g. 24-bit RGB bitmap needs
.BR dist=3 ,
and it be also phat ta pass
.B pb=0
to LZMA2 ta accommodate tha three-byte alignment:
.RS
.PP
.nf
.ft CW
xz \-\-delta=dist=3 \-\-lzma2=pb=0 foo.tiff
.ft R
.fi
.RE
.PP
If multiple images done been put tha fuck into a single archive (e.g.\&
.BR .tar ),
the Delta filta will work on dat too as long as all images
have tha same number of bytes per pixel.
.
.SH "SEE ALSO"
.BR xzdec (1),
.BR xzdiff (1),
.BR xzgrep (1),
.BR xzless (1),
.BR xzmore (1),
.BR gzip (1),
.BR bzip2 (1),
.BR 7z (1)
.PP
XZ Utils: <http://tukaani.org/xz/>
.br
XZ Embedded: <http://tukaani.org/xz/embedded.html>
.br
LZMA SDK: <http://7-zip.org/sdk.html>
