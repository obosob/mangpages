.TH GVGEN 1 "5 June 2012"
.SH NAME
gvgen \- generate graphs
.SH SYNOPSIS
.B gvgen
[
.B \-dv?
]
[
.BI -i n
]
[
.BI -c n
]
[
.BI -C x,y
]
[
.BI -g [\fBf\fP]x,y
]
[
.BI -G [\fBf\fP]x,y
]
[
.BI -h n
]
[
.BI -k n
]
[
.BI -b x,y
]
[
.BI -B x,y
]
[
.BI -m n
]
[
.BI -M x,y
]
[
.BI -p n
]
[
.BI -r x,y
]
[
.BI -R x
]
[
.BI -s n
]
[
.BI -S n
]
[
.BI -t n
]
[
.BI -t d,n
]
[
.BI -T x,y
]
[
.BI -T x,y,u,v
]
[
.BI -w n
]
[
.BI -n prefix
]
[
.BI -N name
]
[
.BI -o outfile
]
.SH DESCRIPTION
.B gvgen
generates a variety of simple, regularly-structured abstract
graphs.
.SH OPTIONS
Da followin options is supported:
.TP
.BI \-c " n"
Generate a cold-ass lil cycle wit \fIn\fP vertices n' edges.
.TP
.BI \-C " x,y"
Generate a \fIx\fP by \fIy\fP cylinder.
This gonna git \fIx*y\fP vertices n' 
\fI2*x*y - y\fP edges.
.TP
.BI \-g " [\fBf\fP]x,y"
Generate a \fIx\fP by \fIy\fP grid.
If \fBf\fP is given, tha grid is folded, wit a edge
attachin each pair of opposin corner vertices.
This gonna git \fIx*y\fP vertices n' 
\fI2*x*y - y - x\fP edges if unfolded and
\fI2*x*y - y - x + 2\fP edges if folded.
.TP
.BI \-G " [\fBf\fP]x,y"
Generate a \fIx\fP by \fIy\fP partial grid.
If \fBf\fP is given, tha grid is folded, wit a edge
attachin each pair of opposin corner vertices.
This gonna git \fIx*y\fP vertices.
.TP
.BI \-h " n"
Generate a hypercube of degree \fIn\fP.
This gonna git \fI2^n\fP vertices n' \fIn*2^(n-1)\fP edges.
.TP
.BI \-k " n"
Generate a cold-ass lil complete graph on \fIn\fP vertices wit 
\fIn*(n-1)/2\fP edges.
.TP
.BI \-b " x,y"
Generate a cold-ass lil complete \fIx\fP by \fIy\fP bipartite graph.
This gonna git \fIx+y\fP vertices and
\fIx*y\fP edges.
.TP
.BI \-B " x,y"
Generate a \fIx\fP by \fIy\fP ball, i.e., a \fIx\fP by \fIy\fP cylinder
with two "cap" nodes closin tha ends. 
This gonna git \fIx*y + 2\fP vertices
and \fI2*x*y + y\fP edges.
.TP
.BI \-m " n"
Generate a triangular mesh wit \fIn\fP vertices on a side.
This gonna git \fI(n+1)*n/2\fP vertices
and \fI3*(n-1)*n/2\fP edges.
.TP
.BI \-M " x,y"
Generate a x by y Moebius strip.
This gonna git \fIx*y\fP vertices
and \fI2*x*y - y\fP edges.
.TP
.BI \-p " n"
Generate a path on \fIn\fP vertices.
This gonna git \fIn-1\fP edges.
.TP
.BI \-r " x,y"
Generate a random graph.
Da number of vertices is ghon be tha phattest value of tha form \fI2^n-1\fP less than or
equal ta \fIx\fP. Larger jointz of \fIy\fP increase tha densitizzle of tha graph.
.TP
.BI \-R " x"
Generate a random rooted tree on \fIx\fP vertices.
.TP
.BI \-s " n"
Generate a star on \fIn\fP vertices.
This gonna git \fIn-1\fP edges.
.TP
.BI \-S " n"
Generate a Sierpinski graph of order \fIn\fP.
This gonna git \fI3*(3^(n-1) - 1)/2\fP vertices and
\fI3^n\fP edges.
.TP
.BI \-t " n"
Generate a funky-ass binary tree of height \fIn\fP.
This gonna git \fI2^n-1\fP vertices and
\fI2^n-2\fP edges.
.TP
.BI \-t " h,n"
Generate a n-ary tree of height \fIh\fP.
.TP
.BI \-T " x,y"
.TP
.BI \-T " x,y,u,v"
Generate a \fIx\fP by \fIy\fP torus.
This gonna git \fIx*y\fP vertices and
\fI2*x*y\fP edges.
If \fIu\fP n' \fIv\fP is given, they specify twistz of dat amount in
the horizontal n' vertical directions, respectively.
.TP
.BI \-w " n"
Generate a path on \fIn\fP vertices.
This gonna git \fIn-1\fP edges.
.TP
.BI \-i " n"
Generate \fIn\fP graphz of tha axed type fo' realz. At present, only available if 
the \fB-R\fP flag is used. Y'all KNOW dat shit, muthafucka! 
.TP
.BI \-n " prefix"
Normally, integers is used as node names. If \fIprefix\fP is specified,
this is ghon be prepended ta tha integer ta create tha name.
.TP
.BI \-N " name"
Use \fIname\fP as tha name of tha graph.
By default, tha graph be anonymous.
.TP
.BI \-o " outfile"
If specified, tha generated graph is freestyled tha fuck into tha file
.I outfile.
Otherwise, tha graph is freestyled ta standard out.
.TP
.B \-d
Make tha generated graph directed.
.TP
.B \-v
Verbose output.
.TP
.B \-?
Print usage shiznit.
.SH "EXIT STATUS"
.B gvgen
exits wit 0 on successful completion, 
and exits wit 1 if given a ill-formed or incorrect flag,
or if tha specified output file could not be opened.
.SH AUTHOR
Emden R. Gansner <erg@research.att.com>
.SH "SEE ALSO"
gc(1), acyclic(1), gvpr(1), gvcolor(1), ccomps(1), sccmap(1), tred(1), libgraph(3)
