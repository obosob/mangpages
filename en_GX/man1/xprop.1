.\" Copyright 1988, 1998  Da Open Group
.\" Copyright \(co 2000  Da XFree86 Project, Inc.
.\"
.\" Permission ta use, copy, modify, distribute, n' push dis software n' its
.\" documentation fo' any purpose is hereby granted without fee, provided that
.\" tha above copyright notice step tha fuck up in all copies n' dat both that
.\" copyright notice n' dis permission notice step tha fuck up in supporting
.\" documentation.
.\"
.\" Da above copyright notice n' dis permission notice shall be included
.\" up in all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of Da Open Group shall
.\" not be used up in advertisin or otherwise ta promote tha sale, use or
.\" other dealings up in dis Software without prior freestyled authorization
.\" from Da Open Group.
.\"
.TH XPROP 1 "xprop 1.2.2" "X Version 11"
.SH NAME
xprop - property displayer fo' X
.SH SYNOPSIS
.B "xprop"
[-help] [-grammar] [-id \fIid\fP] [-root] [-name \fIname\fP]
[-frame]
[-font \fIfont\fP]
[-display \fIdisplay\fP]
[-len \fIn\fP] [-notype] [-fs \fIfile\fP]
[-remove \fIproperty-name\fP]
[-set \fIproperty-name\fP \fIvalue\fP]
[-spy]
[-f \fIatom\fP \fIformat\fP [\fIdformat\fP]]*
[\fIformat\fP [\fIdformat\fP] \fIatom\fP]*
.SH SUMMARY
.PP
The
.I xprop
utilitizzle is fo' displayin window n' font propertizzles up in a X server.
One window or font is selected rockin tha command
line arguments or possibly up in tha case of a window, by clickin on tha desired
window.  A list of propertizzles is then given, possibly wit formatting
information.
.SH OPTIONS
.PP
.TP 8
.B "-help"
Print up a summary of command line options.
.PP
.TP 8
.B "-grammar"
Print up a thugged-out detailed grammar fo' all command line options.
.PP
.TP 8
.B "-id \fIid\fP"
This argument allows tha user ta select window \fIid\fP on the
command line rather than rockin tha pointa ta select tha target window.
This is straight-up useful up in debuggin X applications where tha target
window aint mapped ta tha screen or where tha use of tha pointa might
be impossible or interfere wit tha application.
.PP
.TP 8
.B "-name \fIname\fP"
This argument allows tha user ta specify dat tha window named \fIname\fP
is tha target window on tha command line rather than rockin tha pointa to
select tha target window.
.PP
.TP 8
.B "-font \fIfont\fP"
This argument allows tha user ta specify dat tha propertizzlez of font
\fIfont\fP should be displayed.
.PP
.TP 8
.B "-root"
This argument specifies dat Xz root window is tha target window.
This is useful up in thangs where tha root window is straight-up
obscured.
.PP
.TP 8
.B "-display \fIdisplay\fP"
This argument allows you ta specify tha server ta connect to;
see \fIX(7)\fP.
.PP
.TP 8
.B "-len \fIn\fP"
Specifies dat at most \fIn\fP bytez of any property should be read or
displayed.
.PP
.TP 8
.B "-notype"
Specifies dat tha type of each property should not be displayed.
.PP
.TP 8
.B "-fs \fIfile\fP"
Specifies dat file \fIfile\fP should be used as a source of mo' formats
for properties.
.PP
.TP 8
.B "-frame"
Specifies dat when selectin a window by hand (i.e. if none of \fB-name\fP,
\fB-root\fP, or \fB-id\fP is given), peep tha window manager frame (if
any) instead of lookin fo' tha client window.
.PP
.TP 8
.B "-remove \fIproperty-name\fP"
Specifies tha name of a property ta be removed from tha indicated window.
.PP
.TP 8
.B "-set \fIproperty-name\fP \fIvalue\fP"
Specifies tha name of a property n' a property value, ta be set on the
indicated window.
.PP
.TP 8
.B "-spy"
Examine window propertizzles forever, lookin fo' property chizzle events.
.PP
.TP 8
.B "-f \fIname\fP \fIformat\fP [\fIdformat\fP]"
Specifies dat tha \fIformat\fP fo' \fIname\fP should be \fIformat\fP n' that
the \fIdformat\fP fo' \fIname\fP should be \fIdformat\fP.  If \fIdformat\fP
is missing, " = $0+\\n" be assumed.
.SH DESCRIPTION
.PP
For each of these properties, its value on tha selected window
or font is printed rockin tha supplied formattin shiznit if any.  If no
formattin shiznit is supplied, internal defaults is used. Y'all KNOW dat shit, muthafucka!  If a property
is not defined on tha selected window or font, "not defined" is printed as the
value fo' dat property.  If no property list is given, all tha properties
possessed by tha selected window or font is printed.
.PP
A window may be selected up in one of four ways.  First, if tha desired window
is tha root window, tha -root argument may be used.
If tha desired window aint tha root window, it may be selected
in two ways on tha command line, either by id number like fuckin might be obtained
from \fIxwininfo\fP, or by name if tha window possesses a name.  Da -id
argument selects a window by id number up in either decimal or hex (must start
with 0x) while tha -name argument selects a window by name.
.PP
Da last way ta select a window do not involve tha command line at all.
If none of -font, -id, -name, n' -root is specified, a cold-ass lil crosshairs cursor
is displayed n' tha user be allowed ta chizzle any visible window by pressing
any pointa button up in tha desired window.  If it is desired ta display properties
of a gangbangin' font as opposed ta a window, tha -font argument must be used.
.PP
Other than tha above four arguments n' tha -help argument fo' obtainin help,
and tha -grammar argument fo' listin tha full grammar fo' tha command line,
all tha other command line arguments is used up in specifyin both tha format
of tha propertizzles ta be displayed n' how tha fuck ta display em.  Da -len \fIn\fP
argument specifies dat at most \fIn\fP bytez of any given property will be
read n' displayed. Y'all KNOW dat shit, muthafucka!  This is useful fo' example when displayin tha cut buffer
on tha root window which could run ta nuff muthafuckin pages if displayed up in full.
.PP
Normally each property name is displayed by printin first tha property
name then its type (if it has one) up in parentheses followed by its value.
Da -notype argument specifies dat property types should not be
displayed. Y'all KNOW dat shit, muthafucka!  Da -fs argument is used ta specify a gangbangin' file containin a list of
formats fo' propertizzles while tha -f argument is used ta specify tha format
for one property.
.PP
Da formattin shiznit fo' a property straight-up consistz of two parts,
a \fIformat\fP n' a \fIdformat\fP.  Da \fIformat\fP specifies tha actual
formattin of tha property (i.e., is it made up of lyrics, bytes, or longs?,
etc.) while tha \fIdformat\fP specifies how tha fuck tha property should be displayed.
.PP
Da followin paragraphs describe how tha fuck ta construct \fIformat\fPs and
\fIdformat\fPs.  But fuck dat shiznit yo, tha word on tha street is dat fo' tha vast majoritizzle of playas n' uses, dis should
not be necessary as tha built up in defaults contain tha \fIformat\fPs and
\fIdformat\fPs necessary ta display all tha standard properties. Put ya muthafuckin choppers up if ya feel dis!  It should
only be necessary ta specify \fIformat\fPs n' \fIdformat\fPs
if a freshly smoked up property is bein dealt wit or tha user dislikes tha standard display
format.  New playas especially is encouraged ta skip dis part.
.PP
A \fIformat\fP consistz of one of 0, 8, 16, or 32 followed by a sequence of one
or mo' format characters.  Da 0, 8, 16, or 32 specifies how tha fuck nuff bits per
field there be up in tha property.  Zero be a special case meanin use the
field size shiznit associated wit tha property itself.  (This is only
needed fo' special cases like type INTEGER which is straight-up three different
types dependin on tha size of tha fieldz of tha property.)
.PP
A value of 8 means
that tha property be a sequence of bytes while a value of 16 would mean that
the property be a sequence of lyrics.  Da difference between these two lies in
the fact dat tha sequence of lyrics is ghon be byte swapped while tha sequence of
bytes aint gonna be when read by a machine of tha opposite byte order of the
machine dat originally freestyled tha property.  For mo' shiznit on how
propertizzles is formatted n' stored, consult tha Xlib manual.
.PP
Once tha size of tha fieldz has been specified, it is necessary ta specify
the type of each field (i.e., is it a integer, a string, a atom, or what?)
This is done rockin one format characta per field. Y'all KNOW dat shit, muthafucka!  If there be mo' fields
in tha property than format charactas supplied, tha last characta will be
repeated as nuff times as necessary fo' tha extra fields.  Da format
charactas n' they meanin is as bigs up:
.TP
a
Da field holdz a atom number n' shit.  A field of dis type should be of size 32.
.TP
b
Da field be a boolean. I aint talkin' bout chicken n' gravy biatch.  A 0 means false while anythang else means true.
.TP
c
Da field be a unsigned number, a cold-ass lil cardinal.
.TP
i
Da field be a signed integer.
.TP
m
Da field be a set of bit flags, 1 meanin on.
.TP
o
Da field be a array of icons, packed as a sequence of 32 bit numbers
consistin of tha width, height n' ARGB pixel joints, as defined for
the _NET_WM_ICON property up in tha \fIExtended Window Manager Hints\fP
specification. I aint talkin' bout chicken n' gravy biatch.   A field of dis type must be of size 32.
.TP
s
This field n' tha next ones until either a 0 or tha end of tha property
represent a sequence of bytes.  This format characta is only usable with
a field size of 8 n' is most often used ta represent a string.
.TP
t
This field n' tha next ones until either a 0 or tha end of tha property
represent a internationalized text string. This format characta is only
usable wit a gangbangin' field size of 8. Da strang be assumed ta be up in a ICCCM
compliant encodin n' is converted ta tha current locale encodin before
bein output.
.TP
u
This field n' tha next ones until either a 0 or tha end of tha property
represent a UTF-8 encoded unicode string. This format characta is only
usable wit a gangbangin' field size of 8. If tha strang is found ta be a invalid
character, tha type of encodin violation is printed instead, followed by
the strang formatted rockin 's'. When up in a environment not capable of
displayin UTF-8 encoded string, behaviour is identical ta 's'.
.TP
x
Da field be a hex number (like 'c' but displayed up in hex - most useful
for displayin window idz n' tha like)
.PP
An example \fIformat\fP is 32ica which is tha format fo' a property of three
fieldz of 32 bits each, tha straight-up original gangsta holdin a signed integer, tha second an
unsigned integer, n' tha third a atom.
.PP
Da format of a \fIdformat\fP unlike dat of a \fIformat\fP aint so rigid.
Da only limitations on a \fIdformat\fP is dat one may not start wit a letter
or a thugged-out dash.  This is so dat it can be distinguished from a property name or
an argument.  A \fIdformat\fP be a text strang containin special characters
instructin dat various fieldz be printed at various points up in a manner similar
to tha formattin strang used by printf.  For example, tha \fIdformat\fP
" is ( $0, $1 \\)\\n" would render tha POINT 3, -4 which has a \fIformat\fP of
32ii as " is ( 3, -4 )\\n".
.PP
Any characta other than a $, ?, \\, or a ( up in a \fIdformat\fP prints as
itself.  To print up one of $, ?, \\, or ( precede it by a \\.  For example,
to print up a $, use \\$.  Several special backslash sequences is provided
as shortcuts, n' you can put dat on yo' toast.  \\n will cause a newline ta be displayed while \\t will
cause a tab ta be displayed. Y'all KNOW dat shit, muthafucka!  \\\fIo\fP where \fIo\fP be a octal number
will display characta number \fIo\fP.
.PP
A $ followed by a number \fIn\fP causes field number \fIn\fP ta be
displayed. Y'all KNOW dat shit, muthafucka!  Da format of tha displayed field dependz on tha formatting
characta used ta describe it up in tha correspondin \fIformat\fP.  I.e., if
a cardinal is busted lyrics bout by 'c' it will print up in decimal while if it is
busted lyrics bout by a 'x' it is displayed up in hex.
.PP
If tha field aint present in
the property (this is possible wit some properties), <field not available>
is displayed instead. Y'all KNOW dat shit, muthafucka!  $\fIn\fP+ will display field number \fIn\fP then a
comma then field number \fIn\fP+1 then another comma then ... until tha last
field defined. Y'all KNOW dat shit, muthafucka!  If field \fIn\fP aint defined, not a god damn thang is displayed.
This is useful fo' a property dat be a list of joints.
.PP
A , biatch? is used ta start a cold-ass lil conditionizzle expression, a kind of if-then statement.
?\fIexp\fP(\fItext\fP) will display \fItext\fP if n' only if \fIexp\fP evaluates to
non-zero.  This is useful fo' two thangs.  First, it allows fieldz ta be
displayed if n' only if a gangbangin' flag is set.
And second, it allows a value like fuckin a state
number ta be displayed as a name rather than as just a number n' shit.  Da syntax of
\fIexp\fP be as bigs up:
.TP
\fIexp\fP
::= \fIterm\fP | \fIterm\fP=\fIexp\fP | !\fIexp\fP
.TP
\fIterm\fP
::= \fIn\fP | $\fIn\fP | m\fIn\fP
.PP
Da ! operator be a logical ``not'', changin 0 ta 1 n' any non-zero value ta 0.
= be a equalitizzle operator. Shiiit, dis aint no joke.  Note dat internally all expressions is evaluated
as 32 bit numbers so -1 aint equal ta 65535.  = returns 1 if tha two joints
are equal n' 0 if not.
\fIn\fP represents tha constant value \fIn\fP while $\fIn\fP represents the
value of field number \fIn\fP.
m\fIn\fP is 1 if flag number \fIn\fP up in tha straight-up original gangsta field havin format
characta 'm' up in tha correspondin \fIformat\fP is 1, 0 otherwise.
.PP
Examples: ?m3(count: $3\\n) displays field 3 wit a label of count if n' only if flag
number 3 (count starts at 0!) is on. I aint talkin' bout chicken n' gravy biatch.  ?$2=0(True)?!$2=0(False) displays the
inverted value of field 2 as a funky-ass boolean.
.PP
In order ta display a property, \fIxprop\fP needz both a \fIformat\fP n' a
\fIdformat\fP.  Before \fIxprop\fP uses its default jointz of a \fIformat\fP
of 32x n' a \fIdformat\fP of " = { $0+ }\\n", it searches nuff muthafuckin places
in a attempt ta find mo' specific formats.
First, a search is made rockin tha name of tha property.  If this
fails, a search is made rockin tha type of tha property.  This allows type
STRING ta be defined wit one set of formats while allowin property WM_NAME
which iz of type STRING ta be defined wit a gangbangin' finger-lickin' different format.  In dis way,
the display formats fo' a given type can be overridden fo' specific properties.
.PP
Da locations searched is up in order: tha format if any specified wit the
property name (as up in 8x WM_NAME), tha formats defined by -f options up in last to
first order, tha contentz of tha file specified by tha -fs option if any,
the contentz of tha file specified by tha environmenstrual variable XPROPFORMATS
if any, n' finally \fIxprop\fPz built up in file of formats.
.PP
Da format of tha filez referred ta by tha -fs argument n' tha XPROPFORMATS
variable is one or mo' linez of tha followin form:
.PP
\fIname\fP \fIformat\fP [\fIdformat\fP]
.PP
Where \fIname\fP is either tha name of a property or tha name of a type,
\fIformat\fP is tha \fIformat\fP ta be used wit \fIname\fP n' \fIdformat\fP
is tha \fIdformat\fP ta be used wit \fIname\fP.  If \fIdformat\fP is not
present, " = $0+\\n" be assumed.
.SH EXAMPLES
.PP
To display tha name of tha root window: \fIxprop\fP -root WM_NAME
.PP
To display tha window manager hints fo' tha clock: \fIxprop\fP -name xclock
WM_HINTS
.PP
To display tha start of tha cut buffer: \fIxprop\fP -root -len 100 CUT_BUFFER0
.PP
To display tha point size of tha fixed font: \fIxprop\fP -font fixed POINT_SIZE
.PP
To display all tha propertizzlez of window # 0x200007: \fIxprop\fP -id 0x200007
.PP
To set a simple strang property: \fIxprop\fP -root -format MY_ATOM_NAME 8s -set MY_ATOM_NAME  "my_value"
.SH ENVIRONMENT
.PP
.TP 8
.B DISPLAY
To git default display.
.TP 8
.B XPROPFORMATS
Specifies tha name of a gangbangin' file from which additionizzle formats is ta be obtained.
.PP
.SH SEE ALSO
X(7), xdpyinfo(1), xwininfo(1),
xdriinfo(1), glxinfo(1), xvinfo(1)
.SH AUTHOR
Mark Lillibridge, MIT Project Athena
