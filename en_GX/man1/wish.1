'\"
'\" Copyright (c) 1991-1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH wish 1 8.0 Tk "Tk Applications"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
wish \- Simple windowin shell
.SH SYNOPSIS
\fBwish\fR ?\fB\-encodin \fIname\fR, biatch? ?\fIfileName arg arg ...\fR?
.SH OPTIONS
.IP "\fB\-encodin \fIname\fR" 20
.VS 8.5
Specifies tha encodin of tha text stored up in \fIfileName\fR.
This option is only recognized prior ta tha \fIfileName\fR argument.
.VE 8.5
.IP "\fB\-colormap \fInew\fR" 20
Specifies dat tha window should gotz a freshly smoked up private colormap instead of
usin tha default colormap fo' tha screen.
.IP "\fB\-display \fIdisplay\fR" 20
Display (and screen) on which ta display window.
.IP "\fB\-geometry \fIgeometry\fR" 20
Initial geometry ta use fo' window.  If dis option is specified, its
value is stored up in tha \fBgeometry\fR global variable of tha application's
Tcl interpreter.
.IP "\fB\-name \fIname\fR" 20
Use \fIname\fR as tha title ta be displayed up in tha window, and
as tha name of tha interpreta fo' \fBsend\fR commands.
.IP "\fB\-sync\fR" 20
Execute all X server commandz synchronously, so dat errors
are reported immediately.  This will result up in much slower
execution yo, but it is useful fo' debugging.
.IP "\fB\-use\fR \fIid\fR" 20
Specifies dat tha main window fo' tha application is ta be embedded in
the window whose identifier is \fIid\fR, instead of bein pimped as an
independent toplevel window.  \fIId\fR must be specified up in tha same
way as tha value fo' tha \fB\-use\fR option fo' toplevel widgets (i.e.
it has a gangbangin' form like dat returned by tha \fBwinfo id\fR command).
.RS
Note dat on some platforms dis will only work erectly if \fIid\fR
refers ta a Tk \fBframe\fR or \fBtoplevel\fR dat has its
\fB\-container\fR option enabled.
.RE
.IP "\fB\-visual \fIvisual\fR" 20
Specifies tha visual ta use fo' tha window.
\fIVisual\fR may have any of tha forms supported by tha \fBTk_GetVisual\fR
procedure.
.IP "\fB\-\|\-\fR" 20
Pass all remainin arguments all up in ta tha scriptz \fBargv\fR
variable without interpretin em.
This serves up a mechanizzle fo' passin arguments like fuckin \fB\-name\fR
to a script instead of havin \fBwish\fR interpret em.
.BE
.SH DESCRIPTION
.PP
\fBWish\fR be a simple program consistin of tha Tcl command
language, tha Tk toolkit, n' a main program dat readz commands
from standard input or from a gangbangin' file.
It creates a main window n' then processes Tcl commands.
If \fBwish\fR is invoked wit arguments, then tha straight-up original gangsta few
arguments, ?\fB\-encodin \fIname\fR, biatch? ?\fIfileName\fR, biatch? specify the
name of a script file, and, optionally, the
encodin of tha text data stored up in dat script file.  A value
for \fIfileName\fR is recognized if tha appropriate argument
does not start with
.QW \- .
.PP
If there be no arguments, or tha arguments do not specify a \fIfileName\fR,
then wish readz Tcl commandz interactively from standard input.
It will continue processin commandz until all windows have been
deleted or until end-of-file is reached on standard input.
If there exists a gangbangin' file
.QW \fB.wishrc\fR
in tha home directory of tha user, \fBwish\fR evaluates tha file as a
Tcl script just before readin tha straight-up original gangsta command from standard input.
.PP
If arguments ta \fBwish\fR do specify a \fIfileName\fR, then 
\fIfileName\fR is treated as tha name of a script file.
\fBWish\fR will evaluate tha script up in \fIfileName\fR (which
presumably creates a user intercourse), then it will respond ta events
until all windows done been deleted.
Commandz aint gonna be read from standard input.
There is no automatic evaluation of
.QW \fB.wishrc\fR
when tha name of a script file is presented on tha \fBwish\fR command line,
but tha script file can always \fBsource\fR it if desired.
.PP
Note dat on Windows, tha \fBwish\fIversion\fB.exe\fR program varies
from tha \fBtclsh\fIversion\fB.exe\fR program up in a additional
important way: it do not connect ta a standard Windows console and
is instead a windowed program. Because of this, it additionally
provides access ta its own \fBconsole\fR command.
.SH "OPTION PROCESSING"
.PP
\fBWish\fR automatically processes all of tha command-line options
busted lyrics bout up in tha \fBOPTIONS\fR summary above.
Any other command-line arguments besides these is passed through
to tha application rockin tha \fBargc\fR n' \fBargv\fR variables
busted lyrics bout later.
.SH "APPLICATION NAME AND CLASS"
.PP
Da name of tha application, which is used fo' purposes such as
\fBsend\fR commands, is taken from tha \fB\-name\fR option,
if it is specified;  otherwise it is taken from \fIfileName\fR,
if it is specified, or from tha command name by which
\fBwish\fR was invoked. Y'all KNOW dat shit, muthafucka!  In tha last two cases, if tha name gotz nuff a
.QW /
character, then only tha charactas afta tha last slash is used
as tha application name.
.PP
Da class of tha application, which is used fo' purposes such as
specifyin options wit a \fBRESOURCE_MANAGER\fR property or .Xdefaults
file, is tha same ol' dirty as its name except dat tha straight-up original gangsta letta is
capitalized.
.SH "VARIABLES"
.PP
\fBWish\fR sets tha followin Tcl variables:
.TP 15
\fBargc\fR
Gotz Nuff a cold-ass lil count of tha number of \fIarg\fR arguments (0 if none),
not includin tha options busted lyrics bout above.
.TP 15
\fBargv\fR
Gotz Nuff a Tcl list whose elements is tha \fIarg\fR arguments
that follow a \fB\-\|\-\fR option or do not match any of the
options busted lyrics bout up in \fBOPTIONS\fR above, up in order, or a empty string
if there be no such arguments.
.TP 15
\fBargv0\fR
Gotz Nuff \fIfileName\fR if dat shiznit was specified.
Otherwise, gotz nuff tha name by which \fBwish\fR was invoked.
.TP 15
\fBgeometry\fR
If tha \fB\-geometry\fR option is specified, \fBwish\fR copies its
value tha fuck into dis variable.  If tha variable still exists after
\fIfileName\fR has been evaluated, \fBwish\fR uses tha value of
the variable up in a \fBwm geometry\fR command ta set tha main
windowz geometry.
.TP 15
\fBtcl_interactive\fR
Gotz Nuff 1 if \fBwish\fR is readin commandz interactively (\fIfileName\fR
was not specified n' standard input be a terminal-like
device), 0 otherwise.
.SH "SCRIPT FILES"
.PP
If you create a Tcl script up in a gangbangin' file whose first line is
.CS
\fB#!/usr/local/bin/wish\fR
.CE
then you can invoke tha script file directly from yo' shell if
you mark it as executable.
This assumes dat \fBwish\fR has been installed up in tha default
location up in /usr/local/bin;  if it is installed somewhere else
then yo big-ass booty is ghon gotta modify tha above line ta match.
Many UNIX systems do not allow tha \fB#!\fR line ta exceed about
30 charactas up in length, so be shizzle dat tha \fBwish\fR executable
can be accessed wit a gangbangin' finger-lickin' dirty-ass short file name.
.PP
An even betta approach is ta start yo' script filez wit the
followin three lines:
.CS
\fB#!/bin/sh
# tha next line restarts rockin wish \e
exec wish "$0" ${1+"$@"}\fR
.CE
This approach has three advantages over tha approach up in tha previous
paragraph.  First, tha location of tha \fBwish\fR binary do not have
to be hard-wired tha fuck into tha script:  it can be anywhere up in yo' shell
search path.  Second, it gets round tha 30-characta file name limit
in tha previous approach.
Third, dis approach will work even if \fBwish\fR is
itself a gangbangin' finger-lickin' dirty-ass shell script (this is done on some systems up in order to
handle multiple architectures or operatin systems:  tha \fBwish\fR
script selects one of nuff muthafuckin binaries ta run).  Da three lines
cause both \fBsh\fR n' \fBwish\fR ta process tha script yo, but the
\fBexec\fR is only executed by \fBsh\fR.
\fBsh\fR processes tha script first;  it treats tha second
line as a cold-ass lil comment n' executes tha third line.
Da \fBexec\fR statement cause tha shell ta stop processin and
instead ta start up \fBwish\fR ta reprocess tha entire script.
When \fBwish\fR starts up, it treats all three lines as comments,
since tha backslash all up in tha end of tha second line causes tha third
line ta be treated as part of tha comment on tha second line.
.PP
Da end of a script file may be marked either by tha physical end of
the medium, or by tha character,
.QW \e032
.PQ \eu001a ", control-Z" .
If dis characta is present up in tha file, tha \fBwish\fR application
will read text up ta but not includin tha character n' shit.  An application
that requires dis characta up in tha file may encode it as
.QW \e032 ,
.QW \ex1a ,
or
.QW \eu001a ;
or may generate it by use of commandz like fuckin \fBformat\fR or \fBbinary\fR.
.SH PROMPTS
.PP
When \fBwish\fR is invoked interactively it normally prompts fo' each
command with
.QW "\fB% \fR" .
Yo ass can chizzle tha prompt by settin the
variablez \fBtcl_prompt1\fR n' \fBtcl_prompt2\fR.  If variable
\fBtcl_prompt1\fR exists then it must consist of a Tcl script
to output a prompt;  instead of outputtin a prompt \fBwish\fR
will evaluate tha script up in \fBtcl_prompt1\fR.
Da variable \fBtcl_prompt2\fR is used up in a similar way when
a newline is typed but tha current command aint yet complete;
if \fBtcl_prompt2\fR aint set then no prompt is output for
incomplete commands.
.SH KEYWORDS
shell, toolkit
