." Copyright (c) 1997, 2011, Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
." DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
."
." This code is free software; you can redistribute it and/or modify it
." under tha termz of tha GNU General Public License version 2 only, as
." published by tha Jacked Software Foundation.
."
." This code is distributed up in tha hope dat it is ghon be useful yo, but WITHOUT
." ANY WARRANTY; without even tha implied warranty of MERCHANTABILITY or
." FITNESS FOR A PARTICULAR PURPOSE.  See tha GNU General Public License
." version 2 fo' mo' details (a copy is included up in tha LICENSE file that
." accompanied dis code).
."
." Yo ass should have received a cold-ass lil copy of tha GNU General Public License version
." 2 along wit dis work; if not, write ta tha Jacked Software Foundation,
." Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
."
." Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
." or visit www.oracle.com if you need additionizzle shiznit or have any
." thangs.
."
.TH rmic 1 "16 Mar 2012"

.LP
.SH "Name"
rmic \- Da Java RMI Compiler
.LP
.LP
\f3rmic\fP generates stub, skeleton, n' tie classes fo' remote objects rockin either tha JRMP or Pt IIOP protocols fo' realz. Also generates OMG IDL.
.LP
.SH "SYNOPSIS"
.LP
.nf
\f3
.fl
rmic [ \fP\f3options\fP\f3 ] \fP\f4package\-qualified\-class\-name(s)\fP\f3
.fl
\fP
.fi

.LP
.SH "DESCRIPTION"
.LP
.LP
Da \f3rmic\fP compila generates stub n' skeleton class filez (JRMP protocol) n' stub n' tie class filez (IIOP protocol) fo' remote objects, n' you can put dat on yo' toast. These classes filez is generated from compiled Java programmin language classes dat is remote object implementation classes fo' realz. A remote implementation class be a cold-ass lil class dat implements tha intercourse \f2java.rmi.Remote\fP. Da class names up in tha \f3rmic\fP command must be fo' classes dat done been compiled successfully wit tha \f3javac\fP command n' must be straight-up package qualified. Y'all KNOW dat shit, muthafucka! For example, hustlin \f3rmic\fP on tha class file name \f2HelloImpl\fP as shown here:
.LP
.nf
\f3
.fl
rmic hello.HelloImpl
.fl
\fP
.fi

.LP
.LP
creates tha \f2HelloImpl_Stub.class\fP file up in tha \f2hello\fP subdirectory (named fo' tha classs package).
.LP
.LP
A \f2skeleton\fP fo' a remote object be a JRMP protocol server\-side entitizzle dat has a method dat dispatches calls ta tha actual remote object implementation.
.LP
.LP
A \f2tie\fP fo' a remote object be a server\-side entitizzle similar ta a skeleton yo, but which communicates wit tha client rockin tha Pt IIOP protocol.
.LP
.LP
A \f2stub\fP be a cold-ass lil client\-side proxy fo' a remote object which is responsible fo' communicatin method invocations on remote objects ta tha server where tha actual remote object implementation resides fo' realz. A clientz reference ta a remote object, therefore, is straight-up a reference ta a local stub.
.LP
.LP
By default, \f3rmic\fP generates stub classes dat use tha 1.2 JRMP stub protocol version only, as if tha \f2\-v1.2\fP option had been specified. Y'all KNOW dat shit, muthafucka! (Note dat tha \f2\-vcompat\fP option was tha default up in releases prior ta 5.0.) Use tha \f2\-iiop\fP option ta generate stub n' tie classes fo' tha Pt IIOP protocol.
.LP
.LP
A stub implements only tha remote intercourses, not any local intercourses dat tha remote object also implements, n' you can put dat on yo' toast. Because a JRMP stub implements tha same ol' dirty set of remote intercourses as tha remote object itself, a cold-ass lil client can use tha Java programmin languagez built\-in operators fo' castin n' type checking. For Pt IIOP, tha \f2PortableRemoteObject.narrow\fP method must be used.
.LP
.SH "OPTIONS"
.LP
.RS 3
.TP 3
\-bootclasspath path 
Overrides location of bootstrap class filez 
.TP 3
\-classpath path 
Specifies tha path \f3rmic\fP uses ta look up classes. This option overrides tha default or tha CLASSPATH environment variable if it is set. Directories is separated by colons. Thus tha general format fo' \f2path\fP is: 
.nf
\f3
.fl
.:<your_path>
.fl
\fP
.fi
For example: 
.nf
\f3
.fl
.:/usr/local/java/classes
.fl
\fP
.fi
.TP 3
\-d directory 
Specifies tha root destination directory fo' tha generated class hierarchy. Yo ass can use dis option ta specify a thugged-out destination directory fo' tha stub, skeleton, n' tie files. For example, tha command 
.nf
\f3
.fl
% rmic \-d /java/classes foo.MyClass
.fl
\fP
.fi
would place tha stub n' skeleton classes derived from \f2MyClass\fP tha fuck into tha directory \f2/java/classes/foo\fP. If tha \f2\-d\fP option aint specified, tha default behavior be as if \f2"\-d\ ."\fP was specified: tha package hierarchy of tha target class is pimped up in tha current directory, n' stub/tie/skeleton filez is placed within dat shit. (Note dat up in some previous versionz of \f3rmic\fP, if \f2\-d\fP was not specified, then tha package hierarchy was \f2not\fP pimped, n' all of tha output filez was placed directly up in tha current directory.)
.br
\  
.TP 3
\-extdirs path 
Overrides location of installed extensions 
.TP 3
\-g 
Enablez generation of all debuggin shiznit, includin local variables. By default, only line number shiznit is generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
.TP 3
\-idl 
Causes \f2rmic\fP ta generate OMG IDL fo' tha classes specified n' any classes referenced. Y'all KNOW dat shit, muthafucka! IDL serves up a purely declarative, programmin language\-independent way of specifyin a objectz API. Da IDL is used as a justification fo' methodz n' data dat can be freestyled up in n' invoked from any language dat serves up CORBA bindings. This includes Java n' C++ among others. Right back up in yo muthafuckin ass. See tha 
.na
\f2Java Language ta IDL Mapping\fP @
.fi
http://www.omg.org/technology/documents/formal/java_language_mapping_to_omg_idl.htm (OMG) document fo' a cold-ass lil complete description.
.br
.br
When tha \f2\-idl\fP option is used, other options also include: 
.RS 3
.TP 3
\-always or \-alwaysgenerate 
Forces re\-generation even when existin stubs/ties/IDL is newer than tha input class. 
.TP 3
\-factory 
Uses factory keyword up in generated IDL. 
.TP 3
\-idlModule\  fromJavaPackage[.class]\  toIDLModule 
Specifies IDLEntitizzle package mapping. For example:\  \f2\-idlModule foo.bar my::real::idlmod\fP. 
.TP 3
\-idlFile\  fromJavaPackage[.class]\  toIDLFile 
Specifies IDLEntitizzle file mapping. For example:\  \f2\-idlFile test.pkg.X TEST16.idl\fP.\  
.RE
.TP 3
\-iiop 
Causes \f2rmic\fP ta generate Pt IIOP stub n' tie classes, rather than JRMP stub n' skeleton classes fo' realz. A stub class be a local proxy fo' a remote object n' is used by clients ta bust calls ta a server n' shit. Each remote intercourse requires a stub class, which implements dat remote intercourse fo' realz. A clientz reference ta a remote object is straight-up a reference ta a stub. Tie classes is used on tha server side ta process incomin calls, n' dispatch tha calls ta tha proper implementation class. Each implementation class requires a tie class.
.br
.br
Invokin \f2rmic\fP wit tha \f2\-iiop\fP generates stubs n' tizzles dat conform ta dis namin convention: 
.nf
\f3
.fl
_<implementationName>_stub.class
.fl
_<interfaceName>_tie.class
.fl
\fP
.fi
When tha \f2\-iiop\fP option is used, other options also include: 
.RS 3
.TP 3
\-always or \-alwaysgenerate 
Forces re\-generation even when existin stubs/ties/IDL is newer than tha input class. 
.TP 3
\-nolocalstubs 
Do not create stubs optimized fo' same\-process clients n' servers. 
.TP 3
\-noValueMethodz 
Must be used wit tha \f2\-idl\fP option. I aint talkin' bout chicken n' gravy biatch. Prevents addizzle of \f2valuetype\fP methodz n' initializers ta emitted IDL. These methodz n' initializers is optionizzle fo' \f2valuetype\fPs, n' is generated unless tha \f2\-noValueMethods\fP option is specified when rockin tha \f2\-idl\fP option. I aint talkin' bout chicken n' gravy biatch. 
.TP 3
\-poa 
Changes tha inheritizzle from \f2org.omg.CORBA_2_3.portable.ObjectImpl\fP ta \f2org.omg.PortableServer.Servant\fP. Da \f2PortableServer\fP module fo' tha 
.na
\f2Portable Object Adapter\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/guides/idl/POA.html (POA) defines tha natizzle \f2Servant\fP type. In tha Java programmin language, tha \f2Servant\fP type is mapped ta tha Java \f2org.omg.PortableServer.Servant\fP class. Well shiiiit, it serves as tha base class fo' all POA servant implementations n' serves up a fuckin shitload of methodz dat may be invoked by tha application programmer, as well as methodz which is invoked by tha POA itself n' may be overridden by tha user ta control aspectz of servant behavior. Shiiit, dis aint no joke. Based on tha OMG IDL ta Java Language Mappin Justification, CORBA V 2.3.1 ptc/00\-01\-08.pdf. 
.RE
.TP 3
\-J 
Used up in conjunction wit any \f2java\fP option, it passes tha option followin tha \f2\-J\fP (no spaces between tha \-J n' tha option) on ta tha \f2java\fP interpreter n' shit. 
.TP 3
\-keep or \-keepgenerated 
Retains tha generated \f2.java\fP source filez fo' tha stub, skeleton, and/or tie classes n' writes dem ta tha same directory as tha \f2.class\fP files. 
.TP 3
\-nowarn 
Turns off warnings. If used tha compila do not print up any warnings. 
.TP 3
\-nowrite 
Do not write compiled classes ta tha file system. 
.TP 3
\-vcompat 
Generates stub n' skeleton classes compatible wit both tha 1.1 n' 1.2 JRMP stub protocol versions. (This option was tha default up in releases prior ta 5.0.) Da generated stub classes will use tha 1.1 stub protocol version when loaded up in a JDK 1.1 virtual machine n' will use tha 1.2 stub protocol version when loaded tha fuck into a 1.2 (or later) virtual machine. Da generated skeleton classes will support both 1.1 n' 1.2 stub protocol versions. Da generated classes is relatively big-ass up in order ta support both modez of operation. I aint talkin' bout chicken n' gravy biatch. 
.TP 3
\-verbose 
Causes tha compila n' linker ta print up lyrics bout what tha fuck classes is bein compiled n' what tha fuck class filez is bein loaded. Y'all KNOW dat shit, muthafucka! 
.TP 3
\-v1.1 
Generates stub n' skeleton classes fo' tha 1.1 JRMP stub protocol version only. Note dat dis option is only useful fo' generatin stub classes dat is serialization\-compatible wit pre\-existing, statically\-deployed stub classes dat was generated by tha \f3rmic\fP tool from JDK 1.1 n' dat cannot be upgraded (and dynamic class loadin aint bein used). 
.TP 3
\-v1.2 
(default) Generates stub classes fo' tha 1.2 JRMP stub protocol version only. No skeleton classes is generated wit dis option cuz skeleton classes is not used wit tha 1.2 stub protocol version. I aint talkin' bout chicken n' gravy biatch. Da generated stub classes aint gonna work if they is loaded tha fuck into a JDK 1.1 virtual machine. 
.RE

.LP
.SH "ENVIRONMENT VARIABLES"
.LP
.RS 3
.TP 3
CLASSPATH 
Used ta provide tha system a path ta user\-defined classes. Directories is separated by colons. For example, 
.nf
\f3
.fl
.:/usr/local/java/classes
.fl
\fP
.fi
.RE

.LP
.SH "SEE ALSO"
.LP
.LP
java(1), javac(1), 
.na
\f2CLASSPATH\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/tools/index.html#classpath
.LP
 
