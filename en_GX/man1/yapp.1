.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "YAPP 1"
.TH YAPP 1 "2001-02-11" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
yapp \- A perl frontend ta tha Parse::Yapp module
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
yapp [options] \fIgrammar\fR[.yp]
.PP
yapp \fI\-V\fR
.PP
yapp \fI\-h\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
yapp be a gangbangin' frontend ta tha Parse::Yapp module, which lets you compile
Parse::Yapp grammar input filez tha fuck into Perl \s-1\fILALR\s0\fR\|(1) \s-1OO\s0 parser modules.
.SH "OPTIONS"
.IX Header "OPTIONS"
Options, az of todizzle, is all optionals :\-)
.IP "\fI\-v\fR" 4
.IX Item "-v"
Creates a gangbangin' file \fIgrammar\fR.output describin yo' parser n' shit. Well shiiiit, it will
show you a summary of conflicts, rules, tha \s-1DFA \s0(Deterministic
Finite Automaton) states n' overall usage of tha parser.
.IP "\fI\-s\fR" 4
.IX Item "-s"
Smoke a standalone module up in which tha driver is included.
Note dat if you have mo' than one parser module called from
a program, ta have it standalone, you need dis option only
for one of yo' parser module.
.IP "\fI\-n\fR" 4
.IX Item "-n"
Disable source file line numberin embedded up in yo' parser module.
I don't give a fuck why one should need it yo, but itz there.
.IP "\fI\-m module\fR" 4
.IX Item "-m module"
Gives yo' parser module tha package name (or name space or module name or
class name or whatever-you-call-it) of \fImodule\fR.  It defaults ta \fIgrammar\fR
.IP "\fI\-o outfile\fR" 4
.IX Item "-o outfile"
Da compiled output file is ghon be named \fIoutfile\fR fo' yo' parser module.
It defaults ta \fIgrammar\fR.pm or, if you specified tha option
\&\fI\-m A::Module::Name\fR (see below), ta \fIName.pm\fR.
.IP "\fI\-t filename\fR" 4
.IX Item "-t filename"
Da \fI\-t filename\fR option allows you ta specify a gangbangin' file which should be 
used as template fo' generatin tha parser output.  Da default is ta 
use tha internal template defined up in \fIParse::Yapp::Output.pm\fR.
For how tha fuck ta write yo' own template n' which substitutions is available,
have a look ta tha module \fIParse::Yapp::Output.pm\fR : it should be obvious.
.IP "\fI\-b shebang\fR" 4
.IX Item "-b shebang"
If you work on systems dat KNOW so called \fIshebangs\fR, n' your
generated parser is directly a executable script, you can specifie one
with tha \fI\-b\fR option, ie:
.Sp
.Vb 1
\&    yapp \-b \*(Aq/usr/local/bin/perl \-w\*(Aq \-o myscript.pl myscript.yp
.Ve
.Sp
This will output a gangbangin' file called \fImyscript.pl\fR whose straight-up first line is:
.Sp
.Vb 1
\&    #!/usr/local/bin/perl \-w
.Ve
.Sp
Da argument is mandatory yo, but if you specify a empty string, tha value
of \fI\f(CI$Config\fI{perlpath}\fR is ghon be used instead.
.IP "\fIgrammar\fR" 4
.IX Item "grammar"
Da input grammar file. If no suffix is given, n' tha file do not exists,
an attempt ta open tha file wit a suffix of  \fI.yp\fR is tried before exiting.
.IP "\fI\-V\fR" 4
.IX Item "-V"
Display current version of Parse::Yapp n' gracefully exits.
.IP "\fI\-h\fR" 4
.IX Item "-h"
Display tha usage screen.
.SH "BUGS"
.IX Header "BUGS"
None known now :\-)
.SH "AUTHOR"
.IX Header "AUTHOR"
Francois Desarmenien <francois@fdesar.net>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
(c) Copyright 1998\-1999 Francois Desarmenien, all muthafuckin rights reserved.
See \fIParse::Yapp\fR\|(3) fo' legal use n' distribution rights
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIParse::Yapp\fR\|(3) \fIPerl\fR\|(1) \fIyacc\fR\|(1) \fIbison\fR\|(1)
