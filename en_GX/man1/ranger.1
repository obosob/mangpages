.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RANGER 1"
.TH RANGER 1 "ranger-1.6.1" "12/11/2014" "ranger manual"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
ranger \- visual file manager
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBranger\fR [\fB\-\-version\fR] [\fB\-\-help\fR] [\fB\-\-debug\fR] [\fB\-\-clean\fR] 
[\fB\-\-confdir\fR=\fIdirectory\fR] [\fB\-\-copy\-config\fR=\fIwhich\fR]
[\fB\-\-choosefile\fR=\fItarget\fR] [\fB\-\-choosefiles\fR=\fItarget\fR]
[\fB\-\-choosedir\fR=\fItarget\fR] [\fB\-\-selectfile\fR=\fIfilepath\fR]
[\fB\-\-list\-unused\-keys\fR] [\fB\-\-list\-tagged\-files\fR=\fItag\fR]
[\fB\-\-profile\fR] [\fB\-\-cmd\fR=\fIcommand\fR] [\fIpath\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ranger be a cold-ass lil console file manager wit \s-1VI\s0 key bindings.
.SH "RESOURCES"
.IX Header "RESOURCES"
\&\fIThis manual\fR gotz nuff instructions on how tha fuck ta use n' configure ranger.
.PP
\&\fIInside ranger\fR, you can press \fI1?\fR fo' a list of key bindings, \fI2?\fR for
commandz n' \fI3?\fR fo' settings.
.PP
Da \fI\s-1README\s0\fR gotz nuff install instructions.
.PP
Da file \fIdoc/HACKING\fR gotz nuff guidelines fo' code modification.
.PP
Da directory \fIdoc/configs\fR gotz nuff configuration files.  They is usually
installed ta \fI/usr/lib/python*/site\-packages/ranger/config\fR n' can be
obtained wit rangerz \-\-copy\-config option.
.PP
Da playa page of \fIrifle\fR\|(1) raps bout tha functionz of tha file opener
.PP
Da section \fI\s-1LINKS\s0\fR of dis playa page gotz nuff further resources.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-d\fR, \fB\-\-debug\fR" 14
.IX Item "-d, --debug"
Activate tha debug mode: Whenever a error occurs, ranger will exit n' print a
full traceback.  Da default behavior is ta merely print tha name of the
exception up in tha statusbar/log n' try ta keep hustlin.
.IP "\fB\-c\fR, \fB\-\-clean\fR" 14
.IX Item "-c, --clean"
Activate tha clean mode:  ranger aint gonna access or create any configuration
filez nor will it leave any traces on yo' system.  This is useful when your
configuration is broken, when you wanna avoid clutter, etc.
.IP "\fB\-r\fR \fIdir\fR, \fB\-\-confdir\fR=\fIdir\fR" 14
.IX Item "-r dir, --confdir=dir"
Change tha configuration directory of ranger from ~/.config/ranger ta \*(L"dir\*(R".
.IP "\fB\-\-copy\-config\fR=\fIfile\fR" 14
.IX Item "--copy-config=file"
Smoke copiez of tha default configuration filez up in yo' local configuration
directory.  Existin ones aint gonna be overwritten. I aint talkin' bout chicken n' gravy biatch.  Possible joints: \fIall\fR,
\&\fIcommands\fR, \fIrc\fR, \fIrifle\fR, \fIscope\fR.
.IP "\fB\-\-choosefile\fR=\fItargetfile\fR" 14
.IX Item "--choosefile=targetfile"
Allows you ta pick a gangbangin' file wit ranger n' shit.  This chizzlez tha behavior so dat when
you open a gangbangin' file, ranger will exit n' write tha absolute path of dat file into
\&\fItargetfile\fR.
.IP "\fB\-\-choosefiles\fR=\fItargetfile\fR" 14
.IX Item "--choosefiles=targetfile"
Allows you ta pick multiple filez wit ranger n' shit.  This chizzlez tha behavior so
that when you open a gangbangin' file, ranger will exit n' write tha absolute pathz of all
selected filez tha fuck into \fItargetfile\fR, addin one newline afta each filename.
.IP "\fB\-\-choosedir\fR=\fItargetfile\fR" 14
.IX Item "--choosedir=targetfile"
Allows you ta pick a gangbangin' finger-lickin' directory wit ranger n' shit.  When you exit ranger, it will
write tha last hit up directory tha fuck into \fItargetfile\fR.
.IP "\fB\-\-selectfile\fR=\fItargetfile\fR" 14
.IX Item "--selectfile=targetfile"
Open ranger wit \fItargetfile\fR selected.
.IP "\fB\-\-list\-unused\-keys\fR" 14
.IX Item "--list-unused-keys"
List common keys which is not bound ta any action up in tha \*(L"browser\*(R" context.
This list aint complete, you can bind any key dat is supported by curses:
use tha key code returned by \f(CW\*(C`getch()\*(C'\fR.
.IP "\fB\-\-list\-tagged\-files\fR=\fItag\fR" 14
.IX Item "--list-tagged-files=tag"
List all filez which is tagged wit tha given tag.  Note: Tags is single
characters.  Da default tag is \*(L"*\*(R"
.IP "\fB\-\-profile\fR" 14
.IX Item "--profile"
Print statistics of \s-1CPU\s0 usage on exit.
.IP "\fB\-\-cmd\fR=\fIcommand\fR" 14
.IX Item "--cmd=command"
Execute tha command afta tha configuration has been read. Y'all KNOW dat shit, muthafucka!  Use dis option
multiple times ta run multiple commands.
.IP "\fB\-\-version\fR" 14
.IX Item "--version"
Print tha version n' exit.
.IP "\fB\-h\fR, \fB\-\-help\fR" 14
.IX Item "-h, --help"
Print a list of options n' exit.
.SH "CONCEPTS"
.IX Header "CONCEPTS"
This part explains how tha fuck certain partz of ranger work n' how tha fuck they can be used
efficiently.
.SS "\s-1TAGS\s0"
.IX Subsection "TAGS"
Tags is single charactas which is displayed left of a gangbangin' filename.  Yo ass can use
tags however you want.  Press \*(L"t\*(R" ta toggle tags n' \*(L"ut\*(R" ta remove any tags of
the selection. I aint talkin' bout chicken n' gravy biatch. Da default tag be a Asterisk (\*(L"*\*(R") yo, but you can use any tag by
typin \fI"<tagname>\fR.
.SS "\s-1PREVIEWS\s0"
.IX Subsection "PREVIEWS"
By default, only text filez is peepshowed yo, but you can enable external peepshow
scripts by settin tha option \f(CW\*(C`use_preview_script\*(C'\fR n' \f(CW\*(C`preview_files\*(C'\fR ta true.
.PP
This default script is \fI~/.config/ranger/scope.sh\fR. Well shiiiit, it gotz nuff more
documentation n' calls ta tha programs \fIlynx\fR n' \fIelinks\fR fo' html,
\&\fIhighlight\fR fo' text/code, \fIimg2txt\fR fo' images, \fIatool\fR fo' archives,
\&\fIpdftotext\fR fo' PDFs n' \fImediainfo\fR fo' vizzle n' audio files.
.PP
Install these programs (just tha ones you need) n' scope.sh will automatically
use em.
.PP
Independently of tha peepshow script, there be a gangbangin' feature ta peepshow images
by drawin dem directly tha fuck into tha terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  This do not work over ssh,
requires certain terminals (tested on \*(L"xterm\*(R" n' \*(L"urxvt\*(R") n' is incompatible
with tmux, although it works wit screen.
.PP
To enable dis feature, install tha program \*(L"w3m\*(R" n' set tha option
\&\f(CW\*(C`preview_images\*(C'\fR ta true.
.SS "\s-1SELECTION\s0"
.IX Subsection "SELECTION"
Da \fIselection\fR is defined as \*(L"All marked filez \s-1IF\s0 \s-1THERE\s0 \s-1ARE\s0 \s-1ANY\s0, otherwise
the current file.\*(R"  Be aware of dis when rockin tha :delete command, which
deletes all filez up in tha selection.
.PP
Yo ass can mark filez by pressin <Space>, v, etc.  A yellow \fBMrk\fR symbol at the
bottom right indicates dat there be marked filez up in dis directory.
.SS "\s-1MACROS\s0"
.IX Subsection "MACROS"
Macros can be used up in commandz ta abbreviate thangs.
.PP
.Vb 5
\& %f   tha highlighted file
\& %d   tha path of tha current directory
\& %s   tha selected filez up in tha current directory.
\& %t   all tagged filez up in tha current directory
\& %c   tha full pathz of tha currently copied/cut files
.Ve
.PP
Da macros \f(CW%f\fR, \f(CW%d\fR n' \f(CW%s\fR also have upper case variants, \f(CW%F\fR, \f(CW%D\fR n' \f(CW%S\fR,
which refer ta tha next tab.  To refer ta specific tabs, add a number in
between. I aint talkin' bout chicken n' gravy biatch.  (%7s = selection of tha seventh tab.)
.PP
\&\f(CW%c\fR is tha only macro which ranges outta tha current directory. Right back up in yo muthafuckin ass. So you may
\&\*(L"abuse\*(R" tha copyin function fo' other purposes, like diffin two filez which
are up in different directories:
.PP
.Vb 2
\& Yank tha file A (type yy), move ta tha file B, then type
\& @diff %c %f
.Ve
.PP
Macros fo' file paths is generally shell-escaped so they can be used up in the
\&\f(CW\*(C`shell\*(C'\fR command.
.PP
Additionally, if you create a key bindin dat uses <any>, a special statement
which accepts any key, then tha macro \f(CW%any\fR (or \f(CW%any0\fR, \f(CW%any1\fR, \f(CW%any2\fR, ...) can be
used up in tha command ta git tha key dat was pressed.
.SS "\s-1BOOKMARKS\s0"
.IX Subsection "BOOKMARKS"
Type \fBm<key>\fR ta bookmark tha current directory. Yo ass can re-enta this
directory by typin \fB`<key>\fR. <key> can be any letta or digit.  Unlike vim,
both lowercase n' uppercase bookmarks is persistent.
.PP
Each time you jump ta a funky-ass bookmark, tha special bookmark at key ` is ghon be set
to tha last directory. Right back up in yo muthafuckin ass. So typin \*(L"``\*(R" gets you back ta where you was before.
.PP
Bookmarks is selectable when tabbin up in tha :cd command.
.PP
Note: Da bookmarks ' (Apostrophe) n' ` (Backtick) is tha same.
.SS "\s-1RIFLE\s0"
.IX Subsection "RIFLE"
Rifle is tha file opener of ranger n' shit.  It can be used as a standalone program or
a python module.  It be located at \fIranger/ext/rifle.py\fR.  In contrast to
other, mo' simple file openers, rifle can automatically find installed
programs so it can be used effectively outta tha box on a variety of systems.
.PP
It aint nuthin but configured up in \fIrifle.conf\fR all up in a list of conditions n' commands.
For each line tha conditions is checked n' if they is met, tha respective
command is taken tha fuck into consideration. I aint talkin' bout chicken n' gravy biatch.  By default, simply tha straight-up original gangsta matching
rule is used. Y'all KNOW dat shit, muthafucka!  In ranger, you can list n' chizzle rulez by typin \*(L"r\*(R" or simply
by typin \*(L"<rulenumber><enter>\*(R".  If you use rifle standalone, you can list all
rulez wit tha \*(L"\-l\*(R" option n' pick a rule wit \*(L"\-p <number>\*(R".
.PP
Da rules, along wit further documentation, is contained in
\&\fIranger/config/rifle.conf\fR.
.SS "\s-1FLAGS\s0"
.IX Subsection "FLAGS"
Flags hit you wit a way ta modify tha behavior of tha spawned process.  They are
used up in tha commandz \f(CW\*(C`:open_with\*(C'\fR (key \*(L"r\*(R") n' \f(CW\*(C`:shell\*(C'\fR (key \*(L"!\*(R").
.PP
.Vb 4
\& f   Fork tha process.  (Run up in background)
\& c   Run tha current file only, instead of tha selection
\& r   Run application wit root privilege (requires sudo)
\& t   Run application up in a freshly smoked up terminal window
.Ve
.PP
There is some additionizzle flags dat can currently be used only up in tha \f(CW\*(C`shell\*(C'\fR
command: (for example \f(CW\*(C`:shell \-w df\*(C'\fR)
.PP
.Vb 3
\& p   Redirect output ta tha pager
\& s   Silent mode.  Output is ghon be discarded.
\& w   Wait fo' a Enter\-press when tha process is done
.Ve
.PP
By default, all tha flags is off unless specified otherwise up in the
\&\fIrifle.conf\fR configuration file.  Yo ass can specify as nuff flags as you want.
An uppercase flag negates tha effect: \*(L"ffcccFsf\*(R" is equivalent ta \*(L"cs\*(R".
.PP
Da terminal program name fo' tha \*(L"t\*(R" flag is taken from tha environment
variable \f(CW$TERMCMD\fR.  If it don't exist, it tries ta extract it from \f(CW$TERM\fR and
uses \*(L"xterm\*(R" as a gangbangin' fallback if dat fails.
.PP
Examples: \f(CW\*(C`:open_with c\*(C'\fR will open tha file dat you currently point at, even
if you have selected other files.  \f(CW\*(C`:shell \-w df\*(C'\fR will run \*(L"df\*(R" n' wait for
you ta press Enta before switchin back ta ranger.
.SS "\s-1PLUGINS\s0"
.IX Subsection "PLUGINS"
rangerz plugin system consistz of python filez which is located in
\&\fI~/.config/ranger/plugins/\fR n' is imported up in alphabetical order when
startin ranger n' shit.  A plugin chizzlez rangers behavior by overwritin or extending
a function dat ranger uses.  This allows you ta chizzle pretty much every last muthafuckin part
of ranger yo, but there is no guarantee dat thangs will continue ta work in
future versions as tha source code evolves.
.PP
There is some hooks dat is specifically made fo' tha use up in plugins.  They
are functions dat start wit hook_ n' can be found all up in tha code.
.PP
.Vb 1
\& grep \*(Aqdef hook_\*(Aq \-r /path/to/rangers/source
.Ve
.PP
Also try:
.PP
.Vb 1
\& pydoc ranger.api
.Ve
.PP
Note dat you should \s-1NOT\s0 simply overwrite a gangbangin' function unless you know what
yo ass is bustin.  Instead, save tha existin function n' call it from yo' new
one.  This way, multiple plugins can use tha same hook.  There is several
sample plugins up in tha \fI/usr/share/doc/ranger/examples/\fR directory, includin a
hello-world plugin dat raps bout dis procedure.
.SH "KEY BINDINGS"
.IX Header "KEY BINDINGS"
Key bindings is defined up in tha file \fIranger/config/rc.conf\fR.  Peep this
file fo' a list of all key bindings.  Yo ass can copy it ta yo' local
configuration directory wit tha \-\-copy\-config=rc option.
.PP
Many key bindings take a additionizzle numeric argument.  Type \fI5j\fR ta move
down 5 lines, \fI2l\fR ta open a gangbangin' file up in mode 2, \fI10<Space>\fR ta mark 10 files.
.PP
This list gotz nuff da most thugged-out useful bindings:
.SS "\s-1MAIN\s0 \s-1BINDINGS\s0"
.IX Subsection "MAIN BINDINGS"
.IP "h, j, k, l" 14
.IX Item "h, j, k, l"
Move left, down, up or right
.IP "^D or J, ^U or K" 14
.IX Item "^D or J, ^U or K"
Move a half page down, up
.IP "H, L" 14
.IX Item "H, L"
Move back n' forward up in tha history
.IP "gg" 14
.IX Item "gg"
Move ta tha top
.IP "G" 14
.IX Item "G"
Move ta tha bottom
.IP "^R" 14
.IX Item "^R"
Reload every last muthafuckin thang
.IP "^L" 14
.IX Item "^L"
Redraw tha screen
.IP "i" 14
.IX Item "i"
Display tha current file up in a funky-ass bigger window.
.IP "E" 14
.IX Item "E"
Edit tha current file up in \f(CW$EDITOR\fR (\*(L"nano\*(R" by default)
.IP "S" 14
.IX Item "S"
Open a gangbangin' finger-lickin' dirty-ass shell up in tha current directory
.IP "?" 14
Opens dis playa page
.IP "<octal>=, +<who><what>, \-<who><what>" 14
.IX Item "<octal>=, +<who><what>, -<who><what>"
Change tha permissionz of tha selection. I aint talkin' bout chicken n' gravy biatch.  For example, \f(CW\*(C`777=\*(C'\fR is equivalent to
\&\f(CW\*(C`chmod 777 %s\*(C'\fR, \f(CW\*(C`+ar\*(C'\fR do \f(CW\*(C`chmod a+r %s\*(C'\fR, \f(CW\*(C`\-ow\*(C'\fR do \f(CW\*(C`chmod o\-w %s\*(C'\fR etc.
.IP "yy" 14
.IX Item "yy"
Copy (yank) tha selection, like pressin Ctrl+C up in modern \s-1GUI\s0 programs.
.IP "dd" 14
.IX Item "dd"
Cut tha selection, like pressin Ctrl+X up in modern \s-1GUI\s0 programs.
.IP "pp" 14
.IX Item "pp"
Paste tha filez which was previously copied or cut, like pressin Ctrl+V in
modern \s-1GUI\s0 programs.
.IP "po" 14
.IX Item "po"
Paste tha copied/cut files, overwritin existin files.
.IP "m\fIX\fR" 14
.IX Item "mX"
Smoke a funky-ass bookmark wit tha name \fIX\fR
.IP "`\fIX\fR" 14
.IX Item "`X"
Move ta tha bookmark wit tha name \fIX\fR
.IP "n" 14
.IX Item "n"
Find tha next file.  By default, dis gets you ta tha newest file up in the
directory yo, but if you search suttin' rockin tha keys /, cm, ct, ..., it will
get you ta tha next found entry.
.IP "N" 14
.IX Item "N"
Find tha previous file.
.IP "o\fIX\fR" 14
.IX Item "oX"
Change tha sort method (like up in mutt)
.IP "z\fIX\fR" 14
.IX Item "zX"
Change settings.  See tha settings section fo' a list of settings n' their
hotkey.
.IP "u\fI?\fR" 14
.IX Item "u?"
Universal undo-key.  Dependin on tha key dat you press afta \*(L"u\*(R", it either
restores closed tabs (uq), removes tags (ut), clears tha copy/cut buffer (ud),
starts tha reversed visual mode (uV) or clears tha selection (uv).
.IP "f" 14
.IX Item "f"
Quickly navigate by enterin a part of tha filename.
.IP "Space" 14
.IX Item "Space"
Mark a gangbangin' file.
.IP "v" 14
.IX Item "v"
Toggle tha mark-statuz of all files
.IP "V" 14
.IX Item "V"
Starts tha visual mode, which selects all filez between tha startin point and
the cursor until you press \s-1ESC\s0.  To unselect filez up in tha same way, use \*(L"uV\*(R".
.IP "/" 14
Search fo' filez up in tha current directory.
.IP ":" 14
Open tha console.
.IP "Alt\-\fIN\fR" 14
.IX Item "Alt-N"
Open a tab. N has ta be a number from 0 ta 9. If tha tab don't exist yet, it
will be pimped.
.IP "gn, ^N" 14
.IX Item "gn, ^N"
Smoke a freshly smoked up tab.
.IP "gt, gT" 14
.IX Item "gt, gT"
Go ta tha next or previous tab. Yo ass can also use \s-1TAB\s0 n' \s-1SHIFT+TAB\s0 instead.
.IP "gc, ^W" 14
.IX Item "gc, ^W"
Close tha current tab.  Da last tab cannot be closed dis way.
.SS "READLINE-LIKE \s-1BINDINGS\s0 \s-1IN\s0 \s-1THE\s0 \s-1CONSOLE\s0"
.IX Subsection "READLINE-LIKE BINDINGS IN THE CONSOLE"
.IP "^B, ^F" 14
.IX Item "^B, ^F"
Move left n' right (B fo' back, F fo' forward)
.IP "^P, ^N" 14
.IX Item "^P, ^N"
Move up n' down (P fo' previous, N fo' Next)
.IP "^A, ^E" 14
.IX Item "^A, ^E"
Move ta tha start or ta tha end
.IP "^D" 14
.IX Item "^D"
Delete tha current character.
.IP "^H" 14
.IX Item "^H"
Backspace.
.SH "MOUSE BUTTONS"
.IX Header "MOUSE BUTTONS"
.IP "Left Mouse Button" 4
.IX Item "Left Mouse Button"
Click on suttin' n' you gonna move there, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  To run a gangbangin' file, \*(L"enter\*(R" it, like a
directory, by clickin on tha peepshow.
.IP "Right Mouse Button" 4
.IX Item "Right Mouse Button"
Enta a gangbangin' finger-lickin' directory or run a gangbangin' file.
.IP "Scroll Wheel" 4
.IX Item "Scroll Wheel"
Scrolls up or down. I aint talkin' bout chicken n' gravy biatch.  Yo ass can point all up in tha column of tha parent directory while
scrollin ta switch directories.
.SH "SETTINGS"
.IX Header "SETTINGS"
This section lists all built-in settingz of ranger n' shit.  Da valid types fo' the
value is up in [brackets].  Da hotkey ta toggle tha settin is up in <brokets>, if
a hotkey exists.
.PP
Settings can be chizzled up in tha file \fI~/.config/ranger/rc.conf\fR or on the
fly wit tha command \fB:set option value\fR.  Examples:
.PP
.Vb 2
\& set column_ratios 1,2,3
\& set show_hidden true
.Ve
.PP
Da different typez of settings n' a example fo' each type:
.PP
.Vb 7
\& settin type   | example joints
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& bool           | true, false
\& integer        | 1, 23, 1337
\& strang         | foo, wassup ghetto
\& list           | 1,2,3,4
\& none           | none
.Ve
.PP
Yo ass can view a list of all settings n' they current joints by pressin \*(L"3?\*(R"
in ranger.
.IP "autosave_bookmarks [bool]" 4
.IX Item "autosave_bookmarks [bool]"
Save bookmarks (used wit mX n' `X) instantly?  This helps ta synchronize
bookmarks between multiple ranger instances but leadz ta *slight* performance
loss.  When false, bookmarks is saved when ranger is exited.
.IP "autoupdate_cumulative_size [bool]" 4
.IX Item "autoupdate_cumulative_size [bool]"
Yo ass can display tha \*(L"real\*(R" cumulatizzle size of directories by rockin tha command
:get_cumulative_size or typin \*(L"dc\*(R".  Da size is high-rollin' ta calculate and
will not be updated automatically.  Yo ass can chizzle ta update it automatically
though by turnin on dis option.
.IP "collapse_preview [bool] <zc>" 4
.IX Item "collapse_preview [bool] <zc>"
When no peepshow is visible, should tha last column be squeezed ta make use of
the whitespace?
.IP "colorscheme [string]" 4
.IX Item "colorscheme [string]"
Which colorscheme ta use?  These colorschemes is available by default:
\&\fBdefault\fR, \fBjungle\fR, \fBsnow\fR.  Snow be a monochrome scheme, jungle replaces
blue directories wit chronic ones fo' betta visibilitizzle on certain terminals.
.IP "column_ratios [list]" 4
.IX Item "column_ratios [list]"
How tha fuck nuff columns is there, n' what tha fuck is they relatizzle widths?  For example, a
value of 1,1,1 would mean 3 evenly sized columns. 1,1,1,1,4 means 5 columns
with tha peepshow column bein as big-ass as tha other columns combined.
.IP "confirm_on_delete [string]" 4
.IX Item "confirm_on_delete [string]"
Ask fo' a cold-ass lil confirmation when hustlin tha \*(L"delete\*(R" command?  Valid joints are
\&\*(L"always\*(R" (default), \*(L"never\*(R", \*(L"multiple\*(R". With \*(L"multiple\*(R", ranger will ask only
if you delete multiple filez at once.
.IP "dirname_in_tabs [bool]" 4
.IX Item "dirname_in_tabs [bool]"
Display tha directory name up in tabs?
.IP "display_size_in_main_column [bool]" 4
.IX Item "display_size_in_main_column [bool]"
Display tha file size up in tha main column?
.IP "display_size_in_status_bar [bool]" 4
.IX Item "display_size_in_status_bar [bool]"
Display tha file size up in tha status bar?
.IP "display_tags_in_all_columns [bool]" 4
.IX Item "display_tags_in_all_columns [bool]"
Display tags up in all columns?
.IP "draw_bordaz [bool]" 4
.IX Item "draw_bordaz [bool]"
Draw bordaz round columns?
.IP "draw_progress_bar_in_statusbar [bool]" 4
.IX Item "draw_progress_bar_in_statusbar [bool]"
Draw a progress bar up in tha status bar which displays tha average state of all
currently hustlin tasks which support progress bars?
.IP "flushinput [bool] <zi>" 4
.IX Item "flushinput [bool] <zi>"
Flush tha input afta each key hit?  One advantage is dat when scrollin down
with \*(L"j\*(R", ranger stops scrollin instantly when you release tha key.  One
disadvantage is dat when you type commandz blindly, some keys might git lost.
.IP "hidden_filta [string]" 4
.IX Item "hidden_filta [string]"
A regular expression pattern fo' filez which should be hidden. I aint talkin' bout chicken n' gravy biatch.  For example,
this pattern will hide all filez dat start wit a thugged-out dot or end wit a tilde.
.Sp
.Vb 1
\& set hidden_filta ^\e.|~$
.Ve
.IP "max_console_history_size [integer, none]" 4
.IX Item "max_console_history_size [integer, none]"
How tha fuck nuff console commandz should be kept up in history?  \*(L"none\*(R" will disable the
limit.
.IP "max_history_size [integer, none]" 4
.IX Item "max_history_size [integer, none]"
How tha fuck nuff directory chizzlez should be kept up in history?
.IP "mouse_enabled [bool] <zm>" 4
.IX Item "mouse_enabled [bool] <zm>"
Enable mouse input?
.IP "padding_right [bool]" 4
.IX Item "padding_right [bool]"
When collapse_preview is on n' there is no peepshow, should there remain a
lil paddin on tha right?  This allows you ta click tha fuck into dat space ta run
the file.
.IP "preview_directories [bool] <zP>" 4
.IX Item "preview_directories [bool] <zP>"
Preview directories up in tha peepshow column?
.IP "preview_filez [bool] <zp>" 4
.IX Item "preview_filez [bool] <zp>"
Preview filez up in tha peepshow column?
.IP "preview_images [bool]" 4
.IX Item "preview_images [bool]"
Draw images inside tha console wit tha external program w3mimgpreview?
.IP "preview_script [string, none]" 4
.IX Item "preview_script [string, none]"
Which script should handle generatin peepshows?  If tha file don't exist, or
use_preview_script is off, ranger will handle peepshows itself by just printing
the content.
.IP "save_console_history [bool]" 4
.IX Item "save_console_history [bool]"
Should tha console history be saved on exit?  If disabled, tha console history
is reset when you restart ranger.
.IP "scroll_offset [integer]" 4
.IX Item "scroll_offset [integer]"
Try ta keep dis much space between tha top/bottom border when scrolling.
.IP "shorten_title [integer]" 4
.IX Item "shorten_title [integer]"
Trim tha title of tha window if it gets long?  Da number defines how tha fuck many
directories is displayed at once fo' realz. A value of 0 turns off dis feature.
.IP "show_cursor [bool]" 4
.IX Item "show_cursor [bool]"
Always show tha terminal cursor?
.IP "show_hidden_bookmarks [bool]" 4
.IX Item "show_hidden_bookmarks [bool]"
Show dotfilez up in tha bookmark peepshow window? (Type ')
.IP "show_hidden [bool] <zh>, <^H>" 4
.IX Item "show_hidden [bool] <zh>, <^H>"
Show hidden files?
.IP "sort_case_insensitizzle [bool] <zc>" 4
.IX Item "sort_case_insensitizzle [bool] <zc>"
Sort case-insensitively?  If true, \*(L"a\*(R" is ghon be listed before \*(L"B\*(R" even though
its \s-1ASCII\s0 value is higher.
.IP "sort_directories_first [bool] <zd>" 4
.IX Item "sort_directories_first [bool] <zd>"
Sort directories first?
.IP "sort_reverse [bool] <or>" 4
.IX Item "sort_reverse [bool] <or>"
Reverse tha order of files?
.IP "sort [string] <oa>, <ob>, <oc>, <om>, <on>, <ot>, <os>" 4
.IX Item "sort [string] <oa>, <ob>, <oc>, <om>, <on>, <ot>, <os>"
Which sortin mechanizzle should be used?  Chizzle one of \fBatime\fR, \fBbasename\fR,
\&\fBctime\fR, \fBmtime\fR, \fBnatural\fR, \fBtype\fR, \fBsize\fR
.Sp
Note: Yo ass can reverse tha order by typin a uppercase second letta up in tha key
combination, e.g. \*(L"oN\*(R" ta sort from Z ta A.
.IP "status_bar_on_top [bool]" 4
.IX Item "status_bar_on_top [bool]"
Put tha status bar all up in tha top of tha window?
.IP "tilde_in_titlebar [bool]" 4
.IX Item "tilde_in_titlebar [bool]"
Abbreviate \f(CW$HOME\fR wit ~ up in tha title bar (first line) of ranger?
.IP "unicode_ellipsis [bool]" 4
.IX Item "unicode_ellipsis [bool]"
Use a unicode \*(L"...\*(R" characta instead of \*(L"~\*(R" ta mark cut-off filenames?
.IP "update_title [bool]" 4
.IX Item "update_title [bool]"
Set a window title?
.IP "update_tmux_title [bool]" 4
.IX Item "update_tmux_title [bool]"
Set tha title ta \*(L"ranger\*(R" up in tha tmux program?
.IP "use_preview_script [bool] <zv>" 4
.IX Item "use_preview_script [bool] <zv>"
Use tha peepshow script defined up in tha settin \fIpreview_script\fR?
.IP "vcs_aware [bool]" 4
.IX Item "vcs_aware [bool]"
Gather n' display data bout version control systems. Right back up in yo muthafuckin ass. Supported vcs: git, hg.
.IP "vcs_backend_git, vcs_backend_hg, vcs_backend_bzr [string]" 4
.IX Item "vcs_backend_git, vcs_backend_hg, vcs_backend_bzr [string]"
Sets tha state fo' tha version control backend yo, but it ain't no stoppin cause I be still poppin'. Da possible joints are:
.Sp
.Vb 3
\& disabled   don\*(Aqt display any shiznit.
\& local      display only local state.
\& enabled    display both, local n' remote state. May be slow fo' hg n' bzr.
.Ve
.IP "xterm_alt_key [bool]" 4
.IX Item "xterm_alt_key [bool]"
Enable dis if key combinations wit tha Alt Key don't work fo' yo thugged-out ass.
(Especially on xterm)
.SH "COMMANDS"
.IX Header "COMMANDS"
Yo ass can enta tha commandz up in tha console which is opened by pressin \*(L":\*(R".
.PP
Yo ass can always git a list of tha currently existin commandz by typin \*(L"2?\*(R" in
ranger n' shit.  For yo' convenience, dis be a list of tha \*(L"public\*(R" commandz includin they parameters, excludin descriptions:
.PP
.Vb 10
\& alias [newcommand] [oldcommand]
\& bulkrename
\& cd [directory]
\& chain command1[; command2[; command3...]]
\& chmod octal_number
\& cmap key command
\& console [\-pSTARTPOSITION] command
\& copycmap key newkey [newkey2...]
\& copymap key newkey [newkey2...]
\& copypmap key newkey [newkey2...]
\& copytmap key newkey [newkey2...]
\& cunmap keys...
\& delete
\& edit [filename]
\& eval [\-q] python_code
\& filta [string]
\& find pattern
\& grep pattern
\& load_copy_buffer
\& map key command
\& mark pattern
\& mark_tag [tags]
\& mkdir dirname
\& open_with [application] [flags] [mode]
\& pmap key command
\& punmap keys...
\& quit
\& quit!
\& relink newpath
\& rename newname
\& save_copy_buffer
\& scout [\-FLAGS] pattern
\& search pattern
\& search_inc pattern
\& set option value
\& setlocal [path=<path>] option value
\& shell [\-FLAGS] command
\& terminal
\& tmap key command
\& bust a nut on filename
\& travel pattern
\& tunmap keys...
\& unmap keys...
\& unmark pattern
\& unmark_tag [tags]
.Ve
.PP
There is additionizzle commandz which is directly translated ta python
functions, one fo' every last muthafuckin method up in tha ranger.core.actions.Actions class.
They is not documented here, since they is mostly fo' key bindings, not ta be
typed up in by a user n' shit.  Read tha source if yo ass is horny bout em.
.PP
These is tha hood commandz includin they descriptions:
.IP "alias [\fInewcommand\fR] [\fIoldcommand\fR]" 2
.IX Item "alias [newcommand] [oldcommand]"
Copies tha oldcommand as newcommand.
.IP "bulkrename" 2
.IX Item "bulkrename"
This command opens a list of selected filez up in a external editor. Shiiit, dis aint no joke.  Afta you
edit n' save tha file, it will generate a gangbangin' finger-lickin' dirty-ass shell script which do bulk
renamin accordin ta tha chizzlez you did up in tha file.
.Sp
This shell script is opened up in a editor fo' you ta review.  Afta you close
it, it is ghon be executed.
.IP "cd [\fIdirectory\fR]" 2
.IX Item "cd [directory]"
Da cd command chizzlez tha directory.  Da command \f(CW\*(C`:cd \-\*(C'\fR is equivalent to
typin ``.
.IP "chain \fIcommand1\fR[; \fIcommand2\fR[; \fIcommand3\fR...]]" 2
.IX Item "chain command1[; command2[; command3...]]"
Combines multiple commandz tha fuck into one, separated by semicolons.
.IP "chmod \fIoctal_number\fR" 2
.IX Item "chmod octal_number"
Sets tha permissionz of tha selection ta tha octal number.
.Sp
Da octal number is between 000 n' 777. Da digits specify tha permissions for
the user, tha crew n' others.  A 1 permits execution, a 2 permits writing, a
4 permits reading.  Add dem numbers ta combine em. Right back up in yo muthafuckin ass. So a 7 permits
everything.
.Sp
Key bindings up in tha form of [\-+]<who><what> n' <octal>= also exist.  For
example, \fB+ar\fR allows readin fo' everyone, \-ow forbidz others ta write and
777= allows every last muthafuckin thang.
.Sp
See also: playa 1 chmod
.IP "cmap \fIkey\fR \fIcommand\fR" 2
.IX Item "cmap key command"
Bindz keys fo' tha console. Works like tha \f(CW\*(C`map\*(C'\fR command.
.IP "console [\-p\fIN\fR] \fIcommand\fR" 2
.IX Item "console [-pN] command"
Opens tha console wit tha command already typed in. I aint talkin' bout chicken n' gravy biatch.  Da cursor is placed at
\&\fIN\fR.
.IP "copycmap \fIkey\fR \fInewkey\fR [\fInewkey2\fR ...]" 2
.IX Item "copycmap key newkey [newkey2 ...]"
See \f(CW\*(C`copymap\*(C'\fR
.IP "copymap \fIkey\fR \fInewkey\fR [\fInewkey2\fR ...]" 2
.IX Item "copymap key newkey [newkey2 ...]"
Copies tha keybindin \fIkey\fR ta \fInewkey\fR up in tha \*(L"browser\*(R" context.  This be a
deep copy, so if you chizzle tha freshly smoked up bindin (or partz of it) later, tha oldschool one
is not modified.
.Sp
To copy key bindingz of tha console, taskview, or pager use \*(L"copycmap\*(R",
\&\*(L"copytmap\*(R" or \*(L"copypmap\*(R".
.IP "copypmap \fIkey\fR \fInewkey\fR [\fInewkey2\fR ...]" 2
.IX Item "copypmap key newkey [newkey2 ...]"
See \f(CW\*(C`copymap\*(C'\fR
.IP "copytmap \fIkey\fR \fInewkey\fR [\fInewkey2\fR ...]" 2
.IX Item "copytmap key newkey [newkey2 ...]"
See \f(CW\*(C`copymap\*(C'\fR
.IP "cunmap [\fIkeys...\fR]" 2
.IX Item "cunmap [keys...]"
Removes key mappingz of tha console. Works like tha \f(CW\*(C`unmap\*(C'\fR command.
.IP "delete" 2
.IX Item "delete"
Destroy all filez up in tha selection wit a roundhouse kick.  ranger will ask for
a confirmation if you attempt ta delete multiple (marked) filez or non-empty
directories. Put ya muthafuckin choppers up if ya feel dis!  This can be chizzled by modifyin tha settin \*(L"confirm_on_delete\*(R".
.IP "edit [\fIfilename\fR]" 2
.IX Item "edit [filename]"
Edit tha current file or tha file up in tha argument.
.IP "eval [\fI\-q\fR] \fIpython_code\fR" 2
.IX Item "eval [-q] python_code"
Evaluates tha python code.  `fm' be a reference ta tha \s-1FM\s0 instance.  To display
text, use tha function `p'.  Da result is displayed on tha screen unless you
use tha \*(L"\-q\*(R" option.
.Sp
Examples:
 :eval fm
 :eval len(fm.tabs)
 :eval p(\*(L"Wuz crackalackin' World!\*(R")
.IP "filta [\fIstring\fR]" 2
.IX Item "filta [string]"
Displays only tha filez which contain tha \fIstring\fR up in they basename.  Running
this command without any parameta will reset tha fitler.
.IP "find \fIpattern\fR" 2
.IX Item "find pattern"
Search filez up in tha current directory dat contain tha given (case-insensitive)
strin up in they name as you type.  Once there be a unambiguous result, it will
be run immediately. (Or entered, if itz a gangbangin' finger-lickin' directory.)
.IP "grep \fIpattern\fR" 2
.IX Item "grep pattern"
Looks fo' a strang up in all marked filez or directories.
.IP "load_copy_buffer" 2
.IX Item "load_copy_buffer"
Load tha copy buffer from \fI~/.config/ranger/copy_buffer\fR.  This can be used to
pass tha list of copied filez ta another ranger instance.
.IP "map \fIkey\fR \fIcommand\fR" 2
.IX Item "map key command"
Assign tha key combination ta tha given command. Y'all KNOW dat shit, muthafucka!  Whenever you type the
key/keys, tha command is ghon be executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Additionally, if you bust a quantifier
when typin tha key, like 5j, it is ghon be passed ta tha command as tha attribute
\&\*(L"self.quantifier\*(R".
.Sp
Da keys you bind wit dis command is accessible up in tha file browser only,
not up in tha console, task view or pager n' shit.  To bind keys there, use tha commands
\&\*(L"cmap\*(R", \*(L"tmap\*(R" or \*(L"pmap\*(R".
.IP "mark \fIpattern\fR" 2
.IX Item "mark pattern"
Mark all filez matchin tha regular expression pattern.
.IP "mark_tag [\fItags\fR]" 2
.IX Item "mark_tag [tags]"
Mark all tags dat is tagged wit either of tha given tags.  When leavin out
the tag argument, all tagged filez is marked.
.IP "mkdir \fIdirname\fR" 2
.IX Item "mkdir dirname"
Creates a gangbangin' finger-lickin' directory wit tha name \fIdirname\fR.
.IP "open_with [\fIapplication\fR] [\fIflags\fR] [\fImode\fR]" 2
.IX Item "open_with [application] [flags] [mode]"
Open tha selected filez wit tha given application, unless it is omitted, in
which case tha default application is used. Y'all KNOW dat shit, muthafucka!  \fIflags\fR n' \fImode\fR have their
own section up in tha playa page.
.IP "pmap \fIkey\fR \fIcommand\fR" 2
.IX Item "pmap key command"
Bindz keys fo' tha pager n' shit. Works like tha \f(CW\*(C`map\*(C'\fR command.
.IP "punmap [\fIkeys ...\fR]" 2
.IX Item "punmap [keys ...]"
Removes key mappingz of tha pager n' shit. Works like tha \f(CW\*(C`unmap\*(C'\fR command.
.IP "quit" 2
.IX Item "quit"
Like quit! yo, but closes only dis tab if multiple tabs is open.
.IP "quit!" 2
.IX Item "quit!"
Quit ranger n' shit.  Da current directory is ghon be bookmarked as ' so you can re-enter
it by typin `` or '' tha next time you start ranger.
.IP "relink \fInewpath\fR" 2
.IX Item "relink newpath"
Change tha link destination of tha current symlink file ta <newpath>. First
<tab> will load tha original gangsta link.
.IP "rename \fInewname\fR" 2
.IX Item "rename newname"
Rename tha current file.  If a gangbangin' file wit dat name already exists, tha renaming
will fail.  Also try tha key bindin A fo' appendin suttin' ta a gangbangin' file name.
.IP "save_copy_buffer" 2
.IX Item "save_copy_buffer"
Save tha copy buffer ta \fI~/.config/ranger/copy_buffer\fR.  This can be used to
pass tha list of copied filez ta another ranger instance.
.IP "scout [\-\fIflags\fR...] [\-\-] \fIpattern\fR" 2
.IX Item "scout [-flags...] [--] pattern"
Swiss army knife command fo' searching, travelin n' filterin files.
Da command takes various flags as arguments which can be used to
influence its behaviour:
.Sp
.Vb 10
\& \-a = automatically open a gangbangin' file on unambiguous match
\& \-e = open tha selected file when pressin enter
\& \-f = filta filez dat match tha current search pattern
\& \-g = interpret pattern as a glob pattern
\& \-i = ignore tha letta case of tha files
\& \-k = keep tha console open when changin a gangbangin' finger-lickin' directory wit tha command
\& \-l = letta skipping; e.g. allow "rdme" ta match tha file "readme"
\& \-m = mark tha matchin filez afta pressin enter
\& \-M = unmark tha matchin filez afta pressin enter
\& \-p = permanent filter: hide non\-matchin filez afta pressin enter
\& \-s = smart-ass case; like \-i unless pattern gotz nuff upper case letters
\& \-t = apply filta n' search pattern as you type
\& \-v = inverts tha match
.Ve
.Sp
Multiple flags can be combined. Y'all KNOW dat shit, muthafucka!  For example, \*(L":scout \-gpt\*(R" would create
a :filter\-like command rockin globbing.
.IP "search \fIpattern\fR" 2
.IX Item "search pattern"
Search filez up in tha current directory dat match tha given (case insensitive)
regular expression pattern.
.IP "search_inc \fIpattern\fR" 2
.IX Item "search_inc pattern"
Search filez up in tha current directory dat match tha given (case insensitive)
regular expression pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch.  This command gets you ta matchin filez as you
type.
.IP "set \fIoption\fR \fIvalue\fR" 2
.IX Item "set option value"
Assigns a freshly smoked up value ta a option. I aint talkin' bout chicken n' gravy biatch.  Valid options is listed up in tha settings
section. I aint talkin' bout chicken n' gravy biatch.  Use tab completion ta git tha current value of a option, though this
doesn't work fo' functions n' regular expressions. Valid joints are:
.Sp
.Vb 7
\& settin type   | example joints
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& bool           | true, false
\& integer        | 1, 23, 1337
\& strang         | foo, wassup ghetto
\& list           | 1,2,3,4
\& none           | none
.Ve
.IP "setlocal [path=\fIpath\fR] \fIoption\fR \fIvalue\fR" 2
.IX Item "setlocal [path=path] option value"
Assigns a freshly smoked up value ta a option yo, but locally fo' tha directory given by
\&\fIpath\fR. This means, dat dis option only takes effect when visitin that
directory. If no path is given, uses tha current directory.
.IP "shell [\-\fIflags\fR] \fIcommand\fR" 2
.IX Item "shell [-flags] command"
Run a gangbangin' finger-lickin' dirty-ass shell command. Y'all KNOW dat shit, muthafucka!  \fIflags\fR is discussed up in they own section.
.IP "terminal" 2
.IX Item "terminal"
Spawns tha \fIx\-terminal-emulator\fR startin up in tha current directory.
.IP "tmap \fIkey\fR \fIcommand\fR" 2
.IX Item "tmap key command"
Bindz keys fo' tha taskview. Works like tha \f(CW\*(C`map\*(C'\fR command.
.IP "touch \fIfilename\fR" 2
.IX Item "touch filename"
Creates a empty file wit tha name \fIfilename\fR, unless it already exists.
.IP "travel \fIpattern\fR" 2
.IX Item "travel pattern"
Filtas tha current directory fo' filez containin tha lettas up in the
string, possibly wit other lettas up in between. I aint talkin' bout chicken n' gravy biatch.  Da filta be applied as
you type.  When only one directory is left, it is entered n' tha console
is automatically reopened, allowin fo' fast travel.
To close tha console, press \s-1ESC\s0 or execute a gangbangin' file.
.IP "tunmap [\fIkeys ...\fR]" 2
.IX Item "tunmap [keys ...]"
Removes key mappingz of tha taskview. Works like tha \f(CW\*(C`unmap\*(C'\fR command.
.IP "unmap [\fIkeys\fR ...]" 2
.IX Item "unmap [keys ...]"
Removes tha given key mappings up in tha \*(L"browser\*(R" context.  To unmap key bindings
in tha console, taskview, or pager use \*(L"cunmap\*(R", \*(L"tunmap\*(R" or \*(L"punmap\*(R".
.IP "unmark \fIpattern\fR" 2
.IX Item "unmark pattern"
Unmark all filez matchin a regular expression pattern.
.IP "unmark_tag [\fItags\fR]" 2
.IX Item "unmark_tag [tags]"
Unmark all tags dat is tagged wit either of tha given tags.  When leaving
out tha tag argument, all tagged filez is unmarked.
.SH "FILES"
.IX Header "FILES"
ranger readz nuff muthafuckin configuration filez which is located in
\&\fI\f(CI$HOME\fI/.config/ranger\fR or \fI\f(CI$XDG_CONFIG_HOME\fI/ranger\fR if \f(CW$XDG_CONFIG_HOME\fR is
defined. Y'all KNOW dat shit, muthafucka!  Yo ass can use tha \-\-copy\-config option ta obtain tha default
configuration files.  Each of tha filez gotz nuff further documentation.
.PP
Yo ass don't need ta copy tha whole file though, most configuration filez are
overlaid on top of tha defaults (\fIcommands.py\fR, \fIrc.conf\fR) or can be
sub-classed (\fIcolorschemes\fR).
.PP
When startin ranger wit tha \fB\-\-clean\fR option, it aint gonna access or create
any of these files.
.SS "\s-1CONFIGURATION\s0"
.IX Subsection "CONFIGURATION"
.IP "rc.conf" 10
.IX Item "rc.conf"
Gotz Nuff a list of commandz which is executed on startup.  Mostly key bindings
and settings is defined here.
.IP "commands.py" 10
.IX Item "commands.py"
A python module dat defines commandz which can be used up in rangerz console by
typin \*(L":\*(R" or up in tha rc.conf file.
.IP "rifle.conf" 10
.IX Item "rifle.conf"
This is tha configuration file fo' tha built-in file launcher called \*(L"rifle\*(R".
.IP "scope.sh" 10
.IX Item "scope.sh"
This be a script dat handlez file peepshows.  When tha options
\&\fIuse_preview_script\fR n' \fIpreview_files\fR is set, tha program specified in
the option \fIpreview_script\fR is run n' its output and/or exit code determines
rangers erection.
.IP "colorschemes/" 10
.IX Item "colorschemes/"
Colorschemes can be placed here.
.IP "plugins/" 10
.IX Item "plugins/"
Plugins can be placed here.
.SS "\s-1STORAGE\s0"
.IX Subsection "STORAGE"
.IP "bookmarks" 10
.IX Item "bookmarks"
This file gotz nuff a list of bookmarks.  Da syntax is /^(.):(.*)$/. Da first
characta is tha bookmark key n' tha rest afta tha colon is tha path ta the
file.  In ranger, bookmarks can be set by typin m<key>, accessed by typing
\&'<key> n' deleted by typin um<key>.
.IP "copy_buffer" 10
.IX Item "copy_buffer"
When hustlin tha command :save_copy_buffer, tha pathz of all currently copied
filez is saved up in dis file.  Yo ass can lata run :load_copy_buffer ta copy the
same filez again, pass dem ta another ranger instizzle or process dem up in a
script.
.IP "history" 10
.IX Item "history"
Gotz Nuff a list of commandz dat done been previously typed in.
.IP "tagged" 10
.IX Item "tagged"
Gotz Nuff a list of tagged files. Da syntax is /^(.:)?(.*)$/ where tha first
letta is tha optionizzle name of tha tag n' tha rest afta tha optionizzle colon is
the path ta tha file.  In ranger, tags can be set by pressin t n' removed
with T.  To assign a named tag, type "<tagname>.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
These environment variablez have a effect on ranger:
.IP "\s-1RANGER_LEVEL\s0" 8
.IX Item "RANGER_LEVEL"
ranger sets dis environment variable ta \*(L"1\*(R" or increments it if it already
exists, n' you can put dat on yo' toast.  External programs can determine whether they was spawned from ranger
by checkin fo' dis variable.
.IP "\s-1RANGER_LOAD_DEFAULT_RC\s0" 8
.IX Item "RANGER_LOAD_DEFAULT_RC"
If dis variable is set ta \s-1FALSE\s0, ranger aint gonna load tha default rc.conf.
This can save time if you copied tha whole rc.conf ta ~/.config/ranger/ and
don't need tha default one at all.
.IP "\s-1EDITOR\s0" 8
.IX Item "EDITOR"
Defines tha editor ta be used fo' tha \*(L"E\*(R" key.  Defaults ta \*(L"nano\*(R".
.IP "\s-1SHELL\s0" 8
.IX Item "SHELL"
Defines tha shell dat ranger is goin ta use wit tha :shell command and
the \*(L"S\*(R" key.  Defaults ta \*(L"/bin/sh\*(R".
.IP "\s-1TERMCMD\s0" 8
.IX Item "TERMCMD"
Defines tha terminal emulator command dat ranger is goin ta use wit the
:terminal command n' tha \*(L"t\*(R" run flag.  Defaults ta \*(L"xterm\*(R".
.IP "\s-1XDG_CONFIG_HOME\s0" 8
.IX Item "XDG_CONFIG_HOME"
Specifies tha directory fo' configuration files. Defaults ta \fI\f(CI$HOME\fI/.config\fR.
.IP "\s-1PYTHONOPTIMIZE\s0" 8
.IX Item "PYTHONOPTIMIZE"
This variable determines tha optimize level of python.
.Sp
Usin PYTHONOPTIMIZE=1 (like python \-O) will make python discard assertion
statements, n' you can put dat on yo' toast.  Yo ass will bust efficiency all up in tha cost of losin some debug info.
.Sp
Usin PYTHONOPTIMIZE=2 (like python \-OO) will additionally discard any
docstrings.  Usin dis will disable tha <F1> key on commands.
.IP "W3MIMGDISPLAY_PATH" 8
.IX Item "W3MIMGDISPLAY_PATH"
By changin dis variable, you can chizzle tha path of tha executable file for
image peepshows.  By default, it is set ta \fI/usr/lib/w3m/w3mimgdisplay\fR.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
There is various examplez on how tha fuck ta extend ranger wit plugins or combine
ranger wit other programs.  These can be found up in the
\&\fI/usr/share/doc/ranger/examples/\fR directory, or tha \fIdoc/ranger/\fR dat is
provided along wit tha source code.
.SH "LICENSE"
.IX Header "LICENSE"
\&\s-1GNU\s0 General Public License 3 or (at yo' option) any lata version.
.SH "LINKS"
.IX Header "LINKS"
.IP "Download: http://ranger.nongnu.org/ranger\-stable.tar.gz <http://ranger.nongnu.org/ranger-stable.tar.gz>" 4
.IX Item "Download: http://ranger.nongnu.org/ranger-stable.tar.gz <http://ranger.nongnu.org/ranger-stable.tar.gz>"
.PD 0
.IP "Da project page: <http://ranger.nongnu.org/>" 4
.IX Item "Da project page: <http://ranger.nongnu.org/>"
.IP "Da mailin list: <http://savannah.nongnu.org/mail/?group=ranger>" 4
.IX Item "Da mailin list: <http://savannah.nongnu.org/mail/?group=ranger>"
.PD
.PP
ranger is maintained wit tha git version control system.  To fetch a gangbangin' fresh
copy, run:
.PP
.Vb 1
\& git clone git://git.savannah.nongnu.org/ranger.git
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIrifle\fR\|(1)
.SH "BUGS"
.IX Header "BUGS"
Report bugs here: <http://savannah.nongnu.org/bugs/?group=ranger>
.PP
Please include as much relevant shiznit as possible.  For da most thugged-out
diagnostic output, run ranger like this: \f(CW\*(C`PYTHONOPTIMIZE= ranger \-\-debug\*(C'\fR
