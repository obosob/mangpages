.TH xinput 1 "xinput 1.6.1" "X Version 11"

.SH NAME
xinput - utilitizzle ta configure n' test X input devices

.SH SYNOPSIS
.B xinput [OPTIONS] [DEVICE]

.SH DESCRIPTION
xinput be a utilitizzle ta list available input devices, query shiznit about
a thang n' chizzle input thang settings.
.SH OPTIONS
.TP 8
.B --version
Test if tha X Input extension be available n' return tha version number
of tha program n' tha version supported by tha server n' shit. This option do not
require a thang name.
.PP
.TP 8
.B --list [--short || --long || --name-only || --id-only] [\fIdevice\fP]
If no argument is given list all tha input devices. If a argument is given,
show all tha featurez of \fIdevice\fP.
If --long is provided, tha output includes detailed shiznit bout the
capabilitizzlez of each devices. Otherwise, or if --short is provided, only the
device names n' some minimal shiznit is listed.
If --name-only is provided, tha output is limited ta tha thang names. One
device name is listed per line. Note dat tha order tha devices is listed
is undefined.
If --id-only is provided, tha output is limited ta tha thang IDs. One
device ID is listed per line. Note dat tha order tha devices is listed is
undefined.
.PP
.TP 8
.B --get-feedbacks \fIdevice\fP
Display tha feedbackz of \fIdevice\fP.
.PP
.TP 8
.B --set-pointa \fIdevice\fP
Switch \fIdevice\fP up in core pointer.
This option do not a god damn thang on X servers 1.5 n' later.
.PP
.TP 8
.B --set-mode \fIdevice\fP \fIABSOLUTE|RELATIVE\fP
Change tha mode of \fIdevice\fP.
.PP
.TP 8
.B --set-ptr-feedback \fIdevice\fP \fIthreshold\fP \fInum\fP \fIdenom\fP
Change tha pointa acceleration (or feedback) parametaz of \fIdevice\fP.
Da xset(1) playa page has mo' details. For X.Org Server 1.7
and above, there be additionizzle thang propertizzles pertainin ta pointer
acceleration. I aint talkin' bout chicken n' gravy biatch. These do not replace yo, but complement tha pointa feedback
setting.
.PP
.TP 8
.B --set-integer-feedback \fIdevice\fP \fIindex\fP \fIvalue\fP
Change tha value of a integer feedback of \fIdevice\fP.
.PP
.TP 8
.B --set-button-map \fIdevice\fP \fImap_button_1\fP [\fImap_button_2\fP [\fI...\fP]]
Change tha button mappin of \fIdevice\fP. Da buttons is specified in
physical order (startin wit button 1) n' is mapped ta tha logical button
provided. Y'all KNOW dat shit, muthafucka! 0 disablez a funky-ass button. I aint talkin' bout chicken n' gravy biatch. Da default button mappin fo' a thang is 1
2 3 4 5 6 etc.
.PP
.TP 8
.B --query-state \fIdevice\fP
Query tha thang state.
.PP
.TP 8
.B --list-props \fIdevice\fP [\fIdevice\fP [\fI...\fP]]
Lists propertizzles dat can be set fo' tha given device(s).
.PP
.TP 8
.B --set-int-prop \fIdevice\fP \fIproperty\fP \fIformat\fP \fIvalue\fP
Sets a integer property fo' tha device.  Appropriate joints fo' \fIformat\fP
are 8, 16, or 32, dependin on tha property. Deprecated, use
.B --set-prop
instead.
.PP
.TP 8
.B --set-float-prop \fIdevice\fP \fIproperty\fP \fIvalue\fP
Sets a gangbangin' float property fo' tha device. Deprecated, use
.B --set-prop
instead.
.PP
.TP 8
.B --set\-prop [\-\-type=\fIatom|float|int\fP] [\-\-format=\fI8|16|32\fP] \fIdevice\fP \fIproperty\fP \fIvalue\fP [...]
Set tha property ta tha given value(s).  If not specified, tha format n' type
of tha property is left as-is.  Da arguments is interpreted accordin ta the
property type.
.PP
.TP 8
.B --watch-props \fIdevice\fP
Prints ta standard up when property chizzlez occur.
.PP
.TP 8
.B --delete-prop \fIdevice\fP \fIproperty\fP
Delete tha property from tha device.
.PP
.TP 8
.B --test [-proximity] \fIdevice\fP
Regista all extended events from \fIdevice\fP n' enta a endless
loop displayin events received. Y'all KNOW dat shit, muthafucka! If tha -proximitizzle is given, ProximityIn
and ProximityOut is registered.
.PP
.TP 8
.B --test-xi2 [--root] [\fIdevice\fP]
Regista fo' a fuckin shitload of XI2 events n' display em. If a thang is given,
only events on dis thang is displayed. Y'all KNOW dat shit, muthafucka! If --root is given, events are
selected on tha root window only. Otherwise, a freshly smoked up client window is pimped
(similar ta xev).
.PP
.TP 8
.B --create-masta \fIprefix\fP [sendCore] [enable]
Smoke a freshly smoked up pair of masta devices on a XI2-enabled server wit tha given
\fIprefix\fP. Da server will create one masta pointa named "\fIprefix\fP
pointer" n' one masta keyboard named "\fIprefix\fP keyboard".  If
\fIsendCore\fP is 1, dis pair of masta devices is set ta bust core events
(default).  If \fIenable\fP is 1, dis masta thang pair is ghon be enabled
immediately (default).
.PP
.TP 8
.B --remove-masta \fImaster\fP [Floating|AttachToMaster] [returnPointer] [returnKeyboard]
Remove \fImaster\fP  n' its paired masta device fo' realz. Attached slave devices
are set floatin if \fIFloating\fP is specified or tha argument is omitted.
If tha second argument is \fIAttachToMaster\fP, \fIreturnPointer\fP
specifies tha masta pointa ta attach all slave pointas ta and
\fIreturnKeyboard\fP specifies tha masta keyboard ta attach all slave
keyboardz to.
.PP
.TP 8
.B --reattach \fIslave\fP \fImaster\fP
Reattach \fIslave\fP ta \fImaster\fP.
.PP
.TP 8
.B --float \fIslave\fP
Remove \fIslave\fP from its current masta device.
.PP
.TP 8
.B --set-cp \fIwindow\fP \fImaster\fP
Set tha ClientPointa fo' tha client ownin \fIwindow\fP ta \fImaster\fP.
\fImaster\fP must specify a masta pointer.
.PP
.TP 8
.B --map-to-output \fIdevice\fP \fIcrtc\fP
Restricts tha movementz of tha absolute \fIdevice\fP ta tha RandR
\fIcrtc\fP. Da output name must match a cold-ass lil currently connected output (see
\fIxrandr(1)\fP). If tha NVIDIA binary driver is
detected or RandR 1.2 or lata aint available, a Xinerama output may be
specified as "HEAD-N", wit N bein tha Xinerama screen number n' shit. This option
has no effect on relatizzle devices.
.PP
.TP 8
.B --enable \fIdevice\fP
Enable tha \fIdevice\fP. This call is equivalent to
.B xinput --set-prop thang \fI"Device Enabled"\fP 1
.PP
.TP 8
.B --disable \fIdevice\fP
Disable tha \fIdevice\fP. This call is equivalent to
.B xinput --set-prop thang \fI"Device Enabled"\fP 0
.PP
\fIdevice\fP can be tha thang name as a strang or tha XID of the
device.
.PP
\fIslave\fP can be tha thang name as a strang or tha XID of a slave
device.
.PP
\fImaster\fP can be tha thang name as a strang or tha XID of a master
device.
.PP
\fIproperty\fP can be tha property as a strang or tha Atom value.
.PP
.SH "SEE ALSO"
X(7), xset(1), xrandr(1)
.SH COPYRIGHT
Copyright 1996,1997, Frederic Lepied.
.PP
Copyright 2007, Peta Hutterer.
.PP
Copyright 2008, Philip Langdale.
.PP
Copyright 2009-2011, Red Hat, Inc.

.SH AUTHORS

.nf
Peta Hutterer <peter.hutterer@who-t.net>
Philip Langdale, <philipl@alumni.utexas.net>
Frederic Lepied, Frizzle <Frederic.Lepied@sugix.frmug.org>
Julien Cristau <jcristau@debian.org>
Thomas Jaeger <ThJaeger@gmail.com>
and more.
.fi
