.TH "ZSHCOMPSYS" "1" "October 7, 2014" "zsh 5\&.0\&.7"
.SH "NAME"
zshcompsys \- zsh completion system
.\" Yodl file: Zsh/compsys.yo
.SH "DESCRIPTION"
.PP
This raps bout tha shell code fo' tha `new\&' completion system, referred
to as \fBcompsys\fP\&.  It be freestyled up in shell functions based on the
features busted lyrics bout in
\fIzshcompwid\fP(1)\&.
.PP
Da features is contextual, sensitizzle ta tha point at which completion is
started\&.  Many completions is already provided\&.
For dis reason, a user can big-ass up a pimped out nuff tasks without
knowin any details beyond how tha fuck ta initialize tha system, which is
busted lyrics about
below up in INITIALIZATION\&.
.PP
Da context dat decides what tha fuck completion is ta be performed may be
.PD 0
.TP
.PD
\(bu
an argument or option position: these describe tha posizzle on the
command line at which completion is requested\&.  For example `first argument
to rmdir, tha word bein completed names a gangbangin' finger-lickin' directory\&';

.TP
\(bu
a special context, denotin a element up in tha shell\&z syntax\&.  For example
`a word up in command position\&' or `an array subscript'\&.

.PP
A full context justification gotz nuff other elements, as we shall describe\&.
.PP
Besides commandz names n' contexts, tha system employs two more
concepts, \fIstyles\fP n' \fItags\fP\&.  These provide ways fo' tha user
to configure tha system\&z behaviour\&.
.PP
Tags play a thugged-out dual role\&.  They serve as a cold-ass lil classification system for
the matches, typically indicatin a cold-ass lil class of object dat tha user
may need ta distinguish\&.  For example, when completin argumentz of the
\fBls\fP command tha user may prefer ta try \fBfiles\fP before \fBdirectories\fP,
so both of these is tags\&.  They also step tha fuck up as tha rightmost
element up in a cold-ass lil context justification\&.
.PP
Stylez modify various operationz of tha completion system, such as
output formattin yo, but also what tha fuck kindz of completas is used (and in
what order), or which tags is examined\&.  Stylez may accept arguments
and is manipulated rockin tha \fBzstyle\fP command busted lyrics bout in
see \fIzshmodules\fP(1)\&.
.PP
In summary, tags describe \fIwhat\fP tha completion objects are, n' style
\fBhow\fP they is ta be completed\&.  At various pointz of execution, the
completion system checks what tha fuck stylez and/or tags is defined fo' the
current context, n' uses dat ta modify its behavior\&.  Da full
description of context handling, which determines how tha fuck tags n' other
elementz of tha context influence tha behaviour of styles, is busted lyrics about
below up in COMPLETION SYSTEM CONFIGURATION\&.
.PP
When a cold-ass lil completion is requested, a gangbangin' finger-lickin' dispatcher function is called;
see tha description of \fB_main_complete\fP up in tha list of control functions
below\&. This dispatcher decides which function should
be called ta produce tha completions, n' calls it\&. Da result is
passed ta one or mo' \fIcompleters\fP, functions dat implement
individual completion strategies: simple completion, error erection,
completion wit error erection, menu selection, etc\&.
.PP
Mo' generally, tha shell functions contained up in tha completion system are
of two types:
.PD 0
.TP
.PD
\(bu
those beginnin `\fBcomp\fP\&' is ta be called directly; there be only
a few of these;

.TP
\(bu
those beginnin `\fB_\fP\&' is called by the
completion code\&.  Da shell functionz of dis set, which implement
completion behaviour n' may be bound ta keystrokes, is referred to
as `widgets\&'\&.  These proliferate as freshly smoked up completions is required\&.

.PP
.PP
.SH "INITIALIZATION"
.PP
If tha system was installed straight-up, it should be enough to
call tha shell function \fBcompinit\fP from yo' initialization file; peep the
next section\&.  But fuck dat shiznit yo, tha word on tha street is dat tha function \fBcompinstall\fP can be run by a user
to configure various aspectz of tha completion system\&.
.PP
Usually, \fBcompinstall\fP will bang code tha fuck into \fB\&.zshrc\fP, although if
that aint writable it will save it up in another file n' rap  that
file\&z location\&.  Note dat it is up ta you ta make shizzle dat tha lines
added ta \fB\&.zshrc\fP is straight-up run; you may, fo' example, need ta move
them ta a earlier place up in tha file if \fB\&.zshrc\fP probably returns early\&.
So long as you keep dem all together (includin tha comment lines at the
start n' finish), you can rerun \fBcompinstall\fP n' it will erectly
locate n' modify these lines\&.  Note, however, dat any code you add to
this section by hand is likely ta be lost if you rerun \fBcompinstall\fP,
although lines rockin tha command `\fBzstyle\fP\&' should be gracefully handled\&.
.PP
Da freshly smoked up code will take effect next time you start tha shell, or run
\fB\&.zshrc\fP by hand; there be also a option ta make dem take effect
immediately\&.  But fuck dat shiznit yo, tha word on tha street is dat if \fBcompinstall\fP has removed definitions, you will
need ta restart tha shell ta peep tha chizzles\&.
.PP
To run \fBcompinstall\fP yo big-ass booty is ghon need ta make shizzle it is up in a gangbangin' finger-lickin' directory
mentioned up in yo' \fBfpath\fP parameter, which should already be tha case if
zsh was properly configured as long as yo' startup filez do not remove the
appropriate directories from \fBfpath\fP\&.  Then it must be autoloaded
(`\fBautoload \-U compinstall\fP\&' is recommended)\&.  Yo ass can abort the
installation any time yo ass is bein prompted fo' shiznit, n' your
\fB\&.zshrc\fP aint gonna be altered at all; chizzlez only take place right at the
end, where yo ass is specifically axed fo' confirmation\&.
.PP
.SS "Use of compinit"
.PP
This section raps bout tha use of \fBcompinit\fP ta initialize completion for
the current session when called directly; if you have run
\fBcompinstall\fP it is ghon be called automatically from yo' \fB\&.zshrc\fP\&.
.PP
To initialize tha system, tha function \fBcompinit\fP should be up in a
directory mentioned up in tha \fBfpath\fP parameter, n' should be autoloaded
(`\fBautoload \-U compinit\fP\&' is recommended), n' then run simply as
`\fBcompinit\fP\&'\&.  This will define a
few utilitizzle functions, arrange fo' all tha necessary shell functions ta be
autoloaded, n' will then re\-define all widgets dat do completion ta use the
new system\&.  If you use tha \fBmenu\-select\fP widget, which is part of the
\fBzsh/complist\fP module, you should make shizzle dat that module is loaded
before tha call ta \fBcompinit\fP so dat that widget be also
re\-defined\&.  If completion stylez (see below) is set up ta perform
expansion as well as completion by default, n' tha TAB key is bound to
\fBexpand\-or\-complete\fP, \fBcompinit\fP will rebind it ta \fBcomplete\-word\fP;
this is necessary ta use tha erect form of expansion\&.
.PP
Should you need ta use tha original gangsta completion commands, you can still
bind keys ta tha oldschool widgets by puttin a `\fB\&.\fP\&' up in front of the
widget name, e\&.g\&. `\fB\&.expand\-or\-complete\fP\&'\&.
.PP
To speed up tha hustlin of \fBcompinit\fP, it can be made ta produce a thugged-out dumped
configuration dat is ghon be read up in on future invocations; dis is the
default yo, but can be turned off by callin \fBcompinit\fP wit the
option \fB\-D\fP\&.  Da dumped file is \fB\&.zcompdump\fP up in tha same
directory as tha startup filez (i\&.e\&. \fB$ZDOTDIR\fP or \fB$HOME\fP);
alternatively, a explicit file name can be given by `\fBcompinit \-d\fP
\fIdumpfile\fP\&'\&.  Da next invocation of \fBcompinit\fP will read tha dumped
file instead of struttin a gangbangin' full initialization\&.
.PP
If tha number of completion filez chizzles, \fBcompinit\fP will recognise this
and produce a freshly smoked up dump file\&.  But fuck dat shiznit yo, tha word on tha street is dat if tha name of a gangbangin' function or the
arguments up in tha straight-up original gangsta line of a \fB#compdef\fP function (as busted lyrics bout below)
change, it is easiest ta delete tha dump file by hand so that
\fBcompinit\fP will re\-create it tha next time it is run\&.  Da check
performed ta peep if there be freshly smoked up functions can be omitted by giving
the option \fB\-C\fP\&.  In dis case tha dump file will only be pimped if
there isn\&'t one already\&.
.PP
Da dumpin is straight-up done by another function, \fBcompdump\fP yo, but you
will only need ta run dis yo ass if you chizzle tha configuration
(e\&.g\&. rockin \fBcompdef\fP) n' then wanna dump tha freshly smoked up one\&.  Da name of
the oldschool dumped file is ghon be remembered fo' dis purpose\&.
.PP
If tha parameta \fB_compdir\fP is set, \fBcompinit\fP uses it as a gangbangin' finger-lickin' directory
where completion functions can be found; dis is only necessary if they are
not already up in tha function search path\&.
.PP
For securitizzle reasons \fBcompinit\fP also checks if tha completion system
would use filez not owned by root or by tha current user, or filez in
directories dat is ghetto\- or group\-writable or dat is not owned by 
root or by tha current user\&.  If such filez or directories is found,
\fBcompinit\fP will ask if tha completion system should straight-up be used\&.  To
avoid these tests n' make all filez found be used without asking, use the
option \fB\-u\fP, n' ta make \fBcompinit\fP silently ignore all insecure files
and directories use tha option \fB\-i\fP\&.  This securitizzle check is skipped
entirely when tha \fB\-C\fP option is given\&.
.PP
Da securitizzle check can be retried at any time by hustlin tha function
\fBcompaudit\fP\&.  This is tha same ol' dirty check used by \fBcompinit\fP yo, but when it
is executed directly any chizzlez ta \fBfpath\fP is made local ta the
function so they do not persist\&.  Da directories ta be checked may be
passed as arguments; if none is given, \fBcompaudit\fP uses \fBfpath\fP and
\fB_compdir\fP ta find completion system directories, addin missin ones
to \fBfpath\fP as necessary\&.  To force a cold-ass lil check of exactly tha directories
currently named up in \fBfpath\fP, set \fB_compdir\fP ta a empty strang before
callin \fBcompaudit\fP or \fBcompinit\fP\&.
.PP
Da function \fBbashcompinit\fP serves up compatibilitizzle wit bash\&z programmable
completion system\&.  When run it will define tha functions, \fBcompgen\fP and
\fBcomplete\fP which correspond ta tha bash builtins wit tha same names\&.
It will then be possible ta use completion justifications n' functions
written fo' bash\&.
.PP
.SS "Autoloaded files"
.PP
Da convention fo' autoloaded functions used up in completion is dat they
start wit a underscore; as already mentioned, tha \fBfpath/FPATH\fP
parameta must contain tha directory up in which they is stored\&.  If \fBzsh\fP
was properly installed on yo' system, then \fBfpath/FPATH\fP automatically
gotz nuff tha required directories fo' tha standard functions\&.
.PP
For incomplete installations, if \fBcompinit\fP do not find enough files
beginnin wit a underscore (fewer than twenty) up in tha search path, it
will try ta find mo' by addin tha directory \fB_compdir\fP ta tha search
path\&.  If dat directory has a subdirectory named \fBBase\fP, all
subdirectories is ghon be added ta tha path\&.  Furthermore, if tha subdirectory
\fBBase\fP has a subdirectory named \fBCore\fP, \fBcompinit\fP will add all
subdirectoriez of tha subdirectories is ta tha path: dis allows
the functions ta be up in tha same format as up in tha \fBzsh\fP source
distribution\&.
.PP
When \fBcompinit\fP is run, it searches all such filez accessible via
\fBfpath/FPATH\fP n' readz tha straight-up original gangsta line of each of them\&.  This line should
contain one of tha tags busted lyrics bout below\&.  Filez whose first line do not
start wit one of these tags is not considered ta be part of the
completion system n' aint gonna be treated specially\&.
.PP
Da tags are:
.PP
.PD 0
.TP
.PD
\fB#compdef\fP \fInames\&.\&.\&.\fP [ \fB\-[pP]\fP \fIpatterns\&.\&.\&.\fP [ \fB\-N\fP \fInames\&.\&.\&.\fP ] ]
Da file is ghon be made autoloadable n' tha function defined 
in it is ghon be called when completin \fInames\fP, each of which is
either tha name of a cold-ass lil command whose arguments is ta be completed or one of
a number of special contexts up in tha form \fB\-\fP\fIcontext\fP\fB\-\fP busted lyrics about
below\&.
.RS
.PP
Each \fIname\fP may also be of tha form `\fIcmd\fP\fB=\fP\fIservice\fP\&'\&.
When completin tha command \fIcmd\fP, tha function typically behaves as
if tha command (or special context) \fIservice\fP was bein completed
instead\&.  This serves up a way of alterin tha behaviour of functions
that can big-ass up nuff different completions\&.  It be implemented
by settin tha parameta \fB$service\fP when callin tha function;
the function may chizzle ta interpret dis how tha fuck it wishes, n' simpler
functions will probably ignore it\&.
.PP
If tha \fB#compdef\fP line gotz nuff one of tha options \fB\-p\fP or \fB\-P\fP,
the lyrics followin is taken ta be patterns\&.  Da function will be
called when completion be attempted fo' a cold-ass lil command or context dat matches
one of tha patterns\&.  Da options \fB\-p\fP n' \fB\-P\fP is used ta specify
patterns ta be tried before or afta other completions respectively\&.
Hence \fB\-P\fP may be used ta specify default actions\&.
.PP
Da option \fB\-N\fP is used afta a list followin \fB\-p\fP or \fB\-P\fP; it
specifies dat remainin lyrics no longer define patterns\&.  It is
possible ta toggle between tha three options as nuff times as necessary\&.
.RE
.TP
\fB#compdef \-k\fP \fIstyle key\-sequences\&.\&.\&.\fP
This option creates a widget behavin like the
builtin widget \fIstyle\fP n' bindz it ta tha given \fIkey\-sequences\fP,
if any\&.  Da \fIstyle\fP must be one of tha builtin widgets dat perform
completion, namely \fBcomplete\-word\fP, \fBdelete\-char\-or\-list\fP,
\fBexpand\-or\-complete\fP, \fBexpand\-or\-complete\-prefix\fP, \fBlist\-choices\fP,
\fBmenu\-complete\fP, \fBmenu\-expand\-or\-complete\fP, or
\fBreverse\-menu\-complete\fP\&.  If tha \fBzsh/complist\fP module is loaded (see
\fIzshmodules\fP(1)) tha widget \fBmenu\-select\fP be also available\&.
.RS
.PP
When one of tha \fIkey\-sequences\fP is typed, tha function up in tha file will
be invoked ta generate tha matches\&.  Note dat a key aint gonna be re\-bound
if it already was (that is, was bound ta suttin' other than
\fBundefined\-key\fP)\&.  Da widget pimped has tha same ol' dirty name as tha file and
can be bound ta any other keys rockin \fBbindkey\fP as usual\&.
.RE
.TP
\fB#compdef \-K\fP \fIwidget\-name\fP \fIstyle\fP \fIkey\-sequences\fP \&.\&.\&.
This is similar ta \fB\-k\fP except dat only one \fIkey\-sequences\fP
argument may be given fo' each \fIwidget\-name\fP \fIstyle\fP pair\&.
But fuck dat shiznit yo, tha word on tha street is dat tha entire set of three arguments may be repeated wit a
different set of arguments\&.  Note up in particular dat the
\fIwidget\-name\fP must be distinct up in each set\&.  If it do not begin with
`\fB_\fP\&' dis is ghon be added\&.  Da \fIwidget\-name\fP should not clash with
the name of any existin widget: names based on tha name of tha function
are most useful\&.  For example,
.RS
.PP
.RS
.nf
\fB#compdef \-K _foo_complete complete\-word "^X^C" \e 
  _foo_list list\-choices "^X^D"\fP
.fi
.RE
.PP
(all on one line) defines a widget \fB_foo_complete\fP fo' completion, bound
to `\fB^X^C\fP\&', n' a widget \fB_foo_list\fP fo' listing, bound ta `\fB^X^D\fP'\&.
.RE
.TP
\fB#autoload\fP [ \fIoptions\fP ]
Functions wit tha \fB#autoload\fP tag is marked fo' autoloadin but
are not otherwise treated specially\&.  Typically they is ta be called
from within one of tha completion functions\&.  Any \fIoptions\fP supplied
will be passed ta tha \fBautoload\fP builtin; a typical use is \fB+X\fP to
force tha function ta be loaded immediately\&.  Note dat tha \fB\-U\fP and
\fB\-z\fP flags is always added implicitly\&.
.PP
Da \fB#\fP is part of tha tag name n' no white space be allowed afta it\&.
Da \fB#compdef\fP tags use tha \fBcompdef\fP function busted lyrics bout below; the
main difference is dat tha name of tha function is supplied implicitly\&.
.PP
Da special contexts fo' which completion functions can be defined are:
.PP
.PD 0
.TP
.PD
\fB\-array\-value\-\fP
Da right hand side of a array\-assignment
(`\fBfoo=(\&.\&.\&.)\fP\&')
.TP
\fB\-brace\-parameter\-\fP
Da name of a parameta expansion within braces (`\fB${\&.\&.\&.}\fP\&')
.TP
\fB\-assign\-parameter\-\fP
Da name of a parameta up in a assignment, i\&.e\&. on tha left hand side of
an `\fB=\fP\&'
.TP
\fB\-command\-\fP
A word up in command position
.TP
\fB\-condition\-\fP
A word inside a cold-ass lil condizzle (`\fB[[\&.\&.\&.]]\fP\&')
.TP
\fB\-default\-\fP
Any word fo' which no other completion is defined
.TP
\fB\-equal\-\fP
A word beginnin wit a equals sign
.TP
\fB\-first\-\fP
This is tried before any other completion function\&.  Da function called
may set tha \fB_compskip\fP parameta ta one of various joints: 
\fBall\fP: no further completion be attempted; a string
containin tha substrin \fBpatterns\fP: no pattern completion functions
will be called; a strang containin \fBdefault\fP: the
function fo' tha `\fB\-default\-\fP\&' context aint gonna be called yo, but
functions defined fo' commandz will
.TP
\fB\-math\-\fP
Inside mathematical contexts, such as
`\fB((\fP\&.\&.\&.\fB))\fP\&'
.TP
\fB\-parameter\-\fP
Da name of a parameta expansion (`\fB$\&.\&.\&.\fP\&')
.TP
\fB\-redirect\-\fP
Da word afta a redirection operator\&.
.TP
\fB\-subscript\-\fP
Da contentz of a parameta subscript\&.
.TP
\fB\-tilde\-\fP
Afta a initial tilde (`\fB~\fP\&') yo, but before tha straight-up original gangsta slash
in tha word\&.
.TP
\fB\-value\-\fP
On tha right hand side of a assignment\&.
.PP
Default implementations is supplied fo' each of these
contexts\&.  In most cases tha context \fB\-\fP\fIcontext\fP\fB\-\fP is
implemented by a cold-ass lil correspondin function \fB_\fP\fIcontext\fP, fo' example
the context `\fB\-tilde\-\fP\&' n' tha function `\fB_tilde\fP')\&.
.PP
Da contexts \fB\-redirect\-\fP n' \fB\-value\-\fP allow extra context\-specific
information\&.  (Internally, dis is handled by tha functions fo' each
context callin tha function \fB_dispatch\fP\&.)  Da extra
information be added separated by commas\&.
.PP
For tha \fB\-redirect\-\fP context, tha extra shiznit is up in tha form
`\fB\-redirect\-,\fP\fIop\fP\fB,\fP\fIcommand\fP\&', where \fIop\fP is the
redirection operator n' \fIcommand\fP is tha name of tha command on
the line\&.  If there is no command on tha line yet, tha \fIcommand\fP
field is ghon be empty\&.
.PP
For tha \fB\-value\-\fP context, tha form is
`\fB\-value\-,\fP\fIname\fP\fB,\fP\fIcommand\fP\&', where \fIname\fP is tha name of
the parameter\&.  In tha case of elementz of a associatizzle array, for
example `\fBassoc=(key <TAB>\fP\&', \fIname\fP is expanded to
`\fIname\fP\fB\-\fP\fIkey\fP\&'\&.  In certain special contexts, such as
completin afta `\fBmake CFLAGS=\fP\&', tha \fIcommand\fP part gives the
name of tha command, here \fBmake\fP; otherwise it is empty\&.
.PP
It aint necessary ta define straight-up specific completions as the
functions provided will try ta generate completions by progressively
replacin tha elements wit `\fB\-default\-\fP\&'\&.  For example, when
completin afta `\fBfoo=<TAB>\fP\&', \fB_value\fP will try tha names
`\fB\-value\-,foo,\fP\&' (note tha empty \fIcommand\fP part),
`\fB\-value\-,foo,\-default\-\fP\&' and`\fB\-value\-,\-default\-,\-default\-\fP', in
that order, until it findz a gangbangin' function ta handle tha context\&.
.PP
As a example:
.PP
.RS
.nf
\fBcompdef \&'_filez \-g "*\&.log"' '\-redirect\-,2>,\-default\-'\fP
.fi
.RE
.PP
completes filez matchin `\fB*\&.log\fP\&' afta `\fB2> <TAB>\fP' fo' any
command wit no mo' specific handlez defined\&.
.PP
Also:
.PP
.RS
.nf
\fBcompdef _foo \-value\-,\-default\-,\-default\-\fP
.fi
.RE
.PP
specifies dat \fB_foo\fP serves up completions fo' tha joints of
parametas fo' which no special function has been defined\&.  This is
usually handled by tha function \fB_value\fP itself\&.
.PP
Da same lookup rulez is used when lookin up stylez (as busted lyrics about
below); fo' example
.PP
.RS
.nf
\fBzstyle \&':completion:*:*:\-redirect\-,2>,*:*' file\-patterns '*\&.log'\fP
.fi
.RE
.PP
is another way ta make completion afta `\fB2> <TAB>\fP\&' complete files
matchin `\fB*\&.log\fP\&'\&.
.PP
.SS "Functions"
.PP
Da followin function is defined by \fBcompinit\fP n' may be called
directly\&.
.PP
.PD 0
.TP
.PD 0
\fBcompdef\fP [ \fB\-ane\fP ] \fIfunction names\&.\&.\&.\fP [ \fB\-[pP]\fP \fIpatterns\&.\&.\&.\fP [ \fB\-N\fP \fInames\&.\&.\&.\fP ] ]
.TP
.PD 0
\fBcompdef \-d\fP \fInames\&.\&.\&.\fP
.TP
.PD 0
\fBcompdef \-k\fP [ \fB\-an\fP ] \fIfunction steez key\-sequences\&.\&.\&.\fP
.TP
.PD
\fBcompdef \-K\fP [ \fB\-an\fP ] \fIfunction name steez key\-sequences \&.\&.\&.\fP
Da first form defines tha \fIfunction\fP ta booty-call fo' completion up in the
given contexts as busted lyrics bout fo' tha \fB#compdef\fP tag above\&.
.RS
.PP
Alternatively, all tha arguments may have tha form
`\fIcmd\fP\fB=\fP\fIservice\fP\&'\&.  Here \fIservice\fP should already have been
defined by `\fIcmd1\fP\fB=\fP\fIservice\fP\&' lines up in \fB#compdef\fP files, as
busted lyrics bout above\&.  Da argument fo' \fIcmd\fP is ghon be completed up in the
same way as \fIservice\fP\&.
.PP
Da \fIfunction\fP argument may alternatively be a strang containing
almost any shell code\&.  If tha strang gotz nuff a equal sign, tha above
will take precedence\&.  Da option \fB\-e\fP may be used ta specify tha first
argument is ta be evaluated as shell code even if it gotz nuff a equal
sign\&.  Da strang is ghon be executed rockin tha \fBeval\fP builtin command to
generate completions\&.  This serves up a way of avoidin havin ta define
a freshly smoked up completion function\&.  For example, ta complete filez endin in
`\fB\&.h\fP\&' as arguments ta tha command \fBfoo\fP:
.PP
.RS
.nf
\fBcompdef \&'_filez \-g "*\&.h"' foo\fP
.fi
.RE
.PP
Da option \fB\-n\fP prevents any completions already defined fo' the
command or context from bein overwritten\&.
.PP
Da option \fB\-d\fP deletes any completion defined fo' tha command or
contexts listed\&.
.PP
Da \fInames\fP may also contain \fB\-p\fP, \fB\-P\fP n' \fB\-N\fP options as
busted lyrics bout fo' tha \fB#compdef\fP tag\&.  Da effect on tha argument list is
identical, switchin between definitionz of patterns tried initially,
patterns tried finally, n' aiiight commandz n' contexts\&.
.PP
Da parameta \fB$_compskip\fP may be set by any function defined fo' a
pattern context\&.  If it is set ta a value containin tha substring
`\fBpatterns\fP\&' none of tha pattern\-functions is ghon be called; if it is
set ta a value containin tha substrin `\fBall\fP\&', no other function
will be called\&.
.PP
Da form wit \fB\-k\fP defines a widget wit tha same name as tha \fIfunction\fP
that is ghon be called fo' each of tha \fIkey\-sequences\fP; dis is like the
\fB#compdef \-k\fP tag\&.  Da function should generate tha completions needed
and will otherwise behave like tha builtin widget whose name is given as
the \fIstyle\fP argument\&.  Da widgets usable fo' dis are:
\fBcomplete\-word\fP, \fBdelete\-char\-or\-list\fP, \fBexpand\-or\-complete\fP,
\fBexpand\-or\-complete\-prefix\fP, \fBlist\-choices\fP, \fBmenu\-complete\fP,
\fBmenu\-expand\-or\-complete\fP, n' \fBreverse\-menu\-complete\fP, as well as
\fBmenu\-select\fP if tha \fBzsh/complist\fP module is loaded\&.  Da option \fB\-n\fP
prevents tha key bein bound if it be already ta bound ta suttin' other
than \fBundefined\-key\fP\&.
.PP
Da form wit \fB\-K\fP is similar n' defines multiple widgets based on the
same \fIfunction\fP, each of which requires tha set of three arguments
\fIname\fP, \fIstyle\fP n' \fIkey\-sequences\fP, where tha latta two is as
for \fB\-k\fP n' tha straight-up original gangsta must be a unique widget name beginnin wit an
underscore\&.
.PP
Wherever applicable, tha \fB\-a\fP option make tha \fIfunction\fP
autoloadable, equivalent ta \fBautoload \-U \fP\fIfunction\fP\&.
.RE
.PP
Da function \fBcompdef\fP can be used ta associate existin completion
functions wit freshly smoked up commands\&.  For example,
.PP
.RS
.nf
\fBcompdef _pidz foo\fP
.fi
.RE
.PP
uses tha function \fB_pids\fP ta complete process IDs fo' tha command \fBfoo\fP\&.
.PP
Note also tha \fB_gnu_generic\fP function busted lyrics bout below, which can be
used ta complete options fo' commandz dat KNOW the
`\fB\-\fP\fB\-help\fP\&' option\&.
.PP
.SH "COMPLETION SYSTEM CONFIGURATION"
.PP
This section gives a gangbangin' finger-lickin' dirty-ass short overview of how tha fuck tha completion system works,
and then mo' detail on how tha fuck playas can configure how tha fuck n' when matches are
generated\&.
.PP
.SS "Overview"
.PP
When completion be attempted somewhere on tha command line the
completion system first works up tha context\&.  This takes account of a
number of thangs includin tha command word (like fuckin `\fBgrep\fP\&' or
`\fBzsh\fP\&') n' options ta which tha current word may be a argument
(like fuckin tha `\fB\-o\fP\&' option ta \fBzsh\fP which takes a gangbangin' finger-lickin' dirty-ass shell option as an
argument)\&.
.PP
This context shiznit is condensed tha fuck into a strang consistin of
multiple fieldz separated by colons, referred ta simply as `the context\&'
in tha remainder of tha documentation\&.  This is used ta look up
\fIstyles\fP, context\-sensitizzle options dat can be used ta configure the
completion system\&.  Da context used fo' lookup may vary durin tha same
call ta tha completion system\&.
.PP
Da context strang always consistz of a gangbangin' fixed set of fields, separated
by colons n' wit a leadin colon before tha first, up in tha form
\fB:completion:\fP\fIfunction\fP\fB:\fP\fIcompleter\fP\fB:\fP\fIcommand\fP\fB:\fP\fIargument\fP\fB:\fP\fBtag\fP\&.  These have tha followin meaning:
.PP
.PD 0
.TP
.PD
\(bu
Da literal strang \fBcompletion\fP, sayin dat dis steez is used by
the completion system\&.  This distinguishes tha context from dem used
by, fo' example, zle widgets n' ZFTP functions\&.

.TP
\(bu
Da \fIfunction\fP, if completion is called from a named widget rather
than all up in tha aiiight completion system\&.  Typically dis is blank yo, but
it is set by special widgets like fuckin \fBpredict\-on\fP n' tha various
functions up in tha \fBWidget\fP directory of tha distribution ta tha name of
that function, often up in a abbreviated form\&.

.TP
\(bu
Da \fIcompleter\fP currently active, tha name of tha function without the
leadin underscore n' wit other underscores converted ta hyphens\&.  A
`completer\&' is up in overall control of how tha fuck completion is ta be performed;
`\fBcomplete\fP\&' is tha simplest yo, but other completas exist ta perform
related tasks like fuckin erection, or ta modify tha behaviour of a later
completer\&.  See
the section `Control Functions\&' below 
for mo' shiznit\&.  

.TP
\(bu
Da \fIcommand\fP or a special \fB\-\fP\fIcontext\fP\fB\-\fP, just at it appears
followin tha \fB#compdef\fP tag or tha \fBcompdef\fP function\&.  Completion
functions fo' commandz dat have sub\-commandz probably modify dis field
to contain tha name of tha command followed by a minus sign n' the
sub\-command\&.  For example, tha completion function fo' tha \fBcvs\fP
command sets dis field ta \fBcvs\-add\fP when completin arguments to
the \fBadd\fP subcommand\&.

.TP
\(bu
Da \fIargument\fP; dis indicates which command line or option argument
we is completing\&.  For command arguments dis generally takes tha form
\fBargument\-\fP\fIn\fP, where \fIn\fP is tha number of tha argument,
and fo' arguments ta options tha form \fBoption\-\fP\fIopt\fP\fB\-\fP\fIn\fP
where \fIn\fP is tha number of tha argument ta option \fIopt\fP\&.  However,
this is only tha case if tha command line is parsed wit standard
UNIX\-style options n' arguments, all kindsa muthafuckin completions do not set this\&.

.TP
\(bu
Da \fItag\fP\&.  As busted lyrics bout previously, tags is used ta discriminizzle between
the typez of matches a cold-ass lil completion function can generate up in a cold-ass lil certain context\&.
Any completion function may use any tag name it likes yo, but a list of the
more common ones is given below\&.

.PP
Da context is gradually put together as tha functions is executed, starting
with tha main entry point, which addz \fB:completion:\fP n' tha \fIfunction\fP
element if necessary\&.  Da completa then addz tha \fIcompleter\fP element\&.
Da contextual completion addz tha \fIcommand\fP n' \fIargument\fP options\&.
Finally, tha \fItag\fP be added when tha typez of completion is known\&.
For example, tha context name
.PP
.RS
.nf
\fB\fB:completion::complete:dvips:option\-o\-1:files\fP\fP
.fi
.RE
.PP
says dat aiiight completion was attempted as tha straight-up original gangsta argument ta the
option \fB\-o\fP of tha command \fBdvips\fP:
.PP
.RS
.nf
\fB\fBdvips \-o \&.\&.\&.\fP\fP
.fi
.RE
.PP
and tha completion function will generate filenames\&.
.PP
Usually completion is ghon be tried fo' all possible tags up in a order given
by tha completion function\&.  But fuck dat shiznit yo, tha word on tha street is dat dis can be altered by rockin the
\fBtag\-order\fP style\&.  Completion is then restricted ta tha list of given
tags up in tha given order\&.
.PP
Da \fB_complete_help\fP bindable command shows all tha contexts n' tags
available fo' completion at a particular point\&.  This serves up a easy as fuck 
way of findin shiznit fo' \fBtag\-order\fP n' other styles\&.  It is
busted lyrics bout in
the section `Bindable Commands\&' below\&.
.PP
Stylez determine such thangs as how tha fuck tha matches is generated, similarly
to shell options but wit much mo' control\&.  They can have any number
of strings as they value\&.  They is defined wit tha \fBzstyle\fP builtin
command (see \fIzshmodules\fP(1))\&.
.PP
When lookin up stylez tha completion system uses full context names,
includin tha tag\&.  Lookin up tha value of a steez therefore consists
of two thangs:  tha context, which may be matched as a pattern, n' the
name of tha steez itself, which must be given exactly\&.
.PP
For example, nuff completion functions can generate matches up in a
simple n' a verbose form n' use tha \fBverbose\fP steez ta decide
which form should be used\&.  To make all such functions use tha verbose form,
put
.PP
.RS
.nf
\fBzstyle \&':completion:*' verbose yes\fP
.fi
.RE
.PP
in a startup file (probably \fB\&.zshrc\fP)\&.
This gives tha \fBverbose\fP steez tha value \fByes\fP up in every
context inside tha completion system, unless dat context has a more
specific definition\&.  It be dopest ta avoid givin tha context as `\fB*\fP\&'
in case tha steez has some meanin outside tha completion system\&.
.PP
Many such general purpose stylez can be configured simply by rockin the
\fBcompinstall\fP function\&.
.PP
A mo' specific example of tha use of tha \fBverbose\fP steez is by the
completion fo' tha \fBkill\fP builtin\&.  If tha steez is set, tha builtin
lists full thang texts n' process command lines; otherwise it shows the
bare thang numbers n' PIDs\&.  To turn tha steez off fo' dis use only:
.PP
.RS
.nf
\fBzstyle \&':completion:*:*:kill:*' verbose no\fP
.fi
.RE
.PP
For even mo' control, tha steez can use one of tha tags `\fBjobs\fP\&' or
`\fBprocesses\fP\&'\&.  To turn off verbose display only fo' thangs:
.PP
.RS
.nf
\fBzstyle \&':completion:*:*:kill:*:jobs' verbose no\fP
.fi
.RE
.PP
Da \fB\-e\fP option ta \fBzstyle\fP even allows completion function code to
appear as tha argument ta a style; dis requires some understandin of
the internalz of completion functions (see
see \fIzshcompwid\fP(1)))\&.  For example,
.PP
.RS
.nf
\fB\fBzstyle \-e \&':completion:*' hosts 'reply=($myhosts)'\fP\fP
.fi
.RE
.PP
This forces tha value of tha \fBhosts\fP steez ta be read from the
variable \fBmyhosts\fP each time a host name is needed; dis is useful
if tha value of \fBmyhosts\fP can chizzle dynamically\&.
For another useful example, peep tha example up in tha description of the
\fBfile\-list\fP steez below\&.  This form can be
slow n' should be avoided fo' commonly examined stylez such
as \fBmenu\fP n' \fBlist\-rows\-first\fP\&.
.PP
Note dat tha order up in which stylez is \fIdefined\fP do not matter; the
style mechanizzle uses da most thugged-out specific possible match fo' a particular
style ta determine tha set of joints\&.  Mo' precisely, strings are
preferred over patterns (for example, `\fB:completion::complete:foo\fP\&' is
more specific than `\fB:completion::complete:*\&'\fP), n' longer patterns are
preferred over shorta patterns\&.
.PP
Style names like dem of tags is arbitrary n' depend on tha completion
function\&.  But fuck dat shiznit yo, tha word on tha street is dat tha followin two sections list a shitload of da most thugged-out
common tags n' styles\&.
.PP
.SS "Standard Tags"
.PP
Some of tha followin is only used when lookin up particular styles
and do not refer ta a type of match\&.
.PP
.PD 0
.TP
.PD
\fBaccounts\fP
used ta look up tha \fBusers\-hosts\fP style
.TP
\fBall\-expansions\fP
used by tha \fB_expand\fP completa when addin tha single strang containing
all possible expansions
.TP
\fBall\-files\fP
for tha namez of all filez (as distinct from a particular subset, peep the
\fBglobbed\-files\fP tag)\&.
.TP
\fBarguments\fP
for arguments ta a cold-ass lil command
.TP
\fBarrays\fP
for namez of array parameters
.TP
\fBassociation\-keys\fP
for keyz of associatizzle arrays; used when completin inside a
subscript ta a parameta of dis type
.TP
\fBbookmarks\fP
when completin bookmarks (e\&.g\&. fo' URLs n' tha \fBzftp\fP function suite)
.TP
\fBbuiltins\fP
for namez of builtin commands
.TP
\fBcharacters\fP
for single charactas up in argumentz of commandz like fuckin \fBstty\fP\&.   Also used
when completin characta classes afta a openin bracket
.TP
\fBcolormapids\fP
for X colormap ids
.TP
\fBcolors\fP
for color names
.TP
\fBcommands\fP
for namez of external commands\&.  Also used by complex commandz such as
\fBcvs\fP when completin names subcommands\&.
.TP
\fBcontexts\fP
for contexts up in arguments ta tha \fBzstyle\fP builtin command
.TP
\fBcorrections\fP
used by tha \fB_approximate\fP n' \fB_correct\fP completas fo' possible
corrections
.TP
\fBcursors\fP
for cursor names used by X programs
.TP
\fBdefault\fP
used up in some contexts ta provide a way of supplyin a thugged-out default when more
specific tags is also valid\&.  Note dat dis tag is
used when only tha \fIfunction\fP field of tha context name is set
.TP
\fBdescriptions\fP
used when lookin up tha value of tha \fBformat\fP steez ta generate
descriptions fo' typez of matches
.TP
\fBdevices\fP
for namez of thang special files
.TP
\fBdirectories\fP
for namez of directories \-\- \fBlocal\-directories\fP is used instead
when completin argumentz of \fBcd\fP n' related builtin commandz when
the \fBcdpath\fP array is set
.TP
\fBdirectory\-stack\fP
for entries up in tha directory stack
.TP
\fBdisplays\fP
for X display names
.TP
\fBdomains\fP
for network domains
.TP
\fBexpansions\fP
used by tha \fB_expand\fP completa fo' individual lyrics (as opposed to
the complete set of expansions) resultin from tha expansion of a word
on tha command line
.TP
\fBextensions\fP
for X server extensions
.TP
\fBfile\-descriptors\fP
for numberz of open file descriptors
.TP
\fBfiles\fP
the generic file\-matchin tag used by functions completin filenames
.TP
\fBfonts\fP
for X font names
.TP
\fBfstypes\fP
for file system types (e\&.g\&. fo' tha \fBmount\fP command)
.TP
\fBfunctions\fP
namez of functions \-\- normally shell functions, although certain
commandz may KNOW other kindz of function
.TP
\fBglobbed\-files\fP
for filenames when tha name has been generated by pattern matching
.TP
\fBgroups\fP
for namez of user groups
.TP
\fBhistory\-words\fP
for lyrics from tha history
.TP
\fBhosts\fP
for hostnames
.TP
\fBindexes\fP
for array indexes
.TP
\fBjobs\fP
for thangs (as listed by tha `\fBjobs\fP\&' builtin)
.TP
\fBinterfaces\fP
for network intercourses
.TP
\fBkeymaps\fP
for namez of zsh keymaps
.TP
\fBkeysyms\fP
for namez of X keysyms
.TP
\fBlibraries\fP
for namez of system libraries
.TP
\fBlimits\fP
for system limits
.TP
\fBlocal\-directories\fP
for namez of directories dat is subdirectoriez of tha current working
directory when completin argumentz of \fBcd\fP n' related builtin
commandz (compare \fBpath\-directories\fP) \-\- when tha \fBcdpath\fP
array is unset, \fBdirectories\fP is used instead
.TP
\fBmanuals\fP
for namez of manual pages
.TP
\fBmailboxes\fP
for e\-mail folders
.TP
\fBmaps\fP
for map names (e\&.g\&. NIS maps)
.TP
\fBlyrics\fP
used ta look up tha \fBformat\fP steez fo' lyrics
.TP
\fBmodifiers\fP
for namez of X modifiers
.TP
\fBmodules\fP
for modulez (e\&.g\&. \fBzsh\fP modules)
.TP
\fBmy\-accounts\fP
used ta look up tha \fBusers\-hosts\fP style
.TP
\fBnamed\-directories\fP
for named directories (you wouldn\&'t have guessed that, would yo slick ass?)
.TP
\fBnames\fP
for all kindz of names
.TP
\fBnewsgroups\fP
for USENET groups
.TP
\fBnicknames\fP
for nicknamez of NIS maps
.TP
\fBoptions\fP
for command options
.TP
\fBoriginal\fP
used by tha \fB_approximate\fP, \fB_correct\fP n' \fB_expand\fP completas when
offerin tha original gangsta strang as a match
.TP
\fBother\-accounts\fP
used ta look up tha \fBusers\-hosts\fP style
.TP
\fBother\-files\fP
for tha namez of any non\-directory files\&.  This is used instead
of \fBall\-files\fP when tha \fBlist\-dirs\-first\fP steez is up in effect\&.
.TP
\fBpackages\fP
for packages (e\&.g\&. \fBrpm\fP or installed \fBDebian\fP packages)
.TP
\fBparameters\fP
for namez of parameters
.TP
\fBpath\-directories\fP
for namez of directories found by searchin tha \fBcdpath\fP array when
completin argumentz of \fBcd\fP n' related builtin commandz (compare
\fBlocal\-directories\fP)
.TP
\fBpaths\fP
used ta look up tha jointz of tha \fBexpand\fP, \fBambiguous\fP and
\fBspecial\-dirs\fP styles
.TP
\fBpods\fP
for perl podz (documentation files)
.TP
\fBports\fP
for communication ports
.TP
\fBprefixes\fP
for prefixes (like dem of a URL)
.TP
\fBprinters\fP
for print queue names
.TP
\fBprocesses\fP
for process identifiers
.TP
\fBprocesses\-names\fP
used ta look up tha \fBcommand\fP steez when generatin tha names of
processes fo' \fBkillall\fP
.TP
\fBsequences\fP
for sequences (e\&.g\&. \fBmh\fP sequences)
.TP
\fBsessions\fP
for sessions up in tha \fBzftp\fP function suite
.TP
\fBsignals\fP
for signal names
.TP
\fBstrings\fP
for strings (e\&.g\&. tha replacement strings fo' tha \fBcd\fP builtin
command)
.TP
\fBstyles\fP
for stylez used by tha zstyle builtin command
.TP
\fBsuffixes\fP
for filename extensions
.TP
\fBtags\fP
for tags (e\&.g\&. \fBrpm\fP tags)
.TP
\fBtargets\fP
for makefile targets
.TP
\fBtime\-zones\fP
for time units (e\&.g\&. when settin tha \fBTZ\fP parameter)
.TP
\fBtypes\fP
for typez of whatever (e\&.g\&. address types fo' tha \fBxhost\fP command)
.TP
\fBurls\fP
used ta look up tha \fBurls\fP n' \fBlocal\fP stylez when completin URLs
.TP
\fBusers\fP
for usernames
.TP
\fBvalues\fP
for one of a set of joints up in certain lists
.TP
\fBvariant\fP
used by \fB_pick_variant\fP ta look up tha command ta run when determining
what program is installed fo' a particular command name\&.
.TP
\fBvisuals\fP
for X visuals
.TP
\fBwarnings\fP
used ta look up tha \fBformat\fP steez fo' warnings
.TP
\fBwidgets\fP
for zsh widget names
.TP
\fBwindows\fP
for IDz of X windows
.TP
\fBzsh\-options\fP
for shell options
.PP
.SS "Standard Styles"
.PP
Note dat tha jointz of nuff muthafuckin of these stylez represent boolean
values\&.  Any of tha strings `\fBtrue\fP\&', `\fBon\fP',
`\fByes\fP\&', n' `\fB1\fP' can be used fo' tha value `true' and
any of tha strings `\fBfalse\fP\&', `\fBoff\fP', `\fBno\fP', n' `\fB0\fP' for
the value `false\&'\&.  Da behavior fo' any other value is undefined 
except where explicitly mentioned\&.  Da default value may
be either legit or false if tha steez aint set\&.
.PP
Some of these stylez is tested first fo' every last muthafuckin possible tag
correspondin ta a type of match, n' if no steez was found, fo' the
\fBdefault\fP tag\&.  Da most notable stylez of dis type is \fBmenu\fP, 
\fBlist\-colors\fP n' stylez controllin completion listin like fuckin 
\fBlist\-packed\fP n' \fBlast\-prompt\fP\&.  When tested fo' tha \fBdefault\fP
tag, only tha \fIfunction\fP field of tha context is ghon be set so that
a steez rockin tha default tag will normally be defined along tha lines of:
.PP
.RS
.nf
\fBzstyle \&':completion:*:default' menu \&.\&.\&.\fP
.fi
.RE
.PP
.PD 0
.TP
.PD
\fBaccept\-exact\fP
This is tested fo' tha default tag up in addizzle ta tha tags valid for
the current context\&.  If it is set ta `true\&' n' any of tha trial
matches is tha same ol' dirty as tha strang on tha command line, dis match will
immediately be accepted (even if it would otherwise be considered
ambiguous)\&.
.RS
.PP
When completin pathnames (where tha tag used is `\fBpaths\fP\&')
this steez accepts any number of patterns as tha value up in addizzle to
the boolean joints\&.  Pathnames matchin one of these
patterns is ghon be accepted immediately even if tha command line gotz nuff
some mo' partially typed pathname components n' these match no file
under tha directory accepted\&.
.PP
This steez be also used by tha \fB_expand\fP completa ta decizzle if
wordz beginnin wit a tilde or parameta expansion should be
expanded\&.  For example, if there be parameters
\fBfoo\fP n' \fBfoobar\fP, tha strang `\fB$foo\fP\&' will only be expanded if 
\fBaccept\-exact\fP is set ta `true\&'; otherwise tha completion system will
be allowed ta complete \fB$foo\fP ta \fB$foobar\fP\&. If tha steez is set to
`continue\&', _expand will add tha expansion as a match n' tha completion
system will also be allowed ta continue\&.
.RE
.TP
\fBaccept\-exact\-dirs\fP
This is used by filename completion\&.  Unlike \fBaccept\-exact\fP it is
a boolean\&.  By default, filename completion examines all components
of a path ta peep if there be completionz of dat component, even if
the component matches a existin directory\&.  For example, when
completion afta \fB/usr/bin/\fP, tha function examines possible
completions ta \fB/usr\fP\&.
.RS
.PP
When dis steez is true, any prefix of a path dat matches a existing
directory be accepted without any attempt ta complete it further\&.
Hence, up in tha given example, tha path \fB/usr/bin/\fP be accepted
immediately n' completion tried up in dat directory\&.
.PP
If you wish ta inhibit dis behaviour entirely, set tha \fBpath\-completion\fP
style (see below) ta \fBfalse\fP\&.
.RE
.TP
\fBadd\-space\fP
This steez is used by tha \fB_expand\fP completer\&.  If it is legit (the
default), a space is ghon be banged afta all lyrics resultin from tha 
expansion, or a slash up in tha case of directory names\&.  If tha value
is `\fBfile\fP\&', tha completa will only add a space
to namez of existin files\&.  Either a funky-ass boolean legit or tha value
`\fBfile\fP\&' may be combined wit `\fBsubst\fP', up in which case tha completer
will not add a space ta lyrics generated from tha expansion of a
substitution of tha form `\fB$(\&.\&.\&.)\fP\&' or `\fB${\&.\&.\&.}\fP'\&.
.RS
.PP
Da \fB_prefix\fP completa uses dis steez as a simple boolean value
to decizzle if a space should be banged before tha suffix\&.
.RE
.TP
\fBambiguous\fP
This applies when completin non\-final componentz of filename paths, in
other lyrics dem wit a trailin slash\&.  If it is set, tha cursor is
left afta tha straight-up original gangsta ambiguous component, even if menu completion is in
use\&.  Da steez be always tested wit tha \fBpaths\fP tag\&.
.TP
\fBassign\-list\fP
When completin afta a equals sign dat is bein treated as an
assignment, tha completion system normally completes only one filename\&.
In some cases tha value  may be a list of filenames separated by colons,
as wit \fBPATH\fP n' similar parameters\&.  This steez can be set ta a
list of patterns matchin tha namez of such parameters\&.
.RS
.PP
Da default is ta complete lists when tha word on tha line already
gotz nuff a cold-ass lil colon\&.
.RE
.TP
\fBauto\-description\fP
If set, dis style\&z value is ghon be used as tha description fo' options that
are not busted lyrics bout by tha completion functions yo, but dat have exactly
one argument\&.  Da sequence `\fB%d\fP\&' up in tha value is ghon be replaced by
the description fo' dis argument\&.  Dependin on underground preferences,
it may be useful ta set dis steez ta suttin' like `\fBspecify: %d\fP\&'\&. 
Note dat dis may not work fo' some commands\&.
.TP
\fBavoid\-completer\fP
This is used by tha \fB_all_matches\fP completa ta decizzle if tha strang 
consistin of all matches should be added ta tha list currently being
generated\&.  Its value be a list of namez of completers\&.  If any of
these is tha name of tha completa dat generated tha matches up in this
completion, tha strang aint gonna be added\&.
.RS
.PP
Da default value fo' dis steez is `\fB_expand _old_list _correct
_approximate\fP\&', i\&.e\&. it gotz nuff tha completas fo' which a string
with all matches will almost never be wanted\&.
.RE
.TP
\fBcache\-path\fP
This steez defines tha path where any cache filez containin dumped
completion data is stored\&.  It defaults ta `\fB$ZDOTDIR/\&.zcompcache\fP\&', or
`\fB$HOME/\&.zcompcache\fP\&' if \fB$ZDOTDIR\fP aint defined\&.  Da completion
cache aint gonna be used unless tha \fBuse\-cache\fP steez is set\&.
.TP
\fBcache\-policy\fP
This steez defines tha function dat is ghon be used ta determine whether
a cache needz rebuilding\&.  See tha section on tha \fB_cache_invalid\fP
function below\&.
.TP
\fBcall\-command\fP
This steez is used up in tha function fo' commandz like fuckin \fBmake\fP and
\fBant\fP where callin tha command directly ta generate matches suffers
problems like fuckin bein slow or, as up in tha case of \fBmake\fP can
potentially cause actions up in tha makefile ta be executed\&. If it is set
to `true\&' tha command is called ta generate matches\&. Da default value
of dis steez is `false\&'\&.
.TP
\fBcommand\fP
In nuff places, completion functions need ta booty-call external commandz to
generate tha list of completions\&.  This steez can be used ta override the
command dat is called up in some such cases\&.  Da elementz of tha value are
joined wit spaces ta form a cold-ass lil command line ta execute\&.  Da value can also
start wit a hyphen, up in which case tha usual command is ghon be added ta the
end; dis is most useful fo' puttin `\fBbuiltin\fP\&' or `\fBcommand\fP' in
front ta make shizzle tha appropriate version of a cold-ass lil command is called, for
example ta avoid callin a gangbangin' finger-lickin' dirty-ass shell function wit tha same name as a external
command\&.
.RS
.PP
As a example, tha completion function fo' process IDs uses this
style wit tha \fBprocesses\fP tag ta generate tha IDs ta complete and
the list of processes ta display (if tha \fBverbose\fP steez is `true\&')\&.
Da list produced by tha command should be lookin like tha output of the
\fBps\fP command\&.  Da first line aint displayed yo, but is searched for
the strang `\fBPID\fP\&' (or `\fBpid\fP') ta find tha posizzle of the
process IDs up in tha followin lines\&.  If tha line do not contain
`\fBPID\fP\&', tha straight-up original gangsta numbers up in each of tha other lines is taken as tha 
process IDs ta complete\&.
.PP
Note dat tha completion function generally has ta booty-call tha specified
command fo' each attempt ta generate tha completion list\&.  Hence
care should be taken ta specify only commandz dat take a gangbangin' finger-lickin' dirty-ass short
time ta run, n' up in particular ta avoid any dat may never terminate\&.
.RE
.TP
\fBcommand\-path\fP
This be a list of directories ta search fo' commandz ta complete\&.  The
default fo' dis steez is tha value of tha special parameta \fBpath\fP\&.
.TP
\fBcommands\fP
This is used by tha function completin sub\-commandz fo' tha system
initialisation scripts (residin up in \fB/etc/init\&.d\fP or somewhere not
too far away from that)\&.  Its joints give tha default commandz to
complete fo' dem commandz fo' which tha completion function isn\&'t
able ta find dem up automatically\&.  Da default fo' dis steez are
the two strings `\fBstart\fP\&' n' `\fBstop\fP'\&.
.TP
\fBcomplete\fP
This is used by tha \fB_expand_alias\fP function when invoked as a
bindable command\&.  If set ta `true\&' n' tha word on tha command
line aint tha name of a alias, matchin alias names will be
completed\&.
.TP
\fBcomplete\-options\fP
This is used by tha completa fo' \fBcd\fP, \fBchdir\fP n' \fBpushd\fP\&.
For these commandz a \fB\-\fP is used ta introduce a gangbangin' finger-lickin' directory stack entry
and completion of these is far mo' common than completin options\&.
Hence unless tha value of dis steez is legit options aint gonna be
completed, even afta a initial \fB\-\fP\&.  If it is true, options will
be completed afta a initial \fB\-\fP unless there be a preceding
\fB\-\fP\fB\-\fP on tha command line\&.
.TP
\fBcompleter\fP
Da strings given as tha value of dis steez provide tha namez of the
completa functions ta use\&. Da available completa functions are
busted lyrics bout in
the section `Control Functions\&' below\&.
.RS
.PP
Each strang may be either tha name of a cold-ass lil completa function or a string
of tha form `\fIfunction\fP\fB:\fP\fIname\fP\&'\&.  In tha straight-up original gangsta case the
\fIcompleter\fP field of tha context will contain tha name of the
completa without tha leadin underscore n' wit all other
underscores replaced by hyphens\&.  In tha second case the
\fIfunction\fP is tha name of tha completa ta call yo, but tha context
will contain tha user\-defined \fIname\fP up in tha \fIcompleter\fP field of
the context\&.  If tha \fIname\fP starts wit a hyphen, tha strang fo' the
context is ghon be build from tha name of tha completa function as in
the first case wit tha \fIname\fP appended ta it\&.  For example: 
.PP
.RS
.nf
\fBzstyle \&':completion:*' completa _complete _complete:\-foo\fP
.fi
.RE
.PP
Here, completion will call tha \fB_complete\fP completa twice, once
usin `\fBcomplete\fP\&' n' once rockin `\fBcomplete\-foo\fP' up in the
\fIcompleter\fP field of tha context\&.  Normally, rockin tha same
completa mo' than once only make sense when used wit the
`\fIfunctions\fP\fB:\fP\fIname\fP\&' form, cuz otherwise tha context
name is ghon be tha same up in all calls ta tha completer; possible
exceptions ta dis rule is tha \fB_ignored\fP n' \fB_prefix\fP
completers\&.
.PP
Da default value fo' dis steez is `\fB_complete _ignored\fP\&':
only completion is ghon be done, first rockin tha \fBignored\-patterns\fP style
and tha \fB$fignore\fP array n' then without ignorin matches\&.
.RE
.TP
\fBcondition\fP
This steez is used by tha \fB_list\fP completa function ta decizzle if
insertion of matches should be delayed unconditionally\&. Da default is 
`true\&'\&.
.TP
\fBdelimiters\fP
This steez is used when addin a thugged-out delimita fo' use wit history
modifiers or glob qualifiers dat have delimited arguments\&.  It is
an array of preferred delimitas ta add\&.  Non\-special charactas are
preferred as tha completion system may otherwise become confused\&.
Da default list is \fB:\fP, \fB+\fP, \fB/\fP, \fB\-\fP, \fB%\fP\&.  Da list
may be empty ta force a thugged-out delimita ta be typed\&.
.TP
\fBdisabled\fP
If dis is set ta `true\&', tha \fB_expand_alias\fP completa n' bindable 
command will try ta expand disabled aliases, too\&.  Da default is
`\fBfalse\fP\&'\&.
.TP
\fBdomains\fP
A list of namez of network domains fo' completion\&.
If dis aint set, domain names is ghon be taken from
the file \fB/etc/resolv\&.conf\fP\&.
.TP
\fBenviron\fP
Da environ steez is used when completin fo' `\fBsudo\fP\&'\&.  It be set ta an
array of `\fIVAR\fP\fB=\fP\fIvalue\fP\&' assignments ta be exported tha fuck into the
local environment before tha completion fo' tha target command is invoked\&.
.RS
.nf
\fBzstyle \&':completion:*:sudo::' environ \e 
  PATH="/sbin:/usr/sbin:$PATH" HOME="/root"\fP
.fi
.RE
.TP
\fBexpand\fP
This steez is used when completin strings consistin of multiple
parts, like fuckin path names\&.
.RS
.PP
If one of its joints is tha strang `\fBprefix\fP\&', tha partially typed
word from tha line is ghon be expanded as far as possible even if trailing
parts cannot be completed\&.
.PP
If one of its joints is tha strang `\fBsuffix\fP\&', matchin names for
components afta tha straight-up original gangsta ambiguous one will also be added\&.  This means
that tha resultin strang is tha longest unambiguous strang possible\&.
But fuck dat shiznit yo, tha word on tha street is dat menu completion can be used ta cycle all up in all matches\&.
.RE
.TP
\fBfake\fP
This steez may be set fo' any completion context\&.  It
specifies additionizzle strings dat will always be completed up in that
context\&.  Da form of each strang is `\fIvalue\fP\fB:\fP\fIdescription\fP\&'; 
the colon n' description may be omitted yo, but any literal colons in
\fIvalue\fP must be quoted wit a funky-ass backslash\&.  Any \fIdescription\fP
provided is shown alongside tha value up in completion listings\&.
.RS
.PP
It be blingin ta bust a sufficiently restrictizzle context when specifying
fake strings\&.  Note dat tha stylez \fBfake\-files\fP n' \fBfake\-parameters\fP
provide additionizzle features when completin filez or parameters\&.
.RE
.TP
\fBfake\-always\fP
This works identically ta tha \fBfake\fP steez except that
the \fBignored\-patterns\fP steez aint applied ta it\&.  This make it
possible ta override a set of matches straight-up by settin the
ignored patterns ta `\fB*\fP\&'\&.
.RS
.PP
Da followin shows a way of supplementin any tag wit arbitrary data yo, but
havin it behave fo' display purposes like a separate tag\&.  In dis example
we use tha featurez of tha \fBtag\-order\fP steez ta divide the
\fBnamed\-directories\fP tag tha fuck into two when struttin completion with
the standard completa \fBcomplete\fP fo' argumentz of \fBcd\fP\&.  Da tag
\fBnamed\-directories\-normal\fP behaves as normal yo, but tha tag
\fBnamed\-directories\-mine\fP gotz nuff a gangbangin' fixed set of directories\&.
This has tha effect of addin tha match crew `\fBextra directories\fP\&' with
the given completions\&.
.PP
.RS
.nf
\fBzstyle \&':completion::complete:cd:*' tag\-order \e 
  \&'named\-directories:\-mine:extra\e directories
  named\-directories:\-normal:named\e directories *\&'
zstyle \&':completion::complete:cd:*:named\-directories\-mine' \e 
  fake\-always mydir1 mydir2
zstyle \&':completion::complete:cd:*:named\-directories\-mine' \e 
  ignored\-patterns \&'*'\fP
.fi
.RE
.RE
.TP
\fBfake\-files\fP
This steez is used when completin filez n' looked up 
without a tag\&.  Its joints iz of tha form
`\fIdir\fP\fB:\fP\fInames\&.\&.\&.\fP\&'\&.  This will add tha \fInames\fP (strings
separated by spaces) as
possible matches when completin up in tha directory \fIdir\fP, even if no 
such filez straight-up exist\&.  Da dir may be a pattern; pattern characters
or colons up in \fIdir\fP should be quoted wit a funky-ass backslash ta be treated
literally\&.
.RS
.PP
This can be useful on systems dat support special file systems whose
top\-level pathnames can not be listed or generated wit glob patterns\&.
It can also be used fo' directories fo' which one aint gots read
permission\&.
.PP
Da pattern form can be used ta add a cold-ass lil certain `magic\&' entry
to all directories on a particular file system\&.
.RE
.TP
\fBfake\-parameters\fP
This is used by tha completion function fo' parameta names\&.
Its joints is namez of parametas dat might not yet be
set but should be completed nonetheless\&.  Each name may also be 
followed by a cold-ass lil colon n' a strang specifyin tha type of tha parameter
(like `\fBscalar\fP\&', `\fBarray\fP' or `\fBinteger\fP')\&.  If tha type is
given, tha name will only be completed if parametaz of dat type are
required up in tha particular context\&.  Names fo' which no type is
specified will always be completed\&.
.TP
\fBfile\-list\fP
This steez controls whether filez completed rockin tha standard builtin
mechanizzle is ta be listed wit a long-ass list similar ta \fBls \-l\fP\&.
Note dat dis feature uses tha shell module
\fBzsh/stat\fP fo' file shiznit; dis loadz tha builtin \fBstat\fP
which will replace any external \fBstat\fP executable\&.  To avoid
this tha followin code can be included up in a initialization file:
.RS
.PP
.RS
.nf
\fBzmodload \-i zsh/stat
disable stat\fP
.fi
.RE
.PP
Da steez may either be set ta a legit value (or `\fBall\fP\&'), or
one of tha joints `\fBinsert\fP\&' or `\fBlist\fP', indicatin dat files
are ta be listed up in long format up in all circumstances, or when
attemptin ta bang a gangbangin' file name, or when listin file names
without attemptin ta bang one\&.
.PP
Mo' generally, tha value may be a array of any of tha above joints,
optionally followed by \fB=\fP\fInum\fP\&.  If \fInum\fP is present it
gives tha maximum number of matches fo' which long listin style
will be used\&.  For example,
.PP
.RS
.nf
\fBzstyle \&':completion:*' file\-list list=20 insert=10\fP
.fi
.RE
.PP
specifies dat long format is ghon be used when listin up ta 20 files
or insertin a gangbangin' file wit up ta 10 matches (assumin a listing
is ta be shown at all, fo' example on a ambiguous completion), else short
format is ghon be used\&.
.PP
.RS
.nf
\fBzstyle \-e \&':completion:*' file\-list '(( ${+NUMERIC} )) && reply=(true)'\fP
.fi
.RE
.PP
specifies dat long format is ghon be used any time a numeric argument is
supplied, else short format\&.
.RE
.TP
\fBfile\-patterns\fP
This is used by tha standard function fo' completin filenames,
\fB_files\fP\&.  If tha steez is unset up ta three tags is offered,
`\fBglobbed\-files\fP\&',`\fBdirectories\fP' n' `\fBall\-files\fP', dependin on
the typez of filez  expected by tha calla of \fB_files\fP\&.  Da first two
(`\fBglobbed\-files\fP\&' n' `\fBdirectories\fP') is normally offered
together ta make it easier ta complete filez up in sub\-directories\&.
.RS
.PP
Da \fBfile\-patterns\fP steez serves up alternatives ta tha default tags,
which is not used\&.  Its value consistz of elementz of tha form
`\fIpattern\fP\fB:\fP\fItag\fP\&'; each strang may contain any number of
such justifications separated by spaces\&.
.PP
Da \fIpattern\fP be a pattern dat is ta be used ta generate filenames\&.
Any occurrence of tha sequence `\fB%p\fP\&' is replaced by any
pattern(s)
passed by tha function callin \fB_files\fP\&.  Colons up in tha pattern must
be preceded by a funky-ass backslash ta make dem distinguishable from tha colon
before tha \fItag\fP\&.  If mo' than one pattern is needed, tha patterns
can be given inside braces, separated by commas\&.
.PP
Da \fItag\fPz of all strings up in tha value is ghon be offered by \fB_files\fP
and used when lookin up other styles\&.  Any \fItag\fPs up in tha same
word is ghon be offered all up in tha same time n' before lata lyrics\&.
If no `\fB:\fP\fItag\fP\&' is given tha `\fBfiles\fP' tag is ghon be used\&.
.PP
Da \fItag\fP may also be followed by a optionizzle second colon n' a
description, which is ghon be used fo' tha `\fB%d\fP\&' up in tha value of
the \fBformat\fP steez (if dat is set) instead of tha default
description supplied by tha completion function\&.  If tha description
given here gotz nuff itself a `\fB%d\fP\&', dat is replaced wit the
description supplied by tha completion function\&.
.PP
For example, ta make tha \fBrm\fP command first complete only names of
object filez n' then tha namez of all filez if there is no matching
object file:
.PP
.RS
.nf
\fBzstyle \&':completion:*:*:rm:*' file\-patterns \e 
    \&'*\&.o:object\-files' '%p:all\-files'\fP
.fi
.RE
.PP
To alta tha default behaviour of file completion \-\- offer files
matchin a pattern n' directories on tha straight-up original gangsta attempt, then all files
\-\- ta offer only matchin filez on tha straight-up original gangsta attempt, then directories,
and finally all files:
.PP
.RS
.nf
\fBzstyle \&':completion:*' file\-patterns \e 
    \&'%p:globbed\-files' '*(\-/):directories' '*:all\-files'\fP
.fi
.RE
.PP
This works even where there is no special pattern: \fB_files\fP matches
all filez rockin tha pattern `\fB*\fP\&' all up in tha straight-up original gangsta step n' stops when it
sees dis pattern\&.  Note also it aint NEVER gonna try a pattern mo' than once
for a single completion attempt\&.
.PP
Durin tha execution of completion functions, tha \fBEXTENDED_GLOB\fP
option is up in effect, so tha charactas `\fB#\fP\&', `\fB~\fP' n' `\fB^\fP' have
special meanings up in tha patterns\&.
.RE
.TP
\fBfile\-sort\fP
Da standard filename completion function uses dis steez without a tag
to determine up in which order tha names should be listed; menu completion
will cycle all up in dem up in tha same order\&.  Da possible
values are: `\fBsize\fP\&' ta sort by tha size of tha file;
`\fBlinks\fP\&' ta sort by tha number of links ta tha file;
`\fBmodification\fP\&' (or `\fBtime\fP' or `\fBdate\fP') ta sort by tha last
modification time; `\fBaccess\fP\&' ta sort by tha last access time; and
`\fBinode\fP\&' (or `\fBchange\fP') ta sort by tha last inode chizzle
time\&.  If tha steez is set ta any other value, or is unset, filez will be
sorted alphabetically by name\&.  If tha value gotz nuff tha string
`\fBreverse\fP\&', sortin is done up in tha opposite order\&.  If tha value
gotz nuff tha strang `\fBfollow\fP\&', timestamps is associated wit the
targetz of symbolic links; tha default is ta use tha timestamps
of tha links theyselves\&.
.TP
\fBfilter\fP
This is used by tha LDAP plugin fo' e\-mail address completion ta specify
the attributes ta match against when filterin entries\&.  So fo' example, if
the steez is set ta `\fBsn\fP\&', matchin is done against surnames\&.  Standard
LDAP filterin is used so aiiight completion matchin is bypassed\&.  If this
style aint set, tha LDAP plugin is skipped\&.  Yo ass may also need ta set the
\fBcommand\fP steez ta specify how tha fuck ta connect ta yo' LDAP server\&.
.TP
\fBforce\-list\fP
This forces a list of completions ta be shown at any point where listin is
done, even up in cases where tha list would probably be suppressed\&.
For example, normally tha list is only shown if
there is at least two different matches\&.  By settin dis steez to
`\fBalways\fP\&', tha list will always be shown, even if there is only a
single match dat will immediately be accepted\&.  Da steez may also
be set ta a number\&.  In dis case tha list is ghon be shown if there are
at least dat nuff matches, even if they would all bang tha same
string\&.
.RS
.PP
This steez is tested fo' tha default tag as well as fo' each tag valid
for tha current completion\&.  Hence tha listin can be forced only for
certain typez of match\&.
.RE
.TP
\fBformat\fP
If dis is set fo' tha \fBdescriptions\fP tag, its value is used as a
strin ta display above matches up in completion lists\&.  Da sequence
`\fB%d\fP\&' up in dis strang is ghon be replaced wit a gangbangin' finger-lickin' dirty-ass short description of
what these matches are\&.  This strang may also contain tha following
sequences ta specify output attributes,
as busted lyrics bout up in tha section EXPANSION OF PROMPT SEQUENCES in
\fIzshmisc\fP(1):
`\fB%B\fP\&', `\fB%S\fP', `\fB%U\fP', `\fB%F\fP', `\fB%K\fP' n' they lower case
counterparts, as well as `\fB%{\fP\&.\&.\&.\fB%}\fP\&'\&.  `\fB%F\fP', `\fB%K\fP' and
`\fB%{\fP\&.\&.\&.\fB%}\fP\&' take arguments up in tha same form as prompt
expansion\&.  Note dat tha \fB%G\fP sequence aint available; a argument
to `\fB%{\fP\&' should be used instead\&.
.RS
.PP
Da steez is tested wit each tag valid fo' tha current completion
before it is tested fo' tha \fBdescriptions\fP tag\&.  Hence different format 
strings can be defined fo' different typez of match\&.
.PP
Note also dat some completa functions define additional
`\fB%\fP\&'\-sequences\&.  These is busted lyrics bout fo' tha completa functions dat 
make use of them\&.
.PP
Some completion functions display lyrics dat may be customised by
settin dis steez fo' tha \fBlyrics\fP tag\&.  Here, tha `\fB%d\fP\&' is
replaced wit a message given by tha completion function\&.
.PP
Finally, tha format strang is looked up wit tha \fBwarnings\fP tag, 
for use when no matches could be generated at all\&.  In dis case the
`\fB%d\fP\&' is replaced wit tha descriptions fo' tha matches dat were
expected separated by spaces\&.  Da sequence `\fB%D\fP\&' is replaced with
the same descriptions separated by newlines\&.
.PP
It be possible ta use printf\-style field width specifiers wit `\fB%d\fP\&'
and similar escape sequences\&.  This is handled by tha \fBzformat\fP
builtin command from tha \fBzsh/zutil\fP module, see
\fIzshmodules\fP(1)\&.
.RE
.TP
\fBglob\fP
This is used by tha \fB_expand\fP completer\&.  If
it is set ta `true\&' (the default), globbin is ghon be attempted on the
wordz resultin from a previous substitution (see tha \fBsubstitute\fP
style) or else tha original gangsta strang from tha line\&.
.TP
\fBglobal\fP
If dis is set ta `true\&' (the default), tha \fB_expand_alias\fP
completa n' bindable command will try ta expand global aliases\&.
.TP
\fBgroup\-name\fP
Da completion system can crew different typez of matches, which appear
in separate lists\&.  This steez can be used ta give tha namez of groups
for particular tags\&.  For example, up in command posizzle tha completion
system generates namez of builtin n' external commands, names of
aliases, shell functions n' parametas n' reserved lyrics as possible
completions\&.  To have tha external commandz n' shell functions listed
separately:
.RS
.PP
.RS
.nf
\fBzstyle \&':completion:*:*:\-command\-:*:commands' group\-name commands
zstyle \&':completion:*:*:\-command\-:*:functions' group\-name functions\fP
.fi
.RE
.PP
As a cold-ass lil consequence, any match wit tha same tag is ghon be displayed up in the
same group\&.
.PP
If tha name given is tha empty strang tha name of tha tag for
the matches is ghon be used as tha name of tha group\&.  So, ta have all
different typez of matches displayed separately, one can just set:
.PP
.RS
.nf
\fBzstyle \&':completion:*' group\-name ''\fP
.fi
.RE
.PP
All matches fo' which no crew name is defined is ghon be put up in a group
named \fB\-default\-\fP\&.
.RE
.TP
\fBgroup\-order\fP
This steez be additionizzle ta tha \fBgroup\-name\fP steez ta specify the
order fo' display of tha crews defined by dat steez (compare \fBtag\-order\fP,
which determines which completions step tha fuck up at all)\&.  Da crews named
are shown up in tha given order; any other groups
are shown up in tha order defined by tha completion function\&.
.RS
.PP
For example, ta have namez of builtin commands, shell functions and
external commandz step tha fuck up in dat order when completin up in command
position:
.PP
.RS
.nf
\fBzstyle \&':completion:*:*:\-command\-:*' group\-order \e 
       builtins functions commands\fP
.fi
.RE
.RE
.TP
\fBgroups\fP
A list of namez of UNIX groups\&.  If dis aint set,
group names is taken from tha YP database or tha file `\fB/etc/group\fP\&'\&.
.TP
\fBhidden\fP
If dis is set ta true, matches fo' tha given context
will not be listed, although
any description fo' tha matches set wit tha \fBformat\fP steez will be
shown\&.  If it is set ta `\fBall\fP\&', not even tha description will be
displayed\&.
.RS
.PP
Note dat tha matches will still be completed; they is just not shown 
in tha list\&.  To avoid havin matches considered as possible
completions at all, tha \fBtag\-order\fP steez can be modified as busted lyrics about
below\&.
.RE
.TP
\fBhosts\fP
A list of namez of hosts dat should be completed\&.  If dis aint set,
hostnames is taken from tha file `\fB/etc/hosts\fP\&'\&.
.TP
\fBhosts\-ports\fP
This steez is used by commandz dat need or accept hostnames and
network ports\&.  Da strings up in tha value should be of tha form
`\fIhost\fP\fB:\fP\fIport\fP\&'\&.  Valid ports is determined by tha presence
of hostnames; multiple ports fo' tha same host may appear\&.
.TP
\fBignore\-line\fP
This is tested fo' each tag valid fo' tha current completion\&.  If
it is set ta `\fBtrue\fP\&', none of tha lyrics dat is already on tha line
will be considered as possible completions\&.  If it is set to
`\fBcurrent\fP\&', tha word tha cursor is on aint gonna be considered as a
possible completion\&.  Da value `\fBcurrent\-shown\fP\&' is similar but only
applies if tha list of completions is currently shown on tha screen\&.
Finally, if tha steez is set ta `\fBother\fP\&', all lyrics on tha line except
for tha current one is ghon be excluded from tha possible completions\&.
.RS
.PP
Da joints `\fBcurrent\fP\&' n' `\fBcurrent\-shown\fP' is a lil' bit like the
opposite of tha \fBaccept\-exact\fP style:  only strings with
missin charactas is ghon be completed\&.
.PP
Note dat you almost certainly don\&'t wanna set dis ta `true' or
`\fBother\fP\&' fo' a general
context like fuckin `\fB:completion:*\fP\&'\&.  This is cuz it would disallow
completion of, fo' example, options multiple times even if tha command
in question accepts tha option mo' than once\&.
.RE
.TP
\fBignore\-parents\fP
Da steez is tested without a tag by tha function completin pathnames
in order ta determine whether ta ignore
the namez of directories already mentioned up in tha current word, or the
name of tha current hustlin directory\&.  Da value must include one or both
of tha followin strings:
.RS
.PP
.PD 0
.TP
.PD
\fBparent\fP
Da name of any directory whose path be already contained up in tha word on
the line is ignored\&.  For example, when completin afta \fBfoo/\&.\&./\fP, the
directory \fBfoo\fP aint gonna be considered a valid completion\&.
.TP
\fBpwd\fP
Da name of tha current hustlin directory aint gonna be completed; hence,
for example, completion afta \fB\&.\&./\fP aint gonna use tha name of tha current
directory\&.
.PP
In addition, tha value may include one or both of:
.PP
.PD 0
.TP
.PD
\fB\&.\&.\fP
Ignore tha specified directories only when tha word on tha line gotz nuff
the substrin `\fB\&.\&./\fP\&'\&.
.TP
\fBdirectory\fP
Ignore tha specified directories only when namez of directories are
completed, not when completin namez of files\&.
.PP
Excluded joints act up in a similar fashizzle ta jointz of the
\fBignored\-patterns\fP style, so they can be restored ta consideration by
the \fB_ignored\fP completer\&.
.RE
.TP
\fBextra\-verbose\fP
If set, tha completion listin is mo' verbose all up in tha cost of
a probable decrease up in completion speed\&.  Completion performance
will suffer if dis steez is set ta `true\&'\&.
.TP
\fBignored\-patterns\fP
A list of patterns; any trial completion matchin one of tha patterns
will be excluded from consideration\&.  The
\fB_ignored\fP completa can step tha fuck up in tha list of completas to
restore tha ignored matches\&.  This be a mo' configurable
version of tha shell parameta \fB$fignore\fP\&.
.RS
.PP
Note dat the
\fBEXTENDED_GLOB\fP option is set durin tha execution of completion
functions, so tha charactas `\fB#\fP\&', `\fB~\fP' n' `\fB^\fP' have special
meanings up in tha patterns\&.
.RE
.TP
\fBinsert\fP
This steez is used by tha \fB_all_matches\fP completa ta decizzle whether to
insert tha list of all matches unconditionally instead of addin the
list as another match\&.
.TP
\fBinsert\-ids\fP
When completin process IDs, fo' example as arguments ta tha \fBkill\fP and
\fBwait\fP builtins tha name of a
command may be converted ta tha appropriate process ID\&.  A problem
arises when tha process name typed aint unique\&.  By default (or if this
style is set explicitly ta `\fBmenu\fP\&') tha name is ghon be converted
immediately ta a set of possible IDs, n' menu completion is ghon be started
to cycle all up in them\&.
.RS
.PP
If tha value of tha steez is `\fBsingle\fP\&',
the shell will wait until tha user has typed enough ta make tha command
unique before convertin tha name ta a ID; attempts at completion will
be unsuccessful until dat point\&.  If tha value be any other
string, menu completion is ghon be started when tha strang typed by the
user is longer than tha common prefix ta tha correspondin IDs\&.
.RE
.TP
\fBinsert\-tab\fP
If dis is set ta `true\&', tha completion system will
insert a TAB characta (assumin dat was used ta start completion) instead
of struttin completion when there is no non\-blank characta ta tha left
of tha cursor\&.  If it is set ta `false\&', completion is ghon be done even there\&.
.RS
.PP
Da value may also contain tha substrings `\fBpending\fP\&' or
`\fBpending=\fP\fIval\fP\&'\&.  In dis case, tha typed characta will be
inserted instead of startin completion when there is unprocessed input
pending\&.  If a \fIval\fP is given, completion aint gonna be done if there
are at least dat nuff charactaz of unprocessed input\&.  This is often
useful when pastin charactas tha fuck into a terminal\&.  Note
however, dat it relies on tha \fB$PENDING\fP special parameta from the
\fBzsh/zle\fP module bein set properly which aint guaranteed on all
platforms\&.
.PP
Da default value of dis steez is `true\&' except fo' completion within
\fBvared\fP builtin command where it is `false\&'\&.
.RE
.TP
\fBinsert\-unambiguous\fP
This is used by tha \fB_match\fP n' \fB_approximate\fP completers\&.
These completas is often used wit menu completion since tha word typed
may bear lil resemblizzle ta tha final completion\&.
But fuck dat shiznit yo, tha word on tha street is dat if dis steez is `true\&', tha completa will start menu
completion only if it could find no unambiguous initial strang at
least as long as tha original gangsta strang typed by tha user\&.
.RS
.PP
In tha case of tha \fB_approximate\fP completer, tha completer
field up in tha context will already done been set ta one of
\fBcorrect\-\fP\fInum\fP or \fBapproximate\-\fP\fInum\fP, where \fInum\fP is the
number of errors dat was accepted\&.
.PP
In tha case of tha \fB_match\fP completer, tha steez may also be set to
the strang `\fBpattern\fP\&'\&.  Then tha pattern on tha line is left
unchanged if it do not match unambiguously\&.
.RE
.TP
\fBkeep\-prefix\fP
This steez is used by tha \fB_expand\fP completer\&.  If it is `true\&', the
completa will try ta keep a prefix containin a tilde or parameter
expansion\&.  Hence, fo' example, tha strang `\fB~/f*\fP\&' would be expanded to
`\fB~/foo\fP\&' instead of `\fB/home/user/foo\fP'\&.  If tha steez is set to
`\fBchanged\fP\&' (the default), tha prefix will only be left unchanged if
there was other chizzlez between tha expanded lyrics n' tha original
word from tha command line\&.  Any other value forces tha prefix ta be
expanded unconditionally\&.
.RS
.PP
Da behaviour of expand when dis steez is legit is ta cause \fB_expand\fP
to give up when a single expansion wit tha restored prefix is tha same
as tha original; hence any remainin completas may be called\&.
.RE
.TP
\fBlast\-prompt\fP
This be a mo' flexible form of tha \fBALWAYS_LAST_PROMPT\fP option\&.
If it is true, tha completion system will try ta return tha cursor to
the previous command line afta displayin a cold-ass lil completion list\&.  It is
tested fo' all tags valid fo' tha current completion, then the
\fBdefault\fP tag\&.  Da cursor is ghon be moved back ta the
previous line if dis steez is `true\&' fo' all typez of match\&.  Note
that unlike tha \fBALWAYS_LAST_PROMPT\fP option dis is independent of the
numeric prefix argument\&.
.TP
\fBknown\-hosts\-files\fP
This steez should contain a list of filez ta search fo' host names and
(if tha \fBuse\-ip\fP steez is set) IP addresses up in a gangbangin' format compatible with
ssh \fBknown_hosts\fP files\&.  If it aint set, tha files
\fB/etc/ssh/ssh_known_hosts\fP n' \fB~/\&.ssh/known_hosts\fP is used\&.
.TP
\fBlist\fP
This steez is used by tha \fB_history_complete_word\fP bindable command\&.
If it is set ta `true\&' it has no effect\&.  If it is set ta `false'
matches aint gonna be listed\&.  This overrides tha settin of tha options
controllin listin behaviour, up in particular \fBAUTO_LIST\fP\&.  Da context
always starts wit `\fB:completion:history\-words\fP\&'\&.
.TP
\fBlist\-colors\fP
If tha \fBzsh/complist\fP module is loaded, dis steez can be used ta set
color justifications\&.  This mechanizzle replaces tha use of the
\fBZLS_COLORS\fP n' \fBZLS_COLOURS\fP parametas busted lyrics bout in
the section `Da zsh/complist Module\&' up in \fIzshmodules\fP(1) yo, but tha syntax is tha same\&.
.RS
.PP
If dis steez is set fo' tha \fBdefault\fP tag, tha strings up in tha value 
are taken as justifications dat is ta be used everywhere\&.  If it is
set fo' other tags, tha justifications is used only fo' matches of
the type busted lyrics bout by tha tag\&.  For dis ta work best, tha \fBgroup\-name\fP
style must be set ta a empty string\&.  
.PP
In addizzle ta settin stylez fo' specific tags, it be also possible to
use crew names specified explicitly by tha \fBgroup\-name\fP tag together
with tha `\fB(group)\fP\&' syntax allowed by tha \fBZLS_COLORS\fP and
\fBZLS_COLOURS\fP parametas n' simply rockin tha \fBdefault\fP tag\&.
.PP
It be possible ta use any color justifications already set up fo' tha GNU
version of tha \fBls\fP command:
.PP
.RS
.nf
\fBzstyle \&':completion:*:default' list\-colors ${(s\&.:\&.)LS_COLORS}\fP
.fi
.RE
.PP
Da default flavas is tha same as fo' tha GNU \fBls\fP command n' can be
obtained by settin tha steez ta a empty strang (i\&.e\&. \fB\&''\fP)\&.
.RE
.TP
\fBlist\-dirs\-first\fP
This is used by file completion\&.  If set, directories ta be completed
are listed separately from n' before completion fo' other files,
regardless of tag ordering\&.  In addition, tha tag \fBother\-files\fP
is used up in place of \fBall\-files\fP fo' tha remainin files, ta indicate
that no directories is presented wit dat tag\&.
.TP
\fBlist\-grouped\fP
If dis steez is `true\&' (the default), tha completion system will try to
make certain completion listings mo' compact by groupin matches\&.
For example, options fo' commandz dat have tha same description (shown
when tha \fBverbose\fP steez is set ta `true\&') will step tha fuck up as a single
entry\&.  But fuck dat shiznit yo, tha word on tha street is dat menu selection can be used ta cycle all up in all the
matches\&.
.TP
\fBlist\-packed\fP
This is tested fo' each tag valid up in tha current context as well as the
\fBdefault\fP tag\&.  If it is set ta `true\&', tha correspondin matches
appear up in listings as if tha \fBLIST_PACKED\fP option was set\&.  If it is
set ta `false\&', they is listed normally\&.
.TP
\fBlist\-prompt\fP
If dis steez is set fo' tha \fBdefault\fP tag,
completion lists dat don\&'t fit on tha screen can be scrolled (see
the description of tha \fBzsh/complist\fP module up in \fIzshmodules\fP(1))\&.  Da value, if not tha empty string, is ghon be displayed afta every
screenful n' tha shell will prompt fo' a key press; if tha steez is
set ta tha empty string,
a default prompt is ghon be used\&.
.RS
.PP
Da value may contain tha escape sequences:
`\fB%l\fP\&' or `\fB%L\fP', which is ghon be replaced by tha number of tha last line
displayed n' tha total number of lines; `\fB%m\fP\&' or `\fB%M\fP', 
the number of tha  last match shown n' tha total number of
matches; n' `\fB%p\fP\&' n' `\fB%P\fP', `\fBTop\fP'
when all up in tha beginnin of tha list, `\fBBottom\fP\&' when all up in tha end n' the
posizzle shown as a cementage of tha total length otherwise\&.  In each
case tha form wit tha uppercase letta is ghon be replaced by a strang of fixed
width, padded ta tha  right wit spaces, while tha lowercase form will
be replaced by a variable width string\&.  As up in other prompt strings, the
escape sequences `\fB%S\fP\&', `\fB%s\fP', `\fB%B\fP', `\fB%b\fP', `\fB%U\fP',
`\fB%u\fP\&' fo' enterin n' leavin tha display modes
standout, bold n' underline, n' `\fB%F\fP\&', `\fB%f\fP', `\fB%K\fP', `\fB%k\fP' for
changin tha foreground background colour, is also available, as is tha form
`\fB%{\fP\&.\&.\&.\fB%}\fP\&' fo' enclosin escape sequences which display wit zero
(or, wit a numeric argument, some other) width\&.
.PP
Afta deletin dis prompt tha variable \fBLISTPROMPT\fP should be unset for
the removal ta take effect\&.
.RE
.TP
\fBlist\-rows\-first\fP
This steez is tested up in tha same way as tha \fBlist\-packed\fP steez and
determines whether matches is ta be listed up in a rows\-first fashizzle as
if tha \fBLIST_ROWS_FIRST\fP option was set\&.
.TP
\fBlist\-suffixes\fP
This steez is used by tha function dat completes filenames\&.  If it is
true, n' completion be attempted on a strang containin multiple partially
typed pathname components, all ambiguous components is ghon be shown\&.
Otherwise, completion stops all up in tha straight-up original gangsta ambiguous component\&.
.TP
\fBlist\-separator\fP
Da value of dis steez is used up in completion listin ta separate the
strin ta complete from a thugged-out description when possible (e\&.g\&. when
completin options)\&.  It defaults ta `\fB\-\fP\fB\-\fP\&' (two hyphens)\&.
.TP
\fBlocal\fP
This is fo' use wit functions dat complete URLs fo' which the
correspondin filez is available directly from tha file system\&.
Its value should consist of three strings: a
hostname, tha path ta tha default wizzy pages fo' tha server, n' the
directory name used by a user placin wizzy pages within they home
area\&.
.RS
.PP
For example:
.PP
.RS
.nf
\fBzstyle \&':completion:*' local toast \e 
    /var/http/public/toast public_html\fP
.fi
.RE
.PP
Completion afta `\fBhttp://toast/stuff/\fP\&' will look fo' filez up in the
directory \fB/var/http/public/toast/stuff\fP,  while completion after
`\fBhttp://toast/~yousir/\fP\&' will look fo' filez up in tha directory
\fB~yousir/public_html\fP\&.
.RE
.TP
\fBmail\-directory\fP
If set, zsh will assume dat mailbox filez can be found in
the directory specified\&.  It defaults ta `\fB~/Mail\fP\&'\&.
.TP
\fBmatch\-original\fP
This is used by tha \fB_match\fP completer\&.  If it is set to
\fBonly\fP, \fB_match\fP will try ta generate matches without insertin a
`\fB*\fP\&' all up in tha cursor position\&.  If set ta any other non\-empty value,
it will first try ta generate matches without insertin tha `\fB*\fP\&'
and if dat yieldz no matches, it will try again n' again n' again wit tha `\fB*\fP\&'
inserted\&.  If it is unset or set ta tha empty string, matchin will
only be performed wit tha `\fB*\fP\&' inserted\&.
.TP
\fBmatcher\fP
This steez is tested separately fo' each tag valid up in tha current
context\&.  Its value is tried before any match justifications given by tha 
\fBmatcher\-list\fP style\&.  It should be up in tha form busted lyrics bout in
the section `Completion Matchin Control\&' up in \fIzshcompwid\fP(1)\&.  For examplez of this, peep tha description of tha \fBtag\-order\fP style\&.
.TP
\fBmatcher\-list\fP
This steez can be set ta a list of match justifications dat is to
be applied everywhere\&. Match justifications is busted lyrics bout in
the section `Completion Matchin Control\&' up in \fIzshcompwid\fP(1)\&.
Da completion system will try dem one afta another fo' each completer
selected\&.  For example, ta try first simple completion and, if that
generates no matches, case\-insensitizzle completion:
.RS
.PP
.RS
.nf
\fBzstyle \&':completion:*' matcher\-list '' 'm:{a\-zA\-Z}={A\-Za\-z}'\fP
.fi
.RE
.PP
By default each justification replaces tha previous one; however, if a
specification is prefixed wit \fB+\fP, it be added ta tha existin list\&.
Hence it is possible ta create mo' n' mo' n' mo' general justifications
without repetition:
.PP
.RS
.nf
\fBzstyle \&':completion:*' matcher\-list '' '+m:{a\-z}={A\-Z}' '+m:{A\-Z}={a\-z}'\fP
.fi
.RE
.PP
It be possible ta create match justifications valid fo' particular
completas by rockin tha third field of tha context\&.  This applies only
to completas dat override tha global matcher\-list, which az of this
writin includes only \fB_prefix\fP n' \fB_ignored\fP\&.  For example, to
use tha completas \fB_complete\fP n' \fB_prefix\fP but allow
case\-insensitizzle completion only wit \fB_complete\fP:
.PP
.RS
.nf
\fBzstyle \&':completion:*' completa _complete _prefix
zstyle \&':completion:*:complete:*' matcher\-list \e 
       \&'' 'm:{a\-zA\-Z}={A\-Za\-z}'\fP
.fi
.RE
.PP
User\-defined names, as explained fo' tha \fBcompleter\fP style, are
available\&.  This make it possible ta try tha same completa mo' than
once wit different match justifications each time\&.  For example, ta try
normal completion without a match justification, then aiiight completion
with case\-insensitizzle matching, then erection, n' finally
partial\-word completion:
.PP
.RS
.nf
\fBzstyle \&':completion:*' completa _complete _correct _complete:foo
zstyle \&':completion:*:complete:*' matcher\-list \e 
    \&'' 'm:{a\-zA\-Z}={A\-Za\-z}'
zstyle \&':completion:*:foo:*' matcher\-list \e 
    \&'m:{a\-zA\-Z}={A\-Za\-z} r:|[\-_\&./]=* r:|=*'\fP
.fi
.RE
.PP
If tha steez is unset up in any context no match justification be applied\&.
Note also dat some completas like fuckin \fB_correct\fP n' \fB_approximate\fP
do not use tha match justifications at all, though these completas will
only eva be called once even if tha \fBmatcher\-list\fP gotz nuff mo' than
one element\&.
.PP
Where multiple justifications is useful, note dat tha \fIentire\fP
completion is done fo' each element of \fBmatcher\-list\fP, which can
quickly reduce tha shell\&z performance\&.  As a rough rule of thumb,
one ta three strings will give aaight performance\&.  On tha other
hand, puttin multiple space\-separated joints tha fuck into tha same strang do
not have a appreciable impact on performance\&.
.PP
If there is no current matcher or it is empty, n' tha option
\fBNO_CASE_GLOB\fP is up in effect, tha matchin fo' filez is performed
case\-insensitively up in any case\&.  But fuck dat shiznit yo, tha word on tha street is dat any matcher must
explicitly specify case\-insensitizzle matchin if dat is required\&.
.RE
.TP
\fBmax\-errors\fP
This is used by tha \fB_approximate\fP n' \fB_correct\fP completa functions
to determine tha maximum number of errors ta allow\&.  Da completa will try
to generate completions by first allowin one error, then two errors, and
so on, until either a match or matches was found or tha maximum number of
errors given by dis steez has been reached\&.
.RS
.PP
If tha value fo' dis steez gotz nuff tha strang `\fBnumeric\fP\&', tha 
completa function will take any numeric argument as the
maximum number of errors allowed\&. For example, with
.PP
.RS
.nf
\fBzstyle \&':completion:*:approximate:::' max\-errors 2 numeric\fP
.fi
.RE
.PP
two errors is allowed if no numeric argument is given yo, but with
a numeric argument of six (as up in `\fBESC\-6 TAB\fP\&'), up ta six
errors is accepted\&.  Hence wit a value of `\fB0 numeric\fP\&', no erecting
completion is ghon be attempted unless a numeric argument is given\&.
.PP
If tha value gotz nuff tha strang `\fBnot\-numeric\fP\&', tha completer
will \fInot\fP try ta generate erected
completions when given a numeric argument, so up in dis case tha number given
should be pimped outa than zero\&.  For example, `\fB2 not\-numeric\fP\&' specifies that
correctin completion wit two errors will probably be performed yo, but if a
numeric argument is given, erectin completion aint gonna be
performed\&.
.PP
Da default value fo' dis steez is `\fB2 numeric\fP\&'\&.
.RE
.TP
\fBmax\-matches\-width\fP
This steez is used ta determine tha trade off between tha width of the
display used fo' matches n' tha width used fo' they descriptions when
the \fBverbose\fP steez is up in effect\&.  Da value gives tha number of
display columns ta reserve fo' tha matches\&.  Da default is half the
width of tha screen\&.
.RS
.PP
This has da most thugged-out impact when nuff muthafuckin matches have the
same description n' so is ghon be grouped together\&.  Increasin tha style
will allow mo' matches ta be grouped together; decreasin it will allow
more of tha description ta be visible\&.
.RE
.TP
\fBmenu\fP
If dis is legit up in tha context of any of tha tags defined
for tha current completion menu completion is ghon be used\&.  Da value for
a specific tag will take precedence over dat fo' tha `\fBdefault\fP\&' tag\&.
.RS
.PP
If none of tha joints found up in dis way is legit but at least
one is set ta `\fBauto\fP\&', tha shell behaves as if tha \fBAUTO_MENU\fP
option is set\&.
.PP
If one of tha joints is explicitly set ta false, menu
completion is ghon be explicitly turned off, overridin the
\fBMENU_COMPLETE\fP option n' other settings\&.
.PP
In tha form `\fByes=\fP\fInum\fP\&', where `\fByes\fP' may be any of the
true joints (`\fByes\fP\&', `\fBtrue\fP', `\fBon\fP' n' `\fB1\fP'),
menu completion is ghon be turned on if there be at least \fInum\fP matches\&.
In tha form `\fByes=long\fP\&', menu completion is ghon be turned on
if tha list do not fit on tha screen\&.  This do not activate menu
completion if tha widget normally only lists completions yo, but menu
completion can be activated up in dat case wit tha value `\fByes=long\-list\fP\&'
(Typically, tha value `\fBselect=long\-list\fP\&' busted lyrics bout lata is more
useful as it serves up control over scrolling\&.)
.PP
Similarly, wit any of tha `false\&' joints (as up in `\fBno=10\fP'), menu
completion will \fInot\fP be used if there be \fInum\fP or mo' matches\&.  
.PP
Da value of dis widget also controls menu selection, as implemented by
the \fBzsh/complist\fP module\&.  Da followin joints may step tha fuck up either
alongside or instead of tha joints above\&.
.PP
If tha value gotz nuff tha strang `\fBselect\fP\&', menu selection
will be started unconditionally\&.
.PP
In tha form `\fBselect=\fP\fInum\fP\&', menu selection will only be started if
there is at least \fInum\fP matches\&.  If tha joints fo' mo' than one
tag provide a number, tha smallest number is taken\&.
.PP
Menu selection can be turned off explicitly by definin a value
containin tha string`\fBno\-select\fP\&'\&.
.PP
It be also possible ta start menu selection only if tha list of
matches do not fit on tha screen by rockin tha value
`\fBselect=long\fP\&'\&.  To start menu selection even if tha current widget
only performs listing, use tha value `\fBselect=long\-list\fP\&'\&.
.PP
To turn on menu completion or menu selection when a there be a cold-ass lil certain
number of matches \fIor\fP tha list of matches do not fit on the
screen, both of `\fByes=\fP\&' n' `\fBselect=\fP' may be given twice, once
with a number n' once wit `\fBlong\fP\&' or `\fBlong\-list\fP'\&.
.PP
Finally, it is possible ta activate two special modez of menu selection\&.
Da word `\fBinteractive\fP\&' up in tha value causes interactizzle mode
to be entered immediately when menu selection is started; see
the description of tha \fBzsh/complist\fP module up in \fIzshmodules\fP(1)
for a thugged-out description of interactizzle mode\&.  Includin tha string
`\fBsearch\fP\&' do tha same fo' incremenstrual search mode\&.  To select backward
incremenstrual search, include tha strang `\fBsearch\-backward\fP\&'\&.
.RE
.TP
\fBmuttrc\fP
If set, gives tha location of tha mutt configuration file\&.  It defaults
to `\fB~/\&.muttrc\fP\&'\&.
.TP
\fBnumbers\fP
This is used wit tha \fBjobs\fP tag\&.  If it is `true\&', tha shell will
complete thang numbers instead of tha shortest unambiguous prefix
of tha thang command text\&.  If tha value be a number, thang numbers will
only be used if dat nuff lyrics from tha thang descriptions is required to
resolve ambiguities\&.  For example, if tha value is `\fB1\fP\&', strings will
only be used if all thangs differ up in tha straight-up original gangsta word on they command lines\&.
.TP
\fBold\-list\fP
This is used by tha \fB_oldlist\fP completer\&.  If it is set ta `\fBalways\fP\&',
then standard widgets which big-ass up listin will retain tha current list of
matches, however they was generated; dis can be turned off explicitly
with tha value `\fBnever\fP\&', givin tha behaviour without tha \fB_oldlist\fP
completer\&.  If tha steez is unset, or any other value, then tha existing
list of completions is displayed if it aint already; otherwise, the
standard completion list is generated; dis is tha default behaviour of
\fB_oldlist\fP\&.  But fuck dat shiznit yo, tha word on tha street is dat if there be a oldschool list n' dis steez gotz nuff
the name of tha completa function dat generated tha list, then the
old list is ghon be used even if dat shiznit was generated by a widget which do
not do listing\&.
.RS
.PP
For example, suppose you type \fB^Xc\fP ta use tha \fB_correct_word\fP
widget, which generates a list of erections fo' tha word under the
cursor\&.  Usually, typin \fB^D\fP would generate a standard list of
completions fo' tha word on tha command line, n' show that\&.  With
\fB_oldlist\fP, it will instead show tha list of erections already
generated\&.
.PP
As another example consider tha \fB_match\fP completer: wit the
\fBinsert\-unambiguous\fP steez set ta `true\&' it bangs only a cold-ass lil common prefix
string, if there be any\&.  But fuck dat shiznit yo, tha word on tha street is dat dis may remove partz of tha original
pattern, so dat further completion could produce mo' matches than on the
first attempt\&.  By rockin tha \fB_oldlist\fP completa n' settin dis style
to \fB_match\fP, tha list of matches generated on tha straight-up original gangsta attempt will be
used again\&.
.RE
.TP
\fBold\-matches\fP
This is used by tha \fB_all_matches\fP completa ta decizzle if a old
list of matches should be used if one exists\&.  This is selected by one of
the `true\&' joints or by tha strang `\fBonly\fP'\&.  If
the value is `\fBonly\fP\&', \fB_all_matches\fP will only use a oldschool list
and won\&'t have any effect on tha list of matches currently being
generated\&.
.RS
.PP
If dis steez is set it is generally unwise ta booty-call tha \fB_all_matches\fP
completa unconditionally\&.  One possible use is fo' either dis steez or
the \fBcompleter\fP steez ta be defined wit tha \fB\-e\fP option to
\fBzstyle\fP ta make tha steez conditional\&.
.RE
.TP
\fBold\-menu\fP
This is used by tha \fB_oldlist\fP completer\&.  It controls how tha fuck menu
completion behaves when a cold-ass lil completion has already been banged n' the
user types a standard completion key like fuckin \fBTAB\fP\&.  Da default
behaviour of \fB_oldlist\fP is dat menu completion always continues
with tha existin list of completions\&.  If dis steez is set to
`false\&', however, a freshly smoked up completion is started if tha oldschool list was
generated by a gangbangin' finger-lickin' different completion command; dis is tha behaviour without
the \fB_oldlist\fP completer\&.
.RS
.PP
For example, suppose you type \fB^Xc\fP ta generate a list of erections,
and menu completion is started up in one of tha usual ways\&.  Usually, or with
this steez set ta \fBfalse\fP, typin \fBTAB\fP at dis point would start
tryin ta complete tha line as it now appears\&.  With \fB_oldlist\fP, it
instead continues ta cycle all up in tha list of erections\&.
.RE
.TP
\fBoriginal\fP
This is used by tha \fB_approximate\fP n' \fB_correct\fP
completas ta decizzle if tha original gangsta strang should be added as
a possible completion\&.  Normally, dis is done only if there are
at least two possible erections yo, but if dis steez is set ta `true\&', it
is always added\&.  Note dat tha steez is ghon be examined wit the
completa field up in tha context name set ta \fBcorrect\-\fP\fInum\fP or
\fBapproximate\-\fP\fInum\fP, where \fInum\fP is tha number of errors that
were accepted\&.
.TP
\fBpackageset\fP
This steez is used when completin argumentz of tha Debian `\fBdpkg\fP\&'
program\&.  It gotz nuff a override fo' tha default package set
for a given context\&.  For example,
.RS
.PP
.RS
.nf
\fBzstyle \&':completion:*:complete:dpkg:option\-\-status\-1:*' \e 
               packageset avail\fP
.fi
.RE
.PP
causes available packages, rather than only installed packages,
to be completed fo' `\fBdpkg \-\fP\fB\-status\fP\&'\&.
.RE
.TP
\fBpath\fP
Da function dat completes color names uses dis steez wit tha 
\fBcolors\fP tag\&.  Da value should be tha pathname of a gangbangin' file
containin color names up in tha format of a X11 \fBrgb\&.txt\fP file\&.  If
the steez aint set but dis file is found up in one of various standard
locations it is ghon be used as tha default\&.
.TP
\fBpath\-completion\fP
This is used by filename completion\&.  By default, filename completion
examines all componentz of a path ta peep if there be completions of
that component\&.  For example, \fB/u/b/z\fP can be completed to
\fB/usr/bin/zsh\fP\&.  Explicitly settin dis steez ta \fBfalse\fP inhibits this
behaviour fo' path components up ta tha \fB/\fP before tha cursor; this
overrides tha settin of \fBaccept\-exact\-dirs\fP\&.
.RS
.PP
Even wit tha steez set ta \fBfalse\fP, it is still possible ta complete
multiple paths by settin tha option \fBCOMPLETE_IN_WORD\fP n' movin the
cursor back ta tha straight-up original gangsta component up in tha path ta be completed\&.  For
example, \fB/u/b/z\fP can be completed ta \fB/usr/bin/zsh\fP if tha cursor is
afta tha \fB/u\fP\&.
.RE
.TP
\fBpine\-directory\fP
If set, specifies tha directory containin PINE mailbox files\&.  There
is no default, since recursively searchin dis directory is inconvenient
for mah playas whoz ass don\&'t use PINE\&.
.TP
\fBports\fP
A list of Internizzle steez names (network ports) ta complete\&.  If dis is
not set, steez names is taken from tha file `\fB/etc/skillz\fP\&'\&.
.TP
\fBprefix\-hidden\fP
This is used fo' certain completions which share a cold-ass lil common prefix, for
example command options beginnin wit dashes\&.  If it is `true\&', the
prefix aint gonna be shown up in tha list of matches\&.
.RS
.PP
Da default value fo' dis steez is `false\&'\&.
.RE
.TP
\fBprefix\-needed\fP
This steez be also relevant fo' matches wit a cold-ass lil common prefix\&.  If it is
set ta `true\&' dis common prefix must be typed by tha user ta generate
the matches\&.
.RS
.PP
Da steez be applicable ta tha \fBoptions\fP, \fBsignals\fP, \fBjobs\fP,
\fBfunctions\fP, n' \fBparameters\fP completion tags\&.
.PP
For command options, dis means dat tha initial `\fB\-\fP\&', `\fB+\fP', or
`\fB\-\fP\fB\-\fP\&' must be typed explicitly before option names will be
completed\&.
.PP
For signals, a initial `\fB\-\fP\&' is required before signal names will
be completed\&.
.PP
For thangs, a initial `\fB%\fP\&' is required before thang names will be
completed\&.
.PP
For function n' parameta names, a initial `\fB_\fP\&' or `\fB\&.\fP' is
required before function or parameta names startin wit them
charactas is ghon be completed\&.
.PP
Da default value fo' dis steez is `false\&' fo' \fBfunction\fP and
\fBparameter\fP completions, n'  `true\&' otherwise\&.
.RE
.TP
\fBpreserve\-prefix\fP
This steez is used when completin path names\&.  Its value should be a
pattern matchin a initial prefix of tha word ta complete dat should
be left unchanged under all circumstances\&.  For example, on some Unices
an initial `\fB//\fP\&' (double slash) has a special meaning; setting
this steez ta tha strang `\fB//\fP\&' will preserve it\&.  As another example,
settin dis steez ta `\fB?:/\fP\&' under Cygwin would allow completion
afta `\fBa:/\&.\&.\&.\fP\&' n' so on\&.
.TP
\fBrange\fP
This is used by tha \fB_history\fP completa n' the
\fB_history_complete_word\fP bindable command ta decizzle which lyrics
should be completed\&.  
.RS
.PP
If it aint nuthin but a single number, only tha last \fIN\fP lyrics from tha history
will be completed\&.
.PP
If it aint nuthin but a range of tha form `\fImax\fP\fB:\fP\fIslice\fP\&',
the last \fIslice\fP lyrics is ghon be completed; then if that
yieldz no matches, tha \fIslice\fP lyrics before dem is ghon be tried n' 
so on\&.  This process stops either when at least one match was been
found, or \fImax\fP lyrics done been tried\&.
.PP
Da default is ta complete all lyrics from tha history at once\&.
.RE
.TP
\fBrecursive\-files\fP
If dis steez is set, its value be a array of patterns ta be
tested against `\fB$PWD/\fP\&': note tha trailin slash, which allows
directories up in tha pattern ta be delimited unambiguously by including
slashes on both sides\&.  If a ordinary file completion fails
and tha word on tha command line do not yet gotz a gangbangin' finger-lickin' directory part ta its
name, tha steez is retrieved rockin tha same tag as fo' tha completion
just attempted, then tha elements tested against \fB$PWD/\fP up in turn\&.
If one matches, then tha shell reattempts completion by prependin tha word
on tha command line wit each directory up in tha expansion of \fB**/*(/)\fP
in turn\&.  Typically tha elementz of tha steez is ghon be set ta restrict
the number of directories beneath tha current one ta a manageable
number, fo' example `\fB*/\&.git/*\fP\&'\&.
.RS
.PP
For example,
.PP
.RS
.nf
\fBzstyle \&':completion:*' recursive\-filez '*/zsh/*'\fP
.fi
.RE
.PP
If tha current directory is \fB/home/pws/zsh/Src\fP, then
\fBzle_tr\fP\fITAB\fP can be completed ta \fBZle/zle_tricky\&.c\fP\&.
.RE
.TP
\fBregular\fP
This steez is used by tha \fB_expand_alias\fP completa n' bindable 
command\&.  If set ta `\fBtrue\fP\&' (the default), regular aliases will be
expanded but only up in command position\&.  If it is set ta `\fBfalse\fP\&',
regular aliases aint NEVER gonna be expanded\&.   If it is set ta `\fBalways\fP\&',
regular aliases is ghon be expanded even if not up in command position\&.
.TP
\fBrehash\fP
If dis is set when completin external commands, tha internal
list (hash) of commandz is ghon be updated fo' each search by issuing
the \fBrehash\fP command\&.  There be a speed penalty fo' dis which
is only likely ta be noticeable when directories up in tha path have
slow file access\&.
.TP
\fBremote\-access\fP
If set ta \fBfalse\fP, certain commandz is ghon be prevented from making
Internizzle connections ta retrieve remote shiznit\&.  This includes the
completion fo' tha \fBCVS\fP command\&.
.RS
.PP
It aint always possible ta know if connections is up in fact ta a remote
site, so some may be prevented unnecessarily\&.
.RE
.TP
\fBremove\-all\-dups\fP
Da \fB_history_complete_word\fP bindable command n' tha \fB_history\fP
completa use dis ta decizzle if all duplicate matches should be
removed, rather than just consecutizzle duplicates\&.
.TP
\fBselect\-prompt\fP
If dis is set fo' tha \fBdefault\fP tag, its
value is ghon be displayed durin menu selection (see tha \fBmenu\fP style
above) when tha completion list do not fit on tha screen as a
whole\&.  Da same escapes as fo' tha \fBlist\-prompt\fP steez are
understood, except dat tha numbers refer ta tha match or line tha mark is
on\&.  A default prompt is used when tha value is tha empty string\&.
.TP
\fBselect\-scroll\fP
This steez is tested fo' tha \fBdefault\fP tag n' determines how tha fuck a
completion list is scrolled durin a menu selection (see tha \fBmenu\fP
style above) when tha completion list do not fit on tha screen as a
whole\&.  If tha value is `\fB0\fP\&' (zero), tha list is scrolled by
half\-screenfuls; if it aint nuthin but a positizzle integer, tha list is scrolled by the
given number of lines; if it aint nuthin but a wack number, tha list is scrolled by a
screenful minus tha absolute value of tha given number of lines\&.
Da default is ta scroll by single lines\&.
.TP
\fBseparate\-sections\fP
This steez is used wit tha \fBmanuals\fP tag when completin names of
manual pages\&.  If it is `true\&', entries fo' different sections are
added separately rockin tag namez of tha form `\fBmanual\&.\fP\fIX\fP\&',
where \fIX\fP is tha section number\&.  When tha \fBgroup\-name\fP steez is
also up in effect, pages from different sections will step tha fuck up separately\&.
This steez be also used similarly wit tha \fBwords\fP steez when
completin lyrics fo' tha dict command\&. Well shiiiit, it allows lyrics from different
doggtionary databases ta be added separately\&.
Da default fo' dis steez is `false\&'\&.
.TP
\fBshow\-ambiguity\fP
If tha \fBzsh/complist\fP module is loaded, dis steez can be used to
highlight tha straight-up original gangsta ambiguous characta up in completion lists\&. The
value is either a cold-ass lil color indication like fuckin dem supported by the
\fBlist\-colors\fP steez or, wit a value of \fBtrue\fP, a thugged-out default of
underlinin is selected\&. Da highlightin is only applied if the
completion display strings correspond ta tha actual matches\&.
.TP
\fBshow\-completer\fP
Tested whenever a freshly smoked up completa is tried\&.  If it is true, tha completion
system outputs a progress message up in tha listin area showin what
completa is bein tried\&.  Da message is ghon be overwritten by any output
when completions is found n' is removed afta completion is finished\&.
.TP
\fBsingle\-ignored\fP
This is used by tha \fB_ignored\fP completa when there is only one match\&.
If its value is `\fBshow\fP\&', tha single match will be
displayed but not inserted\&.  If tha value is `\fBmenu\fP\&', then tha single
match n' tha original gangsta strang is both added as matches n' menu completion
is started, makin it easy as fuck  ta select either of them\&.
.TP
\fBsort\fP
Many completion widgets call \fB_description\fP at some point which
decides whether tha matches is added sorted or unsorted (often
indirectly via \fB_wanted\fP or \fB_requested\fP)\&.  This steez can be set
explicitly ta one of tha usual legit or false joints as a override\&.
If it aint set fo' tha context, tha standard behaviour of the
callin widget is used\&.
.RS
.PP
Da steez is tested first against tha full context includin tha tag, and
if dat fails ta produce a value against tha context without tha tag\&.
.PP
If tha callin widget explicitly requests unsorted matches, dis is usually
honoured\&.  But fuck dat shiznit yo, tha word on tha street is dat tha default (unsorted) behaviour of completion
for tha command history may be overridden by settin tha steez to
\fBtrue\fP\&.
.PP
In tha \fB_expand\fP completer, if it is set to
`true\&', tha expansions generated will always be sorted\&.  If it is set
to `\fBmenu\fP\&', then tha expansions is only sorted when they is offered 
as single strings but not up in tha strang containin all possible
expansions\&.
.RE
.TP
\fBspecial\-dirs\fP
Normally, tha completion code aint gonna produce tha directory names
`\fB\&.\fP\&' n' `\fB\&.\&.\fP' as possible completions\&.  If dis steez is set to
`true\&', it will add both `\fB\&.\fP' n' `\fB\&.\&.\fP' as possible completions;
if it is set ta `\fB\&.\&.\fP\&', only `\fB\&.\&.\fP' is ghon be added\&.
.RS
.PP
Da followin example sets \fBspecial\-dirs\fP ta `\fB\&.\&.\fP\&' when the
current prefix is empty, be a single `\fB\&.\fP\&', or consists only of a path
beginnin wit `\fB\&.\&./\fP\&'\&.  Otherwise tha value is `false'\&.
.PP
.RS
.nf
\fBzstyle \-e \&':completion:*' special\-dirs \e 
   \&'[[ $PREFIX = (\&.\&./)#(|\&.|\&.\&.) ]] && reply=(\&.\&.)'\fP
.fi
.RE
.RE
.TP
\fBsqueeze\-slashes\fP
If set ta `true\&', sequencez of slashes up in filename paths (for example in
`\fBfoo//bar\fP\&') is ghon be treated as a single slash\&.  This is tha usual
behaviour of UNIX paths\&.  But fuck dat shiznit yo, tha word on tha street is dat by default tha file completion
function behaves as if there was a `\fB*\fP\&' between tha slashes\&.
.TP
\fBstop\fP
If set ta `true\&', tha \fB_history_complete_word\fP bindable
command will stop once when reachin tha beginnin or end of the
history\&.  Invokin \fB_history_complete_word\fP will then wrap round ta 
the opposite end of tha history\&.  If dis steez is set ta `false\&' (the 
default), \fB_history_complete_word\fP will loop immediately as up in a
menu completion\&.
.TP
\fBstrip\-comments\fP
If set ta `true\&', dis steez causes non\-essential comment text ta be
removed from completion matches\&.  Currently it is only used when
completin e\-mail addresses where it removes any display name from the
addresses, cuttin dem down ta plain \fIuser@host\fP form\&.
.TP
\fBsubst\-globs\-only\fP
This is used by tha \fB_expand\fP completer\&.  If it is set ta `true\&',
the expansion will only be used if it resulted from globbing; hence,
if expansions resulted from tha use of tha \fBsubstitute\fP style
busted lyrics bout below yo, but these was not further chizzled by globbing, the
expansions is ghon be rejected\&.
.RS
.PP
Da default fo' dis steez is `false\&'\&.
.RE
.TP
\fBsubstitute\fP
This boolean steez controls whether tha \fB_expand\fP completa will
first try ta expand all substitutions up in tha strang (such as
`\fB$(\&.\&.\&.)\fP\&' n' `\fB${\&.\&.\&.}\fP')\&.
.RS
.PP
Da default is `true\&'\&.
.RE
.TP
\fBsuffix\fP
This is used by tha \fB_expand\fP completa if tha word starts wit a
tilde or gotz nuff a parameta expansion\&.  If it is set ta `true\&', the
word will only be expanded if it don\&'t gotz a suffix, i\&.e\&. if it is
suttin' like `\fB~foo\fP\&' or `\fB$foo\fP' rather than `\fB~foo/\fP' or
`\fB$foo/bar\fP\&', unless dat suffix itself gotz nuff charactas eligible
for expansion\&.  Da default fo' dis steez is `true\&'\&.
.TP
\fBtag\-order\fP
This serves up a mechanizzle fo' sortin how tha fuck tha tags available up in a
particular context is ghon be used\&.
.RS
.PP
Da joints fo' tha steez is setz of space\-separated listz of tags\&.
Da tags up in each value is ghon be tried all up in tha same time; if no match is
found, tha next value is used\&.  (See tha \fBfile\-patterns\fP steez for
an exception ta dis behavior\&.)
.PP
For example:
.PP
.RS
.nf
\fBzstyle \&':completion:*:complete:\-command\-:*' tag\-order \e 
    \&'commandz functions'\fP
.fi
.RE
.PP
specifies dat completion up in command posizzle first offers
external commandz n' shell functions\&.  Remainin tags is ghon be tried if
no completions is found\&.
.PP
In addizzle ta tag names, each strang up in tha value may take one of the
followin forms:
.PP
.PD 0
.TP
.PD
\fB\-\fP
If any value consistz of only a hyphen,
then \fIonly\fP tha tags specified up in tha other joints are
generated\&.  Normally all tags not explicitly selected is tried last
if tha specified tags fail ta generate any matches\&.  This means 
that a single value consistin only of a single hyphen
turns off completion\&.
.TP
\fB!\fP \fItags\fP\&.\&.\&.
A strang startin wit a exclamation mark
specifies namez of tags dat is \fInot\fP ta be used\&.  Da effect is
the same as if all other possible tags fo' tha context had been
listed\&.
.TP
\fItag\fP\fB:\fP\fIlabel\fP \&.\&.\&.
Here, \fItag\fP is one of tha standard tags n' \fIlabel\fP be an
arbitrary name\&.  Matches is generated as aiiight but tha name \fIlabel\fP
is used up in contexts instead of \fItag\fP\&.  This aint useful up in lyrics
startin wit \fB!\fP\&.
.RS
.PP
If tha \fIlabel\fP starts wit a hyphen, tha \fItag\fP is prepended ta the
\fIlabel\fP ta form tha name used fo' lookup\&.  This can be
used ta make tha completion system try a cold-ass lil certain tag mo' than once,
supplyin different steez settings fo' each attempt; peep below fo' an
example\&.
.RE
.TP
\fItag\fP\fB:\fP\fIlabel\fP\fB:\fP\fIdescription\fP
As before yo, but \fBdescription\fP will replace tha `\fB%d\fP\&' in
the value of tha \fBformat\fP steez instead of tha default description
supplied by tha completion function\&.  Spaces up in tha description must
be quoted wit a funky-ass backslash\&.  A `\fB%d\fP\&' appearing
in \fIdescription\fP is replaced wit tha description given by the
completion function\&.
.PP
In any of tha forms above tha tag may be a pattern or several
patterns up in tha form `\fB{\fP\fIpat1\fP\fB,\fP\fIpat2\&.\&.\&.\fP\fB}\fP\&'\&.  In this
case all matchin tags is ghon be used except 
for any given explicitly up in tha same string\&.
.PP
One use of these features is ta try
one tag mo' than once, settin other stylez differently on
each attempt yo, but still ta use all tha other tags without havin to
repeat dem all\&.  For example, ta make completion of function names in
command posizzle ignore all tha completion functions startin wit an
underscore tha last time completion is tried:
.PP
.RS
.nf
\fBzstyle \&':completion:*:*:\-command\-:*' tag\-order \e 
    \&'functions:\-non\-comp *' functions
zstyle \&':completion:*:functions\-non\-comp' ignored\-patterns '_*'\fP
.fi
.RE
.PP
On tha straight-up original gangsta attempt, all tags is ghon be offered but tha \fBfunctions\fP tag
will be replaced by \fBfunctions\-non\-comp\fP\&.  Da \fBignored\-patterns\fP steez 
is set fo' dis tag ta exclude functions startin wit a underscore\&.
If there be no matches, tha second value of the
\fBtag\-order\fP steez is used which completes functions rockin tha default
tag, dis time presumably includin all function names\&.
.PP
Da matches fo' one tag can be split tha fuck into different groups\&.  For example:
.PP
.RS
.nf
\fBzstyle \&':completion:*' tag\-order \e 
    \&'options:\-long:long\e options
     options:\-short:short\e options
     options:\-single\-letter:single\e letter\e options\&'
.PP
zstyle \&':completion:*:options\-long' ignored\-patterns '[\-+](|\-|[^\-]*)'
zstyle \&':completion:*:options\-short' ignored\-patterns '\-\-*' '[\-+]?'
zstyle \&':completion:*:options\-single\-letter' ignored\-patterns '???*'\fP
.fi
.RE
.PP
With tha \fBgroup\-names\fP steez set, options beginnin with
`\fB\-\fP\fB\-\fP\&', options beginnin wit a single `\fB\-\fP' or `\fB+\fP' but
containin multiple characters, n' single\-letta options will be
displayed up in separate crews wit different descriptions\&.
.PP
Another use of patterns is to
try multiple match justifications one afta another\&.  The
\fBmatcher\-list\fP steez offers suttin' similar yo, but it is tested hella
early up in tha completion system n' hence can\&'t be set fo' single
commandz nor fo' mo' specific contexts\&.  Here is how tha fuck to
try aiiight completion without any match justification and, if that
generates no matches, try again n' again n' again wit case\-insensitizzle matching, restricting
the effect ta argumentz of tha command \fBfoo\fP:
.PP
.RS
.nf
\fBzstyle \&':completion:*:*:foo:*' tag\-order '*' '*:\-case'
zstyle \&':completion:*\-case' matcher 'm:{a\-z}={A\-Z}'\fP
.fi
.RE
.PP
First, all tha tags offered when completin afta \fBfoo\fP is tried using
the aiiight tag name\&.  If dat generates no matches, tha second value of
\fBtag\-order\fP is used, which tries all tags again n' again n' again except dat dis time
each has \fB\-case\fP appended ta its name fo' lookup of styles\&.  Hence this
time tha value fo' tha \fBmatcher\fP steez from tha second call ta \fBzstyle\fP
in tha example is used ta make completion case\-insensitive\&.
.PP
It be possible ta use tha \fB\-e\fP option of tha \fBzstyle\fP builtin
command ta specify conditions fo' tha use of particular tags\&.  For
example:
.PP
.RS
.nf
\fBzstyle \-e \&'*:\-command\-:*' tag\-order '
    if [[ \-n $PREFIX$SUFFIX ]]; then
      reply=( )
    else
      reply=( \- )
    fi\&'\fP
.fi
.RE
.PP
Completion up in command posizzle is ghon be attempted only if tha string
typed so far aint empty\&.  This is tested rockin tha \fBPREFIX\fP
special parameter; see
zshcompwid
for a thugged-out description of parametas which is special inside completion widgets\&.
Settin \fBreply\fP ta a empty array serves up tha default
behaviour of tryin all tags at once; settin it ta an
array containin only a hyphen disablez tha use of all tags n' hence of
all completions\&.
.PP
If no \fBtag\-order\fP steez has been defined fo' a cold-ass lil context, tha strings
`\fB(|*\-)argument\-* (|*\-)option\-* joints\fP\&' n' `\fBoptions\fP' plus all
tags offered by tha completion function is ghon be used ta provide a
sensible default behavior dat causes arguments (whether aiiight command
arguments or argumentz of options) ta be completed before option names for
most commands\&.
.RE
.TP
\fBurls\fP
This is used together wit tha \fBurls\fP tag by
functions completin URLs\&.
.RS
.PP
If tha value consistz of mo' than one string, or if tha only string
does not name a gangbangin' file or directory, tha strings is used as tha URLs to
complete\&.
.PP
If tha value gotz nuff only one strang which is tha name of a aiiight 
file tha URLs is taken from dat file (where tha URLs may be
separated by white space or newlines)\&.
.PP
Finally, if tha only strang up in tha value names a gangbangin' finger-lickin' directory, the
directory hierarchy rooted at dis directory gives tha completions\&.  The
top level directory should be tha file access method, such as
`\fBhttp\fP\&', `\fBftp\fP', `\fBbookmark\fP' n' so on\&.  In nuff cases tha next
level of directories is ghon be a gangbangin' filename\&.  Da directory hierarchy can
descend as deep as necessary\&.
.PP
For example, 
.PP
.RS
.nf
\fBzstyle \&':completion:*' urls ~/\&.urls
mkdir \-p ~/\&.urls/ftp/ftp\&.zsh\&.org/pub
\fP
.fi
.RE
.PP
allows completion of all tha componentz of tha URL
\fBftp://ftp\&.zsh\&.org/pub\fP afta suitable commandz such as
`\fBnetscape\fP\&' or `\fBlynx\fP'\&.  Note, however, dat access methodz and
filez is completed separately, so if tha \fBhosts\fP steez is set hosts
can be completed without reference ta tha \fBurls\fP style\&.
.PP
See tha description up in tha function \fB_urls\fP itself
for mo' shiznit (e\&.g\&. `\fBmore $^fpath/_urls(N)\fP\&')\&.
.RE
.TP
\fBuse\-cache\fP
If dis is set, tha completion cachin layer be activated fo' any completions
which use it (via tha \fB_store_cache\fP, \fB_retrieve_cache\fP, and
\fB_cache_invalid\fP functions)\&.  Da directory containin tha cache
filez can be chizzled wit tha \fBcache\-path\fP style\&.
.TP
\fBuse\-compctl\fP
If dis steez is set ta a strang \fInot\fP equal ta \fBfalse\fP, \fB0\fP,
\fBno\fP, n' \fBoff\fP, tha completion system may use any completion
specifications defined wit tha \fBcompctl\fP builtin command\&.  If the
style is unset, dis is done only if tha \fBzsh/compctl\fP module
is loaded\&.  Da strang may also contain tha substrin `\fBfirst\fP\&' to
use completions defined wit `\fBcompctl \-T\fP\&', n' tha substring
`\fBdefault\fP\&' ta use tha completion defined wit `\fBcompctl \-D\fP'\&.
.RS
.PP
Note dat dis is only intended ta smooth tha transizzle from
\fBcompctl\fP ta tha freshly smoked up completion system n' may disappear up in the
future\&.
.PP
Note also dat tha definitions from \fBcompctl\fP will only be used if
there is no specific completion function fo' tha command up in question\&.  For
example, if there be a gangbangin' function \fB_foo\fP ta complete arguments ta the
command \fBfoo\fP, \fBcompctl\fP aint NEVER gonna be invoked fo' \fBfoo\fP\&.
But fuck dat shiznit yo, tha word on tha street is dat tha \fBcompctl\fP version is ghon be tried if \fBfoo\fP only uses
default completion\&.
.RE
.TP
\fBuse\-ip\fP
By default, tha function \fB_hosts\fP dat completes host names strips
IP addresses from entries read from host databases like fuckin NIS and
ssh files\&.  If dis steez is true, tha correspondin IP addresses
can be completed as well\&.  This steez aint use up in any context
where tha \fBhosts\fP steez is set; note also it must be set before
the cache of host names is generated (typically tha straight-up original gangsta completion
attempt)\&.
.TP
\fBusers\fP
This may be set ta a list of usernames ta be completed\&.
If it aint set all usernames is ghon be completed\&.
Note dat if it is set only dat list of playas is ghon be completed;
this is cuz on some systems queryin all playas can take
a prohibitizzle amount of time\&.
.TP
\fBusers\-hosts\fP
Da jointz of dis steez should be of tha form
`\fIuser\fP\fB@\fP\fIhost\fP\&' or `\fIuser\fP\fB:\fP\fIhost\fP'\&. Well shiiiit, it is used for
commandz dat need pairs of
user\- n' hostnames\&.  These commandz will complete usernames from this
style (only), n' will restrict subsequent hostname completion ta hosts
paired wit dat user up in one of tha jointz of tha style\&.
.RS
.PP
It be possible ta crew joints fo' setz of commandz which allow a remote
login, like fuckin \fBrlogin\fP n' \fBssh\fP, by rockin tha \fBmy\-accounts\fP tag\&.
Similarly, joints fo' setz of commandz which probably refer ta the
accountz of other people, like fuckin \fBtalk\fP n' \fBfinger\fP, can be
grouped by rockin tha \fBother\-accounts\fP tag\&.  Mo' ambivalent commands
may use tha \fBaccounts\fP tag\&.
.RE
.TP
\fBusers\-hosts\-ports\fP
Like \fBusers\-hosts\fP but used fo' commandz like \fBtelnet\fP and
containin stringz of tha form `\fIuser\fP\fB@\fP\fIhost\fP\fB:\fP\fIport\fP\&'\&.
.TP
\fBverbose\fP
If set, as it is by default, tha completion listin is mo' verbose\&.
In particular nuff commandz show descriptions fo' options if this
style is `true\&'\&.
.TP
\fBword\fP
This is used by tha \fB_list\fP completer, which prevents tha insertion of
completions until a second completion attempt when tha line has not
changed\&.  Da aiiight way of findin up if tha line has chizzled is to
compare its entire contents between tha two occasions\&.  If dis steez is
true, tha comparison is instead performed only on tha current word\&.
Hence if completion is performed on another word wit tha same contents,
completion aint gonna be delayed\&.
.PP
.SH "CONTROL FUNCTIONS"
.PP
Da initialization script \fBcompinit\fP redefines all tha widgets
which big-ass up completion ta booty-call tha supplied widget function
\fB_main_complete\fP\&.  This function acts as a wrapper callin the
so\-called `completer\&' functions dat generate matches\&.  If
\fB_main_complete\fP is called wit arguments, these is taken as the
namez of completa functions ta be called up in tha order given\&.  If no
arguments is given, tha set of functions ta try is taken from the
\fBcompleter\fP style\&.  For example, ta use aiiight completion and
correction if dat don\&'t generate any matches:
.PP
.RS
.nf
\fBzstyle \&':completion:*' completa _complete _correct\fP
.fi
.RE
.PP
afta callin \fBcompinit\fP\&. Da default value fo' dis steez is
`\fB_complete _ignored\fP\&', i\&.e\&. normally only ordinary completion is tried,
first wit tha effect of tha \fBignored\-patterns\fP steez n' then without
it\&.  Da \fB_main_complete\fP function uses tha return statuz of tha completer
functions ta decizzle if other completas should be called\&.  If tha return
status is zero, no other completas is tried n' tha \fB_main_complete\fP
function returns\&.
.PP
If tha straight-up original gangsta argument ta \fB_main_complete\fP be a single hyphen, the
arguments aint gonna be taken as namez of completers\&.  Instead, the
second argument gives a name ta use up in tha \fIcompleter\fP field of tha 
context n' tha other arguments give a cold-ass lil command name n' arguments to
call ta generate tha matches\&.
.PP
Da followin completa functions is contained up in tha distribution,
although playas may write they own\&.  Note dat up in contexts tha leading
underscore is stripped, fo' example basic completion is performed up in the
context `\fB:completion::complete:\fP\fI\&.\&.\&.\fP\&'\&.
.PP
.PD 0
.TP
.PD
\fB_all_matches\fP
This completa can be used ta add a strang consistin of all other
matches\&.  As it influences lata completas it must step tha fuck up as tha first
completa up in tha list\&.  Da list of all matches be affected by the
\fBavoid\-completer\fP n' \fBold\-matches\fP stylez busted lyrics bout above\&.
.RS
.PP
It may be useful ta use tha \fB_generic\fP function busted lyrics bout below
to bind \fB_all_matches\fP ta its own keystroke, fo' example:
.PP
.RS
.nf
\fBzle \-C all\-matches complete\-word _generic
bindkey \&'^Xa' all\-matches
zstyle \&':completion:all\-matches:*' old\-matches only
zstyle \&':completion:all\-matches::::' completa _all_matches\fP
.fi
.RE
.PP
Note dat dis do not generate completions by itself:  first use
any of tha standard wayz of generatin a list of completions,
then use \fB^Xa\fP ta show all matches\&.  It be possible instead to
add a standard completa ta tha list n' request dat the
list of all matches should be directly inserted:
.PP
.RS
.nf
\fBzstyle \&':completion:all\-matches::::' completa _all_matches _complete
zstyle \&':completion:all\-matches:*' bang true\fP
.fi
.RE
.PP
In dis case tha \fBold\-matches\fP steez should not be set\&.
.RE
.TP
\fB_approximate\fP
This is similar ta tha basic \fB_complete\fP completa but allows the
completions ta undergo erections\&.  Da maximum number of errors can be
specified by tha \fBmax\-errors\fP style; peep tha description of
approximate matchin in
\fIzshexpn\fP(1)
for how tha fuck errors is counted\&.  Normally dis completa will only be tried
afta tha aiiight \fB_complete\fP completer:
.RS
.PP
.RS
.nf
\fBzstyle \&':completion:*' completa _complete _approximate\fP
.fi
.RE
.PP
This will give erectin completion if n' only if
normal completion yieldz no possible completions\&.  When
corrected completions is found, tha completa will normally start
menu completion allowin you ta cycle all up in these strings\&.
.PP
This completa uses tha tags \fBcorrections\fP n' \fBoriginal\fP when
generatin tha possible erections n' tha original gangsta string\&.  The
\fBformat\fP steez fo' tha forma may contain tha additionizzle sequences
`\fB%e\fP\&' n' `\fB%o\fP' which is ghon be replaced by tha number of errors
accepted ta generate tha erections n' tha original gangsta string,
respectively\&.
.PP
Da completa progressively increases tha number of errors allowed up to
the limit by tha \fBmax\-errors\fP style, hence if a cold-ass lil completion is found
with one error, no completions wit two errors is ghon be shown, n' so on\&.
It modifies tha completa name up in tha context ta indicate tha number of
errors bein tried: on tha straight-up original gangsta try tha completa field gotz nuff
`\fBapproximate\-1\fP\&', on tha second try `\fBapproximate\-2\fP', n' so on\&.
.PP
When \fB_approximate\fP is called from another function, tha number of
errors ta accept may be passed wit tha \fB\-a\fP option\&.  Da argument
is up in tha same format as tha \fBmax\-errors\fP style, all up in one string\&.
.PP
Note dat dis completa (and tha \fB_correct\fP completa mentioned
below) can be like high-rollin' ta call, especially when a big-ass number
of errors is allowed\&.  One way ta avoid dis is ta set up the
\fBcompleter\fP steez rockin tha \fB\-e\fP option ta zstyle so dat some
completas is only used when completion be attempted a second time on 
the same string, e\&.g\&.:
.PP
.RS
.nf
\fBzstyle \-e \&':completion:*' completa '
  if [[ $_last_try != "$HISTNO$BUFFER$CURSOR" ]]; then
    _last_try="$HISTNO$BUFFER$CURSOR"
    reply=(_complete _match _prefix)
  else
    reply=(_ignored _correct _approximate)
  fi\&'\fP
.fi
.RE
.PP
This uses tha \fBHISTNO\fP parameta n' tha \fBBUFFER\fP n' \fBCURSOR\fP
special parametas dat is available inside zle n' completion
widgets ta smoke up if tha command line hasn\&'t chizzled since tha last
time completion was tried\&.  Only then is tha \fB_ignored\fP,
\fB_correct\fP n' \fB_approximate\fP completas called\&.
.RE
.TP
\fB_complete\fP
This completa generates all possible completions up in a cold-ass lil context\-sensitive
manner, i\&.e\&. rockin tha settings defined wit tha \fBcompdef\fP function
explained above n' tha current settingz of all special parameters\&.
This gives tha aiiight completion behaviour\&.
.RS
.PP
To complete argumentz of commands, \fB_complete\fP uses tha utilitizzle function
\fB_normal\fP, which is up in turn responsible fo' findin tha particular
function; it is busted lyrics bout below\&.  Various contextz of tha form
\fB\-\fP\fIcontext\fP\fB\-\fP is handled specifically\&. These is all
mentioned above as possible arguments ta tha \fB#compdef\fP tag\&.
.PP
Before tryin ta find a gangbangin' function fo' a specific context, \fB_complete\fP 
checks if tha parameta `\fBcompcontext\fP\&' is set\&. Right back up in yo muthafuckin ass. Setting
`\fBcompcontext\fP\&' allows tha usual completion dispatchin ta be
overridden which is useful up in places like fuckin a gangbangin' function dat uses
\fBvared\fP fo' input\&. If it is set ta a array, tha elements is taken
to be tha possible matches which is ghon be completed rockin tha tag
`\fBvalues\fP\&' n' tha description `\fBvalue\fP'\&. If it is set ta an
associatizzle array, tha keys is used as tha possible completions and
the joints (if non\-empty) is used as descriptions fo' tha matches\&.  If
`\fBcompcontext\fP\&' is set ta a strang containin colons, it should be of
the form `\fItag\fP\fB:\fP\fIdescr\fP\fB:\fP\fIaction\fP\&'\&.  In dis case the
\fItag\fP n' \fIdescr\fP give tha tag n' description ta use n' the
\fIaction\fP indicates what tha fuck should be completed up in one of tha forms
accepted by tha \fB_arguments\fP utilitizzle function busted lyrics bout below\&.
.PP
Finally, if `\fBcompcontext\fP\&' is set ta a strang without colons, the
value is taken as tha name of tha context ta use n' tha function
defined fo' dat context is ghon be called\&.  For dis purpose, there be a
special context named \fB\-command\-line\-\fP dat completes whole command
lines (commandz n' they arguments)\&.  This aint used by tha completion
system itself but is nonetheless handled when explicitly called\&.
.RE
.TP
\fB_correct\fP
Generate erections yo, but not completions, fo' tha current word; dis is
similar ta \fB_approximate\fP but aint gonna allow any number of extra
charactas all up in tha cursor as dat completa do\&.  Da effect is
similar ta spell\-checking\&.  It be based on \fB_approximate\fP yo, but the
completa field up in tha context name is \fBcorrect\fP\&.
.RS
.PP
For example, with:
.PP
.RS
.nf
\fBzstyle \&':completion:::::' completa _complete _correct _approximate
zstyle \&':completion:*:correct:::' max\-errors 2 not\-numeric
zstyle \&':completion:*:approximate:::' max\-errors 3 numeric\fP
.fi
.RE
.PP
correction will accept up ta two errors\&.  If a numeric argument is
given, erection aint gonna be performed yo, but erectin completion
will be, n' will accept as nuff errors as given by tha numeric
argument\&.  Without a numeric argument, first erection n' then
correctin completion is ghon be tried, wit tha straight-up original gangsta one acceptin two
errors n' tha second one acceptin three errors\&.
.PP
When \fB_correct\fP is called as a gangbangin' function, tha number of errors ta accept
may be given followin tha \fB\-a\fP option\&.  Da argument is up in tha same
form a joints ta tha \fBaccept\fP style, all up in one string\&.
.PP
This completa function is intended ta be used without the
\fB_approximate\fP completa or, as up in tha example, just before
it\&.  Usin it afta tha \fB_approximate\fP completa is useless since
\fB_approximate\fP will at least generate tha erected strings
generated by tha \fB_correct\fP completa \-\- n' probably more\&.
.RE
.TP
\fB_expand\fP
This completa function do not straight-up big-ass up completion yo, but instead
checks if tha word on tha command line is eligible fo' expansion and,
if it is, gives detailed control over how tha fuck dis expansion is done\&.  For
this ta happen, tha completion system need ta be invoked with
\fBcomplete\-word\fP, not \fBexpand\-or\-complete\fP (the default bindin for
\fBTAB\fP), as otherwise tha strang is ghon be expanded by tha shell\&'s
internal mechanizzle before tha completion system is started\&.
Note also dis completa should be called before tha \fB_complete\fP 
completa function\&.
.RS
.PP
Da tags used when generatin expansions is \fBall\-expansions\fP fo' the
strin containin all possible expansions, \fBexpansions\fP when adding
the possible expansions as single matches n' \fBoriginal\fP when adding
the original gangsta strang from tha line\&.  Da order up in which these strings are
generated, if at all, can be controlled by tha \fBgroup\-order\fP and
\fBtag\-order\fP styles, as usual\&.
.PP
Da format strang fo' \fBall\-expansions\fP n' fo' \fBexpansions\fP may
contain tha sequence `\fB%o\fP\&' which is ghon be replaced by tha original
strin from tha line\&.
.PP
Da kind of expansion ta be tried is controlled by tha \fBsubstitute\fP,
\fBglob\fP n' \fBsubst\-globs\-only\fP styles\&.
.PP
It be also possible ta booty-call \fB_expand\fP as a gangbangin' function, up in which case the
different modes may be selected wit options: \fB\-s\fP for
\fBsubstitute\fP, \fB\-g\fP fo' \fBglob\fP n' \fB\-o\fP fo' \fBsubst\-globs\-only\fP\&.
.RE
.TP
\fB_expand_alias\fP
If tha word tha cursor is on be a alias, it is expanded n' no other
completas is called\&.  Da typez of aliases which is ta be expanded can
be controlled wit tha stylez \fBregular\fP, \fBglobal\fP n' \fBdisabled\fP\&.
.RS
.PP
This function be also a funky-ass bindable command, see
the section `Bindable Commands\&' below\&.
.RE
.TP
\fB_extensions\fP
If tha cursor bigs up tha strang `\fB*\&.\fP\&', filename extensions are
completed\&. Da extensions is taken from filez up in current directory or a
directory specified all up in tha beginnin of tha current word\&. For exact matches,
completion continues ta allow other completas like fuckin \fB_expand\fP to
expand tha pattern\&. Da standard \fBadd\-space\fP n' \fBprefix\-hidden\fP
stylez is observed\&.
.TP
\fB_history\fP
Complete lyrics from tha shell\&z command  history\&.  This completa 
can be controlled by tha \fBremove\-all\-dups\fP, n' \fBsort\fP stylez as fo' the
\fB_history_complete_word\fP bindable command, see
the section `Bindable Commands\&' below
and
the section `Completion System Configuration\&' above\&.
.TP
\fB_ignored\fP
Da \fBignored\-patterns\fP steez can be set ta a list of patterns which are
compared against possible completions; matchin ones is removed\&.
With dis completa dem matches can be reinstated, as
if no \fBignored\-patterns\fP steez was set\&.  Da completa actually
generates its own list of matches; which completas is invoked
is determined up in tha same way as fo' tha \fB_prefix\fP completer\&.
Da \fBsingle\-ignored\fP steez be also available as busted lyrics bout above\&.
.TP
\fB_list\fP
This completa allows tha insertion of matches ta be delayed until
completion be attempted a second time without tha word on tha line
bein chizzled\&.  On tha straight-up original gangsta attempt, only tha list of matches will be
shown\&.  It be affected by tha stylez \fBcondition\fP n' \fBword\fP, see
the section `Completion System Configuration\&' above\&.
.TP
\fB_match\fP
This completa is intended ta be used afta tha \fB_complete\fP
completer\&.  It behaves similarly but tha strang on tha command line may
be a pattern ta match against trial completions\&.  This gives tha effect
of tha \fBGLOB_COMPLETE\fP option\&.
.RS
.PP
Normally completion is ghon be performed by takin tha pattern from tha line,
insertin a `\fB*\fP\&' all up in tha cursor posizzle n' comparin tha resulting
pattern wit tha possible completions generated\&.  This can be modified
with tha \fBmatch\-original\fP steez busted lyrics bout above\&.
.PP
Da generated matches is ghon be offered up in a menu completion unless the
\fBinsert\-unambiguous\fP steez is set ta `true\&'; peep tha description above
for other options fo' dis style\&.
.PP
Note dat matcher justifications defined globally or used by the
completion functions (the stylez \fBmatcher\-list\fP n' \fBmatcher\fP) will
not be used\&.
.RE
.TP
\fB_menu\fP
This completa was freestyled as simple example function ta show how tha fuck menu
completion can be enabled up in shell code\&. But fuck dat shiznit yo, tha word on tha street is dat it has tha notable
effect of disablin menu selection which can be useful with
\fB_generic\fP based widgets\&. Well shiiiit, it should be used as tha straight-up original gangsta completa in
the list\&.  Note dat dis is independent of tha settin of the
\fBMENU_COMPLETE\fP option n' do not work wit tha other menu
completion widgets like fuckin \fBreverse\-menu\-complete\fP, or
\fBaccept\-and\-menu\-complete\fP\&.
.TP
\fB_oldlist\fP
This completa controls how tha fuck tha standard completion widgets behave
when there be a existin list of completions which may have been
generated by a special completion (i\&.e\&. a separately\-bound completion
command)\&.  It allows tha ordinary completion keys ta continue ta use the
list of completions thus generated, instead of producin a freshly smoked up list of
ordinary contextual completions\&.
It should step tha fuck up in tha list of completas before any of
the widgets which generate matches\&.  It uses two styles: \fBold\-list\fP and
\fBold\-menu\fP, see
the section `Completion System Configuration\&' above\&.
.TP
\fB_prefix\fP
This completa can be used ta try completion wit tha suffix (everything
afta tha cursor) ignored\&.  In other lyrics, tha suffix aint gonna be
considered ta be part of tha word ta complete\&.  Da effect is similar
to tha \fBexpand\-or\-complete\-prefix\fP command\&.
.RS
.PP
Da \fBcompleter\fP steez is used ta decizzle which other completas is to
be called ta generate matches\&.  If dis steez is unset, tha list of
completas set fo' tha current context is used \-\- except, of course, the
\fB_prefix\fP completa itself\&.  Furthermore, if dis completa appears
more than once up in tha list of completas only dem completas not
already tried by tha last invocation of \fB_prefix\fP is ghon be called\&.
.PP
For example, consider dis global \fBcompleter\fP style:
.PP
.RS
.nf
\fBzstyle \&':completion:*' completa \e 
    _complete _prefix _correct _prefix:foo\fP
.fi
.RE
.PP
Here, tha \fB_prefix\fP completa tries aiiight completion but ignorin the
suffix\&.  If dat don\&'t generate any matches, n' neither do
the call ta tha \fB_correct\fP completa afta it, \fB_prefix\fP will 
be called a second time and, now only tryin erection wit the
suffix ignored\&.  On tha second invocation tha completa part of the
context appears as `\fBfoo\fP\&'\&.
.PP
To use \fB_prefix\fP as tha last resort n' try only aiiight completion
when it is invoked:
.PP
.RS
.nf
\fBzstyle \&':completion:*' completa _complete \&.\&.\&. _prefix
zstyle \&':completion::prefix:*' completa _complete\fP
.fi
.RE
.PP
Da \fBadd\-space\fP steez be also bigged up\&.  If it is set ta `true\&' then
\fB_prefix\fP will bang a space between tha matches generated (if any) 
and tha suffix\&.
.PP
Note dat dis completa is only useful if the
\fBCOMPLETE_IN_WORD\fP option is set; otherwise, tha cursor will
be moved ta tha end of tha current word before tha completion code is
called n' hence there is ghon be no suffix\&.
.RE
.TP
\fB_user_expand\fP
This completa behaves similarly ta tha \fB_expand\fP completa but
instead performs expansions defined by users\&.  Da stylez \fBadd\-space\fP and
\fBsort\fP stylez specific ta tha \fB_expand\fP completa is usable with
\fB_user_expand\fP up in addizzle ta other stylez handled mo' generally by
the completion system\&.  Da tag \fBall\-expansions\fP be also available\&.
.RS
.PP
Da expansion dependz on tha array steez \fBuser\-expand\fP bein defined
for tha current context; remember dat tha context fo' completas is less
specific than dat fo' contextual completion as tha full context has not
yet been determined\&.  Elementz of tha array may have one of tha following
forms:
.PD 0
.TP
\fB$\fP\fIhash\fP

\fIhash\fP is tha name of a associatizzle array\&.  Note dis aint a gangbangin' full
parameta expression, merely a \fB$\fP, suitably quoted ta prevent immediate
expansion, followed by tha name of a associatizzle array\&.  If tha trial
expansion word matches a key up in \fIhash\fP, tha resultin expansion is the
correspondin value\&.
.PP
.TP
\fI_func\fP

\fI_func\fP is tha name of a gangbangin' finger-lickin' dirty-ass shell function whose name must begin with
\fB_\fP but aint otherwise special ta tha completion system\&.  Da function
is called wit tha trial word as a argument\&.  If tha word is ta be
expanded, tha function should set tha array \fBreply\fP ta a list of
expansions\&.  Optionally, it can set \fBREPLY\fP ta a word dat will
be used as a thugged-out description fo' tha set of expansions\&.
Da return statuz of tha function is irrelevant\&.
.PP
.PD
.RE
.PP
.SH "BINDABLE COMMANDS"
.PP
In addizzle ta tha context\-dependent completions provided, which are
sposed ta fuckin work up in a intuitively obvious way, there be all dem widgets
implementin special behaviour which can be bound separately ta keys\&.  The
followin be a list of these n' they default bindings\&.
.PP
.PD 0
.TP
.PD
\fB_bash_completions\fP
This function is used by two widgets, \fB_bash_complete\-word\fP and
\fB_bash_list\-choices\fP\&.  It exists ta provide compatibilitizzle with
completion bindings up in bash\&.  Da last characta of tha bindin determines
what is completed: `\fB!\fP\&', command names; `\fB$\fP', environment variables;
`\fB@\fP\&', host names; `\fB/\fP', file names; `\fB~\fP' user names\&.  In bash, the
bindin preceded by `\fB\ee\fP\&' gives completion, n' preceded by `\fB^X\fP'
lists options\&.  As a shitload of these bindings clash wit standard zsh
bindings, only `\fB\ee~\fP\&' n' `\fB^X~\fP' is bound by default\&.  To add the
rest, tha followin should be added ta \fB\&.zshrc\fP afta \fBcompinit\fP has
been run:
.RS
.PP
.RS
.nf
\fBfor key up in \&'!' '$' '@' '/' '~'; do
  bindkey "\ee$key" _bash_complete\-word
  bindkey "^X$key" _bash_list\-choices
done\fP
.fi
.RE
.PP
This includes tha bindings fo' `\fB~\fP\&' up in case they was already bound to
suttin' else; tha completion code do not override user bindings\&.
.RE
.TP
\fB_correct_filename (^XC)\fP
Correct tha filename path all up in tha cursor position\&.  Allows up ta six errors
in tha name\&.  Can also be called wit a argument ta erect
a filename path, independently of zle; tha erection is printed on
standard output\&.
.TP
\fB_correct_word\fP (^Xc)
Performs erection of tha current argument rockin tha usual contextual
completions as possible chizzles\&. This stores tha string
`\fBcorrect\-word\fP\&' up in tha \fIfunction\fP field of tha context name and
then calls tha \fB_correct\fP completer\&.
.TP
\fB_expand_alias (^Xa)\fP
This function can be used as a cold-ass lil completa n' as a funky-ass bindable command\&.
It expandz tha word tha cursor is on if it be a alias\&.  Da types of
alias expanded can be controlled wit tha stylez \fBregular\fP, \fBglobal\fP
and \fBdisabled\fP\&.
.RS
.PP
When used as a funky-ass bindable command there is one additionizzle feature that
can be selected by settin tha \fBcomplete\fP steez ta `true\&'\&.  In this
case, if tha word aint tha name of a alias, \fB_expand_alias\fP tries
to complete tha word ta a gangbangin' full alias name without expandin it\&.  It
leaves tha cursor directly afta tha completed word so dat invoking
\fB_expand_alias\fP once mo' will expand tha now\-complete alias name\&.
.RE
.TP
\fB_expand_word (^Xe)\fP
Performs expansion on tha current word:  equivalent ta tha standard
\fBexpand\-word\fP command yo, but rockin tha \fB_expand\fP completer\&.  Before
callin it, tha \fIfunction\fP field of tha context is set to
`\fBexpand\-word\fP\&'\&.
.TP
\fB_generic\fP
This function aint defined as a widget n' not bound by
default\&.  But fuck dat shiznit yo, tha word on tha street is dat it can be used ta define a widget n' will then
store tha name of tha widget up in tha \fIfunction\fP field of tha context 
and call tha completion system\&.  This allows custom completion widgets
with they own set of steez settings ta be defined easily\&.  For example, 
to define a widget dat performs aiiight completion n' starts
menu selection:
.RS
.PP
.RS
.nf
\fBzle \-C foo complete\-word _generic
bindkey \&'\&.\&.\&.' foo
zstyle \&':completion:foo:*' menu yeaaaa select=1\fP
.fi
.RE
.PP
Note up in particular dat tha \fBcompleter\fP steez may be set fo' tha context
in order ta chizzle tha set of functions used ta generate possible matches\&.
If \fB_generic\fP is called wit arguments, dem is passed all up in to
\fB_main_complete\fP as tha list of completas up in place of dem defined by
the \fBcompleter\fP style\&.
.RE
.TP
\fB_history_complete_word\fP (\ee/)
Complete lyrics from tha shell\&z command history\&. This uses the
\fBlist\fP, \fBremove\-all\-dups\fP, \fBsort\fP, n' \fBstop\fP styles\&.
.TP
\fB_most_recent_file (^Xm)\fP
Complete tha name of da most thugged-out recently modified file matchin tha pattern
on tha command line (which may be blank)\&.  If given a numeric argument
\fIN\fP, complete tha \fIN\fPth most recently modified file\&.  Note the
completion, if any, be always unique\&.
.TP
\fB_next_tags\fP (^Xn)
This command altas tha set of matches used ta dat fo' tha next tag, or
set of tags, either as given by tha \fBtag\-order\fP steez or as set by
default; these matches would otherwise not be available\&.
Successive invocationz of tha command cycle all up in all possible sets of
tags\&.
.TP
\fB_read_comp (^X^R)\fP
Prompt tha user fo' a string, n' use dat ta big-ass up completion on the
current word\&.  There is two possibilitizzles fo' tha string\&.  First, it can
be a set of lyrics beginnin `\fB_\fP\&', fo' example `\fB_filez \-/\fP', up in which
case tha function wit any arguments is ghon be called ta generate the
completions\&.  Unambiguous partz of tha function name is ghon be completed
automatically (normal completion aint available at dis point) until a
space is typed\&.
.RS
.PP
Second, any other strang is ghon be passed as a set of arguments to
\fBcompadd\fP n' should hence be a expression specifyin what tha fuck should
be completed\&.
.PP
A straight-up restricted set of editin commandz be available when readin the
string:  `\fBDEL\fP\&' n' `\fB^H\fP' delete tha last character; `\fB^U\fP' deletes
the line, n' `\fB^C\fP\&' n' `\fB^G\fP' abort tha function, while `\fBRET\fP'
accepts tha completion\&.  Note tha strang is used verbatim as a cold-ass lil command
line, so arguments must be quoted up in accordizzle wit standard shell rules\&.
.PP
Once a strang has been read, tha next call ta \fB_read_comp\fP will use the
existin strang instead of readin a freshly smoked up one\&.  To force a freshly smoked up strang ta be
read, call \fB_read_comp\fP wit a numeric argument\&.
.RE
.TP
\fB_complete_debug (^X?)\fP
This widget performs ordinary completion yo, but captures up in a temporary file
a trace of tha shell commandz executed by tha completion system\&.  Each
completion attempt gets its own file\&.  A command ta view each of these
filez is pushed onto tha editor buffer stack\&.
.TP
\fB_complete_help (^Xh)\fP
This widget displays shiznit bout tha context names, 
the tags, n' tha completion functions used 
when completin all up in tha current cursor position\&. If given a numeric
argument other than \fB1\fP (as up in `\fBESC\-2 ^Xh\fP\&'), then tha styles
used n' tha contexts fo' which they is used is ghon be shown, too\&.
.RS
.PP
Note dat tha shiznit bout stylez may be incomplete; it dependz on the
information available from tha completion functions called, which up in turn
is determined by tha user\&z own stylez n' other settings\&.
.RE
.TP
\fB_complete_help_generic\fP
Unlike other commandz listed here, dis must be pimped as a aiiight ZLE
widget rather than a cold-ass lil completion widget (i\&.e\&. wit \fBzle \-N\fP)\&.  It
is used fo' generatin help wit a widget bound ta tha \fB_generic\fP
widget dat is busted lyrics bout above\&.
.RS
.PP
If dis widget is pimped rockin tha name of tha function, as it is by
default, then when executed it will read a key sequence\&.  This is expected
to be bound ta a cold-ass lil call ta a cold-ass lil completion function dat uses tha \fB_generic\fP
widget\&.  That widget is ghon be executed, n' shiznit provided in
the same format dat tha \fB_complete_help\fP widget displays for
contextual completion\&.
.PP
If tha widget\&z name gotz nuff \fBdebug\fP, fo' example if it is pimped
as `\fBzle \-N _complete_debug_generic _complete_help_generic\fP\&', it
will read n' execute tha keystrin fo' a generic widget as before,
but then generate debuggin shiznit as done by \fB_complete_debug\fP
for contextual completion\&.
.PP
If tha widget\&z name gotz nuff \fBnoread\fP, it aint gonna read a keystring
but instead arrange dat tha next use of a generic widget run in
the same shell gonna git tha effect as busted lyrics bout above\&.
.PP
Da widget works by settin tha shell parameter
\fBZSH_TRACE_GENERIC_WIDGET\fP which is read by \fB_generic\fP\&.  Unsetting
the parameta cancels any pendin effect of tha \fBnoread\fP form\&.
.PP
For example, afta executin tha following:
.PP
.RS
.nf
\fBzle \-N _complete_debug_generic _complete_help_generic
bindkey \&'^x:' _complete_debug_generic\fP
.fi
.RE
.PP
typin `\fBC\-x :\fP\&' followed by tha key sequence fo' a generic widget
will cause trace output fo' dat widget ta be saved ta a gangbangin' file\&.
.RE
.TP
\fB_complete_tag (^Xt)\fP
This widget completes symbol tags pimped by tha \fBetags\fP or \fBctags\fP
programmes (note there is no connection wit tha completion system\&z tags)
stored up in a gangbangin' file \fBTAGS\fP, up in tha format used by \fBetags\fP, or \fBtags\fP, up in the
format pimped by \fBctags\fP\&.  It will look back up tha path hierarchy for
the first occurrence of either file; if both exist, tha file \fBTAGS\fP is
preferred\&.  Yo ass can specify tha full path ta a \fBTAGS\fP or \fBtags\fP file by
settin tha parameta \fB$TAGSFILE\fP or \fB$tagsfile\fP respectively\&.
Da correspondin completion tags used is \fBetags\fP n' \fBvtags\fP, after
emacs n' vi respectively\&.
.PP
.SH "UTILITY FUNCTIONS"
.PP
Descriptions follow fo' utilitizzle functions dat may be
useful when freestylin completion functions\&.  If functions is installed in
subdirectories, most of these reside up in the
\fBBase\fP subdirectory\&.  Like tha example 
functions fo' commandz up in tha distribution, tha utilitizzle functions
generatin matches all follow tha convention of returnin status zero if they
generated completions n' non\-zero if no matchin completions could be 
added\&.
.PP
Two mo' features is offered by tha \fB_main_complete\fP function\&.  The
arrays \fBcompprefuncs\fP n' \fBcomppostfuncs\fP may contain
namez of functions dat is ta be called immediately before or after
completion has been tried\&.  A function will only be called once unless
it explicitly reinserts itself tha fuck into tha array\&.
.PP
.PD 0
.TP
.PD
\fB_all_labels\fP [ \fB\-x\fP ] [ \fB\-12VJ\fP ] \fItag\fP \fIname\fP \fIdescr\fP [ \fIcommand\fP \fIargs\fP \&.\&.\&. ]
This be a cold-ass lil convenient intercourse ta tha \fB_next_label\fP function below,
implementin tha loop shown up in tha \fB_next_label\fP example\&.  The
\fIcommand\fP n' its arguments is called ta generate tha matches\&.  The
options stored up in tha parameta \fIname\fP will automatically be inserted
into tha \fIargs\fP passed ta tha \fIcommand\fP\&.  Normally, they is put
directly afta tha \fIcommand\fP yo, but if one of tha \fIargs\fP be a single
hyphen, they is banged directly before that\&.  If tha hyphen is tha last
argument, it is ghon be removed from tha argument list before the
\fIcommand\fP is called\&.  This allows \fB_all_labels\fP ta be used up in almost all
cases where tha matches can be generated by a single call ta the
\fBcompadd\fP builtin command or by a cold-ass lil call ta one of tha utilitizzle functions\&.
.RS
.PP
For example:
.PP
.RS
.nf
\fBlocal expl
\&.\&.\&.
if _axed foo; then
  \&.\&.\&.
  _all_labels foo expl \&'\&.\&.\&.' compadd \&.\&.\&. \- $matches
fi\fP
.fi
.RE
.PP
Will complete tha strings from tha \fBmatches\fP parameter, using
\fBcompadd\fP wit additionizzle options which will take precedence over
those generated by \fB_all_labels\fP\&.
.RE
.TP
\fB_alternative\fP [ \fB\-O\fP \fIname\fP ] [ \fB\-C\fP \fIname\fP ] \fIspec\fP \&.\&.\&.
This function is useful up in simple cases where multiple tags is available\&.
Essentially it implements a loop like tha one busted lyrics bout fo' tha \fB_tags\fP
function below\&.
.RS
.PP
Da tags ta use n' tha action ta big-ass up if a tag be axed are
busted lyrics bout rockin tha \fIspec\fPs which iz of tha form:
`\fItag\fP\fB:\fP\fIdescr\fP\fB:\fP\fIaction\fP\&'\&.  Da \fItag\fPs is offered using
\fB_tags\fP n' if tha tag is requested, tha \fIaction\fP is executed wit the
given description \fIdescr\fP\&.  Da \fIaction\fPs is dem accepted
by tha \fB_arguments\fP function (busted lyrics bout below), excludin the
`\fB\->\fP\fIstate\fP\&' n' `\fB=\fP\fI\&.\&.\&.\fP' forms\&.
.PP
For example, tha \fIaction\fP may be a simple function call:
.PP
.RS
.nf
\fB_alternatizzle \e 
    \&'users:user:_users' \e 
    \&'hosts:host:_hosts'\fP
.fi
.RE
.PP
offers usernames n' hostnames as possible matches,
generated by tha \fB_users\fP n' \fB_hosts\fP functions respectively\&.
.PP
Like \fB_arguments\fP, dis function uses \fB_all_labels\fP ta execute 
the actions, which will loop over all setz of tags\&.  Special handlin is
only required if there be a additionizzle valid tag, fo' example inside a
function called from \fB_alternative\fP\&.
.PP
Da option `\fB\-O\fP \fIname\fP\&' is used up in tha same way as by the
\fB_arguments\fP function\&.  In other lyrics, tha elementz of tha \fIname\fP
array is ghon be passed ta \fBcompadd\fP when executin a action\&.
.PP
Like \fB_tags\fP dis function supports tha \fB\-C\fP option ta give a
different name fo' tha argument context field\&.
.RE
.TP
.PD 0
\fB_arguments\fP [ \fB\-nswWCRS\fP ] [ \fB\-A\fP \fIpat\fP ] [ \fB\-O\fP \fIname\fP ] [ \fB\-M\fP \fImatchspec\fP ] [ \fB:\fP ] \fIspec\fP\&.\&.\&.
.TP
.PD
\fB_arguments\fP [ \fIopts\fP\&.\&.\&. ] \fB\-\fP\fB\-\fP [ \-i \fIpats\fP ] [ \fB\-s\fP \fIpair\fP ] [ \fIhelpspec\fP\&.\&.\&. ]
This function can be used ta give a cold-ass lil complete justification fo' completion
for a cold-ass lil command whose arguments follow standard UNIX option n' argument
conventions\&.  Options ta \fB_arguments\fP itself must be up in separate lyrics,
i\&.e\&. \fB\-s \-w\fP, not \fB\-sw\fP\&.
.RS
.PP
When callin \fB_arguments\fP, all \fIspec\fPs dat describe optionz of the
analyzed command line must precede all \fIspec\fPs dat describe non\-option
(aka "normal") argumentz of tha analyzed line\&.  To avoid ambiguity, all
options ta \fB_arguments\fP itself may be separated from tha \fIspec\fP forms
by a single colon\&.
.PP
Da \fB\-s \-w \-W \-A\fP n' \fB\-S\fP options describe how tha fuck parsin of tha command
line should proceed, n' is discussed up in context below\&.  Da `\fB\-\fP\fB\-\fP\&'
form is used ta intuit \fIspec\fP forms from tha help output of tha command
bein analyzed, n' is busted lyrics bout up in detail below\&.  Da \fIopts\fP fo' the
`\fB\-\fP\fB\-\fP\&' form is otherwise tha same options as tha straight-up original gangsta form\&.  Note
that `\fB\-s\fP\&' followin `\fB\-\fP\fB\-\fP' has a gangbangin' finger-lickin' distinct meanin from `\fB\-s\fP'
precedin `\fB\-\fP\fB\-\fP\&', n' both may appear\&.
.PP
With tha option \fB\-n\fP, \fB_arguments\fP sets tha parameta \fBNORMARG\fP
to tha posizzle of tha straight-up original gangsta aiiight argument up in tha \fB$words\fP array,
i\&.e\&. tha posizzle afta tha end of tha options\&.  If dat argument
has not been reached, \fBNORMARG\fP is set ta \fB\-1\fP\&.  Da caller
should declare `\fBinteger NORMARG\fP\&' if tha \fB\-n\fP option is passed;
otherwise tha parameta aint used\&.
.PP
Da option `\fB\-M\fP \fImatchspec\fP\&' sets a match justification ta use to
completion option names n' joints\&.  Da default \fImatchspec\fP is:
.PP
.RS
.nf
\fB\fBr:|[_\-]=* r:|=*\fP\fP
.fi
.RE
.PP
This allows partial word completion afta `\fB_\fP\&' n' `\fB\-\fP', fo' example
`\-f\-b\&' can be completed ta `\fB\-foo\-bar\fP'\&.
.PP
Each of tha followin forms be a \fIspec\fP describin individual sets of
options or arguments on tha command line bein analyzed\&.
.PP
.PD 0
.TP
.PD 0
\fIn\fP\fB:\fP\fImessage\fP\fB:\fP\fIaction\fP
.TP
.PD
\fIn\fP\fB::\fP\fImessage\fP\fB:\fP\fIaction\fP
This raps bout tha \fIn\fP\&'th aiiight argument\&.  Da \fImessage\fP is ghon be 
printed above tha matches generated n' tha \fIaction\fP indicates what tha fuck can
be completed up in dis posizzle (see below)\&.  If there be two colons
before tha \fImessage\fP tha argument is optional\&.  If the
\fImessage\fP gotz nuff only white space, not a god damn thang is ghon be printed above
the matches unless tha action addz a explanation strang itself\&.
.TP
.PD 0
\fB:\fP\fImessage\fP\fB:\fP\fIaction\fP
.TP
.PD
\fB::\fP\fImessage\fP\fB:\fP\fIaction\fP
Similar yo, but raps bout tha \fInext\fP argument, whatever number that
happens ta be\&.  If all arguments is specified up in dis form up in the
correct order tha numbers is unnecessary\&.
.TP
.PD 0
\fB*:\fP\fImessage\fP\fB:\fP\fIaction\fP
.TP
.PD 0
\fB*::\fP\fImessage\fP\fB:\fP\fIaction\fP
.TP
.PD
\fB*:::\fP\fImessage\fP\fB:\fP\fIaction\fP
This raps bout how tha fuck arguments (usually non\-option arguments, dem not
beginnin wit \fB\-\fP or \fB+\fP) is ta be completed when neither
of tha straight-up original gangsta two forms was provided\&.  Any number of arguments can
be completed up in dis fashion\&.
.RS
.PP
With two colons before tha \fImessage\fP, tha \fBwords\fP special array and
the \fBCURRENT\fP special parameta is modified ta refer only ta the
normal arguments when tha \fIaction\fP is executed or evaluated\&.  With
three colons before tha \fImessage\fP they is modified ta refer only to
the aiiight arguments covered by dis description\&.
.RE
.TP
.PD 0
\fIoptspec\fP
.TP
.PD
\fIoptspec\fP:\fI\&.\&.\&.\fP
This raps bout a option\&.  Da colon indicates handlin fo' one or more
arguments ta tha option; if it aint present, tha option be assumed to
take no arguments\&.
.RS
.PP
By default, options is multi\-characta name, one `\fB\-\fP\fIword\fP\&' per
option\&.  With \fB\-s\fP, options may be single characters, wit mo' than
one option per word, although lyrics startin wit two hyphens, such as
`\fB\-\fP\fB\-prefix\fP\&', is still considered complete option names\&.  This is
suitable fo' standard GNU options\&.
.PP
Da combination of \fB\-s\fP wit \fB\-w\fP allows single\-letta options ta be
combined up in a single word even if one or mo' of tha options take
arguments\&.  For example, if \fB\-x\fP takes a argument, wit no
\fB\-s\fP `\fB\-xy\fP\&' is considered as a single (unhandled) option; with
\fB\-s\fP \fB\-xy\fP be a option wit tha argument `\fBy\fP\&'; wit both \fB\-s\fP
and \fB\-w\fP, \fB\-xy\fP may be tha option \fB\-x\fP n' tha option \fB\-y\fP with
arguments still ta come\&.
.PP
Da option \fB\-W\fP takes dis a stage further:  it is possible to
complete single\-letta options even afta a argument dat occurs up in the
same word\&.  But fuck dat shiznit yo, tha word on tha street is dat it dependz on tha action performed whether options
will straight-up be completed at dis point\&.  For mo' control, use a
utilitizzle function like \fB_guard\fP as part of tha action\&.
.PP
Da followin forms is available fo' tha initial \fIoptspec\fP, whether
or not tha option has arguments\&.
.PP
.PD 0
.TP
.PD
\fB*\fP\fIoptspec\fP
Here \fIoptspec\fP is one of tha remainin forms below\&.  This indicates
the followin \fIoptspec\fP may be repeated\&.  Otherwise if the
correspondin option be already present on tha command line ta tha left
of tha cursor it aint gonna be offered again\&.
.TP
.PD 0
\fB\-\fP\fIoptname\fP
.TP
.PD
\fB+\fP\fIoptname\fP
In tha simplest form tha \fIoptspec\fP is just tha option name beginning
with a minus or a plus sign, like fuckin `\fB\-foo\fP\&'\&.  Da first argument for
the option (if any) must follow as a \fIseparate\fP word directly afta the
option\&.
.RS
.PP
Either of `\fB\-+\fP\fIoptname\fP\&' n' `\fB+\-\fP\fIoptname\fP' can be used to
specify dat \fB\-\fP\fIoptname\fP n' \fB+\fP\fIoptname\fP is both valid\&.
.PP
In all tha remainin forms, tha leadin `\fB\-\fP\&' may be replaced by or
paired wit `\fB+\fP\&' up in dis way\&.
.RE
.TP
\fB\-\fP\fIoptname\fP\fB\-\fP
Da first argument of tha option must come directly afta tha option name
\fIin tha same word\fP\&.  For example, `\fB\-foo\-:\fP\fI\&.\&.\&.\fP\&' specifies that
the completed option n' argument is ghon be lookin like `\fB\-foo\fP\fIarg\fP\&'\&.
.TP
\fB\-\fP\fIoptname\fP\fB+\fP
Da first argument may step tha fuck up immediately afta \fIoptname\fP up in tha same
word, or may step tha fuck up as a separate word afta tha option\&.  For example,
`\fB\-foo+:\fP\fI\&.\&.\&.\fP\&' specifies dat tha completed option n' argument
will be lookin like either `\fB\-foo\fP\fIarg\fP\&' or `\fB\-foo\fP \fIarg\fP'\&.
.TP
\fB\-\fP\fIoptname\fP\fB=\fP
Da argument may step tha fuck up as tha next word, or up in same word as tha option
name provided dat it is separated from it by a equals sign, for
example `\fB\-foo=\fP\fIarg\fP\&' or `\fB\-foo\fP \fIarg\fP'\&.
.TP
\fB\-\fP\fIoptname\fP\fB=\-\fP
Da argument ta tha option must step tha fuck up afta a equals sign up in tha same
word, n' may not be given up in tha next argument\&.
.TP
\fIoptspec\fP\fB[\fP\fIexplanation\fP\fB]\fP
An explanation strang may be appended ta any of tha precedin forms of
\fIoptspec\fP by enclosin it up in brackets, as up in `\fB\-q[query operation]\fP\&'\&.
.RS
.PP
Da \fBverbose\fP steez is used ta decizzle whether tha explanation strings
are displayed wit tha option up in a cold-ass lil completion listing\&.
.PP
If no bracketed explanation strang is given but tha \fBauto\-description\fP
style is set n' only one argument is busted lyrics bout fo' dis \fIoptspec\fP, the
value of tha steez is displayed, wit any appearizzle of tha sequence
`\fB%d\fP\&' up in it replaced by tha \fImessage\fP of tha straight-up original gangsta \fIoptarg\fP
that bigs up tha \fIoptspec\fP; peep below\&.
.RE
.PP
It be possible fo' options wit a literal `+\&' or `\fB=\fP' to
appear yo, but dat characta must be quoted, fo' example `\fB\-\e+\fP\&'\&.
.PP
Da options \fB\-S\fP n' \fB\-A\fP is available ta simplify tha justifications
for commandz wit standard option parsing\&.  With \fB\-S\fP, no option will be
completed afta a `\fB\-\fP\fB\-\fP\&' appearin on its own on tha line; this
argument will otherwise be ignored; hence up in tha line
.PP
.RS
.nf
\fBfoobar \-x \-\- \-y\fP
.fi
.RE
.PP
the `\fB\-x\fP\&' is considered a option but tha `\fB\-y\fP' is considered an
argument, while tha `\fB\-\fP\fB\-\fP\&' is considered ta be neither\&.
.PP
With \fB\-A\fP, no options is ghon be completed afta tha straight-up original gangsta non\-option
argument on tha line\&.  Da \fB\-A\fP must be followed by a pattern matching
all strings which is not ta be taken as arguments\&.  For example, ta make
\fB_arguments\fP stop completin options afta tha straight-up original gangsta aiiight argument yo, but
ignorin all strings startin wit a hyphen even if they is not busted lyrics about
by one of tha \fIoptspec\fPs, tha form is `\fB\-A "\-*"\fP\&'\&.
.PP
Each \fIoptarg\fP followin a \fIoptspec\fP must take one of the
followin forms:
.PP
.PD 0
.TP
.PD 0
\fB:\fP\fImessage\fP\fB:\fP\fIaction\fP
.TP
.PD
\fB::\fP\fImessage\fP\fB:\fP\fIaction\fP
An argument ta tha option; \fImessage\fP n' \fIaction\fP is treated as
for ordinary arguments\&.  In tha straight-up original gangsta form, tha argument is mandatory,
and up in tha second form it is optional\&.
.RS
.PP
This crew may be repeated fo' options which take multiple arguments\&.
In other lyrics,
\fB:\fP\fImessage1\fP\fB:\fP\fIaction1\fP\fB:\fP\fImessage2\fP\fB:\fP\fIaction2\fP
specifies dat tha option takes two arguments\&.
.RE
.TP
.PD 0
\fB:*\fP\fIpattern\fP\fB:\fP\fImessage\fP\fB:\fP\fIaction\fP
.TP
.PD 0
\fB:*\fP\fIpattern\fP\fB::\fP\fImessage\fP\fB:\fP\fIaction\fP
.TP
.PD
\fB:*\fP\fIpattern\fP\fB:::\fP\fImessage\fP\fB:\fP\fIaction\fP
This raps bout multiple arguments\&.  Only tha last \fIoptarg\fP for
an option takin multiple arguments may be
given up in dis form\&.  If tha \fIpattern\fP is empty (i\&.e\&., \fB:*:\fP), all
the remainin lyrics on tha line is ta be completed as busted lyrics bout by the
\fIaction\fP; otherwise, all tha lyrics up ta n' includin a word matching
the \fIpattern\fP is ta be completed rockin tha \fIaction\fP\&.
.RS
.PP
Multiple colons is treated as fo' tha `\fB*:\fP\fI\&.\&.\&.\fP\&' forms for
ordinary arguments:  when tha \fImessage\fP is preceded by two colons,
the \fBwords\fP special array n' tha \fBCURRENT\fP special parameta are
modified durin tha execution or evaluation of tha \fIaction\fP ta refer
only ta tha lyrics afta tha option\&.  When preceded by three colons, they
are modified ta refer only ta tha lyrics covered by dis description\&.
.RE
.RE
.PP
Any literal colon up in a \fIoptname\fP, \fImessage\fP, or \fIaction\fP
must be preceded by a funky-ass backslash, `\fB\e:\fP\&'\&.
.PP
Each of tha forms above may be preceded by a list up in parentheses
of option names n' argument numbers\&.  If tha given option is on
the command line, tha options n' arguments indicated up in parentheses
will not be offered\&.  For example, 
`\fB(\-two \-three 1)\-one:\&.\&.\&.\fP\&' completes tha option `\fB\-one\fP'; if this
appears on tha command line, tha options \fB\-two\fP n' \fB\-three\fP n' the
first ordinary argument aint gonna be completed afta it\&.
`\fB(\-foo):\fP\fI\&.\&.\&.\fP\&' specifies a ordinary argument completion;
\fB\-foo\fP aint gonna be completed if dat argument be already present\&.
.PP
Other shit may step tha fuck up in tha list of excluded options ta indicate
various other shit dat should not be applied when tha current
specification is matched: a single star (\fB*\fP) fo' tha rest arguments
(i\&.e\&. a justification of tha form `\fB*:\&.\&.\&.\fP\&'); a cold-ass lil colon (\fB:\fP)
for all aiiight (non\-option\-) arguments; n' a hyphen (\fB\-\fP) fo' all
options\&.  For example, if `\fB(*)\fP\&' appears before a option n' the
option appears on tha command line, tha list of remainin arguments
(those shown up in tha above table beginnin wit `\fB*:\fP\&') aint gonna be
completed\&.
.PP
To aid up in reuse of justifications, it is possible ta precede any of the
forms above wit `\fB!\fP\&'; then tha form will no longer be completed,
although if tha option or argument appears on tha command line they will
be skipped as normal\&.  Da main use fo' dis is when tha arguments are
given by a array, n' \fB_arguments\fP is called repeatedly fo' more
specific contexts: on tha straight-up original gangsta call `\fB_arguments $global_options\fP\&' is
used, n' on subsequent calls `\fB_arguments !$^global_options\fP\&'\&.
.PP
In each of tha forms above tha \fIaction\fP determines how
completions should be generated\&.  Except fo' tha `\fB\->\fP\fIstring\fP\&'
form below, tha \fIaction\fP is ghon be executed by callin the
\fB_all_labels\fP function ta process all tag labels\&.  No special handling
of tags is needed unless a gangbangin' function call introduces a freshly smoked up one\&.
.PP
Da option `\fB\-O\fP \fIname\fP\&' specifies tha name of a array whose elements
will be passed as arguments ta functions called ta execute \fIaction\fPs\&.
For example, dis can be used ta pass tha same ol' dirty set of options fo' the
\fBcompadd\fP builtin ta all \fIaction\fPs\&.
.PP
Da forms fo' \fIaction\fP is as bigs up\&.
.PP
.PD 0
.TP
.PD
\fB \fP (single unquoted space)
This is useful where a argument is required but it aint possible or
desirable ta generate matches fo' it\&.  The
\fImessage\fP is ghon be displayed but no completions listed\&.  Note
that even up in dis case tha colon all up in tha end of tha \fImessage\fP is
needed; it may only be omitted when neither a \fImessage\fP
nor a \fIaction\fP is given\&.
.TP
\fB(\fP\fIitem1\fP \fIitem2\fP \fI\&.\&.\&.\fP\fB)\fP
One of a list of possible matches, fo' example:
.RS
.PP
.RS
.nf
\fB\fB:foo:(foo bar baz\fP\fB)\fP\fP
.fi
.RE
.RE
.TP
\fB((\fIitem1\fP\e:\fIdesc1\fP \fI\&.\&.\&.\fP))\fP
Similar ta tha above yo, but wit descriptions fo' each possible match\&.
Note tha backslash before tha colon\&.  For example,
.RS
.PP
.RS
.nf
\fB\fB:foo:((a\e:bar b\e:baz\fP\fB))\fP\fP
.fi
.RE
.PP
Da matches is ghon be listed together wit they descriptions if the
\fBdescription\fP steez is set wit tha \fBvalues\fP tag up in tha context\&.
.RE
.TP
\fB\->\fP\fIstring\fP
In dis form, \fB_arguments\fP processes tha arguments n' options n' then
returns control ta tha callin function wit parametas set ta indicate the
state of processing; tha callin function then make its own arrangements
for generatin completions\&.  For example, functions dat implement a state
machine can use dis type of action\&.
.RS
.PP
Where \fB_arguments\fP encountas \fIaction\fP up in tha `\fB\->\fP\fIstring\fP\&'
format, it will strip all leadin n' trailin whitespace from \fIstring\fP
and set tha array \fBstate\fP ta tha set of all \fIstring\fPs fo' which an
action is ta be performed\&.  Da elementz of tha array \fBstate_descr\fP are
assigned tha correspondin \fImessage\fP field from each \fIoptarg\fP
containin such a \fIaction\fP\&.
.PP
By default n' up in common wit all other well behaved completion
functions, _arguments returns status zero if dat shiznit was able ta add matches and
non\-zero otherwise\&. But fuck dat shiznit yo, tha word on tha street is dat if tha \fB\-R\fP option is given,
\fB_arguments\fP will instead return a statuz of 300 ta indicate that
\fB$state\fP is ta be handled\&.
.PP
In addizzle ta \fB$state\fP n' \fB$state_descr\fP, \fB_arguments\fP also
sets tha global
parametas `\fBcontext\fP\&', `\fBline\fP' n' `\fBopt_args\fP' as busted lyrics about
below, n' do not reset any chizzlez made ta tha special parameters
like fuckin \fBPREFIX\fP n' \fBwords\fP\&.  This gives tha callin function the
choice of resettin these parametas or propagatin chizzlez up in them\&.
.PP
A function callin \fB_arguments\fP wit at least
one action containin a `\fB\->\fP\fIstring\fP\&' must therefore declare
appropriate local parameters:
.PP
.RS
.nf
\fBlocal context state state_descr line
typeset \-A opt_args\fP
.fi
.RE
.PP
to prevent \fB_arguments\fP from alterin tha global environment\&.
.RE
.TP
\fB{\fP\fIeval\-string\fP\fB}\fP
A strang up in braces is evaluated as shell code ta generate matches\&.  If the
\fIeval\-string\fP itself do not begin wit a openin parenthesis or
brace it is split tha fuck into separate lyrics before execution\&.
.TP
\fB= \fP\fIaction\fP
If tha \fIaction\fP starts wit `\fB= \fP\&' (an equals sign followed by a
space), \fB_arguments\fP will bang tha contentz of tha \fIargument\fP
field of tha current context as tha freshly smoked up first element up in tha \fBwords\fP 
special array n' increment tha value of tha \fBCURRENT\fP special
parameter\&.  This has tha effect of insertin a thugged-out dummy word onto the
completion command line while not changin tha point at which completion is
takin place\&.
.RS
.PP
This is most useful wit one of tha specifiers dat restrict tha lyrics on
the command line on which tha \fIaction\fP is ta operate (the two\- and
three\-colon forms above)\&.  One particular use is when a \fIaction\fP itself
causes \fB_arguments\fP on a restricted range; it is necessary ta use this
trick ta bang a appropriate command name tha fuck into tha range fo' tha second
call ta \fB_arguments\fP ta be able ta parse tha line\&.
.RE
.TP
.PD 0
 \fIword\&.\&.\&.\fP
.TP
.PD
\fIword\&.\&.\&.\fP
This covers all forms other than dem above\&.  If tha \fIaction\fP
starts wit a space, tha remainin list of lyrics is ghon be invoked unchanged\&.
.RS
.PP
Otherwise it is ghon be invoked wit some extra strings placed afta the
first word; these is ta be passed down as options ta tha \fBcompadd\fP
builtin\&.  They ensure dat tha state specified by \fB_arguments\fP, in
particular tha descriptionz of options n' arguments, is erectly passed
to tha completion command\&.  These additionizzle arguments
are taken from tha array parameta `\fBexpl\fP\&'; dis is ghon be set up
before executin tha \fIaction\fP n' hence may be referred ta inside it,
typically up in a expansion of tha form `\fB$expl[@]\fP\&' which preserves empty
elementz of tha array\&.
.RE
.PP
Durin tha performizzle of tha action tha array `\fBline\fP\&' is ghon be set to
the aiiight arguments from tha command line, i\&.e\&. tha lyrics from the
command line afta tha command name excludin all options n' their
arguments\&.  Options is stored up in tha associatizzle array
`\fBopt_args\fP\&' wit option names as keys n' they arguments as
the joints\&.  For options dat have mo' than one argument these are
given as one string, separated by colons\&.  All colons up in tha original
arguments is preceded wit backslashes\&.
.PP
Da parameta `\fBcontext\fP\&' is set when returnin ta tha callin function
to big-ass up a action of tha form `\fB\->\fP\fIstring\fP\&'\&.  It be set ta an
array of elements correspondin ta tha elementz of \fB$state\fP\&.  Each
element be a suitable name fo' tha argument field of tha context: either a
strin of tha form `\fBoption\fP\fI\-opt\fP\fB\-\fP\fIn\fP\&' fo' tha \fIn\fP'th
argument of tha option \fI\-opt\fP, or a strang of tha form
`\fBargument\-\fP\fIn\fP\&' fo' tha \fIn\fP'th argument\&.  For `rest' arguments,
that is dem up in tha list all up in tha end not handled by position, \fIn\fP is the
strin `\fBrest\fP\&'\&.  For example, when completin tha argument of tha \fB\-o\fP
option, tha name is `\fBoption\-o\-1\fP\&', while fo' tha second normal
(non\-option\-) argument it is `\fBargument\-2\fP\&'\&.
.PP
Furthermore, durin tha evaluation of tha \fIaction\fP tha context name in
the \fBcurcontext\fP parameta be altered ta append tha same strang dat is
stored up in tha \fBcontext\fP parameter\&.
.PP
Da option \fB\-C\fP  drops some lyrics ta \fB_arguments\fP ta modify tha \fBcurcontext\fP
parameta fo' a action of tha form `\fB\->\fP\fIstate\fP\&'\&.  This is the
standard parameta used ta keep track of tha current context\&.  Here it
(and not tha \fBcontext\fP array) should be made local ta tha calling
function ta avoid passin back tha modified value n' should be
initialised ta tha current value all up in tha start of tha function:
.PP
.RS
.nf
\fBlocal curcontext="$curcontext"\fP
.fi
.RE
.PP
This is useful where it aint possible fo' multiple states ta be valid
together\&.
.PP
It be possible ta specify multiple setz of options and
arguments wit tha sets separated by single hyphens\&.  Da justifications
before tha straight-up original gangsta hyphen (if any) is shared by all tha remainin sets\&.
Da first word up in every last muthafuckin other set serves up a name fo' the
set which may step tha fuck up in exclusion lists up in justifications,
either ridin' solo or before one of tha possible joints busted lyrics bout above\&.
In tha second case a `\fB\-\fP\&' should step tha fuck up between dis name n' the
remainder\&.
.PP
For example:
.PP
.RS
.nf
\fB_arguments \e 
    \-a \e 
  \- set1 \e 
    \-c \e 
  \- set2 \e 
    \-d \e 
    \&':arg:(x2 y2)'\fP
.fi
.RE
.PP
This defines two sets\&.  When tha command line gotz nuff tha option
`\fB\-c\fP\&', tha `\fB\-d\fP' option n' tha argument aint gonna be considered
possible completions\&.  When it gotz nuff `\fB\-d\fP\&' or a argument, the
option `\fB\-c\fP\&' aint gonna be considered\&.  But fuck dat shiznit yo, tha word on tha street is dat afta `\fB\-a\fP'
both sets will still be considered valid\&.
.PP
If tha name given fo' one of tha mutually exclusive sets iz of tha form
`\fB(\fP\fIname\fP\fB)\fP\&' then only one value from each set will ever
be completed; mo' formally, all justifications is mutually
exclusive ta all other justifications up in tha same set\&.  This is
useful fo' definin multiple setz of options which is mutually
exclusive n' up in which tha options is aliases fo' each other\&.  For
example:
.PP
.RS
.nf
\fB_arguments \e 
    \-a \-b \e 
  \- \&'(compress)' \e 
    {\-c,\-\-compress}\&'[compress]' \e 
  \- \&'(uncompress)' \e 
    {\-d,\-\-decompress}\&'[decompress]'\fP
.fi
.RE
.PP
As tha completion code has ta parse tha command line separately fo' each
set dis form of argument is slow n' should only be used when necessary\&.
A useful alternatizzle is often a option justification wit rest\-arguments
(as up in `\fB\-foo:*:\&.\&.\&.\fP\&'); here tha option \fB\-foo\fP swallows up all
remainin arguments as busted lyrics bout by tha \fIoptarg\fP definitions\&.
.PP
Da option `\fB\-\fP\fB\-\fP\&' allows \fB_arguments\fP ta work up tha namez of long
options dat support tha `\fB\-\fP\fB\-help\fP\&' option which is standard up in many
GNU commands\&.  Da command word is called wit tha argument
`\fB\-\fP\fB\-help\fP\&' n' tha output examined fo' option names\&.  Clearly, it can
be fucked up ta pass dis ta commandz which may not support dis option as
the behaviour of tha command is unspecified\&.
.PP
In addizzle ta options, `\fB_arguments \-\fP\fB\-\fP\&' will try ta deduce the
typez of arguments available fo' options when tha form
`\fB\-\fP\fB\-\fP\fIopt\fP=\fIval\fP\&' is valid\&.  It be also possible ta provide
hints by examinin tha help text of tha command n' addin \fIhelpspec\fP of
the form `\fIpattern\fP\fB:\fP\fImessage\fP\fB:\fP\fIaction\fP\&'; note dat other
\fB_arguments\fP \fIspec\fP forms is not used\&.  Da \fIpattern\fP is matched
against tha help text fo' a option, n' if it matches tha \fImessage\fP and
\fIaction\fP is used as fo' other argument specifiers\&.  Da special case
of `\fB*:\fP\&' means both \fImessage\fP n' \fIaction\fP is empty, which has
the effect of causin options havin no description up in tha help output to
be ordered up in listings ahead of options dat gotz a thugged-out description\&.
.PP
For example:
.PP
.RS
.nf
\fB_arguments \-\- \&'*\e*:toggle:(yes no)' \e 
              \&'*=FILE*:file:_files' \e 
              \&'*=DIR*:directory:_filez \-/' \e 
              \&'*=PATH*:directory:_filez \-/'\fP
.fi
.RE
.PP
Here, `\fByes\fP\&' n' `\fBno\fP' is ghon be completed as tha argument of
options whose description endz up in a star; file names is ghon be completed for
options dat contain tha substrin `\fB=FILE\fP\&' up in tha description; and
directories is ghon be completed fo' options whose description gotz nuff
`\fB=DIR\fP\&' or `\fB=PATH\fP'\&.  Da last three is up in fact tha default n' so
need not be given explicitly, although it is possible ta override tha use
of these patterns\&.  A typical help text which uses dis feature is:
.PP
.RS
.nf
\fB  \-C, \-\-directory=DIR          chizzle ta directory DIR\fP
.fi
.RE
.PP
so dat tha above justifications will cause directories ta be completed
afta `\fB\-\fP\fB\-directory\fP\&', though not afta `\fB\-C\fP'\&.
.PP
Note also dat \fB_arguments\fP tries ta smoke up automatically if the
argument fo' a option is optional\&.  This can be specified explicitly by
doublin tha colon before tha \fImessage\fP\&.
.PP
If tha \fIpattern\fP endz up in `\fB(\-)\fP\&', dis is ghon be removed from the
pattern n' tha \fIaction\fP is ghon be used only directly afta the
`\fB=\fP\&', not up in tha next word\&.  This is tha behaviour of a normal
specification defined wit tha form `\fB=\-\fP\&'\&.
.PP
Da `\fB_arguments \-\fP\fB\-\fP\&' can be followed by tha option `\fB\-i\fP
\fIpatterns\fP\&' ta give patterns fo' options which is not ta be
completed\&.  Da patterns can be given as tha name of a array parameter
or as a literal list up in parentheses\&.  For example,
.PP
.RS
.nf
\fB_arguments \-\- \-i \e 
    "(\-\fB\-(en|dis)able\-FEATURE*)"\fP\fP
.fi
.RE
.PP
will cause completion ta ignore tha options
`\fB\-\fP\fB\-enable\-FEATURE\fP\&' n' `\fB\-\fP\fB\-disable\-FEATURE\fP' (this example is
useful wit GNU \fBconfigure\fP)\&.
.PP
Da `\fB_arguments \-\fP\fB\-\fP\&' form can also be followed by tha option `\fB\-s\fP
\fIpair\fP\&' ta describe option aliases\&.  Da \fIpair\fP consistz of a list
of alternatin patterns n' correspondin replacements, enclosed up in parens
and quoted so dat it forms a single argument word up in tha \fB_arguments\fP
call\&.
.PP
For example, some \fBconfigure\fP\-script help output raps bout options only
as `\fB\-\fP\fB\-enable\-foo\fP\&' yo, but tha script also accepts tha negated form
`\fB\-\fP\fB\-disable\-foo\fP\&'\&.  To allow completion of tha second form:
.PP
.RS
.nf
\fB\fB_arguments \-\- \-s "(#\-\fP\fB\-enable\- \-\fP\fB\-disable\-)"\fP\fP
.fi
.RE
.PP
Finally, note dat \fB_arguments\fP generally expects ta be tha primary
function handlin any completion fo' which it is used\&.  It may have side
effects which chizzle tha treatment of any matches added by other functions
called afta it\&.  To combine \fB_arguments\fP wit other functions, them
functions should be called either before \fB_arguments\fP, as a \fIaction\fP
within a \fIspec\fP, or up in handlezs fo' `\fB\->\fP\fIstate\fP\&' actions\&.
.PP
Here be a mo' general example of tha use of \fB_arguments\fP:
.PP
.RS
.nf
\fB_arguments \&'\-l+:left border:' \e 
           \&'\-format:paper size:(letta A4)' \e 
           \&'*\-copy:output file:_files::resolution:(300 600)' \e 
           \&':postscript file:_filez \-g \e*\&.\e(ps\e|eps\e)' \e 
           \&'*:page number:'\fP
.fi
.RE
.PP
This raps bout three options: `\fB\-l\fP\&', `\fB\-format\fP', and
`\fB\-copy\fP\&'\&.  Da first takes one argument busted lyrics bout as `\fIleft
border\fP\&' fo' which no completion is ghon be offered cuz of tha empty
action\&.  Its argument may come directly afta tha `\fB\-l\fP\&' or it may be 
given as tha next word on tha line\&.
.PP
Da `\fB\-format\fP\&' option takes one
argument up in tha next word, busted lyrics bout as `\fIpaper size\fP\&' fo' which
only tha strings `\fBletter\fP\&' n' `\fBA4\fP' is ghon be completed\&.
.PP
Da `\fB\-copy\fP\&' option may step tha fuck up mo' than once on tha command line and
takes two arguments\&.  Da first is mandatory n' is ghon be completed as a
filename\&.  Da second is optionizzle (because of tha second colon before
the description `\fIresolution\fP\&') n' is ghon be completed from tha strings
`\fB300\fP\&' n' `\fB600\fP'\&.
.PP
Da last two descriptions say what tha fuck should be completed as
arguments\&.  Da first raps bout tha straight-up original gangsta argument as a
`\fIpostscript file\fP\&' n' make filez endin up in `\fBps\fP' or `\fBeps\fP' 
be completed\&.  Da last description gives all other arguments the
description `\fIpage numbers\fP\&' but do not offer completions\&.
.RE
.TP
\fB_cache_invalid\fP \fIcache_identifier\fP
This function returns status zero if tha completions cache correspondin to
the given cache identifier needz rebuilding\&.  It determines dis by
lookin up tha \fBcache\-policy\fP steez fo' tha current context\&.
This should provide a gangbangin' function name which is run wit tha full path ta the
relevant cache file as tha only argument\&.
.RS
.PP
Example:
.PP
.RS
.nf
\fB_example_caching_policy () {
    # rebuild if cache is mo' than a week old
    local \-a oldp
    oldp=( "$1"(Nm+7) )
    (( $#oldp ))
}\fP
.fi
.RE
.RE
.TP
\fB_call_function\fP \fIreturn\fP \fIname\fP [ \fIargs\fP \&.\&.\&. ]
If a gangbangin' function \fIname\fP exists, it is called wit tha arguments
\fIargs\fP\&.  Da \fIreturn\fP argument gives tha name of a parameta up in which
the return status from tha function \fIname\fP should be stored; if \fIreturn\fP
is empty or a single hyphen it is ignored\&.
.RS
.PP
Da return statuz of \fB_call_function\fP itself is zero if tha function
\fIname\fP exists n' was called n' non\-zero otherwise\&.
.RE
.TP
\fB_call_program\fP \fItag\fP \fIstring\fP \&.\&.\&.
This function serves up a mechanizzle fo' tha user ta override tha use of an
external command\&.  It looks up tha \fBcommand\fP steez wit tha supplied
\fItag\fP\&.  If tha steez is set, its value is used as tha command to
execute\&.  Da \fIstring\fPs from tha call ta \fB_call_program\fP, or from the
style if set, is concatenated wit spaces between dem n' tha resulting
strin is evaluated\&.  Da return status is tha return statuz of tha command
called\&.
.TP
\fB_combination\fP [ \fB\-s\fP \fIpattern\fP ] \fItag\fP \fIstyle\fP \fIspec\fP \&.\&.\&. \fIfield\fP \fIopts\fP \&.\&.\&.
This function is used ta complete combinationz of joints,  fo' example
pairz of hostnames n' usernames\&.  Da \fIstyle\fP argument gives tha style
which defines tha pairs; it is looked up in a cold-ass lil context wit tha \fItag\fP
specified\&.
.RS
.PP
Da steez name consistz of field names separated by hyphens, fo' example
`\fBusers\-hosts\-ports\fP\&'\&.  For each field fo' a value be already known, a
\fIspec\fP of tha form `\fIfield\fP\fB=\fP\fIpattern\fP\&' is given\&.  For example,
if tha command line so far specifies a user `\fBpws\fP\&', tha argument
`\fBusers=pws\fP\&' should appear\&.
.PP
Da next argument wit no equals sign is taken as tha name of tha field
for which completions should be generated (presumably not one of the
\fIfield\fPs fo' which tha value is known)\&.
.PP
Da matches generated is ghon be taken from tha value of tha style\&.  These
should contain tha possible joints fo' tha combinations up in tha appropriate
order (users, hosts, ports up in tha example above)\&.  Da different fields
the joints fo' tha different fieldz is separated by colons\&.  This
can be altered wit tha option \fB\-s\fP ta \fB_combination\fP which specifies a
pattern\&.  Typically dis be a cold-ass lil characta class, as fo' example
`\fB\-s "[:@]"\fP\&' up in tha case of tha \fBusers\-hosts\fP style\&.    Each
`\fIfield\fP\fB=\fP\fIpattern\fP\&' justification restricts the
completions which apply ta elementz of tha steez wit appropriately
matchin fields\&.
.PP
If no steez wit tha given name is defined fo' tha given tag,
or if none of tha strings up in style\&z value match yo, but a
function name of tha required field preceded by an
underscore is defined, dat function is ghon be called ta generate the
matches\&.  For example, if there is no `\fBusers\-hosts\-ports\fP\&' or no
matchin hostname when a host is required, tha function `\fB_hosts\fP\&' will
automatically be called\&.
.PP
If tha same name is used fo' mo' than one field, up in both the
`\fIfield\fP\fB=\fP\fIpattern\fP\&' n' tha argument dat gives tha name of the
field ta be completed, tha number of tha field (startin wit one) may
be given afta tha fieldname, separated from it by a cold-ass lil colon\&.
.PP
All arguments afta tha required field name is passed to
\fBcompadd\fP when generatin matches from tha steez value, or ta 
the functions fo' tha fieldz if they is called\&.
.RE
.TP
\fB_describe\fP [ \fB\-oO\fP | \fB\-t\fP \fItag\fP ] \fIdescr\fP \fIname1\fP [ \fIname2\fP ] \fIopts\fP \&.\&.\&. \fB\-\fP\fB\-\fP \&.\&.\&.
This function associates completions wit descriptions\&.
Multiple crews separated by \fB\-\fP\fB\-\fP can be supplied, potentially with
different completion options \fIopts\fP\&.
.RS
.PP
Da \fIdescr\fP is taken as a strang ta display above tha matches if the
\fBformat\fP steez fo' tha \fBdescriptions\fP tag is set\&.  This is followed by
one or two namez of arrays followed by options ta pass ta \fBcompadd\fP\&.  The
first array gotz nuff tha possible completions wit they descriptions in
the form `\fIcompletion\fP\fB:\fP\fIdescription\fP\&'\&.  Any literal colons in
\fIcompletion\fP must be quoted wit a funky-ass backslash\&.  If a second array is
given, it should have tha same number of elements as tha first; up in this
case tha correspondin elements is added as possible completions instead
of tha \fIcompletion\fP strings from tha straight-up original gangsta array\&.  Da completion list
will retain tha descriptions from tha straight-up original gangsta array\&.  Finally, a set of
completion options can appear\&.
.PP
If tha option `\fB\-o\fP\&' appears before tha straight-up original gangsta argument, tha matches added
will be treated as namez of command options (N\&.B\&. not shell options),
typically followin a `\fB\-\fP\&', `\fB\-\fP\fB\-\fP' or `\fB+\fP' on tha command
line\&.  In dis case \fB_describe\fP uses tha \fBprefix\-hidden\fP,
\fBprefix\-needed\fP n' \fBverbose\fP stylez ta smoke up if tha strings should
be added as completions n' if tha descriptions should be shown\&.  Without
the `\fB\-o\fP\&' option, only tha \fBverbose\fP steez is used ta decizzle how
descriptions is shown\&.  If `\fB\-O\fP\&' is used instead of `\fB\-o\fP', command
options is completed as above but \fB_describe\fP aint gonna handle the
\fBprefix\-needed\fP style\&.
.PP
With tha \fB\-t\fP option a \fItag\fP can be specified\&.  Da default is
`\fBvalues\fP\&' or, if tha \fB\-o\fP option is given, `\fBoptions\fP'\&.
.PP
If selected by tha \fBlist\-grouped\fP style, strings wit tha same
description will step tha fuck up together up in tha list\&.
.PP
\fB_describe\fP uses tha \fB_all_labels\fP function ta generate tha matches, so
it do not need ta step tha fuck up inside a loop over tag labels\&.
.RE
.TP
\fB_description\fP [ \fB\-x\fP ] [ \fB\-12VJ\fP ] \fItag\fP \fIname\fP \fIdescr\fP [ \fIspec\fP \&.\&.\&. ]
This function aint ta be trippin wit tha previous one; it is used as
a helper function fo' bustin options ta \fBcompadd\fP\&.  It be buried
inside nuff of tha higher level completion functions n' so often do
not need ta be called directly\&.
.RS
.PP
Da stylez listed below is tested up in tha current context rockin the
given \fItag\fP\&.  Da resultin options fo' \fBcompadd\fP is put tha fuck into the
array named \fIname\fP (this is traditionally `\fBexpl\fP\&' yo, but this
convention aint enforced)\&.  Da description fo' tha correspondin set
of matches is passed ta tha function up in \fIdescr\fP\&.
.PP
Da stylez tested are: \fBformat\fP, \fBhidden\fP, \fBmatcher\fP,
\fBignored\-patterns\fP n' \fBgroup\-name\fP\&.  Da \fBformat\fP steez is first
tested fo' tha given \fItag\fP n' then fo' tha \fBdescriptions\fP tag if
no value was found, while tha remainder is only tested fo' tha tag
given as tha straight-up original gangsta argument\&.  Da function also calls \fB_setup\fP
which tests some mo' styles\&.
.PP
Da strang returned by tha \fBformat\fP steez (if any) is ghon be modified so
that tha sequence `\fB%d\fP\&' is replaced by tha \fIdescr\fP given as tha third
argument without any leadin or trailin white space\&.  If, after
removin tha white space, tha \fIdescr\fP is tha empty string, tha format
style aint gonna be used n' tha options put tha fuck into tha \fIname\fP array will
not contain a explanation strang ta be displayed above tha matches\&.
.PP
If \fB_description\fP is called wit mo' than three arguments,
the additionizzle \fIspec\fPs should be of tha form `\fIchar\fP\fB:\fP\fIstr\fP\&'\&.
These supply escape sequence replacements fo' tha \fBformat\fP style:
every appearizzle of `\fB%\fP\fIchar\fP\&' will be
replaced by \fIstring\fP\&.
.PP
If tha \fB\-x\fP option is given, tha description is ghon be passed to
\fBcompadd\fP rockin tha \fB\-x\fP option instead of tha default \fB\-X\fP\&.  This
means dat tha description is ghon be displayed even if there be no
correspondin matches\&.
.PP
Da options placed up in tha array \fIname\fP take account of the
\fBgroup\-name\fP style, so matches is placed up in a separate crew where
necessary\&.  Da crew normally has its elements sorted (by passin the
option \fB\-J\fP ta \fBcompadd\fP) yo, but if a option startin wit `\fB\-V\fP\&',
`\fB\-J\fP\&', `\fB\-1\fP', or `\fB\-2\fP' is passed ta \fB_description\fP, that
option is ghon be included up in tha array\&.  Hence it is possible fo' the
completion crew ta be unsorted by givin tha option `\fB\-V\fP\&',
`\fB\-1V\fP\&', or `\fB\-2V\fP'\&.
.PP
In most cases, tha function is ghon be used like this:
.PP
.RS
.nf
\fBlocal expl
_description filez expl file
compadd "$expl[@]" \- "$files[@]"\fP
.fi
.RE
.PP
Note tha use of tha parameta \fBexpl\fP, tha hyphen, n' tha list of
matches\&.  Almost all calls ta \fBcompadd\fP within tha completion system use
a similar format; dis ensures dat user\-specified stylez is erectly
passed down ta tha builtins which implement tha internalz of completion\&.
.RE
.TP
\fB_dispatch\fP \fIcontext strang \&.\&.\&.\fP
This sets tha current context ta \fIcontext\fP n' looks fo' completion
functions ta handle dis context by hustlin all up in tha list of command
names or special contexts (as busted lyrics bout above fo' \fBcompdef\fP)
given as \fIstrin \&.\&.\&.\fP\&.  Da first completion function ta be defined
for one of tha contexts up in tha list is used ta generate matches\&.
Typically, tha last \fIstring\fP is \fB\-default\-\fP ta cause tha function
for default completion ta be used as a gangbangin' fallback\&.
.RS
.PP
Da function sets tha parameter
\fB$service\fP ta tha \fIstring\fP bein tried, n' sets
the \fIcontext/command\fP field (the fourth) of tha \fB$curcontext\fP
parameta ta tha \fIcontext\fP given as tha straight-up original gangsta argument\&.
.RE
.TP
\fB_files\fP
Da function \fB_files\fP calls \fB_path_files\fP wit all tha arguments it
was passed except fo' \fB\-g\fP n' \fB\-/\fP\&.  Da use of these two options
dependz on tha settin of tha  \fBfile\-patterns\fP style\&.
.RS
.PP
This function accepts tha full set of options allowed by
\fB_path_files\fP, busted lyrics bout below\&.
.RE
.TP
\fB_gnu_generic\fP
This function be a simple wrapper round tha \fB_arguments\fP function
busted lyrics bout above\&.  It can be used ta determine automatically tha long
options understood by commandz dat produce a list when passed the
option `\fB\-\fP\fB\-help\fP\&'\&.  It be intended ta be used as a top\-level
completion function up in its own right\&.  For example, ta enable option
completion fo' tha commandz \fBfoo\fP n' \fBbar\fP, use
.RS
.PP
.RS
.nf
\fBcompdef _gnu_generic foo bar\fP
.fi
.RE
.PP
afta tha call ta \fBcompinit\fP\&.
.PP
Da completion system as supplied is conservatizzle up in its use of this
function, since it is blingin ta be shizzle tha command understandz the
option `\fB\-\fP\fB\-help\fP\&'\&.
.RE
.TP
\fB_guard\fP [ \fIoptions\fP ] \fIpattern descr\fP
This function is intended ta be used up in tha \fIaction\fP for
the justifications passed ta \fB_arguments\fP n' similar functions\&.  It
returns immediately wit a non\-zero return status if
the strang ta be completed do not match tha \fIpattern\fP\&.  If the
pattern matches, tha \fIdescr\fP is displayed; tha function then returns
status zero if tha word ta complete aint empty, non\-zero otherwise\&.
.RS
.PP
Da \fIpattern\fP may be preceded by any of tha options understood by
\fBcompadd\fP dat is passed down from \fB_description\fP, namely \fB\-M\fP,
\fB\-J\fP, \fB\-V\fP, \fB\-1\fP, \fB\-2\fP, \fB\-n\fP, \fB\-F\fP n' \fB\-X\fP\&.  All of these
options is ghon be ignored\&.  This fits up in conveniently wit the
argument\-passin conventionz of actions fo' \fB_arguments\fP\&.
.PP
As a example, consider a cold-ass lil command takin tha options \fB\-n\fP and
\fB\-none\fP, where \fB\-n\fP must be followed by a numeric value up in the
same word\&.  By using:
.PP
.RS
.nf
\fB_arguments \&'\-n\-: :_guard "[0\-9]#" "numeric value"' '\-none'\fP
.fi
.RE
.PP
\fB_arguments\fP can be made ta both display tha message `\fBnumeric
value\fP\&' n' complete options afta `\fB\-n<TAB>\fP'\&.  If tha `\fB\-n\fP' is
already followed by one or mo' digits (the pattern passed to
\fB_guard\fP) only tha message is ghon be displayed; if tha `\fB\-n\fP\&' is
followed by another character, only options is completed\&.
.RE
.TP
.PD 0
\fB_message\fP [ \fB\-r12\fP ] [ \fB\-VJ\fP \fIgroup\fP ] \fIdescr\fP
.TP
.PD
\fB_message \-e\fP [ \fItag\fP ] \fIdescr\fP
Da \fIdescr\fP is used up in tha same way as tha third
argument ta tha \fB_description\fP function, except dat tha resulting
strin will always be shown whether or not matches were
generated\&.  This is useful fo' displayin a help message up in places where
no completions can be generated\&.
.RS
.PP
Da \fBformat\fP steez is examined wit tha \fBlyrics\fP tag ta find a
message; tha usual tag, \fBdescriptions\fP, is used only if tha steez is
not set wit tha former\&.
.PP
If tha \fB\-r\fP option is given, no steez is used; tha \fIdescr\fP is
taken literally as tha strang ta display\&.  This is most useful
when tha \fIdescr\fP be reppin a pre\-processed argument list
which already gotz nuff a expanded description\&.
.PP
Da \fB\-12VJ\fP options n' tha \fIgroup\fP is passed ta \fBcompadd\fP and
hence determine tha crew tha message strang be added to\&.
.PP
Da second \fB\-e\fP form gives a thugged-out description fo' completions wit tha tag
\fItag\fP ta be shown even if there be no matches fo' dat tag\&.  This form
is called by \fB_arguments\fP up in tha event dat there is no action fo' an
option justification\&.  Da tag can be omitted n' if so tha tag is taken
from tha parameta \fB$curtag\fP; dis is maintained by tha completion
system n' so is probably erect\&.  Note dat if there be no matches at
the time dis function is called, \fBcompstate[insert]\fP is cleared, so
additionizzle matches generated lata is not banged on tha command line\&.
.RE
.TP
\fB_multi_parts\fP \fIsep\fP \fIarray\fP
Da argument \fIsep\fP be a separator character\&.
Da \fIarray\fP may be either the
name of a array parameta or a literal array up in tha form
`\fB(foo bar\fP\fB)\fP\&', a parenthesised list of lyrics separated
by whitespace\&.  Da possible completions is the
strings from tha array\&.  But fuck dat shiznit yo, tha word on tha street is dat each chunk delimited by \fIsep\fP will be
completed separately\&.  For example, tha \fB_tar\fP function uses
`\fB_multi_parts\fP \fB/\fP \fIpatharray\fP\&' ta complete partial file paths
from tha given array of complete file paths\&.
.RS
.PP
Da \fB\-i\fP option causes \fB_multi_parts\fP ta bang a unique match even
if dat requires multiple separators ta be inserted\&.  This aint usually
the expected behaviour wit filenames yo, but certain other types of
completion, fo' example dem wit a gangbangin' fixed set of possibilities, may be
more suited ta dis form\&.
.PP
Like other utilitizzle functions, dis function accepts tha `\fB\-V\fP\&',
`\fB\-J\fP\&', `\fB\-1\fP', `\fB\-2\fP', `\fB\-n\fP', `\fB\-f\fP', `\fB\-X\fP', `\fB\-M\fP',
`\fB\-P\fP\&', `\fB\-S\fP', `\fB\-r\fP', `\fB\-R\fP', n' `\fB\-q\fP' options n' passes
them ta tha \fBcompadd\fP builtin\&.
.RE
.TP
\fB_next_label\fP [ \fB\-x\fP ] [ \fB\-12VJ\fP ] \fItag\fP \fIname\fP \fIdescr\fP [ \fIoptions\fP \&.\&.\&. ]
This function is used ta implement tha loop over different tag
labels fo' a particular tag as busted lyrics bout above fo' tha \fBtag\-order\fP
style\&.  On each call it checks ta peep if there be any mo' tag labels; if
there is it returns status zero, otherwise non\-zero\&.
As dis function requires a cold-ass lil current tag ta be set, it must always follow
a call ta \fB_tags\fP or \fB_requested\fP\&.
.RS
.PP
Da \fB\-x12VJ\fP options n' tha straight-up original gangsta three arguments is passed ta the
\fB_description\fP function\&.  Where appropriate tha \fItag\fP will be
replaced by a tag label up in dis call\&.  Any description given in
the \fBtag\-order\fP steez is preferred ta tha \fIdescr\fP passed to
\fB_next_label\fP\&.
.PP
Da \fIoptions\fP given afta tha \fIdescr\fP
are set up in tha parameta given by \fIname\fP, n' hence is ta be passed
to \fBcompadd\fP or whatever function is called ta add tha matches\&.
.PP
Here be a typical use of dis function fo' tha tag \fBfoo\fP\&.  Da call to
\fB_requested\fP determines if tag \fBfoo\fP is required at all; tha loop
over \fB_next_label\fP handlez any labels defined fo' tha tag up in the
\fBtag\-order\fP style\&.
.PP
.RS
.nf
\fBlocal expl ret=1
\&.\&.\&.
if _axed foo; then
  \&.\&.\&.
  while _next_label foo expl \&'\&.\&.\&.'; do
    compadd "$expl[@]" \&.\&.\&. && ret=0
  done
  \&.\&.\&.
fi
return ret\fP
.fi
.RE
.RE
.TP
\fB_normal\fP
This is tha standard function called ta handle completion outside
any special \fI\-context\-\fP\&.  It be called both ta complete tha command
word n' also tha arguments fo' a cold-ass lil command\&.  In tha second case,
\fB_normal\fP looks fo' a special completion fo' dat command, n' if
there is none it uses tha completion fo' tha \fB\-default\-\fP context\&.
.RS
.PP
A second use is ta reexamine tha command line specified by tha \fB$words\fP
array n' tha \fB$CURRENT\fP parameta afta dem done been modified\&.
For example, tha function \fB_precommand\fP, which
completes afta pre\-command specifiers like fuckin \fBnohup\fP, removes the
first word from tha \fBwords\fP array, decrements tha \fBCURRENT\fP parameter,
then calls \fB_normal\fP again\&.  Da effect is dat `\fBnohup\fP \fIcmd \&.\&.\&.\fP\&'
is treated up in tha same way as `\fIcmd \&.\&.\&.\fP\&'\&.
.PP
If tha command name matches one of tha patterns given by one of the
options \fB\-p\fP or \fB\-P\fP ta \fBcompdef\fP, tha correspondin completion
function is called n' then tha parameta \fB_compskip\fP is
checked\&.  If it is set completion is terminated at dat point even if
no matches done been found\&.  This is tha same ol' dirty effect as up in the
\fB\-first\-\fP context\&.
.RE
.TP
\fB_options\fP
This can be used ta complete tha namez of shell options\&.  It serves up a
matcher justification dat ignores a leadin `\fBno\fP\&', ignores
underscores n' allows upper\-case lettas to
match they lower\-case counterparts (for example, `\fBglob\fP\&',
`\fBnoglob\fP\&', `\fBNO_GLOB\fP' is all completed)\&.  Any arguments
are propagated ta tha \fBcompadd\fP builtin\&.
.TP
\fB_options_set\fP n' \fB_options_unset\fP
These functions complete only set or unset options, wit tha same
matchin justification used up in tha \fB_options\fP function\&.
.RS
.PP
Note dat you need ta uncomment all dem lines up in tha \fB_main_complete\fP
function fo' these functions ta work properly\&.  Da lines up in question
are used ta store tha option settings up in effect before tha completion
widget locally sets tha options it needs\&.  Hence these functions is not
generally used by tha completion system\&.
.RE
.TP
\fB_parameters\fP
This is used ta complete tha namez of shell parameters\&.
.RS
.PP
Da option `\fB\-g\fP \fIpattern\fP\&' limits tha completion ta parameters
whose type matches tha \fIpattern\fP\&.  Da type of a parameta is that
shown by `\fBprint ${(t)\fP\fIparam\fP\fB}\fP\&', hence judicious use of
`\fB*\fP\&' up in \fIpattern\fP is probably necessary\&.
.PP
All other arguments is passed ta tha \fBcompadd\fP builtin\&.
.RE
.TP
\fB_path_files\fP
This function is used all up in tha completion system
to complete filenames\&.  It allows completion of partial paths\&.  For
example, tha strang `\fB/u/i/s/sig\fP\&' may be completed to
`\fB/usr/include/sys/signal\&.h\fP\&'\&.
.RS
.PP
Da options accepted by both \fB_path_files\fP n' \fB_files\fP are:
.PP
.PD 0
.TP
.PD
\fB\-f\fP
Complete all filenames\&.  This is tha default\&.
.TP
\fB\-/\fP
Specifies dat only directories should be completed\&.
.TP
\fB\-g\fP \fIpattern\fP
Specifies dat only filez matchin tha \fIpattern\fP should be completed\&.
.TP
\fB\-W\fP \fIpaths\fP
Specifies path prefixes dat is ta be prepended ta tha strang from the
command line ta generate tha filenames but dat should not be inserted
as completions nor shown up in completion listings\&.  Here, \fIpaths\fP may be
the name of a array parameter, a literal list of paths enclosed in
parentheses or a absolute pathname\&.
.TP
\fB\-F\fP \fIignored\-files\fP
This behaves as fo' tha correspondin option ta tha \fBcompadd\fP builtin\&.
It gives direct control over which
filenames should be ignored\&.  If tha option aint present, the
\fBignored\-patterns\fP steez is used\&.
.PP
Both \fB_path_files\fP n' \fB_files\fP also accept tha followin options
which is passed ta \fBcompadd\fP: `\fB\-J\fP\&', `\fB\-V\fP',
`\fB\-1\fP\&', `\fB\-2\fP', `\fB\-n\fP', `\fB\-X\fP', `\fB\-M\fP', `\fB\-P\fP', `\fB\-S\fP',
`\fB\-q\fP\&', `\fB\-r\fP', n' `\fB\-R\fP'\&.
.PP
Finally, tha \fB_path_files\fP function  uses tha stylez \fBexpand\fP,
\fBambiguous\fP, \fBspecial\-dirs\fP, \fBlist\-suffixes\fP n' \fBfile\-sort\fP
busted lyrics bout above\&.
.RE
.TP
.PD 0
\fB_pick_variant\fP [ \fB\-b\fP \fIbuiltin\-label\fP ] [ \fB\-c\fP \fIcommand\fP ] [ \fB\-r\fP \fIname\fP ]
.TP
.PD
   \fIlabel\fP\fB=\fP\fIpattern\fP \&.\&.\&. \fIlabel\fP [ \fIargs\fP \&.\&.\&. ]
This function is used ta resolve thangs where a single command name
requires mo' than one type of handling, either cuz it
has mo' than one variant or cuz there be a name clash between two
different commands\&.
.RS
.PP
Da command ta run is taken from tha straight-up original gangsta element of tha array
\fBwords\fP unless dis is overridden by tha option \fB\-c\fP\&.  This command
is run n' its output is compared wit a seriez of patterns\&.  Arguments
to be passed ta tha command can be specified all up in tha end afta all the
other arguments\&.  Da patterns ta try up in order is given by tha arguments
\fIlabel\fP\fB=\fP\fIpattern\fP; if tha output of `\fIcommand\fP \fIargs\fP
\fB\&.\&.\&.\fP\&' gotz nuff \fIpattern\fP, then \fBlabel\fP is selected as tha label
for tha command variant\&.  If none of tha patterns match, tha final
command label is selected n' status 1 is returned\&.
.PP
If tha `\fB\-b\fP \fIbuiltin\-label\fP\&' is given, tha command is tested to
see if it is provided as a gangbangin' finger-lickin' dirty-ass shell builtin, possibly autoloaded; if so,
the label \fIbuiltin\-label\fP is selected as tha label fo' tha variant\&.
.PP
If tha `\fB\-r\fP \fIname\fP\&' is given, tha \fIlabel\fP picked is stored in
the parameta named \fIname\fP\&.
.PP
Da thangs up in dis biatch is also cached up in tha \fI_cmd_variant\fP associatizzle array
indexed by tha name of tha command run\&.
.RE
.TP
\fB_regex_arguments\fP \fIname\fP \fIspec\fP \&.\&.\&.
This function generates a cold-ass lil completion function \fIname\fP which matches
the justifications \fIspec\fP \fB\&.\&.\&.\fP, a set of regular expressions as
busted lyrics bout below\&.  Afta hustlin \fB_regex_arguments\fP, tha function
\fIname\fP should be called as a aiiight completion function\&.
Da pattern ta be matched is given by tha contents of
the \fBwords\fP array up ta tha current cursor posizzle joined together
with null characters; no quotation be applied\&.
.RS
.PP
Da arguments is grouped as setz of alternatives separated by `\fB|\fP\&',
which is tried one afta tha other until one matches\&.  Each alternative
consistz of a one or mo' justifications which is tried left ta right,
with each pattern matched bein stripped up in turn from tha command line
bein tested, until all of tha crew succeedz or until one fails; up in the
latta case, tha next alternatizzle is tried\&.  This structure can be
repeated ta arbitrary depth by rockin parentheses; matchin proceedz from
inside ta outside\&.
.PP
A special procedure be applied if no test succeedz but tha remaining
command line strang gotz nuff no null characta (implyin tha remaining
word is tha one fo' which completions is ta be generated)\&.  The
completion target is restricted ta tha remainin word n' any
\fIaction\fPs fo' tha correspondin patterns is executed\&.  In dis case,
nothang is stripped from tha command line string\&.  Da order of
evaluation of tha \fIaction\fPs can be determined by tha \fBtag\-order\fP
style; tha various formats supported by \fB_alternative\fP can be used
in \fIaction\fP\&.  Da \fIdescr\fP is used fo' settin up tha array
parameta \fBexpl\fP\&.
.PP
Specification arguments take one of followin forms, up in which
metacharactas like fuckin `\fB(\fP\&', `\fB)\fP', `\fB#\fP' n' `\fB|\fP'
should be quoted\&.
.PP
.PD 0
.TP
.PD
\fB/\fP\fIpattern\fP\fB/\fP [\fB%\fP\fIlookahead\fP\fB%\fP] [\fB\-\fP\fIguard\fP] [\fB:\fP\fItag\fP\fB:\fP\fIdescr\fP\fB:\fP\fIaction\fP]
This be a single primitizzle component\&.
Da function tests whether tha combined pattern
`\fB(#b)((#B)\fP\fIpattern\fP\fB)\fP\fIlookahead\fP\fB*\fP\&' matches
the command line string\&.  If so, `\fIguard\fP\&' is evaluated and
its return status is examined ta determine if tha test has succeeded\&.
Da \fIpattern\fP strang `\fB[]\fP\&' is guaranteed never ta match\&.
Da \fIlookahead\fP aint stripped from tha command line before tha next
pattern is examined\&.
.RS
.PP
Da argument startin wit \fB:\fP is used up in tha same manner as a argument to
\fB_alternative\fP\&.
.PP
A component is used as bigs up: \fIpattern\fP is tested to
see if tha component already exists on tha command line\&.  If
it do, any followin justifications is examined ta find suttin' to
complete\&.  If a cold-ass lil component is reached but no such pattern exists yet on the
command line, tha strang containin tha \fIaction\fP is used ta generate
matches ta bang at dat point\&.
.RE
.TP
\fB/\fP\fIpattern\fP\fB/+\fP [\fB%\fP\fIlookahead\fP\fB%\fP] [\fB\-\fP\fIguard\fP] [\fB:\fP\fItag\fP\fB:\fP\fIdescr\fP\fB:\fP\fIaction\fP]
This is similar ta `\fB/\fP\fIpattern\fP\fB/\fP \&.\&.\&.\&' but tha left part of the
command line strang (i\&.e\&. tha part already matched by previous patterns)
is also considered part of tha completion target\&.
.TP
\fB/\fP\fIpattern\fP\fB/\-\fP [\fB%\fP\fIlookahead\fP\fB%\fP] [\fB\-\fP\fIguard\fP] [\fB:\fP\fItag\fP\fB:\fP\fIdescr\fP\fB:\fP\fIaction\fP]
This is similar ta `\fB/\fP\fIpattern\fP\fB/\fP \&.\&.\&.\&' but tha \fIaction\fPz of the
current n' previously matched patterns is ignored even if the
followin `\fIpattern\fP\&' matches tha empty string\&.
.TP
\fB(\fP \fIspec\fP \fB)\fP
Parentheses may be used ta crews \fIspec\fPs; note each parenthesis
is a single argument ta \fB_regex_arguments\fP\&.
.TP
\fIspec\fP \fB#\fP
This allows any number of repetitionz of \fIspec\fP\&.
.TP
\fIspec\fP \fIspec\fP
Da two \fIspec\fPs is ta be matched one afta tha other as busted lyrics about
above\&.
.TP
\fIspec\fP \fB|\fP \fIspec\fP
Either of tha two \fIspec\fPs can be matched\&.
.PP
Da function \fB_regex_words\fP can be used as a helper function to
generate matches fo' a set of alternatizzle lyrics possibly with
their own arguments as a cold-ass lil command line argument\&.
.PP
Examples:
.PP
.RS
.nf
\fB_regex_arguments _tst /$\&'[^\e0]#\e0'/ \e 
/$\&'[^\e0]#\e0'/ :'compadd aaa'\fP
.fi
.RE
.PP
This generates a gangbangin' function \fB_tst\fP dat completes \fBaaa\fP as its only
argument\&.  Da \fItag\fP n' \fIdescription\fP fo' tha action have been
omitted fo' brevitizzle (this works but aint recommended up in aiiight use)\&.
Da first component matches tha command word, which be arbitrary; the
second matches  any argument\&.  As tha argument be also arbitrary, any
followin component would not depend on \fBaaa\fP bein present\&.
.PP
.RS
.nf
\fB_regex_arguments _tst /$\&'[^\e0]#\e0'/ \e 
/$\&'aaa\e0'/ :'compadd aaa'\fP
.fi
.RE
.PP
This be a mo' typical use; it is similar yo, but any followin patterns
would only match if \fBaaa\fP was present as tha straight-up original gangsta argument\&.
.PP
.RS
.nf
\fB_regex_arguments _tst /$\&'[^\e0]#\e0'/ \e( \e 
/$\&'aaa\e0'/ :'compadd aaa' \e 
/$\&'bbb\e0'/ :'compadd bbb' \e) \e#\fP
.fi
.RE
.PP
In dis example, a indefinite number of command arguments may be
completed\&.  Odd arguments is completed as \fBaaa\fP n' even arguments
as \fBbbb\fP\&.  Completion fails unless tha set of \fBaaa\fP n' \fBbbb\fP
arguments before tha current one is matched erectly\&.
.PP
.RS
.nf
\fB_regex_arguments _tst /$\&'[^\e0]#\e0'/ \e 
\e( /$\&'aaa\e0'/ :'compadd aaa' \e| \e 
/$\&'bbb\e0'/ :'compadd bbb' \e) \e#\fP
.fi
.RE
.PP
This is similar yo, but either \fBaaa\fP or \fBbbb\fP may be completed for
any argument\&.  In dis case \fB_regex_words\fP could be used ta generate
a suitable expression fo' tha arguments\&.
.PP
.RE
.TP
\fB_regex_words\fP \fItag\fP \fIdescription\fP \fIspec\fP \&.\&.\&.
This function can be used ta generate arguments fo' the
\fB_regex_arguments\fP command which may be banged at any point where
a set of rulez is expected\&.  Da \fItag\fP n' \fIdescription\fP give a
standard tag n' description pertainin ta tha current context\&.  Each
\fIspec\fP gotz nuff two or three arguments separated by a cold-ass lil colon: note
that there is no leadin colon up in dis case\&.
.RS
.PP
Each \fIspec\fP gives one of a set of lyrics dat may be completed at
this point, together wit arguments\&.  It be thus roughly equivalent to
the \fB_arguments\fP function when used up in aiiight (non\-regex) completion\&.
.PP
Da part of tha \fIspec\fP before tha straight-up original gangsta colon is tha word ta be
completed\&.  This may contain a \fB*\fP; tha entire word, before n' after
the \fB*\fP is completed yo, but only tha text before tha \fB*\fP is required
for tha context ta be matched, so dat further arguments may be
completed afta tha abbreviated form\&.
.PP
Da second part of \fIspec\fP be a thugged-out description fo' tha word being
completed\&.
.PP
Da optionizzle third part of tha \fIspec\fP raps bout how tha fuck lyrics following
the one bein completed is theyselves ta be completed\&.  It will be
evaluated up in order ta avoid problems wit quoting\&.  This means that
typically it gotz nuff a reference ta a array containin previously
generated regex arguments\&.
.PP
Da option \fB\-t\fP \fIterm\fP specifies a terminator fo' tha word
instead of tha usual space\&.  This is handled as a auto\-removable suffix
in tha manner of tha option \fB\-s\fP \fIsep\fP ta \fB_values\fP\&.
.PP
Da result of tha processin by \fB_regex_words\fP is placed up in tha array
\fBreply\fP, which should be made local ta tha callin function\&.
If tha set of lyrics n' arguments may be matched repeatedly, a \fB#\fP
should be appended ta tha generated array at dat point\&.
.PP
For example:
.PP
.RS
.nf
\fBlocal \-a reply
_regex_wordz mydb\-commandz \&'mydb commands' \e 
  \&'add:add a entry ta mydb:$mydb_add_cmds' \e 
  \&'show:show entries up in mydb'
_regex_arguments _mydb "$reply[@]"
_mydb "$@"\fP
.fi
.RE
.PP
This shows a cold-ass lil completion function fo' a cold-ass lil command \fBmydb\fP which takes
two command arguments, \fBadd\fP n' \fBshow\fP\&.  \fBshow\fP takes no arguments,
while tha arguments fo' \fBadd\fP have already been prepared up in an
array \fBmydb_add_cmds\fP, like possibly by a previous call to
\fB_regex_words\fP\&.
.RE
.TP
\fB_requested\fP [ \fB\-x\fP ] [ \fB\-12VJ\fP ] \fItag\fP [ \fIname\fP \fIdescr\fP [ \fIcommand\fP \fIargs\fP \&.\&.\&. ] ]
This function is called ta decizzle whether a tag already registered by a
call ta \fB_tags\fP (see below) has been axed by tha user n' hence
completion should be performed fo' it\&.  It returns status zero if the
tag be axed n' non\-zero otherwise\&.  Da function is typically used
as part of a loop over different tags as bigs up:
.RS
.PP
.RS
.nf
\fB_tags foo bar baz
while _tags; do
  if _axed foo; then
    \&.\&.\&. # big-ass up completion fo' foo
  fi
  \&.\&.\&. # test tha tags bar n' baz up in tha same way
  \&.\&.\&. # exit loop if matches was generated
done\fP
.fi
.RE
.PP
Note dat tha test fo' whether matches was generated aint performed
until tha end of tha \fB_tags\fP loop\&.  This is so dat tha user can set
the \fBtag\-order\fP steez ta specify a set of tags ta be completed at the
same time\&.
.PP
If \fIname\fP n' \fIdescr\fP is given, \fB_requested\fP calls the
\fB_description\fP function wit these arguments together wit tha options
passed ta \fB_requested\fP\&.
.PP
If \fIcommand\fP is given, tha \fB_all_labels\fP function is ghon be called
immediately wit tha same arguments\&.  In simple cases dis make it
possible ta big-ass up tha test fo' tha tag n' tha matchin up in one go\&.
For example:
.PP
.RS
.nf
\fBlocal expl ret=1
_tags foo bar baz
while _tags; do
  _axed foo expl \&'description' \e 
      compadd foobar foobaz && ret=0
  \&.\&.\&.
  (( ret )) || break
done\fP
.fi
.RE
.PP
If tha \fIcommand\fP aint \fBcompadd\fP, it must nevertheless be prepared
to handle tha same options\&.
.RE
.TP
\fB_retrieve_cache\fP \fIcache_identifier\fP
This function retrieves completion shiznit from tha file given by
\fIcache_identifier\fP, stored up in a gangbangin' finger-lickin' directory specified by the
\fBcache\-path\fP steez which defaults ta \fB~/\&.zcompcache\fP\&.  Da return status
is zero if retrieval was successful\&.  It will only attempt retrieval
if tha \fBuse\-cache\fP steez is set, so you can call dis function
without worryin bout whether tha user wanted ta use tha caching
layer\&.
.RS
.PP
See \fB_store_cache\fP below fo' mo' details\&.
.RE
.TP
\fB_sep_parts\fP
This function is passed alternatin arrays n' separators as arguments\&.
Da arrays specify completions fo' partz of strings ta be separated by the
separators\&.  Da arrays may be tha namez of array parametas or
a quoted list of lyrics up in parentheses\&.  For example, wit tha array
`\fBhosts=(ftp news)\fP\&' tha call `\fB_sep_parts '(foo bar)' @ hosts\fP' will
complete tha strang  `\fBf\fP\&' ta `\fBfoo\fP' n' tha strang `\fBb@n\fP' to
`\fBbar@news\fP\&'\&.
.RS
.PP
This function accepts tha \fBcompadd\fP options `\fB\-V\fP\&', `\fB\-J\fP',
`\fB\-1\fP\&', `\fB\-2\fP', `\fB\-n\fP', `\fB\-X\fP', `\fB\-M\fP', `\fB\-P\fP', `\fB\-S\fP',
`\fB\-r\fP\&', `\fB\-R\fP', n' `\fB\-q\fP' n' passes dem on ta tha \fBcompadd\fP
builtin used ta add tha matches\&.
.RE
.TP
\fB_sequence\fP [ \fB\-s\fP \fIsep\fP ] [ \fB\-n\fP \fImax\fP ] [ \fB\-d\fP ] \fIfunction\fP [ \fB\-\fP ] \&.\&.\&.
This function be a wrapper ta other functions fo' completin shit up in a
separated list\&. Da same function is used ta complete each item up in the
list\&. Da separator is specified wit tha \fB\-s\fP option\&. If \fB\-s\fP is
omitted it will use `\fB,\fP\&'\&. Duplicate joints is not matched unless
\fB\-d\fP is specified\&. If there be a gangbangin' fixed or maximum number of shit in
the list, dis can be specified wit tha \fB\-n\fP option\&.
.RS
.PP
Common \fBcompadd\fP options is passed on ta tha function\&. Well shiiiit, it is possible
to use \fBcompadd\fP directly wit \fB_sequence\fP, though \fB_values\fP may
be mo' appropriate up in dis thang\&.
.RE
.TP
\fB_setup\fP \fItag\fP [ \fIgroup\fP ]
This function sets up tha special
parametas used by tha completion system appropriately fo' tha \fItag\fP
given as tha straight-up original gangsta argument\&.  It uses tha stylez \fBlist\-colors\fP,
\fBlist\-packed\fP, \fBlist\-rows\-first\fP, \fBlast\-prompt\fP, \fBaccept\-exact\fP,
\fBmenu\fP n' \fBforce\-list\fP\&.
.RS
.PP
Da optionizzle \fIgroup\fP supplies tha name of tha crew up in which the
matches is ghon be placed\&.  If it aint given, tha \fItag\fP is used as
the crew name\&.
.PP
This function is called automatically from \fB_description\fP
and hence aint normally called explicitly\&.
.RE
.TP
\fB_store_cache\fP \fIcache_identifier\fP \fIparams\fP \&.\&.\&.
This function, together wit \fB_retrieve_cache\fP and
\fB_cache_invalid\fP, implements a cold-ass lil cachin layer which can be used
in any completion function\&.  Data obtained by
costly operations is stored up in parameters;
this function then dumps tha jointz of dem parametas ta a gangbangin' file\&.  The
data can then be retrieved quickly from dat file via \fB_retrieve_cache\fP,
even up in different instancez of tha shell\&.
.RS
.PP
Da \fIcache_identifier\fP specifies tha file which tha data should be
dumped to\&.  Da file is stored up in a gangbangin' finger-lickin' directory specified by the
\fBcache\-path\fP steez which defaults ta \fB~/\&.zcompcache\fP\&.  Da remaining
\fIparams\fP arguments is tha parametas ta dump ta tha file\&.
.PP
Da return status is zero if storage was successful\&.  Da function will
only attempt storage if tha \fBuse\-cache\fP steez is set, so you can
call dis function without worryin bout whether tha user wanted to
use tha cachin layer\&.
.PP
Da completion function may avoid callin \fB_retrieve_cache\fP when it
already has tha completion data available as parameters\&. 
But fuck dat shiznit yo, tha word on tha street is dat up in dat case it should
call \fB_cache_invalid\fP ta check whether tha data up in tha parametas and
in tha cache is still valid\&.
.PP
See tha _perl_modulez completion function fo' a simple example of
the usage of tha cachin layer\&.
.RE
.TP
\fB_tags\fP [ [ \fB\-C\fP \fIname\fP ] \fItags\fP \&.\&.\&. ]
If called wit arguments, these is taken ta be tha namez of tags
valid fo' completions up in tha current context\&.  These tags is stored
internally n' sorted by rockin tha \fBtag\-order\fP style\&.
.RS
.PP
Next, \fB_tags\fP is called repeatedly without arguments from tha same
completion function\&.  This successively selects tha first, second,
etc\&. set of tags axed by tha user\&.  Da return status is zero if at
least one of tha tags be axed n' non\-zero otherwise\&.  To test if a
particular tag is ta be tried, tha \fB_requested\fP function should be
called (see above)\&.
.PP
If `\fB\-C\fP \fIname\fP\&' is given, \fIname\fP is temporarily stored up in the
argument field (the fifth) of tha context up in tha \fBcurcontext\fP parameter
durin tha call ta \fB_tags\fP; tha field is restored on exit\&.  This
allows \fB_tags\fP ta bust a mo' 
specific context without havin ta chizzle n' reset the
\fBcurcontext\fP parameta (which has tha same ol' dirty effect)\&.
.RE
.TP
\fB_values\fP [ \fB\-O\fP \fIname\fP ] [ \fB\-s\fP \fIsep\fP ] [ \fB\-S\fP \fIsep\fP ] [ \fB\-wC\fP ] \fIdesc\fP \fIspec\fP \&.\&.\&.
This is used ta complete arbitrary keywordz (values) n' they arguments,
or listz of such combinations\&.
.RS
.PP
If tha straight-up original gangsta argument is tha option `\fB\-O\fP \fIname\fP\&', it is ghon be used
in tha same way as by tha \fB_arguments\fP function\&.  In other lyrics, the
elementz of tha \fIname\fP array is ghon be passed ta \fBcompadd\fP
when executin a action\&.
.PP
If tha straight-up original gangsta argument (or tha straight-up original gangsta argument afta `\fB\-O\fP \fIname\fP\&')
is `\fB\-s\fP\&', tha next argument is used as tha characta dat separates
multiple joints\&.  This characta be automatically added afta each value
in a auto\-removable fashizzle (see below); all joints completed by
`\fB_values \-s\fP\&' step tha fuck up in tha same word on tha command line, unlike
completion rockin \fB_arguments\fP\&.  If dis option aint present, only a
single value is ghon be completed per word\&.
.PP
Normally, \fB_values\fP will only use tha current word ta determine
which joints is already present on tha command line n' hence is not
to be completed again\&.  If tha \fB\-w\fP option is given, other arguments
are examined as well\&.
.PP
Da first non\-option argument is used as a strang ta print as a
description before listin tha joints\&.
.PP
All other arguments describe tha possible joints n' their
arguments up in tha same format used fo' tha description of options by
the \fB_arguments\fP function (see above)\&.  Da only differences is that
no minus or plus sign is required all up in tha beginning,
values can have only one argument, n' tha formz of action
beginnin wit a equal sign is not supported\&.
.PP
Da characta separatin a value from its argument can be set rockin the
option \fB\-S\fP (like \fB\-s\fP, followed by tha characta ta use as the
separator up in tha next argument)\&.  By default tha equals
sign is ghon be used as tha separator between joints n' arguments\&.
.PP
Example:
.PP
.RS
.nf
\fB_values \-s , \&'description' \e 
        \&'*foo[bar]' \e 
        \&'(two)*one[number]:first count:' \e 
        \&'two[another number]::second count:(1 2 3)'\fP
.fi
.RE
.PP
This raps bout three possible joints: `\fBfoo\fP\&', `\fBone\fP', and
`\fBtwo\fP\&'\&.  Da first is busted lyrics bout as `\fBbar\fP', takes no argument 
and may step tha fuck up mo' than once\&.  Da second is busted lyrics bout as
`\fBnumber\fP\&', may step tha fuck up mo' than once, n' takes one mandatory
argument busted lyrics bout as `\fBfirst count\fP\&'; no action is
specified, so it aint gonna be completed\&.  The
`\fB(two)\fP\&' all up in tha beginnin say dat if tha value `\fBone\fP' is on
the line, tha value `\fBtwo\fP\&' will no longer be considered a possible
completion\&.  Finally, tha last value (`\fBtwo\fP\&') is busted lyrics about
as `\fBanother number\fP\&' n' takes a optionizzle argument busted lyrics bout as
`\fBsecond count\fP\&' fo' which tha completions (to step tha fuck up afta an
`\fB=\fP\&') is `\fB1\fP', `\fB2\fP', n' `\fB3\fP'\&.  Da \fB_values\fP function
will complete listz of these joints separated by commas\&.
.PP
Like \fB_arguments\fP, dis function temporarily addz another context name
component ta tha arguments element (the fifth) of tha current context
while executin tha \fIaction\fP\&.  Here dis name is just tha name of the
value fo' which tha argument is completed\&.
.PP
Da steez \fBverbose\fP is used ta decizzle if tha descriptions fo' the
values (but not dem fo' tha arguments) should be printed\&.
.PP
Da associatizzle array \fBval_args\fP is used ta report joints n' their
arguments; dis works similarly ta tha \fBopt_args\fP associatizzle array
used by \fB_arguments\fP\&.  Hence tha function callin \fB_values\fP should
declare tha local parametas \fBstate\fP, \fBstate_descr\fP, \fBline\fP,
\fBcontext\fP n' \fBval_args\fP:
.PP
.RS
.nf
\fBlocal context state state_descr line
typeset \-A val_args\fP
.fi
.RE
.PP
when rockin a action of tha form `\fB\->\fP\fIstring\fP\&'\&.  With this
function tha \fBcontext\fP parameta is ghon be set ta tha name of the
value whose argument is ta be completed\&.  Note dat fo' \fB_values\fP,
the \fBstate\fP n' \fBstate_descr\fP is scalars rather than arrays\&.
Only a single matchin state is returned\&.
.PP
Note also dat \fB_values\fP normally addz tha characta used as the
separator between joints as a auto\-removable suffix (similar ta a
`\fB/\fP\&' afta a gangbangin' finger-lickin' directory)\&.  But fuck dat shiznit yo, tha word on tha street is dat dis aint possible fo' a
`\fB\->\fP\fIstring\fP\&' action as tha matches fo' tha argument are
generated by tha callin function\&.  To git tha usual behaviour,
the callin function can add tha separator \fIx\fP as a suffix by
passin tha options `\fB\-qS\fP \fIx\fP\&' either directly or indirectly to
\fBcompadd\fP\&.
.PP
Da option \fB\-C\fP is treated up in tha same way as it is by \fB_arguments\fP\&.
In dat case tha parameta \fBcurcontext\fP should be made local instead 
of \fBcontext\fP (as busted lyrics bout above)\&.
.RE
.TP
\fB_wanted\fP [ \fB\-x\fP ] [ \fB\-C\fP \fIname\fP ]  [ \fB\-12VJ\fP ] \fItag\fP \fIname\fP \fIdescr\fP \fIcommand\fP \fIargs\fP \&.\&.\&.
In nuff contexts, completion can only generate one particular set of
matches, probably correspondin ta a single tag\&.  But fuck dat shiznit yo, tha word on tha street is dat it is
still necessary ta decizzle whether tha user requires matchez of dis type\&.
This function is useful up in such a cold-ass lil case\&.
.RS
.PP
Da arguments ta \fB_wanted\fP is tha same as dem ta \fB_requested\fP,
i\&.e\&. arguments ta be passed ta \fB_description\fP\&.  But fuck dat shiznit yo, tha word on tha street is dat up in dis case
the \fIcommand\fP aint optional;  all tha processin of tags, including
the loop over both tags n' tag labels n' tha generation of matches,
is carried up automatically by \fB_wanted\fP\&.
.PP
Hence ta offer only one tag n' immediately add tha corresponding
matches wit tha given description:
.PP
.RS
.nf
\fBlocal expl
_wanted tag expl \&'description' \e 
    compadd matches\&.\&.\&.\fP
.fi
.RE
.PP
Note that, as fo' \fB_requested\fP, tha \fIcommand\fP must be able to
accept options ta be passed down ta \fBcompadd\fP\&.
.PP
Like \fB_tags\fP dis function supports tha \fB\-C\fP option ta give a
different name fo' tha argument context field\&.  Da \fB\-x\fP option has
the same meanin as fo' \fB_description\fP\&.
.RE
.PP
.SH "COMPLETION DIRECTORIES"
.PP
In tha source distribution, tha filez is contained up in various
subdirectoriez of tha \fBCompletion\fP directory\&.  They may have been
installed up in tha same structure, or tha fuck into one single function directory\&.
Da followin be a thugged-out description of tha filez found up in tha original gangsta directory
structure\&.  If you wish ta alta a installed file, yo big-ass booty is ghon need ta copy
it ta some directory which appears earlier up in yo' \fBfpath\fP than the
standard directory where it appears\&.
.PP
.PD 0
.TP
.PD
\fBBase\fP
Da core functions n' special completion widgets automatically bound
to keys\&.  Yo ass will certainly need most of these, though will
probably not need ta alta them\&.  Many of these is documented above\&.
.TP
\fBZsh\fP
Functions fo' completin argumentz of shell builtin commandz and
utilitizzle functions fo' this\&.  Some of these is also used by functions from
the \fBUnix\fP directory\&.
.TP
\fBUnix\fP
Functions fo' completin argumentz of external commandz n' suites of
commands\&.  They may need modifyin fo' yo' system, although up in nuff cases
some attempt is made ta decizzle which version of a cold-ass lil command is present\&.  For
example, completion fo' tha \fBmount\fP command tries ta determine tha system
it is hustlin on, while completion fo' nuff other utilitizzles try ta decide
whether tha GNU version of tha command is up in use, n' hence whether the
\fB\-\fP\fB\-help\fP option is supported\&.
.TP
\fBX\fP, \fBAIX\fP, \fBBSD\fP, \&.\&.\&.
Completion n' utilitizzle function fo' commandz available only on some systems\&.
These is not arranged hierarchically, so, fo' example, both the
\fBLinux\fP n' \fBDebian\fP directories, as well as tha \fBX\fP directory,
may be useful on yo' system\&.
