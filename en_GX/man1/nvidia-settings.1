.\" Copyright (C) 2010 NVIDIA Corporation.
.\" WARNING: THIS FILE IS AUTO-GENERATED!  Edit nvidia-settings.1.m4 instead.
.\" Define tha .URL macro n' then override it wit tha www.tmac package if it
.\" exists.
.de URL
\\$2 \(la \\$1 \(ra\\$3
..
.if \n[.g] .mso www.tmac
.TH nvidia\-settings 1 "2014-12-01" "nvidia\-settings 331.113"
.SH NAME
nvidia\-settings \- configure tha NVIDIA graphics driver
.SH SYNOPSIS
.BI "nvidia\-settings [" "options" "]"
.br
.BI "nvidia\-settings [" "options" "] \-\-no\-config"
.br
.BI "nvidia\-settings [" "options" "] \-\-load\-config\-only"
.br
.BI "nvidia\-settings [" "options" "] {\-\-query=" attr " | \-\-assign=" attr = value "} ..."
.br
.BI "nvidia\-settings [" "options" "] \-\-glxinfo"
.PP
Options:
.BI "[\-vh] [\-\-config=" configfile "] [\-c " ctrl-display "]"
.br
.I "         \fB[\-\-verbose=\fP{\fInone \fP|\fI errors \fP|\fI deprecations \fP|\fI warnings \fP|\fI all\fP}\fB]"
.br
.I "         \fB[\-\-describe=\fP{\fIall \fP|\fI list \fP|\fI attribute_name\fP}\fB]"
.PP
.I attr
has tha form:
.ti +5
.IB DISPLAY / attribute_name [ display_devices ]
.SH DESCRIPTION
The
.B nvidia\-settings
utilitizzle be a tool fo' configurin tha NVIDIA graphics driver.
It operates by communicatin wit tha NVIDIA X driver, queryin n' uppimpin state as appropriate.
This communication is done via tha NV-CONTROL, GLX, XVideo, n' RandR X extensions.
.PP
Values like fuckin brightnizz n' gamma, XVideo attributes, temperature, n' OpenGL settings can be queried n' configured via
.B nvidia\-settings.
.PP
When
.B nvidia\-settings
starts, it readz tha current settings from its configuration file n' sendz dem settings ta tha X server.
Then, it displays a graphical user intercourse (GUI) fo' configurin tha current settings.
When
.B nvidia\-settings
exits, it queries tha current settings from tha X server n' saves dem ta tha configuration file.
.SH OPTIONS
.TP
.BI "\-v, \-\-version"
Print tha 
.B nvidia\-settings
version n' exit.
.TP
.BI "\-h, \-\-help"
Print usage shiznit n' exit.
.TP
.BI "\-\-config=" "CONFIG"
Use tha configuration file 
.I CONFIG
rather than tha default 
.I ~/.nvidia\-settings\-rc

.TP
.BI "\-c " "CTRL-DISPLAY" ", \-\-ctrl-display=" "CTRL-DISPLAY"
Control tha specified X display.  If dis option aint given, then 
.B nvidia\-settings
will control tha display specified by 
.B '\-\-display'
; if dat aint given, then tha 
.I $DISPLAY
environment variable is used.
.TP
.BI "\-l, \-\-load-config-only"
Load tha configuration file, bust tha joints specified therein ta tha X server, n' exit.  This mode of operation is useful ta place up in yo' xinitrc file, fo' example.
.TP
.BI "\-n, \-\-no-config"
Do not load tha configuration file.  This mode of operation is useful if 
.B nvidia\-settings
has bullshit startin cuz of problems wit applyin settings up in tha configuration file.
.TP
.BI "\-r, \-\-rewrite-config-file"
Write tha X server configuration ta tha configuration file, n' exit, without startin tha graphical user intercourse.  See EXAMPLES section.
.TP
.BI "\-V " "VERBOSE" ", \-\-verbose=" "VERBOSE"
Controls how tha fuck much shiznit is printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Valid joints is 
.B 'none'
(do not print status lyrics), 
.B 'errors'
(print error lyrics), 
.B 'deprecations'
(print error n' deprecation lyrics), 
.B 'warnings'
(print error, deprecation, n' warnin lyrics), n' 
.B 'all'
(print error, deprecation, warnin n' other shiznital lyrics).  By default, 
.B 'deprecations'
is set.
.TP
.BI "\-a " "ASSIGN" ", \-\-assign=" "ASSIGN"
Da 
.I ASSIGN
argument ta tha 
.B '\-\-assign'
command line option iz of tha form:

  {DISPLAY}/{attribute name}[{display devices}]={value}

This assigns tha attribute {attribute name} ta tha value {value} on tha X Display {DISPLAY}.  {DISPLAY} bigs up tha usual {host}:{display}.{screen} syntax of tha DISPLAY environment variable n' is optional; when it aint specified, then it is implied followin tha same rule as tha 
.B \-\-ctrl\-display
option. I aint talkin' bout chicken n' gravy biatch.  If tha X screen aint specified, then tha assignment is made ta all X screens.  Note dat tha '/' is only required when {DISPLAY} is present.

{DISPLAY} can additionally include a target justification ta direct a assignment ta suttin' other than a X screen. I aint talkin' bout chicken n' gravy biatch.  A target justification is contained within brackets n' consistz of a target type name, a cold-ass lil colon, n' tha target id. Y'all KNOW dat shit, muthafucka!  Da target type name can be one of 
.B "screen", "gpu", "framelock", "vcs", "gvi", "fan", "thermalsensor", "svp",
or 
.B "dpy";
the target id is tha index tha fuck into tha list of targets (for dat target type).  Da target justification can be used up in {DISPLAY} wherever a X screen can be used, followin tha syntax {host}:{display}[{target_type}:{target_id}].  See tha output of

  nvidia\-settings \-q all 

for shiznit on which target types can be used wit which attributes.  See tha output of

   nvidia\-settings \-q screens \-q gpus \-q framelocks \-q vcs \-q gvis \-q hustlas \-q thermalsensors \-q svps \-q dpys 

for listz of targets fo' each target type.

Da [{display devices}] portion be also optional; if it aint specified, then tha attribute be assigned ta all display devices.

Some examples:

  \-a FSAA=5
  \-a localhost:0.0/DigitalVibrance[CRT\-0]=0
  \-\-assign="SyncToVBlank=1"
  \-a [gpu:0]/DigitalVibrance[DFP\-1]=63

.TP
.BI "\-q " "QUERY" ", \-\-query=" "QUERY"
Da 
.I QUERY
argument ta tha 
.B '\-\-query'
command line option iz of tha form:

  {DISPLAY}/{attribute name}[{display devices}]

This queries tha current value of tha attribute {attribute name} on tha X Display {DISPLAY}.  Da syntax is tha same ol' dirty as dat fo' tha 
.B '\-\-assign'
option, without '=
.B {value}'
; specify 
.B '\-q screens', '\-q gpus', '\-q framelocks', '\-q vcs', '\-q gvis', '\-q fans'
, '\-q thermalsensors', '\-q svps', or '\-q dpys' ta query a list of X screens, GPUs, Frame Lock devices, Visual Computin Systems, SDI Input Devices, Fans, Thermal Sensors, 3D Vision Pro Transceivers, or Display Devices, respectively, dat is present on tha X Display {DISPLAY}.  Specify 
.B '\-q all'
to query all attributes.
.TP
.BI "\-t, \-\-terse"
When queryin attribute joints wit tha '\-\-query' command line option, only print tha current value, rather than tha mo' verbose description of tha attribute, its valid joints, n' its current value.
.TP
.BI "\-d, \-\-display-device-string"
When printin attribute joints up in response ta tha '\-\-query' option, if tha attribute value be a gangbangin' finger-lickin' display thang mask, print tha value as a list of display devices (e.g., "CRT\-0, DFP\-0"), rather than a hexadecimal bit mask (e.g., 0x00010001).
.TP
.BI "\-g, \-\-glxinfo"
Print GLX Hype fo' tha X display n' exit.
.TP
.BI "\-e " "DESCRIBE" ", \-\-describe=" "DESCRIBE"
Prints shiznit on some particular attribute.  Specify 'all' ta list tha descriptionz of all attributes.  Specify 'list' ta list tha attribute names without a thugged-out descriptions.
.TP
.BI "\-p " "PAGE" ", \-\-page=" "PAGE"
Da 
.I PAGE
argument ta tha 
.B '\-\-page'
commandline option selects a particular page up in tha nvidia\-settings user intercourse ta display upon startin nvidia\-settings.  Valid joints is tha page names up in tha tree view on tha left side of tha nvidia\-settings user intercourse; e.g.,

  \-\-page="X Screen 0"

Because some page names is not unique (e.g., a "PowerMizer" page is present under each GPU), tha page name can optionally be prepended wit tha name of tha parent X Screen or GPU page, followed by a cold-ass lil comma.  E.g.,

  \-\-page="GPU 0 \- (Quadro 6000), PowerMizer"

Da first page wit a name matchin tha 
.I PAGE
argument is ghon be used. Y'all KNOW dat shit, muthafucka!  By default, tha "X Server Information" page is displayed.
.TP
.BI "\-L, \-\-list-targets-only"
When struttin a attribute query (from tha '\-\-query' command line option) or a attribute assignment (from tha '\-\-assign' command line option or when loadin a ~/.nvidia\-settings\-rc file), nvidia\-settings identifies one or mo' targets on which ta query/assign tha attribute.

Da '\-\-list\-targets\-only' option will cause nvidia\-settings ta list tha targets on which tha query/assign operation would done been performed, without straight-up struttin tha operation(s), n' exit.
.SH "USER GUIDE"
.SS Contents
1.	Layout of tha nvidia\-settings GUI
.br
2.	How tha fuck OpenGL Interacts wit nvidia\-settings
.br
3.	Loadin Settings Automatically
.br
4.	Command Line Interface
.br
5.	X Display Names up in tha Config File
.br
6.	Connectin ta Remote X Servers
.br
7.	Licensing
.br
8.	TODO
.br
.SS 1. Layout of tha nvidia\-settings GUI
The
.B nvidia\-settings
GUI is organized wit a list of different categories on tha left side.
Only one entry up in tha list can be selected at once, n' tha selected category controls which "page" is displayed on tha right side of the
.B nvidia\-settings
GUI.
.PP
Da category list is organized up in a tree: each X screen gotz nuff tha relevant subcategories beneath dat shit.
Similarly, tha Display Devices category fo' a screen gotz nuff all tha enabled display devices beneath dat shit.
Besides each X screen, tha other top level category is "nvidia\-settings Configuration", which configures behavior of the
.B nvidia\-settings
application itself.
.PP
Along tha bottom of the
.B nvidia\-settings
GUI, from left ta right, is:
.TP
1)
a status bar which indicates da most thugged-out recently altered option;
.TP
2)
a Help button dat togglez tha display of a help window which serves up a thugged-out detailed explanation of tha available options up in tha current page; and
.TP
3)
a Quit button ta exit
.B nvidia\-settings.
.PP
Most options throughout
.B nvidia\-settings
are applied immediately.
Notable exceptions is OpenGL options which is only read by OpenGL when a OpenGL application starts.
.PP
Details bout tha options on each page of
.B nvidia\-settings
are available up in tha help window.
.SS 2 yo. How tha fuck OpenGL Interacts wit nvidia\-settings
.PP
When a OpenGL application starts, it downloadz tha current joints from tha X driver, n' then readz tha environment (see
.I APPENDIX E: OPENGL ENVIRONMENT VARIABLE SETTINGS
in tha README).
Settings from tha X server override OpenGLz default joints, n' settings from tha environment override joints from tha X server.
.PP
For example, by default OpenGL uses tha FSAA settin axed by tha application (normally, applications do not request any FSAA).
An FSAA settin specified in
.B nvidia\-settings
would override tha OpenGL applicationz request.
Similarly, the
.B __GL_FSAA_MODE
environment variable will override tha applicationz FSAA setting, as well as any FSAA settin specified in
.B nvidia\-settings.
.PP
Note dat a OpenGL application only retrieves settings from tha X server when
it starts, so if you cook up a cold-ass lil chizzle ta a OpenGL value in
.B nvidia\-settings,
it will only apply ta OpenGL applications which is started afta dat point up in time.
.SS 3. Loadin Settings Automatically
Da NVIDIA X driver do not preserve joints set with
.B nvidia\-settings
between runz of tha X server (or even between loggin up in n' loggin outta X, with
.BR xdm (1),
.B gdm,
or
.B kdm
).
This is intentional, cuz different playas may have different preferences, thus these settings is stored on a per-user basis up in a cold-ass lil configuration file stored up in tha userz home directory.
.PP
Da configuration file is named
.IR ~/.nvidia\-settings\-rc .
Yo ass can specify a gangbangin' finger-lickin' different configuration file name wit the
.B \-\-config
command line option.
.PP
Afta you have run
.B nvidia\-settings
once n' have generated a cold-ass lil configuration file, you can then run:
.sp
.ti +5
nvidia\-settings \-\-load\-config\-only
.sp
at any time up in tha future ta upload these settings ta tha X server again.
For example, you might place tha above command up in your
.I ~/.xinitrc
file so dat yo' settings is applied automatically when you log up in ta X.
.PP
Your
.I .xinitrc
file, which controls what tha fuck X applications should be started when you log tha fuck into X (or startx), might look suttin' like this:
.nf

     nvidia\-settings \-\-load\-config\-only &
     xterm &
     evilwm

.fi
or:
.nf

     nvidia\-settings \-\-load\-config\-only &
     gnome\-session

.fi
If you do not already have an
.I ~/.xinitrc
file, then chances is that
.BR xinit (1)
is rockin a system-wide xinitrc file.
This system wide file is typically here:
.nf

     /etc/X11/xinit/xinitrc

.fi
To use it yo, but also have
.B nvidia\-settings
upload yo' settings, you could create an
.I ~/.xinitrc
with tha contents:
.nf

     nvidia\-settings \-\-load\-config\-only &
     . /etc/X11/xinit/xinitrc

.fi
System administrators may chizzle ta place the
.B nvidia\-settings
load command directly up in tha system xinitrc script.
.PP
Please peep the
.BR xinit (1)
man page fo' further detailz of configurin your
.I ~/.xinitrc
file.
.SS 4. Command Line Interface
.B nvidia\-settings
has a rich command line intercourse: all attributes dat can be manipulated wit tha GUI can also be queried n' set from tha command line.
Da command line syntax fo' queryin n' assignin attributes matches dat of the
.I .nvidia\-settings\-rc
configuration file.
.PP
The
.B \-\-query
option can be used ta query tha current value of attributes.
This will also report tha valid joints fo' tha attribute.
Yo ass can run
.B nvidia\-settings \-\-query all
for a cold-ass lil complete list of available attributes, what tha fuck tha current value is, what tha fuck joints is valid fo' tha attribute, n' all up in which target types (e.g., X screens, GPUs) tha attributes can be addressed.
Additionally, individual attributes may be specified like this:
.nf

        nvidia\-settings \-\-query Overlay

.fi
An attribute name may be prepended wit a X Display name n' a gangbangin' forward slash ta indicate a gangbangin' finger-lickin' different X Display; e.g.:
.nf

        nvidia\-settings \-\-query localhost:0.0/Overlay

.fi
An attribute name may also just be prepended wit tha screen number n' a gangbangin' forward slash:
.nf

        nvidia\-settings \-\-query 0/Overlay

.fi
in which case tha default X Display is ghon be used yo, but you can indicate ta which X screen ta direct tha query (if yo' X server has multiple X screens).
If no X screen is specified, then tha attribute value is ghon be queried fo' all valid targetz of tha attribute (eg GPUs, Displays X screens, etc).
.PP
Attributes can be addressed all up in "target types".
A target type indicates tha object dat is queried when you query a attribute.
Da default target type be a X screen yo, but other possible target types is GPUs, Frame Lock devices, Visual Computin Systems, SDI Input Devices, fans, thermal sensors, 3D Vision Pro Transceivers n' display devices.
.PP
Target types hit you wit different granularitizzles wit which ta big-ass up queries n' assignments.
Since X screens can span multiple GPUs (in tha case of Xinerama, or SLI), n' multiple X screens can exist on tha same GPU, it is sometimes useful ta address attributes by GPU rather than X screen.
.PP
A target justification is contained within brackets n' may consist of a target type name, a cold-ass lil colon, n' tha target id.
Da target type name can be one of
.B screen,
.B gpu,
.B framelock,
.B vcs,
.B gvi,
.B fan,
.B thermalsensor,
.B svp,
or
.B dpy;
the target id is tha index tha fuck into tha list of targets (for dat target type).
Target justifications can be used wherever a X screen is used up in query n' assignment commands; tha target justification can be used either by itself on tha left side of tha forward slash, or as part of a X Display name.
.PP
For example, tha followin queries address X screen 0 on tha localhost:
.nf

        nvidia\-settings \-\-query 0/VideoRam
        nvidia\-settings \-\-query localhost:0.0/VideoRam
        nvidia\-settings \-\-query [screen:0]/VideoRam
        nvidia\-settings \-\-query localhost:0[screen:0]/VideoRam

.fi
To address GPU 0 instead, you can use either of:
.nf

        nvidia\-settings \-\-query [gpu:0]/VideoRam
        nvidia\-settings \-\-query localhost:0[gpu:0]/VideoRam

.fi
Note dat if a target justification is present, it will override any X screen specified up in tha display name as tha target ta process.
For example, tha followin query would address GPU 0, n' not X screen 1:
.nf

	nvidia\-settings \-\-query localhost:0.1[gpu:0]/VideoRam

.fi
.PP
A target name may be used instead of a target id, up in which case all targets wit matchin names is processed.
.PP
For example, queryin tha DigitalVibrizzle of display thang DVI-I-1 may be done like so:
.nf

	nvidia\-settings \-\-query [dpy:DVI\-I\-1]/DigitalVibrance

.fi
When a target name is specified, tha target type name may be omitted, though dis should be used wit caution since tha name is ghon be matched across all target types.
Da above example could be freestyled as:
.nf

	nvidia\-settings \-\-query [DVI\-I\-1]/DigitalVibrance

.fi
Da target name may also simply be a target type name, up in which case all targetz of dat type is ghon be queried.
.PP
For exmple, queryin tha BusRate of all GPUs may be done like so:
.nf

	nvidia\-settings \-\-query [gpu]/BusRate

.fi
.PP
Da target justification may also include a target qualifier.
This is useful ta limit processin ta a subset of targets, based on a existin relationshizzle(s) ta other targets.
Da target qualifier is specified by prependin a target type name, a cold-ass lil colon, tha target id, n' a period ta tha existin justification.
Only one qualitfer may be specified.
.PP
For example, queryin tha RefreshRate of all DFP devices on GPU 1 may be done like so:
.nf

	nvidia\-settings \-\-query [GPU:1.DPY:DFP]/RefreshRate

.fi
Likewise, a simple target name (or target type name) may be used as tha qualifier.
For example, ta query tha BusType of all GPUs dat have DFPs can be done like so:
.nf

	nvidia\-settings \-\-query [DFP.GPU]/BusType

.fi
.PP
See tha output of
.nf

        nvidia\-settings \-\-query all

.fi
for what tha fuck targets types can be used wit each attribute.
See tha output of
.nf

        nvidia\-settings \-\-query screens \-\-query gpus \-\-query framelocks \-\-query vcs \-\-query gvis \-\-query hustlas \-\-query thermalsensors \-\-query svps \-\-query dpys

.fi
for listz of targets fo' each target type.
.PP
The
.B \-\-assign
option can be used ta assign a freshly smoked up value ta a attribute.
Da valid joints fo' a attribute is reported when tha attribute is queried.
Da syntax for
.B \-\-assign
is tha same ol' dirty as
.B \-\-query,
with tha additionizzle requirement dat assignments also have a equal sign n' tha freshly smoked up value.
For example:
.nf

        nvidia\-settings \-\-assign FSAA=2
        nvidia\-settings \-\-assign [CRT\-1]/DigitalVibrance=9
        nvidia\-settings \-\-assign [gpu:0]/DigitalVibrance=0
.fi
.PP
Multiple queries n' assignments may be specified on tha command line fo' a single invocation of
.B nvidia\-settings.
Assignments is processed up in tha order they is entered on tha command line.
If multiple assignments is made ta tha same attribute or ta multiple attributes wit dependencies, then tha lata assignments gonna git priority.
.PP
If either the
.B \-\-query
or
.B \-\-assign
options is passed to
.B nvidia\-settings,
the GUI'ma not be presented, and
.B nvidia\-settings
will exit afta processin tha assignments and/or queries.
In dis case, settings contained within the
.I ~/.nvidia\-settings\-rc
configuration file aint gonna be automatically uploaded ta tha X server, nor will the
.I ~/.nvidia\-settings\-rc
configuration file be automatically updated ta reflect attribute assignments made via the
.B \-\-assign
option.
.SS 5. X Display Names up in tha Config File
In tha Command Line Interface section above, dat shiznit was noted dat you can
specify a attribute without any X Display qualifiers, wit only a X
screen qualifier, or wit a gangbangin' full X Display name.
For example:
.nf

        nvidia\-settings \-\-query FSAA
        nvidia\-settings \-\-query 0/FSAA
        nvidia\-settings \-\-query stravinsky.nvidia.com:0/FSAA

.fi
In tha straight-up original gangsta two cases, tha default X Display is ghon be used, up in tha second case, tha screen from tha default X Display can be overridden, n' up in tha third case, tha entire default X Display can be overridden.
.PP
Da same possibilitizzles is available up in the
.I ~/.nvidia\-settings\-rc
configuration file.
.PP
For example, up in a cold-ass lil computa lab environment, you might log tha fuck into any of multiple
workstations, n' yo' home directory is NFS mounted ta each workstation.
In such a thang, you might want your
.I ~/.nvidia\-settings\-rc
file ta be applicable ta all tha workstations.
Therefore, you would not want yo' config file ta qualify each attribute wit a X Display Name.
Leave tha "Include X Display Names up in tha Config File" option unchecked on the
.B nvidia\-settings
Configuration page (this is tha default).
.PP
There may be cases when you do want attributes up in tha config file ta be qualified wit tha X Display name.
If you know what tha fuck yo ass is bustin n' want config file attributes ta be qualified wit a X Display, check tha "Include X Display Names up in tha Config File" option on the
.B nvidia\-settings
Configuration page.
.PP
In tha typical home user environment where yo' home directory is local ta one computa n' yo ass is only configurin one X Display, then it do not matta whether each attribute settin is qualified wit a X Display Name.
.SS 6. Connectin ta Remote X Servers
.B nvidia\-settings
is a X client yo, but uses two separate X connections: one ta display tha GUI, n' another ta rap tha NV-CONTROL requests.
These two X connections do not need ta be ta tha same X server.
For example, you might run
.B nvidia\-settings
on tha computa stravinsky.nvidia.com, export tha display ta tha computa bartok.nvidia.com yo, but be configurin tha X server on tha computa schoenberg.nvidia.com:
.nf

        nvidia\-settings \-\-display=bartok.nvidia.com:0 \\
            \-\-ctrl\-display=schoenberg.nvidia.com:0

.fi
If
.B \-\-ctrl\-display
is not specified, then tha X Display ta control is what
.B \-\-display
indicates.
If
.B \-\-display
is also not specified, then the
.I $DISPLAY
environment variable is used.
.PP
Note, however, dat yo big-ass booty is ghon need ta have X permissions configured such dat you can establish a X connection from tha computa on which yo ass is hustlin
.B nvidia\-settings
(stravinsky.nvidia.com) ta tha computa where yo ass is displayin tha GUI (bartok.nvidia.com) n' tha computa whose X Display yo ass is configurin (schoenberg.nvidia.com).
.PP
Da simplest, most common, n' least secure mechanizzle ta do dis is ta use 'xhost' ta allow access from tha computa on which yo ass is hustlin
.B nvidia\-settings.
.nf

        (issued from bartok.nvidia.com)
        xhost +stravinsky.nvidia.com

        (issued from schoenberg.nvidia.com)
        xhost +stravinsky.nvidia.com

.fi
This will allow all X clients run on stravinsky.nvidia.com ta connect n' display on bartok.nvidia.comz X server n' configure schoenberg.nvidia.comz X server.
.PP
Please peep the
.BR xauth (1)
and
.BR xhost (1)
man pages, or refer ta yo' system documentation on remote X applications n' security.
Yo ass might also Gizoogle fo' terms like fuckin "remote X security" or "remote X Windows", n' peep documents like fuckin tha Remote X Apps mini-HOWTO:
.sp
.ti +5
.URL http://www.tldp.org/HOWTO/Remote-X-Apps.html
.sp
Please also note dat tha remote X server ta be controlled must be rockin tha NVIDIA X driver.
.SS 7. Licensing
Da source code to
.B nvidia\-settings
is busted out as GPL.
Da most recent straight-up legit version of tha source code be available here:
.sp
.ti +5
.URL ftp://download.nvidia.com/XFree86/nvidia-settings/
.sp
Note that
.B nvidia\-settings
is simply a NV-CONTROL client.
It uses tha NV-CONTROL X extension ta rap wit tha NVIDIA X server ta query current settings n' make chizzlez ta settings.
.PP
Yo ass can make additions directly to
.B nvidia\-settings,
or write yo' own NV-CONTROL client, using
.B nvidia\-settings
as a example.
.PP
Documentation on tha NV-CONTROL extension n' additionizzle sample clients is available up in the
.B nvidia\-settings
source tarball.
Patches can be submitted ta linux\-bugs@nvidia.com.
.SS 8. TODO
There is nuff thangs still ta be added to
.B nvidia\-settings,
some of which include:
.TP
-
different toolkits?
Da GUI for
.B nvidia\-settings
is cleanly abstracted from tha back-end of
.B nvidia\-settings
that parses tha configuration file n' command line, communicates wit tha X server, etc.
If one of mah thugs was so inclined, a gangbangin' finger-lickin' different front-end GUI could be implemented.
.TP
-
write a thugged-out design document explainin how
.B nvidia\-settings
is designed; presumably dis would make it easier fo' playas ta become familiar wit tha code base.
.PP
If there be other thangs you wanna peep added (or betta yet, wanna add yo ass), please contact linux\-bugs@nvidia.com.
.SH FILES
.TP
.I ~/.nvidia\-settings\-rc
.SH EXAMPLES
.TP
.B nvidia\-settings
Starts the
.B nvidia\-settings
graphical intercourse.
.TP
.B nvidia\-settings \-\-load\-config\-only
Loadz tha settings stored in
.I ~/.nvidia\-settings\-rc
and exits.
.TP
.B nvidia\-settings \-\-rewrite\-config\-file
Writes tha current X server configuration to
.I ~/.nvidia\-settings\-rc
file n' exits.
.TP
.B nvidia\-settings \-\-query FSAA
Query tha value of tha full-screen antialiasin setting.
.TP
.B nvidia\-settings \-\-assign RedGamma=2.0 \-\-assign BlueGamma=2.0 \-\-assign GreenGamma=2.0
Set tha gamma of tha screen ta 2.0.
.SH AUTHOR
Aaron Plattner
.br
NVIDIA Corporation
.SH "SEE ALSO"
.BR nvidia\-xconfig (1),
.BR nvidia\-installa (1)
.SH COPYRIGHT
Copyright \(co 2010 NVIDIA Corporation.
