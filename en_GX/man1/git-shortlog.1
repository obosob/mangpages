'\" t
.\"     Title: git-shortlog
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-SHORTLOG" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-shortlog \- Summarize \(aqgit log\(aq output
.SH "SYNOPSIS"
.sp
.nf
git log \-\-pretty=short | \fIgit shortlog\fR [<options>]
\fIgit shortlog\fR [<options>] [<revision range>] [[\-\-] <path>\&...]
.fi
.sp
.SH "DESCRIPTION"
.sp
Summarizes \fIgit log\fR output up in a gangbangin' format suitable fo' inclusion up in release announcements\&. Each commit is ghon be grouped by lyricist n' title\&.
.sp
Additionally, "[PATCH]" is ghon be stripped from tha commit description\&.
.sp
If no revisions is passed on tha command line n' either standard input aint a terminal or there is no current branch, \fIgit shortlog\fR will output a summary of tha log read from standard input, without reference ta tha current repository\&.
.SH "OPTIONS"
.PP
\-n, \-\-numbered
.RS 4
Sort output accordin ta tha number of commits per lyricist instead of lyricist alphabetic order\&.
.RE
.PP
\-s, \-\-summary
.RS 4
Suppress commit description n' provide a cold-ass lil commit count summary only\&.
.RE
.PP
\-e, \-\-email
.RS 4
Show tha email address of each author\&.
.RE
.PP
\-\-format[=<format>]
.RS 4
Instead of tha commit subject, use some other shiznit ta describe each commit\&.
\fI<format>\fR
can be any strang accepted by the
\-\-format
option of
\fIgit log\fR, such as
\fI* [%h] %s\fR\&. (See tha "PRETTY FORMATS" section of
\fBgit-log\fR(1)\&.)
.sp
.if n \{\
.RS 4
.\}
.nf
Each pretty\-printed commit is ghon be rewrapped before it is shown\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-w[<width>[,<indent1>[,<indent2>]]]
.RS 4
Linewrap tha output by wrappin each line at
width\&. Da first line of each entry is indented by
indent1
spaces, n' tha second n' subsequent lines is indented by
indent2
spaces\&.
width,
indent1, and
indent2
default ta 76, 6 n' 9 respectively\&.
.sp
If width is
0
(zero) then indent tha linez of tha output without wrappin them\&.
.RE
.PP
<revision range>
.RS 4
Show only commits up in tha specified revision range\&. When no <revision range> is specified, it defaults to
HEAD
(i\&.e\&. tha whole history leadin ta tha current commit)\&.
origin\&.\&.HEAD
specifies all tha commits reachable from tha current commit (i\&.e\&.
HEAD) yo, but not from
origin\&. For a cold-ass lil complete list of ways ta spell <revision range>, peep tha "Specifyin Ranges" section of
\fBgitrevisions\fR(7)\&.
.RE
.PP
[\-\-] <path>\&...
.RS 4
Consider only commits dat is enough ta explain how tha fuck tha filez dat match tha specified paths came ta be\&.
.sp
Paths may need ta be prefixed wit "\-\- " ta separate dem from options or tha revision range, when mad drama arises\&.
.RE
.SH "MAPPING AUTHORS"
.sp
Da \&.mailmap feature is used ta coalesce together commits by tha same thug up in tha shortlog, where they name and/or email address was spelled differently\&.
.sp
If tha file \&.mailmap exists all up in tha toplevel of tha repository, or all up in tha location pointed ta by tha mailmap\&.file or mailmap\&.blob configuration options, it is used ta map lyricist n' committa names n' email addresses ta canonical real names n' email addresses\&.
.sp
In tha simple form, each line up in tha file consistz of tha canonical real name of a lyricist, whitespace, n' a email address used up in tha commit (enclosed by \fI<\fR n' \fI>\fR) ta map ta tha name\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
Proper Name <commit@email\&.xx>
.fi
.if n \{\
.RE
.\}
.sp
Da mo' complex forms are:
.sp
.if n \{\
.RS 4
.\}
.nf
<proper@email\&.xx> <commit@email\&.xx>
.fi
.if n \{\
.RE
.\}
.sp
which allows mailmap ta replace only tha email part of a cold-ass lil commit, and:
.sp
.if n \{\
.RS 4
.\}
.nf
Proper Name <proper@email\&.xx> <commit@email\&.xx>
.fi
.if n \{\
.RE
.\}
.sp
which allows mailmap ta replace both tha name n' tha email of a cold-ass lil commit matchin tha specified commit email address, and:
.sp
.if n \{\
.RS 4
.\}
.nf
Proper Name <proper@email\&.xx> Commit Name <commit@email\&.xx>
.fi
.if n \{\
.RE
.\}
.sp
which allows mailmap ta replace both tha name n' tha email of a cold-ass lil commit matchin both tha specified commit name n' email address\&.
.sp
Example 1: Yo crazy-ass history gotz nuff commits by two authors, Jane n' Joe, whose names step tha fuck up in tha repository under nuff muthafuckin forms:
.sp
.if n \{\
.RS 4
.\}
.nf
Joe Developer <joe@example\&.com>
Joe R\&. Developer <joe@example\&.com>
Jane Doe <jane@example\&.com>
Jane Doe <jane@laptop\&.(none)>
Jane D\&. <jane@desktop\&.(none)>
.fi
.if n \{\
.RE
.\}
.sp
.sp
Now suppose dat Joe wants his crazy-ass middle name initial used, n' Jane prefers her crew name straight-up spelled out\& fo' realz. A proper \&.mailmap file would look like:
.sp
.if n \{\
.RS 4
.\}
.nf
Jane Doe         <jane@desktop\&.(none)>
Joe R\&. Developer <joe@example\&.com>
.fi
.if n \{\
.RE
.\}
.sp
.sp
Note how tha fuck there is no need fo' a entry fo' <jane@laptop\&.(none)>, cuz tha real name of dat lyricist be already erect\&.
.sp
Example 2: Yo crazy-ass repository gotz nuff commits from tha followin authors:
.sp
.if n \{\
.RS 4
.\}
.nf
nick1 <bugs@company\&.xx>
nick2 <bugs@company\&.xx>
nick2 <nick2@company\&.xx>
santa <me@company\&.xx>
claus <me@company\&.xx>
CTO <cto@coompany\&.xx>
.fi
.if n \{\
.RE
.\}
.sp
.sp
Then you might want a \&.mailmap file dat looks like:
.sp
.if n \{\
.RS 4
.\}
.nf
<cto@company\&.xx>                       <cto@coompany\&.xx>
Some Dude <some@dude\&.xx>         nick1 <bugs@company\&.xx>
Other Lyricist <other@author\&.xx>   nick2 <bugs@company\&.xx>
Other Lyricist <other@author\&.xx>         <nick2@company\&.xx>
Gangsta Claus <santa\&.claus@northpole\&.xx> <me@company\&.xx>
.fi
.if n \{\
.RE
.\}
.sp
.sp
Use hash \fI#\fR fo' comments dat is either on they own line, or afta tha email address\&.
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
