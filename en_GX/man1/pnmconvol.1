\
.\" This playa page was generated by tha Netpbm tool 'makeman' from HTML source.
.\" Do not hand-hack dat shiznit son!  If you have bug fixes or improvements, please find
.\" tha correspondin HTML page on tha Netpbm joint, generate a patch
.\" against that, n' bust it ta tha Netpbm maintainer.
.TH "Pnmconvol User Manual" 0 "03 January 2010" "netpbm documentation"

.SH NAME

pnmconvol - general MxN convolution on a Netpbm image

.UN synopsis
.SH SYNOPSIS

\fBpnmconvol\fP
{
\fB-matrix=\fP\fIconvolution_matrix\fP
|
\fB-matrixfile=\fP\fIfilename\fP[\fB,\fP\fIfilename\fP[\fB,\fP ...]]
}
[\fInetpbmfile\fP]
.PP
\fBpnmconvol\fP
\fIconvolution_matrix_file\fP
[\fB-normalize\fP]
[\fB-nooffset\fP]
[\fInetpbmfile\fP]
.PP
Minimum unique abbreviation of option be acceptable.  Yo ass may use double
hyphens instead of single hyphen ta denote options.  Yo ass may use white
space up in place of tha equals sign ta separate a option name from its value.


.UN description
.SH DESCRIPTION
.PP
This program is part of
.BR Netpbm (1)
.
.PP
\fBpnmconvol\fP readz a Netpbm image as input, convolves it with
a specified convolution matrix, n' writes a Netpbm image as output.
.PP
Convolution means replacin each pixel wit a weighted average of
the nearby pixels.  Da weights n' tha area ta average is determined
by tha convolution matrix (sometimes called a cold-ass lil convolution kernel),
which you supply up in one of nuff muthafuckin ways.  See 
.UR #convolutionmatrix
 Convolution Matrix
.UE
\&.
.PP
At tha edgez of tha convolved image, where tha convolution matrix
would extend over tha edge of tha image, \fBpnmconvol\fP just copies
the input pixels directly ta tha output.
.PP
Da convolution computation can result up in a value which is outside the
range representable up in tha output.  When dat happens, \fBpnmconvol\fP just
clips tha output, which means brightnizz aint conserved.


.UN convolutionmatrix
.SS Convolution Matrix
.PP
There is three ways ta specify tha convolution matrix:


.IP \(bu
directly wit a \fB-matrix\fP option.

.IP \(bu
In a gangbangin' file (or set of them) named by a \fB-matrixfile\fP option, whose
contents is similar ta a \fB-matrix\fP option value.

.IP \(bu
With a special PNM file.

.PP
Da PNM file option is tha hardest, n' exists only cuz
until Netpbm 10.49 (December 2009), dat shiznit was tha only way.
.PP
Da regular convolution matrix file is slightly easier ta read
than tha \fB-matrix\fP option value, n' make yo' command line
less messy yo, but requires you ta manage a separate file.  With tha file,
you can have separate convolution matrices fo' tha individual color
components, which you can't do wit \fB-matrix\fP.
.PP
In any case, tha convolution matrix \fBpnmconvol\fP uses be a
matrix of real numbers.  They can be whole or fractional, positive,
negative, or zero.
.PP
Da convolution matrix always has a odd width n' height, so that
there be a cold-ass lil centa element.  \fBpnmconvol\fP figuratively places that
centa element over a pixel of tha input image n' weights dat pixel
and its neighbors as indicated by tha convolution matrix ta produce the
pixel up in tha same location of tha output image.
.PP
For a aiiight convolution, where you neither addin nor subtractin total
value from tha image yo, but merely movin it around, you gonna wanna make sure
that all tha numbers up in tha matrix add up ta 1.  If they don't,
\fBpnmconvol\fP warns yo thugged-out ass.
.PP
Da elementz of tha matrix is straight-up tuples, one fo' each sample up in the
input.  (I.e. if tha input be a RGB image, each element of tha convolution
matrix has one weight fo' red, one fo' green, n' one fo' blue.


.UN matrixopt
.B Directly On tha Command Line
.PP
An example of a \fB-matrix\fP option is

.nf
\f(CW
    -matrix=0,.2,0;.2,.2,.2;0,.2,0
\fP
.fi
.PP
Da value consistz of each row of tha matrix from top ta bottom, separated
by semicolons.  Each row consistz of tha elementz of tha row from left to
right, separated by commas.  Yo ass must of course have tha same number of
elements up in each row.  Each element be a thugged-out decimal floatin point number
and is tha weight ta give ta each component of a pixel dat correspondz to
that matrix location.
.PP
Note dat when you supply dis option via a gangbangin' finger-lickin' dirty-ass shell, semicolon
(';') probably means suttin' ta tha shell, so use quotation
marks.
.PP
There is no way wit dis method ta have different weights fo' different
componentz of a pixel.
.PP
Da \fB-normalize\fP option is often like handy wit \fB-matrix\fP
because it lets you quickly throw together tha command without hustlin up the
math ta make shizzle tha matrix aint biased. Y'all KNOW dat shit, muthafucka!  Note dat if you use the
\fB-normalize\fP option, tha weights up in tha matrix aren't straight-up the
numbers you specify up in tha \fB-matrix\fP option.


.UN matrixfile
.B Regular Matrix File
.PP
Specify tha name of tha matrix file wit a \fB-matrixfile\fP
option. I aint talkin' bout chicken n' gravy biatch.  Or specify a list of them, one fo' each plane of tha image.
.PP
Examples:

.nf
\f(CW
    -matrixfile=mymatrix
\fP

\f(CW
    -matrixfile=myred,mygreen,myblue
\fP
.fi
.PP
Each file applies ta one plane of tha image (e.g. red, green, or blue), in
order n' shit.  Da matrix up in each file must have tha same dimensions.  If the
input image has mo' planes than tha number of filez you specify, tha first
file applies ta tha extra planes as well.
.PP
\fBpnmconvol\fP interprets tha file as text, wit lines delimited by Unix
newline charactas (line feeds).
.PP
Each line of tha file is one row of tha matrix, up in order from top to
bottom.
.PP
For each row, tha file gotz nuff a gangbangin' floatin point decimal number fo' each
element up in tha row, from left ta right, separated by spaces.  This aint just
any oldschool white space -- it is exactly one space.  Two spaces up in a row mean
you've specified a null strang fo' a element (which is invalid).  If you
wanna line up yo' matrix visually, use leadin n' trailin zeroes
in tha floatin point numbers ta do dat shit.
.PP
There is no way ta put comments up in tha file.  There is no signature
or any other metadata up in tha file.
.PP
Note dat if you use tha \fB-normalize\fP option, tha weights up in the
matrix aren't straight-up what tha fuck is up in tha file.


.UN matrixpnm
.B PNM File
.PP
Before Netpbm 10.49 (December 2009), dis was tha only way ta 
specify a cold-ass lil convolution matrix.  \fBpnmconvol\fP used dis method in
an attempt ta exploit tha generic matrix processin capabilitizzles of
Netpbm yo, but as tha Netpbm formats don't directly allow matrices with
the kindz of numbers you need up in a cold-ass lil convolution matrix, it is quite
cumbersome.  In fact, there simply is no way ta specify some convolution
matrices wit a legal Netpbm image, so make it work, \fBpnmconvol\fP has
to chillax tha Netpbm file requirement dat sample joints be no pimped outer
than tha imagez maxval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  I.e. it aint even a real PNM file.
.PP
Da way you select dis method of supplyin tha convolution matrix is to
\fInot\fP specify \fB-matrix\fP or \fB-matrixfile\fP.  When you do that,
you must specify a second non-option argument -- dat is tha name of tha PNM
file (or PNM equivalent PAM file).
.PP
There is two ways \fBpnmconvol\fP interprets tha PNM convolution matrix
image pixels as weights: wit offsets, n' without offsets.
.PP
Da simpla of tha two is without offsets, n' you can put dat on yo' toast.  That is what tha fuck happens
when you specify tha \fB-nooffset\fP option. I aint talkin' bout chicken n' gravy biatch.  In dat case,
\fBpnmconvol\fP simply normalizes tha sample joints up in tha PNM image
by dividin by tha maxval.
.PP
For example, here be a sample convolution file dat causes a output pixel
to be a simple average of its correspondin input pixel n' its 8 neighbors,
resultin up in a smoothed image:

.nf
    P2
    3 3
    18
    2 2 2
    2 2 2
    2 2 2
.fi
.PP
(Note dat tha above text be a actual PGM file -- you can cut n' paste
it.  If you not familiar wit tha plain PGM format, see
.BR tha PGM format justification (1)
).
.PP
\fBpnmconvol\fP divides each of tha sample joints (2) by tha maxval
(18) so tha weight of each of tha 9 input pixels gets is 1/9, which is
exactly what tha fuck you wanna keep tha overall brightnizz of tha image the
same.  \fBpnmconvol\fP creates a output pixel by multiplyin the
valuez of each of 9 pixels by 1/9 n' adding.
.PP
Note dat wit maxval 18, tha range of possible joints is 0 ta 18.
Afta scaling, tha range is 0 ta 1.
.PP
For a aiiight convolution, where you neither addin nor
subtractin total value from tha image yo, but merely movin it around,
yo dirty ass is gonna wanna make shizzle dat all tha scaled joints up in (each plane of)
your convolution PNM add up ta 1, which means all tha actual sample
values add up ta tha maxval.
.PP
When you \fIdon't\fP specify \fB-nooffset\fP, \fBpnmconvol\fP
applies a offset, tha purpose of which is ta allow you ta indicate
negatizzle weights even though PNM sample joints is never negative.  In
this case, \fBpnmconvol\fP subtracts half tha maxval from each sample
and then normalizes by dividin by half tha maxval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  So ta git the
same result as our phat asses did above wit \fB-nooffset\fP, tha convolution
matrix PNM image would gotta be lookin like this:

.nf
    P2
    3 3
    18
    10 10 10
    10 10 10
    10 10 10
.fi
.PP
To peep how tha fuck dis works, do tha above-mentioned offset: 10 - 18/2
gives 1.  Da normalization step divides by 18/2 = 9, which make it
1/9 - exactly what tha fuck you want.  Da equivalent matrix fo' 5x5 smoothing
would have maxval 50 n' be filled wit 26.
.PP
Note dat wit maxval 18, tha range of possible joints is 0 ta 18.
Afta offset, thatz -9 ta 9, n' afta normalizing, tha range is -1 ta 1.
.PP
Da convolution file will probably be a PGM, so dat tha same
convolution gets applied ta each color component.  But fuck dat shiznit yo, tha word on tha street is dat if you
wanna bust a PPM n' do a gangbangin' finger-lickin' different convolution ta different
colors, you can certainly do dis shit.


.UN otherconvol
.SS Other Formz of Convolution
.PP
\fBpnmconvol\fP do only arithmetic, linear combination convolution.
There is other formz of convolution dat is especially useful up in image
processing.
.PP
\fBpgmmedian\fP do median filtering, which be a gangbangin' form of convolution
where tha output pixel value, rather than bein a linear combination of the
pixels up in tha window, is tha median of a cold-ass lil certain subset of em.
.PP
\fBpgmmorphconv\fP do dilation n' erosion, which is like tha median
filta but tha output value is tha minimum or maximum of tha joints up in the
window.


.UN options
.SH OPTIONS



.TP
\fB-matrix=\fP\fIconvolution_matrix\fP
Da value of tha convolution matrix.  See
.UR #matrixopt
Convolution Matrix
.UE
\&.
.sp
Yo ass may not specify both dis n' \fB-matrixfile\fP.
.sp
This option was freshly smoked up in Netpbm 10.49 (December 2009).  Before
that, bust a PNM file fo' tha convolution matrix.

.TP
\fB-matrixfile=\fP\fIfilename\fP
This specifies dat yo ass is supplyin tha convolution matrix in
a file n' names dat file.  See
.UR #matrixfile
Convolution Matrix
.UE
\&.
.sp
Yo ass may not specify both dis n' \fB-matrix\fP.
.sp
This option was freshly smoked up in Netpbm 10.49 (December 2009).  Before
that, bust a PNM file fo' tha convolution matrix.

.TP
\fB-normalize\fP
This option say ta adjust tha weights up in yo' convolution matrix so they
all add up ta one.  Yo ass probably want dem ta add up ta one so dat the
convolved result tendz ta have tha same overall brightnizz as tha input.  With
\fB-normalize\fP, \fBpnmconvol\fP scalez all tha weights by tha same factor
to make tha sum one.  It do dis fo' each plane.
.sp
This can be like convenient cuz you can just throw numbers into
the matrix dat have roughly tha right relationshizzle ta each other n' let
\fBpnmconvol\fP do tha work of normalizin em.  And you can adjust a matrix
by raisin or lowerin certain weights without havin ta modify all tha other
weights ta maintain normalcy.  And you can use thugged-out integers.
.sp
Example:

.nf
\f(CW
    $ pnmconvol myimage.ppm -normalize -matrix=1,1,1;1,1,1;1,1,1
\fP
.fi
.sp
This iz of course a funky-ass basic 3x3 average yo, but without you havin to
specify 1/9 (.1111111) fo' each weight.
.sp
This option has no effect when you specify tha convolution matrix
via pseudo-PNM file.
.sp
This option was freshly smoked up in Netpbm 10.50 (March 2010).

.TP
\fB-nooffset=\fP
This is part of tha obsolete PNM image method of specifyin the
convolution matrix.  See
.UR #matrixpnm
Convolution Matrix
.UE
\&.



.UN history
.SH HISTORY 
.PP
Da \fB-nooffset\fP option was freshly smoked up in Netpbm
10.23 (July 2004), makin it substantially easier ta specify a cold-ass lil convolution
matrix yo, but still hard. Y'all KNOW dat shit, muthafucka!  In Netpbm 10.49 (December 2009), tha PNM convolution
matrix tyranny was finally ended wit tha \fB-matrix\fP and
\fB-matrixfile\fP options.  In between, \fBpnmconvol\fP was fucked up fo' a
while cuz tha Netpbm library started enforcin tha requirement dat a
sample value not exceed tha maxval of tha image.  \fBpnmconvol\fP used the
Netpbm library ta read tha PNM convolution matrix file yo, but up in tha pseudo-PNM
format dat \fBpnmconvol\fP uses, a sample value sometimes has ta exceed
the maxval.


.UN seealso
.SH SEE ALSO
.BR pnmsmooth (1)
,
.BR pgmmorphconv (1)
,
.BR pgmmedian (1)
,
.BR pnmnlfilt (1)
,
.BR pgmkernel (1)
,
.BR pamgauss (1)
,
.BR pammasksharpen (1)
,
.BR pnm (1)


.UN authors
.SH AUTHORS

Copyright (C) 1989, 1991 by Jef Poskanzer.
Modified 26 November 1994 by Mike Burns, \fIburns@chem.psu.edu\fP
