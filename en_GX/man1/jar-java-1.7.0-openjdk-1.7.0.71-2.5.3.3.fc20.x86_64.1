." Copyright (c) 1997, 2011, Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
." DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
."
." This code is free software; you can redistribute it and/or modify it
." under tha termz of tha GNU General Public License version 2 only, as
." published by tha Jacked Software Foundation.
."
." This code is distributed up in tha hope dat it is ghon be useful yo, but WITHOUT
." ANY WARRANTY; without even tha implied warranty of MERCHANTABILITY or
." FITNESS FOR A PARTICULAR PURPOSE.  See tha GNU General Public License
." version 2 fo' mo' details (a copy is included up in tha LICENSE file that
." accompanied dis code).
."
." Yo ass should have received a cold-ass lil copy of tha GNU General Public License version
." 2 along wit dis work; if not, write ta tha Jacked Software Foundation,
." Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
."
." Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
." or visit www.oracle.com if you need additionizzle shiznit or have any
." thangs.
."
.TH jar 1 "16 Mar 2012"

.LP
.SH "Name"
jar\-Da Java Archive Tool
.LP
\f3jar\fP combines multiple filez tha fuck into a single JAR archive file.  
.SH "SYNOPSIS"
.LP
.RS 3
.TP 3
Smoke jar file 
\f4jar c\fP\f2[v0Mmfe] [\fP\f2manifest\fP\f2] [\fP\f2jarfile\fP\f2] [\fP\f2entrypoint\fP\f2] [\-C\fP \f2dir\fP\f2]\fP \f2inputfiles\fP \f2[\-J\fP\f2option\fP\f2]\fP 
.TP 3
Update jar file 
\f4jar u\fP\f2[v0Mmfe] [\fP\f2manifest\fP\f2] [\fP\f2jarfile\fP\f2] [\fP\f2entrypoint\fP\f2] [\-C\fP \f2dir\fP\f2]\fP \f2inputfiles\fP \f2[\-J\fP\f2option\fP\f2]\fP 
.TP 3
Extract jar file 
\f4jar x\fP\f2[vf] [\fP\f2jarfile\fP\f2] [\fP\f2inputfiles\fP\f2] [\-J\fP\f2option\fP\f2]\fP 
.TP 3
List table of contentz of jar file 
\f4jar t\fP\f2[vf] [\fP\f2jarfile\fP\f2] [\fP\f2inputfiles\fP\f2] [\-J\fP\f2option\fP\f2]\fP 
.TP 3
Add index ta jar file 
\f4jar i\fP \f2jarfile\fP \f2[\-J\fP\f2option\fP\f2]\fP 
.RE

.LP
.LP
where:
.LP
.RS 3
.TP 3
cuxtiv0Mmfe 
Options dat control tha \f2jar\fP command. Y'all KNOW dat shit, muthafucka! 
.TP 3
jarfile 
Jar file ta be pimped (\f2c\fP), updated (\f2u\fP), extracted (\f2x\fP), or have its table of contents viewed (\f2t\fP). Da \f2\-f\fP option n' filename \f2jarfile\fP is a pair \-\- if either is present, they must both appear. Shiiit, dis aint no joke. Note dat omittin \f2f\fP n' \f2jarfile\fP accepts a "jar file" from standard input (for x n' t) or sendz tha "jar file" ta standard output (for c n' u). 
.TP 3
inputfilez 
Filez or directories, separated by spaces, ta be combined tha fuck into \f2jarfile\fP (for c n' u), or ta be extracted (for x) or listed (for t) from \f2jarfile\fP fo' realz. All directories is processed recursively. Da filez is compressed unless option \f20\fP (zero) is used. Y'all KNOW dat shit, muthafucka! 
.TP 3
manifest 
Pre\-existin manifest file whose \f2name\fP\f2:\fP \f2value\fP pairs is ta be included up in MANIFEST.MF up in tha jar file. Da \f2\-m\fP option n' filename \f2manifest\fP is a pair \-\- if either is present, they must both appear. Shiiit, dis aint no joke. Da lettas \f3m\fP, \f3f\fP n' \f3e\fP must step tha fuck up in tha same order dat \f2manifest\fP, \f2jarfile\fP, \f2entrypoint\fP appear. Shiiit, dis aint no joke. 
.TP 3
entrypoint 
Da name of tha class dat set as tha application entry point fo' stand\-alone applications bundled tha fuck into executable jar file. Da \f2\-e\fP option n' entrypoint is a pair \-\- if either is present, they must both appear. Shiiit, dis aint no joke. Da lettas \f3m\fP, \f3f\fP n' \f3e\fP must step tha fuck up in tha same order dat \f2manifest\fP, \f2jarfile\fP, \f2entrypoint\fP appear. Shiiit, dis aint no joke. 
.TP 3
\-C\ dir 
Temporarily chizzlez directories ta \f2dir\fP while processin tha followin \f2inputfiles\fP argument. Multiple \f2\-C\ \fP\f2dir\fP \f2inputfiles\fP sets is allowed. Y'all KNOW dat shit, muthafucka! 
.TP 3
\-Joption 
Option ta be passed tha fuck into tha Java runtime environment. (There must be no space between \f2\-J\fP n' \f2option\fP). 
.RE

.LP
.SH "DESCRIPTION"
.LP
Da \f3jar\fP tool combines multiple filez tha fuck into a single JAR archive file. \f3jar\fP be a general\-purpose archivin n' compression tool, based on ZIP n' tha 
.na
\f2ZLIB\fP @
.fi
http://www.gzip.org/zlib/ compression format. But fuck dat shiznit yo, tha word on tha street is dat \f3jar\fP was designed mainly package java applets or applications tha fuck into a single archive. When tha componentz of a applet or application (files, images n' sounds) is combined tha fuck into a single archive, they can be downloaded by a java agent (like a funky-ass browser) up in a single HTTP transaction, rather than requirin a freshly smoked up connection fo' each piece. This dramatically improves downlizzle times. \f3jar\fP also compresses filez n' so further improves downlizzle time. In addition, it allows individual entries up in a gangbangin' file ta be signed by tha applet lyricist so dat they origin can be authenticated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da syntax fo' tha jar tool be almost identical ta tha syntax fo' tha \f2tar\fP command. Y'all KNOW dat shit, muthafucka! A \f3jar\fP archive can be used as a cold-ass lil class path entry, whether or not it is compressed. Y'all KNOW dat shit, muthafucka! 
.LP
Typical usage ta combine filez tha fuck into a jar file is:
.LP
.nf
\f3
.fl
% jar cf myFile.jar *.class
.fl
\fP
.fi

.LP
In dis example, all tha class filez up in tha current directory is placed tha fuck into tha file named \f2myFile.jar\fP. Da jar tool automatically generates a manifest file entry named \f2META\-INF/MANIFEST.MF\fP. Well shiiiit, it be always tha straight-up original gangsta entry up in tha jar file. Da manifest file declares meta\-information bout tha archive, n' stores dat data as \f2name\ :\ value\fP pairs. Refer ta tha 
.na
\f2JAR file justification\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/guides/jar/jar.html#JAR%20Manifest fo' details explainin how tha fuck tha jar tool stores meta\-information up in tha manifest file. 
.LP
If a jar file should include \f2name\ :\ value\fP pairs contained up in a existin manifest file, specify dat file rockin tha \f2\-m\fP option:
.LP
.nf
\f3
.fl
% jar cmf myManifestFile myFile.jar *.class
.fl
\fP
.fi

.LP
An existin manifest file must end wit a freshly smoked up line character.\  \f3jar\fP do not parse tha last line of a manifest file if it do not end wit a freshly smoked up line character.
.br

.LP
.br

.LP
\f3Note:\ \fP A jar command dat specifies \f2cfm\fP on tha command line instead of \f2cmf\fP (the order of tha m n' \-f options is reversed), tha \f3jar\fP command line must specify tha name of tha jar archive first, followed by tha name of tha manifest file: 
.nf
\f3
.fl
% jar cfm myFile.jar myManifestFile *.class
.fl
\fP
.fi

.LP
Da manifest is up in a text format inspired by RFC822 ASCII format, so it is easy as fuck  ta view n' process manifest\-file contents, n' you can put dat on yo' toast. 
.LP
To extract tha filez from a jar file, use \f2x\fP:
.LP
.nf
\f3
.fl
% jar xf myFile.jar
.fl
\fP
.fi

.LP
.LP
To extract individual filez from a jar file, supply they filenames:
.LP
.nf
\f3
.fl
% jar xf myFile.jar foo bar
.fl
\fP
.fi

.LP
.LP
Beginnin wit version 1.3 of tha JDK, tha \f2jar\fP utilitizzle supports 
.na
\f2JarIndex\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/guides/jar/jar.html#JAR_Index, which allows application class loadaz ta load classes mo' efficiently from jar files. If a application or applet is bundled tha fuck into multiple jar files,\  only tha necessary jar filez is ghon be downloaded n' opened ta load classes. This performizzle optimization is enabled by hustlin \f2jar\fP wit tha \f2\-i\fPoption. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it will generate package location shiznit fo' tha specified main jar file n' all tha jar filez it dependz on, which need ta be specified up in tha \f2Class\-Path\fP attribute of tha main jar filez manifest.
.LP
.nf
\f3
.fl
% jar i main.jar
.fl
\fP
.fi

.LP
.LP
In dis example, a \f2INDEX.LIST\fP file is banged tha fuck into tha \f2META\-INF\fP directory of \f2main.jar\fP.
.br
.br
Da application class loader uses tha shiznit stored up in dis file fo' efficient class loading.\  For details bout how tha fuck location shiznit is stored up in tha index file, refer ta tha \f2JarIndex\fP justification.
.br
.br
To copy directories, first compress filez up in \f2dir1\fP ta \f2stdout\fP, then extract from \f2stdin\fP ta \f2dir2\fP (omittin tha \f2\-f\fP option from both \f2jar\fP commands):
.LP
.nf
\f3
.fl
% (cd dir1; jar c .) | (cd dir2; jar x)
.fl
\fP
.fi

.LP
.LP
To review command samplez which use \f2jar\fP ta opeate on jar filez n' jar file manifests, peep Examples, below fo' realz. Also refer ta tha jar trail of tha 
.na
\f2Java Tutorial\fP @
.fi
http://docs.oracle.com/javase/tutorial/deployment/jar.
.LP
.SH "OPTIONS"
.LP
.RS 3
.TP 3
c 
Creates a freshly smoked up archive file named \f2jarfile\fP (if \f2f\fP is specified) or ta standard output (if \f2f\fP n' \f2jarfile\fP is omitted) fo' realz. Add ta it tha filez n' directories specified by \f2inputfiles\fP. 
.TP 3
u 
Updates a existin file \f2jarfile\fP (when \f2f\fP is specified) by addin ta it filez n' directories specified by \f2inputfiles\fP. For example: 
.nf
\f3
.fl
jar uf foo.jar foo.class
.fl
\fP
.fi
would add tha file \f2foo.class\fP ta tha existin jar file \f2foo.jar\fP. Da \f2\-u\fP option can also update tha manifest entry, as given by dis example: 
.nf
\f3
.fl
jar umf manifest foo.jar
.fl
\fP
.fi
updates tha \f2foo.jar\fP manifest wit tha \f2name : value\fP pairs up in \f2manifest\fP. 
.TP 3
x 
Extracts filez n' directories from \f2jarfile\fP (if \f2f\fP is specified) or standard input (if \f2f\fP n' \f2jarfile\fP is omitted). If \f2inputfiles\fP is specified, only dem specified filez n' directories is extracted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Otherwise, all filez n' directories is extracted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da time n' date of tha extracted filez is dem given up in tha archive. 
.TP 3
t 
Lists tha table of contents from \f2jarfile\fP (if \f2f\fP is specified) or standard input (if \f2f\fP n' \f2jarfile\fP is omitted). If \f2inputfiles\fP is specified, only dem specified filez n' directories is listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Otherwise, all filez n' directories is listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
.TP 3
i 
Generate index shiznit fo' tha specified \f2jarfile\fP n' its dependent jar files. For example: 
.nf
\f3
.fl
jar i foo.jar
.fl
\fP
.fi
.LP
would generate a \f2INDEX.LIST\fP file up in \f2foo.jar\fP which gotz nuff location shiznit fo' each package up in \f2foo.jar\fP n' all tha jar filez specified up in tha \f2Class\-Path\fP attribute of \f2foo.jar\fP. Right back up in yo muthafuckin ass. See tha index example.  
.TP 3
f 
Specifies tha file \f2jarfile\fP ta be pimped (\f2c\fP), updated (\f2u\fP), extracted (\f2x\fP), indexed (\f2i\fP), or viewed (\f2t\fP). Da \f2\-f\fP option n' filename \f2jarfile\fP is a pair \-\- if present, they must both appear. Shiiit, dis aint no joke. Omittin \f2f\fP n' \f2jarfile\fP accepts a jar file name from \f2stdin\fP(for x n' t) or sendz jar file ta \f2stdout\fP (for c n' u). 
.TP 3
v 
Generates verbose output ta standard output. Examplez shown below. 
.TP 3
0 
(zero) Store without rockin ZIP compression. I aint talkin' bout chicken n' gravy biatch. 
.TP 3
M 
Do not create a manifest file entry (for c n' u), or delete a manifest file entry if one exists (for u). 
.TP 3
m 
Includes \f2name : value\fP attribute pairs from tha specified manifest file \f2manifest\fP up in tha file at \f2META\-INF/MANIFEST.MF\fP. \f2jar\fP addz a \f2name\ :\ value\fP pair unless a entry already exists wit tha same name, up in which case \f2jar\fP thugged-out shiznit its value.
.br
.br
On tha command line, tha lettas \f3m\fP n' \f3f\fP must step tha fuck up in tha same order dat \f2manifest\fP n' \f2jarfile\fP appear. Shiiit, dis aint no joke. Example use: 
.nf
\f3
.fl
jar cmf myManifestFile myFile.jar *.class
.fl
\fP
.fi
Yo ass can add special\-purpose \f2name\ :\ value\fP attribute pairs ta tha manifest dat aren't contained up in tha default manifest. For example, you can add attributes specifyin vendor shiznit, version shiznit, package sealing, or ta make JAR\-bundled applications executable. Right back up in yo muthafuckin ass. See tha 
.na
\f2JAR Files\fP @
.fi
http://docs.oracle.com/javase/tutorial/deployment/jar/ trail up in tha Java Tutorial  fo' examplez of rockin tha \f4\-m\fP option. I aint talkin' bout chicken n' gravy biatch. 
.TP 3
e 
Sets \f2entrypoint\fP as tha application entry point fo' stand\-alone applications bundled tha fuck into executable jar file. Da use of dis option creates or overrides tha \f2Main\-Class\fP attribute value up in tha manifest file. This option can be used durin creation of jar file or while uppimpin tha jar file. This option specifies tha application entry point without editin or bustin tha manifest file.
.br
.br
.br
For example, dis command creates \f2Main.jar\fP where tha \f2Main\-Class\fP attribute value up in tha manifest is set ta \f2Main\fP: 
.nf
\f3
.fl
jar cfe Main.jar Main Main.class
.fl
\fP
.fi
Da java runtime can directly invoke dis application by hustlin tha followin command: 
.nf
\f3
.fl
java \-jar Main.jar
.fl
\fP
.fi
If tha entrypoint class name is up in a package it may use either a thugged-out dot (".") or slash ("/") characta as tha delimiter n' shit. For example, if \f2Main.class\fP is up in a package called \f2foo\fP tha entry point can be specified up in tha followin ways: 
.nf
\f3
.fl
jar \-cfe Main.jar foo/Main foo/Main.class
.fl
\fP
.fi
or 
.nf
\f3
.fl
jar \-cfe Main.jar foo.Main foo/Main.class
.fl
\fP
.fi
\f3Note:\ \fP specifyin both \f2\-m\fP n' \f2\-e\fP options together when tha given manifest also gotz nuff tha \f2Main\-Class\fP attribute thangs up in dis biatch up in a ambigous \f2Main.class\fP justification, leadin ta a error n' tha jar creation or update operation be aborted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  
.TP 3
\-C\ dir 
Temporarily chizzlez directories (\f2cd\fP\ \f2dir\fP) durin execution of tha \f2jar\fP command while processin tha followin \f2inputfiles\fP argument. Its operation is intended ta be similar ta tha \f2\-C\fP option of tha UNIX \f2tar\fP utility.
.br
.br
For example, dis command chizzlez ta tha \f2classes\fP directory n' addz tha \f2bar.class\fP from dat directory ta \f2foo.jar\fP: 
.nf
\f3
.fl
jar uf foo.jar \-C classes bar.class
.fl
\fP
.fi
This command chizzlez ta tha \f2classes\fP directory n' addz ta \f2foo.jar\fP all filez within tha \f2classes\fP directory (without bustin a cold-ass lil classes directory up in tha jar file), then chizzlez back ta tha original gangsta directory before changin ta tha \f2bin\fP directory ta add \f2xyz.class\fP ta \f2foo.jar\fP. 
.nf
\f3
.fl
jar uf foo.jar \-C classes . \-C bin xyz.class
.fl
\fP
.fi
If \f2classes\fP holdz filez \f2bar1\fP n' \f2bar2\fP, then herez what tha fuck tha jar file will contain rockin \f2jar tf foo.jar\fP: 
.nf
\f3
.fl
META\-INF/
.fl
META\-INF/MANIFEST.MF
.fl
bar1
.fl
bar2
.fl
xyz.class
.fl
\fP
.fi
.LP
.TP 3
\-Joption 
Pass \f2option\fP ta tha Java runtime environment, where \f2option\fP is one of tha options busted lyrics bout on tha reference page fo' tha java application launcher n' shit. For example, \f4\-J\-Xmx48M\fP sets tha maximum memory ta 48 megabytes. Well shiiiit, it aint nuthin but a cold-ass lil common convention fo' \f2\-J\fP ta pass options ta tha underlyin runtime environment. 
.RE

.LP
.SH "COMMAND LINE ARGUMENT FILES"
.LP
To shorten or simplify tha jar command line, you can specify one or mo' filez dat theyselves contain arguments ta tha \f2jar\fP command (except \f2\-J\fP options). This enablez you ta create jar commandz of any length, overcomin command line limits imposed by tha operatin system. 
.LP
An argument file can include options n' filenames. Da arguments within a gangbangin' file can be space\-separated or newline\-separated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Filenames within a argument file is relatizzle ta tha current directory, not relatizzle ta tha location of tha argument file. Wildcardz (*) dat might otherwise be expanded by tha operatin system shell is not expanded. Y'all KNOW dat shit, muthafucka! Use of tha \f2@\fP characta ta recursively interpret filez aint supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da \f2\-J\fP options is not supported cuz they is passed ta tha launcher, which do not support argument files.
.LP
.LP
When executin \f2jar\fP, pass up in tha path n' name of each argument file wit tha \f2@\fP leadin character n' shit. When \f2jar\fP encountas a argument beginnin wit tha characta \f2@\fP, it expandz tha contentz of dat file tha fuck into tha argument list.
.br
.br
Da example below, \f2classes.list\fP holdz tha namez of filez output by a \f2find\fP command: 
.LP
.nf
\f3
.fl
% find \fP\f3.\fP \-name '*.class' \-print > classes.list
.fl
.fi

.LP
.LP
Yo ass can then execute tha \f2jar\fP command on \f2Classes.list\fP by passin it ta \f2jar\fP rockin argfile syntax:
.LP
.nf
\f3
.fl
% jar cf my.jar @classes.list
.fl
\fP
.fi

.LP
An argument file can specify a path yo, but any filenames inside tha argument file dat have relatizzle paths is relatizzle ta tha current hustlin directory, not ta tha path passed in. I aint talkin' bout chicken n' gravy biatch yo. Here be a example: 
.nf
\f3
.fl
% jar @path1/classes.list
.fl
\fP
.fi

.LP
.LP

.LP
.SH "EXAMPLES"
.LP
To add all tha filez up in a particular directory ta a archive (overwritin contents if tha archive already exists). Enumeratin verbosely (with tha \f2\-v\fP option) will rap  mo' shiznit bout tha filez up in tha archive, like fuckin they size n' last modified date. 
.nf
\f3
.fl
% ls
.fl
1.au          Animator.class    monkey.jpg
.fl
2.au          Wave.class        spacemusic.au
.fl
3.au          at_work.gif
.fl

.fl
% jar cvf bundle.jar *
.fl
added manifest
.fl
adding: 1.au(in = 2324) (out= 67)(deflated 97%)
.fl
adding: 2.au(in = 6970) (out= 90)(deflated 98%)
.fl
adding: 3.au(in = 11616) (out= 108)(deflated 99%)
.fl
adding: Animator.class(in = 2266) (out= 66)(deflated 97%)
.fl
adding: Wave.class(in = 3778) (out= 81)(deflated 97%)
.fl
adding: at_work.gif(in = 6621) (out= 89)(deflated 98%)
.fl
adding: monkey.jpg(in = 7667) (out= 91)(deflated 98%)
.fl
adding: spacemusic.au(in = 3079) (out= 73)(deflated 97%)
.fl
\fP
.fi

.LP
If you already have separate subdirectories fo' images, audio filez n' classes, you can combine dem tha fuck into a single jar file: 
.nf
\f3
.fl
% ls \-F
.fl
audio/ classes/ images/
.fl

.fl
% jar cvf bundle.jar audio classes images
.fl
added manifest
.fl
adding: audio/(in = 0) (out= 0)(stored 0%)
.fl
adding: audio/1.au(in = 2324) (out= 67)(deflated 97%)
.fl
adding: audio/2.au(in = 6970) (out= 90)(deflated 98%)
.fl
adding: audio/3.au(in = 11616) (out= 108)(deflated 99%)
.fl
adding: audio/spacemusic.au(in = 3079) (out= 73)(deflated 97%)
.fl
adding: classes/(in = 0) (out= 0)(stored 0%)
.fl
adding: classes/Animator.class(in = 2266) (out= 66)(deflated 97%)
.fl
adding: classes/Wave.class(in = 3778) (out= 81)(deflated 97%)
.fl
adding: images/(in = 0) (out= 0)(stored 0%)
.fl
adding: images/monkey.jpg(in = 7667) (out= 91)(deflated 98%)
.fl
adding: images/at_work.gif(in = 6621) (out= 89)(deflated 98%)
.fl

.fl
% ls \-F
.fl
audio/ bundle.jar classes/ images/
.fl
\fP
.fi

.LP
To peep tha entry names up in tha jarfile, use tha \f2t\fP option: 
.nf
\f3
.fl
% jar tf bundle.jar
.fl
META\-INF/
.fl
META\-INF/MANIFEST.MF
.fl
audio/1.au
.fl
audio/2.au
.fl
audio/3.au
.fl
audio/spacemusic.au
.fl
classes/Animator.class
.fl
classes/Wave.class
.fl
images/monkey.jpg
.fl
images/at_work.gif
.fl
\fP
.fi

.LP
.LP
To add a index file ta tha jar file fo' speedin up class loading, use tha \f2i\fP option.
.br
.br
Example:
.br

.LP
If you split tha inter\-dependent classes fo' a stock trade application tha fuck into three jar files: \f2main.jar\fP, \f2buy.jar\fP, n' \f2sell.jar\fP.
.br

.LP
.br

.LP
If you specify tha \f2Class\-path\fP attribute up in tha \f2main.jar\fP manifest as: 
.nf
\f3
.fl
Class\-Path: buy.jar sell.jar
.fl
\fP
.fi

.LP
then you can use tha \f2\-i\fP option ta speed up tha class loadin time fo' yo' application: 
.nf
\f3
.fl
% jar i main.jar
.fl
\fP
.fi

.LP
An \f2INDEX.LIST\fP file is banged ta tha \f2META\-INF\fP directory. This enablez tha application class loader ta downlizzle tha specified jar filez when it is searchin fo' classes or resources.  
.SH "SEE ALSO"
.LP
.LP
.na
\f2Da Jar Overview\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/guides/jar/jarGuide.html
.LP
.LP
.na
\f2Da Jar File Justification\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/guides/jar/jar.html
.LP
.LP
.na
\f2Da JarIndex Spec\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/guides/jar/jar.html#JAR_Index
.LP
.LP
.na
\f2Jar Tutorial\fP @
.fi
http://docs.oracle.com/javase/tutorial/deployment/jar/index.html
.LP
.LP
pack200(1)
.LP
 
