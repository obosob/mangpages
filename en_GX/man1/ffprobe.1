.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FFPROBE 1"
.TH FFPROBE 1 "2015-01-03" " " " "
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
ffprobe \- ffprobe media prober
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
ffprobe [\fIoptions\fR] [\fIinput_file\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ffprobe gathers shiznit from multimedia streams n' prints it in
human\- n' machine-readable fashion.
.PP
For example it can be used ta check tha format of tha container used
by a multimedia stream n' tha format n' type of each media stream
contained up in dat shit.
.PP
If a gangbangin' filename is specified up in input, ffprobe will try ta open and
probe tha file content. If tha file cannot be opened or recognized as
a multimedia file, a positizzle exit code is returned.
.PP
ffprobe may be employed both as a standalone application or in
combination wit a textual filter, which may big-ass up more
sophisticated processing, e.g. statistical processin or plotting.
.PP
Options is used ta list a shitload of tha formats supported by ffprobe or
for specifyin which shiznit ta display, n' fo' settin how
ffprobe will show dat shit.
.PP
ffprobe output is designed ta be easily parsable by a textual filter,
and consistz of one or mo' sectionz of a gangbangin' form defined by tha selected
writer, which is specified by tha \fBprint_format\fR option.
.PP
Sections may contain other nested sections, n' is identified by a
name (which may be shared by other sections), n' a unique
name. Right back up in yo muthafuckin ass. See tha output of \fBsections\fR.
.PP
Metadata tags stored up in tha container or up in tha streams is recognized
and printed up in tha correspondin \*(L"\s-1FORMAT\*(R", \*(L"STREAM\*(R"\s0 or \*(L"\s-1PROGRAM_STREAM\*(R"\s0
section.
.SH "OPTIONS"
.IX Header "OPTIONS"
All tha numerical options, if not specified otherwise, accept a string
representin a number as input, which may be followed by one of tha \s-1SI\s0
unit prefixes, fo' example: 'K', 'M', or 'G'.
.PP
If 'i' be appended ta tha \s-1SI\s0 unit prefix, tha complete prefix will be
interpreted as a unit prefix fo' binary multiplies, which is based on
powerz of 1024 instead of powerz of 1000 fo' realz. Appendin 'B' ta tha \s-1SI\s0 unit
prefix multiplies tha value by 8. This allows using, fo' example:
\&'\s-1KB\s0', 'MiB', 'G' n' 'B' as number suffixes.
.PP
Options which do not take arguments is boolean options, n' set the
correspondin value ta true. They can be set ta false by prefixing
the option name wit \*(L"no\*(R". For example rockin \*(L"\-nofoo\*(R"
will set tha boolean option wit name \*(L"foo\*(R" ta false.
.SS "Stream specifiers"
.IX Subsection "Stream specifiers"
Some options is applied per-stream, e.g. bitrate or codec. Right back up in yo muthafuckin ass. Stream specifiers
are used ta precisely specify which stream(s) a given option belongs to.
.PP
A stream specifier be a strang generally appended ta tha option name and
separated from it by a cold-ass lil colon. I aint talkin' bout chicken n' gravy biatch. E.g. \f(CW\*(C`\-codec:a:1 ac3\*(C'\fR gotz nuff the
\&\f(CW\*(C`a:1\*(C'\fR stream specifier, which matches tha second audio stream. Therefore, it
would select tha ac3 codec fo' tha second audio stream.
.PP
A stream specifier can match nuff muthafuckin streams, so dat tha option be applied ta all
of em. E.g. tha stream specifier up in \f(CW\*(C`\-b:a 128k\*(C'\fR matches all audio
streams.
.PP
An empty stream specifier matches all streams. For example, \f(CW\*(C`\-codec copy\*(C'\fR
or \f(CW\*(C`\-codec: copy\*(C'\fR would copy all tha streams without reencoding.
.PP
Possible formz of stream specifiers are:
.IP "\fIstream_index\fR" 4
.IX Item "stream_index"
Matches tha stream wit dis index. E.g. \f(CW\*(C`\-threads:1 4\*(C'\fR would set the
thread count fo' tha second stream ta 4.
.IP "\fIstream_type\fR\fB[:\fR\fIstream_index\fR\fB]\fR" 4
.IX Item "stream_type[:stream_index]"
\&\fIstream_type\fR is one of following: 'v' fo' vizzle, 'a' fo' audio, 's' fo' subtitle,
\&'d' fo' data, n' 't' fo' attachments, n' you can put dat on yo' toast. If \fIstream_index\fR is given, then it matches
stream number \fIstream_index\fR of dis type. Otherwise, it matches all
streamz of dis type.
.IP "\fBp:\fR\fIprogram_id\fR\fB[:\fR\fIstream_index\fR\fB]\fR" 4
.IX Item "p:program_id[:stream_index]"
If \fIstream_index\fR is given, then it matches tha stream wit number \fIstream_index\fR
in tha program wit tha id \fIprogram_id\fR. Otherwise, it matches all streams up in the
program.
.IP "\fB#\fR\fIstream_id\fR" 4
.IX Item "#stream_id"
Matches tha stream by a gangbangin' format-specific \s-1ID.\s0
.SS "Generic options"
.IX Subsection "Generic options"
These options is shared amongst tha ff* tools.
.IP "\fB\-L\fR" 4
.IX Item "-L"
Show license.
.IP "\fB\-h, \-?, \-help, \-\-help [\fR\fIarg\fR\fB]\fR" 4
.IX Item "-h, -?, -help, --help [arg]"
Show help fo' realz. An optionizzle parameta may be specified ta print help on some specific
item. If no argument is specified, only basic (non advanced) tool
options is shown.
.Sp
Possible jointz of \fIarg\fR are:
.RS 4
.IP "\fBlong\fR" 4
.IX Item "long"
Print advanced tool options up in addizzle ta tha basic tool options.
.IP "\fBfull\fR" 4
.IX Item "full"
Print complete list of options, includin shared n' private options
for encoders, decoders, demuxers, muxers, filters, etc.
.IP "\fBdecoder=\fR\fIdecoder_name\fR" 4
.IX Item "decoder=decoder_name"
Print detailed shiznit bout tha decoder named \fIdecoder_name\fR. Use the
\&\fB\-decoders\fR option ta git a list of all decoders.
.IP "\fBencoder=\fR\fIencoder_name\fR" 4
.IX Item "encoder=encoder_name"
Print detailed shiznit bout tha encoder named \fIencoder_name\fR. Use the
\&\fB\-encoders\fR option ta git a list of all encoders.
.IP "\fBdemuxer=\fR\fIdemuxer_name\fR" 4
.IX Item "demuxer=demuxer_name"
Print detailed shiznit bout tha demuxer named \fIdemuxer_name\fR. Use the
\&\fB\-formats\fR option ta git a list of all demuxers n' muxers.
.IP "\fBmuxer=\fR\fImuxer_name\fR" 4
.IX Item "muxer=muxer_name"
Print detailed shiznit bout tha muxer named \fImuxer_name\fR. Use the
\&\fB\-formats\fR option ta git a list of all muxers n' demuxers.
.IP "\fBfilter=\fR\fIfilter_name\fR" 4
.IX Item "filter=filter_name"
Print detailed shiznit bout tha filta name \fIfilter_name\fR. Use the
\&\fB\-filters\fR option ta git a list of all filters.
.RE
.RS 4
.RE
.IP "\fB\-version\fR" 4
.IX Item "-version"
Show version.
.IP "\fB\-formats\fR" 4
.IX Item "-formats"
Show available formats.
.IP "\fB\-codecs\fR" 4
.IX Item "-codecs"
Show all codecs known ta libavcodec.
.Sp
Note dat tha term 'codec' is used all up in dis documentation as a gangbangin' finger-lickin' dirty-ass shortcut
for what tha fuck is mo' erectly called a media bitstream format.
.IP "\fB\-decoders\fR" 4
.IX Item "-decoders"
Show available decoders.
.IP "\fB\-encoders\fR" 4
.IX Item "-encoders"
Show all available encoders.
.IP "\fB\-bsfs\fR" 4
.IX Item "-bsfs"
Show available bitstream filters.
.IP "\fB\-protocols\fR" 4
.IX Item "-protocols"
Show available protocols.
.IP "\fB\-filters\fR" 4
.IX Item "-filters"
Show available libavfilta filters.
.IP "\fB\-pix_fmts\fR" 4
.IX Item "-pix_fmts"
Show available pixel formats.
.IP "\fB\-sample_fmts\fR" 4
.IX Item "-sample_fmts"
Show available sample formats.
.IP "\fB\-layouts\fR" 4
.IX Item "-layouts"
Show channel names n' standard channel layouts.
.IP "\fB\-colors\fR" 4
.IX Item "-colors"
Show recognized color names.
.IP "\fB\-loglevel [repeat+]\fR\fIloglevel\fR \fB| \-v [repeat+]\fR\fIloglevel\fR" 4
.IX Item "-loglevel [repeat+]loglevel | -v [repeat+]loglevel"
Set tha loggin level used by tha library.
Addin \*(L"repeat+\*(R" indicates dat repeated log output should not be compressed
to tha straight-up original gangsta line n' tha \*(L"Last message repeated n times\*(R" line will be
omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. \*(L"repeat\*(R" can also be used ridin' solo.
If \*(L"repeat\*(R" is used alone, n' wit no prior loglevel set, tha default
loglevel is ghon be used. Y'all KNOW dat shit, muthafucka! If multiple loglevel parametas is given, using
\&'repeat' aint gonna chizzle tha loglevel.
\&\fIloglevel\fR be a number or a strang containin one of tha followin joints:
.RS 4
.IP "\fBquiet\fR" 4
.IX Item "quiet"
Show not a god damn thang at all; be silent.
.IP "\fBpanic\fR" 4
.IX Item "panic"
Only show fatal errors which could lead tha process ta crash, such as
and assert failure. This aint currently used fo' anything.
.IP "\fBfatal\fR" 4
.IX Item "fatal"
Only show fatal errors. These is errors afta which tha process straight-up
cannot continue after.
.IP "\fBerror\fR" 4
.IX Item "error"
Show all errors, includin ones which can be recovered from.
.IP "\fBwarning\fR" 4
.IX Item "warning"
Show all warnings n' errors fo' realz. Any message related ta possibly
incorrect or unexpected events is ghon be shown.
.IP "\fBinfo\fR" 4
.IX Item "info"
Show informatizzle lyrics durin processing. This is up in addizzle to
warnings n' errors. This is tha default value.
.IP "\fBverbose\fR" 4
.IX Item "verbose"
Same as \f(CW\*(C`info\*(C'\fR, except mo' verbose.
.IP "\fBdebug\fR" 4
.IX Item "debug"
Show every last muthafuckin thang, includin debuggin shiznit.
.RE
.RS 4
.Sp
By default tha program logs ta stderr, if colorin is supported by the
terminal, flavas is used ta mark errors n' warnings. Log coloring
can be disabled settin tha environment variable
\&\fB\s-1AV_LOG_FORCE_NOCOLOR\s0\fR or \fB\s-1NO_COLOR\s0\fR, or can be forced setting
the environment variable \fB\s-1AV_LOG_FORCE_COLOR\s0\fR.
Da use of tha environment variable \fB\s-1NO_COLOR\s0\fR is deprecated and
will be dropped up in a gangbangin' followin FFmpeg version.
.RE
.IP "\fB\-report\fR" 4
.IX Item "-report"
Dump full command line n' console output ta a gangbangin' file named
\&\f(CW\*(C`\f(CIprogram\f(CW\-\f(CIYYYYMMDD\f(CW\-\f(CIHHMMSS\f(CW.log\*(C'\fR up in tha current
directory.
This file can be useful fo' bug reports.
It also implies \f(CW\*(C`\-loglevel verbose\*(C'\fR.
.Sp
Settin tha environment variable \f(CW\*(C`FFREPORT\*(C'\fR ta any value has the
same effect. If tha value be a ':'\-separated key=value sequence, these
options will affect tha report; options joints must be escaped if they
contain special charactas or tha options delimita ':' (see the
``Quotin n' escaping'' section up in tha ffmpeg-utils manual). The
followin option is recognized:
.RS 4
.IP "\fBfile\fR" 4
.IX Item "file"
set tha file name ta use fo' tha report; \f(CW%p\fR is expanded ta tha name
of tha program, \f(CW%t\fR is expanded ta a timestamp, \f(CW\*(C`%%\*(C'\fR is expanded
to a plain \f(CW\*(C`%\*(C'\fR
.RE
.RS 4
.Sp
Errors up in parsin tha environment variable is not fatal, n' will not
appear up in tha report.
.RE
.IP "\fB\-cpuflags flags (\fR\fIglobal\fR\fB)\fR" 4
.IX Item "-cpuflags flags (global)"
Allows settin n' clearin cpu flags. This option is intended
for testing. Do not use it unless you know what tha fuck you bustin.
.Sp
.Vb 3
\&        ffmpeg \-cpuflags \-sse+mmx ...
\&        ffmpeg \-cpuflags mmx ...
\&        ffmpeg \-cpuflags 0 ...
.Ve
.Sp
Possible flags fo' dis option are:
.RS 4
.IP "\fBx86\fR" 4
.IX Item "x86"
.RS 4
.PD 0
.IP "\fBmmx\fR" 4
.IX Item "mmx"
.IP "\fBmmxext\fR" 4
.IX Item "mmxext"
.IP "\fBsse\fR" 4
.IX Item "sse"
.IP "\fBsse2\fR" 4
.IX Item "sse2"
.IP "\fBsse2slow\fR" 4
.IX Item "sse2slow"
.IP "\fBsse3\fR" 4
.IX Item "sse3"
.IP "\fBsse3slow\fR" 4
.IX Item "sse3slow"
.IP "\fBssse3\fR" 4
.IX Item "ssse3"
.IP "\fBatom\fR" 4
.IX Item "atom"
.IP "\fBsse4.1\fR" 4
.IX Item "sse4.1"
.IP "\fBsse4.2\fR" 4
.IX Item "sse4.2"
.IP "\fBavx\fR" 4
.IX Item "avx"
.IP "\fBxop\fR" 4
.IX Item "xop"
.IP "\fBfma4\fR" 4
.IX Item "fma4"
.IP "\fB3dnow\fR" 4
.IX Item "3dnow"
.IP "\fB3dnowext\fR" 4
.IX Item "3dnowext"
.IP "\fBcmov\fR" 4
.IX Item "cmov"
.RE
.RS 4
.RE
.IP "\fB\s-1ARM\s0\fR" 4
.IX Item "ARM"
.RS 4
.IP "\fBarmv5te\fR" 4
.IX Item "armv5te"
.IP "\fBarmv6\fR" 4
.IX Item "armv6"
.IP "\fBarmv6t2\fR" 4
.IX Item "armv6t2"
.IP "\fBvfp\fR" 4
.IX Item "vfp"
.IP "\fBvfpv3\fR" 4
.IX Item "vfpv3"
.IP "\fBneon\fR" 4
.IX Item "neon"
.RE
.RS 4
.RE
.IP "\fBPowerPC\fR" 4
.IX Item "PowerPC"
.RS 4
.IP "\fBaltivec\fR" 4
.IX Item "altivec"
.RE
.RS 4
.RE
.IP "\fBSpecific Processors\fR" 4
.IX Item "Specific Processors"
.RS 4
.IP "\fBpentium2\fR" 4
.IX Item "pentium2"
.IP "\fBpentium3\fR" 4
.IX Item "pentium3"
.IP "\fBpentium4\fR" 4
.IX Item "pentium4"
.IP "\fBk6\fR" 4
.IX Item "k6"
.IP "\fBk62\fR" 4
.IX Item "k62"
.IP "\fBathlon\fR" 4
.IX Item "athlon"
.IP "\fBathlonxp\fR" 4
.IX Item "athlonxp"
.IP "\fBk8\fR" 4
.IX Item "k8"
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.IP "\fB\-opencl_options options (\fR\fIglobal\fR\fB)\fR" 4
.IX Item "-opencl_options options (global)"
.PD
Set OpenCL environment options. This option is only available when
FFmpeg has been compiled wit \f(CW\*(C`\-\-enable\-opencl\*(C'\fR.
.Sp
\&\fIoptions\fR must be a list of \fIkey\fR=\fIvalue\fR option pairs
separated by ':'. Right back up in yo muthafuckin ass. See tha ``OpenCL Options'' section up in the
ffmpeg-utils manual fo' tha list of supported options.
.SS "AVOptions"
.IX Subsection "AVOptions"
These options is provided directly by tha libavformat, libavdevice and
libavcodec libraries. Put ya muthafuckin choppers up if ya feel dis! To peep tha list of available AVOptions, use the
\&\fB\-help\fR option. I aint talkin' bout chicken n' gravy biatch. They is separated tha fuck into two categories:
.IP "\fBgeneric\fR" 4
.IX Item "generic"
These options can be set fo' any container, codec or device. Generic options
are listed under AVFormatContext options fo' containers/devices n' under
AVCodecContext options fo' codecs.
.IP "\fBprivate\fR" 4
.IX Item "private"
These options is specific ta tha given container, thang or codec. Private
options is listed under they correspondin containers/devices/codecs.
.PP
For example ta write a ID3v2.3 header instead of a thugged-out default ID3v2.4 to
an \s-1MP3\s0 file, use tha \fBid3v2_version\fR private option of tha \s-1MP3\s0
muxer:
.PP
.Vb 1
\&        ffmpeg \-i input.flac \-id3v2_version 3 out.mp3
.Ve
.PP
All codec AVOptions is per-stream, n' thus a stream specifier
should be attached ta em.
.PP
Note: tha \fB\-nooption\fR syntax cannot be used fo' boolean
AVOptions, use \fB\-option 0\fR/\fB\-option 1\fR.
.PP
Note: tha oldschool undocumented way of specifyin per-stream AVOptions by
prependin v/a/s ta tha options name is now obsolete n' will be
removed soon.
.SS "Main options"
.IX Subsection "Main options"
.IP "\fB\-f\fR \fIformat\fR" 4
.IX Item "-f format"
Force format ta use.
.IP "\fB\-unit\fR" 4
.IX Item "-unit"
Show tha unit of tha displayed joints.
.IP "\fB\-prefix\fR" 4
.IX Item "-prefix"
Use \s-1SI\s0 prefixes fo' tha displayed joints.
Unless tha \*(L"\-byte_binary_prefix\*(R" option is used all tha prefixes
are decimal.
.IP "\fB\-byte_binary_prefix\fR" 4
.IX Item "-byte_binary_prefix"
Force tha use of binary prefixes fo' byte joints.
.IP "\fB\-sexagesimal\fR" 4
.IX Item "-sexagesimal"
Use sexagesimal format \s-1HH:MM:SS.MICROSECONDS\s0 fo' time joints.
.IP "\fB\-pretty\fR" 4
.IX Item "-pretty"
Prettify tha format of tha displayed joints, it correspondz ta the
options \*(L"\-unit \-prefix \-byte_binary_prefix \-sexagesimal\*(R".
.IP "\fB\-of, \-print_format\fR \fIwriter_name\fR\fB[=\fR\fIwriter_options\fR\fB]\fR" 4
.IX Item "-of, -print_format writer_name[=writer_options]"
Set tha output printin format.
.Sp
\&\fIwriter_name\fR specifies tha name of tha writer, and
\&\fIwriter_options\fR specifies tha options ta be passed ta tha writer.
.Sp
For example fo' printin tha output up in \s-1JSON\s0 format, specify:
.Sp
.Vb 1
\&        \-print_format json
.Ve
.Sp
For mo' details on tha available output printin formats, peep the
Writas section below.
.IP "\fB\-sections\fR" 4
.IX Item "-sections"
Print sections structure n' section shiznit, n' exit. Da output
is not meant ta be parsed by a machine.
.IP "\fB\-select_streams\fR \fIstream_specifier\fR" 4
.IX Item "-select_streams stream_specifier"
Select only tha streams specified by \fIstream_specifier\fR. This
option affects only tha options related ta streams
(e.g. \f(CW\*(C`show_streams\*(C'\fR, \f(CW\*(C`show_packets\*(C'\fR, etc.).
.Sp
For example ta show only audio streams, you can use tha command:
.Sp
.Vb 1
\&        ffprobe \-show_streams \-select_streams a INPUT
.Ve
.Sp
To show only vizzle packets belongin ta tha vizzle stream wit index 1:
.Sp
.Vb 1
\&        ffprobe \-show_packets \-select_streams v:1 INPUT
.Ve
.IP "\fB\-show_data\fR" 4
.IX Item "-show_data"
Show payload data, as a hexadecimal n' \s-1ASCII\s0 dump. Coupled with
\&\fB\-show_packets\fR, it will dump tha packets' data. Coupled with
\&\fB\-show_streams\fR, it will dump tha codec extradata.
.Sp
Da dump is printed as tha \*(L"data\*(R" field. Y'all KNOW dat shit, muthafucka! Well shiiiit, it may contain newlines.
.IP "\fB\-show_error\fR" 4
.IX Item "-show_error"
Show shiznit bout tha error found when tryin ta probe tha input.
.Sp
Da error shiznit is printed within a section wit name \*(L"\s-1ERROR\*(R".\s0
.IP "\fB\-show_format\fR" 4
.IX Item "-show_format"
Show shiznit bout tha container format of tha input multimedia
stream.
.Sp
All tha container format shiznit is printed within a section with
name \*(L"\s-1FORMAT\*(R".\s0
.IP "\fB\-show_format_entry\fR \fIname\fR" 4
.IX Item "-show_format_entry name"
Like \fB\-show_format\fR yo, but only prints tha specified entry of the
container format shiznit, rather than all. This option may be given more
than once, then all specified entries is ghon be shown.
.Sp
This option is deprecated, use \f(CW\*(C`show_entries\*(C'\fR instead.
.IP "\fB\-show_entries\fR \fIsection_entries\fR" 4
.IX Item "-show_entries section_entries"
Set list of entries ta show.
.Sp
Entries is specified accordin ta tha following
syntax. \fIsection_entries\fR gotz nuff a list of section entries
separated by \f(CW\*(C`:\*(C'\fR. Each section entry is composed by a section
name (or unique name), optionally followed by a list of entries local
to dat section, separated by \f(CW\*(C`,\*(C'\fR.
.Sp
If section name is specified but is followed by no \f(CW\*(C`=\*(C'\fR, all
entries is printed ta output, together wit all tha contained
sections. Otherwise only tha entries specified up in tha local section
entries list is printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. In particular, if \f(CW\*(C`=\*(C'\fR is specified but
the list of local entries is empty, then no entries is ghon be shown for
that section.
.Sp
Note dat tha order of justification of tha local section entries is
not honored up in tha output, n' tha usual display order will be
retained.
.Sp
Da formal syntax is given by:
.Sp
.Vb 3
\&        <LOCAL_SECTION_ENTRIES> ::= <SECTION_ENTRY_NAME>[,<LOCAL_SECTION_ENTRIES>]
\&        <SECTION_ENTRY>         ::= <SECTION_NAME>[=[<LOCAL_SECTION_ENTRIES>]]
\&        <SECTION_ENTRIES>       ::= <SECTION_ENTRY>[:<SECTION_ENTRIES>]
.Ve
.Sp
For example, ta show only tha index n' type of each stream, n' tha \s-1PTS\s0
time, duration time, n' stream index of tha packets, you can specify
the argument:
.Sp
.Vb 1
\&        packet=pts_time,duration_time,stream_index : stream=index,codec_type
.Ve
.Sp
To show all tha entries up in tha section \*(L"format\*(R" yo, but only tha codec
type up in tha section \*(L"stream\*(R", specify tha argument:
.Sp
.Vb 1
\&        format : stream=codec_type
.Ve
.Sp
To show all tha tags up in tha stream n' format sections:
.Sp
.Vb 1
\&        format_tags : format_tags
.Ve
.Sp
To show only tha \f(CW\*(C`title\*(C'\fR tag (if available) up in tha stream
sections:
.Sp
.Vb 1
\&        stream_tags=title
.Ve
.IP "\fB\-show_packets\fR" 4
.IX Item "-show_packets"
Show shiznit bout each packet contained up in tha input multimedia
stream.
.Sp
Da shiznit fo' each single packet is printed within a thugged-out dedicated
section wit name \*(L"\s-1PACKET\*(R".\s0
.IP "\fB\-show_frames\fR" 4
.IX Item "-show_frames"
Show shiznit bout each frame contained up in tha input multimedia
stream.
.Sp
Da shiznit fo' each single frame is printed within a thugged-out dedicated
section wit name \*(L"\s-1FRAME\*(R".\s0
.IP "\fB\-show_streams\fR" 4
.IX Item "-show_streams"
Show shiznit bout each media stream contained up in tha input
multimedia stream.
.Sp
Each media stream shiznit is printed within a thugged-out dedicated section
with name \*(L"\s-1STREAM\*(R".\s0
.IP "\fB\-show_programs\fR" 4
.IX Item "-show_programs"
Show shiznit bout programs n' they streams contained up in tha input
multimedia stream.
.Sp
Each media stream shiznit is printed within a thugged-out dedicated section
with name \*(L"\s-1PROGRAM_STREAM\*(R".\s0
.IP "\fB\-show_chapters\fR" 4
.IX Item "-show_chapters"
Show shiznit bout chaptas stored up in tha format.
.Sp
Each chapta is printed within a thugged-out dedicated section wit name \*(L"\s-1CHAPTER\*(R".\s0
.IP "\fB\-count_frames\fR" 4
.IX Item "-count_frames"
Count tha number of frames per stream n' report it up in the
correspondin stream section.
.IP "\fB\-count_packets\fR" 4
.IX Item "-count_packets"
Count tha number of packets per stream n' report it up in the
correspondin stream section.
.IP "\fB\-read_intervals\fR \fIread_intervals\fR" 4
.IX Item "-read_intervals read_intervals"
Read only tha specified intervals. \fIread_intervals\fR must be a
sequence of interval justifications separated by \*(L",\*(R".
\&\fBffprobe\fR will seek ta tha interval startin point, n' will
continue readin from dis shit.
.Sp
Each interval is specified by two optionizzle parts, separated by \*(L"%\*(R".
.Sp
Da first part specifies tha interval start position. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it is
interpreted as a abolute position, or as a relatizzle offset from the
current posizzle if it is preceded by tha \*(L"+\*(R" character n' shit. If dis first
part aint specified, no seekin is ghon be performed when readin this
interval.
.Sp
Da second part specifies tha interval end position. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it is interpreted
as a absolute position, or as a relatizzle offset from tha current
posizzle if it is preceded by tha \*(L"+\*(R" character n' shit. If tha offset
specification starts wit \*(L"#\*(R", it is interpreted as tha number of
packets ta read (not includin tha flushin packets) from tha interval
start. If no second part is specified, tha program will read until the
end of tha input.
.Sp
Note dat seekin aint accurate, thus tha actual interval start
point may be different from tha specified position. I aint talkin' bout chicken n' gravy biatch fo' realz. Also, when an
interval duration is specified, tha absolute end time is ghon be computed
by addin tha duration ta tha interval start point found by seeking
the file, rather than ta tha specified start value.
.Sp
Da formal syntax is given by:
.Sp
.Vb 2
\&        <INTERVAL>  ::= [<START>|+<START_OFFSET>][%[<END>|+<END_OFFSET>]]
\&        <INTERVALS> ::= <INTERVAL>[,<INTERVALS>]
.Ve
.Sp
A few examplez follow.
.RS 4
.IP "\(bu" 4
Seek ta time 10, read packets until 20 secondz afta tha found seek
point, then seek ta posizzle \f(CW\*(C`01:30\*(C'\fR (1 minute n' thirty
seconds) n' read packets until posizzle \f(CW\*(C`01:45\*(C'\fR.
.Sp
.Vb 1
\&        10%+20,01:30%01:45
.Ve
.IP "\(bu" 4
Read only 42 packets afta seekin ta posizzle \f(CW\*(C`01:23\*(C'\fR:
.Sp
.Vb 1
\&        01:23%+#42
.Ve
.IP "\(bu" 4
Read only tha straight-up original gangsta 20 secondz from tha start:
.Sp
.Vb 1
\&        %+20
.Ve
.IP "\(bu" 4
Read from tha start until posizzle \f(CW\*(C`02:30\*(C'\fR:
.Sp
.Vb 1
\&        %02:30
.Ve
.RE
.RS 4
.RE
.IP "\fB\-show_private_data, \-private\fR" 4
.IX Item "-show_private_data, -private"
Show private data, dat is data dependin on tha format of the
particular shown element.
This option is enabled by default yo, but you may need ta disable it
for specific uses, fo' example when bustin XSD-compliant \s-1XML\s0 output.
.IP "\fB\-show_program_version\fR" 4
.IX Item "-show_program_version"
Show shiznit related ta program version.
.Sp
Version shiznit is printed within a section wit name
\&\*(L"\s-1PROGRAM_VERSION\*(R".\s0
.IP "\fB\-show_library_versions\fR" 4
.IX Item "-show_library_versions"
Show shiznit related ta library versions.
.Sp
Version shiznit fo' each library is printed within a section with
name \*(L"\s-1LIBRARY_VERSION\*(R".\s0
.IP "\fB\-show_versions\fR" 4
.IX Item "-show_versions"
Show shiznit related ta program n' library versions. This is the
equivalent of settin both \fB\-show_program_version\fR and
\&\fB\-show_library_versions\fR options.
.IP "\fB\-bitexact\fR" 4
.IX Item "-bitexact"
Force bitexact output, useful ta produce output which aint dependent
on tha specific build.
.IP "\fB\-i\fR \fIinput_file\fR" 4
.IX Item "-i input_file"
Read \fIinput_file\fR.
.SH "WRITERS"
.IX Header "WRITERS"
A writa defines tha output format adopted by \fBffprobe\fR, n' will be
used fo' printin all tha partz of tha output.
.PP
A writa may accept one or mo' arguments, which specify tha options
to adopt. Da options is specified as a list of \fIkey\fR=\fIvalue\fR
pairs, separated by \*(L":\*(R".
.PP
A description of tha currently available writas bigs up.
.SS "default"
.IX Subsection "default"
Default format.
.PP
Print each section up in tha form:
.PP
.Vb 5
\&        [SECTION]
\&        key1=val1
\&        ...
\&        keyN=valN
\&        [/SECTION]
.Ve
.PP
Metadata tags is printed as a line up in tha correspondin \s-1FORMAT, STREAM\s0 or
\&\s-1PROGRAM_STREAM\s0 section, n' is prefixed by tha strang \*(L"\s-1TAG:\*(R".\s0
.PP
A description of tha accepted options bigs up.
.IP "\fBnokey, nk\fR" 4
.IX Item "nokey, nk"
If set ta 1 specify not ta print tha key of each field. Y'all KNOW dat shit, muthafucka! Default value
is 0.
.IP "\fBnoprint_wrappers, nw\fR" 4
.IX Item "noprint_wrappers, nw"
If set ta 1 specify not ta print tha section header n' footer.
Default value is 0.
.SS "compact, csv"
.IX Subsection "compact, csv"
Compact n' \s-1CSV\s0 format.
.PP
Da \f(CW\*(C`csv\*(C'\fR writa is equivalent ta \f(CW\*(C`compact\*(C'\fR yo, but supports
different defaults.
.PP
Each section is printed on a single line.
If no option is specifid, tha output has tha form:
.PP
.Vb 1
\&        section|key1=val1| ... |keyN=valN
.Ve
.PP
Metadata tags is printed up in tha correspondin \*(L"format\*(R" or \*(L"stream\*(R"
section. I aint talkin' bout chicken n' gravy biatch fo' realz. A metadata tag key, if printed, is prefixed by tha string
\&\*(L"tag:\*(R".
.PP
Da description of tha accepted options bigs up.
.IP "\fBitem_sep, s\fR" 4
.IX Item "item_sep, s"
Specify tha characta ta use fo' separatin fieldz up in tha output line.
It must be a single printable character, it is \*(L"|\*(R" by default (\*(L",\*(R" for
the \f(CW\*(C`csv\*(C'\fR writer).
.IP "\fBnokey, nk\fR" 4
.IX Item "nokey, nk"
If set ta 1 specify not ta print tha key of each field. Y'all KNOW dat shit, muthafucka! Its default
value is 0 (1 fo' tha \f(CW\*(C`csv\*(C'\fR writer).
.IP "\fBescape, e\fR" 4
.IX Item "escape, e"
Set tha escape mode ta use, default ta \*(L"c\*(R" (\*(L"csv\*(R" fo' tha \f(CW\*(C`csv\*(C'\fR
writer).
.Sp
It can assume one of tha followin joints:
.RS 4
.IP "\fBc\fR" 4
.IX Item "c"
Perform C\-like escaping. Right back up in yo muthafuckin ass. Strings containin a newline ('\en'), carriage
return ('\er'), a tab ('\et'), a gangbangin' form feed ('\ef'), tha escaping
characta ('\e') or tha item separator characta \fI\s-1SEP\s0\fR is escaped rockin C\-like fashioned
escaping, so dat a newline is converted ta tha sequence \*(L"\en\*(R", a
carriage return ta \*(L"\er\*(R", '\e' ta \*(L"\e\e\*(R" n' tha separator \fI\s-1SEP\s0\fR is
converted ta "\e\fI\s-1SEP\s0\fR".
.IP "\fBcsv\fR" 4
.IX Item "csv"
Perform CSV-like escaping, as busted lyrics bout up in \s-1RFC4180. \s0 Strings
containin a newline ('\en'), a cold-ass lil carriage return ('\er'), a thugged-out double quote
('"'), or \fI\s-1SEP\s0\fR is enclosed up in double-quotes.
.IP "\fBnone\fR" 4
.IX Item "none"
Perform no escaping.
.RE
.RS 4
.RE
.IP "\fBprint_section, p\fR" 4
.IX Item "print_section, p"
Print tha section name all up in tha begin of each line if tha value is
\&\f(CW1\fR, disable it wit value set ta \f(CW0\fR. Default value is
\&\f(CW1\fR.
.SS "flat"
.IX Subsection "flat"
Flat format.
.PP
A free-form output where each line gotz nuff a explicit key=value, such as
\&\*(L"streams.stream.3.tags.foo=bar\*(R". Da output is shell escaped, so it can be
directly embedded up in sh scripts as long as tha separator characta be an
alphanumeric characta or a underscore (see \fIsep_char\fR option).
.PP
Da description of tha accepted options bigs up.
.IP "\fBsep_char, s\fR" 4
.IX Item "sep_char, s"
Separator characta used ta separate tha chapter, tha section name, IDs and
potential tags up in tha printed field key.
.Sp
Default value is '.'.
.IP "\fBhierarchical, h\fR" 4
.IX Item "hierarchical, h"
Specify if tha section name justification should be hierarchical. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. If
set ta 1, n' if there is mo' than one section up in tha current
chapter, tha section name is ghon be prefixed by tha name of the
chapter n' shiznit fo' realz. A value of 0 will disable dis behavior.
.Sp
Default value is 1.
.SS "ini"
.IX Subsection "ini"
\&\s-1INI\s0 format output.
.PP
Print output up in a \s-1INI\s0 based format.
.PP
Da followin conventions is adopted:
.IP "\(bu" 4
all key n' joints is \s-1UTF\-8\s0
.IP "\(bu" 4
\&'.' is tha subgroup separator
.IP "\(bu" 4
newline, '\et', '\ef', '\eb' n' tha followin charactas is escaped
.IP "\(bu" 4
\&'\e' is tha escape character
.IP "\(bu" 4
\&'#' is tha comment indicator
.IP "\(bu" 4
\&'=' is tha key/value separator
.IP "\(bu" 4
\&':' aint used but probably parsed as key/value separator
.PP
This writa accepts options as a list of \fIkey\fR=\fIvalue\fR pairs,
separated by \*(L":\*(R".
.PP
Da description of tha accepted options bigs up.
.IP "\fBhierarchical, h\fR" 4
.IX Item "hierarchical, h"
Specify if tha section name justification should be hierarchical. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. If
set ta 1, n' if there is mo' than one section up in tha current
chapter, tha section name is ghon be prefixed by tha name of the
chapter n' shiznit fo' realz. A value of 0 will disable dis behavior.
.Sp
Default value is 1.
.SS "json"
.IX Subsection "json"
\&\s-1JSON\s0 based format.
.PP
Each section is printed rockin \s-1JSON\s0 notation.
.PP
Da description of tha accepted options bigs up.
.IP "\fBcompact, c\fR" 4
.IX Item "compact, c"
If set ta 1 enable compact output, dat is each section will be
printed on a single line. Default value is 0.
.PP
For mo' shiznit bout \s-1JSON,\s0 peep <\fBhttp://www.json.org/\fR>.
.SS "xml"
.IX Subsection "xml"
\&\s-1XML\s0 based format.
.PP
Da \s-1XML\s0 output is busted lyrics bout up in tha \s-1XML\s0 schema description file
\&\fIffprobe.xsd\fR installed up in tha FFmpeg datadir.
.PP
An updated version of tha schema can be retrieved all up in tha url
<\fBhttp://www.ffmpeg.org/schema/ffprobe.xsd\fR>, which redirects ta the
latest schema committed tha fuck into tha FFmpeg pimpment source code tree.
.PP
Note dat tha output issued is ghon be compliant ta the
\&\fIffprobe.xsd\fR schema only when no special global output options
(\fBunit\fR, \fBprefix\fR, \fBbyte_binary_prefix\fR,
\&\fBsexagesimal\fR etc.) is specified.
.PP
Da description of tha accepted options bigs up.
.IP "\fBfully_qualified, q\fR" 4
.IX Item "fully_qualified, q"
If set ta 1 specify if tha output should be straight-up qualified. Y'all KNOW dat shit, muthafucka! Default
value is 0.
This is required fo' generatin a \s-1XML\s0 file which can be validated
all up in a \s-1XSD\s0 file.
.IP "\fBxsd_compliant, x\fR" 4
.IX Item "xsd_compliant, x"
If set ta 1 big-ass up mo' checks fo' ensurin dat tha output is \s-1XSD\s0
compliant. Default value is 0.
This option automatically sets \fBfully_qualified\fR ta 1.
.PP
For mo' shiznit bout tha \s-1XML\s0 format, see
<\fBhttp://www.w3.org/XML/\fR>.
.SH "TIMECODE"
.IX Header "TIMECODE"
\&\fBffprobe\fR supports Timecode extraction:
.IP "\(bu" 4
\&\s-1MPEG1/2\s0 timecode is extracted from tha \s-1GOP,\s0 n' be available up in tha vizzle
stream details (\fB\-show_streams\fR, peep \fItimecode\fR).
.IP "\(bu" 4
\&\s-1MOV\s0 timecode is extracted from tmcd track, so be available up in tha tmcd
stream metadata (\fB\-show_streams\fR, peep \fITAG:timecode\fR).
.IP "\(bu" 4
\&\s-1DV, GXF\s0 n' \s-1AVI\s0 timecodes is available up in format metadata
(\fB\-show_format\fR, peep \fITAG:timecode\fR).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIffprobe\-all\fR\|(1),
\&\fIffmpeg\fR\|(1), \fIffplay\fR\|(1), \fIffserver\fR\|(1),
\&\fIffmpeg\-utils\fR\|(1), \fIffmpeg\-scaler\fR\|(1), \fIffmpeg\-resampler\fR\|(1),
\&\fIffmpeg\-codecs\fR\|(1), \fIffmpeg\-bitstream\-filters\fR\|(1), \fIffmpeg\-formats\fR\|(1),
\&\fIffmpeg\-devices\fR\|(1), \fIffmpeg\-protocols\fR\|(1), \fIffmpeg\-filters\fR\|(1)
.SH "AUTHORS"
.IX Header "AUTHORS"
Da FFmpeg pimpers.
.PP
For details bout tha authorship, peep tha Git history of tha project
(git://source.ffmpeg.org/ffmpeg), e.g. by typin tha command
\&\fBgit log\fR up in tha FFmpeg source directory, or browsin the
online repository at <\fBhttp://source.ffmpeg.org\fR>.
.PP
Maintainers fo' tha specific components is listed up in tha file
\&\fI\s-1MAINTAINERS\s0\fR up in tha source code tree.
