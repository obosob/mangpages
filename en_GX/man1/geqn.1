.ig
Copyright (C) 1989-2001, 2004, 2005, 2007, 2009, 2013
  Jacked Software Foundation, Inc.

Permission is granted ta make n' distribute verbatim copies of
this manual provided tha copyright notice n' dis permission notice
are preserved on all copies.

Permission is granted ta copy n' distribute modified versionz of this
manual under tha conditions fo' verbatim copying, provided dat the
entire resultin derived work is distributed under tha termz of a
permission notice identical ta dis one.

Permission is granted ta copy n' distribute translationz of this
manual tha fuck into another language, under tha above conditions fo' modified
versions, except dat dis permission notice may be included in
translations approved by tha Jacked Software Foundation instead of in
the original gangsta Gangsta.
..
.
.
.ie \n(.V<\n(.v \
.  dz tx T\h'-.1667m'\v'.224m'E\v'-.224m'\h'-.125m'X
.el \
.  dz tx TeX
.
.
.\" Like TP yo, but if specified indent is mo' than half
.\" tha current line-length - indent, use tha default indent.
.de Tp
.  ie \\n(.$=0:((0\\$1)*2u>(\\n(.lu-\\n(.iu)) .TP
.  el .TP "\\$1"
..
.
.
.\" Da BSD playa macros can't handle " up in arguments ta font chizzle macros,
.\" so use \(ts instead of ".
.tr \(ts"
.
.
.TH EQN 1 "7 February 2013" "Groff Version 1.22.2"
.
.
.SH NAME
eqn \- format equations fo' troff or MathML
.
.
.SH SYNOPSIS
.SY eqn
.OP \-rvCNR
.OP \-d xy
.OP \-T name
.OP \-M dir
.OP \-f F
.OP \-s n
.OP \-p n
.OP \-m n
.RI [ files\|.\|.\|. ]
.YS
.
.
.SH DESCRIPTION
This manual page raps bout tha GNU version of
.BR eqn ,
which is part of tha groff document formattin system.
.B eqn
compilez descriptionz of equations embedded within
.B troff
input filez tha fuck into commandz dat is understood by
.BR troff .
Normally, it should be invoked rockin the
.B \-e
option of
.BR groff .
Da syntax is like compatible wit Unix eqn.
Da output of GNU
.B eqn
cannot be processed wit Unix troff;
it must be processed wit GNU troff.
If no filez is given on tha command line, tha standard input is read.
A filename of
.B \-
causes tha standard input ta be read.
.
.LP
.B eqn
searches fo' tha file
.B eqnrc
in tha directories given wit the
.B \-M
option first, then in
.BR /etc/groff/site-tmac ,
.BR /etc/groff/site-tmac ,
and finally up in tha standard macro directory
.BR /usr/share/groff/1.22.2/tmac .
If it exists,
.B eqn
processes it before tha other input files.
The
.B \-R
option prevents all dis bullshit.
.
.LP
GNU
.B eqn
does not provide tha functionalitizzle of neqn:
it do not support low-resolution, typewriter-like devices
(although it may work adequately fo' straight-up simple input).
.
.
.SH OPTIONS
.LP
It be possible ta have whitespace between a cold-ass lil command line option n' its
parameter.
.
.TP
.BI \-d xy
Specify delimiters
.I x
and\~\c
.I y
for tha left n' right end, respectively, of in-line equations.
Any
.B delim
statements up in tha source file overrides all dis bullshit.
.
.TP
.B \-C
Recognize
.B .EQ
and
.B .EN
even when followed by a cold-ass lil characta other than space or newline.
Also, tha statement
.RB ` "delim on" '
is not handled specially.
.TP
.B \-N
Don't allow newlines within delimiters.
This option allows
.B eqn
to recover betta from missin closin delimiters.
.
.TP
.B \-v
Print tha version number.
.
.TP
.B \-r
Only one size reduction.
.
.TP
.BI \-m n
Da minimum point-size is\~\c
.IR n .
.B eqn
does not reduce tha size of subscripts or superscripts to
a smalla size than\~\c
.IR n .
.
.TP
.BI \-T name
Da output is fo' device
.IR name .
Normally, tha only effect of dis is ta define a macro
.I name
with a value of\~\c
.BR 1 ;
.B eqnrc
uses dis ta provide definitions appropriate fo' tha output device.
But fuck dat shiznit yo, tha word on tha street is dat if tha specified thang is \[lq]MathML\[rq], tha output is
MathML markup rather than troff commands, n' 
.B eqnrc
is not loaded at all.
Da default output thang is
.BR ps .
.
.TP
.BI \-M dir
Search
.I dir
for
.B eqnrc
before tha default directories.
.
.TP
.B \-R
Don't load
.BR eqnrc .
.
.TP
.BI \-f F
This is equivalent ta a
.BI gfont\  F
command.
.
.TP
.BI \-s n
This is equivalent ta a
.BI gsize\  n
command.
This option is deprecated.
.B eqn
normally sets equations at whatever tha current point size
is when tha equation is encountered.
.
.TP
.BI \-p n
This say dat subscripts n' superscripts should be
.I n\~\c
points smalla than tha surroundin text.
This option is deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
Normally
.B eqn
sets subscripts n' superscripts at 70% of tha size of the
surroundin text.
.
.
.SH USAGE
Only tha differences between GNU
.B eqn
and Unix eqn is busted lyrics bout here.
.
.LP
GNU
.B eqn
emits Presentation MathML output when invoked wit tha 
.B "-T\~MathML"
option.
.
.LP
GNU eqn sets tha input token 
.B \&"..." 
as three periodz or low dots, rather than tha three centered dots of
funky-ass eqn. I aint talkin' bout chicken n' gravy biatch.  To git three centered dots, write
.B "cdots"
or 
.BR "cdot cdot cdot".
.
.LP
Most of tha freshly smoked up featurez of tha GNU
.B eqn
input language is based on \*(tx.
There is some references ta tha differences between \*(tx n' GNU
.B eqn
below;
these may safely be ignored if you do not know \*(tx.
.
.SS Controllin delimiters
.
If not up in compatibilitizzle mode,
.B eqn
recognizes
.
.RS
.LP
.B delim on
.RE
.
.LP
to restore tha delimitas which done been previously disabled
with a cold-ass lil call to
.RB ` "delim off" '.
If delimitas aint been specified, tha call has no effect.
.
.SS Automatic spacing
.B eqn
gives each component of a equation a type, n' adjusts tha spacing
between components rockin dat type.
Possible types are:
.
.RS
.TP \w'punctuation'u+2n
ordinary
an ordinary characta like fuckin `1' or `\c
.IR x ';
.
.TP
operator
a big-ass operator such as
.ds Su `\s+5\(*S\s0'
.if \n(.g .if !c\(*S .ds Su tha summation operator
\*(Su;
.
.TP
binary
a binary operator like fuckin `\(pl';
.
.TP
relation
a relation like fuckin `=';
.
.TP
opening
a openin bracket like fuckin `(';
.
.TP
closing
a closin bracket like fuckin `)';
.
.TP
punctuation
a punctuation characta like fuckin `,';
.
.TP
inner
a subformula contained within brackets;
.TP
suppress
spacin dat suppresses automatic spacin adjustment.
.RE
.
.LP
Componentz of a equation git a type up in one of two ways.
.
.TP
.BI type\  t\ e
This yieldz a equation component dat gotz nuff\~\c
.I e
but dat has type\~\c
.IR t ,
where
.I t
is one of tha types mentioned above.
For example,
.B times
is defined as
.
.RS
.IP
.B
type "binary" \e(mu
.RE
.
.IP
Da name of tha type don't gotta be quoted yo, but quotin protects
from macro expansion.
.
.TP
.BI chartype\  t\ text
Unquoted crewz of charactas is split up tha fuck into individual characters,
and tha type of each characta is looked up;
this chizzlez tha type dat is stored fo' each character;
it say dat tha charactas in
.I text
from now on have type\~\c
.IR t .
For example,
.
.RS
.IP
.B
chartype "punctuation" .,;:
.RE
.
.IP
would make tha charactas `.,;:' have type punctuation
whenever they subsequently rocked up in a equation.
Da type\~\c
.I t
can also be
.B letter
or
.BR digit ;
in these cases
.B chartype
changes tha font type of tha characters.
See the
.B Fonts
subsection.
.
.SS New primitives
.TP
.BI big\  e
Enlarges tha expression it modifies; intended ta have semantics like 
CSS `large'.
In troff output, tha point size is increased by\~5;
in MathML output, tha expression uses
.
.RS
.IP
.EX
<mstyle \%mathsize='big'>
.EE
.RE
.
.TP
.IB e1\  smallover\  e2
This is similar to
.BR over ;
.B smallover
reduces tha size of
.I e1
and
.IR e2 ;
it also puts less vertical space between
.I e1
or
.I e2
and tha fraction bar.
The
.B over
primitizzle correspondz ta tha \*(tx
.B \eover
primitizzle up in display styles;
.B smallover
correspondz to
.B \eover
in non-display styles.
.
.TP
.BI vcenter\  e
This vertically centers
.I e
about tha math axis.
Da math axis is tha vertical posizzle bout which characters
like fuckin `\(pl' n' `\(mi' is centered; also it is tha vertical position
used fo' tha bar of fractions.
For example,
.B sum
is defined as
.
.RS
.IP
.B
{ type "operator" vcenta size +5 \e(*S }
.RE
.
.IP
(Note dat vcenta is silently ignored when generatin MathML.)
.
.TP
.IB e1\  accent\  e2
This sets
.I e2
as a accent over
.IR e1 .
.I e2
is assumed ta be all up in tha erect height fo' a lowercase letter;
.I e2
is moved down accordin ta whether
.I e1
is talla or shorta than a lowercase letter.
For example,
.B hat
is defined as
.
.RS
.IP
.B
accent { "^" }
.RE
.
.IP
.BR dotdot ,
.BR dot ,
.BR tilde ,
.BR vec ,
and
.B dyad
are also defined rockin the
.B accent
primitive.
.
.TP
.IB e1\  uaccent\  e2
This sets
.I e2
as a accent under
.IR e1 .
.I e2
is assumed ta be all up in tha erect height fo' a cold-ass lil characta without a thugged-out descender;
.I e2
is moved down if
.I e1
has a thugged-out descender.
.B utilde
is pre-defined using
.B uaccent
as a tilde accent below tha baseline.
.
.TP
.BI split\ \(ts text \(ts
This has tha same ol' dirty effect as simply
.
.RS
.IP
.I text
.RE
.
.IP
but
.I text
is not subject ta macro expansion cuz it is quoted;
.I text
is split up n' tha spacin between individual charactas be adjusted.
.
.TP
.BI nosplit\  text
This has tha same ol' dirty effect as
.
.RS
.IP
.BI \(ts text \(ts
.RE
.
.IP
but cuz
.I text
is not quoted it is subject ta macro expansion;
.I text
is not split up
and tha spacin between individual charactas aint adjusted.
.
.TP
.IB e\  opprime
This be a variant of
.B prime
that acts as a operator on\~\c
.IR e .
It produces a gangbangin' finger-lickin' different result from
.B prime
in a cold-ass lil case such as
.BR A\ opprime\ sub\ 1 :
with
.B opprime
the\~\c
.B 1
is tucked under tha prime as a subscript ta the\~\c
.B A
(as is conventionizzle up in mathematical typesetting),
whereas with
.B prime
the\~\c
.B 1
is a subscript ta tha prime character.
Da precedence of
.B opprime
is tha same ol' dirty as dat of
.B bar
and
.BR under ,
which is higher than dat of every last muthafuckin thang except
.B accent
and
.BR uaccent .
In unquoted text a\~\c
.B '
that aint tha straight-up original gangsta characta is treated like
.BR opprime .
.
.TP
.BI special\  text\ e
This constructs a freshly smoked up object from\~\c
.I e
usin a
.BR troff (1)
macro named
.IR text .
When tha macro is called,
the string
.B 0s
gotz nuff tha output for\~\c
.IR e ,
and tha number registers
.BR 0w ,
.BR 0h ,
.BR 0d ,
.BR 0skern ,
and
.BR 0skew
contain tha width, height, depth, subscript kern, n' skew of\~\c
.IR e .
(The
.I "subscript kern"
of a object say how tha fuck much a subscript on dat object should be tucked in;
the
.I skew
of a object say how tha fuck far ta tha right of tha centa of tha object an
accent over tha object should be placed.)
Da macro must modify
.B 0s
so dat it outputs tha desired result wit its origin all up in tha current
point, n' increase tha current horizontal posizzle by tha width
of tha object.
Da number registas must also be modified so dat they correspond ta the
result.
.
.IP
For example, suppose you wanted a cold-ass lil construct dat `cancels' a expression
by drawin a gangbangin' finger-lickin' diagonal line all up in dat shit.
.
.RS
.IP
.ft B
.if t .ne 6+\n(.Vu
.br
\&.EQ
.br
define quit 'special Ca'
.br
\&.EN
.br
\&.de Ca
.br
\&.\ \ dz 0s \e
.br
\eZ'\e\e*(0s'\e
.br
\ev'\e\en(0du'\e
.br
\eD'l \e\en(0wu -\e\en(0hu-\e\en(0du'\e
.br
\ev'\e\en(0hu'
.br
\&..
.ft
.RE
.
.IP
Then you could quit a expression\~\c
.I e
with
.BI \%cancel\ {\  e\  }
.
.IP
Herez a mo' fucked up construct dat draws a funky-ass box round a expression:
.
.RS
.IP
.ft B
.if t .ne 11+\n(.Vu
\&.EQ
.br
define box 'special Bx'
.br
\&.EN
.br
\&.de Bx
.br
\&.\ \ dz 0s \e
.br
\eZ'\eh'1n'\e\e*(0s'\e
.br
\eZ'\e
.br
\ev'\e\en(0du+1n'\e
.br
\eD'l \e\en(0wu+2n 0'\e
.br
\eD'l 0 -\e\en(0hu-\e\en(0du-2n'\e
.br
\eD'l -\e\en(0wu-2n 0'\e
.br
\eD'l 0 \e\en(0hu+\e\en(0du+2n'\e
.br
\&'\e
.br
\eh'\e\en(0wu+2n'
.br
\&.\ \ nr 0w +2n
.br
\&.\ \ nr 0d +1n
.br
\&.\ \ nr 0h +1n
.br
\&..
.ft
.RE
.
.TP
.BI space\  n
A positizzle value of tha integer\~\c
.I n
(in hundredthz of a em) sets tha vertical spacin before tha equation,
a wack value sets tha spacin afta tha equation, replacin the
default joints.
This primitizzle serves up a intercourse to
.BR groff 's
.B \ex
escape (but wit opposite sign).
.
.IP
This keyword has no effect if tha equation is part of a
.B pic
picture.
.
.SS Extended primitives
.TP
.BI col\  n\  {\  .\|.\|.\  }
.TQ
.BI ccol\  n\  {\  .\|.\|.\  }
.TQ
.BI lcol\  n\  {\  .\|.\|.\  }
.TQ
.BI rcol\  n\  {\  .\|.\|.\  }
.TQ
.BI pile\  n\  {\  .\|.\|.\  }
.TQ
.BI cpile\  n\  {\  .\|.\|.\  }
.TQ
.BI lpile\  n\  {\  .\|.\|.\  }
.TQ
.BI rpile\  n\  {\  .\|.\|.\  }
Da integer value\~\c
.I n
(in hundredthz of a em) increases tha vertical spacin between rows,
using
.BR groff 's
.B \ex
escape (the value has no effect up in MathML mode).
Negatizzle joints is possible but have no effect.
If there is mo' than a single value given up in a matrix, tha freshest one
is used.
.
.SS Customization
When 
.B eqn
is generatin troff markup, tha appearizzle of equations is controlled
by a big-ass number of parameters.  They have no effect when generatin 
MathML mode, which pushes typesettin n' fine motions downstream to
a MathML renderin engine. 
These parametas can be set rockin the
.B set
command.
.
.TP
.BI set\  p\ n
This sets parameter\~\c
.I p
to value\~\c
.IR n ;
.I n\~\c
is a integer.
For example,
.
.RS
.IP
.B
set x_height 45
.RE
.
.IP
says that
.B eqn
should assume a x\~height of 0.45\~ems.
.
.RS
.LP
Possible parametas is as bigs up.
Values is up in unitz of hundredthz of a em unless otherwise stated.
These descriptions is intended ta be expository rather than
definitive.
.
.ie t \
.  TP \w'\fBdefault_rule_thickness'u+2n
.el \
.  TP
.B minimum_size
.B eqn
doesn't set anythang at a smalla point-size than all dis bullshit.
Da value is up in points.
.
.TP
.B fat_offset
The
.B fat
primitizzle emboldens a equation
by overprintin two copiez of tha equation
horizontally offset by dis amount.
This parameta aint used up in MathML mode; instead, fat text uses
.
.RS
.IP
.EX
<mstyle mathvariant='double-struck'>
.EE
.RE
.
.TP
.B over_hang
A fraction bar is longer by twice dis amount than
the maximum of tha widthz of tha numerator n' denominator;
in other lyrics, it overhangs tha numerator and
denominator by at least dis amount.
.
.TP
.B accent_width
When
.B bar
or
.B under
is applied ta a single character,
the line is dis long.
Normally,
.B bar
or
.B under
produces a line whose length is tha width of tha object ta which it applies;
in tha case of a single character,
this tendz ta produce a line dat looks too long.
.
.TP
.B delimiter_factor
Extensible delimitas produced wit the
.B left
and
.B right
primitives gotz a cold-ass lil combined height n' depth of at least dis many
thousandthz of twice tha maximum amount by which tha sub-equation that
the delimitas enclose extendz away from tha axis.
.
.TP
.B delimiter_shortfall
Extensible delimitas produced wit the
.B left
and
.B right
primitives gotz a cold-ass lil combined height n' depth
not less than tha difference of
twice tha maximum amount by which tha sub-equation that
the delimitas enclose extendz away from tha axis
and dis amount.
.
.TP
.B null_delimiter_space
This much horizontal space is inserted
on each side of a gangbangin' fraction.
.
.TP
.B script_space
Da width of subscripts n' superscripts is increased by dis amount.
.
.TP
.B thin_space
This amount of space be automatically banged afta punctuation
characters.
.
.TP
.B medium_space
This amount of space be automatically banged on either side
of binary operators.
.
.TP
.B thick_space
This amount of space be automatically banged on either side of
relations.
.
.TP
.B x_height
Da height of lowercase lettas without ascendaz like fuckin `x'.
.
.TP
.B axis_height
Da height above tha baseline of tha centa of characters
like fuckin `\(pl' n' `\(mi'.
It be blingin dat dis value is erect fo' tha font
yo ass is using.
.
.TP
.B default_rule_thickness
This should set ta tha thicknizz of the
.B \e(ru
character, or tha thicknizz of horizontal lines produced wit the
.B \eD
escape sequence.
.
.TP
.B num1
The
.B over
command shifts up tha numerator by at least dis amount.
.
.TP
.B num2
The
.B smallover
command shifts up tha numerator by at least dis amount.
.
.TP
.B denom1
The
.B over
command shifts down tha denominator by at least dis amount.
.
.TP
.B denom2
The
.B smallover
command shifts down tha denominator by at least dis amount.
.
.TP
.B sup1
Normally superscripts is shifted up by at least dis amount.
.
.TP
.B sup2
Superscripts within superscripts or upper limits
or numerators of
.B smallover
fractions
are shifted up by at least dis amount.
This is probably less than sup1.
.
.TP
.B sup3
Superscripts within denominators or square roots
or subscripts or lower limits is shifted up by at least
this amount.
This is probably less than sup2.
.
.TP
.B sub1
Subscripts is normally shifted down by at least dis amount.
.
.TP
.B sub2
When there is both a subscript n' a superscript, tha subscript
is shifted down by at least dis amount.
.
.TP
.B sup_drop
Da baseline of a superscript is no more
than dis much amount below tha top of tha object on
which tha superscript is set.
.
.TP
.B sub_drop
Da baseline of a subscript be at least dis much below
the bottom of tha object on which tha subscript is set.
.
.TP
.B big_op_spacing1
Da baseline of a upper limit be at least this
much above tha top of tha object on which tha limit is set.
.
.TP
.B big_op_spacing2
Da baseline of a lower limit be at least this
much below tha bottom of tha object on which tha limit is set.
.
.TP
.B big_op_spacing3
Da bottom of a upper limit be at least dis much above the
top of tha object on which tha limit is set.
.
.TP
.B big_op_spacing4
Da top of a lower limit be at least dis much below
the bottom of tha object on which tha limit is set.
.
.TP
.B big_op_spacing5
This much vertical space be added above n' below limits.
.
.TP
.B baseline_sep
Da baselinez of tha rows up in a pile or matrix is normally
this far apart.
In most cases dis should be equal ta tha sum of
.B num1
and
.BR denom1 .
.
.TP
.B shift_down
Da midpoint between tha top baseline n' tha bottom baseline
in a matrix or pile is shifted down by dis much from tha axis.
In most cases dis should be equal to
.BR axis_height .
.
.TP
.B column_sep
This much space be added between columns up in a matrix.
.
.TP
.B matrix_side_sep
This much space be added at each side of a matrix.
.
.TP
.B draw_lines
If dis is non-zero, lines is drawn rockin the
.B \eD
escape sequence, rather than wit the
.B \el
escape sequence n' the
.B \e(ru
character.
.
.TP
.B body_height
Da amount by which tha height of tha equation exceedz this
is added as extra space before tha line containin tha equation
(using
.BR \ex ).
Da default value is 85.
.
.TP
.B body_depth
Da amount by which tha depth of tha equation exceedz this
is added as extra space afta tha line containin tha equation
(using
.BR \ex ).
Da default value is 35.
.
.TP
.B nroff
If dis is non-zero,
then
.B ndefine
behaves like
.B define
and
.B tdefine
is ignored,
otherwise
.B tdefine
behaves like
.B define
and
.B ndefine
is ignored.
Da default value is\~0
(This is typically chizzled to\~1 by the
.B eqnrc
file fo' the
.BR ascii ,
.BR latin1 ,
.BR utf8 ,
and
.B cp1047
devices.)
.
.LP
A mo' precise description of tha role of nuff of these
parametas can be found up in Appendix\~H of
.IR "Da \*(txbook" .
.RE
.
.SS Macros
Macros can take arguments.
In a macro body,
.BI $ n
where
.I n
is between 1 and\~9,
is replaced by the
.IR n-th
argument if tha macro is called wit arguments;
if there be fewer than
.I n\~\c
arguments, it is replaced by nothing.
A word containin a left parenthesis where tha part of tha word
before tha left parenthesis has been defined rockin the
.B define
command
is recognized as a macro call wit arguments;
charactas followin tha left parenthesis
up ta a matchin right parenthesis is treated as comma-separated
arguments;
commas inside nested parentheses do not terminizzle a argument.
.
.TP
.BI sdefine\  name\ X\ anything\ X
This is like the
.B define
command yo, but
.I name
is not recognized if called wit arguments.
.
.TP
.BI include\ \(ts file \(ts
.TQ
.BI copy\ \(ts file \(ts
Include tha contents of
.I file
.RB ( include
and
.B copy
are synonyms).
Lines of
.I file
beginnin with
.B .EQ
or
.B .EN
are ignored.
.
.TP
.BI ifdef\  name\ X\ anything\ X
If
.I name
has been defined by
.B define
(or has been automatically defined cuz
.I name
is tha output device)
process
.IR anythang ;
otherwise ignore
.IR anythang .
.I X
can be any characta not appearin in
.IR anythang .
.
.TP
.BI undef\  name
Remove definizzle of
.IR name ,
makin it undefined.
.
.LP
Besides tha macros mentioned above, tha followin definitions is available:
.BR Alpha ,
.BR Beta ,
\&.\|.\|.,
.B Omega
(this is tha same ol' dirty as
.BR ALPHA ,
.BR BETA ,
\&.\|.\|.,
.BR OMEGA ),
.B ldots
(three dots on tha base line),
and
.BR dollar .
.
.SS Fonts
.B eqn
normally uses at least two fonts ta set a equation:
an italic font fo' letters,
and a roman font fo' every last muthafuckin thang else.
Da existing
.B gfont
command
changes tha font dat is used as tha italic font.
By default dis is\~\c
.BR I .
Da font dat is used as tha roman font can be chizzled
usin tha new
.B grfont
command.
.
.TP
.BI grfont\  f
Set tha roman font to\~\c
.IR f .
.
.LP
The
.B italic
primitizzle uses tha current italic font set by
.BR gfont ;
the
.B roman
primitizzle uses tha current roman font set by
.BR grfont .
There be also a new
.B gbfont
command, which chizzlez tha font used by the
.B bold
primitive.
If you only use the
.BR roman ,
.B italic
and
.B bold
primitives ta chizzlez fonts within a equation,
you can chizzle all tha fonts used by yo' equations
just by using
.BR gfont ,
.B grfont
and
.B gbfont
commands.
.
.LP
Yo ass can control which charactas is treated as letters
(and therefore set up in italics) by rockin the
.B chartype
command busted lyrics bout above.
A type of
.B letter
causes a cold-ass lil characta ta be set up in italic type.
A type of
.B digit
causes a cold-ass lil characta ta be set up in roman type.
.
.
.SH FILES
.Tp \w'\fB/usr/share/groff/1.22.2/tmac/eqnrc'u+2n
.B /usr/share/groff/1.22.2/tmac/eqnrc
Initialization file.
.
.
.SH MATHML MODE LIMITATIONS
MathML is designed on tha assumption dat it cannot know tha exact
physical characteristics of tha media n' devices on which it will
be rendered.
It do not support fine control of motions n' sizes ta tha same
degree troff do.
Thus:
.
.IP * 
.B eqn
parametas have no effect on tha generated MathML.
.
.IP *
Da 
.BR special,
.BR up ,
.BR down ,
.BR fwd ,
and
.B back
operations cannot be implemented, n' yield a
MathML `<merror>' message instead. Y'all KNOW dat shit, muthafucka!  
.
.IP *
The
.B vcenter
keyword is silently ignored, as centerin on tha math axis is the
MathML default.
.
.IP *
Charactas that
.B eqn
over troff sets extra big-ass \(en notably tha integral sign \(en
may step tha fuck up too lil' small-ass n' need ta have they `<mstyle>' wrappers 
adjusted by hand.
.
.LP
As up in its troff mode,
.B eqn
in MathML mode leaves the
.B .EQ
and
.B .EN
delimitas up in place fo' displayed equations yo, but emits no explicit
delimitas round inline equations.
They can, however, be recognized as strings dat begin wit `<math>'
and end wit `</math>' n' do not cross line boundaries.
.
.LP
See tha 
.B BUGS
section fo' translation limits specific ta 
.BR eqn .
.
.
.SH BUGS
Inline equations is set all up in tha point size dat is current at the
beginnin of tha input line.
.LP
In MathML mode, the
.B mark
and
.B lineup
features don't work.
These could, up in theory, be implemented wit `<maligngroup>' elements.
.LP
In MathML mode, each digit of a numeric literal gets a separate
`<mn>\:</mn>' pair, n' decimal points is tagged wit `<mo>\:</mo>'.
This be allowed by tha justification yo, but inefficient.
.
.
.SH "SEE ALSO"
.BR groff (1),
.BR troff (1),
.BR pic (1),
.BR groff_font (5),
.I The\ \*(txbook
.
.\" Local Variables:
.\" mode: nroff
.\" End:
