.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RSA 1"
.TH RSA 1 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
rsa \- RSA key processin tool
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBopenssl\fR \fBrsa\fR
[\fB\-inform PEM|NET|DER\fR]
[\fB\-outform PEM|NET|DER\fR]
[\fB\-in filename\fR]
[\fB\-passin arg\fR]
[\fB\-out filename\fR]
[\fB\-passout arg\fR]
[\fB\-sgckey\fR]
[\fB\-des\fR]
[\fB\-des3\fR]
[\fB\-idea\fR]
[\fB\-text\fR]
[\fB\-noout\fR]
[\fB\-modulus\fR]
[\fB\-check\fR]
[\fB\-pubin\fR]
[\fB\-pubout\fR]
[\fB\-engine id\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \fBrsa\fR command processes \s-1RSA\s0 keys. They can be converted between various
forms n' they components printed out. \fBNote\fR dis command uses the
traditionizzle SSLeay compatible format fo' private key encryption: newer
applications should use tha mo' secure PKCS#8 format rockin tha \fBpkcs8\fR
utility.
.SH "COMMAND OPTIONS"
.IX Header "COMMAND OPTIONS"
.IP "\fB\-inform DER|NET|PEM\fR" 4
.IX Item "-inform DER|NET|PEM"
This specifies tha input format. Da \fB\s-1DER\s0\fR option uses a \s-1ASN1 DER\s0 encoded
form compatible wit tha PKCS#1 RSAPrivateKey or SubjectPublicKeyInfo format.
Da \fB\s-1PEM\s0\fR form is tha default format: it consistz of tha \fB\s-1DER\s0\fR format base64
encoded wit additionizzle header n' foota lines. On input PKCS#8 format private
keys is also accepted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da \fB\s-1NET\s0\fR form be a gangbangin' format is busted lyrics bout up in tha \fB\s-1NOTES\s0\fR
section.
.IP "\fB\-outform DER|NET|PEM\fR" 4
.IX Item "-outform DER|NET|PEM"
This specifies tha output format, tha options have tha same meanin as tha 
\&\fB\-inform\fR option.
.IP "\fB\-in filename\fR" 4
.IX Item "-in filename"
This specifies tha input filename ta read a key from or standard input if this
option aint specified. Y'all KNOW dat shit, muthafucka! If tha key is encrypted a pass phrase will be
prompted for.
.IP "\fB\-passin arg\fR" 4
.IX Item "-passin arg"
the input file password source. For mo' shiznit bout tha format of \fBarg\fR
see tha \fB\s-1PASS PHRASE ARGUMENTS\s0\fR section up in \fIopenssl\fR\|(1).
.IP "\fB\-out filename\fR" 4
.IX Item "-out filename"
This specifies tha output filename ta write a key ta or standard output if this
option aint specified. Y'all KNOW dat shit, muthafucka! If any encryption options is set then a pass phrase
will be prompted for. Shiiit, dis aint no joke. Da output filename should \fBnot\fR be tha same as tha input
filename.
.IP "\fB\-passout password\fR" 4
.IX Item "-passout password"
the output file password source. For mo' shiznit bout tha format of \fBarg\fR
see tha \fB\s-1PASS PHRASE ARGUMENTS\s0\fR section up in \fIopenssl\fR\|(1).
.IP "\fB\-sgckey\fR" 4
.IX Item "-sgckey"
use tha modified \s-1NET\s0 algorithm used wit some versionz of Microsizzlez \s-1IIS\s0 n' \s-1SGC\s0
keys.
.IP "\fB\-des|\-des3|\-idea\fR" 4
.IX Item "-des|-des3|-idea"
These options encrypt tha private key wit tha \s-1DES,\s0 triple \s-1DES,\s0 or tha 
\&\s-1IDEA\s0 ciphers respectively before outputtin it fo' realz. A pass phrase is prompted for.
If none of these options is specified tha key is freestyled up in plain text. This
means dat rockin tha \fBrsa\fR utilitizzle ta read up in a encrypted key wit no
encryption option can be used ta remove tha pass phrase from a key, or by
settin tha encryption options it can be use ta add or chizzle tha pass phrase.
These options can only be used wit \s-1PEM\s0 format output files.
.IP "\fB\-text\fR" 4
.IX Item "-text"
prints up tha various hood or private key components in
plain text up in addizzle ta tha encoded version.
.IP "\fB\-noout\fR" 4
.IX Item "-noout"
this option prevents output of tha encoded version of tha key.
.IP "\fB\-modulus\fR" 4
.IX Item "-modulus"
this option prints up tha value of tha moduluz of tha key.
.IP "\fB\-check\fR" 4
.IX Item "-check"
this option checks tha consistency of a \s-1RSA\s0 private key.
.IP "\fB\-pubin\fR" 4
.IX Item "-pubin"
by default a private key is read from tha input file: wit this
option a hood key is read instead.
.IP "\fB\-pubout\fR" 4
.IX Item "-pubout"
by default a private key is output: wit dis option a public
key is ghon be output instead. Y'all KNOW dat shit, muthafucka! This option be automatically set if
the input be a hood key.
.IP "\fB\-engine id\fR" 4
.IX Item "-engine id"
specifyin a engine (by its unique \fBid\fR string) will cause \fBrsa\fR
to attempt ta obtain a gangbangin' functionizzle reference ta tha specified engine,
thus initialisin it if needed. Y'all KNOW dat shit, muthafucka! Da engine will then be set as tha default
for all available algorithms.
.SH "NOTES"
.IX Header "NOTES"
Da \s-1PEM\s0 private key format uses tha header n' foota lines:
.PP
.Vb 2
\& \-\-\-\-\-BEGIN RSA PRIVATE KEY\-\-\-\-\-
\& \-\-\-\-\-END RSA PRIVATE KEY\-\-\-\-\-
.Ve
.PP
Da \s-1PEM\s0 hood key format uses tha header n' foota lines:
.PP
.Vb 2
\& \-\-\-\-\-BEGIN PUBLIC KEY\-\-\-\-\-
\& \-\-\-\-\-END PUBLIC KEY\-\-\-\-\-
.Ve
.PP
Da \fB\s-1NET\s0\fR form be a gangbangin' format compatible wit olda Netscape servers
and Microsizzlez \s-1IIS \s0.key files, dis uses unsalted \s-1RC4\s0 fo' its encryption.
It aint straight-up secure n' so should only be used when necessary.
.PP
Some newer version of \s-1IIS\s0 have additionizzle data up in tha exported .key
files. To use these wit tha utility, view tha file wit a funky-ass binary editor
and look fo' tha strang \*(L"private-key\*(R", then trace back ta tha byte
sequence 0x30, 0x82 (this be a \s-1ASN1 SEQUENCE\s0). Copy all tha data
from dis point onwardz ta another file n' use dat as tha input
to tha \fBrsa\fR utilitizzle wit tha \fB\-inform \s-1NET\s0\fR option. I aint talkin' bout chicken n' gravy biatch. If you get
an error afta enterin tha password try tha \fB\-sgckey\fR option.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To remove tha pass phrase on a \s-1RSA\s0 private key:
.PP
.Vb 1
\& openssl rsa \-in key.pem \-out keyout.pem
.Ve
.PP
To encrypt a private key rockin triple \s-1DES:\s0
.PP
.Vb 1
\& openssl rsa \-in key.pem \-des3 \-out keyout.pem
.Ve
.PP
To convert a private key from \s-1PEM\s0 ta \s-1DER\s0 format:
.PP
.Vb 1
\& openssl rsa \-in key.pem \-outform DER \-out keyout.der
.Ve
.PP
To print up tha componentz of a private key ta standard output:
.PP
.Vb 1
\& openssl rsa \-in key.pem \-text \-noout
.Ve
.PP
To just output tha hood part of a private key:
.PP
.Vb 1
\& openssl rsa \-in key.pem \-pubout \-out pubkey.pem
.Ve
.SH "BUGS"
.IX Header "BUGS"
Da command line password arguments don't currently work with
\&\fB\s-1NET\s0\fR format.
.PP
There should be a option dat automatically handlez .key files,
without havin ta manually edit em.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIpkcs8\fR\|(1), \fIdsa\fR\|(1), \fIgenrsa\fR\|(1),
\&\fIgendsa\fR\|(1)
