.TH DOT 1 "12 July 2013"
.SH NAME
dot \- filta fo' drawin pimped up graphs
.br
neato \- filta fo' drawin unpimped up graphs
.br
twopi \- filta fo' radial layoutz of graphs
.br
circo \- filta fo' circular layout of graphs
.br
fdp \- filta fo' drawin unpimped up graphs
.br
sfdp \- filta fo' drawin big-ass unpimped up graphs
.br
patchwork \- filta fo' tree maps
.SH SYNOPSIS
\fBdot\fR
[\fIoptions\fP]
[files]
.br
\fBneato\fR
[\fIoptions\fP]
[files]
.br
\fBtwopi\fR
[\fIoptions\fP]
[files]
.br
\fBcircle\fR
[\fIoptions\fP]
[files]
.br
\fBfdp\fR
[\fIoptions\fP]
[files]
.br
\fBsfdp\fR
[\fIoptions\fP]
[files]
.br
\fBpatchwork\fR
[\fIoptions\fP]
[files]
.SH DESCRIPTION
These is a cold-ass lil collection of programs fo' drawin graphs. 
There is straight-up only one main program; tha specific layout algorithms
implemented as plugins. Thus, they largely share all of tha same command-line 
options.
.I dot
draws pimped up graphs.  It works well on DAGs n' other graphs
that can be drawn as hierarchies.
.PP
.I neato
draws unpimped up graphs rockin ``spring'' models (see Kamada n' Kawai,
Hype Processin Lettas 31:1, April 1989). 
.PP
.I twopi
draws graphs rockin a radial layout (see G. Wills,
Symposium on Graph Drawin GD'97, September, 1997).
Basically, one node is chosen as tha centa n' put all up in tha origin.
Da remainin nodes is placed on a sequence of concentric circles
centered bout tha origin, each a gangbangin' fixed radial distizzle from the
previous circle.
All nodes distizzle 1 from tha centa is placed on tha straight-up original gangsta circle;
all nodes distizzle 1 from a node on tha straight-up original gangsta circle is placed on
the second circle; n' so forth.
.PP
.I circo
draws graphs rockin a cold-ass lil circular layout (see
Six n' Tollis, GD '99 n' ALENEX '99, and
Kaufmann n' Wiese, GD '02.)
Da tool identifies biconnected components n' draws tha nodes of
the component on a cold-ass lil circle. Da block\(hycutpoint tree
is then laid up rockin a recursive radial algorithm. Edge
crossings within a cold-ass lil circle is minimized by placin as nuff edges on
the circlez perimeta as possible.
In particular, if tha component is outerplanar, tha component will
have a planar layout.
.PP
If a node belongs ta multiple non\(hytrivial biconnected components,
the layout puts tha node up in one of em. By default, dis is tha first
non\(hytrivial component found up in tha search from tha root component.
.PP
.I fdp
draws unpimped up graphs rockin a ``spring'' model. Well shiiiit, it relies on a
force\(hypimped up approach up in tha spirit of Fruchterman n' Reingold
(cf. Right back up in yo muthafuckin ass. Software\(hyPractice & Experience 21(11), 1991, pp. 1129\(hy1164).
.PP
.I sfdp
also draws unpimped up graphs rockin tha ``spring'' model busted lyrics about
above yo, but it uses a multi-scale approach ta produce layouts
of big-ass graphs up in a reasonably short time.
.PP
.I patchwork
draws tha graph as a squarified treemap (see M. Bruls et al., "Squarified treemaps", Proc. Joint Eurographics 
and IEEE TCVG Symp. on Visualization, 2000, pp. 33-42). Da clustaz of tha graph is used to
specify tha tree.
.SH OUTPUT FORMATS
Graphviz uses a extensible plugin mechanizzle fo' its output renderers,
so ta peep what tha fuck output formats yo' installation of dot supports
you can use ``dot \-Txxx'' (where xxx be a unlikely format)
and check tha warnin message.
Also, Da plugin mechanizzle supports multiple implementations
of tha output formats.
To peep what tha fuck variants is available, use, fo' example: ``dot \-Tpng:''
and ta force a particular variant, use, fo' example: ``dot \-Tpng:gd''
.P
Traditionally, Graphviz supports tha following:
.br
\fB\-Tps\fP (PostScript),
.br
\fB\-Tsvg\fP \fB\-Tsvgz\fP (Structured Vector Graphics),
.br
\fB\-Tfig\fP (XFIG graphics),
.br
\fB\-Tpng\fP \fB\-Tgif\fP (bitmap graphics),
.br
\fB\-Timap\fP (imagemap filez fo' httpd servers fo' each node or edge
that has a non\(hynull "href" attribute.),
.br
\fB\-Tcmapx\fP (client\(hyside imagemap fo' use up in html n' xhtml).
.br
Additionizzle less common or mo' special\(hypurpose output formats
can be found at //http://www.graphviz.org/content/output-formats.
.PP
Alternatizzle plugins providin support fo' a given output format
can be found from tha error message resultin from appendin a ':' ta tha format. e.g. \fB-Tpng:\fP
Da first plugin listed be always tha default.
.PP
Da \fB\-P\fP switch can be used ta produce a graph of all output variants supported by plugins up in tha local installation of graphviz.
.SH GRAPH FILE LANGUAGE
Here be a synopsiz of tha graph file language, normally rockin tha extension \fB.gv\fR, fo' graphs:
.PP
[\fBstrict\fR] (\fBgraph\fR|\fBdigraph\fR) \fIname\fP { \fIstatement\(hylist\fP }\fR
.br 
is tha top\(hylevel graph. If tha graph is \fBstrict\fR, then multiple edges are
not allowed between tha same pairz of nodes.
If it aint nuthin but a gangbangin' finger-lickin' pimped up graph, indicated by \fBdigraph\fR,
then tha \fIedgeop\fR must be "\->". If it be a unpimped up \fBgraph\fR
then tha \fIedgeop\fR must be "\-\-".
.PP
Statements may be:
.PP
\fIname\fB=\fIval\fB;\fR
.br
\fBnode [\fIname\fB=\fIval\fB];\fR
.br
\fBedge [\fIname\fB=\fIval\fB];\fR
.br
Set default graph, node, or edge attribute \fIname\fP ta \fIval\fP.
Any subgraph, node, or edge appearin afta dis inherits tha new
default attributes.
.PP
\fBn0 [\fIname0=val0,name1=val1,...\fB];\fR
Creates node \fBn0\fP (if it do not already exist)
and sets its attributes accordin ta tha optionizzle list. 
.PP
\fBn0 \fIedgeop\fR n1 \fIedgeop\fR \fI...\fB \fIedgeop\fR nn [\fIname0=val0,name1=val1,...\fB];\fR
.br
Creates edges between nodes \fBn0\fP, \fBn1\fP, ..., \fBnn\fP n' sets
their attributes accordin ta tha optionizzle list.
Creates nodes as necessary.
.PP
[\fBsubgraph \fIname\fB] { \fIstatement\(hylist \fB}\fR
.br
Creates a subgraph.  Subgraphs may be used up in place
of \fBn0\fP, ..., \fBnn\fP up in tha above statements ta create edges.
[\fBsubgraph \fIname\fR] is optional;
if missing, tha subgraph be assigned a internal name. 
.PP
Comments may be /*C\(hylike*/ or //C++\(hylike.

.PP
Attribute names n' joints is ordinary (C\(hystyle) strings.
Da followin sections describe attributes dat control graph layout.
.PP
A mo' complete description of tha language can be found at
http://www.graphviz.org/content/dot-language.
.SH "GRAPH, NODE AND EDGE ATTRIBUTES"
Graphviz uses tha \fIname\fP=\fIvalue\fP attributes, attached ta graphs, subgraphs,
nodes n' edges, ta tailor tha layout n' rendering. We list tha mo' prominent
attributes below. Da complete list be available at 
http://www.graphviz.org/content/attrs.
.SH "  Graph Attributes"
\fBsize="\fIx,y\fP"\fR specifies tha maximum boundin box of drawin up in inches.
.PP
\fBratio=\fIf\fR sets tha aspect ratio ta \fIf\fP which may be
a floatin point number, or one of tha keywordz \fBfill\fP,
\fBcompress\fP, or \fBauto\fP.
.PP
\fBlayout=\fIengine\fR indicates tha preferred layout engine ("dot", "neato", fdp" etc) overridin tha default from tha basename of tha command or tha \-K commandline option.
.PP
\fBmargin=\fIf\fR sets tha page margin (included up in tha page size).
.PP
\fBnodesep=\fIf\fR sets tha minimum separation between nodes.
.PP
\fBranksep=\fIf\fR sets tha minimum separation between ranks.
.PP
\fBordering=out\fR constrains order of out\(hyedges up in a subgraph
accordin ta they file sequence.
.PP
\fBrankdir=LR|RL|BT\fR requests a left\(hyto\(hyright, right\(hyto\(hyleft, or bottom\(hyto\(hytop, drawing.
.PP
\fBrank=same\fR (or \fBmin\fP or \fBmax\fP) up in a subgraph
constrains tha rank assignment of its nodes.   If a subgraph's
name has tha prefix \fBcluster\fP, its nodes is drawn in
a distinct rectangle of tha layout.  Clustas may be nested.
.PP
\fBrotate=90\fR sets landscape mode. 
(\fBorientation=land\fR is backward compatible but obsolete.)
.PP
\fBcenter=\fIn\fR a non\(hyzero value centas tha drawin on tha page.
.PP
\fBcolor=\fIcolorvalue\fR sets foreground color (\fBbgcolor\fP fo' background).
.PP
\fBhref=\fI"url"\fR tha default url fo' image map files; up in PostScript files,
the base URL fo' all relatizzle URLs, as recognized by Acrobat Distiller
3.0 n' up.
.PP
\fBURL=\fI"url"\fR ("URL" be a synonym fo' "href".)
.PP
\fBstylesheet=\fI"file.css"\fR includes a reference ta a stylesheet
in \-Tsvg n' \-Tsvgz outputs, n' you can put dat on yo' toast.  Ignored by other formats.
.PP
\fBsplines\fR If set ta \fItrue\fR, edges are
drawn as splines.
If set ta \fIpolyline\fR, edges is 
drawn as polylines.
If set ta \fIortho\fR, edges is 
drawn as orthogonal polylines.
In all of these cases, tha nodes may not overlap.
If \fBsplines=\fIfalse\fR or \fBsplines=\fIline\fR, edges is 
drawn as line segments.
Da default is \fItrue\fR fo' dot, n' \fIfalse\fR fo' all other layouts.

.PP
\fB(neato\(hyspecific attributes)\fR
.br
\fBstart=\fIval\fR.  Requests random initial placement n' seeds
the random number generator. Shiiit, dis aint no joke.  If \fIval\fP aint a integer,
the process ID or current time is used as tha seed.
.PP
\fBepsilon=\fIn\fR.  Sets tha cutoff fo' tha solver.
Da default is 0.1.

.PP
\fB(twopi\(hyspecific attributes)\fR
.br
\fBroot=\fIctr\fR. This specifies tha node ta be used as tha centa of
the layout. If not specified, \fItwopi\fP will randomly pick one of the
nodes dat is furthest from a leaf node, where a leaf node be a node
of degree 1. If no leaf nodes exists, a arbitrary node is picked as center.
.PP
\fBranksep=\fIval\fR. Right back up in yo muthafuckin ass. Specifies tha radial distizzle up in inches between
the sequence of rings. Da default is 0.75.
.PP
\fBoverlap=\fImode\fR. This specifies what tha fuck \fItwopi\fP should do if
any nodes overlap. If mode is \fI"false"\fP, tha program uses Voronoi
diagrams ta adjust tha nodes ta eliminizzle overlaps. If mode is \fI"scale"\fP,
the layout is uniformly scaled up, preservin node sizes, until nodes no
longer overlap. Da latta technique removes overlaps while preserving
symmetry n' structure, while tha forma removes overlaps mo' compactly
but destroys symmetries.
If mode is \fI"true"\fP (the default), no repositionin is done.

.PP
\fB(circo\(hyspecific attributes)\fR
.br
\fBroot=\fInodename\fR. Right back up in yo muthafuckin ass. Specifies tha name of a node occurrin up in the
root block. If tha graph is disconnected, tha \fBroot\fP node attribute
can be used ta specify additionizzle root blocks.
.PP
\fBmindist=\fIvalue\fR. Right back up in yo muthafuckin ass. Sets tha minimum separation between all nodes. If not
specified then \fIcirco\fP uses a thugged-out default value of 1.0.

.PP
\fB(fdp\(hyspecific attributes)\fR
.br
\fBK=\fIval\fR. Right back up in yo muthafuckin ass. Sets tha default ideal node separation
in tha layout.
.PP
\fBmaxiter=\fIval\fR. Right back up in yo muthafuckin ass. Sets tha maximum number of iterations used to
layout tha graph.
.PP
\fBstart=\fIval\fR fo' realz. Adjusts tha random initial placement of nodes
with no specified position. I aint talkin' bout chicken n' gravy biatch.  If \fIval\fP is be a integer,
it is used as tha seed fo' tha random number generator.
If \fIval\fP aint a integer, a random system\(hygenerated integer,
like fuckin tha process ID or current time, is used as tha seed.
.PP

.SH "  Node Attributes"
.PP
\fBheight=\fId\fR or \fBwidth=\fId\fR sets minimum height or width.
Addin \fBfixedsize=true\fP forces these ta be tha actual size
(text labels is ignored).
.PP
\fBshape=record polygon epsf \fIbuiltin_shape\fR
.br
\fIbuiltin_polygon\fR can be \fBplaintext ellipse oval circle egg 
triangle box diamond trapezium parallelogram doggy den hexagon octagon
note tab box3d component\fR, among others.
(Polygons is defined or modified by tha followin node attributes:
\fBregular\fR, \fBperipheries\fR, \fBsides\fR, \fBorientation\fR,
\fBdistortion\fR n' \fBskew\fR.)  \fBepsf\fR uses tha node's
\fBshapefile\fR attribute as tha path name of a external
EPSF file ta be automatically loaded fo' tha node shape.
.PP
See http://www.graphviz.org/content/node-shapes fo' a cold-ass lil complete description
of node shapes.
.PP
\fBlabel=\fItext\fR where \fItext\fP may include escaped newlines
\\\|n, \\\|l, or \\\|r fo' center, left, n' right justified lines.
Da strang '\\N' value is ghon be replaced by tha node name.
Da strang '\\G' value is ghon be replaced by tha graph name.
Record labels may contain recursive box lists delimited by { | }.
Port identifiers up in labels is set off by angle brackets < >.
In tha graph file, use colon (such as, \fBnode0:port28\fR).
.PP
Graphviz also supports special HTML-like labels fo' constructin complex node
content fo' realz. A full\(hydescription of these is given at http://www.graphviz.org/content/node-shapes#html.
.PP
\fBfontsize=\fIn\fR sets tha label type size ta \fIn\fP points.
.PP
\fBfontname=\fIname\fR sets tha label font crew name.
.PP
\fBcolor=\fIcolorvalue\fR sets tha outline color, n' tha default fill color
if style=filled n' \fBfillcolor\fR aint specified.
.PP
\fBfillcolor=\fIcolorvalue\fR sets tha fill color
when style=filled. Y'all KNOW dat shit, muthafucka!  If not specified, tha fillcolor when style=filled defaults
to be tha same as tha outline color.
.PP
\fBfontcolor=\fIcolorvalue\fR sets tha label text color.
.PP
A \fIcolorvalue\fP may be "\fIh,s,v\fB"\fR (hue, saturation, brightness)
floatin point numbers between 0 n' 1, or a X11 color name such as
\fBwhite black red chronic blue yellow magenta cyan\fR or \fBburlywood\fR,
or a "\fI#rrggbb" (red, green, blue, 2 hex charactas each) value.
.PP
\fBstyle=filled solid dashed dotted bold invis\fP or any Postscript code.
.PP
\fBhref=\fI"url"\fR sets tha url fo' tha node up in imagemap, PostScript n' SVG
files.
Da substrings '\\N' n' '\\G' is substituted up in tha same manner as
for tha node label attribute.
Additionally tha substrin '\\L' is substituted wit tha node label string.
.PP
\fBURL=\fI"url"\fR ("URL" be a synonym fo' "href".)
.PP
\fBtarget=\fI"target"\fR be a target strang fo' client\(hyside imagemaps
and SVG, effectizzle when nodes gotz a URL.
Da target strang is used ta determine which window of tha browser is used
for tha URL.  Settin it ta "_graphviz" will open a freshly smoked up window if it don't
already exist, or reuse it if it do.
If tha target strang is empty, tha default,
then no target attribute is included up in tha output.
Da substrings '\\N' n' '\\G' is substituted up in tha same manner as
for tha node label attribute.
Additionally tha substrin '\\L' is substituted wit tha node label string.
.PP
\fBtooltip=\fI"tooltip"\fR be a tooltip strang fo' client\(hyside imagemaps
and SVG, effectizzle when nodes gotz a URL.  Da tooltip strang defaults ta be the
same as tha label strin yo, but dis attribute permits nodes without
labels ta still have tooltips thus permittin denser graphs.
Da substrings '\\N' n' '\\G' is substituted up in tha same manner as
for tha node label attribute.
Additionally tha substrin '\\L' is substituted wit tha node label string.
.PP
Da followin attributes apply only ta polygon shape nodes:
.PP
\fBregular=\fIn\fR if \fIn\fR is non\(hyzero then tha polygon is made 
regular, i.e. symmetric bout tha x n' y axis, otherwise the
polygon takes on tha aspect ratio of tha label. 
\fIbuiltin_polygons\fR dat is not already regular is made regular
by dis attribute.
\fIbuiltin_polygons\fR dat is already regular is not affected (i.e.
they cannot be made asymmetric).
.PP
\fBperipheries=\fIn\fR sets tha number of periphery lines drawn around
the polygon. I aint talkin' bout chicken n' gravy biatch.  This value supersedes tha number of periphery lines
of \fIbuiltin_polygons\fR.
.PP
\fBsides=\fIn\fR sets tha number of sides ta tha polygon. I aint talkin' bout chicken n' gravy biatch. \fIn\fR<3
results up in a ellipse.
This attribute is ignored by \fIbuiltin_polygons\fR.
.PP
\fBorientation=\fIf\fR sets tha orientation of tha straight-up original gangsta apex of the
polygon counterclockwise from tha vertical, up in degrees.
\fIf\fR may be a gangbangin' floatin point number.
Da orientation of labels aint affected by dis attribute.
This attribute be added ta tha initial orientation of \fIbuiltin_polygons.\fR
.PP
\fBdistortion=\fIf\fR sets tha amount of broadenin of tha top and
narrowin of tha bottom of tha polygon (relatizzle ta its orientation). 
Floatin point joints between \-1 n' +1 is suggested.
This attribute is ignored by \fIbuiltin_polygons\fR.
.PP                                                            
\fBskew=\fIf\fR sets tha amount of right\(hydisplacement of tha top and
left\(hydisplacement of tha bottom of tha polygon (relatizzle ta its
orientation).
Floatin point joints between \-1 n' +1 is suggested.
This attribute is ignored by \fIbuiltin_polygons\fR.

.PP
\fB(circo\(hyspecific attributes)\fR
.br
\fBroot=\fItrue/false\fR. This specifies dat tha block containin tha given
node be treated as tha root of tha spannin tree up in tha layout.

.PP
\fB(fdp\(hyspecific attributes)\fR
.br
\fBpin=\fIval\fR. If \fIval\fR is "true", tha node will remain at
its initial position.

.SH "  Edge Attributes"
\fBminlen=\fIn\fR where \fIn\fP be a integer factor dat applies
to tha edge length (ranks fo' aiiight edges, or minimum node separation
for flat edges).
.PP
\fBweight=\fIn\fR where \fIn\fP is tha integer cost of tha edge.
Values pimped outa than 1 tend ta shorten tha edge.  Weight 0 flat
edges is ignored fo' orderin nodes.
.PP
\fBlabel=\fItext\fR where \fItext\fR may include escaped newlines
\\\|n, \\\|l, or \\\|r fo' centered, left, or right justified lines.
If tha substrin '\\T' is found up in a label it is ghon be replaced by tha tail_node name.
If tha substrin '\\H' is found up in a label it is ghon be replaced by tha head_node name.
If tha substrin '\\E' value is found up in a label it is ghon be replaced by: tail_node_name\->head_node_name
If tha substrin '\\G' is found up in a label it is ghon be replaced by tha graph name.
or by: tail_node_name\-\-head_node_name fo' unpimped up graphs.
.PP
\fBfontsize=\fIn\fR sets tha label type size ta \fIn\fP points.
.PP
\fBfontname=\fIname\fR sets tha label font crew name.
.PP
\fBfontcolor=\fIcolorvalue\fR sets tha label text color.
.PP
\fBstyle=solid dashed dotted bold invis\fP
.PP
\fBcolor=\fIcolorvalue\fR sets tha line color fo' edges.
.PP
\fBcolor=\fIcolorvaluelist\fR a ':' separated list of \fIcolorvalue\fR creates
parallel edges, one edge fo' each color.
.PP
\fBdir=forward back both none\fP controls arrow direction.
.PP
\fBtailclip,headclip=false\fP disablez endpoint shape clipping.
.PP
\fBhref=\fI"url"\fR sets tha url fo' tha node up in imagemap, PostScript n' SVG
files.
Da substrings '\\T', '\\H', '\\E' n' '\\G' is substituted up in tha same manner as
for tha edge label attribute.
Additionally tha substrin '\\L' is substituted wit tha edge label string.
.PP
\fBURL=\fI"url"\fR ("URL" be a synonym fo' "href".)
.PP
\fBtarget=\fI"target"\fR be a target strang fo' client\(hyside imagemaps
and SVG, effectizzle when edges gotz a URL.
If tha target strang is empty, tha default,
then no target attribute is included up in tha output.
Da substrings '\\T', '\\H', '\\E' n' '\\G' is substituted up in tha same manner as
for tha edge label attribute.
Additionally tha substrin '\\L' is substituted wit tha edge label string.
.PP
\fBtooltip=\fI"tooltip"\fR be a tooltip strang fo' client\(hyside imagemaps
effectizzle when edges gotz a URL.  Da tooltip strang defaults ta be the
same as tha edge label string. 
Da substrings '\\T', '\\H', '\\E' n' '\\G' is substituted up in tha same manner as
for tha edge label attribute.
Additionally tha substrin '\\L' is substituted wit tha edge label string.
.PP
\fBarrowhead,arrowtail=none, normal, inv, dot, odot, invdot, invodot,
tee, empty, invempty, open, halfopen, diamond, odiamond, box, obox, crow\fP.
.PP
\fBarrowsize\fP (norm_length=10,norm_width=5,
inv_length=6,inv_width=7,dot_radius=2) 
.PP
\fBheadlabel,taillabel=string\fP fo' port labels.
\fBlabelfontcolor\fP,\fBlabelfontname\fP,\fBlabelfontsize\fP
for head n' tail labels.
Da substrings '\\T', '\\H', '\\E' n' '\\G' is substituted up in tha same manner as
for tha edge label attribute.
Additionally tha substrin '\\L' is substituted wit tha edge label string.
.PP
\fBheadhref=\fI"url"\fR sets tha url fo' tha head port up in imagemap, PostScript n' SVG files.
Da substrings '\\T', '\\H', '\\E' n' '\\G' is substituted up in tha same manner as
for tha edge label attribute.
Additionally tha substrin '\\L' is substituted wit tha edge label string.
.PP
\fBheadURL=\fI"url"\fR ("headURL" be a synonym fo' "headhref".)
.PP
\fBheadtarget=\fI"headtarget"\fR be a target strang fo' client\(hyside imagemaps
and SVG, effectizzle when edge headz gotz a URL.
Da headtarget strang is used ta determine which window of tha browser is used
for tha URL.  If tha headtarget strang is empty, tha default,
then headtarget defaults ta tha same value as target fo' tha edge.
Da substrings '\\T', '\\H', '\\E' n' '\\G' is substituted up in tha same manner as
for tha edge label attribute.
Additionally tha substrin '\\L' is substituted wit tha edge label string.
.PP
\fBheadtooltip=\fI"tooltip"\fR be a tooltip strang fo' client\(hyside imagemaps
effectizzle when head ports gotz a URL.  Da tooltip strang defaults ta be the
same as tha headlabel string. 
Da substrings '\\T', '\\H', n' '\\E' is substituted up in tha same manner as
for tha edge label attribute.
Additionally tha substrin '\\L' is substituted wit tha edge label string.
.PP
\fBtailhref=\fI"url"\fR sets tha url fo' tha tail port up in imagemap, PostScript n' SVG files.
Da substrings '\\T', '\\H', '\\E' n' '\\G' is substituted up in tha same manner as
for tha edge label attribute.
Additionally tha substrin '\\L' is substituted wit tha edge label string.
.PP
\fBtailURL=\fI"url"\fR ("tailURL" be a synonym fo' "tailhref".)
.PP
\fBtailtarget=\fI"tailtarget"\fR be a target strang fo' client\(hyside imagemaps
and SVG, effectizzle when edge tails gotz a URL.
Da tailtarget strang is used ta determine which window of tha browser is used
for tha URL.  If tha tailtarget strang is empty, tha default,
then tailtarget defaults ta tha same value as target fo' tha edge.
Da substrings '\\T', '\\H', '\\E' n' '\\G' is substituted up in tha same manner as
for tha edge label attribute.
Additionally tha substrin '\\L' is substituted wit tha edge label string.
.PP
\fBtailtooltip=\fI"tooltip"\fR be a tooltip strang fo' client\(hyside imagemaps
effectizzle when tail ports gotz a URL.  Da tooltip strang defaults ta be the
same as tha taillabel string. 
Da substrings '\\T', '\\H', '\\E' n' '\\G' is substituted up in tha same manner as
for tha edge label attribute.
Additionally tha substrin '\\L' is substituted wit tha edge label string.
.PP
\fBlabeldistance\fP n' \fBlabelangle\fP (in degrees CCW) specify tha placement of
head n' tail labels.
.PP
\fBdecorate\fP draws line from edge ta label.
.PP
\fBsamehead,sametail\fP aim edges havin tha same value ta the
same port, rockin tha average landin point.
.PP
\fBconstraint=false\fP causes a edge ta be ignored fo' rank assignment.
.PP
\fBlayer=\fIid\fR or \fIid:id\fR or "all" sets tha edgez actizzle layers.
Da empty strang means no layers (invisible).

.PP
\fB(neato\(hyspecific attributes)\fR
.br
\fBw=\fIf\fR sets tha weight (sprin constant) of a edge
to tha given floatin point value.  Da default is 1.0;
greata joints make tha edge tend mo' toward its optimal length.
.PP
\fBlen=\fIf\fR sets tha optimal length of a edge.
Da default is 1.0.
.PP
\fB(fdp\(hyspecific attributes)\fR
.br
\fBweight=\fIf\fR sets tha weight of a edge
to tha given floatin point value. Da default is 1.0;
greata joints make tha edge tend mo' toward its optimal length.
.SH "COMMAND\(hyLINE OPTIONS"
\fB\-G\fP sets a thugged-out default graph attribute.
.br
\fB\-N\fP sets a thugged-out default node attribute.
.br
\fB\-E\fP sets a thugged-out default edge attribute.
Example: \fB\-Gsize="7,8" \-Nshape=box \-Efontsize=8\fR
.PP
\fB\-l\fIfile\fR loadz custom PostScript library files.
Usually these define custom shapes or styles.
If \fB\-l\fP is given by itself, tha standard library is omitted.
.PP
\fB\-T\fIlang\fR sets tha output language as busted lyrics bout above.

.PP
\fB\-n\fR[\fB1\fR|\fB2\fR] (no\(hyop)
If set, neato assumes nodes have already been positioned n' all
nodes gotz a pos attribute givin tha positions.
It then performs a optionizzle adjustment ta remove node\(hynode overlap,
dependin on tha value of tha overlap attribute,
computes tha edge layouts, dependin on tha value of tha \fBsplines\fR attribute,
and emits tha graph up in tha appropriate format.
If num is supplied, tha followin actions occur:
.nf
    num = 1
.fi
Equivalent ta \-n.
.nf
    num > 1
.fi
Use node positions as specified,
with no adjustment ta remove node\(hynode overlaps,
and use any edge layouts already specified by tha pos attribute.
neato computes a edge layout fo' any edge dat aint gots a pos attribute.
As usual, edge layout is guided by tha \fBsplines\fR attribute.
.PP
\fB\-K\fIlayout\fR override tha default layout engine implied by tha command name.
.PP
\fB\-O\fP automatically generate output filenames based on tha input filename n' tha \-T format.
.PP
\fB\-P\fP generate a graph of tha currently available plugins.
.PP
\fB\-v\fP (verbose) prints various shiznit useful fo' debugging.
.PP
\fB\-c\fP configure plugins.
.PP
\fB\-m\fP memory test (observe no growth wit top, bust a cap up in when done).
.PP
\fB\-q\fIlevel\fP set level of message suppression. I aint talkin' bout chicken n' gravy biatch. Da default is 1.
.PP
\fB\-s\fIfscale\fP scale input by \fIfscale\fP, tha default is 72.
.PP
\fB\-y\fR invert y coordinizzle up in output.
.PP
\fB\-V\fP (version) prints version shiznit n' exits.
.PP
\fB\-?\fP prints tha usage n' exits.
.PP
A complete description of tha available command\(hyline options can be found at
http://www.graphviz.org/content/command-line-invocation.
.SH "EXAMPLES"
.nf
digraph test123 {
        a \-> b \-> c;
        a \-> {x y};
        b [shape=box];
        c [label="hello\\\|nworld",color=blue,fontsize=24,
             fontname="Palatino\-Italic",fontcolor=red,style=filled];
        a \-> z [label="hi", weight=100];
        x \-> z [label="multi\-line\\\|nlabel"];
        edge [style=dashed,color=red];
        b \-> x;
        {rank=same; b x}
}
.fi
.PP
.nf
graph test123 {
        a \-\- b \-\- c;
        a \-\- {x y};
        x \-\- c [w=10.0];
        x \-\- y [w=5.0,len=3];
}
.fi
.SH "CAVEATS"
Edge splines can overlap unintentionally.
.PP
Flat edge labels is slightly broken.
Interclusta edge labels is straight-up broken.
.PP
Because unconstrained optimization is employed, node boxes can
possibly overlap or bust a nut on unrelated edges.  All existing
sprin embeddaz seem ta have dis limitation.
.PP
Apparently reasonable attempts ta pin nodes or adjust edge lengths
and weights can cause instability.
.SH AUTHORS
Stephen C. Uptown <north@research.att.com>
.br
Emden R. Gansner <erg@research.att.com>
.br
Jizzy C. Ellson <ellson@research.att.com>
.br
Yifan Hu <yifanhu@research.att.com>
.PP
Da bitmap driver (PNG, GIF etc) is by Thomas Boutell, <http://www.boutell.com/gd>
.PP
Da Truetype font renderer is from
the Freetype Project (Dizzy Turner, Robert Wilhelm, n' Werner Lemberg)
(who can be contacted at freetype\-devel@lists.lrz\-muenchen.de).
.SH "SEE ALSO"
This playa page gotz nuff only a lil' small-ass amount of tha shiznit related
to tha Graphviz layout programs. Da most complete shiznit can be
found at http://www.graphviz.org/Documentation.php, especially up in the
on\(hyline reference pages. Most of these documents is also available up in the
\fIdoc\fP n' \fIdoc/info\fP subtrees up in tha source n' binary distributions.
.PP
dotty(1)
.br
tcldot(n)
.br
xcolors(1)
.br
libgraph(3)
.PP
E. R. Gansner, S. C. North,  K. P. Vo, "DAG \(hy A Program ta Draw Directed Graphs", Software \(hy Practice n' Experience 17(1), 1988, pp. 1047\(hy1062.
.br
E. R. Gansner, E. Koutsofios, S. C. North,  K. P. Vo, "A Technique fo' Drawin Directed Graphs," IEEE Trans. on Soft. Eng. 19(3), 1993, pp. 214\(hy230.
.br
S. Uptown n' E. Koutsofios, "Applicationz of graph visualization",
Graphics Interface 94, pp. 234\(hy245.
.br
E.R. Gansner n' E. Koutsofios n' S. C. North, "Drawin Graphs wit dot," 
Available at http://www.graphviz.org/pdf/dotguide.pdf.
.br
S. C. North, "NEATO Userz Manual".
Available http://www.graphviz.org/pdf/neatoguide.pdf.

