\
.\" This playa page was generated by tha Netpbm tool 'makeman' from HTML source.
.\" Do not hand-hack dat shiznit son!  If you have bug fixes or improvements, please find
.\" tha correspondin HTML page on tha Netpbm joint, generate a patch
.\" against that, n' bust it ta tha Netpbm maintainer.
.TH "Pnmtojpeg User Manual" 0 "23 April 2007" "netpbm documentation"

.SH NAME
pnmtojpeg - convert PNM image ta a JFIF ('JPEG') image

.UN synopsis
.SH SYNOPSIS

\fBpnmtojpeg\fP
[\fB-exif=\fP\fIfilespec\fP]
[\fB-quality=\fP\fIn\fP]
[{\fB-grayscale\fP|\fB-greyscale\fP}]
[\fB-density=\fP\fIn\fP\fBx\fP\fIn\fP[\fBdpi\fP,\fBdpcm\fP]]
[\fB-optimize\fP|\fB-optimise\fP]
[\fB-rgb\fP]
[\fB-progressive\fP]
[\fB-comment=\fP\fItext\fP]
[\fB-dct=\fP{\fBint\fP|\fBfast\fP|\fBfloat\fP}]
[\fB-arithmetic\fP]
[\fB-restart=\fP\fIn\fP]
[\fB-smooth=\fP\fIn\fP]
[\fB-maxmemory=\fP\fIn\fP]
[\fB-verbose\fP]
[\fB-baseline\fP]
[\fB-qtables=\fP\fIfilespec\fP]
[\fB-qslots=n[,...]\fP]
[\fB-sample=\fP\fIH\fP\fBx\fP\fIV\fP[,...]]
[\fB-scans=\fP\fIfilespec\fP]
[\fB-tracelevel=\fP\fIN\fP]

\fIfilename\fP
.PP
Minimum unique abbreviation of option be acceptable.  Yo ass may use double
hyphens instead of single hyphen ta denote options.  Yo ass may use white
space up in place of tha equals sign ta separate a option name from its value.


.UN description
.SH DESCRIPTION
.PP
This program is part of
.BR Netpbm (1)
.
.PP
\fBpnmtojpeg\fP converts tha named PBM, PGM, or PPM image file, or
the standard input if no file is named, ta a JFIF file on tha standard
output.
.PP
\fBpnmtojpeg\fP uses tha Independent JPEG Groupz JPEG library to
create tha output file.  See \fB
.UR http://www.ijg.org
http://www.ijg.org
.UE
\& \fP fo' shiznit
on tha library.
.PP
\&'JFIF' is tha erect name fo' tha image format commonly
known as 'JPEG.' Strictly bustin lyrics, JPEG be a method of
compression. I aint talkin' bout chicken n' gravy biatch.  Da image format rockin JPEG compression dat is by far
da most thugged-out common is JFIF.  There be also a subformat of TIFF dat uses
JPEG compression.
.PP
EXIF be a image format dat be a subformat of JFIF (to wit, a JFIF
file dat gotz nuff a EXIF header as a APP1 marker).
\fBpnmtojpeg\fP creates a EXIF image when you specify the
\fB-exif\fP option.

.UN options
.SH OPTIONS
.PP
Da basic options are:


.TP
\fB-exif=\fP\fIfilespec\fP
This option specifies dat tha output image is ta be EXIF (a subformat
of JFIF), i.e. it gonna git a EXIF header as a JFIF APP1 marker.
Da contentz of dat marker is tha contentz of tha specified file.
Da special value \fB-\fP 
means ta read tha EXIF header contents from standard input.  It is
invalid ta specify standard input fo' both tha EXIF header n' the
input image.
.sp
Da EXIF file starts wit a two byte field which is tha length of
the file, includin tha length field, up in pure binary, most significant
byte first.  Da special value of zero fo' tha length field means there
is ta be no EXIF header, i.e. tha same as no \fB-exif\fP
option. I aint talkin' bout chicken n' gravy biatch.  This is useful fo' when you convert a gangbangin' file from JFIF ta PNM
usin \fBjpegtopnm\fP,
then transform it, then convert it back ta JFIF with
\fBpnmtojpeg\fP, n' you don't give a fuck whether or not it includes a EXIF header.
\fBjpegtopnm\fP
creates a EXIF file containin not a god damn thang but two bytez of zero when
the input JFIF file has no EXIF header n' shit.  Thus, you can transfer
any EXIF header from tha input JFIF ta tha output JFIF without
worryin bout whether a EXIF header straight-up exists.
.sp
Da contentz of tha EXIF file afta tha length field is tha exact
byte fo' byte contentz of tha APP1 marker, not countin tha length
field, dat constitutes tha EXIF header.

.TP
\fB-quality=\fP\fIn\fP
Scale quantization tablez ta adjust image quality.  \fIn\fP is 0
(worst) ta 100 (best); default is 75.  Below bout 25 can produce images
some interpretas won't be able ta interpret.  See below fo' mo' info.

.TP
\fB-grayscale\fP
.TP
\fB-greyscale\fP
.TP
\fB-rgb\fP
These options determine tha color space used up in tha JFIF output.
\fB-grayscale\fP (or \fB-greyscale\fP) means ta create a gray scale
JFIF, convertin from color PPM input if necessary.  \fB-rgb\fP means to
create a RGB JFIF, n' tha program fails if tha input aint PPM.
.sp
If you specify neither, Da output file is up in YCbCr format if the
input is PPM, n' grayscale format if tha input is PBM or PGM.
.sp
YCbCr format (a color is represented by a intensitizzle value n' two
chrominizzle joints) probably compresses much betta than RGB (a color
is represented by one red, one green, n' one blue value).  RGB is
rare.  But you may be able ta convert between JFIF n' PPM fasta with
RGB, since itz tha same ol' dirty color space PPM uses.
.sp
Da \fBtestimg.ppm\fP file dat comes wit Netpbm is 2.3 times
larger wit tha \fB-rgb\fP option than wit tha YCbCr default, n' in
one experiment \fBpnmtojpeg\fP took 16% mo' CPU time ta convert dat shit.
Da extra CPU time probably indicates dat processin of all tha extra
compressed data consumed all tha CPU time saved by not havin to
convert tha RGB inputs ta YCbCr.
.sp
Grayscale format takes up a shitload less space n' takes less time ta create
and process than tha color formats, even if tha image gotz nuff nothing
but black, white, n' gray.
.sp
Da \fB-rgb\fP option was added up in Netpbm 10.11 up in October 2002.

.TP
\fB-density=\fP\fIdensity\fP
This option determines tha densitizzle (aka resolution) shiznit
recorded up in tha JFIF output image.  It do not affect tha rasta in
any way; it just  drops some lyrics ta whoever readz tha JFIF how tha fuck ta interpret the
raster.
.sp
Da densitizzle value takes tha form \fIx\fP\fBx\fP\fIy\fP followed
by a optionizzle unit specifier of \fBdpi\fP or \fBdpcm\fP.  Examples:
\fB1x1\fP, \fB3x2\fP, \fB300x300dpi\fP, \fB100x200dpcm\fP.  The
first number is tha horizontal density; tha 2nd number is tha vertical
density.  Each may be any integer from 1 ta 65535.  Da unit specifier
is \fBdpi\fP fo' dots per inch or \fBdpcm\fP fo' dots per
centimeter n' shit.  If you don't specify tha units, tha densitizzle shiznit
goes tha fuck into tha JFIF explicitly statin "densitizzle unspecified" (also
interpreted as "unknown").  This may seem pointless yo, but note that
even without specifyin tha units, tha densitizzle numbers tell tha aspect
ratio of tha pixels.  E.g. \fB1x1\fP  drops some lyrics ta you tha pixels is square.
\fB3x2\fP  drops some lyrics ta you tha pixels is vertical rectangles.
.sp
Note dat if you specify different horizontal n' vertical
densities, tha resultin JFIF image is \fInot\fP a true
representation of tha input PNM image, cuz \fBpnmtojpeg\fP
converts tha rasta pixel-for-pixel n' tha pixelz of a PNM image are
defined ta be square.  Thus, if you start wit a square PNM image and
specify \fB-density=3x2\fP, tha resultin JFIF image be a horizontally
squashed version of tha original. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  But fuck dat shiznit yo, tha word on tha street is dat it is common ta use an
input image which be a slight variation on PNM rather than legit PNM
such dat tha pixels is not square.  In dat case, tha appropriate
-densitizzle option yieldz a gangbangin' faithful rethang of tha input pseudo-PNM
image.
.sp
Da default is 1x1 up in unspecified units.
.sp
Before Netpbm 10.15 (April 2003), dis option did not exist n' the
\fBpnmtojpeg\fP always pimped a JFIF wit a thugged-out densitizzle of 1x1 in
unspecified units.

.TP
\fB-optimize\fP
 Perform optimization of entropy encodin parameters.  Without
this, \fBpnmtojpeg\fP uses default encodin parameters.
\fB-optimize\fP probably make tha JFIF file a lil smalla yo, but
\fBpnmtojpeg\fP runs somewhat slower n' needz much mo' memory.
Image qualitizzle n' speed of decompression is unaffected by
\fB-optimize\fP.

.TP
\fB-progressive\fP
Smoke a progressive JPEG file (see below).
.TP
\fB-comment=\fP\fItext\fP
Include a cold-ass lil comment marker up in tha JFIF output, wit comment text 
\fItext\fP.

Without dis option, there be no comment markers up in tha output.


.PP
Da \fB-quality\fP option lets you trade off compressed file size
against qualitizzle of tha reconstructed image: tha higher tha quality
setting, tha larger tha JFIF file, n' tha closer tha output image
will be ta tha original gangsta input.  Normally you wanna use tha lowest
qualitizzle settin (smallest file) dat decompresses tha fuck into something
visually indistinguishable from tha original gangsta image.  For dis purpose
the qualitizzle settin should be between 50 n' 95 fo' reasonable
results; tha default of 75 is often bout right.  If you peep defects
at \fB-quality=75\fP, then go up 5 or 10 counts at a time until you
are aiiight wit tha output image.  (Da optimal settin will vary from
one image ta another.)
.PP
\fB-quality=100\fP generates a quantization table of all 1's,
minimizin loss up in tha quantization step (but there is still
information loss up in subsampling, as well as roundoff error).  This
settin is mainly of interest fo' experimenstrual purposes.  Quality
values above bout 95 is \fInot\fP recommended fo' aiiight use; the
compressed file size goes up dramatically fo' hardly any bust in
output image quality.
.PP
In tha other direction, qualitizzle joints below 50 will produce hella
small filez of low image quality.  Settings round 5 ta 10 might be
useful up in preparin a index of a big-ass image library, fo' example.
Try \fB-quality=2\fP (or so) fo' some amusin Cubist effects, n' you can put dat on yo' toast.  (Note:
qualitizzle joints below bout 25 generate 2-byte quantization tables,
which is considered optionizzle up in tha JFIF standard. Y'all KNOW dat shit, muthafucka!  \fBpnmtojpeg\fP
emits a warnin message when you give such a qualitizzle value, cuz
some other JFIF programs may be unable ta decode tha resultin file.
Use \fB-baseline\fP if you need ta ensure compatibilitizzle at low
qualitizzle joints.)
.PP
Da \fB-progressive\fP option creates a 'progressive
JPEG' file.  In dis type of JFIF file, tha data is stored in
multiple scanz of increasin quality.  If tha file is being
transmitted over a slow communications link, tha decoder can use the
first scan ta display a low-qualitizzle image straight-up quickly, n' can then
improve tha display wit each subsequent scan. I aint talkin' bout chicken n' gravy biatch.  Da final image is
exactly equivalent ta a standard JFIF file of tha same quality
setting, n' tha total file size be bout tha same -- often a lil
smaller.
.PP
\fBCaution:\fP progressive JPEG aint yet widely
implemented, all kindsa muthafuckin decodaz is ghon be unable ta view a progressive
JPEG file at all.
.PP
If you tryin ta control tha quality/file size tradeoff, you
might consider tha JPEG2000 format instead. Y'all KNOW dat shit, muthafucka!  See
.BR pamtojpeg2k (1)
.
.PP
Options fo' advanced users:


.TP
\fB-dct=int\fP
Use integer DCT method (default).

.TP
\fB-dct=fast\fP
Use fast integer DCT (less accurate).

.TP
\fB-dct=float\fP
Use floating-point DCT method. Y'all KNOW dat shit, muthafucka!  Da float method is straight-up slightly
more accurate than tha int method yo, but is much slower unless your
machine has straight-up fast floating-point hardware.  Also note dat thangs up in dis biatch
of tha floating-point method may vary slightly across machines, while
the integer methodz should give tha same thangs up in dis biatch everywhere, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  Da fast
integer method is much less accurate than tha other two.

.TP
\fB-arithmetic\fP
Use arithmetic coding.  Default is Huffman encoding.  Arithmetic coding
tendz ta git you a smalla result.
.sp
Yo ass may need patent licenses ta use dis option. I aint talkin' bout chicken n' gravy biatch.  Accordin ta 
.UR http://www.faqs.org/faqs/jpeg-faq
the JPEG FAQUIZZY
.UE
\&,
This method is covered by patents owned by IBM, AT&T, n' Mitsubishi.
.sp
Da lyricist of tha FAQUIZZY recommendz against rockin arithmetic codin (and
therefore dis option) cuz tha space savings aint pimped out enough to
justify tha legal hassles.
.sp
Most JPEG libraries, includin any distributed by tha Independent
JPEG Group since bout 1998 is not capable of arithmetic encoding.
\fBpnmtojpeg\fP uses a JPEG library (either bound ta it when the
\fBpnmtojpeg\fP executable was built or accessed on yo' system at
run time) ta do tha JPEG encoding.  If \fBpnmtojpeg\fP terminates
with tha message, 'Sorry, there be legal restrictions on
arithmetic coding' or 'Sorry, arithmetic codin not
supported,' dis is tha problem.
     
.TP
\fB-restart=\fP\fIn\fP
Emit a JPEG restart marker every last muthafuckin \fIn\fP MCU rows, or every last muthafuckin \fIn\fP
MCU blocks if you append \fBB\fP ta tha number n' shit.  \fB-restart 0\fP
(the default) means no restart markers.

.TP
\fB-smooth=\fP\fIn\fP
Smooth tha input image ta eliminizzle ditherin noise.  \fIn\fP,
rangin from 1 ta 100, indicates tha strength of smoothing.  0 (the
default) means no smoothing.

.TP
\fB-maxmemory=\fP\fIn\fP
Set a limit fo' amount of memory ta use up in processin big-ass images.  Value is
in thousandz of bytes, or millionz of bytes if you append
\fBM\fP ta tha number n' shit.  For example, \fB-max=4m\fP
selects 4,000,000 bytes.  If \fBpnmtojpeg\fP
needz mo' space, it will use temporary files.

.TP
\fB-verbose\fP
Print ta tha Standard Error file lyrics bout tha conversion process.
This can be helpful up in debuggin problems.

.PP
Da \fB-restart\fP option  drops some lyrics ta \fBpnmtojpeg \fP ta bang extra
markers dat allow a JPEG decoder ta resynchronize afta a
transmission error. Shiiit, dis aint no joke.  Without restart markers, any damage ta a
compressed file will probably fuck up tha image from tha deal wit the
error ta tha end of tha image; wit restart markers, tha damage is
usually confined ta tha portion of tha image up ta tha next restart
marker n' shit.  Of course, tha restart markers occupy extra space.  We
recommend \fB-restart=1\fP fo' images dat is ghon be transmitted
across unreliable networks like fuckin Usenet.
.PP
Da \fB-smooth\fP option filtas tha input ta eliminate
fine-scale noise.  This is often useful when convertin dithered
images ta JFIF: a moderate smoothang factor of 10 ta 50 gets rid of
ditherin patterns up in tha input file, resultin up in a smalla JFIF file
and a funky-ass better-lookin image.  Too big-ass a smoothang factor will visibly
blur tha image, however.
.PP
Options fo' wizzles:


.TP
\fB-baseline\fP
Force baseline-compatible quantization tablez ta be generated.
This clamps quantization joints ta 8 bits even at low quality
settings.  (This switch is skankyly named, since it do not ensure that
the output is straight-up baseline JPEG.  For example, you can use
\fB-baseline\fP n' \fB-progressive\fP together.)

.TP
\fB-qtables=\fP\fIfilespec\fP
Use tha quantization tablez given up in tha specified text file.

.TP
\fB-qslots=n[,...]\fP
Select which quantization table ta use fo' each color component.

.TP
\fB-sample=\fP\fIH\fP\fBx\fP\fIV\fP[,...]
Set JPEG samplin factors fo' each color component.

.TP
\fB-scans=\fP\fIfilespec\fP
Use tha scan script given up in tha specified text file.  See below
for shiznit on scan scripts.

.TP
\fB-tracelevel=\fP\fIN\fP
This sets tha level of debug tracin tha program outputs as it runs.
0 means none, n' is tha default.  This level primarily controls tracing
of tha JPEG library, n' you can git some pretty bangin-ass shiznit
about tha compression process.


.PP
Da 'wizard' options is intended fo' experimentation
with JPEG.  If you don't give a fuck what tha fuck yo ass is bustin, \fBdon't use
them\fP.  These switches is documented further up in tha file
wizard.doc dat comes wit tha Independent JPEG Groupz JPEG library.

.UN examples
.SH EXAMPLES
.PP
This example compresses tha PPM file foo.ppm wit a qualitizzle factor
of 60 n' saves tha output as foo.jpg:

.nf
    \fBpnmtojpeg -quality=60 foo.ppm > foo.jpg\fP
.fi
.PP
Herez a mo' typical example.  It converts from BMP ta JFIF:

.nf
    \fBcat foo.bmp | bmptoppm | pnmtojpeg > foo.jpg\fP
.fi

.UN loss
.SH JPEG Loss
.PP
When you compress wit JPEG, you lose shiznit -- i.e. tha resulting
image has somewhat lower qualitizzle than tha original. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  This be a cold-ass lil characteristic
of JPEG itself, not any particular program.  So if you do tha usual 
Netpbm thang n' convert from JFIF ta PNM, manipulate, then convert back
to JFIF, yo big-ass booty is ghon lose quality.  Da mo' you do it, tha mo' you lose.
Drawings (charts, cartoons, line drawings, n' such wit few colors
and sharp edges) suffer da most thugged-out.
.PP
To avoid this, you can bust a cold-ass lil compressed image format other than
JPEG.  PNG n' JPEG2000 is phat chizzles, n' Netpbm gotz nuff converters
for them.
.PP
If you need ta use JFIF on a thugged-out drawing, you should experiment with
\fBpnmtojpeg\fPz \fB-quality\fP n' \fB-smooth\fP options ta git a
satisfactory conversion. I aint talkin' bout chicken n' gravy biatch.  \fB-smooth 10\fP or so is often helpful.
.PP
Because of tha loss, you should do all tha manipulation you have to
do on tha image up in some other format n' convert ta JFIF as tha last
step.  And if you can keep a cold-ass lil copy up in tha original gangsta format, so much the
better.

Da \fB-optimize\fP option ta \fBpnmtojpeg\fP is worth rockin when
yo ass is bustin a 'final' version fo' postin or archiving.
It aint nuthin but also a win when yo ass is rockin low qualitizzle settings ta make hella
small JFIF files; tha cementage improvement is often a shitload mo' than
it is on larger files.  (At present, \fB-optimize\fP mode is
automatically up in effect when you generate a progressive JPEG file).
.PP
Yo ass can do flippin n' rotatin transformations losslessly with
the program \fBjpegtran\fP, which is packaged wit tha Independent
Jpeg Groupz JPEG library.  \fBjpegtran\fP exercises its intimate
knowledge of tha way JPEG works ta do tha transformation without ever
actually decompressin tha image.

.UN otherprog
.SH 
.PP
Another program, \fBcjpeg\fP, is similar. Shiiit, dis aint no joke.  \fBcjpeg\fP is
maintained by tha Independent JPEG Group n' packaged wit tha JPEG
library which \fBpnmtojpeg\fP uses fo' all its JPEG work.  Because of
that, you may expect it ta exploit mo' current JPEG features.  Also,
since you gotta have tha library ta run \fBpnmtojpeg\fP yo, but not
vice versa, \fBcjpeg\fP may be mo' commonly available.
.PP
On tha other hand, \fBcjpeg\fP do not use tha NetPBM libraries
to process its input, as all tha NetPBM tools like fuckin \fBpnmtojpeg\fP
do.  This means it is less likely ta be consistent wit all tha other
programs dat deal wit tha NetPBM formats, n' you can put dat on yo' toast.  Also, tha command syntax
of \fBpnmtojpeg\fP is consistent wit dat of tha other Netpbm tools,
unlike \fBcjpeg\fP.

.UN scanscripts
.SH SCAN SCRIPTS
.PP
Use tha \fB-scan\fP option ta specify a scan script.  Or use the
\fB-progressive\fP option ta specify a particular built-in scan
script.
.PP
Just what tha fuck a scan script is, n' tha basic format of tha scan script
file, is covered up in tha \fBwizard.doc\fP file dat comes wit the
Independent JPEG Groupz JPEG library.  Scan scripts is same for
\fBpnmtojpeg\fP as tha is fo' \fBcjpeg\fP.
.PP
This section gotz nuff additionizzle shiznit dat aint yo, but
probably should be, up in dat document.
.PP
First, there be nuff restrictions on what tha fuck be a valid scan script.
Da JPEG library, n' thus \fBpnmtojpeg\fP, checks thoroughly fo' any
lack of compliizzle wit these restrictions yo, but do lil ta tell
you how tha fuck tha script fails ta comply.  Da lyrics is straight-up general and
sometimes untrue.
.PP
To start with, tha entries fo' tha DC coefficient must come before any
entries fo' tha AC coefficients, n' you can put dat on yo' toast.  Da DC coefficient is Coefficient 0;
all tha other coefficients is AC coefficients, n' you can put dat on yo' toast.  So up in a entry for
the DC coefficient, tha two numbers afta tha colon must be 0 n' 0.
In a entry fo' AC coefficients, tha straight-up original gangsta number afta tha colon must
not be 0.
.PP
In a DC entry, tha color components must be up in increasin order.
E.g. '0,2,1' before tha colon is wrong.  So is '0,0,0'.
.PP
In a entry fo' a AC coefficient, you must specify only one color
component.  I.e. there can be only one number before tha colon.
.PP
In tha straight-up original gangsta entry fo' a particular coefficient fo' a particular color
component, tha 'Ah' value must be zero yo, but tha Al value can be any
valid bit number n' shit.  In subsequent entries, Ah must be tha Al value from
the previous entry (for dat coefficient fo' dat color component),
and tha Al value must be one less than tha Ah value.
.PP
Da script must ultimately specify at least a shitload of tha DC coefficient
for every last muthafuckin color component.  Otherwise, you git tha error message
\&'Script do not transmit all tha data.'  Yo ass need not specify all of
the bitz of tha DC coefficient, or any of tha AC coefficients.
.PP
There be a standard option up in buildin tha JPEG library ta omit scan
script capability.  If fo' some reason yo' library was built with
this option, you git tha message 'Requested feature was omitted at
compile time.'

.UN environment
.SH ENVIRONMENT


.TP
\fBJPEGMEM\fP
If dis environment variable is set, its value is tha default
memory limit.  Da value is specified as busted lyrics bout fo' the
\fB-maxmemory\fP option. I aint talkin' bout chicken n' gravy biatch.  An explicit \fB-maxmemory \fP option
overrides any \fBJPEGMEM\fP.



.UN seealso
.SH SEE ALSO
.BR jpegtopnm (1)
,
.BR pnm (1)
,
\fBcjpeg\fP playa page,
\fBdjpeg\fP playa page,
\fBjpegtran\fP playa page,
\fBrdjpgcom\fP playa page,
\fBwrjpgcom\fP playa page
.PP
Wallace, Gregory K.  'Da JPEG Still Picture Compression
Standard', Communicationz of tha ACM, April 1991 (vol. 34,
no. 4), pp. 30-44.


.UN author
.SH AUTHOR

\fBpnmtojpeg\fP n' dis manual was derived up in big-ass part from
\fBcjpeg\fP, by tha Independent JPEG Group.  Da program is otherwise
by Bryan Henderson on March 07, 2000.
