.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHPUX 1"
.TH PERLHPUX 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhpux \- Perl version 5 on Hewlett\-Packard Unix (HP\-UX) systems
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document raps bout various featurez of \s-1HP\s0z Unix operatin system
(HP-UX) dat will affect how tha fuck Perl version 5 (hereafta just Perl) is
compiled and/or runs.
.SS "Usin perl as shipped wit HP-UX"
.IX Subsection "Usin perl as shipped wit HP-UX"
Application release September 2001, HP-UX 11.00 is tha straight-up original gangsta ta ship
with Perl. By tha time dat shiznit was perl\-5.6.1 up in /opt/perl. Da first
occurrence is on \s-1CD 5012\-7954\s0 n' can be installed using
.PP
.Vb 1
\&  swinstall \-s /cdrom perl
.Ve
.PP
assumin you have mounted dat \s-1CD\s0 on /cdrom.
.PP
That build was a portable hppa\-1.1 multithread build dat supports large
filez compiled wit gcc\-2.9\-hppa\-991112.
.PP
If you big-ass up a freshly smoked up installation, then (a newer) Perl is ghon be installed
automatically.  Pre-installed HP-UX systems now have mo' recent versions
of Perl n' tha updated modules.
.PP
Da straight-up legit (threaded) buildz from \s-1HP,\s0 as they is shipped on the
Application \s-1DVD/CD\s0z is available on
<http://www.software.hp.com/portal/swdepot/displayProductInfo.do?productNumber=PERL>
for both PA-RISC n' \s-1IPF \s0(Itanium Processor Family). They is built
with tha \s-1HP\s0 ANSI-C compila n' shit. Up till 5.8.8 dat was done by ActiveState.
.PP
To peep what tha fuck version is included on tha \s-1DVD \s0(assumed here ta be mounted
on /cdrom), issue dis command:
.PP
.Vb 4
\&  # swlist \-s /cdrom perl
\&  # perl           D.5.8.8.B  5.8.8 Perl Programmin Language
\&    perl.Perl5\-32  D.5.8.8.B  32\-bit 5.8.8 Perl Programmin Language wit Extensions
\&    perl.Perl5\-64  D.5.8.8.B  64\-bit 5.8.8 Perl Programmin Language wit Extensions
.Ve
.PP
To peep what tha fuck is installed on yo' system:
.PP
.Vb 8
\&  # swlist \-R perl
\&  # perl                    E.5.8.8.J  Perl Programmin Language
\&  # perl.Perl5\-32           E.5.8.8.J  32\-bit Perl Programmin Language wit Extensions
\&    perl.Perl5\-32.PERL\-MAN  E.5.8.8.J  32\-bit Perl Man Pages fo' IA
\&    perl.Perl5\-32.PERL\-RUN  E.5.8.8.J  32\-bit Perl Binaries fo' IA
\&  # perl.Perl5\-64           E.5.8.8.J  64\-bit Perl Programmin Language wit Extensions
\&    perl.Perl5\-64.PERL\-MAN  E.5.8.8.J  64\-bit Perl Man Pages fo' IA
\&    perl.Perl5\-64.PERL\-RUN  E.5.8.8.J  64\-bit Perl Binaries fo' IA
.Ve
.SS "Usin perl from \s-1HP\s0z portin centre"
.IX Subsection "Usin perl from HPz portin centre"
\&\s-1HP\s0 portin centre tries ta keep up wit hustla demand n' release
updates from tha Open Source hood yo. Havin precompiled Perl binaries
available is obvious, though \*(L"up-to-date\*(R" is suttin' relatizzle fo' realz. At the
moment of freestylin only perl\-5.10.1 was available (with 5.16.3 bein the
latest stable release from tha portas point of view).
.PP
Da \s-1HP\s0 portin centres is limited up in what tha fuck systems they is allowed
to port ta n' they probably chizzle tha two most recent \s-1OS\s0 versions
available.
.PP
\&\s-1HP\s0 has axed tha portin centre ta move Open Source binaries
from /opt ta /usr/local, so binaries produced since tha start
of July 2002 is located up in /usr/local.
.PP
One of \s-1HP\s0 portin centres \s-1URL\s0z is <http://hpux.connect.org.uk/>
Da port currently available is built wit \s-1GNU\s0 gcc.
.SS "Other prebuilt perl binaries"
.IX Subsection "Other prebuilt perl binaries"
To git even mo' recent perl depots fo' tha whole range of HP-UX, visit
H.Merijn Brandz joint at <http://mirrors.develooper.com/hpux/#Perl>.
Carefully read tha notes ta peep if tha available versions suit yo' needs.
.SS "Compilin Perl 5 on HP-UX"
.IX Subsection "Compilin Perl 5 on HP-UX"
When compilin Perl, you must use a \s-1ANSI C\s0 compila n' shit.  Da C compiler
that ships wit all HP-UX systems be a K&R compila dat should only be
used ta build freshly smoked up kernels.
.PP
Perl can be compiled wit either \s-1HP\s0z \s-1ANSI C\s0 compila or wit gcc.  The
forma is recommended, as not only can it compile Perl wit no
hang-up yo, but also can take advantage of features listed lata that
require tha use of \s-1HP\s0 compiler-specific command-line flags.
.PP
If you decizzle ta use gcc, make shizzle yo' installation is recent and
complete, n' be shizzle ta read tha Perl \s-1INSTALL\s0 file fo' mo' gcc-specific
details.
.SS "PA-RISC"
.IX Subsection "PA-RISC"
\&\s-1HP\s0z \s-1HP9000\s0 Unix systems run on \s-1HP\s0z own Precision Architecture
(PA-RISC) chip.  HP-UX used ta run on tha Motorola \s-1MC68000\s0 crew of
chips yo, but any machine wit dis chip up in it is like obsolete n' this
document aint gonna attempt ta address thangs fo' compilin Perl on the
Motorola chipset.
.PP
Da version of PA-RISC all up in tha time of dis documentz last update is 2.0,
which be also tha last there will be. \s-1HP\s0 PA-RISC systems is usually
refered ta wit model description \*(L"\s-1HP 9000\*(R".\s0 Da last \s-1CPU\s0 up in dis series
is tha \s-1PA\-8900. \s0 Support fo' PA-RISC architectured machines officially
endz as shown up in tha followin table:
.PP
.Vb 10
\&   PA\-RISC End\-of\-Life Roadmap
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | HP9000 | Superdome      | PA\-8700        | Sprin 2011     |
\& | 4\-128  |                | PA\-8800/sx1000 | Summer 2012     |
\& | cores  |                | PA\-8900/sx1000 | 2014            |
\& |        |                | PA\-8900/sx2000 | 2015            |
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | HP9000 | rp7410, rp8400 | PA\-8700        | Sprin 2011     |
\& | 2\-32   | rp7420, rp8420 | PA\-8800/sx1000 | 2012            |
\& | cores  | rp7440, rp8440 | PA\-8900/sx1000 | Autumn 2013     |
\& |        |                | PA\-8900/sx2000 | 2015            |
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | HP9000 | rp44x0         | PA\-8700        | Sprin 2011     |
\& | 1\-8    |                | PA\-8800/rp44x0 | 2012            |
\& | cores  |                | PA\-8900/rp44x0 | 2014            |
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | HP9000 | rp34x0         | PA\-8700        | Sprin 2011     |
\& | 1\-4    |                | PA\-8800/rp34x0 | 2012            |
\& | cores  |                | PA\-8900/rp34x0 | 2014            |
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.PP
From <http://www.hp.com/products1/evolution/9000/faqs.html>
.PP
.Vb 1
\& Da last order date fo' HP 9000 systems was December 31, 2008.
.Ve
.PP
A complete list of models all up in tha time tha \s-1OS\s0 was built is up in tha file
/usr/sam/lib/mo/sched.models. Da first column correspondz ta tha last
part of tha output of tha \*(L"model\*(R" command. Y'all KNOW dat shit, muthafucka!  Da second column is the
PA-RISC version n' tha third column is tha exact chip type used.
(Start browsin all up in tha bottom ta prevent mad drama ;\-)
.PP
.Vb 4
\&  # model
\&  9000/800/L1000\-44
\&  # grep L1000\-44 /usr/sam/lib/mo/sched.models
\&  L1000\-44        2.0     PA8500
.Ve
.SS "Portabilitizzle Between PA-RISC Versions"
.IX Subsection "Portabilitizzle Between PA-RISC Versions"
An executable compiled on a PA-RISC 2.0 platform aint gonna execute on a
PA-RISC 1.1 platform, even if they is hustlin tha same version of
HP-UX.  If yo ass is buildin Perl on a PA-RISC 2.0 platform n' want that
Perl ta also run on a PA-RISC 1.1, tha compila flags +DAportable and
+DS32 should be used.
.PP
It be no longer possible ta compile PA-RISC 1.0 executablez on either
the PA-RISC 1.1 or 2.0 platforms.  Da command-line flags is accepted,
but tha resultin executable aint gonna run when transferred ta a PA-RISC
1.0 system.
.SS "PA-RISC 1.0"
.IX Subsection "PA-RISC 1.0"
Da original gangsta version of PA-RISC, \s-1HP\s0 no longer sells any system wit dis chip.
.PP
Da followin systems contained PA-RISC 1.0 chips:
.PP
.Vb 2
\&  600, 635, 645, 808, 815, 822, 825, 832, 834, 835, 840, 842, 845, 850,
\&  852, 855, 860, 865, 870, 890
.Ve
.SS "PA-RISC 1.1"
.IX Subsection "PA-RISC 1.1"
An upgrade ta tha PA-RISC design, it shipped fo' nuff muthafuckin years up in nuff different
system.
.PP
Da followin systems contain wit PA-RISC 1.1 chips:
.PP
.Vb 10
\&  705, 710, 712, 715, 720, 722, 725, 728, 730, 735, 742, 743, 744, 745,
\&  747, 750, 755, 770, 777, 778, 779, 800, 801, 803, 806, 807, 809, 811,
\&  813, 816, 817, 819, 821, 826, 827, 829, 831, 837, 839, 841, 847, 849,
\&  851, 856, 857, 859, 867, 869, 877, 887, 891, 892, 897, A180, A180C,
\&  B115, B120, B132L, B132L+, B160L, B180L, C100, C110, C115, C120,
\&  C160L, D200, D210, D220, D230, D250, D260, D310, D320, D330, D350,
\&  D360, D410, DX0, DX5, DXO, E25, E35, E45, E55, F10, F20, F30, G30,
\&  G40, G50, G60, G70, H20, H30, H40, H50, H60, H70, I30, I40, I50, I60,
\&  I70, J200, J210, J210XC, K100, K200, K210, K220, K230, K400, K410,
\&  K420, S700i, S715, S744, S760, T500, T520
.Ve
.SS "PA-RISC 2.0"
.IX Subsection "PA-RISC 2.0"
Da most recent upgrade ta tha PA-RISC design, it added support for
64\-bit integer data.
.PP
Az of tha date of dis documentz last update, tha followin systems
contain PA-RISC 2.0 chips:
.PP
.Vb 8
\&  700, 780, 781, 782, 783, 785, 802, 804, 810, 820, 861, 871, 879, 889,
\&  893, 895, 896, 898, 899, A400, A500, B1000, B2000, C130, C140, C160,
\&  C180, C180+, C180\-XP, C200+, C400+, C3000, C360, C3600, CB260, D270,
\&  D280, D370, D380, D390, D650, J220, J2240, J280, J282, J400, J410,
\&  J5000, J5500XM, J5600, J7000, J7600, K250, K260, K260\-EG, K270, K360,
\&  K370, K380, K450, K460, K460\-EG, K460\-XP, K470, K570, K580, L1000,
\&  L2000, L3000, N4000, R380, R390, SD16000, SD32000, SD64000, T540,
\&  T600, V2000, V2200, V2250, V2500, V2600
.Ve
.PP
Just before \s-1HP\s0 took over Compaq, some systems was renamed. Y'all KNOW dat shit, muthafucka! tha link
that contained tha explanation is dead, so herez a gangbangin' finger-lickin' dirty-ass short summary:
.PP
.Vb 3
\&  HP 9000 A\-Class servers, now renamed HP Server rp2400 series.
\&  HP 9000 L\-Class servers, now renamed HP Server rp5400 series.
\&  HP 9000 N\-Class servers, now renamed HP Server rp7400.
\&
\&  rp2400, rp2405, rp2430, rp2450, rp2470, rp3410, rp3440, rp4410,
\&  rp4440, rp5400, rp5405, rp5430, rp5450, rp5470, rp7400, rp7405,
\&  rp7410, rp7420, rp7440, rp8400, rp8420, rp8440, Superdome
.Ve
.PP
Da current namin convention is:
.PP
.Vb 10
\&  aadddd
\&  ||||\`+\- 00 \- 99 relatizzle capacitizzle & newnizz (upgrades, etc.)
\&  |||\`\-\-\- unique number fo' each architecture ta ensure different
\&  |||     systems aint gots tha same numberin across
\&  |||     architectures
\&  ||\`\-\-\-\- 1 \- 9 identifies crew and/or relatizzle positioning
\&  ||
\&  |\`\-\-\-\-\- c = ia32 (cisc)
\&  |       p = pa\-risc
\&  |       x = ia\-64 (Itanium & Itanium 2)
\&  |       h = housing
\&  \`\-\-\-\-\-\- t = tower
\&          r = rack optimized
\&          s = supa scalable
\&          b = blade
\&          sa = appliance
.Ve
.SS "Itanium Processor Family (\s-1IPF\s0) n' HP-UX"
.IX Subsection "Itanium Processor Family (IPF) n' HP-UX"
HP-UX also runs on tha freshly smoked up Itanium processor. Shiiit, dis aint no joke.  This requires tha use
of a gangbangin' finger-lickin' different version of HP-UX (currently 11.23 or 11i v2), n' with
the exception of all dem differences detailed below n' up in lata sections,
Perl should compile wit no problems.
.PP
Although PA-RISC binaries can run on Itanium systems, you should not
attempt ta bust a PA-RISC version of Perl on a Itanium system.  This is
because shared libraries pimped on a Itanium system cannot be loaded
while hustlin a PA-RISC executable.
.PP
\&\s-1HP\s0 Itanium 2 systems is probably refered ta wit model description
\&\*(L"\s-1HP\s0 Integrity\*(R".
.SS "Itanium, Itanium 2 & Madison 6"
.IX Subsection "Itanium, Itanium 2 & Madison 6"
\&\s-1HP\s0 also ships servers wit tha 128\-bit Itanium processor(s). Da cx26x0
is holla'd at ta have Madison 6 fo' realz. Az of tha date of dis documentz last update,
the followin systems contain Itanium or Itanium 2 chips (this is likely
to be outta date):
.PP
.Vb 4
\&  BL60p, BL860c, BL870c, BL890c, cx2600, cx2620, rx1600, rx1620, rx2600,
\&  rx2600hptc, rx2620, rx2660, rx2800, rx3600, rx4610, rx4640, rx5670,
\&  rx6600, rx7420, rx7620, rx7640, rx8420, rx8620, rx8640, rx9610,
\&  sx1000, sx2000
.Ve
.PP
To peep all bout yo' machine, type
.PP
.Vb 3
\&  # model
\&  ia64 hp server rx2600
\&  # /usr/contrib/bin/machinfo
.Ve
.SS "HP-UX versions"
.IX Subsection "HP-UX versions"
Not all architectures (\s-1PA\s0 = PA-RISC, \s-1IPF\s0 = Itanium Processor Family)
support all versionz of HP-UX, here be a gangbangin' finger-lickin' dirty-ass short list
.PP
.Vb 8
\&  HP\-UX version  Kernel  Architecture End\-of\-factory support
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-  \-\-\-\-\-\-  \-\-\-\-\-\-\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  10.20          32 bit  PA           30\-Jun\-2003
\&  11.00          32/64   PA           31\-Dec\-2006
\&  11.11  11i v1  32/64   PA           31\-Dec\-2015
\&  11.22  11i v2     64        IPF     30\-Apr\-2004
\&  11.23  11i v2     64   PA & IPF     31\-Dec\-2015
\&  11.31  11i v3     64   PA & IPF     31\-Dec\-2020 (PA) 31\-Dec\-2022 (IPF)
.Ve
.PP
See fo' tha full list of hardware/OS support n' expected end-of-life
<http://www.hp.com/go/hpuxservermatrix>
.SS "Buildin Dynamic Extensions on HP-UX"
.IX Subsection "Buildin Dynamic Extensions on HP-UX"
HP-UX supports dynamically loadable libraries (shared libraries).
Shared libraries end wit tha suffix .sl.  On Itanium systems,
they end wit tha suffix .so.
.PP
Shared libraries pimped on a platform rockin a particular PA-RISC
version is not usable on platforms rockin a earlier PA-RISC version by
default.  But fuck dat shiznit yo, tha word on tha street is dat dis backwardz compatibilitizzle may be enabled rockin the
same +DAportable compila flag (with tha same PA-RISC 1.0 caveat
mentioned above).
.PP
Shared libraries pimped on a Itanium platform cannot be loaded on
a PA-RISC platform.  Shared libraries pimped on a PA-RISC platform
can only be loaded on a Itanium platform if it aint nuthin but a PA-RISC executable
that be attemptin ta load tha PA-RISC library.  A PA-RISC shared
library cannot be loaded tha fuck into a Itanium executable nor vice-versa.
.PP
To create a gangbangin' finger-lickin' dirty-ass shared library, tha followin steps must be performed:
.PP
.Vb 4
\&  1. Compile source modulez wit +z or +Z flag ta create a .o module
\&     which gotz nuff Position\-Independent Code (PIC).  Da linker will
\&     rap  up in tha next step if +Z was needed.
\&     (For gcc, tha appropriate flag is \-fpic or \-fPIC.)
\&
\&  2. Link tha shared library rockin tha \-b flag.  If tha code calls
\&     any functions up in other system libraries (e.g., libm), it must
\&     be included on dis line.
.Ve
.PP
(Note dat these steps is probably handled automatically by tha extension's
Makefile).
.PP
If these dependent libraries is not listed at shared library creation
time, yo big-ass booty is ghon git fatal \*(L"Unresolved symbol\*(R" errors at run time when the
library is loaded.
.PP
Yo ass may create a gangbangin' finger-lickin' dirty-ass shared library dat refers ta another library, which
may be either a archive library or a gangbangin' finger-lickin' dirty-ass shared library.  If dis second
library be a gangbangin' finger-lickin' dirty-ass shared library, dis is called a \*(L"dependent library\*(R".  The
dependent libraryz name is recorded up in tha main shared library yo, but it
is not linked tha fuck into tha shared library.  Instead, it is loaded when the
main shared library is loaded. Y'all KNOW dat shit, muthafucka!  This can cause problems if you build an
extension on one system n' move it ta another system where the
libraries may not be located up in tha same place as on tha straight-up original gangsta system.
.PP
If tha referred library be a archive library, then it is treated as a
simple collection of .o modulez (all of which must contain \s-1PIC\s0).  These
modulez is then linked tha fuck into tha shared library.
.PP
Note dat it be all gravy ta create a library which gotz nuff a thugged-out dependent
library dat be already linked tha fuck into perl.
.PP
Some extensions, like DB_File n' Compress::Zlib use/require prebuilt
libraries fo' tha perl extensions/modulez ta work. If these libraries
are built rockin tha default configuration, it might happen dat you
run tha fuck into a error like \*(L"invalid loader fixup\*(R" durin load phase.
\&\s-1HP\s0 be aware of dis problem.  Search tha HP-UX cxx-dev forums for
raps bout tha subject.  Da short answer is dat \fBeverything\fR
(all libraries, every last muthafuckin thang) must be compiled wit \f(CW\*(C`+z\*(C'\fR or \f(CW\*(C`+Z\*(C'\fR ta be
\&\s-1PIC \s0(posizzle independent code).  (For gcc, dat would be
\&\f(CW\*(C`\-fpic\*(C'\fR or \f(CW\*(C`\-fPIC\*(C'\fR).  In HP-UX 11.00 or newer tha linker
error message should tell tha name of tha offendin object file.
.PP
A mo' general approach is ta intervene manually, as wit a example for
the DB_File module, which requires SleepyCatz libdb.sl:
.PP
.Vb 7
\&  # cd .../db\-3.2.9/build_unix
\&  # vi Makefile
\&  ... add +Z ta all cflags ta create shared objects
\&  CFLAGS=         \-c $(CPPFLAGS) +Z \-Ae +O2 +Onolimit \e
\&                  \-I/usr/local/include \-I/usr/include/X11R6
\&  CXXFLAGS=       \-c $(CPPFLAGS) +Z \-Ae +O2 +Onolimit \e
\&                  \-I/usr/local/include \-I/usr/include/X11R6
\&
\&  # make clean
\&  # make
\&  # mkdir tmp
\&  # cd tmp
\&  # ar x ../libdb.a
\&  # ld \-b \-o libdb\-3.2.sl *.o
\&  # mv libdb\-3.2.sl /usr/local/lib
\&  # rm *.o
\&  # cd /usr/local/lib
\&  # rm \-f libdb.sl
\&  # ln \-s libdb\-3.2.sl libdb.sl
\&
\&  # cd .../DB_File\-1.76
\&  # make distclean
\&  # perl Makefile.PL
\&  # make
\&  # make test
\&  # make install
.Ve
.PP
Az of db\-4.2.x it is no longer needed ta do dis by hand. Y'all KNOW dat shit, muthafucka! Sleepycat
has chizzled tha configuration process ta add +z on HP-UX automatically.
.PP
.Vb 2
\&  # cd .../db\-4.2.25/build_unix
\&  # env CFLAGS=+DD64 LDFLAGS=+DD64 ../dist/configure
.Ve
.PP
should work ta generate 64bit shared libraries fo' HP-UX 11.00 n' 11i.
.PP
It be no longer possible ta link PA-RISC 1.0 shared libraries (even
though tha command-line flags is still present).
.PP
PA-RISC n' Itanium object filez is not interchangeable.  Although
you may be able ta use ar ta create a archive library of PA-RISC
object filez on a Itanium system, you cannot link against it using
an Itanium link editor.
.SS "Da \s-1HP ANSI C\s0 Compiler"
.IX Subsection "Da HP ANSI C Compiler"
When rockin dis compila ta build Perl, you should make shizzle dat the
flag \-Aa be added ta tha cpprun n' cppstdin variablez up in tha config.sh
file (though peep tha section on 64\-bit perl below). If yo ass is rockin a
recent version of tha Perl distribution, these flags is set automatically.
.PP
Even though HP-UX 10.20 n' 11.00 is not actively maintained by \s-1HP\s0
anymore, thugged-out shiznit fo' tha \s-1HP ANSI C\s0 compila is still available from
time ta time, n' it might be advisable ta peep if thugged-out shiznit is applicable.
At tha moment of writing, tha sickest fuckins available patches fo' 11.00 that
should be applied is \s-1PHSS_35098, PHSS_35175, PHSS_35100, PHSS_33036,\s0
and \s-1PHSS_33902\s0). If you gotz a \s-1SUM\s0 account, you can use it ta search
for thugged-out shit/patches. Enta \*(L"\s-1ANSI\*(R"\s0 as keyword.
.SS "Da \s-1GNU C\s0 Compiler"
.IX Subsection "Da GNU C Compiler"
When yo ass is goin ta use tha \s-1GNU C\s0 compila (gcc), n' you don't have
gcc yet, you can either build it yo ass from tha sources (available
from e.g. <http://gcc.gnu.org/mirrors.html>) or fetch
a prebuilt binary from tha \s-1HP\s0 portin center
at <http://hpux.connect.org.uk/hppd/cgi\-bin/search?term=gcc&Search=Search>
or from tha \s-1DSPP \s0(you need ta be a member) at
<http://h21007.www2.hp.com/portal/site/dspp/menuitem.863c3e4cbcdc3f3515b49c108973a801?ciid=2a08725cc2f02110725cc2f02110275d6e10RCRD&jumpid=reg_r1002_usen_c\-001_title_r0001>
(Browse all up in tha list, cuz there be often multiple versions of
the same package available).
.PP
Most mentioned distributions is depots yo. H.Merijn Brand has made prebuilt
gcc binaries available on <http://mirrors.develooper.com/hpux/> and/or
<http://www.cmve.net/~merijn/> fo' HP-UX 10.20 (only 32bit), HP-UX 11.00,
HP-UX 11.11 (HP-UX 11i v1), n' HP-UX 11.23 (HP-UX 11i v2 PA-RISC) up in both
32\- n' 64\-bit versions. For HP-UX 11.23 \s-1IPF\s0 n' HP-UX 11.31 \s-1IPF\s0 depots are
available like a muthafucka. Da \s-1IPF\s0 versions do not need two versionz of \s-1GNU\s0 gcc.
.PP
On PA-RISC you need a gangbangin' finger-lickin' different compila fo' 32\-bit applications n' for
64\-bit applications. On PA-RISC, 32\-bit objects n' 64\-bit objects do
not mix. Period. Y'all KNOW dat shit, muthafucka! There is no different behaviour fo' \s-1HP\s0 C\-ANSI-C or \s-1GNU\s0
gcc. Right back up in yo muthafuckin ass. So if you require yo' perl binary ta use 64\-bit libraries, like
Oracle\-64bit, you \s-1MUST\s0 build a 64\-bit perl.
.PP
Buildin a 64\-bit capable gcc on PA-RISC from source is possible only when
you have tha \s-1HP C\-ANSI C\s0 compila or a already hustlin 64\-bit binary of
gcc available. Best performizzle fo' perl be  bigged up  wit \s-1HP\s0z native
compiler.
.SS "Usin Big-Ass Filez wit Perl on HP-UX"
.IX Subsection "Usin Big-Ass Filez wit Perl on HP-UX"
Beginnin wit HP-UX version 10.20, filez larger than 2GB (2^31 bytes)
may be pimped n' manipulated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Three separate methodz of bustin this
are available.  Of these methods, tha dopest method fo' Perl is ta compile
usin tha \-Duselargefilez flag ta Configure.  This causes Perl ta be
compiled rockin structures n' functions up in which these is 64 bits wide,
rather than 32 bits wide.  (Note dat dis will only work wit \s-1HP\s0z \s-1ANSI
C\s0 compila n' shit.  If you wanna compile Perl rockin gcc, yo big-ass booty is ghon gotta get
a version of tha compila dat supports 64\-bit operations. Right back up in yo muthafuckin ass. See above for
where ta find dat shit.)
.PP
There is some drawbacks ta dis approach.  One is dat any extension
which calls any file-manipulatin C function will need ta be recompiled
(just follow tha usual \*(L"perl Makefile.PL; make; make test; make install\*(R"
procedure).
.PP
Da list of functions dat will need ta recompiled is:
  creat,          fgetpos,        fopen,
  freopen,        fsetpos,        fstat,
  fstatvfs,       fstatvfsdev,    ftruncate,
  ftw,            lockf,          lseek,
  lstat,          mmap,           nftw,
  open,           prealloc,       stat,
  statvfs,        statvfsdev,     tmpfile,
  truncate,       getrlimit,      setrlimit
.PP
Another drawback is only valid fo' Perl versions before 5.6.0.  This
drawback is dat tha seek n' tell functions (both tha builtin version
and \s-1POSIX\s0 module version) aint gonna big-ass up erectly.
.PP
It be straight fuckin recommended dat you use dis flag when you run
Configure.  If you do not do dis yo, but lata answer tha question about
pimpin' filez when Configure asks you, you may git a cold-ass lil configuration that
cannot be compiled, or dat do not function as expected.
.SS "Threaded Perl on HP-UX"
.IX Subsection "Threaded Perl on HP-UX"
It be possible ta compile a version of threaded Perl on any version of
HP-UX before 10.30 yo, but it is straight fuckin suggested dat you be hustlin on
HP-UX 11.00 at least.
.PP
To compile Perl wit threads, add \-Dusethreadz ta tha arguments of
Configure.  Verify dat tha \-D_POSIX_C_SOURCE=199506L compila flag is
automatically added ta tha list of flags.  Also make shizzle dat \-lpthread
is listed before \-lc up in tha list of libraries ta link Perl with. The
hints provided fo' HP-UX durin Configure will try straight-up hard ta get
this right fo' yo thugged-out ass.
.PP
HP-UX versions before 10.30 require a separate installation of a \s-1POSIX\s0
threadz library package. Two examplez is tha \s-1HP DCE\s0 package, available
on \*(L"HP-UX Hardware Extensions 3.0, Install n' Core \s-1OS,\s0 Release 10.20,
April 1999 (B3920\-13941)\*(R" or tha Freely available \s-1PTH\s0 package, available
on H.Merijnz joint (<http://mirrors.develooper.com/hpux/>). Da use of \s-1PTH\s0
will be unsupported up in perl\-5.12 n' up n' is rather buggy up in 5.11.x.
.PP
If yo ass is goin ta use tha \s-1HP DCE\s0 package, tha library used fo' threading
is /usr/lib/libcma.sl yo, but there done been multiple thugged-out shiznit of that
library over time. Perl will build wit tha straight-up original gangsta version yo, but it
will not pass tha test suite. Older Oracle versions might be a cold-ass lil compelling
reason not ta update dat library, otherwise please find a newer version
in one of tha followin patches: \s-1PHSS_19739, PHSS_20608,\s0 or \s-1PHSS_23672\s0
.PP
reformatted output:
.PP
.Vb 10
\&  d3:/usr/lib 106 > what tha fuck libcma\-*.1
\&  libcma\-00000.1:
\&     HP DCE/9000 1.5               Module: libcma.sl (Export)
\&                                   Date: Apr 29 1996 22:11:24
\&  libcma\-19739.1:
\&     HP DCE/9000 1.5 PHSS_19739\-40 Module: libcma.sl (Export)
\&                                   Date: Sep  4 1999 01:59:07
\&  libcma\-20608.1:
\&     HP DCE/9000 1.5 PHSS_20608    Module: libcma.1 (Export)
\&                                   Date: Dec  8 1999 18:41:23
\&  libcma\-23672.1:
\&     HP DCE/9000 1.5 PHSS_23672    Module: libcma.1 (Export)
\&                                   Date: Apr  9 2001 10:01:06
\&  d3:/usr/lib 107 >
.Ve
.PP
If you chizzle fo' tha \s-1PTH\s0 package, use swinstall ta install pth in
the default location (/opt/pth), n' then make symbolic links ta the
libraries from /usr/lib
.PP
.Vb 2
\&  # cd /usr/lib
\&  # ln \-s /opt/pth/lib/libpth* .
.Ve
.PP
For buildin perl ta support Oracle, it need ta be linked wit libcl
and libpthread. Y'all KNOW dat shit, muthafucka! So even if yo' perl be a unthreaded build, these
libraries might be required. Y'all KNOW dat shit, muthafucka! See \*(L"Oracle on HP-UX\*(R" below.
.SS "64\-bit Perl on HP-UX"
.IX Subsection "64-bit Perl on HP-UX"
Beginnin wit HP-UX 11.00, programs compiled under HP-UX can take
advantage of tha \s-1LP64\s0 programmin environment (\s-1LP64\s0 means Longs and
Pointas is 64 bits wide), up in which scalar variablez is ghon be able
to hold numbers larger than 2^32 wit complete precision. I aint talkin' bout chicken n' gravy biatch.  Perl has
proven ta be consistent n' reliable up in 64bit mode since 5.8.1 on
all HP-UX 11.xx.
.PP
Az of tha date of dis document, Perl is straight-up 64\-bit compliant on
HP-UX 11.00 n' up fo' both cc\- n' gcc builds. If yo ass be bout to
build a 64\-bit perl wit \s-1GNU\s0 gcc, please read tha gcc section carefully.
.PP
Should a user have tha need fo' compilin Perl up in tha \s-1LP64\s0 environment,
use tha \-Duse64bitall flag ta Configure.  This will force Perl ta be
compiled up in a pure \s-1LP64\s0 environment (with tha +DD64 flag fo' \s-1HP\s0 C\-ANSI-C,
with no additionizzle options fo' \s-1GNU\s0 gcc 64\-bit on PA-RISC, n' with
\&\-mlp64 fo' \s-1GNU\s0 gcc on Itanium).
If you wanna compile Perl rockin gcc, yo big-ass booty is ghon gotta git a version of
the compila dat supports 64\-bit operations.)
.PP
Yo ass can also use tha \-Duse64bitint flag ta Configure.  Although there
are some minor differences between compilin Perl wit dis flag versus
the \-Duse64bitall flag, they should not be noticeable from a Perl user's
perspective. When configurin \-Duse64bitint rockin a 64bit gcc on a
pa-risc architecture, \-Duse64bitint is silently promoted ta \-Duse64bitall.
.PP
In both cases, it is straight fuckin recommended dat you use these flags when
you run Configure.  If you do not use do dis yo, but lata answer the
questions bout 64\-bit numbers when Configure asks you, you may git a
configuration dat cannot be compiled, or dat do not function as
expected.
.SS "Oracle on HP-UX"
.IX Subsection "Oracle on HP-UX"
Usin perl ta connect ta Oracle databases all up in \s-1DBI\s0 n' DBD::Oracle
has caused a shitload of playas nuff headaches. Read \s-1README\s0.hpux up in the
DBD::Oracle fo' much mo' shiznit. I aint talkin' bout chicken n' gravy biatch. Da reason ta mention it here
is dat Oracle requires a perl built wit libcl n' libpthread, the
latta even when perl is build without threads. Buildin perl using
all defaults yo, but still enablin ta build DBD::Oracle lata on can be
 bigged up  using
.PP
.Vb 1
\&  Configure \-A prepend:libswanted=\*(Aqcl pthread \*(Aq ...
.Ve
.PP
Do not forget tha space before tha trailin quote.
.PP
Also note dat dis do not (yet) work wit all configurations,
it is known ta fail wit 64\-bit versionz of \s-1GCC.\s0
.SS "\s-1GDBM\s0 n' Threadz on HP-UX"
.IX Subsection "GDBM n' Threadz on HP-UX"
If you attempt ta compile Perl wit (\s-1POSIX\s0) threadz on a 11.X system
and also link up in tha \s-1GDBM\s0 library, then Perl will immediately core dump
when it starts up.  Da only workaround at dis point is ta relink the
\&\s-1GDBM\s0 library under 11.X, then relink it tha fuck into Perl.
.PP
the error might show suttin' like:
.PP
Pthread internal error: message: _\|\fI_libc_reinit()\fR failed, file: ../pthreads/pthread.c, line: 1096
Return Pointa is 0xc082bf33
sh: 5345 Quit(coredump)
.PP
and Configure will give up.
.SS "\s-1NFS\s0 filesystems n' \fIutime\fP\|(2) on HP-UX"
.IX Subsection "NFS filesystems n' utime on HP-UX"
If yo ass is compilin Perl on a remotely-mounted \s-1NFS\s0 filesystem, tha test
io/fs.t may fail on test #18.  This appears ta be a funky-ass bug up in HP-UX n' no
fix is currently available.
.SS "HP-UX Kernel Parametas (maxdsiz) fo' Compilin Perl"
.IX Subsection "HP-UX Kernel Parametas (maxdsiz) fo' Compilin Perl"
By default, HP-UX comes configured wit a maximum data segment size of
64MB.  This is too lil' small-ass ta erectly compile Perl wit tha maximum
optimization levels.  Yo ass can increase tha size of tha maxdsiz kernel
parameta all up in tha use of \s-1SAM.\s0
.PP
When rockin tha \s-1GUI\s0 version of \s-1SAM,\s0 click on tha Kernel Configuration
icon, then tha Configurable Parametas icon. I aint talkin' bout chicken n' gravy biatch.  Scroll down n' select
the maxdsiz line.  From tha Actions menu, select tha Modify Configurable
Parameta item.  Insert tha freshly smoked up formula tha fuck into tha Formula/Value box.
Then follow tha instructions ta rebuild yo' kernel n' reboot your
system.
.PP
In general, a value of 256MB (or \*(L"256*1024*1024\*(R") is sufficient for
Perl ta compile at maximum optimization.
.SH "nss_delete core dump from op/pwent or op/grent"
.IX Header "nss_delete core dump from op/pwent or op/grent"
Yo ass may git a funky-ass bus error core dump from tha op/pwent or op/grent
tests, n' you can put dat on yo' toast. If compiled wit \-g yo big-ass booty is ghon peep a stack trace much like
the following:
.PP
.Vb 10
\&  #0  0xc004216c up in  () from /usr/lib/libc.2
\&  #1  0xc00d7550 up in _\|_nss_src_state_destr () from /usr/lib/libc.2
\&  #2  0xc00d7768 up in _\|_nss_src_state_destr () from /usr/lib/libc.2
\&  #3  0xc00d78a8 up in nss_delete () from /usr/lib/libc.2
\&  #4  0xc01126d8 up in endpwent () from /usr/lib/libc.2
\&  #5  0xd1950 up in Perl_pp_epwent () from ./perl
\&  #6  0x94d3c up in Perl_runops_standard () from ./perl
\&  #7  0x23728 up in S_run_body () from ./perl
\&  #8  0x23428 up in perl_run () from ./perl
\&  #9  0x2005c up in main () from ./perl
.Ve
.PP
Da key here is tha \f(CW\*(C`nss_delete\*(C'\fR call.  One workaround fo' this
bug seems ta be ta create add ta tha file \fI/etc/nsswitch.conf\fR
(at least) tha followin lines
.PP
.Vb 2
\&  group: files
\&  passwd: files
.Ve
.PP
Whether yo ass is rockin \s-1NIS\s0 do not matter n' shit.  Amazingly enough,
the same bug also affects Solaris.
.ie n .SH "error: pastin "")"" n' ""l"" do not give a valid preprocessin token"
.el .SH "error: pastin ``)'' n' ``l'' do not give a valid preprocessin token"
.IX Header "error: pastin ) n' l do not give a valid preprocessin token"
There seems ta be a gangbangin' fucked up system header file up in HP-UX 11.00 that
breaks perl buildin up in 32bit mode wit \s-1GNU\s0 gcc\-4.x causin this
error. Shiiit, dis aint no joke. Da same file fo' HP-UX 11.11 (even though tha file is older)
does not show dis failure, n' has tha erect definition, so the
best fix is ta patch tha header ta match:
.PP
.Vb 9
\& \-\-\- /usr/include/inttypes.h  2001\-04\-20 18:42:14 +0200
\& +++ /usr/include/inttypes.h  2000\-11\-14 09:00:00 +0200
\& @@ \-72,7 +72,7 @@
\&  #define UINT32_C(_\|_c)                   _\|_CONCAT_U_\|_(_\|_c)
\&  #else /* _\|_LP64 */
\&  #define INT32_C(_\|_c)                    _\|_CONCAT_\|_(_\|_c,l)
\& \-#define UINT32_C(_\|_c)                   _\|_CONCAT_\|_(_\|_CONCAT_U_\|_(_\|_c),l)
\& +#define UINT32_C(_\|_c)                   _\|_CONCAT_\|_(_\|_c,ul)
\&  #endif /* _\|_LP64 */
\&
\&  #define INT64_C(_\|_c)                    _\|_CONCAT_L_\|_(_\|_c,l)
.Ve
.SH "Miscellaneous"
.IX Header "Miscellaneous"
HP-UX 11 Y2K patch \*(L"Y2K\-1100 B.11.00.B0125 HP-UX Core \s-1OS\s0 Year 2000
Patch Bundle\*(R" has been reported ta break tha io/fs test #18 which
tests whether \fIutime()\fR can chizzle timestamps.  Da Y2K patch seems to
break \fIutime()\fR so dat over \s-1NFS\s0 tha timestamps do not git chizzled
(on local filesystems \fIutime()\fR still works). This has probably been
fixed on yo' system by now, nahmeean?
.SH "AUTHOR"
.IX Header "AUTHOR"
H.Merijn Brand <h.m.brand@xs4all.nl>
Jeff Okamoto <okamoto@corp.hp.com>
.PP
With much assistizzle regardin shared libraries from Marc Sabatella.
