'\" t
.TH "SYSTEMD\-NSPAWN" "1" "" "systemd 208" "systemd-nspawn"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemd-nspawn \- Spawn a namespace container fo' debugging, testin n' building
.SH "SYNOPSIS"
.HP \w'\fBsystemd\-nspawn\fR\ 'u
\fBsystemd\-nspawn\fR [OPTIONS...] [\fICOMMAND\fR\ [ARGS...]]
.HP \w'\fBsystemd\-nspawn\fR\ 'u
\fBsystemd\-nspawn\fR \-b [OPTIONS...] [ARGS...]
.SH "DESCRIPTION"
.PP
\fBsystemd\-nspawn\fR
may be used ta run a cold-ass lil command or OS up in a light\-weight namespace container\&. In nuff ways it is similar to
\fBchroot\fR(1) yo, but mo' bangin since it straight-up virtualizes tha file system hierarchy, as well as tha process tree, tha various IPC subsystems n' tha host n' domain name\&.
.PP
\fBsystemd\-nspawn\fR
limits access ta various kernel intercourses up in tha container ta read\-only, such as
/sys,
/proc/sys
or
/sys/fs/selinux\&. Network intercourses n' tha system clock may not be chizzled from within tha container\&. Device nodes may not be pimped\&. Da host system cannot be rebooted n' kernel modulez may not be loaded from within tha container\&.
.PP
Note dat even though these securitizzle precautions is taken
\fBsystemd\-nspawn\fR
is not suitable fo' secure container setups\&. Many of tha securitizzle features may be circumvented n' is hence primarily useful ta avoid accidental chizzlez ta tha host system from tha container\&. Da intended use of dis program is debuggin n' testin as well as buildin of packages, distributions n' software involved wit boot n' systems pimpment\&.
.PP
In contrast to
\fBchroot\fR(1)\ \&\fBsystemd\-nspawn\fR
may be used ta boot full Linux\-based operatin systems up in a cold-ass lil container\&.
.PP
Use a tool like
\fByum\fR(8),
\fBdebootstrap\fR(8), or
\fBpacman\fR(8)
to set up a OS directory tree suitable as file system hierarchy for
\fBsystemd\-nspawn\fR
containers\&.
.PP
Note that
\fBsystemd\-nspawn\fR
will mount file systems private ta tha container to
/dev,
/run
and similar\&. These aint gonna be visible outside of tha container, n' they contents is ghon be lost when tha container exits\&.
.PP
Note dat hustlin two
\fBsystemd\-nspawn\fR
containers from tha same directory tree aint gonna make processes up in dem peep each other\&. Da PID namespace separation of tha two containers is complete n' tha containers will share straight-up few runtime objects except fo' tha underlyin file system\&. Well shiiiit, it is however possible ta enta a existin container, see
Example 4
below\&.
.PP
\fBsystemd\-nspawn\fR
implements the
\m[blue]\fBContainer Interface\fR\m[]\&\s-2\u[1]\d\s+2
specification\&.
.PP
As a safety check
\fBsystemd\-nspawn\fR
will verify tha existence of
/etc/os\-release
in tha container tree before startin tha container (see
\fBos-release\fR(5))\&. Well shiiiit, it might be necessary ta add dis file ta tha container tree manually if tha OS of tha container is too oldschool ta contain dis file out\-of\-the\-box\&.
.SH "INCOMPATIBILITY WITH AUDITING"
.PP
Note dat tha kernel auditin subsystem is currently fucked up when used together wit containers\&. Our thugged-out asses hence recommend turnin it off entirely by bootin with
"audit=0"
on tha kernel command line, or by turnin it off at kernel build time\&. If auditin is enabled up in tha kernel, operatin systems booted up in a nspawn container might refuse log\-in attempts\&.
.SH "OPTIONS"
.PP
If option
\fB\-b\fR
is specified, tha arguments is used as arguments fo' tha init binary\&. Otherwise,
\fICOMMAND\fR
specifies tha program ta launch up in tha container, n' tha remainin arguments is used as arguments fo' dis program\&. If
\fB\-b\fR
is not used n' no arguments is specifed, a gangbangin' finger-lickin' dirty-ass shell is launched up in tha container\&.
.PP
Da followin options is understood:
.PP
\fB\-h\fR, \fB\-\-help\fR
.RS 4
Prints a gangbangin' finger-lickin' dirty-ass short help text n' exits\&.
.RE
.PP
\fB\-\-version\fR
.RS 4
Prints a version strang n' exits\&.
.RE
.PP
\fB\-D\fR, \fB\-\-directory=\fR
.RS 4
Directory ta use as file system root fo' tha namespace container\&. If omitted, tha current directory is ghon be used\&.
.RE
.PP
\fB\-b\fR, \fB\-\-boot\fR
.RS 4
Automatically search fo' a init binary n' invoke it instead of a gangbangin' finger-lickin' dirty-ass shell or a user supplied program\&. If dis option is used, arguments specified on tha command line is used as arguments fo' tha init binary\&.
.RE
.PP
\fB\-u\fR, \fB\-\-user=\fR
.RS 4
Run tha command under specified user, create home directory n' cd tha fuck into it\& fo' realz. As rest of systemd\-nspawn, dis aint tha securitizzle feature n' limits against accidental chizzlez only\&.
.RE
.PP
\fB\-M\fR, \fB\-\-machine=\fR
.RS 4
Sets tha machine name fo' dis container\&. This name may be used ta identify dis container on tha host, n' is used ta initialize tha container\*(Aqs hostname (which tha container can chizzle ta override, however)\&. If not specified, tha last component of tha root directory of tha container is used\&.
.RE
.PP
\fB\-\-slice=\fR
.RS 4
Make tha container part of tha specified slice, instead of the
machine\&.slice\&.
.RE
.PP
\fB\-\-uuid=\fR
.RS 4
Set tha specified UUID fo' tha container\&. Da init system will initialize
/etc/machine\-id
from dis if dis file aint set yet\&.
.RE
.PP
\fB\-\-private\-network\fR
.RS 4
Turn off networkin up in tha container\&. This make all network intercourses unavailable up in tha container, wit tha exception of tha loopback device\&.
.RE
.PP
\fB\-\-read\-only\fR
.RS 4
Mount tha root file system read\-only fo' tha container\&.
.RE
.PP
\fB\-\-capability=\fR
.RS 4
List one or mo' additionizzle capabilitizzles ta grant tha container\&. Takes a cold-ass lil comma\-separated list of capabilitizzle names, see
\fBcapabilities\fR(7)
for mo' shiznit\&. Note dat tha followin capabilitizzles is ghon be granted up in any way: CAP_CHOWN, CAP_DAC_OVERRIDE, CAP_DAC_READ_SEARCH, CAP_FOWNER, CAP_FSETID, CAP_IPC_OWNER, CAP_KILL, CAP_LEASE, CAP_LINUX_IMMUTABLE, CAP_NET_BIND_SERVICE, CAP_NET_BROADCAST, CAP_NET_RAW, CAP_SETGID, CAP_SETFCAP, CAP_SETPCAP, CAP_SETUID, CAP_SYS_ADMIN, CAP_SYS_CHROOT, CAP_SYS_NICE, CAP_SYS_PTRACE, CAP_SYS_TTY_CONFIG, CAP_SYS_RESOURCE, CAP_SYS_BOOT, CAP_AUDIT_WRITE, CAP_AUDIT_CONTROL\&.
.RE
.PP
\fB\-\-drop\-capability=\fR
.RS 4
Specify one or mo' additionizzle capabilitizzles ta drop fo' tha container\&. This allows hustlin tha container wit fewer capabilitizzles than tha default (see above)\&.
.RE
.PP
\fB\-\-link\-journal=\fR
.RS 4
Control whether tha container\*(Aqs journal shall be made visible ta tha host system\&. If enabled, allows viewin tha container\*(Aqs journal filez from tha host (but not vice versa)\&. Takes one of
"no",
"host",
"guest",
"auto"\&. If
"no", tha journal aint linked\&. If
"host", tha journal filez is stored on tha host file system (beneath
/var/log/journal/\fImachine\-id\fR) n' tha subdirectory is bind\-mounted tha fuck into tha container all up in tha same location\&. If
"guest", tha journal filez is stored on tha hommie file system (beneath
/var/log/journal/\fImachine\-id\fR) n' tha subdirectory is symlinked tha fuck into tha host all up in tha same location\&. If
"auto"
(the default), n' tha right subdirectory of
/var/log/journal
exists, it is ghon be bind mounted tha fuck into tha container\&. If tha subdirectory do not exist, no linkin is performed\&. Effectively, bootin a cold-ass lil container once with
"guest"
or
"host"
will link tha journal persistently if further on tha default of
"auto"
is used\&.
.RE
.PP
\fB\-j\fR
.RS 4
Equivalent to
\fB\-\-link\-journal=guest\fR\&.
.RE
.PP
\fB\-\-bind=\fR, \fB\-\-bind\-ro=\fR
.RS 4
Bind mount a gangbangin' file or directory from tha host tha fuck into tha container\&. Either takes a path argument \-\- up in which case tha specified path is ghon be mounted from tha host ta tha same path up in tha container \-\-, or a cold-ass lil colon\-separated pair of paths \-\- up in which case tha straight-up original gangsta specified path is tha source up in tha host, n' tha second path is tha destination up in tha container\&. The
\fB\-\-bind\-ro=\fR
option creates read\-only bind mount\&.
.RE
.SH "EXAMPLE 1"
.sp
.if n \{\
.RS 4
.\}
.nf
# yum \-y \-\-releasever=19 \-\-nogpg \-\-installroot=/srv/mycontainer \-\-disablerepo=\*(Aq*\*(Aq \-\-enablerepo=fedora install systemd passwd yum fedora\-release vim\-minimal
# systemd\-nspawn \-bD /srv/mycontainer
.fi
.if n \{\
.RE
.\}
.PP
This installs a minimal Fedora distribution tha fuck into tha directory
/srv/mycontainer/
and then boots a OS up in a namespace container up in it\&.
.SH "EXAMPLE 2"
.sp
.if n \{\
.RS 4
.\}
.nf
# debootstrap \-\-arch=amd64 unstable ~/debian\-tree/
# systemd\-nspawn \-D ~/debian\-tree/
.fi
.if n \{\
.RE
.\}
.PP
This installs a minimal Debian unstable distribution tha fuck into tha directory
~/debian\-tree/
and then spawns a gangbangin' finger-lickin' dirty-ass shell up in a namespace container up in it\&.
.SH "EXAMPLE 3"
.sp
.if n \{\
.RS 4
.\}
.nf
# pacstrap \-c \-d ~/arch\-tree/ base
# systemd\-nspawn \-bD ~/arch\-tree/
.fi
.if n \{\
.RE
.\}
.PP
This installs a mimimal Arch Linux distribution tha fuck into tha directory
~/arch\-tree/
and then boots a OS up in a namespace container up in it\&.
.SH "EXAMPLE 4"
.PP
To enta tha container, PID of one of tha processes pluggin tha freshly smoked up namespaces must be used\&.
\fBsystemd\-nspawn\fR
prints tha PID (as viewed from tha outside) of tha launched process, n' it can be used ta enta tha container\&.
.sp
.if n \{\
.RS 4
.\}
.nf
# nsenta \-m \-u \-i \-n \-p \-t $PID
.fi
.if n \{\
.RE
.\}
.PP
\fBnsenter\fR(1)
is part of
\m[blue]\fButil\-linux\fR\m[]\&\s-2\u[2]\d\s+2\&. Kernel support fo' enterin namespaces was added up in Linux 3\&.8\&.
.SH "EXAMPLE 4"
.sp
.if n \{\
.RS 4
.\}
.nf
# mv ~/arch\-tree /var/lib/container/arch
# systemctl enable systemd\-nspawn@arch\&.service
# systemctl start systemd\-nspawn@arch\&.service
.fi
.if n \{\
.RE
.\}
.PP
This make tha Arch Linux container part of the
multi\-user\&.target
on tha host\&.
.SH "EXIT STATUS"
.PP
Da exit code of tha program executed up in tha container is returned\&.
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBchroot\fR(1),
\fBunshare\fR(1),
\fByum\fR(8),
\fBdebootstrap\fR(8),
\fBpacman\fR(8),
\fBsystemd.slice\fR(5)
.SH "NOTES"
.IP " 1." 4
Container Interface
.RS 4
\%http://www.freedesktop.org/wiki/Software/systemd/ContainerInterface
.RE
.IP " 2." 4
util-linux
.RS 4
\%https://github.com/karelzak/util-linux
.RE
