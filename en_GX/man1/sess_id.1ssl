.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SESS_ID 1"
.TH SESS_ID 1 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
sess_id \- SSL/TLS session handlin utility
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBopenssl\fR \fBsess_id\fR
[\fB\-inform PEM|DER\fR]
[\fB\-outform PEM|DER\fR]
[\fB\-in filename\fR]
[\fB\-out filename\fR]
[\fB\-text\fR]
[\fB\-noout\fR]
[\fB\-context \s-1ID\s0\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \fBsess_id\fR process tha encoded version of tha \s-1SSL\s0 session structure
and optionally prints up \s-1SSL\s0 session details (for example tha \s-1SSL\s0 session
masta key) up in human readable format. Right back up in yo muthafuckin ass. Since dis be a gangbangin' finger-lickin' diagnostic tool that
needz some knowledge of tha \s-1SSL\s0 protocol ta use properly, most playas will
not need ta use dat shit.
.IP "\fB\-inform DER|PEM\fR" 4
.IX Item "-inform DER|PEM"
This specifies tha input format. Da \fB\s-1DER\s0\fR option uses a \s-1ASN1 DER\s0 encoded
format containin session details. Da precise format can vary from one version
to tha next.  Da \fB\s-1PEM\s0\fR form is tha default format: it consistz of tha \fB\s-1DER\s0\fR
format base64 encoded wit additionizzle header n' foota lines.
.IP "\fB\-outform DER|PEM\fR" 4
.IX Item "-outform DER|PEM"
This specifies tha output format, tha options have tha same meanin as tha 
\&\fB\-inform\fR option.
.IP "\fB\-in filename\fR" 4
.IX Item "-in filename"
This specifies tha input filename ta read session shiznit from or standard
input by default.
.IP "\fB\-out filename\fR" 4
.IX Item "-out filename"
This specifies tha output filename ta write session shiznit ta or standard
output if dis option aint specified.
.IP "\fB\-text\fR" 4
.IX Item "-text"
prints up tha various hood or private key components in
plain text up in addizzle ta tha encoded version.
.IP "\fB\-cert\fR" 4
.IX Item "-cert"
if a cold-ass lil certificate is present up in tha session it is ghon be output rockin dis option,
if tha \fB\-text\fR option be also present then it is ghon be printed up in text form.
.IP "\fB\-noout\fR" 4
.IX Item "-noout"
this option prevents output of tha encoded version of tha session.
.IP "\fB\-context \s-1ID\s0\fR" 4
.IX Item "-context ID"
this option can set tha session id so tha output session shiznit uses the
supplied \s-1ID.\s0 Da \s-1ID\s0 can be any strang of characters. This option aint gonna normally
be used.
.SH "OUTPUT"
.IX Header "OUTPUT"
Typical output:
.PP
.Vb 10
\& SSL\-Session:
\&     Protocol  : TLSv1
\&     Cipher    : 0016
\&     Session\-ID: 871E62626C554CE95488823752CBD5F3673A3EF3DCE9C67BD916C809914B40ED
\&     Session\-ID\-ctx: 01000000
\&     Master\-Key: A7CEFC571974BE02CAC305269DC59F76EA9F0B180CB6642697A68251F2D2BB57E51DBBB4C7885573192AE9AEE220FACD
\&     Key\-Arg   : None
\&     Start Time: 948459261
\&     Timeout   : 300 (sec)
\&     Verify return code 0 (ok)
.Ve
.PP
Theses is busted lyrics bout below up in mo' detail.
.IP "\fBProtocol\fR" 4
.IX Item "Protocol"
this is tha protocol up in use TLSv1, SSLv3 or SSLv2.
.IP "\fBCipher\fR" 4
.IX Item "Cipher"
the cipher used dis is tha actual raw \s-1SSL\s0 or \s-1TLS\s0 cipher code, peep tha \s-1SSL\s0
or \s-1TLS\s0 justifications fo' mo' shiznit.
.IP "\fBSession-ID\fR" 4
.IX Item "Session-ID"
the \s-1SSL\s0 session \s-1ID\s0 up in hex format.
.IP "\fBSession-ID-ctx\fR" 4
.IX Item "Session-ID-ctx"
the session \s-1ID\s0 context up in hex format.
.IP "\fBMaster-Key\fR" 4
.IX Item "Master-Key"
this is tha \s-1SSL\s0 session masta key.
.IP "\fBKey-Arg\fR" 4
.IX Item "Key-Arg"
the key argument, dis is only used up in \s-1SSL\s0 v2.
.IP "\fBStart Time\fR" 4
.IX Item "Start Time"
this is tha session start time represented as a integer up in standard Unix format.
.IP "\fBTimeout\fR" 4
.IX Item "Timeout"
the timeout up in seconds.
.IP "\fBVerify return code\fR" 4
.IX Item "Verify return code"
this is tha return code when a \s-1SSL\s0 client certificate is verified.
.SH "NOTES"
.IX Header "NOTES"
Da \s-1PEM\s0 encoded session format uses tha header n' foota lines:
.PP
.Vb 2
\& \-\-\-\-\-BEGIN SSL SESSION PARAMETERS\-\-\-\-\-
\& \-\-\-\-\-END SSL SESSION PARAMETERS\-\-\-\-\-
.Ve
.PP
Since tha \s-1SSL\s0 session output gotz nuff tha masta key it is possible ta read tha contents
of a encrypted session rockin dis shiznit. I aint talkin' bout chicken n' gravy biatch. Therefore appropriate securitizzle precautions
should be taken if tha shiznit is bein output by a \*(L"real\*(R" application. I aint talkin' bout chicken n' gravy biatch. This is
however straight fuckin discouraged n' should only be used fo' debuggin purposes.
.SH "BUGS"
.IX Header "BUGS"
Da cipher n' start time should be printed up in human readable form.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIciphers\fR\|(1), \fIs_server\fR\|(1)
