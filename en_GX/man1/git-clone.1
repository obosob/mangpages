'\" t
.\"     Title: git-clone
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-CLONE" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-clone \- Clone a repository tha fuck into a freshly smoked up directory
.SH "SYNOPSIS"
.sp
.nf
\fIgit clone\fR [\-\-template=<template_directory>]
          [\-l] [\-s] [\-\-no\-hardlinks] [\-q] [\-n] [\-\-bare] [\-\-mirror]
          [\-o <name>] [\-b <name>] [\-u <upload\-pack>] [\-\-reference <repository>]
          [\-\-separate\-git\-dir <git dir>]
          [\-\-depth <depth>] [\-\-[no\-]single\-branch]
          [\-\-recursive | \-\-recurse\-submodules] [\-\-] <repository>
          [<directory>]
.fi
.sp
.SH "DESCRIPTION"
.sp
Clones a repository tha fuck into a newly pimped directory, creates remote\-trackin branches fo' each branch up in tha cloned repository (visible rockin git branch \-r), n' creates n' checks up a initial branch dat is forked from tha cloned repository\(cqs currently actizzle branch\&.
.sp
Afta tha clone, a plain git fetch without arguments will update all tha remote\-trackin branches, n' a git pull without arguments will up in addizzle merge tha remote masta branch tha fuck into tha current masta branch, if any (this is untrue when "\-\-single\-branch" is given; peep below)\&.
.sp
This default configuration be  bigged up  by bustin references ta tha remote branch headz under refs/remotes/origin n' by initializin remote\&.origin\&.url n' remote\&.origin\&.fetch configuration variables\&.
.SH "OPTIONS"
.PP
\-\-local, \-l
.RS 4
When tha repository ta clone from is on a local machine, dis flag bypasses tha aiiight "Git aware" transhiznit mechanizzle n' clones tha repository by bustin a cold-ass lil copy of HEAD n' every last muthafuckin thang under objects n' refs directories\&. Da filez under
\&.git/objects/
directory is hardlinked ta save space when possible\&.
.sp
If tha repository is specified as a local path (e\&.g\&.,
/path/to/repo), dis is tha default, n' \-\-local is essentially a no\-op\&. If tha repository is specified as a URL, then dis flag is ignored (and we never use tha local optimizations)\&. Right back up in yo muthafuckin ass. Specifying
\-\-no\-local
will override tha default when
/path/to/repo
is given, rockin tha regular Git transhiznit instead\&.
.sp
To force copyin instead of hardlinkin (which may be desirable if yo ass is tryin ta cook up a funky-ass back\-up of yo' repository) yo, but still avoid tha usual "Git aware" transhiznit mechanism,
\-\-no\-hardlinks
can be used\&.
.RE
.PP
\-\-no\-hardlinks
.RS 4
Optimize tha clonin process from a repository on a local filesystem by copyin filez under
\&.git/objects
directory\&.
.RE
.PP
\-\-shared, \-s
.RS 4
When tha repository ta clone is on tha local machine, instead of rockin hard links, automatically setup
\&.git/objects/info/alternates
to share tha objects wit tha source repository\&. Da resultin repository starts up without any object of its own\&.
.sp
\fBNOTE\fR: dis be a possibly fucked up operation; do
\fBnot\fR
use it unless you KNOW what tha fuck it do\&. If you clone yo' repository rockin dis option n' then delete branches (or use any other Git command dat make any existin commit unreferenced) up in tha source repository, some objects may become unreferenced (or dangling)\&. These objects may be removed by aiiight Git operations (such as
git commit) which automatically call
git gc \-\-auto\&. (See
\fBgit-gc\fR(1)\&.) If these objects is removed n' was referenced by tha cloned repository, then tha cloned repository will become corrupt\&.
.sp
Note dat hustlin
git repack
without the
\-l
option up in a repository cloned with
\-s
will copy objects from tha source repository tha fuck into a pack up in tha cloned repository, removin tha disk space savings of
clone \-s\&. Well shiiiit, it is safe, however, ta run
git gc, which uses the
\-l
option by default\&.
.sp
If you wanna break tha dependency of a repository cloned with
\-s
on its source repository, you can simply run
git repack \-a
to copy all objects from tha source repository tha fuck into a pack up in tha cloned repository\&.
.RE
.PP
\-\-reference <repository>
.RS 4
If tha reference repository is on tha local machine, automatically setup
\&.git/objects/info/alternates
to obtain objects from tha reference repository\&. Usin a already existin repository as a alternate will require fewer objects ta be copied from tha repository bein cloned, reducin network n' local storage costs\&.
.sp
\fBNOTE\fR: peep tha NOTE fo' the
\-\-shared
option\&.
.RE
.PP
\-\-quiet, \-q
.RS 4
Operate on tha fuckin' down-lowly\&. Progress aint reported ta tha standard error stream\&. This flag be also passed ta tha \(oqrsync\(cq command when given\&.
.RE
.PP
\-\-verbose, \-v
.RS 4
Run verbosely\&. Do not affect tha reportin of progress status ta tha standard error stream\&.
.RE
.PP
\-\-progress
.RS 4
Progress status is reported on tha standard error stream by default when it be attached ta a terminal, unless \-q is specified\&. This flag forces progress status even if tha standard error stream aint pimped up ta a terminal\&.
.RE
.PP
\-\-no\-checkout, \-n
.RS 4
No checkout of HEAD is performed afta tha clone is complete\&.
.RE
.PP
\-\-bare
.RS 4
Make a
\fIbare\fR
Git repository\&. That is, instead of bustin
<directory>
and placin tha administratizzle filez in
<directory>/\&.git, make the
<directory>
itself the
$GIT_DIR\&. This obviously implies the
\-n
because there is nowhere ta check up tha hustlin tree\& fo' realz. Also tha branch headz all up in tha remote is copied directly ta correspondin local branch heads, without mappin dem to
refs/remotes/origin/\&. When dis option is used, neither remote\-trackin branches nor tha related configuration variablez is pimped\&.
.RE
.PP
\-\-mirror
.RS 4
Set up a mirror of tha source repository\&. This implies
\-\-bare\&. Compared to
\-\-bare,
\-\-mirror
not only maps local branchez of tha source ta local branchez of tha target, it maps all refs (includin remote\-trackin branches, notes etc\&.) n' sets up a refspec configuration such dat all these refs is overwritten by a
git remote update
in tha target repository\&.
.RE
.PP
\-\-origin <name>, \-o <name>
.RS 4
Instead of rockin tha remote name
origin
to keep track of tha upstream repository, use
<name>\&.
.RE
.PP
\-\-branch <name>, \-b <name>
.RS 4
Instead of pointin tha newly pimped HEAD ta tha branch pointed ta by tha cloned repository\(cqs HEAD, point to
<name>
branch instead\&. In a non\-bare repository, dis is tha branch dat is ghon be checked out\&.
\-\-branch
can also take tags n' detaches tha HEAD at dat commit up in tha resultin repository\&.
.RE
.PP
\-\-upload\-pack <upload\-pack>, \-u <upload\-pack>
.RS 4
When given, n' tha repository ta clone from be accessed via ssh, dis specifies a non\-default path fo' tha command run on tha other end\&.
.RE
.PP
\-\-template=<template_directory>
.RS 4
Specify tha directory from which templates is ghon be used; (See tha "TEMPLATE DIRECTORY" section of
\fBgit-init\fR(1)\&.)
.RE
.PP
\-\-config <key>=<value>, \-c <key>=<value>
.RS 4
Set a cold-ass lil configuration variable up in tha newly\-created repository; dis takes effect immediately afta tha repository is initialized yo, but before tha remote history is fetched or any filez checked out\&. Da key is up in tha same format as expected by
\fBgit-config\fR(1)
(e\&.g\&.,
core\&.eol=true)\&. If multiple joints is given fo' tha same key, each value is ghon be freestyled ta tha config file\&. This make it safe, fo' example, ta add additionizzle fetch refspecs ta tha origin remote\&.
.RE
.PP
\-\-depth <depth>
.RS 4
Smoke a
\fIshallow\fR
clone wit a history truncated ta tha specified number of revisions\&.
.RE
.PP
\-\-[no\-]single\-branch
.RS 4
Clone only tha history leadin ta tha tip of a single branch, either specified by the
\-\-branch
option or tha primary branch remote\(cqs
HEAD
points at\&. When bustin a gangbangin' finger-lickin' dirty-ass shallow clone wit the
\-\-depth
option, dis is tha default, unless
\-\-no\-single\-branch
is given ta fetch tha histories near tha tipz of all branches\&. Further fetches tha fuck into tha resultin repository will only update tha remote\-trackin branch fo' tha branch dis option was used fo' tha initial cloning\&. If tha HEAD all up in tha remote did not point at any branch when
\-\-single\-branch
clone was made, no remote\-trackin branch is pimped\&.
.RE
.PP
\-\-recursive, \-\-recurse\-submodules
.RS 4
Afta tha clone is pimped, initialize all submodulez within, rockin they default settings\&. This is equivalent ta hustlin
git submodule update \-\-init \-\-recursive
immediately afta tha clone is finished\&. This option is ignored if tha cloned repository aint gots a worktree/checkout (i\&.e\&. if any of
\-\-no\-checkout/\-n,
\-\-bare, or
\-\-mirror
is given)
.RE
.PP
\-\-separate\-git\-dir=<git dir>
.RS 4
Instead of placin tha cloned repository where it is supposed ta be, place tha cloned repository all up in tha specified directory, then cook up a gangbangin' filesystem\-agnostic Git symbolic link ta there\&. Da result is Git repository can be separated from hustlin tree\&.
.RE
.PP
<repository>
.RS 4
Da (possibly remote) repository ta clone from\&. Right back up in yo muthafuckin ass. See the
URLS
section below fo' mo' shiznit on specifyin repositories\&.
.RE
.PP
<directory>
.RS 4
Da name of a freshly smoked up directory ta clone into\&. Da "humanish" part of tha source repository is used if no directory is explicitly given (repo
for
/path/to/repo\&.git
and
foo
for
host\&.xz:foo/\&.git)\&. Clonin tha fuck into a existin directory is only allowed if tha directory is empty\&.
.RE
.SH "GIT URLS"
.sp
In general, URLs contain shiznit bout tha transhiznit protocol, tha address of tha remote server, n' tha path ta tha repository\&. Dependin on tha transhiznit protocol, a shitload of dis shiznit may be absent\&.
.sp
Git supports ssh, git, http, n' https protocols (in addition, ftp, n' ftps can be used fo' fetchin n' rsync can be used fo' fetchin n' pushin yo, but these is inefficient n' deprecated; do not use them)\&.
.sp
Da natizzle transhiznit (i\&.e\&. git:// URL) do no authentication n' should be used wit caution on unsecured networks\&.
.sp
Da followin syntaxes may be used wit them:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ssh://[user@]host\&.xz[:port]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
git://host\&.xz[:port]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
http[s]://host\&.xz[:port]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ftp[s]://host\&.xz[:port]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
rsync://host\&.xz/path/to/repo\&.git/
.RE
.sp
An alternatizzle scp\-like syntax may also be used wit tha ssh protocol:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
[user@]host\&.xz:path/to/repo\&.git/
.RE
.sp
This syntax is only recognized if there be no slashes before tha straight-up original gangsta colon\&. This helps differentiate a local path dat gotz nuff a cold-ass lil colon\&. For example tha local path foo:bar could be specified as a absolute path or \&./foo:bar ta avoid bein misinterpreted as a ssh url\&.
.sp
Da ssh n' git protocols additionally support ~username expansion:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ssh://[user@]host\&.xz[:port]/~[user]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
git://host\&.xz[:port]/~[user]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
[user@]host\&.xz:/~[user]/path/to/repo\&.git/
.RE
.sp
For local repositories, also supported by Git natively, tha followin syntaxes may be used:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
file:///path/to/repo\&.git/
.RE
.sp
These two syntaxes is mostly equivalent, except tha forma implies \-\-local option\&.
.sp
When Git don\(cqt know how tha fuck ta handle a cold-ass lil certain transhiznit protocol, it attempts ta use tha \fIremote\-<transport>\fR remote helper, if one exists\&. To explicitly request a remote helper, tha followin syntax may be used:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
<transport>::<address>
.RE
.sp
where <address> may be a path, a server n' path, or a arbitrary URL\-like strang recognized by tha specific remote helper bein invoked\&. Right back up in yo muthafuckin ass. See \fBgitremote-helpers\fR(1) fo' details\&.
.sp
If there be a big-ass number of similarly\-named remote repositories n' you wanna bust a gangbangin' finger-lickin' different format fo' dem (such dat tha URLs you use is ghon be rewritten tha fuck into URLs dat work), you can create a cold-ass lil configuration section of tha form:
.sp
.if n \{\
.RS 4
.\}
.nf
        [url "<actual url base>"]
                insteadOf = <other url base>
.fi
.if n \{\
.RE
.\}
.sp
.sp
For example, wit this:
.sp
.if n \{\
.RS 4
.\}
.nf
        [url "git://git\&.host\&.xz/"]
                insteadOf = host\&.xz:/path/to/
                insteadOf = work:
.fi
.if n \{\
.RE
.\}
.sp
.sp
a URL like "work:repo\&.git" or like "host\&.xz:/path/to/repo\&.git" is ghon be rewritten up in any context dat takes a URL ta be "git://git\&.host\&.xz/repo\&.git"\&.
.sp
If you wanna rewrite URLs fo' push only, you can create a cold-ass lil configuration section of tha form:
.sp
.if n \{\
.RS 4
.\}
.nf
        [url "<actual url base>"]
                pushInsteadOf = <other url base>
.fi
.if n \{\
.RE
.\}
.sp
.sp
For example, wit this:
.sp
.if n \{\
.RS 4
.\}
.nf
        [url "ssh://example\&.org/"]
                pushInsteadOf = git://example\&.org/
.fi
.if n \{\
.RE
.\}
.sp
.sp
a URL like "git://example\&.org/path/to/repo\&.git" is ghon be rewritten ta "ssh://example\&.org/path/to/repo\&.git" fo' pushes yo, but pulls will still use tha original gangsta URL\&.
.SH "EXAMPLES"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Clone from upstream:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git clone git://git\&.kernel\&.org/pub/scm/\&.\&.\&./linux\&.git my\-linux
$ cd my\-linux
$ make
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Make a local clone dat borrows from tha current directory, without checkin thangs out:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git clone \-l \-s \-n \&. \&.\&./copy
$ cd \&.\&./copy
$ git show\-branch
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Clone from upstream while borrowin from a existin local directory:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git clone \-\-reference /git/linux\&.git \e
        git://git\&.kernel\&.org/pub/scm/\&.\&.\&./linux\&.git \e
        my\-linux
$ cd my\-linux
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Smoke a funky-ass bare repository ta publish yo' chizzlez ta tha public:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git clone \-\-bare \-l /home/proj/\&.git /pub/scm/proj\&.git
.fi
.if n \{\
.RE
.\}
.sp
.RE
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
