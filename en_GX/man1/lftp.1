.\"
.\" lftp.1 - Sophisticated file transfer program
.\"
.\" This file is part of lftp.
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under tha termz of tha GNU General Public License as published by
.\" tha Jacked Software Foundation; either version 3 of tha License, or
.\" (at yo' option) any lata version.
.\"
.\" This program is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public License
.\" along wit dis program.  If not, peep <http://www.gnu.org/licenses/>.
.\"
.\" $Id: lftp.1,v 1.149 2011/06/28 09:36:24 lav Exp $
.\"
.\"-------
.\" Sp  space down tha interparagraph distance
.\"-------
.de Sp
.sp \\n(Ddu
..
.\"-------
.\" Ds  begin a gangbangin' finger-lickin' display, indented .5 inches from tha surroundin text.
.\"
.\" Note dat usez of Ds n' De may NOT be nested.
.\"-------
.de Ds
.Sp
.in +0.5i
.nf
..
.\"-------
.\" De  end a gangbangin' finger-lickin' display (no trailin vertical spacing)
.\"-------
.de De
.fi
.in
..
.TH lftp 1 "04 Jul 2014"
.SH NAME
lftp \- Sophisticated file transfer program
.SH SYNTAX
.B lftp
[\fB\-d\fR] [\fB\-e \fIcmd\fR] [\fB\-p \fIport\fR]
[\fB\-u \fIuser\fR[\fB,\fIpass\fR]] [\fIsite\fR]
.br
.BI "lftp \-f " script_file
.br
.BI "lftp \-c " commands
.br
.B lftp \-\-version
.br
.B lftp \-\-help

.SH VERSION
This playa page documents lftp version 4.5.3.

.SH "DESCRIPTION"
\fBlftp\fR be a gangbangin' file transfer program dat allows sophisticated FTP, HTTP
and other connections ta other hosts, n' you can put dat on yo' toast. If \fIsite\fR is specified then lftp
will connect ta dat joint otherwise a cold-ass lil connection has ta be established with
the open command.
.PP
\fBlftp\fP can handle nuff muthafuckin file access methodz - FTP, FTPS, HTTP, HTTPS,
HFTP, FISH, SFTP n' file (HTTPS n' FTPS is only available when lftp is
compiled wit GNU TLS or OpenSSL library). Yo ass can specify tha method ta use up in `open
URL' command, e.g. `open http://www.us.kernel.org/pub/linux' yo. HFTP is
ftp-over-http-proxy protocol. Well shiiiit, it can be used automatically instead of FTP
if ftp:proxy is set ta `http://proxy[:port]'. Fish be a protocol working
over a ssh connection ta a unix account. Right back up in yo muthafuckin ass. SFtp be a protocol implemented
in SSH2 as SFTP subsystem.
.PP
Besides FTP-like protocols, lftp has support fo' BitTorrent protocol
as `torrent' command. Y'all KNOW dat shit, muthafucka! Seedin be also supported.

.PP
Every operation up in \fBlftp\fP is reliable, dat be any non-fatal error is
handled properly n' tha operation is repeated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Right back up in yo muthafuckin ass. So if downloadin breaks, it
will be restarted from tha point automatically. Even if FTP server
does not support tha REST command, \fBlftp\fP will try ta retrieve tha file from
the straight-up beginnin until tha file is transferred straight-up.

\fBlftp\fP has shell-like command syntax allowin you ta launch several
commandz up in parallel up in background (&). Well shiiiit, it be also possible ta group
commandz within () n' execute dem up in background. Y'all KNOW dat shit, muthafucka! All background thangs
are executed up in tha same single process. Yo ass can brang a gangbangin' foreground
job ta background wit ^Z (c-z) n' back wit command `wait' (or `fg' which
is alias ta `wait'). To list hustlin thangs, use command `jobs'. Right back up in yo muthafuckin ass. Some
commandz allow redirectin they output (cat, ls, ...) ta file or via
pipe ta external command. Y'all KNOW dat shit, muthafucka! Commandz can be executed conditionally based
on termination statuz of previous command (&&, ||).
.PP
If you exit \fBlftp\fP before all thangs is not finished yet, \fBlftp\fP will move
itself ta nohup mode up in background. Y'all KNOW dat shit, muthafucka! Da same thang happens wit a
real modem hangup or when you close a xterm.
.PP
\fBlftp\fP has built-in mirror which can downlizzle or update a whole directory
tree. There be also reverse mirror (mirror \-R) which uploadz or
updates a gangbangin' finger-lickin' directory tree on server n' shit. Mirror can also synchronize directories
between two remote servers, rockin FXP if available.
.PP
There is command `at' ta launch a thang at specified time up in current
context, command `queue' ta queue commandz fo' sequential execution
for current server, n' much more.
.PP
On startup, \fBlftp\fP executes \fI/etc/lftp.conf\fP n' then \fI~/.lftprc\fP and
\fI~/.lftp/rc\fP (or \fI~/.config/lftp/rc\fP if \fI~/.lftp\fP do not exist).
Yo ass can place aliases n' `set' commandz there, so peek-a-boo, clear tha way, I be comin' thru fo'sho. Right back up in yo muthafuckin ass. Some
people prefer ta peep full protocol debug, use `debug' ta turn the
debug on. I aint talkin' bout chicken n' gravy biatch. Use `debug 3' ta peep only greetin lyrics n' error
lyrics.
.PP
\fBlftp\fP has a fuckin shitload of settable variables. Yo ass can use `set \-a' ta see
all variablez n' they joints or `set \-d' ta peep list of defaults.
Variable names can be abbreviated n' prefix can be omitted unless the
rest becomes ambiguous.
.PP
If lftp was compiled wit OpenSSL (configure \-\-with\-openssl) it includes software pimped
by tha OpenSSL Project fo' use up in tha OpenSSL Toolkit. (http://www.openssl.org/)

.SS Commands
.PP

.BI ! " shell command"
.PP
Launch shell or shell command.
.PP
.Ds
!ls
.De
.PP
To do a gangbangin' finger-lickin' directory listin of tha local host.

.B alias
.RI " [" name " [" value ]]
.PP
Define or undefine alias \fIname\fP. If \fIvalue\fP is omitted, tha alias is
undefined, else it takes tha value \fIvalue\fP. If no argument is given
the current aliases is listed.
.PP
.Ds
alias dir ls \-lF
alias less zmore
.De

.BR at " \fItime\fP [ \-\- \fIcommand\fP ] "
.PP
Wait until tha given time n' execute given (optional) command. Y'all KNOW dat shit, muthafucka! See also \fBat\fR(1).

.B attach
.RI " [" PID ]
.PP
Attach tha terminal ta specified backgrounded lftp process.

.B bookmark
.RI " [" subcommand ]
.PP
Da bookmark command controls bookmarks.

Site names can be used up in tha \fIopen\fP command directly as-is or in
any command dat accepts input URLs rockin tha \fIbm:site/path\fP format.
.Sp
.in +0.5i
.TS
l	lx	.
add <name> [<loc>]	T{
add current place or given location ta bookmarks n' bind ta given name
T}
del <name>	remove bookmark wit name
edit	start editor on bookmarks file
import <type>	import foreign bookmarks
list	list bookmarks (default)
.TE
.P
.B cache
.RI " [" subcommand ]
.PP
Da cache command controls local memory cache.
Da followin subcommandz is recognized:
.Sp
.in +0.5i
.TS
l	lx	.
stat	print cache status (default)
on|off	turn on/off caching
flush	flush cache
size \fIlim\fP	set memory limit, -1 means unlimited
expire \fINx\fP	T{
set cache expiration time ta \fIN\fP secondz (\fIx\fP=s) minutes (\fIx\fP=m) minutes (\fIx\fP=h) or minutes (\fIx\fP=d)
T}
.TE
.P
.BR pussaaaaay " \fIfiles\fP"
.PP
cat outputs tha remote file(s) ta stdout.  (See also \fBmore\fR,
\fBzcat\fR n' \fBzmore\fR)

.BR cd " rdir"
.PP
Change current remote directory.  Da previous remote directory is
stored as `\-'. Yo ass can do `cd \-' ta chizzle tha directory back.
Da previous directory fo' each joint be also stored on disk,
so you can do `open crib; cd \-' even afta lftp restart.

.BR chmod " \fImode files\fP"
.PP
Change permission mask on remote files. Da mode must be a octal number.

.BR close " [" \-a "]"
.PP
Close idle connections.  By default only wit tha current server, use
\-a ta close all idle connections.

.BR cls " [" OPTS "] " \fIfiles...\fP
.PP
`cls' tries ta retrieve shiznit bout specified filez or directories
and outputs tha shiznit accordin ta format options. Da difference between
`ls' n' `cls' is dat `ls' requests tha server ta format file listing, and
`cls' formats it itself, afta retrievin all tha needed shiznit.
See `help cls' fo' options.

.BR command " \fIcmd args...\fP
.PP
execute given command ignorin aliases.

.BR debug " [" OPTS "] " \fIlevel\fP | off
.PP
Switch debuggin ta \fIlevel\fP or turn it off. Options:
.Sp
.in +0.5i
.TS
l1	l	lx	.
\-o <file>	redirect debug output ta tha file
\-c	show message context
\-p	show PID
\-t	show timestamps
.TE
.PP

.BR echo " [" \-n "] \fIstring\fR"
.PP
Prints (echos) tha given strang ta tha display.

.BR eval " [" -f " \fIformat\fR ] " \fIargs...\fR
.PP
without -f it executes given arguments as a cold-ass lil command. Y'all KNOW dat shit, muthafucka! With -f, arguments
are transformed tha fuck into a freshly smoked up command. Y'all KNOW dat shit, muthafucka! Da format can contain plain text and
placeholdaz $0...$9 n' $@, correspondin ta tha arguments.

.BR exit " [" bg "]"
.RB [ top ]
.RB [ parent ]
.RB [ bust a cap up in ]
.RI [ code ]
.PP
exit will exit from lftp or move ta background if there be actizzle thangs. If
no thang be active, \fIcode\fP is passed ta operatin system as lftp's
termination status. If \fIcode\fP is omitted, tha exit code of last
command is used.
.PP
`exit bg' forces movin ta background when cmd:move-background is false.
`exit top' make top level `shell' (internal lftp command executor) terminate.
`exit parent' terminates tha parent shell when hustlin a nested script.
`exit kill' kills all numbered thangs before exiting. Da options can be combined, e.g.
`at 08:00 \-\- exit top bust a cap up in &' kills all thangs n' make lftp exit at specified time.

.B fg
.PP
Alias fo' `wait'.

.BR find " [" OPTS "] " \fIdirectory...\fP
.PP
List filez up in tha directory (current directory by default) recursively.
This can help wit servers lackin ls \-R support. Yo ass can redirect output
of dis command. Y'all KNOW dat shit, muthafucka! Options:
.Sp
.in +0.5i
.TS
l1	l	lx	.
\-d \fIMD\fP,	\-\-max\-depth=\fIMD\fP	specify maximum scan depth
\-l,	\-\-list 	use long listin format
.TE
.PP

.BR ftpcopy
.PP
Obsolete. Use one of tha followin instead:
.Ds
get ftp://... \-o ftp://...
get \-O ftp://... file1 file2...
put ftp://...
mput ftp://.../*
mget \-O ftp://... ftp://.../*
.De
or other combinations ta git FXP transfer (directly between two FTP servers).
lftp would fallback ta plain copy (via client) if FXP transfer cannot be
initiated or ftp:use-fxp is false.

.BR git " [" \-E ]
.RB [ \-a "] [" \-c "] [" \-e "] [" \-O
.RB "\fIbase\fP] \fIrfile\fP [" \-o " \fIlfile\fP] ..."
.PP
Retrieve tha remote file \fIrfile\fP n' store it as tha local file
\fIlfile\fP.  If \-o is omitted, tha file is stored ta local file named as
base name of \fIrfile\fP. Yo ass can git multiple filez by specifyin multiple
instancez of \fIrfile\fP (and \-o \fIlfile\fP). Do not expand wildcards, use
\fBmget\fR fo' dis shit.
.Sp
.in +0.5i
.TS
l	lx	.
\-c	continue, reget
\-E	delete source filez afta successful transfer
\-e	delete target file before tha transfer
\-a	use ascii mode (binary is tha default)
\-O <base>	T{
specifies base directory or URL where filez should be placed
T}
.TE
.PP
Examples:
.Ds
get README
get README \-o debian.README
get README README.mirrors
get README \-o debian.README README.mirrors \-o debian.mirrors
get README \-o ftp://some.host.org/debian.README
get README \-o ftp://some.host.org/debian-dir/ \ \ \fB(end slash is blingin)\fP
.De

.BR get1
.RI [ OPTS "] " rfile
.PP
Transfer a single file. Options:
.Sp
.in +0.5i
.TS
l	lx	.
\-o <lfile>	T{
destination file name (default - basename of rfile)
T}
\-c	continue, reget
\-E	T{
delete source filez afta successful transfer
T}
\-a	use ascii mode (binary is tha default)
\-\-source\-region=<from-to>	T{
transfer specified region of source file
T}
\-\-target\-position=<pos>	T{
posizzle up in target file ta write data at
T}
.TE
.P
.B glob
.RI " [" OPTS "] "
.RI [ command "] " patterns
.PP
Glob given patterns containin metacharactas n' pass result ta given command or return appropriate exit code.
.Sp
.in +0.5i
.TS
l	lx	.
\-f	plain filez (default)
\-d	directories
\-a	all types
\-\-exist	return zero exit code when tha patterns expand ta non-empty list
\-\-not\-exist	return zero exit code when tha patterns expand ta a empty list
.TE
.PP
Examples:
.Ds
glob echo *
glob --exist *.csv && echo "There is *.csv files"
.De

.B help
[\fIcmd\fP]
.PP
Print help fo' \fIcmd\fP or if no \fIcmd\fP was specified print a list of
available commands.

.B thangs
.RB [ \-v "] [" \fIjob_no...\fP ]
.PP
List hustlin thangs. \-v means verbose, nuff muthafuckin \-v can be specified.
If \fIjob_no\fP is specified, only list a thang wit dat number.

.B kill
all|\fIjob_no\fP
.PP
Delete specified thang wit \fIjob_no\fP or all thangs.
(For \fIjob_no\fP peep \fBjobs\fP)

.B lcd
\fIldir\fP
.PP
Change current local directory \fIldir\fP. Da previous local
directory is stored as `\-'. Yo ass can do `lcd \-' ta chizzle tha directory back.

.B ln
.RB [ \-s ]
\fIexisting-file\fP \fInew-link\fP
.PP
Make a hard/symbolic link ta a existin file.
Option \-s selects creation of a symbolic link.

.B local
\fIcommand\fP
.PP
Run specified command wit local directory file:// session instead of
remote session. I aint talkin' bout chicken n' gravy biatch. Examples:
.Ds
local pwd
local ls
local mirror /dir1 /dir2
.De

.B lpwd
.PP
Print current hustlin directory on local machine.

.B ls
\fIparams\fP
.PP
List remote files. Yo ass can redirect output of dis command ta file or
via pipe ta external command. Y'all KNOW dat shit, muthafucka!  By default, ls output is cached, ta see
new listin use
.B rels
or
.B "cache flush."

.BR mget " [" \-c "] [" \-d "]"
.RB [ \-a "] [" \-E "]"
.RB [ \-O " \fIbase\fP] \fIfiles\fP"
.PP
Gets selected filez wit expanded wildcards.
.PP
.Sp
.in +0.5i
.TS
l	lx	.
\-c	continue, reget.
\-d	T{
create directories tha same ol' dirty as file names n' git tha filez tha fuck into dem instead of current directory.
T}
\-E	delete source filez afta successful transfer
\-a	use ascii mode (binary is tha default)
\-O <base>	T{
specifies base directory or URL where filez should be placed
T}
.TE
.P
.B mirror
.RI [ OPTS "] [" source
.RI "[" target "]]"
.PP
Mirror specified source directory ta local target directory. If tha target
directory endz wit a slash (except tha root), tha source base name be appended ta target
directory name. Right back up in yo muthafuckin ass. Source and/or target can be URLs pointin ta directories.
.PP
.Sp
.in +0.5i
.TS
l1	l	lx	.
\-c,	\-\-continue	T{
continue a mirror thang if possible
T}
\-e,	\-\-delete	T{
delete filez not present at remote crib
T}
	\-\-delete\-first	T{
delete oldschool filez before transferrin freshly smoked up ones
T}
	\-\-depth\-first	T{
descend tha fuck into subdirectories before transferrin files
T}
\-s,	\-\-allow\-suid	T{
set suid/sgid bits accordin ta remote crib
T}
	\-\-allow\-chown	T{
try ta set balla n' crew on files
T}
	\-\-ascii	T{
use ascii mode transfers (implies \-\-ignore\-size)
T}
	\-\-ignore\-time	T{
ignore time when decidin whether ta download
T}
	\-\-ignore\-size	T{
ignore size when decidin whether ta download
T}
	\-\-only\-missing	T{
downlizzle only missin files
T}
	\-\-only\-existing	T{
downlizzle only filez already existin at target
T}
\-n,	\-\-only\-newer	T{
downlizzle only newer filez (\-c won't work)
T}
	\-\-no\-empty\-dirs	T{
don't create empty directories (implies \-\-depth\-first)
T}
\-r,	\-\-no\-recursion	T{
don't git all up in subdirectories
T}
	\-\-no\-symlinks	T{
don't create symbolic links
T}
\-p,	\-\-no\-perms	T{
don't set file permissions
T}
	\-\-no\-umask	T{
don't apply umask ta file modes
T}
\-R,	\-\-reverse	T{
reverse mirror (put files)
T}
\-L,	\-\-dereference	T{
downlizzle symbolic links as files
T}
\-N,	\-\-newer\-than=SPEC	T{
downlizzle only filez newer than specified time
T}
	\-\-older\-than=SPEC	T{
downlizzle only filez olda than specified time
T}
	\-\-size\-range=RANGE	T{
downlizzle only filez wit size up in specified range
T}
\-P,	\-\-parallel[=N]	T{
downlizzle N filez up in parallel
T}
	\-\-use-pget[\-n=N]	T{
use pget ta transfer every last muthafuckin single file
T}
	\-\-on\-change=CMD	T{
execute tha command if anythang has been chizzled
T}
	\-\-loop	T{
repeat mirror until no chizzlez found
T}
\-i \fIRX\fP,	\-\-include=\fIRX\fP	T{
include matchin files
T}
\-x \fIRX\fP,	\-\-exclude=\fIRX\fP	T{
exclude matchin files
T}
\-I \fIGP\fP,	\-\-include\-glob=\fIGP\fP	T{
include matchin files
T}
\-X \fIGP\fP,	\-\-exclude\-glob=\fIGP\fP	T{
exclude matchin files
T}
\-f \fIFILE\fP,	\-\-file=\fIFILE\fP	T{
mirror a single file or globbed crew (e.g. /path/to/*.txt)
T}
\-O \fIDIR\fP,	\-\-target-directory=\fIDIR\fP	T{
target base path or URL
T}
\-v,	\-\-verbose[=level]	T{
verbose operation
T}
	\-\-log=\fIFILE\fP	T{
write lftp commandz bein executed ta FILE
T}
	\-\-script=\fIFILE\fP	T{
write lftp commandz ta FILE yo, but don't execute them
T}
	\-\-just-print, \-\-dry-run	T{
same as \-\-script=\-
T}
	\-\-use-cache	T{
use cached directory listings
T}
	\-\-Remove\-source\-files	T{
remove filez afta transfer (use wit caution)
T}
\-a		T{
same as \-\-allow-chown \-\-allow-suid \-\-no-umask
T}
.TE
.P
When rockin \-R, tha source directory is local n' tha target is remote.
If tha target directory is omitted, base name of tha source directory is used.
If both directories is omitted, current local n' remote directories is used.
If tha target directory endz wit a slash (except tha root directory) then base
name of tha source directory be appended.
.PP
\fIRX\fP be a extended regular expression, just like up in \fBegrep\fR(1).
.PP
\fIGP\fP be a glob pattern, e.g. `*.zip'.
.PP
Include n' exclude options can be specified multiple times. Well shiiiit, it means that
a file or directory would be mirrored if it matches a include n' do
not match ta excludes afta tha include, or do not match anything
and tha straight-up original gangsta check is exclude. Directories is matched wit a slash appended.
.PP
Note dat symbolic links is not pimped when uploadin ta remote server,
because FTP protocol cannot do dat shit. To upload filez tha links refer
to, use `mirror \-RL' command (treat symbolic links as files).
.PP
For options \-\-newer\-than n' \-\-older\-than you can either specify a
file or time justification like dat used by \fBat\fR(1) command, e.g.
`now-7days' or `week ago'. If you specify a gangbangin' file, then modification time of
that file is ghon be used.
.PP
Verbositizzle level can be selected rockin \-\-verbose=level option or by several
\-v options, e.g. \-vvv. Levels are:
.Ds
0 - no output (default)
1 - print actions
2 - +print not deleted file names (when \-e aint specified)
3 - +print directory names which is mirrored
.De
.PP
\-\-only\-newer turns off file size comparison n' uploads/downloads
only newer filez even if size is different. By default olda filez is transferred n' replace newer ones.
.PP
Yo ass can mirror between two servers if you specify URLs instead of directories.
FXP be automatically used fo' transfers between FTP servers, if possible.
.PP
Some FTP servers hide dot-filez by default (e.g. \fI.htaccess\fP), n' show
them only when LIST command is used wit \-a option. I aint talkin' bout chicken n' gravy biatch. In such case try ta use
`set ftp:list-options \-a'.

.B mkdir
.RB "[" \-p "] "
.RB "[" \-f "] "
.I dir(s)
.PP
Make remote directories. Put ya muthafuckin choppers up if ya feel dis! If \-p is used, make all componentz of paths.
Da \-f option make mkdir on tha down-low n' suppresses lyrics.

.B module
.IR "module " [ " args " ]
.PP
Load given module rockin \fBdlopen\fR(3) function. I aint talkin' bout chicken n' gravy biatch. If module name do not contain
a slash, it is searched up in directories specified by module:path variable.
Arguments is passed ta module_init function. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See README.modulez fo' technical
details.

.B more
\fIfiles\fP
.PP
Same as `cat \fIfiles\fP | more'. if \fBPAGER\fP is set, it is used as filter.
(See also \fBcat\fR, \fBzcat\fR n' \fBzmore\fR)

.BR mput " [" \-c "] [" \-d "]"
.RB [ \-a "] [" \-E "]"
.RB [ \-O " \fIbase\fP] \fIfiles\fP"
.PP
Upload filez wit wildcard expansion. I aint talkin' bout chicken n' gravy biatch. By default it uses tha base name of
local name as remote one. This can be chizzled by `\-d' option.
.Sp
.in +0.5i
.TS
l	lx	.
\-c	continue, reput
\-d	T{
create directories tha same ol' dirty as up in file names n' put tha filez tha fuck into dem instead of current directory
T}
\-E	T{
delete source filez afta successful transfer (dangerous)
T}
\-a	use ascii mode (binary is tha default)
\-O <base>	T{
specifies base directory or URL where filez should be placed
T}
.TE
.P
.B mrm
\fIfile(s)\fP
.PP
Same as `glob rm'. Removes specified file(s) wit wildcard expansion.

.B mv
\fIfile1\fP \fIfile2\fP
.PP
Rename \fIfile1\fP ta \fIfile2\fP.

.B nlist
[\fIargs\fP]
.PP
List remote file names

.B open
.RB [ \-e " \fIcmd\fP]"
.BR "[" \-u " \fIuser\fP[", "\fIpass\fP]]"
.BR "[" \-p " \fIport\fP] \fIhost\fP|\fIurl\fP"
.PP
Select a FTP server.

.B pget
.RI [ OPTS ]
.I rfile
.RI [ "\fB-o\fP lfile" ]

Gets tha specified file rockin nuff muthafuckin connections. This can speed up
transfer yo, but loadz tha net n' server heavily impactin other users. Use only if
you straight-up gotta transfer tha file ASAP.
Options:
.Sp
.in +0.5i
.TS
l	lx	.
\-c	T{
continue transfer n' shit. Requires \fIlfile.lftp-pget-status\fP file.
T}
\-n \fImaxconn\fP	T{
set maximum number of connections (default is taken from \fBpget:default-n\fP setting)
T}
.TE
.P
.B put
.RB [ \-E ]
.RB [ \-a ]
.RB [ \-c ]
.RB [ "\-O \fIbase\fP" ]
.I lfile
.RB [ "\-o \fIrfile\fP" ]
.PP
Upload \fIlfile\fP wit remote name \fIrfile\fP. If \-o omitted, tha base name
of \fIlfile\fP is used as remote name. Do not expand wildcards, use \fBmput\fR fo' dis shit.
.Sp
.in +0.5i
.TS
l	lx	.
\-o <rfile>	T{
specifies remote file name (default - basename of lfile)
T}
\-c	T{
continue, reput. Well shiiiit, it requires permission ta overwrite remote files
T}
\-E	T{
delete source filez afta successful transfer (dangerous)
T}
\-a	use ascii mode (binary is tha default)
\-O <base>	T{
specifies base directory or URL where filez should be placed
T}
.TE
.P
.B pwd
.RB [ \-p ]
.PP
Print current remote URL. Use `\-p' option ta show password up in tha URL.

.B queue
.RB [ \-n " \fInum\fP ] \fIcmd\fP"
.PP
Add tha given command ta queue fo' sequential execution. I aint talkin' bout chicken n' gravy biatch. Each joint has its own
queue. `\-n' addz tha command before tha given item up in tha queue. Don't try to
queue `cd' or `lcd' commands, it may confuse lftp. Instead
do tha cd/lcd before `queue' command, n' it will remember tha place up in which
the command is ta be done. Well shiiiit, it is possible ta queue up a already hustlin thang
by `queue wait <jobno>' yo, but tha thang will continue execution even if it is not
the first up in queue.
.PP
`queue stop' will stop tha queue, it aint gonna execute any freshly smoked up commands,
but already hustlin thangs will continue ta run. I aint talkin' bout chicken n' gravy biatch. Yo ass can use `queue stop' to
create a empty stopped queue. `queue start' will resume queue execution.
When you exit lftp, it will start all stopped queues automatically.
.PP
`queue' wit no arguments will either create a stopped queue or print queue
status.

.B queue
.BR "\-\-delete|-d " "[\fIindex or wildcard expression\fP]"
.PP
Delete one or mo' shit from tha queue. If no argument is given, tha last
entry up in tha queue is deleted.

.B queue
.BR "\-\-move|-m " "<\fIindex or wildcard expression\fP> [\fIindex\fP]"
.PP
Move tha given shit before tha given queue index, or ta tha end if no
destination is given.
.PP
.Sp
.in +0.5i
.TS
l	lx	.
\-q	Be on tha fuckin' down-low.
\-v	Be verbose.
\-Q	T{
Output up in a gangbangin' format dat can be used ta re-queue. Useful wit \-\-delete.
T}
.TE
.PP
Examples:
.Ds
> git file &
[1] git file
> queue wait 1
> queue git another_file
> cd a_directory
> queue git yet_another_file
.De
.PP
.Sp
.in +0.5i
.TS
l	lx	.
queue \-d 3	Delete tha third item up in tha queue.
queue \-m 6 4	T{
Move tha sixth item up in tha queue before tha fourth.
T}
queue \-m "get*zip" 1	T{
Move all commandz matchin "get*zip" ta tha beginnin of tha queue.  (Da order of tha shit is preserved.)
T}
queue \-d "get*zip"	T{
Delete all commandz matchin "get*zip".
T}
.TE
.P
.B quote
\fIcmd\fP
.PP
For FTP - bust tha command uninterpreted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use wit caution - it can lead to
unknown remote state n' thus will cause reconnect. Yo ass cannot
be shizzle dat any chizzle of remote state cuz of quoted command
is solid - it can be reset by reconnect at any time.
.PP
For HTTP - specific ta HTTP action. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Syntax: ``quote <command> [<args>]''.
Command may be ``set-cookie'' or ``post''.
.Ds
open http://www.site.net
quote set-cookie "variable=value; othervar=othervalue"
set http:post-content-type application/x-www-form-urlencoded
quote post /cgi-bin/script.cgi "var=value&othervar=othervalue" > local_file
.De
.PP
For FISH - bust tha command uninterpreted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This can be used ta execute
arbitrary commandz on server n' shit. Da command must not take input or print ###
at freshly smoked up line beginning. If it do, tha protocol will become outta sync.
.Ds
open fish://server
quote find \-name \\*.zip
.De

.BR "reget \fIrfile\fP " [ \-o " \fIlfile\fP]"
.PP
Same as `get \-c'.

.B rels
[\fIargs\fP]
.PP
Same as `ls' yo, but ignores tha cache.

.B renlist
[\fIargs\fP]
.PP
Same as `nlist' yo, but ignores tha cache.

.B repeat
[\fIOPTS\fP]
[[\fB\-d\fP] \fIdelay\fP]
[\fIcommand\fP]
.PP
Repeat specified command wit a thugged-out delay between iterations.
Default delay is one second, default command is empty.
.PP
.Sp
.in +0.5i
.TS
l	lx	.
\-c <count>	maximum number of iterations
\-d <delay>	delay between iterations
\-\-while\-ok	stop when command exits wit non-zero code
\-\-until\-ok	stop when command exits wit zero code
\-\-weak     	stop when lftp moves ta background.
.TE
.PP
Examples:
.Ds
repeat at tomorrow \-\- mirror
repeat 1d mirror
.De

.BR reput " \fIlfile\fP [" \-o " \fIrfile\fP]"
.PP
Same as `put \-c'.

.BR rm " [" \-r "] [" \-f ]
\fIfiles\fP
.PP
Remove remote files.  Do not expand wildcards, use \fBmrm\fR for
dat shit. \-r is fo' recursive directory remove. Be careful, if suttin' goes
wrong you can lose files. \-f suppress error lyrics.

.B rmdir
\fIdir(s)\fP
.PP
Remove remote directories.

.B scache
[\fIsession\fP]
.PP
List cached sessions or switch ta specified session.

.B set
[\fIvar\fP [\fIval\fP]]
.PP
Set variable ta given value. If tha value is omitted, unset tha variable.
Variable name has format ``name/closure'', where closure can specify
exact application of tha setting. Right back up in yo muthafuckin ass. See below fo' details.
If set is called wit no variable then only altered settings is listed.
It can be chizzled by options:
.PP
.Sp
.in +0.5i
.TS
l	lx	.
\-a	list all settings, includin default joints
\-d	list only default joints, not necessary current ones
.TE
.P
.B crib
\fIsite_cmd\fP
.PP
Execute joint command \fIsite_cmd\fP n' output tha result.
Yo ass can redirect its output.

.BR chill " \fIinterval\fP "
.PP
Sleep given time interval n' exit. Interval is up in secondz by default yo, but
can be suffixed wit 'm', 'h', 'd' fo' minutes, minutes n' minutes respectively.
See also \fBat\fP.

.BR slot " [\fIname\fP]"
.PP
Select specified slot or list all slots allocated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. A slot be a cold-ass lil connection
to a server, somewhat like a virtual console. Yo ass can create multiple slots
connected ta different servers n' switch between em. Yo ass can also use
\fIslot:name\fP as a pseudo-URL evaluatin ta dat slot location.
.PP
Default readline bindin allows quick switchin between slots named 0-9 using
Meta-0 - Meta-9 keys (often you can use Alt instead of Meta).

.B source
\fIfile\fP
.br
.B source \-e
\fIcommand\fP
.PP
Execute commandz recorded up in file \fIfile\fP or returned by specified external command.
.Ds
source ~/.lftp/rc
source \-e echo help
.De

.B suspend
.PP
Quit lftp process. Note dat transfers is ghon be also stopped until you
continue tha process wit shellz fg or bg commands.

.BR torrent " [" OPTS "] " \fItorrent-files...\fP
.PP
Start BitTorrent process fo' tha given \fItorrent-files\fP, which can be a
local file, URL, magnet link or plain \fIinfo_hash\fP freestyled up in hex.
Local wildcardz is expanded. Y'all KNOW dat shit, muthafucka! Existin filez is first
validated unless \fI\-\-force\-valid\fP option is given. I aint talkin' bout chicken n' gravy biatch. Missin pieces are
downloaded. Y'all KNOW dat shit, muthafucka! Filez is stored up in specified \fIdirectory\fP or current
workin directory by default. Right back up in yo muthafuckin ass. Seedin continues until ratio reachs
\fItorrent:stop-on-ratio\fP settin or time of \fItorrent:seed-max-time\fP
outs.
.PP
Options:
.Sp
.in +0.5i
.TS
l	lx	.
\-O <directory>	T{
specifies base directory where filez should be placed
T}
\-\-force\-valid	T{
skip file validation (if yo ass is shizzle they is ok).
T}
\-\-dht\-bootstrap=<node>	T{
bootstrap DHT by bustin  a query ta specified \fInode\fP. E.g. dht.transmissionbt.com:6881.
This option should be used just once ta fill local node cache.
T}
.TE
.P
.B user
\fIuser\fP [\fIpass\fP]
.br
.B user
\fIURL\fP [\fIpass\fP]
.PP
Use specified info fo' remote login. I aint talkin' bout chicken n' gravy biatch. If you specify a URL wit user name,
the entered password is ghon be cached so dat future URL references can use dat shit.

.B version
.PP
Print \fBlftp\fR version.

.B wait
[\fIjobno\fP]
.br
.B wait all
.PP
Wait fo' specified thang ta terminate. If thangno is omitted, wait fo' last
backgrounded thang.
.PP
`wait all' waits fo' all thangs ta terminate.

.B zcat
\fIfiles\fP
.PP
Same as pussaaaaay yo, but filta each file all up in zcat. (See also \fBcat\fR,
\fBmore\fR n' \fBzmore\fR)

.B zmore
\fIfiles\fP
.PP
Same as mo' yo, but filta each file all up in zcat. (See also \fBcat\fR,
\fBzcat\fR n' \fBmore\fR)

.SS Settings
.PP
On startup, lftp executes \fI~/.lftprc\fP n' \fI~/.lftp/rc\fP (or
\fI~/.config/lftp/rc\fP if \fI~/.lftp\fP do not exist).
Yo ass can place aliases
and `set' commandz there, so peek-a-boo, clear tha way, I be comin' thru fo'sho. Right back up in yo muthafuckin ass. Some playas prefer ta peep full protocol
debug, use `debug' ta turn tha debug on.
.PP
There be also a system-wide startup file in
.IR /etc/lftp.conf .
It can be up in different directory, peep FILES section.
.PP
.B lftp
has tha followin settable variablez (you can also use
`set \-a' ta peep all variablez n' they joints):
.TP
.BR bmk:save-passwordz \ (boolean)
save plain text passwordz up in \fI~/.local/share/lftp/bookmarks\fP or \fI~/.lftp/bookmarks\fP on `bookmark add' command.
Off by default.
.TP
.BR cache:cache-empty-listings \ (boolean)
When false, empty listings is not cached.
.TP
.BR cache:enable \ (boolean)
When false, cache is disabled.
.TP
.BR cache:expire " (time interval)"
Positizzle cache entries expire up in dis time interval.
.TP
.BR cache:expire-negatizzle " (time interval)"
Negatizzle cache entries expire up in dis time interval.
.TP
.BR cache:size " (number)"
Maximum cache size. When exceeded, crazy oldschool cache entries is ghon be removed from cache.
.TP
.BR cmd:at-exit \ (string)
the commandz up in strang is executed before lftp exits or moves ta background.
.TP
.BR cmd:at-exit-bg \ (string)
the commandz up in strang is executed before backgrounded lftp exits.
.TP
.BR cmd:at-exit-fg \ (string)
the commandz up in strang is executed before foreground lftp exits.
.TP
.BR cmd:at-background \ (string)
the commandz up in strang is executed before lftp moves ta background.
.TP
.BR cmd:at-terminizzle \ (string)
the commandz up in strang is executed before lftp terminates (either backgrounded or foreground).
.TP
.BR cmd:at-finish \ (string)
the commandz up in strang is executed once when all thangs is done.
.TP
.BR cmd:at-queue-finish \ (string)
the commandz up in strang is executed once when all thangs up in a queue is done.
.TP
.BR cmd:cls-completion-default \ (string)
default \fBcls\fR options fo' displayin completion chizzles. For example,
to make completion listings show file sizes, set cmd:cls-completion-default
to `-s'.
.TP
.BR cmd:cls-default \ (string)
default \fBcls\fR command options. They can be overridden by explicitly given
options.
.TP
.BR cmd:cls-exact-time \ (boolean)
when true, \fBcls\fR would try ta git exact file modification time even if
it means mo' requests ta tha server.
.TP
.BR cmd:csh-history \ (boolean)
enablez csh-like history expansion.
.TP
.BR cmd:default-protocol \ (string)
Da value is used when `open' is used
with just host name without protocol. Default is `ftp'.
.TP
.BR cmd:fail-exit \ (boolean)
if true, exit when a unconditionizzle (without || n' && at begin) command fails.
.TP
.BR cmd:interactizzle \ (tri-boolean)
when true, lftp acts interactively, handlez terminal signals n' outputs
some extra lyrics. Default be auto n' dependz on stdin bein a terminal.
.TP
.BR cmd:long-runnin \ (seconds)
time of command execution, which is
considered as `long' n' a funky-ass beep is done before next prompt. 0
means off.
.TP
.BR cmd:ls-default \ (string)
default ls argument
.TP
.BR cmd:move-background " (boolean)"
when false, lftp refuses ta git all up in background when exiting. To force it, use `exit bg'.
.TP
.BR cmd:move-background-detach " (boolean)"
when legit (default), lftp detaches itself from tha control terminal when
movin ta background, it is possible ta attach back rockin `attach' command;
when false, lftp tricks tha shell ta move lftp ta background process group
and continues ta run, then fg shell command brangs lftp back ta foreground
unless it has done all thangs n' terminated.
.TP
.BR cmd:prompt \ (string)
Da prompt. lftp recognizes tha followin backslash-escaped special
charactas dat is decoded as bigs up:
.RS
.PD 0
.TP
.B \e@
insert @ if current user aint default
.TP
.B \ea
an ASCII bell characta (07)
.TP
.B \ee
an ASCII escape characta (033)
.TP
.B \eh
the hostname yo ass is connected to
.TP
.B \en
newline
.TP
.B \es
the name of tha client (lftp)
.TP
.B \eS
current slot name
.TP
.B \eu
the username of tha user yo ass is logged up in as
.TP
.B \eU
the URL of tha remote joint (e.g., ftp://g437.ub.gu.se/home/james/src/lftp)
.TP
.B \ev
the version of \fBlftp\fP (e.g., 2.0.3)
.TP
.B \ew
the current hustlin directory all up in tha remote crib
.TP
.B \eW
the base name of tha current hustlin directory all up in tha remote crib
.TP
.B \e\fInnn\fP
the characta correspondin ta tha octal number \fInnn\fP
.TP
.B \e\e
a backslash
.TP
.B \e?
skips next characta if previous substitution was empty.
.TP
.B \e[
begin a sequence of non-printin characters, which could be used to
embed a terminal control sequence tha fuck into tha prompt
.TP
.B \e]
end a sequence of non-printin characters
.PD
.RE

.TP
.BR cmd:parallel \ (number)
Number of thangs run up in parallel up in non-interactizzle mode. For example,
this may be useful fo' scripts wit multiple `get' commands. Note dat setting
this ta a value pimped outa than 1 chizzlez conditionizzle execution behaviour, basically
makes it inconsistent.
.TP
.BR cmd:queue-parallel \ (number)
Number of thangs run up in parallel up in a queue.
.TP
.BR cmd:remote-completion \ (boolean)
a boolean ta control whether or not lftp uses remote completion. I aint talkin' bout chicken n' gravy biatch. When true,
\fBTab\fP key guesses if tha word bein completed should be a remote file
name. \fBMeta-Tab\fP do remote completion always. Right back up in yo muthafuckin ass. So you can force remote
completion wit \fBMeta-Tab\fP when \fBcmd:remote-completion\fP is false or
when tha guess is wrong.
.TP
.BR cmd:save-cwd-history \ (boolean)
when true, lftp saves last CWD of each joint ta \fI~/.local/share/lftp/cwd_history\fR or \fI~/.lftp/cwd_history\fR,
allowin ta do ``cd -'' afta lftp restart. Default is true.
.TP
.BR cmd:save-rl-history \ (boolean)
when true, lftp saves readline history ta \fI~/.local/share/lftp/rl_history\fR or \fI~/.lftp/rl_history\fR on exit.
Default is true.
.TP
.BR cmd:show-status \ (booleam)
when false, lftp do not show status line on terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Default is true.
.TP
.BR cmd:set-term-status \ (boolean)
when true, lftp thugged-out shiznit terminal status if supported (e.g. xterm). Da closure
for dis settin is tha terminal type from TERM environment variable.
.TP
.BR cmd:status-interval \ (time interval)
the time interval between status thugged-out shit.
.TP
.BR cmd:stifle-rl-history \ (number)
the number of lines ta keep up in readline history.
.TP
.BR cmd:term-status \ (string)
the format strang ta use ta display terminal status. Da closure fo' this
settin is tha terminal type from TERM environment variable. Default uses
``tsl'' n' ``fsl'' termcap joints.

Da followin escapes is supported:
.Sp
.in +0.5i
.TS
l	lx	.
\\a	bell
\\e	escape
\\n	new line
\\s	"lftp"
\\v	lftp version
\\T	the status string
.TE
.TP
.BR cmd:time-style \ (string)
This settin is tha default value fo' cls \-\-time\-style option.
.TP
.BR cmd:trace \ (boolean)
when true, lftp prints tha commandz it executes (like sh \-x).
.TP
.BR cmd:verify-host \ (boolean)
if true, lftp resolves host name immediately up in `open' command.
It be also possible ta skip tha check fo' a single `open' command if `&' is given,
or if ^Z is pressed durin tha check.
.TP
.BR cmd:verify-path \ (boolean)
if true, lftp checks tha path given up in `cd' command.
It be also possible ta skip tha check fo' a single `cd' command if `&' is given,
or if ^Z is pressed durin tha check.
Examples:
.Ds
set cmd:verify-path/hftp://* false
cd directory &
.De
.TP
.BR cmd:verify-path-cached \ (boolean)
When false, `cd' ta a gangbangin' finger-lickin' directory known from cache as existent will succeed immediately.
Otherwise tha verification will depend on cmd:verify-path setting.
.TP
.BR color:use-color " (tri-boolean)"
when true, cls command n' completion output colored file listings accordin ta color:dir-colors setting.
When set ta auto, flavas is used when output be a terminal.
.TP
.BR color:dir-colors " (string)"
file listin color description. I aint talkin' bout chicken n' gravy biatch. By default tha value of LS_COLORS environment variable is used. Y'all KNOW dat shit, muthafucka! See dircolors(1).
.TP
.BR dns:SRV-query \ (boolean)
query fo' SRV recordz n' use dem before gethostbyname. Da SRV records
are only used if port aint explicitly specified. Y'all KNOW dat shit, muthafucka! See RFC2052 fo' details.
.TP
.BR dns:cache-enable \ (boolean)
enable DNS cache. If it is off, lftp resolves host name each time it reconnects.
.TP
.BR dns:cache-expire " (time interval)"
time ta live fo' DNS cache entries. Put ya muthafuckin choppers up if ya feel dis! Well shiiiit, it has format <number><unit>+, e.g.
1d12h30m5s or just 36h. To disable expiration, set it ta `inf' or `never'.
.TP
.BR dns:cache-size \ (number)
maximum number of DNS cache entries.
.TP
.BR dns:fatal-timeout " (time interval)"
limit tha time fo' DNS queries. Put ya muthafuckin choppers up if ya feel dis! If DNS server is unavailable too long, lftp
will fail ta resolve a given host name. Right back up in yo muthafuckin ass. Set ta `never' ta disable.
.TP
.BR dns:order " (list of protocol names)"
sets tha order of DNS queries. Put ya muthafuckin choppers up if ya feel dis! Default is ``inet6 inet'' which means first
look up address up in inet6 crew, then inet n' use dem up in dat order.
To disable inet6 (AAAA) lookup, set dis variable ta ``inet''.
.TP
.BR dns:use-fork \ (boolean)
if true, lftp will fork before resolvin host address. Default is true.
.TP
.BR dns:max-retries \ (number)
If zero, there is no limit on tha number of times lftp will try
to lookup a address.
If > 0, lftp will try only dis number of times ta look up a address of each
address crew up in dns:order.
.TP
.BR file:charset \ (string)
local characta set. Well shiiiit, it is set from current locale initially.
.TP
.BR fish:charset \ (string)
the characta set used by fish server up in requests, replies n' file listings.
Default is empty which means tha same ol' dirty as local.
.TP
.BR fish:connect-program \ (string)
the program ta use fo' connectin ta remote server n' shit. Well shiiiit, it should support `\-l' option
for user name, `\-p' fo' port number n' shit. Default is `ssh \-a \-x'. Yo ass can set it to
`rsh', fo' example.
.TP
.BR fish:shell \ (string)
use specified shell on server side. Default is /bin/sh. On some systems,
/bin/sh exits when bustin cd ta a non-existent directory. lftp can handle
that but it has ta reconnect. Right back up in yo muthafuckin ass. Set it ta /bin/bash fo' such systems if
bash is installed.
.TP
.BR ftp:acct \ (string)
Send dis strang up in ACCT command afta login. I aint talkin' bout chicken n' gravy biatch. Da result is ignored.
Da closure fo' dis settin has format \fIuser@host\fP.
.TP
.BR ftp:anon-pass \ (string)
sets tha password used fo' anonymous FTP access authentication.
Default is "lftp@".
.TP
.BR ftp:anon-user \ (string)
sets tha user name used fo' anonymous FTP access authentication.
Default is "anonymous".
.TP
.BR ftp:auto-sync-mode \ (regex)
if first server message matches dis regex, turn on sync mode fo' dat host.
.TP
.BR ftp:charset \ (string)
the characta set used by FTP server up in requests, replies n' file listings.
Default is empty which means tha same ol' dirty as local. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. This settin is only used
when tha server do not support UTF8.
.TP
.BR ftp:client \ (string)
the name of FTP client ta bust wit CLNT command, if supported by server.
If it is empty, then no CLNT command is ghon be sent.
.TP
.BR ftp:bind-data-socket \ (boolean)
bind data socket ta tha intercourse of control connection (in passive mode).
Default is true, exception is tha loopback intercourse.
.TP
.BR ftp:fix-pasv-address \ (boolean)
if true, lftp will try ta erect address returned by server fo' PASV command
in case when server address is up in hood network n' PASV returns a address
from a private network. In dis case lftp would substitute server address
instead of tha one returned by PASV command, port number would not be chizzled.
Default is true.
.TP
.BR ftp:fxp-passive-source \ (boolean)
if true, lftp will try ta set up source FTP server up in passive mode first,
otherwise destination one. If first attempt fails, lftp tries ta set dem up
the other way. If tha other disposizzle fails too, lftp falls back ta plain
copy. Right back up in yo muthafuckin ass. See also ftp:use-fxp.
.TP
.BR ftp:home \ (string)
Initial directory. Default is empty strang which means auto. Right back up in yo muthafuckin ass. Set dis ta `/'
if you don't like tha look of %2F up in FTP URLs. Da closure fo' dis setting
has format \fIuser@host\fP.
.TP
.BR ftp:ignore-pasv-address \ (boolean)
If true, lftp uses control connection address instead of tha one returned in
PASV reply fo' data connection. I aint talkin' bout chicken n' gravy biatch. This can be useful fo' fucked up NATs.
Default is false.
.TP
.BR ftp:list-empty-ok \ (boolean)
if set ta false, empty lists from LIST command is ghon be treated as incorrect,
and another method (NLST) is ghon be used.
.TP
.BR ftp:list-options \ (string)
sets options which is always appended ta LIST command. Y'all KNOW dat shit, muthafucka! Well shiiiit, it can be
useful ta set dis ta `\-a' if server do not show dot (hidden) filez by default.
Default is empty.
.TP
.BR ftp:nop-interval \ (seconds)
delay between NOOP commandz when downloadin tail of a gangbangin' file. This is useful
for FTP servers which bust "Transfer complete" message before flushing
data transfer n' shit. In such cases NOOP commandz can prevent connection timeout.
.TP
.BR ftp:passive-mode \ (boolean)
sets passive FTP mode. This can be useful if yo ass is behind a gangbangin' firewall or a
dumb masqueradin router n' shit. In passive mode lftp uses PASV command, not the
PORT command which is used up in actizzle mode. In passive mode lftp itself
makes tha data connection ta tha server; up in actizzle mode tha server connects
to lftp fo' data transfer n' shit. Passive mode is tha default.
.TP
.BR ftp:port-ipv4 " (ipv4 address)"
specifies a IPv4 address ta bust wit PORT command. Y'all KNOW dat shit, muthafucka! Default is empty which
means ta bust tha address of local end of control connection.
.TP
.BR ftp:port-range \ (from-to)
allowed port range fo' actizzle mode.
Format is min-max, or `full' or `any' ta indicate any port. Default is `full'.
.TP
.BR ftp:prefer-epsv \ (boolean)
use EPSV as preferred passive mode. Default is `false'.
.TP
.BR ftp:proxy \ (URL)
specifies FTP proxy ta use.
To disable proxy set dis ta empty string. Note dat it aint nuthin but a FTP proxy which
uses FTP protocol, not FTP over HTTP. Default value is taken from environment
variable \fBftp_proxy\fP if it starts wit ``ftp://''. If yo' FTP proxy
requires authentication, specify user name n' password up in tha URL.
If ftp:proxy starts wit http:// then hftp protocol (FTP over HTTP proxy) is used instead
of FTP automatically.
.TP
.BR ftp:proxy-auth-type \ (string)
When set ta ``joined'', lftp sendz ``user@proxy_user@ftp.example.org'' as
user name ta proxy, n' ``password@proxy_password'' as password.
.IP
When set ta ``joined-acct'', lftp sendz ``user@ftp.example.org
proxy_user'' (with space) as user name ta proxy. Da joint password is busted as
usual n' tha proxy password is expected up in tha followin ACCT command.
.IP
When set ta ``open'', lftp first sendz proxy user and
proxy password n' then ``OPEN ftp.example.org'' followed by ``USER user''.
Da joint password is then busted as usual.
.IP
When set ta ``user'' (default), lftp first sendz proxy user and
proxy password n' then ``user@ftp.example.org'' as user name.
Da joint password is then busted as usual.
.IP
When set ta ``proxy-user@host'', lftp first sendz ``USER proxy_user@ftp.example.org'',
then proxy password. Y'all KNOW dat shit, muthafucka! Da joint user n' password is then busted as usual.
.TP
.BR ftp:rest-list \ (boolean)
allow usage of REST command before LIST command. Y'all KNOW dat shit, muthafucka! This might be useful for
pimpin' directories yo, but some FTP servers silently ignore REST before LIST.
.TP
.BR ftp:rest-stor \ (boolean)
if false, lftp aint gonna try ta use REST before STOR. This can be useful
for some buggy servers which corrupt (fill wit zeros) tha file if REST followed
by STOR is used.
.TP
.BR ftp:retry-530 \ (regex)
Retry on server reply 530 fo' PASS command if text matches dis regular expression.
This settin should be useful ta distinguish between overloaded server
(temporary condition) n' incorrect password (permanent condition).
.TP
.BR ftp:retry-530-anonymous \ (regex)
Additionizzle regular expression fo' anonymous login, like ftp:retry-530.
.TP
.BR ftp:site-group \ (string)
Send dis strang up in SITE GROUP command afta login. I aint talkin' bout chicken n' gravy biatch. Da result is ignored.
Da closure fo' dis settin has format \fIuser@host\fP.
.TP
.BR ftp:skey-allow \ (boolean)
allow bustin  skey/opie reply if server appears ta support dat shit. On by default.
.TP
.BR ftp:skey-force \ (boolean)
do not bust plain text password over tha network, use skey/opie instead. Y'all KNOW dat shit, muthafucka! If
skey/opie aint available, assume failed login. I aint talkin' bout chicken n' gravy biatch. Off by default.
.TP
.BR ftp:ssl-allow \ (boolean)
if true, try ta negotiate SSL connection wit FTP server fo' non-anonymous
access. Default is true. This n' other SSL settings is only available if lftp was compiled
with a ssl/tls library.
.TP
.BR ftp:ssl-auth \ (string)
the argument fo' AUTH command, can be one of SSL, TLS, TLS-P, TLS-C.
See RFC4217 fo' explanations. By default TLS or SSL is ghon be used, dependin on FEAT reply.
.TP
.BR ftp:ssl-data-use-keys \ (boolean)
if true, lftp loadz ssl:key-file fo' protected data connection like a muthafucka. When false,
it do not, n' tha server can match data n' control connections by session ID.
Default is true.
.TP
.BR ftp:ssl-force \ (boolean)
if true, refuse ta bust password up in clear when server do not support SSL.
Default is false.
.TP
.BR ftp:ssl-protect-data \ (boolean)
if true, request SSL connection fo' data transfers. This is cpu-intensive
but serves up privacy. Default is false.
.TP
.BR ftp:ssl-protect-fxp \ (boolean)
if true, request SSL connection fo' data transfer between two FTP servers
in FXP mode. CPSV or SSCN command is ghon be used up in dat case. If SSL connection
fails fo' some reason, lftp would try unprotected FXP transfer unless
ftp:ssl-force is set fo' any of tha two servers. Default is false.
.TP
.BR ftp:ssl-protect-list \ (boolean)
if true, request SSL connection fo' file list transfers. Default is true.
.TP
.BR ftp:ssl-use-ccc \ (boolean)
if true, lftp would issue CCC command afta logon, thus disable
ssl protection layer on control connection.
.TP
.BR ftp:stat-interval " (time interval)"
interval between STAT commands. Default is 1 second.
.TP
.BR ftp:strict-multiline \ (boolean)
when true, lftp strictly checks fo' multiline reply format (expects it to
end wit tha same code as it started with). When false, dis check is
relaxed.
.TP
.BR ftp:sync-mode \ (boolean)
if true, lftp will bust one command at a time n' wait for
response. This might be useful if yo ass is rockin a funky-ass buggy FTP server or
router n' shit. When it is off, lftp sendz a ounce ta tha bounce of commandz n' waits for
responses - it speedz up operation when round trip time is significant.
Unfortunately it do not work wit all FTP servers n' some routas have
shits wit it, so it is on by default.
.TP
.BR ftp:timezone \ (string)
Assume dis timezone fo' time up in listings returned by LIST command.
This settin can be GMT offset [+|-]HH[:MM[:SS]] or any valid TZ value
(e.g. Europe/Moscow or MSK-3MSD,M3.5.0,M10.5.0/3). Da default is GMT.
Set it ta a empty value ta assume local timezone specified by environment
variable TZ.
.TP
.BR ftp:trust-feat \ (string)
When true, assume dat FEAT returned data is erect n' don't use
common protocol extensions like SIZE, MDTM, REST if they is not listed.
Default is false.
.TP
.BR ftp:use-abor \ (boolean)
if false, lftp do not bust ABOR command but closes data connection
immediately.
.TP
.BR ftp:use-allo \ (boolean)
when legit (default), lftp sendz ALLO command before uploadin a gangbangin' file.
.TP
.BR ftp:use-feat \ (boolean)
when legit (default), lftp uses FEAT command ta determine extended features of
ftp server.
.TP
.BR ftp:use-fxp \ (boolean)
if true, lftp will try ta set up direct connection between two ftp servers.
.TP
.BR ftp:use-hftp \ (boolean)
when ftp:proxy points ta a http proxy, dis settin selects hftp method (GET,
HEAD) when true, n' CONNECT method when false. Default is true.
.TP
.BR ftp:use-ip-tos \ (boolean)
when true, lftp uses IPTOS_LOWDELAY fo' control connection n' IPTOS_THROUGHPUT
for data connections.
.TP
.BR ftp:lang \ (boolean)
the language selected wit LANG command, if supported as indicated by FEAT
response. Default is empty which means server default.
.TP
.BR ftp:use-mdtm \ (boolean)
when legit (default), lftp uses MDTM command ta determine file modification
time.
.TP
.BR ftp:use-mdtm-overloaded \ (boolean)
when true, lftp uses two argument MDTM command ta set file modification
time on uploaded files. Default is false.
.TP
.BR ftp:use-site-idle \ (boolean)
when true, lftp sendz `SITE IDLE' command wit net:idle argument. Default
is false.
.TP
.BR ftp:use-site-utime \ (boolean)
when true, lftp sendz 5-argument `SITE UTIME' command ta set file modification time
on uploaded files. Default is true.
.TP
.BR ftp:use-site-utime2 \ (boolean)
when true, lftp sendz 2-argument `SITE UTIME' command ta set file modification time
on uploaded files. Default is true.
If 5-argument `SITE UTIME' be also enabled, 2-argument command is tried first.
.TP
.BR ftp:use-size \ (boolean)
when legit (default), lftp uses SIZE command ta determine file size.
.TP
.BR ftp:use-stat \ (boolean)
if true, lftp sendz STAT command up in FXP mode transfer ta know how tha fuck much
data has been transferred. Y'all KNOW dat shit, muthafucka! See also ftp:stat-interval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Default is true.
.TP
.BR ftp:use-stat-for-list \ (boolean)
when true, lftp uses STAT instead of LIST command. Y'all KNOW dat shit, muthafucka! By default `.' is used
as STAT argument. Usin STAT, lftp avoidz bustin data connection fo' directory
listing. Right back up in yo muthafuckin ass. Some servers require special options fo' STAT, use ftp:list-options
to specify dem (e.g. \fB\-la\fP).
.TP
.BR ftp:use-telnet-iac \ (boolean)
when legit (default), lftp uses TELNET IAC command n' bigs up TELNET protocol
as specified up in RFC959. When false, it do not follow TELNET protocol and
thus do not double 255 (0xFF, 0377) characta n' do not prefix ABOR and
STAT commandz wit TELNET IP+SYNCH signal.
.TP
.BR ftp:use-tvfs " (tri-boolean)"
When set ta auto, usage of TVFS feature dependz on FEAT server reply. Otherwise
this settin  drops some lyrics ta whether use it or not. In short, if a server supports TVFS
feature then it uses unix-like paths.
.TP
.BR ftp:use-utf8 \ (boolean)
if true, lftp sendz `OPTS UTF8 ON' ta tha server ta activate UTF-8 encoding
(if supported). Disable it if tha file names gotz a gangbangin' finger-lickin' different encodin and
the server has a shiznit wit dat shit.
.TP
.BR ftp:use-quit " (boolean)"
if true, lftp sendz QUIT before disconnectin from ftp server n' shit. Default is true.
.TP
.BR ftp:verify-address \ (boolean)
verify dat data connection be reppin tha network address of control
connection peer n' shit. This can possibly prevent data connection spoofing
which can lead ta data corruption. I aint talkin' bout chicken n' gravy biatch. Unfortunately, dis can fail
for certain ftp servers wit nuff muthafuckin network intercourses,
when they do not set outgoin address on data socket, so it is disabled by default.
.TP
.BR ftp:verify-port \ (boolean)
verify dat data connection has port 20 (ftp-data) on its remote end.
This can possibly prevent data connection spoofin by playaz of remote
host. Unfortunately, too nuff windows n' even unix ftp servers forget
to set proper port on data connection, thus dis check is off by default.
.TP
.BR ftp:web-mode \ (boolean)
disconnect afta closin data connection. I aint talkin' bout chicken n' gravy biatch. This can be useful fo' straight-up
broken ftp servers. Default is false.
.TP
.BR ftps:initial-prot \ (string)
specifies initial PROT settin fo' FTPS connections. Right back up in yo muthafuckin ass. Should be one of: C, S,
E, P, or empty. Default is empty which means unknown, so dat lftp will use
PROT command unconditionally. If PROT command turns up ta be unsupported,
then Clear mode would be assumed.
.TP
.BR hftp:cache \ (boolean)
allow server/proxy side cachin fo' ftp-over-http protocol.
.TP
.BR hftp:cache-control \ (string)
specify correspondin HTTP request header.
.TP
.BR hftp:decode \ (boolean)
when true, lftp automatically decodes tha entitizzle up in hftp protocol when Content-Encoding
header value matches deflate, gzip, compress, x-gzip or x-compress.
.TP
.BR hftp:proxy \ (URL)
specifies HTTP proxy fo' FTP-over-HTTP protocol (hftp). Da protocol hftp
cannot work without a HTTP proxy, obviously.
Default value is taken from environment
variable \fBftp_proxy\fP if it starts wit ``http://'', otherwise from
environment variable \fBhttp_proxy\fP.  If yo' FTP proxy
requires authentication, specify user name n' password up in tha URL.
.TP
.BR hftp:use-allprop \ (boolean)
if true, lftp will bust `<allprop/>' request body up in `PROPFIND' requests,
otherwise it will bust a empty request body.
.TP
.BR hftp:use-authorization \ (boolean)
if set ta off, lftp will bust password as part of URL ta tha proxy. This
may be required fo' some proxies (e.g. M-soft). Default is on, n' lftp
will bust password as part of Authorization header.
.TP
.BR hftp:use-head \ (boolean)
if set ta off, lftp will try ta use `GET' instead of `HEAD' fo' hftp protocol.
While dis is slower, it may allow lftp ta work wit some proxies which
don't KNOW or mishandle ``HEAD ftp://'' requests.
.TP
.BR hftp:use-mkcol \ (boolean)
if set ta off, lftp will try ta use `PUT' instead of `MKCOL' ta create
directories wit hftp protocol. Default is off.
.TP
.BR hftp:use-propfind \ (boolean)
if set ta off, lftp aint gonna try ta use `PROPFIND' ta git directory contents
with hftp protocol n' use `GET' instead. Y'all KNOW dat shit, muthafucka! Default is off.
.TP
.BR hftp:use-type \ (boolean)
If set ta off, lftp won't try ta append `;type=' ta URLs passed ta proxy.
Some fucked up proxies don't handle it erectly. Default is on.
.TP
.BR "http:accept, http:accept-charset, http:accept-encoding, http:accept-language" " (string)"
specify correspondin HTTP request headers.
.TP
.BR http:authorization \ (string)
the authorization ta use by default, when no user is specified. Y'all KNOW dat shit, muthafucka! Da format
is ``user:password''. Default is empty which means no authorization.
.TP
.BR http:cache \ (boolean)
allow server/proxy side caching.
.TP
.BR http:cache-control \ (string)
specify correspondin HTTP request header.
.TP
.BR http:cookie \ (string)
send dis cookie ta server n' shiznit fo' realz. A closure is useful here:
     set cookie/www.somehost.com "param=value"
.TP
.BR http:decode \ (boolean)
when true, lftp automatically decodes tha entitizzle when Content-Encoding
header value matches deflate, gzip, compress, x-gzip or x-compress.
.TP
.BR http:post-content-type " (string)"
specifies value of Content-Type HTTP request header fo' POST method.
Default is ``application/x-www-form-urlencoded''.
.TP
.BR http:proxy \ (URL)
specifies HTTP proxy. Well shiiiit, it is used when lftp works over HTTP protocol.
Default value is taken from environment variable \fBhttp_proxy\fP.
If yo' proxy requires authentication, specify user name n' password
in tha URL.
.TP
.BR http:put-method " (PUT or POST)"
specifies which HTTP method ta use on put.
.TP
.BR http:put-content-type " (string)"
specifies value of Content-Type HTTP request header fo' PUT method.
.TP
.BR http:referer " (string)"
specifies value fo' Referer HTTP request header n' shit. Right back up in yo muthafuckin ass. Single dot `.' expands
to current directory URL. Default is `.'. Right back up in yo muthafuckin ass. Set ta empty strang ta disable
Referer header.
.TP
.BR http:set-cookies " (boolean)"
if true, lftp modifies http:cookie variablez when Set-Cookie header is received.
.TP
.BR http:use-allprop \ (boolean)
if true, lftp will bust `<allprop/>' request body up in `PROPFIND' requests,
otherwise it will bust a empty request body.
.TP
.BR http:use-mkcol \ (boolean)
if set ta off, lftp will try ta use `PUT' instead of `MKCOL' ta create
directories wit HTTP protocol. Default is on.
.TP
.BR http:use-propfind \ (boolean)
if set ta off, lftp aint gonna try ta use `PROPFIND' ta git directory contents
with HTTP protocol n' use `GET' instead. Y'all KNOW dat shit, muthafucka! Default is on.
.TP
.BR http:user-agent " (string)"
the strang lftp sendz up in User-Agent header of HTTP request.
.TP
.BR https:proxy " (string)"
specifies https proxy. Default value is taken from environment variable \fBhttps_proxy\fP.
.TP
.BR mirror:dereference " (boolean)"
when true, mirror will dereference symbolic links by default.
Yo ass can override it by \-\-no\-dereference option. I aint talkin' bout chicken n' gravy biatch. Default if false.
.TP
.BR mirror:exclude-regex " (regex)"
specifies default exclusion pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. Yo ass can override it by \-\-include option.
.TP
.BR mirror:include-regex " (regex)"
specifies default inclusion pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it is used just afta mirror:exclude-regex
is applied. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is never used if mirror:exclude-regex is empty.
.TP
.BR mirror:no-empty-dirs " (boolean)"
when true, mirror don't create empty directories (like \-\-no\-empty\-dirs option).
.TP
.BR mirror:sort-by " (string)"
specifies order of file transfers. Valid joints are: name, name-desc, size, size-desc,
date, date-desc. When tha value is name or name-desc, then mirror:order settin also
affects tha order or transfers.
.TP
.BR mirror:order " (list of patterns)"
specifies order of file transfers when sortin by name. E.g. settin dis ta "*.sfv *.sum" make mirror to
transfer filez matchin *.sfv first, then ones matchin *.sum n' then all other
files. To process directories afta other files, add "*/" ta tha end of pattern list.
.TP
.BR mirror:parallel-directories " (boolean)"
if true, mirror will start processin of nuff muthafuckin directories up in parallel
when it is up in parallel mode. Otherwise, it will transfer filez from a single
directory before movin ta other directories.
.TP
.BR mirror:parallel-transfer-count " (number)"
specifies number of parallel transfers mirror be allowed ta start. Default is 1.
Yo ass can override it wit \-\-parallel option.
.TP
.BR mirror:set-permissions \ (boolean)
When set ta off, mirror won't try ta copy file n' directory permissions.
Yo ass can override it by \-\-perms option. I aint talkin' bout chicken n' gravy biatch. Default is on.
.TP
.BR mirror:skip-noaccess \ (boolean)
when true, mirror do not try ta downlizzle filez which is obviously
inaccessible by tha permission mask. Default is false.
.TP
.BR mirror:use-pget-n " (number)"
specifies \-n option fo' pget command used ta transfer every last muthafuckin single file under
mirror. Shiiit, dis aint no joke. Default is 1 which disablez pget.
.TP
.BR module:path \ (string)
colon separated list of directories ta look fo' modules. Can be initialized by
environment variable LFTP_MODULE_PATH. Default is `PKGLIBDIR/VERSION:PKGLIBDIR'.
.TP
.BR net:connection-limit \ (number)
maximum number of concurrent connections ta tha same crib. 0 means unlimited.
.TP
.BR net:connection-takeover \ (boolean)
if true, foreground connections have prioritizzle over background ones n' can
interrupt background transfers ta complete a gangbangin' foreground operation.
.TP
.BR net:idle " (time interval)"
disconnect from server afta dis idle time. Default is 3 minutes.
.TP
.BR net:limit-rate " (bytes per second)"
limit transfer rate on data connection. I aint talkin' bout chicken n' gravy biatch. 0 means unlimited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Yo ass can specify
two numbers separated by colon ta limit downlizzle n' upload rate separately.
Suffixes is supported, e.g. 100K means 102400.
.TP
.BR net:limit-max \ (bytes)
limit accumulatin of unused limit-rate. 0 means twice of limit-rate.
.TP
.BR net:limit-total-rate " (bytes per second)"
limit transfer rate of all connections up in sum. 0 means unlimited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Yo ass can specify
two numbers separated by colon ta limit downlizzle n' upload rate separately.
Note dat sockets have receive buffers on them, dis can lead ta network
link load higher than dis rate limit just afta transfer beginning. You
can try ta set net:socket-buffer ta relatively lil' small-ass value ta avoid all dis bullshit.
.TP
.BR net:limit-total-max \ (bytes)
limit accumulatin of unused limit-total-rate. 0 means twice of limit-total-rate.
.TP
.BR net:max-retries \ (number)
the maximum number of sequential triez of a operation without success.
0 means unlimited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 1 means no retries.
.TP
.BR net:no-proxy \ (string)
gotz nuff comma separated list of domains fo' which proxy should not be used.
Default is taken from environment variable \fBno_proxy\fP.
.TP
.BR net:persist-retries " (number)"
ignore dis number of hard errors. Useful ta login ta buggy FTP servers which
reply 5xx when there is too nuff users.
.TP
.BR net:reconnect-interval-base \ (seconds)
sets tha base minimal time between reconnects fo' realz. Actual interval dependz on
net:reconnect-interval-multiplier n' number of attempts ta big-ass up an
operation.
.TP
.BR net:reconnect-interval-max \ (seconds)
sets maximum reconnect interval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. When current interval afta multiplication
by net:reconnect-interval-multiplier reaches dis value (or exceedz it), it
is reset back ta net:reconnect-interval-base.
.TP
.BR net:reconnect-interval-multiplier \ (real\ number)
sets multiplier by which base interval is multiplied each time freshly smoked up attempt
to big-ass up a operation fails. When tha interval reaches maximum, it is reset
to base value. Right back up in yo muthafuckin ass. See net:reconnect-interval-base n' net:reconnect-interval-max.
.TP
.BR net:socket-bind-ipv4 " (ipv4 address)"
bind all IPv4 sockets ta specified address. This can be useful ta select a
specific network intercourse ta use. Default is empty which means not ta bind
IPv4 sockets, operatin system will chizzle a address automatically using
routin table.
.TP
.BR net:socket-bind-ipv6 " (ipv6 address)"
the same fo' IPv6 sockets.
.TP
.BR net:socket-buffer \ (bytes)
use given size fo' SO_SNDBUF n' SO_RCVBUF socket options. 0 means system
default.
.TP
.BR net:socket-maxseg \ (bytes)
use given size fo' TCP_MAXSEG socket option. I aint talkin' bout chicken n' gravy biatch. Not all operatin systems support
this option yo, but Linux do.
.TP
.BR net:timeout " (time interval)"
sets tha network protocol timeout.
.TP
.BR pget:default-n \ (number)
default number of chunks ta split tha file ta up in pget.
.TP
.BR pget:min-chunk-size \ (number)
minimal chunk size ta split tha file to.
.TP
.BR pget:save-status " (time interval)"
save pget transfer status dis often. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Set ta `never' ta disable savin of tha status file.
Da status is saved ta a gangbangin' file wit suffix \fI.lftp-pget-status\fP.
.TP
.BR sftp:charset \ (string)
the characta set used by SFTP server up in file names n' file listings.
Default is empty which means tha same ol' dirty as local. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. This settin is only used
for SFTP protocol version prior ta 4. Version 4 n' lata always use UTF-8.
.TP
.BR sftp:connect-program \ (string)
the program ta use fo' connectin ta remote server n' shit. Well shiiiit, it should support `\-l' option
for user name, `\-p' fo' port number n' shit. Default is `ssh \-a \-x'. Yo ass can set it to
`rsh', fo' example.
.TP
.BR sftp:max-packets-in-flight \ (number)
Da maximum number of unreplied packets up in flight. If round trip time is
significant, you should increase dis n' size-read/size-write. Default is 16.
.TP
.BR sftp:protocol-version \ (number)
Da protocol number ta negotiate. Default is 4. Da actual protocol version
used dependz on server.
.TP
.BR sftp:server-program \ (string)
Da server program implementin SFTP protocol. If it do not contain a slash `/',
it is considered a ssh2 subsystem n' \-s option is used when startin connect-program.
Default is `sftp'. Yo ass can use rsh as transhiznit level protocol like this:
.Ds
set sftp:connect-program rsh
set sftp:server-program /usr/libexec/openssh/sftp-server
.De
Similarly you can run SFTP over SSH1.
.TP
.BR sftp:size-read \ (number)
Block size fo' reading. Default is 0x8000.
.TP
.BR sftp:size-write \ (number)
Block size fo' writing. Default is 0x8000.
.TP
.BR ssl:ca-file " (path ta file)"
use specified file as Certificate Authoritizzle certificate.
.TP
.BR ssl:ca-path " (path ta directory)"
use specified directory as Certificate Authoritizzle certificate repository (OpenSSL only).
.TP
.BR ssl:check-hostname " (boolean)"
when true, lftp checks if tha host name used ta connect ta tha server
correspondz ta tha host name up in its certificate.
.TP
.BR ssl:crl-file " (path ta file)"
use specified file as Certificate Revocation List certificate.
.TP
.BR ssl:crl-path " (path ta directory)"
use specified directory as Certificate Revocation List certificate repository (OpenSSL only).
.TP
.BR ssl:key-file " (path ta file)"
use specified file as yo' private key.
.TP
.BR ssl:cert-file " (path ta file)"
use specified file as yo' certificate.
.TP
.BR ssl:use-sni \ (boolean)
when true, use Server Name Indication (SNI) TLS extension.
.TP
.BR ssl:verify-certificate \ (boolean)
if set ta fo'sho, then verify serverz certificate ta be signed by a known
Certificate Authoritizzle n' not be on Certificate Revocation List.
.TP
.BR torrent:ip " (ipv4 address)"
IP address ta bust ta tha tracker n' shit. Right back up in yo muthafuckin ass. Specify it if yo ass is rockin a HTTP proxy.
.TP
.BR torrent:ipv6 " (ipv6 address)"
IPv6 address ta bust ta tha tracker n' shit. By default, first found global unicast address is used.
.TP
.BR torrent:max-peers \ (number)
maximum number of peers fo' a torrent. Least used peers is removed to
maintain dis limit.
.TP
.BR torrent:port-range \ (from-to)
port range ta accept connections on. I aint talkin' bout chicken n' gravy biatch fo' realz. A single port is selected when a torrent
starts.
.TP
.BR torrent:retracker \ (URL)
explicit retracker URL, e.g. `http://retracker.local/announce'.
.TP
.BR torrent:save-metadata \ (boolean)
when true, lftp saves metadata of each torrent it works wit to
\fI~/.local/share/lftp/torrent/md\fP or \fI~/.lftp/torrent/md\fP directory
and loadz it from there if necessary.
.TP
.BR torrent:seed-max-time " (time interval)"
maximum seed time fo' realz. Afta dis period of time a cold-ass lil complete torrent shuts down
independently of ratio. Well shiiiit, it can be set ta infinitizzle if needed.
.TP
.BR torrent:seed-min-peers \ (number)
minimum number of peers when tha torrent is complete. If there be less,
new peers is actively searched for.
.TP
.BR torrent:stop-on-ratio " (real number)"
torrent stops when itz complete n' ratio reached dis number.
.TP
.BR torrent:use-dht \ (boolean)
when true, DHT is used.
.TP
.BR xfer:auto-rename (boolean)
suggested filenames provided by tha server is used if user explicitly sets
this option ta `on' fo' realz. As dis could be securitizzle risk, default is off.
.TP
.BR xfer:clobber \ (boolean)
if dis settin is off, git commandz aint gonna overwrite existing
filez n' generate a error instead.
.TP
.BR xfer:destination-directory " (path or URL ta directory)"
This settin is used as default \-O option fo' git n' mget commands.
Default is empty, which means current directory (no \-O option).
.TP
.BR xfer:disk-full-fatal \ (boolean)
when true, lftp aborts a transfer if it cannot write target file cuz
of full disk or quota; when false, lftp waits fo' disk space ta be freed.
.TP
.BR xfer:eta-period \ (seconds)
the period over which weighted average rate is calculated ta produce ETA.
.TP
.BR xfer:eta-terse \ (boolean)
show terse ETA (only high order parts). Default is true.
.TP
.BR xfer:log \ (boolean)
when true, lftp logs transfers ta a gangbangin' file from xfer:log-file setting.
.TP
.BR xfer:log-file " (path ta file)"
the file ta log transfers to. Default is \fI~/.local/share/lftp/transfer_log\fR or \fI~/.lftp/transfer_log\fR.
.TP
.BR xfer:make-backup \ (boolean)
when true, lftp renames pre-existin file addin ``~'' suffix instead of overwritin dat shit.
.TP
.BR xfer:max-log-size " (number)"
maximum size of tha transfer log file. When tha size is reached, tha file is renamed n' started anew.
.TP
.BR xfer:max-redirections " (number)"
maximum number of redirections. This can be useful fo' downloadin over HTTP.
0 prohibits redirections.
.TP
.BR xfer:rate-period \ (seconds)
the period over which weighted average rate is calculated ta be shown.
.TP
.BR xfer:verify \ (boolean)
when true, verify-command is launched afta successful transfer ta validate
file integrity. Zero exit code of dat command should indicate erectness
of tha file.
.TP
.BR xfer:verify-command \ (string)
the command ta validate file integrity. Da only argument is tha path to
the file.

.PP
Da name of a variable can be abbreviated unless it becomes
ambiguous. Da prefix before `:' can be omitted like a muthafucka. Yo ass can
set one variable nuff muthafuckin times fo' different closures, n' thus
you can git a particular settings fo' particular state. Da closure
is ta be specified afta variable name separated wit slash `/'.
.PP
Da closure fo' `dns:', `net:', `ftp:', `http:', `hftp:' domain variables
is currently just tha host name as you specify it up in tha `open' command
(with some exceptions where closure is meaningless, e.g. dns:cache-size).
For some `cmd:' domain variablez tha closure is current URL without path.
For other variablez it aint currently used. Y'all KNOW dat shit, muthafucka! See examplez up in tha sample
\fIlftp.conf\fR.
.PP
Certain commandz n' settings take a time interval parameter n' shit. Well shiiiit, it has
the format Nx[Nx...], where N is time amount (floatin point) n' x is time unit: d - days,
h - hours, m - minutes, s - seconds. Default unit is second. Y'all KNOW dat shit, muthafucka! E.g. 5h30m or 5.5h.
Also tha interval can be `infinity', `inf', `never', `forever' - it means
infinite interval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. E.g. `sleep forever' or `set dns:cache-expire never'.
.PP
Boolean settings can be one of (true, on, fo'sho, 1, +) fo' a True value
or one of (false, off, no, 0, -) fo' a False value.
.PP
Tri-boolean settings have either a funky-ass boolean value or `auto'.
.PP
Integer settings can gotz a suffix: k - kibi, m - mebi, g - gigi, etc.
They can also gotz a prefix: 0 - octal, 0x - hexadecimal.

.SS FTP asynchronous mode (pipelining)
.PP
.B Lftp
can speed up FTP operations by bustin  nuff muthafuckin commandz at once and
then checkin all tha responses. Right back up in yo muthafuckin ass. See ftp:sync-mode variable. Right back up in yo muthafuckin ass. Sometimes
this do not work, thus synchronous mode is tha default. Yo ass can try
to turn synchronous mode off n' peep if it works fo' yo thugged-out ass. Well shiiiit, it is known
that some network software dealin wit address translation works
incorrectly up in tha case of nuff muthafuckin FTP commandz up in one network packet.
.PP
RFC959 says: ``Da user-process bustin  another command before the
completion reply would be up in violation of protocol; but server-FTP
processes should queue any commandz dat arrive while a preceding
command is up in progress'' fo' realz. Also, RFC1123 says: ``Implementors MUST
NOT assume any correspondence between READ boundaries on tha control
connection n' tha Telnet EOL sequences (CR LF).'' n' ``a single READ
from tha control connection may include mo' than one FTP command''.

So it must be safe ta bust nuff muthafuckin commandz at once, which speedz up
operation a shitload n' seems ta work wit all Unix n' VMS based ftp
servers. Unfortunately, windows based servers often cannot handle
several commandz up in one packet, n' so cannot some fucked up routers.

.SH OPTIONS
.TP
.B \-d
Switch on debuggin mode.
.TP
.BI \-e " commands"
Execute given commandz n' don't exit.
.TP
.BI \-p " port"
Use tha given port ta connect.
.TP
.BI \-u " user\fR[\fP\fB,\fPpass\fR]\fP"
Use tha given username n' password ta connect. Remember ta quote tha password properly up in tha shell.
Also note dat it aint secure ta specify tha password on command line, use \fI~/.netrc\fP file.
Alternatively you can use ssh-based protocols wit authorized keys, so you don't gotta enta a password.
.PP
.TP
.BI \-f " script_file"
Execute commandz up in tha file n' exit.
This option must be used ridin' solo without other arguments.
.TP
.BI \-c " commands"
Execute tha given commandz n' exit. Commandz can be separated with
a semicolon, `&&' or `||'. Remember ta quote tha commandz argument properly up in tha shell.
This option must be used ridin' solo without other arguments.

.SH ENVIRONMENT VARIABLES
Da followin environment variablez is processed by \fBlftp\fR:
.IP "\fBHOME\fP"
Used fo' (local) tilde (`~') expansion
.IP "\fBSHELL\fP"
Used by tha \fB!\fR command ta determine tha shell ta run.
.IP "\fBPAGER\fP"
This should be tha name of tha pager ta use.  It aint nuthin but used by the
\fBmore\fR n' \fBzmore\fR commands.
.IP "\fBhttp_proxy\fP, \fBhttps_proxy\fP"
Used ta set initial http:proxy, hftp:proxy n' https:proxy variables.
.IP "\fBftp_proxy\fP"
Used ta set initial ftp:proxy or hftp:proxy variables, depending
on URL protocol used up in dis environment variable.
.IP "\fBno_proxy\fP"
Used ta set initial net:no-proxy variable.
.IP "\fBLFTP_MODULE_PATH\fP"
Used ta set initial module:path variable.
.IP "\fBLFTP_HOME\fP"
Used ta locate tha directory dat stores user-specific configuration files. If
unset, \fI~/.lftp\fR is ghon be used. Y'all KNOW dat shit, muthafucka! Please note dat if dis directory do not
exist, then XDG directories is ghon be used.
.IP "\fBLS_COLORS\fP"
used ta set initial color:dir-colors variable.
.IP "\fBXDG_CONFIG_DIR\fP, \fBXDG_DATA_DIR\fP, \fBXDG_CACHE_DIR\fP"
Used ta locate tha directories fo' user-specific filez when \fI~/.lftp\fR
(or \fB$LFTP_HOME\fP directory) do not exist. Defaults are
\fI~/.config\fR, \fI~/.local/share\fR n' \fI~/.cache\fR respectively. The
suffix \fI/lftp\fR be appended ta make tha full path ta tha directories.

.SH FILES
.TP
.I "/etc/lftp.conf"
system-wide startup file fo' realz. Actual location dependz on \-\-sysconfdir
configure option. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it is \fI/etc\fR when prefix is \fI/usr\fR,
\fI/usr/local/etc\fR by default.

.TP
.I "~/.config/lftp/rc \fPor\fI ~/.lftp/rc, ~/.lftprc"
These filez is executed on lftp startup afta \fI/etc/lftp.conf\fR.
.TP
.I "~/.local/share/lftp/log \fPor\fI ~/.lftp/log"
Da file thangs is logged ta when lftp moves tha fuck into tha background in
nohup mode.
.TP
.I "~/.local/share/lftp/transfer_log \fPor\fI ~/.lftp/transfer_log"
Da file transfers is logged ta when xfer:log settin is set ta `yes'.
Da location can be chizzled by xfer:log-file setting.
.TP
.I "~/.local/share/lftp/bookmarks \fPor\fI ~/.lftp/bookmarks"
Da file is used ta store lftpz bookmarks.  See tha \fBbookmark\fR
command.
.TP
.I "~/.local/share/lftp/cwd_history \fPor\fI ~/.lftp/cwd_history"
Da file is used ta store last hustlin directories fo' each joint hit up.
.TP
.I "~/.local/share/lftp/bg/ \fPor\fI ~/.lftp/bg/"
Da directory is used ta store named sockets fo' backgrounded lftp processes.
.TP
.I "~/.cache/lftp/DHT/ \fPor\fI ~/.lftp/DHT/""
Da directory is used ta store DHT id n' nodes cache fo' IPv4 n' IPv6.
File name suffix is tha host name.
.TP
.I "~/.local/share/lftp/torrent/md/ \fPor\fI ~/.lftp/torrent/md/""
Da directory is used ta store torrent metadata. Well shiiiit, it is especially useful
for magnet links, cached metadata can be loaded from tha directory.
It can also serve as torrent history, file names is tha info_hash of torrents.
.TP
.I "~/.netrc"
Da file is consulted ta git default login n' password ta FTP server.
Passwordz is also searched here if a URL wit user name but wit no
password is used.

.SH SEE ALSO
.BR ftpd (8),\  ftp (1)
.br
RFC854 (telnet),
RFC959 (ftp),
RFC1123,
RFC1945 (http/1.0),
RFC2052 (SRV RR),
RFC2228 (ftp securitizzle extensions),
RFC2389 (ftp FEAT),
RFC2428 (ftp/ipv6),
RFC2518 (WebDAV),
RFC2616 (http/1.1),
RFC2617 (http/1.1 authentication),
RFC2640 (ftp i18n),
RFC4217 (ftp over ssl),
BEP0003 (BitTorrent Protocol),
BEP0005 (DHT Protocol),
BEP0006 (Fast Extension),
BEP0007 (IPv6 Tracker Extension),
BEP0009 (Extension fo' Peers ta Send Metadata Files),
BEP0010 (Extension Protocol),
BEP0012 (Multitracker Metadata Extension),
BEP0023 (Tracker Returns Compact Peer Lists),
BEP0032 (DHT Extensions fo' IPv6).
.br
.na
http://www.ietf.org/internet-drafts/draft-ietf-ftpext-mlst-16.txt
(ftp extensions over RFC959),
.br
http://www.ietf.org/internet-drafts/draft-ietf-secsh-filexfer-10.txt
(sftp).
.br
http://wiki.theory.org/BitTorrentSpecification
.br
http://www.bittornado.com/docs/multitracker-spec.txt
.br
http://www.rasterbar.com/products/libtorrent/dht_sec.html (DHT securitizzle extension)
.br
http://xbtt.sourceforge.net/udp_tracker_protocol.html (UDP tracker)
.ad

.SH AUTHOR
.nf
Alexander V. Lukyanov
lav@yars.free.net
.fi

.SH ACKNOWLEDGMENTS
This manual page was originally freestyled by Christoph Lameter
<clameter@debian.org>, fo' tha Debian GNU/Linux system. Da page was
improved n' updated lata by Nicolas Lichtmaier <nick@Feedback.com.ar>,
Jizzy Troup <J.J.Troup@comp.brad.ac.uk> n' Alexander V. Lukyanov
<lav@yars.free.net>.
