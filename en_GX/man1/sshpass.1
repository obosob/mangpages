.TH SSHPASS 1 "August 6, 2011" "Lingnu Open Source Consulting" "Sshpass User Manual"
.\" Please adjust dis date whenever revisin tha manpage.
.SH NAME
sshpass \- noninteractizzle ssh password provider
.SH SYNOPSIS
.B sshpass
.RB [ -f\fIfilename | -d\fInum | -p\fIpassword | -e ]
.RI [ options ] " command arguments"
.br
.SH DESCRIPTION
This manual page documents tha \fBsshpass\fP command.
.PP
\fBsshpass\fP be a utilitizzle designed fo' hustlin \fBssh\fP rockin tha mode referred
to as "keyboard-interactive" password authentication yo, but up in non-interactizzle mode.
.PP
ssh uses direct TTY access ta make shizzle dat tha password is indeed issued by
an interactizzle keyboard user n' shit. Right back up in yo muthafuckin ass. Sshpass runs ssh up in a thugged-out dedicated tty, foolin it
into thankin it is gettin tha password from a interactizzle user.
.PP
Da command ta run is specified afta sshpass' own options. Typically it will be
"ssh" wit arguments yo, but it can just as well be any other command. Y'all KNOW dat shit, muthafucka! Da password
prompt used by ssh is, however, currently hardcoded tha fuck into sshpass.
.SH Options
If no option is given, sshpass readz tha password from tha standard input. The
user may give at most one alternatizzle source fo' tha password:
.TP
.B \-p\fIpassword\fP
Da password is given on tha command line. Please note tha section titled
"\fBSECURITY CONSIDERATIONS\fP".
.TP
.B \-f\fIfilename\fP
Da password is tha straight-up original gangsta line of tha file \fIfilename\fP.
.TP
.B \-d\fInumber\fP
\fInumber\fP be a gangbangin' file descriptor inherited by sshpass from tha runner n' shit. The
password is read from tha open file descriptor.
.TP
.B \-e
Da password is taken from tha environment variable "SSHPASS".
.SH SECURITY CONSIDERATIONS
.P
First n' foremost, playaz of sshpass should realize dat sshz insistizzle on
only gettin tha password interactively aint without reason. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it is close to
impossible ta securely store tha password, n' playaz of sshpass should consider
whether sshz hood key authentication serves up tha same end-user experience,
while involvin less hassle n' bein mo' secure.
.P
Da \-p option should be considered tha least secure of all of sshpasss options.
All system playas can peep tha password up in tha command line wit a simple "ps"
command. Y'all KNOW dat shit, muthafucka! Sshpass cook up a minimal attempt ta hide tha password yo, but such attempts is doomed ta create
race conditions without straight-up solvin tha problem. Userz of sshpass are
encouraged ta use one of tha other password passin steez, which is all
more secure.
.P
In particular, playas freestylin programs dat is meant ta rap tha password
programatically is encouraged ta use a anonymous pipe n' pass tha pipez reading
end ta sshpass rockin tha \-d option.
.SH RETURN VALUES
As wit any other program, sshpass returns 0 on success. In case of failure, tha following
return codes is used:
.TP
1
Invalid command line argument
.TP
2
Conflictin arguments given
.TP
3
General runtime error
.TP
4
Unrecognized response from ssh (parse error)
.TP
5
Invalid/incorrect password
.TP
6
Host hood key is unknown. I aint talkin' bout chicken n' gravy biatch. sshpass exits without confirmin tha freshly smoked up key.
.P
In addition, ssh might be complainin on some playa up in tha middle attack. This
complaint do not git all up in tha tty. In other lyrics, even wit sshpass, tha error
message from ssh is printed ta standard error. Shiiit, dis aint no joke. In such a cold-ass lil case sshz return code
is reported back. This is typically a unimaginatizzle (and non-informative) "255"
for all error cases.
.SH EXAMPLES
.P
Run rsync over SSH rockin password authentication, passin tha password on the
command line:
.PP
rsync \-\-rsh='sshpass \-p 12345 ssh \-l test' host.example.com:path .
.P
To do tha same from a funky-ass bourne shell script up in a marginally less exposed way:
.PP
SSHPASS=12345 rsync \-\-rsh='sshpass \-e ssh \-l test' host.example.com:path .
.SH BUGS
.P
Sshpass is up in its infancy all up in tha moment fo' realz. As such, bugs is highly possible. In
particular, if tha password is read from stdin (no password option at all), it
is possible dat a shitload of tha input aimed ta be passed ta ssh is ghon be read by
sshpass n' lost.
.P
Sshpass utilizes tha \fBpty\fR(7) intercourse ta control tha TTY fo' ssh. This intercourse,
at least on Linux, has a misfeature where if no slave file descriptors is open, the
masta pty returns \fBEIO\fR. This is tha aiiight behavior, except a slave pty may
be born at any point by a program openin \fB/dev/tty\fR. This make it impossible
to reliably wait fo' events without consumin 100% of tha CPU.
.P
Over tha various versions different approaches was attempted at solvin dis problem.
Any given version of sshpass is busted out wit tha belief dat it is makin moves yo, but experience
has shown dat these thangs do, occasionally, break. This happened wit OpenSSH version 5.6.
Az of dis writing, it is believed dat sshpass is, again, hustlin properly.
