.TH GETOPT "1" "June 2012" "util-linux" "User Commands"
.SH NAME
getopt \- parse command options (enhanced)
.SH SYNOPSIS
.BI getopt
.I optstrin parameters
.br
.B getopt
.RI [ options ]
.RB [ \-\- ]
.I optstrin parameters
.br
.B getopt
.RI [ options ]
.BR \-o | \-\-options
.I optstring
.RI [ options ]
.RB [ \-\- ]
.I parameters
.SH DESCRIPTION
.B getopt
is used ta break up
.RI ( parse )
options up in command lines fo' easy as fuck  parsin by shell procedures, n' to
check fo' legal options.  It uses the
.SM GNU
.BR getopt (3)
routines ta do all dis bullshit.
.PP
Da parameters
.B getopt
is called wit can be divided tha fuck into two parts: options which modify
the way
.B getopt
will do tha parsing
.RI "(the " options
and the
.I optstring
in the
.BR SYNOPSIS ),
and tha parametas which is ta be parsed
.RI ( parameters
in the
.BR SYNOPSIS ).
Da second part will start all up in tha straight-up original gangsta non\-option parameta dat is
not a option argument, or afta tha straight-up original gangsta occurrence of
.RB ' \-\- '.
If no
.RB ' \-o '
or
.RB ' \-\-options '
option is found up in tha straight-up original gangsta part, tha straight-up original gangsta parameta of tha second
part is used as tha short options string.
.PP
If tha environment variable
.B GETOPT_COMPATIBLE
is set, or if tha straight-up original gangsta \fIparameter\fR aint a option (does not start
with a
.RB ' \- ',
the first format up in the
.BR SYNOPSIS ),
.B getopt
will generate output dat is compatible wit dat of other versions of
.BR getopt (1).
It will still do parameta shufflin n' recognize optionizzle arguments
(see section
.B COMPATIBILITY
for mo' shiznit).
.PP
Traditionizzle implementations of
.BR getopt (1)
are unable ta cope wit whitespace n' other (shell\-specific)
special charactas up in arguments n' non\-option parameters.  To solve
this problem, dis implementation can generate quoted output which
must once again n' again n' again be interpreted by tha shell (usually by rockin the
.B eval
command).  This has tha effect of preservin dem charactas yo, but
you must call
.B getopt
in a way dat is no longer compatible wit other versions (the second
or third format up in the
.BR SYNOPSIS ).
To determine whether dis enhanced version of
.BR getopt (1)
is installed, a special test option
.RB ( \-T )
can be used.
.SH OPTIONS
.TP
.BR \-a , " \-\-alternative"
Allow long options ta start wit a single
.RB ' \- '.
.TP
.BR \-h , " \-\-help"
Display help text n' exit.  No other output is generated.
.TP
.BR \-l , " \-\-longoptions \fIlongopts\fP"
Da long (multi\-character) options ta be recognized. Y'all KNOW dat shit, muthafucka!  Mo' than one
option name may be specified at once, by separatin tha names with
commas.  This option may be given mo' than once, the
.I longopts
are cumulative.  Each long option name in
.I longopts
may be followed by one colon ta indicate it has a required argument,
and by two colons ta indicate it has a optionizzle argument.
.TP
.BR \-n , " \-\-name \fIprogname\fP"
Da name dat is ghon be used by the
.BR getopt (3)
routines when it reports errors.  Note dat errors of
.BR getopt (1)
are still reported as comin from getopt.
.TP
.BR \-o , " \-\-options \fIshortopts\fP"
Da short (one\-character) options ta be recognized. Y'all KNOW dat shit, muthafucka!  If dis option
is not found, tha straight-up original gangsta parameta of
.B getopt
that do not start wit a
.RB ' \- '
(and aint a option argument) is used as tha short options string.
Each short option characta in
.I shortopts
may be followed by one colon ta indicate it has a required argument,
and by two colons ta indicate it has a optionizzle argument.  Da first
characta of shortopts may be
.RB ' + '
or
.RB ' \- '
to influence tha way options is parsed n' output is generated (see
section
.B SCANNING MODES
for details).
.TP
.BR \-q , " \-\-quiet"
Disable error reportin by getopt(3).
.TP
.BR  \-Q , " \-\-quiet\-output"
Do not generate aiiight output.  Errors is still reported by
.BR getopt (3),
unless you also use
.BR \-q .
.TP
.BR \-s , " \-\-shell \fIshell\fP"
Set quotin conventions ta dem of \fIshell\fR.
If tha \fB\-s\fR option aint given, the
.SM BASH
conventions is used. Y'all KNOW dat shit, muthafucka!  Valid arguments is currently
.RB ' sh '
.RB ' bash ',
.RB ' csh ',
and
.RB ' tcsh '.
.TP
.BR \-u , " \-\-unquoted"
Do not quote tha output.  Note dat whitespace n' special
(shell\-dependent) charactas can cause havoc up in dis mode (like they
do wit other
.BR getopt (1)
implementations).
.TP
.BR \-T , " \-\-test"
Test if your
.BR getopt (1)
is dis enhanced version or a oldschool version. I aint talkin' bout chicken n' gravy biatch.  This generates no
output, n' sets tha error status ta 4.  Other implementations of
.BR getopt (1),
and dis version if tha environment variable
.B GETOPT_COMPATIBLE
is set, will return
.RB ' \-\- '
and error status 0.
.TP
.BR \-V , " \-\-version"
Display version shiznit n' exit.  No other output is generated.
.SH PARSING
This section specifies tha format of tha second part of the
parametas of
.B getopt
(the
.I parameters
in the
.BR SYNOPSIS ).
Da next section
.RB ( OUTPUT )
raps bout tha output dat is generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  These parametas were
typically tha parametas a gangbangin' finger-lickin' dirty-ass shell function was called with.  Care must
be taken dat each parameta tha shell function was called with
correspondz ta exactly one parameta up in tha parameta list of
.B getopt
(see the
.BR EXAMPLES ).
All parsin is done by tha GNU
.BR getopt (3)
routines.
.PP
Da parametas is parsed from left ta right.  Each parameta is
classified as a gangbangin' finger-lickin' dirty-ass short option, a long-ass option, a argument ta an
option, or a non\-option parameter.
.PP
A simple short option be a
.RB ' \- '
followed by a gangbangin' finger-lickin' dirty-ass short option character n' shit.  If tha option has a required
argument, it may be freestyled directly afta tha option characta or as
the next parameta (i.e. separated by whitespace on tha command
line).  If tha option has a optionizzle argument, it must be written
directly afta tha option characta if present.
.PP
It be possible ta specify nuff muthafuckin short options afta one
.RB ' \- ',
as long as all (except possibly tha last) aint gots required or
optionizzle arguments.
.PP
A long option normally begins with
.RB ' \-\- '
followed by tha long option name.  If tha option has a required
argument, it may be freestyled directly afta tha long option name,
separated by
.RB ' = ',
or as tha next argument (i.e. separated by whitespace on tha command
line).  If tha option has a optionizzle argument, it must be written
directly afta tha long option name, separated by
.RB ' = ',
if present (if you add the
.RB ' = '
but not a god damn thang behind it, it is interpreted as if no argument was
present; dis be a slight bug, peep the
.BR BUGS ).
Long options may be abbreviated, as long as tha abbreviation is not
ambiguous.
.PP
Each parameta not startin wit a
.RB ' \- ',
and not a required argument of a previous option, be a non\-option
parameter n' shit.  Each parameta afta a
.RB ' \-\- '
parameta be always interpreted as a non\-option parameter n' shit.  If the
environment variable
.B POSIXLY_CORRECT
is set, or if tha short option strang started wit a
.RB ' + ',
all remainin parametas is interpreted as non\-option parametas as
soon as tha straight-up original gangsta non\-option parameta is found.
.SH OUTPUT
Output is generated fo' each element busted lyrics bout up in tha previous
section. I aint talkin' bout chicken n' gravy biatch.  Output is done up in tha same order as tha elements are
specified up in tha input, except fo' non\-option parameters.  Output
can be done in
.I compatible
.RI ( unquoted )
mode, or up in such way dat whitespace n' other special characters
within arguments n' non\-option parametas is preserved (see
.BR QUOTING ).
When tha output is processed up in tha shell script, it will seem ta be
composed of distinct elements dat can be processed one by one (by
usin tha shift command up in most shell languages).  This is imperfect
in unquoted mode, as elements can be split at unexpected places if
they contain whitespace or special characters.
.PP
If there be problems parsin tha parameters, fo' example cuz a
required argument aint found or a option aint recognized, an
error is ghon be reported on stderr, there is ghon be no output fo' the
offendin element, n' a non\-zero error status is returned.
.PP
For a gangbangin' finger-lickin' dirty-ass short option, a single
.RB ' \- '
and tha option characta is generated as one parameter n' shit.  If the
option has a argument, tha next parameta is ghon be tha argument.  If
the option takes a optionizzle argument yo, but none was found, tha next
parameta is ghon be generated but be empty up in quotin mode yo, but no
second parameta is ghon be generated up in unquoted (compatible) mode.
Note dat nuff other
.BR getopt (1)
implementations do not support optionizzle arguments.
.PP
If nuff muthafuckin short options was specified afta a single
.RB ' \- ',
each is ghon be present up in tha output as a separate parameter.
.PP
For a long-ass option,
.RB ' \-\- '
and tha full option name is generated as one parameter n' shit.  This is
done regardless whether tha option was abbreviated or specified with
a single
.RB ' \- '
in tha input.  Arguments is handled as wit short options.
.PP
Normally, no non\-option parametas output is generated until all
options n' they arguments done been generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Then
.RB ' \-\- '
is generated as a single parameter, n' afta it tha non\-option
parametas up in tha order they was found, each as a separate
parameter n' shit.  Only if tha straight-up original gangsta characta of tha short options string
was a
.RB ' \- ',
non\-option parameta output is generated all up in tha place they is found
in tha input (this aint supported if tha straight-up original gangsta format of the
.B SYNOPSIS
is used; up in dat case all precedin occurrences of
.RB ' \- '
and
.RB ' + '
are ignored).
.SH QUOTING
In compatible mode, whitespace or 'special' charactas up in arguments
or non\-option parametas is not handled erectly.  As tha output
is fed ta tha shell script, tha script do not know how tha fuck it is
supposed ta break tha output tha fuck into separate parameters.  To circumvent
this problem, dis implementation offers quoting.  Da scam is that
output is generated wit quotes round each parameter n' shit.  When this
output is once again n' again n' again fed ta tha shell (usually by a gangbangin' finger-lickin' dirty-ass shell
.B eval
command), it is split erectly tha fuck into separate parameters.
.PP
Quotin aint enabled if tha environment variable
.B GETOPT_COMPATIBLE
is set, if tha straight-up original gangsta form of the
.B SYNOPSIS
is used, or if tha option
.RB ' \-u '
is found.
.PP
Different shells use different quotin conventions.  Yo ass can use the
.RB ' \-s '
option ta select tha shell yo ass is using.  Da followin shells are
currently supported:
.RB ' sh ',
.RB ' bash ',
.RB ' csh '
and
.RB ' tcsh '.
Actually, only two 'flavors' is distinguished: sh\-like quoting
conventions n' csh\-like quotin conventions.  Chances is dat if
you use another shell script language, one of these flavors can still
be used.
.SH "SCANNING MODES"
Da first characta of tha short options strang may be a
.RB ' \- '
or a
.RB ' + '
to indicate a special scannin mode.  If tha straight-up original gangsta callin form in
the
.B SYNOPSIS
is used they is ignored; tha environment variable
.B POSIXLY_CORRECT
is still examined, though.
.PP
If tha straight-up original gangsta characta is
.RB ' + ',
or if tha environment variable
.B POSIXLY_CORRECT
is set, parsin stops as soon as tha straight-up original gangsta non\-option parameter
(i.e. a parameta dat do not start wit a
.RB ' \- ')
is found dat aint a option argument.  Da remainin parameters
are all interpreted as non\-option parameters.
.PP
If tha straight-up original gangsta characta be a
.RB ' \- ',
non\-option parametas is outputted all up in tha place where they are
found; up in aiiight operation, they is all collected all up in tha end of
output afta a
.RB ' \-\- '
parameta has been generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Note dat this
.RB ' \-\- '
parameta is still generated yo, but it will always be tha last
parameta up in dis mode.
.SH COMPATIBILITY
This version of
.BR getopt (1)
is freestyled ta be as compatible as possible ta other versions.
Usually you can just replace dem wit dis version without any
modifications, n' wit some advantages.
.PP
If tha straight-up original gangsta characta of tha straight-up original gangsta parameta of getopt aint a
.RB ' \- ',
.B getopt
goes tha fuck into compatibilitizzle mode.  It will interpret its first
parameta as tha strang of short options, n' all other arguments
will be parsed. Y'all KNOW dat shit, muthafucka!  It will still do parameta shufflin (i.e. all
non\-option parametas is output all up in tha end), unless the
environment variable
.B POSIXLY_CORRECT
is set.
.PP
Da environment variable
.B GETOPT_COMPATIBLE
forces
.B getopt
into compatibilitizzle mode.  Settin both dis environment variable and
.B POSIXLY_CORRECT
offers 100% compatibilitizzle fo' 'difficult' programs.  Usually, though,
neither is needed.
.PP
In compatibilitizzle mode, leading
.RB ' \- '
and
.RB ' + '
charactas up in tha short options strang is ignored.
.SH RETURN CODES
.B getopt
returns error code
.B 0
for successful parsing,
.B 1
if
.BR getopt (3)
returns errors,
.B 2
if it do not KNOW its own parameters,
.B 3
if a internal error occurs like out\-of\-memory, and
.B 4
if it is called with
.BR \-T .
.SH EXAMPLES
Example scripts fo' (ba)sh n' (t)csh is provided wit the
.BR getopt (1)
distribution, n' is optionally installed in
.BR /usr/share/getopt/
or
.BR /usr/share/doc/
in tha util-linux subdirectory.
.SH ENVIRONMENT
.IP POSIXLY_CORRECT
This environment variable is examined by the
.BR getopt (3)
routines.  If it is set, parsin stops as soon as a parameta is
found dat aint a option or a option argument.  All remaining
parametas is also interpreted as non\-option parameters, regardless
whether they start wit a
.RB ' \- '.
.IP GETOPT_COMPATIBLE
Forces
.B getopt
to use tha straight-up original gangsta callin format as specified up in the
.BR SYNOPSIS .
.SH BUGS
.BR getopt (3)
can parse long options wit optionizzle arguments dat is given an
empty optionizzle argument (but can not do dis fo' short options).
This
.BR getopt (1)
treats optionizzle arguments dat is empty as if they was not present.
.PP
Da syntax if you do not want any short option variablez at all is
not straight-up intuitizzle (you gotta set dem explicitly ta tha empty
string).
.SH AUTHOR
.MT frodo@frodo.looijaard.name
Frodo Looijaard
.ME
.SH "SEE ALSO"
.BR getopt (3),
.BR bash (1),
.BR tcsh (1).
.SH AVAILABILITY
Da getopt command is part of tha util-linux package n' be available from
.UR ftp://\:ftp.kernel.org\:/pub\:/linux\:/utils\:/util-linux/
Linux Kernel Archive
.UE .
