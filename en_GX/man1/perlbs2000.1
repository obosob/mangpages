.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLBS2000 1"
.TH PERLBS2000 1 "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlbs2000 \- buildin n' installin Perl fo' BS2000.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document will help you Configure, build, test n' install Perl
on \s-1BS2000\s0 up in tha \s-1POSIX\s0 subsystem.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This be a ported perl fo' tha \s-1POSIX\s0 subsystem up in \s-1BS2000 VERSION OSD
V3.1A\s0 or later n' shit.  It may work on other versions yo, but we started porting
and testin it wit 3.1A n' is currently rockin Version V4.0A.
.PP
Yo ass may need tha followin \s-1GNU\s0 programs up in order ta install perl:
.SS "gzip on \s-1BS2000\s0"
.IX Subsection "gzip on BS2000"
We used version 1.2.4, which could be installed outta tha box with
one failure durin 'make check'.
.SS "bison on \s-1BS2000\s0"
.IX Subsection "bison on BS2000"
Da yacc comin wit \s-1BS2000 POSIX\s0 didn't work fo' us.  So our crazy asses had to
use bison. I aint talkin' bout chicken n' gravy biatch.  Our thugged-out asses had ta make all dem chizzlez ta perl up in order ta use the
pure (reentrant) parser of bison. I aint talkin' bout chicken n' gravy biatch.  We used version 1.25 yo, but our crazy asses had to
add all dem chizzlez cuz of \s-1EBCDIC. \s0 See below fo' mo' details
concernin yacc.
.SS "Unpackin Perl Distribution on \s-1BS2000\s0"
.IX Subsection "Unpackin Perl Distribution on BS2000"
To extract a \s-1ASCII\s0 tar archive on \s-1BS2000 POSIX\s0 you need a \s-1ASCII\s0
filesystem (we used tha mountpoint /usr/local/ascii fo' this).  Now
you extract tha archive up in tha \s-1ASCII\s0 filesystem without
I/O\-conversion:
.PP
cd /usr/local/ascii
export IO_CONVERSION=NO
gunzip < /usr/local/src/perl.tar.gz | pax \-r
.PP
Yo ass may ignore tha error message fo' tha straight-up original gangsta element of tha archive
(this don't be lookin like a tar archive / skippin ta next file...),
itz only tha directory which is ghon be pimped automatically anyway.
.PP
Afta extractin tha archive you copy tha whole directory tree ta your
\&\s-1EBCDIC\s0 filesystem.  \fBThis time you use I/O\-conversion\fR:
.PP
cd /usr/local/src
IO_CONVERSION=YES
cp \-r /usr/local/ascii/perl5.005_02 ./
.SS "Compilin Perl on \s-1BS2000\s0"
.IX Subsection "Compilin Perl on BS2000"
There be a \*(L"hints\*(R" file fo' \s-1BS2000\s0 called hints.posix\-bc (because
posix-bc is tha \s-1OS\s0 name given by `uname`) dat specifies tha erect
values fo' most thangs.  Da major problem is (of course) tha \s-1EBCDIC\s0
characta set.  Our thugged-out asses have german \s-1EBCDIC\s0 version.
.PP
Because of our problems wit tha natizzle yacc we used \s-1GNU\s0 bison to
generate a pure (=reentrant) parser fo' perly.y.  So our yacc is
really tha followin script:
.PP
\&\-\-\-\-\-8<\-\-\-\-\-/usr/local/bin/yacc\-\-\-\-\-8<\-\-\-\-\-
#! /usr/bin/sh
.PP
# Bison as a reentrant yacc:
.PP
# save parameters:
params="\*(L"
while [[ $# \-gt 1 ]]; do
    params=\*(R"$params \f(CW$1\fR"
    shift
done
.PP
# add flag \f(CW%pure_parser:\fR
.PP
tmpfile=/tmp/bison.$$.y
echo \f(CW%pure_parser\fR > \f(CW$tmpfile\fR
cat \f(CW$1\fR >> \f(CW$tmpfile\fR
.PP
# call bison:
.PP
echo \*(L"/usr/local/bin/bison \-\-yacc \f(CW$params\fR \f(CW$1\fR\et\et\et(Pure Parser)\*(R"
/usr/local/bin/bison \-\-yacc \f(CW$params\fR \f(CW$tmpfile\fR
.PP
# cleanup:
.PP
rm \-f \f(CW$tmpfile\fR
\&\-\-\-\-\-8<\-\-\-\-\-\-\-\-\-\-8<\-\-\-\-\-
.PP
We still use tha aiiight yacc fo' a2p.y though!!!  We done cooked up a softlink
called byacc ta distinguish between tha two versions:
.PP
ln \-s /usr/bin/yacc /usr/local/bin/byacc
.PP
We build perl rockin \s-1GNU\s0 make.  We tried tha natizzle make once n' it
worked like a muthafucka.
.SS "Testin Perl on \s-1BS2000\s0"
.IX Subsection "Testin Perl on BS2000"
We still gots all dem errors durin \f(CW\*(C`make test\*(C'\fR.  Some of dem is the
result of rockin bison. I aint talkin' bout chicken n' gravy biatch.  Bison prints \fIparser error\fR instead of \fIsyntax
error\fR, so we may ignore em.  Da followin list shows
our errors, yo' thangs up in dis biatch may differ:
.PP
op/numconvert.......FAILED tests 1409\-1440
op/regexp...........FAILED tests 483, 496
op/regexp_noamp.....FAILED tests 483, 496
pragma/overload.....FAILED tests 152\-153, 170\-171
pragma/warnings.....FAILED tests 14, 82, 129, 155, 192, 205, 207
lib/bigfloat........FAILED tests 351\-352, 355
lib/bigfltpm........FAILED tests 354\-355, 358
lib/complex.........FAILED tests 267, 487
lib/dumper..........FAILED tests 43, 45
Failed 11/231 test scripts, 95.24% aiiight. 57/10595 subtests failed, 99.46% aiiight.
.SS "Installin Perl on \s-1BS2000\s0"
.IX Subsection "Installin Perl on BS2000"
Our thugged-out asses have no nroff on \s-1BS2000 POSIX \s0(yet), so we ignored any errors while
installin tha documentation.
.SS "Usin Perl up in tha Posix-Shell of \s-1BS2000\s0"
.IX Subsection "Usin Perl up in tha Posix-Shell of BS2000"
\&\s-1BS2000 POSIX\s0 don't support tha shebang notation
(\f(CW\*(C`#!/usr/local/bin/perl\*(C'\fR), so you gotta use tha followin lines
instead:
.PP
: # use perl
    eval 'exec /usr/local/bin/perl \-S \f(CW$0\fR ${1+\*(L"$@\*(R"}'
        if \f(CW$running_under_some_shell\fR;
.ie n .SS "Usin Perl up in ""native"" \s-1BS2000\s0"
.el .SS "Usin Perl up in ``native'' \s-1BS2000\s0"
.IX Subsection "Usin Perl up in natizzle BS2000"
Us dudes aint gots much experience wit dis yet yo, but try tha following:
.PP
Copy yo' Perl executable ta a \s-1BS2000 LLM\s0 rockin bs2cp:
.PP
\&\f(CW\*(C`bs2cp /usr/local/bin/perl \*(Aqbs2:perl(perl,l)\*(Aq\*(C'\fR
.PP
Now you can start it wit tha followin (\s-1SDF\s0) command:
.PP
\&\f(CW\*(C`/START\-PROG FROM\-FILE=*MODULE(PERL,PERL),PROG\-MODE=*ANY,RUN\-MODE=*ADV\*(C'\fR
.PP
First you git tha \s-1BS2000\s0 commandline prompt ('*').  Here you may enter
your parameters, e.g. \f(CW\*(C`\-e \*(Aqprint "Wuz crackalackin' World!\e\en";\*(Aq\*(C'\fR (note the
double backslash!) or \f(CW\*(C`\-w\*(C'\fR n' tha name of yo' Perl script.
Filenames startin wit \f(CW\*(C`/\*(C'\fR is searched up in tha Posix filesystem,
others is searched up in tha \s-1BS2000\s0 filesystem.  Yo ass may even use
wildcardz if you put a \f(CW\*(C`%\*(C'\fR up in front of yo' filename (e.g. \f(CW\*(C`\-w
checkfiles.pl %*.c\*(C'\fR).  Read yo' C/\*(C+ manual fo' additional
possibilitizzlez of tha commandline prompt (look for
PARAMETER-PROMPTING).
.SS "Floatin point anomalies on \s-1BS2000\s0"
.IX Subsection "Floatin point anomalies on BS2000"
There appears ta be a funky-ass bug up in tha floatin point implementation on \s-1BS2000 POSIX\s0
systems such dat callin \fIint()\fR on tha thang of a number n' a small
magnitude number aint tha same as callin \fIint()\fR on tha quotient of
that number n' a big-ass magnitude number n' shit.  For example, up in tha following
Perl code:
.PP
.Vb 4
\&    mah $x = 100000.0;
\&    mah $y = int($x * 1e\-5) * 1e5; # \*(Aq0\*(Aq
\&    mah $z = int($x / 1e+5) * 1e5;  # \*(Aq100000\*(Aq
\&    print "\e$y is $y n' \e$z is $z\en"; # $y is 0 n' $z is 100000
.Ve
.PP
Although one would expect tha quantitizzles \f(CW$y\fR n' \f(CW$z\fR ta be tha same n' equal
to 100000 they will differ n' instead is ghon be 0 n' 100000 respectively.
.SS "Usin PerlIO n' different encodings on \s-1ASCII\s0 n' \s-1EBCDIC\s0 partitions"
.IX Subsection "Usin PerlIO n' different encodings on ASCII n' EBCDIC partitions"
Since version 5.8 Perl uses tha freshly smoked up PerlIO on \s-1BS2000. \s0 This enables
you rockin different encodings per \s-1IO\s0 channel.  For example you may use
.PP
.Vb 9
\&    use Encode;
\&    open($f, ">:encoding(ascii)", "test.ascii");
\&    print $f "Wuz crackalackin' World!\en";
\&    open($f, ">:encoding(posix\-bc)", "test.ebcdic");
\&    print $f "Wuz crackalackin' World!\en";
\&    open($f, ">:encoding(latin1)", "test.latin1");
\&    print $f "Wuz crackalackin' World!\en";
\&    open($f, ">:encoding(utf8)", "test.utf8");
\&    print $f "Wuz crackalackin' World!\en";
.Ve
.PP
to git two filez containin \*(L"Wuz crackalackin' World!\en\*(R" up in \s-1ASCII, EBCDIC, ISO\s0
Latin\-1 (in dis example identical ta \s-1ASCII\s0) respectizzle UTF-EBCDIC (in
this example identical ta aiiight \s-1EBCDIC\s0).  See tha documentation of
Encode::PerlIO fo' details.
.PP
As tha PerlIO layer uses raw \s-1IO\s0 internally, all dis straight-up ignores
the type of yo' filesystem (\s-1ASCII\s0 or \s-1EBCDIC\s0) n' tha \s-1IO_CONVERSION\s0
environment variable.  If you wanna git tha oldschool behavior, dat the
\&\s-1BS2000 IO\s0 functions determine conversion dependin on tha filesystem
PerlIO still is yo' playa yo, but it ain't no stoppin cause I be still poppin'.  Yo ass use \s-1IO_CONVERSION\s0 as usual n' tell
Perl, dat it should use tha natizzle \s-1IO\s0 layer:
.PP
.Vb 2
\&    export IO_CONVERSION=YES
\&    export PERLIO=stdio
.Ve
.PP
Now yo' \s-1IO\s0 would be \s-1ASCII\s0 on \s-1ASCII\s0 partitions n' \s-1EBCDIC\s0 on \s-1EBCDIC\s0
partitions.  See tha documentation of PerlIO (without \f(CW\*(C`Encode::\*(C'\fR!)
for further possibilities.
.SH "AUTHORS"
.IX Header "AUTHORS"
Thomas Dorner
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1INSTALL\s0, perlport.
.SS "Mailin list"
.IX Subsection "Mailin list"
If yo ass is horny bout tha z/OS (formerly known as \s-1OS/390\s0)
and POSIX-BC (\s-1BS2000\s0) portz of Perl then peep tha perl-mvs mailin list.
To subscribe, bust a empty message ta perl\-mvs\-subscribe@perl.org.
.PP
See also:
.PP
.Vb 1
\&    http://lists.perl.org/list/perl\-mvs.html
.Ve
.PP
There is wizzy archivez of tha mailin list at:
.PP
.Vb 2
\&    http://www.xray.mpe.mpg.de/mailing\-lists/perl\-mvs/
\&    http://archive.develooper.com/perl\-mvs@perl.org/
.Ve
.SH "HISTORY"
.IX Header "HISTORY"
This document was originally freestyled by Thomas Dorner fo' tha 5.005
release of Perl.
.PP
This document was podified fo' tha 5.6 release of perl 11 July 2000.
