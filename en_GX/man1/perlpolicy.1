.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLPOLICY 1"
.TH PERLPOLICY 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlpolicy \- Various n' sundry policies n' commitments related ta tha Perl core
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document is tha masta document which recordz all written
policies bout how tha fuck tha Perl 5 Portas collectively pimp n' maintain
the Perl core.
.SH "GOVERNANCE"
.IX Header "GOVERNANCE"
.SS "Perl 5 Porters"
.IX Subsection "Perl 5 Porters"
Subscribers ta perl5\-portas (the portas theyselves) come up in nuff muthafuckin flavours.
Some is on tha down-low curious lurkers, whoz ass rarely pitch up in n' instead watch
the ongoin pimpment ta ensure they forewarned of freshly smoked up chizzlez or
features up in Perl.  Some is representativez of vendors, whoz ass is there
to make shizzle dat Perl continues ta compile n' work on their
platforms.  Some patch any reported bug dat they know how tha fuck ta fix,
some is actively patchin they pet area (threads, Win32, tha regexp
\&\-engine), while others seem ta do not a god damn thang but complain. I aint talkin' bout chicken n' gravy biatch.  In other
words, itz yo' usual mix of technical people.
.PP
Over dis crew of portas presides Larry Wall.  Dude has tha final word
in what tha fuck do n' do not chizzle up in any of tha Perl programmin languages.
These days, Larry spendz most of his cold-ass time on Perl 6, while Perl 5 is
shepherded by a \*(L"pumpking\*(R", a porta responsible fo' decidin what
goes tha fuck into each release n' ensurin dat releases happen on a regular
basis.
.PP
Larry sees Perl pimpment along tha linez of tha \s-1US\s0 posse:
therez tha Legislature (the porters), tha Executizzle branch (the
\&\-pumpking), n' tha Supreme Court (Larry).  Da legislature can
say shit bout n' submit patches ta tha executizzle branch all they like yo, but
the executizzle branch is free ta veto em.  Rarely, tha Supreme Court
will side wit tha executizzle branch over tha legislature, or the
legislature over tha executizzle branch.  Mostly, however, the
legislature n' tha executizzle branch is supposed ta git along and
work up they differences without impeachment or court cases.
.PP
Yo ass might sometimes peep reference ta Rule 1 n' Rule 2.  Larryz power
as Supreme Court is expressed up in Da Rules:
.IP "1." 4
Larry be always by definizzle right bout how tha fuck Perl should behave.
This means dat schmoooove muthafucka has final veto juice on tha core functionality.
.IP "2." 4
Larry be allowed ta chizzle his crazy-ass mind bout any matta at a lata date,
regardless of whether he previously invoked Rule 1.
.PP
Got that?  Larry be always right, even when da thug was wrong.  It aint nuthin but rare
to peep either Rule exercised yo, but they is often alluded to.
.SH "MAINTENANCE AND SUPPORT"
.IX Header "MAINTENANCE AND SUPPORT"
Perl 5 is pimped by a cold-ass lil hood, not a cold-ass lil corporate entity. Every chizzle
contributed ta tha Perl core is tha result of a thugged-out donation. I aint talkin' bout chicken n' gravy biatch. Typically, these
donations is contributionz of code or time by individual thugz of our
community. On occasion, these donations come up in tha form of corporate
or organizationizzle sponsorshizzle of a particular individual or project.
.PP
As a volunteer organization, tha commitments we make is heavily dependent
on tha goodwill n' mad bullshit of dudes whoz ass have no obligation to
contribute ta Perl.
.PP
That bein holla'd, we value Perlz stabilitizzle n' securitizzle n' have long
had a unwritten covenant wit tha broader Perl hood ta support
and maintain releasez of Perl.
.PP
This document codifies tha support n' maintenizzle commitments that
the Perl hood should expect from Perlz pimpers:
.IP "\(bu" 4
We \*(L"officially\*(R" support tha two most recent stable release series. Put ya muthafuckin choppers up if ya feel dis!  5.14.x
and earlier is now outta support.  Az of tha release of 5.20.0, we will
\&\*(L"officially\*(R" end support fo' Perl 5.16.x, other than providin security
updates as busted lyrics bout below.
.IP "\(bu" 4
To tha dopest of our ability, we will attempt ta fix critical issues
in tha two most recent stable 5.x release series. Put ya muthafuckin choppers up if ya feel dis!  Fixes fo' the
current release series take precedence over fixes fo' tha previous
release series.
.IP "\(bu" 4
To tha dopest of our ability, we will provide \*(L"critical\*(R" securitizzle patches
/ releases fo' any major version of Perl whose 5.x.0 release was within
the past three years.  We can only commit ta providin these fo' the
most recent .y release up in any 5.x.y series.
.IP "\(bu" 4
Us thugs aint gonna provide securitizzle thugged-out shiznit or bug fixes fo' pimpment
releasez of Perl.
.IP "\(bu" 4
We encourage vendors ta shizzle da most thugged-out recent supported release of
Perl all up in tha time of they code freeze.
.IP "\(bu" 4
As a vendor, you may gotz a requirement ta backport securitizzle fixes
beyond our 3 year support commitment.  We can provide limited support and
advice ta you as you do so and, where possible will try ta apply
those patches ta tha relevant \-maint branches up in git, though we may or
may not chizzle ta make numbered releases or \*(L"official\*(R" patches
available.  Contact our asses at <perl5\-security\-report@perl.org>
to begin dat process.
.SH "BACKWARD COMPATIBILITY AND DEPRECATION"
.IX Header "BACKWARD COMPATIBILITY AND DEPRECATION"
Our hood has a long-held belief dat backward-compatibilitizzle be a
virtue, even when tha functionalitizzle up in question be a thugged-out design flaw.
.PP
Us thugs would all ludd ta unmake some mistakes we've made over tha past
decades.  Livin wit every last muthafuckin design error we've eva made can lead
to fucked up stagnation. I aint talkin' bout chicken n' gravy biatch.  Unwindin our mistakes is hella, hella
difficult.  Bustin so without actively harmin our playas is
nearly impossible.
.PP
Lately, ignorin or actively opposin compatibilitizzle wit earlier versions
of Perl has come tha fuck into vogue.  Sometimes, a cold-ass lil chizzle is proposed which
wants ta usurp syntax which previously had another meaning.  Sometimes,
a chizzle wants ta improve previously-crazy semantics.
.PP
Down dis road lies madness.
.PP
Requirin end-user programmers ta chizzle just all dem language constructs,
even language constructs which no well-educated pimper would ever
intentionally use is tantamount ta sayin \*(L"you should not upgrade to
a freshly smoked up release of Perl unless you have 100% test coverage n' can do a
full manual audit of yo' codebase.\*(R"  If we was ta have tools capable of
reliably upgradin Perl source code from one version of Perl ta another,
this concern could be hella mitigated.
.PP
Us thugs wanna ensure dat Perl continues ta grow n' flourish up in tha coming
years n' decades yo, but not all up in tha expense of our user hood.
.PP
Existin syntax n' semantics should only be marked fo' destruction in
very limited circumstances.  If a given language featurez continued
inclusion up in tha language will cause dope harm ta tha language
or prevent our asses from makin needed chizzlez ta tha runtime, then it may
be considered fo' deprecation.
.PP
Any language chizzle which breaks backward-compatibilitizzle should be able to
be enabled or disabled lexically.  Unless code at a given scope declares
that it wants tha freshly smoked up behavior, dat freshly smoked up behavior should be disabled.
Which backward-incompatible chizzlez is controlled implicitly by a
\&'use v5.x.y' be a thugged-out decision which should be made by tha pumpkin in
consultation wit tha hood.
.PP
When a funky-ass backward-incompatible chizzle can't be toggled lexically, tha decision
to chizzle tha language must be considered hella, straight-up carefully.  If it's
possible ta move tha oldschool syntax or semantics outta tha core language
and tha fuck into XS-land, dat \s-1XS\s0 module should be enabled by default unless
the user declares dat they want a newer revision of Perl.
.PP
Historically, we've held ourselves ta a gangbangin' far higher standard than
backward-compatibilitizzle \*(-- bugward-compatibility.  Any accident of
implementation or unintentionizzle side-effect of hustlin some bit of code
has been considered ta be a gangbangin' feature of tha language ta be defended with
the same zeal as any other feature or functionality.  No matta how
frustratin these unintentionizzle features may be ta our asses as we continue
to improve Perl, these unintentionizzle features often deserve our
protection. I aint talkin' bout chicken n' gravy biatch.  It be straight-up blingin dat existin software freestyled in
Perl continue ta work erectly.  If end-user pimpers have adopted a
bug as a gangbangin' feature, we need ta treat it as such.
.PP
New syntax n' semantics which don't break existin language constructs
and syntax gotz a much lower bar. Shiiit, dis aint no joke.  They merely need ta prove theyselves
to be useful, elegant, well designed, n' well tested.
.SS "Terminology"
.IX Subsection "Terminology"
To make shizzle we rappin' bout tha same thang when our phat asses say shit bout tha removal
of features or functionalitizzle from tha Perl core, our crazy asses have specific definitions
for all dem lyrics n' phrases.
.IP "experimental" 4
.IX Item "experimental"
If suttin' up in tha Perl core is marked as \fBexperimental\fR, we may chizzle
its behaviour, deprecate or remove it without notice. While we'll always
do our dopest ta smooth tha transizzle path fo' playaz of experimental
features, you should contact tha perl5\-portas mailinglist if you find
an experimenstrual feature useful n' wanna help shape its future.
.IP "deprecated" 4
.IX Item "deprecated"
If suttin' up in tha Perl core is marked as \fBdeprecated\fR, we may remove it
from tha core up in tha future, though we might not.  Generally, backward
incompatible chizzlez gonna git deprecation warnings fo' two release
cyclez before bein removed yo, but may be removed afta just one cycle if
the risk seems like low or tha benefits like high.
.Sp
As of
Perl 5.12, deprecated features n' modulez warn tha user as they used.
When a module is deprecated, it will also be made available on \s-1CPAN.\s0
Installin it from \s-1CPAN\s0 will silence deprecation warnings fo' dat module.
.Sp
If you bust a thugged-out deprecated feature or module n' believe dat its removal from
the Perl core would be a mistake, please contact tha perl5\-porters
mailinglist n' plead yo' case.  Us dudes don't deprecate thangs without a good
reason yo, but sometimes there be a a cold-ass lil counterargument we aint considered.
Historically, our phat asses did not distinguish between \*(L"deprecated\*(R" n' \*(L"discouraged\*(R"
features.
.IP "discouraged" 4
.IX Item "discouraged"
From time ta time, we may mark language constructs n' features which we
consider ta done been mistakes as \fBdiscouraged\fR.  Discouraged features
aren't currently muthafuckas fo' removal yo, but
we may lata deprecate dem if they found ta stand up in tha way of a
significant improvement ta tha Perl core.
.IP "removed" 4
.IX Item "removed"
Once a gangbangin' feature, construct or module has been marked as deprecated, we
may remove it from tha Perl core.  Unsurprisingly,
we say we've \fBremoved\fR these thangs.  When a module is removed, it will
no longer shizzle wit Perl yo, but will continue ta be available on \s-1CPAN.\s0
.SH "MAINTENANCE BRANCHES"
.IX Header "MAINTENANCE BRANCHES"
.IP "\(bu" 4
New releasez of maint should contain as few chizzlez as possible.
If there be any question bout whether a given patch might merit
inclusion up in a maint release, then it almost certainly should not
be included.
.IP "\(bu" 4
Portabilitizzle fixes, like fuckin chizzlez ta Configure n' tha filez in
hints/ is acceptable. Portz of Perl ta a freshly smoked up platform, architecture
or \s-1OS\s0 release dat involve chizzlez ta tha implementation is \s-1NOT\s0
acceptable.
.IP "\(bu" 4
Acceptable documentation thugged-out shiznit is dem dat erect factual errors,
explain dope bugs or deficiencies up in tha current implementation,
or fix fucked up markup.
.IP "\(bu" 4
Patches dat add freshly smoked up warnings or errors or deprecate features
are not acceptable.
.IP "\(bu" 4
Patches dat fix crashin bugs dat do not otherwise chizzle Perl's
functionalitizzle or negatively impact performizzle is acceptable.
.IP "\(bu" 4
Patches dat fix CVEs or securitizzle thangs is acceptable yo, but should
be run all up in tha perl5\-security\-report@perl.org mailin list
rather than applied directly.
.IP "\(bu" 4
Patches dat fix regressions up in perlz behavior relatizzle ta previous
releases is acceptable.
.IP "\(bu" 4
Updates ta dual-life modulez should consist of minimal patches to
fix crashin or securitizzle thangs (as above).
.IP "\(bu" 4
Minimal patches dat fix platform-specific test failures or build or
installation thangs is acceptable. When these chizzlez is made
to dual-life modulez fo' which \s-1CPAN\s0 is canonical, any chizzles
should be coordinated wit tha upstream lyricist.
.IP "\(bu" 4
New versionz of dual-life modulez should \s-1NOT\s0 be imported tha fuck into maint.
Those belong up in tha next stable series.
.IP "\(bu" 4
Patches dat add or remove features is not acceptable.
.IP "\(bu" 4
Patches dat break binary compatibilitizzle is not acceptable.  (Please
talk ta a pumpking.)
.SS "Gettin chizzlez tha fuck into a maint branch"
.IX Subsection "Gettin chizzlez tha fuck into a maint branch"
Historically, only tha pumpkin cherry-picked chizzlez from bleadperl
into maintperl.  This has scalin problems.  At tha same time,
maintenizzle branchez of stable versionz of Perl need ta be treated with
great care. To dat end, az of Perl 5.12, our crazy asses gotz a freshly smoked up process for
maint branches.
.PP
Any committa may cherry-pick any commit from blead ta a maint branch if
they bust mail ta perl5\-portas announcin they intent ta cherry-pick
a specific commit along wit a rationale fo' bustin so n' at least two
other committas respond ta tha list givin they assent. (This policy
applies ta current n' forma pumpkings, as well as other committers.)
.SH "CONTRIBUTED MODULES"
.IX Header "CONTRIBUTED MODULES"
.SS "A Ghetto Contract bout Artistic Control"
.IX Subsection "A Ghetto Contract bout Artistic Control"
What bigs up be a statement bout artistic control, defined as tha ability
of authorz of packages ta guide tha future of they code n' maintain
control over they work.  It be a recognizzle dat authors should have
control over they work, n' dat it aint nuthin but a responsibilitizzle of tha rest of
the Perl hood ta ensure dat they retain dis control.  It be an
attempt ta document tha standardz ta which we, as Perl pimpers, intend
to hold ourselves.  It be a attempt ta write down rough guidelines about
the respect we owe each other as Perl pimpers.
.PP
This statement aint a legal contract.  This statement aint a legal
document up in any way, shape, or form.  Perl is distributed under tha \s-1GNU\s0
Public License n' under tha Artistic License; dem is tha precise legal
terms.  This statement aint bout tha law or licenses.  It aint nuthin but about
community, mutual respect, trust, n' good-faith cooperation.
.PP
We recognize dat tha Perl core, defined as tha software distributed with
the ass of Perl itself, be a joint project on tha part of all of us.
From time ta time, a script, module, or set of modulez (hereafta referred
to simply as a \*(L"module\*(R") will prove so widely useful and/or so integral to
the erect functionin of Perl itself dat it should be distributed with
the Perl core.  This should never be done without tha authorz explicit
consent, n' a cold-ass lil clear recognizzle on all parts dat dis means tha module
is bein distributed under tha same terms as Perl itself.  A module author
should realize dat inclusion of a module tha fuck into tha Perl core will
necessarily mean some loss of control over it, since chizzlez may
occasionally gotta be made on short notice or fo' consistency wit the
rest of Perl.
.PP
Once a module has been included up in tha Perl core, however, everyone
involved up in maintainin Perl should be aware dat tha module is still the
property of tha original gangsta lyricist unless tha original gangsta lyricist explicitly
gives up they ballershizzle of dat shit.  In particular:
.IP "\(bu" 4
Da version of tha module up in tha Perl core should still be considered the
work of tha original gangsta lyricist.  All patches, bug reports, n' so
forth should be fed back ta em.  Their pimpment directions
should be bigged up whenever possible.
.IP "\(bu" 4
Patches may be applied by tha pumpkin holda without tha explicit
cooperation of tha module lyricist if n' only if they is straight-up minor,
time-critical up in some fashizzle (like fuckin urgent securitizzle fixes), or if
the module lyricist cannot be reached. Y'all KNOW dat shit, muthafucka!  Those patches must still be
given back ta tha lyricist when possible, n' if tha lyricist decides on
an alternate fix up in they version, dat fix should be strongly
preferred unless there be a straight-up problem wit dat shit.  Any chizzlez not
endorsed by tha lyricist should be marked as such, n' tha contributor
of tha chizzle bigged up.
.IP "\(bu" 4
Da version of tha module distributed wit Perl should, whenever
possible, be tha sickest fuckin version of tha module as distributed by the
lyricist (the sickest fuckin non-beta version up in tha case of hood Perl
releases), although tha pumpkin holda may hold off on upgradin the
version of tha module distributed wit Perl ta tha sickest fuckin version
until tha sickest fuckin version has had sufficient testing.
.PP
In other lyrics, tha lyricist of a module should be considered ta have final
say on modifications ta they module whenever possible (bearin up in mind
that itz expected dat mah playas involved will work together n' arrive at
reasonable compromises when there be disagreements).
.PP
As a last resort, however:
.PP
If tha authorz vision of tha future of they module is sufficiently
different from tha vision of tha pumpkin holda n' perl5\-portas as a
whole so as ta cause straight-up problems fo' Perl, tha pumpkin holda may
choose ta formally fork tha version of tha module up in tha Perl core from the
one maintained by tha lyricist.  This should not be done lightly and
should \fBalways\fR if at all possible be done only afta direct input
from Larry.  If dis is done, it must then be made explicit up in the
module as distributed wit tha Perl core dat it aint nuthin but a gangbangin' forked version and
that while it is based on tha original gangsta authorz work, it is no longer
maintained by em.  This must be noted up in both tha documentation and
in tha comments up in tha source of tha module.
.PP
Again, dis should be a last resort only.  Ideally, dis should never
happen, n' every last muthafuckin possible effort at cooperation n' compromise should be
made before bustin all dis bullshit.  If it do prove necessary ta fork a module for
the overall game of Perl, proper credit must be given ta tha original
lyricist up in perpetuitizzle n' tha decision should be constantly re-evaluated to
see if a remergin of tha two branches is possible down tha road.
.PP
In all dealings wit contributed modules, mah playas maintainin Perl should
keep up in mind dat tha code belongs ta tha original gangsta lyricist, dat they may
not be on perl5\-portas at any given time, n' dat a patch is not
straight-up legit unless it has been integrated tha fuck into tha authorz copy of the
module.  To aid wit this, n' wit points #1, #2, n' #3 above, contact
information fo' tha authorz of all contributed modulez should be kept with
the Perl distribution.
.PP
Finally, tha Perl hood as a whole recognizes dat respect for
ballershizzle of code, respect fo' artistic control, proper credit, n' active
effort ta prevent unintentionizzle code skew or communication gaps is vital
to tha game of tha hood n' Perl itself.  Memberz of a cold-ass lil hood
should not normally gotta resort ta rulez n' laws ta deal wit each
other, n' dis document, although it gotz nuff rulez so as ta be clear, is
about a attitude n' general approach.  Da first step up in any dispute
should be open communication, respect fo' opposin views, n' a attempt
at a cold-ass lil compromise.  In nearly every last muthafuckin circumstizzle not a god damn thang mo' will be
necessary, n' certainly no mo' drastic measure should be used until
every avenue of communication n' rap has failed.
.SH "DOCUMENTATION"
.IX Header "DOCUMENTATION"
Perlz documentation be a blingin resource fo' our users. It's
incredibly blingin fo' Perlz documentation ta be reasonably coherent
and ta accurately reflect tha current implementation.
.PP
Just as P5P collectively maintains tha codebase, we collectively
maintain tha documentation. I aint talkin' bout chicken n' gravy biatch.  Freestylin a particular bit of documentation
doesn't give a lyricist control of tha future of dat documentation.
At tha same time, just as source code chizzlez should match tha style
of they surroundin blocks, so should documentation chizzles.
.PP
Examplez up in documentation should be illustratizzle of tha concept
they explaining.  Sometimes, tha dopest way ta show how tha fuck a
language feature works is wit a lil' small-ass program tha reader can
run without modification. I aint talkin' bout chicken n' gravy biatch.  Mo' often, examplez will consist
of a snippet of code containin only tha \*(L"important\*(R" bits.
Da definizzle of \*(L"important\*(R" varies from snippet ta snippet.
Sometimes itz blingin ta declare \f(CW\*(C`use strict\*(C'\fR n' \f(CW\*(C`use warnings\*(C'\fR,
initialize all variablez n' straight-up catch every last muthafuckin error condition.
Mo' often than not, though, dem thangs obscure tha lesson
the example was intended ta teach.
.PP
As Perl is pimped by a global crew of volunteers, our
documentation often gotz nuff spellings which look funky
to \fIsomebody\fR.  Chizzle of Gangsta/British/Other spellings
is left as a exercise fo' tha lyricist of each bit of
documentation. I aint talkin' bout chicken n' gravy biatch.  When patchin documentation, try ta emulate
the documentation round you, rather than changin tha existing
prose.
.PP
In general, documentation should describe what tha fuck Perl do \*(L"now\*(R" rather
than what tha fuck it used ta do.  It aint nuthin but perfectly reasonable ta include notes
in documentation bout how tha fuck behaviour has chizzled from previous releases,
but, wit straight-up few exceptions, documentation aint \*(L"dual-life\*(R" \*(--
it don't need ta straight-up describe how tha fuck all oldschool versions used ta work.
.SH "STANDARDS OF CONDUCT"
.IX Header "STANDARDS OF CONDUCT"
Da straight-up legit forum fo' tha pimpment of perl is tha perl5\-portas mailing
list, mentioned above, n' its bugtracker at rt.perl.org.  All participants in
rap there be sposed ta fuckin adhere ta a standard of conduct.
.IP "\(bu" 4
Always be civil.
.IP "\(bu" 4
Heed tha moderators.
.PP
Civilitizzle is simple:  stick ta tha facts while avoidin dirty ass remarks and
sarcasm.  It aint enough ta be factual. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Yo ass must also be civil.  Responding
in kind ta incivilitizzle aint acceptable.
.PP
If tha list moderators rap  dat yo ass is not bein civil, carefully
consider how tha fuck yo' lyrics have rocked up before respondin up in any way.  Yo ass may
protest yo, but repeated protest up in tha grill of a repeatedly reaffirmed decision
is not acceptable.
.PP
Unacceptable behavior will result up in a hood n' clearly identified warning.
Repeated unacceptable behavior will result up in removal from tha mailin list.
Da first removal is fo' one month.  Subsequent removals will double up in length.
Afta six months wit no warning, a userz ban length is reset.  Removals, like
warnings, is public.
.PP
Da list of moderators is ghon be hood knowledge.  At present, it is:
Aaron Crane, Andy Dougherty, Ricardo Signes, Steffen Mu\*:ller.
.SH "CREDITS"
.IX Header "CREDITS"
\&\*(L"Ghetto Contract bout Contributed Modules\*(R" originally by Russ Allbery <rra@stanford.edu> n' tha perl5\-porters.
