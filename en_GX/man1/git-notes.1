'\" t
.\"     Title: git-notes
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-NOTES" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-notes \- Add or inspect object notes
.SH "SYNOPSIS"
.sp
.nf
\fIgit notes\fR [list [<object>]]
\fIgit notes\fR add [\-f] [\-F <file> | \-m <msg> | (\-c | \-C) <object>] [<object>]
\fIgit notes\fR copy [\-f] ( \-\-stdin | <from\-object> <to\-object> )
\fIgit notes\fR append [\-F <file> | \-m <msg> | (\-c | \-C) <object>] [<object>]
\fIgit notes\fR edit [<object>]
\fIgit notes\fR show [<object>]
\fIgit notes\fR merge [\-v | \-q] [\-s <strategy> ] <notes_ref>
\fIgit notes\fR merge \-\-commit [\-v | \-q]
\fIgit notes\fR merge \-\-abort [\-v | \-q]
\fIgit notes\fR remove [\-\-ignore\-missing] [\-\-stdin] [<object>\&...]
\fIgit notes\fR prune [\-n | \-v]
\fIgit notes\fR get\-ref
.fi
.sp
.SH "DESCRIPTION"
.sp
Adds, removes, or readz notes attached ta objects, without touchin tha objects theyselves\&.
.sp
By default, notes is saved ta n' read from refs/notes/commits yo, but dis default can be overridden\&. Right back up in yo muthafuckin ass. See tha OPTIONS, CONFIGURATION, n' ENVIRONMENT sections below\&. If dis ref do not exist, it is ghon be on tha fuckin' down-lowly pimped when it is first needed ta store a note\&.
.sp
A typical use of notes is ta supplement a cold-ass lil commit message without changin tha commit itself\&. Notes can be shown by \fIgit log\fR along wit tha original gangsta commit message\&. To distinguish these notes from tha message stored up in tha commit object, tha notes is indented like tha message, afta a unindented line sayin "Notes (<refname>):" (or "Notes:" fo' refs/notes/commits)\&.
.sp
Notes can also be added ta patches prepared wit git format\-patch by rockin tha \-\-notes option\&. Right back up in yo muthafuckin ass. Such notes is added as a patch commentary afta a three dash separator line\&.
.sp
To chizzle which notes is shown by \fIgit log\fR, peep tha "notes\&.displayRef" configuration up in \fBgit-log\fR(1)\&.
.sp
See tha "notes\&.rewrite\&.<command>" configuration fo' a way ta carry notes across commandz dat rewrite commits\&.
.SH "SUBCOMMANDS"
.PP
list
.RS 4
List tha notes object fo' a given object\&. If no object is given, show a list of all note objects n' tha objects they annotate (in tha format "<note object> <annotated object>")\&. This is tha default subcommand if no subcommand is given\&.
.RE
.PP
add
.RS 4
Add notes fo' a given object (defaults ta HEAD)\& fo' realz. Abort if tha object already has notes (use
\-f
to overwrite existin notes)\&. But fuck dat shiznit yo, tha word on tha street is dat if you\(cqre using
add
interactively (usin a editor ta supply tha notes contents), then \- instead of abortin \- tha existin notes is ghon be opened up in tha editor (like the
edit
subcommand)\&.
.RE
.PP
copy
.RS 4
Copy tha notes fo' tha straight-up original gangsta object onto tha second object\& fo' realz. Abort if tha second object already has notes, or if tha straight-up original gangsta object has none (use \-f ta overwrite existin notes ta tha second object)\&. This subcommand is equivalent to:
git notes add [\-f] \-C $(git notes list <from\-object>) <to\-object>
.sp
In
\-\-stdin
mode, take lines up in tha format
.sp
.if n \{\
.RS 4
.\}
.nf
<from\-object> SP <to\-object> [ SP <rest> ] LF
.fi
.if n \{\
.RE
.\}
.sp
on standard input, n' copy tha notes from each <from\-object> ta its correspondin <to\-object>\&. (Da optional
<rest>
is ignored so dat tha command can read tha input given ta the
post\-rewrite
hook\&.)
.RE
.PP
append
.RS 4
Append ta tha notez of a existin object (defaults ta HEAD)\&. Creates a freshly smoked up notes object if needed\&.
.RE
.PP
edit
.RS 4
Edit tha notes fo' a given object (defaults ta HEAD)\&.
.RE
.PP
show
.RS 4
Show tha notes fo' a given object (defaults ta HEAD)\&.
.RE
.PP
merge
.RS 4
Merge tha given notes ref tha fuck into tha current notes ref\&. This will try ta merge tha chizzlez made by tha given notes ref (called "remote") since tha merge\-base (if any) tha fuck into tha current notes ref (called "local")\&.
.sp
If conflicts arise n' a game fo' automatically resolvin conflictin notes (see tha \-s/\-\-strategy option) aint given, tha "manual" resolver is used\&. This resolver checks up tha conflictin notes up in a special worktree (\&.git/NOTES_MERGE_WORKTREE), n' instructs tha user ta manually resolve tha conflicts there\&. When done, tha user can either finalize tha merge with
\fIgit notes merge \-\-commit\fR, or abort tha merge with
\fIgit notes merge \-\-abort\fR\&.
.RE
.PP
remove
.RS 4
Remove tha notes fo' given objects (defaults ta HEAD)\&. When givin zero or one object from tha command line, dis is equivalent ta specifyin a empty note message ta the
edit
subcommand\&.
.RE
.PP
prune
.RS 4
Remove all notes fo' non\-existing/unreachable objects\&.
.RE
.PP
get\-ref
.RS 4
Print tha current notes ref\&. This serves up a easy as fuck  way ta retrieve tha current notes ref (e\&.g\&. from scripts)\&.
.RE
.SH "OPTIONS"
.PP
\-f, \-\-force
.RS 4
When addin notes ta a object dat already has notes, overwrite tha existin notes (instead of aborting)\&.
.RE
.PP
\-m <msg>, \-\-message=<msg>
.RS 4
Use tha given note message (instead of prompting)\&. If multiple
\-m
options is given, they joints is concatenated as separate paragraphs\&. Lines startin with
#
and empty lines other than a single line between paragraphs is ghon be stripped out\&.
.RE
.PP
\-F <file>, \-\-file=<file>
.RS 4
Take tha note message from tha given file\&. Use
\fI\-\fR
to read tha note message from tha standard input\&. Lines startin with
#
and empty lines other than a single line between paragraphs is ghon be stripped out\&.
.RE
.PP
\-C <object>, \-\-reuse\-message=<object>
.RS 4
Take tha given blob object (for example, another note) as tha note message\&. (Use
git notes copy <object>
instead ta copy notes between objects\&.)
.RE
.PP
\-c <object>, \-\-reedit\-message=<object>
.RS 4
Like
\fI\-C\fR yo, but with
\fI\-c\fR
the editor is invoked, so dat tha user can further edit tha note message\&.
.RE
.PP
\-\-ref <ref>
.RS 4
Manipulate tha notes tree up in <ref>\&. This overrides
\fIGIT_NOTES_REF\fR
and tha "core\&.notesRef" configuration\&. Da ref is taken ta be in
refs/notes/
if it aint qualified\&.
.RE
.PP
\-\-ignore\-missing
.RS 4
Do not consider it a error ta request removin notes from a object dat aint gots notes attached ta it\&.
.RE
.PP
\-\-stdin
.RS 4
Also read tha object names ta remove notes from from tha standard input (there is no reason you cannot combine dis wit object names from tha command line)\&.
.RE
.PP
\-n, \-\-dry\-run
.RS 4
Do not remove anything; just report tha object names whose notes would be removed\&.
.RE
.PP
\-s <strategy>, \-\-strategy=<strategy>
.RS 4
When mergin notes, resolve notes conflicts rockin tha given game\&. Da followin strategies is recognized: "manual" (default), "ours", "theirs", "union" n' "cat_sort_uniq"\&. Right back up in yo muthafuckin ass. See tha "NOTES MERGE STRATEGIES" section below fo' mo' shiznit on each notes merge game\&.
.RE
.PP
\-\-commit
.RS 4
Finalize a in\-progress
\fIgit notes merge\fR\&. Use dis option when you have resolved tha conflicts that
\fIgit notes merge\fR
stored up in \&.git/NOTES_MERGE_WORKTREE\&. This amendz tha partial merge commit pimped by
\fIgit notes merge\fR
(stored up in \&.git/NOTES_MERGE_PARTIAL) by addin tha notes up in \&.git/NOTES_MERGE_WORKTREE\&. Da notes ref stored up in tha \&.git/NOTES_MERGE_REF symref is updated ta tha resultin commit\&.
.RE
.PP
\-\-abort
.RS 4
Abort/reset a in\-progress
\fIgit notes merge\fR, i\&.e\&. a notes merge wit conflicts\&. This simply removes all filez related ta tha notes merge\&.
.RE
.PP
\-q, \-\-quiet
.RS 4
When mergin notes, operate on tha fuckin' down-lowly\&.
.RE
.PP
\-v, \-\-verbose
.RS 4
When mergin notes, be mo' verbose\&. When prunin notes, report all object names whose notes is removed\&.
.RE
.SH "DISCUSSION"
.sp
Commit notes is blobs containin extra shiznit bout a object (usually shiznit ta supplement a cold-ass lil commit\(cqs message)\&. These blobs is taken from notes refs\& fo' realz. A notes ref is probably a funky-ass branch which gotz nuff "files" whose paths is tha object names fo' tha objects they describe, wit some directory separators included fo' performizzle reasons \&\s-2\u[1]\d\s+2\&.
.sp
Every notes chizzle creates a freshly smoked up commit all up in tha specified notes ref\&. Yo ass can therefore inspect tha history of tha notes by invoking, e\&.g\&., git log \-p notes/commits\&. Currently tha commit message only recordz which operation triggered tha update, n' tha commit authorshizzle is determined accordin ta tha usual rulez (see \fBgit-commit\fR(1))\&. These details may chizzle up in tha future\&.
.sp
It be also permitted fo' a notes ref ta point directly ta a tree object, up in which case tha history of tha notes can be read wit git log \-p \-g <refname>\&.
.SH "NOTES MERGE STRATEGIES"
.sp
Da default notes merge game is "manual", which checks up conflictin notes up in a special work tree fo' resolvin notes conflicts (\&.git/NOTES_MERGE_WORKTREE), n' instructs tha user ta resolve tha conflicts up in dat work tree\&. When done, tha user can either finalize tha merge wit \fIgit notes merge \-\-commit\fR, or abort tha merge wit \fIgit notes merge \-\-abort\fR\&.
.sp
"ours" automatically resolves conflictin notes up in favor of tha local version (i\&.e\&. tha current notes ref)\&.
.sp
"theirs" automatically resolves notes conflicts up in favor of tha remote version (i\&.e\&. tha given notes ref bein merged tha fuck into tha current notes ref)\&.
.sp
"union" automatically resolves notes conflicts by concatenatin tha local n' remote versions\&.
.sp
"cat_sort_uniq" is similar ta "union" yo, but up in addizzle ta concatenatin tha local n' remote versions, dis game also sorts tha resultin lines, n' removes duplicate lines from tha result\&. This is equivalent ta applyin tha "cat | sort | uniq" shell pipeline ta tha local n' remote versions\&. This game is useful if tha notes follow a line\-based format where one wants ta avoid duplicated lines up in tha merge result\&. Note dat if either tha local or remote version contain duplicate lines prior ta tha merge, these will also be removed by dis notes merge game\&.
.SH "EXAMPLES"
.sp
Yo ass can use notes ta add annotations wit shiznit dat was not available all up in tha time a cold-ass lil commit was written\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ git notes add \-m \(aqTested\-by: Johannes Sixt <j6t@kdbg\&.org>\(aq 72a144e2
$ git show \-s 72a144e
[\&.\&.\&.]
    Signed\-off\-by: Junio C Hamano <gitster@pobox\&.com>

Notes:
    Tested\-by: Johannes Sixt <j6t@kdbg\&.org>
.fi
.if n \{\
.RE
.\}
.sp
.sp
In principle, a note be a regular Git blob, n' any kind of (non\-)format be accepted\&. Yo ass can binary\-safely create notes from arbitrary filez rockin \fIgit hash\-object\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
$ cc *\&.c
$ blob=$(git hash\-object \-w a\&.out)
$ git notes \-\-ref=built add \-C "$blob" HEAD
.fi
.if n \{\
.RE
.\}
.sp
.sp
(Yo ass cannot simply use git notes \-\-ref=built add \-F a\&.out HEAD cuz dat aint binary\-safe\&.) Of course, it don\(cqt make much sense ta display non\-text\-format notes wit \fIgit log\fR, so if you use such notes, you\(cqll probably need ta write some special\-purpose tools ta do suttin' useful wit them\&.
.SH "CONFIGURATION"
.PP
core\&.notesRef
.RS 4
Notes ref ta read n' manipulate instead of
refs/notes/commits\&. Must be a unabbreviated ref name\&. This settin can be overridden all up in tha environment n' command line\&.
.RE
.PP
notes\&.displayRef
.RS 4
Which ref (or refs, if a glob or specified mo' than once), up in addizzle ta tha default set by
core\&.notesRef
or
\fIGIT_NOTES_REF\fR, ta read notes from when showin commit lyrics wit the
\fIgit log\fR
family of commands\&. This settin can be overridden on tha command line or by the
\fIGIT_NOTES_DISPLAY_REF\fR
environment variable\&. Right back up in yo muthafuckin ass. See
\fBgit-log\fR(1)\&.
.RE
.PP
notes\&.rewrite\&.<command>
.RS 4
When rewritin commits wit <command> (currently
amend
or
rebase), if dis variable is
false, git aint gonna copy notes from tha original gangsta ta tha rewritten commit\&. Defaults to
true\&. Right back up in yo muthafuckin ass. See also "notes\&.rewriteRef" below\&.
.sp
This settin can be overridden by the
\fIGIT_NOTES_REWRITE_REF\fR
environment variable\&.
.RE
.PP
notes\&.rewriteMode
.RS 4
When copyin notes durin a rewrite, what tha fuck ta do if tha target commit already has a note\&. Must be one of
overwrite,
concatenate, and
ignore\&. Defaults to
concatenate\&.
.sp
This settin can be overridden wit the
GIT_NOTES_REWRITE_MODE
environment variable\&.
.RE
.PP
notes\&.rewriteRef
.RS 4
When copyin notes durin a rewrite, specifies tha (fully qualified) ref whose notes should be copied\&. May be a glob, up in which case notes up in all matchin refs is ghon be copied\&. Yo ass may also specify dis configuration nuff muthafuckin times\&.
.sp
Do not gotz a thugged-out default value; you must configure dis variable ta enable note rewriting\&.
.sp
Can be overridden wit the
\fIGIT_NOTES_REWRITE_REF\fR
environment variable\&.
.RE
.SH "ENVIRONMENT"
.PP
\fIGIT_NOTES_REF\fR
.RS 4
Which ref ta manipulate notes from, instead of
refs/notes/commits\&. This overrides the
core\&.notesRef
setting\&.
.RE
.PP
\fIGIT_NOTES_DISPLAY_REF\fR
.RS 4
Colon\-delimited list of refs or globs indicatin which refs, up in addizzle ta tha default from
core\&.notesRef
or
\fIGIT_NOTES_REF\fR, ta read notes from when showin commit lyrics\&. This overrides the
notes\&.displayRef
setting\&.
.sp
A warnin is ghon be issued fo' refs dat do not exist yo, but a glob dat do not match any refs is silently ignored\&.
.RE
.PP
\fIGIT_NOTES_REWRITE_MODE\fR
.RS 4
When copyin notes durin a rewrite, what tha fuck ta do if tha target commit already has a note\&. Must be one of
overwrite,
concatenate, and
ignore\&. This overrides the
core\&.rewriteMode
setting\&.
.RE
.PP
\fIGIT_NOTES_REWRITE_REF\fR
.RS 4
When rewritin commits, which notes ta copy from tha original gangsta ta tha rewritten commit\&. Must be a cold-ass lil colon\-delimited list of refs or globs\&.
.sp
If not set up in tha environment, tha list of notes ta copy dependz on the
notes\&.rewrite\&.<command>
and
notes\&.rewriteRef
settings\&.
.RE
.SH "GIT"
.sp
Part of tha \fBgit\fR(7) suite
.SH "NOTES"
.IP " 1." 4
Permitted pathnames have tha form \fIab\fR/\fIcd\fR/\fIef\fR/\fI\&...\fR/\fIabcdef\&...\fR: a sequence of directory namez of two hexadecimal digits each followed by a gangbangin' filename wit tha rest of tha object ID.

