'\" t
.\"     Title: git-merge
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-MERGE" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-merge \- Join two or mo' pimpment histories together
.SH "SYNOPSIS"
.sp
.nf
\fIgit merge\fR [\-n] [\-\-stat] [\-\-no\-commit] [\-\-squash] [\-\-[no\-]edit]
        [\-s <strategy>] [\-X <strategy\-option>] [\-S[<keyid>]]
        [\-\-[no\-]rerere\-autoupdate] [\-m <msg>] [<commit>\&...]
\fIgit merge\fR <msg> HEAD <commit>\&...
\fIgit merge\fR \-\-abort
.fi
.sp
.SH "DESCRIPTION"
.sp
Incorporates chizzlez from tha named commits (since tha time they histories diverged from tha current branch) tha fuck into tha current branch\&. This command is used by \fIgit pull\fR ta incorporate chizzlez from another repository n' can be used by hand ta merge chizzlez from one branch tha fuck into another\&.
.sp
Assume tha followin history exists n' tha current branch is "master":
.sp
.if n \{\
.RS 4
.\}
.nf
          A\-\-\-B\-\-\-C topic
         /
    D\-\-\-E\-\-\-F\-\-\-G master
.fi
.if n \{\
.RE
.\}
.sp
.sp
Then "git merge topic" will replay tha chizzlez made on tha topic branch since it diverged from masta (i\&.e\&., E) until its current commit (C) on top of master, n' record tha result up in a freshly smoked up commit along wit tha namez of tha two parent commits n' a log message from tha user describin tha chizzles\&.
.sp
.if n \{\
.RS 4
.\}
.nf
          A\-\-\-B\-\-\-C topic
         /         \e
    D\-\-\-E\-\-\-F\-\-\-G\-\-\-H master
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da second syntax (<msg> HEAD <commit>\&...) is supported fo' oldschool reasons\&. Do not use it from tha command line or up in freshly smoked up scripts\&. Well shiiiit, it is tha same ol' dirty as git merge \-m <msg> <commit>\&.\&.\&.\&.
.sp
Da third syntax ("git merge \-\-abort") can only be run afta tha merge has resulted up in conflicts\&. \fIgit merge \-\-abort\fR will abort tha merge process n' try ta reconstruct tha pre\-merge state\&. But fuck dat shiznit yo, tha word on tha street is dat if there was uncommitted chizzlez when tha merge started (and especially if dem chizzlez was further modified afta tha merge was started), \fIgit merge \-\-abort\fR will up in some cases be unable ta reconstruct tha original gangsta (pre\-merge) chizzles\&. Therefore:
.sp
\fBWarning\fR: Hustlin \fIgit merge\fR wit non\-trivial uncommitted chizzlez is discouraged: while possible, it may leave you up in a state dat is hard ta back outta up in tha case of a cold-ass lil conflict\&.
.SH "OPTIONS"
.PP
\-\-commit, \-\-no\-commit
.RS 4
Perform tha merge n' commit tha result\&. This option can be used ta override \-\-no\-commit\&.
.sp
With \-\-no\-commit big-ass up tha merge but pretend tha merge failed n' do not autocommit, ta give tha user a cold-ass lil chizzle ta inspect n' further tweak tha merge result before committing\&.
.RE
.PP
\-\-edit, \-e, \-\-no\-edit
.RS 4
Invoke a editor before committin successful mechanical merge ta further edit tha auto\-generated merge message, so dat tha user can explain n' justify tha merge\&. The
\-\-no\-edit
option can be used ta accept tha auto\-generated message (this is generally discouraged)\&. The
\-\-edit
(or
\-e) option is still useful if yo ass is givin a thugged-out draft message wit the
\-m
option from tha command line n' wanna edit it up in tha editor\&.
.sp
Older scripts may depend on tha oldschool behaviour of not allowin tha user ta edit tha merge log message\&. They will peep a editor opened when they run
git merge\&. To make it easier ta adjust such scripts ta tha updated behaviour, tha environment variable
GIT_MERGE_AUTOEDIT
can be set to
no
at tha beginnin of them\&.
.RE
.PP
\-\-ff
.RS 4
When tha merge resolves as a gangbangin' fast\-forward, only update tha branch pointer, without bustin a merge commit\&. This is tha default behavior\&.
.RE
.PP
\-\-no\-ff
.RS 4
Smoke a merge commit even when tha merge resolves as a gangbangin' fast\-forward\&. This is tha default behaviour when mergin a annotated (and possibly signed) tag\&.
.RE
.PP
\-\-ff\-only
.RS 4
Refuse ta merge n' exit wit a non\-zero status unless tha current
HEAD
is already up\-to\-date or tha merge can be resolved as a gangbangin' fast\-forward\&.
.RE
.PP
\-\-log[=<n>], \-\-no\-log
.RS 4
In addizzle ta branch names, populate tha log message wit one\-line descriptions from at most <n> actual commits dat is bein merged\&. Right back up in yo muthafuckin ass. See also
\fBgit-fmt-merge-msg\fR(1)\&.
.sp
With \-\-no\-log do not list one\-line descriptions from tha actual commits bein merged\&.
.RE
.PP
\-\-stat, \-n, \-\-no\-stat
.RS 4
Show a gangbangin' finger-lickin' diffstat all up in tha end of tha merge\&. Da diffstat be also controlled by tha configuration option merge\&.stat\&.
.sp
With \-n or \-\-no\-stat do not show a gangbangin' finger-lickin' diffstat all up in tha end of tha merge\&.
.RE
.PP
\-\-squash, \-\-no\-squash
.RS 4
Produce tha hustlin tree n' index state as if a real merge happened (except fo' tha merge shiznit) yo, but do not straight-up cook up a cold-ass lil commit, move the
HEAD, or record
$GIT_DIR/MERGE_HEAD
(to cause tha next
git commit
command ta create a merge commit)\&. This allows you ta create a single commit on top of tha current branch whose effect is tha same ol' dirty as mergin another branch (or mo' up in case of a octopus)\&.
.sp
With \-\-no\-squash big-ass up tha merge n' commit tha result\&. This option can be used ta override \-\-squash\&.
.RE
.PP
\-s <strategy>, \-\-strategy=<strategy>
.RS 4
Use tha given merge game; can be supplied mo' than once ta specify dem up in tha order they should be tried\&. If there is no
\-s
option, a funky-ass built\-in list of strategies is used instead (\fIgit merge\-recursive\fR
when mergin a single head,
\fIgit merge\-octopus\fR
otherwise)\&.
.RE
.PP
\-X <option>, \-\-strategy\-option=<option>
.RS 4
Pass merge game specific option all up in ta tha merge game\&.
.RE
.PP
\-\-verify\-signatures, \-\-no\-verify\-signatures
.RS 4
Verify dat tha commits bein merged have phat n' trusted GPG signatures n' abort tha merge up in case they do not\&.
.RE
.PP
\-\-summary, \-\-no\-summary
.RS 4
Synonyms ta \-\-stat n' \-\-no\-stat; these is deprecated n' is ghon be removed up in tha future\&.
.RE
.PP
\-q, \-\-quiet
.RS 4
Operate on tha fuckin' down-lowly\&. Implies \-\-no\-progress\&.
.RE
.PP
\-v, \-\-verbose
.RS 4
Be verbose\&.
.RE
.PP
\-\-progress, \-\-no\-progress
.RS 4
Turn progress on/off explicitly\&. If neither is specified, progress is shown if standard error is connected ta a terminal\&. Note dat not all merge strategies may support progress reporting\&.
.RE
.PP
\-S[<keyid>], \-\-gpg\-sign[=<keyid>]
.RS 4
GPG\-sign tha resultin merge commit\&.
.RE
.PP
\-m <msg>
.RS 4
Set tha commit message ta be used fo' tha merge commit (in case one is pimped)\&.
.sp
If
\-\-log
is specified, a gangbangin' finger-lickin' dirty-ass shortlog of tha commits bein merged is ghon be appended ta tha specified message\&.
.sp
The
\fIgit fmt\-merge\-msg\fR
command can be used ta give a phat default fo' automated
\fIgit merge\fR
invocations\&.
.RE
.PP
\-\-[no\-]rerere\-autoupdate
.RS 4
Allow tha rerere mechanizzle ta update tha index wit tha result of auto\-conflict resolution if possible\&.
.RE
.PP
\-\-abort
.RS 4
Abort tha current conflict resolution process, n' try ta reconstruct tha pre\-merge state\&.
.sp
If there was uncommitted worktree chizzlez present when tha merge started,
\fIgit merge \-\-abort\fR
will up in some cases be unable ta reconstruct these chizzles\&. Well shiiiit, it is therefore recommended ta always commit or stash yo' chizzlez before hustlin
\fIgit merge\fR\&.
.sp
\fIgit merge \-\-abort\fR
is equivalent to
\fIgit reset \-\-merge\fR
when
MERGE_HEAD
is present\&.
.RE
.PP
<commit>\&...
.RS 4
Commits, probably other branch heads, ta merge tha fuck into our branch\&. Right back up in yo muthafuckin ass. Specifyin mo' than one commit will create a merge wit mo' than two muthafathas (affectionately called a Octopus merge)\&.
.sp
If no commit is given from tha command line, n' if
merge\&.defaultToUpstream
configuration variable is set, merge tha remote\-trackin branches dat tha current branch is configured ta use as its upstream\&. Right back up in yo muthafuckin ass. See also tha configuration section of dis manual page\&.
.RE
.SH "PRE-MERGE CHECKS"
.sp
Before applyin outside chizzles, you should git yo' own work up in phat shape n' committed locally, so it aint gonna be clobbered if there be conflicts\&. Right back up in yo muthafuckin ass. See also \fBgit-stash\fR(1)\&. \fIgit pull\fR n' \fIgit merge\fR will stop without bustin anythang when local uncommitted chizzlez overlap wit filez dat \fIgit pull\fR/\fIgit merge\fR may need ta update\&.
.sp
To avoid recordin unrelated chizzlez up in tha merge commit, \fIgit pull\fR n' \fIgit merge\fR will also abort if there be any chizzlez registered up in tha index relatizzle ta tha HEAD commit\&. (One exception is when tha chizzled index entries is up in tha state dat would result from tha merge already\&.)
.sp
If all named commits is already ancestorz of HEAD, \fIgit merge\fR will exit early wit tha message "Already up\-to\-date\&."
.SH "FAST-FORWARD MERGE"
.sp
Often tha current branch head be a ancestor of tha named commit\&. This is da most thugged-out common case especially when invoked from \fIgit pull\fR: yo ass is trackin a upstream repository, you have committed no local chizzles, n' now you wanna update ta a newer upstream revision\&. In dis case, a freshly smoked up commit aint needed ta store tha combined history; instead, tha HEAD (along wit tha index) is updated ta point all up in tha named commit, without bustin a extra merge commit\&.
.sp
This behavior can be suppressed wit tha \-\-no\-ff option\&.
.SH "TRUE MERGE"
.sp
Except up in a gangbangin' fast\-forward merge (see above), tha branches ta be merged must be tied together by a merge commit dat has both of dem as its muthafathas\&.
.sp
A merged version reconcilin tha chizzlez from all branches ta be merged is committed, n' yo' HEAD, index, n' hustlin tree is updated ta it\&. Well shiiiit, it is possible ta have modifications up in tha hustlin tree as long as they do not overlap; tha update will preserve them\&.
.sp
When it aint obvious how tha fuck ta reconcile tha chizzles, tha followin happens:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
The
HEAD
pointa stays tha same\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
The
MERGE_HEAD
ref is set ta point ta tha other branch head\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Paths dat merged cleanly is updated both up in tha index file n' up in yo' hustlin tree\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
For conflictin paths, tha index file recordz up ta three versions: stage 1 stores tha version from tha common ancestor, stage 2 from
HEAD, n' stage 3 from
MERGE_HEAD
(you can inspect tha stages with
git ls\-filez \-u)\&. Da hustlin tree filez contain tha result of tha "merge" program; i\&.e\&. 3\-way merge thangs up in dis biatch wit familiar conflict markers
<<<===>>>\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
No other chizzlez is made\&. In particular, tha local modifications you had before you started merge will stay tha same n' tha index entries fo' dem stay as they were, i\&.e\&. matching
HEAD\&.
.RE
.sp
If you tried a merge which resulted up in complex conflicts n' wanna start over, you can recover wit git merge \-\-abort\&.
.SH "MERGING TAG"
.sp
When mergin a annotated (and possibly signed) tag, Git always creates a merge commit even if a gangbangin' fast\-forward merge is possible, n' tha commit message template is prepared wit tha tag message\& fo' realz. Additionally, if tha tag is signed, tha signature check is reported as a cold-ass lil comment up in tha message template\&. Right back up in yo muthafuckin ass. See also \fBgit-tag\fR(1)\&.
.sp
When you wanna just integrate wit tha work leadin ta tha commit dat happens ta be tagged, e\&.g\&. synchronizin wit a upstream release point, you may not wanna cook up a unnecessary merge commit\&.
.sp
In such a cold-ass lil case, you can "unwrap" tha tag yo ass before feedin it ta git merge, or pass \-\-ff\-only when you aint gots any work on yo' own\&. e\&.g\&.
.sp
.if n \{\
.RS 4
.\}
.nf
git fetch origin
git merge v1\&.2\&.3^0
git merge \-\-ff\-only v1\&.2\&.3
.fi
.if n \{\
.RE
.\}
.sp
.SH "HOW CONFLICTS ARE PRESENTED"
.sp
Durin a merge, tha hustlin tree filez is updated ta reflect tha result of tha merge\& fo' realz. Among tha chizzlez made ta tha common ancestor\(cqs version, non\-overlappin ones (that is, you chizzled a area of tha file while tha other side left dat area intact, or vice versa) is incorporated up in tha final result verbatim\&. When both sides made chizzlez ta tha same area, however, Git cannot randomly pick one side over tha other, n' asks you ta resolve it by leavin what tha fuck both sides did ta dat area\&.
.sp
By default, Git uses tha same ol' dirty steez as tha one used by tha "merge" program from tha RCS suite ta present such a cold-ass lil conflicted hunk, like this:
.sp
.if n \{\
.RS 4
.\}
.nf
Here is lines dat is either unchanged from tha common
ancestor, or cleanly resolved cuz only one side chizzled\&.
<<<<<<< yours:sample\&.txt
Conflict resolution is hard;
let\(aqs go hustlin\&.
=======
Git make conflict resolution easy as fuck \&.
>>>>>>> theirs:sample\&.txt
And here be another line dat is cleanly resolved or unmodified\&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da area where a pair of conflictin chizzlez happened is marked wit markers <<<<<<<, =======, n' >>>>>>>\&. Da part before tha ======= is typically yo' side, n' tha part afterwardz is typically they side\&.
.sp
Da default format do not show what tha fuck tha original gangsta holla'd up in tha conflictin area\&. Yo ass cannot tell how tha fuck nuff lines is deleted n' replaced wit Barbie\(cqs remark on yo' side\&. Da only thang you can tell is dat yo' side wants ta say it is hard n' you\(cqd prefer ta go hustlin, while tha other side wants ta claim it is easy as fuck \&.
.sp
An alternatizzle steez can be used by settin tha "merge\&.conflictstyle" configuration variable ta "diff3"\&. In "diff3" style, tha above conflict may be lookin like this:
.sp
.if n \{\
.RS 4
.\}
.nf
Here is lines dat is either unchanged from tha common
ancestor, or cleanly resolved cuz only one side chizzled\&.
<<<<<<< yours:sample\&.txt
Conflict resolution is hard;
let\(aqs go hustlin\&.
|||||||
Conflict resolution is hard\&.
=======
Git make conflict resolution easy as fuck \&.
>>>>>>> theirs:sample\&.txt
And here be another line dat is cleanly resolved or unmodified\&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
In addizzle ta tha <<<<<<<, =======, n' >>>>>>> markers, it uses another ||||||| marker dat is followed by tha original gangsta text\&. Yo ass can tell dat tha original gangsta just stated a gangbangin' fact, n' yo' side simply gave up in ta dat statement n' gave up, while tha other side tried ta git a mo' positizzle attitude\&. Yo ass can sometimes come up wit a funky-ass betta resolution by viewin tha original\&.
.SH "HOW TO RESOLVE CONFLICTS"
.sp
Afta seein a cold-ass lil conflict, you can do two thangs:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Decizzle not ta merge\&. Da only clean\-ups you need is ta reset tha index file ta the
HEAD
commit ta reverse 2\&. n' ta clean up hustlin tree chizzlez made by 2\&. n' 3\&.;
git merge \-\-abort
can be used fo' this\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Resolve tha conflicts\&. Git will mark tha conflicts up in tha hustlin tree\&. Edit tha filez tha fuck into shape and
\fIgit add\fR
them ta tha index\&. Use
\fIgit commit\fR
to seal tha deal\&.
.RE
.sp
Yo ass can work all up in tha conflict wit a fuckin shitload of tools:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Use a mergetool\&.
git mergetool
to launch a graphical mergetool which will work you all up in tha merge\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Look all up in tha diffs\&.
git diff
will show a three\-way diff, highlightin chizzlez from both the
HEAD
and
MERGE_HEAD
versions\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Look all up in tha diffs from each branch\&.
git log \-\-merge \-p <path>
will show diffs first fo' the
HEAD
version n' then the
MERGE_HEAD
version\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Look all up in tha originals\&.
git show :1:filename
shows tha common ancestor,
git show :2:filename
shows the
HEAD
version, and
git show :3:filename
shows the
MERGE_HEAD
version\&.
.RE
.SH "EXAMPLES"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Merge branches
fixes
and
enhancements
on top of tha current branch, bustin a octopus merge:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git merge fixes enhancements
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Merge branch
obsolete
into tha current branch, using
ours
merge game:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git merge \-s ours obsolete
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Merge branch
maint
into tha current branch yo, but do not cook up a freshly smoked up commit automatically:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git merge \-\-no\-commit maint
.fi
.if n \{\
.RE
.\}
.sp
This can be used when you wanna include further chizzlez ta tha merge, or wanna write yo' own merge commit message\&.
.sp
Yo ass should refrain from abusin dis option ta sneak substantial chizzlez tha fuck into a merge commit\&. Right back up in yo muthafuckin ass. Lil Small-Ass fixups like bumpin release/version name would be acceptable\&.
.RE
.SH "MERGE STRATEGIES"
.sp
Da merge mechanizzle (git merge n' git pull commands) allows tha backend \fImerge strategies\fR ta be chosen wit \-s option\&. Right back up in yo muthafuckin ass. Some strategies can also take they own options, which can be passed by givin \-X<option> arguments ta git merge and/or git pull\&.
.PP
resolve
.RS 4
This can only resolve two headz (i\&.e\&. tha current branch n' another branch you pulled from) rockin a 3\-way merge algorithm\&. Well shiiiit, it tries ta carefully detect criss\-cross merge ambiguitizzles n' is considered generally safe n' fast\&.
.RE
.PP
recursive
.RS 4
This can only resolve two headz rockin a 3\-way merge algorithm\&. When there is mo' than one common ancestor dat can be used fo' 3\-way merge, it creates a merged tree of tha common ancestors n' uses dat as tha reference tree fo' tha 3\-way merge\&. This has been reported ta result up in fewer merge conflicts without causin mis\-merges by tests done on actual merge commits taken from Linux 2\&.6 kernel pimpment history\& fo' realz. Additionally dis can detect n' handle merges involvin renames\&. This is tha default merge game when pullin or mergin one branch\&.
.sp
The
\fIrecursive\fR
strategy can take tha followin options:
.PP
ours
.RS 4
This option forces conflictin hunks ta be auto\-resolved cleanly by favoring
\fIour\fR
version\&. Chizzlez from tha other tree dat do not conflict wit our side is reflected ta tha merge result\&. For a funky-ass binary file, tha entire contents is taken from our side\&.
.sp
This should not be trippin wit the
\fIours\fR
merge game, which do not even peep what tha fuck tha other tree gotz nuff at all\&. Well shiiiit, it discardz every last muthafuckin thang tha other tree did, declaring
\fIour\fR
history gotz nuff all dat happened up in it\&.
.RE
.PP
theirs
.RS 4
This is tha opposite of
\fIours\fR\&.
.RE
.PP
patience
.RS 4
With dis option,
\fImerge\-recursive\fR
spendz a lil extra time ta avoid mismerges dat sometimes occur cuz of unimportant matchin lines (e\&.g\&., braces from distinct functions)\&. Use dis when tha branches ta be merged have diverged wildly\&. Right back up in yo muthafuckin ass. See also
\fBgit-diff\fR(1)\-\-patience\&.
.RE
.PP
diff\-algorithm=[patience|minimal|histogram|myers]
.RS 4
Tells
\fImerge\-recursive\fR
to bust a gangbangin' finger-lickin' different diff algorithm, which can help avoid mismerges dat occur cuz of unimportant matchin lines (like fuckin braces from distinct functions)\&. Right back up in yo muthafuckin ass. See also
\fBgit-diff\fR(1)\-\-diff\-algorithm\&.
.RE
.PP
ignore\-space\-change, ignore\-all\-space, ignore\-space\-at\-eol
.RS 4
Treats lines wit tha indicated type of whitespace chizzle as unchanged fo' tha sake of a three\-way merge\&. Whitespace chizzlez mixed wit other chizzlez ta a line is not ignored\&. Right back up in yo muthafuckin ass. See also
\fBgit-diff\fR(1)\-b,
\-w, and
\-\-ignore\-space\-at\-eol\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
\fItheir\fR
version only introduces whitespace chizzlez ta a line,
\fIour\fR
version is used;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
\fIour\fR
version introduces whitespace chizzlez but
\fItheir\fR
version includes a substantial chizzle,
\fItheir\fR
version is used;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Otherwise, tha merge proceedz up in tha usual way\&.
.RE
.RE
.PP
renormalize
.RS 4
This runs a virtual check\-out n' check\-in of all three stagez of a gangbangin' file when resolvin a three\-way merge\&. This option is meant ta be used when mergin branches wit different clean filtas or end\-of\-line normalization rules\&. Right back up in yo muthafuckin ass. See "Mergin branches wit differin checkin/checkout attributes" in
\fBgitattributes\fR(5)
for details\&.
.RE
.PP
no\-renormalize
.RS 4
Disablez the
renormalize
option\&. This overrides the
merge\&.renormalize
configuration variable\&.
.RE
.PP
rename\-threshold=<n>
.RS 4
Controls tha similaritizzle threshold used fo' rename detection\&. Right back up in yo muthafuckin ass. See also
\fBgit-diff\fR(1)\-M\&.
.RE
.PP
subtree[=<path>]
.RS 4
This option be a mo' advanced form of
\fIsubtree\fR
strategy, where tha game cook up a guess on how tha fuck two trees must be shifted ta match wit each other when merging\&. Instead, tha specified path is prefixed (or stripped from tha beginning) ta make tha shape of two trees ta match\&.
.RE
.RE
.PP
octopus
.RS 4
This resolves cases wit mo' than two headz yo, but refuses ta do a cold-ass lil complex merge dat needz manual resolution\&. Well shiiiit, it is primarily meant ta be used fo' bundlin topic branch headz together\&. This is tha default merge game when pullin or mergin mo' than one branch\&.
.RE
.PP
ours
.RS 4
This resolves any number of headz yo, but tha resultin tree of tha merge be always dat of tha current branch head, effectively ignorin all chizzlez from all other branches\&. Well shiiiit, it is meant ta be used ta supersede oldschool pimpment history of side branches\&. Note dat dis is different from tha \-Xours option ta the
\fIrecursive\fR
merge game\&.
.RE
.PP
subtree
.RS 4
This be a modified recursive game\&. When mergin trees A n' B, if B correspondz ta a subtree of A, B is first adjusted ta match tha tree structure of A, instead of readin tha trees all up in tha same level\&. This adjustment be also done ta tha common ancestor tree\&.
.RE
.sp
With tha strategies dat use 3\-way merge (includin tha default, \fIrecursive\fR), if a cold-ass lil chizzle is made on both branches yo, but lata reverted on one of tha branches, dat chizzle is ghon be present up in tha merged result; some playas find dis behavior confusing\&. Well shiiiit, it occurs cuz only tha headz n' tha merge base is considered when struttin a merge, not tha individual commits\&. Da merge algorithm therefore considaz tha reverted chizzle as no chizzle at all, n' substitutes tha chizzled version instead\&.
.SH "CONFIGURATION"
.PP
merge\&.conflictstyle
.RS 4
Specify tha steez up in which conflicted hunks is freestyled up ta hustlin tree filez upon merge\&. Da default is "merge", which shows a
<<<<<<<
conflict marker, chizzlez made by one side, a
=======
marker, chizzlez made by tha other side, n' then a
>>>>>>>
marker\& fo' realz. An alternate style, "diff3", addz a
|||||||
marker n' tha original gangsta text before the
=======
marker\&.
.RE
.PP
merge\&.defaultToUpstream
.RS 4
If merge is called without any commit argument, merge tha upstream branches configured fo' tha current branch by rockin they last observed joints stored up in they remote\-trackin branches\&. Da jointz of the
branch\&.<current branch>\&.merge
that name tha branches all up in tha remote named by
branch\&.<current branch>\&.remote
are consulted, n' then they is mapped via
remote\&.<remote>\&.fetch
to they correspondin remote\-trackin branches, n' tha tipz of these trackin branches is merged\&.
.RE
.PP
merge\&.ff
.RS 4
By default, Git do not create a extra merge commit when mergin a cold-ass lil commit dat be a thugged-out descendant of tha current commit\&. Instead, tha tip of tha current branch is fast\-forwarded\&. When set to
false, dis variable  drops some lyrics ta Git ta create a extra merge commit up in such a cold-ass lil case (equivalent ta givin the
\-\-no\-ff
option from tha command line)\&. When set to
only, only such fast\-forward merges is allowed (equivalent ta givin the
\-\-ff\-only
option from tha command line)\&.
.RE
.PP
merge\&.log
.RS 4
In addizzle ta branch names, populate tha log message wit at most tha specified number of one\-line descriptions from tha actual commits dat is bein merged\&. Defaults ta false, n' legit be a synonym fo' 20\&.
.RE
.PP
merge\&.renameLimit
.RS 4
Da number of filez ta consider when struttin rename detection durin a merge; if not specified, defaults ta tha value of diff\&.renameLimit\&.
.RE
.PP
merge\&.renormalize
.RS 4
Tell Git dat canonical representation of filez up in tha repository has chizzled over time (e\&.g\&. earlier commits record text filez wit CRLF line endings yo, but recent ones use LF line endings)\&. In such a repository, Git can convert tha data recorded up in commits ta a cold-ass lil canonical form before struttin a merge ta reduce unnecessary conflicts\&. For mo' shiznit, peep section "Mergin branches wit differin checkin/checkout attributes" in
\fBgitattributes\fR(5)\&.
.RE
.PP
merge\&.stat
.RS 4
Whether ta print tha diffstat between ORIG_HEAD n' tha merge result all up in tha end of tha merge\&. True by default\&.
.RE
.PP
merge\&.tool
.RS 4
Controls which merge tool is used by
\fBgit-mergetool\fR(1)\&. Da list below shows tha valid built\-in joints\& fo' realz. Any other value is treated as a cold-ass lil custom merge tool n' requires dat a cold-ass lil correspondin mergetool\&.<tool>\&.cmd variable is defined\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
araxis
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
bc3
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
codecompare
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
deltawalker
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
diffmerge
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
diffuse
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ecmerge
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
emerge
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
gvimdiff
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
gvimdiff2
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
kdiff3
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
meld
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
opendiff
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
p4merge
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
tkdiff
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
tortoisemerge
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
vimdiff
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
vimdiff2
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
xxdiff
.RE
.RE
.PP
merge\&.verbosity
.RS 4
Controls tha amount of output shown by tha recursive merge game\&. Level 0 outputs not a god damn thang except a gangbangin' final error message if conflicts was detected\&. Level 1 outputs only conflicts, 2 outputs conflicts n' file chizzles\&. Level 5 n' above outputs debuggin shiznit\&. Da default is level 2\&. Can be overridden by the
\fIGIT_MERGE_VERBOSITY\fR
environment variable\&.
.RE
.PP
merge\&.<driver>\&.name
.RS 4
Defines a human\-readable name fo' a cold-ass lil custom low\-level merge driver\&. Right back up in yo muthafuckin ass. See
\fBgitattributes\fR(5)
for details\&.
.RE
.PP
merge\&.<driver>\&.driver
.RS 4
Defines tha command dat implements a cold-ass lil custom low\-level merge driver\&. Right back up in yo muthafuckin ass. See
\fBgitattributes\fR(5)
for details\&.
.RE
.PP
merge\&.<driver>\&.recursive
.RS 4
Names a low\-level merge driver ta be used when struttin a internal merge between common ancestors\&. Right back up in yo muthafuckin ass. See
\fBgitattributes\fR(5)
for details\&.
.RE
.PP
branch\&.<name>\&.mergeoptions
.RS 4
Sets default options fo' mergin tha fuck into branch <name>\&. Da syntax n' supported options is tha same as dem of
\fIgit merge\fR yo, but option joints containin whitespace charactas is currently not supported\&.
.RE
.SH "SEE ALSO"
.sp
\fBgit-fmt-merge-msg\fR(1), \fBgit-pull\fR(1), \fBgitattributes\fR(5), \fBgit-reset\fR(1), \fBgit-diff\fR(1), \fBgit-ls-files\fR(1), \fBgit-add\fR(1), \fBgit-rm\fR(1), \fBgit-mergetool\fR(1)
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
