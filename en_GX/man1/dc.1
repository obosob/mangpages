.\"
.\" dc.1 - tha *roff document processor source fo' tha dc manual
.\"
.\" This file is part of GNU dc.
.\" Copyright (C) 1994, 1997, 1998, 2000, 2001, 2005, 2006 Jacked Software Foundation, Inc.
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under tha termz of tha GNU General Public License as published by
.\" tha Jacked Software Foundation; either version 2 of tha License , or
.\" (at yo' option) any lata version.
.\"
.\" This program is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public License
.\" along wit dis program; peep tha file COPYING.  If not, write to:
.\"   Da Jacked Software Foundation, Inc.
.\"   51 Franklin Street, Fifth Floor
.\"   Boston, MA 02110-1301  USA
.\"
.TH dc 1 "2006-06-11" "GNU Project"
.ds dc \fIdc\fP
.ds Dc \fIdc\fP
.SH NAME
dc \- a arbitrary precision calculator
.SH SYNOPSIS
dc [-V] [--version] [-h] [--help]
   [-e scriptexpression] [--expression=scriptexpression]
   [-f scriptfile] [--file=scriptfile]
   [file ...]
.SH DESCRIPTION
.PP
\*(Dc be a reverse-polish desk calculator which supports
unlimited precision arithmetic.
It also allows you ta define n' call macros.
Normally \*(dc readz from tha standard input;
if any command arguments is given ta it, they is filenames,
and \*(dc readz n' executes tha contentz of tha filez before reading
from standard input.
All aiiight output is ta standard output;
all error output is ta standard error.
.PP
A reverse-polish calculator stores numbers on a stack.
Enterin a number pushes it on tha stack.
Arithmetic operations pop arguments off tha stack n' push tha thangs up in dis biatch.
.PP
To enta a number in
.IR dc ,
type tha digits
(usin upper case letters
.I A
through
.I F
as "digits" when working
with input bases pimped outa than ten),
with a optionizzle decimal point.
Exponential notation aint supported.
To enta a wack number,
begin tha number wit ``_''.
``-'' cannot be used fo' this,
as it aint nuthin but a funky-ass binary operator fo' subtraction instead.
To enta two numbers up in succession,
separate dem wit spaces or newlines.
These have no meanin as commands.
.SH OPTIONS
\*(Dc may be invoked wit tha followin command-line options:
.TP
.B -V
.TP
.B --version
Print up tha version of \*(dc dat is bein run n' a cold-ass lil copyright notice,
then exit.
.TP
.B -h
.TP
.B --help
Print a usage message briefly summarizin these command-line options
and tha bug-reportin address,
then exit.
.TP
.B -e \fIscript\fP
.TP
.BI --expression= script
Add tha commandz in
.I script
to tha set of commandz ta be run while processin tha input.
.TP
.B -f \fIscript-file\fP
.TP
.BI --file= script-file
Add tha commandz contained up in tha file
.I script-file
to tha set of commandz ta be run while processin tha input.
.PP
If any command-line parametas remain afta processin tha above,
these parametas is interpreted as tha namez of input filez to
be processed.
A file name of
.B -
refers ta tha standard input stream.
Da standard input will processed if no script filez or
expressions is specified.
.PD
.SH
Printin Commands
.TP
.B p
Prints tha value on tha top of tha stack,
without alterin tha stack.
A newline is printed afta tha value.
.TP
.B n
Prints tha value on tha top of tha stack, poppin it off,
and do not print a newline after.
.TP
.B P
Pops off tha value on top of tha stack.
If it it a string, it is simply printed without a trailin newline.
Otherwise it aint nuthin but a number, n' tha integer portion of its absolute
value is printed up as a "base (UCHAR_MAX+1)" byte stream.
Assumin dat (UCHAR_MAX+1) is 256
(as it is on most machines wit 8-bit bytes),
the sequence \fBKSK0k1/_1Ss [ls*]Sxd0>x
[256~Ssd0<x]dsxxsx[q]Sq[Lsd0>qaPlxx]
dsxxsx0sqLqsxLxLK+k\fP
could also accomplish dis function.
(Much of tha complexitizzle of tha above native-dc code is due
to tha ~ computin tha charactas backwards,
and tha desire ta ensure dat all registas wind up back
in they original gangsta states.)
.TP
.B f
Prints tha entire contentz of tha stack
.ig
and tha contentz of all of tha registers,
..
without alterin anything.
This be a phat command ta use if yo ass is lost or want
to figure up what tha fuck tha effect of some command has been.
.PD
.SH
Arithmetic
.TP
.B +
Pops two joints off tha stack, addz them,
and pushes tha result.
Da precision of tha result is determined only
by tha jointz of tha arguments,
and is enough ta be exact.
.TP
.B -
Pops two joints,
subtracts tha straight-up original gangsta one popped from tha second one popped,
and pushes tha result.
.TP
.B *
Pops two joints, multiplies them, n' pushes tha result.
Da number of fraction digits up in tha result dependz on
the current precision value n' tha number of fraction
digits up in tha two arguments.
.TP
.B /
Pops two joints,
divides tha second one popped from tha straight-up original gangsta one popped,
and pushes tha result.
Da number of fraction digits is specified by tha precision value.
.TP
.B %
Pops two joints,
computes tha remainder of tha division dat the
.B /
command would do,
and pushes dis shit.
Da value computed is tha same ol' dirty as dat computed by
the sequence \fBSd dld/ Ld*-\fP .
.TP
.B ~
Pops two joints,
divides tha second one popped from tha straight-up original gangsta one popped.
Da quotient is pushed first, n' tha remainder is pushed next.
Da number of fraction digits used up in tha division
is specified by tha precision value.
(Da sequence \fBSdSn lnld/ LnLd%\fP could also accomplish
this function, wit slightly different error checking.)
.TP
.B ^
Pops two joints n' exponentiates,
usin tha straight-up original gangsta value popped as tha exponent
and tha second popped as tha base.
Da fraction part of tha exponent is ignored.
Da precision value specifies tha number of fraction
digits up in tha result.
.TP
.B |
Pops three joints n' computes a modular exponentiation.
Da first value popped is used as tha reduction modulus;
this value must be a non-zero number,
and should be a integer.
Da second popped is used as tha exponent;
this value must be a non-negatizzle number,
and any fractionizzle part of dis exponent is ghon be ignored.
Da third value popped is tha base which gets exponentiated,
which should be a integer.
For lil' small-ass integers dis is like tha sequence \fBSm^Lm%\fP,
but, unlike \fB^\fP, dis command will work wit arbitrarily big-ass exponents.
.TP
.B v
Pops one value,
computes its square root,
and pushes dis shit.
Da precision value specifies tha number of fraction digits up in tha result.
.PP
Most arithmetic operations is affected by tha ``precision value'',
which you can set wit the
.B k
command.
Da default precision value is zero,
which means dat all arithmetic except for
addizzle n' subtraction produces integer thangs up in dis biatch.
.SH
Stack Control
.TP
.B c
Clears tha stack, renderin it empty.
.TP
.B d
Duplicates tha value on tha top of tha stack,
pushin another copy of dat shit.
Thus, ``4d*p'' computes 4 squared n' prints dat shit.
.TP
.B r
Reverses tha order of (swaps) tha top two joints on tha stack.
(This can also be accomplished wit tha sequence \fBSaSbLaLb\fP.)
.SH
Registers
.PP
\*(Dc serves up at least 256 memory registers,
each named by a single character.
Yo ass can store a number or a strang up in a regista n' retrieve it later.
.TP
.BI s r
Pop tha value off tha top of tha stack n' store
it tha fuck into register
.IR r .
.TP
.BI l r
Copy tha value up in register
.I r
and push it onto tha stack.
This do not alta tha contents of
.IR r .
.PP
Each regista also gotz nuff its own stack.
Da current regista value is tha top of tha registerz stack.
.TP
.BI S r
Pop tha value off tha top of tha (main) stack and
push it onto tha stack of register
.IR r .
Da previous value of tha regista becomes inaccessible.
.TP
.BI L r
Pop tha value off tha top of register
.IR r 's
stack n' push it onto tha main stack.
Da previous value
in register
.IR r 's
stack, if any,
is now accessible via the
.BI l r
command.
.ig
.PP
The
.B f
command prints a list of all registas dat have contents stored up in them,
together wit they contents.
Only tha current contentz of each register
(the top of its stack)
is printed.
..
.SH
Parameters
.PP
\*(Dc has three parametas dat control its operation:
the precision, tha input radix, n' tha output radix.
Da precision specifies tha number
of fraction digits ta keep up in tha result of most arithmetic operations.
Da input radix controls tha interpretation of numbers typed in;
all numbers typed up in use dis radix.
Da output radix is used fo' printin numbers.
.PP
Da input n' output radices is separate parameters;
you can make dem unequal,
which can be useful or confusing.
Da input radix must be between 2 n' 16 inclusive.
Da output radix must be at least 2.
Da precision must be zero or pimped outer.
Da precision be always measured up in decimal digits,
regardless of tha current input or output radix.
.TP
.B i
Pops tha value off tha top of tha stack
and uses it ta set tha input radix.
.TP
.B o
Pops tha value off tha top of tha stack
and uses it ta set tha output radix.
.TP
.B k
Pops tha value off tha top of tha stack
and uses it ta set tha precision.
.TP
.B I
Pushes tha current input radix on tha stack.
.TP
.B O
Pushes tha current output radix on tha stack.
.TP
.B K
Pushes tha current precision on tha stack.
.SH
Strings
.PP
\*(Dc has a limited mobilitizzle ta operate on strings
as well as on numbers;
the only thangs you can do wit strings are
print dem n' execute dem as macros
(which means dat tha contentz of tha strang is processed as
\*(dc commands).
All registas n' tha stack can hold strings,
and \*(dc always knows whether any given object be a strang or a number.
Some commandz like fuckin arithmetic operations demand numbers
as arguments n' print errors if given strings.
Other commandz can accept either a number or a string;
for example, the
.B p
command can accept either n' prints tha object
accordin ta its type.
.TP
.BI [ charactas ]
Makes a strang containing
.I characters
(contained between balanced
.B [
and
.B ]
characters),
and pushes it on tha stack.
For example,
.B [foo]P
prints tha characters
.B foo
(with no newline).
.TP
.B a
Da top-of-stack is popped.
If dat shiznit was a number, then tha low-order byte of dis number
is converted tha fuck into a strang n' pushed onto tha stack.
Otherwise tha top-of-stack was a string,
and tha straight-up original gangsta characta of dat strang is pushed back.
.TP
.B x
Pops a value off tha stack n' executes it as a macro.
Normally it should be a string;
if it aint nuthin but a number,
it is simply pushed back onto tha stack.
For example,
.B [1p]x
executes tha macro
.B 1p
which pushes
.B 1
on tha stack n' prints
.B 1
on a separate line.
.PP
Macros is most often stored up in registers;
.B [1p]sa
stores a macro ta print
.B 1
into register
.BR a ,
and
.B lax
invokes dis macro.
.TP
.BI > r
Pops two joints off tha stack n' compares them
assumin they is numbers,
executin tha contentz of register
.I r
as a macro if tha original gangsta top-of-stack
is pimped outer.
Thus,
.B 1 2>a
will invoke register
.BR a 's
contents and
.B 2 1>a
will not.
.TP
.BI !> r
Similar but invokes tha macro if tha original gangsta top-of-stack is
not pimped outa than (less than or equal to) what tha fuck was tha second-to-top.
.TP
.BI < r
Similar but invokes tha macro if tha original gangsta top-of-stack is less.
.TP
.BI !< r
Similar but invokes tha macro if tha original gangsta top-of-stack is
not less than (greata than or equal to) what tha fuck was tha second-to-top.
.TP
.BI = r
Similar but invokes tha macro if tha two numbers popped is equal.
.TP
.BI != r
Similar but invokes tha macro if tha two numbers popped is not equal.
.ig
This can also be validly used ta compare two strings fo' equality.
..
.TP
.B ?
Readz a line from tha terminal n' executes dat shit.
This command allows a macro ta request input from tha user.
.TP
.B q
exits from a macro n' also from tha macro which invoked dat shit.
If called from tha top level,
or from a macro which was called directly from tha top level,
the
.B q
command will cause \*(dc ta exit.
.TP
.B Q
Pops a value off tha stack n' uses it as a cold-ass lil count
of levelz of macro execution ta be exited.
Thus,
.B 3Q
exits three levels.
The
.B Q
command aint NEVER gonna cause \*(dc ta exit.
.SH
Status Inquiry
.TP
.B Z
Pops a value off tha stack,
calculates tha number of digits it has
(or number of characters, if it aint nuthin but a string)
and pushes dat number.
Da digit count fo' a number do
.I not
include any leadin zeros,
even if dem step tha fuck up ta tha right of tha radix point.
.TP
.B X
Pops a value off tha stack,
calculates tha number of fraction digits it has,
and pushes dat number.
For a string,
the value pushed is
.\" -1.
0.
.TP
.B z
Pushes tha current stack depth:
the number of objects on tha stack before tha execution of the
.B z
command.
.SH
Miscellaneous
.TP
.B !
Will run tha rest of tha line as a system command.
Note dat parsin of tha !<, !=, n' !> commandz take precedence,
so if you wanna run a cold-ass lil command startin wit <, =, or > you will
need ta add a space afta tha !.
.TP
.B #
Will interpret tha rest of tha line as a cold-ass lil comment.
.TP
.BI : r
Will pop tha top two joints off of tha stack.
Da oldschool second-to-top value is ghon be stored up in tha array
.IR r ,
indexed by tha oldschool top-of-stack value.
.TP
.BI ; r
Pops tha top-of-stack n' uses it as a index into
the array
.IR r .
Da selected value is then pushed onto tha stack.
.P
Note dat each stacked instizzle of a regista has its own
array associated wit dat shit.
Thus \fB1 0:a 0Sa 2 0:a La 0;ap\fP will print 1,
because tha 2 was stored up in a instizzle of 0:a that
was lata popped.
.SH
BUGS
.PP
Email bug reports to
.BR bug-dc@gnu.org .
