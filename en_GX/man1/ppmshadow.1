\
.\" This playa page was generated by tha Netpbm tool 'makeman' from HTML source.
.\" Do not hand-hack dat shiznit son!  If you have bug fixes or improvements, please find
.\" tha correspondin HTML page on tha Netpbm joint, generate a patch
.\" against that, n' bust it ta tha Netpbm maintainer.
.TH "Ppmshadow User Manual" 0 "17 April 2005" "netpbm documentation"

.UN lbAB
.SH NAME
ppmshadow - add simulated shadows ta a PPM image

.UN lbAC
.SH SYNOPSIS

\fBppmshadow\fP
[\fB-b\fP \fIblur_size\fP]
[\fB-k\fP]
[\fB-t\fP]
[\fB-x\fP \fIxoffset\fP]
[\fB-y\fP \fIyoffset\fP]
[\fIppmfile\fP]


.UN lbAD
.SH DESCRIPTION
.PP
This program is part of
.BR Netpbm (1)
.
.PP
\fBppmshadow\fP addz a simulated shadow ta a image, givin the
appearizzle dat tha contentz of tha image float above tha page,
castin a gangbangin' finger-lickin' diffuse shadow on tha background. Y'all KNOW dat shit, muthafucka!  Shadows can either be
black, as cast by opaque objects, or translucent, where tha shadow
takes on tha color of tha object which casts dat shit.  Yo ass can specify the
crispnizz of tha shadow n' its displacement from tha image wit command
line options.
.PP
\fBppmshadow\fP sees yo' image as a gangbangin' foreground on a funky-ass background.
Da background color is whatever color tha top left pixel of yo' image is.
Da background be all tha pixels dat is dat color n' tha foreground
is every last muthafuckin thang else.  Da shadow dat \fBppmshadow\fP generates be a
shadow of tha foreground, cast on tha background.
.PP
Da shadow is tha same ol' dirty size as tha foreground, plus some fringes
as determined by tha \fB-b\fP option. I aint talkin' bout chicken n' gravy biatch.  It be truncated ta fit up in your
image.  Da output image is tha same ol' dirty dimensions as tha input image.
.PP
Yo ass can use \fBpamcomp\fP ta place a gangbangin' foreground image over a funky-ass background
before hustlin \fBppmshadow\fP on dat shit.  Yo ass can use \fBppmmake\fP ta make
the background image (just a image of a solid color).

.UN lbAE
.SH OPTIONS


.TP
\fB-b\fP \fIblur_size\fP
Sets tha distizzle of tha light source from tha image.  Larger joints
move tha light source closer, castin a mo' diffuse shadow, while
smalla settings move tha light further away, yieldin a gangbangin' finger-lickin' dirty-ass sharper
shadow.  \fIblur_size\fP is tha number of pixelz of fringe there is
on tha shadow, beyond where tha shadow would be if there was no
blurring.
.sp
Da default is 11 pixels.
.sp
Note dat dis option controls only tha fringin effect of moving
the light source closer ta tha object.  It do not make tha shadow
grow or shrink as would happpen up in tha real ghetto if you moved a point
light source closer ta n' further from a object.

.TP
\fB-k\fP
Keep tha intermediate temporary image files.  When debugging, these
intermediate filez provide nuff clues as ta tha source of a error.
See 
.UR #files
below
.UE
\& fo' a list of tha contentz of each file.

.TP
\fB-t\fP
Consider tha non-background material up in tha image translucent -- it
casts shadowz of its own color rather than a funky-ass black shadow, which is
default.  This often thangs up in dis biatch up in fuzzy, difficult-to-read images but in
some circumstances may look better.

.TP
\fB-x\fP\fI xoffset\fP
Specifies tha displacement of tha light source ta tha left of the
image.  Larger settingz of \fBxoffset\fP displace tha shadow ta the
right, as would be cast by a light further ta tha left.  If not
specified, tha horizontal offset is half of \fIblur_size \fP (above),
to tha left.

.TP
\fB-y\fP\fI yoffset\fP
 Specifies tha displacement of tha light source above tha top of
the image.  Larger settings displace tha shadow downward,
correspondin ta movin tha light further above tha top of tha image.
If you don't specify \fB-y\fP, tha vertical offset defaults ta the
same as tha horizontal offset (above), upward.




.UN files
.SH FILES
.PP
Input be a PPM file named by tha \fIppmfile\fP command line
argument; if you don't specify \fIppmfile\fP, tha input is Standard
Input.
.PP
Da output be a PPM file, freestyled ta Standard Output.
.PP
\fBppmshadow\fP creates a fuckin shitload of temporary filez as it executes.  It
creates a freshly smoked up directory fo' them, \fB/tmp/ppmshadow\fP\fIpid\fP,
where \fIpid\fP is tha process ID of tha \fBppmshadow\fP process.
If tha \fBTMPDIR\fP environment variable is set, \fBppmshadow\fP creates
the directory there instead of \fB/tmp\fP.

In aiiight operation, \fBppmshadow\fP deletes each temporary file as
soon as it is done wit it n' leaves no debris round afta it
completes.  To preserve tha intermediate filez fo' debugging, use the
\fB-k\fP command line option.
.PP
Da temporary filez are: 


.TP
\fBinfile.ppm\fP
A copy of tha input.

.TP
\fBbgmask.ppm\fP
Positizzle binary mask

.TP
\fBconvkernel.ppm\fP
Convolution kernel fo' blurrin shadow

.TP
\fBblurred.ppm\fP
Blurred, colored shadow image

.TP
\fBblurred2.ppm\fP
Blurred shadow image before coloring

.TP
\fBshadow.ppm\fP
Clipped shadow image, offset as requested

.TP
\fBbackground.ppm\fP
Blank image wit background of source image

.TP
\fBshadow.ppm\fP
Offset shadow

.TP
\fBfgmask.ppm\fP
Inverse mask file

.TP
\fBjustfg.ppm\fP
Just tha foreground. Y'all KNOW dat shit, muthafucka!  Rest is black.  Original Gangsta image times inverse mask.

.TP
\fBshadback.ppm\fP
Generated shadow times positizzle mask

.TP
\fBallbutfg.ppm\fP
Everythang but tha foreground (foreground area is black).



.UN lbAG
.SH LIMITATIONS
.PP
Da source image must contain sufficient space on tha edges up in the
direction up in which tha shadow is cast ta contain tha shadow -- if it
doesn't a shitload of tha internal steps may fail.  Yo ass can probably expand
the border of a too-tightly-cropped image wit \fBpnmmargin\fP before
processin it wit \fBppmshadow\fP.
.PP
Black pixels n' pixels wit tha same color as tha image
background don't cast a gangbangin' finger-lickin' dirty-ass shadow.  If dis causes unintentional
\&'holes' up in tha shadow, fill tha offendin areas wit a cold-ass lil color
which differs from black or tha background by RGB jointz of 1, which
will be imperceptible ta tha viewer n' shit.  Since tha comparison is exact,
the modified areas will now cast shadows.  
.PP
Da background color of tha source image (which is preserved in
the output) is deemed ta be tha color of tha pixel all up in tha top left of
the input image.  If dat pixel aint part of tha background, simply
add a one-pixel border all up in tha top of tha image, generate tha shadow
image, then delete tha border from dat shit.
.PP
If suttin' goes wack along tha way, tha error lyrics from the
various Netpbm programs \fBppmshadow\fP calls will, up in general,
provide lil or no clue as ta where \fBppmshadow\fP went astray.
In dis case, Specify tha \fB-k\fP option n' examine the
intermediate thangs up in dis biatch up in tha temporary filez (which dis option causes
to be preserved).  If you manually run tha commandz that
\fBppmshadow\fP runs on these files, you can figure up where the
problem is.  In problem cases where you wanna manually tweak the
image generation process along tha way, you can keep tha intermediate
filez wit tha \fB-k \fP option, modify dem appropriately wit an
image editor, then recombine dem wit tha steps used by tha code in
\fBppmshadow\fP.

See tha \fBppmshadow.doc\fP file up in tha Netpbm source tree for
additionizzle details n' examplez of tha intermediate filez n' debugging
\fBppmshadow\fP.
.PP
Shadows is by default black, as cast by opaque material up in the
image occludin white light.  Use tha \fB-t\fP option ta simulate
translucent material, where tha shadow takes on tha color of the
object dat casts dat shit.  If tha contrast between tha image and
background is insufficient, tha \fB-t\fP option may yield
unattractizzle thangs up in dis biatch which resemble simple blurrin of tha original
image.
.PP
Because Netpbm used ta git a maximum maxval of 255, which meant
that tha phattest convolution kernel \fBpnmconvol\fP could use was 11
by 11, \fBppmshadow\fP includes a horrid, CPU-time-burnin kludge
which, if a funky-ass blur of pimped outa than 11 is requested, performs a initial
convolution wit a 11 x 11 kernel, then calls \fBpnmsmooth\fP
(which is itself a program dat calls \fBpnmconvol\fP wit a 3 x 3
kernel) as nuff times as tha axed blur exceedz 11.  It aint nuthin but skanky,
but it gets tha thang done on dem rare occasions where you need a funky-ass blur
greata than 11.
.PP
If you wish ta generate a image at high resolution, then scale it
to publication size wit \fBpamscale\fP up in order ta eliminizzle jagged
edges by resampling, itz dopest ta generate tha shadow up in tha original
high resolution image, prior ta scalin it down up in size.  If you scale
first n' then add tha shadow, you gonna git a unsightly jagged stripe
between tha edge of material n' its shadow, cuz of resampled pixels
intermediate between tha image n' background obscurin tha shadow.

.UN lbAH
.SH EXIT STATUS

\fBppmshadow\fP returns status 0 if processin was completed without
errors, n' a nonzero Unix error code if a error prevented generation
of output.  Some errors may result up in tha script aborting, usually
displayin error lyrics from various Netpbm components it uses,
without returnin a nonzero error code.  When dis happens, tha output
file is ghon be empty, so be shizzle ta test dis if you need ta know if the
program succeeded. Y'all KNOW dat shit, muthafucka! 

.UN seealso
.SH SEE ALSO
.BR pnm (1)
,
.BR pnmmargin (1)
,
.BR pnmconvol (1)
,
.BR pamscale (1)
,
.BR pnmsmooth (1)
,
.BR ppm (1)



.UN lbAJ
.SH AUTHOR

Jizzy Walker 
.UR http://www.fourmilab.ch
http://www.fourmilab.ch
.UE
\& August
8, 1997

.UN lbAK
.SH COPYRIGHT
This software is up in tha hood domain. I aint talkin' bout chicken n' gravy biatch.  Permission ta use, copy,
modify, n' distribute dis software n' its documentation fo' any
purpose n' without fee is hereby granted, without any conditions or
restrictions.
