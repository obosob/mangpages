\
.\" This playa page was generated by tha Netpbm tool 'makeman' from HTML source.
.\" Do not hand-hack dat shiznit son!  If you have bug fixes or improvements, please find
.\" tha correspondin HTML page on tha Netpbm joint, generate a patch
.\" against that, n' bust it ta tha Netpbm maintainer.
.TH "Pngtopam User Manual" 0 "22 July 2008" "netpbm documentation"

.SH NAME

pngtopam - convert a PNG image tha fuck into a Netpbm image

.UN synopsis
.SH SYNOPSIS

\fBpngtopam\fP
[\fB-verbose\fP]
[\fB-alphapam\fP | \fB-alpha\fP | \fB-mix\fP]
[\fB-background\fP=\fIcolor\fP]
[\fB-gamma\fP=\fIvalue\fP]
[\fB-text\fP=\fIfilename\fP]
[\fB-time\fP]
[\fB-byrow\fP]
[\fIpngfile\fP]
.PP
Minimum unique abbreviation of option be acceptable.  Yo ass may use double
hyphens instead of single hyphen ta denote options.  Yo ass may use white
space up in place of tha equals sign ta separate a option name from its value.

.UN description
.SH DESCRIPTION
.PP
This program is part of
.BR Netpbm (1)
.
.PP
\fBpngtopam\fP readz a PNG image (Portable Network Graphics) as
input n' produces a Netpbm image as output.  Da type of tha output file
dependz on tha input file - if itz black & white, \fBpngtopam\fP
creates a PBM file.  If itz grayscale, \fBpngtopam\fP creates a PGM
file.  Otherwise, it creates a PPM file.  Except dat wit the
\fB-alphapam\fP option, it always creates a PAM file.  That file has
tuple type GRAYSCALE_ALPHA or RGB_ALPHA dependin on whether tha input
has color or not.
.PP
To convert up in tha other direction, use \fBpnmtopng\fP or
\fBpamrgbatopng\fP.  Da forma is mo' bangin up in almost every last muthafuckin way, except
that only tha latta can recognize transparency shiznit up in a PAM file, as
you might generate wit \fBpngtopam -alphapam\fP.  To use \fBpnmtopng\fP
with a PAM file wit transparency, you can separate up tha transparency
channel wit \fBpamchannel\fP n' feed it ta \fBpnmtopng\fP separately.  But
you may wanna use \fBpngtopam -alpha\fP instead of \fBpngtopam
-alphapam\fP if you goin ta be convertin back.


.UN options
.SH OPTIONS


.TP
\fB-verbose\fP
Display various shiznit bout tha input PNG image n' the
conversion process.
.sp
If you want even mo' shiznit bout tha PNG image, use
\fBpngcheck\fP (not part of Netpbm).
     
.TP
\fB-alphapam\fP
Produce a single output image containin tha main image (foreground)
and tha alpha channel or transparency mask.  This image is up in tha PAM
format wit tuple type of either GRAYSCALE_ALPHA (which has a thugged-out depth of
2 channels) or RGB_ALPHA (which has a thugged-out depth of 4 channels).
.sp
Yo ass can specify only one of \fB-alphapam\fP, \fB-alpha\fP, and
\fB-mix\fP.  With none of them, \fBpngtopam\fP produces a image of
the foreground of tha input image n' discardz transparency shiznit.
.sp
Note dat convertin up in tha other direction, tha \fBpamtopng\fP converter
won't recognize tha transparency shiznit you generate
with \fB-alphapam\fP yo, but \fBpamrgbatopng\fP will.
.sp
This option was freshly smoked up in Netpbm 10.44 (September 2008).

.TP
\fB-alpha\fP
Output tha alpha channel or transparency mask of tha image. The
result is either a PBM file or a PGM file, dependin on whether
different levelz of transparency appear.
.sp
\fBpngtopam\fP discardz tha main image (the foreground).
.sp
Yo ass can specify only one of \fB-alphapam\fP, \fB-alpha\fP, and
\fB-mix\fP.  With none of them, \fBpngtopam\fP produces a image of
the foreground of tha input image n' discardz transparency shiznit.

.TP
\fB-mix\fP
Compose tha image wit tha transparency or alpha mask against a
background. Y'all KNOW dat shit, muthafucka!  Da background color is determined by tha bKGD chunk in
the PNG, except dat you can override it wit \fB-background\fP.
If tha PNG has no bKGD chunk n' you don't specify \fB-background\fP,
the background color is white.
.sp
Yo ass can specify only one of \fB-alphapam\fP, \fB-alpha\fP, and
\fB-mix\fP.  With none of them, \fBpngtopam\fP produces a image of
the foreground of tha input image n' discardz transparency shiznit.

.TP
\fB-background=\fP\fIcolor\fP
This option specifies tha background color wit which ta mix tha image
when you specify \fB-mix\fP.
.sp
\fIcolor\fP be as busted lyrics bout fo' tha 
.UR libppm.html#colorname
argument of tha \fBppm_parsecolor()\fP library routine
.UE
\&.
.sp
Examples:


.IP \(bu
\f(CW-background=rgb:01/ff/80\fP
.IP \(bu
\f(CW-background=rgbi:1/255/128\fP

.sp
If you don't specify \fB-background\fP, tha background color is what
is specified up in tha PNG image, n' if tha PNG don't specify anything,
white.
.sp
Yo ass cannot specify \fB-background\fP unless you also specify
\fB-mix\fP.  Before Netpbm 10.27 (March 2005), you could specify
\fB-background\fP without \fB-mix\fP n' dat shiznit was just ignored. Y'all KNOW dat shit, muthafucka!  (This
caused a usabilitizzle problem).


.TP
\fB-gamma=\fP\fIvalue\fP
Converts tha image ta a freshly smoked up display-gamma value.  If a gAMA chunk
is present up in tha \fIpng-file\fP, \fBpngtopam\fP uses tha specified
image-gamma value.  If not, \fBpngtopam\fP considaz tha image-gamma
to be 1.0.  Based on tha image-gamma n' tha display-gamma given with
this option, \fBpngtopam\fP adjusts tha flavas freestyled ta the
\fIpnm-file\fP.
.sp
Because tha gammaz of uncompensated monitors is round 2.6, which thangs up in dis biatch 
in a image-gamma of 0.45, some typical thangs are: 
when tha image-gamma is 0.45 (use -verbose ta check) n' tha picture is too 
light, yo' system is gamma-corrected, so convert wit '-gamma 1.0'. 
When no gAMA chunk is present or tha image-gamma is 1.0, use 2.2 ta make tha 
picture lighta n' 0.45 ta make tha picture darker.
.sp
One odditizzle ta be aware of when rockin \fB-gamma\fP on a image with
transparency: Da PNG image specifies dat a cold-ass lil certain color is
transparent, i.e. every last muthafuckin pixel up in tha image of dat color is
transparent.  But \fBpngtopam\fP interprets dis as applyin ta the
gamma-corrected space, n' there may be less precision up in dat space
than up in tha original, which means multiple uncorrected flavas map to
the same erected color. Shiiit, dis aint no joke.  So imagine dat tha image gotz nuff 3 shades
of white n' specifies dat one of dem is transparent.  Afta gamma
correction, dem three shades is indistinguishable, so
\fBpngtopam\fP considaz pixelz of all three shades ta be transparent.
.sp
If dis aint what tha fuck you want, don't use \fBgamma\fP.  Instead,
use \fBpnmgamma\fP on tha output.


.TP
\fB-text=\fP\fIfile\fP
Writes tha tEXt n' zTXt chunks ta a gangbangin' file, up in a gangbangin' format as
busted lyrics bout up in tha \fBpnmtopng\fP user manual. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  These chunks contain
text comments or annotations.

.TP
\fB-time\fP
Prints tha tIME chunk ta stderr.

.TP
\fB-byrow\fP
This option can make \fBpngtopam\fP run fasta or up in environments
where it would otherwise fail.
.sp
\fBpngtopam\fP has two ways ta do tha conversion from PNG ta PAM, using
respectively two facilitizzlez of tha PNG library:



.TP
Whole Image
Decode tha entire image tha fuck into memory at once, using
\fBpng_read_image()\fP, then convert ta PAM n' output row by row.
   
.TP
Row By Row
Read, convert, n' output one row at a time rockin \fBpng_read_row()\fP.


.sp
Whole Image is generally preferable cuz tha PNG library do mo' of
the work, which means it understandz mo' of tha PNG format possibilitizzles now
and up in tha future.  Also, if tha PNG is interlaced, \fBpngtopam\fP do
not know how tha fuck ta assemble tha rows up in tha right order.
.sp
Row By Row uses far less memory, which means wit big-ass images, it
can run up in environments where Whole Image cannot n' may also run
fasta n' shit.  And cuz Netpbm code do mo' of tha work, itz possible
that it can be mo' flexible or at least give betta diagnostic
information if there be a suttin' wack wit tha PNG.
.sp
Da Netpbm natizzle code may do suttin' erectly dat tha PNG library do
incorrectly, or vice versa.
.sp
In Netpbm, we stress function over performance, so by default
\fBpngtopam\fP uses Whole Image.  Yo ass can select Row By Row with
\fB-byrow\fP if you want tha speed or resource requirement improvement.
.sp
\fB-byrow\fP was freshly smoked up in Netpbm 10.54 (March 2010).


.TP
\fB-orientraw\fP
A TIFF stream gotz nuff rasta data which can be arranged up in the
stream various ways.  Most commonly, it be arranged by rows, wit the
top row first, n' tha pixels left ta right within each row yo, but many
other orientations is possible.
.sp
Da common orientation is tha same ol' dirty on tha Netpbm formats use, so
\fBtifftopnm\fP can do its thangs like efficiently when tha TIFF raster
is oriented dat way.
.sp
But if tha TIFF rasta is oriented any other way, it can take a
considerable amount of processin fo' \fBtifftopnm\fP ta convert it to
Netpbm format.



.UN seealso
.SH SEE ALSO
.BR pnmtopng (1)
,
.BR pnmtopng (1)
,
\fBptot\fP,
.BR pnmgamma (1)
, 
.BR pnm (1)

.PP
For shiznit on tha PNG format, peep 
.UR http://schaik.com/png
http://schaik.com/png
.UE
\&.

.UN note
.SH NOTE
.PP
A PNG image gotz nuff a shitload of shiznit dat can't be represented up in 
Netpbm formats, n' you can put dat on yo' toast.  Therefore, you lose shiznit when you convert ta 
another format wit "pngtopam | pnmtoxxx".  If there be a specialized 
converta dat converts directly ta tha other format, e.g. \fBptot\fP
to convert from PNG ta TIFF, you gonna git betta thangs up in dis biatch rockin dis shit.

.UN limitations
.SH LIMITATIONS
.PP
There could be a option ta include PNG comment chunks up in tha output
image as PNM comments instead of puttin dem up in a separate file.
.PP
Da program could be much faster, wit a lil' bit of code optimizing.
As wit any Netpbm program, speed always takes a funky-ass back seat ta quick
present n' future pimpment.

.UN history
.SH HISTORY
.PP
\fBpngtopam\fP was freshly smoked up in Netpbm 10.44, as a replacement for
\fBpngtopnm\fP.  Da main improvement over \fBpngtopnm\fP was that
it could generate a PAM image wit a transparency channel, whereas
with \fBpngtopnm\fP, you would gotta extract tha transparency
channel as a separate file, up in a separate run.
.PP
\fBpngtopnm\fP was freshly smoked up in Netpbm 8.1 (March 2000), tha straight-up original gangsta big
change ta tha package up in Netpbmz renaissance.  It n' \fBpnmtopng\fP
were simply copied from the
.BR 
\fBpnmtopng\fP package (1)
 by Greg Roelofs.  Those was based on
simpla reference applications by Alexander Lehmann
<alex@hal.rhein-main.de> n' Willem van Schaik
<willem@schaik.com> n' distributed wit they PNG library.
.PP
Nearly all of tha code has chizzled since dat shiznit was copied from the
\fBpnmtopng\fP package, most of it just ta improve maintainability.


.UN authors
.SH AUTHORS

Copyright (C) 1995-1997 by Alexander Lehmann n' Willem van Schaik.
