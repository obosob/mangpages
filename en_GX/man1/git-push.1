'\" t
.\"     Title: git-push
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-PUSH" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-push \- Update remote refs along wit associated objects
.SH "SYNOPSIS"
.sp
.nf
\fIgit push\fR [\-\-all | \-\-mirror | \-\-tags] [\-\-follow\-tags] [\-n | \-\-dry\-run] [\-\-receive\-pack=<git\-receive\-pack>]
           [\-\-repo=<repository>] [\-f | \-\-force] [\-\-prune] [\-v | \-\-verbose] [\-u | \-\-set\-upstream]
           [\-\-force\-with\-lease[=<refname>[:<expect>]]]
           [\-\-no\-verify] [<repository> [<refspec>\&...]]
.fi
.sp
.SH "DESCRIPTION"
.sp
Updates remote refs rockin local refs, while bustin  objects necessary ta complete tha given refs\&.
.sp
Yo ass can make bangin-ass thangs happen ta a repository every last muthafuckin time you push tha fuck into it, by settin up \fIhooks\fR there\&. Right back up in yo muthafuckin ass. See documentation fo' \fBgit-receive-pack\fR(1)\&.
.sp
When tha command line do not specify where ta push wit tha <repository> argument, branch\&.*\&.remote configuration fo' tha current branch is consulted ta determine where ta push\&. If tha configuration is missing, it defaults ta \fIorigin\fR\&.
.sp
When tha command line do not specify what tha fuck ta push wit <refspec>\&.\&.\&. arguments or \-\-all, \-\-mirror, \-\-tags options, tha command findz tha default <refspec> by consultin remote\&.*\&.push configuration, n' if it aint found, honors push\&.default configuration ta decizzle what tha fuck ta push (See gitlink:git\-config[1] fo' tha meanin of push\&.default)\&.
.SH "OPTIONS"
.PP
<repository>
.RS 4
Da "remote" repository dat is destination of a push operation\&. This parameta can be either a URL (see tha section
GIT URLS
below) or tha name of a remote (see tha section
REMOTES
below)\&.
.RE
.PP
<refspec>\&...
.RS 4
Specify what tha fuck destination ref ta update wit what tha fuck source object\&. Da format of a <refspec> parameta be a optionizzle plus
+, followed by tha source object <src>, followed by a cold-ass lil colon
:, followed by tha destination ref <dst>\&.
.sp
Da <src> is often tha name of tha branch you would wanna push yo, but it can be any arbitrary "SHA\-1 expression", such as
master~4
or
HEAD
(see
\fBgitrevisions\fR(7))\&.
.sp
Da <dst>  drops some lyrics ta which ref on tha remote side is updated wit dis push\& fo' realz. Arbitrary expressions cannot be used here, a actual ref must be named\&. If
git push [<repository>]
without any
<refspec>
argument is set ta update some ref all up in tha destination with
<src>
with
remote\&.<repository>\&.push
configuration variable,
:<dst>
part can be omitted\-\-\-such a push will update a ref that
<src>
normally thugged-out shiznit without any
<refspec>
on tha command line\&. Otherwise, missing
:<dst>
means ta update tha same ref as the
<src>\&.
.sp
Da object referenced by <src> is used ta update tha <dst> reference on tha remote side\&. By default dis is only allowed if <dst> aint a tag (annotated or lightweight), n' then only if it can fast\-forward <dst>\&. By havin tha optionizzle leading
+, you can tell Git ta update tha <dst> ref even if it aint allowed by default (e\&.g\&., it aint a gangbangin' fast\-forward\&.) This do
\fBnot\fR
attempt ta merge <src> tha fuck into <dst>\&. Right back up in yo muthafuckin ass. See EXAMPLES below fo' details\&.
.sp
tag <tag>
means tha same ol' dirty as
refs/tags/<tag>:refs/tags/<tag>\&.
.sp
Pushin a empty <src> allows you ta delete tha <dst> ref from tha remote repository\&.
.sp
Da special refspec
:
(or
+:
to allow non\-fast\-forward thugged-out shit) directs Git ta push "matching" branches: fo' every last muthafuckin branch dat exists on tha local side, tha remote side is updated if a funky-ass branch of tha same name already exists on tha remote side\&.
.RE
.PP
\-\-all
.RS 4
Instead of namin each ref ta push, specifies dat all refs under
refs/heads/
be pushed\&.
.RE
.PP
\-\-prune
.RS 4
Remove remote branches dat don\(cqt gotz a local counterpart\&. For example a remote branch
tmp
will be removed if a local branch wit tha same name don\(cqt exist any more\&. This also respects refspecs, e\&.g\&.
git push \-\-prune remote refs/heads/*:refs/tmp/*
would make shizzle dat remote
refs/tmp/foo
will be removed if
refs/heads/foo
doesn\(cqt exist\&.
.RE
.PP
\-\-mirror
.RS 4
Instead of namin each ref ta push, specifies dat all refs under
refs/
(which includes but aint limited to
refs/heads/,
refs/remotes/, and
refs/tags/) be mirrored ta tha remote repository\&. Newly pimped local refs is ghon be pushed ta tha remote end, locally updated refs is ghon be force updated on tha remote end, n' deleted refs is ghon be removed from tha remote end\&. This is tha default if tha configuration option
remote\&.<remote>\&.mirror
is set\&.
.RE
.PP
\-n, \-\-dry\-run
.RS 4
Do every last muthafuckin thang except straight-up bust tha thugged-out shit\&.
.RE
.PP
\-\-porcelain
.RS 4
Produce machine\-readable output\&. Da output status line fo' each ref is ghon be tab\-separated n' busted ta stdout instead of stderr\&. Da full symbolic namez of tha refs is ghon be given\&.
.RE
.PP
\-\-delete
.RS 4
All listed refs is deleted from tha remote repository\&. This is tha same ol' dirty as prefixin all refs wit a cold-ass lil colon\&.
.RE
.PP
\-\-tags
.RS 4
All refs under
refs/tags
are pushed, up in addizzle ta refspecs explicitly listed on tha command line\&.
.RE
.PP
\-\-follow\-tags
.RS 4
Push all tha refs dat would be pushed without dis option, n' also push annotated tags in
refs/tags
that is missin from tha remote but is pointin at commit\-ish dat is reachable from tha refs bein pushed\&.
.RE
.PP
\-\-receive\-pack=<git\-receive\-pack>, \-\-exec=<git\-receive\-pack>
.RS 4
Path ta the
\fIgit\-receive\-pack\fR
program on tha remote end\&. Right back up in yo muthafuckin ass. Sometimes useful when pushin ta a remote repository over ssh, n' you aint gots tha program up in a gangbangin' finger-lickin' directory on tha default $PATH\&.
.RE
.PP
\-\-[no\-]force\-with\-lease, \-\-force\-with\-lease=<refname>, \-\-force\-with\-lease=<refname>:<expect>
.RS 4
Usually, "git push" refuses ta update a remote ref dat aint a ancestor of tha local ref used ta overwrite it\&.
.sp
This option bypasses tha check yo, but instead requires dat tha current value of tha ref ta be tha expected value\&. "git push" fails otherwise\&.
.sp
Imagine dat you gotta rebase what tha fuck you have already published\&. Yo ass will gotta bypass tha "must fast\-forward" rule up in order ta replace tha history you originally published wit tha rebased history\&. If some muthafucka else built on top of yo' original gangsta history while yo ass is rebasing, tha tip of tha branch all up in tha remote may advizzle wit her commit, n' blindly pushin with
\-\-force
will lose her work\&.
.sp
This option allows you ta say dat you expect tha history yo ass is uppimpin is what tha fuck you rebased n' wanna replace\&. If tha remote ref still points all up in tha commit you specified, you can be shizzle dat no other playas did anythang ta tha ref (it is like takin a "lease" on tha ref without explicitly lockin it, n' you update tha ref while makin shizzle dat yo' earlier "lease" is still valid)\&.
.sp
\-\-force\-with\-lease
alone, without specifyin tha details, will protect all remote refs dat is goin ta be updated by requirin they current value ta be tha same as tha remote\-trackin branch our crazy asses have fo' them, unless specified wit a
\-\-force\-with\-lease=<refname>:<expect>
option dat explicitly states what tha fuck tha expected value is\&.
.sp
\-\-force\-with\-lease=<refname>, without specifyin tha expected value, will protect tha named ref (alone), if it is goin ta be updated, by requirin its current value ta be tha same as tha remote\-trackin branch our crazy asses have fo' it\&.
.sp
\-\-force\-with\-lease=<refname>:<expect>
will protect tha named ref (alone), if it is goin ta be updated, by requirin its current value ta be tha same as tha specified value <expect> (which be allowed ta be different from tha remote\-trackin branch our crazy asses have fo' tha refname, or our phat asses do not even gotta have such a remote\-trackin branch when dis form is used)\&.
.sp
Note dat all forms other than
\-\-force\-with\-lease=<refname>:<expect>
that specifies tha expected current value of tha ref explicitly is still experimenstrual n' they semantics may chizzle as we bust experience wit dis feature\&.
.sp
"\-\-no\-force\-with\-lease" will quit all tha previous \-\-force\-with\-lease on tha command line\&.
.RE
.PP
\-f, \-\-force
.RS 4
Usually, tha command refuses ta update a remote ref dat aint a ancestor of tha local ref used ta overwrite it\& fo' realz. Also, when
\-\-force\-with\-lease
option is used, tha command refuses ta update a remote ref whose current value do not match what tha fuck is expected\&.
.sp
This flag disablez these checks, n' can cause tha remote repository ta lose commits; use it wit care\&.
.sp
Note that
\-\-force
applies ta all tha refs dat is pushed, hence rockin it with
push\&.default
set to
matching
or wit multiple push destinations configured with
remote\&.*\&.push
may overwrite refs other than tha current branch (includin local refs dat is strictly behind they remote counterpart)\&. To force a push ta only one branch, use a
+
in front of tha refspec ta push (e\&.g
git push origin +master
to force a push ta the
master
branch)\&. Right back up in yo muthafuckin ass. See the
<refspec>\&.\&.\&.
section above fo' details\&.
.RE
.PP
\-\-repo=<repository>
.RS 4
This option is only relevant if no <repository> argument is passed up in tha invocation\&. In dis case,
\fIgit push\fR
derives tha remote name from tha current branch: If it tracks a remote branch, then dat remote repository is pushed to\&. Otherwise, tha name "origin" is used\&. For dis latta case, dis option can be used ta override tha name "origin"\&. In other lyrics, tha difference between these two commands
.sp
.if n \{\
.RS 4
.\}
.nf
git push hood         #1
git push \-\-repo=hood  #2
.fi
.if n \{\
.RE
.\}
.sp
is dat #1 always pushes ta "public" whereas #2 pushes ta "public" only if tha current branch do not track a remote branch\&. This is useful if you write a alias or script around
\fIgit push\fR\&.
.RE
.PP
\-u, \-\-set\-upstream
.RS 4
For every last muthafuckin branch dat is up ta date or successfully pushed, add upstream (tracking) reference, used by argument\-less
\fBgit-pull\fR(1)
and other commands\&. For mo' shiznit, see
\fIbranch\&.<name>\&.merge\fR
in
\fBgit-config\fR(1)\&.
.RE
.PP
\-\-[no\-]thin
.RS 4
These options is passed to
\fBgit-send-pack\fR(1)\& fo' realz. A thin transfer hella reduces tha amount of busted data when tha sender n' receiver share nuff of tha same objects up in common\&. Da default is \-\-thin\&.
.RE
.PP
\-q, \-\-quiet
.RS 4
Suppress all output, includin tha listin of updated refs, unless a error occurs\&. Progress aint reported ta tha standard error stream\&.
.RE
.PP
\-v, \-\-verbose
.RS 4
Run verbosely\&.
.RE
.PP
\-\-progress
.RS 4
Progress status is reported on tha standard error stream by default when it be attached ta a terminal, unless \-q is specified\&. This flag forces progress status even if tha standard error stream aint pimped up ta a terminal\&.
.RE
.PP
\-\-recurse\-submodules=check|on\-demand
.RS 4
Make shizzle all submodule commits used by tha revisions ta be pushed is available on a remote\-trackin branch\&. If
\fIcheck\fR
is used Git will verify dat all submodule commits dat chizzled up in tha revisions ta be pushed is available on at least one remote of tha submodule\&. If any commits is missin tha push is ghon be aborted n' exit wit non\-zero status\&. If
\fIon\-demand\fR
is used all submodulez dat chizzled up in tha revisions ta be pushed is ghon be pushed\&. If on\-demand was not able ta push all necessary revisions it will also be aborted n' exit wit non\-zero status\&.
.RE
.PP
\-\-[no\-]verify
.RS 4
Toggle tha pre\-push hook (see
\fBgithooks\fR(5))\&. Da default is \-\-verify, givin tha hook a cold-ass lil chizzle ta prevent tha push\&. With \-\-no\-verify, tha hook is bypassed straight-up\&.
.RE
.SH "GIT URLS"
.sp
In general, URLs contain shiznit bout tha transhiznit protocol, tha address of tha remote server, n' tha path ta tha repository\&. Dependin on tha transhiznit protocol, a shitload of dis shiznit may be absent\&.
.sp
Git supports ssh, git, http, n' https protocols (in addition, ftp, n' ftps can be used fo' fetchin n' rsync can be used fo' fetchin n' pushin yo, but these is inefficient n' deprecated; do not use them)\&.
.sp
Da natizzle transhiznit (i\&.e\&. git:// URL) do no authentication n' should be used wit caution on unsecured networks\&.
.sp
Da followin syntaxes may be used wit them:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ssh://[user@]host\&.xz[:port]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
git://host\&.xz[:port]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
http[s]://host\&.xz[:port]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ftp[s]://host\&.xz[:port]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
rsync://host\&.xz/path/to/repo\&.git/
.RE
.sp
An alternatizzle scp\-like syntax may also be used wit tha ssh protocol:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
[user@]host\&.xz:path/to/repo\&.git/
.RE
.sp
This syntax is only recognized if there be no slashes before tha straight-up original gangsta colon\&. This helps differentiate a local path dat gotz nuff a cold-ass lil colon\&. For example tha local path foo:bar could be specified as a absolute path or \&./foo:bar ta avoid bein misinterpreted as a ssh url\&.
.sp
Da ssh n' git protocols additionally support ~username expansion:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ssh://[user@]host\&.xz[:port]/~[user]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
git://host\&.xz[:port]/~[user]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
[user@]host\&.xz:/~[user]/path/to/repo\&.git/
.RE
.sp
For local repositories, also supported by Git natively, tha followin syntaxes may be used:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
file:///path/to/repo\&.git/
.RE
.sp
These two syntaxes is mostly equivalent, except when cloning, when tha forma implies \-\-local option\&. Right back up in yo muthafuckin ass. See \fBgit-clone\fR(1) fo' details\&.
.sp
When Git don\(cqt know how tha fuck ta handle a cold-ass lil certain transhiznit protocol, it attempts ta use tha \fIremote\-<transport>\fR remote helper, if one exists\&. To explicitly request a remote helper, tha followin syntax may be used:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
<transport>::<address>
.RE
.sp
where <address> may be a path, a server n' path, or a arbitrary URL\-like strang recognized by tha specific remote helper bein invoked\&. Right back up in yo muthafuckin ass. See \fBgitremote-helpers\fR(1) fo' details\&.
.sp
If there be a big-ass number of similarly\-named remote repositories n' you wanna bust a gangbangin' finger-lickin' different format fo' dem (such dat tha URLs you use is ghon be rewritten tha fuck into URLs dat work), you can create a cold-ass lil configuration section of tha form:
.sp
.if n \{\
.RS 4
.\}
.nf
        [url "<actual url base>"]
                insteadOf = <other url base>
.fi
.if n \{\
.RE
.\}
.sp
.sp
For example, wit this:
.sp
.if n \{\
.RS 4
.\}
.nf
        [url "git://git\&.host\&.xz/"]
                insteadOf = host\&.xz:/path/to/
                insteadOf = work:
.fi
.if n \{\
.RE
.\}
.sp
.sp
a URL like "work:repo\&.git" or like "host\&.xz:/path/to/repo\&.git" is ghon be rewritten up in any context dat takes a URL ta be "git://git\&.host\&.xz/repo\&.git"\&.
.sp
If you wanna rewrite URLs fo' push only, you can create a cold-ass lil configuration section of tha form:
.sp
.if n \{\
.RS 4
.\}
.nf
        [url "<actual url base>"]
                pushInsteadOf = <other url base>
.fi
.if n \{\
.RE
.\}
.sp
.sp
For example, wit this:
.sp
.if n \{\
.RS 4
.\}
.nf
        [url "ssh://example\&.org/"]
                pushInsteadOf = git://example\&.org/
.fi
.if n \{\
.RE
.\}
.sp
.sp
a URL like "git://example\&.org/path/to/repo\&.git" is ghon be rewritten ta "ssh://example\&.org/path/to/repo\&.git" fo' pushes yo, but pulls will still use tha original gangsta URL\&.
.SH "REMOTES"
.sp
Da name of one of tha followin can be used instead of a URL as <repository> argument:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a remote up in tha Git configuration file:
$GIT_DIR/config,
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a file up in the
$GIT_DIR/remotes
directory, or
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a file up in the
$GIT_DIR/branches
directory\&.
.RE
.sp
All of these also allow you ta omit tha refspec from tha command line cuz they each contain a refspec which git will use by default\&.
.SS "Named remote up in configuration file"
.sp
Yo ass can chizzle ta provide tha name of a remote which you had previously configured rockin \fBgit-remote\fR(1), \fBgit-config\fR(1) or even by a manual edit ta tha $GIT_DIR/config file\&. Da URL of dis remote is ghon be used ta access tha repository\&. Da refspec of dis remote is ghon be used by default when you do not provide a refspec on tha command line\&. Da entry up in tha config file would step tha fuck up like this:
.sp
.if n \{\
.RS 4
.\}
.nf
        [remote "<name>"]
                url = <url>
                pushurl = <pushurl>
                push = <refspec>
                fetch = <refspec>
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da <pushurl> is used fo' pushes only\&. Well shiiiit, it is optionizzle n' defaults ta <url>\&.
.SS "Named file up in $GIT_DIR/remotes"
.sp
Yo ass can chizzle ta provide tha name of a gangbangin' file up in $GIT_DIR/remotes\&. Da URL up in dis file is ghon be used ta access tha repository\&. Da refspec up in dis file is ghon be used as default when you do not provide a refspec on tha command line\&. This file should have tha followin format:
.sp
.if n \{\
.RS 4
.\}
.nf
        URL: one of tha above URL format
        Push: <refspec>
        Pull: <refspec>
.fi
.if n \{\
.RE
.\}
.sp
.sp
Push: lines is used by \fIgit push\fR n' Pull: lines is used by \fIgit pull\fR n' \fIgit fetch\fR\&. Multiple Push: n' Pull: lines may be specified fo' additionizzle branch mappings\&.
.SS "Named file up in $GIT_DIR/branches"
.sp
Yo ass can chizzle ta provide tha name of a gangbangin' file up in $GIT_DIR/branches\&. Da URL up in dis file is ghon be used ta access tha repository\&. This file should have tha followin format:
.sp
.if n \{\
.RS 4
.\}
.nf
        <url>#<head>
.fi
.if n \{\
.RE
.\}
.sp
.sp
<url> is required; #<head> is optional\&.
.sp
Dependin on tha operation, git will use one of tha followin refspecs, if you don\(cqt provide one on tha command line\&. <branch> is tha name of dis file up in $GIT_DIR/branches n' <head> defaults ta master\&.
.sp
git fetch uses:
.sp
.if n \{\
.RS 4
.\}
.nf
        refs/heads/<head>:refs/heads/<branch>
.fi
.if n \{\
.RE
.\}
.sp
.sp
git push uses:
.sp
.if n \{\
.RS 4
.\}
.nf
        HEAD:refs/heads/<head>
.fi
.if n \{\
.RE
.\}
.sp
.SH "OUTPUT"
.sp
Da output of "git push" dependz on tha transhiznit method used; dis section raps bout tha output when pushin over tha Git protocol (either locally or via ssh)\&.
.sp
Da statuz of tha push is output up in tabular form, wit each line representin tha statuz of a single ref\&. Each line iz of tha form:
.sp
.if n \{\
.RS 4
.\}
.nf
 <flag> <summary> <from> \-> <to> (<reason>)
.fi
.if n \{\
.RE
.\}
.sp
.sp
If \-\-porcelain is used, then each line of tha output iz of tha form:
.sp
.if n \{\
.RS 4
.\}
.nf
 <flag> \et <from>:<to> \et <summary> (<reason>)
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da statuz of up\-to\-date refs is shown only if \-\-porcelain or \-\-verbose option is used\&.
.PP
flag
.RS 4
A single characta indicatin tha statuz of tha ref:
.PP
(space)
.RS 4
for a successfully pushed fast\-forward;
.RE
.PP
+
.RS 4
for a successful forced update;
.RE
.PP
\-
.RS 4
for a successfully deleted ref;
.RE
.PP
*
.RS 4
for a successfully pushed freshly smoked up ref;
.RE
.PP
!
.RS 4
for a ref dat was rejected or failed ta push; and
.RE
.PP
=
.RS 4
for a ref dat was up ta date n' did not need pushing\&.
.RE
.RE
.PP
summary
.RS 4
For a successfully pushed ref, tha summary shows tha oldschool n' freshly smoked up jointz of tha ref up in a gangbangin' form suitable fo' rockin as a argument to
git log
(this is
<old>\&.\&.<new>
in most cases, and
<old>\&.\&.\&.<new>
for forced non\-fast\-forward thugged-out shit)\&.
.sp
For a gangbangin' failed update, mo' details is given:
.PP
rejected
.RS 4
Git did not try ta bust tha ref at all, typically cuz it aint a gangbangin' fast\-forward n' you did not force tha update\&.
.RE
.PP
remote rejected
.RS 4
Da remote end refused tha update\&. Usually caused by a hook on tha remote side, or cuz tha remote repository has one of tha followin safety options up in effect:
receive\&.denyCurrentBranch
(for pushes ta tha checked up branch),
receive\&.denyNonFastForwards
(for forced non\-fast\-forward thugged-out shit),
receive\&.denyDeletes
or
receive\&.denyDeleteCurrent\&. Right back up in yo muthafuckin ass. See
\fBgit-config\fR(1)\&.
.RE
.PP
remote failure
.RS 4
Da remote end did not report tha successful update of tha ref, like cuz of a temporary error on tha remote side, a funky-ass break up in tha network connection, or other transient error\&.
.RE
.RE
.PP
from
.RS 4
Da name of tha local ref bein pushed, minus its
refs/<type>/
prefix\&. In tha case of deletion, tha name of tha local ref is omitted\&.
.RE
.PP
to
.RS 4
Da name of tha remote ref bein updated, minus its
refs/<type>/
prefix\&.
.RE
.PP
reason
.RS 4
A human\-readable explanation\&. In tha case of successfully pushed refs, no explanation is needed\&. For a gangbangin' failed ref, tha reason fo' failure is busted lyrics about\&.
.RE
.SH "NOTE ABOUT FAST-FORWARDS"
.sp
When a update chizzlez a funky-ass branch (or mo' up in general, a ref) dat used ta point at commit A ta point at another commit B, it is called a gangbangin' fast\-forward update if n' only if B be a thugged-out descendant of A\&.
.sp
In a gangbangin' fast\-forward update from A ta B, tha set of commits dat tha original gangsta commit A built on top of be a subset of tha commits tha freshly smoked up commit B buildz on top of\& yo. Hence, it do not lose any history\&.
.sp
In contrast, a non\-fast\-forward update will lose history\&. For example, suppose you n' some muthafucka else started all up in tha same commit X, n' you built a history leadin ta commit B while tha other thug built a history leadin ta commit A\&. Da history be lookin like this:
.sp
.if n \{\
.RS 4
.\}
.nf
      B
     /
 \-\-\-X\-\-\-A
.fi
.if n \{\
.RE
.\}
.sp
.sp
Further suppose dat tha other thug already pushed chizzlez leadin ta A back ta tha original gangsta repository from which you two obtained tha original gangsta commit X\&.
.sp
Da push done by tha other thug updated tha branch dat used ta point at commit X ta point at commit A\&. Well shiiiit, it aint nuthin but a gangbangin' fast\-forward\&.
.sp
But if you try ta push, yo big-ass booty is ghon attempt ta update tha branch (that now points at A) wit commit B\&. This do \fInot\fR fast\-forward\&. If you did so, tha chizzlez introduced by commit A is ghon be lost, cuz dem hoes will now start buildin on top of B\&.
.sp
Da command by default do not allow a update dat aint a gangbangin' fast\-forward ta prevent such loss of history\&.
.sp
If you do not wanna lose yo' work (history from X ta B) or tha work by tha other thug (history from X ta A), you would need ta first fetch tha history from tha repository, create a history dat gotz nuff chizzlez done by both parties, n' push tha result back\&.
.sp
Yo ass can big-ass up "git pull", resolve potential conflicts, n' "git push" tha result\& fo' realz. A "git pull" will create a merge commit C between commits A n' B\&.
.sp
.if n \{\
.RS 4
.\}
.nf
      B\-\-\-C
     /   /
 \-\-\-X\-\-\-A
.fi
.if n \{\
.RE
.\}
.sp
.sp
Uppimpin A wit tha resultin merge commit will fast\-forward n' yo' push is ghon be accepted\&.
.sp
Alternatively, you can rebase yo' chizzle between X n' B on top of A, wit "git pull \-\-rebase", n' push tha result back\&. Da rebase will create a freshly smoked up commit D dat buildz tha chizzle between X n' B on top of A\&.
.sp
.if n \{\
.RS 4
.\}
.nf
      B   D
     /   /
 \-\-\-X\-\-\-A
.fi
.if n \{\
.RE
.\}
.sp
.sp
Again, uppimpin A wit dis commit will fast\-forward n' yo' push is ghon be accepted\&.
.sp
There be another common thang where you may encounta non\-fast\-forward rejection when you try ta push, n' it is possible even when yo ass is pushin tha fuck into a repository no muthafucka else pushes into\& fo' realz. Afta you push commit A yo ass (in tha straight-up original gangsta picture up in dis section), replace it wit "git commit \-\-amend" ta produce commit B, n' you try ta push it out, cuz forgot dat you have pushed A up already\&. In such a cold-ass lil case, n' only if yo ass is certain dat no muthafucka up in tha meantime fetched yo' earlier commit A (and started buildin on top of it), you can run "git push \-\-force" ta overwrite it\&. In other lyrics, "git push \-\-force" be a method reserved fo' a cold-ass lil case where you do mean ta lose history\&.
.SH "EXAMPLES"
.PP
git push
.RS 4
Works like
git push <remote>, where <remote> is tha current branch\(cqs remote (or
origin, if no remote is configured fo' tha current branch)\&.
.RE
.PP
git push origin
.RS 4
Without additionizzle configuration, works like
git push origin :\&.
.sp
Da default behavior of dis command when no <refspec> is given can be configured by settin the
push
option of tha remote, or the
push\&.default
configuration variable\&.
.sp
For example, ta default ta pushin only tha current branch to
origin
use
git config remote\&.origin\&.push HEAD\& fo' realz. Any valid <refspec> (like tha ones up in tha examplez below) can be configured as tha default for
git push origin\&.
.RE
.PP
git push origin :
.RS 4
Push "matching" branches to
origin\&. Right back up in yo muthafuckin ass. See <refspec> up in the
OPTIONS
section above fo' a thugged-out description of "matching" branches\&.
.RE
.PP
git push origin master
.RS 4
Find a ref dat matches
master
in tha source repository (most likely, it would find
refs/heads/master), n' update tha same ref (e\&.g\&.
refs/heads/master) in
origin
repository wit it\&. If
master
did not exist remotely, it would be pimped\&.
.RE
.PP
git push origin HEAD
.RS 4
A handy way ta push tha current branch ta tha same name on tha remote\&.
.RE
.PP
git push mothershizzle master:satellite/masta dev:satellite/dev
.RS 4
Use tha source ref dat matches
master
(e\&.g\&.
refs/heads/master) ta update tha ref dat matches
satellite/master
(most probably
refs/remotes/satellite/master) up in the
mothership
repository; do tha same for
dev
and
satellite/dev\&.
.sp
This is ta emulate
git fetch
run on the
mothership
using
git push
that is run up in tha opposite direction up in order ta integrate tha work done on
satellite, n' is often necessary when you can only make connection up in one way (i\&.e\&. satellite can ssh tha fuck into mothershizzle but mothershizzle cannot initiate connection ta satellite cuz tha latta is behind a gangbangin' firewall or do not run sshd)\&.
.sp
Afta hustlin this
git push
on the
satellite
machine, you would ssh tha fuck into the
mothership
and run
git merge
there ta complete tha emulation of
git pull
that was run on
mothership
to pull chizzlez made on
satellite\&.
.RE
.PP
git push origin HEAD:master
.RS 4
Push tha current branch ta tha remote ref matching
master
in the
origin
repository\&. This form is convenient ta push tha current branch without thankin bout its local name\&.
.RE
.PP
git push origin master:refs/heads/experimental
.RS 4
Smoke tha branch
experimental
in the
origin
repository by copyin tha current
master
branch\&. This form is only needed ta create a freshly smoked up branch or tag up in tha remote repository when tha local name n' tha remote name is different; otherwise, tha ref name on its own will work\&.
.RE
.PP
git push origin :experimental
.RS 4
Find a ref dat matches
experimental
in the
origin
repository (e\&.g\&.
refs/heads/experimental), n' delete it\&.
.RE
.PP
git push origin +dev:master
.RS 4
Update tha origin repository\(cqs masta branch wit tha dev branch, allowin non\-fast\-forward thugged-out shit\&.
\fBThis can leave unreferenced commits danglin up in tha origin repository\&.\fR
Consider tha followin thang, where a gangbangin' fast\-forward aint possible:
.sp
.if n \{\
.RS 4
.\}
.nf
            o\-\-\-o\-\-\-o\-\-\-A\-\-\-B  origin/master
                     \e
                      X\-\-\-Y\-\-\-Z  dev
.fi
.if n \{\
.RE
.\}
.sp
Da above command would chizzle tha origin repository to
.sp
.if n \{\
.RS 4
.\}
.nf
                      A\-\-\-B  (unnamed branch)
                     /
            o\-\-\-o\-\-\-o\-\-\-X\-\-\-Y\-\-\-Z  master
.fi
.if n \{\
.RE
.\}
.sp
Commits A n' B would no longer belong ta a funky-ass branch wit a symbolic name, n' so would be unreachable\& fo' realz. As such, these commits would be removed by a
git gc
command on tha origin repository\&.
.RE
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
