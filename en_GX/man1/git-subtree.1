'\" t
.\"     Title: git-subtree
.\"    Author: [see tha "AUTHOR" section]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git
.\"  Language: Gangsta
.\"
.TH "GIT\-SUBTREE" "1" "10/25/2014" "Git" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-subtree \- Merge subtrees together n' split repository tha fuck into subtrees
.SH "SYNOPSIS"
.sp
.nf
\fIgit subtree\fR add   \-P <prefix> <commit>
\fIgit subtree\fR add   \-P <prefix> <repository> <ref>
\fIgit subtree\fR pull  \-P <prefix> <repository> <ref>
\fIgit subtree\fR push  \-P <prefix> <repository> <ref>
\fIgit subtree\fR merge \-P <prefix> <commit>
\fIgit subtree\fR split \-P <prefix> [OPTIONS] [<commit>]
.fi
.SH "DESCRIPTION"
.sp
Subtrees allow subprojects ta be included within a subdirectory of tha main project, optionally includin tha subproject\(cqs entire history\&.
.sp
For example, you could include tha source code fo' a library as a subdirectory of yo' application\&.
.sp
Subtrees is not ta be trippin wit submodules, which is meant fo' tha same task\&. Unlike submodules, subtrees do not need any special constructions (like \&.gitmodule filez or gitlinks) be present up in yo' repository, n' do not force end\-userz of yo' repository ta do anythang special or ta KNOW how tha fuck subtrees work\& fo' realz. A subtree is just a subdirectory dat can be committed to, branched, n' merged along wit yo' project up in any way you want\&.
.sp
They is also not ta be trippin wit rockin tha subtree merge game\&. Da main difference is that, besides mergin tha other project as a subdirectory, you can also extract tha entire history of a subdirectory from yo' project n' make it tha fuck into a standalone project\&. Unlike tha subtree merge game you can alternate back n' forth between these two operations\&. If tha standalone library gets updated, you can automatically merge tha chizzlez tha fuck into yo' project; if you update tha library inside yo' project, you can "split" tha chizzlez back up again n' again n' again n' merge dem back tha fuck into tha library project\&.
.sp
For example, if a library you made fo' one application endz up bein useful elsewhere, you can extract its entire history n' publish dat as its own git repository, without accidentally interminglin tha history of yo' application project\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBTip\fR
.ps -1
.br
.sp
In order ta keep yo' commit lyrics clean, we recommend dat playas split they commits between tha subtrees n' tha main project as much as possible\&. That is, if you cook up a cold-ass lil chizzle dat affects both tha library n' tha main application, commit it up in two pieces\&. That way, when you split tha library commits up later, they descriptions will still make sense\&. But if dis isn\(cqt blingin ta you, it\(cqs not \fBnecessary\fR\&. git subtree will simply leave up tha non\-library\-related partz of tha commit when it splits it up tha fuck into tha subproject later\&.
.sp .5v
.RE
.SH "COMMANDS"
.PP
add
.RS 4
Smoke tha <prefix> subtree by importin its contents from tha given <commit> or <repository> n' remote <ref>\& fo' realz. A freshly smoked up commit is pimped automatically, joinin tha imported project\(cqs history wit yo' own\&. With
\fI\-\-squash\fR, imports only a single commit from tha subproject, rather than its entire history\&.
.RE
.PP
merge
.RS 4
Merge recent chizzlez up ta <commit> tha fuck into tha <prefix> subtree\& fo' realz. As wit normal
\fIgit merge\fR, dis don\(cqt remove yo' own local chizzles; it just merges dem chizzlez tha fuck into tha sickest fuckin <commit>\&. With
\fI\-\-squash\fR, creates only one commit dat gotz nuff all tha chizzles, rather than mergin up in tha entire history\&.
.sp
.if n \{\
.RS 4
.\}
.nf
If you use \*(Aq\-\-squash\*(Aq, tha merge direction don\*(Aqt
always gotta be forward; you can use dis command to
go back up in time from v2\&.5 ta v2\&.4, fo' example\&.  If your
merge introduces a cold-ass lil conflict, you can resolve it up in the
usual ways\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
pull
.RS 4
Exactly like
\fImerge\fR yo, but parallels
\fIgit pull\fR
in dat it fetches tha given ref from tha specified remote repository\&.
.RE
.PP
push
.RS 4
Do a
\fIsplit\fR
(see below) rockin tha <prefix> supplied n' then do a
\fIgit push\fR
to push tha result ta tha repository n' ref\&. This can be used ta push yo' subtree ta different branchez of tha remote repository\&.
.RE
.PP
split
.RS 4
Extract a new, synthetic project history from tha history of tha <prefix> subtree\&. Da freshly smoked up history includes only tha commits (includin merges) dat affected <prefix>, n' each of dem commits now has tha contentz of <prefix> all up in tha root of tha project instead of up in a subdirectory\&. Thus, tha newly pimped history is suitable fo' export as a separate git repository\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Afta splittin successfully, a single commit id is
printed ta stdout\&.  This correspondz ta tha HEAD of the
newly pimped tree, which you can manipulate however you
want\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Repeated splitz of exactly tha same history are
guaranteed ta be identical (ie\&. ta produce tha same
commit ids)\&.  Because of this, if you add freshly smoked up commits
and then re\-split, tha freshly smoked up commits is ghon be attached as
commits on top of tha history you generated last time,
so \*(Aqgit merge\*(Aq n' playaz will work as expected\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Note dat if you use \*(Aq\-\-squash\*(Aq when you merge, you
should probably not just \*(Aq\-\-rejoin\*(Aq when you split\&.
.fi
.if n \{\
.RE
.\}
.RE
.SH "OPTIONS"
.PP
\-q, \-\-quiet
.RS 4
Suppress unnecessary output lyrics on stderr\&.
.RE
.PP
\-d, \-\-debug
.RS 4
Produce even mo' unnecessary output lyrics on stderr\&.
.RE
.PP
\-P <prefix>, \-\-prefix=<prefix>
.RS 4
Specify tha path up in tha repository ta tha subtree you wanna manipulate\&. This option is mandatory fo' all commands\&.
.RE
.PP
\-m <message>, \-\-message=<message>
.RS 4
This option is only valid fo' add, merge n' pull (unsure)\&. Right back up in yo muthafuckin ass. Specify <message> as tha commit message fo' tha merge commit\&.
.RE
.SH "OPTIONS FOR ADD, MERGE, PUSH, PULL"
.PP
\-\-squash
.RS 4
This option is only valid fo' add, merge, push n' pull commands\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Instead of mergin tha entire history from tha subtree
project, produce only a single commit dat gotz nuff all
the differences you wanna merge, n' then merge that
new commit tha fuck into yo' project\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Usin dis option helps ta reduce log clutter\&. People
rarely wanna peep every last muthafuckin chizzle dat happened between
v1\&.0 n' v1\&.1 of tha library they\*(Aqre using, since none of the
interim versions was eva included up in they application\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Usin \*(Aq\-\-squash\*(Aq also helps avoid problems when tha same
subproject is included multiple times up in tha same
project, or is removed n' then re\-added\&.  In such a
case, it don\*(Aqt make sense ta combine tha histories
anyway, since it\*(Aqs unclear which part of tha history
belongs ta which subtree\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Furthermore, wit \*(Aq\-\-squash\*(Aq, you can switch back and
forth between different versionz of a subtree, rather
than strictly forward\&.  \*(Aqgit subtree merge \-\-squash\*(Aq
always adjusts tha subtree ta match tha exactly
specified commit, even if gettin ta dat commit would
require unfuckin wit some chizzlez dat was added earlier\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Whether or not you use \*(Aq\-\-squash\*(Aq, chizzlez made up in your
local repository remain intact n' can be lata split
and bust upstream ta tha subproject\&.
.fi
.if n \{\
.RE
.\}
.RE
.SH "OPTIONS FOR SPLIT"
.PP
\-\-annotate=<annotation>
.RS 4
This option is only valid fo' tha split command\&.
.sp
.if n \{\
.RS 4
.\}
.nf
When generatin synthetic history, add <annotation> as a
prefix ta each commit message\&.  Since we\*(Aqre bustin new
commits wit tha same commit message yo, but possibly
different content, from tha original gangsta commits, dis can help
to differentiate dem n' avoid mad drama\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Whenever you split, you need ta use tha same
<annotation>, or else you don\*(Aqt gotz a guarantee that
the freshly smoked up re\-created history is ghon be identical ta tha old
one\&.  That will prevent mergin from hustlin erectly\&.
git subtree tries ta make it work anyway, particularly
if you use \-\-rejoin yo, but it may not always be effective\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-b <branch>, \-\-branch=<branch>
.RS 4
This option is only valid fo' tha split command\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Afta generatin tha synthetic history, create a new
branch called <branch> dat gotz nuff tha freshly smoked up history\&.
This is suitable fo' immediate pushin upstream\&.
<branch> must not already exist\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-\-ignore\-joins
.RS 4
This option is only valid fo' tha split command\&.
.sp
.if n \{\
.RS 4
.\}
.nf
If you use \*(Aq\-\-rejoin\*(Aq, git subtree attempts ta optimize
its history reconstruction ta generate only tha new
commits since tha last \*(Aq\-\-rejoin\*(Aq\&.  \*(Aq\-\-ignore\-join\*(Aq
disablez dis behaviour, forcin it ta regenerate the
entire history\&.  In a big-ass project, dis can take a
long time\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-\-onto=<onto>
.RS 4
This option is only valid fo' tha split command\&.
.sp
.if n \{\
.RS 4
.\}
.nf
If yo' subtree was originally imported rockin something
other than git subtree, its history may not match what
git subtree is expecting\&.  In dat case, you can specify
the commit id <onto> dat correspondz ta tha first
revision of tha subproject\*(Aqs history dat was imported
into yo' project, n' git subtree will attempt ta build
its history from there\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If you used \*(Aqgit subtree add\*(Aq, you should never need
this option\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-\-rejoin
.RS 4
This option is only valid fo' tha split command\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Afta splitting, merge tha newly pimped synthetic
history back tha fuck into yo' main project\&.  That way, future
splits can search only tha part of history dat has
been added since da most thugged-out recent \-\-rejoin\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If yo' split commits end up merged tha fuck into tha upstream
subproject, n' then you wanna git tha sickest fuckin upstream
version, dis will allow git\*(Aqs merge algorithm ta more
intelligently avoid conflicts (since it knows these
synthetic commits is already part of tha upstream
repository)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Unfortunately, rockin dis option thangs up in dis biatch up in \*(Aqgit log\*(Aq
showin a extra copy of every last muthafuckin freshly smoked up commit dat was
created (the original, n' tha synthetic one)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If you do all yo' merges wit \*(Aq\-\-squash\*(Aq, don\*(Aqt use
\*(Aq\-\-rejoin\*(Aq when you split, cuz you don\*(Aqt want the
subproject\*(Aqs history ta be part of yo' project anyway\&.
.fi
.if n \{\
.RE
.\}
.RE
.SH "EXAMPLE 1 fo' realz. ADD COMMAND"
.sp
Let\(cqs assume dat you gotz a local repository dat you wanna add a external vendor library to\&. In dis case we will add tha git\-subtree repository as a subdirectory of yo' already existin git\-extensions repository up in ~/git\-extensions/:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git subtree add \-\-prefix=git\-subtree \-\-squash \e
        git://github\&.com/apenwarr/git\-subtree\&.git master
.fi
.if n \{\
.RE
.\}
.sp
\fImaster\fR need ta be a valid remote ref n' can be a gangbangin' finger-lickin' different branch name
.sp
Yo ass can omit tha \-\-squash flag yo, but bustin so will increase tha number of commits dat is included up in yo' local repository\&.
.sp
We now gotz a ~/git\-extensions/git\-subtree directory containin code from tha masta branch of git://github\&.com/apenwarr/git\-subtree\&.git up in our git\-extensions repository\&.
.SH "EXAMPLE 2. EXTRACT A SUBTREE USING COMMIT, MERGE AND PULL"
.sp
Let\(cqs use tha repository fo' tha git source code as a example\&. First, git yo' own copy of tha git\&.git repository:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git clone git://git\&.kernel\&.org/pub/scm/git/git\&.git test\-git
$ cd test\-git
.fi
.if n \{\
.RE
.\}
.sp
gitweb (commit 1130ef3) was merged tha fuck into git az of commit 0a8f4f0, afta which dat shiznit was no longer maintained separately\&. But imagine it had been maintained separately, n' we wanted ta extract git\(cqs chizzlez ta gitweb since dat time, ta share wit tha upstream\&. Yo ass could do this:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git subtree split \-\-prefix=gitweb \-\-annotate=\*(Aq(split) \*(Aq \e
        0a8f4f0^\&.\&. \-\-onto=1130ef3 \-\-rejoin \e
        \-\-branch gitweb\-latest
$ gitk gitweb\-latest
$ git push git@github\&.com:whatever/gitweb\&.git gitweb\-latest:master
.fi
.if n \{\
.RE
.\}
.sp
(We use \fI0a8f4f0^\&.\&.\fR cuz dat means "all tha chizzlez from 0a8f4f0 ta tha current version, includin 0a8f4f0 itself\&.")
.sp
If gitweb had originally been merged rockin \fIgit subtree add\fR (or a previous split had already been done wit \-\-rejoin specified) then you can do all yo' splits without havin ta remember any weird commit ids:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git subtree split \-\-prefix=gitweb \-\-annotate=\*(Aq(split) \*(Aq \-\-rejoin \e
        \-\-branch gitweb\-latest2
.fi
.if n \{\
.RE
.\}
.sp
And you can merge chizzlez back up in from tha upstream project just as easily:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git subtree pull \-\-prefix=gitweb \e
        git@github\&.com:whatever/gitweb\&.git master
.fi
.if n \{\
.RE
.\}
.sp
Or, rockin \fI\-\-squash\fR, you can straight-up rewind ta a earlier version of gitweb:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git subtree merge \-\-prefix=gitweb \-\-squash gitweb\-latest~10
.fi
.if n \{\
.RE
.\}
.sp
Then cook up some fuckin chizzles:
.sp
.if n \{\
.RS 4
.\}
.nf
$ date >gitweb/myfile
$ git add gitweb/myfile
$ git commit \-m \*(Aqcreated myfile\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
And fast forward again:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git subtree merge \-\-prefix=gitweb \-\-squash gitweb\-latest
.fi
.if n \{\
.RE
.\}
.sp
And notice dat yo' chizzle is still intact:
.sp
.if n \{\
.RS 4
.\}
.nf
$ ls \-l gitweb/myfile
.fi
.if n \{\
.RE
.\}
.sp
And you can split it up n' peep yo' chizzlez versus tha standard gitweb:
.sp
.if n \{\
.RS 4
.\}
.nf
git log gitweb\-latest\&.\&.$(git subtree split \-\-prefix=gitweb)
.fi
.if n \{\
.RE
.\}
.SH "EXAMPLE 3. EXTRACT A SUBTREE USING BRANCH"
.sp
Suppose you gotz a source directory wit nuff filez n' subdirectories, n' you wanna extract tha lib directory ta its own git project\& yo. Here\(cqs a gangbangin' finger-lickin' dirty-ass short way ta do it:
.sp
First, make tha freshly smoked up repository wherever you want:
.sp
.if n \{\
.RS 4
.\}
.nf
$ <go ta tha freshly smoked up location>
$ git init \-\-bare
.fi
.if n \{\
.RE
.\}
.sp
Back up in yo' original gangsta directory:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git subtree split \-\-prefix=lib \-\-annotate="(split)" \-b split
.fi
.if n \{\
.RE
.\}
.sp
Then push tha freshly smoked up branch onto tha freshly smoked up empty repository:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git push <new\-repo> split:master
.fi
.if n \{\
.RE
.\}
.SH "AUTHOR"
.sp
Written by Avery Pennarun <\m[blue]\fBapenwarr@gmail\&.com\fR\m[]\&\s-2\u[1]\d\s+2>
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
.SH "NOTES"
.IP " 1." 4
apenwarr@gmail.com
.RS 4
\%mailto:apenwarr@gmail.com
.RE
