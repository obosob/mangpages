.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PICONV 1"
.TH PICONV 1 "2013-08-29" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
piconv \-\- iconv(1), reinvented up in perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  piconv [\-f from_encoding] [\-t to_encoding]
\&         [\-p|\-\-perlqq|\-\-htmlcref|\-\-xmlcref] [\-C N|\-c] [\-D] [\-S scheme]
\&         [\-s string|file...]
\&  piconv \-l
\&  piconv \-r encoding_alias
\&  piconv \-h
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBpiconv\fR is perl version of \fBiconv\fR, a cold-ass lil characta encodin converter
widely available fo' various Unixen todizzle. It make me wanna hollar playa!  This script was primarily
a technologizzle demonstrator fo' Perl 5.8.0 yo, but you can use piconv up in the
place of iconv fo' virtually any case.
.PP
piconv converts tha characta encodin of either \s-1STDIN\s0 or files
specified up in tha argument n' prints up ta \s-1STDOUT.\s0
.PP
Here is tha list of options.  Some options can be up in short format (\-f)
or long (\-\-from) one.
.IP "\-f,\-\-from \fIfrom_encoding\fR" 4
.IX Item "-f,--from from_encoding"
Specifies tha encodin yo ass is convertin from.  Unlike \fBiconv\fR,
this option can be omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  In such cases, tha current locale is used.
.IP "\-t,\-\-to \fIto_encoding\fR" 4
.IX Item "-t,--to to_encoding"
Specifies tha encodin yo ass is convertin to.  Unlike \fBiconv\fR,
this option can be omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  In such cases, tha current locale is used.
.Sp
Therefore, when both \-f n' \-t is omitted, \fBpiconv\fR just acts
like \fBcat\fR.
.IP "\-s,\-\-strin \fIstring\fR" 4
.IX Item "-s,--strin string"
uses \fIstring\fR instead of file fo' tha source of text.
.IP "\-l,\-\-list" 4
.IX Item "-l,--list"
Lists all available encodings, one per line, up in case-insensitive
order n' shit.  Note dat only tha canonical names is listed; nuff aliases
exist.  For example, tha names is case-insensitive, n' nuff standard
and common aliases work, like fuckin \*(L"latin1\*(R" fo' \*(L"\s-1ISO\-8859\-1\*(R",\s0 or \*(L"ibm850\*(R"
instead of \*(L"cp850\*(R", or \*(L"winlatin1\*(R" fo' \*(L"cp1252\*(R".  See Encode::Supported
for a gangbangin' full rap.
.IP "\-r,\-\-resolve \fIencoding_alias\fR" 4
.IX Item "-r,--resolve encoding_alias"
Resolve \fIencoding_alias\fR ta Encode canonical encodin name.
.IP "\-C,\-\-check \fIN\fR" 4
.IX Item "-C,--check N"
Peep tha validitizzle of tha stream if \fIN\fR = 1.  When \fIN\fR = \-1, something
interestin happens when it encountas a invalid character.
.IP "\-c" 4
.IX Item "-c"
Same as \f(CW\*(C`\-C 1\*(C'\fR.
.IP "\-p,\-\-perlqq" 4
.IX Item "-p,--perlqq"
Transliterate charactas missin up in encodin ta \ex{\s-1HHHH\s0} where \s-1HHHH\s0 is the
hexadecimal Unicode code point.
.IP "\-\-htmlcref" 4
.IX Item "--htmlcref"
Transliterate charactas missin up in encodin ta &#NNN; where \s-1NNN\s0 is the
decimal Unicode code point.
.IP "\-\-xmlcref" 4
.IX Item "--xmlcref"
Transliterate charactas missin up in encodin ta &#xHHHH; where \s-1HHHH\s0 is the
hexadecimal Unicode code point.
.IP "\-h,\-\-help" 4
.IX Item "-h,--help"
Show usage.
.IP "\-D,\-\-debug" 4
.IX Item "-D,--debug"
Invokes debuggin mode.  Primarily fo' Encode hackers.
.IP "\-S,\-\-scheme \fIscheme\fR" 4
.IX Item "-S,--scheme scheme"
Selects which scheme is ta be used fo' conversion. I aint talkin' bout chicken n' gravy biatch.  Available schemes
are as bigs up:
.RS 4
.IP "from_to" 4
.IX Item "from_to"
Uses Encode::from_to fo' conversion. I aint talkin' bout chicken n' gravy biatch.  This is tha default.
.IP "decode_encode" 4
.IX Item "decode_encode"
Input strings is \fIdecode()\fRd then \fIencode()\fRd. Y'all KNOW dat shit, muthafucka!  A straight two-step
implementation.
.IP "perlio" 4
.IX Item "perlio"
Da freshly smoked up perlIO layer is used. Y'all KNOW dat shit, muthafucka!  \s-1NI\-S\s0' favorite.
.Sp
Yo ass should use dis option if yo ass is rockin \s-1UTF\-16\s0 n' others which
linefeed aint $/.
.RE
.RS 4
.Sp
Like tha \fI\-D\fR option, dis be also fo' Encode hackers.
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIiconv\fR\|(1)
\&\fIlocale\fR\|(3)
Encode
Encode::Supported
Encode::Alias
PerlIO
