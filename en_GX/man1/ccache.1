'\" t
.\"     Title: ccache
.\"    Author: [see tha "Author" section]
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 01/06/2013
.\"    Manual: ccache Manual
.\"    Source: ccache 3.1.9
.\"  Language: Gangsta
.\"
.TH "CCACHE" "1" "01/06/2013" "ccache 3\&.1\&.9" "ccache Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
ccache \- a gangbangin' fast C/C++ compila cache
.SH "SYNOPSIS"
.sp
.nf
\fBccache\fR [\fIoptions\fR]
\fBccache\fR \fIcompiler\fR [\fIcompila options\fR]
\fIcompiler\fR [\fIcompila options\fR]                   (via symbolic link)
.fi
.SH "DESCRIPTION"
.sp
ccache be a cold-ass lil compila cache\&. Well shiiiit, it speedz up recompilation by cachin tha result of previous compilations n' detectin when tha same compilation is bein done again\&. Right back up in yo muthafuckin ass. Supported languages is C, C++, Objective\-C n' Objective\-C++\&.
.sp
ccache has been carefully freestyled ta always produce exactly tha same compila output dat you would git without tha cache\&. Da only way you should be able ta tell dat yo ass is rockin ccache is tha speed\&. Currently known exceptions ta dis goal is listed under BUGS\&. If you eva discover a undocumented case where ccache chizzlez tha output of yo' compiler, please let our asses know\&.
.SS "Features"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Keeps statistics on hits/misses\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Automatic cache size pimpment\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Can cache compilations dat generate warnings\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Easy installation\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Low overhead\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Optionally uses hard links where possible ta avoid copies\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Optionally compresses filez up in tha cache ta reduce disk space\&.
.RE
.SS "Limitations"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Only knows how tha fuck ta cache tha compilation of a single C/C++/Objective\-C/Objective\-C++ file\&. Other typez of compilations (multi\-file compilation, linking, etc) will silently fall back ta hustlin tha real compiler\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Only works wit GCC n' compilaz dat behave similar enough\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Some compila flags is not supported\&. If such a gangbangin' flag is detected, ccache will silently fall back ta hustlin tha real compiler\&.
.RE
.SH "RUN MODES"
.sp
There is two ways ta use ccache\&. Yo ass can either prefix yo' compilation commandz wit \fBccache\fR or you can let ccache masquerade as tha compila by bustin a symbolic link (named as tha compiler) ta ccache\&. Da first method is most convenient if you just wanna hook up ccache or wish ta use it fo' some specific projects\&. Da second method is most useful fo' when you wish ta use ccache fo' all yo' compilations\&.
.sp
To use tha straight-up original gangsta method, just make shizzle dat \fBccache\fR is up in yo' \fBPATH\fR\&.
.sp
To use tha symlinks method, do suttin' like this:
.sp
.if n \{\
.RS 4
.\}
.nf
cp ccache /usr/local/bin/
ln \-s ccache /usr/local/bin/gcc
ln \-s ccache /usr/local/bin/g++
ln \-s ccache /usr/local/bin/cc
ln \-s ccache /usr/local/bin/c++
.fi
.if n \{\
.RE
.\}
.sp
And so forth\&. This will work as long as tha directory wit symlinks comes before tha path ta tha compila (which is probably up in /usr/bin)\& fo' realz. Afta installin you may wish ta run \(lqwhich gcc\(rq ta make shizzle dat tha erect link is bein used\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBWarning\fR
.ps -1
.br
.sp
Da technique of lettin ccache masquerade as tha compila works well yo, but currently don\(cqt interact well wit other tools dat do tha same thang\&. Right back up in yo muthafuckin ass. See USING CCACHE WITH OTHER COMPILER WRAPPERS\&.
.sp .5v
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBWarning\fR
.ps -1
.br
.sp
Do not bust a hard link, bust a symbolic link\& fo' realz. A hard link will cause \(lqinteresting\(rq problems\&.
.sp .5v
.RE
.SH "OPTIONS"
.sp
These options only apply when you invoke ccache as \(lqccache\(rq\&. When invoked as a cold-ass lil compila (via a symlink as busted lyrics bout up in tha previous section), tha aiiight compila options apply n' you should refer ta tha compiler\(cqs documentation\&.
.PP
\fB\-c, \-\-cleanup\fR
.RS 4
Clean up tha cache by removin oldschool cached filez until tha specified file number n' cache size limits is not exceeded\&. This also recalculates tha cache file count n' size totals\&. Normally, it\(cqs not needed ta initiate cleanup manually as ccache keeps tha cache below tha specified limits at runtime n' keeps statistics up ta date on each compilation\&. Forcin a cold-ass lil cleanup is mostly useful if you manually modify tha cache contents or believe dat tha cache size statistics may be inaccurate\&.
.RE
.PP
\fB\-C, \-\-clear\fR
.RS 4
Clear tha entire cache, removin all cached files\&.
.RE
.PP
\fB\-F, \-\-max\-files\fR=\fIN\fR
.RS 4
Set tha maximum number of filez allowed up in tha cache\&. Da value is stored inside tha cache directory n' applies ta all future compilations\&. Cuz of tha way tha value is stored tha actual value used be always rounded down ta tha nearest multiple of 16\&.
.RE
.PP
\fB\-h, \-\-help\fR
.RS 4
Print a options summary page\&.
.RE
.PP
\fB\-M, \-\-max\-size\fR=\fISIZE\fR
.RS 4
Set tha maximum size of tha filez stored up in tha cache\&. Yo ass can specify a value up in gigabytes, megabytes or kilobytes by appendin a G, M or K ta tha value\&. Da default is gigabytes\&. Da actual value stored is rounded down ta tha nearest multiple of 16 kilobytes\&.
.RE
.PP
\fB\-s, \-\-show\-stats\fR
.RS 4
Print tha current statistics summary fo' tha cache\&.
.RE
.PP
\fB\-V, \-\-version\fR
.RS 4
Print version n' copyright shiznit\&.
.RE
.PP
\fB\-z, \-\-zero\-stats\fR
.RS 4
Zero tha cache statistics (but not tha configured limits)\&.
.RE
.SH "EXTRA OPTIONS"
.sp
When run as a cold-ass lil compiler, ccache probably just takes tha same ol' dirty command line options as tha compila yo ass is using\&. Da only exception ta dis is tha option \fB\-\-ccache\-skip\fR\&. That option can be used ta tell ccache ta avoid interpretin tha next option up in any way n' ta pass it along ta tha compila as\-is\&.
.sp
Da reason dis can be blingin is dat ccache do need ta parse tha command line n' determine what tha fuck be a input filename n' what tha fuck be a cold-ass lil compila option, as it needz tha input filename ta determine tha name of tha resultin object file (among other thangs)\&. Da heuristic ccache uses when parsin tha command line is dat any argument dat exists as a gangbangin' file is treated as a input file name\&. By rockin \fB\-\-ccache\-skip\fR you can force a option ta not be treated as a input file name n' instead be passed along ta tha compila as a cold-ass lil command line option\&.
.sp
Another case where \fB\-\-ccache\-skip\fR can be useful is if ccache interprets a option specially but shouldn\(cqt, since tha option has another meanin fo' yo' compila than what tha fuck ccache thinks\&.
.SH "ENVIRONMENT VARIABLES"
.sp
ccache uses a fuckin shitload of environment variablez ta control operation\&. In most cases you won\(cqt need any of these as tha defaults is ghon be fine\&.
.PP
\fBCCACHE_BASEDIR\fR
.RS 4
If you set tha environment variable
\fBCCACHE_BASEDIR\fR
to a absolute path ta a gangbangin' finger-lickin' directory, ccache rewrites absolute paths tha fuck into relatizzle paths before computin tha hash dat identifies tha compilation yo, but only fo' paths under tha specified directory\&. Right back up in yo muthafuckin ass. See tha rap under
COMPILING IN DIFFERENT DIRECTORIES\&.
.RE
.PP
\fBCCACHE_CC\fR
.RS 4
Yo ass can optionally set
\fBCCACHE_CC\fR
to force tha name of tha compila ta use\&. If you don\(cqt do dis then ccache works it up from tha command line\&.
.RE
.PP
\fBCCACHE_COMPILERCHECK\fR
.RS 4
By default, ccache includes tha modification time (\(lqmtime\(rq) n' size of tha compila up in tha hash ta ensure dat thangs up in dis biatch retrieved from tha cache is accurate\&. The
\fBCCACHE_COMPILERCHECK\fR
environment variable can be used ta select another game\&. Possible joints are:
.PP
\fBcontent\fR
.RS 4
Hash tha content of tha compila binary\&. This make ccache straight-up slightly slower compared ta the
\fBmtime\fR
settin yo, but make it cope betta wit compila upgrades durin a funky-ass build bootstrappin process\&.
.RE
.PP
\fBmtime\fR
.RS 4
Hash tha compiler\(cqs mtime n' size, which is fast\&. This is tha default\&.
.RE
.PP
\fBnone\fR
.RS 4
Don\(cqt hash anything\&. This may be phat fo' thangs where you can safely use tha cached thangs up in dis biatch even though tha compiler\(cqs mtime or size has chizzled (e\&.g\&. if tha compila is built as part of yo' build system n' tha compiler\(cqs source has not chizzled, or if tha compila only has chizzlez dat don\(cqt affect code generation)\&. Yo ass should only use the
\fBnone\fR
settin if you know what tha fuck yo ass is bustin\&.
.RE
.PP
\fIa command string\fR
.RS 4
Hash tha standard output n' standard error output of tha specified command\&. Da strang is ghon be split on whitespace ta smoke up tha command n' arguments ta run\&. No other interpretation of tha command strang is ghon be done, except dat tha special word \(lq%compiler%\(rq is ghon be replaced wit tha path ta tha compiler\&. Right back up in yo muthafuckin ass. Several commandz can be specified wit semicolon as separator\&. Examples:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

%compiler% \-v
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

%compiler% \-dumpmachine; %compiler% \-dumpversion
.RE
.sp
Yo ass should make shizzle dat tha specified command be as fast as possible since it is ghon be run once fo' each ccache invocation\&.
.sp
Identifyin tha compila rockin a cold-ass lil command is useful if you wanna avoid cache misses when tha compila has been rebuilt but not chizzled\&.
.sp
Another case is when tha compila (as peeped by ccache) straight-up isn\(cqt tha real compila but another compila wrapper \(em up in dat case, tha default
\fBmtime\fR
method will hash tha mtime n' size of tha other compila wrapper, which means dat ccache won\(cqt be able ta detect a cold-ass lil compila upgrade\&. Usin a suitable command ta identify tha compila is thus safer yo, but it\(cqs also slower, so you should consider continue rockin the
\fBmtime\fR
method up in combination with
\fBCCACHE_PREFIX\fR
if possible\&. Right back up in yo muthafuckin ass. See
USING CCACHE WITH OTHER COMPILER WRAPPERS\&.
.RE
.RE
.PP
\fBCCACHE_COMPRESS\fR
.RS 4
If you set tha environment variable
\fBCCACHE_COMPRESS\fR
then ccache will compress object filez n' other compila output it puts up in tha cache\&. But fuck dat shiznit yo, tha word on tha street is dat dis settin has no effect on how tha fuck filez is retrieved from tha cache; compressed n' uncompressed thangs up in dis biatch will still be usable regardless of dis setting\&.
.RE
.PP
\fBCCACHE_CPP2\fR
.RS 4
If you set tha environment variable
\fBCCACHE_CPP2\fR
then ccache aint gonna use tha optimisation of avoidin tha second call ta tha preprocessor by compilin tha preprocessed output dat was used fo' findin tha hash up in tha case of a cold-ass lil cache miss\&. This is primarily a thugged-out debuggin option, although it is possible dat some unusual compilaz gonna git problems wit tha intermediate filename extensions used up in dis optimisation, up in which case dis option could allow ccache ta be used anyway\&.
.RE
.PP
\fBCCACHE_DETECT_SHEBANG\fR
.RS 4
The
\fBCCACHE_DETECT_SHEBANG\fR
environment variable only has meanin on Windows\&. Well shiiiit, it instructs ccache ta open tha executable file ta detect the
\fB#!/bin/sh\fR
string, up in which case ccache will search for
\fBsh\&.exe\fR
in
\fBPATH\fR
and use dat ta launch tha executable\&.
.RE
.PP
\fBCCACHE_DIR\fR
.RS 4
The
\fBCCACHE_DIR\fR
environment variable specifies where ccache will keep its cached compila output\&. Da default is
\fB$HOME/\&.ccache\fR\&.
.RE
.PP
\fBCCACHE_DISABLE\fR
.RS 4
If you set tha environment variable
\fBCCACHE_DISABLE\fR
then ccache will just call tha real compiler, bypassin tha cache straight-up\&.
.RE
.PP
\fBCCACHE_EXTENSION\fR
.RS 4
ccache tries ta automatically determine tha extension ta use fo' intermediate preprocessor filez based on tha type of file bein compiled\&. Unfortunately dis sometimes don\(cqt work, fo' example when rockin tha \(lqaCC\(rq compila on HP\-UX\&. On systems like dis you can use the
\fBCCACHE_EXTENSION\fR
option ta override tha default\&. On HP\-UX set dis environment variable to
\fBi\fR
if you use tha \(lqaCC\(rq compiler\&.
.RE
.PP
\fBCCACHE_EXTRAFILES\fR
.RS 4
If you set tha environment variable
\fBCCACHE_EXTRAFILES\fR
to a list of paths then ccache will include tha contentz of dem filez when calculatin tha hash sum\&. Da list separator is semicolon up in Windows systems n' colon on other systems\&.
.RE
.PP
\fBCCACHE_HARDLINK\fR
.RS 4
If you set tha environment variable
\fBCCACHE_HARDLINK\fR
then ccache will attempt ta use hard links from tha cache directory when bustin tha compila output rather than rockin a gangbangin' file copy\&. Usin hard links may be slightly fasta up in some thangs yo, but can confuse programs like \(lqmake\(rq dat rely on modification times\& fo' realz. Another thang ta keep up in mind is dat if tha resultin object file is modified up in any way, dis corrupts tha cached object file as well\& yo. Hard links is never made fo' compressed cache files\&. This means dat you should not set the
\fBCCACHE_COMPRESS\fR
variable if you wanna use hard links\&.
.RE
.PP
\fBCCACHE_HASHDIR\fR
.RS 4
This  drops some lyrics ta ccache ta hash tha current hustlin directory when calculatin tha hash dat is used ta distinguish two compilations\&. This prevents a problem wit tha storage of tha current hustlin directory up in tha debug info of a object file, which can lead ccache ta give a cold-ass lil cached object file dat has tha hustlin directory up in tha debug info set incorrectly\&. This option is off by default as tha incorrect settin of dis debug info rarely causes problems\&. If you strike problems wit GDB not rockin tha erect directory then enable dis option\&.
.RE
.PP
\fBCCACHE_LOGFILE\fR
.RS 4
If you set the
\fBCCACHE_LOGFILE\fR
environment variable then ccache will write shiznit on what tha fuck it is bustin ta tha specified file\&. This is useful fo' trackin down problems\&.
.RE
.PP
\fBCCACHE_NLEVELS\fR
.RS 4
Da environment variable
\fBCCACHE_NLEVELS\fR
allows you ta chizzle tha number of levelz of hash up in tha cache directory\&. Da default is 2\&. Da minimum is 1 n' tha maximum is 8\&.
.RE
.PP
\fBCCACHE_NODIRECT\fR
.RS 4
If you set tha environment variable
\fBCCACHE_NODIRECT\fR
then ccache aint gonna use tha direct mode\&.
.RE
.PP
\fBCCACHE_NOSTATS\fR
.RS 4
If you set tha environment variable
\fBCCACHE_NOSTATS\fR
then ccache aint gonna update tha statistics filez on each compilation\&.
.RE
.PP
\fBCCACHE_PATH\fR
.RS 4
Yo ass can optionally set
\fBCCACHE_PATH\fR
to a cold-ass lil colon\-separated path where ccache will look fo' tha real compilers\&. If you don\(cqt do dis then ccache will look fo' tha straight-up original gangsta executable matchin tha compila name up in tha normal
\fBPATH\fR
that isn\(cqt a symbolic link ta ccache itself\&.
.RE
.PP
\fBCCACHE_PREFIX\fR
.RS 4
This option addz a prefix ta tha command line dat ccache runs when invokin tha compiler\& fo' realz. Also peep tha section below on rockin ccache wit \(lqdistcc\(rq\&.
.RE
.PP
\fBCCACHE_READONLY\fR
.RS 4
The
\fBCCACHE_READONLY\fR
environment variable  drops some lyrics ta ccache ta attempt ta use existin cached object filez yo, but not ta try ta add anythang freshly smoked up ta tha cache\&. If yo ass is rockin dis cuz your
\fBCCACHE_DIR\fR
is read\-only, then you may find dat you also need ta set
\fBCCACHE_TEMPDIR\fR
as otherwise ccache will fail ta create temporary files\&.
.RE
.PP
\fBCCACHE_RECACHE\fR
.RS 4
This forces ccache ta not use any cached thangs up in dis biatch, even if it findz them\&. New thangs up in dis biatch is still cached yo, but existin cache entries is ignored\&.
.RE
.PP
\fBCCACHE_SLOPPINESS\fR
.RS 4
By default, ccache tries ta give as few false cache hits as possible\&. But fuck dat shiznit yo, tha word on tha street is dat up in certain thangs it\(cqs possible dat you know thangs dat ccache can\(cqt take fo' granted\&. The
\fBCCACHE_SLOPPINESS\fR
environment variable make it possible ta tell ccache ta chillax some checks up in order ta increase tha hit rate\&. Da value should be a cold-ass lil comma\-separated strang wit options\& fo' realz. Available options are:
.PP
\fBfile_macro\fR
.RS 4
Ignore
\fB__FILE__\fR
bein present up in tha source\&.
.RE
.PP
\fBinclude_file_mtime\fR
.RS 4
Don\(cqt check tha modification time of include filez up in tha direct mode\&.
.RE
.PP
\fBtime_macros\fR
.RS 4
Ignore
\fB__DATE__\fR
and
\fB__TIME__\fR
bein present up in tha source code\&.
.RE
.sp
See tha rap under
TROUBLESHOOTING
for mo' shiznit\&.
.RE
.PP
\fBCCACHE_TEMPDIR\fR
.RS 4
The
\fBCCACHE_TEMPDIR\fR
environment variable specifies where ccache will put temporary files\&. Da default is
\fB$CCACHE_DIR/tmp\fR\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
In previous versionz of ccache,
\fBCCACHE_TEMPDIR\fR
had ta be on tha same filesystem as the
\fBCCACHE_DIR\fR
path yo, but dis requirement has been chillaxed\&.)
.sp .5v
.RE
.RE
.PP
\fBCCACHE_UMASK\fR
.RS 4
This sets tha umask fo' ccache n' all lil pimp processes (like fuckin tha compiler)\&. This is mostly useful when you wish ta share yo' cache wit other users\&. Note dat dis also affects tha file permissions set on tha object filez pimped from yo' compilations\&.
.RE
.PP
\fBCCACHE_UNIFY\fR
.RS 4
If you set tha environment variable
\fBCCACHE_UNIFY\fR
then ccache will bust a C/C++ unifier when hashin tha preprocessor output if the
\fB\-g\fR
option aint used\&. Da unifier is slower than a aiiight hash, so settin dis environment variable loses a lil bit of speed yo, but it means dat ccache can take advantage of not recompilin when tha chizzlez ta tha source code consist of reformattin only\&. Note dat using
\fBCCACHE_UNIFY\fR
changes tha hash, so cached compilations with
\fBCCACHE_UNIFY\fR
set cannot be used when
\fBCCACHE_UNIFY\fR
is not set n' vice versa\&. Da reason tha unifier is off by default is dat it can give incorrect line number shiznit up in compila warnin lyrics\& fo' realz. Also note dat enablin tha unifier implies turnin off tha direct mode\&.
.RE
.SH "CACHE SIZE MANAGEMENT"
.sp
By default ccache has a one gigabyte limit on tha total size of filez up in tha cache n' no maximum number of files\&. Yo ass can set different limits rockin tha \fB\-M\fR/\fB\-\-max\-size\fR n' \fB\-F\fR/\fB\-\-max\-files\fR options\&. Use \fBccache \-s/\-\-show\-stats\fR ta peep tha cache size n' tha currently configured limits (in addizzle ta other various statistics)\&.
.SH "CACHE COMPRESSION"
.sp
ccache can optionally compress all filez it puts tha fuck into tha cache rockin tha compression library zlib\&. While dis involves a negligible performizzle slowdown, it hella increases tha number of filez dat fit up in tha cache\&. Yo ass can turn on compression by settin tha \fBCCACHE_COMPRESS\fR environment variable\&.
.SH "HOW CCACHE WORKS"
.sp
Da basic scam is ta detect when yo ass is compilin exactly tha same code a second time n' reuse tha previously produced output\&. Da detection is done by hashin different kindz of shiznit dat should be unique fo' tha compilation n' then rockin tha hash sum ta identify tha cached output\&. ccache uses MD4, a straight-up fast cryptographic hash algorithm, fo' tha hashing\&. (MD4 is nowadays too weak ta be useful up in cryptographic contexts yo, but it should be safe enough ta be used ta identify recompilations\&.) On a cold-ass lil cache hit, ccache be able ta supply all of tha erect compila outputs (includin all warnings, dependency file, etc) from tha cache\&.
.sp
ccache has two wayz of bustin tha detection:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
the
\fBdirect mode\fR, where ccache hashes tha source code n' include filez directly
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
the
\fBpreprocessor mode\fR, where ccache runs tha preprocessor on tha source code n' hashes tha result
.RE
.sp
Da direct mode is generally fasta since hustlin tha preprocessor has some overhead\&.
.SS "Common hashed shiznit"
.sp
For both modes, tha followin shiznit is included up in tha hash:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
the extension used by tha compila fo' a gangbangin' file wit preprocessor output (normally
\fB\&.i\fR
for C code and
\fB\&.ii\fR
for C++ code)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
the compiler\(cqs size n' modification time (or other compiler\-specific shiznit specified by
\fBCCACHE_COMPILERCHECK\fR)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
the name of tha compiler
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
the current directory (if
\fBCCACHE_HASHDIR\fR
is set)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
contentz of filez specified by
\fBCCACHE_EXTRAFILES\fR
(if any)
.RE
.SS "Da direct mode"
.sp
In tha direct mode, tha hash is formed of tha common shiznit and:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
the input source file
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
the command line options
.RE
.sp
Based on tha hash, a thugged-out data structure called \(lqmanifest\(rq is looked up in tha cache\&. Da manifest gotz nuff:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
references ta cached compilation thangs up in dis biatch (object file, dependency file, etc) dat was produced by previous compilations dat matched tha hash
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
paths ta tha include filez dat was read all up in tha time tha compilation thangs up in dis biatch was stored up in tha cache
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
hash sumz of tha include filez all up in tha time tha compilation thangs up in dis biatch was stored up in tha cache
.RE
.sp
Da current contentz of tha include filez is then hashed n' compared ta tha shiznit up in tha manifest\&. If there be a match, ccache knows tha result of tha compilation\&. If there is no match, ccache falls back ta hustlin tha preprocessor\&. Da output from tha preprocessor is parsed ta find tha include filez dat was read\&. Da paths n' hash sumz of dem include filez is then stored up in tha manifest along wit shiznit bout tha produced compilation result\&.
.sp
Da direct mode is ghon be disabled if any of tha followin holds:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
the environment variable
\fBCCACHE_NODIRECT\fR
is set
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a modification time of one of tha include filez is too freshly smoked up (needed ta avoid a race condition)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
the unifier is enabled (the environment variable
\fBCCACHE_UNIFY\fR
is set)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a compila option not supported by tha direct mode is used:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a
\fB\-Wp,\fR\fB\fIX\fR\fR
compila option other than
\fB\-Wp,\-MD,\fR\fB\fIpath\fR\fR
and
\fB\-Wp,\-MMD,\fR\fB\fIpath\fR\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fB\-Xpreprocessor\fR
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
the strang \(lq__TIME__\(rq is present outside comments n' strang literals up in tha source code
.RE
.SS "Da preprocessor mode"
.sp
In tha preprocessor mode, tha hash is formed of tha common shiznit and:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
the preprocessor output from hustlin tha compila with
\fB\-E\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
the command line options except options dat affect include filez (\fB\-I\fR,
\fB\-include\fR,
\fB\-D\fR, etc; tha theory is dat these options will chizzle tha preprocessor output if they have any effect at all)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
any standard error output generated by tha preprocessor
.RE
.sp
Based on tha hash, tha cached compilation result can be looked up directly up in tha cache\&.
.SH "COMPILING IN DIFFERENT DIRECTORIES"
.sp
Some shiznit included up in tha hash dat identifies a unique compilation may contain absolute paths:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da preprocessed source code may contain absolute paths ta include filez if tha compila option
\fB\-g\fR
is used or if absolute paths is given to
\fB\-I\fR
and similar compila options\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Paths specified by compila options (such as
\fB\-I\fR,
\fB\-MF\fR, etc) may be absolute\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da source code file path may be absolute, n' dat path may substituted for
\fB__FILE__\fR
macros up in tha source code or included up in warnings emitted ta standard error by tha preprocessor\&.
.RE
.sp
This means dat if you compile tha same code up in different locations, you can\(cqt share compilation thangs up in dis biatch between tha different build directories since you git cache misses cuz of tha absolute build directory paths dat is part of tha hash\&. To mitigate dis problem, you can specify a \(lqbase directory\(rq by settin tha \fBCCACHE_BASEDIR\fR variable ta a absolute path ta tha directory\&. ccache will then rewrite absolute paths dat is under tha base directory (i\&.e\&., paths dat have tha base directory as a prefix) ta relatizzle paths when constructin tha hash\& fo' realz. A typical path ta use as tha base directory is yo' home directory or another directory dat be a parent of yo' build directories\&. (Don\(cqt use / as tha base directory since dat will make ccache also rewrite paths ta system header files, which don\(cqt bust anything\&.)
.sp
Da drawbackz of rockin \fBCCACHE_BASEDIR\fR are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If you specify a absolute path ta tha source code file,
\fB__FILE__\fR
macros is ghon be expanded ta a relatizzle path instead\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If you specify a absolute path ta tha source code file n' compile with
\fB\-g\fR, tha source code path stored up in tha object file may point ta tha wack directory, which may prevent debuggers like GDB from findin tha source code\&. Right back up in yo muthafuckin ass. Sometimes, a work\-around is ta chizzle tha directory explicitly wit tha \(lqcd\(rq command up in GDB\&.
.RE
.SH "PRECOMPILED HEADERS"
.sp
ccache has support fo' GCC\(cqs precompiled headers\&. But fuck dat shiznit yo, tha word on tha street is dat you gotta do some thangs ta make it work properly:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Yo ass must set
\fBCCACHE_SLOPPINESS\fR
to
\fBtime_macros\fR\&. Da reason is dat ccache can\(cqt tell whether
\fB__TIME__\fR
or
\fB__DATE__\fR
is used when rockin a precompiled header\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Yo ass must either:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
use the
\fB\-include\fR
compila option ta include tha precompiled header (i\&.e\&., don\(cqt use
\fB#include\fR
in tha source code ta include tha header); or
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
add the
\fB\-fpch\-preprocess\fR
compila option when compiling\&.
.RE
.sp
If you don\(cqt do this, either tha non\-precompiled version of tha header file is ghon be used (if available) or ccache will fall back ta hustlin tha real compila n' increase tha statistics counta \(lqpreprocessor error\(rq (if tha non\-precompiled header file aint available)\&.
.RE
.SH "SHARING A CACHE"
.sp
A crew of pimpers can increase tha cache hit rate by pluggin a cold-ass lil cache directory\&. To share a cold-ass lil cache without unpleasant side effects, tha followin conditions should ta be met:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Use tha same
\fBCCACHE_DIR\fR
environment variable setting\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Unset the
\fBCCACHE_HARDLINK\fR
environment variable\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Make shizzle mah playas sets the
\fBCCACHE_UMASK\fR
environment variable ta 002\&. This ensures dat cached filez is accessible ta mah playas up in tha group\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Make shizzle dat all playas have write permission up in tha entire cache directory (and dat you trust all playaz of tha shared cache)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Make shizzle dat tha setgid bit is set on all directories up in tha cache\&. This  drops some lyrics ta tha filesystem ta inherit crew ballershizzle fo' freshly smoked up directories\&. Da command \(lqfind $CCACHE_DIR \-type d | xargs chmod g+s\(rq might be useful fo' this\&.
.RE
.sp
Da reason ta avoid tha hard link mode is dat tha hard links cause unwanted side effects, as all links ta a cold-ass lil cached file share tha file\(cqs modification timestamp\&. This thangs up in dis biatch up in false dependencies ta be triggered by timestamp\-based build systems whenever another user links ta a existin file\&. Typically, playas will peep dat they libraries n' binaries is relinked without reason\&.
.sp
Yo ass may also wanna make shizzle dat tha pimpers have \fBCCACHE_BASEDIR\fR set appropriately, as discussed up in tha previous section\&.
.SH "SHARING A CACHE ON NFS"
.sp
It be possible ta put tha cache directory on a NFS filesystem (or similar filesystems) yo, but keep up in mind that:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Havin tha cache on NFS may slow down compilation\&. Make shizzle ta do some benchmarkin ta peep if it\(cqs worth it\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ccache hasn\(cqt been tested straight-up thoroughly on NFS\&.
.RE
.sp
A tip is ta set \fBCCACHE_TEMPDIR\fR ta a gangbangin' finger-lickin' directory on tha local host ta avoid NFS traffic fo' temporary files\&.
.SH "USING CCACHE WITH OTHER COMPILER WRAPPERS"
.sp
Da recommended way of combinin ccache wit another compila wrapper (like fuckin \(lqdistcc\(rq) is by rockin tha \fBCCACHE_PREFIX\fR option\&. Yo ass just need ta set tha environment variable \fBCCACHE_PREFIX\fR ta tha name of tha wrapper (e\&.g\&. \fBdistcc\fR) n' ccache will prefix tha command line wit tha specified command when hustlin tha compiler\&.
.sp
Unless you set \fBCCACHE_COMPILERCHECK\fR ta a suitable command (see tha description of dat configuration option), it aint recommended ta use tha form \fBccache anotherwrapper compila args\fR as tha compilation command\&. It\(cqs also not recommended ta use tha masqueradin technique fo' tha other compila wrapper\&. Da reason is dat by default, ccache will up in both cases hash tha mtime n' size of tha other wrapper instead of tha real compiler, which means that:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Compila upgrades aint gonna be detected properly\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da cached thangs up in dis biatch aint gonna be shared between compilations wit n' without tha other wrapper\&.
.RE
.sp
Another minor thang is dat if \fBCCACHE_PREFIX\fR aint used, ccache will needlessly invoke tha other wrapper when hustlin tha preprocessor\&.
.SH "BUGS"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ccache don\(cqt handle tha GNU Assembler\(cqs
\fB\&.incbin\fR
directizzle erectly\&. This directizzle can be embedded up in tha source code inside an
\fB\fIasm\fR\fR
statement up in order ta include a gangbangin' file verbatim up in tha object file\&. If tha included file is modified, ccache don\(cqt pick up tha chizzle since tha inclusion isn\(cqt done by tha preprocessor\& fo' realz. A workaround of dis problem is ta set
\fBCCACHE_EXTRAFILES\fR
to tha path of tha included file\&.
.RE
.SH "TROUBLESHOOTING"
.SS "General"
.sp
A general tip fo' gettin shiznit bout what tha fuck ccache is bustin is ta enable debug loggin by settin \fBCCACHE_LOGFILE\fR\&. Da log gotz nuff executed commands, blingin decisions dat ccache makes, read n' freestyled files, etc\& fo' realz. Another way of keepin track of what tha fuck is goin down is ta check tha output of \fBccache \-s\fR\&.
.SS "Performance"
.sp
ccache has been freestyled ta big-ass up well outta tha box yo, but sometimes you may gotta do some adjustmentz of how tha fuck you use tha compila n' ccache up in order ta improve performance\&.
.sp
Since ccache works dopest when I/O is fast, put tha cache directory on a gangbangin' fast storage thang if possible\& yo. Havin fuckin shitloadz of free memory so dat filez up in tha cache directory stay up in tha disk cache be also preferrable\&.
.sp
A phat way of monitorin how tha fuck well ccache works is ta run \fBccache \-s\fR before n' afta yo' build n' then compare tha statistics counters\& yo. Here is some common problems n' what tha fuck may be done ta increase tha hit rate:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If \(lqcache hit (preprocessed)\(rq has been incremented instead of \(lqcache hit (direct)\(rq, ccache has fallen back ta preprocessor mode, which is generally slower\&. Right back up in yo muthafuckin ass. Some possible reasons are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da source code has been modified up in such a way dat tha preprocessor output aint affected\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Compila arguments dat is hashed up in tha direct mode but not up in tha preprocessor mode have chizzled (\fB\-I\fR,
\fB\-include\fR,
\fB\-D\fR, etc) n' they didn\(cqt affect tha preprocessor output\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da compila option
\fB\-Xpreprocessor\fR
or
\fB\-Wp,\fR\fB\fIX\fR\fR
(except
\fB\-Wp,\-MD,\fR\fB\fIpath\fR\fR
and
\fBWp,\-MMD,\fR\fB\fIpath\fR\fR) is used\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
This was tha straight-up original gangsta compilation wit a freshly smoked up value of
\fBCCACHE_BASEDIR\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A modification time of one of tha include filez is too freshly smoked up (created tha same second as tha compilation is bein done)\&. This check is made ta avoid a race condition\&. To fix this, create tha include file earlier up in tha build process, if possible, or set
\fBCCACHE_SLOPPINESS\fR
to
\fBinclude_file_mtime\fR
if yo ass is willin ta take tha risk\&. (Da race condizzle consistz of these events: tha preprocessor is run; a include file is modified by one of mah thugs; tha freshly smoked up include file is hashed by ccache; tha real compila is run on tha preprocessor\(cqs output, which gotz nuff data from tha oldschool header file; tha wack object file is stored up in tha cache\&.)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The
\fB__TIME__\fR
preprocessor macro is (potentially) bein used\&. ccache turns off direct mode if \(lq__TIME__\(rq is present up in tha source code outside comments n' strang literals\&. This is done as a safety measure since tha strang indicates dat a
\fB__TIME__\fR
macro
\fImay\fR
affect tha output\&. (To be sure, ccache would gotta run tha preprocessor yo, but tha sole point of tha direct mode is ta avoid that\&.) If you know that
\fB__TIME__\fR
isn\(cqt used up in practise, or don\(cqt care if ccache produces objects where
\fB__TIME__\fR
is expanded ta suttin' up in tha past, you can set
\fBCCACHE_SLOPPINESS\fR
to
\fBtime_macros\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The
\fB__DATE__\fR
preprocessor macro is (potentially) bein used n' tha date has chizzled\&. This is similar ta how
\fB__TIME__\fR
is handled\&. If \(lq__DATE__\(rq is present up in tha source code outside comments n' strang literals, ccache hashes tha current date up in order ta be able ta produce tha erect object file if the
\fB__DATE__\fR
macro affects tha output\&. If you know that
\fB__DATE__\fR
isn\(cqt used up in practise, or don\(cqt care if ccache produces objects where
\fB__DATE__\fR
is expanded ta suttin' up in tha past, you can set
\fBCCACHE_SLOPPINESS\fR
to
\fBtime_macros\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The
\fB__FILE__\fR
preprocessor macro is (potentially) bein used n' tha file path has chizzled\&. If \(lq__FILE__\(rq is present up in tha source code outside comments n' strang literals, ccache hashes tha current input file path up in order ta be able ta produce tha erect object file if the
\fB__FILE__\fR
macro affects tha output\&. If you know that
\fB__FILE__\fR
isn\(cqt used up in practise, or don\(cqt care if ccache produces objects where
\fB__FILE__\fR
is expanded ta tha wack path, you can set
\fBCCACHE_SLOPPINESS\fR
to
\fBfile_macro\fR\&.
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If \(lqcache miss\(rq has been incremented even though tha same code has been compiled n' cached before, ccache has either detected dat suttin' has chizzled anyway or a cold-ass lil cleanup has been performed (either explicitly or implicitly when a cold-ass lil cache limit has been reached)\&. Right back up in yo muthafuckin ass. Some like unobvious thangs dat may result up in a cold-ass lil cache miss is usage of
\fB__TIME__\fR
or
\fB__DATE__\fR
macros, or use of automatically generated code dat gotz nuff a timestamp, build counta or other volatile shiznit\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If \(lqmultiple source files\(rq has been incremented, it\(cqs a indication dat tha compila has been invoked on nuff muthafuckin source code filez at once\&. ccache don\(cqt support that\&. Compile tha source code filez separately if possible\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If \(lqunsupported compila option\(rq has been incremented, enable debug loggin n' check which option was rejected\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If \(lqpreprocessor error\(rq has been incremented, one possible reason is dat precompiled headaz is bein used\&. Right back up in yo muthafuckin ass. See
PRECOMPILED HEADERS
for how tha fuck ta remedy this\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If \(lqcan\(cqt use precompiled header\(rq has been incremented, see
PRECOMPILED HEADERS\&.
.RE
.SS "Errors when compilin wit ccache"
.sp
If compilation don\(cqt work wit ccache yo, but it works without it, one possible reason is dat tha compila can\(cqt compile preprocessed output erectly\& fo' realz. A workaround dat may work is ta set \fBCCACHE_CPP2\fR\&. This will make cache misses slower, though, so it is betta ta find n' fix tha root cause\&.
.SS "Corrupt object files"
.sp
It should be noted dat ccache is susceptible ta general storage problems\&. If a wack object file sneaks tha fuck into tha cache fo' some reason, it will of course stay bad\&. Right back up in yo muthafuckin ass. Some possible reasons fo' erroneous object filez is wack hardware (disk drive, disk controller, memory, etc), buggy drivers or file systems, a wack \fBCCACHE_PREFIX\fR command or compila wrapper\&. If dis happens, tha easiest way of fixin it is this:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Build so dat tha wack object file endz up in tha build tree\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Remove tha wack object file from tha build tree\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Rebuild with
\fBCCACHE_RECACHE\fR
set\&.
.RE
.sp
An alternatizzle is ta clear tha whole cache wit \fBccache \-C\fR if you don\(cqt mind losin other cached thangs up in dis biatch\&.
.sp
There is no reported thangs bout ccache producin fucked up object filez reproducibly\&. That don\(cqt mean it can\(cqt happen, so if you find a repeatable case, please report it\&.
.SH "MORE INFORMATION"
.sp
Credits, mailin list shiznit, bug reportin instructions, source code, etc, can be found on ccache\(cqs wizzy crib: http://ccache\&.samba\&.org\&.
.SH "AUTHOR"
.sp
ccache was originally freestyled by Andrew Tridgell n' is currently pimped n' maintained by Joel Rosdahl\&. Right back up in yo muthafuckin ass. See AUTHORS\&.txt or AUTHORS\&.html n' http://ccache\&.samba\&.org/credits\&.html fo' a list of contributors\&.
