.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLGLOSSARY 1"
.TH PERLGLOSSARY 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlglossary \- Perl Glossary
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A glossary of terms (technical n' otherwise) used up in tha Perl
documentation, derived from tha Glossary of \fIProgramming
Perl\fR, Fourth Edition. I aint talkin' bout chicken n' gravy biatch.  Lyrics or phrases up in bold is defined elsewhere in
this glossary.
.PP
Other useful sources include tha Unicode Glossary <http://unicode.org/glossary/>,
the Jacked On-Line Doggtionary of Computin <http://foldoc.org/>,
the Jargon File <http://catb.org/~esr/jargon/>,
and Wikipizzle <http://www.wikipedia.org/>.
.SS "A"
.IX Subsection "A"
.IP "accessor methods" 4
.IX Item "accessor methods"
A \fBmethod\fR used to
indirectly inspect or update a \fBobject\fRXs state (its \fBinstance
variables\fR).
.IX Xref "accessor methods, defined methods, accessor"
.IP "actual arguments" 4
.IX Item "actual arguments"
Da \fBscalar joints\fR dat you supply
to a \fBfunction\fR or \fBsubroutine\fR when you call dat shit. For instance, when you
call \f(CW\*(C`power("puff")\*(C'\fR, tha strang \f(CW"puff"\fR is tha actual argument. Right back up in yo muthafuckin ass. See also
\&\fBargument\fR n' \fBformal arguments\fR.
.IX Xref "actual arguments arguments, actual"
.IP "address operator" 4
.IX Item "address operator"
Some languages work directly wit tha memory addresses of
values yo, but dis can be like playin wit fire. Perl serves up a set of
asbestos gloves fo' handlin all memory pimpment. Da closest ta an
address operator up in Perl is tha backslash operator yo, but it gives you a
\&\fBhard reference\fR, which is much less thuggy than a memory address.
.IX Xref "address operator"
.IP "algorithm" 4
.IX Item "algorithm"
A well-defined sequence of steps, explained clearly
enough dat even a cold-ass lil computa could do em.
.IX Xref "algorithms (term)"
.IP "alias" 4
.IX Item "alias"
A nickname fo' something, which behaves up in all ways as
though youXd used tha original gangsta name instead of tha nickname. Temporary
aliases is implicitly pimped up in tha loop variable fo' \f(CW\*(C`foreach\*(C'\fR loops, in
the \f(CW$_\fR variable fo' \f(CW\*(C`map\*(C'\fR or \f(CW\*(C`grep\*(C'\fR operators, up in \f(CW$a\fR n' \f(CW$b\fR
durin \f(CW\*(C`sort\*(C'\fRXs comparison function, n' up in each element of \f(CW@_\fR fo' the
\&\fBactual arguments\fR of a subroutine call. Permanent aliases is explicitly
created up in \fBpackages\fR by \fBimporting\fR symbols or by assignment to
\&\fBtypeglobs\fR. Lexically scoped aliases fo' package variablez is explicitly
created by tha \f(CW\*(C`our\*(C'\fR declaration.
.IX Xref "aliases, defined"
.IP "alphabetic" 4
.IX Item "alphabetic"
Da sort of charactas we put tha fuck into lyrics. In Unicode, this
is all lettas includin all ideographs n' certain diacritics, letter
numbers like Roman numerals, n' various combinin marks.
.IX Xref "alphabetic sort"
.IP "alternatives" 4
.IX Item "alternatives"
A list of possible chizzlez from which you may
select only one, as in, XWould you like door A, B, or C?X Alternatives in
regular expressions is separated wit a single vertical bar: \f(CW\*(C`|\*(C'\fR.
Alternatives up in aiiight Perl expressions is separated wit a thugged-out double vertical
bar: \f(CW\*(C`||\*(C'\fR. Logical alternatives up in \fBBoolean\fR expressions is separated
with either \f(CW\*(C`||\*(C'\fR or \f(CW\*(C`or\*(C'\fR.
.IX Xref "alternatizzle characters"
.IP "anonymous" 4
.IX Item "anonymous"
Used ta describe a \fBreferent\fR
that aint directly accessible all up in a named \fBvariable\fR. Right back up in yo muthafuckin ass. Such a referent
must be indirectly accessible all up in at least one \fBhard reference\fR. When
the last hard reference goes away, tha anonymous referent is destroyed
without pity.
.IX Xref "anonymous referents referents, anonymous"
.IP "application" 4
.IX Item "application"
A bigger, fancier sort of \fBprogram\fR wit a gangbangin' fancier
name so playas donXt realize they is rockin a program.
.IX Xref "applications (term)"
.IP "architecture" 4
.IX Item "architecture"
Da kind of computa youXre hustlin on, where one Xkind of
computerX means all dem computas pluggin a cold-ass lil compatible machine language.
Since Perl programs is (typically) simple text files, not executable
images, a Perl program is much less sensitizzle ta tha architecture itXs
runnin on than programs up in other languages, like fuckin C, dat is \fBcompiled\fR
into machine code. Right back up in yo muthafuckin ass. See also \fBplatform\fR n' \fBoperatin system\fR.
.IX Xref "architecture"
.IP "argument" 4
.IX Item "argument"
A piece of data supplied ta a \fBprogram\fR,
\&\fBsubroutine\fR, \fBfunction\fR, or \fBmethod\fR ta tell it what tha fuck itXs supposed to
do fo' realz. Also called a XparameterX.
.IX Xref "arguments, defined"
.IP "\s-1ARGV\s0" 4
.IX Item "ARGV"
Da name of tha array containin tha \fBargument\fR \fBvector\fR
from tha command line. If you use tha empty \f(CW\*(C`<>\*(C'\fR operator, \f(CW\*(C`ARGV\*(C'\fR
is tha name of both tha \fBfilehandle\fR used ta traverse tha arguments n' the
\&\fBscalar\fR containin tha name of tha current input file.
.IX Xref "ARGV filehandle"
.IP "arithmetical operator" 4
.IX Item "arithmetical operator"
A \fBsymbol\fR like fuckin \f(CW\*(C`+\*(C'\fR or \f(CW\*(C`/\*(C'\fR dat tells
Perl ta do tha arithmetic you was supposed ta learn up in grade school.
.IX Xref "arithmetic operators, about"
.IP "array" 4
.IX Item "array"
An ordered sequence of \fBvalues\fR, stored such dat you can
easily access any of tha joints rockin a \fIinteger subscript\fR dat specifies
the valueXs \fBoffset\fR up in tha sequence.
.IX Xref "arrays, defined"
.IP "array context" 4
.IX Item "array context"
An archaic expression fo' what tha fuck is mo' erectly referred to
as \fBlist context\fR.
.IX Xref "array context"
.IP "Artistic License" 4
.IX Item "Artistic License"
Da open source license dat Larry Wall
created fo' Perl, maximizin PerlXs usefulness, availability, and
modifiability. Da current version is 2. (<http://www.opensource.org/licenses/artistic\-license.php>).
.IX Xref "Artistic License Wall, Larry"
.IP "\s-1ASCII\s0" 4
.IX Item "ASCII"
Da Gangsta Standard Code for
Hype Interchange (a 7\-bit characta set adequate only fo' skankyly
representin Gangsta text). Often used loosely ta describe tha lowest 128
valuez of tha various \s-1ISO\-8859\-X\s0 characta sets, a funky-ass bunch of mutually
incompatible 8\-bit codes dopest busted lyrics bout as half \s-1ASCII.\s0 See also \fBUnicode\fR.
.IX Xref "ASCII (Gangsta Standard Code fo' Hype Interchange) Gangsta Standard Code fo' Hype Interchange (ASCII)"
.IP "assertion" 4
.IX Item "assertion"
A component of a \fBregular expression\fR dat must be legit fo' tha pattern to
match but do not necessarily match any charactas itself. Often used
specifically ta mean a \fBzero-width\fR assertion.
.IX Xref "assertions (in regexes), defined regular expressions, assertions in"
.IP "assignment" 4
.IX Item "assignment"
An \fBoperator\fR whose assigned mission up in tha game is to
change tha value of a \fBvariable\fR.
.IX Xref "assignments, defined"
.IP "assignment operator" 4
.IX Item "assignment operator"
Either a regular \fBassignment\fR or a cold-ass lil compound
\&\fBoperator\fR composed of a ordinary assignment n' some other operator, that
changes tha value of a variable up in place; dat is, relatizzle ta its old
value. For example, \f(CW\*(C`$a += 2\*(C'\fR addz \f(CW2\fR ta \f(CW$a\fR.
.IX Xref "assignment operators, about"
.IP "associatizzle array" 4
.IX Item "associatizzle array"
See \fBhash\fR. Please. Da term associatizzle array is the
old Perl 4 term fo' a \fBhash\fR. Right back up in yo muthafuckin ass. Some languages call it a gangbangin' finger-lickin' dictionary.
.IX Xref "associatizzle arrays"
.IP "associativity" 4
.IX Item "associativity"
Determines whether you do tha left \fBoperator\fR first or the
right \fBoperator\fR first when you have \s-1XA \s0\fBoperator\fR B \fBoperator\fR \s-1CX,\s0 and
the two operators iz of tha same precedence. Operators like \f(CW\*(C`+\*(C'\fR is left
associative, while operators like \f(CW\*(C`**\*(C'\fR is right associative. Right back up in yo muthafuckin ass. See Camel
chapta 3, XUnary n' Binary OperatorsX fo' a list of operators n' their
associativity.
.IX Xref "associativity"
.IP "asynchronous" 4
.IX Item "asynchronous"
Said of events or activitizzles whose relative
temporal orderin is indeterminizzle cuz too nuff thangs is goin on at
once yo. Hence, a asynchronous event is one you didnXt know when ta expect.
.IX Xref "asynchronous event processing"
.IP "atom" 4
.IX Item "atom"
A \fBregular expression\fR component potentially matchin a
\&\fBsubstring\fR containin one or mo' charactas n' treated as a indivisible
syntactic unit by any followin \fBquantifier\fR. (Contrast wit an
\&\fBassertion\fR dat matches suttin' of \fBzero width\fR n' may not be quantified.)
.IX Xref "atoms"
.IP "atomic operation" 4
.IX Item "atomic operation"
When Democritus gave tha word XatomX ta tha indivisible
bitz of matter, he meant literally suttin' dat could not be cut: \fIX\-\fR
(not) + \fI\-XXXXX\fR (cuttable) fo' realz. An atomic operation be a action dat canXt be
interrupted, not one forbidden up in a nuclear-free unit.
.IX Xref "atomic operation"
.IP "attribute" 4
.IX Item "attribute"
A freshly smoked up feature dat allows tha declaration of
\&\fBvariables\fR n' \fBsubroutines\fR wit modifiers, as up in \f(CW\*(C`sub foo : locked
method\*(C'\fR fo' realz. Also another name fo' a \fBinstizzle variable\fR of a \fBobject\fR.
.IX Xref "attribute feature"
.IP "autogeneration" 4
.IX Item "autogeneration"
A feature of \fBoperator overloading\fR of \fBobjects\fR,
whereby tha behavior of certain \fBoperators\fR can be reasonably deduced using
more fundamenstrual operators. This assumes dat tha overloaded operators will
often have tha same relationshizzlez as tha regular operators. Right back up in yo muthafuckin ass. See Camel
chapta 13, XOverloadingX.
.IX Xref "autogeneration, about"
.IP "autoincrement" 4
.IX Item "autoincrement"
To add one ta suttin' automatically, hence tha name
of tha \f(CW\*(C`++\*(C'\fR operator. Shiiit, dis aint no joke. To instead subtract one from suttin' automatically
is known as a XautodecrementX.
.IX Xref "autoincrement (term)"
.IP "autoload" 4
.IX Item "autoload"
To load on demand. Y'all KNOW dat shit, muthafucka! (Also called XlazyX loading.)
Specifically, ta booty-call a \f(CW\*(C`AUTOLOAD\*(C'\fR subroutine on behalf of a undefined
subroutine.
.IX Xref "autoloading, defined"
.IP "autosplit" 4
.IX Item "autosplit"
To split a strang automatically, as tha \fIXa\fR \fBswitch\fR
does when hustlin under \fIXp\fR or \fIXn\fR up in order ta emulate \fBawk\fR. (See also
the \f(CW\*(C`AutoSplit\*(C'\fR module, which has not a god damn thang ta do wit the
\&\f(CW\*(C`Xa\*(C'\fR switch but a shitload ta do wit autoloading.)
.IX Xref "autosplit (term) AutoSplit module"
.IP "autovivification" 4
.IX Item "autovivification"
A Graeco-Roman word meanin Xto brang oneself ta gameX.
In Perl, storage locations (\fBlvalues\fR) spontaneously generate theyselves as
needed, includin tha creation of any \fBhard reference\fR joints ta point to
the next level of storage. Da assignment \f(CW\*(C`$a[5][5][5][5][5] = "quintet"\*(C'\fR
potentially creates five scalar storage locations, plus four references (in
the first four scalar locations) pointin ta four freshly smoked up anonymous arrays (to
hold tha last four scalar locations). But tha deal wit autovivification is
that you donXt gotta worry bout dat shit.
.IX Xref "autovivification"
.IP "\s-1AV\s0" 4
.IX Item "AV"
Short fo' Xarray
valueX, which refers ta one of PerlXs internal data types dat holdz an
\&\fBarray\fR. Da \f(CW\*(C`AV\*(C'\fR type be a subclass of \fB\s-1SV\s0\fR.
.IX Xref "AV (array value) array value (AV) joints, array"
.IP "awk" 4
.IX Item "awk"
Descriptizzle editin termXshort fo' XawkwardX fo' realz. Also
coincidentally refers ta a venerable text-processin language from which
Perl derived a shitload of its high-level ideas.
.IX Xref "awk (editin term)"
.SS "B"
.IX Subsection "B"
.IP "backreference" 4
.IX Item "backreference"
A substrin \fBcaptured\fR
by a subpattern within unadorned parentheses up in a \fBregex\fR. Backslashed
decimal numbers (\f(CW\*(C`\e1\*(C'\fR, \f(CW\*(C`\e2\*(C'\fR, etc.) lata up in tha same pattern refer back to
the correspondin subpattern up in tha current match. Outside tha pattern, the
numbered variablez (\f(CW$1\fR, \f(CW$2\fR, etc.) continue ta refer ta these same
values, as long as tha pattern was tha last successful match of tha current
\&\fBdynamic scope\fR.
.IX Xref "backreferences, bout references, backreferences"
.IP "backtracking" 4
.IX Item "backtracking"
Da practice of saying, XIf I had ta do all dat shiznit over, IXd do
it differently,X n' then straight-up goin back n' bustin all dat shiznit over
differently. Mathematically bustin lyrics, itXs returnin from a unsuccessful
recursion on a tree of possibilities. Put ya muthafuckin choppers up if ya feel dis! Perl backtracks when it attempts to
match patterns wit a \fBregular expression\fR, n' its earlier attempts donXt
pan out. Right back up in yo muthafuckin ass. See tha section XDa Little Engine That /Couldn(nXt)X up in Camel
chapta 5, XPattern MatchingX.
.IX Xref "backtracking"
.IP "backward compatibility" 4
.IX Item "backward compatibility"
Means you can still run yo' oldschool program
because our phat asses didnXt break any of tha features or bugs dat shiznit was relyin on.
.IX Xref "backward compatibility, defined"
.IP "bareword" 4
.IX Item "bareword"
A word sufficiently ambiguous ta be deemed illegal under
\&\f(CW\*(C`use strict \*(Aqsubs\*(Aq\*(C'\fR. In tha absence of dat stricture, a funky-ass bareword is
treated as if quotes was round dat shit.
.IX Xref "barewords, about"
.IP "base class" 4
.IX Item "base class"
A generic \fBobject\fR type; dat is, a \fBclass\fR
from which other, mo' specific classes is derived genetically by
\&\fBinheritance\fR fo' realz. Also called a
XsuperclassX by playas whoz ass respect they ancestors.
.IX Xref "base classes classes, base superclasses classes, superclasses"
.IP "big-endian" 4
.IX Item "big-endian"
From Swift: one of mah thugs who
eats eggs big-ass end first fo' realz. Also used of computas dat store da most thugged-out
significant \fBbyte\fR of a word at a lower byte address than tha least
significant byte. Often considered superior ta lil-endian machines. Right back up in yo muthafuckin ass. See
also \fBlil-endian\fR.
.IX Xref "bigXendian, defined endianness, bigXendian"
.IP "binary" 4
.IX Item "binary"
Havin ta do wit numbers represented up in base 2. That means
thereXs basically two numbers: 0 n' 1 fo' realz. Also used ta describe a gangbangin' file of
XnontextX, presumably cuz such a gangbangin' file make full use of all tha binary
bits up in its bytes. With tha advent of \fBUnicode\fR, dis distinction, already
suspect, loses even mo' of its meaning.
.IX Xref "binary (term)"
.IP "binary operator" 4
.IX Item "binary operator"
An \fBoperator\fR dat takes two \fBoperands\fR.
.IX Xref "binary operators, about"
.IP "bind" 4
.IX Item "bind"
To assign a specific \fBnetwork address\fR ta a \fBsocket\fR.
.IX Xref "bind (term)"
.IP "bit" 4
.IX Item "bit"
An integer up in tha range from 0 ta 1, inclusive. Da smallest
possible unit of shiznit storage fo' realz. An eighth of a \fBbyte\fR or of a thugged-out dollar.
(Da term XPiecez of EightX be reppin bein able ta split tha oldschool Spanish
dollar tha fuck into 8 bits, each of which still counted fo' scrilla. ThatXs why a 25\-
cent piece todizzle is still Xtwo bitsX.)
.IX Xref "bits, defined"
.IP "bit shift" 4
.IX Item "bit shift"
Da movement of bits left or right up in a
computa word, which has tha effect of multiplyin or dividin by a
power of 2.
.IX Xref "bitXshift operators, defined"
.IP "bit string" 4
.IX Item "bit string"
A sequence of \fBbits\fR dat is straight-up bein thought of as a
sequence of bits, fo' once.
.IX Xref "bit string"
.IP "bless" 4
.IX Item "bless"
In corporate game, ta grant official
approval ta a thang, as in, XDa \s-1VP\s0 of Engineerin has pimped our
WebCruncher project.X Similarly, up in Perl, ta grant straight-up legit approval ta a
\&\fBreferent\fR so dat it can function as a \fBobject\fR, like fuckin a WebCruncher
object. Right back up in yo muthafuckin ass. See tha \f(CW\*(C`bless\*(C'\fR function up in Camel chapta 27, XFunctionsX.
.IX Xref "bless function, bout bless (term)"
.IP "block" 4
.IX Item "block"
What a \fBprocess\fR do when it has ta wait fo' something:
XMy fuckin process blocked waitin fo' tha disk.X As a unrelated noun, it refers
to a big-ass chunk of data, of a size dat tha \fBoperatin system\fR likes to
deal wit (normally a juice of 2 like fuckin 512 or 8192). Typically refers to
a chunk of data thatXs comin from or goin ta a gangbangin' finger-lickin' disk file.
.IX Xref "blocks, defined"
.IP "\s-1BLOCK\s0" 4
.IX Item "BLOCK"
A syntactic construct
consistin of a sequence of Perl \fBstatements\fR dat is delimited by braces.
Da \f(CW\*(C`if\*(C'\fR n' \f(CW\*(C`while\*(C'\fR statements is defined up in termz of \fI\f(CI\*(C`BLOCK\*(C'\fI\fRs, for
instance. Right back up in yo muthafuckin ass. Sometimes we also say XblockX ta mean a lexical scope; dat is, a
sequence of statements dat acts like a \fI\f(CI\*(C`BLOCK\*(C'\fI\fR, like fuckin within an
\&\f(CW\*(C`eval\*(C'\fR or a gangbangin' file, even though tha statements arenXt delimited by braces.
.IX Xref "BLOCK construct, bout constructs, BLOCK"
.IP "block buffering" 4
.IX Item "block buffering"
A method of makin input n' output
efficient by passin one \fBblock\fR at a time. By default, Perl do block
bufferin ta disk files. Right back up in yo muthafuckin ass. See \fBbuffer\fR n' \fBcommand buffering\fR.
.IX Xref "block bufferin buffering, block"
.IP "Boolean" 4
.IX Item "Boolean"
A value dat is either \fBtrue\fR or
\&\fBfalse\fR.
.IX Xref "Boolean joints joints, Boolean"
.IP "Boolean context" 4
.IX Item "Boolean context"
A special kind of \fBscalar
context\fR used up in conditionals ta decizzle whether tha \fBscalar value\fR returned
by a expression is \fBtrue\fR or \fBfalse\fR. Do not evaluate as either a
strin or a number n' shit. Right back up in yo muthafuckin ass. See \fBcontext\fR.
.IX Xref "Boolean context, bout context, Boolean"
.IP "breakpoint" 4
.IX Item "breakpoint"
A spot up in yo' program where youXve holla'd all up in tha debugger
to stop \fBexecution\fR so you can poke round n' peep whether anythang is
wrong yet.
.IX Xref "breakpoints, defined"
.IP "broadcast" 4
.IX Item "broadcast"
To bust a \fBdatagram\fR ta multiple destinations
simultaneously.
.IX Xref "broadcast (networkin term)"
.IP "\s-1BSD\s0" 4
.IX Item "BSD"
A psychoactizzle sticky-icky-icky, ghettofab up in tha X80s, probably pimped at \s-1UC\s0
Berkeley or thereabouts, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Similar up in nuff ways ta tha prescription-only
medication called XSystem \s-1VX,\s0 but infinitely mo' useful naaahhmean, biatch? (Or, at least,
more fun.) Da full chemical name is XBerkeley Standard DistributionX.
.IX Xref "BSD (Berkeley Standard Distribution) Berkeley Standard Distribution (BSD)"
.IP "bucket" 4
.IX Item "bucket"
A location up in a \fBhash table\fR containin (potentially)
multiple entries whose keys XhashX ta tha same hash value accordin ta its
hash function. I aint talkin' bout chicken n' gravy biatch. (As internal policy, you donXt gotta worry bout it unless
youXre tha fuck into internals, or policy.)
.IX Xref "buckets (term)"
.IP "buffer" 4
.IX Item "buffer"
A temporary holdin location fo' data. Data dat are
\&\fBBlock buffering\fR means dat tha data is passed on ta its destination
whenever tha buffer is full. \fBLine buffering\fR means dat itXs passed on
whenever a cold-ass lil complete line is received. Y'all KNOW dat shit, muthafucka! \fBCommand buffering\fR means dat itXs
passed every last muthafuckin time you do a \f(CW\*(C`print\*(C'\fR command (or equivalent). If yo' output
is unbuffered, tha system processes it one byte at a time without tha use of
a holdin area. This can be rather inefficient.
.IX Xref "buffers, defined"
.IP "built-in" 4
.IX Item "built-in"
A \fBfunction\fR dat is predefined up in the
language. Even when hidden by \fBoverriding\fR, you can always git at a funky-ass built\-
in function by \fBqualifying\fR its name wit tha \f(CW\*(C`CORE::\*(C'\fR pseudopackage.
.IX Xref "builtXin functions, about"
.IP "bundle" 4
.IX Item "bundle"
A crew of related modulez on \fB\s-1CPAN\s0\fR. (Also sometimes
refers ta a crew of command-line switches grouped tha fuck into one \fBswitch
cluster\fR.)
.IX Xref "bundlez (term)"
.IP "byte" 4
.IX Item "byte"
A piece of data worth eight \fBbits\fR up in most places.
.IX Xref "bytes (term)"
.IP "bytecode" 4
.IX Item "bytecode"
A pidgin-like lingo spoken among Xdroidz when they donXt wish ta reveal
their orientation (see \fBendian\fR). Named afta some similar languages spoken
(for similar reasons) between compilaz n' interpretas up in tha late 20XX
century. These languages is characterized by representin every last muthafuckin thang as a
nonarchitecture-dependent sequence of bytes.
.SS "C"
.IX Subsection "C"
.IP "C" 4
.IX Item "C"
A language beloved by nuff fo' its inside-out \fBtype\fR
definitions, inscrutable \fBprecedence\fR rules, n' heavy \fBoverloading\fR of
the function-call mechanism. (Well, actually, playas first switched ta C
because they found lowercase identifiers easier ta read than upper.) Perl is
written up in C, so itXs not surprisin dat Perl borrowed all dem scams from dat shit.
.IX Xref "C language, about"
.IP "cache" 4
.IX Item "cache"
A data repository. Instead of computin high-rollin' lyrics
several times, compute it once n' save tha result.
.IX Xref "cache (term)"
.IP "callback" 4
.IX Item "callback"
A \fBhandlez\fR dat you regista wit some other part of your
program up in tha hope dat tha other part of yo' program will \fBtrigger\fR your
handlez when some event of interest transpires.
.IX Xref "callbacks"
.IP "call by reference" 4
.IX Item "call by reference"
An \fBargument\fR\-passin mechanizzle up in which tha \fBformal arguments\fR refer directly ta the
\&\fBactual arguments\fR, n' tha \fBsubroutine\fR can chizzle tha actual arguments
by changin tha formal arguments, n' you can put dat on yo' toast. That is, tha formal argument be an
\&\fBalias\fR fo' tha actual argument. Right back up in yo muthafuckin ass. See also \fBcall by value\fR.
.IX Xref "call by reference references, call by reference mechanism"
.IP "call by value" 4
.IX Item "call by value"
An \fBargument\fR\-passin mechanizzle up in which tha \fBformal
arguments\fR refer ta a cold-ass lil copy of tha \fBactual arguments\fR, n' the
\&\fBsubroutine\fR cannot chizzle tha actual arguments by changin tha formal
arguments, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. See also \fBcall by reference\fR.
.IX Xref "call by value"
.IP "canonical" 4
.IX Item "canonical"
Reduced ta a standard form ta facilitate comparison.
.IX Xref "canonical (term)"
.IP "capture variables" 4
.IX Item "capture variables"
Da variablesXlike fuckin \f(CW$1\fR and
\&\f(CW$2\fR, n' \f(CW\*(C`%+\*(C'\fR n' \f(CW%X \fRXthat hold tha text remembered up in a pattern
match. Right back up in yo muthafuckin ass. See Camel chapta 5, XPattern MatchingX.
.IX Xref "capture variablez variables, capture"
.IP "capturing" 4
.IX Item "capturing"
Da use of parentheses round a \fBsubpattern\fR up in a
\&\fBregular expression\fR ta store tha matched \fBsubstring\fR as a
\&\fBbackreference\fR. (Captured strings is also returned as a list up in \fBlist
context\fR.) See Camel chapta 5, XPattern MatchingX.
.IX Xref "capturin up in pattern matchin subpatterns, capturin pattern matching, capturin in"
.IP "cargo cult" 4
.IX Item "cargo cult"
Copyin n' pastin code without understandin it, while
superstitiously believin up in its value. This term originated from
preindustrial cultures dealin wit tha detrituz of explorers n' colonizers
of technologically advanced cultures. Right back up in yo muthafuckin ass. See \fIDa Godz Must Be Crazy\fR.
.IX Xref "cargo cult"
.IP "case" 4
.IX Item "case"
A property of certain
characters. Originally, typesetta stored capital lettas up in tha upper of
two cases n' lil' small-ass lettas up in tha lower one. Unicode recognizes three
cases: \fBlowercase\fR (\fBcharacta property\fR \f(CW\*(C`\ep{lower}\*(C'\fR), \fBtitlecase\fR
(\f(CW\*(C`\ep{title}\*(C'\fR), n' \fBuppercase\fR (\f(CW\*(C`\ep{upper}\*(C'\fR) fo' realz. A fourth casemappin called
\&\fBfoldcase\fR aint itself a gangbangin' finger-lickin' distinct case yo, but it is used internally to
implement \fBcasefolding\fR. Not all lettas have case, n' some nonletters
have case.
.IX Xref "case (character) characters, case considerations"
.IP "casefolding" 4
.IX Item "casefolding"
Comparin or matchin a strang case-insensitively. In Perl, it
is implemented wit tha \f(CW\*(C`/i\*(C'\fR pattern modifier, tha \f(CW\*(C`fc\*(C'\fR function, n' the
\&\f(CW\*(C`\eF\*(C'\fR double-quote translation escape.
.IX Xref "casefolding"
.IP "casemapping" 4
.IX Item "casemapping"
Da process of convertin a strang ta one of tha four Unicode
\&\fBcasemaps\fR; up in Perl, it is implemented wit tha \f(CW\*(C`fc\*(C'\fR, \f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`ucfirst\*(C'\fR,
and \f(CW\*(C`uc\*(C'\fR functions.
.IX Xref "casemapping"
.IP "character" 4
.IX Item "character"
Da smallest individual element of a string. Computers
store charactas as integers yo, but Perl lets you operate on dem as text. The
integer used ta represent a particular characta is called dat characterXs
\&\fBcodepoint\fR.
.IX Xref "characters, defined"
.IP "characta class" 4
.IX Item "characta class"
A square-bracketed list of
charactas used up in a \fBregular expression\fR ta indicate dat any character
of tha set may occur at a given point. Loosely, any predefined set of
charactas so used.
.IX Xref "characta classes, bout classes, character"
.IP "characta property" 4
.IX Item "characta property"
A predefined \fBcharacta class\fR matchable by tha \f(CW\*(C`\ep\*(C'\fR
or \f(CW\*(C`\eP\*(C'\fR \fBmetasymbol\fR. \fBUnicode\fR defines hundredz of standard properties
for every last muthafuckin possible codepoint, n' Perl defines all dem of its own, like a muthafucka.
.IX Xref "characta property"
.IP "circumfix operator" 4
.IX Item "circumfix operator"
An \fBoperator\fR dat surroundz its \fBoperand\fR, like the
angle operator, or parentheses, or a funky-ass blunt.
.IX Xref "circumfix operator"
.IP "class" 4
.IX Item "class"
A user-defined \fBtype\fR, implemented up in Perl via a
\&\fBpackage\fR dat serves up (either directly or by inheritance) \fBmethods\fR
(that is, \fBsubroutines\fR) ta handle \fBinstances\fR of tha class (its
\&\fBobjects\fR). Right back up in yo muthafuckin ass. See also \fBinheritance\fR.
.IX Xref "classes, defined"
.IP "class method" 4
.IX Item "class method"
A \fBmethod\fR whose \fBinvocant\fR be a
\&\fBpackage\fR name, not a \fBobject\fR reference fo' realz. A method associated wit the
class as a whole fo' realz. Also peep \fBinstizzle method\fR.
.IX Xref "class methodz methods, class"
.IP "client" 4
.IX Item "client"
In networking, a \fBprocess\fR that
initiates contact wit a \fBserver\fR process up in order ta exchange data and
like receive a service.
.IX Xref "clients, defined processes, client"
.IP "closure" 4
.IX Item "closure"
An \fBanonymous\fR subroutine
that, when a reference ta it is generated at runtime, keeps track of the
identitizzlez of externally visible \fBlexical variables\fR, even afta them
lexical variablez have supposedly gone outta \fBscope\fR. TheyXre called
XclosuresX cuz dis sort of behavior gives mathematicians a sense of
closure.
.IX Xref "closure subroutines subroutines, closure"
.IP "cluster" 4
.IX Item "cluster"
A parenthesized \fBsubpattern\fR
used ta crew partz of a \fBregular expression\fR tha fuck into a single \fBatom\fR.
.IX Xref "clusters, defined subpatterns, cluster"
.IP "\s-1CODE\s0" 4
.IX Item "CODE"
Da word returned by tha \f(CW\*(C`ref\*(C'\fR
function when you apply it ta a reference ta a subroutine. Right back up in yo muthafuckin ass. See also \fB\s-1CV\s0\fR.
.IX Xref "CODE (ref function) ref function, about"
.IP "code generator" 4
.IX Item "code generator"
A system dat writes code fo' you up in a low-level
language, like fuckin code ta implement tha backend of a cold-ass lil compila n' shit. Right back up in yo muthafuckin ass. See \fBprogram
generator\fR.
.IX Xref "code generators, defined"
.IP "codepoint" 4
.IX Item "codepoint"
Da integer a cold-ass lil computa uses ta represent a given
character n' shit. \s-1ASCII\s0 codepoints is up in tha range 0 ta 127; Unicode codepoints
are up in tha range 0 ta 0x1F_FFFF; n' Perl codepoints is up in tha range 0 to
2XXX1 or 0 ta 2XXX1, dependin on yo' natizzle integer size. In Perl Culture,
sometimes called \fBordinals\fR.
.IX Xref "codepoints, about"
.IP "code subpattern" 4
.IX Item "code subpattern"
A \fBregular expression\fR subpattern
whose real purpose is ta execute some Perl codeXfor example, tha \f(CW\*(C`(?{...})\*(C'\fR
and \f(CW\*(C`(??{...})\*(C'\fR subpatterns.
.IX Xref "code subpatterns subpatterns, code"
.IP "collatin sequence" 4
.IX Item "collatin sequence"
Da order tha fuck into which \fBcharacters\fR
sort. This is used by \fBstring\fR comparison routines ta decide, fo' example,
where up in dis glossary ta put Xcollatin sequenceX.
.IX Xref "collatin sequence collatin sequence"
.IP "co-maintainer" 4
.IX Item "co-maintainer"
A thug wit permissions ta index a \fBnamespace\fR in
\&\fB\s-1PAUSE\s0\fR fo' realz. Every Muthafucka can upload any namespace yo, but only primary and
co-maintainers git they contributions indexed.
.IX Xref "coXmaintainers"
.IP "combinin character" 4
.IX Item "combinin character"
Any characta wit the
General Category of Combinin Mark (\f(CW\*(C`\ep{GC=M}\*(C'\fR), which may be spacin or
nonspacing. Right back up in yo muthafuckin ass. Some is even invisible fo' realz. A sequence of combinin characters
followin a grapheme base characta together make up a single user-visible
characta called a \fBgrapheme\fR. Most but not all diacritics is combining
characters, n' vice versa.
.IX Xref "combinin charactas characters, combining"
.IP "command" 4
.IX Item "command"
In \fBshell\fR programming, tha syntactic combination of a
program name n' its arguments, n' you can put dat on yo' toast. Mo' loosely, anythang you type ta a gangbangin' finger-lickin' dirty-ass shell
(a command interpreter) dat starts it bustin something. Even mo' loosely, a
Perl \fBstatement\fR, which might start wit a \fBlabel\fR n' typically endz with
a semicolon.
.IX Xref "commands, defined"
.IP "command buffering" 4
.IX Item "command buffering"
A mechanizzle up in Perl dat lets you
store up tha output of each Perl \fBcommand\fR n' then flush it up as a
single request ta tha \fBoperatin system\fR. ItXs enabled by settin tha \f(CW$|\fR
(\f(CW$AUTOFLUSH\fR) variable ta a legit value. ItXs used when you donXt want data
sittin around, not goin where itXs supposed to, which may happen cuz
the default on a \fBfile\fR or \fBpipe\fR is ta use \fBblock buffering\fR.
.IX Xref "command bufferin buffering, command"
.IP "command-line arguments" 4
.IX Item "command-line arguments"
Da \fBvalues\fR you supply
along wit a program name when you tell a \fBshell\fR ta execute a \fBcommand\fR.
These joints is passed ta a Perl program all up in \f(CW@ARGV\fR.
.IX Xref "commandXline arguments arguments, commandXline"
.IP "command name" 4
.IX Item "command name"
Da name of tha program currently executing, as typed on the
command line. In C, tha \fBcommand\fR name is passed ta tha program as the
first command-line argument. In Perl, it comes up in separately as \f(CW$0\fR.
.IX Xref "command names"
.IP "comment" 4
.IX Item "comment"
A remark dat donXt affect tha meanin of tha program.
In Perl, a cold-ass lil comment is introduced by a \f(CW\*(C`#\*(C'\fR characta n' continues ta the
end of tha line.
.IX Xref "comments, defined"
.IP "compilation unit" 4
.IX Item "compilation unit"
Da \fBfile\fR (or \fBstring\fR, up in tha case of \f(CW\*(C`eval\*(C'\fR) that
is currently bein \fBcompiled\fR.
.IX Xref "compilation units"
.IP "compile" 4
.IX Item "compile"
Da process of turnin source code tha fuck into a machine-usable form. Right back up in yo muthafuckin ass. See \fBcompile
phase\fR.
.IP "compile phase" 4
.IX Item "compile phase"
Any time before Perl starts hustlin yo' main
program. Right back up in yo muthafuckin ass. See also \fBrun phase\fR. Compile phase is mostly dropped up in \fBcompile
time\fR yo, but may also be dropped up in \fBruntime\fR when \f(CW\*(C`BEGIN\*(C'\fR blocks, \f(CW\*(C`use\*(C'\fR or
\&\f(CW\*(C`no\*(C'\fR declarations, or constant subexpressions is bein evaluated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. The
startup n' import code of any \f(CW\*(C`use\*(C'\fR declaration be also run during
compile phase.
.IX Xref "compile phase, defined"
.IP "compiler" 4
.IX Item "compiler"
Strictly bustin lyrics, a program dat munches
up another program n' spits up yet another file containin tha program in
a Xmore executableX form, typically containin natizzle machine instructions.
Da \fIperl\fR program aint a cold-ass lil compila by dis definizzle yo, but it do
contain a kind of compila dat takes a program n' turns it tha fuck into a more
executable form (\fBsyntax trees\fR) within tha \fIperl\fR process itself, which
the \fBinterpreter\fR then interprets, n' you can put dat on yo' toast. There are, however, extension \fBmodules\fR
to git Perl ta act mo' like a XrealX compila n' shit. Right back up in yo muthafuckin ass. See Camel chapta 16,
XCompilingX.
.IX Xref "compilaz n' compiling, about"
.IP "compile time" 4
.IX Item "compile time"
Da time when Perl is tryin ta make sense of your
code, as opposed ta when it be thinkin it knows what tha fuck yo' code means n' is
merely tryin ta do what tha fuck it be thinkin yo' code say ta do, which is \fBruntime\fR.
.IX Xref "compile time, defined"
.IP "composer" 4
.IX Item "composer"
A XconstructorX fo' a \fBreferent\fR dat isnXt straight-up an
\&\fBobject\fR, like a anonymous array or a hash (or a sonata, fo' dat matter).
For example, a pair of braces acts as a cold-ass lil composer fo' a hash, n' a pair of
brackets acts as a cold-ass lil composer fo' a array. Right back up in yo muthafuckin ass. See tha section XCreating
ReferencesX up in Camel chapta 8, XReferencesX.
.IX Xref "composers, about"
.IP "concatenation" 4
.IX Item "concatenation"
Da process of gluin one
catXs nozzle ta another catXs tail fo' realz. Also a similar operation on two
\&\fBstrings\fR.
.IX Xref "concatenatin strings strings, concatenating"
.IP "conditional" 4
.IX Item "conditional"
Somethang XiffyX. Right back up in yo muthafuckin ass. See \fBBoolean context\fR.
.IX Xref "conditionizzle (term)"
.IP "connection" 4
.IX Item "connection"
In telephony, tha temporary electrical circuit between
the callerXs n' tha calleeXs phone. In networking, tha same kind of
temporary circuit between a \fBclient\fR n' a \fBserver\fR.
.IX Xref "connections (term)"
.IP "construct" 4
.IX Item "construct"
As a noun, a piece of syntax made up of smaller
pieces fo' realz. As a transitizzle verb, ta create a \fBobject\fR rockin a \fBconstructor\fR.
.IX Xref "constructs, defined"
.IP "constructor" 4
.IX Item "constructor"
Any \fBclass method\fR, \fBinstance\fR, or \fBsubroutine\fR
that composes, initializes, blesses, n' returns a \fBobject\fR. Right back up in yo muthafuckin ass. Sometimes we
use tha term loosely ta mean a \fBcomposer\fR.
.IX Xref "constructors, defined"
.IP "context" 4
.IX Item "context"
Da surroundings or environment. Da context given by the
surroundin code determines what tha fuck kind of data a particular \fBexpression\fR is
sposed ta fuckin return, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. Da three primary contexts is \fBlist context\fR,
\&\fBscalar\fR, n' \fBvoid context\fR. Right back up in yo muthafuckin ass. Scalar context is sometimes subdivided into
\&\fBBoolean context\fR, \fBnumeric context\fR, \fBstrin context\fR, n' \fBvoid
context\fR. ThereXs also a XdonXt careX context (which is dealt wit up in Camel
chapta 2, XBits n' PiecesX, if you care).
.IX Xref "context, about"
.IP "continuation" 4
.IX Item "continuation"
Da treatment of mo' than one physical \fBline\fR as a
single logical line. \fBMakefile\fR lines is continued by puttin a funky-ass backslash
before tha \fBnewline\fR. Mail headers, as defined by \s-1RFC 822,\s0 are
continued by puttin a space or tab \fIafter\fR tha newline. In general, lines
in Perl do not need any form of continuation mark, cuz \fBwhitespace\fR
(includin newlines) is gleefully ignored. Y'all KNOW dat shit, muthafucka! Usually.
.IX Xref "continuation lines RFC 822"
.IP "core dump" 4
.IX Item "core dump"
Da corpse of a \fBprocess\fR, up in tha form of a gangbangin' file left up in the
\&\fBworkin directory\fR of tha process, probably as a result of certain kinds
of fatal errors.
.IX Xref "core dump"
.IP "\s-1CPAN\s0" 4
.IX Item "CPAN"
Da Comprehensive Perl Archive Network. (See tha Camel Preface
and Camel chapta 19, \s-1XCPANX\s0 fo' details.)
.IX Xref "Comprehensive Perl Archive Network CPAN (Comprehensive Perl Archive Network), about"
.IP "C preprocessor" 4
.IX Item "C preprocessor"
Da typical C compilerXs first pass, which processes lines
beginnin wit \f(CW\*(C`#\*(C'\fR fo' conditionizzle compilation n' macro definition, and
does various manipulationz of tha program text based on tha current
definitions fo' realz. Also known as \fIcpp\fR(1).
.IX Xref "C preprocessor"
.IP "cracker" 4
.IX Item "cracker"
Someone whoz ass breaks securitizzle on computa systems fo' realz. A cracker may
be a legit \fBhacker\fR or only a \fBscript kiddie\fR.
.IX Xref "crackers"
.IP "currently selected output channel" 4
.IX Item "currently selected output channel"
Da last \fBfilehandle\fR dat was
designated wit \f(CW\*(C`select(FILEHANDLE)\*(C'\fR; \f(CW\*(C`STDOUT\*(C'\fR, if no filehandle has
been selected.
.IX Xref "currently selected output channel"
.IP "current package" 4
.IX Item "current package"
Da \fBpackage\fR up in which tha current statement is
\&\fBcompiled\fR. Right back up in yo muthafuckin ass. Scan backward up in tha text of yo' program all up in tha current
\&\fBlexical scope\fR or any enclosin lexical scopes until you find a package
declaration. I aint talkin' bout chicken n' gravy biatch. ThatXs yo' current package name.
.IX Xref "current package"
.IP "current hustlin directory" 4
.IX Item "current hustlin directory"
See \fBworkin directory\fR.
.IX Xref "current hustlin directory"
.IP "\s-1CV\s0" 4
.IX Item "CV"
In academia, a cold-ass lil curriculum vit\*(ae, a gangbangin' fancy kind of re\*'sume\*'. In Perl, a internal Xcode valueX typedef holdin a
\&\fBsubroutine\fR. Da \f(CW\*(C`CV\*(C'\fR type be a subclass of \fB\s-1SV\s0\fR.
.IX Xref "CV (code value) code value (CV)"
.SS "D"
.IX Subsection "D"
.IP "danglin statement" 4
.IX Item "danglin statement"
A bare, single \fBstatement\fR,
without any braces, hangin off a \f(CW\*(C`if\*(C'\fR or \f(CW\*(C`while\*(C'\fR conditional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. C allows
them. Perl donXt.
.IX Xref "danglin statements statements, dangling"
.IP "datagram" 4
.IX Item "datagram"
A packet of data, like fuckin a \fB\s-1UDP\s0\fR message, dat (from
the viewpoint of tha programs involved) can be busted independently over the
network. (In fact, all packets is busted independently all up in tha \fB\s-1IP\s0\fR level,
but \fBstream\fR protocols like fuckin \fB\s-1TCP\s0\fR hide dis from yo' program.)
.IX Xref "datagrams, defined"
.IP "data structure" 4
.IX Item "data structure"
How tha fuck yo' various piecez of data relate ta each
other n' what tha fuck shape they make when you put dem all together, as up in a
rectangular table or a triangular tree.
.IX Xref "data structures, defined"
.IP "data type" 4
.IX Item "data type"
A set of possible joints, together wit all the
operations dat know how tha fuck ta deal wit dem joints, n' you can put dat on yo' toast. For example, a numeric
data type has a cold-ass lil certain set of numbers dat you can work with, as well as
various mathematical operations dat you can do on tha numbers yo, but would
make lil sense on, say, a strang like fuckin \f(CW"Kilroy"\fR. Right back up in yo muthafuckin ass. Strings have their
own operations, like fuckin \fBconcatenation\fR. Compound types made of a number of
smalla pieces generally have operations ta compose n' decompose them, and
like ta rearrange em. \fBObjects\fR dat model thangs up in tha real ghetto
often have operations dat correspond ta real activities. Put ya muthafuckin choppers up if ya feel dis! For instance, if
you model a elevator, yo' elevator object might have a \f(CW\*(C`open_door\*(C'\fR
\&\fBmethod\fR.
.IX Xref "data types, defined"
.IP "\s-1DBM\s0" 4
.IX Item "DBM"
Standz fo' XDatabase ManagementX routines, a set of routines dat emulate an
\&\fBassociatizzle array\fR rockin disk files. Da routines bust a thugged-out dynamic hashing
scheme ta locate any entry wit only two disk accesses. \s-1DBM\s0 filez allow a
Perl program ta keep a persistent \fBhash\fR across multiple invocations. You
can \f(CW\*(C`tie\*(C'\fR yo' hash variablez ta various \s-1DBM\s0 implementations.
.IX Xref "DBM (Database Management) routines Database Management (DBM) routines"
.IP "declaration" 4
.IX Item "declaration"
An \fBassertion\fR dat states suttin' exists and
like raps bout what tha fuck itXs like, without givin any commitment as ta how
or where youXll use it fo' realz. A declaration is like tha part of yo' recipe that
says, Xtwo cups flour, one big-ass egg, four or five tadpolesXX See
\&\fBstatement\fR fo' its opposite. Note dat some declarations also function
as statements, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Subroutine declarations also act as definitions if a funky-ass body
is supplied.
.IX Xref "declarations, defined"
.IP "declarator" 4
.IX Item "declarator"
Somethang dat  drops some lyrics ta yo' program what tha fuck sort of variable
youXd like. Perl donXt require you ta declare variablez yo, but you can use
\&\f(CW\*(C`my\*(C'\fR, \f(CW\*(C`our\*(C'\fR, or \f(CW\*(C`state\*(C'\fR ta denote dat you want suttin' other than
the default.
.IX Xref "declarators"
.IP "decrement" 4
.IX Item "decrement"
To subtract a value from a
variable, as up in Xdecrement \f(CW$x\fRX (meanin ta remove 1 from its value) or
Xdecrement \f(CW$x\fR by 3X.
.IX Xref "decrementin joints joints, decrementing"
.IP "default" 4
.IX Item "default"
A \fBvalue\fR chosen fo' you if you donXt
supply a value of yo' own.
.IX Xref "default joints joints, default"
.IP "defined" 4
.IX Item "defined"
Havin a meaning. Perl be thinkin dat a shitload of tha thangs
people try ta do is devoid of meaning; up in particular, makin use of
variablez dat have never been given a \fBvalue\fR n' struttin certain
operations on data dat isnXt there, so peek-a-boo, clear tha way, I be comin' thru fo'sho. For example, if you try ta read data
past tha end of a gangbangin' file, Perl will hand you back a undefined value. Right back up in yo muthafuckin ass. See also
\&\fBfalse\fR n' tha \f(CW\*(C`defined\*(C'\fR entry up in Camel chapta 27, XFunctionsX.
.IX Xref "defined (term)"
.IP "delimiter" 4
.IX Item "delimiter"
A \fBcharacter\fR or \fBstring\fR dat sets boundz ta an
arbitrarily sized textual object, not ta be trippin wit a \fBseparator\fR or
\&\fBterminator\fR. XTo delimitX straight-up just means Xto surroundX or Xto encloseX
(like these parentheses is bustin).
.IX Xref "delimitas (term)"
.IP "dereference" 4
.IX Item "dereference"
A fancy computa science term
meanin Xto follow a \fBreference\fR ta what tha fuck it points toX. Da XdeX part of it
refers ta tha fact dat youXre takin away one level of \fBindirection\fR.
.IX Xref "dereference (term) references, dereference"
.IP "derived class" 4
.IX Item "derived class"
A \fBclass\fR dat defines a shitload of its \fBmethods\fR up in termz of a mo' generic class,
called a \fBbase class\fR. Note dat classes arenXt classified exclusively into
base classes or derived classes: a cold-ass lil class can function as both a thugged-out derived
class n' a funky-ass base class simultaneously, which is kind of classy.
.IX Xref "derived classes classes, derived subclasses classes, subclasses"
.IP "descriptor" 4
.IX Item "descriptor"
See \fBfile descriptor\fR.
.IP "destroy" 4
.IX Item "destroy"
To deallocate tha memory of a \fBreferent\fR (first triggering
its \f(CW\*(C`DESTROY\*(C'\fR method, if it has one).
.IX Xref "destroy (term)"
.IP "destructor" 4
.IX Item "destructor"
A special \fBmethod\fR dat is called
when a \fBobject\fR is thankin bout \fBdestroying\fR itself fo' realz. A Perl programXs
\&\f(CW\*(C`DESTROY\*(C'\fR method donXt do tha actual destruction; Perl just \fBtriggers\fR
the method up in case tha \fBclass\fR wants ta do any associated cleanup.
.IX Xref "destructor method methods, destructor"
.IP "device" 4
.IX Item "device"
A whiz-bang hardware gizmo (like a gangbangin' finger-lickin' disk or tape drive or a
modem or a joystick or a mouse) attached ta yo' computer, which the
\&\fBoperatin system\fR tries ta make be lookin like a \fBfile\fR (or a funky-ass bunch of files).
Under Unix, these fake filez tend ta live up in tha \fI/dev\fR directory.
.IX Xref "devices (term)"
.IP "directive" 4
.IX Item "directive"
A \fBpod\fR directive. Right back up in yo muthafuckin ass. See Camel chapta 23, XPlain Old
DocumentationX.
.IX Xref "directives, defined"
.IP "directory" 4
.IX Item "directory"
A special file dat gotz nuff other files. Right back up in yo muthafuckin ass. Some
\&\fBoperatin systems\fR call these XfoldersX, XdrawersX, XcataloguesX, or
XcatalogsX.
.IX Xref "directories, defined"
.IP "directory handle" 4
.IX Item "directory handle"
A name dat represents a particular instizzle of openin a
directory ta read it, until you close dat shit. Right back up in yo muthafuckin ass. See tha \f(CW\*(C`opendir\*(C'\fR function.
.IX Xref "directory handle"
.IP "discipline" 4
.IX Item "discipline"
Some playas need dis n' some playas avoid dat shit.
For Perl, itXs a oldschool way ta say \fBI/O layer\fR.
.IX Xref "discipline (I O layer)"
.IP "dispatch" 4
.IX Item "dispatch"
To bust suttin' ta its erect destination. I aint talkin' bout chicken n' gravy biatch. Often used
metaphorically ta indicate a transfer of programmatic control ta a
destination selected algorithmically, often by lookup up in a table of function
\&\fBreferences\fR or, up in tha case of object \fBmethods\fR, by traversin the
inheritizzle tree lookin fo' da most thugged-out specific definizzle fo' tha method.
.IX Xref "dispatching"
.IP "distribution" 4
.IX Item "distribution"
A standard, bundled release of a system of
software. Da default usage implies source code is included. Y'all KNOW dat shit, muthafucka! If dat is not
the case, it is ghon be called a Xbinary-onlyX distribution.
.IX Xref "distributions, defined"
.IP "dual-lived" 4
.IX Item "dual-lived"
Some modulez live both up in the
\&\fBStandard Library\fR n' on \fB\s-1CPAN\s0\fR. These modulez might be pimped on two
tracks as playas modify either version. I aint talkin' bout chicken n' gravy biatch. Da trend currently is ta untangle
these thangs.
.IX Xref "dualXlived modulez modules, dualXlived"
.IP "dweomer" 4
.IX Item "dweomer"
An enchantment, illusion, phantasm, or jugglery. Right back up in yo muthafuckin ass. Said when PerlXs
magical \fBdwimmer\fR effects donXt do what tha fuck you expect yo, but rather seem ta be
the thang of arcane \fIdweomercraft\fR, sorcery, or wonder working. [From
Middle Gangsta.]
.IX Xref "dweomer"
.IP "dwimmer" 4
.IX Item "dwimmer"
\&\s-1DWIM \s0is
an acronym fo' XDo What I MeanX, tha principle dat something
should just do what tha fuck you want it ta do without a undue amount of fuss fo' realz. A bit
of code dat do XdwimmingX be a XdwimmerX. Dwimmin can require a pimped out
deal of behind-the-scenes magic, which (if it donXt stay properly behind
the scenes) is called a \fBdweomer\fR instead.
.IX Xref "DWIM (Do What I Mean) principle Do What I Mean (DWIM) principle dwimming"
.IP "dynamic scoping" 4
.IX Item "dynamic scoping"
Dynamic scopin works over a \fBdynamic
scope\fR, makin variablez visible all up in tha rest of tha \fBblock\fR in
which they is first used n' up in any \fBsubroutines\fR dat is called by the
rest of tha block. Dynamically scoped variablez can have they joints
temporarily chizzled (and implicitly restored later) by a \f(CW\*(C`local\*(C'\fR operator.
(Compare \fBlexical scoping\fR.) Used mo' loosely ta mean how tha fuck a subroutine
that is up in tha middle of callin another subroutine Xgotz nuffX that
subroutine at \fBruntime\fR.
.IX Xref "dynamic scope scopes, dynamic"
.SS "E"
.IX Subsection "E"
.IP "eclectic" 4
.IX Item "eclectic"
Derived from nuff sources. Right back up in yo muthafuckin ass. Some would say \fItoo\fR many.
.IX Xref "eclectic (term)"
.IP "element" 4
.IX Item "element"
A basic buildin block. When youXre rappin' bout an
\&\fBarray\fR, itXs one of tha shit dat make up tha array.
.IX Xref "elements, about"
.IP "embedding" 4
.IX Item "embedding"
When suttin' is contained up in suttin' else,
particularly when dat might be considered surprising: XIXve embedded a
complete Perl interpreta up in mah editor!X
.IX Xref "embeddin (term)"
.IP "empty subclass test" 4
.IX Item "empty subclass test"
Da notion dat a empty \fBderived class\fR should
behave exactly like its \fBbase class\fR.
.IX Xref "empty subclass test"
.IP "encapsulation" 4
.IX Item "encapsulation"
Da veil of abstraction separatin tha \fBinterface\fR
from tha \fBimplementation\fR (whether enforced or not), which mandates that
all access ta a \fBobject\fRXs state be all up in \fBmethods\fR ridin' solo.
.IX Xref "encapsulation (term)"
.IP "endian" 4
.IX Item "endian"
See \fBlil-endian\fR n' \fBbig-endian\fR.
.IP "en passant" 4
.IX Item "en passant"
When you chizzle a \fBvalue\fR as it is bein copied. Y'all KNOW dat shit, muthafucka! [From
French Xin passingX, as up in tha horny-ass pawn-capturin maneuver up in chess.]
.IX Xref "en passant (term)"
.IP "environment" 4
.IX Item "environment"
Da collectizzle set of \fBenvironment variables\fR your
\&\fBprocess\fR inherits from its parent fo' realz. Accessed via \f(CW%ENV\fR.
.IX Xref "environment (term)"
.IP "environment variable" 4
.IX Item "environment variable"
A mechanizzle by which some high-level agent like fuckin a user can pass its
preferences down ta its future offsprin (child \fBprocesses\fR, grandchild
processes, pimped out-grandchild processes, n' so on). Each environment
variable be a \fBkey\fR/\fBvalue\fR pair, like one entry up in a \fBhash\fR.
.IX Xref "environment variablez variables, environment environment variables"
.IP "\s-1EOF\s0" 4
.IX Item "EOF"
End of File. Right back up in yo muthafuckin ass. Sometimes used
metaphorically as tha terminatin strang of a \fBhere document\fR.
.IX Xref "End of File (EOF) EOF (End of File)"
.IP "errno" 4
.IX Item "errno"
Da error number returned by a
\&\fBsyscall\fR when it fails. Perl refers ta tha error by tha name \f(CW$!\fR (or
\&\f(CW$OS_ERROR\fR if you use tha Gangsta module).
.IX Xref "errno (error number) error number (errno)"
.IP "error" 4
.IX Item "error"
See \fBexception\fR or \fBfatal error\fR.
.IP "escape sequence" 4
.IX Item "escape sequence"
See \fBmetasymbol\fR.
.IP "exception" 4
.IX Item "exception"
A fancy term fo' a error. Shiiit, dis aint no joke. Right back up in yo muthafuckin ass. See \fBfatal error\fR.
.IP "exception handling" 4
.IX Item "exception handling"
Da way a program respondz ta a error. Shiiit, dis aint no joke. The
exception-handlin mechanizzle up in Perl is tha \f(CW\*(C`eval\*(C'\fR operator.
.IX Xref "exception handling, defined"
.IP "exec" 4
.IX Item "exec"
To throw away tha current \fBprocess\fRXs program n' replace
it wit another, without exitin tha process or relinquishin any resources
held (apart from tha oldschool memory image).
.IX Xref "exec function"
.IP "executable file" 4
.IX Item "executable file"
A \fBfile\fR dat is specially marked to
tell tha \fBoperatin system\fR dat itXs all gravy ta run dis file as a program.
Usually shortened ta XexecutableX.
.IX Xref "executable filez files, executable"
.IP "execute" 4
.IX Item "execute"
To run a \fBprogram\fR or \fBsubroutine\fR. (Has not a god damn thang ta do
with tha \f(CW\*(C`kill\*(C'\fR built-in, unless youXre tryin ta run a \fBsignal handlez\fR.)
.IX Xref "execute (term)"
.IP "execute bit" 4
.IX Item "execute bit"
Da special mark dat  drops some lyrics ta tha operatin system it can run
this program. There is straight-up three execute bits under Unix, n' which
bit gets used dependz on whether you own tha file singularly, collectively,
or not at all.
.IX Xref "execute bit"
.IP "exit status" 4
.IX Item "exit status"
See \fBstatus\fR.
.IP "exploit" 4
.IX Item "exploit"
Used as a noun up in dis case, dis refers ta a known way
to compromise a program ta git it ta do suttin' tha lyricist didnXt intend.
Yo crazy-ass task is ta write unexploitable programs.
.IX Xref "exploits, security"
.IP "export" 4
.IX Item "export"
To make symbols from a \fBmodule\fR available for
\&\fBimport\fR by other modules.
.IX Xref "exporting, defined"
.IP "expression" 4
.IX Item "expression"
Anythang you can legally say up in a spot
where a \fBvalue\fR is required. Y'all KNOW dat shit, muthafucka! Typically composed of \fBliterals\fR,
\&\fBvariables\fR, \fBoperators\fR, \fBfunctions\fR, n' \fBsubroutine\fR calls, not
necessarily up in dat order.
.IX Xref "expressions, defined expressions"
.IP "extension" 4
.IX Item "extension"
A Perl module dat also pulls up in \fBcompiled\fR C or \*(C+
code. Mo' generally, any experimenstrual option dat can be \fBcompiled\fR into
Perl, like fuckin multithreading.
.IX Xref "extensions, defined"
.SS "F"
.IX Subsection "F"
.IP "false" 4
.IX Item "false"
In Perl, any value dat would be lookin like \f(CW""\fR
or \f(CW"0"\fR if evaluated up in a strang context. Right back up in yo muthafuckin ass. Since undefined joints evaluate
to \f(CW""\fR, all undefined joints is false yo, but not all false joints are
undefined.
.IX Xref "false joints joints, false"
.IP "\s-1FAQ\s0" 4
.IX Item "FAQ"
Frequently Axed Question (although not necessarily
frequently answered, especially if tha answer appears up in tha Perl \s-1FAQ\s0
shipped standard wit Perl).
.IX Xref "FAQ (Frequently Axed Question) Frequently Axed Question (FAQ)"
.IP "fatal error" 4
.IX Item "fatal error"
An uncaught \fBexception\fR, which causes termination of the
\&\fBprocess\fR afta printin a message on yo' \fBstandard error\fR stream. Errors
that happen inside a \f(CW\*(C`eval\*(C'\fR is not fatal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Instead, tha \f(CW\*(C`eval\*(C'\fR terminates
afta placin tha exception message up in tha \f(CW$@\fR (\f(CW$EVAL_ERROR\fR) variable.
Yo ass can try ta provoke a gangbangin' fatal error wit tha \f(CW\*(C`die\*(C'\fR operator (known as
throwin or raisin a exception) yo, but dis may be caught by a thugged-out dynamically
enclosin \f(CW\*(C`eval\*(C'\fR. If not caught, tha \f(CW\*(C`die\*(C'\fR becomes a gangbangin' fatal error.
.IX Xref "fatal errors"
.IP "feepin creaturism" 4
.IX Item "feepin creaturism"
A spoonerizzle of Xcreeping
featurismX, notin tha astrological urge ta add just one mo' feature to
a program.
.IX Xref "feepin creaturizzle creepin featurism"
.IP "field" 4
.IX Item "field"
A single piece of numeric or strang data dat is part of a
longer \fBstring\fR, \fBrecord\fR, or \fBline\fR. Variable-width fieldz is usually
split up by \fBseparators\fR (so use \f(CW\*(C`split\*(C'\fR ta extract tha fields), while
fixed-width fieldz is probably at fixed positions (so use \f(CW\*(C`unpack\*(C'\fR).
\&\fBInstizzle variables\fR is also known as XfieldsX.
.IX Xref "fieldz (term)"
.IP "\s-1FIFO\s0" 4
.IX Item "FIFO"
First In, First Out. Right back up in yo muthafuckin ass. See also \fB\s-1LIFO\s0\fR fo' realz. Also a nickname fo' a \fBnamed pipe\fR.
.IX Xref "First In, First Out (FIFO) FIFO (First In, First Out)"
.IP "file" 4
.IX Item "file"
A named collection of data, probably stored on disk up in a
\&\fBdirectory\fR up in a \fBfilesystem\fR. Roughly like a thugged-out document, if youXre into
office metaphors. In modern filesystems, you can straight-up give a gangbangin' file more
than one name. Right back up in yo muthafuckin ass. Some filez have special properties, like directories and
devices.
.IX Xref "files, defined"
.IP "file descriptor" 4
.IX Item "file descriptor"
Da lil number tha \fBoperating
system\fR uses ta keep track of which opened \fBfile\fR youXre rappin' about.
Perl hides tha file descriptor inside a \fBstandard I/O\fR stream n' then
attaches tha stream ta a \fBfilehandle\fR.
.IX Xref "file descriptors descriptors, file"
.IP "fileglob" 4
.IX Item "fileglob"
A XwildcardX match on \fBfilenames\fR. Right back up in yo muthafuckin ass. See tha \f(CW\*(C`glob\*(C'\fR function.
.IX Xref "fileglobs"
.IP "filehandle" 4
.IX Item "filehandle"
An identifier (not necessarily related ta tha real
name of a gangbangin' file) dat represents a particular instizzle of openin a gangbangin' file,
until you close dat shit. If youXre goin ta open n' close nuff muthafuckin different
filez up in succession, itXs fine ta open each of dem wit tha same
filehandle, so you donXt gotta write up separate code ta process each
file.
.IX Xref "filehandles, about"
.IP "filename" 4
.IX Item "filename"
One name fo' a gangbangin' file. This name is listed up in a
\&\fBdirectory\fR. Yo ass can use it up in a \f(CW\*(C`open\*(C'\fR ta tell tha \fBoperatin system\fR
exactly which file you wanna open, n' associate tha file wit a
\&\fBfilehandle\fR, which will carry tha subsequent identitizzle of dat file in
your program, until you close dat shit.
.IX Xref "filenames, about"
.IP "filesystem" 4
.IX Item "filesystem"
A set of \fBdirectories\fR n' \fBfiles\fR residin on a
partizzle of tha disk. Right back up in yo muthafuckin ass. Sometimes known as a XpartitionX. Yo ass can chizzle the
fileXs name or even move a gangbangin' file round from directory ta directory within a
filesystem without straight-up movin tha file itself, at least under Unix.
.IX Xref "filesystems, defined"
.IP "file test operator" 4
.IX Item "file test operator"
A built-in unary operator dat you use to
determine whether suttin' is \fBtrue\fR on some gangbangin' file, like fuckin \f(CW\*(C`Xo
$filename\*(C'\fR ta test whether youXre tha balla of tha file.
.IX Xref "file test operators, about"
.IP "filter" 4
.IX Item "filter"
A program designed ta take a \fBstream\fR of input and
transform it tha fuck into a stream of output.
.IX Xref "filters, defined"
.IP "first-come" 4
.IX Item "first-come"
Da first \fB\s-1PAUSE\s0\fR
lyricist ta upload a \fBnamespace\fR automatically becomes tha \fBprimary
maintainer\fR fo' dat namespace. Da Xfirst comeX permissions distinguish a
\&\fBprimary maintainer\fR whoz ass was assigned dat role from one whoz ass received it
automatically.
.IX Xref "firstXcome permissions permissions, firstXcome"
.IP "flag" 4
.IX Item "flag"
We tend ta avoid dis term cuz it means all kindsa muthafuckin thangs.
It may mean a cold-ass lil command-line \fBswitch\fR dat takes no argument itself (such as
PerlXs \f(CW\*(C`Xn\*(C'\fR n' \f(CW\*(C`Xp\*(C'\fR flags) or, less frequently, a single-bit indicator
(like fuckin tha \f(CW\*(C`O_CREAT\*(C'\fR n' \f(CW\*(C`O_EXCL\*(C'\fR flags used up in \f(CW\*(C`sysopen\*(C'\fR). Right back up in yo muthafuckin ass. Sometimes
informally used ta refer ta certain regex modifiers.
.IX Xref "flags (term)"
.IP "floatin point" 4
.IX Item "floatin point"
A method of storing
numbers up in Xscientistical notationX, such dat tha precision of tha number is
independent of its magnitude (the decimal point XfloatsX). Perl do its
numeric work wit floating-point numbers (sometimes called XfloatsX) when
it canXt git away wit rockin \fBintegers\fR. Floating-point numbers is mere
approximationz of real numbers.
.IX Xref "floatin point methodz methods, floatin point"
.IP "flush" 4
.IX Item "flush"
Da act of emptyin a \fBbuffer\fR,
often before itXs full.
.IX Xref "flushin buffers buffers, flushing"
.IP "\s-1FMTEYEWTK\s0" 4
.IX Item "FMTEYEWTK"
Far Mo' Than Everythang Yo ass Ever Wanted To Know fo' realz. An
exhaustizzle treatise on one narrow topic, suttin' of a super\-\fB\s-1FAQ\s0\fR. Right back up in yo muthafuckin ass. See
Tomothy fo' far more.
.IX Xref "FMTEYEWTK acronym"
.IP "foldcase" 4
.IX Item "foldcase"
Da casemap used up in Unicode when comparin or matching
without regard ta case. Comparin lower\-, title\-, or uppercase is all
unreliable cuz of UnicodeXs complex, one-to-many case mappings. Foldcase is
a \fBlowercase\fR variant (usin a partially decomposed \fBnormalization\fR form
for certain codepoints) pimped specifically ta resolve all dis bullshit.
.IX Xref "foldcase (term)"
.IP "fork" 4
.IX Item "fork"
To create a cold-ass lil lil pimp \fBprocess\fR
identical ta tha parent process at its moment of conception, at least until
it gets scamz of its own. I aint talkin' bout chicken n' gravy biatch fo' realz. A thread wit protected memory.
.IX Xref "forkin processes processes, forking"
.IP "formal arguments" 4
.IX Item "formal arguments"
Da generic names by which a
\&\fBsubroutine\fR knows its \fBarguments\fR. In nuff languages, formal arguments
are always given individual names; up in Perl, tha formal arguments is just
the elementz of a array. Da formal arguments ta a Perl program are
\&\f(CW$ARGV[0]\fR, \f(CW$ARGV[1]\fR, n' so on. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Similarly, tha formal arguments ta a
Perl subroutine is \f(CW$_[0]\fR, \f(CW$_[1]\fR, n' so on. I aint talkin' bout chicken n' gravy biatch. Yo ass may give the
arguments individual names by assignin tha joints ta a \f(CW\*(C`my\*(C'\fR list. Right back up in yo muthafuckin ass. See
also \fBactual arguments\fR.
.IX Xref "formal arguments arguments, formal"
.IP "format" 4
.IX Item "format"
A justification of how tha fuck nuff spaces n' digits n' thangs
to put somewhere so dat whatever youXre printin comes up sick and
pretty.
.IX Xref "formats, defined"
.IP "freely available" 4
.IX Item "freely available"
Means you donXt gotta pay scrilla ta git it yo, but
the copyright on it may still belong ta one of mah thugs (like Larry).
.IX Xref "freely available (term)"
.IP "freely redistributable" 4
.IX Item "freely redistributable"
Means youXre not up in legal shiznit if you
give a funky-ass bootleg copy of it ta yo' playaz n' we smoke up bout dat shit. In
fact, weXd rather you gave a cold-ass lil copy ta all yo' playas.
.IX Xref "freely redistributable (term)"
.IP "freeware" 4
.IX Item "freeware"
Historically, any software dat you give away,
particularly if you make tha source code available as well. Now often
called \fBopen source software\fR. Recently there has been a trend ta use the
term up in contradistinction ta \fBopen source software\fR, ta refer only ta free
software busted out under tha Jacked Software
FoundationXs \s-1GPL \s0(General Public License) yo, but dis is hard as fuck ta justify
etymologically.
.IX Xref "freeware (term) Jacked Software Foundation"
.IP "function" 4
.IX Item "function"
Mathematically, a mappin of each of a set of input
values ta a particular output value. In computers, refers ta a
\&\fBsubroutine\fR or \fBoperator\fR dat returns a \fBvalue\fR. Well shiiiit, it may or may not
have input joints (called \fBarguments\fR).
.IX Xref "functions, about"
.IP "funny character" 4
.IX Item "funny character"
Someone like Larry, or one of his
peculiar playaz fo' realz. Also refers ta tha strange prefixes dat Perl requires as
noun markers on its variables.
.IX Xref "funny charactas characters, funky"
.SS "G"
.IX Subsection "G"
.IP "garbage collection" 4
.IX Item "garbage collection"
A misnamed featureXit should be called,
Xexpectin yo' mutha ta pick up afta youX. Right back up in yo muthafuckin ass. Strictly bustin lyrics, Perl
doesnXt do dis yo, but it relies on a reference-countin mechanizzle ta keep
things tidy. But fuck dat shiznit yo, tha word on tha street is dat we rarely drop a rhyme strictly n' will often refer ta the
reference-countin scheme as a gangbangin' form of garbage collection. I aint talkin' bout chicken n' gravy biatch. (If itXs any
comfort, when yo' interpreta exits, a XrealX garbage collector runs to
make shizzle every last muthafuckin thang is cleaned up if youXve been messy wit circular
references n' such.)
.IX Xref "garbage collection, defined"
.IP "\s-1GID\s0" 4
.IX Item "GID"
Group IDXin Unix, tha numeric crew \s-1ID\s0
that tha \fBoperatin system\fR uses ta identify you n' thugz of your
\&\fBgroup\fR.
.IX Xref "GID (Group ID) Group ID (GID)"
.IP "glob" 4
.IX Item "glob"
Strictly, tha shellXs \f(CW\*(C`*\*(C'\fR character, which will match
a XglobX of charactas when youXre tryin ta generate a list of filenames.
Loosely, tha act of rockin globs n' similar symbols ta do pattern matching.
See also \fBfileglob\fR n' \fBtypeglob\fR.
.IX Xref "glob (* character)"
.IP "global" 4
.IX Item "global"
Somethang you can peep from anywhere, probably used of
\&\fBvariables\fR n' \fBsubroutines\fR dat is visible everywhere up in your
program.  In Perl, only certain special variablez is truly globalXmost
variablez (and all subroutines) exist only up in tha current \fBpackage\fR.
Global variablez can be declared wit \f(CW\*(C`our\*(C'\fR. Right back up in yo muthafuckin ass. See XGlobal DeclarationsX in
Camel chapta 4, XStatements n' DeclarationsX.
.IX Xref "global (term)"
.IP "global destruction" 4
.IX Item "global destruction"
Da \fBgarbage collection\fR of globals (and tha hustlin
of any associated object destructors) dat takes place when a Perl
\&\fBinterpreter\fR is bein shut down. I aint talkin' bout chicken n' gravy biatch. Global destruction should not be
confused wit tha Apocalypse, except like when it should.
.IX Xref "global destruction"
.IP "glue language" 4
.IX Item "glue language"
A language like fuckin Perl dat is phat at hookin thangs
together dat werenXt intended ta be hooked together.
.IX Xref "glue language"
.IP "granularity" 4
.IX Item "granularity"
Da size of tha pieces youXre dealin with, menstrually
speaking.
.IX Xref "granularity"
.IP "grapheme" 4
.IX Item "grapheme"
A graphene be a allotrope of carbon arranged up in a
hexagonal crystal lattice one atom thick fo' realz. A \fBgrapheme\fR, or mo' fully, a
\&\fIgrapheme clusta string\fR be a single user-visible \fBcharacter\fR, which may
in turn be nuff muthafuckin charactas (\fBcodepoints\fR) long. For example, a cold-ass lil carriage
return plus a line feed be a single grapheme but two characters, while a
\&\s-1XXX\s0 be a single grapheme but one, two, or even three characters, depending
on \fBnormalization\fR.
.IX Xref "graphemes, defined"
.IP "greedy" 4
.IX Item "greedy"
A \fBsubpattern\fR whose
\&\fBquantifier\fR wants ta match as nuff thangs as possible.
.IX Xref "greedy subpatterns subpatterns, greedy"
.IP "grep" 4
.IX Item "grep"
Originally from tha oldschool Unix editor command fo' XGlobally
search fo' a Regular Expression n' Print itX, now used up in tha general
sense of any kind of search, especially text searches. Perl has a funky-ass built-in
\&\f(CW\*(C`grep\*(C'\fR function dat searches a list fo' elements matchin any given
criterion, whereas tha \fBgrep\fR(1) program searches fo' lines matchin a
\&\fBregular expression\fR up in one or mo' files.
.IX Xref "grep function"
.IP "group" 4
.IX Item "group"
A set of playaz of which yo ass be a member n' shit. In some
operatin systems (like Unix), you can give certain file access permissions
to other thugz of yo' group.
.IX Xref "groups, defined"
.IP "\s-1GV\s0" 4
.IX Item "GV"
An internal Xglob valueX typedef,
holdin a \fBtypeglob\fR. Da \f(CW\*(C`GV\*(C'\fR type be a subclass of \fB\s-1SV\s0\fR.
.IX Xref "GV (glob value) glob value (GV)"
.SS "H"
.IX Subsection "H"
.IP "hacker" 4
.IX Item "hacker"
Someone whoz ass is solidly persistent up in solvin technical
problems, whether these involve golfing, fightin orcs, or programming.
Hacker be a neutral term, morally bustin lyrics. Dope hackers is not ta be
confused wit evil \fBcrackers\fR or clueless \fBscript kiddies\fR. If you
confuse them, we will presume dat yo ass is either evil or clueless.
.IX Xref "hackers"
.IP "handlez" 4
.IX Item "handlez"
A \fBsubroutine\fR or \fBmethod\fR dat Perl calls when your
program need ta respond ta some internal event, like fuckin a \fBsignal\fR, or an
encounta wit a operator subject ta \fBoperator overloading\fR. Right back up in yo muthafuckin ass. See also
\&\fBcallback\fR.
.IX Xref "handlezs, defined"
.IP "hard reference" 4
.IX Item "hard reference"
A \fBscalar\fR \fBvalue\fR containing
the actual address of a \fBreferent\fR, such dat tha referentXs \fBreference\fR
count accounts fo' dat shit. (Some hard references is held internally, such as
the implicit reference from one of a \fBtypeglob\fRXs variable slots ta its
correspondin referent.) A hard reference is different from a \fBsymbolic
reference\fR.
.IX Xref "hard references, bout references, hard"
.IP "hash" 4
.IX Item "hash"
An unordered association of \fBkey\fR/\fBvalue\fR pairs, stored such dat you can easily bust a strang \fBkey\fR to
look up its associated data \fBvalue\fR. This glossary is like a hash, where
the word ta be defined is tha key n' tha definizzle is tha value fo' realz. A hash
is also sometimes septisyllabically called a Xassociatizzle arrayX, which is
a pretty phat reason fo' simply callin it a XhashX instead.
.IX Xref "hashes, bout key value pairs, about"
.IP "hash table" 4
.IX Item "hash table"
A data structure used internally by Perl fo' implementing
associatizzle arrays (hashes) efficiently. Right back up in yo muthafuckin ass. See also \fBbucket\fR.
.IX Xref "hash tables"
.IP "header file" 4
.IX Item "header file"
A file containin certain required
definitions dat you must include XaheadX of tha rest of yo' program ta do
certain obscure operations fo' realz. A C header file has a \fI.h\fR extension. I aint talkin' bout chicken n' gravy biatch. Perl
doesnXt straight-up have header files, though historically Perl has sometimes
used translated \fI.h\fR filez wit a \fI.ph\fR extension. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See \f(CW\*(C`require\*(C'\fR in
Camel chapta 27, XFunctionsX. (Header filez done been superseded by the
\&\fBmodule\fR mechanism.)
.IX Xref "header filez files, header"
.IP "here document" 4
.IX Item "here document"
So called cuz of a similar construct up in \fBshells\fR that
pretendz dat tha \fBlines\fR followin tha \fBcommand\fR is a separate \fBfile\fR
to be fed ta tha command, up ta some terminatin string. In Perl, however,
itXs just a gangbangin' fancy form of quoting.
.IX Xref "here documents"
.IP "hexadecimal" 4
.IX Item "hexadecimal"
A number up in base 16, XhexX fo' short. Da digits fo' 10
all up in 15 is customarily represented by tha lettas \f(CW\*(C`a\*(C'\fR all up in \f(CW\*(C`f\*(C'\fR.
Hexadecimal constants up in Perl start wit \f(CW\*(C`0x\*(C'\fR. Right back up in yo muthafuckin ass. See also tha \f(CW\*(C`hex\*(C'\fR
function up in Camel chapta 27, XFunctionsX.
.IX Xref "hexadecimals"
.IP "home directory" 4
.IX Item "home directory"
Da directory yo ass is put tha fuck into when
you log in. I aint talkin' bout chicken n' gravy biatch. On a Unix system, tha name is often placed tha fuck into \f(CW$ENV{HOME}\fR
or \f(CW$ENV{LOGDIR}\fR by \fIlogin\fR yo, but you can also find it with
\&\f(CW\*(C`(get\*(C'\fR\f(CW\*(C`pwuid($<))[7]\*(C'\fR. (Some platforms aint gots a cold-ass lil concept of a
home directory.)
.IX Xref "home directory directories, home"
.IP "host" 4
.IX Item "host"
Da computa on which a program or other data resides.
.IX Xref "host computers"
.IP "hubris" 4
.IX Item "hubris"
Excessive pride, tha sort of thang fo' which Zeus zaps
you fo'sho.  Also tha qualitizzle dat make you write (and maintain) programs that
other playas wonXt wanna say wack thangs bout yo. Hence, tha third pimped out
virtue of a programmer n' shit. Right back up in yo muthafuckin ass. See also \fBlaziness\fR n' \fBimpatience\fR.
.IX Xref "hubris quality"
.IP "\s-1HV\s0" 4
.IX Item "HV"
Short fo' a Xhash valueX typedef, which
holdz PerlXs internal representation of a hash. Da \f(CW\*(C`HV\*(C'\fR type be a
subclass of \fB\s-1SV\s0\fR.
.IX Xref "HV (hash value) hash value (HV)"
.SS "I"
.IX Subsection "I"
.IP "identifier" 4
.IX Item "identifier"
A legally formed name fo' most anythang up in which a
computa program might be interested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Many languages (includin Perl) allow
identifiers ta start wit a alphabetic character, n' then contain
alphabetics n' digits, n' you can put dat on yo' toast. Perl also allows connector punctuation like the
underscore characta wherever it allows alphabetics. (Perl also has more
fucked up names, like \fBqualified\fR names.)
.IX Xref "identifiers, defined"
.IP "impatience" 4
.IX Item "impatience"
Da anger you feel when tha computa is bein lazy.
This make you write programs dat donXt just react ta yo' needz yo, but
actually anticipate em. Or at least dat pretend ta yo. Hence, tha second
great virtue of a programmer n' shit. Right back up in yo muthafuckin ass. See also \fBlaziness\fR n' \fBhubris\fR.
.IX Xref "impatience quality"
.IP "implementation" 4
.IX Item "implementation"
How tha fuck a piece of code straight-up goes bout bustin its
job. Userz of tha code should not count on implementation details staying
the same unless they is part of tha published \fBinterface\fR.
.IX Xref "implementation (term)"
.IP "import" 4
.IX Item "import"
To bust access ta symbols dat is exported from another
module. Right back up in yo muthafuckin ass. See \f(CW\*(C`use\*(C'\fR up in Camel chapta 27, XFunctionsX.
.IX Xref "import (term)"
.IP "increment" 4
.IX Item "increment"
To increase tha value of
suttin' by 1 (or by some other number, if so specified).
.IX Xref "incrementin joints joints, incrementing"
.IP "indexing" 4
.IX Item "indexing"
In olden days, tha act of lookin up a \fBkey\fR up in an
actual index (like fuckin a funky-ass beeper book). But now itz merely tha act of using
any kind of key or posizzle ta find tha correspondin \fBvalue\fR, even if no
index is involved. Y'all KNOW dat shit, muthafucka! Things have degenerated ta tha point dat PerlXs
\&\f(CW\*(C`index\*(C'\fR function merely locates tha posizzle (index) of one strang in
another.
.IX Xref "indexin (term)"
.IP "indirect filehandle" 4
.IX Item "indirect filehandle"
An \fBexpression\fR that
evaluates ta suttin' dat can be used as a \fBfilehandle\fR: a \fBstring\fR
(filehandle name), a \fBtypeglob\fR, a typeglob \fBreference\fR, or a low-level
\&\fB\s-1IO\s0\fR object.
.IX Xref "indirect filehandlez filehandles, indirect"
.IP "indirection" 4
.IX Item "indirection"
If suttin' up in a program isnXt tha value youXre
lookin fo' but indicates where tha value is, thatXs indirection. I aint talkin' bout chicken n' gravy biatch. This can
be done wit either \fBsymbolic references\fR or \fBhard\fR.
.IX Xref "indirection (term)"
.IP "indirect object" 4
.IX Item "indirect object"
In Gangsta grammar, a gangbangin' finger-lickin' dirty-ass short
noun phrase between a verb n' its direct object indicatin tha beneficiary
or recipient of tha action. I aint talkin' bout chicken n' gravy biatch. In Perl, \f(CW\*(C`print STDOUT "$foo\en";\*(C'\fR can be
understood as Xverb indirect-object objectX, where \f(CW\*(C`STDOUT\*(C'\fR is the
recipient of tha \f(CW\*(C`print\*(C'\fR action, n' \f(CW"$foo"\fR is tha object being
printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Similarly, when invokin a \fBmethod\fR, you might place the
invocant up in tha datizzle slot between tha method n' its arguments:
.IX Xref "indirect objects, defined objects, indirect"
.Sp
.Vb 3
\&    $gollum = freshly smoked up Pathetic::Creature "Sme\*'agol";
\&    give $gollum "Fisssssh!";
\&    give $gollum "Precious!";
.Ve
.IP "indirect object slot" 4
.IX Item "indirect object slot"
Da syntactic posizzle fallin between a method call
and its arguments when rockin tha indirect object invocation syntax. (The
slot is distinguished by tha absence of a cold-ass lil comma between it n' tha next
argument.) \f(CW\*(C`STDERR\*(C'\fR is up in tha indirect object slot here:
.IX Xref "indirect object slot"
.Sp
.Vb 1
\&    print STDERR "Awake biaaatch! Awake biaaatch! Fear, Fire, Foes muthafucka! Awake!\en";
.Ve
.IP "infix" 4
.IX Item "infix"
An \fBoperator\fR dat comes up in between its \fBoperands\fR,
like fuckin multiplication up in \f(CW\*(C`24 * 7\*(C'\fR.
.IX Xref "infix operators"
.IP "inheritance" 4
.IX Item "inheritance"
What you git from yo' ancestors, genetically or
otherwise. If you happen ta be a \fBclass\fR, yo' ancestors is called \fBbase
classes\fR n' yo' descendants is called \fBderived classes\fR. Right back up in yo muthafuckin ass. See \fBsingle
inheritance\fR n' \fBmultiple inheritance\fR.
.IX Xref "inheritance, defined"
.IP "instance" 4
.IX Item "instance"
Short fo' Xan instizzle of a cold-ass lil classX, meanin a \fBobject\fR
of dat \fBclass\fR.
.IX Xref "instances (term)"
.IP "instizzle data" 4
.IX Item "instizzle data"
See \fBinstizzle variable\fR.
.IX Xref "instizzle data"
.IP "instizzle method" 4
.IX Item "instizzle method"
A \fBmethod\fR of a \fBobject\fR, as
opposed ta a \fBclass method\fR.
.IX Xref "instizzle methodz methods, instance"
.Sp
A \fBmethod\fR whose \fBinvocant\fR be a \fBobject\fR, not a \fBpackage\fR name. Every
object of a cold-ass lil class shares all tha methodz of dat class, so a instance
method applies ta all instancez of tha class, rather than applyin ta a
particular instizzle fo' realz. Also peep \fBclass method\fR.
.IP "instizzle variable" 4
.IX Item "instizzle variable"
An \fBattribute\fR of a \fBobject\fR; data stored wit tha particular object rather than wit tha class
as a whole.
.IX Xref "instizzle variables, defined variables, instance"
.IP "integer" 4
.IX Item "integer"
A number wit no fractionizzle (decimal) part fo' realz. A counting
number, like 1, 2, 3, n' so on yo, but includin 0 n' tha negatives.
.IX Xref "integers (term)"
.IP "interface" 4
.IX Item "interface"
Da skillz a piece of code promises ta provide
forever, up in contrast ta its \fBimplementation\fR, which it should feel free to
change whenever it likes.
.IX Xref "interfaces (term)"
.IP "interpolation" 4
.IX Item "interpolation"
Da insertion of a scalar or list value somewhere
in tha middle of another value, such dat it appears ta done been there all
along. In Perl, variable interpolation happens up in double-quoted strings and
patterns, n' list interpolation occurs when constructin tha list of
values ta pass ta a list operator or other such construct dat takes a
\&\fI\f(CI\*(C`LIST\*(C'\fI\fR.
.IX Xref "interpolation, defined"
.IP "interpreter" 4
.IX Item "interpreter"
Strictly bustin lyrics, a program dat readz a second
program n' do what tha fuck tha second program say directly without turnin the
program tha fuck into a gangbangin' finger-lickin' different form first, which is what tha fuck \fBcompilers\fR do. Perl is
not a interpreta by dis definition, cuz it gotz nuff a kind of
compila dat takes a program n' turns it tha fuck into a mo' executable form
(\fBsyntax trees\fR) within tha \fIperl\fR process itself, which tha Perl
\&\fBruntime\fR system then interprets.
.IX Xref "interpreters, defined"
.IP "invocant" 4
.IX Item "invocant"
Da agent on whose behalf a \fBmethod\fR is invoked. Y'all KNOW dat shit, muthafucka! In a
\&\fBclass\fR method, tha invocant be a package name. In a \fBinstance\fR method,
the invocant be a object reference.
.IX Xref "invocants, defined"
.IP "invocation" 4
.IX Item "invocation"
Da act of callin up a thugged-out deity, daemon, program,
method, subroutine, or function ta git it ta do what tha fuck you be thinkin itXs
supposed ta do.  We probably XcallX subroutines but XinvokeX methods, since
it soundz cooler.
.IX Xref "invocation, method"
.IP "I/O" 4
.IX Item "I/O"
Input from, or output to, a \fBfile\fR or \fBdevice\fR.
.IX Xref "I O (Input Output), defined Input Output (I O), defined"
.IP "\s-1IO\s0" 4
.IX Item "IO"
An internal I/O object. Can also mean \fBindirect object\fR.
.IP "I/O layer" 4
.IX Item "I/O layer"
One of tha filtas between tha data n' what tha fuck you git as input
or what tha fuck you end up wit as output.
.IX Xref "I O layer"
.IP "\s-1IPA\s0" 4
.IX Item "IPA"
India Pale Ale fo' realz. Also tha Internationistic Phonetic Alphabet, the
standard alphabet used fo' phonetic notation ghettowide. Draws heavily on
Unicode, includin nuff combinin characters.
.IX Xref "Internationistic Phonetic Alphabet (IPA) IPA (Internationistic Phonetic Alphabet)"
.IP "\s-1IP\s0" 4
.IX Item "IP"
Internizzle Protocol, or
Intellectual
Property.
.IX Xref "Internizzle Protocol (IP) IP (Internizzle Protocol) IP (Intellectual Property) Intellectual Property (IP)"
.IP "\s-1IPC\s0" 4
.IX Item "IPC"
Interprocess Communication.
.IX Xref "Interprocess Communication IPC (Interprocess Communication), bout communication"
.IP "is-a" 4
.IX Item "is-a"
A relationshizzle between two \fBobjects\fR up in which one
object is considered ta be a mo' specific version of tha other, generic
object: \s-1XA\s0 camel be a mammal.X Since tha generic object straight-up only exists
in a Platonic sense, we probably add a lil abstraction ta tha notion of
objects n' be thinkin of tha relationshizzle as bein between a generic \fBbase
class\fR n' a specific \fBderived class\fR. Oddly enough, Platonic classes
donXt always have Platonic relationshizzlesXsee \fBinheritance\fR.
.IX Xref "isXa relationshizzle"
.IP "iteration" 4
.IX Item "iteration"
Bustin suttin' repeatedly.
.IX Xref "iteration"
.IP "iterator" 4
.IX Item "iterator"
A special programmin gizmo dat keeps track of where yo ass is
in suttin' dat youXre tryin ta iterate over n' shit. Da \f(CW\*(C`foreach\*(C'\fR loop in
Perl gotz nuff a iterator; so do a hash, allowin you ta \f(CW\*(C`each\*(C'\fR through
it.
.IX Xref "iterators"
.IP "\s-1IV\s0" 4
.IX Item "IV"
Da integer four, not ta be
confused wit six, TomXs straight-up editor. Shiiit, dis aint no joke. \s-1IV\s0 also means a internal Integer
Value of tha type a \fBscalar\fR can hold, not ta be trippin wit a \fB\s-1NV\s0\fR.
.IX Xref "IV (Integer Value) Integer Value (IV)"
.SS "J"
.IX Subsection "J"
.IP "\s-1JAPH\s0" 4
.IX Item "JAPH"
XJust Another Perl HackerX, a cold-ass lil smart-ass but cryptic bit of Perl
code that, when executed, evaluates ta dat string. Often used to
illustrate a particular Perl feature, n' suttin' of a ongoing
Obfuscated Perl Contest peeped up in \s-1USENET\s0 signatures.
.IX Xref "JAPH acronym"
.SS "K"
.IX Subsection "K"
.IP "key" 4
.IX Item "key"
Da strang index ta a \fBhash\fR, used ta look up tha \fBvalue\fR
associated wit dat key.
.IX Xref "keys, defined"
.IP "keyword" 4
.IX Item "keyword"
See \fBreserved lyrics\fR.
.SS "L"
.IX Subsection "L"
.IP "label" 4
.IX Item "label"
A name you give ta a \fBstatement\fR so dat you can talk
about dat statement elsewhere up in tha program.
.IX Xref "labels, defined"
.IP "laziness" 4
.IX Item "laziness"
Da qualitizzle dat make you git all up in pimped out effort ta reduce
overall juice expenditure. Well shiiiit, it make you write labor-savin programs that
other playas will find useful, n' then document what tha fuck you freestyled so you
donXt gotta answer all kindsa muthafuckin thangs bout it yo. Hence, tha straight-up original gangsta pimped out
virtue of a programmer n' shiznit fo' realz. Also hence, dis book. Right back up in yo muthafuckin ass. See also \fBimpatience\fR and
\&\fBhubris\fR.
.IX Xref "lazinizz quality"
.IP "leftmost longest" 4
.IX Item "leftmost longest"
Da preference of tha \fBregular expression\fR engine ta match the
leftmost occurrence of a \fBpattern\fR, then given a posizzle at which a match
will occur, tha preference fo' tha longest match (presumin tha use of a
\&\fBgreedy\fR quantifier). Right back up in yo muthafuckin ass. See Camel chapta 5, XPattern MatchingX fo' \fImuch\fR
more on dis subject.
.IX Xref "leftmost longest preference regular expressions, leftmost longest preference"
.IP "left shift" 4
.IX Item "left shift"
A \fBbit shift\fR dat multiplies the
number by some juice of 2.
.IX Xref "left shift (<<) bit operator bitXshift operators, left shift << (left shift) bit operator"
.IP "lexeme" 4
.IX Item "lexeme"
Fancy term fo' a \fBtoken\fR.
.IX Xref "lexeme (token)"
.IP "lexer" 4
.IX Item "lexer"
Fancy term fo' a \fBtokener\fR.
.IX Xref "lexer (tokener)"
.IP "lexical analysis" 4
.IX Item "lexical analysis"
Fancy term fo' \fBtokenizing\fR.
.IX Xref "lexical analysis"
.IP "lexical scoping" 4
.IX Item "lexical scoping"
Lookin at yo' \fIOxford Gangsta
Dictionary\fR all up in a microscope. (Also known as \fBstatic scoping\fR, cuz
dictionaries donXt chizzle straight-up fast.) Similarly, lookin at variables
stored up in a private doggtionary (namespace) fo' each scope, which are
visible only from they point of declaration down ta tha end of tha lexical scope up in which they is declared. Y'all KNOW dat shit, muthafucka! XSyn.
\&\fBstatic scoping\fR. XAnt. \fBdynamic scoping\fR.
.IX Xref "lexical scopes, defined scopes static scopes scopes, static"
.IP "lexical variable" 4
.IX Item "lexical variable"
A \fBvariable\fR subject to
\&\fBlexical scoping\fR, declared by \f(CW\*(C`my\*(C'\fR. Often just called a XlexicalX. (The
\&\f(CW\*(C`our\*(C'\fR declaration declares a lexically scoped name fo' a global variable,
which aint itself a lexical variable.)
.IX Xref "lexical variables, bout variables, lexical"
.IP "library" 4
.IX Item "library"
Generally, a cold-ass lil collection of procedures. In ancient
days, referred ta a cold-ass lil collection of subroutines up in a \fI.pl\fR file. In modern
times, refers mo' often ta tha entire collection of Perl \fBmodules\fR on
your system.
.IX Xref "libraries, defined"
.IP "\s-1LIFO\s0" 4
.IX Item "LIFO"
Last In, First Out. Right back up in yo muthafuckin ass. See also \fB\s-1FIFO\s0\fR fo' realz. A \s-1LIFO\s0 is probably called a
\&\fBstack\fR.
.IX Xref "Last In, First Out (LIFO) LIFO (Last In, First Out) stacks, defined"
.IP "line" 4
.IX Item "line"
In Unix, a sequence of zero or mo' nonnewline characters
terminated wit a \fBnewline\fR character n' shit. On non-Unix machines, dis is
emulated by tha C library even if tha underlyin \fBoperatin system\fR has
different ideas.
.IX Xref "line (term)"
.IP "linebreak" 4
.IX Item "linebreak"
A \fBgrapheme\fR consistin of either a cold-ass lil carriage return followed
by a line feed or any characta wit tha Unicode Vertical Space \fBcharacter
property\fR.
.IX Xref "linebreaks"
.IP "line buffering" 4
.IX Item "line buffering"
Used by a \fBstandard I/O\fR output stream that
flushes its \fBbuffer\fR afta every last muthafuckin \fBnewline\fR. Many standard I/O libraries
automatically set up line bufferin on output dat is goin ta tha terminal.
.IX Xref "line bufferin buffering, line"
.IP "line number" 4
.IX Item "line number"
Da number of lines read previous ta dis one, plus 1. Perl
keeps a separate line number fo' each source or input file it opens. The
current source fileXs line number is represented by \f(CW\*(C`_\|_LINE_\|_\*(C'\fR. The
current input line number (for tha file dat was most recently read via
\&\f(CW\*(C`<FH>\*(C'\fR) is represented by tha \f(CW$.\fR (\f(CW$INPUT_LINE_NUMBER\fR)
variable. Many error lyrics report both joints, if available.
.IX Xref "line number"
.IP "link" 4
.IX Item "link"
Used as a noun, a name up in a \fBdirectory\fR dat represents a
\&\fBfile\fR fo' realz. A given file can have multiple links ta dat shit. ItXs like havin the
same beeper number listed up in tha beeper directory under different names fo' realz. As a
verb, ta resolve a partially \fBcompiled\fR fileXs unresolved symbols tha fuck into a
(nearly) executable image. Linkin can generally be static or dynamic,
which has not a god damn thang ta do wit static or dynamic scoping.
.IX Xref "links, defined"
.IP "\s-1LIST\s0" 4
.IX Item "LIST"
A syntactic construct representin a
comma\- separated list of expressions, evaluated ta produce a \fBlist value\fR.
Each \fBexpression\fR up in a \fI\f(CI\*(C`LIST\*(C'\fI\fR is evaluated up in \fBlist context\fR and
interpolated tha fuck into tha list value.
.IX Xref "LIST construct constructs, LIST"
.IP "list" 4
.IX Item "list"
An ordered set of scalar joints.
.IX Xref "lists, defined"
.IP "list context" 4
.IX Item "list context"
Da thang up in which a \fBexpression\fR is
expected by its surroundings (the code callin it) ta return a list of
values rather than a single value. Functions dat want a \fI\f(CI\*(C`LIST\*(C'\fI\fR of
arguments tell dem arguments dat they should produce a list value. Right back up in yo muthafuckin ass. See
also \fBcontext\fR.
.IX Xref "list context context, list"
.IP "list operator" 4
.IX Item "list operator"
An \fBoperator\fR dat do suttin' wit a list of
values, like fuckin \f(CW\*(C`join\*(C'\fR or \f(CW\*(C`grep\*(C'\fR. Usually used fo' named built-in
operators (like fuckin \f(CW\*(C`print\*(C'\fR, \f(CW\*(C`unlink\*(C'\fR, n' \f(CW\*(C`system\*(C'\fR) dat do not require
parentheses round they \fBargument\fR list.
.IX Xref "list operators, about"
.IP "list value" 4
.IX Item "list value"
An unnamed list of temporary scalar
values dat may be passed round within a program from any list-generating
function ta any function or construct dat serves up a \fBlist context\fR.
.IX Xref "list joints, bout joints, list"
.IP "literal" 4
.IX Item "literal"
A token up in a programmin language, like fuckin a number or
\&\fBstring\fR, dat gives you a actual \fBvalue\fR instead of merely representing
possible joints as a \fBvariable\fR do.
.IX Xref "literals, defined"
.IP "lil-endian" 4
.IX Item "lil-endian"
From Swift: one of mah thugs
who smokes eggs lil end first fo' realz. Also used of computas dat store tha least
significant \fBbyte\fR of a word at a lower byte address than da most thugged-out
significant byte. Often considered superior ta big-endian machines. Right back up in yo muthafuckin ass. See
also \fBbig-endian\fR.
.IX Xref "lilXendian, defined endianness, lilXendian"
.IP "local" 4
.IX Item "local"
Not meanin tha same thang everywhere, so peek-a-boo, clear tha way, I be comin' thru fo'sho fo' realz. A global
variable up in Perl can be localized inside a \fBdynamic scope\fR via the
\&\f(CW\*(C`local\*(C'\fR operator.
.IX Xref "local operator, about"
.IP "logical operator" 4
.IX Item "logical operator"
Symbols representin tha concepts XandX, XorX,
XxorX, n' XnotX.
.IX Xref "logical operators, about"
.IP "lookahead" 4
.IX Item "lookahead"
An \fBassertion\fR dat peeks all up in tha strang ta tha right of tha current match location.
.IX Xref "lookahead assertions assertions (in regexes), lookahead"
.IP "lookbehind" 4
.IX Item "lookbehind"
An \fBassertion\fR dat peeks all up in tha strang ta tha left of tha current match
location.
.IX Xref "lookbehind assertions assertions (in regexes), lookbehind"
.IP "loop" 4
.IX Item "loop"
A construct that
performs suttin' repeatedly, like a rolla coaster.
.IX Xref "loop constructs n' statements, bout constructs, loop"
.IP "loop control statement" 4
.IX Item "loop control statement"
Any statement within tha body of a loop dat can
make a loop prematurely stop loopin or skip a \fBiteration\fR. Generally,
you shouldnXt try dis on rolla coasters.
.IX Xref "statements, loop control"
.IP "loop label" 4
.IX Item "loop label"
A kind of key or name attached ta a loop (or
rolla coaster) so dat loop control statements can rap bout which loop
they wanna control.
.IX Xref "loop labels labels, loop"
.IP "lowercase" 4
.IX Item "lowercase"
In Unicode, not just
charactas wit tha General Category of Lowercase Letter yo, but any character
with tha Lowercase property, includin Modifier Letters, Letta Numbers,
some Other Symbols, n' one Combinin Mark.
.IX Xref "lowercase charactas characters, lowercase"
.IP "lvaluable" 4
.IX Item "lvaluable"
Able ta serve as a \fBlvalue\fR.
.IX Xref "lvaluable function functions, lvaluable"
.IP "lvalue" 4
.IX Item "lvalue"
Term used by language lawyers fo' a
storage location you can assign a freshly smoked up \fBvalue\fR to, like fuckin a \fBvariable\fR or
an element of a \fBarray\fR. Da XlX is short fo' XleftX, as up in tha left side
of a assignment, a typical place fo' lvalues fo' realz. An \fBlvaluable\fR function or
expression is one ta which a value may be assigned, as up in \f(CW\*(C`pos($x) = 10\*(C'\fR.
.IX Xref "lvalue (term) joints, lvalue"
.IP "lvalue modifier" 4
.IX Item "lvalue modifier"
An adjectival pseudofunction that
warps tha meanin of a \fBlvalue\fR up in some declaratizzle fashion. I aint talkin' bout chicken n' gravy biatch. Currently
there is three lvalue modifiers: \f(CW\*(C`my\*(C'\fR, \f(CW\*(C`our\*(C'\fR, n' \f(CW\*(C`local\*(C'\fR.
.IX Xref "lvalue modifier modifiers, lvalue"
.SS "M"
.IX Subsection "M"
.IP "magic" 4
.IX Item "magic"
Technically bustin lyrics, any extra semantics attached ta a
variable like fuckin \f(CW$!\fR, \f(CW$0\fR, \f(CW%ENV\fR, or \f(CW%SIG\fR, or ta any tied
variable.  Magical thangs happen when you diddle dem variables.
.IX Xref "magic (term)"
.IP "magical increment" 4
.IX Item "magical increment"
An \fBincrement\fR operator dat knows how tha fuck to
bump up \s-1ASCII\s0 alphabetics as well as numbers.
.IX Xref "magical increment operator"
.IP "magical variables" 4
.IX Item "magical variables"
Special variablez dat have side
effects when you access dem or assign ta em. For example, up in Perl,
changin elementz of tha \f(CW%ENV\fR array also chizzlez tha corresponding
environment variablez dat subprocesses will use. Readin tha \f(CW$!\fR
variable gives you tha current system error number or message.
.IX Xref "magical variablez variables, magical"
.IP "Makefile" 4
.IX Item "Makefile"
A file dat controls tha compilation of a program. Perl programs
donXt probably need a \fBMakefile\fR cuz tha Perl compila has nuff
self-control.
.IX Xref "Makefile"
.IP "man" 4
.IX Item "man"
Da Unix program dat displays online documentation
(manual pages) fo' yo thugged-out ass.
.IX Xref "man program (Unix)"
.IP "manpage" 4
.IX Item "manpage"
A XpageX from tha manuals, typically accessed via the
\&\fIman\fR(1) command. Y'all KNOW dat shit, muthafucka! A manpage gotz nuff a \s-1SYNOPSIS,\s0 a \s-1DESCRIPTION,\s0 a list of
\&\s-1BUGS,\s0 n' so on, n' is typically longer than a page. There is manpages
documentin \fBcommands\fR, \fBsyscalls\fR, \fBlibrary\fR \fBfunctions\fR, \fBdevices\fR,
\&\fBprotocols\fR, \fBfiles\fR, n' such. In dis book, we call any piece of
standard Perl documentation (like perlop or perldelta) a manpage, no
matta what tha fuck format itXs installed up in on yo' system.
.IX Xref "manpages, defined"
.IP "matching" 4
.IX Item "matching"
See \fBpattern matching\fR.
.IX Xref "matching"
.IP "member data" 4
.IX Item "member data"
See \fBinstizzle variable\fR.
.IX Xref "member data"
.IP "memory" 4
.IX Item "memory"
This always means yo' main memory, not yo' disk.
Cloudin tha issue is tha fact dat yo' machine may implement
\&\fBvirtual\fR memory; dat is, it will pretend dat it has mo' memory than
it straight-up do, n' itXll use disk space ta hold inactizzle bits, n' you can put dat on yo' toast. This can
make it seem like you gotz a lil mo' memory than you straight-up do yo, but
itXs not a substitute fo' real memory. Da dopest thang dat can be holla'd
about virtual memory is dat it lets yo' performizzle degrade gradually
rather than suddenly when you run outta real memory. But yo' program
can take a thugged-out dirtnap when you run outta virtual memory, tooXif you havenXt thrashed
your disk ta dirtnap first.
.IX Xref "memory, defined"
.IP "metacharacter" 4
.IX Item "metacharacter"
A \fBcharacter\fR dat is \fInot\fR supposed ta be treated normally. Which characters
are ta be treated specially as metacharactas varies pimped outly from context to
context. Yo crazy-ass \fBshell\fR gonna git certain metacharacters, double-quoted Perl
\&\fBstrings\fR have other metacharacters,
and \fBregular expression\fR patterns have all tha double-quote metacharactas plus
some extra onez of they own.
.IX Xref "metacharacters, bout characters, regex metacharactas regular expressions, metacharactas and"
.IP "metasymbol" 4
.IX Item "metasymbol"
Somethang weXd call a
\&\fBmetacharacter\fR except dat itXs a sequence of mo' than one character.
Generally, tha straight-up original gangsta characta up in tha sequence must be a legit metacharacter
to git tha other charactas up in tha metasymbol ta misbehave along wit dat shit.
.IX Xref "metasymbols, bout escape sequences"
.IP "method" 4
.IX Item "method"
A kind of action dat a \fBobject\fR can take if you tell
it to. Right back up in yo muthafuckin ass. See Camel chapta 12, XObjectsX.
.IX Xref "methods, defined"
.IP "method resolution order" 4
.IX Item "method resolution order"
Da path Perl takes all up in \f(CW@INC\fR. By default, dis be a thugged-out double depth first
search, once lookin fo' defined methodz n' once fo' \f(CW\*(C`AUTOLOAD\*(C'\fR yo. However,
Perl lets you configure dis wit \f(CW\*(C`mro\*(C'\fR.
.IX Xref "method resolution order (mro) mro (method resolution order)"
.IP "minicpan" 4
.IX Item "minicpan"
A \s-1CPAN \s0mirror dat includes just tha sickest fuckin versions fo' each
distribution, probably pimped wit \f(CW\*(C`CPAN::Mini\*(C'\fR. Right back up in yo muthafuckin ass. See
Camel chapta 19, \s-1XCPANX.\s0
.IX Xref "minicpan, defined CPAN (Comprehensive Perl Archive Network), minicpan n' CPAN::Mini module"
.IP "minimalism" 4
.IX Item "minimalism"
Da belief dat Xsmall is dopeX. Paradoxically, if you
say suttin' up in a lil' small-ass language, it turns up big, n' if you say it up in a
bangin' language, it turns up small. Go figure.
.IX Xref "minimalism"
.IP "mode" 4
.IX Item "mode"
In tha context of tha \fIstat\fR(2) syscall, refers ta tha field
holdin tha \fBpermission bits\fR n' tha type of tha \fBfile\fR.
.IX Xref "mode"
.IP "modifier" 4
.IX Item "modifier"
See \fBstatement modifier\fR, \fBregular expression\fR, and
\&\fBlvalue\fR, not necessarily up in dat order.
.IX Xref "modifiers, defined"
.IP "module" 4
.IX Item "module"
A \fBfile\fR dat defines a \fBpackage\fR of (almost) tha same
name, which can either \fBexport\fR symbols or function as a \fBobject\fR class.
(A moduleXs main \fI.pm\fR file may also load up in other filez up in support of the
module.) See tha \f(CW\*(C`use\*(C'\fR built-in.
.IX Xref "modules, defined"
.IP "modulus" 4
.IX Item "modulus"
An integer divisor when
youXre horny bout tha remainder instead of tha quotient.
.IX Xref "modulus (%) operator % (modulus) operator"
.IP "mojibake" 4
.IX Item "mojibake"
When you drop a rhyme one language n' tha computa be thinkin youXre
speakin another n' shit. YouXll peep odd translations when you bust \s-1UTFX8,\s0 for
instizzle yo, but tha computa be thinkin you busted Latin\-1, showin all sorts of
weird charactas instead. Y'all KNOW dat shit, muthafucka! Da term is freestyled XXXXXXin Japanese and
means Xcharacta rotX, a apt description. I aint talkin' bout chicken n' gravy biatch. Pronounced [\f(CW\*(C`modXibake\*(C'\fR] in
standard \fB\s-1IPA\s0\fR phonetics, or approximately Xmoh-jee-bah-kehX.
.IX Xref "mojibake"
.IP "monger" 4
.IX Item "monger"
Short fo' one gangmember of \fBPerl mongers\fR, a
purveyor of Perl.
.IX Xref "mongers, Perl Perl mongers"
.IP "mortal" 4
.IX Item "mortal"
A temporary value scheduled ta take a thugged-out dirtnap when the
current statement finishes.
.IX Xref "mortal value joints, mortal"
.IP "mro" 4
.IX Item "mro"
See \fBmethod resolution order\fR.
.IP "multidimensionizzle array" 4
.IX Item "multidimensionizzle array"
An array wit multiple
subscripts fo' findin a single element. Perl implements these using
\&\fBreferences\fRXsee Camel chapta 9, XData StructuresX.
.IX Xref "multidimensionizzle arrays arrays, multidimensional"
.IP "multiple inheritance" 4
.IX Item "multiple inheritance"
Da features you gots from
your mutha n' father, mixed together unpredictably. (See also
\&\fBinheritance\fR n' \fBsingle inheritance\fR.) In computa languages (including
Perl), it is tha notion dat a given class may have multiple direct
ancestors or \fBbase classes\fR.
.IX Xref "multiple inheritizzle inheritance, multiple"
.SS "N"
.IX Subsection "N"
.IP "named pipe" 4
.IX Item "named pipe"
A \fBpipe\fR wit a name embedded up in the
\&\fBfilesystem\fR so dat it can be accessed by two unrelated \fBprocesses\fR.
.IX Xref "named pipes pipes, names"
.IP "namespace" 4
.IX Item "namespace"
A domain of names. Yo ass neednXt worry bout whether the
names up in one such domain done been used up in another n' shit. Right back up in yo muthafuckin ass. See \fBpackage\fR.
.IX Xref "namespaces, about"
.IP "NaN" 4
.IX Item "NaN"
Not a number n' shit. Da value Perl uses
for certain invalid or inexpressible floating-point operations.
.IX Xref "NaN (not a number) not a number (NaN)"
.IP "network address" 4
.IX Item "network address"
Da most blingin attribute of a socket, like your
telephoneXs telephone number n' shit. Typically a \s-1IP\s0 address. Right back up in yo muthafuckin ass. See also \fBport\fR.
.IX Xref "network address"
.IP "newline" 4
.IX Item "newline"
A single characta that
represents tha end of a line, wit tha \s-1ASCII\s0 value of 012 octal under Unix
(but 015 on a Mac), n' represented by \f(CW\*(C`\en\*(C'\fR up in Perl strings. For Windows
machines freestylin text files, n' fo' certain physical devices like
terminals, tha single newline gets automatically translated by yo' C
library tha fuck into a line feed n' a cold-ass lil carriage return yo, but normally, no
translation is done.
.IX Xref "newline characta characters, newline"
.IP "\s-1NFS\s0" 4
.IX Item "NFS"
Network File System, which allows you ta mount a remote filesystem as if it was local.
.IX Xref "NFS (Network File System) Network File System (NFS)"
.IP "normalization" 4
.IX Item "normalization"
Convertin a text strang tha fuck into a alternate but equivalent
\&\fBcanonical\fR (or compatible) representation dat can then be compared for
equivalence. Unicode recognizes four different normalization forms: \s-1NFD,
NFC, NFKD,\s0 n' \s-1NFKC.\s0
.IX Xref "normalization"
.IP "null character" 4
.IX Item "null character"
A characta wit tha numeric value of
zero. ItXs used by C ta terminizzle strings yo, but Perl allows strings to
contain a null.
.IX Xref "null characta characters, null"
.IP "null list" 4
.IX Item "null list"
A \fBlist value\fR wit zero elements, represented
in Perl by \f(CW\*(C`()\*(C'\fR.
.IX Xref "null lists lists, null"
.IP "null string" 4
.IX Item "null string"
A \fBstring\fR containin no characters, not to
be trippin wit a strang containin a \fBnull character\fR, which has a
positizzle length n' is \fBtrue\fR.
.IX Xref "null strings strings, null"
.IP "numeric context" 4
.IX Item "numeric context"
Da thang up in which a expression
is expected by its surroundings (the code callin it) ta return a number.
See also \fBcontext\fR n' \fBstrin context\fR.
.IX Xref "numeric context context, numeric"
.IP "numification" 4
.IX Item "numification"
(Sometimes spelled \fInummification\fR n' \fInummify\fR.) Perl lingo
for implicit conversion tha fuck into a number; tha related verb is \fInumify\fR.
\&\fINumification\fR is intended ta rhyme wit \fImummification\fR, n' \fInumify\fR with
\&\fImummify\fR. Well shiiiit, it is unrelated ta Gangsta \fInumen\fR, \fInumina\fR, \fInuminous\fR. We
originally forgot tha extra \fIm\fR a long-ass time ago, n' some playas gots used to
our funky spelling, n' so just as wit \f(CW\*(C`HTTP_REFERER\*(C'\fRXs own missin letter,
our weird spellin has stuck around.
.IX Xref "numification"
.IP "\s-1NV\s0" 4
.IX Item "NV"
Short fo' Nevada, no part of
which will eva be trippin wit civilization. I aint talkin' bout chicken n' gravy biatch. \s-1NV\s0 also means a internal
floating\- point Numeric Value of tha type a \fBscalar\fR can hold, not ta be
confused wit a \fB\s-1IV\s0\fR.
.IX Xref "Numeric Value (NV) NV (Numeric Value)"
.IP "nybble" 4
.IX Item "nybble"
Half a \fBbyte\fR, equivalent ta one \fBhexadecimal\fR digit, n' worth
four \fBbits\fR.
.IX Xref "nybble"
.SS "O"
.IX Subsection "O"
.IP "object" 4
.IX Item "object"
An \fBinstance\fR of a \fBclass\fR. Right back up in yo muthafuckin ass. Somethang dat XknowsX
what user-defined type (class) it is, n' what tha fuck it can do cuz of what
class it is. Yo crazy-ass program can request a object ta do thangs yo, but the
object gets ta decizzle whether it wants ta do dem or not. Right back up in yo muthafuckin ass. Some objects are
more accommopimpin than others.
.IX Xref "objects, defined"
.IP "octal" 4
.IX Item "octal"
A number up in base 8. Only tha digits 0 all up in 7 is allowed. Y'all KNOW dat shit, muthafucka! Octal
constants up in Perl start wit 0, as up in 013. Right back up in yo muthafuckin ass. See also tha \f(CW\*(C`oct\*(C'\fR function.
.IX Xref "octals"
.IP "offset" 4
.IX Item "offset"
How tha fuck nuff thangs you gotta skip
over when movin from tha beginnin of a strang or array ta a specific
posizzle within dat shit. Thus, tha minimum offset is zero, not one, cuz you
donXt skip anythang ta git ta tha straight-up original gangsta item.
.IX Xref "offsets up in strings strings, offsets in"
.IP "one-liner" 4
.IX Item "one-liner"
An entire computa program crammed tha fuck into one line of
text.
.IX Xref "oneXliner programs"
.IP "open source software" 4
.IX Item "open source software"
Programs fo' which tha source code is freely
available n' freely redistributable, wit no commercial strings attached.
For a mo' detailed definition, peep <http://www.opensource.org/osd.html>.
.IX Xref "open source software"
.IP "operand" 4
.IX Item "operand"
An \fBexpression\fR dat yieldz a \fBvalue\fR dat an
\&\fBoperator\fR operates on. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See also \fBprecedence\fR.
.IX Xref "operandz (term)"
.IP "operatin system" 4
.IX Item "operatin system"
A special program dat runs on tha bare
machine n' hides tha gory detailz of managin \fBprocesses\fR n' \fBdevices\fR.
Usually used up in a looser sense ta indicate a particular culture of
programming. Da loose sense can be used at varyin levelz of specificity.
At one extreme, you might say dat all versionz of Unix n' Unix-lookalikes
are tha same operatin system (upsettin nuff people, especially lawyers
and other advocates) fo' realz. At tha other extreme, you could say dis particular
version of dis particular vendorXs operatin system is different from any
other version of dis or any other vendorXs operatin system. Perl is much
more portable across operatin systems than nuff other languages. Right back up in yo muthafuckin ass. See also
\&\fBarchitecture\fR n' \fBplatform\fR.
.IX Xref "operatin systems, defined"
.IP "operator" 4
.IX Item "operator"
A gizmo dat transforms some number of input joints to
some number of output joints, often built tha fuck into a language wit a special
syntax or symbol fo' realz. A given operator may have specific expectations about
what \fBtypes\fR of data you give as its arguments (\fBoperands\fR) n' what tha fuck type
of data you want back from dat shit.
.IX Xref "operators, about"
.IP "operator overloading" 4
.IX Item "operator overloading"
A kind of
\&\fBoverloading\fR dat you can do on built-in \fBoperators\fR ta make dem work
on \fBobjects\fR as if tha objects was ordinary scalar joints yo, but wit the
actual semantics supplied by tha object class. This is set up wit the
overload \fBpragma\fRXsee Camel chapta 13, XOverloadingX.
.IX Xref "operator overloading, bout overloading, operator"
.IP "options" 4
.IX Item "options"
See either \fBswitches\fR or \fBregular expression modifiers\fR.
.IX Xref "options"
.IP "ordinal" 4
.IX Item "ordinal"
An abstract characterXs integer value. Right back up in yo muthafuckin ass. Same thang as
\&\fBcodepoint\fR.
.IX Xref "ordinals (term)"
.IP "overloading" 4
.IX Item "overloading"
Givin additionizzle meanings ta a symbol or construct.
Actually, all languages do overloadin ta one extent or another, since
people is phat at figurin up thangs from \fBcontext\fR.
.IX Xref "overloading, defined"
.IP "overriding" 4
.IX Item "overriding"
Hidin or invalipimpin some other definizzle of the
same name. (Not ta be trippin wit \fBoverloading\fR, which addz definitions
that must be disambiguated some other way.) To confuse tha issue further,
we use tha word wit two overloaded definitions: ta describe how tha fuck you can
define yo' own \fBsubroutine\fR ta hide a funky-ass built-in \fBfunction\fR of tha same
name (see tha section XOverridin Built-in FunctionsX up in Camel chapta 11,
XModulesX), n' ta describe how tha fuck you can define a replacement \fBmethod\fR up in a
\&\fBderived class\fR ta hide a \fBbase class\fRXs method of tha same name (see
Camel chapta 12, XObjectsX).
.IX Xref "overriding, defined"
.IP "baller" 4
.IX Item "baller"
Da one user (apart from the
superuser) whoz ass has absolute control over a \fBfile\fR fo' realz. A file may also have a
\&\fBgroup\fR of playas whoz ass may exercise joint ballershizzle if tha real baller
permits dat shit. Right back up in yo muthafuckin ass. See \fBpermission bits\fR.
.IX Xref "ballership, file files, ballershizzle of"
.SS "P"
.IX Subsection "P"
.IP "package" 4
.IX Item "package"
A \fBnamespace\fR fo' global \fBvariables\fR, \fBsubroutines\fR,
and tha like, such dat they can be kept separate from like-named
\&\fBsymbols\fR up in other namespaces. In a sense, only tha package is global,
since tha symbols up in tha packageXs symbol table is only accessible from
code \fBcompiled\fR outside tha package by namin tha package. But up in another
sense, all package symbols is also globalsXtheyXre just well-organized
globals.
.IX Xref "packages, defined"
.IP "pad" 4
.IX Item "pad"
Short fo' \fBscratchpad\fR.
.IX Xref "padz (scratchpads)"
.IP "parameter" 4
.IX Item "parameter"
See \fBargument\fR.
.IX Xref "parameters"
.IP "parent class" 4
.IX Item "parent class"
See \fBbase class\fR.
.IX Xref "parent classes classes, parent"
.IP "parse tree" 4
.IX Item "parse tree"
See \fBsyntax tree\fR.
.IX Xref "parse tree"
.IP "parsing" 4
.IX Item "parsing"
Da subtle but sometimes brutal art of attemptin ta turn
your possibly malformed program tha fuck into a valid \fBsyntax tree\fR.
.IX Xref "parsing, about"
.IP "patch" 4
.IX Item "patch"
To fix by applyin one, as it were, so peek-a-boo, clear tha way, I be comin' thru fo'sho. In tha realm of hackerdom, a
listin of tha differences between two versionz of a program as might be
applied by tha \fBpatch\fR(1) program when you wanna fix a funky-ass bug or upgrade
your oldschool version.
.IX Xref "patches"
.IP "\s-1PATH\s0" 4
.IX Item "PATH"
Da list of
\&\fBdirectories\fR tha system searches ta find a program you want to
\&\fBexecute\fR.  Da list is stored as one of yo' \fBenvironment variables\fR,
accessible up in Perl as \f(CW$ENV{PATH}\fR.
.IX Xref "PATH environment variable variables, environment"
.IP "pathname" 4
.IX Item "pathname"
A straight-up qualified filename like fuckin \fI/usr/bin/perl\fR. Right back up in yo muthafuckin ass. Sometimes
confused wit \f(CW\*(C`PATH\*(C'\fR.
.IX Xref "pathname"
.IP "pattern" 4
.IX Item "pattern"
A template used up in \fBpattern matching\fR.
.IX Xref "patterns, defined"
.IP "pattern matching" 4
.IX Item "pattern matching"
Takin a pattern, probably a \fBregular
expression\fR, n' tryin tha pattern various ways on a strang ta peep whether
thereXs any way ta make it fit. Often used ta pick bangin-ass tidbits out
of a gangbangin' file.
.IX Xref "pattern matching, about"
.IP "\s-1PAUSE\s0" 4
.IX Item "PAUSE"
Da Perl Authors Upload SErver (<http://pause.perl.org>), tha gateway
for \fBmodules\fR on they way ta \fB\s-1CPAN\s0\fR.
.IX Xref "Perl Authors Upload SErver (PAUSE) PAUSE (Perl Authors Upload SErver)"
.IP "Perl mongers" 4
.IX Item "Perl mongers"
A Perl user group, takin tha form of its
name from tha New York Perl mongers, tha straight-up original gangsta Perl user group. Find one
near you at <http://www.pm.org>.
.IX Xref "Perl mongers mongers, Perl"
.IP "permission bits" 4
.IX Item "permission bits"
Bits dat tha \fBballer\fR of a gangbangin' file sets
or unsets ta allow or disallow access ta other people. These flag bits are
part of tha \fBmode\fR word returned by tha \f(CW\*(C`stat\*(C'\fR built-in when you ask
on some gangbangin' file. On Unix systems, you can check tha \fIls\fR(1) manpage fo' more
information.
.IX Xref "permission bits bits, permission"
.IP "Pern" 4
.IX Item "Pern"
What you git when you do \f(CW\*(C`Perl++\*(C'\fR twice. Bustin it only once
will curl yo' hair. Shiiit, dis aint no joke. Yo ass gotta increment it eight times ta shampoo your
hair. Shiiit, dis aint no joke. Lather, rinse, iterate.
.IX Xref "Pern (term)"
.IP "pipe" 4
.IX Item "pipe"
A direct \fBconnection\fR dat carries tha output of one
\&\fBprocess\fR ta tha input of another without a intermediate temporary file.
Once tha pipe is set up, tha two processes up in question can read n' write
as if they was rappin' ta a aiiight file, wit some caveats.
.IX Xref "pipes, defined"
.IP "pipeline" 4
.IX Item "pipeline"
A seriez of \fBprocesses\fR all up in a row, linked by \fBpipes\fR, where
each passes its output stream ta tha next.
.IX Xref "pipeline"
.IP "platform" 4
.IX Item "platform"
Da entire hardware n' software context up in which a
program runs fo' realz. A program freestyled up in a platform-dependent language might
break if you chizzle any of tha following: machine, operatin system,
libraries, compiler, or system configuration. I aint talkin' bout chicken n' gravy biatch. Da \fIperl\fR interpreta has
to be \fBcompiled\fR differently fo' each platform cuz it is implemented
in C yo, but programs freestyled up in tha Perl language is largely platform
independent.
.IX Xref "platforms, defined"
.IP "pod" 4
.IX Item "pod"
Da markup
used ta embed documentation tha fuck into yo' Perl code. Pod standz fo' XPlain old
documentationX. Right back up in yo muthafuckin ass. See Camel chapta 23, XPlain Oldskool DocumentationX.
.IX Xref "pod (plain oldschool documentation), bout plain oldschool documentation"
.IP "pod command" 4
.IX Item "pod command"
A sequence, like fuckin \f(CW\*(C`=head1\*(C'\fR, dat denotes
the start of a \fBpod\fR section.
.IX Xref "pod commandz commands, pod"
.IP "pointer" 4
.IX Item "pointer"
A \fBvariable\fR up in a language like C dat gotz nuff tha exact
memory location of some other item. Perl handlez pointas internally so you
donXt gotta worry bout em. Instead, you just use symbolic pointas in
the form of \fBkeys\fR n' \fBvariable\fR names, or \fBhard references\fR, which
arenXt pointas (but act like pointas n' do up in fact contain pointers).
.IX Xref "pointers"
.IP "polymorphism" 4
.IX Item "polymorphism"
Da notion dat you can tell a \fBobject\fR ta do something
generic, n' tha object will interpret tha command up in different ways
dependin on its type. [< Greek \s-1XXXX\- + XXXXX,\s0 nuff forms.]
.IX Xref "polymorphism"
.IP "port" 4
.IX Item "port"
Da part of tha address of a \s-1TCP\s0 or \s-1UDP\s0 socket dat directs
packets ta tha erect process afta findin tha right machine, something
like tha beeper extension you give when you reach tha company operator fo' realz. Also
the result of convertin code ta run on a gangbangin' finger-lickin' different platform than
originally intended, or tha verb denotin dis conversion.
.IX Xref "ports (term)"
.IP "portable" 4
.IX Item "portable"
Back up in tha day, C code compilable under both \s-1BSD\s0 and
SysV. In general, code dat can be easily converted ta run on another
\&\fBplatform\fR, where XeasilyX can be defined however you like, n' usually
is.  Anythang may be considered portable if you try hard enough, like fuckin a
mobile home or London Bridge.
.IX Xref "portability, about"
.IP "porter" 4
.IX Item "porter"
Someone whoz ass XcarriesX software from one \fBplatform\fR ta another.
Portin programs freestyled up in platform-dependent languages like fuckin C can be
hard as fuck work yo, but portin programs like Perl is straight-up much worth the
agony.
.IX Xref "porters"
.IP "possessive" 4
.IX Item "possessive"
Said of quantifiers n' crews up in patterns dat refuse
to give up anythang once theyXve gotten they mitts on dat shit. Catchier and
easier ta say than tha even mo' formal \fInonbacktrackable\fR.
.IX Xref "possessive (term)"
.IP "\s-1POSIX\s0" 4
.IX Item "POSIX"
Da Portable Operatin System Interface
specification.
.IX Xref "Portable Operatin System Interface (POSIX), bout POSIX (Portable Operatin System Interface), about"
.IP "postfix" 4
.IX Item "postfix"
An \fBoperator\fR dat bigs up its \fBoperand\fR, as in
\&\f(CW\*(C`$x++\*(C'\fR.
.IX Xref "postfix operator"
.IP "pp" 4
.IX Item "pp"
An internal shorthand fo' a
Xpush\- popX code; dat is, C code implementin PerlXs stack machine.
.IX Xref "pp (pushXpop) code pushXpop (pp) code"
.IP "pragma" 4
.IX Item "pragma"
A standard module whose practical hints and
suggestions is received (and possibly ignored) at compile time. Pragmas
are named up in all lowercase.
.IX Xref "pragmas, bout modules"
.IP "precedence" 4
.IX Item "precedence"
Da rulez of
conduct that, up in tha absence of other guidance, determine what tha fuck should
happen first.  For example, up in tha absence of parentheses, you always do
multiplication before addition.
.IX Xref "precedence rules, bout operators, precedence rules"
.IP "prefix" 4
.IX Item "prefix"
An \fBoperator\fR dat precedes its \fBoperand\fR, as in
\&\f(CW\*(C`++$x\*(C'\fR.
.IX Xref "prefix operators"
.IP "preprocessing" 4
.IX Item "preprocessing"
What some helper \fBprocess\fR did ta transform tha incoming
data tha fuck into a gangbangin' form mo' suitable fo' tha current process. Often done wit an
incomin \fBpipe\fR. Right back up in yo muthafuckin ass. See also \fBC preprocessor\fR.
.IX Xref "preprocessing"
.IP "primary maintainer" 4
.IX Item "primary maintainer"
Da lyricist dat \s-1PAUSE\s0 allows ta assign \fBco-maintainer\fR 
permissions ta a \fBnamespace\fR fo' realz. A primary maintainer can give up this
distinction by assignin it ta another \s-1PAUSE\s0 lyricist. Right back up in yo muthafuckin ass. See Camel chapta 19,
\&\s-1XCPANX.\s0
.IX Xref "primary maintainer"
.IP "procedure" 4
.IX Item "procedure"
A \fBsubroutine\fR.
.IX Xref "procedures, defined"
.IP "process" 4
.IX Item "process"
An instizzle of a hustlin program. Under multitasking
systems like Unix, two or mo' separate processes could be hustlin tha same
program independently all up in tha same timeXin fact, tha \f(CW\*(C`fork\*(C'\fR function is
designed ta brang bout dis aiiight state of affairs. Under other operating
systems, processes is sometimes called XthreadsX, XtasksX, or XjobsX,
often wit slight nuances up in meaning.
.IX Xref "processes, defined"
.IP "program" 4
.IX Item "program"
See \fBscript\fR.
.IP "program generator" 4
.IX Item "program generator"
A system dat algorithmically writes code fo' you up in a
high-level language. Right back up in yo muthafuckin ass. See also \fBcode generator\fR.
.IX Xref "program generators"
.IP "progressive matching" 4
.IX Item "progressive matching"
\&\fBPattern matching\fR  matching>that picks up where it left off before.
.IX Xref "progressive matchin pattern matching, progressive matching"
.IP "property" 4
.IX Item "property"
See either \fBinstizzle variable\fR or \fBcharacta property\fR.
.IX Xref "property"
.IP "protocol" 4
.IX Item "protocol"
In networking, a agreed-upon way of bustin  lyrics
back n' forth so dat neither correspondent will git too confused.
.IX Xref "protocols (term)"
.IP "prototype" 4
.IX Item "prototype"
An optionizzle part of a \fBsubroutine\fR declaration telling
the Perl compila how tha fuck nuff n' what tha fuck flavor of arguments may be passed as
\&\fBactual arguments\fR, so you can write subroutine calls dat parse much like
built-in functions. (Or donXt parse, as tha case may be.)
.IX Xref "prototypes, about"
.IP "pseudofunction" 4
.IX Item "pseudofunction"
A construct dat sometimes be lookin like a gangbangin' function but straight-up
isnXt. Usually reserved fo' \fBlvalue\fR modifiers like \f(CW\*(C`my\*(C'\fR, fo' \fBcontext\fR
modifiers like \f(CW\*(C`scalar\*(C'\fR, n' fo' tha pick-your-own-quotes constructs,
\&\f(CW\*(C`q//\*(C'\fR, \f(CW\*(C`qq//\*(C'\fR, \f(CW\*(C`qx//\*(C'\fR, \f(CW\*(C`qw//\*(C'\fR, \f(CW\*(C`qr//\*(C'\fR, \f(CW\*(C`m//\*(C'\fR, \f(CW\*(C`s///\*(C'\fR, \f(CW\*(C`y///\*(C'\fR, and
\&\f(CW\*(C`tr///\*(C'\fR.
.IX Xref "pseudofunctions constructs, pseudofunctions functions, pseudofunctions"
.IP "pseudohash" 4
.IX Item "pseudohash"
Formerly, a reference ta a array
whose initial element happens ta hold a reference ta a hash. Yo ass used ta be
able ta treat a pseudohash reference as either a array reference or a hash
reference. Pseduohashes is no longer supported.
.IX Xref "pseudohashes hashes, pseudohashes"
.IP "pseudoliteral" 4
.IX Item "pseudoliteral"
An \fBoperator\fR X\f(CW\*(C`that looks suttin' like a \f(CBliteral\f(CW,
like fuckin tha output\-grabbin operator, <literal
moreinfo="none"\*(C'\fR`>\fI\f(CI\*(C`command\*(C'\fI\fR\f(CW\*(C`\`\*(C'\fR.
.IX Xref "pseudoliterals"
.IP "hood domain" 4
.IX Item "hood domain"
Somethang not owned by anybody. Perl is copyrighted n' is
thus \fInot\fR up in tha hood domainXitXs just \fBfreely available\fR n' \fBfreely
redistributable\fR.
.IX Xref "hood domain"
.IP "pumpkin" 4
.IX Item "pumpkin"
A notionizzle XbatonX handed round tha Perl hood
indicatin whoz ass is tha lead integrator up in some arena of pimpment.
.IX Xref "pumpkin (term)"
.IP "pumpking" 4
.IX Item "pumpking"
A \fBpumpkin\fR holder, tha thug up in charge of pumpin tha pump,
or at least primin dat shit. Must be willin ta play tha part of tha Great
Pumpkin now n' then.
.IX Xref "pumpking"
.IP "\s-1PV\s0" 4
.IX Item "PV"
A Xpointa valueX, which is Perl
Internals Talk fo' a \f(CW\*(C`char*\*(C'\fR.
.IX Xref "PV (pointa value) pointa value (PV)"
.SS "Q"
.IX Subsection "Q"
.IP "qualified" 4
.IX Item "qualified"
Possessin a cold-ass lil complete name. Da symbol \f(CW$Ent::moot\fR is
qualified; \f(CW$moot\fR is unqualified. Y'all KNOW dat shit, muthafucka! A straight-up qualified filename is specified
from tha top-level directory.
.IX Xref "qualified (term)"
.IP "quantifier" 4
.IX Item "quantifier"
A component of a \fBregular expression\fR specifyin how
many times tha foregoin \fBatom\fR may occur.
.IX Xref "quantifiers, about"
.SS "R"
.IX Subsection "R"
.IP "race condition" 4
.IX Item "race condition"
A race condizzle exists when tha result of
several interrelated events dependz on tha orderin of dem events yo, but
that order cannot be guaranteed cuz of nondeterministic timin effects, n' you can put dat on yo' toast. If
two or mo' programs, or partz of tha same program, try ta go all up in the
same seriez of events, one might interrupt tha work of tha other n' shit. This be a
phat way ta find a \fBexploit\fR.
.IX Xref "race conditions, defined"
.IP "readable" 4
.IX Item "readable"
With respect ta files, one dat has tha proper permission
bit set ta let you access tha file. With respect ta computa programs, one
thatXs freestyled well enough dat one of mah thugs has a cold-ass lil chizzle of figurin up what
itXs tryin ta do.
.IX Xref "readable (term)"
.IP "reaping" 4
.IX Item "reaping"
Da last rites performed by a parent \fBprocess\fR
on behalf of a thugged-out deceased lil pimp process so dat it donXt remain a
\&\fBzombie\fR.  See tha \f(CW\*(C`wait\*(C'\fR n' \f(CW\*(C`waitpid\*(C'\fR function calls.
.IX Xref "reapin zombie processes"
.IP "record" 4
.IX Item "record"
A set of related data joints up in a \fBfile\fR or \fBstream\fR,
often associated wit a unique \fBkey\fR field. Y'all KNOW dat shit, muthafucka! In Unix, often commensurate
with a \fBline\fR, or a funky-ass blank-lineXterminated set of lines (a XparagraphX).
Each line of tha \fI/etc/passwd\fR file be a record, keyed on login name,
containin shiznit bout dat user.
.IX Xref "records, defined"
.IP "recursion" 4
.IX Item "recursion"
Da art of definin suttin' (at least kinda) in
termz of itself, which be a naughty no-no up in dictionaries but often works
out aiiight up in computa programs if youXre careful not ta recurse forever
(which is like a infinite loop wit mo' spectacular failure modes).
.IX Xref "recursion, defined"
.IP "reference" 4
.IX Item "reference"
Where you look ta find a pointa ta shiznit
somewhere else. (See \fBindirection\fR.) References come up in two flavors:
\&\fBsymbolic references\fR n' \fBhard references\fR.
.IX Xref "references, about"
.IP "referent" 4
.IX Item "referent"
Whatever a reference refers to, which may or may not
have a name. Common typez of referents include scalars, arrays, hashes, and
subroutines.
.IX Xref "referents, defined"
.IP "regex" 4
.IX Item "regex"
See \fBregular expression\fR.
.IP "regular expression" 4
.IX Item "regular expression"
A single entitizzle wit various
interpretations, like a elephant. To a cold-ass lil computa scientist, itXs a grammar
for a lil language up in which some strings is legal n' others arenXt. To
normal people, itXs a pattern you can use ta find what tha fuck youXre lookin for
when it varies from case ta case. PerlXs regular expressions is far from
regular up in tha theoretical sense yo, but up in regular use they work like well.
HereXs a regular expression: \f(CW\*(C`/Oh s.*t./\*(C'\fR. This will match strings like
X\f(CW\*(C`Oh say can you peep by tha dawn\*(Aqs early light\*(C'\fRX n' X\f(CW\*(C`Oh sit!\*(C'\fRX. Right back up in yo muthafuckin ass. See
Camel chapta 5, XPattern MatchingX.
.IX Xref "regular expressions, defined"
.IP "regular expression modifier" 4
.IX Item "regular expression modifier"
An option on a pattern or substitution, like fuckin \f(CW\*(C`/i\*(C'\fR ta render tha pattern
case\- insensitive.
.IX Xref "regular expression modifiers modifiers, regular expression"
.IP "regular file" 4
.IX Item "regular file"
A \fBfile\fR thatXs not a \fBdirectory\fR, a
\&\fBdevice\fR, a named \fBpipe\fR or \fBsocket\fR, or a \fBsymbolic link\fR. Perl uses
the \f(CW\*(C`Xf\*(C'\fR file test operator ta identify regular files. Right back up in yo muthafuckin ass. Sometimes called a
XplainX file.
.IX Xref "regular filez files, regular"
.IP "relationizzle operator" 4
.IX Item "relationizzle operator"
An \fBoperator\fR dat say whether a particular
orderin relationshizzle is \fBtrue\fR on some pair of \fBoperands\fR. Perl has both
numeric n' strang relationizzle operators. Right back up in yo muthafuckin ass. See \fBcollatin sequence\fR.
.IX Xref "relationizzle operators"
.IP "reserved lyrics" 4
.IX Item "reserved lyrics"
A word wit a specific, built-in meaning
to a \fBcompiler\fR, like fuckin \f(CW\*(C`if\*(C'\fR or \f(CW\*(C`delete\*(C'\fR. In nuff languages (not Perl),
itXs illegal ta use reserved lyrics ta name anythang else. (Which is why
theyXre reserved, afta all.) In Perl, you just canXt use dem ta name
\&\fBlabels\fR or \fBfilehandles\fR fo' realz. Also called XkeywordsX.
.IX Xref "reserved lyrics keywordz (term)"
.IP "return value" 4
.IX Item "return value"
Da \fBvalue\fR produced by a \fBsubroutine\fR
or \fBexpression\fR when evaluated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. In Perl, a return value may be either a
\&\fBlist\fR or a \fBscalar\fR.
.IX Xref "return joints joints, return"
.IP "\s-1RFC\s0" 4
.IX Item "RFC"
Request For Comment, which despite tha timid connotations is tha name of a series of
important standardz documents.
.IX Xref "Request For Comment (RFC) RFC (Request For Comment)"
.IP "right shift" 4
.IX Item "right shift"
A \fBbit shift\fR dat divides
a number by some juice of 2.
.IX Xref "right shift (>>) bit operator bitXshift operators, right shift >> (right shift) bit operator"
.IP "role" 4
.IX Item "role"
A name fo' a cold-ass lil concrete set of behaviors fo' realz. A role be a way to
add behavior ta a cold-ass lil class without inheritance.
.IX Xref "rolez (term)"
.IP "root" 4
.IX Item "root"
Da superuser (\f(CW\*(C`UID\*(C'\fR == 0) fo' realz. Also tha top-level directory of
the filesystem.
.IX Xref "root (term)"
.IP "\s-1RTFM\s0" 4
.IX Item "RTFM"
What yo ass is holla'd at when one of mah thugs be thinkin you should Read The
Fine Manual.
.IX Xref "RTFM acronym"
.IP "run phase" 4
.IX Item "run phase"
Any time afta Perl starts hustlin yo' main program.
See also \fBcompile phase\fR. Run phase is mostly dropped up in \fBruntime\fR but may
also be dropped up in \fBcompile time\fR when \f(CW\*(C`require\*(C'\fR, \f(CW\*(C`do\*(C'\fR \fI\f(CI\*(C`FILE\*(C'\fI\fR, or
\&\f(CW\*(C`eval\*(C'\fR \fI\f(CI\*(C`STRING\*(C'\fI\fR operators is executed, or when a substitution uses
the \f(CW\*(C`/ee\*(C'\fR modifier.
.IX Xref "run phase, defined"
.IP "runtime" 4
.IX Item "runtime"
Da time when Perl is straight-up bustin what tha fuck your
code say ta do, as opposed ta tha earlier period of time when it was
tryin ta figure up whether what tha fuck you holla'd made any sense whatsoever, which
is \fBcompile time\fR.
.IX Xref "runtime (term), defined"
.IP "runtime pattern" 4
.IX Item "runtime pattern"
A pattern dat gotz nuff one or more
variablez ta be interpolated before parsin tha pattern as a \fBregular
expression\fR, n' dat therefore cannot be analyzed at compile time yo, but
must be reanalyzed each time tha pattern match operator is evaluated.
Runtime patterns is useful but expensive.
.IX Xref "runtime patterns patterns, runtime"
.IP "\s-1RV\s0" 4
.IX Item "RV"
A recreationizzle vehicle, not
to be trippin wit vehicular recreation. I aint talkin' bout chicken n' gravy biatch. \s-1RV\s0 also means a internal
Reference Value of tha type a \fBscalar\fR can hold. Y'all KNOW dat shit, muthafucka! See also \fB\s-1IV\s0\fR n' \fB\s-1NV\s0\fR
if youXre not trippin yet.
.IX Xref "Reference Value (RV) RV (Reference Value)"
.IP "rvalue" 4
.IX Item "rvalue"
A \fBvalue\fR dat you might find on the
right side of a \fBassignment\fR. Right back up in yo muthafuckin ass. See also \fBlvalue\fR.
.IX Xref "rvalue (term) joints, rvalue"
.SS "S"
.IX Subsection "S"
.IP "sandbox" 4
.IX Item "sandbox"
A walled off area thatXs not supposed ta affect beyond
its walls. Yo ass let lil playas play up in tha sandbox instead of hustlin up in tha road.
See Camel chapta 20, XSecurityX.
.IX Xref "sandbox, defined"
.IP "scalar" 4
.IX Item "scalar"
A simple, singular value; a number, \fBstring\fR, or
\&\fBreference\fR.
.IX Xref "scalars, defined"
.IP "scalar context" 4
.IX Item "scalar context"
Da thang up in which an
\&\fBexpression\fR is expected by its surroundings (the code callin it) to
return a single \fBvalue\fR rather than a \fBlist\fR of joints, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. See also
\&\fBcontext\fR n' \fBlist context\fR fo' realz. A scalar context sometimes imposes
additionizzle constraints on tha return valueXsee \fBstrin context\fR and
\&\fBnumeric context\fR. Right back up in yo muthafuckin ass. Sometimes we rap on some \fBBoolean context\fR inside
conditionals yo, but dis imposes no additionizzle constraints, since any scalar
value, whether numeric or \fBstring\fR, be already legit or false.
.IX Xref "scalar context, bout context, scalar"
.IP "scalar literal" 4
.IX Item "scalar literal"
A number or quoted \fBstring\fRXan actual
\&\fBvalue\fR up in tha text of yo' program, as opposed ta a \fBvariable\fR.
.IX Xref "scalar literals literals, scalar"
.IP "scalar value" 4
.IX Item "scalar value"
A value dat happens ta be a
\&\fBscalar\fR as opposed ta a \fBlist\fR.
.IX Xref "scalar joints, bout joints, scalar SV"
.IP "scalar variable" 4
.IX Item "scalar variable"
A \fBvariable\fR prefixed with
\&\f(CW\*(C`$\*(C'\fR dat holdz a single value.
.IX Xref "scalar variables, defined variables, scalar"
.IP "scope" 4
.IX Item "scope"
From how tha fuck far away you can peep a variable, lookin through
one. Perl has two visibilitizzle mechanisms. Well shiiiit, it do \fBdynamic scoping\fR of
\&\f(CW\*(C`local\*(C'\fR \fBvariables\fR, meanin dat tha rest of tha \fBblock\fR, n' any
\&\fBsubroutines\fR dat is called by tha rest of tha block, can peep the
variablez dat is local ta tha block. Perl do \fBlexical scoping\fR of
\&\f(CW\*(C`my\*(C'\fR variables, meanin dat tha rest of tha block can peep tha variable,
but other subroutines called by tha block \fIcannot\fR peep tha variable.
.IX Xref "scopes, defined"
.IP "scratchpad" 4
.IX Item "scratchpad"
Da area up in which a particular invocation of a particular
file or subroutine keeps a shitload of its temporary joints, includin any
lexically scoped variables.
.IX Xref "scratchpads"
.IP "script" 4
.IX Item "script"
A text \fBfile\fR dat be a program
intended ta be \fBexecuted\fR directly rather than \fBcompiled\fR ta another form
of file before \fBexecution\fR.
.IX Xref "scripts (term) programs, defined"
.Sp
Also, up in tha context of \fBUnicode\fR, a gangbangin' freestylin system fo' a particular
language or crew of languages, like fuckin Greek, Bengali, or Tengwar.
.IP "script kiddie" 4
.IX Item "script kiddie"
A \fBcracker\fR whoz ass aint a \fBhacker\fR but knows just enough
to run canned scripts fo' realz. A \fBcargo-cult\fR programmer.
.IX Xref "script kiddie"
.IP "sed" 4
.IX Item "sed"
A venerable Stream EDitor from
which Perl derives a shitload of its ideas.
.IX Xref "sed (Stream EDitor) Stream EDitor (sed)"
.IP "semaphore" 4
.IX Item "semaphore"
A fancy kind of interlock dat prevents multiple \fBthreads\fR or
\&\fBprocesses\fR from rockin up tha same resources simultaneously.
.IX Xref "semaphore"
.IP "separator" 4
.IX Item "separator"
A \fBcharacter\fR or \fBstring\fR dat keeps two surroundin strings from being
confused wit each other n' shit. Da \f(CW\*(C`split\*(C'\fR function works on separators. Not ta be trippin wit \fBdelimiters\fR
or \fBterminators\fR. Da XorX up in tha previous sentence separated tha two
alternatives.
.IX Xref "separators characters, separators strings, separators split function, separators and"
.IP "serialization" 4
.IX Item "serialization"
Puttin a gangbangin' fancy \fBdata structure\fR into
linear order so dat it can be stored as a \fBstring\fR up in a gangbangin' finger-lickin' disk file or
database, or busted all up in a \fBpipe\fR fo' realz. Also called marshalling.
.IX Xref "serialization marshallin (term)"
.IP "server" 4
.IX Item "server"
In networking, a \fBprocess\fR that
either advertises a \fBservice\fR or just hangs round at a known location and
waits fo' \fBclients\fR whoz ass need steez ta git up in bust a nut on wit dat shit.
.IX Xref "servers, defined processes, server"
.IP "service" 4
.IX Item "service"
Somethang you do fo' one of mah thugs ta make dem happy,
like givin dem tha time of dizzle (or of they game). On some machines,
well-known skillz is listed by tha \f(CW\*(C`getservent\*(C'\fR
function.
.IX Xref "skillz (term) getservent function"
.IP "setgid" 4
.IX Item "setgid"
Same as \fBsetuid\fR, only havin ta do wit giving
away \fBgroup\fR privileges.
.IX Xref "setgid program, about"
.IP "setuid" 4
.IX Item "setuid"
Said of a program dat runs wit tha privileges of
its \fBballer\fR rather than (as is probably tha case) tha privilegez of whoever
is hustlin it fo' realz. Also raps bout tha bit up in tha mode word (\fBpermission bits\fR)
that controls tha feature. This bit must be explicitly set by tha balla to
enable dis feature, n' tha program must be carefully freestyled not ta give
away mo' privileges than it ought to.
.IX Xref "setuid program, about"
.IP "shared memory" 4
.IX Item "shared memory"
A piece of \fBmemory\fR accessible by two
different \fBprocesses\fR whoz ass otherwise would not peep each otherXs memory.
.IX Xref "shared memory memory, shared"
.IP "shebang" 4
.IX Item "shebang"
Irish fo' tha whole McGillicuddy. In Perl culture, a
portmanteau of XsharpX n' XbangX, meanin tha \f(CW\*(C`#!\*(C'\fR sequence dat tells
the system where ta find tha interpreter.
.IX Xref "shebang (term)"
.IP "shell" 4
.IX Item "shell"
A \fBcommand\fR\-line \fBinterpreter\fR. Da program that
interactively gives you a prompt, accepts one or mo' \fBlines\fR of input,
and executes tha programs you mentioned, feedin each of dem they proper
\&\fBarguments\fR n' input data. Right back up in yo muthafuckin ass. Shells can also execute scripts containing
such commands. Under Unix, typical shells include tha Bourne shell
(\fI/bin/sh\fR), tha C shell (\fI/bin/csh\fR), n' tha Korn shell (\fI/bin/ksh\fR).
Perl aint strictly a gangbangin' finger-lickin' dirty-ass shell cuz itXs not interactizzle (although Perl
programs can be interactive).
.IX Xref "shell program, defined"
.IP "side effects" 4
.IX Item "side effects"
Somethang extra dat happens when you evaluate an
\&\fBexpression\fR. Nowadays it can refer ta almost anything. For example,
evaluatin a simple assignment statement typically has tha Xside effectX of
assignin a value ta a variable. (And you thought assignin tha value was
your primary intent up in tha straight-up original gangsta place!) Likewise, assignin a value ta the
special variable \f(CW$|\fR (\f(CW$AUTOFLUSH\fR) has tha side effect of forcin a
flush afta every last muthafuckin \f(CW\*(C`write\*(C'\fR or \f(CW\*(C`print\*(C'\fR on tha currently selected
filehandle.
.IX Xref "side effects"
.IP "sigil" 4
.IX Item "sigil"
A glyph used up in magic. Or, fo' Perl, tha symbol up in front
of a variable name, like fuckin \f(CW\*(C`$\*(C'\fR, \f(CW\*(C`@\*(C'\fR, n' \f(CW\*(C`%\*(C'\fR.
.IX Xref "sigils, defined"
.IP "signal" 4
.IX Item "signal"
A bolt outta tha blue; dat is, an
event triggered by tha \fBoperatin system\fR, probably when youXre least
expectin dat shit.
.IX Xref "signals n' signal handling, about"
.IP "signal handlez" 4
.IX Item "signal handlez"
A \fBsubroutine\fR that, instead of bein content ta be
called up in tha aiiight fashion, sits round waitin fo' a funky-ass bolt outta the
blue before it will deign ta \fBexecute\fR. Under Perl, bolts outta tha blue
are called signals, n' you bust dem wit tha \f(CW\*(C`kill\*(C'\fR built-in. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See the
\&\f(CW%SIG\fR hash up in Camel chapta 25, XSpecial NamesX n' tha section XSignalsX
in Camel chapta 15, XInterprocess CommunicationX.
.IX Xref "handlezs, signal"
.IP "single inheritance" 4
.IX Item "single inheritance"
Da features you gots from your
mother, if dat dunkadelic hoe holla'd at you dat you donXt gotz a gangbangin' daddy n' shit. (See also
\&\fBinheritance\fR n' \fBmultiple inheritance\fR.) In computa languages, the
idea dat \fBclasses\fR reproduce asexually so dat a given class can only
have one direct ancestor or \fBbase class\fR. Perl supplies no such
restriction, though you may certainly program Perl dat way if you like.
.IX Xref "single inheritizzle inheritance, single"
.IP "slice" 4
.IX Item "slice"
A selection of any number of
\&\fBelements\fR from a \fBlist\fR, \fBarray\fR, or \fBhash\fR.
.IX Xref "slicez of elements elements, slices of"
.IP "slurp" 4
.IX Item "slurp"
To read a entire \fBfile\fR tha fuck into a \fBstring\fR up in one operation.
.IX Xref "slurp (term)"
.IP "socket" 4
.IX Item "socket"
An endpoint fo' network communication among multiple
\&\fBprocesses\fR dat works much like a telephone or a post crib box. The
most blingin thang on some socket is its \fBnetwork address\fR (like a phone
number). Different kindz of sockets have different kindz of addressesXsome
look like filenames, n' some donXt.
.IX Xref "sockets, defined"
.IP "soft reference" 4
.IX Item "soft reference"
See \fBsymbolic reference\fR.
.IX Xref "soft references references, soft"
.IP "source filter" 4
.IX Item "source filter"
A special kind of \fBmodule\fR dat do
\&\fBpreprocessing\fR on yo' script just before it gets ta tha \fBtokener\fR.
.IX Xref "source filtas filters, source"
.IP "stack" 4
.IX Item "stack"
A thang you can put thangs on tha top of, n' lata take
them back off up in tha opposite order up in which you put dem on. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See \fB\s-1LIFO\s0\fR.
.IX Xref "stacks, defined"
.IP "standard" 4
.IX Item "standard"
Included up in tha straight-up legit Perl distribution, as up in a
standard module, a standard tool, or a standard Perl \fBmanpage\fR.
.IX Xref "standard (term)"
.IP "standard error" 4
.IX Item "standard error"
Da default output \fBstream\fR fo' nasty remarks dat donXt belong in
\&\fBstandard output\fR. Represented within a Perl program by tha output>  \fBfilehandle\fR \f(CW\*(C`STDERR\*(C'\fR. Yo ass can use this
stream explicitly yo, but tha \f(CW\*(C`die\*(C'\fR n' \f(CW\*(C`warn\*(C'\fR built-ins write ta your
standard error stream automatically (unless trapped or otherwise
intercepted).
.IX Xref "STDERR filehandle, about"
.IP "standard input" 4
.IX Item "standard input"
Da default input \fBstream\fR fo' yo' program,
which if possible shouldnXt care where its data is comin from. Represented
within a Perl program by tha \fBfilehandle\fR \f(CW\*(C`STDIN\*(C'\fR.
.IX Xref "STDIN filehandle, about"
.IP "standard I/O" 4
.IX Item "standard I/O"
A standard C library fo' bustin \fBbuffered\fR input
and output ta tha \fBoperatin system\fR. (Da XstandardX of standard I/O is
at most marginally related ta tha XstandardX of standard input n' output.)
In general, Perl relies on whatever implementation of standard I/O a given
operatin system supplies, so tha bufferin characteristics of a Perl
program on one machine may not exactly match dem on another machine.
Normally dis only influences efficiency, not semantics. If yo' standard
I/O package is bustin block bufferin n' you want it ta \fBflush\fR tha buffer
more often, just set tha \f(CW$|\fR variable ta a legit value.
.IX Xref "standard I O I O (Input Output), standard Input Output (I O), standard STDIO filehandle"
.IP "Standard Library" 4
.IX Item "Standard Library"
Everythang dat comes wit tha official
\&\fIperl\fR distribution. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Some vendor versionz of \fIperl\fR chizzle their
distributions, leavin up some parts or includin extras. Right back up in yo muthafuckin ass. See also
\&\fBdual-lived\fR.
.IX Xref "Standard Perl Library, about"
.IP "standard output" 4
.IX Item "standard output"
Da default output \fBstream\fR fo' yo' program,
which if possible shouldnXt care where its data is going. Represented
within a Perl program by tha \fBfilehandle\fR \f(CW\*(C`STDOUT\*(C'\fR.
.IX Xref "STDOUT filehandle, about"
.IP "statement" 4
.IX Item "statement"
A \fBcommand\fR ta tha computa bout what tha fuck ta do next,
like a step up in a recipe: XAdd marmalade ta batta n' mix until mixed.X A
statement is distinguished from a \fBdeclaration\fR, which donXt tell the
computa ta do anythang yo, but just ta learn something.
.IX Xref "statements, about"
.IP "statement modifier" 4
.IX Item "statement modifier"
A \fBconditional\fR or
\&\fBloop\fR dat you put afta tha \fBstatement\fR instead of before, if you know
what we mean.
.IX Xref "statement modifiers, bout modifiers, statement"
.IP "static" 4
.IX Item "static"
Varyin slowly compared ta suttin' else. (Unfortunately,
everythang is relatively stable compared ta suttin' else, except for
certain elementary particles, n' weXre not so shizzle bout em.) In
computers, where thangs is supposed ta vary rapidly, XstaticX has a
derogatory connotation, indicatin a slightly dysfunctionizzle \fBvariable\fR,
\&\fBsubroutine\fR, or \fBmethod\fR. In Perl culture, tha word is politely avoided.
.IX Xref "static (term)"
.Sp
If youXre a C or \*(C+ programmer, you might be lookin fo' PerlXs \f(CW\*(C`state\*(C'\fR
keyword.
.IP "static method" 4
.IX Item "static method"
No such thang. Right back up in yo muthafuckin ass. See \fBclass method\fR.
.IX Xref "static methodz methods, static"
.IP "static scoping" 4
.IX Item "static scoping"
No such thang. Right back up in yo muthafuckin ass. See \fBlexical scoping\fR.
.IP "static variable" 4
.IX Item "static variable"
No such thang. Just bust a \fBlexical
variable\fR up in a scope larger than yo' \fBsubroutine\fR, or declare it with
\&\f(CW\*(C`state\*(C'\fR instead of wit \f(CW\*(C`my\*(C'\fR.
.IX Xref "static variablez variables, static"
.IP "stat structure" 4
.IX Item "stat structure"
A special internal spot
in which Perl keeps tha shiznit bout tha last \fBfile\fR on which you
axed shiznit.
.IX Xref "stat structure data structures, stat structure"
.IP "status" 4
.IX Item "status"
Da \fBvalue\fR moonwalked back ta the
parent \fBprocess\fR when one of its lil pimp processes dies. Put ya muthafuckin choppers up if ya feel dis! This value is
placed up in tha special variable \f(CW$?\fR. Its upper eight \fBbits\fR is tha exit
statuz of tha defunct process, n' its lower eight bits identify tha signal
(if any) dat tha process took a dirt nap from. On Unix systems, dis status value is
the same as tha status word returned by \fIwait\fR(2). Right back up in yo muthafuckin ass. See \f(CW\*(C`system\*(C'\fR up in Camel
chapta 27, XFunctionsX.
.IX Xref "status value joints, status exit status"
.IP "\s-1STDERR\s0" 4
.IX Item "STDERR"
See \fBstandard error\fR.
.IP "\s-1STDIN\s0" 4
.IX Item "STDIN"
See \fBstandard input\fR.
.IP "\s-1STDIO\s0" 4
.IX Item "STDIO"
See \fBstandard I/O\fR.
.IP "\s-1STDOUT\s0" 4
.IX Item "STDOUT"
See \fBstandard output\fR.
.IP "stream" 4
.IX Item "stream"
A flow of data tha fuck into or up of
a process as a steady sequence of bytes or characters, without the
appearizzle of bein fucked up tha fuck into packets, n' you can put dat on yo' toast. This be a kind of
\&\fBinterface\fRXthe underlyin \fBimplementation\fR may well break yo' data up
into separate packets fo' delivery yo, but dis is hidden from yo thugged-out ass.
.IX Xref "streamin data processes, streamin data"
.IP "string" 4
.IX Item "string"
A sequence of charactas like fuckin XDude holla'd !@#*&%@#*?!X.
A strang do not gotta be entirely printable.
.IX Xref "strings, defined"
.IP "strin context" 4
.IX Item "strin context"
Da thang up in which a expression is
expected by its surroundings (the code callin it) ta return a \fBstring\fR.
See also \fBcontext\fR n' \fBnumeric context\fR.
.IX Xref "strin context context, string"
.IP "stringification" 4
.IX Item "stringification"
Da process of producin a \fBstring\fR representation of an
abstract object.
.IX Xref "stringification"
.IP "struct" 4
.IX Item "struct"
C keyword introducin a structure definizzle or name.
.IX Xref "struct keyword"
.IP "structure" 4
.IX Item "structure"
See \fBdata structure\fR.
.IX Xref "structures"
.IP "subclass" 4
.IX Item "subclass"
See \fBderived class\fR.
.IP "subpattern" 4
.IX Item "subpattern"
A component of a \fBregular expression\fR pattern.
.IX Xref "subpatterns, defined"
.IP "subroutine" 4
.IX Item "subroutine"
A named or otherwise accessible piece of program
that can be invoked from elsewhere up in tha program up in order ta accomplish
some subgoal of tha program fo' realz. A subroutine is often parameterized to
accomplish different but related thangs dependin on its input
\&\fBarguments\fR. If tha subroutine returns a meaningful \fBvalue\fR, it be also
called a \fBfunction\fR.
.IX Xref "subroutines, defined"
.IP "subscript" 4
.IX Item "subscript"
A \fBvalue\fR dat indicates tha posizzle of a particular
\&\fBarray\fR \fBelement\fR up in a array.
.IX Xref "subscripts"
.IP "substitution" 4
.IX Item "substitution"
Changin partz of a strang via tha \f(CW\*(C`s///\*(C'\fR
operator. Shiiit, dis aint no joke. (We avoid use of dis term ta mean \fBvariable interpolation\fR.)
.IX Xref "substitution (s ) operator, bout strings, substitution up in s (substitution) operator, about"
.IP "substring" 4
.IX Item "substring"
A portion of a \fBstring\fR, startin at a cold-ass lil certain
\&\fBcharacter\fR posizzle (\fBoffset\fR) n' proceedin fo' a cold-ass lil certain number of
characters.
.IX Xref "substrings (term)"
.IP "superclass" 4
.IX Item "superclass"
See \fBbase class\fR.
.IP "superuser" 4
.IX Item "superuser"
Da thug whom tha \fBoperatin system\fR will let do almost
anything. Typically yo' system administrator or one of mah thugs pretendin ta be
your system administrator. Shiiit, dis aint no joke. On Unix systems, tha \fBroot\fR user n' shit. On Windows
systems, probably tha Administrator user.
.IX Xref "superusers"
.IP "\s-1SV\s0" 4
.IX Item "SV"
Short fo' Xscalar valueX. But
within tha Perl interpreter, every last muthafuckin \fBreferent\fR is treated as a gangmember of a
class derived from \s-1SV,\s0 up in a object-oriented sort of way. Every \fBvalue\fR
inside Perl is passed round as a C language \f(CW\*(C`SV*\*(C'\fR pointer n' shit. Da \s-1SV
\&\s0\fBstruct\fR knows its own Xreferent typeX, n' tha code is smart-ass enough (we
hope) not ta try ta booty-call a \fBhash\fR function on a \fBsubroutine\fR.
.IX Xref "scalar joints, bout joints, scalar"
.IP "switch" 4
.IX Item "switch"
An option you give on a cold-ass lil command line to
influence tha way yo' program works, probably introduced wit a minus sign.
Da word be also used as a nickname fo' a \fBswitch statement\fR.
.IX Xref "switches, bout switches"
.IP "switch cluster" 4
.IX Item "switch cluster"
Da combination of multiple command\-
line switches (\fIe.g.\fR, \f(CW\*(C`Xa Xb Xc\*(C'\fR) tha fuck into one switch (\fIe.g.\fR, \f(CW\*(C`Xabc\*(C'\fR).
Any switch wit a additionizzle \fBargument\fR must be tha last switch up in a
cluster.
.IX Xref "switch clustas clusters, switch"
.IP "switch statement" 4
.IX Item "switch statement"
A program technique dat lets you
evaluate a \fBexpression\fR n' then, based on tha value of tha expression,
do a multiway branch ta tha appropriate piece of code fo' dat value fo' realz. Also
called a Xcase structureX, named afta tha similar Pascal construct. Most
switch statements up in Perl is spelled \f(CW\*(C`given\*(C'\fR. Right back up in yo muthafuckin ass. See XDa \f(CW\*(C`given\*(C'\fR
statementX up in Camel chapta 4, XStatements n' DeclarationsX.
.IX Xref "switch statement statements, switch"
.IP "symbol" 4
.IX Item "symbol"
Generally, any \fBtoken\fR or \fBmetasymbol\fR. Often used
more specifically ta mean tha sort of name you might find up in a \fBsymbol
table\fR.
.IX Xref "symbols symbols"
.IP "symbolic debugger" 4
.IX Item "symbolic debugger"
A program dat lets you step through
the \fBexecution\fR of yo' program, stoppin or printin thangs up here and
there ta peep whether anythang has gone wrong, and, if so, what. The
XsymbolicX part just means dat you can rap ta tha debugger rockin tha same
symbols wit which yo' program is written.
.IX Xref "symbolic debugger debugger, about"
.IP "symbolic link" 4
.IX Item "symbolic link"
An alternate filename dat points ta the
real \fBfilename\fR, which up in turn points ta tha real \fBfile\fR. Whenever the
\&\fBoperatin system\fR is tryin ta parse a \fBpathname\fR containin a symbolic
link, it merely substitutes tha freshly smoked up name n' continues parsing.
.IX Xref "symbolic links links, symbolic"
.IP "symbolic reference" 4
.IX Item "symbolic reference"
A variable whose value is the
name of another variable or subroutine. By \fBdereferencing\fR tha first
variable, you can git all up in tha second one. Right back up in yo muthafuckin ass. Symbolic references is illegal
under \f(CW\*(C`use strict "refs"\*(C'\fR.
.IX Xref "symbolic references references, symbolic"
.IP "symbol table" 4
.IX Item "symbol table"
Where a \fBcompiler\fR rethugz symbols fo' realz. A program
like Perl must somehow remember all tha namez of all tha \fBvariables\fR,
\&\fBfilehandles\fR, n' \fBsubroutines\fR youXve used. Y'all KNOW dat shit, muthafucka! Well shiiiit, it do dis by placin the
names up in a symbol table, which is implemented up in Perl rockin a \fBhash
table\fR. There be a separate symbol table fo' each \fBpackage\fR ta give each
package its own \fBnamespace\fR.
.IX Xref "symbol tables, about"
.IP "synchronous" 4
.IX Item "synchronous"
Programmin up in which tha orderly sequence of events
can be determined; dat is, when thangs happen one afta tha other, not at
the same time.
.IX Xref "synchronous (term)"
.IP "syntactic sugar" 4
.IX Item "syntactic sugar"
An alternatizzle way of freestylin suttin' mo' easily; a
shortcut.
.IX Xref "syntactic sugar"
.IP "syntax" 4
.IX Item "syntax"
From Greek \s-1XXXXXXXX,\s0 Xwith-arrangementX yo. How tha fuck thangs
(particularly symbols) is put together wit each other.
.IX Xref "syntax, about"
.IP "syntax tree" 4
.IX Item "syntax tree"
An internal representation of yo' program wherein
lower-level \fBconstructs\fR dangle off tha higher-level constructs enclosing
them.
.IX Xref "syntax tree"
.IP "syscall" 4
.IX Item "syscall"
A \fBfunction\fR call directly ta tha \fBoperating
system\fR. Many of tha blingin subroutines n' functions you use arenXt
direct system calls yo, but is built up in one or mo' layers above the
system call level. In general, Perl programmers donXt need ta worry about
the distinction. I aint talkin' bout chicken n' gravy biatch. But fuck dat shiznit yo, tha word on tha street is dat if you do happen ta know which Perl functions are
really syscalls, you can predict which of these will set tha \f(CW$!\fR
(\f(CW$ERRNO\fR) variable on failure. Unfortunately, beginnin programmers often
confusingly employ tha term Xsystem callX ta mean what tha fuck happens when you
call tha Perl \f(CW\*(C`system\*(C'\fR function, which straight-up involves nuff syscalls. To
avoid any mad drama, we nearly always say XsyscallX fo' suttin' you could
call indirectly via PerlXs \f(CW\*(C`syscall\*(C'\fR function, n' never fo' suttin' you
would call wit PerlXs \f(CW\*(C`system\*(C'\fR function.
.IX Xref "syscall function, about"
.SS "T"
.IX Subsection "T"
.IP "taint checks" 4
.IX Item "taint checks"
Da special bookkeepin Perl do ta track tha flow
of external data all up in yo' program n' disallow they use up in system
commands.
.IX Xref "taint checks, about"
.IP "tainted" 4
.IX Item "tainted"
Said of data derived from tha grubby handz of a user,
and thus unsafe fo' a secure program ta rely on. I aint talkin' bout chicken n' gravy biatch. Perl do taint checks if
you run a \fBsetuid\fR (or \fBsetgid\fR) program, or if you use tha \f(CW\*(C`XT\*(C'\fR switch.
.IX Xref "tainted data, about"
.IP "taint mode" 4
.IX Item "taint mode"
Hustlin under tha \f(CW\*(C`XT\*(C'\fR switch, markin all external data as
suspect n' refusin ta use it wit system commands. Right back up in yo muthafuckin ass. See Camel chapta 20,
XSecurityX.
.IX Xref "taint mode"
.IP "\s-1TCP\s0" 4
.IX Item "TCP"
Short fo' Transmission Control Protocol fo' realz. A protocol wrapped round the
Internizzle Protocol ta cook up a unreliable packet transmission mechanism
appear ta tha application program ta be a reliable \fBstream\fR of bytes.
(Usually.)
.IX Xref "TCP (Transmission Control Protocol) Transmission Control Protocol (TCP)"
.IP "term" 4
.IX Item "term"
Short fo' a XterminalXXthat is, a leaf node of a \fBsyntax
tree\fR fo' realz. A thang dat functions grammatically as a \fBoperand\fR fo' the
operators up in a expression.
.IX Xref "terms, defined"
.IP "terminator" 4
.IX Item "terminator"
A \fBcharacter\fR or \fBstring\fR dat marks tha end of another string. Da \f(CW$/\fR
variable gotz nuff tha strang dat terminates a \f(CW\*(C`readline\*(C'\fR operation, which
\&\f(CW\*(C`chomp\*(C'\fR deletes from tha end yo, but it ain't no stoppin cause I be still poppin'. Not ta be trippin wit \fBdelimiters\fR or
\&\fBseparators\fR. Da period all up in tha end of dis sentence be a terminator.
.IX Xref "terminators (term) characters, terminators strings, terminators in"
.IP "ternary" 4
.IX Item "ternary"
An \fBoperator\fR takin three \fBoperands\fR. Right back up in yo muthafuckin ass. Sometimes
pronounced \fBtrinary\fR.
.IX Xref "ternary operators"
.IP "text" 4
.IX Item "text"
A \fBstring\fR or \fBfile\fR containin primarily printable characters.
.IX Xref "text, defined strings, text files, text text"
.IP "thread" 4
.IX Item "thread"
Like a gangbangin' forked process yo, but without \fBfork\fRXs inherent
memory protection. I aint talkin' bout chicken n' gravy biatch fo' realz. A thread is lighta weight than a gangbangin' full process, up in that
a process could have multiple threadz hustlin round up in it, all fighting
over tha same processXs memory space unless steps is taken ta protect
threadz from one another.
.IX Xref "threadz (term)"
.IP "tie" 4
.IX Item "tie"
Da bond between a magical variable n' its
implementation class. Right back up in yo muthafuckin ass. See tha \f(CW\*(C`tie\*(C'\fR function up in Camel chapta 27,
XFunctionsX n' Camel chapta 14, XTied VariablesX.
.IX Xref "tied variables, about"
.IP "titlecase" 4
.IX Item "titlecase"
Da case used fo' capitals
that is followed by lowercase charactas instead of by mo' capitals.
Sometimes called sentence case or headline case. Gangsta donXt use
Unicode titlecase yo, but casin rulez fo' Gangsta titlez is mo' fucked up
than simply capitalizin each wordXs first character.
.IX Xref "titlecase charactas characters, titlecase"
.IP "\s-1TMTOWTDI\s0" 4
.IX Item "TMTOWTDI"
ThereXs Mo' Than One Way To Do It, tha Perl Motto. The
notion dat there can be mo' than one valid path ta solvin a programming
problem up in context. (This donXt mean dat mo' ways is always betta or
that all possible paths is equally desirableXjust dat there need not be
One True Way.)
.IX Xref "TMTOWTDI acronym"
.IP "token" 4
.IX Item "token"
A morpheme up in a programmin language, tha smallest unit
of text wit semantic significance.
.IX Xref "tokens, defined"
.IP "tokener" 4
.IX Item "tokener"
A module dat breaks a program text tha fuck into a sequence of
\&\fBtokens\fR fo' lata analysis by a parser.
.IX Xref "tokeners, defined"
.IP "tokenizing" 4
.IX Item "tokenizing"
Splittin up a program text tha fuck into \fBtokens\fR fo' realz. Also known as
XlexingX, up in which case you git XlexemesX instead of tokens.
.IX Xref "tokenizing"
.IP "toolbox approach" 4
.IX Item "toolbox approach"
Da notion that, wit a cold-ass lil complete set of simple tools
that work well together, you can build almost anythang you want. Which is
fine if youXre assemblin a tricycle yo, but if youXre buildin a
defranishizin comboflux regurgalator, you straight-up want yo' own machine
shop up in which ta build special tools. Perl is sort of a machine shop.
.IX Xref "toolbox approach"
.IP "topic" 4
.IX Item "topic"
Da thang youXre hustlin on. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Structures like
\&\f(CW\*(C`while(<>)\*(C'\fR, \f(CW\*(C`for\*(C'\fR, \f(CW\*(C`foreach\*(C'\fR, n' \f(CW\*(C`given\*(C'\fR set tha topic for
you by assignin ta \f(CW$_\fR, tha default (\fItopic\fR) variable.
.IX Xref "topics (term)"
.IP "transliterate" 4
.IX Item "transliterate"
To turn one string
representation tha fuck into another by mappin each characta of tha source string
to its correspondin characta up in tha result string. Not ta be confused
with translation: fo' example, Greek \fI\s-1XXXXXXXXXX\s0\fR transliterates into
\&\fIpolychromos\fR but translates tha fuck into \fImany-colored\fR. Right back up in yo muthafuckin ass. See tha \f(CW\*(C`tr///\*(C'\fR
operator up in Camel chapta 5, XPattern MatchingX.
.IX Xref "tr (transliteration) operator, bout strings, transliteration of transliteration (tr ) operator, about"
.IP "trigger" 4
.IX Item "trigger"
An event dat causes a \fBhandlez\fR ta be run.
.IX Xref "triggers (term)"
.IP "trinary" 4
.IX Item "trinary"
Not a stellar system wit three stars yo, but an
\&\fBoperator\fR takin three \fBoperands\fR. Right back up in yo muthafuckin ass. Sometimes pronounced \fBternary\fR.
.IX Xref "trinary operators"
.IP "troff" 4
.IX Item "troff"
A venerable typesettin language from which Perl derives
the name of its \f(CW$%\fR variable n' which is secretly used up in tha thang
of Camel books.
.IX Xref "troff language"
.IP "true" 4
.IX Item "true"
Any scalar value dat donXt evaluate ta 0 or
\&\f(CW""\fR.
.IX Xref "true joints joints, true"
.IP "truncating" 4
.IX Item "truncating"
Emptyin a gangbangin' file of existing
contents, either automatically when openin a gangbangin' file fo' freestylin or
explicitly via tha \f(CW\*(C`truncate\*(C'\fR function.
.IX Xref "truncate function files, truncating"
.IP "type" 4
.IX Item "type"
See \fBdata type\fR n' \fBclass\fR.
.IX Xref "type"
.IP "type casting" 4
.IX Item "type casting"
Convertin data from one type ta another n' shit. C permits all dis bullshit.
Perl do not need dat shit. Nor want dat shit.
.IX Xref "type casting"
.IP "typedef" 4
.IX Item "typedef"
A type definizzle up in tha C n' \*(C+ languages.
.IX Xref "typedef"
.IP "typed lexical" 4
.IX Item "typed lexical"
A \fBlexical variable\fR  lexical>that is declared wit a \fBclass\fR
type: \f(CW\*(C`my Pony $bill\*(C'\fR.
.IX Xref "typed lexicals lexical variables, typed lexicals variables, variable"
.IP "typeglob" 4
.IX Item "typeglob"
Use of a single identifier, prefixed wit \f(CW\*(C`*\*(C'\fR. For
example, \f(CW*name\fR standz fo' any or all of \f(CW$name\fR, \f(CW@name\fR, \f(CW%name\fR,
\&\f(CW&name\fR, or just \f(CW\*(C`name\*(C'\fR yo. How tha fuck you use it determines whether it is
interpreted as all or only one of em. Right back up in yo muthafuckin ass. See XTypeglobs n' FilehandlesX in
Camel chapta 2, XBits n' PiecesX.
.IX Xref "typeglobs, defined"
.IP "typemap" 4
.IX Item "typemap"
A description of how tha fuck C types may be transformed ta n' from Perl
types within a \fBextension\fR module freestyled up in \fB\s-1XS\s0\fR.
.IX Xref "typemap"
.SS "U"
.IX Subsection "U"
.IP "\s-1UDP\s0" 4
.IX Item "UDP"
User Datagram Protocol, tha typical way ta send
\&\fBdatagrams\fR over tha Internet.
.IX Xref "User Datagram Protocol (UDP) UDP (User Datagram Protocol) datagrams, UDP support"
.IP "\s-1UID\s0" 4
.IX Item "UID"
A user \s-1ID. \s0Often used up in tha context of
\&\fBfile\fR or \fBprocess\fR ballership.
.IX Xref "UID (user ID) user ID (UID)"
.IP "umask" 4
.IX Item "umask"
A mask of dem \fBpermission bits\fR dat should be forced
off when bustin filez or directories, up in order ta establish a policy of
whom youXll ordinarily deny access to. Right back up in yo muthafuckin ass. See tha \f(CW\*(C`umask\*(C'\fR function.
.IX Xref "umask function"
.IP "unary operator" 4
.IX Item "unary operator"
An operator wit only one \fBoperand\fR, like \f(CW\*(C`!\*(C'\fR or
\&\f(CW\*(C`chdir\*(C'\fR. Unary operators is probably prefix operators; dat is, they
precede they operand. Y'all KNOW dat shit, muthafucka! Da \f(CW\*(C`++\*(C'\fR n' \f(CW\*(C`XX\*(C'\fR operators can be either prefix
or postfix. (Their posizzle \fIdoes\fR chizzle they meanings.)
.IX Xref "unary operators, about"
.IP "Unicode" 4
.IX Item "Unicode"
A characta set comprisin all tha major characta sets of
the ghetto, mo' or less. Right back up in yo muthafuckin ass. See <http://www.unicode.org>.
.IX Xref "Unicode, about"
.IP "Unix" 4
.IX Item "Unix"
A straight-up big-ass n' constantly evolvin language wit several
alternatizzle n' largely incompatible syntaxes, up in which mah playas can define
anythang any way they chizzle, n' probably do. Right back up in yo muthafuckin ass. Speakerz of dis language
think itXs easy as fuck  ta learn cuz itXs so easily twisted ta oneXs own ends,
but dialectical differences make tribal intercommunication nearly
impossible, n' travelaz is often reduced ta a pidgin-like subset of the
language. To be universally understood, a Unix shell programmer must spend
yearz of study up in tha art. Many have abandoned dis discipline n' now
communicate via a Esperanto-like language called Perl.
.IX Xref "Unix language"
.Sp
In ancient times, Unix was also used ta refer ta some code dat a cold-ass lil couple
people at Bell Labs freestyled ta make use of a \s-1PDP\-7\s0 computa dat wasnXt bustin
much of anythang else all up in tha time.
.IP "uppercase" 4
.IX Item "uppercase"
In Unicode, not just
charactas wit tha General Category of Uppercase Letter yo, but any character
with tha Uppercase property, includin some Letta Numbers n' Symbols. Not
to be trippin wit \fBtitlecase\fR.
.IX Xref "uppercase charactas characters, uppercase"
.SS "V"
.IX Subsection "V"
.IP "value" 4
.IX Item "value"
An actual piece of data, up in contrast ta all the
variables, references, keys, indices, operators, n' whatnot dat you need
to access tha value.
.IX Xref "values, defined"
.IP "variable" 4
.IX Item "variable"
A named storage location dat can hold any
of various kindz of \fBvalue\fR, as yo' program sees fit.
.IX Xref "variables, defined variables"
.IP "variable interpolation" 4
.IX Item "variable interpolation"
Da \fBinterpolation\fR of
a scalar or array variable tha fuck into a string.
.IX Xref "variable interpolation interpolation, variable"
.IP "variadic" 4
.IX Item "variadic"
Said of a \fBfunction\fR dat happily receives an
indeterminizzle number of \fBactual arguments\fR.
.IX Xref "variadic (term)"
.IP "vector" 4
.IX Item "vector"
Mathematical jargon fo' a list of \fBscalar joints\fR.
.IX Xref "vectors"
.IP "virtual" 4
.IX Item "virtual"
Providin tha appearizzle of suttin' without tha reality,
as in: virtual memory aint real memory. (See also \fBmemory\fR.) The
opposite of XvirtualX is XtransparentX, which means providin tha reality
of suttin' without tha appearance, as in: Perl handlez the
variable-length \s-1UTFX8\s0 characta encodin transparently.
.IX Xref "virtual (term)"
.IP "void context" 4
.IX Item "void context"
A form of \fBscalar context\fR up in which an
\&\fBexpression\fR aint sposed ta fuckin return any \fBvalue\fR at all n' is
evaluated fo' its \fBside effects\fR ridin' solo.
.IX Xref "void context context, void"
.IP "v\-string" 4
.IX Item "v-string"
A XversionX or XvectorX \fBstring\fR
specified wit a \f(CW\*(C`v\*(C'\fR followed by a seriez of decimal integers up in dot
notation, fo' instance, \f(CW\*(C`v1.20.300.4000\*(C'\fR. Each number turns tha fuck into a
\&\fBcharacter\fR wit tha specified ordinal value. (Da \f(CW\*(C`v\*(C'\fR is optionizzle when
there is at least three integers.)
.IX Xref "vXstrings strings, vXstrings"
.SS "W"
.IX Subsection "W"
.IP "warning" 4
.IX Item "warning"
A message printed ta tha \f(CW\*(C`STDERR\*(C'\fR stream ta tha effect dat suttin' might be
wrong but isnXt worth blowin up over n' shit. Right back up in yo muthafuckin ass. See \f(CW\*(C`warn\*(C'\fR up in Camel chapta 27,
XFunctionsX n' tha \f(CW\*(C`warnings\*(C'\fR pragma up in Camel chapta 28, XPragmantic
ModulesX.
.IX Xref "warnin lyrics STDERR filehandle, warnin lyrics and"
.IP "watch expression" 4
.IX Item "watch expression"
An expression which, when its value
changes, causes a funky-ass breakpoint up in tha Perl debugger.
.IX Xref "watch expression expressions, watch"
.IP "weak reference" 4
.IX Item "weak reference"
A reference dat donXt git counted
normally. When all tha aiiight references ta data disappear, tha data
disappears. These is useful fo' circular references dat would never
disappear otherwise.
.IX Xref "weak references references, weak"
.IP "whitespace" 4
.IX Item "whitespace"
A \fBcharacter\fR dat moves
your cursor but donXt otherwise put anythang on yo' screen. I aint talkin' bout chicken n' gravy biatch. Typically
refers ta any of: space, tab, line feed, carriage return, or form feed. Y'all KNOW dat shit, muthafucka! In
Unicode, matches nuff other charactas dat Unicode considaz whitespace,
includin tha X\-XX .
.IX Xref "whitespace charactas characters, whitespace"
.IP "word" 4
.IX Item "word"
In aiiight XcomputereseX, tha piece of data of tha size most
efficiently handled by yo' computer, typically 32 bits or so, give or take a
few powerz of 2. In Perl culture, it mo' often refers ta a alphanumeric
\&\fBidentifier\fR (includin underscores), or ta a strang of nonwhitespace
\&\fBcharacters\fR bounded by whitespace or strang boundaries.
.IX Xref "wordz (term)"
.IP "workin directory" 4
.IX Item "workin directory"
Yo crazy-ass current \fBdirectory\fR, from
which relatizzle pathnames is interpreted by tha \fBoperatin system\fR. The
operatin system knows yo' current directory cuz you holla'd at it wit a
\&\f(CW\*(C`chdir\*(C'\fR, or cuz you started up in tha place where yo' parent
\&\fBprocess\fR was when you was born.
.IX Xref "workin directory directories, working"
.IP "wrapper" 4
.IX Item "wrapper"
A program or subroutine dat runs some other program or
subroutine fo' you, modifyin a shitload of its input or output ta betta suit
your purposes.
.IX Xref "wrappers (term)"
.IP "\s-1WYSIWYG\s0" 4
.IX Item "WYSIWYG"
What Yo ass See Is What Yo ass Get. Usually used when something
that appears on tha screen matches how tha fuck it will eventually look, like PerlXs
\&\f(CW\*(C`format\*(C'\fR declarations fo' realz. Also used ta mean tha opposite of magic cuz
everythang works exactly as it appears, as up in tha three\- argument form of
\&\f(CW\*(C`open\*(C'\fR.
.IX Xref "WYSIWYG acronym"
.SS "X"
.IX Subsection "X"
.IP "\s-1XS\s0" 4
.IX Item "XS"
An extraordinarily
exported, expeditiously pimpin, expressly eXternal Subroutine, executed
in existin C or \*(C+ or up in a bangin extension language called
(exasperatingly) \s-1XS.\s0
.IX Xref "XS (eXternal Subroutine) eXternal Subroutine (XS)"
.IP "\s-1XSUB\s0" 4
.IX Item "XSUB"
An external \fBsubroutine\fR defined up in \fB\s-1XS\s0\fR.
.IX Xref "XSUB (term)"
.SS "Y"
.IX Subsection "Y"
.IP "yacc" 4
.IX Item "yacc"
Yet Another Compila Compila n' shiznit fo' realz. A parser generator without
which Perl probably would not have existed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Right back up in yo muthafuckin ass. See tha file \fIperly.y\fR up in the
Perl source distribution.
.IX Xref "yacc acronym"
.SS "Z"
.IX Subsection "Z"
.IP "zero width" 4
.IX Item "zero width"
A subpattern \fBassertion\fR matchin tha \fBnull
string\fR between \fBcharacters\fR.
.IX Xref "zeroXwidth assertions subpatterns, zeroXwidth assertions assertions (in regexes), zeroXwidth"
.IP "zombie" 4
.IX Item "zombie"
A process dat has took a dirt nap (exited) but
whose parent has not yet received proper notification of its demise by
virtue of havin called \f(CW\*(C`wait\*(C'\fR or \f(CW\*(C`waitpid\*(C'\fR. If you \f(CW\*(C`fork\*(C'\fR, you must
clean up afta yo' lil pimp processes when they exit; otherwise, tha process
table will fill up n' yo' system administrator will Not Be Kool as fuck with
you.
.IX Xref "zombie processes processes, zombie"
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Based on tha Glossary of \fIProgrammin Perl\fR, Fourth Edition,
by Tomothy Christiansen, brian d foy, Larry Wall, & Jizzle Orwant.
Copyright (c) 2000, 1996, 1991, 2012 O'Reilly Media, Inc.
This document may be distributed under tha same terms as Perl itself.
