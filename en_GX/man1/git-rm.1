'\" t
.\"     Title: git-rm
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-RM" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-rm \- Remove filez from tha hustlin tree n' from tha index
.SH "SYNOPSIS"
.sp
.nf
\fIgit rm\fR [\-f | \-\-force] [\-n] [\-r] [\-\-cached] [\-\-ignore\-unmatch] [\-\-quiet] [\-\-] <file>\&...
.fi
.sp
.SH "DESCRIPTION"
.sp
Remove filez from tha index, or from tha hustlin tree n' tha index\&. git rm aint gonna remove a gangbangin' file from just yo' hustlin directory\&. (There is no option ta remove a gangbangin' file only from tha hustlin tree n' yet keep it up in tha index; use /bin/rm if you wanna do that\&.) Da filez bein removed gotta be identical ta tha tip of tha branch, n' no thugged-out shiznit ta they contents can be staged up in tha index, though dat default behavior can be overridden wit tha \-f option\&. When \-\-cached is given, tha staged content has ta match either tha tip of tha branch or tha file on disk, allowin tha file ta be removed from just tha index\&.
.SH "OPTIONS"
.PP
<file>\&...
.RS 4
Filez ta remove\&. Fileglobs (e\&.g\&.
*\&.c) can be given ta remove all matchin files\&. If you want Git ta expand file glob characters, you may need ta shell\-escape them\& fo' realz. A leadin directory name (e\&.g\&.
dir
to remove
dir/file1
and
dir/file2) can be given ta remove all filez up in tha directory, n' recursively all sub\-directories yo, but dis requires the
\-r
option ta be explicitly given\&.
.RE
.PP
\-f, \-\-force
.RS 4
Override tha up\-to\-date check\&.
.RE
.PP
\-n, \-\-dry\-run
.RS 4
Don\(cqt straight-up remove any file(s)\&. Instead, just show if they exist up in tha index n' would otherwise be removed by tha command\&.
.RE
.PP
\-r
.RS 4
Allow recursive removal when a leadin directory name is given\&.
.RE
.PP
\-\-
.RS 4
This option can be used ta separate command\-line options from tha list of files, (useful when filenames might be mistaken fo' command\-line options)\&.
.RE
.PP
\-\-cached
.RS 4
Use dis option ta unstage n' remove paths only from tha index\&. Workin tree files, whether modified or not, is ghon be left alone\&.
.RE
.PP
\-\-ignore\-unmatch
.RS 4
Exit wit a zero status even if no filez matched\&.
.RE
.PP
\-q, \-\-quiet
.RS 4
git rm
normally outputs one line (in tha form of an
rm
command) fo' each file removed\&. This option suppresses dat output\&.
.RE
.SH "DISCUSSION"
.sp
Da <file> list given ta tha command can be exact pathnames, file glob patterns, or leadin directory names\&. Da command removes only tha paths dat is known ta Git\&. Givin tha name of a gangbangin' file dat you aint holla'd at Git bout do not remove dat file\&.
.sp
File globbin matches across directory boundaries\&. Thus, given two directories d n' d2, there be a gangbangin' finger-lickin' difference between rockin git rm \(aqd*\(aq n' git rm \(aqd/*\(aq, as tha forma will also remove all of directory d2\&.
.SH "REMOVING FILES THAT HAVE DISAPPEARED FROM THE FILESYSTEM"
.sp
There is no option fo' git rm ta remove from tha index only tha paths dat have disappeared from tha filesystem\&. But fuck dat shiznit yo, tha word on tha street is dat dependin on tha use case, there be nuff muthafuckin ways dat can be done\&.
.SS "Usin \(lqgit commit \-a\(rq"
.sp
If you intend dat yo' next commit should record all modificationz of tracked filez up in tha hustlin tree n' record all removalz of filez dat done been removed from tha hustlin tree wit rm (as opposed ta git rm), use git commit \-a, as it will automatically notice n' record all removals\&. Yo ass can also gotz a similar effect without committin by rockin git add \-u\&.
.SS "Usin \(lqgit add \-A\(rq"
.sp
When acceptin a freshly smoked up code drop fo' a vendor branch, you probably wanna record both tha removal of paths n' additionz of freshly smoked up paths as well as modificationz of existin paths\&.
.sp
Typically you would first remove all tracked filez from tha hustlin tree rockin dis command:
.sp
.if n \{\
.RS 4
.\}
.nf
git ls\-filez \-z | xargs \-0 rm \-f
.fi
.if n \{\
.RE
.\}
.sp
.sp
and then untar tha freshly smoked up code up in tha hustlin tree\& fo' realz. Alternately you could \fIrsync\fR tha chizzlez tha fuck into tha hustlin tree\&.
.sp
Afta that, tha easiest way ta record all removals, additions, n' modifications up in tha hustlin tree is:
.sp
.if n \{\
.RS 4
.\}
.nf
git add \-A
.fi
.if n \{\
.RE
.\}
.sp
.sp
See \fBgit-add\fR(1)\&.
.SS "Other ways"
.sp
If all you straight-up wanna do is ta remove from tha index tha filez dat is no longer present up in tha hustlin tree (like cuz yo' hustlin tree is dirty so dat you cannot use git commit \-a), use tha followin command:
.sp
.if n \{\
.RS 4
.\}
.nf
git diff \-\-name\-only \-\-diff\-filter=D \-z | xargs \-0 git rm \-\-cached
.fi
.if n \{\
.RE
.\}
.sp
.SH "SUBMODULES"
.sp
Only submodulez rockin a gitfile (which means they was cloned wit a Git version 1\&.7\&.8 or newer) is ghon be removed from tha work tree, as they repository be reppinside tha \&.git directory of tha superproject\&. If a submodule (or one of dem nested inside it) still uses a \&.git directory, git rm will fail \- no matta if forced or not \- ta protect tha submodule\(cqs history\&. If it exists tha submodule\&.<name> section up in tha \fBgitmodules\fR(5) file will also be removed n' dat file is ghon be staged (unless \-\-cached or \-n is used)\&.
.sp
A submodule is considered up\-to\-date when tha HEAD is tha same ol' dirty as recorded up in tha index, no tracked filez is modified n' no untracked filez dat aren\(cqt ignored is present up in tha submodulez work tree\&. Ignored filez is deemed expendable n' won\(cqt stop a submodule\(cqs work tree from bein removed\&.
.sp
If you only wanna remove tha local checkout of a submodule from yo' work tree without committin tha removal, use \fBgit-submodule\fR(1) deinit instead\&.
.SH "EXAMPLES"
.PP
git rm Documentation/\e*\&.txt
.RS 4
Removes all
*\&.txt
filez from tha index dat is under the
Documentation
directory n' any of its subdirectories\&.
.sp
Note dat tha asterisk
*
is quoted from tha shell up in dis example; dis lets Git, n' not tha shell, expand tha pathnamez of filez n' subdirectories under the
Documentation/
directory\&.
.RE
.PP
git rm \-f git\-*\&.sh
.RS 4
Because dis example lets tha shell expand tha asterisk (i\&.e\&. yo ass is listin tha filez explicitly), it do not remove
subdir/git\-foo\&.sh\&.
.RE
.SH "BUGS"
.sp
Each time a superproject update removes a populated submodule (e\&.g\&. when switchin between commits before n' afta tha removal) a stale submodule checkout will remain up in tha oldschool location\&. Removin tha oldschool directory is only safe when it uses a gitfile, as otherwise tha history of tha submodule is ghon be deleted too\&. This step is ghon be obsolete when recursive submodule update has been implemented\&.
.SH "SEE ALSO"
.sp
\fBgit-add\fR(1)
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
