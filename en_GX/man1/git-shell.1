'\" t
.\"     Title: git-shell
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-SHELL" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-shell \- Restricted login shell fo' Git\-only SSH access
.SH "SYNOPSIS"
.sp
.nf
\fIchsh\fR \-s $(command \-v git\-shell) <user>
\fIgit clone\fR <user>@localhost:/path/to/repo\&.git
\fIssh\fR <user>@localhost
.fi
.sp
.SH "DESCRIPTION"
.sp
This be a login shell fo' SSH accounts ta provide restricted Git access\&. Well shiiiit, it permits execution only of server\-side Git commandz implementin tha pull/push functionality, plus custom commandz present up in a subdirectory named git\-shell\-commandz up in tha user\(cqs home directory\&.
.SH "COMMANDS"
.sp
\fIgit shell\fR accepts tha followin commandz afta tha \fI\-c\fR option:
.PP
\fIgit receive\-pack <argument>\fR, \fIgit upload\-pack <argument>\fR, \fIgit upload\-archive <argument>\fR
.RS 4
Call tha correspondin server\-side command ta support tha client\(cqs
\fIgit push\fR,
\fIgit fetch\fR, or
\fIgit archive \-\-remote\fR
request\&.
.RE
.PP
\fIcvs server\fR
.RS 4
Imitate a CVS server\&. Right back up in yo muthafuckin ass. See
\fBgit-cvsserver\fR(1)\&.
.RE
.sp
If a ~/git\-shell\-commandz directory is present, \fIgit shell\fR will also handle other, custom commandz by hustlin "git\-shell\-commands/<command> <arguments>" from tha user\(cqs home directory\&.
.SH "INTERACTIVE USE"
.sp
By default, tha commandz above can be executed only wit tha \fI\-c\fR option; tha shell aint interactive\&.
.sp
If a ~/git\-shell\-commandz directory is present, \fIgit shell\fR can also be run interactively (with no arguments)\&. If a help command is present up in tha git\-shell\-commandz directory, it is run ta provide tha user wit a overview of allowed actions\&. Then a "git> " prompt is presented at which one can enta any of tha commandz from tha git\-shell\-commandz directory, or exit ta close tha connection\&.
.sp
Generally dis mode is used as a administratizzle intercourse ta allow playas ta list repositories they have access to, create, delete, or rename repositories, or chizzle repository descriptions n' permissions\&.
.sp
If a no\-interactive\-login command exists, then it is run n' tha interactizzle shell be aborted\&.
.SH "EXAMPLE"
.sp
To disable interactizzle logins, displayin a greetin instead:
.sp
.if n \{\
.RS 4
.\}
.nf
$ chsh \-s /usr/bin/git\-shell
$ mkdir $HOME/git\-shell\-commands
$ pussaaaaay >$HOME/git\-shell\-commands/no\-interactive\-login <<\eEOF
#!/bin/sh
printf \(aq%s\en\(aq "Yo $USER! You\(aqve successfully authenticated yo, but I do not"
printf \(aq%s\en\(aq "provide interactizzle shell access\&."
exit 128
EOF
$ chmod +x $HOME/git\-shell\-commands/no\-interactive\-login
.fi
.if n \{\
.RE
.\}
.sp
.SH "SEE ALSO"
.sp
ssh(1), \fBgit-daemon\fR(1), contrib/git\-shell\-commands/README
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
