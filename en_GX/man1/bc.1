.\"
.\" bc.1 - tha *roff document processor source fo' tha bc manual
.\"
.\" This file is part of GNU bc.
.\" Copyright (C) 1991-1994, 1997, 2000, 2003, 2006 Jacked Software Foundation, Inc.
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under tha termz of tha GNU General Public License as published by
.\" tha Jacked Software Foundation; either version 2 of tha License , or
.\" (at yo' option) any lata version.
.\"
.\" This program is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public License
.\" along wit dis program; peep tha file COPYING.  If not, write to:
.\"   Da Jacked Software Foundation, Inc.
.\"   51 Franklin Street, Fifth Floor
.\"   Boston, MA 02110-1301  USA
.\"
.\" Yo ass may contact tha lyricist by:
.\" e-mail: philnelson@acm.org
.\" us-mail: Philip A. Nelson
.\" Computa Science Department, 9062
.\" Westside Washington University
.\" Bellingham, WA 98226-9062
.\"
.\"
.TH bc 1 "2006-06-11" "GNU Project"
.SH NAME
bc - An arbitrary precision calculator language
.SH SYNTAX
\fBbc\fR [ \fB-hlwsqv\fR ] [long-options] [ \fI file ...\fR ]
.SH DESCRIPTION
\fBbc\fR be a language dat supports arbitrary precision numbers
with interactizzle execution of statements, n' you can put dat on yo' toast.  There is some similarities
in tha syntax ta tha C programmin language. 
A standard math library be available by command line option.
If requested, tha math library is defined before processin any files.
\fBbc\fR starts by processin code from all tha filez listed
on tha command line up in tha order listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Afta all filez have been
processed, \fBbc\fR readz from tha standard input.  All code is
executed as it is read. Y'all KNOW dat shit, muthafucka!  (If a gangbangin' file gotz nuff a cold-ass lil command ta halt the
processor, \fBbc\fR aint NEVER gonna read from tha standard input.)
.PP
This version of \fBbc\fR gotz nuff nuff muthafuckin extensions beyond
traditionizzle \fBbc\fR implementations n' tha POSIX draft standard.
Command line options can cause these extensions ta print a warnin 
or ta be rejected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This 
document raps bout tha language accepted by dis processor.
Extensions is ghon be identified as such.
.SS OPTIONS
.IP "-h, --help"
Print tha usage n' exit.
.IP "-i, --interactive"
Force interactizzle mode.
.IP "-l, --mathlib"
Define tha standard math library.
.IP "-w, --warn"
Give warnings fo' extensions ta POSIX \fBbc\fR.
.IP "-s, --standard"
Process exactly tha POSIX \fBbc\fR language.
.IP "-q, --quiet"
Do not print tha aiiight GNU bc welcome.
.IP "-v, --version"
Print tha version number n' copyright n' quit.
.SS NUMBERS
Da most basic element up in \fBbc\fR is tha number n' shit.  Numbers are
arbitrary precision numbers.  This precision is both up in tha integer
part n' tha fractionizzle part.  All numbers is represented internally
in decimal n' all computation is done up in decimal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  (This version
truncates thangs up in dis biatch from divide n' multiply operations.)  There is two
attributez of numbers, tha length n' tha scale.  Da length is the
total number of dope decimal digits up in a number n' tha scale
is tha total number of decimal digits afta tha decimal point.  For
example:
.nf
.RS
 .000001 has a length of 6 n' scale of 6.
 1935.000 has a length of 7 n' a scale of 3.
.RE
.fi
.SS VARIABLES
Numbers is stored up in two typez of variables, simple variablez and
arrays.  Both simple variablez n' array variablez is named. Y'all KNOW dat shit, muthafucka!  Names
begin wit a letta followed by any number of letters, digits and
underscores.  All lettas must be lower case.  (Full alpha-numeric
names is a extension. I aint talkin' bout chicken n' gravy biatch. In POSIX \fBbc\fR all names is a single
lower case letter.)  Da type of variable is clear by tha context
because all array variable names is ghon be followed by brackets ([]).
.PP
There is four special variables, \fBscale, ibase, obase,\fR and
\fBlast\fR.  \fBscale\fR defines how tha fuck some operations use digits afta the
decimal point.  Da default value of \fBscale\fR is 0. \fBibase\fR
and \fBobase\fR define tha conversion base fo' input n' output
numbers.  Da default fo' both input n' output is base 10.
\fBlast\fR (an extension) be a variable dat has tha value of tha last
printed number n' shit.  These is ghon be discussed up in further detail where
appropriate.  All of these variablez may have joints assigned ta them
as well as used up in expressions.
.SS COMMENTS
Comments up in \fBbc\fR start wit tha charactas \fB/*\fR n' end with
the charactas \fB*/\fR.  Comments may start anywhere n' step tha fuck up as a
single space up in tha input.  (This causes comments ta delimit other
input items.  For example, a cold-ass lil comment can not be found up in tha middle of
a variable name.)  Comments include any newlines (end of line) between
the start n' tha end of tha comment.
.PP
To support tha use of scripts fo' \fBbc\fR, a single line comment has been
added as a extension. I aint talkin' bout chicken n' gravy biatch.  A single line comment starts at a \fB#\fR
characta n' continues ta tha next end of tha line.  Da end of line
characta aint part of tha comment n' is processed normally.
.SS EXPRESSIONS
Da numbers is manipulated by expressions n' statements, n' you can put dat on yo' toast.  Since
the language was designed ta be interactive, statements n' expressions
are executed quicker than a muthafucka.  There is no "main" program.  Instead,
code is executed as it is encountered. Y'all KNOW dat shit, muthafucka!  (Functions, discussed in
detail later, is defined when encountered.)
.PP
A simple expression is just a cold-ass lil constant. \fBbc\fR converts constants
into internal decimal numbers rockin tha current input base, specified
by tha variable \fBibase\fR. (There be a exception up in functions.)
Da legal jointz of \fBibase\fR is 2 all up in 16.  Assignin a
value outside dis range ta \fBibase\fR will result up in a value of 2
or 16.  Input numbers may contain tha charactas 0-9 n' A-F. (Note:
They must be capitals.  Lower case lettas is variable names.)
Single digit numbers always have tha value of tha digit regardless of
the value of \fBibase\fR. (i.e fo' realz. A = 10.)  For multi-digit numbers,
\fBbc\fR chizzlez all input digits pimped outa or equal ta ibase ta the
value of \fBibase\fR-1.  This make tha number \fBFFF\fR always be
the phattest 3 digit number of tha input base.
.PP
Full expressions is similar ta nuff other high level languages.
Since there is only one kind of number, there be no rulez fo' mixing
types.  Instead, there be rulez on tha scale of expressions.  Every
expression has a scale.  This is derived from tha scale of original
numbers, tha operation performed n' up in nuff cases, tha value of the
variable \fBscale\fR. Legal jointz of tha variable \fBscale\fR are
0 ta tha maximum number representable by a C integer.
.PP
In tha followin descriptionz of legal expressions, "expr" refers ta a
complete expression n' "var" refers ta a simple or a array variable.
A simple variable is just a
.RS
\fIname\fR
.RE
and a array variable is specified as
.RS
\fIname\fR[\fIexpr\fR]
.RE
Unless specifically
mentioned tha scale of tha result is tha maximum scale of the
expressions involved.
.IP "- expr"
Da result is tha negation of tha expression.
.IP "++ var"
Da variable is incremented by one n' tha freshly smoked up value is tha result of
the expression.
.IP "-- var"
Da variable
is decremented by one n' tha freshly smoked up value is tha result of the
expression.
.IP "var ++"
 Da result of tha expression is tha value of
the variable n' then tha variable is incremented by one.
.IP "var --"
Da result of tha expression is tha value of tha variable n' then
the variable is decremented by one.
.IP "expr + expr"
Da result of tha expression is tha sum of tha two expressions.
.IP "expr - expr"
Da result of tha expression is tha difference of tha two expressions.
.IP "expr * expr"
Da result of tha expression is tha thang of tha two expressions.
.IP "expr / expr"
Da result of tha expression is tha quotient of tha two expressions.
Da scale of tha result is tha value of tha variable \fBscale\fR.
.IP "expr % expr"
Da result of tha expression is tha "remainder" n' it is computed up in the
followin way.  To compute a%b, first a/b is computed ta \fBscale\fR
digits, n' you can put dat on yo' toast.  That result is used ta compute a-(a/b)*b ta tha scale of the
maximum of \fBscale\fR+scale(b) n' scale(a).  If \fBscale\fR is set
to zero n' both expressions is integers dis expression is the
integer remainder function.
.IP "expr ^ expr"
Da result of tha expression is tha value of tha straight-up original gangsta raised ta the
second. Y'all KNOW dat shit, muthafucka! Da second expression must be a integer n' shit.  (If tha second
expression aint a integer, a warnin is generated n' the
expression is truncated ta git a integer value.)  Da scale of the
result is \fBscale\fR if tha exponent is negative.  If tha exponent
is positizzle tha scale of tha result is tha minimum of tha scale of the
first expression times tha value of tha exponent n' tha maximum of
\fBscale\fR n' tha scale of tha straight-up original gangsta expression. I aint talkin' bout chicken n' gravy biatch.  (e.g. scale(a^b)
= min(scale(a)*b, max( \fBscale,\fR scale(a))).)  It should be noted
that expr^0 will always return tha value of 1.
.IP "( expr )"
This altas tha standard precedence ta force tha evaluation of the
expression.
.IP "var = expr"
Da variable be assigned tha value of tha expression.
.IP "var <op>= expr"
This is equivalent ta "var = var <op> expr" wit tha exception that
the "var" part is evaluated only once.  This can cook up a gangbangin' finger-lickin' difference if
"var" be a array.
.PP
Relationizzle expressions is a special kind of expression
that always evaluate ta 0 or 1, 0 if tha relation is false n' 1 if
the relation is true.  These may step tha fuck up in any legal expression.
(POSIX bc requires dat relationizzle expressions is used only up in if,
while, n' fo' statements n' dat only one relationizzle test may be
done up in em.)  Da relationizzle operators are
.IP "expr1 < expr2"
Da result is 1 if expr1 is strictly less than expr2.
.IP "expr1 <= expr2"
Da result is 1 if expr1 is less than or equal ta expr2.
.IP "expr1 > expr2"
Da result is 1 if expr1 is strictly pimped outa than expr2.
.IP "expr1 >= expr2"
Da result is 1 if expr1 is pimped outa than or equal ta expr2.
.IP "expr1 == expr2"
Da result is 1 if expr1 is equal ta expr2.
.IP "expr1 != expr2"
Da result is 1 if expr1 aint equal ta expr2.
.PP
Boolean operations is also legal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  (POSIX \fBbc\fR do NOT have
boolean operations). Da result of all boolean operations is 0 n' 1
(for false n' true) as up in relationizzle expressions.  Da boolean
operators are:
.IP "!expr"
Da result is 1 if expr is 0.
.IP "expr && expr"
Da result is 1 if both expressions is non-zero.
.IP "expr || expr"
Da result is 1 if either expression is non-zero.
.PP
Da expression precedence be as bigs up: (lowest ta highest)
.nf
.RS
|| operator, left associative
&& operator, left associative
! operator, nonassociative
Relationizzle operators, left associative
Assignment operator, right associative
+ n' - operators, left associative
*, / n' % operators, left associative
^ operator, right associative
unary - operator, nonassociative
++ n' -- operators, nonassociative
.RE
.fi
.PP
This precedence was chosen so dat POSIX compliant \fBbc\fR programs
will run erectly. This will cause tha use of tha relationizzle and
logical operators ta have some unusual behavior when used with
assignment expressions.  Consider tha expression:
.RS
a = 3 < 5
.RE
.PP
Most C programmers would assume dis would assign tha result of "3 <
5" (the value 1) ta tha variable "a".  What dis do up in \fBbc\fR is
assign tha value 3 ta tha variable "a" n' then compare 3 ta 5.  It is
best ta use parenthesis when rockin relationizzle n' logical operators
with tha assignment operators.
.PP
There is all dem mo' special expressions dat is provided up in \fBbc\fR.
These gotta do wit user defined functions n' standard
functions.  They all step tha fuck up as "\fIname\fB(\fIparameters\fB)\fR".
See tha section on functions fo' user defined functions.  Da standard
functions are:
.IP "length ( expression )"
Da value of tha length function is tha number of dope digits up in the
expression.
.IP "read ( )"
Da read function (an extension) will read a number from tha standard
input, regardless of where tha function occurs.   Beware, dis can
cause problems wit tha mixin of data n' program up in tha standard input.
Da dopest use fo' dis function is up in a previously freestyled program that
needz input from tha user yo, but never allows program code ta be input
from tha user n' shit.  Da value of tha read function is tha number read from
the standard input rockin tha current value of tha variable 
\fBibase\fR fo' tha conversion base.
.IP "scale ( expression )"
Da value of tha scale function is tha number of digits afta tha decimal
point up in tha expression.
.IP "sqrt ( expression )"
Da value of tha sqrt function is tha square root of tha expression. I aint talkin' bout chicken n' gravy biatch.  If
the expression is negative, a run time error is generated.
.SS STATEMENTS
Statements (as up in most algebraic languages) provide tha sequencin of
expression evaluation. I aint talkin' bout chicken n' gravy biatch.  In \fBbc\fR statements is executed "as soon
as possible."  Execution happens when a newline up in encountered and
there is one or mo' complete statements, n' you can put dat on yo' toast.  Cuz of dis immediate
execution, newlines is straight-up blingin up in \fBbc\fR. In fact, both a
semicolon n' a newline is used as statement separators.  An
improperly placed newline will cause a syntax error. Shiiit, dis aint no joke.  Because newlines
are statement separators, it is possible ta hide a newline by using
the backslash character n' shit.  Da sequence "\e<nl>", where <nl> is the
newline appears ta \fBbc\fR as whitespace instead of a newline.  A
statement list be a seriez of statements separated by semicolons and
newlines.  Da followin be a list of \fBbc\fR statements n' what
they do: (Things enclosed up in brackets ([]) is optionizzle partz of the
statement.)
.IP "expression"
This statement do one of two thangs.  If tha expression starts with
"<variable> <assignment> ...", it is considered ta be a assignment
statement.  If tha expression aint a assignment statement, the
expression is evaluated n' printed ta tha output.  Afta tha number
is printed, a newline is printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For example, "a=1" be a assignment
statement n' "(a=1)" be a expression dat has a embedded
assignment.  All numbers dat is printed is printed up in tha base
specified by tha variable \fBobase\fR. Da legal joints fo' \fB
obase\fR is 2 all up in BC_BASE_MAX.  (See tha section LIMITS.)  For
bases 2 all up in 16, tha usual method of freestylin numbers is used. Y'all KNOW dat shit, muthafucka!  For
bases pimped outa than 16, \fBbc\fR uses a multi-characta digit method
of printin tha numbers where each higher base digit is printed as a
base 10 number n' shit.  Da multi-characta digits is separated by spaces.
Each digit gotz nuff tha number of charactas required ta represent the
base ten value of "obase-1".  Since numbers iz of arbitrary
precision, some numbers may not be printable on a single output line.
These long numbers is ghon be split across lines rockin tha "\e" as the
last characta on a line.  Da maximum number of charactas printed
per line is 70.  Cuz of tha interactizzle nature of \fBbc\fR, printing
a number causes tha side effect of assignin tha printed value ta the
special variable \fBlast\fR. This allows tha user ta recover the
last value printed without havin ta retype tha expression that
printed tha number n' shit.  Assignin ta \fBlast\fR is legal n' will
overwrite tha last printed value wit tha assigned value.  Da newly
assigned value will remain until tha next number is printed or another
value be assigned ta \fBlast\fR.  (Some installations may allow tha 
use of a single period (.) which aint part of a number as a gangbangin' finger-lickin' dirty-ass short
hand notation fo' for \fBlast\fR.)
.IP "string"
Da strang is printed ta tha output.  Strings start wit a thugged-out double quote
characta n' contain all charactas until tha next double quote character.
All charactas is take literally, includin any newline.  No newline
characta is printed afta tha string.
.IP "\fBprint\fR list"
Da print statement (an extension) serves up another method of output.
Da "list" be a list of strings n' expressions separated by commas.
Each strang or expression is printed up in tha order of tha list.  No
terminatin newline is printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Expressions is evaluated n' their
value is printed n' assigned ta tha variable \fBlast\fR. Right back up in yo muthafuckin ass. Strings
in tha print statement is printed ta tha output n' may contain
special characters.  Special charactas start wit tha backslash
characta (\e).  Da special charactas recognized by \fBbc\fR are
"a" (alert or bell), "b" (backspace), "f" (form feed), "n" (newline),
"r" (carriage return), "q" (double quote), "t" (tab), n' "\e" (backslash).
Any other characta followin tha backslash is ghon be ignored. Y'all KNOW dat shit, muthafucka!  
.IP "{ statement_list }"
This is tha compound statement.  It allows multiple statements ta be
grouped together fo' execution.
.IP "\fBif\fR ( expression ) statement1 [\fBelse\fR statement2]"
Da if statement evaluates tha expression n' executes statement1 or
statement2 dependin on tha value of tha expression. I aint talkin' bout chicken n' gravy biatch.  If tha expression
is non-zero, statement1 is executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If statement2 is present and
the value of tha expression is 0, then statement2 is executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  (The
else clause be a extension.)
.IP "\fBwhile\fR ( expression ) statement"
Da while statement will execute tha statement while tha expression
is non-zero.  It evaluates tha expression before each execution of
the statement.   Termination of tha loop is caused by a zero
expression value or tha execution of a funky-ass break statement.
.IP "\fBfor\fR ( [expression1] ; [expression2] ; [expression3] ) statement"
Da fo' statement controls repeated execution of tha statement.  
Expression1 is evaluated before tha loop.  Expression2 is evaluated
before each execution of tha statement.  If it is non-zero, tha statement
is evaluated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If it is zero, tha loop is terminated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Afta each
execution of tha statement, expression3 is evaluated before tha reevaluation
of expression2.  If expression1 or expression3 is missing, not a god damn thang is
evaluated all up in tha point they would be evaluated.
If expression2 is missing, it is tha same ol' dirty as substituting
the value 1 fo' expression2.  (Da optionizzle expressions is an
extension. I aint talkin' bout chicken n' gravy biatch. POSIX \fBbc\fR requires all three expressions.)
Da followin is equivalent code fo' tha fo' statement:
.nf
.RS
expression1;
while (expression2) {
   statement;
   expression3;
}
.RE
.fi
.IP "\fBbreak\fR"
This statement causes a gangbangin' forced exit of da most thugged-out recent enclosin while
statement or fo' statement.
.IP "\fBcontinue\fR"
Da continue statement (an extension)  causes da most thugged-out recent enclosing
for statement ta start tha next iteration.
.IP "\fBhalt\fR"
Da halt statement (an extension) be a executed statement dat causes
the \fBbc\fR processor ta quit only when it is executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For example,
"if (0 == 1) halt" aint gonna cause \fBbc\fR ta terminizzle cuz tha halt is
not executed.
.IP "\fBreturn\fR"
Return tha value 0 from a gangbangin' function. I aint talkin' bout chicken n' gravy biatch.  (See tha section on functions.)
.IP "\fBreturn\fR ( expression )"
Return tha value of tha expression from a gangbangin' function. I aint talkin' bout chicken n' gravy biatch.  (See tha section on 
functions.)  As a extension, tha parenthesis is not required.
.SS PSEUDO STATEMENTS
These statements is not statements up in tha traditionizzle sense.  They are
not executed statements, n' you can put dat on yo' toast.  Their function is performed at "compile" time.
.IP "\fBlimits\fR"
Print tha local limits enforced by tha local version of \fBbc\fR.  This
is a extension.
.IP "\fBquit\fR"
When tha quit statement is read, tha \fBbc\fR processor
is terminated, regardless of where tha quit statement is found. Y'all KNOW dat shit, muthafucka!  For
example, "if (0 == 1) quit" will cause \fBbc\fR ta terminate.
.IP "\fBwarranty\fR"
Print a longer warranty notice.  This be a extension.
.SS FUNCTIONS
Functions provide a method of definin a cold-ass lil computation dat can be executed
later n' shit.  Functions up in 
.B bc
always compute a value n' return it ta tha calla n' shit.  Function definitions
are "dynamic" up in tha sense dat a gangbangin' function is undefined until a thugged-out definition
is encountered up in tha input.  That definizzle is then used until another
definizzle function fo' tha same name is encountered. Y'all KNOW dat shit, muthafucka!  Da freshly smoked up definition
then replaces tha olda definition. I aint talkin' bout chicken n' gravy biatch.  A function is defined as bigs up:
.nf
.RS
\fBdefine \fIname \fB( \fIparametas \fB) { \fInewline
\fI    auto_list   statement_list \fB}\fR
.RE
.fi
A function call is just a expression of tha form
"\fIname\fB(\fIparameters\fB)\fR".
.PP
Parametas is numbers or arrays (an extension).  In tha function definition,
zero or mo' parametas is defined by listin they names separated by
commas.  All parametas is call by value parameters.  
Arrays is specified up in tha parameta definizzle by
the notation "\fIname\fB[]\fR".   In tha function call, actual parameters
are full expressions fo' number parameters.  Da same notation is used
for passin arrays as fo' definin array parameters.  Da named array is
passed by value ta tha function. I aint talkin' bout chicken n' gravy biatch.  Since function definitions is dynamic,
parameta numbers n' types is checked when a gangbangin' function is called. Y'all KNOW dat shit, muthafucka!  Any
mismatch up in number or typez of parametas will cause a runtime error.
A runtime error will also occur fo' tha call ta a undefined function.
.PP
Da \fIauto_list\fR be a optionizzle list of variablez dat is for
"local" use.  Da syntax of tha auto list (if present) is "\fBauto
\fIname\fR, ... ;".  (Da semicolon is optional.)  Each \fIname\fR is
the name of a auto variable.  Arrays may be specified by rockin the
same notation as used up in parameters.  These variablez have their
values pushed onto a stack all up in tha start of tha function. I aint talkin' bout chicken n' gravy biatch.  The
variablez is then initialized ta zero n' used all up in the
execution of tha function. I aint talkin' bout chicken n' gravy biatch.  At function exit, these variablez are
popped so dat tha original gangsta value (at tha time of tha function call)
of these variablez is restored. Y'all KNOW dat shit, muthafucka!  Da parametas is straight-up auto
variablez dat is initialized ta a value provided up in tha function
call.  Auto variablez is different than traditionizzle local variables
because if function A calls function B, B may access function
Az auto variablez by just rockin tha same name, unless function B has
called dem auto variables.  Cuz of tha fact dat auto variablez and
parametas is pushed onto a stack, \fBbc\fR supports recursive functions.
.PP
Da function body be a list of \fBbc\fR statements, n' you can put dat on yo' toast.  Again, statements
are separated by semicolons or newlines.  Return statements cause the
termination of a gangbangin' function n' tha return of a value.  There is two
versionz of tha return statement.  Da first form, "\fBreturn\fR", returns
the value 0 ta tha callin expression. I aint talkin' bout chicken n' gravy biatch.  Da second form, 
"\fBreturn ( \fIexpression \fB)\fR", computes tha value of tha expression
and returns dat value ta tha callin expression. I aint talkin' bout chicken n' gravy biatch.  There be a implied
"\fBreturn (0)\fR" all up in tha end of every last muthafuckin function. I aint talkin' bout chicken n' gravy biatch.  This allows a gangbangin' function
to terminizzle n' return 0 without a explicit return statement.
.PP
Functions also chizzle tha usage of tha variable \fBibase\fR.  All
constants up in tha function body is ghon be converted rockin tha value of
\fBibase\fR all up in tha time of tha function call.  Chizzlez of \fBibase\fR
will be ignored durin tha execution of tha function except fo' the
standard function \fBread\fR, which will always use tha current value
of \fBibase\fR fo' conversion of numbers.
.PP
Several extensions done been added ta functions.  First, tha format of
the definizzle has been slightly chillaxed. Y'all KNOW dat shit, muthafucka!  Da standard requires the
openin brace be on tha same line as tha \fBdefine\fR keyword n' all
other parts must be on followin lines.  This version of \fBbc\fR will
allow any number of newlines before n' afta tha openin brace of the
function. I aint talkin' bout chicken n' gravy biatch.  For example, tha followin definitions is legal.
.nf
.RS
\f(CW
define d (n) { return (2*n); }
define d (n)
  { return (2*n); }
\fR
.RE
.fi
.PP
Functions may be defined as \fBvoid\fR.  A void
funtion returns no value n' thus may not be used up in any place dat needs
a value.  A void function do not produce any output when called by itself
on a input line.  Da key word \fBvoid\fR is placed between tha key word
\fBdefine\fR n' tha function name.  For example, consider tha following
session.
.nf
.RS
\f(CW
define py (y) { print "--->", y, "<---", "\n"; }
define void px (x) { print "--->", x, "<---", "\n"; }
py(1)
--->1<---
0
px(1)
--->1<---
\fR
.RE
.fi
Since \fBpy\fR aint a void function, tha call of \fBpy(1)\fR prints
the desired output n' then prints a second line dat is tha value of
the function. I aint talkin' bout chicken n' gravy biatch.  Since tha value of a gangbangin' function dat aint given an
explicit return statement is zero, tha zero is printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For \fBpx(1)\fR,
no zero is printed cuz tha function be a void function.
.PP
Also, call by variable fo' arrays was added. Y'all KNOW dat shit, muthafucka!  To declare
a call by variable array, tha declaration of tha array parameta up in the
function definizzle be lookin like "\fI*name\fB[]\fR".  Da call ta the
function remains tha same ol' dirty as call by value arrays. 
.SS MATH LIBRARY
If \fBbc\fR is invoked wit tha \fB-l\fR option, a math library is preloaded
and tha default scale is set ta 20.   Da math functions will calculate their
results ta tha scale set all up in tha time of they call.  
Da math library defines tha followin functions:
.IP "s (\fIx\fR)"
Da sine of x, x is up in radians.
.IP "c (\fIx\fR)"
Da cosine of x, x is up in radians.
.IP "a (\fIx\fR)"
Da arctangent of x, arctangent returns radians.
.IP "l (\fIx\fR)"
Da natural logarithm of x.
.IP "e (\fIx\fR)"
Da exponential function of raisin e ta tha value x.
.IP "j (\fIn,x\fR)"
Da Bessel function of integer order n of x.
.SS EXAMPLES
In /bin/sh,  tha followin will assign tha value of "pi" ta tha shell
variable \fBpi\fR.
.RS
\f(CW
pi=$(echo "scale=10; 4*a(1)" | bc -l)
\fR
.RE
.PP
Da followin is tha definizzle of tha exponential function used up in the
math library.  This function is freestyled up in POSIX \fBbc\fR.
.nf
.RS
\f(CW
scale = 20

/* Uses tha fact dat e^x = (e^(x/2))^2
   When x is lil' small-ass enough, we use tha series:
     e^x = 1 + x + x^2/2! + x^3/3! + ...
*/

define e(x) {
  auto  a, d, e, f, i, m, v, z

  /* Peep tha sign of x. */
  if (x<0) {
    m = 1
    x = -x
  } 

  /* Precondizzle x. */
  z = scale;
  scale = 4 + z + .44*x;
  while (x > 1) {
    f += 1;
    x /= 2;
  }

  /* Initialize tha variables. */
  v = 1+x
  a = x
  d = 1

  fo' (i=2; 1; i++) {
    e = (a *= x) / (d *= i)
    if (e == 0) {
      if (f>0) while (f--)  v = v*v;
      scale = z
      if (m) return (1/v);
      return (v/1);
    }
    v += e
  }
}
\fR
.RE
.fi
.PP
Da followin is code dat uses tha extended featurez of \fBbc\fR to
implement a simple program fo' calculatin checkbook balances.  This
program is dopest kept up in a gangbangin' file so dat it can be used nuff times 
without havin ta retype it at every last muthafuckin use.
.nf
.RS
\f(CW
scale=2
print "\enPeep book program!\en"
print "  Remember, deposits is wack transactions.\en"
print "  Exit by a 0 transaction.\en\en"

print "Initial balance, biatch? "; bal = read()
bal /= 1
print "\en"
while (1) {
  "current balizzle = "; bal
  "transaction, biatch? "; trans = read()
  if (trans == 0) break;
  bal -= trans
  bal /= 1
}
quit
\fR
.RE
.fi
.PP
Da followin is tha definizzle of tha recursive factorial function.
.nf
.RS
\f(CW
define f (x) {
  if (x <= 1) return (1);
  return (f(x-1) * x);
}
\fR
.RE
.fi
.SS READLINE AND LIBEDIT OPTIONS
GNU \fBbc\fR can be compiled (via a cold-ass lil configure option) ta use tha GNU
\fBreadline\fR input editor library or tha BSD \fBlibedit\fR library.
This allows tha user ta do editin of lines before bustin  them
to \fBbc\fR.  It also allows fo' a history of previous lines typed.
When dis option is selected, \fBbc\fR has one mo' special variable.
This special variable, \fBhistory\fR is tha number of linez of history
retained. Y'all KNOW dat shit, muthafucka!  For \fBreadline\fR, a value of -1 means dat a unlimited
number of history lines is retained. Y'all KNOW dat shit, muthafucka!  Settin tha value of
\fBhistory\fR ta a positizzle number restricts tha number of history
lines ta tha number given. I aint talkin' bout chicken n' gravy biatch.  Da value of 0 disablez tha history
feature.  Da default value is 100. For mo' shiznit, read the
user manuals fo' tha GNU \fBreadline\fR, \fBhistory\fR n' BSD \fBlibedit\fR
libraries. Put ya muthafuckin choppers up if ya feel dis!  One can not enable both \fBreadline\fR n' \fBlibedit\fR
at tha same time.
.SS DIFFERENCES
This version of 
.B bc
was implemented from tha POSIX P1003.2/D11 draft n' gotz nuff
several differences n' extensions relatizzle ta tha draft and
traditionizzle implementations.
It aint implemented up in tha traditionizzle way using
.I dc(1).
This version be a single process which parses n' runs a funky-ass byte code
translation of tha program.  There be a "undocumented" option (-c)
that causes tha program ta output tha byte code to
the standard output instead of hustlin dat shit.  Dat shiznit was mainly used for
debuggin tha parser n' preparin tha math library.
.PP
A major source of differences is
extensions, where a gangbangin' feature is extended ta add mo' functionalitizzle and
additions, where freshly smoked up features is added. Y'all KNOW dat shit, muthafucka! 
Da followin is tha list of differences n' extensions.
.IP "LANG environment"
This version do not conform ta tha POSIX standard up in tha processing
of tha LANG environment variable n' all environment variablez starting
with LC_.
.IP "names"
Traditionizzle n' POSIX
.B bc
have single letta names fo' functions, variablez n' arrays.  They have
been extended ta be multi-characta names dat start wit a letta and
may contain letters, numbers n' tha underscore character.
.IP "Strings"
Strings is not allowed ta contain NUL characters.  POSIX say all characters
must be included up in strings.
.IP "last"
POSIX \fBbc\fR aint gots a \fBlast\fR variable.  Some implementations
of \fBbc\fR use tha period (.) up in a similar way.  
.IP "comparisons"
POSIX \fBbc\fR allows comparisons only up in tha if statement, tha while
statement, n' tha second expression of tha fo' statement.  Also, only
one relationizzle operation be allowed up in each of dem statements.
.IP "if statement, else clause"
POSIX \fBbc\fR aint gots a else clause.
.IP "for statement"
POSIX \fBbc\fR requires all expressions ta be present up in tha fo' statement.
.IP "&&, ||, !"
POSIX \fBbc\fR aint gots tha logical operators.
.IP "read function"
POSIX \fBbc\fR aint gots a read function.
.IP "print statement"
POSIX \fBbc\fR aint gots a print statement .
.IP "continue statement"
POSIX \fBbc\fR aint gots a cold-ass lil continue statement.
.IP "return statement"
POSIX \fBbc\fR requires parentheses round tha return expression.
.IP "array parameters"
POSIX \fBbc\fR do not (currently) support array parametas up in full.
Da POSIX grammar allows fo' arrays up in function definitions yo, but do
not provide a method ta specify a array as a actual parameter n' shit.  (This
is most likely a oversight up in tha grammar.)  Traditionizzle implementations
of \fBbc\fR have only call by value array parameters.
.IP "function format"
POSIX \fBbc\fR requires tha openin brace on tha same line as tha 
\fBdefine\fR key word n' tha \fBauto\fR statement on tha next line.
.IP "=+, =-, =*, =/, =%, =^"
POSIX \fBbc\fR do not require these "old style" assignment operators to
be defined. Y'all KNOW dat shit, muthafucka!  This version may allow these "old style" assignments, n' you can put dat on yo' toast.  Use
the limits statement ta peep if tha installed version supports em.  If
it do support tha "old style" assignment operators, tha statement
"a =- 1" will decrement \fBa\fR by 1 instead of settin \fBa\fR ta the
value -1.
.IP "spaces up in numbers"
Other implementationz of \fBbc\fR allow spaces up in numbers.  For example,
"x=1 3" would assign tha value 13 ta tha variable x.  Da same statement
would cause a syntax error up in dis version of \fBbc\fR.
.IP "errors n' execution"
This implementation varies from other implementations up in termz of what
code is ghon be executed when syntax n' other errors is found up in the
program.  If a syntax error is found up in a gangbangin' function definition, error
recovery tries ta find tha beginnin of a statement n' continue to
parse tha function. I aint talkin' bout chicken n' gravy biatch.  Once a syntax error is found up in tha function, the
function aint gonna be callable n' becomes undefined.
Syntax errors up in tha interactizzle execution code will invalidate the
current execution block.  Da execution block is terminated by an
end of line dat appears afta a cold-ass lil complete sequence of statements.
For example, 
.nf
.RS
a = 1
b = 2
.RE
.fi
has two execution blocks and
.nf
.RS
{ a = 1
  b = 2 }
.RE
.fi
has one execution block.  Any runtime error will terminizzle tha execution
of tha current execution block.  A runtime warnin aint gonna terminizzle the
current execution block.
.IP "Interrupts"
Durin a interactizzle session, tha SIGINT signal (usually generated by
the control-C characta from tha terminal) will cause execution of the
current execution block ta be interrupted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  It will display a "runtime"
error indicatin which function was interrupted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Afta all runtime
structures done been cleaned up, a message is ghon be printed ta notify the
user dat \fBbc\fR is locked n loaded fo' mo' input.  All previously defined functions
remain defined n' tha value of all non-auto variablez is tha value at
the point of interruption. I aint talkin' bout chicken n' gravy biatch.  All auto variablez n' function parameters
are removed durin the
clean up process.  Durin a non-interactive
session, tha SIGINT signal will terminizzle tha entire run of \fBbc\fR.
.SS LIMITS
Da followin is tha limits currently up in place fo' dis 
.B bc
processor. Shiiit, dis aint no joke.  Some of dem may done been chizzled by a installation.
Use tha limits statement ta peep tha actual joints.
.IP "BC_BASE_MAX"
Da maximum output base is currently set at 999.  Da maximum input base
is 16.
.IP "BC_DIM_MAX"
This is currently a arbitrary limit of 65535 as distributed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Your
installation may be different.
.IP "BC_SCALE_MAX"
Da number of digits afta tha decimal point is limited ta INT_MAX digits.
Also, tha number of digits before tha decimal point is limited ta INT_MAX
digits.
.IP "BC_STRING_MAX"
Da limit on tha number of charactas up in a strang is INT_MAX characters.
.IP "exponent"
Da value of tha exponent up in tha raise operation (^) is limited ta LONG_MAX.
.IP "variable names"
Da current limit on tha number of unique names is 32767 fo' each of
simple variables, arrays n' functions.
.SH ENVIRONMENT VARIABLES
Da followin environment variablez is processed by \fBbc\fR:
.IP "POSIXLY_CORRECT"
This is tha same ol' dirty as tha \fB-s\fR option.
.IP "BC_ENV_ARGS"
This be another mechanizzle ta git arguments ta \fBbc\fR.  The
format is tha same ol' dirty as tha command line arguments, n' you can put dat on yo' toast.  These arguments
are processed first, so any filez listed up in tha environment arguments
are processed before any command line argument files.  This allows
the user ta set up "standard" options n' filez ta be processed
at every last muthafuckin invocation of \fBbc\fR.  Da filez up in tha environment
variablez would typically contain function definitions fo' functions
the user wants defined every last muthafuckin time \fBbc\fR is run.
.IP "BC_LINE_LENGTH"
This should be a integer specifyin tha number of charactas up in an
output line fo' numbers. This includes tha backslash n' newline characters
for long numbers.  As a extension, tha value of zero disablez tha 
multi-line feature.  Any other value of dis variable dat is less than
3 sets tha line length ta 70.
.SH DIAGNOSTICS
If any file on tha command line can not be opened, \fBbc\fR will report
that tha file is unavailable n' terminate.  Also, there be compile
and run time diagnostics dat should be self-explanatory.
.SH BUGS
Error recovery aint straight-up phat yet.
.PP
Email bug reports to
.BR bug-bc@gnu.org .
Be shizzle ta include tha word ``bc'' somewhere up in tha ``Subject:'' field.
.SH AUTHOR
.nf
Philip A. Nelson
philnelson@acm.org
.fi
.SH ACKNOWLEDGEMENTS
Da lyricist wanna give props ta Steve Sommars (Steve.Sommars@att.com) for
his extensive help up in testin tha implementation. I aint talkin' bout chicken n' gravy biatch.  Many pimped out suggestions
were given. I aint talkin' bout chicken n' gravy biatch.  This be a much betta thang cuz of his crazy-ass muthafuckin involvement.
