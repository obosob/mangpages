'\" t
.\"     Title: git-submodule
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-SUBMODULE" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-submodule \- Initialize, update or inspect submodules
.SH "SYNOPSIS"
.sp
.nf
\fIgit submodule\fR [\-\-quiet] add [\-b <branch>] [\-f|\-\-force] [\-\-name <name>]
              [\-\-reference <repository>] [\-\-depth <depth>] [\-\-] <repository> [<path>]
\fIgit submodule\fR [\-\-quiet] status [\-\-cached] [\-\-recursive] [\-\-] [<path>\&...]
\fIgit submodule\fR [\-\-quiet] init [\-\-] [<path>\&...]
\fIgit submodule\fR [\-\-quiet] deinit [\-f|\-\-force] [\-\-] <path>\&...
\fIgit submodule\fR [\-\-quiet] update [\-\-init] [\-\-remote] [\-N|\-\-no\-fetch]
              [\-f|\-\-force] [\-\-rebase] [\-\-reference <repository>] [\-\-depth <depth>]
              [\-\-merge] [\-\-recursive] [\-\-] [<path>\&...]
\fIgit submodule\fR [\-\-quiet] summary [\-\-cached|\-\-files] [(\-n|\-\-summary\-limit) <n>]
              [commit] [\-\-] [<path>\&...]
\fIgit submodule\fR [\-\-quiet] foreach [\-\-recursive] <command>
\fIgit submodule\fR [\-\-quiet] sync [\-\-] [<path>\&...]
.fi
.sp
.SH "DESCRIPTION"
.sp
Submodulez allow foreign repositories ta be embedded within a thugged-out dedicated subdirectory of tha source tree, always pointed at a particular commit\&.
.sp
They is not ta be trippin wit remotes, which is meant mainly fo' branchez of tha same project; submodulez is meant fo' different projects you wanna make part of yo' source tree, while tha history of tha two projects still stays straight-up independent n' you cannot modify tha contentz of tha submodule from within tha main project\&. If you wanna merge tha project histories n' wanna treat tha aggregated whole as a single project from then on, you may wanna add a remote fo' tha other project n' use tha \fIsubtree\fR merge game, instead of treatin tha other project as a submodule\&. Directories dat come from both projects can be cloned n' checked up as a whole if you chizzle ta go dat route\&.
.sp
Submodulez is composed from a so\-called gitlink tree entry up in tha main repository dat refers ta a particular commit object within tha inner repository dat is straight-up separate\& fo' realz. A record up in tha \&.gitmodulez (see \fBgitmodules\fR(5)) file all up in tha root of tha source tree assigns a logical name ta tha submodule n' raps bout tha default URL tha submodule shall be cloned from\&. Da logical name can be used fo' overridin dis URL within yo' local repository configuration (see \fIsubmodule init\fR)\&.
.sp
This command will manage tha tree entries n' contentz of tha gitmodulez file fo' you, as well as inspect tha statuz of yo' submodulez n' update them\&. When addin a freshly smoked up submodule ta tha tree, tha \fIadd\fR subcommand is ta be used\&. But fuck dat shiznit yo, tha word on tha street is dat when pullin a tree containin submodules, these aint gonna be checked up by default; tha \fIinit\fR n' \fIupdate\fR subcommandz will maintain submodulez checked up n' at appropriate revision up in yo' hustlin tree\&. Yo ass can briefly inspect tha up\-to\-date statuz of yo' submodulez rockin tha \fIstatus\fR subcommand n' git a thugged-out detailed overview of tha difference between tha index n' checkouts rockin tha \fIsummary\fR subcommand\&.
.SH "COMMANDS"
.PP
add
.RS 4
Add tha given repository as a submodule all up in tha given path ta tha chizzleset ta be committed next ta tha current project: tha current project is termed tha "superproject"\&.
.sp
This requires at least one argument: <repository>\&. Da optionizzle argument <path> is tha relatizzle location fo' tha cloned submodule ta exist up in tha superproject\&. If <path> aint given, tha "humanish" part of tha source repository is used ("repo" fo' "/path/to/repo\&.git" n' "foo" fo' "host\&.xz:foo/\&.git")\&. Da <path> be also used as tha submodule\(cqs logical name up in its configuration entries unless
\-\-name
is used ta specify a logical name\&.
.sp
<repository> is tha URL of tha freshly smoked up submodule\(cqs origin repository\&. This may be either a absolute URL, or (if it begins wit \&./ or \&.\&./), tha location relatizzle ta tha superproject\(cqs origin repository (Please note dat ta specify a repository
\fIfoo\&.git\fR
which is located right next ta a superproject
\fIbar\&.git\fR, you\(cqll gotta use
\fI\&.\&./foo\&.git\fR
instead of
\fI\&./foo\&.git\fR
\- as one might expect when followin tha rulez fo' relatizzle URLs \- cuz tha evaluation of relatizzle URLs up in Git is identical ta dat of relatizzle directories)\&. If tha superproject don\(cqt have a origin configured tha superproject is its own authoritatizzle upstream n' tha current hustlin directory is used instead\&.
.sp
<path> is tha relatizzle location fo' tha cloned submodule ta exist up in tha superproject\&. If <path> do not exist, then tha submodule is pimped by clonin from tha named URL\&. If <path> do exist n' be already a valid Git repository, then dis be added ta tha chizzleset without cloning\&. This second form is provided ta ease bustin a freshly smoked up submodule from scratch, n' presumes tha user will lata push tha submodule ta tha given URL\&.
.sp
In either case, tha given URL is recorded tha fuck into \&.gitmodulez fo' use by subsequent playas clonin tha superproject\&. If tha URL is given relatizzle ta tha superproject\(cqs repository, tha presumption is tha superproject n' submodule repositories is ghon be kept together up in tha same relatizzle location, n' only tha superproject\(cqs URL need ta be provided: git\-submodule will erectly locate tha submodule rockin tha relatizzle URL up in \&.gitmodules\&.
.RE
.PP
status
.RS 4
Show tha statuz of tha submodules\&. This will print tha SHA\-1 of tha currently checked up commit fo' each submodule, along wit tha submodule path n' tha output of
\fIgit describe\fR
for tha SHA\-1\&. Each SHA\-1 is ghon be prefixed with
\-
if tha submodule aint initialized,
+
if tha currently checked up submodule commit do not match tha SHA\-1 found up in tha index of tha containin repository and
U
if tha submodule has merge conflicts\&.
.sp
If
\-\-recursive
is specified, dis command will recurse tha fuck into nested submodules, n' show they status as well\&.
.sp
If yo ass is only horny bout chizzlez of tha currently initialized submodulez wit respect ta tha commit recorded up in tha index or tha HEAD,
\fBgit-status\fR(1)
and
\fBgit-diff\fR(1)
will provide dat shiznit too (and can also report chizzlez ta a submodule\(cqs work tree)\&.
.RE
.PP
init
.RS 4
Initialize tha submodulez recorded up in tha index (which was added n' committed elsewhere) by copyin submodule names n' urls from \&.gitmodulez ta \&.git/config\&. Optionizzle <path> arguments limit which submodulez is ghon be initialized\&. Well shiiiit, it will also copy tha value of
submodule\&.$name\&.update
into \&.git/config\&. Da key used up in \&.git/config is
submodule\&.$name\&.url\&. This command do not alta existin shiznit up in \&.git/config\&. Yo ass can then customize tha submodule clone URLs up in \&.git/config fo' yo' local setup n' proceed to
git submodule update; you can also just use
git submodule update \-\-init
without tha explicit
\fIinit\fR
step if you do not intend ta customize any submodule locations\&.
.RE
.PP
deinit
.RS 4
Unregista tha given submodules, i\&.e\&. remove tha whole
submodule\&.$name
section from \&.git/config together wit they work tree\&. Further calls to
git submodule update,
git submodule foreach
and
git submodule sync
will skip any unregistered submodulez until they is initialized again, so use dis command if you don\(cqt want ta git a local checkout of tha submodule up in yo' work tree no mo'\&. If you straight-up wanna remove a submodule from tha repository n' commit dat use
\fBgit-rm\fR(1)
instead\&.
.sp
If
\-\-force
is specified, tha submodule\(cqs work tree is ghon be removed even if it gotz nuff local modifications\&.
.RE
.PP
update
.RS 4
Update tha registered submodules, i\&.e\&. clone missin submodulez n' checkout tha commit specified up in tha index of tha containin repository\&. This will make tha submodulez HEAD be detached unless
\-\-rebase
or
\-\-merge
is specified or tha key
submodule\&.$name\&.update
is set to
rebase,
merge
or
none\&.
none
can be overridden by specifying
\-\-checkout\&. Right back up in yo muthafuckin ass. Settin tha key
submodule\&.$name\&.update
to
!command
will cause
command
to be run\&.
command
can be any arbitrary shell command dat takes a single argument, namely tha sha1 ta update to\&.
.sp
If tha submodule aint yet initialized, n' you just wanna use tha settin as stored up in \&.gitmodules, you can automatically initialize tha submodule wit the
\-\-init
option\&.
.sp
If
\-\-recursive
is specified, dis command will recurse tha fuck into tha registered submodules, n' update any nested submodulez within\&.
.sp
If
\-\-force
is specified, tha submodule is ghon be checked up (using
git checkout \-\-force
if appropriate), even if tha commit specified up in tha index of tha containin repository already matches tha commit checked up in tha submodule\&.
.RE
.PP
summary
.RS 4
Show commit summary between tha given commit (defaults ta HEAD) n' hustlin tree/index\&. For a submodule up in question, a seriez of commits up in tha submodule between tha given supa project commit n' tha index or hustlin tree (switched by
\-\-cached) is shown\&. If tha option
\-\-files
is given, show tha seriez of commits up in tha submodule between tha index of tha supa project n' tha hustlin tree of tha submodule (this option don\(cqt allow ta use the
\-\-cached
option or ta provide a explicit commit)\&.
.sp
Usin the
\-\-submodule=log
option with
\fBgit-diff\fR(1)
will provide dat shiznit too\&.
.RE
.PP
foreach
.RS 4
Evaluates a arbitrary shell command up in each checked up submodule\&. Da command has access ta tha variablez $name, $path, $sha1 n' $toplevel: $name is tha name of tha relevant submodule section up in \&.gitmodules, $path is tha name of tha submodule directory relatizzle ta tha superproject, $sha1 is tha commit as recorded up in tha superproject, n' $toplevel is tha absolute path ta tha top\-level of tha superproject\& fo' realz. Any submodulez defined up in tha superproject but not checked up is ignored by dis command\&. Unless given
\-\-quiet, foreach prints tha name of each submodule before evaluatin tha command\&. If
\-\-recursive
is given, submodulez is traversed recursively (i\&.e\&. tha given shell command is evaluated up in nested submodulez as well)\& fo' realz. A non\-zero return from tha command up in any submodule causes tha processin ta terminate\&. This can be overridden by adding
\fI|| :\fR
to tha end of tha command\&.
.sp
As a example,
git submodule foreach \(aqecho $path `git rev\-parse HEAD`\(aq
will show tha path n' currently checked up commit fo' each submodule\&.
.RE
.PP
sync
.RS 4
Synchronizes submodules\(aq remote URL configuration settin ta tha value specified up in \&.gitmodules\&. Well shiiiit, it will only affect dem submodulez which already gotz a URL entry up in \&.git/config (that is tha case when they is initialized or freshly added)\&. This is useful when submodule URLs chizzle upstream n' you need ta update yo' local repositories accordingly\&.
.sp
"git submodule sync" synchronizes all submodulez while "git submodule sync \-\- A" synchronizes submodule "A" only\&.
.RE
.SH "OPTIONS"
.PP
\-q, \-\-quiet
.RS 4
Only print error lyrics\&.
.RE
.PP
\-b, \-\-branch
.RS 4
Branch of repository ta add as submodule\&. Da name of tha branch is recorded as
submodule\&.<path>\&.branch
in
\&.gitmodules
for
update \-\-remote\&.
.RE
.PP
\-f, \-\-force
.RS 4
This option is only valid fo' add, deinit n' update commands\&. When hustlin add, allow addin a otherwise ignored submodule path\&. When hustlin deinit tha submodule work trees is ghon be removed even if they contain local chizzles\&. When hustlin update, throw away local chizzlez up in submodulez when switchin ta a gangbangin' finger-lickin' different commit; n' always run a cold-ass lil checkout operation up in tha submodule, even if tha commit listed up in tha index of tha containin repository matches tha commit checked up in tha submodule\&.
.RE
.PP
\-\-cached
.RS 4
This option is only valid fo' status n' summary commands\&. These commandz typically use tha commit found up in tha submodule HEAD yo, but wit dis option, tha commit stored up in tha index is used instead\&.
.RE
.PP
\-\-files
.RS 4
This option is only valid fo' tha summary command\&. This command compares tha commit up in tha index wit dat up in tha submodule HEAD when dis option is used\&.
.RE
.PP
\-n, \-\-summary\-limit
.RS 4
This option is only valid fo' tha summary command\&. Limit tha summary size (number of commits shown up in total)\&. Givin 0 will disable tha summary; a wack number means unlimited (the default)\&. This limit only applies ta modified submodules\&. Da size be always limited ta 1 fo' added/deleted/typechanged submodules\&.
.RE
.PP
\-\-remote
.RS 4
This option is only valid fo' tha update command\&. Instead of rockin tha superproject\(cqs recorded SHA\-1 ta update tha submodule, use tha statuz of tha submodule\(cqs remote\-trackin branch\&. Da remote used is branch\(cqs remote (branch\&.<name>\&.remote), defaultin to
origin\&. Da remote branch used defaults to
masta yo, but tha branch name may be overridden by settin the
submodule\&.<name>\&.branch
option up in either
\&.gitmodules
or
\&.git/config
(with
\&.git/config
takin precedence)\&.
.sp
This works fo' any of tha supported update procedures (\-\-checkout,
\-\-rebase, etc\&.)\&. Da only chizzle is tha source of tha target SHA\-1\&. For example,
submodule update \-\-remote \-\-merge
will merge upstream submodule chizzlez tha fuck into tha submodules, while
submodule update \-\-merge
will merge superproject gitlink chizzlez tha fuck into tha submodules\&.
.sp
In order ta ensure a cold-ass lil current trackin branch state,
update \-\-remote
fetches tha submodule\(cqs remote repository before calculatin tha SHA\-1\&. If you don\(cqt wanna fetch, you should use
submodule update \-\-remote \-\-no\-fetch\&.
.RE
.PP
\-N, \-\-no\-fetch
.RS 4
This option is only valid fo' tha update command\&. Don\(cqt fetch freshly smoked up objects from tha remote crib\&.
.RE
.PP
\-\-merge
.RS 4
This option is only valid fo' tha update command\&. Merge tha commit recorded up in tha superproject tha fuck into tha current branch of tha submodule\&. If dis option is given, tha submodule\(cqs HEAD aint gonna be detached\&. If a merge failure prevents dis process, yo big-ass booty is ghon gotta resolve tha resultin conflicts within tha submodule wit tha usual conflict resolution tools\&. If tha key
submodule\&.$name\&.update
is set to
merge, dis option is implicit\&.
.RE
.PP
\-\-rebase
.RS 4
This option is only valid fo' tha update command\&. Rebase tha current branch onto tha commit recorded up in tha superproject\&. If dis option is given, tha submodule\(cqs HEAD aint gonna be detached\&. If a merge failure prevents dis process, yo big-ass booty is ghon gotta resolve these failures with
\fBgit-rebase\fR(1)\&. If tha key
submodule\&.$name\&.update
is set to
rebase, dis option is implicit\&.
.RE
.PP
\-\-init
.RS 4
This option is only valid fo' tha update command\&. Initialize all submodulez fo' which "git submodule init" has not been called so far before updating\&.
.RE
.PP
\-\-name
.RS 4
This option is only valid fo' tha add command\&. Well shiiiit, it sets tha submodule\(cqs name ta tha given strang instead of defaultin ta its path\&. Da name must be valid as a gangbangin' finger-lickin' directory name n' may not end wit a
\fI/\fR\&.
.RE
.PP
\-\-reference <repository>
.RS 4
This option is only valid fo' add n' update commands\&. These commandz sometimes need ta clone a remote repository\&. In dis case, dis option is ghon be passed ta the
\fBgit-clone\fR(1)
command\&.
.sp
\fBNOTE\fR: Do
\fBnot\fR
use dis option unless you have read tha note for
\fBgit-clone\fR(1)\(aqs
\-\-reference
and
\-\-shared
options carefully\&.
.RE
.PP
\-\-recursive
.RS 4
This option is only valid fo' foreach, update n' status commands\&. Traverse submodulez recursively\&. Da operation is performed not only up in tha submodulez of tha current repo yo, but also up in any nested submodulez inside dem submodulez (and so on)\&.
.RE
.PP
\-\-depth
.RS 4
This option is valid fo' add n' update commands\&. Right back up in yo muthafuckin ass. Smoke a
\fIshallow\fR
clone wit a history truncated ta tha specified number of revisions\&. Right back up in yo muthafuckin ass. See
\fBgit-clone\fR(1)
.RE
.PP
<path>\&...
.RS 4
Paths ta submodule(s)\&. When specified dis will restrict tha command ta only operate on tha submodulez found all up in tha specified paths\&. (This argument is required wit add)\&.
.RE
.SH "FILES"
.sp
When initializin submodules, a \&.gitmodulez file up in tha top\-level directory of tha containin repository is used ta find tha url of each submodule\&. This file should be formatted up in tha same way as $GIT_DIR/config\&. Da key ta each submodule url is "submodule\&.$name\&.url"\&. Right back up in yo muthafuckin ass. See \fBgitmodules\fR(5) fo' details\&.
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
