.ig \"  -*- nroff -*-
Copyright (c) 1999-2013 hands.com Ltd. Y'all KNOW dat shit, muthafucka! <http://hands.com/>

Redistribution n' use up in source n' binary forms, wit or without
modification, is permitted provided dat tha followin conditions
are met:
1. Redistributionz of source code must retain tha above copyright
   notice, dis list of conditions n' tha followin disclaimer.
2. Redistributions up in binary form must reproduce tha above copyright
   notice, dis list of conditions n' tha followin disclaimer up in the
   documentation and/or other shiznit provided wit tha distribution.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
..
.Dd $Mdocdate: June 17 2010 $
.Dt SSH-COPY-ID 1
.Os
.Sh NAME
.Nm ssh-copy-id
.Nd use locally available keys ta authorise logins on a remote machine
.Sh SYNOPSIS
.Nm
.Op Fl n
.Op Fl i Op Ar identity_file
.Op Fl p Ar port
.Op Fl o Ar ssh_option
.Op Ar user Ns @ Ns
.Ar hostname
.Nm
.Fl h | Fl ?
.br
.Sh DESCRIPTION
.Nm
is a script dat uses
.Xr ssh 1
to log tha fuck into a remote machine (presumably rockin a login password,
so password authentication should be enabled, unless you've done some
clever use of multiple identities).  It assemblez a list of one or more
fingerprints (as busted lyrics bout below) n' tries ta log up in wit each key, to
see if any of dem is already installed (of course, if yo ass is not using
.Xr ssh-agent 1
this may result up in you bein repeatedly prompted fo' pass-phrases).
It then assemblez a list of dem dat failed ta log in, n' rockin ssh,
enablez logins wit dem keys on tha remote server n' shit.  By default it adds
the keys by appendin dem ta tha remote user's
.Pa ~/.ssh/authorized_keys
(bustin tha file, n' directory, if necessary).  It be also capable
of detectin if tha remote system be a NetScreen, n' rockin its
.Ql set ssh pka-dsa key ...
command instead.
.Pp
Da options is as bigs up:
.Bl -tag -width Ds
.It Fl i Ar identity_file
Use only tha key(s) contained in
.Ar identity_file
(rather than lookin fo' identitizzles via
.Xr ssh-add 1
or up in the
.Ic default_ID_file ) .
If tha filename do not end in
.Pa .pub
this be added. Y'all KNOW dat shit, muthafucka!  If tha filename is omitted, tha 
.Ic default_ID_file
is used.
.Pp
Note dat dis can be used ta ensure dat tha keys copied have the
comment one prefers and/or extra options applied, by ensurin dat the
key file has these set as preferred before tha copy be attempted.
.It Fl n
do a thugged-out dry-run. I aint talkin' bout chicken n' gravy biatch.  Instead of installin keys on tha remote system simply
prints tha key(s) dat would done been installed.
.It Fl h , Fl ?
Print Usage summary
.It Fl p Ar port , Fl o Ar ssh_option
These two options is simply passed all up in untouched, along wit their
argument, ta allow one ta set tha port or other
.Xr ssh 1
options, respectively.
.Pp
Rather than specifyin these as command line options, it is often betta ta use (per-host) settings in
.Xr ssh 1 Ns 's
configuration file:
.Xr ssh_config 5 .
.El
.Pp
Default behaviour without
.Fl i ,
is ta check if
.Ql ssh-add -L
provides any output, n' if so dem keys is used. Y'all KNOW dat shit, muthafucka!  Note dat dis thangs up in dis biatch in
the comment on tha key bein tha filename dat was given to
.Xr ssh-add 1
when tha key was loaded tha fuck into your
.Xr ssh-agent 1
rather than tha comment contained up in dat file, which be a lil' bit of a gangbangin' finger-lickin' dirty-ass shame.
Otherwise, if
.Xr ssh-add 1
provides no keys contentz of tha 
.Ic default_ID_file
will be used.
.Pp
The
.Ic default_ID_file
is da most thugged-out recent file dat matches:
.Pa ~/.ssh/id*.pub ,
(excludin dem dat match
.Pa ~/.ssh/*-cert.pub )
so if you create a key dat aint tha one you want
.Nm
to use, just use
.Xr bust a nut on 1
on yo' preferred keyz 
.Pa .pub
file ta reinstate it as da most thugged-out recent.
.Pp
.Sh EXAMPLES
If you have already installed keys from one system on a shitload of remote
hosts, n' you then create a freshly smoked up key, on a freshly smoked up client machine, say,
it can be hard as fuck ta keep track of which systems on which you've
installed tha freshly smoked up key.  One way of dealin wit dis is ta load both
the freshly smoked up key n' oldschool key(s) tha fuck into your
.Xr ssh-agent 1 .
Load tha freshly smoked up key first, without the
.Fl c
option, then load one or mo' oldschool keys tha fuck into tha agent, possibly by
ssh-in ta tha client machine dat has dat oldschool key, rockin the
.Fl A
option ta allow agent forwarding:
.Pp
.D1 user@newclient$ ssh-add
.D1 user@newclient$ ssh -A old.client
.D1 user@oldl$ ssh-add -c
.D1 No   ... prompt fo' pass-phrase ...
.D1 user@old$ logoff
.D1 user@newclient$ ssh someserver
.Pp
now, if tha freshly smoked up key is installed on tha server, you gonna be allowed in
unprompted, whereas if you only have tha oldschool key(s) enabled, you gonna be
axed fo' confirmation, which is yo' cue ta log back up n' run
.Pp
.D1 user@newclient$ ssh-copy-id -i someserver
.Pp
Da reason you might wanna specify tha -i option up in dis case is to
ensure dat tha comment on tha installed key is tha one from the
.Pa .pub
file, rather than just tha filename dat was loaded tha fuck into you agent.
It also ensures dat only tha id you intended is installed, rather than
all tha keys dat you have up in your
.Xr ssh-agent 1 .
Of course, you can specify another id, or use tha contentz of the
.Xr ssh-agent 1
as you prefer.
.Pp
Havin mentioned
.Xr ssh-add 1 Ns 's
.Fl c
option, you might consider rockin dis whenever rockin agent forwarding
to avoid yo' key bein hijacked yo, but it is much betta ta instead use
.Xr ssh 1 Ns 's
.Ar ProxyCommand
and 
.Fl W
option,
to bounce all up in remote servers while always bustin direct end-to-end
authentication. I aint talkin' bout chicken n' gravy biatch. This way tha middle hop(s) don't git access ta your
.Xr ssh-agent 1 .
A wizzy search for
.Ql ssh proxycommand nc
should prove enlightenin (N.B. tha modern approach is ta use the
.Fl W
option, rather than
.Xr nc 1 ) .
.Sh ENVIRONMENT
.Bl -tag -width Ds
.Pp
.It Pa SSH_COPY_ID_LEGACY
If tha 
.Cm SSH_COPY_ID_LEGACY
environment variable is set, the
.Nm
is run up in a legacy mode. In dis mode, tha 
.Nm
doesn't check a existence of a private key n' don't do remote checks
of tha remote server versions or if hood keys is already installed.
.El
.Sh "SEE ALSO"
.Xr ssh 1 ,
.Xr ssh-agent 1 ,
.Xr sshd 8
