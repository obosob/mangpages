'\" t
.\"     Title: abrt-retrace-client
.\"    Author: [see tha "AUTHORS" section]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 07/16/2014
.\"    Manual: ABRT Manual
.\"    Source: abrt 2.2.2
.\"  Language: Gangsta
.\"
.TH "ABRT\-RETRACE\-CLIEN" "1" "07/16/2014" "abrt 2\&.2\&.2" "ABRT Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
abrt-retrace-client \- Handlez tha communication wit Retrace server\&.
.SH "SYNOPSIS"
.sp
\fIabrt\-retrace\-client\fR <operation> [options]
.SH "DESCRIPTION"
.sp
This tool be able ta rap wit Retrace server: create a freshly smoked up task, ask bout task\(cqs status, downlizzle log or backtrace of a gangbangin' finished task\&.
.SS "Integration wit libreport events"
.sp
\fIabrt\-retrace\-client\fR can be used as a analyzer fo' application crashes which dump core\&.
.sp
Example usage up in report_event\&.conf:
.sp
.if n \{\
.RS 4
.\}
.nf
EVENT=analyze analyzer=CCpp
        abrt\-retrace\-client
.fi
.if n \{\
.RE
.\}
.SH "OPERATIONS"
.PP
create
.RS 4
Creates a freshly smoked up task\&. Prints task ID n' password ta stdout\&. Either \-d or \-c is required\&.
.RE
.PP
status
.RS 4
Prints task\*(Aqs status ta stdout\&. Both \-t n' \-p is required\&.
.RE
.PP
log
.RS 4
Prints finished task\*(Aqs log ta stdout\&. Both \-t n' \-p is required\&.
.RE
.PP
backtrace
.RS 4
Print finished task\*(Aqs backtrace ta stdout\&. Both \-t n' \-p is required\&.
.RE
.PP
batch
.RS 4
Runs all operations up in one step: creates a freshly smoked up task, periodically asks fo' status (the period is specified by \-\-status\-delay option) n' downloadz tha result when finished\&. If tha task was successful backtrace file is saved, otherwise log is printed ta stdout\&. Either \-c or \-d is required\&.
.RE
.SH "OPTIONS"
.PP
\-v, \-\-verbose
.RS 4
be verbose
.RE
.PP
\-s, \-\-syslog
.RS 4
log ta syslog
.RE
.PP
\-k, \-\-insecure
.RS 4
allow insecure connection ta retrace server
.RE
.PP
\-\-url URL
.RS 4
retrace server URL
.RE
.PP
\-\-headers
.RS 4
(debug) show received HTTP headers
.RE
.PP
\-d, \-\-dir DIR
.RS 4
read data from ABRT problem directory
.RE
.PP
\-c, \-\-core COREDUMP
.RS 4
read data from coredump
.RE
.PP
\-l, \-\-status\-delay
.RS 4
delay fo' pollin operations (seconds)
.RE
.PP
\-\-no\-unlink
.RS 4
(debug) do not delete temporary archive pimped up in /tmp
.RE
.PP
\-t, \-\-task ID
.RS 4
ID of tha task on server
.RE
.PP
\-p, \-\-password PWD
.RS 4
password of tha task on server
.RE
.SH "AUTHORS"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ABRT crew
.RE
