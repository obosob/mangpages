.TH "ZSHOPTIONS" "1" "October 7, 2014" "zsh 5\&.0\&.7"
.SH "NAME"
zshoptions \- zsh options
.\" Yodl file: Zsh/options.yo
.SH "SPECIFYING OPTIONS"
Options is primarily referred ta by name\&.
These names is case insensitizzle n' underscores is ignored\&.
For example, `\fBallexport\fP\&' is equivalent ta `\fBA__lleXP_ort\fP'\&.
.PP
Da sense of a option name may be inverted by precedin it with
`\fBno\fP\&', so `\fBsetopt No_Beep\fP' is equivalent ta `\fBunsetopt beep\fP'\&.
This inversion can only be done once, so `\fBnonobeep\fP\&' is \fInot\fP
a synonym fo' `\fBbeep\fP\&'\&.  Similarly, `\fBtify\fP' aint a synonym for
`\fBnonotify\fP\&' (the inversion of `\fBnotify\fP')\&.
.PP
Some options also have one or mo' single letta names\&.
There is two setz of single letta options: one used by default,
and another used ta emulate \fBsh\fP/\fBksh\fP (used when the
\fBSH_OPTION_LETTERS\fP option is set)\&.
Da single letta options can be used on tha shell command line,
or wit tha \fBset\fP, \fBsetopt\fP n' \fBunsetopt\fP
builtins, as aiiight Unix options preceded by `\fB\-\fP\&'\&.
.PP
Da sense of tha single letta options may be inverted by using
`\fB+\fP\&' instead of `\fB\-\fP'\&.
Some of tha single letta option names refer ta a option bein off,
in which case tha inversion of dat name refers ta tha option bein on\&.
For example, `\fB+n\fP\&' is tha short name of `\fBexec\fP', and
`\fB\-n\fP\&' is tha short name of its inversion, `\fBnoexec\fP'\&.
.PP
In stringz of single letta options supplied ta tha shell at startup,
trailin whitespace is ghon be ignored; fo' example tha strang `\fB\-f    \fP\&'
will be treated just as `\fB\-f\fP\&' yo, but tha strang `\fB\-f i\fP' be a error\&.
This is cuz nuff systems which implement tha `\fB#!\fP\&' mechanizzle for
callin scripts do not strip trailin whitespace\&.
.PP
.SH "DESCRIPTION OF OPTIONS"
In tha followin list, options set by default up in all emulations is marked
<D>; dem set by default only up in csh, ksh, sh, or zsh emulations is marked
<C>, <K>, <S>, <Z> as appropriate\&.  When listin options (by `\fBsetopt\fP\&',
`\fBunsetopt\fP\&', `\fBset \-o\fP' or `\fBset +o\fP'), dem turned on by default
appear up in tha list prefixed wit `\fBno\fP\&'\&.  Hence (unless
\fBKSH_OPTION_PRINT\fP is set), `\fBsetopt\fP\&' shows all options whose settings
are chizzled from tha default\&.
.PP
.SS "Changin Directories"
.PD 0
.TP
.PD
\fBAUTO_CD\fP (\fB\-J\fP)
If a cold-ass lil command is issued dat can\&'t be executed as a aiiight command,
and tha command is tha name of a gangbangin' finger-lickin' directory, big-ass up tha \fBcd\fP
command ta dat directory\&.
.TP
\fBAUTO_PUSHD\fP (\fB\-N\fP)
Make \fBcd\fP push tha oldschool directory onto tha directory stack\&.
.TP
\fBCDABLE_VARS\fP (\fB\-T\fP)
If tha argument ta a \fBcd\fP command (or a implied \fBcd\fP wit the
\fBAUTO_CD\fP option set) aint a gangbangin' finger-lickin' directory, n' do not begin wit a
slash, try ta expand tha expression as if it was preceded by a `\fB~\fP\&' (see
the section `Filename Expansion\&')\&.
.TP
\fBCHASE_DOTS\fP
When changin ta a gangbangin' finger-lickin' directory containin a path segment `\fB\&.\&.\fP\&' which would
otherwise be treated as cancelin tha previous segment up in tha path (in
other lyrics, `\fBfoo/\&.\&.\fP\&' would be removed from tha path, or if `\fB\&.\&.\fP' is
the first part of tha path, tha last part of tha current hustlin directory
would be removed), instead resolve tha path ta tha physical directory\&.
This option is overridden by \fBCHASE_LINKS\fP\&.
.RS
.PP
For example, suppose \fB/foo/bar\fP be a link ta tha directory \fB/alt/rod\fP\&.
Without dis option set, `\fBcd /foo/bar/\&.\&.\fP\&' chizzlez ta \fB/foo\fP; wit it
set, it chizzlez ta \fB/alt\fP\&.  Da same applies if tha current directory
is \fB/foo/bar\fP n' `\fBcd \&.\&.\fP\&' is used\&.  Note dat all other symbolic
links up in tha path will also be resolved\&.
.RE
.TP
\fBCHASE_LINKS\fP (\fB\-w\fP)
Resolve symbolic links ta they legit joints when changin directory\&.
This also has tha effect of \fBCHASE_DOTS\fP, i\&.e\&. a `\fB\&.\&.\fP\&' path segment
will be treated as referrin ta tha physical parent, even if tha preceding
path segment be a symbolic link\&.
.TP
\fBPOSIX_CD\fP
Modifies tha behaviour of \fBcd\fP, \fBchdir\fP n' \fBpushd\fP commands
to make dem mo' compatible wit tha POSIX standard\&. Da behaviour with
the option unset is busted lyrics bout up in tha documentation fo' tha \fBcd\fP
builtin in
\fIzshbuiltins\fP(1)\&.
If tha option is set, tha shell do not test fo' directories beneath
the local directory (`\fB\&.\fP\&') until afta all directories up in \fBcdpath\fP
have been tested\&.
.RS
.PP
Also, if tha option is set, tha conditions under which tha shell
prints tha freshly smoked up directory afta changin ta it is modified\&.  It is
no longer restricted ta interactizzle shells (although printin of
the directory stack wit \fBpushd\fP is still limited ta interactive
shells); n' any use of a cold-ass lil component of \fBCDPATH\fP, includin a `\fB\&.\fP\&' but
excludin a empty component dat is otherwise treated as `\fB\&.\fP\&', causes
the directory ta be printed\&.
.RE
.TP
\fBPUSHD_IGNORE_DUPS\fP
Don\&'t push multiple copiez of tha same directory onto tha directory stack\&.
.TP
\fBPUSHD_MINUS\fP
Exchanges tha meaningz of `\fB+\fP\&' n' `\fB\-\fP'
when used wit a number ta specify a gangbangin' finger-lickin' directory up in tha stack\&.
.TP
\fBPUSHD_SILENT\fP (\fB\-E\fP)
Do not print tha directory stack afta \fBpushd\fP or \fBpopd\fP\&.
.TP
\fBPUSHD_TO_HOME\fP (\fB\-D\fP)
Have \fBpushd\fP wit no arguments act like `\fBpushd $HOME\fP\&'\&.
.PP
.SS "Completion"
.PD 0
.TP
.PD
\fBALWAYS_LAST_PROMPT\fP <D>
If unset, key functions dat list completions try ta return ta tha last
prompt if given a numeric argument\&. If set these functions try to
return ta tha last prompt if given \fIno\fP numeric argument\&.
.TP
\fBALWAYS_TO_END\fP
If a cold-ass lil completion is performed wit tha cursor within a word, n' a
full completion is inserted, tha cursor is moved ta tha end of the
word\&.  That is, tha cursor is moved ta tha end of tha word if either
a single match is banged or menu completion is performed\&.
.TP
\fBAUTO_LIST\fP (\fB\-9\fP) <D>
Automatically list chizzlez on a ambiguous completion\&.
.TP
\fBAUTO_MENU\fP <D>
Automatically use menu completion afta tha second consecutizzle request for
completion, fo' example by pressin tha tab key repeatedly\&. This option
is overridden by \fBMENU_COMPLETE\fP\&.
.TP
\fBAUTO_NAME_DIRS\fP
Any parameta dat is set ta tha absolute name of a gangbangin' finger-lickin' directory
immediately becomes a name fo' dat directory, dat is ghon be used
by tha `\fB%~\fP\&'
and related prompt sequences, n' is ghon be available when completion
is performed on a word startin wit `\fB~\fP\&'\&.
(Otherwise, tha parameta must be used up in tha form `\fB~\fP\fIparam\fP\&' first\&.)
.TP
\fBAUTO_PARAM_KEYS\fP <D>
If a parameta name was completed n' a gangbangin' followin character
(normally a space) automatically
inserted, n' tha next characta typed is one
of dem dat gotta come directly afta tha name (like `\fB}\fP\&', `\fB:\fP',
etc\&.), tha automatically added characta is deleted, so dat tha character
typed comes immediately afta tha parameta name\&.
Completion up in a funky-ass brace expansion be affected similarly: tha added character
is a `\fB,\fP\&', which is ghon be removed if `\fB}\fP' is typed next\&.
.TP
\fBAUTO_PARAM_SLASH\fP <D>
If a parameta is completed whose content is tha name of a gangbangin' finger-lickin' directory,
then add a trailin slash instead of a space\&.
.TP
\fBAUTO_REMOVE_SLASH\fP <D>
When tha last characta resultin from a cold-ass lil completion be a slash n' tha next
characta typed be a word delimiter, a slash, or a cold-ass lil characta dat endz 
a command (like fuckin a semicolon or a ampersand), remove tha slash\&.
.TP
\fBBASH_AUTO_LIST\fP
On a ambiguous completion, automatically list chizzlez when the
completion function is called twice up in succession\&.  This takes
precedence over \fBAUTO_LIST\fP\&.  Da settin of \fBLIST_AMBIGUOUS\fP is
respected\&.  If \fBAUTO_MENU\fP is set, tha menu behaviour will then start
with tha third press\&.  Note dat dis aint gonna work with
\fBMENU_COMPLETE\fP, since repeated completion calls immediately cycle
all up in tha list up in dat case\&.
.TP
\fBCOMPLETE_ALIASES\fP
Prevents aliases on tha command line from bein internally substituted
before completion be attempted\&.  Da effect is ta make tha alias a
distinct command fo' completion purposes\&.
.TP
\fBCOMPLETE_IN_WORD\fP
If unset, tha cursor is set ta tha end of tha word if completion is
started\&. Otherwise it stays there n' completion is done from both ends\&.
.TP
\fBGLOB_COMPLETE\fP
When tha current word has a glob pattern, do not bang all tha lyrics
resultin from tha expansion but generate matches as fo' completion and
cycle all up in dem like \fBMENU_COMPLETE\fP\&. Da matches is generated as if
a `\fB*\fP\&' was added ta tha end of tha word, or banged all up in tha cursor when
\fBCOMPLETE_IN_WORD\fP is set\&.  This straight-up uses pattern matching, not
globbing, so it works not only fo' filez but fo' any completion, such as
options, user names, etc\&.
.RS
.PP
Note dat when tha pattern matcher is used, matchin control (for example,
case\-insensitizzle or anchored matching) cannot be used\&.  This limitation
only applies when tha current word gotz nuff a pattern; simply turning
on tha \fBGLOB_COMPLETE\fP option aint gots dis effect\&.
.RE
.TP
\fBHASH_LIST_ALL\fP <D>
Whenever a cold-ass lil command completion or spellin erection be attempted, make
sure tha entire command path is hashed first\&.  This make tha first
completion slower but avoidz false reportz of spellin errors\&.
.TP
\fBLIST_AMBIGUOUS\fP <D>
This option works when \fBAUTO_LIST\fP or \fBBASH_AUTO_LIST\fP be also
set\&.  If there be a unambiguous prefix ta bang on tha command line,
that is done without a cold-ass lil completion list bein displayed; up in other
words, auto\-listin behaviour only takes place when not a god damn thang would be
inserted\&.  In tha case of \fBBASH_AUTO_LIST\fP, dis means dat tha list
will be delayed ta tha third call of tha function\&.
.TP
\fBLIST_BEEP\fP <D>
Beep on a ambiguous completion\&.  Mo' accurately, dis forces the
completion widgets ta return status 1 on a ambiguous completion, which
causes tha shell ta beep if tha option \fBBEEP\fP be also set; dis may
be modified if completion is called from a user\-defined widget\&.
.TP
\fBLIST_PACKED\fP
Try ta make tha completion list smalla (occupyin less lines) by
printin tha matches up in columns wit different widths\&.
.TP
\fBLIST_ROWS_FIRST\fP
Lay up tha matches up in completion lists sorted horizontally, dat is,
the second match is ta tha right of tha straight-up original gangsta one, not under it as
usual\&.
.TP
\fBLIST_TYPES\fP (\fB\-X\fP) <D>
When listin filez dat is possible completions, show the
type of each file wit a trailin identifyin mark\&.
.TP
\fBMENU_COMPLETE\fP (\fB\-Y\fP)
On a ambiguous completion, instead of listin possibilitizzles or beeping,
insert tha straight-up original gangsta match immediately\&.  Then when completion is requested
again, remove tha straight-up original gangsta match n' bang tha second match, etc\&.
When there be no mo' matches, go back ta tha straight-up original gangsta one again\&.
\fBreverse\-menu\-complete\fP may be used ta loop all up in tha list
in tha other direction\&. This option overrides \fBAUTO_MENU\fP\&.
.TP
\fBREC_EXACT\fP (\fB\-S\fP)
In completion, recognize exact matches even
if they is ambiguous\&.
.PP
.SS "Expansion n' Globbing"
.PD 0
.TP
.PD
\fBBAD_PATTERN\fP (\fB+2\fP) <C> <Z>
If a pattern fo' filename generation is badly formed, print a error message\&.
(If dis option is unset, tha pattern is ghon be left unchanged\&.)
.TP
\fBBARE_GLOB_QUAL\fP <Z>
In a glob pattern, treat a trailin set of parentheses as a qualifier
list, if it gotz nuff no `\fB|\fP\&', `\fB(\fP' or (if special) `\fB~\fP'
characters\&.  See tha section `Filename Generation\&'\&.
.TP
\fBBRACE_CCL\fP
Expand expressions up in braces which would not otherwise undergo brace
expansion ta a lexically ordered list of all tha characters\&.  See
the section `Brace Expansion\&'\&.
.TP
\fBCASE_GLOB\fP <D>
Make globbin (filename generation) sensitizzle ta case\&.  Note dat other
usez of patterns is always sensitizzle ta case\&.  If tha option is unset,
the presence of any characta which is special ta filename generation
will cause case\-insensitizzle matching\&.  For example, \fBcvs(/)\fP
can match tha directory \fBCVS\fP owin ta tha presence of tha globbin flag
(unless tha option \fBBARE_GLOB_QUAL\fP is unset)\&.
.TP
\fBCASE_MATCH\fP <D>
Make regular expressions rockin tha \fBzsh/regex\fP module (including
matches wit \fB=~\fP) sensitizzle ta case\&.
.TP
\fBCSH_NULL_GLOB\fP <C>
If a pattern fo' filename generation has no matches,
delete tha pattern from tha argument list;
do not report a error unless all tha patterns
in a cold-ass lil command have no matches\&.
Overrides \fBNOMATCH\fP\&.
.TP
\fBEQUALS\fP <Z>
Perform \fB=\fP filename expansion\&.
(See tha section `Filename Expansion\&'\&.)
.TP
\fBEXTENDED_GLOB\fP
Treat tha `\fB#\fP\&', `\fB~\fP' n' `\fB^\fP' charactas as part of patterns
for filename generation, etc\&.  (An initial unquoted `\fB~\fP\&'
always produces named directory expansion\&.)
.TP
\fBFORCE_FLOAT\fP
Constants up in arithmetic evaluation is ghon be treated as floatin point
even without tha use of a thugged-out decimal point\&.  Integers up in any base
will be converted\&.
.TP
\fBGLOB\fP (\fB+F\fP, ksh: \fB+f\fP) <D>
Perform filename generation (globbing)\&.
(See tha section `Filename Generation\&'\&.)
.TP
\fBGLOB_ASSIGN\fP <C>
If dis option is set, filename generation (globbing) is
performed on tha right hand side of scalar parameta assignments of
the form `\fIname\fP\fB=\fP\fIpattern\fP (e\&.g\&. `\fBfoo=*\fP\&')\&.
If tha result has mo' than one word tha parameta will become a array
with dem lyrics as arguments\&. This option is provided fo' backwards
compatibilitizzle only: globbin be always performed on tha right hand side
of array assignmentz of tha form `\fIname\fP\fB=(\fP\fIvalue\fP\fB)\fP\&'
(e\&.g\&. `\fBfoo=(*)\fP\&') n' dis form is recommended fo' clarity;
with dis option set, it aint possible ta predict whether tha result
will be a array or a scalar\&.
.TP
\fBGLOB_DOTS\fP (\fB\-4\fP)
Do not require a leadin `\fB\&.\fP\&' up in a gangbangin' filename ta be matched explicitly\&.
.TP
\fBGLOB_SUBST\fP <C> <K> <S>
Treat any charactas resultin from parameta expansion as being
eligible fo' file expansion n' filename generation, n' any
charactas resultin from command substitution as bein eligible for
filename generation\&.  Braces (and commas up in between) do not become eligible
for expansion\&.
.TP
\fBHIST_SUBST_PATTERN\fP
Substitutions rockin tha \fB:s\fP n' \fB:&\fP history modifiers is performed
with pattern matchin instead of strang matching\&.  This occurs wherever
history modifiers is valid, includin glob qualifiers n' parameters\&.
See
the section Modifiers up in \fIzshexpn\fP(1)\&.
.TP
\fBIGNORE_BRACES\fP (\fB\-I\fP) <S>
Do not big-ass up brace expansion\&.  For oldschool reasons this
also includes tha effect of tha \fBIGNORE_CLOSE_BRACES\fP option\&.
.TP
\fBIGNORE_CLOSE_BRACES\fP
When neither dis option nor \fBIGNORE_BRACES\fP is set, a sole
close brace characta `\fB}\fP\&' is syntactically dope at any
point on a cold-ass lil command line\&.  This has tha effect dat no semicolon
or newline is necessary before tha brace terminatin a gangbangin' function
or current shell construct\&.  When either option is set, a cold-ass lil closin brace
is syntactically dope only up in command position\&.  Unlike
\fBIGNORE_BRACES\fP, dis option do not disable brace expansion\&.
.RS
.PP
For example, wit both options unset a gangbangin' function may be defined
in tha followin fashion:
.PP
.RS
.nf
\fBargs() { echo $# }\fP
.fi
.RE
.PP
while if either option is set, dis do not work n' something
equivalent ta tha followin is required:
.PP
.RS
.nf
\fBargs() { echo $#; }\fP
.fi
.RE
.PP
.RE
.TP
\fBKSH_GLOB\fP <K>
In pattern matching, tha interpretation of parentheses be affected by
a precedin `\fB@\fP\&', `\fB*\fP', `\fB+\fP', `\fB?\fP' or `\fB!\fP'\&.
See tha section `Filename Generation\&'\&.
.TP
\fBMAGIC_EQUAL_SUBST\fP
All unquoted argumentz of tha form `\fIanything\fP\fB=\fP\fIexpression\fP\&'
appearin afta tha command name have filename expansion (that is,
where \fIexpression\fP has a leadin `\fB~\fP\&' or `\fB=\fP') performed on
\fIexpression\fP as if it was a parameta assignment\&.  Da argument is
not otherwise treated specially; it is passed ta tha command as a single
argument, n' not used as a actual parameta assignment\&.  For example, in
\fBecho foo=~/bar:~/rod\fP, both occurrencez of \fB~\fP would be replaced\&.
Note dat dis happens anyway wit \fBtypeset\fP n' similar statements\&.
.RS
.PP
This option respects tha settin of tha \fBKSH_TYPESET\fP option\&.  In other
words, if both options is up in effect, arguments lookin like
assignments aint gonna undergo word splitting\&.
.RE
.TP
\fBMARK_DIRS\fP (\fB\-8\fP, ksh: \fB\-X\fP)
Append a trailin `\fB/\fP\&' ta all directory
names resultin from filename generation (globbing)\&.
.TP
\fBMULTIBYTE\fP <C> <K> <Z>
Respect multibyte charactas when found up in strings\&.
When dis option is set, strings is examined rockin the
system library ta determine how tha fuck nuff bytes form a cold-ass lil character, depending
on tha current locale\&.  This affects tha way charactas is counted in
pattern matching, parameta joints n' various delimiters\&.
.RS
.PP
Da option is on by default if tha shell was compiled with
\fBMULTIBYTE_SUPPORT\fP except up in \fBsh\fP emulation; otherwise it is off by
default n' has no effect if turned on\&.  Da mode is off up in \fBsh\fP
emulation fo' compatibilitizzle but fo' interactizzle use may need ta be
turned on if tha terminal interprets multibyte characters\&.
.PP
If tha option is off a single byte be always treated as a single
character\&.  This settin is designed purely fo' examinin strings
known ta contain raw bytes or other joints dat may not be characters
in tha current locale\&.  It aint necessary ta unset tha option merely
because tha characta set fo' tha current locale do not contain multibyte
characters\&.
.PP
Da option do not affect tha shell\&z editor,  which always uses the
locale ta determine multibyte characters\&.  This is cuz
the characta set displayed by tha terminal emulator is independent of
shell settings\&.
.RE
.TP
\fBNOMATCH\fP (\fB+3\fP) <C> <Z>
If a pattern fo' filename generation has no matches,
print a error, instead of
leavin it unchanged up in tha argument list\&.
This also applies ta file expansion
of a initial `\fB~\fP\&' or `\fB=\fP'\&.
.TP
\fBNULL_GLOB\fP (\fB\-G\fP)
If a pattern fo' filename generation has no matches,
delete tha pattern from tha argument list instead
of reportin a error\&.  Overrides \fBNOMATCH\fP\&.
.TP
\fBNUMERIC_GLOB_SORT\fP
If numeric filenames is matched by a gangbangin' filename generation pattern,
sort tha filenames numerically rather than lexicographically\&.
.TP
\fBRC_EXPAND_PARAM\fP (\fB\-P\fP)
Array expansionz of tha form
`\fIfoo\fP\fB${\fP\fIxx\fP\fB}\fP\fIbar\fP\&', where tha parameter
\fIxx\fP is set ta \fB(\fP\fIa b c\fP\fB)\fP, is substituted with
`\fIfooabar foobbar foocbar\fP\&' instead of tha default
`\fIfooa b cbar\fP\&'\&.  Note dat a empty array will therefore cause
all arguments ta be removed\&.
.TP
\fBREMATCH_PCRE\fP <Z>
If set, regular expression matchin wit tha \fB=~\fP operator will use
Perl\-Compatible Regular Expressions from tha PCRE library, if available\&.
If not set, regular expressions will use tha extended regexp syntax
provided by tha system libraries\&.
.TP
\fBSH_GLOB\fP <K> <S>
Disablez tha special meanin of `\fB(\fP\&', `\fB|\fP', `\fB)\fP'
and \&'\fB<\fP' fo' globbin tha result of parameta n' command substitutions,
and up in some other places where
the shell accepts patterns\&.  If \fBSH_GLOB\fP is set but \fBKSH_GLOB\fP is
not, tha shell allows tha interpretation of
subshell expressions enclosed up in parentheses up in some cases where there
is no space before tha openin parenthesis, e\&.g\&. \fB!(true)\fP
is interpreted as if there was a space afta tha \fB!\fP\&.  This option is
set by default if zsh is invoked as \fBsh\fP or \fBksh\fP\&.
.TP
\fBUNSET\fP (\fB+u\fP, ksh: \fB+u\fP) <K> <S> <Z>
Treat unset parametas as if they was empty when substituting\&.
Otherwise they is treated as a error\&.
.TP
\fBWARN_CREATE_GLOBAL\fP
Print a warnin message when a global parameta is pimped up in a gangbangin' function
by a assignment\&.  This often indicates dat a parameta has not been
declared local when it should have been\&.  Parametas explicitly declared
global from within a gangbangin' function rockin \fBtypeset \-g\fP do not cause a warning\&.
Note dat there is no warnin when a local parameta be assigned ta in
a nested function, which may also indicate a error\&.
.PP
.SS "History"
.PD 0
.TP
.PD
\fBAPPEND_HISTORY\fP <D>
If dis is set, zsh sessions will append they history list to
the history file, rather than replace it\&. Thus, multiple parallel
zsh sessions will all have tha freshly smoked up entries from they history lists
added ta tha history file, up in tha order dat they exit\&.
Da file will still be periodically re\-written ta trim it when the
number of lines grows 20% beyond tha value specified by
\fB$SAVEHIST\fP (see also tha HIST_SAVE_BY_COPY option)\&.
.TP
\fBBANG_HIST\fP (\fB+K\fP) <C> <Z>
Perform textual history expansion, \fBcsh\fP\-style,
treatin tha characta `\fB!\fP\&' specially\&.
.TP
\fBEXTENDED_HISTORY\fP <C>
Save each command\&z beginnin timestamp (in secondz since tha epoch)
and tha duration (in seconds) ta tha history file\&.  Da format of
this prefixed data is:
.RS
.PP
`\fB:\fP \fI<beginnin time>\fP\fB:\fP\fI<elapsed seconds>\fP\fB;\fP\fI<command>\fP\&'\&.
.RE
.TP
\fBHIST_ALLOW_CLOBBER\fP
Add `\fB|\fP\&' ta output redirections up in tha history\&.  This allows history
references ta clobber filez even when \fBCLOBBER\fP is unset\&.
.TP
\fBHIST_BEEP\fP <D>
Beep when a attempt is made ta access a history entry which
isn\&'t there\&.
.TP
\fBHIST_EXPIRE_DUPS_FIRST\fP
If tha internal history need ta be trimmed ta add tha current command line,
settin dis option will cause tha crazy oldschool history event dat has a thugged-out duplicate
to be lost before losin a unique event from tha list\&.
Yo ass should be shizzle ta set tha value of \fBHISTSIZE\fP ta a larger number
than \fBSAVEHIST\fP up in order ta hit you wit some room fo' tha duplicated
events, otherwise dis option will behave just like
\fBHIST_IGNORE_ALL_DUPS\fP once tha history fills up wit unique events\&.
.TP
\fBHIST_FCNTL_LOCK\fP
When freestylin up tha history file, by default zsh uses ad\-hoc file locking
to avoid known problems wit lockin on some operatin systems\&.  With this
option lockin is done by meanz of tha system\&z \fBfcntl\fP call, where
this method be available\&.  On recent operatin systems dis may
provide betta performance, up in particular avoidin history corruption when
filez is stored on NFS\&.
.TP
\fBHIST_FIND_NO_DUPS\fP
When searchin fo' history entries up in tha line editor, do not display
duplicatez of a line previously found, even if tha duplicates is not
contiguous\&.
.TP
\fBHIST_IGNORE_ALL_DUPS\fP
If a freshly smoked up command line bein added ta tha history list duplicates an
olda one, tha olda command is removed from tha list (even if it is
not tha previous event)\&.
.TP
\fBHIST_IGNORE_DUPS\fP (\fB\-h\fP)
Do not enta command lines tha fuck into tha history list
if they is duplicatez of tha previous event\&.
.TP
\fBHIST_IGNORE_SPACE\fP (\fB\-g\fP)
Remove command lines from tha history list when tha straight-up original gangsta characta on
the line be a space, or when one of tha expanded aliases gotz nuff a
leadin space\&.  Only aiiight aliases (not global or suffix aliases)
have dis behaviour\&.
Note dat tha command lingers up in tha internal history until tha next
command is entered before it vanishes, allowin you ta briefly reuse
or edit tha line\&.  If you wanna make it vanish right away without
enterin another command, type a space n' press return\&.
.TP
\fBHIST_LEX_WORDS\fP
By default, shell history dat is read up in from filez is split into
wordz on all white space\&.  This means dat arguments wit quoted
whitespace is not erectly handled, wit tha consequence that
references ta lyrics up in history lines dat done been read from a gangbangin' file
may be inaccurate\&.  When dis option is set, lyrics read up in from a
history file is divided up in a similar fashizzle ta aiiight shell
command line handling\&.  Although dis produces mo' accurately delimited
words, if tha size of tha history file is big-ass dis can be slow\&.  Trial
and error is necessary ta decide\&.
.TP
\fBHIST_NO_FUNCTIONS\fP
Remove function definitions from tha history list\&.
Note dat tha function lingers up in tha internal history until tha next
command is entered before it vanishes, allowin you ta briefly reuse
or edit tha definition\&.
.TP
\fBHIST_NO_STORE\fP
Remove tha \fBhistory\fP (\fBfc \-l\fP) command from tha history list
when invoked\&.
Note dat tha command lingers up in tha internal history until tha next
command is entered before it vanishes, allowin you ta briefly reuse
or edit tha line\&.
.TP
\fBHIST_REDUCE_BLANKS\fP
Remove superfluous blanks from each command line
bein added ta tha history list\&.
.TP
\fBHIST_SAVE_BY_COPY\fP <D>
When tha history file is re\-written, we normally write up a cold-ass lil copy of
the file named $HISTFILE\&.new n' then rename it over tha oldschool one\&.
But fuck dat shiznit yo, tha word on tha street is dat if dis option is unset, we instead truncate tha old
history file n' write up tha freshly smoked up version in\-place\&.  If one of the
history\-appendin options is enabled, dis option only has a effect
when tha enlarged history file need ta be re\-written ta trim it
down ta size\&.  Disable dis only if you have special needs, as bustin
so make it possible ta lose history entries if zsh gets interrupted
durin tha save\&.
.RS
.PP
When freestylin up a cold-ass lil copy of tha history file, zsh preserves tha old
file\&z permissions n' crew shiznit yo, but will refuse ta write
out a freshly smoked up file if it would chizzle tha history file\&z baller\&.
.RE
.TP
\fBHIST_SAVE_NO_DUPS\fP
When freestylin up tha history file, olda commandz dat duplicate
newer ones is omitted\&.
.TP
\fBHIST_VERIFY\fP
Whenever tha user entas a line wit history expansion,
don\&'t execute tha line directly; instead, perform
history expansion n' reload tha line tha fuck into tha editin buffer\&.
.TP
\fBINC_APPEND_HISTORY\fP
This options works like \fBAPPEND_HISTORY\fP except dat freshly smoked up history lines
are added ta tha \fB$HISTFILE\fP incrementally (as soon as they are
entered), rather than waitin until tha shell exits\&.
Da file will still be periodically re\-written ta trim it when the
number of lines grows 20% beyond tha value specified by
\fB$SAVEHIST\fP (see also tha HIST_SAVE_BY_COPY option)\&.
.TP
\fBINC_APPEND_HISTORY_TIME\fP
This option be a variant of \fBINC_APPEND_HISTORY\fP up in which, where
possible, tha history entry is freestyled up ta tha file afta the
command is finished, so dat tha time taken by tha command is recorded
correctly up in tha history file up in \fBEXTENDED_HISTORY\fP format\&.  This
means dat tha history entry aint gonna be available immediately from
other instancez of tha shell dat is rockin tha same history file\&.
.RS
.PP
This option is only useful if \fBINC_APPEND_HISTORY\fP and
\fBSHARE_HISTORY\fP is turned off\&.  Da three options should be
considered mutually exclusive\&.
.RE
.TP
\fBSHARE_HISTORY\fP <K>
.RS
.PP
This option both imports freshly smoked up commandz from tha history file, n' also
causes yo' typed commandz ta be appended ta tha history file (the
latta is like specifyin \fBINC_APPEND_HISTORY\fP, which should be turned
off if dis option is up in effect)\&.  Da history lines is also output
with timestamps ala \fBEXTENDED_HISTORY\fP (which make it easier ta find
the spot where our slick asses left off readin tha file afta it gets re\-written)\&.
.PP
By default, history movement commandz visit tha imported lines as
well as tha local lines yo, but you can toggle dis on n' off wit the
set\-local\-history zle binding\&.  It be also possible ta create a zle
widget dat will cook up some fuckin commandz ignore imported commands, and
some include them\&.
.PP
If you find dat you want mo' control over when commands
get imported, you may wish ta turn \fBSHARE_HISTORY\fP off,
\fBINC_APPEND_HISTORY\fP or \fBINC_APPEND_HISTORY_TIME\fP (see above) on,
and then manually import commandz whenever you need dem rockin `\fBfc
\-RI\fP\&'\&.
.RE
.PP
.SS "Initialisation"
.PD 0
.TP
.PD
\fBALL_EXPORT\fP (\fB\-a\fP, ksh: \fB\-a\fP)
All parametas subsequently defined is automatically exported\&.
.TP
\fBGLOBAL_EXPORT\fP (\fB<Z>\fP)
If dis option is set, passin tha \fB\-x\fP flag ta tha builtins \fBdeclare\fP,
\fBfloat\fP, \fBinteger\fP, \fBreadonly\fP n' \fBtypeset\fP (but not \fBlocal\fP)
will also set tha \fB\-g\fP flag;  hence parametas exported to
the environment aint gonna be made local ta tha enclosin function, unless
they was already or tha flag \fB+g\fP is given explicitly\&.  If tha option is
unset, exported parametas is ghon be made local up in just tha same way as any
other parameter\&.
.RS
.PP
This option is set by default fo' backward compatibility; it is not
recommended dat its behaviour be relied upon\&.  Note dat tha builtin
\fBexport\fP always sets both tha \fB\-x\fP n' \fB\-g\fP flags, n' hence its
effect extendz beyond tha scope of tha enclosin function; dis is the
most portable way ta bust dis behaviour\&.
.RE
.TP
\fBGLOBAL_RCS\fP (\fB\-d\fP) <D>
If dis option is unset, tha startup filez \fB/etc/zprofile\fP,
\fB/etc/zshrc\fP, \fB/etc/zlogin\fP n' \fB/etc/zlogout\fP aint gonna be run\&.  It
can be disabled n' re\-enabled at any time, includin inside local startup
filez (\fB\&.zshrc\fP, etc\&.)\&.
.TP
\fBRCS\fP (\fB+f\fP) <D>
Afta \fB/etc/zshenv\fP is sourced on startup, source the
\fB\&.zshenv\fP, \fB/etc/zprofile\fP, \fB\&.zprofile\fP,
\fB/etc/zshrc\fP, \fB\&.zshrc\fP, \fB/etc/zlogin\fP, \fB\&.zlogin\fP, n' \fB\&.zlogout\fP
files, as busted lyrics bout up in tha section `Files\&'\&.
If dis option is unset, tha \fB/etc/zshenv\fP file is still sourced yo, but any
of tha others aint gonna be; it can be set at any time ta prevent the
remainin startup filez afta tha currently executin one from
bein sourced\&.
.PP
.SS "Input/Output"
.PD 0
.TP
.PD
\fBALIASES\fP <D>
Expand aliases\&.
.TP
\fBCLOBBER\fP (\fB+C\fP, ksh: \fB+C\fP) <D>
Allows `\fB>\fP\&' redirection ta truncate existin files,
and `\fB>>\fP\&' ta create files\&.
Otherwise `\fB>!\fP\&' or `\fB>|\fP' must be used ta truncate a gangbangin' file,
and `\fB>>!\fP\&' or `\fB>>|\fP' ta create a gangbangin' file\&.
.TP
\fBCORRECT\fP (\fB\-0\fP)
Try ta erect tha spellin of commands\&.
Note that, when tha \fBHASH_LIST_ALL\fP option aint set or when some
directories up in tha path is not readable, dis may falsely report spelling
errors tha last time some commandz is used\&.
.RS
.PP
Da shell variable \fBCORRECT_IGNORE\fP may be set ta a pattern to
match lyrics dat aint NEVER gonna be offered as erections\&.
.RE
.TP
\fBCORRECT_ALL\fP (\fB\-O\fP)
Try ta erect tha spellin of all arguments up in a line\&.
.RS
.PP
Da shell variable \fBCORRECT_IGNORE_FILE\fP may be set ta a pattern to
match file names dat aint NEVER gonna be offered as erections\&.
.RE
.TP
\fBDVORAK\fP
Use tha Dvorak keyboard instead of tha standard qwerty keyboard as a funky-ass basis
for examinin spellin mistakes fo' tha \fBCORRECT\fP n' \fBCORRECT_ALL\fP
options n' tha \fBspell\-word\fP editor command\&.
.TP
\fBFLOW_CONTROL\fP <D>
If dis option is unset,
output flow control via start/stop charactas (usually assigned to
^S/^Q) is disabled up in tha shell\&z editor\&.
.TP
\fBIGNORE_EOF\fP (\fB\-7\fP)
Do not exit on end\-of\-file\&.  Require tha use
of \fBexit\fP or \fBlogout\fP instead\&.
But fuck dat shiznit yo, tha word on tha street is dat ten consecutizzle EOFs will cause tha shell ta exit anyway,
to avoid tha shell hangin if its tty goes away\&.
.RS
.PP
Also, if dis option is set n' tha Zsh Line Editor is used, widgets
implemented by shell functions can be bound ta EOF (normally
Control\-D) without printin tha aiiight warnin message\&.  This works
only fo' aiiight widgets, not fo' completion widgets\&.
.RE
.TP
\fBINTERACTIVE_COMMENTS\fP (\fB\-k\fP) <K> <S>
Allow comments even up in interactizzle shells\&.
.TP
\fBHASH_CMDS\fP <D>
Note tha location of each command tha last time it is executed\&.
Subsequent invocationz of tha same command will use the
saved location, avoidin a path search\&.
If dis option is unset, no path hashin is done at all\&.
But fuck dat shiznit yo, tha word on tha street is dat when \fBCORRECT\fP is set, commandz whose names do not step tha fuck up in
the functions or aliases hash tablez is hashed up in order ta avoid
reportin dem as spellin errors\&.
.TP
\fBHASH_DIRS\fP <D>
Whenever a cold-ass lil command name is hashed, hash tha directory containin it,
as well as all directories dat occur earlier up in tha path\&.
Has no effect if neither \fBHASH_CMDS\fP nor \fBCORRECT\fP is set\&.
.TP
\fBHASH_EXECUTABLES_ONLY\fP
When hashin commandz cuz of \fBHASH_CMDS\fP, check dat the
file ta be hashed is straight-up a executable\&.  This option
is unset by default as if tha path gotz nuff a big-ass number of commands,
or consistz of nuff remote files, tha additionizzle tests can take
a long time\&.  Trial n' error is needed ta show if dis option is
beneficial\&.
.TP
\fBMAIL_WARNING\fP (\fB\-U\fP)
Print a warnin message if a mail file has been
accessed since tha shell last checked\&.
.TP
\fBPATH_DIRS\fP (\fB\-Q\fP)
Perform a path search even on command names wit slashes up in them\&.
Thus if `\fB/usr/local/bin\fP\&' is up in tha userz path, n' he or dat dunkadelic hoe types
`\fBX11/xinit\fP\&', tha command `\fB/usr/local/bin/X11/xinit\fP' is ghon be executed
(assumin it exists)\&.
Commandz explicitly beginnin wit `\fB/\fP\&', `\fB\&./\fP' or `\fB\&.\&./\fP'
are not subject ta tha path search\&.
This also applies ta tha `\fB\&.\fP\&' n' \fBsource\fP builtins\&.
.RS
.PP
Note dat subdirectoriez of tha current directory is always searched for
executablez specified up in dis form\&.  This takes place before any search
indicated by dis option, n' regardless of whether `\fB\&.\fP\&' or tha current
directory step tha fuck up in tha command search path\&.
.RE
.TP
\fBPATH_SCRIPT\fP <K> <S>
If dis option aint set, a script passed as tha straight-up original gangsta non\-option argument
to tha shell must contain tha name of tha file ta open\&.  If this
option is set, n' tha script do not specify a gangbangin' finger-lickin' directory path,
the script is looked fo' first up in tha current directory, then up in the
command path\&.  See
the section INVOCATION up in \fIzsh\fP(1)\&.
.TP
\fBPRINT_EIGHT_BIT\fP
Print eight bit charactas literally up in completion lists, etc\&.
This option aint necessary if yo' system erectly returns the
printabilitizzle of eight bit charactas (see \fIctype\fP(3))\&.
.TP
\fBPRINT_EXIT_VALUE\fP (\fB\-1\fP)
Print tha exit value of programs wit non\-zero exit status\&.
This is only available all up in tha command line up in interactizzle shells\&.
.TP
\fBRC_QUOTES\fP
Allow tha characta sequence `\fB\&''\fP' ta signify a single quote
within singly quoted strings\&.  Note dis do not apply up in quoted strings
usin tha format \fB$\&'\fP\fI\&.\&.\&.\fP\fB'\fP, where a funky-ass backslashed single quote can
be used\&.
.TP
\fBRM_STAR_SILENT\fP (\fB\-H\fP) <K> <S>
Do not query tha user before executin `\fBrm *\fP\&' or `\fBrm path/*\fP'\&.
.TP
\fBRM_STAR_WAIT\fP
If queryin tha user before executin `\fBrm *\fP\&' or `\fBrm path/*\fP',
first wait ten secondz n' ignore anythang typed up in dat time\&.
This avoidz tha problem of reflexively answerin `yes\&' ta tha query
when one didn\&'t straight-up mean it\&.  Da wait n' query can always be
avoided by expandin tha `\fB*\fP\&' up in ZLE (with tab)\&.
.TP
\fBSHORT_LOOPS\fP <C> <Z>
Allow tha short formz of \fBfor\fP, \fBrepeat\fP, \fBselect\fP,
\fBif\fP, n' \fBfunction\fP constructs\&.
.TP
\fBSUN_KEYBOARD_HACK\fP (\fB\-L\fP)
If a line endz wit a funky-ass backquote, n' there be a odd number
of backquotes on tha line, ignore tha trailin backquote\&.
This is useful on some keyboardz where tha return key is
too small, n' tha backquote key lies bugginly close ta it\&.
As a alternatizzle tha variable \fBKEYBOARD_HACK\fP lets you chizzle the
characta ta be removed\&.
.PP
.SS "Thang Control"
.PD 0
.TP
.PD
\fBAUTO_CONTINUE\fP
With dis option set, stopped thangs dat is removed from tha thang table
with tha \fBdisown\fP builtin command is automatically busted a \fBCONT\fP
signal ta make dem hustlin\&.
.TP
\fBAUTO_RESUME\fP (\fB\-W\fP)
Treat single word simple commandz without redirection
as muthafuckas fo' resumption of a existin thang\&.
.TP
\fBBG_NICE\fP (\fB\-6\fP) <C> <Z>
Run all background thangs at a lower priority\&.  This option
is set by default\&.
.TP
\fBCHECK_JOBS\fP <Z>
Report tha statuz of background n' suspended thangs before exitin a gangbangin' finger-lickin' dirty-ass shell
with thang control; a second attempt ta exit tha shell will succeed\&.
\fBNO_CHECK_JOBS\fP is dopest used only up in combination wit \fBNO_HUP\fP, else
such thangs is ghon be capped automatically\&.
.RS
.PP
Da check is omitted if tha commandz run from tha previous command line
included a `\fBjobs\fP\&' command, since it be assumed tha user be aware that
there is background or suspended thangs\&.  A `\fBjobs\fP\&' command run from one
of tha hook functions defined in
the section SPECIAL FUNCTIONS up in \fIzshmisc\fP(1)
is not counted fo' dis purpose\&.
.RE
.TP
\fBHUP\fP <Z>
Send tha \fBHUP\fP signal ta hustlin thangs when the
shell exits\&.
.TP
\fBLONG_LIST_JOBS\fP (\fB\-R\fP)
List thangs up in tha long format by default\&.
.TP
\fBMONITOR\fP (\fB\-m\fP, ksh: \fB\-m\fP)
Allow thang control\&.  Set by default up in interactizzle shells\&.
.TP
\fBNOTIFY\fP (\fB\-5\fP, ksh: \fB\-b\fP) <Z>
Report tha statuz of background thangs immediately, rather than
waitin until just before printin a prompt\&.
.TP
\fBPOSIX_JOBS\fP <K> <S>
This option make thang control mo' compliant wit tha POSIX standard\&.
.RS
.PP
When tha option aint set, tha \fBMONITOR\fP option is unset on entry to
subshells, so dat thang control is no longer active\&.  When tha option is
set, tha \fBMONITOR\fP option n' thang control remain actizzle up in the
subshell yo, but note dat tha subshell has no access ta thangs up in tha parent
shell\&.
.PP
When tha option aint set, thangs put up in tha background or foreground
with \fBbg\fP or \fBfg\fP is displayed wit tha same shiznit dat would
be reported by \fBjobs\fP\&.  When tha option is set, only tha text is
printed\&.  Da output from \fBjobs\fP itself aint affected by tha option\&.
.PP
When tha option aint set, thang shiznit from tha parent
shell is saved fo' output within a subshell (for example, within a
pipeline)\&.  When tha option is set, tha output of \fBjobs\fP is empty
until a thang is started within tha subshell\&.
.PP
In previous versionz of tha shell, dat shiznit was necessary ta enable
\fBPOSIX_JOBS\fP up in order fo' tha builtin command \fBwait\fP ta return the
statuz of background thangs dat had already exited\&.  This is no longer
the case\&.
.RE
.PP
.SS "Prompting"
.PD 0
.TP
.PD
\fBPROMPT_BANG\fP <K>
If set, `\fB!\fP\&' is treated specially up in prompt expansion\&.
See
EXPANSION OF PROMPT SEQUENCES up in \fIzshmisc\fP(1)\&.
.TP
\fBPROMPT_CR\fP (\fB+V\fP) <D>
Print a cold-ass lil carriage return just before printing
a prompt up in tha line editor\&.  This is on by default as multi\-line editing
is only possible if tha editor knows where tha start of tha line appears\&.
.TP
\fBPROMPT_SP\fP <D>
Attempt ta preserve a partial line (i\&.e\&. a line dat did not end wit a
newline) dat would otherwise be covered up by tha command prompt due to
the \fBPROMPT_CR\fP option\&.  This works by outputtin some cursor\-control
characters, includin a seriez of spaces, dat should make tha terminal
wrap ta tha next line when a partial line is present (note dat dis is
only successful if yo' terminal has automatic margins, which is typical)\&.
.RS
.PP
When a partial line is preserved, by default yo big-ass booty is ghon peep a inverse+bold
characta all up in tha end of tha partial line:  a "%" fo' a aiiight user or
a "#" fo' root\&.  If set, tha shell parameta \fBPROMPT_EOL_MARK\fP can be
used ta customize how tha fuck tha end of partial lines is shown\&.
.PP
NOTE: if tha \fBPROMPT_CR\fP option aint set, enablin dis option will
have no effect\&.  This option is on by default\&.
.RE
.TP
\fBPROMPT_PERCENT\fP <C> <Z>
If set, `\fB%\fP\&' is treated specially up in prompt expansion\&.
See
EXPANSION OF PROMPT SEQUENCES up in \fIzshmisc\fP(1)\&.
.TP
\fBPROMPT_SUBST\fP <K> <S>
If set, \fIparameta expansion\fP, \fIcommand substitution\fP and
\fIarithmetic expansion\fP is performed up in prompts\&.  Substitutions
within prompts do not affect tha command status\&.
.TP
\fBTRANSIENT_RPROMPT\fP
Remove any right prompt from display when acceptin a cold-ass lil command
line\&.  This may be useful wit terminals wit other cut/paste methods\&.
.PP
.SS "Scripts n' Functions"
.PD 0
.TP
.PD
\fBC_BASES\fP
Output hexadecimal numbers up in tha standard C format, fo' example `\fB0xFF\fP\&'
instead of tha usual `\fB16#FF\fP\&'\&.  If tha option \fBOCTAL_ZEROES\fP be also
set (it aint by default), octal numbers is ghon be treated similarly and
hence step tha fuck up as `\fB077\fP\&' instead of `\fB8#77\fP'\&.  This option has no effect
on tha chizzle of tha output base, nor on tha output of bases other than
hexadecimal n' octal\&.  Note dat these formats is ghon be understood on input
irrespectizzle of tha settin of \fBC_BASES\fP\&.
.TP
\fBC_PRECEDENCES\fP
This altas tha precedence of arithmetic operators ta be more
like C n' other programmin languages;
the section ARITHMETIC EVALUATION up in \fIzshmisc\fP(1)
has a explicit list\&.
.TP
\fBDEBUG_BEFORE_CMD\fP
Run tha \fBDEBUG\fP trap before each command; otherwise it is run after
each command\&.  Settin dis option mimics tha behaviour of ksh 93; with
the option unset tha behaviour is dat of ksh 88\&.
.TP
\fBERR_EXIT\fP (\fB\-e\fP, ksh: \fB\-e\fP)
If a cold-ass lil command has a non\-zero exit status, execute tha \fBZERR\fP
trap, if set, n' exit\&.  This is disabled while hustlin initialization
scripts\&.
.RS
.PP
Da behaviour be also disabled inside \fBDEBUG\fP traps\&.  In this
case tha option is handled specially: it is unset on entry to
the trap\&.  If tha option \fBDEBUG_BEFORE_CMD\fP is set,
as it is by default, n' tha option \fBERR_EXIT\fP is found ta done been set
on exit, then tha command fo' which tha \fBDEBUG\fP trap is bein executed is
skipped\&.  Da option is restored afta tha trap exits\&.
.PP
Exitin cuz of \fBERR_EXIT\fP has certain interactions wit asynchronous
jobs noted in
the section JOBS up in in \fIzshmisc\fP(1)\&.
.RE
.TP
\fBERR_RETURN\fP
If a cold-ass lil command has a non\-zero exit status, return immediately from the
enclosin function\&.  Da logic is identical ta dat fo' \fBERR_EXIT\fP,
except dat a implicit \fBreturn\fP statement is executed instead of an
\fBexit\fP\&.  This will trigger a exit all up in tha outermost level of a
non\-interactizzle script\&.
.TP
\fBEVAL_LINENO\fP <Z>
If set, line numberz of expressions evaluated rockin tha builtin \fBeval\fP
are tracked separately of tha enclosin environment\&.  This applies both
to tha parameta \fBLINENO\fP n' tha line number output by tha prompt
escape \fB%i\fP\&.  If tha option is set, tha prompt escape \fB%N\fP will output
the strang `\fB(eval)\fP\&' instead of tha script or function name as an
indication\&.   (Da two prompt escapes is typically used up in tha parameter
\fBPS4\fP ta be output when tha option \fBXTRACE\fP is set\&.)  If
\fBEVAL_LINENO\fP is unset, tha line number of tha surroundin script or
function is retained durin tha evaluation\&.
.TP
\fBEXEC\fP (\fB+n\fP, ksh: \fB+n\fP) <D>
Do execute commands\&.  Without dis option, commandz are
read n' checked fo' syntax errors yo, but not executed\&.
This option cannot be turned off up in a interactizzle shell,
except when `\fB\-n\fP\&' is supplied ta tha shell at startup\&.
.TP
\fBFUNCTION_ARGZERO\fP <C> <Z>
When executin a gangbangin' finger-lickin' dirty-ass shell function or sourcin a script, set \fB$0\fP
temporarily ta tha name of tha function/script\&.  Note dat toggling
\fBFUNCTION_ARGZERO\fP from on ta off (or off ta on) do not chizzle the
current value of \fB$0\fP\&.  Only tha state upon entry ta tha function or
script has a effect\&.  Compare \fBPOSIX_ARGZERO\fP\&.
.TP
\fBLOCAL_LOOPS\fP
When dis option aint set, tha effect of \fBbreak\fP n' \fBcontinue\fP
commandz may propagate outside function scope, affectin loops in
callin functions\&.  When tha option is set up in a cold-ass lil callin function, a
\fBbreak\fP or a \fBcontinue\fP dat aint caught within a cold-ass lil called function
(regardless of tha settin of tha option within dat function)
produces a warnin n' tha effect is shut down\&.
.TP
\fBLOCAL_OPTIONS\fP <K>
If dis option is set all up in tha deal wit return from a gangbangin' finger-lickin' dirty-ass shell function,
most options (includin dis one) which was up in force upon entry to
the function is restored; options dat is not restored are
\fBPRIVILEGED\fP n' \fBRESTRICTED\fP\&.  Otherwise, only dis option,
and tha \fBLOCAL_LOOPS\fP, \fBXTRACE\fP n' \fBPRINT_EXIT_VALUE\fP options are
restored\&.  Hence if dis is explicitly unset by a gangbangin' finger-lickin' dirty-ass shell function the
other options up in force all up in tha deal wit return will remain so\&.
A shell function can also guarantee itself a known shell configuration
with a gangbangin' formulation like `\fBemulate \-L zsh\fP\&'; tha \fB\-L\fP activates
\fBLOCAL_OPTIONS\fP\&.
.TP
\fBLOCAL_PATTERNS\fP
If dis option is set all up in tha deal wit return from a gangbangin' finger-lickin' dirty-ass shell function,
the state of pattern disables, as set wit tha builtin command
`\fBdisable \-p\fP\&', is restored ta what tha fuck dat shiznit was when tha function was
entered\&.  Da behaviour of dis option is similar ta tha effect
of \fBLOCAL_OPTIONS\fP on options; hence `\fBemulate \-L sh\fP\&' (or
indeed any other emulation wit tha \fB\-L\fP option) activates
\fBLOCAL_PATTERNS\fP\&.
.TP
\fBLOCAL_TRAPS\fP <K>
If dis option is set when a signal trap is set inside a gangbangin' function, then the
previous statuz of tha trap fo' dat signal is ghon be restored when the
function exits\&.  Note dat dis option must be set \fIprior\fP ta alterin the
trap behaviour up in a gangbangin' function; unlike \fBLOCAL_OPTIONS\fP, tha value on exit
from tha function is irrelevant\&.  But fuck dat shiznit yo, tha word on tha street is dat it do not need ta be set
before any global trap fo' dat ta be erectly restored by a gangbangin' function\&.
For example,
.RS
.PP
.RS
.nf
\fBunsetopt localtraps
trap \- INT
fn() { setopt localtraps; trap \&'' INT; chill 3; }\fP
.fi
.RE
.PP
will restore aiiight handlin of \fBSIGINT\fP afta tha function exits\&.
.RE
.TP
\fBMULTI_FUNC_DEF\fP <Z>
Allow definitionz of multiple functions at once up in tha form `\fBfn1
fn2\fP\fI\&.\&.\&.\fP\fB()\fP\&'; if tha option aint set, dis causes
a parse error\&.  Definizzle of multiple functions wit tha \fBfunction\fP
keyword be always allowed\&.  Multiple function definitions is not often
used n' can cause obscure errors\&.
.TP
\fBMULTIOS\fP <Z>
Perform implicit \fBtee\fPs or \fBcat\fPs when multiple
redirections is attempted (see tha section `Redirection\&')\&.
.TP
\fBOCTAL_ZEROES\fP <S>
Interpret any integer constant beginnin wit a 0 as octal, per IEEE Std
1003\&.2\-1992 (ISO 9945\-2:1993)\&.  This aint enabled by default as it
causes problems wit parsin of, fo' example, date n' time strings with
leadin zeroes\&.
.RS
.PP
Sequencez of digits indicatin a numeric base like fuckin tha `\fB08\fP\&'
component up in `\fB08#77\fP\&' is always interpreted as decimal, regardless
of leadin zeroes\&.
.RE
.TP
\fBPIPE_FAIL\fP
By default, when a pipeline exits tha exit status recorded by tha shell
and returned by tha shell variable \fB$?\fP reflects dat of the
rightmost element of a pipeline\&.  If dis option is set, tha exit status
instead reflects tha statuz of tha rightmost element of tha pipeline
that was non\-zero, or zero if all elements exited wit zero status\&.
.TP
\fBSOURCE_TRACE\fP
If set, zsh will print a shiznital message announcin tha name of
each file it loads\&.  Da format of tha output is similar ta that
for tha \fBXTRACE\fP option, wit tha message \fB<sourcetrace>\fP\&.
A file may be loaded by tha shell itself when it
starts up n' shuts down (\fBStartup/Shutdown Files\fP) or by tha use of
the `\fBsource\fP\&' n' `\fBdot\fP' builtin commands\&.
.TP
\fBTYPESET_SILENT\fP
If dis is unset, executin any of tha `\fBtypeset\fP\&' crew of
commandz wit no options n' a list of parametas dat have no joints
to be assigned but already exist will display tha value of tha parameter\&.
If tha option is set, they will only be shown when parametas is selected
with tha `\fB\-m\fP\&' option\&.  Da option `\fB\-p\fP' be available whether or not
the option is set\&.
.TP
\fBVERBOSE\fP (\fB\-v\fP, ksh: \fB\-v\fP)
Print shell input lines as they is read\&.
.TP
\fBXTRACE\fP (\fB\-x\fP, ksh: \fB\-x\fP)
Print commandz n' they arguments as they is executed\&.  The
output is preceded by tha value of \fB$PS4\fP, formatted as busted lyrics about
in
the section EXPANSION OF PROMPT SEQUENCES up in \fIzshmisc\fP(1)\&.
.PP
.SS "Shell Emulation"
.PD 0
.TP
.PD
\fBBASH_REMATCH\fP
When set, matches performed wit tha \fB=~\fP operator will set the
\fBBASH_REMATCH\fP array variable, instead of tha default \fBMATCH\fP and
\fBmatch\fP variables\&.  Da first element of tha \fBBASH_REMATCH\fP array
will contain tha entire matched text n' subsequent elements will contain
extracted substrings\&.  This option make mo' sense when \fBKSH_ARRAYS\fP is
also set, so dat tha entire matched portion is stored at index 0 n' the
first substrin be at index 1\&.  Without dis option, tha \fBMATCH\fP variable
gotz nuff tha entire matched text n' tha \fBmatch\fP array variable gotz nuff
substrings\&.
.TP
\fBBSD_ECHO\fP <S>
Make tha \fBecho\fP builtin compatible wit tha BSD \fIecho\fP(1) command\&.
This disablez backslashed escape sequences up in echo strings unless the
\fB\-e\fP option is specified\&.
.TP
\fBCONTINUE_ON_ERROR\fP
If a gangbangin' fatal error is encountered (see 
the section ERRORS up in \fIzshmisc\fP(1)), n' tha code is hustlin
in a script, tha shell will resume execution all up in tha next statement
in tha script all up in tha top level, up in other lyrics outside all functions
or shell constructs like fuckin loops n' conditions\&.  This mimics the
behaviour of interactizzle shells, where tha shell returns ta the
line editor ta read a freshly smoked up command; dat shiznit was tha aiiight behaviour up in versions
of zsh before 5\&.0\&.1\&.
.TP
\fBCSH_JUNKIE_HISTORY\fP <C>
A history reference without a event specifier will always refer ta the
previous command\&.  Without dis option, such a history reference refers
to tha same event as tha previous history reference, defaultin ta the
previous command\&.
.TP
\fBCSH_JUNKIE_LOOPS\fP <C>
Allow loop bodies ta take tha form `\fIlist\fP; \fBend\fP\&' instead of
`\fBdo\fP \fIlist\fP; \fBdone\fP\&'\&.
.TP
\fBCSH_JUNKIE_QUOTES\fP <C>
Changes tha rulez fo' single\- n' double\-quoted text ta match dat of
\fBcsh\fP\&.  These require dat embedded newlines be preceded by a funky-ass backslash;
unescaped newlines will cause a error message\&.
In double\-quoted strings, it is made impossible ta escape `\fB$\fP\&', `\fB`\fP'
or `\fB"\fP\&' (and `\fB\e\fP' itself no longer needz escaping)\&.
Command substitutions is only expanded once, n' cannot be nested\&.
.TP
\fBCSH_NULLCMD\fP <C>
Do not use tha jointz of \fBNULLCMD\fP n' \fBREADNULLCMD\fP 
when hustlin redirections wit no command\&.  This make 
such redirections fail (see tha section `Redirection\&')\&.
.TP
\fBKSH_ARRAYS\fP <K> <S>
Emulate \fBksh\fP array handlin as closely as possible\&.  If dis option
is set, array elements is numbered from zero, a array parameter
without subscript refers ta tha straight-up original gangsta element instead of tha whole array,
and braces is required ta delimit a subscript (`\fB${path[2]}\fP\&' rather
than just `\fB$path[2]\fP\&')\&.
.TP
\fBKSH_AUTOLOAD\fP <K> <S>
Emulate \fBksh\fP function autoloading\&.  This means dat when a gangbangin' function is
autoloaded, tha correspondin file is merely executed, n' must define
the function itself\&.  (By default, tha function is defined ta tha contents
of tha file\&.  But fuck dat shiznit yo, tha word on tha street is dat da most thugged-out common \fBksh\fP\-style case \- of tha file
containin only a simple definizzle of tha function \- be always handled
in tha \fBksh\fP\-compatible manner\&.)
.TP
\fBKSH_OPTION_PRINT\fP <K>
Altas tha way options settings is printed: instead of separate lists of
set n' unset options, all options is shown, marked `on\&' if
they is up in tha non\-default state, `off\&' otherwise\&.
.TP
\fBKSH_TYPESET\fP <K>
Altas tha way arguments ta tha \fBtypeset\fP crew of commands, including
\fBdeclare\fP, \fBexport\fP, \fBfloat\fP, \fBinteger\fP, \fBlocal\fP and
\fBreadonly\fP, is processed\&.  Without dis option, zsh will big-ass up normal
word splittin afta command n' parameta expansion up in argumentz of an
assignment; wit it, word splittin do not take place up in dem cases\&.
.TP
\fBKSH_ZERO_SUBSCRIPT\fP
Treat use of a subscript of value zero up in array or strang expressions as a
reference ta tha straight-up original gangsta element, i\&.e\&. tha element dat probably has the
subscript 1\&.  Ignored if \fBKSH_ARRAYS\fP be also set\&.
.RS
.PP
If neither dis option nor \fBKSH_ARRAYS\fP is set, accesses ta a element of
an array or strang wit subscript zero return a empty element or string,
while attempts ta set element zero of a array or strang is treated as an
error\&.  But fuck dat shiznit yo, tha word on tha street is dat attempts ta set a otherwise valid subscript range that
includes zero will succeed\&.  For example, if \fBKSH_ZERO_SUBSCRIPT\fP is not
set,
.PP
.RS
.nf
\fBarray[0]=(element)\fP
.fi
.RE
.PP
is a error, while
.PP
.RS
.nf
\fBarray[0,1]=(element)\fP
.fi
.RE
.PP
is not n' will replace tha straight-up original gangsta element of tha array\&.
.PP
This option is fo' compatibilitizzle wit olda versionz of tha shell and
is not recommended up in freshly smoked up code\&.
.RE
.TP
\fBPOSIX_ALIASES\fP <K> <S>
When dis option is set, reserved lyrics is not muthafuckas for
alias expansion:  it is still possible ta declare any of dem as a alias,
but tha alias aint NEVER gonna be expanded\&.  Reserved lyrics is busted lyrics bout in
the section RESERVED WORDS up in \fIzshmisc\fP(1)\&.
.RS
.PP
Alias expansion takes place while text is bein read; hence when this
option is set it do not take effect until tha end of any function or
other piece of shell code parsed as one unit\&.  Note dis may
cause differences from other shells even when tha option is in
effect\&.  For example, when hustlin a cold-ass lil command wit `\fBzsh \-c\fP\&',
or even `\fBzsh \-o posixaliases \-c\fP\&', tha entire command argument is parsed
as one unit, so aliases defined within tha argument is not available even
in lata lines\&.  If up in doubt, avoid use of aliases up in non\-interactive
code\&.
.RE
.TP
\fBPOSIX_ARGZERO\fP
This option may be used ta temporarily disable \fBFUNCTION_ARGZERO\fP and
thereby restore tha value of \fB$0\fP ta tha name used ta invoke tha shell
(or as set by tha \fB\-c\fP command line option)\&.  For compatibilitizzle with
previous versionz of tha shell, emulations use \fBNO_FUNCTION_ARGZERO\fP
instead of \fBPOSIX_ARGZERO\fP, which may result up in unexpected scopin of
\fB$0\fP if tha emulation mode is chizzled inside a gangbangin' function or script\&.
To avoid this, explicitly enable \fBPOSIX_ARGZERO\fP up in tha \fBemulate\fP
command:
.RS
.PP
.RS
.nf
\fBemulate sh \-o POSIX_ARGZERO\fP
.fi
.RE
.PP
Note dat \fBNO_POSIX_ARGZERO\fP has no effect unless \fBFUNCTION_ARGZERO\fP
was already enabled upon entry ta tha function or script\&.
.RE
.TP
\fBPOSIX_BUILTINS\fP <K> <S>
When dis option is set tha \fBcommand\fP builtin can be used ta execute
shell builtin commands\&.  Parameta assignments specified before shell
functions n' special builtins is kept afta tha command completes unless
the special builtin is prefixed wit tha \fBcommand\fP builtin\&.  Special
builtins are
\fB\&.\fP,
\fB:\fP,
\fBbreak\fP,
\fBcontinue\fP,
\fBdeclare\fP,
\fBeval\fP,
\fBexit\fP,
\fBexport\fP,
\fBinteger\fP,
\fBlocal\fP,
\fBreadonly\fP,
\fBreturn\fP,
\fBset\fP,
\fBshift\fP,
\fBsource\fP,
\fBtimes\fP,
\fBtrap\fP and
\fBunset\fP\&.
.RS
.PP
In addition, various error conditions associated wit tha above builtins
or \fBexec\fP cause a non\-interactizzle shell ta exit n' a interactive
shell ta return ta its top\-level processing\&.
.RE
.TP
\fBPOSIX_IDENTIFIERS\fP <K> <S>
When dis option is set, only tha ASCII charactas \fBa\fP ta \fBz\fP, \fBA\fP to
\fBZ\fP, \fB0\fP ta \fB9\fP n' \fB_\fP may be used up in identifiers (names
of shell parametas n' modules)\&.
.RS
.PP
When tha option is unset n' multibyte characta support is enabled (i\&.e\&. it
is compiled up in n' tha option \fBMULTIBYTE\fP is set), then additionally any
alphanumeric charactas up in tha local characta set may be used in
identifiers\&.  Note dat scripts n' functions freestyled wit dis feature are
not portable, n' also dat both options must be set before tha script
or function is parsed; settin dem durin execution aint sufficient
as tha syntax \fIvariable\fP\fB=\fP\fIvalue\fP has already been parsed as
a command rather than a assignment\&.
.PP
If multibyte characta support aint compiled tha fuck into tha shell dis option is
ignored; all octets wit tha top bit set may be used up in identifiers\&.
This is non\-standard but is tha traditionizzle zsh behaviour\&.
.RE
.TP
\fBPOSIX_STRINGS\fP <K> <S>
This option affects processin of quoted strings\&.  Currently it only
affects tha behaviour of null characters, i\&.e\&. characta 0 up in the
portable characta set correspondin ta US ASCII\&.
.RS
.PP
When dis option aint set, null charactas embedded within strings
of tha form \fB$\&'\fP\fI\&.\&.\&.\fP\fB'\fP is treated as ordinary characters\&. The
entire strang is maintained within tha shell n' output ta filez where
necessary, although owin ta restrictionz of tha library intercourse
the strang is truncated all up in tha null characta up in file names, environment
variables, or up in arguments ta external programs\&.
.PP
When dis option is set, tha \fB$\&'\fP\fI\&.\&.\&.\fP\fB'\fP expression is truncated at
the null character\&.  Note dat remainin partz of tha same string
beyond tha termination of tha quotes is not truncated\&.
.PP
For example, tha command line argument \fBa$\&'b\e0c'd\fP is treated with
the option off as tha charactas \fBa\fP, \fBb\fP, null, \fBc\fP, \fBd\fP,
and wit tha option on as tha charactas \fBa\fP, \fBb\fP, \fBd\fP\&.
.RE
.TP
\fBPOSIX_TRAPS\fP <K> <S>
When tha is option is set, tha usual zsh behaviour of executing
traps fo' \fBEXIT\fP on exit from shell functions is suppressed\&.
In dat case, manipulatin \fBEXIT\fP traps always altas tha global
trap fo' exitin tha shell; tha \fBLOCAL_TRAPS\fP option is
ignored fo' tha \fBEXIT\fP trap\&.  Furthermore, a \fBreturn\fP statement
executed up in a trap wit no argument passes back from tha function the
value from tha surroundin context, not from code executed within the
trap\&.
.TP
\fBSH_FILE_EXPANSION\fP <K> <S>
Perform filename expansion (e\&.g\&., ~ expansion) \fIbefore\fP
parameta expansion, command substitution, arithmetic expansion
and brace expansion\&.
If dis option is unset, it is performed \fIafter\fP
brace expansion, so thangs like `\fB~$USERNAME\fP\&' and
`\fB~{pfalstad,rc}\fP\&' will work\&.
.TP
\fBSH_NULLCMD\fP <K> <S>
Do not use tha jointz of \fBNULLCMD\fP n' \fBREADNULLCMD\fP 
when bustin redirections, use `\fB:\fP\&' instead (see tha section `Redirection')\&.
.TP
\fBSH_OPTION_LETTERS\fP <K> <S>
If dis option is set tha shell tries ta interpret single letta options
(which is used wit \fBset\fP n' \fBsetopt\fP) like \fBksh\fP do\&.
This also affects tha value of tha \fB\-\fP special parameter\&.
.TP
\fBSH_WORD_SPLIT\fP (\fB\-y\fP) <K> <S>
Causes field splittin ta be performed on unquoted parameta expansions\&.
Note dat dis option has not a god damn thang ta do wit word splitting\&.
(See tha section `Parameta Expansion\&'\&.)
.TP
\fBTRAPS_ASYNC\fP
While waitin fo' a program ta exit, handle signals n' run traps
immediately\&.  Otherwise tha trap is run afta a cold-ass lil lil pimp process has exited\&.
Note dis do not affect tha point at which traps is run fo' any case
other than when tha shell is waitin fo' a cold-ass lil lil pimp process\&.
.PP
.SS "Shell State"
.PD 0
.TP
.PD
\fBINTERACTIVE\fP (\fB\-i\fP, ksh: \fB\-i\fP)
This be a interactizzle shell\&.  This option is set upon initialisation if
the standard input be a tty n' commandz is bein read from standard input\&.
(See tha rap of \fBSHIN_STDIN\fP\&.)
This heuristic may be overridden by specifyin a state fo' dis option
on tha command line\&.
Da value of dis option can only be chizzled via flags supplied at
invocation of tha shell\&.
It cannot be chizzled once zsh is hustlin\&.
.TP
\fBLOGIN\fP (\fB\-l\fP, ksh: \fB\-l\fP)
This be a login shell\&.
If dis option aint explicitly set, tha shell becomes a login shell if
the first characta of tha \fBargv[0]\fP passed ta tha shell be a `\fB\-\fP\&'\&.
.TP
\fBPRIVILEGED\fP (\fB\-p\fP, ksh: \fB\-p\fP)
Turn on privileged mode\&. This is enabled automatically on startup if the
effectizzle user (group) ID aint equal ta tha real user (group) ID\&.  Turning
this option off causes tha effectizzle user n' crew IDs ta be set ta the
real user n' crew IDs\&. This option disablez sourcin user startup files\&.
If zsh is invoked as `\fBsh\fP\&' or `\fBksh\fP' wit dis option set,
\fB/etc/suid_profile\fP is sourced (afta \fB/etc/profile\fP on interactive
shells)\&. Right back up in yo muthafuckin ass. Sourcin \fB~/\&.profile\fP is disabled n' tha contentz of the
\fBENV\fP variable is ignored\&. This option cannot be chizzled rockin the
\fB\-m\fP option of \fBsetopt\fP n' \fBunsetopt\fP, n' changin it inside a
function always chizzlez it globally regardless of tha \fBLOCAL_OPTIONS\fP
option\&.
.TP
\fBRESTRICTED\fP (\fB\-r\fP)
Enablez restricted mode\&.  This option cannot be chizzled using
\fBunsetopt\fP, n' settin it inside a gangbangin' function always chizzlez it
globally regardless of tha \fBLOCAL_OPTIONS\fP option\&.  See
the section `Restricted Shell\&'\&.
.TP
\fBSHIN_STDIN\fP (\fB\-s\fP, ksh: \fB\-s\fP)
Commandz is bein read from tha standard input\&.
Commandz is read from standard input if no command is specified with
\fB\-c\fP n' no file of commandz is specified\&.  If \fBSHIN_STDIN\fP
is set explicitly on tha command line,
any argument dat would otherwise have been
taken as a gangbangin' file ta run will instead be treated as a aiiight positional
parameter\&.
Note dat settin or unsettin dis option on tha command line do not
necessarily affect tha state tha option gonna git while tha shell is
runnin \- dat is purely a indicator of whether on not commandz are
\fIactually\fP bein read from standard input\&.
Da value of dis option can only be chizzled via flags supplied at
invocation of tha shell\&.
It cannot be chizzled once zsh is hustlin\&.
.TP
\fBSINGLE_COMMAND\fP (\fB\-t\fP, ksh: \fB\-t\fP)
If tha shell is readin from standard input, it exits afta a single command
has been executed\&.  This also make tha shell non\-interactive, unless the
\fBINTERACTIVE\fP option is explicitly set on tha command line\&.
Da value of dis option can only be chizzled via flags supplied at
invocation of tha shell\&.
It cannot be chizzled once zsh is hustlin\&.
.PP
.SS "Zle"
.PD 0
.TP
.PD
\fBBEEP\fP (\fB+B\fP) <D>
Beep on error up in ZLE\&.
.TP
\fBCOMBINING_CHARS\fP
Assume dat tha terminal displays combinin charactas erectly\&.
Specifically, if a funky-ass base alphanumeric characta is followed by one or more
zero\-width punctuation characters, assume dat tha zero\-width characters
will be displayed as modifications ta tha base characta within the
same width\&.  Not all terminals handle this\&.  If dis option is not
set, zero\-width charactas is displayed separately wit special
mark\-up\&.
.RS
.PP
If dis option is set, tha pattern test \fB[[:WORD:]]\fP matches a
zero\-width punctuation characta on tha assumption dat it will be
used as part of a word up in combination wit a word character\&.
Otherwise tha base shell do not handle combinin charactas specially\&.
.RE
.TP
\fBEMACS\fP
If ZLE is loaded, turnin on dis option has tha equivalent effect
of `\fBbindkey \-e\fP\&'\&.  In addition, tha VI option is unset\&.
Turnin it off has no effect\&.  Da option settin is
not guaranteed ta reflect tha current keymap\&.  This option is
provided fo' compatibility; \fBbindkey\fP is tha recommended intercourse\&.
.TP
\fBOVERSTRIKE\fP
Start up tha line editor up in overstrike mode\&.
.TP
\fBSINGLE_LINE_ZLE\fP (\fB\-M\fP) <K>
Use single\-line command line editin instead of multi\-line\&.
.RS
.PP
Note dat although dis is on by default up in ksh emulation it only
provides superficial compatibilitizzle wit tha ksh line editor and
reduces tha effectivenizz of tha zsh line editor\&.  As it has no
effect on shell syntax, nuff playas may wish ta disable dis option
when rockin ksh emulation interactively\&.
.RE
.TP
\fBVI\fP
If ZLE is loaded, turnin on dis option has tha equivalent effect
of `\fBbindkey \-v\fP\&'\&.  In addition, tha EMACS option is unset\&.
Turnin it off has no effect\&.  Da option settin is
not guaranteed ta reflect tha current keymap\&.  This option is
provided fo' compatibility; \fBbindkey\fP is tha recommended intercourse\&.
.TP
\fBZLE\fP (\fB\-Z\fP)
Use tha zsh line editor\&.  Set by default up in interactizzle shells connected to
a terminal\&.
.PP
.SH "OPTION ALIASES"
Some options have alternatizzle names\&.  These aliases is never used for
output yo, but can be used just like aiiight option names when specifying
options ta tha shell\&.
.PP
.PD 0
.TP
.PD
\fBBRACE_EXPAND\fP
\fINO_\fP\fBIGNORE_BRACES\fP
(ksh n' bash compatibility)
.TP
\fBDOT_GLOB\fP
\fBGLOB_DOTS\fP
(bash compatibility)
.TP
\fBHASH_ALL\fP
\fBHASH_CMDS\fP
(bash compatibility)
.TP
\fBHIST_APPEND\fP
\fBAPPEND_HISTORY\fP
(bash compatibility)
.TP
\fBHIST_EXPAND\fP
\fBBANG_HIST\fP
(bash compatibility)
.TP
\fBLOG\fP
\fINO_\fP\fBHIST_NO_FUNCTIONS\fP
(ksh compatibility)
.TP
\fBMAIL_WARN\fP
\fBMAIL_WARNING\fP
(bash compatibility)
.TP
\fBONE_CMD\fP
\fBSINGLE_COMMAND\fP
(bash compatibility)
.TP
\fBPHYSICAL\fP
\fBCHASE_LINKS\fP
(ksh n' bash compatibility)
.TP
\fBPROMPT_VARS\fP
\fBPROMPT_SUBST\fP
(bash compatibility)
.TP
\fBSTDIN\fP
\fBSHIN_STDIN\fP
(ksh compatibility)
.TP
\fBTRACK_ALL\fP
\fBHASH_CMDS\fP
(ksh compatibility)
.SH "SINGLE LETTER OPTIONS"
.SS "Default set"
.PD 0
.TP
\fB\-0\fP
CORRECT
.TP
\fB\-1\fP
PRINT_EXIT_VALUE
.TP
\fB\-2\fP
\fINO_\fPBAD_PATTERN
.TP
\fB\-3\fP
\fINO_\fPNOMATCH
.TP
\fB\-4\fP
GLOB_DOTS
.TP
\fB\-5\fP
NOTIFY
.TP
\fB\-6\fP
BG_NICE
.TP
\fB\-7\fP
IGNORE_EOF
.TP
\fB\-8\fP
MARK_DIRS
.TP
\fB\-9\fP
AUTO_LIST
.TP
\fB\-B\fP
\fINO_\fPBEEP
.TP
\fB\-C\fP
\fINO_\fPCLOBBER
.TP
\fB\-D\fP
PUSHD_TO_HOME
.TP
\fB\-E\fP
PUSHD_SILENT
.TP
\fB\-F\fP
\fINO_\fPGLOB
.TP
\fB\-G\fP
NULL_GLOB
.TP
\fB\-H\fP
RM_STAR_SILENT
.TP
\fB\-I\fP
IGNORE_BRACES
.TP
\fB\-J\fP
AUTO_CD
.TP
\fB\-K\fP
\fINO_\fPBANG_HIST
.TP
\fB\-L\fP
SUN_KEYBOARD_HACK
.TP
\fB\-M\fP
SINGLE_LINE_ZLE
.TP
\fB\-N\fP
AUTO_PUSHD
.TP
\fB\-O\fP
CORRECT_ALL
.TP
\fB\-P\fP
RC_EXPAND_PARAM
.TP
\fB\-Q\fP
PATH_DIRS
.TP
\fB\-R\fP
LONG_LIST_JOBS
.TP
\fB\-S\fP
REC_EXACT
.TP
\fB\-T\fP
CDABLE_VARS
.TP
\fB\-U\fP
MAIL_WARNING
.TP
\fB\-V\fP
\fINO_\fPPROMPT_CR
.TP
\fB\-W\fP
AUTO_RESUME
.TP
\fB\-X\fP
LIST_TYPES
.TP
\fB\-Y\fP
MENU_COMPLETE
.TP
\fB\-Z\fP
ZLE
.TP
\fB\-a\fP
ALL_EXPORT
.TP
\fB\-e\fP
ERR_EXIT
.TP
\fB\-f\fP
\fINO_\fPRCS
.TP
\fB\-g\fP
HIST_IGNORE_SPACE
.TP
\fB\-h\fP
HIST_IGNORE_DUPS
.TP
\fB\-i\fP
INTERACTIVE
.TP
\fB\-k\fP
INTERACTIVE_COMMENTS
.TP
\fB\-l\fP
LOGIN
.TP
\fB\-m\fP
MONITOR
.TP
\fB\-n\fP
\fINO_\fPEXEC
.TP
\fB\-p\fP
PRIVILEGED
.TP
\fB\-r\fP
RESTRICTED
.TP
\fB\-s\fP
SHIN_STDIN
.TP
\fB\-t\fP
SINGLE_COMMAND
.TP
\fB\-u\fP
\fINO_\fPUNSET
.TP
\fB\-v\fP
VERBOSE
.TP
\fB\-w\fP
CHASE_LINKS
.TP
\fB\-x\fP
XTRACE
.TP
\fB\-y\fP
SH_WORD_SPLIT
.PD
.SS "sh/ksh emulation set"
.PD 0
.TP
\fB\-C\fP
\fINO_\fPCLOBBER
.TP
\fB\-T\fP
TRAPS_ASYNC
.TP
\fB\-X\fP
MARK_DIRS
.TP
\fB\-a\fP
ALL_EXPORT
.TP
\fB\-b\fP
NOTIFY
.TP
\fB\-e\fP
ERR_EXIT
.TP
\fB\-f\fP
\fINO_\fPGLOB
.TP
\fB\-i\fP
INTERACTIVE
.TP
\fB\-l\fP
LOGIN
.TP
\fB\-m\fP
MONITOR
.TP
\fB\-n\fP
\fINO_\fPEXEC
.TP
\fB\-p\fP
PRIVILEGED
.TP
\fB\-r\fP
RESTRICTED
.TP
\fB\-s\fP
SHIN_STDIN
.TP
\fB\-t\fP
SINGLE_COMMAND
.TP
\fB\-u\fP
\fINO_\fPUNSET
.TP
\fB\-v\fP
VERBOSE
.TP
\fB\-x\fP
XTRACE
.PD
.SS "Also note"
.PD 0
.TP
\fB\-A\fP
Used by \fBset\fP fo' settin arrays
.TP
\fB\-b\fP
Used on tha command line ta specify end of option processing
.TP
\fB\-c\fP
Used on tha command line ta specify a single command
.TP
\fB\-m\fP
Used by \fBsetopt\fP fo' pattern\-matchin option setting
.TP
\fB\-o\fP
Used up in all places ta allow use of long option names
.TP
\fB\-s\fP
Used by \fBset\fP ta sort positionizzle parameters
.PD
