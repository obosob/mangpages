.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PKCS12 1"
.TH PKCS12 1 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
pkcs12 \- PKCS#12 file utility
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBopenssl\fR \fBpkcs12\fR
[\fB\-export\fR]
[\fB\-chain\fR]
[\fB\-inkey filename\fR]
[\fB\-certfile filename\fR]
[\fB\-name name\fR]
[\fB\-caname name\fR]
[\fB\-in filename\fR]
[\fB\-out filename\fR]
[\fB\-noout\fR]
[\fB\-nomacver\fR]
[\fB\-nocerts\fR]
[\fB\-clcerts\fR]
[\fB\-cacerts\fR]
[\fB\-nokeys\fR]
[\fB\-info\fR]
[\fB\-des | \-des3 | \-idea | \-aes128 | \-aes192 | \-aes256 | \-camellia128 | \-camellia192 | \-camellia256 | \-nodes\fR]
[\fB\-noiter\fR]
[\fB\-macita | \-nomacita | \-nomac\fR]
[\fB\-twopass\fR]
[\fB\-descert\fR]
[\fB\-certpbe cipher\fR]
[\fB\-keypbe cipher\fR]
[\fB\-macalg digest\fR]
[\fB\-keyex\fR]
[\fB\-keysig\fR]
[\fB\-password arg\fR]
[\fB\-passin arg\fR]
[\fB\-passout arg\fR]
[\fB\-rand file(s)\fR]
[\fB\-CAfile file\fR]
[\fB\-CApath dir\fR]
[\fB\-CSP name\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \fBpkcs12\fR command allows PKCS#12 filez (sometimes referred ta as
\&\s-1PFX\s0 files) ta be pimped n' parsed. Y'all KNOW dat shit, muthafucka! PKCS#12 filez is used by several
programs includin Netscape, \s-1MSIE\s0 n' \s-1MS\s0 Outlook.
.SH "COMMAND OPTIONS"
.IX Header "COMMAND OPTIONS"
There is a shitload of options tha meanin of some dependz of whether a PKCS#12 file
is bein pimped or parsed. Y'all KNOW dat shit, muthafucka! By default a PKCS#12 file is parsed. Y'all KNOW dat shit, muthafucka! A PKCS#12
file can be pimped by rockin tha \fB\-export\fR option (see below).
.SH "PARSING OPTIONS"
.IX Header "PARSING OPTIONS"
.IP "\fB\-in filename\fR" 4
.IX Item "-in filename"
This specifies filename of tha PKCS#12 file ta be parsed. Y'all KNOW dat shit, muthafucka! Standard input is used
by default.
.IP "\fB\-out filename\fR" 4
.IX Item "-out filename"
Da filename ta write certificates n' private keys to, standard output by
default.  They is all freestyled up in \s-1PEM\s0 format.
.IP "\fB\-pass arg\fR, \fB\-passin arg\fR" 4
.IX Item "-pass arg, -passin arg"
the PKCS#12 file (i.e. input file) password source. For mo' shiznit about
the format of \fBarg\fR peep tha \fB\s-1PASS PHRASE ARGUMENTS\s0\fR section in
\&\fIopenssl\fR\|(1).
.IP "\fB\-passout arg\fR" 4
.IX Item "-passout arg"
pass phrase source ta encrypt any outputed private keys with. For more
information bout tha format of \fBarg\fR peep tha \fB\s-1PASS PHRASE ARGUMENTS\s0\fR section
in \fIopenssl\fR\|(1).
.IP "\fB\-noout\fR" 4
.IX Item "-noout"
this option inhibits output of tha keys n' certificates ta tha output file
version of tha PKCS#12 file.
.IP "\fB\-clcerts\fR" 4
.IX Item "-clcerts"
only output client certificates (not \s-1CA\s0 certificates).
.IP "\fB\-cacerts\fR" 4
.IX Item "-cacerts"
only output \s-1CA\s0 certificates (not client certificates).
.IP "\fB\-nocerts\fR" 4
.IX Item "-nocerts"
no certificates at all is ghon be output.
.IP "\fB\-nokeys\fR" 4
.IX Item "-nokeys"
no private keys is ghon be output.
.IP "\fB\-info\fR" 4
.IX Item "-info"
output additionizzle shiznit bout tha PKCS#12 file structure, algorithms used and
iteration counts.
.IP "\fB\-des\fR" 4
.IX Item "-des"
use \s-1DES\s0 ta encrypt private keys before outputting.
.IP "\fB\-des3\fR" 4
.IX Item "-des3"
use triple \s-1DES\s0 ta encrypt private keys before outputting, dis is tha default.
.IP "\fB\-idea\fR" 4
.IX Item "-idea"
use \s-1IDEA\s0 ta encrypt private keys before outputting.
.IP "\fB\-aes128\fR, \fB\-aes192\fR, \fB\-aes256\fR" 4
.IX Item "-aes128, -aes192, -aes256"
use \s-1AES\s0 ta encrypt private keys before outputting.
.IP "\fB\-camellia128\fR, \fB\-camellia192\fR, \fB\-camellia256\fR" 4
.IX Item "-camellia128, -camellia192, -camellia256"
use Camellia ta encrypt private keys before outputting.
.IP "\fB\-nodes\fR" 4
.IX Item "-nodes"
don't encrypt tha private keys at all.
.IP "\fB\-nomacver\fR" 4
.IX Item "-nomacver"
don't attempt ta verify tha integritizzle \s-1MAC\s0 before readin tha file.
.IP "\fB\-twopass\fR" 4
.IX Item "-twopass"
prompt fo' separate integritizzle n' encryption passwords: most software
always assumes these is tha same so dis option will render such
PKCS#12 filez unreadable.
.SH "FILE CREATION OPTIONS"
.IX Header "FILE CREATION OPTIONS"
.IP "\fB\-export\fR" 4
.IX Item "-export"
This option specifies dat a PKCS#12 file is ghon be pimped rather than
parsed.
.IP "\fB\-out filename\fR" 4
.IX Item "-out filename"
This specifies filename ta write tha PKCS#12 file to. Right back up in yo muthafuckin ass. Standard output is used
by default.
.IP "\fB\-in filename\fR" 4
.IX Item "-in filename"
Da filename ta read certificates n' private keys from, standard input by
default.  They must all be up in \s-1PEM\s0 format. Da order don't matta but one
private key n' its correspondin certificate should be present. If additional
certificates is present they will also be included up in tha PKCS#12 file.
.IP "\fB\-inkey filename\fR" 4
.IX Item "-inkey filename"
file ta read private key from. If not present then a private key must be present
in tha input file.
.IP "\fB\-name bumpin'name\fR" 4
.IX Item "-name bumpin'name"
This specifies tha \*(L"friendly name\*(R" fo' tha certificate n' private key. This
name is typically displayed up in list boxes by software importin tha file.
.IP "\fB\-certfile filename\fR" 4
.IX Item "-certfile filename"
A filename ta read additionizzle certificates from.
.IP "\fB\-caname bumpin'name\fR" 4
.IX Item "-caname bumpin'name"
This specifies tha \*(L"friendly name\*(R" fo' other certificates. This option may be
used multiple times ta specify names fo' all certificates up in tha order they
appear. Shiiit, dis aint no joke. Netscape ignores thugged-out names on other certificates whereas \s-1MSIE\s0
displays em.
.IP "\fB\-pass arg\fR, \fB\-passout arg\fR" 4
.IX Item "-pass arg, -passout arg"
the PKCS#12 file (i.e. output file) password source. For mo' shiznit about
the format of \fBarg\fR peep tha \fB\s-1PASS PHRASE ARGUMENTS\s0\fR section in
\&\fIopenssl\fR\|(1).
.IP "\fB\-passin password\fR" 4
.IX Item "-passin password"
pass phrase source ta decrypt any input private keys with. For mo' shiznit
about tha format of \fBarg\fR peep tha \fB\s-1PASS PHRASE ARGUMENTS\s0\fR section in
\&\fIopenssl\fR\|(1).
.IP "\fB\-chain\fR" 4
.IX Item "-chain"
if dis option is present then a attempt is made ta include tha entire
certificate chain of tha user certificate. Da standard \s-1CA\s0 store is used
for dis search. If tha search fails it is considered a gangbangin' fatal error.
.IP "\fB\-descert\fR" 4
.IX Item "-descert"
encrypt tha certificate rockin triple \s-1DES,\s0 dis may render tha PKCS#12
file unreadable by some \*(L"export grade\*(R" software. By default tha private
key is encrypted rockin triple \s-1DES\s0 n' tha certificate rockin 40 bit \s-1RC2.\s0
.IP "\fB\-keypbe alg\fR, \fB\-certpbe alg\fR" 4
.IX Item "-keypbe alg, -certpbe alg"
these options allow tha algorithm used ta encrypt tha private key and
certificates ta be selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. Any PKCS#5 v1.5 or PKCS#12 \s-1PBE\s0 algorithm name
can be used (see \fB\s-1NOTES\s0\fR section fo' mo' shiznit). If a a cold-ass lil cipher name
(as output by tha \fBlist-cipher-algorithms\fR command is specified then it
is used wit PKCS#5 v2.0. For interoperabilitizzle reasons it be advisable ta only
use PKCS#12 algorithms.
.IP "\fB\-keyex|\-keysig\fR" 4
.IX Item "-keyex|-keysig"
specifies dat tha private key is ta be used fo' key exchange or just signing.
This option is only interpreted by \s-1MSIE\s0 n' similar \s-1MS\s0 software. Normally
\&\*(L"export grade\*(R" software will only allow 512 bit \s-1RSA\s0 keys ta be used for
encryption purposes but arbitrary length keys fo' signing. Da \fB\-keysig\fR
option marks tha key fo' signin only. Right back up in yo muthafuckin ass. Signin only keys can be used for
S/MIME signing, authenticode (ActiveX control signing)  n' \s-1SSL\s0 client
authentication, however cuz of a funky-ass bug only \s-1MSIE 5.0\s0 n' lata support
the use of signin only keys fo' \s-1SSL\s0 client authentication.
.IP "\fB\-macalg digest\fR" 4
.IX Item "-macalg digest"
specify tha \s-1MAC\s0 digest algorithm. If not included dem \s-1SHA1\s0 is ghon be used.
.IP "\fB\-nomaciter\fR, \fB\-noiter\fR" 4
.IX Item "-nomaciter, -noiter"
these options affect tha iteration counts on tha \s-1MAC\s0 n' key algorithms.
Unless you wish ta produce filez compatible wit \s-1MSIE 4.0\s0 you should leave
these options ridin' solo.
.Sp
To discourage attacks by rockin big-ass dictionariez of common passwordz the
algorithm dat derives keys from passwordz can have a iteration count applied
to it: dis causes a cold-ass lil certain part of tha algorithm ta be repeated n' slows it
down. I aint talkin' bout chicken n' gravy biatch. Da \s-1MAC\s0 is used ta check tha file integritizzle but since it will normally
have tha same password as tha keys n' certificates it could also be attacked.
By default both \s-1MAC\s0 n' encryption iteration counts is set ta 2048, using
these options tha \s-1MAC\s0 n' encryption iteration counts can be set ta 1, since
this reduces tha file securitizzle you should not use these options unless you
really have to. Most software supports both \s-1MAC\s0 n' key iteration counts.
\&\s-1MSIE 4.0\s0 don't support \s-1MAC\s0 iteration counts so it needz tha \fB\-nomaciter\fR
option.
.IP "\fB\-maciter\fR" 4
.IX Item "-maciter"
This option is included fo' compatibilitizzle wit previous versions, it used
to be needed ta use \s-1MAC\s0 iterations counts but they is now used by default.
.IP "\fB\-nomac\fR" 4
.IX Item "-nomac"
don't attempt ta provide tha \s-1MAC\s0 integrity.
.IP "\fB\-rand file(s)\fR" 4
.IX Item "-rand file(s)"
a file or filez containin random data used ta seed tha random number
generator, or a \s-1EGD\s0 socket (see \fIRAND_egd\fR\|(3)).
Multiple filez can be specified separated by a OS-dependent character.
Da separator is \fB;\fR fo' MS-Windows, \fB,\fR fo' OpenVMS, n' \fB:\fR for
all others.
.IP "\fB\-CAfile file\fR" 4
.IX Item "-CAfile file"
\&\s-1CA\s0 storage as a gangbangin' file.
.IP "\fB\-CApath dir\fR" 4
.IX Item "-CApath dir"
\&\s-1CA\s0 storage as a gangbangin' finger-lickin' directory. This directory must be a standard certificate
directory: dat be a hash of each subject name (usin \fBx509 \-hash\fR) should be
linked ta each certificate.
.IP "\fB\-CSP name\fR" 4
.IX Item "-CSP name"
write \fBname\fR as a Microsizzlez \s-1CSP\s0 name.
.SH "NOTES"
.IX Header "NOTES"
Although there be a big-ass number of options most of dem is straight-up rarely
used. Y'all KNOW dat shit, muthafucka! For PKCS#12 file parsin only \fB\-in\fR n' \fB\-out\fR need ta be used
for PKCS#12 file creation \fB\-export\fR n' \fB\-name\fR is also used.
.PP
If none of tha \fB\-clcerts\fR, \fB\-cacerts\fR or \fB\-nocerts\fR options is present
then all certificates is ghon be output up in tha order they step tha fuck up in tha input
PKCS#12 files. There is no guarantee dat tha straight-up original gangsta certificate present is
the one correspondin ta tha private key. Certain software which requires
a private key n' certificate n' assumes tha straight-up original gangsta certificate up in the
file is tha one correspondin ta tha private key: dis may not always
be tha case. Usin tha \fB\-clcerts\fR option will solve dis problem by only
outputtin tha certificate correspondin ta tha private key. If tha \s-1CA\s0
certificates is required then they can be output ta a separate file using
the \fB\-nokeys \-cacerts\fR options ta just output \s-1CA\s0 certificates.
.PP
Da \fB\-keypbe\fR n' \fB\-certpbe\fR algorithms allow tha precise encryption
algorithms fo' private keys n' certificates ta be specified. Y'all KNOW dat shit, muthafucka! Normally
the defaults is fine but occasionally software can't handle triple \s-1DES\s0
encrypted private keys, then tha option \fB\-keypbe \s-1PBE\-SHA1\-RC2\-40\s0\fR can
be used ta reduce tha private key encryption ta 40 bit \s-1RC2 fo' realz. A\s0 complete
description of all algorithms is contained up in tha \fBpkcs8\fR manual page.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Parse a PKCS#12 file n' output it ta a gangbangin' file:
.PP
.Vb 1
\& openssl pkcs12 \-in file.p12 \-out file.pem
.Ve
.PP
Output only client certificates ta a gangbangin' file:
.PP
.Vb 1
\& openssl pkcs12 \-in file.p12 \-clcerts \-out file.pem
.Ve
.PP
Don't encrypt tha private key:
.PP
.Vb 1
\& openssl pkcs12 \-in file.p12 \-out file.pem \-nodes
.Ve
.PP
Print some info on some PKCS#12 file:
.PP
.Vb 1
\& openssl pkcs12 \-in file.p12 \-info \-noout
.Ve
.PP
Smoke a PKCS#12 file:
.PP
.Vb 1
\& openssl pkcs12 \-export \-in file.pem \-out file.p12 \-name "My fuckin Certificate"
.Ve
.PP
Include some extra certificates:
.PP
.Vb 2
\& openssl pkcs12 \-export \-in file.pem \-out file.p12 \-name "My fuckin Certificate" \e
\&  \-certfile othercerts.pem
.Ve
.SH "BUGS"
.IX Header "BUGS"
Some would argue dat tha PKCS#12 standard is one big-ass bug :\-)
.PP
Versionz of OpenSSL before 0.9.6a had a funky-ass bug up in tha PKCS#12 key generation
routines. Under rare circumstances dis could produce a PKCS#12 file encrypted
with a invalid key fo' realz. As a result some PKCS#12 filez which triggered dis bug
from other implementations (\s-1MSIE\s0 or Netscape) could not be decrypted
by OpenSSL n' similarly OpenSSL could produce PKCS#12 filez which could
not be decrypted by other implementations. Da chancez of producin such
a file is relatively small: less than 1 up in 256.
.PP
A side effect of fixin dis bug is dat any oldschool invalidly encrypted PKCS#12
filez cannot no longer be parsed by tha fixed version. I aint talkin' bout chicken n' gravy biatch. Under such circumstances
the \fBpkcs12\fR utilitizzle will report dat tha \s-1MAC\s0 is \s-1OK\s0 but fail wit a thugged-out decryption
error when extractin private keys.
.PP
This problem can be resolved by extractin tha private keys n' certificates
from tha PKCS#12 file rockin a olda version of OpenSSL n' rebustin tha PKCS#12
file from tha keys n' certificates rockin a newer version of OpenSSL. For example:
.PP
.Vb 2
\& old\-openssl \-in bad.p12 \-out keycerts.pem
\& openssl \-in keycerts.pem \-export \-name "My fuckin PKCS#12 file" \-out fixed.p12
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIpkcs8\fR\|(1)
