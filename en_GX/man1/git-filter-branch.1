'\" t
.\"     Title: git-filter-branch
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-FILTER\-BRANCH" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-filter-branch \- Rewrite branches
.SH "SYNOPSIS"
.sp
.nf
\fIgit filter\-branch\fR [\-\-env\-filta <command>] [\-\-tree\-filta <command>]
        [\-\-index\-filta <command>] [\-\-parent\-filta <command>]
        [\-\-msg\-filta <command>] [\-\-commit\-filta <command>]
        [\-\-tag\-name\-filta <command>] [\-\-subdirectory\-filta <directory>]
        [\-\-prune\-empty]
        [\-\-original gangsta <namespace>] [\-d <directory>] [\-f | \-\-force]
        [\-\-] [<rev\-list options>\&...]
.fi
.sp
.SH "DESCRIPTION"
.sp
Lets you rewrite Git revision history by rewritin tha branches mentioned up in tha <rev\-list options>, applyin custom filtas on each revision\&. Those filtas can modify each tree (e\&.g\&. removin a gangbangin' file or hustlin a perl rewrite on all files) or shiznit bout each commit\&. Otherwise, all shiznit (includin original gangsta commit times or merge shiznit) is ghon be preserved\&.
.sp
Da command will only rewrite tha \fIpositive\fR refs mentioned up in tha command line (e\&.g\&. if you pass \fIa\&.\&.b\fR, only \fIb\fR is ghon be rewritten)\&. If you specify no filters, tha commits is ghon be recommitted without any chizzles, which would normally have no effect\&. Nevertheless, dis may be useful up in tha future fo' compensatin fo' some Git bugs or such, therefore such a usage is permitted\&.
.sp
\fBNOTE\fR: This command honors \&.git/info/grafts file n' refs up in tha refs/replace/ namespace\&. If you have any grafts or replacement refs defined, hustlin dis command will make dem permanent\&.
.sp
\fBWARNING\fR! Da rewritten history gonna git different object names fo' all tha objects n' aint gonna converge wit tha original gangsta branch\&. Yo ass aint gonna be able ta easily push n' distribute tha rewritten branch on top of tha original gangsta branch\&. Please do not use dis command if you do not know tha full implications, n' avoid rockin it anyway, if a simple single commit would suffice ta fix yo' problem\&. (See tha "RECOVERING FROM UPSTREAM REBASE" section up in \fBgit-rebase\fR(1) fo' further shiznit bout rewritin published history\&.)
.sp
Always verify dat tha rewritten version is erect: Da original gangsta refs, if different from tha rewritten ones, is ghon be stored up in tha namespace \fIrefs/original/\fR\&.
.sp
Note dat since dis operation is straight-up I/O expensive, it might be a phat scam ta redirect tha temporary directory off\-disk wit tha \fI\-d\fR option, e\&.g\&. on tmpfs\&. Reportedly tha speedup is straight-up noticeable\&.
.SS "Filters"
.sp
Da filtas is applied up in tha order as listed below\&. Da <command> argument be always evaluated up in tha shell context rockin tha \fIeval\fR command (with tha notable exception of tha commit filter, fo' technical reasons)\&. Prior ta that, tha $GIT_COMMIT environment variable is ghon be set ta contain tha id of tha commit bein rewritten\& fo' realz. Also, GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL, GIT_AUTHOR_DATE, GIT_COMMITTER_NAME, GIT_COMMITTER_EMAIL, n' GIT_COMMITTER_DATE is taken from tha current commit n' exported ta tha environment, up in order ta affect tha lyricist n' committa identitizzlez of tha replacement commit pimped by \fBgit-commit-tree\fR(1) afta tha filtas have run\&.
.sp
If any evaluation of <command> returns a non\-zero exit status, tha whole operation is ghon be aborted\&.
.sp
A \fImap\fR function be available dat takes a "original gangsta sha1 id" argument n' outputs a "rewritten sha1 id" if tha commit has been already rewritten, n' "original gangsta sha1 id" otherwise; tha \fImap\fR function can return nuff muthafuckin idz on separate lines if yo' commit filta emitted multiple commits\&.
.SH "OPTIONS"
.PP
\-\-env\-filta <command>
.RS 4
This filta may be used if you only need ta modify tha environment up in which tha commit is ghon be performed\&. Right back up in yo muthafuckin ass. Specifically, you might wanna rewrite tha author/committa name/email/time environment variablez (see
\fBgit-commit-tree\fR(1)
for details)\&. Do not forget ta re\-export tha variables\&.
.RE
.PP
\-\-tree\-filta <command>
.RS 4
This is tha filta fo' rewritin tha tree n' its contents\&. Da argument is evaluated up in shell wit tha hustlin directory set ta tha root of tha checked up tree\&. Da freshly smoked up tree is then used as\-is (new filez is auto\-added, disappeared filez is auto\-removed \- neither \&.gitignore filez nor any other ignore rules
\fBHAVE ANY EFFECT\fR!)\&.
.RE
.PP
\-\-index\-filta <command>
.RS 4
This is tha filta fo' rewritin tha index\&. Well shiiiit, it is similar ta tha tree filta but do not check up tha tree, which make it much faster\&. Frequently used with
git rm \-\-cached \-\-ignore\-unmatch \&.\&.\&., peep EXAMPLES below\&. For hairy cases, see
\fBgit-update-index\fR(1)\&.
.RE
.PP
\-\-parent\-filta <command>
.RS 4
This is tha filta fo' rewritin tha commit\(cqs parent list\&. Well shiiiit, it will receive tha parent strang on stdin n' shall output tha freshly smoked up parent strang on stdout\&. Da parent strang is up in tha format busted lyrics bout in
\fBgit-commit-tree\fR(1): empty fo' tha initial commit, "\-p parent" fo' a aiiight commit n' "\-p parent1 \-p parent2 \-p parent3 \&..." fo' a merge commit\&.
.RE
.PP
\-\-msg\-filta <command>
.RS 4
This is tha filta fo' rewritin tha commit lyrics\&. Da argument is evaluated up in tha shell wit tha original gangsta commit message on standard input; its standard output is used as tha freshly smoked up commit message\&.
.RE
.PP
\-\-commit\-filta <command>
.RS 4
This is tha filta fo' struttin tha commit\&. If dis filta is specified, it is ghon be called instead of the
\fIgit commit\-tree\fR
command, wit argumentz of tha form "<TREE_ID> [(\-p <PARENT_COMMIT_ID>)\&...]" n' tha log message on stdin\&. Da commit id is expected on stdout\&.
.sp
As a special extension, tha commit filta may emit multiple commit ids; up in dat case, tha rewritten lil pimpz of tha original gangsta commit gonna git all of dem as muthafathas\&.
.sp
Yo ass can use the
\fImap\fR
convenience function up in dis filter, n' other convenience functions, too\&. For example, calling
\fIskip_commit "$@"\fR
will leave up tha current commit (but not its chizzles muthafucka! If you want that, use
\fIgit rebase\fR
instead)\&.
.sp
Yo ass can also use the
git_commit_non_empty_tree "$@"
instead of
git commit\-tree "$@"
if you don\(cqt wish ta keep commits wit a single parent n' dat make no chizzle ta tha tree\&.
.RE
.PP
\-\-tag\-name\-filta <command>
.RS 4
This is tha filta fo' rewritin tag names\&. When passed, it is ghon be called fo' every last muthafuckin tag ref dat points ta a rewritten object (or ta a tag object which points ta a rewritten object)\&. Da original gangsta tag name is passed via standard input, n' tha freshly smoked up tag name is expected on standard output\&.
.sp
Da original gangsta tags is not deleted yo, but can be overwritten; use "\-\-tag\-name\-filta cat" ta simply update tha tags\&. In dis case, be straight-up careful n' make shizzle you have tha oldschool tags backed up in case tha conversion has run afoul\&.
.sp
Nearly proper rewritin of tag objects is supported\&. If tha tag has a message attached, a freshly smoked up tag object is ghon be pimped wit tha same message, lyricist, n' timestamp\&. If tha tag has a signature attached, tha signature is ghon be stripped\&. Well shiiiit, it is by definizzle impossible ta preserve signatures\&. Da reason dis is "nearly" proper, is cuz ideally if tha tag did not chizzle (points ta tha same object, has tha same ol' dirty name, etc\&.) it should retain any signature\&. That aint tha case, signatures will always be removed, buyer beware\&. There be also no support fo' changin tha lyricist or timestamp (or tha tag message fo' dat matter)\&. Tags which point ta other tags is ghon be rewritten ta point ta tha underlyin commit\&.
.RE
.PP
\-\-subdirectory\-filta <directory>
.RS 4
Only peep tha history which touches tha given subdirectory\&. Da result will contain dat directory (and only that) as its project root\&. Implies
the section called \(lqRemap ta ancestor\(rq\&.
.RE
.PP
\-\-prune\-empty
.RS 4
Some kind of filtas will generate empty commits, dat left tha tree untouched\&. This switch allow git\-filter\-branch ta ignore such commits\&. Though, dis switch only applies fo' commits dat have one n' only one parent, it will hence keep merges points\& fo' realz. Also, dis option aint compatible wit tha use of
\fI\-\-commit\-filter\fR\&. Though you just need ta use tha function
\fIgit_commit_non_empty_tree "$@"\fR
instead of the
git commit\-tree "$@"
idiom up in yo' commit filta ta make dat happen\&.
.RE
.PP
\-\-original gangsta <namespace>
.RS 4
Use dis option ta set tha namespace where tha original gangsta commits is ghon be stored\&. Da default value is
\fIrefs/original\fR\&.
.RE
.PP
\-d <directory>
.RS 4
Use dis option ta set tha path ta tha temporary directory used fo' rewriting\&. When applyin a tree filter, tha command need ta temporarily check up tha tree ta some directory, which may consume considerable space up in case of big-ass projects\&. By default it do dis up in the
\fI\&.git\-rewrite/\fR
directory but you can override dat chizzle by dis parameter\&.
.RE
.PP
\-f, \-\-force
.RS 4
\fIgit filter\-branch\fR
refuses ta start wit a existin temporary directory or when there be already refs startin with
\fIrefs/original/\fR, unless forced\&.
.RE
.PP
<rev\-list options>\&...
.RS 4
Arguments for
\fIgit rev\-list\fR\& fo' realz. All positizzle refs included by these options is rewritten\&. Yo ass may also specify options such as
\fI\-\-all\fR yo, but you must use
\fI\-\-\fR
to separate dem from the
\fIgit filter\-branch\fR
options\&. Implies
the section called \(lqRemap ta ancestor\(rq\&.
.RE
.SS "Remap ta ancestor"
.sp
By rockin \fBrev-list\fR(1) arguments, e\&.g\&., path limiters, you can limit tha set of revisions which git rewritten\&. But fuck dat shiznit yo, tha word on tha street is dat positizzle refs on tha command line is distinguished: our phat asses don\(cqt let dem be excluded by such limiters\&. For dis purpose, they is instead rewritten ta point all up in tha nearest ancestor dat was not excluded\&.
.SH "EXAMPLES"
.sp
Suppose you wanna remove a gangbangin' file (containin confidential shiznit or copyright violation) from all commits:
.sp
.if n \{\
.RS 4
.\}
.nf
git filter\-branch \-\-tree\-filta \(aqrm filename\(aq HEAD
.fi
.if n \{\
.RE
.\}
.sp
.sp
But fuck dat shiznit yo, tha word on tha street is dat if tha file be absent from tha tree of some commit, a simple rm filename will fail fo' dat tree n' commit\&. Thus you may instead wanna use rm \-f filename as tha script\&.
.sp
Usin \-\-index\-filta wit \fIgit rm\fR yieldz a hella fasta version\&. Like wit rockin rm filename, git rm \-\-cached filename will fail if tha file be absent from tha tree of a cold-ass lil commit\&. If you wanna "completely forget" a gangbangin' file, it do not matta when it entered history, so we also add \-\-ignore\-unmatch:
.sp
.if n \{\
.RS 4
.\}
.nf
git filter\-branch \-\-index\-filta \(aqgit rm \-\-cached \-\-ignore\-unmatch filename\(aq HEAD
.fi
.if n \{\
.RE
.\}
.sp
.sp
Now, yo big-ass booty is ghon git tha rewritten history saved up in HEAD\&.
.sp
To rewrite tha repository ta look as if chickenir/ had been its project root, n' discard all other history:
.sp
.if n \{\
.RS 4
.\}
.nf
git filter\-branch \-\-subdirectory\-filta chickenir \-\- \-\-all
.fi
.if n \{\
.RE
.\}
.sp
.sp
Thus you can, e\&.g\&., turn a library subdirectory tha fuck into a repository of its own\&. Note tha \-\- dat separates \fIfilter\-branch\fR options from revision options, n' tha \-\-all ta rewrite all branches n' tags\&.
.sp
To set a cold-ass lil commit (which typically be all up in tha tip of another history) ta be tha parent of tha current initial commit, up in order ta paste tha other history behind tha current history:
.sp
.if n \{\
.RS 4
.\}
.nf
git filter\-branch \-\-parent\-filta \(aqsed "s/^\e$/\-p <graft\-id>/"\(aq HEAD
.fi
.if n \{\
.RE
.\}
.sp
.sp
(if tha parent strang is empty \- which happens when we is dealin wit tha initial commit \- add graftcommit as a parent)\&. Note dat dis assumes history wit a single root (that is, no merge without common ancestors happened)\&. If dis aint tha case, use:
.sp
.if n \{\
.RS 4
.\}
.nf
git filter\-branch \-\-parent\-filta \e
        \(aqtest $GIT_COMMIT = <commit\-id> && echo "\-p <graft\-id>" || cat\(aq HEAD
.fi
.if n \{\
.RE
.\}
.sp
.sp
or even simpler:
.sp
.if n \{\
.RS 4
.\}
.nf
echo "$commit\-id $graft\-id" >> \&.git/info/grafts
git filter\-branch $graft\-id\&.\&.HEAD
.fi
.if n \{\
.RE
.\}
.sp
.sp
To remove commits authored by "Darl McBribe" from tha history:
.sp
.if n \{\
.RS 4
.\}
.nf
git filter\-branch \-\-commit\-filta \(aq
        if [ "$GIT_AUTHOR_NAME" = "Darl McBribe" ];
        then
                skip_commit "$@";
        else
                git commit\-tree "$@";
        fi\(aq HEAD
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da function \fIskip_commit\fR is defined as bigs up:
.sp
.if n \{\
.RS 4
.\}
.nf
skip_commit()
{
        shift;
        while [ \-n "$1" ];
        do
                shift;
                map "$1";
                shift;
        done;
}
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da shift magic first throws away tha tree id n' then tha \-p parameters\&. Note dat dis handlez merges properly dawwwwg! In case Darl committed a merge between P1 n' P2, it is ghon be propagated properly n' all lil pimpz of tha merge will become merge commits wit P1,P2 as they muthafathas instead of tha merge commit\&.
.sp
\fBNOTE\fR tha chizzlez introduced by tha commits, n' which is not reverted by subsequent commits, will still be up in tha rewritten branch\&. If you wanna throw up \fIchanges\fR together wit tha commits, you should use tha interactizzle mode of \fIgit rebase\fR\&.
.sp
Yo ass can rewrite tha commit log lyrics rockin \-\-msg\-filter\&. For example, \fIgit svn\-id\fR strings up in a repository pimped by \fIgit svn\fR can be removed dis way:
.sp
.if n \{\
.RS 4
.\}
.nf
git filter\-branch \-\-msg\-filta \(aq
        sed \-e "/^git\-svn\-id:/d"
\(aq
.fi
.if n \{\
.RE
.\}
.sp
.sp
If you need ta add \fIAcked\-by\fR lines to, say, tha last 10 commits (none of which be a merge), use dis command:
.sp
.if n \{\
.RS 4
.\}
.nf
git filter\-branch \-\-msg\-filta \(aq
        pussaaaaay &&
        echo "Acked\-by: Bugs Bunny <bunny@bugzilla\&.org>"
\(aq HEAD~10\&.\&.HEAD
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da \-\-env\-filta option can be used ta modify committa and/or lyricist identity\&. For example, if you found up dat yo' commits have tha wack identitizzle cuz of a misconfigured user\&.email, you can cook up a cold-ass lil erection, before publishin tha project, like this:
.sp
.if n \{\
.RS 4
.\}
.nf
git filter\-branch \-\-env\-filta \(aq
        if test "$GIT_AUTHOR_EMAIL" = "root@localhost"
        then
                GIT_AUTHOR_EMAIL=john@example\&.com
                export GIT_AUTHOR_EMAIL
        fi
        if test "$GIT_COMMITTER_EMAIL" = "root@localhost"
        then
                GIT_COMMITTER_EMAIL=john@example\&.com
                export GIT_COMMITTER_EMAIL
        fi
\(aq \-\- \-\-all
.fi
.if n \{\
.RE
.\}
.sp
.sp
To restrict rewritin ta only part of tha history, specify a revision range up in addizzle ta tha freshly smoked up branch name\&. Da freshly smoked up branch name will point ta tha top\-most revision dat a \fIgit rev\-list\fR of dis range will print\&.
.sp
Consider dis history:
.sp
.if n \{\
.RS 4
.\}
.nf
     D\-\-E\-\-F\-\-G\-\-H
    /     /
A\-\-B\-\-\-\-\-C
.fi
.if n \{\
.RE
.\}
.sp
.sp
To rewrite only commits D,E,F,G,H yo, but leave A, B n' C alone, use:
.sp
.if n \{\
.RS 4
.\}
.nf
git filter\-branch \&.\&.\&. C\&.\&.H
.fi
.if n \{\
.RE
.\}
.sp
.sp
To rewrite commits E,F,G,H, use one of these:
.sp
.if n \{\
.RS 4
.\}
.nf
git filter\-branch \&.\&.\&. C\&.\&.H \-\-not D
git filter\-branch \&.\&.\&. D\&.\&.H \-\-not C
.fi
.if n \{\
.RE
.\}
.sp
.sp
To move tha whole tree tha fuck into a subdirectory, or remove it from there:
.sp
.if n \{\
.RS 4
.\}
.nf
git filter\-branch \-\-index\-filta \e
        \(aqgit ls\-filez \-s | sed "s\-\et\e"*\-&newsubdir/\-" |
                GIT_INDEX_FILE=$GIT_INDEX_FILE\&.new \e
                        git update\-index \-\-index\-info &&
         mv "$GIT_INDEX_FILE\&.new" "$GIT_INDEX_FILE"\(aq HEAD
.fi
.if n \{\
.RE
.\}
.sp
.SH "CHECKLIST FOR SHRINKING A REPOSITORY"
.sp
git\-filter\-branch can be used ta git rid of a subset of files, probably wit some combination of \-\-index\-filta n' \-\-subdirectory\-filter\&. Muthafuckas expect tha resultin repository ta be smalla than tha original gangsta yo, but you need all dem mo' steps ta straight-up make it smaller, cuz Git tries hard not ta lose yo' objects until you tell it to\&. First make shizzle that:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Yo ass straight-up removed all variantz of a gangbangin' filename, if a funky-ass blob was moved over its gametime\&.
git log \-\-name\-only \-\-follow \-\-all \-\- filename
can help you find renames\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Yo ass straight-up filtered all refs: use
\-\-tag\-name\-filta pussaaaaay \-\- \-\-all
when callin git\-filter\-branch\&.
.RE
.sp
Then there be two ways ta git a smalla repository\& fo' realz. A less thuggy way is ta clone, dat keeps yo' original gangsta intact\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Clone it with
git clone file:///path/to/repo\&. Da clone aint gonna have tha removed objects\&. Right back up in yo muthafuckin ass. See
\fBgit-clone\fR(1)\&. (Note dat clonin wit a plain path just hardlinks every last muthafuckin thang!)
.RE
.sp
If you straight-up don\(cqt wanna clone it, fo' whatever reasons, check tha followin points instead (in dis order)\&. This be a straight-up destructizzle approach, so \fBmake a funky-ass backup\fR or go back ta clonin it\&. Yo ass done been warned\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Remove tha original gangsta refs backed up by git\-filter\-branch: say
git for\-each\-ref \-\-format="%(refname)" refs/original/ | xargs \-n 1 git update\-ref \-d\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Expire all reflogs with
git reflog expire \-\-expire=now \-\-all\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Garbage collect all unreferenced objects with
git gc \-\-prune=now
(or if yo' git\-gc aint freshly smoked up enough ta support arguments to
\-\-prune, use
git repack \-ad; git prune
instead)\&.
.RE
.SH "NOTES"
.sp
git\-filter\-branch allows you ta make complex shell\-scripted rewritez of yo' Git history yo, but you probably don\(cqt need dis flexibilitizzle if you\(cqre simply \fIremovin unwanted data\fR like big-ass filez or passwords\&. For dem operations you may wanna consider \m[blue]\fBDa BFG Repo\-Cleaner\fR\m[]\&\s-2\u[1]\d\s+2, a JVM\-based alternatizzle ta git\-filter\-branch, typically at least 10\-50x fasta fo' dem use\-cases, n' wit like different characteristics:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Any particular version of a gangbangin' file is cleaned exactly
\fIonce\fR\&. Da BFG, unlike git\-filter\-branch, do not hit you wit tha opportunitizzle ta handle a gangbangin' file differently based on where or when dat shiznit was committed within yo' history\&. This constraint gives tha core performizzle benefit of Da BFG, n' is well\-suited ta tha task of cleansin wack data \- you don\(cqt care
\fIwhere\fR
the wack data is, you just want it
\fIgone\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
By default Da BFG takes full advantage of multi\-core machines, cleansin commit file\-trees up in parallel\&. git\-filter\-branch cleans commits sequentially (ie up in a single\-threaded manner), though it
\fIis\fR
possible ta write filtas dat include they own parallellism, up in tha scripts executed against each commit\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The
\m[blue]\fBcommand options\fR\m[]\&\s-2\u[2]\d\s+2
are much mo' restrictizzle than git\-filta branch, n' dedicated just ta tha taskz of removin unwanted data\- e\&.g:
\-\-strip\-blobs\-bigger\-than 1M\&.
.RE
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
.SH "NOTES"
.IP " 1." 4
Da BFG Repo-Cleaner
.RS 4
\%http://rtyley.github.io/bfg-repo-cleaner/
.RE
.IP " 2." 4
command options
.RS 4
\%http://rtyley.github.io/bfg-repo-cleaner/#examples
.RE
