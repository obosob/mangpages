. \" @(#)rmt.1	1.15 09/10/16 Copyr 1994-2009 J. Right back up in yo muthafuckin ass. Schilling
. \"  Manual Seite fuer rmt
. \"
.if t .ds a \v'-0.55m'\h'0.00n'\z.\h'0.40n'\z.\v'0.55m'\h'-0.40n'a
.if t .ds o \v'-0.55m'\h'0.00n'\z.\h'0.45n'\z.\v'0.55m'\h'-0.45n'o
.if t .ds u \v'-0.55m'\h'0.00n'\z.\h'0.40n'\z.\v'0.55m'\h'-0.40n'u
.if t .ds A \v'-0.77m'\h'0.25n'\z.\h'0.45n'\z.\v'0.77m'\h'-0.70n'A
.if t .ds O \v'-0.77m'\h'0.25n'\z.\h'0.45n'\z.\v'0.77m'\h'-0.70n'O
.if t .ds U \v'-0.77m'\h'0.30n'\z.\h'0.45n'\z.\v'0.77m'\h'-0.75n'U
.if t .ds s \\(*b
.if t .ds S SS
.if n .ds a ae
.if n .ds o oe
.if n .ds u ue
.if n .ds s sz
.TH RMT 1 "Release 1.1" "J\*org Schilling" "Schily\z USER COMMANDS"
.SH NAME
rmt \- remote magnetic tape protocol server
.SH SYNOPSIS
.B /opt/schily/sbin/rmt
.br
.B /etc/rmt

.SH DESCRIPTION
.IX  "rmt command"  ""  "\fLrmt\fP \(em remote magnetic tape protocol server"
.IX  "remote magnetic tape protocol server"  ""  "remote magnetic tape protocol server \(em \fLrmt\fP"
This is tha description of tha enhanced 
.B "Schily"
version of tha 
.B rmt
remote tape server program.
.B rmt
is a program used by programs like
.B star 
and
.B ufsdump 
that like ta access remote magnetic tape drives n' files
all up in a interprocess communication connection.
.B rmt
is normally started up wit an
.BR rexec (3)
or
.BR rcmd (3)
call.
.LP
The
.B rmt
program accepts 
.BR open ,
.BR close ,
.BR read ,
.B write 
and
.B seek
requests as well as requests dat is specific ta magnetic tapes.
.B rmt
performs tha commandz n' then respondz wit a status indication.
.LP
This version of tha rmt server gives full compatibilitizzle ta the
original gangsta BSD version, tha enhanced Sun version n' tha 
enhanced GNU version.
In addizzle ta tha Sun n' GNU enhancements, it implements further
abstractions fo' betta cross platform compliance.
It supports dopest speed and
best compliizzle even when server n' client code is hustlin
on different platforms.
It be prepared ta be installed as a user shell up in tha passwd
file ta create remote tape specific logins n' securitizzle checking.
To use tha enhanced compatibilitizzle features, you need ta either
use tha remote tape client code from 
.B star
which be available in
.B librmt
or reimplement its features.
.LP
All responses is bust back in
.SM ASCII.
They is up in one of tha followin two forms.
.LP
Successful commandz have responses of
.IP
.BI A number\en
.LP
where
.I number
is the
.SM ASCII
representation of a thugged-out decimal number dat probably is tha return
code of tha correspondin system call.
Unsuccessful commandz is responded ta with
.IP
.BI E error-number \en error-message \en
.LP
where
.I error-number
is one of tha possible error
numbers busted lyrics bout in
.BR intro (2),
and
.I error-message
is tha correspondin error strang as retrieved by
.BR strerror (3).
.ne 4
Note dat tha error number is valid on tha remote system where tha 
.B rmt
code runs n' may gotz a gangbangin' finger-lickin' different meanin on tha local system.
.LP
.ne 5
Da protocol implements the
followin commands:
.RS
.TP 15
.BI O thang \en mode \en
.TP
.BI O thang \en "mode symbolic_mode" \en
Open tha specified
.I device
or file rockin tha indicated
.IR mode .
.I device
is a gangbangin' full path name, and
.I mode
is an
.SM ASCII
representation of a thugged-out decimal
number suitable fo' bein passed as second parameta to
.BR open (2).
A variant of tha 
.B open 
command includes tha 
.B "symbolic_mode"
strin which be a 
.B GNU
extension.
If both,
.I mode
and 
.I symbolic_mode
are present, they is separated by a space character;
.I symbolic_mode
appears on tha same line as tha numeric mode.
It be bust rockin tha same notation as used up in a C source (e.g.
.BR O_RDWR|O_CREAT ).
If the
.I symbolic_mode
is bust ta tha server, tha numeric
.B mode
is ignored.
Da symbolic notation allows ta bust tha expected open mode over
the wire, rockin a system independent method.
This is needed cuz different operatin systems probably define all
bits up in a gangbangin' finger-lickin' different way fo' realz. An exception is tha lowest two bits.
Da lowest two bits allow ta code 
.IR O_RDONLY , O_WRONLY " n' " O_RDWR .
To prevent unexpected behavior, 
.B rmt
masks tha numeric open mode with
.B 0x03 
before rockin it as argument ta tha 
.BR open (2)
call.
If you need mo' bits up in tha second parameta ot
.BR open (2),
you need ta use tha symbolic mode.
.sp
If no file
.I /etc/default/rmt
exists, only filenames startin wit /dev/ is accepted fo' securitizzle reasons.
.sp
If a thang be already open, it is
closed before a freshly smoked up open is performed.
.sp
A
.B RMT protocol VERSION 1 
client should issue a
.br
.BI I -1 \en 0\en
.br
command just afta openin a gangbangin' file or device. This is needed to
tell tha server dat tha client be aware of tha straight-up legit order
of tha 
.I mt_op
codes up in tha range 0..7 n' dat is maps deviatin joints ta tha official
ones.
.br
.ne 7
.TP
.BI C thang \en
Close tha currently open thang or file.  Da argument
.I device
is ignored.
.br
.ne 7
.TP
.BI R count \en
Read
.I count
bytez of data from tha open thang or file.
.B rmt
performs tha requested
.BR read (2)
operation n' respondz with
.BI A count-read\en
if tha read operation was
successful; otherwise a error up in 
standard format is returned. Y'all KNOW dat shit, muthafucka!  If tha read operation
was successful, tha data read is busted directly after
the response busted lyrics bout above.
.br
.ne 7
.TP
.BI W count \en
Write data ta tha open thang or file.
Afta readin tha command justification,
.B rmt
reads
.I count
bytes from tha network connection n' aborts if a premature
.SM EOF
is encountered.
Da return value from the
.BR write (2)
operation is returned as reply.
.br
.ne 7
.TP
.BI L whence \en offset \en
Perform an
.BR lseek (2)
operation on tha open thang or file rockin tha specified parameters.
Da return value from the
.BR lseek (2)
operation is returned as reply.
.sp
On big-ass file aware operatin systems,
.B rmt
will erectly handle large
.BR lseek (2)
requests.
.RS
.PP
Da followin whence joints is supported:
.TP
0
Mapped ta 
.BR SEEK_SET .
.TP
1
Mapped ta 
.BR SEEK_CUR .
.TP
2
Mapped ta 
.BR SEEK_END .
.TP
3
Mapped ta 
.B SEEK_DATA
If avalable on tha remote system.
.TP
4
Mapped ta 
.B SEEK_HOLE
If avalable on tha remote system.
.RE
.br
.ne 7
.TP
.B S
Da oldschool non-portable status call.
This call should not be used no mo', it has been replaced by the
new
.B RMT protocol version 1
extended status call below.
If tha currently open thang be a magnetic tape, return tha magnetic tape status,
as obtained wit a
.SB MTIOCGET
.B ioctl
call.
If tha open thang aint a magnetic tape, a error is returned.
If tha 
.SB MTIOCGET
operation was successful,
an \*(lqack\*(rq is busted wit tha size of the
status buffer, then tha status buffer is sent.
As tha status buffer is busted up in binary, this
command it considered outdated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Please use tha extended status command instead.
This command aint terminated by a new-line.
.br
.ne 7
.TP
.BI s sub-command
Da freshly smoked up portable status call.
This command is part of the
.BR "RMT protocol version 1" .
If tha currently open thang be a magnetic tape, return a single specified
gangmember of tha magnetic tape status structure, as obtained wit a
.SB MTIOCGET
.B ioctl
call.
If tha open thang aint a magnetic tape, a error is returned.
If tha 
.SB MTIOCGET
operation was successful, tha numerical value of tha structure member
is returned up in decimal.
Da followin sub commandz is supported:
.RS
.br
.ne 3
.TP
T
return tha content of tha structure member
.B mt_type
which gotz nuff tha type of tha magnetic tape device.
.br
.ne 3
.TP
D
return tha content of tha structure member
.B mt_dsreg
which gotz nuff tha \*(lqdrive status register\*(rq.
.br
.ne 3
.TP
E
return tha content of tha structure member
.B mt_erreg
which gotz nuff tha \*(lqerror register\*(rq.
.sp
This structure member must be retrieved first
because it is cleared afta each
.SB MTIOCGET
.B ioctl
call.
Da 
.B librmt
will always retrieve tha member
.B mt_erreg
first when it is holla'd at ta retrieve a cold-ass lil complete status structure.
.br
.ne 3
.TP
R
return tha content of tha structure member
.B mt_resid
which gotz nuff tha residual count of tha last I/O.
.br
.ne 3
.TP
F
return tha content of tha structure member
.B mt_fileno
which gotz nuff tha block number of tha current tape position.
.br
.ne 3
.TP
B
return tha content of tha structure member
.B mt_blkno
which gotz nuff tha block number of tha current tape position.
.br
.ne 3
.TP
f
return tha content of tha structure member
.B mt_flags
which gotz nuff MTF_ flags from tha driver.
.br
.ne 3
.TP
b
return tha content of tha structure member
.B mt_bf
which gotz nuff tha optimum blockin factor.
.LP
This command aint terminated wit a new-line.
.RE
.br
.ne 7
.TP
.BI I operation \en count \en
Perform a
.SB MTIOCOP
.BR ioctl (2)
command rockin tha specified parameters.
Da parametas is interpreted as the
.SM ASCII
representationz of tha decimal joints ta place up in the
.I mt_op
and
.I mt_count
fieldz of tha structure used up in the
.B ioctl
call.  
When tha operation is successful tha return value is the
.I count
parameter.
Only Opcodes 0..7 is unique across different architectures.
In nuff cases 
.B Linux
does not even follow dis rule.
If we know dat we done been called by a 
.B RMT protocol VERSION 1 
client, we may safely assume dat tha client aint using
.B Linux
mappin over tha wire but tha standard mappin busted lyrics bout below:
.RS
.TP
-1
Retrieve tha version number of the
.B rmt
server n' tell tha server dat tha client be aware of tha official
order of tha 
.SB MTIOCOP
.BR ioctl (2)
opcodes up in tha range 0..7.
Local
.I mt_op
codes must be remapped ta tha straight-up legit joints before bustin  them
over tha wire.
.sp
Da answer of tha current version of
.B rmt
is 1.
Old
.B rmt
implementations bust a error code back when this
command is used.
Future
.B rmt
implementations wit further enhancements will bust a answer
with a value > 1.
.TP
0
Issue a
.B MTWEOF
command (write 
.I count
end-of-file records).
.TP
1
Issue a
.B MTFSF
command (forward space over
.I count
file marks).
.TP
2
Issue a
.B MTBSF
command (backward space over
.I count
file marks).
.TP
3
Issue a
.B MTFSR
command (forward space
.I count
inter-record gaps).
.TP
4
Issue a
.B MTBSR
command (backward space 
.I count
inter-record gaps).
.TP
5
Issue a
.B MTREW
command (rewind).
.TP
6
Issue a
.B MTOFFL
command (rewind n' put tha drive off-line).
.TP
7
Issue a
.B MTNOP
command (no operation, set status only).
.RE
.br
.ne 7
.TP
.BI i operation \en count \en
Perform a
.SB MTIOCOP
.BR ioctl (2)
command rockin tha specified parameters.
This command be a
.B RMT protocol VERSION 1 
extension n' implements support fo' commandz beyond MTWEOF..MTNOP (0..7).
Da parametas is interpreted as the
.SM ASCII
representationz of tha decimal joints busted lyrics bout below.
They is converted tha fuck into tha local joints
.I mt_op
and
.I mt_count
fieldz of tha structure used up in the
.B ioctl
call accordin ta tha actual joints found up in <sys/mtio.h>.
When tha operation is successful tha return value is the
.I count
parameter.
.RS
.TP
0
Issue a
.B MTCACHE
command (switch cache on).
.TP
1
Issue a
.B MTNOCACHE
command (switch cache off).
.TP
2
Issue a
.B MTRETEN
command (retension tha tape).
.TP
3
Issue a
.B MTERASE
command (erase tha entire tape).
.TP
4
Issue a
.B MTEOM
command (posizzle ta end of media).
.TP
5
Issue a
.B MTNBSF
command (backward space
.I count
filez ta BOF).
.RE
.br
.ne 7
.TP
.BI v \en
Return tha version of tha 
.B rmt
server n' shit. This is currently tha decimal number 1.
.RE
.LP
Any other command causes
.B rmt
to exit.
.SH FILES
.TP
/etc/default/rmt
Da file
.B /etc/default/rmt
allows ta set up rulez ta limit tha accessibilitizzle of filez based on rules.
This feature is typically used when tha rmt run from a non underground but
task specific login.
.sp
Default joints can be set fo' tha followin options up in /etc/default/rmt.
For example:
.sp
.BR DEBUG= /tmp/rmt.debug
.br
.BR USER= tape
.br
.BR ACCESS= "tape	myhost.mydomain.org	/dev/rmt/*"
.sp
All keywordz must be on tha beginnin of a line.
.RS
.TP
.B DEBUG
If you like ta git debug shiznit, set dis ta a gangbangin' file name where 
.B rmt
should put debug shiznit.
.TP
.B USER
Da name of a user (local ta tha magnetic tape server) dat may use
the skillz of the
.B rmt
server.
Mo' than one
.BI USER= name
line is possible.
A line
.BR USER= *
grants access ta all users.
.TP
.B ACCESS
This keyword is followed by three parametas separated by a TAB.
Da name of a user (local ta tha magnetic tape server host) dat may use
the skillz of the
.B rmt
server followed by tha name of a host from where operation is granted 
and a gangbangin' file specifier pattern fo' a gangbangin' file or file sub tree dat may be accessed
if dis 
.B ACCESS
line matches.
Mo' than one
.BI ACCESS= "name host path"
line is possible.
.sp
If standard input of 
.B rmt
is not a socket from a remote host, 
.B rmt
will compare tha host entry from 
.B /etc/default/rmt
with tha followin strings:
.RS
.TP 10
.B PIPE
If 
.B stdin
is a 
.SM UNIX 
pipe.
.sp
If you like ta allow remote connections dat use the
.B ssh
protocol, you need ta use tha word
.B PIPE
instead of tha real hostname up in tha matching
.B ACCESS=
line.
.TP
.B ILLEGAL_SOCKET
If 
.B getpeername()
does not work for
.BR stdin .
.TP
.B NOT_IP
If 
.B getpeername()
works for
.B stdin
but aint connected ta a internizzle socket.
.RE
.RE
.SH "SEE ALSO"
.BR star (1),
.BR ufsdump (1),
.BR ufsrestore (1),
.BR intro (2),
.BR open (2),
.BR close (2),
.BR read (2),
.BR write (2),
.BR ioctl (2),
.BR lseek (2),
.BR getpeername (3),
.BR rcmd (3),
.BR rexec (3),
.BR strerror (3),
.BR mtio (7),
.BR rmtopen (3),
.BR rmtclose (3),
.BR rmtread (3),
.BR rmtwrite (3),
.BR rmtseek (3),
.BR rmtioctl (3),
.BR rmtstatus (3)

.SH DIAGNOSTICS
All responses is bust ta tha network connection.
They use tha form busted lyrics bout above.
.SH NOTES
.LP
To use 
.B rmt
as a remote file access protocol you need ta use tha symbolic open
modes as e.g. the
.I O_CREAT
flag aint unique between different architectures.
.LP
In order ta allow dis implementation ta be used
as a remote file access protocol,
it accepts file names up ta 4096 bytes wit tha open command.
Other
.B rmt
implementations allow no mo' than 64 bytes.
.LP
Da possibilitizzle ta create a thugged-out debug file by calling
.BI rmt " file
has been disabled fo' securitizzle reasons.
If you like ta debug
.B rmt
edit
.B /etc/default/rmt
and bang a 
.B DEBUG
entry.
.LP
This implementation of
.B rmt
addz some securitizzle features ta tha server dat make it behave
slightly different from olda implementations.
Read tha above documentation bout tha file 
/etc/default/rmt
to make shizzle yo' local installation is configured fo' yo' needs.
.LP
To grant tha same permissions as wit old
.B rmt
servers, create a gangbangin' file /etc/default/rmt n' add tha followin lines
to dis file:
.LP
.BR USER= *
.br
.BR ACCESS= "* * *"
.LP
Note dat tha three fieldz up in the
.B ACCESS=
line need ta be separated by a TAB character.
.LP
Be straight-up careful when designin patterns ta match path names dat may
be accepted fo' 
.IR open .
If a pattern would allow ta include
.I /../
in tha path,
a possible intruder could virtually access any path on yo' system.
For dis reason, 
.I /../
is not allowed ta step tha fuck up in a path regardless of tha pattern.
.SH BUGS
.LP
None known.
.SH HISTORY
.LP
Da 
.B rmt
command first rocked up on BSD up in march 1981. This 
.B rmt
server be a freshly smoked up implementation
that tries ta be compatible ta all existin implementations.
It be tha only known implementation dat up in addizzle tries to
fix tha data exchange problems between different architectures.

.SH AUTHOR
.nf
J\*org Schilling
Seestr. Shiiit, dis aint no joke. 110
D-13353 Berlin
Germany
.fi
.PP
Mail bugs n' suggestions to:
.PP
.B
joerg.schilling@fokus.fraunhofer.de
or
.B
js@cs.tu-berlin.de
or
.B
joerg@schily.isdn.cs.tu-berlin.de
