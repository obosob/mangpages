'\" t
.\"     Title: git-describe
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-DESCRIBE" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-describe \- Show da most thugged-out recent tag dat is reachable from a cold-ass lil commit
.SH "SYNOPSIS"
.sp
.nf
\fIgit describe\fR [\-\-all] [\-\-tags] [\-\-gotz nuff] [\-\-abbrev=<n>] <commit\-ish>\&...
\fIgit describe\fR [\-\-all] [\-\-tags] [\-\-gotz nuff] [\-\-abbrev=<n>] \-\-dirty[=<mark>]
.fi
.sp
.SH "DESCRIPTION"
.sp
Da command findz da most thugged-out recent tag dat is reachable from a cold-ass lil commit\&. If tha tag points ta tha commit, then only tha tag is shown\&. Otherwise, it suffixes tha tag name wit tha number of additionizzle commits on top of tha tagged object n' tha abbreviated object name of da most thugged-out recent commit\&.
.sp
By default (without \-\-all or \-\-tags) git describe only shows annotated tags\&. For mo' shiznit bout bustin annotated tags peep tha \-a n' \-s options ta \fBgit-tag\fR(1)\&.
.SH "OPTIONS"
.PP
<commit\-ish>\&...
.RS 4
Commit\-ish object names ta describe\&.
.RE
.PP
\-\-dirty[=<mark>]
.RS 4
Describe tha hustlin tree\&. Well shiiiit, it means describe HEAD n' appendz <mark> (\-dirty
by default) if tha hustlin tree is dirty\&.
.RE
.PP
\-\-all
.RS 4
Instead of rockin only tha annotated tags, use any ref found in
refs/
namespace\&. This option enablez matchin any known branch, remote\-trackin branch, or lightweight tag\&.
.RE
.PP
\-\-tags
.RS 4
Instead of rockin only tha annotated tags, use any tag found in
refs/tags
namespace\&. This option enablez matchin a lightweight (non\-annotated) tag\&.
.RE
.PP
\-\-gotz nuff
.RS 4
Instead of findin tha tag dat predates tha commit, find tha tag dat comes afta tha commit, n' thus gotz nuff it\& fo' realz. Automatically implies \-\-tags\&.
.RE
.PP
\-\-abbrev=<n>
.RS 4
Instead of rockin tha default 7 hexadecimal digits as tha abbreviated object name, use <n> digits, or as nuff digits as needed ta form a unique object name\& fo' realz. An <n> of 0 will suppress long format, only showin tha closest tag\&.
.RE
.PP
\-\-candidates=<n>
.RS 4
Instead of thankin bout only tha 10 most recent tags as muthafuckas ta describe tha input commit\-ish consider up ta <n> muthafuckas\&. Increasin <n> above 10 will take slightly longer but may produce a mo' accurate result\& fo' realz. An <n> of 0 will cause only exact matches ta be output\&.
.RE
.PP
\-\-exact\-match
.RS 4
Only output exact matches (a tag directly references tha supplied commit)\&. This be a synonym fo' \-\-candidates=0\&.
.RE
.PP
\-\-debug
.RS 4
Verbosely display shiznit bout tha searchin game bein employed ta standard error\&. Da tag name will still be printed ta standard out\&.
.RE
.PP
\-\-long
.RS 4
Always output tha long format (the tag, tha number of commits n' tha abbreviated commit name) even when it matches a tag\&. This is useful when you wanna peep partz of tha commit object name up in "describe" output, even when tha commit up in question happens ta be a tagged version\&. Instead of just emittin tha tag name, it will describe such a cold-ass lil commit as v1\&.2\-0\-gdeadbee (0th commit since tag v1\&.2 dat points at object deadbee\&...\&.)\&.
.RE
.PP
\-\-match <pattern>
.RS 4
Only consider tags matchin tha given
glob(7)
pattern, excludin tha "refs/tags/" prefix\&. This can be used ta avoid leakin private tags from tha repository\&.
.RE
.PP
\-\-always
.RS 4
Show uniquely abbreviated commit object as fallback\&.
.RE
.PP
\-\-first\-parent
.RS 4
Big up only tha straight-up original gangsta parent commit upon seein a merge commit\&. This is useful when you wish ta not match tags on branches merged up in tha history of tha target commit\&.
.RE
.SH "EXAMPLES"
.sp
With suttin' like git\&.git current tree, I get:
.sp
.if n \{\
.RS 4
.\}
.nf
[torvalds@g5 git]$ git describe parent
v1\&.0\&.4\-14\-g2414721
.fi
.if n \{\
.RE
.\}
.sp
i\&.e\&. tha current head of mah "parent" branch is based on v1\&.0\&.4 yo, but since it has all dem commits on top of that, describe has added tha number of additionizzle commits ("14") n' a abbreviated object name fo' tha commit itself ("2414721") all up in tha end\&.
.sp
Da number of additionizzle commits is tha number of commits which would be displayed by "git log v1\&.0\&.4\&.\&.parent"\&. Da hash suffix is "\-g" + 7\-char abbreviation fo' tha tip commit of parent (which was 2414721b194453f058079d897d13c4e377f92dc6)\&. Da "g" prefix standz fo' "git" n' is used ta allow describin tha version of a software dependin on tha SCM tha software is managed with\&. This is useful up in a environment where playas may use different SCMs\&.
.sp
Bustin a \fIgit describe\fR on a tag\-name will just show tha tag name:
.sp
.if n \{\
.RS 4
.\}
.nf
[torvalds@g5 git]$ git describe v1\&.0\&.4
v1\&.0\&.4
.fi
.if n \{\
.RE
.\}
.sp
With \-\-all, tha command can use branch headz as references, so tha output shows tha reference path as well:
.sp
.if n \{\
.RS 4
.\}
.nf
[torvalds@g5 git]$ git describe \-\-all \-\-abbrev=4 v1\&.0\&.5^2
tags/v1\&.0\&.0\-21\-g975b
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
[torvalds@g5 git]$ git describe \-\-all \-\-abbrev=4 HEAD^
heads/lt/describe\-7\-g975b
.fi
.if n \{\
.RE
.\}
.sp
With \-\-abbrev set ta 0, tha command can be used ta find tha closest tagname without any suffix:
.sp
.if n \{\
.RS 4
.\}
.nf
[torvalds@g5 git]$ git describe \-\-abbrev=0 v1\&.0\&.5^2
tags/v1\&.0\&.0
.fi
.if n \{\
.RE
.\}
.sp
Note dat tha suffix you git if you type these commandz todizzle may be longer than what tha fuck Linus saw above when he ran these commands, as yo' Git repository may have freshly smoked up commits whose object names begin wit 975b dat did not exist back then, n' "\-g975b" suffix ridin' solo may not be sufficient ta disambiguate these commits\&.
.SH "SEARCH STRATEGY"
.sp
For each commit\-ish supplied, \fIgit describe\fR will first look fo' a tag which tags exactly dat commit\& fo' realz. Annotated tags will always be preferred over lightweight tags, n' tags wit newer dates will always be preferred over tags wit olda dates\&. If a exact match is found, its name is ghon be output n' searchin will stop\&.
.sp
If a exact match was not found, \fIgit describe\fR will strutt back all up in tha commit history ta locate a ancestor commit which has been tagged\&. Da ancestor\(cqs tag is ghon be output along wit a abbreviation of tha input commit\-ish\(cqs SHA\-1\&. If \fI\-\-first\-parent\fR was specified then tha strutt will only consider tha straight-up original gangsta parent of each commit\&.
.sp
If multiple tags was found durin tha strutt then tha tag which has tha fewest commits different from tha input commit\-ish is ghon be selected n' output\& yo. Here fewest commits different is defined as tha number of commits which would be shown by git log tag\&.\&.input is ghon be tha smallest number of commits possible\&.
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
