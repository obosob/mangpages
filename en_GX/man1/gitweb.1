'\" t
.\"     Title: gitweb
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GITWEB" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gitweb \- Git wizzy intercourse (web frontend ta Git repositories)
.SH "SYNOPSIS"
.sp
To git started wit gitweb, run \fBgit-instaweb\fR(1) from a Git repository\&. This would configure n' start yo' wizzy server, n' run wizzy browser pointin ta gitweb\&.
.SH "DESCRIPTION"
.sp
Gitweb serves up a wizzy intercourse ta Git repositories\&. Its features include:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Viewin multiple Git repositories wit common root\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Browsin every last muthafuckin revision of tha repository\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Viewin tha contentz of filez up in tha repository at any revision\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Viewin tha revision log of branches, history of filez n' directories, peep what tha fuck was chizzled when, by who\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Viewin tha blame/annotation detailz of any file (if enabled)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Generatin RSS n' Atom feedz of commits, fo' any branch\&. Da feedz is auto\-discoverable up in modern wizzy browsers\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Viewin every last muthafuckin thang dat was chizzled up in a revision, n' step all up in revisions one at a time, viewin tha history of tha repository\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Findin commits which commit lyrics matches given search term\&.
.RE
.sp
See \m[blue]\fBhttp://git\&.kernel\&.org/?p=git/git\&.git;a=tree;f=gitweb\fR\m[] or \m[blue]\fBhttp://repo\&.or\&.cz/w/git\&.git/tree/HEAD:/gitweb/\fR\m[] fo' gitweb source code, browsed rockin gitweb itself\&.
.SH "CONFIGURATION"
.sp
Various aspectz of gitweb\(cqs behavior can be controlled all up in tha configuration file \fIgitweb_config\&.perl\fR or \fI/etc/gitweb\&.conf\fR\&. Right back up in yo muthafuckin ass. See tha \fBgitweb.conf\fR(5) fo' details\&.
.SS "Repositories"
.sp
Gitweb can show shiznit from one or mo' Git repositories\&. These repositories gotta be all on local filesystem, n' gotta share common repository root, i\&.e\&. be all under a single parent repository (but peep also "Advanced wizzy server setup" section, "Webserver configuration wit multiple projects\(aq root" subsection)\&.
.sp
.if n \{\
.RS 4
.\}
.nf
our $projectroot = \(aq/path/to/parent/directory\(aq;
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da default value fo' $projectroot is \fI/pub/git\fR\&. Yo ass can chizzle it durin buildin gitweb via GITWEB_PROJECTROOT build configuration variable\&.
.sp
By default all Git repositories under $projectroot is visible n' available ta gitweb\&. Da list of projects is generated by default by scannin tha $projectroot directory fo' Git repositories (for object databases ta be mo' exact; gitweb aint horny bout a hustlin area, n' is dopest suited ta showin "bare" repositories)\&.
.sp
Da name of tha repository up in gitweb is tha path ta its $GIT_DIR (its object database) relatizzle ta $projectroot\&. Therefore tha repository $repo can be found at "$projectroot/$repo"\&.
.SS "Projects list file format"
.sp
Instead of havin gitweb find repositories by scannin filesystem startin from $projectroot, you can provide a pre\-generated list of visible projects by settin $projects_list ta point ta a plain text file wit a list of projects (with some additionizzle info)\&.
.sp
This file uses tha followin format:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
One record (for project / repository) per line; do not support line continuation (newline escaping)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Leadin n' trailin whitespace is ignored\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Whitespace separated fields; any run of whitespace can be used as field separator (rulez fo' Perl\(cqs "split(" ", $line)")\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Fieldz use modified URI encoding, defined up in RFC 3986, section 2\&.1 (Percent\-Encoding), or rather "Query strang encoding" (see
\m[blue]\fBhttp://en\&.wikipedia\&.org/wiki/Query_string#URL_encoding\fR\m[]), tha difference bein dat SP (" ") can be encoded as "+" (and therefore "+" has ta be also cement\-encoded)\&.
.sp
Reserved charactas are: "%" (used fo' encoding), "+" (can be used ta encode SPACE), all whitespace charactas as defined up in Perl, includin SP, TAB n' LF, (used ta separate fieldz up in a record)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Currently recognized fieldz are:
.PP
<repository path>
.RS 4
path ta repository GIT_DIR, relatizzle to
$projectroot
.RE
.PP
<repository baller>
.RS 4
displayed as repository baller, preferably full name, or email, or both
.RE
.RE
.sp
Yo ass can generate tha projects list index file rockin tha project_index action (the \fITXT\fR link on projects list page) directly from gitweb; peep also "Generatin projects list rockin gitweb" section below\&.
.sp
Example contents:
.sp
.if n \{\
.RS 4
.\}
.nf
foo\&.git       Joe+R+Hacker+<joe@example\&.com>
foo/bar\&.git   O+W+Ner+<baller@example\&.org>
.fi
.if n \{\
.RE
.\}
.sp
.sp
By default dis file controls only which projects is \fBvisible\fR on projects list page (note dat entries dat do not point ta erectly recognized Git repositories won\(cqt be displayed by gitweb)\&. Even if a project aint visible on projects list page, you can view it nevertheless by hand\-craftin a gitweb URL\&. By settin $strict_export configuration variable (see \fBgitweb.conf\fR(5)) ta legit value you can allow viewin only of repositories also shown on tha overview page (i\&.e\&. only projects explicitly listed up in projects list file is ghon be accessible)\&.
.SS "Generatin projects list rockin gitweb"
.sp
We assume dat GITWEB_CONFIG has its default Makefile value, namely \fIgitweb_config\&.perl\fR\&. Put tha followin up in \fIgitweb_make_index\&.perl\fR file:
.sp
.if n \{\
.RS 4
.\}
.nf
read_config_file("gitweb_config\&.perl");
$projects_list = $projectroot;
.fi
.if n \{\
.RE
.\}
.sp
.sp
Then create tha followin script ta git list of project up in tha format suitable fo' GITWEB_LIST build configuration variable (or $projects_list variable up in gitweb config):
.sp
.if n \{\
.RS 4
.\}
.nf
#!/bin/sh

export GITWEB_CONFIG="gitweb_make_index\&.perl"
export GATEWAY_INTERFACE="CGI/1\&.1"
export HTTP_ACCEPT="*/*"
export REQUEST_METHOD="GET"
export QUERY_STRING="a=project_index"

perl \-\- /var/www/cgi\-bin/gitweb\&.cgi
.fi
.if n \{\
.RE
.\}
.sp
.sp
Run dis script n' save its output ta a gangbangin' file\&. This file could then be used as projects list file, which means dat you can set $projects_list ta its filename\&.
.SS "Controllin access ta Git repositories"
.sp
By default all Git repositories under $projectroot is visible n' available ta gitweb\&. Yo ass can however configure how tha fuck gitweb controls access ta repositories\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
As busted lyrics bout up in "Projects list file format" section, you can control which projects are
\fBvisible\fR
by selectively includin repositories up in projects list file, n' setting
$projects_list
gitweb configuration variable ta point ta it\&. With
$strict_export
set, projects list file can be used ta control which repositories are
\fBavailable\fR
as well\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Yo ass can configure gitweb ta only list n' allow viewin of tha explicitly exported repositories, via
$export_ok
variable up in gitweb config file; see
\fBgitweb.conf\fR(5)
manpage\&. If it evaluates ta true, gitweb shows repositories only if dis file named by
$export_ok
exists up in its object database (if directory has tha magic file named
$export_ok)\&.
.sp
For example
\fBgit-daemon\fR(1)
by default (unless
\-\-export\-all
option is used) allows pullin only fo' dem repositories dat have
\fIgit\-daemon\-export\-ok\fR
file\& fo' realz. Adding
.sp
.if n \{\
.RS 4
.\}
.nf
our $export_ok = "git\-daemon\-export\-ok";
.fi
.if n \{\
.RE
.\}
.sp
makes gitweb show n' allow access only ta dem repositories dat can be fetched from via
git://
protocol\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Finally, it is possible ta specify a arbitrary perl subroutine dat is ghon be called fo' each repository ta determine if it can be exported\&. Da subroutine receives a absolute path ta tha project (repository) as its only parameta (i\&.e\&. "$projectroot/$project")\&.
.sp
For example, if you use mod_perl ta run tha script, n' have dumb HTTP protocol authentication configured fo' yo' repositories, you can use tha followin hook ta allow access only if tha user be authorized ta read tha files:
.sp
.if n \{\
.RS 4
.\}
.nf
$export_auth_hook = sub {
        use Apache2::SubRequest ();
        use Apache2::Const \-compile => qw(HTTP_OK);
        mah $path = "$_[0]/HEAD";
        mah $r    = Apache2::RequestUtil\->request;
        mah $sub  = $r\->lookup_file($path);
        return $sub\->filename eq $path
            && $sub\->status == Apache2::Const::HTTP_OK;
};
.fi
.if n \{\
.RE
.\}
.sp
.RE
.SS "Per\-repository gitweb configuration"
.sp
Yo ass can configure individual repositories shown up in gitweb by bustin file up in tha \fIGIT_DIR\fR of Git repository, or by settin some repo configuration variable (in \fIGIT_DIR/config\fR, peep \fBgit-config\fR(1))\&.
.sp
Yo ass can use tha followin filez up in repository:
.PP
README\&.html
.RS 4
A html file (HTML fragment) which is included on tha gitweb project "summary" page inside
<div>
block element\&. Yo ass can use it fo' longer description of a project, ta provide links (for example ta project\(cqs homepage), etc\&. This is recognized only if XSS prevention is off ($prevent_xss
is false, see
\fBgitweb.conf\fR(5)); a way ta include a README safely when XSS prevention is on may be hit dat shiznit up in tha future\&.
.RE
.PP
description (or gitweb\&.description)
.RS 4
Short (shortened to
$projects_list_description_width
in tha projects list page, which is 25 charactas by default; see
\fBgitweb.conf\fR(5)) single line description of a project (of a repository)\&. Plain text file; HTML is ghon be escaped\&. By default set to
.sp
.if n \{\
.RS 4
.\}
.nf
Unnamed repository; edit dis file ta name it fo' gitweb\&.
.fi
.if n \{\
.RE
.\}
.sp
from tha template durin repository creation, probably installed in
\fI/usr/share/git\-core/templates/\fR\&. Yo ass can use the
gitweb\&.description
repo configuration variable yo, but tha file takes precedence\&.
.RE
.PP
category (or gitweb\&.category)
.RS 4
Singe line category of a project, used ta crew projects if
$projects_list_group_categories
is enabled\&. By default (file n' configuration variable absent), uncategorized projects is put up in the
$project_list_default_category
category\&. Yo ass can use the
gitweb\&.category
repo configuration variable yo, but tha file takes precedence\&.
.sp
Da configuration variables
$projects_list_group_categories
and
$project_list_default_category
are busted lyrics bout in
\fBgitweb.conf\fR(5)
.RE
.PP
cloneurl (or multiple\-valued gitweb\&.url)
.RS 4
File wit repository URL (used fo' clone n' fetch), one per line\&. Displayed up in tha project summary page\&. Yo ass can use multiple\-valued
gitweb\&.url
repository configuration variable fo' dat yo, but tha file takes precedence\&.
.sp
This is per\-repository enhancement / version of global prefix\-based
@git_base_url_list
gitweb configuration variable (see
\fBgitweb.conf\fR(5))\&.
.RE
.PP
gitweb\&.baller
.RS 4
Yo ass can use the
gitweb\&.baller
repository configuration variable ta set repository\(cqs baller\&. Well shiiiit, it is displayed up in tha project list n' summary page\&.
.sp
If it\(cqs not set, filesystem directory\(cqs balla is used (via GECOS field, i\&.e\&. real name field from
\fBgetpwuid\fR(3)) if
$projects_list
is unset (gitweb scans
$projectroot
for repositories); if
$projects_list
points ta file wit list of repositories, then project balla defaults ta value from dis file fo' given repository\&.
.RE
.PP
various gitweb\&.* config variablez (in config)
.RS 4
Read description of
%feature
hash fo' detailed list, n' descriptions\&. Right back up in yo muthafuckin ass. See also "Configurin gitweb features" section in
\fBgitweb.conf\fR(5)
.RE
.SH "ACTIONS, AND URLS"
.sp
Gitweb can use path_info (component) based URLs, or it can pass all necessary shiznit via query parameters\&. Da typical gitweb URLs is fucked up down up in ta five components:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&./gitweb\&.cgi/<repo>/<action>/<revision>:/<path>?<arguments>
.fi
.if n \{\
.RE
.\}
.sp

.PP
repo
.RS 4
Da repository tha action is ghon be performed on\&.
.sp
All actions except fo' dem dat list all available projects, up in whatever form, require dis parameter\&.
.RE
.PP
action
.RS 4
Da action dat is ghon be run\&. Defaults to
\fIprojects_list\fR
if repo aint set, n' to
\fIsummary\fR
otherwise\&.
.RE
.PP
revision
.RS 4
Revision shown\&. Defaults ta HEAD\&.
.RE
.PP
path
.RS 4
Da path within tha <repository> dat tha action is performed on, fo' dem actions dat require it\&.
.RE
.PP
arguments
.RS 4
Any arguments dat control tha behaviour of tha action\&.
.RE
.sp
Some actions require or allow ta specify two revisions, n' sometimes even two pathnames\&. In most general form such path_info (component) based gitweb URL be lookin like this:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&./gitweb\&.cgi/<repo>/<action>/<revision_from>:/<path_from>\&.\&.<revision_to>:/<path_to>?<arguments>
.fi
.if n \{\
.RE
.\}
.sp
.sp
Each action is implemented as a subroutine, n' must be present up in %actions hash\&. Right back up in yo muthafuckin ass. Some actions is disabled by default, n' must be turned on via feature mechanism\&. For example ta enable \fIblame\fR view add tha followin ta gitweb configuration file:
.sp
.if n \{\
.RS 4
.\}
.nf
$feature{\(aqblame\(aq}{\(aqdefault\(aq} = [1];
.fi
.if n \{\
.RE
.\}
.sp
.SS "Actions:"
.sp
Da standard actions are:
.PP
project_list
.RS 4
Lists tha available Git repositories\&. This is tha default command if no repository is specified up in tha URL\&.
.RE
.PP
summary
.RS 4
Displays summary bout given repository\&. This is tha default command if no action is specified up in URL, n' only repository is specified\&.
.RE
.PP
heads, remotes
.RS 4
Lists all local or all remote\-trackin branches up in given repository\&.
.sp
Da latta aint available by default, unless configured\&.
.RE
.PP
tags
.RS 4
List all tags (lightweight n' annotated) up in given repository\&.
.RE
.PP
blob, tree
.RS 4
Shows tha filez n' directories up in a given repository path, at given revision\&. This is default command if no action is specified up in tha URL, n' path is given\&.
.RE
.PP
blob_plain
.RS 4
Returns tha raw data fo' tha file up in given repository, at given path n' revision\&. Links ta dis action is marked
\fIraw\fR\&.
.RE
.PP
blobdiff
.RS 4
Shows tha difference between two revisionz of tha same file\&.
.RE
.PP
blame, blame_incremental
.RS 4
Shows tha blame (also called annotation) shiznit fo' a gangbangin' file\&. On a per line basis it shows tha revision up in which dat line was last chizzled n' tha user dat committed tha chizzle\&. Da incremenstrual version (which if configured is used automatically when JavaScript is enabled) uses Ajax ta incrementally add blame info ta tha contentz of given file\&.
.sp
This action is disabled by default fo' performizzle reasons\&.
.RE
.PP
commit, commitdiff
.RS 4
Shows shiznit on some specific commit up in a repository\&. The
\fIcommit\fR
view shows shiznit bout commit up in mo' detail, the
\fIcommitdiff\fR
action shows chizzleset fo' given commit\&.
.RE
.PP
patch
.RS 4
Returns tha commit up in plain text mail format, suitable fo' applyin with
\fBgit-am\fR(1)\&.
.RE
.PP
tag
.RS 4
Display specific annotated tag (tag object)\&.
.RE
.PP
log, shortlog
.RS 4
Shows log shiznit (commit message or just commit subject) fo' a given branch (startin from given revision)\&.
.sp
The
\fIshortlog\fR
view is mo' compact; it shows one commit per line\&.
.RE
.PP
history
.RS 4
Shows history of tha file or directory up in a given repository path, startin from given revision (defaults ta HEAD, i\&.e\&. default branch)\&.
.sp
This view is similar to
\fIshortlog\fR
view\&.
.RE
.PP
rss, atom
.RS 4
Generates a RSS (or Atom) feed of chizzlez ta repository\&.
.RE
.SH "WEBSERVER CONFIGURATION"
.sp
This section explains how tha fuck ta configure some common webservers ta run gitweb\&. In all cases, /path/to/gitweb up in tha examplez is tha directory you ran installed gitweb in, n' gotz nuff gitweb_config\&.perl\&.
.sp
If you\(cqve configured a wizzy server dat isn\(cqt listed here fo' gitweb, please bust up in tha instructions so they can be included up in a gangbangin' future release\&.
.SS "Apache as CGI"
.sp
Apache must be configured ta support CGI scripts up in tha directory up in which gitweb is installed\&. Let\(cqs assume dat it is \fI/var/www/cgi\-bin\fR directory\&.
.sp
.if n \{\
.RS 4
.\}
.nf
ScriptAlias /cgi\-bin/ "/var/www/cgi\-bin/"

<Directory "/var/www/cgi\-bin">
    Options Indexes FollowSymlinks ExecCGI
    AllowOverride None
    Order allow,deny
    Allow from all
</Directory>
.fi
.if n \{\
.RE
.\}
.sp
.sp
With dat configuration tha full path ta browse repositories would be:
.sp
.if n \{\
.RS 4
.\}
.nf
http://server/cgi\-bin/gitweb\&.cgi
.fi
.if n \{\
.RE
.\}
.SS "Apache wit mod_perl, via ModPerl::Registry"
.sp
Yo ass can use mod_perl wit gitweb\&. Yo ass must install Apache::Registry (for mod_perl 1\&.x) or ModPerl::Registry (for mod_perl 2\&.x) ta enable dis support\&.
.sp
Assumin dat gitweb is installed ta \fI/var/www/perl\fR, tha followin Apache configuration (for mod_perl 2\&.x) is suitable\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Alias /perl "/var/www/perl"

<Directory "/var/www/perl">
    SetHandlez perl\-script
    PerlResponseHandlez ModPerl::Registry
    PerlOptions +ParseHeaders
    Options Indexes FollowSymlinks +ExecCGI
    AllowOverride None
    Order allow,deny
    Allow from all
</Directory>
.fi
.if n \{\
.RE
.\}
.sp
.sp
With dat configuration tha full path ta browse repositories would be:
.sp
.if n \{\
.RS 4
.\}
.nf
http://server/perl/gitweb\&.cgi
.fi
.if n \{\
.RE
.\}
.SS "Apache wit FastCGI"
.sp
Gitweb works wit Apache n' FastCGI\&. First you need ta rename, copy or symlink gitweb\&.cgi ta gitweb\&.fcgi\&. Let\(cqs assume dat gitweb is installed up in \fI/usr/share/gitweb\fR directory\&. Da followin Apache configuration is suitable (UNTESTED!)
.sp
.if n \{\
.RS 4
.\}
.nf
FastCgiServer /usr/share/gitweb/gitweb\&.cgi
ScriptAlias /gitweb /usr/share/gitweb/gitweb\&.cgi

Alias /gitweb/static /usr/share/gitweb/static
<Directory /usr/share/gitweb/static>
    SetHandlez default\-handlez
</Directory>
.fi
.if n \{\
.RE
.\}
.sp
.sp
With dat configuration tha full path ta browse repositories would be:
.sp
.if n \{\
.RS 4
.\}
.nf
http://server/gitweb
.fi
.if n \{\
.RE
.\}
.SH "ADVANCED WEB SERVER SETUP"
.sp
All of dem examplez use request rewriting, n' need mod_rewrite (or equivalent; examplez below is freestyled fo' Apache)\&.
.SS "Single URL fo' gitweb n' fo' fetching"
.sp
If you wanna have one URL fo' both gitweb n' yo' http:// repositories, you can configure Apache like this:
.sp
.if n \{\
.RS 4
.\}
.nf
<VirtualHost *:80>
    ServerName    git\&.example\&.org
    DocumentRoot  /pub/git
    SetEnv        GITWEB_CONFIG   /etc/gitweb\&.conf

    # turnin on mod rewrite
    RewriteEngine on

    # make tha front page a internal rewrite ta tha gitweb script
    RewriteRule ^/$  /cgi\-bin/gitweb\&.cgi

    # make access fo' "dumb clients" work
    RewriteRule ^/(\&.*\e\&.git/(?!/?(HEAD|info|objects|refs))\&.*)?$ \e
                /cgi\-bin/gitweb\&.cgi%{REQUEST_URI}  [L,PT]
</VirtualHost>
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da above configuration expects yo' hood repositories ta live under \fI/pub/git\fR n' will serve dem as http://git\&.domain\&.org/dir\-under\-pub\-git, both as clonable Git URL n' as browseable gitweb intercourse\&. If you then start yo' \fBgit-daemon\fR(1) wit \-\-base\-path=/pub/git \-\-export\-all then you can even use tha git:// URL wit exactly tha same path\&.
.sp
Settin tha environment variable GITWEB_CONFIG will tell gitweb ta use tha named file (i\&.e\&. up in dis example \fI/etc/gitweb\&.conf\fR) as a cold-ass lil configuration fo' gitweb\&. Yo ass don\(cqt straight-up need it up in above example; it is required only if yo' configuration file is up in different place than built\-in (durin compilin gitweb) \fIgitweb_config\&.perl\fR or \fI/etc/gitweb\&.conf\fR\&. Right back up in yo muthafuckin ass. See \fBgitweb.conf\fR(5) fo' details, especially shiznit bout precedence rules\&.
.sp
If you use tha rewrite rulez from tha example you \fBmight\fR also need suttin' like tha followin up in yo' gitweb configuration file (\fI/etc/gitweb\&.conf\fR followin example):
.sp
.if n \{\
.RS 4
.\}
.nf
@stylesheets = ("/some/absolute/path/gitweb\&.css");
$my_uri    = "/";
$home_link = "/";
$per_request_config = 1;
.fi
.if n \{\
.RE
.\}
.sp
.sp
Nowadays though gitweb should create HTML base tag when needed (to set base URI fo' relatizzle links), so it should work automatically\&.
.SS "Webserver configuration wit multiple projects\(aq root"
.sp
If you wanna use gitweb wit nuff muthafuckin project roots you can edit yo' Apache virtual host n' gitweb configuration filez up in tha followin way\&.
.sp
Da virtual host configuration (in Apache configuration file) should be lookin like this:
.sp
.if n \{\
.RS 4
.\}
.nf
<VirtualHost *:80>
    ServerName    git\&.example\&.org
    DocumentRoot  /pub/git
    SetEnv        GITWEB_CONFIG  /etc/gitweb\&.conf

    # turnin on mod rewrite
    RewriteEngine on

    # make tha front page a internal rewrite ta tha gitweb script
    RewriteRule ^/$  /cgi\-bin/gitweb\&.cgi  [QSA,L,PT]

    # look fo' a public_git folda up in unix users\(aq home
    # http://git\&.example\&.org/~<user>/
    RewriteRule ^/\e~([^\e/]+)(/|/gitweb\&.cgi)?$   /cgi\-bin/gitweb\&.cgi \e
                [QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]

    # http://git\&.example\&.org/+<user>/
    #RewriteRule ^/\e+([^\e/]+)(/|/gitweb\&.cgi)?$  /cgi\-bin/gitweb\&.cgi \e
                 [QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]

    # http://git\&.example\&.org/user/<user>/
    #RewriteRule ^/user/([^\e/]+)/(gitweb\&.cgi)?$ /cgi\-bin/gitweb\&.cgi \e
                 [QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]

    # defined list of project roots
    RewriteRule ^/scm(/|/gitweb\&.cgi)?$ /cgi\-bin/gitweb\&.cgi \e
                [QSA,E=GITWEB_PROJECTROOT:/pub/scm/,L,PT]
    RewriteRule ^/var(/|/gitweb\&.cgi)?$ /cgi\-bin/gitweb\&.cgi \e
                [QSA,E=GITWEB_PROJECTROOT:/var/git/,L,PT]

    # make access fo' "dumb clients" work
    RewriteRule ^/(\&.*\e\&.git/(?!/?(HEAD|info|objects|refs))\&.*)?$ \e
                /cgi\-bin/gitweb\&.cgi%{REQUEST_URI}  [L,PT]
</VirtualHost>
.fi
.if n \{\
.RE
.\}
.sp
.sp
Here actual project root is passed ta gitweb via GITWEB_PROJECT_ROOT environment variable from a wizzy server, so you need ta put tha followin line up in gitweb configuration file (\fI/etc/gitweb\&.conf\fR up in above example):
.sp
.if n \{\
.RS 4
.\}
.nf
$projectroot = $ENV{\(aqGITWEB_PROJECTROOT\(aq} || "/pub/git";
.fi
.if n \{\
.RE
.\}
.sp
.sp
\fBNote\fR dat dis requires ta be set fo' each request, so either $per_request_config must be false, or tha above must be put up in code referenced by $per_request_config;
.sp
These configurations enable two thangs\&. First, each unix user (<user>) of tha server is ghon be able ta browse all up in gitweb Git repositories found up in \fI~/public_git/\fR wit tha followin url:
.sp
.if n \{\
.RS 4
.\}
.nf
http://git\&.example\&.org/~<user>/
.fi
.if n \{\
.RE
.\}
.sp
If you do not want dis feature on yo' server just remove tha second rewrite rule\&.
.sp
If you already use \(oqmod_userdir` up in yo' virtual host or you don\(cqt wanna use tha \(aq~\(cq as first character, just comment or remove tha second rewrite rule, n' uncomment one of tha followin accordin ta what tha fuck you want\&.
.sp
Second, repositories found up in \fI/pub/scm/\fR n' \fI/var/git/\fR is ghon be accessible all up in http://git\&.example\&.org/scm/ n' http://git\&.example\&.org/var/\&. Yo ass can add as nuff project roots as you want by addin rewrite rulez like tha third n' tha fourth\&.
.SS "PATH_INFO usage"
.sp
If you enable PATH_INFO usage up in gitweb by putting
.sp
.if n \{\
.RS 4
.\}
.nf
$feature{\(aqpathinfo\(aq}{\(aqdefault\(aq} = [1];
.fi
.if n \{\
.RE
.\}
.sp
.sp
in yo' gitweb configuration file, it is possible ta set up yo' server so dat it consumes n' produces URLs up in tha form
.sp
.if n \{\
.RS 4
.\}
.nf
http://git\&.example\&.com/project\&.git/shortlog/sometag
.fi
.if n \{\
.RE
.\}
.sp
i\&.e\&. without \fIgitweb\&.cgi\fR part, by rockin a cold-ass lil configuration like fuckin tha following\&. This configuration assumes dat \fI/var/www/gitweb\fR is tha DocumentRoot of yo' webserver, gotz nuff tha gitweb\&.cgi script n' complementary static filez (stylesheet, favicon, JavaScript):
.sp
.if n \{\
.RS 4
.\}
.nf
<VirtualHost *:80>
        ServerAlias git\&.example\&.com

        DocumentRoot /var/www/gitweb

        <Directory /var/www/gitweb>
                Options ExecCGI
                AddHandlez cgi\-script cgi

                DirectoryIndex gitweb\&.cgi

                RewriteEngine On
                RewriteCond %{REQUEST_FILENAME} !\-f
                RewriteCond %{REQUEST_FILENAME} !\-d
                RewriteRule ^\&.* /gitweb\&.cgi/$0 [L,PT]
        </Directory>
</VirtualHost>
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da rewrite rule guarantees dat existin static filez is ghon be properly served, whereas any other URL is ghon be passed ta gitweb as PATH_INFO parameter\&.
.sp
\fBNotice\fR dat up in dis case you don\(cqt need special settings fo' @stylesheets, $my_uri n' $home_link yo, but you lose "dumb client" access ta yo' project \&.git dirs (busted lyrics bout up in "Single URL fo' gitweb n' fo' fetching" section)\& fo' realz. A possible workaround fo' tha latta is tha following: up in yo' project root dir (e\&.g\&. \fI/pub/git\fR) have tha projects named \fBwithout\fR a \&.git extension (e\&.g\&. \fI/pub/git/project\fR instead of \fI/pub/git/project\&.git\fR) n' configure Apache as bigs up:
.sp
.if n \{\
.RS 4
.\}
.nf
<VirtualHost *:80>
        ServerAlias git\&.example\&.com

        DocumentRoot /var/www/gitweb

        AliasMatch ^(/\&.*?)(\e\&.git)(/\&.*)?$ /pub/git$1$3
        <Directory /var/www/gitweb>
                Options ExecCGI
                AddHandlez cgi\-script cgi

                DirectoryIndex gitweb\&.cgi

                RewriteEngine On
                RewriteCond %{REQUEST_FILENAME} !\-f
                RewriteCond %{REQUEST_FILENAME} !\-d
                RewriteRule ^\&.* /gitweb\&.cgi/$0 [L,PT]
        </Directory>
</VirtualHost>
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da additionizzle AliasMatch make it so that
.sp
.if n \{\
.RS 4
.\}
.nf
http://git\&.example\&.com/project\&.git
.fi
.if n \{\
.RE
.\}
.sp
will give raw access ta tha project\(cqs Git dir (so dat tha project can be cloned), while
.sp
.if n \{\
.RS 4
.\}
.nf
http://git\&.example\&.com/project
.fi
.if n \{\
.RE
.\}
.sp
will provide human\-friendly gitweb access\&.
.sp
This solution aint 100% cap-proof, up in tha sense dat if some project has a named ref (branch, tag) startin wit \fIgit/\fR, then paths such as
.sp
.if n \{\
.RS 4
.\}
.nf
http://git\&.example\&.com/project/command/abranch\&.\&.git/abranch
.fi
.if n \{\
.RE
.\}
.sp
will fail wit a 404 error\&.
.SH "BUGS"
.sp
Please report any bugs or feature requests ta \m[blue]\fBgit@vger\&.kernel\&.org\fR\m[]\&\s-2\u[1]\d\s+2, puttin "gitweb" up in tha subject of email\&.
.SH "SEE ALSO"
.sp
\fBgitweb.conf\fR(5), \fBgit-instaweb\fR(1)
.sp
\fIgitweb/README\fR, \fIgitweb/INSTALL\fR
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
.SH "NOTES"
.IP " 1." 4
git@vger.kernel.org
.RS 4
\%mailto:git@vger.kernel.org
.RE
