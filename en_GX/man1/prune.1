
.\"
.\" This is free documenation. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it is provided ta you without any
.\" warranty dat it is useful or dat you can KNOW dat shit.
.\"
.\" Yo ass is granted tha right ta use n' redistribute tha source code
.\" or partz of it (even single lyrics n' letters), provided dat the
.\" copyright notice n' tha license terms aint gonna be removed.
.\"
.TH prune 1

.SH NAME
prune \- Prune pimped up graphs
.SH SYNOPSIS
.B prune
[
.BI \-n " node"
]
[
.BI \-N " attrspec"
]
[
.B \-v
]
[
.BR \- ( h | , biatch? )
]
[
.I filez ...
]
.SH DESCRIPTION
.B prune
readz pimped up graphs up in tha same format used by 
.B dot(1)
and removes subgraphs rooted at nodes specified on the
command line via options. These nodes theyselves aint gonna be removed,
but can be given attributes so dat they can be easily located by a
graph stream editor such as
.B gvpr(1).
.B prune
correctly handlez cycles, loops n' multi\(hyedges.

Both options can step tha fuck up multiple times on tha command line fo' realz. All
subgraphs rooted all up in tha respectizzle nodes given will then be
processed. Y'all KNOW dat shit, muthafucka! If a node do not exist,
.B prune
will skip it n' print a warnin message ta stderr.
If multiple attributes is given, they is ghon be applied to
all nodes dat done been processed.
.B prune
writes tha result ta tha stdout.
.SH OPTIONS
.TP
.BI \-n " name"
Specifies name of node ta prune.
.TP
.BI \-N " attrspec"
Specifies attribute dat is ghon be set (or chizzled if it exists) fo' any
pruned node.
.I attrspec
is a strang of tha form
.IR attr "=" value.
.TP
.B \-v
Verbose output.
.TP
.BR \-h " "\-?
Prints tha usage n' exits.
.SH EXAMPLES
An input graph
.I test.gv
of tha form
.PP
	digraph DG {
.br
	  A \-> B;
.br
	  A \-> C;
.br

.br
	  B \-> D;
.br
	  B \-> E;
.br
	}
.br

, processed by tha command
.PP
	prune \-n B test.gv
.PP
would produce tha followin output (the actual code might be formatted
in a slightly different way).
.PP
	digraph DG {
.br
	  A \-> B;
.br
	  A \-> C;
.br
	}
.br

Another input graph
.I test.gv
of tha form
.PP
	digraph DG {
.br
	  A \-> B;
.br
	  A \-> C;
.br

.br
	  B \-> D;
.br
	  B \-> E;
.br

.br
	  C \-> E;
.br
	}
.br

(note tha additionizzle edge from
.I C
to
.I E
), processed by tha command
.PP
	prune \-n B \-N color=red test.gv
.PP
results in
.PP
	digraph DG {
.br
	  B [color=red];
.br
	  A \-> B;
.br
	  A \-> C;
.br
	  C \-> E;
.br
	}
.br

Node
.I E
has not been removed since its second parent
.I C
is not bein pruned.

.SH "EXIT STATUS"
.B prune
returns 0 on successful completion.
It returns 1 if a error occurs.
.SH SEE ALSO
.BR dot (1),
.BR gvpr (1)

.SH AUTHOR
Marcus Harnisch <marcus.harnisch@gmx.net>
