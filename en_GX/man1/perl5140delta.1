.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5140DELTA 1"
.TH PERL5140DELTA 1 "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5140delta \- what tha fuck is freshly smoked up fo' perl v5.14.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document raps bout differences between tha 5.12.0 release and
the 5.14.0 release.
.PP
If yo ass is upgradin from a earlier release like fuckin 5.10.0, first read
perl5120delta, which raps bout differences between 5.10.0 and
5.12.0.
.PP
Some of tha bug fixes up in dis release done been backported ta subsequent
releasez of 5.12.x.  Those is indicated wit tha 5.12.x version in
parentheses.
.SH "Notice"
.IX Header "Notice"
As busted lyrics bout up in perlpolicy, tha release of Perl 5.14.0 marks the
straight-up legit end of support fo' Perl 5.10.  Userz of Perl 5.10 or earlier
should consider upgradin ta a mo' recent release of Perl.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Unicode"
.IX Subsection "Unicode"
\fIUnicode Version 6.0 is now supported (mostly)\fR
.IX Subsection "Unicode Version 6.0 is now supported (mostly)"
.PP
Perl comes wit tha Unicode 6.0 data base updated with
Corrigendum #8 <http://www.unicode.org/versions/corrigendum8.html>,
with one exception noted below.
See <http://unicode.org/versions/Unicode6.0.0/> fo' details on tha new
release.  Perl do not support any Unicode provisionizzle properties,
includin tha freshly smoked up ones fo' dis release.
.PP
Unicode 6.0 has chosen ta use tha name \f(CW\*(C`BELL\*(C'\fR fo' tha characta at U+1F514,
which be a symbol dat be lookin like a funky-ass bell, n' is used up in Japanese cell
phones.  This conflicts wit tha long-standin Perl usage of having
\&\f(CW\*(C`BELL\*(C'\fR mean tha \s-1ASCII \s0\f(CW\*(C`BEL\*(C'\fR character, U+0007.  In Perl 5.14,
\&\f(CW\*(C`\eN{BELL}\*(C'\fR continues ta mean U+0007 yo, but its use generates a
deprecation warnin message unless such warnings is turned off.  The
new name fo' U+0007 up in Perl is \f(CW\*(C`ALERT\*(C'\fR, which correspondz sickly
with tha existin shorthand sequence fo' it, \f(CW"\ea"\fR.  \f(CW\*(C`\eN{BEL}\*(C'\fR
means U+0007, wit no warnin given. I aint talkin' bout chicken n' gravy biatch.  Da characta at U+1F514 has no
name up in 5.14 yo, but can be referred ta by \f(CW\*(C`\eN{U+1F514}\*(C'\fR. 
In Perl 5.16, \f(CW\*(C`\eN{BELL}\*(C'\fR will refer ta U+1F514; all code
that uses \f(CW\*(C`\eN{BELL}\*(C'\fR should be converted ta use \f(CW\*(C`\eN{ALERT}\*(C'\fR,
\&\f(CW\*(C`\eN{BEL}\*(C'\fR, or \f(CW"\ea"\fR before upgrading.
.PP
\fIFull functionalitizzle fo' \f(CI\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fI\fR
.IX Subsection "Full functionalitizzle fo' use feature unicode_strings"
.PP
This release serves up full functionalitizzle fo' \f(CW\*(C`use feature
\&\*(Aqunicode_strings\*(Aq\*(C'\fR.  Under its scope, all strang operations executed and
regular expressions compiled (even if executed outside its scope) have
Unicode semantics.  See \*(L"the 'unicode_strings' feature\*(R" up in feature.
But fuck dat shiznit yo, tha word on tha street is dat peep \*(L"Inverted bracketed characta classes n' multi-characta folds\*(R",
below.
.PP
This feature avoidz most formz of tha \*(L"Unicode Bug\*(R" (see
\&\*(L"Da \*(R"Unicode Bug"" up in perlunicode fo' details).  If there be any
possibilitizzle dat yo' code will process Unicode strings, yo ass is
\&\fIstrongly\fR encouraged ta use dis subpragma ta avoid nasty surprises.
.PP
\fI\f(CI\*(C`\eN{\f(CINAME\f(CI}\*(C'\fI n' \f(CI\*(C`charnames\*(C'\fI enhancements\fR
.IX Subsection "N{NAME} n' charnames enhancements"
.IP "\(bu" 4
\&\f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR n' \f(CW\*(C`charnames::vianame\*(C'\fR now know bout tha abbreviated
characta names listed by Unicode, like fuckin \s-1NBSP, SHY, LRO, ZWJ,\s0 etc.; all
customary abbreviations fo' tha C0 n' C1 control charactas (such as
\&\s-1ACK, BEL, CAN,\s0 etc.); n' all dem freshly smoked up variantz of some C1 full names that
are up in common usage.
.IP "\(bu" 4
Unicode has nuff muthafuckin \fInamed characta sequences\fR, up in which particular sequences
of code points is given names.  \f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR now recognizes these.
.IP "\(bu" 4
\&\f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR, \f(CW\*(C`charnames::vianame\*(C'\fR, n' \f(CW\*(C`charnames::viacode\*(C'\fR
now know bout every last muthafuckin characta up in Unicode.  In earlier releases of
Perl, they didn't give a fuck bout tha Hangul syllablez nor several
\&\s-1CJK \s0(Chinese/Japanese/Korean) characters.
.IP "\(bu" 4
It be now possible ta override Perlz abbreviations wit yo' own custom aliases.
.IP "\(bu" 4
Yo ass can now create a cold-ass lil custom aliaz of tha ordinal of a
character, known by \f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR, \f(CW\*(C`charnames::vianame()\*(C'\fR, and
\&\f(CW\*(C`charnames::viacode()\*(C'\fR.  Previously, aliases had ta be ta official
Unicode characta names.  This juiced it up impossible ta create a alias for
unnamed code points, like fuckin dem reserved fo' private
use.
.IP "\(bu" 4
Da freshly smoked up function \fIcharnames::string_vianame()\fR be a run-time version
of \f(CW\*(C`\eN{\f(CINAME\f(CW}}\*(C'\fR, returnin tha strang of charactas whose Unicode
name is its parameter n' shit.  It can handle Unicode named character
sequences, whereas tha pre-existin \fIcharnames::vianame()\fR cannot,
as tha latta returns a single code point.
.PP
See charnames fo' details on all these chizzles.
.PP
\fINew warnings categories fo' problematic (non\-)Unicode code points.\fR
.IX Subsection "New warnings categories fo' problematic (non-)Unicode code points."
.PP
Three freshly smoked up warnings subcategoriez of \*(L"utf8\*(R" done been added. Y'all KNOW dat shit, muthafucka!  These
allow you ta turn off some \*(L"utf8\*(R" warnings, while allowing
other warnings ta remain on. I aint talkin' bout chicken n' gravy biatch.  Da three categories are:
\&\f(CW\*(C`surrogate\*(C'\fR when \s-1UTF\-16\s0 surrogates is encountered;
\&\f(CW\*(C`nonchar\*(C'\fR when Unicode non-characta code points is encountered;
and \f(CW\*(C`non_unicode\*(C'\fR when code points above tha legal Unicode
maximum of 0x10FFFF is encountered.
.PP
\fIAny unsigned value can be encoded as a cold-ass lil character\fR
.IX Subsection "Any unsigned value can be encoded as a cold-ass lil character"
.PP
With dis release, Perl be adoptin a model dat any unsigned value
can be treated as a cold-ass lil code point n' encoded internally (as utf8)
without warnings, not just tha code points dat is legal up in Unicode.
But fuck dat shiznit yo, tha word on tha street is dat unless utf8 or tha correspondin sub-category (see previous
item) of lexical warnings done been explicitly turned off, outputting
or executin a Unicode-defined operation like fuckin upper-casing
on such a cold-ass lil code point generates a warning.  Attemptin ta input these
usin strict rulez (like fuckin wit tha \f(CW\*(C`:encoding(UTF\-8)\*(C'\fR layer)
will continue ta fail.  Prior ta dis release, handlin was
inconsistent n' up in places, incorrect.
.PP
Unicode non-characters, a shitload of which previously was erroneously
considered illegal up in places by Perl, contrary ta tha Unicode Standard,
are now always legal internally.  Inputtin or outputtin dem 
works tha same ol' dirty as wit tha non-legal Unicode code points, cuz tha Unicode
Standard say they is (only) illegal fo' \*(L"open interchange\*(R".
.PP
\fIUnicode database filez not installed\fR
.IX Subsection "Unicode database filez not installed"
.PP
Da Unicode database filez is no longer installed wit Perl.  This
doesn't affect any functionalitizzle up in Perl n' saves dope disk
space.  If you need these files, you can downlizzle dem from
<http://www.unicode.org/Public/zipped/6.0.0/>.
.SS "Regular Expressions"
.IX Subsection "Regular Expressions"
\fI\f(CI\*(C`(?^...)\*(C'\fI construct signifies default modifiers\fR
.IX Subsection "(?^...) construct signifies default modifiers"
.PP
An \s-1ASCII\s0 caret \f(CW"^"\fR immediately followin a \f(CW"(?"\fR up in a regular
expression now means dat tha subexpression do not inherit surrounding
modifiers like fuckin \f(CW\*(C`/i\*(C'\fR yo, but reverts ta tha Perl defaults, n' you can put dat on yo' toast.  Any modifiers
followin tha caret override tha defaults.
.PP
Stringification of regular expressions now uses dis notation. I aint talkin' bout chicken n' gravy biatch.  
For example, \f(CW\*(C`qr/hlagh/i\*(C'\fR would previously be stringified as
\&\f(CW\*(C`(?i\-xsm:hlagh)\*(C'\fR yo, but now itz stringified as \f(CW\*(C`(?^i:hlagh)\*(C'\fR.
.PP
Da main purpose of dis chizzle is ta allow tests dat rely on the
stringification \fInot\fR ta gotta chizzle whenever freshly smoked up modifiers is added.
See \*(L"Extended Patterns\*(R" up in perlre.
.PP
This chizzle is likely ta break code dat compares stringified regular
expressions wit fixed strings containin \f(CW\*(C`?\-xism\*(C'\fR.
.PP
\fI\f(CI\*(C`/d\*(C'\fI, \f(CI\*(C`/l\*(C'\fI, \f(CI\*(C`/u\*(C'\fI, n' \f(CI\*(C`/a\*(C'\fI modifiers\fR
.IX Subsection "/d, /l, /u, n' /a modifiers"
.PP
Four freshly smoked up regular expression modifiers done been added. Y'all KNOW dat shit, muthafucka!  These is mutually
exclusive: one only can be turned on at a time.
.IP "\(bu" 4
Da \f(CW\*(C`/l\*(C'\fR modifier say ta compile tha regular expression as if it were
in tha scope of \f(CW\*(C`use locale\*(C'\fR, even if it is not.
.IP "\(bu" 4
Da \f(CW\*(C`/u\*(C'\fR modifier say ta compile tha regular expression as if it were
in tha scope of a \f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR pragma.
.IP "\(bu" 4
Da \f(CW\*(C`/d\*(C'\fR (default) modifier is used ta override any \f(CW\*(C`use locale\*(C'\fR and
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR pragmas up in effect all up in tha time
of compilin tha regular expression.
.IP "\(bu" 4
Da \f(CW\*(C`/a\*(C'\fR regular expression modifier restricts \f(CW\*(C`\es\*(C'\fR, \f(CW\*(C`\ed\*(C'\fR n' \f(CW\*(C`\ew\*(C'\fR and
the \s-1POSIX \s0(\f(CW\*(C`[[:posix:]]\*(C'\fR) characta classes ta tha \s-1ASCII\s0 range.  Their
complements n' \f(CW\*(C`\eb\*(C'\fR n' \f(CW\*(C`\eB\*(C'\fR is correspondingly
affected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Otherwise, \f(CW\*(C`/a\*(C'\fR behaves like tha \f(CW\*(C`/u\*(C'\fR modifier, up in that
case-insensitizzle matchin uses Unicode semantics.
.Sp
If tha \f(CW\*(C`/a\*(C'\fR modifier is repeated, then additionally up in case-insensitive
matching, no \s-1ASCII\s0 characta can match a non-ASCII character.
For example,
.Sp
.Vb 2
\&    "k"     =~ /\eN{KELVIN SIGN}/ai
\&    "\exDF" =~ /ss/ai
.Ve
.Sp
match but
.Sp
.Vb 2
\&    "k"    =~ /\eN{KELVIN SIGN}/aai
\&    "\exDF" =~ /ss/aai
.Ve
.Sp
do not match.
.PP
See \*(L"Modifiers\*(R" up in perlre fo' mo' detail.
.PP
\fINon-destructizzle substitution\fR
.IX Subsection "Non-destructizzle substitution"
.PP
Da substitution (\f(CW\*(C`s///\*(C'\fR) n' transliteration
(\f(CW\*(C`y///\*(C'\fR) operators now support a \f(CW\*(C`/r\*(C'\fR option that
copies tha input variable, carries up tha substitution on
the copy, n' returns tha result.  Da original gangsta remains unmodified.
.PP
.Vb 3
\&  mah $old = "cat";
\&  mah $new = $old =~ s/cat/dog/r;
\&  # $old is "cat" n' $new is "dog"
.Ve
.PP
This is particularly useful wit \f(CW\*(C`map\*(C'\fR.  See perlop fo' mo' examples.
.PP
\fIRe-entrant regular expression engine\fR
.IX Subsection "Re-entrant regular expression engine"
.PP
It be now safe ta use regular expressions within \f(CW\*(C`(?{...})\*(C'\fR and
\&\f(CW\*(C`(??{...})\*(C'\fR code blocks inside regular expressions.
.PP
These blocks is still experimental, however, n' still have problems with
lexical (\f(CW\*(C`my\*(C'\fR) variablez n' abnormal exiting.
.PP
\fI\f(CI\*(C`use re \*(Aq/flags\*(Aq\*(C'\fI\fR
.IX Subsection "use re /flags"
.PP
Da \f(CW\*(C`re\*(C'\fR pragma now has tha mobilitizzle ta turn on regular expression flags
till tha end of tha lexical scope:
.PP
.Vb 2
\&    use re "/x";
\&    "foo" =~ / (.+) /;  # /x implied
.Ve
.PP
See \*(L"'/flags' mode\*(R" up in re fo' details.
.PP
\fI\eo{...} fo' octals\fR
.IX Subsection "o{...} fo' octals"
.PP
There be a freshly smoked up octal escape sequence, \f(CW"\eo"\fR, up in doublequote-like
contexts, n' you can put dat on yo' toast.  This construct allows big-ass octal ordinals beyond the
current max of 0777 ta be represented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  It also allows you ta specify a
characta up in octal which can safely be concatenated wit other regex
snippets n' which won't be trippin wit bein a funky-ass backreference to
a regex capture group.  See \*(L"Capture groups\*(R" up in perlre.
.PP
\fIAdd \f(CI\*(C`\ep{Titlecase}\*(C'\fI as a synonym fo' \f(CI\*(C`\ep{Title}\*(C'\fI\fR
.IX Subsection "Add p{Titlecase} as a synonym fo' p{Title}"
.PP
This synonym be added fo' symmetry wit tha Unicode property names
\&\f(CW\*(C`\ep{Uppercase}\*(C'\fR n' \f(CW\*(C`\ep{Lowercase}\*(C'\fR.
.PP
\fIRegular expression debuggin output improvement\fR
.IX Subsection "Regular expression debuggin output improvement"
.PP
Regular expression debuggin output (turned on by \f(CW\*(C`use re \*(Aqdebug\*(Aq\*(C'\fR) now
uses hexadecimal when escapin non-ASCII characters, instead of octal.
.PP
\fIReturn value of \f(CI\*(C`delete $+{...}\*(C'\fI\fR
.IX Subsection "Return value of delete $+{...}"
.PP
Custom regular expression engines can now determine tha return value of
\&\f(CW\*(C`delete\*(C'\fR on a entry of \f(CW\*(C`%+\*(C'\fR or \f(CW\*(C`%\-\*(C'\fR.
.SS "Syntactical Enhancements"
.IX Subsection "Syntactical Enhancements"
\fIArray n' hash container functions accept references\fR
.IX Subsection "Array n' hash container functions accept references"
.PP
\&\fBWarning:\fR This feature is considered experimental, as tha exact behaviour
may chizzle up in a gangbangin' future version of Perl.
.PP
All builtin functions dat operate directly on array or hash
containers now also accept unblessed hard references ta arrays
or hashes:
.PP
.Vb 10
\&  |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
\&  | Traditionizzle syntax         | Terse syntax              |
\&  |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
\&  | push @$arrayref, @shiznit    | push $arrayref, @shiznit    |
\&  | unshift @$arrayref, @shiznit | unshift $arrayref, @shiznit |
\&  | pop @$arrayref             | pop $arrayref             |
\&  | shift @$arrayref           | shift $arrayref           |
\&  | splice @$arrayref, 0, 2    | splice $arrayref, 0, 2    |
\&  | keys %$hashref             | keys $hashref             |
\&  | keys @$arrayref            | keys $arrayref            |
\&  | joints %$hashref           | joints $hashref           |
\&  | joints @$arrayref          | joints $arrayref          |
\&  | ($k,$v) = each %$hashref   | ($k,$v) = each $hashref   |
\&  | ($k,$v) = each @$arrayref  | ($k,$v) = each $arrayref  |
\&  |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
.Ve
.PP
This allows these builtin functions ta act on long dereferencin chains
or on tha return value of subroutines without needin ta wrap dem in
\&\f(CW\*(C`@{}\*(C'\fR or \f(CW\*(C`%{}\*(C'\fR:
.PP
.Vb 2
\&  push @{$obj\->tags}, $new_tag;  # oldschool way
\&  push $obj\->tags,    $new_tag;  # freshly smoked up way
\&
\&  fo' ( keys %{$hoh\->{genres}{artists}} ) {...} # oldschool way 
\&  fo' ( keys $hoh\->{genres}{artists}    ) {...} # freshly smoked up way
.Ve
.PP
\fISingle term prototype\fR
.IX Subsection "Single term prototype"
.PP
Da \f(CW\*(C`+\*(C'\fR prototype be a special alternatizzle ta \f(CW\*(C`$\*(C'\fR dat acts like
\&\f(CW\*(C`\e[@%]\*(C'\fR when given a literal array or hash variable yo, but will otherwise
force scalar context on tha argument.  See \*(L"Prototypes\*(R" up in perlsub.
.PP
\fI\f(CI\*(C`package\*(C'\fI block syntax\fR
.IX Subsection "package block syntax"
.PP
A package declaration can now contain a cold-ass lil code block, up in which case the
declaration is up in scope inside dat block only.  So \f(CW\*(C`package Foo { ... }\*(C'\fR
is precisely equivalent ta \f(CW\*(C`{ package Foo; ... }\*(C'\fR.  It also works with
a version number up in tha declaration, as up in \f(CW\*(C`package Foo 1.2 { ... }\*(C'\fR, 
which is its most bangin feature.  See perlfunc.
.PP
\fIStatement labels can step tha fuck up in mo' places\fR
.IX Subsection "Statement labels can step tha fuck up in mo' places"
.PP
Statement labels can now occur before any type of statement or declaration,
like fuckin \f(CW\*(C`package\*(C'\fR.
.PP
\fIStacked labels\fR
.IX Subsection "Stacked labels"
.PP
Multiple statement labels can now step tha fuck up before a single statement.
.PP
\fIUppercase X/B allowed up in hexadecimal/binary literals\fR
.IX Subsection "Uppercase X/B allowed up in hexadecimal/binary literals"
.PP
Literals may now use either upper case \f(CW\*(C`0X...\*(C'\fR or \f(CW\*(C`0B...\*(C'\fR prefixes,
in addizzle ta tha already supported \f(CW\*(C`0x...\*(C'\fR n' \f(CW\*(C`0b...\*(C'\fR
syntax [perl #76296].
.PP
C, Ruby, Python, n' \s-1PHP\s0 already support dis syntax, n' it makes
Perl mo' internally consistent: a round-trip wit \f(CW\*(C`eval sprintf
"%#X", 0x10\*(C'\fR now returns \f(CW16\fR, just like \f(CW\*(C`eval sprintf "%#x", 0x10\*(C'\fR.
.PP
\fIOverridable tie functions\fR
.IX Subsection "Overridable tie functions"
.PP
\&\f(CW\*(C`tie\*(C'\fR, \f(CW\*(C`tied\*(C'\fR n' \f(CW\*(C`untie\*(C'\fR can now be overridden [perl #75902].
.SS "Exception Handling"
.IX Subsection "Exception Handling"
To make dem mo' reliable n' consistent, nuff muthafuckin chizzlez done been made
to how tha fuck \f(CW\*(C`die\*(C'\fR, \f(CW\*(C`warn\*(C'\fR, n' \f(CW$@\fR behave.
.IP "\(bu" 4
When a exception is thrown inside a \f(CW\*(C`eval\*(C'\fR, tha exception is no
longer at risk of bein clobbered by destructor code hustlin durin unwinding.
Previously, tha exception was freestyled tha fuck into \f(CW$@\fR
early up in tha throwin process, n' would be overwritten if \f(CW\*(C`eval\*(C'\fR was
used internally up in tha destructor fo' a object dat had ta be freed
while exitin from tha outa \f(CW\*(C`eval\*(C'\fR.  Now tha exception is written
into \f(CW$@\fR last thang before exitin tha outa \f(CW\*(C`eval\*(C'\fR, so tha code
runnin immediately thereafta can rely on tha value up in \f(CW$@\fR erectly
correspondin ta dat \f(CW\*(C`eval\*(C'\fR.  (\f(CW$@\fR is still also set before exitin the
\&\f(CW\*(C`eval\*(C'\fR, fo' tha sake of destructors dat rely on all dis bullshit.)
.Sp
Likewise, a \f(CW\*(C`local $@\*(C'\fR inside a \f(CW\*(C`eval\*(C'\fR no longer clobbers any
exception thrown up in its scope.  Previously, tha restoration of \f(CW$@\fR upon
unwindin would overwrite any exception bein thrown. I aint talkin' bout chicken n' gravy biatch.  Now tha exception
gets ta tha \f(CW\*(C`eval\*(C'\fR anyway.  So \f(CW\*(C`local $@\*(C'\fR is safe before a \f(CW\*(C`die\*(C'\fR.
.Sp
Exceptions thrown from object destructors no longer modify tha \f(CW$@\fR
of tha surroundin context.  (If tha surroundin context was exception
unwinding, dis used ta be another way ta clobber tha exception being
thrown.)  Previously such a exception was
sometimes emitted as a warning, n' then either was
string-appended ta tha surroundin \f(CW$@\fR or straight-up replaced the
surroundin \f(CW$@\fR, dependin on whether dat exception n' tha surrounding
\&\f(CW$@\fR was strings or objects, n' you can put dat on yo' toast.  Now, a exception up in dis thang is
always emitted as a warning, leavin tha surroundin \f(CW$@\fR untouched.
In addizzle ta object destructors, dis also affects any function call
run by \s-1XS\s0 code rockin tha \f(CW\*(C`G_KEEPERR\*(C'\fR flag.
.IP "\(bu" 4
Warnings fo' \f(CW\*(C`warn\*(C'\fR can now be objects up in tha same way as exceptions
for \f(CW\*(C`die\*(C'\fR.  If a object-based warnin gets tha default handling
of freestylin ta standard error, it is stringified as before wit the
filename n' line number appended. Y'all KNOW dat shit, muthafucka!  But a \f(CW$SIG{_\|_WARN_\|_}\fR handlez now
receives a object-based warnin as a object, where previously it
was passed tha result of stringifyin tha object.
.SS "Other Enhancements"
.IX Subsection "Other Enhancements"
\fIAssignment ta \f(CI$0\fI sets tha legacy process name wit \fIprctl()\fI on Linux\fR
.IX Subsection "Assignment ta $0 sets tha legacy process name wit prctl() on Linux"
.PP
On Linux tha legacy process name is now set wit \fIprctl\fR\|(2), in
addizzle ta alterin tha \s-1POSIX\s0 name via \f(CW\*(C`argv[0]\*(C'\fR, as Perl has done
since version 4.000.  Now system utilitizzles dat read tha legacy process
name like fuckin \fIps\fR, \fItop\fR, n' \fIkillall\fR recognize tha name you set when
assignin ta \f(CW$0\fR.  Da strang you supply is truncated at 16 bytes;
this limitation is imposed by Linux.
.PP
\fI\fIsrand()\fI now returns tha seed\fR
.IX Subsection "srand() now returns tha seed"
.PP
This allows programs dat need ta have repeatable thangs up in dis biatch not ta gotta come
up wit they own seed-generatin mechanism.  Instead, they can use \fIsrand()\fR
and stash tha return value fo' future use.  One example be a test program with
too nuff combinations ta test comprehensively up in tha time available for
each run. I aint talkin' bout chicken n' gravy biatch.  It can test a random subset each time and, should there be a gangbangin' failure,
log tha seed used fo' dat run so dis can lata be used ta produce tha same thangs up in dis biatch.
.PP
\fIprintf-like functions KNOW post\-1980 size modifiers\fR
.IX Subsection "printf-like functions KNOW post-1980 size modifiers"
.PP
Perlz printf n' sprintf operators, n' Perlz internal printf replacement
function, now KNOW tha C90 size modifiers \*(L"hh\*(R" (\f(CW\*(C`char\*(C'\fR), \*(L"z\*(R"
(\f(CW\*(C`size_t\*(C'\fR), n' \*(L"t\*(R" (\f(CW\*(C`ptrdiff_t\*(C'\fR).  Also, when compiled wit a C99
compiler, Perl now understandz tha size modifier \*(L"j\*(R" (\f(CW\*(C`intmax_t\*(C'\fR) 
(but dis aint portable).
.PP
So, fo' example, on any modern machine, \f(CW\*(C`sprintf("%hhd", 257)\*(C'\fR returns \*(L"1\*(R".
.PP
\fINew global variable \f(CI\*(C`${^GLOBAL_PHASE}\*(C'\fI\fR
.IX Subsection "New global variable ${^GLOBAL_PHASE}"
.PP
A freshly smoked up global variable, \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR, has been added ta allow
introspection of tha current phase of tha Perl interpreter n' shit.  It aint nuthin but explained in
detail up in \*(L"${^GLOBAL_PHASE}\*(R" up in perlvar n' in
\&\*(L"\s-1BEGIN, UNITCHECK, CHECK, INIT\s0 n' \s-1END\*(R"\s0 up in perlmod.
.PP
\fI\f(CI\*(C`\-d:\-foo\*(C'\fI calls \f(CI\*(C`Devel::foo::unimport\*(C'\fI\fR
.IX Subsection "-d:-foo calls Devel::foo::unimport"
.PP
Da syntax \fB\-d:foo\fR was extended up in 5.6.1 ta make \fB\-d:foo=bar\fR
equivalent ta \fB\-MDevel::foo=bar\fR, which expands
internally ta \f(CW\*(C`use Devel::foo \*(Aqbar\*(Aq\*(C'\fR.
Perl now allows prefixin tha module name wit \fB\-\fR, wit tha same
semantics as \fB\-M\fR; dat is:
.ie n .IP """\-d:\-foo""" 4
.el .IP "\f(CW\-d:\-foo\fR" 4
.IX Item "-d:-foo"
Equivalent ta \fB\-M\-Devel::foo\fR: expandz to
\&\f(CW\*(C`no Devel::foo\*(C'\fR n' calls \f(CW\*(C`Devel::foo\->unimport()\*(C'\fR
if dat method exists.
.ie n .IP """\-d:\-foo=bar""" 4
.el .IP "\f(CW\-d:\-foo=bar\fR" 4
.IX Item "-d:-foo=bar"
Equivalent ta \fB\-M\-Devel::foo=bar\fR: expandz ta \f(CW\*(C`no Devel::foo \*(Aqbar\*(Aq\*(C'\fR,
and calls \f(CW\*(C`Devel::foo\->unimport("bar")\*(C'\fR if dat method exists.
.PP
This is particularly useful fo' suppressin tha default actionz of a
\&\f(CW\*(C`Devel::*\*(C'\fR modulez \f(CW\*(C`import\*(C'\fR method whilst still loadin it fo' debugging.
.PP
\fIFilehandle method calls load IO::File on demand\fR
.IX Subsection "Filehandle method calls load IO::File on demand"
.PP
When a method call on a gangbangin' filehandle would take a thugged-out dirtnap cuz tha method cannot
be resolved n' IO::File has not been loaded, Perl now loadz IO::File
via \f(CW\*(C`require\*(C'\fR n' attempts method resolution again:
.PP
.Vb 2
\&  open mah $fh, ">", $file;
\&  $fh\->binmode(":raw");     # loadz IO::File n' succeeds
.Ve
.PP
This also works fo' globs like \f(CW\*(C`STDOUT\*(C'\fR, \f(CW\*(C`STDERR\*(C'\fR, n' \f(CW\*(C`STDIN\*(C'\fR:
.PP
.Vb 1
\&  STDOUT\->autoflush(1);
.Ve
.PP
Because dis on-demand load happens only if method resolution fails, the
legacy approach of manually loadin a IO::File parent class fo' partial
method support still works as expected:
.PP
.Vb 3
\&  use IO::Handle;
\&  open mah $fh, ">", $file;
\&  $fh\->autoflush(1);        # IO::File not loaded
.Ve
.PP
\fIImproved IPv6 support\fR
.IX Subsection "Improved IPv6 support"
.PP
Da \f(CW\*(C`Socket\*(C'\fR module serves up freshly smoked up affordances fo' IPv6,
includin implementationz of tha \f(CW\*(C`Socket::getaddrinfo()\*(C'\fR and
\&\f(CW\*(C`Socket::getnameinfo()\*(C'\fR functions, along wit related constants n' a
handful of freshly smoked up functions.  See Socket.
.PP
\fIDTrace probes now include package name\fR
.IX Subsection "DTrace probes now include package name"
.PP
Da \f(CW\*(C`DTrace\*(C'\fR probes now include a additionizzle argument, \f(CW\*(C`arg3\*(C'\fR, which gotz nuff
the package tha subroutine bein entered or left was compiled in.
.PP
For example, rockin tha followin DTrace script:
.PP
.Vb 4
\&  perl$target:::sub\-entry
\&  {
\&      printf("%s::%s\en", copyinstr(arg0), copyinstr(arg3));
\&  }
.Ve
.PP
and then hustlin:
.PP
.Vb 1
\&  $ perl \-e \*(Aqsub test { }; test\*(Aq
.Ve
.PP
\&\f(CW\*(C`DTrace\*(C'\fR will print:
.PP
.Vb 1
\&  main::test
.Ve
.SS "New C APIs"
.IX Subsection "New C APIs"
See \*(L"Internal Chizzles\*(R".
.SH "Security"
.IX Header "Security"
.SS "User-defined regular expression properties"
.IX Subsection "User-defined regular expression properties"
\&\*(L"User-Defined Characta Properties\*(R" up in perlunicode documented dat you can
create custom propertizzles by definin subroutines whose names begin with
\&\*(L"In\*(R" or \*(L"Is\*(R".  But fuck dat shiznit yo, tha word on tha street is dat Perl did not straight-up enforce dat naming
restriction, so \f(CW\*(C`\ep{foo::bar}\*(C'\fR could call \fIfoo::bar()\fR if it existed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da documented
convention is now enforced.
.PP
Also, Perl no longer allows tainted regular expressions ta invoke a
user-defined property.  It simply takes a thugged-out dirt nap instead [perl #82616].
.SH "Incompatible Chizzles"
.IX Header "Incompatible Chizzles"
Perl 5.14.0 aint binary-compatible wit any previous stable release.
.PP
In addizzle ta tha sections dat follow, peep \*(L"C \s-1API\s0 Chizzles\*(R".
.SS "Regular Expressions n' Strin Escapes"
.IX Subsection "Regular Expressions n' Strin Escapes"
\fIInverted bracketed characta classes n' multi-characta folds\fR
.IX Subsection "Inverted bracketed characta classes n' multi-characta folds"
.PP
Some charactas match a sequence of two or three charactas up in \f(CW\*(C`/i\*(C'\fR
regular expression matchin under Unicode rules.  One example is
\&\f(CW\*(C`LATIN SMALL LETTER SHARP S\*(C'\fR which matches tha sequence \f(CW\*(C`ss\*(C'\fR.
.PP
.Vb 1
\& \*(Aqss\*(Aq =~ /\eA[\eN{LATIN SMALL LETTER SHARP S}]\ez/i  # Matches
.Ve
.PP
This, however, can lead ta straight-up counter-intuitizzle thangs up in dis biatch, especially
when inverted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Because of this, Perl 5.14 do not use multi-characta \f(CW\*(C`/i\*(C'\fR
matchin up in inverted characta classes.
.PP
.Vb 1
\& \*(Aqss\*(Aq =~ /\eA[^\eN{LATIN SMALL LETTER SHARP S}]+\ez/i  # ???
.Ve
.PP
This should match any sequencez of charactas dat aren't tha \f(CW\*(C`SHARP S\*(C'\fR
nor what tha fuck \f(CW\*(C`SHARP S\*(C'\fR matches under \f(CW\*(C`/i\*(C'\fR.  \f(CW"s"\fR aint \f(CW\*(C`SHARP S\*(C'\fR yo, but
Unicode say dat \f(CW"ss"\fR is what tha fuck \f(CW\*(C`SHARP S\*(C'\fR matches under \f(CW\*(C`/i\*(C'\fR.  So
which one \*(L"wins\*(R", biatch? Do you fail tha match cuz tha strang has \f(CW\*(C`ss\*(C'\fR or
accept it cuz it has a \f(CW\*(C`s\*(C'\fR followed by another \f(CW\*(C`s\*(C'\fR?
.PP
Earlier releasez of Perl did allow dis multi-characta matching,
but cuz of bugs, it mostly did not work.
.PP
\fI\e400\-\e777\fR
.IX Subsection "400-777"
.PP
In certain circumstances, \f(CW\*(C`\e400\*(C'\fR\-\f(CW\*(C`\e777\*(C'\fR up in regexes have behaved
differently than they behave up in all other doublequote-like contexts.
Since 5.10.1, Perl has issued a thugged-out deprecation warnin when dis happens.
Now, these literals behave tha same up in all doublequote-like contexts,
namely ta be equivalent ta \f(CW\*(C`\ex{100}\*(C'\fR\-\f(CW\*(C`\ex{1FF}\*(C'\fR, wit no deprecation
warning.
.PP
Use of \f(CW\*(C`\e400\*(C'\fR\-\f(CW\*(C`\e777\*(C'\fR up in tha command-line option \fB\-0\fR retain their
conventionizzle meaning.  They slurp whole input files; previously, this
was documented only fo' \fB\-0777\fR.
.PP
Because of various ambiguities, you should use tha new
\&\f(CW\*(C`\eo{...}\*(C'\fR construct ta represent charactas up in octal instead.
.PP
\fIMost \f(CI\*(C`\ep{}\*(C'\fI propertizzles is now immune ta case-insensitizzle matching\fR
.IX Subsection "Most p{} propertizzles is now immune ta case-insensitizzle matching"
.PP
For most Unicode properties, it don't make sense ta have dem match
differently under \f(CW\*(C`/i\*(C'\fR case-insensitizzle matching.  Bustin so can lead
to unexpected thangs up in dis biatch n' potential securitizzle holes.  For example
.PP
.Vb 1
\& m/\ep{ASCII_Hex_Digit}+/i
.Ve
.PP
could previously match non-ASCII charactas cuz of tha Unicode
matchin rulez (although there was nuff muthafuckin bugs wit this).  Now
matchin under \f(CW\*(C`/i\*(C'\fR gives tha same ol' dirty thangs up in dis biatch as non\-\f(CW\*(C`/i\*(C'\fR matchin except
for dem few propertizzles where playas have come ta expect differences,
namely tha ones where casin be a integral part of they meaning, such
as \f(CW\*(C`m/\ep{Uppercase}/i\*(C'\fR n' \f(CW\*(C`m/\ep{Lowercase}/i\*(C'\fR, both of which match
the same code points as matched by \f(CW\*(C`m/\ep{Cased}/i\*(C'\fR.
Details is up in \*(L"Unicode Properties\*(R" up in perlrecharclass.
.PP
User-defined property handlezs dat need ta match differently under \f(CW\*(C`/i\*(C'\fR
must be chizzled ta read tha freshly smoked up boolean parameta passed ta them, which
is non-zero if case-insensitizzle matchin is up in effect n' 0 otherwise.
See \*(L"User-Defined Characta Properties\*(R" up in perlunicode.
.PP
\fI\ep{} implies Unicode semantics\fR
.IX Subsection "p{} implies Unicode semantics"
.PP
Specifyin a Unicode property up in tha pattern indicates
that tha pattern is meant fo' matchin accordin ta Unicode rules, tha way
\&\f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR do.
.PP
\fIRegular expressions retain they localenizz when interpolated\fR
.IX Subsection "Regular expressions retain they localenizz when interpolated"
.PP
Regular expressions compiled under \f(CW\*(C`use locale\*(C'\fR now retain dis when
interpolated tha fuck into a freshly smoked up regular expression compiled outside a
\&\f(CW\*(C`use locale\*(C'\fR, n' vice-versa.
.PP
Previously, one regular expression interpolated tha fuck into another inherited
the localenizz of tha surroundin regex, losin whatever state it
originally had. Y'all KNOW dat shit, muthafucka!  This is considered a funky-ass bug fix yo, but may trip up code that
has come ta rely on tha incorrect behaviour.
.PP
\fIStringification of regexes has chizzled\fR
.IX Subsection "Stringification of regexes has chizzled"
.PP
Default regular expression modifiers is now notated using
\&\f(CW\*(C`(?^...)\*(C'\fR.  Code relyin on tha oldschool stringification will fail.  
This is so dat when freshly smoked up modifiers is added, such code won't
have ta keep changin each time dis happens, cuz tha stringification 
will automatically incorporate tha freshly smoked up modifiers.
.PP
Code dat need ta work properly wit both old\- n' new-style regexes
can avoid tha whole issue by rockin (for perls since 5.9.5; peep re):
.PP
.Vb 2
\& use re qw(regexp_pattern);
\& mah ($pat, $mods) = regexp_pattern($re_ref);
.Ve
.PP
If tha actual stringification is blingin or olda Perls need ta be
supported, you can use suttin' like tha following:
.PP
.Vb 2
\&    # Accept both oldschool n' new\-style stringification
\&    mah $modifiers = (qr/foobar/ =~ /\eQ(?^/) , biatch? "^" : "\-xism";
.Ve
.PP
And then use \f(CW$modifiers\fR instead of \f(CW\*(C`\-xism\*(C'\fR.
.PP
\fIRun-time code blocks up in regular expressions inherit pragmata\fR
.IX Subsection "Run-time code blocks up in regular expressions inherit pragmata"
.PP
Code blocks up in regular expressions (\f(CW\*(C`(?{...})\*(C'\fR n' \f(CW\*(C`(??{...})\*(C'\fR) previously
did not inherit pragmata (strict, warnings, etc.) if tha regular expression
was compiled at run time as happens up in cases like these two:
.PP
.Vb 3
\&  use re "eval";
\&  $foo =~ $bar; # when $bar gotz nuff (?{...})
\&  $foo =~ /$bar(?{ $finished = 1 })/;
.Ve
.PP
This bug has now been fixed yo, but code dat relied on tha buggy behaviour
may need ta be fixed ta account fo' tha erect behaviour.
.SS "Stashes n' Package Variables"
.IX Subsection "Stashes n' Package Variables"
\fILocalised tied hashes n' arrays is no longed tied\fR
.IX Subsection "Localised tied hashes n' arrays is no longed tied"
.PP
In tha following:
.PP
.Vb 6
\&    tie @a, ...;
\&    {
\&            local @a;
\&            # here, @a be a now a new, untied array
\&    }
\&    # here, @a refers again n' again n' again ta tha old, tied array
.Ve
.PP
Earlier versionz of Perl incorrectly tied tha freshly smoked up local array.  This has
now been fixed. Y'all KNOW dat shit, muthafucka!  This fix could however potentially cause a cold-ass lil chizzle in
behaviour of some code.
.PP
\fIStashes is now always defined\fR
.IX Subsection "Stashes is now always defined"
.PP
\&\f(CW\*(C`defined %Foo::\*(C'\fR now always returns true, even when no symbols have yet been
defined up in dat package.
.PP
This be a side-effect of removin a special-case kludge up in tha tokeniser,
added fo' 5.10.0, ta hide side-effectz of chizzlez ta tha internal storage of
hashes.  Da fix drastically reduces hashes' memory overhead.
.PP
Callin defined on a stash has been deprecated since 5.6.0, warned on
lexicals since 5.6.0, n' warned fo' stashes n' other package
variablez since 5.12.0.  \f(CW\*(C`defined %hash\*(C'\fR has always exposed an
implementation detail: emptyin a hash by deletin all entries from it do
not make \f(CW\*(C`defined %hash\*(C'\fR false.  Hence \f(CW\*(C`defined %hash\*(C'\fR aint valid code to
determine whether a arbitrary hash is empty.  Instead, use tha behaviour
of a empty \f(CW%hash\fR always returnin false up in scalar context.
.PP
\fIClearin stashes\fR
.IX Subsection "Clearin stashes"
.PP
Stash list assignment \f(CW\*(C`%foo:: = ()\*(C'\fR used ta make tha stash temporarily 
anonymous while dat shiznit was bein emptied. Y'all KNOW dat shit, muthafucka!  Consequently, any of its
subroutines referenced elsewhere would become anonymous,  showin up as
\&\*(L"(unknown)\*(R" up in \f(CW\*(C`caller\*(C'\fR.  They now retain they package names such that
\&\f(CW\*(C`caller\*(C'\fR returns tha original gangsta sub name if there is still a reference
to its typeglob n' \*(L"foo::_\|_ANON_\|_\*(R" otherwise [perl #79208].
.PP
\fIDereferencin typeglobs\fR
.IX Subsection "Dereferencin typeglobs"
.PP
If you assign a typeglob ta a scalar variable:
.PP
.Vb 1
\&    $glob = *foo;
.Ve
.PP
the glob dat is copied ta \f(CW$glob\fR is marked wit a special flag
indicatin dat tha glob is just a cold-ass lil copy.  This allows subsequent
assignments ta \f(CW$glob\fR ta overwrite tha glob.  Da original gangsta glob,
however, is immutable.
.PP
Some Perl operators did not distinguish between these two typez of globs.
This would result up in strange behaviour up in edge cases: \f(CW\*(C`untie $scalar\*(C'\fR
would not untie tha scalar if tha last thang assigned ta dat shiznit was a glob
(because it treated it as \f(CW\*(C`untie *$scalar\*(C'\fR, which untizzles a handle).
Assignment ta a glob slot (like fuckin \f(CW\*(C`*$glob = \e@some_array\*(C'\fR) would simply
assign \f(CW\*(C`\e@some_array\*(C'\fR ta \f(CW$glob\fR.
.PP
To fix this, tha \f(CW\*(C`*{}\*(C'\fR operator (includin its \f(CW*foo\fR n' \f(CW*$foo\fR forms)
has been modified ta cook up a freshly smoked up immutable glob if its operand be a glob
copy.  This allows operators dat cook up a gangbangin' finger-lickin' distinction between globs and
scalars ta be modified ta treat only immutable globs as globs.  (\f(CW\*(C`tie\*(C'\fR,
\&\f(CW\*(C`tied\*(C'\fR n' \f(CW\*(C`untie\*(C'\fR done been left as they is fo' compatibilityz sake,
but will warn, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch.  See \*(L"Deprecations\*(R".)
.PP
This causes a incompatible chizzle up in code dat assigns a glob ta the
return value of \f(CW\*(C`*{}\*(C'\fR when dat operator was passed a glob copy.  Take the
followin code, fo' instance:
.PP
.Vb 2
\&    $glob = *foo;
\&    *$glob = *bar;
.Ve
.PP
Da \f(CW*$glob\fR on tha second line returns a freshly smoked up immutable glob.  That new
glob is made a alias ta \f(CW*bar\fR.  Then it is discarded. Y'all KNOW dat shit, muthafucka!  So tha second
assignment has no effect.
.PP
See <http://rt.perl.org/rt3/Public/Bug/Display.html?id=77810> for
more detail.
.PP
\fIMagic variablez outside tha main package\fR
.IX Subsection "Magic variablez outside tha main package"
.PP
In previous versionz of Perl, magic variablez like \f(CW$!\fR, \f(CW%SIG\fR, etc. would
\&\*(L"leak\*(R" tha fuck into other packages.  So \f(CW%foo::SIG\fR could be used ta access signals,
\&\f(CW\*(C`${"foo::!"}\*(C'\fR (with strict mode off) ta access Cz \f(CW\*(C`errno\*(C'\fR, etc.
.PP
This was a funky-ass bug, or a \*(L"unintentional\*(R" feature, which caused various ill effects,
like fuckin signal handlezs bein wiped when modulez was loaded, etc.
.PP
This has been fixed (or tha feature has been removed, dependin on how tha fuck you see
it).
.PP
\fIlocal($_) strips all magic from \f(CI$_\fI\fR
.IX Subsection "local($_) strips all magic from $_"
.PP
\&\fIlocal()\fR on scalar variablez gives dem a freshly smoked up value but keeps all
their magic intact.  This has proven problematic fo' tha default
scalar variable \f(CW$_\fR, where perlsub recommendz dat any subroutine
that assigns ta \f(CW$_\fR should first localize dat shit.  This would throw an
exception if \f(CW$_\fR be aliased ta a read-only variable, n' could up in general have
various unintentionizzle side-effects.
.PP
Therefore, as a exception ta tha general rule, local($_) will not
only assign a freshly smoked up value ta \f(CW$_\fR yo, but also remove all existin magic from
it as well.
.PP
\fIParsin of package n' variable names\fR
.IX Subsection "Parsin of package n' variable names"
.PP
Parsin tha namez of packages n' package variablez has chizzled: 
multiple adjacent pairz of colons, as up in \f(CW\*(C`foo::::bar\*(C'\fR, is now all 
treated as package separators.
.PP
Regardless of dis chizzle, tha exact parsin of package separators has
never been guaranteed n' is subject ta chizzle up in future Perl versions.
.SS "Changes ta Syntax or ta Perl Operators"
.IX Subsection "Changes ta Syntax or ta Perl Operators"
\fI\f(CI\*(C`given\*(C'\fI return joints\fR
.IX Subsection "given return joints"
.PP
\&\f(CW\*(C`given\*(C'\fR blocks now return tha last evaluated
expression, or a empty list if tha block was exited by \f(CW\*(C`break\*(C'\fR.  Thus you
can now write:
.PP
.Vb 8
\&    mah $type = do {
\&     given ($num) {
\&      break     when undef;
\&      "integer" when /^[+\-]?[0\-9]+$/;
\&      "float"   when /^[+\-]?[0\-9]+(?:\e.[0\-9]+)?$/;
\&      "unknown";
\&     }
\&    };
.Ve
.PP
See \*(L"Return value\*(R" up in perlsyn fo' details.
.PP
\fIChange up in parsin of certain prototypes\fR
.IX Subsection "Change up in parsin of certain prototypes"
.PP
Functions declared wit tha followin prototypes now behave erectly as unary
functions:
.PP
.Vb 6
\&  *
\&  \e$ \e% \e@ \e* \e&
\&  \e[...]
\&  ;$ ;*
\&  ;\e$ ;\e% etc.
\&  ;\e[...]
.Ve
.PP
Cuz of dis bug fix [perl #75904], functions
usin tha \f(CW\*(C`(*)\*(C'\fR, \f(CW\*(C`(;$)\*(C'\fR n' \f(CW\*(C`(;*)\*(C'\fR prototypes
are parsed wit higher precedence than before.  So
in tha followin example:
.PP
.Vb 2
\&  sub foo(;$);
\&  foo $a < $b;
.Ve
.PP
the second line is now parsed erectly as \f(CW\*(C`foo($a) < $b\*(C'\fR, rather than
\&\f(CW\*(C`foo($a < $b)\*(C'\fR.  This happens when one of these operators is used in
an unparenthesised argument:
.PP
.Vb 10
\&  < > <= >= lt gt le ge
\&  == != <=> eq ne cmp ~~
\&  &
\&  | ^
\&  &&
\&  || //
\&  .. ...
\&  ?:
\&  = += \-= *= etc.
\&  , =>
.Ve
.PP
\fISmart-matchin against array slices\fR
.IX Subsection "Smart-matchin against array slices"
.PP
Previously, tha followin code resulted up in a successful match:
.PP
.Vb 3
\&    mah @a = qw(a y0 z);
\&    mah @b = qw(a x0 z);
\&    @a[0 .. $#b] ~~ @b;
.Ve
.PP
This odd behaviour has now been fixed [perl #77468].
.PP
\fINegation treats strings differently from before\fR
.IX Subsection "Negation treats strings differently from before"
.PP
Da unary negation operator, \f(CW\*(C`\-\*(C'\fR, now treats strings dat be lookin like numbers
as numbers [perl #57706].
.PP
\fINegatizzle zero\fR
.IX Subsection "Negatizzle zero"
.PP
Negatizzle zero (\-0.0), when converted ta a string, now becomes \*(L"0\*(R" on all
platforms.  It used ta become \*(L"\-0\*(R" on some yo, but \*(L"0\*(R" on others.
.PP
If you still need ta determine whether a zero is negative, use
\&\f(CW\*(C`sprintf("%g", $zero) =~ /^\-/\*(C'\fR or tha Data::Float module on \s-1CPAN.\s0
.PP
\fI\f(CI\*(C`:=\*(C'\fI is now a syntax error\fR
.IX Subsection ":= is now a syntax error"
.PP
Previously \f(CW\*(C`my $pi := 4\*(C'\fR was exactly equivalent ta \f(CW\*(C`my $pi : = 4\*(C'\fR,
with tha \f(CW\*(C`:\*(C'\fR bein treated as tha start of a attribute list, endin before
the \f(CW\*(C`=\*(C'\fR.  Da use of \f(CW\*(C`:=\*(C'\fR ta mean \f(CW\*(C`: =\*(C'\fR was deprecated up in 5.12.0, n' is
now a syntax error. Shiiit, dis aint no joke.  This allows future use of \f(CW\*(C`:=\*(C'\fR as a freshly smoked up token.
.PP
Outside tha corez tests fo' it, we find no Perl 5 code on \s-1CPAN\s0
usin dis construction, so we believe dat dis chizzle will have
lil impact on real-world codebases.
.PP
If it is straight-up necessary ta have empty attribute lists (for example,
because of a cold-ass lil code generator), simply avoid tha error by addin a space before
the \f(CW\*(C`=\*(C'\fR.
.PP
\fIChange up in tha parsin of identifiers\fR
.IX Subsection "Change up in tha parsin of identifiers"
.PP
Charactas outside tha Unicode \*(L"XIDStart\*(R" set is no longer allowed at the
beginnin of a identifier n' shit.  This means dat certain accents n' marks
that normally follow a alphabetic characta may no longer be tha first
characta of a identifier.
.SS "Threadz n' Processes"
.IX Subsection "Threadz n' Processes"
\fIDirectory handlez not copied ta threads\fR
.IX Subsection "Directory handlez not copied ta threads"
.PP
On systems other than Windows dat do not have
a \f(CW\*(C`fchdir\*(C'\fR function, newly-created threadz no
longer inherit directory handlez from they parent threads.  Such programs
would probably have crashed anyway [perl #75154].
.PP
\fI\f(CI\*(C`close\*(C'\fI on shared pipes\fR
.IX Subsection "close on shared pipes"
.PP
To avoid deadlocks, tha \f(CW\*(C`close\*(C'\fR function no longer waits fo' the
child process ta exit if tha underlyin file descriptor is still
in use by another thread. Y'all KNOW dat shit, muthafucka!  It returns legit up in such cases.
.PP
\fI\fIfork()\fI emulation aint gonna wait fo' signalled children\fR
.IX Subsection "fork() emulation aint gonna wait fo' signalled children"
.PP
On Windows parent processes would not terminizzle until all forked
lil pimps had terminated first.  But fuck dat shiznit yo, tha word on tha street is dat \f(CW\*(C`kill("KILL", ...)\*(C'\fR is
inherently unstable on pseudo-processes, n' \f(CW\*(C`kill("TERM", ...)\*(C'\fR
might not git served up if tha lil pimp is blocked up in a system call.
.PP
To avoid tha deadlock n' still provide a safe mechanizzle ta terminate
the hostin process, Perl now no longer waits fo' lil pimps that
have been busted a \s-1SIGTERM\s0 signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  It be up ta tha parent process to
\&\fIwaitpid()\fR fo' these lil pimps if child-cleanup processin must be
allowed ta finish.  But fuck dat shiznit yo, tha word on tha street is dat it be also then tha responsibilitizzle of the
parent ta avoid tha deadlock by makin shizzle tha lil pimp process
can't be blocked on I/O.
.PP
See perlfork fo' mo' shiznit bout tha \fIfork()\fR emulation on
Windows.
.SS "Configuration"
.IX Subsection "Configuration"
\fINamin fixes up in Policy_sh.SH may invalidate Policy.sh\fR
.IX Subsection "Namin fixes up in Policy_sh.SH may invalidate Policy.sh"
.PP
Several long-standin typos n' namin mad dramas up in \fIPolicy_sh.SH\fR have
been fixed, standardizin on tha variable names used up in \fIconfig.sh\fR.
.PP
This will chizzle tha behaviour of \fIPolicy.sh\fR if you happen ta have been
accidentally relyin on its incorrect behaviour.
.PP
\fIPerl source code is read up in text mode on Windows\fR
.IX Subsection "Perl source code is read up in text mode on Windows"
.PP
Perl scripts used ta be read up in binary mode on Windows fo' tha benefit
of tha ByteLoader module (which is no longer part of core Perl).  This
had tha side-effect of breakin various operations on tha \f(CW\*(C`DATA\*(C'\fR filehandle,
includin \fIseek()\fR/\fItell()\fR, n' even simply readin from \f(CW\*(C`DATA\*(C'\fR afta filehandles
have been flushed by a cold-ass lil call ta \fIsystem()\fR, backticks, \fIfork()\fR etc.
.PP
Da default build options fo' Windows done been chizzled ta read Perl source
code on Windows up in text mode now, nahmeean, biatch?  ByteLoader will (hopefully) be updated on
\&\s-1CPAN\s0 ta automatically handle dis thang [perl #28106].
.SH "Deprecations"
.IX Header "Deprecations"
See also \*(L"Deprecated C APIs\*(R".
.SS "Omittin a space between a regular expression n' subsequent word"
.IX Subsection "Omittin a space between a regular expression n' subsequent word"
Omittin tha space between a regular expression operator or
its modifiers n' tha followin word is deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For
example, \f(CW\*(C`m/foo/sand $bar\*(C'\fR is fo' now still parsed
as \f(CW\*(C`m/foo/s n' $bar\*(C'\fR yo, but will now issue a warning.
.ie n .SS """\ec\fIX\fP"""
.el .SS "\f(CW\ec\fP\f(CIX\fP\f(CW\fP"
.IX Subsection "cX"
Da backslash-c construct was designed as a way of specifying
non-printable charactas yo, but there was no restrictions (on \s-1ASCII\s0
platforms) on what tha fuck tha characta followin tha \f(CW\*(C`c\*(C'\fR could be.  Now,
a deprecation warnin is raised if dat characta aint a \s-1ASCII\s0 character.
Also, a thugged-out deprecation warnin is raised fo' \f(CW"\ec{"\fR (which is tha same
as simply sayin \f(CW";"\fR).
.ie n .SS """\eb{"" n' ""\eB{"""
.el .SS "\f(CW``\eb{''\fP n' \f(CW``\eB{''\fP"
.IX Subsection """b{"" n' ""B{"""
In regular expressions, a literal \f(CW"{"\fR immediately followin a \f(CW"\eb"\fR
(not up in a funky-ass bracketed characta class) or a \f(CW"\eB{"\fR is now deprecated
to allow fo' its future use by Perl itself.
.SS "Perl 4\-era .pl libraries"
.IX Subsection "Perl 4-era .pl libraries"
Perl bundlez a handful of library filez dat predate Perl 5.
This bundlin is now deprecated fo' most of these files, which is now
available from \s-1CPAN. \s0 Da affected filez now warn when run, if they were
installed as part of tha core.
.PP
This be a mandatory warning, not obeyin \fB\-X\fR or lexical warnin bits.
Da warnin is modelled on dat supplied by \fIdeprecate.pm\fR for
deprecated-in-core \fI.pm\fR libraries. Put ya muthafuckin choppers up if ya feel dis!  It points ta tha specific \s-1CPAN\s0
distribution dat gotz nuff tha \fI.pl\fR libraries. Put ya muthafuckin choppers up if ya feel dis!  Da \s-1CPAN\s0 versions, of
course, do not generate tha warning.
.ie n .SS "List assignment ta $["
.el .SS "List assignment ta \f(CW$[\fP"
.IX Subsection "List assignment ta $["
Assignment ta \f(CW$[\fR was deprecated n' started ta give warnings in
Perl version 5.12.0.  This version of Perl (5.14) now also emits a warnin 
when assignin ta \f(CW$[\fR up in list context.  This fixes a oversight up in 5.12.0.
.SS "Use of qw(...) as parentheses"
.IX Subsection "Use of qw(...) as parentheses"
Historically tha parser fooled itself tha fuck into thankin dat \f(CW\*(C`qw(...)\*(C'\fR literals
were always enclosed up in parentheses, n' as a result you could sometimes omit
parentheses round them:
.PP
.Vb 1
\&    fo' $x qw(a b c) { ... }
.Ve
.PP
Da parser no longer lies ta itself up in dis way.  Wrap tha list literal in
parentheses like this:
.PP
.Vb 1
\&    fo' $x (qw(a b c)) { ... }
.Ve
.PP
This is bein deprecated cuz tha parentheses up in \f(CW\*(C`for $i (1,2,3) { ... }\*(C'\fR
are not part of expression syntax.  They is part of tha statement
syntax, wit tha \f(CW\*(C`for\*(C'\fR statement wantin literal parentheses.
Da synthetic parentheses dat a \f(CW\*(C`qw\*(C'\fR expression acquired was only
intended ta be treated as part of expression syntax.
.PP
Note dat dis do not chizzle tha behaviour of cases like:
.PP
.Vb 2
\&    use POSIX qw(setlocale localeconv);
\&    our @EXPORT = qw(foo bar baz);
.Ve
.PP
where parentheses was never required round tha expression.
.ie n .SS """\eN{BELL}"""
.el .SS "\f(CW\eN{BELL}\fP"
.IX Subsection "N{BELL}"
This is cuz Unicode is rockin dat name fo' a gangbangin' finger-lickin' different character.
See \*(L"Unicode Version 6.0 is now supported (mostly)\*(R" fo' more
explanation.
.ie n .SS """?PATTERN?"""
.el .SS "\f(CW?PATTERN?\fP"
.IX Subsection "?PATTERN?"
\&\f(CW\*(C`?PATTERN?\*(C'\fR (without tha initial \f(CW\*(C`m\*(C'\fR) has been deprecated n' now produces
a warning.  This is ta allow future use of \f(CW\*(C`?\*(C'\fR up in freshly smoked up operators.
Da match-once functionalitizzle is still available as \f(CW\*(C`m?PATTERN?\*(C'\fR.
.SS "Tie functions on scalars holdin typeglobs"
.IX Subsection "Tie functions on scalars holdin typeglobs"
Callin a tie function (\f(CW\*(C`tie\*(C'\fR, \f(CW\*(C`tied\*(C'\fR, \f(CW\*(C`untie\*(C'\fR) wit a scalar argument
acts on a gangbangin' filehandle if tha scalar happens ta hold a typeglob.
.PP
This be a long-standin bug dat is ghon be removed up in Perl 5.16, as
there is currently no way ta tie tha scalar itself when it holds
a typeglob, n' no way ta untie a scalar dat has had a typeglob
assigned ta dat shit.
.PP
Now there be a thugged-out deprecation warnin whenever a tie
function is used on a handle without a explicit \f(CW\*(C`*\*(C'\fR.
.SS "User-defined case-mapping"
.IX Subsection "User-defined case-mapping"
This feature is bein deprecated cuz of its nuff issues, as documented in
\&\*(L"User-Defined Case Mappings (for straight-up hackers only)\*(R" up in perlunicode.
This feature is ghon be removed up in Perl 5.16.  Instead use tha \s-1CPAN\s0 module
Unicode::Casing, which serves up improved functionality.
.SS "Deprecated modules"
.IX Subsection "Deprecated modules"
Da followin module is ghon be removed from tha core distribution up in a
future release, n' should be installed from \s-1CPAN\s0 instead. Y'all KNOW dat shit, muthafucka!  Distributions
on \s-1CPAN\s0 dat require dis should add it ta they prerequisites.  The
core version of these module now thangs a thugged-out deprecation warning.
.PP
If you shizzle a packaged version of Perl, either ridin' solo or as part of a
larger system, then you should carefully consider tha repercussions of
core module deprecations.  Yo ass may wanna consider shippin yo' default
build of Perl wit a package fo' tha deprecated module that
installs tha fuck into \f(CW\*(C`vendor\*(C'\fR or \f(CW\*(C`site\*(C'\fR Perl library directories. Put ya muthafuckin choppers up if ya feel dis!  This will
inhibit tha deprecation warnings.
.PP
Alternatively, you may wanna consider patchin \fIlib/deprecate.pm\fR
to provide deprecation warnings specific ta yo' packagin system
or distribution of Perl, consistent wit how tha fuck yo' packagin system
or distribution manages a staged transizzle from a release where the
installation of a single package serves up tha given functionality, to
a lata release where tha system administrator need ta know ta install
multiple packages ta git dat same functionality.
.PP
Yo ass can silence these deprecation warnings by installin tha module
in question from \s-1CPAN. \s0 To install tha sickest fuckin version of it by role
rather than by name, just install \f(CW\*(C`Task::Deprecations::5_14\*(C'\fR.
.IP "Devel::DProf" 4
.IX Item "Devel::DProf"
We straight fuckin recommend dat you install n' use Devel::NYTProf instead
of Devel::DProf, as Devel::NYTProf offers significantly
improved profilin n' reporting.
.SH "Performizzle Enhancements"
.IX Header "Performizzle Enhancements"
.ie n .SS """Safe signals"" optimisation"
.el .SS "``Safe signals'' optimisation"
.IX Subsection "Safe signals optimisation"
Signal dispatch has been moved from tha runloop tha fuck into control ops.
This should give all dem cement speed increase, n' eliminates nearly
all tha speed penalty caused by tha introduction of \*(L"safe signals\*(R"
in 5.8.0.  Signals should still be dispatched within tha same
statement as they was previously.  If dis do \fInot\fR happen, or
if you find it possible ta create uninterruptible loops, dis be a
bug, n' reports is encouraged of how tha fuck ta recreate such issues.
.SS "Optimisation of \fIshift()\fP n' \fIpop()\fP calls without arguments"
.IX Subsection "Optimisation of shift() n' pop() calls without arguments"
Two fewer OPs is used fo' \fIshift()\fR n' \fIpop()\fR calls wit no argument (with
implicit \f(CW@_\fR).  This chizzle make \fIshift()\fR 5% fasta than \f(CW\*(C`shift @_\*(C'\fR
on non-threaded perls, n' 25% fasta on threaded ones.
.SS "Optimisation of regexp engine strang comparison work"
.IX Subsection "Optimisation of regexp engine strang comparison work"
Da \f(CW\*(C`foldEQ_utf8\*(C'\fR \s-1API\s0 function fo' case-insensitizzle comparison of strings (which
is used heavily by tha regexp engine) was substantially refactored and
optimised \*(-- n' its documentation much improved as a gangbangin' free bonus.
.SS "Regular expression compilation speed-up"
.IX Subsection "Regular expression compilation speed-up"
Compilin regular expressions has been made fasta when upgrading
the regex ta utf8 is necessary but dis aint known when tha compilation begins.
.SS "Strin appendin is 100 times faster"
.IX Subsection "Strin appendin is 100 times faster"
When bustin a shitload of strang appending, perls built ta use tha system's
\&\f(CW\*(C`malloc\*(C'\fR could end up allocatin a shitload mo' memory than needed up in a
inefficient way.
.PP
\&\f(CW\*(C`sv_grow\*(C'\fR, tha function used ta allocate mo' memory if necessary
when appendin ta a string, has been taught ta round up tha memory
it requests ta a cold-ass lil certain geometric progression, makin it much fasta on
certain platforms n' configurations.  On Win32, itz now bout 100 times
faster.
.ie n .SS "Eliminizzle ""PL_*"" accessor functions under ithreads"
.el .SS "Eliminizzle \f(CWPL_*\fP accessor functions under ithreads"
.IX Subsection "Eliminizzle PL_* accessor functions under ithreads"
When \f(CW\*(C`MULTIPLICITY\*(C'\fR was first pimped, n' interpreta state moved into
an interpreta struct, thread\- n' interpreter-local \f(CW\*(C`PL_*\*(C'\fR variables
were defined as macros dat called accessor functions (returnin the
address of tha value) outside tha Perl core.  Da intent was ta allow
thugz within tha interpreta struct ta chizzle size without breaking
binary compatibility, so dat bug fixes could be merged ta a maintenance
branch dat necessitated such a size chizzle.  This mechanizzle was redundant
and penalised well-behaved code.  It has been removed.
.SS "Freein weak references"
.IX Subsection "Freein weak references"
When there be nuff weak references ta a object, freein dat object
can under some circumstances take O(\fIN*N\fR) time ta free, where
\&\fIN\fR is tha number of references.  Da circumstances up in which dis can happen
have been reduced [perl #75254]
.SS "Lexical array n' hash assignments"
.IX Subsection "Lexical array n' hash assignments"
An earlier optimisation ta speed up \f(CW\*(C`my @array = ...\*(C'\fR and
\&\f(CW\*(C`my %hash = ...\*(C'\fR assignments caused a funky-ass bug n' was disabled up in Perl 5.12.0.
.PP
Now our crazy asses have found another way ta speed up these assignments [perl #82110].
.ie n .SS "@_ uses less memory"
.el .SS "\f(CW@_\fP uses less memory"
.IX Subsection "@_ uses less memory"
Previously, \f(CW@_\fR was allocated fo' every last muthafuckin subroutine at compile time with
enough space fo' four entries. Put ya muthafuckin choppers up if ya feel dis!  Now dis allocation is done on demand when
the subroutine is called [perl #72416].
.SS "Size optimisations ta \s-1SV\s0 n' \s-1HV\s0 structures"
.IX Subsection "Size optimisations ta SV n' HV structures"
\&\f(CW\*(C`xhv_fill\*(C'\fR has been eliminated from \f(CW\*(C`struct xpvhv\*(C'\fR, savin 1 \s-1IV\s0 per hash and
on some systems will cause \f(CW\*(C`struct xpvhv\*(C'\fR ta become cache-aligned. Y'all KNOW dat shit, muthafucka!  To avoid
this memory savin causin a slowdown elsewhere, boolean use of \f(CW\*(C`HvFILL\*(C'\fR
now calls \f(CW\*(C`HvTOTALKEYS\*(C'\fR instead (which is equivalent), so while tha fill
data when straight-up required is now calculated on demand, cases when
this need ta be done should be rare.
.PP
Da order of structure elements up in \s-1SV\s0 bodies has chizzled. Y'all KNOW dat shit, muthafucka!  Effectively,
the \s-1NV\s0 slot has swapped location wit \s-1STASH\s0 n' \s-1MAGIC. \s0 As all access to
\&\s-1SV\s0 thugz is via macros, dis should be straight-up transparent.  This
change allows tha space savin fo' PVHVs documented above, n' may reduce
the memory allocation needed fo' PVIVs on some architectures.
.PP
\&\f(CW\*(C`XPV\*(C'\fR, \f(CW\*(C`XPVIV\*(C'\fR, n' \f(CW\*(C`XPVNV\*(C'\fR now allocate only tha partz of tha \f(CW\*(C`SV\*(C'\fR body
they straight-up use, savin some space.
.PP
Scalars containin regular expressions now allocate only tha part of tha \f(CW\*(C`SV\*(C'\fR
body they straight-up use, savin some space.
.SS "Memory consumption improvements ta Exporter"
.IX Subsection "Memory consumption improvements ta Exporter"
Da \f(CW@EXPORT_FAIL\fR \s-1AV\s0 is no longer pimped unless needed, hence neither is
the typeglob backin dat shit.  This saves bout 200 bytes fo' every last muthafuckin package that
uses Exporta but don't use dis functionality.
.SS "Memory savings fo' weak references"
.IX Subsection "Memory savings fo' weak references"
For weak references, tha common case of just a single weak reference
per referent has been optimised ta reduce tha storage required. Y'all KNOW dat shit, muthafucka!  In this
case it saves tha equivalent of one lil' small-ass Perl array per referent.
.ie n .SS """%+"" n' ""%\-"" use less memory"
.el .SS "\f(CW%+\fP n' \f(CW%\-\fP use less memory"
.IX Subsection "%+ n' %- use less memory"
Da bulk of tha \f(CW\*(C`Tie::Hash::NamedCapture\*(C'\fR module used ta be up in tha Perl
core.  It has now been moved ta a \s-1XS\s0 module ta reduce overhead for
programs dat do not use \f(CW\*(C`%+\*(C'\fR or \f(CW\*(C`%\-\*(C'\fR.
.SS "Multiple lil' small-ass improvements ta threads"
.IX Subsection "Multiple lil' small-ass improvements ta threads"
Da internal structurez of threadin now make fewer \s-1API\s0 calls n' fewer
allocations, resultin up in noticeably smalla object code.  Additionally,
many thread context checks done been deferred so they done only 
as needed (although dis is only possible fo' non-debuggin builds).
.SS "Adjacent pairz of nextstate opcodes is now optimized away"
.IX Subsection "Adjacent pairz of nextstate opcodes is now optimized away"
Previously, up in code such as
.PP
.Vb 1
\&    use constant DEBUG => 0;
\&
\&    sub GAK {
\&        warn if DEBUG;
\&        print "stuff\en";
\&    }
.Ve
.PP
the ops fo' \f(CW\*(C`warn if DEBUG\*(C'\fR would be folded ta a \f(CW\*(C`null\*(C'\fR op (\f(CW\*(C`ex\-const\*(C'\fR) yo, but
the \f(CW\*(C`nextstate\*(C'\fR op would remain, resultin up in a runtime op dispatch of
\&\f(CW\*(C`nextstate\*(C'\fR, \f(CW\*(C`nextstate\*(C'\fR, etc.
.PP
Da execution of a sequence of \f(CW\*(C`nextstate\*(C'\fR ops is indistinguishable from just
the last \f(CW\*(C`nextstate\*(C'\fR op so tha peephole optimizer now eliminates tha straight-up original gangsta of
a pair of \f(CW\*(C`nextstate\*(C'\fR ops except when tha straight-up original gangsta carries a label, since labels
must not be eliminated by tha optimizer, n' label usage aint conclusively known
at compile time.
.SH "Modulez n' Pragmata"
.IX Header "Modulez n' Pragmata"
.SS "New Modulez n' Pragmata"
.IX Subsection "New Modulez n' Pragmata"
.IP "\(bu" 4
CPAN::Meta::YAML 0.003 has been added as a thugged-out dual-life module.  It supports a
subset of \s-1YAML\s0 sufficient fo' readin n' freestylin \fI\s-1META\s0.yml\fR n' \fI\s-1MYMETA\s0.yml\fR files
included wit \s-1CPAN\s0 distributions or generated by tha module installation
toolchain. I aint talkin' bout chicken n' gravy biatch.  It should not be used fo' any other general \s-1YAML\s0 parsin or
generation task.
.IP "\(bu" 4
CPAN::Meta version 2.110440 has been added as a thugged-out dual-life module.  It
provides a standard library ta read, interpret n' write \s-1CPAN\s0 distribution
metadata filez (like \fI\s-1META\s0.json\fR n' \fI\s-1META\s0.yml\fR) dat describe a
distribution, its contents, n' tha requirements fo' buildin it and
installin dat shit.  Da sickest fuckin \s-1CPAN\s0 distribution metadata justification is
included as CPAN::Meta::Spec n' notes on chizzlez up in tha justification
over time is given up in CPAN::Meta::History.
.IP "\(bu" 4
HTTP::Tiny 0.012 has been added as a thugged-out dual-life module.  It be a hella
small, simple \s-1HTTP/1.1\s0 client designed fo' simple \s-1GET\s0 requests n' file
mirroring.  It has been added so dat \fI\s-1CPAN\s0.pm\fR n' \s-1CPANPLUS\s0 can
\&\*(L"bootstrap\*(R" \s-1HTTP\s0 access ta \s-1CPAN\s0 rockin pure Perl without relyin on external
binaries like \fIcurl\fR\|(1) or \fIwget\fR\|(1).
.IP "\(bu" 4
\&\s-1JSON::PP\s0 2.27105 has been added as a thugged-out dual-life module ta allow \s-1CPAN\s0
clients ta read \fI\s-1META\s0.json\fR filez up in \s-1CPAN\s0 distributions.
.IP "\(bu" 4
Module::Metadata 1.000004 has been added as a thugged-out dual-life module.  It gathers
package n' \s-1POD\s0 shiznit from Perl module files.  It be a standalone module
based on Module::Build::ModuleInfo fo' use by other module installation
toolchain components, n' you can put dat on yo' toast.  Module::Build::ModuleInfo has been deprecated in
favor of dis module instead.
.IP "\(bu" 4
Perl::OSType 1.002 has been added as a thugged-out dual-life module.  It maps Perl
operatin system names (like \*(L"dragonfly\*(R" or \*(L"MSWin32\*(R") ta mo' generic types
with standardized names (like \*(L"Unix\*(R" or \*(L"Windows\*(R").  It has been refactored
out of Module::Build n' ExtUtils::CBuilder n' consolidates such mappings into
a single location fo' easier maintenance.
.IP "\(bu" 4
Da followin modulez was added by tha Unicode::Collate 
upgrade.  See below fo' details.
.Sp
Unicode::Collate::CJK::Big5
.Sp
Unicode::Collate::CJK::GB2312
.Sp
Unicode::Collate::CJK::JISX0208
.Sp
Unicode::Collate::CJK::Korean
.Sp
Unicode::Collate::CJK::Pinyin
.Sp
Unicode::Collate::CJK::Stroke
.IP "\(bu" 4
Version::Requirements version 0.101020 has been added as a thugged-out dual-life
module.  It serves up a standard library ta model n' manipulates module
prerequisites n' version constraints defined up in CPAN::Meta::Spec.
.SS "Updated Modulez n' Pragma"
.IX Subsection "Updated Modulez n' Pragma"
.IP "\(bu" 4
attributes has been upgraded from version 0.12 ta 0.14.
.IP "\(bu" 4
Archive::Extract has been upgraded from version 0.38 ta 0.48.
.Sp
Updates since 0.38 include: a safe print method dat guards
Archive::Extract from chizzlez ta \f(CW\*(C`$\e\*(C'\fR; a gangbangin' fix ta tha tests when run up in core
Perl; support fo' \s-1TZ\s0 files; a modification fo' tha lzma
logic ta favour IO::Uncompress::Unlzma; n' a gangbangin' fix
for a issue wit NetBSD-current n' its freshly smoked up \fIunzip\fR\|(1)
executable.
.IP "\(bu" 4
Archive::Tar has been upgraded from version 1.54 ta 1.76.
.Sp
Important chizzlez since 1.54 include tha following:
.RS 4
.IP "\(bu" 4
Compatibilitizzle wit busybox implementationz of \fItar\fR\|(1).
.IP "\(bu" 4
A fix so dat \fIwrite()\fR n' \fIcreate_archive()\fR
close only filehandlez they theyselves opened.
.IP "\(bu" 4
A bug was fixed regardin tha exit code of extract_archive.
.IP "\(bu" 4
Da \fIptar\fR\|(1) utilitizzle has a freshly smoked up option ta allow safe creation of
tarballs without ghetto-writable filez on Windows, allowin them
archives ta be uploaded ta \s-1CPAN.\s0
.IP "\(bu" 4
A freshly smoked up \fIptargrep\fR\|(1) utilitizzle fo' rockin regular expressions against 
the contentz of filez up in a tar archive.
.IP "\(bu" 4
pax extended headaz is now skipped.
.RE
.RS 4
.RE
.IP "\(bu" 4
Attribute::Handlezs has been upgraded from version 0.87 ta 0.89.
.IP "\(bu" 4
autodie has been upgraded from version 2.06_01 ta 2.1001.
.IP "\(bu" 4
AutoLoader has been upgraded from version 5.70 ta 5.71.
.IP "\(bu" 4
Da B module has been upgraded from version 1.23 ta 1.29.
.Sp
It no longer crashes when takin apart a \f(CW\*(C`y///\*(C'\fR containin characters
outside tha octet range or compiled up in a \f(CW\*(C`use utf8\*(C'\fR scope.
.Sp
Da size of tha shared object has been reduced by bout 40%, wit no
reduction up in functionality.
.IP "\(bu" 4
B::Concise has been upgraded from version 0.78 ta 0.83.
.Sp
B::Concise marks \fIrv2sv()\fR, \fIrv2av()\fR, n' \fIrv2hv()\fR ops wit tha new
\&\f(CW\*(C`OPpDEREF\*(C'\fR flag as \*(L"DREFed\*(R".
.Sp
It no longer produces mangled output wit tha \fB\-tree\fR option
[perl #80632].
.IP "\(bu" 4
B::Debug has been upgraded from version 1.12 ta 1.16.
.IP "\(bu" 4
B::Deparse has been upgraded from version 0.96 ta 1.03.
.Sp
Da deparsin of a \f(CW\*(C`nextstate\*(C'\fR op has chizzled when it has both a
change of package relatizzle ta tha previous nextstate, or a cold-ass lil chizzle of
\&\f(CW\*(C`%^H\*(C'\fR or other state n' a label.  Da label was previously emitted
first yo, but is now emitted last (5.12.1).
.Sp
Da \f(CW\*(C`no 5.13.2\*(C'\fR or similar form is now erectly handled by B::Deparse
(5.12.3).
.Sp
B::Deparse now properly handlez tha code dat applies a cold-ass lil conditional
pattern match against implicit \f(CW$_\fR as dat shiznit was fixed up in [perl #20444].
.Sp
Deparsin of \f(CW\*(C`our\*(C'\fR followed by a variable wit funky characters
(as permitted under tha \f(CW\*(C`use utf8\*(C'\fR pragma) has also been fixed [perl #33752].
.IP "\(bu" 4
B::Lint has been upgraded from version 1.11_01 ta 1.13.
.IP "\(bu" 4
base has been upgraded from version 2.15 ta 2.16.
.IP "\(bu" 4
Benchmark has been upgraded from version 1.11 ta 1.12.
.IP "\(bu" 4
bignum has been upgraded from version 0.23 ta 0.27.
.IP "\(bu" 4
Carp has been upgraded from version 1.15 ta 1.20.
.Sp
Carp now detects incomplete \fIcaller()\fR
overrides n' avoidz rockin bogus \f(CW@DB::args\fR.  To provide backtraces,
Carp relies on particular behaviour of tha \fIcaller()\fR builtin.
Carp now detects if other code has overridden dis wit an
incomplete implementation, n' modifies its backtrace accordingly.
Previously incomplete overrides would cause incorrect joints in
backtraces (best case), or obscure fatal errors (worst case).
.Sp
This fixes certain casez of \*(L"Bizarre copy of \s-1ARRAY\*(R"\s0 caused by modules
overridin \fIcaller()\fR incorrectly (5.12.2).
.Sp
It now also avoidz rockin regular expressions dat cause Perl to
load its Unicode tables, so as ta avoid tha \*(L"\s-1BEGIN\s0 not safe after
errors\*(R" error dat ensue if there has been a syntax error
[perl #82854].
.IP "\(bu" 4
\&\s-1CGI\s0 has been upgraded from version 3.48 ta 3.52.
.Sp
This serves up tha followin securitizzle fixes: tha \s-1MIME\s0 boundary up in 
\&\fImultipart_init()\fR is now random n' tha handlin of 
newlines embedded up in header joints has been improved.
.IP "\(bu" 4
Compress::Raw::Bzip2 has been upgraded from version 2.024 ta 2.033.
.Sp
It has been updated ta use \fIbzip2\fR\|(1) 1.0.6.
.IP "\(bu" 4
Compress::Raw::Zlib has been upgraded from version 2.024 ta 2.033.
.IP "\(bu" 4
constant has been upgraded from version 1.20 ta 1.21.
.Sp
Unicode constants work once mo' n' mo' n' mo'.  They done been fucked up since Perl 5.10.0
[\s-1CPAN RT\s0 #67525].
.IP "\(bu" 4
\&\s-1CPAN\s0 has been upgraded from version 1.94_56 ta 1.9600.
.Sp
Major highlights:
.RS 4
.IP "\(bu" 4
much less configuration dialog hassle
.IP "\(bu" 4
support fo' \fI\s-1META/MYMETA\s0.json\fR
.IP "\(bu" 4
support fo' local::lib
.IP "\(bu" 4
support fo' HTTP::Tiny ta reduce tha dependency on \s-1FTP\s0 cribs
.IP "\(bu" 4
automatic mirror selection
.IP "\(bu" 4
iron up all known bugs up in configure_requires
.IP "\(bu" 4
support fo' distributions compressed wit \fIbzip2\fR\|(1)
.IP "\(bu" 4
allow \fIFoo/Bar.pm\fR on tha command line ta mean \f(CW\*(C`Foo::Bar\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\s-1CPANPLUS\s0 has been upgraded from version 0.90 ta 0.9103.
.Sp
A chizzle ta \fIcpanp-run-perl\fR
resolves \s-1RT\s0 #55964 <http://rt.cpan.org/Public/Bug/Display.html?id=55964>
and \s-1RT\s0 #57106 <http://rt.cpan.org/Public/Bug/Display.html?id=57106>, both
of which related ta failures ta install distributions dat use
\&\f(CW\*(C`Module::Install::DSL\*(C'\fR (5.12.2).
.Sp
A dependency on Config was not recognised as a
core module dependency.  This has been fixed.
.Sp
\&\s-1CPANPLUS\s0 now includes support fo' \fI\s-1META\s0.json\fR n' \fI\s-1MYMETA\s0.json\fR.
.IP "\(bu" 4
CPANPLUS::Dist::Build has been upgraded from version 0.46 ta 0.54.
.IP "\(bu" 4
Data::Dumper has been upgraded from version 2.125 ta 2.130_02.
.Sp
Da indentation used ta be off when \f(CW$Data::Dumper::Terse\fR was set.  This
has been fixed [perl #73604].
.Sp
This upgrade also fixes a cold-ass lil crash when rockin custom sort functions dat might
cause tha stack ta chizzle [perl #74170].
.Sp
Dumpxs no longer crashes wit globs returned by \f(CW*$io_ref\fR
[perl #72332].
.IP "\(bu" 4
DB_File has been upgraded from version 1.820 ta 1.821.
.IP "\(bu" 4
DBM_Filta has been upgraded from version 0.03 ta 0.04.
.IP "\(bu" 4
Devel::DProf has been upgraded from version 20080331.00 ta 20110228.00.
.Sp
Merely loadin Devel::DProf now no longer triggers profilin ta start.
Both \f(CW\*(C`use Devel::DProf\*(C'\fR n' \f(CW\*(C`perl \-d:DProf ...\*(C'\fR behave as before n' start
the profiler.
.Sp
\&\fB\s-1NOTE\s0\fR: Devel::DProf is deprecated n' is ghon be removed from a gangbangin' future
version of Perl.  We straight fuckin recommend dat you install n' use
Devel::NYTProf instead, as it offers hella improved
profilin n' reporting.
.IP "\(bu" 4
Devel::Peek has been upgraded from version 1.04 ta 1.07.
.IP "\(bu" 4
Devel::SelfStubber has been upgraded from version 1.03 ta 1.05.
.IP "\(bu" 4
diagnostics has been upgraded from version 1.19 ta 1.22.
.Sp
It now rendaz pod links slightly better, n' has been taught ta find
descriptions fo' lyrics dat share they descriptions wit other
lyrics.
.IP "\(bu" 4
Digest::MD5 has been upgraded from version 2.39 ta 2.51.
.Sp
It be now safe ta use dis module up in combination wit threads.
.IP "\(bu" 4
Digest::SHA has been upgraded from version 5.47 ta 5.61.
.Sp
\&\f(CW\*(C`shasum\*(C'\fR now mo' closely mimics \fIsha1sum\fR\|(1)/\fImd5sum\fR\|(1).
.Sp
\&\f(CW\*(C`addfile\*(C'\fR accepts all \s-1POSIX\s0 filenames.
.Sp
New \s-1SHA\-512/224\s0 n' \s-1SHA\-512/256\s0 transforms (ref. \s-1NIST\s0 Draft \s-1FIPS 180\-4\s0
[February 2011])
.IP "\(bu" 4
DirHandle has been upgraded from version 1.03 ta 1.04.
.IP "\(bu" 4
Dumpvalue has been upgraded from version 1.13 ta 1.16.
.IP "\(bu" 4
DynaLoader has been upgraded from version 1.10 ta 1.13.
.Sp
It fixes a funky-ass buffer overflow when passed a straight-up long file name.
.Sp
It no longer inherits from AutoLoader; hence it no longer
produces weird error lyrics fo' unsuccessful method calls on classes that
inherit from DynaLoader [perl #84358].
.IP "\(bu" 4
Encode has been upgraded from version 2.39 ta 2.42.
.Sp
Now, all 66 Unicode non-charactas is treated tha same way U+FFFF has
always been treated: up in cases when dat shiznit was disallowed, all 66 are
disallowed, n' up in cases where it warned, all 66 warn.
.IP "\(bu" 4
Env has been upgraded from version 1.01 ta 1.02.
.IP "\(bu" 4
Errno has been upgraded from version 1.11 ta 1.13.
.Sp
Da implementation of Errno has been refactored ta use bout 55% less memory.
.Sp
On some platforms wit unusual header files, like Win32 \fIgcc\fR\|(1) rockin \f(CW\*(C`mingw64\*(C'\fR
headers, some constants dat weren't straight-up error numbers done been exposed
by Errno.  This has been fixed [perl #77416].
.IP "\(bu" 4
Exporta has been upgraded from version 5.64_01 ta 5.64_03.
.Sp
Exporta no longer overrides \f(CW$SIG{_\|_WARN_\|_}\fR [perl #74472]
.IP "\(bu" 4
ExtUtils::CBuilder has been upgraded from version 0.27 ta 0.280203.
.IP "\(bu" 4
ExtUtils::Command has been upgraded from version 1.16 ta 1.17.
.IP "\(bu" 4
ExtUtils::Constant has been upgraded from 0.22 ta 0.23.
.Sp
Da \s-1AUTOLOAD\s0 helper code generated by \f(CW\*(C`ExtUtils::Constant::ProxySubs\*(C'\fR
can now \fIcroak()\fR fo' missin constants, or generate a cold-ass lil complete \f(CW\*(C`AUTOLOAD\*(C'\fR
subroutine up in \s-1XS,\s0 allowin simplification of nuff modulez dat use it
(Fcntl, File::Glob, GDBM_File, I18N::Langinfo, \s-1POSIX\s0,
Socket).
.Sp
ExtUtils::Constant::ProxySubs can now optionally push tha namez of all
constants onto tha packagez \f(CW@EXPORT_OK\fR.
.IP "\(bu" 4
ExtUtils::Install has been upgraded from version 1.55 ta 1.56.
.IP "\(bu" 4
ExtUtils::MakeMaker has been upgraded from version 6.56 ta 6.57_05.
.IP "\(bu" 4
ExtUtils::Manifest has been upgraded from version 1.57 ta 1.58.
.IP "\(bu" 4
ExtUtils::ParseXS has been upgraded from version 2.21 ta 2.2210.
.IP "\(bu" 4
Fcntl has been upgraded from version 1.06 ta 1.11.
.IP "\(bu" 4
File::Basename has been upgraded from version 2.78 ta 2.82.
.IP "\(bu" 4
File::CheckTree has been upgraded from version 4.4 ta 4.41.
.IP "\(bu" 4
File::Copy has been upgraded from version 2.17 ta 2.21.
.IP "\(bu" 4
File::DosGlob has been upgraded from version 1.01 ta 1.04.
.Sp
It allows patterns containin literal parentheses: they no longer need to
be escaped. Y'all KNOW dat shit, muthafucka!  On Windows, it no longer
addz a extra \fI./\fR ta file names
returned when tha pattern be a relatizzle glob wit a thugged-out drive justification,
like \fIC:*.pl\fR [perl #71712].
.IP "\(bu" 4
File::Fetch has been upgraded from version 0.24 ta 0.32.
.Sp
HTTP::Lite is now supported fo' tha \*(L"http\*(R" scheme.
.Sp
Da \fIfetch\fR\|(1) utilitizzle is supported on FreeBSD, NetBSD, and
Dragonfly \s-1BSD\s0 fo' tha \f(CW\*(C`http\*(C'\fR n' \f(CW\*(C`ftp\*(C'\fR schemes.
.IP "\(bu" 4
File::Find has been upgraded from version 1.15 ta 1.19.
.Sp
It improves handlin of backslashes on Windows, so dat paths like
\&\fIC:\edir\e/file\fR is no longer generated [perl #71710].
.IP "\(bu" 4
File::Glob has been upgraded from version 1.07 ta 1.12.
.IP "\(bu" 4
File::Spec has been upgraded from version 3.31 ta 3.33.
.Sp
Several portabilitizzle fixes was made up in File::Spec::VMS: a cold-ass lil colon is now
recognized as a thugged-out delimita up in natizzle filespecs; caret-escaped delimitas are
recognized fo' betta handlin of extended filespecs; \fIcatpath()\fR returns
an empty directory rather than tha current directory if tha input directory
name is empty; n' \fIabs2rel()\fR properly handlez Unix-style input (5.12.2).
.IP "\(bu" 4
File::stat has been upgraded from 1.02 ta 1.05.
.Sp
Da \f(CW\*(C`\-x\*(C'\fR n' \f(CW\*(C`\-X\*(C'\fR file test operators now work erectly when run
by tha superuser.
.IP "\(bu" 4
Filter::Simple has been upgraded from version 0.84 ta 0.86.
.IP "\(bu" 4
GDBM_File has been upgraded from 1.10 ta 1.14.
.Sp
This fixes a memory leak when \s-1DBM\s0 filtas is used.
.IP "\(bu" 4
Hash::Util has been upgraded from 0.07 ta 0.11.
.Sp
Hash::Util no longer emits spurious \*(L"uninitialized\*(R" warnings when
recursively lockin hashes dat have undefined joints [perl #74280].
.IP "\(bu" 4
Hash::Util::FieldHash has been upgraded from version 1.04 ta 1.09.
.IP "\(bu" 4
I18N::Collate has been upgraded from version 1.01 ta 1.02.
.IP "\(bu" 4
I18N::Langinfo has been upgraded from version 0.03 ta 0.08.
.Sp
\&\fIlanginfo()\fR now defaults ta rockin \f(CW$_\fR if there is no argument given, just
as tha documentation has always fronted.
.IP "\(bu" 4
I18N::LangTags has been upgraded from version 0.35 ta 0.35_01.
.IP "\(bu" 4
if has been upgraded from version 0.05 ta 0.0601.
.IP "\(bu" 4
\&\s-1IO\s0 has been upgraded from version 1.25_02 ta 1.25_04.
.Sp
This version of \s-1IO\s0 includes a freshly smoked up IO::Select, which now allows IO::Handle
objects (and objects up in derived classes) ta be removed from a IO::Select set
even if tha underlyin file descriptor is closed or invalid.
.IP "\(bu" 4
IPC::Cmd has been upgraded from version 0.54 ta 0.70.
.Sp
Resolves a issue wit splittin Win32 command lines.  An argument
consistin of tha single characta \*(L"0\*(R" used ta be omitted (\s-1CPAN RT\s0 #62961).
.IP "\(bu" 4
IPC::Open3 has been upgraded from 1.05 ta 1.09.
.Sp
\&\fIopen3()\fR now produces a error if tha \f(CW\*(C`exec\*(C'\fR call fails, allowin this
condizzle ta be distinguished from a cold-ass lil lil pimp process dat exited wit a
non-zero status [perl #72016].
.Sp
Da internal \fIxclose()\fR routine now knows how tha fuck ta handle file descriptors as
documented, so duplicatin \f(CW\*(C`STDIN\*(C'\fR up in a cold-ass lil lil pimp process rockin its file
descriptor now works [perl #76474].
.IP "\(bu" 4
IPC::SysV has been upgraded from version 2.01 ta 2.03.
.IP "\(bu" 4
lib has been upgraded from version 0.62 ta 0.63.
.IP "\(bu" 4
Locale::Maketext has been upgraded from version 1.14 ta 1.19.
.Sp
Locale::Maketext now supports external caches.
.Sp
This upgrade also fixes a infinite loop in
\&\f(CW\*(C`Locale::Maketext::Guts::_compile()\*(C'\fR when
workin wit tainted joints (\s-1CPAN RT\s0 #40727).
.Sp
\&\f(CW\*(C`\->maketext\*(C'\fR calls now back up n' restore \f(CW$@\fR so error
lyrics is not suppressed (\s-1CPAN RT\s0 #34182).
.IP "\(bu" 4
Log::Message has been upgraded from version 0.02 ta 0.04.
.IP "\(bu" 4
Log::Message::Simple has been upgraded from version 0.06 ta 0.08.
.IP "\(bu" 4
Math::BigInt has been upgraded from version 1.89_01 ta 1.994.
.Sp
This fixes, among other thangs, incorrect thangs up in dis biatch when computin binomial
coefficients [perl #77640].
.Sp
It also prevents \f(CW\*(C`sqrt($int)\*(C'\fR from crashin under \f(CW\*(C`use bigrat\*(C'\fR.
[perl #73534].
.IP "\(bu" 4
Math::BigInt::FastCalc has been upgraded from version 0.19 ta 0.28.
.IP "\(bu" 4
Math::BigRat has been upgraded from version 0.24 ta 0.26_02.
.IP "\(bu" 4
Memoize has been upgraded from version 1.01_03 ta 1.02.
.IP "\(bu" 4
MIME::Base64 has been upgraded from 3.08 ta 3.13.
.Sp
Includes freshly smoked up functions ta calculate tha length of encoded n' decoded
base64 strings.
.Sp
Now serves up \fIencode_base64url()\fR n' \fIdecode_base64url()\fR functions ta process
the base64 scheme fo' \*(L"\s-1URL\s0 applications\*(R".
.IP "\(bu" 4
Module::Build has been upgraded from version 0.3603 ta 0.3800.
.Sp
A notable chizzle is tha deprecation of nuff muthafuckin modules.
Module::Build::Version has been deprecated n' Module::Build now
relies on tha version pragma directly.  Module::Build::ModuleInfo has
been deprecated up in favor of a standalone copy called Module::Metadata.
Module::Build::YAML has been deprecated up in favor of CPAN::Meta::YAML.
.Sp
Module::Build now also generates \fI\s-1META\s0.json\fR n' \fI\s-1MYMETA\s0.json\fR files
in accordizzle wit version 2 of tha \s-1CPAN\s0 distribution metadata justification,
CPAN::Meta::Spec.  Da olda format \fI\s-1META\s0.yml\fR n' \fI\s-1MYMETA\s0.yml\fR filez are
still generated.
.IP "\(bu" 4
Module::CoreList has been upgraded from version 2.29 ta 2.47.
.Sp
Besides listin tha updated core modulez of dis release, it also stops listing
the \f(CW\*(C`Filespec\*(C'\fR module.  That module never existed up in core.  Da scripts
generatin Module::CoreList trippin it wit VMS::Filespec, which actually
is a cold-ass lil core module az of Perl 5.8.7.
.IP "\(bu" 4
Module::Load has been upgraded from version 0.16 ta 0.18.
.IP "\(bu" 4
Module::Load::Conditionizzle has been upgraded from version 0.34 ta 0.44.
.IP "\(bu" 4
Da mro pragma has been upgraded from version 1.02 ta 1.07.
.IP "\(bu" 4
NDBM_File has been upgraded from version 1.08 ta 1.12.
.Sp
This fixes a memory leak when \s-1DBM\s0 filtas is used.
.IP "\(bu" 4
Net::Pin has been upgraded from version 2.36 ta 2.38.
.IP "\(bu" 4
\&\s-1NEXT\s0 has been upgraded from version 0.64 ta 0.65.
.IP "\(bu" 4
Object::Accessor has been upgraded from version 0.36 ta 0.38.
.IP "\(bu" 4
ODBM_File has been upgraded from version 1.07 ta 1.10.
.Sp
This fixes a memory leak when \s-1DBM\s0 filtas is used.
.IP "\(bu" 4
Opcode has been upgraded from version 1.15 ta 1.18.
.IP "\(bu" 4
Da overload pragma has been upgraded from 1.10 ta 1.13.
.Sp
\&\f(CW\*(C`overload::Method\*(C'\fR can now handle subroutines dat is theyselves pimped
into overloaded classes [perl #71998].
.Sp
Da documentation has pimped outly improved. Y'all KNOW dat shit, muthafucka!  See \*(L"Documentation\*(R" below.
.IP "\(bu" 4
Params::Peep has been upgraded from version 0.26 ta 0.28.
.IP "\(bu" 4
Da parent pragma has been upgraded from version 0.223 ta 0.225.
.IP "\(bu" 4
Parse::CPAN::Meta has been upgraded from version 1.40 ta 1.4401.
.Sp
Da sickest fuckin Parse::CPAN::Meta can now read \s-1YAML\s0 n' \s-1JSON\s0 filez using
CPAN::Meta::YAML n' \s-1JSON::PP\s0, which is now part of tha Perl core.
.IP "\(bu" 4
PerlIO::encodin has been upgraded from version 0.12 ta 0.14.
.IP "\(bu" 4
PerlIO::scalar has been upgraded from 0.07 ta 0.11.
.Sp
A \fIread()\fR afta a \fIseek()\fR beyond tha end of tha strang no longer be thinkin it
has data ta read [perl #78716].
.IP "\(bu" 4
PerlIO::via has been upgraded from version 0.09 ta 0.11.
.IP "\(bu" 4
Pod::Html has been upgraded from version 1.09 ta 1.11.
.IP "\(bu" 4
Pod::LaTeX has been upgraded from version 0.58 ta 0.59.
.IP "\(bu" 4
Pod::Perldoc has been upgraded from version 3.15_02 ta 3.15_03.
.IP "\(bu" 4
Pod::Simple has been upgraded from version 3.13 ta 3.16.
.IP "\(bu" 4
\&\s-1POSIX\s0 has been upgraded from 1.19 ta 1.24.
.Sp
It now includes constants fo' \s-1POSIX\s0 signal constants.
.IP "\(bu" 4
Da re pragma has been upgraded from version 0.11 ta 0.18.
.Sp
Da \f(CW\*(C`use re \*(Aq/flags\*(Aq\*(C'\fR subpragma is new.
.Sp
Da \fIregmust()\fR function used ta crash when called on a regular expression
belongin ta a pluggable engine.  Now it croaks instead.
.Sp
\&\fIregmust()\fR no longer leaks memory.
.IP "\(bu" 4
Safe has been upgraded from version 2.25 ta 2.29.
.Sp
Coderefs returned by \fIreval()\fR n' \fIrdo()\fR is now wrapped via
\&\fIwrap_code_refs()\fR (5.12.1).
.Sp
This fixes a possible infinite loop when lookin fo' coderefs.
.Sp
It addz nuff muthafuckin \f(CW\*(C`version::vxs::*\*(C'\fR routines ta tha default share.
.IP "\(bu" 4
SDBM_File has been upgraded from version 1.06 ta 1.09.
.IP "\(bu" 4
SelfLoader has been upgraded from 1.17 ta 1.18.
.Sp
It now works up in taint mode [perl #72062].
.IP "\(bu" 4
Da sigtrap pragma has been upgraded from version 1.04 ta 1.05.
.Sp
It no longer tries ta modify read-only arguments when generatin a
backtrace [perl #72340].
.IP "\(bu" 4
Socket has been upgraded from version 1.87 ta 1.94.
.Sp
See \*(L"Improved IPv6 support\*(R" above.
.IP "\(bu" 4
Storable has been upgraded from version 2.22 ta 2.27.
.Sp
Includes performizzle improvement fo' overloaded classes.
.Sp
This addz support fo' serialisin code references dat contain \s-1UTF\-8\s0 strings
correctly.  Da Storable minor version
number chizzled as a result, meanin that
Storable playas whoz ass set \f(CW$Storable::accept_future_minor\fR ta a \f(CW\*(C`FALSE\*(C'\fR value
will peep errors (see \*(L"\s-1FORWARD COMPATIBILITY\*(R"\s0 up in Storable fo' mo' details).
.Sp
Freezin no longer gets trippin if tha Perl stack gets reallocated
durin freezin [perl #80074].
.IP "\(bu" 4
Sys::Hostname has been upgraded from version 1.11 ta 1.16.
.IP "\(bu" 4
Term::ANSIColor has been upgraded from version 2.02 ta 3.00.
.IP "\(bu" 4
Term::UI has been upgraded from version 0.20 ta 0.26.
.IP "\(bu" 4
Test::Harnizz has been upgraded from version 3.17 ta 3.23.
.IP "\(bu" 4
Test::Simple has been upgraded from version 0.94 ta 0.98.
.Sp
Among nuff other thangs, subtests without a \f(CW\*(C`plan\*(C'\fR or \f(CW\*(C`no_plan\*(C'\fR now have an
implicit \fIdone_testing()\fR added ta em.
.IP "\(bu" 4
Thread::Semaphore has been upgraded from version 2.09 ta 2.12.
.Sp
It serves up two freshly smoked up methodz dat give mo' control over tha decrementin of
semaphores: \f(CW\*(C`down_nb\*(C'\fR n' \f(CW\*(C`down_force\*(C'\fR.
.IP "\(bu" 4
Thread::Queue has been upgraded from version 2.11 ta 2.12.
.IP "\(bu" 4
Da threadz pragma has been upgraded from version 1.75 ta 1.83.
.IP "\(bu" 4
Da threads::shared pragma has been upgraded from version 1.32 ta 1.37.
.IP "\(bu" 4
Tie::Hash has been upgraded from version 1.03 ta 1.04.
.Sp
Callin \f(CW\*(C`Tie::Hash\->TIEHASH()\*(C'\fR used ta loop forever n' shit.  Now it \f(CW\*(C`croak\*(C'\fRs.
.IP "\(bu" 4
Tie::Hash::NamedCapture has been upgraded from version 0.06 ta 0.08.
.IP "\(bu" 4
Tie::RefHash has been upgraded from version 1.38 ta 1.39.
.IP "\(bu" 4
Time::HiRes has been upgraded from version 1.9719 ta 1.9721_01.
.IP "\(bu" 4
Time::Local has been upgraded from version 1.1901_01 ta 1.2000.
.IP "\(bu" 4
Time::Piece has been upgraded from version 1.15_01 ta 1.20_01.
.IP "\(bu" 4
Unicode::Collate has been upgraded from version 0.52_01 ta 0.73.
.Sp
Unicode::Collate has been updated ta use Unicode 6.0.0.
.Sp
Unicode::Collate::Locale now supports a plethora of freshly smoked up locales: \fIar, be,
bg, de_\|_phonebook, hu, hy, kk, mk, nso, om, tn, vi, hr, ig, ja, ko, ru, sq, 
se, sr, to, uk, zh, zh_\|_big5han, zh_\|_gb2312han, zh_\|_pinyin\fR, n' \fIzh_\|_stroke\fR.
.Sp
Da followin modulez done been added:
.Sp
Unicode::Collate::CJK::Big5 fo' \f(CW\*(C`zh_\|_big5han\*(C'\fR which make 
tailorin of \s-1CJK\s0 Unified Ideographs up in tha order of \s-1CLDR\s0z big5han ordering.
.Sp
Unicode::Collate::CJK::GB2312 fo' \f(CW\*(C`zh_\|_gb2312han\*(C'\fR which makes
tailorin of \s-1CJK\s0 Unified Ideographs up in tha order of \s-1CLDR\s0z gb2312han ordering.
.Sp
Unicode::Collate::CJK::JISX0208 which make tailorin of 6355 kanji 
(\s-1CJK\s0 Unified Ideographs) up in tha \s-1JIS X 0208\s0 order.
.Sp
Unicode::Collate::CJK::Korean which make tailorin of \s-1CJK\s0 Unified Ideographs 
in tha order of \s-1CLDR\s0z Korean ordering.
.Sp
Unicode::Collate::CJK::Pinyin fo' \f(CW\*(C`zh_\|_pinyin\*(C'\fR which makes
tailorin of \s-1CJK\s0 Unified Ideographs up in tha order of \s-1CLDR\s0z pinyin ordering.
.Sp
Unicode::Collate::CJK::Stroke fo' \f(CW\*(C`zh_\|_stroke\*(C'\fR which makes
tailorin of \s-1CJK\s0 Unified Ideographs up in tha order of \s-1CLDR\s0z stroke ordering.
.Sp
This also sees tha switch from rockin tha pure-Perl version of this
module ta tha \s-1XS\s0 version.
.IP "\(bu" 4
Unicode::Normalize has been upgraded from version 1.03 ta 1.10.
.IP "\(bu" 4
Unicode::UCD has been upgraded from version 0.27 ta 0.32.
.Sp
A freshly smoked up function, \fIUnicode::UCD::num()\fR, has been added. Y'all KNOW dat shit, muthafucka!  This function
returns tha numeric value of tha strang passed it or \f(CW\*(C`undef\*(C'\fR if tha string
in its entirety has no \*(L"safe\*(R" numeric value.  (For mo' detail, n' fo' the
definizzle of \*(L"safe\*(R", peep \*(L"\fInum()\fR\*(R" up in Unicode::UCD.)
.Sp
This upgrade also includes nuff muthafuckin bug fixes:
.RS 4
.IP "\fIcharinfo()\fR" 4
.IX Item "charinfo()"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
It be now updated ta Unicode Version 6.0.0 wit \fICorrigendum #8\fR, 
exceptin that, just as wit Perl 5.14, tha code point at U+1F514 has no name.
.IP "\(bu" 4
Hangul syllable code points have tha erect names, n' their
decompositions is always output without requirin Lingua::KO::Hangul::Util
to be installed.
.IP "\(bu" 4
\&\s-1CJK \s0(Chinese-Japanese-Korean) code points U+2A700 ta U+2B734
and U+2B740 ta U+2B81D is now properly handled.
.IP "\(bu" 4
Numeric joints is now output fo' dem \s-1CJK\s0 code points dat have em.
.IP "\(bu" 4
Names output fo' code points wit multiple aliases is now the
corrected ones.
.RE
.RS 4
.RE
.IP "\fIcharscript()\fR" 4
.IX Item "charscript()"
This now erectly returns \*(L"Unknown\*(R" instead of \f(CW\*(C`undef\*(C'\fR fo' tha script
of a cold-ass lil code point dat aint been assigned another one.
.IP "\fIcharblock()\fR" 4
.IX Item "charblock()"
This now erectly returns \*(L"No_Block\*(R" instead of \f(CW\*(C`undef\*(C'\fR fo' tha block
of a cold-ass lil code point dat aint been assigned ta another one.
.RE
.RS 4
.RE
.IP "\(bu" 4
Da version pragma has been upgraded from 0.82 ta 0.88.
.Sp
Because of a funky-ass bug, now fixed, tha \fIis_strict()\fR n' \fIis_lax()\fR functions did not
work when exported (5.12.1).
.IP "\(bu" 4
Da warnings pragma has been upgraded from version 1.09 ta 1.12.
.Sp
Callin \f(CW\*(C`use warnings\*(C'\fR without arguments is now hella mo' efficient.
.IP "\(bu" 4
Da warnings::regista pragma has been upgraded from version 1.01 ta 1.02.
.Sp
It be now possible ta regista warnin categories other than tha names of
packages rockin warnings::regista n' shit.  See \fIperllexwarn\fR\|(1) fo' mo' shiznit.
.IP "\(bu" 4
XSLoader has been upgraded from version 0.10 ta 0.13.
.IP "\(bu" 4
VMS::DCLsym has been upgraded from version 1.03 ta 1.05.
.Sp
Two bugs done been fixed [perl #84086]:
.Sp
Da symbol table name was lost when tyin a hash, cuz of a thinko in
\&\f(CW\*(C`TIEHASH\*(C'\fR.  Da result was dat all tied hashes interacted wit the
local symbol table.
.Sp
Unless a symbol table name had been explicitly specified up in tha call
to tha constructor, queryin tha special key \f(CW\*(C`:LOCAL\*(C'\fR failed to
identify objects connected ta tha local symbol table.
.IP "\(bu" 4
Da Win32 module has been upgraded from version 0.39 ta 0.44.
.Sp
This release has nuff muthafuckin freshly smoked up functions: \fIWin32::GetSystemMetrics()\fR,
\&\fIWin32::GetProductInfo()\fR, \fIWin32::GetOSDisplayName()\fR.
.Sp
Da names returned by \fIWin32::GetOSName()\fR n' \fIWin32::GetOSDisplayName()\fR
have been erected.
.IP "\(bu" 4
XS::Typemap has been upgraded from version 0.03 ta 0.05.
.SS "Removed Modulez n' Pragmata"
.IX Subsection "Removed Modulez n' Pragmata"
As promised up in Perl 5.12.0z release notes, tha followin modulez have
been removed from tha core distribution, n' if needed should be installed
from \s-1CPAN\s0 instead.
.IP "\(bu" 4
Class::ISA has been removed from tha Perl core.  Prior version was 0.36.
.IP "\(bu" 4
Pod::Plainer has been removed from tha Perl core.  Prior version was 1.02.
.IP "\(bu" 4
Switch has been removed from tha Perl core.  Prior version was 2.16.
.PP
Da removal of Shell has been deferred until afta 5.14, as the
implementation of Shell shipped wit 5.12.0 did not erectly issue the
warnin dat dat shiznit was ta be removed from core.
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
\fIperlgpl\fR
.IX Subsection "perlgpl"
.PP
perlgpl has been updated ta contain \s-1GPL\s0 version 1, as is included up in the
\&\fI\s-1README\s0\fR distributed wit Perl (5.12.1).
.PP
\fIPerl 5.12.x delta files\fR
.IX Subsection "Perl 5.12.x delta files"
.PP
Da perldelta filez fo' Perl 5.12.1 ta 5.12.3 done been added from the
maintenizzle branch: perl5121delta, perl5122delta, perl5123delta.
.PP
\fIperlpodstyle\fR
.IX Subsection "perlpodstyle"
.PP
New steez guide fo' \s-1POD\s0 documentation,
split mostly from tha \s-1NOTES\s0 section of tha \fIpod2man\fR\|(1) manpage.
.PP
\fIperlsource, perlinterp, perlhacktut, n' perlhacktips\fR
.IX Subsection "perlsource, perlinterp, perlhacktut, n' perlhacktips"
.PP
See \*(L"perlhack n' perlrepository revamp\*(R", below.
.SS "Changes ta Existin Documentation"
.IX Subsection "Changes ta Existin Documentation"
\fIperlmodlib is now complete\fR
.IX Subsection "perlmodlib is now complete"
.PP
Da perlmodlib manpage dat came wit Perl 5.12.0 was missin several
modulez cuz of a funky-ass bug up in tha script dat generates tha list.  This has been
fixed [perl #74332] (5.12.1).
.PP
\fIReplace incorrect tr/// table up in perlebcdic\fR
.IX Subsection "Replace incorrect tr/// table up in perlebcdic"
.PP
perlebcdic gotz nuff a helpful table ta use up in \f(CW\*(C`tr///\*(C'\fR ta convert
between \s-1EBCDIC\s0 n' Latin1/ASCII.  Da table was tha inverse of tha one
it raps about, though tha code dat used tha table hit dat shiznit erectly for
the specific example given.
.PP
Da table has been erected n' tha sample code chizzled ta correspond.
.PP
Da table has also been chizzled ta hex from octal, n' tha recipes up in the
pod done been altered ta print up leadin zeros ta make all joints
the same length.
.PP
\fITricks fo' user-defined casing\fR
.IX Subsection "Tricks fo' user-defined casing"
.PP
perlunicode now gotz nuff a explanation of how tha fuck ta override, mangle
and otherwise tweak tha way Perl handlez upper\-, lower\- n' other-case
conversions on Unicode data, n' how tha fuck ta provide scoped chizzlez ta alter
onez own codez behaviour without stompin on anybody else's.
.PP
\fI\s-1INSTALL\s0 explicitly states dat Perl requires a C89 compiler\fR
.IX Subsection "INSTALL explicitly states dat Perl requires a C89 compiler"
.PP
This was already true yo, but itz now Officially Stated For Da Record
(5.12.2).
.PP
\fIExplanation of \f(CI\*(C`\ex\f(CIHH\f(CI\*(C'\fI n' \f(CI\*(C`\eo\f(CIOOO\f(CI\*(C'\fI escapes\fR
.IX Subsection "Explanation of xHH n' oOOO escapes"
.PP
perlop has been updated wit mo' detailed explanation of these two
characta escapes.
.PP
\fI\f(BI\-0\f(BI\s-1NNN\s0\f(BI\fI switch\fR
.IX Subsection "-0NNN switch"
.PP
In perlrun, tha behaviour of tha \fB\-0NNN\fR switch fo' \fB\-0400\fR or higher
has been clarified (5.12.2).
.PP
\fIMaintenizzle policy\fR
.IX Subsection "Maintenizzle policy"
.PP
perlpolicy now gotz nuff tha policy on what tha fuck patches is aaight for
maintenizzle branches (5.12.1).
.PP
\fIDeprecation policy\fR
.IX Subsection "Deprecation policy"
.PP
perlpolicy now gotz nuff tha policy on compatibilitizzle n' deprecation
along wit definitionz of terms like \*(L"deprecation\*(R" (5.12.2).
.PP
\fINew descriptions up in perldiag\fR
.IX Subsection "New descriptions up in perldiag"
.PP
Da followin existin diagnostics is now documented:
.IP "\(bu" 4
Ambiguous use of \f(CW%c\fR resolved as operator \f(CW%c\fR
.IP "\(bu" 4
Ambiguous use of \f(CW%c\fR{%s} resolved ta \f(CW%c\fR%s
.IP "\(bu" 4
Ambiguous use of \f(CW%c\fR{%s[...]} resolved ta \f(CW%c\fR%s[...]
.IP "\(bu" 4
Ambiguous use of \f(CW%c\fR{%s{...}} resolved ta \f(CW%c\fR%s{...}
.IP "\(bu" 4
Ambiguous use of \-%s resolved as \-&%s()
.IP "\(bu" 4
Invalid strict version format (%s)
.IP "\(bu" 4
Invalid version format (%s)
.IP "\(bu" 4
Invalid version object
.PP
\fIperlbook\fR
.IX Subsection "perlbook"
.PP
perlbook has been expanded ta cover nuff mo' ghettofab books.
.PP
\fI\f(CI\*(C`SvTRUE\*(C'\fI macro\fR
.IX Subsection "SvTRUE macro"
.PP
Da documentation fo' tha \f(CW\*(C`SvTRUE\*(C'\fR macro in
perlapi was simply wack up in statin that
get-magic aint processed. Y'all KNOW dat shit, muthafucka!  It has been erected.
.PP
\fIop manipulation functions\fR
.IX Subsection "op manipulation functions"
.PP
Several \s-1API\s0 functions dat process optrees done been newly documented.
.PP
\fIperlvar revamp\fR
.IX Subsection "perlvar revamp"
.PP
perlvar reordaz tha variablez n' crews dem by topic.  Each variable
introduced afta Perl 5.000 notes tha straight-up original gangsta version up in which it is 
available.  perlvar also has a freshly smoked up section fo' deprecated variablez to
note when they was removed.
.PP
\fIArray n' hash slices up in scalar context\fR
.IX Subsection "Array n' hash slices up in scalar context"
.PP
These is now documented up in perldata.
.PP
\fI\f(CI\*(C`use locale\*(C'\fI n' formats\fR
.IX Subsection "use locale n' formats"
.PP
perlform n' perllocale done been erected ta state that
\&\f(CW\*(C`use locale\*(C'\fR affects formats.
.PP
\fIoverload\fR
.IX Subsection "overload"
.PP
overloadz documentation has practically undergone a rewrite.  It
is now much mo' straightforward n' clear.
.PP
\fIperlhack n' perlrepository revamp\fR
.IX Subsection "perlhack n' perlrepository revamp"
.PP
Da perlhack document is now much shorter, n' focuses on tha Perl 5
development process n' submittin patches ta Perl.  Da technical content
has been moved ta nuff muthafuckin freshly smoked up documents, perlsource, perlinterp,
perlhacktut, n' perlhacktips.  This technical content has 
been only lightly edited.
.PP
Da perlrepository document has been renamed ta perlgit.  This new
document is just a how-to on rockin git wit tha Perl source code.
Any other content dat used ta be up in perlrepository has been moved
to perlhack.
.PP
\fITime::Piece examples\fR
.IX Subsection "Time::Piece examples"
.PP
Examplez up in perlfaq4 done been updated ta show tha use of
Time::Piece.
.SH "Diagnostics"
.IX Header "Diagnostics"
Da followin additions or chizzlez done been made ta diagnostic output,
includin warnings n' fatal error lyrics.  For tha complete list of
diagnostic lyrics, peep perldiag.
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
\fINew Errors\fR
.IX Subsection "New Errors"
.IP "Closure prototype called" 4
.IX Item "Closure prototype called"
This error occurs when a subroutine reference passed ta a attribute
handlez is called, if tha subroutine be a cold-ass lil closure [perl #68560].
.ie n .IP "Insecure user-defined property %s" 4
.el .IP "Insecure user-defined property \f(CW%s\fR" 4
.IX Item "Insecure user-defined property %s"
Perl detected tainted data when tryin ta compile a regular
expression dat gotz nuff a cold-ass lil call ta a user-defined characta property
function, meanin \f(CW\*(C`\ep{IsFoo}\*(C'\fR or \f(CW\*(C`\ep{InFoo}\*(C'\fR.
See \*(L"User-Defined Characta Properties\*(R" up in perlunicode n' perlsec.
.IP "panic: gp_free failed ta free glob pointa \- suttin' is repeatedly re-bustin entries" 4
.IX Item "panic: gp_free failed ta free glob pointa - suttin' is repeatedly re-bustin entries"
This freshly smoked up error is triggered if a thugged-out destructor called on a object up in a
typeglob dat is bein freed creates a freshly smoked up typeglob entry containin an
object wit a thugged-out destructor dat creates a freshly smoked up entry containin a object etc.
.IP "Parsin code internal error (%s)" 4
.IX Item "Parsin code internal error (%s)"
This freshly smoked up fatal error is produced when parsing
code supplied by a extension violates the
parserz \s-1API\s0 up in a thugged-out detectable way.
.ie n .IP "refcnt: fd %d%s" 4
.el .IP "refcnt: fd \f(CW%d\fR%s" 4
.IX Item "refcnt: fd %d%s"
This freshly smoked up error only occurs if a internal consistency check fails when a
pipe be bout ta be closed.
.ie n .IP "Regexp modifier ""/%c"" may not step tha fuck up twice" 4
.el .IP "Regexp modifier ``/%c'' may not step tha fuck up twice" 4
.IX Item "Regexp modifier /%c may not step tha fuck up twice"
Da regular expression pattern has one of the
mutually exclusive modifiers repeated.
.ie n .IP "Regexp modifiers ""/%c"" n' ""/%c"" is mutually exclusive" 4
.el .IP "Regexp modifiers ``/%c'' n' ``/%c'' is mutually exclusive" 4
.IX Item "Regexp modifiers /%c n' /%c is mutually exclusive"
Da regular expression pattern has mo' than one of tha mutually
exclusive modifiers.
.ie n .IP "Usin !~ wit %s don't make sense" 4
.el .IP "Usin !~ wit \f(CW%s\fR don't make sense" 4
.IX Item "Usin !~ wit %s don't make sense"
This error occurs when \f(CW\*(C`!~\*(C'\fR is used wit \f(CW\*(C`s///r\*(C'\fR or \f(CW\*(C`y///r\*(C'\fR.
.PP
\fINew Warnings\fR
.IX Subsection "New Warnings"
.ie n .IP """\eb{"" is deprecated; use ""\eb\e{"" instead" 4
.el .IP "``\eb{'' is deprecated; use ``\eb\e{'' instead" 4
.IX Item "b{ is deprecated; use b{ instead"
.PD 0
.ie n .IP """\eB{"" is deprecated; use ""\eB\e{"" instead" 4
.el .IP "``\eB{'' is deprecated; use ``\eB\e{'' instead" 4
.IX Item "B{ is deprecated; use B{ instead"
.PD
Use of a unescaped \*(L"{\*(R" immediately followin a \f(CW\*(C`\eb\*(C'\fR or \f(CW\*(C`\eB\*(C'\fR is now
deprecated up in order ta reserve its use fo' Perl itself up in a gangbangin' future release.
.ie n .IP "Operation ""%s"" returns its argument fo' ..." 4
.el .IP "Operation ``%s'' returns its argument fo' ..." 4
.IX Item "Operation %s returns its argument fo' ..."
Performin a operation requirin Unicode semantics (like fuckin case-folding)
on a Unicode surrogate or a non-Unicode characta now triggers this
warning.
.IP "Use of qw(...) as parentheses is deprecated" 4
.IX Item "Use of qw(...) as parentheses is deprecated"
See \*(L"Use of qw(...) as parentheses\*(R", above, fo' details.
.SS "Changes ta Existin Diagnostics"
.IX Subsection "Changes ta Existin Diagnostics"
.IP "\(bu" 4
Da \*(L"Variable \f(CW$foo\fR aint imported\*(R" warnin dat precedes a
\&\f(CW\*(C`strict \*(Aqvars\*(Aq\*(C'\fR error has now been assigned tha \*(L"misc\*(R" category, so that
\&\f(CW\*(C`no warnings\*(C'\fR will suppress it [perl #73712].
.IP "\(bu" 4
\&\fIwarn()\fR n' \fIdie()\fR now produce \*(L"Wide character\*(R" warnings when fed a
characta outside tha byte range if \f(CW\*(C`STDERR\*(C'\fR be a funky-ass byte-sized handle.
.IP "\(bu" 4
Da \*(L"Layer do not match dis perl\*(R" error message has been replaced with
these mo' helpful lyrics [perl #73754]:
.RS 4
.IP "\(bu" 4
PerlIO layer function table size (%d) do not match size expected by this
perl (%d)
.IP "\(bu" 4
PerlIO layer instizzle size (%d) do not match size expected by dis perl
(%d)
.RE
.RS 4
.RE
.IP "\(bu" 4
Da \*(L"Found = up in conditional\*(R" warnin dat is emitted when a cold-ass lil constant is
assigned ta a variable up in a cold-ass lil condizzle is now withheld if tha constant is
actually a subroutine or one generated by \f(CW\*(C`use constant\*(C'\fR, since tha value
of tha constant may not be known all up in tha time tha program is written
[perl #77762].
.IP "\(bu" 4
Previously, if none of tha \fIgethostbyaddr()\fR, \fIgethostbyname()\fR and
\&\fIgethostent()\fR functions was implemented on a given platform, they would
all take a thugged-out dirtnap wit tha message \*(L"Unsupported socket function 'gethostent' called\*(R",
with analogous lyrics fo' getnet*() n' getserv*().  This has been
corrected.
.IP "\(bu" 4
Da warnin message bout unrecognized regular expression escapes passed
all up in has been chizzled ta include any literal \*(L"{\*(R" followin the
two-characta escape.  For example, \*(L"\eq{\*(R" is now emitted instead of \*(L"\eq\*(R".
.SH "Utilitizzle Chizzles"
.IX Header "Utilitizzle Chizzles"
\fI\fIperlbug\fI\|(1)\fR
.IX Subsection "perlbug"
.IP "\(bu" 4
perlbug now looks up in tha \s-1EMAIL\s0 environment variable fo' a return address
if tha REPLY-TO n' \s-1REPLYTO\s0 variablez is empty.
.IP "\(bu" 4
perlbug did not previously generate a \*(L"From:\*(R" header, potentially
resultin up in dropped mail; it now includes dat header.
.IP "\(bu" 4
Da userz address is now used as tha Return-Path.
.Sp
Many systems these minutes aint gots a valid Internizzle domain name, and
perlbug@perl.org do not accept email wit a return-path dat do
not resolve.  So tha userz address is now passed ta sendmail so it's
less likely ta git stuck up in a mail queue somewhere [perl #82996].
.IP "\(bu" 4
perlbug now always gives tha reporta a cold-ass lil chizzle ta chizzle tha email
address it guesses fo' dem (5.12.2).
.IP "\(bu" 4
perlbug should no longer warn bout uninitialized joints when rockin tha \fB\-d\fR
and \fB\-v\fR options (5.12.2).
.PP
\fIperl5db.pl\fR
.IX Subsection "perl5db.pl"
.IP "\(bu" 4
Da remote terminal works afta forkin n' spawns freshly smoked up sessions, one
per forked process.
.PP
\fIptargrep\fR
.IX Subsection "ptargrep"
.IP "\(bu" 4
ptargrep be a freshly smoked up utilitizzle ta apply pattern matchin ta tha contents of
filez  up in a tar archive.  It comes wit \f(CW\*(C`Archive::Tar\*(C'\fR.
.SH "Configuration n' Compilation"
.IX Header "Configuration n' Compilation"
See also \*(L"Namin fixes up in Policy_sh.SH may invalidate Policy.sh\*(R",
above.
.IP "\(bu" 4
\&\s-1CCINCDIR\s0 n' \s-1CCLIBDIR\s0 fo' tha mingw64 cross-compila is now erectly
under \fI$(\s-1CCHOME\s0)\emingw\einclude\fR n' \fI\elib\fR rather than immediately below
\&\fI$(\s-1CCHOME\s0)\fR.
.Sp
This means tha \*(L"incpath\*(R", \*(L"libpth\*(R", \*(L"ldflags\*(R", \*(L"lddlflags\*(R" and
\&\*(L"ldflags_nolargefiles\*(R" joints up in \fIConfig.pm\fR n' \fIConfig_heavy.pl\fR is now
set erectly.
.IP "\(bu" 4
\&\f(CW\*(C`make test.valgrind\*(C'\fR has been adjusted ta account fo' \fIcpan/dist/ext\fR
separation.
.IP "\(bu" 4
On compilaz dat support it, \fB\-Wwrite\-strings\fR is now added ta cflags by
default.
.IP "\(bu" 4
Da Encode module can now (once again) be included up in a static Perl
build. Y'all KNOW dat shit, muthafucka!  Da special-case handlin fo' dis thang gots fucked up in Perl
5.11.0, n' has now been repaired.
.IP "\(bu" 4
Da previous default size of a PerlIO buffer (4096 bytes) has been increased
to tha larger of 8192 bytes n' yo' local \s-1BUFSIZ. \s0 Benchmarks show dat doubling
this decade-old default increases read n' write performizzle by around
25% ta 50% when rockin tha default layerz of perlio on top of unix.  To chizzle
a non-default size, like fuckin ta git back tha oldschool value or ta obtain a even
larger value, configure with:
.Sp
.Vb 1
\&     ./Configure \-Accflags=\-DPERLIOBUF_DEFAULT_BUFSIZ=N
.Ve
.Sp
where N is tha desired size up in bytes; it should probably be a multiple of
your page size.
.IP "\(bu" 4
An \*(L"incompatible operand types\*(R" error up in ternary expressions when building
with \f(CW\*(C`clang\*(C'\fR has been fixed (5.12.2).
.IP "\(bu" 4
Perl now skips setuid File::Copy tests on partitions it detects mounted
as \f(CW\*(C`nosuid\*(C'\fR (5.12.2).
.SH "Platform Support"
.IX Header "Platform Support"
.SS "New Platforms"
.IX Subsection "New Platforms"
.IP "\s-1AIX\s0" 4
.IX Item "AIX"
Perl now buildz on \s-1AIX 4.2 \s0(5.12.1).
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
.IP "Apollo DomainOS" 4
.IX Item "Apollo DomainOS"
Da last vestigez of support fo' dis platform done been excised from
the Perl distribution. I aint talkin' bout chicken n' gravy biatch.  Dat shiznit was officially discontinued up in version 5.12.0.
It had not hit dat shiznit fo' muthafuckin years before dis shit.
.IP "MacOS Classic" 4
.IX Item "MacOS Classic"
Da last vestigez of support fo' dis platform done been excised from the
Perl distribution. I aint talkin' bout chicken n' gravy biatch.  Dat shiznit was officially discontinued up in a earlier version.
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
\fI\s-1AIX\s0\fR
.IX Subsection "AIX"
.IP "\(bu" 4
\&\fI\s-1README\s0.aix\fR has been updated wit shiznit bout tha \s-1XL C/\*(C+ V11\s0 compiler
suite (5.12.2).
.PP
\fI\s-1ARM\s0\fR
.IX Subsection "ARM"
.IP "\(bu" 4
Da \f(CW\*(C`d_u32align\*(C'\fR configuration probe on \s-1ARM\s0 has been fixed (5.12.2).
.PP
\fICygwin\fR
.IX Subsection "Cygwin"
.IP "\(bu" 4
MakeMaker has been updated ta build manpages on cygwin.
.IP "\(bu" 4
Improved rebase behaviour
.Sp
If a \s-1DLL\s0 is updated on cygwin tha oldschool imagebase address is reused.
This solves most rebase errors, especially when uppimpin on core \s-1DLL\s0's.
See <http://www.tishler.net/jason/software/rebase/rebase\-2.4.2.README> 
for mo' shiznit.
.IP "\(bu" 4
Support fo' tha standard cygwin dll prefix (needed fo' FFIs)
.IP "\(bu" 4
Updated build hints file
.PP
\fIFreeBSD 7\fR
.IX Subsection "FreeBSD 7"
.IP "\(bu" 4
FreeBSD 7 no longer gotz nuff \fI/usr/bin/objformat\fR.  At build time,
Perl now skips tha \fIobjformat\fR check fo' versions 7 n' higher and
assumes \s-1ELF \s0(5.12.1).
.PP
\fIHP-UX\fR
.IX Subsection "HP-UX"
.IP "\(bu" 4
Perl now allows \fB\-Duse64bitint\fR without biggin' up ta \f(CW\*(C`use64bitall\*(C'\fR on HP-UX
(5.12.1).
.PP
\fI\s-1IRIX\s0\fR
.IX Subsection "IRIX"
.IP "\(bu" 4
Conversion of strings ta floating-point numbers is now mo' accurate on
\&\s-1IRIX\s0 systems [perl #32380].
.PP
\fIMac \s-1OS X\s0\fR
.IX Subsection "Mac OS X"
.IP "\(bu" 4
Early versionz of Mac \s-1OS X \s0(Darwin) had buggy implementationz of the
\&\fIsetregid()\fR, \fIsetreuid()\fR, setrgid(,) n' \fIsetruid()\fR functions, so Perl
would pretend they did not exist.
.Sp
These functions is now recognised on Mac \s-1OS 10.5 \s0(Leopard; Darwin 9) and
higher, as they done been fixed [perl #72990].
.PP
\fIMirBSD\fR
.IX Subsection "MirBSD"
.IP "\(bu" 4
Previously if you built Perl wit a gangbangin' finger-lickin' dirty-ass shared \fIlibperl.so\fR on MirBSD (the
default config), it would work up ta tha installation; however, once
installed, it would be unable ta find \fIlibperl\fR.  Path handlin is now
treated as up in tha other \s-1BSD\s0 dialects.
.PP
\fINetBSD\fR
.IX Subsection "NetBSD"
.IP "\(bu" 4
Da NetBSD hints file has been chizzled ta make tha system malloc the
default.
.PP
\fIOpenBSD\fR
.IX Subsection "OpenBSD"
.IP "\(bu" 4
OpenBSD > 3.7 has a freshly smoked up malloc implementation which is \fImmap\fR\-based,
and as such can release memory back ta tha \s-1OS\s0; however, Perlz use of
this malloc causes a substantial slowdown, so we now default ta using
Perlz malloc instead [perl #75742].
.PP
\fIOpenVOS\fR
.IX Subsection "OpenVOS"
.IP "\(bu" 4
Perl now buildz again n' again n' again wit OpenVOS (formerly known as Stratus \s-1VOS\s0)
[perl #78132] (5.12.3).
.PP
\fISolaris\fR
.IX Subsection "Solaris"
.IP "\(bu" 4
DTrace is now supported on Solaris.  There used ta be build failures yo, but
these done been fixed [perl #73630] (5.12.3).
.PP
\fI\s-1VMS\s0\fR
.IX Subsection "VMS"
.IP "\(bu" 4
Extension buildin on olda (pre 7.3\-2) \s-1VMS\s0 systems was fucked up cuz
configure.com hit tha \s-1DCL\s0 symbol length limit of 1K.  We now work within
this limit when assemblin tha list of extensions up in tha core build (5.12.1).
.IP "\(bu" 4
We fixed configurin n' buildin Perl wit \fB\-Uuseperlio\fR (5.12.1).
.IP "\(bu" 4
\&\f(CW\*(C`PerlIOUnix_open\*(C'\fR now honours tha default permissions on \s-1VMS.\s0
.Sp
When \f(CW\*(C`perlio\*(C'\fR became tha default n' \f(CW\*(C`unix\*(C'\fR became tha default bottom layer,
da most thugged-out common path fo' bustin filez from Perl became \f(CW\*(C`PerlIOUnix_open\*(C'\fR,
which has always explicitly used \f(CW0666\fR as tha permission mask.  This prevents
inheritin permissions from \s-1RMS\s0 defaults n' ACLs, so ta avoid dat problem,
we now pass \f(CW0777\fR ta \fIopen()\fR.  In tha \s-1VMS CRTL, \s0\f(CW0777\fR has a special
meanin over n' above intersectin wit tha current umask; specifically, it
allows Unix syscalls ta preserve natizzle default permissions (5.12.3).
.IP "\(bu" 4
Da shortenin of symbols longer than 31 charactas up in tha core C sources
and up in extensions is now by default done by tha C compila rather than by
xsubpp (which could only do so fo' generated symbols up in \s-1XS\s0 code).  Yo ass can
reenable xsubppz symbol shortenin by configurin wit \-Uuseshortenedsymbols,
but you gonna have some work ta do ta git tha core sources ta compile.
.IP "\(bu" 4
Record-oriented filez (record format variable or variable wit fixed control)
opened fo' write by tha \f(CW\*(C`perlio\*(C'\fR layer will now be line-buffered ta prevent the
introduction of spurious line breaks whenever tha perlio buffer fills up.
.IP "\(bu" 4
\&\fIgit_version.h\fR is now installed on \s-1VMS. \s0 This was a oversight up in v5.12.0 which
caused some extensions ta fail ta build (5.12.2).
.IP "\(bu" 4
Several memory leaks up in \fIstat()\fR done been fixed (5.12.2).
.IP "\(bu" 4
A memory leak up in \fIPerl_rename()\fR cuz of a thugged-out double allocation has been
fixed (5.12.2).
.IP "\(bu" 4
A memory leak up in \fIvms_fid_to_name()\fR (used by \fIrealpath()\fR and
\&\fIrealname()\fR> has been fixed (5.12.2).
.PP
\fIWindows\fR
.IX Subsection "Windows"
.PP
See also \*(L"\fIfork()\fR emulation aint gonna wait fo' signalled children\*(R" and
\&\*(L"Perl source code is read up in text mode on Windows\*(R", above.
.IP "\(bu" 4
Fixed build process fo' \s-1SDK2003SP1\s0 compilers.
.IP "\(bu" 4
Compilation wit Visual Studio 2010 is now supported.
.IP "\(bu" 4
When rockin oldschool 32\-bit compilers, tha define \f(CW\*(C`_USE_32BIT_TIME_T\*(C'\fR is now
set up in \f(CW$Config{ccflags}\fR.  This improves portabilitizzle when compiling
\&\s-1XS\s0 extensions rockin freshly smoked up compilaz yo, but fo' a Perl compiled wit oldschool 32\-bit
compilers.
.IP "\(bu" 4
\&\f(CW$Config{gccversion}\fR is now set erectly when Perl is built rockin the
mingw64 compila from <http://mingw64.org> [perl #73754].
.IP "\(bu" 4
When buildin Perl wit tha mingw64 x64 cross-compila \f(CW\*(C`incpath\*(C'\fR,
\&\f(CW\*(C`libpth\*(C'\fR, \f(CW\*(C`ldflags\*(C'\fR, \f(CW\*(C`lddlflags\*(C'\fR n' \f(CW\*(C`ldflags_nolargefiles\*(C'\fR joints
in \fIConfig.pm\fR n' \fIConfig_heavy.pl\fR was not previously bein set
correctly cuz, wit dat compiler, tha include n' lib directories
are not immediately below \f(CW\*(C`$(CCHOME)\*(C'\fR (5.12.2).
.IP "\(bu" 4
Da build process proceedz mo' smoothly wit mingw n' dmake when
\&\fIC:\eMSYS\ebin\fR is up in tha \s-1PATH,\s0 cuz of a \f(CW\*(C`Cwd\*(C'\fR fix.
.IP "\(bu" 4
Support fo' buildin wit Visual \*(C+ 2010 is now underway yo, but aint yet
complete.  See \fI\s-1README\s0.win32\fR or perlwin32 fo' mo' details.
.IP "\(bu" 4
Da option ta use a externally-supplied \fIcrypt()\fR, or ta build wit no
\&\fIcrypt()\fR at all, has been removed. Y'all KNOW dat shit, muthafucka!  Perl supplies its own \fIcrypt()\fR
implementation fo' Windows, n' tha ballistical thang dat required
this part of tha distribution ta sometimes be omitted is long gone.
.SH "Internal Chizzles"
.IX Header "Internal Chizzles"
.SS "New APIs"
.IX Subsection "New APIs"
\fI\s-1CLONE_PARAMS\s0 structure added ta ease erect thread creation\fR
.IX Subsection "CLONE_PARAMS structure added ta ease erect thread creation"
.PP
Modulez dat create threadz should now create \f(CW\*(C`CLONE_PARAMS\*(C'\fR structures
by callin tha freshly smoked up function \fIPerl_clone_params_new()\fR, n' free dem with
\&\fIPerl_clone_params_del()\fR.  This will ensure compatibilitizzle wit any future
changes ta tha internalz of tha \f(CW\*(C`CLONE_PARAMS\*(C'\fR structure layout, n' that
it is erectly allocated n' initialised.
.PP
\fINew parsin functions\fR
.IX Subsection "New parsin functions"
.PP
Several functions done been added fo' parsin Perl statements and
expressions.  These functions is meant ta be used by \s-1XS\s0 code invoked
durin Perl parsing, up in a recursive-descent manner, ta allow modulez to
augment tha standard Perl syntax.
.IP "\(bu" 4
\&\fIparse_stmtseq()\fR
parses a sequence of statements, up ta closin brace or \s-1EOF.\s0
.IP "\(bu" 4
\&\fIparse_fullstmt()\fR
parses a cold-ass lil complete Perl statement, includin optionizzle label.
.IP "\(bu" 4
\&\fIparse_barestmt()\fR
parses a statement without a label.
.IP "\(bu" 4
\&\fIparse_block()\fR
parses a cold-ass lil code block.
.IP "\(bu" 4
\&\fIparse_label()\fR
parses a statement label, separate from statements.
.IP "\(bu" 4
\&\f(CW\*(C`parse_fullexpr()\*(C'\fR,
\&\f(CW\*(C`parse_listexpr()\*(C'\fR,
\&\f(CW\*(C`parse_termexpr()\*(C'\fR, and
\&\f(CW\*(C`parse_arithexpr()\*(C'\fR
parse expressions at various precedence levels.
.PP
\fIHints hash \s-1API\s0\fR
.IX Subsection "Hints hash API"
.PP
A freshly smoked up C \s-1API\s0 fo' introspectin tha hinthash \f(CW\*(C`%^H\*(C'\fR at runtime has been
added. Y'all KNOW dat shit, muthafucka!  See \f(CW\*(C`cop_hints_2hv\*(C'\fR, \f(CW\*(C`cop_hints_fetchpvn\*(C'\fR, \f(CW\*(C`cop_hints_fetchpvs\*(C'\fR,
\&\f(CW\*(C`cop_hints_fetchsv\*(C'\fR, n' \f(CW\*(C`hv_copy_hints_hv\*(C'\fR up in perlapi fo' details.
.PP
A new, experimenstrual \s-1API\s0 has been added fo' accessin tha internal
structure dat Perl uses fo' \f(CW\*(C`%^H\*(C'\fR.  See tha functions beginnin with
\&\f(CW\*(C`cophh_\*(C'\fR up in perlapi.
.PP
\fIC intercourse ta \fIcaller()\fI\fR
.IX Subsection "C intercourse ta caller()"
.PP
Da \f(CW\*(C`caller_cx\*(C'\fR function has been added as a XSUB-writerz equivalent of
\&\fIcaller()\fR.  See perlapi fo' details.
.PP
\fICustom per-subroutine check hooks\fR
.IX Subsection "Custom per-subroutine check hooks"
.PP
\&\s-1XS\s0 code up in a extension module can now annotate a subroutine (whether
implemented up in \s-1XS\s0 or up in Perl) so dat nominated \s-1XS\s0 code is ghon be called
at compile time (specifically as part of op checking) ta chizzle tha op
tree of dat subroutine.  Da compile-time check function (supplied by
the extension module) can implement argument processin dat can't be
expressed as a prototype, generate customised compile-time warnings,
perform constant foldin fo' a pure function, inline a subroutine
consistin of sufficiently simple ops, replace tha whole call wit a
custom op, n' so on. I aint talkin' bout chicken n' gravy biatch.  This was previously all possible by hookin the
\&\f(CW\*(C`entersub\*(C'\fR op checker yo, but tha freshly smoked up mechanizzle make it easy as fuck  ta tie the
hook ta a specific subroutine.  See \*(L"cv_set_call_checker\*(R" up in perlapi.
.PP
To help up in freestylin custom check hooks, nuff muthafuckin subtasks within standard
\&\f(CW\*(C`entersub\*(C'\fR op checkin done been separated up n' exposed up in tha \s-1API.\s0
.PP
\fIImproved support fo' custom OPs\fR
.IX Subsection "Improved support fo' custom OPs"
.PP
Custom ops can now be registered wit tha freshly smoked up \f(CW\*(C`custom_op_register\*(C'\fR C
function n' tha \f(CW\*(C`XOP\*(C'\fR structure.  This will make it easier ta add new
propertizzlez of custom ops up in tha future.  Two freshly smoked up propertizzles done been added
already, \f(CW\*(C`xop_class\*(C'\fR n' \f(CW\*(C`xop_peep\*(C'\fR.
.PP
\&\f(CW\*(C`xop_class\*(C'\fR is one of tha OA_*OP constants, n' you can put dat on yo' toast.  It allows B n' other
introspection mechanizzlez ta work wit custom ops
that aren't BASEOPs.  \f(CW\*(C`xop_peep\*(C'\fR be a pointa to
a function dat is ghon be called fo' opz of this
type from \f(CW\*(C`Perl_rpeep\*(C'\fR.
.PP
See \*(L"Custom Operators\*(R" up in perlguts n' \*(L"Custom Operators\*(R" up in perlapi fo' more
detail.
.PP
Da oldschool \f(CW\*(C`PL_custom_op_names\*(C'\fR/\f(CW\*(C`PL_custom_op_descs\*(C'\fR intercourse is still
supported but discouraged.
.PP
\fIScope hooks\fR
.IX Subsection "Scope hooks"
.PP
It be now possible fo' \s-1XS\s0 code ta hook tha fuck into Perlz lexical scope
mechanizzle at compile time, rockin tha freshly smoked up \f(CW\*(C`Perl_blockhook_register\*(C'\fR
function. I aint talkin' bout chicken n' gravy biatch.  See \*(L"Compile-time scope hooks\*(R" up in perlguts.
.PP
\fIDa recursive part of tha peephole optimizer is now hookable\fR
.IX Subsection "Da recursive part of tha peephole optimizer is now hookable"
.PP
In addizzle ta \f(CW\*(C`PL_peepp\*(C'\fR, fo' hookin tha fuck into tha toplevel peephole optimizer, a
\&\f(CW\*(C`PL_rpeepp\*(C'\fR is now available ta hook tha fuck into tha optimizer recursin into
side-chainz of tha optree.
.PP
\fINew non-magical variantz of existin functions\fR
.IX Subsection "New non-magical variantz of existin functions"
.PP
Da followin functions/macros done been added ta tha \s-1API. \s0 Da \f(CW*_nomg\fR
macros is equivalent ta they non\-\f(CW\*(C`_nomg\*(C'\fR variants, except dat they ignore
get-magic.  Those endin up in \f(CW\*(C`_flags\*(C'\fR allow one ta specify whether
get-magic is processed.
.PP
.Vb 8
\&  sv_2bool_flags
\&  SvTRUE_nomg
\&  sv_2nv_flags
\&  SvNV_nomg
\&  sv_cmp_flags
\&  sv_cmp_locale_flags
\&  sv_eq_flags
\&  sv_collxfrm_flags
.Ve
.PP
In a shitload of these cases, tha non\-\f(CW\*(C`_flags\*(C'\fR functions have
been replaced wit wrappers round tha freshly smoked up functions.
.PP
\fIpv/pvs/sv versionz of existin functions\fR
.IX Subsection "pv/pvs/sv versionz of existin functions"
.PP
Many functions endin wit pvn now have equivalent \f(CW\*(C`pv/pvs/sv\*(C'\fR versions.
.PP
\fIList op-buildin functions\fR
.IX Subsection "List op-buildin functions"
.PP
List op-buildin functions done been added ta the
\&\s-1API. \s0 See op_append_elem,
op_append_list, and
op_prepend_elem up in perlapi.
.PP
\fI\f(CI\*(C`LINKLIST\*(C'\fI\fR
.IX Subsection "LINKLIST"
.PP
Da \s-1LINKLIST\s0 macro, part of op buildin that
constructs tha execution-order op chain, has been added ta tha \s-1API.\s0
.PP
\fILocalisation functions\fR
.IX Subsection "Localisation functions"
.PP
Da \f(CW\*(C`save_freeop\*(C'\fR, \f(CW\*(C`save_op\*(C'\fR, \f(CW\*(C`save_pushi32ptr\*(C'\fR n' \f(CW\*(C`save_pushptrptr\*(C'\fR
functions done been added ta tha \s-1API.\s0
.PP
\fIStash names\fR
.IX Subsection "Stash names"
.PP
A stash can now gotz a list of effectizzle names up in addizzle ta its usual
name.  Da first effectizzle name can be accessed via tha \f(CW\*(C`HvENAME\*(C'\fR macro,
which is now tha recommended name ta use up in \s-1MRO\s0 linearisations (\f(CW\*(C`HvNAME\*(C'\fR
bein a gangbangin' fallback if there is no \f(CW\*(C`HvENAME\*(C'\fR).
.PP
These names is added n' deleted via \f(CW\*(C`hv_ename_add\*(C'\fR and
\&\f(CW\*(C`hv_ename_delete\*(C'\fR.  These two functions is \fInot\fR part of tha \s-1API.\s0
.PP
\fINew functions fo' findin n' removin magic\fR
.IX Subsection "New functions fo' findin n' removin magic"
.PP
Da \f(CW\*(C`mg_findext()\*(C'\fR and
\&\f(CW\*(C`sv_unmagicext()\*(C'\fR
functions done been added ta tha \s-1API.\s0
They allow extension authors ta find n' remove magic attached to
scalars based on both tha magic type n' tha magic virtual table, similar ta how
\&\fIsv_magicext()\fR attaches magic of a cold-ass lil certain type n' wit a given virtual table
to a scalar. Shiiit, dis aint no joke.  This eliminates tha need fo' extensions ta strutt tha list of
\&\f(CW\*(C`MAGIC\*(C'\fR pointaz of a \f(CW\*(C`SV\*(C'\fR ta find tha magic dat belongs ta em.
.PP
\fI\f(CI\*(C`find_rundefsv\*(C'\fI\fR
.IX Subsection "find_rundefsv"
.PP
This function returns tha \s-1SV\s0 representin \f(CW$_\fR, whether itz lexical
or dynamic.
.PP
\fI\f(CI\*(C`Perl_croak_no_modify\*(C'\fI\fR
.IX Subsection "Perl_croak_no_modify"
.PP
\&\fIPerl_croak_no_modify()\fR is short-hand for
\&\f(CW\*(C`Perl_croak("%s", PL_no_modify)\*(C'\fR.
.PP
\fI\f(CI\*(C`PERL_STATIC_INLINE\*(C'\fI define\fR
.IX Subsection "PERL_STATIC_INLINE define"
.PP
Da \f(CW\*(C`PERL_STATIC_INLINE\*(C'\fR define has been added ta provide tha best-guess
incantation ta use fo' static inline functions, if tha C compila supports
C99\-style static inline.  If it don't, it'll give a plain \f(CW\*(C`static\*(C'\fR.
.PP
\&\f(CW\*(C`HAS_STATIC_INLINE\*(C'\fR can be used ta check if tha compila straight-up supports
inline functions.
.PP
\fINew \f(CI\*(C`pv_escape\*(C'\fI option fo' hexadecimal escapes\fR
.IX Subsection "New pv_escape option fo' hexadecimal escapes"
.PP
A freshly smoked up option, \f(CW\*(C`PERL_PV_ESCAPE_NONASCII\*(C'\fR, has been added ta \f(CW\*(C`pv_escape\*(C'\fR to
dump all charactas above \s-1ASCII\s0 up in hexadecimal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Before, one could git all
charactas as hexadecimal or tha Latin1 non-ASCII as octal.
.PP
\fI\f(CI\*(C`lex_start\*(C'\fI\fR
.IX Subsection "lex_start"
.PP
\&\f(CW\*(C`lex_start\*(C'\fR has been added ta tha \s-1API,\s0 but is considered experimental.
.PP
\fI\fIop_scope()\fI n' \fIop_lvalue()\fI\fR
.IX Subsection "op_scope() n' op_lvalue()"
.PP
Da \fIop_scope()\fR n' \fIop_lvalue()\fR functions done been added ta tha \s-1API,\s0
but is considered experimental.
.SS "C \s-1API\s0 Chizzles"
.IX Subsection "C API Chizzles"
\fI\f(CI\*(C`PERL_POLLUTE\*(C'\fI has been removed\fR
.IX Subsection "PERL_POLLUTE has been removed"
.PP
Da option ta define \f(CW\*(C`PERL_POLLUTE\*(C'\fR ta expose olda 5.005 symbols for
backwardz compatibilitizzle has been removed. Y'all KNOW dat shit, muthafucka!  Its use was always discouraged,
and MakeMaker gotz nuff a mo' specific escape hatch:
.PP
.Vb 1
\&    perl Makefile.PL POLLUTE=1
.Ve
.PP
This can be used fo' modulez dat aint been upgraded ta 5.6 naming
conventions (and straight-up should be straight-up obsolete by now).
.PP
\fIPeep \s-1API\s0 compatibilitizzle when loadin \s-1XS\s0 modules\fR
.IX Subsection "Peep API compatibilitizzle when loadin XS modules"
.PP
When Perlz \s-1API\s0 chizzlez up in incompatible ways (which probably happens between
major releases), \s-1XS\s0 modulez compiled fo' previous versionz of Perl will no
longer work.  They need ta be recompiled against tha freshly smoked up Perl.
.PP
Da \f(CW\*(C`XS_APIVERSION_BOOTCHECK\*(C'\fR macro has been added ta ensure dat modules
are recompiled n' ta prevent playas from accidentally loadin modules
compiled fo' oldschool perls tha fuck into newer perls.  That macro, which is called when
loadin every last muthafuckin newly compiled extension, compares tha \s-1API\s0 version of the
runnin perl wit tha version a module has been compiled fo' n' raises an
exception if they don't match.
.PP
\fIPerl_fetch_cop_label\fR
.IX Subsection "Perl_fetch_cop_label"
.PP
Da first argument of tha C \s-1API\s0 function \f(CW\*(C`Perl_fetch_cop_label\*(C'\fR has chizzled
from \f(CW\*(C`struct refcounted_he *\*(C'\fR ta \f(CW\*(C`COP *\*(C'\fR, ta insulate tha user from
implementation details.
.PP
This \s-1API\s0 function was marked as \*(L"may chizzle\*(R", n' likely aint up in use outside
the core.  (Neither a unpacked \s-1CPAN\s0 nor Googlez codesearch findz any other
references ta dat shit.)
.PP
\fI\fIGvCV()\fI n' \fIGvGP()\fI is no longer lvalues\fR
.IX Subsection "GvCV() n' GvGP() is no longer lvalues"
.PP
Da freshly smoked up \fIGvCV_set()\fR n' \fIGvGP_set()\fR macros is now provided ta replace
assignment ta dem two macros.
.PP
This allows a gangbangin' future commit ta eliminizzle some backref magic between \s-1GV\s0
and CVs, which will require complete control over assignment ta the
\&\f(CW\*(C`gp_cv\*(C'\fR slot.
.PP
\fI\fICvGV()\fI is no longer a lvalue\fR
.IX Subsection "CvGV() is no longer a lvalue"
.PP
Under some circumstances, tha \fICvGV()\fR field of a \s-1CV\s0 is now
reference-counted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  To ensure consistent behaviour, direct assignment to
it, fo' example \f(CW\*(C`CvGV(cv) = gv\*(C'\fR is now a cold-ass lil compile-time error. Shiiit, dis aint no joke.  A freshly smoked up macro,
\&\f(CW\*(C`CvGV_set(cv,gv)\*(C'\fR has been introduced ta run dis operation
safely.  Note dat modification of dis field aint part of tha public
\&\s-1API,\s0 regardless of dis freshly smoked up macro (and despite its bein listed up in dis section).
.PP
\fI\fICvSTASH()\fI is no longer a lvalue\fR
.IX Subsection "CvSTASH() is no longer a lvalue"
.PP
Da \fICvSTASH()\fR macro can now only be used as a rvalue.  \fICvSTASH_set()\fR
has been added ta replace assignment ta \fICvSTASH()\fR.  This is ta ensure
that backreferences is handled properly.  These macros is not part of the
\&\s-1API.\s0
.PP
\fICallin conventions fo' \f(CI\*(C`newFOROP\*(C'\fI n' \f(CI\*(C`newWHILEOP\*(C'\fI\fR
.IX Subsection "Callin conventions fo' newFOROP n' newWHILEOP"
.PP
Da way tha parser handlez labels has been cleaned up n' refactored. Y'all KNOW dat shit, muthafucka!  As a
result, tha \fInewFOROP()\fR constructor function no longer takes a parameter
statin what tha fuck label is ta go up in tha state op.
.PP
Da \fInewWHILEOP()\fR n' \fInewFOROP()\fR functions no longer accept a line
number as a parameter.
.PP
\fIFlags passed ta \f(CI\*(C`uvuni_to_utf8_flags\*(C'\fI n' \f(CI\*(C`utf8n_to_uvuni\*(C'\fI\fR
.IX Subsection "Flags passed ta uvuni_to_utf8_flags n' utf8n_to_uvuni"
.PP
Some of tha flags parametas ta \fIuvuni_to_utf8_flags()\fR and
\&\fIutf8n_to_uvuni()\fR have chizzled. Y'all KNOW dat shit, muthafucka!  This be a result of Perlz now allowing
internal storage n' manipulation of code points dat is problematic
in some thangs.  Hence, tha default actions fo' these functions has
been complemented ta allow these code points, n' you can put dat on yo' toast.  Da freshly smoked up flags are
documented up in perlapi.  Code dat requires tha problematic code
points ta be rejected need ta chizzle ta use tha freshly smoked up flags.  Some flag
names is retained fo' backward source compatibility, though they do
nothing, as they is now tha default.  However tha flags
\&\f(CW\*(C`UNICODE_ALLOW_FDD0\*(C'\fR, \f(CW\*(C`UNICODE_ALLOW_FFFF\*(C'\fR, \f(CW\*(C`UNICODE_ILLEGAL\*(C'\fR, and
\&\f(CW\*(C`UNICODE_IS_ILLEGAL\*(C'\fR done been removed, as they stem from a
fundamentally fucked up model of how tha fuck tha Unicode non-characta code points
should be handled, which is now busted lyrics bout in
\&\*(L"Non-characta code points\*(R" up in perlunicode.  See also tha Unicode section
under \*(L"Selected Bug Fixes\*(R".
.SS "Deprecated C APIs"
.IX Subsection "Deprecated C APIs"
.ie n .IP """Perl_ptr_table_clear""" 4
.el .IP "\f(CWPerl_ptr_table_clear\fR" 4
.IX Item "Perl_ptr_table_clear"
\&\f(CW\*(C`Perl_ptr_table_clear\*(C'\fR is no longer part of Perlz hood \s-1API. \s0 Callin it
now generates a thugged-out deprecation warning, n' it is ghon be removed up in a gangbangin' future
release.
.ie n .IP """sv_compile_2op""" 4
.el .IP "\f(CWsv_compile_2op\fR" 4
.IX Item "sv_compile_2op"
Da \fIsv_compile_2op()\fR \s-1API\s0 function is now deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Searches suggest
that not a god damn thang on \s-1CPAN\s0 is rockin it, so dis should have zero impact.
.Sp
It attempted ta provide a \s-1API\s0 ta compile code down ta a optree yo, but failed
to bind erectly ta lexicals up in tha enclosin scope.  It aint nuthin but not possible to
fix dis problem within tha constraintz of its parametas n' return value.
.ie n .IP """find_rundefsvoffset""" 4
.el .IP "\f(CWfind_rundefsvoffset\fR" 4
.IX Item "find_rundefsvoffset"
Da \f(CW\*(C`find_rundefsvoffset\*(C'\fR function has been deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  It rocked up that
its design was insufficient fo' reliably gettin tha lexical \f(CW$_\fR at
run-time.
.Sp
Use tha freshly smoked up \f(CW\*(C`find_rundefsv\*(C'\fR function or tha \f(CW\*(C`UNDERBAR\*(C'\fR macro
instead. Y'all KNOW dat shit, muthafucka!  They directly return tha right \s-1SV\s0
representin \f(CW$_\fR, whether it's
lexical or dynamic.
.ie n .IP """CALL_FPTR"" n' ""CPERLscope""" 4
.el .IP "\f(CWCALL_FPTR\fR n' \f(CWCPERLscope\fR" 4
.IX Item "CALL_FPTR n' CPERLscope"
Those is left from a oldschool implementation of \f(CW\*(C`MULTIPLICITY\*(C'\fR rockin \*(C+ objects,
which was removed up in Perl 5.8.  Nowadays these macros do exactly nothing, so
they shouldn't be used no mo'.
.Sp
For compatibility, they is still defined fo' external \f(CW\*(C`XS\*(C'\fR code.  Only
extensions definin \f(CW\*(C`PERL_CORE\*(C'\fR must be updated now, nahmeean?
.SS "Other Internal Chizzles"
.IX Subsection "Other Internal Chizzles"
\fIStack unwinding\fR
.IX Subsection "Stack unwinding"
.PP
Da protocol fo' unwindin tha C stack all up in tha last stage of a \f(CW\*(C`die\*(C'\fR
has chizzled how tha fuck it identifies tha target stack frame.  This now uses
a separate variable \f(CW\*(C`PL_restartjmpenv\*(C'\fR, where previously it relied on
the \f(CW\*(C`blk_eval.cur_top_env\*(C'\fR pointa up in tha \f(CW\*(C`eval\*(C'\fR context frame that
has nominally just been discarded. Y'all KNOW dat shit, muthafucka!  This chizzle means dat code hustlin
durin various stagez of Perl-level unwindin no longer need ta take
care ta avoid beatin tha livin shiznit outta tha pimp frame.
.PP
\fIScope stack entries\fR
.IX Subsection "Scope stack entries"
.PP
Da format of entries on tha scope stack has been chizzled, resultin up in a
reduction of memory usage of bout 10%.  In particular, tha memory used by
the scope stack ta record each actizzle lexical variable has been halved.
.PP
\fIMemory allocation fo' pointa tables\fR
.IX Subsection "Memory allocation fo' pointa tables"
.PP
Memory allocation fo' pointa tablez has been chizzled. Y'all KNOW dat shit, muthafucka!  Previously
\&\f(CW\*(C`Perl_ptr_table_store\*(C'\fR allocated memory from tha same arena system as
\&\f(CW\*(C`SV\*(C'\fR bodies n' \f(CW\*(C`HE\*(C'\fRs, wit freed memory remainin bound ta dem arenas
until interpreta exit.  Now it allocates memory from arenas private ta the
specific pointa table, n' dat memory is moonwalked back ta tha system when
\&\f(CW\*(C`Perl_ptr_table_free\*(C'\fR is called. Y'all KNOW dat shit, muthafucka!  Additionally, allocation n' release are
both less \s-1CPU\s0 intensive.
.PP
\fI\f(CI\*(C`UNDERBAR\*(C'\fI\fR
.IX Subsection "UNDERBAR"
.PP
Da \f(CW\*(C`UNDERBAR\*(C'\fR macro now calls \f(CW\*(C`find_rundefsv\*(C'\fR.  \f(CW\*(C`dUNDERBAR\*(C'\fR is now a
noop but should still be used ta ensure past n' future compatibility.
.PP
\fIStrin comparison routines renamed\fR
.IX Subsection "Strin comparison routines renamed"
.PP
Da \f(CW\*(C`ibcmp_*\*(C'\fR functions done been renamed n' is now called \f(CW\*(C`foldEQ\*(C'\fR,
\&\f(CW\*(C`foldEQ_locale\*(C'\fR, n' \f(CW\*(C`foldEQ_utf8\*(C'\fR.  Da oldschool names is still available as
macros.
.PP
\fI\f(CI\*(C`chop\*(C'\fI n' \f(CI\*(C`chomp\*(C'\fI implementations merged\fR
.IX Subsection "chop n' chomp implementations merged"
.PP
Da opcode bodies fo' \f(CW\*(C`chop\*(C'\fR n' \f(CW\*(C`chomp\*(C'\fR n' fo' \f(CW\*(C`schop\*(C'\fR n' \f(CW\*(C`schomp\*(C'\fR
have been merged. Y'all KNOW dat shit, muthafucka!  Da implementation functions \fIPerl_do_chop()\fR and
\&\fIPerl_do_chomp()\fR, never part of tha hood \s-1API,\s0 done been merged and
moved ta a static function up in \fIpp.c\fR.  This shrinks tha Perl binary
slightly, n' should not affect any code outside tha core (unless it is
relyin on tha order of side-effects when \f(CW\*(C`chomp\*(C'\fR is passed a \fIlist\fR of
values).
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.SS "I/O"
.IX Subsection "I/O"
.IP "\(bu" 4
Perl no longer produces dis warning:
.Sp
.Vb 2
\&    $ perl \-we \*(Aqopen(my $f, ">", \emy $x); binmode($f, "scalar")\*(Aq
\&    Use of uninitialized value up in binmode at \-e line 1.
.Ve
.IP "\(bu" 4
Openin a glob reference via \f(CW\*(C`open($fh, ">", \e*glob)\*(C'\fR no longer
causes tha glob ta be corrupted when tha filehandle is printed to.  This would
cause Perl ta crash whenever tha globz contents was accessed
[perl #77492].
.IP "\(bu" 4
PerlIO no longer crashes when called recursively, like fuckin from a signal
handlez n' shit.  Now it just leaks memory [perl #75556].
.IP "\(bu" 4
Most I/O functions was not warnin fo' unopened handlez unless the
\&\*(L"closed\*(R" n' \*(L"unopened\*(R" warnings categories was both enabled. Y'all KNOW dat shit, muthafucka!  Now only
\&\f(CW\*(C`use warnings \*(Aqunopened\*(Aq\*(C'\fR is necessary ta trigger these warnings, as
had always been tha intention.
.IP "\(bu" 4
There done been nuff muthafuckin fixes ta PerlIO layers:
.Sp
When \f(CW\*(C`binmode(FH, ":crlf")\*(C'\fR pushes tha \f(CW\*(C`:crlf\*(C'\fR layer on top of tha stack,
it no longer enablez crlf layers lower up in tha stack so as ta avoid
unexpected thangs up in dis biatch [perl #38456].
.Sp
Openin a gangbangin' file up in \f(CW\*(C`:raw\*(C'\fR mode now do what tha fuck it advertises ta do (first
open tha file, then \f(CW\*(C`binmode\*(C'\fR it), instead of simply leavin off tha top
layer [perl #80764].
.Sp
Da three layers \f(CW\*(C`:pop\*(C'\fR, \f(CW\*(C`:utf8\*(C'\fR, n' \f(CW\*(C`:bytes\*(C'\fR didn't allow stackin when
openin a gangbangin' file.  For example
this:
.Sp
.Vb 1
\&    open(FH, ">:pop:perlio", "some.file") or take a thugged-out dirtnap $!;
.Ve
.Sp
would throw a \*(L"Invalid argument\*(R" error. Shiiit, dis aint no joke.  This has been fixed up in this
release [perl #82484].
.SS "Regular Expression Bug Fixes"
.IX Subsection "Regular Expression Bug Fixes"
.IP "\(bu" 4
Da regular expression engine no longer loops when matching
\&\f(CW\*(C`"\eN{LATIN SMALL LIGATURE FF}" =~ /f+/i\*(C'\fR n' similar expressions
[perl #72998] (5.12.1).
.IP "\(bu" 4
Da trie runtime code should no longer allocate massive amountz of memory,
fixin #74484.
.IP "\(bu" 4
Syntax errors up in \f(CW\*(C`(?{...})\*(C'\fR blocks no longer cause panic lyrics
[perl #2353].
.IP "\(bu" 4
A pattern like \f(CW\*(C`(?:(o){2})?\*(C'\fR no longer causes a \*(L"panic\*(R" error
[perl #39233].
.IP "\(bu" 4
A fatal error up in regular expressions containin \f(CW\*(C`(.*?)\*(C'\fR when processing
\&\s-1UTF\-8\s0 data has been fixed [perl #75680] (5.12.2).
.IP "\(bu" 4
An erroneous regular expression engine optimisation dat caused regex verbs like
\&\f(CW*COMMIT\fR sometimes ta be ignored has been removed.
.IP "\(bu" 4
Da regular expression bracketed characta class \f(CW\*(C`[\e8\e9]\*(C'\fR was effectively the
same as \f(CW\*(C`[89\e000]\*(C'\fR, incorrectly matchin a \s-1NULL\s0 character n' shit.  It also gave
incorrect warnings dat tha \f(CW8\fR n' \f(CW9\fR was ignored. Y'all KNOW dat shit, muthafucka!  Now \f(CW\*(C`[\e8\e9]\*(C'\fR is the
same as \f(CW\*(C`[89]\*(C'\fR n' gives legitimate warnings dat \f(CW\*(C`\e8\*(C'\fR n' \f(CW\*(C`\e9\*(C'\fR are
unrecognized escape sequences, passed-through.
.IP "\(bu" 4
A regular expression match up in tha right-hand side of a global substitution
(\f(CW\*(C`s///g\*(C'\fR) dat is up in tha same scope will no longer cause match variables
to have tha wack joints on subsequent iterations.  This can happen when an
array or hash subscript is interpolated up in tha right-hand side, as in
\&\f(CW\*(C`s|(.)|@a{ print($1), /./ }|g\*(C'\fR [perl #19078].
.IP "\(bu" 4
Several cases up in which charactas up in tha Latin\-1 non-ASCII range (0x80 to
0xFF) used not ta match theyselves, or used ta match both a cold-ass lil characta class
and its complement, done been fixed. Y'all KNOW dat shit, muthafucka!  For instance, U+00E2 could match both
\&\f(CW\*(C`\ew\*(C'\fR n' \f(CW\*(C`\eW\*(C'\fR [perl #78464] [perl #18281] [perl #60156].
.IP "\(bu" 4
Matchin a Unicode characta against a alternation containin characters
that happened ta match continuation bytes up in tha formerz \s-1UTF8\s0
representation (like \f(CW\*(C`qq{\ex{30ab}} =~ /\exab|\exa9/\*(C'\fR) would cause erroneous
warnings [perl #70998].
.IP "\(bu" 4
Da trie optimisation was not takin empty crews tha fuck into account, preventing
\&\*(L"foo\*(R" from matchin \f(CW\*(C`/\eA(?:(?:)foo|bar|zot)\ez/\*(C'\fR [perl #78356].
.IP "\(bu" 4
A pattern containin a \f(CW\*(C`+\*(C'\fR inside a lookahead would sometimes cause an
incorrect match failure up in a global match (for example, \f(CW\*(C`/(?=(\eS+))/g\*(C'\fR)
[perl #68564].
.IP "\(bu" 4
A regular expression optimisation would sometimes cause a match wit a
\&\f(CW\*(C`{n,m}\*(C'\fR quantifier ta fail when it should have matched [perl #79152].
.IP "\(bu" 4
Case-insensitizzle matchin up in regular expressions compiled under
\&\f(CW\*(C`use locale\*(C'\fR now works much mo' sanely when tha pattern or target
strin is internally encoded up in \s-1UTF8. \s0 Previously, under these
conditions tha localenizz was straight-up lost.  Now, code points
above 255 is treated as Unicode yo, but code points between 0 n' 255
are treated rockin tha current locale rules, regardless of whether
the pattern or tha strang is encoded up in \s-1UTF8. \s0 Da few case-insensitive
matches dat cross tha 255/256 boundary is not allowed. Y'all KNOW dat shit, muthafucka!  For
example, 0xFF do not caselessly match tha characta at 0x178,
\&\s-1LATIN CAPITAL LETTER Y WITH DIAERESIS,\s0 cuz 0xFF may not be \s-1LATIN
SMALL LETTER Y\s0 up in tha current locale, n' Perl has no way of knowing
if dat characta even exists up in tha locale, much less what tha fuck code
point it is.
.IP "\(bu" 4
Da \f(CW\*(C`(?|...)\*(C'\fR regular expression construct no longer crashes if tha final
branch has mo' setz of capturin parentheses than any other branch.  This
was fixed up in Perl 5.10.1 fo' tha case of a single branch yo, but dat fix did
not take multiple branches tha fuck into account [perl #84746].
.IP "\(bu" 4
A bug has been fixed up in tha implementation of \f(CW\*(C`{...}\*(C'\fR quantifiers in
regular expressions dat prevented tha code block in
\&\f(CW\*(C`/((\ew+)(?{ print $2 })){2}/\*(C'\fR from seein tha \f(CW$2\fR sometimes
[perl #84294].
.SS "Syntax/Parsin Bugs"
.IX Subsection "Syntax/Parsin Bugs"
.IP "\(bu" 4
\&\f(CW\*(C`when (scalar) {...}\*(C'\fR no longer crashes yo, but produces a syntax error
[perl #74114] (5.12.1).
.IP "\(bu" 4
A label right before a strang eval (\f(CW\*(C`foo: eval $string\*(C'\fR) no longer causes
the label ta be associated also wit tha straight-up original gangsta statement inside tha eval
[perl #74290] (5.12.1).
.IP "\(bu" 4
Da \f(CW\*(C`no 5.13.2\*(C'\fR form of \f(CW\*(C`no\*(C'\fR no longer tries ta turn on features or
pragmata (like strict) [perl #70075] (5.12.2).
.IP "\(bu" 4
\&\f(CW\*(C`BEGIN {require 5.12.0}\*(C'\fR now behaves as documented, rather than behaving
identically ta \f(CW\*(C`use 5.12.0\*(C'\fR.  Previously, \f(CW\*(C`require\*(C'\fR up in a \f(CW\*(C`BEGIN\*(C'\fR block
was erroneously executin tha \f(CW\*(C`use feature \*(Aq:5.12.0\*(Aq\*(C'\fR and
\&\f(CW\*(C`use strict\*(C'\fR behaviour, which only \f(CW\*(C`use\*(C'\fR was documented to
provide [perl #69050].
.IP "\(bu" 4
A regression introduced up in Perl 5.12.0, making
\&\f(CW\*(C`my $x = 3; $x = length(undef)\*(C'\fR result up in \f(CW$x\fR set ta \f(CW3\fR has been
fixed. Y'all KNOW dat shit, muthafucka!  \f(CW$x\fR will now be \f(CW\*(C`undef\*(C'\fR [perl #85508] (5.12.2).
.IP "\(bu" 4
When strict \*(L"refs\*(R" mode is off, \f(CW\*(C`%{...}\*(C'\fR up in rvalue context returns
\&\f(CW\*(C`undef\*(C'\fR if its argument is undefined. Y'all KNOW dat shit, muthafucka!  An optimisation introduced up in Perl
5.12.0 ta make \f(CW\*(C`keys %{...}\*(C'\fR fasta when used as a funky-ass boolean did not take
this tha fuck into account, causin \f(CW\*(C`keys %{+undef}\*(C'\fR (and \f(CW\*(C`keys %$foo\*(C'\fR when
\&\f(CW$foo\fR is undefined) ta be a error, which it should be all kindsa up in strict
mode only [perl #81750].
.IP "\(bu" 4
Constant-foldin used ta cause
.Sp
.Vb 1
\&  $text =~ ( 1 , biatch? /phoo/ : /bear/)
.Ve
.Sp
to turn into
.Sp
.Vb 1
\&  $text =~ /phoo/
.Ve
.Sp
at compile time.  Now it erectly matches against \f(CW$_\fR [perl #20444].
.IP "\(bu" 4
Parsin Perl code (either wit strang \f(CW\*(C`eval\*(C'\fR or by loadin modules) from
within a \f(CW\*(C`UNITCHECK\*(C'\fR block no longer causes tha interpreta ta crash
[perl #70614].
.IP "\(bu" 4
Strin \f(CW\*(C`eval\*(C'\fRs no longer fail afta 2 bazillion scopes have been
compiled [perl #83364].
.IP "\(bu" 4
Da parser no longer hangs when encounterin certain Unicode characters,
like fuckin U+387 [perl #74022].
.IP "\(bu" 4
Definin a cold-ass lil constant wit tha same name as one of Perlz special blocks
(like \f(CW\*(C`INIT\*(C'\fR) stopped hustlin up in 5.12.0 yo, but has now been fixed
[perl #78634].
.IP "\(bu" 4
A reference ta a literal value used as a hash key (\f(CW$hash{\e"foo"}\fR) used
to be stringified, even if tha hash was tied [perl #79178].
.IP "\(bu" 4
A closure containin a \f(CW\*(C`if\*(C'\fR statement followed by a cold-ass lil constant or variable
is no longer treated as a cold-ass lil constant [perl #63540].
.IP "\(bu" 4
\&\f(CW\*(C`state\*(C'\fR can now be used wit attributes.  It
used ta mean tha same thang as
\&\f(CW\*(C`my\*(C'\fR if any attributes was present [perl #68658].
.IP "\(bu" 4
Expressions like \f(CW\*(C`@$a > 3\*(C'\fR no longer cause \f(CW$a\fR ta be mentioned in
the \*(L"Use of uninitialized value up in numeric gt\*(R" warnin when \f(CW$a\fR is
undefined (since it aint part of tha \f(CW\*(C`>\*(C'\fR expression yo, but tha operand
of tha \f(CW\*(C`@\*(C'\fR) [perl #72090].
.IP "\(bu" 4
Accessin a element of a package array wit a hard-coded number (as
opposed ta a arbitrary expression) would crash if tha array did not exist.
Usually tha array would be autovivified durin compilation yo, but typeglob
manipulation could remove it, as up in these two cases which used ta crash:
.Sp
.Vb 2
\&  *d = *a;  print $d[0];
\&  undef *d; print $d[0];
.Ve
.IP "\(bu" 4
Da \fB\-C\fR command-line option, when used on tha shebang line, can now be
followed by other options [perl #72434].
.IP "\(bu" 4
Da \f(CW\*(C`B\*(C'\fR module was returnin \f(CW\*(C`B::OP\*(C'\fRs instead of \f(CW\*(C`B::LOGOP\*(C'\fRs for
\&\f(CW\*(C`entertry\*(C'\fR [perl #80622].  This was cuz of a funky-ass bug up in tha Perl core,
not up in \f(CW\*(C`B\*(C'\fR itself.
.SS "Stashes, Globs n' Method Lookup"
.IX Subsection "Stashes, Globs n' Method Lookup"
Perl 5.10.0 introduced a freshly smoked up internal mechanizzle fo' cachin MROs (method
resolution orders, or listz of parent classes; aka \*(L"isa\*(R" caches) ta make
method lookup fasta (so \f(CW@ISA\fR arrays would not gotta be searched
repeatedly).  Unfortunately, dis brought wit it like all dem bugs.  Almost
all of these done been fixed now, along wit all dem MRO-related bugs that
existed before 5.10.0:
.IP "\(bu" 4
Da followin used ta have erratic effects on method resolution, cuz
the \*(L"isa\*(R" caches was not reset or otherwise ended up listin tha wrong
classes.  These done been fixed.
.RS 4
.IP "Aliasin packages by assignin ta globs [perl #77358]" 4
.IX Item "Aliasin packages by assignin ta globs [perl #77358]"
.PD 0
.IP "Deletin packages by deletin they containin stash elements" 4
.IX Item "Deletin packages by deletin they containin stash elements"
.ie n .IP "Undefinin tha glob containin a package (""undef *Foo::"")" 4
.el .IP "Undefinin tha glob containin a package (\f(CWundef *Foo::\fR)" 4
.IX Item "Undefinin tha glob containin a package (undef *Foo::)"
.ie n .IP "Undefinin a \s-1ISA\s0 glob (""undef *Foo::ISA"")" 4
.el .IP "Undefinin a \s-1ISA\s0 glob (\f(CWundef *Foo::ISA\fR)" 4
.IX Item "Undefinin a ISA glob (undef *Foo::ISA)"
.ie n .IP "Deletin a \s-1ISA\s0 stash element (""delete $Foo::{ISA}"")" 4
.el .IP "Deletin a \s-1ISA\s0 stash element (\f(CWdelete $Foo::{ISA}\fR)" 4
.IX Item "Deletin a ISA stash element (delete $Foo::{ISA})"
.ie n .IP "Sharin @ISA arrays between classes (via ""*Foo::ISA = \e@Bar::ISA"" or ""*Foo::ISA = *Bar::ISA"") [perl #77238]" 4
.el .IP "Sharin \f(CW@ISA\fR arrays between classes (via \f(CW*Foo::ISA = \e@Bar::ISA\fR or \f(CW*Foo::ISA = *Bar::ISA\fR) [perl #77238]" 4
.IX Item "Sharin @ISA arrays between classes (via *Foo::ISA = @Bar::ISA or *Foo::ISA = *Bar::ISA) [perl #77238]"
.RE
.RS 4
.PD
.Sp
\&\f(CW\*(C`undef *Foo::ISA\*(C'\fR would even stop a freshly smoked up \f(CW@Foo::ISA\fR array from updating
caches.
.RE
.IP "\(bu" 4
Typeglob assignments would crash if tha globz stash no longer existed, so
long as tha glob assigned ta was named \f(CW\*(C`ISA\*(C'\fR or tha glob on either side of
the assignment contained a subroutine.
.IP "\(bu" 4
\&\f(CW\*(C`PL_isarev\*(C'\fR, which be accessible ta Perl via \f(CW\*(C`mro::get_isarev\*(C'\fR is now
updated properly when packages is deleted or removed from tha \f(CW@ISA\fR of
other classes.  This allows nuff packages ta be pimped n' deleted without
causin a memory leak [perl #75176].
.PP
In addition, various other bugs related ta typeglobs n' stashes have been
fixed:
.IP "\(bu" 4
Some work has been done on tha internal pointas dat link between symbol
tablez (stashes), typeglobs, n' subroutines.  This has tha effect that
various edge cases related ta deletin stashes or stash entries (for example,
<%FOO:: = ()>), n' complex typeglob or code-reference aliasing, will no
longer crash tha interpreter.
.IP "\(bu" 4
Assignin a reference ta a glob copy now assigns ta a glob slot instead of
overwritin tha glob wit a scalar [perl #1804] [perl #77508].
.IP "\(bu" 4
A bug when replacin tha glob of a loop variable within tha loop has been fixed
[perl #21469].  This
means tha followin code will no longer crash:
.Sp
.Vb 3
\&    fo' $x (...) {
\&        *x = *y;
\&    }
.Ve
.IP "\(bu" 4
Assignin a glob ta a \s-1PVLV\s0 used ta convert it ta a plain string.  Now it
works erectly, n' a \s-1PVLV\s0 can hold a glob.  This would happen when a
nonexistent hash or array element was passed ta a subroutine:
.Sp
.Vb 2
\&  sub { $_[0] = *foo }\->($hash{key});
\&  # $_[0] would done been tha strang "*main::foo"
.Ve
.Sp
It also happened when a glob was assigned to, or returned from, a element
of a tied array or hash [perl #36051].
.IP "\(bu" 4
When tryin ta report \f(CW\*(C`Use of uninitialized value $Foo::BAR\*(C'\fR, crashes could
occur if tha glob holdin tha global variable up in question had been detached
from its original gangsta stash by, fo' example, \f(CW\*(C`delete $::{"Foo::"}\*(C'\fR.  This has
been fixed by disablin tha reportin of variable names up in them
cases.
.IP "\(bu" 4
Durin tha restoration of a localised typeglob on scope exit, any
destructors called as a result would be able ta peep tha typeglob up in an
inconsistent state, containin freed entries, which could result up in a
crash.  This would affect code like this:
.Sp
.Vb 5
\&  local *@;
\&  eval { take a thugged-out dirtnap bless [] }; # puts a object up in $@
\&  sub DESTROY {
\&    local $@; # boom
\&  }
.Ve
.Sp
Now tha glob entries is cleared before any destructors is called. Y'all KNOW dat shit, muthafucka!  This
also means dat destructors can vivify entries up in tha glob.  So Perl tries
again and, if tha entries is re-created too nuff times, takes a thugged-out dirt nap wit a
\&\*(L"panic: gp_free ...\*(R" error message.
.IP "\(bu" 4
If a typeglob is freed while a subroutine attached ta it is still
referenced elsewhere, tha subroutine is renamed ta \f(CW\*(C`_\|_ANON_\|_\*(C'\fR up in tha same
package, unless tha package has been undefined, up in which case tha \f(CW\*(C`_\|_ANON_\|_\*(C'\fR
package is used. Y'all KNOW dat shit, muthafucka!  This could cause packages ta be sometimes autovivified,
like fuckin if tha package had been deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Now dis no longer occurs.
Da \f(CW\*(C`_\|_ANON_\|_\*(C'\fR package be also now used when tha original gangsta package is
no longer attached ta tha symbol table.  This avoidz memory leaks up in some
cases [perl #87664].
.IP "\(bu" 4
Subroutines n' package variablez inside a package whose name endz with
\&\f(CW\*(C`::\*(C'\fR can now be accessed wit a gangbangin' straight-up qualified name.
.SS "Unicode"
.IX Subsection "Unicode"
.IP "\(bu" 4
What has become known as \*(L"the Unicode Bug\*(R" be almost straight-up resolved in
this release.  Under \f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR (which is
automatically selected by \f(CW\*(C`use 5.012\*(C'\fR n' above), tha internal
storage format of a strang no longer affects tha external semantics.
[perl #58182].
.Sp
There is two known exceptions:
.RS 4
.IP "1." 4
Da now-deprecated, user-defined case-changing
functions require utf8\-encoded strings ta operate.  Da \s-1CPAN\s0 module
Unicode::Casin has been freestyled ta replace dis feature without its
drawbacks, n' tha feature is scheduled ta be removed up in 5.16.
.IP "2." 4
\&\fIquotemeta()\fR (and its in-line equivalent \f(CW\*(C`\eQ\*(C'\fR) can also give different
results dependin on whether a strang is encoded up in \s-1UTF\-8. \s0 See
\&\*(L"Da \*(R"Unicode Bug"" up in perlunicode.
.RE
.RS 4
.RE
.IP "\(bu" 4
Handlin of Unicode non-characta code points has chizzled.
Previously they was mostly considered illegal, except dat up in some
place only one of tha 66 of dem was known. I aint talkin' bout chicken n' gravy biatch.  Da Unicode Standard
considaz dem all legal yo, but forbidz they \*(L"open interchange\*(R".
This is part of tha chizzle ta allow internal use of any code
point (see \*(L"Core Enhancements\*(R").  Together, these chizzlez resolve
[perl #38722], [perl #51918], [perl #51936], n' [perl #63446].
.IP "\(bu" 4
Case-insensitizzle \f(CW"/i"\fR regular expression matchin of Unicode
charactas dat match multiple charactas now works much mo' as
intended. Y'all KNOW dat shit, muthafucka!  For example
.Sp
.Vb 1
\& "\eN{LATIN SMALL LIGATURE FFI}" =~ /ffi/ui
.Ve
.Sp
and
.Sp
.Vb 1
\& "ffi" =~ /\eN{LATIN SMALL LIGATURE FFI}/ui
.Ve
.Sp
are both true.  Previously, there was nuff bugs wit dis feature.
What aint been fixed is tha places where tha pattern gotz nuff the
multiple charactas yo, but tha charactas is split up by other thangs,
like fuckin in
.Sp
.Vb 1
\& "\eN{LATIN SMALL LIGATURE FFI}" =~ /(f)(f)i/ui
.Ve
.Sp
or
.Sp
.Vb 1
\& "\eN{LATIN SMALL LIGATURE FFI}" =~ /ffi*/ui
.Ve
.Sp
or
.Sp
.Vb 1
\& "\eN{LATIN SMALL LIGATURE FFI}" =~ /[a\-f][f\-m][g\-z]/ui
.Ve
.Sp
None of these match.
.Sp
Also, dis matchin don't straight-up conform ta tha current Unicode
Standard, which asks dat tha matchin be made upon tha \s-1NFD
\&\s0(Normalization Form Decomposed) of tha text.  But fuck dat shiznit yo, tha word on tha street is dat az of this
writin (April 2010), tha Unicode Standard is currently up in flux about
what they will recommend bustin wit regard up in such scenarios.  It may be
that they will throw up tha whole concept of multi-characta matches.
[perl #71736].
.IP "\(bu" 4
Namin a thugged-out deprecated characta up in \f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR no longer leaks memory.
.IP "\(bu" 4
We fixed a funky-ass bug dat could cause \f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR constructs followed by
a single \f(CW"."\fR ta be parsed incorrectly [perl #74978] (5.12.1).
.IP "\(bu" 4
\&\f(CW\*(C`chop\*(C'\fR now erectly handlez charactas above \f(CW"\ex{7fffffff}"\fR
[perl #73246].
.IP "\(bu" 4
Passin ta \f(CW\*(C`index\*(C'\fR a offset beyond tha end of tha strang when tha string
is encoded internally up in \s-1UTF8\s0 no longer causes panics [perl #75898].
.IP "\(bu" 4
\&\fIwarn()\fR n' \fIdie()\fR now respect utf8\-encoded scalars [perl #45549].
.IP "\(bu" 4
Sometimes tha \s-1UTF8\s0 length cache would not be reset on a value
returned by substr, causin \f(CW\*(C`length(substr($uni_string, ...))\*(C'\fR ta give
wrong lyrics.  With \f(CW\*(C`${^UTF8CACHE}\*(C'\fR set ta \-1, it would also produce
a \*(L"panic\*(R" error message [perl #77692].
.SS "Ties, Overloadin n' Other Magic"
.IX Subsection "Ties, Overloadin n' Other Magic"
.IP "\(bu" 4
Overloadin now works properly up in conjunction wit tied
variables.  What formerly happened was dat most ops checked their
arguments fo' overloadin \fIbefore\fR checkin fo' magic, so fo' example
an overloaded object returned by a tied array access would probably be
treated as not overloaded [\s-1RT\s0 #57012].
.IP "\(bu" 4
Various instancez of magic (like tie methods) bein called on tied variables
too nuff or too few times done been fixed:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`$tied\->()\*(C'\fR did not always call \s-1FETCH\s0 [perl #8438].
.IP "\(bu" 4
Filetest operators n' \f(CW\*(C`y///\*(C'\fR n' \f(CW\*(C`tr///\*(C'\fR was callin \s-1FETCH\s0 too
many times.
.IP "\(bu" 4
Da \f(CW\*(C`=\*(C'\fR operator used ta ignore magic on its right-hand side if the
scalar happened ta hold a typeglob (if a typeglob was tha last thang
returned from or assigned ta a tied scalar) [perl #77498].
.IP "\(bu" 4
Dereference operators used ta ignore magic if tha argument was a
reference already (like fuckin from a previous \s-1FETCH\s0) [perl #72144].
.IP "\(bu" 4
\&\f(CW\*(C`splice\*(C'\fR now calls set-magic (so chizzlez made
by \f(CW\*(C`splice @ISA\*(C'\fR is bigged up by method calls) [perl #78400].
.IP "\(bu" 4
In-memory filez pimped by \f(CW\*(C`open($fh, ">", \e$buffer)\*(C'\fR was not calling
\&\s-1FETCH/STORE\s0 at all [perl #43789] (5.12.2).
.IP "\(bu" 4
\&\fIutf8::is_utf8()\fR now respects get-magic (like \f(CW$1\fR) (5.12.1).
.RE
.RS 4
.RE
.IP "\(bu" 4
Non-commutatizzle binary operators used ta swap they operandz if tha same
tied scalar was used fo' both operandz n' returned a gangbangin' finger-lickin' different value for
each \s-1FETCH. \s0 For instance, if \f(CW$t\fR returned 2 tha last time n' 3 the
second, then \f(CW\*(C`$t/$t\*(C'\fR would evaluate ta 1.5.  This has been fixed
[perl #87708].
.IP "\(bu" 4
Strin \f(CW\*(C`eval\*(C'\fR now detects taintednizz of overloaded or tied
arguments [perl #75716].
.IP "\(bu" 4
Strin \f(CW\*(C`eval\*(C'\fR n' regular expression matches against objects wit string
overloadin no longer cause memory corruption or crashes [perl #77084].
.IP "\(bu" 4
readline now honors \f(CW\*(C`<>\*(C'\fR overloadin on tied
arguments.
.IP "\(bu" 4
\&\f(CW\*(C`<expr>\*(C'\fR always respects overloadin now if tha expression is
overloaded.
.Sp
Because \*(L"<>\ as glob\*(R" was parsed differently from
\&\*(L"<>\ as filehandle\*(R" from 5.6 onwards, suttin' like \f(CW\*(C`<$foo[0]>\*(C'\fR did
not handle overloading, even if \f(CW$foo[0]\fR was a overloaded object.  This
was contrary ta tha documentation fo' overload, n' meant dat \f(CW\*(C`<>\*(C'\fR
could not be used as a general overloaded iterator operator.
.IP "\(bu" 4
Da fallback behaviour of overloadin on binary operators was asymmetric
[perl #71286].
.IP "\(bu" 4
Magic applied ta variablez up in tha main package no longer affects other packages.
See \*(L"Magic variablez outside tha main package\*(R" above [perl #76138].
.IP "\(bu" 4
Sometimes magic (ties, taintedness, etc.) attached ta variablez could cause
an object ta last longer than it should, or cause a cold-ass lil crash if a tied
variable was freed from within a tie method. Y'all KNOW dat shit, muthafucka!  These done been fixed
[perl #81230].
.IP "\(bu" 4
\&\s-1DESTROY\s0 methodz of objects implementin tizzles is no longer able ta crash by
accessin tha tied variable all up in a weak reference [perl #86328].
.IP "\(bu" 4
Fixed a regression of \fIkill()\fR when a match variable is used fo' the
process \s-1ID\s0 ta bust a cap up in [perl #75812].
.IP "\(bu" 4
\&\f(CW$AUTOLOAD\fR used ta remain tainted forever if it eva became tainted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Now
it is erectly untainted if a autoloaded method is called n' tha method
name was not tainted.
.IP "\(bu" 4
\&\f(CW\*(C`sprintf\*(C'\fR now takes a thugged-out dirt nap when passed a tainted scalar fo' tha format.  It did
already take a thugged-out dirtnap fo' arbitrary expressions yo, but not fo' simple scalars
[perl #82250].
.IP "\(bu" 4
\&\f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`uc\*(C'\fR, \f(CW\*(C`lcfirst\*(C'\fR, n' \f(CW\*(C`ucfirst\*(C'\fR no longer return untainted strings
when tha argument is tainted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This has been fucked up since perl 5.8.9
[perl #87336].
.SS "Da Debugger"
.IX Subsection "Da Debugger"
.IP "\(bu" 4
Da Perl debugger now also works up in taint mode [perl #76872].
.IP "\(bu" 4
Subroutine redefinizzle works once mo' up in tha debugger [perl #48332].
.IP "\(bu" 4
When \fB\-d\fR is used on tha shebang (\f(CW\*(C`#!\*(C'\fR) line, tha debugger now has access
to tha linez of tha main program.  In tha past, dis sometimes hit dat shiznit and
sometimes did not, dependin on tha order up in which thangs happened ta be
arranged up in memory [perl #71806].
.IP "\(bu" 4
A possible memory leak when rockin \fIcaller()\fR ta set
\&\f(CW@DB::args\fR has been fixed (5.12.2).
.IP "\(bu" 4
Perl no longer stomps on \f(CW$DB::single\fR, \f(CW$DB::trace\fR, n' \f(CW$DB::signal\fR 
if these variablez already have joints when \f(CW$^P\fR be assigned ta [perl #72422].
.IP "\(bu" 4
\&\f(CW\*(C`#line\*(C'\fR directives up in strang evals was not properly uppimpin tha arrays
of linez of code (\f(CW\*(C`@{"_< ..."}\*(C'\fR) dat tha debugger (or any debuggin or
profilin module) uses.  In threaded builds, they was not bein updated at
all.  In non-threaded builds, tha line number was ignored, so any chizzle to
the existin line number would cause tha lines ta be misnumbered
[perl #79442].
.SS "Threads"
.IX Subsection "Threads"
.IP "\(bu" 4
Perl no longer accidentally clones lexicals up in scope within actizzle stack
frames up in tha parent when bustin a cold-ass lil lil pimp thread [perl #73086].
.IP "\(bu" 4
Several memory leaks up in clonin n' freein threaded Perl interpretas have been
fixed [perl #77352].
.IP "\(bu" 4
Creatin a freshly smoked up thread when directory handlez was open used ta cause a
crash, cuz tha handlez was not cloned yo, but simply passed ta tha new
thread, resultin up in a thugged-out double free.
.Sp
Now directory handlez is cloned properly on Windows
and on systems dat gotz a \f(CW\*(C`fchdir\*(C'\fR function. I aint talkin' bout chicken n' gravy biatch.  On other
systems, freshly smoked up threadz simply do not inherit directory
handlez from they parent threadz [perl #75154].
.IP "\(bu" 4
Da typeglob \f(CW\*(C`*,\*(C'\fR, which holdz tha scalar variable \f(CW$,\fR (output field
separator), had tha wack reference count up in lil pimp threads.
.IP "\(bu" 4
[perl #78494] When pipes is shared between threads, tha \f(CW\*(C`close\*(C'\fR function
(and any implicit close, like fuckin on thread exit) no longer blocks.
.IP "\(bu" 4
Perl now do a timely cleanup of SVs dat is cloned tha fuck into a new
thread but then discovered ta be orphaned (that is, they ballers
are \fInot\fR cloned).  This eliminates nuff muthafuckin \*(L"scalars leaked\*(R"
warnings when joinin threads.
.SS "Scopin n' Subroutines"
.IX Subsection "Scopin n' Subroutines"
.IP "\(bu" 4
Lvalue subroutines is again n' again n' again able ta return copy-on-write scalars.  This
had been fucked up since version 5.10.0 [perl #75656] (5.12.3).
.IP "\(bu" 4
\&\f(CW\*(C`require\*(C'\fR no longer causes \f(CW\*(C`caller\*(C'\fR ta return tha wack file name for
the scope dat called \f(CW\*(C`require\*(C'\fR n' other scopes higher up dat had the
same file name [perl #68712].
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR wit a \f(CW\*(C`($$)\*(C'\fR\-prototyped comparison routine used ta cause tha value
of \f(CW@_\fR ta leak outta tha sort.  Takin a reference ta \f(CW@_\fR within the
sortin routine could cause a cold-ass lil crash [perl #72334].
.IP "\(bu" 4
Match variablez (like \f(CW$1\fR) no longer persist between calls ta a sort
subroutine [perl #76026].
.IP "\(bu" 4
Iteratin wit \f(CW\*(C`foreach\*(C'\fR over a array returned by a lvalue sub now works
[perl #23790].
.IP "\(bu" 4
\&\f(CW$@\fR is now localised durin calls ta \f(CW\*(C`binmode\*(C'\fR ta prevent action at a
distizzle [perl #78844].
.IP "\(bu" 4
Callin a cold-ass lil closure prototype (what is passed ta a attribute handlez fo' a
closure) now thangs up in dis biatch up in a \*(L"Closure prototype called\*(R" error message instead
of a cold-ass lil crash [perl #68560].
.IP "\(bu" 4
Mentionin a read-only lexical variable from tha enclosin scope up in a
strin \f(CW\*(C`eval\*(C'\fR no longer causes tha variable ta become writable
[perl #19135].
.SS "Signals"
.IX Subsection "Signals"
.IP "\(bu" 4
Within signal handlezs, \f(CW$!\fR is now implicitly localized.
.IP "\(bu" 4
\&\s-1CHLD\s0 signals is no longer unblocked afta a signal handlez is called if
they was blocked before by \f(CW\*(C`POSIX::sigprocmask\*(C'\fR [perl #82040].
.IP "\(bu" 4
A signal handlez called within a signal handlez could cause leaks or
double-frees.  Now fixed [perl #76248].
.SS "Miscellaneous Memory Leaks"
.IX Subsection "Miscellaneous Memory Leaks"
.IP "\(bu" 4
Several memory leaks when loadin \s-1XS\s0 modulez was fixed (5.12.2).
.IP "\(bu" 4
\&\fIsubstr()\fR,
\&\fIpos()\fR, \fIkeys()\fR,
and \fIvec()\fR could, when used up in combination
with lvalues, result up in leakin tha scalar value they operate on, n' cause its
destruction ta happen too late.  This has now been fixed.
.IP "\(bu" 4
Da postincrement n' postdecrement operators, \f(CW\*(C`++\*(C'\fR n' \f(CW\*(C`\-\-\*(C'\fR, used ta cause
leaks when used on references.  This has now been fixed.
.IP "\(bu" 4
Nested \f(CW\*(C`map\*(C'\fR n' \f(CW\*(C`grep\*(C'\fR blocks no longer leak memory when processing
pimpin' lists [perl #48004].
.IP "\(bu" 4
\&\f(CW\*(C`use \f(CIVERSION\f(CW\*(C'\fR n' \f(CW\*(C`no \f(CIVERSION\f(CW\*(C'\fR no longer leak memory [perl #78436]
[perl #69050].
.IP "\(bu" 4
\&\f(CW\*(C`.=\*(C'\fR followed by \f(CW\*(C`<>\*(C'\fR or \f(CW\*(C`readline\*(C'\fR would leak memory if \f(CW$/\fR
contained charactas beyond tha octet range n' tha scalar assigned to
happened ta be encoded as \s-1UTF8\s0 internally [perl #72246].
.IP "\(bu" 4
\&\f(CW\*(C`eval \*(AqBEGIN{die}\*(Aq\*(C'\fR no longer leaks memory on non-threaded builds.
.SS "Memory Corruption n' Crashes"
.IX Subsection "Memory Corruption n' Crashes"
.IP "\(bu" 4
\&\fIglob()\fR no longer crashes when \f(CW%File::Glob::\fR is empty and
\&\f(CW\*(C`CORE::GLOBAL::glob\*(C'\fR aint present [perl #75464] (5.12.2).
.IP "\(bu" 4
\&\fIreadline()\fR has been fixed when interrupted by signals so it no longer
returns tha \*(L"same thang\*(R" as before or random memory.
.IP "\(bu" 4
When assignin a list wit duplicated keys ta a hash, tha assignment used to
return garbage and/or freed joints:
.Sp
.Vb 1
\&    @a = %h = (list wit some duplicate keys);
.Ve
.Sp
This has now been fixed [perl #31865].
.IP "\(bu" 4
Da mechanizzle fo' freein objects up in globs used ta leave dangling
pointas ta freed SVs, meanin Perl playas could peep corrupted state
durin destruction.
.Sp
Perl now frees only tha affected slotz of tha \s-1GV,\s0 rather than freeing
the \s-1GV\s0 itself.  This make shizzle dat there be no danglin refs or
corrupted state durin destruction.
.IP "\(bu" 4
Da interpreta no longer crashes when freein deeply-nested arrays of
arrays.  Hashes aint been fixed yet [perl #44225].
.IP "\(bu" 4
Concatenatin long strings under \f(CW\*(C`use encoding\*(C'\fR no longer causes Perl to
crash [perl #78674].
.IP "\(bu" 4
Callin \f(CW\*(C`\->import\*(C'\fR on a cold-ass lil class lackin a import method could corrupt
the stack, resultin up in strange behaviour. Shiiit, dis aint no joke.  For instance,
.Sp
.Vb 1
\&  push @a, "foo", $b = bar\->import;
.Ve
.Sp
would assign \*(L"foo\*(R" ta \f(CW$b\fR [perl #63790].
.IP "\(bu" 4
Da \f(CW\*(C`recv\*(C'\fR function could crash when called wit tha \s-1MSG_TRUNC\s0 flag
[perl #75082].
.IP "\(bu" 4
\&\f(CW\*(C`formline\*(C'\fR no longer crashes when passed a tainted format picture.  It also
taints \f(CW$^A\fR now if its arguments is tainted [perl #79138].
.IP "\(bu" 4
A bug up in how tha fuck we process filetest operations could cause a segfault.
Filetests don't always expect a op on tha stack, so we now use
TOPs only if we shizzle dat our asses aint \f(CW\*(C`stat\*(C'\fRin tha \f(CW\*(C`_\*(C'\fR filehandle.
This is indicated by \f(CW\*(C`OPf_KIDS\*(C'\fR (as checked up in ck_ftst) [perl #74542]
(5.12.1).
.IP "\(bu" 4
\&\fIunpack()\fR now handlez scalar context erectly fo' \f(CW%32H\fR n' \f(CW%32u\fR,
fixin a potential crash.  \fIsplit()\fR would crash cuz tha third item
on tha stack wasn't tha regular expression it expected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  \f(CW\*(C`unpack("%2H",
\&...)\*(C'\fR would return both tha unpacked result n' tha checksum on tha stack,
as would \f(CW\*(C`unpack("%2u", ...)\*(C'\fR [perl #73814] (5.12.2).
.SS "Fixes ta Various Perl Operators"
.IX Subsection "Fixes ta Various Perl Operators"
.IP "\(bu" 4
Da \f(CW\*(C`&\*(C'\fR, \f(CW\*(C`|\*(C'\fR, n' \f(CW\*(C`^\*(C'\fR bitwise operators no longer coerce read-only arguments
[perl #20661].
.IP "\(bu" 4
Stringifyin a scalar containin \*(L"\-0.0\*(R" no longer has tha effect of turning
false tha fuck into legit [perl #45133].
.IP "\(bu" 4
Some numeric operators was convertin integers ta floatin point,
resultin up in loss of precision on 64\-bit platforms [perl #77456].
.IP "\(bu" 4
\&\fIsprintf()\fR was ignorin localez when called wit constant arguments
[perl #78632].
.IP "\(bu" 4
Combinin tha vector (\f(CW%v\fR) flag n' dynamic precision would
cause \f(CW\*(C`sprintf\*(C'\fR ta confuse tha order of its arguments, makin it 
treat tha strang as tha precision n' vice-versa [perl #83194].
.SS "Bugs Relatin ta tha C \s-1API\s0"
.IX Subsection "Bugs Relatin ta tha C API"
.IP "\(bu" 4
Da C\-level \f(CW\*(C`lex_stuff_pvn\*(C'\fR function would sometimes cause a spurious
syntax error on tha last line of tha file if it lacked a gangbangin' final semicolon
[perl #74006] (5.12.1).
.IP "\(bu" 4
Da \f(CW\*(C`eval_sv\*(C'\fR n' \f(CW\*(C`eval_pv\*(C'\fR C functions now set \f(CW$@\fR erectly when
there be a syntax error n' no \f(CW\*(C`G_KEEPERR\*(C'\fR flag, n' never set it if the
\&\f(CW\*(C`G_KEEPERR\*(C'\fR flag is present [perl #3719].
.IP "\(bu" 4
Da \s-1XS\s0 multicall \s-1API\s0 no longer causes subroutines ta lose reference counts
if called via tha multicall intercourse from within dem straight-up subroutines.
This affects modulez like List::Util.  Callin one of its functions wit an
actizzle subroutine as tha straight-up original gangsta argument could cause a cold-ass lil crash [perl #78070].
.IP "\(bu" 4
Da \f(CW\*(C`SvPVbyte\*(C'\fR function available ta \s-1XS\s0 modulez now calls magic before
downgradin tha \s-1SV,\s0 ta avoid warnings bout wide charactas [perl #72398].
.IP "\(bu" 4
Da ref types up in tha typemap fo' \s-1XS\s0 bindings now support magical variables
[perl #72684].
.IP "\(bu" 4
\&\f(CW\*(C`sv_catsv_flags\*(C'\fR no longer calls \f(CW\*(C`mg_get\*(C'\fR on its second argument (the
source string) if tha flags passed ta it do not include \s-1SV_GMAGIC. \s0 So it
now matches tha documentation.
.IP "\(bu" 4
\&\f(CW\*(C`my_strftime\*(C'\fR no longer leaks memory.  This fixes a memory leak in
\&\f(CW\*(C`POSIX::strftime\*(C'\fR [perl #73520].
.IP "\(bu" 4
\&\fI\s-1XSUB\s0.h\fR now erectly redefines fgets under \s-1PERL_IMPLICIT_SYS\s0 [perl #55049]
(5.12.1).
.IP "\(bu" 4
\&\s-1XS\s0 code rockin \fIfputc()\fR or \fIfputs()\fR on Windows could cause a error
due ta they arguments bein swapped [perl #72704] (5.12.1).
.IP "\(bu" 4
A possible segfault up in tha \f(CW\*(C`T_PTROBJ\*(C'\fR default typemap has been fixed
(5.12.2).
.IP "\(bu" 4
A bug dat could cause \*(L"Unknown error\*(R" lyrics when
\&\f(CW\*(C`call_sv(code, G_EVAL)\*(C'\fR is called from a \s-1XS\s0 destructor has been fixed
(5.12.2).
.SH "Known Problems"
.IX Header "Known Problems"
This be a list of dope unresolved thangs which is regressions
from earlier versionz of Perl or which affect widely-used \s-1CPAN\s0 modules.
.IP "\(bu" 4
\&\f(CW\*(C`List::Util::first\*(C'\fR misbehaves up in tha presence of a lexical \f(CW$_\fR
(typically introduced by \f(CW\*(C`my $_\*(C'\fR or implicitly by \f(CW\*(C`given\*(C'\fR).  Da variable
that gets set fo' each iteration is tha package variable \f(CW$_\fR, not the
lexical \f(CW$_\fR.
.Sp
A similar issue may occur up in other modulez dat provide functions which
take a funky-ass block as they first argument, like
.Sp
.Vb 1
\&    foo { ... $_ ...} list
.Ve
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=67694>
.IP "\(bu" 4
\&\fIreadline()\fR returns a empty strang instead of a cold-ass lil cached previous value
when it is interrupted by a signal
.IP "\(bu" 4
Da chizzlez up in prototype handlin break Switch.  A patch has been sent
upstream n' will hopefully step tha fuck up on \s-1CPAN\s0 soon.
.IP "\(bu" 4
Da upgrade ta \fIExtUtils\-MakeMaker\-6.57_05\fR has caused
some tests up in tha \fIModule-Install\fR distribution on \s-1CPAN\s0 to
fail. (Specifically, \fI02_mymeta.t\fR tests 5 n' 21; \fI18_all_from.t\fR
tests 6 n' 15; \fI19_authors.t\fR tests 5, 13, 21, n' 29; and
\&\fI20_authors_with_special_characters.t\fR tests 6, 15, n' 23 up in version
1.00 of dat distribution now fail.)
.IP "\(bu" 4
On \s-1VMS, \s0\f(CW\*(C`Time::HiRes\*(C'\fR tests will fail cuz of a funky-ass bug up in tha \s-1CRTL\s0's
implementation of \f(CW\*(C`setitimer\*(C'\fR: previous timer joints would be cleared
if a timer expired but not if tha timer was reset before expiring.  \s-1HP\s0
OpenVMS Engineerin have erected tha problem n' will release a patch
in due course (Quix case # \s-1QXCM1001115136\s0).
.IP "\(bu" 4
On \s-1VMS,\s0 there was a handful of \f(CW\*(C`Module::Build\*(C'\fR test failures our phat asses didn't
get ta before tha release; please peep \s-1CPAN\s0 fo' thugged-out shit.
.SH "Errata"
.IX Header "Errata"
.SS "\fIkeys()\fP, \fIvalues()\fP, n' \fIeach()\fP work on arrays"
.IX Subsection "keys(), joints(), n' each() work on arrays"
Yo ass can now use tha \fIkeys()\fR, \fIvalues()\fR, n' \fIeach()\fR builtins on arrays;
previously you could use dem only on hashes.  See perlfunc fo' details.
This is straight-up a cold-ass lil chizzle introduced up in perl 5.12.0 yo, but dat shiznit was missed from
that releasez perl5120delta.
.ie n .SS "\fIsplit()\fP n' @_"
.el .SS "\fIsplit()\fP n' \f(CW@_\fP"
.IX Subsection "split() n' @_"
\&\fIsplit()\fR no longer modifies \f(CW@_\fR when called up in scalar or void context.
In void context it now produces a \*(L"Useless use of split\*(R" warning.
This was also a perl 5.12.0 chizzle dat missed tha perldelta.
.SH "Obituary"
.IX Header "Obituary"
Randy Kobes, creator of http://kobesearch.cpan.org/ and
contributor/maintainer ta nuff muthafuckin core Perl toolchain modules, passed
away on September 18, 2010 afta a funky-ass battle wit lung cancer n' shit.  Da hood
was richer fo' his crazy-ass muthafuckin involvement.  Dude is ghon be missed.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.14.0 represents one year of pimpment since
Perl 5.12.0 n' gotz nuff nearly 550,000 linez of chizzlez across nearly
3,000 filez from 150 authors n' committers.
.PP
Perl continues ta flourish tha fuck into its third decade props ta a vibrant
communitizzle of playas n' pimpers.  Da followin playas is known to
have contributed tha improvements dat became Perl 5.14.0:
.PP
Aaron Crane, Abhijit Menon-Sen, Abigail, \*(Aevar Arnfjo\*:r\*(d- Bjarmason,
Alastair Douglas, Alexander Alekseev, Alexander Hartmaier, Alexandr
Ciornii, Alex Davies, Alex Vandiver, Ali Polatel, Allen Smizzle, Andreas
Ko\*:nig, Andrew Rodland, Andy Armstrong, Andy Dougherty, Aristotle
Pagaltzis, Arkturuz, Arvan, A. Right back up in yo muthafuckin ass. Sinan Unur, Lil' Bow Wow Morrow, Bo Lindbergh,
Boris Ratner, Brad Gilbert, Bram, brian d foy, Brian Phillips, Casey
West, Charlez Bailey, Chas. Owens, Chip Salzenberg, Chris 'BinGOs'
Williams, chromatic, Craig A. Berry, Curtis Jewell, Dagfinn Ilmari
Mannsa\*oker, Don Juan Dascalescu, Dizzle Rolsky, Dizzy Caldwell, Dizzy Cantrell,
Dizzy Golden, Dizzy Leadbeater, Dizzy Mitchell, Dizzy Wheeler, Eric
Brine, Father Chrysostomos, Fingle Nark, Florian Ragwitz, Frank Wiegand,
Franz Fasching, Gene Sullivan, George Greer, Gerard Goossen, Gisle Aas,
Goro Fuji, Grant McLean, gregor herrmann, H.Merijn Brand, Hongwen Qiu,
Hugo van der Sanden, Ian Goodacre, Jizzy E Keenan, Jizzy Mastros, Jan
Dubois, Jay Hannah, Jeremy D yo. Hedden, Jizzy Vincent, Jim Cromie, Jirka
HruXka, Jizzy Peacock, Joshua ben Jore, Joshua Pritikin, Karl Williamson,
Kevin Ryde, kmx, Lars \s-1DXXXXXX XXX,\s0 Larwan Berke, Leon Brocard, Leon
Timmermans, Lubomir Rintel, Lukas Mai, Maik Hentsche, Marty Pauley,
Marvin Humphrey, Mack Johnson, Mack S Trout, Max Maischein, Michael
Breen, Mike Fig, Mike G Schwern, Mike Parker, Mike Stevens,
Mike Witten, Mike Kelly, Moritz Lenz, Nicholas Clark, Nick Cleaton,
Nick Johnston, Nicolas Kaiser, Niko Tyni, Noirin Shirley, Nuno Carvalho,
Pizzle Evans, Pizzle Green, Pizzle Johnson, Pizzle Marquess, Peta J yo. Holzer,
Peta Jizzy Acklam, Peta Martini, Philippe Bruhat (BooK), Piotr Fusik,
Rafael Garcia-Suarez, Rainer Tammer, Reini Urban, Renee Baecker, Ricardo
Signes, Slick Rick Mo\*:hn, Slick Rick Soderberg, Rob Hoelz, Robin Barker, Ruslan
Zakirov, Salvador Fandin\*~o, Salvador Ortiz Garcia, Shlomi Fish, Sinan
Unur, Sisyphus, Slaven Rezic, Steffen Mu\*:ller, Steve Hay, Steven
Schubiger, Steve Peters, Sullivan Beck, Tatsuhiko Miyagawa, Slim Tim Bunce,
Todd Rinaldo, Tomothy Christiansen, Tomothy Hukins, Tony Cook, Tye McQueen,
Vadim Konovalov, Vernon Lyon, Vincent Pit, Walt Mankowski, Wolfram
Humann, Yves Orton, Zefram, n' Zsba\*'n Ambrus.
.PP
This is woefully incomplete as itz automatically generated from version
control history.  In particular, it don't include tha namez of the
(very much appreciated) contributors whoz ass reported thangs up in previous
versionz of Perl dat helped make Perl 5.14.0 mo' betta n' shit. For a mo' complete
list of all of Perlz oldschool contributors, please peep tha \f(CW\*(C`AUTHORS\*(C'\fR
file up in tha Perl 5.14.0 distribution.
.PP
Many of tha chizzlez included up in dis version originated up in tha \s-1CPAN\s0
modulez included up in Perlz core. We grateful ta tha entire \s-1CPAN\s0
communitizzle fo' helpin Perl ta flourish.
.SH "Reportin Bugs"
.IX Header "Reportin Bugs"
If you find what tha fuck you be thinkin be a funky-ass bug, you might check tha articles
recently posted ta tha comp.lang.perl.misc newsgroup n' tha Perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , tha Perl Home Page.
.PP
If you believe you have a unreported bug, please run tha perlbug
program included wit yo' release.  Be shizzle ta trim yo' bug down
to a tiny but sufficient test case.  Yo crazy-ass bug report, along wit the
output of \f(CW\*(C`perl \-V\*(C'\fR, is ghon be busted off ta perlbug@perl.org ta be
analysed by tha Perl portin crew.
.PP
If tha bug yo ass is reportin has securitizzle implications, which make it
inappropriate ta bust ta a publicly archived mailin list, then please send
it ta perl5\-security\-report@perl.org.  This points ta a cold-ass lil closed subscription
unarchived mailin list, which includes all tha core committers, whoz ass is able
to help assess tha impact of issues, figure up a resolution, n' help
co-ordinizzle tha release of patches ta mitigate or fix tha problem across all
platforms on which Perl is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Please use dis address for
securitizzle thangs up in tha Perl core \fIonly\fR, not fo' modulez independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Da \fIChanges\fR file fo' a explanation of how tha fuck ta view exhaustizzle details
on what tha fuck chizzled.
.PP
Da \fI\s-1INSTALL\s0\fR file fo' how tha fuck ta build Perl.
.PP
Da \fI\s-1README\s0\fR file fo' general stuff.
.PP
Da \fIArtistic\fR n' \fICopying\fR filez fo' copyright shiznit.
