.TH GML2GV,GV2GML 1 "24 June 2011"
.SH NAME
gml2gv,gv2gml \- GML-DOT converters
.SH SYNOPSIS
.B gml2gv
[
.B \-?v
]
[
.BI -g gname
]
[
.BI -o outfile
]
[ 
.I files
]
.br
.B gv2gml
[
.B \-?
]
[
.BI -o outfile
]
[ 
.I files
]

.SH DESCRIPTION
.B gml2gv
converts a graph specified up in tha GML format ta a graph up in tha GV (formerly DOT) format. 
.B gv2gml
converts a graph specified up in tha GV format ta a graph up in tha GML format.
.SH OPTIONS
Da followin options is supported:
.TP
.B \-v
Turns on verbose mode
.TP
.B \-?
Prints usage shiznit n' exits.
.TP
.BI \-g "gname"
Da strang \fIgname\fP is used as tha name of tha generated graph.
If multiple graphs is generated, subsequent graphs use tha name
\fIgname\fP appended wit a integer.
.TP
.BI \-o "outfile"
Prints output ta tha file \fIoutfile\fP. If not given, \fBgml2gv\fP
uses stdout.
.TP
.SH OPERANDS
Da followin operand is supported:
.TP 8
.I files
Namez of filez containin 1 or mo' graphs up in GML.
If no
.I files
operand is specified,
the standard input is ghon be used.
.SH RETURN CODES
Return \fB0\fP
if there was no problems durin conversion;
and non-zero if any error occurred.
.SH "LIMITATIONS"
As both tha graph n' graphics modelz of GV n' GML differ significantly, the
conversion be at dopest approximate. In particular, it aint clear how tha fuck multiedges
are differentiated up in GML, so multiedges is pimped up in GV wit no user-available
key fo' realz. Also, no attribute shiznit is lost, up in that
any GML attributes dat aren't converted ta GV equivalents is retained as
attributes up in tha output graph.
.P
At present, 
.B gv2gml
does not support subgraphs n' clusters. In addition, there do not step tha fuck up ta be
a standard mechanizzle fo' specifyin default node n' edge attributes up in GML, so
any attributes is repeated fo' every last muthafuckin node n' edge.
.SH AUTHORS
Emden R. Gansner <erg@research.att.com>
.SH "SEE ALSO"
dot(1), libcgraph(3)
