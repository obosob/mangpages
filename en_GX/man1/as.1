.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AS 1"
.TH AS 1 "2013-08-30" "binutils-2.23.2" "GNU Development Tools"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
AS \- tha portable GNU assembler.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
as [\fB\-a\fR[\fBcdghlns\fR][=\fIfile\fR]] [\fB\-\-alternate\fR] [\fB\-D\fR]
 [\fB\-\-compress\-debug\-sections\fR]  [\fB\-\-nocompress\-debug\-sections\fR]
 [\fB\-\-debug\-prefix\-map\fR \fIold\fR=\fInew\fR]
 [\fB\-\-defsym\fR \fIsym\fR=\fIval\fR] [\fB\-f\fR] [\fB\-g\fR] [\fB\-\-gstabs\fR]
 [\fB\-\-gstabs+\fR] [\fB\-\-gdwarf\-2\fR] [\fB\-\-help\fR] [\fB\-I\fR \fIdir\fR] [\fB\-J\fR]
 [\fB\-K\fR] [\fB\-L\fR] [\fB\-\-listing\-lhs\-width\fR=\fI\s-1NUM\s0\fR]
 [\fB\-\-listing\-lhs\-width2\fR=\fI\s-1NUM\s0\fR] [\fB\-\-listing\-rhs\-width\fR=\fI\s-1NUM\s0\fR]
 [\fB\-\-listing\-cont\-lines\fR=\fI\s-1NUM\s0\fR] [\fB\-\-keep\-locals\fR] [\fB\-o\fR
 \fIobjfile\fR] [\fB\-R\fR] [\fB\-\-reduce\-memory\-overheads\fR] [\fB\-\-statistics\fR]
 [\fB\-v\fR] [\fB\-version\fR] [\fB\-\-version\fR] [\fB\-W\fR] [\fB\-\-warn\fR]
 [\fB\-\-fatal\-warnings\fR] [\fB\-w\fR] [\fB\-x\fR] [\fB\-Z\fR] [\fB@\fR\fI\s-1FILE\s0\fR]
 [\fB\-\-size\-check=[error|warning]\fR]
 [\fB\-\-target\-help\fR] [\fItarget-options\fR]
 [\fB\-\-\fR|\fIfiles\fR ...]
.PP
\&\fITarget AArch64 options:\fR
   [\fB\-EB\fR|\fB\-EL\fR]
.PP
\&\fITarget Alpha options:\fR
   [\fB\-m\fR\fIcpu\fR]
   [\fB\-mdebug\fR | \fB\-no\-mdebug\fR]
   [\fB\-replace\fR | \fB\-noreplace\fR]
   [\fB\-relax\fR] [\fB\-g\fR] [\fB\-G\fR\fIsize\fR]
   [\fB\-F\fR] [\fB\-32addr\fR]
.PP
\&\fITarget \s-1ARC\s0 options:\fR
   [\fB\-marc[5|6|7|8]\fR]
   [\fB\-EB\fR|\fB\-EL\fR]
.PP
\&\fITarget \s-1ARM\s0 options:\fR
   [\fB\-mcpu\fR=\fIprocessor\fR[+\fIextension\fR...]]
   [\fB\-march\fR=\fIarchitecture\fR[+\fIextension\fR...]]
   [\fB\-mfpu\fR=\fIfloating-point-format\fR]
   [\fB\-mfloat\-abi\fR=\fIabi\fR]
   [\fB\-meabi\fR=\fIver\fR]
   [\fB\-mthumb\fR]
   [\fB\-EB\fR|\fB\-EL\fR]
   [\fB\-mapcs\-32\fR|\fB\-mapcs\-26\fR|\fB\-mapcs\-float\fR|
    \fB\-mapcs\-reentrant\fR]
   [\fB\-mthumb\-interwork\fR] [\fB\-k\fR]
.PP
\&\fITarget Blackfin options:\fR
   [\fB\-mcpu\fR=\fIprocessor\fR[\-\fIsirevision\fR]]
   [\fB\-mfdpic\fR]
   [\fB\-mno\-fdpic\fR]
   [\fB\-mnopic\fR]
.PP
\&\fITarget \s-1CRIS\s0 options:\fR
   [\fB\-\-underscore\fR | \fB\-\-no\-underscore\fR]
   [\fB\-\-pic\fR] [\fB\-N\fR]
   [\fB\-\-emulation=criself\fR | \fB\-\-emulation=crisaout\fR]
   [\fB\-\-march=v0_v10\fR | \fB\-\-march=v10\fR | \fB\-\-march=v32\fR | \fB\-\-march=common_v10_v32\fR]
.PP
\&\fITarget D10V options:\fR
   [\fB\-O\fR]
.PP
\&\fITarget D30V options:\fR
   [\fB\-O\fR|\fB\-n\fR|\fB\-N\fR]
.PP
\&\fITarget \s-1EPIPHANY\s0 options:\fR
   [\fB\-mepiphany\fR|\fB\-mepiphany16\fR]
.PP
\&\fITarget H8/300 options:\fR
   [\-h\-tick\-hex]
.PP
\&\fITarget i386 options:\fR
   [\fB\-\-32\fR|\fB\-\-n32\fR|\fB\-\-64\fR] [\fB\-n\fR]
   [\fB\-march\fR=\fI\s-1CPU\s0\fR[+\fI\s-1EXTENSION\s0\fR...]] [\fB\-mtune\fR=\fI\s-1CPU\s0\fR]
.PP
\&\fITarget i960 options:\fR
   [\fB\-ACA\fR|\fB\-ACA_A\fR|\fB\-ACB\fR|\fB\-ACC\fR|\fB\-AKA\fR|\fB\-AKB\fR|
    \fB\-AKC\fR|\fB\-AMC\fR]
   [\fB\-b\fR] [\fB\-no\-relax\fR]
.PP
\&\fITarget \s-1IA\-64\s0 options:\fR
   [\fB\-mconstant\-gp\fR|\fB\-mauto\-pic\fR]
   [\fB\-milp32\fR|\fB\-milp64\fR|\fB\-mlp64\fR|\fB\-mp64\fR]
   [\fB\-mle\fR|\fBmbe\fR]
   [\fB\-mtune=itanium1\fR|\fB\-mtune=itanium2\fR]
   [\fB\-munwind\-check=warning\fR|\fB\-munwind\-check=error\fR]
   [\fB\-mhint.b=ok\fR|\fB\-mhint.b=warning\fR|\fB\-mhint.b=error\fR]
   [\fB\-x\fR|\fB\-xexplicit\fR] [\fB\-xauto\fR] [\fB\-xdebug\fR]
.PP
\&\fITarget \s-1IP2K\s0 options:\fR
   [\fB\-mip2022\fR|\fB\-mip2022ext\fR]
.PP
\&\fITarget M32C options:\fR
   [\fB\-m32c\fR|\fB\-m16c\fR] [\-relax] [\-h\-tick\-hex]
.PP
\&\fITarget M32R options:\fR
   [\fB\-\-m32rx\fR|\fB\-\-[no\-]warn\-explicit\-parallel\-conflicts\fR|
   \fB\-\-W[n]p\fR]
.PP
\&\fITarget M680X0 options:\fR
   [\fB\-l\fR] [\fB\-m68000\fR|\fB\-m68010\fR|\fB\-m68020\fR|...]
.PP
\&\fITarget M68HC11 options:\fR
   [\fB\-m68hc11\fR|\fB\-m68hc12\fR|\fB\-m68hcs12\fR|\fB\-mm9s12x\fR|\fB\-mm9s12xg\fR]
   [\fB\-mshort\fR|\fB\-mlong\fR]
   [\fB\-mshort\-double\fR|\fB\-mlong\-double\fR]
   [\fB\-\-force\-long\-branches\fR] [\fB\-\-short\-branches\fR]
   [\fB\-\-strict\-direct\-mode\fR] [\fB\-\-print\-insn\-syntax\fR]
   [\fB\-\-print\-opcodes\fR] [\fB\-\-generate\-example\fR]
.PP
\&\fITarget \s-1MCORE\s0 options:\fR
   [\fB\-jsri2bsr\fR] [\fB\-sifilter\fR] [\fB\-relax\fR]
   [\fB\-mcpu=[210|340]\fR]
\&\fITarget \s-1MICROBLAZE\s0 options:\fR
.PP
\&\fITarget \s-1MIPS\s0 options:\fR
   [\fB\-nocpp\fR] [\fB\-EL\fR] [\fB\-EB\fR] [\fB\-O\fR[\fIoptimization level\fR]]
   [\fB\-g\fR[\fIdebug level\fR]] [\fB\-G\fR \fInum\fR] [\fB\-KPIC\fR] [\fB\-call_shared\fR]
   [\fB\-non_shared\fR] [\fB\-xgot\fR [\fB\-mvxworks\-pic\fR]
   [\fB\-mabi\fR=\fI\s-1ABI\s0\fR] [\fB\-32\fR] [\fB\-n32\fR] [\fB\-64\fR] [\fB\-mfp32\fR] [\fB\-mgp32\fR]
   [\fB\-march\fR=\fI\s-1CPU\s0\fR] [\fB\-mtune\fR=\fI\s-1CPU\s0\fR] [\fB\-mips1\fR] [\fB\-mips2\fR]
   [\fB\-mips3\fR] [\fB\-mips4\fR] [\fB\-mips5\fR] [\fB\-mips32\fR] [\fB\-mips32r2\fR]
   [\fB\-mips64\fR] [\fB\-mips64r2\fR]
   [\fB\-construct\-floats\fR] [\fB\-no\-construct\-floats\fR]
   [\fB\-trap\fR] [\fB\-no\-break\fR] [\fB\-break\fR] [\fB\-no\-trap\fR]
   [\fB\-mips16\fR] [\fB\-no\-mips16\fR]
   [\fB\-mmicromips\fR] [\fB\-mno\-micromips\fR]
   [\fB\-msmartmips\fR] [\fB\-mno\-smartmips\fR]
   [\fB\-mips3d\fR] [\fB\-no\-mips3d\fR]
   [\fB\-mdmx\fR] [\fB\-no\-mdmx\fR]
   [\fB\-mdsp\fR] [\fB\-mno\-dsp\fR]
   [\fB\-mdspr2\fR] [\fB\-mno\-dspr2\fR]
   [\fB\-mmt\fR] [\fB\-mno\-mt\fR]
   [\fB\-mmcu\fR] [\fB\-mno\-mcu\fR]
   [\fB\-mfix7000\fR] [\fB\-mno\-fix7000\fR]
   [\fB\-mfix\-vr4120\fR] [\fB\-mno\-fix\-vr4120\fR]
   [\fB\-mfix\-vr4130\fR] [\fB\-mno\-fix\-vr4130\fR]
   [\fB\-mdebug\fR] [\fB\-no\-mdebug\fR]
   [\fB\-mpdr\fR] [\fB\-mno\-pdr\fR]
.PP
\&\fITarget \s-1MMIX\s0 options:\fR
   [\fB\-\-fixed\-special\-register\-names\fR] [\fB\-\-globalize\-symbols\fR]
   [\fB\-\-gnu\-syntax\fR] [\fB\-\-relax\fR] [\fB\-\-no\-predefined\-symbols\fR]
   [\fB\-\-no\-expand\fR] [\fB\-\-no\-merge\-gregs\fR] [\fB\-x\fR]
   [\fB\-\-linker\-allocated\-gregs\fR]
.PP
\&\fITarget \s-1PDP11\s0 options:\fR
   [\fB\-mpic\fR|\fB\-mno\-pic\fR] [\fB\-mall\fR] [\fB\-mno\-extensions\fR]
   [\fB\-m\fR\fIextension\fR|\fB\-mno\-\fR\fIextension\fR]
   [\fB\-m\fR\fIcpu\fR] [\fB\-m\fR\fImachine\fR]
.PP
\&\fITarget picoJava options:\fR
   [\fB\-mb\fR|\fB\-me\fR]
.PP
\&\fITarget PowerPC options:\fR
   [\fB\-a32\fR|\fB\-a64\fR]
   [\fB\-mpwrx\fR|\fB\-mpwr2\fR|\fB\-mpwr\fR|\fB\-m601\fR|\fB\-mppc\fR|\fB\-mppc32\fR|\fB\-m603\fR|\fB\-m604\fR|\fB\-m403\fR|\fB\-m405\fR|
    \fB\-m440\fR|\fB\-m464\fR|\fB\-m476\fR|\fB\-m7400\fR|\fB\-m7410\fR|\fB\-m7450\fR|\fB\-m7455\fR|\fB\-m750cl\fR|\fB\-mppc64\fR|
    \fB\-m620\fR|\fB\-me500\fR|\fB\-e500x2\fR|\fB\-me500mc\fR|\fB\-me500mc64\fR|\fB\-me5500\fR|\fB\-me6500\fR|\fB\-mppc64bridge\fR|
    \fB\-mbooke\fR|\fB\-mpower4\fR|\fB\-mpr4\fR|\fB\-mpower5\fR|\fB\-mpwr5\fR|\fB\-mpwr5x\fR|\fB\-mpower6\fR|\fB\-mpwr6\fR|
    \fB\-mpower7\fR|\fB\-mpw7\fR|\fB\-ma2\fR|\fB\-mcell\fR|\fB\-mspe\fR|\fB\-mtitan\fR|\fB\-me300\fR|\fB\-mcom\fR]
   [\fB\-many\fR] [\fB\-maltivec\fR|\fB\-mvsx\fR]
   [\fB\-mregnames\fR|\fB\-mno\-regnames\fR]
   [\fB\-mrelocatable\fR|\fB\-mrelocatable\-lib\fR|\fB\-K \s-1PIC\s0\fR] [\fB\-memb\fR]
   [\fB\-mlil\fR|\fB\-mlil\-endian\fR|\fB\-le\fR|\fB\-mbig\fR|\fB\-mbig\-endian\fR|\fB\-be\fR]
   [\fB\-msolaris\fR|\fB\-mno\-solaris\fR]
   [\fB\-nops=\fR\fIcount\fR]
.PP
\&\fITarget \s-1RX\s0 options:\fR
   [\fB\-mlil\-endian\fR|\fB\-mbig\-endian\fR]
   [\fB\-m32bit\-ints\fR|\fB\-m16bit\-ints\fR]
   [\fB\-m32bit\-doubles\fR|\fB\-m64bit\-doubles\fR]
.PP
\&\fITarget s390 options:\fR
   [\fB\-m31\fR|\fB\-m64\fR] [\fB\-mesa\fR|\fB\-mzarch\fR] [\fB\-march\fR=\fI\s-1CPU\s0\fR]
   [\fB\-mregnames\fR|\fB\-mno\-regnames\fR]
   [\fB\-mwarn\-areg\-zero\fR]
.PP
\&\fITarget \s-1SCORE\s0 options:\fR
   [\fB\-EB\fR][\fB\-EL\fR][\fB\-FIXDD\fR][\fB\-NWARN\fR]
   [\fB\-SCORE5\fR][\fB\-SCORE5U\fR][\fB\-SCORE7\fR][\fB\-SCORE3\fR]
   [\fB\-march=score7\fR][\fB\-march=score3\fR]
   [\fB\-USE_R1\fR][\fB\-KPIC\fR][\fB\-O0\fR][\fB\-G\fR \fInum\fR][\fB\-V\fR]
.PP
\&\fITarget \s-1SPARC\s0 options:\fR
   [\fB\-Av6\fR|\fB\-Av7\fR|\fB\-Av8\fR|\fB\-Asparclet\fR|\fB\-Asparclite\fR
    \fB\-Av8plus\fR|\fB\-Av8plusa\fR|\fB\-Av9\fR|\fB\-Av9a\fR]
   [\fB\-xarch=v8plus\fR|\fB\-xarch=v8plusa\fR] [\fB\-bump\fR]
   [\fB\-32\fR|\fB\-64\fR]
.PP
\&\fITarget \s-1TIC54X\s0 options:\fR
 [\fB\-mcpu=54[123589]\fR|\fB\-mcpu=54[56]lp\fR] [\fB\-mfar\-mode\fR|\fB\-mf\fR]
 [\fB\-merrors\-to\-file\fR \fI<filename>\fR|\fB\-me\fR \fI<filename>\fR]
.PP
\&\fITarget \s-1TIC6X\s0 options:\fR
   [\fB\-march=\fR\fIarch\fR] [\fB\-mbig\-endian\fR|\fB\-mlil\-endian\fR]
   [\fB\-mdsbt\fR|\fB\-mno\-dsbt\fR] [\fB\-mpid=no\fR|\fB\-mpid=near\fR|\fB\-mpid=far\fR]
   [\fB\-mpic\fR|\fB\-mno\-pic\fR]
.PP
\&\fITarget TILE-Gx options:\fR
   [\fB\-m32\fR|\fB\-m64\fR][\fB\-EB\fR][\fB\-EL\fR]
.PP
\&\fITarget Xtensa options:\fR
 [\fB\-\-[no\-]text\-section\-literals\fR] [\fB\-\-[no\-]absolute\-literals\fR]
 [\fB\-\-[no\-]target\-align\fR] [\fB\-\-[no\-]longcalls\fR]
 [\fB\-\-[no\-]transform\fR]
 [\fB\-\-rename\-section\fR \fIoldname\fR=\fInewname\fR]
.PP
\&\fITarget Z80 options:\fR
  [\fB\-z80\fR] [\fB\-r800\fR]
  [ \fB\-ignore\-undocumented\-instructions\fR] [\fB\-Wnud\fR]
  [ \fB\-ignore\-unportable\-instructions\fR] [\fB\-Wnup\fR]
  [ \fB\-warn\-undocumented\-instructions\fR] [\fB\-Wud\fR]
  [ \fB\-warn\-unportable\-instructions\fR] [\fB\-Wup\fR]
  [ \fB\-forbid\-undocumented\-instructions\fR] [\fB\-Fud\fR]
  [ \fB\-forbid\-unportable\-instructions\fR] [\fB\-Fup\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1GNU \s0\fBas\fR is straight-up a cold-ass lil crew of assemblers.
If you use (or have used) tha \s-1GNU\s0 assembla on one architecture, you
should find a gangbangin' fairly similar environment when you use it on another
architecture.  Each version has much up in common wit tha others,
includin object file formats, most assembla directives (often called
\&\fIpseudo-ops\fR) n' assembla syntax.
.PP
\&\fBas\fR is primarily intended ta assemble tha output of the
\&\s-1GNU C\s0 compila \f(CW\*(C`gcc\*(C'\fR fo' use by tha linker
\&\f(CW\*(C`ld\*(C'\fR.  Nevertheless, we've tried ta make \fBas\fR
assemble erectly every last muthafuckin thang dat other assemblaz fo' tha same
machine would assemble.
Any exceptions is documented explicitly.
This don't mean \fBas\fR always uses tha same ol' dirty syntax as another
assembla fo' tha same architecture; fo' example, we know of several
incompatible versionz of 680x0 assembly language syntax.
.PP
Each time you run \fBas\fR it assemblez exactly one source
program.  Da source program is made up of one or mo' files.
(Da standard input be also a gangbangin' file.)
.PP
Yo ass give \fBas\fR a cold-ass lil command line dat has zero or mo' input file
names.  Da input filez is read (from left file name ta right).  A
command line argument (in any position) dat has no special meaning
is taken ta be a input file name.
.PP
If you give \fBas\fR no file names it attempts ta read one input file
from tha \fBas\fR standard input, which is normally yo' terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  You
may gotta type \fBctl-D\fR ta tell \fBas\fR there is no mo' program
to assemble.
.PP
Use \fB\-\-\fR if you need ta explicitly name tha standard input file
in yo' command line.
.PP
If tha source is empty, \fBas\fR produces a small, empty object
file.
.PP
\&\fBas\fR may write warnings n' error lyrics ta tha standard error
file (usually yo' terminal).  This should not happen when  a cold-ass lil compiler
runs \fBas\fR automatically.  Warnings report a assumption made so
that \fBas\fR could keep assemblin a gangbangin' flawed program; errors report a
grave problem dat stops tha assembly.
.PP
If yo ass is invokin \fBas\fR via tha \s-1GNU C\s0 compiler,
you can use tha \fB\-Wa\fR option ta pass arguments all up in ta tha assembler.
Da assembla arguments must be separated from each other (and tha \fB\-Wa\fR)
by commas.  For example:
.PP
.Vb 1
\&        gcc \-c \-g \-O \-Wa,\-alh,\-L file.c
.Ve
.PP
This passes two options ta tha assembler: \fB\-alh\fR (emit a listin to
standard output wit high-level n' assembly source) n' \fB\-L\fR (retain
local symbols up in tha symbol table).
.PP
Usually you do not need ta use dis \fB\-Wa\fR mechanism, since nuff compiler
command-line options is automatically passed ta tha assembla by tha compiler.
(Yo ass can call tha \s-1GNU\s0 compila driver wit tha \fB\-v\fR option ta see
precisely what tha fuck options it passes ta each compilation pass, includin the
assembler.)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB@\fR\fIfile\fR" 4
.IX Item "@file"
Read command-line options from \fIfile\fR.  Da options read are
inserted up in place of tha original gangsta @\fIfile\fR option. I aint talkin' bout chicken n' gravy biatch.  If \fIfile\fR
does not exist, or cannot be read, then tha option is ghon be treated
literally, n' not removed.
.Sp
Options up in \fIfile\fR is separated by whitespace.  A whitespace
characta may be included up in a option by surroundin tha entire
option up in either single or double quotes.  Any characta (includin a
backslash) may be included by prefixin tha characta ta be included
with a funky-ass backslash.  Da \fIfile\fR may itself contain additional
@\fIfile\fR options; any such options is ghon be processed recursively.
.IP "\fB\-a[cdghlmns]\fR" 4
.IX Item "-a[cdghlmns]"
Turn on listings, up in any of a variety of ways:
.RS 4
.IP "\fB\-ac\fR" 4
.IX Item "-ac"
omit false conditionals
.IP "\fB\-ad\fR" 4
.IX Item "-ad"
omit debuggin directives
.IP "\fB\-ag\fR" 4
.IX Item "-ag"
include general shiznit, like as version n' options passed
.IP "\fB\-ah\fR" 4
.IX Item "-ah"
include high-level source
.IP "\fB\-al\fR" 4
.IX Item "-al"
include assembly
.IP "\fB\-am\fR" 4
.IX Item "-am"
include macro expansions
.IP "\fB\-an\fR" 4
.IX Item "-an"
omit forms processing
.IP "\fB\-as\fR" 4
.IX Item "-as"
include symbols
.IP "\fB=file\fR" 4
.IX Item "=file"
set tha name of tha listin file
.RE
.RS 4
.Sp
Yo ass may combine these options; fo' example, use \fB\-aln\fR fo' assembly
listin without forms processing.  Da \fB=file\fR option, if used, must be
the last one.  By itself, \fB\-a\fR defaults ta \fB\-ahls\fR.
.RE
.IP "\fB\-\-alternate\fR" 4
.IX Item "--alternate"
Begin up in alternate macro mode.
.IP "\fB\-\-compress\-debug\-sections\fR" 4
.IX Item "--compress-debug-sections"
Compress \s-1DWARF\s0 debug sections rockin zlib.  Da debug sections is renamed
to begin wit \fB.zdebug\fR, n' tha resultin object file may not be
compatible wit olda linkers n' object file utilities.
.IP "\fB\-\-nocompress\-debug\-sections\fR" 4
.IX Item "--nocompress-debug-sections"
Do not compress \s-1DWARF\s0 debug sections.  This is tha default.
.IP "\fB\-D\fR" 4
.IX Item "-D"
Ignored. Y'all KNOW dat shit, muthafucka!  This option be accepted fo' script compatibilitizzle wit calls to
other assemblers.
.IP "\fB\-\-debug\-prefix\-map\fR \fIold\fR\fB=\fR\fInew\fR" 4
.IX Item "--debug-prefix-map old=new"
When assemblin filez up in directory \fI\fIold\fI\fR, record debugging
information describin dem as up in \fI\fInew\fI\fR instead.
.IP "\fB\-\-defsym\fR \fIsym\fR\fB=\fR\fIvalue\fR" 4
.IX Item "--defsym sym=value"
Define tha symbol \fIsym\fR ta be \fIvalue\fR before assemblin tha input file.
\&\fIvalue\fR must be a integer constant.  As up in C, a leadin \fB0x\fR
indicates a hexadecimal value, n' a leadin \fB0\fR indicates a octal
value.  Da value of tha symbol can be overridden inside a source file via the
use of a \f(CW\*(C`.set\*(C'\fR pseudo-op.
.IP "\fB\-f\fR" 4
.IX Item "-f"
\&\*(L"fast\*(R"\-\-\-skip whitespace n' comment preprocessin (assume source is
compila output).
.IP "\fB\-g\fR" 4
.IX Item "-g"
.PD 0
.IP "\fB\-\-gen\-debug\fR" 4
.IX Item "--gen-debug"
.PD
Generate debuggin shiznit fo' each assembla source line rockin whichever
debug format is preferred by tha target.  This currently means either \s-1STABS,
ECOFF\s0 or \s-1DWARF2.\s0
.IP "\fB\-\-gstabs\fR" 4
.IX Item "--gstabs"
Generate stabs debuggin shiznit fo' each assembla line.  This
may help debuggin assembla code, if tha debugger can handle dat shit.
.IP "\fB\-\-gstabs+\fR" 4
.IX Item "--gstabs+"
Generate stabs debuggin shiznit fo' each assembla line, wit \s-1GNU\s0
extensions dat probably only gdb can handle, n' dat could make other
debuggers crash or refuse ta read yo' program.  This
may help debuggin assembla code.  Currently tha only \s-1GNU\s0 extension is
the location of tha current hustlin directory at assemblin time.
.IP "\fB\-\-gdwarf\-2\fR" 4
.IX Item "--gdwarf-2"
Generate \s-1DWARF2\s0 debuggin shiznit fo' each assembla line.  This
may help debuggin assembla code, if tha debugger can handle dat shit.  Note\-\-\-this
option is only supported by some targets, not all of em.
.IP "\fB\-\-size\-check=error\fR" 4
.IX Item "--size-check=error"
.PD 0
.IP "\fB\-\-size\-check=warning\fR" 4
.IX Item "--size-check=warning"
.PD
Issue a error or warnin fo' invalid \s-1ELF \s0.size directive.
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Print a summary of tha command line options n' exit.
.IP "\fB\-\-target\-help\fR" 4
.IX Item "--target-help"
Print a summary of all target specific options n' exit.
.IP "\fB\-I\fR \fIdir\fR" 4
.IX Item "-I dir"
Add directory \fIdir\fR ta tha search list fo' \f(CW\*(C`.include\*(C'\fR directives.
.IP "\fB\-J\fR" 4
.IX Item "-J"
Don't warn bout signed overflow.
.IP "\fB\-K\fR" 4
.IX Item "-K"
Issue warnings when difference tablez altered fo' long displacements.
.IP "\fB\-L\fR" 4
.IX Item "-L"
.PD 0
.IP "\fB\-\-keep\-locals\fR" 4
.IX Item "--keep-locals"
.PD
Keep (in tha symbol table) local symbols.  These symbols start with
system-specific local label prefixes, typically \fB.L\fR fo' \s-1ELF\s0 systems
or \fBL\fR fo' traditionizzle a.out systems.
.IP "\fB\-\-listing\-lhs\-width=\fR\fInumber\fR" 4
.IX Item "--listing-lhs-width=number"
Set tha maximum width, up in lyrics, of tha output data column fo' a assembler
listin ta \fInumber\fR.
.IP "\fB\-\-listing\-lhs\-width2=\fR\fInumber\fR" 4
.IX Item "--listing-lhs-width2=number"
Set tha maximum width, up in lyrics, of tha output data column fo' continuation
lines up in a assembla listin ta \fInumber\fR.
.IP "\fB\-\-listing\-rhs\-width=\fR\fInumber\fR" 4
.IX Item "--listing-rhs-width=number"
Set tha maximum width of a input source line, as displayed up in a listing, to
\&\fInumber\fR bytes.
.IP "\fB\-\-listing\-cont\-lines=\fR\fInumber\fR" 4
.IX Item "--listing-cont-lines=number"
Set tha maximum number of lines printed up in a listin fo' a single line of input
to \fInumber\fR + 1.
.IP "\fB\-o\fR \fIobjfile\fR" 4
.IX Item "-o objfile"
Name tha object-file output from \fBas\fR \fIobjfile\fR.
.IP "\fB\-R\fR" 4
.IX Item "-R"
Fold tha data section tha fuck into tha text section.
.Sp
Set tha default size of \s-1GAS\s0z hash tablez ta a prime number close to
\&\fInumber\fR.  Increasin dis value can reduce tha length of time it takes the
assembla ta big-ass up its tasks, all up in tha expense of increasin tha assembler's
memory requirements, n' you can put dat on yo' toast.  Similarly reducin dis value can reduce tha memory
requirements all up in tha expense of speed.
.IP "\fB\-\-reduce\-memory\-overheads\fR" 4
.IX Item "--reduce-memory-overheads"
This option reduces \s-1GAS\s0z memory requirements, all up in tha expense of makin the
assembly processes slower n' shit.  Currently dis switch be a synonym for
\&\fB\-\-hash\-size=4051\fR yo, but up in tha future it may have other effects as well.
.IP "\fB\-\-statistics\fR" 4
.IX Item "--statistics"
Print tha maximum space (in bytes) n' total time (in seconds) used by
assembly.
.IP "\fB\-\-strip\-local\-absolute\fR" 4
.IX Item "--strip-local-absolute"
Remove local absolute symbols from tha outgoin symbol table.
.IP "\fB\-v\fR" 4
.IX Item "-v"
.PD 0
.IP "\fB\-version\fR" 4
.IX Item "-version"
.PD
Print tha \fBas\fR version.
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
Print tha \fBas\fR version n' exit.
.IP "\fB\-W\fR" 4
.IX Item "-W"
.PD 0
.IP "\fB\-\-no\-warn\fR" 4
.IX Item "--no-warn"
.PD
Suppress warnin lyrics.
.IP "\fB\-\-fatal\-warnings\fR" 4
.IX Item "--fatal-warnings"
Treat warnings as errors.
.IP "\fB\-\-warn\fR" 4
.IX Item "--warn"
Don't suppress warnin lyrics or treat dem as errors.
.IP "\fB\-w\fR" 4
.IX Item "-w"
Ignored.
.IP "\fB\-x\fR" 4
.IX Item "-x"
Ignored.
.IP "\fB\-Z\fR" 4
.IX Item "-Z"
Generate a object file even afta errors.
.IP "\fB\-\- |\fR \fIfiles\fR \fB...\fR" 4
.IX Item "-- | filez ..."
Standard input, or source filez ta assemble.
.PP
Da followin options is available when as is configured fo' the
64\-bit mode of tha \s-1ARM\s0 Architecture (AArch64).
.IP "\fB\-EB\fR" 4
.IX Item "-EB"
This option specifies dat tha output generated by tha assembla should
be marked as bein encoded fo' a funky-ass big-endian processor.
.IP "\fB\-EL\fR" 4
.IX Item "-EL"
This option specifies dat tha output generated by tha assembla should
be marked as bein encoded fo' a lil-endian processor.
.PP
Da followin options is available when as is configured fo' a Alpha
processor.
.IP "\fB\-m\fR\fIcpu\fR" 4
.IX Item "-mcpu"
This option specifies tha target processor. Shiiit, dis aint no joke.  If a attempt is made to
assemble a instruction which aint gonna execute on tha target processor,
the assembla may either expand tha instruction as a macro or issue an
error message.  This option is equivalent ta tha \f(CW\*(C`.arch\*(C'\fR directive.
.Sp
Da followin processor names is recognized: 
\&\f(CW21064\fR,
\&\f(CW\*(C`21064a\*(C'\fR,
\&\f(CW21066\fR,
\&\f(CW21068\fR,
\&\f(CW21164\fR,
\&\f(CW\*(C`21164a\*(C'\fR,
\&\f(CW\*(C`21164pc\*(C'\fR,
\&\f(CW21264\fR,
\&\f(CW\*(C`21264a\*(C'\fR,
\&\f(CW\*(C`21264b\*(C'\fR,
\&\f(CW\*(C`ev4\*(C'\fR,
\&\f(CW\*(C`ev5\*(C'\fR,
\&\f(CW\*(C`lca45\*(C'\fR,
\&\f(CW\*(C`ev5\*(C'\fR,
\&\f(CW\*(C`ev56\*(C'\fR,
\&\f(CW\*(C`pca56\*(C'\fR,
\&\f(CW\*(C`ev6\*(C'\fR,
\&\f(CW\*(C`ev67\*(C'\fR,
\&\f(CW\*(C`ev68\*(C'\fR.
Da special name \f(CW\*(C`all\*(C'\fR may be used ta allow tha assembla ta accept
instructions valid fo' any Alpha processor.
.Sp
In order ta support existin practice up in \s-1OSF/1\s0 wit respect ta \f(CW\*(C`.arch\*(C'\fR,
and existin practice within \fB\s-1MILO\s0\fR (the Linux \s-1ARC\s0 bootloader), the
numbered processor names (e.g. 21064) enable tha processor-specific PALcode
instructions, while tha \*(L"electro-vlasic\*(R" names (e.g. \f(CW\*(C`ev4\*(C'\fR) do not.
.IP "\fB\-mdebug\fR" 4
.IX Item "-mdebug"
.PD 0
.IP "\fB\-no\-mdebug\fR" 4
.IX Item "-no-mdebug"
.PD
Enablez or disablez tha generation of \f(CW\*(C`.mdebug\*(C'\fR encapsulation for
stabs directives n' procedure descriptors.  Da default is ta automatically
enable \f(CW\*(C`.mdebug\*(C'\fR when tha straight-up original gangsta stabs directizzle is seen.
.IP "\fB\-relax\fR" 4
.IX Item "-relax"
This option forces all relocations ta be put tha fuck into tha object file, instead
of savin space n' resolvin some relocations at assembly time.  Note that
this option do not propagate all symbol arithmetic tha fuck into tha object file,
because not all symbol arithmetic can be represented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  But fuck dat shiznit yo, tha word on tha street is dat tha option
can still be useful up in specific applications.
.IP "\fB\-replace\fR" 4
.IX Item "-replace"
.PD 0
.IP "\fB\-noreplace\fR" 4
.IX Item "-noreplace"
.PD
Enablez or disablez tha optimization of procedure calls, both at assemblage
and at link time.  These options is only available fo' \s-1VMS\s0 targets and
\&\f(CW\*(C`\-replace\*(C'\fR is tha default.  See section 1.4.1 of tha OpenVMS Linker
Utilitizzle Manual.
.IP "\fB\-g\fR" 4
.IX Item "-g"
This option is used when tha compila generates debug shiznit. I aint talkin' bout chicken n' gravy biatch.  When
\&\fBgcc\fR is rockin \fBmips-tfile\fR ta generate debug
information fo' \s-1ECOFF,\s0 local labels must be passed all up in ta tha object
file.  Otherwise dis option has no effect.
.IP "\fB\-G\fR\fIsize\fR" 4
.IX Item "-Gsize"
A local common symbol larger than \fIsize\fR is placed up in \f(CW\*(C`.bss\*(C'\fR,
while smalla symbols is placed up in \f(CW\*(C`.sbss\*(C'\fR.
.IP "\fB\-F\fR" 4
.IX Item "-F"
.PD 0
.IP "\fB\-32addr\fR" 4
.IX Item "-32addr"
.PD
These options is ignored fo' backward compatibility.
.PP
Da followin options is available when as is configured for
an \s-1ARC\s0 processor.
.IP "\fB\-marc[5|6|7|8]\fR" 4
.IX Item "-marc[5|6|7|8]"
This option selects tha core processor variant.
.IP "\fB\-EB | \-EL\fR" 4
.IX Item "-EB | -EL"
Select either big-endian (\-EB) or lil-endian (\-EL) output.
.PP
Da followin options is available when as is configured fo' tha \s-1ARM\s0
processor crew.
.IP "\fB\-mcpu=\fR\fIprocessor\fR\fB[+\fR\fIextension\fR\fB...]\fR" 4
.IX Item "-mcpu=processor[+extension...]"
Specify which \s-1ARM\s0 processor variant is tha target.
.IP "\fB\-march=\fR\fIarchitecture\fR\fB[+\fR\fIextension\fR\fB...]\fR" 4
.IX Item "-march=architecture[+extension...]"
Specify which \s-1ARM\s0 architecture variant is used by tha target.
.IP "\fB\-mfpu=\fR\fIfloating-point-format\fR" 4
.IX Item "-mfpu=floating-point-format"
Select which Floatin Point architecture is tha target.
.IP "\fB\-mfloat\-abi=\fR\fIabi\fR" 4
.IX Item "-mfloat-abi=abi"
Select which floatin point \s-1ABI\s0 is up in use.
.IP "\fB\-mthumb\fR" 4
.IX Item "-mthumb"
Enable Thumb only instruction decoding.
.IP "\fB\-mapcs\-32 | \-mapcs\-26 | \-mapcs\-float | \-mapcs\-reentrant\fR" 4
.IX Item "-mapcs-32 | -mapcs-26 | -mapcs-float | -mapcs-reentrant"
Select which procedure callin convention is up in use.
.IP "\fB\-EB | \-EL\fR" 4
.IX Item "-EB | -EL"
Select either big-endian (\-EB) or lil-endian (\-EL) output.
.IP "\fB\-mthumb\-interwork\fR" 4
.IX Item "-mthumb-interwork"
Specify dat tha code has been generated wit interworkin between Thumb and
\&\s-1ARM\s0 code up in mind.
.IP "\fB\-k\fR" 4
.IX Item "-k"
Specify dat \s-1PIC\s0 code has been generated.
.PP
Da followin options is available when as is configured for
the Blackfin processor crew.
.IP "\fB\-mcpu=\fR\fIprocessor\fR[\fB\-\fR\fIsirevision\fR]" 4
.IX Item "-mcpu=processor[-sirevision]"
This option specifies tha target processor. Shiiit, dis aint no joke.  Da optionizzle \fIsirevision\fR
is not used up in assembla n' shit.  It aint nuthin but here such dat \s-1GCC\s0 can easily pass down its
\&\f(CW\*(C`\-mcpu=\*(C'\fR option. I aint talkin' bout chicken n' gravy biatch.  Da assembla will issue an
error message if a attempt is made ta assemble a instruction which
will not execute on tha target processor. Shiiit, dis aint no joke.  Da followin processor names are
recognized: 
\&\f(CW\*(C`bf504\*(C'\fR,
\&\f(CW\*(C`bf506\*(C'\fR,
\&\f(CW\*(C`bf512\*(C'\fR,
\&\f(CW\*(C`bf514\*(C'\fR,
\&\f(CW\*(C`bf516\*(C'\fR,
\&\f(CW\*(C`bf518\*(C'\fR,
\&\f(CW\*(C`bf522\*(C'\fR,
\&\f(CW\*(C`bf523\*(C'\fR,
\&\f(CW\*(C`bf524\*(C'\fR,
\&\f(CW\*(C`bf525\*(C'\fR,
\&\f(CW\*(C`bf526\*(C'\fR,
\&\f(CW\*(C`bf527\*(C'\fR,
\&\f(CW\*(C`bf531\*(C'\fR,
\&\f(CW\*(C`bf532\*(C'\fR,
\&\f(CW\*(C`bf533\*(C'\fR,
\&\f(CW\*(C`bf534\*(C'\fR,
\&\f(CW\*(C`bf535\*(C'\fR (not implemented yet),
\&\f(CW\*(C`bf536\*(C'\fR,
\&\f(CW\*(C`bf537\*(C'\fR,
\&\f(CW\*(C`bf538\*(C'\fR,
\&\f(CW\*(C`bf539\*(C'\fR,
\&\f(CW\*(C`bf542\*(C'\fR,
\&\f(CW\*(C`bf542m\*(C'\fR,
\&\f(CW\*(C`bf544\*(C'\fR,
\&\f(CW\*(C`bf544m\*(C'\fR,
\&\f(CW\*(C`bf547\*(C'\fR,
\&\f(CW\*(C`bf547m\*(C'\fR,
\&\f(CW\*(C`bf548\*(C'\fR,
\&\f(CW\*(C`bf548m\*(C'\fR,
\&\f(CW\*(C`bf549\*(C'\fR,
\&\f(CW\*(C`bf549m\*(C'\fR,
\&\f(CW\*(C`bf561\*(C'\fR,
and
\&\f(CW\*(C`bf592\*(C'\fR.
.IP "\fB\-mfdpic\fR" 4
.IX Item "-mfdpic"
Assemble fo' tha \s-1FDPIC ABI.\s0
.IP "\fB\-mno\-fdpic\fR" 4
.IX Item "-mno-fdpic"
.PD 0
.IP "\fB\-mnopic\fR" 4
.IX Item "-mnopic"
.PD
Disable \-mfdpic.
.PP
See tha info pages fo' documentation of tha CRIS-specific options.
.PP
Da followin options is available when as is configured for
a D10V processor.
.IP "\fB\-O\fR" 4
.IX Item "-O"
Optimize output by parallelizin instructions.
.PP
Da followin options is available when as is configured fo' a D30V
processor.
.IP "\fB\-O\fR" 4
.IX Item "-O"
Optimize output by parallelizin instructions.
.IP "\fB\-n\fR" 4
.IX Item "-n"
Warn when nops is generated.
.IP "\fB\-N\fR" 4
.IX Item "-N"
Warn when a nop afta a 32\-bit multiply instruction is generated.
.PP
Da followin options is available when as is configured for
an Epiphany processor.
.IP "\fB\-mepiphany\fR" 4
.IX Item "-mepiphany"
Specifies dat tha both 32 n' 16 bit instructions is allowed. Y'all KNOW dat shit, muthafucka!  This is the
default behavior.
.IP "\fB\-mepiphany16\fR" 4
.IX Item "-mepiphany16"
Restricts tha permitted instructions ta just tha 16 bit set.
.PP
Da followin options is available when as is configured for
an i386 processor.
.IP "\fB\-\-32 | \-\-x32 | \-\-64\fR" 4
.IX Item "--32 | --x32 | --64"
Select tha word size, either 32 bits or 64 bits, n' you can put dat on yo' toast.  \fB\-\-32\fR
implies Intel i386 architecture, while \fB\-\-x32\fR n' \fB\-\-64\fR
imply \s-1AMD\s0 x86\-64 architecture wit 32\-bit or 64\-bit word-size
respectively.
.Sp
These options is only available wit tha \s-1ELF\s0 object file format, and
require dat tha necessary \s-1BFD\s0 support has been included (on a 32\-bit
platform you gotta add \-\-enable\-64\-bit\-bfd ta configure enable 64\-bit
usage n' use x86\-64 as target platform).
.IP "\fB\-n\fR" 4
.IX Item "-n"
By default, x86 \s-1GAS\s0 replaces multiple nop instructions used for
alignment within code sections wit multi-byte nop instructions such
as leal 0(%esi,1),%esi.  This switch disablez tha optimization.
.IP "\fB\-\-divide\fR" 4
.IX Item "--divide"
On SVR4\-derived platforms, tha characta \fB/\fR is treated as a cold-ass lil comment
character, which means dat it cannot be used up in expressions.  The
\&\fB\-\-divide\fR option turns \fB/\fR tha fuck into a aiiight character n' shit.  This do
not disable \fB/\fR all up in tha beginnin of a line startin a cold-ass lil comment, or
affect rockin \fB#\fR fo' startin a cold-ass lil comment.
.IP "\fB\-march=\fR\fI\s-1CPU\s0\fR\fB[+\fR\fI\s-1EXTENSION\s0\fR\fB...]\fR" 4
.IX Item "-march=CPU[+EXTENSION...]"
This option specifies tha target processor. Shiiit, dis aint no joke.  Da assembla will
issue a error message if a attempt is made ta assemble a instruction
which aint gonna execute on tha target processor. Shiiit, dis aint no joke.  Da following
processor names is recognized: 
\&\f(CW\*(C`i8086\*(C'\fR,
\&\f(CW\*(C`i186\*(C'\fR,
\&\f(CW\*(C`i286\*(C'\fR,
\&\f(CW\*(C`i386\*(C'\fR,
\&\f(CW\*(C`i486\*(C'\fR,
\&\f(CW\*(C`i586\*(C'\fR,
\&\f(CW\*(C`i686\*(C'\fR,
\&\f(CW\*(C`pentium\*(C'\fR,
\&\f(CW\*(C`pentiumpro\*(C'\fR,
\&\f(CW\*(C`pentiumii\*(C'\fR,
\&\f(CW\*(C`pentiumiii\*(C'\fR,
\&\f(CW\*(C`pentium4\*(C'\fR,
\&\f(CW\*(C`prescott\*(C'\fR,
\&\f(CW\*(C`nocona\*(C'\fR,
\&\f(CW\*(C`core\*(C'\fR,
\&\f(CW\*(C`core2\*(C'\fR,
\&\f(CW\*(C`corei7\*(C'\fR,
\&\f(CW\*(C`l1om\*(C'\fR,
\&\f(CW\*(C`k1om\*(C'\fR,
\&\f(CW\*(C`k6\*(C'\fR,
\&\f(CW\*(C`k6_2\*(C'\fR,
\&\f(CW\*(C`athlon\*(C'\fR,
\&\f(CW\*(C`opteron\*(C'\fR,
\&\f(CW\*(C`k8\*(C'\fR,
\&\f(CW\*(C`amdfam10\*(C'\fR,
\&\f(CW\*(C`bdver1\*(C'\fR,
\&\f(CW\*(C`bdver2\*(C'\fR,
\&\f(CW\*(C`bdver3\*(C'\fR,
\&\f(CW\*(C`btver1\*(C'\fR,
\&\f(CW\*(C`btver2\*(C'\fR,
\&\f(CW\*(C`generic32\*(C'\fR and
\&\f(CW\*(C`generic64\*(C'\fR.
.Sp
In addizzle ta tha basic instruction set, tha assembla can be holla'd at ta 
accept various extension mnemonics.  For example,
\&\f(CW\*(C`\-march=i686+sse4+vmx\*(C'\fR extendz \fIi686\fR wit \fIsse4\fR and
\&\fIvmx\fR.  Da followin extensions is currently supported:
\&\f(CW8087\fR,
\&\f(CW287\fR,
\&\f(CW387\fR,
\&\f(CW\*(C`no87\*(C'\fR,
\&\f(CW\*(C`mmx\*(C'\fR,
\&\f(CW\*(C`nommx\*(C'\fR,
\&\f(CW\*(C`sse\*(C'\fR,
\&\f(CW\*(C`sse2\*(C'\fR,
\&\f(CW\*(C`sse3\*(C'\fR,
\&\f(CW\*(C`ssse3\*(C'\fR,
\&\f(CW\*(C`sse4.1\*(C'\fR,
\&\f(CW\*(C`sse4.2\*(C'\fR,
\&\f(CW\*(C`sse4\*(C'\fR,
\&\f(CW\*(C`nosse\*(C'\fR,
\&\f(CW\*(C`avx\*(C'\fR,
\&\f(CW\*(C`avx2\*(C'\fR,
\&\f(CW\*(C`adx\*(C'\fR,
\&\f(CW\*(C`rdseed\*(C'\fR,
\&\f(CW\*(C`prfchw\*(C'\fR,
\&\f(CW\*(C`noavx\*(C'\fR,
\&\f(CW\*(C`vmx\*(C'\fR,
\&\f(CW\*(C`vmfunc\*(C'\fR,
\&\f(CW\*(C`smx\*(C'\fR,
\&\f(CW\*(C`xsave\*(C'\fR,
\&\f(CW\*(C`xsaveopt\*(C'\fR,
\&\f(CW\*(C`aes\*(C'\fR,
\&\f(CW\*(C`pclmul\*(C'\fR,
\&\f(CW\*(C`fsgsbase\*(C'\fR,
\&\f(CW\*(C`rdrnd\*(C'\fR,
\&\f(CW\*(C`f16c\*(C'\fR,
\&\f(CW\*(C`bmi2\*(C'\fR,
\&\f(CW\*(C`fma\*(C'\fR,
\&\f(CW\*(C`movbe\*(C'\fR,
\&\f(CW\*(C`ept\*(C'\fR,
\&\f(CW\*(C`lzcnt\*(C'\fR,
\&\f(CW\*(C`hle\*(C'\fR,
\&\f(CW\*(C`rtm\*(C'\fR,
\&\f(CW\*(C`invpcid\*(C'\fR,
\&\f(CW\*(C`clflush\*(C'\fR,
\&\f(CW\*(C`lwp\*(C'\fR,
\&\f(CW\*(C`fma4\*(C'\fR,
\&\f(CW\*(C`xop\*(C'\fR,
\&\f(CW\*(C`syscall\*(C'\fR,
\&\f(CW\*(C`rdtscp\*(C'\fR,
\&\f(CW\*(C`3dnow\*(C'\fR,
\&\f(CW\*(C`3dnowa\*(C'\fR,
\&\f(CW\*(C`sse4a\*(C'\fR,
\&\f(CW\*(C`sse5\*(C'\fR,
\&\f(CW\*(C`svme\*(C'\fR,
\&\f(CW\*(C`abm\*(C'\fR and
\&\f(CW\*(C`padlock\*(C'\fR.
Note dat rather than extendin a funky-ass basic instruction set, tha extension
mnemonics startin wit \f(CW\*(C`no\*(C'\fR revoke tha respectizzle functionality.
.Sp
When tha \f(CW\*(C`.arch\*(C'\fR directizzle is used wit \fB\-march\fR, the
\&\f(CW\*(C`.arch\*(C'\fR directizzle will take precedent.
.IP "\fB\-mtune=\fR\fI\s-1CPU\s0\fR" 4
.IX Item "-mtune=CPU"
This option specifies a processor ta optimize for. Shiiit, dis aint no joke. When used in
conjunction wit tha \fB\-march\fR option, only instructions
of tha processor specified by tha \fB\-march\fR option will be
generated.
.Sp
Valid \fI\s-1CPU\s0\fR joints is identical ta tha processor list of
\&\fB\-march=\fR\fI\s-1CPU\s0\fR.
.IP "\fB\-msse2avx\fR" 4
.IX Item "-msse2avx"
This option specifies dat tha assembla should encode \s-1SSE\s0 instructions
with \s-1VEX\s0 prefix.
.IP "\fB\-msse\-check=\fR\fInone\fR" 4
.IX Item "-msse-check=none"
.PD 0
.IP "\fB\-msse\-check=\fR\fIwarning\fR" 4
.IX Item "-msse-check=warning"
.IP "\fB\-msse\-check=\fR\fIerror\fR" 4
.IX Item "-msse-check=error"
.PD
These options control if tha assembla should check \s-1SSE\s0 intructions.
\&\fB\-msse\-check=\fR\fInone\fR will make tha assembla not ta check \s-1SSE\s0
instructions,  which is tha default.  \fB\-msse\-check=\fR\fIwarning\fR
will make tha assembla issue a warnin fo' any \s-1SSE\s0 intruction.
\&\fB\-msse\-check=\fR\fIerror\fR will make tha assembla issue a error
for any \s-1SSE\s0 intruction.
.IP "\fB\-mavxscalar=\fR\fI128\fR" 4
.IX Item "-mavxscalar=128"
.PD 0
.IP "\fB\-mavxscalar=\fR\fI256\fR" 4
.IX Item "-mavxscalar=256"
.PD
These options control how tha fuck tha assembla should encode scalar \s-1AVX\s0
instructions.  \fB\-mavxscalar=\fR\fI128\fR will encode scalar
\&\s-1AVX\s0 instructions wit 128bit vector length, which is tha default.
\&\fB\-mavxscalar=\fR\fI256\fR will encode scalar \s-1AVX\s0 instructions
with 256bit vector length.
.IP "\fB\-mmnemonic=\fR\fIatt\fR" 4
.IX Item "-mmnemonic=att"
.PD 0
.IP "\fB\-mmnemonic=\fR\fIintel\fR" 4
.IX Item "-mmnemonic=intel"
.PD
This option specifies instruction mnemonic fo' matchin instructions. 
Da \f(CW\*(C`.att_mnemonic\*(C'\fR n' \f(CW\*(C`.intel_mnemonic\*(C'\fR directives will
take precedent.
.IP "\fB\-msyntax=\fR\fIatt\fR" 4
.IX Item "-msyntax=att"
.PD 0
.IP "\fB\-msyntax=\fR\fIintel\fR" 4
.IX Item "-msyntax=intel"
.PD
This option specifies instruction syntax when processin instructions. 
Da \f(CW\*(C`.att_syntax\*(C'\fR n' \f(CW\*(C`.intel_syntax\*(C'\fR directives will
take precedent.
.IP "\fB\-mnaked\-reg\fR" 4
.IX Item "-mnaked-reg"
This opetion specifies dat registas don't require a \fB%\fR prefix.
Da \f(CW\*(C`.att_syntax\*(C'\fR n' \f(CW\*(C`.intel_syntax\*(C'\fR directives will take precedent.
.PP
Da followin options is available when as is configured fo' the
Intel 80960 processor.
.IP "\fB\-ACA | \-ACA_A | \-ACB | \-ACC | \-AKA | \-AKB | \-AKC | \-AMC\fR" 4
.IX Item "-ACA | -ACA_A | -ACB | -ACC | -AKA | -AKB | -AKC | -AMC"
Specify which variant of tha 960 architecture is tha target.
.IP "\fB\-b\fR" 4
.IX Item "-b"
Add code ta collect statistics bout branches taken.
.IP "\fB\-no\-relax\fR" 4
.IX Item "-no-relax"
Do not alta compare-and-branch instructions fo' long displacements;
error if necessary.
.PP
Da followin options is available when as is configured fo' the
Ubicom \s-1IP2K\s0 series.
.IP "\fB\-mip2022ext\fR" 4
.IX Item "-mip2022ext"
Specifies dat tha extended \s-1IP2022\s0 instructions is allowed.
.IP "\fB\-mip2022\fR" 4
.IX Item "-mip2022"
Restores tha default behaviour, which restricts tha permitted instructions to
just tha basic \s-1IP2022\s0 ones.
.PP
Da followin options is available when as is configured fo' the
Renesas M32C n' M16C processors.
.IP "\fB\-m32c\fR" 4
.IX Item "-m32c"
Assemble M32C instructions.
.IP "\fB\-m16c\fR" 4
.IX Item "-m16c"
Assemble M16C instructions (the default).
.IP "\fB\-relax\fR" 4
.IX Item "-relax"
Enable support fo' link-time chillaxations.
.IP "\fB\-h\-tick\-hex\fR" 4
.IX Item "-h-tick-hex"
Support H'00 steez hex constants up in addizzle ta 0x00 style.
.PP
Da followin options is available when as is configured fo' the
Renesas M32R (formerly Mitsubishi M32R) series.
.IP "\fB\-\-m32rx\fR" 4
.IX Item "--m32rx"
Specify which processor up in tha M32R crew is tha target.  Da default
is normally tha M32R yo, but dis option chizzlez it ta tha M32RX.
.IP "\fB\-\-warn\-explicit\-parallel\-conflicts or \-\-Wp\fR" 4
.IX Item "--warn-explicit-parallel-conflicts or --Wp"
Produce warnin lyrics when questionable parallel constructs are
encountered.
.IP "\fB\-\-no\-warn\-explicit\-parallel\-conflicts or \-\-Wnp\fR" 4
.IX Item "--no-warn-explicit-parallel-conflicts or --Wnp"
Do not produce warnin lyrics when questionable parallel constructs are
encountered.
.PP
Da followin options is available when as is configured fo' the
Motorola 68000 series.
.IP "\fB\-l\fR" 4
.IX Item "-l"
Shorten references ta undefined symbols, ta one word instead of two.
.IP "\fB\-m68000 | \-m68008 | \-m68010 | \-m68020 | \-m68030\fR" 4
.IX Item "-m68000 | -m68008 | -m68010 | -m68020 | -m68030"
.PD 0
.IP "\fB| \-m68040 | \-m68060 | \-m68302 | \-m68331 | \-m68332\fR" 4
.IX Item "| -m68040 | -m68060 | -m68302 | -m68331 | -m68332"
.IP "\fB| \-m68333 | \-m68340 | \-mcpu32 | \-m5200\fR" 4
.IX Item "| -m68333 | -m68340 | -mcpu32 | -m5200"
.PD
Specify what tha fuck processor up in tha 68000 crew is tha target.  Da default
is normally tha 68020 yo, but dis can be chizzled at configuration time.
.IP "\fB\-m68881 | \-m68882 | \-mno\-68881 | \-mno\-68882\fR" 4
.IX Item "-m68881 | -m68882 | -mno-68881 | -mno-68882"
Da target machine do (or do not) gotz a gangbangin' floating-point coprocessor.
Da default is ta assume a cold-ass lil coprocessor fo' 68020, 68030, n' cpu32.  Although
the basic 68000 aint compatible wit tha 68881, a cold-ass lil combination of the
two can be specified, since itz possible ta do emulation of the
coprocessor instructions wit tha main processor.
.IP "\fB\-m68851 | \-mno\-68851\fR" 4
.IX Item "-m68851 | -mno-68851"
Da target machine do (or do not) gotz a memory-management
unit coprocessor. Shiiit, dis aint no joke.  Da default is ta assume a \s-1MMU\s0 fo' 68020 n' up.
.PP
For details bout tha \s-1PDP\-11\s0 machine dependent features options,
see \fBPDP\-11\-Options\fR.
.IP "\fB\-mpic | \-mno\-pic\fR" 4
.IX Item "-mpic | -mno-pic"
Generate position-independent (or position-dependent) code.  The
default is \fB\-mpic\fR.
.IP "\fB\-mall\fR" 4
.IX Item "-mall"
.PD 0
.IP "\fB\-mall\-extensions\fR" 4
.IX Item "-mall-extensions"
.PD
Enable all instruction set extensions.  This is tha default.
.IP "\fB\-mno\-extensions\fR" 4
.IX Item "-mno-extensions"
Disable all instruction set extensions.
.IP "\fB\-m\fR\fIextension\fR \fB| \-mno\-\fR\fIextension\fR" 4
.IX Item "-mextension | -mno-extension"
Enable (or disable) a particular instruction set extension.
.IP "\fB\-m\fR\fIcpu\fR" 4
.IX Item "-mcpu"
Enable tha instruction set extensions supported by a particular \s-1CPU,\s0 and
disable all other extensions.
.IP "\fB\-m\fR\fImachine\fR" 4
.IX Item "-mmachine"
Enable tha instruction set extensions supported by a particular machine
model, n' disable all other extensions.
.PP
Da followin options is available when as is configured for
a picoJava processor.
.IP "\fB\-mb\fR" 4
.IX Item "-mb"
Generate \*(L"bangin' endian\*(R" format output.
.IP "\fB\-ml\fR" 4
.IX Item "-ml"
Generate \*(L"lil endian\*(R" format output.
.PP
Da followin options is available when as is configured fo' the
Motorola 68HC11 or 68HC12 series.
.IP "\fB\-m68hc11 | \-m68hc12 | \-m68hcs12 | \-mm9s12x | \-mm9s12xg\fR" 4
.IX Item "-m68hc11 | -m68hc12 | -m68hcs12 | -mm9s12x | -mm9s12xg"
Specify what tha fuck processor is tha target.  Da default is
defined by tha configuration option when buildin tha assembler.
.IP "\fB\-\-xgate\-ramoffset\fR" 4
.IX Item "--xgate-ramoffset"
Instruct tha linker ta offset \s-1RAM\s0 addresses from S12X address space into
\&\s-1XGATE\s0 address space.
.IP "\fB\-mshort\fR" 4
.IX Item "-mshort"
Specify ta use tha 16\-bit integer \s-1ABI.\s0
.IP "\fB\-mlong\fR" 4
.IX Item "-mlong"
Specify ta use tha 32\-bit integer \s-1ABI.\s0
.IP "\fB\-mshort\-double\fR" 4
.IX Item "-mshort-double"
Specify ta use tha 32\-bit double \s-1ABI.\s0
.IP "\fB\-mlong\-double\fR" 4
.IX Item "-mlong-double"
Specify ta use tha 64\-bit double \s-1ABI.\s0
.IP "\fB\-\-force\-long\-branches\fR" 4
.IX Item "--force-long-branches"
Relatizzle branches is turned tha fuck into absolute ones. This concerns
conditionizzle branches, unconditionizzle branches n' branches ta a
sub routine.
.IP "\fB\-S | \-\-short\-branches\fR" 4
.IX Item "-S | --short-branches"
Do not turn relatizzle branches tha fuck into absolute ones
when tha offset is outta range.
.IP "\fB\-\-strict\-direct\-mode\fR" 4
.IX Item "--strict-direct-mode"
Do not turn tha direct addressin mode tha fuck into extended addressin mode
when tha instruction do not support direct addressin mode.
.IP "\fB\-\-print\-insn\-syntax\fR" 4
.IX Item "--print-insn-syntax"
Print tha syntax of instruction up in case of error.
.IP "\fB\-\-print\-opcodes\fR" 4
.IX Item "--print-opcodes"
Print tha list of instructions wit syntax n' then exit.
.IP "\fB\-\-generate\-example\fR" 4
.IX Item "--generate-example"
Print a example of instruction fo' each possible instruction n' then exit.
This option is only useful fo' testin \fBas\fR.
.PP
Da followin options is available when \fBas\fR is configured
for tha \s-1SPARC\s0 architecture:
.IP "\fB\-Av6 | \-Av7 | \-Av8 | \-Asparclet | \-Asparclite\fR" 4
.IX Item "-Av6 | -Av7 | -Av8 | -Asparclet | -Asparclite"
.PD 0
.IP "\fB\-Av8plus | \-Av8plusa | \-Av9 | \-Av9a\fR" 4
.IX Item "-Av8plus | -Av8plusa | -Av9 | -Av9a"
.PD
Explicitly select a variant of tha \s-1SPARC\s0 architecture.
.Sp
\&\fB\-Av8plus\fR n' \fB\-Av8plusa\fR select a 32 bit environment.
\&\fB\-Av9\fR n' \fB\-Av9a\fR select a 64 bit environment.
.Sp
\&\fB\-Av8plusa\fR n' \fB\-Av9a\fR enable tha \s-1SPARC V9\s0 instruction set with
UltraSPARC extensions.
.IP "\fB\-xarch=v8plus | \-xarch=v8plusa\fR" 4
.IX Item "-xarch=v8plus | -xarch=v8plusa"
For compatibilitizzle wit tha Solaris v9 assembla n' shit.  These options are
equivalent ta \-Av8plus n' \-Av8plusa, respectively.
.IP "\fB\-bump\fR" 4
.IX Item "-bump"
Warn when tha assembla switches ta another architecture.
.PP
Da followin options is available when as is configured fo' tha 'c54x
architecture.
.IP "\fB\-mfar\-mode\fR" 4
.IX Item "-mfar-mode"
Enable extended addressin mode.  All addresses n' relocations will assume
extended addressin (usually 23 bits).
.IP "\fB\-mcpu=\fR\fI\s-1CPU_VERSION\s0\fR" 4
.IX Item "-mcpu=CPU_VERSION"
Sets tha \s-1CPU\s0 version bein compiled for.
.IP "\fB\-merrors\-to\-file\fR \fI\s-1FILENAME\s0\fR" 4
.IX Item "-merrors-to-file FILENAME"
Redirect error output ta a gangbangin' file, fo' fucked up systems which don't support such
behaviour up in tha shell.
.PP
Da followin options is available when as is configured for
a \s-1MIPS\s0 processor.
.IP "\fB\-G\fR \fInum\fR" 4
.IX Item "-G num"
This option sets tha phattest size of a object dat can be referenced
implicitly wit tha \f(CW\*(C`gp\*(C'\fR regista n' shit.  It be only accepted fo' targets that
use \s-1ECOFF\s0 format, like fuckin a DECstation hustlin Ultrix.  Da default value is 8.
.IP "\fB\-EB\fR" 4
.IX Item "-EB"
Generate \*(L"bangin' endian\*(R" format output.
.IP "\fB\-EL\fR" 4
.IX Item "-EL"
Generate \*(L"lil endian\*(R" format output.
.IP "\fB\-mips1\fR" 4
.IX Item "-mips1"
.PD 0
.IP "\fB\-mips2\fR" 4
.IX Item "-mips2"
.IP "\fB\-mips3\fR" 4
.IX Item "-mips3"
.IP "\fB\-mips4\fR" 4
.IX Item "-mips4"
.IP "\fB\-mips5\fR" 4
.IX Item "-mips5"
.IP "\fB\-mips32\fR" 4
.IX Item "-mips32"
.IP "\fB\-mips32r2\fR" 4
.IX Item "-mips32r2"
.IP "\fB\-mips64\fR" 4
.IX Item "-mips64"
.IP "\fB\-mips64r2\fR" 4
.IX Item "-mips64r2"
.PD
Generate code fo' a particular \s-1MIPS\s0 Instruction Set Architecture level.
\&\fB\-mips1\fR be a alias fo' \fB\-march=r3000\fR, \fB\-mips2\fR be an
alias fo' \fB\-march=r6000\fR, \fB\-mips3\fR be a alias for
\&\fB\-march=r4000\fR n' \fB\-mips4\fR be a alias fo' \fB\-march=r8000\fR.
\&\fB\-mips5\fR, \fB\-mips32\fR, \fB\-mips32r2\fR, \fB\-mips64\fR, and
\&\fB\-mips64r2\fR
correspond ta generic
\&\fB\s-1MIPS V\s0\fR, \fB\s-1MIPS32\s0\fR, \fB\s-1MIPS32\s0 Release 2\fR, \fB\s-1MIPS64\s0\fR,
and \fB\s-1MIPS64\s0 Release 2\fR
\&\s-1ISA\s0 processors, respectively.
.IP "\fB\-march=\fR\fI\s-1CPU\s0\fR" 4
.IX Item "-march=CPU"
Generate code fo' a particular \s-1MIPS\s0 cpu.
.IP "\fB\-mtune=\fR\fIcpu\fR" 4
.IX Item "-mtune=cpu"
Schedule n' tune fo' a particular \s-1MIPS\s0 cpu.
.IP "\fB\-mfix7000\fR" 4
.IX Item "-mfix7000"
.PD 0
.IP "\fB\-mno\-fix7000\fR" 4
.IX Item "-mno-fix7000"
.PD
Cause nops ta be banged if tha read of tha destination register
of a mfhi or mflo instruction occurs up in tha followin two instructions.
.IP "\fB\-mdebug\fR" 4
.IX Item "-mdebug"
.PD 0
.IP "\fB\-no\-mdebug\fR" 4
.IX Item "-no-mdebug"
.PD
Cause stabs-style debuggin output ta go tha fuck into a ECOFF-style .mdebug
section instead of tha standard \s-1ELF \s0.stabs sections.
.IP "\fB\-mpdr\fR" 4
.IX Item "-mpdr"
.PD 0
.IP "\fB\-mno\-pdr\fR" 4
.IX Item "-mno-pdr"
.PD
Control generation of \f(CW\*(C`.pdr\*(C'\fR sections.
.IP "\fB\-mgp32\fR" 4
.IX Item "-mgp32"
.PD 0
.IP "\fB\-mfp32\fR" 4
.IX Item "-mfp32"
.PD
Da regista sizes is normally inferred from tha \s-1ISA\s0 n' \s-1ABI,\s0 but these
flags force a cold-ass lil certain crew of registas ta be treated as 32 bits wide at
all times.  \fB\-mgp32\fR controls tha size of general-purpose registers
and \fB\-mfp32\fR controls tha size of floating-point registers.
.IP "\fB\-mips16\fR" 4
.IX Item "-mips16"
.PD 0
.IP "\fB\-no\-mips16\fR" 4
.IX Item "-no-mips16"
.PD
Generate code fo' tha \s-1MIPS 16\s0 processor. Shiiit, dis aint no joke.  This is equivalent ta putting
\&\f(CW\*(C`.set mips16\*(C'\fR all up in tha start of tha assembly file.  \fB\-no\-mips16\fR
turns off dis option.
.IP "\fB\-mmicromips\fR" 4
.IX Item "-mmicromips"
.PD 0
.IP "\fB\-mno\-micromips\fR" 4
.IX Item "-mno-micromips"
.PD
Generate code fo' tha microMIPS processor. Shiiit, dis aint no joke.  This is equivalent ta putting
\&\f(CW\*(C`.set micromips\*(C'\fR all up in tha start of tha assembly file.  \fB\-mno\-micromips\fR
turns off dis option. I aint talkin' bout chicken n' gravy biatch.  This is equivalent ta puttin \f(CW\*(C`.set nomicromips\*(C'\fR
at tha start of tha assembly file.
.IP "\fB\-msmartmips\fR" 4
.IX Item "-msmartmips"
.PD 0
.IP "\fB\-mno\-smartmips\fR" 4
.IX Item "-mno-smartmips"
.PD
Enablez tha SmartMIPS extension ta tha \s-1MIPS32\s0 instruction set. This is
equivalent ta puttin \f(CW\*(C`.set smartmips\*(C'\fR all up in tha start of tha assembly file.
\&\fB\-mno\-smartmips\fR turns off dis option.
.IP "\fB\-mips3d\fR" 4
.IX Item "-mips3d"
.PD 0
.IP "\fB\-no\-mips3d\fR" 4
.IX Item "-no-mips3d"
.PD
Generate code fo' tha \s-1MIPS\-3D\s0 Application Specific Extension.
This  drops some lyrics ta tha assembla ta accept \s-1MIPS\-3D\s0 instructions.
\&\fB\-no\-mips3d\fR turns off dis option.
.IP "\fB\-mdmx\fR" 4
.IX Item "-mdmx"
.PD 0
.IP "\fB\-no\-mdmx\fR" 4
.IX Item "-no-mdmx"
.PD
Generate code fo' tha \s-1MDMX\s0 Application Specific Extension.
This  drops some lyrics ta tha assembla ta accept \s-1MDMX\s0 instructions.
\&\fB\-no\-mdmx\fR turns off dis option.
.IP "\fB\-mdsp\fR" 4
.IX Item "-mdsp"
.PD 0
.IP "\fB\-mno\-dsp\fR" 4
.IX Item "-mno-dsp"
.PD
Generate code fo' tha \s-1DSP\s0 Release 1 Application Specific Extension.
This  drops some lyrics ta tha assembla ta accept \s-1DSP\s0 Release 1 instructions.
\&\fB\-mno\-dsp\fR turns off dis option.
.IP "\fB\-mdspr2\fR" 4
.IX Item "-mdspr2"
.PD 0
.IP "\fB\-mno\-dspr2\fR" 4
.IX Item "-mno-dspr2"
.PD
Generate code fo' tha \s-1DSP\s0 Release 2 Application Specific Extension.
This option implies \-mdsp.
This  drops some lyrics ta tha assembla ta accept \s-1DSP\s0 Release 2 instructions.
\&\fB\-mno\-dspr2\fR turns off dis option.
.IP "\fB\-mmt\fR" 4
.IX Item "-mmt"
.PD 0
.IP "\fB\-mno\-mt\fR" 4
.IX Item "-mno-mt"
.PD
Generate code fo' tha \s-1MT\s0 Application Specific Extension.
This  drops some lyrics ta tha assembla ta accept \s-1MT\s0 instructions.
\&\fB\-mno\-mt\fR turns off dis option.
.IP "\fB\-mmcu\fR" 4
.IX Item "-mmcu"
.PD 0
.IP "\fB\-mno\-mcu\fR" 4
.IX Item "-mno-mcu"
.PD
Generate code fo' tha \s-1MCU\s0 Application Specific Extension.
This  drops some lyrics ta tha assembla ta accept \s-1MCU\s0 instructions.
\&\fB\-mno\-mcu\fR turns off dis option.
.IP "\fB\-\-construct\-floats\fR" 4
.IX Item "--construct-floats"
.PD 0
.IP "\fB\-\-no\-construct\-floats\fR" 4
.IX Item "--no-construct-floats"
.PD
Da \fB\-\-no\-construct\-floats\fR option disablez tha construction of
double width floatin point constants by loadin tha two halvez of the
value tha fuck into tha two single width floatin point registas dat make up
the double width regista n' shit.  By default \fB\-\-construct\-floats\fR is
selected, allowin construction of these floatin point constants.
.IP "\fB\-\-emulation=\fR\fIname\fR" 4
.IX Item "--emulation=name"
This option causes \fBas\fR ta emulate \fBas\fR configured
for some other target, up in all respects, includin output format (choosing
between \s-1ELF\s0 n' \s-1ECOFF\s0 only), handlin of pseudo-opcodes which may generate
debuggin shiznit or store symbol table shiznit, n' default
endianness.  Da available configuration names are: \fBmipsecoff\fR,
\&\fBmipself\fR, \fBmipslecoff\fR, \fBmipsbecoff\fR, \fBmipslelf\fR,
\&\fBmipsbelf\fR.  Da first two do not alta tha default endiannizz from that
of tha primary target fo' which tha assembla was configured; tha others chizzle
the default ta lil\- or big-endian as indicated by tha \fBb\fR or \fBl\fR
in tha name.  Usin \fB\-EB\fR or \fB\-EL\fR will override tha endianness
selection up in any case.
.Sp
This option is currently supported only when tha primary target
\&\fBas\fR is configured fo' be a \s-1MIPS ELF\s0 or \s-1ECOFF\s0 target.
Furthermore, tha primary target or others specified with
\&\fB\-\-enable\-targets=...\fR at configuration time must include support for
the other format, if both is ta be available.  For example, tha Irix 5
configuration includes support fo' both.
.Sp
Eventually, dis option will support mo' configurations, wit more
fine-grained control over tha assemblerz behavior, n' is ghon be supported for
more processors.
.IP "\fB\-nocpp\fR" 4
.IX Item "-nocpp"
\&\fBas\fR ignores dis option. I aint talkin' bout chicken n' gravy biatch.  It be accepted fo' compatibilitizzle with
the natizzle tools.
.IP "\fB\-\-trap\fR" 4
.IX Item "--trap"
.PD 0
.IP "\fB\-\-no\-trap\fR" 4
.IX Item "--no-trap"
.IP "\fB\-\-break\fR" 4
.IX Item "--break"
.IP "\fB\-\-no\-break\fR" 4
.IX Item "--no-break"
.PD
Control how tha fuck ta deal wit multiplication overflow n' division by zero.
\&\fB\-\-trap\fR or \fB\-\-no\-break\fR (which is synonyms) take a trap exception
(and only work fo' Instruction Set Architecture level 2 n' higher);
\&\fB\-\-break\fR or \fB\-\-no\-trap\fR (also synonyms, n' tha default) take a
break exception.
.IP "\fB\-n\fR" 4
.IX Item "-n"
When dis option is used, \fBas\fR will issue a warnin every
time it generates a nop instruction from a macro.
.PP
Da followin options is available when as is configured for
an MCore processor.
.IP "\fB\-jsri2bsr\fR" 4
.IX Item "-jsri2bsr"
.PD 0
.IP "\fB\-nojsri2bsr\fR" 4
.IX Item "-nojsri2bsr"
.PD
Enable or disable tha \s-1JSRI\s0 ta \s-1BSR\s0 transformation. I aint talkin' bout chicken n' gravy biatch.  By default dis is enabled.
Da command line option \fB\-nojsri2bsr\fR can be used ta disable dat shit.
.IP "\fB\-sifilter\fR" 4
.IX Item "-sifilter"
.PD 0
.IP "\fB\-nosifilter\fR" 4
.IX Item "-nosifilter"
.PD
Enable or disable tha silicon filta behaviour. Shiiit, dis aint no joke.  By default dis is disabled.
Da default can be overridden by tha \fB\-sifilter\fR command line option.
.IP "\fB\-relax\fR" 4
.IX Item "-relax"
Alta jump instructions fo' long displacements.
.IP "\fB\-mcpu=[210|340]\fR" 4
.IX Item "-mcpu=[210|340]"
Select tha cpu type on tha target hardware.  This controls which instructions
can be assembled.
.IP "\fB\-EB\fR" 4
.IX Item "-EB"
Assemble fo' a funky-ass big-ass endian target.
.IP "\fB\-EL\fR" 4
.IX Item "-EL"
Assemble fo' a lil endian target.
.PP
See tha info pages fo' documentation of tha MMIX-specific options.
.PP
Da followin options is available when as is configured fo' a
PowerPC processor.
.IP "\fB\-a32\fR" 4
.IX Item "-a32"
Generate \s-1ELF32\s0 or \s-1XCOFF32.\s0
.IP "\fB\-a64\fR" 4
.IX Item "-a64"
Generate \s-1ELF64\s0 or \s-1XCOFF64.\s0
.IP "\fB\-K \s-1PIC\s0\fR" 4
.IX Item "-K PIC"
Set \s-1EF_PPC_RELOCATABLE_LIB\s0 up in \s-1ELF\s0 flags.
.IP "\fB\-mpwrx | \-mpwr2\fR" 4
.IX Item "-mpwrx | -mpwr2"
Generate code fo' \s-1POWER/2 \s0(\s-1RIOS2\s0).
.IP "\fB\-mpwr\fR" 4
.IX Item "-mpwr"
Generate code fo' \s-1POWER \s0(\s-1RIOS1\s0)
.IP "\fB\-m601\fR" 4
.IX Item "-m601"
Generate code fo' PowerPC 601.
.IP "\fB\-mppc, \-mppc32, \-m603, \-m604\fR" 4
.IX Item "-mppc, -mppc32, -m603, -m604"
Generate code fo' PowerPC 603/604.
.IP "\fB\-m403, \-m405\fR" 4
.IX Item "-m403, -m405"
Generate code fo' PowerPC 403/405.
.IP "\fB\-m440\fR" 4
.IX Item "-m440"
Generate code fo' PowerPC 440.  BookE n' some 405 instructions.
.IP "\fB\-m464\fR" 4
.IX Item "-m464"
Generate code fo' PowerPC 464.
.IP "\fB\-m476\fR" 4
.IX Item "-m476"
Generate code fo' PowerPC 476.
.IP "\fB\-m7400, \-m7410, \-m7450, \-m7455\fR" 4
.IX Item "-m7400, -m7410, -m7450, -m7455"
Generate code fo' PowerPC 7400/7410/7450/7455.
.IP "\fB\-m750cl\fR" 4
.IX Item "-m750cl"
Generate code fo' PowerPC 750CL.
.IP "\fB\-mppc64, \-m620\fR" 4
.IX Item "-mppc64, -m620"
Generate code fo' PowerPC 620/625/630.
.IP "\fB\-me500, \-me500x2\fR" 4
.IX Item "-me500, -me500x2"
Generate code fo' Motorola e500 core complex.
.IP "\fB\-me500mc\fR" 4
.IX Item "-me500mc"
Generate code fo' Freescale e500mc core complex.
.IP "\fB\-me500mc64\fR" 4
.IX Item "-me500mc64"
Generate code fo' Freescale e500mc64 core complex.
.IP "\fB\-me5500\fR" 4
.IX Item "-me5500"
Generate code fo' Freescale e5500 core complex.
.IP "\fB\-me6500\fR" 4
.IX Item "-me6500"
Generate code fo' Freescale e6500 core complex.
.IP "\fB\-mspe\fR" 4
.IX Item "-mspe"
Generate code fo' Motorola \s-1SPE\s0 instructions.
.IP "\fB\-mtitan\fR" 4
.IX Item "-mtitan"
Generate code fo' AppliedMicro Titan core complex.
.IP "\fB\-mppc64bridge\fR" 4
.IX Item "-mppc64bridge"
Generate code fo' PowerPC 64, includin bridge insns.
.IP "\fB\-mbooke\fR" 4
.IX Item "-mbooke"
Generate code fo' 32\-bit BookE.
.IP "\fB\-ma2\fR" 4
.IX Item "-ma2"
Generate code fo' A2 architecture.
.IP "\fB\-me300\fR" 4
.IX Item "-me300"
Generate code fo' PowerPC e300 crew.
.IP "\fB\-maltivec\fR" 4
.IX Item "-maltivec"
Generate code fo' processors wit AltiVec instructions.
.IP "\fB\-mvsx\fR" 4
.IX Item "-mvsx"
Generate code fo' processors wit Vector-Scalar (\s-1VSX\s0) instructions.
.IP "\fB\-mpower4, \-mpwr4\fR" 4
.IX Item "-mpower4, -mpwr4"
Generate code fo' Power4 architecture.
.IP "\fB\-mpower5, \-mpwr5, \-mpwr5x\fR" 4
.IX Item "-mpower5, -mpwr5, -mpwr5x"
Generate code fo' Power5 architecture.
.IP "\fB\-mpower6, \-mpwr6\fR" 4
.IX Item "-mpower6, -mpwr6"
Generate code fo' Power6 architecture.
.IP "\fB\-mpower7, \-mpwr7\fR" 4
.IX Item "-mpower7, -mpwr7"
Generate code fo' Power7 architecture.
.IP "\fB\-mcell\fR" 4
.IX Item "-mcell"
Generate code fo' Cell Broadband Engine architecture.
.IP "\fB\-mcom\fR" 4
.IX Item "-mcom"
Generate code Power/PowerPC common instructions.
.IP "\fB\-many\fR" 4
.IX Item "-many"
Generate code fo' any architecture (\s-1PWR/PWRX/PPC\s0).
.IP "\fB\-mregnames\fR" 4
.IX Item "-mregnames"
Allow symbolic names fo' registers.
.IP "\fB\-mno\-regnames\fR" 4
.IX Item "-mno-regnames"
Do not allow symbolic names fo' registers.
.IP "\fB\-mrelocatable\fR" 4
.IX Item "-mrelocatable"
Support fo' \s-1GCC\s0z \-mrelocatable option.
.IP "\fB\-mrelocatable\-lib\fR" 4
.IX Item "-mrelocatable-lib"
Support fo' \s-1GCC\s0z \-mrelocatable\-lib option.
.IP "\fB\-memb\fR" 4
.IX Item "-memb"
Set \s-1PPC_EMB\s0 bit up in \s-1ELF\s0 flags.
.IP "\fB\-mlil, \-mlil\-endian, \-le\fR" 4
.IX Item "-mlil, -mlil-endian, -le"
Generate code fo' a lil endian machine.
.IP "\fB\-mbig, \-mbig\-endian, \-be\fR" 4
.IX Item "-mbig, -mbig-endian, -be"
Generate code fo' a funky-ass big-ass endian machine.
.IP "\fB\-msolaris\fR" 4
.IX Item "-msolaris"
Generate code fo' Solaris.
.IP "\fB\-mno\-solaris\fR" 4
.IX Item "-mno-solaris"
Do not generate code fo' Solaris.
.IP "\fB\-nops=\fR\fIcount\fR" 4
.IX Item "-nops=count"
If a alignment directizzle bangs mo' than \fIcount\fR nops, put a
branch all up in tha beginnin ta skip execution of tha nops.
.PP
See tha info pages fo' documentation of tha RX-specific options.
.PP
Da followin options is available when as is configured fo' tha s390
processor crew.
.IP "\fB\-m31\fR" 4
.IX Item "-m31"
.PD 0
.IP "\fB\-m64\fR" 4
.IX Item "-m64"
.PD
Select tha word size, either 31/32 bits or 64 bits.
.IP "\fB\-mesa\fR" 4
.IX Item "-mesa"
.PD 0
.IP "\fB\-mzarch\fR" 4
.IX Item "-mzarch"
.PD
Select tha architecture mode, either tha Enterprise System
Architecture (esa) or tha z/Architecture mode (zarch).
.IP "\fB\-march=\fR\fIprocessor\fR" 4
.IX Item "-march=processor"
Specify which s390 processor variant is tha target, \fBg6\fR, \fBg6\fR,
\&\fBz900\fR, \fBz990\fR, \fBz9\-109\fR, \fBz9\-ec\fR, \fBz10\fR,
\&\fBz196\fR, or \fBzEC12\fR.
.IP "\fB\-mregnames\fR" 4
.IX Item "-mregnames"
.PD 0
.IP "\fB\-mno\-regnames\fR" 4
.IX Item "-mno-regnames"
.PD
Allow or disallow symbolic names fo' registers.
.IP "\fB\-mwarn\-areg\-zero\fR" 4
.IX Item "-mwarn-areg-zero"
Warn whenever tha operand fo' a funky-ass base or index regista has been specified
but evaluates ta zero.
.PP
Da followin options is available when as is configured fo' a
\&\s-1TMS320C6000\s0 processor.
.IP "\fB\-march=\fR\fIarch\fR" 4
.IX Item "-march=arch"
Enable (only) instructions from architecture \fIarch\fR.  By default,
all instructions is permitted.
.Sp
Da followin jointz of \fIarch\fR is accepted: \f(CW\*(C`c62x\*(C'\fR,
\&\f(CW\*(C`c64x\*(C'\fR, \f(CW\*(C`c64x+\*(C'\fR, \f(CW\*(C`c67x\*(C'\fR, \f(CW\*(C`c67x+\*(C'\fR, \f(CW\*(C`c674x\*(C'\fR.
.IP "\fB\-mdsbt\fR" 4
.IX Item "-mdsbt"
.PD 0
.IP "\fB\-mno\-dsbt\fR" 4
.IX Item "-mno-dsbt"
.PD
Da \fB\-mdsbt\fR option causes tha assembla ta generate the
\&\f(CW\*(C`Tag_ABI_DSBT\*(C'\fR attribute wit a value of 1, indicatin dat the
code is rockin \s-1DSBT\s0 addressing.  Da \fB\-mno\-dsbt\fR option, the
default, causes tha tag ta git a value of 0, indicatin dat tha code
does not use \s-1DSBT\s0 addressing.  Da linker will emit a warnin if
objectz of different type (\s-1DSBT\s0 n' non-DSBT) is linked together.
.IP "\fB\-mpid=no\fR" 4
.IX Item "-mpid=no"
.PD 0
.IP "\fB\-mpid=near\fR" 4
.IX Item "-mpid=near"
.IP "\fB\-mpid=far\fR" 4
.IX Item "-mpid=far"
.PD
Da \fB\-mpid=\fR option causes tha assembla ta generate the
\&\f(CW\*(C`Tag_ABI_PID\*(C'\fR attribute wit a value indicatin tha form of data
addressin used by tha code.  \fB\-mpid=no\fR, tha default,
indicates position-dependent data addressing, \fB\-mpid=near\fR
indicates position-independent addressin wit \s-1GOT\s0 accesses rockin near
\&\s-1DP\s0 addressing, n' \fB\-mpid=far\fR indicates position-independent
addressin wit \s-1GOT\s0 accesses rockin far \s-1DP\s0 addressing.  Da linker will
emit a warnin if objects built wit different settingz of dis option
are linked together.
.IP "\fB\-mpic\fR" 4
.IX Item "-mpic"
.PD 0
.IP "\fB\-mno\-pic\fR" 4
.IX Item "-mno-pic"
.PD
Da \fB\-mpic\fR option causes tha assembla ta generate the
\&\f(CW\*(C`Tag_ABI_PIC\*(C'\fR attribute wit a value of 1, indicatin dat the
code is rockin position-independent code addressing,  The
\&\f(CW\*(C`\-mno\-pic\*(C'\fR option, tha default, causes tha tag ta git a value of
0, indicatin position-dependent code addressing.  Da linker will
emit a warnin if objectz of different type (position-dependent and
position-independent) is linked together.
.IP "\fB\-mbig\-endian\fR" 4
.IX Item "-mbig-endian"
.PD 0
.IP "\fB\-mlil\-endian\fR" 4
.IX Item "-mlil-endian"
.PD
Generate code fo' tha specified endianness.  Da default is
lil-endian.
.PP
Da followin options is available when as is configured fo' a TILE-Gx
processor.
.IP "\fB\-m32 | \-m64\fR" 4
.IX Item "-m32 | -m64"
Select tha word size, either 32 bits or 64 bits.
.IP "\fB\-EB | \-EL\fR" 4
.IX Item "-EB | -EL"
Select tha endianness, either big-endian (\-EB) or lil-endian (\-EL).
.PP
Da followin options is available when as is configured fo' an
Xtensa processor.
.IP "\fB\-\-text\-section\-literals | \-\-no\-text\-section\-literals\fR" 4
.IX Item "--text-section-literals | --no-text-section-literals"
Control tha treatment of literal pools.  Da default is
\&\fB\-\-no\-text\-section\-literals\fR, which places literals in
separate sections up in tha output file.  This allows tha literal pool ta be
placed up in a thugged-out data \s-1RAM/ROM. \s0 With \fB\-\-text\-section\-literals\fR, the
literals is interspersed up in tha text section up in order ta keep dem as
close as possible ta they references.  This may be necessary fo' large
assembly files, where tha literals would otherwise be outta range of the
\&\f(CW\*(C`L32R\*(C'\fR instructions up in tha text section. I aint talkin' bout chicken n' gravy biatch.  These options only affect
literals referenced via PC-relatizzle \f(CW\*(C`L32R\*(C'\fR instructions; literals
for absolute mode \f(CW\*(C`L32R\*(C'\fR instructions is handled separately.
.IP "\fB\-\-absolute\-literals | \-\-no\-absolute\-literals\fR" 4
.IX Item "--absolute-literals | --no-absolute-literals"
Indicate ta tha assembla whether \f(CW\*(C`L32R\*(C'\fR instructions use absolute
or PC-relatizzle addressing.  If tha processor includes tha absolute
addressin option, tha default is ta use absolute \f(CW\*(C`L32R\*(C'\fR
relocations.  Otherwise, only tha PC-relatizzle \f(CW\*(C`L32R\*(C'\fR relocations
can be used.
.IP "\fB\-\-target\-align | \-\-no\-target\-align\fR" 4
.IX Item "--target-align | --no-target-align"
Enable or disable automatic alignment ta reduce branch penaltizzles at some
expense up in code size.    This optimization is enabled by default.  Note
that tha assembla will always align instructions like \f(CW\*(C`LOOP\*(C'\fR that
have fixed alignment requirements.
.IP "\fB\-\-longcalls | \-\-no\-longcalls\fR" 4
.IX Item "--longcalls | --no-longcalls"
Enable or disable transformation of call instructions ta allow calls
across a pimped outa range of addresses.    This option should be used when call
targets can potentially be outta range.  It may degrade both code size
and performizzle yo, but tha linker can generally optimize away the
unnecessary overhead when a cold-ass lil call endz up within range.  Da default is
\&\fB\-\-no\-longcalls\fR.
.IP "\fB\-\-transform | \-\-no\-transform\fR" 4
.IX Item "--transform | --no-transform"
Enable or disable all assembla transformationz of Xtensa instructions,
includin both chillaxation n' optimization. I aint talkin' bout chicken n' gravy biatch.  Da default is
\&\fB\-\-transform\fR; \fB\-\-no\-transform\fR should only be used up in the
rare cases when tha instructions must be exactly as specified up in the
assembly source.  Usin \fB\-\-no\-transform\fR causes outta range
instruction operandz ta be errors.
.IP "\fB\-\-rename\-section\fR \fIoldname\fR\fB=\fR\fInewname\fR" 4
.IX Item "--rename-section oldname=newname"
Rename tha \fIoldname\fR section ta \fInewname\fR.  This option can be used
multiple times ta rename multiple sections.
.PP
Da followin options is available when as is configured for
a Z80 crew processor.
.IP "\fB\-z80\fR" 4
.IX Item "-z80"
Assemble fo' Z80 processor.
.IP "\fB\-r800\fR" 4
.IX Item "-r800"
Assemble fo' R800 processor.
.IP "\fB\-ignore\-undocumented\-instructions\fR" 4
.IX Item "-ignore-undocumented-instructions"
.PD 0
.IP "\fB\-Wnud\fR" 4
.IX Item "-Wnud"
.PD
Assemble undocumented Z80 instructions dat also work on R800 without warning.
.IP "\fB\-ignore\-unportable\-instructions\fR" 4
.IX Item "-ignore-unportable-instructions"
.PD 0
.IP "\fB\-Wnup\fR" 4
.IX Item "-Wnup"
.PD
Assemble all undocumented Z80 instructions without warning.
.IP "\fB\-warn\-undocumented\-instructions\fR" 4
.IX Item "-warn-undocumented-instructions"
.PD 0
.IP "\fB\-Wud\fR" 4
.IX Item "-Wud"
.PD
Issue a warnin fo' undocumented Z80 instructions dat also work on R800.
.IP "\fB\-warn\-unportable\-instructions\fR" 4
.IX Item "-warn-unportable-instructions"
.PD 0
.IP "\fB\-Wup\fR" 4
.IX Item "-Wup"
.PD
Issue a warnin fo' undocumented Z80 instructions dat do not work on R800.
.IP "\fB\-forbid\-undocumented\-instructions\fR" 4
.IX Item "-forbid-undocumented-instructions"
.PD 0
.IP "\fB\-Fud\fR" 4
.IX Item "-Fud"
.PD
Treat all undocumented instructions as errors.
.IP "\fB\-forbid\-unportable\-instructions\fR" 4
.IX Item "-forbid-unportable-instructions"
.PD 0
.IP "\fB\-Fup\fR" 4
.IX Item "-Fup"
.PD
Treat undocumented Z80 instructions dat do not work on R800 as errors.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIgcc\fR\|(1), \fIld\fR\|(1), n' tha Info entries fo' \fIbinutils\fR n' \fIld\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
2000, 2001, 2002, 2006, 2007, 2008, 2009, 2010, 2011 Jacked Software Foundation,
Inc.
.PP
Permission is granted ta copy, distribute and/or modify dis document
under tha termz of tha \s-1GNU\s0 Jacked Documentation License, Version 1.3
or any lata version published by tha Jacked Software Foundation;
with no Invariant Sections, wit no Front-Cover Texts, n' wit no
Back-Cover Texts, n' you can put dat on yo' toast.  A copy of tha license is included up in the
section entitled \*(L"\s-1GNU\s0 Jacked Documentation License\*(R".
