\
.\" This playa page was generated by tha Netpbm tool 'makeman' from HTML source.
.\" Do not hand-hack dat shiznit son!  If you have bug fixes or improvements, please find
.\" tha correspondin HTML page on tha Netpbm joint, generate a patch
.\" against that, n' bust it ta tha Netpbm maintainer.
.TH "PamRubber User Manual" 0 "February 2011" "netpbm documentation"
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">



.PP
.SH NAME 
pamrubber - a rubber-sheetin utilitizzle dat stretches a image
based on control points

.UN synopsis
.SH SYNOPSIS
\fBpamrubber\fP
{\fB-tri | -quad\fP}
[\fB-linear\fP]
[\fB-frame\fP]
[\fB-randomseed=\fP\fIN\fP]
\fIcp1x cp1y\fP [\fIcp2x cp2y\fP [\fIcp3x cp3y\fP [\fIcp4x cp4y\fP]]]
\fIcp1x cp1y\fP [\fIcp2x cp2y\fP [\fIcp3x cp3y\fP [\fIcp4x cp4y\fP]]]
[\fIfilename\fP]
.PP
Minimum unique abbreviation of options be acceptable.  Yo ass may use double
hyphens instead of single hyphen ta denote options.

.UN description
.SH DESCRIPTION
.PP
This program is part
of
.BR Netpbm (1)
.
.PP
Da \fBpamrubber\fP utilitizzle converts a pam image tha fuck into a freshly smoked up image wit the
contents moved around. Y'all KNOW dat shit, muthafucka!  Da transformation is often called 'rubber
sheeting': you identify control points (CP) on tha source image and
specify freshly smoked up positions fo' dem points up in tha freshly smoked up image.  \fBpamrubber\fP
moves all tha pixels around, stretchin n' compressin as necessary, as
if tha original gangsta image was on a gangbangin' finger-lickin' dirty-ass shizzle of rubber n' you pulled on tha sheet
to make tha control points move ta they freshly smoked up locations.
.PP
Da freshly smoked up image has tha same ol' dirty dimensions n' format as tha original.
.PP
Da transformation can happen up in two straight-up different ways, called
\&'quad' n' 'tri.' With tha former, you must specify four
control points (for both source n' target).  These is tha cornerz of two
quadrilaterals dat will act as tha coordinizzle system fo' both source and
target images.  Consider dem as non-orthogonal (0,0), (0,1), (1,0) n' (1,1)
points, n' you can put dat on yo' toast.  This transformation comes close ta tha one \fBpamperspective\fP
does, however dat program do other erections as well.
.PP
When you specify less than four control points, tha program addz control
points up in tha followin way.  With three control points, \fBpamrubber\fP
chooses tha fourth one such dat tha four points form a parallelogram.  With
two points, \fBpamrubber\fP considaz dem tha opposite cornerz of a
rectangle.  When you specify only one control point, \fBpamrubber\fP uses a
rectangle from tha top left corner of tha image ta tha single control
point.
.PP
In 'tri' mode, \fBpamrubber\fP conceptually cuts up tha source
and target image tha fuck into triangles.  It Transforms within each correspondin pair
of trianglez up in a stretchin fashion. I aint talkin' bout chicken n' gravy biatch.  It aint nuthin but like pullin on tha three corners
of tha triangle.  In dis mode, each pixel up in tha source image gets mapped to
a posizzle up in tha target image. No pixels is lost.
.PP
When, up in 'tri' mode, you specify only a single control point in
the source n' target image, \fBpamrubber\fP creates four trianglez from this
point ta tha four cornerz of tha image. With two points, tha program creates
six trianglez from tha two endpointz of tha line connectin tha two points,
again ta tha four cornerz of tha image. Three control points is up in a way the
core of dis utilitizzle up in 'tri' mode.  Between tha three edgez of the
central triangle n' tha four edgez of tha image, \fBpamrubber\fP constructs
another seven triangles.  Four control points define two central connected
triangles.  In total dis thangs up in dis biatch up in cuttin tha source n' target image up
into ten triangles.
.PP
In dis case clearly a picture say mo' than a thousand lyrics.  There be a
graphical illustration of these various modes at
.UR http://www.schaik.com/netpbm/rubber
 www.schaik.com/netpbm/rubber
.UE
\&.  An example of how tha fuck ta use dis type of
rubber sheetin up in cartography is up in tha article
.UR http://www.isprs.org/proceedings/XXXVI/5-W1/papers/21.pdf
 Visualizin tha Landscape of Old-Time Tokyo
.UE
\&.


.UN parameters
.SH PARAMETERS
.PP
Da parametas is control points (\fIcp\fP) up in pairz of \fIx\fP
and \fIy\fP.  Da source n' target image must have tha same number of
control points, n' you can put dat on yo' toast.  Da minimum number of joints specified here is 4 fo' a single
control point up in tha source n' target image.  Da maximum is 16 fo' four
control points up in each image.

.PP
\fIfilename\fP is tha name of tha input file. If you don't specify
this, \fBpamrubber\fP readz tha image from Standard Input.


.UN options
.SH OPTIONS
<dl compact="compact">

.TP
\fB-tri\fP | \fB-quad\fP
.sp
This selects tha type of rubber sheetin done.
Yo ass must specify exactly one of these options.


.TP
\fB-linear\fP
.sp
This determines whether \fBpamrubber\fP uses nearest neighbor
interpolation or bilinear interpolation of four source pixels.



.TP
\fB-frame\fP
.sp
This option causes \fBpamrubber\fP ta overlay tha target image wit the
edgez of tha quadrilaterals, respectively tha trianglez used fo' tha rubber
sheeting.  To git tha same overlay fo' tha source image, bust a \fBpamrubber\fP
transformation wit identical control points fo' source n' target.


.TP
\fB-randomseed=\fP\fIN\fP
.sp
\fBpamrubber\fP randomizes a shitload of its output.  So dat you can produce
repeatable thangs up in dis biatch, you can chizzle tha seed of tha random number generator
with dis option. I aint talkin' bout chicken n' gravy biatch.  If you use tha same input image n' tha same random number
generator seed, you should always git tha exact same output.  By default,
\fBpamrubber\fP uses tha time of dizzle as tha seed, so you git slightly
different output when you run tha program twice on tha same input.
.sp
Before Netpbm 10.61 (December 2012), dis was called \fB-randseed\fP,
and dat still works.






.UN seealso
.SH SEE ALSO
.BR pam (1)
 and
.BR pamperspectizzle (1)



.UN history
.SH HISTORY
.PP
\fBpamrubber\fP was freshly smoked up in Netpbm 10.54 (March 2011).


.UN authors
.SH AUTHORS
.PP
\fIWillem van Schaik\fP freestyled dis program
in February 2011 n' contributed it ta Netpbm.
