'\" t
.\"     Title: git-cherry
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-CHERRY" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-cherry \- Find commits yet ta be applied ta upstream
.SH "SYNOPSIS"
.sp
.nf
\fIgit cherry\fR [\-v] [<upstream> [<head> [<limit>]]]
.fi
.sp
.SH "DESCRIPTION"
.sp
Determine whether there be commits up in <head>\&.\&.<upstream> dat is equivalent ta dem up in tha range <limit>\&.\&.<head>\&.
.sp
Da equivalence test is based on tha diff, afta removin whitespace n' line numbers\&. git\-cherry therefore detects when commits done been "copied" by meanz of \fBgit-cherry-pick\fR(1), \fBgit-am\fR(1) or \fBgit-rebase\fR(1)\&.
.sp
Outputs tha SHA1 of every last muthafuckin commit up in <limit>\&.\&.<head>, prefixed wit \- fo' commits dat have a equivalent up in <upstream>, n' + fo' commits dat do not\&.
.SH "OPTIONS"
.PP
\-v
.RS 4
Show tha commit subjects next ta tha SHA1s\&.
.RE
.PP
<upstream>
.RS 4
Upstream branch ta search fo' equivalent commits\&. Defaults ta tha upstream branch of HEAD\&.
.RE
.PP
<head>
.RS 4
Workin branch; defaults ta HEAD\&.
.RE
.PP
<limit>
.RS 4
Do not report commits up ta (and including) limit\&.
.RE
.SH "EXAMPLES"
.SS "Patch workflows"
.sp
git\-cherry is frequently used up in patch\-based workflows (see \fBgitworkflows\fR(7)) ta determine if a seriez of patches has been applied by tha upstream maintainer\&. In such a workflow you might create n' bust a topic branch like this:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git checkout \-b topic origin/master
# work n' create some commits
$ git format\-patch origin/master
$ git send\-email \&.\&.\&. 00*
.fi
.if n \{\
.RE
.\}
.sp
.sp
Later, you can peep whether yo' chizzlez done been applied by sayin (still on topic):
.sp
.if n \{\
.RS 4
.\}
.nf
$ git fetch  # update yo' notion of origin/master
$ git cherry \-v
.fi
.if n \{\
.RE
.\}
.sp
.SS "Concrete example"
.sp
In a thang where topic consisted of three commits, n' tha maintainer applied two of them, tha thang might look like:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git log \-\-graph \-\-oneline \-\-decorate \-\-boundary origin/master\&.\&.\&.topic
* 7654321 (origin/master) upstream tip commit
[\&.\&.\&. snip some other commits \&.\&.\&.]
* cccc111 cherry\-pick of C
* aaaa111 cherry\-pick of A
[\&.\&.\&. snip a shitload mo' dat has happened \&.\&.\&.]
| * cccc000 (topic) commit C
| * bbbb000 commit B
| * aaaa000 commit A
|/
o 1234567 branch point
.fi
.if n \{\
.RE
.\}
.sp
.sp
In such cases, git\-cherry shows a cold-ass lil concise summary of what tha fuck has yet ta be applied:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git cherry origin/masta topic
\- cccc000\&.\&.\&. commit C
+ bbbb000\&.\&.\&. commit B
\- aaaa000\&.\&.\&. commit A
.fi
.if n \{\
.RE
.\}
.sp
.sp
Here, we peep dat tha commits A n' C (marked wit \-) can be dropped from yo' topic branch when you rebase it on top of origin/master, while tha commit B (marked wit +) still need ta be kept so dat it is ghon be busted ta be applied ta origin/master\&.
.SS "Usin a limit"
.sp
Da optionizzle <limit> is useful up in cases where yo' topic is based on other work dat aint up in upstream\&. Expandin on tha previous example, dis might look like:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git log \-\-graph \-\-oneline \-\-decorate \-\-boundary origin/master\&.\&.\&.topic
* 7654321 (origin/master) upstream tip commit
[\&.\&.\&. snip some other commits \&.\&.\&.]
* cccc111 cherry\-pick of C
* aaaa111 cherry\-pick of A
[\&.\&.\&. snip a shitload mo' dat has happened \&.\&.\&.]
| * cccc000 (topic) commit C
| * bbbb000 commit B
| * aaaa000 commit A
| * 0000fff (base) unpublished shiznit F
[\&.\&.\&. snip \&.\&.\&.]
| * 0000aaa unpublished shiznit A
|/
o 1234567 merge\-base between upstream n' topic
.fi
.if n \{\
.RE
.\}
.sp
.sp
By specifyin base as tha limit, you can avoid listin commits between base n' topic:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git cherry origin/masta topic base
\- cccc000\&.\&.\&. commit C
+ bbbb000\&.\&.\&. commit B
\- aaaa000\&.\&.\&. commit A
.fi
.if n \{\
.RE
.\}
.sp
.SH "SEE ALSO"
.sp
\fBgit-patch-id\fR(1)
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
