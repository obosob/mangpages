.\" Man page generated from reStructuredText.
.
.TH "KSU" "1" " " "1.11.5" "MIT Kerberos"
.SH NAME
ksu \- Kerberized super-user
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
\fBksu\fP
[ \fItarget_user\fP ]
[ \fB\-n\fP \fItarget_principal_name\fP ]
[ \fB\-c\fP \fIsource_cache_name\fP ]
[ \fB\-k\fP ]
[ \fB\-D\fP ]
[ \fB\-r\fP time ]
[ \fB\-pf\fP ]
[ \fB\-l\fP \fIlifetime\fP ]
[ \fB\-z | Z\fP ]
[ \fB\-q\fP ]
[ \fB\-e\fP \fIcommand\fP [ args ...  ] ] [ \fB\-a\fP [ args ...  ] ]
.SH REQUIREMENTS
.sp
Must have Kerberos version 5 installed ta compile ksu fo'sho.  Must have a
Kerberos version 5 server hustlin ta use ksu.
.SH DESCRIPTION
.sp
ksu be a Kerberized version of tha su program dat has two missions:
one is ta securely chizzle tha real n' effectizzle user ID ta dat of
the target user, n' tha other is ta create a freshly smoked up securitizzle context.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
For tha sake of clarity, all references ta n' attributes of
the user invokin tha program will start wit "source"
(e.g., "source user", "source cache", etc.).
.sp
Likewise, all references ta n' attributez of tha target
account will start wit "target".
.UNINDENT
.UNINDENT
.SH AUTHENTICATION
.sp
To fulfill tha straight-up original gangsta mission, ksu operates up in two phases:
authentication n' authorization. I aint talkin' bout chicken n' gravy biatch.  Resolvin tha target principal name
is tha straight-up original gangsta step up in authentication. I aint talkin' bout chicken n' gravy biatch.  Da user can either specify his
principal name wit tha \fB\-n\fP option (e.g., \fB\-n jqpublic@USC.EDU\fP)
or a thugged-out default principal name is ghon be assigned rockin a heuristic
busted lyrics bout up in tha OPTIONS section (see \fB\-n\fP option).  Da target user
name must be tha straight-up original gangsta argument ta ksu; if not specified root is the
default.  If \fB\&.\fP is specified then tha target user is ghon be the
source user (e.g., \fBksu .\fP).  If tha source user is root or the
target user is tha source user, no authentication or authorization
takes place.  Otherwise, ksu looks fo' a appropriate Kerberos ticket
in tha source cache.
.sp
Da ticket can either be fo' tha end\-server or a ticket granting
ticket (TGT) fo' tha target principal\(aqs realm.  If tha ticket fo' the
end\-server be already up in tha cache, it\(aqs decrypted n' verified. Y'all KNOW dat shit, muthafucka!  If
it\(aqs not up in tha cache but tha TGT is, tha TGT is used ta obtain the
ticket fo' tha end\-server n' shit.  Da end\-server ticket is then verified.
If neither ticket is up in tha cache yo, but ksu is compiled wit the
\fBGET_TGT_VIA_PASSWD\fP define, tha user is ghon be prompted fo' a
Kerberos password which will then be used ta git a TGT.  If tha user
is logged up in remotely n' aint gots a secure channel, tha password
may be exposed. Y'all KNOW dat shit, muthafucka!  If neither ticket is up in tha cache and
\fBGET_TGT_VIA_PASSWD\fP aint defined, authentication fails.
.SH AUTHORIZATION
.sp
This section raps bout authorization of tha source user when ksu is
invoked without tha \fB\-e\fP option. I aint talkin' bout chicken n' gravy biatch.  For a thugged-out description of tha \fB\-e\fP
option, peep tha OPTIONS section.
.sp
Upon successful authentication, ksu checks whether tha target
principal be authorized ta access tha target account.  In tha target
user\(aqs home directory, ksu attempts ta access two authorization files:
\fI\&.k5login(5)\fP n' .k5users.  In tha .k5login file each line
gotz nuff tha name of a principal dat be authorized ta access the
account.
.INDENT 0.0
.TP
.B For example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
jqpublic@USC.EDU
jqpublic/secure@USC.EDU
jqpublic/admin@USC.EDU
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Da format of .k5users is tha same, except tha principal name may be
followed by a list of commandz dat tha principal be authorized to
execute (see tha \fB\-e\fP option up in tha OPTIONS section fo' details).
.sp
Thus if tha target principal name is found up in tha .k5login file the
source user be authorized ta access tha target account.  Otherwise ksu
looks up in tha .k5users file.  If tha target principal name is found
without any trailin commandz or followed only by \fB*\fP then the
source user be authorized. Y'all KNOW dat shit, muthafucka!  If either .k5login or .k5users exist but
an appropriate entry fo' tha target principal do not exist then
access is denied. Y'all KNOW dat shit, muthafucka!  If neither file exists then tha principal will be
granted access ta tha account accordin ta tha aname\->lname mapping
rules.  Otherwise, authorization fails.
.SH EXECUTION OF THE TARGET SHELL
.sp
Upon successful authentication n' authorization, ksu proceedz up in a
similar fashizzle ta su fo'sho.  Da environment is unmodified wit the
exception of USER, HOME n' SHELL variables.  If tha target user is
not root, USER gets set ta tha target user name.  Otherwise USER
remains unchanged. Y'all KNOW dat shit, muthafucka!  Both HOME n' SHELL is set ta tha target login\(aqs
default joints, n' you can put dat on yo' toast.  In addition, tha environment variable \fBKRB5CCNAME\fP
gets set ta tha name of tha target cache.  Da real n' effectizzle user
ID is chizzled ta dat of tha target user n' shit.  Da target user\(aqs shell is
then invoked (the shell name is specified up in tha password file).  Upon
termination of tha shell, ksu deletes tha target cache (unless ksu is
invoked wit tha \fB\-k\fP option).  This is implemented by first bustin a
fork n' then a exec, instead of just exec, as done by su.
.SH CREATING A NEW SECURITY CONTEXT
.sp
ksu can be used ta create a freshly smoked up securitizzle context fo' tha target
program (either tha target shell, or command specified via tha \fB\-e\fP
option).  Da target program inherits a set of credentials from the
source user n' shit.  By default, dis set includes all of tha credentials in
the source cache plus any additionizzle credentials obtained during
authentication. I aint talkin' bout chicken n' gravy biatch.  Da source user be able ta limit tha credentials in
this set by rockin \fB\-z\fP or \fB\-Z\fP option. I aint talkin' bout chicken n' gravy biatch.  \fB\-z\fP restricts tha copy
of tickets from tha source cache ta tha target cache ta only the
tickets where client == tha target principal name.  Da \fB\-Z\fP option
provides tha target user wit a gangbangin' fresh target cache (no credz up in the
cache).  Note dat fo' securitizzle reasons, when tha source user is root
and target user is non\-root, \fB\-z\fP option is tha default mode of
operation.
.sp
While no authentication takes place if tha source user is root or is
the same as tha target user, additionizzle tickets can still be obtained
for tha target cache.  If \fB\-n\fP is specified n' no credentials can
be copied ta tha target cache, tha source user is prompted fo' a
Kerberos password (unless \fB\-Z\fP specified or \fBGET_TGT_VIA_PASSWD\fP
is undefined).  If successful, a TGT is obtained from tha Kerberos
server n' stored up in tha target cache.  Otherwise, if a password is
not provided (user hit return) ksu continues up in a aiiight mode of
operation (the target cache aint gonna contain tha desired TGT).  If the
wrong password is typed in, ksu fails.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Durin authentication, only tha tickets dat could be
obtained without providin a password is cached up in in the
source cache.
.UNINDENT
.UNINDENT
.SH OPTIONS
.INDENT 0.0
.TP
.B \fB\-n\fP \fItarget_principal_name\fP
Specify a Kerberos target principal name.  Used up in authentication
and authorization phasez of ksu.
.sp
If ksu is invoked without \fB\-n\fP, a thugged-out default principal name is
assigned via tha followin heuristic:
.INDENT 7.0
.IP \(bu 2
Case 1: source user is non\-root.
.sp
If tha target user is tha source user tha default principal name
is set ta tha default principal of tha source cache.  If the
cache do not exist then tha default principal name is set to
\fBtarget_user@local_realm\fP\&.  If tha source n' target playas are
different n' neither \fB~target_user/.k5users\fP nor
\fB~target_user/.k5login\fP exist then tha default principal name
is \fBtarget_user_login_name@local_realm\fP\&.  Otherwise, starting
with tha straight-up original gangsta principal listed below, ksu checks if the
principal be authorized ta access tha target account n' whether
there be a legitimate ticket fo' dat principal up in tha source
cache.  If both conditions is kicked it wit dat principal becomes the
default target principal, otherwise git all up in tha next principal.
.INDENT 2.0
.IP a. 3
default principal of tha source cache
.IP b. 3
target_user@local_realm
.IP c. 3
source_user@local_realm
.UNINDENT
.sp
If a\-c fails try any principal fo' which there be a ticket in
the source cache n' dat be authorized ta access tha target
account.  If dat fails select tha straight-up original gangsta principal dat is
authorized ta access tha target account from tha above list.  If
none is authorized n' ksu is configured with
\fBPRINC_LOOK_AHEAD\fP turned on, select tha default principal as
bigs up:
.sp
For each muthafucka up in tha above list, select a authorized
principal dat has tha same ol' dirty realm name n' first part of the
principal name equal ta tha prefix of tha muthafucka.  For
example if muthafucka a) is \fBjqpublic@ISI.EDU\fP and
\fBjqpublic/secure@ISI.EDU\fP be authorized ta access tha target
account then tha default principal is set to
\fBjqpublic/secure@ISI.EDU\fP\&.
.IP \(bu 2
Case 2: source user is root.
.sp
If tha target user is non\-root then tha default principal name
is \fBtarget_user@local_realm\fP\&.  Else, if tha source cache
exists tha default principal name is set ta tha default
principal of tha source cache.  If tha source cache do not
exist, default principal name is set ta \fBroot\e@local_realm\fP\&.
.UNINDENT
.UNINDENT
.sp
\fB\-c\fP \fIsource_cache_name\fP
.INDENT 0.0
.INDENT 3.5
Specify source cache name (e.g., \fB\-c FILE:/tmp/my_cache\fP).  If
\fB\-c\fP option aint used then tha name is obtained from
\fBKRB5CCNAME\fP environment variable.  If \fBKRB5CCNAME\fP is not
defined tha source cache name is set ta \fBkrb5cc_<source uid>\fP\&.
Da target cache name be automatically set ta \fBkrb5cc_<target
uid>.(gen_sym())\fP, where gen_sym generates a freshly smoked up number such that
the resultin cache do not already exist.  For example:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
krb5cc_1984.2
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \fB\-k\fP
Do not delete tha target cache upon termination of tha target
shell or a cold-ass lil command (\fB\-e\fP command).  Without \fB\-k\fP, ksu deletes
the target cache.
.TP
.B \fB\-D\fP
Turn on debug mode.
.TP
.B \fB\-z\fP
Restrict tha copy of tickets from tha source cache ta tha target
cache ta only tha tickets where client == tha target principal
name.  Use tha \fB\-n\fP option if you want tha tickets fo' other then
the default principal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Note dat tha \fB\-z\fP option is mutually
exclusive wit tha \fB\-Z\fP option.
.TP
.B \fB\-Z\fP
Don\(aqt copy any tickets from tha source cache ta tha target cache.
Just create a gangbangin' fresh target cache, where tha default principal name
of tha cache is initialized ta tha target principal name.  Note
that tha \fB\-Z\fP option is mutually exclusive wit tha \fB\-z\fP
option.
.TP
.B \fB\-q\fP
Suppress tha printin of status lyrics.
.UNINDENT
.sp
Ticket grantin ticket options:
.INDENT 0.0
.TP
.B \fB\-l\fP \fIlifetime\fP \fB\-r\fP \fItime\fP \fB\-pf\fP
Da ticket grantin ticket options only apply ta tha case where
there is no appropriate tickets up in tha cache ta authenticate the
source user n' shit.  In dis case if ksu is configured ta prompt users
for a Kerberos password (\fBGET_TGT_VIA_PASSWD\fP is defined), the
ticket grantin ticket options dat is specified is ghon be used
when gettin a ticket grantin ticket from tha Kerberos server.
.TP
.B \fB\-l\fP \fIlifetime\fP
(\fIduration\fP string.)  Specifies tha gametime ta be requested
for tha ticket; if dis option aint specified, tha default ticket
lifetime (12 hours) is used instead.
.TP
.B \fB\-r\fP \fItime\fP
(\fIduration\fP string.)  Specifies dat tha \fBrenewable\fP option
should be axed fo' tha ticket, n' specifies tha desired
total gametime of tha ticket.
.TP
.B \fB\-p\fP
specifies dat tha \fBproxiable\fP option should be axed for
the ticket.
.TP
.B \fB\-f\fP
option specifies dat tha \fBforwardable\fP option should be
axed fo' tha ticket.
.TP
.B \fB\-e\fP \fIcommand\fP [\fIargs\fP ...]
ksu proceedz exactly tha same as if dat shiznit was invoked without the
\fB\-e\fP option, except instead of executin tha target shell, ksu
executes tha specified command. Y'all KNOW dat shit, muthafucka! Example of usage:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ksu bob \-e ls \-lag
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Da authorization algorithm fo' \fB\-e\fP be as bigs up:
.sp
If tha source user is root or source user == target user, no
authorization takes place n' tha command is executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If source
user id != 0, n' \fB~target_user/.k5users\fP file do not exist,
authorization fails.  Otherwise, \fB~target_user/.k5users\fP file
must have a appropriate entry fo' target principal ta get
authorized.
.sp
Da .k5users file format:
.sp
A single principal entry on each line dat may be followed by a
list of commandz dat tha principal be authorized ta execute.  A
principal name followed by a \fB*\fP means dat tha user is
authorized ta execute any command. Y'all KNOW dat shit, muthafucka!  Thus, up in tha following
example:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
jqpublic@USC.EDU ls mail /local/kerberos/klist
jqpublic/secure@USC.EDU *
jqpublic/admin@USC.EDU
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBjqpublic@USC.EDU\fP is only authorized ta execute \fBls\fP,
\fBmail\fP n' \fBklist\fP commands.  \fBjqpublic/secure@USC.EDU\fP is
authorized ta execute any command. Y'all KNOW dat shit, muthafucka!  \fBjqpublic/admin@USC.EDU\fP is
not authorized ta execute any command. Y'all KNOW dat shit, muthafucka!  Note, that
\fBjqpublic/admin@USC.EDU\fP be authorized ta execute tha target
shell (regular ksu, without tha \fB\-e\fP option) but
\fBjqpublic@USC.EDU\fP is not.
.sp
Da commandz listed afta tha principal name must be either a gangbangin' full
path names or just tha program name.  In tha second case,
\fBCMD_PATH\fP specifyin tha location of authorized programs must
be defined all up in tha compilation time of ksu fo'sho.  Which command gets
executed?
.sp
If tha source user is root or tha target user is tha source user
or tha user be authorized ta execute any command (\fB*\fP entry)
then command can be either a gangbangin' full or a relatizzle path leadin to
the target program.  Otherwise, tha user must specify either a
full path or just tha program name.
.TP
.B \fB\-a\fP \fIargs\fP
Specify arguments ta be passed ta tha target shell.  Note dat all
flags n' parametas followin \-a is ghon be passed ta tha shell,
thus all options intended fo' ksu must precede \fB\-a\fP\&.
.sp
Da \fB\-a\fP option can be used ta simulate tha \fB\-e\fP option if
used as bigs up:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-a \-c [command [arguments]].
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fB\-c\fP is interpreted by tha c\-shell ta execute tha command.
.UNINDENT
.SH INSTALLATION INSTRUCTIONS
.sp
ksu can be compiled wit tha followin four flags:
.INDENT 0.0
.TP
.B \fBGET_TGT_VIA_PASSWD\fP
In case no appropriate tickets is found up in tha source cache, the
user is ghon be prompted fo' a Kerberos password. Y'all KNOW dat shit, muthafucka!  Da password is
then used ta git a ticket grantin ticket from tha Kerberos
server n' shit.  Da dark shiznit of configurin ksu wit dis macro is if the
source user is logged up in remotely n' aint gots a secure
channel, tha password may git exposed.
.TP
.B \fBPRINC_LOOK_AHEAD\fP
Durin tha resolution of tha default principal name,
\fBPRINC_LOOK_AHEAD\fP enablez ksu ta find principal names in
the .k5users file as busted lyrics bout up in tha OPTIONS section
(see \fB\-n\fP option).
.TP
.B \fBCMD_PATH\fP
Specifies a list of directories containin programs dat playas are
authorized ta execute (via .k5users file).
.TP
.B \fBHAVE_GETUSERSHELL\fP
If tha source user is non\-root, ksu insists dat tha target user\(aqs
shell ta be invoked be a "legal shell".  \fIgetusershell(3)\fP is
called ta obtain tha namez of "legal shells".  Note dat the
target user\(aqs shell is obtained from tha passwd file.
.TP
.B Sample configuration:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
KSU_OPTS = \-DGET_TGT_VIA_PASSWD \-DPRINC_LOOK_AHEAD \-DCMD_PATH=\(aq"/bin /usr/ucb /local/bin"
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
ksu should be owned by root n' have tha set user id bit turned on.
.sp
ksu attempts ta git a ticket fo' tha end server just as Kerberized
telnet n' rlogin. I aint talkin' bout chicken n' gravy biatch.  Thus, there must be a entry fo' tha server up in the
Kerberos database (e.g., \fBhost/nii.isi.edu@ISI.EDU\fP).  Da keytab
file must be up in a appropriate location.
.SH SIDE EFFECTS
.sp
ksu deletes all expired tickets from tha source cache.
.SH AUTHOR OF KSU
.sp
GENNADY (ARI) MEDVINSKY
.SH AUTHOR
MIT
.SH COPYRIGHT
1985-2014, MIT
.\" Generated by docutils manpage writer.
.
