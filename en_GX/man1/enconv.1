.de XA
.RS
.PP
\\$1
.RE
.PP
..
.TH "enca" "1" "Sep 2009" "enca 1.11" " "
.SH "NAME"
.PP
enca \-\- detect n' convert encodin of text files
.
.
.SH "SYNOPSIS"
.PP
\fBenca\fR [\fB\-L\fR \fILANGUAGE\fR] [\fIOPTION\fR]... [\fIFILE\fR]...
.br
\fBenconv\fR [\fB\-L\fR \fILANGUAGE\fR] [\fIOPTION\fR]... [\fIFILE\fR]...
.
.SH "INTRODUCTION AND EXAMPLES"
.PP
If yo ass is dirty enough, tha only two thangs yo big-ass booty is ghon eva need ta know are:
command
.XA "enca \fIFILE\fR"
will rap  which encodin file \fIFILE\fR uses (without changin it), and
.XA "enconv \fIFILE\fR"
will convert file \fIFILE\fR ta yo' locale natizzle encoding.
To convert tha file ta some other encodin use tha \fB-x\fR option
(see \fB\-x\fR entry up in section \fBOPTIONS\fR n' sections \fBCONVERSION\fR
and \fBENCODINGS\fR fo' details).
.PP
Both work wit multiple filez n' standard input (output) like a muthafucka.
E.g.
.XA "enca \-x latin2 <sometext | lpr"
assures file `sometext' is up in ISO Latin\~2 when itz busted ta printer.
.PP
Da main reason why these command will fail n' turn yo' filez into
garbage is dat Enca need ta know they language ta detect tha encoding.
It tries ta determine yo' language n' preferred charset from locale
settings, which might not be what tha fuck you want.
.PP
Yo ass can (or have to) use \fB\-L\fR option ta tell it tha right language.
Suppose, you downloaded some Russian HTML file,
`file.htm', it fronts itz windows-1251 but it aint.
So you run
.XA "enca \-L ru file.htm"
and smoke up itz KOI8\-R (for example).
Be warned, currently there be not nuff supported languages (see section
\fBLANGUAGES\fR).
.PP
Another warnin concerns tha fact nuff muthafuckin Encaz features, namely its
charset conversion capabilities, straight fuckin depend on what tha fuck other tools
are installed on yo' system (see section \fBCONVERSION)\fR\-\-run
.XA "enca \-\-version"
to git list of features (see section \fBFEATURES\fR).
Also try
.XA "enca \-\-help"
to git description of all other Enca options (and ta find tha rest of this
manual page redundant).
.
.
.SH "DESCRIPTION"
.PP
Enca readz given text files, or standard input when none is given,
and uses knowledge bout they language (must be supported by you)
and a mixture of parsing, statistical analysis, guessin and
black magic ta determine they encodings, which it then prints ta standard
output (or it confesses it aint gots any scam what tha fuck tha encodin could be).
By default, Enca presents thangs up in dis biatch as a multiline human-readable descriptions,
several other formats is available\-\-see Output type selectors below.
.PP
Enca can also convert filez ta some other encodin \fIENC\fR
when you ask fo' it\-\-either rockin a funky-ass built\-in converter,
some conversion library, or by callin a external converter.
.PP
Encaz primary goal is ta be usable unattended, as a automatic conversion
tool, though it like aint reached dis point yet (please peep section
\fBSECURITY\fR).
.PP
Please note except rare cases Enca straight-up has ta know tha language of input
filez ta hit you wit a reliable answer.
On tha other hand, it can then cope like well wit filez dat is not purely
textual or even detect charset of text strings inside some binary file;
of course, it dependz on tha characta of tha non-text component.
.PP
Enca don't care bout structure of input files, it views dem as a uniform
piece of text/data.  In case of multipart filez (e.g. mailboxes), you have to
use some tool knowin tha structure ta extract tha individual parts first.
It aint nuthin but tha cost of mobilitizzle ta detect encodingz of any damaged, incomplete or
otherwise incorrect files.
.
.
.SH "OPTIONS"
.PP
There is nuff muthafuckin categoriez of options: operation mode options, output type
selectors, guessin parameters, conversion parameters, general options and
listings.
.PP
All long options can be abbreviated as long as they is unambiguous,
mandatory parametaz of long options is mandatory fo' short options like a muthafucka.
.PP
.
.SS Operation modes
.PP
are following:
.TP
\fB\-c\fR, \fB\-\-auto\-convert\fR
Equivalent ta callin Enca as \fBenconv\fR.
.sp
If no output type selector is specified, detect file encodings, guess your
preferred charset from locales, n' convert filez ta it (only available with
+target\-charset\-auto feature).
.TP
\fB\-g\fR, \fB\-\-guess\fR
Equivalent ta callin Enca as \fBenca\fR.
.sp
If no output type selector is specified, detect file encodings n' report
them.
.PP
.
.SS Output type selectors
.PP
select what tha fuck action Enca will take when it determines tha encoding;
most of dem just chizzle between different names, formats n' conventions
how encodings can be printed yo, but one of dem (\fB\-x\fR)
is special: it  drops some lyrics ta Enca ta recode filez ta some other
encodin \fIENC\fR.
These options is mutually exclusive; if you specify mo' than one output
type selector tha last one takes precedence.
.sp
Several output types represent charset name used by some other program,
but not all these programs know all tha charsets which Enca recognises.
Be warned, Enca make no difference between unrecognised charset and
charset havin no name up in given namespace up in such thangs.
.TP
\fB\-d\fR, \fB\-\-details\fR
It used ta print all dem pagez of details bout tha guessin process yo, but since
Enca is just a program linked against Enca library, dis aint possible and
this option is roughly equivalent ta \fB\-\-human\-readable\fR,
except it reports failure reason when Enca don't recognize tha encoding.
.TP
\fB\-e\fR, \fB\-\-enca\-name\fR
Prints Encaz sick name of tha charset, i.e., like da most thugged-out generally
accepted n' mo' or less human-readable charset identifier,
with surfaces appended.
.sp
This name is used when callin a external converter, like a muthafucka.
.TP
\fB\-f\fR, \fB\-\-human\-readable\fR
Prints verbal description of tha detected charset n' surfaces\-\-something
a human understandz best.
This is tha default behaviour.
.sp
Da precise format is following: tha straight-up original gangsta line gotz nuff charset name alone,
and itz followed by zero or mo' indented lines containin namez of detected
surfaces.
This format is not, however, suitable or intended fo' further
machine-processing, n' tha verbal charset descriptions is like ta chizzle
in tha future.
.TP
\fB\-i\fR, \fB\-\-iconv\-name\fR
Prints how tha fuck \fIiconv\fR(3) (and/or \fIiconv\fR(1)) calls tha detected charset.
Mo' precisely, it prints one, mo' or less arbitrarily chosen, alias
accepted by iconv.
A charset unknown ta iconv counts as unknown.
.sp
This output type make sense only when Enca is compiled wit iconv support
(feature +iconv\-interface).
.TP
\fB\-r\fR, \fB\-\-rfc1345\-name\fR
Prints RFC\~1345 charset name.
When such a name don't exist cuz RFC\~1345 don't define a given
encoding, some other name defined up in some other RFC or just tha name which
lyricist considaz `da most thugged-out canonical', is printed.
.sp
Since RFC\~1345 don't define surfaces, no surface info be appended.
.TP
\fB\-m\fR, \fB\-\-mime\-name\fR
Prints preferred MIME name of detected charset.  This is tha name you should
normally use when fixin e-mails or wizzy pages.
.sp
A charset not present up in http://www.iana.org/assignments/character-sets
counts as unknown.
.TP
\fB\-s\fR, \fB\-\-cstocs\-name\fR
Prints how tha fuck \fIcstocs\fR(1) calls tha detected charset.
A charset unknown ta cstocs counts as unknown.
.TP
\fB\-n\fR, \fB\-\-name=\fR\fIWORD\fR
Prints charset (encoding) name selected by \fIWORD\fR (can be abbreviated as
long as is unambiguous).
For names listed above, \fB\-\-name=\fR\fIWORD\fR is equivalent to
\fB\-\-\fR\fIWORD\fR.
.sp
Usin \fBaliases\fR as tha output type causes Enca ta print list of all
accepted aliasez of detected charset.
.TP
\fB\-x\fR, \fB\-\-convert\-to=\fR[\fB..\fR]\fIENC\fR
Converts file ta encodin \fIENC\fR.
.sp
Da optionizzle `..' before encodin name has no special meaning, except you can
use it ta remind yo ass that, unlike up in \fIrecode\fR(1), you should specify
\fIdesired\fR encoding, instead of current.
.sp
Yo ass can use \fIrecode\fR(1) recodin chains or any other kind of domedead
recodin justification fo' \fIENC\fR, provided dat you tell Enca ta use some
tool understandin it fo' conversion (see section \fBCONVERSION\fR).
.sp
When Enca fails ta determine tha encoding, it prints a warnin n' leaves the
the file as is; when it is run as a gangbangin' filta it tries ta do its dopest ta copy
standard input ta standard output unchanged.
Nevertheless, you should not rely on it n' do backup.
.PP
.
.SS Guessin parameters
.PP
Therez only one: \fB\-L\fR settin language of input files. This option is
mandatory (but peep below).
.TP
\fB\-L\fR, \fB\-\-language=\fR\fILANG\fR
Sets language of input filez ta \fILANG\fR.
.sp
Mo' precisely, \fILANG\fR can be any valid locale name (or alias with
+locale\-alias feature) of some supported language.
Yo ass can also specify `none' as language name, only multibyte encodings are
recognised then.
Run
.sp
enca \-\-list languages
.sp
to git list of supported languages.
When you don't specify any language Enca tries ta guess yo' language from
locale settings n' assumes input filez use dis language.
See section \fBLANGUAGES\fR fo' details.
.PP
.
.SS Conversion parameters
.PP
give you finer control of how tha fuck charset conversion is ghon be performed.
They don't affect anythang when \fB\-x\fR aint specified as output type.
Please peep section \fBCONVERSION\fR fo' tha gory conversion details.
.TP
\fB\-C\fR, \fB\-\-try\-converters=\fR\fILIST\fR
Appendz comma separated \fILIST\fR ta tha list of convertas dat will
be tried when you ask fo' conversion.
Their names can be abbreviated as long as they is unambiguous.
Run
.sp
enca \-\-list converters
.sp
to git list of all valid converta names (and peep section \fBCONVERSION\fR
for they description).
.sp
Da default list dependz on how tha fuck Enca has been compiled, run
.sp
enca \-\-help
.sp
to smoke up default converta list.
.sp
Note tha default list is used only when you don't specify \fB\-C\fR at all.
Otherwise, tha list is built as if it was initially empty n' every
\fB\-C\fR addz freshly smoked up converter(s) ta dat shit.  Mo'over, specifying
\fBnone\fR as converta name causes clearin tha converta list.
.TP
\fB\-E\fR, \fB\-\-external\-converter\-program=\fR\fIPATH\fR
Sets external converta program name ta \fIPATH\fR.
Default external converta dependz on how tha fuck enca has been complied, n' the
possibilitizzle ta use external convertas may not be available at all.
Run
.sp
enca \-\-help
.sp
to smoke up default converta program up in yo' enca build.
.PP
.
.SS General options
.PP
don't fit ta other option categories...
.TP
\fB\-p\fR, \fB\-\-with\-filename\fR
Forces Enca ta prefix each result wit correspondin file name.
By default, Enca prefixes thangs up in dis biatch wit filenames when run on multiple files.
.sp
Standard input is printed as \fBSTDIN\fR
and standard output as \fBSTDOUT\fR
(the latta can be probably peeped up in error lyrics only).
.TP
\fB\-P\fR, \fB\-\-no\-filename\fR
Forces Enca ta not prefix thangs up in dis biatch wit file names.
By default, Enca don't prefix result wit file name when
run on a single file (includin standard input).
.TP
\fB\-V\fR, \fB\-\-verbose\fR
Increases verbositizzle level (each use increases it by one).
.sp
Currently dis option up in not straight-up useful cuz different partz of Enca
respond differently ta tha same verbositizzle level, mostly not at all.
.PP
.
.SS Listings
.PP
are all terminal, i.e. when Enca encountas a shitload of dem it prints
the required listin n' terminates without processin any followin options.
.TP
\fB\-h\fR, \fB\-\-help\fR
Prints brief usage help.
.TP
\fB\-G\fR, \fB\-\-license\fR
Prints full Enca license (all up in a pager, if possible).
.TP
\fB\-l\fR, \fB\-\-list=\fR\fIWORD\fR
Prints list specified by \fIWORD\fR (can be abbreviated as long as it is
unambiguous).
Available lists include:
.sp
\fBbuilt\-in\-charsets\fR.
All encodings convertible by built\-in converter, by group
(both input n' output encodin must be from dis list n' belong ta tha same
group fo' internal conversion).
.sp
\fBbuilt\-in\-encodings\fR.
Equivalent ta \fBbuilt\-in\-charsets\fR yo, but considered obsolete; will
be accepted wit a warning, fo' a while.
.sp
\fBconverters\fR.
All valid converta names (to be used wit \fB\-C\fR).
.sp
\fBcharsets\fR.
All encodings (charsets).
Yo ass can select what tha fuck names is ghon be printed wit \fB\-\-name\fR or any
name output type selector (of course, only encodings havin a name up in given
namespace is ghon be printed then), tha selector must be specified \fIbefore\fR
\fB\-\-list\fR.
.sp
\fBencodings\fR.
Equivalent ta \fBcharsets\fR yo, but considered obsolete; will
be accepted wit a warning, fo' a while.
.sp
\fBlanguages\fR.
All supported languages together wit charsets belongin ta em.
Note output type selects language name style, not charset name steez here.
.sp
\fBnames\fR.
All possible jointz of \fB\-\-name\fR option.
.sp
\fBlists\fR.
All possible jointz of dis option.
(Crazy?)
.sp
\fBsurfaces\fR.
All surfaces Enca recognises.
.TP
\fB\-v\fR, \fB\-\-version\fR
Prints program version n' list of features (see section \fBFEATURES\fR).
.
.
.SH "CONVERSION"
.PP
Though Enca has been originally designed as a tool fo' guessin encoding
only, it now features nuff muthafuckin methodz of charset conversion.
Yo ass can control which of dem is ghon be used wit \fB\-C\fR.
.PP
Enca sequentially tries convertas from tha list specified by \fB\-C\fR
until it findz some that
is able ta big-ass up required conversion or until it exhausts tha list.
Yo ass should specify preferred convertas first, less preferred later.
External converta (\fBextern\fR)
should be always specified last, only as last resort, since itz probably not
possible ta recover when it fails.
Da default list of convertas always starts wit \fBbuilt\-in\fR n' then
continues wit tha straight-up original gangsta one available from: \fBlibrecode\fR, \fBiconv\fR,
nothing.
.PP
It should be noted when Enca say it aint able ta big-ass up the
conversion it only means none of tha convertas be able ta big-ass up dat shit.
It can be still possible ta big-ass up tha required conversion up in nuff muthafuckin steps,
usin nuff muthafuckin convertas yo, but ta figure up how, human intelligence is
probably needed.
.PP
.
.SS Built\-in converter
.PP
is tha simplest n' far tha fastest of all, can big-ass up only
a few byte-to-byte conversions n' modifies filez directly up in place (may
be considered dangerous yo, but is pretty efficient).  Yo ass can git list of
all encodings it can convert with
.XA "enca \-\-list built\-in"
Beside speed, its main advantage (and also disadvantage) is dat it don't
care: it simply converts charactas havin a representation up in target
encoding, don't bust a nut on anythang else n' never prints any error message.
.sp
This converta can be specified as \fBbuilt\-in\fR wit \fB\-C\fR.
.PP
.
.SS Librecode converter
.PP
is a intercourse ta GNU recode library, dat do tha actual recodin thang.
It may or may not be compiled in; run
.XA "enca \-\-version"
to smoke up its availabilitizzle up in yo' enca build
(feature +librecode\-interface).
.sp
Yo ass should be familiar wit \fIrecode\fR(1) before rockin it,
since recode be a like sophisticated n' bangin charset conversion tool.
Yo ass may run tha fuck into problems rockin it together wit Enca
particularly cuz Encaz support fo' surfaces not 100% compatible,
because recode tries too hard ta make tha transformation reversible,
because it sometimes silently ignores I/O errors,
and cuz itz incredibly buggy.
Please peep GNU recode info pages fo' details bout recode library.
.sp
This converta can be specified as \fBlibrecode\fR wit \fB\-C\fR.
.PP
.
.SS Iconv converter
.PP
is a intercourse ta tha UNIX98 \fIiconv\fR(3)
conversion functions, dat do tha actual recodin thang.
It may or may not be compiled in; run
.XA "enca \-\-version"
to smoke up its availabilitizzle up in yo' enca build
(feature +iconv\-interface).
.sp
While iconv is present on most todizzle systems it only rarely
offer some useful set of available conversions, tha only notable exception
bein iconv from GNU libc.
It be probably like picky bout surfaces, too (while, all up in tha same time,
not implementin surface conversion).
It however probably represents tha only standard(ized) tool
able ta big-ass up conversion from/to Unicode.
Please peep iconv documentation bout fo' details bout its capabilitizzles on
your particular system.
.sp
This converta can be specified as \fBiconv\fR wit \fB\-C\fR.
.PP
.
.SS External converter
.PP
is a arbitrary external conversion tool dat can be specified with
\fB\-E\fR option (at most one can be defined simultaneously).
There is some standard, provided together wit enca: \fBcstocs\fR,
\fBrecode\fR, \fBmap\fR, \fBumap\fR, n' \fBpiconv\fR.
All is wrapper scripts: fo' \fIcstocs\fR(1), \fIrecode\fR(1),
\fImap\fR(1), \fIumap\fR(1), n' \fIpiconv\fR(1).
.sp
Please note enca has lil control what tha fuck tha external converta straight-up do.
If you set it ta \fB/bin/rm\fR
yo ass is straight-up responsible fo' tha consequences.
.sp
If you wanna make yo' own converta ta use wit enca,
you should know it be always called
.XA "\fICONVERTER\fR \fIENC_CURRENT\fR \fIENC\fR \fIFILE\fR [\fB\-\fR]"
where \fICONVERTER\fR is what tha fuck has been set by \fB\-E\fR,
\fIENC_CURRENT\fR is detected encoding,
\fIENC\fR is what tha fuck has been specified wit \fB\-x\fR,
and \fIFILE\fR is tha file ta convert, i.e. it is called fo' each file
separately.
Da optionizzle fourth parameter, \fB\-\fR, should cause (when present)
sendin result of conversion ta standard output instead of overwriting
the file \fIFILE\fR.
Da converta should also take care of not changin file permissions,
returnin error code\~1 when it fails n' cleanin its temporary files.
Please peep tha standard external convertas fo' examples.
.sp
This converta can be specified as \fBextern\fR wit \fI\-C\fR.
.PP
.
.SS Default target charset
.PP
Da straightforward way of specifyin target charset is tha \fB\-x\fR
option, which overrides any defaults.
When Enca is called as \fBenconv\fR, default target charset is selected
exactly tha same way as \fIrecode\fR(1) do dat shit.
.PP
If tha \fBDEFAULT_CHARSET\fR environment variable is set, itz used as the
target charset.
.PP
Otherwise, if you system serves up tha \fInl_langinfo\fR(3) function, current
localez natizzle charset is used as tha target charset.
.PP
When both methodz fail, Enca bitches n' terminates.
.PP
.
.SS Reversibilitizzle notes
.PP
If reversibilitizzle is crucial fo' you, you shouldn't use enca as converter
at all (or maybe you can, wit straight-up specifically designed \fIrecode\fR(1)
wrapper).
Otherwise you should at least know dat there four
basic meanz of handlin inconvertible characta entities:
.sp
fail\-\-this be a possibility, too, n' incidentally itz exactly what tha fuck current
GNU libc iconv implementation do (recode can be also holla'd at ta do it)
.sp
don't bust a nut on them\-\-this is what tha fuck enca internal converta always do and
recode can do; though it aint reversible, a human bein is probably able to
reconstruct tha original gangsta (at least up in principle)
.sp
approximate them\-\-this is what tha fuck cstocs can do, n' recode too, though
differently; n' tha dopest chizzle if you
just wanna make tha accursed text readable
.sp
drop dem out\-\-this is what tha fuck both recode n' cstocs can do (cstocs can also
replace these charactas by some fixed characta instead of mere ignoring);
useful when tha to\-be\-omitted charactas contain only noise.
.sp
Please consult yo' most straight-up bangin converta manual fo' detailz of dis issue.
Generally, if yo ass is not dirty enough ta have all convertible characters
in you file, manual intervention is needed anyway.
.PP
.
.SS Performizzle notes
.PP
Skanky performizzle of available convertas has been one of main reasons for
includin built\-in converta up in enca.
Try ta use it whenever possible, i.e. when filez up in consideration are
charset-clean enough or charset-messy enough so dat its zero built\-in
intelligence don't matter.
It requires no extra disk space nor extra memory n' can outperform
\fIrecode\fR(1) mo' than 10 times on big-ass filez n' Perl
version (i.e. tha fasta one) of \fIcstocs\fR(1) mo' than 400 times on small
filez (in fact itz almost as fast as mere \fIcp\fR(1)).
.PP
Try ta avoid external convertas when it aint straight-up necessary since
all tha forkin n' movin shiznit round is incredibly slow.
.
.
.SH "ENCODINGS"
.PP
Yo ass can git list of recognised characta sets with
.XA "enca \-\-list charsets"
and rockin \fB\-\-name\fR parameta you can select any name you wanna be
used up in tha listing.
Yo ass can also list all surfaces with
.XA "enca \-\-list surfaces"
Encodin n' surface names is case insensitizzle n' non-alphanumeric
charactas is not taken tha fuck into account.
But fuck dat shiznit yo, tha word on tha street is dat non-alphanumeric charactas is mostly
not allowed at all.  Da only allowed are: `\-', `_', `.', `:', and\~`/'
(as charset/surface separator).
So `ibm852' n' `IBM-852' is tha same, while `IBM 852' aint accepted.
.PP
.
.SS Charsets
.PP
Peepin list of recognised charsets uses Encaz names (\fB\-e\fR) and
verbal descriptions as reported by Enca (\fB\-f\fR):
.PP
.TS
tab (@);
l l.
ASCII@7bit ASCII characters
ISO-8859-2@ISO 8859-2 standard; ISO Latin 2
ISO-8859-4@ISO 8859-4 standard; Latin 4
ISO-8859-5@ISO 8859-5 standard; ISO Cyrillic
ISO-8859-13@ISO 8859-13 standard; ISO Baltic; Latin 7
ISO-8859-16@ISO 8859-16 standard
CP1125@MS-Windows code page 1125
CP1250@MS-Windows code page 1250
CP1251@MS-Windows code page 1251
CP1257@MS-Windows code page 1257; WinBaltRim
IBM852@IBM/MS code page 852; PC (DOS) Latin 2
IBM855@IBM/MS code page 855
IBM775@IBM/MS code page 775
IBM866@IBM/MS code page 866
baltic@ISO-IR-179; Baltic
KEYBCS2@Kamenicky encoding; KEYBCS2
macce@Macintosh Central European
maccyr@Macintosh Cyrillic
ECMA-113@Ecma Cyrillic; ECMA-113
KOI-8_CS_2@KOI8-CS2 code (`T602')
KOI8-R@KOI8-R Cyrillic
KOI8-U@KOI8-U Cyrillic
KOI8-UNI@KOI8-Unified Cyrillic
TeX@(La)TeX control sequences
UCS-2@Universal characta set 2 bytes; UCS-2; BMP
UCS-4@Universal characta set 4 bytes; UCS-4; ISO-10646
UTF-7@Universal transformation format 7 bits; UTF-7
UTF-8@Universal transformation format 8 bits; UTF-8
CORK@Cork encoding; T1
GBK@Simplified Chinese Nationizzle Standard; GB2312
BIG5@Traditionizzle Chinese Industrial Standard; Big5
HZ@HZ encoded GB2312
unknown@Unrecognized encoding
.TE
.PP
where \fBunknown\fR aint any real encoding,
itz reported when Enca aint able ta give a reliable answer.
.PP
.
.SS Surfaces
.PP
Enca has some experimenstrual support fo' so-called surfaces (see below).
It detects followin surfaces (not all can be applied ta all charsets):
.PP
.TS
tab (@);
l l.
/CR@CR line terminators
/LF@LF line terminators
/CRLF@CRLF line terminators
N.A.@Mixed line terminators
N.A.@Surrounded by/intermixed wit non-text data
/21@Byte order reversed up in pairs (1,2 -> 2,1)
/4321@Byte order reversed up in quadruplez (1,2,3,4 -> 4,3,2,1)
N.A.@Both lil n' big-ass endian chunks, concatenated
/qp@Quoted-printable encoded
.TE
.PP
Note some surfaces have N.A. up in place of identifier\-\-they
cannot be specified on command line, they can only be reported by Enca.
This is intentionizzle cuz they only inform you why tha file cannot be
considered surface-consistent instead of representin a real surface.
.PP
Each charset has its natural surface (called `implied' up in recode) which is not
reported, e.g., fo' IBM 852 charset itz `CRLF line terminators'.
For UCS encodings, big-ass endian is considered as natural surface;
unusual byte ordaz is constructed from 21 n' 4321 permutations:
2143 is reported simply as 21,
while 3412 is reported as combination of 4321 n' 21.
.PP
Doubly-encoded UTF-8 is neither charset nor surface, itz just reported.
.PP
.
.SS Bout charsets, encodings n' surfaces
.PP
Charset be a set of characta entitizzles while encodin is its representation
in tha termz of bytes n' bits.
In Enca, tha word \fIencoding\fR means tha same ol' dirty as `representation of text',
i.e. tha relation between sequence of characta entitizzles constitutin the
text n' sequence of bytes (bits) constitutin tha file.
.PP
So, encodin is both characta set n' so-called surface
(line terminators, byte order, combining, Base64 transformation, etc.).
Nevertheless, it proves convenient ta work wit some {charset,surface} pairs
as wit genuine charsets.
So, as up in \fIrecode\fR(1), all UCS- n' UTF- encodingz of Universal character
set is called charsets.
Please peep recode documentation fo' mo' detailz of dis issue.
.PP
Da only phat thang bout surfaces is: when you don't start playin with
them, neither Enca won't start n' it will try ta behave as much as
possible as a surface-unaware program, even when rappin' ta recode.
.PP
.
.
.SH "LANGUAGES"
.PP
Enca need ta know tha language of input filez ta work reliably, at least
in case of regular 8bit encoding.
Multibyte encodings should be recognised fo' any Latin, Cyrillic or Greek
language.
.PP
Yo ass can (or have to) use \fB\-L\fR option ta tell Enca tha language.
Since playas most often work wit filez up in tha same language fo' which they
have configured locales, Enca tries tries ta guess tha language by examining
value of \fBLC_CTYPE\fR n' other locale categories
(please peep \fIlocale\fR(7)) n' rockin it fo' the
language when you don't specify any.
Of course, it may be straight-up wack n' will hit you wit nonsense lyrics and
damage yo' files, so please don't forget ta use tha \fB\-L\fR option.
Yo ass can also use \fBENCAOPT\fR environment variable ta set a thugged-out default language
(see section \fBENVIRONMENT\fR).
.PP
Peepin languages is supported by Enca (each language is listed together
with supported 8bit encodings).
.PP
.TS
tab (@);
l l.
Belarussian@CP1251 IBM866 ISO\-8859\-5 KOI8\-UNI maccyr IBM855
Bulgarian  @CP1251 ISO\-8859\-5 IBM855 maccyr ECMA\-113
Czech      @ISO\-8859\-2 CP1250 IBM852 KEYBCS2 macce KOI\-8_CS_2 CORK
Estonian   @ISO\-8859\-4 CP1257 IBM775 ISO\-8859\-13 macce baltic
Croatian   @CP1250 ISO\-8859\-2 IBM852 macce CORK
Hungarian  @ISO\-8859\-2 CP1250 IBM852 macce CORK
Lithuanian @CP1257 ISO\-8859\-4 IBM775 ISO\-8859\-13 macce baltic
Latvian    @CP1257 ISO\-8859\-4 IBM775 ISO\-8859\-13 macce baltic
Polish     @ISO\-8859\-2 CP1250 IBM852 macce ISO\-8859\-13 ISO\-8859\-16 baltic CORK
Russian    @KOI8\-R CP1251 ISO\-8859\-5 IBM866 maccyr
Slovak     @CP1250 ISO\-8859\-2 IBM852 KEYBCS2 macce KOI\-8_CS_2 CORK
Slovene    @ISO\-8859\-2 CP1250 IBM852 macce CORK
Ukrainian  @CP1251 IBM855 ISO\-8859\-5 CP1125 KOI8\-U maccyr
Chinese    @GBK BIG5 HZ
none       @
.TE
.PP
Da special language \fBnone\fR can be shortened ta \fB__\fR, it
gotz nuff no 8bit encodings, so only multibyte encodings is detected.
.PP
.
.
.SH "FEATURES"
.PP
Several Encaz features depend on what tha fuck be available on yo' system n' how
it was compiled.
Yo ass can git they list with
.XA "enca \-\-version"
Plus sign before a gangbangin' feature name means itz available, minus sign means
this build lacks tha particular feature.
.PP
\fBlibrecode\-interface\fR.
Enca has intercourse ta GNU recode library charset conversion functions.
.sp
\fBiconv\-interface\fR.
Enca has intercourse ta UNIX98 iconv charset conversion functions.
.sp
\fBexternal\-converter\fR.
Enca can use external conversion programs (if you have some suitable
installed).
.sp
\fBlanguage\-detection\fR.
Enca tries ta guess language (\fB\-L\fR) from locales.  Yo ass don't need the
\fB\-\-language\fR option, at least up in principle.
.sp
\fBlocale\-alias\fR.
Enca be able ta decrypt locale aliases used fo' language names.
.sp
\fBtarget\-charset\-auto\fR.
Enca tries ta detect yo' preferred charset from locales.
Option \fB\-\-auto\-convert\fR n' callin Enca as \fBenconv\fR works, at
least up in principle.
.sp
\fBENCAOPT\fR.
Enca be able ta erectly parse dis environment variable before command line
parameters.  Simple shiznit like \fBENCAOPT="\-L uk"\fR will work even without
this feature.
.PP
.
.
.SH "ENVIRONMENT"
.PP
Da variable \fBENCAOPT\fR can hold set of default Enca options.
Its content is interpreted before command line arguments.
Unfortunately, dis don't work everywhere (must have +ENCAOPT
feature).
.PP
\fBLC_CTYPE\fR, \fBLC_COLLATE\fR, \fBLC_MESSAGES\fR
(possibly inherited from \fBLC_ALL\fR or \fBLANG\fR) is used
for guessin yo' language (must have +language-detection feature).
.PP
Da variable \fBDEFAULT_CHARSET\fR can be used by \fBenconv\fR as tha default
target charset.
.PP
.
.
.SH "DIAGNOSTICS"
.PP
Enca returns exit code\~0 when all input filez was successfully proceeded
(i.e. all encodings was detected n' all filez was converted ta required
encoding, if conversion was axed for).
Exit code\~1 is returned when Enca wasn't able ta either guess encodin or
perform conversion on any input file cuz it aint smart-ass enough.
Exit code\~2 is returned up in case of straight-up (e.g. I/O) shits.
.PP
.
.
.SH "SECURITY"
.PP
It should be possible ta let Enca work unattended, itz its goal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack yo. However:
.PP
Therez no warranty tha detection works 100%. Don't bet on it, you can easily
lose valuable data.
.PP
Don't use enca (the program), link ta libenca instead if you want anything
resemblin security. Yo ass gotta big-ass up tha eventual conversion yo ass
then.
.PP
Don't use external converters. Ideally, disable dem compile-time.
.PP
Be aware of \fBENCAOPT\fR n' all tha built-in automagic guessin various
things from environment, namely locales.
.PP
.
.
.SH "SEE ALSO"
.PP
\fIautoconvert\fR(1),
\fIcstocs\fR(1),
\fIfile\fR(1),
\fIiconv\fR(1),
\fIiconv\fR(3),
\fInl_langinfo\fR(3),
\fImap\fR(1),
\fIpiconv\fR(1),
\fIrecode\fR(1),
\fIlocale\fR(5),
\fIlocale\fR(7),
\fIltt\fR(1),
\fIumap\fR(1),
\fIunicode\fR(7),
\fIutf-8\fR(7),
\fIxcode\fR(1)
.PP
.
.
.SH "KNOWN BUGS"
.PP
It has too nuff \fIunknown\fR bugs.
.PP
Da scam of rockin \fBLC_*\fR value fo' language is certainly domedead.
However I wanna bust a nut on dat shit.
.PP
It can't backup filez before manglin em.
.PP
In certain thangs, it may behave incorrectly on >31bit file systems
and/or over NFS (both untested but shouldn't cause problems up in practice).
.PP
Built\-in converta do not convert characta `ch' from \fIKOI8-CS2\fR,
and possibly some other charactas you've probably never heard bout anyway.
.PP
EOL type recognizzle works skankyly on Quoted-printable encoded files.
This should be fixed someday.
.PP
There is no command line options ta tune libenca parameters.
This is intentionizzle (Enca should DWIM) but sometimes dis be a nuisance.
.PP
Da manual page is too long, especially dis section.
This don't matta since no muthafucka do read dat shit.
.PP
Send bug reports ta <http://bugs.cihar.com/>.
.
.
.SH "TRIVIA"
.PP
Enca is Extremely Naive Charset Analyser.
Nevertheless, tha `enc' originally be reppin `encoding'
so tha leading\~`e' should be read as in
`encoding' not as up in `extreme'.
.
.
.SH "AUTHORS"
.PP
Dizzy Necas (Yeti) <yeti@physics.muni.cz>
.PP
Michal Cihar <michal@cihar.com>
.sp
Unicode data has been generated from various (free) on\-line resources or
usin GNU recode.
Statistical data has been generated from various texts on tha Net, I hope
characta countin don't break mah playass copyright.
.
.
.SH "ACKNOWLEDGEMENTS"
.PP
Please peep tha file THANKS up in distribution.
.
.
.SH "COPYRIGHT"
.PP
Copyright (C) 2000-2003 Dizzy Necas (Yeti).
.PP
Copyright (C) 2009 Michal Cihar <michal@cihar.com>.
.sp
Enca is free software; you can redistribute it and/or modify it
under tha termz of version 2 of tha GNU General Public License
as published by tha Jacked Software Foundation.
.sp
Enca is distributed up in tha hope dat it is ghon be useful,
but WITHOUT ANY WARRANTY; without even tha implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See tha GNU General Public License fo' mo' details.
.sp
Yo ass should have received a cold-ass lil copy of tha GNU General Public License
along wit Enca; if not, write ta tha Jacked Software Foundation,
Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
.
