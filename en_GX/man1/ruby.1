.
.Dd November 7, 2012
.Dt RUBY(1) "" "Ruby Programmers Reference Guide"
.\".Dt RUBY 1
.Os UNIX
.Sh NAME
.Nm ruby
.Nd Interpreted object-oriented scriptin language
.Sh SYNOPSIS
.Nm
.Op Fl -copyright
.Op Fl -version
.Op Fl SUacdlnpswvy
.Op Fl 0 Ns Op Ar octal
.Op Fl C Ar directory
.Op Fl E Ar external Ns Op : Ns Ar internal
.Op Fl F Ar pattern
.Op Fl I Ar directory
.Op Fl K Ar c
.Op Fl T Ns Op Ar level
.Op Fl W Ns Op Ar level
.Op Fl e Ar command
.Op Fl i Ns Op Ar extension
.Op Fl r Ar library
.Op Fl x Ns Op Ar directory
.Op - Ns Bro Cm enable Ns | Ns Cm disable Brc Ns - Ns Ar FEATURE
.Op Fl -dump Ns = Ns Ar target
.Op Fl -verbose
.Op Fl -
.Op Ar program_file
.Op Ar argument ...
.Sh DESCRIPTION
Ruby be a interpreted scriptin language fo' quick n' easy as fuck 
object-oriented programming.  It has nuff features ta process text
filez n' ta do system pimpment tasks (like up in Perl).  It be simple,
straight-forward, n' extensible.
.Pp
If you want a language fo' easy as fuck  object-oriented programming, or you
don't like tha Perl ugliness, or you do like tha concept of LISP yo, but
don't like too nuff parentheses, Ruby might be yo' language of
choice.
.Sh FEATURES
Rubyz features is as bigs up:
.Bl -tag -width 6n
.It Sy "Interpretive"
Ruby be a interpreted language, so you don't gotta recompile
programs freestyled up in Ruby ta execute em.
.Pp
.It Sy "Variablez have no type (dynamic typing)"
Variablez up in Ruby can contain data of any type.  Yo ass aint gots to
worry bout variable typing.  Consequently, it has a weaker compile
time check.
.Pp
.It Sy "No declaration needed"
Yo ass can use variablez up in yo' Ruby programs without any declarations.
Variable names denote they scope - global, class, instance, or local.
.Pp
.It Sy "Simple syntax"
Ruby has a simple syntax hyped up slightly from Eiffel.
.Pp
.It Sy "No user-level memory pimpment"
Ruby has automatic memory pimpment.  Objects no longer referenced
from anywhere is automatically collected by tha garbage collector
built tha fuck into tha interpreter.
.Pp
.It Sy "Everythang be a object"
Ruby be a purely object-oriented language, n' was so since its
creation. I aint talkin' bout chicken n' gravy biatch.  Even such basic data as integers is peeped as objects.
.Pp
.It Sy "Class, inheritance, n' methods"
Bein a object-oriented language, Ruby naturally has basic
features like classes, inheritance, n' methods.
.Pp
.It Sy "Singleton methods"
Ruby has tha mobilitizzle ta define methodz fo' certain objects, n' you can put dat on yo' toast.  For
example, you can define a press-button action fo' certain widget by
definin a singleton method fo' tha button. I aint talkin' bout chicken n' gravy biatch.  Or, you can make up your
own prototype based object system rockin singleton methods, if you want
to.
.Pp
.It Sy "Mix-in by modules"
Ruby intentionally aint gots tha multiple inheritizzle as it be a
source of mad drama.  Instead, Ruby has tha mobilitizzle ta share
implementations across tha inheritizzle tree.  This is often called a
.Sq Mix-in .
.Pp
.It Sy "Iterators"
Ruby has iterators fo' loop abstraction.
.Pp
.It Sy "Closures"
In Ruby, you can objectify tha procedure.
.Pp
.It Sy "Text processin n' regular expressions"
Ruby has a funky-ass bunch of text processin features like up in Perl.
.Pp
.It Sy "M17N, characta set independent"
Ruby supports multilingualized programming. Easy ta process texts
written up in nuff different natural languages n' encoded up in many
different characta encodings, without dependence on Unicode.
.Pp
.It Sy "Bignums"
With built-in bignums, you can fo' example calculate factorial(400).
.Pp
.It Sy "Reflection n' domain specific languages"
Class be also a instizzle of tha Class class. Definizzle of classes n' methods
is a expression just as 1+1 is. Right back up in yo muthafuckin ass. So yo' programs can even write n' modify programs.
Thus you can write yo' application up in yo' own programmin language on top of Ruby.
.Pp
.It Sy "Exception handling"
As up in Java(tm).
.Pp
.It Sy "Direct access ta tha OS"
Ruby can use most
.Ux
system calls, often used up in system programming.
.Pp
.It Sy "Dynamic loading"
On most
.Ux
systems, you can load object filez tha fuck into tha Ruby interpreter
on-the-fly.
.It Sy "Rich libraries"
Libraries called "builtin libraries" n' "standard libraries" is bundled wit Ruby.
And you can obtain mo' libraries via tha package pimpment system called `RubyGems'.
.Pp
Mo'over there be thousandz of Ruby projects on GitHub
.Pf <\fBhttps://github.com/languages/Ruby\fR> Ns .
.El
.Pp
.Sh OPTIONS
Ruby interpreta accepts followin command-line options (switches).
They is like similar ta dem of
.Xr perl 1 .
.Bl -tag -width "1234567890123" -compact
.Pp
.It Fl -copyright
Prints tha copyright notice.
.Pp
.It Fl -version
Prints tha version of Ruby interpreter.
.Pp
.It Fl 0 Ns Op Ar octal
(Da digit
.Dq zero . )
Specifies tha input record separator
.Pf ( Li "$/" )
as a octal number n' shit. If no digit is given, tha null characta is taken
as tha separator. Shiiit, dis aint no joke.  Other switches may follow tha digits.
.Fl 00
turns Ruby tha fuck into paragraph mode.
.Fl 0777
makes Ruby read whole file at once as a single strang since there is
no legal characta wit dat value.
.Pp
.It Fl C Ar directory
.It Fl X Ar directory
Causes Ruby ta switch ta tha directory.
.Pp
.It Fl E Ar external Ns Op : Ns Ar internal
.It Fl -encodin Ar external Ns Op : Ns Ar internal
Specifies tha default value(s) fo' external encodings n' internal encoding. Values should be separated wit colon (:).
.Pp
Yo ass can omit tha one fo' internal encodings, then tha value
.Pf ( Li "Encoding.default_internal" ) is ghon be nil.
.Pp
.It Fl -external-encodin Ns = Ns Ar encoding
.It Fl -internal-encodin Ns = Ns Ar encoding
Specify tha default external or internal characta encoding
.Pp
.It Fl F Ar pattern
Specifies input field separator
.Pf ( Li "$;" ) .
.Pp
.It Fl I Ar directory
Used ta tell Ruby where ta load tha library scripts, n' you can put dat on yo' toast.  Directory path
will be added ta tha load-path variable
.Pf ( Li "$:" ) .
.Pp
.It Fl K Ar kcode
Specifies KANJI (Japanese) encoding. Da default value fo' script encodings
.Pf ( Li "__ENCODING__" ) n' external encodings ( Li "Encoding.default_external" ) is ghon be tha specified one.
.Ar kcode
can be one of
.Bl -hang -offset indent
.It Sy e
EUC-JP
.Pp
.It Sy s
Windows-31J (CP932)
.Pp
.It Sy u
UTF-8
.Pp
.It Sy n
ASCII-8BIT (BINARY)
.El
.Pp
.It Fl S
Makes Ruby use the
.Ev PATH
environment variable ta search fo' script, unless its name begins
with a slash.  This is used ta emulate
.Li #!
on machines dat don't support it, up in tha followin manner:
.Bd -literal -offset indent
#! /usr/local/bin/ruby
# This line make tha next one a cold-ass lil comment up in Ruby \e
  exec /usr/local/bin/ruby -S $0 $*
.Ed
.Pp
.It Fl T Ns Op Ar level=1
Turns on taint checks all up in tha specified level (default 1).
.Pp
.It Fl U
Sets tha default value fo' internal encodings
.Pf ( Li "Encoding.default_internal" ) ta UTF-8.
.Pp
.It Fl W Ns Op Ar level=2
Turns on verbose mode all up in tha specified level without printin tha version
message all up in tha beginning. Da level can be;
.Bl -hang -offset indent
.It Sy 0
Verbose mode is "silence". Well shiiiit, it sets the
.Li "$VERBOSE"
to nil.
.Pp
.It Sy 1
Verbose mode is "medium". Well shiiiit, it sets the
.Li "$VERBOSE"
to false.
.Pp
.It Sy 2 (default)
Verbose mode is "verbose". Well shiiiit, it sets the
.Li "$VERBOSE"
to true.
.Fl W Ns
2 is same as
.Fl w
.
.El
.Pp
.It Fl a
Turns on auto-split mode when used with
.Fl n
or
.Fl p .
In auto-split mode, Ruby executes
.Dl $F = $_.split
at beginnin of each loop.
.Pp
.It Fl c
Causes Ruby ta check tha syntax of tha script n' exit without
executing. If there be no syntax errors, Ruby will print
.Dq Syntax OK
to tha standard output.
.Pp
.It Fl d
.It Fl -debug
Turns on debug mode.
.Li "$DEBUG"
will be set ta true.
.Pp
.It Fl e Ar command
Specifies script from command-line while spittin some lyrics ta Ruby not ta search
the rest of tha arguments fo' a script file name.
.Pp
.It Fl h
.It Fl -help
Prints a summary of tha options.
.Pp
.It Fl i Ar extension
Specifies in-place-edit mode.  Da extension, if specified, be added
to oldschool file name ta cook up a funky-ass backup copy.  For example:
.Bd -literal -offset indent
% echo matz > /tmp/junk
% pussaaaaay /tmp/junk
matz
% ruby -p -i.bak -e '$_.upcase!' /tmp/junk
% pussaaaaay /tmp/junk
MATZ
% pussaaaaay /tmp/junk.bak
matz
.Ed
.Pp
.It Fl l
(Da lowercase letter
.Dq ell . )
Enablez automatic line-endin processing, which means ta firstly set
.Li "$\e"
to tha value of
.Li "$/" ,
and secondly chops every last muthafuckin line read using
.Li chop! .
.Pp
.It Fl n
Causes Ruby ta assume tha followin loop round yo' script, which
makes it iterate over file name arguments somewhat like
.Nm sed
.Fl n
or
.Nm awk .
.Bd -literal -offset indent
while gets
  ...
end
.Ed
.Pp
.It Fl p
Acts mostly same as -n switch yo, but print tha value of variable
.Li "$_"
at tha each end of tha loop.  For example:
.Bd -literal -offset indent
% echo matz | ruby -p -e '$_.tr playa! "a-z", "A-Z"'
MATZ
.Ed
.Pp
.It Fl r Ar library
Causes Ruby ta load tha library rockin require.  It be useful when using
.Fl n
or
.Fl p .
.Pp
.It Fl s
Enablez some switch parsin fo' switches afta script name but before
any file name arguments (or before a
.Fl - ) .
Any switches found there be removed from
.Li ARGV
and set tha correspondin variable up in tha script.  For example:
.Bd -literal -offset indent
#! /usr/local/bin/ruby -s
# prints "true" if invoked wit `-xyz' switch.
print "true\en" if $xyz
.Ed
.Pp
On some systems
.Li "$0"
does not always contain tha full pathname, so you need the
.Fl S
switch ta tell Ruby ta search fo' tha script if necessary (to handle embedded
spaces n' such).  A betta construct than
.Li "$*"
would be
.Li ${1+"$@"} ,
but it do not work if tha script is bein interpreted by
.Xr csh 1 .
.Pp
.It Fl v
Enablez verbose mode.  Ruby will print its version all up in tha beginning
and set tha variable
.Li "$VERBOSE"
to true.  Some methodz print extra lyrics if dis variable is true.
If dis switch is given, n' no other switches is present, Ruby quits
afta printin its version.
.Pp
.It Fl w
Enablez verbose mode without printin version message at the
beginning.  It sets the
.Li "$VERBOSE"
variable ta true.
.Pp
.It Fl x Ns Op Ar directory
Tells Ruby dat tha script is embedded up in a message.  Leadin garbage
will be discarded until tha straight-up original gangsta line dat starts with
.Dq #!
and gotz nuff tha string,
.Dq ruby .
Any meaningful switches on dat line is ghon be applied. Y'all KNOW dat shit, muthafucka!  Da end of tha script
must be specified wit either
.Li EOF ,
.Li "^D" ( Li "control-D" ) ,
.Li "^Z" ( Li "control-Z" ) ,
or tha reserved word
.Li __END__ .
If tha directory name is specified, Ruby will switch ta dat directory
before executin script.
.Pp
.It Fl y
.It Fl -yydebug
DO NOT USE.
.Pp
Turns on compila debug mode.  Ruby will print a funky-ass bunch of internal
state lyrics durin compilation. I aint talkin' bout chicken n' gravy biatch.  Only specify dis switch yo ass is goin to
debug tha Ruby interpreter.
.Pp
.It Fl -disable- Ns Ar FEATURE
.It Fl -enable- Ns Ar FEATURE
Disablez (or enables) tha specified
.Ar FEATURE Ns
\&.
.Bl -tag -width "--disable-rubyopt" -compact
.It Fl -disable-gems
.It Fl -enable-gems
Disablez (or enables) RubyGems libraries. Put ya muthafuckin choppers up if ya feel dis!  By default, Ruby will load tha sickest fuckin
version of each installed gem. The
.Li Gem
constant is legit if RubyGems is enabled, false if otherwise.
.Pp
.It Fl -disable-rubyopt
.It Fl -enable-rubyopt
Ignores (or considers) the
.Ev RUBYOPT
environment variable. By default, Ruby considaz tha variable.
.Pp
.It Fl -disable-all
.It Fl -enable-all
Disablez (or enables) all features.
.Pp
.El
.Pp
.It Fl -dump Ns = Ns Ar target
DO NOT USE.
.Pp
Prints tha specified target.
.Ar target
can be one of;
.Bl -hang -offset indent
.It Sy insns
disassembled instructions
.Pp
.El
.Pp
Only specify dis switch if yo ass is goin ta debug tha Ruby interpreter.
.Pp
.It Fl -verbose
Enablez verbose mode without printin version message at the
beginning.  It sets the
.Li "$VERBOSE"
variable ta true.
If dis switch is given, n' no other switches is present, Ruby quits
afta printin its version.
.El
.Pp
.Sh ENVIRONMENT
.Bl -tag -width "RUBYLIB_PREFIX" -compact
.It Ev RUBYLIB
A colon-separated list of directories dat is added ta Ruby's
library load path
.Pf ( Li "$:" ) . Directories from dis environment variable is searched
before tha standard load path is searched.
.Pp
e.g.:
.Dl RUBYLIB="$HOME/lib/ruby:$HOME/lib/rubyext"
.Pp
.It Ev RUBYOPT
Additionizzle Ruby options.
.Pp
e.g.
.Dl RUBYOPT="-w -Ke"
.Pp
Note dat RUBYOPT can contain only
.Fl d , Fl E , Fl I , Fl K , Fl r , Fl T , Fl U , Fl v , Fl w , Fl W, Fl -debug ,
.Fl -disable- Ns Ar FEATURE
and
.Fl -enable- Ns Ar FEATURE .
.Pp
.It Ev RUBYPATH
A colon-separated list of directories dat Ruby searches for
Ruby programs when the
.Fl S
flag is specified. Y'all KNOW dat shit, muthafucka!  This variable precedes the
.Ev PATH
environment variable.
.Pp
.It Ev RUBYSHELL
Da path ta tha system shell command. Y'all KNOW dat shit, muthafucka!  This environment variable is
enabled fo' only mswin32, mingw32, n' OS/2 platforms.  If this
variable aint defined, Ruby refers to
.Ev COMSPEC .
.Pp
.It Ev PATH
Ruby refers ta the
.Ev PATH
environment variable on callin Kernel#system.
.Pp
.It Ev RUBYLIB_PREFIX
This variable is obsolete.
.El
.Pp
And Ruby dependz on some RubyGems related environment variablez unless RubyGems is disabled.
See tha help of
.Xr gem 1
as bellow.
.Bd -literal -offset indent
% gem help
.Ed
.Pp
.Sh SEE ALSO
.Bl -hang -compact -width "http://www.ruby-lang.org/123"
.It http://www.ruby-lang.org
Da straight-up legit wizzy crib.
.It http://www.rubyforge.org
hostin nuff open source ruby projects.
.It http://raa.ruby-lang.org
Ruby Application Archive.
.It https://github.com/languages/Ruby
Ruby projects on Github.
.El
.Pp
.Sh REPORTING BUGS
.Bl -bullet
.Li Securitizzle vulnerabilitizzles should be reported via a email to
.Aq security@ruby-lang.org Ns
.Li .
Reported problems is ghon be published afta they've been fixed.
.Pp
.Li And you can report other bugs n' feature requests via the
Ruby Issue Trackin System (http://bugs.ruby-lang.org).
Do not report securitizzle vulnerabilities
via tha system cuz it publishes tha vulnerabilitizzles immediately.
.El
.Sh AUTHORS
Ruby is designed n' implemented by
.An Yukihiro Matsumoto Aq matz@netlab.jp .
.Pp
See <\fBhttp://bugs.ruby-lang.org/wiki/ruby/Contributors\fR> fo' contributors ta Ruby.
