.TH "GStreamer" "1" "May 2007"
.SH "NAME"
gst\-launch \- build n' run a GStreamer pipeline
.SH "SYNOPSIS"
\fBgst\-launch\fR \fI[OPTION...]\fR PIPELINE\-DESCRIPTION
.SH "DESCRIPTION"
.LP
\fIgst\-launch\fP be a tool dat buildz n' runs basic
\fIGStreamer\fP pipelines.

In simple form, a PIPELINE\-DESCRIPTION be a list of
elements separated by exclamation marks (!). Propertizzles may be appended to
elements, up in tha form \fIproperty=value\fR.

For a cold-ass lil complete description of possible PIPELINE-DESCRIPTIONS peep tha section
\fIpipeline description\fR below or consult tha GStreamer documentation.

Please note dat \fIgst\-launch\fP is primarily a thugged-out debuggin tool for
developers n' users. Yo ass should not build applications on top of dat shit. For
applications, use tha gst_parse_launch() function of tha GStreamer API as an
easy way ta construct pipelines from pipeline descriptions.
.
.SH "OPTIONS"
.l
\fIgst\-launch\fP accepts tha followin options:
.TP 8
.B  \-\-help
Print help synopsis n' available FLAGS
.TP 8
.B  \-v, \-\-verbose
Output status shiznit n' property notifications
.TP 8
.B  \-q, \-\-quiet
Do not print any progress shiznit
.TP 8
.B  \-m, \-\-lyrics
Output lyrics posted on tha pipelinez bus
.TP 8
.B  \-t, \-\-tags
Output tags (also known as metadata)
.TP 8
.B  \-e, \-\-eos\-on\-shutdown
Force a EOS event on sources before shuttin tha pipeline down. I aint talkin' bout chicken n' gravy biatch. This is
useful ta make shizzle muxers create readable filez when a muxin pipeline is
shut down forcefully via Control-C.
.TP 8
.B  \-i, \-\-index
Gather n' print index statistics. This is mostly useful fo' playback or
recordin pipelines.
.TP 8
.B  \-f, \-\-no\-fault
Do not install a gangbangin' fault handlez
.TP 8
.B  \-T, \-\-trace
Print memory allocation traces. Da feature must be enabled at compile time to
work.
.TP 8

.
.SH "GSTREAMER OPTIONS"
.l
\fIgst\-launch\fP also accepts tha followin options dat is common
to all GStreamer applications:
.TP 8
.B  \-\-gst\-version
Prints tha version strang of tha \fIGStreamer\fP core library.
.TP 8
.B  \-\-gst\-fatal\-warnings
Causes \fIGStreamer\fP ta abort if a warnin message occurs. This is equivalent
to settin tha environment variable G_DEBUG ta 'fatal_warnings' (see the
section \fIenvironment variables\fR below fo' further shiznit).
.TP 8
.B  \-\-gst\-debug=STRING
A comma separated list of category_name:level pairs ta specify debuggin levels
for each category. Level is up in tha range 0-9 where 0 will show no lyrics, and
9 will show all lyrics. Da wildcard * can be used ta match category names.
Note dat tha order of categories n' levels is blingin, wildcardz at the
end may override levels set earlier n' shit. Da log levels are: 1=ERROR, 2=WARNING,
3=FIXME, 4=INFO, 5=DEBUG, 6=LOG, 7=TRACE, 9=MEMDUMP. Right back up in yo muthafuckin ass. Since GStreamer 1.2 one
can also use tha debug level names, e.g. \-\-gst\-debug=*sink:LOG fo' realz. A full
description of tha various debug levels can be found up in tha GStreamer core
library API documentation, up in tha "Hustlin GStreamer Applications" section.

Use \-\-gst\-debug\-help ta show category names

Example:
GST_CAT:5,GST_ELEMENT_*:3,oggdemux:5

.TP 8
.B  \-\-gst\-debug\-level=LEVEL
Sets tha threshold fo' printin debuggin lyrics.  A higher level
will print mo' lyrics.  Da useful range is 0-9, wit tha default
bein 0. Level 6 (LOG level) will show all shiznit dat is usually
required fo' debuggin purposes yo. Higher levels is only useful up in hella
specific cases. Right back up in yo muthafuckin ass. See above fo' tha full list of levels.
.TP 8
.B  \-\-gst\-debug\-no\-color
\fIGStreamer\fP normally prints debuggin lyrics so dat the
lyrics is color-coded when printed ta a terminal dat handles
ANSI escape sequences.  Usin dis option causes \fIGStreamer\fP
to print lyrics without color. Shiiit, dis aint no joke. Right back up in yo muthafuckin ass. Settin tha \fBGST_DEBUG_NO_COLOR\fR
environment variable will big up tha same thang.
.TP 8
.B  \-\-gst\-debug\-color\-mode
\fIGStreamer\fP normally prints debuggin lyrics so dat the
lyrics is color-coded when printed ta a terminal dat handles
ANSI escape sequences (on *nix), or uses W32 console API ta color the
lyrics printed tha fuck into a cold-ass lil console (on W32). Usin dis option causes
\fIGStreamer\fP ta print lyrics without color ('off' or 'disable'),
print lyrics wit default flavas ('on' or 'auto'), or print lyrics
usin ANSI escape sequences fo' colorin ('unix'). Right back up in yo muthafuckin ass. Settin the
\fBGST_DEBUG_COLOR_MODE\fR environment variable will big up tha same thang.
.TP 8
.B  \-\-gst\-debug\-disable
Disablez debugging.
.TP 8
.B  \-\-gst\-debug\-help
Prints a list of available debug categories n' they default debuggin level.
.TP 8
.B  \-\-gst\-plugin\-spew
\fIGStreamer\fP info flags ta set
Enable printout of errors while loadin \fIGStreamer\fP plugins
.TP 8
.B  \-\-gst\-plugin\-path=PATH
Add directories separated wit ':' ta tha plugin search path
.TP 8
.B  \-\-gst\-plugin\-load=PLUGINS
Preload plugins specified up in a cold-ass lil comma-separated list fo' realz. Another way ta specify
plugins ta preload is ta use tha environment variable GST_PLUGIN_PATH

.SH "PIPELINE DESCRIPTION"

A pipeline consists \fIelements\fR n' \fIlinks\fR. \fIElements\fR can be put
into \fIbins\fR of different sorts, n' you can put dat on yo' toast. \fIElements\fR, \fIlinks\fR n' \fIbins\fR
can be specified up in a pipeline description up in any order.

.B Elements

ELEMENTTYPE \fI[PROPERTY1 ...]\fR

Creates a element of type ELEMENTTYPE n' sets tha PROPERTIES.

.B Properties

PROPERTY=VALUE ...

Sets tha property ta tha specified value. Yo ass can use \fBgst\-inspect\fR(1) to
smoke up bout propertizzles n' allowed jointz of different elements.
.br
Enumeration propertizzles can be set by name, nick or value.

.B Bins

\fI[BINTYPE.]\fR ( \fI[PROPERTY1 ...]\fR PIPELINE-DESCRIPTION )
.br

Specifies dat a funky-ass bin of type BINTYPE is pimped n' tha given propertizzles are
set. Every element between tha braces is put tha fuck into tha bin. I aint talkin' bout chicken n' gravy biatch. Please note tha dot
that has ta be used afta tha BINTYPE. Yo ass will almost never need this
functionality, it is only straight-up useful fo' applications rockin the
gst_launch_parse() API wit 'bin' as bintype. That way it is possible ta build
partial pipelines instead of a gangbangin' full-fledged top-level pipeline.

.B Links

\fI[[SRCELEMENT].[PAD1,...]]\fR ! \fI[[SINKELEMENT].[PAD1,...]]\fR
\fI[[SRCELEMENT].[PAD1,...]]\fR ! CAPS ! \fI[[SINKELEMENT].[PAD1,...]]\fR

Links tha element wit name SRCELEMENT ta tha element wit name SINKELEMENT,
usin tha caps specified up in CAPS as a gangbangin' filter.
Names can be set on elements wit tha name property. If tha name is omitted, the
element dat was specified directly up in front of or afta tha link is used. Y'all KNOW dat shit, muthafucka! This
works across bins. If a padname is given, tha link is done wit these pads. If
no pad names is given all possibilitizzles is tried n' a matchin pad is used.
If multiple padnames is given, both sides must have tha same number of pads
specified n' multiple links is done up in tha given order.
.br
So tha simplest link be a simple exclamation mark, dat links tha element to
the left of it ta tha element right of dat shit.
.br

.B Caps

MEDIATYPE \fI[, PROPERTY[, PROPERTY ...]]]\fR \fI[; CAPS[; CAPS ...]]\fR

Creates a cold-ass lil capabilitizzle wit tha given media type n' optionally wit given
properties. Put ya muthafuckin choppers up if ya feel dis! Da media type can be escaped rockin " or '.
If you wanna chain caps, you can add mo' caps up in tha same format afterwards.

.B Properties

NAME=\fI[(TYPE)]\fRVALUE
.br
in lists n' ranges: \fI[(TYPE)]\fRVALUE

Sets tha axed property up in capabilities. Put ya muthafuckin choppers up if ya feel dis! Da name be a alphanumeric value
and tha type can have tha followin case-insensitizzle joints:
.br
- \fBi\fR or \fBint\fR fo' integer joints or ranges
.br
- \fBf\fR or \fBfloat\fR fo' float joints or ranges
.br
- \fBb\fR, \fBbool\fR or \fBboolean\fR fo' boolean joints
.br
- \fBs\fR, \fBstr\fR or \fBstring\fR fo' strings
.br
- \fBfraction\fR fo' fractions (framerate, pixel-aspect-ratio)
.br
- \fBl\fR or \fBlist\fR fo' lists
.br
If no type was given, tha followin order is tried: integer, float, boolean,
string.
.br
Integer joints must be parsable by \fBstrtol()\fP, floats by \fBstrtod()\fP. FOURCC joints may
either be integers or strings. Boolean joints is (case insensitive) \fIyes\fR,
\fIno\fR, \fItrue\fR or \fIfalse\fR n' may like strings be escaped wit " or '.
.br
Ranges is up in dis format:  [ VALUE, VALUE ]
.br
Lists use dis format:      { VALUE \fI[, VALUE ...]\fR }

.SH "PIPELINE EXAMPLES"

Da examplez below assume dat you have tha erect plug-ins available.
In general, "osssink" can be substituted wit another audio output
plug-in like fuckin "esdsink", "alsasink", "osxaudiosink", or "artsdsink".
Likewise, "xvimagesink" can be substituted wit "ximagesink", "sdlvideosink",
"osxvideosink", or "aasink". Keep it realz in mind though dat different sinks might
accept different formats n' even tha same sink might accept different formats
on different machines, so you might need ta add converta elements like
audioconvert n' audioresample (for audio) or vizzleconvert (for vizzle)
in front of tha sink ta make thangs work.

.B Audio playback

.B
        gst\-launch filesrc location=music.mp3 ! mad ! audioconvert ! audioresample ! osssink
.br
Play tha mp3 noize file "music.mp3" rockin a libmad-based plug-in and
output ta a OSS device

.B
        gst\-launch filesrc location=music.ogg ! oggdemux ! vorbisdec ! audioconvert ! audioresample ! osssink
.br
Play a Ogg Vorbis format file

.B
        gst\-launch gnomevfssrc location=music.mp3 ! mad ! osssink
.br
.B
        gst\-launch gnomevfssrc location=http://domain.com/music.mp3 ! mad ! audioconvert ! audioresample ! osssink
.br
Play a mp3 file or a http stream rockin GNOME\-VFS

.B
        gst\-launch gnomevfssrc location=smb://computer/music.mp3 ! mad ! audioconvert ! audioresample ! osssink
.br
Use GNOME\-VFS ta play a mp3 file located on a SMB server

.B Format conversion

.B
        gst\-launch filesrc location=music.mp3 ! mad ! audioconvert ! vorbisenc ! oggmux ! filesink location=music.ogg
.br
Convert a mp3 noize file ta a Ogg Vorbis file

.B
        gst\-launch filesrc location=music.mp3 ! mad ! audioconvert ! flacenc ! filesink location=test.flac
.br
Convert ta tha FLAC format

.B Other

.B
        gst\-launch filesrc location=music.wav ! wavparse ! audioconvert ! audioresample ! osssink
.br
Plays a .WAV file dat gotz nuff raw audio data (PCM).

.B
        gst\-launch filesrc location=music.wav ! wavparse ! audioconvert ! vorbisenc ! oggmux ! filesink location=music.ogg
.br
.B
        gst\-launch filesrc location=music.wav ! wavparse ! audioconvert ! lame ! filesink location=music.mp3
.br
Convert a .WAV file containin raw audio data tha fuck into a Ogg Vorbis or mp3 file

.B
        gst\-launch cdparanoiasrc mode=continuous ! audioconvert ! lame ! id3v2mux ! filesink location=cd.mp3
.br
rips all tracks from compact disc n' convert dem tha fuck into a single mp3 file

.B
        gst\-launch cdparanoiasrc track=5 ! audioconvert ! lame ! id3v2mux ! filesink location=track5.mp3
.br
rips track 5 from tha CD n' converts it tha fuck into a single mp3 file

Usin \fBgst\-inspect\fR(1), it is possible ta discover settings like tha above
for cdparanoiasrc dat will tell it ta rip tha entire cd or only trackz of dat shit.
Alternatively, you can use a URI n' gst-launch-1.0 will find a element (such as
cdparanoia) dat supports dat protocol fo' you, e.g.:
.B
       gst\-launch cdda://5 ! lame vbr=new vbr-quality=6 ! filesink location=track5.mp3

.B
        gst\-launch osssrc ! audioconvert ! vorbisenc ! oggmux ! filesink location=input.ogg
.br
recordz sound from yo' audio input n' encodes it tha fuck into a ogg file

.B Video

.B
        gst\-launch filesrc location=JB_FF9_TheGravityOfLove.mpg ! dvddemux ! mpeg2dec ! xvimagesink
.br
Display only tha vizzle portion of a MPEG-1 vizzle file, outputtin to
an X display window

.B
        gst\-launch filesrc location=/flflfj.vob ! dvddemux ! mpeg2dec ! sdlvideosink
.br
Display tha vizzle portion of a .vob file (used on DVDs), outputtin to
an SDL window

.B
        gst\-launch filesrc location=movie.mpg ! dvddemux name=demuxer  demuxer n' shit. ! queue ! mpeg2dec ! sdlvideosink  demuxer n' shit. ! queue ! mad ! audioconvert ! audioresample ! osssink
.br
Play both vizzle n' audio portionz of a MPEG porno

.B
        gst\-launch filesrc location=movie.mpg ! mpegdemux name=demuxer demuxer n' shit. ! queue ! mpeg2dec ! vizzleconvert ! sdlvideosink   demuxer n' shit. ! queue ! mad ! audioconvert ! audioresample ! osssink
.br
Play a AVI porno wit a external text subtitle stream

This example also shows how tha fuck ta refer ta specific padz by name if a element
(here: textoverlay) has multiple sink or source pads.

.B
        gst\-launch textoverlay name=overlay ! vizzleconvert ! vizzlescale !  autovideosink   filesrc location=movie.avi ! decodebin2 ! vizzleconvert ! overlay.video_sink   filesrc location=movie.srt ! subparse ! overlay.text_sink

.br
Play a AVI porno wit a external text subtitle stream rockin playbin

.B
        gst\-launch playbin uri=file:///path/to/movie.avi suburi=file:///path/to/movie.srt

.B Network streaming

Stream vizzle rockin RTP n' network elements.

.B
        gst\-launch v4l2src ! vizzle/x-raw,width=128,height=96,format=UYVY ! vizzleconvert ! ffenc_h263 ! vizzle/x-h263 ! rtph263ppay pt=96 ! udpsink host=192.168.1.1 port=5000
.br
This command would be run on tha transmitter

.B
        gst\-launch udpsrc port=5000 ! application/x-rtp, clock-rate=90000,payload=96 ! rtph263pdepay queue-delay=0 ! ffdec_h263 ! xvimagesink
.br
Use dis command on tha receiver

.B Diagnostic

.B
        gst\-launch -v fakesrc num-buffers=16 ! fakesink
.br
Generate a null stream n' ignore it (and print up details).

.B
        gst\-launch audiotestsrc ! audioconvert ! audioresample ! osssink
.br
Generate a pure sine tone ta test tha audio output

.B
        gst\-launch vizzletestsrc ! xvimagesink
.br
.B
        gst\-launch vizzletestsrc ! ximagesink
.br
Generate a gangbangin' familiar test pattern ta test tha vizzle output

.B Automatic linking

Yo ass can use tha decodebin element ta automatically select tha right elements
to git a hustlin pipeline.

.B
        gst\-launch filesrc location=musicfile ! decodebin ! audioconvert ! audioresample ! osssink
.br
Play any supported audio format

.B
        gst\-launch filesrc location=videofile ! decodebin name=decoder decoder n' shit. ! queue ! audioconvert ! audioresample ! osssink   decoder n' shit. !  vizzleconvert ! xvimagesink
.br
Play any supported vizzle format wit vizzle n' audio output. Threadz is used
automatically. To make dis even easier, you can use tha playbin element:

.B
        gst\-launch playbin uri=file:///home/joe/foo.avi
.br


.B Filtered connections

These examplez show you how tha fuck ta use filtered caps.

.B
        gst\-launch vizzletestsrc ! 'video/x-raw,format=YUY2;video/x-raw,format=YV12' ! xvimagesink
.br
Show a test image n' use tha YUY2 or YV12 vizzle format fo' all dis bullshit.

.B
        gst\-launch osssrc !  'audio/x-raw,rate=[32000,64000],format={S16LE,S24LE,S32LE}' ! wavenc ! filesink location=recording.wav
.br
record audio n' write it ta a .wav file. Force usage of signed 16 ta 32 bit
samplez n' a sample rate between 32kHz n' 64KHz.


.SH "ENVIRONMENT VARIABLES"
.TP
\fBGST_DEBUG\fR
Comma-separated list of debug categories n' levels (e.g.
GST_DEBUG=totem:4,typefind:5). '*' be allowed as a wildcard as part of
debug category names (e.g. GST_DEBUG=*sink:6,*audio*:6). Right back up in yo muthafuckin ass. Since 1.2.0 it is
also possible ta specify tha log level by name (1=ERROR, 2=WARN, 3=FIXME,
4=INFO, 5=DEBUG, 6=LOG, 7=TRACE, 9=MEMDUMP) (e.g. GST_DEBUG=*audio*:LOG)
.TP
\fBGST_DEBUG_NO_COLOR\fR
When dis environment variable is set, coloured debug output is disabled.
.TP
\fBGST_DEBUG_DUMP_DOT_DIR\fR
When set ta a gangbangin' filesystem path, store 'dot' filez of pipeline graphs there.
These can then lata be converted tha fuck into a image rockin tha 'dot' utilitizzle from
the graphviz set of tools, like this: dot foo.dot -Tsvg -o foo.svg (png or jpg
are also possible as output format)
.TP
\fBGST_REGISTRY\fR
Path of tha plugin registry file. Default is
~/.cache/gstreamer-1.0/registry-CPU.bin where CPU is the
machine/cpu type GStreamer was compiled for, e.g. 'i486', 'i686', 'x86-64',
'ppc', etc. (check tha output of "uname -i" n' "uname -m" fo' details).
.TP
\fBGST_REGISTRY_UPDATE\fR
Set ta "no" ta force GStreamer ta assume dat no plugins have chizzled,
been added or been removed. Y'all KNOW dat shit, muthafucka! This will make GStreamer skip tha initial check
whether a rebuild of tha registry cache is required or not. This may be useful
in embedded environments where tha installed plugins never chizzle. Do not
use dis option up in any other setup.
.TP
\fBGST_PLUGIN_PATH\fR
Specifies a list of directories ta scan fo' additionizzle plugins.
These take precedence over tha system plugins.
.TP
\fBGST_PLUGIN_SYSTEM_PATH\fR
Specifies a list of plugins dat is always loaded by default.  If not set,
this defaults ta tha system-installed path, n' tha plugins installed up in the
userz home directory
.TP
\fBGST_DEBUG_FILE\fR
Set dis variable ta a gangbangin' file path ta redirect all GStreamer debug
lyrics ta dis file. If left unset, debug lyrics wit be output
unto tha standard error.
.TP
\fBORC_CODE\fR
Useful Orc environment variable. Right back up in yo muthafuckin ass. Set ORC_CODE=debug ta enable debuggers
like fuckin gdb ta create useful backtraces from Orc-generated code.  Set
ORC_CODE=backup or ORC_CODE=emulate if you suspect Orcs SIMD code
generator is producin incorrect code.  (Quite all dem blingin
GStreamer plugins like vizzletestsrc, audioconvert or audioresample use Orc).
.TP
\fBG_DEBUG\fR
Useful GLib environment variable. Right back up in yo muthafuckin ass. Set G_DEBUG=fatal_warnings ta make
GStreamer programs abort when a cold-ass lil critical warnin like fuckin a assertion failure
occurs. This is useful if you wanna smoke up which part of tha code caused
that warnin ta be triggered n' under what tha fuck circumstances. Right back up in yo muthafuckin ass. Simply set G_DEBUG
as mentioned above n' run tha program up in gdb (or let it core dump). Then get
a stack trace up in tha usual way.
.
.SH FILES
.TP 8
~/.cache/gstreamer-1.0/registry-*.bin
Da plugin cache; can be deleted at any time, is ghon be re-created
automatically when it do not exist yet or plugins chizzle. Based on
XDG_CACHE_DIR, so may be up in a gangbangin' finger-lickin' different location than tha one suggested.
.
.SH "SEE ALSO"
.BR gst\-inspect\-1.0 (1),
.BR gst\-launch\-1.0 (1),
.SH "AUTHOR"
Da GStreamer crew at http://gstreamer.freedesktop.org/
