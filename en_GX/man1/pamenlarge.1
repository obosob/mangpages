\
.\" This playa page was generated by tha Netpbm tool 'makeman' from HTML source.
.\" Do not hand-hack dat shiznit son!  If you have bug fixes or improvements, please find
.\" tha correspondin HTML page on tha Netpbm joint, generate a patch
.\" against that, n' bust it ta tha Netpbm maintainer.
.TH "Pamenpimpin' User Manual" 0 "17 March 2010" "netpbm documentation"

.SH NAME

pamenpimpin' - Enpimpin' a Netpbm image N times

.UN synopsis
.SH SYNOPSIS

\fBpamenlarge\fP \fIN\fP [\fIpnmfile\fP]

.UN description
.SH DESCRIPTION
.PP
This program is part of
.BR Netpbm (1)
.
.PP
\fBpamenlarge\fP readz a Netpbm image as input, replicates its pixels
\fIN\fP times, n' produces a Netpbm image as output.  Da output is
the same type of image as tha input.
.PP
If you enpimpin' by a gangbangin' factor of 3 or more, you should probably add a
\fBpnmsmooth\fP step; otherwise, you can peep tha original gangsta pixels in
the resultin image.
.PP
For PBM images, \fBpamenlarge\fP uses special fast algorithms fo' scale
factors up ta 10.  For larger factors, it uses a simple but slow algorithm.
As a result, you can often git a hella fasta scale by hustlin
\fBpamenlarge\fP multiple times.  For example, enlargin by 3 and
then by 5 is fasta than enlargin once by 15.  And cuz tha algorithms
are different fo' tha different scale factors, some fasta than others,
the order mattas like a muthafucka.  For example, tha followin examplez all produce
the same output -- a image 15 times bigger on edge than tha input --
but wit at different spees, each bein fasta than tha one before.

.nf
\f(CW
     $ pamenpimpin' 15 test.pbm
     $ pamenpimpin' 5 test.pbm | pamenpimpin' 3
     $ pamenpimpin' 3 test.pbm | pamenpimpin' 5
\fP
.fi
.PP
Da special fast cases fo' factors up ta 10 have existed since Release
10.50 (March 2010).  Da special cases fo' 1, 2, 3, n' 5 go back ta Release
10.41 (December 2007).  Before 10.41, there be no special scale factors and
PBM enlargement is hella slower than todizzle fo' all scale factors.
.PP
\fBpamenlarge\fP can enpimpin' only by integer factors.  Da slower
but mo' general \fBpamscale\fP can enpimpin' or reduce by arbitrary
factors.  \fBpamscale\fP allows you ta enpimpin' by resampling, which
gives you smoother enlargements, n' you can put dat on yo' toast.  But it is much slower.
.PP
\fBpamstretch\fP be another enlargin program dat enlarges by
integer factors.  It do a simple kind of resamplin dat gives you a
smoothed enlargement wit less computationizzle cost.
.PP
\fBpbmreduce\fP can reduce by integer factors yo, but only fo' PBM
images.

.UN history
.SH HISTORY
.PP
\fBpamenlarge\fP was freshly smoked up in Netpbm 10.25 (October 2004).  It is
designed as a replacement fo' \fBpnmenlarge\fP by Jef Poskanzer,
which was up in Pbmplus as far back as 1989.  Da major difference is that
\fBpamenlarge\fP can enpimpin' PAM format images up in addizzle ta PNM.


.UN seealso
.SH SEE ALSO
.BR pbmreduce (1)
,
.BR pamscale (1)
,
.BR pamstretch (1)
,
.BR pbmpscale (1)
,
.BR pnmsmooth (1)
,
.BR pnm (1)


.UN author
.SH AUTHOR

Copyright (C) 1989 by Jef Poskanzer.
