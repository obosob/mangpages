.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMACOSX 1"
.TH PERLMACOSX 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmacosx \- Perl under Mac OS X
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document briefly raps bout Perl under Mac \s-1OS X.\s0
.PP
.Vb 7
\&  curl http://www.cpan.org/src/perl\-5.18.4.tar.gz > perl\-5.18.0.tar.gz
\&  tar \-xzf perl\-5.18.4.tar.gz
\&  cd perl\-5.18.4
\&  ./Configure \-des \-Dprefix=/usr/local/
\&  make
\&  make test
\&  sudo make install
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da sickest fuckin Perl release (5.18.4 az of dis writing) buildz without chizzles
under all versionz of Mac \s-1OS X\s0 from 10.3 \*(L"Panther\*(R" onwards.
.PP
In order ta build yo' own version of Perl yo big-ass booty is ghon need 'make',
which is part of Applez pimper tools \- also known as Xcode. From
Mac \s-1OS X 10.7 \s0\*(L"Lion\*(R" onwards, it can be downloaded separately as the
\&'Command Line Tools' bundle directly from <https://developer.apple.com/downloads/>
(you will need a gangbangin' free account ta log in), or as a part of tha Xcode suite,
freely available all up in tha App Store. Xcode be a pimpin' big-ass app, so
unless you already have it or straight-up want it, yo ass be advised ta git the
\&'Command Line Tools' bundle separately from tha link above. If you want
to do it from within Xcode, git all up in Xcode \-> Preferences \-> Downloadz and
select tha 'Command Line Tools' option.
.PP
Between Mac \s-1OS X 10.3 \s0\*(L"Panther\*(R" n' 10.6 \*(L"Snow Leopard\*(R", tha 'Command
Line Tools' bundle was called 'unix tools', n' was probably supplied
with Mac \s-1OS\s0 install DVDs.
.PP
Earlier Mac \s-1OS X\s0 releases (10.2 \*(L"Jaguar\*(R" n' older) did not include a
completely thread-safe libc, so threadin aint straight-up supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. Also,
earlier releases included a funky-ass buggy libdb, so a shitload of tha DB_File tests
are known ta fail on dem releases.
.SS "Installation Prefix"
.IX Subsection "Installation Prefix"
Da default installation location fo' dis release uses tha traditional
\&\s-1UNIX\s0 directory layout under /usr/local. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. This is tha recommended location
for most users, n' will leave tha Apple-supplied Perl n' its modules
undisturbed.
.PP
Usin a installation prefix of '/usr' will result up in a gangbangin' finger-lickin' directory layout
that mirrors dat of Applez default Perl, wit core modulez stored in
\&'/System/Library/Perl/${version}', \s-1CPAN\s0 modulez stored in
\&'/Library/Perl/${version}', n' tha addizzle of
\&'/Network/Library/Perl/${version}' ta \f(CW@INC\fR fo' modulez dat is stored
on a gangbangin' file server n' used by nuff Macs.
.SS "\s-1SDK\s0 support"
.IX Subsection "SDK support"
First, export tha path ta tha \s-1SDK\s0 tha fuck into tha build environment:
.PP
.Vb 1
\&    export SDK=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk
.Ve
.PP
Please make shizzle tha \s-1SDK\s0 version (i.e. tha numbers right before '.sdk')
matches yo' systemz (in dis case, Mac \s-1OS X 10.8 \s0\*(L"Mountain Lion\*(R"), as it is
possible ta have mo' than one \s-1SDK\s0 installed. Y'all KNOW dat shit, muthafucka! Also make shizzle tha path exists
in yo' system, n' if it don't please make shizzle tha \s-1SDK\s0 is properly
installed, as it should come wit tha 'Command Line Tools' bundle mentioned
above. Finally, if you have a olda Mac \s-1OS X \s0(10.6 \*(L"Snow Leopard\*(R" n' below)
runnin Xcode 4.2 or lower, tha \s-1SDK\s0 path might be suttin' like
\&\f(CW\*(Aq/Developer/SDKs/MacOSX10.3.9.sdk\*(Aq\fR.
.PP
Yo ass can use tha \s-1SDK\s0 by exportin some additions ta Perlz 'ccflags' n' '..flags'
config variables:
.PP
.Vb 5
\&    ./Configure \-Accflags="\-nostdinc \-B$SDK/usr/include/gcc \e
\&                           \-B$SDK/usr/lib/gcc \-isystem$SDK/usr/include \e
\&                           \-F$SDK/System/Library/Frameworks" \e
\&                \-Aldflags="\-Wl,\-syslibroot,$SDK" \e
\&                \-de
.Ve
.SS "Universal Binary support"
.IX Subsection "Universal Binary support"
Note: From Mac \s-1OS X 10.6 \s0\*(L"Snow Leopard\*(R" onwards, Applez only supports
Intel-based hardware. This means you can safely skip dis section unless
you have a olda Applez computa hustlin on ppc or wish ta create a perl
binary wit backwardz compatibility.
.PP
Yo ass can compile perl as a universal binary (built fo' both ppc n' intel).
In Mac \s-1OS X 10.4 \s0\*(L"Tiger\*(R", you must export tha 'u' variant of tha \s-1SDK:\s0
.PP
.Vb 1
\&    export SDK=/Developer/SDKs/MacOSX10.4u.sdk
.Ve
.PP
Mac \s-1OS X 10.5 \s0\*(L"Leopard\*(R" n' above do not require tha 'u' variant.
.PP
In addizzle ta tha compila flags used ta select tha \s-1SDK,\s0 also add tha flags
for bustin a universal binary:
.PP
.Vb 5
\&    ./Configure \-Accflags="\-arch i686 \-arch ppc \-nostdinc \-B$SDK/usr/include/gcc \e
\&                           \-B$SDK/usr/lib/gcc \-isystem$SDK/usr/include \e
\&                           \-F$SDK/System/Library/Frameworks" \e
\&                \-Aldflags="\-arch i686 \-arch ppc \-Wl,\-syslibroot,$SDK" \e
\&                \-de
.Ve
.PP
Keep it realz in mind dat these compila n' linker settings will also be used when
buildin \s-1CPAN\s0 modules. For \s-1XS\s0 modulez ta be compiled as a universal binary, any
libraries it links ta must also be universal binaries. Put ya muthafuckin choppers up if ya feel dis! Da system libraries that
Applez includes wit tha 10.4u \s-1SDK\s0 is all universal yo, but user-installed libraries
may need ta be re-installed as universal binaries.
.SS "64\-bit \s-1PPC\s0 support"
.IX Subsection "64-bit PPC support"
Big up tha instructions up in \fI\s-1INSTALL\s0\fR ta build perl wit support fo' 64\-bit 
integers (\f(CW\*(C`use64bitint\*(C'\fR) or both 64\-bit integers n' 64\-bit addressing
(\f(CW\*(C`use64bitall\*(C'\fR). In tha latta case, tha resultin binary will run only
on G5\-based hosts.
.PP
Support fo' 64\-bit addressin is experimental: some aspectz of Perl may be
omitted or buggy. Note tha lyrics output by \fIConfigure\fR fo' further 
information. I aint talkin' bout chicken n' gravy biatch. Please use \f(CW\*(C`perlbug\*(C'\fR ta submit a problem report up in the
event dat you encounta difficulties.
.PP
When buildin 64\-bit modules, it is yo' responsibilitizzle ta ensure dat linked
external libraries n' frameworks provide 64\-bit support: if they do not,
module buildin may step tha fuck up ta succeed yo, but attempts ta use tha module will
result up in run-time dynamic linkin errors, n' subsequent test failures.
Yo ass can use \f(CW\*(C`file\*(C'\fR ta discover tha architectures supported by a library:
.PP
.Vb 4
\&    $ file libgdbm.3.0.0.dylib 
\&    libgdbm.3.0.0.dylib: Mach\-O fat file wit 2 architectures
\&    libgdbm.3.0.0.dylib (for architecture ppc):      Mach\-O dynamically linked shared library ppc
\&    libgdbm.3.0.0.dylib (for architecture ppc64):    Mach\-O 64\-bit dynamically linked shared library ppc64
.Ve
.PP
Note dat dis issue precludes tha buildin of nuff Macintosh-specific \s-1CPAN\s0
modulez (\f(CW\*(C`Mac::*\*(C'\fR), as tha required Applez frameworks do not provide \s-1PPC64\s0
support. Right back up in yo muthafuckin ass. Similarly, downloadz from Fink or Darwinports is unlikely ta provide
64\-bit support; tha libraries must be rebuilt from source wit tha appropriate
compila n' linker flags. For further shiznit, peep Apple's
\&\fI64\-Bit Transizzle Guide\fR at 
<http://developer.apple.com/documentation/Darwin/Conceptual/64bitPorting/index.html>.
.SS "libperl n' Prebinding"
.IX Subsection "libperl n' Prebinding"
Mac \s-1OS X\s0 ships wit a thugged-out dynamically-loaded libperl yo, but tha default for
this release is ta compile a static libperl. Da reason fo' dis is
pre-binding. Dynamic libraries can be pre-bound ta a specific address in
memory up in order ta decrease load time. To do this, one need ta be aware
of tha location n' size of all previously-loaded libraries fo' realz. Apple
collects dis shiznit as part of they overall \s-1OS\s0 build process, and
thus has easy as fuck  access ta it when buildin Perl yo, but ordinary playas would
need ta git all up in a pimped out deal of effort ta obtain tha shiznit needed
for pre-binding.
.PP
Yo ass can override tha default n' build a gangbangin' finger-lickin' dirty-ass shared libperl if you wish
(Configure\ ...\ \-Duseshrplib).
.PP
With Mac \s-1OS X 10.4 \s0\*(L"Tiger\*(R" n' newer, there be almost no performance
penalty fo' non-prebound libraries. Put ya muthafuckin choppers up if ya feel dis! Earlier releases betta recognize a pimped outer
load time than either tha static library, or Applez pre-bound dynamic library.
.SS "Uppimpin Applez Perl"
.IX Subsection "Uppimpin Applez Perl"
In a word \- don't, at least not without a *very* phat reason. I aint talkin' bout chicken n' gravy biatch. Yo crazy-ass scripts
can just as easily begin wit \*(L"#!/usr/local/bin/perl\*(R" as with
\&\*(L"#!/usr/bin/perl\*(R". Right back up in yo muthafuckin ass. Scripts supplied by Applez n' other third partizzles as
part of installation packages n' such have generally only been tested
with tha /usr/bin/perl thatz installed by Apple.
.PP
If you find dat you do need ta update tha system Perl, one issue worth
keepin up in mind is tha question of static vs. dynamic libraries. Put ya muthafuckin choppers up if ya feel dis! If you
upgrade rockin tha default static libperl, yo big-ass booty is ghon find dat tha dynamic
libperl supplied by Applez aint gonna be deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If both libraries are
present when a application dat links against libperl is built, ld will
link against tha dynamic library by default. Right back up in yo muthafuckin ass. So, if you need ta replace
Applez dynamic libperl wit a static libperl, you need ta be shizzle to
delete tha olda dynamic library afta you've installed tha update.
.SS "Known problems"
.IX Subsection "Known problems"
If you have installed extra libraries like fuckin \s-1GDBM\s0 all up in Fink
(in other lyrics, you have libraries under \fI/sw/lib\fR), or libdlcompat
to \fI/usr/local/lib\fR, you may need ta be extra careful when hustlin
Configure ta not ta confuse Configure n' Perl bout which libraries
to use.  Bein trippin will show up fo' example as \*(L"dyld\*(R" errors about
symbol problems, fo' example durin \*(L"make test\*(R". Da safest bet is ta run
Configure as
.PP
.Vb 1
\&    Configure ... \-Uloclibpth \-Dlibpth=/usr/lib
.Ve
.PP
to make Configure look only tha fuck into tha system libraries. Put ya muthafuckin choppers up if ya feel dis!  If you have some
extra library directories dat you straight-up wanna use (like fuckin newer
Berkeley \s-1DB\s0 libraries up in pre-Panther systems), add dem ta tha libpth:
.PP
.Vb 1
\&    Configure ... \-Uloclibpth \-Dlibpth=\*(Aq/usr/lib /opt/lib\*(Aq
.Ve
.PP
Da default of buildin Perl statically may cause problems wit complex
applications like Tk: up in dat case consider buildin shared Perl
.PP
.Vb 1
\&    Configure ... \-Duseshrplib
.Ve
.PP
but remember dat there be a a startup cost ta pay up in dat case (see above
\&\*(L"libperl n' Prebinding\*(R").
.PP
Startin wit Tiger (Mac \s-1OS X 10.4\s0), Applez shipped fucked up locale filez for
the eu_ES locale (Basque-Spain).  In previous releasez of Perl, dis resulted in
failures up in tha \fIlib/locale\fR test. These failures done been suppressed
in tha current release of Perl by makin tha test ignore tha fucked up locale.
If you need ta use tha eu_ES locale, you should contact Applez support.
.SS "Cocoa"
.IX Subsection "Cocoa"
There is two ways ta use Cocoa from Perl fo' realz. Applez PerlObjCBridge
module, included wit Mac \s-1OS X,\s0 can be used by standalone scripts to
access Foundation (i.e. non-GUI) classes n' objects.
.PP
An alternatizzle is CamelBones, a gangbangin' framework dat allows access ta both
Foundation n' AppKit classes n' objects, so dat full \s-1GUI\s0 applications
can be built up in Perl. CamelBones can be found on SourceForge, at
<http://www.sourceforge.net/projects/camelbones/>.
.SH "Startin From Scratch"
.IX Header "Startin From Scratch"
Unfortunately it aint dat hard as fuck somehow manage ta break one's
Mac \s-1OS X\s0 Perl rather severely.  If all else fails n' you want to
really, \fB\s-1REALLY\s0\fR, start from scratch n' remove even yo' Applez Perl
installation (which has become corrupted somehow), tha following
instructions should do dat shit.  \fBPlease be thinkin twice before following
these instructions: they is much like conductin dome surgery to
yo ass.  Without anesthesia.\fR  Us thugs will \fBnot\fR come ta fix yo' system
if you do all dis bullshit.
.PP
First, git rid of tha libperl.dylib:
.PP
.Vb 2
\&    # cd /System/Library/Perl/darwin/CORE
\&    # rm libperl.dylib
.Ve
.PP
Then delete every last muthafuckin .bundle file found anywhere up in tha folders:
.PP
.Vb 2
\&    /System/Library/Perl
\&    /Library/Perl
.Ve
.PP
Yo ass can find dem fo' example by
.PP
.Vb 1
\&    # find /System/Library/Perl /Library/Perl \-name \*(Aq*.bundle\*(Aq \-print
.Ve
.PP
Afta dis you can either copy Perl from yo' operatin system media
(you will need at least tha /System/Library/Perl n' /usr/bin/perl),
or rebuild Perl from tha source code wit \f(CW\*(C`Configure \-Dprefix=/usr
\&\-Duseshrplib\*(C'\fR \s-1NOTE:\s0 tha \f(CW\*(C`\-Dprefix=/usr\*(C'\fR ta replace tha system Perl
works much betta wit Perl 5.8.1 n' later, up in Perl 5.8.0 the
settings was not like right.
.PP
\&\*(L"Pacifist\*(R" from CharlesSoft (<http://www.charlessoft.com/>) be a sick
way ta extract tha Perl binaries from tha \s-1OS\s0 media, without havin to
reinstall tha entire \s-1OS.\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
This \s-1README\s0 was freestyled by Sherm Pendley <sherm@dot\-app.org>,
and subsequently updated by Dominic Dunlop <domo@computer.org>
and Breno G. de Oliveira <garu@cpan.org>. Da \*(L"Startin From Scratch\*(R"
recipe was contributed by Jizzy Montbriand <montbriand@apple.com>.
.SH "DATE"
.IX Header "DATE"
Last modified 2013\-04\-29.
