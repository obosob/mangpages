.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLRUN 1"
.TH PERLRUN 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlrun \- how tha fuck ta execute tha Perl interpreter
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBperl\fR	[\ \fB\-sTtuUWX\fR\ ]
	[\ \fB\-hv\fR\ ]\ [\ \fB\-V\fR[:\fIconfigvar\fR]\ ]
	[\ \fB\-cw\fR\ ]\ [\ \fB\-d\fR[\fBt\fR][:\fIdebugger\fR]\ ]\ [\ \fB\-D\fR[\fInumber/list\fR]\ ]
	[\ \fB\-pna\fR\ ]\ [\ \fB\-F\fR\fIpattern\fR\ ]\ [\ \fB\-l\fR[\fIoctal\fR]\ ]\ [\ \fB\-0\fR[\fIoctal/hexadecimal\fR]\ ]
	[\ \fB\-I\fR\fIdir\fR\ ]\ [\ \fB\-m\fR[\fB\-\fR]\fImodule\fR\ ]\ [\ \fB\-M\fR[\fB\-\fR]\fI'module...'\fR\ ]\ [\ \fB\-f\fR\ ]
	[\ \fB\-C\ [\f(BInumber/list\fB]\ \fR]
	[\ \fB\-S\fR\ ]
	[\ \fB\-x\fR[\fIdir\fR]\ ]
	[\ \fB\-i\fR[\fIextension\fR]\ ]
	[\ [\fB\-e\fR|\fB\-E\fR]\ \fI'command'\fR\ ]\ [\ \fB\-\-\fR\ ]\ [\ \fIprogramfile\fR\ ]\ [\ \fIargument\fR\ ]...
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da aiiight way ta run a Perl program is by makin it directly
executable, or else by passin tha name of tha source file as an
argument on tha command line.  (An interactizzle Perl environment
is also possible\*(--see perldebug fo' details on how tha fuck ta do dis shit.)
Upon startup, Perl looks fo' yo' program up in one of tha following
places:
.IP "1." 4
Specified line by line via \fB\-e\fR or \fB\-E\fR switches on tha command line.
.IP "2." 4
Contained up in tha file specified by tha straight-up original gangsta filename on tha command line.
(Note dat systems supportin tha \f(CW\*(C`#!\*(C'\fR notation invoke interpretas this
way. Right back up in yo muthafuckin ass. See \*(L"Location of Perl\*(R".)
.IP "3." 4
Passed up in implicitly via standard input.  This works only if there are
no filename arguments\*(--to pass arguments ta a STDIN-read program you
must explicitly specify a \*(L"\-\*(R" fo' tha program name.
.PP
With methodz 2 n' 3, Perl starts parsin tha input file from the
beginning, unless you've specified a \fB\-x\fR switch, up in which case it
scans fo' tha straight-up original gangsta line startin wit \f(CW\*(C`#!\*(C'\fR n' containin tha word
\&\*(L"perl\*(R", n' starts there instead. Y'all KNOW dat shit, muthafucka!  This is useful fo' hustlin a program
embedded up in a larger message.  (In dis case you would indicate tha end
of tha program rockin tha \f(CW\*(C`_\|_END_\|_\*(C'\fR token.)
.PP
Da \f(CW\*(C`#!\*(C'\fR line be always examined fo' switches as tha line is being
parsed. Y'all KNOW dat shit, muthafucka!  Thus, if you on a machine dat allows only one argument
with tha \f(CW\*(C`#!\*(C'\fR line, or worse, don't even recognize tha \f(CW\*(C`#!\*(C'\fR line, you
still can git consistent switch behaviour regardless of how tha fuck Perl was
invoked, even if \fB\-x\fR was used ta find tha beginnin of tha program.
.PP
Because historically some operatin systems silently chopped off
kernel interpretation of tha \f(CW\*(C`#!\*(C'\fR line afta 32 characters, some
switches may be passed up in on tha command line, n' some may not;
you could even git a \*(L"\-\*(R" without its letter, if you not careful.
Yo ass probably wanna make shizzle dat all yo' switches fall either
before or afta dat 32\-characta boundary.  Most switches don't
actually care if they processed redundantly yo, but gettin a \*(L"\-\*(R"
instead of a cold-ass lil complete switch could cause Perl ta try ta execute
standard input instead of yo' program.  And a partial \fB\-I\fR switch
could also cause odd thangs up in dis biatch.
.PP
Some switches do care if they is processed twice, fo' instance
combinationz of \fB\-l\fR n' \fB\-0\fR.  Either put all tha switches after
the 32\-characta boundary (if applicable), or replace tha use of
\&\fB\-0\fR\fIdigits\fR by \f(CW\*(C`BEGIN{ $/ = "\e0digits"; }\*(C'\fR.
.PP
Parsin of tha \f(CW\*(C`#!\*(C'\fR switches starts wherever \*(L"perl\*(R" is mentioned up in tha line.
Da sequences \*(L"\-*\*(R" n' \*(L"\- \*(R" is specifically ignored so dat you could,
if you was so inclined, say
.PP
.Vb 4
\&    #!/bin/sh
\&    #! \-*\-perl\-*\-
\&    eval \*(Aqexec perl \-x \-wS $0 ${1+"$@"}\*(Aq
\&        if 0;
.Ve
.PP
to let Perl peep tha \fB\-p\fR switch.
.PP
A similar trick involves tha \fIenv\fR program, if you have dat shit.
.PP
.Vb 1
\&    #!/usr/bin/env perl
.Ve
.PP
Da examplez above bust a relatizzle path ta tha perl interpreter,
gettin whatever version is first up in tha userz path.  If you want
a specific version of Perl, say, perl5.14.1, you should place
that directly up in tha \f(CW\*(C`#!\*(C'\fR linez path.
.PP
If tha \f(CW\*(C`#!\*(C'\fR line do not contain tha word \*(L"perl\*(R" nor tha word \*(L"indir\*(R"
the program named afta tha \f(CW\*(C`#!\*(C'\fR is executed instead of tha Perl
interpreter n' shit.  This is slightly bizarre yo, but it helps playas on machines
that don't do \f(CW\*(C`#!\*(C'\fR, cuz they can tell a program dat they \s-1SHELL\s0 is
\&\fI/usr/bin/perl\fR, n' Perl will then dispatch tha program ta tha erect
interpreta fo' em.
.PP
Afta locatin yo' program, Perl compilez tha entire program ta an
internal form.  If there be any compilation errors, execution of the
program aint attempted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  (This is unlike tha typical shell script,
which might run part-way all up in before findin a syntax error.)
.PP
If tha program is syntactically erect, it is executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If tha program
runs off tha end without hittin a \fIexit()\fR or \fIdie()\fR operator, a implicit
\&\f(CWexit(0)\fR is provided ta indicate successful completion.
.SS "#! n' quotin on non-Unix systems"
.IX Xref "hashbang #!"
.IX Subsection "#! n' quotin on non-Unix systems"
Unixz \f(CW\*(C`#!\*(C'\fR technique can be simulated on other systems:
.IP "\s-1OS/2\s0" 4
.IX Item "OS/2"
Put
.Sp
.Vb 1
\&    extproc perl \-S \-your_switches
.Ve
.Sp
as tha straight-up original gangsta line up in \f(CW\*(C`*.cmd\*(C'\fR file (\fB\-S\fR cuz of a funky-ass bug up in cmd.exe's
`extproc' handling).
.IP "MS-DOS" 4
.IX Item "MS-DOS"
Smoke a funky-ass batch file ta run yo' program, n' codify it in
\&\f(CW\*(C`ALTERNATE_SHEBANG\*(C'\fR (see tha \fIdosish.h\fR file up in tha source
distribution fo' mo' shiznit).
.IP "Win95/NT" 4
.IX Item "Win95/NT"
Da Win95/NT installation, when rockin tha ActiveState installa fo' Perl,
will modify tha Registry ta associate tha \fI.pl\fR extension wit tha perl
interpreter n' shit.  If you install Perl by other means (includin buildin from
the sources), you may gotta modify tha Registry yo ass.  Note that
this means you can no longer tell tha difference between a executable
Perl program n' a Perl library file.
.IP "\s-1VMS\s0" 4
.IX Item "VMS"
Put
.Sp
.Vb 2
\& $ perl \-mysw \*(Aqf$env("procedure")\*(Aq \*(Aqp1\*(Aq \*(Aqp2\*(Aq \*(Aqp3\*(Aq \*(Aqp4\*(Aq \*(Aqp5\*(Aq \*(Aqp6\*(Aq \*(Aqp7\*(Aq \*(Aqp8\*(Aq !
\& $ exit++ + ++$status != 0 n' $exit = $status = undef;
.Ve
.Sp
at tha top of yo' program, where \fB\-mysw\fR is any command line switches you
wanna pass ta Perl.  Yo ass can now invoke tha program directly, by saying
\&\f(CW\*(C`perl program\*(C'\fR, or as a \s-1DCL\s0 procedure, by sayin \f(CW@program\fR (or implicitly
via \fI\s-1DCL$PATH\s0\fR by just rockin tha name of tha program).
.Sp
This incantation be a lil' bit much ta remember yo, but Perl will display it for
you if you say \f(CW\*(C`perl "\-V:startperl"\*(C'\fR.
.PP
Command-interpretas on non-Unix systems have rather different ideas
on quotin than Unix shells.  You'll need ta learn tha special
charactas up in yo' command-interpreta (\f(CW\*(C`*\*(C'\fR, \f(CW\*(C`\e\*(C'\fR n' \f(CW\*(C`"\*(C'\fR are
common) n' how tha fuck ta protect whitespace n' these charactas ta run
one-liners (see \-e below).
.PP
On some systems, you may gotta chizzle single-quotes ta double ones,
which you must \fInot\fR do on Unix or Plan 9 systems.  Yo ass might also
have ta chizzle a single % ta a %%.
.PP
For example:
.PP
.Vb 2
\&    # Unix
\&    perl \-e \*(Aqprint "Wuz crackalackin' ghetto\en"\*(Aq
\&
\&    # MS\-DOS, etc.
\&    perl \-e "print \e"Wuz crackalackin' ghetto\en\e""
\&
\&    # VMS
\&    perl \-e "print ""Wuz crackalackin' ghetto\en"""
.Ve
.PP
Da problem is dat none of dis is reliable: it dependz on the
command n' it is entirely possible neither works.  If \fI4DOS\fR were
the command shell, dis would probably work better:
.PP
.Vb 1
\&    perl \-e "print <Ctrl\-x>"Wuz crackalackin' ghetto\en<Ctrl\-x>""
.Ve
.PP
\&\fB\s-1CMD.EXE\s0\fR up in Windows \s-1NT\s0 slipped a shitload of standard Unix functionalitizzle in
when no muthafucka was lookin yo, but just try ta find documentation fo' its
quotin rules.
.PP
There is no general solution ta all of all dis bullshit.  It aint nuthin but just a mess.
.SS "Location of Perl"
.IX Xref "perl, location of interpreter"
.IX Subsection "Location of Perl"
It may seem obvious ta say yo, but Perl is useful only when playas can
easily find dat shit.  When possible, itz phat fo' both \fI/usr/bin/perl\fR
and \fI/usr/local/bin/perl\fR ta be symlinks ta tha actual binary.  If
that can't be done, system administrators is straight fuckin encouraged
to put (symlinks to) perl n' its accompanyin utilitizzles tha fuck into a
directory typically found along a userz \s-1PATH,\s0 or up in some other
obvious n' convenient place.
.PP
In dis documentation, \f(CW\*(C`#!/usr/bin/perl\*(C'\fR on tha straight-up original gangsta line of tha program
will stand up in fo' whatever method works on yo' system.  Yo ass are
advised ta bust a specific path if you care on some specific version.
.PP
.Vb 1
\&    #!/usr/local/bin/perl5.14
.Ve
.PP
or if you just wanna be hustlin at least version, place a statement
like dis all up in tha top of yo' program:
.PP
.Vb 1
\&    use 5.014;
.Ve
.SS "Command Switches"
.IX Xref "perl, command switches command switches"
.IX Subsection "Command Switches"
As wit all standard commands, a single-characta switch may be
clustered wit tha followin switch, if any.
.PP
.Vb 1
\&    #!/usr/bin/perl \-spi.orig   # same as \-s \-p \-i.orig
.Ve
.PP
Switches include:
.IP "\fB\-0\fR[\fIoctal/hexadecimal\fR]" 5
.IX Xref "-0 $"
.IX Item "-0[octal/hexadecimal]"
specifies tha input record separator (\f(CW$/\fR) as a octal or
hexadecimal number n' shit.  If there be no digits, tha null characta is the
separator. Shiiit, dis aint no joke.  Other switches may precede or follow tha digits, n' you can put dat on yo' toast.  For
example, if you gotz a version of \fIfind\fR which can print filenames
terminated by tha null character, you can say this:
.Sp
.Vb 1
\&    find . \-name \*(Aq*.orig\*(Aq \-print0 | perl \-n0e unlink
.Ve
.Sp
Da special value 00 will cause Perl ta slurp filez up in paragraph mode.
Any value 0400 or above will cause Perl ta slurp filez whole yo, but by convention
the value 0777 is tha one normally used fo' dis purpose.
.Sp
Yo ass can also specify tha separator characta rockin hexadecimal notation:
\&\fB\-0x\f(BI\s-1HHH...\s0\fB\fR, where tha \f(CW\*(C`\f(CIH\f(CW\*(C'\fR is valid hexadecimal digits, n' you can put dat on yo' toast.  Unlike
the octal form, dis one may be used ta specify any Unicode character, even
those beyond 0xFF.  So if you \fIreally\fR want a record separator of 0777,
specify it as \fB\-0x1FF\fR.  (This means dat you cannot use tha \fB\-x\fR option
with a gangbangin' finger-lickin' directory name dat consistz of hexadecimal digits, or else Perl
will be thinkin you have specified a hex number ta \fB\-0\fR.)
.IP "\fB\-a\fR" 5
.IX Xref "-a autosplit"
.IX Item "-a"
turns on autosplit mode when used wit a \fB\-n\fR or \fB\-p\fR.  An implicit
split command ta tha \f(CW@F\fR array is done as tha straight-up original gangsta thang inside the
implicit while loop produced by tha \fB\-n\fR or \fB\-p\fR.
.Sp
.Vb 1
\&    perl \-ane \*(Aqprint pop(@F), "\en";\*(Aq
.Ve
.Sp
is equivalent to
.Sp
.Vb 4
\&    while (<>) {
\&        @F = split(\*(Aq \*(Aq);
\&        print pop(@F), "\en";
\&    }
.Ve
.Sp
An alternate delimita may be specified rockin \fB\-F\fR.
.IP "\fB\-C [\f(BInumber/list\fB]\fR" 5
.IX Xref "-C"
.IX Item "-C [number/list]"
Da \fB\-C\fR flag controls a shitload of tha Perl Unicode features.
.Sp
Az of 5.8.1, tha \fB\-C\fR can be followed either by a number or a list
of option letters.  Da letters, they numeric joints, n' effects
are as bigs up; listin tha lettas is equal ta summin tha numbers.
.Sp
.Vb 10
\&    I     1   STDIN be assumed ta be up in UTF\-8
\&    O     2   STDOUT is ghon be up in UTF\-8
\&    E     4   STDERR is ghon be up in UTF\-8
\&    S     7   I + O + E
\&    i     8   UTF\-8 is tha default PerlIO layer fo' input streams
\&    o    16   UTF\-8 is tha default PerlIO layer fo' output streams
\&    D    24   i + o
\&    A    32   tha @ARGV elements is sposed ta fuckin be strings encoded
\&              up in UTF\-8
\&    L    64   normally tha "IOEioA" is unconditional, tha L makes
\&              dem conditionizzle on tha locale environment variables
\&              (the LC_ALL, LC_TYPE, n' LANG, up in tha order of
\&              decreasin precedence) \-\- if tha variablez indicate
\&              UTF\-8, then tha selected "IOEioA" is up in effect
\&    a   256   Set ${^UTF8CACHE} ta \-1, ta run tha UTF\-8 caching
\&              code up in debuggin mode.
.Ve
.Sp
For example, \fB\-COE\fR n' \fB\-C6\fR will both turn on UTF\-8\-nizz on both
\&\s-1STDOUT\s0 n' \s-1STDERR. \s0 Repeatin lettas is just redundant, not cumulative
nor toggling.
.Sp
Da \f(CW\*(C`io\*(C'\fR options mean dat any subsequent \fIopen()\fR (or similar I/O
operations) up in tha current file scope gonna git tha \f(CW\*(C`:utf8\*(C'\fR PerlIO layer
implicitly applied ta them, up in other lyrics, \s-1UTF\-8\s0 is expected from any
input stream, n' \s-1UTF\-8\s0 is produced ta any output stream.  This is just
the default, wit explicit layers up in \fIopen()\fR n' wit \fIbinmode()\fR one can
manipulate streams as usual.
.Sp
\&\fB\-C\fR on its own (not followed by any number or option list), or the
empty strang \f(CW""\fR fo' tha \f(CW\*(C`PERL_UNICODE\*(C'\fR environment variable, has the
same effect as \fB\-CSDL\fR.  In other lyrics, tha standard I/O handlez and
the default \f(CW\*(C`open()\*(C'\fR layer is UTF\-8\-fied \fIbut\fR only if tha locale
environment variablez indicate a \s-1UTF\-8\s0 locale.  This behaviour bigs up
the \fIimplicit\fR (and problematic) \s-1UTF\-8\s0 behaviour of Perl 5.8.0.
(See \*(L"\s-1UTF\-8\s0 no longer default under \s-1UTF\-8\s0 locales\*(R" up in perl581delta.)
.Sp
Yo ass can use \fB\-C0\fR (or \f(CW"0"\fR fo' \f(CW\*(C`PERL_UNICODE\*(C'\fR) ta explicitly
disable all tha above Unicode features.
.Sp
Da read-only magic variable \f(CW\*(C`${^UNICODE}\*(C'\fR reflects tha numeric value
of dis setting.  This variable is set durin Perl startup n' is
thereafta read-only.  If you want runtime effects, use tha three-arg
\&\fIopen()\fR (see \*(L"open\*(R" up in perlfunc), tha two-arg \fIbinmode()\fR (see \*(L"binmode\*(R" up in perlfunc),
and tha \f(CW\*(C`open\*(C'\fR pragma (see open).
.Sp
(In Perls earlier than 5.8.1 tha \fB\-C\fR switch was a Win32\-only switch
that enabled tha use of Unicode-aware \*(L"wide system call\*(R" Win32 APIs.
This feature was practically unused, however, n' tha command line
switch was therefore \*(L"recycled\*(R".)
.Sp
\&\fBNote:\fR Since perl 5.10.1, if tha \fB\-C\fR option is used on tha \f(CW\*(C`#!\*(C'\fR line,
it must be specified on tha command line as well, since tha standard streams
are already set up at dis point up in tha execution of tha perl interpreter.
Yo ass can also use \fIbinmode()\fR ta set tha encodin of a I/O stream.
.IP "\fB\-c\fR" 5
.IX Xref "-c"
.IX Item "-c"
causes Perl ta check tha syntax of tha program n' then exit without
executin dat shit.  Actually, it \fIwill\fR execute n' \f(CW\*(C`BEGIN\*(C'\fR, \f(CW\*(C`UNITCHECK\*(C'\fR,
or \f(CW\*(C`CHECK\*(C'\fR blocks n' any \f(CW\*(C`use\*(C'\fR statements: these is considered as
occurrin outside tha execution of yo' program.  \f(CW\*(C`INIT\*(C'\fR n' \f(CW\*(C`END\*(C'\fR
blocks, however, is ghon be skipped.
.IP "\fB\-d\fR" 5
.IX Xref "-d -dt"
.IX Item "-d"
.PD 0
.IP "\fB\-dt\fR" 5
.IX Item "-dt"
.PD
runs tha program under tha Perl debugger n' shit.  See perldebug.
If \fBt\fR is specified, it indicates ta tha debugger dat threads
will be used up in tha code bein debugged.
.IP "\fB\-d:\fR\fIMOD[=bar,baz]\fR" 5
.IX Xref "-d -dt"
.IX Item "-d:MOD[=bar,baz]"
.PD 0
.IP "\fB\-dt:\fR\fIMOD[=bar,baz]\fR" 5
.IX Item "-dt:MOD[=bar,baz]"
.PD
runs tha program under tha control of a thugged-out debugging, profiling, or tracing
module installed as \f(CW\*(C`Devel::\f(CIMOD\f(CW\*(C'\fR. E.g., \fB\-d:DProf\fR executes the
program rockin tha \f(CW\*(C`Devel::DProf\*(C'\fR profila n' shit.  As wit tha \fB\-M\fR flag, options
may be passed ta tha \f(CW\*(C`Devel::\f(CIMOD\f(CW\*(C'\fR package where they is ghon be received
and interpreted by tha \f(CW\*(C`Devel::\f(CIMOD\f(CW::import\*(C'\fR routine.  Again, like \fB\-M\fR,
use \-\fB\-d:\-\f(BI\s-1MOD\s0\fB\fR ta booty-call \f(CW\*(C`Devel::\f(CIMOD\f(CW::unimport\*(C'\fR instead of import.  The
comma-separated list of options must follow a \f(CW\*(C`=\*(C'\fR character n' shit.  If \fBt\fR is
specified, it indicates ta tha debugger dat threadz is ghon be used up in the
code bein debugged. Y'all KNOW dat shit, muthafucka!  See perldebug.
.IP "\fB\-D\fR\fIletters\fR" 5
.IX Xref "-D DEBUGGING -DDEBUGGING"
.IX Item "-Dletters"
.PD 0
.IP "\fB\-D\fR\fInumber\fR" 5
.IX Item "-Dnumber"
.PD
sets debuggin flags.  To peep how tha fuck it executes yo' program, use
\&\fB\-Dtls\fR.  (This works only if debuggin is compiled tha fuck into your
Perl.)  Another sick value is \fB\-Dx\fR, which lists yo' compiled
syntax tree.  And \fB\-Dr\fR displays compiled regular expressions;
the format of tha output is explained up in perldebguts.
.Sp
As a alternative, specify a number instead of list of lettas (e.g.,
\&\fB\-D14\fR is equivalent ta \fB\-Dtls\fR):
.Sp
.Vb 10
\&        1  p  Tokenizin n' parsin (with v, displays parse stack)
\&        2  s  Stack snapshots (with v, displays all stacks)
\&        4  l  Context (loop) stack processing
\&        8  t  Trace execution
\&       16  o  Method n' overloadin resolution
\&       32  c  String/numeric conversions
\&       64  P  Print profilin info, source file input state
\&      128  m  Memory n' SV allocation
\&      256  f  Format processing
\&      512  r  Regular expression parsin n' execution
\&     1024  x  Syntax tree dump
\&     2048  u  Taintin checks
\&     4096  U  Unofficial, User jackin (reserved fo' private,
\&              unreleased use)
\&     8192  H  Hash dump \-\- usurps joints()
\&    16384  X  Scratchpad allocation
\&    32768  D  Cleanin up
\&    65536  S  Op slab allocation
\&   131072  T  Tokenizing
\&   262144  R  Include reference countz of dumped variablez (eg when
\&              rockin \-Ds)
\&   524288  J  show s,t,P\-debug (don\*(Aqt Jump over) on opcodes within
\&              package DB
\&  1048576  v  Verbose: use up in conjunction wit other flags
\&  2097152  C  Copy On Write
\&  4194304  A  Consistency checks on internal structures
\&  8388608  q  on tha down-low \- currently only suppresses tha "EXECUTING"
\&              message
\& 16777216  M  trace smart-ass match resolution
\& 33554432  B  dump suBroutine definitions, includin special Blocks
\&              like BEGIN
.Ve
.Sp
All these flags require \fB\-DDEBUGGING\fR when you compile tha Perl
executable (but peep \f(CW\*(C`:opd\*(C'\fR up in Devel::Peek or \*(L"'debug' mode\*(R" up in re
which may chizzle this).
See tha \fI\s-1INSTALL\s0\fR file up in tha Perl source distribution
for how tha fuck ta do all dis bullshit.  This flag be automatically set if you include \fB\-g\fR
option when \f(CW\*(C`Configure\*(C'\fR asks you bout optimizer/debugger flags.
.Sp
If you just tryin ta git a print outta each line of Perl code
as it executes, tha way dat \f(CW\*(C`sh \-x\*(C'\fR serves up fo' shell scripts,
you can't use Perlz \fB\-D\fR switch.  Instead do this
.Sp
.Vb 2
\&  # If you have "env" utility
\&  env PERLDB_OPTS="NonStop=1 AutoTrace=1 frame=2" perl \-dS program
\&
\&  # Bourne shell syntax
\&  $ PERLDB_OPTS="NonStop=1 AutoTrace=1 frame=2" perl \-dS program
\&
\&  # csh syntax
\&  % (setenv PERLDB_OPTS "NonStop=1 AutoTrace=1 frame=2"; perl \-dS program)
.Ve
.Sp
See perldebug fo' details n' variations.
.IP "\fB\-e\fR \fIcommandline\fR" 5
.IX Xref "-e"
.IX Item "-e commandline"
may be used ta enta one line of program.  If \fB\-e\fR is given, Perl
will not look fo' a gangbangin' filename up in tha argument list.  Multiple \fB\-e\fR
commandz may be given ta build up a multi-line script.  Make sure
to use semicolons where you would up in a aiiight program.
.IP "\fB\-E\fR \fIcommandline\fR" 5
.IX Xref "-E"
.IX Item "-E commandline"
behaves just like \fB\-e\fR, except dat it implicitly enablez all
optionizzle features (in tha main compilation unit). Right back up in yo muthafuckin ass. See feature.
.IP "\fB\-f\fR" 5
.IX Xref "-f cribcustomize cribcustomize.pl"
.IX Item "-f"
Disable executin \fI\f(CI$Config\fI{sitelib}/sitecustomize.pl\fR at startup.
.Sp
Perl can be built so dat it by default will try ta execute
\&\fI\f(CI$Config\fI{sitelib}/sitecustomize.pl\fR at startup (in a \s-1BEGIN\s0 block).
This be a hook dat allows tha sysadmin ta customize how tha fuck Perl behaves.
It can fo' instizzle be used ta add entries ta tha \f(CW@INC\fR array ta make Perl
find modulez up in non-standard locations.
.Sp
Perl straight-up bangs tha followin code:
.Sp
.Vb 4
\&    BEGIN {
\&        do { local $!; \-f "$Config{sitelib}/sitecustomize.pl"; }
\&            && do "$Config{sitelib}/sitecustomize.pl";
\&    }
.Ve
.Sp
Since it be a actual \f(CW\*(C`do\*(C'\fR (not a \f(CW\*(C`require\*(C'\fR), \fIsitecustomize.pl\fR
doesn't need ta return a legit value. Da code is run up in package \f(CW\*(C`main\*(C'\fR,
in its own lexical scope. But fuck dat shiznit yo, tha word on tha street is dat if tha script dies, \f(CW$@\fR will not
be set.
.Sp
Da value of \f(CW$Config{sitelib}\fR be also determined up in C code n' not
read from \f(CW\*(C`Config.pm\*(C'\fR, which aint loaded.
.Sp
Da code is executed \fIvery\fR early. For example, any chizzlez made to
\&\f(CW@INC\fR will show up in tha output of `perl \-V`. Of course, \f(CW\*(C`END\*(C'\fR
blocks is ghon be likewise executed straight-up late.
.Sp
To determine at runtime if dis capabilitizzle has been compiled up in your
perl, you can check tha value of \f(CW$Config{usesitecustomize}\fR.
.IP "\fB\-F\fR\fIpattern\fR" 5
.IX Xref "-F"
.IX Item "-Fpattern"
specifies tha pattern ta split on if \fB\-a\fR be also up in effect.  The
pattern may be surrounded by \f(CW\*(C`//\*(C'\fR, \f(CW""\fR, or \f(CW\*(Aq\*(Aq\fR, otherwise it will be
put up in single quotes. Yo ass can't use literal whitespace up in tha pattern.
.IP "\fB\-h\fR" 5
.IX Xref "-h"
.IX Item "-h"
prints a summary of tha options.
.IP "\fB\-i\fR[\fIextension\fR]" 5
.IX Xref "-i in-place"
.IX Item "-i[extension]"
specifies dat filez processed by tha \f(CW\*(C`<>\*(C'\fR construct is ta be
edited in-place.  It do dis by renamin tha input file, openin the
output file by tha original gangsta name, n' selectin dat output file as the
default fo' \fIprint()\fR statements, n' you can put dat on yo' toast.  Da extension, if supplied, is used to
modify tha name of tha oldschool file ta cook up a funky-ass backup copy, followin these
rules:
.Sp
If no extension is supplied, n' yo' system supports it, tha original
\&\fIfile\fR is kept open without a name while tha output is repimped up to
a freshly smoked up file wit tha original gangsta \fIfilename\fR.  When perl exits, cleanly or not,
the original gangsta \fIfile\fR is unlinked.
.Sp
If tha extension don't contain a \f(CW\*(C`*\*(C'\fR, then it be appended ta the
end of tha current filename as a suffix.  If tha extension do
contain one or mo' \f(CW\*(C`*\*(C'\fR characters, then each \f(CW\*(C`*\*(C'\fR is replaced
with tha current filename.  In Perl terms, you could be thinkin of this
as:
.Sp
.Vb 1
\&    ($backup = $extension) =~ s/\e*/$file_name/g;
.Ve
.Sp
This allows you ta add a prefix ta tha backup file, instead of (or in
addizzle to) a suffix:
.Sp
.Vb 2
\& $ perl \-pi\*(Aqorig_*\*(Aq \-e \*(Aqs/bar/baz/\*(Aq fileA  # backup to
\&                                           # \*(Aqorig_fileA\*(Aq
.Ve
.Sp
Or even ta place backup copiez of tha original gangsta filez tha fuck into another
directory (provided tha directory already exists):
.Sp
.Vb 2
\& $ perl \-pi\*(Aqold/*.orig\*(Aq \-e \*(Aqs/bar/baz/\*(Aq fileA  # backup to
\&                                               # \*(Aqold/fileA.orig\*(Aq
.Ve
.Sp
These setz of one-liners is equivalent:
.Sp
.Vb 2
\& $ perl \-pi \-e \*(Aqs/bar/baz/\*(Aq fileA          # overwrite current file
\& $ perl \-pi\*(Aq*\*(Aq \-e \*(Aqs/bar/baz/\*(Aq fileA       # overwrite current file
\&
\& $ perl \-pi\*(Aq.orig\*(Aq \-e \*(Aqs/bar/baz/\*(Aq fileA   # backup ta \*(AqfileA.orig\*(Aq
\& $ perl \-pi\*(Aq*.orig\*(Aq \-e \*(Aqs/bar/baz/\*(Aq fileA  # backup ta \*(AqfileA.orig\*(Aq
.Ve
.Sp
From tha shell, saying
.Sp
.Vb 1
\&    $ perl \-p \-i.orig \-e "s/foo/bar/; ... "
.Ve
.Sp
is tha same ol' dirty as rockin tha program:
.Sp
.Vb 2
\&    #!/usr/bin/perl \-pi.orig
\&    s/foo/bar/;
.Ve
.Sp
which is equivalent to
.Sp
.Vb 10
\&    #!/usr/bin/perl
\&    $extension = \*(Aq.orig\*(Aq;
\&    LINE: while (<>) {
\&        if ($ARGV ne $oldargv) {
\&            if ($extension !~ /\e*/) {
\&                $backup = $ARGV . $extension;
\&            }
\&            else {
\&                ($backup = $extension) =~ s/\e*/$ARGV/g;
\&            }
\&            rename($ARGV, $backup);
\&            open(ARGVOUT, ">$ARGV");
\&            select(ARGVOUT);
\&            $oldargv = $ARGV;
\&        }
\&        s/foo/bar/;
\&    }
\&    continue {
\&        print;  # dis prints ta original gangsta filename
\&    }
\&    select(STDOUT);
.Ve
.Sp
except dat tha \fB\-i\fR form don't need ta compare \f(CW$ARGV\fR ta \f(CW$oldargv\fR to
know when tha filename has chizzled. Y'all KNOW dat shit, muthafucka!  It do, however, use \s-1ARGVOUT\s0 for
the selected filehandle.  Note dat \s-1STDOUT\s0 is restored as tha default
output filehandle afta tha loop.
.Sp
As shown above, Perl creates tha backup file whether or not any output
is straight-up chizzled. Y'all KNOW dat shit, muthafucka!  So dis is just a gangbangin' fancy way ta copy files:
.Sp
.Vb 3
\&    $ perl \-p \-i\*(Aq/some/file/path/*\*(Aq \-e 1 file1 file2 file3...
\&or
\&    $ perl \-p \-i\*(Aq.orig\*(Aq \-e 1 file1 file2 file3...
.Ve
.Sp
Yo ass can use \f(CW\*(C`eof\*(C'\fR without parentheses ta locate tha end of each input
file, up in case you wanna append ta each file, or reset line numbering
(see example up in \*(L"eof\*(R" up in perlfunc).
.Sp
If, fo' a given file, Perl is unable ta create tha backup file as
specified up in tha extension then it will skip dat file n' continue on
with tha next one (if it exists).
.Sp
For a gangbangin' finger-lickin' rap of thangs surroundin file permissions n' \fB\-i\fR,
see \*(L"Why do Perl let me delete read-only files?  Why do \-i clobber protected files?  Isn't dis a funky-ass bug up in Perl?\*(R" up in perlfaq5.
.Sp
Yo ass cannot use \fB\-i\fR ta create directories or ta strip extensions from
files.
.Sp
Perl do not expand \f(CW\*(C`~\*(C'\fR up in filenames, which is good, since some
folks use it fo' they backup files:
.Sp
.Vb 1
\&    $ perl \-pi~ \-e \*(Aqs/foo/bar/\*(Aq file1 file2 file3...
.Ve
.Sp
Note dat cuz \fB\-i\fR renames or deletes tha original gangsta file before
bustin a freshly smoked up file of tha same name, Unix-style soft n' hard links will
not be preserved.
.Sp
Finally, tha \fB\-i\fR switch do not impede execution when no
filez is given on tha command line.  In dis case, no backup is made
(the original gangsta file cannot, of course, be determined) n' processing
proceedz from \s-1STDIN\s0 ta \s-1STDOUT\s0 as might be expected.
.IP "\fB\-I\fR\fIdirectory\fR" 5
.IX Xref "-I @INC"
.IX Item "-Idirectory"
Directories specified by \fB\-I\fR is prepended ta tha search path for
modulez (\f(CW@INC\fR).
.IP "\fB\-l\fR[\fIoctnum\fR]" 5
.IX Xref "-l $ $\\"
.IX Item "-l[octnum]"
enablez automatic line-endin processing.  It has two separate
effects, n' you can put dat on yo' toast.  First, it automatically chomps \f(CW$/\fR (the input record
separator) when used wit \fB\-n\fR or \fB\-p\fR.  Second, it assigns \f(CW\*(C`$\e\*(C'\fR
(the output record separator) ta have tha value of \fIoctnum\fR so
that any print statements gonna git dat separator added back on.
If \fIoctnum\fR is omitted, sets \f(CW\*(C`$\e\*(C'\fR ta tha current value of
\&\f(CW$/\fR.  For instance, ta trim lines ta 80 columns:
.Sp
.Vb 1
\&    perl \-lpe \*(Aqsubstr($_, 80) = ""\*(Aq
.Ve
.Sp
Note dat tha assignment \f(CW\*(C`$\e = $/\*(C'\fR is done when tha switch is processed,
so tha input record separator can be different than tha output record
separator if tha \fB\-l\fR switch is followed by a \fB\-0\fR switch:
.Sp
.Vb 1
\&    gnufind / \-print0 | perl \-ln0e \*(Aqprint "found $_" if \-p\*(Aq
.Ve
.Sp
This sets \f(CW\*(C`$\e\*(C'\fR ta newline n' then sets \f(CW$/\fR ta tha null character.
.IP "\fB\-m\fR[\fB\-\fR]\fImodule\fR" 5
.IX Xref "-m -M"
.IX Item "-m[-]module"
.PD 0
.IP "\fB\-M\fR[\fB\-\fR]\fImodule\fR" 5
.IX Item "-M[-]module"
.IP "\fB\-M\fR[\fB\-\fR]\fI'module ...'\fR" 5
.IX Item "-M[-]'module ...'"
.IP "\fB\-[mM]\fR[\fB\-\fR]\fImodule=arg[,arg]...\fR" 5
.IX Item "-[mM][-]module=arg[,arg]..."
.PD
\&\fB\-m\fR\fImodule\fR executes \f(CW\*(C`use\*(C'\fR \fImodule\fR \f(CW\*(C`();\*(C'\fR before executin your
program.
.Sp
\&\fB\-M\fR\fImodule\fR executes \f(CW\*(C`use\*(C'\fR \fImodule\fR \f(CW\*(C`;\*(C'\fR before executin your
program.  Yo ass can use quotes ta add extra code afta tha module name,
e.g., \f(CW\*(Aq\-M\f(CIMODULE\f(CW qw(foo bar)\*(Aq\fR.
.Sp
If tha straight-up original gangsta characta afta tha \fB\-M\fR or \fB\-m\fR be a thugged-out dash (\fB\-\fR)
then tha 'use' is replaced wit 'no'.
.Sp
A lil builtin syntactic sugar means you can also say
\&\fB\-m\f(BI\s-1MODULE\s0\fB=foo,bar\fR or \fB\-M\f(BI\s-1MODULE\s0\fB=foo,bar\fR as a gangbangin' finger-lickin' dirty-ass shortcut for
\&\fB'\-M\f(BI\s-1MODULE\s0\fB qw(foo bar)'\fR.  This avoidz tha need ta use quotes when
importin symbols.  Da actual code generated by \fB\-M\f(BI\s-1MODULE\s0\fB=foo,bar\fR is
\&\f(CW\*(C`use module split(/,/,q{foo,bar})\*(C'\fR.  Note dat tha \f(CW\*(C`=\*(C'\fR form
removes tha distinction between \fB\-m\fR n' \fB\-M\fR.
.Sp
A consequence of dis is dat \fB\-M\f(BI\s-1MODULE\s0\fB=number\fR never do a version check,
unless \f(CW\*(C`\f(CIMODULE\f(CW::import()\*(C'\fR itself is set up ta do a version check, which
could happen fo' example if \fI\s-1MODULE\s0\fR inherits from Exporter.
.IP "\fB\-n\fR" 5
.IX Xref "-n"
.IX Item "-n"
causes Perl ta assume tha followin loop round yo' program, which
makes it iterate over filename arguments somewhat like \fIsed \-n\fR or
\&\fIawk\fR:
.Sp
.Vb 4
\&  LINE:
\&    while (<>) {
\&        ...             # yo' program goes here
\&    }
.Ve
.Sp
Note dat tha lines is not printed by default.  See \*(L"\-p\*(R" ta have
lines printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If a gangbangin' file named by a argument cannot be opened for
some reason, Perl warns you bout it n' moves on ta tha next file.
.Sp
Also note dat \f(CW\*(C`<>\*(C'\fR passes command line arguments to
\&\*(L"open\*(R" up in perlfunc, which don't necessarily interpret dem as file names.
See  perlop fo' possible securitizzle implications.
.Sp
Here be a efficient way ta delete all filez dat aint been modified for
at least a week:
.Sp
.Vb 1
\&    find . \-mtime +7 \-print | perl \-nle unlink
.Ve
.Sp
This is fasta than rockin tha \fB\-exec\fR switch of \fIfind\fR cuz you don't
have ta start a process on every last muthafuckin filename found. Y'all KNOW dat shit, muthafucka!  It do suffer from
the bug of mishandlin newlines up in pathnames, which you can fix if
you follow tha example under \fB\-0\fR.
.Sp
\&\f(CW\*(C`BEGIN\*(C'\fR n' \f(CW\*(C`END\*(C'\fR blocks may be used ta capture control before or after
the implicit program loop, just as up in \fIawk\fR.
.IP "\fB\-p\fR" 5
.IX Xref "-p"
.IX Item "-p"
causes Perl ta assume tha followin loop round yo' program, which
makes it iterate over filename arguments somewhat like \fIsed\fR:
.Sp
.Vb 6
\&  LINE:
\&    while (<>) {
\&        ...             # yo' program goes here
\&    } continue {
\&        print or take a thugged-out dirtnap "\-p destination: $!\en";
\&    }
.Ve
.Sp
If a gangbangin' file named by a argument cannot be opened fo' some reason, Perl
warns you bout it, n' moves on ta tha next file.  Note dat the
lines is printed automatically.  An error occurrin durin printin is
treated as fatal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  To suppress printin use tha \fB\-n\fR switch.  A \fB\-p\fR
overrides a \fB\-n\fR switch.
.Sp
\&\f(CW\*(C`BEGIN\*(C'\fR n' \f(CW\*(C`END\*(C'\fR blocks may be used ta capture control before or after
the implicit loop, just as up in \fIawk\fR.
.IP "\fB\-s\fR" 5
.IX Xref "-s"
.IX Item "-s"
enablez rudimentary switch parsin fo' switches on tha command
line afta tha program name but before any filename arguments (or before
an argument of \fB\-\-\fR).  Any switch found there is removed from \f(CW@ARGV\fR n' sets the
correspondin variable up in tha Perl program.  Da followin program
prints \*(L"1\*(R" if tha program is invoked wit a \fB\-xyz\fR switch, n' \*(L"abc\*(R"
if it is invoked wit \fB\-xyz=abc\fR.
.Sp
.Vb 2
\&    #!/usr/bin/perl \-s
\&    if ($xyz) { print "$xyz\en" }
.Ve
.Sp
Do note dat a switch like \fB\-\-help\fR creates tha variable \f(CW\*(C`${\-help}\*(C'\fR, which aint compliant
with \f(CW\*(C`use strict "refs"\*(C'\fR.  Also, when rockin dis option on a script with
warnings enabled you may git a shitload of spurious \*(L"used only once\*(R" warnings.
.IP "\fB\-S\fR" 5
.IX Xref "-S"
.IX Item "-S"
makes Perl use tha \s-1PATH\s0 environment variable ta search fo' the
program unless tha name of tha program gotz nuff path separators.
.Sp
On some platforms, dis also make Perl append suffixes ta the
filename while searchin fo' dat shit.  For example, on Win32 platforms,
the \*(L".bat\*(R" n' \*(L".cmd\*(R" suffixes is appended if a lookup fo' the
original gangsta name fails, n' if tha name do not already end up in one
of dem suffixes.  If yo' Perl was compiled wit \f(CW\*(C`DEBUGGING\*(C'\fR turned
on, rockin tha \fB\-Dp\fR switch ta Perl shows how tha fuck tha search progresses.
.Sp
Typically dis is used ta emulate \f(CW\*(C`#!\*(C'\fR startup on platforms dat don't
support \f(CW\*(C`#!\*(C'\fR.  It aint nuthin but also convenient when debuggin a script dat uses \f(CW\*(C`#!\*(C'\fR,
and is thus normally found by tha shellz \f(CW$PATH\fR search mechanism.
.Sp
This example works on nuff platforms dat gotz a gangbangin' finger-lickin' dirty-ass shell compatible with
Bourne shell:
.Sp
.Vb 3
\&    #!/usr/bin/perl
\&    eval \*(Aqexec /usr/bin/perl \-wS $0 ${1+"$@"}\*(Aq
\&            if $running_under_some_shell;
.Ve
.Sp
Da system ignores tha straight-up original gangsta line n' feedz tha program ta \fI/bin/sh\fR,
which proceedz ta try ta execute tha Perl program as a gangbangin' finger-lickin' dirty-ass shell script.
Da shell executes tha second line as a aiiight shell command, n' thus
starts up tha Perl interpreter n' shit.  On some systems \f(CW$0\fR don't always
contain tha full pathname, so tha \fB\-S\fR  drops some lyrics ta Perl ta search fo' the
program if necessary.  Afta Perl locates tha program, it parses the
lines n' ignores dem cuz tha variable \f(CW$running_under_some_shell\fR
is never true.  If tha program is ghon be interpreted by csh, yo big-ass booty is ghon need
to replace \f(CW\*(C`${1+"$@"}\*(C'\fR wit \f(CW$*\fR, even though dat don't understand
embedded spaces (and such) up in tha argument list.  To start up \fIsh\fR rather
than \fIcsh\fR, some systems may gotta replace tha \f(CW\*(C`#!\*(C'\fR line wit a line
containin just a cold-ass lil colon, which is ghon be politely ignored by Perl.  Other
systems can't control that, n' need a straight-up devious construct that
will work under any of \fIcsh\fR, \fIsh\fR, or Perl, like fuckin tha following:
.Sp
.Vb 3
\&        eval \*(Aq(exit $?0)\*(Aq && eval \*(Aqexec perl \-wS $0 ${1+"$@"}\*(Aq
\&        & eval \*(Aqexec /usr/bin/perl \-wS $0 $argv:q\*(Aq
\&                if $running_under_some_shell;
.Ve
.Sp
If tha filename supplied gotz nuff directory separators (and so be an
absolute or relatizzle pathname), n' if dat file aint found,
platforms dat append file extensions will do so n' try ta look
for tha file wit dem extensions added, one by one.
.Sp
On DOS-like platforms, if tha program do not contain directory
separators, it will first be searched fo' up in tha current directory
before bein searched fo' on tha \s-1PATH. \s0 On Unix platforms, the
program is ghon be searched fo' strictly on tha \s-1PATH.\s0
.IP "\fB\-t\fR" 5
.IX Xref "-t"
.IX Item "-t"
Like \fB\-T\fR yo, but taint checks will issue warnings rather than fatal
errors.  These warnings can now be controlled normally wit \f(CW\*(C`no warnings
qw(taint)\*(C'\fR.
.Sp
\&\fBNote: This aint a substitute fo' \f(CB\*(C`\-T\*(C'\fB!\fR This is meant ta be
used \fIonly\fR as a temporary pimpment aid while securin legacy code:
for real thang code n' fo' freshly smoked up secure code freestyled from scratch,
always use tha real \fB\-T\fR.
.IP "\fB\-T\fR" 5
.IX Xref "-T"
.IX Item "-T"
turns on \*(L"taint\*(R" so you can test em.  Ordinarily
these checks is done only when hustlin setuid or setgid. Y'all KNOW dat shit, muthafucka!  It aint nuthin but a
phat scam ta turn dem on explicitly fo' programs dat run on behalf
of one of mah thugs whom you might not necessarily trust, like fuckin \s-1CGI\s0
programs or any internizzle servers you might write up in Perl.  See
perlsec fo' details.  For securitizzle reasons, dis option must be
seen by Perl like early; probably dis means it must step tha fuck up early
on tha command line or up in tha \f(CW\*(C`#!\*(C'\fR line fo' systems which support
that construct.
.IP "\fB\-u\fR" 5
.IX Xref "-u"
.IX Item "-u"
This switch causes Perl ta dump core afta compilin your
program.  Yo ass can then up in theory take dis core dump n' turn it
into a executable file by rockin tha \fIundump\fR program (not supplied).
This speedz startup all up in tha expense of some disk space (which you
can minimize by strippin tha executable).  (Still, a \*(L"wassup ghetto\*(R"
executable comes up ta bout 200K on mah machine.)  If you want to
execute a portion of yo' program before dumping, use tha \fIdump()\fR
operator instead. Y'all KNOW dat shit, muthafucka!  Note: availabilitizzle of \fIundump\fR is platform
specific n' may not be available fo' a specific port of Perl.
.IP "\fB\-U\fR" 5
.IX Xref "-U"
.IX Item "-U"
allows Perl ta do unsafe operations.  Currently tha only \*(L"unsafe\*(R"
operations is attemptin ta unlink directories while hustlin as superuser
and hustlin setuid programs wit fatal taint checks turned tha fuck into warnings.
Note dat warnings must be enabled along wit dis option ta actually
\&\fIgenerate\fR tha taint-check warnings.
.IP "\fB\-v\fR" 5
.IX Xref "-v"
.IX Item "-v"
prints tha version n' patchlevel of yo' perl executable.
.IP "\fB\-V\fR" 5
.IX Xref "-V"
.IX Item "-V"
prints summary of tha major perl configuration joints n' tha current
valuez of \f(CW@INC\fR.
.IP "\fB\-V:\fR\fIconfigvar\fR" 5
.IX Item "-V:configvar"
Prints ta \s-1STDOUT\s0 tha value of tha named configuration variable(s),
with multiplez when yo' \f(CW\*(C`\f(CIconfigvar\f(CW\*(C'\fR argument be lookin like a regex (has
non-letters).  For example:
.Sp
.Vb 12
\&    $ perl \-V:libc
\&        libc=\*(Aq/lib/libc\-2.2.4.so\*(Aq;
\&    $ perl \-V:lib.
\&        libs=\*(Aq\-lnsl \-lgdbm \-ldb \-ldl \-lm \-lcrypt \-lutil \-lc\*(Aq;
\&        libc=\*(Aq/lib/libc\-2.2.4.so\*(Aq;
\&    $ perl \-V:lib.*
\&        libpth=\*(Aq/usr/local/lib /lib /usr/lib\*(Aq;
\&        libs=\*(Aq\-lnsl \-lgdbm \-ldb \-ldl \-lm \-lcrypt \-lutil \-lc\*(Aq;
\&        lib_ext=\*(Aq.a\*(Aq;
\&        libc=\*(Aq/lib/libc\-2.2.4.so\*(Aq;
\&        libperl=\*(Aqlibperl.a\*(Aq;
\&        ....
.Ve
.Sp
Additionally, extra colons can be used ta control formatting.  A
trailin colon suppresses tha linefeed n' terminator \*(L";\*(R", allowing
you ta embed queries tha fuck into shell commands.  (mnemonic: \s-1PATH\s0 separator
\&\*(L":\*(R".)
.Sp
.Vb 2
\&    $ echo "compression\-vars: " \`perl \-V:z.*: \` " is here !"
\&    compression\-vars:  zcat=\*(Aq\*(Aq zip=\*(Aqzip\*(Aq  is here !
.Ve
.Sp
A leadin colon removes tha \*(L"name=\*(R" part of tha response, dis allows
you ta map ta tha name you need. Y'all KNOW dat shit, muthafucka!  (mnemonic: empty label)
.Sp
.Vb 2
\&    $ echo "goodvfork="\`./perl \-Ilib \-V::usevfork\`
\&    goodvfork=false;
.Ve
.Sp
Leadin n' trailin colons can be used together if you need
positionizzle parameta joints without tha names.  Note dat up in tha case
below, tha \f(CW\*(C`PERL_API\*(C'\fR params is returned up in alphabetical order.
.Sp
.Vb 2
\&    $ echo building_on \`perl \-V::osname: \-V::PERL_API_.*:\` now
\&    building_on \*(Aqlinux\*(Aq \*(Aq5\*(Aq \*(Aq1\*(Aq \*(Aq9\*(Aq now
.Ve
.IP "\fB\-w\fR" 5
.IX Xref "-w"
.IX Item "-w"
prints warnings bout dubious constructs, like fuckin variable names
mentioned only once n' scalar variablez used
before bein set; redefined subroutines; references ta undefined
filehandles; filehandlez opened read-only dat yo ass be attempting
to write on; joints used as a number dat don't \fIlook\fR like numbers;
usin a array as though it was a scalar; if yo' subroutines
recurse mo' than 100 deep; n' innumerable other thangs.
.Sp
This switch straight-up just enablez tha global \f(CW$^W\fR variable; normally,
the lexically scoped \f(CW\*(C`use warnings\*(C'\fR pragma is preferred. Y'all KNOW dat shit, muthafucka! You
can disable or promote tha fuck into fatal errors specific warnings using
\&\f(CW\*(C`_\|_WARN_\|_\*(C'\fR hooks, as busted lyrics bout up in perlvar n' \*(L"warn\*(R" up in perlfunc.
See also perldiag n' perltrap.  A fine-grained warning
facilitizzle be also available if you wanna manipulate entire classes
of warnings; peep warnings or perllexwarn.
.IP "\fB\-W\fR" 5
.IX Xref "-W"
.IX Item "-W"
Enablez all warnings regardless of \f(CW\*(C`no warnings\*(C'\fR or \f(CW$^W\fR.
See perllexwarn.
.IP "\fB\-X\fR" 5
.IX Xref "-X"
.IX Item "-X"
Disablez all warnings regardless of \f(CW\*(C`use warnings\*(C'\fR or \f(CW$^W\fR.
See perllexwarn.
.IP "\fB\-x\fR" 5
.IX Xref "-x"
.IX Item "-x"
.PD 0
.IP "\fB\-x\fR\fIdirectory\fR" 5
.IX Item "-xdirectory"
.PD
 drops some lyrics ta Perl dat tha program is embedded up in a larger chunk of unrelated
text, like fuckin up in a mail message.  Leadin garbage will be
discarded until tha straight-up original gangsta line dat starts wit \f(CW\*(C`#!\*(C'\fR n' gotz nuff the
strin \*(L"perl\*(R".  Any meaningful switches on dat line is ghon be applied.
.Sp
All references ta line numbers by tha program (warnings, errors, ...)
will treat tha \f(CW\*(C`#!\*(C'\fR line as tha straight-up original gangsta line.
Thus a warnin on tha 2nd line of tha program, which is on tha 100th
line up in tha file is ghon be reported as line 2, not as line 100.
This can be overridden by rockin tha \f(CW\*(C`#line\*(C'\fR directive.
(See \*(L"Plain Oldskool Comments (Not!)\*(R" up in perlsyn)
.Sp
If a gangbangin' finger-lickin' directory name is specified, Perl will switch ta dat directory
before hustlin tha program.  Da \fB\-x\fR switch controls only the
disposal of leadin garbage.  Da program must be terminated with
\&\f(CW\*(C`_\|_END_\|_\*(C'\fR if there is trailin garbage ta be ignored;  tha program
can process any or all of tha trailin garbage via tha \f(CW\*(C`DATA\*(C'\fR filehandle
if desired.
.Sp
Da directory, if specified, must step tha fuck up immediately followin tha \fB\-x\fR
with no intervenin whitespace.
.SH "ENVIRONMENT"
.IX Xref "perl, environment variables"
.IX Header "ENVIRONMENT"
.IP "\s-1HOME \s0" 12
.IX Xref "HOME"
.IX Item "HOME "
Used if \f(CW\*(C`chdir\*(C'\fR has no argument.
.IP "\s-1LOGDIR \s0" 12
.IX Xref "LOGDIR"
.IX Item "LOGDIR "
Used if \f(CW\*(C`chdir\*(C'\fR has no argument n' \s-1HOME\s0 aint set.
.IP "\s-1PATH \s0" 12
.IX Xref "PATH"
.IX Item "PATH "
Used up in executin subprocesses, n' up in findin tha program if \fB\-S\fR is
used.
.IP "\s-1PERL5LIB \s0" 12
.IX Xref "PERL5LIB"
.IX Item "PERL5LIB "
A list of directories up in which ta look fo' Perl library
filez before lookin up in tha standard library n' tha current
directory.  Any architecture-specific n' version-specific directories,
like fuckin \fIversion/archname/\fR, \fIversion/\fR, or \fIarchname/\fR under the
specified locations is automatically included if they exist, wit this
lookup done at interpreta startup time.  In addition, any directories
matchin tha entries up in \f(CW$Config{inc_version_list}\fR is added.
(These typically would be fo' olda compatible perl versions installed
in tha same directory tree.)
.Sp
If \s-1PERL5LIB\s0 aint defined, \s-1PERLLIB\s0 is used. Y'all KNOW dat shit, muthafucka!  Directories is separated
(like up in \s-1PATH\s0) by a cold-ass lil colon on Unixish platforms n' by a semicolon on
Windows (the proper path separator bein given by tha command \f(CW\*(C`perl
\&\-V:\f(CIpath_sep\f(CW\*(C'\fR).
.Sp
When hustlin taint checks, either cuz tha program was hustlin setuid or
setgid, or tha \fB\-T\fR or \fB\-t\fR switch was specified, neither \s-1PERL5LIB\s0 nor
\&\s-1PERLLIB\s0 is consulted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da program should instead say:
.Sp
.Vb 1
\&    use lib "/my/directory";
.Ve
.IP "\s-1PERL5OPT \s0" 12
.IX Xref "PERL5OPT"
.IX Item "PERL5OPT "
Command-line options (switches).  Switches up in dis variable is treated
as if they was on every last muthafuckin Perl command line.  Only tha \fB\-[CDIMUdmtwW]\fR
switches is allowed. Y'all KNOW dat shit, muthafucka!  When hustlin taint checks (either cuz the
program was hustlin setuid or setgid, or cuz tha \fB\-T\fR or \fB\-t\fR
switch was used), dis variable is ignored. Y'all KNOW dat shit, muthafucka!  If \s-1PERL5OPT\s0 begins with
\&\fB\-T\fR, taintin is ghon be enabled n' subsequent options ignored. Y'all KNOW dat shit, muthafucka!  If
\&\s-1PERL5OPT\s0 begins wit \fB\-t\fR, taintin is ghon be enabled, a writable dot
removed from \f(CW@INC\fR, n' subsequent options honored.
.IP "\s-1PERLIO \s0" 12
.IX Xref "PERLIO"
.IX Item "PERLIO "
A space (or colon) separated list of PerlIO layers. If perl is built
to use PerlIO system fo' \s-1IO \s0(the default) these layers affect Perlz \s-1IO.\s0
.Sp
It be conventionizzle ta start layer names wit a cold-ass lil colon (for example, \f(CW\*(C`:perlio\*(C'\fR) to
emphasize they similaritizzle ta variable \*(L"attributes\*(R". But tha code dat parses
layer justification strings, which be also used ta decode tha \s-1PERLIO\s0
environment variable, treats tha colon as a separator.
.Sp
An unset or empty \s-1PERLIO\s0 is equivalent ta tha default set of layers for
your platform; fo' example, \f(CW\*(C`:unix:perlio\*(C'\fR on Unix-like systems
and \f(CW\*(C`:unix:crlf\*(C'\fR on Windows n' other DOS-like systems.
.Sp
Da list becomes tha default fo' \fIall\fR Perlz \s-1IO.\s0 Consequently only built-in
layers can step tha fuck up in dis list, as external layers (like fuckin \f(CW\*(C`:encoding()\*(C'\fR) need
\&\s-1IO\s0 up in order ta load them!  See \*(L"open pragma\*(R" fo' how tha fuck ta add external
encodings as defaults.
.Sp
Layers it make sense ta include up in tha \s-1PERLIO\s0 environment
variable is briefly summarized below. For mo' details peep PerlIO.
.RS 12
.IP ":bytes" 8
.IX Xref ":bytes"
.IX Item ":bytes"
A pseudolayer dat turns tha \f(CW\*(C`:utf8\*(C'\fR flag \fIoff\fR fo' tha layer below;
unlikely ta be useful on its own up in tha global \s-1PERLIO\s0 environment variable.
Yo ass like was thankin of \f(CW\*(C`:crlf:bytes\*(C'\fR or \f(CW\*(C`:perlio:bytes\*(C'\fR.
.IP ":crlf" 8
.IX Xref ":crlf"
.IX Item ":crlf"
A layer which do \s-1CRLF\s0 ta \f(CW"\en"\fR translation distinguishin \*(L"text\*(R" and
\&\*(L"binary\*(R" filez up in tha manner of MS-DOS n' similar operatin systems.
(It currently do \fInot\fR mimic MS-DOS as far as treatin of Control-Z
as bein a end-of-file marker.)
.IP ":mmap" 8
.IX Xref ":mmap"
.IX Item ":mmap"
A layer dat implements \*(L"reading\*(R" of filez by rockin \fImmap\fR(2) to
make a entire file step tha fuck up in tha processs address space, n' then
usin dat as PerlIOz \*(L"buffer\*(R".
.IP ":perlio" 8
.IX Xref ":perlio"
.IX Item ":perlio"
This be a re-implementation of stdio-like bufferin freestyled as a
PerlIO layer n' shit.  As such it will call whatever layer is below it for
its operations, typically \f(CW\*(C`:unix\*(C'\fR.
.IP ":pop" 8
.IX Xref ":pop"
.IX Item ":pop"
An experimenstrual pseudolayer dat removes tha topmost layer.
Use wit tha same care as is reserved fo' nitroglycerine.
.IP ":raw" 8
.IX Xref ":raw"
.IX Item ":raw"
A pseudolayer dat manipulates other layers.  Applyin tha \f(CW\*(C`:raw\*(C'\fR
layer is equivalent ta callin \f(CW\*(C`binmode($fh)\*(C'\fR.  It make tha stream
pass each byte as-is without translation. I aint talkin' bout chicken n' gravy biatch.  In particular, both \s-1CRLF\s0
translation n' intuitin \f(CW\*(C`:utf8\*(C'\fR from tha locale is disabled.
.Sp
Unlike up in earlier versionz of Perl, \f(CW\*(C`:raw\*(C'\fR is \fInot\fR
just tha inverse of \f(CW\*(C`:crlf\*(C'\fR: other layers which would affect the
binary nature of tha stream is also removed or disabled.
.IP ":stdio" 8
.IX Xref ":stdio"
.IX Item ":stdio"
This layer serves up a PerlIO intercourse by wrappin systemz \s-1ANSI C \s0\*(L"stdio\*(R"
library calls. Da layer serves up both bufferin n' \s-1IO.\s0
Note dat tha \f(CW\*(C`:stdio\*(C'\fR layer do \fInot\fR do \s-1CRLF\s0 translation even if that
is tha platformz aiiight behaviour. Shiiit, dis aint no joke. Yo ass will need a \f(CW\*(C`:crlf\*(C'\fR layer above it
to do dis shit.
.IP ":unix" 8
.IX Xref ":unix"
.IX Item ":unix"
Low-level layer dat calls \f(CW\*(C`read\*(C'\fR, \f(CW\*(C`write\*(C'\fR, \f(CW\*(C`lseek\*(C'\fR, etc.
.IP ":utf8" 8
.IX Xref ":utf8"
.IX Item ":utf8"
A pseudolayer dat enablez a gangbangin' flag up in tha layer below ta tell Perl
that output should be up in utf8 n' dat input should be regarded as
already up in valid utf8 form. \fB\s-1WARNING:\s0 It do not check fo' validitizzle n' as such
should be handled wit off tha hook caution fo' input, cuz securitizzle violations
can occur wit non-shortest \s-1UTF\-8\s0 encodings, etc.\fR Generally \f(CW\*(C`:encoding(utf8)\*(C'\fR is
the dopest option when readin \s-1UTF\-8\s0 encoded data.
.IP ":win32" 8
.IX Xref ":win32"
.IX Item ":win32"
On Win32 platforms dis \fIexperimental\fR layer uses natizzle \*(L"handle\*(R" \s-1IO\s0
rather than a Unix-like numeric file descriptor layer n' shit. Known ta be
buggy up in dis release (5.14).
.RE
.RS 12
.Sp
Da default set of layers should give aaight thangs up in dis biatch on all platforms
.Sp
For Unix platforms dat is ghon be tha equivalent of \*(L"unix perlio\*(R" or \*(L"stdio\*(R".
Configure is set up ta prefer tha \*(L"stdio\*(R" implementation if tha systemz library
provides fo' fast access ta tha buffer; otherwise, it uses tha \*(L"unix perlio\*(R"
implementation.
.Sp
On Win32 tha default up in dis release (5.14) is \*(L"unix crlf\*(R". Win32z \*(L"stdio\*(R"
has a fuckin shitload of bugs/mis\-features fo' Perl \s-1IO\s0 which is somewhat depending
on tha version n' vendor of tha C compila n' shit. Usin our own \f(CW\*(C`crlf\*(C'\fR layer as
the buffer avoidz dem thangs n' make thangs mo' uniform.  Da \f(CW\*(C`crlf\*(C'\fR
layer serves up \s-1CRLF\s0 conversion as well as buffering.
.Sp
This release (5.14) uses \f(CW\*(C`unix\*(C'\fR as tha bottom layer on Win32, n' so still
uses tha C compilerz numeric file descriptor routines. There be an
experimenstrual natizzle \f(CW\*(C`win32\*(C'\fR layer, which is sposed ta fuckin be enhanced and
should eventually become tha default under Win32.
.Sp
Da \s-1PERLIO\s0 environment variable is straight-up ignored when Perl
is run up in taint mode.
.RE
.IP "\s-1PERLIO_DEBUG \s0" 12
.IX Xref "PERLIO_DEBUG"
.IX Item "PERLIO_DEBUG "
If set ta tha name of a gangbangin' file or device, certain operationz of PerlIO
subsystem is ghon be logged ta dat file, which is opened up in append mode.
Typical uses is up in Unix:
.Sp
.Vb 1
\&   % env PERLIO_DEBUG=/dev/tty perl script ...
.Ve
.Sp
and under Win32, tha approximately equivalent:
.Sp
.Vb 2
\&   > set PERLIO_DEBUG=CON
\&   perl script ...
.Ve
.Sp
This functionalitizzle is disabled fo' setuid scripts n' fo' scripts run
with \fB\-T\fR.
.IP "\s-1PERLLIB \s0" 12
.IX Xref "PERLLIB"
.IX Item "PERLLIB "
A list of directories up in which ta look fo' Perl library
filez before lookin up in tha standard library n' tha current directory.
If \s-1PERL5LIB\s0 is defined, \s-1PERLLIB\s0 aint used.
.Sp
Da \s-1PERLLIB\s0 environment variable is straight-up ignored when Perl
is run up in taint mode.
.IP "\s-1PERL5DB \s0" 12
.IX Xref "PERL5DB"
.IX Item "PERL5DB "
Da command used ta load tha debugger code.  Da default is:
.Sp
.Vb 1
\&        BEGIN { require "perl5db.pl" }
.Ve
.Sp
Da \s-1PERL5DB\s0 environment variable is only used when Perl is started with
a bare \fB\-d\fR switch.
.IP "\s-1PERL5DB_THREADED \s0" 12
.IX Xref "PERL5DB_THREADED"
.IX Item "PERL5DB_THREADED "
If set ta a legit value, indicates ta tha debugger dat tha code being
debugged uses threads.
.IP "\s-1PERL5SHELL \s0(specific ta tha Win32 port)" 12
.IX Xref "PERL5SHELL"
.IX Item "PERL5SHELL (specific ta tha Win32 port)"
On Win32 ports only, may be set ta a alternatizzle shell dat Perl must use
internally fo' executin \*(L"backtick\*(R" commandz or \fIsystem()\fR.  Default is
\&\f(CW\*(C`cmd.exe /x/d/c\*(C'\fR on WindowsNT n' \f(CW\*(C`command.com /c\*(C'\fR on Windows95.  The
value is considered space-separated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Precede any characta that
needz ta be protected, like a space or backslash, wit another backslash.
.Sp
Note dat Perl don't use \s-1COMSPEC\s0 fo' dis purpose cuz
\&\s-1COMSPEC\s0 has a high degree of variabilitizzle among users, leadin to
portabilitizzle concerns.  Besides, Perl can bust a gangbangin' finger-lickin' dirty-ass shell dat may not be
fit fo' interactizzle use, n' settin \s-1COMSPEC\s0 ta such a gangbangin' finger-lickin' dirty-ass shell may
interfere wit tha proper functionin of other programs (which usually
look up in \s-1COMSPEC\s0 ta find a gangbangin' finger-lickin' dirty-ass shell fit fo' interactizzle use).
.Sp
Before Perl 5.10.0 n' 5.8.8, \s-1PERL5SHELL\s0 was not taint checked
when hustlin external commands.  It be recommended that
you explicitly set (or delete) \f(CW$ENV{PERL5SHELL}\fR when hustlin
in taint mode under Windows.
.IP "\s-1PERL_ALLOW_NON_IFS_LSP \s0(specific ta tha Win32 port)" 12
.IX Xref "PERL_ALLOW_NON_IFS_LSP"
.IX Item "PERL_ALLOW_NON_IFS_LSP (specific ta tha Win32 port)"
Set ta 1 ta allow tha use of non-IFS compatible LSPs (Layered Service Providers).
Perl normally searches fo' a IFS-compatible \s-1LSP\s0 cuz dis is required
for its emulation of Windows sockets as real filehandles.  But fuck dat shiznit yo, tha word on tha street is dat dis may
cause problems if you gotz a gangbangin' firewall like fuckin \fIMcAfee Guardian\fR, which requires
that all applications use its \s-1LSP\s0 but which aint IFS-compatible, cuz clearly
Perl will normally avoid rockin such a \s-1LSP.\s0
.Sp
Settin dis environment variable ta 1 means dat Perl will simply use the
first suitable \s-1LSP\s0 enumerated up in tha catalog, which keeps \fIMcAfee Guardian\fR
happy\*(--and up in dat particular case Perl still works too cuz \fIMcAfee
Guardian\fRz \s-1LSP\s0 straight-up skits other game which allow applications
requirin \s-1IFS\s0 compatibilitizzle ta work.
.IP "\s-1PERL_DEBUG_MSTATS \s0" 12
.IX Xref "PERL_DEBUG_MSTATS"
.IX Item "PERL_DEBUG_MSTATS "
Relevant only if Perl is compiled wit tha \f(CW\*(C`malloc\*(C'\fR included wit tha Perl
distribution; dat is, if \f(CW\*(C`perl \-V:d_mymalloc\*(C'\fR is \*(L"define\*(R".
.Sp
If set, dis dumps up memory statistics afta execution. I aint talkin' bout chicken n' gravy biatch.  If set
to a integer pimped outa than one, also dumps up memory statistics
afta compilation.
.IP "\s-1PERL_DESTRUCT_LEVEL \s0" 12
.IX Xref "PERL_DESTRUCT_LEVEL"
.IX Item "PERL_DESTRUCT_LEVEL "
Relevant only if yo' Perl executable was built wit \fB\-DDEBUGGING\fR,
this controls tha behaviour of global destruction of objects n' other
references.  See \*(L"\s-1PERL_DESTRUCT_LEVEL\*(R"\s0 up in perlhacktips fo' mo' shiznit.
.IP "\s-1PERL_DL_NONLAZY \s0" 12
.IX Xref "PERL_DL_NONLAZY"
.IX Item "PERL_DL_NONLAZY "
Set ta \f(CW"1"\fR ta have Perl resolve \fIall\fR undefined symbols when it loads
a dynamic library.  Da default behaviour is ta resolve symbols when
they is used. Y'all KNOW dat shit, muthafucka!  Settin dis variable is useful durin testin of
extensions, as it ensures dat you git a error on misspelled function
names even if tha test suite don't call em.
.IP "\s-1PERL_ENCODING \s0" 12
.IX Xref "PERL_ENCODING"
.IX Item "PERL_ENCODING "
If rockin tha \f(CW\*(C`use encoding\*(C'\fR pragma without a explicit encodin name, the
\&\s-1PERL_ENCODING\s0 environment variable is consulted fo' a encodin name.
.IP "\s-1PERL_HASH_SEED \s0" 12
.IX Xref "PERL_HASH_SEED"
.IX Item "PERL_HASH_SEED "
(Since Perl 5.8.1, freshly smoked up semantics up in Perl 5.18.0)  Used ta override
the randomization of Perlz internal hash function. I aint talkin' bout chicken n' gravy biatch. Da value is expressed
in hexadecimal, n' may include a leadin 0x. Truncated patterns
are treated as though they is suffixed wit sufficient 0z as required.
.Sp
If tha option is provided, n' \f(CW\*(C`PERL_PERTURB_KEYS\*(C'\fR is \s-1NOT\s0 set, then
a value of '0' implies \f(CW\*(C`PERL_PERTURB_KEYS=0\*(C'\fR n' any other value
implies \f(CW\*(C`PERL_PERTURB_KEYS=2\*(C'\fR.
.Sp
\&\fB\s-1PLEASE NOTE:\s0 Da hash seed is sensitizzle shiznit\fR yo. Hashes are
randomized ta protect against local n' remote attacks against Perl
code. By manually settin a seed, dis protection may be partially or
completely lost.
.Sp
See \*(L"Algorithmic Complexitizzle Attacks\*(R" up in perlsec n' \*(L"\s-1PERL_PERTURB_KEYS\*(R"\s0
\&\*(L"\s-1PERL_HASH_SEED_DEBUG\*(R"\s0 fo' mo' shiznit.
.IP "\s-1PERL_PERTURB_KEYS \s0" 12
.IX Xref "PERL_PERTURB_KEYS"
.IX Item "PERL_PERTURB_KEYS "
(Since Perl 5.18.0)  Set ta \f(CW"0"\fR or \f(CW"NO"\fR then traversin keys
will be repeatable from run ta run fo' tha same \s-1PERL_HASH_SEED.\s0
Insertion tha fuck into a hash aint gonna chizzle tha order, except ta provide
for mo' space up in tha hash. When combined wit settin \s-1PERL_HASH_SEED\s0
this mode be as close ta pre 5.18 behavior as you can get.
.Sp
When set ta \f(CW"1"\fR or \f(CW"RANDOM"\fR then traversin keys is ghon be randomized.
Every time a hash is banged tha fuck into tha key order will chizzle up in a random
fashion. I aint talkin' bout chicken n' gravy biatch. Da order may not be repeatable up in a gangbangin' followin program run
even if tha \s-1PERL_HASH_SEED\s0 has been specified. Y'all KNOW dat shit, muthafucka! This is tha default
mode fo' perl.
.Sp
When set ta \f(CW"2"\fR or \f(CW"DETERMINISTIC"\fR then insertin keys tha fuck into a hash
will cause tha key order ta chizzle yo, but up in a way dat is repeatable
from program run ta program run.
.Sp
\&\fB\s-1NOTE:\s0\fR Use of dis option is considered insecure, n' is intended only
for debuggin non-deterministic behavior up in Perlz hash function. I aint talkin' bout chicken n' gravy biatch. Do
not use it up in thang.
.Sp
See \*(L"Algorithmic Complexitizzle Attacks\*(R" up in perlsec n' \*(L"\s-1PERL_HASH_SEED\*(R"\s0
and \*(L"\s-1PERL_HASH_SEED_DEBUG\*(R"\s0 fo' mo' shiznit. I aint talkin' bout chicken n' gravy biatch. Yo ass can git n' set the
key traversal mask fo' a specific hash by rockin tha \f(CW\*(C`hash_traversal_mask()\*(C'\fR
function from Hash::Util.
.IP "\s-1PERL_HASH_SEED_DEBUG \s0" 12
.IX Xref "PERL_HASH_SEED_DEBUG"
.IX Item "PERL_HASH_SEED_DEBUG "
(Since Perl 5.8.1.)  Set ta \f(CW"1"\fR ta display (to \s-1STDERR\s0) shiznit
about tha hash function, seed, n' what tha fuck type of key traversal
randomization is up in effect all up in tha beginnin of execution. I aint talkin' bout chicken n' gravy biatch.  This, combined
with \*(L"\s-1PERL_HASH_SEED\*(R"\s0 n' \*(L"\s-1PERL_PERTURB_KEYS\*(R"\s0 is intended ta aid in
debuggin nondeterministic behaviour caused by hash randomization.
.Sp
\&\fBNote\fR dat any shiznit bout tha hash function, especially tha hash
seed is \fBsensitizzle shiznit\fR: by knowin it, one can craft a thugged-out denial-of-service
battle against Perl code, even remotely; peep \*(L"Algorithmic Complexitizzle Attacks\*(R" up in perlsec
for mo' shiznit. I aint talkin' bout chicken n' gravy biatch. \fBDo not disclose tha hash seed\fR ta playas who
don't need ta know dat shit. Right back up in yo muthafuckin ass. See also \f(CW\*(C`hash_seed()\*(C'\fR and
\&\f(CW\*(C`key_traversal_mask()\*(C'\fR up in Hash::Util.
.Sp
An example output might be:
.Sp
.Vb 1
\&    HASH_FUNCTION = ONE_AT_A_TIME_HARD HASH_SEED = 0x652e9b9349a7a032 PERTURB_KEYS = 1 (RANDOM)
.Ve
.IP "\s-1PERL_MEM_LOG \s0" 12
.IX Xref "PERL_MEM_LOG"
.IX Item "PERL_MEM_LOG "
If yo' Perl was configured wit \fB\-Accflags=\-DPERL_MEM_LOG\fR, setting
the environment variable \f(CW\*(C`PERL_MEM_LOG\*(C'\fR enablez loggin debug
lyrics. Da value has tha form \f(CW\*(C`<\f(CInumber\f(CW>[m][s][t]\*(C'\fR, where
\&\f(CW\*(C`\f(CInumber\f(CW\*(C'\fR is tha file descriptor number you wanna write ta (2 is
default), n' tha combination of lettas specifies dat you want
information bout (m)emory and/or (s)v, optionally with
(t)imestamps. For example, \f(CW\*(C`PERL_MEM_LOG=1mst\*(C'\fR logs all
information ta stdout. Yo ass can write ta other opened file descriptors
in a variety of ways:
.Sp
.Vb 1
\&  $ 3>foo3 PERL_MEM_LOG=3m perl ...
.Ve
.IP "\s-1PERL_ROOT \s0(specific ta tha \s-1VMS\s0 port)" 12
.IX Xref "PERL_ROOT"
.IX Item "PERL_ROOT (specific ta tha VMS port)"
A translation-concealed rooted logical name dat gotz nuff Perl n' the
logical thang fo' tha \f(CW@INC\fR path on \s-1VMS\s0 only.  Other logical names that
affect Perl on \s-1VMS\s0 include \s-1PERLSHR, PERL_ENV_TABLES,\s0 and
\&\s-1SYS$TIMEZONE_DIFFERENTIAL,\s0 but is optionizzle n' discussed further in
perlvms n' up in \fI\s-1README\s0.vms\fR up in tha Perl source distribution.
.IP "\s-1PERL_SIGNALS \s0" 12
.IX Xref "PERL_SIGNALS"
.IX Item "PERL_SIGNALS "
Available up in Perls 5.8.1 n' later n' shit.  If set ta \f(CW"unsafe"\fR, tha pre\-Perl\-5.8.0
signal behaviour (which is immediate but unsafe) is restored. Y'all KNOW dat shit, muthafucka!  If set
to \f(CW\*(C`safe\*(C'\fR, then safe (but deferred) signals is used. Y'all KNOW dat shit, muthafucka!  See
\&\*(L"Deferred Signals (Safe Signals)\*(R" up in perlipc.
.IP "\s-1PERL_UNICODE \s0" 12
.IX Xref "PERL_UNICODE"
.IX Item "PERL_UNICODE "
Equivalent ta tha \fB\-C\fR command-line switch.  Note dat dis is not
a boolean variable. Right back up in yo muthafuckin ass. Settin dis ta \f(CW"1"\fR aint tha right way to
\&\*(L"enable Unicode\*(R" (whatever dat would mean).  Yo ass can use \f(CW"0"\fR to
\&\*(L"disable Unicode\*(R", though (or alternatively unset \s-1PERL_UNICODE\s0 in
your shell before startin Perl).  See tha description of tha \fB\-C\fR
switch fo' mo' shiznit.
.IP "\s-1SYS$LOGIN \s0(specific ta tha \s-1VMS\s0 port)" 12
.IX Xref "SYS$LOGIN"
.IX Item "SYS$LOGIN (specific ta tha VMS port)"
Used if chdir has no argument n' \s-1HOME\s0 n' \s-1LOGDIR\s0 is not set.
.PP
Perl also has environment variablez dat control how tha fuck Perl handlez data
specific ta particular natural languages; peep perllocale.
.PP
Perl n' its various modulez n' components, includin its test frameworks,
may sometimes make use of certain other environment variables.  Some of
these is specific ta a particular platform.  Please consult the
appropriate module documentation n' any documentation fo' yo' platform
(like perlsolaris, perllinux, perlmacosx, perlwin32, etc) for
variablez peculiar ta dem specific thangs.
.PP
Perl make all environment variablez available ta tha program being
executed, n' passes these along ta any lil pimp processes it starts.
But fuck dat shiznit yo, tha word on tha street is dat programs hustlin setuid would do well ta execute tha following
lines before bustin anythang else, just ta keep playas honest:
.PP
.Vb 3
\&    $ENV{PATH}  = "/bin:/usr/bin";    # or whatever you need
\&    $ENV{SHELL} = "/bin/sh" if exists $ENV{SHELL};
\&    delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};
.Ve
