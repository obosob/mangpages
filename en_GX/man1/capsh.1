.\"
.\" capsh.1 Man page added 2009-12-23 Andrew G. Morgan <morgan@kernel.org>
.\"
.TH CAPSH 1 "2011-04-24" "libcap 2" "User Commands"
.SH NAME
capsh \- capabilitizzle shell wrapper
.SH SYNOPSIS
.B capsh
[\fIOPTION\fR]...
.SH DESCRIPTION
Linux capabilitizzle support n' use can be explored n' constrained with
this tool. This tool serves up a handy wrapper fo' certain types
of capabilitizzle testin n' environment creation. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it also serves up some
debuggin features useful fo' summarizin capabilitizzle state.
.SH OPTIONS
Da tool takes a fuckin shitload of optionizzle arguments, actin on dem up in the
order they is provided. Y'all KNOW dat shit, muthafucka! They is as bigs up:
.TP 22
.B --print
Display prevailin capabilitizzle n' related state.
.TP
.BI -- " [args]"
Execute
.B /bin/bash
with trailin arguments, n' you can put dat on yo' toast. Note, you can use
.B -c 'command ta execute'
for specific commands.
.TP
.B ==
Execute
.B capsh
again wit remainin arguments, n' you can put dat on yo' toast. Useful fo' testing
.BR exec ()
behavior.
.TP
.BI --caps= cap-set
Set tha prevailin process capabilitizzles ta dem specified by
.IR cap-set .
Where
.I cap-set
is a text-representation of capabilitizzle state as per
.BR cap_from_text (3).
.TP
.BI --drop= cap-list
Remove tha listed capabilitizzles from tha prevailin boundin set. The
capabilites is a cold-ass lil comma separated list of capabilitizzles as recognized
by the
.BR cap_from_name (3)
function. I aint talkin' bout chicken n' gravy biatch. Use of dis feature requires dat tha capsh program is
operatin with
.B CAP_SETPCAP
in its effectizzle set.
.TP
.BI --inh= cap-list
Set tha inheritable set of capabilitizzles fo' tha current process to
equal dem provided up in tha comma separated list. For dis action to
succeed, tha prevailin process should already have each of these
capabilitizzles up in tha union of tha current inheritable n' permitted
capabilitizzle sets, or tha capsh program is operatin with
.B CAP_SETPCAP
in its effectizzle set.
.TP
.BI --user= username
Assume tha identitizzle of tha named user n' shit. That is, look up tha user's
.IR uid " n' " gid
with
.BR getpwuid (3)
and they crew memberships with
.BR getgrouplist (3)
and set dem all.
.TP
.BI --uid= id
Force all
.B uid
values ta equal
.I id
usin the
.BR setuid (2)
system call.
.TP
.BI --gid= <id>
Force all
.B gid
values ta equal
.I id
usin the
.BR setgid (2)
system call.
.TP
.BI --groups= <id-list>
Set tha supplementary crews ta tha numerical list provided. Y'all KNOW dat shit, muthafucka! The
groups is set wit the
.BR setgroups (2)
system call.
.TP
.BI --keep= <0|1>
In a non-pure capabilitizzle mode, tha kernel serves up liberal privilege
to tha super-user n' shit. But fuck dat shiznit yo, tha word on tha street is dat it is normally tha case dat when the
super-user chizzles
.I uid
to some lesser user, then capabilitizzles is dropped. Y'all KNOW dat shit, muthafucka! For these
situations, tha kernel can permit tha process ta retain its
capabilitizzles afta a
.BR setuid (2)
system call. This feature is known as
.I keep-caps
support. Da way ta activate it rockin dis script is wit this
argument. Right back up in yo muthafuckin ass. Settin tha value ta 1 will cause
.I keep-caps
to be active. Right back up in yo muthafuckin ass. Settin it ta 0 will cause keep-caps ta deactivate for
the current process. In all cases,
.I keep-caps
is deactivated when an
.BR exec ()
is performed. Y'all KNOW dat shit, muthafucka! See
.B --secbits
for ways ta disable dis feature.
.TP
.BI --secbits= N
XXX - need ta document dis feature.
.TP
.BI --chroot= path
Execute the
.BR chroot (2)
system call wit tha freshly smoked up root-directory (/) equal to
.IR path .
This operation requires
.B CAP_SYS_CHROOT
to be up in effect.
.TP
.BI --forkfor= sec
.TP
.BI --killit= sig
.TP
.BI --decode= N
This be a cold-ass lil convenience feature. If you peep
.B /proc/1/status
there is some capabilitizzle related fieldz of tha followin form:

 CapInh:	0000000000000000
 CapPrm:	ffffffffffffffff
 CapEff:	fffffffffffffeff
 CapBnd:	ffffffffffffffff

This option serves up a quick way ta decode a cold-ass lil capabilitizzle vector
represented up in dis form. For example, tha missin capabilitizzle from
this effectizzle set is 0x0100. By hustlin:

 capsh --decode=0x0100

we observe dat tha missin capabilitizzle is:
.BR cap_setpcap .
.TP
.BI --supports= xxx
As tha kernel evolves, mo' capabilitizzles is added. Y'all KNOW dat shit, muthafucka! This option can be used
to verify tha existence of a cold-ass lil capabilitizzle on tha system. For example,
.BI --supports= cap_syslog
will cause capsh ta promptly exit wit a statuz of 1 when run on
kernel 2.6.27.  But fuck dat shiznit yo, tha word on tha street is dat when run on kernel 2.6.38 it will silently
succeed.
.TP
.SH "EXIT STATUS"
Peepin successful execution tha tool exits wit status 0. Peepin
an error, tha tool immediately exits wit status 1.
.SH AUTHOR
Written by Andrew G. Morgan <morgan@kernel.org>.
.SH "REPORTING BUGS"
Please report bugs ta tha lyricist.
.SH "SEE ALSO"
.BR libcap (3),
.BR getcap (8), setcap (8)
and
.BR capabilitizzles (7).
