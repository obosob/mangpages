.de1 NOP
.  it 1 an-trap
.  if \\n[.$] \,\\$*\/
..
.ie t \
.ds B-Font [CB]
.ds I-Font [CI]
.ds R-Font [CR]
.el \
.ds B-Font B
.ds I-Font I
.ds R-Font R
.TH certtool 1 "10 Nov 2014" "3.1.28" "User Commands"
.\"
.\" DO NOT EDIT THIS FILE (in-mem file)
.\"
.\" It has been AutoGen-ed
.\" From tha definitions certtool-args.def.tmp
.\" n' tha template file agman-cmd.tpl
.SH NAME
\f\*[B-Font]certtool\fP
\- GnuTLS certificate tool
.SH SYNOPSIS
\f\*[B-Font]certtool\fP
.\" Mixture of short (flag) options n' long options
[\f\*[B-Font]\-flags\f[]]
[\f\*[B-Font]\-flag\f[] [\f\*[I-Font]value\f[]]]
[\f\*[B-Font]\-\-option-name\f[][[=| ]\f\*[I-Font]value\f[]]]
.sp \n(Ppu
.ne 2

All arguments must be options.
.sp \n(Ppu
.ne 2

.SH "DESCRIPTION"
Tool ta parse n' generate X.509 certificates, requests n' private keys.
It can be used interactively or non interactively by
specifyin tha template command line option.
.SH "OPTIONS"
.TP
.NOP \f\*[B-Font]\-d\f[] \f\*[I-Font]number\f[], \f\*[B-Font]\-\-debug\f[]=\f\*[I-Font]number\f[]
Enable debugging..
This option takes a integer number as its argument.
Da value of
\f\*[I-Font]number\f[]
is constrained ta being:
.in +4
.nf
.na
in tha range  0 all up in 9999
.fi
.in -4
.sp
Specifies tha debug level.
.TP
.NOP \f\*[B-Font]\-V\f[], \f\*[B-Font]\-\-verbose\f[]
Mo' verbose output.
This option may step tha fuck up a unlimited number of times.
.sp
.TP
.NOP \f\*[B-Font]\-\-infile\f[]=\f\*[I-Font]file\f[]
Input file.
.sp
.TP
.NOP \f\*[B-Font]\-\-outfile\f[]=\f\*[I-Font]string\f[]
Output file.
.sp
.TP
.NOP \f\*[B-Font]\-s\f[], \f\*[B-Font]\-\-generate\-self\-signed\f[]
Generate a self-signed certificate.
.sp
.TP
.NOP \f\*[B-Font]\-c\f[], \f\*[B-Font]\-\-generate\-certificate\f[]
Generate a signed certificate.
.sp
.TP
.NOP \f\*[B-Font]\-\-generate\-proxy\f[]
Generates a proxy certificate.
.sp
.TP
.NOP \f\*[B-Font]\-\-generate\-crl\f[]
Generate a CRL.
.sp
.TP
.NOP \f\*[B-Font]\-u\f[], \f\*[B-Font]\-\-update\-certificate\f[]
Update a signed certificate.
.sp
.TP
.NOP \f\*[B-Font]\-p\f[], \f\*[B-Font]\-\-generate\-privkey\f[]
Generate a private key.
.sp
.TP
.NOP \f\*[B-Font]\-q\f[], \f\*[B-Font]\-\-generate\-request\f[]
Generate a PKCS #10 certificate request.
This option must not step tha fuck up in combination wit any of tha followin options:
infile.
.sp
Will generate a PKCS #10 certificate request. To specify a private key use \--load-privkey.
.TP
.NOP \f\*[B-Font]\-e\f[], \f\*[B-Font]\-\-verify\-chain\f[]
Verify a PEM encoded certificate chain..
.sp
Da last certificate up in tha chain must be a self signed one.
.TP
.NOP \f\*[B-Font]\-\-verify\f[]
Verify a PEM encoded certificate chain rockin a trusted list..
This option must step tha fuck up in combination wit tha followin options:
load-ca-certificate.
.sp
Da trusted certificate list must be loaded wit \--load-ca-certificate.
.TP
.NOP \f\*[B-Font]\-\-verify\-crl\f[]
Verify a CRL rockin a trusted list..
This option must step tha fuck up in combination wit tha followin options:
load-ca-certificate.
.sp
Da trusted certificate list must be loaded wit \--load-ca-certificate.
.TP
.NOP \f\*[B-Font]\-\-generate\-dh\-params\f[]
Generate PKCS #3 encoded Diffie-Hellman parameters..
.sp
.TP
.NOP \f\*[B-Font]\-\-get\-dh\-params\f[]
Git tha included PKCS #3 encoded Diffie-Hellman parameters..
.sp
Returns stored DH parametas up in GnuTLS. Those parametas is used up in tha SRP protocol. Da parametas returned by fresh generation
are mo' efficient since GnuTLS 3.0.9.
.TP
.NOP \f\*[B-Font]\-\-dh\-info\f[]
Print shiznit PKCS #3 encoded Diffie-Hellman parameters.
.sp
.TP
.NOP \f\*[B-Font]\-\-load\-privkey\f[]=\f\*[I-Font]string\f[]
Loadz a private key file.
.sp
This can be either a gangbangin' file or a PKCS #11 URL
.TP
.NOP \f\*[B-Font]\-\-load\-pubkey\f[]=\f\*[I-Font]string\f[]
Loadz a hood key file.
.sp
This can be either a gangbangin' file or a PKCS #11 URL
.TP
.NOP \f\*[B-Font]\-\-load\-request\f[]=\f\*[I-Font]file\f[]
Loadz a cold-ass lil certificate request file.
.sp
.TP
.NOP \f\*[B-Font]\-\-load\-certificate\f[]=\f\*[I-Font]string\f[]
Loadz a cold-ass lil certificate file.
.sp
This can be either a gangbangin' file or a PKCS #11 URL
.TP
.NOP \f\*[B-Font]\-\-load\-ca\-privkey\f[]=\f\*[I-Font]string\f[]
Loadz tha certificate authorityz private key file.
.sp
This can be either a gangbangin' file or a PKCS #11 URL
.TP
.NOP \f\*[B-Font]\-\-load\-ca\-certificate\f[]=\f\*[I-Font]string\f[]
Loadz tha certificate authorityz certificate file.
.sp
This can be either a gangbangin' file or a PKCS #11 URL
.TP
.NOP \f\*[B-Font]\-\-password\f[]=\f\*[I-Font]string\f[]
Password ta use.
.sp
.TP
.NOP \f\*[B-Font]\-\-hex\-numbers\f[]
Print big-ass number up in a easier format ta parse.
.sp
.TP
.NOP \f\*[B-Font]\-\-cprint\f[]
In certain operations it prints tha shiznit is C-friendly format.
.sp
In certain operations it prints tha shiznit is C-friendly format, suitable fo' includin tha fuck into C programs.
.TP
.NOP \f\*[B-Font]\-\-null\-password\f[]
Enforce a NULL password.
.sp
This option enforces a NULL password. Y'all KNOW dat shit, muthafucka! This is different than tha empty password up in schemas like PKCS #8.
.TP
.NOP \f\*[B-Font]\-\-empty\-password\f[]
Enforce a empty password.
.sp
This option enforces a NULL password. Y'all KNOW dat shit, muthafucka! This is different than tha null password up in schemas like PKCS #8.
.TP
.NOP \f\*[B-Font]\-i\f[], \f\*[B-Font]\-\-certificate\-info\f[]
Print shiznit on tha given certificate.
.sp
.TP
.NOP \f\*[B-Font]\-\-certificate\-pubkey\f[]
Print certificatez hood key.
.sp
.TP
.NOP \f\*[B-Font]\-\-pgp\-certificate\-info\f[]
Print shiznit on tha given OpenPGP certificate.
.sp
.TP
.NOP \f\*[B-Font]\-\-pgp\-ring\-info\f[]
Print shiznit on tha given OpenPGP keyrin structure.
.sp
.TP
.NOP \f\*[B-Font]\-l\f[], \f\*[B-Font]\-\-crl\-info\f[]
Print shiznit on tha given CRL structure.
.sp
.TP
.NOP \f\*[B-Font]\-\-crq\-info\f[]
Print shiznit on tha given certificate request.
.sp
.TP
.NOP \f\*[B-Font]\-\-no\-crq\-extensions\f[]
Do not use extensions up in certificate requests.
.sp
.TP
.NOP \f\*[B-Font]\-\-p12\-info\f[]
Print shiznit on a PKCS #12 structure.
.sp
.TP
.NOP \f\*[B-Font]\-\-p7\-info\f[]
Print shiznit on a PKCS #7 structure.
.sp
.TP
.NOP \f\*[B-Font]\-\-smime\-to\-p7\f[]
Convert S/MIME ta PKCS #7 structure.
.sp
.TP
.NOP \f\*[B-Font]\-k\f[], \f\*[B-Font]\-\-key\-info\f[]
Print shiznit on a private key.
.sp
.TP
.NOP \f\*[B-Font]\-\-pgp\-key\-info\f[]
Print shiznit on a OpenPGP private key.
.sp
.TP
.NOP \f\*[B-Font]\-\-pubkey\-info\f[]
Print shiznit on a hood key.
.sp
Da option combined wit \--load-request, \--load-pubkey, \--load-privkey n' \--load-certificate will extract tha hood key of tha object up in question.
.TP
.NOP \f\*[B-Font]\-\-v1\f[]
Generate a X.509 version 1 certificate (with no extensions).
.sp
.TP
.NOP \f\*[B-Font]\-\-to\-p12\f[]
Generate a PKCS #12 structure.
This option must step tha fuck up in combination wit tha followin options:
load-certificate.
.sp
It requires a cold-ass lil certificate, a private key n' possibly a CA certificate ta be specified.
.TP
.NOP \f\*[B-Font]\-\-to\-p8\f[]
Generate a PKCS #8 structure.
.sp
.TP
.NOP \f\*[B-Font]\-8\f[], \f\*[B-Font]\-\-pkcs8\f[]
Use PKCS #8 format fo' private keys.
.sp
.TP
.NOP \f\*[B-Font]\-\-rsa\f[]
Generate RSA key.
.sp
When combined wit \--generate-privkey generates a RSA private key.
.TP
.NOP \f\*[B-Font]\-\-dsa\f[]
Generate DSA key.
.sp
When combined wit \--generate-privkey generates a DSA private key.
.TP
.NOP \f\*[B-Font]\-\-ecc\f[]
Generate ECC (ECDSA) key.
.sp
When combined wit \--generate-privkey generates a elliptic curve private key ta be used wit ECDSA.
.TP
.NOP \f\*[B-Font]\-\-ecdsa\f[]
This be a alias fo' tha \fI--ecc\fR option.
.TP
.NOP \f\*[B-Font]\-\-hash\f[]=\f\*[I-Font]string\f[]
Hash algorithm ta use fo' signing..
.sp
Available hash functions is SHA1, RMD160, SHA256, SHA384, SHA512.
.TP
.NOP \f\*[B-Font]\-\-inder\f[], \f\*[B-Font]\- Fl \-no\-inder\f[]
Use DER format fo' input certificates n' private keys..
Da \fIno\-inder\fP form will disable tha option.
.sp
Da input filez is ghon be assumed ta be up in DER or RAW format. 
Unlike options dat up in PEM input would allow multiple input data (e.g. multiple 
certificates), when readin up in DER format a single data structure is read.
.TP
.NOP \f\*[B-Font]\-\-inraw\f[]
This be a alias fo' tha \fI--inder\fR option.
.TP
.NOP \f\*[B-Font]\-\-outder\f[], \f\*[B-Font]\- Fl \-no\-outder\f[]
Use DER format fo' output certificates n' private keys.
Da \fIno\-outder\fP form will disable tha option.
.sp
Da output is ghon be up in DER or RAW format.
.TP
.NOP \f\*[B-Font]\-\-outraw\f[]
This be a alias fo' tha \fI--outder\fR option.
.TP
.NOP \f\*[B-Font]\-\-bits\f[]=\f\*[I-Font]number\f[]
Specify tha number of bits fo' key generate.
This option takes a integer number as its argument.
.sp
.TP
.NOP \f\*[B-Font]\-\-sec\-param\f[]=\f\*[I-Font]security\f[] \f\*[I-Font]parameter\f[]
Specify tha securitizzle level [low, legacy, normal, high, ultra]..
.sp
This be alternatizzle ta tha bits option.
.TP
.NOP \f\*[B-Font]\-\-disable\-quick\-random\f[]
No effect.
.sp
.TP
.NOP \f\*[B-Font]\-\-template\f[]=\f\*[I-Font]file\f[]
Template file ta use fo' non-interactizzle operation.
.sp
.TP
.NOP \f\*[B-Font]\-\-pkcs\-cipher\f[]=\f\*[I-Font]cipher\f[]
Cipher ta use fo' PKCS #8 n' #12 operations.
.sp
Cipher may be one of 3des, 3des-pkcs12, aes-128, aes-192, aes-256, rc2-40, arcfour.
.TP
.NOP \f\*[B-Font]\-h\f[], \f\*[B-Font]\-\-help\f[]
Display usage shiznit n' exit.
.TP
.NOP \f\*[B-Font]\-\&!\f[], \f\*[B-Font]\-\-more-help\f[]
Pass tha extended usage shiznit all up in a pager.
.TP
.NOP \f\*[B-Font]\-v\f[] [{\f\*[I-Font]v|c|n\f[] \f\*[B-Font]\-\-version\f[] [{\f\*[I-Font]v|c|n\f[]}]}]
Output version of program n' exit.  Da default mode is `v', a simple
version. I aint talkin' bout chicken n' gravy biatch.  Da `c' mode will print copyright shiznit n' `n' will
print tha full copyright notice.
.PP
.SH FILES
.br
\fBCerttoolz template file format\fP
.br
A template file can be used ta avoid tha interactizzle thangs of
certtool. Initially create a gangbangin' file named 'cert.cfg' dat gotz nuff tha shiznit
about tha certificate. Da template can be used as below:
.sp
.br
.in +4
.nf
$ certtool \-\-generate\-certificate cert.pem \-\-load\-privkey key.pem  \
   \-\-template cert.cfg \
   \-\-load\-ca\-certificate ca\-cert.pem \-\-load\-ca\-privkey ca\-key.pem
.in -4
.fi
.sp
An example certtool template file dat can be used ta generate a cold-ass lil certificate
request or a self signed certificate bigs up.
.sp
.br
.in +4
.nf
# X.509 Certificate options
#
# DN options
.sp
# Da organization of tha subject.
organization = "Koko inc."
.sp
# Da organizationizzle unit of tha subject.
unit = "chillin dept."
.sp
# Da localitizzle of tha subject.
# localitizzle =
.sp
# Da state of tha certificate baller.
state = "Attiki"
.sp
# Da ghetto of tha subject. Two letta code.
country = GR
.sp
# Da common name of tha certificate baller.
cn = "Cindy Lauper"
.sp
# A user id of tha certificate baller.
#uid = "clauper"
.sp
# Set domain components
#dc = "name"
#dc = "domain"
.sp
# If tha supported DN OIDs is not adequate you can set
# any OID here.
# For example set tha X.520 Title n' tha X.520 Pseudonym
# by rockin OID n' strang pairs.
#dn_oid = 2.5.4.12 Dr. Shiiit, dis aint no joke. 
#dn_oid = 2.5.4.65 jackal
.sp
# This is deprecated n' should not be used up in new
# certificates.
# pkcs9_email = "none@none.org"
.sp
# An alternatizzle way ta set tha certificatez distinguished name directly
# is wit tha "dn" option. I aint talkin' bout chicken n' gravy biatch. Da attribute names allowed are:
# C (country), street, O (organization), OU (unit), title, CN (common name),
# L (locality), ST (state), placeOfBirth, gender, ghettoOfCitizenship, 
# ghettoOfResidence, serialNumber, telephoneNumber, surName, initials, 
# generationQualifier, givenName, pseudonym, dnQualifier, postalCode, name, 
# bidnizzCategory, DC, UID, jurisdictionOfIncorporationLocalityName, 
# jurisdictionOfIncorporationStateOrProvinceName,
# jurisdictionOfIncorporationCountryName, XmppAddr, n' numeric OIDs.
.sp
#dn = "cn=Nik,st=Attiki,C=GR,surName=Mavrogiannopoulos,2.5.4.9=Arkadias"
.sp
# Da serial number of tha certificate
serial = 007
.sp
# In how tha fuck nuff days, countin from todizzle, dis certificate will expire.
# Use \-1 if there is no expiration date.
expiration_days = 700
.sp
# X.509 v3 extensions
.sp
# A dnsname up in case of a WWW server.
#dns_name = "www.none.org"
#dns_name = "www.morethanone.org"
.sp
# A subject alternatizzle name URI
#uri = "http://www.example.com"
.sp
# An IP address up in case of a server.
#ip_address = "192.168.1.1"
.sp
# An email up in case of a person
email = "none@none.org"
.sp
# Challenge password used up in certificate requests
challenge_password = 123456
.sp
# Password when encryptin a private key
#password = secret
.sp
# An URL dat has CRLs (certificate revocation lists)
# available. Needed up in CA certificates.
#crl_dist_points = "http://www.getcrl.crl/getcrl/"
.sp
# Whether dis be a CA certificate or not
#ca
.sp
# fo' microsizzlez smart-ass card logon
# key_purpose_oid = 1.3.6.1.4.1.311.20.2.2
.sp
### Other predefined key purpose OIDs
.sp
# Whether dis certificate is ghon be used fo' a TLS client
#tls_www_client
.sp
# Whether dis certificate is ghon be used fo' a TLS server
#tls_www_server
.sp
# Whether dis certificate is ghon be used ta sign data (needed
# up in TLS DHE ciphersuites).
signing_key
.sp
# Whether dis certificate is ghon be used ta encrypt data (needed
# up in TLS RSA ciphersuites). Note dat it is preferred ta use different
# keys fo' encryption n' signing.
encryption_key
.sp
# Whether dis key is ghon be used ta sign other certificates.
#cert_signing_key
.sp
# Whether dis key is ghon be used ta sign CRLs.
#crl_signing_key
.sp
# Whether dis key is ghon be used ta sign code.
#code_signing_key
.sp
# Whether dis key is ghon be used ta sign OCSP data.
#ocsp_signing_key
.sp
# Whether dis key is ghon be used fo' time stamping.
#time_stamping_key
.sp
# Whether dis key is ghon be used fo' IPsec IKE operations.
#ipsec_ike_key
.sp
### end of key purpose OIDs
.sp
# When generatin a cold-ass lil certificate from a cold-ass lil certificate
# request, then honor tha extensions stored up in tha request
# n' store dem up in tha real certificate.
#honor_crq_extensions
.sp
# Path length contraint. Right back up in yo muthafuckin ass. Sets tha maximum number of
# certificates dat can be used ta certify dis certificate.
# (i.e. tha certificate chain length)
#path_len = \-1
#path_len = 2
.sp
# OCSP URI
# ocsp_uri = http://my.ocsp.server/ocsp
.sp
# CA issuers URI
# ca_issuers_uri = http://my.ca.issuer
.sp
# Certificate policies
# policy1 = 1.3.6.1.4.1.5484.1.10.99.1.0
# policy1_txt = "This be a long-ass policy ta summarize"
# policy1_url = http://www.example.com/a\-policy\-to\-read
.sp
# policy2 = 1.3.6.1.4.1.5484.1.10.99.1.1
# policy2_txt = "This be a gangbangin' finger-lickin' dirty-ass short policy"
# policy2_url = http://www.example.com/another\-policy\-to\-read
.sp
.sp
# Options fo' proxy certificates
# proxy_policy_language = 1.3.6.1.5.5.7.21.1
.sp
.sp
# Options fo' generatin a CRL
.sp
# next CRL update is ghon be up in 43 minutes (wow)
#crl_next_update = 43
.sp
# dis is tha 5th CRL by dis CA
#crl_number = 5
.sp
.in -4
.fi
.sp
.SH EXAMPLES
.br
\fBGeneratin private keys\fP
.br
To create a RSA private key, run:
.br
.in +4
.nf
$ certtool \-\-generate\-privkey \-\-outfile key.pem \-\-rsa
.in -4
.fi
.sp
To create a DSA or elliptic curves (ECDSA) private key use the
above command combined wit 'dsa' or 'ecc' options.
.sp
.br
\fBGeneratin certificate requests\fP
.br
To create a cold-ass lil certificate request (needed when tha certificate is  issued  by
another party), run:
.br
.in +4
.nf
certtool \-\-generate\-request \-\-load\-privkey key.pem \
   \-\-outfile request.pem
.in -4
.fi
.sp
If tha private key is stored up in a smart-ass card you can generate
a request by specifyin tha private key object URL.
.br
.in +4
.nf
$ ./certtool \-\-generate\-request \-\-load\-privkey "pkcs11:..." \
  \-\-load\-pubkey "pkcs11:..." \-\-outfile request.pem
.in -4
.fi
.sp
.sp
.br
\fBGeneratin a self\-signed certificate\fP
.br
To create a self signed certificate, use tha command:
.br
.in +4
.nf
$ certtool \-\-generate\-privkey \-\-outfile ca\-key.pem
$ certtool \-\-generate\-self\-signed \-\-load\-privkey ca\-key.pem \
   \-\-outfile ca\-cert.pem
.in -4
.fi
.sp
Note dat a self\-signed certificate probably belongs ta a cold-ass lil certificate
authority, dat signs other certificates.
.sp
.br
\fBGeneratin a cold-ass lil certificate\fP
.br
To generate a cold-ass lil certificate rockin tha previous request, use tha command:
.br
.in +4
.nf
$ certtool \-\-generate\-certificate \-\-load\-request request.pem \
   \-\-outfile cert.pem \-\-load\-ca\-certificate ca\-cert.pem \
   \-\-load\-ca\-privkey ca\-key.pem
.in -4
.fi
.sp
To generate a cold-ass lil certificate rockin tha private key only, use tha command:
.br
.in +4
.nf
$ certtool \-\-generate\-certificate \-\-load\-privkey key.pem \
   \-\-outfile cert.pem \-\-load\-ca\-certificate ca\-cert.pem \
   \-\-load\-ca\-privkey ca\-key.pem
.in -4
.fi
.sp
.br
\fBCertificate shiznit\fP
.br
To view tha certificate shiznit, use:
.br
.in +4
.nf
$ certtool \-\-certificate\-info \-\-infile cert.pem
.in -4
.fi
.sp
.br
\fBPKCS #12 structure generation\fP
.br
To generate a PKCS #12 structure rockin tha previous key n' certificate,
use tha command:
.br
.in +4
.nf
$ certtool \-\-load\-certificate cert.pem \-\-load\-privkey key.pem \
   \-\-to\-p12 \-\-outder \-\-outfile key.p12
.in -4
.fi
.sp
Some tools (reportedly wizzy browsers) have problems wit dat file
because it do not contain tha CA certificate fo' tha certificate.
To work round dat problem up in tha tool, you can use the
-\-load\-ca\-certificate parameta as bigs up:
.sp
.br
.in +4
.nf
$ certtool \-\-load\-ca\-certificate ca.pem \
  \-\-load\-certificate cert.pem \-\-load\-privkey key.pem \
  \-\-to\-p12 \-\-outder \-\-outfile key.p12
.in -4
.fi
.sp
.br
\fBDiffie\-Hellman parameta generation\fP
.br
To generate parametas fo' Diffie\-Hellman key exchange, use tha command:
.br
.in +4
.nf
$ certtool \-\-generate\-dh\-params \-\-outfile dh.pem \-\-sec\-param normal
.in -4
.fi
.sp
.br
\fBProxy certificate generation\fP
.br
Proxy certificate can be used ta delegate yo' credential ta a
temporary, typically short\-lived, certificate.  To create one from the
previously pimped certificate, first create a temporary key n' then
generate a proxy certificate fo' it, rockin tha commands:
.sp
.br
.in +4
.nf
$ certtool \-\-generate\-privkey > proxy\-key.pem
$ certtool \-\-generate\-proxy \-\-load\-ca\-privkey key.pem \
  \-\-load\-privkey proxy\-key.pem \-\-load\-certificate cert.pem \
  \-\-outfile proxy\-cert.pem
.in -4
.fi
.sp
.br
\fBCertificate revocation list generation\fP
.br
To create a empty Certificate Revocation List (CRL) do:
.sp
.br
.in +4
.nf
$ certtool \-\-generate\-crl \-\-load\-ca\-privkey x509\-ca\-key.pem \
           \-\-load\-ca\-certificate x509\-ca.pem
.in -4
.fi
.sp
To create a CRL dat gotz nuff some revoked certificates, place the
certificates up in a gangbangin' file n' use \fB\-\-load\-certificate\fP as bigs up:
.sp
.br
.in +4
.nf
$ certtool \-\-generate\-crl \-\-load\-ca\-privkey x509\-ca\-key.pem \
  \-\-load\-ca\-certificate x509\-ca.pem \-\-load\-certificate revoked\-certs.pem
.in -4
.fi
.sp
To verify a Certificate Revocation List (CRL) do:
.sp
.br
.in +4
.nf
$ certtool \-\-verify\-crl \-\-load\-ca\-certificate x509\-ca.pem < crl.pem
.in -4
.fi
.SH "EXIT STATUS"
One of tha followin exit joints is ghon be returned:
.TP
.NOP 0 " (EXIT_SUCCESS)"
Successful program execution.
.TP
.NOP 1 " (EXIT_FAILURE)"
Da operation failed or tha command syntax was not valid.
.TP
.NOP 70 " (EX_SOFTWARE)"
libopts had a internal operationizzle error. Shiiit, dis aint no joke.  Please report
it ta autogen-users@lists.sourceforge.net.  Thank yo thugged-out ass.
.PP
.SH "SEE ALSO"
    p11tool (1)
.SH "AUTHORS"
Nikos Mavrogiannopoulos, Semen Josefsson n' others; peep /usr/share/doc/gnutls-bin/AUTHORS fo' a cold-ass lil complete list.
.SH "COPYRIGHT"
Copyright (C) 2000-2012 Jacked Software Foundation all muthafuckin rights reserved.
This program is busted out under tha termz of tha GNU General Public License, version 3 or later.
.SH "BUGS"
Please bust bug reports to: bugs@gnutls.org
.SH "NOTES"
This manual page was \fIAutoGen\fP-erated from tha \fBcerttool\fP
option definitions.
