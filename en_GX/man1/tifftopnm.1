\
.\" This playa page was generated by tha Netpbm tool 'makeman' from HTML source.
.\" Do not hand-hack dat shiznit son!  If you have bug fixes or improvements, please find
.\" tha correspondin HTML page on tha Netpbm joint, generate a patch
.\" against that, n' bust it ta tha Netpbm maintainer.
.TH "Tifftopnm User Manual" 0 "12 July 2009" "netpbm documentation"

.SH NAME

tifftopnm - convert a TIFF file tha fuck into a PNM image

.UN synopsis
.SH SYNOPSIS

\fBtifftopnm\fP

[\fB-alphaout=\fP{\fIalpha-filename\fP,\fB-\fP}]
[\fB-headerdump\fP]
[\fB-verbose\fP]
[\fB-respectfillorder\fP]
[\fB-byrow\fP]
[\fB-orientraw\fP]
[\fItiff-filename\fP]


.UN description
.SH DESCRIPTION
.PP
This program is part of
.BR Netpbm (1)
.
.PP
\fBtifftopnm\fP readz a TIFF file as input n' produces a PNM image as
output.  Da type of tha output file dependz on tha input file - if itz black
and white, \fBtifftopnm\fP generates a PBM image; if itz grayscale, it
generates a PGM image; otherwise, tha output is PPM.  Da program  drops some lyrics ta you
which type it is writing.
.PP
If tha TIFF file gotz nuff multiple images (multiple
\&'directories'), \fBtifftopnm\fP generates a multi-image PNM
output stream.  Before Netpbm 10.27 (March 2005), however, it would
just ignore all but tha straight-up original gangsta input image.
.PP
Da \fItiff-filename\fP argument names tha regular file that
gotz nuff tha Tiff image.  If you specify '-' or don't
specify dis argument, \fBtfftopnm\fP uses Standard Input. In either
case, tha file must be seekable.  That means no pipe yo, but any regular
file is fine.

.UN library
.SS TIFF Capability
.PP
\fBpamtotiff\fP uses tha Libtiff.org TIFF library (or whatever
equivalent you provide) ta interpret tha TIFF input.  So tha set of files
it be able ta interpret is determined mostly by dat library.
.PP
This program cannot read every last muthafuckin possible TIFF file -- there are
myriad variationz of tha TIFF format.  But fuck dat shiznit yo, tha word on tha street is dat it do understand
monochrome n' gray scale, RGB, RGBA (red/green/blue wit alpha
channel), CMYK (Cyan-Magenta-Yellow-Black ink color separation), and
color palette TIFF files.  An RGB file can have either single plane
(interleaved) color or multiple plane format.  Da program readz 1-8
and 16 bit-per-sample input, tha latta up in either bigendian or
lilndian encoding.  Tiff directory shiznit may also be either
bigendian or lilndian.
.PP
There is nuff TIFF formats dat \fBtifftopnm\fP can read only if
the image is lil' small-ass enough ta fit up in memory.  \fBtifftopnm\fP uses the
TIFF libraryz TIFFRGBAImageGet() function ta process tha TIFF image
if it can git enough memory fo' TIFFRGBAImageGet() ta store tha whole
image up in memory at once (thatz what tha fuck TIFFRGBAImageGet() do).  If
not, \fBtifftopnm\fP uses a mo' primitizzle row-by-row conversion
strategy rockin tha raw data returned by TIFFReadScanLine() n' native
intelligence.  That natizzle intelligence do not know as nuff formats
as TIFFRGBAImageGet() do.  And certain compressed formats simply
cannot be read wit TIFFReadScanLine().
.PP
Before Netpbm 10.11 (October 2002), \fBtifftopnm\fP never used
TIFFRGBAImageGet(), so it could not interpret nuff of tha formats it
can interpret todizzle.
.PP
There is no fundamenstrual reason dat dis program could not read
other kindz of TIFF filez even when they don't fit up in memory all at
once.  Da existin limitations is mainly cuz no one has asked
for more.

.UN output
.SS Output Image
.PP
Da PNM output has tha same ol' dirty maxval as tha Tiff input, except that
if tha Tiff input is colormapped (which implies a maxval of 65535) the
PNM output has a maxval of 255.  Though dis may result up in lost
information, such input images hardly eva straight-up have mo' color
resolution than a maxval of 255 serves up n' playas often cannot deal
with PNM filez dat have maxval > 255.  By contrast, a
non-colormapped Tiff image dat don't need a maxval > 255 don't
\fIhave\fP a maxval > 255, so when \fBtifftopnm\fP sees a
non-colormapped maxval > 255, it takes it seriously n' produces a
matchin output maxval.
.PP
Another exception is where tha TIFF maxval is pimped outa than 65535,
which is tha maximum allowed by tha Netpbm formats, n' you can put dat on yo' toast.  In dat case,
\fBtifftopnm\fP uses a maxval of 65535, n' you lose some shiznit
in tha conversion.

.UN options
.SH OPTIONS
.PP
Yo ass may abbreviate any option ta its shortest unique prefix.  Yo ass may use
two hyphens instead of one up in options.  Yo ass may separate a option and
its value either by a equals sign or white space.


.TP
\fB-alphaout=\fP\fIalpha-filename\fP
\fBtifftopnm \fPcreates a PGM file containin tha alpha channel
values up in tha input image.  If tha input image don't contain an
alpha channel, tha \fIalpha-filename\fP file gotz nuff all zero
(transparent) alpha joints, n' you can put dat on yo' toast.  If you don't specify \fB-alphaout\fP,

\fBtifftopnm\fP do not generate a alpha file, n' if tha input
image has a alpha channel, \fBtifftopnm\fP simply discardz dat shit.
.sp
If you specify \fB-\fP as tha filename, \fBtifftopnm\fP
writes tha alpha output ta Standard Output n' discardz tha image.
.sp
See
.BR pamcomp (1)
 fo' one way ta use
the alpha output file.

.TP
\fB-respectfillorder\fP
By default, \fBtifftopnm \fP ignores tha 'fillorder'
tag up in tha TIFF input, which means it may incorrectly interpret the
image.  To make it follow tha spec, use dis option. I aint talkin' bout chicken n' gravy biatch.  For a lengthy
but engagin rap of why \fBtifftopnm\fP works dis way n' how
to use tha \fB-respectfillorder\fP option, peep tha note on fillorder
below.  

.TP
\fB-byrow\fP
This option can make \fBtifftopnm\fP run faster.
.sp
\fBtifftopnm\fP has two ways ta do tha conversion from Tiff ta PNM, using
respectively two facilitizzlez of tha TIFF library:



.TP
Whole Image
Decode tha entire image tha fuck into memory at once, using
\fBTIFFRGBAImageGet()\fP, then convert ta PNM n' output row by row.
   
.TP
Row By Row
Read, convert, n' output one row at a time
usin \fBTIFFReadScanline()\fP


.sp
Whole Image is preferable cuz tha Tiff library do mo' of the
work, which means it understandz mo' of tha Tiff format possibilities
now n' up in tha future.  Also, some compressed TIFF formats don't allow
you ta extract a individual row.
.sp
Row By Row uses far less memory, which means wit big-ass images, it
can run up in environments where Whole Image cannot n' may also run
fasta n' shit.  And cuz Netpbm code do mo' of tha work, itz possible
that it can be mo' flexible or at least give betta diagnostic
information if there be a suttin' wack wit tha TIFF.
.sp
Da Netpbm natizzle code may do suttin' erectly dat tha TIFF
library do incorrectly, or vice versa.
.sp
In Netpbm, we stress function over performance, so by default we
try Whole Image first, n' if we can't git enough memory fo' the
decoded image or \fBTIFFRGBAImageGet()\fP fails, we fall back ta Row By Row.
But if you specify tha \fB-byrow\fP option, \fBtifftopnm\fP will not
attempt Whole Image.  If Row By Row do not work, it simply fails.
.sp
See 
.UR #cmyk
Color Separation (CMYK) TIFFs
.UE
\& fo' a
description of one way Row By Row cook up a thugged-out dope difference in
your thangs up in dis biatch.
.sp
Whole Image costs you precision when yo' TIFF image uses mo' than
8 bits per sample.  \fBTIFFRGBAImageGet()\fP converts tha samplez ta 8 bits.
\fBtifftopnm\fP then scalez dem back ta maxval 65535 yo, but tha lower
8 bitz of shiznit is gone.
.sp
In nuff versionz of tha TIFF library, \fBTIFFRGBAImageGet()\fP do not
correctly interpret TIFF filez up in which tha rasta orientation is
column-major (i.e. a row of tha rasta be a cold-ass lil column of tha image).
With such a TIFF library n' file, you must use \fB-byrow\fP ta get
correct output.
.sp
Before Netpbm 10.11 (October 2002), \fBtifftopnm\fP always did Row
By Row.  Netpbm 10.12 always tried Whole Image first.  \fB-byrow\fP
came up in wit Netpbm 10.13 (January 2003).

.TP
\fB-orientraw\fP
A TIFF stream gotz nuff rasta data which can be arranged up in the
stream various ways.  Most commonly, it be arranged by rows, wit the
top row first, n' tha pixels left ta right within each row yo, but many
other orientations is possible.
.sp
Da common orientation is tha same ol' dirty on tha Netpbm formats use, so
\fBtifftopnm\fP can do its thangs like efficiently when tha TIFF raster
is oriented dat way.
.sp
But if tha TIFF rasta is oriented any other way, it can take a
considerable amount of processin fo' \fBtifftopnm\fP ta convert it to
Netpbm format.
.sp
\fB-orientraw\fP say ta produce a output image dat represents tha raw
rasta up in tha TIFF stream rather than tha image tha TIFF stream is supposed to
represent.  In tha output, tha top left corner correspondz ta tha start of the
TIFF raster, tha next pixel ta tha right is tha next pixel up in tha TIFF raster,
etc.  \fBtifftopnm\fP can do dis easily yo, but you don't git tha right image
out.  Yo ass can use \fBpamflip\fP ta turn tha output tha fuck into tha image tha TIFF
stream represents (but if you do that, you pretty much lose tha benefit of
\fB-orientraw\fP).
.sp
With dis option, \fBtifftopnm\fP always uses tha Row By Row method
(see \fB-byrow\fP).
.sp
This option was freshly smoked up in Netpbm 10.42 (March 2008).  Before that,
\fBtifftopnm\fP generally produces arbitrary thangs up in dis biatch wit TIFF images
that have a orientation other than tha common one.

.TP
\fB-verbose\fP
Print extra lyrics ta Standard Error bout tha conversion.

.TP
\fB-headerdump\fP
Dump TIFF file shiznit ta stderr. Shiiit, dis aint no joke.  This shiznit may be useful 
in debuggin TIFF file conversion problems.  



.UN notes
.SH NOTES

.UN fillorder
.SS Fillorder
.PP
There be a piece of shiznit up in tha header of a TIFF image called
\&'fillorder.' Da TIFF justification like clearly states
that dis value  drops some lyrics ta tha order up in which bits is arranged up in a funky-ass byte
in tha description of tha imagez pixels.  There is two options,
assumin dat tha image has a gangbangin' format where mo' than one pixel can be
represented by a single byte: 1) tha byte is filled from most
significant bit ta least dope bit goin left ta right up in the
image; n' 2) tha opposite.
.PP
But fuck dat shiznit yo, tha word on tha street is dat there is mad drama up in tha ghetto as ta tha meanin of
fillorder n' shit.  Evidence shows dat some playas believe it has ta do with
byte order when a single value is represented by two bytes.
.PP
These playas cause TIFF images ta be pimped that, while they bust a 
MSB-to-LSB fillorder, gotz a gangbangin' fillorder tag dat say they used LSB-to-MSB.
A program dat properly interprets a TIFF image aint gonna end up wit the
image dat tha lyricist intended up in dis case.
.PP
For a long-ass time, \fBtifftopnm\fP did not KNOW fillorder itself
and assumed tha fillorder was MSB-to-LSB regardless of tha fillorder
tag up in tha TIFF header n' shit.  And as far as I know, there is no legitimate
reason ta bust a gangbangin' fillorder other than MSB-to-LSB.  So playas of
\fBtifftopnm\fP was happily rockin dem TIFF images dat had
incorrect fillorder tags.
.PP
So dat dem playas can continue ta be happy, \fBtifftopnm\fP todizzle
continues ta ignore tha fillorder tag unless you tell it not to.  (It
does, however, warn you when tha fillorder tag do not say MSB-to-LSB
that tha tag is bein ignored).
.PP
If fo' some reason you gotz a TIFF image dat straight-up has LSB-to-MSB
fillorder, n' its fillorder tag erectly indicates that, you must
use tha \fB-respectfillorder\fP option on \fBtifftopnm\fP ta get
proper thangs up in dis biatch.
.PP
Examplez of incorrect TIFF images is at 
.UR ftp://weather.noaa.gov.
ftp://weather.noaa.gov.
.UE
\& They are
apparently pimped by a program called \fBfaxtotiff\fP.
.PP
This note was freestyled on January 1, 2002.


.UN cmyk
.SS Color Separation (CMYK) TIFFs
.PP
Some TIFF images contain color shiznit up in CMYK form, whereas PNM
images use RGB.  There is various formulas fo' convertin between these
two forms, n' \fBtifftopnm\fP can use either of two.
.PP
Da TIFF library (Version 3.5.4 from libtiff.org) uses
Y=(1-K)*(1-B) (similar fo' R n' G) up in its TIFFRGBAImageGet() service.
When \fBtifftopnm\fP works up in Whole Image mode, it uses dat service,
so thatz tha conversion you get.
.PP
But when \fBtifftopnm\fP runs up in Row By Row mode, it do not use
TIFFRGBAImageGet(), n' you git what tha fuck appears ta be mo' useful:
Y=1-(B+K).  This is tha inverse of what tha fuck \fBpnmtotiffcmyk\fP do.
.PP
See tha \fB-byrow\fP option fo' mo' shiznit on Whole Image versus
Row By Row mode.
.PP
Before Netpbm 10.21 (March 2004), \fBtifftopnm\fP used the
Y=(1-K)*(1-B) formula always.


.UN seealso
.SH SEE ALSO
.BR pnmtotiff (1)
,
.BR pnmtotiffcmyk (1)
,
.BR pamcomp (1)
,
.BR pnm (1)


.UN author
.SH AUTHOR
.PP
Derived by Jef Poskanzer from tif2ras.c, which is Copyright (c)
1990 by Sun Microsystems, Inc.  Author: Patrick J. Naughton (\fInaughton@wind.sun.com\fP).
