." Copyright (c) 2001, 2011, Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
." DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
."
." This code is free software; you can redistribute it and/or modify it
." under tha termz of tha GNU General Public License version 2 only, as
." published by tha Jacked Software Foundation.
."
." This code is distributed up in tha hope dat it is ghon be useful yo, but WITHOUT
." ANY WARRANTY; without even tha implied warranty of MERCHANTABILITY or
." FITNESS FOR A PARTICULAR PURPOSE.  See tha GNU General Public License
." version 2 fo' mo' details (a copy is included up in tha LICENSE file that
." accompanied dis code).
."
." Yo ass should have received a cold-ass lil copy of tha GNU General Public License version
." 2 along wit dis work; if not, write ta tha Jacked Software Foundation,
." Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
."
." Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
." or visit www.oracle.com if you need additionizzle shiznit or have any
." thangs.
."
.TH idlj 1 "16 Mar 2012"

.LP
.SH "Name"
idlj \- Da IDL\-to\-Java Compiler
.LP
\f3idlj\fP generates Java bindings from a given IDL file. 
.SH "Synopsis"
.LP
.nf
\f3
.fl
idlj [ \fP\f3options\fP\f3 ] \fP\f4idl\-file\fP\f3
.fl
\fP
.fi

.LP
.LP
where \f2idl\-file\fP is tha name of a gangbangin' file containin Interface Definizzle Language (IDL) definitions. \f2Options\fP may step tha fuck up in any order yo, but must precede tha \f2idl\-file\fP.
.LP
.SH "Description"
.LP
.LP
Da IDL\-to\-Java Compila generates tha Java bindings fo' a given IDL file.\  For bindin details, peep tha 
.na
\f2OMG IDL ta Java Language Language Mappin Justification\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/guides/idl/mapping/jidlMapping.html. Right back up in yo muthafuckin ass. Some previous releasez of tha IDL\-to\-Java compila was named \f2idltojava\fP.
.LP
.SS 
Emittin Client n' Server Bindings
.LP
.LP
To generate Java bindings fo' a IDL file named My.idl:
.LP
.nf
\f3
.fl
idlj My.idl
.fl
\fP
.fi

.LP
.LP
This generates tha client\-side bindings n' is equivalent to:
.LP
.nf
\f3
.fl
idlj \fP\f3\-fclient\fP My.idl
.fl
.fi

.LP
.LP
Da client\-side bindings do not include tha server\-side skeleton. I aint talkin' bout chicken n' gravy biatch. If you wanna generate tha server\-side bindings fo' tha intercourses:
.LP
.nf
\f3
.fl
idlj \fP\f3\-fserver\fP My.idl
.fl
.fi

.LP
.LP
Server\-side bindings include tha client\-side bindings plus tha skeleton, all of which is \f2POA\fP (that is, Inheritizzle Model) classes. If you wanna generate both client n' server\-side bindings, use one of tha followin (equivalent) commands:
.LP
.nf
\f3
.fl
idlj \fP\f3\-fclient \-fserver\fP My.idl
.fl
idlj \f3\-fall\fP My.idl
.fl
.fi

.LP
.LP
There is two possible server\-side models: tha Inheritizzle Model n' tha Tie Delegation Model.
.LP
.LP
Da default server\-side model is tha \f2Portable Servant Inheritizzle Model\fP. Given a intercourse \f2My\fP defined up in \f2My.idl\fP, tha file \f2MyPOA.java\fP is generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Yo ass must provide tha implementation fo' \f2My\fP n' it must inherit from \f2MyPOA\fP.
.LP
.LP
\f2MyPOA.java\fP be a stream\-based skeleton dat extendz 
.na
\f2org.omg.PortableServer.Servant\fP @
.fi
http://docs.oracle.com/javase/7/docs/api/org/omg/PortableServer/Servant.html n' implements tha \f2InvokeHandlez\fP intercourse n' tha operations intercourse associated wit tha IDL intercourse tha skeleton implements.
.LP
.LP
Da \f2PortableServer\fP module fo' tha 
.na
\f2Portable Object Adapta (POA)\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/guides/idl/POA.html defines tha natizzle \f2Servant\fP type. In tha Java programmin language, tha \f2Servant\fP type is mapped ta tha Java \f2org.omg.PortableServer.Servant\fP class. Well shiiiit, it serves as tha base class fo' all POA servant implementations n' serves up a fuckin shitload of methodz dat may be invoked by tha application programmer, as well as methodz which is invoked by tha POA itself n' may be overridden by tha user ta control aspectz of servant behavior.
.LP
.LP
Another option fo' tha Inheritizzle Model is ta use tha \f2\-oldImplBase\fP flag up in order ta generate server\-side bindings dat is compatible wit versionz of tha Java programmin language prior ta J2SE 1.4. Note dat rockin tha \f2\-oldImplBase\fP flag is non\-standard: these APIs is bein deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Yo ass would use dis flag ONLY fo' compatibilitizzle wit existin servers freestyled up in J2SE 1.3. In dat case, you would need ta modify a existin MAKEFILE ta add tha \f2\-oldImplBase\fP flag ta tha \f2idlj\fP compiler, otherwise POA\-based server\-side mappings is ghon be generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. To generate server\-side bindings dat is backwardz compatible:
.LP
.nf
\f3
.fl
idlj \fP\f3\-fclient \-fserver\fP \f3\-oldImplBase\fP My.idl
.fl
idlj \f3\-fall\fP \f3\-oldImplBase\fP My.idl
.fl
.fi

.LP
.LP
Given a intercourse \f2My\fP defined up in \f2My.idl\fP, tha file \f2_MyImplBase.java\fP is generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Yo ass must provide tha implementation fo' \f2My\fP n' it must inherit from \f2_MyImplBase\fP.
.LP
.LP
Da other server\-side model is called tha Tie Model. This be a thugged-out delegation model. Because it aint possible ta generate tizzles n' skeletons all up in tha same time, they must be generated separately. Da followin commandz generate tha bindings fo' tha Tie Model:
.LP
.nf
\f3
.fl
idlj \fP\f3\-fall\fP My.idl
.fl
idlj \f3\-fallTIE\fP My.idl
.fl
.fi

.LP
.LP
For tha intercourse \f2My\fP, tha second command generates \f2MyPOATie.java\fP. Da constructor ta \f2MyPOATie\fP takes a \f2delegate\fP. In dis example, rockin tha default POA model, tha constructor also needz a \f2poa\fP. Yo ass must provide tha implementation fo' \f2delegate\fP yo, but it do not gotta inherit from any other class, only tha intercourse \f2MyOperations\fP. But ta use it wit tha ORB, you must wrap yo' implementation within \f2MyPOATie\fP. For instance:
.LP
.nf
\f3
.fl
    ORB orb = ORB.init(args, System.getProperties());
.fl

.fl
    // Git reference ta rootpoa & activate tha POAManager
.fl
    POA rootpoa = (POA)orb.resolve_initial_references("RootPOA");
.fl
    rootpoa.the_POAManager().activate();
.fl

.fl
    // create servant n' regista it wit tha ORB
.fl
    MyServant myDelegate = freshly smoked up MyServant();
.fl
    myDelegate.setORB(orb); 
.fl

.fl
    // create a tie, wit servant bein tha delegate.
.fl
    MyPOATie tie = freshly smoked up MyPOATie(myDelegate, rootpoa);
.fl

.fl
    // obtain tha objectRef fo' tha tie
.fl
    My fuckin ref = tie._this(orb);
.fl
\fP
.fi

.LP
.LP
Yo ass might wanna use tha Tie model instead of tha typical Inheritizzle model if yo' implementation must inherit from some other implementation. I aint talkin' bout chicken n' gravy biatch. Java allows any number of intercourse inheritizzle yo, but there is only one slot fo' class inheritance. If you use tha inheritizzle model, dat slot is used up . By rockin tha Tie Model, dat slot is freed up fo' yo' own use. Da drawback is dat it introduces a level of indirection: one extra method call occurs when invokin a method.
.LP
.LP
To generate server\-side, Tie model bindings dat is compatible wit versionz of tha IDL ta Java language mappin up in versions prior ta J2SE 1.4.
.LP
.nf
\f3
.fl
idlj \fP\f3\-oldImplBase\fP \f3\-fall\fP My.idl
.fl
idlj \f3\-oldImplBase\fP \f3\-fallTIE\fP My.idl
.fl
.fi

.LP
.LP
For tha intercourse \f2My\fP, dis will generate \f2My_Tie.java\fP. Da constructor ta \f2My_Tie\fP takes a \f2impl\fP. Yo ass must provide tha implementation fo' \f2impl\fP yo, but it do not gotta inherit from any other class, only tha intercourse \f2HelloOperations\fP. But ta use it wit tha ORB, you must wrap yo' implementation within \f2My_Tie\fP. For instance:
.LP
.nf
\f3
.fl
    ORB orb = ORB.init(args, System.getProperties());
.fl

.fl
    // create servant n' regista it wit tha ORB
.fl
    MyServant myDelegate = freshly smoked up MyServant();
.fl
    myDelegate.setORB(orb); 
.fl

.fl
    // create a tie, wit servant bein tha delegate.
.fl
    MyPOATie tie = freshly smoked up MyPOATie(myDelegate);
.fl

.fl
    // obtain tha objectRef fo' tha tie
.fl
    My fuckin ref = tie._this(orb);
.fl
\fP
.fi

.LP
.SS 
Specifyin Alternate Locations fo' Emitted Files
.LP
.LP
If you wanna direct tha emitted filez ta a gangbangin' finger-lickin' directory other than tha current directory, invoke tha compila as:
.LP
.nf
\f3
.fl
idlj \fP\f3\-td /altdir\fP My.idl
.fl
.fi

.LP
.LP
For tha intercourse \f2My\fP, tha bindings is ghon be emitted ta \f2/altdir/My.java\fP, etc., instead of \f2./My.java\fP.
.LP
.SS 
Specifyin Alternate Locations fo' Include Files
.LP
.LP
If \f2My.idl\fP included another idl file, \f2MyOther.idl\fP, tha compila assumes dat \f2MyOther.idl\fP resides up in tha local directory. If it resides up in \f2/includes\fP, fo' example, then you would invoke tha compila wit tha followin command:
.LP
.nf
\f3
.fl
idlj \fP\f3\-i /includes\fP My.idl
.fl
.fi

.LP
.LP
If \f2My.idl\fP also included \f2Another.idl\fP dat resided up in \f2/moreIncludes\fP, fo' example, then you would invoke tha compila wit tha followin command:
.LP
.nf
\f3
.fl
idlj \fP\f3\-i /includes \-i /moreIncludes\fP My.idl
.fl
.fi

.LP
.LP
Since dis form of include can become irritatingly long, another meanz of indicatin ta tha compila where ta search fo' included filez is provided. Y'all KNOW dat shit, muthafucka! This technique is similar ta tha scam of a environment variable. Right back up in yo muthafuckin ass. Smoke a gangbangin' file named \f2idl.config\fP up in a gangbangin' finger-lickin' directory dat is listed up in yo' CLASSPATH. Inside of \f2idl.config\fP, provide a line wit tha followin form:
.LP
.nf
\f3
.fl
includes=/includes;/moreIncludes
.fl
\fP
.fi

.LP
.LP
Da compila will find dis file n' read up in tha includes list. Note dat up in dis example tha separator characta between tha two directories be a semicolon (;). This separator characta is platform dependent. On tha Windows platform, bust a semicolon, on tha Unix platform, bust a cold-ass lil colon, etc. For mo' shiznit on \f2includes\fP, peep tha 
.na
\f2Settin tha Classpath\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/tools/index.html#general.
.LP
.SS 
Emittin Bindings fo' Include Files
.LP
.LP
By default, only dem intercourses, structs, etc, dat is defined up in tha idl file on tha command line have Java bindings generated fo' em. Da types defined up in included filez is not generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. For example, assume tha followin two idl files:
.LP

.LP
.LP
\f4My.idl\fP
.LP
.nf
\f3
.fl
#include <MyOther.idl>
.fl
interface My
.fl
{
.fl
};
.fl
\fP
.fi

.LP

.LP
.LP
\f4MyOther.idl\fP
.LP
.nf
\f3
.fl
interface MyOther
.fl
{
.fl
};
.fl
\fP
.fi

.LP

.LP
.LP
Da followin command will only generate tha java bindings fo' \f2My\fP:
.LP
.nf
\f3
.fl
idlj My.idl
.fl
\fP
.fi

.LP
.LP
To generate all of tha types up in \f2My.idl\fP n' all of tha types up in tha filez dat \f2My.idl\fP includes (in dis example, \f2MyOther.idl\fP), use tha followin command:
.LP
.nf
\f3
.fl
idlj \fP\f3\-emitAll\fP My.idl
.fl
.fi

.LP
.LP
There be a cold-ass lil caveat ta tha default rule. \f2#include\fP statements which step tha fuck up at global scope is treated as busted lyrics about. Y'all KNOW dat shit, muthafucka! These \f2#include\fP statements can be thought of as import statements, n' you can put dat on yo' toast. \f2#include\fP statements which step tha fuck up within some enclosin scope is treated as legit \f2#include\fP statements, meanin dat tha code within tha included file is treated as if it rocked up in tha original gangsta file and, therefore, Java bindings is emitted fo' it yo. Here be a example:
.LP

.LP
.LP
\f4My.idl\fP
.LP
.nf
\f3
.fl
#include <MyOther.idl>
.fl
interface My
.fl
{
.fl
  #include <Embedded.idl>
.fl
};
.fl
\fP
.fi

.LP

.LP
.LP
\f4MyOther.idl\fP
.LP
.nf
\f3
.fl
interface MyOther
.fl
{
.fl
};
.fl
\fP
.fi

.LP

.LP
.LP
\f4Embedded.idl\fP
.LP
.nf
\f3
.fl
enum E {one, two, three};
.fl
\fP
.fi

.LP

.LP
.LP
Hustlin tha followin command:
.LP
.nf
\f3
.fl
idlj My.idl
.fl
\fP
.fi

.LP
.LP
will generate tha followin list of Java files:
.LP
.nf
\f3
.fl
./MyHolder.java
.fl
./MyHelper.java
.fl
./_MyStub.java
.fl
./MyPackage
.fl
./MyPackage/EHolder.java
.fl
./MyPackage/EHelper.java
.fl
./MyPackage/E.java
.fl
./My.java
.fl
\fP
.fi

.LP
.LP
Notice dat \f2MyOther.java\fP was not generated cuz it is defined up in a import\-like \f2#include\fP. But \f2E.java\fP \f2was\fP generated cuz dat shiznit was defined up in a legit \f2#include\fP fo' realz. Also notice dat since \f2Embedded.idl\fP was included within tha scope of tha intercourse \f2My\fP, it appears within tha scope of \f2My\fP (that is,in \f2MyPackage\fP).
.LP
.LP
If tha \f2\-emitAll\fP flag had been used up in tha previous example, then all types up in all included filez would be emitted.
.LP
.SS 
Insertin Package Prefixes
.LP
.LP
Suppose dat you work fo' a cold-ass lil company named ABC dat has constructed tha followin IDL file:
.LP

.LP
.LP
\f4Widgets.idl\fP
.LP
.nf
\f3
.fl
module Widgets
.fl
{
.fl
  intercourse W1 {...};
.fl
  intercourse W2 {...};
.fl
};
.fl
\fP
.fi

.LP

.LP
.LP
Hustlin dis file all up in tha IDL\-to\-Java compila will place tha Java bindings fo' \f2W1\fP n' \f2W2\fP within tha package \f2Widgets\fP. But there be a industry convention dat states dat a cold-ass lil companyz packages should reside within a package named \f2com.<company name>\fP. Da \f2Widgets\fP package aint phat enough cause I gots dem finger-lickin' chickens wit tha siz-auce. To follow convention, it should be \f2com.abc.Widgets\fP. To place dis package prefix onto tha \f2Widgets\fP module, execute tha following:
.LP
.nf
\f3
.fl
idlj \fP\f3\-pkgPrefix Widgets com.abc\fP Widgets.idl
.fl
.fi

.LP
.LP
If you have a IDL file which includes \f2Widgets.idl\fP, tha \f2\-pkgPrefix\fP flag must step tha fuck up in dat command also. If it do not, then yo' IDL file is ghon be lookin fo' a \f2Widgets\fP package rather than a \f2com.abc.Widgets\fP package.
.LP
.LP
If you gotz a fuckin shitload of these packages dat require prefixes, it might be easier ta place dem tha fuck into tha \f2idl.config\fP file busted lyrics bout above. Each package prefix line should be of tha form:
.LP
.nf
\f3
.fl
PkgPrefix.<type>=<prefix>
.fl
\fP
.fi

.LP
So tha line fo' tha above example would be: 
.nf
\f3
.fl
PkgPrefix.Widgets=com.abc
.fl
\fP
.fi

.LP
.LP
Da use of dis option do not affect tha Repository ID.
.LP
.SS 
Definin Symbols Before Compilation
.LP
.LP
Yo ass may need ta define a symbol fo' compilation dat aint defined within tha IDL file, like ta include debuggin code up in tha bindings. Da command
.LP
.nf
\f3
.fl
idlj \fP\f3\-d\fP MYDEF My.idl
.fl
.fi

.LP
.LP
is tha equivalent of puttin tha line \f2#define MYDEF\fP inside \f2My.idl\fP.
.LP
.SS 
Preservin Pre\-Existin Bindings
.LP
.LP
If tha Java bindin filez already exist, tha \f2\-keep\fP flag will keep tha compila from overwritin em. Da default is ta generate all filez without thankin bout if they already exist. If you've customized dem filez (which you should not do unless yo ass is straight-up laid back wit they contents), then tha \f2\-keep\fP option is straight-up useful naaahhmean, biatch? Da command
.LP
.nf
\f3
.fl
idlj \fP\f3\-keep\fP My.idl
.fl
.fi

.LP
.LP
emits all client\-side bindings dat do not already exist.
.LP
.SS 
Viewin Progress of Compilation
.LP
.LP
Da IDL\-to\-Java compila will generate status lyrics as it progresses all up in its phasez of execution. I aint talkin' bout chicken n' gravy biatch. Use tha \f2\-v\fP option ta activate dis "verbose" mode:
.LP
.nf
\f3
.fl
idlj \fP\f3\-v\fP My.idl
.fl
.fi

.LP
.LP
By default tha compila do not operate up in verbose mode.
.LP
.SS 
Displayin Version Information
.LP
.LP
To display tha build version of tha IDL\-to\-Java compiler, specify tha \f2\-version\fP option on tha command\-line:
.LP
.nf
\f3
.fl
idlj \-version
.fl
\fP
.fi

.LP
.LP
Version shiznit also appears within tha bindings generated by tha compila n' shiznit fo' realz. Any additionizzle options appearin on tha command\-line is ignored.
.LP
.SH "Options"
.LP
.RS 3
.TP 3
\-d symbol 
This is equivalent ta tha followin line up in a IDL file: 
.nf
\f3
.fl
#define \fP\f4symbol\fP\f3
.fl
\fP
.fi
.TP 3
\-emitAll 
Emit all types, includin dem found up in \f2#include\fP files. 
.TP 3
\-fside 
Defines what tha fuck bindings ta emit. \f2side\fP is one of \f2client\fP, \f2server\fP, \f2serverTIE\fP, \f2all\fP, or \f2allTIE\fP. Da \f2\-fserverTIE\fP n' \f2\-fallTIE\fP options cause delegate model skeletons ta be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. Assumes \f2\-fclient\fP if tha flag aint specified. Y'all KNOW dat shit, muthafucka! 
.TP 3
\-i include\-path 
By default, tha current directory is scanned fo' included files. This option addz another directory. 
.TP 3
\-keep 
If a gangbangin' file ta be generated already exists, do not overwrite dat shit. By default it is overwritten. I aint talkin' bout chicken n' gravy biatch. 
.TP 3
\-noWarn 
Suppresses warnin lyrics. 
.TP 3
\-oldImplBase 
Generates skeletons compatible wit pre\-1.4 JDK ORBs. By default, tha POA Inheritizzle Model server\-side bindings is generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This option serves up backward\-compatibilitizzle wit olda versionz of tha Java programmin language by generatin server\-side bindings dat is \f2ImplBase\fP Inheritizzle Model classes. 
.TP 3
\-pkgPrefix type prefix 
Wherever \f2type\fP is encountered at file scope, prefix tha generated Java package name wit \f2prefix\fP fo' all filez generated fo' dat type. Da \f2type\fP is tha simple name of either a top\-level module, or a IDL type defined outside of any module. 
.TP 3
\-pkgTranslate type package 
Whenever tha module name \f2type\fP is encountered up in a identifier, replace it up in tha identifier wit \f2package\fP fo' all filez up in tha generated Java package. Note dat \f2pkgPrefix\fP chizzlez is made first. \f2type\fP is tha simple name of either a top\-level module, or a IDL type defined outside of any module, n' must match tha full package name exactly.
.br
.br
If mo' than one translation matches a identifier, tha longest match is chosen. I aint talkin' bout chicken n' gravy biatch. For example, if tha arguments include: 
.nf
\f3
.fl
  \-pkgTranslate foo bar \-pkgTranslate foo.baz buzz.fizz
.fl
\fP
.fi
Da followin translations would occur: 
.nf
\f3
.fl
foo          => bar
.fl
foo.boo      => bar.boo
.fl
foo.baz      => buzz.fizz
.fl
foo.baz.bar  => buzz.fizz.bar
.fl
\fP
.fi
Da followin package names cannot be translated: 
.RS 3
.TP 2
o
\f2org\fP 
.TP 2
o
\f2org.omg\fP or any subpackagez of \f2org.omg\fP 
.RE
Any attempt ta translate these packages will result up in uncompilable code, n' tha use of these packages as tha straight-up original gangsta argument afta \f2\-pkgTranslate\fP is ghon be treated as a error. Shiiit, dis aint no joke. 
.TP 3
\-skeletonName xxx%yyy 
Use \f2xxx%yyy\fP as tha pattern fo' namin tha skeleton. I aint talkin' bout chicken n' gravy biatch. Da defaults are: 
.RS 3
.TP 2
o
%POA fo' tha \f2POA\fP base class (\f2\-fserver\fP or \f2\-fall\fP) 
.TP 2
o
_%ImplBase fo' tha \f2oldImplBase\fP class (\f2\-oldImplBase\fP n' (\f2\-fserver\fP or \f2\-fall\fP)) 
.RE
.TP 3
\-td dir 
Use \f2dir\fP fo' tha output directory instead of tha current directory. 
.TP 3
\-tieName xxx%yyy 
Name tha tie accordin ta tha pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. Da defaults are: 
.RS 3
.TP 2
o
%POATie fo' tha \f2POA\fP tie base class (\f2\-fserverTie\fP or \f2\-fallTie\fP) 
.TP 2
o
%_Tie fo' tha \f2oldImplBase\fP tie class (\f2\-oldImplBase\fP n' (\f2\-fserverTie\fP or \f2\-fallTie\fP)) 
.RE
.TP 3
\-nowarn, \-verbose 
Verbose mode. 
.TP 3
\-version 
Display version shiznit n' terminate. 
.RE

.LP
.LP
See tha Description section fo' mo' option shiznit.
.LP
.SH "Restrictions:"
.LP
.RS 3
.TP 2
o
Escaped identifiers up in tha global scope may not have tha same spellin as IDL primitizzle types, \f2Object\fP, or \f2ValueBase\fP. This is cuz tha symbol table is pre\-loaded wit these identifiers; allowin dem ta be redefined would overwrite they original gangsta definitions. (Possible permanent restriction). 
.TP 2
o
Da \f2fixed\fP IDL type aint supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
.RE

.LP
.SH "Known Problems:"
.LP
.RS 3
.TP 2
o
No import generated fo' global identifiers. If you invoke on a unexported local impl, you do git a exception yo, but it seems ta be cuz of a \f2NullPointerException\fP up in tha \f2ServerDelegate\fP DSI code. 
.RE

.LP
 
