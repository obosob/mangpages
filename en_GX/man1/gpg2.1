.\" Created from Texinfo source by yat2m 1.0
.TH GPG2 1 2014-08-05 "GnuPG 2.0.25" "GNU Privacy Guard"
.SH NAME
.B gpg2
\- OpenPGP encryption n' signin tool
.SH SYNOPSIS
.B  gpg2
.RB [ \-\-homedir
.IR dir ]
.RB [ \-\-options
.IR file ]
.RI [ options ]
.I command
.RI [ args ]

.SH DESCRIPTION
\fBgpg2\fR is tha OpenPGP part of tha GNU Privacy Guard (GnuPG). It
is a tool ta provide digital encryption n' signin skillz rockin the
OpenPGP standard. Y'all KNOW dat shit, muthafucka! \fBgpg2\fR features complete key pimpment and
all bells n' whistlez you can expect from a thugged-out decent OpenPGP
implementation.


In contrast ta tha standalone version \fBgpg\fR, which is more
suited fo' server n' embedded platforms, dis version is commonly
installed under tha name \fBgpg2\fR n' mo' targeted ta tha desktop
as it requires nuff muthafuckin other modulez ta be installed. Y'all KNOW dat shit, muthafucka!  Da standalone
version is ghon be kept maintained n' it is possible ta install both
versions on tha same system.  If you need ta use different configuration
files, you should make use of suttin' like \(oq\fIgpg.conf-2\fR\(cq instead
of just \(oq\fIgpg.conf\fR\(cq.






.SH RETURN VALUE

Da program returns 0 if every last muthafuckin thang was fine, 1 if at least
a signature was bad, n' other error codes fo' fatal errors.

.SH WARNINGS

Use a *good* password fo' yo' user account n' a *good* passphrase
to protect yo' secret key. This passphrase is tha weakest part of the
whole system. Programs ta do doggtionary attacks on yo' secret keyring
are straight-up easy as fuck  ta write n' so you should protect yo' "~/.gnupg/"
directory straight-up well.

Keep it realz in mind that, if dis program is used over a network (telnet), it
is *very* easy as fuck  ta spy up yo' passphrase!

If yo ass is goin ta verify detached signatures, make shizzle dat the
program knows bout it; either give both filenames on tha command line
or use \(aq-\(aq ta specify STDIN.

.SH INTEROPERABILITY

GnuPG tries ta be a straight-up flexible implementation of tha OpenPGP
standard. Y'all KNOW dat shit, muthafucka! In particular, GnuPG implements nuff of tha optionizzle parts
of tha standard, like fuckin tha SHA-512 hash, n' tha ZLIB n' BZIP2
compression algorithms. Well shiiiit, it is blingin ta be aware dat not all
OpenPGP programs implement these optionizzle algorithms n' dat by
forcin they use via tha \fB--cipher-algo\fR,
\fB--digest-algo\fR, \fB--cert-digest-algo\fR, or
\fB--compress-algo\fR options up in GnuPG, it is possible ta create a
perfectly valid OpenPGP message yo, but one dat cannot be read by the
intended recipient.

There is dozenz of variationz of OpenPGP programs available, n' each
supports a slightly different subset of these optionizzle algorithms.
For example, until recently, no (unhacked) version of PGP supported
the BLOWFISH cipher algorithm fo' realz. A message rockin BLOWFISH simply could
not be read by a PGP user n' shit. By default, GnuPG uses tha standard
OpenPGP preferences system dat will always do tha right thang and
create lyrics dat is usable by all recipients, regardless of which
OpenPGP program they use. Only override dis safe default if you
really know what tha fuck yo ass is bustin.

If you straight-up must override tha safe default, or if tha preferences
on a given key is invalid fo' some reason, yo ass is far betta off using
the \fB--pgp6\fR, \fB--pgp7\fR, or \fB--pgp8\fR options. These
options is safe as they do not force any particular algorithms in
violation of OpenPGP yo, but rather reduce tha available algorithms ta a
"PGP-safe" list.

.SH COMMANDS

Commandz is not distinguished from options except fo' tha fact that
only one command be allowed.

\fBgpg2\fR may be run wit no commands, up in which case it will
perform a reasonable action dependin on tha type of file it is given
as input (an encrypted message is decrypted, a signature is verified,
a file containin keys is listed).

Please remember dat option as well as command parsin stops as soon as
a non-option is encountered, you can explicitly stop parsin by
usin tha special option \fB--\fR.





.SS  Commandz not specific ta tha function
\ 

.TP
.B  --version
Print tha program version n' licensin shiznit. I aint talkin' bout chicken n' gravy biatch.  Note dat you
cannot abbreviate dis command.

.TP
.B  --help
.TP
.B  -h
Print a usage message summarizin da most thugged-out useful command line options.
Note dat you cannot abbreviate dis command.

.TP
.B  --warranty
Print warranty shiznit.

.TP
.B  --dump-options
Print a list of all available options n' commands.  Note dat you cannot
abbreviate dis command.



.SS  Commandz ta select tha type of operation
\ 



.TP
.B  --sign
.TP
.B  -s
Make a signature. This command may be combined wit \fB--encrypt\fR
(for a signed n' encrypted message), \fB--symmetric\fR (for a
signed n' symmetrically encrypted message), or \fB--encrypt\fR and
\fB--symmetric\fR together (for a signed message dat may be
decrypted via a secret key or a passphrase).  Da key ta be used for
signin is chosen by default or can be set wit the
\fB--local-user\fR n' \fB--default-key\fR options.

.TP
.B  --clearsign
Make a cold-ass lil clear text signature.  Da content up in a cold-ass lil clear text signature is
readable without any special software. OpenPGP software is only needed
to verify tha signature.  Clear text signatures may modify end-of-line
whitespace fo' platform independence n' is not intended ta be
reversible.  Da key ta be used fo' signin is chosen by default or
can be set wit tha \fB--local-user\fR n' \fB--default-key\fR
options.


.TP
.B  --detach-sign
.TP
.B  -b
Make a thugged-out detached signature.

.TP
.B  --encrypt
.TP
.B  -e
Encrypt data. This option may be combined wit \fB--sign\fR (for a
signed n' encrypted message), \fB--symmetric\fR (for a message that
may be decrypted via a secret key or a passphrase), or \fB--sign\fR
and \fB--symmetric\fR together (for a signed message dat may be
decrypted via a secret key or a passphrase).

.TP
.B  --symmetric
.TP
.B  -c
Encrypt wit a symmetric cipher rockin a passphrase. Da default
symmetric cipher used is CAST5 yo, but may be chosen wit the
\fB--cipher-algo\fR option. I aint talkin' bout chicken n' gravy biatch. This option may be combined with
\fB--sign\fR (for a signed n' symmetrically encrypted message),
\fB--encrypt\fR (for a message dat may be decrypted via a secret key
or a passphrase), or \fB--sign\fR n' \fB--encrypt\fR together
(for a signed message dat may be decrypted via a secret key or a
passphrase).

.TP
.B  --store
Store only (make a simple RFC1991 literal data packet).

.TP
.B  --decrypt
.TP
.B  -d
Decrypt tha file given on tha command line (or STDIN if no file
is specified) n' write it ta STDOUT (or tha file specified with
\fB--output\fR). If tha decrypted file is signed, tha signature be also
verified. Y'all KNOW dat shit, muthafucka! This command differs from tha default operation, as it never
writes ta tha filename which is included up in tha file n' it rejects
filez which don't begin wit a encrypted message.

.TP
.B  --verify
Assume dat tha straight-up original gangsta argument be a signed file or a thugged-out detached signature
and verify it without generatin any output. With no arguments, the
signature packet is read from STDIN. If only a sigfile is given, it may
be a cold-ass lil complete signature or a thugged-out detached signature, up in which case the
signed shiznit is expected up in a gangbangin' file without tha ".sig" or ".asc"
extension. I aint talkin' bout chicken n' gravy biatch.  With mo' than 1 argument, tha straight-up original gangsta should be a thugged-out detached
signature n' tha remainin filez is tha signed stuff. To read the
signed shiznit from STDIN, use \(aq-\(aq as tha second filename.  For
securitizzle reasons a thugged-out detached signature cannot read tha signed material
from STDIN without denotin it up in tha above way.

Note: When verifyin a cold-ass lil cleartext signature, \fBgpg\fR verifies
only what tha fuck make up tha cleartext signed data n' not any extra data
outside of tha cleartext signature or header lines followin directly
the dash marker line.  Da option \fB--output\fR may be used ta write
out tha actual signed data; but there be other pitfalls wit this
format as well.  It be suggested ta avoid cleartext signatures in
favor of detached signatures.

.TP
.B  --multifile
This modifies certain other commandz ta accept multiple filez for
processin on tha command line or read from STDIN wit each filename on
a separate line. This allows fo' nuff filez ta be processed at
once. \fB--multifile\fR may currently be used along with
\fB--verify\fR, \fB--encrypt\fR, n' \fB--decrypt\fR. Note that
\fB--multifile --verify\fR may not be used wit detached signatures.

.TP
.B  --verify-files
Identical ta \fB--multifile --verify\fR.

.TP
.B  --encrypt-files
Identical ta \fB--multifile --encrypt\fR.

.TP
.B  --decrypt-files
Identical ta \fB--multifile --decrypt\fR.

.TP
.B  --list-keys
.TP
.B  -k
.TP
.B  --list-public-keys
List all keys from tha hood keyrings, or just tha keys given on the
command line.

Avoid rockin tha output of dis command up in scripts or other programs as
it is likely ta chizzle as GnuPG chizzles. Right back up in yo muthafuckin ass. See \fB--with-colons\fR fo' a
machine-parseable key listin command dat be appropriate fo' use in
scripts n' other programs.

.TP
.B  --list-secret-keys
.TP
.B  -K
List all keys from tha secret keyrings, or just tha ones given on the
command line fo' realz. A \fB#\fR afta tha lettas \fBsec\fR means dat the
secret key aint usable (for example, if dat shiznit was pimped via
\fB--export-secret-subkeys\fR).

.TP
.B  --list-sigs
Same as \fB--list-keys\fR yo, but tha signatures is listed like a muthafucka.
This command has tha same ol' dirty effect as
usin \fB--list-keys\fR wit \fB--with-sig-list\fR.

For each signature listed, there be nuff muthafuckin flags up in between tha "sig"
tag n' keyid. Y'all KNOW dat shit, muthafucka! These flags give additionizzle shiznit bout each
signature. From left ta right, they is tha numbers 1-3 fo' certificate
check level (see \fB--ask-cert-level\fR), "L" fo' a local or
non-exportable signature (see \fB--lsign-key\fR), "R" fo' a
nonRevocable signature (see tha \fB--edit-key\fR command "nrsign"),
"P" fo' a signature dat gotz nuff a policy URL (see
\fB--cert-policy-url\fR), "N" fo' a signature dat gotz nuff a
notation (see \fB--cert-notation\fR), "X" fo' a eXpired signature
(see \fB--ask-cert-expire\fR), n' tha numbers 1-9 or "T" fo' 10 and
above ta indicate trust signature levels (see tha \fB--edit-key\fR
command "tsign").

.TP
.B  --check-sigs
Same as \fB--list-sigs\fR yo, but tha signatures is verified. Y'all KNOW dat shit, muthafucka!  Note
that fo' performizzle reasons tha revocation statuz of a signin key is
not shown.
This command has tha same ol' dirty effect as
usin \fB--list-keys\fR wit \fB--with-sig-check\fR.

Da statuz of tha verification is indicated by a gangbangin' flag directly following
the "sig" tag (and thus before tha flags busted lyrics bout above for
\fB--list-sigs\fR).  A "!" indicates dat tha signature has been
successfully verified, a "-" denotes a wack signature n' a "%" is used
if a error occurred while checkin tha signature (e.g. a non supported
algorithm).

.TP
.B  --locate-keys
Locate tha keys given as arguments, n' you can put dat on yo' toast.  This command basically uses the
same algorithm as used when locatin keys fo' encryption or signin and
may thus be used ta peep what tha fuck keys \fBgpg2\fR might use.  In
particular external methodz as defined by \fB--auto-key-locate\fR may
be used ta locate a key.  Only hood keys is listed.


.TP
.B  --fingerprint
List all keys (or tha specified ones) along wit their
fingerprints, n' you can put dat on yo' toast. This is tha same ol' dirty output as \fB--list-keys\fR but with
the additionizzle output of a line wit tha fingerprint. May also be
combined wit \fB--list-sigs\fR or \fB--check-sigs\fR.  If this
command is given twice, tha fingerprintz of all secondary keys are
listed like a muthafucka.

.TP
.B  --list-packets
List only tha sequence of packets, n' you can put dat on yo' toast. This is mainly
useful fo' debugging.


.TP
.B  --card-edit
Present a menu ta work wit a smartcard. Y'all KNOW dat shit, muthafucka! Da subcommand "help" provides
an overview on available commands. For a thugged-out detailed description, please
see tha Card HOWTO at
http://www.gnupg.org/documentation/howtos.html#GnuPG-cardHOWTO .

.TP
.B  --card-status
Show tha content of tha smart-ass card.

.TP
.B  --change-pin
Present a menu ta allow changin tha PIN of a smartcard. Y'all KNOW dat shit, muthafucka! This
functionalitizzle be also available as tha subcommand "passwd" wit the
\fB--card-edit\fR command.

.TP
.B  --delete-key \fBname\fR
Remove key from tha hood keyring. In batch mode either \fB--yes\fR is
required or tha key must be specified by fingerprint. This be a
safeguard against accidental deletion of multiple keys.

.TP
.B  --delete-secret-key \fBname\fR
Remove key from tha secret keyring. In batch mode tha key
must be specified by fingerprint.

.TP
.B  --delete-secret-and-public-key \fBname\fR
Same as \fB--delete-key\fR yo, but if a secret key exists, it will be
removed first. In batch mode tha key must be specified by fingerprint.

.TP
.B  --export
Either export all keys from all keyrings (default keyrings n' them
registered via option \fB--keyring\fR), or if at least one name is given,
those of tha given name. Da exported keys is freestyled ta STDOUT or ta the
file given wit option \fB--output\fR.  Use together with
\fB--armor\fR ta mail dem keys.

.TP
.B  --send-keys \fBkey IDs\fR
Similar ta \fB--export\fR but sendz tha keys ta a keyserver.
Fingerprints may be used instead of key IDs. Option \fB--keyserver\fR
must be used ta give tha name of dis keyserver n' shit. Don't bust your
complete keyrin ta a keyserver --- select only dem keys which is new
or chizzled by yo thugged-out ass.  If no key IDs is given, \fBgpg\fR do nothing.

.TP
.B  --export-secret-keys
.TP
.B  --export-secret-subkeys
Same as \fB--export\fR yo, but exports tha secret keys instead. Y'all KNOW dat shit, muthafucka!  The
exported keys is freestyled ta STDOUT or ta tha file given wit option
\fB--output\fR.  This command is often used along wit tha option
\fB--armor\fR ta allow easy as fuck  printin of tha key fo' paper backup;
however tha external tool \fBpaperkey\fR do a funky-ass betta thang for
bustin backups on paper n' shit.  Note dat exportin a secret key can be a
securitizzle risk if tha exported keys is bust over a insecure channel.

Da second form of tha command has tha special property ta render the
secret part of tha primary key useless; dis be a GNU extension to
OpenPGP n' other implementations can not be sposed ta fuckin successfully
import such a key.  Its intended use is ta generated a gangbangin' full key with
an additionizzle signin subkey on a thugged-out dedicated machine n' then using
this command ta export tha key without tha primary key ta tha main
machine.

See tha option \fB--simple-sk-checksum\fR if you wanna import an
exported secret key tha fuck into ancient OpenPGP implementations.

.TP
.B  --import
.TP
.B  --fast-import
Import/merge keys. This addz tha given keys ta the
keyring. Da fast version is currently just a synonym.

There is all dem other options which control how tha fuck dis command works.
Most notable here is tha \fB--import-options merge-only\fR option
which do not bang freshly smoked up keys but do only tha mergin of new
signatures, user-IDs n' subkeys.

.TP
.B  --recv-keys \fBkey IDs\fR
Import tha keys wit tha given key IDs from a keyserver n' shit. Option
\fB--keyserver\fR must be used ta give tha name of dis keyserver.

.TP
.B  --refresh-keys
Request thugged-out shiznit from a keyserver fo' keys dat already exist on the
local keyring. This is useful fo' uppimpin a key wit tha sickest fuckin
signatures, user IDs, etc. Callin dis wit no arguments will refresh
the entire keyring. Option \fB--keyserver\fR must be used ta give the
name of tha keyserver fo' all keys dat aint gots preferred keyservers
set (see \fB--keyserver-options honor-keyserver-url\fR).

.TP
.B  --search-keys \fBnames\fR
Search tha keyserver fo' tha given names. Multiple names given here will
be joined together ta create tha search strang fo' tha keyserver.
Option \fB--keyserver\fR must be used ta give tha name of this
keyserver n' shit.  Keyservers dat support different search methodz allow using
the syntax specified up in "How tha fuck ta specify a user ID" below. Note that
different keyserver types support different search methods. Currently
only LDAP supports dem all.

.TP
.B  --fetch-keys \fBURIs\fR
Retrieve keys located all up in tha specified URIs. Note dat different
installationz of GnuPG may support different protocols (HTTP, FTP,
LDAP, etc.)

.TP
.B  --update-trustdb
Do trust database maintenance. This command iterates over all keys and
buildz tha Web of Trust. This be a interactizzle command cuz it may
have ta ask fo' tha "ballertrust" joints fo' keys. Da user has ta give
an estimation of how tha fuck far dat dunkadelic hoe trusts tha balla of tha displayed key to
correctly certify (sign) other keys. GnuPG only asks fo' tha ballertrust
value if it has not yet been assigned ta a key. Usin the
\fB--edit-key\fR menu, tha assigned value can be chizzled at any time.

.TP
.B  --check-trustdb
Do trust database maintenizzle without user interaction. I aint talkin' bout chicken n' gravy biatch. From time to
time tha trust database must be updated so dat expired keys or
signatures n' tha resultin chizzlez up in tha Web of Trust can be
tracked. Y'all KNOW dat shit, muthafucka! Normally, GnuPG will calculate when dis is required n' do it
automatically unless \fB--no-auto-check-trustdb\fR is set. This
command can be used ta force a trust database check at any time. The
processin is identical ta dat of \fB--update-trustdb\fR but it
skips keys wit a not yet defined "ballertrust".

For use wit cron thangs, dis command can be used together with
\fB--batch\fR up in which case tha trust database check is done only if
a check is needed. Y'all KNOW dat shit, muthafucka! To force a run even up in batch mode add tha option
\fB--yes\fR.


.TP
.B  --export-ballertrust
Send tha ballertrust joints ta STDOUT. This is useful fo' backup purposes
as these joints is tha only ones which can't be re-created from a
corrupted trustdb.  Example:
.RS
.RS 2
.nf
  gpg2 --export-ballertrust > otrust.txt
.fi
.RE
.RE


.TP
.B  --import-ballertrust
Update tha trustdb wit tha ballertrust joints stored up in \fBfiles\fR (or
STDIN if not given); existin joints is ghon be overwritten. I aint talkin' bout chicken n' gravy biatch.  In case of a
severely damaged trustdb n' if you gotz a recent backup of the
ballertrust joints (e.g. up in tha file \(oq\fIotrust.txt\fR\(cq, you may re-create
the trustdb rockin these commands:
.RS
.RS 2
.nf
  cd ~/.gnupg
  rm trustdb.gpg
  gpg2 --import-ballertrust < otrust.txt
.fi
.RE
.RE


.TP
.B  --rebuild-keydb-caches
When uppimpin from version 1.0.6 ta 1.0.7 dis command should be used
to create signature caches up in tha keyring. Well shiiiit, it might be handy up in other
situations like a muthafucka.

.TP
.B  --print-md \fBalgo\fR
.TP
.B  --print-mds
Print message digest of algorithm ALGO fo' all given filez or STDIN.
With tha second form (or a thugged-out deprecated "*" as algo) digests fo' all
available algorithms is printed.

.TP
.B  --gen-random \fB0|1|2\fR \fBcount\fR
Emit \fIcount\fR random bytez of tha given qualitizzle level 0, 1 or 2. If
\fIcount\fR aint given or zero, a endless sequence of random bytes
will be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If used wit \fB--armor\fR tha output will be
base64 encoded. Y'all KNOW dat shit, muthafucka!  PLEASE, don't use dis command unless you know what
yo ass is bustin; it may remove precious entropy from tha system!

.TP
.B  --gen-prime \fBmode\fR  \fBbits\fR
Use tha source, Luke :-). Da output format is still subject ta chizzle.


.TP
.B  --enarmor
.TP
.B  --dearmor
Pack or unpack a arbitrary input into/from a OpenPGP ASCII armor.
This be a GnuPG extension ta OpenPGP n' up in general not straight-up useful.




.SS  How tha fuck ta manage yo' keys
\ 

This section explains tha main commandz fo' key pimpment


.TP
.B  --gen-key
Generate a freshly smoked up key pair. Shiiit, dis aint no joke. This command is normally only used
interactively.

There be a experimenstrual feature which allows you ta create keys in
batch mode. Right back up in yo muthafuckin ass. See tha file \(oq\fIdoc/DETAILS\fR\(cq up in tha source distribution
on how tha fuck ta use all dis bullshit.

.TP
.B  --gen-revoke \fBname\fR
Generate a revocation certificate fo' tha complete key. To revoke
a subkey or a signature, use tha \fB--edit\fR command.

.TP
.B  --desig-revoke \fBname\fR
Generate a thugged-out designated revocation certificate fo' a key. This allows a
user (with tha permission of tha keyholder) ta revoke one of mah thugs's
key.


.TP
.B  --edit-key
Present a menu which enablez you ta do most of tha key pimpment
related tasks.  It expects tha justification of a key on tha command
line.

.RS

.TP
.B  uid \fBn\fR
Toggle selection of user ID or p-to-tha-ornotastic user ID wit index \fBn\fR.
Use \fB*\fR ta select all n' \fB0\fR ta deselect all.

.TP
.B  key \fBn\fR
Toggle selection of subkey wit index \fBn\fR.
Use \fB*\fR ta select all n' \fB0\fR ta deselect all.

.TP
.B  sign
Make a signature on key of user \fBname\fR If tha key aint yet
signed by tha default user (or tha playas given wit -u), tha program
displays tha shiznit of tha key again, together wit its
fingerprint n' asks whether it should be signed. Y'all KNOW dat shit, muthafucka! This question is
repeated fo' all playas specified with
-u.

.TP
.B  lsign
Same as "sign" but tha signature is marked as non-exportable n' will
therefore never be used by others. This may be used ta make keys
valid only up in tha local environment.

.TP
.B  nrsign
Same as "sign" but tha signature is marked as non-revocable n' can
therefore never be revoked.

.TP
.B  tsign
Make a trust signature. This be a signature dat combines tha notions
of certification (like a regular signature), n' trust (like the
"trust" command). Well shiiiit, it is generally only useful up in distinct communities
or groups.
.RE

.RS
Note dat "l" (for local / non-exportable), "nr" (for non-revocable,
and "t" (for trust) may be freely mixed n' prefixed ta "sign" to
create a signature of any type desired.
.RE

.RS

.TP
.B  delsig
Delete a signature. Note dat it aint possible ta retract a signature,
once it has been bust ta tha hood (i.e. ta a keyserver).  In dat case
you betta use \fBrevsig\fR.

.TP
.B  revsig
Revoke a signature. For every last muthafuckin signature which has been generated by
one of tha secret keys, GnuPG asks whether a revocation certificate
should be generated.

.TP
.B  check
Peep tha signatures on all selected user IDs.

.TP
.B  adduid
Smoke a additionizzle user ID.

.TP
.B  addphoto
Smoke a p-to-tha-ornotastic user ID. This will prompt fo' a JPEG file that
will be embedded tha fuck into tha user ID. Note dat a straight-up big-ass JPEG will make
for a straight-up big-ass key fo' realz. Also note dat some programs will display your
JPEG unchanged (GnuPG), n' some programs will scale it ta fit up in a
dialog box (PGP).

.TP
.B  showphoto
Display tha selected p-to-tha-ornotastic user ID.

.TP
.B  deluid
Delete a user ID or p-to-tha-ornotastic user ID.  Note dat it is not
possible ta retract a user id, once it has been bust ta tha public
(i.e. ta a keyserver).  In dat case you betta use \fBrevuid\fR.

.TP
.B  revuid
Revoke a user ID or p-to-tha-ornotastic user ID.

.TP
.B  primary
Flag tha current user id as tha primary one, removes tha primary user
id flag from all other user idz n' sets tha timestamp of all affected
self-signatures one second ahead. Y'all KNOW dat shit, muthafucka! Note dat settin a photo user ID
as primary make it primary over other photo user IDs, n' settin a
regular user ID as primary make it primary over other regular user
IDs.

.TP
.B  keyserver
Set a preferred keyserver fo' tha specified user ID(s). This allows
other playas ta know where you prefer they git yo' key from. Right back up in yo muthafuckin ass. See
\fB--keyserver-options honor-keyserver-url\fR fo' mo' on how tha fuck this
works.  Settin a value of "none" removes a existin preferred
keyserver.

.TP
.B  notation
Set a name=value notation fo' tha specified user ID(s). Right back up in yo muthafuckin ass. See
\fB--cert-notation\fR fo' mo' on how tha fuck dis works. Right back up in yo muthafuckin ass. Settin a value of
"none" removes all notations, settin a notation prefixed wit a minus
sign (-) removes dat notation, n' settin a notation name (without the
=value) prefixed wit a minus sign removes all notations wit dat name.

.TP
.B  pref
List preferences from tha selected user ID. This shows tha actual
preferences, without includin any implied preferences.

.TP
.B  showpref
Mo' verbose preferences listin fo' tha selected user ID. This shows
the preferences up in effect by includin tha implied preferencez of 3DES
(cipher), SHA-1 (digest), n' Uncompressed (compression) if they are
not already included up in tha preference list. In addition, the
preferred keyserver n' signature notations (if any) is shown.

.TP
.B  setpref \fBstring\fR
Set tha list of user ID preferences ta \fBstring\fR fo' all (or just
the selected) user IDs. Callin setpref wit no arguments sets the
preference list ta tha default (either built-in or set via
\fB--default-preference-list\fR), n' callin setpref wit "none"
as tha argument sets a empty preference list. Use \fBgpg2
--version\fR ta git a list of available algorithms. Note dat while you
can chizzle tha preferences on a attribute user ID (aka "photo ID"),
GnuPG do not select keys via attribute user IDs so these preferences
will not be used by GnuPG.

When settin preferences, you should list tha algorithms up in tha order
which you'd like ta peep dem used by one of mah thugs when encryptin a
message ta yo' key.  If you don't include 3DES, it will be
automatically added all up in tha end yo, but it ain't no stoppin cause I be still poppin'.  Note dat there be nuff factors that
go tha fuck into choosin a algorithm (for example, yo' key may not be the
only recipient), n' so tha remote OpenPGP application bein used to
send ta you may or may not follow yo' exact chosen order fo' a given
message.  It will, however, only chizzle a algorithm dat is present
on tha preference list of every last muthafuckin recipient key.  See also the
INTEROPERABILITY WITH OTHER OPENPGP PROGRAMS section below.

.TP
.B  addkey
Add a subkey ta dis key.

.TP
.B  addcardkey
Generate a subkey on a cold-ass lil card n' add it ta dis key.

.TP
.B  keytocard
Transfer tha selected secret subkey (or tha primary key if no subkey
has been selected) ta a smartcard. Y'all KNOW dat shit, muthafucka! Da secret key up in tha keyrin will
be replaced by a stub if tha key could be stored successfully on the
card n' you use tha save command later n' shit. Only certain key types may be
transferred ta tha card. Y'all KNOW dat shit, muthafucka! A sub menu allows you ta select on what tha fuck card
to store tha key. Note dat it aint possible ta git dat key back
from tha card - if tha card gets fucked up yo' secret key is ghon be lost
unless you gotz a funky-ass backup somewhere.

.TP
.B  bkuptocard \fBfile\fR
Restore tha given file ta a cold-ass lil card. Y'all KNOW dat shit, muthafucka! This command may be used ta restore a
backup key (as generated durin card initialization) ta a freshly smoked up card. Y'all KNOW dat shit, muthafucka! In
almost all cases dis is ghon be tha encryption key. Yo ass should use this
command only wit tha correspondin hood key n' make shizzle dat the
file given as argument is indeed tha backup ta restore. Yo ass should then
select 2 ta restore as encryption key.  Yo ass will first be axed ta enter
the passphrase of tha backup key n' then fo' tha Admin PIN of tha card.

.TP
.B  delkey
Remove a subkey (secondart key). Note dat it aint possible ta retract
a subkey, once it has been bust ta tha hood (i.e. ta a keyserver).  In
that case you betta use \fBrevkey\fR.

.TP
.B  revkey
Revoke a subkey.

.TP
.B  expire
Change tha key or subkey expiration time. If a subkey is selected, the
expiration time of dis subkey is ghon be chizzled. Y'all KNOW dat shit, muthafucka! With no selection, the
key expiration of tha primary key is chizzled.

.TP
.B  trust
Change tha balla trust value fo' tha key. This thugged-out shiznit tha trust-db
immediately n' no save is required.

.TP
.B  disable
.TP
.B  enable
Disable or enable a entire key fo' realz. A disabled key can not normally be
used fo' encryption.

.TP
.B  addrevoker
Add a thugged-out designated revoker ta tha key. This takes one optionizzle argument:
"sensitive". If a thugged-out designated revoker is marked as sensitive, it will
not be exported by default (see export-options).

.TP
.B  passwd
Change tha passphrase of tha secret key.

.TP
.B  toggle
Toggle between hood n' secret key listing.

.TP
.B  clean
Compact (by removin all signatures except tha selfsig) any user ID
that is no longer usable (e.g. revoked, or expired). Then, remove any
signatures dat is not usable by tha trust calculations.
Specifically, dis removes any signature dat do not validate, any
signature dat is superseded by a lata signature, revoked signatures,
and signatures issued by keys dat is not present on tha keyring.

.TP
.B  minimize
Make tha key as lil' small-ass as possible. This removes all signatures from
each user ID except fo' da most thugged-out recent self-signature.

.TP
.B  cross-certify
Add cross-certification signatures ta signin subkeys dat may not
currently have em. Cross-certification signatures protect against a
subtle battle against signin subkeys. Right back up in yo muthafuckin ass. See
\fB--require-cross-certification\fR.  All freshly smoked up keys generated have
this signature by default, so dis option is only useful ta brang
olda keys up ta date.

.TP
.B  save
Save all chizzlez ta tha key rings n' quit.

.TP
.B  quit
Quit tha program without uppimpin the
key rings.
.RE

.RS
Da listin shows you tha key wit its secondary keys n' all user
ids.  Da primary user id is indicated by a thugged-out dot, n' selected keys or
user idz is indicated by a asterisk.  Da trust
value is displayed wit tha primary key: tha straight-up original gangsta is tha assigned baller
trust n' tha second is tha calculated trust value. Lettas is used for
the joints:
.RE

.RS

.TP
.B  -
No ballertrust assigned / not yet calculated.

.TP
.B  e
Trust
calculation has failed; probably cuz of a expired key.

.TP
.B  q
Not enough shiznit fo' calculation.

.TP
.B  n
Never trust dis key.

.TP
.B  m
Marginally trusted.

.TP
.B  f
Fully trusted.

.TP
.B  u
Ultimately trusted.

.RE

.TP
.B  --sign-key \fBname\fR
Signs a hood key wit yo' secret key. This be a gangbangin' finger-lickin' dirty-ass shortcut version of
the subcommand "sign" from \fB--edit\fR.

.TP
.B  --lsign-key \fBname\fR
Signs a hood key wit yo' secret key but marks it as
non-exportable. This be a gangbangin' finger-lickin' dirty-ass shortcut version of tha subcommand "lsign"
from \fB--edit-key\fR.


.TP
.B  --passwd \fIuser_id\fR
Change tha passphrase of tha secret key belongin ta tha certificate
specified as \fIuser_id\fR.  This be a gangbangin' finger-lickin' dirty-ass shortcut fo' tha sub-command
\fBpasswd\fR of tha edit key menu.




.SH OPTIONS

\fBgpg2\fR features a funky-ass bunch of options ta control tha exact
behaviour n' ta chizzle tha default configuration.


Long options can be put up in a options file (default
"~/.gnupg/gpg.conf"). Right back up in yo muthafuckin ass. Short option names aint gonna work - fo' example,
"armor" be a valid option fo' tha options file, while "a" is not. Do not
write tha 2 dashes yo, but simply tha name of tha option n' any required
arguments, n' you can put dat on yo' toast. Lines wit a hash ('#') as tha straight-up original gangsta non-white-space
characta is ignored. Y'all KNOW dat shit, muthafucka! Commandz may be put up in dis file too yo, but dat is
not generally useful as tha command will execute automatically with
every execution of gpg.

Please remember dat option parsin stops as soon as a non-option is
encountered, you can explicitly stop parsin by rockin tha special option
\fB--\fR.


.SS  How tha fuck ta chizzle tha configuration
\ 

These options is used ta chizzle tha configuration n' is probably found
in tha option file.


.TP
.B  --default-key \fIname\fR
Use \fIname\fR as tha default key ta sign with. If dis option is not
used, tha default key is tha straight-up original gangsta key found up in tha secret keyring.
Note dat \fB-u\fR or \fB--local-user\fR overrides dis option.

.TP
.B  --default-recipient \fIname\fR
Use \fIname\fR as default recipient if option \fB--recipient\fR is
not used n' don't ask if dis be a valid one. \fIname\fR must be
non-empty.

.TP
.B  --default-recipient-self
Use tha default key as default recipient if option \fB--recipient\fR is not
used n' don't ask if dis be a valid one. Da default key is tha first
one from tha secret keyrin or tha one set wit \fB--default-key\fR.

.TP
.B  --no-default-recipient
Reset \fB--default-recipient\fR n' \fB--default-recipient-self\fR.

.TP
.B  -v, --verbose
Give mo' shiznit durin processing. If used
twice, tha input data is listed up in detail.

.TP
.B  --no-verbose
Reset verbose level ta 0.

.TP
.B  -q, --quiet
Try ta be as on tha down-low as possible.

.TP
.B  --batch
.TP
.B  --no-batch
Use batch mode.  Never ask, do not allow interactizzle commands.
\fB--no-batch\fR disablez dis option. I aint talkin' bout chicken n' gravy biatch.  Note dat even wit a
filename given on tha command line, gpg might still need ta read from
STDIN (in particular if gpg figures dat tha input be a
detached signature n' no data file has been specified).  Thus if you
do not wanna feed data via STDIN, you should connect STDIN to
\(oq\fI/dev/null\fR\(cq.

.TP
.B  --no-tty
Make shizzle dat tha TTY (terminal) is never used fo' any output.
This option is needed up in some cases cuz GnuPG sometimes prints
warnings ta tha TTY even if \fB--batch\fR is used.

.TP
.B  --yes
Assume "yes" on most thangs.

.TP
.B  --no
Assume "no" on most thangs.


.TP
.B  --list-options \fBparameters\fR
This be a space or comma delimited strang dat gives options used when
listin keys n' signatures (that is, \fB--list-keys\fR,
\fB--list-sigs\fR, \fB--list-public-keys\fR,
\fB--list-secret-keys\fR, n' tha \fB--edit-key\fR functions).
Options can be prepended wit a \fBno-\fR (afta tha two dashes) to
give tha opposite meaning.  Da options are:

.RS

.TP
.B  show-photos
Causes \fB--list-keys\fR, \fB--list-sigs\fR,
\fB--list-public-keys\fR, n' \fB--list-secret-keys\fR to
display any photo IDs attached ta tha key.  Defaults ta no. Right back up in yo muthafuckin ass. See also
\fB--photo-viewer\fR.  Do not work wit \fB--with-colons\fR:
see \fB--attribute-fd\fR fo' tha appropriate way ta git photo data
for scripts n' other frontends.

.TP
.B  show-policy-urls
Show policy URLs up in tha \fB--list-sigs\fR or \fB--check-sigs\fR
listings.  Defaults ta no.

.TP
.B  show-notations
.TP
.B  show-std-notations
.TP
.B  show-user-notations
Show all, IETF standard, or user-defined signature notations up in the
\fB--list-sigs\fR or \fB--check-sigs\fR listings. Defaults ta no.

.TP
.B  show-keyserver-urls
Show any preferred keyserver URL up in tha \fB--list-sigs\fR or
\fB--check-sigs\fR listings. Defaults ta no.

.TP
.B  show-uid-validity
Display tha calculated validitizzle of user IDs durin key listings.
Defaults ta no.

.TP
.B  show-unusable-uids
Show revoked n' expired user IDs up in key listings. Defaults ta no.

.TP
.B  show-unusable-subkeys
Show revoked n' expired subkeys up in key listings. Defaults ta no.

.TP
.B  show-keyring
Display tha keyrin name all up in tha head of key listings ta show which
keyrin a given key resides on. I aint talkin' bout chicken n' gravy biatch. Defaults ta no.

.TP
.B  show-sig-expire
Show signature expiration dates (if any) durin \fB--list-sigs\fR or
\fB--check-sigs\fR listings. Defaults ta no.

.TP
.B  show-sig-subpackets
Include signature subpackets up in tha key listing. This option can take an
optionizzle argument list of tha subpackets ta list. If no argument is
passed, list all subpackets, n' you can put dat on yo' toast. Defaults ta no. This option is only
meaningful when rockin \fB--with-colons\fR along with
\fB--list-sigs\fR or \fB--check-sigs\fR.

.RE

.TP
.B  --verify-options \fBparameters\fR
This be a space or comma delimited strang dat gives options used when
verifyin signatures. Options can be prepended wit a `no-' ta give
the opposite meaning. Da options are:

.RS

.TP
.B  show-photos
Display any photo IDs present on tha key dat issued tha signature.
Defaults ta no. Right back up in yo muthafuckin ass. See also \fB--photo-viewer\fR.

.TP
.B  show-policy-urls
Show policy URLs up in tha signature bein verified. Y'all KNOW dat shit, muthafucka! Defaults ta no.

.TP
.B  show-notations
.TP
.B  show-std-notations
.TP
.B  show-user-notations
Show all, IETF standard, or user-defined signature notations up in the
signature bein verified. Y'all KNOW dat shit, muthafucka! Defaults ta IETF standard.

.TP
.B  show-keyserver-urls
Show any preferred keyserver URL up in tha signature bein verified.
Defaults ta no.

.TP
.B  show-uid-validity
Display tha calculated validitizzle of tha user IDs on tha key dat issued
the signature. Defaults ta no.

.TP
.B  show-unusable-uids
Show revoked n' expired user IDs durin signature verification.
Defaults ta no.

.TP
.B  show-primary-uid-only
Show only tha primary user ID durin signature verification. I aint talkin' bout chicken n' gravy biatch.  That is
all tha AKA lines as well as photo Idz is not shown wit tha signature
verification status.

.TP
.B  pka-lookups
Enable PKA lookups ta verify sender addresses. Note dat PKA is based
on DNS, n' so enablin dis option may disclose shiznit on when
and what tha fuck signatures is verified or ta whom data is encrypted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This
is similar ta tha "web bug" busted lyrics bout fo' tha auto-key-retrieve
feature.

.TP
.B  pka-trust-increase
Raise tha trust up in a signature ta full if tha signature passes PKA
validation. I aint talkin' bout chicken n' gravy biatch. This option is only meaningful if pka-lookups is set.
.RE

.TP
.B  --enable-dsa2
.TP
.B  --disable-dsa2
Enable hash truncation fo' all DSA keys even fo' oldschool DSA Keys up to
1024 bit.  This be also tha default wit \fB--openpgp\fR.  Note
that olda versionz of GnuPG also required dis flag ta allow the
generation of DSA larger than 1024 bit.

.TP
.B  --photo-viewer \fBstring\fR
This is tha command line dat should be run ta view a photo ID. "%i"
will be expanded ta a gangbangin' filename containin tha photo. "%I" do the
same, except tha file aint gonna be deleted once tha viewer exits.
Other flags is "%k" fo' tha key ID, "%K" fo' tha long key ID, "%f"
for tha key fingerprint, "%t" fo' tha extension of tha image type
(e.g. "jpg"), "%T" fo' tha MIME type of tha image (e.g. "image/jpeg"),
"%v" fo' tha single-characta calculated validitizzle of tha image being
viewed (e.g. "f"), "%V" fo' tha calculated validitizzle as a strang (e.g.
"full"), "%U" fo' a funky-ass base32 encoded hash of tha user ID,
and "%%" fo' a actual cement sign. I aint talkin' bout chicken n' gravy biatch. If neither %i or %I is present,
then tha photo is ghon be supplied ta tha viewer on standard input.

Da default viewer is "xloadimage -fork -quiet -title 'KeyID 0x%k'
STDIN". Note dat if yo' image viewer program aint secure, then
executin it from GnuPG do not make it secure.

.TP
.B  --exec-path \fBstring\fR
Sets a list of directories ta search fo' photo viewers n' keyserver
helpers. If not provided, keyserver helpers use tha compiled-in
default directory, n' photo viewers use tha $PATH environment
variable.
Note, dat on W32 system dis value is ignored when searchin for
keyserver helpers.

.TP
.B  --keyrin \fBfile\fR
Add \fBfile\fR ta tha current list of keyrings. If \fBfile\fR begins
with a tilde n' a slash, these is replaced by tha $HOME directory. If
the filename do not contain a slash, it be assumed ta be up in tha GnuPG
home directory ("~/.gnupg" if \fB--homedir\fR or $GNUPGHOME is not
used).

Note dat dis addz a keyrin ta tha current list. If tha intent is to
use tha specified keyrin alone, use \fB--keyring\fR along with
\fB--no-default-keyring\fR.

.TP
.B  --secret-keyrin \fBfile\fR
Same as \fB--keyring\fR but fo' tha secret keyrings.

.TP
.B  --primary-keyrin \fBfile\fR
Designate \fBfile\fR as tha primary hood keyring. This means that
newly imported keys (via \fB--import\fR or keyserver
\fB--recv-from\fR) will git all up in dis keyring.

.TP
.B  --trustdb-name \fBfile\fR
Use \fBfile\fR instead of tha default trustdb. If \fBfile\fR begins
with a tilde n' a slash, these is replaced by tha $HOME directory. If
the filename do not contain a slash, it be assumed ta be up in tha GnuPG
home directory (\(oq\fI~/.gnupg\fR\(cq if \fB--homedir\fR or $GNUPGHOME is
not used).

.TP
.B  --homedir \fIdir\fR
Set tha name of tha home directory ta \fIdir\fR. If dis option is not
used, tha home directory defaults ta \(oq\fI~/.gnupg\fR\(cq.  It be only
recognized when given on tha command line.  It also overrides any home
directory stated all up in tha environment variable \(oq\fIGNUPGHOME\fR\(cq or
(on W32 systems) by meanz of tha Registry entry
\fIHKCU\\Software\\GNU\\GnuPG:HomeDir\fR.






.TP
.B  --display-charset \fBname\fR
Set tha name of tha natizzle characta set. This is used ta convert
some shiznital strings like user IDs ta tha proper UTF-8 encoding.
Note dat dis has not a god damn thang ta do wit tha characta set of data ta be
encrypted or signed; GnuPG do not recode user-supplied data. If
this option aint used, tha default characta set is determined from
the current locale fo' realz. A verbositizzle level of 3 shows tha chosen set.
Valid joints fo' \fBname\fR are:

.RS

.TP
.B  iso-8859-1
This is tha Latin 1 set.

.TP
.B  iso-8859-2
Da Latin 2 set.

.TP
.B  iso-8859-15
This is currently a alias for
the Latin 1 set.

.TP
.B  koi8-r
Da usual Russian set (rfc1489).

.TP
.B  utf-8
Bypass all translations n' assume
that tha OS uses natizzle UTF-8 encoding.
.RE

.TP
.B  --utf8-strings
.TP
.B  --no-utf8-strings
Assume dat command line arguments is given as UTF8 strings. The
default (\fB--no-utf8-strings\fR) is ta assume dat arguments are
encoded up in tha characta set as specified by
\fB--display-charset\fR. These options affect all following
arguments, n' you can put dat on yo' toast. Both options may be used multiple times.


.TP
.B  --options \fBfile\fR
Read options from \fBfile\fR n' do not try ta read dem from the
default options file up in tha homedir (see \fB--homedir\fR). This
option is ignored if used up in a options file.

.TP
.B  --no-options
Shortcut fo' \fB--options /dev/null\fR. This option is detected
before a attempt ta open a option file.  Usin dis option will also
prevent tha creation of a \(oq\fI~/.gnupg\fR\(cq homedir.

.TP
.B  -z \fBn\fR
.TP
.B  --compress-level \fBn\fR
.TP
.B  --bzip2-compress-level \fBn\fR
Set compression level ta \fBn\fR fo' tha ZIP n' ZLIB compression
algorithms. Da default is ta use tha default compression level of zlib
(normally 6). \fB--bzip2-compress-level\fR sets tha compression level
for tha BZIP2 compression algorithm (defaultin ta 6 as well). This be a
different option from \fB--compress-level\fR since BZIP2 uses a
significant amount of memory fo' each additionizzle compression level.
\fB-z\fR sets both fo' realz. A value of 0 fo' \fBn\fR disablez compression.

.TP
.B  --bzip2-decompress-lowmem
Use a gangbangin' finger-lickin' different decompression method fo' BZIP2 compressed files. This
alternate method uses a lil' bit mo' than half tha memory yo, but also runs
at half tha speed. Y'all KNOW dat shit, muthafucka! This is useful under off tha hook low memory
circumstances when tha file was originally compressed at a high
\fB--bzip2-compress-level\fR.


.TP
.B  --mangle-dos-filenames
.TP
.B  --no-mangle-dos-filenames
Older version of Windows cannot handle filenames wit mo' than one
dot. \fB--mangle-dos-filenames\fR causes GnuPG ta replace (rather
than add to) tha extension of a output filename ta avoid this
problem. This option is off by default n' has no effect on non-Windows
platforms.

.TP
.B  --ask-cert-level
.TP
.B  --no-ask-cert-level
When bustin a key signature, prompt fo' a cold-ass lil certification level. If this
option aint specified, tha certification level used is set via
\fB--default-cert-level\fR. Right back up in yo muthafuckin ass. See \fB--default-cert-level\fR for
information on tha specific levels n' how tha fuck they are
used. Y'all KNOW dat shit, muthafucka! \fB--no-ask-cert-level\fR disablez dis option. I aint talkin' bout chicken n' gravy biatch. This option
defaults ta no.

.TP
.B  --default-cert-level \fBn\fR
Da default ta use fo' tha check level when signin a key.

0 means you make no particular claim as ta how tha fuck carefully you verified
the key.

1 means you believe tha key is owned by tha thug whoz ass fronts ta own
it but you could not, or did not verify tha key at all. This is
useful fo' a "persona" verification, where you sign tha key of a
pseudonymous user.

2 means you did casual verification of tha key. For example, this
could mean dat you verified tha key fingerprint n' checked the
user ID on tha key against a photo ID.

3 means you did extensive verification of tha key. For example, this
could mean dat you verified tha key fingerprint wit tha balla of the
key up in person, n' dat you checked, by meanz of a hard ta forge
document wit a photo ID (like fuckin a passport) dat tha name of tha key
balla matches tha name up in tha user ID on tha key, n' finally dat you
verified (by exchange of email) dat tha email address on tha key
belongs ta tha key baller.

Note dat tha examplez given above fo' levels 2 n' 3 is just that:
examples. In tha end, it is up ta you ta decizzle just what tha fuck "casual"
and "extensive" mean ta yo thugged-out ass.

This option defaults ta 0 (no particular claim).

.TP
.B  --min-cert-level
When buildin tha trust database, treat any signatures wit a
certification level below dis as invalid. Y'all KNOW dat shit, muthafucka! Defaults ta 2, which
disregardz level 1 signatures. Note dat level 0 "no particular
claim" signatures is always accepted.

.TP
.B  --trusted-key \fBlong key ID\fR
Assume dat tha specified key (which must be given
as a gangbangin' full 8 byte key ID) be as trustworthy as one of
your own secret keys. This option is useful if you
don't wanna keep yo' secret keys (or one of them)
online but still wanna be able ta check tha validitizzle of a given
recipientz or signatorz key.

.TP
.B  --trust-model \fBpgp|classic|direct|always|auto\fR
Set what tha fuck trust model GnuPG should follow. Da models are:

.RS

.TP
.B  pgp
This is tha Web of Trust combined wit trust signatures as used up in PGP
5.x n' later n' shit. This is tha default trust model when bustin a new
trust database.

.TP
.B  classic
This is tha standard Web of Trust as used up in PGP 2.x n' earlier.

.TP
.B  direct
Key validitizzle is set directly by tha user n' not calculated via the
Web of Trust.

.TP
.B  always
Skip key validation n' assume dat used keys is always fully
trusted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Yo ass generally won't use dis unless yo ass is rockin some
external validation scheme. This option also suppresses the
"[uncertain]" tag printed wit signature checks when there is no
evidence dat tha user ID is bound ta tha key.  Note dat this
trust model still do not allow tha use of expired, revoked, or
disabled keys.

.TP
.B  auto
Select tha trust model dependin on whatever tha internal trust
database say. This is tha default model if such a thugged-out database already
exists.
.RE

.TP
.B  --auto-key-locate \fBparameters\fR
.TP
.B  --no-auto-key-locate
GnuPG can automatically locate n' retrieve keys as needed rockin this
option. I aint talkin' bout chicken n' gravy biatch. This happens when encryptin ta a email address (in the
"user@example.com" form), n' there be no user@example.com keys on
the local keyring.  This option takes any number of tha following
mechanisms, up in tha order they is ta be tried:

.RS

.TP
.B  cert
Locate a key rockin DNS CERT, as specified up in rfc4398.

.TP
.B  pka
Locate a key rockin DNS PKA.

.TP
.B  ldap
Usin DNS Service Discovery, check tha domain up in question fo' any LDAP
keyservers ta use.  If dis fails, attempt ta locate tha key rockin the
PGP Universal method of checkin \(aqldap://keys.(thedomain)\(aq.

.TP
.B  keyserver
Locate a key rockin whatever keyserver is defined rockin the
\fB--keyserver\fR option.

.TP
.B  keyserver-URL
In addition, a keyserver URL as used up in tha \fB--keyserver\fR option
may be used here ta query dat particular keyserver.

.TP
.B  local
Locate tha key rockin tha local keyrings.  This mechanizzle allows to
select tha order a local key lookup is done.  Thus using
\(aq--auto-key-locate local\(aq is identical to
\fB--no-auto-key-locate\fR.

.TP
.B  nodefault
This flag disablez tha standard local key lookup, done before any of the
mechanizzlez defined by tha \fB--auto-key-locate\fR is tried. Y'all KNOW dat shit, muthafucka!  The
posizzle of dis mechanizzle up in tha list do not matter n' shit.  It be not
required if \fBlocal\fR be also used.

.TP
.B  clear
Clear all defined mechanisms.  This is useful ta override
mechanizzlez given up in a cold-ass lil config file.

.RE

.TP
.B  --keyid-format \fBshort|0xshort|long|0xlong\fR
Select how tha fuck ta display key IDs. "short" is tha traditionizzle 8-character
key ID. "long" is tha mo' accurate (but less convenient)
16-characta key ID fo' realz. Add a "0x" ta either ta include a "0x" at the
beginnin of tha key ID, as up in 0x99242560.  Note dat dis option is
ignored if tha option --with-colons is used.

.TP
.B  --keyserver \fBname\fR
Use \fBname\fR as yo' keyserver n' shit. This is tha server that
\fB--recv-keys\fR, \fB--send-keys\fR, n' \fB--search-keys\fR
will rap wit ta receive keys from, bust keys to, n' search for
keys on. I aint talkin' bout chicken n' gravy biatch. Da format of tha \fBname\fR be a URI:
`scheme:[//]keyservername[:port]' Da scheme is tha type of keyserver:
"hkp" fo' tha HTTP (or compatible) keyservers, "ldap" fo' tha LDAP
keyservers, or "mailto" fo' tha Graff email keyserver n' shit. Note dat your
particular installation of GnuPG may have other keyserver types
available as well. Keyserver schemes is case-insensitizzle fo' realz. Afta the
keyserver name, optionizzle keyserver configuration options may be
provided. Y'all KNOW dat shit, muthafucka! These is tha same as tha global \fB--keyserver-options\fR
from below yo, but apply only ta dis particular keyserver.

Most keyservers synchronize wit each other, so there is generally no
need ta bust keys ta mo' than one server n' shit. Da keyserver
\fBhkp://keys.gnupg.net\fR uses round robin DNS ta give a gangbangin' finger-lickin' different
keyserver each time you use dat shit.

.TP
.B  --keyserver-options \fBname=value1 \fR
This be a space or comma delimited strang dat gives options fo' the
keyserver n' shit. Options can be prefixed wit a `no-' ta give tha opposite
meaning. Valid import-options or export-options may be used here as
well ta apply ta importin (\fB--recv-key\fR) or exporting
(\fB--send-key\fR) a key from a keyserver n' shit. While not all options
are available fo' all keyserver types, some common options are:

.RS

.TP
.B  include-revoked
When searchin fo' a key wit \fB--search-keys\fR, include keys that
are marked on tha keyserver as revoked. Y'all KNOW dat shit, muthafucka! Note dat not all keyservers
differentiate between revoked n' unrevoked keys, n' fo' such
keyservers dis option is meaningless. Note also dat most keyservers do
not have cryptographic verification of key revocations, n' so turning
this option off may result up in skippin keys dat is incorrectly marked
as revoked.

.TP
.B  include-disabled
When searchin fo' a key wit \fB--search-keys\fR, include keys that
are marked on tha keyserver as disabled. Y'all KNOW dat shit, muthafucka! Note dat dis option is not
used wit HKP keyservers.

.TP
.B  auto-key-retrieve
This option enablez tha automatic retrievin of keys from a keyserver
when verifyin signatures made by keys dat is not on tha local
keyring.

Note dat dis option cook up a "web bug" like behavior possible.
Keyserver operators can peep which keys you request, so by bustin  you
a message signed by a funky-ass brand freshly smoked up key (which you naturally aint gonna have
on yo' local keyring), tha operator can tell both yo' IP address and
the time when you verified tha signature.

.TP
.B  honor-keyserver-url
When rockin \fB--refresh-keys\fR, if tha key up in question has a preferred
keyserver URL, then use dat preferred keyserver ta refresh tha key
from. In addition, if auto-key-retrieve is set, n' tha signature
bein verified has a preferred keyserver URL, then use dat preferred
keyserver ta fetch tha key from. Defaults ta yes.

.TP
.B  honor-pka-record
If auto-key-retrieve is set, n' tha signature bein verified has a
PKA record, then use tha PKA shiznit ta fetch tha key. Defaults
to yes.

.TP
.B  include-subkeys
When receivin a key, include subkeys as potential targets, n' you can put dat on yo' toast. Note that
this option aint used wit HKP keyservers, as they do not support
retrievin keys by subkey id.

.TP
.B  use-temp-files
On most Unix-like platforms, GnuPG communicates wit tha keyserver
helper program via pipes, which is da most thugged-out efficient method. Y'all KNOW dat shit, muthafucka! This
option forces GnuPG ta use temporary filez ta rap. On some
platforms (like fuckin Win32 n' RISC OS), dis option be always enabled.

.TP
.B  keep-temp-files
If rockin `use-temp-files', do not delete tha temp filez afta using
them. This option is useful ta learn tha keyserver communication
protocol by readin tha temporary files.

.TP
.B  verbose
Tell tha keyserver helper program ta be mo' verbose. This option can
be repeated multiple times ta increase tha verbositizzle level.

.TP
.B  timeout
Tell tha keyserver helper program how tha fuck long (in seconds) ta try and
perform a keyserver action before givin up. Note dat struttin
multiple actions all up in tha same time uses dis timeout value per action.
For example, when retrievin multiple keys via \fB--recv-keys\fR, the
timeout applies separately ta each key retrieval, n' not ta the
\fB--recv-keys\fR command as a whole. Defaults ta 30 seconds.

.TP
.B  http-proxy=\fBvalue\fR
Set tha proxy ta use fo' HTTP n' HKP keyservers.  This overrides the
"http_proxy" environment variable, if any.


.TP
.B  max-cert-size
When retrievin a key via DNS CERT, only accept keys up ta dis size.
Defaults ta 16384 bytes.

.TP
.B  debug
Turn on debug output up in tha keyserver helper program.  Note dat the
detailz of debug output dependz on which keyserver helper program is
bein used, n' up in turn, on any libraries dat tha keyserver helper
program uses internally (libcurl, openldap, etc).

.TP
.B  check-cert
  Enable certificate checkin if tha keyserver presents one (for hkps or
  ldaps).  Defaults ta on.

.TP
.B  ca-cert-file
  Provide a cold-ass lil certificate store ta override tha system default.  Only
  necessary if check-cert is enabled, n' tha keyserver is rockin a
  certificate dat aint present up in a system default certificate list.

  Note dat dependin on tha SSL library dat tha keyserver helper is
  built with, dis may straight-up be a gangbangin' finger-lickin' directory or a gangbangin' file.

.RE

.TP
.B  --completes-needed \fBn\fR
Number of straight-up trusted playas ta introduce a new
key signer (defaults ta 1).

.TP
.B  --marginals-needed \fBn\fR
Number of marginally trusted playas ta introduce a new
key signer (defaults ta 3)

.TP
.B  --max-cert-depth \fBn\fR
Maximum depth of a cold-ass lil certification chain (default is 5).

.TP
.B  --simple-sk-checksum
Secret keys is integritizzle protected by rockin a SHA-1 checksum. This
method is part of tha upcomin enhanced OpenPGP justification but
GnuPG already uses it as a cold-ass lil countermeasure against certain attacks.
Oldskool applications don't KNOW dis freshly smoked up format, so dis option may
be used ta switch back ta tha oldschool behaviour. Shiiit, dis aint no joke. Usin dis option bears
a securitizzle risk. Note dat rockin dis option only takes effect when
the secret key is encrypted - tha simplest way ta make dis happen is
to chizzle tha passphrase on tha key (even changin it ta tha same
value be acceptable).

.TP
.B  --no-sig-cache
Do not cache tha verification statuz of key signatures.
Cachin gives a much betta performizzle up in key listings. But fuck dat shiznit yo, tha word on tha street is dat if
you suspect dat yo' hood keyrin aint save against write
modifications, you can use dis option ta disable tha caching. It
probably do not make sense ta disable it cuz all kind of damage
can be done if one of mah thugs has write access ta yo' hood keyring.

.TP
.B  --no-sig-create-check
GnuPG normally verifies each signature right afta creation ta protect
against bugs n' hardware malfunctions which could leak up bits from
the secret key. This extra verification needz some time (about 115%
for DSA keys), n' so dis option can be used ta disable dat shit.
But fuck dat shiznit yo, tha word on tha street is dat cuz of tha fact dat tha signature creation needz manual
interaction, dis performizzle penalty do not matta up in most settings.

.TP
.B  --auto-check-trustdb
.TP
.B  --no-auto-check-trustdb
If GnuPG feels dat its shiznit bout tha Web of Trust has ta be
updated, it automatically runs tha \fB--check-trustdb\fR command
internally.  This may be a time consuming
process. \fB--no-auto-check-trustdb\fR disablez dis option.

.TP
.B  --use-agent
.TP
.B  --no-use-agent
This is dummy option. I aint talkin' bout chicken n' gravy biatch. \fBgpg2\fR always requires tha agent.

.TP
.B  --gpg-agent-info
This is dummy option. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it has no effect when used wit \fBgpg2\fR.


.TP
.B  --agent-program \fIfile\fR
Specify a agent program ta be used fo' secret key operations.  The
default value is tha \(oq\fI/usr/bin/gpg-agent\fR\(cq.  This is only used
as a gangbangin' fallback when tha environment variable \fBGPG_AGENT_INFO\fR is not
set or a hustlin agent cannot be connected.


.TP
.B  --lock-once
Lock tha databases tha last time a lock is requested
and do not release tha lock until tha process
terminates.

.TP
.B  --lock-multiple
Release tha locks every last muthafuckin time a lock is no longer
needed. Y'all KNOW dat shit, muthafucka! Use dis ta override a previous \fB--lock-once\fR
from a cold-ass lil config file.

.TP
.B  --lock-never
Disable lockin entirely. This option should be used only up in hella
special environments, where it can be assured dat only one process
is accessin dem filez fo' realz. A bootable floppy wit a stand-alone
encryption system will probably use all dis bullshit. Improper usage of this
option may lead ta data n' key corruption.

.TP
.B  --exit-on-status-write-error
This option will cause write errors on tha status FD ta immediately
terminizzle tha process. That should up in fact be tha default but it never
worked dis way n' thus we need a option ta enable this, so dat the
change won't break applications which close they end of a status fd
connected pipe too early. Usin dis option along with
\fB--enable-progress-filter\fR may be used ta cleanly quit long
runnin gpg operations.

.TP
.B  --limit-card-insert-tries \fBn\fR
With \fBn\fR pimped outa than 0 tha number of prompts askin ta bang a
smartcard gets limited ta N-1. Thus wit a value of 1 gpg won't at
all ask ta bang a cold-ass lil card if none has been banged at startup. This
option is useful up in tha configuration file up in case a application do
not know bout tha smartcard support n' waits ad infinitum fo' an
inserted card.

.TP
.B  --no-random-seed-file
GnuPG uses a gangbangin' file ta store its internal random pool over invocations.
This make random generation faster; however sometimes write operations
are not desired. Y'all KNOW dat shit, muthafucka! This option can be used ta big up dat wit tha cost of
slower random generation.

.TP
.B  --no-greeting
Suppress tha initial copyright message.

.TP
.B  --no-secmem-warning
Suppress tha warnin bout "usin insecure memory".

.TP
.B  --no-permission-warning
Suppress tha warnin bout unsafe file n' home directory (\fB--homedir\fR)
permissions. Note dat tha permission checks dat GnuPG performs are
not intended ta be authoritatizzle yo, but rather they simply warn about
certain common permission problems. Do not assume dat tha lack of a
warnin means dat yo' system is secure.

Note dat tha warnin fo' unsafe \fB--homedir\fR permissions cannot be
suppressed up in tha gpg.conf file, as dis would allow a attacker to
place a unsafe gpg.conf file up in place, n' use dis file ta suppress
warnings bout itself. Da \fB--homedir\fR permissions warnin may only be
suppressed on tha command line.

.TP
.B  --no-mdc-warning
Suppress tha warnin bout missin MDC integritizzle protection.

.TP
.B  --require-secmem
.TP
.B  --no-require-secmem
Refuse ta run if GnuPG cannot git secure memory. Defaults ta no
(i.e. run yo, but give a warning).


.TP
.B  --require-cross-certification
.TP
.B  --no-require-cross-certification
When verifyin a signature made from a subkey, ensure dat tha cross
certification "back signature" on tha subkey is present n' valid. Y'all KNOW dat shit, muthafucka!  This
protects against a subtle battle against subkeys dat can sign.
Defaults ta \fB--require-cross-certification\fR for
\fBgpg2\fR.

.TP
.B  --expert
.TP
.B  --no-expert
Allow tha user ta do certain nonsensical or "silly" thangs like
signin a expired or revoked key, or certain potentially incompatible
things like generatin unusual key types. This also disablez certain
warnin lyrics bout potentially incompatible actions fo' realz. As tha name
implies, dis option is fo' smart-ass muthafuckas only. If you don't fully
understand tha implicationz of what tha fuck it allows you ta do, leave this
off. \fB--no-expert\fR disablez dis option.




.SS  Key related options
\ 


.TP
.B  --recipient \fIname\fR
.TP
.B  -r
Encrypt fo' user id \fIname\fR. If dis option or
\fB--hidden-recipient\fR aint specified, GnuPG asks fo' tha user-id
unless \fB--default-recipient\fR is given.

.TP
.B  --hidden-recipient \fIname\fR
.TP
.B  -R
Encrypt fo' user ID \fIname\fR yo, but hide tha key ID of dis user's
key. This option helps ta hide tha receiver of tha message n' be a
limited countermeasure against traffic analysis. If dis option or
\fB--recipient\fR aint specified, GnuPG asks fo' tha user ID unless
\fB--default-recipient\fR is given.

.TP
.B  --encrypt-to \fBname\fR
Same as \fB--recipient\fR but dis one is intended fo' use up in the
options file n' may be used wit yo' own user-id as an
"encrypt-to-self". These keys is only used when there be other
recipients given either by use of \fB--recipient\fR or by tha asked
user id. Y'all KNOW dat shit, muthafucka!  No trust checkin is performed fo' these user idz n' even
disabled keys can be used.

.TP
.B  --hidden-encrypt-to \fBname\fR
Same as \fB--hidden-recipient\fR but dis one is intended fo' use up in the
options file n' may be used wit yo' own user-id as a hidden
"encrypt-to-self". These keys is only used when there be other
recipients given either by use of \fB--recipient\fR or by tha axed user id.
No trust checkin is performed fo' these user idz n' even disabled
keys can be used.

.TP
.B  --no-encrypt-to
Disable tha use of all \fB--encrypt-to\fR and
\fB--hidden-encrypt-to\fR keys.

.TP
.B  --group \fBname=value1 \fR
Sets up a named group, which is similar ta aliases up in email programs.
Any time tha crew name be a recipient (\fB-r\fR or
\fB--recipient\fR), it is ghon be expanded ta tha joints
specified. Y'all KNOW dat shit, muthafucka! Multiple crews wit tha same name is automatically merged
into a single group.

Da joints is \fBkey IDs\fR or fingerprints yo, but any key description
is accepted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Note dat a value wit spaces up in it is ghon be treated as
two different joints, n' you can put dat on yo' toast. Note also there is only one level of expansion
--- you cannot cook up a crew dat points ta another group. When used
from tha command line, it may be necessary ta quote tha argument to
this option ta prevent tha shell from treatin it as multiple
arguments.

.TP
.B  --ungroup \fBname\fR
Remove a given entry from tha \fB--group\fR list.

.TP
.B  --no-groups
Remove all entries from tha \fB--group\fR list.

.TP
.B  --local-user \fIname\fR
.TP
.B  -u
Use \fIname\fR as tha key ta sign with. Note dat dis option overrides
\fB--default-key\fR.


.TP
.B  --try-all-secrets
Don't peep tha key ID as stored up in tha message but try all secret
keys up in turn ta find tha right decryption key. This option forces the
behaviour as used by anonymous recipients (created by using
\fB--throw-keyids\fR or \fB--hidden-recipient\fR) n' might come
handy up in case where a encrypted message gotz nuff a funky-ass bogus key ID.

.TP
.B  --skip-hidden-recipients
.TP
.B  --no-skip-hidden-recipients
Durin decryption skip all anonymous recipients, n' you can put dat on yo' toast.  This option helps in
the case dat playas use tha hidden recipients feature ta hide there
own encrypt-to key from others.  If oneself has nuff secret keys this
may lead ta a major annoyizzle cuz all keys is tried up in turn to
decrypt soemthang which was not straight-up intended fo' dat shit.  Da drawback
of dis option is dat it is currently not possible ta decrypt a
message which includes real anonymous recipients.




.SS  Input n' Output
\ 


.TP
.B  --armor
.TP
.B  -a
Smoke ASCII armored output.  Da default is ta create tha binary
OpenPGP format.

.TP
.B  --no-armor
Assume tha input data aint up in ASCII armored format.

.TP
.B  --output \fIfile\fR
.TP
.B  -o \fIfile\fR
Write output ta \fIfile\fR.

.TP
.B  --max-output \fBn\fR
This option sets a limit on tha number of bytes dat is ghon be generated
when processin a gangbangin' file. Right back up in yo muthafuckin ass. Since OpenPGP supports various levels of
compression, it is possible dat tha plaintext of a given message may be
significantly larger than tha original gangsta OpenPGP message. While GnuPG
works properly wit such lyrics, there is often a thugged-out desire ta set a
maximum file size dat is ghon be generated before processin is forced to
stop by tha OS limits, n' you can put dat on yo' toast. Defaults ta 0, which means "no limit".

.TP
.B  --import-options \fBparameters\fR
This be a space or comma delimited strang dat gives options for
importin keys. Options can be prepended wit a `no-' ta give the
opposite meaning. Da options are:

.RS

.TP
.B  import-local-sigs
Allow importin key signatures marked as "local". This is not
generally useful unless a gangbangin' finger-lickin' dirty-ass shared keyrin scheme is bein used.
Defaults ta no.

.TP
.B  repair-pks-subkey-bug
Durin import, attempt ta repair tha damage caused by tha PKS keyserver
bug (pre version 0.9.6) dat manglez keys wit multiple subkeys. Note
that dis cannot straight-up repair tha damaged key as some crucial data
is removed by tha keyserver yo, but it do at least hit you wit back one
subkey. Defaults ta no fo' regular \fB--import\fR n' ta yeaaaa for
keyserver \fB--recv-keys\fR.

.TP
.B  merge-only
Durin import, allow key thugged-out shiznit ta existin keys yo, but do not allow
any freshly smoked up keys ta be imported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Defaults ta no.

.TP
.B  import-clean
Afta import, compact (remove all signatures except the
self-signature) any user IDs from tha freshly smoked up key dat is not usable.
Then, remove any signatures from tha freshly smoked up key dat is not usable.
This includes signatures dat was issued by keys dat is not present
on tha keyring. This option is tha same ol' dirty as hustlin tha \fB--edit-key\fR
command "clean" afta import. Defaults ta no.

.TP
.B  import-minimal
Import tha smallest key possible. This removes all signatures except
da most thugged-out recent self-signature on each user ID. This option is the
same as hustlin tha \fB--edit-key\fR command "minimize" afta import.
Defaults ta no.
.RE

.TP
.B  --export-options \fBparameters\fR
This be a space or comma delimited strang dat gives options for
exportin keys. Options can be prepended wit a `no-' ta give the
opposite meaning. Da options are:

.RS

.TP
.B  export-local-sigs
Allow exportin key signatures marked as "local". This is not
generally useful unless a gangbangin' finger-lickin' dirty-ass shared keyrin scheme is bein used.
Defaults ta no.

.TP
.B  export-attributes
Include attribute user IDs (photo IDs) while exporting. This is
useful ta export keys if they is goin ta be used by a OpenPGP
program dat do not accept attribute user IDs. Defaults ta yes.

.TP
.B  export-sensitive-revkeys
Include designated revoker shiznit dat was marked as
"sensitive". Defaults ta no.

.TP
.B  export-reset-subkey-passwd
When rockin tha \fB--export-secret-subkeys\fR command, dis option resets
the passphrases fo' all exported subkeys ta empty. This is useful
when tha exported subkey is ta be used on a unattended machine where
a passphrase don't necessarily make sense. Defaults ta no.

.TP
.B  export-clean
Compact (remove all signatures from) user IDs on tha key being
exported if tha user IDs is not usable fo' realz. Also, do not export any
signatures dat is not usable. This includes signatures dat were
issued by keys dat is not present on tha keyring. This option is
the same as hustlin tha \fB--edit-key\fR command "clean" before export
except dat tha local copy of tha key aint modified. Y'all KNOW dat shit, muthafucka! Defaults to
no.

.TP
.B  export-minimal
Export tha smallest key possible. This removes all signatures except the
most recent self-signature on each user ID. This option is tha same ol' dirty as
runnin tha \fB--edit-key\fR command "minimize" before export except
that tha local copy of tha key aint modified. Y'all KNOW dat shit, muthafucka! Defaults ta no.
.RE

.TP
.B  --with-colons
Print key listings delimited by colons. Note dat tha output will be
encoded up in UTF-8 regardless of any \fB--display-charset\fR setting. This
format is useful when GnuPG is called from scripts n' other programs
as it is easily machine parsed. Y'all KNOW dat shit, muthafucka! Da detailz of dis format are
documented up in tha file \(oq\fIdoc/DETAILS\fR\(cq, which is included up in tha GnuPG
source distribution.

.TP
.B  --fixed-list-mode
Do not merge primary user ID n' primary key up in \fB--with-colon\fR
listin mode n' print all timestamps as secondz since 1970-01-01.
Since GnuPG 2.0.10, dis mode be always used n' thus dis option is
obsolete; it do not harm ta use it though.


.TP
.B  --with-fingerprint
Same as tha command \fB--fingerprint\fR but chizzlez only tha format
of tha output n' may be used together wit another command.




.SS  OpenPGP protocol specific options.
\ 


.TP
.B  -t, --textmode
.TP
.B  --no-textmode
Treat input filez as text n' store dem up in tha OpenPGP canonical text
form wit standard "CRLF" line endings. This also sets tha necessary
flags ta inform tha recipient dat tha encrypted or signed data is text
and may need its line endings converted back ta whatever tha local
system uses. This option is useful when communicatin between two
platforms dat have different line endin conventions (UNIX-like ta Mac,
Mac ta Windows, etc). \fB--no-textmode\fR disablez dis option, and
is tha default.


.TP
.B  --force-v3-sigs
.TP
.B  --no-force-v3-sigs
OpenPGP states dat a implementation should generate v4 signatures
but PGP versions 5 all up in 7 only recognize v4 signatures on key
material. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. This option forces v3 signatures fo' signatures on data.
Note dat dis option implies \fB--no-ask-sig-expire\fR, n' unsets
\fB--sig-policy-url\fR, \fB--sig-notation\fR, and
\fB--sig-keyserver-url\fR, as these features cannot be used wit v3
signatures.  \fB--no-force-v3-sigs\fR disablez dis option.
Defaults ta no.

.TP
.B  --force-v4-certs
.TP
.B  --no-force-v4-certs
Always use v4 key signatures even on v3 keys. This option also
changes tha default hash algorithm fo' v3 RSA keys from MD5 ta SHA-1.
\fB--no-force-v4-certs\fR disablez dis option.

.TP
.B  --force-mdc
Force tha use of encryption wit a modification detection code. This
is always used wit tha newer ciphers (those wit a funky-ass blocksize pimped outer
than 64 bits), or if all of tha recipient keys indicate MDC support in
their feature flags.

.TP
.B  --disable-mdc
Disable tha use of tha modification detection code. Note dat by
usin dis option, tha encrypted message becomes vulnerable ta a
message modification attack.

.TP
.B  --personal-cipher-preferences \fBstring\fR
Set tha list of underground cipher preferences ta \fBstring\fR.  Use
\fBgpg2 --version\fR ta git a list of available algorithms,
and use \fBnone\fR ta set no preference at all.  This allows tha user
to safely override tha algorithm chosen by tha recipient key
preferences, as GPG will only select a algorithm dat is usable by
all recipients, n' you can put dat on yo' toast.  Da most highly ranked cipher up in dis list be also
used fo' tha \fB--symmetric\fR encryption command.

.TP
.B  --personal-digest-preferences \fBstring\fR
Set tha list of underground digest preferences ta \fBstring\fR.  Use
\fBgpg2 --version\fR ta git a list of available algorithms,
and use \fBnone\fR ta set no preference at all.  This allows tha user
to safely override tha algorithm chosen by tha recipient key
preferences, as GPG will only select a algorithm dat is usable by
all recipients, n' you can put dat on yo' toast.  Da most highly ranked digest algorithm up in dis list
is also used when signin without encryption
(e.g. \fB--clearsign\fR or \fB--sign\fR).

.TP
.B  --personal-compress-preferences \fBstring\fR
Set tha list of underground compression preferences ta \fBstring\fR.
Use \fBgpg2 --version\fR ta git a list of available
algorithms, n' use \fBnone\fR ta set no preference at all.  This
allows tha user ta safely override tha algorithm chosen by the
recipient key preferences, as GPG will only select a algorithm that
is usable by all recipients, n' you can put dat on yo' toast.  Da most highly ranked compression
algorithm up in dis list be also used when there be no recipient keys
to consider (e.g. \fB--symmetric\fR).

.TP
.B  --s2k-cipher-algo \fBname\fR
Use \fBname\fR as tha cipher algorithm used ta protect secret keys.
Da default cipher is CAST5. This cipher be also used for
conventionizzle encryption if \fB--personal-cipher-preferences\fR and
\fB--cipher-algo\fR aint given.

.TP
.B  --s2k-digest-algo \fBname\fR
Use \fBname\fR as tha digest algorithm used ta mangle tha passphrases.
Da default algorithm is SHA-1.

.TP
.B  --s2k-mode \fBn\fR
Selects how tha fuck passphrases is mangled. Y'all KNOW dat shit, muthafucka! If \fBn\fR is 0 a plain
passphrase (which aint recommended) is ghon be used, a 1 addz a salt to
the passphrase n' a 3 (the default) iterates tha whole process a
number of times (see --s2k-count).  Unless \fB--rfc1991\fR is used,
this mode be also used fo' conventionizzle encryption.

.TP
.B  --s2k-count \fBn\fR
Specify how tha fuck nuff times tha passphrase manglin is repeated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This
value may range between 1024 n' 65011712 inclusive.  Da default is
inquired from gpg-agent.  Note dat not all joints up in the
1024-65011712 range is legal n' if a illegal value is selected,
GnuPG will round up ta tha nearest legal value.  This option is only
meaningful if \fB--s2k-mode\fR is 3.




.SS  Compliizzle options
\ 

These options control what tha fuck GnuPG is compliant to. Only one of these
options may be actizzle at a time. Note dat tha default settin of
this is nearly always tha erect one. Right back up in yo muthafuckin ass. See tha INTEROPERABILITY WITH
OTHER OPENPGP PROGRAMS section below before rockin one of these
options.


.TP
.B  --gnupg
Use standard GnuPG behavior. Shiiit, dis aint no joke. This is essentially OpenPGP behavior
(see \fB--openpgp\fR) yo, but wit some additionizzle workaroundz fo' common
compatibilitizzle problems up in different versionz of PGP. This is the
default option, so it aint generally needed yo, but it may be useful to
override a gangbangin' finger-lickin' different compliizzle option up in tha gpg.conf file.

.TP
.B  --openpgp
Reset all packet, cipher n' digest options ta strict OpenPGP
behavior. Shiiit, dis aint no joke. Use dis option ta reset all previous options like
\fB--s2k-*\fR, \fB--cipher-algo\fR, \fB--digest-algo\fR and
\fB--compress-algo\fR ta OpenPGP compliant joints fo' realz. All PGP
workaroundz is disabled.

.TP
.B  --rfc4880
Reset all packet, cipher n' digest options ta strict RFC-4880
behavior. Shiiit, dis aint no joke. Note dat dis is currently tha same thang as
\fB--openpgp\fR.

.TP
.B  --rfc2440
Reset all packet, cipher n' digest options ta strict RFC-2440
behavior.

.TP
.B  --rfc1991
Try ta be mo' RFC-1991 (PGP 2.x) compliant.

.TP
.B  --pgp2
Set up all options ta be as PGP 2.x compliant as possible, n' warn if
an action is taken (e.g. encryptin ta a non-RSA key) dat will create
a message dat PGP 2.x aint gonna be able ta handle. Note dat `PGP
2.x' here means `MIT PGP 2.6.2'. There is other versionz of PGP 2.x
available yo, but tha MIT release be a phat common baseline.

This option implies
\fB--rfc1991 --disable-mdc --no-force-v4-certs
--escape-from-lines --force-v3-sigs --allow-weak-digest-algos
--cipher-algo IDEA --digest-algo MD5 --compress-algo ZIP\fR.
It also disablez \fB--textmode\fR when encrypting.

.TP
.B  --pgp6
Set up all options ta be as PGP 6 compliant as possible. This
restricts you ta tha ciphers IDEA (if tha IDEA plugin is installed),
3DES, n' CAST5, tha hashes MD5, SHA1 n' RIPEMD160, n' the
compression algorithms none n' ZIP. This also disables
--throw-keyids, n' makin signatures wit signin subkeys as PGP 6
does not KNOW signatures made by signin subkeys.

This option implies \fB--disable-mdc --escape-from-lines
--force-v3-sigs\fR.

.TP
.B  --pgp7
Set up all options ta be as PGP 7 compliant as possible. This is
identical ta \fB--pgp6\fR except dat MDCs is not disabled, n' the
list of allowable ciphers is expanded ta add AES128, AES192, AES256, and
TWOFISH.

.TP
.B  --pgp8
Set up all options ta be as PGP 8 compliant as possible. PGP 8 be a lot
closer ta tha OpenPGP standard than previous versionz of PGP, so all
this do is disable \fB--throw-keyids\fR n' set
\fB--escape-from-lines\fR.  All algorithms is allowed except fo' the
SHA224, SHA384, n' SHA512 digests.




.SS  Bustin thangs one probably don't wanna do.
\ 


.TP
.B  -n
.TP
.B  --dry-run
Don't make any chizzlez (this aint straight-up implemented).

.TP
.B  --list-only
Changes tha behaviour of some commands. This is like \fB--dry-run\fR but
different up in some cases. Da semantic of dis command may be extended in
the future. Currently it only skips tha actual decryption pass and
therefore enablez a gangbangin' fast listin of tha encryption keys.

.TP
.B  -i
.TP
.B  --interactive
Prompt before overwritin any files.

.TP
.B  --debug-level \fIlevel\fR
Select tha debug level fo' investigatin problems. \fIlevel\fR may be
a numeric value or by a keyword:

.RS
.TP
.B  none
No debuggin at all.  A value of less than 1 may be used instead of
the keyword.
.TP
.B  basic
Some basic debug lyrics.  A value between 1 n' 2 may be used
instead of tha keyword.
.TP
.B  advanced
Mo' verbose debug lyrics.  A value between 3 n' 5 may be used
instead of tha keyword.
.TP
.B  expert
Even mo' detailed lyrics.  A value between 6 n' 8 may be used
instead of tha keyword.
.TP
.B  guru
All of tha debug lyrics you can git fo' realz. A value pimped outa than 8 may be
used instead of tha keyword. Y'all KNOW dat shit, muthafucka!  Da creation of hash tracin filez is
only enabled if tha keyword is used.
.RE

How tha fuck these lyrics is mapped ta tha actual debuggin flags is not
specified n' may chizzle wit newer releasez of dis program. They are
however carefully selected ta dopest aid up in debugging.

.TP
.B  --debug \fIflags\fR
Set debuggin flags fo' realz. All flags is or-ed n' \fIflags\fR may
be given up in C syntax (e.g. 0x0042).

.TP
.B  --debug-all
Set all useful debuggin flags.


.TP
.B  --faked-system-time \fIepoch\fR
This option is only useful fo' testing; it sets tha system time back or
forth ta \fIepoch\fR which is tha number of secondz elapsed since tha year
1970.  Alternatively \fIepoch\fR may be given as a gangbangin' full ISO time string
(e.g. "20070924T154812").

.TP
.B  --enable-progress-filter
Enable certain PROGRESS status outputs, n' you can put dat on yo' toast. This option allows frontends
to display a progress indicator while gpg is processin larger files.
There be a slight performizzle overhead rockin dat shit.

.TP
.B  --status-fd \fBn\fR
Write special status strings ta tha file descriptor \fBn\fR.
See tha file DETAILS up in tha documentation fo' a listin of em.

.TP
.B  --status-file \fBfile\fR
Same as \fB--status-fd\fR, except tha status data is freestyled ta file
\fBfile\fR.

.TP
.B  --logger-fd \fBn\fR
Write log output ta file descriptor \fBn\fR n' not ta STDERR.

.TP
.B  --log-file \fBfile\fR
.TP
.B  --logger-file \fBfile\fR
Same as \fB--logger-fd\fR, except tha logger data is freestyled ta file
\fBfile\fR.  Note dat \fB--log-file\fR is only implemented for
GnuPG-2.

.TP
.B  --attribute-fd \fBn\fR
Write attribute subpackets ta tha file descriptor \fBn\fR. This is most
useful fo' use wit \fB--status-fd\fR, since tha status lyrics are
needed ta separate up tha various subpackets from tha stream delivered
to tha file descriptor.

.TP
.B  --attribute-file \fBfile\fR
Same as \fB--attribute-fd\fR, except tha attribute data is freestyled to
file \fBfile\fR.

.TP
.B  --comment \fBstring\fR
.TP
.B  --no-comments
Use \fBstring\fR as a cold-ass lil comment strang up in clear text signatures n' ASCII
armored lyrics or keys (see \fB--armor\fR). Da default behavior is
not ta bust a cold-ass lil comment string. \fB--comment\fR may be repeated multiple
times ta git multiple comment strings. \fB--no-comments\fR removes
all comments, n' you can put dat on yo' toast.  It be a phat scam ta keep tha length of a single comment
below 60 charactas ta avoid problems wit mail programs wrappin such
lines.  Note dat comment lines, like all other header lines, is not
protected by tha signature.

.TP
.B  --emit-version
.TP
.B  --no-emit-version
Force inclusion of tha version strang up in ASCII armored output.  If
given once only tha name of tha program n' tha major number is
emitted (default), given twice tha minor be also emitted, given triple
the micro be added, n' given quad a operatin system identification
is also emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  \fB--no-emit-version\fR disablez tha version
line.

.TP
.B  --sig-notation \fBname=value\fR
.TP
.B  --cert-notation \fBname=value\fR
.TP
.B  -N, --set-notation \fBname=value\fR
Put tha name value pair tha fuck into tha signature as notation data.
\fBname\fR must consist only of printable charactas or spaces, and
must contain a '@' characta up in tha form keyname@domain.example.com
(substitutin tha appropriate keyname n' domain name, of course).  This
is ta help prevent bullshit of tha IETF reserved notation
namespace. Da \fB--expert\fR flag overrides tha '@'
check. \fBvalue\fR may be any printable string; it is ghon be encoded in
UTF8, so you should check dat yo' \fB--display-charset\fR is set
correctly. If you prefix \fBname\fR wit a exclamation mark (!), the
notation data is ghon be flagged as critical
(rfc4880:5.2.3.16). \fB--sig-notation\fR sets a notation fo' data
signatures. \fB--cert-notation\fR sets a notation fo' key signatures
(certifications). \fB--set-notation\fR sets both.

There is special codes dat may be used up in notation names. "%k" will
be expanded tha fuck into tha key ID of tha key bein signed, "%K" tha fuck into the
long key ID of tha key bein signed, "%f" tha fuck into tha fingerprint of the
key bein signed, "%s" tha fuck into tha key ID of tha key makin the
signature, "%S" tha fuck into tha long key ID of tha key makin tha signature,
"%g" tha fuck into tha fingerprint of tha key makin tha signature (which might
be a subkey), "%p" tha fuck into tha fingerprint of tha primary key of tha key
makin tha signature, "%c" tha fuck into tha signature count from tha OpenPGP
smartcard, n' "%%" thangs up in dis biatch up in a single "%". %k, %K, n' %f is only
meaningful when bustin a key signature (certification), n' %c is only
meaningful when rockin tha OpenPGP smartcard.

.TP
.B  --sig-policy-url \fBstring\fR
.TP
.B  --cert-policy-url \fBstring\fR
.TP
.B  --set-policy-url \fBstring\fR
Use \fBstring\fR as a Policy URL fo' signatures (rfc4880:5.2.3.20).  If
you prefix it wit a exclamation mark (!), tha policy URL packet will
be flagged as critical. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. \fB--sig-policy-url\fR sets a policy url for
data signatures. \fB--cert-policy-url\fR sets a policy url fo' key
signatures (certifications). \fB--set-policy-url\fR sets both.

Da same %-expandos used fo' notation data is available here as well.

.TP
.B  --sig-keyserver-url \fBstring\fR
Use \fBstring\fR as a preferred keyserver URL fo' data signatures. If
you prefix it wit a exclamation mark (!), tha keyserver URL packet
will be flagged as critical.

Da same %-expandos used fo' notation data is available here as well.

.TP
.B  --set-filename \fBstring\fR
Use \fBstring\fR as tha filename which is stored inside lyrics.
This overrides tha default, which is ta use tha actual filename of the
file bein encrypted.

.TP
.B  --for-your-eyes-only
.TP
.B  --no-for-your-eyes-only
Set tha `for yo' eyes only' flag up in tha message. This causes GnuPG to
refuse ta save tha file unless tha \fB--output\fR option is given,
and PGP ta bust a "secure viewer" wit a cold-ass lil fronted Tempest-resistant font
to display tha message. This option overrides \fB--set-filename\fR.
\fB--no-for-your-eyes-only\fR disablez dis option.

.TP
.B  --use-embedded-filename
.TP
.B  --no-use-embedded-filename
Try ta create a gangbangin' file wit a name as embedded up in tha data. This can be
a fucked up option as it allows ta overwrite files. Defaults ta no.

.TP
.B  --cipher-algo \fBname\fR
Use \fBname\fR as cipher algorithm. Hustlin tha program wit the
command \fB--version\fR yieldz a list of supported algorithms. If
this aint used tha cipher algorithm is selected from tha preferences
stored wit tha key. In general, you do not wanna use dis option as
it allows you ta violate tha OpenPGP standard.
\fB--personal-cipher-preferences\fR is tha safe way ta accomplish the
same thang.

.TP
.B  --digest-algo \fBname\fR
Use \fBname\fR as tha message digest algorithm. Hustlin tha program
with tha command \fB--version\fR yieldz a list of supported algorithms. In
general, you do not wanna use dis option as it allows you to
violate tha OpenPGP standard. Y'all KNOW dat shit, muthafucka! \fB--personal-digest-preferences\fR is the
safe way ta accomplish tha same thang.

.TP
.B  --compress-algo \fBname\fR
Use compression algorithm \fBname\fR. "zlib" is RFC-1950 ZLIB
compression. I aint talkin' bout chicken n' gravy biatch. "zip" is RFC-1951 ZIP compression which is used by PGP.
"bzip2" be a mo' modern compression scheme dat can compress some
things betta than zip or zlib yo, but all up in tha cost of mo' memory used
durin compression n' decompression. I aint talkin' bout chicken n' gravy biatch. "uncompressed" or "none"
disablez compression. I aint talkin' bout chicken n' gravy biatch. If dis option aint used, tha default
behavior is ta examine tha recipient key preferences ta peep which
algorithms tha recipient supports, n' you can put dat on yo' toast. If all else fails, ZIP is used for
maximum compatibility.

ZLIB may give betta compression thangs up in dis biatch than ZIP, as tha compression
window size aint limited ta 8k. BZIP2 may give even better
compression thangs up in dis biatch than dat yo, but will bust a hella larger
amount of memory while compressin n' decompressing. This may be
significant up in low memory thangs. Note, however, dat PGP (all
versions) only supports ZIP compression. I aint talkin' bout chicken n' gravy biatch. Usin any algorithm other
than ZIP or "none" will make tha message unreadable wit PGP. In
general, you do not wanna use dis option as it allows you to
violate tha OpenPGP standard. Y'all KNOW dat shit, muthafucka! \fB--personal-compress-preferences\fR is the
safe way ta accomplish tha same thang.

.TP
.B  --cert-digest-algo \fBname\fR
Use \fBname\fR as tha message digest algorithm used when signin a
key. Hustlin tha program wit tha command \fB--version\fR yieldz a
list of supported algorithms. Be aware dat if you chizzle a algorithm
that GnuPG supports but other OpenPGP implementations do not, then some
users aint gonna be able ta use tha key signatures you make, or quite
possibly yo' entire key.

.TP
.B  --disable-cipher-algo \fBname\fR
Never allow tha use of \fBname\fR as cipher algorithm.
Da given name aint gonna be checked so dat a lata loaded algorithm
will still git disabled.

.TP
.B  --disable-pubkey-algo \fBname\fR
Never allow tha use of \fBname\fR as hood key algorithm.
Da given name aint gonna be checked so dat a lata loaded algorithm
will still git disabled.

.TP
.B  --throw-keyids
.TP
.B  --no-throw-keyids
Do not put tha recipient key IDs tha fuck into encrypted lyrics. This helps to
hide tha receiverz of tha message n' be a limited countermeasure
against traffic analysis. ([Usin a lil hood engineering
mah playas whoz ass be able ta decrypt tha message can check whether one of the
other recipients is tha one da perved-out muthafucka suspects.])  On tha receivin side, it may
slow down tha decryption process cuz all available secret keys must
be tried. Y'all KNOW dat shit, muthafucka!  \fB--no-throw-keyids\fR disablez dis option. I aint talkin' bout chicken n' gravy biatch. This option
is essentially tha same as rockin \fB--hidden-recipient\fR fo' all
recipients.

.TP
.B  --not-dash-escaped
This option chizzlez tha behavior of cleartext signatures
so dat they can be used fo' patch files. Yo ass should not
send such a armored file via email cuz all spaces
and line endings is hashed like a muthafucka. Yo ass can not use this
option fo' data which has 5 dashes all up in tha beginnin of a
line, patch filez aint gots all dis bullshit fo' realz. A special armor header
line  drops some lyrics ta GnuPG bout dis cleartext signature option.

.TP
.B  --escape-from-lines
.TP
.B  --no-escape-from-lines
Because some mailaz chizzle lines startin wit "From " ta ">From " it
is phat ta handle such lines up in a special way when bustin cleartext
signatures ta prevent tha mail system from breakin tha signature. Note
that all other PGP versions do it dis way like a muthafucka.  Enabled by
default. \fB--no-escape-from-lines\fR disablez dis option.

.TP
.B  --passphrase-repeat \fBn\fR
Specify how tha fuck nuff times \fBgpg2\fR will request a new
passphrase be repeated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This is useful fo' helpin memorize a
passphrase.  Defaults ta 1 repetition.

.TP
.B  --passphrase-fd \fBn\fR
Read tha passphrase from file descriptor \fBn\fR. Only tha straight-up original gangsta line
will be read from file descriptor \fBn\fR. If you use 0 fo' \fBn\fR,
the passphrase is ghon be read from STDIN. This can only be used if only
one passphrase is supplied.
Note dat dis passphrase is only used if tha option \fB--batch\fR
has also been given. I aint talkin' bout chicken n' gravy biatch.  This is different from \fBgpg\fR.

.TP
.B  --passphrase-file \fBfile\fR
Read tha passphrase from file \fBfile\fR. Only tha straight-up original gangsta line will
be read from file \fBfile\fR. This can only be used if only one
passphrase is supplied. Y'all KNOW dat shit, muthafucka! Obviously, a passphrase stored up in a gangbangin' file is
of questionable securitizzle if other playas can read dis file. Don't use
this option if you can avoid dat shit.
Note dat dis passphrase is only used if tha option \fB--batch\fR
has also been given. I aint talkin' bout chicken n' gravy biatch.  This is different from \fBgpg\fR.

.TP
.B  --passphrase \fBstring\fR
Use \fBstring\fR as tha passphrase. This can only be used if only one
passphrase is supplied. Y'all KNOW dat shit, muthafucka! Obviously, dis iz of straight-up questionable
securitizzle on a multi-user system. Don't use dis option if you can
avoid dat shit.
Note dat dis passphrase is only used if tha option \fB--batch\fR
has also been given. I aint talkin' bout chicken n' gravy biatch.  This is different from \fBgpg\fR.


.TP
.B  --command-fd \fBn\fR
This be a replacement fo' tha deprecated shared-memory IPC mode.
If dis option is enabled, user input on thangs aint expected
from tha TTY but from tha given file descriptor. Shiiit, dis aint no joke. Well shiiiit, it should be used
together wit \fB--status-fd\fR. Right back up in yo muthafuckin ass. See tha file doc/DETAILS up in tha source
distribution fo' details on how tha fuck ta use dat shit.

.TP
.B  --command-file \fBfile\fR
Same as \fB--command-fd\fR, except tha commandz is read outta file
\fBfile\fR

.TP
.B  --allow-non-selfsigned-uid
.TP
.B  --no-allow-non-selfsigned-uid
Allow tha import n' use of keys wit user IDs which is not
self-signed. Y'all KNOW dat shit, muthafucka! This aint recommended, as a non self-signed user ID is
trivial ta forge. \fB--no-allow-non-selfsigned-uid\fR disables.

.TP
.B  --allow-freeform-uid
Disable all checks on tha form of tha user ID while generatin a new
one. This option should only be used up in straight-up special environments as
it do not ensure tha de-facto standard format of user IDs.

.TP
.B  --ignore-time-conflict
GnuPG normally checks dat tha timestamps associated wit keys and
signatures have plausible joints, n' you can put dat on yo' toast. But fuck dat shiznit yo, tha word on tha street is dat sometimes a signature
seems ta be olda than tha key cuz of clock problems. This option
makes these checks just a warning. Right back up in yo muthafuckin ass. See also \fB--ignore-valid-from\fR for
timestamp thangs on subkeys.

.TP
.B  --ignore-valid-from
GnuPG normally do not select n' use subkeys pimped up in tha future.
This option allows tha use of such keys n' thus exhibits the
pre-1.0.7 behaviour. Shiiit, dis aint no joke. Yo ass should not use dis option unless there
is some clock problem. Right back up in yo muthafuckin ass. See also \fB--ignore-time-conflict\fR fo' timestamp
issues wit signatures.

.TP
.B  --ignore-crc-error
Da ASCII armor used by OpenPGP is protected by a CRC checksum against
transmission errors. Occasionally tha CRC gets mangled somewhere on
the transmission channel but tha actual content (which is protected by
the OpenPGP protocol anyway) is still aiiight. This option allows GnuPG
to ignore CRC errors.

.TP
.B  --ignore-mdc-error
This option chizzlez a MDC integritizzle protection failure tha fuck into a warning.
This can be useful if a message is partially corrupt yo, but it is
necessary ta git as much data as possible outta tha corrupt message.
But fuck dat shiznit yo, tha word on tha street is dat be aware dat a MDC protection failure may also mean dat the
message was tampered wit intentionally by a attacker.

.TP
.B  --allow-weak-digest-algos
Signatures made wit tha fucked up MD5 algorithm is normally rejected
with a ``invalid digest algorithm'' message.  This option allows the
verification of signatures made wit such weak algorithms.

.TP
.B  --no-default-keyring
Do not add tha default keyrings ta tha list of keyrings. Note that
GnuPG aint gonna operate without any keyrings, so if you use dis option
and do not provide alternate keyrings via \fB--keyring\fR or
\fB--secret-keyring\fR, then GnuPG will still use tha default hood or
secret keyrings.

.TP
.B  --skip-verify
Skip tha signature verification step. This may be
used ta make tha decryption fasta if tha signature
verification aint needed.

.TP
.B  --with-key-data
Print key listings delimited by colons (like \fB--with-colons\fR) and
print tha hood key data.

.TP
.B  --fast-list-mode
Changes tha output of tha list commandz ta work faster; dis be  bigged up 
by leavin some parts empty. Right back up in yo muthafuckin ass. Some applications don't need tha user ID
and tha trust shiznit given up in tha listings. By rockin dis options
they can git a gangbangin' fasta listing. Da exact behaviour of dis option may
change up in future versions.  If yo ass is missin some shiznit, don't
use dis option.

.TP
.B  --no-literal
This aint fo' aiiight use. Use tha source ta peep fo' what tha fuck it might be useful.

.TP
.B  --set-filesize
This aint fo' aiiight use. Use tha source ta peep fo' what tha fuck it might be useful.

.TP
.B  --show-session-key
Display tha session key used fo' one message. Right back up in yo muthafuckin ass. See
\fB--override-session-key\fR fo' tha counterpart of dis option.

We be thinkin dat Key Escrow be a Wack Thing; however tha user should have
the freedom ta decizzle whether ta git thrown up in juvie or ta reveal tha content
of one specific message without compromisin all lyrics ever
encrypted fo' one secret key. DON'T USE IT UNLESS YOU ARE REALLY
FORCED TO DO SO.

.TP
.B  --override-session-key \fBstring\fR
Don't use tha hood key but tha session key \fBstring\fR. Da format
of dis strang is tha same ol' dirty as tha one printed by
\fB--show-session-key\fR. This option is normally not used but comes
handy up in case one of mah thugs forces you ta reveal tha content of a encrypted
message; rockin dis option you can do dis without handin up the
secret key.

.TP
.B  --ask-sig-expire
.TP
.B  --no-ask-sig-expire
When bustin a thugged-out data signature, prompt fo' a expiration time. If this
option aint specified, tha expiration time set via
\fB--default-sig-expire\fR is used. Y'all KNOW dat shit, muthafucka! \fB--no-ask-sig-expire\fR
disablez dis option.

.TP
.B  --default-sig-expire
Da default expiration time ta use fo' signature expiration. I aint talkin' bout chicken n' gravy biatch. Valid
values is "0" fo' no expiration, a number followed by tha letta d
(for days), w (for weeks), m (for months), or y (for years) (for
example "2m" fo' two months, or "5y" fo' five years), or a absolute
date up in tha form YYYY-MM-DD. Defaults ta "0".

.TP
.B  --ask-cert-expire
.TP
.B  --no-ask-cert-expire
When bustin a key signature, prompt fo' a expiration time. If this
option aint specified, tha expiration time set via
\fB--default-cert-expire\fR is used. Y'all KNOW dat shit, muthafucka! \fB--no-ask-cert-expire\fR
disablez dis option.

.TP
.B  --default-cert-expire
Da default expiration time ta use fo' key signature expiration.
Valid joints is "0" fo' no expiration, a number followed by the
letta d (for days), w (for weeks), m (for months), or y (for years)
(for example "2m" fo' two months, or "5y" fo' five years), or an
absolute date up in tha form YYYY-MM-DD. Defaults ta "0".

.TP
.B  --allow-secret-key-import
This be a obsolete option n' aint used anywhere.

.TP
.B  --allow-multiple-lyrics
.TP
.B  --no-allow-multiple-lyrics
Allow processin of multiple OpenPGP lyrics contained up in a single file
or stream.  Some programs dat call GPG is not prepared ta deal with
multiple lyrics bein processed together, so dis option defaults to
no.  Note dat versionz of GPG prior ta 1.4.7 always allowed multiple
lyrics.

Warning: Do not use dis option unless you need it as a temporary
workaround!


.TP
.B  --enable-special-filenames
This options enablez a mode up in which filenamez of tha form
\(oq\fI-&n\fR\(cq, where n be a non-negatizzle decimal number,
refer ta tha file descriptor n n' not ta a gangbangin' file wit dat name.

.TP
.B  --no-expensive-trust-checks
Experimenstrual use only.

.TP
.B  --preserve-permissions
Don't chizzle tha permissionz of a secret keyrin back ta user
read/write only. Use dis option only if you straight-up know what tha fuck yo ass is bustin.

.TP
.B  --default-preference-list \fBstring\fR
Set tha list of default preferences ta \fBstring\fR. This preference
list is used fo' freshly smoked up keys n' becomes tha default fo' "setpref" up in the
edit menu.

.TP
.B  --default-keyserver-url \fBname\fR
Set tha default keyserver URL ta \fBname\fR. This keyserver will be
used as tha keyserver URL when freestylin a freshly smoked up self-signature on a key,
which includes key generation n' changin preferences.

.TP
.B  --list-config
Display various internal configuration parametaz of GnuPG. This option
is intended fo' external programs dat call GnuPG ta big-ass up tasks, and
is thus not generally useful naaahhmean, biatch? See tha file \(oq\fIdoc/DETAILS\fR\(cq up in the
source distribution fo' tha detailz of which configuration shit may be
listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. \fB--list-config\fR is only usable with
\fB--with-colons\fR set.

.TP
.B  --gpgconf-list
This command is similar ta \fB--list-config\fR but up in general only
internally used by tha \fBgpgconf\fR tool.

.TP
.B  --gpgconf-test
This is mo' or less dummy action. I aint talkin' bout chicken n' gravy biatch.  However it parses tha configuration
file n' returns wit failure if tha configuration file would prevent
\fBgpg\fR from startup.  Thus it may be used ta run a syntax check
on tha configuration file.



.SS  Deprecated options
\ 



.TP
.B  --show-photos
.TP
.B  --no-show-photos
Causes \fB--list-keys\fR, \fB--list-sigs\fR,
\fB--list-public-keys\fR, \fB--list-secret-keys\fR, n' verifying
a signature ta also display tha photo ID attached ta tha key, if
any. Right back up in yo muthafuckin ass. See also \fB--photo-viewer\fR. These options is deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use
\fB--list-options [no-]show-photos\fR and/or \fB--verify-options
[no-]show-photos\fR instead.

.TP
.B  --show-keyring
Display tha keyrin name all up in tha head of key listings ta show which
keyrin a given key resides on. I aint talkin' bout chicken n' gravy biatch. This option is deprecated: use
\fB--list-options [no-]show-keyring\fR instead.


.TP
.B  --always-trust
Identical ta \fB--trust-model always\fR. This option is deprecated.

.TP
.B  --show-notation
.TP
.B  --no-show-notation
Show signature notations up in tha \fB--list-sigs\fR or \fB--check-sigs\fR listings
as well as when verifyin a signature wit a notation up in dat shit. These
options is deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use \fB--list-options [no-]show-notation\fR
and/or \fB--verify-options [no-]show-notation\fR instead.

.TP
.B  --show-policy-url
.TP
.B  --no-show-policy-url
Show policy URLs up in tha \fB--list-sigs\fR or \fB--check-sigs\fR
listings as well as when verifyin a signature wit a policy URL in
it. These options is deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use \fB--list-options
[no-]show-policy-url\fR and/or \fB--verify-options
[no-]show-policy-url\fR instead.





.SH EXAMPLES


.TP
.B  gpg -se -r \fBBob\fR \fBfile\fR
sign n' encrypt fo' user Bob

.TP
.B  gpg --clearsign \fBfile\fR
make a cold-ass lil clear text signature

.TP
.B  gpg -sb \fBfile\fR
make a thugged-out detached signature

.TP
.B  gpg -u 0x12345678 -sb \fBfile\fR
make a thugged-out detached signature wit tha key 0x12345678

.TP
.B  gpg --list-keys \fBuser_ID\fR
show keys

.TP
.B  gpg --fingerprint \fBuser_ID\fR
show fingerprint

.TP
.B  gpg --verify \fBpgpfile\fR
.TP
.B  gpg --verify \fBsigfile\fR
Verify tha signature of tha file but do not output tha data. The
second form is used fo' detached signatures, where \fBsigfile\fR
is tha detached signature (either ASCII armored or binary) and
are tha signed data; if dis aint given, tha name of
the file holdin tha signed data is constructed by cuttin off the
extension (".asc" or ".sig") of \fBsigfile\fR or by askin the
user fo' tha filename.



.SH HOW TO SPECIFY A USER ID

There is different ways ta specify a user ID ta GnuPG.  Some of them
are only valid fo' \fBgpg\fR others is only phat for
\fBgpgsm\fR.  Here is tha entire list of ways ta specify a key:


.TP
.B  By key Id. Y'all KNOW dat shit, muthafucka! 
This format is deduced from tha length of tha strang n' its content or
\fB0x\fR prefix. Da key Id of a X.509 certificate is tha low 64 bits
of its SHA-1 fingerprint.  Da use of key Idz is just a gangbangin' finger-lickin' dirty-ass shortcut, for
all automated processin tha fingerprint should be used.

When rockin \fBgpg\fR a exclamation mark (!) may be appended to
force rockin tha specified primary or secondary key n' not ta try and
calculate which primary or secondary key ta use.

Da last four linez of tha example give tha key ID up in they long form as
internally used by tha OpenPGP protocol. Yo ass can peep tha long key ID
usin tha option \fB--with-colons\fR.

.RS 2
.nf
234567C4
0F34E556E
01347A56A
0xAB123456

234AABBCC34567C4
0F323456784E56EAB
01AB3FED1347A5612
0x234AABBCC34567C4
.fi
.RE



.TP
.B  By fingerprint.
This format is deduced from tha length of tha strang n' its content or
the \fB0x\fR prefix.  Note, dat only tha 20 byte version fingerprint
is available wit \fBgpgsm\fR (i.e. tha SHA-1 hash of the
certificate).

When rockin \fBgpg\fR a exclamation mark (!) may be appended to
force rockin tha specified primary or secondary key n' not ta try and
calculate which primary or secondary key ta use.

Da dopest way ta specify a key Id is by rockin tha fingerprint.  This
avoidz any ambiguitizzles up in case dat there be duplicated key IDs.

.RS 2
.nf
1234343434343434C434343434343434
123434343434343C3434343434343734349A3434
0E12343434343434343434EAB3484343434343434
0xE12343434343434343434EAB3484343434343434
.fi
.RE


(\fBgpgsm\fR also accepts colons between each pair of hexadecimal
digits cuz dis is tha de-facto standard on how tha fuck ta present X.509
fingerprints.)

.TP
.B  By exact match on OpenPGP user ID.
This is denoted by a leadin equal sign. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it do not make sense for
X.509 certificates.

.RS 2
.nf
=Heinrich Heine <heinrichh@uni-duesseldorf.de>
.fi
.RE

.TP
.B  By exact match on a email address.
This is indicated by enclosin tha email address up in tha usual way
with left n' right angles.

.RS 2
.nf
<heinrichh@uni-duesseldorf.de>
.fi
.RE


.TP
.B  By word match.
All lyrics must match exactly (not case sensitive) but can step tha fuck up in any
order up in tha user ID or a subjects name.  Lyrics is any sequences of
letters, digits, tha underscore n' all charactas wit bit 7 set.

.RS 2
.nf
+Heinrich Heine duesseldorf
.fi
.RE

.TP
.B  By exact match on tha subjectz DN.
This is indicated by a leadin slash, directly followed by tha RFC-2253
encoded DN of tha subject.  Note dat you can't use tha strang printed
by "gpgsm --list-keys" cuz dat one as been reordered n' modified
for betta readability; use --with-colons ta print tha raw (but standard
escaped) RFC-2253 string

.RS 2
.nf
/CN=Heinrich Heine,O=Poets,L=Paris,C=FR
.fi
.RE

.TP
.B  By exact match on tha issuerz DN.
This is indicated by a leadin hash mark, directly followed by a slash
and then directly followed by tha rfc2253 encoded DN of tha issuer.
This should return tha Root cert of tha issuer n' shit.  See note above.

.RS 2
.nf
#/CN=Root Cert,O=Poets,L=Paris,C=FR
.fi
.RE


.TP
.B  By exact match on serial number n' issuerz DN.
This is indicated by a hash mark, followed by tha hexadecimal
representation of tha serial number, then followed by a slash n' the
RFC-2253 encoded DN of tha issuer n' shit. Right back up in yo muthafuckin ass. See note above.

.RS 2
.nf
#4F03/CN=Root Cert,O=Poets,L=Paris,C=FR
.fi
.RE

.TP
.B  By keygrip
This is indicated by a ampersand followed by tha 40 hex digitz of a
keygrip.  \fBgpgsm\fR prints tha keygrip when rockin tha command
\fB--dump-cert\fR.  It do not yet work fo' OpenPGP keys.

.RS 2
.nf
&D75F22C3F86E355877348498CDC92BD21010A480
.fi
.RE


.TP
.B  By substrin match.
This is tha default mode but applications may wanna explicitly
indicate dis by puttin tha asterisk up in front.  Match aint case
sensitive.

.RS 2
.nf
Heine
*Heine
.fi
.RE



Please note dat our crazy asses have reused tha hash mark identifier which was used
in oldschool GnuPG versions ta indicate tha so called local-id. Y'all KNOW dat shit, muthafucka!  It be not
anymore used n' there should be no conflict when used wit X.509 stuff.

Usin tha RFC-2253 format of DNs has tha drawback dat it is not
possible ta map dem back ta tha original gangsta encoding, however our phat asses don't
have ta do dis cuz our key database stores dis encodin as meta
data.




.SH FILES

There is all dem configuration filez ta control certain aspects of
\fBgpg2\fRz operation. I aint talkin' bout chicken n' gravy biatch. Unless noted, they is expected up in the
current home directory (see: [option --homedir]).


.TP
.B  gpg.conf
This is tha standard configuration file read by \fBgpg2\fR on
startup.  It may contain any valid long option; tha leadin two dashes
may not be entered n' tha option may not be abbreviated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This default
name may be chizzled on tha command line (see: [gpg-option --options]).
Yo ass should backup dis file.


.RE
Note dat on larger installations, it is useful ta put predefined files
into tha directory \(oq\fI/etc/skel/.gnupg/\fR\(cq so dat newly pimped users
start up wit a hustlin configuration.
For existin playas tha a small
helper script is provided ta create these filez (see: [addgnupghome]).

For internal purposes \fBgpg2\fR creates n' maintains all dem other
files; They all live up in in tha current home directory (see: [option
--homedir]).  Only tha \fBgpg2\fR may modify these files.


.TP
.B  ~/.gnupg/pubring.gpg
Da hood keyring.  Yo ass should backup dis file.

.TP
.B  ~/.gnupg/pubring.gpg.lock
Da lock file fo' tha hood keyring.


.TP
.B  ~/.gnupg/secring.gpg
  Da secret keyring.  Yo ass should backup dis file.

.TP
.B  ~/.gnupg/trustdb.gpg
Da trust database.  There is no need ta backup dis file; it is better
to backup tha ballertrust joints (see: [option --export-ballertrust]).

.TP
.B  ~/.gnupg/trustdb.gpg.lock
Da lock file fo' tha trust database.

.TP
.B  ~/.gnupg/random_seed
A file used ta preserve tha state of tha internal random pool.

.TP
.B  ~/.gnupg/secring.gpg.lock
Da lock file fo' tha secret keyring.

.TP
.B  /usr[/local]/share/gnupg/options.skel
Da skeleton options file.

.TP
.B  /usr[/local]/lib/gnupg/
Default location fo' extensions.


.RE
Operation is further controlled by all dem environment variables:


.TP
.B  HOME
Used ta locate tha default home directory.

.TP
.B  GNUPGHOME
If set directory used instead of "~/.gnupg".

.TP
.B  GPG_AGENT_INFO
Used ta locate tha gpg-agent.
  Da value consistz of 3 colon delimited fields: Da first is tha path
  ta tha Unix Domain Socket, tha second tha PID of tha gpg-agent n' the
  protocol version which should be set ta 1. When startin tha gpg-agent
  as busted lyrics bout up in its documentation, dis variable is set ta tha erect
  value. Da option \fB--gpg-agent-info\fR can be used ta override dat shit.

.TP
.B  PINENTRY_USER_DATA
This value is passed via gpg-agent ta pinentry.  It be useful ta convey
extra shiznit ta a cold-ass lil custom pinentry.

.TP
.B  COLUMNS
.TP
.B  LINES
Used ta size some displays ta tha full size of tha screen.


.TP
.B  LANGUAGE
Apart from its use by GNU, it is used up in tha W32 version ta override the
language selection done all up in tha Registry.  If used n' set ta a
valid n' available language name (\fIlangid\fR), tha file wit the
translation is loaded from

\fB\fIgpgdir\fR/gnupg.nls/\fIlangid\fR.mo\fR.  Here \fIgpgdir\fR is the
directory outta which tha gpg binary has been loaded. Y'all KNOW dat shit, muthafucka!  If it can't be
loaded tha Registry is tried n' as last resort tha natizzle Windows
locale system is used.




.SH BUGS

On olda systems dis program should be installed as setuid(root). This
is necessary ta lock memory pages. Lockin memory pages prevents the
operatin system from freestylin memory pages (which may contain
passphrases or other sensitizzle material) ta disk. If you git no
warnin message bout insecure memory yo' operatin system supports
lockin without bein root. Da program drops root privileges as soon
as locked memory be allocated.

Note also dat some systems (especially laptops) have tha mobilitizzle to
``suspend ta disk'' (also known as ``safe chill'' or ``hibernate'').
This writes all memory ta disk before goin tha fuck into a low juice or even
powered off mode.  Unless measures is taken up in tha operatin system
to protect tha saved memory, passphrases or other sensitizzle material
may be recoverable from it later.

Before you report a funky-ass bug you should first search tha mailin list
archives fo' similar problems n' second check whether such a funky-ass bug has
already been reported ta our bug tracker at http://bugs.gnupg.org .


.SH SEE ALSO
\fBgpgv\fR(1),
\fBgpgsm\fR(1),
\fBgpg-agent\fR(1)

Da full documentation fo' dis tool is maintained as a Texinfo manual.
If GnuPG n' tha info program is properly installed at yo' crib, the
command

.RS 2
.nf
info gnupg
.fi
.RE

should hit you wit access ta tha complete manual includin a menu structure
and a index.
