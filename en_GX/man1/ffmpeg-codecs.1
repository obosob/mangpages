.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FFMPEG-CODECS 1"
.TH FFMPEG-CODECS 1 "2015-01-03" " " " "
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
ffmpeg\-codecs \- FFmpeg codecs
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document raps bout tha codecs (decodaz n' encoders) provided by
the libavcodec library.
.SH "CODEC OPTIONS"
.IX Header "CODEC OPTIONS"
libavcodec serves up some generic global options, which can be set on
all tha encodaz n' decoders. In addizzle each codec may support
so-called private options, which is specific fo' a given codec.
.PP
Sometimes, a global option may only affect a specific kind of codec,
and may be unsensical or ignored by another, so you need ta be aware
of tha meanin of tha specified options fo' realz. Also some options are
meant only fo' decodin or encoding.
.PP
Options may be set by specifyin \-\fIoption\fR \fIvalue\fR up in the
FFmpeg tools, or by settin tha value explicitly up in the
\&\f(CW\*(C`AVCodecContext\*(C'\fR options or rockin tha \fIlibavutil/opt.h\fR \s-1API\s0
for programmatic use.
.PP
Da list of supported options follow:
.IP "\fBb\fR \fIinteger\fR \fB(\fR\fIencoding,audio,video\fR\fB)\fR" 4
.IX Item "b integer (encoding,audio,video)"
Set bitrate up in bits/s. Default value is 200K.
.IP "\fBab\fR \fIinteger\fR \fB(\fR\fIencoding,audio\fR\fB)\fR" 4
.IX Item "ab integer (encoding,audio)"
Set audio bitrate (in bits/s). Default value is 128K.
.IP "\fBbt\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "bt integer (encoding,video)"
Set vizzle bitrate tolerizzle (in bits/s). In 1\-pass mode, bitrate
tolerizzle specifies how tha fuck far ratecontrol is willin ta deviate from the
target average bitrate value. This aint related ta min/max
bitrate. Lowerin tolerizzle too much has a adverse effect on quality.
.IP "\fBflags\fR \fIflags\fR \fB(\fR\fIdecoding/encoding,audio,video,subtitles\fR\fB)\fR" 4
.IX Item "flags flags (decoding/encoding,audio,video,subtitles)"
Set generic flags.
.Sp
Possible joints:
.RS 4
.IP "\fBmv4\fR" 4
.IX Item "mv4"
Use four motion vector by macroblock (mpeg4).
.IP "\fBqpel\fR" 4
.IX Item "qpel"
Use 1/4 pel motion compensation.
.IP "\fBloop\fR" 4
.IX Item "loop"
Use loop filter.
.IP "\fBqscale\fR" 4
.IX Item "qscale"
Use fixed qscale.
.IP "\fBgmc\fR" 4
.IX Item "gmc"
Use gmc.
.IP "\fBmv0\fR" 4
.IX Item "mv0"
Always try a mb wit mv=<0,0>.
.IP "\fBinput_preserved\fR" 4
.IX Item "input_preserved"
.PD 0
.IP "\fBpass1\fR" 4
.IX Item "pass1"
.PD
Use internal 2pass ratecontrol up in first pass mode.
.IP "\fBpass2\fR" 4
.IX Item "pass2"
Use internal 2pass ratecontrol up in second pass mode.
.IP "\fBgray\fR" 4
.IX Item "gray"
Only decode/encode grayscale.
.IP "\fBemu_edge\fR" 4
.IX Item "emu_edge"
Do not draw edges.
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
Set error[?] variablez durin encoding.
.IP "\fBtruncated\fR" 4
.IX Item "truncated"
.PD 0
.IP "\fBnaq\fR" 4
.IX Item "naq"
.PD
Normalize adaptizzle quantization.
.IP "\fBildct\fR" 4
.IX Item "ildct"
Use interlaced \s-1DCT.\s0
.IP "\fBlow_delay\fR" 4
.IX Item "low_delay"
Force low delay.
.IP "\fBglobal_header\fR" 4
.IX Item "global_header"
Place global headaz up in extradata instead of every last muthafuckin keyframe.
.IP "\fBbitexact\fR" 4
.IX Item "bitexact"
Use only bitexact shiznit (except (I)DCT).
.IP "\fBaic\fR" 4
.IX Item "aic"
Apply H263 advanced intra codin / mpeg4 ac prediction.
.IP "\fBcbp\fR" 4
.IX Item "cbp"
Deprecated, use mpegvideo private options instead.
.IP "\fBqprd\fR" 4
.IX Item "qprd"
Deprecated, use mpegvideo private options instead.
.IP "\fBilme\fR" 4
.IX Item "ilme"
Apply interlaced motion estimation.
.IP "\fBcgop\fR" 4
.IX Item "cgop"
Use closed gop.
.RE
.RS 4
.RE
.IP "\fBme_method\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "me_method integer (encoding,video)"
Set motion estimation method.
.Sp
Possible joints:
.RS 4
.IP "\fBzero\fR" 4
.IX Item "zero"
zero motion estimation (fastest)
.IP "\fBfull\fR" 4
.IX Item "full"
full motion estimation (slowest)
.IP "\fBepzs\fR" 4
.IX Item "epzs"
\&\s-1EPZS\s0 motion estimation (default)
.IP "\fBesa\fR" 4
.IX Item "esa"
esa motion estimation (alias fo' full)
.IP "\fBtesa\fR" 4
.IX Item "tesa"
tesa motion estimation
.IP "\fBdia\fR" 4
.IX Item "dia"
dia motion estimation (alias fo' epzs)
.IP "\fBlog\fR" 4
.IX Item "log"
log motion estimation
.IP "\fBphods\fR" 4
.IX Item "phods"
phodz motion estimation
.IP "\fBx1\fR" 4
.IX Item "x1"
X1 motion estimation
.IP "\fBhex\fR" 4
.IX Item "hex"
hex motion estimation
.IP "\fBumh\fR" 4
.IX Item "umh"
umh motion estimation
.IP "\fBiter\fR" 4
.IX Item "iter"
ita motion estimation
.RE
.RS 4
.RE
.IP "\fBextradata_size\fR \fIinteger\fR" 4
.IX Item "extradata_size integer"
Set extradata size.
.IP "\fBtime_base\fR \fIrationizzle number\fR" 4
.IX Item "time_base rationizzle number"
Set codec time base.
.Sp
It be tha fundamenstrual unit of time (in seconds) up in termz of which
frame timestamps is represented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. For fixed-fps content, timebase
should be \f(CW\*(C`1 / frame_rate\*(C'\fR n' timestamp increments should be
identically 1.
.IP "\fBg\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "g integer (encoding,video)"
Set tha crew of picture size. Default value is 12.
.IP "\fBar\fR \fIinteger\fR \fB(\fR\fIdecoding/encoding,audio\fR\fB)\fR" 4
.IX Item "ar integer (decoding/encoding,audio)"
Set audio samplin rate (in Hz).
.IP "\fBac\fR \fIinteger\fR \fB(\fR\fIdecoding/encoding,audio\fR\fB)\fR" 4
.IX Item "ac integer (decoding/encoding,audio)"
Set number of audio channels.
.IP "\fBcutoff\fR \fIinteger\fR \fB(\fR\fIencoding,audio\fR\fB)\fR" 4
.IX Item "cutoff integer (encoding,audio)"
Set cutoff bandwidth.
.IP "\fBframe_size\fR \fIinteger\fR \fB(\fR\fIencoding,audio\fR\fB)\fR" 4
.IX Item "frame_size integer (encoding,audio)"
Set audio frame size.
.Sp
Each submitted frame except tha last must contain exactly frame_size
samplez per channel. May be 0 when tha codec has
\&\s-1CODEC_CAP_VARIABLE_FRAME_SIZE\s0 set, up in dat case tha frame size is not
restricted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Well shiiiit, it is set by some decodaz ta indicate constant frame
size.
.IP "\fBframe_number\fR \fIinteger\fR" 4
.IX Item "frame_number integer"
Set tha frame number.
.IP "\fBdelay\fR \fIinteger\fR" 4
.IX Item "delay integer"
.PD 0
.IP "\fBqcomp\fR \fIfloat\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "qcomp float (encoding,video)"
.PD
Set vizzle quantizer scale compression (\s-1VBR\s0). Well shiiiit, it is used as a cold-ass lil constant
in tha ratecontrol equation. I aint talkin' bout chicken n' gravy biatch. Recommended range fo' default rc_eq:
0.0\-1.0.
.IP "\fBqblur\fR \fIfloat\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "qblur float (encoding,video)"
Set vizzle quantizer scale blur (\s-1VBR\s0).
.IP "\fBqmin\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "qmin integer (encoding,video)"
Set min vizzle quantizer scale (\s-1VBR\s0). Must be included between \-1 and
69, default value is 2.
.IP "\fBqmax\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "qmax integer (encoding,video)"
Set max vizzle quantizer scale (\s-1VBR\s0). Must be included between \-1 and
1024, default value is 31.
.IP "\fBqdiff\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "qdiff integer (encoding,video)"
Set max difference between tha quantizer scale (\s-1VBR\s0).
.IP "\fBbf\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "bf integer (encoding,video)"
Set max number of B frames.
.IP "\fBb_qfactor\fR \fIfloat\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "b_qfactor float (encoding,video)"
Set qp factor between P n' B frames.
.IP "\fBrc_strategy\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "rc_strategy integer (encoding,video)"
Set ratecontrol method.
.IP "\fBb_strategy\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "b_strategy integer (encoding,video)"
Set game ta chizzle between I/P/B\-frames.
.IP "\fBps\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "ps integer (encoding,video)"
Set \s-1RTP\s0 payload size up in bytes.
.IP "\fBmv_bits\fR \fIinteger\fR" 4
.IX Item "mv_bits integer"
.PD 0
.IP "\fBheader_bits\fR \fIinteger\fR" 4
.IX Item "header_bits integer"
.IP "\fBi_tex_bits\fR \fIinteger\fR" 4
.IX Item "i_tex_bits integer"
.IP "\fBp_tex_bits\fR \fIinteger\fR" 4
.IX Item "p_tex_bits integer"
.IP "\fBi_count\fR \fIinteger\fR" 4
.IX Item "i_count integer"
.IP "\fBp_count\fR \fIinteger\fR" 4
.IX Item "p_count integer"
.IP "\fBskip_count\fR \fIinteger\fR" 4
.IX Item "skip_count integer"
.IP "\fBmisc_bits\fR \fIinteger\fR" 4
.IX Item "misc_bits integer"
.IP "\fBframe_bits\fR \fIinteger\fR" 4
.IX Item "frame_bits integer"
.IP "\fBcodec_tag\fR \fIinteger\fR" 4
.IX Item "codec_tag integer"
.IP "\fBbug\fR \fIflags\fR \fB(\fR\fIdecoding,video\fR\fB)\fR" 4
.IX Item "bug flags (decoding,video)"
.PD
Workaround not auto detected encoder bugs.
.Sp
Possible joints:
.RS 4
.IP "\fBautodetect\fR" 4
.IX Item "autodetect"
.PD 0
.IP "\fBold_msmpeg4\fR" 4
.IX Item "old_msmpeg4"
.PD
some oldschool lavc generated msmpeg4v3 filez (no autodetection)
.IP "\fBxvid_ilace\fR" 4
.IX Item "xvid_ilace"
Xvid interlacin bug (autodetected if fourcc==XVIX)
.IP "\fBump4\fR" 4
.IX Item "ump4"
(autodetected if fourcc==UMP4)
.IP "\fBno_padding\fR" 4
.IX Item "no_padding"
paddin bug (autodetected)
.IP "\fBamv\fR" 4
.IX Item "amv"
.PD 0
.IP "\fBac_vlc\fR" 4
.IX Item "ac_vlc"
.PD
illegal vlc bug (autodetected per fourcc)
.IP "\fBqpel_chroma\fR" 4
.IX Item "qpel_chroma"
.PD 0
.IP "\fBstd_qpel\fR" 4
.IX Item "std_qpel"
.PD
old standard qpel (autodetected per fourcc/version)
.IP "\fBqpel_chroma2\fR" 4
.IX Item "qpel_chroma2"
.PD 0
.IP "\fBdirect_blocksize\fR" 4
.IX Item "direct_blocksize"
.PD
direct-qpel-blocksize bug (autodetected per fourcc/version)
.IP "\fBedge\fR" 4
.IX Item "edge"
edge paddin bug (autodetected per fourcc/version)
.IP "\fBhpel_chroma\fR" 4
.IX Item "hpel_chroma"
.PD 0
.IP "\fBdc_clip\fR" 4
.IX Item "dc_clip"
.IP "\fBms\fR" 4
.IX Item "ms"
.PD
Workaround various bugs up in microsizzlez fucked up decoders.
.IP "\fBtrunc\fR" 4
.IX Item "trunc"
trancated frames
.RE
.RS 4
.RE
.IP "\fBlelim\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "lelim integer (encoding,video)"
Set single coefficient elimination threshold fo' luminizzle (negative
values also consider \s-1DC\s0 coefficient).
.IP "\fBcelim\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "celim integer (encoding,video)"
Set single coefficient elimination threshold fo' chrominizzle (negative
values also consider dc coefficient)
.IP "\fBstrict\fR \fIinteger\fR \fB(\fR\fIdecoding/encoding,audio,video\fR\fB)\fR" 4
.IX Item "strict integer (decoding/encoding,audio,video)"
Specify how tha fuck strictly ta follow tha standards.
.Sp
Possible joints:
.RS 4
.IP "\fBvery\fR" 4
.IX Item "very"
strictly conform ta a olda mo' strict version of tha spec or reference software
.IP "\fBstrict\fR" 4
.IX Item "strict"
strictly conform ta all tha thangs up in tha spec no matta what tha fuck consequences
.IP "\fBnormal\fR" 4
.IX Item "normal"
.PD 0
.IP "\fBunofficial\fR" 4
.IX Item "unofficial"
.PD
allow unstraight-up legit extensions
.IP "\fBexperimental\fR" 4
.IX Item "experimental"
allow non standardized experimenstrual thangs, experimental
(unfinished/work up in progress/not well tested) decodaz n' encoders.
Note: experimenstrual decodaz can pose a securitizzle risk, do not use dis for
decodin untrusted input.
.RE
.RS 4
.RE
.IP "\fBb_qoffset\fR \fIfloat\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "b_qoffset float (encoding,video)"
Set \s-1QP\s0 offset between P n' B frames.
.IP "\fBerr_detect\fR \fIflags\fR \fB(\fR\fIdecoding,audio,video\fR\fB)\fR" 4
.IX Item "err_detect flags (decoding,audio,video)"
Set error detection flags.
.Sp
Possible joints:
.RS 4
.IP "\fBcrccheck\fR" 4
.IX Item "crccheck"
verify embedded CRCs
.IP "\fBbitstream\fR" 4
.IX Item "bitstream"
detect bitstream justification deviations
.IP "\fBbuffer\fR" 4
.IX Item "buffer"
detect improper bitstream length
.IP "\fBexplode\fR" 4
.IX Item "explode"
abort decodin on minor error detection
.IP "\fBcareful\fR" 4
.IX Item "careful"
consider thangs dat violate tha spec n' aint been peeped up in tha wild as errors
.IP "\fBcompliant\fR" 4
.IX Item "compliant"
consider all spec non compliancies as errors
.IP "\fBaggressive\fR" 4
.IX Item "aggressive"
consider thangs dat a sane encoder should not do as a error
.RE
.RS 4
.RE
.IP "\fBhas_b_frames\fR \fIinteger\fR" 4
.IX Item "has_b_frames integer"
.PD 0
.IP "\fBblock_align\fR \fIinteger\fR" 4
.IX Item "block_align integer"
.IP "\fBmpeg_quant\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "mpeg_quant integer (encoding,video)"
.PD
Use \s-1MPEG\s0 quantizers instead of H.263.
.IP "\fBqsquish\fR \fIfloat\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "qsquish float (encoding,video)"
How tha fuck ta keep quantizer between qmin n' qmax (0 = clip, 1 = use
differentiable function).
.IP "\fBrc_qmod_amp\fR \fIfloat\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "rc_qmod_amp float (encoding,video)"
Set experimenstrual quantizer modulation.
.IP "\fBrc_qmod_freq\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "rc_qmod_freq integer (encoding,video)"
Set experimenstrual quantizer modulation.
.IP "\fBrc_override_count\fR \fIinteger\fR" 4
.IX Item "rc_override_count integer"
.PD 0
.IP "\fBrc_eq\fR \fIstring\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "rc_eq strang (encoding,video)"
.PD
Set rate control equation. I aint talkin' bout chicken n' gravy biatch. When computin tha expression, besides the
standard functions defined up in tha section 'Expression Evaluation', the
followin functions is available: bits2qp(bits), qp2bits(qp) fo' realz. Also
the followin constants is available: iTex pTex tex mv fCode iCount
mcVar var isI isP isB avgQP qComp avgIITex avgPITex avgPPTex avgBPTex
avgTex.
.IP "\fBmaxrate\fR \fIinteger\fR \fB(\fR\fIencoding,audio,video\fR\fB)\fR" 4
.IX Item "maxrate integer (encoding,audio,video)"
Set max bitrate tolerizzle (in bits/s). Requires bufsize ta be set.
.IP "\fBminrate\fR \fIinteger\fR \fB(\fR\fIencoding,audio,video\fR\fB)\fR" 4
.IX Item "minrate integer (encoding,audio,video)"
Set min bitrate tolerizzle (in bits/s). Most useful up in settin up a \s-1CBR\s0
encode. Well shiiiit, it iz of lil use elsewise.
.IP "\fBbufsize\fR \fIinteger\fR \fB(\fR\fIencoding,audio,video\fR\fB)\fR" 4
.IX Item "bufsize integer (encoding,audio,video)"
Set ratecontrol buffer size (in bits).
.IP "\fBrc_buf_aggressivity\fR \fIfloat\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "rc_buf_aggressivitizzle float (encoding,video)"
Currently useless.
.IP "\fBi_qfactor\fR \fIfloat\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "i_qfactor float (encoding,video)"
Set \s-1QP\s0 factor between P n' I frames.
.IP "\fBi_qoffset\fR \fIfloat\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "i_qoffset float (encoding,video)"
Set \s-1QP\s0 offset between P n' I frames.
.IP "\fBrc_init_cplx\fR \fIfloat\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "rc_init_cplx float (encoding,video)"
Set initial complexitizzle fo' 1\-pass encoding.
.IP "\fBdct\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "dct integer (encoding,video)"
Set \s-1DCT\s0 algorithm.
.Sp
Possible joints:
.RS 4
.IP "\fBauto\fR" 4
.IX Item "auto"
autoselect a phat one (default)
.IP "\fBfastint\fR" 4
.IX Item "fastint"
fast integer
.IP "\fBint\fR" 4
.IX Item "int"
accurate integer
.IP "\fBmmx\fR" 4
.IX Item "mmx"
.PD 0
.IP "\fBaltivec\fR" 4
.IX Item "altivec"
.IP "\fBfaan\fR" 4
.IX Item "faan"
.PD
floatin point \s-1AAN DCT\s0
.RE
.RS 4
.RE
.IP "\fBlumi_mask\fR \fIfloat\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "lumi_mask float (encoding,video)"
Compress bright areas stronger than medium ones.
.IP "\fBtcplx_mask\fR \fIfloat\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "tcplx_mask float (encoding,video)"
Set temporal complexitizzle masking.
.IP "\fBscplx_mask\fR \fIfloat\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "scplx_mask float (encoding,video)"
Set spatial complexitizzle masking.
.IP "\fBp_mask\fR \fIfloat\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "p_mask float (encoding,video)"
Set inta masking.
.IP "\fBdark_mask\fR \fIfloat\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "dark_mask float (encoding,video)"
Compress dark areas stronger than medium ones.
.IP "\fBidct\fR \fIinteger\fR \fB(\fR\fIdecoding/encoding,video\fR\fB)\fR" 4
.IX Item "idct integer (decoding/encoding,video)"
Select \s-1IDCT\s0 implementation.
.Sp
Possible joints:
.RS 4
.IP "\fBauto\fR" 4
.IX Item "auto"
.PD 0
.IP "\fBint\fR" 4
.IX Item "int"
.IP "\fBsimple\fR" 4
.IX Item "simple"
.IP "\fBsimplemmx\fR" 4
.IX Item "simplemmx"
.IP "\fBarm\fR" 4
.IX Item "arm"
.IP "\fBaltivec\fR" 4
.IX Item "altivec"
.IP "\fBsh4\fR" 4
.IX Item "sh4"
.IP "\fBsimplearm\fR" 4
.IX Item "simplearm"
.IP "\fBsimplearmv5te\fR" 4
.IX Item "simplearmv5te"
.IP "\fBsimplearmv6\fR" 4
.IX Item "simplearmv6"
.IP "\fBsimpleneon\fR" 4
.IX Item "simpleneon"
.IP "\fBsimplealpha\fR" 4
.IX Item "simplealpha"
.IP "\fBipp\fR" 4
.IX Item "ipp"
.IP "\fBxvidmmx\fR" 4
.IX Item "xvidmmx"
.IP "\fBfaani\fR" 4
.IX Item "faani"
.PD
floatin point \s-1AAN IDCT\s0
.RE
.RS 4
.RE
.IP "\fBslice_count\fR \fIinteger\fR" 4
.IX Item "slice_count integer"
.PD 0
.IP "\fBec\fR \fIflags\fR \fB(\fR\fIdecoding,video\fR\fB)\fR" 4
.IX Item "ec flags (decoding,video)"
.PD
Set error concealment game.
.Sp
Possible joints:
.RS 4
.IP "\fBguess_mvs\fR" 4
.IX Item "guess_mvs"
iteratizzle motion vector (\s-1MV\s0) search (slow)
.IP "\fBdeblock\fR" 4
.IX Item "deblock"
use phat deblock filta fo' damaged MBs
.RE
.RS 4
.RE
.IP "\fBbits_per_coded_sample\fR \fIinteger\fR" 4
.IX Item "bits_per_coded_sample integer"
.PD 0
.IP "\fBpred\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "pred integer (encoding,video)"
.PD
Set prediction method.
.Sp
Possible joints:
.RS 4
.IP "\fBleft\fR" 4
.IX Item "left"
.PD 0
.IP "\fBplane\fR" 4
.IX Item "plane"
.IP "\fBmedian\fR" 4
.IX Item "median"
.RE
.RS 4
.RE
.IP "\fBaspect\fR \fIrationizzle number\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "aspect rationizzle number (encoding,video)"
.PD
Set sample aspect ratio.
.IP "\fBdebug\fR \fIflags\fR \fB(\fR\fIdecoding/encoding,audio,video,subtitles\fR\fB)\fR" 4
.IX Item "debug flags (decoding/encoding,audio,video,subtitles)"
Print specific debug info.
.Sp
Possible joints:
.RS 4
.IP "\fBpict\fR" 4
.IX Item "pict"
picture info
.IP "\fBrc\fR" 4
.IX Item "rc"
rate control
.IP "\fBbitstream\fR" 4
.IX Item "bitstream"
.PD 0
.IP "\fBmb_type\fR" 4
.IX Item "mb_type"
.PD
macroblock (\s-1MB\s0) type
.IP "\fBqp\fR" 4
.IX Item "qp"
per-block quantization parameta (\s-1QP\s0)
.IP "\fBmv\fR" 4
.IX Item "mv"
motion vector
.IP "\fBdct_coeff\fR" 4
.IX Item "dct_coeff"
.PD 0
.IP "\fBskip\fR" 4
.IX Item "skip"
.IP "\fBstartcode\fR" 4
.IX Item "startcode"
.IP "\fBpts\fR" 4
.IX Item "pts"
.IP "\fBer\fR" 4
.IX Item "er"
.PD
error recognition
.IP "\fBmmco\fR" 4
.IX Item "mmco"
memory pimpment control operations (H.264)
.IP "\fBbugs\fR" 4
.IX Item "bugs"
.PD 0
.IP "\fBvis_qp\fR" 4
.IX Item "vis_qp"
.PD
visualize quantization parameta (\s-1QP\s0), lower \s-1QP\s0 is tinted greener
.IP "\fBvis_mb_type\fR" 4
.IX Item "vis_mb_type"
visualize block types
.IP "\fBbuffers\fR" 4
.IX Item "buffers"
picture buffer allocations
.IP "\fBthread_ops\fR" 4
.IX Item "thread_ops"
threadin operations
.RE
.RS 4
.RE
.IP "\fBvismv\fR \fIinteger\fR \fB(\fR\fIdecoding,video\fR\fB)\fR" 4
.IX Item "vismv integer (decoding,video)"
Visualize motion vectors (MVs).
.Sp
Possible joints:
.RS 4
.IP "\fBpf\fR" 4
.IX Item "pf"
forward predicted MVz of P\-frames
.IP "\fBbf\fR" 4
.IX Item "bf"
forward predicted MVz of B\-frames
.IP "\fBbb\fR" 4
.IX Item "bb"
backward predicted MVz of B\-frames
.RE
.RS 4
.RE
.IP "\fBcmp\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "cmp integer (encoding,video)"
Set full pel me compare function.
.Sp
Possible joints:
.RS 4
.IP "\fBsad\fR" 4
.IX Item "sad"
sum of absolute differences, fast (default)
.IP "\fBsse\fR" 4
.IX Item "sse"
sum of squared errors
.IP "\fBsatd\fR" 4
.IX Item "satd"
sum of absolute Hadamard transformed differences
.IP "\fBdct\fR" 4
.IX Item "dct"
sum of absolute \s-1DCT\s0 transformed differences
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
sum of squared quantization errors (avoid, low quality)
.IP "\fBbit\fR" 4
.IX Item "bit"
number of bits needed fo' tha block
.IP "\fBrd\fR" 4
.IX Item "rd"
rate distortion optimal, slow
.IP "\fBzero\fR" 4
.IX Item "zero"
0
.IP "\fBvsad\fR" 4
.IX Item "vsad"
sum of absolute vertical differences
.IP "\fBvsse\fR" 4
.IX Item "vsse"
sum of squared vertical differences
.IP "\fBnsse\fR" 4
.IX Item "nsse"
noise preservin sum of squared differences
.IP "\fBw53\fR" 4
.IX Item "w53"
5/3 wavelet, only used up in snow
.IP "\fBw97\fR" 4
.IX Item "w97"
9/7 wavelet, only used up in snow
.IP "\fBdctmax\fR" 4
.IX Item "dctmax"
.PD 0
.IP "\fBchroma\fR" 4
.IX Item "chroma"
.RE
.RS 4
.RE
.IP "\fBsubcmp\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "subcmp integer (encoding,video)"
.PD
Set sub pel me compare function.
.Sp
Possible joints:
.RS 4
.IP "\fBsad\fR" 4
.IX Item "sad"
sum of absolute differences, fast (default)
.IP "\fBsse\fR" 4
.IX Item "sse"
sum of squared errors
.IP "\fBsatd\fR" 4
.IX Item "satd"
sum of absolute Hadamard transformed differences
.IP "\fBdct\fR" 4
.IX Item "dct"
sum of absolute \s-1DCT\s0 transformed differences
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
sum of squared quantization errors (avoid, low quality)
.IP "\fBbit\fR" 4
.IX Item "bit"
number of bits needed fo' tha block
.IP "\fBrd\fR" 4
.IX Item "rd"
rate distortion optimal, slow
.IP "\fBzero\fR" 4
.IX Item "zero"
0
.IP "\fBvsad\fR" 4
.IX Item "vsad"
sum of absolute vertical differences
.IP "\fBvsse\fR" 4
.IX Item "vsse"
sum of squared vertical differences
.IP "\fBnsse\fR" 4
.IX Item "nsse"
noise preservin sum of squared differences
.IP "\fBw53\fR" 4
.IX Item "w53"
5/3 wavelet, only used up in snow
.IP "\fBw97\fR" 4
.IX Item "w97"
9/7 wavelet, only used up in snow
.IP "\fBdctmax\fR" 4
.IX Item "dctmax"
.PD 0
.IP "\fBchroma\fR" 4
.IX Item "chroma"
.RE
.RS 4
.RE
.IP "\fBmbcmp\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "mbcmp integer (encoding,video)"
.PD
Set macroblock compare function.
.Sp
Possible joints:
.RS 4
.IP "\fBsad\fR" 4
.IX Item "sad"
sum of absolute differences, fast (default)
.IP "\fBsse\fR" 4
.IX Item "sse"
sum of squared errors
.IP "\fBsatd\fR" 4
.IX Item "satd"
sum of absolute Hadamard transformed differences
.IP "\fBdct\fR" 4
.IX Item "dct"
sum of absolute \s-1DCT\s0 transformed differences
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
sum of squared quantization errors (avoid, low quality)
.IP "\fBbit\fR" 4
.IX Item "bit"
number of bits needed fo' tha block
.IP "\fBrd\fR" 4
.IX Item "rd"
rate distortion optimal, slow
.IP "\fBzero\fR" 4
.IX Item "zero"
0
.IP "\fBvsad\fR" 4
.IX Item "vsad"
sum of absolute vertical differences
.IP "\fBvsse\fR" 4
.IX Item "vsse"
sum of squared vertical differences
.IP "\fBnsse\fR" 4
.IX Item "nsse"
noise preservin sum of squared differences
.IP "\fBw53\fR" 4
.IX Item "w53"
5/3 wavelet, only used up in snow
.IP "\fBw97\fR" 4
.IX Item "w97"
9/7 wavelet, only used up in snow
.IP "\fBdctmax\fR" 4
.IX Item "dctmax"
.PD 0
.IP "\fBchroma\fR" 4
.IX Item "chroma"
.RE
.RS 4
.RE
.IP "\fBildctcmp\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "ildctcmp integer (encoding,video)"
.PD
Set interlaced dct compare function.
.Sp
Possible joints:
.RS 4
.IP "\fBsad\fR" 4
.IX Item "sad"
sum of absolute differences, fast (default)
.IP "\fBsse\fR" 4
.IX Item "sse"
sum of squared errors
.IP "\fBsatd\fR" 4
.IX Item "satd"
sum of absolute Hadamard transformed differences
.IP "\fBdct\fR" 4
.IX Item "dct"
sum of absolute \s-1DCT\s0 transformed differences
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
sum of squared quantization errors (avoid, low quality)
.IP "\fBbit\fR" 4
.IX Item "bit"
number of bits needed fo' tha block
.IP "\fBrd\fR" 4
.IX Item "rd"
rate distortion optimal, slow
.IP "\fBzero\fR" 4
.IX Item "zero"
0
.IP "\fBvsad\fR" 4
.IX Item "vsad"
sum of absolute vertical differences
.IP "\fBvsse\fR" 4
.IX Item "vsse"
sum of squared vertical differences
.IP "\fBnsse\fR" 4
.IX Item "nsse"
noise preservin sum of squared differences
.IP "\fBw53\fR" 4
.IX Item "w53"
5/3 wavelet, only used up in snow
.IP "\fBw97\fR" 4
.IX Item "w97"
9/7 wavelet, only used up in snow
.IP "\fBdctmax\fR" 4
.IX Item "dctmax"
.PD 0
.IP "\fBchroma\fR" 4
.IX Item "chroma"
.RE
.RS 4
.RE
.IP "\fBdia_size\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "dia_size integer (encoding,video)"
.PD
Set diamond type & size fo' motion estimation.
.IP "\fBlast_pred\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "last_pred integer (encoding,video)"
Set amount of motion predictors from tha previous frame.
.IP "\fBpreme\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "preme integer (encoding,video)"
Set pre motion estimation.
.IP "\fBprecmp\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "precmp integer (encoding,video)"
Set pre motion estimation compare function.
.Sp
Possible joints:
.RS 4
.IP "\fBsad\fR" 4
.IX Item "sad"
sum of absolute differences, fast (default)
.IP "\fBsse\fR" 4
.IX Item "sse"
sum of squared errors
.IP "\fBsatd\fR" 4
.IX Item "satd"
sum of absolute Hadamard transformed differences
.IP "\fBdct\fR" 4
.IX Item "dct"
sum of absolute \s-1DCT\s0 transformed differences
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
sum of squared quantization errors (avoid, low quality)
.IP "\fBbit\fR" 4
.IX Item "bit"
number of bits needed fo' tha block
.IP "\fBrd\fR" 4
.IX Item "rd"
rate distortion optimal, slow
.IP "\fBzero\fR" 4
.IX Item "zero"
0
.IP "\fBvsad\fR" 4
.IX Item "vsad"
sum of absolute vertical differences
.IP "\fBvsse\fR" 4
.IX Item "vsse"
sum of squared vertical differences
.IP "\fBnsse\fR" 4
.IX Item "nsse"
noise preservin sum of squared differences
.IP "\fBw53\fR" 4
.IX Item "w53"
5/3 wavelet, only used up in snow
.IP "\fBw97\fR" 4
.IX Item "w97"
9/7 wavelet, only used up in snow
.IP "\fBdctmax\fR" 4
.IX Item "dctmax"
.PD 0
.IP "\fBchroma\fR" 4
.IX Item "chroma"
.RE
.RS 4
.RE
.IP "\fBpre_dia_size\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "pre_dia_size integer (encoding,video)"
.PD
Set diamond type & size fo' motion estimation pre-pass.
.IP "\fBsubq\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "subq integer (encoding,video)"
Set sub pel motion estimation quality.
.IP "\fBdtg_active_format\fR \fIinteger\fR" 4
.IX Item "dtg_active_format integer"
.PD 0
.IP "\fBme_range\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "me_range integer (encoding,video)"
.PD
Set limit motion vectors range (1023 fo' DivX playa).
.IP "\fBibias\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "ibias integer (encoding,video)"
Set intra quant bias.
.IP "\fBpbias\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "pbias integer (encoding,video)"
Set inta quant bias.
.IP "\fBcolor_table_id\fR \fIinteger\fR" 4
.IX Item "color_table_id integer"
.PD 0
.IP "\fBglobal_quality\fR \fIinteger\fR \fB(\fR\fIencoding,audio,video\fR\fB)\fR" 4
.IX Item "global_qualitizzle integer (encoding,audio,video)"
.IP "\fBcoder\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "coder integer (encoding,video)"
.PD
Possible joints:
.RS 4
.IP "\fBvlc\fR" 4
.IX Item "vlc"
variable length coder / huffman coder
.IP "\fBac\fR" 4
.IX Item "ac"
arithmetic coder
.IP "\fBraw\fR" 4
.IX Item "raw"
raw (no encoding)
.IP "\fBrle\fR" 4
.IX Item "rle"
run-length coder
.IP "\fBdeflate\fR" 4
.IX Item "deflate"
deflate-based coder
.RE
.RS 4
.RE
.IP "\fBcontext\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "context integer (encoding,video)"
Set context model.
.IP "\fBslice_flags\fR \fIinteger\fR" 4
.IX Item "slice_flags integer"
.PD 0
.IP "\fBxvmc_acceleration\fR \fIinteger\fR" 4
.IX Item "xvmc_acceleration integer"
.IP "\fBmbd\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "mbd integer (encoding,video)"
.PD
Set macroblock decision algorithm (high qualitizzle mode).
.Sp
Possible joints:
.RS 4
.IP "\fBsimple\fR" 4
.IX Item "simple"
use mbcmp (default)
.IP "\fBbits\fR" 4
.IX Item "bits"
use fewest bits
.IP "\fBrd\fR" 4
.IX Item "rd"
use dopest rate distortion
.RE
.RS 4
.RE
.IP "\fBstream_codec_tag\fR \fIinteger\fR" 4
.IX Item "stream_codec_tag integer"
.PD 0
.IP "\fBsc_threshold\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "sc_threshold integer (encoding,video)"
.PD
Set scene chizzle threshold.
.IP "\fBlmin\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "lmin integer (encoding,video)"
Set min lagrange factor (\s-1VBR\s0).
.IP "\fBlmax\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "lmax integer (encoding,video)"
Set max lagrange factor (\s-1VBR\s0).
.IP "\fBnr\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "nr integer (encoding,video)"
Set noise reduction.
.IP "\fBrc_init_occupancy\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "rc_init_occupancy integer (encoding,video)"
Set number of bits which should be loaded tha fuck into tha rc buffer before
decodin starts.
.IP "\fBflags2\fR \fIflags\fR \fB(\fR\fIdecoding/encoding,audio,video\fR\fB)\fR" 4
.IX Item "flags2 flags (decoding/encoding,audio,video)"
Possible joints:
.RS 4
.IP "\fBfast\fR" 4
.IX Item "fast"
Allow non spec compliant speedup tricks.
.IP "\fBsgop\fR" 4
.IX Item "sgop"
Deprecated, use mpegvideo private options instead.
.IP "\fBnoout\fR" 4
.IX Item "noout"
Skip bitstream encoding.
.IP "\fBignorecrop\fR" 4
.IX Item "ignorecrop"
Ignore croppin shiznit from sps.
.IP "\fBlocal_header\fR" 4
.IX Item "local_header"
Place global headaz at every last muthafuckin keyframe instead of up in extradata.
.IP "\fBchunks\fR" 4
.IX Item "chunks"
Frame data might be split tha fuck into multiple chunks.
.IP "\fBshowall\fR" 4
.IX Item "showall"
Show all frames before tha straight-up original gangsta keyframe.
.IP "\fBskiprd\fR" 4
.IX Item "skiprd"
Deprecated, use mpegvideo private options instead.
.RE
.RS 4
.RE
.IP "\fBerror\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "error integer (encoding,video)"
.PD 0
.IP "\fBqns\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "qns integer (encoding,video)"
.PD
Deprecated, use mpegvideo private options instead.
.IP "\fBthreads\fR \fIinteger\fR \fB(\fR\fIdecoding/encoding,video\fR\fB)\fR" 4
.IX Item "threadz integer (decoding/encoding,video)"
Possible joints:
.RS 4
.IP "\fBauto\fR" 4
.IX Item "auto"
detect a phat number of threads
.RE
.RS 4
.RE
.IP "\fBme_threshold\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "me_threshold integer (encoding,video)"
Set motion estimation threshold.
.IP "\fBmb_threshold\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "mb_threshold integer (encoding,video)"
Set macroblock threshold.
.IP "\fBdc\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "dc integer (encoding,video)"
Set intra_dc_precision.
.IP "\fBnssew\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "nssew integer (encoding,video)"
Set nsse weight.
.IP "\fBskip_top\fR \fIinteger\fR \fB(\fR\fIdecoding,video\fR\fB)\fR" 4
.IX Item "skip_top integer (decoding,video)"
Set number of macroblock rows all up in tha top which is skipped.
.IP "\fBskip_bottom\fR \fIinteger\fR \fB(\fR\fIdecoding,video\fR\fB)\fR" 4
.IX Item "skip_bottom integer (decoding,video)"
Set number of macroblock rows all up in tha bottom which is skipped.
.IP "\fBprofile\fR \fIinteger\fR \fB(\fR\fIencoding,audio,video\fR\fB)\fR" 4
.IX Item "profile integer (encoding,audio,video)"
Possible joints:
.RS 4
.IP "\fBunknown\fR" 4
.IX Item "unknown"
.PD 0
.IP "\fBaac_main\fR" 4
.IX Item "aac_main"
.IP "\fBaac_low\fR" 4
.IX Item "aac_low"
.IP "\fBaac_ssr\fR" 4
.IX Item "aac_ssr"
.IP "\fBaac_ltp\fR" 4
.IX Item "aac_ltp"
.IP "\fBaac_he\fR" 4
.IX Item "aac_he"
.IP "\fBaac_he_v2\fR" 4
.IX Item "aac_he_v2"
.IP "\fBaac_ld\fR" 4
.IX Item "aac_ld"
.IP "\fBaac_eld\fR" 4
.IX Item "aac_eld"
.IP "\fBmpeg2_aac_low\fR" 4
.IX Item "mpeg2_aac_low"
.IP "\fBmpeg2_aac_he\fR" 4
.IX Item "mpeg2_aac_he"
.IP "\fBdts\fR" 4
.IX Item "dts"
.IP "\fBdts_es\fR" 4
.IX Item "dts_es"
.IP "\fBdts_96_24\fR" 4
.IX Item "dts_96_24"
.IP "\fBdts_hd_hra\fR" 4
.IX Item "dts_hd_hra"
.IP "\fBdts_hd_ma\fR" 4
.IX Item "dts_hd_ma"
.RE
.RS 4
.RE
.IP "\fBlevel\fR \fIinteger\fR \fB(\fR\fIencoding,audio,video\fR\fB)\fR" 4
.IX Item "level integer (encoding,audio,video)"
.PD
Possible joints:
.RS 4
.IP "\fBunknown\fR" 4
.IX Item "unknown"
.RE
.RS 4
.RE
.PD 0
.IP "\fBlowres\fR \fIinteger\fR \fB(\fR\fIdecoding,audio,video\fR\fB)\fR" 4
.IX Item "lowres integer (decoding,audio,video)"
.PD
Decode at 1= 1/2, 2=1/4, 3=1/8 resolutions.
.IP "\fBskip_threshold\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "skip_threshold integer (encoding,video)"
Set frame skip threshold.
.IP "\fBskip_factor\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "skip_factor integer (encoding,video)"
Set frame skip factor.
.IP "\fBskip_exp\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "skip_exp integer (encoding,video)"
Set frame skip exponent.
.IP "\fBskipcmp\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "skipcmp integer (encoding,video)"
Set frame skip compare function.
.Sp
Possible joints:
.RS 4
.IP "\fBsad\fR" 4
.IX Item "sad"
sum of absolute differences, fast (default)
.IP "\fBsse\fR" 4
.IX Item "sse"
sum of squared errors
.IP "\fBsatd\fR" 4
.IX Item "satd"
sum of absolute Hadamard transformed differences
.IP "\fBdct\fR" 4
.IX Item "dct"
sum of absolute \s-1DCT\s0 transformed differences
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
sum of squared quantization errors (avoid, low quality)
.IP "\fBbit\fR" 4
.IX Item "bit"
number of bits needed fo' tha block
.IP "\fBrd\fR" 4
.IX Item "rd"
rate distortion optimal, slow
.IP "\fBzero\fR" 4
.IX Item "zero"
0
.IP "\fBvsad\fR" 4
.IX Item "vsad"
sum of absolute vertical differences
.IP "\fBvsse\fR" 4
.IX Item "vsse"
sum of squared vertical differences
.IP "\fBnsse\fR" 4
.IX Item "nsse"
noise preservin sum of squared differences
.IP "\fBw53\fR" 4
.IX Item "w53"
5/3 wavelet, only used up in snow
.IP "\fBw97\fR" 4
.IX Item "w97"
9/7 wavelet, only used up in snow
.IP "\fBdctmax\fR" 4
.IX Item "dctmax"
.PD 0
.IP "\fBchroma\fR" 4
.IX Item "chroma"
.RE
.RS 4
.RE
.IP "\fBborder_mask\fR \fIfloat\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "border_mask float (encoding,video)"
.PD
Increase tha quantizer fo' macroblocks close ta borders.
.IP "\fBmblmin\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "mblmin integer (encoding,video)"
Set min macroblock lagrange factor (\s-1VBR\s0).
.IP "\fBmblmax\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "mblmax integer (encoding,video)"
Set max macroblock lagrange factor (\s-1VBR\s0).
.IP "\fBmepc\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "mepc integer (encoding,video)"
Set motion estimation bitrate penalty compensation (1.0 = 256).
.IP "\fBskip_loop_filter\fR \fIinteger\fR \fB(\fR\fIdecoding,video\fR\fB)\fR" 4
.IX Item "skip_loop_filta integer (decoding,video)"
.PD 0
.IP "\fBskip_idct\fR        \fIinteger\fR \fB(\fR\fIdecoding,video\fR\fB)\fR" 4
.IX Item "skip_idct integer (decoding,video)"
.IP "\fBskip_frame\fR       \fIinteger\fR \fB(\fR\fIdecoding,video\fR\fB)\fR" 4
.IX Item "skip_frame integer (decoding,video)"
.PD
Make decoder discard processin dependin on tha frame type selected
by tha option value.
.Sp
\&\fBskip_loop_filter\fR skips frame loop filtering, \fBskip_idct\fR
skips frame IDCT/dequantization, \fBskip_frame\fR skips decoding.
.Sp
Possible joints:
.RS 4
.IP "\fBnone\fR" 4
.IX Item "none"
Discard no frame.
.IP "\fBdefault\fR" 4
.IX Item "default"
Discard useless frames like 0\-sized frames.
.IP "\fBnoref\fR" 4
.IX Item "noref"
Discard all non-reference frames.
.IP "\fBbidir\fR" 4
.IX Item "bidir"
Discard all bidirectionizzle frames.
.IP "\fBnokey\fR" 4
.IX Item "nokey"
Discard all frames excepts keyframes.
.IP "\fBall\fR" 4
.IX Item "all"
Discard all frames.
.RE
.RS 4
.Sp
Default value is \fBdefault\fR.
.RE
.IP "\fBbidir_refine\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "bidir_refine integer (encoding,video)"
Refine tha two motion vectors used up in bidirectionizzle macroblocks.
.IP "\fBbrd_scale\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "brd_scale integer (encoding,video)"
Downscale frames fo' dynamic B\-frame decision.
.IP "\fBkeyint_min\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "keyint_min integer (encoding,video)"
Set minimum interval between IDR-frames.
.IP "\fBrefs\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "refs integer (encoding,video)"
Set reference frames ta consider fo' motion compensation.
.IP "\fBchromaoffset\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "chromaoffset integer (encoding,video)"
Set chroma qp offset from luma.
.IP "\fBtrellis\fR \fIinteger\fR \fB(\fR\fIencoding,audio,video\fR\fB)\fR" 4
.IX Item "trellis integer (encoding,audio,video)"
Set rate-distortion optimal quantization.
.IP "\fBsc_factor\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "sc_factor integer (encoding,video)"
Set value multiplied by qscale fo' each frame n' added to
scene_change_score.
.IP "\fBmv0_threshold\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "mv0_threshold integer (encoding,video)"
.PD 0
.IP "\fBb_sensitivity\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "b_sensitivitizzle integer (encoding,video)"
.PD
Adjust sensitivitizzle of b_frame_strategy 1.
.IP "\fBcompression_level\fR \fIinteger\fR \fB(\fR\fIencoding,audio,video\fR\fB)\fR" 4
.IX Item "compression_level integer (encoding,audio,video)"
.PD 0
.IP "\fBmin_prediction_order\fR \fIinteger\fR \fB(\fR\fIencoding,audio\fR\fB)\fR" 4
.IX Item "min_prediction_order integer (encoding,audio)"
.IP "\fBmax_prediction_order\fR \fIinteger\fR \fB(\fR\fIencoding,audio\fR\fB)\fR" 4
.IX Item "max_prediction_order integer (encoding,audio)"
.IP "\fBtimecode_frame_start\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "timecode_frame_start integer (encoding,video)"
.PD
Set \s-1GOP\s0 timecode frame start number, up in non drop frame format.
.IP "\fBrequest_channels\fR \fIinteger\fR \fB(\fR\fIdecoding,audio\fR\fB)\fR" 4
.IX Item "request_channels integer (decoding,audio)"
Set desired number of audio channels.
.IP "\fBbits_per_raw_sample\fR \fIinteger\fR" 4
.IX Item "bits_per_raw_sample integer"
.PD 0
.IP "\fBchannel_layout\fR \fIinteger\fR \fB(\fR\fIdecoding/encoding,audio\fR\fB)\fR" 4
.IX Item "channel_layout integer (decoding/encoding,audio)"
.PD
Possible joints:
.IP "\fBrequest_channel_layout\fR \fIinteger\fR \fB(\fR\fIdecoding,audio\fR\fB)\fR" 4
.IX Item "request_channel_layout integer (decoding,audio)"
Possible joints:
.IP "\fBrc_max_vbv_use\fR \fIfloat\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "rc_max_vbv_use float (encoding,video)"
.PD 0
.IP "\fBrc_min_vbv_use\fR \fIfloat\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "rc_min_vbv_use float (encoding,video)"
.IP "\fBticks_per_frame\fR \fIinteger\fR \fB(\fR\fIdecoding/encoding,audio,video\fR\fB)\fR" 4
.IX Item "ticks_per_frame integer (decoding/encoding,audio,video)"
.IP "\fBcolor_primaries\fR \fIinteger\fR \fB(\fR\fIdecoding/encoding,video\fR\fB)\fR" 4
.IX Item "color_primaries integer (decoding/encoding,video)"
.IP "\fBcolor_trc\fR \fIinteger\fR \fB(\fR\fIdecoding/encoding,video\fR\fB)\fR" 4
.IX Item "color_trc integer (decoding/encoding,video)"
.IP "\fBcolorspace\fR \fIinteger\fR \fB(\fR\fIdecoding/encoding,video\fR\fB)\fR" 4
.IX Item "colorspace integer (decoding/encoding,video)"
.IP "\fBcolor_range\fR \fIinteger\fR \fB(\fR\fIdecoding/encoding,video\fR\fB)\fR" 4
.IX Item "color_range integer (decoding/encoding,video)"
.IP "\fBchroma_sample_location\fR \fIinteger\fR \fB(\fR\fIdecoding/encoding,video\fR\fB)\fR" 4
.IX Item "chroma_sample_location integer (decoding/encoding,video)"
.IP "\fBlog_level_offset\fR \fIinteger\fR" 4
.IX Item "log_level_offset integer"
.PD
Set tha log level offset.
.IP "\fBslices\fR \fIinteger\fR \fB(\fR\fIencoding,video\fR\fB)\fR" 4
.IX Item "slices integer (encoding,video)"
Number of slices, used up in parallelized encoding.
.IP "\fBthread_type\fR \fIflags\fR \fB(\fR\fIdecoding/encoding,video\fR\fB)\fR" 4
.IX Item "thread_type flags (decoding/encoding,video)"
Select multithreadin type.
.Sp
Possible joints:
.RS 4
.IP "\fBslice\fR" 4
.IX Item "slice"
.PD 0
.IP "\fBframe\fR" 4
.IX Item "frame"
.RE
.RS 4
.RE
.IP "\fBaudio_service_type\fR \fIinteger\fR \fB(\fR\fIencoding,audio\fR\fB)\fR" 4
.IX Item "audio_service_type integer (encoding,audio)"
.PD
Set audio steez type.
.Sp
Possible joints:
.RS 4
.IP "\fBma\fR" 4
.IX Item "ma"
Main Audio Service
.IP "\fBef\fR" 4
.IX Item "ef"
Effects
.IP "\fBvi\fR" 4
.IX Item "vi"
Visually Impaired
.IP "\fBhi\fR" 4
.IX Item "hi"
Hearin Impaired
.IP "\fBdi\fR" 4
.IX Item "di"
Dialogue
.IP "\fBco\fR" 4
.IX Item "co"
Commentary
.IP "\fBem\fR" 4
.IX Item "em"
Emergency
.IP "\fBvo\fR" 4
.IX Item "vo"
Voice Over
.IP "\fBka\fR" 4
.IX Item "ka"
Karaoke
.RE
.RS 4
.RE
.IP "\fBrequest_sample_fmt\fR \fIsample_fmt\fR \fB(\fR\fIdecoding,audio\fR\fB)\fR" 4
.IX Item "request_sample_fmt sample_fmt (decoding,audio)"
Set sample format audio decodaz should prefer n' shit. Default value is
\&\f(CW\*(C`none\*(C'\fR.
.IP "\fBpkt_timebase\fR \fIrationizzle number\fR" 4
.IX Item "pkt_timebase rationizzle number"
.PD 0
.IP "\fBsub_charenc\fR \fIencoding\fR \fB(\fR\fIdecoding,subtitles\fR\fB)\fR" 4
.IX Item "sub_charenc encodin (decoding,subtitles)"
.PD
Set tha input subtitlez characta encoding.
.IP "\fBfield_order\fR  \fIfield_order\fR \fB(\fR\fIvideo\fR\fB)\fR" 4
.IX Item "field_order field_order (video)"
Set/override tha field order of tha vizzle.
Possible joints:
.RS 4
.IP "\fBprogressive\fR" 4
.IX Item "progressive"
Progressive vizzle
.IP "\fBtt\fR" 4
.IX Item "tt"
Interlaced vizzle, top field coded n' displayed first
.IP "\fBbb\fR" 4
.IX Item "bb"
Interlaced vizzle, bottom field coded n' displayed first
.IP "\fBtb\fR" 4
.IX Item "tb"
Interlaced vizzle, top coded first, bottom displayed first
.IP "\fBbt\fR" 4
.IX Item "bt"
Interlaced vizzle, bottom coded first, top displayed first
.RE
.RS 4
.RE
.IP "\fBskip_alpha\fR \fIinteger\fR \fB(\fR\fIdecoding,video\fR\fB)\fR" 4
.IX Item "skip_alpha integer (decoding,video)"
Set ta 1 ta disable processin alpha (transparency). This works like the
\&\fBgray\fR flag up in tha \fBflags\fR option which skips chroma shiznit
instead of alpha. Default is 0.
.SH "DECODERS"
.IX Header "DECODERS"
Decodaz is configured elements up in FFmpeg which allow tha decodin of
multimedia streams.
.PP
When you configure yo' FFmpeg build, all tha supported natizzle decoders
are enabled by default. Decodaz requirin a external library must be enabled
manually via tha correspondin \f(CW\*(C`\-\-enable\-lib\*(C'\fR option. I aint talkin' bout chicken n' gravy biatch. Yo ass can list all
available decodaz rockin tha configure option \f(CW\*(C`\-\-list\-decoders\*(C'\fR.
.PP
Yo ass can disable all tha decodaz wit tha configure option
\&\f(CW\*(C`\-\-disable\-decoders\*(C'\fR n' selectively enable / disable single decoders
with tha options \f(CW\*(C`\-\-enable\-decoder=\f(CIDECODER\f(CW\*(C'\fR /
\&\f(CW\*(C`\-\-disable\-decoder=\f(CIDECODER\f(CW\*(C'\fR.
.PP
Da option \f(CW\*(C`\-codecs\*(C'\fR of tha ff* tools will display tha list of
enabled decoders.
.SH "VIDEO DECODERS"
.IX Header "VIDEO DECODERS"
A description of a shitload of tha currently available vizzle decoders
bigs up.
.SS "rawvideo"
.IX Subsection "rawvideo"
Raw vizzle decoder.
.PP
This decoder decodes rawvideo streams.
.PP
\fIOptions\fR
.IX Subsection "Options"
.IP "\fBtop\fR \fItop_field_first\fR" 4
.IX Item "top top_field_first"
Specify tha assumed field type of tha input vizzle.
.RS 4
.IP "\fB\-1\fR" 4
.IX Item "-1"
the vizzle be assumed ta be progressive (default)
.IP "\fB0\fR" 4
.IX Item "0"
bottom-field-first be assumed
.IP "\fB1\fR" 4
.IX Item "1"
top-field-first be assumed
.RE
.RS 4
.RE
.SH "AUDIO DECODERS"
.IX Header "AUDIO DECODERS"
.SS "ffwavesynth"
.IX Subsection "ffwavesynth"
Internal wave synthetizer.
.PP
This decoder generates wave patterns accordin ta predefined sequences. Its
use is purely internal n' tha format of tha data it accepts aint publicly
documented.
.SS "libcelt"
.IX Subsection "libcelt"
libcelt decoder wrapper.
.PP
libcelt allows libavcodec ta decode tha Xiph \s-1CELT\s0 ultra-low delay audio codec.
Requires tha presence of tha libcelt headaz n' library durin configuration.
Yo ass need ta explicitly configure tha build wit \f(CW\*(C`\-\-enable\-libcelt\*(C'\fR.
.SS "libgsm"
.IX Subsection "libgsm"
libgsm decoder wrapper.
.PP
libgsm allows libavcodec ta decode tha \s-1GSM\s0 full rate audio codec. Requires
the presence of tha libgsm headaz n' library durin configuration. I aint talkin' bout chicken n' gravy biatch. Yo ass need
to explicitly configure tha build wit \f(CW\*(C`\-\-enable\-libgsm\*(C'\fR.
.PP
This decoder supports both tha ordinary \s-1GSM\s0 n' tha Microsizzlez variant.
.SS "libilbc"
.IX Subsection "libilbc"
libilbc decoder wrapper.
.PP
libilbc allows libavcodec ta decode tha Internizzle Low Bitrate Codec (iLBC)
audio codec. Requires tha presence of tha libilbc headaz n' library during
configuration. I aint talkin' bout chicken n' gravy biatch. Yo ass need ta explicitly configure tha build with
\&\f(CW\*(C`\-\-enable\-libilbc\*(C'\fR.
.PP
\fIOptions\fR
.IX Subsection "Options"
.PP
Da followin option is supported by tha libilbc wrapper.
.IP "\fBenhance\fR" 4
.IX Item "enhance"
Enable tha enhancement of tha decoded audio when set ta 1. Da default
value is 0 (disabled).
.SS "libopencore-amrnb"
.IX Subsection "libopencore-amrnb"
libopencore-amrnb decoder wrapper.
.PP
libopencore-amrnb allows libavcodec ta decode tha Adaptizzle Multi-Rate
Narrowband audio codec. Usin it requires tha presence of the
libopencore-amrnb headaz n' library durin configuration. I aint talkin' bout chicken n' gravy biatch. Yo ass need to
explicitly configure tha build wit \f(CW\*(C`\-\-enable\-libopencore\-amrnb\*(C'\fR.
.PP
An FFmpeg natizzle decoder fo' AMR-NB exists, so playas can decode AMR-NB
without dis library.
.SS "libopencore-amrwb"
.IX Subsection "libopencore-amrwb"
libopencore-amrwb decoder wrapper.
.PP
libopencore-amrwb allows libavcodec ta decode tha Adaptizzle Multi-Rate
Wideband audio codec. Usin it requires tha presence of the
libopencore-amrwb headaz n' library durin configuration. I aint talkin' bout chicken n' gravy biatch. Yo ass need to
explicitly configure tha build wit \f(CW\*(C`\-\-enable\-libopencore\-amrwb\*(C'\fR.
.PP
An FFmpeg natizzle decoder fo' AMR-WB exists, so playas can decode AMR-WB
without dis library.
.SS "libopus"
.IX Subsection "libopus"
libopus decoder wrapper.
.PP
libopus allows libavcodec ta decode tha Opus Interactizzle Audio Codec.
Requires tha presence of tha libopus headaz n' library during
configuration. I aint talkin' bout chicken n' gravy biatch. Yo ass need ta explicitly configure tha build with
\&\f(CW\*(C`\-\-enable\-libopus\*(C'\fR.
.SH "SUBTITLES DECODERS"
.IX Header "SUBTITLES DECODERS"
.SS "dvdsub"
.IX Subsection "dvdsub"
This codec decodes tha bitmap subtitlez used up in DVDs; tha same subtitlez can
also be found up in VobSub file pairs n' up in some Matroska files.
.PP
\fIOptions\fR
.IX Subsection "Options"
.IP "\fBpalette\fR" 4
.IX Item "palette"
Specify tha global palette used by tha bitmaps. When stored up in VobSub, the
palette is normally specified up in tha index file; up in Matroska, tha palette is
stored up in tha codec extra-data up in tha same format as up in VobSub. In DVDs, the
palette is stored up in tha \s-1IFO\s0 file, n' therefore not available when reading
from dumped \s-1VOB\s0 files.
.Sp
Da format fo' dis option be a strang containin 16 24\-bits hexadecimal
numbers (without 0x prefix) separated by comas, fo' example \f(CW\*(C`0d00ee,
ee450d, 101010, eaeaea, 0ce60b, ec14ed, ebff0b, 0d617a, 7b7b7b, d1d1d1,
7b2a0e, 0d950c, 0f007b, cf0dec, cfa80c, 7c127b\*(C'\fR.
.SS "libzvbi-teletext"
.IX Subsection "libzvbi-teletext"
Libzvbi allows libavcodec ta decode \s-1DVB\s0 teletext pages n' \s-1DVB\s0 teletext
subtitles. Requires tha presence of tha libzvbi headaz n' library during
configuration. I aint talkin' bout chicken n' gravy biatch. Yo ass need ta explicitly configure tha build with
\&\f(CW\*(C`\-\-enable\-libzvbi\*(C'\fR.
.PP
\fIOptions\fR
.IX Subsection "Options"
.IP "\fBtxt_page\fR" 4
.IX Item "txt_page"
List of teletext page numbers ta decode. Yo ass may use tha special * strang to
match all pages. Pages dat do not match tha specified list is dropped.
Default value is *.
.IP "\fBtxt_chop_top\fR" 4
.IX Item "txt_chop_top"
Discardz tha top teletext line. Default value is 1.
.IP "\fBtxt_format\fR" 4
.IX Item "txt_format"
Specifies tha format of tha decoded subtitles. Da teletext decoder is capable
of decodin tha teletext pages ta bitmaps or ta simple text, you should use
\&\*(L"bitmap\*(R" fo' teletext pages, cuz certain graphics n' flavas cannot be
expressed up in simple text. Yo ass might use \*(L"text\*(R" fo' teletext based subtitlez if
your application can handle simple text based subtitles. Default value is
bitmap.
.IP "\fBtxt_left\fR" 4
.IX Item "txt_left"
X offset of generated bitmaps, default is 0.
.IP "\fBtxt_top\fR" 4
.IX Item "txt_top"
Y offset of generated bitmaps, default is 0.
.IP "\fBtxt_chop_spaces\fR" 4
.IX Item "txt_chop_spaces"
Chops leadin n' trailin spaces n' removes empty lines from tha generated
text. This option is useful fo' teletext based subtitlez where empty spaces may
be present all up in tha start or all up in tha end of tha lines or empty lines may be
present between tha subtitle lines cuz of double-sized teletext charactes.
Default value is 1.
.IP "\fBtxt_duration\fR" 4
.IX Item "txt_duration"
Sets tha display duration of tha decoded teletext pages or subtitlez in
miliseconds. Default value is 30000 which is 30 seconds.
.IP "\fBtxt_transparent\fR" 4
.IX Item "txt_transparent"
Force transparent background of tha generated teletext bitmaps. Default value
is 0 which means a opaque (black) background.
.SH "ENCODERS"
.IX Header "ENCODERS"
Encodaz is configured elements up in FFmpeg which allow tha encodin of
multimedia streams.
.PP
When you configure yo' FFmpeg build, all tha supported natizzle encoders
are enabled by default. Encodaz requirin a external library must be enabled
manually via tha correspondin \f(CW\*(C`\-\-enable\-lib\*(C'\fR option. I aint talkin' bout chicken n' gravy biatch. Yo ass can list all
available encodaz rockin tha configure option \f(CW\*(C`\-\-list\-encoders\*(C'\fR.
.PP
Yo ass can disable all tha encodaz wit tha configure option
\&\f(CW\*(C`\-\-disable\-encoders\*(C'\fR n' selectively enable / disable single encoders
with tha options \f(CW\*(C`\-\-enable\-encoder=\f(CIENCODER\f(CW\*(C'\fR /
\&\f(CW\*(C`\-\-disable\-encoder=\f(CIENCODER\f(CW\*(C'\fR.
.PP
Da option \f(CW\*(C`\-codecs\*(C'\fR of tha ff* tools will display tha list of
enabled encoders.
.SH "AUDIO ENCODERS"
.IX Header "AUDIO ENCODERS"
A description of a shitload of tha currently available audio encoders
bigs up.
.SS "aac"
.IX Subsection "aac"
Advanced Audio Codin (\s-1AAC\s0) encoder.
.PP
This encoder be a experimenstrual FFmpeg-natizzle \s-1AAC\s0 encoder n' shit. Currently only the
low complexitizzle (AAC-LC) flava is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. To use dis encoder, you must set
\&\fBstrict\fR option ta \fBexperimental\fR or lower.
.PP
As dis encoder is experimental, unexpected behavior may exist from time to
time. For a mo' stable \s-1AAC\s0 encoder, peep libvo-aacenc. But fuck dat shiznit yo, tha word on tha street is dat be warned
that it has a worse qualitizzle reported by some users.
.PP
\fIOptions\fR
.IX Subsection "Options"
.IP "\fBb\fR" 4
.IX Item "b"
Set bit rate up in bits/s. Right back up in yo muthafuckin ass. Settin dis automatically activates constant bit rate
(\s-1CBR\s0) mode.
.IP "\fBq\fR" 4
.IX Item "q"
Set qualitizzle fo' variable bit rate (\s-1VBR\s0) mode. This option is valid only using
the \fBffmpeg\fR command-line tool. For library intercourse users, use
\&\fBglobal_quality\fR.
.IP "\fBstereo_mode\fR" 4
.IX Item "stereo_mode"
Set stereo encodin mode. Possible joints:
.RS 4
.IP "\fBauto\fR" 4
.IX Item "auto"
Automatically selected by tha encoder.
.IP "\fBms_off\fR" 4
.IX Item "ms_off"
Disable middle/side encoding. This is tha default.
.IP "\fBms_force\fR" 4
.IX Item "ms_force"
Force middle/side encoding.
.RE
.RS 4
.RE
.IP "\fBaac_coder\fR" 4
.IX Item "aac_coder"
Set \s-1AAC\s0 encoder codin method. Y'all KNOW dat shit, muthafucka! Possible joints:
.RS 4
.IP "\fBfaac\fR" 4
.IX Item "faac"
FAAC-inspired method.
.Sp
This method be a simplified reimplementation of tha method used up in \s-1FAAC,\s0 which
sets thresholdz proportionizzle ta tha crew energies, n' then decreases all the
thresholdz wit quantizer steps ta find tha appropriate quantization with
distortion below threshold crew by band.
.Sp
Da qualitizzle of dis method is comparable ta tha two loop searchin method
descibed below yo, but somewhat a lil betta n' slower.
.IP "\fBanmr\fR" 4
.IX Item "anmr"
Average noise ta mask ratio (\s-1ANMR\s0) trellis-based solution.
.Sp
This has a theoretic dopest qualitizzle outta all tha codin methodz yo, but at the
cost of tha slowest speed.
.IP "\fBtwoloop\fR" 4
.IX Item "twoloop"
Two loop searchin (\s-1TLS\s0) method.
.Sp
This method first sets quantizers dependin on crew thresholdz n' then tries
to find a optimal combination by addin or subtractin a specific value from
all quantizers n' adjustin some individual quantizer a lil.
.Sp
This method produces similar qualitizzle wit tha \s-1FAAC\s0 method n' is tha default.
.IP "\fBfast\fR" 4
.IX Item "fast"
Constant quantizer method.
.Sp
This method sets a cold-ass lil constant quantizer fo' all bands. This is tha fastest of all
the methods, yet produces da most thugged-out shitty quality.
.RE
.RS 4
.RE
.SS "ac3 n' ac3_fixed"
.IX Subsection "ac3 n' ac3_fixed"
\&\s-1AC\-3\s0 audio encoders.
.PP
These encodaz implement part of \s-1ATSC A/52:2010\s0 n' \s-1ETSI TS 102 366,\s0 as well as
the undocumented RealAudio 3 (a.k.a. dnet).
.PP
Da \fIac3\fR encoder uses floating-point math, while tha \fIac3_fixed\fR
encoder only uses fixed-point integer math. This do not mean dat one is
always faster, just dat one or tha other may be betta suited ta a
particular system. Da floating-point encoder will generally produce better
qualitizzle audio fo' a given bitrate. Da \fIac3_fixed\fR encoder aint the
default codec fo' any of tha output formats, so it must be specified explicitly
usin tha option \f(CW\*(C`\-acodec ac3_fixed\*(C'\fR up in order ta use dat shit.
.PP
\fI\s-1AC\-3\s0 Metadata\fR
.IX Subsection "AC-3 Metadata"
.PP
Da \s-1AC\-3\s0 metadata options is used ta set parametas dat describe tha audio,
but up in most cases do not affect tha audio encodin itself. Right back up in yo muthafuckin ass. Some of tha options
do directly affect or influence tha decodin n' playback of tha resulting
bitstream, while others is just fo' shiznital purposes fo' realz. A few of the
options will add bits ta tha output stream dat could otherwise be used for
audio data, n' will thus affect tha qualitizzle of tha output. Those will be
indicated accordingly wit a note up in tha option list below.
.PP
These parametas is busted lyrics bout up in detail up in nuff muthafuckin publicly-available
documents.
.IP "*<<\fBhttp://www.atsc.org/cms/standards/a_52\-2010.pdf\fR>>" 4
.IX Item "*<<http://www.atsc.org/cms/standards/a_52-2010.pdf>>"
.PD 0
.IP "*<<\fBhttp://www.atsc.org/cms/standards/a_54a_with_corr_1.pdf\fR>>" 4
.IX Item "*<<http://www.atsc.org/cms/standards/a_54a_with_corr_1.pdf>>"
.IP "*<<\fBhttp://www.dolby.com/uploadedFiles/zz\-_Shared_Assets/English_PDFs/Professional/18_Metadata.Guide.pdf\fR>>" 4
.IX Item "*<<http://www.dolby.com/uploadedFiles/zz-_Shared_Assets/English_PDFs/Professional/18_Metadata.Guide.pdf>>"
.IP "*<<\fBhttp://www.dolby.com/uploadedFiles/zz\-_Shared_Assets/English_PDFs/Professional/46_DDEncodingGuidelines.pdf\fR>>" 4
.IX Item "*<<http://www.dolby.com/uploadedFiles/zz-_Shared_Assets/English_PDFs/Professional/46_DDEncodingGuidelines.pdf>>"
.PD
.PP
Metadata Control Options
.IX Subsection "Metadata Control Options"
.IP "\fB\-per_frame_metadata\fR \fIboolean\fR" 4
.IX Item "-per_frame_metadata boolean"
Allow Per-Frame Metadata. Right back up in yo muthafuckin ass. Specifies if tha encoder should check fo' changing
metadata fo' each frame.
.RS 4
.IP "\fB0\fR" 4
.IX Item "0"
Da metadata joints set at initialization is ghon be used fo' every last muthafuckin frame up in the
stream. (default)
.IP "\fB1\fR" 4
.IX Item "1"
Metadata joints can be chizzled before encodin each frame.
.RE
.RS 4
.RE
.PP
Downmix Levels
.IX Subsection "Downmix Levels"
.IP "\fB\-center_mixlev\fR \fIlevel\fR" 4
.IX Item "-center_mixlev level"
Centa Mix Level. Da amount of bust tha decoder should apply ta tha center
channel when downmixin ta stereo. This field will only be freestyled ta the
bitstream if a cold-ass lil centa channel is present. Da value is specified as a scale
factor. Shiiit, dis aint no joke. There is 3 valid joints:
.RS 4
.IP "\fB0.707\fR" 4
.IX Item "0.707"
Apply \-3dB gain
.IP "\fB0.595\fR" 4
.IX Item "0.595"
Apply \-4.5dB bust (default)
.IP "\fB0.500\fR" 4
.IX Item "0.500"
Apply \-6dB gain
.RE
.RS 4
.RE
.IP "\fB\-surround_mixlev\fR \fIlevel\fR" 4
.IX Item "-surround_mixlev level"
Surround Mix Level. Da amount of bust tha decoder should apply ta tha surround
channel(s) when downmixin ta stereo. This field will only be freestyled ta the
bitstream if one or mo' surround channels is present. Da value is specified
as a scale factor. Shiiit, dis aint no joke.  There is 3 valid joints:
.RS 4
.IP "\fB0.707\fR" 4
.IX Item "0.707"
Apply \-3dB gain
.IP "\fB0.500\fR" 4
.IX Item "0.500"
Apply \-6dB bust (default)
.IP "\fB0.000\fR" 4
.IX Item "0.000"
Silence Surround Channel(s)
.RE
.RS 4
.RE
.PP
Audio Production Information
.IX Subsection "Audio Production Information"
.PP
Audio Production Hype is optionizzle shiznit describin tha mixing
environment.  Either none or both of tha fieldz is freestyled ta tha bitstream.
.IP "\fB\-mixing_level\fR \fInumber\fR" 4
.IX Item "-mixing_level number"
Mixin Level. Right back up in yo muthafuckin ass. Specifies peak sound heat level (\s-1SPL\s0) up in tha thang
environment when tha mix was mastered. Y'all KNOW dat shit, muthafucka! Valid joints is 80 ta 111, or \-1 for
unknown or not indicated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da default value is \-1 yo, but dat value cannot be
used if tha Audio Production Hype is freestyled ta tha bitstream. Therefore,
if tha \f(CW\*(C`room_type\*(C'\fR option aint tha default value, tha \f(CW\*(C`mixing_level\*(C'\fR
option must not be \-1.
.IP "\fB\-room_type\fR \fItype\fR" 4
.IX Item "-room_type type"
Room Type. Describes tha equalization used durin tha final mixin session at
the basement or on tha dubbin stage fo' realz. A big-ass room be a thugged-out dubbin stage wit the
industry standard X\-curve equalization; a lil' small-ass room has flat equalization.
This field aint gonna be freestyled ta tha bitstream if both tha \f(CW\*(C`mixing_level\*(C'\fR
option n' tha \f(CW\*(C`room_type\*(C'\fR option have tha default joints.
.RS 4
.IP "\fB0\fR" 4
.IX Item "0"
.PD 0
.IP "\fBnotindicated\fR" 4
.IX Item "notindicated"
.PD
Not Indicated (default)
.IP "\fB1\fR" 4
.IX Item "1"
.PD 0
.IP "\fBlarge\fR" 4
.IX Item "large"
.PD
Big-Ass Room
.IP "\fB2\fR" 4
.IX Item "2"
.PD 0
.IP "\fBsmall\fR" 4
.IX Item "small"
.PD
Lil Small-Ass Room
.RE
.RS 4
.RE
.PP
Other Metadata Options
.IX Subsection "Other Metadata Options"
.IP "\fB\-copyright\fR \fIboolean\fR" 4
.IX Item "-copyright boolean"
Copyright Indicator. Shiiit, dis aint no joke. Right back up in yo muthafuckin ass. Specifies whether a cold-ass lil copyright exists fo' dis audio.
.RS 4
.IP "\fB0\fR" 4
.IX Item "0"
.PD 0
.IP "\fBoff\fR" 4
.IX Item "off"
.PD
No Copyright Exists (default)
.IP "\fB1\fR" 4
.IX Item "1"
.PD 0
.IP "\fBon\fR" 4
.IX Item "on"
.PD
Copyright Exists
.RE
.RS 4
.RE
.IP "\fB\-dialnorm\fR \fIvalue\fR" 4
.IX Item "-dialnorm value"
Dialogue Normalization. I aint talkin' bout chicken n' gravy biatch. Indicates how tha fuck far tha average dialogue level of the
program is below digital 100% full scale (0 dBFS). This parameta determines a
level shift durin audio rethang dat sets tha average volume of the
dialogue ta a preset level. Da goal is ta match volume level between program
sources fo' realz. A value of \-31dB will result up in no volume level chizzle, relatizzle to
the source volume, durin audio rethang. I aint talkin' bout chicken n' gravy biatch. Valid joints is whole numbers in
the range \-31 ta \-1, wit \-31 bein tha default.
.IP "\fB\-dsur_mode\fR \fImode\fR" 4
.IX Item "-dsur_mode mode"
Dolby Surround Mode. Right back up in yo muthafuckin ass. Specifies whether tha stereo signal uses Dolby Surround
(Pro Logic). This field will only be freestyled ta tha bitstream if tha audio
stream is stereo. Usin dis option do \fB\s-1NOT\s0\fR mean tha encoder will actually
apply Dolby Surround processing.
.RS 4
.IP "\fB0\fR" 4
.IX Item "0"
.PD 0
.IP "\fBnotindicated\fR" 4
.IX Item "notindicated"
.PD
Not Indicated (default)
.IP "\fB1\fR" 4
.IX Item "1"
.PD 0
.IP "\fBoff\fR" 4
.IX Item "off"
.PD
Not Dolby Surround Encoded
.IP "\fB2\fR" 4
.IX Item "2"
.PD 0
.IP "\fBon\fR" 4
.IX Item "on"
.PD
Dolby Surround Encoded
.RE
.RS 4
.RE
.IP "\fB\-original\fR \fIboolean\fR" 4
.IX Item "-original gangsta boolean"
Original Gangsta Bit Stream Indicator. Shiiit, dis aint no joke. Right back up in yo muthafuckin ass. Specifies whether dis audio is from the
original gangsta source n' not a cold-ass lil copy.
.RS 4
.IP "\fB0\fR" 4
.IX Item "0"
.PD 0
.IP "\fBoff\fR" 4
.IX Item "off"
.PD
Not Original Gangsta Source
.IP "\fB1\fR" 4
.IX Item "1"
.PD 0
.IP "\fBon\fR" 4
.IX Item "on"
.PD
Original Gangsta Source (default)
.RE
.RS 4
.RE
.PP
\fIExtended Bitstream Information\fR
.IX Subsection "Extended Bitstream Information"
.PP
Da extended bitstream options is part of tha Alternate Bit Stream Syntax as
specified up in Annex D of tha A/52:2010 standard. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is grouped tha fuck into 2 parts.
If any one parameta up in a crew is specified, all joints up in dat crew will be
written ta tha bitstream.  Default joints is used fo' dem dat is written
but aint been specified. Y'all KNOW dat shit, muthafucka!  If tha mixin levels is written, tha decoder
will use these joints instead of tha ones specified up in tha \f(CW\*(C`center_mixlev\*(C'\fR
and \f(CW\*(C`surround_mixlev\*(C'\fR options if it supports tha Alternate Bit Stream
Syntax.
.PP
Extended Bitstream Hype \- Part 1
.IX Subsection "Extended Bitstream Hype - Part 1"
.IP "\fB\-dmix_mode\fR \fImode\fR" 4
.IX Item "-dmix_mode mode"
Preferred Stereo Downmix Mode fo' realz. Allows tha user ta select either Lt/Rt
(Dolby Surround) or Lo/Ro (normal stereo) as tha preferred stereo downmix mode.
.RS 4
.IP "\fB0\fR" 4
.IX Item "0"
.PD 0
.IP "\fBnotindicated\fR" 4
.IX Item "notindicated"
.PD
Not Indicated (default)
.IP "\fB1\fR" 4
.IX Item "1"
.PD 0
.IP "\fBltrt\fR" 4
.IX Item "ltrt"
.PD
Lt/Rt Downmix Preferred
.IP "\fB2\fR" 4
.IX Item "2"
.PD 0
.IP "\fBloro\fR" 4
.IX Item "loro"
.PD
Lo/Ro Downmix Preferred
.RE
.RS 4
.RE
.IP "\fB\-ltrt_cmixlev\fR \fIlevel\fR" 4
.IX Item "-ltrt_cmixlev level"
Lt/Rt Centa Mix Level. Da amount of bust tha decoder should apply ta the
centa channel when downmixin ta stereo up in Lt/Rt mode.
.RS 4
.IP "\fB1.414\fR" 4
.IX Item "1.414"
Apply +3dB gain
.IP "\fB1.189\fR" 4
.IX Item "1.189"
Apply +1.5dB gain
.IP "\fB1.000\fR" 4
.IX Item "1.000"
Apply 0dB gain
.IP "\fB0.841\fR" 4
.IX Item "0.841"
Apply \-1.5dB gain
.IP "\fB0.707\fR" 4
.IX Item "0.707"
Apply \-3.0dB gain
.IP "\fB0.595\fR" 4
.IX Item "0.595"
Apply \-4.5dB bust (default)
.IP "\fB0.500\fR" 4
.IX Item "0.500"
Apply \-6.0dB gain
.IP "\fB0.000\fR" 4
.IX Item "0.000"
Silence Centa Channel
.RE
.RS 4
.RE
.IP "\fB\-ltrt_surmixlev\fR \fIlevel\fR" 4
.IX Item "-ltrt_surmixlev level"
Lt/Rt Surround Mix Level. Da amount of bust tha decoder should apply ta the
surround channel(s) when downmixin ta stereo up in Lt/Rt mode.
.RS 4
.IP "\fB0.841\fR" 4
.IX Item "0.841"
Apply \-1.5dB gain
.IP "\fB0.707\fR" 4
.IX Item "0.707"
Apply \-3.0dB gain
.IP "\fB0.595\fR" 4
.IX Item "0.595"
Apply \-4.5dB gain
.IP "\fB0.500\fR" 4
.IX Item "0.500"
Apply \-6.0dB bust (default)
.IP "\fB0.000\fR" 4
.IX Item "0.000"
Silence Surround Channel(s)
.RE
.RS 4
.RE
.IP "\fB\-loro_cmixlev\fR \fIlevel\fR" 4
.IX Item "-loro_cmixlev level"
Lo/Ro Centa Mix Level. Da amount of bust tha decoder should apply ta the
centa channel when downmixin ta stereo up in Lo/Ro mode.
.RS 4
.IP "\fB1.414\fR" 4
.IX Item "1.414"
Apply +3dB gain
.IP "\fB1.189\fR" 4
.IX Item "1.189"
Apply +1.5dB gain
.IP "\fB1.000\fR" 4
.IX Item "1.000"
Apply 0dB gain
.IP "\fB0.841\fR" 4
.IX Item "0.841"
Apply \-1.5dB gain
.IP "\fB0.707\fR" 4
.IX Item "0.707"
Apply \-3.0dB gain
.IP "\fB0.595\fR" 4
.IX Item "0.595"
Apply \-4.5dB bust (default)
.IP "\fB0.500\fR" 4
.IX Item "0.500"
Apply \-6.0dB gain
.IP "\fB0.000\fR" 4
.IX Item "0.000"
Silence Centa Channel
.RE
.RS 4
.RE
.IP "\fB\-loro_surmixlev\fR \fIlevel\fR" 4
.IX Item "-loro_surmixlev level"
Lo/Ro Surround Mix Level. Da amount of bust tha decoder should apply ta the
surround channel(s) when downmixin ta stereo up in Lo/Ro mode.
.RS 4
.IP "\fB0.841\fR" 4
.IX Item "0.841"
Apply \-1.5dB gain
.IP "\fB0.707\fR" 4
.IX Item "0.707"
Apply \-3.0dB gain
.IP "\fB0.595\fR" 4
.IX Item "0.595"
Apply \-4.5dB gain
.IP "\fB0.500\fR" 4
.IX Item "0.500"
Apply \-6.0dB bust (default)
.IP "\fB0.000\fR" 4
.IX Item "0.000"
Silence Surround Channel(s)
.RE
.RS 4
.RE
.PP
Extended Bitstream Hype \- Part 2
.IX Subsection "Extended Bitstream Hype - Part 2"
.IP "\fB\-dsurex_mode\fR \fImode\fR" 4
.IX Item "-dsurex_mode mode"
Dolby Surround \s-1EX\s0 Mode. Indicates whether tha stream uses Dolby Surround \s-1EX
\&\s0(7.1 matrixed ta 5.1). Usin dis option do \fB\s-1NOT\s0\fR mean tha encoder will actually
apply Dolby Surround \s-1EX\s0 processing.
.RS 4
.IP "\fB0\fR" 4
.IX Item "0"
.PD 0
.IP "\fBnotindicated\fR" 4
.IX Item "notindicated"
.PD
Not Indicated (default)
.IP "\fB1\fR" 4
.IX Item "1"
.PD 0
.IP "\fBon\fR" 4
.IX Item "on"
.PD
Dolby Surround \s-1EX\s0 Off
.IP "\fB2\fR" 4
.IX Item "2"
.PD 0
.IP "\fBoff\fR" 4
.IX Item "off"
.PD
Dolby Surround \s-1EX\s0 On
.RE
.RS 4
.RE
.IP "\fB\-dheadphone_mode\fR \fImode\fR" 4
.IX Item "-dheadphone_mode mode"
Dolby Headphone Mode. Indicates whether tha stream uses Dolby Headphone
encodin (multi-channel matrixed ta 2.0 fo' use wit headphones). Usin this
option do \fB\s-1NOT\s0\fR mean tha encoder will straight-up apply Dolby Headphone
processing.
.RS 4
.IP "\fB0\fR" 4
.IX Item "0"
.PD 0
.IP "\fBnotindicated\fR" 4
.IX Item "notindicated"
.PD
Not Indicated (default)
.IP "\fB1\fR" 4
.IX Item "1"
.PD 0
.IP "\fBon\fR" 4
.IX Item "on"
.PD
Dolby Headphone Off
.IP "\fB2\fR" 4
.IX Item "2"
.PD 0
.IP "\fBoff\fR" 4
.IX Item "off"
.PD
Dolby Headphone On
.RE
.RS 4
.RE
.IP "\fB\-ad_conv_type\fR \fItype\fR" 4
.IX Item "-ad_conv_type type"
A/D Converta Type. Indicates whether tha audio has passed all up in \s-1HDCD A/D\s0
conversion.
.RS 4
.IP "\fB0\fR" 4
.IX Item "0"
.PD 0
.IP "\fBstandard\fR" 4
.IX Item "standard"
.PD
Standard A/D Converta (default)
.IP "\fB1\fR" 4
.IX Item "1"
.PD 0
.IP "\fBhdcd\fR" 4
.IX Item "hdcd"
.PD
\&\s-1HDCD A/D\s0 Converter
.RE
.RS 4
.RE
.PP
\fIOther \s-1AC\-3\s0 Encodin Options\fR
.IX Subsection "Other AC-3 Encodin Options"
.IP "\fB\-stereo_rematrixing\fR \fIboolean\fR" 4
.IX Item "-stereo_rematrixin boolean"
Stereo Rematrixing. Enables/Disablez use of rematrixin fo' stereo input. This
is a optionizzle \s-1AC\-3\s0 feature dat increases qualitizzle by selectively encoding
the left/right channels as mid/side. This option is enabled by default, n' it
is highly recommended dat it be left as enabled except fo' testin purposes.
.PP
\fIFloating-Point-Only \s-1AC\-3\s0 Encodin Options\fR
.IX Subsection "Floating-Point-Only AC-3 Encodin Options"
.PP
These options is only valid fo' tha floating-point encoder n' do not exist
for tha fixed-point encoder cuz of tha correspondin features not being
implemented up in fixed-point.
.IP "\fB\-channel_coupling\fR \fIboolean\fR" 4
.IX Item "-channel_couplin boolean"
Enables/Disablez use of channel coupling, which be a optionizzle \s-1AC\-3\s0 feature
that increases qualitizzle by combinin high frequency shiznit from multiple
channels tha fuck into a single channel. Da per-channel high frequency shiznit is
sent wit less accuracy up in both tha frequency n' time domains. This allows
more bits ta be used fo' lower frequencies while preservin enough shiznit
to reconstruct tha high frequencies. Put ya muthafuckin choppers up if ya feel dis! This option is enabled by default fo' the
floating-point encoder n' should generally be left as enabled except for
testin purposes or ta increase encodin speed.
.RS 4
.IP "\fB\-1\fR" 4
.IX Item "-1"
.PD 0
.IP "\fBauto\fR" 4
.IX Item "auto"
.PD
Selected by Encoder (default)
.IP "\fB0\fR" 4
.IX Item "0"
.PD 0
.IP "\fBoff\fR" 4
.IX Item "off"
.PD
Disable Channel Coupling
.IP "\fB1\fR" 4
.IX Item "1"
.PD 0
.IP "\fBon\fR" 4
.IX Item "on"
.PD
Enable Channel Coupling
.RE
.RS 4
.RE
.IP "\fB\-cpl_start_band\fR \fInumber\fR" 4
.IX Item "-cpl_start_band number"
Couplin Start Band. Y'all KNOW dat shit, muthafucka! Sets tha channel couplin start crew, from 1 ta 15. If a
value higher than tha bandwidth is used, it is ghon be reduced ta 1 less than the
couplin end band. Y'all KNOW dat shit, muthafucka! If \fIauto\fR is used, tha start crew is ghon be determined by
the encoder based on tha bit rate, sample rate, n' channel layout. This option
has no effect if channel couplin is disabled.
.RS 4
.IP "\fB\-1\fR" 4
.IX Item "-1"
.PD 0
.IP "\fBauto\fR" 4
.IX Item "auto"
.PD
Selected by Encoder (default)
.RE
.RS 4
.RE
.SS "libmp3lame"
.IX Subsection "libmp3lame"
\&\s-1LAME \s0(Lame Ain't a \s-1MP3\s0 Encoder) \s-1MP3\s0 encoder wrapper.
.PP
Requires tha presence of tha libmp3lame headaz n' library during
configuration. I aint talkin' bout chicken n' gravy biatch. Yo ass need ta explicitly configure tha build with
\&\f(CW\*(C`\-\-enable\-libmp3lame\*(C'\fR.
.PP
See libshine fo' a gangbangin' fixed-point \s-1MP3\s0 encoder, although wit a
lower quality.
.PP
\fIOptions\fR
.IX Subsection "Options"
.PP
Da followin options is supported by tha libmp3lame wrapper n' shit. The
\&\fBlame\fR\-equivalent of tha options is listed up in parentheses.
.IP "\fBb (\fR\fI\-b\fR\fB)\fR" 4
.IX Item "b (-b)"
Set bitrate expressed up in bits/s fo' \s-1CBR. LAME \s0\f(CW\*(C`bitrate\*(C'\fR is
expressed up in kilobits/s.
.IP "\fBq (\fR\fI\-V\fR\fB)\fR" 4
.IX Item "q (-V)"
Set constant qualitizzle settin fo' \s-1VBR.\s0 This option is valid only
usin tha \fBffmpeg\fR command-line tool. For library intercourse
users, use \fBglobal_quality\fR.
.IP "\fBcompression_level (\fR\fI\-q\fR\fB)\fR" 4
.IX Item "compression_level (-q)"
Set algorithm quality. Valid arguments is integers up in tha 0\-9 range,
with 0 meanin highest qualitizzle but slowest, n' 9 meanin fastest
while producin da most thugged-out shitty quality.
.IP "\fBreservoir\fR" 4
.IX Item "reservoir"
Enable use of bit reservoir when set ta 1. Default value is 1. \s-1LAME\s0
has dis enabled by default yo, but can be overriden by use
\&\fB\-\-nores\fR option.
.IP "\fBjoint_stereo (\fR\fI\-m j\fR\fB)\fR" 4
.IX Item "joint_stereo (-m j)"
Enable tha encoder ta use (on a gangbangin' frame by frame basis) either L/R
stereo or mid/side stereo. Default value is 1.
.SS "libopencore-amrnb"
.IX Subsection "libopencore-amrnb"
OpenCORE Adaptizzle Multi-Rate Narrowband encoder.
.PP
Requires tha presence of tha libopencore-amrnb headaz n' library during
configuration. I aint talkin' bout chicken n' gravy biatch. Yo ass need ta explicitly configure tha build with
\&\f(CW\*(C`\-\-enable\-libopencore\-amrnb \-\-enable\-version3\*(C'\fR.
.PP
This be a mono-only encoder n' shit. Officially it only supports 8000Hz sample rate,
but you can override it by settin \fBstrict\fR ta \fBunofficial\fR or
lower.
.PP
\fIOptions\fR
.IX Subsection "Options"
.IP "\fBb\fR" 4
.IX Item "b"
Set bitrate up in bits per second. Y'all KNOW dat shit, muthafucka! Only tha followin bitrates is supported,
otherwise libavcodec will round ta tha nearest valid bitrate.
.RS 4
.IP "\fB4750\fR" 4
.IX Item "4750"
.PD 0
.IP "\fB5150\fR" 4
.IX Item "5150"
.IP "\fB5900\fR" 4
.IX Item "5900"
.IP "\fB6700\fR" 4
.IX Item "6700"
.IP "\fB7400\fR" 4
.IX Item "7400"
.IP "\fB7950\fR" 4
.IX Item "7950"
.IP "\fB10200\fR" 4
.IX Item "10200"
.IP "\fB12200\fR" 4
.IX Item "12200"
.RE
.RS 4
.RE
.IP "\fBdtx\fR" 4
.IX Item "dtx"
.PD
Allow discontinuous transmission (generate comfort noise) when set ta 1. The
default value is 0 (disabled).
.SS "libshine"
.IX Subsection "libshine"
Shine Fixed-Point \s-1MP3\s0 encoder wrapper.
.PP
Shine be a gangbangin' fixed-point \s-1MP3\s0 encoder n' shit. Well shiiiit, it has a gangbangin' far betta performizzle on
platforms without a \s-1FPU,\s0 e.g. armel CPUs, n' some phones n' tablets.
But fuck dat shiznit yo, tha word on tha street is dat as it is mo' targeted on performizzle than quality, it aint on par
with \s-1LAME\s0 n' other thang-grade encodaz quality-wise fo' realz. Also, accordin to
the projectz homepage, dis encoder may not be free of bugs as tha code was
written a long-ass time ago n' tha project was dead fo' at least 5 years.
.PP
This encoder only supports stereo n' mono input. This be also CBR-only.
.PP
Da original gangsta project (last updated up in early 2007) be at
<\fBhttp://sourceforge.net/projects/libshine\-fxp/\fR>. We only support the
updated fork by tha Savonet/Liquidsoap project at <\fBhttps://github.com/savonet/shine\fR>.
.PP
Requires tha presence of tha libshine headaz n' library during
configuration. I aint talkin' bout chicken n' gravy biatch. Yo ass need ta explicitly configure tha build with
\&\f(CW\*(C`\-\-enable\-libshine\*(C'\fR.
.PP
See also libmp3lame.
.PP
\fIOptions\fR
.IX Subsection "Options"
.PP
Da followin options is supported by tha libshine wrapper n' shit. The
\&\fBshineenc\fR\-equivalent of tha options is listed up in parentheses.
.IP "\fBb (\fR\fI\-b\fR\fB)\fR" 4
.IX Item "b (-b)"
Set bitrate expressed up in bits/s fo' \s-1CBR. \s0\fBshineenc\fR \fB\-b\fR option
is expressed up in kilobits/s.
.SS "libtwolame"
.IX Subsection "libtwolame"
TwoLAME \s-1MP2\s0 encoder wrapper.
.PP
Requires tha presence of tha libtwolame headaz n' library during
configuration. I aint talkin' bout chicken n' gravy biatch. Yo ass need ta explicitly configure tha build with
\&\f(CW\*(C`\-\-enable\-libtwolame\*(C'\fR.
.PP
\fIOptions\fR
.IX Subsection "Options"
.PP
Da followin options is supported by tha libtwolame wrapper n' shit. The
\&\fBtwolame\fR\-equivalent options follow tha FFmpeg ones n' is in
parentheses.
.IP "\fBb (\fR\fI\-b\fR\fB)\fR" 4
.IX Item "b (-b)"
Set bitrate expressed up in bits/s fo' \s-1CBR. \s0\fBtwolame\fR \fBb\fR
option is expressed up in kilobits/s. Default value is 128k.
.IP "\fBq (\fR\fI\-V\fR\fB)\fR" 4
.IX Item "q (-V)"
Set qualitizzle fo' experimenstrual \s-1VBR\s0 support. Maximum value range is
from \-50 ta 50, useful range is from \-10 ta 10. Da higher the
value, tha betta tha quality. This option is valid only rockin the
\&\fBffmpeg\fR command-line tool. For library intercourse users,
use \fBglobal_quality\fR.
.IP "\fBmode (\fR\fI\-\-mode\fR\fB)\fR" 4
.IX Item "mode (--mode)"
Set tha mode of tha resultin audio. Possible joints:
.RS 4
.IP "\fBauto\fR" 4
.IX Item "auto"
Choose mode automatically based on tha input. This is tha default.
.IP "\fBstereo\fR" 4
.IX Item "stereo"
Stereo
.IP "\fBjoint_stereo\fR" 4
.IX Item "joint_stereo"
Joint stereo
.IP "\fBdual_channel\fR" 4
.IX Item "dual_channel"
Dual channel
.IP "\fBmono\fR" 4
.IX Item "mono"
Mono
.RE
.RS 4
.RE
.IP "\fBpsymodel (\fR\fI\-\-psyc\-mode\fR\fB)\fR" 4
.IX Item "psymodel (--psyc-mode)"
Set psychoacoustic model ta use up in encoding. Da argument must be
an integer between \-1 n' 4, inclusive. Da higher tha value, the
betta tha quality. Da default value is 3.
.IP "\fBenergy_levels (\fR\fI\-\-energy\fR\fB)\fR" 4
.IX Item "energy_levels (--energy)"
Enable juice levels extensions when set ta 1. Da default value is
0 (disabled).
.IP "\fBerror_protection (\fR\fI\-\-protect\fR\fB)\fR" 4
.IX Item "error_protection (--protect)"
Enable \s-1CRC\s0 error protection when set ta 1. Da default value is 0
(disabled).
.IP "\fBcopyright (\fR\fI\-\-copyright\fR\fB)\fR" 4
.IX Item "copyright (--copyright)"
Set \s-1MPEG\s0 audio copyright flag when set ta 1. Da default value is 0
(disabled).
.IP "\fBoriginal gangsta (\fR\fI\-\-original\fR\fB)\fR" 4
.IX Item "original gangsta (--original)"
Set \s-1MPEG\s0 audio original gangsta flag when set ta 1. Da default value is 0
(disabled).
.SS "libvo-aacenc"
.IX Subsection "libvo-aacenc"
VisualOn \s-1AAC\s0 encoder.
.PP
Requires tha presence of tha libvo-aacenc headaz n' library during
configuration. I aint talkin' bout chicken n' gravy biatch. Yo ass need ta explicitly configure tha build with
\&\f(CW\*(C`\-\-enable\-libvo\-aacenc \-\-enable\-version3\*(C'\fR.
.PP
This encoder is considered ta be worse than the
natizzle experimenstrual FFmpeg \s-1AAC\s0 encoder, accordin to
multiple sources.
.PP
\fIOptions\fR
.IX Subsection "Options"
.PP
Da VisualOn \s-1AAC\s0 encoder only support encodin AAC-LC n' up ta 2
channels. Well shiiiit, it be also CBR-only.
.IP "\fBb\fR" 4
.IX Item "b"
Set bit rate up in bits/s.
.SS "libvo-amrwbenc"
.IX Subsection "libvo-amrwbenc"
VisualOn Adaptizzle Multi-Rate Wideband encoder.
.PP
Requires tha presence of tha libvo-amrwbenc headaz n' library during
configuration. I aint talkin' bout chicken n' gravy biatch. Yo ass need ta explicitly configure tha build with
\&\f(CW\*(C`\-\-enable\-libvo\-amrwbenc \-\-enable\-version3\*(C'\fR.
.PP
This be a mono-only encoder n' shit. Officially it only supports 16000Hz sample
rate yo, but you can override it by settin \fBstrict\fR to
\&\fBunofficial\fR or lower.
.PP
\fIOptions\fR
.IX Subsection "Options"
.IP "\fBb\fR" 4
.IX Item "b"
Set bitrate up in bits/s. Only tha followin bitrates is supported, otherwise
libavcodec will round ta tha nearest valid bitrate.
.RS 4
.IP "\fB6600\fR" 4
.IX Item "6600"
.PD 0
.IP "\fB8850\fR" 4
.IX Item "8850"
.IP "\fB12650\fR" 4
.IX Item "12650"
.IP "\fB14250\fR" 4
.IX Item "14250"
.IP "\fB15850\fR" 4
.IX Item "15850"
.IP "\fB18250\fR" 4
.IX Item "18250"
.IP "\fB19850\fR" 4
.IX Item "19850"
.IP "\fB23050\fR" 4
.IX Item "23050"
.IP "\fB23850\fR" 4
.IX Item "23850"
.RE
.RS 4
.RE
.IP "\fBdtx\fR" 4
.IX Item "dtx"
.PD
Allow discontinuous transmission (generate comfort noise) when set ta 1. The
default value is 0 (disabled).
.SS "libopus"
.IX Subsection "libopus"
libopus Opus Interactizzle Audio Codec encoder wrapper.
.PP
Requires tha presence of tha libopus headaz n' library during
configuration. I aint talkin' bout chicken n' gravy biatch. Yo ass need ta explicitly configure tha build with
\&\f(CW\*(C`\-\-enable\-libopus\*(C'\fR.
.PP
\fIOption Mapping\fR
.IX Subsection "Option Mapping"
.PP
Most libopus options is modeled afta tha \fBopusenc\fR utilitizzle from
opus-tools. Da followin be a option mappin chart describin options
supported by tha libopus wrapper, n' they \fBopusenc\fR\-equivalent
in parentheses.
.IP "\fBb (\fR\fIbitrate\fR\fB)\fR" 4
.IX Item "b (bitrate)"
Set tha bit rate up in bits/s.  FFmpegz \fBb\fR option is
expressed up in bits/s, while \fBopusenc\fRz \fBbitrate\fR in
kilobits/s.
.IP "\fBvbr (\fR\fIvbr\fR\fB,\fR \fIhard-cbr\fR\fB, and\fR \fIcvbr\fR\fB)\fR" 4
.IX Item "vbr (vbr, hard-cbr, n' cvbr)"
Set \s-1VBR\s0 mode. Da FFmpeg \fBvbr\fR option has tha following
valid arguments, wit tha they \fBopusenc\fR equivalent options
in parentheses:
.RS 4
.IP "\fBoff (\fR\fIhard-cbr\fR\fB)\fR" 4
.IX Item "off (hard-cbr)"
Use constant bit rate encoding.
.IP "\fBon (\fR\fIvbr\fR\fB)\fR" 4
.IX Item "on (vbr)"
Use variable bit rate encodin (the default).
.IP "\fBconstrained (\fR\fIcvbr\fR\fB)\fR" 4
.IX Item "constrained (cvbr)"
Use constrained variable bit rate encoding.
.RE
.RS 4
.RE
.IP "\fBcompression_level (\fR\fIcomp\fR\fB)\fR" 4
.IX Item "compression_level (comp)"
Set encodin algorithm complexity. Valid options is integers in
the 0\-10 range. 0 gives tha fastest encodes but lower quality, while 10
gives tha highest qualitizzle but slowest encoding. Da default is 10.
.IP "\fBframe_duration (\fR\fIframesize\fR\fB)\fR" 4
.IX Item "frame_duration (framesize)"
Set maximum frame size, or duration of a gangbangin' frame up in milliseconds. The
argument must be exactly tha following: 2.5, 5, 10, 20, 40, 60. Right back up in yo muthafuckin ass. Smaller
frame sizes big up lower latency but less qualitizzle at a given bitrate.
Sizes pimped outa than 20ms is only bangin-ass at fairly low bitrates.
Da default is 20ms.
.IP "\fBpacket_loss (\fR\fIexpect-loss\fR\fB)\fR" 4
.IX Item "packet_loss (expect-loss)"
Set expected packet loss cementage. Da default is 0.
.IP "\fBapplication (N.A.)\fR" 4
.IX Item "application (N.A.)"
Set intended application type. Valid options is listed below:
.RS 4
.IP "\fBvoip\fR" 4
.IX Item "voip"
Favor improved rap intelligibility.
.IP "\fBaudio\fR" 4
.IX Item "audio"
Favor faithfulnizz ta tha input (the default).
.IP "\fBlowdelay\fR" 4
.IX Item "lowdelay"
Restrict ta only tha lowest delay modes.
.RE
.RS 4
.RE
.IP "\fBcutoff (N.A.)\fR" 4
.IX Item "cutoff (N.A.)"
Set cutoff bandwidth up in Hz. Da argument must be exactly one of the
following: 4000, 6000, 8000, 12000, or 20000, correspondin to
narrowband, mediumband, wideband, supa wideband, n' fullband
respectively. Da default is 0 (cutoff disabled).
.SS "libvorbis"
.IX Subsection "libvorbis"
libvorbis encoder wrapper.
.PP
Requires tha presence of tha libvorbisenc headaz n' library during
configuration. I aint talkin' bout chicken n' gravy biatch. Yo ass need ta explicitly configure tha build with
\&\f(CW\*(C`\-\-enable\-libvorbis\*(C'\fR.
.PP
\fIOptions\fR
.IX Subsection "Options"
.PP
Da followin options is supported by tha libvorbis wrapper n' shit. The
\&\fBoggenc\fR\-equivalent of tha options is listed up in parentheses.
.PP
To git a mo' accurate n' extensive documentation of tha libvorbis
options, consult tha libvorbisencs n' \fBoggenc\fRz documentations.
See <\fBhttp://xiph.org/vorbis/\fR>,
<\fBhttp://wiki.xiph.org/Vorbis\-tools\fR>, n' \fIoggenc\fR\|(1).
.IP "\fBb (\fR\fI\-b\fR\fB)\fR" 4
.IX Item "b (-b)"
Set bitrate expressed up in bits/s fo' \s-1ABR. \s0\fBoggenc\fR \fB\-b\fR is
expressed up in kilobits/s.
.IP "\fBq (\fR\fI\-q\fR\fB)\fR" 4
.IX Item "q (-q)"
Set constant qualitizzle settin fo' \s-1VBR.\s0 Da value should be a gangbangin' float
number up in tha range of \-1.0 ta 10.0. Da higher tha value, tha better
the quality. Da default value is \fB3.0\fR.
.Sp
This option is valid only rockin tha \fBffmpeg\fR command-line tool.
For library intercourse users, use \fBglobal_quality\fR.
.IP "\fBcutoff (\fR\fI\-\-advanced\-encode\-option lowpass_frequency=N\fR\fB)\fR" 4
.IX Item "cutoff (--advanced-encode-option lowpass_frequency=N)"
Set cutoff bandwidth up in Hz, a value of 0 disablez cutoff. \fBoggenc\fR's
related option is expressed up in kHz. Da default value is \fB0\fR (cutoff
disabled).
.IP "\fBminrate (\fR\fI\-m\fR\fB)\fR" 4
.IX Item "minrate (-m)"
Set minimum bitrate expressed up in bits/s. \fBoggenc\fR \fB\-m\fR is
expressed up in kilobits/s.
.IP "\fBmaxrate (\fR\fI\-M\fR\fB)\fR" 4
.IX Item "maxrate (-M)"
Set maximum bitrate expressed up in bits/s. \fBoggenc\fR \fB\-M\fR is
expressed up in kilobits/s. This only has effect on \s-1ABR\s0 mode.
.IP "\fBiblock (\fR\fI\-\-advanced\-encode\-option impulse_noisetune=N\fR\fB)\fR" 4
.IX Item "iblock (--advanced-encode-option impulse_noisetune=N)"
Set noise floor bias fo' impulse blocks. Da value be a gangbangin' float number from
\&\-15.0 ta 0.0 fo' realz. A wack bias instructs tha encoder ta pay special attention
to tha crispnizz of transients up in tha encoded audio. Da tradeoff fo' better
transient response be a higher bitrate.
.SS "libwavpack"
.IX Subsection "libwavpack"
A wrapper providin WavPack encodin all up in libwavpack.
.PP
Only lossless mode rockin 32\-bit integer samplez is supported currently.
Da \fBcompression_level\fR option can be used ta control speed vs.
compression tradeoff, wit tha joints mapped ta libwavpack as bigs up:
.IP "\fB0\fR" 4
.IX Item "0"
Fast mode \- correspondin ta tha wavpack \fB\-f\fR option.
.IP "\fB1\fR" 4
.IX Item "1"
Normal (default) settings.
.IP "\fB2\fR" 4
.IX Item "2"
High qualitizzle \- correspondin ta tha wavpack \fB\-h\fR option.
.IP "\fB3\fR" 4
.IX Item "3"
Straight-up high qualitizzle \- correspondin ta tha wavpack \fB\-hh\fR option.
.IP "\fB4\-8\fR" 4
.IX Item "4-8"
Same as 3 yo, but wit extra processin enabled \- correspondin ta tha wavpack
\&\fB\-x\fR option. I aint talkin' bout chicken n' gravy biatch. I.e. 4 is tha same ol' dirty as \fB\-x2\fR n' 8 is tha same ol' dirty as
\&\fB\-x6\fR.
.SH "VIDEO ENCODERS"
.IX Header "VIDEO ENCODERS"
A description of a shitload of tha currently available vizzle encoders
bigs up.
.SS "libtheora"
.IX Subsection "libtheora"
Theora format supported all up in libtheora.
.PP
Requires tha presence of tha libtheora headaz n' library during
configuration. I aint talkin' bout chicken n' gravy biatch. Yo ass need ta explicitly configure tha build with
\&\f(CW\*(C`\-\-enable\-libtheora\*(C'\fR.
.PP
\fIOptions\fR
.IX Subsection "Options"
.PP
Da followin global options is mapped ta internal libtheora options
which affect tha qualitizzle n' tha bitrate of tha encoded stream.
.IP "\fBb\fR" 4
.IX Item "b"
Set tha vizzle bitrate, only works if tha \f(CW\*(C`qscale\*(C'\fR flag in
\&\fBflags\fR aint enabled.
.IP "\fBflags\fR" 4
.IX Item "flags"
Used ta enable constant qualitizzle mode encodin all up in the
\&\fBqscale\fR flag, n' ta enable tha \f(CW\*(C`pass1\*(C'\fR n' \f(CW\*(C`pass2\*(C'\fR
modes.
.IP "\fBg\fR" 4
.IX Item "g"
Set tha \s-1GOP\s0 size.
.IP "\fBglobal_quality\fR" 4
.IX Item "global_quality"
Set tha global qualitizzle up in lambda units, only works if the
\&\f(CW\*(C`qscale\*(C'\fR flag up in \fBflags\fR is enabled. Y'all KNOW dat shit, muthafucka! Da value is clipped
in tha [0 \- 10*\f(CW\*(C`FF_QP2LAMBDA\*(C'\fR] range, n' then multiplied fo' 6.3
to git a value up in tha natizzle libtheora range [0\-63] fo' realz. A higher value
correspondz ta a higher quality.
.Sp
For example, ta set maximum constant qualitizzle encodin with
\&\fBffmpeg\fR:
.Sp
.Vb 1
\&        ffmpeg \-i INPUT \-flags:v qscale \-global_quality:v "10*QP2LAMBDA" \-codec:v libtheora OUTPUT.ogg
.Ve
.SS "libvpx"
.IX Subsection "libvpx"
\&\s-1VP8\s0 format supported all up in libvpx.
.PP
Requires tha presence of tha libvpx headaz n' library durin configuration.
Yo ass need ta explicitly configure tha build wit \f(CW\*(C`\-\-enable\-libvpx\*(C'\fR.
.PP
\fIOptions\fR
.IX Subsection "Options"
.PP
Mappin from FFmpeg ta libvpx options wit conversion notes up in parentheses.
.IP "\fBthreads\fR" 4
.IX Item "threads"
g_threads
.IP "\fBprofile\fR" 4
.IX Item "profile"
g_profile
.IP "\fBvb\fR" 4
.IX Item "vb"
rc_target_bitrate
.IP "\fBg\fR" 4
.IX Item "g"
kf_max_dist
.IP "\fBkeyint_min\fR" 4
.IX Item "keyint_min"
kf_min_dist
.IP "\fBqmin\fR" 4
.IX Item "qmin"
rc_min_quantizer
.IP "\fBqmax\fR" 4
.IX Item "qmax"
rc_max_quantizer
.IP "\fBbufsize, vb\fR" 4
.IX Item "bufsize, vb"
rc_buf_sz
\&\f(CW\*(C`(bufsize * 1000 / vb)\*(C'\fR
.Sp
rc_buf_optimal_sz
\&\f(CW\*(C`(bufsize * 1000 / vb * 5 / 6)\*(C'\fR
.IP "\fBrc_init_occupancy, vb\fR" 4
.IX Item "rc_init_occupancy, vb"
rc_buf_initial_sz
\&\f(CW\*(C`(rc_init_occupancy * 1000 / vb)\*(C'\fR
.IP "\fBrc_buffer_aggressivity\fR" 4
.IX Item "rc_buffer_aggressivity"
rc_undershoot_pct
.IP "\fBskip_threshold\fR" 4
.IX Item "skip_threshold"
rc_dropframe_thresh
.IP "\fBqcomp\fR" 4
.IX Item "qcomp"
rc_2pass_vbr_bias_pct
.IP "\fBmaxrate, vb\fR" 4
.IX Item "maxrate, vb"
rc_2pass_vbr_maxsection_pct
\&\f(CW\*(C`(maxrate * 100 / vb)\*(C'\fR
.IP "\fBminrate, vb\fR" 4
.IX Item "minrate, vb"
rc_2pass_vbr_minsection_pct
\&\f(CW\*(C`(minrate * 100 / vb)\*(C'\fR
.IP "\fBminrate, maxrate, vb\fR" 4
.IX Item "minrate, maxrate, vb"
\&\f(CW\*(C`VPX_CBR\*(C'\fR
\&\f(CW\*(C`(minrate == maxrate == vb)\*(C'\fR
.IP "\fBcrf\fR" 4
.IX Item "crf"
\&\f(CW\*(C`VPX_CQ\*(C'\fR, \f(CW\*(C`VP8E_SET_CQ_LEVEL\*(C'\fR
.IP "\fBquality\fR" 4
.IX Item "quality"
.RS 4
.PD 0
.IP "\fIbest\fR" 4
.IX Item "best"
.PD
\&\f(CW\*(C`VPX_DL_BEST_QUALITY\*(C'\fR
.IP "\fIgood\fR" 4
.IX Item "good"
\&\f(CW\*(C`VPX_DL_GOOD_QUALITY\*(C'\fR
.IP "\fIrealtime\fR" 4
.IX Item "realtime"
\&\f(CW\*(C`VPX_DL_REALTIME\*(C'\fR
.RE
.RS 4
.RE
.IP "\fBspeed\fR" 4
.IX Item "speed"
\&\f(CW\*(C`VP8E_SET_CPUUSED\*(C'\fR
.IP "\fBnr\fR" 4
.IX Item "nr"
\&\f(CW\*(C`VP8E_SET_NOISE_SENSITIVITY\*(C'\fR
.IP "\fBmb_threshold\fR" 4
.IX Item "mb_threshold"
\&\f(CW\*(C`VP8E_SET_STATIC_THRESHOLD\*(C'\fR
.IP "\fBslices\fR" 4
.IX Item "slices"
\&\f(CW\*(C`VP8E_SET_TOKEN_PARTITIONS\*(C'\fR
.IP "\fBmax-intra-rate\fR" 4
.IX Item "max-intra-rate"
\&\f(CW\*(C`VP8E_SET_MAX_INTRA_BITRATE_PCT\*(C'\fR
.IP "\fBforce_key_frames\fR" 4
.IX Item "force_key_frames"
\&\f(CW\*(C`VPX_EFLAG_FORCE_KF\*(C'\fR
.IP "\fBAlternate reference frame related\fR" 4
.IX Item "Alternate reference frame related"
.RS 4
.PD 0
.IP "\fBvp8flags altref\fR" 4
.IX Item "vp8flags altref"
.PD
\&\f(CW\*(C`VP8E_SET_ENABLEAUTOALTREF\*(C'\fR
.IP "\fIarnr_max_frames\fR" 4
.IX Item "arnr_max_frames"
\&\f(CW\*(C`VP8E_SET_ARNR_MAXFRAMES\*(C'\fR
.IP "\fIarnr_type\fR" 4
.IX Item "arnr_type"
\&\f(CW\*(C`VP8E_SET_ARNR_TYPE\*(C'\fR
.IP "\fIarnr_strength\fR" 4
.IX Item "arnr_strength"
\&\f(CW\*(C`VP8E_SET_ARNR_STRENGTH\*(C'\fR
.IP "\fIrc_lookahead\fR" 4
.IX Item "rc_lookahead"
g_lag_in_frames
.RE
.RS 4
.RE
.IP "\fBvp8flags error_resilient\fR" 4
.IX Item "vp8flags error_resilient"
g_error_resilient
.PP
For mo' shiznit bout libvpx see:
<\fBhttp://www.webmproject.org/\fR>
.SS "libx264"
.IX Subsection "libx264"
x264 H.264/MPEG\-4 \s-1AVC\s0 encoder wrapper.
.PP
This encoder requires tha presence of tha libx264 headaz n' library
durin configuration. I aint talkin' bout chicken n' gravy biatch. Yo ass need ta explicitly configure tha build with
\&\f(CW\*(C`\-\-enable\-libx264\*(C'\fR.
.PP
libx264 supports a impressive number of features, includin 8x8 and
4x4 adaptizzle spatial transform, adaptizzle B\-frame placement, \s-1CAVLC/CABAC\s0
entropy coding, interlacin (\s-1MBAFF\s0), lossless mode, psy optimizations
for detail retention (adaptizzle quantization, psy-RD, psy-trellis).
.PP
Many libx264 encoder options is mapped ta FFmpeg global codec
options, while unique encoder options is provided all up in private
options fo' realz. Additionally tha \fBx264opts\fR n' \fBx264\-params\fR
private options allows ta pass a list of key=value tuplez as accepted
by tha libx264 \f(CW\*(C`x264_param_parse\*(C'\fR function.
.PP
Da x264 project joint be at
<\fBhttp://www.videolan.org/developers/x264.html\fR>.
.PP
\fIOptions\fR
.IX Subsection "Options"
.PP
Da followin options is supported by tha libx264 wrapper n' shit. The
\&\fBx264\fR\-equivalent options or joints is listed up in parentheses
for easy as fuck  migration.
.PP
To reduce tha duplication of documentation, only tha private options
and some others requirin special attention is documented here, so peek-a-boo, clear tha way, I be comin' thru fo'sho. For
the documentation of tha undocumented generic options, see
the Codec Options chapter.
.PP
To git a mo' accurate n' extensive documentation of tha libx264
options, invoke tha command \fBx264 \-\-full\-help\fR or consult
the libx264 documentation.
.IP "\fBb (\fR\fIbitrate\fR\fB)\fR" 4
.IX Item "b (bitrate)"
Set bitrate up in bits/s. Note dat FFmpegz \fBb\fR option is
expressed up in bits/s, while \fBx264\fRz \fBbitrate\fR is in
kilobits/s.
.IP "\fBbf (\fR\fIbframes\fR\fB)\fR" 4
.IX Item "bf (bframes)"
.PD 0
.IP "\fBg (\fR\fIkeyint\fR\fB)\fR" 4
.IX Item "g (keyint)"
.IP "\fBqmax (\fR\fIqpmax\fR\fB)\fR" 4
.IX Item "qmax (qpmax)"
.IP "\fBqmin (\fR\fIqpmin\fR\fB)\fR" 4
.IX Item "qmin (qpmin)"
.IP "\fBqdiff (\fR\fIqpstep\fR\fB)\fR" 4
.IX Item "qdiff (qpstep)"
.IP "\fBqblur (\fR\fIqblur\fR\fB)\fR" 4
.IX Item "qblur (qblur)"
.IP "\fBqcomp (\fR\fIqcomp\fR\fB)\fR" 4
.IX Item "qcomp (qcomp)"
.IP "\fBrefs (\fR\fIref\fR\fB)\fR" 4
.IX Item "refs (ref)"
.IP "\fBsc_threshold (\fR\fIscenecut\fR\fB)\fR" 4
.IX Item "sc_threshold (scenecut)"
.IP "\fBtrellis (\fR\fItrellis\fR\fB)\fR" 4
.IX Item "trellis (trellis)"
.IP "\fBnr  (\fR\fInr\fR\fB)\fR" 4
.IX Item "nr (nr)"
.IP "\fBme_range (\fR\fImerange\fR\fB)\fR" 4
.IX Item "me_range (merange)"
.IP "\fBme_method (\fR\fIme\fR\fB)\fR" 4
.IX Item "me_method (me)"
.PD
Set motion estimation method. Y'all KNOW dat shit, muthafucka! Possible joints up in tha decreasin order
of speed:
.RS 4
.IP "\fBdia (\fR\fIdia\fR\fB)\fR" 4
.IX Item "dia (dia)"
.PD 0
.IP "\fBepzs (\fR\fIdia\fR\fB)\fR" 4
.IX Item "epzs (dia)"
.PD
Diamond search wit radius 1 (fastest). \fBepzs\fR be a alias for
\&\fBdia\fR.
.IP "\fBhex (\fR\fIhex\fR\fB)\fR" 4
.IX Item "hex (hex)"
Hexagonal search wit radius 2.
.IP "\fBumh (\fR\fIumh\fR\fB)\fR" 4
.IX Item "umh (umh)"
Uneven multi-hexagon search.
.IP "\fBesa (\fR\fIesa\fR\fB)\fR" 4
.IX Item "esa (esa)"
Exhaustizzle search.
.IP "\fBtesa (\fR\fItesa\fR\fB)\fR" 4
.IX Item "tesa (tesa)"
Hadamard exhaustizzle search (slowest).
.RE
.RS 4
.RE
.IP "\fBsubq (\fR\fIsubme\fR\fB)\fR" 4
.IX Item "subq (subme)"
.PD 0
.IP "\fBb_strategy (\fR\fIb\-adapt\fR\fB)\fR" 4
.IX Item "b_strategy (b-adapt)"
.IP "\fBkeyint_min (\fR\fImin-keyint\fR\fB)\fR" 4
.IX Item "keyint_min (min-keyint)"
.IP "\fBcoder\fR" 4
.IX Item "coder"
.PD
Set entropy encoder n' shit. Possible joints:
.RS 4
.IP "\fBac\fR" 4
.IX Item "ac"
Enable \s-1CABAC.\s0
.IP "\fBvlc\fR" 4
.IX Item "vlc"
Enable \s-1CAVLC\s0 n' disable \s-1CABAC.\s0 It generates tha same ol' dirty effect as
\&\fBx264\fRz \fB\-\-no\-cabac\fR option.
.RE
.RS 4
.RE
.IP "\fBcmp\fR" 4
.IX Item "cmp"
Set full pixel motion estimation comparation algorithm. Possible joints:
.RS 4
.IP "\fBchroma\fR" 4
.IX Item "chroma"
Enable chroma up in motion estimation.
.IP "\fBsad\fR" 4
.IX Item "sad"
Ignore chroma up in motion estimation. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it generates tha same ol' dirty effect as
\&\fBx264\fRz \fB\-\-no\-chroma\-me\fR option.
.RE
.RS 4
.RE
.IP "\fBthreadz (\fR\fIthreads\fR\fB)\fR" 4
.IX Item "threadz (threads)"
.PD 0
.IP "\fBthread_type\fR" 4
.IX Item "thread_type"
.PD
Set multithreadin technique. Possible joints:
.RS 4
.IP "\fBslice\fR" 4
.IX Item "slice"
Slice-based multithreading. Well shiiiit, it generates tha same ol' dirty effect as
\&\fBx264\fRz \fB\-\-sliced\-threads\fR option.
.IP "\fBframe\fR" 4
.IX Item "frame"
Frame-based multithreading.
.RE
.RS 4
.RE
.IP "\fBflags\fR" 4
.IX Item "flags"
Set encodin flags. Well shiiiit, it can be used ta disable closed \s-1GOP\s0 n' enable
open \s-1GOP\s0 by settin it ta \f(CW\*(C`\-cgop\*(C'\fR. Da result is similar to
the behavior of \fBx264\fRz \fB\-\-open\-gop\fR option.
.IP "\fBrc_init_occupancy (\fR\fIvbv-init\fR\fB)\fR" 4
.IX Item "rc_init_occupancy (vbv-init)"
.PD 0
.IP "\fBpreset (\fR\fIpreset\fR\fB)\fR" 4
.IX Item "preset (preset)"
.PD
Set tha encodin preset.
.IP "\fBtune (\fR\fItune\fR\fB)\fR" 4
.IX Item "tune (tune)"
Set tunin of tha encodin params.
.IP "\fBprofile (\fR\fIprofile\fR\fB)\fR" 4
.IX Item "profile (profile)"
Set flava restrictions.
.IP "\fBfastfirstpass\fR" 4
.IX Item "fastfirstpass"
Enable fast settings when encodin first pass, when set ta 1. When set
to 0, it has tha same ol' dirty effect of \fBx264\fR's
\&\fB\-\-slow\-firstpass\fR option.
.IP "\fBcrf (\fR\fIcrf\fR\fB)\fR" 4
.IX Item "crf (crf)"
Set tha qualitizzle fo' constant qualitizzle mode.
.IP "\fBcrf_max (\fR\fIcrf-max\fR\fB)\fR" 4
.IX Item "crf_max (crf-max)"
In \s-1CRF\s0 mode, prevents \s-1VBV\s0 from lowerin qualitizzle beyond dis point.
.IP "\fBqp (\fR\fIqp\fR\fB)\fR" 4
.IX Item "qp (qp)"
Set constant quantization rate control method parameter.
.IP "\fBaq-mode (\fR\fIaq-mode\fR\fB)\fR" 4
.IX Item "aq-mode (aq-mode)"
Set \s-1AQ\s0 method. Y'all KNOW dat shit, muthafucka! Possible joints:
.RS 4
.IP "\fBnone (\fR\fI0\fR\fB)\fR" 4
.IX Item "none (0)"
Disabled.
.IP "\fBvariizzle (\fR\fI1\fR\fB)\fR" 4
.IX Item "variizzle (1)"
Variizzle \s-1AQ \s0(complexitizzle mask).
.IP "\fBautovariizzle (\fR\fI2\fR\fB)\fR" 4
.IX Item "autovariizzle (2)"
Auto-variizzle \s-1AQ \s0(experimental).
.RE
.RS 4
.RE
.IP "\fBaq-strength (\fR\fIaq-strength\fR\fB)\fR" 4
.IX Item "aq-strength (aq-strength)"
Set \s-1AQ\s0 strength, reduce blockin n' blurrin up in flat n' textured areas.
.IP "\fBpsy\fR" 4
.IX Item "psy"
Use psychovisual optimizations when set ta 1. When set ta 0, it has the
same effect as \fBx264\fRz \fB\-\-no\-psy\fR option.
.IP "\fBpsy-rd  (\fR\fIpsy-rd\fR\fB)\fR" 4
.IX Item "psy-rd (psy-rd)"
Set strength of psychovisual optimization, in
\&\fIpsy-rd\fR:\fIpsy-trellis\fR format.
.IP "\fBrc-lookahead (\fR\fIrc-lookahead\fR\fB)\fR" 4
.IX Item "rc-lookahead (rc-lookahead)"
Set number of frames ta look ahead fo' frametype n' ratecontrol.
.IP "\fBweightb\fR" 4
.IX Item "weightb"
Enable weighted prediction fo' B\-frames when set ta 1. When set ta 0,
it has tha same ol' dirty effect as \fBx264\fRz \fB\-\-no\-weightb\fR option.
.IP "\fBweightp (\fR\fIweightp\fR\fB)\fR" 4
.IX Item "weightp (weightp)"
Set weighted prediction method fo' P\-frames. Possible joints:
.RS 4
.IP "\fBnone (\fR\fI0\fR\fB)\fR" 4
.IX Item "none (0)"
Disabled
.IP "\fBsimple (\fR\fI1\fR\fB)\fR" 4
.IX Item "simple (1)"
Enable only weighted refs
.IP "\fBsmart (\fR\fI2\fR\fB)\fR" 4
.IX Item "smart (2)"
Enable both weighted refs n' duplicates
.RE
.RS 4
.RE
.IP "\fBssim (\fR\fIssim\fR\fB)\fR" 4
.IX Item "ssim (ssim)"
Enable calculation n' printin \s-1SSIM\s0 stats afta tha encoding.
.IP "\fBintra-refresh (\fR\fIintra-refresh\fR\fB)\fR" 4
.IX Item "intra-refresh (intra-refresh)"
Enable tha use of Periodic Intra Refresh instead of \s-1IDR\s0 frames when set
to 1.
.IP "\fBbluray-compat (\fR\fIbluray-compat\fR\fB)\fR" 4
.IX Item "bluray-compat (bluray-compat)"
Configure tha encoder ta be compatible wit tha bluray standard.
It be a gangbangin' finger-lickin' dirty-ass shorthand fo' settin \*(L"bluray\-compat=1 force\-cfr=1\*(R".
.IP "\fBb\-bias (\fR\fIb\-bias\fR\fB)\fR" 4
.IX Item "b-bias (b-bias)"
Set tha influence on how tha fuck often B\-frames is used.
.IP "\fBb\-pyramid (\fR\fIb\-pyramid\fR\fB)\fR" 4
.IX Item "b-pyramid (b-pyramid)"
Set method fo' keepin of some B\-frames as references. Possible joints:
.RS 4
.IP "\fBnone (\fR\fInone\fR\fB)\fR" 4
.IX Item "none (none)"
Disabled.
.IP "\fBstrict (\fR\fIstrict\fR\fB)\fR" 4
.IX Item "strict (strict)"
Strictly hierarchical pyramid.
.IP "\fBnormal (\fR\fInormal\fR\fB)\fR" 4
.IX Item "normal (normal)"
Non-strict (not Blu-ray compatible).
.RE
.RS 4
.RE
.IP "\fBmixed-refs\fR" 4
.IX Item "mixed-refs"
Enable tha use of one reference per partition, as opposed ta one
reference per macroblock when set ta 1. When set ta 0, it has the
same effect as \fBx264\fRz \fB\-\-no\-mixed\-refs\fR option.
.IP "\fB8x8dct\fR" 4
.IX Item "8x8dct"
Enable adaptizzle spatial transform (high flava 8x8 transform)
when set ta 1. When set ta 0, it has tha same ol' dirty effect as
\&\fBx264\fRz \fB\-\-no\-8x8dct\fR option.
.IP "\fBfast-pskip\fR" 4
.IX Item "fast-pskip"
Enable early \s-1SKIP\s0 detection on P\-frames when set ta 1. When set
to 0, it has tha same ol' dirty effect as \fBx264\fR's
\&\fB\-\-no\-fast\-pskip\fR option.
.IP "\fBaud (\fR\fIaud\fR\fB)\fR" 4
.IX Item "aud (aud)"
Enable use of access unit delimitas when set ta 1.
.IP "\fBmbtree\fR" 4
.IX Item "mbtree"
Enable use macroblock tree ratecontrol when set ta 1. When set
to 0, it has tha same ol' dirty effect as \fBx264\fR's
\&\fB\-\-no\-mbtree\fR option.
.IP "\fBdeblock (\fR\fIdeblock\fR\fB)\fR" 4
.IX Item "deblock (deblock)"
Set loop filta parameters, up in \fIalpha\fR:\fIbeta\fR form.
.IP "\fBcplxblur (\fR\fIcplxblur\fR\fB)\fR" 4
.IX Item "cplxblur (cplxblur)"
Set fluctuations reduction up in \s-1QP \s0(before curve compression).
.IP "\fBpartitions (\fR\fIpartitions\fR\fB)\fR" 4
.IX Item "partitions (partitions)"
Set partitions ta consider as a cold-ass lil comma-separated list of. Possible
values up in tha list:
.RS 4
.IP "\fBp8x8\fR" 4
.IX Item "p8x8"
8x8 P\-frame partition.
.IP "\fBp4x4\fR" 4
.IX Item "p4x4"
4x4 P\-frame partition.
.IP "\fBb8x8\fR" 4
.IX Item "b8x8"
4x4 B\-frame partition.
.IP "\fBi8x8\fR" 4
.IX Item "i8x8"
8x8 I\-frame partition.
.IP "\fBi4x4\fR" 4
.IX Item "i4x4"
4x4 I\-frame partition.
(Enablin \fBp4x4\fR requires \fBp8x8\fR ta be enabled. Y'all KNOW dat shit, muthafucka! Enabling
\&\fBi8x8\fR requires adaptizzle spatial transform (\fB8x8dct\fR
option) ta be enabled.)
.IP "\fBnone (\fR\fInone\fR\fB)\fR" 4
.IX Item "none (none)"
Do not consider any partitions.
.IP "\fBall (\fR\fIall\fR\fB)\fR" 4
.IX Item "all (all)"
Consider every last muthafuckin partition.
.RE
.RS 4
.RE
.IP "\fBdirect-pred (\fR\fIdirect\fR\fB)\fR" 4
.IX Item "direct-pred (direct)"
Set direct \s-1MV\s0 prediction mode. Possible joints:
.RS 4
.IP "\fBnone (\fR\fInone\fR\fB)\fR" 4
.IX Item "none (none)"
Disable \s-1MV\s0 prediction.
.IP "\fBspatial (\fR\fIspatial\fR\fB)\fR" 4
.IX Item "spatial (spatial)"
Enable spatial predicting.
.IP "\fBtemporal (\fR\fItemporal\fR\fB)\fR" 4
.IX Item "temporal (temporal)"
Enable temporal predicting.
.IP "\fBauto (\fR\fIauto\fR\fB)\fR" 4
.IX Item "auto (auto)"
Automatically decided.
.RE
.RS 4
.RE
.IP "\fBslice-max-size (\fR\fIslice-max-size\fR\fB)\fR" 4
.IX Item "slice-max-size (slice-max-size)"
Set tha limit of tha size of each slice up in bytes. If not specified
but \s-1RTP\s0 payload size (\fBps\fR) is specified, dat is used.
.IP "\fBstats (\fR\fIstats\fR\fB)\fR" 4
.IX Item "stats (stats)"
Set tha file name fo' multi-pass stats.
.IP "\fBnal-hrd (\fR\fInal-hrd\fR\fB)\fR" 4
.IX Item "nal-hrd (nal-hrd)"
Set signal \s-1HRD\s0 shiznit (requires \fBvbv-bufsize\fR ta be set).
Possible joints:
.RS 4
.IP "\fBnone (\fR\fInone\fR\fB)\fR" 4
.IX Item "none (none)"
Disable \s-1HRD\s0 shiznit signaling.
.IP "\fBvbr (\fR\fIvbr\fR\fB)\fR" 4
.IX Item "vbr (vbr)"
Variable bit rate.
.IP "\fBcbr (\fR\fIcbr\fR\fB)\fR" 4
.IX Item "cbr (cbr)"
Constant bit rate (not allowed up in \s-1MP4\s0 container).
.RE
.RS 4
.RE
.IP "\fBx264opts (N.A.)\fR" 4
.IX Item "x264opts (N.A.)"
Set any x264 option, peep \fBx264 \-\-fullhelp\fR fo' a list.
.Sp
Argument be a list of \fIkey\fR=\fIvalue\fR couplez separated by
\&\*(L":\*(R". In \fIfilter\fR n' \fIpsy-rd\fR options dat use \*(L":\*(R" as a separator
themselves, use \*(L",\*(R" instead. Y'all KNOW dat shit, muthafucka! They accept it as well since long ago but this
is kept undocumented fo' some reason.
.Sp
For example ta specify libx264 encodin options wit \fBffmpeg\fR:
.Sp
.Vb 1
\&        ffmpeg \-i foo.mpg \-vcodec libx264 \-x264opts keyint=123:min\-keyint=20 \-an out.mkv
.Ve
.IP "\fBx264\-params (N.A.)\fR" 4
.IX Item "x264-params (N.A.)"
Override tha x264 configuration rockin a :\-separated list of key=value
parameters.
.Sp
This option is functionally tha same as tha \fBx264opts\fR yo, but is
duplicated fo' compabilitizzle wit tha Libav fork.
.Sp
For example ta specify libx264 encodin options wit \fBffmpeg\fR:
.Sp
.Vb 3
\&        ffmpeg \-i INPUT \-c:v libx264 \-x264\-params level=30:bframes=0:weightp=0:\e
\&        cabac=0:ref=1:vbv\-maxrate=768:vbv\-bufsize=2000:analyse=all:me=umh:\e
\&        no\-fast\-pskip=1:subq=6:8x8dct=0:trellis=0 OUTPUT
.Ve
.PP
Encodin ffpresets fo' common usages is provided so they can be used wit the
general presets system (e.g. passin tha \fBpre\fR option).
.SS "libxvid"
.IX Subsection "libxvid"
Xvid \s-1MPEG\-4\s0 Part 2 encoder wrapper.
.PP
This encoder requires tha presence of tha libxvidcore headaz n' library
durin configuration. I aint talkin' bout chicken n' gravy biatch. Yo ass need ta explicitly configure tha build with
\&\f(CW\*(C`\-\-enable\-libxvid \-\-enable\-gpl\*(C'\fR.
.PP
Da natizzle \f(CW\*(C`mpeg4\*(C'\fR encoder supports tha \s-1MPEG\-4\s0 Part 2 format, so
users can encode ta dis format without dis library.
.PP
\fIOptions\fR
.IX Subsection "Options"
.PP
Da followin options is supported by tha libxvid wrapper n' shit. Right back up in yo muthafuckin ass. Some of
the followin options is listed but is not documented, and
correspond ta shared codec options. Right back up in yo muthafuckin ass. See tha Codec
Options chapta fo' they documentation. I aint talkin' bout chicken n' gravy biatch. Da other shared options
which is not listed have no effect fo' tha libxvid encoder.
.IP "\fBb\fR" 4
.IX Item "b"
.PD 0
.IP "\fBg\fR" 4
.IX Item "g"
.IP "\fBqmin\fR" 4
.IX Item "qmin"
.IP "\fBqmax\fR" 4
.IX Item "qmax"
.IP "\fBmpeg_quant\fR" 4
.IX Item "mpeg_quant"
.IP "\fBthreads\fR" 4
.IX Item "threads"
.IP "\fBbf\fR" 4
.IX Item "bf"
.IP "\fBb_qfactor\fR" 4
.IX Item "b_qfactor"
.IP "\fBb_qoffset\fR" 4
.IX Item "b_qoffset"
.IP "\fBflags\fR" 4
.IX Item "flags"
.PD
Set specific encodin flags. Possible joints:
.RS 4
.IP "\fBmv4\fR" 4
.IX Item "mv4"
Use four motion vector by macroblock.
.IP "\fBaic\fR" 4
.IX Item "aic"
Enable high qualitizzle \s-1AC\s0 prediction.
.IP "\fBgray\fR" 4
.IX Item "gray"
Only encode grayscale.
.IP "\fBgmc\fR" 4
.IX Item "gmc"
Enable tha use of global motion compensation (\s-1GMC\s0).
.IP "\fBqpel\fR" 4
.IX Item "qpel"
Enable quarter-pixel motion compensation.
.IP "\fBcgop\fR" 4
.IX Item "cgop"
Enable closed \s-1GOP.\s0
.IP "\fBglobal_header\fR" 4
.IX Item "global_header"
Place global headaz up in extradata instead of every last muthafuckin keyframe.
.RE
.RS 4
.RE
.IP "\fBtrellis\fR" 4
.IX Item "trellis"
.PD 0
.IP "\fBme_method\fR" 4
.IX Item "me_method"
.PD
Set motion estimation method. Y'all KNOW dat shit, muthafucka! Possible joints up in decreasin order of
speed n' increasin order of quality:
.RS 4
.IP "\fBzero\fR" 4
.IX Item "zero"
Use no motion estimation (default).
.IP "\fBphods\fR" 4
.IX Item "phods"
.PD 0
.IP "\fBx1\fR" 4
.IX Item "x1"
.IP "\fBlog\fR" 4
.IX Item "log"
.PD
Enable advanced diamond zonal search fo' 16x16 blocks n' half-pixel
refinement fo' 16x16 blocks. \fBx1\fR n' \fBlog\fR is aliases for
\&\fBphods\fR.
.IP "\fBepzs\fR" 4
.IX Item "epzs"
Enable all of tha thangs busted lyrics bout above, plus advanced diamond zonal
search fo' 8x8 blocks, half-pixel refinement fo' 8x8 blocks, n' motion
estimation on chroma planes.
.IP "\fBfull\fR" 4
.IX Item "full"
Enable all of tha thangs busted lyrics bout above, plus extended 16x16 n' 8x8
blocks search.
.RE
.RS 4
.RE
.IP "\fBmbd\fR" 4
.IX Item "mbd"
Set macroblock decision algorithm. Possible joints up in tha increasing
order of quality:
.RS 4
.IP "\fBsimple\fR" 4
.IX Item "simple"
Use macroblock comparin function algorithm (default).
.IP "\fBbits\fR" 4
.IX Item "bits"
Enable rate distortion-based half pixel n' quarta pixel refinement for
16x16 blocks.
.IP "\fBrd\fR" 4
.IX Item "rd"
Enable all of tha thangs busted lyrics bout above, plus rate distortion-based
half pixel n' quarta pixel refinement fo' 8x8 blocks, n' rate
distortion-based search rockin square pattern.
.RE
.RS 4
.RE
.IP "\fBlumi_aq\fR" 4
.IX Item "lumi_aq"
Enable lumi maskin adaptizzle quantization when set ta 1. Default is 0
(disabled).
.IP "\fBvariance_aq\fR" 4
.IX Item "variance_aq"
Enable variizzle adaptizzle quantization when set ta 1. Default is 0
(disabled).
.Sp
When combined wit \fBlumi_aq\fR, tha resultin qualitizzle will not
be betta than any of tha two specified individually. In other
words, tha resultin qualitizzle is ghon be tha worse one of tha two
effects.
.IP "\fBssim\fR" 4
.IX Item "ssim"
Set structural similaritizzle (\s-1SSIM\s0) displayin method. Y'all KNOW dat shit, muthafucka! Possible joints:
.RS 4
.IP "\fBoff\fR" 4
.IX Item "off"
Disable displayin of \s-1SSIM\s0 shiznit.
.IP "\fBavg\fR" 4
.IX Item "avg"
Output average \s-1SSIM\s0 all up in tha end of encodin ta stdout. Da format of
showin tha average \s-1SSIM\s0 is:
.Sp
.Vb 1
\&        Average SSIM: %f
.Ve
.Sp
For playas whoz ass is not familiar wit C, \f(CW%f\fR means a gangbangin' float number, or
a decimal (e.g. 0.939232).
.IP "\fBframe\fR" 4
.IX Item "frame"
Output both per-frame \s-1SSIM\s0 data durin encodin n' average \s-1SSIM\s0 at
the end of encodin ta stdout. Da format of per-frame shiznit
is:
.Sp
.Vb 1
\&               SSIM: avg: %1.3f min: %1.3f max: %1.3f
.Ve
.Sp
For playas whoz ass is not familiar wit C, \f(CW%1\fR.3f means a gangbangin' float number
rounded ta 3 digits afta tha dot (e.g. 0.932).
.RE
.RS 4
.RE
.IP "\fBssim_acc\fR" 4
.IX Item "ssim_acc"
Set \s-1SSIM\s0 accuracy. Valid options is integers within tha range of
0\-4, while 0 gives da most thugged-out accurate result n' 4 computes the
fastest.
.SS "png"
.IX Subsection "png"
\&\s-1PNG\s0 image encoder.
.PP
\fIPrivate options\fR
.IX Subsection "Private options"
.IP "\fBdpi\fR \fIinteger\fR" 4
.IX Item "dpi integer"
Set physical densitizzle of pixels, up in dots per inch, unset by default
.IP "\fBdpm\fR \fIinteger\fR" 4
.IX Item "dpm integer"
Set physical densitizzle of pixels, up in dots per meter, unset by default
.SS "ProRes"
.IX Subsection "ProRes"
Applez ProRes encoder.
.PP
FFmpeg gotz nuff 2 ProRes encoders, tha prores-aw n' prores-ks encoder.
Da used encoder can be chizzlen wit tha \f(CW\*(C`\-vcodec\*(C'\fR option.
.PP
\fIPrivate Options fo' prores-ks\fR
.IX Subsection "Private Options fo' prores-ks"
.IP "\fBprofile\fR \fIinteger\fR" 4
.IX Item "profile integer"
Select tha ProRes flava ta encode
.RS 4
.IP "\fBproxy\fR" 4
.IX Item "proxy"
.PD 0
.IP "\fBlt\fR" 4
.IX Item "lt"
.IP "\fBstandard\fR" 4
.IX Item "standard"
.IP "\fBhq\fR" 4
.IX Item "hq"
.IP "\fB4444\fR" 4
.IX Item "4444"
.RE
.RS 4
.RE
.IP "\fBquant_mat\fR \fIinteger\fR" 4
.IX Item "quant_mat integer"
.PD
Select quantization matrix.
.RS 4
.IP "\fBauto\fR" 4
.IX Item "auto"
.PD 0
.IP "\fBdefault\fR" 4
.IX Item "default"
.IP "\fBproxy\fR" 4
.IX Item "proxy"
.IP "\fBlt\fR" 4
.IX Item "lt"
.IP "\fBstandard\fR" 4
.IX Item "standard"
.IP "\fBhq\fR" 4
.IX Item "hq"
.RE
.RS 4
.PD
.Sp
If set ta \fIauto\fR, tha matrix matchin tha flava is ghon be picked.
If not set, tha matrix providin tha highest quality, \fIdefault\fR, will be
picked.
.RE
.IP "\fBbits_per_mb\fR \fIinteger\fR" 4
.IX Item "bits_per_mb integer"
How tha fuck nuff bits ta allot fo' codin one macroblock. Different profilez use
between 200 n' 2400 bits per macroblock, tha maximum is 8000.
.IP "\fBmbs_per_slice\fR \fIinteger\fR" 4
.IX Item "mbs_per_slice integer"
Number of macroblocks up in each slice (1\-8); tha default value (8)
should be phat up in almost all thangs.
.IP "\fBvendor\fR \fIstring\fR" 4
.IX Item "vendor string"
Override tha 4\-byte vendor \s-1ID.
A\s0 custom vendor \s-1ID\s0 like \fIapl0\fR would claim tha stream was produced by
the Applez encoder.
.IP "\fBalpha_bits\fR \fIinteger\fR" 4
.IX Item "alpha_bits integer"
Specify number of bits fo' alpha component.
Possible joints is \fI0\fR, \fI8\fR n' \fI16\fR.
Use \fI0\fR ta disable alpha plane coding.
.PP
\fISpeed considerations\fR
.IX Subsection "Speed considerations"
.PP
In tha default mode of operation tha encoder has ta honor frame constraints
(i.e. not produc frames wit size bigger than requested) while still making
output picture as phat as possible.
A frame containin a shitload of lil' small-ass details is harder ta compress n' tha encoder
would spend mo' time searchin fo' appropriate quantizers fo' each slice.
.PP
Settin a higher \fBbits_per_mb\fR limit will improve tha speed.
.PP
For tha fastest encodin speed set tha \fBqscale\fR parameta (4 is the
recommended value) n' do not set a size constraint.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIffmpeg\fR\|(1), \fIffplay\fR\|(1), \fIffprobe\fR\|(1), \fIffserver\fR\|(1), \fIlibavcodec\fR\|(3)
.SH "AUTHORS"
.IX Header "AUTHORS"
Da FFmpeg pimpers.
.PP
For details bout tha authorship, peep tha Git history of tha project
(git://source.ffmpeg.org/ffmpeg), e.g. by typin tha command
\&\fBgit log\fR up in tha FFmpeg source directory, or browsin the
online repository at <\fBhttp://source.ffmpeg.org\fR>.
.PP
Maintainers fo' tha specific components is listed up in tha file
\&\fI\s-1MAINTAINERS\s0\fR up in tha source code tree.
