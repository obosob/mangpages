.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "urxvt256c 1"
.TH urxvt256c 1 "2014-04-26" "9.20" "RXVT-UNICODE"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
rxvt\-unicode (ouR XVT, unicode) \- (a VT102 emulator fo' tha X window system)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBurxvt256c\fR [options] [\-e command [ args ]]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBrxvt-unicode\fR, version \fB9.20\fR, be a cold-ass lil colour vt102 terminal
emulator intended as a \fIxterm\fR(1) replacement fo' playas whoz ass do not
require features like fuckin Tektronix 4014 emulation n' toolkit-style
configurabilitizzle fo' realz. As a result, \fBrxvt-unicode\fR uses much less swap space \*(--
a dope advantage on a machine servin nuff X sessions.
.PP
This document be also available on tha World-Wide-Web at
<http://pod.tst.eu/http://cvs.schmorp.de/rxvt\-unicode/doc/rxvt.1.pod>.
.SH "FREQUENTLY ASKED QUESTIONS"
.IX Header "FREQUENTLY ASKED QUESTIONS"
See urxvt256c(7) (try \f(CW\*(C`man 7 urxvt256c\*(C'\fR) fo' a list of
frequently axed thangs n' answer ta dem n' some common
problems. That document be also accessible on tha World-Wide-Web at
<http://pod.tst.eu/http://cvs.schmorp.de/rxvt\-unicode/doc/rxvt.7.pod>.
.SH "RXVT-UNICODE VS. RXVT"
.IX Header "RXVT-UNICODE VS. RXVT"
Unlike tha original gangsta rxvt, \fBrxvt-unicode\fR stores all text up in Unicode
internally. That means it can store n' display most scripts up in the
world. Y'all KNOW dat shit, muthafucka! Bein a terminal emulator, however, some thangs is straight-up difficult,
especially cursive scripts like fuckin arabic, vertically freestyled scripts
like mongolian or scripts requirin mad complex combinin rules,
like tibetan or devanagari. Don't expect pretty output when rockin these
scripts, n' you can put dat on yo' toast. Most other scripts, latin, cyrillic, kanji, thai etc. should work
fine, though cause I gots dem finger-lickin' chickens wit tha siz-auce fo' realz. A somewhat hard as fuck case is right-to-left scripts, such
as hebrew: \fBrxvt-unicode\fR adopts tha view dat bidirectionizzle algorithms
belong up in tha application, not tha terminal emulator (too nuff thangs \*(--
like fuckin cursor-movement while editin \*(-- break otherwise) yo, but dat might
change.
.PP
If yo ass is lookin fo' a terminal dat supports mo' horny-ass scripts, let
me recommend \f(CW\*(C`mlterm\*(C'\fR, which be a straight-up user bumpin', lean n' clean
terminal emulator. Shiiit, dis aint no joke. In fact, tha reason rxvt-unicode started doin thangs was solely
because tha lyricist couldn't git \f(CW\*(C`mlterm\*(C'\fR ta use one font fo' latin1 and
another fo' japanese.
.PP
Therefore another design rationale was tha use of multiple fonts to
display characters: Da scam of a single unicode font which nuff other
programs force onto its playas never made sense ta me: Yo ass should be able
to chizzle any font fo' any script freely.
.PP
Apart from that, rxvt-unicode be also much betta internationalised than
its predecessor, supports thangs like fuckin \s-1XFT\s0 n' \s-1ISO 14755\s0 dat is handy
in i18n\-environments, is faster, n' has a shitload bugs less than tha original
rxvt. This all up in addizzle ta dozenz of other lil' small-ass improvements.
.PP
It be still faithfully followin tha original gangsta rxvt scam of bein lean
and sick on resources: fo' example, you can still configure rxvt-unicode
without most of its features ta git a lean binary. Well shiiiit, it also comes with
a client/daemon pair dat lets you open any number of terminal windows
from within a single process, which make startup time straight-up fast and
drastically reduces memory usage. Right back up in yo muthafuckin ass. See urxvt256cd(1) (daemon) and
urxvt256cc(1) (client).
.PP
It also make technical shiznit bout escape sequences (which have
been extended) mo' accessible: peep urxvt256c(7) fo' technical
reference documentation (escape sequences etc.).
.SH "OPTIONS"
.IX Header "OPTIONS"
Da \fBurxvt256c\fR options (mostly a subset of \fIxterm\fR's) is listed
below. In keepin wit tha smaller-is-betta philosophy, options may be
eliminated or default joints chosen at compile-time, so options and
defaults listed may not accurately reflect tha version installed on
your system. `urxvt256c \-h' gives a list of major compile-time options on
the \fIOptions\fR line. Option descriptions may be prefixed wit which
compile option each is dependent upon. I aint talkin' bout chicken n' gravy biatch. e.g. `Compile \fI\s-1XIM\s0\fR:' requires
\&\fI\s-1XIM\s0\fR on tha \fIOptions\fR line. Note: `urxvt256c \-help' gives a list of all
command-line options compiled tha fuck into yo' version.
.PP
Note dat \fBurxvt256c\fR permits tha resource name ta be used as a
long-option (\-\-/++ option) so tha potential command-line options are
far pimped outa than dem listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. For example: `urxvt256c \-\-loginShell \-\-color1
Orange'.
.PP
Da followin options is available:
.IP "\fB\-help\fR, \fB\-\-help\fR" 4
.IX Item "-help, --help"
Print up a message describin available options.
.IP "\fB\-display\fR \fIdisplayname\fR" 4
.IX Item "-display displayname"
Attempt ta open a window on tha named X display (the olda form \fB\-d\fR
is still bigged up. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. but deprecated). In tha absence of dis option, the
display specified by tha \fB\s-1DISPLAY\s0\fR environment variable is used.
.IP "\fB\-depth\fR \fIbitdepth\fR" 4
.IX Item "-depth bitdepth"
Compile \fIfrills\fR: Attempt ta find a visual wit tha given bit depth;
resource \fBdepth\fR.
.Sp
[Please note dat nuff X servers (and libXft) is buggy with
respect ta \f(CW\*(C`\-depth 32\*(C'\fR and/or alpha channels, n' will cause all sorts
of graphical corruption. I aint talkin' bout chicken n' gravy biatch. This is harmless yo, but we can't do anythang about
this, so peep out]
.IP "\fB\-visual\fR \fIvisualID\fR" 4
.IX Item "-visual visualID"
Compile \fIfrills\fR: Use tha given visual (see e.g. \f(CW\*(C`xdpyinfo\*(C'\fR fo' possible
visual ids).
.IP "\fB\-geometry\fR \fIgeom\fR" 4
.IX Item "-geometry geom"
Window geometry (\fB\-g\fR still bigged up); resource \fBgeometry\fR.
.IP "\fB\-rv\fR|\fB+rv\fR" 4
.IX Item "-rv|+rv"
Turn on/off simulated reverse vizzle; resource \fBreverseVideo\fR.
.IP "\fB\-j\fR|\fB+j\fR" 4
.IX Item "-j|+j"
Turn on/off jump scrollin (allow multiple lines per refresh); resource \fBjumpScroll\fR.
.IP "\fB\-ss\fR|\fB+ss\fR" 4
.IX Item "-ss|+ss"
Turn on/off skip scrollin (allow multiple screens per refresh); resource \fBskipScroll\fR.
.IP "\fB\-fade\fR \fInumber\fR" 4
.IX Item "-fade number"
Fade tha text by tha given cementage when focus is lost. Right back up in yo muthafuckin ass. Lil Small-Ass joints
fade a lil only, 100 straight-up replaces all colours by tha fade
colour; resource \fBfading\fR.
.IP "\fB\-fadecolor\fR \fIcolour\fR" 4
.IX Item "-fadecolor colour"
Fade ta dis colour when fadin is used (see \fB\-fade\fR). Da default colour
is opaque black. resource \fBfadeColor\fR.
.IP "\fB\-icon\fR \fIfile\fR" 4
.IX Item "-icon file"
Compile \fIpixbuf\fR: Use tha specified image as application icon. I aint talkin' bout chicken n' gravy biatch. This
is used by nuff window managers, taskbars n' pagers ta represent the
application window; resource \fIiconFile\fR.
.IP "\fB\-bg\fR \fIcolour\fR" 4
.IX Item "-bg colour"
Window background colour; resource \fBbackground\fR.
.IP "\fB\-fg\fR \fIcolour\fR" 4
.IX Item "-fg colour"
Window foreground colour; resource \fBforeground\fR.
.IP "\fB\-cr\fR \fIcolour\fR" 4
.IX Item "-cr colour"
Da cursor colour; resource \fBcursorColor\fR.
.IP "\fB\-pr\fR \fIcolour\fR" 4
.IX Item "-pr colour"
Da mouse pointa foreground colour; resource \fBpointerColor\fR.
.IP "\fB\-pr2\fR \fIcolour\fR" 4
.IX Item "-pr2 colour"
Da mouse pointa background colour; resource \fBpointerColor2\fR.
.IP "\fB\-bd\fR \fIcolour\fR" 4
.IX Item "-bd colour"
Da colour of tha border round tha text area n' between tha scrollbar n' tha text;
resource \fBborderColor\fR.
.IP "\fB\-fn\fR \fIfontlist\fR" 4
.IX Item "-fn fontlist"
Select tha fonts ta be used. Y'all KNOW dat shit, muthafucka! This be a cold-ass lil comma separated list of font names
that is checked up in order when tryin ta find glyphs fo' characters. The
first font defines tha cell size fo' characters; other fonts might be
smalla yo, but not (in general) larger n' shiznit fo' realz. A (hopefully) reasonable default
font list be always appended ta dat shit. Right back up in yo muthafuckin ass. See resource \fBfont\fR fo' mo' details.
.Sp
In short, ta specify a X11 core font, just specify its name or prefix it
with \f(CW\*(C`x:\*(C'\fR. To specify a XFT-font, you need ta prefix it wit \f(CW\*(C`xft:\*(C'\fR,
e.g.:
.Sp
.Vb 2
\&   urxvt256c \-fn "xft:Bitstream Vera Sans Mono:pixelsize=15"
\&   urxvt256c \-fn "9x15bold,xft:Bitstream Vera Sans Mono"
.Ve
.Sp
See also tha question \*(L"How tha fuck do rxvt-unicode chizzle fonts?\*(R" up in tha \s-1FAQ\s0
section of urxvt256c(7).
.IP "\fB\-fb\fR \fIfontlist\fR" 4
.IX Item "-fb fontlist"
Compile \fIfont-styles\fR: Da bold font list ta use when \fBbold\fR characters
are ta be printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Right back up in yo muthafuckin ass. See resource \fBboldFont\fR fo' details.
.IP "\fB\-fi\fR \fIfontlist\fR" 4
.IX Item "-fi fontlist"
Compile \fIfont-styles\fR: Da italic font list ta use when \fIitalic\fR
charactas is ta be printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Right back up in yo muthafuckin ass. See resource \fBitalicFont\fR fo' details.
.IP "\fB\-fbi\fR \fIfontlist\fR" 4
.IX Item "-fbi fontlist"
Compile \fIfont-styles\fR: Da bold italic font list ta use when \fB\f(BIbold
italic\fB\fR charactas is ta be printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Right back up in yo muthafuckin ass. See resource \fBboldItalicFont\fR
for details.
.IP "\fB\-is\fR|\fB+is\fR" 4
.IX Item "-is|+is"
Compile \fIfont-styles\fR: Bold/Blink font stylez imply high intensity
foreground/background (default). Right back up in yo muthafuckin ass. See resource \fBintensityStyles\fR for
details.
.IP "\fB\-name\fR \fIname\fR" 4
.IX Item "-name name"
Specify tha application name under which resources is ta be obtained,
rather than tha default executable file name. Name should not contain
`.' or `*' charactas fo' realz. Also sets tha icon n' title name.
.IP "\fB\-ls\fR|\fB+ls\fR" 4
.IX Item "-ls|+ls"
Start as a login\-shell/sub\-shell; resource \fBloginShell\fR.
.IP "\fB\-ut\fR|\fB+ut\fR" 4
.IX Item "-ut|+ut"
Compile \fIutmp\fR: Inhibit/enable freestylin a utmp entry; resource
\&\fButmpInhibit\fR.
.IP "\fB\-vb\fR|\fB+vb\fR" 4
.IX Item "-vb|+vb"
Turn on/off visual bell on receipt of a funky-ass bell character; resource
\&\fBvisualBell\fR.
.IP "\fB\-sb\fR|\fB+sb\fR" 4
.IX Item "-sb|+sb"
Turn on/off scrollbar; resource \fBscrollBar\fR.
.IP "\fB\-sr\fR|\fB+sr\fR" 4
.IX Item "-sr|+sr"
Put scrollbar on right/left; resource \fBscrollBar_right\fR.
.IP "\fB\-st\fR|\fB+st\fR" 4
.IX Item "-st|+st"
Display rxvt (non XTerm/NeXT) scrollbar without/with a trough;
resource \fBscrollBar_floating\fR.
.IP "\fB\-si\fR|\fB+si\fR" 4
.IX Item "-si|+si"
Turn on/off scroll-to-bottom on \s-1TTY\s0 output inhibit; resource
\&\fBscrollTtyOutput\fR has opposite effect.
.IP "\fB\-sk\fR|\fB+sk\fR" 4
.IX Item "-sk|+sk"
Turn on/off scroll-to-bottom on keypress; resource
\&\fBscrollTtyKeypress\fR.
.IP "\fB\-sw\fR|\fB+sw\fR" 4
.IX Item "-sw|+sw"
Turn on/off scrollin wit tha scrollback buffer as freshly smoked up lines appear.
This only takes effect if \fB\-si\fR be also given; resource
\&\fBscrollWithBuffer\fR.
.IP "\fB\-ptab\fR|\fB+ptab\fR" 4
.IX Item "-ptab|+ptab"
If enabled (default), \*(L"Horizontal Tab\*(R" charactas is bein stored as
actual wide charactas up in tha screen buffer, which make it possible to
select n' paste em. Right back up in yo muthafuckin ass. Since a horizontal tab be a cold-ass lil cursor movement and
not a actual glyph, dis can sometimes be visually buggin as tha cursor
on a tab characta is displayed as a wide cursor; resource \fBpastableTabs\fR.
.IP "\fB\-bc\fR|\fB+bc\fR" 4
.IX Item "-bc|+bc"
Blink tha cursor; resource \fBcursorBlink\fR.
.IP "\fB\-uc\fR|\fB+uc\fR" 4
.IX Item "-uc|+uc"
Make tha cursor underlined; resource \fBcursorUnderline\fR.
.IP "\fB\-iconic\fR" 4
.IX Item "-iconic"
Start iconified, if tha window manager supports dat option.
Alternatizzle form is \fB\-ic\fR.
.IP "\fB\-sl\fR \fInumber\fR" 4
.IX Item "-sl number"
Save \fInumber\fR lines up in tha scrollback buffer n' shit. Right back up in yo muthafuckin ass. See resource entry for
limits; resource \fBsaveLines\fR.
.IP "\fB\-b\fR \fInumber\fR" 4
.IX Item "-b number"
Compile \fIfrills\fR: Internal border of \fInumber\fR pixels. Right back up in yo muthafuckin ass. See resource
entry fo' limits; resource \fBinternalBorder\fR.
.IP "\fB\-w\fR \fInumber\fR" 4
.IX Item "-w number"
Compile \fIfrills\fR: External border of \fInumber\fR pixels fo' realz. Also, \fB\-bw\fR
and \fB\-borderwidth\fR. Right back up in yo muthafuckin ass. See resource entry fo' limits; resource
\&\fBexternalBorder\fR.
.IP "\fB\-bl\fR" 4
.IX Item "-bl"
Compile \fIfrills\fR: Set \s-1MWM\s0 hints ta request a funky-ass borderless window, i.e.
if honoured by tha \s-1WM,\s0 tha rxvt-unicode window aint gonna have window
decorations; resource \fBborderLess\fR. If tha window manager do not
support \s-1MWM\s0 hints (e.g. kwin), enablez override-redirect mode.
.IP "\fB\-override\-redirect\fR" 4
.IX Item "-override-redirect"
Compile \fIfrills\fR: Sets override-redirect on tha window; resource
\&\fBoverride-redirect\fR.
.IP "\fB\-sbg\fR" 4
.IX Item "-sbg"
Compile \fIfrills\fR: Disable tha usage of tha built-in block graphics/line
drawin charactas n' just rely on what tha fuck tha specified fonts provide. Use
this if you gotz a phat font n' wanna use its block graphic glyphs;
resource \fBskipBuiltinGlyphs\fR.
.IP "\fB\-lsp\fR \fInumber\fR" 4
.IX Item "-lsp number"
Compile \fIfrills\fR: Lines (pixel height) ta bang between each row of
the display. Useful ta work round font renderin problems; resource
\&\fBlineSpace\fR.
.IP "\fB\-letsp\fR \fInumber\fR" 4
.IX Item "-letsp number"
Compile \fIfrills\fR: Amount ta adjust tha computed characta width by
to control overall letta spacing. Negatizzle joints will tighten up the
letta spacing, positizzle joints will space lettas up mo' n' mo' n' mo'. Useful to
work round odd font metrics; resource \fBletterSpace\fR.
.IP "\fB\-tn\fR \fItermname\fR" 4
.IX Item "-tn termname"
This option specifies tha name of tha terminal type ta be set up in the
\&\fB\s-1TERM\s0\fR environment variable. This terminal type must exist up in the
\&\fI\fItermcap\fI\|(5)\fR database n' should have \fIli#\fR n' \fIco#\fR entries;
resource \fBtermName\fR.
.IP "\fB\-e\fR \fIcommand [arguments]\fR" 4
.IX Item "-e command [arguments]"
Run tha command wit its command-line arguments up in tha \fBurxvt256c\fR
window; also sets tha window title n' icon name ta be tha basename of
the program bein executed if neither \fI\-title\fR (\fI\-T\fR) nor \fI\-n\fR are
given on tha command line. If dis option is used, it must be tha last
on tha command-line. If there is no \fB\-e\fR option then tha default is to
run tha program specified by tha \fB\s-1SHELL\s0\fR environment variable or,
failin that, \fI\fIsh\fI\|(1)\fR.
.Sp
Please note dat you must specify a program wit arguments, n' you can put dat on yo' toast. If you want to
run shell commands, you gotta specify tha shell, like this:
.Sp
.Vb 1
\&  urxvt256c \-e sh \-c "shell commands"
.Ve
.IP "\fB\-title\fR \fItext\fR" 4
.IX Item "-title text"
Window title (\fB\-T\fR still bigged up); tha default title is tha basename
of tha program specified afta tha \fB\-e\fR option, if any, otherwise the
application name; resource \fBtitle\fR.
.IP "\fB\-n\fR \fItext\fR" 4
.IX Item "-n text"
Icon name; tha default name is tha basename of tha program specified
afta tha \fB\-e\fR option, if any, otherwise tha application name;
resource \fBiconName\fR.
.IP "\fB\-C\fR" 4
.IX Item "-C"
Capture system console lyrics.
.IP "\fB\-pt\fR \fIstyle\fR" 4
.IX Item "-pt style"
Compile \fI\s-1XIM\s0\fR: input steez fo' input method; \fBOverTheSpot\fR,
\&\fBOffTheSpot\fR, \fBRoot\fR; resource \fBpreeditType\fR.
.IP "\fB\-im\fR \fItext\fR" 4
.IX Item "-im text"
Compile \fI\s-1XIM\s0\fR: input method name. resource \fBinputMethod\fR.
.IP "\fB\-imlocale\fR \fIstring\fR" 4
.IX Item "-imlocale string"
Da locale ta use fo' openin tha \s-1IM.\s0 Yo ass can use a \f(CW\*(C`LC_CTYPE\*(C'\fR of e.g.
\&\f(CW\*(C`de_DE.UTF\-8\*(C'\fR fo' aiiight text processin but \f(CW\*(C`ja_JP.EUC\-JP\*(C'\fR fo' the
input extension ta be able ta input japanese charactas while stayin in
another locale. resource \fBimLocale\fR.
.IP "\fB\-imfont\fR \fIfontset\fR" 4
.IX Item "-imfont fontset"
Set tha font set ta use fo' tha X Input Method, peep resource \fBimFont\fR
for mo' info.
.IP "\fB\-tcw\fR" 4
.IX Item "-tcw"
Change tha meanin of triple-click selection wit tha left mouse
button. I aint talkin' bout chicken n' gravy biatch. Only effectizzle when tha original gangsta (non-perl) selection code is
in-use. Instead of selectin a gangbangin' full line it will extend tha selection to
the end of tha logical line only. resource \fBtripleclickwords\fR.
.IP "\fB\-insecure\fR" 4
.IX Item "-insecure"
Enable \*(L"insecure\*(R" mode, which currently enablez most of tha escape
sequences dat echo strings. Right back up in yo muthafuckin ass. See tha resource \fBinsecure\fR fo' more
info.
.IP "\fB\-mod\fR \fImodifier\fR" 4
.IX Item "-mod modifier"
Override detection of Meta modifier wit specified key: \fBalt\fR,
\&\fBmeta\fR, \fBhyper\fR, \fBsuper\fR, \fBmod1\fR, \fBmod2\fR, \fBmod3\fR, \fBmod4\fR,
\&\fBmod5\fR; resource \fImodifier\fR.
.IP "\fB\-ssc\fR|\fB+ssc\fR" 4
.IX Item "-ssc|+ssc"
Turn on/off secondary screen (default enabled); resource
\&\fBsecondaryScreen\fR.
.IP "\fB\-ssr\fR|\fB+ssr\fR" 4
.IX Item "-ssr|+ssr"
Turn on/off secondary screen scroll (default enabled); resource
\&\fBsecondaryScroll\fR.
.IP "\fB\-hold\fR|\fB+hold\fR" 4
.IX Item "-hold|+hold"
Turn on/off hold window afta exit support. If enabled, urxvt256c
will not immediately destroy its window when tha program executed within
it exits, n' you can put dat on yo' toast. Instead, it will wait till it is bein capped or closed by the
user; resource \fBhold\fR.
.IP "\fB\-cd\fR \fIpath\fR" 4
.IX Item "-cd path"
Sets tha hustlin directory fo' tha shell (or tha command specified via
\&\fB\-e\fR). Da \fIpath\fR must be a absolute path n' it must exist for
urxvt256c ta start; resource \fBchdir\fR.
.IP "\fB\-xrm\fR \fIstring\fR" 4
.IX Item "-xrm string"
Works like tha X Toolkit option of tha same name, by addin tha \fIstring\fR
as if it was specified up in a resource file. Resource joints specified this
way take precedence over all other resource justifications.
.Sp
Note dat you need ta use tha \fIsame\fR syntax as up in tha .Xdefaults file,
e.g. \f(CW\*(C`*.background: black\*(C'\fR fo' realz. Also note dat all urxvt256c\-specific
options can be specified as long-options on tha commandline, so use
of \fB\-xrm\fR is mostly limited ta cases where you wanna specify other
resources (e.g. fo' input methods) or fo' compatibilitizzle wit other
programs.
.IP "\fB\-keysym.\fR\fIsym\fR \fIstring\fR" 4
.IX Item "-keysym.sym string"
Remap a key symbol. Right back up in yo muthafuckin ass. See resource \fBkeysym\fR.
.IP "\fB\-embed\fR \fIwindowid\fR" 4
.IX Item "-embed windowid"
Tells urxvt256c ta embed its windows tha fuck into a already-existin window,
which enablez applications ta easily embed a terminal.
.Sp
Right now, urxvt256c will first unmap/map tha specified window, so it
shouldn't be a top-level window. urxvt256c will also reconfigure it
quite a funky-ass bit, so don't expect it ta keep some specific state. It aint nuthin but dopest to
create a extra subwindow fo' urxvt256c n' leave it ridin' solo.
.Sp
Da window aint gonna be destroyed when urxvt256c exits.
.Sp
It might be useful ta know dat urxvt256c aint gonna close file
descriptors passed ta it (except fo' stdin/out/err, of course), so you
can use file descriptors ta rap wit tha programs within the
terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. This works regardless of whether tha \f(CW\*(C`\-embed\*(C'\fR option was used or
not.
.Sp
Here be a gangbangin' finger-lickin' dirty-ass short Gtk2\-perl snippet dat illustrates how tha fuck dis option can be
used (a longer example is up in \fIdoc/embed\fR):
.Sp
.Vb 5
\&   mah $rxvt = freshly smoked up Gtk2::Socket;
\&   $rxvt\->signal_connect_afta (realize => sub {
\&      mah $xid = $_[0]\->window\->get_xid;
\&      system "urxvt256c \-embed $xid &";
\&   });
.Ve
.IP "\fB\-pty\-fd\fR \fIfile descriptor\fR" 4
.IX Item "-pty-fd file descriptor"
Tells urxvt256c \s-1NOT\s0 ta execute any commandz or create a freshly smoked up pty/tty
pair but instead use tha given file descriptor as tha tty masta n' shit. This is
useful if you wanna drive urxvt256c as a generic terminal emulator
without havin ta run a program within dat shit.
.Sp
If dis switch is given, urxvt256c aint gonna create any utmp/wtmp
entries n' aint gonna tinker wit pty/tty permissions \- you gotta do that
yo ass if you want dis shit.
.Sp
As a mad special case, specifyin \f(CW\*(C`\-1\*(C'\fR will straight-up suppress
pty/tty operations, which is probably only useful up in conjunction wit some
perl extension dat manages tha terminal.
.Sp
Here be a example up in perl dat illustrates how tha fuck dis option can be used (a
longer example is up in \fIdoc/pty\-fd\fR):
.Sp
.Vb 2
\&   use IO::Pty;
\&   use Fcntl;
\&
\&   mah $pty = freshly smoked up IO::Pty;
\&   fcntl $pty, F_SETFD, 0; # clear close\-on\-exec
\&   system "urxvt256c \-pty\-fd " . (fileno $pty) . "&";
\&   close $pty;
\&
\&   # now rap wit rxvt
\&   mah $slave = $pty\->slave;
\&   while (<$slave>) { print $slave "got <$_>\en" }
.Ve
.IP "\fB\-pe\fR \fIstring\fR" 4
.IX Item "-pe string"
Comma-separated list of perl extension scripts ta use (or not ta use) in
this terminal instance. Right back up in yo muthafuckin ass. See resource \fBperl-ext\fR fo' details.
.SH "RESOURCES"
.IX Header "RESOURCES"
Note: `urxvt256c \-\-help' gives a list of all resources (long
options) compiled tha fuck into yo' version. I aint talkin' bout chicken n' gravy biatch fo' realz. All resources is also available as
long-options.
.PP
Yo ass can set n' chizzle tha resources rockin X11 tools like \fBxrdb\fR. Many
distribution do also load settings from tha \fB~/.Xresources\fR file when X
starts, n' you can put dat on yo' toast. urxvt256c will consult tha followin files/resources up in order,
with lata settings overwritin earlier ones:
.PP
.Vb 6
\&  1. app\-defaults file up in $XAPPLRESDIR
\&  2. $HOME/.Xdefaults
\&  3. RESOURCE_MANAGER property on root\-window of screen 0
\&  4. Right back up in yo muthafuckin ass. SCREEN_RESOURCES property on root\-window of tha current screen
\&  5. $XENVIRONMENT file OR $HOME/.Xdefaults\-<nodename>
\&  6. resources specified via \-xrm on tha commandline
.Ve
.PP
Note dat when readin X resources, \fBurxvt256c\fR recognizes two class
names: \fBRxvt\fR n' \fBURxvt\fR. Da class name \fBRxvt\fR allows resources
common ta both \fBurxvt256c\fR n' tha original gangsta \fIrxvt\fR ta be easily
configured, while tha class name \fBURxvt\fR allows resources unique to
\&\fBurxvt256c\fR, ta be shared between different \fBurxvt256c\fR
configurations. If no resources is specified, suitable defaults will
be used. Y'all KNOW dat shit, muthafucka! Command-line arguments can be used ta override resource
settings. Da followin resources is supported (you might want to
check tha urxvt256c\fIperl\fR\|(3) manpage fo' additionizzle settings by perl
extensions not documented here):
.IP "\fBdepth:\fR \fIbitdepth\fR" 4
.IX Item "depth: bitdepth"
Compile \fIxft\fR: Attempt ta find a visual wit tha given bit depth;
option \fB\-depth\fR.
.IP "\fBbuffered:\fR \fIboolean\fR" 4
.IX Item "buffered: boolean"
Compile \fIxft\fR: Turn on/off double-bufferin fo' xft (default enabled).
On some card/driver combination enablin it slightly decreases
performance, on most it pimped outly helps dat shit. Da slowdown is small, so it
should normally be enabled.
.IP "\fBgeometry:\fR \fIgeom\fR" 4
.IX Item "geometry: geom"
Smoke tha window wit tha specified X window geometry [default 80x24];
option \fB\-geometry\fR.
.IP "\fBbackground:\fR \fIcolour\fR" 4
.IX Item "background: colour"
Use tha specified colour as tha windowz background colour [default
White]; option \fB\-bg\fR.
.IP "\fBforeground:\fR \fIcolour\fR" 4
.IX Item "foreground: colour"
Use tha specified colour as tha windowz foreground colour [default
Black]; option \fB\-fg\fR.
.IP "\fBcolor\fR\fIn\fR\fB:\fR \fIcolour\fR" 4
.IX Item "colorn: colour"
Use tha specified colour fo' tha colour value \fIn\fR, where 0\-7
correspondz ta low-intensitizzle (normal) colours n' 8\-15 correspondz to
high-intensitizzle (bold = bright foreground, blink = bright background)
colours. Da canonical names is as bigs up: 0=black, 1=red, 2=green,
3=yellow, 4=blue, 5=magenta, 6=cyan, 7=white yo, but tha actual colour
names used is listed up in tha \fB\s-1COLOURS AND GRAPHICS\s0\fR section.
.Sp
Colours higher than 15 cannot be set rockin resources (yet) yo, but can be
changed rockin a escape command (see urxvt256c(7)).
.Sp
Colours 16\-79 form a standard 4x4x4 colour cube (the same as xterm with
88 colour support). Colours 80\-87 is evenly spaces grey steps.
.IP "\fBcolorBD:\fR \fIcolour\fR" 4
.IX Item "colorBD: colour"
.PD 0
.IP "\fBcolorIT:\fR \fIcolour\fR" 4
.IX Item "colorIT: colour"
.PD
Use tha specified colour ta display bold or italic charactas when the
foreground colour is tha default. If font stylez is not available
(Compile \fIstyles\fR) n' dis option is unset, reverse vizzle is used instead.
.IP "\fBcolorUL:\fR \fIcolour\fR" 4
.IX Item "colorUL: colour"
Use tha specified colour ta display underlined charactas when the
foreground colour is tha default.
.IP "\fBunderlineColor:\fR \fIcolour\fR" 4
.IX Item "underlineColor: colour"
If set, use tha specified colour as tha colour fo' tha underline
itself. If unset, use tha foreground colour.
.IP "\fBhighlightColor:\fR \fIcolour\fR" 4
.IX Item "highlightColor: colour"
If set, use tha specified colour as tha background fo' highlighted
characters. If unset, use reverse vizzle.
.IP "\fBhighlightTextColor:\fR \fIcolour\fR" 4
.IX Item "highlightTextColor: colour"
If set n' highlightColor is set, use tha specified colour as the
foreground fo' highlighted characters.
.IP "\fBcursorColor:\fR \fIcolour\fR" 4
.IX Item "cursorColor: colour"
Use tha specified colour fo' tha cursor. Shiiit, dis aint no joke. Da default is ta use the
foreground colour; option \fB\-cr\fR.
.IP "\fBcursorColor2:\fR \fIcolour\fR" 4
.IX Item "cursorColor2: colour"
Use tha specified colour fo' tha colour of tha cursor text. For dis to
take effect, \fBcursorColor\fR must also be specified. Y'all KNOW dat shit, muthafucka! Da default is to
use tha background colour.
.IP "\fBreverseVideo:\fR \fIboolean\fR" 4
.IX Item "reverseVideo: boolean"
\&\fBTrue\fR: simulate reverse vizzle by foreground n' background colours;
option \fB\-rv\fR. \fBFalse\fR: regular screen colours [default]; option
\&\fB+rv\fR. Right back up in yo muthafuckin ass. See note up in \fB\s-1COLOURS AND GRAPHICS\s0\fR section.
.IP "\fBjumpScroll:\fR \fIboolean\fR" 4
.IX Item "jumpScroll: boolean"
\&\fBTrue\fR: specify dat jump scrollin should be used. Y'all KNOW dat shit, muthafucka! When receivin lots
of lines, urxvt256c will only scroll once a whole screen height of lines
has been read, resultin up in fewer thugged-out shiznit while still displayin every
received line; option \fB\-j\fR.
.Sp
\&\fBFalse\fR: specify dat smooth scrollin should be used. Y'all KNOW dat shit, muthafucka! urxvt256c will
force a screen refresh on each freshly smoked up line it received; option \fB+j\fR.
.IP "\fBskipScroll:\fR \fIboolean\fR" 4
.IX Item "skipScroll: boolean"
\&\fBTrue\fR: (the default) specify dat skip scrollin should be used. Y'all KNOW dat shit, muthafucka! When
receivin fuckin shitloadz of lines, urxvt256c will only scroll once up in a while
(around 60 times per second), resultin up in far fewer thugged-out shit. This can
result up in urxvt256c not eva displayin a shitload of tha lines it receives;
option \fB\-ss\fR.
.Sp
\&\fBFalse\fR: specify dat every last muthafuckin thang is ta be displayed, even
if tha refresh is too fast fo' tha human eye ta read anythang (or the
monitor ta display anything); option \fB+ss\fR.
.IP "\fBfading:\fR \fInumber\fR" 4
.IX Item "fading: number"
Fade tha text by tha given cementage when focus is lost; option \fB\-fade\fR.
.IP "\fBfadeColor:\fR \fIcolour\fR" 4
.IX Item "fadeColor: colour"
Fade ta dis colour, when fadin is used (see \fBfading:\fR). Da default
colour is black; option \fB\-fadecolor\fR.
.IP "\fBiconFile:\fR \fIfile\fR" 4
.IX Item "iconFile: file"
Set tha application icon pixmap; option \fB\-icon\fR.
.IP "\fBscrollColor:\fR \fIcolour\fR" 4
.IX Item "scrollColor: colour"
Use tha specified colour fo' tha scrollbar [default #B2B2B2].
.IP "\fBtroughColor:\fR \fIcolour\fR" 4
.IX Item "troughColor: colour"
Use tha specified colour fo' tha scrollbarz trough area [default
#969696]. Only relevant fo' rxvt (non XTerm/NeXT) scrollbar.
.IP "\fBborderColor:\fR \fIcolour\fR" 4
.IX Item "borderColor: colour"
Da colour of tha border round tha text area n' between tha scrollbar
and tha text.
.IP "\fBfont:\fR \fIfontlist\fR" 4
.IX Item "font: fontlist"
Select tha fonts ta be used. Y'all KNOW dat shit, muthafucka! This be a cold-ass lil comma separated list of font names
that is checked up in order when tryin ta find glyphs fo' characters. The
first font defines tha cell size fo' characters; other fonts might be
smalla yo, but not (in general) larger n' shiznit fo' realz. A (hopefully) reasonable default
font list be always appended ta it; option \fB\-fn\fR.
.Sp
Each font can either be a standard X11 core font (\s-1XLFD\s0) name, with
optionizzle prefix \f(CW\*(C`x:\*(C'\fR or a Xft font (Compile \fIxft\fR), prefixed wit \f(CW\*(C`xft:\*(C'\fR.
.Sp
In addition, each font can be prefixed wit additionizzle hints and
specifications enclosed up in square brackets (\f(CW\*(C`[]\*(C'\fR). Da only available
hint currently is \f(CW\*(C`codeset=codeset\-name\*(C'\fR, n' dis is only used fo' Xft
fonts.
.Sp
For example, dis font resource
.Sp
.Vb 5
\&   URxvt.font: 9x15bold,\e
\&               \-misc\-fixed\-bold\-r\-normal\-\-15\-140\-75\-75\-c\-90\-iso10646\-1,\e
\&               \-misc\-fixed\-medium\-r\-normal\-\-15\-140\-75\-75\-c\-90\-iso10646\-1, \e
\&               [codeset=JISX0208]xft:Kochi Gothic:antialias=false, \e
\&               xft:Code2000:antialias=false
.Ve
.Sp
specifies five fonts ta be used. Y'all KNOW dat shit, muthafucka! Da first one is \f(CW\*(C`9x15bold\*(C'\fR (actually
the iso8859\-1 version of tha second font), which is tha base font (because
it is named first) n' thus defines tha characta cell grid ta be 9 pixels
wide n' 15 pixels high.
.Sp
Da second font is just used ta add additionizzle unicode charactas not in
the base font, likewise tha third, which is unfortunately non-bold yo, but
the bold version of tha font do contain fewer characters, so dis be a
useful supplement.
.Sp
Da third font be a Xft font wit aliasin turned off, n' tha characters
are limited ta tha \fB\s-1JIS 0208\s0\fR codeset (i.e. japanese kanji). Da font
gotz nuff other charactas yo, but we is not horny bout em.
.Sp
Da last font be a useful catch-all font dat supplies most of the
remainin unicode characters.
.IP "\fBboldFont:\fR \fIfontlist\fR" 4
.IX Item "boldFont: fontlist"
.PD 0
.IP "\fBitalicFont:\fR \fIfontlist\fR" 4
.IX Item "italicFont: fontlist"
.IP "\fBboldItalicFont:\fR \fIfontlist\fR" 4
.IX Item "boldItalicFont: fontlist"
.PD
Da font list ta use fo' displayin \fBbold\fR, \fIitalic\fR or \fB\f(BIbold
italic\fB\fR characters, respectively.
.Sp
If specified n' non-empty, then tha syntax is tha same ol' dirty as fo' the
\&\fBfont\fR\-resource, n' tha given font list is ghon be used as is, which makes
it possible ta substitute straight-up different font stylez fo' bold and
italic.
.Sp
If unset (the default), a suitable font list is ghon be synthesized by
\&\*(L"morphing\*(R" tha aiiight text font list tha fuck into tha desired shape. If dat is
not possible, replacement fontz of tha desired shape is ghon be tried.
.Sp
If set yo, but empty, then dis specific steez is disabled n' tha normal
text font will bein used fo' tha given style.
.IP "\fBintensityStyles:\fR \fIboolean\fR" 4
.IX Item "intensityStyles: boolean"
When font stylez is not enabled, or dis option is enabled (\fBTrue\fR,
option \fB\-is\fR, tha default), bold/blink font stylez imply high
intensitizzle foreground/background colours. Disablin dis option (\fBFalse\fR,
option \fB+is\fR) disablez dis behaviour, tha high intensitizzle colours is not
reachable.
.IP "\fBtitle:\fR \fIstring\fR" 4
.IX Item "title: string"
Set window title string, tha default title is tha command-line
specified afta tha \fB\-e\fR option, if any, otherwise tha application
name; option \fB\-title\fR.
.IP "\fBiconName:\fR \fIstring\fR" 4
.IX Item "iconName: string"
Set tha name used ta label tha windowz icon or displayed up in a icon
manager window, it also sets tha windowz title unless it is explicitly
set; option \fB\-n\fR.
.IP "\fBmapAlert:\fR \fIboolean\fR" 4
.IX Item "mapAlert: boolean"
\&\fBTrue\fR: de-iconify (map) on receipt of a funky-ass bell character n' shit. \fBFalse\fR: no
de-iconify (map) on receipt of a funky-ass bell characta [default].
.IP "\fBurgentOnBell:\fR \fIboolean\fR" 4
.IX Item "urgentOnBell: boolean"
\&\fBTrue\fR: set tha urgency hint fo' tha wm on receipt of a funky-ass bell character.
\&\fBFalse\fR: do not set tha urgency hint [default].
.Sp
urxvt256c resets tha urgency hint on every last muthafuckin focus chizzle.
.IP "\fBvisualBell:\fR \fIboolean\fR" 4
.IX Item "visualBell: boolean"
\&\fBTrue\fR: use visual bell on receipt of a funky-ass bell character; option \fB\-vb\fR.
\&\fBFalse\fR: no visual bell [default]; option \fB+vb\fR.
.IP "\fBloginShell:\fR \fIboolean\fR" 4
.IX Item "loginShell: boolean"
\&\fBTrue\fR: start as a login shell by prependin a `\-' ta \fBargv[0]\fR of
the shell; option \fB\-ls\fR. \fBFalse\fR: start as a aiiight sub-shell
[default]; option \fB+ls\fR.
.IP "\fButmpInhibit:\fR \fIboolean\fR" 4
.IX Item "utmpInhibit: boolean"
\&\fBTrue\fR: inhibit freestylin record tha fuck into tha system log file \fButmp\fR;
option \fB\-ut\fR. \fBFalse\fR: write record tha fuck into tha system log file \fButmp\fR
[default]; option \fB+ut\fR.
.IP "\fBprint-pipe:\fR \fIstring\fR" 4
.IX Item "print-pipe: string"
Specify a cold-ass lil command pipe fo' vt100 printa [default \fI\fIlpr\fI\|(1)\fR]. Use
\&\fBPrint\fR ta initiate a screen dump ta tha printa n' \fBCtrl-Print\fR or
\&\fBShift-Print\fR ta include tha scrollback as well.
.Sp
Da strang is ghon be interpreted as if typed tha fuck into tha shell as-is.
.Sp
Example:
.Sp
.Vb 1
\&   URxvt.print\-pipe: pussaaaaay > $(TMPDIR=$HOME mktemp urxvt.XXXXXX)
.Ve
.Sp
This creates a freshly smoked up file up in yo' home directory wit tha screen contents
every time you hit \f(CW\*(C`Print\*(C'\fR.
.IP "\fBscrollstyle:\fR \fImode\fR" 4
.IX Item "scrollstyle: mode"
Set scrollbar steez ta \fBrxvt\fR, \fBplain\fR, \fBnext\fR or \fBxterm\fR. \fBplain\fR is
the authorz favourite.
.IP "\fBthickness:\fR \fInumber\fR" 4
.IX Item "thickness: number"
Set tha scrollbar width up in pixels.
.IP "\fBscrollBar:\fR \fIboolean\fR" 4
.IX Item "scrollBar: boolean"
\&\fBTrue\fR: enable tha scrollbar [default]; option \fB\-sb\fR. \fBFalse\fR:
disable tha scrollbar; option \fB+sb\fR.
.IP "\fBscrollBar_right:\fR \fIboolean\fR" 4
.IX Item "scrollBar_right: boolean"
\&\fBTrue\fR: place tha scrollbar on tha right of tha window; option \fB\-sr\fR.
\&\fBFalse\fR: place tha scrollbar on tha left of tha window; option \fB+sr\fR.
.IP "\fBscrollBar_floating:\fR \fIboolean\fR" 4
.IX Item "scrollBar_floating: boolean"
\&\fBTrue\fR: display a rxvt scrollbar without a trough; option \fB\-st\fR.
\&\fBFalse\fR: display a rxvt scrollbar wit a trough; option \fB+st\fR.
.IP "\fBscrollBar_align:\fR \fImode\fR" 4
.IX Item "scrollBar_align: mode"
Align tha \fBtop\fR, \fBbottom\fR or \fBcentre\fR [default] of tha scrollbar
thumb wit tha pointa on middle button press/drag.
.IP "\fBscrollTtyOutput:\fR \fIboolean\fR" 4
.IX Item "scrollTtyOutput: boolean"
\&\fBTrue\fR: scroll ta bottom when tty receives output; option \fB\-si\fR.
\&\fBFalse\fR: do not scroll ta bottom when tty receives output; option
\&\fB+si\fR.
.IP "\fBscrollWithBuffer:\fR \fIboolean\fR" 4
.IX Item "scrollWithBuffer: boolean"
\&\fBTrue\fR: scroll wit scrollback buffer when tty receives freshly smoked up lines (i.e.
try ta show tha same lines) n' \fBscrollTtyOutput\fR is False; option
\&\fB\-sw\fR. \fBFalse\fR: do not scroll wit scrollback buffer when tty receives
new lines; option \fB+sw\fR.
.IP "\fBscrollTtyKeypress:\fR \fIboolean\fR" 4
.IX Item "scrollTtyKeypress: boolean"
\&\fBTrue\fR: scroll ta bottom when a non-special key is pressed. Y'all KNOW dat shit, muthafucka! Special keys
are dem which is intercepted by rxvt-unicode fo' special handlin and
are not passed onto tha shell; option \fB\-sk\fR. \fBFalse\fR: do not scroll to
bottom when a non-special key is pressed; option \fB+sk\fR.
.IP "\fBsaveLines:\fR \fInumber\fR" 4
.IX Item "saveLines: number"
Save \fInumber\fR lines up in tha scrollback buffer [default 64]. This
resource is limited on most machines ta 65535; option \fB\-sl\fR.
.IP "\fBinternalBorder:\fR \fInumber\fR" 4
.IX Item "internalBorder: number"
Internal border of \fInumber\fR pixels. This resource is limited ta 100;
option \fB\-b\fR.
.IP "\fBexternalBorder:\fR \fInumber\fR" 4
.IX Item "externalBorder: number"
External border of \fInumber\fR pixels. This resource is limited ta 100;
option \fB\-w\fR, \fB\-bw\fR, \fB\-borderwidth\fR.
.IP "\fBborderLess:\fR \fIboolean\fR" 4
.IX Item "borderLess: boolean"
Set \s-1MWM\s0 hints ta request a funky-ass borderless window, i.e. if honoured by the
\&\s-1WM,\s0 tha rxvt-unicode window aint gonna have window decorations; option \fB\-bl\fR.
.IP "\fBskipBuiltinGlyphs:\fR \fIboolean\fR" 4
.IX Item "skipBuiltinGlyphs: boolean"
Compile \fIfrills\fR: Disable tha usage of tha built-in block graphics/line
drawin charactas n' just rely on what tha fuck tha specified fonts provide. Use
this if you gotz a phat font n' wanna use its block graphic glyphs;
option \fB\-sbg\fR.
.IP "\fBtermName:\fR \fItermname\fR" 4
.IX Item "termName: termname"
Specifies tha terminal type name ta be set up in tha \fB\s-1TERM\s0\fR environment
variable; option \fB\-tn\fR.
.IP "\fBlineSpace:\fR \fInumber\fR" 4
.IX Item "lineSpace: number"
Specifies number of lines (pixel height) ta bang between each row of
the display [default 0]; option \fB\-lsp\fR.
.IP "\fBmeta8:\fR \fIboolean\fR" 4
.IX Item "meta8: boolean"
\&\fBTrue\fR: handle Meta (Alt) + keypress ta set tha 8th bit. \fBFalse\fR:
handle Meta (Alt) + keypress as a escape prefix [default].
.IP "\fBmouseWheelScrollPage:\fR \fIboolean\fR" 4
.IX Item "mouseWheelScrollPage: boolean"
\&\fBTrue\fR: tha mouse wheel scrolls a page full. \fBFalse\fR: tha mouse wheel
scrolls five lines [default].
.IP "\fBpastableTabs:\fR \fIboolean\fR" 4
.IX Item "pastableTabs: boolean"
\&\fBTrue\fR: store tabs as wide characters. \fBFalse\fR: interpret tabs as cursor
movement only; option \f(CW\*(C`\-ptab\*(C'\fR.
.IP "\fBcursorBlink:\fR \fIboolean\fR" 4
.IX Item "cursorBlink: boolean"
\&\fBTrue\fR: blink tha cursor. Shiiit, dis aint no joke. \fBFalse\fR: do not blink tha cursor [default];
option \fB\-bc\fR.
.IP "\fBcursorUnderline:\fR \fIboolean\fR" 4
.IX Item "cursorUnderline: boolean"
\&\fBTrue\fR: Make tha cursor underlined. Y'all KNOW dat shit, muthafucka! \fBFalse\fR: Make tha cursor a funky-ass box [default];
option \fB\-uc\fR.
.IP "\fBpointerBlank:\fR \fIboolean\fR" 4
.IX Item "pointerBlank: boolean"
\&\fBTrue\fR: blank tha pointa when a key is pressed or afta a set number
of secondz of inactivity. \fBFalse\fR: tha pointa be always visible
[default].
.IP "\fBpointerColor:\fR \fIcolour\fR" 4
.IX Item "pointerColor: colour"
Mouse pointa foreground colour.
.IP "\fBpointerColor2:\fR \fIcolour\fR" 4
.IX Item "pointerColor2: colour"
Mouse pointa background colour.
.IP "\fBpointerBlankDelay:\fR \fInumber\fR" 4
.IX Item "pointerBlankDelay: number"
Specifies number of secondz before blankin tha pointa [default 2]. Use a
pimpin' number (e.g. \f(CW987654321\fR) ta effectively disable tha timeout.
.IP "\fBbackspacekey:\fR \fIstring\fR" 4
.IX Item "backspacekey: string"
Da strang ta bust when tha backspace key is pressed. Y'all KNOW dat shit, muthafucka! If set ta \fB\s-1DEC\s0\fR
or unset it will bust \fBDelete\fR (code 127) or, wit control, \fBBackspace\fR
(code 8) \- which can be reversed wit tha appropriate \s-1DEC\s0 private mode
escape sequence.
.IP "\fBdeletekey:\fR \fIstring\fR" 4
.IX Item "deletekey: string"
Da strang ta bust when tha delete key (not tha keypad delete key) is
pressed. Y'all KNOW dat shit, muthafucka! If unset it will bust tha sequence traditionally associated
with tha \fBExecute\fR key.
.IP "\fBcutchars:\fR \fIstring\fR" 4
.IX Item "cutchars: string"
Da charactas used as delimitas fo' double-click word selection
(whitespace delimitin be added automatically if resource is given).
.Sp
When tha perl selection extension is up in use (the default if compiled
in, peep tha urxvt256c\fIperl\fR\|(3) manpage), a suitable regex rockin these
charactas is ghon be pimped (if tha resource exists, otherwise, no regex
will be pimped). In dis mode, charactas outside \s-1ISO\-8859\-1\s0 can be used.
.Sp
When tha selection extension aint used, only \s-1ISO\-8859\-1\s0 charactas can
be used. Y'all KNOW dat shit, muthafucka! If not specified, tha built-in default is used:
.Sp
\&\fB\s-1BACKSLASH\s0 `"'&()*,;<=>?@[]^{|}\fR
.IP "\fBpreeditType:\fR \fIstyle\fR" 4
.IX Item "preeditType: style"
\&\fBOverTheSpot\fR, \fBOffTheSpot\fR, \fBRoot\fR; option \fB\-pt\fR.
.IP "\fBinputMethod:\fR \fIname\fR" 4
.IX Item "inputMethod: name"
\&\fIname\fR of inputMethod ta use; option \fB\-im\fR.
.IP "\fBimLocale:\fR \fIname\fR" 4
.IX Item "imLocale: name"
Da locale ta use fo' openin tha \s-1IM.\s0 Yo ass can use a \f(CW\*(C`LC_CTYPE\*(C'\fR of e.g.
\&\f(CW\*(C`de_DE.UTF\-8\*(C'\fR fo' aiiight text processin but \f(CW\*(C`ja_JP.EUC\-JP\*(C'\fR fo' the
input extension ta be able ta input japanese charactas while stayin in
another locale; option \fB\-imlocale\fR.
.IP "\fBimFont:\fR \fIfontset\fR" 4
.IX Item "imFont: fontset"
Specify tha font-set used fo' \s-1XIM\s0 stylez \f(CW\*(C`OverTheSpot\*(C'\fR or
\&\f(CW\*(C`OffTheSpot\*(C'\fR. Well shiiiit, it must be a standard X font set (\s-1XLFD\s0 patterns separated
by commas), i.e. it aint up in tha same format as tha other font lists used
in urxvt256c. Da default is ghon be set-up ta chose *any* suitable found
found, preferably one or two pixels differin up in size ta tha base font.
option \fB\-imfont\fR.
.IP "\fBtripleclickwords:\fR \fIboolean\fR" 4
.IX Item "tripleclickwords: boolean"
Change tha meanin of triple-click selection wit tha left mouse
button. I aint talkin' bout chicken n' gravy biatch. Instead of selectin a gangbangin' full line it will extend tha selection to
the end of tha logical line only; option \fB\-tcw\fR.
.IP "\fBinsecure:\fR \fIboolean\fR" 4
.IX Item "insecure: boolean"
Enablez \*(L"insecure\*(R" mode. Rxvt-unicode offers some escape sequences that
echo arbitrary strings like tha icon name or tha locale. This could be
played if some muthafucka gets 8\-bit\-clean access ta yo' display, whether
all up in a mail client displayin mail bodies unfiltered or through
\&\fIwrite\fR\|(1) or any other means. Therefore, these sequences is disabled by
default. (Note dat nuff other terminals, includin xterm, have these
sequences enabled by default, which don't make it safer, though).
.Sp
Yo ass can enable dem by settin dis boolean resource or specifying
\&\fB\-insecure\fR as a option. I aint talkin' bout chicken n' gravy biatch fo' realz. At tha moment, dis enablez display-answer,
locale, findfont, icon label n' window title requests.
.IP "\fBmodifier:\fR \fImodifier\fR" 4
.IX Item "modifier: modifier"
Set tha key ta be interpreted as tha Meta key to: \fBalt\fR, \fBmeta\fR,
\&\fBhyper\fR, \fBsuper\fR, \fBmod1\fR, \fBmod2\fR, \fBmod3\fR, \fBmod4\fR, \fBmod5\fR; option
\&\fB\-mod\fR.
.IP "\fBanswerbackString:\fR \fIstring\fR" 4
.IX Item "answerbackString: string"
Specify tha reply rxvt-unicode sendz ta tha shell when a \s-1ENQ \s0(control-E)
characta is passed all up in cause I gots dem finger-lickin' chickens wit tha siz-auce. Well shiiiit, it may contain escape joints as busted lyrics about
in tha entry on \fBkeysym\fR following.
.IP "\fBsecondaryScreen:\fR \fIboolean\fR" 4
.IX Item "secondaryScreen: boolean"
Turn on/off secondary screen (default enabled).
.IP "\fBsecondaryScroll:\fR \fIboolean\fR" 4
.IX Item "secondaryScroll: boolean"
Turn on/off secondary screen scroll (default enabled). If this
option is enabled, scrolls on tha secondary screen will chizzle the
scrollback buffer and, when secondaryScreen is off, switching
to/from tha secondary screen will instead scroll tha screen up.
.IP "\fBhold\fR: \fIboolean\fR" 4
.IX Item "hold: boolean"
Turn on/off hold window afta exit support. If enabled, urxvt256c
will not immediately destroy its window when tha program executed within
it exits, n' you can put dat on yo' toast. Instead, it will wait till it is bein capped or closed by the
user.
.IP "\fBchdir\fR: \fIpath\fR" 4
.IX Item "chdir: path"
Sets tha hustlin directory fo' tha shell (or tha command specified via
\&\fB\-e\fR). Da \fIpath\fR must be a absolute path n' it must exist for
urxvt256c ta start. If it aint specified then tha current working
directory is ghon be used; option \fB\-cd\fR.
.IP "\fBkeysym.\fR\fIsym\fR: \fIstring\fR" 4
.IX Item "keysym.sym: string"
Compile \fIfrills\fR: Associate \fIstring\fR wit keysym \fIsym\fR. The
intervenin resource name \fBkeysym.\fR cannot be omitted.
.Sp
Da format of \fIsym\fR is "\fI(modifiers\-)key\fR", where \fImodifiers\fR can be
any combination of \fBISOLevel3\fR, \fBAppKeypad\fR, \fBControl\fR, \fBNumLock\fR,
\&\fBShift\fR, \fBMeta\fR, \fBLock\fR, \fBMod1\fR, \fBMod2\fR, \fBMod3\fR, \fBMod4\fR, \fBMod5\fR,
and tha abbreviated \fBI\fR, \fBK\fR, \fBC\fR, \fBN\fR, \fBS\fR, \fBM\fR, \fBA\fR, \fBL\fR, \fB1\fR,
\&\fB2\fR, \fB3\fR, \fB4\fR, \fB5\fR.
.Sp
Da \fBNumLock\fR, \fBMeta\fR n' \fBISOLevel3\fR modifiers is probably aliased to
whatever modifier tha NumLock key, Meta/Alt keys or \s-1ISO\s0 Level3 Shift/AltGr
keys is bein mapped. Y'all KNOW dat shit, muthafucka! \fBAppKeypad\fR be a synthetic modifier mapped ta the
current application keymap mode state.
.Sp
Da spellingz of \fIkey\fR can be obtained by rockin \fBxev\fR(1) command or
searchin keysym macros from \fB/usr/X11R6/include/X11/keysymdef.h\fR and
omittin tha prefix \fB\s-1XK_\s0\fR fo' realz. Alternatively you can specify \fIkey\fR by its hex
keysym value (\fB0x0000 \- 0xFFFF\fR). Note dat tha lookup of \fIsym\fRs is not
performed up in a exact manner; however, tha closest match be assured.
.Sp
\&\fIstring\fR may contain escape joints (\f(CW\*(C`\en\*(C'\fR: newline, \f(CW\*(C`\e000\*(C'\fR: octal
number), peep \s-1RESOURCES\s0 up in \f(CW\*(C`man 7 X\*(C'\fR fo' further details.
.Sp
Yo ass can define a range of keysyms up in one blasted by
loadin tha \f(CW\*(C`keysym\-list\*(C'\fR perl extension n' providin a \fIstring\fR
with pattern \fBlist/PREFIX/MIDDLE/SUFFIX\fR, where tha delimita `/'
should be a cold-ass lil characta not used by tha strings.
.Sp
Its usage can be demonstrated by a example:
.Sp
.Vb 1
\&  URxvt.keysym.M\-C\-0x61:    list|\e033<|abc|>
.Ve
.Sp
Da above line is equivalent ta tha followin three lines:
.Sp
.Vb 3
\&  URxvt.keysym.Meta\-Control\-0x61:    \e033<a>
\&  URxvt.keysym.Meta\-Control\-0x62:    \e033<b>
\&  URxvt.keysym.Meta\-Control\-0x63:    \e033<c>
.Ve
.Sp
If \fIstring\fR takes tha form of \f(CW\*(C`command:STRING\*(C'\fR, tha specified \fB\s-1STRING\s0\fR
is interpreted n' executed as urxvt256cs control sequence. For
example tha followin means "change tha current locale ta \f(CW\*(C`zh_CN.GBK\*(C'\fR
when Control-Meta-c is bein pressed":
.Sp
.Vb 1
\&  URxvt.keysym.M\-C\-c: command:\e033]701;zh_CN.GBK\e007
.Ve
.Sp
If \fIstring\fR takes tha form \f(CW\*(C`perl:STRING\*(C'\fR, then tha specified \fB\s-1STRING\s0\fR
is passed ta tha \f(CW\*(C`on_user_command\*(C'\fR perl handlez n' shit. Right back up in yo muthafuckin ass. See tha urxvt256c\fIperl\fR\|(3)
manpage. For example, tha \fIselection\fR extension (activated via
\&\f(CW\*(C`urxvt256c \-pe selection\*(C'\fR) listens fo' \f(CW\*(C`selection:rot13\*(C'\fR events:
.Sp
.Vb 1
\&  URxvt.keysym.M\-C\-c: perl:selection:rot13
.Ve
.Sp
Due tha the big-ass number of modifier combinations, a thugged-out defined key mapping
will match if \fIat least\fR tha specified identifiers is bein set, and
no other key mappings wit dem n' mo' bits is bein defined. Y'all KNOW dat shit, muthafucka! That
means dat definin a key map fo' \f(CW\*(C`a\*(C'\fR will automatically provide
definitions fo' \f(CW\*(C`Meta\-a\*(C'\fR, \f(CW\*(C`Shift\-a\*(C'\fR n' so on, unless a shitload of dem is defined
mappings theyselves.
.Sp
Unfortunately, dis will override built-in key mappings. For example
if you overwrite tha \f(CW\*(C`Insert\*(C'\fR key yo big-ass booty is ghon disable urxvt256c's
\&\f(CW\*(C`Shift\-Insert\*(C'\fR mapping. To re-enable that, you can poke \*(L"holes\*(R" tha fuck into the
user-defined keymap rockin tha \f(CW\*(C`builtin:\*(C'\fR replacement:
.Sp
.Vb 2
\&  URxvt.keysym.Insert: <my bang key sequence>
\&  URxvt.keysym.S\-Insert: builtin:
.Ve
.Sp
Da first line defines a mappin fo' \f(CW\*(C`Insert\*(C'\fR n' \fIany\fR combination
of modifiers. Da second line re-establishes tha default mappin for
\&\f(CW\*(C`Shift\-Insert\*(C'\fR.
.Sp
Da followin example will map Control\-Meta\-1 n' Control\-Meta\-2 to
the fonts \f(CW\*(C`suxuseuro\*(C'\fR n' \f(CW\*(C`9x15bold\*(C'\fR, so you can have some limited
font-switchin at runtime:
.Sp
.Vb 2
\&  URxvt.keysym.M\-C\-1: command:\e033]50;suxuseuro\e007
\&  URxvt.keysym.M\-C\-2: command:\e033]50;9x15bold\e007
.Ve
.Sp
Other thangs is possible, e.g. resizin (see urxvt256c(7) fo' more
info):
.Sp
.Vb 2
\&  URxvt.keysym.M\-C\-3: command:\e033[8;25;80t
\&  URxvt.keysym.M\-C\-4: command:\e033[8;48;110t
.Ve
.IP "\fBperl-ext-common\fR: \fIstring\fR" 4
.IX Item "perl-ext-common: string"
.PD 0
.IP "\fBperl-ext\fR: \fIstring\fR" 4
.IX Item "perl-ext: string"
.PD
Comma-separated list(s) of perl extension scripts (default: \f(CW\*(C`default\*(C'\fR) to
use up in dis terminal instance; option \fB\-pe\fR.
.Sp
Extension names can be prefixed wit a \f(CW\*(C`\-\*(C'\fR sign ta prohibit using
them. This can be useful ta selectively disable some extensions loaded
by default, or specified via tha \f(CW\*(C`perl\-ext\-common\*(C'\fR resource. For
example, \f(CW\*(C`default,\-selection\*(C'\fR will use all tha default extension except
\&\f(CW\*(C`selection\*(C'\fR.
.Sp
Extension names can also be followed by a argument up in angle brackets
(e.g.  \f(CW\*(C`searchable\-scrollback<M\-s>\*(C'\fR, which bindz tha hotkey for
searchable scrollback ta Alt/Meta\-s). Mentionin tha same extension
multiple times wit different arguments will pass multiple arguments to
the extension.
.Sp
Each extension is looked up in tha library directories, loaded if
necessary, n' bound ta tha current terminal instance.
.Sp
If both of these resources is tha empty string, then tha perl
interpreta aint gonna be initialized. Y'all KNOW dat shit, muthafucka! Da scam behind two options is that
\&\fBperl-ext-common\fR is ghon be used fo' extensions dat should be available to
all instances, while \fBperl-ext\fR is used fo' specific instances.
.IP "\fBperl-eval\fR: \fIstring\fR" 4
.IX Item "perl-eval: string"
Perl code ta be evaluated when all extensions done been registered. Y'all KNOW dat shit, muthafucka! See
the urxvt256c\fIperl\fR\|(3) manpage.
.IP "\fBperl-lib\fR: \fIpath\fR" 4
.IX Item "perl-lib: path"
Colon-separated list of additionizzle directories dat hold extension
scripts, n' you can put dat on yo' toast. When lookin fo' perl extensions, urxvt256c will first look
in these directories, then up in \f(CW$URXVT_PERL_LIB\fR, \fI\f(CI$HOME\fI/.urxvt/ext\fR and
lastly up in \fI/usr/lib64/urxvt/perl/\fR.
.Sp
See tha urxvt256c\fIperl\fR\|(3) manpage.
.IP "\fBselection.pattern\-\f(BIidx\fB\fR: \fIperl-regex\fR" 4
.IX Item "selection.pattern-idx: perl-regex"
Additionizzle selection patterns, peep tha urxvt256c\fIperl\fR\|(3) manpage for
details.
.IP "\fBselection-autotransform.\f(BIidx\fB\fR: \fIperl-transform\fR" 4
.IX Item "selection-autotransform.idx: perl-transform"
Selection auto-transform patterns, peep tha urxvt256c\fIperl\fR\|(3) manpage
for details.
.IP "\fBsearchable-scrollback:\fR \fIkeysym\fR" 4
.IX Item "searchable-scrollback: keysym"
Sets tha hotkey dat starts tha incremenstrual scrollback buffer search
(default: \f(CW\*(C`M\-s\*(C'\fR).
.IP "\fBurl-launcher\fR: \fIstring\fR" 4
.IX Item "url-launcher: string"
Specifies tha program ta be started wit a \s-1URL\s0 argument. Used by the
\&\f(CW\*(C`selection\-popup\*(C'\fR n' \f(CW\*(C`matcher\*(C'\fR perl extensions.
.IP "\fBtransient-for\fR: \fIwindowid\fR" 4
.IX Item "transient-for: windowid"
Compile \fIfrills\fR: Sets tha \s-1WM_TRANSIENT_FOR\s0 property ta tha given window id.
.IP "\fBoverride-redirect\fR: \fIboolean\fR" 4
.IX Item "override-redirect: boolean"
Compile \fIfrills\fR: Sets override-redirect fo' tha terminal window, making
it almost invisible ta window managers; option \fB\-override\-redirect\fR.
.IP "\fBiso14755:\fR \fIboolean\fR" 4
.IX Item "iso14755: boolean"
Turn on/off \s-1ISO 14755 \s0(default enabled).
.IP "\fBiso14755_52:\fR \fIboolean\fR" 4
.IX Item "iso14755_52: boolean"
Turn on/off \s-1ISO 14755 5.2\s0 mode (default enabled).
.SH "BACKGROUND IMAGE OPTIONS AND RESOURCES"
.IX Header "BACKGROUND IMAGE OPTIONS AND RESOURCES"
.IP "\fB\-pixmap\fR \fIfile[;oplist]\fR" 4
.IX Item "-pixmap file[;oplist]"
.PD 0
.IP "\fBbackgroundPixmap:\fR \fIfile[;oplist]\fR" 4
.IX Item "backgroundPixmap: file[;oplist]"
.PD
Compile \fIpixbuf\fR: Use tha specified image file as tha window's
background n' also optionally specify a cold-ass lil colon separated list of
operations ta modify dat shit. Note dat you may need ta quote tha \f(CW\*(C`;\*(C'\fR
characta when rockin tha command line option, as \f(CW\*(C`;\*(C'\fR is probably a
metacharacta up in shells. Right back up in yo muthafuckin ass. Supported operations are:
.RS 4
.IP "\fBWxH+X+Y\fR" 4
.IX Item "WxH+X+Y"
sets scale n' position. I aint talkin' bout chicken n' gravy biatch. \fB\*(L"W\*(R" / \*(L"H\*(R"\fR specify tha horizontal/vertical
scale (percent), n' \fB\*(L"X\*(R" / \*(L"Y\*(R"\fR locate tha image centre (percent) fo' realz. A
scale of 0 disablez scaling.
.IP "\fBop=tile\fR" 4
.IX Item "op=tile"
enablez tiling
.IP "\fBop=keep\-aspect\fR" 4
.IX Item "op=keep-aspect"
maintain tha image aspect ratio when scaling
.IP "\fBop=root\-align\fR" 4
.IX Item "op=root-align"
use tha posizzle of tha terminal window relatizzle ta tha root window as
the image offset, simulatin a root window background
.RE
.RS 4
.Sp
Da default scale n' posizzle settin is \f(CW\*(C`100x100+50+50\*(C'\fR.
Alternatively, a predefined set of templates can be used ta achieve
da most thugged-out common setups:
.IP "\fBstyle=tiled\fR" 4
.IX Item "style=tiled"
the image is tiled wit no scaling. Equivalent ta 0x0+0+0:op=tile
.IP "\fBstyle=aspect\-stretched\fR" 4
.IX Item "style=aspect-stretched"
the image is scaled ta fill tha whole window maintainin tha aspect
ratio n' centered. Y'all KNOW dat shit, muthafucka! Equivalent ta 100x100+50+50:op=keep\-aspect
.IP "\fBstyle=stretched\fR" 4
.IX Item "style=stretched"
the image is scaled ta fill tha whole window. Equivalent ta 100x100
.IP "\fBstyle=centered\fR" 4
.IX Item "style=centered"
the image is centered wit no scaling. Equivalent ta 0x0+50+50
.IP "\fBstyle=root\-tiled\fR" 4
.IX Item "style=root-tiled"
the image is tiled wit no scalin n' rockin 'root' positioning.
Equivalent ta 0x0:op=tile:op=root\-align
.RE
.RS 4
.Sp
If multiple templates is specified tha last one wins. Note dat a
template overrides all tha scale, posizzle n' operations settings.
.Sp
If used up in conjunction wit pseudo-transparency, tha specified pixmap
will be blended over tha transparent background rockin alpha-blending.
.RE
.IP "\fB\-tr\fR|\fB+tr\fR" 4
.IX Item "-tr|+tr"
.PD 0
.IP "\fBtransparent:\fR \fIboolean\fR" 4
.IX Item "transparent: boolean"
.PD
Turn on/off pseudo-transparency by rockin tha root pixmap as background.
.Sp
\&\fB\-ip\fR (\fBinheritPixmap\fR) is still accepted as a obsolete alias but
will be removed up in future versions.
.IP "\fB\-tint\fR \fIcolour\fR" 4
.IX Item "-tint colour"
.PD 0
.IP "\fBtintColor:\fR \fIcolour\fR" 4
.IX Item "tintColor: colour"
.PD
Tint tha transparent background wit tha given colour. Shiiit, dis aint no joke. Note dat a
black tint yieldz a cold-ass lil straight-up black image while a white tint yields
the image unchanged.
.IP "\fB\-sh\fR \fInumber\fR" 4
.IX Item "-sh number"
.PD 0
.IP "\fBshading:\fR \fInumber\fR" 4
.IX Item "shading: number"
.PD
Darken (0 .. 99) or lighten (101 .. 200) tha transparent background.
A value of 100 means no shading.
.IP "\fB\-blr\fR \fIHxV\fR" 4
.IX Item "-blr HxV"
.PD 0
.IP "\fBblurRadius:\fR \fIHxV\fR" 4
.IX Item "blurRadius: HxV"
.PD
Apply gaussian blur wit tha specified radius ta tha transparent
background. Y'all KNOW dat shit, muthafucka! If a single number is specified, tha vertical and
horizontal radii is considered ta be tha same. Right back up in yo muthafuckin ass. Settin one of the
radii ta 1 n' tha other ta a big-ass number creates bangin-ass effects
on some backgrounds. Da maximum radius value is 128 fo' realz. An horizontal or
vertical radiuz of 0 disablez blurring.
.IP "\fBpath:\fR \fIpath\fR" 4
.IX Item "path: path"
Specify tha colon-delimited search path fo' findin background image files.
.SH "THE SCROLLBAR"
.IX Header "THE SCROLLBAR"
Linez of text dat scroll off tha top of tha \fBurxvt256c\fR window
(resource: \fBsaveLines\fR) n' can be scrolled back rockin tha scrollbar
or by keystrokes. Da aiiight \fBurxvt256c\fR scrollbar has arrows and
its behaviour is fairly intuitive. Da \fBxterm-scrollbar\fR is without
arrows n' its behaviour mimics dat of \fIxterm\fR
.PP
Scroll down wit \fBButton1\fR (\fBxterm-scrollbar\fR) or \fBShift-Next\fR.
Scroll up wit \fBButton3\fR (\fBxterm-scrollbar\fR) or \fBShift-Prior\fR.
Continuous scroll wit \fBButton2\fR.
.SH "MOUSE REPORTING"
.IX Header "MOUSE REPORTING"
To temporarily override mouse reporting, fo' either tha scrollbar or
the aiiight text selection/insertion, hold either tha Shift or tha Meta
(Alt) key while struttin tha desired mouse action.
.PP
If mouse reportin mode be active, tha aiiight scrollbar actions are
disabled \*(-- on tha assumption dat we is rockin a gangbangin' fullscreen
application. I aint talkin' bout chicken n' gravy biatch. Instead, pressin Button1 n' Button3 sendz \fB\s-1ESC\s0 [ 6 ~\fR
(Next) n' \fB\s-1ESC\s0 [ 5 ~\fR (Prior), respectively. Right back up in yo muthafuckin ass. Similarly, clickin on the
up n' down arrows sendz \fB\s-1ESC\s0 [ A\fR (Up) n' \fB\s-1ESC\s0 [ B\fR (Down),
respectively.
.SH "THE SELECTION: SELECTING AND PASTING TEXT"
.IX Header "THE SELECTION: SELECTING AND PASTING TEXT"
Da behaviour of text selection n' insertion/pastin mechanizzle is similar
to \fIxterm\fR(1).
.IP "\fBSelecting\fR:" 4
.IX Item "Selecting:"
Left click all up in tha beginnin of tha region, drag ta tha end of tha region
and release; Right click ta extend tha marked region; Left double-click
to select a word; Left triple-click ta select tha entire logical line
(which can span multiple screen lines), unless modified by resource
\&\fBtripleclickwords\fR.
.Sp
Startin a selection while pressin tha \fBMeta\fR key (or \fBMeta+Ctrl\fR keys)
(Compile: \fIfrills\fR) will create a rectangular selection instead of a
normal one. In dis mode, every last muthafuckin selected row becomes its own line up in the
selection, n' trailin whitespace is visually underlined n' removed from
the selection.
.IP "\fBPasting\fR:" 4
.IX Item "Pasting:"
Pressin n' releasin tha Middle mouse button up in a \fBurxvt256c\fR
window causes tha value of tha \s-1PRIMARY\s0 selection (or \s-1CLIPBOARD\s0 wit the
\&\fBMeta\fR modifier) ta be banged as if it had been typed on tha keyboard.
.Sp
Pressin \fBShift-Insert\fR causes tha value of tha \s-1PRIMARY\s0 selection ta be
inserted like a muthafucka.
.Sp
rxvt-unicode also serves up tha bindings \fBCtrl-Meta-c\fR and
<Ctrl\-Meta\-v> ta interact wit tha \s-1CLIPBOARD\s0 selection. I aint talkin' bout chicken n' gravy biatch. Da first
bindin causes tha value of tha internal selection ta be copied ta the
\&\s-1CLIPBOARD\s0 selection, while tha second bindin causes tha value of the
\&\s-1CLIPBOARD\s0 selection ta be inserted.
.SH "CHANGING FONTS"
.IX Header "CHANGING FONTS"
Changin fonts (or font sizes, respectively) via tha keypad aint yet
supported up in rxvt-unicode. Bug me if you need all dis bullshit.
.PP
Yo ass can, however, switch fonts at runtime rockin escape sequences, e.g.:
.PP
.Vb 1
\&   printf \*(Aq\ee]710;%s\e007\*(Aq "9x15bold,xft:Kochi Gothic"
.Ve
.PP
Yo ass can use keyboard shortcuts, too:
.PP
.Vb 2
\&   URxvt.keysym.M\-C\-1: command:\e033]710;suxuseuro\e007\e033]711;suxuseuro\e007
\&   URxvt.keysym.M\-C\-2: command:\e033]710;9x15bold\e007\e033]711;9x15bold\e007
.Ve
.PP
rxvt-unicode will automatically re-apply these fonts ta tha output so far.
.SH "ISO 14755 SUPPORT"
.IX Header "ISO 14755 SUPPORT"
\&\s-1ISO 14755\s0 be a standard fo' enterin n' viewin unicode characters
and characta codes rockin tha keyboard. Y'all KNOW dat shit, muthafucka! Well shiiiit, it consistz of 4 parts, n' you can put dat on yo' toast. The
first part be available if rxvt-unicode has been compiled with
\&\f(CW\*(C`\-\-enable\-frills\*(C'\fR, tha rest be available when rxvt-unicode was compiled
with \f(CW\*(C`\-\-enable\-iso14755\*(C'\fR.
.IP "\(bu" 4
5.1: Basic method
.Sp
This allows you ta enta unicode charactas rockin they hexcode.
.Sp
Start by pressin n' holdin both \f(CW\*(C`Control\*(C'\fR n' \f(CW\*(C`Shift\*(C'\fR, then enter
hex-digits (between one n' six). Releasin \f(CW\*(C`Control\*(C'\fR n' \f(CW\*(C`Shift\*(C'\fR will
commit tha characta as if it was typed directly. While holdin down
\&\f(CW\*(C`Control\*(C'\fR n' \f(CW\*(C`Shift\*(C'\fR you can also enta multiple charactas by pressing
\&\f(CW\*(C`Space\*(C'\fR, which will commit tha current characta n' lets you start a new
one.
.Sp
As a example of use, imagine a funky-ass bidnizz card wit a japanese e\-mail
address, which you cannot type. Fortunately, tha card has tha e\-mail
address printed as hexcodes, e.g. \f(CW\*(C`671d 65e5\*(C'\fR. Yo ass can enta dis easily
by pressin \f(CW\*(C`Control\*(C'\fR n' \f(CW\*(C`Shift\*(C'\fR, followed by \f(CW\*(C`6\-7\-1\-D\-SPACE\-6\-5\-E\-5\*(C'\fR,
followed by releasin tha modifier keys.
.IP "\(bu" 4
5.2: Keyboard symbols entry method
.Sp
This mode lets you input charactas representin tha keycap symbols of
your keyboard, if representable up in tha current locale encoding.
.Sp
Start by pressin \f(CW\*(C`Control\*(C'\fR n' \f(CW\*(C`Shift\*(C'\fR together, then releasing
them. Da next special key (cursor keys, home etc.) you enta will not
invoke its usual function but instead will bang tha corresponding
keycap symbol. Da symbol will only be entered when tha key has been
released, otherwise pressin e.g. \f(CW\*(C`Shift\*(C'\fR would enta tha symbol for
\&\f(CW\*(C`ISO Level 2 Switch\*(C'\fR, although yo' intention might done been ta enta a
reverse tab (Shift-Tab).
.IP "\(bu" 4
5.3: Screen-selection entry method
.Sp
While dis is implemented already (itz basically tha selection
mechanism), it could be extended by displayin a unicode characta map.
.IP "\(bu" 4
5.4: Feedback method fo' identifyin displayed charactas fo' lata input
.Sp
This method lets you display tha unicode characta code associated with
charactas already displayed.
.Sp
Yo ass enta dis mode by holdin down \f(CW\*(C`Control\*(C'\fR n' \f(CW\*(C`Shift\*(C'\fR together, then
pressin n' holdin tha left mouse button n' movin around. Y'all KNOW dat shit, muthafucka! Da unicode
hex code(s) (it might be a cold-ass lil combinin character) of tha characta under the
pointa is displayed until you release \f(CW\*(C`Control\*(C'\fR n' \f(CW\*(C`Shift\*(C'\fR.
.Sp
In addizzle ta tha hex codes it will display tha font used ta draw this
characta \- cuz of implementation reasons, charactas combined with
combinin characters, line drawin charactas n' unknown charactas will
always be drawn rockin tha built-in support font.
.PP
With respect ta conformance, rxvt-unicode is supposed ta be compliant to
both scenario A n' B of \s-1ISO 14755,\s0 includin part 5.2.
.SH "LOGIN STAMP"
.IX Header "LOGIN STAMP"
\&\fBurxvt256c\fR tries ta write a entry tha fuck into tha \fIutmp\fR(5) file so that
it can be peeped via tha \fI\fIwho\fI\|(1)\fR command, n' can accept lyrics.  To
allow dis feature, \fBurxvt256c\fR may need ta be installed setuid root
on some systems or setgid ta root or ta some other crew on others.
.SH "COLOURS AND GRAPHICS"
.IX Header "COLOURS AND GRAPHICS"
In addizzle ta tha default foreground n' background colours,
\&\fBurxvt256c\fR can display up ta 88/256 colours: 8 \s-1ANSI\s0 colours plus
high-intensitizzle (potentially bold/blink) versionz of tha same, n' 72 (or
240 up in 256 colour mode) colours arranged up in a 4x4x4 (or 6x6x6) colour \s-1RGB\s0
cube plus a 8 (24) colour greyscale ramp.
.PP
Here be a list of tha \s-1ANSI\s0 colours wit they names.
.TS
l l l .
color0	(black)	= Black
color1	(red)	= Red3
color2	(green)	= Green3
color3	(yellow)	= Yellow3
color4	(blue)	= Blue3
color5	(magenta)	= Magenta3
color6	(cyan)	= Cyan3
color7	(white)	= AntiqueWhite
color8	(bright black)	= Gay25
color9	(bright red)	= Red
color10	(bright green)	= Green
color11	(bright yellow)	= Yellow
color12	(bright blue)	= Blue
color13	(bright magenta)	= Magenta
color14	(bright cyan)	= Cyan
color15	(bright white)	= White
foreground		= Black
background		= White
.TE
.PP
It be also possible ta specify tha colour jointz of \fBforeground\fR,
\&\fBbackground\fR, \fBcursorColor\fR, \fBcursorColor2\fR, \fBcolorBD\fR, \fBcolorUL\fR as
a number 0\-15, as a cold-ass lil convenient shorthand ta reference tha colour name of
color0\-color15.
.PP
Da followin text gives joints fo' tha standard 88 colour mode (and
values fo' tha 256 colour mode up in parentheses).
.PP
Da \s-1RGB\s0 cube uses indices 16..79 (16..231) rockin tha followin formulas:
.PP
.Vb 2
\&   index_88  = (r * 4 + g) * 4 + b + 16   # r, g, b = 0..3
\&   index_256 = (r * 6 + g) * 6 + b + 16   # r, g, b = 0..5
.Ve
.PP
Da grayscale ramp uses indices 80..87 (232..239), from 10% ta 90% up in 10%
steps (1/26 ta 25/26 up in 1/26 steps) \- black n' white is already part of
the \s-1RGB\s0 cube.
.PP
Together, all dem colours implement tha 88 (256) colour xterm
colours. Only tha straight-up original gangsta 16 can be chizzled rockin resources currently, the
rest can only be chizzled via command sequences (\*(L"escape codes\*(R").
.PP
Applications is advised ta use terminfo or command sequences ta discover
number n' \s-1RGB\s0 jointz of all colours (yes, you can query all dis bullshit...).
.PP
Note dat \fB\-rv\fR (\fB\*(L"reverseVideo: True\*(R"\fR) simulates reverse vizzle by
always swappin tha foreground/background colours. This is up in contrast to
\&\fIxterm\fR(1) where tha colours is only swapped if they aint otherwise
been specified. Y'all KNOW dat shit, muthafucka! For example,
.PP
.Vb 1
\&   urxvt256c \-fg Black \-bg White \-rv
.Ve
.PP
would yield White on Black, while on \fIxterm\fR(1) it would yield Black on
White.
.SS "\s-1ALPHA CHANNEL SUPPORT\s0"
.IX Subsection "ALPHA CHANNEL SUPPORT"
If Xft support has been compiled up in n' as long as Xft/Xrender/X don't get
their act together, rxvt-unicode will do its own alpha channel pimpment:
.PP
Yo ass can prefix any colour wit a opaquenizz cementage enclosed in
brackets, i.e. \f(CW\*(C`[percent]\*(C'\fR, where \f(CW\*(C`percent\*(C'\fR be a thugged-out decimal cementage
(0\-100) dat specifies tha opacitizzle of tha colour, where \f(CW0\fR is straight-up
transparent n' \f(CW100\fR is straight-up opaque. For example, \f(CW\*(C`[50]red\*(C'\fR be a
half-transparent red, while \f(CW\*(C`[95]#00ff00\*(C'\fR be a almost opaque green. I aint talkin' bout chicken n' gravy biatch. This
is tha recommended format ta specify transparency joints, n' works with
all ways ta specify a cold-ass lil colour.
.PP
For complete control, rxvt-unicode also supports
\&\f(CW\*(C`rgba:rrrr/gggg/bbbb/aaaa\*(C'\fR (exactly four hex digits/component) colour
specifications, where tha additionizzle \f(CW\*(C`aaaa\*(C'\fR component specifies opacity
(alpha) joints, n' you can put dat on yo' toast. Da minimum value of \f(CW0000\fR is straight-up transparent,
while \f(CW\*(C`ffff\*(C'\fR is straight-up opaque). Da two example colours from
earlier could also be specified as \f(CW\*(C`rgba:ff00/0000/0000/8000\*(C'\fR and
\&\f(CW\*(C`rgba:0000/ff00/0000/f332\*(C'\fR.
.PP
Yo ass probably need ta specify \fB\*(L"\-depth 32\*(R"\fR, too, ta force a visual with
alpha channels, n' have tha luck dat yo' X\-server uses \s-1ARGB\s0 pixel
layout, as X is far from just supportin \s-1ARGB\s0 visuals outta tha box, and
rxvt-unicode just fudges around.
.PP
For example, tha followin selects a almost straight-up transparent black
background, n' a almost opaque pink foreground:
.PP
.Vb 1
\&   urxvt256c \-depth 32 \-bg rgba:0000/0000/0000/4444 \-fg "[80]pink"
.Ve
.PP
When not rockin a funky-ass background image, then tha interpretation of the
alpha channel is up ta yo' compositin manager (most interpret it as
transparency of course).
.PP
When rockin a funky-ass background pixmap or pseudo-transparency, then tha background
colour will always behave as if it was straight-up transparent (so the
background image shows instead), regardless of how tha fuck dat shiznit was specified, while
other colours will either be transparent as specified (the background
image will show through) on servers supportin tha \s-1RENDER\s0 extension, or
fully opaque on servers not supportin tha \s-1RENDER EXTENSION.\s0
.PP
Please note dat cuz of bugs up in Xft, specifyin alpha joints might result
in garbage bein displayed when tha X\-server do not support tha \s-1RENDER\s0
extension.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
\&\fBurxvt256c\fR sets and/or uses tha followin environment variables:
.IP "\fB\s-1TERM\s0\fR" 4
.IX Item "TERM"
Normally set ta \f(CW\*(C`rxvt\-unicode\*(C'\fR, unless overwritten at configure time, via
resources or on tha command line.
.IP "\fB\s-1COLORTERM\s0\fR" 4
.IX Item "COLORTERM"
Either \f(CW\*(C`rxvt\*(C'\fR, \f(CW\*(C`rxvt\-xpm\*(C'\fR, dependin on whether urxvt256c was
compiled wit background image support, n' optionally wit tha added
extension \f(CW\*(C`\-mono\*(C'\fR ta indicate dat rxvt-unicode runs on a monochrome
screen.
.IP "\fB\s-1COLORFGBG\s0\fR" 4
.IX Item "COLORFGBG"
Set ta a strang of tha form \f(CW\*(C`fg;bg\*(C'\fR or \f(CW\*(C`fg;xpm;bg\*(C'\fR, where \f(CW\*(C`fg\*(C'\fR is
the colour code used as default foreground/text colour (or tha string
\&\f(CW\*(C`default\*(C'\fR ta indicate dat tha default-colour escape sequence is ta be
used), \f(CW\*(C`bg\*(C'\fR is tha colour code used as default background colour (or the
strin \f(CW\*(C`default\*(C'\fR), n' \f(CW\*(C`xpm\*(C'\fR is tha strang \f(CW\*(C`default\*(C'\fR if urxvt256c
was compiled wit background image support. Libraries like \f(CW\*(C`ncurses\*(C'\fR
and \f(CW\*(C`slang\*(C'\fR can (and do) use dis shiznit ta optimize screen output.
.IP "\fB\s-1WINDOWID\s0\fR" 4
.IX Item "WINDOWID"
Set ta tha (decimal) X Window \s-1ID\s0 of tha urxvt256c window (the toplevel
window, which probably has subwindows fo' tha scrollbar, tha terminal
window n' so on).
.IP "\fB\s-1TERMINFO\s0\fR" 4
.IX Item "TERMINFO"
Set ta tha terminfo directory iff urxvt256c was configured with
\&\f(CW\*(C`\-\-with\-terminfo=PATH\*(C'\fR.
.IP "\fB\s-1DISPLAY\s0\fR" 4
.IX Item "DISPLAY"
Used by urxvt256c ta connect ta tha display n' set ta tha erect
display up in its lil pimp processes if \f(CW\*(C`\-display\*(C'\fR aint used ta override. It
defaults ta \f(CW\*(C`:0\*(C'\fR if it don't exist.
.IP "\fB\s-1SHELL\s0\fR" 4
.IX Item "SHELL"
Da shell ta be used fo' command execution, defaults ta \f(CW\*(C`/bin/sh\*(C'\fR.
.IP "\fB\s-1RXVT_SOCKET\s0\fR [\fIsic\fR]" 4
.IX Item "RXVT_SOCKET [sic]"
Da unix domain socket path used by urxvt256cc(1) and
urxvt256cd(1).
.Sp
Default \fI\f(CI$HOME\fI/.urxvt/urxvtd\-\fI<nodename>\fI\fR.
.IP "\fB\s-1URXVT_PERL_LIB\s0\fR" 4
.IX Item "URXVT_PERL_LIB"
Additionizzle \fI:\fR\-separated library search path fo' perl extensions. Will be
searched afta \fB\-perl\-lib\fR but before \fI~/.urxvt/ext\fR n' tha system library
directory.
.IP "\fB\s-1URXVT_PERL_VERBOSITY\s0\fR" 4
.IX Item "URXVT_PERL_VERBOSITY"
See urxvt256cperl(3).
.IP "\fB\s-1HOME\s0\fR" 4
.IX Item "HOME"
Used ta locate tha default directory fo' tha unix domain socket for
daemon communications n' ta locate various resource filez (such as
\&\f(CW\*(C`.Xdefaults\*(C'\fR)
.IP "\fB\s-1XAPPLRESDIR\s0\fR" 4
.IX Item "XAPPLRESDIR"
Directory where application-specific X resource filez is located.
.IP "\fB\s-1XENVIRONMENT\s0\fR" 4
.IX Item "XENVIRONMENT"
If set n' accessible, gives tha name of a X resource file ta be loaded by
urxvt256c.
.SH "FILES"
.IX Header "FILES"
.IP "\fB/usr/lib/X11/rgb.txt\fR" 4
.IX Item "/usr/lib/X11/rgb.txt"
Colour names.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
urxvt256c(7), urxvt256cc(1), urxvt256cd(1), urxvt256c\-\fIextensions\fR\|(1),
urxvt256c\fIperl\fR\|(3), \fIxterm\fR\|(1), \fIsh\fR\|(1), \fIresize\fR\|(1), X(1), \fIpty\fR\|(4), \fItty\fR\|(4), \fIutmp\fR\|(5)
.SH "CURRENT PROJECT COORDINATOR"
.IX Header "CURRENT PROJECT COORDINATOR"
.IP "Project Coordinator" 4
.IX Item "Project Coordinator"
Marc A. Lehmann <rxvt\-unicode@schmorp.de>.
.Sp
<http://software.schmorp.de/pkg/rxvt\-unicode.html>
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "Jizzy Bovey" 4
.IX Item "Jizzy Bovey"
Universitizzle of Kent, 1992, freestyled tha original gangsta Xvt.
.IP "Rob Nation <nation@rocket.sanders.lockheed.com>" 4
.IX Item "Rob Nation <nation@rocket.sanders.lockheed.com>"
very heavily modified Xvt n' came up wit Rxvt
.IP "Angelo Haritsis <ah@doc.ic.ac.uk>" 4
.IX Item "Angelo Haritsis <ah@doc.ic.ac.uk>"
wrote tha Greek Keyboard Input (no longer up in code)
.IP "mj olesen <olesen@me.QueensU.CA>" 4
.IX Item "mj olesen <olesen@me.QueensU.CA>"
Wrote tha menu system.
.Sp
Project Coordinator (changes.txt 2.11 ta 2.21)
.IP "Oezguer Kesim <kesim@math.fu\-berlin.de>" 4
.IX Item "Oezguer Kesim <kesim@math.fu-berlin.de>"
Project Coordinator (changes.txt 2.21a ta 2.4.5)
.IP "Geoff Win <gcw@pobox.com>" 4
.IX Item "Geoff Win <gcw@pobox.com>"
Rewrote screen display n' text selection routines.
.Sp
Project Coordinator (changes.txt 2.4.6 \- rxvt-unicode)
.IP "Marc Alexander Lehmann <rxvt\-unicode@schmorp.de>" 4
.IX Item "Marc Alexander Lehmann <rxvt-unicode@schmorp.de>"
Forked rxvt-unicode, unicode support, rewrote almost all tha code, perl
extension, random hacks, a shitload of bugfixes n' extensions.
.Sp
Project Coordinator (Changes 1.0 \-)
.IP "Emanuele Giaquinta <emanuele.giaquinta@gmail.com>" 4
.IX Item "Emanuele Giaquinta <emanuele.giaquinta@gmail.com>"
pty/utmp code rewrite, image code improvements, nuff random hacks n' bugfixes.
