.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CPP 1"
.TH CPP 1 "2014-09-11" "gcc-4.8.3" "GNU"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
cpp \- Da C Preprocessor
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
cpp [\fB\-D\fR\fImacro\fR[=\fIdefn\fR]...] [\fB\-U\fR\fImacro\fR]
    [\fB\-I\fR\fIdir\fR...] [\fB\-iquote\fR\fIdir\fR...]
    [\fB\-W\fR\fIwarn\fR...]
    [\fB\-M\fR|\fB\-MM\fR] [\fB\-MG\fR] [\fB\-MF\fR \fIfilename\fR]
    [\fB\-MP\fR] [\fB\-MQ\fR \fItarget\fR...]
    [\fB\-MT\fR \fItarget\fR...]
    [\fB\-P\fR] [\fB\-fno\-working\-directory\fR]
    [\fB\-x\fR \fIlanguage\fR] [\fB\-std=\fR\fIstandard\fR]
    \fIinfile\fR \fIoutfile\fR
.PP
Only da most thugged-out useful options is listed here; peep below fo' tha remainder.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da C preprocessor, often known as \fIcpp\fR, be a \fImacro processor\fR
that is used automatically by tha C compila ta transform yo' program
before compilation. I aint talkin' bout chicken n' gravy biatch.  It be called a macro processor cuz it allows
you ta define \fImacros\fR, which is brief abbreviations fo' longer
constructs.
.PP
Da C preprocessor is intended ta be used only wit C, \*(C+, and
Objective-C source code.  In tha past, it has been played as a general
text processor. Shiiit, dis aint no joke.  It will choke on input which do not obey Cz lexical
rules.  For example, apostrophes is ghon be interpreted as tha beginnin of
characta constants, n' cause errors.  Also, you cannot rely on it
preservin characteristics of tha input which is not dope to
C\-family languages.  If a Makefile is preprocessed, all tha hard tabs
will be removed, n' tha Makefile aint gonna work.
.PP
Havin holla'd that, you can often git away wit rockin cpp on thangs which
are not C.  Other Algol-ish programmin languages is often safe
(Pascal, Ada, etc.) So be assembly, wit caution. I aint talkin' bout chicken n' gravy biatch.  \fB\-traditional\-cpp\fR
mode preserves mo' white space, n' is otherwise mo' permissive.  Many
of tha problems can be avoided by freestylin C or \*(C+ steez comments
instead of natizzle language comments, n' keepin macros simple.
.PP
Wherever possible, you should bust a preprocessor geared ta tha language
yo ass is freestylin in. I aint talkin' bout chicken n' gravy biatch.  Modern versionz of tha \s-1GNU\s0 assembla have macro
facilities. Put ya muthafuckin choppers up if ya feel dis!  Most high level programmin languages have they own
conditionizzle compilation n' inclusion mechanism.  If all else fails,
try a legit general text processor, like fuckin \s-1GNU M4.\s0
.PP
C preprocessors vary up in some details.  This manual discusses tha \s-1GNU C\s0
preprocessor, which serves up a lil' small-ass superset of tha featurez of \s-1ISO\s0
Standard C.  In its default mode, tha \s-1GNU C\s0 preprocessor do not do a
few thangs required by tha standard. Y'all KNOW dat shit, muthafucka!  These is features which are
rarely, if ever, used, n' may cause surprisin chizzlez ta tha meaning
of a program which do not expect em.  To git strict \s-1ISO\s0 Standard C,
you should use tha \fB\-std=c90\fR, \fB\-std=c99\fR or
\&\fB\-std=c11\fR options, depending
on which version of tha standard you want.  To git all tha mandatory
diagnostics, you must also use \fB\-pedantic\fR.
.PP
This manual raps bout tha behavior of tha \s-1ISO\s0 preprocessor. Shiiit, dis aint no joke.  To
minimize gratuitous differences, where tha \s-1ISO\s0 preprocessor's
behavior do not conflict wit traditionizzle semantics, the
traditionizzle preprocessor should behave tha same way.  Da various
differences dat do exist is detailed up in tha section \fBTraditional
Mode\fR.
.PP
For clarity, unless noted otherwise, references ta \fB\s-1CPP\s0\fR up in this
manual refer ta \s-1GNU CPP.\s0
.SH "OPTIONS"
.IX Header "OPTIONS"
Da C preprocessor expects two file names as arguments, \fIinfile\fR and
\&\fIoutfile\fR.  Da preprocessor readz \fIinfile\fR together wit any
other filez it specifies wit \fB#include\fR.  All tha output generated
by tha combined input filez is freestyled up in \fIoutfile\fR.
.PP
Either \fIinfile\fR or \fIoutfile\fR may be \fB\-\fR, which as
\&\fIinfile\fR means ta read from standard input n' as \fIoutfile\fR
means ta write ta standard output.  Also, if either file is omitted, it
means tha same ol' dirty as if \fB\-\fR had been specified fo' dat file.
.PP
Unless otherwise noted, or tha option endz up in \fB=\fR, all options
which take a argument may have dat argument step tha fuck up either immediately
afta tha option, or wit a space between option n' argument:
\&\fB\-Ifoo\fR n' \fB\-I foo\fR have tha same effect.
.PP
Many options have multi-letta names; therefore multiple single-letter
options may \fInot\fR be grouped: \fB\-dM\fR is straight-up different from
\&\fB\-d\ \-M\fR.
.IP "\fB\-D\fR \fIname\fR" 4
.IX Item "-D name"
Predefine \fIname\fR as a macro, wit definizzle \f(CW1\fR.
.IP "\fB\-D\fR \fIname\fR\fB=\fR\fIdefinition\fR" 4
.IX Item "-D name=definition"
Da contentz of \fIdefinition\fR is tokenized n' processed as if
they rocked up durin translation phase three up in a \fB#define\fR
directive.  In particular, tha definizzle is ghon be truncated by
embedded newline characters.
.Sp
If yo ass is invokin tha preprocessor from a gangbangin' finger-lickin' dirty-ass shell or shell-like
program you may need ta use tha shellz quotin syntax ta protect
charactas like fuckin spaces dat gotz a meanin up in tha shell syntax.
.Sp
If you wish ta define a gangbangin' function-like macro on tha command line, write
its argument list wit surroundin parentheses before tha equals sign
(if any).  Parentheses is meaningful ta most shells, so yo big-ass booty is ghon need
to quote tha option. I aint talkin' bout chicken n' gravy biatch.  With \fBsh\fR n' \fBcsh\fR,
\&\fB\-D'\fR\fIname\fR\fB(\fR\fIargs...\fR\fB)=\fR\fIdefinition\fR\fB'\fR works.
.Sp
\&\fB\-D\fR n' \fB\-U\fR options is processed up in tha order they
are given on tha command line.  All \fB\-imacros\fR \fIfile\fR and
\&\fB\-include\fR \fIfile\fR options is processed afta all
\&\fB\-D\fR n' \fB\-U\fR options.
.IP "\fB\-U\fR \fIname\fR" 4
.IX Item "-U name"
Cancel any previous definizzle of \fIname\fR, either built up in or
provided wit a \fB\-D\fR option.
.IP "\fB\-undef\fR" 4
.IX Item "-undef"
Do not predefine any system-specific or GCC-specific macros.  The
standard predefined macros remain defined.
.IP "\fB\-I\fR \fIdir\fR" 4
.IX Item "-I dir"
Add tha directory \fIdir\fR ta tha list of directories ta be searched
for header files.
.Sp
Directories named by \fB\-I\fR is searched before tha standard
system include directories. Put ya muthafuckin choppers up if ya feel dis!  If tha directory \fIdir\fR be a standard
system include directory, tha option is ignored ta ensure dat the
default search order fo' system directories n' tha special treatment
of system headaz is not defeated
\&.
If \fIdir\fR begins wit \f(CW\*(C`=\*(C'\fR, then tha \f(CW\*(C`=\*(C'\fR is ghon be replaced
by tha sysroot prefix; peep \fB\-\-sysroot\fR n' \fB\-isysroot\fR.
.IP "\fB\-o\fR \fIfile\fR" 4
.IX Item "-o file"
Write output ta \fIfile\fR.  This is tha same ol' dirty as specifyin \fIfile\fR
as tha second non-option argument ta \fBcpp\fR.  \fBgcc\fR has a
different interpretation of a second non-option argument, so you must
use \fB\-o\fR ta specify tha output file.
.IP "\fB\-Wall\fR" 4
.IX Item "-Wall"
Turns on all optionizzle warnings which is desirable fo' aiiight code.
At present dis is \fB\-Wcomment\fR, \fB\-Wtrigraphs\fR,
\&\fB\-Wmultichar\fR n' a warnin bout integer promotion causin a
change of sign up in \f(CW\*(C`#if\*(C'\fR expressions.  Note dat nuff of the
preprocessorz warnings is on by default n' have no options to
control em.
.IP "\fB\-Wcomment\fR" 4
.IX Item "-Wcomment"
.PD 0
.IP "\fB\-Wcomments\fR" 4
.IX Item "-Wcomments"
.PD
Warn whenever a cold-ass lil comment-start sequence \fB/*\fR appears up in a \fB/*\fR
comment, or whenever a funky-ass backslash-newline appears up in a \fB//\fR comment.
(Both forms have tha same effect.)
.IP "\fB\-Wtrigraphs\fR" 4
.IX Item "-Wtrigraphs"
Most trigraphs up in comments cannot affect tha meanin of tha program.
But fuck dat shiznit yo, tha word on tha street is dat a trigraph dat would form a escaped newline (\fB??/\fR at
the end of a line) can, by changin where tha comment begins or ends.
Therefore, only trigraphs dat would form escaped newlines produce
warnings inside a cold-ass lil comment.
.Sp
This option is implied by \fB\-Wall\fR.  If \fB\-Wall\fR is not
given, dis option is still enabled unless trigraphs is enabled. Y'all KNOW dat shit, muthafucka!  To
get trigraph conversion without warnings yo, but git tha other
\&\fB\-Wall\fR warnings, use \fB\-trigraphs \-Wall \-Wno\-trigraphs\fR.
.IP "\fB\-Wtraditional\fR" 4
.IX Item "-Wtraditional"
Warn bout certain constructs dat behave differently up in traditionizzle and
\&\s-1ISO C. \s0 Also warn bout \s-1ISO C\s0 constructs dat have no traditionizzle C
equivalent, n' problematic constructs which should be avoided.
.IP "\fB\-Wundef\fR" 4
.IX Item "-Wundef"
Warn whenever a identifier which aint a macro is encountered up in an
\&\fB#if\fR directive, outside of \fBdefined\fR.  Such identifiers are
replaced wit zero.
.IP "\fB\-Wunused\-macros\fR" 4
.IX Item "-Wunused-macros"
Warn bout macros defined up in tha main file dat is unused. Y'all KNOW dat shit, muthafucka!  A macro
is \fIused\fR if it is expanded or tested fo' existence at least once.
Da preprocessor will also warn if tha macro has not been used at the
time it is redefined or undefined.
.Sp
Built-in macros, macros defined on tha command line, n' macros
defined up in include filez is not warned about.
.Sp
\&\fINote:\fR If a macro is straight-up used yo, but only used up in skipped
conditionizzle blocks, then \s-1CPP\s0 will report it as unused. Y'all KNOW dat shit, muthafucka!  To avoid the
warnin up in such a cold-ass lil case, you might improve tha scope of tha macro's
definizzle by, fo' example, movin it tha fuck into tha straight-up original gangsta skipped block.
Alternatively, you could provide a thugged-out dummy use wit suttin' like:
.Sp
.Vb 2
\&        #if defined the_macro_causing_the_warning
\&        #endif
.Ve
.IP "\fB\-Wendif\-labels\fR" 4
.IX Item "-Wendif-labels"
Warn whenever a \fB#else\fR or a \fB#endif\fR is followed by text.
This probably happens up in code of tha form
.Sp
.Vb 5
\&        #if FOO
\&        ...
\&        #else FOO
\&        ...
\&        #endif FOO
.Ve
.Sp
Da second n' third \f(CW\*(C`FOO\*(C'\fR should be up in comments yo, but often is not
in olda programs.  This warnin is on by default.
.IP "\fB\-Werror\fR" 4
.IX Item "-Werror"
Make all warnings tha fuck into hard errors.  Source code which triggers warnings
will be rejected.
.IP "\fB\-Wsystem\-headers\fR" 4
.IX Item "-Wsystem-headers"
Issue warnings fo' code up in system headers.  These is normally unhelpful
in findin bugs up in yo' own code, therefore suppressed. Y'all KNOW dat shit, muthafucka!  If yo ass is
responsible fo' tha system library, you may wanna peep em.
.IP "\fB\-w\fR" 4
.IX Item "-w"
Suppress all warnings, includin dem which \s-1GNU CPP\s0 thangs by default.
.IP "\fB\-pedantic\fR" 4
.IX Item "-pedantic"
Issue all tha mandatory diagnostics listed up in tha C standard. Y'all KNOW dat shit, muthafucka!  Some of
them is left up by default, since they trigger frequently on harmless
code.
.IP "\fB\-pedantic\-errors\fR" 4
.IX Item "-pedantic-errors"
Issue all tha mandatory diagnostics, n' make all mandatory diagnostics
into errors.  This includes mandatory diagnostics dat \s-1GCC\s0 issues
without \fB\-pedantic\fR but treats as warnings.
.IP "\fB\-M\fR" 4
.IX Item "-M"
Instead of outputtin tha result of preprocessing, output a rule
suitable fo' \fBmake\fR describin tha dependenciez of tha main
source file.  Da preprocessor outputs one \fBmake\fR rule containing
the object file name fo' dat source file, a cold-ass lil colon, n' tha namez of all
the included files, includin dem comin from \fB\-include\fR or
\&\fB\-imacros\fR command line options.
.Sp
Unless specified explicitly (with \fB\-MT\fR or \fB\-MQ\fR), the
object file name consistz of tha name of tha source file wit any
suffix replaced wit object file suffix n' wit any leadin directory
parts removed. Y'all KNOW dat shit, muthafucka!  If there be nuff included filez then tha rule is
split tha fuck into nuff muthafuckin lines rockin \fB\e\fR\-newline.  Da rule has no
commands.
.Sp
This option do not suppress tha preprocessorz debug output, such as
\&\fB\-dM\fR.  To avoid mixin such debug output wit tha dependency
rulez you should explicitly specify tha dependency output file with
\&\fB\-MF\fR, or use a environment variable like
\&\fB\s-1DEPENDENCIES_OUTPUT\s0\fR.  Debug output
will still be busted ta tha regular output stream as normal.
.Sp
Passin \fB\-M\fR ta tha driver implies \fB\-E\fR, n' suppresses
warnings wit a implicit \fB\-w\fR.
.IP "\fB\-MM\fR" 4
.IX Item "-MM"
Like \fB\-M\fR but do not mention header filez dat is found in
system header directories, nor header filez dat is included,
directly or indirectly, from such a header.
.Sp
This implies dat tha chizzle of angle brackets or double quotes up in an
\&\fB#include\fR directizzle do not up in itself determine whether that
header will step tha fuck up in \fB\-MM\fR dependency output.  This be a
slight chizzle up in semantics from \s-1GCC\s0 versions 3.0 n' earlier.
.IP "\fB\-MF\fR \fIfile\fR" 4
.IX Item "-MF file"
When used wit \fB\-M\fR or \fB\-MM\fR, specifies a
file ta write tha dependencies to.  If no \fB\-MF\fR switch is given
the preprocessor sendz tha rulez ta tha same place it would have sent
preprocessed output.
.Sp
When used wit tha driver options \fB\-MD\fR or \fB\-MMD\fR,
\&\fB\-MF\fR overrides tha default dependency output file.
.IP "\fB\-MG\fR" 4
.IX Item "-MG"
In conjunction wit a option like fuckin \fB\-M\fR requesting
dependency generation, \fB\-MG\fR assumes missin header filez are
generated filez n' addz dem ta tha dependency list without raising
an error. Shiiit, dis aint no joke.  Da dependency filename is taken directly from the
\&\f(CW\*(C`#include\*(C'\fR directizzle without prependin any path.  \fB\-MG\fR
also suppresses preprocessed output, as a missin header file renders
this useless.
.Sp
This feature is used up in automatic uppimpin of makefiles.
.IP "\fB\-MP\fR" 4
.IX Item "-MP"
This option instructs \s-1CPP\s0 ta add a phony target fo' each dependency
other than tha main file, causin each ta depend on nothing.  These
dummy rulez work round errors \fBmake\fR gives if you remove header
filez without uppimpin tha \fIMakefile\fR ta match.
.Sp
This is typical output:
.Sp
.Vb 1
\&        test.o: test.c test.h
\&        
\&        test.h:
.Ve
.IP "\fB\-MT\fR \fItarget\fR" 4
.IX Item "-MT target"
Change tha target of tha rule emitted by dependency generation. I aint talkin' bout chicken n' gravy biatch.  By
default \s-1CPP\s0 takes tha name of tha main input file, deletes any
directory components n' any file suffix like fuckin \fB.c\fR, and
appendz tha platformz usual object suffix.  Da result is tha target.
.Sp
An \fB\-MT\fR option will set tha target ta be exactly tha strang you
specify.  If you want multiple targets, you can specify dem as a single
argument ta \fB\-MT\fR, or use multiple \fB\-MT\fR options.
.Sp
For example, \fB\-MT\ '$(objpfx)foo.o'\fR might give
.Sp
.Vb 1
\&        $(objpfx)foo.o: foo.c
.Ve
.IP "\fB\-MQ\fR \fItarget\fR" 4
.IX Item "-MQ target"
Same as \fB\-MT\fR yo, but it quotes any charactas which is special to
Make.  \fB\-MQ\ '$(objpfx)foo.o'\fR gives
.Sp
.Vb 1
\&        $$(objpfx)foo.o: foo.c
.Ve
.Sp
Da default target be automatically quoted, as if it was given with
\&\fB\-MQ\fR.
.IP "\fB\-MD\fR" 4
.IX Item "-MD"
\&\fB\-MD\fR is equivalent ta \fB\-M \-MF\fR \fIfile\fR, except that
\&\fB\-E\fR aint implied. Y'all KNOW dat shit, muthafucka!  Da driver determines \fIfile\fR based on
whether a \fB\-o\fR option is given. I aint talkin' bout chicken n' gravy biatch.  If it is, tha driver uses its
argument but wit a suffix of \fI.d\fR, otherwise it takes tha name
of tha input file, removes any directory components n' suffix, and
applies a \fI.d\fR suffix.
.Sp
If \fB\-MD\fR is used up in conjunction wit \fB\-E\fR, any
\&\fB\-o\fR switch is understood ta specify tha dependency output file yo, but if used without \fB\-E\fR, each \fB\-o\fR
is understood ta specify a target object file.
.Sp
Since \fB\-E\fR aint implied, \fB\-MD\fR can be used ta generate
a dependency output file as a side-effect of tha compilation process.
.IP "\fB\-MMD\fR" 4
.IX Item "-MMD"
Like \fB\-MD\fR except mention only user header files, not system
header files.
.IP "\fB\-x c\fR" 4
.IX Item "-x c"
.PD 0
.IP "\fB\-x c++\fR" 4
.IX Item "-x c++"
.IP "\fB\-x objective-c\fR" 4
.IX Item "-x objective-c"
.IP "\fB\-x assembler-with-cpp\fR" 4
.IX Item "-x assembler-with-cpp"
.PD
Specify tha source language: C, \*(C+, Objective-C, or assembly.  This has
nothang ta do wit standardz conformizzle or extensions; it merely
selects which base syntax ta expect.  If you give none of these options,
cpp will deduce tha language from tha extension of tha source file:
\&\fB.c\fR, \fB.cc\fR, \fB.m\fR, or \fB.S\fR.  Some other common
extensions fo' \*(C+ n' assembly is also recognized. Y'all KNOW dat shit, muthafucka!  If cpp do not
recognize tha extension, it will treat tha file as C; dis is da most thugged-out
generic mode.
.Sp
\&\fINote:\fR Previous versionz of cpp accepted a \fB\-lang\fR option
which selected both tha language n' tha standardz conformizzle level.
This option has been removed, cuz it conflicts wit tha \fB\-l\fR
option.
.IP "\fB\-std=\fR\fIstandard\fR" 4
.IX Item "-std=standard"
.PD 0
.IP "\fB\-ansi\fR" 4
.IX Item "-ansi"
.PD
Specify tha standard ta which tha code should conform.  Currently \s-1CPP\s0
knows bout C n' \*(C+ standards; others may be added up in tha future.
.Sp
\&\fIstandard\fR
may be one of:
.RS 4
.ie n .IP """c90""" 4
.el .IP "\f(CWc90\fR" 4
.IX Item "c90"
.PD 0
.ie n .IP """c89""" 4
.el .IP "\f(CWc89\fR" 4
.IX Item "c89"
.ie n .IP """iso9899:1990""" 4
.el .IP "\f(CWiso9899:1990\fR" 4
.IX Item "iso9899:1990"
.PD
Da \s-1ISO C\s0 standard from 1990.  \fBc90\fR is tha customary shorthand for
this version of tha standard.
.Sp
Da \fB\-ansi\fR option is equivalent ta \fB\-std=c90\fR.
.ie n .IP """iso9899:199409""" 4
.el .IP "\f(CWiso9899:199409\fR" 4
.IX Item "iso9899:199409"
Da 1990 C standard, as amended up in 1994.
.ie n .IP """iso9899:1999""" 4
.el .IP "\f(CWiso9899:1999\fR" 4
.IX Item "iso9899:1999"
.PD 0
.ie n .IP """c99""" 4
.el .IP "\f(CWc99\fR" 4
.IX Item "c99"
.ie n .IP """iso9899:199x""" 4
.el .IP "\f(CWiso9899:199x\fR" 4
.IX Item "iso9899:199x"
.ie n .IP """c9x""" 4
.el .IP "\f(CWc9x\fR" 4
.IX Item "c9x"
.PD
Da revised \s-1ISO C\s0 standard, published up in December 1999.  Before
publication, dis was known as C9X.
.ie n .IP """iso9899:2011""" 4
.el .IP "\f(CWiso9899:2011\fR" 4
.IX Item "iso9899:2011"
.PD 0
.ie n .IP """c11""" 4
.el .IP "\f(CWc11\fR" 4
.IX Item "c11"
.ie n .IP """c1x""" 4
.el .IP "\f(CWc1x\fR" 4
.IX Item "c1x"
.PD
Da revised \s-1ISO C\s0 standard, published up in December 2011.  Before
publication, dis was known as C1X.
.ie n .IP """gnu90""" 4
.el .IP "\f(CWgnu90\fR" 4
.IX Item "gnu90"
.PD 0
.ie n .IP """gnu89""" 4
.el .IP "\f(CWgnu89\fR" 4
.IX Item "gnu89"
.PD
Da 1990 C standard plus \s-1GNU\s0 extensions.  This is tha default.
.ie n .IP """gnu99""" 4
.el .IP "\f(CWgnu99\fR" 4
.IX Item "gnu99"
.PD 0
.ie n .IP """gnu9x""" 4
.el .IP "\f(CWgnu9x\fR" 4
.IX Item "gnu9x"
.PD
Da 1999 C standard plus \s-1GNU\s0 extensions.
.ie n .IP """gnu11""" 4
.el .IP "\f(CWgnu11\fR" 4
.IX Item "gnu11"
.PD 0
.ie n .IP """gnu1x""" 4
.el .IP "\f(CWgnu1x\fR" 4
.IX Item "gnu1x"
.PD
Da 2011 C standard plus \s-1GNU\s0 extensions.
.ie n .IP """c++98""" 4
.el .IP "\f(CWc++98\fR" 4
.IX Item "c++98"
Da 1998 \s-1ISO \*(C+\s0 standard plus amendments.
.ie n .IP """gnu++98""" 4
.el .IP "\f(CWgnu++98\fR" 4
.IX Item "gnu++98"
Da same as \fB\-std=c++98\fR plus \s-1GNU\s0 extensions.  This is the
default fo' \*(C+ code.
.RE
.RS 4
.RE
.IP "\fB\-I\-\fR" 4
.IX Item "-I-"
Split tha include path.  Any directories specified wit \fB\-I\fR
options before \fB\-I\-\fR is searched only fo' headaz axed with
\&\f(CW\*(C`#include\ "\f(CIfile\f(CW"\*(C'\fR; they is not searched for
\&\f(CW\*(C`#include\ <\f(CIfile\f(CW>\*(C'\fR.  If additionizzle directories are
specified wit \fB\-I\fR options afta tha \fB\-I\-\fR, them
directories is searched fo' all \fB#include\fR directives.
.Sp
In addition, \fB\-I\-\fR inhibits tha use of tha directory of tha current
file directory as tha straight-up original gangsta search directory fo' \f(CW\*(C`#include\ "\f(CIfile\f(CW"\*(C'\fR.
.Sp
This option has been deprecated.
.IP "\fB\-nostdinc\fR" 4
.IX Item "-nostdinc"
Do not search tha standard system directories fo' header files.
Only tha directories you have specified wit \fB\-I\fR options
(and tha directory of tha current file, if appropriate) is searched.
.IP "\fB\-nostdinc++\fR" 4
.IX Item "-nostdinc++"
Do not search fo' header filez up in tha \*(C+\-specific standard directories,
but do still search tha other standard directories. Put ya muthafuckin choppers up if ya feel dis!  (This option is
used when buildin tha \*(C+ library.)
.IP "\fB\-include\fR \fIfile\fR" 4
.IX Item "-include file"
Process \fIfile\fR as if \f(CW\*(C`#include "file"\*(C'\fR rocked up as tha first
line of tha primary source file.  But fuck dat shiznit yo, tha word on tha street is dat tha straight-up original gangsta directory searched
for \fIfile\fR is tha preprocessorz hustlin directory \fIinstead of\fR
the directory containin tha main source file.  If not found there, it
is searched fo' up in tha remainder of tha \f(CW\*(C`#include "..."\*(C'\fR search
chain as normal.
.Sp
If multiple \fB\-include\fR options is given, tha filez is included
in tha order they step tha fuck up on tha command line.
.IP "\fB\-imacros\fR \fIfile\fR" 4
.IX Item "-imacros file"
Exactly like \fB\-include\fR, except dat any output produced by
scannin \fIfile\fR is thrown away.  Macros it defines remain defined.
This allows you ta acquire all tha macros from a header without also
processin its declarations.
.Sp
All filez specified by \fB\-imacros\fR is processed before all files
specified by \fB\-include\fR.
.IP "\fB\-idirafter\fR \fIdir\fR" 4
.IX Item "-idirafta dir"
Search \fIdir\fR fo' header filez yo, but do it \fIafter\fR all
directories specified wit \fB\-I\fR n' tha standard system directories
have been exhausted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  \fIdir\fR is treated as a system include directory.
If \fIdir\fR begins wit \f(CW\*(C`=\*(C'\fR, then tha \f(CW\*(C`=\*(C'\fR is ghon be replaced
by tha sysroot prefix; peep \fB\-\-sysroot\fR n' \fB\-isysroot\fR.
.IP "\fB\-iprefix\fR \fIprefix\fR" 4
.IX Item "-iprefix prefix"
Specify \fIprefix\fR as tha prefix fo' subsequent \fB\-iwithprefix\fR
options.  If tha prefix represents a gangbangin' finger-lickin' directory, you should include the
final \fB/\fR.
.IP "\fB\-iwithprefix\fR \fIdir\fR" 4
.IX Item "-iwithprefix dir"
.PD 0
.IP "\fB\-iwithprefixbefore\fR \fIdir\fR" 4
.IX Item "-iwithprefixbefore dir"
.PD
Append \fIdir\fR ta tha prefix specified previously with
\&\fB\-iprefix\fR, n' add tha resultin directory ta tha include search
path.  \fB\-iwithprefixbefore\fR puts it up in tha same place \fB\-I\fR
would; \fB\-iwithprefix\fR puts it where \fB\-idirafter\fR would.
.IP "\fB\-isysroot\fR \fIdir\fR" 4
.IX Item "-isysroot dir"
This option is like tha \fB\-\-sysroot\fR option yo, but applies only to
header filez (except fo' Darwin targets, where it applies ta both header
filez n' libraries).  See tha \fB\-\-sysroot\fR option fo' more
information.
.IP "\fB\-imultilib\fR \fIdir\fR" 4
.IX Item "-imultilib dir"
Use \fIdir\fR as a subdirectory of tha directory containing
target-specific \*(C+ headers.
.IP "\fB\-isystem\fR \fIdir\fR" 4
.IX Item "-isystem dir"
Search \fIdir\fR fo' header files, afta all directories specified by
\&\fB\-I\fR but before tha standard system directories. Put ya muthafuckin choppers up if ya feel dis!  Mark it
as a system directory, so dat it gets tha same ol' dirty special treatment as
is applied ta tha standard system directories.
.Sp
If \fIdir\fR begins wit \f(CW\*(C`=\*(C'\fR, then tha \f(CW\*(C`=\*(C'\fR is ghon be replaced
by tha sysroot prefix; peep \fB\-\-sysroot\fR n' \fB\-isysroot\fR.
.IP "\fB\-iquote\fR \fIdir\fR" 4
.IX Item "-iquote dir"
Search \fIdir\fR only fo' header filez axed with
\&\f(CW\*(C`#include\ "\f(CIfile\f(CW"\*(C'\fR; they is not searched for
\&\f(CW\*(C`#include\ <\f(CIfile\f(CW>\*(C'\fR, before all directories specified by
\&\fB\-I\fR n' before tha standard system directories.
.Sp
If \fIdir\fR begins wit \f(CW\*(C`=\*(C'\fR, then tha \f(CW\*(C`=\*(C'\fR is ghon be replaced
by tha sysroot prefix; peep \fB\-\-sysroot\fR n' \fB\-isysroot\fR.
.IP "\fB\-fdirectives\-only\fR" 4
.IX Item "-fdirectives-only"
When preprocessing, handle directives yo, but do not expand macros.
.Sp
Da optionz behavior dependz on tha \fB\-E\fR n' \fB\-fpreprocessed\fR
options.
.Sp
With \fB\-E\fR, preprocessin is limited ta tha handlin of directives
like fuckin \f(CW\*(C`#define\*(C'\fR, \f(CW\*(C`#ifdef\*(C'\fR, n' \f(CW\*(C`#error\*(C'\fR.  Other
preprocessor operations, like fuckin macro expansion n' trigraph
conversion is not performed. Y'all KNOW dat shit, muthafucka!  In addition, tha \fB\-dD\fR option is
implicitly enabled.
.Sp
With \fB\-fpreprocessed\fR, predefinizzle of command line n' most
builtin macros is disabled. Y'all KNOW dat shit, muthafucka!  Macros like fuckin \f(CW\*(C`_\|_LINE_\|_\*(C'\fR, which are
contextually dependent, is handled normally.  This enablez compilation of
filez previously preprocessed wit \f(CW\*(C`\-E \-fdirectives\-only\*(C'\fR.
.Sp
With both \fB\-E\fR n' \fB\-fpreprocessed\fR, tha rulez for
\&\fB\-fpreprocessed\fR take precedence.  This enablez full preprocessin of
filez previously preprocessed wit \f(CW\*(C`\-E \-fdirectives\-only\*(C'\fR.
.IP "\fB\-fdollars\-in\-identifiers\fR" 4
.IX Item "-fdollars-in-identifiers"
Accept \fB$\fR up in identifiers.
.IP "\fB\-fextended\-identifiers\fR" 4
.IX Item "-fextended-identifiers"
Accept universal characta names up in identifiers.  This option is
experimental; up in a gangbangin' future version of \s-1GCC,\s0 it is ghon be enabled by
default fo' C99 n' \*(C+.
.IP "\fB\-fno\-canonical\-system\-headers\fR" 4
.IX Item "-fno-canonical-system-headers"
When preprocessing, do not shorten system header paths wit canonicalization.
.IP "\fB\-fpreprocessed\fR" 4
.IX Item "-fpreprocessed"
Indicate ta tha preprocessor dat tha input file has already been
preprocessed. Y'all KNOW dat shit, muthafucka!  This suppresses thangs like macro expansion, trigraph
conversion, escaped newline splicing, n' processin of most directives.
Da preprocessor still recognizes n' removes comments, so dat you can
pass a gangbangin' file preprocessed wit \fB\-C\fR ta tha compila without
problems.  In dis mode tha integrated preprocessor is lil mo' than
a tokenizer fo' tha front ends.
.Sp
\&\fB\-fpreprocessed\fR is implicit if tha input file has one of the
extensions \fB.i\fR, \fB.ii\fR or \fB.mi\fR.  These is the
extensions dat \s-1GCC\s0 uses fo' preprocessed filez pimped by
\&\fB\-save\-temps\fR.
.IP "\fB\-ftabstop=\fR\fIwidth\fR" 4
.IX Item "-ftabstop=width"
Set tha distizzle between tab stops.  This helps tha preprocessor report
correct column numbers up in warnings or errors, even if tabs step tha fuck up on the
line.  If tha value is less than 1 or pimped outa than 100, tha option is
ignored. Y'all KNOW dat shit, muthafucka!  Da default is 8.
.IP "\fB\-fdebug\-cpp\fR" 4
.IX Item "-fdebug-cpp"
This option is only useful fo' debuggin \s-1GCC. \s0 When used with
\&\fB\-E\fR, dumps debuggin shiznit bout location maps.  Every
token up in tha output is preceded by tha dump of tha map its location
belongs to.  Da dump of tha map holdin tha location of a token would
be:
.Sp
.Vb 1
\&        {"P":F</file/path>;"F":F</includer/path>;"L":<line_num>;"C":<col_num>;"S":<system_header_p>;"M":<map_address>;"E":<macro_expansion_p>,"loc":<location>}
.Ve
.Sp
When used without \fB\-E\fR, dis option has no effect.
.IP "\fB\-ftrack\-macro\-expansion\fR[\fB=\fR\fIlevel\fR]" 4
.IX Item "-ftrack-macro-expansion[=level]"
Track locationz of tokens across macro expansions. This allows the
compila ta emit diagnostic bout tha current macro expansion stack
when a cold-ass lil compilation error occurs up in a macro expansion. I aint talkin' bout chicken n' gravy biatch. Usin this
option make tha preprocessor n' tha compila consume more
memory. Da \fIlevel\fR parameta can be used ta chizzle tha level of
precision of token location trackin thus decreasin tha memory
consumption if necessary. Value \fB0\fR of \fIlevel\fR de-activates
this option just as if no \fB\-ftrack\-macro\-expansion\fR was present
on tha command line. Value \fB1\fR tracks tokens locations up in a
degraded mode fo' tha sake of minimal memory overhead. Y'all KNOW dat shit, muthafucka! In dis mode
all tokens resultin from tha expansion of a argument of a
function-like macro have tha same location. I aint talkin' bout chicken n' gravy biatch. Value \fB2\fR tracks
tokens locations straight-up. This value is da most thugged-out memory hungry.
When dis option is given no argument, tha default parameta value is
\&\fB2\fR.
.Sp
Note dat \-ftrack\-macro\-expansion=2 be activated by default.
.IP "\fB\-fexec\-charset=\fR\fIcharset\fR" 4
.IX Item "-fexec-charset=charset"
Set tha execution characta set, used fo' strang n' character
constants, n' you can put dat on yo' toast.  Da default is \s-1UTF\-8.  \s0\fIcharset\fR can be any encoding
supported by tha systemz \f(CW\*(C`iconv\*(C'\fR library routine.
.IP "\fB\-fwide\-exec\-charset=\fR\fIcharset\fR" 4
.IX Item "-fwide-exec-charset=charset"
Set tha wide execution characta set, used fo' wide strang and
characta constants, n' you can put dat on yo' toast.  Da default is \s-1UTF\-32\s0 or \s-1UTF\-16,\s0 whichever
correspondz ta tha width of \f(CW\*(C`wchar_t\*(C'\fR.  As with
\&\fB\-fexec\-charset\fR, \fIcharset\fR can be any encodin supported
by tha systemz \f(CW\*(C`iconv\*(C'\fR library routine; however, yo big-ass booty is ghon have
problems wit encodings dat do not fit exactly up in \f(CW\*(C`wchar_t\*(C'\fR.
.IP "\fB\-finput\-charset=\fR\fIcharset\fR" 4
.IX Item "-finput-charset=charset"
Set tha input characta set, used fo' translation from tha character
set of tha input file ta tha source characta set used by \s-1GCC. \s0 If the
locale do not specify, or \s-1GCC\s0 cannot git dis shiznit from the
locale, tha default is \s-1UTF\-8. \s0 This can be overridden by either tha locale
or dis command line option. I aint talkin' bout chicken n' gravy biatch.  Currently tha command line option takes
precedence if there be a a cold-ass lil conflict.  \fIcharset\fR can be any encoding
supported by tha systemz \f(CW\*(C`iconv\*(C'\fR library routine.
.IP "\fB\-fworking\-directory\fR" 4
.IX Item "-fworking-directory"
Enable generation of linemarkers up in tha preprocessor output dat will
let tha compila know tha current hustlin directory all up in tha time of
preprocessing.  When dis option is enabled, tha preprocessor will
emit, afta tha initial linemarker, a second linemarker wit the
current hustlin directory followed by two slashes.  \s-1GCC\s0 will use this
directory, when itz present up in tha preprocessed input, as the
directory emitted as tha current hustlin directory up in some debugging
information formats, n' you can put dat on yo' toast.  This option is implicitly enabled if debugging
information is enabled yo, but dis can be inhibited wit tha negated
form \fB\-fno\-working\-directory\fR.  If tha \fB\-P\fR flag is
present up in tha command line, dis option has no effect, since no
\&\f(CW\*(C`#line\*(C'\fR directives is emitted whatsoever.
.IP "\fB\-fno\-show\-column\fR" 4
.IX Item "-fno-show-column"
Do not print column numbers up in diagnostics.  This may be necessary if
diagnostics is bein scanned by a program dat do not KNOW the
column numbers, like fuckin \fBdejagnu\fR.
.IP "\fB\-A\fR \fIpredicate\fR\fB=\fR\fIanswer\fR" 4
.IX Item "-A predicate=answer"
Make a assertion wit tha predicate \fIpredicate\fR n' answer
\&\fIanswer\fR.  This form is preferred ta tha olda form \fB\-A\fR
\&\fIpredicate\fR\fB(\fR\fIanswer\fR\fB)\fR, which is still supported, cuz
it do not use shell special characters.
.IP "\fB\-A \-\fR\fIpredicate\fR\fB=\fR\fIanswer\fR" 4
.IX Item "-A -predicate=answer"
Cancel a assertion wit tha predicate \fIpredicate\fR n' answer
\&\fIanswer\fR.
.IP "\fB\-dCHARS\fR" 4
.IX Item "-dCHARS"
\&\fI\s-1CHARS\s0\fR be a sequence of one or mo' of tha followin characters,
and must not be preceded by a space.  Other charactas is interpreted
by tha compila proper, or reserved fo' future versionz of \s-1GCC,\s0 n' so
are silently ignored. Y'all KNOW dat shit, muthafucka!  If you specify charactas whose behavior
conflicts, tha result is undefined.
.RS 4
.IP "\fBM\fR" 4
.IX Item "M"
Instead of tha aiiight output, generate a list of \fB#define\fR
directives fo' all tha macros defined durin tha execution of the
preprocessor, includin predefined macros.  This gives you a way of
findin up what tha fuck is predefined up in yo' version of tha preprocessor.
Assumin you have no file \fIfoo.h\fR, tha command
.Sp
.Vb 1
\&        bust a nut on foo.h; cpp \-dM foo.h
.Ve
.Sp
will show all tha predefined macros.
.Sp
If you use \fB\-dM\fR without tha \fB\-E\fR option, \fB\-dM\fR is
interpreted as a synonym fo' \fB\-fdump\-rtl\-mach\fR.
.IP "\fBD\fR" 4
.IX Item "D"
Like \fBM\fR except up in two respects: it do \fInot\fR include the
predefined macros, n' it outputs \fIboth\fR tha \fB#define\fR
directives n' tha result of preprocessing.  Both kindz of output go to
the standard output file.
.IP "\fBN\fR" 4
.IX Item "N"
Like \fBD\fR yo, but emit only tha macro names, not they expansions.
.IP "\fBI\fR" 4
.IX Item "I"
Output \fB#include\fR directives up in addizzle ta tha result of
preprocessing.
.IP "\fBU\fR" 4
.IX Item "U"
Like \fBD\fR except dat only macros dat is expanded, or whose
definednizz is tested up in preprocessor directives, is output; the
output is delayed until tha use or test of tha macro; and
\&\fB#undef\fR directives is also output fo' macros tested but
undefined all up in tha time.
.RE
.RS 4
.RE
.IP "\fB\-P\fR" 4
.IX Item "-P"
Inhibit generation of linemarkers up in tha output from tha preprocessor.
This might be useful when hustlin tha preprocessor on suttin' dat is
not C code, n' is ghon be busted ta a program which might be trippin by the
linemarkers.
.IP "\fB\-C\fR" 4
.IX Item "-C"
Do not discard comments, n' you can put dat on yo' toast.  All comments is passed all up in ta tha output
file, except fo' comments up in processed directives, which is deleted
along wit tha directive.
.Sp
Yo ass should be prepared fo' side effects when rockin \fB\-C\fR; it
causes tha preprocessor ta treat comments as tokens up in they own right.
For example, comments appearin all up in tha start of what tha fuck would be a
directizzle line have tha effect of turnin dat line tha fuck into a ordinary
source line, since tha straight-up original gangsta token on tha line is no longer a \fB#\fR.
.IP "\fB\-CC\fR" 4
.IX Item "-CC"
Do not discard comments, includin durin macro expansion. I aint talkin' bout chicken n' gravy biatch.  This is
like \fB\-C\fR, except dat comments contained within macros are
also passed all up in ta tha output file where tha macro is expanded.
.Sp
In addizzle ta tha side-effectz of tha \fB\-C\fR option, the
\&\fB\-CC\fR option causes all \*(C+\-style comments inside a macro
to be converted ta C\-style comments, n' you can put dat on yo' toast.  This is ta prevent lata use
of dat macro from inadvertently commentin up tha remainder of
the source line.
.Sp
Da \fB\-CC\fR option is generally used ta support lint comments.
.IP "\fB\-traditional\-cpp\fR" 4
.IX Item "-traditional-cpp"
Try ta imitate tha behavior of old-fashioned C preprocessors, as
opposed ta \s-1ISO C\s0 preprocessors.
.IP "\fB\-trigraphs\fR" 4
.IX Item "-trigraphs"
Process trigraph sequences.
.IP "\fB\-remap\fR" 4
.IX Item "-remap"
Enable special code ta work round file systems which only permit hella
short file names, like fuckin MS-DOS.
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
.PD 0
.IP "\fB\-\-target\-help\fR" 4
.IX Item "--target-help"
.PD
Print text describin all tha command line options instead of
preprocessin anything.
.IP "\fB\-v\fR" 4
.IX Item "-v"
Verbose mode.  Print up \s-1GNU CPP\s0z version number all up in tha beginnin of
execution, n' report tha final form of tha include path.
.IP "\fB\-H\fR" 4
.IX Item "-H"
Print tha name of each header file used, up in addizzle ta other normal
activities. Put ya muthafuckin choppers up if ya feel dis!  Each name is indented ta show how tha fuck deep up in the
\&\fB#include\fR stack it is.  Precompiled header filez is also
printed, even if they is found ta be invalid; a invalid precompiled
header file is printed wit \fB...x\fR n' a valid one wit \fB...!\fR .
.IP "\fB\-version\fR" 4
.IX Item "-version"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
Print up \s-1GNU CPP\s0z version number n' shit.  With one dash, proceed to
preprocess as normal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  With two dashes, exit immediately.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
This section raps bout tha environment variablez dat affect how tha fuck \s-1CPP\s0
operates.  Yo ass can use dem ta specify directories or prefixes ta use
when searchin fo' include files, or ta control dependency output.
.PP
Note dat you can also specify places ta search rockin options such as
\&\fB\-I\fR, n' control dependency output wit options like
\&\fB\-M\fR.  These take precedence over
environment variables, which up in turn take precedence over the
configuration of \s-1GCC.\s0
.IP "\fB\s-1CPATH\s0\fR" 4
.IX Item "CPATH"
.PD 0
.IP "\fBC_INCLUDE_PATH\fR" 4
.IX Item "C_INCLUDE_PATH"
.IP "\fB\s-1CPLUS_INCLUDE_PATH\s0\fR" 4
.IX Item "CPLUS_INCLUDE_PATH"
.IP "\fB\s-1OBJC_INCLUDE_PATH\s0\fR" 4
.IX Item "OBJC_INCLUDE_PATH"
.PD
Each variablez value be a list of directories separated by a special
character, much like \fB\s-1PATH\s0\fR, up in which ta look fo' header files.
Da special character, \f(CW\*(C`PATH_SEPARATOR\*(C'\fR, is target-dependent and
determined at \s-1GCC\s0 build time.  For Microsizzlez Windows-based targets it be a
semicolon, n' fo' almost all other targets it aint nuthin but a cold-ass lil colon.
.Sp
\&\fB\s-1CPATH\s0\fR specifies a list of directories ta be searched as if
specified wit \fB\-I\fR yo, but afta any paths given wit \fB\-I\fR
options on tha command line.  This environment variable is used
regardless of which language is bein preprocessed.
.Sp
Da remainin environment variablez apply only when preprocessin the
particular language indicated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Each specifies a list of directories
to be searched as if specified wit \fB\-isystem\fR yo, but afta any
paths given wit \fB\-isystem\fR options on tha command line.
.Sp
In all these variables, a empty element instructs tha compila to
search its current hustlin directory.  Empty elements can step tha fuck up at the
beginnin or end of a path.  For instance, if tha value of
\&\fB\s-1CPATH\s0\fR is \f(CW\*(C`:/special/include\*(C'\fR, dat has tha same
effect as \fB\-I.\ \-I/special/include\fR.
.IP "\fB\s-1DEPENDENCIES_OUTPUT\s0\fR" 4
.IX Item "DEPENDENCIES_OUTPUT"
If dis variable is set, its value specifies how tha fuck ta output
dependencies fo' Make based on tha non-system header filez processed
by tha compila n' shit.  System header filez is ignored up in tha dependency
output.
.Sp
Da value of \fB\s-1DEPENDENCIES_OUTPUT\s0\fR can be just a gangbangin' file name, in
which case tha Make rulez is freestyled ta dat file, guessin tha target
name from tha source file name.  Or tha value can have tha form
\&\fIfile\fR\fB \fR\fItarget\fR, up in which case tha rulez is freestyled to
file \fIfile\fR rockin \fItarget\fR as tha target name.
.Sp
In other lyrics, dis environment variable is equivalent ta combining
the options \fB\-MM\fR n' \fB\-MF\fR,
with a optionizzle \fB\-MT\fR switch like a muthafucka.
.IP "\fB\s-1SUNPRO_DEPENDENCIES\s0\fR" 4
.IX Item "SUNPRO_DEPENDENCIES"
This variable is tha same ol' dirty as \fB\s-1DEPENDENCIES_OUTPUT\s0\fR (see above),
except dat system header filez is not ignored, so it implies
\&\fB\-M\fR rather than \fB\-MM\fR.  But fuck dat shiznit yo, tha word on tha street is dat tha dependence on the
main input file is omitted.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIgpl\fR\|(7), \fIgfdl\fR\|(7), \fIfsf\-funding\fR\|(7),
\&\fIgcc\fR\|(1), \fIas\fR\|(1), \fIld\fR\|(1), n' tha Info entries fo' \fIcpp\fR, \fIgcc\fR, and
\&\fIbinutils\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1987\-2013 Jacked Software Foundation, Inc.
.PP
Permission is granted ta copy, distribute and/or modify dis document
under tha termz of tha \s-1GNU\s0 Jacked Documentation License, Version 1.3 or
any lata version published by tha Jacked Software Foundation. I aint talkin' bout chicken n' gravy biatch.  A copy of
the license is included up in the
man page \fIgfdl\fR\|(7).
This manual gotz nuff no Invariant Sections.  Da Front-Cover Texts are
(a) (see below), n' tha Back-Cover Texts is (b) (see below).
.PP
(a) Da \s-1FSF\s0z Front-Cover Text is:
.PP
.Vb 1
\&     A GNU Manual
.Ve
.PP
(b) Da \s-1FSF\s0z Back-Cover Text is:
.PP
.Vb 3
\&     Yo ass have freedom ta copy n' modify dis GNU Manual, like GNU
\&     software.  Copies published by tha Jacked Software Foundation raise
\&     fundz fo' GNU pimpment.
.Ve
