'\" t
.\"     Title: git-merge-base
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-MERGE\-BASE" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-merge-base \- Find as phat common ancestors as possible fo' a merge
.SH "SYNOPSIS"
.sp
.nf
\fIgit merge\-base\fR [\-a|\-\-all] <commit> <commit>\&...
\fIgit merge\-base\fR [\-a|\-\-all] \-\-octopus <commit>\&...
\fIgit merge\-base\fR \-\-is\-ancestor <commit> <commit>
\fIgit merge\-base\fR \-\-independent <commit>\&...
\fIgit merge\-base\fR \-\-fork\-point <ref> [<commit>]
.fi
.sp
.SH "DESCRIPTION"
.sp
\fIgit merge\-base\fR findz dopest common ancestor(s) between two commits ta use up in a three\-way merge\&. One common ancestor is \fIbetter\fR than another common ancestor if tha latta be a ancestor of tha former\& fo' realz. A common ancestor dat aint gots any betta common ancestor be a \fIbest common ancestor\fR, i\&.e\&. a \fImerge base\fR\&. Note dat there can be mo' than one merge base fo' a pair of commits\&.
.SH "OPERATION MODES"
.sp
As da most thugged-out common special case, specifyin only two commits on tha command line means computin tha merge base between tha given two commits\&.
.sp
Mo' generally, among tha two commits ta compute tha merge base from, one is specified by tha straight-up original gangsta commit argument on tha command line; tha other commit be a (possibly hypothetical) commit dat be a merge across all tha remainin commits on tha command line\&.
.sp
As a cold-ass lil consequence, tha \fImerge base\fR aint necessarily contained up in each of tha commit arguments if mo' than two commits is specified\&. This is different from \fBgit-show-branch\fR(1) when used wit tha \-\-merge\-base option\&.
.PP
\-\-octopus
.RS 4
Compute tha dopest common ancestorz of all supplied commits, up in preparation fo' a n\-way merge\&. This mimics tha behavior of
\fIgit show\-branch \-\-merge\-base\fR\&.
.RE
.PP
\-\-independent
.RS 4
Instead of printin merge bases, print a minimal subset of tha supplied commits wit tha same ancestors\&. In other lyrics, among tha commits given, list dem which cannot be reached from any other\&. This mimics tha behavior of
\fIgit show\-branch \-\-independent\fR\&.
.RE
.PP
\-\-is\-ancestor
.RS 4
Peep if tha straight-up original gangsta <commit> be a ancestor of tha second <commit>, n' exit wit status 0 if true, or wit status 1 if not\&. Errors is signaled by a non\-zero status dat aint 1\&.
.RE
.PP
\-\-fork\-point
.RS 4
Find tha point at which a funky-ass branch (or any history dat leadz ta <commit>) forked from another branch (or any reference) <ref>\&. This do not just look fo' tha common ancestor of tha two commits yo, but also takes tha fuck into account tha reflog of <ref> ta peep if tha history leadin ta <commit> forked from a earlier incarnation of tha branch <ref> (see rap on dis mode below)\&.
.RE
.SH "OPTIONS"
.PP
\-a, \-\-all
.RS 4
Output all merge bases fo' tha commits, instead of just one\&.
.RE
.SH "DISCUSSION"
.sp
Given two commits \fIA\fR n' \fIB\fR, git merge\-base A B will output a cold-ass lil commit which is reachable from both \fIA\fR n' \fIB\fR all up in tha parent relationshizzle\&.
.sp
For example, wit dis topology:
.sp
.if n \{\
.RS 4
.\}
.nf
         o\-\-\-o\-\-\-o\-\-\-B
        /
\-\-\-o\-\-\-1\-\-\-o\-\-\-o\-\-\-o\-\-\-A
.fi
.if n \{\
.RE
.\}
.sp
the merge base between \fIA\fR n' \fIB\fR is \fI1\fR\&.
.sp
Given three commits \fIA\fR, \fIB\fR n' \fIC\fR, git merge\-base A B C will compute tha merge base between \fIA\fR n' a hypothetical commit \fIM\fR, which be a merge between \fIB\fR n' \fIC\fR\&. For example, wit dis topology:
.sp
.if n \{\
.RS 4
.\}
.nf
       o\-\-\-o\-\-\-o\-\-\-o\-\-\-C
      /
     /   o\-\-\-o\-\-\-o\-\-\-B
    /   /
\-\-\-2\-\-\-1\-\-\-o\-\-\-o\-\-\-o\-\-\-A
.fi
.if n \{\
.RE
.\}
.sp
the result of git merge\-base A B C is \fI1\fR\&. This is cuz tha equivalent topologizzle wit a merge commit \fIM\fR between \fIB\fR n' \fIC\fR is:
.sp
.if n \{\
.RS 4
.\}
.nf
       o\-\-\-o\-\-\-o\-\-\-o\-\-\-o
      /                 \e
     /   o\-\-\-o\-\-\-o\-\-\-o\-\-\-M
    /   /
\-\-\-2\-\-\-1\-\-\-o\-\-\-o\-\-\-o\-\-\-A
.fi
.if n \{\
.RE
.\}
.sp
and tha result of git merge\-base A M is \fI1\fR\&. Commit \fI2\fR be also a cold-ass lil common ancestor between \fIA\fR n' \fIM\fR yo, but \fI1\fR be a funky-ass betta common ancestor, cuz \fI2\fR be a ancestor of \fI1\fR\& yo. Hence, \fI2\fR aint a merge base\&.
.sp
Da result of git merge\-base \-\-octopus A B C is \fI2\fR, cuz \fI2\fR is tha dopest common ancestor of all commits\&.
.sp
When tha history involves criss\-cross merges, there can be mo' than one \fIbest\fR common ancestor fo' two commits\&. For example, wit dis topology:
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-\-1\-\-\-o\-\-\-A
    \e /
     X
    / \e
\-\-\-2\-\-\-o\-\-\-o\-\-\-B
.fi
.if n \{\
.RE
.\}
.sp
both \fI1\fR n' \fI2\fR is merge\-basez of A n' B\&. Neither one is betta than tha other (both is \fIbest\fR merge bases)\&. When tha \-\-all option aint given, it is unspecified which dopest one is output\&.
.sp
A common idiom ta check "fast\-forward\-ness" between two commits A n' B is (or at least used ta be) ta compute tha merge base between A n' B, n' check if it is tha same ol' dirty as A, up in which case, A be a ancestor of B\&. Yo ass will peep dis idiom used often up in olda scripts\&.
.sp
.if n \{\
.RS 4
.\}
.nf
A=$(git rev\-parse \-\-verify A)
if test "$A" = "$(git merge\-base A B)"
then
        \&.\&.\& fo' realz. A be a ancestor of B \&.\&.\&.
fi
.fi
.if n \{\
.RE
.\}
.sp
In modern git, you can say dis up in a mo' direct way:
.sp
.if n \{\
.RS 4
.\}
.nf
if git merge\-base \-\-is\-ancestor A B
then
        \&.\&.\& fo' realz. A be a ancestor of B \&.\&.\&.
fi
.fi
.if n \{\
.RE
.\}
.sp
instead\&.
.SH "DISCUSSION ON FORK-POINT MODE"
.sp
Afta hustlin on tha topic branch pimped wit git checkout \-b topic origin/master, tha history of remote\-trackin branch origin/masta may done been rewound n' rebuilt, leadin ta a history of dis shape:
.sp
.if n \{\
.RS 4
.\}
.nf
                 o\-\-\-B1
                /
\-\-\-o\-\-\-o\-\-\-B2\-\-o\-\-\-o\-\-\-o\-\-\-B (origin/master)
        \e
         B3
          \e
           Derived (topic)
.fi
.if n \{\
.RE
.\}
.sp
where origin/masta used ta point at commits B3, B2, B1 n' now it points at B, n' yo' topic branch was started on top of it back when origin/masta was at B3\&. This mode uses tha reflog of origin/masta ta find B3 as tha fork point, so dat tha topic can be rebased on top of tha updated origin/masta by:
.sp
.if n \{\
.RS 4
.\}
.nf
$ fork_point=$(git merge\-base \-\-fork\-point origin/masta topic)
$ git rebase \-\-onto origin/masta $fork_point topic
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.sp
\fBgit-rev-list\fR(1), \fBgit-show-branch\fR(1), \fBgit-merge\fR(1)
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
