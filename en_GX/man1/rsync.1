.TH "rsync" "1" "28 Sep 2013" "" ""
.SH "NAME"
rsync \- a gangbangin' fast, versatile, remote (and local) file\-copyin tool
.SH "SYNOPSIS"

.PP 
.nf 
Local:  rsync [OPTION...] SRC... [DEST]

Access via remote shell:
  Pull: rsync [OPTION...] [USER@]HOST:SRC... [DEST]
  Push: rsync [OPTION...] SRC... [USER@]HOST:DEST

Access via rsync daemon:
  Pull: rsync [OPTION...] [USER@]HOST::SRC... [DEST]
        rsync [OPTION...] rsync://[USER@]HOST[:PORT]/SRC... [DEST]
  Push: rsync [OPTION...] SRC... [USER@]HOST::DEST
        rsync [OPTION...] SRC... rsync://[USER@]HOST[:PORT]/DEST
.fi 

.PP 
Usages wit just one SRC arg n' no DEST arg will list tha source files
instead of copying.
.PP 
.SH "DESCRIPTION"

.PP 
Rsync be a gangbangin' fast n' extraordinarily versatile file copyin tool.  It can
copy locally, to/from another host over any remote shell, or to/from a
remote rsync daemon. I aint talkin' bout chicken n' gravy biatch.  It offers a big-ass number of options dat control
every aspect of its behavior n' permit straight-up flexible justification of the
set of filez ta be copied. Y'all KNOW dat shit, muthafucka!  It be hyped fo' its delta\-transfer algorithm,
which reduces tha amount of data busted over tha network by bustin  only the
differences between tha source filez n' tha existin filez up in the
destination. I aint talkin' bout chicken n' gravy biatch.  Rsync is widely used fo' backups n' mirrorin n' as an
improved copy command fo' everydizzle use.
.PP 
Rsync findz filez dat need ta be transferred rockin a \(dq\&quick check\(dq\&
algorithm (by default) dat looks fo' filez dat have chizzled up in size or
in last\-modified time.  Any chizzlez up in tha other preserved attributes (as
axed by options) is made on tha destination file directly when the
quick check indicates dat tha file\(cq\&s data do not need ta be updated.
.PP 
Some of tha additionizzle featurez of rsync are:
.PP 
.IP o 
support fo' copyin links, devices, ballers, groups, n' permissions
.IP o 
exclude n' exclude\-from options similar ta GNU tar
.IP o 
a CVS exclude mode fo' ignorin tha same filez dat CVS would ignore
.IP o 
can use any transparent remote shell, includin ssh or rsh
.IP o 
does not require super\-user privileges
.IP o 
pipelinin of file transfers ta minimize latency costs
.IP o 
support fo' anonymous or authenticated rsync daemons (ideal for
mirroring)

.PP 
.SH "GENERAL"

.PP 
Rsync copies filez either ta or from a remote host, or locally on the
current host (it do not support copyin filez between two remote hosts).
.PP 
There is two different ways fo' rsync ta contact a remote system: rockin a
remote\-shell program as tha transhiznit (like fuckin ssh or rsh) or contactin an
rsync daemon directly via TCP.  Da remote\-shell transhiznit is used whenever
the source or destination path gotz nuff a single colon (:) separator after
a host justification. I aint talkin' bout chicken n' gravy biatch.  Contactin a rsync daemon directly happens when the
source or destination path gotz nuff a thugged-out double colon (::) separator afta a
host justification, OR when a rsync:// URL is specified (see also the
\(dq\&USING RSYNC\-DAEMON FEATURES VIA A REMOTE\-SHELL CONNECTION\(dq\& section for
an exception ta dis latta rule).
.PP 
As a special case, if a single source arg is specified without a
destination, tha filez is listed up in a output format similar ta \(dq\&ls \-l\(dq\&.
.PP 
As expected, if neither tha source or destination path specify a remote
host, tha copy occurs locally (see also tha \fB\-\-list\-only\fP option).
.PP 
Rsync refers ta tha local side as tha \(dq\&client\(dq\& n' tha remote side as the
\(dq\&server\(dq\&.  Don\(cq\&t confuse \(dq\&server\(dq\& wit a rsync daemon \-\- a thugged-out daemon be always a
server yo, but a server can be either a thugged-out daemon or a remote\-shell spawned process.
.PP 
.SH "SETUP"

.PP 
See tha file README fo' installation instructions.
.PP 
Once installed, you can use rsync ta any machine dat you can access via
a remote shell (as well as some dat you can access rockin tha rsync
daemon\-mode protocol).  For remote transfers, a modern rsync uses ssh
for its communications yo, but it may done been configured ta use a
different remote shell by default, like fuckin rsh or remsh.
.PP 
Yo ass can also specify any remote shell you like, either by rockin tha \fB\-e\fP
command line option, or by settin tha RSYNC_RSH environment variable.
.PP 
Note dat rsync must be installed on both tha source n' destination
machines.
.PP 
.SH "USAGE"

.PP 
Yo ass use rsync up in tha same way you use rcp. Yo ass must specify a source
and a thugged-out destination, one of which may be remote.
.PP 
Perhaps tha dopest way ta explain tha syntax is wit some examples:
.PP 
.RS 
\f(CWrsync \-t *.c foo:src/\fP
.RE

.PP 
This would transfer all filez matchin tha pattern *.c from the
current directory ta tha directory src on tha machine foo. If any of
the filez already exist on tha remote system then tha rsync
remote\-update protocol is used ta update tha file by bustin  only the
differences. Right back up in yo muthafuckin ass. See tha tech report fo' details.
.PP 
.RS 
\f(CWrsync \-avz foo:src/bar /data/tmp\fP
.RE

.PP 
This would recursively transfer all filez from tha directory src/bar on the
machine foo tha fuck into tha /data/tmp/bar directory on tha local machine. The
filez is transferred up in \(dq\&archive\(dq\& mode, which ensures dat symbolic
links, devices, attributes, permissions, ballerships, etc. is preserved
in tha transfer n' shit.  Additionally, compression is ghon be used ta reduce the
size of data portionz of tha transfer.
.PP 
.RS 
\f(CWrsync \-avz foo:src/bar/ /data/tmp\fP
.RE

.PP 
A trailin slash on tha source chizzlez dis behavior ta avoid bustin an
additionizzle directory level all up in tha destination. I aint talkin' bout chicken n' gravy biatch.  Yo ass can be thinkin of a trailing
/ on a source as meanin \(dq\&copy tha contentz of dis directory\(dq\& as opposed
to \(dq\&copy tha directory by name\(dq\& yo, but up in both cases tha attributez of the
containin directory is transferred ta tha containin directory on the
destination. I aint talkin' bout chicken n' gravy biatch.  In other lyrics, each of tha followin commandz copies the
filez up in tha same way, includin they settin of tha attributes of
/dest/foo:
.PP 
.RS 
\f(CWrsync \-av /src/foo /dest\fP
.br 
\f(CWrsync \-av /src/foo/ /dest/foo\fP
.br 
.RE

.PP 
Note also dat host n' module references don\(cq\&t require a trailin slash to
copy tha contentz of tha default directory.  For example, both of these
copy tha remote directory\(cq\&s contents tha fuck into \(dq\&/dest\(dq\&:
.PP 
.RS 
\f(CWrsync \-av host: /dest\fP
.br 
\f(CWrsync \-av host::module /dest\fP
.br 
.RE

.PP 
Yo ass can also use rsync up in local\-only mode, where both tha source and
destination don\(cq\&t gotz a \(cq\&:\(cq\& up in tha name. In dis case it behaves like
an improved copy command.
.PP 
Finally, you can list all tha (listable) modulez available from a
particular rsync daemon by leavin off tha module name:
.PP 
.RS 
\f(CWrsync somehost.mydomain.com::\fP
.RE

.PP 
See tha followin section fo' mo' details.
.PP 
.SH "ADVANCED USAGE"

.PP 
Da syntax fo' requestin multiple filez from a remote host is done by
specifyin additionizzle remote\-host args up in tha same steez as tha first,
or wit tha hostname omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For instance, all these work:
.PP 
.RS 
\f(CWrsync \-av host:file1 :file2 host:file{3,4} /dest/\fP
.br 
\f(CWrsync \-av host::modname/file{1,2} host::modname/file3 /dest/\fP
.br 
\f(CWrsync \-av host::modname/file1 ::modname/file{3,4}\fP
.RE

.PP 
Older versionz of rsync required rockin quoted spaces up in tha SRC, like these
examples:
.PP 
.RS 
\f(CWrsync \-av host:'\&dir1/file1 dir2/file2'\& /dest\fP
.br 
\f(CWrsync host::'\&modname/dir1/file1 modname/dir2/file2'\& /dest\fP
.RE

.PP 
This word\-splittin still works (by default) up in tha sickest fuckin rsync yo, but is
not as easy as fuck  ta use as tha straight-up original gangsta method.
.PP 
If you need ta transfer a gangbangin' filename dat gotz nuff whitespace, you can either
specify tha \fB\-\-protect\-args\fP (\fB\-s\fP) option, or you\(cq\&ll need ta escape
the whitespace up in a way dat tha remote shell will understand. Y'all KNOW dat shit, muthafucka!  For
instance:
.PP 
.RS 
\f(CWrsync \-av host:'\&file\e name\e with\e spaces'\& /dest\fP
.RE

.PP 
.SH "CONNECTING TO AN RSYNC DAEMON"

.PP 
It be also possible ta use rsync without a remote shell as tha transport.
In dis case yo big-ass booty is ghon directly connect ta a remote rsync daemon, typically
usin TCP port 873.  (This obviously requires tha daemon ta be hustlin on
the remote system, so refer ta tha STARTING AN RSYNC DAEMON TO ACCEPT
CONNECTIONS section below fo' shiznit on dis shit.)
.PP 
Usin rsync up in dis way is tha same ol' dirty as rockin it wit a remote shell except
that:
.PP 
.IP o 
you either bust a thugged-out double colon :: instead of a single colon to
separate tha hostname from tha path, or you use a rsync:// URL.
.IP o 
the first word of tha \(dq\&path\(dq\& is straight-up a module name.
.IP o 
the remote daemon may print a message of tha dizzle when you
connect.
.IP o 
if you specify no path name on tha remote daemon then the
list of accessible paths on tha daemon is ghon be shown.
.IP o 
if you specify no local destination then a listin of the
specified filez on tha remote daemon is provided.
.IP o 
you must not specify tha \fB\-\-rsh\fP (\fB\-e\fP) option.

.PP 
An example dat copies all tha filez up in a remote module named \(dq\&src\(dq\&:
.PP 
.nf 
    rsync \-av host::src /dest
.fi 

.PP 
Some modulez on tha remote daemon may require authentication. I aint talkin' bout chicken n' gravy biatch. If so,
you will receive a password prompt when you connect. Yo ass can avoid the
password prompt by settin tha environment variable RSYNC_PASSWORD to
the password you wanna use or rockin tha \fB\-\-password\-file\fP option. I aint talkin' bout chicken n' gravy biatch. This
may be useful when scriptin rsync.
.PP 
WARNING: On some systems environment variablez is visible ta all
users. On dem systems rockin \fB\-\-password\-file\fP is recommended.
.PP 
Yo ass may establish tha connection via a wizzy proxy by settin the
environment variable RSYNC_PROXY ta a hostname:port pair pointin to
your wizzy proxy.  Note dat yo' wizzy proxy\(cq\&s configuration must support
proxy connections ta port 873.
.PP 
Yo ass may also establish a thugged-out daemon connection rockin a program as a proxy by
settin tha environment variable RSYNC_CONNECT_PROG ta tha commandz you
wish ta run up in place of bustin a gangbangin' finger-lickin' direct socket connection. I aint talkin' bout chicken n' gravy biatch.  Da strang may
contain tha escape \(dq\&%H\(dq\& ta represent tha hostname specified up in tha rsync
command (so use \(dq\&%%\(dq\& if you need a single \(dq\&%\(dq\& up in yo' string).  For
example:
.PP 
.nf 
  export RSYNC_CONNECT_PROG='\&ssh proxyhost nc %H 873'\&
  rsync \-av targethost1::module/src/ /dest/
  rsync \-av rsync:://targethost2/module/src/ /dest/ 
.fi 

.PP 
Da command specified above uses ssh ta run nc (netcat) on a proxyhost,
which forwardz all data ta port 873 (the rsync daemon) on tha targethost
(%H).
.PP 
.SH "USING RSYNC\-DAEMON FEATURES VIA A REMOTE\-SHELL CONNECTION"

.PP 
It be sometimes useful ta use various featurez of a rsync daemon (such as
named modules) without straight-up allowin any freshly smoked up socket connections tha fuck into a
system (other than what tha fuck be already required ta allow remote\-shell access).
Rsync supports connectin ta a host rockin a remote shell n' then spawning
a single\-use \(dq\&daemon\(dq\& server dat expects ta read its config file up in the
home dir of tha remote user n' shit.  This can be useful if you wanna encrypt a
daemon\-style transfer\(cq\&s data yo, but since tha daemon is started up fresh by
the remote user, you may not be able ta use features like fuckin chroot or
change tha uid used by tha daemon. I aint talkin' bout chicken n' gravy biatch.  (For another way ta encrypt a thugged-out daemon
transfer, consider rockin ssh ta tunnel a local port ta a remote machine and
configure a aiiight rsync daemon on dat remote host ta only allow
connections from \(dq\&localhost\(dq\&.)
.PP 
From tha user\(cq\&s perspective, a thugged-out daemon transfer via a remote\-shell
connection uses nearly tha same command\-line syntax as a normal
rsync\-daemon transfer, wit tha only exception bein dat you must
explicitly set tha remote shell program on tha command\-line wit the
\fB\-\-rsh=COMMAND\fP option. I aint talkin' bout chicken n' gravy biatch.  (Settin tha RSYNC_RSH up in tha environment
will not turn on dis functionality.)  For example:
.PP 
.nf 
    rsync \-av \-\-rsh=ssh host::module /dest
.fi 

.PP 
If you need ta specify a gangbangin' finger-lickin' different remote\-shell user, keep up in mind dat the
user@ prefix up in front of tha host is specifyin tha rsync\-user value (for a
module dat requires user\-based authentication).  This means dat you must
give tha \(cq\&\-l user\(cq\& option ta ssh when specifyin tha remote\-shell, as in
this example dat uses tha short version of tha \fB\-\-rsh\fP option:
.PP 
.nf 
    rsync \-av \-e \(dq\&ssh \-l ssh\-user\(dq\& rsync\-user@host::module /dest
.fi 

.PP 
Da \(dq\&ssh\-user\(dq\& is ghon be used all up in tha ssh level; tha \(dq\&rsync\-user\(dq\& will be
used ta log\-in ta tha \(dq\&module\(dq\&.
.PP 
.SH "STARTING AN RSYNC DAEMON TO ACCEPT CONNECTIONS"

.PP 
In order ta connect ta a rsync daemon, tha remote system need ta have a
daemon already hustlin (or it need ta have configured suttin' like inetd
to spawn a rsync daemon fo' incomin connections on a particular port).
For full shiznit on how tha fuck ta start a thugged-out daemon dat will handlin incoming
socket connections, peep tha \fBrsyncd.conf\fP(5) playa page \-\- dat is tha config
file fo' tha daemon, n' it gotz nuff tha full details fo' how tha fuck ta run the
daemon (includin stand\-alone n' inetd configurations).
.PP 
If you\(cq\&re rockin one of tha remote\-shell transports fo' tha transfer, there is
no need ta manually start a rsync daemon.
.PP 
.SH "SORTED TRANSFER ORDER"

.PP 
Rsync always sorts tha specified filenames tha fuck into its internal transfer list.
This handlez tha mergin together of tha contentz of identically named
directories, make it easy as fuck  ta remove duplicate filenames, n' may confuse
someone when tha filez is transferred up in a gangbangin' finger-lickin' different order than what tha fuck was
given on tha command\-line.
.PP 
If you need a particular file ta be transferred prior ta another, either
separate tha filez tha fuck into different rsync calls, or consider using
\fB\-\-delay\-updates\fP (which don\(cq\&t affect tha sorted transfer order yo, but
does make tha final file\-uppimpin phase happen much mo' rapidly).
.PP 
.SH "EXAMPLES"

.PP 
Here is some examplez of how tha fuck I use rsync.
.PP 
To backup mah hoe\(cq\&s home directory, which consistz of big-ass MS Word
filez n' mail folders, I bust a cold-ass lil cron thang dat runs
.PP 
.RS 
\f(CWrsync \-Cavz . arvidsjaur:backup\fP
.RE

.PP 
each night over a PPP connection ta a thugged-out duplicate directory on mah machine
\(dq\&arvidsjaur\(dq\&.
.PP 
To synchronize mah samba source trees I use tha followin Makefile
targets:
.PP 
.nf 
    get:
            rsync \-avuzb \-\-exclude '\&*~'\& samba:samba/ .
    put:
            rsync \-Cavuzb . samba:samba/
    sync: git put
.fi 

.PP 
this allows me ta sync wit a CVS directory all up in tha other end of the
connection. I aint talkin' bout chicken n' gravy biatch. I then do CVS operations on tha remote machine, which saves a
lot of time as tha remote CVS protocol isn\(cq\&t straight-up efficient.
.PP 
I mirror a gangbangin' finger-lickin' directory between mah \(dq\&old\(dq\& n' \(dq\&new\(dq\& ftp cribs wit the
command:
.PP 
\f(CWrsync \-az \-e ssh \-\-delete ~ftp/pub/samba nimbus:\(dq\&~ftp/pub/tridge\(dq\&\fP
.PP 
This is launched from cron every last muthafuckin few hours.
.PP 
.SH "OPTIONS SUMMARY"

.PP 
Here be a gangbangin' finger-lickin' dirty-ass short summary of tha options available up in rsync. Please refer
to tha detailed description below fo' a cold-ass lil complete description. I aint talkin' bout chicken n' gravy biatch.  
.nf 

 \-v, \-\-verbose               increase verbosity
     \-\-info=FLAGS            fine\-grained shiznital verbosity
     \-\-debug=FLAGS           fine\-grained debug verbosity
     \-\-msgs2stderr           special output handlin fo' debugging
 \-q, \-\-quiet                 suppress non\-error lyrics
     \-\-no\-motd               suppress daemon\-mode MOTD (see caveat)
 \-c, \-\-checksum              skip based on checksum, not mod\-time & size
 \-a, \-\-archive               archive mode; equals \-rlptgoD (no \-H,\-A,\-X)
     \-\-no\-OPTION             turn off a implied OPTION (e.g. \-\-no\-D)
 \-r, \-\-recursive             recurse tha fuck into directories
 \-R, \-\-relatizzle              use relatizzle path names
     \-\-no\-implied\-dirs       don'\&t bust implied dirs wit \-\-relative
 \-b, \-\-backup                make backups (see \-\-suffix & \-\-backup\-dir)
     \-\-backup\-dir=DIR        make backups tha fuck into hierarchy based up in DIR
     \-\-suffix=SUFFIX         backup suffix (default ~ w/o \-\-backup\-dir)
 \-u, \-\-update                skip filez dat is newer on tha receiver
     \-\-inplace               update destination filez in\-place
     \-\-append                append data onto shorta files
     \-\-append\-verify         \-\-append w/old data up in file checksum
 \-d, \-\-dirs                  transfer directories without recursing
 \-l, \-\-links                 copy symlinks as symlinks
 \-L, \-\-copy\-links            transform symlink tha fuck into referent file/dir
     \-\-copy\-unsafe\-links     only \(dq\&unsafe\(dq\& symlinks is transformed
     \-\-safe\-links            ignore symlinks dat point outside tha tree
     \-\-munge\-links           munge symlinks ta make dem safer
 \-k, \-\-copy\-dirlinks         transform symlink ta dir tha fuck into referent dir
 \-K, \-\-keep\-dirlinks         treat symlinked dir on receiver as dir
 \-H, \-\-hard\-links            preserve hard links
 \-p, \-\-perms                 preserve permissions
 \-E, \-\-executabilitizzle         preserve executability
     \-\-chmod=CHMOD           affect file and/or directory permissions
 \-A, \-\-acls                  preserve ACLs (implies \-p)
 \-X, \-\-xattrs                preserve extended attributes
 \-o, \-\-balla                 preserve balla (super\-user only)
 \-g, \-\-group                 preserve group
     \-\-devices               preserve thang filez (super\-user only)
     \-\-copy-devices          copy thang contents as regular file
     \-\-specials              preserve special files
 \-D                          same as \-\-devices \-\-specials
 \-t, \-\-times                 preserve modification times
 \-O, \-\-omit\-dir\-times        omit directories from \-\-times
 \-J, \-\-omit\-link\-times       omit symlinks from \-\-times
     \-\-supa                 receiver attempts super\-user activities
     \-\-fake\-supa            store/recover privileged attrs rockin xattrs
 \-S, \-\-sparse                handle sparse filez efficiently
     \-\-preallocate           allocate dest filez before writing
 \-n, \-\-dry\-run               big-ass up a trial run wit no chizzlez made
 \-W, \-\-whole\-file            copy filez whole (w/o delta\-xfer algorithm)
 \-x, \-\-one\-file\-system       don'\&t cross filesystem boundaries
 \-B, \-\-block\-size=SIZE       force a gangbangin' fixed checksum block\-size
 \-e, \-\-rsh=COMMAND           specify tha remote shell ta use
     \-\-rsync\-path=PROGRAM    specify tha rsync ta run on remote machine
     \-\-existin              skip bustin freshly smoked up filez on receiver
     \-\-ignore\-existin       skip uppimpin filez dat exist on receiver
     \-\-remove\-source\-filez   sender removes synchronized filez (non\-dir)
     \-\-del                   a alias fo' \-\-delete\-during
     \-\-delete                delete extraneous filez from dest dirs
     \-\-delete\-before         receiver deletes before xfer, not during
     \-\-delete\-durin         receiver deletes durin tha transfer
     \-\-delete\-delay          find deletions during, delete after
     \-\-delete\-afta          receiver deletes afta transfer, not during
     \-\-delete\-excluded       also delete excluded filez from dest dirs
     \-\-ignore\-missing\-args   ignore missin source args without error
     \-\-delete\-missing\-args   delete missin source args from destination
     \-\-ignore\-errors         delete even if there be I/O errors
     \-\-force                 force deletion of dirs even if not empty
     \-\-max\-delete=NUM        don'\&t delete mo' than NUM files
     \-\-max\-size=SIZE         don'\&t transfer any file larger than SIZE
     \-\-min\-size=SIZE         don'\&t transfer any file smalla than SIZE
     \-\-partial               keep partially transferred files
     \-\-partial\-dir=DIR       put a partially transferred file tha fuck into DIR
     \-\-delay\-updates         put all updated filez tha fuck into place at end
 \-m, \-\-prune\-empty\-dirs      prune empty directory chains from file\-list
     \-\-numeric\-idz           don'\&t map uid/gid joints by user/group name
     \-\-usermap=STRING        custom username mapping
     \-\-groupmap=STRING       custom groupname mapping
     \-\-chown=USER:GROUP      simple username/groupname mapping
     \-\-timeout=SECONDS       set I/O timeout up in seconds
     \-\-contimeout=SECONDS    set daemon connection timeout up in seconds
 \-I, \-\-ignore\-times          don'\&t skip filez dat match size n' time
     \-\-size\-only             skip filez dat match up in size
     \-\-modify\-window=NUM     compare mod\-times wit reduced accuracy
 \-T, \-\-temp\-dir=DIR          create temporary filez up in directory DIR
 \-y, \-\-fuzzy                 find similar file fo' basis if no dest file
     \-\-compare\-dest=DIR      also compare received filez relatizzle ta DIR
     \-\-copy\-dest=DIR         ... n' include copiez of unchanged files
     \-\-link\-dest=DIR         hardlink ta filez up in DIR when unchanged
 \-z, \-\-compress              compress file data durin tha transfer
     \-\-compress\-level=NUM    explicitly set compression level
     \-\-skip\-compress=LIST    skip compressin filez wit suffix up in LIST
 \-C, \-\-cvs\-exclude           auto\-ignore filez up in tha same way CVS do
 \-f, \-\-filter=RULE           add a gangbangin' file\-filterin RULE
 \-F                          same as \-\-filter='\&dir\-merge /.rsync\-filter'\&
                             repeated: \-\-filter='\&\- .rsync\-filter'\&
     \-\-exclude=PATTERN       exclude filez matchin PATTERN
     \-\-exclude\-from=FILE     read exclude patterns from FILE
     \-\-include=PATTERN       don'\&t exclude filez matchin PATTERN
     \-\-include\-from=FILE     read include patterns from FILE
     \-\-files\-from=FILE       read list of source\-file names from FILE
 \-0, \-\-from0                 all *from/filta filez is delimited by 0s
 \-s, \-\-protect\-args          no space\-splitting; wildcard chars only
     \-\-address=ADDRESS       bind address fo' outgoin socket ta daemon
     \-\-port=PORT             specify double\-colon alternate port number
     \-\-sockopts=OPTIONS      specify custom TCP options
     \-\-blocking\-io           use blockin I/O fo' tha remote shell
     \-\-outbuf=N|L|B          set up bufferin ta None, Line, or Block
     \-\-stats                 give some file\-transfer stats
 \-8, \-\-8\-bit\-output          leave high\-bit chars unescaped up in output
 \-h, \-\-human\-readable        output numbers up in a human\-readable format
     \-\-progress              show progress durin transfer
 \-P                          same as \-\-partial \-\-progress
 \-i, \-\-itemize\-changes       output a cold-ass lil chizzle\-summary fo' all thugged-out shit
 \-M, \-\-remote\-option=OPTION  bust OPTION ta tha remote side only
     \-\-out\-format=FORMAT     output thugged-out shiznit rockin tha specified FORMAT
     \-\-log\-file=FILE         log what tha fuck we'\&re bustin ta tha specified FILE
     \-\-log\-file\-format=FMT   log thugged-out shiznit rockin tha specified FMT
     \-\-password\-file=FILE    read daemon\-access password from FILE
     \-\-list\-only             list tha filez instead of copyin them
     \-\-bwlimit=RATE          limit socket I/O bandwidth
     \-\-write\-batch=FILE      write a funky-ass batched update ta FILE
     \-\-only\-write\-batch=FILE like \-\-write\-batch but w/o uppimpin dest
     \-\-read\-batch=FILE       read a funky-ass batched update from FILE
     \-\-protocol=NUM          force a olda protocol version ta be used
     \-\-iconv=CONVERT_SPEC    request charset conversion of filenames
     \-\-checksum\-seed=NUM     set block/file checksum seed (advanced)
 \-4, \-\-ipv4                  prefer IPv4
 \-6, \-\-ipv6                  prefer IPv6
     \-\-version               print version number
(\-h) \-\-help                  show dis help (see below fo' \-h comment)
.fi 

.PP 
Rsync can also be run as a thugged-out daemon, up in which case tha followin options are
accepted: 
.nf 

     \-\-daemon                run as a rsync daemon
     \-\-address=ADDRESS       bind ta tha specified address
     \-\-bwlimit=RATE          limit socket I/O bandwidth
     \-\-config=FILE           specify alternate rsyncd.conf file
 \-M, \-\-dparam=OVERRIDE       override global daemon config parameter
     \-\-no\-detach             do not detach from tha parent
     \-\-port=PORT             listen on alternate port number
     \-\-log\-file=FILE         override tha \(dq\&log file\(dq\& setting
     \-\-log\-file\-format=FMT   override tha \(dq\&log format\(dq\& setting
     \-\-sockopts=OPTIONS      specify custom TCP options
 \-v, \-\-verbose               increase verbosity
 \-4, \-\-ipv4                  prefer IPv4
 \-6, \-\-ipv6                  prefer IPv6
 \-h, \-\-help                  show dis help (if used afta \-\-daemon)
.fi 

.PP 
.SH "OPTIONS"

.PP 
Rsync accepts both long (double\-dash + word) n' short (single\-dash + letter)
options.  Da full list of tha available options is busted lyrics bout below.  If an
option can be specified up in mo' than one way, tha chizzlez is comma\-separated.
Some options only gotz a long-ass variant, not a gangbangin' finger-lickin' dirty-ass short.  If tha option takes a
parameter, tha parameta is only listed afta tha long variant, even though it
must also be specified fo' tha short.  When specifyin a parameter, you can
either use tha form \-\-option=param or replace tha \(cq\&=\(cq\& wit whitespace.  The
parameta may need ta be quoted up in some manner fo' it ta survive tha shell\(cq\&s
command\-line parsing.  Keep it realz in mind dat a leadin tilde (~) up in a gangbangin' filename is
substituted by yo' shell, so \-\-option=~/foo aint gonna chizzle tha tilde into
your home directory (remove tha \(cq\&=\(cq\& fo' that).
.PP 
.IP "\fB\-\-help\fP"
Print a gangbangin' finger-lickin' dirty-ass short help page describin tha options
available up in rsync n' exit.  For backward\-compatibilitizzle wit older
versionz of rsync, tha help will also be output if you use tha \fB\-h\fP
option without any other args.
.IP 
.IP "\fB\-\-version\fP"
print tha rsync version number n' exit.
.IP 
.IP "\fB\-v, \-\-verbose\fP"
This option increases tha amount of shiznit you
are given durin tha transfer n' shit.  By default, rsync works silently fo' realz. A
single \fB\-v\fP will hit you wit shiznit bout what tha fuck filez is being
transferred n' a funky-ass brief summary all up in tha end yo, but it ain't no stoppin cause I be still poppin'. Two \fB\-v\fP options will give you
information on what tha fuck filez is bein skipped n' slightly more
information all up in tha end yo, but it ain't no stoppin cause I be still poppin'. Mo' than two \fB\-v\fP options should only be used if
yo ass is debuggin rsync.
.IP 
In a modern rsync, tha \fB\-v\fP option is equivalent ta tha settin of groups
of \fB\-\-info\fP n' \fB\-\-debug\fP options.  Yo ass can chizzle ta use these newer
options up in addizzle to, or up in place of rockin \fB\-\-verbose\fP, as any
fine\-grained settings override tha implied settingz of \fB\-v\fP.  Both
\fB\-\-info\fP n' \fB\-\-debug\fP gotz a way ta ask fo' help dat  drops some lyrics ta you
exactly what tha fuck flags is set fo' each increase up in verbosity.
.IP 
.IP "\fB\-\-info=FLAGS\fP"
This option lets you have fine\-grained control over the
information
output you wanna see.  An individual flag name may be followed by a level
number, wit 0 meanin ta silence dat output, 1 bein tha default output
level, n' higher numbers increasin tha output of dat flag (for them
that support higher levels).  Use
\fB\-\-info=help\fP
to peep all tha available flag names, what tha fuck they output, n' what tha fuck flag names
are added fo' each increase up in tha verbose level.  Some examples:
.IP 
.nf 
    rsync \-a \-\-info=progress2 src/ dest/
    rsync \-avv \-\-info=stats2,misc1,flist0 src/ dest/ 
.fi 

.IP 
Note dat \fB\-\-info=name\fP\(cq\&s output be affected by tha \fB\-\-out\-format\fP and
\fB\-\-itemize\-changes\fP (\fB\-i\fP) options.  See dem options fo' more
information on what tha fuck is output n' when.
.IP 
This option was added ta 3.1.0, so a olda rsync on tha server side might
reject yo' attempts at fine\-grained control (if one or mo' flags needed
to be bust ta tha server n' tha server was too oldschool ta KNOW them).
.IP 
.IP "\fB\-\-debug=FLAGS\fP"
This option lets you have fine\-grained control over tha debug
output you wanna see.  An individual flag name may be followed by a level
number, wit 0 meanin ta silence dat output, 1 bein tha default output
level, n' higher numbers increasin tha output of dat flag (for them
that support higher levels).  Use
\fB\-\-debug=help\fP
to peep all tha available flag names, what tha fuck they output, n' what tha fuck flag names
are added fo' each increase up in tha verbose level.  Some examples:
.IP 
.nf 
    rsync \-avvv \-\-debug=none src/ dest/
    rsync \-avA \-\-del \-\-debug=del2,acl src/ dest/ 
.fi 

.IP 
Note dat some debug lyrics will only be output when \fB\-\-msgs2stderr\fP is
specified, especially dem pertainin ta I/O n' buffer debugging.
.IP 
This option was added ta 3.1.0, so a olda rsync on tha server side might
reject yo' attempts at fine\-grained control (if one or mo' flags needed
to be bust ta tha server n' tha server was too oldschool ta KNOW them).
.IP 
.IP "\fB\-\-msgs2stderr\fP"
This option chizzlez rsync ta bust all its output
directly ta stderr rather than ta bust lyrics ta tha client side via the
protocol (which normally outputs info lyrics via stdout).  This is mainly
intended fo' debuggin up in order ta avoid changin tha data busted via the
protocol, since tha extra protocol data can chizzle what tha fuck is bein tested.
Keep it realz in mind dat a thugged-out daemon connection aint gots a stderr channel ta send
lyrics back ta tha client side, so if yo ass is bustin any daemon\-transfer
debuggin rockin dis option, you should start up a thugged-out daemon rockin \fB\-\-no\-detach\fP
so dat you can peep tha stderr output on tha daemon side.
.IP 
This option has tha side\-effect of makin stderr output git line\-buffered so
that tha mergin of tha output of 3 programs happens up in a mo' readable manner.
.IP 
.IP "\fB\-q, \-\-quiet\fP"
This option decreases tha amount of shiznit you
are given durin tha transfer, notably suppressin shiznit lyrics
from tha remote server n' shit. This option is useful when invokin rsync from
cron.
.IP 
.IP "\fB\-\-no\-motd\fP"
This option affects tha shiznit dat is output
by tha client all up in tha start of a thugged-out daemon transfer n' shit.  This suppresses the
message\-of\-the\-dizzle (MOTD) text yo, but it also affects tha list of modules
that tha daemon sendz up in response ta tha \(dq\&rsync host::\(dq\& request (due to
a limitation up in tha rsync protocol), so omit dis option if you want to
request tha list of modulez from tha daemon.
.IP 
.IP "\fB\-I, \-\-ignore\-times\fP"
Normally rsync will skip any filez dat are
already tha same size n' have tha same modification timestamp.
This option turns off dis \(dq\&quick check\(dq\& behavior, causin all filez to
be updated.
.IP 
.IP "\fB\-\-size\-only\fP"
This modifies rsync\(cq\&s \(dq\&quick check\(dq\& algorithm for
findin filez dat need ta be transferred, changin it from tha default of
transferrin filez wit either a cold-ass lil chizzled size or a cold-ass lil chizzled last\-modified
time ta just lookin fo' filez dat have chizzled up in size.  This is useful
when startin ta use rsync afta rockin another mirrorin system which may
not preserve timestamps exactly.
.IP 
.IP "\fB\-\-modify\-window\fP"
When comparin two timestamps, rsync treats the
timestamps as bein equal if they differ by no mo' than tha modify\-window
value.  This is normally 0 (for a exact match) yo, but you may find it useful
to set dis ta a larger value up in some thangs.  In particular, when
transferrin ta or from a MS Windows FAT filesystem (which represents
times wit a 2\-second resolution), \fB\-\-modify\-window=1\fP is useful
(allowin times ta differ by up ta 1 second).
.IP 
.IP "\fB\-c, \-\-checksum\fP"
This chizzlez tha way rsync checks if tha filez have
been chizzled n' is up in need of a transfer n' shit.  Without dis option, rsync
uses a \(dq\&quick check\(dq\& dat (by default) checks if each file\(cq\&s size n' time
of last modification match between tha sender n' receiver n' shit.  This option
changes dis ta compare a 128\-bit checksum fo' each file dat has a
matchin size.  Generatin tha checksums means dat both sides will expend
a shitload of disk I/O readin all tha data up in tha filez up in tha transfer (and
this is prior ta any readin dat is ghon be done ta transfer chizzled files),
so dis can slow thangs down significantly.
.IP 
Da bustin  side generates its checksums while it is bustin tha file\-system
scan dat buildz tha list of tha available files.  Da receiver generates
its checksums when it is scannin fo' chizzled files, n' will checksum any
file dat has tha same ol' dirty size as tha correspondin sender\(cq\&s file:  filez with
either a cold-ass lil chizzled size or a cold-ass lil chizzled checksum is selected fo' transfer.
.IP 
Note dat rsync always verifies dat each \fItransferred\fP file was
correctly reconstructed on tha receivin side by checkin a whole\-file
checksum dat is generated as tha file is transferred yo, but that
automatic after\-the\-transfer verification has not a god damn thang ta do wit this
option\(cq\&s before\-the\-transfer \(dq\&Do dis file need ta be updated?\(dq\& check.
.IP 
For protocol 30 n' beyond (first supported up in 3.0.0), tha checksum used is
MD5.  For olda protocols, tha checksum used is MD4.
.IP 
.IP "\fB\-a, \-\-archive\fP"
This is equivalent ta \fB\-rlptgoD\fP. Well shiiiit, it aint nuthin but a quick
way of sayin you want recursion n' wanna preserve almost
everythang (with \-H bein a notable omission).
Da only exception ta tha above equivalence is when \fB\-\-files\-from\fP is
specified, up in which case \fB\-r\fP aint implied.
.IP 
Note dat \fB\-a\fP \fBdoes not preserve hardlinks\fP, cuz
findin multiply\-linked filez is expensive.  Yo ass must separately
specify \fB\-H\fP.
.IP 
.IP "\-\-no\-OPTION"
Yo ass may turn off one or mo' implied options by prefixing
the option name wit \(dq\&no\-\(dq\&.  Not all options may be prefixed wit a \(dq\&no\-\(dq\&:
only options dat is implied by other options (e.g. \fB\-\-no\-D\fP,
\fB\-\-no\-perms\fP) or have different defaults up in various circumstances
(e.g. \fB\-\-no\-whole\-file\fP, \fB\-\-no\-blocking\-io\fP, \fB\-\-no\-dirs\fP).  Yo ass may
specify either tha short or tha long option name afta tha \(dq\&no\-\(dq\& prefix
(e.g. \fB\-\-no\-R\fP is tha same ol' dirty as \fB\-\-no\-relative\fP).
.IP 
For example: if you wanna use \fB\-a\fP (\fB\-\-archive\fP) but don\(cq\&t want
\fB\-o\fP (\fB\-\-baller\fP), instead of convertin \fB\-a\fP tha fuck into \fB\-rlptgD\fP, you
could specify \fB\-a \-\-no\-o\fP (or \fB\-a \-\-no\-baller\fP).
.IP 
Da order of tha options is blingin:  if you specify \fB\-\-no\-r \-a\fP, the
\fB\-r\fP option would end up bein turned on, tha opposite of \fB\-a \-\-no\-r\fP.
Note also dat tha side\-effectz of tha \fB\-\-files\-from\fP option is NOT
positional, as it affects tha default state of nuff muthafuckin options n' slightly
changes tha meanin of \fB\-a\fP (see tha \fB\-\-files\-from\fP option fo' more
details).
.IP 
.IP "\fB\-r, \-\-recursive\fP"
This  drops some lyrics ta rsync ta copy directories
recursively.  See also \fB\-\-dirs\fP (\fB\-d\fP).
.IP 
Beginnin wit rsync 3.0.0, tha recursive algorithm used is now an
incremenstrual scan dat uses much less memory than before n' begins the
transfer afta tha scannin of tha straight-up original gangsta few directories have been
completed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This incremenstrual scan only affects our recursion algorithm, and
does not chizzle a non\-recursive transfer n' shit.  It be also only possible when
both endz of tha transfer is at least version 3.0.0.
.IP 
Some options require rsync ta know tha full file list, so these options
disable tha incremenstrual recursion mode.  These include: \fB\-\-delete\-before\fP,
\fB\-\-delete\-after\fP, \fB\-\-prune\-empty\-dirs\fP, n' \fB\-\-delay\-updates\fP.
Because of this, tha default delete mode when you specify \fB\-\-delete\fP is now
\fB\-\-delete\-during\fP when both endz of tha connection is at least 3.0.0
(use \fB\-\-del\fP or \fB\-\-delete\-during\fP ta request dis improved deletion mode
explicitly).  See also tha \fB\-\-delete\-delay\fP option dat be a funky-ass betta chizzle
than rockin \fB\-\-delete\-after\fP.
.IP 
Incremenstrual recursion can be disabled rockin tha \fB\-\-no\-inc\-recursive\fP
option or its shorta \fB\-\-no\-i\-r\fP alias.
.IP 
.IP "\fB\-R, \-\-relative\fP"
Use relatizzle paths. This means dat tha full path
names specified on tha command line is busted ta tha server rather than
just tha last partz of tha filenames. This is particularly useful when
you wanna bust nuff muthafuckin different directories all up in tha same time. For
example, if you used dis command:
.IP 
.RS 
\f(CW   rsync \-av /foo/bar/baz.c remote:/tmp/\fP
.RE

.IP 
\&... dis would create a gangbangin' file named baz.c up in /tmp/ on tha remote
machine. If instead you used
.IP 
.RS 
\f(CW   rsync \-avR /foo/bar/baz.c remote:/tmp/\fP
.RE

.IP 
then a gangbangin' file named /tmp/foo/bar/baz.c would be pimped on tha remote
machine, preservin its full path.  These extra path elements is called
\(dq\&implied directories\(dq\& (i.e. tha \(dq\&foo\(dq\& n' tha \(dq\&foo/bar\(dq\& directories up in the
above example).
.IP 
Beginnin wit rsync 3.0.0, rsync always sendz these implied directories as
real directories up in tha file list, even if a path element is straight-up a
symlink on tha bustin  side.  This prevents some straight-up unexpected
behaviors when copyin tha full path of a gangbangin' file dat you didn\(cq\&t realize had
a symlink up in its path.  If you wanna duplicate a server\-side symlink,
include both tha symlink via its path, n' referent directory via its real
path.  If you\(cq\&re dealin wit a olda rsync on tha bustin  side, you may
need ta use tha \fB\-\-no\-implied\-dirs\fP option.
.IP 
It be also possible ta limit tha amount of path shiznit dat is busted as
implied directories fo' each path you specify.  With a modern rsync on the
sendin side (beginnin wit 2.6.7), you can bang a thugged-out dot n' a slash into
the source path, like this:
.IP 
.RS 
\f(CW   rsync \-avR /foo/./bar/baz.c remote:/tmp/\fP
.RE

.IP 
That would create /tmp/bar/baz.c on tha remote machine.  (Note dat the
dot must be followed by a slash, so \(dq\&/foo/.\(dq\& would not be abbreviated.)
For olda rsync versions, you would need ta bust a cold-ass lil chdir ta limit the
source path.  For example, when pushin files:
.IP 
.RS 
\f(CW   (cd /foo; rsync \-avR bar/baz.c remote:/tmp/) \fP
.RE

.IP 
(Note dat tha parens put tha two commandz tha fuck into a sub\-shell, so dat the
\(dq\&cd\(dq\& command don\(cq\&t remain up in effect fo' future commands.)
If you\(cq\&re pullin filez from a olda rsync, use dis idiom (but only
for a non\-daemon transfer):
.IP 
.RS 
\f(CW   rsync \-avR \-\-rsync\-path=\(dq\&cd /foo; rsync\(dq\& \e \fP
.br 
\f(CW       remote:bar/baz.c /tmp/\fP
.RE

.IP 
.IP "\fB\-\-no\-implied\-dirs\fP"
This option affects tha default behavior of the
\fB\-\-relative\fP option. I aint talkin' bout chicken n' gravy biatch.  When it is specified, tha attributez of tha implied
directories from tha source names is not included up in tha transfer n' shit.  This
means dat tha correspondin path elements on tha destination system are
left unchanged if they exist, n' any missin implied directories are
created wit default attributes.  This even allows these implied path
elements ta have big-ass differences, like fuckin bein a symlink ta a gangbangin' finger-lickin' directory on
the receivin side.
.IP 
For instance, if a cold-ass lil command\-line arg or a gangbangin' files\-from entry holla'd at rsync to
transfer tha file \(dq\&path/foo/file\(dq\&, tha directories \(dq\&path\(dq\& n' \(dq\&path/foo\(dq\&
are implied when \fB\-\-relative\fP is used. Y'all KNOW dat shit, muthafucka!  If \(dq\&path/foo\(dq\& be a symlink to
\(dq\&bar\(dq\& on tha destination system, tha receivin rsync would ordinarily
delete \(dq\&path/foo\(dq\&, recreate it as a gangbangin' finger-lickin' directory, n' receive tha file into
the freshly smoked up directory.  With \fB\-\-no\-implied\-dirs\fP, tha receivin rsync thugged-out shit
\(dq\&path/foo/file\(dq\& rockin tha existin path elements, which means dat tha file
endz up bein pimped up in \(dq\&path/bar\(dq\&.  Another way ta accomplish dis link
preservation is ta use tha \fB\-\-keep\-dirlinks\fP option (which will also
affect symlinks ta directories up in tha rest of tha transfer).
.IP 
When pullin filez from a rsync olda than 3.0.0, you may need ta use this
option if tha bustin  side has a symlink up in tha path you request n' you
wish tha implied directories ta be transferred as aiiight directories.
.IP 
.IP "\fB\-b, \-\-backup\fP"
With dis option, preexistin destination filez are
renamed as each file is transferred or deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Yo ass can control where the
backup file goes n' what tha fuck (if any) suffix gets appended rockin the
\fB\-\-backup\-dir\fP n' \fB\-\-suffix\fP options.
.IP 
Note dat if you don\(cq\&t specify \fB\-\-backup\-dir\fP, (1) the
\fB\-\-omit\-dir\-times\fP option is ghon be implied, n' (2) if \fB\-\-delete\fP is
also up in effect (without \fB\-\-delete\-excluded\fP), rsync will add a \(dq\&protect\(dq\&
filter\-rule fo' tha backup suffix ta tha end of all yo' existin excludes
(e.g. \fB\-f \(dq\&P *~\(dq\&\fP).  This will prevent previously backed\-up filez from being
deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Note dat if yo ass is supplyin yo' own filta rules, you may
need ta manually bang yo' own exclude/protect rule somewhere higher up
in tha list so dat it has a high enough prioritizzle ta be effectizzle (e.g., if
your rulez specify a trailin inclusion/exclusion of \(cq\&*\(cq\&, tha auto\-added
rule would never be reached).
.IP 
.IP "\fB\-\-backup\-dir=DIR\fP"
In combination wit tha \fB\-\-backup\fP option, this
 drops some lyrics ta rsync ta store all backups up in tha specified directory on tha receiving
side.  This can be used fo' incremenstrual backups.  Yo ass can additionally
specify a funky-ass backup suffix rockin tha \fB\-\-suffix\fP option
(otherwise tha filez backed up in tha specified directory
will keep they original gangsta filenames).
.IP 
Note dat if you specify a relatizzle path, tha backup directory will be
relatizzle ta tha destination directory, so you probably wanna specify
either a absolute path or a path dat starts wit \(dq\&../\(dq\&.  If a rsync
daemon is tha receiver, tha backup dir cannot go outside tha module\(cq\&s path
hierarchy, so take extra care not ta delete it or copy tha fuck into dat shit.
.IP 
.IP "\fB\-\-suffix=SUFFIX\fP"
This option allows you ta override tha default
backup suffix used wit tha \fB\-\-backup\fP (\fB\-b\fP) option. I aint talkin' bout chicken n' gravy biatch. Da default suffix be a ~
if no \-\fB\-backup\-dir\fP was specified, otherwise it be a empty string.
.IP 
.IP "\fB\-u, \-\-update\fP"
This forces rsync ta skip any filez which exist on
the destination n' gotz a modified time dat is newer than tha source
file.  (If a existin destination file has a modification time equal ta the
source file\(cq\&s, it is ghon be updated if tha sizes is different.)
.IP 
Note dat dis do not affect tha copyin of symlinks or other special
files.  Also, a gangbangin' finger-lickin' difference of file format between tha sender n' receiver
is always considered ta be blingin enough fo' a update, no matta what
date is on tha objects, n' you can put dat on yo' toast.  In other lyrics, if tha source has a gangbangin' finger-lickin' directory
where tha destination has a gangbangin' file, tha transfer would occur regardless of
the timestamps.
.IP 
This option be a transfer rule, not a exclude, so it don\(cq\&t affect the
data dat goes tha fuck into tha file\-lists, n' thus it don\(cq\&t affect deletions.
It just limits tha filez dat tha receiver requests ta be transferred.
.IP 
.IP "\fB\-\-inplace\fP"
This option chizzlez how tha fuck rsync transfers a gangbangin' file when
its data need ta be updated: instead of tha default method of bustin
a freshly smoked up copy of tha file n' movin it tha fuck into place when it is complete, rsync
instead writes tha updated data directly ta tha destination file.
.IP 
This has nuff muthafuckin effects:
.IP 
.RS 
.IP o 
Hard links is not broken. I aint talkin' bout chicken n' gravy biatch.  This means tha freshly smoked up data is ghon be visible
all up in other hard links ta tha destination file.  Mo'over, attempts to
copy differin source filez onto a multiply\-linked destination file will
result up in a \(dq\&tug of war\(dq\& wit tha destination data changin back n' forth.
.IP o 
In\-use binaries cannot be updated (either tha OS will prevent dis from
happening, or binaries dat attempt ta swap\-in they data will misbehave or
crash).
.IP o 
Da file\(cq\&s data is ghon be up in a inconsistent state durin tha transfer
and is ghon be left dat way if tha transfer is interrupted or if a update
fails.
.IP o 
A file dat rsync cannot write ta cannot be updated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. While a supa user
can update any file, a aiiight user need ta be granted write permission for
the open of tha file fo' freestylin ta be successful.
.IP o 
Da efficiency of rsync\(cq\&s delta\-transfer algorithm may be reduced if
some data up in tha destination file is overwritten before it can be copied to
a posizzle lata up in tha file.  This do not apply if you use \fB\-\-backup\fP,
since rsync is smart-ass enough ta use tha backup file as tha basis file fo' the
transfer.
.RE

.IP 
WARNING: you should not use dis option ta update filez dat is being
accessed by others, so be careful when choosin ta use dis fo' a cold-ass lil copy.
.IP 
This option is useful fo' transferrin big-ass filez wit block\-based chizzles
or appended data, n' also on systems dat is disk bound, not network
bound. Y'all KNOW dat shit, muthafucka!  It can also help keep a cold-ass lil copy\-on\-write filesystem snapshot from
divergin tha entire contentz of a gangbangin' file dat only has minor chizzles.
.IP 
Da option implies \fB\-\-partial\fP (since a interrupted transfer do not delete
the file) yo, but conflicts wit \fB\-\-partial\-dir\fP n' \fB\-\-delay\-updates\fP.
Prior ta rsync 2.6.4 \fB\-\-inplace\fP was also incompatible wit \fB\-\-compare\-dest\fP
and \fB\-\-link\-dest\fP.
.IP 
.IP "\fB\-\-append\fP"
This causes rsync ta update a gangbangin' file by appendin data onto
the end of tha file, which presumes dat tha data dat already exists on
the receivin side is identical wit tha start of tha file on tha sending
side.  If a gangbangin' file need ta be transferred n' its size on tha receiver is
the same or longer than tha size on tha sender, tha file is skipped. Y'all KNOW dat shit, muthafucka!  This
does not interfere wit tha uppimpin of a gangbangin' file\(cq\&s non\-content attributes
(e.g. permissions, ballership, etc.) when tha file do not need ta be
transferred, nor do it affect tha uppimpin of any non\-regular files.
Implies \fB\-\-inplace\fP,
but do not conflict wit \fB\-\-sparse\fP (since it be always extendin a
file\(cq\&s length).
.IP 
.IP "\fB\-\-append\-verify\fP"
This works just like tha \fB\-\-append\fP option yo, but
the existin data on tha receivin side is included up in tha full\-file
checksum verification step, which will cause a gangbangin' file ta be resent if the
final verification step fails (rsync uses a normal, non\-appending
\fB\-\-inplace\fP transfer fo' tha resend).
.IP 
Note: prior ta rsync 3.0.0, tha \fB\-\-append\fP option hit dat shiznit like
\fB\-\-append\-verify\fP, so if yo ass is interactin wit a olda rsync (or the
transfer is rockin a protocol prior ta 30), specifyin either append option
will initiate a \fB\-\-append\-verify\fP transfer.
.IP 
.IP "\fB\-d, \-\-dirs\fP"
Tell tha bustin  side ta include any directories that
are encountered. Y'all KNOW dat shit, muthafucka!  Unlike \fB\-\-recursive\fP, a gangbangin' finger-lickin' directory\(cq\&s contents is not copied
unless tha directory name specified is \(dq\&.\(dq\& or endz wit a trailin slash
(e.g. \(dq\&.\(dq\&, \(dq\&dir/.\(dq\&, \(dq\&dir/\(dq\&, etc.).  Without dis option or the
\fB\-\-recursive\fP option, rsync will skip all directories it encountas (and
output a message ta dat effect fo' each one).  If you specify both
\fB\-\-dirs\fP n' \fB\-\-recursive\fP, \fB\-\-recursive\fP takes precedence.
.IP 
Da \fB\-\-dirs\fP option is implied by tha \fB\-\-files\-from\fP option
or tha \fB\-\-list\-only\fP option (includin a implied
\fB\-\-list\-only\fP usage) if \fB\-\-recursive\fP wasn\(cq\&t specified (so that
directories is peeped up in tha listing).  Specify \fB\-\-no\-dirs\fP (or \fB\-\-no\-d\fP)
if you wanna turn dis off.
.IP 
There be also a funky-ass backward\-compatibilitizzle helper option, \fB\-\-old\-dirs\fP (or
\fB\-\-old\-d\fP) dat  drops some lyrics ta rsync ta bust a hack of \(dq\&\-r \-\-exclude=\(cq\&/*/*\(cq\&\(dq\& ta get
an olda rsync ta list a single directory without recursing.
.IP 
.IP "\fB\-l, \-\-links\fP"
When symlinks is encountered, recreate the
symlink on tha destination.
.IP 
.IP "\fB\-L, \-\-copy\-links\fP"
When symlinks is encountered, tha item that
they point ta (the referent) is copied, rather than tha symlink.  In older
versionz of rsync, dis option also had tha side\-effect of spittin some lyrics ta the
receivin side ta follow symlinks, like fuckin symlinks ta directories. Put ya muthafuckin choppers up if ya feel dis!  In a
modern rsync like fuckin dis one, you\(cq\&ll need ta specify \fB\-\-keep\-dirlinks\fP (\fB\-K\fP)
to git dis extra behavior. Shiiit, dis aint no joke.  Da only exception is when bustin  filez to
an rsync dat is too oldschool ta KNOW \fB\-K\fP \-\- up in dat case, tha \fB\-L\fP option
will still have tha side\-effect of \fB\-K\fP on dat olda receivin rsync.
.IP 
.IP "\fB\-\-copy\-unsafe\-links\fP"
This  drops some lyrics ta rsync ta copy tha referent of
symbolic links dat point outside tha copied tree.  Absolute symlinks
are also treated like ordinary files, n' so is any symlinks up in the
source path itself when \fB\-\-relative\fP is used. Y'all KNOW dat shit, muthafucka!  This option has no
additionizzle effect if \fB\-\-copy\-links\fP was also specified.
.IP 
.IP "\fB\-\-safe\-links\fP"
This  drops some lyrics ta rsync ta ignore any symbolic links
which point outside tha copied tree fo' realz. All absolute symlinks are
also ignored. Y'all KNOW dat shit, muthafucka! Usin dis option up in conjunction wit \fB\-\-relative\fP may
give unexpected thangs up in dis biatch.
.IP 
.IP "\fB\-\-munge\-links\fP"
This option  drops some lyrics ta rsync ta (1) modify all symlinks on
the receivin side up in a way dat make dem unusable but recoverable (see
below), or (2) ta unmunge symlinks on tha bustin  side dat had been stored in
a munged state.  This is useful if you don\(cq\&t like trust tha source of tha data
to not try ta slip up in a symlink ta a unexpected place.
.IP 
Da way rsync disablez tha use of symlinks is ta prefix each one wit the
strin \(dq\&/rsyncd\-munged/\(dq\&.  This prevents tha links from bein used as long as
that directory do not exist.  When dis option is enabled, rsync will refuse
to run if dat path be a gangbangin' finger-lickin' directory or a symlink ta a gangbangin' finger-lickin' directory.
.IP 
Da option only affects tha client side of tha transfer, so if you need it to
affect tha server, specify it via \fB\-\-remote\-option\fP.  (Note dat up in a local
transfer, tha client side is tha sender.)
.IP 
This option has no affect on a thugged-out daemon, since tha daemon configures whether it
wants munged symlinks via its \(dq\&munge symlinks\(dq\& parameter n' shit.  See also the
\(dq\&munge\-symlinks\(dq\& perl script up in tha support directory of tha source code.
.IP 
.IP "\fB\-k, \-\-copy\-dirlinks\fP"
This option causes tha bustin  side ta treat
a symlink ta a gangbangin' finger-lickin' directory as though it was a real directory.  This is
useful if you don\(cq\&t want symlinks ta non\-directories ta be affected, as
they would be rockin \fB\-\-copy\-links\fP.
.IP 
Without dis option, if tha bustin  side has replaced a gangbangin' finger-lickin' directory wit a
symlink ta a gangbangin' finger-lickin' directory, tha receivin side will delete anythang dat is in
the way of tha freshly smoked up symlink, includin a gangbangin' finger-lickin' directory hierarchy (as long as
\fB\-\-force\fP or \fB\-\-delete\fP is up in effect).
.IP 
See also \fB\-\-keep\-dirlinks\fP fo' a analogous option fo' tha receiving
side.
.IP 
\fB\-\-copy\-dirlinks\fP applies ta all symlinks ta directories up in tha source.  If
you wanna follow only all dem specified symlinks, a trick you can use is to
pass dem as additionizzle source args wit a trailin slash, rockin \fB\-\-relative\fP
to make tha paths match up right.  For example:
.IP 
.RS 
\f(CWrsync \-r \-\-relatizzle src/./ src/./follow\-me/ dest/\fP
.RE

.IP 
This works cuz rsync calls \fBlstat\fP(2) on tha source arg as given, n' the
trailin slash make \fBlstat\fP(2) follow tha symlink, givin rise ta a gangbangin' finger-lickin' directory
in tha file\-list which overrides tha symlink found durin tha scan of \(dq\&src/./\(dq\&.
.IP 
.IP "\fB\-K, \-\-keep\-dirlinks\fP"
This option causes tha receivin side ta treat
a symlink ta a gangbangin' finger-lickin' directory as though it was a real directory yo, but only if it
matches a real directory from tha sender n' shit.  Without dis option, the
receiver\(cq\&s symlink would be deleted n' replaced wit a real directory.
.IP 
For example, suppose you transfer a gangbangin' finger-lickin' directory \(dq\&foo\(dq\& dat gotz nuff a gangbangin' file
\(dq\&file\(dq\& yo, but \(dq\&foo\(dq\& be a symlink ta directory \(dq\&bar\(dq\& on tha receiver n' shit.  Without
\fB\-\-keep\-dirlinks\fP, tha receiver deletes symlink \(dq\&foo\(dq\&, recreates it as a
directory, n' receives tha file tha fuck into tha freshly smoked up directory.  With
\fB\-\-keep\-dirlinks\fP, tha receiver keeps tha symlink n' \(dq\&file\(dq\& endz up in
\(dq\&bar\(dq\&.
.IP 
One note of caution:  if you use \fB\-\-keep\-dirlinks\fP, you must trust all
the symlinks up in tha copy dawwwwg!  If it is possible fo' a untrusted user to
create they own symlink ta any directory, tha user could then (on a
subsequent copy) replace tha symlink wit a real directory n' affect the
content of whatever directory tha symlink references.  For backup copies,
yo ass is betta off rockin suttin' like a funky-ass bind mount instead of a symlink
to modify yo' receivin hierarchy.
.IP 
See also \fB\-\-copy\-dirlinks\fP fo' a analogous option fo' tha bustin  side.
.IP 
.IP "\fB\-H, \-\-hard\-links\fP"
This  drops some lyrics ta rsync ta look fo' hard\-linked filez in
the source n' link together tha correspondin filez on tha destination.
Without dis option, hard\-linked filez up in tha source is treated
as though they was separate files.
.IP 
This option do NOT necessarily ensure dat tha pattern of hard links on the
destination exactly matches dat on tha source.  Cases up in which the
destination may end up wit extra hard links include tha following:
.IP 
.RS 
.IP o 
If tha destination gotz nuff extraneous hard\-links (more linkin than
what is present up in tha source file list), tha copyin algorithm will not
break dem explicitly.  But fuck dat shiznit yo, tha word on tha street is dat if one or mo' of tha paths have content
differences, tha aiiight file\-update process will break dem extra links
(unless yo ass is rockin tha \fB\-\-inplace\fP option).
.IP o 
If you specify a \fB\-\-link\-dest\fP directory dat gotz nuff hard links,
the linkin of tha destination filez against tha \fB\-\-link\-dest\fP filez can
cause some paths up in tha destination ta become linked together cuz of the
\fB\-\-link\-dest\fP associations.
.RE

.IP 
Note dat rsync can only detect hard links between filez dat is inside
the transfer set.  If rsync thugged-out shiznit a gangbangin' file dat has extra hard\-link
connections ta filez outside tha transfer, dat linkage is ghon be broken. I aint talkin' bout chicken n' gravy biatch.  If
yo ass is tempted ta use tha \fB\-\-inplace\fP option ta avoid dis breakage, be
very careful dat you know how tha fuck yo' filez is bein updated so dat yo ass is
certain dat no unintended chizzlez happen cuz of lingerin hard links (and
see tha \fB\-\-inplace\fP option fo' mo' caveats).
.IP 
If incremenstrual recursion be actizzle (see \fB\-\-recursive\fP), rsync may transfer
a missin hard\-linked file before it findz dat another link fo' dat contents
exists elsewhere up in tha hierarchy.  This do not affect tha accuracy of
the transfer (i.e. which filez is hard\-linked together), just its efficiency
(i.e. copyin tha data fo' a new, early copy of a hard\-linked file dat could
have been found lata up in tha transfer up in another gangmember of tha hard\-linked
set of files).  One way ta avoid dis inefficiency is ta disable
incremenstrual recursion rockin tha \fB\-\-no\-inc\-recursive\fP option.
.IP 
.IP "\fB\-p, \-\-perms\fP"
This option causes tha receivin rsync ta set the
destination permissions ta be tha same as tha source permissions.  (See
also tha \fB\-\-chmod\fP option fo' a way ta modify what tha fuck rsync considaz to
be tha source permissions.)
.IP 
When dis option is \fIoff\fP, permissions is set as bigs up:
.IP 
.RS 
.IP o 
Existin filez (includin updated files) retain they existing
permissions, though tha \fB\-\-executability\fP option might chizzle just
the execute permission fo' tha file.
.IP o 
New filez git they \(dq\&normal\(dq\& permission bits set ta tha source
file\(cq\&s permissions maxed wit tha receivin directory\(cq\&s default
permissions (either tha receivin process\(cq\&s umask, or tha permissions
specified via tha destination directory\(cq\&s default ACL), and
their special permission bits disabled except up in tha case where a new
directory inherits a setgid bit from its parent directory.
.RE

.IP 
Thus, when \fB\-\-perms\fP n' \fB\-\-executability\fP is both disabled,
rsync\(cq\&s behavior is tha same ol' dirty as dat of other file\-copy utilities,
like fuckin \fBcp\fP(1) n' \fBtar\fP(1).
.IP 
In summary: ta give destination filez (both oldschool n' new) tha source
permissions, use \fB\-\-perms\fP.  To give freshly smoked up filez tha destination\-default
permissions (while leavin existin filez unchanged), make shizzle dat the
\fB\-\-perms\fP option is off n' use \fB\-\-chmod=ugo=rwX\fP (which ensures that
all non\-maxed bits git enabled).  If you\(cq\&d care ta make dis latter
behavior easier ta type, you could define a popt alias fo' it, such as
puttin dis line up in tha file ~/.popt (the followin defines tha \fB\-Z\fP option,
and includes \-\-no\-g ta use tha default crew of tha destination dir):
.IP 
.RS 
\f(CW   rsync alias \-Z \-\-no\-p \-\-no\-g \-\-chmod=ugo=rwX\fP
.RE

.IP 
Yo ass could then use dis freshly smoked up option up in a cold-ass lil command like fuckin dis one:
.IP 
.RS 
\f(CW   rsync \-avZ src/ dest/\fP
.RE

.IP 
(Caveat: make shizzle dat \fB\-a\fP do not follow \fB\-Z\fP, or it will re\-enable
the two \(dq\&\-\-no\-*\(dq\& options mentioned above.)
.IP 
Da preservation of tha destination\(cq\&s setgid bit on newly\-created
directories when \fB\-\-perms\fP is off was added up in rsync 2.6.7.  Older rsync
versions erroneously preserved tha three special permission bits for
newly\-created filez when \fB\-\-perms\fP was off, while overridin the
destination\(cq\&s setgid bit settin on a newly\-created directory.  Default ACL
observizzle was added ta tha ACL patch fo' rsync 2.6.7, so olda (or
non\-ACL\-enabled) rsyncs use tha umask even if default ACLs is present.
(Keep it realz in mind dat it is tha version of tha receivin rsync dat affects
these behaviors.)
.IP 
.IP "\fB\-E, \-\-executability\fP"
This option causes rsync ta preserve the
executabilitizzle (or non\-executability) of regular filez when \fB\-\-perms\fP is
not enabled. Y'all KNOW dat shit, muthafucka!  A regular file is considered ta be executable if at least one
\(cq\&x\(cq\& is turned on up in its permissions.  When a existin destination file\(cq\&s
executabilitizzle differs from dat of tha correspondin source file, rsync
modifies tha destination file\(cq\&s permissions as bigs up:
.IP 
.RS 
.IP o 
To cook up a gangbangin' file non\-executable, rsync turns off all its \(cq\&x\(cq\&
permissions.
.IP o 
To cook up a gangbangin' file executable, rsync turns on each \(cq\&x\(cq\& permission that
has a cold-ass lil correspondin \(cq\&r\(cq\& permission enabled.
.RE

.IP 
If \fB\-\-perms\fP is enabled, dis option is ignored.
.IP 
.IP "\fB\-A, \-\-acls\fP"
This option causes rsync ta update tha destination
ACLs ta be tha same as tha source ACLs.
Da option also implies \fB\-\-perms\fP.
.IP 
Da source n' destination systems must have compatible ACL entries fo' this
option ta work properly.  See tha \fB\-\-fake\-super\fP option fo' a way ta backup
and restore ACLs dat is not compatible.
.IP 
.IP "\fB\-X, \-\-xattrs\fP"
This option causes rsync ta update tha destination
extended attributes ta be tha same as tha source ones.
.IP 
For systems dat support extended\-attribute namespaces, a cold-ass lil copy bein done by a
super\-user copies all namespaces except system.*.  A aiiight user only copies
the user.* namespace.  To be able ta backup n' restore non\-user namespaces as
a aiiight user, peep tha \fB\-\-fake\-super\fP option.
.IP 
Note dat dis option do not copy rsyncs special xattr joints (e.g. them
used by \fB\-\-fake\-super\fP) unless you repeat tha option (e.g. \-XX).  This
\(dq\&copy all xattrs\(dq\& mode cannot be used wit \fB\-\-fake\-super\fP.
.IP 
.IP "\fB\-\-chmod\fP"
This option  drops some lyrics ta rsync ta apply one or more
comma\-separated \(dq\&chmod\(dq\& modes ta tha permission of tha filez up in the
transfer n' shit.  Da resultin value is treated as though it was tha permissions
that tha bustin  side supplied fo' tha file, which means dat dis option
can seem ta have no effect on existin filez if \fB\-\-perms\fP aint enabled.
.IP 
In addizzle ta tha aiiight parsin rulez specified up in tha \fBchmod\fP(1)
manpage, you can specify a item dat should only apply ta a gangbangin' finger-lickin' directory by
prefixin it wit a \(cq\&D\(cq\&, or specify a item dat should only apply ta a
file by prefixin it wit a \(cq\&F\(cq\&.  For example, tha followin will ensure
that all directories git marked set\-gid, dat no filez is other\-writable,
that both is user\-writable n' group\-writable, n' dat both have
consistent executabilitizzle across all bits:
.IP 
.RS 
\-\-chmod=Dg+s,ug+w,Fo\-w,+X
.RE

.IP 
Usin octal mode numbers be also allowed:
.IP 
.RS 
\-\-chmod=D2775,F664
.RE

.IP 
It be also legal ta specify multiple \fB\-\-chmod\fP options, as each
additionizzle option is just appended ta tha list of chizzlez ta make.
.IP 
See tha \fB\-\-perms\fP n' \fB\-\-executability\fP options fo' how tha fuck tha resulting
permission value can be applied ta tha filez up in tha transfer.
.IP 
.IP "\fB\-o, \-\-baller\fP"
This option causes rsync ta set tha balla of the
destination file ta be tha same as tha source file yo, but only if the
receivin rsync is bein run as tha super\-user (see also tha \fB\-\-super\fP
and \fB\-\-fake\-super\fP options).
Without dis option, tha balla of freshly smoked up and/or transferred filez is set to
the invokin user on tha receivin side.
.IP 
Da preservation of ballershizzle will associate matchin names by default yo, but
may fall back ta rockin tha ID number up in some circumstances (see also the
\fB\-\-numeric\-ids\fP option fo' a gangbangin' full rap).
.IP 
.IP "\fB\-g, \-\-group\fP"
This option causes rsync ta set tha crew of the
destination file ta be tha same as tha source file.  If tha receiving
program aint hustlin as tha super\-user (or if \fB\-\-no\-super\fP was
specified), only crews dat tha invokin user on tha receivin side
is a gangmember of is ghon be preserved.
Without dis option, tha crew is set ta tha default crew of tha invoking
user on tha receivin side.
.IP 
Da preservation of crew shiznit will associate matchin names by
default yo, but may fall back ta rockin tha ID number up in some circumstances
(see also tha \fB\-\-numeric\-ids\fP option fo' a gangbangin' full rap).
.IP 
.IP "\fB\-\-devices\fP"
This option causes rsync ta transfer characta and
block thang filez ta tha remote system ta recreate these devices.
This option has no effect if tha receivin rsync aint run as the
super\-user (see also tha \fB\-\-super\fP n' \fB\-\-fake\-super\fP options).
.IP 
.IP "\fB\-\-specials\fP"
This option causes rsync ta transfer special files
like fuckin named sockets n' fifos.
.IP 
.IP "\fB\-D\fP"
Da \fB\-D\fP option is equivalent ta \fB\-\-devices\fP \fB\-\-specials\fP.
.IP 
.IP "\fB\-t, \-\-times\fP"
This  drops some lyrics ta rsync ta transfer modification times along
with tha filez n' update dem on tha remote system.  Note dat if this
option aint used, tha optimization dat excludes filez dat aint been
modified cannot be effective; up in other lyrics, a missin \fB\-t\fP or \fB\-a\fP will
cause tha next transfer ta behave as if it used \fB\-I\fP, causin all filez ta be
updated (though rsync\(cq\&s delta\-transfer algorithm will make tha update fairly efficient
if tha filez haven\(cq\&t straight-up chizzled, you\(cq\&re much betta off rockin \fB\-t\fP).
.IP 
.IP "\fB\-O, \-\-omit\-dir\-times\fP"
This  drops some lyrics ta rsync ta omit directories when
it is preservin modification times (see \fB\-\-times\fP).  If NFS is sharing
the directories on tha receivin side, it aint nuthin but a phat scam ta use \fB\-O\fP.
This option is inferred if you use \fB\-\-backup\fP without \fB\-\-backup\-dir\fP.
.IP 
.IP "\fB\-J, \-\-omit\-link\-times\fP"
This  drops some lyrics ta rsync ta omit symlinks when
it is preservin modification times (see \fB\-\-times\fP).
.IP 
.IP "\fB\-\-super\fP"
This  drops some lyrics ta tha receivin side ta attempt super\-user
activitizzles even if tha receivin rsync wasn\(cq\&t run by tha super\-user n' shit.  These
activitizzles include: preservin playas via tha \fB\-\-baller\fP option, preserving
all crews (not just tha current user\(cq\&s groups) via tha \fB\-\-groups\fP
option, n' copyin devices via tha \fB\-\-devices\fP option. I aint talkin' bout chicken n' gravy biatch.  This is useful
for systems dat allow such activitizzles without bein tha super\-user, and
also fo' ensurin dat yo big-ass booty is ghon git errors if tha receivin side isn\(cq\&t
bein run as tha super\-user n' shit.  To turn off super\-user activities, the
super\-user can use \fB\-\-no\-super\fP.
.IP 
.IP "\fB\-\-fake\-super\fP"
When dis option is enabled, rsync simulates
super\-user activitizzles by saving/restorin tha privileged attributes via
special extended attributes dat is attached ta each file (as needed).  This
includes tha file\(cq\&s balla n' crew (if it aint tha default), tha file\(cq\&s
device info (device & special filez is pimped as empty text files), and
any permission bits dat we won\(cq\&t allow ta be set on tha real file (e.g.
the real file gets u\-s,g\-s,o\-t fo' safety) or dat would limit tha baller\(cq\&s
access (since tha real super\-user can always access/change a gangbangin' file, the
filez we create can always be accessed/changed by tha bustin user).
This option also handlez ACLs (if \fB\-\-acls\fP was specified) n' non\-user
extended attributes (if \fB\-\-xattrs\fP was specified).
.IP 
This be a phat way ta backup data without rockin a super\-user, n' ta store
ACLs from incompatible systems.
.IP 
Da \fB\-\-fake\-super\fP option only affects tha side where tha option is used.
To affect tha remote side of a remote\-shell connection, use the
\fB\-\-remote\-option\fP (\fB\-M\fP) option:
.IP 
.RS 
\f(CW  rsync \-av \-M\-\-fake\-supa /src/ host:/dest/\fP
.RE

.IP 
For a local copy, dis option affects both tha source n' tha destination.
If you wish a local copy ta enable dis option just fo' tha destination
files, specify \fB\-M\-\-fake\-super\fP.  If you wish a local copy ta enable
this option just fo' tha source files, combine \fB\-\-fake\-super\fP with
\fB\-M\-\-super\fP.
.IP 
This option is overridden by both \fB\-\-super\fP n' \fB\-\-no\-super\fP.
.IP 
See also tha \(dq\&fake super\(dq\& settin up in tha daemon\(cq\&s rsyncd.conf file.
.IP 
.IP "\fB\-S, \-\-sparse\fP"
Try ta handle sparse filez efficiently so they take
up less space on tha destination. I aint talkin' bout chicken n' gravy biatch.  Conflicts wit \fB\-\-inplace\fP cuz it\(cq\&s
not possible ta overwrite data up in a sparse fashion.
.IP 
.IP "\fB\-\-preallocate\fP"
This  drops some lyrics ta tha receiver ta allocate each destination
file ta its eventual size before freestylin data ta tha file.  Rsync will only use
the real filesystem\-level preallocation support provided by Linux\(cq\&s
\fBfallocate\fP(2) system call or Cygwin\(cq\&s \fBposix_fallocate\fP(3), not tha slow
glibc implementation dat writes a zero byte tha fuck into each block.
.IP 
Without dis option, larger filez may not be entirely contiguous on the
filesystem yo, but wit dis option rsync will probably copy mo' slowly.  If the
destination aint a extent\-supportin filesystem (like fuckin ext4, xfs, NTFS,
etc.), dis option may have no positizzle effect at all.
.IP 
.IP "\fB\-n, \-\-dry\-run\fP"
This make rsync big-ass up a trial run dat don\(cq\&t
make any chizzlez (and produces mostly tha same output as a real run).  It
is most commonly used up in combination wit tha \fB\-v, \-\-verbose\fP and/or
\fB\-i, \-\-itemize\-changes\fP options ta peep what tha fuck a rsync command is going
to do before one straight-up runs dat shit.
.IP 
Da output of \fB\-\-itemize\-changes\fP is supposed ta be exactly tha same on a
dry run n' a subsequent real run (barrin intentionizzle trickery n' system
call failures); if it isn\(cq\&t, that\(cq\&s a funky-ass bug.  Other output should be mostly
unchanged yo, but may differ up in some areas.  Notably, a thugged-out dry run do not
send tha actual data fo' file transfers, so \fB\-\-progress\fP has no effect,
the \(dq\&bytes sent\(dq\&, \(dq\&bytes received\(dq\&, \(dq\&literal data\(dq\&, n' \(dq\&matched data\(dq\&
statistics is too small, n' tha \(dq\&speedup\(dq\& value is equivalent ta a run
where no file transfers was needed.
.IP 
.IP "\fB\-W, \-\-whole\-file\fP"
With dis option rsync\(cq\&s delta\-transfer algorithm
is not used n' tha whole file is busted as\-is instead. Y'all KNOW dat shit, muthafucka!  Da transfer may be
fasta if dis option is used when tha bandwidth between tha source and
destination machines is higher than tha bandwidth ta disk (especially when the
\(dq\&disk\(dq\& is straight-up a networked filesystem).  This is tha default when both
the source n' destination is specified as local paths yo, but only if no
batch\-writin option is up in effect.
.IP 
.IP "\fB\-x, \-\-one\-file\-system\fP"
This  drops some lyrics ta rsync ta avoid crossin a
filesystem boundary when recursing.  This do not limit tha user\(cq\&s ability
to specify shit ta copy from multiple filesystems, just rsync\(cq\&s recursion
all up in tha hierarchy of each directory dat tha user specified, n' also
the analogous recursion on tha receivin side durin deletion. I aint talkin' bout chicken n' gravy biatch.  Also keep
in mind dat rsync treats a \(dq\&bind\(dq\& mount ta tha same thang as bein on the
same filesystem.
.IP 
If dis option is repeated, rsync omits all mount\-point directories from
the copy.  Otherwise, it includes a empty directory at each mount\-point it
encountas (usin tha attributez of tha mounted directory cuz dem of
the underlyin mount\-point directory is inaccessible).
.IP 
If rsync has been holla'd at ta collapse symlinks (via \fB\-\-copy\-links\fP or
\fB\-\-copy\-unsafe\-links\fP), a symlink ta a gangbangin' finger-lickin' directory on another thang is
treated like a mount\-point.  Symlinks ta non\-directories is unaffected
by dis option.
.IP 
.IP "\fB\-\-existing, \-\-ignore\-non\-existing\fP"
This  drops some lyrics ta rsync ta skip
bustin filez (includin directories) dat do not exist
yet on tha destination. I aint talkin' bout chicken n' gravy biatch.  If dis option is
combined wit tha \fB\-\-ignore\-existing\fP option, no filez is ghon be updated
(which can be useful if all you wanna do is delete extraneous files).
.IP 
This option be a transfer rule, not a exclude, so it don\(cq\&t affect the
data dat goes tha fuck into tha file\-lists, n' thus it don\(cq\&t affect deletions.
It just limits tha filez dat tha receiver requests ta be transferred.
.IP 
.IP "\fB\-\-ignore\-existing\fP"
This  drops some lyrics ta rsync ta skip uppimpin filez that
already exist on tha destination (this do \fInot\fP ignore existing
directories, or not a god damn thang would git done).  See also \fB\-\-existing\fP.
.IP 
This option be a transfer rule, not a exclude, so it don\(cq\&t affect the
data dat goes tha fuck into tha file\-lists, n' thus it don\(cq\&t affect deletions.
It just limits tha filez dat tha receiver requests ta be transferred.
.IP 
This option can be useful fo' dem bustin backups rockin tha \fB\-\-link\-dest\fP
option when they need ta continue a funky-ass backup run dat gots interrupted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Since
a \fB\-\-link\-dest\fP run is copied tha fuck into a freshly smoked up directory hierarchy (when it is
used properly), rockin \fB\-\-ignore existing\fP will ensure dat the
already\-handled filez don\(cq\&t git tweaked (which avoidz a cold-ass lil chizzle in
permissions on tha hard\-linked files).  This do mean dat dis option
is only lookin all up in tha existin filez up in tha destination hierarchy itself.
.IP 
.IP "\fB\-\-remove\-source\-files\fP"
This  drops some lyrics ta rsync ta remove from tha sending
side tha filez (meanin non\-directories) dat is a part of tha transfer
and done been successfully duplicated on tha receivin side.
.IP 
Note dat you should only use dis option on source filez dat is quiescent.
If yo ass is rockin dis ta move filez dat show up in a particular directory over
to another host, make shizzle dat tha finished filez git renamed tha fuck into tha source
directory, not directly freestyled tha fuck into it, so dat rsync can\(cq\&t possibly transfer
a file dat aint yet straight-up written. I aint talkin' bout chicken n' gravy biatch.  If you can\(cq\&t first write tha filez into
a different directory, you should bust a namin idiom dat lets rsync avoid
transferrin filez dat is not yet finished (e.g. name tha file \(dq\&foo.new\(dq\& when
it is written, rename it ta \(dq\&foo\(dq\& when it is done, n' then use tha option
\fB\-\-exclude='\&*.new'\&\fP fo' tha rsync transfer).
.IP 
Startin wit 3.1.0, rsync will skip tha sender\-side removal (and output an
error) if tha file\(cq\&s size or modify time has not stayed unchanged.
.IP 
.IP "\fB\-\-delete\fP"
This  drops some lyrics ta rsync ta delete extraneous filez from the
receivin side (ones dat aren\(cq\&t on tha bustin  side) yo, but only fo' the
directories dat is bein synchronized. Y'all KNOW dat shit, muthafucka!  Yo ass must have axed rsync to
send tha whole directory (e.g. \(dq\&dir\(dq\& or \(dq\&dir/\(dq\&) without rockin a wildcard
for tha directory\(cq\&s contents (e.g. \(dq\&dir/*\(dq\&) since tha wildcard is expanded
by tha shell n' rsync thus gets a request ta transfer individual files, not
the files\(cq\& parent directory.  Filez dat is excluded from tha transfer are
also excluded from bein deleted unless you use tha \fB\-\-delete\-excluded\fP
option or mark tha rulez as only matchin on tha bustin  side (see the
include/exclude modifiers up in tha FILTER RULES section).
.IP 
Prior ta rsync 2.6.7, dis option would have no effect unless \fB\-\-recursive\fP
was enabled. Y'all KNOW dat shit, muthafucka!  Beginnin wit 2.6.7, deletions will also occur when \fB\-\-dirs\fP
(\fB\-d\fP) is enabled yo, but only fo' directories whose contents is bein copied.
.IP 
This option can be fucked up if used incorrectly dawwwwg!  It be a straight-up phat scam to
first try a run rockin tha \fB\-\-dry\-run\fP option (\fB\-n\fP) ta peep what tha fuck filez are
goin ta be deleted.
.IP 
If tha bustin  side detects any I/O errors, then tha deletion of any
filez all up in tha destination is ghon be automatically disabled. Y'all KNOW dat shit, muthafucka! This is to
prevent temporary filesystem failures (like fuckin NFS errors) on the
sendin side from causin a massive deletion of filez on the
destination. I aint talkin' bout chicken n' gravy biatch.  Yo ass can override dis wit tha \fB\-\-ignore\-errors\fP option.
.IP 
Da \fB\-\-delete\fP option may be combined wit one of tha \-\-delete\-WHEN options
without conflict, as well as \fB\-\-delete\-excluded\fP.  But fuck dat shiznit yo, tha word on tha street is dat if none of the
\-\-delete\-WHEN options is specified, rsync will chizzle the
\fB\-\-delete\-during\fP algorithm when rappin' ta rsync 3.0.0 or newer, and
the \fB\-\-delete\-before\fP algorithm when rappin' ta a olda rsync.  See also
\fB\-\-delete\-delay\fP n' \fB\-\-delete\-after\fP.
.IP 
.IP "\fB\-\-delete\-before\fP"
Request dat tha file\-deletions on tha receiving
side be done before tha transfer starts.
See \fB\-\-delete\fP (which is implied) fo' mo' details on file\-deletion.
.IP 
Deletin before tha transfer is helpful if tha filesystem is tight fo' space
and removin extraneous filez would help ta make tha transfer possible.
But fuck dat shiznit yo, tha word on tha street is dat it do introduce a thugged-out delay before tha start of tha transfer,
and dis delay might cause tha transfer ta timeout (if \fB\-\-timeout\fP was
specified).  It also forces rsync ta use tha old, non\-incremenstrual recursion
algorithm dat requires rsync ta scan all tha filez up in tha transfer into
memory at once (see \fB\-\-recursive\fP).
.IP 
.IP "\fB\-\-delete\-during, \-\-del\fP"
Request dat tha file\-deletions on the
receivin side be done incrementally as tha transfer happens.  The
per\-directory delete scan is done right before each directory is checked
for thugged-out shit, so it behaves like a mo' efficient \fB\-\-delete\-before\fP,
includin bustin tha deletions prior ta any per\-directory filta files
bein updated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This option was first added up in rsync version 2.6.4.
See \fB\-\-delete\fP (which is implied) fo' mo' details on file\-deletion.
.IP 
.IP "\fB\-\-delete\-delay\fP"
Request dat tha file\-deletions on tha receiving
side be computed durin tha transfer (like \fB\-\-delete\-during\fP), n' then
removed afta tha transfer completes.  This is useful when combined with
\fB\-\-delay\-updates\fP and/or \fB\-\-fuzzy\fP, n' is mo' efficient than using
\fB\-\-delete\-after\fP (but can behave differently, since \fB\-\-delete\-after\fP
computes tha deletions up in a separate pass afta all thugged-out shiznit is done).
If tha number of removed filez overflows a internal buffer, a
temporary file is ghon be pimped on tha receivin side ta hold tha names (it
is removed while open, so you shouldn\(cq\&t peep it durin tha transfer).  If
the creation of tha temporary file fails, rsync will try ta fall back to
usin \fB\-\-delete\-after\fP (which it cannot do if \fB\-\-recursive\fP is bustin an
incremenstrual scan).
See \fB\-\-delete\fP (which is implied) fo' mo' details on file\-deletion.
.IP 
.IP "\fB\-\-delete\-after\fP"
Request dat tha file\-deletions on tha receiving
side be done afta tha transfer has completed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This is useful if you
are bustin  freshly smoked up per\-directory merge filez as a part of tha transfer and
you want they exclusions ta take effect fo' tha delete phase of the
current transfer n' shit.  It also forces rsync ta use tha old, non\-incremental
recursion algorithm dat requires rsync ta scan all tha filez up in the
transfer tha fuck into memory at once (see \fB\-\-recursive\fP).
See \fB\-\-delete\fP (which is implied) fo' mo' details on file\-deletion.
.IP 
.IP "\fB\-\-delete\-excluded\fP"
In addizzle ta deletin tha filez on the
receivin side dat is not on tha bustin  side, dis  drops some lyrics ta rsync ta also
delete any filez on tha receivin side dat is excluded (see \fB\-\-exclude\fP).
See tha FILTER RULES section fo' a way ta make individual exclusions behave
this way on tha receiver, n' fo' a way ta protect filez from
\fB\-\-delete\-excluded\fP.
See \fB\-\-delete\fP (which is implied) fo' mo' details on file\-deletion.
.IP 
.IP "\fB\-\-ignore\-missing\-args\fP"
When rsync is first processin tha explicitly
axed source filez (e.g. command\-line arguments or \fB\-\-files\-from\fP
entries), it is normally a error if tha file cannot be found. Y'all KNOW dat shit, muthafucka!  This option
suppresses dat error, n' do not try ta transfer tha file.  This do not
affect subsequent vanished\-file errors if a gangbangin' file was initially found ta be
present n' lata is no longer there.
.IP 
.IP "\fB\-\-delete\-missing\-args\fP"
This option takes tha behavior of (the implied)
\fB\-\-ignore\-missing\-args\fP option a step farther:  each missin arg will become
a deletion request of tha correspondin destination file on tha receivin side
(should it exist).  If tha destination file be a non\-empty directory, it will
only be successfully deleted if \-\-force or \-\-delete is up in effect.  Other than
that, dis option is independent of any other type of delete processing.
.IP 
Da missin source filez is represented by special file\-list entries which
display as a \(dq\&*missing\(dq\& entry up in tha \fB\-\-list\-only\fP output.
.IP 
.IP "\fB\-\-ignore\-errors\fP"
Tells \fB\-\-delete\fP ta go ahead n' delete files
even when there be I/O errors.
.IP 
.IP "\fB\-\-force\fP"
This option  drops some lyrics ta rsync ta delete a non\-empty directory
when it is ta be replaced by a non\-directory.  This is only relevant if
deletions is not actizzle (see \fB\-\-delete\fP fo' details).
.IP 
Note fo' olda rsync versions: \fB\-\-force\fP used ta still be required when
usin \fB\-\-delete\-after\fP, n' it used ta be non\-functionizzle unless the
\fB\-\-recursive\fP option was also enabled.
.IP 
.IP "\fB\-\-max\-delete=NUM\fP"
This  drops some lyrics ta rsync not ta delete mo' than NUM
filez or directories. Put ya muthafuckin choppers up if ya feel dis!  If dat limit is exceeded, all further deletions are
skipped all up in tha end of tha transfer n' shit.  At tha end, rsync outputs a warning
(includin a cold-ass lil count of tha skipped deletions) n' exits wit a error code
of 25 (unless some mo' blingin error condizzle also occurred).
.IP 
Beginnin wit version 3.0.0, you may specify \fB\-\-max\-delete=0\fP ta be warned
about any extraneous filez up in tha destination without removin any of em.
Older clients interpreted dis as \(dq\&unlimited\(dq\&, so if you don\(cq\&t know what
version tha client is, you can use tha less obvious \fB\-\-max\-delete=\-1\fP as
a backward\-compatible way ta specify dat no deletions be allowed (though
really oldschool versions didn\(cq\&t warn when tha limit was exceeded).
.IP 
.IP "\fB\-\-max\-size=SIZE\fP"
This  drops some lyrics ta rsync ta avoid transferrin any
file dat is larger than tha specified SIZE. Da SIZE value can be
suffixed wit a strang ta indicate a size multiplier, and
may be a gangbangin' fractionizzle value (e.g. \(dq\&\fB\-\-max\-size=1.5m\fP\(dq\&).
.IP 
This option be a transfer rule, not a exclude, so it don\(cq\&t affect the
data dat goes tha fuck into tha file\-lists, n' thus it don\(cq\&t affect deletions.
It just limits tha filez dat tha receiver requests ta be transferred.
.IP 
Da suffixes is as bigs up: \(dq\&K\(dq\& (or \(dq\&KiB\(dq\&) be a kibibyte (1024),
\(dq\&M\(dq\& (or \(dq\&MiB\(dq\&) be a mebibyte (1024*1024), n' \(dq\&G\(dq\& (or \(dq\&GiB\(dq\&) be a
gibibyte (1024*1024*1024).
If you want tha multiplier ta be 1000 instead of 1024, use \(dq\&KB\(dq\&,
\(dq\&MB\(dq\&, or \(dq\&GB\(dq\&.  (Note: lower\-case be also accepted fo' all joints.)
Finally, if tha suffix endz up in either \(dq\&+1\(dq\& or \(dq\&\-1\(dq\&, tha value will
be offset by one byte up in tha indicated direction.
.IP 
Examples: \-\-max\-size=1.5mb\-1 is 1499999 bytes, n' \-\-max\-size=2g+1 is
2147483649 bytes.
.IP 
Note dat rsync versions prior ta 3.1.0 did not allow \fB\-\-max\-size=0\fP.
.IP 
.IP "\fB\-\-min\-size=SIZE\fP"
This  drops some lyrics ta rsync ta avoid transferrin any
file dat is smalla than tha specified SIZE, which can help up in not
transferrin small, junk files.
See tha \fB\-\-max\-size\fP option fo' a thugged-out description of SIZE n' other shiznit.
.IP 
Note dat rsync versions prior ta 3.1.0 did not allow \fB\-\-min\-size=0\fP.
.IP 
.IP "\fB\-B, \-\-block\-size=BLOCKSIZE\fP"
This forces tha block size used in
rsync\(cq\&s delta\-transfer algorithm ta a gangbangin' fixed value.  It be normally selected based on
the size of each file bein updated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See tha technical report fo' details.
.IP 
.IP "\fB\-e, \-\-rsh=COMMAND\fP"
This option allows you ta chizzle a alternative
remote shell program ta use fo' communication between tha local and
remote copiez of rsync. Typically, rsync is configured ta use ssh by
default yo, but you may prefer ta use rsh on a local network.
.IP 
If dis option is used wit \fB[user@]host::module/path\fP, then the
remote shell \fICOMMAND\fP is ghon be used ta run a rsync daemon on the
remote host, n' all data is ghon be transmitted all up in dat remote
shell connection, rather than all up in a gangbangin' finger-lickin' direct socket connection ta a
runnin rsync daemon on tha remote host.  See tha section \(dq\&USING
RSYNC\-DAEMON FEATURES VIA A REMOTE\-SHELL CONNECTION\(dq\& above.
.IP 
Command\-line arguments is permitted up in COMMAND provided dat COMMAND is
presented ta rsync as a single argument.  Yo ass must use spaces (not tabs
or other whitespace) ta separate tha command n' args from each other,
and you can use single\- and/or double\-quotes ta preserve spaces up in an
argument (but not backslashes).  Note dat doublin a single\-quote
inside a single\-quoted strang gives you a single\-quote; likewise for
double\-quotes (though you need ta pay attention ta which quotes your
shell is parsin n' which quotes rsync is parsing).  Some examples:
.IP 
.RS 
\f(CW    \-e '\&ssh \-p 2234'\&\fP
.br 
\f(CW    \-e '\&ssh \-o \(dq\&ProxyCommand nohup ssh firewall nc \-w1 %h %p\(dq\&'\&\fP
.br 
.RE

.IP 
(Note dat ssh playas can alternately customize crib\-specific connect
options up in they .ssh/config file.)
.IP 
Yo ass can also chizzle tha remote shell program rockin tha RSYNC_RSH
environment variable, which accepts tha same ol' dirty range of joints as \fB\-e\fP.
.IP 
See also tha \fB\-\-blocking\-io\fP option which be affected by dis option.
.IP 
.IP "\fB\-\-rsync\-path=PROGRAM\fP"
Use dis ta specify what tha fuck program is ta be run
on tha remote machine ta start\-up rsync.  Often used when rsync aint in
the default remote\-shell\(cq\&s path (e.g. \-\-rsync\-path=/usr/local/bin/rsync).
Note dat PROGRAM is run wit tha help of a gangbangin' finger-lickin' dirty-ass shell, so it can be any
program, script, or command sequence you\(cq\&d care ta run, so long as it do
not corrupt tha standard\-in & standard\-out dat rsync is rockin to
communicate.
.IP 
One tricky example is ta set a gangbangin' finger-lickin' different default directory on tha remote
machine fo' use wit tha \fB\-\-relative\fP option. I aint talkin' bout chicken n' gravy biatch.  For instance:
.IP 
.RS 
\f(CW    rsync \-avR \-\-rsync\-path=\(dq\&cd /a/b && rsync\(dq\& host:c/d /e/\fP
.RE

.IP 
.IP "\fB\-M, \-\-remote\-option=OPTION\fP"
This option is used fo' mo' advanced
situations where you want certain effects ta be limited ta one side of the
transfer only.  For instance, if you wanna pass \fB\-\-log\-file=FILE\fP and
\fB\-\-fake\-super\fP ta tha remote system, specify it like this:
.IP 
.RS 
\f(CW    rsync \-av \-M \-\-log\-file=foo \-M\-\-fake\-supa src/ dest/\fP
.RE

.IP 
If you wanna have a option affect only tha local side of a transfer when
it normally affects both sides, bust its negation ta tha remote side.  Like
this:
.IP 
.RS 
\f(CW    rsync \-av \-x \-M\-\-no\-x src/ dest/\fP
.RE

.IP 
Be cautious rockin this, as it is possible ta toggle a option dat will cause
rsync ta git a gangbangin' finger-lickin' different scam bout what tha fuck data ta expect next over tha socket,
and dat will make it fail up in a cold-ass lil cryptic fashion.
.IP 
Note dat it is dopest ta bust a separate \fB\-\-remote\-option\fP fo' each option you
wanna pass.  This make yo' useage compatible wit tha \fB\-\-protect\-args\fP
option. I aint talkin' bout chicken n' gravy biatch.  If dat option is off, any spaces up in yo' remote options is ghon be split
by tha remote shell unless you take steps ta protect em.
.IP 
When struttin a local transfer, tha \(dq\&local\(dq\& side is tha sender n' the
\(dq\&remote\(dq\& side is tha receiver.
.IP 
Note some versionz of tha popt option\-parsin library gotz a funky-ass bug up in dem that
prevents you from rockin a adjacent arg wit a equal up in it next ta a gangbangin' finger-lickin' dirty-ass short
option letta (e.g. \f(CW\-M\-\-log\-file=/tmp/foo\fP.  If dis bug affects your
version of popt, you can use tha version of popt dat is included wit rsync.
.IP 
.IP "\fB\-C, \-\-cvs\-exclude\fP"
This be a useful shorthand fo' excludin a
broad range of filez dat you often don\(cq\&t wanna transfer between
systems. Well shiiiit, it uses a similar algorithm ta CVS ta determine if
a file should be ignored.
.IP 
Da exclude list is initialized ta exclude tha followin shit (these
initial shit is marked as perishable \-\- peep tha FILTER RULES section):
.IP 
.RS 
.RS 
\f(CWRCS SCCS CVS CVS.adm RCSLOG cvslog.* tags TAGS .make.state
\&.nse_depinfo *~ #* .#* ,* _$* *$ *.old *.bak *.BAK *.orig *.rej .del\-*
*.a *.olb *.o *.obj *.so *.exe *.Z *.elc *.ln core .svn/ .git/ .hg/ .bzr/\fP
.RE
.RE

.IP 
then, filez listed up in a $HOME/.cvsignore is added ta tha list n' any
filez listed up in tha CVSIGNORE environment variable (all cvsignore names
are delimited by whitespace).
.IP 
Finally, any file is ignored if it is up in tha same directory as a
\&.cvsignore file n' matches one of tha patterns listed therein. I aint talkin' bout chicken n' gravy biatch.  Unlike
rsync\(cq\&s filter/exclude files, these patterns is split on whitespace.
See tha \fBcvs\fP(1) manual fo' mo' shiznit.
.IP 
If you\(cq\&re combinin \fB\-C\fP wit yo' own \fB\-\-filter\fP rules, you should
note dat these CVS excludes is appended all up in tha end of yo' own rules,
regardless of where tha \fB\-C\fP was placed on tha command\-line.  This make them
a lower prioritizzle than any rulez you specified explicitly.  If you want to
control where these CVS excludes git banged tha fuck into yo' filta rules, you
should omit tha \fB\-C\fP as a cold-ass lil command\-line option n' bust a cold-ass lil combination of
\fB\-\-filter=:C\fP n' \fB\-\-filter=\-C\fP (either on yo' command\-line or by
puttin tha \(dq\&:C\(dq\& n' \(dq\&\-C\(dq\& rulez tha fuck into a gangbangin' filta file wit yo' other rules).
Da first option turns on tha per\-directory scannin fo' tha .cvsignore
file.  Da second option do a one\-time import of tha CVS excludes
mentioned above.
.IP 
.IP "\fB\-f, \-\-filter=RULE\fP"
This option allows you ta add rulez ta selectively
exclude certain filez from tha list of filez ta be transferred. Y'all KNOW dat shit, muthafucka! This is
most useful up in combination wit a recursive transfer.
.IP 
Yo ass may use as nuff \fB\-\-filter\fP options on tha command line as you like
to build up tha list of filez ta exclude.  If tha filta gotz nuff whitespace,
be shizzle ta quote it so dat tha shell gives tha rule ta rsync as a single
argument.  Da text below also mentions dat you can use a underscore to
replace tha space dat separates a rule from its arg.
.IP 
See tha FILTER RULES section fo' detailed shiznit on dis option.
.IP 
.IP "\fB\-F\fP"
Da \fB\-F\fP option be a gangbangin' finger-lickin' dirty-ass shorthand fo' addin two \fB\-\-filter\fP rulez to
your command. Y'all KNOW dat shit, muthafucka!  Da last time it is used be a gangbangin' finger-lickin' dirty-ass shorthand fo' dis rule:
.IP 
.RS 
\f(CW   \-\-filter='\&dir\-merge /.rsync\-filter'\&\fP
.RE

.IP 
This  drops some lyrics ta rsync ta look fo' per\-directory .rsync\-filta filez dat have
been sprinkled all up in tha hierarchy n' use they rulez ta filta the
filez up in tha transfer n' shit.  If \fB\-F\fP is repeated, it aint nuthin but a gangbangin' finger-lickin' dirty-ass shorthand fo' this
rule:
.IP 
.RS 
\f(CW   \-\-filter='\&exclude .rsync\-filter'\&\fP
.RE

.IP 
This filtas up tha .rsync\-filta filez theyselves from tha transfer.
.IP 
See tha FILTER RULES section fo' detailed shiznit on how tha fuck these options
work.
.IP 
.IP "\fB\-\-exclude=PATTERN\fP"
This option be a simplified form of the
\fB\-\-filter\fP option dat defaults ta a exclude rule n' do not allow
the full rule\-parsin syntax of aiiight filta rules.
.IP 
See tha FILTER RULES section fo' detailed shiznit on dis option.
.IP 
.IP "\fB\-\-exclude\-from=FILE\fP"
This option is related ta tha \fB\-\-exclude\fP
option yo, but it specifies a FILE dat gotz nuff exclude patterns (one per line).
Blank lines up in tha file n' lines startin wit \(cq\&;\(cq\& or \(cq\&#\(cq\& is ignored.
If \fIFILE\fP is \fB\-\fP, tha list is ghon be read from standard input.
.IP 
.IP "\fB\-\-include=PATTERN\fP"
This option be a simplified form of the
\fB\-\-filter\fP option dat defaults ta a include rule n' do not allow
the full rule\-parsin syntax of aiiight filta rules.
.IP 
See tha FILTER RULES section fo' detailed shiznit on dis option.
.IP 
.IP "\fB\-\-include\-from=FILE\fP"
This option is related ta tha \fB\-\-include\fP
option yo, but it specifies a FILE dat gotz nuff include patterns (one per line).
Blank lines up in tha file n' lines startin wit \(cq\&;\(cq\& or \(cq\&#\(cq\& is ignored.
If \fIFILE\fP is \fB\-\fP, tha list is ghon be read from standard input.
.IP 
.IP "\fB\-\-files\-from=FILE\fP"
Usin dis option allows you ta specify the
exact list of filez ta transfer (as read from tha specified FILE or \fB\-\fP
for standard input).  It also tweaks tha default behavior of rsync ta make
transferrin just tha specified filez n' directories easier:
.IP 
.RS 
.IP o 
Da \fB\-\-relative\fP (\fB\-R\fP) option is implied, which preserves tha path
information dat is specified fo' each item up in tha file (use
\fB\-\-no\-relative\fP or \fB\-\-no\-R\fP if you wanna turn dat off).
.IP o 
Da \fB\-\-dirs\fP (\fB\-d\fP) option is implied, which will create directories
specified up in tha list on tha destination rather than noisily skipping
them (use \fB\-\-no\-dirs\fP or \fB\-\-no\-d\fP if you wanna turn dat off).
.IP o 
Da \fB\-\-archive\fP (\fB\-a\fP) option\(cq\&s behavior do not imply \fB\-\-recursive\fP
(\fB\-r\fP), so specify it explicitly, if you want dat shit.
.IP o 
These side\-effects chizzle tha default state of rsync, so tha position
of tha \fB\-\-files\-from\fP option on tha command\-line has no bearin on how
other options is parsed (e.g. \fB\-a\fP works tha same ol' dirty before or after
\fB\-\-files\-from\fP, as do \fB\-\-no\-R\fP n' all other options).
.RE

.IP 
Da filenames dat is read from tha FILE is all relatizzle ta the
source dir \-\- any leadin slashes is removed n' no \(dq\&..\(dq\& references are
allowed ta go higher than tha source dir. Shiiit, dis aint no joke.  For example, take this
command:
.IP 
.RS 
\f(CW   rsync \-a \-\-files\-from=/tmp/foo /usr remote:/backup\fP
.RE

.IP 
If /tmp/foo gotz nuff tha strang \(dq\&bin\(dq\& (or even \(dq\&/bin\(dq\&), tha /usr/bin
directory is ghon be pimped as /backup/bin on tha remote host.  If it
gotz nuff \(dq\&bin/\(dq\& (note tha trailin slash), tha immediate contents of
the directory would also be busted (without needin ta be explicitly
mentioned up in tha file \-\- dis fuckin started up in version 2.6.4).  In both cases,
if tha \fB\-r\fP option was enabled, dat dir\(cq\&s entire hierarchy would
also be transferred (keep up in mind dat \fB\-r\fP need ta be specified
explicitly wit \fB\-\-files\-from\fP, since it aint implied by \fB\-a\fP).
Also note
that tha effect of tha (enabled by default) \fB\-\-relative\fP option is to
duplicate only tha path info dat is read from tha file \-\- it do not
force tha duplication of tha source\-spec path (/usr up in dis case).
.IP 
In addition, tha \fB\-\-files\-from\fP file can be read from tha remote host
instead of tha local host if you specify a \(dq\&host:\(dq\& up in front of tha file
(the host must match one end of tha transfer).  As a gangbangin' finger-lickin' dirty-ass short\-cut, you can
specify just a prefix of \(dq\&:\(dq\& ta mean \(dq\&use tha remote end of the
transfer\(dq\&.  For example:
.IP 
.RS 
\f(CW   rsync \-a \-\-files\-from=:/path/file\-list src:/ /tmp/copy\fP
.RE

.IP 
This would copy all tha filez specified up in tha /path/file\-list file that
was located on tha remote \(dq\&src\(dq\& host.
.IP 
If tha \fB\-\-iconv\fP n' \fB\-\-protect\-args\fP options is specified n' the
\fB\-\-files\-from\fP filenames is bein busted from one host ta another, the
filenames is ghon be translated from tha bustin  host\(cq\&s charset ta the
receivin host\(cq\&s charset.
.IP 
NOTE: sortin tha list of filez up in tha \-\-files\-from input helps rsync ta be
more efficient, as it will avoid re\-visitin tha path elements dat is shared
between adjacent entries. Put ya muthafuckin choppers up if ya feel dis!  If tha input aint sorted, some path elements
(implied directories) may end up bein scanned multiple times, n' rsync will
eventually unduplicate dem afta they git turned tha fuck into file\-list elements.
.IP 
.IP "\fB\-0, \-\-from0\fP"
This  drops some lyrics ta rsync dat tha rules/filenames it readz from a
file is terminated by a null (\(cq\&\e0\(cq\&) character, not a NL, CR, or CR+LF.
This affects \fB\-\-exclude\-from\fP, \fB\-\-include\-from\fP, \fB\-\-files\-from\fP, n' any
merged filez specified up in a \fB\-\-filter\fP rule.
It do not affect \fB\-\-cvs\-exclude\fP (since all names read from a .cvsignore
file is split on whitespace).
.IP 
.IP "\fB\-s, \-\-protect\-args\fP"
This option sendz all filenames n' most options to
the remote rsync without allowin tha remote shell ta interpret em.  This
means dat spaces is not split up in names, n' any non\-wildcard special
charactas is not translated (like fuckin ~, $, ;, &, etc.).  Wildcardz are
expanded on tha remote host by rsync (instead of tha shell bustin it).
.IP 
If you use dis option wit \fB\-\-iconv\fP, tha args related ta tha remote
side will also be translated
from tha local ta tha remote character\-set.  Da translation happens before
wild\-cardz is expanded. Y'all KNOW dat shit, muthafucka!  See also tha \fB\-\-files\-from\fP option.
.IP 
Yo ass may also control dis option via tha RSYNC_PROTECT_ARGS environment
variable.  If dis variable has a non\-zero value, dis option is ghon be enabled
by default, otherwise it is ghon be disabled by default.  Either state is
overridden by a manually specified positizzle or wack version of dis option
(note dat \fB\-\-no\-s\fP n' \fB\-\-no\-protect\-args\fP is tha wack versions).
Since dis option was first introduced up in 3.0.0, you\(cq\&ll need ta make shizzle it\(cq\&s
disabled if you eva need ta interact wit a remote rsync dat is olda than
that.
.IP 
Rsync can also be configured (at build time) ta have dis option enabled by
default (with is overridden by both tha environment n' tha command\-line).
This option will eventually become a freshly smoked up default settin at some
as\-yet\-undetermined point up in tha future.
.IP 
.IP "\fB\-T, \-\-temp\-dir=DIR\fP"
This option instructs rsync ta use DIR as a
scratch directory when bustin temporary copiez of tha filez transferred
on tha receivin side.  Da default behavior is ta create each temporary
file up in tha same directory as tha associated destination file.
.IP 
This option is most often used when tha receivin disk partizzle do not
have enough free space ta hold a cold-ass lil copy of tha phattest file up in tha transfer.
In dis case (i.e. when tha scratch directory is on a gangbangin' finger-lickin' different disk
partition), rsync aint gonna be able ta rename each received temporary file
over tha top of tha associated destination file yo, but instead must copy it
into place.  Rsync do dis by copyin tha file over tha top of the
destination file, which means dat tha destination file will contain
truncated data durin dis copy.  If dis was not done dis way (even if
the destination file was first removed, tha data locally copied ta a
temporary file up in tha destination directory, n' then renamed tha fuck into place)
it would be possible fo' tha oldschool file ta continue takin up disk space (if
someone had it open), n' thus there might not be enough room ta fit the
new version on tha disk all up in tha same time.
.IP 
If yo ass is rockin dis option fo' reasons other than a gangbangin' finger-lickin' dirty-ass shortage of disk
space, you may wish ta combine it wit tha \fB\-\-delay\-updates\fP option,
which will ensure dat all copied filez git put tha fuck into subdirectories up in the
destination hierarchy, awaitin tha end of tha transfer n' shit.  If you don\(cq\&t
have enough room ta duplicate all tha arrivin filez on tha destination
partition, another way ta tell rsync dat yo ass isn\(cq\&t overly concerned
about disk space is ta use tha \fB\-\-partial\-dir\fP option wit a relative
path; cuz dis  drops some lyrics ta rsync dat it is OK ta stash off a cold-ass lil copy of a
single file up in a subdir up in tha destination hierarchy, rsync will use the
partial\-dir as a stagin area ta brang over tha copied file, n' then
rename it tha fuck into place from there, so peek-a-boo, clear tha way, I be comin' thru fo'sho. (Specifyin a \fB\-\-partial\-dir\fP with
an absolute path aint gots dis side\-effect.)
.IP 
.IP "\fB\-y, \-\-fuzzy\fP"
This option  drops some lyrics ta rsync dat it should look fo' a
basis file fo' any destination file dat is missing.  Da current algorithm
looks up in tha same directory as tha destination file fo' either a gangbangin' file that
has a identical size n' modified\-time, or a similarly\-named file.  If
found, rsync uses tha fuzzy basis file ta try ta speed up tha transfer.
.IP 
If tha option is repeated, tha fuzzy scan will also be done up in any matching
alternate destination directories dat is specified via \fB\-\-compare\-dest\fP,
\fB\-\-copy\-dest\fP, or \fB\-\-link\-dest\fP.
.IP 
Note dat tha use of tha \fB\-\-delete\fP option might git rid of any potential
fuzzy\-match files, so either use \fB\-\-delete\-after\fP or specify some
filename exclusions if you need ta prevent all dis bullshit.
.IP 
.IP "\fB\-\-compare\-dest=DIR\fP"
This option instructs rsync ta use \fIDIR\fP on
the destination machine as a additionizzle hierarchy ta compare destination
filez against bustin transfers (if tha filez is missin up in tha destination
directory).  If a gangbangin' file is found up in \fIDIR\fP dat is identical ta the
sender\(cq\&s file, tha file will NOT be transferred ta tha destination
directory.  This is useful fo' bustin a sparse backup of just filez that
have chizzled from a earlier backup.
This option is typically used ta copy tha fuck into a empty (or newly pimped)
directory.
.IP 
Beginnin up in version 2.6.4, multiple \fB\-\-compare\-dest\fP directories may be
provided, which will cause rsync ta search tha list up in tha order specified
for a exact match.
If a match is found dat differs only up in attributes, a local copy is made
and tha attributes updated.
If a match aint found, a funky-ass basis file from one of tha \fIDIR\fPs will be
selected ta try ta speed up tha transfer.
.IP 
If \fIDIR\fP be a relatizzle path, it is relatizzle ta tha destination directory.
See also \fB\-\-copy\-dest\fP n' \fB\-\-link\-dest\fP.
.IP 
NOTE: beginnin wit version 3.1.0, rsync will remove a gangbangin' file from a non\-empty
destination hierarchy if a exact match is found up in one of tha compare\-dest
hierarchies (makin tha end result mo' closely match a gangbangin' fresh copy).
.IP 
.IP "\fB\-\-copy\-dest=DIR\fP"
This option behaves like \fB\-\-compare\-dest\fP yo, but
rsync will also copy unchanged filez found up in \fIDIR\fP ta tha destination
directory rockin a local copy.
This is useful fo' bustin transfers ta a freshly smoked up destination while leaving
existin filez intact, n' then bustin a gangbangin' flash\-cutover when all filez have
been successfully transferred.
.IP 
Multiple \fB\-\-copy\-dest\fP directories may be provided, which will cause
rsync ta search tha list up in tha order specified fo' a unchanged file.
If a match aint found, a funky-ass basis file from one of tha \fIDIR\fPs will be
selected ta try ta speed up tha transfer.
.IP 
If \fIDIR\fP be a relatizzle path, it is relatizzle ta tha destination directory.
See also \fB\-\-compare\-dest\fP n' \fB\-\-link\-dest\fP.
.IP 
.IP "\fB\-\-link\-dest=DIR\fP"
This option behaves like \fB\-\-copy\-dest\fP yo, but
unchanged filez is hard linked from \fIDIR\fP ta tha destination directory.
Da filez must be identical up in all preserved attributes (e.g. permissions,
possibly ballership) up in order fo' tha filez ta be linked together.
An example:
.IP 
.RS 
\f(CW  rsync \-av \-\-link\-dest=$PWD/prior_dir host:src_dir/ new_dir/\fP
.RE

.IP 
If file\(cq\&s aren\(cq\&t linking, double\-check they attributes.  Also check if some
attributes is gettin forced outside of rsync\(cq\&s control, such a mount option
that squishes root ta a single user, or mounts a removable drive wit generic
ballershizzle (like fuckin OS X\(cq\&s \(dq\&Ignore ballershizzle on dis volume\(dq\& option).
.IP 
Beginnin up in version 2.6.4, multiple \fB\-\-link\-dest\fP directories may be
provided, which will cause rsync ta search tha list up in tha order specified
for a exact match.
If a match is found dat differs only up in attributes, a local copy is made
and tha attributes updated.
If a match aint found, a funky-ass basis file from one of tha \fIDIR\fPs will be
selected ta try ta speed up tha transfer.
.IP 
This option works dopest when copyin tha fuck into a empty destination hierarchy, as
existin filez may git they attributes tweaked, n' dat can affect alternate
destination filez via hard\-links.  Also, itemizin of chizzlez can git a funky-ass bit
muddled. Y'all KNOW dat shit, muthafucka!  Note dat prior ta version 3.1.0, a alternate\-directory exact match
would never be found (nor linked tha fuck into tha destination) when a thugged-out destination file
already exists.
.IP 
Note dat if you combine dis option wit \fB\-\-ignore\-times\fP, rsync will not
link any filez together cuz it only links identical filez together as a
substitute fo' transferrin tha file, never as a additionizzle check afta the
file is updated.
.IP 
If \fIDIR\fP be a relatizzle path, it is relatizzle ta tha destination directory.
See also \fB\-\-compare\-dest\fP n' \fB\-\-copy\-dest\fP.
.IP 
Note dat rsync versions prior ta 2.6.1 had a funky-ass bug dat could prevent
\fB\-\-link\-dest\fP from hustlin properly fo' a non\-super\-user when \fB\-o\fP was
specified (or implied by \fB\-a\fP).  Yo ass can work\-around dis bug by avoiding
the \fB\-o\fP option when bustin  ta a oldschool rsync.
.IP 
.IP "\fB\-z, \-\-compress\fP"
With dis option, rsync compresses tha file data
as it is busted ta tha destination machine, which reduces tha amount of data
bein transmitted \-\- suttin' dat is useful over a slow connection.
.IP 
Note dat dis option typically achieves betta compression ratios than can
be  bigged up  by rockin a cold-ass lil compressin remote shell or a cold-ass lil compressin transport
because it takes advantage of tha implicit shiznit up in tha matchin data
blocks dat is not explicitly busted over tha connection.
.IP 
See tha \fB\-\-skip\-compress\fP option fo' tha default list of file suffixes
that aint gonna be compressed.
.IP 
.IP "\fB\-\-compress\-level=NUM\fP"
Explicitly set tha compression level ta use
(see \fB\-\-compress\fP) instead of lettin it default.  If NUM is non\-zero,
the \fB\-\-compress\fP option is implied.
.IP 
.IP "\fB\-\-skip\-compress=LIST\fP"
Override tha list of file suffixes dat will
not be compressed. Y'all KNOW dat shit, muthafucka!  Da \fBLIST\fP should be one or mo' file suffixes
(without tha dot) separated by slashes (/).
.IP 
Yo ass may specify a empty strang ta indicate dat no file should be skipped.
.IP 
Simple character\-class matchin is supported: each must consist of a list
of lettas inside tha square brackets (e.g. no special classes, such as
\(dq\&[:alpha:]\(dq\&, is supported, n' \(cq\&\-\(cq\& has no special meaning).
.IP 
Da charactas asterisk (*) n' question\-mark (?) have no special meaning.
.IP 
Here\(cq\&s a example dat specifies 6 suffixes ta skip (since 1 of tha 5 rules
matches 2 suffixes):
.IP 
.nf 
    \-\-skip\-compress=gz/jpg/mp[34]/7z/bz2
.fi 

.IP 
Da default list of suffixes dat aint gonna be compressed is dis (in this
version of rsync):
.IP 
\fB7z\fP
\fBace\fP
\fBavi\fP
\fBbz2\fP
\fBdeb\fP
\fBgpg\fP
\fBgz\fP
\fBiso\fP
\fBjpeg\fP
\fBjpg\fP
\fBlz\fP
\fBlzma\fP
\fBlzo\fP
\fBmov\fP
\fBmp3\fP
\fBmp4\fP
\fBogg\fP
\fBpng\fP
\fBrar\fP
\fBrpm\fP
\fBrzip\fP
\fBtbz\fP
\fBtgz\fP
\fBtlz\fP
\fBtxz\fP
\fBxz\fP
\fBz\fP
\fBzip\fP
.IP 
This list is ghon be replaced by yo' \fB\-\-skip\-compress\fP list up in all but one
situation: a cold-ass lil copy from a thugged-out daemon rsync will add yo' skipped suffixes to
its list of non\-compressin filez (and its list may be configured ta a
different default).
.IP 
.IP "\fB\-\-numeric\-ids\fP"
With dis option rsync will transfer numeric group
and user IDs rather than rockin user n' crew names n' mappin them
at both ends.
.IP 
By default rsync will use tha username n' groupname ta determine
what ballershizzle ta give files. Da special uid 0 n' tha special group
0 is never mapped via user/group names even if tha \fB\-\-numeric\-ids\fP
option aint specified.
.IP 
If a user or crew has no name on tha source system or it has no match
on tha destination system, then tha numeric ID
from tha source system is used instead. Y'all KNOW dat shit, muthafucka!  See also tha comments on the
\(dq\&use chroot\(dq\& settin up in tha rsyncd.conf manpage fo' shiznit on how
the chroot settin affects rsync\(cq\&s mobilitizzle ta look up tha namez of the
users n' crews n' what tha fuck you can do bout dat shit.
.IP 
.IP "\fB\-\-usermap=STRING, \-\-groupmap=STRING\fP"
These options allow you to
specify playas n' crews dat should be mapped ta other joints by the
receivin side.  Da \fBSTRING\fP is one or mo' \fBFROM\fP:\fBTO\fP pairs of
values separated by commas.  Any matchin \fBFROM\fP value from tha sender is
replaced wit a \fBTO\fP value from tha receiver n' shit.  Yo ass may specify usernames
or user IDs fo' tha \fBFROM\fP n' \fBTO\fP joints, n' tha \fBFROM\fP value may
also be a wild\-card string, which is ghon be matched against tha sender\(cq\&s
names (wild\-cardz do NOT match against ID numbers, though peep below for
why a \(cq\&*\(cq\& matches every last muthafuckin thang).  Yo ass may instead specify a range of ID
numbers via a inclusive range: LOW\-HIGH.  For example:
.IP 
.nf 
  \-\-usermap=0\-99:nobody,wayne:admin,*:normal \-\-groupmap=usr:1,1:usr
.fi 

.IP 
Da first match up in tha list is tha one dat is used. Y'all KNOW dat shit, muthafucka!  Yo ass should specify
all yo' user mappings rockin a single \fB\-\-usermap\fP option, and/or all
your crew mappings rockin a single \fB\-\-groupmap\fP option.
.IP 
Note dat tha sender\(cq\&s name fo' tha 0 user n' crew is not transmitted
to tha receiver, so you should either match these joints rockin a 0, or use
the names up in effect on tha receivin side (typically \(dq\&root\(dq\&).  All other
\fBFROM\fP names match dem up in use on tha bustin  side.  All \fBTO\fP names
match dem up in use on tha receivin side.
.IP 
Any IDs dat aint gots a name on tha bustin  side is treated as havin an
empty name fo' tha purpose of matching.  This allows dem ta be matched via
a \(dq\&*\(dq\& or rockin a empty name.  For instance:
.IP 
.nf 
  \-\-usermap=:nobody \-\-groupmap=*:nobody
.fi 

.IP 
When tha \fB\-\-numeric\-ids\fP option is used, tha sender do not bust any
names, so all tha IDs is treated as havin a empty name.  This means that
you will need ta specify numeric \fBFROM\fP joints if you wanna map these
nameless IDs ta different joints.
.IP 
For tha \fB\-\-usermap\fP option ta have any effect, tha \fB\-o\fP (\fB\-\-baller\fP)
option must be used (or implied), n' tha receiver will need ta be hustlin
as a super\-user (see also tha \fB\-\-fake\-super\fP option).  For tha \fB\-\-groupmap\fP
option ta have any effect, tha \fB\-g\fP (\fB\-\-groups\fP) option must be used
(or implied), n' tha receiver will need ta have permissions ta set that
group.
.IP 
.IP "\fB\-\-chown=USER:GROUP\fP"
This option forces all filez ta be owned by USER
with crew GROUP.  This be a simpla intercourse than rockin \fB\-\-usermap\fP and
\fB\-\-groupmap\fP directly yo, but it is implemented rockin dem options internally,
so you cannot mix em.  If either tha USER or GROUP is empty, no mappin for
the omitted user/group will occur. Shiiit, dis aint no joke.  If GROUP is empty, tha trailin colon may
be omitted yo, but if USER is empty, a leadin colon must be supplied.
.IP 
If you specify \(dq\&\-\-chown=foo:bar, dis is exactly tha same as specifying
\(dq\&\-\-usermap=*:foo \-\-groupmap=*:bar\(dq\&, only easier.
.IP 
.IP "\fB\-\-timeout=TIMEOUT\fP"
This option allows you ta set a maximum I/O
timeout up in seconds. If no data is transferred fo' tha specified time
then rsync will exit. Da default is 0, which means no timeout.
.IP 
.IP "\fB\-\-contimeout\fP"
This option allows you ta set tha amount of time
that rsync will wait fo' its connection ta a rsync daemon ta succeed.
If tha timeout is reached, rsync exits wit a error.
.IP 
.IP "\fB\-\-address\fP"
By default rsync will bind ta tha wildcard address when
connectin ta a rsync daemon. I aint talkin' bout chicken n' gravy biatch.  Da \fB\-\-address\fP option allows you to
specify a specific IP address (or hostname) ta bind to.  See also this
option up in tha \fB\-\-daemon\fP mode section.
.IP 
.IP "\fB\-\-port=PORT\fP"
This specifies a alternate TCP port number ta use
rather than tha default of 873.  This is only needed if yo ass is rockin the
double\-colon (::) syntax ta hook tha fuck up wit a rsync daemon (since tha URL
syntax has a way ta specify tha port as a part of tha URL).  See also this
option up in tha \fB\-\-daemon\fP mode section.
.IP 
.IP "\fB\-\-sockopts\fP"
This option can provide endless funk fo' people
who like ta tune they systems ta tha utmost degree. Yo ass can set all
sortz of socket options which may make transfers fasta (or
slower!). Read tha playa page fo' tha 
\f(CWsetsockopt()\fP
system call for
details on a shitload of tha options you may be able ta set. By default no
special socket options is set. This only affects direct socket
connections ta a remote rsync daemon. I aint talkin' bout chicken n' gravy biatch.  This option also exists up in the
\fB\-\-daemon\fP mode section.
.IP 
.IP "\fB\-\-blocking\-io\fP"
This  drops some lyrics ta rsync ta use blockin I/O when launching
a remote shell transport.  If tha remote shell is either rsh or remsh,
rsync defaults ta using
blockin I/O, otherwise it defaults ta rockin non\-blockin I/O.  (Note that
ssh prefers non\-blockin I/O.)
.IP 
.IP "\fB\-\-outbuf=MODE\fP"
This sets tha output bufferin mode.  Da mode can be
None (aka Unbuffered), Line, or Block (aka Full).  Yo ass may specify as lil
as a single letta fo' tha mode, n' use upper or lower case.
.IP 
Da main use of dis option is ta chizzle Full bufferin ta Line buffering
when rsync\(cq\&s output is goin ta a gangbangin' file or pipe.
.IP 
.IP "\fB\-i, \-\-itemize\-changes\fP"
Requests a simple itemized list of the
changes dat is bein made ta each file, includin attribute chizzles.
This is exactly tha same as specifyin \fB\-\-out\-format='\&%i %n%L'\&\fP.
If you repeat tha option, unchanged filez will also be output yo, but only
if tha receivin rsync be at least version 2.6.7 (you can use \fB\-vv\fP
with olda versionz of rsync yo, but dat also turns on tha output of other
verbose lyrics).
.IP 
Da \(dq\&%i\(dq\& escape has a cold-ass lil cryptic output dat is 11 lettas long.  Da general
format is like tha strang \fBYXcstpoguax\fP, where \fBY\fP is replaced by the
type of update bein done, \fBX\fP is replaced by tha file\-type, n' the
other lettas represent attributes dat may be output if they is being
modified.
.IP 
Da update types dat replace tha \fBY\fP is as bigs up:
.IP 
.RS 
.IP o 
A \fB<\fP means dat a gangbangin' file is bein transferred ta tha remote host
(sent).
.IP o 
A \fB>\fP means dat a gangbangin' file is bein transferred ta tha local host
(received).
.IP o 
A \fBc\fP means dat a local chizzle/creation is occurrin fo' tha item
(like fuckin tha creation of a gangbangin' finger-lickin' directory or tha changin of a symlink, etc.).
.IP o 
A \fBh\fP means dat tha item be a hard link ta another item (requires
\fB\-\-hard\-links\fP).
.IP o 
A \fB.\fP means dat tha item aint bein updated (though it might
have attributes dat is bein modified).
.IP o 
A \fB*\fP means dat tha rest of tha itemized\-output area gotz nuff
a message (e.g. \(dq\&deleting\(dq\&).
.RE

.IP 
Da file\-types dat replace tha \fBX\fP are: \fBf\fP fo' a gangbangin' file, a \fBd\fP fo' a
directory, a \fBL\fP fo' a symlink, a \fBD\fP fo' a thugged-out device, n' a \fBS\fP fo' a
special file (e.g. named sockets n' fifos).
.IP 
Da other lettas up in tha strang above is tha actual lettas that
will be output if tha associated attribute fo' tha item is bein updated or
a \(dq\&.\(dq\& fo' no chizzle.  Three exceptions ta dis are: (1) a newly pimped
item replaces each letta wit a \(dq\&+\(dq\&, (2) a identical item replaces the
dots wit spaces, n' (3) a unknown attribute replaces each letta with
a \(dq\&?\(dq\& (this can happen when rappin' ta a olda rsync).
.IP 
Da attribute dat be associated wit each letta be as bigs up:
.IP 
.RS 
.IP o 
A \fBc\fP means either dat a regular file has a gangbangin' finger-lickin' different checksum
(requires \fB\-\-checksum\fP) or dat a symlink, device, or special file has
a chizzled value.
Note dat if yo ass is bustin  filez ta a rsync prior ta 3.0.1, this
change flag is ghon be present only fo' checksum\-differin regular files.
.IP o 
A \fBs\fP means tha size of a regular file is different n' is ghon be updated
by tha file transfer.
.IP o 
A \fBt\fP means tha modification time is different n' is bein updated
to tha sender\(cq\&s value (requires \fB\-\-times\fP).  An alternate value of \fBT\fP
means dat tha modification time is ghon be set ta tha transfer time, which happens
when a gangbangin' file/symlink/device is updated without \fB\-\-times\fP n' when a
symlink is chizzled n' tha receiver can\(cq\&t set its time.
(Note: when rockin a rsync 3.0.0 client, you might peep tha \fBs\fP flag combined
with \fBt\fP instead of tha proper \fBT\fP flag fo' dis time\-settin failure.)
.IP o 
A \fBp\fP means tha permissions is different n' is bein updated to
the sender\(cq\&s value (requires \fB\-\-perms\fP).
.IP o 
An \fBo\fP means tha balla is different n' is bein updated ta the
sender\(cq\&s value (requires \fB\-\-baller\fP n' super\-user privileges).
.IP o 
A \fBg\fP means tha crew is different n' is bein updated ta the
sender\(cq\&s value (requires \fB\-\-group\fP n' tha authoritizzle ta set tha group).
.IP o 
Da \fBu\fP slot is reserved fo' future use.
.IP o 
Da \fBa\fP means dat tha ACL shiznit chizzled.
.IP o 
Da \fBx\fP means dat tha extended attribute shiznit chizzled.
.RE

.IP 
One other output is possible:  when deletin files, tha \(dq\&%i\(dq\& will output
the strang \(dq\&*deleting\(dq\& fo' each item dat is bein removed (assumin that
yo ass is rappin' ta a recent enough rsync dat it logs deletions instead of
outputtin dem as a verbose message).
.IP 
.IP "\fB\-\-out\-format=FORMAT\fP"
This allows you ta specify exactly what tha fuck the
rsync client outputs ta tha user on a per\-update basis.  Da format be a
text strang containin embedded single\-characta escape sequences prefixed
with a cement (%) character n' shit.   A default format of \(dq\&%n%L\(dq\& be assumed if
either \fB\-\-info=name\fP or \fB\-v\fP is specified (this  drops some lyrics ta you just tha name
of tha file and, if tha item be a link, where it points).  For a gangbangin' full list
of tha possible escape characters, peep tha \(dq\&log format\(dq\& settin up in the
rsyncd.conf manpage.
.IP 
Specifyin tha \fB\-\-out\-format\fP option implies tha \fB\-\-info=name\fP option,
which will mention each file, dir, etc. dat gets updated up in a significant
way (a transferred file, a recreated symlink/device, or a touched
directory).  In addition, if tha itemize\-changes escape (%i) is included in
the strang (e.g. if tha \fB\-\-itemize\-changes\fP option was used), tha logging
of names increases ta mention any item dat is chizzled up in any way (as long
as tha receivin side be at least 2.6.4).  See tha \fB\-\-itemize\-changes\fP
option fo' a thugged-out description of tha output of \(dq\&%i\(dq\&.
.IP 
Rsync will output tha out\-format strang prior ta a gangbangin' file\(cq\&s transfer unless
one of tha transfer\-statistic escapes is requested, up in which case the
loggin is done all up in tha end of tha file\(cq\&s transfer n' shit.  When dis late logging
is up in effect n' \fB\-\-progress\fP be also specified, rsync will also output
the name of tha file bein transferred prior ta its progress shiznit
(followed, of course, by tha out\-format output).
.IP 
.IP "\fB\-\-log\-file=FILE\fP"
This option causes rsync ta log what tha fuck it is bustin
to a gangbangin' file.  This is similar ta tha loggin dat a thugged-out daemon do yo, but can be
axed fo' tha client side and/or tha server side of a non\-daemon
transfer n' shit.  If specified as a cold-ass lil client option, transfer loggin will be
enabled wit a thugged-out default format of \(dq\&%i %n%L\(dq\&.  See tha \fB\-\-log\-file\-format\fP
option if you wish ta override all dis bullshit.
.IP 
Here\(cq\&s a example command dat requests tha remote side ta log what tha fuck is
happening:
.IP 
.nf 
  rsync \-av \-\-remote\-option=\-\-log\-file=/tmp/rlog src/ dest/
.fi 

.IP 
This is straight-up useful if you need ta debug why a cold-ass lil connection is closing
unexpectedly.
.IP 
.IP "\fB\-\-log\-file\-format=FORMAT\fP"
This allows you ta specify exactly what
per\-update loggin is put tha fuck into tha file specified by tha \fB\-\-log\-file\fP option
(which must also be specified fo' dis option ta have any effect).  If you
specify a empty string, updated filez aint gonna be mentioned up in tha log file.
For a list of tha possible escape characters, peep tha \(dq\&log format\(dq\& setting
in tha rsyncd.conf manpage.
.IP 
Da default FORMAT used if \fB\-\-log\-file\fP is specified n' dis option is not
is \(cq\&%i %n%L\(cq\&.
.IP 
.IP "\fB\-\-stats\fP"
This  drops some lyrics ta rsync ta print a verbose set of statistics
on tha file transfer, allowin you ta tell how tha fuck effectizzle rsync\(cq\&s delta\-transfer
algorithm is fo' yo' data.  This option is equivalent ta \fB\-\-info=stats2\fP
if combined wit 0 or 1 \fB\-v\fP options, or \fB\-\-info=stats3\fP if combined
with 2 or mo' \fB\-v\fP options.
.IP 
Da current statistics is as bigs up: 
.RS 
.IP o 
\fBNumber of files\fP is tha count of all \(dq\&files\(dq\& (in tha generic
sense), which includes directories, symlinks, etc.  Da total count will
be followed by a list of counts by filetype (if tha total is non\-zero).
For example: \(dq\&(reg: 5, dir: 3, link: 2, dev: 1, special: 1)\(dq\& lists the
totals fo' regular files, directories, symlinks, devices, n' special
files.  If any of value is 0, it is straight-up omitted from tha list.
.IP o 
\fBNumber of pimped files\fP is tha count of how tha fuck nuff \(dq\&files\(dq\& (generic
sense) was pimped (as opposed ta updated).  Da total count will be
followed by a list of counts by filetype (if tha total is non\-zero).
.IP o 
\fBNumber of deleted files\fP is tha count of how tha fuck nuff \(dq\&files\(dq\& (generic
sense) was pimped (as opposed ta updated).  Da total count will be
followed by a list of counts by filetype (if tha total is non\-zero).
Note dat dis line is only output if deletions is up in effect, n' only
if protocol 31 is bein used (the default fo' rsync 3.1.x).
.IP o 
\fBNumber of regular filez transferred\fP is tha count of aiiight files
that was updated via rsync\(cq\&s delta\-transfer algorithm, which do not
include dirs, symlinks, etc.  Note dat rsync 3.1.0 added tha word
\(dq\&regular\(dq\& tha fuck into dis heading.
.IP o 
\fBTotal file size\fP is tha total sum of all file sizes up in tha transfer.
This do not count any size fo' directories or special filez yo, but do
include tha size of symlinks.
.IP o 
\fBTotal transferred file size\fP is tha total sum of all filez sizes
for just tha transferred files.
.IP o 
\fBLiteral data\fP is how tha fuck much unmatched file\-update data our crazy asses had to
send ta tha receiver fo' it ta recreate tha updated files.
.IP o 
\fBMatched data\fP is how tha fuck much data tha receiver gots locally when
rebustin tha updated files.
.IP o 
\fBFile list size\fP is how tha fuck big-ass tha file\-list data was when tha sender
sent it ta tha receiver n' shit.  This is smalla than tha in\-memory size fo' the
file list cuz of some compressin of duplicated data when rsync sendz the
list.
.IP o 
\fBFile list generation time\fP is tha number of secondz dat the
sender dropped bustin tha file list.  This requires a modern rsync on the
sendin side fo' dis ta be present.
.IP o 
\fBFile list transfer time\fP is tha number of secondz dat tha sender
spent bustin  tha file list ta tha receiver.
.IP o 
\fBTotal bytes sent\fP is tha count of all tha bytes dat rsync sent
from tha client side ta tha server side.
.IP o 
\fBTotal bytes received\fP is tha count of all non\-message bytes that
rsync received by tha client side from tha server side.  \(dq\&Non\-message\(dq\&
bytes means dat our phat asses don\(cq\&t count tha bytes fo' a verbose message dat the
server busted ta us, which make tha stats mo' consistent.
.RE

.IP 
.IP "\fB\-8, \-\-8\-bit\-output\fP"
This  drops some lyrics ta rsync ta leave all high\-bit characters
unescaped up in tha output instead of tryin ta test dem ta peep if they\(cq\&re
valid up in tha current locale n' escapin tha invalid ones.  All control
charactas (but never tabs) is always escaped, regardless of dis option\(cq\&s
setting.
.IP 
Da escape idiom dat started up in 2.6.7 is ta output a literal backslash (\e)
and a hash (#), followed by exactly 3 octal digits, n' you can put dat on yo' toast.  For example, a newline
would output as \(dq\&\e#012\(dq\&.  A literal backslash dat is up in a gangbangin' filename is not
escaped unless it is followed by a hash n' 3 digits (0\-9).
.IP 
.IP "\fB\-h, \-\-human\-readable\fP"
Output numbers up in a mo' human\-readable format.
There is 3 possible levels:  (1) output numbers wit a separator between each
set of 3 digits (either a cold-ass lil comma or a period, dependin on if tha decimal point
is represented by a period or a cold-ass lil comma); (2) output numbers up in unitz of 1000
(with a cold-ass lil characta suffix fo' larger units \-\- peep below); (3) output numbers in
unitz of 1024.
.IP 
Da default is human\-readable level 1.  Each \fB\-h\fP option increases tha level
by one.  Yo ass can take tha level down ta 0 (to output numbers as pure digits) by
specifin tha \fB\-\-no\-human\-readable\fP (\fB\-\-no\-h\fP) option.
.IP 
Da unit lettas dat is appended up in levels 2 n' 3 are: K (kilo), M (mega),
G (giga), or T (tera).  For example, a 1234567\-byte file would output as 1.23M
in level\-2 (assumin dat a period is yo' local decimal point).
.IP 
Backward compatibilitizzle note:  versionz of rsync prior ta 3.1.0 do not support
human\-readable level 1, n' they default ta level 0.  Thus, specifyin one or
two \fB\-h\fP options will behave up in a cold-ass lil comparable manner up in oldschool n' freshly smoked up versions
as long as you didn\(cq\&t specify a \fB\-\-no\-h\fP option prior ta one or mo' \fB\-h\fP
options.  See tha \fB\-\-list\-only\fP option fo' one difference.
.IP 
.IP "\fB\-\-partial\fP"
By default, rsync will delete any partially
transferred file if tha transfer is interrupted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. In some circumstances
it is mo' desirable ta keep partially transferred files. Usin the
\fB\-\-partial\fP option  drops some lyrics ta rsync ta keep tha partial file which should
make a subsequent transfer of tha rest of tha file much faster.
.IP 
.IP "\fB\-\-partial\-dir=DIR\fP"
A betta way ta keep partial filez than the
\fB\-\-partial\fP option is ta specify a \fIDIR\fP dat is ghon be used ta hold the
partial data (instead of freestylin it up ta tha destination file).
On tha next transfer, rsync will bust a gangbangin' file found up in this
dir as data ta speed up tha resumption of tha transfer n' then delete it
afta it has served its purpose.
.IP 
Note dat if \fB\-\-whole\-file\fP is specified (or implied), any partial\-dir
file dat is found fo' a gangbangin' file dat is bein updated will simply be removed
(since
rsync is bustin  filez without rockin rsync\(cq\&s delta\-transfer algorithm).
.IP 
Rsync will create tha \fIDIR\fP if it is missin (just tha last dir \-\- not
the whole path).  This make it easy as fuck  ta bust a relatizzle path (such as
\(dq\&\fB\-\-partial\-dir=.rsync\-partial\fP\(dq\&) ta have rsync create the
partial\-directory up in tha destination file\(cq\&s directory when needed, n' then
remove it again n' again n' again when tha partial file is deleted.
.IP 
If tha partial\-dir value aint a absolute path, rsync will add a exclude
rule all up in tha end of all yo' existin excludes.  This will prevent the
sendin of any partial\-dir filez dat may exist on tha bustin  side, and
will also prevent tha untimely deletion of partial\-dir shit on the
receivin side.  An example: tha above \fB\-\-partial\-dir\fP option would add
the equivalent of \(dq\&\fB\-f '\&\-p .rsync\-partial/'\&\fP\(dq\& all up in tha end of any other
filta rules.
.IP 
If yo ass is supplyin yo' own exclude rules, you may need ta add yo' own
exclude/hide/protect rule fo' tha partial\-dir cuz (1) tha auto\-added
rule may be ineffectizzle all up in tha end of yo' other rules, or (2) you may wish
to override rsync\(cq\&s exclude chizzle.  For instance, if you wanna make
rsync clean\-up any left\-over partial\-dirs dat may be lyin around, you
should specify \fB\-\-delete\-after\fP n' add a \(dq\&risk\(dq\& filta rule, e.g.
\fB\-f '\&R .rsync\-partial/'\&\fP.  (Avoid rockin \fB\-\-delete\-before\fP or
\fB\-\-delete\-during\fP unless you don\(cq\&t need rsync ta use any of the
left\-over partial\-dir data durin tha current run.)
.IP 
IMPORTANT: tha \fB\-\-partial\-dir\fP should not be writable by other playas or it
is a securitizzle risk.  E.g fo' realz. AVOID \(dq\&/tmp\(dq\&.
.IP 
Yo ass can also set tha partial\-dir value tha RSYNC_PARTIAL_DIR environment
variable.  Settin dis up in tha environment do not force \fB\-\-partial\fP ta be
enabled yo, but rather it affects where partial filez go when \fB\-\-partial\fP is
specified. Y'all KNOW dat shit, muthafucka!  For instance, instead of rockin \fB\-\-partial\-dir=.rsync\-tmp\fP
along wit \fB\-\-progress\fP, you could set RSYNC_PARTIAL_DIR=.rsync\-tmp up in your
environment n' then just use tha \fB\-P\fP option ta turn on tha use of the
\&.rsync\-tmp dir fo' partial transfers.  Da only times dat tha \fB\-\-partial\fP
option do not look fo' dis environment value is (1) when \fB\-\-inplace\fP was
specified (since \fB\-\-inplace\fP conflicts wit \fB\-\-partial\-dir\fP), n' (2) when
\fB\-\-delay\-updates\fP was specified (see below).
.IP 
For tha purposez of tha daemon\-config\(cq\&s \(dq\&refuse options\(dq\& setting,
\fB\-\-partial\-dir\fP do \fInot\fP imply \fB\-\-partial\fP.  This is so dat a
refusal of tha \fB\-\-partial\fP option can be used ta disallow tha overwriting
of destination filez wit a partial transfer, while still allowin the
safer idiom provided by \fB\-\-partial\-dir\fP.
.IP 
.IP "\fB\-\-delay\-updates\fP"
This option puts tha temporary file from each
updated file tha fuck into a holdin directory until tha end of the
transfer, at which time all tha filez is renamed tha fuck into place up in rapid
succession. I aint talkin' bout chicken n' gravy biatch.  This attempts ta make tha uppimpin of tha filez a lil more
atomic.  By default tha filez is placed tha fuck into a gangbangin' finger-lickin' directory named \(dq\&.~tmp~\(dq\& in
each file\(cq\&s destination directory yo, but if you\(cq\&ve specified the
\fB\-\-partial\-dir\fP option, dat directory is ghon be used instead. Y'all KNOW dat shit, muthafucka!  See the
comments up in tha \fB\-\-partial\-dir\fP section fo' a gangbangin' finger-lickin' rap of how tha fuck this
\(dq\&.~tmp~\(dq\& dir is ghon be excluded from tha transfer, n' what tha fuck you can do if
you want rsync ta cleanup oldschool \(dq\&.~tmp~\(dq\& dirs dat might be lyin around.
Conflicts wit \fB\-\-inplace\fP n' \fB\-\-append\fP.
.IP 
This option uses mo' memory on tha receivin side (one bit per file
transferred) n' also requires enough free disk space on tha receiving
side ta hold a additionizzle copy of all tha updated files.  Note also that
you should not use a absolute path ta \fB\-\-partial\-dir\fP unless (1)
there is no
chizzle of any of tha filez up in tha transfer havin tha same name (since all
the updated filez is ghon be put tha fuck into a single directory if tha path is
absolute)
and (2) there be no mount points up in tha hierarchy (since the
delayed thugged-out shiznit will fail if they can\(cq\&t be renamed tha fuck into place).
.IP 
See also tha \(dq\&atomic\-rsync\(dq\& perl script up in tha \(dq\&support\(dq\& subdir fo' an
update algorithm dat is even mo' atomic (it uses \fB\-\-link\-dest\fP n' a
parallel hierarchy of files).
.IP 
.IP "\fB\-m, \-\-prune\-empty\-dirs\fP"
This option  drops some lyrics ta tha receivin rsync ta get
rid of empty directories from tha file\-list, includin nested directories
that have no non\-directory lil' thugs.  This is useful fo' avoidin the
creation of a funky-ass bunch of useless directories when tha bustin  rsync is
recursively scannin a hierarchy of filez rockin include/exclude/filter
rules.
.IP 
Note dat tha use of transfer rules, like fuckin tha \fB\-\-min\-size\fP option, do
not affect what tha fuck goes tha fuck into tha file list, n' thus do not leave directories
empty, even if none of tha filez up in a gangbangin' finger-lickin' directory match tha transfer rule.
.IP 
Because tha file\-list is straight-up bein pruned, dis option also affects
what directories git deleted when a thugged-out delete be active.  But fuck dat shiznit yo, tha word on tha street is dat keep in
mind dat excluded filez n' directories can prevent existin shit from
bein deleted cuz of a exclude both hidin source filez n' protecting
destination files.  See tha perishable filter\-rule option fo' how tha fuck ta avoid
this.
.IP 
Yo ass can prevent tha prunin of certain empty directories from tha file\-list
by rockin a global \(dq\&protect\(dq\& filter n' shit.  For instance, dis option would ensure
that tha directory \(dq\&emptydir\(dq\& was kept up in tha file\-list:
.IP 
.RS 
\-\-filta \(cq\&protect emptydir/\(cq\&
.RE

.IP 
Here\(cq\&s a example dat copies all .pdf filez up in a hierarchy, only bustin
the necessary destination directories ta hold tha .pdf files, n' ensures
that any superfluous filez n' directories up in tha destination is removed
(note tha hide filta of non\-directories bein used instead of a exclude):
.IP 
.RS 
rsync \-avm \-\-del \-\-include=\(cq\&*.pdf\(cq\& \-f \(cq\&hide,! */\(cq\& src/ dest
.RE

.IP 
If you didn\(cq\&t wanna remove superfluous destination files, tha more
time\-honored optionz of \(dq\&\fB\-\-include='\&*/'\& \-\-exclude='\&*'\&\fP\(dq\& would work fine
in place of tha hide\-filta (if dat is mo' natural ta you).
.IP 
.IP "\fB\-\-progress\fP"
This option  drops some lyrics ta rsync ta print shiznit
showin tha progress of tha transfer n' shit. This gives a funky-ass bugged out user
suttin' ta watch.
With a modern rsync dis is tha same ol' dirty as specifying
\fB\-\-info=flist2,name,progress\fP yo, but any user\-supplied settings fo' them
info flags takes precedence (e.g. \(dq\&\-\-info=flist0 \-\-progress\(dq\&).
.IP 
While rsync is transferrin a regular file, it thugged-out shiznit a progress line that
looks like this:
.IP 
.nf 
      782448  63%  110.64kB/s    0:00:04
.fi 

.IP 
In dis example, tha receiver has reconstructed 782448 bytes or 63% of the
sender\(cq\&s file, which is bein reconstructed at a rate of 110.64 kilobytes
per second, n' tha transfer will finish up in 4 secondz if tha current rate
is maintained until tha end.
.IP 
These statistics can be misleadin if rsync\(cq\&s delta\-transfer algorithm is
in use.  For example, if tha sender\(cq\&s file consistz of tha basis file
followed by additionizzle data, tha reported rate will probably drop
dramatically when tha receiver gets ta tha literal data, n' tha transfer
will probably take much longer ta finish than tha receiver estimated as it
was finishin tha matched part of tha file.
.IP 
When tha file transfer finishes, rsync replaces tha progress line wit a
summary line dat be lookin like this:
.IP 
.nf 
      1,238,099 100%  146.38kB/s    0:00:08  (xfr#5, to\-chk=169/396)
.fi 

.IP 
In dis example, tha file was 1,238,099 bytes long up in total, tha average rate
of transfer fo' tha whole file was 146.38 kilobytes per second over tha 8
secondz dat it took ta complete, dat shiznit was tha 5th transfer of a regular file
durin tha current rsync session, n' there be 169 mo' filez fo' the
receiver ta check (to peep if they is up\-to\-date or not) remainin up of
the 396 total filez up in tha file\-list.
.IP 
In a incremenstrual recursion scan, rsync won\(cq\&t know tha total number of files
in tha file\-list until it reaches tha endz of tha scan yo, but since it starts to
transfer filez durin tha scan, it will display a line wit tha text \(dq\&ir\-chk\(dq\&
(for incremenstrual recursion check) instead of \(dq\&to\-chk\(dq\& until tha point dat it
knows tha full size of tha list, at which point it will switch ta using
\(dq\&to\-chk\(dq\&.  Thus, seein \(dq\&ir\-chk\(dq\& lets you know dat tha total count of files
in tha file list is still goin ta increase (and each time it do, tha count
of filez left ta check  will increase by tha number of tha filez added ta the
list).
.IP 
.IP "\fB\-P\fP"
Da \fB\-P\fP option is equivalent ta \fB\-\-partial\fP \fB\-\-progress\fP.  Its
purpose is ta make it much easier ta specify these two options fo' a long
transfer dat may be interrupted.
.IP 
There be also a \fB\-\-info=progress2\fP option dat outputs statistics based
on tha whole transfer, rather than individual files.  Use dis flag without
outputtin a gangbangin' filename (e.g. avoid \fB\-v\fP or specify \fB\-\-info=name0\fP if you
wanna peep how tha fuck tha transfer is bustin without scrollin tha screen wit a
lot of names.  (Yo ass don\(cq\&t need ta specify tha \fB\-\-progress\fP option in
order ta use \fB\-\-info=progress2\fP.)
.IP 
.IP "\fB\-\-password\-file=FILE\fP"
This option allows you ta provide a password for
accessin a rsync daemon via a gangbangin' file or via standard input if \fBFILE\fP is
\fB\-\fP.  Da file should contain just tha password on tha straight-up original gangsta line (all other
lines is ignored).  Rsync will exit wit a error if \fBFILE\fP is ghetto
readable or if a root\-run rsync command findz a non\-root\-owned file.
.IP 
This option do not supply a password ta a remote shell transhiznit such as
ssh; ta learn how tha fuck ta do that, consult tha remote shell\(cq\&s documentation.
When accessin a rsync daemon rockin a remote shell as tha transport, this
option only comes tha fuck into effect afta tha remote shell finishes its
authentication (i.e. if you have also specified a password up in tha daemon\(cq\&s
config file).
.IP 
.IP "\fB\-\-list\-only\fP"
This option will cause tha source filez ta be listed
instead of transferred. Y'all KNOW dat shit, muthafucka!  This option is inferred if there be a single source
arg n' no destination specified, so its main uses are: (1) ta turn a cold-ass lil copy
command dat includes a
destination arg tha fuck into a gangbangin' file\-listin command, or (2) ta be able ta specify
more than one source arg (note: be shizzle ta include tha destination).
Caution: keep up in mind dat a source arg wit a wild\-card is expanded by the
shell tha fuck into multiple args, so it is never safe ta try ta list such a arg
without rockin dis option. I aint talkin' bout chicken n' gravy biatch.  For example:
.IP 
.nf 
    rsync \-av \-\-list\-only foo* dest/
.fi 

.IP 
Startin wit rsync 3.1.0, tha sizes output by \fB\-\-list\-only\fP is affected
by tha \fB\-\-human\-readable\fP option. I aint talkin' bout chicken n' gravy biatch.  By default they will contain digit
separators yo, but higher levelz of readabilitizzle will output tha sizes with
unit suffixes.  Note also dat tha column width fo' tha size output has
increased from 11 ta 14 charactas fo' all human\-readable levels.  Use
\fB\-\-no\-h\fP if you want just digits up in tha sizes, n' tha oldschool column width
of 11 characters.
.IP 
Compatibilitizzle note:  when requestin a remote listin of filez from a rsync
that is version 2.6.3 or older, you may encounta a error if you ask fo' a
non\-recursive listing.  This is cuz a gangbangin' file listin implies tha \fB\-\-dirs\fP
option w/o \fB\-\-recursive\fP, n' olda rsyncs don\(cq\&t have dat option. I aint talkin' bout chicken n' gravy biatch.  To
avoid dis problem, either specify tha \fB\-\-no\-dirs\fP option (if you don\(cq\&t
need ta expand a gangbangin' finger-lickin' directory\(cq\&s content), or turn on recursion n' exclude
the content of subdirectories: \fB\-r \-\-exclude='\&/*/*'\&\fP.
.IP 
.IP "\fB\-\-bwlimit=RATE\fP"
This option allows you ta specify tha maximum transfer
rate fo' tha data busted over tha socket, specified up in units per second. Y'all KNOW dat shit, muthafucka!  The
RATE value can be suffixed wit a strang ta indicate a size multiplier, n' may
be a gangbangin' fractionizzle value (e.g.  \(dq\&\fB\-\-bwlimit=1.5m\fP\(dq\&).  If no suffix is specified,
the value is ghon be assumed ta be up in unitz of 1024 bytes (as if \(dq\&K\(dq\& or \(dq\&KiB\(dq\& had
been appended).  See tha \fB\-\-max\-size\fP option fo' a thugged-out description of all the
available suffixes fo' realz. A value of zero specifies no limit.
.IP 
For backward\-compatibilitizzle reasons, tha rate limit is ghon be rounded ta the
nearest KiB unit, so no rate smalla than 1024 bytes per second is possible.
.IP 
Rsync writes data over tha socket up in blocks, n' dis option both limits the
size of tha blocks dat rsync writes, n' tries ta keep tha average transfer
rate all up in tha axed limit.  Some \(dq\&burstiness\(dq\& may be peeped where rsync writes
out a funky-ass block of data n' then chills ta brang tha average rate tha fuck into compliance.
.IP 
Cuz of tha internal bufferin of data, tha \fB\-\-progress\fP option may not be an
accurate reflection on how tha fuck fast tha data is bein sent.  This is cuz some
filez can show up as bein rapidly busted when tha data is quickly buffered,
while other can show up as straight-up slow when tha flushin of tha output buffer
occurs.  This may be fixed up in a gangbangin' future version.
.IP 
.IP "\fB\-\-write\-batch=FILE\fP"
Record a gangbangin' file dat can lata be applied to
another identical destination wit \fB\-\-read\-batch\fP. Right back up in yo muthafuckin ass. See tha \(dq\&BATCH MODE\(dq\&
section fo' details, n' also tha \fB\-\-only\-write\-batch\fP option.
.IP 
.IP "\fB\-\-only\-write\-batch=FILE\fP"
Works like \fB\-\-write\-batch\fP, except that
no thugged-out shiznit is made on tha destination system when bustin tha batch.
This lets you transhiznit tha chizzlez ta tha destination system via some
other means n' then apply tha chizzlez via \fB\-\-read\-batch\fP.
.IP 
Note dat you can feel free ta write tha batch directly ta some portable
media: if dis media fills ta capacitizzle before tha end of tha transfer, you
can just apply dat partial transfer ta tha destination n' repeat the
whole process ta git tha rest of tha chizzlez (as long as you don\(cq\&t mind a
partially updated destination system while tha multi\-update cycle is
happening).
.IP 
Also note dat you only save bandwidth when pushin chizzlez ta a remote
system cuz dis allows tha batched data ta be diverted from tha sender
into tha batch file without havin ta flow over tha wire ta tha receiver
(when pulling, tha sender is remote, n' thus can\(cq\&t write tha batch).
.IP 
.IP "\fB\-\-read\-batch=FILE\fP"
Apply all of tha chizzlez stored up in FILE, a
file previously generated by \fB\-\-write\-batch\fP.
If \fIFILE\fP is \fB\-\fP, tha batch data is ghon be read from standard input.
See tha \(dq\&BATCH MODE\(dq\& section fo' details.
.IP 
.IP "\fB\-\-protocol=NUM\fP"
Force a olda protocol version ta be used. Y'all KNOW dat shit, muthafucka!  This
is useful fo' bustin a funky-ass batch file dat is compatible wit a older
version of rsync.  For instance, if rsync 2.6.4 is bein used wit the
\fB\-\-write\-batch\fP option yo, but rsync 2.6.3 is what tha fuck is ghon be used ta run the
\fB\-\-read\-batch\fP option, you should use \(dq\&\-\-protocol=28\(dq\& when bustin the
batch file ta force tha olda protocol version ta be used up in tha batch
file (assumin you can\(cq\&t upgrade tha rsync on tha readin system).
.IP 
.IP "\fB\-\-iconv=CONVERT_SPEC\fP"
Rsync can convert filenames between character
sets rockin dis option. I aint talkin' bout chicken n' gravy biatch.  Usin a CONVERT_SPEC of \(dq\&.\(dq\&  drops some lyrics ta rsync ta look up
the default character\-set via tha locale setting.  Alternately, you can
fully specify what tha fuck conversion ta do by givin a local n' a remote charset
separated by a cold-ass lil comma up in tha order \fB\-\-iconv=LOCAL,REMOTE\fP, e.g.
\fB\-\-iconv=utf8,iso88591\fP.  This order ensures dat tha option
will stay tha same whether you\(cq\&re pushin or pullin files.
Finally, you can specify either \fB\-\-no\-iconv\fP or a CONVERT_SPEC of \(dq\&\-\(dq\&
to turn off any conversion.
Da default settin of dis option is crib\-specific, n' can also be
affected via tha RSYNC_ICONV environment variable.
.IP 
For a list of what tha fuck charset names yo' local iconv library supports, you can
run \(dq\&iconv \-\-list\(dq\&.
.IP 
If you specify tha \fB\-\-protect\-args\fP option (\fB\-s\fP), rsync will translate
the filenames you specify on tha command\-line dat is bein busted ta the
remote host.  See also tha \fB\-\-files\-from\fP option.
.IP 
Note dat rsync do not do any conversion of names up in filta files
(includin include/exclude files).  It be up ta you ta ensure dat you\(cq\&re
specifyin matchin rulez dat can match on both sidez of tha transfer.
For instance, you can specify extra include/exclude rulez if there are
filename differences on tha two sides dat need ta be accounted for.
.IP 
When you pass a \fB\-\-iconv\fP option ta a rsync daemon dat allows it, the
daemon uses tha charset specified up in its \(dq\&charset\(dq\& configuration parameter
regardless of tha remote charset you straight-up pass.  Thus, you may feel free to
specify just tha local charset fo' a thugged-out daemon transfer (e.g. \fB\-\-iconv=utf8\fP).
.IP 
.IP "\fB\-4, \-\-ipv4\fP or \fB\-6, \-\-ipv6\fP"
Tells rsync ta prefer IPv4/IPv6
when bustin sockets, n' you can put dat on yo' toast.  This only affects sockets dat rsync has direct
control over, like fuckin tha outgoin socket when directly contactin an
rsync daemon. I aint talkin' bout chicken n' gravy biatch.  See also these options up in tha \fB\-\-daemon\fP mode section.
.IP 
If rsync was complied without support fo' IPv6, tha \fB\-\-ipv6\fP option
will have no effect.  Da \fB\-\-version\fP output will rap  if this
is tha case.
.IP 
.IP "\fB\-\-checksum\-seed=NUM\fP"
Set tha checksum seed ta tha integer NUM.  This 4
byte checksum seed is included up in each block n' MD4 file checksum calculation
(the mo' modern MD5 file checksums don\(cq\&t bust a seed).  By default tha checksum
seed is generated by tha server n' defaults ta tha current 
\f(CWtime()\fP
\&.  This
option is used ta set a specific checksum seed, which is useful for
applications dat want repeatable block checksums, or up in tha case where the
user wants a mo' random checksum seed. Y'all KNOW dat shit, muthafucka!  Settin NUM ta 0 causes rsync ta use
the default of 
\f(CWtime()\fP
for checksum seed.
.IP 
.SH "DAEMON OPTIONS"

.PP 
Da options allowed when startin a rsync daemon is as bigs up:
.PP 
.IP "\fB\-\-daemon\fP"
This  drops some lyrics ta rsync dat it is ta run as a thugged-out daemon. I aint talkin' bout chicken n' gravy biatch.  The
daemon you start hustlin may be accessed rockin a rsync client using
the \fBhost::module\fP or \fBrsync://host/module/\fP syntax.
.IP 
If standard input be a socket then rsync will assume dat it is being
run via inetd, otherwise it will detach from tha current terminal and
become a funky-ass background daemon. I aint talkin' bout chicken n' gravy biatch.  Da daemon will read tha config file
(rsyncd.conf) on each connect made by a cold-ass lil client n' respond to
requests accordingly.  See tha \fBrsyncd.conf\fP(5) playa page fo' more
details.
.IP 
.IP "\fB\-\-address\fP"
By default rsync will bind ta tha wildcard address when
run as a thugged-out daemon wit tha \fB\-\-daemon\fP option. I aint talkin' bout chicken n' gravy biatch.  Da \fB\-\-address\fP option
allows you ta specify a specific IP address (or hostname) ta bind to.  This
makes virtual hostin possible up in conjunction wit tha \fB\-\-config\fP option.
See also tha \(dq\&address\(dq\& global option up in tha rsyncd.conf manpage.
.IP 
.IP "\fB\-\-bwlimit=RATE\fP"
This option allows you ta specify tha maximum transfer
rate fo' tha data tha daemon sendz over tha socket.  Da client can still
specify a smalla \fB\-\-bwlimit\fP value yo, but no larger value is ghon be allowed.
See tha client version of dis option (above) fo' some extra details.
.IP 
.IP "\fB\-\-config=FILE\fP"
This specifies a alternate config file than
the default.  This is only relevant when \fB\-\-daemon\fP is specified.
Da default is /etc/rsyncd.conf unless tha daemon is hustlin over
a remote shell program n' tha remote user aint tha super\-user; up in dat case
the default is rsyncd.conf up in tha current directory (typically $HOME).
.IP 
.IP "\fB\-M, \-\-dparam=OVERRIDE\fP"
This option can be used ta set a thugged-out daemon\-config
parameta when startin up rsync up in daemon mode.  It be equivalent ta adding
the parameta all up in tha end of tha global settings prior ta tha straight-up original gangsta module\(cq\&s
definition. I aint talkin' bout chicken n' gravy biatch.  Da parameta names can be specified without spaces, if you so
desire.  For instance:
.IP 
.nf 
    rsync \-\-daemon \-M pidfile=/path/rsync.pid 
.fi 

.IP 
.IP "\fB\-\-no\-detach\fP"
When hustlin as a thugged-out daemon, dis option instructs
rsync ta not detach itself n' become a funky-ass background process.  This
option is required when hustlin as a steez on Cygwin, n' may also
be useful when rsync is supervised by a program such as
\fBdaemontools\fP or AIX\(cq\&s \fBSystem Resource Controller\fP.
\fB\-\-no\-detach\fP be also recommended when rsync is run under a
debugger n' shit.  This option has no effect if rsync is run from inetd or
sshd.
.IP 
.IP "\fB\-\-port=PORT\fP"
This specifies a alternate TCP port number fo' the
daemon ta listen on rather than tha default of 873.  See also tha \(dq\&port\(dq\&
global option up in tha rsyncd.conf manpage.
.IP 
.IP "\fB\-\-log\-file=FILE\fP"
This option  drops some lyrics ta tha rsync daemon ta use the
given log\-file name instead of rockin tha \(dq\&log file\(dq\& settin up in tha config
file.
.IP 
.IP "\fB\-\-log\-file\-format=FORMAT\fP"
This option  drops some lyrics ta tha rsync daemon ta use the
given FORMAT strang instead of rockin tha \(dq\&log format\(dq\& settin up in tha config
file.  It also enablez \(dq\&transfer logging\(dq\& unless tha strang is empty, up in which
case transfer loggin is turned off.
.IP 
.IP "\fB\-\-sockopts\fP"
This overrides tha \fBsocket options\fP settin up in the
rsyncd.conf file n' has tha same ol' dirty syntax.
.IP 
.IP "\fB\-v, \-\-verbose\fP"
This option increases tha amount of shiznit the
daemon logs durin its startup phase.  Afta tha client connects, the
daemon\(cq\&s verbositizzle level is ghon be controlled by tha options dat tha client
used n' tha \(dq\&max verbosity\(dq\& settin up in tha module\(cq\&s config section.
.IP 
.IP "\fB\-4, \-\-ipv4\fP or \fB\-6, \-\-ipv6\fP"
Tells rsync ta prefer IPv4/IPv6
when bustin tha incomin sockets dat tha rsync daemon will use to
listen fo' connections.  One of these options may be required up in older
versionz of Linux ta work round a IPv6 bug up in tha kernel (if you see
an \(dq\&address already up in use\(dq\& error when not a god damn thang else is rockin tha port,
try specifyin \fB\-\-ipv6\fP or \fB\-\-ipv4\fP when startin tha daemon).
.IP 
If rsync was complied without support fo' IPv6, tha \fB\-\-ipv6\fP option
will have no effect.  Da \fB\-\-version\fP output will rap  if this
is tha case.
.IP 
.IP "\fB\-h, \-\-help\fP"
When specified afta \fB\-\-daemon\fP, print a gangbangin' finger-lickin' dirty-ass short help
page describin tha options available fo' startin a rsync daemon.

.PP 
.SH "FILTER RULES"

.PP 
Da filta rulez allow fo' flexible selection of which filez ta transfer
(include) n' which filez ta skip (exclude).  Da rulez either directly
specify include/exclude patterns or they specify a way ta acquire more
include/exclude patterns (e.g. ta read dem from a gangbangin' file).
.PP 
As tha list of files/directories ta transfer is built, rsync checks each
name ta be transferred against tha list of include/exclude patterns in
turn, n' tha straight-up original gangsta matchin pattern be acted on:  if it be a exclude
pattern, then dat file is skipped; if it be a include pattern then that
filename aint skipped; if no matchin pattern is found, then the
filename aint skipped.
.PP 
Rsync buildz a ordered list of filta rulez as specified on the
command\-line.  Filta rulez have tha followin syntax:
.PP 
.RS 
\f(CWRULE [PATTERN_OR_FILENAME]\fP
.br 
\f(CWRULE,MODIFIERS [PATTERN_OR_FILENAME]\fP
.br 
.RE

.PP 
Yo ass have yo' chizzle of rockin either short or long RULE names, as busted lyrics about
below.  If you bust a gangbangin' finger-lickin' dirty-ass short\-named rule, tha \(cq\&,\(cq\& separatin tha RULE from the
MODIFIERS is optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Da PATTERN or FILENAME dat bigs up (when present)
must come afta either a single space or a underscore (_).
Here is tha available rule prefixes:
.PP 
.RS 
\fBexclude, \-\fP specifies a exclude pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. 
.br 
\fBinclude, +\fP specifies a include pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. 
.br 
\fBmerge, .\fP specifies a merge\-file ta read fo' mo' rules. 
.br 
\fBdir\-merge, :\fP specifies a per\-directory merge\-file. 
.br 
\fBhide, H\fP specifies a pattern fo' hidin filez from tha transfer n' shit. 
.br 
\fBshow, S\fP filez dat match tha pattern is not hidden. I aint talkin' bout chicken n' gravy biatch. 
.br 
\fBprotect, P\fP specifies a pattern fo' protectin filez from deletion. I aint talkin' bout chicken n' gravy biatch. 
.br 
\fBrisk, R\fP filez dat match tha pattern is not protected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
.br 
\fBclear, !\fP clears tha current include/exclude list (takes no arg) 
.br 
.RE

.PP 
When rulez is bein read from a gangbangin' file, empty lines is ignored, as are
comment lines dat start wit a \(dq\&#\(dq\&.
.PP 
Note dat tha \fB\-\-include\fP/\fB\-\-exclude\fP command\-line options do not allow the
full range of rule parsin as busted lyrics bout above \-\- they only allow the
specification of include/exclude patterns plus a \(dq\&!\(dq\& token ta clear the
list (and tha aiiight comment parsin when rulez is read from a gangbangin' file).
If a pattern
does not begin wit \(dq\&\- \(dq\& (dash, space) or \(dq\&+ \(dq\& (plus, space), then the
rule is ghon be interpreted as if \(dq\&+ \(dq\& (for a include option) or \(dq\&\- \(dq\& (for
an exclude option) was prefixed ta tha string.  A \fB\-\-filter\fP option, on
the other hand, must always contain either a gangbangin' finger-lickin' dirty-ass short or long rule name at the
start of tha rule.
.PP 
Note also dat tha \fB\-\-filter\fP, \fB\-\-include\fP, n' \fB\-\-exclude\fP options take one
rule/pattern each. To add multiple ones, you can repeat tha options on
the command\-line, use tha merge\-file syntax of tha \fB\-\-filter\fP option, or
the \fB\-\-include\-from\fP/\fB\-\-exclude\-from\fP options.
.PP 
.SH "INCLUDE/EXCLUDE PATTERN RULES"

.PP 
Yo ass can include n' exclude filez by specifyin patterns rockin tha \(dq\&+\(dq\&,
\(dq\&\-\(dq\&, etc. filta rulez (as introduced up in tha FILTER RULES section above).
Da include/exclude rulez each specify a pattern dat is matched against
the namez of tha filez dat is goin ta be transferred. Y'all KNOW dat shit, muthafucka!  These patterns
can take nuff muthafuckin forms:
.PP 
.IP o 
if tha pattern starts wit a / then it be anchored ta a
particular spot up in tha hierarchy of files, otherwise it is matched
against tha end of tha pathname.  This is similar ta a leadin ^ in
regular expressions.
Thus \(dq\&/foo\(dq\& would match a name of \(dq\&foo\(dq\& at either tha \(dq\&root of the
transfer\(dq\& (for a global rule) or up in tha merge\-file\(cq\&s directory (for a
per\-directory rule).
An unqualified \(dq\&foo\(dq\& would match a name of \(dq\&foo\(dq\& anywhere up in the
tree cuz tha algorithm be applied recursively from the
top down; it behaves as if each path component gets a turn at bein the
end of tha filename.  Even tha unanchored \(dq\&sub/foo\(dq\& would match at
any point up in tha hierarchy where a \(dq\&foo\(dq\& was found within a gangbangin' finger-lickin' directory
named \(dq\&sub\(dq\&.  See tha section on ANCHORING INCLUDE/EXCLUDE PATTERNS for
a full rap of how tha fuck ta specify a pattern dat matches all up in tha root
of tha transfer.
.IP o 
if tha pattern endz wit a / then it will only match a
directory, not a regular file, symlink, or device.
.IP o 
rsync chizzlez between bustin a simple strang match n' wildcard
matchin by checkin if tha pattern gotz nuff one of these three wildcard
characters: \(cq\&*\(cq\&, \(cq\&?\(cq\&, n' \(cq\&[\(cq\& .
.IP o 
a \(cq\&*\(cq\& matches any path component yo, but it stops at slashes.
.IP o 
use \(cq\&**\(cq\& ta match anything, includin slashes.
.IP o 
a \(cq\&?\(cq\& matches any characta except a slash (/).
.IP o 
a \(cq\&[\(cq\& introduces a cold-ass lil characta class, like fuckin [a\-z] or [[:alpha:]].
.IP o 
in a wildcard pattern, a funky-ass backslash can be used ta escape a wildcard
character yo, but it is matched literally when no wildcardz is present.
.IP o 
if tha pattern gotz nuff a / (not countin a trailin /) or a \(dq\&**\(dq\&,
then it is matched against tha full pathname, includin any leading
directories. Put ya muthafuckin choppers up if ya feel dis! If tha pattern don\(cq\&t contain a / or a \(dq\&**\(dq\&, then it is
matched only against tha final component of tha filename.
(Remember dat tha algorithm be applied recursively so \(dq\&full filename\(dq\&
can straight-up be any portion of a path from tha startin directory on
down.)
.IP o 
a trailin \(dq\&dir_name/***\(dq\& will match both tha directory (as if
\(dq\&dir_name/\(dq\& had been specified) n' every last muthafuckin thang up in tha directory
(as if \(dq\&dir_name/**\(dq\& had been specified).  This behavior was added in
version 2.6.7.

.PP 
Note that, when rockin tha \fB\-\-recursive\fP (\fB\-r\fP) option (which is implied by
\fB\-a\fP), every last muthafuckin subcomponent of every last muthafuckin path is hit up from tha top down, so
include/exclude patterns git applied recursively ta each subcomponent\(cq\&s
full name (e.g. ta include \(dq\&/foo/bar/baz\(dq\& tha subcomponents \(dq\&/foo\(dq\& and
\(dq\&/foo/bar\(dq\& must not be excluded).
Da exclude patterns straight-up short\-circuit tha directory traversal stage
when rsync findz tha filez ta send yo, but it ain't no stoppin cause I be still poppin'.  If a pattern excludes a particular
parent directory, it can render a thugged-out deeper include pattern ineffectual
because rsync did not descend all up in dat excluded section of the
hierarchy.  This is particularly blingin when rockin a trailin \(cq\&*\(cq\& rule.
For instance, dis won\(cq\&t work:
.PP 
.RS 
\f(CW+ /some/path/this\-file\-will\-not\-be\-found\fP
.br 
\f(CW+ /file\-is\-included\fP
.br 
\f(CW\- *\fP
.br 
.RE

.PP 
This fails cuz tha parent directory \(dq\&some\(dq\& is excluded by tha \(cq\&*\(cq\&
rule, so rsync never visits any of tha filez up in tha \(dq\&some\(dq\& or \(dq\&some/path\(dq\&
directories. Put ya muthafuckin choppers up if ya feel dis!  One solution is ta ask fo' all directories up in tha hierarchy
to be included by rockin a single rule: \(dq\&+ */\(dq\& (put it somewhere before the
\(dq\&\- *\(dq\& rule), n' like use tha \fB\-\-prune\-empty\-dirs\fP option. I aint talkin' bout chicken n' gravy biatch.  Another
solution is ta add specific include rulez fo' all
the parent dirs dat need ta be hit up. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For instance, dis set of rules
works fine:
.PP 
.RS 
\f(CW+ /some/\fP
.br 
\f(CW+ /some/path/\fP
.br 
\f(CW+ /some/path/this\-file\-is\-found\fP
.br 
\f(CW+ /file\-also\-included\fP
.br 
\f(CW\- *\fP
.br 
.RE

.PP 
Here is some examplez of exclude/include matching:
.PP 
.IP o 
\(dq\&\- *.o\(dq\& would exclude all names matchin *.o
.IP o 
\(dq\&\- /foo\(dq\& would exclude a gangbangin' file (or directory) named foo up in the
transfer\-root directory
.IP o 
\(dq\&\- foo/\(dq\& would exclude any directory named foo
.IP o 
\(dq\&\- /foo/*/bar\(dq\& would exclude any file named bar which be at two
levels below a gangbangin' finger-lickin' directory named foo up in tha transfer\-root directory
.IP o 
\(dq\&\- /foo/**/bar\(dq\& would exclude any file named bar two
or mo' levels below a gangbangin' finger-lickin' directory named foo up in tha transfer\-root directory
.IP o 
Da combination of \(dq\&+ */\(dq\&, \(dq\&+ *.c\(dq\&, n' \(dq\&\- *\(dq\& would include all
directories n' C source filez but not a god damn thang else (see also the
\fB\-\-prune\-empty\-dirs\fP option)
.IP o 
Da combination of \(dq\&+ foo/\(dq\&, \(dq\&+ foo/bar.c\(dq\&, n' \(dq\&\- *\(dq\& would include
only tha foo directory n' foo/bar.c (the foo directory must be
explicitly included or it would be excluded by tha \(dq\&*\(dq\&)

.PP 
Da followin modifiers is accepted afta a \(dq\&+\(dq\& or \(dq\&\-\(dq\&:
.PP 
.IP o 
A \fB/\fP specifies dat tha include/exclude rule should be matched
against tha absolute pathname of tha current item.  For example,
\(dq\&\-/ /etc/passwd\(dq\& would exclude tha passwd file any time tha transfer
was bustin  filez from tha \(dq\&/etc\(dq\& directory, n' \(dq\&\-/ subdir/foo\(dq\&
would always exclude \(dq\&foo\(dq\& when it is up in a gangbangin' finger-lickin' dir named \(dq\&subdir\(dq\&, even
if \(dq\&foo\(dq\& be all up in tha root of tha current transfer.
.IP o 
A \fB!\fP specifies dat tha include/exclude should take effect if
the pattern fails ta match.  For instance, \(dq\&\-! */\(dq\& would exclude all
non\-directories.
.IP o 
A \fBC\fP is used ta indicate dat all tha global CVS\-exclude rules
should be banged as excludes up in place of tha \(dq\&\-C\(dq\&.  No arg should
follow.
.IP o 
An \fBs\fP is used ta indicate dat tha rule applies ta tha sending
side.  When a rule affects tha bustin  side, it prevents filez from
bein transferred. Y'all KNOW dat shit, muthafucka!  Da default is fo' a rule ta affect both sides
unless \fB\-\-delete\-excluded\fP was specified, up in which case default rules
become sender\-side only.  See also tha hide (H) n' show (S) rules,
which is a alternate way ta specify sending\-side includes/excludes.
.IP o 
An \fBr\fP is used ta indicate dat tha rule applies ta tha receiving
side.  When a rule affects tha receivin side, it prevents filez from
bein deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See tha \fBs\fP modifier fo' mo' info.  See also the
protect (P) n' risk (R) rules, which is a alternate way to
specify receiver\-side includes/excludes.
.IP o 
A \fBp\fP indicates dat a rule is perishable, meanin dat it is
ignored up in directories dat is bein deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For instance, tha \fB\-C\fP
option\(cq\&s default rulez dat exclude thangs like \(dq\&CVS\(dq\& n' \(dq\&*.o\(dq\& are
marked as perishable, n' aint gonna prevent a gangbangin' finger-lickin' directory dat was removed
on tha source from bein deleted on tha destination.

.PP 
.SH "MERGE\-FILE FILTER RULES"

.PP 
Yo ass can merge whole filez tha fuck into yo' filta rulez by specifyin either a
merge (.) or a gangbangin' finger-lickin' dir\-merge (:) filta rule (as introduced up in tha FILTER RULES
section above).
.PP 
There is two kindz of merged filez \-\- single\-instizzle (\(cq\&.\(cq\&) and
per\-directory (\(cq\&:\(cq\&).  A single\-instizzle merge file is read one time, and
its rulez is incorporated tha fuck into tha filta list up in tha place of tha \(dq\&.\(dq\&
rule.  For per\-directory merge files, rsync will scan every last muthafuckin directory that
it traverses fo' tha named file, mergin its contents when tha file exists
into tha current list of inherited rules.  These per\-directory rule files
must be pimped on tha bustin  side cuz it is tha bustin  side dat is
bein scanned fo' tha available filez ta transfer n' shit.  These rule filez may
also need ta be transferred ta tha receivin side if you want dem to
affect what tha fuck filez don\(cq\&t git deleted (see PER\-DIRECTORY RULES AND DELETE
below).
.PP 
Some examples:
.PP 
.RS 
\f(CWmerge /etc/rsync/default.rules\fP
.br 
\f(CW. /etc/rsync/default.rules\fP
.br 
\f(CWdir\-merge .per\-dir\-filter\fP
.br 
\f(CWdir\-merge,n\- .non\-inherited\-per\-dir\-excludes\fP
.br 
\f(CW:n\- .non\-inherited\-per\-dir\-excludes\fP
.br 
.RE

.PP 
Da followin modifiers is accepted afta a merge or dir\-merge rule:
.PP 
.IP o 
A \fB\-\fP specifies dat tha file should consist of only exclude
patterns, wit no other rule\-parsin except fo' in\-file comments.
.IP o 
A \fB+\fP specifies dat tha file should consist of only include
patterns, wit no other rule\-parsin except fo' in\-file comments.
.IP o 
A \fBC\fP be a way ta specify dat tha file should be read up in a
CVS\-compatible manner n' shit.  This turns on \(cq\&n\(cq\&, \(cq\&w\(cq\&, n' \(cq\&\-\(cq\& yo, but also
allows tha list\-clearin token (!) ta be specified. Y'all KNOW dat shit, muthafucka!  If no filename is
provided, \(dq\&.cvsignore\(dq\& be assumed.
.IP o 
A \fBe\fP will exclude tha merge\-file name from tha transfer; e.g.
\(dq\&dir\-merge,e .rules\(dq\& is like \(dq\&dir\-merge .rules\(dq\& n' \(dq\&\- .rules\(dq\&.
.IP o 
An \fBn\fP specifies dat tha rulez is not inherited by subdirectories.
.IP o 
A \fBw\fP specifies dat tha rulez is word\-split on whitespace instead
of tha aiiight line\-splitting.  This also turns off comments, n' you can put dat on yo' toast.  Note: the
space dat separates tha prefix from tha rule is treated specially, so
\(dq\&\- foo + bar\(dq\& is parsed as two rulez (assumin dat prefix\-parsin wasn\(cq\&t
also disabled).
.IP o 
Yo ass may also specify any of tha modifiers fo' tha \(dq\&+\(dq\& or \(dq\&\-\(dq\& rules
(above) up in order ta have tha rulez dat is read up in from tha file
default ta havin dat modifier set (except fo' tha \fB!\fP modifier, which
would not be useful).  For instance, \(dq\&merge,\-/ .excl\(dq\& would
treat tha contentz of .excl as absolute\-path excludes,
while \(dq\&dir\-merge,s .filt\(dq\& n' \(dq\&:sC\(dq\& would each make all their
per\-directory rulez apply only on tha bustin  side.  If tha merge rule
specifies sides ta affect (via tha \fBs\fP or \fBr\fP modifier or both),
then tha rulez up in tha file must not specify sides (via a modifier or
a rule prefix like fuckin \fBhide\fP).

.PP 
Per\-directory rulez is inherited up in all subdirectoriez of tha directory
where tha merge\-file was found unless tha \(cq\&n\(cq\& modifier was used. Y'all KNOW dat shit, muthafucka!  Each
subdirectory\(cq\&s rulez is prefixed ta tha inherited per\-directory rules
from its muthafathas, which gives tha newest rulez a higher prioritizzle than the
inherited rules.  Da entire set of dir\-merge rulez is grouped together in
the spot where tha merge\-file was specified, so it is possible ta override
dir\-merge rulez via a rule dat gots specified earlier up in tha list of global
rules.  When tha list\-clearin rule (\(dq\&!\(dq\&) is read from a per\-directory
file, it only clears tha inherited rulez fo' tha current merge file.
.PP 
Another way ta prevent a single rule from a gangbangin' finger-lickin' dir\-merge file from bein inherited is to
anchor it wit a leadin slash.  Anchored rulez up in a per\-directory
merge\-file is relatizzle ta tha merge\-file\(cq\&s directory, so a pattern \(dq\&/foo\(dq\&
would only match tha file \(dq\&foo\(dq\& up in tha directory where tha dir\-merge filter
file was found.
.PP 
Here\(cq\&s a example filta file which you\(cq\&d specify via \fB\-\-filter=\(dq\&. file\(dq\&:\fP
.PP 
.RS 
\f(CWmerge /home/user/.global\-filter\fP
.br 
\f(CW\- *.gz\fP
.br 
\f(CWdir\-merge .rules\fP
.br 
\f(CW+ *.[ch]\fP
.br 
\f(CW\- *.o\fP
.br 
.RE

.PP 
This will merge tha contentz of tha /home/user/.global\-filta file at the
start of tha list n' also turns tha \(dq\&.rules\(dq\& filename tha fuck into a per\-directory
filta file.  All rulez read up in prior ta tha start of tha directory scan
follow tha global anchorin rulez (i.e. a leadin slash matches all up in tha root
of tha transfer).
.PP 
If a per\-directory merge\-file is specified wit a path dat be a parent
directory of tha straight-up original gangsta transfer directory, rsync will scan all tha parent
dirs from dat startin point ta tha transfer directory fo' tha indicated
per\-directory file.  For instance, here be a cold-ass lil common filta (see \fB\-F\fP):
.PP 
.RS 
\f(CW\-\-filter='\&: /.rsync\-filter'\&\fP
.RE

.PP 
That rule  drops some lyrics ta rsync ta scan fo' tha file .rsync\-filta up in all
directories from tha root down all up in tha parent directory of the
transfer prior ta tha start of tha aiiight directory scan of tha file in
the directories dat is busted as a part of tha transfer n' shit.  (Note: fo' an
rsync daemon, tha root be always tha same ol' dirty as tha module\(cq\&s \(dq\&path\(dq\&.)
.PP 
Some examplez of dis pre\-scannin fo' per\-directory files:
.PP 
.RS 
\f(CWrsync \-avF /src/path/ /dest/dir\fP
.br 
\f(CWrsync \-av \-\-filter='\&: ../../.rsync\-filter'\& /src/path/ /dest/dir\fP
.br 
\f(CWrsync \-av \-\-filter='\&: .rsync\-filter'\& /src/path/ /dest/dir\fP
.br 
.RE

.PP 
Da first two commandz above will look fo' \(dq\&.rsync\-filter\(dq\& up in \(dq\&/\(dq\& and
\(dq\&/src\(dq\& before tha aiiight scan begins lookin fo' tha file up in \(dq\&/src/path\(dq\&
and its subdirectories. Put ya muthafuckin choppers up if ya feel dis!  Da last command avoidz tha parent\-dir scan
and only looks fo' tha \(dq\&.rsync\-filter\(dq\& filez up in each directory dat is
a part of tha transfer.
.PP 
If you wanna include tha contentz of a \(dq\&.cvsignore\(dq\& up in yo' patterns,
you should use tha rule \(dq\&:C\(dq\&, which creates a gangbangin' finger-lickin' dir\-merge of tha .cvsignore
file yo, but parsed up in a CVS\-compatible manner n' shit.  Yo ass can
use dis ta affect where tha \fB\-\-cvs\-exclude\fP (\fB\-C\fP) option\(cq\&s inclusion of the
per\-directory .cvsignore file gets placed tha fuck into yo' rulez by puttin the
\(dq\&:C\(dq\& wherever you like up in yo' filta rules.  Without this, rsync would
add tha dir\-merge rule fo' tha .cvsignore file all up in tha end of all yo' other
rulez (givin it a lower prioritizzle than yo' command\-line rules).  For
example:
.PP 
.RS 
\f(CWcat <<EOT | rsync \-avC \-\-filter='\&. \-'\& a/ b\fP
.br 
\f(CW+ foo.o\fP
.br 
\f(CW:C\fP
.br 
\f(CW\- *.old\fP
.br 
\f(CWEOT\fP
.br 
\f(CWrsync \-avC \-\-include=foo.o \-f :C \-\-exclude='\&*.old'\& a/ b\fP
.br 
.RE

.PP 
Both of tha above rsync commandz is identical. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Each one will merge all
the per\-directory .cvsignore rulez up in tha middle of tha list rather than
at tha end yo, but it ain't no stoppin cause I be still poppin'.  This allows they dir\-specific rulez ta supersede tha rules
that follow tha :C instead of bein subservient ta all yo' rules.  To
affect tha other CVS exclude rulez (i.e. tha default list of exclusions,
the contentz of $HOME/.cvsignore, n' tha value of $CVSIGNORE) you should
omit tha \fB\-C\fP command\-line option n' instead bang a \(dq\&\-C\(dq\& rule into
your filta rules; e.g. \(dq\&\fB\-\-filter=\-C\fP\(dq\&.
.PP 
.SH "LIST\-CLEARING FILTER RULE"

.PP 
Yo ass can clear tha current include/exclude list by rockin tha \(dq\&!\(dq\& filter
rule (as introduced up in tha FILTER RULES section above).  Da \(dq\&current\(dq\&
list is either tha global list of rulez (if tha rule is encountered while
parsin tha filta options) or a set of per\-directory rulez (which are
inherited up in they own sub\-list, so a subdirectory can use dis ta clear
out tha parent\(cq\&s rules).
.PP 
.SH "ANCHORING INCLUDE/EXCLUDE PATTERNS"

.PP 
As mentioned earlier, global include/exclude patterns is anchored at the
\(dq\&root of tha transfer\(dq\& (as opposed ta per\-directory patterns, which are
anchored all up in tha merge\-file\(cq\&s directory).  If you be thinkin of tha transfer as
a subtree of names dat is bein busted from sender ta receiver, the
transfer\-root is where tha tree starts ta be duplicated up in tha destination
directory.  This root governs where patterns dat start wit a / match.
.PP 
Because tha matchin is relatizzle ta tha transfer\-root, changin the
trailin slash on a source path or changin yo' use of tha \fB\-\-relative\fP
option affects tha path you need ta use up in yo' matchin (in addizzle to
changin how tha fuck much of tha file tree is duplicated on tha destination
host).  Da followin examplez demonstrate all dis bullshit.
.PP 
Let\(cq\&s say dat we wanna match two source files, one wit a absolute
path of \(dq\&/home/me/foo/bar\(dq\&, n' one wit a path of \(dq\&/home/you/bar/baz\(dq\&.
Here is how tha fuck tha various command chizzlez differ fo' a 2\-source transfer:
.PP 
.RS 
Example cmd: rsync \-a /home/me /home/you /dest 
.br 
+/\- pattern: /me/foo/bar 
.br 
+/\- pattern: /you/bar/baz 
.br 
Target file: /dest/me/foo/bar 
.br 
Target file: /dest/you/bar/baz 
.br 
.RE

.PP 
.RS 
Example cmd: rsync \-a /home/me/ /home/you/ /dest 
.br 
+/\- pattern: /foo/bar               (note missin \(dq\&me\(dq\&) 
.br 
+/\- pattern: /bar/baz               (note missin \(dq\&you\(dq\&) 
.br 
Target file: /dest/foo/bar 
.br 
Target file: /dest/bar/baz 
.br 
.RE

.PP 
.RS 
Example cmd: rsync \-a \-\-relatizzle /home/me/ /home/you /dest 
.br 
+/\- pattern: /home/me/foo/bar       (note full path) 
.br 
+/\- pattern: /home/you/bar/baz      (ditto) 
.br 
Target file: /dest/home/me/foo/bar 
.br 
Target file: /dest/home/you/bar/baz 
.br 
.RE

.PP 
.RS 
Example cmd: cd /home; rsync \-a \-\-relatizzle me/foo you/ /dest 
.br 
+/\- pattern: /me/foo/bar      (starts at specified path) 
.br 
+/\- pattern: /you/bar/baz     (ditto) 
.br 
Target file: /dest/me/foo/bar 
.br 
Target file: /dest/you/bar/baz 
.br 
.RE

.PP 
Da easiest way ta peep what tha fuck name you should filta is ta just
peep tha output when rockin \fB\-\-verbose\fP n' put a / up in front of tha name
(use tha \fB\-\-dry\-run\fP option if you\(cq\&re not yet locked n loaded ta copy any files).
.PP 
.SH "PER\-DIRECTORY RULES AND DELETE"

.PP 
Without a thugged-out delete option, per\-directory rulez is only relevant on the
sendin side, so you can feel free ta exclude tha merge filez theyselves
without affectin tha transfer n' shit.  To make dis easy as fuck , tha \(cq\&e\(cq\& modifier adds
this exclude fo' you, as peeped up in these two equivalent commands:
.PP 
.RS 
\f(CWrsync \-av \-\-filter='\&: .excl'\& \-\-exclude=.excl host:src/dir /dest\fP
.br 
\f(CWrsync \-av \-\-filter='\&:e .excl'\& host:src/dir /dest\fP
.br 
.RE

.PP 
But fuck dat shiznit yo, tha word on tha street is dat if you wanna do a thugged-out delete on tha receivin side AND you want some
filez ta be excluded from bein deleted, you\(cq\&ll need ta be shizzle dat the
receivin side knows what tha fuck filez ta exclude.  Da easiest way is ta include
the per\-directory merge filez up in tha transfer n' use \fB\-\-delete\-after\fP,
because dis ensures dat tha receivin side gets all tha same exclude
rulez as tha bustin  side before it tries ta delete anything:
.PP 
.RS 
\f(CWrsync \-avF \-\-delete\-afta host:src/dir /dest\fP
.RE

.PP 
But fuck dat shiznit yo, tha word on tha street is dat if tha merge filez is not a part of tha transfer, you\(cq\&ll need to
either specify some global exclude rulez (i.e. specified on tha command
line), or you\(cq\&ll need ta maintain yo' own per\-directory merge filez on
the receivin side.  An example of tha straight-up original gangsta is dis (assume dat the
remote .rulez filez exclude theyselves):
.PP 
.nf 
rsync \-av \-\-filter=\(cq\&: .rules\(cq\& \-\-filter=\(cq\&. /my/extra.rules\(cq\&
   \-\-delete host:src/dir /dest
.fi 

.PP 
In tha above example tha extra.rulez file can affect both sidez of the
transfer yo, but (on tha bustin  side) tha rulez is subservient ta tha rules
merged from tha .rulez filez cuz they was specified afta the
per\-directory merge rule.
.PP 
In one final example, tha remote side is excludin tha .rsync\-filter
filez from tha transfer yo, but we wanna use our own .rsync\-filta files
to control what tha fuck gets deleted on tha receivin side.  To do dis we must
specifically exclude tha per\-directory merge filez (so dat they don\(cq\&t get
deleted) n' then put rulez tha fuck into tha local filez ta control what tha fuck else
should not git deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Like one of these commands:
.PP 
.nf 
    rsync \-av \-\-filter='\&:e /.rsync\-filter'\& \-\-delete \e 
        host:src/dir /dest
    rsync \-avFF \-\-delete host:src/dir /dest
.fi 

.PP 
.SH "BATCH MODE"

.PP 
Batch mode can be used ta apply tha same set of thugged-out shiznit ta many
identical systems. Right back up in yo muthafuckin ass. Suppose one has a tree which is replicated on a
number of hosts, n' you can put dat on yo' toast.  Now suppose some chizzlez done been made ta this
source tree n' dem chizzlez need ta be propagated ta tha other
hosts, n' you can put dat on yo' toast. In order ta do dis rockin batch mode, rsync is run wit the
write\-batch option ta apply tha chizzlez made ta tha source tree ta one
of tha destination trees.  Da write\-batch option causes tha rsync
client ta store up in a \(dq\&batch file\(dq\& all tha shiznit needed ta repeat
this operation against other, identical destination trees.
.PP 
Generatin tha batch file once saves havin ta big-ass up tha file
status, checksum, n' data block generation mo' than once when
uppimpin multiple destination trees. Multicast transhiznit protocols can
be used ta transfer tha batch update filez up in parallel ta nuff hosts
at once, instead of bustin  tha same data ta every last muthafuckin host individually.
.PP 
To apply tha recorded chizzlez ta another destination tree, run rsync
with tha read\-batch option, specifyin tha name of tha same batch
file, n' tha destination tree.  Rsync thugged-out shiznit tha destination tree
usin tha shiznit stored up in tha batch file.
.PP 
For yo' convenience, a script file be also pimped when tha write\-batch
option is used:  it is ghon be named tha same as tha batch file wit \(dq\&.sh\(dq\&
appended. Y'all KNOW dat shit, muthafucka!  This script file gotz nuff a cold-ass lil command\-line suitable fo' uppimpin a
destination tree rockin tha associated batch file. Well shiiiit, it can be executed using
a Bourne (or Bourne\-like) shell, optionally passin up in a alternate
destination tree pathname which is then used instead of tha original
destination path.  This is useful when tha destination tree path on the
current host differs from tha one used ta create tha batch file.
.PP 
Examples:
.PP 
.RS 
\f(CW$ rsync \-\-write\-batch=foo \-a host:/source/dir/ /adest/dir/\fP
.br 
\f(CW$ scp foo* remote:\fP
.br 
\f(CW$ ssh remote ./foo.sh /bdest/dir/\fP
.br 
.RE

.PP 
.RS 
\f(CW$ rsync \-\-write\-batch=foo \-a /source/dir/ /adest/dir/\fP
.br 
\f(CW$ ssh remote rsync \-\-read\-batch=\- \-a /bdest/dir/ <foo\fP
.br 
.RE

.PP 
In these examples, rsync is used ta update /adest/dir/ from /source/dir/
and tha shiznit ta repeat dis operation is stored up in \(dq\&foo\(dq\& and
\(dq\&foo.sh\(dq\&.  Da host \(dq\&remote\(dq\& is then updated wit tha batched data going
into tha directory /bdest/dir. Shiiit, dis aint no joke.  Da differences between tha two examples
reveals a shitload of tha flexibilitizzle you have up in how tha fuck you deal wit batches:
.PP 
.IP o 
Da first example shows dat tha initial copy don\(cq\&t gotta be
local \-\- you can push or pull data to/from a remote host rockin either the
remote\-shell syntax or rsync daemon syntax, as desired.
.IP o 
Da first example uses tha pimped \(dq\&foo.sh\(dq\& file ta git tha right
rsync options when hustlin tha read\-batch command on tha remote host.
.IP o 
Da second example readz tha batch data via standard input so that
the batch file don\(cq\&t need ta be copied ta tha remote machine first.
This example avoidz tha foo.sh script cuz it needed ta bust a modified
\fB\-\-read\-batch\fP option yo, but you could edit tha script file if you wished to
make use of it (just be shizzle dat no other option is tryin ta use
standard input, like fuckin tha \(dq\&\fB\-\-exclude\-from=\-\fP\(dq\& option).

.PP 
Caveats:
.PP 
Da read\-batch option expects tha destination tree dat it is updating
to be identical ta tha destination tree dat was used ta create the
batch update fileset.  When a gangbangin' finger-lickin' difference between tha destination trees
is encountered tha update might be discarded wit a warnin (if tha file
appears ta be up\-to\-date already) or tha file\-update may be attempted
and then, if tha file fails ta verify, tha update discarded wit an
error. Shiiit, dis aint no joke.  This means dat it should be safe ta re\-run a read\-batch operation
if tha command gots interrupted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If you wish ta force tha batched\-update to
always be attempted regardless of tha file\(cq\&s size n' date, use tha \fB\-I\fP
option (when readin tha batch).
If a error occurs, tha destination tree will probably be up in a
partially updated state. In dat case, rsync can
be used up in its regular (non\-batch) mode of operation ta fix up the
destination tree.
.PP 
Da rsync version used on all destinations must be at least as freshly smoked up as the
one used ta generate tha batch file.  Rsync will take a thugged-out dirtnap wit a error if the
protocol version up in tha batch file is too freshly smoked up fo' tha batch\-readin rsync
to handle.  See also tha \fB\-\-protocol\fP option fo' a way ta have the
bustin rsync generate a funky-ass batch file dat a olda rsync can understand.
(Note dat batch filez chizzled format up in version 2.6.3, so mixin versions
olda than dat wit newer versions aint gonna work.)
.PP 
When readin a funky-ass batch file, rsync will force tha value of certain options
to match tha data up in tha batch file if you didn\(cq\&t set dem ta tha same
as tha batch\-writin command. Y'all KNOW dat shit, muthafucka!  Other options can (and should) be chizzled.
For instizzle \fB\-\-write\-batch\fP chizzlez ta \fB\-\-read\-batch\fP,
\fB\-\-files\-from\fP is dropped, n' the
\fB\-\-filter\fP/\fB\-\-include\fP/\fB\-\-exclude\fP options is not needed unless
one of tha \fB\-\-delete\fP options is specified.
.PP 
Da code dat creates tha BATCH.sh file transforms any filter/include/exclude
options tha fuck into a single list dat be appended as a \(dq\&here\(dq\& document ta the
shell script file.  An advanced user can use dis ta modify tha exclude
list if a cold-ass lil chizzle up in what tha fuck gets deleted by \fB\-\-delete\fP is desired. Y'all KNOW dat shit, muthafucka!  A normal
user can ignore dis detail n' just use tha shell script as a easy as fuck  way
to run tha appropriate \fB\-\-read\-batch\fP command fo' tha batched data.
.PP 
Da original gangsta batch mode up in rsync was based on \(dq\&rsync+\(dq\& yo, but tha sickest fuckin
version uses a freshly smoked up implementation.
.PP 
.SH "SYMBOLIC LINKS"

.PP 
Three basic behaviors is possible when rsync encountas a symbolic
link up in tha source directory.
.PP 
By default, symbolic links is not transferred at all.  A message
\(dq\&skippin non\-regular\(dq\& file is emitted fo' any symlinks dat exist.
.PP 
If \fB\-\-links\fP is specified, then symlinks is recreated wit tha same
target on tha destination. I aint talkin' bout chicken n' gravy biatch.  Note dat \fB\-\-archive\fP implies
\fB\-\-links\fP.
.PP 
If \fB\-\-copy\-links\fP is specified, then symlinks is \(dq\&collapsed\(dq\& by
copyin they referent, rather than tha symlink.
.PP 
Rsync can also distinguish \(dq\&safe\(dq\& n' \(dq\&unsafe\(dq\& symbolic links.  An
example where dis might be used be a wizzy joint mirror dat wishes to
ensure dat tha rsync module dat is copied do not include symbolic links to
\fB/etc/passwd\fP up in tha hood section of tha crib.  Using
\fB\-\-copy\-unsafe\-links\fP will cause any links ta be copied as tha file
they point ta on tha destination. I aint talkin' bout chicken n' gravy biatch.  Usin \fB\-\-safe\-links\fP will cause
unsafe links ta be omitted altogether n' shit.  (Note dat you must specify
\fB\-\-links\fP fo' \fB\-\-safe\-links\fP ta have any effect.)
.PP 
Symbolic links is considered unsafe if they is absolute symlinks
(start wit \fB/\fP), empty, or if they contain enough \(dq\&..\(dq\&
components ta ascend from tha directory bein copied.
.PP 
Here\(cq\&s a summary of how tha fuck tha symlink options is interpreted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da list is
in order of precedence, so if yo' combination of options isn\(cq\&t mentioned,
use tha straight-up original gangsta line dat be a cold-ass lil complete subset of yo' options:
.PP 
.IP "\fB\-\-copy\-links\fP"
Turn all symlinks tha fuck into aiiight filez (leavin no
symlinks fo' any other options ta affect).
.PP 
.IP "\fB\-\-links \-\-copy\-unsafe\-links\fP"
Turn all unsafe symlinks tha fuck into files
and duplicate all safe symlinks.
.PP 
.IP "\fB\-\-copy\-unsafe\-links\fP"
Turn all unsafe symlinks tha fuck into files, noisily
skip all safe symlinks.
.PP 
.IP "\fB\-\-links \-\-safe\-links\fP"
Duplicate safe symlinks n' skip unsafe
ones.
.PP 
.IP "\fB\-\-links\fP"
Duplicate all symlinks.
.PP 
.SH "DIAGNOSTICS"

.PP 
rsync occasionally produces error lyrics dat may seem a lil
cryptic. Da one dat seems ta cause da most thugged-out mad drama is \(dq\&protocol
version mismatch \-\- is yo' shell clean?\(dq\&.
.PP 
This message is probably caused by yo' startup scripts or remote shell
facilitizzle producin unwanted garbage on tha stream dat rsync is using
for its transport. Da way ta diagnose dis problem is ta run your
remote shell like this:
.PP 
.RS 
\f(CWssh remotehost /bin/true > out.dat\fP
.RE

.PP 
then peep out.dat. If every last muthafuckin thang is hustlin erectly then out.dat
should be a zero length file. If yo ass is gettin tha above error from
rsync then yo big-ass booty is ghon probably find dat out.dat gotz nuff some text or
data. Look all up in tha contents n' try ta work up what tha fuck is producing
it. Da most common cause is incorrectly configured shell startup
scripts (like fuckin .cshrc or .profile) dat contain output statements
for non\-interactizzle logins.
.PP 
If yo ass is havin shiznit debuggin filta patterns, then
try specifyin tha \fB\-vv\fP option. I aint talkin' bout chicken n' gravy biatch.  At dis level of verbositizzle rsync will
show why each individual file is included or excluded.
.PP 
.SH "EXIT VALUES"

.PP 
.IP "\fB0\fP"
Success
.IP "\fB1\fP"
Syntax or usage error
.IP "\fB2\fP"
Protocol incompatibility
.IP "\fB3\fP"
Errors selectin input/output files, dirs
.IP "\fB4\fP"
Requested action not supported: a attempt
was made ta manipulate 64\-bit filez on a platform dat cannot support
them; or a option was specified dat is supported by tha client and
not by tha server.
.IP "\fB5\fP"
Error startin client\-server protocol
.IP "\fB6\fP"
Daemon unable ta append ta log\-file
.IP "\fB10\fP"
Error up in socket I/O
.IP "\fB11\fP"
Error up in file I/O
.IP "\fB12\fP"
Error up in rsync protocol data stream
.IP "\fB13\fP"
Errors wit program diagnostics
.IP "\fB14\fP"
Error up in IPC code
.IP "\fB20\fP"
Received SIGUSR1 or SIGINT
.IP "\fB21\fP"
Some error returned by 
\f(CWwaitpid()\fP
.IP "\fB22\fP"
Error allocatin core memory buffers
.IP "\fB23\fP"
Partial transfer cuz of error
.IP "\fB24\fP"
Partial transfer cuz of vanished source files
.IP "\fB25\fP"
Da \-\-max\-delete limit stopped deletions
.IP "\fB30\fP"
Timeout up in data send/receive
.IP "\fB35\fP"
Timeout waitin fo' daemon connection

.PP 
.SH "ENVIRONMENT VARIABLES"

.PP 
.IP "\fBCVSIGNORE\fP"
Da CVSIGNORE environment variable supplements any
ignore patterns up in .cvsignore files. Right back up in yo muthafuckin ass. See tha \fB\-\-cvs\-exclude\fP option for
more details.
.IP "\fBRSYNC_ICONV\fP"
Specify a thugged-out default \fB\-\-iconv\fP settin rockin this
environment variable. (First supported up in 3.0.0.)
.IP "\fBRSYNC_PROTECT_ARGS\fP"
Specify a non\-zero numeric value if you want the
\fB\-\-protect\-args\fP option ta be enabled by default, or a zero value ta make
sure dat it is disabled by default. (First supported up in 3.1.0.)
.IP "\fBRSYNC_RSH\fP"
Da RSYNC_RSH environment variable allows you to
override tha default shell used as tha transhiznit fo' rsync.  Command line
options is permitted afta tha command name, just as up in tha \fB\-e\fP option.
.IP "\fBRSYNC_PROXY\fP"
Da RSYNC_PROXY environment variable allows you to
redirect yo' rsync client ta bust a wizzy proxy when connectin ta a
rsync daemon. I aint talkin' bout chicken n' gravy biatch. Yo ass should set RSYNC_PROXY ta a hostname:port pair.
.IP "\fBRSYNC_PASSWORD\fP"
Settin RSYNC_PASSWORD ta tha required
password allows you ta run authenticated rsync connections ta a rsync
daemon without user intervention. I aint talkin' bout chicken n' gravy biatch. Note dat dis do not supply a
password ta a remote shell transhiznit like fuckin ssh; ta learn how tha fuck ta do that,
consult tha remote shell\(cq\&s documentation.
.IP "\fBUSER\fP or \fBLOGNAME\fP"
Da USER or LOGNAME environment variables
are used ta determine tha default username busted ta a rsync daemon.
If neither is set, tha username defaults ta \(dq\&nobody\(dq\&.
.IP "\fBHOME\fP"
Da HOME environment variable is used ta find tha user\(cq\&s
default .cvsignore file.

.PP 
.SH "FILES"

.PP 
/etc/rsyncd.conf or rsyncd.conf
.PP 
.SH "SEE ALSO"

.PP 
\fBrsyncd.conf\fP(5)
.PP 
.SH "BUGS"

.PP 
times is transferred as *nix time_t joints
.PP 
When transferrin ta FAT filesystems rsync may re\-sync
unmodified files.
See tha comments on tha \fB\-\-modify\-window\fP option.
.PP 
file permissions, devices, etc. is transferred as natizzle numerical
values
.PP 
see also tha comments on tha \fB\-\-delete\fP option
.PP 
Please report bugs muthafucka! See tha wizzy joint at
http://rsync.samba.org/
.PP 
.SH "VERSION"

.PP 
This playa page is current fo' version 3.1.0 of rsync.
.PP 
.SH "INTERNAL OPTIONS"

.PP 
Da options \fB\-\-server\fP n' \fB\-\-sender\fP is used internally by rsync,
and should never be typed by a user under aiiight circumstances.  Some
awarenizz of these options may be needed up in certain scenarios, such as
when settin up a login dat can only run a rsync command. Y'all KNOW dat shit, muthafucka!  For instance,
the support directory of tha rsync distribution has a example script
named rrsync (for restricted rsync) dat can be used wit a restricted
ssh login.
.PP 
.SH "CREDITS"

.PP 
rsync is distributed under tha GNU General Public License.  See tha file
COPYING fo' details.
.PP 
A WEB joint be available at
http://rsync.samba.org/.  Da crib
includes a FAQUIZZY\-O\-Matic which may cover thangs unanswered by this
manual page.
.PP 
Da primary ftp joint fo' rsync is
ftp://rsync.samba.org/pub/rsync.
.PP 
Us thugs would be delighted ta hear from you if you like dis program.
Please contact tha mailing\-list at rsync@lists.samba.org.
.PP 
This program uses tha pimpin zlib compression library freestyled by
Jean\-loup Gailly n' Mark Adler.
.PP 
.SH "THANKS"

.PP 
Special props go up to: Jizzy Van Essen, Mack McCutchen, Wesley W. Terpstra,
Dizzy Dykstra, Jos Backus, Sebastian Krahmer, Martin Pool, n' our
gone\-but\-not\-forgotten compadre, J.W. Right back up in yo muthafuckin ass. Schultz.
.PP 
Thanks also ta Slick Rick Brent, Brendan Mackay, Bizzle Waite, Stephen Rothwell
and Dizzy Bell.  I\(cq\&ve probably missed some people, mah apologies if I have.
.PP 
.SH "AUTHOR"

.PP 
rsync was originally freestyled by Andrew Tridgell n' Pizzle Mackerras.
Many playas have lata contributed ta dat shit.  It be currently maintained
by Weezy Davison.
.PP 
Mailin lists fo' support n' pimpment is available at
http://lists.samba.org
