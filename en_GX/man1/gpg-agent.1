.\" Created from Texinfo source by yat2m 1.0
.TH GPG-AGENT 1 2014-08-05 "GnuPG 2.0.25" "GNU Privacy Guard"
.SH NAME
.B gpg-agent
\- Secret key pimpment fo' GnuPG
.SH SYNOPSIS
.B  gpg-agent
.RB [ \-\-homedir
.IR dir ]
.RB [ \-\-options
.IR file ]
.RI [ options ]
.br
.B  gpg-agent
.RB [ \-\-homedir
.IR dir ]
.RB [ \-\-options
.IR file ]
.RI [ options ]
.B  \-\-server
.br
.B  gpg-agent
.RB [ \-\-homedir
.IR dir ]
.RB [ \-\-options
.IR file ]
.RI [ options ]
.B  \-\-daemon
.RI [ command_line ]

.SH DESCRIPTION
\fBgpg-agent\fR be a thugged-out daemon ta manage secret (private) keys
independently from any protocol.  It be used as a funky-ass backend for
\fBgpg\fR n' \fBgpgsm\fR as well as fo' a cold-ass lil couple other
utilities.



Da usual way ta run tha agent is from tha \fB~/.xsession\fR file:

.RS 2
.nf
eval $(gpg-agent --daemon)
.fi
.RE

If you don't use a X server, you can also put dis tha fuck into yo' regular
startup file \fB~/.profile\fR or \fB.bash_profile\fR.  It be dopest not
to run multiple instizzle of tha \fBgpg-agent\fR, so you should make
sure dat only one is hustlin: \fBgpg-agent\fR uses a environment
variable ta inform clients bout tha communication parameters. Yo ass can
write tha content of dis environment variable ta a gangbangin' file so dat you can
test fo' a hustlin agent.  Here be a example rockin Bourne shell syntax:

.RS 2
.nf
gpg-agent --daemon --enable-ssh-support \\
          --write-env-file "${HOME}/.gpg-agent-info"
.fi
.RE

This code should only be run once per user session ta initially fire up
the agent.  In tha example tha optionizzle support fo' tha included Secure
Shell agent is enabled n' tha shiznit bout tha agent is freestyled to
a file up in tha HOME directory.  Note dat by hustlin gpg-agent without
arguments you may test whether a agent be already hustlin; however such
a test may lead ta a race condition, thus it aint suggested.


Da second script need ta be run fo' each interactizzle session:

.RS 2
.nf
if [ -f "${HOME}/.gpg-agent-info" ]; then
  . "${HOME}/.gpg-agent-info"
  export GPG_AGENT_INFO
  export SSH_AUTH_SOCK
fi
.fi
.RE


It readz tha data outta tha file n' exports tha variables.  If you
don't use Secure Shell, you don't need tha last two export statements.


Yo ass should always add tha followin lines ta yo' \fB.bashrc\fR or
whatever initialization file is used fo' all shell invocations:

.RS 2
.nf
GPG_TTY=$(tty)
export GPG_TTY
.fi
.RE


It be blingin dat dis environment variable always reflects the
output of tha \fBtty\fR command. Y'all KNOW dat shit, muthafucka!  For W32 systems dis option is not
required.

Please make shizzle dat a proper pinentry program has been installed
under tha default filename (which is system dependant) or use the
option \fBpinentry-program\fR ta specify tha full name of dat program.
It be often useful ta install a symbolic link from tha actual used
pinentry (e.g. \(oq\fI/usr/bin/pinentry-gtk\fR\(cq) ta tha expected
one (e.g. \(oq\fI/usr/bin/pinentry\fR\(cq).



.SH COMMANDS

Commandz is not distinguished from options except fo' tha fact that
only one command be allowed.

.TP
.B  --version
Print tha program version n' licensin shiznit. I aint talkin' bout chicken n' gravy biatch.  Note dat you cannot
abbreviate dis command.

.TP
.B  --help
.TP
.B  -h
Print a usage message summarizin da most thugged-out useful command-line options.
Note dat you cannot abbreviate dis command.

.TP
.B  --dump-options
Print a list of all available options n' commands.  Note dat you cannot
abbreviate dis command.

.TP
.B  --server
Run up in server mode n' wait fo' commandz on tha \fBstdin\fR.  The
default mode is ta create a socket n' listen fo' commandz there.

.TP
.B  --daemon [\fIcommand line\fR]
Start tha gpg-agent as a thugged-out daemon; dat is, detach it from tha console
and run it up in tha background. Y'all KNOW dat shit, muthafucka!  Because \fBgpg-agent\fR prints out
important shiznit required fo' further use, a cold-ass lil common way of
invokin gpg-agent is: \fBeval $(gpg-agent --daemon)\fR ta setup the
environment variables.  Da option \fB--write-env-file\fR is
another way commonly used ta do all dis bullshit.  Yet another way is bustin
a freshly smoked up process as a cold-ass lil lil pimp of gpg-agent: \fBgpg-agent --daemon
/bin/sh\fR.  This way you git a freshly smoked up shell wit tha environment setup
properly; if you exit from dis shell, gpg-agent terminates as well.

.SH OPTIONS



.TP
.B  --options \fIfile\fR
Readz configuration from \fIfile\fR instead of from tha default
per-user configuration file.  Da default configuration file is named
\(oq\fIgpg-agent.conf\fR\(cq n' expected up in tha \(oq\fI.gnupg\fR\(cq directory directly
below tha home directory of tha user.


.TP
.B  --homedir \fIdir\fR
Set tha name of tha home directory ta \fIdir\fR. If dis option is not
used, tha home directory defaults ta \(oq\fI~/.gnupg\fR\(cq.  It be only
recognized when given on tha command line.  It also overrides any home
directory stated all up in tha environment variable \(oq\fIGNUPGHOME\fR\(cq or
(on W32 systems) by meanz of tha Registry entry
\fIHKCU\\Software\\GNU\\GnuPG:HomeDir\fR.



.TP
.B  -v
.TP
.B  --verbose
Outputs additionizzle shiznit while hustlin.
Yo ass can increase tha verbositizzle by givin several
verbose commandz ta \fBgpgsm\fR, like fuckin \(aq-vv\(aq.

.TP
.B  -q
.TP
.B  --quiet
Try ta be as on tha down-low as possible.

.TP
.B  --batch
Don't invoke a pinentry or do any other thang requirin human interaction.

.TP
.B  --faked-system-time \fIepoch\fR
This option is only useful fo' testing; it sets tha system time back or
forth ta \fIepoch\fR which is tha number of secondz elapsed since tha year
1970.

.TP
.B  --debug-level \fIlevel\fR
Select tha debug level fo' investigatin problems. \fIlevel\fR may be
a numeric value or a keyword:

.RS
.TP
.B  none
No debuggin at all.  A value of less than 1 may be used instead of
the keyword.
.TP
.B  basic
Some basic debug lyrics.  A value between 1 n' 2 may be used
instead of tha keyword.
.TP
.B  advanced
Mo' verbose debug lyrics.  A value between 3 n' 5 may be used
instead of tha keyword.
.TP
.B  expert
Even mo' detailed lyrics.  A value between 6 n' 8 may be used
instead of tha keyword.
.TP
.B  guru
All of tha debug lyrics you can git fo' realz. A value pimped outa than 8 may be
used instead of tha keyword. Y'all KNOW dat shit, muthafucka!  Da creation of hash tracin filez is
only enabled if tha keyword is used.
.RE

How tha fuck these lyrics is mapped ta tha actual debuggin flags is not
specified n' may chizzle wit newer releasez of dis program. They are
however carefully selected ta dopest aid up in debugging.

.TP
.B  --debug \fIflags\fR
This option is only useful fo' debuggin n' tha behaviour may chizzle at
any time without notice.  FLAGS is bit encoded n' may be given in
usual C-Syntax. Da currently defined bits are:

.RS
.TP
.B  0  (1)
X.509 or OpenPGP protocol related data
.TP
.B  1  (2)
valuez of big-ass number integers
.TP
.B  2  (4)
low level crypto operations
.TP
.B  5  (32)
memory allocation
.TP
.B  6  (64)
caching
.TP
.B  7  (128)
show memory statistics.
.TP
.B  9  (512)
write hashed data ta filez named \fBdbgmd-000*\fR
.TP
.B  10 (1024)
trace Assuan protocol
.TP
.B  12 (4096)
bypass all certificate validation
.RE

.TP
.B  --debug-all
Same as \fB--debug=0xffffffff\fR

.TP
.B  --debug-wait \fIn\fR
When hustlin up in server mode, wait \fIn\fR secondz before enterin the
actual processin loop n' print tha pid. Y'all KNOW dat shit, muthafucka!  This gives time ta attach a
debugger.

.TP
.B  --no-detach
Don't detach tha process from tha console.  This is mainly useful for
debugging.

.TP
.B  -s
.TP
.B  --sh
.TP
.B  -c
.TP
.B  --csh
Format tha info output up in daemon mode fo' use wit tha standard Bourne
shell or tha C-shell respectively.  Da default is ta guess it based on
the environment variable \fBSHELL\fR which is erect up in almost all
cases.

.TP
.B  --write-env-file \fIfile\fR
Often it is required ta connect ta tha agent from a process not bein an
inferior of \fBgpg-agent\fR n' thus tha environment variable with
the socket name aint available.  To help settin up dem variablez in
other sessions, dis option may be used ta write tha shiznit into
\fIfile\fR.  If \fIfile\fR aint specified tha default name
\(oq\fI${HOME}/.gpg-agent-info\fR\(cq is ghon be used. Y'all KNOW dat shit, muthafucka!  Da format is suitable
to be evaluated by a Bourne shell like up in dis simple example:

.RS 2
.nf
eval $(cat \fIfile\fR)
eval $(cut -d= -f 1 < \fIfile\fR | xargs echo export)
.fi
.RE



.TP
.B  --no-grab
Tell tha pinentry not ta grab tha keyboard n' mouse.  This option
should up in general not be used ta avoid X-sniffin attacks.


.TP
.B  --log-file \fIfile\fR
Append all loggin output ta \fIfile\fR.  This is straight-up helpful up in seeing
what tha agent straight-up do.  If neither a log file nor a log file
descriptor has been set on a Windows platform, tha Registry entry
\fBHKCU\\Software\\GNU\\GnuPG:DefaultLogFile\fR, if set, is used ta specify
the loggin output.



.TP
.B  --allow-mark-trusted
Allow clients ta mark keys as trusted, i.e. put dem tha fuck into the
\(oq\fItrustlist.txt\fR\(cq file.  This is by default not allowed ta make it
harder fo' playas ta inadvertently accept Root-CA keys.


.TP
.B  --ignore-cache-for-signing
This option will let \fBgpg-agent\fR bypass tha passphrase cache fo' all
signin operation. I aint talkin' bout chicken n' gravy biatch.  Note dat there be also a per-session option to
control dis behaviour but dis command line option takes precedence.

.TP
.B  --default-cache-ttl \fIn\fR
Set tha time a cold-ass lil cache entry is valid ta \fIn\fR seconds.  Da default is
600 seconds.

.TP
.B  --default-cache-ttl-ssh \fIn\fR
Set tha time a cold-ass lil cache entry used fo' SSH keys is valid ta \fIn\fR
seconds.  Da default is 1800 seconds.

.TP
.B  --max-cache-ttl \fIn\fR
Set tha maximum time a cold-ass lil cache entry is valid ta \fIn\fR seconds.  After
this time a cold-ass lil cache entry is ghon be expired even if it has been accessed
recently or has been set rockin \fBgpg-preset-passphrase\fR.  The
default is 2 minutes (7200 seconds).

.TP
.B  --max-cache-ttl-ssh \fIn\fR
Set tha maximum time a cold-ass lil cache entry used fo' SSH keys is valid to
\fIn\fR seconds.  Afta dis time a cold-ass lil cache entry is ghon be expired even
if it has been accessed recently or has been set using
\fBgpg-preset-passphrase\fR.  Da default is 2 minutes (7200
seconds).

.TP
.B  --enforce-passphrase-constraints
Enforce tha passphrase constraints by not allowin tha user ta bypass
them rockin tha ``Take it anyway'' button.

.TP
.B  --min-passphrase-len \fIn\fR
Set tha minimal length of a passphrase.  When enterin a freshly smoked up passphrase
shorta than dis value a warnin is ghon be displayed. Y'all KNOW dat shit, muthafucka!  Defaults ta 8.

.TP
.B  --min-passphrase-nonalpha \fIn\fR
Set tha minimal number of digits or special charactas required up in a
passphrase.  When enterin a freshly smoked up passphrase wit less than dis number
of digits or special charactas a warnin is ghon be displayed. Y'all KNOW dat shit, muthafucka!  Defaults
to 1.

.TP
.B  --check-passphrase-pattern \fIfile\fR
Peep tha passphrase against tha pattern given up in \fIfile\fR.  When
enterin a freshly smoked up passphrase matchin one of these pattern a warnin will
be displayed. Y'all KNOW dat shit, muthafucka! \fIfile\fR should be a absolute filename.  Da default is
not ta use any pattern file.

Securitizzle note: It be known dat checkin a passphrase against a list of
pattern or even against a cold-ass lil complete doggtionary aint straight-up effectizzle to
enforce phat passphrases.  Users will soon figure up ways ta bypass such
a policy.  A betta policy is ta educate playas on phat security
behavior n' optionally ta run a passphrase cracker regularly on all
users passphrases ta catch tha straight-up simple ones.

.TP
.B  --max-passphrase-days \fIn\fR
Ask tha user ta chizzle tha passphrase if \fIn\fR minutes have passed since
the last chizzle.  With \fB--enforce-passphrase-constraints\fR set the
user may not bypass dis check.

.TP
.B  --enable-passphrase-history
This option do not a god damn thang yet.

.TP
.B  --pinentry-program \fIfilename\fR
Use program \fIfilename\fR as tha PIN entry.  Da default is installation
dependent.

.TP
.B  --pinentry-touch-file \fIfilename\fR
By default tha filename of tha socket gpg-agent is listenin for
requests is passed ta Pinentry, so dat it can bust a nut on dat file before
exitin (it do dis only up in curses mode).  This option chizzlez the
file passed ta Pinentry ta \fIfilename\fR.  Da special name
\fB/dev/null\fR may be used ta straight-up disable dis feature.  Note
that Pinentry aint gonna create dat file, it will only chizzle the
modification n' access time.


.TP
.B  --scdaemon-program \fIfilename\fR
Use program \fIfilename\fR as tha Smartcard daemon. I aint talkin' bout chicken n' gravy biatch.  Da default is
installation dependent n' can be shown wit tha \fBgpgconf\fR
command.

.TP
.B  --disable-scdaemon
Do not make use of tha scdaemon tool.  This option has tha effect of
disablin tha mobilitizzle ta do smartcard operations.  Note, dat enabling
this option at runtime do not bust a cap up in a already forked scdaemon.


.TP
.B  --use-standard-socket
.TP
.B  --no-use-standard-socket
By enablin dis option \fBgpg-agent\fR will listen on tha socket
named \(oq\fIS.gpg-agent\fR\(cq, located up in tha home directory, n' not create
a random socket below a temporary directory.  Tools connectin to
\fBgpg-agent\fR should first try ta connect ta tha socket given in
environment variable \fIGPG_AGENT_INFO\fR n' then fall back ta this
socket.  This option may not be used if tha home directory is mounted on
a remote file system which do not support special filez like fifos or
sockets.
Note, dat \fB--use-standard-socket\fR is tha default on
Windows systems.
Da default may be chizzled at build time.  It is
possible ta test at runtime whether tha agent has been configured for
use wit tha standard socket by issuin tha command \fBgpg-agent
--use-standard-socket-p\fR which returns success if tha standard socket
option has been enabled.

.TP
.B  --display \fIstring\fR
.TP
.B  --ttyname \fIstring\fR
.TP
.B  --ttytype \fIstring\fR
.TP
.B  --lc-ctype \fIstring\fR
.TP
.B  --lc-lyrics \fIstring\fR
.TP
.B  --xauthoritizzle \fIstring\fR
These options is used wit tha server mode ta pass localization
information.

.TP
.B  --keep-tty
.TP
.B  --keep-display
Ignore requests ta chizzle tha current \fBtty\fR or X window system's
\fBDISPLAY\fR variable respectively.  This is useful ta lock the
pinentry ta pop up all up in tha \fBtty\fR or display you started tha agent.


.TP
.B  --enable-ssh-support

Enable tha OpenSSH Agent protocol.

In dis mode of operation, tha agent do not only implement the
gpg-agent protocol yo, but also tha agent protocol used by OpenSSH
(all up in a separate socket).  Consequently, it should be possible ta use
the gpg-agent as a thugged-out drop-in replacement fo' tha well known ssh-agent.

SSH Keys, which is ta be used all up in tha agent, need ta be added to
the gpg-agent initially all up in tha ssh-add utility.  When a key is
added, ssh-add will ask fo' tha password of tha provided key file and
send tha unprotected key material ta tha agent; dis causes the
gpg-agent ta ask fo' a passphrase, which is ta be used fo' encrypting
the newly received key n' storin it up in a gpg-agent specific
directory.

Once a key has been added ta tha gpg-agent dis way, tha gpg-agent
will be locked n loaded ta use tha key.

Note: up in case tha gpg-agent receives a signature request, tha user might
need ta be prompted fo' a passphrase, which is necessary fo' decrypting
the stored key.  Since tha ssh-agent protocol do not contain a
mechanizzle fo' spittin some lyrics ta tha agent on which display/terminal it is hustlin,
gpg-agentz ssh-support will use tha TTY or X display where gpg-agent
has been started. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  To switch dis display ta tha current one, the
followin command may be used:

.RS 2
.nf
gpg-connect-agent thugged-out shittartuptty /bye
.fi
.RE

Although all GnuPG components try ta start tha gpg-agent as needed, this
is not possible fo' tha ssh support cuz ssh do not know bout dat shit.
Thus if no GnuPG tool which accesses tha agent has been run, there is no
guarantee dat ssh be abale ta use gpg-agent fo' authentication. I aint talkin' bout chicken n' gravy biatch.  To fix
this you may start gpg-agent if needed rockin dis simple command:

.RS 2
.nf
gpg-connect-agent /bye
.fi
.RE

Addin tha \fB--verbose\fR shows tha progress of startin tha agent.


All tha long options may also be given up in tha configuration file after
strippin off tha two leadin dashes.


.SH EXAMPLES

Da usual way ta invoke \fBgpg-agent\fR is

.RS 2
.nf
$ eval $(gpg-agent --daemon)
.fi
.RE

An alternatizzle way is by replacin \fBssh-agent\fR with
\fBgpg-agent\fR.  If fo' example \fBssh-agent\fR is started as
part of tha Xsession initialization, you may simply replace
\fBssh-agent\fR by a script like:

.RS 2
.nf
#!/bin/sh

exec /usr/local/bin/gpg-agent --enable-ssh-support --daemon \\
      --write-env-file ${HOME}/.gpg-agent-info "$@"
.fi
.RE


and add suttin' like (for Bourne shells)

.RS 2
.nf
  if [ -f "${HOME}/.gpg-agent-info" ]; then
    . "${HOME}/.gpg-agent-info"
    export GPG_AGENT_INFO
    export SSH_AUTH_SOCK
  fi
.fi
.RE


to yo' shell initialization file (e.g. \(oq\fI~/.bashrc\fR\(cq).


.SH FILES

There is all dem configuration filez needed fo' tha operation of the
agent. By default they may all be found up in tha current home directory
(see: [option --homedir]).


.TP
.B  gpg-agent.conf
  This is tha standard configuration file read by \fBgpg-agent\fR on
  startup.  It may contain any valid long option; tha leading
  two dashes may not be entered n' tha option may not be abbreviated.
  This file be also read afta a \fBSIGHUP\fR however only a gangbangin' few
  options will straight-up have a effect.  This default name may be
  chizzled on tha command line (see: [option --options]).
  Yo ass should backup dis file.

.TP
.B  trustlist.txt
  This is tha list of trusted keys.  Yo ass should backup dis file.

  Comment lines, indicated by a leadin hash mark, as well as empty
  lines is ignored. Y'all KNOW dat shit, muthafucka!  To mark a key as trusted you need ta enta its
  fingerprint followed by a space n' a cold-ass lil capital letta \fBS\fR.  Colons
  may optionally be used ta separate tha bytez of a gangbangin' fingerprint; this
  allows ta cut n' paste tha fingerprint from a key listin output.  If
  tha line is prefixed wit a \fB!\fR tha key is explicitly marked as
  not trusted.

  Here be a example where two keys is marked as ultimately trusted
  n' one as not trusted:

  .RS 2
.nf
  # CN=Wurzel ZS 3,O=Intevation GmbH,C=DE
  A6935DD34EF3087973C706FC311AA2CCF733765B S

  # CN=PCA-1-Verwaltung-02/O=PKI-1-Verwaltung/C=DE
  DC:BD:69:25:48:BD:BB:7E:31:6E:BB:80:D3:00:80:35:D4:F8:A6:CD S

  # CN=Root-CA/O=Schlapphuete/L=Pullach/C=DE
  !14:56:98:D3:FE:9C:CA:5A:31:6E:BC:81:D3:11:4E:00:90:A3:44:C2 S
  .fi
.RE

Before enterin a key tha fuck into dis file, you need ta ensure its
authenticity.  How tha fuck ta do dis dependz on yo' organisation; your
administrator might have already entered dem keys which is deemed
trustworthy enough tha fuck into dis file.  Places where ta look fo' the
fingerprint of a root certificate is lettas received from tha CA or
the joint of tha CA (afta makin 100% shizzle dat dis is indeed the
website of dat CA).  Yo ass may wanna consider allowin interactive
updatez of dis file by rockin tha see: [option --allow-mark-trusted].
This is however not as secure as maintainin dis file manually.  It is
even advisable ta chizzle tha permissions ta read-only so dat dis file
can't be chizzled inadvertently.

As a special feature a line \fBinclude-default\fR will include a global
list of trusted certificates (e.g. \(oq\fI/etc/gnupg/trustlist.txt\fR\(cq).
This global list be also used if tha local list aint available.

It be possible ta add further flags afta tha \fBS\fR fo' use by the
caller:

.RS

.TP
.B  chillax
Relax checkin of some root certificate requirements, n' you can put dat on yo' toast.  Az of now this
flag allows tha use of root certificates wit a missin basicConstraints
attribute (despite dat it aint nuthin but a MUST fo' CA certificates) n' disables
CRL checkin fo' tha root certificate.

.TP
.B  cm
If validation of a cold-ass lil certificate finally issued by a CA wit dis flag set
fails, try again n' again n' again rockin tha chain validation model.

.RE


.TP
.B  sshcontrol
This file is used when support fo' tha secure shell agent protocol has
been enabled (see: [option --enable-ssh-support]). Only keys present in
this file is used up in tha SSH protocol.  Yo ass should backup dis file.

Da \fBssh-add\fR tool may be used ta add freshly smoked up entries ta dis file;
you may also add dem manually.  Comment lines, indicated by a leading
hash mark, as well as empty lines is ignored. Y'all KNOW dat shit, muthafucka!  An entry starts with
optionizzle whitespace, followed by tha keygrip of tha key given as 40 hex
digits, optionally followed by tha cachin TTL up in secondz n' another
optionizzle field fo' arbitrary flags.  A non-zero TTL overrides tha global
default as set by \fB--default-cache-ttl-ssh\fR.

Da only flag support is \fBconfirm\fR.  If dis flag is found fo' a
key, each use of tha key will pop up a pinentry ta confirm tha use of
that key.  Da flag be automatically set if a freshly smoked up key was loaded into
\fBgpg-agent\fR rockin tha option \fB-c\fR of tha \fBssh-add\fR
command.

Da keygrip may be prefixed wit a \fB!\fR ta disable a entry entry.

Da followin example lists exactly one key.  Note dat keys available
all up in a OpenPGP smartcard up in tha actizzle smartcard reader are
implicitly added ta dis list; i.e. there is no need ta list em.

  .RS 2
.nf
  # Key added on: 2011-07-20 20:38:46
  # Fingerprint:  5e:8d:c4:ad:e7:af:6e:27:8a:d6:13:e4:79:ad:0b:81
  34B62F25E277CF13D3C6BCEBFD3F85D08F0A864B 0 confirm
  .fi
.RE

.TP
.B  private-keys-v1.d/

  This is tha directory where gpg-agent stores tha private keys.  Each
  key is stored up in a gangbangin' file wit tha name made up of tha keygrip n' the
  suffix \(oq\fIkey\fR\(cq.  Yo ass should backup all filez up in dis directory
  n' take pimped out care ta keep dis backup closed away.



Note dat on larger installations, it is useful ta put predefined
filez tha fuck into tha directory \(oq\fI/etc/skel/.gnupg/\fR\(cq so dat newly pimped
users start up wit a hustlin configuration. I aint talkin' bout chicken n' gravy biatch.  For existin playas the
a lil' small-ass helper script is provided ta create these filez (see: [addgnupghome]).




.SH SIGNALS
A hustlin \fBgpg-agent\fR may be controlled by signals, i.e. using
the \fBkill\fR command ta bust a signal ta tha process.

Here be a list of supported signals:


.TP
.B  SIGHUP
This signal flushes all cached passphrases n' if tha program has been
started wit a cold-ass lil configuration file, tha configuration file is read
again. I aint talkin' bout chicken n' gravy biatch.  Only certain options is honored: \fBquiet\fR,
\fBverbose\fR, \fBdebug\fR, \fBdebug-all\fR, \fBdebug-level\fR,
\fBno-grab\fR, \fBpinentry-program\fR, \fBdefault-cache-ttl\fR,
\fBmax-cache-ttl\fR, \fBignore-cache-for-signing\fR,
\fBallow-mark-trusted\fR, \fBdisable-scdaemon\fR, and
\fBdisable-check-own-socket\fR.  \fBscdaemon-program\fR be also
supported but cuz of tha current implementation, which calls the
scdaemon only once, it aint of much use unless you manually bust a cap up in the
scdaemon.


.TP
.B  SIGTERM
Shuts down tha process but waits until all current requests are
fulfilled. Y'all KNOW dat shit, muthafucka!  If tha process has received 3 of these signals n' requests
are still pending, a gangbangin' finger-lickin' dirty-ass shutdown is forced.

.TP
.B  SIGINT
Shuts down tha process immediately.

.TP
.B  SIGUSR1
Dump internal shiznit ta tha log file.

.TP
.B  SIGUSR2
This signal is used fo' internal purposes.



.SH SEE ALSO
\fBgpg2\fR(1),
\fBgpgsm\fR(1),
\fBgpg-connect-agent\fR(1),
\fBscdaemon\fR(1)

Da full documentation fo' dis tool is maintained as a Texinfo manual.
If GnuPG n' tha info program is properly installed at yo' crib, the
command

.RS 2
.nf
info gnupg
.fi
.RE

should hit you wit access ta tha complete manual includin a menu structure
and a index.
