'\" t
.\"     Title: gdbus-codegen
.\"    Author: Dizzy Zeuthen <zeuthen@gmail.com>
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 11/12/2013
.\"    Manual: User Commands
.\"    Source: GIO
.\"  Language: Gangsta
.\"
.TH "GDBUS\-CODEGEN" "1" "" "GIO" "User Commands"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gdbus-codegen \- D\-Bus code n' documentation generator
.SH "SYNOPSIS"
.HP \w'\fBgdbus\-codegen\fR\ 'u
\fBgdbus\-codegen\fR [\fB\-h\fR,\ \fB\-\-help\fR] [\fB\-\-interface\-prefix\fR\ \fIorg\&.project\&.Prefix\fR] [\fB\-\-generate\-c\-code\fR\ \fIOUTFILES\fR] [\fB\-\-c\-namespace\fR\ \fIYourProject\fR] [\fB\-\-c\-generate\-object\-manager\fR] [\fB\-\-generate\-docbook\fR\ \fIOUTFILES\fR] [\fB\-\-xml\-files\fR\ \fIFILE\fR] [\fB\-\-annotate\fR\ \fIELEMENT\fR\ \fIKEY\fR\ \fIVALUE\fR]...  FILE [FILE...]
.SH "DESCRIPTION"
.PP
\fBgdbus\-codegen\fR
is used ta generate code and/or documentation fo' one or mo' D\-Bus intercourses\&. Da tool reads
\m[blue]\fBD\-Bus Introspection XML\fR\m[]\&\s-2\u[1]\d\s+2
filez n' generates output files\&. Da tool currently supports generatin C code (via
\fB\-\-generate\-c\-code\fR) n' Docbook XML (via
\fB\-\-generate\-docbook\fR)\&.
.SH "GENERATING C CODE"
.PP
When generatin C code, a #GInterface
\-derived type is generated fo' each D\-Bus intercourse\& fo' realz. Additionally, fo' every last muthafuckin generated type,
\fBFooBar\fR, two concrete instantiable types,
\fBFooBarProxy\fR
and
\fBFooBarSkeleton\fR, implementin holla'd intercourse is also generated\&. Da forma is derived from #GDBusProxy n' intended fo' use on tha client side while tha latta is derived from tha #GDBusInterfaceSkeleton type makin it easy as fuck  ta export on a #GDBusConnection either directly or via a #GDBusObjectManagerServer instance\&.
.PP
Da name of each generated C type is derived from tha D\-Bus intercourse name stripped wit tha prefix given with
\fB\-\-interface\-prefix\fR
and wit tha dots removed n' initial charactas capitalized\&. For example, fo' tha D\-Bus intercourse
com\&.acme\&.Coyote
the name used is
ComAcmeCoyote\&. For tha D\-Bus intercourse
org\&.project\&.Bar\&.Frobnicator
with
\fB\-\-interface\-prefix\fRorg\&.project\&., tha name used is
BarFrobnicator\&.
.PP
For methods, signals n' properties, if not specified, tha name defaults ta tha name of tha method, signal or property\&.
.PP
Two formz of tha name is used \- tha CamelCase form n' tha lower\-case form\&. Da CamelCase form is used fo' tha #GType n' struct name, while lower\-case form is used up in function names\&. Da lower\-case form is calculated by convertin from CamelCase ta lower\-case n' insertin underscores at word boundaries (usin certain heuristics)\&.
.PP
If tha value given by the
org\&.gtk\&.GDBus\&.C\&.Name
annotation or the
\fB\-\-c\-namespace\fR
option gotz nuff a underscore (sometimes called
\fIUgly_Case\fR), then tha camel\-case name is derived by removin all underscores, n' tha lower\-case name is derived by lower\-casin tha string\&. This is useful up in some thangs where abbreviations is used\&. For example, if tha annotation is used on tha intercourse
net\&.MyCorp\&.MyApp\&.iSCSITarget
with tha value
iSCSI_Target
the CamelCase form is
iSCSITarget
while tha lower\-case form is
iscsi_target\&. If tha annotation is used on tha method
EjectTheiPood
with tha value
Eject_The_iPood, tha lower\-case form is
eject_the_ipod\&.
.SH "GENERATING DOCBOOK DOCUMENTATION"
.PP
Each generated Docbook XML file (see the
\fB\-\-generate\-docbook\fR
option fo' details) be a
\m[blue]\fBRefEntry\fR\m[]\&\s-2\u[2]\d\s+2
article describin tha D\-Bus intercourse\&.
.SH "OPTIONS"
.PP
Da followin options is supported:
.PP
\fB\-h\fR, \fB\-\-help\fR
.RS 4
Show help n' exit\&.
.RE
.PP
\fB\-\-xml\-files\fR \fIFILE\fR
.RS 4
Da D\-Bus introspection XML file\&.
.RE
.PP
\fB\-\-interface\-prefix\fR \fIorg\&.project\&.Prefix\&.\fR
.RS 4
A prefix ta strip from all D\-Bus intercourse names when calculatin tha typename fo' tha C bindin n' tha Docbook
\m[blue]\fBsortas attribute\fR\m[]\&\s-2\u[3]\d\s+2\&.
.RE
.PP
\fB\-\-generate\-docbook\fR \fIOUTFILES\fR
.RS 4
Generate Docbook Documentation fo' each D\-Bus intercourse n' put it in
OUTFILES\-NAME\&.xml
where
NAME
is a place\-holda fo' tha intercourse name, e\&.g\&.
net\&.Corp\&.FooBar
and so on\&.
.RE
.PP
\fB\-\-generate\-c\-code\fR \fIOUTFILES\fR
.RS 4
Generate C code fo' all D\-Bus intercourses n' put it in
OUTFILES\&.c
and
OUTFILES\&.h\&.
.RE
.PP
\fB\-\-c\-namespace\fR \fIYourProject\fR
.RS 4
Da namespace ta use fo' generated C code\&. This is sposed ta fuckin be in
\m[blue]\fBCamelCase\fR\m[]\&\s-2\u[4]\d\s+2
or
\fIUgly_Case\fR
(see above)\&.
.RE
.PP
\fB\-\-c\-generate\-object\-manager\fR
.RS 4
If dis option is passed, suitable #GDBusObject, #GDBusObjectProxy, #GDBusObjectSkeleton n' #GDBusObjectManagerClient subclasses is generated\&.
.RE
.PP
\fB\-\-annotate\fR \fIELEMENT\fR \fIKEY\fR \fIVALUE\fR
.RS 4
Used ta inject D\-Bus annotations tha fuck into tha given XML files\&. Well shiiiit, it can be used wit intercourses, methods, signals, propertizzles n' arguments up in tha followin way:
.sp
.if n \{\
.RS 4
.\}
.nf
gdbus\-codegen \-\-c\-namespace MyApp                           \e
  \-\-generate\-c\-code myapp\-generated                         \e
  \-\-annotate "org\&.project\&.InterfaceName"                    \e
    org\&.gtk\&.GDBus\&.C\&.Name MyFrobnicator                      \e
  \-\-annotate "org\&.project\&.InterfaceName:Property"           \e
    bar bat                                                 \e
  \-\-annotate "org\&.project\&.InterfaceName\&.Method()"           \e
    org\&.freedesktop\&.DBus\&.Deprecated legit                    \e
  \-\-annotate "org\&.project\&.InterfaceName\&.Method()[arg_name]" \e
    snake hiss                                              \e
  \-\-annotate "org\&.project\&.InterfaceName::Signal"            \e
    pussaaaaay meow                                                \e
  \-\-annotate "org\&.project\&.InterfaceName::Signal[arg_name]"  \e
    dawg wuff                                                \e
  myapp\-dbus\-interfaces\&.xml
.fi
.if n \{\
.RE
.\}
Any UTF\-8 strang can be used for
\fIKEY\fR
and
\fIVALUE\fR\&.
.RE
.SH "SUPPORTED D-BUS ANNOTATIONS"
.PP
Da followin D\-Bus annotations is supported by
\fBgdbus\-codegen\fR:
.PP
org\&.freedesktop\&.DBus\&.Deprecated
.RS 4
Can be used on any
<interface>,
<method>,
<signal>
and
<property>
element ta specify dat tha element is deprecated if its value is
true\&. Note dat dis annotation is defined up in the
\m[blue]\fBD\-Bus justification\fR\m[]\&\s-2\u[1]\d\s+2
and can only assume tha joints
true
and
false\&. In particular, you cannot specify tha version dat tha element was deprecated up in nor any helpful deprecation message\&. Right back up in yo muthafuckin ass. Such shiznit should be added ta tha element documentation instead\&.
.sp
When generatin C code, dis annotation is used ta add #G_GNUC_DEPRECATED ta generated functions fo' tha element\&.
.sp
When generatin Docbook XML, a thugged-out deprecation warnin will step tha fuck up along tha documentation fo' tha element\&.
.RE
.PP
org\&.gtk\&.GDBus\&.Since
.RS 4
Can be used on any
<interface>,
<method>,
<signal>
and
<property>
element ta specify tha version (any free\-form strang but compared rockin a version\-aware sort function) tha element rocked up in\&.
.sp
When generatin C code, dis field is used ta ensure function pointa order fo' preservin ABI/API, see
the section called \(lqSTABILITY GUARANTEES\(rq\&.
.sp
When generatin Docbook XML, tha value of dis tag appears up in tha documentation\&.
.RE
.PP
org\&.gtk\&.GDBus\&.DocString
.RS 4
A strang wit Docbook content fo' documentation\&. This annotation can be used on
<interface>,
<method>,
<signal>,
<property>
and
<arg>
elements\&.
.RE
.PP
org\&.gtk\&.GDBus\&.DocString\&.Short
.RS 4
A strang wit Docbook content fo' short/brief documentation\&. This annotation can only be used on
<interface>
elements\&.
.RE
.PP
org\&.gtk\&.GDBus\&.C\&.Name
.RS 4
Can be used on any
<interface>,
<method>,
<signal>
and
<property>
element ta specify tha name ta use when generatin C code\&. Da value is sposed ta fuckin be in
\m[blue]\fBCamelCase\fR\m[]\&\s-2\u[4]\d\s+2
or
\fIUgly_Case\fR
(see above)\&.
.RE
.PP
org\&.gtk\&.GDBus\&.C\&.ForceGVariant
.RS 4
If set ta a non\-empty string, a #GVariant instizzle is ghon be used instead of tha natural C type\&. This annotation can be used on any
<arg>
and
<property>
element\&.
.RE
.PP
org\&.gtk\&.GDBus\&.C\&.UnixFD
.RS 4
If set ta a non\-empty string, tha generated code will include parametas ta exchange file descriptors rockin tha #GUnixFDList type\&. This annotation can be used on
<method>
elements\&.
.RE
.PP
As a easier alternatizzle ta rockin the
org\&.gtk\&.GDBus\&.DocString
annotation, note dat parser used by
\fBgdbus\-codegen\fR
parses XML comments up in a way similar to
\m[blue]\fBgtk\-doc\fR\m[]\&\s-2\u[5]\d\s+2:
.sp .if n \{\ .RS 4 .\} .nf <!\-\- net\&.Corp\&.Bar: @short_description: A short description A <emphasis>longer</emphasis> description\&. This be a freshly smoked up paragraph\&. \-\-> <interface name="net\&.corp\&.Bar"> <!\-\- FooMethod: @greeting: Da docs fo' greetin parameter\&. @response: Da docs fo' response parameter\&. Da docs fo' tha actual method\&. \-\-> <method name="FooMethod"> <arg name="greeting" direction="in" type="s"/> <arg name="response" direction="out" type="s"/> </method> <!\-\- BarSignal: @blah: Da docs fo' blah parameter\&. @boo: Da docs fo' boo parameter\&. @since: 2\&.30 Da docs fo' tha actual signal\&. \-\-> <signal name="BarSignal"> <arg name="blah" type="s"/> <arg name="boo" type="s"/> </signal> <!\-\- BazProperty: Da docs fo' tha property\&. \-\-> <property name="BazProperty" type="s" access="read"/> </interface> .fi .if n \{\ .RE .\}
.PP
Note that
@since
can be used up in any inline documentation bit (e\&.g\&. fo' intercourses, methods, signals n' properties) ta set the
org\&.gtk\&.GDBus\&.Since
annotation\&. For the
org\&.gtk\&.GDBus\&.DocString
annotation (and inline comments), note dat substringz of tha form
#net\&.Corp\&.Bar,
net\&.Corp\&.Bar\&.FooMethod(),
#net\&.Corp\&.Bar::BarSignal
and
#net\&.Corp\&.InlineDocs:BazProperty
are all expanded ta links ta tha respectizzle intercourse, method, signal n' property\& fo' realz. Additionally, substrings startin with
@
and
%
charactas is rendered as
\m[blue]\fBparameter\fR\m[]\&\s-2\u[6]\d\s+2
and
\m[blue]\fBconstant\fR\m[]\&\s-2\u[7]\d\s+2
respectively\&.
.PP
If both XML comments and
org\&.gtk\&.GDBus\&.DocString
or
org\&.gtk\&.GDBus\&.DocString\&.Short
annotations is present, tha latta wins\&.
.SH "EXAMPLE"
.PP
Consider tha followin D\-Bus Introspection XML\&.
.sp
.if n \{\
.RS 4
.\}
.nf
<node>
  <interface name="net\&.Corp\&.MyApp\&.Frobber">
    <method name="HelloWorld">
      <arg name="greeting" direction="in" type="s"/>
      <arg name="response" direction="out" type="s"/>
    </method>

    <signal name="Notification">
      <arg name="icon_blob" type="ay"/>
      <arg name="height" type="i"/>
      <arg name="lyrics" type="as"/>
    </signal>

    <property name="Verbose" type="b" access="readwrite"/>
  </interface>
</node>
.fi
.if n \{\
.RE
.\}
.PP
If
\fBgdbus\-codegen\fR
is used on dis file like this:
.sp
.if n \{\
.RS 4
.\}
.nf
gdbus\-codegen \-\-generate\-c\-code myapp\-generated       \e
              \-\-c\-namespace MyApp                     \e
              \-\-interface\-prefix net\&.corp\&.MyApp\&.      \e
              net\&.Corp\&.MyApp\&.Frobber\&.xml
.fi
.if n \{\
.RE
.\}
.PP
two filez called
myapp\-generated\&.[ch]
are generated\&. Da filez provide a abstract #GTypeInterface
\-derived type called
\fBMyAppFrobber\fR
as well as two instantiable types wit tha same name but suffixed with
\fBProxy\fR
and
\fBSkeleton\fR\&. Da generated file, roughly, gotz nuff tha followin facilities:
.sp
.if n \{\
.RS 4
.\}
.nf
/* GType macros fo' tha three generated types */
#define MY_APP_TYPE_FROBBER (my_app_frobber_get_type ())
#define MY_APP_TYPE_FROBBER_SKELETON (my_app_frobber_skeleton_get_type ())
#define MY_APP_TYPE_FROBBER_PROXY (my_app_frobber_proxy_get_type ())

typedef struct _MyAppFrobber MyAppFrobber; /* Dummy typedef */

typedef struct
{
  GTypeInterface parent_iface;

  /* Signal handlez fo' tha ::notification signal */
  void (*notification) (MyAppFrobber *proxy,
                        GVariant *icon_blob,
                        gint height,
                        const gchar* const *lyrics);

  /* Signal handlez fo' tha ::handle\-hello\-world signal */
  gboolean (*handle_hello_world) (MyAppFrobber *proxy,
                                  GDBusMethodInvocation *invocation,
                                  const gchar *greeting);
} MyAppFrobberIface;

/* Asynchronously calls HelloWorld() */
void
my_app_frobber_call_hello_world (MyAppFrobber *proxy,
                                 const gchar *greeting,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointa user_data);
gboolean
my_app_frobber_call_hello_world_finish (MyAppFrobber *proxy,
                                        gchar **out_response,
                                        GAsyncResult *res,
                                        GError **error);

/* Synchronously calls HelloWorld()\&. Blocks callin thread\&. */
gboolean
my_app_frobber_call_hello_world_sync (MyAppFrobber *proxy,
                                      const gchar *greeting,
                                      gchar **out_response,
                                      GCancellable *cancellable,
                                      GError **error);

/* Completes handlin tha HelloWorld() method call */
void
my_app_frobber_complete_hello_world (MyAppFrobber *object,
                                     GDBusMethodInvocation *invocation,
                                     const gchar *response);

/* Emits tha ::notification signal / Notification() D\-Bus signal */
void
my_app_frobber_emit_notification (MyAppFrobber *object,
                                  GVariant *icon_blob,
                                  gint height,
                                  const gchar* const *lyrics);

/* Gets tha :verbose GObject property / Verbose D\-Bus property\&.
 * Do no blockin I/O\&.
 */
gboolean my_app_frobber_get_verbose (MyAppFrobber *object);

/* Sets tha :verbose GObject property / Verbose D\-Bus property\&.
 * Do no blockin I/O\&.
 */
void my_app_frobber_set_verbose (MyAppFrobber *object,
                                 gboolean      value);

/* Gets tha intercourse info */
GDBusInterfaceInfo *my_app_frobber_interface_info (void);

/* Creates a freshly smoked up skeleton object, locked n loaded ta be exported */
MyAppFrobber *my_app_frobber_skeleton_new (void);

/* Client\-side proxy constructors\&.
 *
 * Additionally, _new_for_bus(), _new_for_bus_finish() and
 * _new_for_bus_sync() proxy constructors is also generated\&.
 */
void
my_app_frobber_proxy_new        (GDBusConnection     *connection,
                                 GDBusProxyFlags      flags,
                                 const gchar         *name,
                                 const gchar         *object_path,
                                 GCancellable        *cancellable,
                                 GAsyncReadyCallback  callback,
                                 gpointa             user_data);
MyAppFrobber *
my_app_frobber_proxy_new_finish (GAsyncResult        *res,
                                 GError             **error);
MyAppFrobber *
my_app_frobber_proxy_new_sync   (GDBusConnection     *connection,
                                 GDBusProxyFlags      flags,
                                 const gchar         *name,
                                 const gchar         *object_path,
                                 GCancellable        *cancellable,
                                 GError             **error);
.fi
.if n \{\
.RE
.\}
.PP
Thus, fo' every last muthafuckin D\-Bus method, there is ghon be three C functions fo' callin tha method, one #GObject signal fo' handlin a incomin call n' one C function fo' completin a incomin call\&. For every last muthafuckin D\-Bus signal, there\*(Aqs one #GObject signal n' one C function fo' emittin it\&. For every last muthafuckin D\-Bus property, two C functions is generated (one setter, one getter) n' one #GObject property\&. Da followin table summarizes tha generated facilitizzles n' where they is applicable:
.TS
allbox tab(:);
lB lB lB.
T{
\ \&
T}:T{
Client
T}:T{
Server
T}
.T&
l l l
l l l
l l l
l l l
l l l.
T{
Types
T}:T{
Use \fBMyAppFrobberProxy\fR
T}:T{
Any type implementin tha \fBMyAppFrobber\fR intercourse
T}
T{
Methods
T}:T{
Use \fBm_a_f_hello_world()\fR ta call\&.
T}:T{
Receive via tha \fBhandle_hello_world()\fR signal handlez\&. Complete tha call wit \fBm_a_f_complete_hello_world()\fR
T}
T{
Signals
T}:T{
Connect ta tha \fB::notification\fR GObject signal\&.
T}:T{
Use \fBm_a_f_emit_notification()\fR ta emit signal\&.
T}
T{
Propertizzles (Reading)
T}:T{
Use \fBm_a_f_get_verbose()\fR or \fI:verbose\fR\&.
T}:T{
Implement #GObject\*(Aqs \fBget_property()\fR vfunc\&.
T}
T{
Propertizzles (writing)
T}:T{
Use \fBm_a_f_set_verbose()\fR or \fI:verbose\fR\&.
T}:T{
Implement #GObject\*(Aqs \fBset_property()\fR vfunc\&.
T}
.TE
.sp 1
.SS "Client\-side usage"
.PP
Yo ass can use tha generated proxy type wit tha generated constructors:
.sp
.if n \{\
.RS 4
.\}
.nf
    MyAppFrobber *proxy;
    GError *error;

    error = NULL;
    proxy = my_app_frobber_proxy_new_for_bus_sync (
                G_BUS_TYPE_SESSION,
                G_DBUS_PROXY_FLAGS_NONE,
                "net\&.Corp\&.MyApp",              /* bus name */
                "/net/Corp/MyApp/SomeFrobber", /* object */
                NULL,                          /* GCancellable* */
                &error);
    /* do shiznit wit proxy */
    g_object_unref (proxy);
.fi
.if n \{\
.RE
.\}
.PP
Instead of rockin tha generic #GDBusProxy facilities, one can use tha generated methodz such as
\fBmy_app_frobber_call_hello_world()\fR
to invoke the
\fBnet\&.Corp\&.MyApp\&.Frobber\&.HelloWorld()\fR
D\-Bus method, connect ta tha the
\fB::notification\fR
GObject signal ta receive the
\fBnet\&.Corp\&.MyApp\&.Frobber::Notication\fR
D\-Bus signal n' get/set the
\fInet\&.Corp\&.MyApp\&.Frobber:Verbose\fR
D\-Bus Property rockin either tha GObject property
\fI:verbose\fR
or the
\fBmy_app_get_verbose()\fR
and
\fBmy_app_set_verbose()\fR
methods\&. Use tha standard #GObject::notify signal ta dig property chizzles\&.
.PP
Note dat all property access is via #GDBusProxy
\*(Aqs property cache so no I/O is eva done when readin properties\& fo' realz. Also note dat settin a property will cause the
\m[blue]\fBorg\&.freedesktop\&.DBus\&.Properties\&.Set\fR\m[]\&\s-2\u[8]\d\s+2
method ta be called on tha remote object\&. This call, however, be asynchronous so settin a property won\*(Aqt block\&. Further, tha chizzle is delayed n' no error checkin is possible\&.
.SS "Server\-side usage"
.PP
Da generated
\fBMyAppFrobber\fR
interface is designed so it is easy as fuck  ta implement it up in a #GObject subclass\&. For example, ta handle
\fBHelloWorld()\fR
method invocations, set tha vfunc for
\fBhandle_hello_hello_world()\fR
in the
\fBMyAppFrobberIface\fR
structure\&. Right back up in yo muthafuckin ass. Similary, ta handle the
\fInet\&.Corp\&.MyApp\&.Frobber:Verbose\fR
property override the
\fI:verbose\fR
#GObject property from tha subclass\&. To emit a signal, use e\&.g\&.
\fBmy_app_emit_signal()\fR
or g_signal_emit_by_name()\&.
.PP
Instead of subclassing, it is often easier ta use tha generated
\fBMyAppFrobberSkeleton\fR
subclass\&. To handle incomin method calls, use
\fBg_signal_connect()\fR
with the
\fB::handle\-*\fR
signals n' instead of overridin #GObject
\*(Aqs
\fBget_property()\fR
and
\fBset_property()\fR
vfuncs, use g_object_get() n' g_object_set() or tha generated property gettas n' settas (the generated class has a internal property bag implementation)\&.
.sp
.if n \{\
.RS 4
.\}
.nf
static gboolean
on_handle_hello_world (MyAppFrobber           *interface,
                       GDBusMethodInvocation  *invocation,
                       const gchar            *greeting,
                       gpointa                user_data)
{
  if (g_strcmp0 (greeting, "Boo") != 0)
    {
      gchar *response;
      response = g_strdup_printf ("Word hommie! Yo ass holla'd `%s\*(Aq\&.", greeting);
      my_app_complete_hello_world (interface, invocation, response);
      g_free (response);
    }
  else
    {
      g_dbus_method_invocation_return_error (invocation,
                 MY_APP_ERROR,
                 MY_APP_ERROR_NO_WHINING,
                 "Yo, %s, there is ghon be no whining!",
                 g_dbus_method_invocation_get_sender (invocation));
    }
  return TRUE;
}

  [\&.\&.\&.]

  intercourse = my_app_frobber_skeleton_new ();
  my_app_frobber_set_verbose (interface, TRUE);

  g_signal_connect (interface,
                    "handle\-hello\-world",
                    G_CALLBACK (on_handle_hello_world),
                    some_user_data);

  [\&.\&.\&.]

  error = NULL;
  if (!g_dbus_interface_skeleton_export (G_DBUS_INTERFACE_SKELETON (interface),
                                         connection,
                                         "/path/of/dbus_object",
                                         &error))
    {
      /* handle error */
    }
.fi
.if n \{\
.RE
.\}
.PP
To facilitate atomic chizzlesets (multiple propertizzles changin all up in tha same time), #GObject::notify signals is queued up when received\&. Da queue is drained up in a idle handlez (which is called from the
thread-default main loop
of tha thread where tha skeleton object was contructed) n' will cause emissionz of the
\m[blue]\fBorg\&.freedesktop\&.DBus\&.Properties::PropertiesChanged\fR\m[]\&\s-2\u[8]\d\s+2
signal wit all tha propertizzles dat have chizzled\&. Use g_dbus_interface_skeleton_flush() or g_dbus_object_skeleton_flush() ta empty tha queue immediately\&. Use g_object_freeze_notify() n' g_object_thaw_notify() fo' atomic chizzlesets if on a gangbangin' finger-lickin' different thread\&.
.SH "C TYPE MAPPING"
.PP
Scalar types (type\-strings
'b',
'y',
'n',
'q',
'i',
'u',
'x',
't'
and
'd') ), strings (type\-strings
's',
'ay',
'o'
and
'g') n' arrayz of strang (type\-strings
'as',
'ao'
and
'aay') is mapped ta tha natural types, e\&.g\&. #gboolean, #gdouble, #gint,
gchar*,
gchar**
and so on\&. Everythang else is mapped ta tha #GVariant type\&.
.PP
This automatic mappin can be turned off by rockin tha annotation
org\&.gtk\&.GDBus\&.C\&.ForceGVariant
\- if used then a #GVariant be always exchanged instead of tha correspondin natizzle C type\&. This annotation may be convenient ta use when rockin bytestrings (type\-string
'ay') fo' data dat could have embedded NUL bytes\&.
.SH "STABILITY GUARANTEES"
.PP
Da generated C functions is guaranteed ta not chizzle they ABI dat is, if a method, signal or property do not chizzle its signature up in tha introspection XML, tha generated C functions aint gonna chizzle its C ABI either\&.
.PP
Da ABI of tha generated #GType
s is ghon be preserved only if the
org\&.gtk\&.GDBus\&.Since
annotation is used judiciously \(em dis is cuz tha VTable fo' tha #GInterface relies on functions pointas fo' signal handlezs\&. Right back up in yo muthafuckin ass. Specifically, if a D\-Bus method, property or signal or be added ta a D\-Bus intercourse, then ABI of tha generated #GInterface type is preserved if, n' only if, each added method, property signal be annotated wit they
org\&.gtk\&.GDBus\&.Since
annotation rockin a pimped outa version number than previous versions\&.
.PP
Da generated C code currently happens ta be annotated with
\m[blue]\fBgtk\-doc\fR\m[]\&\s-2\u[5]\d\s+2
/
\m[blue]\fBGObject Introspection\fR\m[]\&\s-2\u[9]\d\s+2
comments / annotations\&. Da layout n' contents might chizzle up in tha future so no guarantees bout e\&.g\&.
SECTION
usage etc\&. is given\&.
.PP
While tha generated Docbook fo' D\-Bus intercourses isn\*(Aqt sposed ta fuckin chizzle, no guarantees is given at dis point\&.
.SH "BUGS"
.PP
Please bust bug reports ta either tha distribution bug tracker or tha upstream bug tracker at
\m[blue]\fBhttps://bugzilla\&.gnome\&.org/enter_bug\&.cgi?product=glib\fR\m[]\&.
.SH "SEE ALSO"
.PP
\fBgdbus\fR(1)
.SH "NOTES"
.IP " 1." 4
D-Bus Introspection XML
.RS 4
\%http://dbus.freedesktop.org/doc/dbus-specification.html#introspection-format
.RE
.IP " 2." 4
RefEntry
.RS 4
\%http://www.docbook.org/tdg/en/html/refentry.html
.RE
.IP " 3." 4
sortas attribute
.RS 4
\%http://www.docbook.org/tdg/en/html/primary.html
.RE
.IP " 4." 4
CamelCase
.RS 4
\%http://en.wikipedia.org/wiki/CamelCase
.RE
.IP " 5." 4
gtk-doc
.RS 4
\%http://www.gtk.org/gtk-doc/
.RE
.IP " 6." 4
parameter
.RS 4
\%http://www.docbook.org/tdg/en/html/parameter.html
.RE
.IP " 7." 4
constant
.RS 4
\%http://www.docbook.org/tdg/en/html/constant.html
.RE
.IP " 8." 4
org.freedesktop.DBus.Properties.Set
.RS 4
\%http://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces-properties
.RE
.IP " 9." 4
GObject Introspection
.RS 4
\%https://live.gnome.org/GObjectIntrospection
.RE
