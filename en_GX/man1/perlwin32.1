.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLWIN32 1"
.TH PERLWIN32 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlwin32 \- Perl under Windows
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
These is instructions fo' buildin Perl under Windows 2000 n' later.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Before you start, you should glizzle all up in tha \s-1README\s0 file
found up in tha top-level directory ta which tha Perl distribution
was extracted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Make shizzle you read n' KNOW tha terms under
which dis software is bein distributed.
.PP
Also make shizzle you read \*(L"\s-1BUGS AND CAVEATS\*(R"\s0 below fo' the
known limitationz of dis port.
.PP
Da \s-1INSTALL\s0 file up in tha perl top-level has much shiznit dat is
only relevant ta playas buildin Perl on Unix-like systems.  In
particular, you can safely ignore any shiznit dat talks about
\&\*(L"Configure\*(R".
.PP
Yo ass may also wanna peep one other option fo' buildin a perl that
will work on Windows: tha \s-1README\s0.cygwin file, which give a gangbangin' finger-lickin' different
set of rulez ta build a perl fo' Windows.  This method will probably
enable you ta build a mo' Unix-compatible perl yo, but yo big-ass booty is ghon also
need ta downlizzle n' use various other build-time n' run-time support
software busted lyrics bout up in dat file.
.PP
This set of instructions is meant ta describe a so-called \*(L"native\*(R"
port of Perl ta tha Windows platform.  This includes both 32\-bit and
64\-bit Windows operatin systems.  Da resultin Perl requires no
additionizzle software ta run (other than what tha fuck came wit yo' operating
system).  Currently, dis port is capable of rockin one of the
followin compilaz on tha Intel x86 architecture:
.PP
.Vb 3
\&      Microsizzlez Visual C++    version 6.0 or later
\&      Gcc by mingw.org        gcc version 3.4.5 or later
\&      Gcc by mingw\-w64.sf.net gcc version 4.4.3 or later
.Ve
.PP
Note dat tha last two of these is straight-up competin projects both
deliverin complete gcc toolchain fo' \s-1MS\s0 Windows:
.IP "<http://mingw.org>" 4
.IX Item "<http://mingw.org>"
Delivers gcc toolchain targetin 32\-bit Windows platform.
.IP "<http://mingw\-w64.sf.net>" 4
.IX Item "<http://mingw-w64.sf.net>"
Delivers gcc toolchain targetin both 64\-bit Windows n' 32\-bit Windows
platforms (despite tha project name \*(L"mingw\-w64\*(R" they is not only 64\-bit
oriented). They serve up tha natizzle gcc compilaz n' cross-compilers
that is also supported by perlz makefile.
.PP
Da Microsizzlez Visual \*(C+ compilaz is also now bein given away free. They are
available as \*(L"Visual \*(C+ Toolkit 2003\*(R" or \*(L"Visual \*(C+ 2005/2008/2010/2012 Express
Edition\*(R" (and also as part of tha \*(L".NET Framework \s-1SDK\*(R"\s0) n' is tha same
compilaz dat shizzle wit \*(L"Visual \*(C+ .NET 2003 Professional\*(R" or \*(L"Visual \*(C+
2005/2008/2010/2012 Professional\*(R" respectively.
.PP
This port can also be built on \s-1IA64/AMD64\s0 using:
.PP
.Vb 2
\&      Microsizzlez Platform SDK    Nov 2001 (64\-bit compila n' tools)
\&      MinGW64 compila (gcc version 4.4.3 or later)
.Ve
.PP
Da Windows \s-1SDK\s0 can be downloaded from <http://www.microsoft.com/>.
Da MinGW64 compila be available at <http://sourceforge.net/projects/mingw\-w64>.
Da latta is straight-up a cold-ass lil cross-compila targetin Win64. Therez also a trimmed
down compila (no java, or gfortran) suitable fo' buildin perl available at:
<http://strawberryperl.com/package/kmx/64_gcctoolchain/>
.PP
\&\s-1NOTE:\s0 If you rockin a 32\-bit compila ta build perl on a 64\-bit Windows
operatin system, then you should set tha \s-1WIN64\s0 environment variable ta \*(L"undef\*(R".
Also, tha trimmed down compila only passes tests when \s-1USE_ITHREADS\s0 *= define
(as opposed ta undef) n' when tha \s-1CFG\s0 *= Debug line is commented out.
.PP
This port straight-up supports MakeMaker (the set of modulez that
is used ta build extensions ta perl).  Therefore, you should be
able ta build n' install most extensions found up in tha \s-1CPAN\s0 cribs.
See \*(L"Usage Hints fo' Perl on Windows\*(R" below fo' general hints bout all dis bullshit.
.SS "Settin Up Perl on Windows"
.IX Subsection "Settin Up Perl on Windows"
.IP "Make" 4
.IX Item "Make"
Yo ass need a \*(L"make\*(R" program ta build tha sources.  If yo ass is using
Visual \*(C+ or tha Windows \s-1SDK\s0 tools, nmake will work.  Buildz using
the gcc need dmake.
.Sp
dmake be a gangbangin' freely available make dat has straight-up sick macro features
and parallelability.
.Sp
A port of dmake fo' Windows be available from:
.Sp
<http://search.cpan.org/dist/dmake/>
.Sp
Fetch n' install dmake somewhere on yo' path.
.IP "Command Shell" 4
.IX Item "Command Shell"
Use tha default \*(L"cmd\*(R" shell dat comes wit Windows.  Some versionz of the
popular 4DOS/NT shell have incompatibilitizzles dat may cause you shit.
If tha build fails under dat shell, try buildin again n' again n' again wit tha cmd
shell.
.Sp
Make shizzle tha path ta tha build directory do not contain spaces.  The
build probably works up in dis circumstizzle yo, but some tests will fail.
.IP "Microsizzlez Visual \*(C+" 4
.IX Item "Microsizzlez Visual "
Da nmake dat comes wit Visual \*(C+ will suffice fo' building.
Yo ass will need ta run tha \s-1VCVARS32.BAT\s0 file, probably found somewhere
like C:\eProgram Files\eMicrosizzlez Visual Studio\eVC98\eBin.
This will set yo' build environment.
.Sp
Yo ass can also use dmake ta build rockin Visual \*(C+; provided, however,
you set \s-1OSRELEASE\s0 ta \*(L"microsft\*(R" (or whatever tha directory name
under which tha Visual C dmake configuration lives) up in yo' environment
and edit win32/config.vc ta chizzle \*(L"make=nmake\*(R" tha fuck into \*(L"make=dmake\*(R".  The
latta step is only essential if you wanna use dmake as yo' default
make fo' buildin extensions rockin MakeMaker.
.IP "Microsizzlez Visual \*(C+ 2008/2010/2012 Express Edition" 4
.IX Item "Microsizzlez Visual 2008/2010/2012 Express Edition"
These free versionz of Visual \*(C+ 2008/2010/2012 Professionizzle contain tha same
compilaz n' linkers dat shizzle wit tha full versions, n' also contain
everythang necessary ta build Perl, rather than requirin a separate download
of tha Windows \s-1SDK\s0 like previous versions done did.
.Sp
These packages can be downloaded by searchin up in tha Downlizzle Centa at
<http://www.microsoft.com/downloads/search.aspx?displaylang=en>.  (Providin exact
links ta these packages has proven a pointless task cuz tha links keep on
changin so often.)
.Sp
Install Visual \*(C+ 2008/2010/2012 Express, then setup yo' environment using, e.g.
.Sp
.Vb 1
\&        C:\eProgram Files\eMicrosizzlez Visual Studio 11.0\eCommon7\eTools\evsvars32.bat
.Ve
.Sp
(assumin tha default installation location was chosen).
.Sp
Perl should now build rockin tha win32/Makefile.  Yo ass will need ta edit that
file ta set \s-1CCTYPE\s0 ta \s-1MSVC90FREE\s0 or \s-1MSVC100FREE\s0 first.
.IP "Microsizzlez Visual \*(C+ 2005 Express Edition" 4
.IX Item "Microsizzlez Visual 2005 Express Edition"
This free version of Visual \*(C+ 2005 Professionizzle gotz nuff tha same ol' dirty compiler
and linker dat shizzle wit tha full version yo, but don't contain every last muthafuckin thang
necessary ta build Perl.
.Sp
Yo ass will also need ta downlizzle tha \*(L"Windows \s-1SDK\*(R" \s0(the \*(L"Core \s-1SDK\*(R"\s0 n' \*(L"\s-1MDAC
SDK\*(R"\s0 components is required) fo' mo' header filez n' libraries.
.Sp
These packages can both be downloaded by searchin up in tha Downlizzle Centa at
<http://www.microsoft.com/downloads/search.aspx?displaylang=en>.  (Providin exact
links ta these packages has proven a pointless task cuz tha links keep on
changin so often.)
.Sp
Try ta obtain tha sickest fuckin version of tha Windows \s-1SDK. \s0 Sometimes these packages
contain a particular Windows \s-1OS\s0 version up in they name yo, but straight-up work on
other \s-1OS\s0 versions like a muthafucka.  For example, tha \*(L"Windows Server 2003 R2 Platform \s-1SDK\*(R"\s0
also runs on Windows \s-1XP SP2\s0 n' Windows 2000.
.Sp
Install Visual \*(C+ 2005 first, then tha Platform \s-1SDK. \s0 Setup yo' environment
as bigs up (assumin default installation locations was chosen):
.Sp
.Vb 1
\&        SET PlatformSDKDir=C:\eProgram Files\eMicrosizzlez Platform SDK
\&
\&        SET PATH=%SystemRoot%\esystem32;%SystemRoot%;C:\eProgram Files\eMicrosizzlez Visual Studio 8\eCommon7\eIDE;C:\eProgram Files\eMicrosizzlez Visual Studio 8\eVC\eBIN;C:\eProgram Files\eMicrosizzlez Visual Studio 8\eCommon7\eTools;C:\eProgram Files\eMicrosizzlez Visual Studio 8\eSDK\ev2.0\ebin;C:\eWINDOWS\eMicrosoft.NET\eFramework\ev2.0.50727;C:\eProgram Files\eMicrosizzlez Visual Studio 8\eVC\eVCPackages;%PlatformSDKDir%\eBin
\&
\&        SET INCLUDE=C:\eProgram Files\eMicrosizzlez Visual Studio 8\eVC\eINCLUDE;%PlatformSDKDir%\einclude
\&
\&        SET LIB=C:\eProgram Files\eMicrosizzlez Visual Studio 8\eVC\eLIB;C:\eProgram Files\eMicrosizzlez Visual Studio 8\eSDK\ev2.0\elib;%PlatformSDKDir%\elib
\&
\&        SET LIBPATH=C:\eWINDOWS\eMicrosoft.NET\eFramework\ev2.0.50727
.Ve
.Sp
(Da PlatformSDKDir might need ta be set differently dependin on which version
yo ass is using. Earlier versions installed tha fuck into \*(L"C:\eProgram Files\eMicrosizzlez \s-1SDK\*(R",\s0
while tha sickest fuckin versions install tha fuck into version-specific locations such as
\&\*(L"C:\eProgram Files\eMicrosizzlez Platform \s-1SDK\s0 fo' Windows Server 2003 R2\*(R".)
.Sp
Perl should now build rockin tha win32/Makefile.  Yo ass will need ta edit that
file ta set
.Sp
.Vb 1
\&        CCTYPE = MSVC80FREE
.Ve
.Sp
and ta set \s-1CCHOME, CCINCDIR\s0 n' \s-1CCLIBDIR\s0 as per tha environment setup above.
.IP "Microsizzlez Visual \*(C+ Toolkit 2003" 4
.IX Item "Microsizzlez Visual Toolkit 2003"
This free toolkit gotz nuff tha same ol' dirty compila n' linker dat shizzle with
Visual \*(C+ .NET 2003 Professionizzle yo, but don't contain every last muthafuckin thang
necessary ta build Perl.
.Sp
Yo ass will also need ta downlizzle tha \*(L"Platform \s-1SDK\*(R" \s0(the \*(L"Core \s-1SDK\*(R"\s0 n' \*(L"\s-1MDAC
SDK\*(R"\s0 components is required) fo' header files, libraries n' rc.exe, and
\&\*(L".NET Framework \s-1SDK\*(R"\s0 fo' mo' libraries n' nmake.exe.  Note dat tha latter
(which also includes tha free compila n' linker) requires tha \*(L".NET
Framework Redistributable\*(R" ta be installed first.  This can be downloaded and
installed separately yo, but is included up in tha \*(L"Visual \*(C+ Toolkit 2003\*(R" anyway.
.Sp
These packages can all be downloaded by searchin up in tha Downlizzle Centa at
<http://www.microsoft.com/downloads/search.aspx?displaylang=en>.  (Providin exact
links ta these packages has proven a pointless task cuz tha links keep on
changin so often.)
.Sp
Try ta obtain tha sickest fuckin version of tha Windows \s-1SDK. \s0 Sometimes these packages
contain a particular Windows \s-1OS\s0 version up in they name yo, but straight-up work on
other \s-1OS\s0 versions like a muthafucka.  For example, tha \*(L"Windows Server 2003 R2 Platform \s-1SDK\*(R"\s0
also runs on Windows \s-1XP SP2\s0 n' Windows 2000.
.Sp
Install tha Toolkit first, then tha Platform \s-1SDK,\s0 then tha .NET Framework \s-1SDK.\s0
Setup yo' environment as bigs up (assumin default installation locations
were chosen):
.Sp
.Vb 1
\&        SET PlatformSDKDir=C:\eProgram Files\eMicrosizzlez Platform SDK
\&
\&        SET PATH=%SystemRoot%\esystem32;%SystemRoot%;C:\eProgram Files\eMicrosizzlez Visual C++ Toolkit 2003\ebin;%PlatformSDKDir%\eBin;C:\eProgram Files\eMicrosoft.NET\eSDK\ev1.1\eBin
\&
\&        SET INCLUDE=C:\eProgram Files\eMicrosizzlez Visual C++ Toolkit 2003\einclude;%PlatformSDKDir%\einclude;C:\eProgram Files\eMicrosizzlez Visual Studio .NET 2003\eVc7\einclude
\&
\&        SET LIB=C:\eProgram Files\eMicrosizzlez Visual C++ Toolkit 2003\elib;%PlatformSDKDir%\elib;C:\eProgram Files\eMicrosizzlez Visual Studio .NET 2003\eVc7\elib
.Ve
.Sp
(Da PlatformSDKDir might need ta be set differently dependin on which version
yo ass is using. Earlier versions installed tha fuck into \*(L"C:\eProgram Files\eMicrosizzlez \s-1SDK\*(R",\s0
while tha sickest fuckin versions install tha fuck into version-specific locations such as
\&\*(L"C:\eProgram Files\eMicrosizzlez Platform \s-1SDK\s0 fo' Windows Server 2003 R2\*(R".)
.Sp
Several required filez will still be missing:
.RS 4
.IP "\(bu" 4
cvtres.exe is required by link.exe when rockin a .res file.  It be actually
installed by tha .NET Framework \s-1SDK,\s0 but tha fuck into a location like fuckin the
following:
.Sp
.Vb 1
\&        C:\eWINDOWS\eMicrosoft.NET\eFramework\ev1.1.4322
.Ve
.Sp
Copy it from there ta \f(CW%PlatformSDKDir\fR%\eBin
.IP "\(bu" 4
lib.exe is normally used ta build libraries yo, but link.exe wit tha /lib
option also works, so chizzle win32/config.vc ta use it instead:
.Sp
Change tha line reading:
.Sp
.Vb 1
\&        ar=\*(Aqlib\*(Aq
.Ve
.Sp
to:
.Sp
.Vb 1
\&        ar=\*(Aqlink /lib\*(Aq
.Ve
.Sp
It may also be useful ta create a funky-ass batch file called lib.bat in
C:\eProgram Files\eMicrosizzlez Visual \*(C+ Toolkit 2003\ebin containing:
.Sp
.Vb 2
\&        @echo off
\&        link /lib %*
.Ve
.Sp
for tha benefit of any naughty C extension modulez dat you might wanna build
lata which explicitly reference \*(L"lib\*(R" rather than takin they value from
\&\f(CW$Config\fR{ar}.
.IP "\(bu" 4
setargv.obj is required ta build perlglob.exe (and perl.exe if tha \s-1USE_SETARGV\s0
option is enabled).  Da Platform \s-1SDK\s0 supplies dis object file up in source form
in \f(CW%PlatformSDKDir\fR%\esrc\ecrt.  Copy setargv.c, cruntime.h and
internal.h from there ta some temporary location n' build setargv.obj using
.Sp
.Vb 1
\&        cl.exe /c /I. /D_CRTBLD setargv.c
.Ve
.Sp
Then copy setargv.obj ta \f(CW%PlatformSDKDir\fR%\elib
.Sp
Alternatively, if you don't need perlglob.exe n' don't need ta enable the
\&\s-1USE_SETARGV\s0 option then you can safely just remove all mention of $(\s-1GLOBEXE\s0)
from win32/Makefile n' setargv.obj won't be required anyway.
.RE
.RS 4
.Sp
Perl should now build rockin tha win32/Makefile.  Yo ass will need ta edit that
file ta set
.Sp
.Vb 1
\&        CCTYPE = MSVC70FREE
.Ve
.Sp
and ta set \s-1CCHOME, CCINCDIR\s0 n' \s-1CCLIBDIR\s0 as per tha environment setup above.
.RE
.IP "Microsizzlez Platform \s-1SDK\s0 64\-bit Compiler" 4
.IX Item "Microsizzlez Platform SDK 64-bit Compiler"
Da nmake dat comes wit tha Platform \s-1SDK\s0 will suffice fo' building
Perl.  Make shizzle yo ass is buildin within one of tha \*(L"Build Environment\*(R"
shells available afta you install tha Platform \s-1SDK\s0 from tha Start Menu.
.IP "MinGW release 3 wit gcc" 4
.IX Item "MinGW release 3 wit gcc"
Perl can be compiled wit gcc from MinGW release 3 n' lata (usin gcc 3.4.5
and later).  It can be downloaded here:
.Sp
<http://www.mingw.org/>
.Sp
Yo ass also need dmake.  See \*(L"Make\*(R" above on how tha fuck ta git dat shit.
.SS "Building"
.IX Subsection "Building"
.IP "\(bu" 4
Make shizzle yo ass is up in tha \*(L"win32\*(R" subdirectory under tha perl toplevel.
This directory gotz nuff a \*(L"Makefile\*(R" dat will work with
versionz of nmake dat come wit Visual \*(C+ or tha Windows \s-1SDK,\s0 and
a dmake \*(L"makefile.mk\*(R" dat will work fo' all supported compilers.  The
defaults up in tha dmake makefile is setup ta build rockin MinGW/gcc.
.IP "\(bu" 4
Edit tha makefile.mk (or Makefile, if you rockin nmake) n' chizzle
the jointz of \s-1INST_DRV\s0 n' \s-1INST_TOP.  \s0 Yo ass can also enable various
build flags.  These is explained up in tha makefiles.
.Sp
Note dat it is generally not a phat scam ta try ta build a perl with
\&\s-1INST_DRV\s0 n' \s-1INST_TOP\s0 set ta a path dat already exists from a previous
build. Y'all KNOW dat shit, muthafucka!  In particular, dis may cause problems wit the
lib/ExtUtils/t/Embed.t test, which attempts ta build a test program and
may end up buildin against tha installed perlz lib/CORE directory rather
than tha one bein tested.
.Sp
Yo ass will gotta make shizzle dat \s-1CCTYPE\s0 is set erectly n' that
\&\s-1CCHOME\s0 points ta wherever you installed yo' compiler.
.Sp
If buildin wit tha cross-compila provided by
mingw\-w64.sourceforge.net you gonna need ta uncomment tha line dat sets
\&\s-1GCCCROSS\s0 up in tha makefile.mk. Do dis only if itz tha cross-compila \- ie
only if tha bin folda don't contain a gcc.exe. (Da cross-compiler
does not provide a gcc.exe, g++.exe, ar.exe, etc. Instead, all of these
executablez is prefixed wit 'x86_64\-w64\-mingw32\-'.)
.Sp
Da default value fo' \s-1CCHOME\s0 up in tha makefilez fo' Visual \*(C+
may not be erect fo' some versions.  Make shizzle tha default exists
and is valid.
.Sp
Yo ass may also need ta comment up tha \f(CW\*(C`DELAYLOAD = ...\*(C'\fR line up in the
Makefile if you rockin \s-1VC++ 6.0\s0 without tha sickest fuckin steez pack and
the linker reports a internal error.
.Sp
If you want build some core extensions statically tha fuck into perlz dll, specify
them up in tha \s-1STATIC_EXT\s0 macro.
.Sp
Be shizzle ta read tha instructions near tha top of tha makefilez carefully.
.IP "\(bu" 4
Type \*(L"dmake\*(R" (or \*(L"nmake\*(R" if yo ass is rockin dat make).
.Sp
This should build every last muthafuckin thang.  Specifically, it will create perl.exe,
perl518.dll all up in tha perl toplevel, n' various other extension dll's
under tha lib\eauto directory.  If tha build fails fo' any reason, make
sure you have done tha previous steps erectly.
.SS "Testin Perl on Windows"
.IX Subsection "Testin Perl on Windows"
Type \*(L"dmake test\*(R" (or \*(L"nmake test\*(R").  This will run most of tha tests from
the testsuite (many tests is ghon be skipped).
.PP
There should be no test failures.
.PP
Some test failures may occur if you bust a cold-ass lil command shell other than the
natizzle \*(L"cmd.exe\*(R", or if yo ass is buildin from a path dat gotz nuff
spaces.  So don't do dis shit.
.PP
If yo ass is hustlin tha tests from a emacs shell window, you may see
failures up in op/stat.t.  Run \*(L"dmake test-notty\*(R" up in dat case.
.PP
If you run tha tests on a \s-1FAT\s0 partition, you may peep some failures for
\&\f(CW\*(C`link()\*(C'\fR related tests (\fIop/write.t\fR, \fIop/stat.t\fR ...). Testin on
\&\s-1NTFS\s0 avoidz these errors.
.PP
Furthermore, you should make shizzle dat durin \f(CW\*(C`make test\*(C'\fR you do not
have any \s-1GNU\s0 tool packages up in yo' path: some toolkits like Unixutils
include some tools (\f(CW\*(C`type\*(C'\fR fo' instance) which override tha Windows
ones n' make tests fail. Remove dem from yo' path while testin to
avoid these errors.
.PP
Please report any other failures as busted lyrics bout under \*(L"\s-1BUGS AND CAVEATS\*(R"\s0.
.SS "Installation of Perl on Windows"
.IX Subsection "Installation of Perl on Windows"
Type \*(L"dmake install\*(R" (or \*(L"nmake install\*(R").  This will put tha newly
built perl n' tha libraries under whatever \f(CW\*(C`INST_TOP\*(C'\fR points ta up in the
Makefile.  It will also install tha pod documentation under
\&\f(CW\*(C`$INST_TOP\e$INST_VER\elib\epod\*(C'\fR n' \s-1HTML\s0 versionz of tha same under
\&\f(CW\*(C`$INST_TOP\e$INST_VER\elib\epod\ehtml\*(C'\fR.
.PP
To use tha Perl you just installed yo big-ass booty is ghon need ta add a freshly smoked up entry to
your \s-1PATH\s0 environment variable: \f(CW\*(C`$INST_TOP\ebin\*(C'\fR, e.g.
.PP
.Vb 1
\&    set PATH=c:\eperl\ebin;%PATH%
.Ve
.PP
If you opted ta uncomment \f(CW\*(C`INST_VER\*(C'\fR n' \f(CW\*(C`INST_ARCH\*(C'\fR up in tha makefile
then tha installation structure be a lil mo' fucked up n' you will
need ta add two freshly smoked up \s-1PATH\s0 components instead: \f(CW\*(C`$INST_TOP\e$INST_VER\ebin\*(C'\fR and
\&\f(CW\*(C`$INST_TOP\e$INST_VER\ebin\e$ARCHNAME\*(C'\fR, e.g.
.PP
.Vb 1
\&    set PATH=c:\eperl\e5.6.0\ebin;c:\eperl\e5.6.0\ebin\eMSWin32\-x86;%PATH%
.Ve
.SS "Usage Hints fo' Perl on Windows"
.IX Subsection "Usage Hints fo' Perl on Windows"
.IP "Environment Variables" 4
.IX Item "Environment Variables"
Da installation paths dat you set durin tha build git compiled
into perl, so you don't gotta do anythang additionizzle ta start
usin dat perl (except add its location ta yo' \s-1PATH\s0 variable).
.Sp
If you put extensions up in unusual places, you can set \s-1PERL5LIB\s0
to a list of paths separated by semicolons where you want perl
to look fo' libraries. Put ya muthafuckin choppers up if ya feel dis!  Look fo' descriptionz of other environment
variablez you can set up in perlrun.
.Sp
Yo ass can also control tha shell dat perl uses ta run \fIsystem()\fR and
backtick commandz via \s-1PERL5SHELL. \s0 See perlrun.
.Sp
Perl do not depend on tha registry yo, but it can look up certain default
values if you chizzle ta put dem there, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  Perl attempts ta read entries from
\&\f(CW\*(C`HKEY_CURRENT_USER\eSoftware\ePerl\*(C'\fR n' \f(CW\*(C`HKEY_LOCAL_MACHINE\eSoftware\ePerl\*(C'\fR.
Entries up in tha forma override entries up in tha latter n' shit.  One or mo' of the
followin entries (of type \s-1REG_SZ\s0 or \s-1REG_EXPAND_SZ\s0) may be set:
.Sp
.Vb 7
\&    lib\-$]              version\-specific standard library path ta add ta @INC
\&    lib                 standard library path ta add ta @INC
\&    criblib\-$]          version\-specific joint library path ta add ta @INC
\&    criblib             joint library path ta add ta @INC
\&    vendorlib\-$]        version\-specific vendor library path ta add ta @INC
\&    vendorlib           vendor library path ta add ta @INC
\&    PERL*               fallback fo' all %ENV lookups dat begin wit "PERL"
.Ve
.Sp
Note tha \f(CW$]\fR up in tha above aint literal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Substitute whatever version
of perl you wanna honor dat entry, e.g. \f(CW5.6.0\fR.  Paths must be
separated wit semicolons, as usual on Windows.
.IP "File Globbing" 4
.IX Item "File Globbing"
By default, perl handlez file globbin rockin tha File::Glob extension,
which serves up portable globbing.
.Sp
If you want perl ta use globbin dat emulates tha quirkz of \s-1DOS\s0
filename conventions, you might wanna consider rockin File::DosGlob
to override tha internal \fIglob()\fR implementation. I aint talkin' bout chicken n' gravy biatch.  See File::DosGlob for
details.
.IP "Usin perl from tha command line" 4
.IX Item "Usin perl from tha command line"
If yo ass be accustomed ta rockin perl from various command-line
shells found up in \s-1UNIX\s0 environments, yo big-ass booty is ghon be less than pleased
with what tha fuck Windows offers by way of a cold-ass lil command shell.
.Sp
Da crucial thang ta KNOW bout tha Windows environment is that
the command line you type up in is processed twice before Perl sees dat shit.
First, yo' command shell (usually \s-1CMD.EXE\s0) preprocesses tha command
line, ta handle redirection, environment variable expansion, and
location of tha executable ta run. I aint talkin' bout chicken n' gravy biatch. Then, tha perl executable splits
the remainin command line tha fuck into individual arguments, rockin the
C runtime library upon which Perl was built.
.Sp
It be particularly blingin ta note dat neither tha shell nor tha C
runtime do any wildcard expansionz of command-line arguments (so
wildcardz need not be quoted).  Also, tha quotin behaviourz of the
shell n' tha C runtime is rudimentary at dopest (and may, if yo ass is
usin a non-standard shell, be inconsistent).  Da only (useful) quote
characta is tha double quote (").  It can be used ta protect spaces
and other special charactas up in arguments.
.Sp
Da Windows documentation raps bout tha shell parsin rulez here:
<http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en\-us/cmd.mspx?mfr=true>
and tha C runtime parsin rulez here:
<http://msdn.microsoft.com/en\-us/library/17w5ykft%28v=VS.100%29.aspx>.
.Sp
Here is some further observations based on experiments: Da C runtime
breaks arguments at spaces n' passes dem ta programs up in argc/argv.
Double quotes can be used ta prevent arguments wit spaces up in dem from
bein split up.  Yo ass can put a thugged-out double quote up in a argument by escaping
it wit a funky-ass backslash n' enclosin tha whole argument within double quotes.
Da backslash n' tha pair of double quotes surroundin tha argument will
be stripped by tha C runtime.
.Sp
Da file redirection charactas \*(L"<\*(R", \*(L">\*(R", n' \*(L"|\*(R" can be quoted by
double quotes (although there be suggestions dat dis may not always
be true).  Single quotes is not treated as quotes by tha shell or
the C runtime, they don't git stripped by tha shell (just ta make
this type of quotin straight-up useless).  Da caret \*(L"^\*(R" has also
been observed ta behave as a quotin character yo, but dis appears
to be a gangbangin' finger-lickin' dirty-ass shell feature, n' tha caret aint stripped from tha command
line, so Perl still sees it (and tha C runtime phase do not treat
the caret as a quote character).
.Sp
Here is some examplez of usage of tha \*(L"cmd\*(R" shell:
.Sp
This prints two doublequotes:
.Sp
.Vb 1
\&    perl \-e "print \*(Aq\e"\e"\*(Aq "
.Ve
.Sp
This do tha same:
.Sp
.Vb 1
\&    perl \-e "print \e"\e\e\e"\e\e\e"\e" "
.Ve
.Sp
This prints \*(L"bar\*(R" n' writes \*(L"foo\*(R" ta tha file \*(L"blurch\*(R":
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" > blurch
.Ve
.Sp
This prints \*(L"foo\*(R" (\*(L"bar\*(R" disappears tha fuck into nowhereland):
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" 2> nul
.Ve
.Sp
This prints \*(L"bar\*(R" n' writes \*(L"foo\*(R" tha fuck into tha file \*(L"blurch\*(R":
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" 1> blurch
.Ve
.Sp
This pipes \*(L"foo\*(R" ta tha \*(L"less\*(R" pager n' prints \*(L"bar\*(R" on tha console:
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" | less
.Ve
.Sp
This pipes \*(L"foo\enbar\en\*(R" ta tha less pager:
.Sp
.Vb 1
\&    perl \-le "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" 2>&1 | less
.Ve
.Sp
This pipes \*(L"foo\*(R" ta tha pager n' writes \*(L"bar\*(R" up in tha file \*(L"blurch\*(R":
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" 2> blurch | less
.Ve
.Sp
Discoverin tha usefulnizz of tha \*(L"command.com\*(R" shell on Windows 9x
is left as a exercise ta tha reader :)
.Sp
One particularly pernicious problem wit tha 4NT command shell for
Windows is dat it (nearly) always treats a % characta as indicating
that environment variable expansion is needed. Y'all KNOW dat shit, muthafucka!  Under dis shell, it is
therefore blingin ta always double any % charactas which you want
Perl ta peep (for example, fo' hash variables), even when they are
quoted.
.IP "Buildin Extensions" 4
.IX Item "Buildin Extensions"
Da Comprehensive Perl Archive Network (\s-1CPAN\s0) offers a wealth
of extensions, a shitload of which require a C compila ta build.
Look up in <http://www.cpan.org/> fo' mo' shiznit on \s-1CPAN.\s0
.Sp
Note dat not all of tha extensions available from \s-1CPAN\s0 may work
in tha Windows environment; you should check tha shiznit at
<http://testers.cpan.org/> before investin too much effort into
portin modulez dat don't readily build.
.Sp
Most extensions (whether they require a C compila or not) can
be built, tested n' installed wit tha standard mantra:
.Sp
.Vb 4
\&    perl Makefile.PL
\&    $MAKE
\&    $MAKE test
\&    $MAKE install
.Ve
.Sp
where \f(CW$MAKE\fR is whatever 'make' program you have configured perl to
use.  Use \*(L"perl \-V:make\*(R" ta smoke up what tha fuck dis is.  Some extensions
may not provide a testsuite (so \*(L"$MAKE test\*(R" may not do anythang or
fail) yo, but most straight-up ones do.
.Sp
It be blingin dat you bust a supported 'make' program, and
ensure Config.pm knows bout dat shit.  If you aint gots nmake, you can
either git dmake from tha location mentioned earlier or git an
old version of nmake reportedly available from:
.Sp
<http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN\-US/nmake15.exe>
.Sp
Another option is ta use tha make freestyled up in Perl, available from
\&\s-1CPAN.\s0
.Sp
<http://www.cpan.org/modules/by\-module/Make/>
.Sp
Yo ass may also use dmake.  See \*(L"Make\*(R" above on how tha fuck ta git dat shit.
.Sp
Note dat MakeMaker straight-up emits makefilez wit different syntax
dependin on what tha fuck 'make' it be thinkin yo ass is using.  Therefore, it is
important dat one of tha followin joints appears up in Config.pm:
.Sp
.Vb 4
\&    make=\*(Aqnmake\*(Aq        # MakeMaker emits nmake syntax
\&    make=\*(Aqdmake\*(Aq        # MakeMaker emits dmake syntax
\&    any other value     # MakeMaker emits generic make syntax
\&                            (e.g GNU make, or Perl make)
.Ve
.Sp
If tha value don't match tha 'make' program you wanna use,
edit Config.pm ta fix dat shit.
.Sp
If a module implements XSUBs, yo big-ass booty is ghon need one of tha supported
C compilers.  Yo ass must make shizzle you have set up tha environment for
the compila fo' command-line compilation.
.Sp
If a module do not build fo' some reason, look carefully for
why it failed, n' report problems ta tha module lyricist.  If
it be lookin like tha extension buildin support be at fault, report
that wit full detailz of how tha fuck tha build failed rockin tha perlbug
utility.
.IP "Command-line Wildcard Expansion" 4
.IX Item "Command-line Wildcard Expansion"
Da default command shells on \s-1DOS\s0 descendant operatin systems (such
as they are) probably do not expand wildcard arguments supplied to
programs.  They consider it tha applicationz thang ta handle dis shit.
This is commonly  bigged up  by linkin tha application (in our case,
perl) wit startup code dat tha C runtime libraries probably provide.
But fuck dat shiznit yo, tha word on tha street is dat bustin dat thangs up in dis biatch up in incompatible perl versions (since the
behavior of tha argv expansion code differs dependin on the
compiler, n' it is even buggy on some compilers).  Besides, it may
be a source of frustration if you use such a perl binary wit an
alternate shell dat *does* expand wildcards.
.Sp
Instead, tha followin solution works rather well. Da sick thangs
about it is 1) you can start rockin it right away; 2) it is more
powerful, cuz it will do tha right thang wit a pattern like
*/*/*.c; 3) you can decizzle whether you do/don't wanna use it; and
4) you can extend tha method ta add any customizations (or even
entirely different kindz of wildcard expansion).
.Sp
.Vb 10
\&        C:\e> copy con c:\eperl\elib\eWild.pm
\&        # Wild.pm \- emulate shell @ARGV expansion on shells dat don\*(Aqt
\&        use File::DosGlob;
\&        @ARGV = map {
\&                      mah @g = File::DosGlob::glob($_) if /[*?]/;
\&                      @g , biatch? @g : $_;
\&                    } @ARGV;
\&        1;
\&        ^Z
\&        C:\e> set PERL5OPT=\-MWild
\&        C:\e> perl \-le "for (@ARGV) { print }" */*/perl*.c
\&        p4view/perl/perl.c
\&        p4view/perl/perlio.c
\&        p4view/perl/perly.c
\&        perl5.005/win32/perlglob.c
\&        perl5.005/win32/perllib.c
\&        perl5.005/win32/perlglob.c
\&        perl5.005/win32/perllib.c
\&        perl5.005/win32/perlglob.c
\&        perl5.005/win32/perllib.c
.Ve
.Sp
Note there be two distinct steps there: 1) You'll gotta create
Wild.pm n' put it up in yo' perl lib directory. 2) You'll need to
set tha \s-1PERL5OPT\s0 environment variable.  If you want argv expansion
to be tha default, just set \s-1PERL5OPT\s0 up in yo' default startup
environment.
.Sp
If yo ass is rockin tha Visual C compiler, you can git tha C runtime's
command line wildcard expansion built tha fuck into perl binary.  Da resulting
binary will always expand unquoted command lines, which may not be
what you want if you bust a gangbangin' finger-lickin' dirty-ass shell dat do dat fo' yo thugged-out ass.  Da expansion
done be also somewhat less bangin than tha approach suggested above.
.IP "Notes on 64\-bit Windows" 4
.IX Item "Notes on 64-bit Windows"
Windows .NET Server supports tha \s-1LLP64\s0 data model on tha Intel Itanium
architecture.
.Sp
Da \s-1LLP64\s0 data model is different from tha \s-1LP64\s0 data model dat is the
norm on 64\-bit Unix platforms.  In tha former, \f(CW\*(C`int\*(C'\fR n' \f(CW\*(C`long\*(C'\fR are
both 32\-bit data types, while pointas is 64 bits wide.  In addition,
there be a separate 64\-bit wide integral type, \f(CW\*(C`_\|_int64\*(C'\fR.  In contrast,
the \s-1LP64\s0 data model dat is pervasive on Unix platforms serves up \f(CW\*(C`int\*(C'\fR
as tha 32\-bit type, while both tha \f(CW\*(C`long\*(C'\fR type n' pointas is of
64\-bit precision. I aint talkin' bout chicken n' gravy biatch.  Note dat both models provide fo' 64\-bits of
addressability.
.Sp
64\-bit Windows hustlin on Itanium is capable of hustlin 32\-bit x86
binaries transparently.  This means dat you could bust a 32\-bit build
of Perl on a 64\-bit system.  Given this, why would one wanna build
a 64\-bit build of Perl, biatch?  Here is some reasons why you would bother:
.RS 4
.IP "\(bu" 4
A 64\-bit natizzle application will run much mo' efficiently on
Itanium hardware.
.IP "\(bu" 4
There is no 2GB limit on process size.
.IP "\(bu" 4
Perl automatically serves up big-ass file support when built under
64\-bit Windows.
.IP "\(bu" 4
Embeddin Perl inside a 64\-bit application.
.RE
.RS 4
.RE
.SS "Hustlin Perl Scripts"
.IX Subsection "Hustlin Perl Scripts"
Perl scripts on \s-1UNIX\s0 use tha \*(L"#!\*(R" (a.k.a \*(L"shebang\*(R") line to
indicate ta tha \s-1OS\s0 dat it should execute tha file rockin perl.
Windows has no comparable means ta indicate arbitrary filez are
executables.
.PP
Instead, all available methodz ta execute plain text filez on
Windows rely on tha file \*(L"extension\*(R".  There is three methods
to use dis ta execute perl scripts:
.IP "1." 8
There be a gangbangin' facilitizzle called \*(L"file extension associations\*(R".  This can be
manipulated via tha two commandz \*(L"assoc\*(R" n' \*(L"ftype\*(R" dat come
standard wit Windows.  Type \*(L"ftype /?\*(R" fo' a cold-ass lil complete example of how
to set dis up fo' perl scripts (Say what, biatch?  Yo ass thought Windows
wasn't perl-ready, biatch? :).
.IP "2." 8
Since file associations don't work everywhere, n' there are
reportedly bugs wit file associations where it do work, the
old method of rappin bout da perl script ta make it be lookin like a
regular batch file ta tha \s-1OS,\s0 may be used. Y'all KNOW dat shit, muthafucka!  Da install process
makes available tha \*(L"pl2bat.bat\*(R" script which can be used ta wrap
perl scripts tha fuck into batch files.  For example:
.Sp
.Vb 1
\&        pl2bat foo.pl
.Ve
.Sp
will create tha file \*(L"\s-1FOO.BAT\*(R". \s0 Note \*(L"pl2bat\*(R" strips any
\&.pl suffix n' addz a .bat suffix ta tha generated file.
.Sp
If you use tha 4DOS/NT or similar command shell, note that
\&\*(L"pl2bat\*(R" uses tha \*(L"%*\*(R" variable up in tha generated batch file to
refer ta all tha command line arguments, so you may need ta make
sure dat construct works up in batch files.  Az of dis writing,
4DOS/NT playas will need a \*(L"ParameterChar = *\*(R" statement up in their
4NT.INI file or will need ta execute \*(L"setdos /p*\*(R" up in tha 4DOS/NT
startup file ta enable dis ta work.
.IP "3." 8
Usin \*(L"pl2bat\*(R" has all dem problems:  tha file name gets chizzled,
so scripts dat rely on \f(CW$0\fR ta find what tha fuck they must do may not
run properly; hustlin \*(L"pl2bat\*(R" replicates tha contentz of the
original gangsta script, n' so dis process can be maintenizzle intensive
if tha originals git updated often. I aint talkin' bout chicken n' gravy biatch.  A different approach that
avoidz both problems is possible.
.Sp
A script called \*(L"runperl.bat\*(R" be available dat can be copied
to any filename (along wit tha .bat suffix).  For example,
if you call it \*(L"foo.bat\*(R", it will run tha file \*(L"foo\*(R" when it is
executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Since you can run batch filez on Windows platforms simply
by typin tha name (without tha extension), dis effectively
runs tha file \*(L"foo\*(R", when you type either \*(L"foo\*(R" or \*(L"foo.bat\*(R".
With dis method, \*(L"foo.bat\*(R" can even be up in a gangbangin' finger-lickin' different location
than tha file \*(L"foo\*(R", as long as \*(L"foo\*(R" be available somewhere on
the \s-1PATH. \s0 If yo' scripts is on a gangbangin' filesystem dat allows symbolic
links, you can even avoid copyin \*(L"runperl.bat\*(R".
.Sp
Herez a gangbangin' finger-lickin' diversion:  copy \*(L"runperl.bat\*(R" ta \*(L"runperl\*(R", n' type
\&\*(L"runperl\*(R".  Explain tha observed behavior, or lack thereof. :)
Hint: .gnidnats llits er'uoy fi ,\*(L"lrepnur\*(R" eteled :tniH
.SS "Miscellaneous Things"
.IX Subsection "Miscellaneous Things"
A full set of \s-1HTML\s0 documentation is installed, so you should be
able ta use it if you gotz a wizzy browser installed on your
system.
.PP
\&\f(CW\*(C`perldoc\*(C'\fR be also a useful tool fo' browsin shiznit contained
in tha documentation, especially up in conjunction wit a pager
like \f(CW\*(C`less\*(C'\fR (recent versionz of which have Windows support).  Yo ass may
have ta set tha \s-1PAGER\s0 environment variable ta bust a specific pager.
\&\*(L"perldoc \-f foo\*(R" will print shiznit bout tha perl operator
\&\*(L"foo\*(R".
.PP
One common fuck up when rockin dis port wit a \s-1GUI\s0 library like \f(CW\*(C`Tk\*(C'\fR
is assumin dat Perlz aiiight behavior of openin a cold-ass lil command-line
window will go away.  This aint tha case.  If you wanna start a cold-ass lil copy
of \f(CW\*(C`perl\*(C'\fR without openin a cold-ass lil command-line window, use tha \f(CW\*(C`wperl\*(C'\fR
executable built durin tha installation process.  Usage is exactly
the same as aiiight \f(CW\*(C`perl\*(C'\fR on Windows, except dat options like \f(CW\*(C`\-h\*(C'\fR
don't work (since they need a cold-ass lil command-line window ta print to).
.PP
If you find bugs up in perl, you can run \f(CW\*(C`perlbug\*(C'\fR ta create a
bug report (you may gotta bust it manually if \f(CW\*(C`perlbug\*(C'\fR cannot
find a maila on yo' system).
.SH "BUGS AND CAVEATS"
.IX Header "BUGS AND CAVEATS"
Norton AntiVirus interferes wit tha build process, particularly if
set ta \*(L"AutoProtect, All Files, when Opened\*(R". Unlike big-ass applications
the perl build process opens n' modifies a shitload of filez yo. Havin the
the AntiVirus scan each n' every last muthafuckin one slows build tha process significantly.
Worse, wit PERLIO=stdio tha build process fails wit peculiar lyrics
as tha virus checker interacts badly wit miniperl.exe freestylin configure
filez (it seems ta either catch file part freestyled n' treat it as suspicious,
or virus checker may have it \*(L"locked\*(R" up in a way which inhibits miniperl
uppimpin it). Da build do complete with
.PP
.Vb 1
\&   set PERLIO=perlio
.Ve
.PP
but dat may be just luck. Other AntiVirus software may have similar issues.
.PP
Some of tha built-in functions do not act exactly as documented in
perlfunc, n' all dem is not implemented at all.  To avoid
surprises, particularly if you have had prior exposure ta Perl
in other operatin environments or if you intend ta write code
that is ghon be portable ta other environments, peep perlport
for a reasonably definitizzle list of these differences.
.PP
Not all extensions available from \s-1CPAN\s0 may build or work properly
in tha Windows environment.  See \*(L"Buildin Extensions\*(R".
.PP
Most \f(CW\*(C`socket()\*(C'\fR related calls is supported yo, but they may not
behave as on Unix platforms.  See perlport fo' tha full list.
.PP
Signal handlin may not behave as on Unix platforms (where it
doesn't exactly \*(L"behave\*(R", either :).  For instance, callin \f(CW\*(C`die()\*(C'\fR
or \f(CW\*(C`exit()\*(C'\fR from signal handlezs will cause a exception, since most
implementationz of \f(CW\*(C`signal()\*(C'\fR on Windows is severely crippled.
Thus, signals may work only fo' simple thangs like settin a gangbangin' flag
variable up in tha handlez n' shit.  Usin signals under dis port should
currently be considered unsupported.
.PP
Please bust detailed descriptionz of any problems n' solutions that
you may find ta <\fIperlbug@perl.org\fR>, along wit tha output
produced by \f(CW\*(C`perl \-V\*(C'\fR.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Da use of a cold-ass lil camel wit tha topic of Perl be a trademark
of O'Reilly n' Associates, Inc. Used wit permission.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "Gary Ng <71564.1743@CompuServe.COM>" 4
.IX Item "Gary Ng <71564.1743@CompuServe.COM>"
.PD 0
.IP "Gurusamy Sarathy <gsar@activestate.com>" 4
.IX Item "Gurusamy Sarathy <gsar@activestate.com>"
.IP "Nick Ing-Simmons <nick@ing\-simmons.net>" 4
.IX Item "Nick Ing-Simmons <nick@ing-simmons.net>"
.IP "Jan Dubois <jand@activestate.com>" 4
.IX Item "Jan Dubois <jand@activestate.com>"
.IP "Steve Hay <steve.m.hay@googlemail.com>" 4
.IX Item "Steve Hay <steve.m.hay@googlemail.com>"
.PD
.PP
This document is maintained by Jan Dubois.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl
.SH "HISTORY"
.IX Header "HISTORY"
This port was originally contributed by Gary Ng round 5.003_24,
and borrowed from tha Hip Communications port dat was available
at tha time.  Various playas have busted a shitload of n' sundry hacks
since then.
.PP
GCC/mingw32 support was added up in 5.005 (Nick Ing-Simmons).
.PP
Support fo' \s-1PERL_OBJECT\s0 was added up in 5.005 (ActiveState Tool Corp).
.PP
Support fo' \fIfork()\fR emulation was added up in 5.6 (ActiveState Tool Corp).
.PP
Win9x support was added up in 5.6 (Benjamin Stuhl).
.PP
Support fo' 64\-bit Windows added up in 5.8 (ActiveState Corp).
.PP
Last updated: 02 January 2012
