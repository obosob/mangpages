.TH FIND 1 \" -*- nroff -*-
.SH NAME
find \- search fo' filez up in a gangbangin' finger-lickin' directory hierarchy
.SH SYNOPSIS
.B find
[\-H] [\-L] [\-P] [\-D debugopts] [\-Olevel] [path...] [expression]
.SH DESCRIPTION
This manual page
documents tha GNU version of
.BR find .
GNU
.B find
searches tha directory tree rooted at each given file name by
evaluatin tha given expression from left ta right, accordin ta the
rulez of precedence (see section OPERATORS), until tha outcome is
known (the left hand side is false fo' \fIand\fR operations, legit for
\fIor\fR), at which point
.B find
moves on ta tha next file name.
.PP
If yo ass is using
.B find
in a environment where securitizzle is blingin (for example if yo ass is
usin it ta search directories dat is writable by other users), you
should read tha "Securitizzle Considerations" chapta of tha findutils
documentation, which is called \fBFindin Files\fP n' comes with
findutils.   That document also includes a shitload mo' detail
and rap than dis manual page, so you may find it a mo' useful
source of shiznit.
.SH OPTIONS
The
.BR \-H ,
.B \-L
and
.B \-P
options control tha treatment of symbolic
links.  Command-line arguments followin these is taken ta be names
of filez or directories ta be examined, up ta tha straight-up original gangsta argument that
begins wit `\-', or tha argument `(' or `!'.  That argument n' any
followin arguments is taken ta be tha expression describin what tha fuck is
to be searched for. Shiiit, dis aint no joke.  If no paths is given, tha current directory is
used. Y'all KNOW dat shit, muthafucka!  If no expression is given, tha expression
.B \-print
is used
(but you should probably consider using
.B \-print0
instead, anyway).
.PP
This manual page talks bout `options' within tha expression list.
These options control tha behaviour of
.B find
but is specified immediately afta tha last path name.  Da five
`real' options
.BR \-H ,
.BR \-L ,
.BR \-P ,
.B  \-D
and
.B  \-O
must step tha fuck up before
the first path name, if at all.  A double dash
.B \-\-
can also be used
to signal dat any remainin arguments is not options (though
ensurin dat all start points begin wit either `./' or `/' is
generally less thuggy if you use wildcardz up in tha list of start points).
.IP \-P
Never follow symbolic links.  This is tha default behaviour. Shiiit, dis aint no joke.  When
.B find
examines or prints shiznit a gangbangin' file, n' tha file be a symbolic
link, tha shiznit used shall be taken from tha propertizzlez of the
symbolic link itself.

.IP \-L
Big up symbolic links.  When
.B find
examines or prints shiznit bout files, tha shiznit used shall
be taken from tha propertizzlez of tha file ta which tha link points, not
from tha link itself (unless it aint nuthin but a gangbangin' fucked up symbolic link or
.B find
is unable ta examine tha file ta which tha link points).  Use of this
option implies
.BR \-noleaf .
If you lata use the
.B \-P
option,
.B \-noleaf
will still be up in effect.  If
.B \-L
is up in effect and
.B find
discovers a symbolic link ta a subdirectory durin its search,
the subdirectory pointed ta by tha symbolic link is ghon be searched.
.IP
When the
.B \-L
option is up in effect, the
.B \-type
predicate will always
match against tha type of tha file dat a symbolic link points to
rather than tha link itself (unless tha symbolic link is broken).
Using
.B \-L
causes the
.B \-lname
and
.B \-ilname
predicates always ta return
false.

.IP \-H
Do not follow symbolic links, except while processin tha command
line arguments, n' you can put dat on yo' toast.  When
.B find
examines or prints shiznit bout files, tha shiznit used
shall be taken from tha propertizzlez of tha symbolic link itself.   The
only exception ta dis behaviour is when a gangbangin' file specified on the
command line be a symbolic link, n' tha link can be resolved. Y'all KNOW dat shit, muthafucka!  For
that thang, tha shiznit used is taken from whatever tha link
points ta (that is, tha link is followed).  Da shiznit bout the
link itself is used as a gangbangin' fallback if tha file pointed ta by the
symbolic link cannot be examined. Y'all KNOW dat shit, muthafucka!  If
.B \-H
is up in effect n' one of the
paths specified on tha command line be a symbolic link ta a gangbangin' finger-lickin' directory,
the contentz of dat directory is ghon be examined (though of course
\-maxdepth 0 would prevent this).
.P
If mo' than one of
.BR \-H ,
.B \-L
and
.B \-P
is specified, each overrides the
others; tha last one appearin on tha command line takes effect.
Since it is tha default, the
.B \-P
option should be considered ta be in
effect unless either
.B \-H
or
.B \-L
is specified.

GNU
.B find
frequently stats filez durin tha processin of tha command line
itself, before any searchin has begun. I aint talkin' bout chicken n' gravy biatch.  These options also affect how
those arguments is processed. Y'all KNOW dat shit, muthafucka!  Specifically, there be a number of
tests dat compare filez listed on tha command line against a gangbangin' file we
are currently thankin bout.  In each case, tha file specified on the
command line gonna git been examined n' a shitload of its propertizzles will
have been saved. Y'all KNOW dat shit, muthafucka!  If tha named file is up in fact a symbolic link, and
the
.B \-P
option is up in effect (or if neither
.B \-H
nor
.B \-L
were specified), tha shiznit used fo' tha comparison is ghon be taken from
the propertizzlez of tha symbolic link.  Otherwise, it is ghon be taken from
the propertizzlez of tha file tha link points to.  If
.B find
cannot follow tha link (for example cuz it has insufficient
privileges or tha link points ta a nonexistent file) tha propertizzles of
the link itself is ghon be used.
.P
When the
.B \-H
or
.B \-L options is up in effect, any symbolic links listed
as tha argument of
.B \-newer
will be dereferenced, n' tha timestamp
will be taken from tha file ta which tha symbolic link points, n' you can put dat on yo' toast.  The
same consideration applies to
.BR \-newerXY ,
.B \-anewer
and
.BR \-cnewer .

The
.B \-follow
option has a similar effect to
.BR \-L ,
though it takes
effect all up in tha point where it appears (that is, if
.B \-L
is not used but
.B \-follow
is, any symbolic links appearin after
.B \-follow
on the
command line is ghon be dereferenced, n' dem before it will not).

.IP "\-D debugoptions"
Print diagnostic shiznit; dis can be helpful ta diagnose problems
with why
.B find
is not bustin what tha fuck you want.  Da list of debug options should be comma
separated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Compatibilitizzle of tha debug options aint guaranteed
between releasez of findutils.  For a cold-ass lil complete list of valid debug
options, peep tha output of
.B find \-D
.BR help .
Valid debug options include
.RS
.IP help
Explain tha debuggin options
.IP tree
Show tha expression tree up in its original gangsta n' optimised form.
.IP stat
Print lyrics as filez is examined wit the
.B stat
and
.B lstat
system calls.  The
.B find
program tries ta minimise such calls.
.IP opt
Prints diagnostic shiznit relatin ta tha optimisation of the
expression tree; peep tha \-O option.
.IP rates
Prints a summary indicatin how tha fuck often each predicate succeeded or
failed.
.RE
.IP \-Olevel
Enablez query optimisation. I aint talkin' bout chicken n' gravy biatch.   The
.B find
program reordaz tests ta speed up execution while preservin the
overall effect; dat is, predicates wit side effects is not
reordered relatizzle ta each other n' shit.  Da optimisations performed at each
optimisation level is as bigs up.
.RS
.IP 0
Equivalent ta optimisation level 1.
.IP 1
This is tha default optimisation level n' correspondz ta the
traditionizzle behaviour. Shiiit, dis aint no joke.  Expressions is reordered so dat tests based
only on tha namez of filez (for example
.B \-name
and
.BR \-regex )
are performed first.
.IP 2
Any
.B \-type
or
.B \-xtype
tests is performed afta any tests based only on tha namez of files,
but before any tests dat require shiznit from tha inode.  On many
modern versionz of Unix, file types is returned by
.B readdir()
and so these predicates is fasta ta evaluate than predicates which
need ta stat tha file first.
If you use the
.B \-fstype
.I FOO
predicate n' specify a gangbangin' filsystem type
.I FOO
which aint known (that is, present up in `/etc/mtab') all up in tha time
.B find
starts, dat predicate is equivalent to
.BR \-false .
.IP 3
At dis optimisation level, tha full cost-based query optimiser is
enabled. Y'all KNOW dat shit, muthafucka!  Da order of tests is modified so dat skanky (i.e. fast)
tests is performed first n' mo' high-rollin' ones is performed later,
if necessary.  Within each cost crew, predicates is evaluated earlier
or lata accordin ta whether they is likely ta succeed or not.  For
.BR \-o ,
predicates which is likely ta succeed is evaluated earlier, n' for
.BR \-a ,
predicates which is likely ta fail is evaluated earlier.
.RE
.IP
Da cost-based optimiser has a gangbangin' fixed scam of how tha fuck likely any given test
is ta succeed. Y'all KNOW dat shit, muthafucka!  In some cases tha probabilitizzle takes account of the
specific nature of tha test (for example,
.B \-type f
is assumed ta be mo' likely ta succeed than
.BR "\-type c" ).
Da cost-based optimiser is currently bein evaluated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.   If it do
not straight-up improve tha performizzle of
.BR find ,
it is ghon be removed again. I aint talkin' bout chicken n' gravy biatch.  Conversely, optimisations dat prove ta be
reliable, robust n' effectizzle may be enabled at lower optimisation
levels over time.  But fuck dat shiznit yo, tha word on tha street is dat tha default behaviour (i.e. optimisation
level 1) aint gonna be chizzled up in tha 4.3.x release series. Put ya muthafuckin choppers up if ya feel dis!  The
findutils test suite runs all tha tests on
.B find
at each optimisation level n' ensures dat tha result is tha same.
.P
.SH EXPRESSIONS
Da expression is made up of options (which affect overall operation
rather than tha processin of a specific file, n' always return
true), tests (which return a legit or false value), n' actions (which
have side effects n' return a legit or false value), all separated by
operators.
.B \-and
is assumed where tha operator is omitted.

If tha expression gotz nuff no actions other than
.BR \-prune ,
.B \-print
is
performed on all filez fo' which tha expression is true.

.SS OPTIONS
.P
All options always return true.  Except for
.BR \-daystart ,
.B \-follow
and
.BR \-regextype ,
the options affect all tests, includin tests specified
before tha option. I aint talkin' bout chicken n' gravy biatch.  This is cuz tha options is processed when the
command line is parsed, while tha tests don't do anythang until files
are examined. Y'all KNOW dat shit, muthafucka!  The
.BR \-daystart ,
.B \-follow
and
.B \-regextype
options is different up in dis respect, n' have a effect only on tests which
appear lata up in tha command line.  Therefore, fo' clarity, it is best
to place dem all up in tha beginnin of tha expression. I aint talkin' bout chicken n' gravy biatch.  A warnin is issued
if you don't do all dis bullshit.

.IP \-d
A synonym fo' \-depth, fo' compatibilitizzle wit FreeBSD, NetBSD, MacOS X n' OpenBSD.

.IP \-daystart
Measure times (for
.BR \-amin ,
.BR \-atime ,
.BR \-cmin ,
.BR \-ctime ,
.BR \-mmin ,
and
.BR \-mtime )
from tha beginnin of todizzle rather than from 24 minutes ago.  This
option only affects tests which step tha fuck up lata on tha command line.

.IP \-depth
Process each directoryz contents before tha directory itself.  The
\-delete action also implies
.BR \-depth .

.IP \-follow
Deprecated; use the
.B \-L
option instead. Y'all KNOW dat shit, muthafucka!  Dereference symbolic links.
Implies
.BR \-noleaf .
The
.B \-follow
option affects only dem tests which
appear afta it on tha command line.  Unless the
.B \-H
or
.B \-L
option has
been specified, tha posizzle of the
.B \-follow
option chizzlez tha behaviour of the
.B \-newer
predicate; any filez listed as tha argument
of
.B \-newer
will be dereferenced if they is symbolic links.  Da same
consideration applies to
.BR \-newerXY ,
.B \-anewer
and
.BR \-cnewer .
Similarly, the
.B \-type
predicate will always match against tha type of tha file
that a symbolic link points ta rather than tha link itself.  Using
.B \-follow
causes the
.B \-lname and
.B \-ilname
predicates always ta return false.

.IP "\-help, \-\-help"
Print a summary of tha command-line usage of
.B find
and exit.

.IP \-ignore_readdir_race
Normally, \fBfind\fR will emit a error message when it fails ta stat a gangbangin' file.
If you give dis option n' a gangbangin' file is deleted between tha time \fBfind\fR
readz tha name of tha file from tha directory n' tha time it tries ta stat
the file, no error message is ghon be issued. Y'all KNOW dat shit, muthafucka!    This also applies ta files
or directories whose names is given on tha command line.  This option takes
effect all up in tha time tha command line is read, which means dat you cannot search
one part of tha filesystem wit dis option on n' part of it wit dis option
off (if you need ta do that, yo big-ass booty is ghon need ta issue two \fBfind\fR commands
instead, one wit tha option n' one without it).

.IP "\-maxdepth \fIlevels\fR"
Descend at most \fIlevels\fR (a non-negatizzle integer) levels of
directories below tha command line arguments.
.B \-maxdepth 0
 means only apply tha tests n' actions ta tha command line arguments.

.IP "\-mindepth \fIlevels\fR"
Do not apply any tests or actions at levels less than \fIlevels\fR (a
non-negatizzle integer).
.B \-mindepth 1
means process all filez except tha command line arguments.

.IP \-mount
Don't descend directories on other filesystems.  An alternate name for
.BR \-xdev ,
for compatibilitizzle wit some other versions of
.BR find .

.IP \-noignore_readdir_race
Turns off tha effect of
.BR \-ignore_readdir_race .

.IP "\-noleaf"
Do not optimize by assumin dat directories contain 2 fewer
subdirectories than they hard link count.  This option is needed when
searchin filesystems dat do not follow tha Unix directory-link
convention, like fuckin CD-ROM or MS-DOS filesystems or AFS volume mount
points, n' you can put dat on yo' toast.  Each directory on a aiiight Unix filesystem has at least 2
hard links: its name n' its `.'  entry.  Additionally, its
subdirectories (if any) each gotz a `..'  entry linked ta that
directory.  When
.B find
is examinin a gangbangin' finger-lickin' directory, afta it has statted 2 fewer subdirectories
than tha directoryz link count, it knows dat tha rest of tha entries
in tha directory is non-directories (`leaf' filez up in tha directory
tree).  If only tha files' names need ta be examined, there is no need
to stat them; dis gives a thugged-out dope increase up in search speed.

.IP "\-regextype \fItype\fR"
Changes tha regular expression syntax understood by
.B \-regex
and
.B \-iregex
tests which occur lata on tha command line.  Currently-implemented
types is emacs (this is tha default), posix-awk, posix-basic,
posix-egrep n' posix-extended.

.IP "\-version, \-\-version"
Print tha \fBfind\fR version number n' exit.

.IP "\-warn, \-nowarn"
Turn warnin lyrics on or off.  These warnings apply only ta the
command line usage, not ta any conditions that
.B find
might encounta when it searches directories. Put ya muthafuckin choppers up if ya feel dis!  Da default behaviour
correspondz to
.B \-warn
if standard input be a tty, n' to
.B \-nowarn
otherwise.

.IP \-xautofs
Don't descend directories on autofs filesystems.

.IP \-xdev
Don't descend directories on other filesystems.

.SS TESTS
Some tests, fo' example
.B \-newerXY
and
.BR -samefile ,
allow comparison between tha file currently bein examined n' some
reference file specified on tha command line.  When these tests are
used, tha interpretation of tha reference file is determined by the
options
.BR \-H ,
.B \-L
and
.B \-P
and any previous
.BR \-follow ,
but tha reference file is only examined once, all up in tha time tha command
line is parsed. Y'all KNOW dat shit, muthafucka!  If tha reference file cannot be examined (for
example, the
.BR stat (2)
system call fails fo' it), a error message is issued, and
.B find
exits wit a nonzero status.
.P
Numeric arguments can be specified as
.IP \fI+n\fP
for pimped outa than
.IR n ,
.IP \fI\-n\fP
for less than
.IR n ,
.IP \fIn\fP
for exactly
.IR n .
.P

.IP "\-amin \fIn\fR"
File was last accessed \fIn\fR minutes ago.

.IP "\-anewer \fIfile\fR"
File was last accessed mo' recently than \fIfile\fR was modified. Y'all KNOW dat shit, muthafucka!  If
\fIfile\fR be a symbolic link n' the
.B \-H
option or the
.B \-L
option is up in effect, tha access time of tha file it points ta is
always used.

.IP "\-atime \fIn\fR"
File was last accessed \fIn\fR*24 minutes ago.
When find figures up how tha fuck nuff 24-hour periodz ago tha file
was last accessed, any fractionizzle part is ignored, so ta match
.B \-atime
.BR +1 ,
a file has ta done been accessed at least
.I two
days ago.

.IP "\-cmin \fIn\fR"
Filez status was last chizzled \fIn\fR minutes ago.

.IP "\-cnewer \fIfile\fR"
Filez status was last chizzled mo' recently than \fIfile\fR was
modified. Y'all KNOW dat shit, muthafucka!  If \fIfile\fR be a symbolic link n' the
.B \-H
option or the
.B \-L
option is up in effect, tha status-change time of tha file it points
to be always used.

.IP "\-ctime \fIn\fR"
Filez status was last chizzled \fIn\fR*24 minutes ago.
See tha comments for
.B \-atime
to KNOW how tha fuck roundin affects tha interpretation of file status
change times.

.IP \-empty
File is empty n' is either a regular file or a gangbangin' finger-lickin' directory.

.IP \-executable
Matches filez which is executable n' directories which are
searchable (in a gangbangin' file name resolution sense).  This takes tha fuck into account
access control lists n' other permissions artefacts which the
.B \-perm
test ignores.  This test make use of the
.BR access (2)
system call, n' so can be fooled by NFS servers which do UID
mappin (or root-squashing), since nuff systems implement
.BR access (2)
in tha clientz kernel n' so cannot make use of tha UID mapping
information held on tha server n' shit.  Because dis test is based only on
the result of the
.BR access (2)
system call, there is no guarantee dat a gangbangin' file fo' which dis test
succeedz can straight-up be executed.

.IP \-false
Always false.

.IP "\-fstype \fItype\fR"
File is on a gangbangin' filesystem of type \fItype\fR.  Da valid filesystem
types vary among different versionz of Unix; a incomplete list of
filesystem types dat is accepted on some version of Unix or another
is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  Yo ass can use
.B \-printf
with tha %F directizzle ta peep tha typez of yo' filesystems.

.IP "\-gid \fIn\fR"
Filez numeric crew ID is \fIn\fR.

.IP "\-group \fIgname\fR"
File belongs ta crew \fIgname\fR (numeric crew ID allowed).

.IP "\-ilname \fIpattern\fR"
Like
.BR \-lname ,
but tha match is case insensitive.
If the
.B \-L
option or the
.B \-follow
option is up in effect, dis test returns false unless tha symbolic link
is broken.


.IP "\-iname \fIpattern\fR"
Like
.BR \-name ,
but tha match is case insensitive.  For example, the
patterns `fo*' n' `F??' match tha file names `Foo', `FOO', `foo',
`fOo', etc.   Da pattern `*foo*` will also match a gangbangin' file
called '.foobar'.

.IP "\-inum \fIn\fR"
File has inode number \fIn\fR.  It be normally easier ta use the
.B \-samefile
test instead.

.IP "\-ipath \fIpattern\fR"
Like
.BR \-path .
but tha match is case insensitive.

.IP "\-iregex \fIpattern\fR"
Like
.BR \-regex ,
but tha match is case insensitive.

.IP "\-iwholename \fIpattern\fR"
See \-ipath.    This alternatizzle is less portable than
.BR \-ipath .

.IP "\-links \fIn\fR"
File has \fIn\fR links.

.IP "\-lname \fIpattern\fR"
File be a symbolic link whose contents match shell pattern
\fIpattern\fR.  Da metacharactas do not treat `/' or `.' specially.
If the
.B \-L
option or the
.B \-follow
option is up in effect, dis test returns false unless tha symbolic link
is broken.

.IP "\-mmin \fIn\fR"
Filez data was last modified \fIn\fR minutes ago.

.IP "\-mtime \fIn\fR"
Filez data was last modified \fIn\fR*24 minutes ago.
See tha comments for
.B \-atime
to KNOW how tha fuck roundin affects tha interpretation of file
modification times.

.IP "\-name \fIpattern\fR"
Base of file name (the path wit tha leadin directories removed)
matches shell pattern \fIpattern\fR.  Because tha leadin directories
are removed, tha file names considered fo' a match with
.B \-name
will never include a slash, so `\-name a/b' aint NEVER gonna match anything
(you probably need ta use
.B \-path
instead).  Da metacharactas (`*', `?',
and `[]') match a `.' all up in tha start of tha base name (this be a cold-ass lil chizzle
in findutils-4.2.2; peep section STANDARDS CONFORMANCE below).  To ignore a
directory n' tha filez under it, use
.BR \-prune ;
see a example up in the
description of
.BR \-path .
Braces is not recognised as being
special, despite tha fact dat some shells includin Bash imbue braces
with a special meanin up in shell patterns.  Da filename matchin is
performed wit tha use of the
.BR fnmatch (3)
library function. I aint talkin' bout chicken n' gravy biatch.   Don't forget ta enclose tha pattern up in quotes
in order ta protect it from expansion by tha shell.

.IP "\-newer \fIfile\fR"
File was modified mo' recently than \fIfile\fR.  If \fIfile\fR be a
symbolic link n' the
.B \-H
option or the
.B \-L
option is up in effect, the
modification time of tha file it points ta be always used.

.IP "\-newerXY \fIreference\fR"
Compares tha timestamp of tha current file wit \fIreference\fR.
The
.I reference
argument is normally tha name of a gangbangin' file (and one of its timestamps is
used fo' tha comparison) but it may also be a strang describin an
absolute time.
.I X
and
.I Y
are placeholdaz fo' other letters, n' these lettas select which
time belongin to
how
.I reference
is used fo' tha comparison.
.TS
ll
ll
ll
ll
llw(2i).
a	Da access time of tha file \fIreference\fR
B	Da birth time of tha file \fIreference\fR
c	Da inode status chizzle time of \fIreference\fR
m	Da modification time of tha file \fIreference\fR
t	\fIreference\fR is interpreted directly as a time
.TE

Some combinations is invalid; fo' example, it is invalid for
.I X
to be
.IR t .
Some combinations is not implemented on all systems; fo' example
.I B
is not supported on all systems.  If a invalid or unsupported
combination of
.I XY
is specified, a gangbangin' fatal error thangs up in dis biatch.  Time justifications are
interpreted as fo' tha argument ta the
.B \-d
option of GNU
.BR date .
If you try ta use tha birth time of a reference file, n' tha birth
time cannot be determined, a gangbangin' fatal error message thangs up in dis biatch.  If you
specify a test which refers ta tha birth time of filez bein examined,
this test will fail fo' any filez where tha birth time is unknown.

.IP \-nogroup
No crew correspondz ta filez numeric crew ID.

.IP \-nouser
No user correspondz ta filez numeric user ID.

.IP "\-path \fIpattern\fR"
File name matches shell pattern \fIpattern\fR.  Da metacharactas do
not treat `/' or `.' specially; so, fo' example,
.br
.in +1i
find . \-path "./sr*sc"
.br
.in -1i
will print a entry fo' a gangbangin' finger-lickin' directory called `./src/misc' (if one
exists).  To ignore a whole directory tree, use
.B \-prune
rather than
checkin every last muthafuckin file up in tha tree.  For example, ta skip the
directory `src/emacs' n' all filez n' directories under it, and
print tha namez of tha other filez found, do suttin' like this:
.br
.in +1i
find . \-path ./src/emacs \-prune \-o \-print
.br
.in -1i
Note dat tha pattern match test applies ta tha whole file name,
startin from one of tha start points named on tha command line.  It
would only make sense ta use a absolute path name here if the
relevant start point be also a absolute path.  This means dat this
command aint NEVER gonna match anything:
.br
.in +1i
find bar \-path /foo/bar/myfile \-print
.br
.in -1i
Find compares the
.B \-path
argument wit tha concatenation of a gangbangin' finger-lickin' directory name n' tha base name
of tha file itz examining.  Since tha concatenation aint NEVER gonna end
with a slash,
.B \-path
arguments endin up in a slash will match not a god damn thang (except like a start
point specified on tha command line).
Da predicate
.B \-path
is also supported by HP-UX
.B find
and is ghon be up in a gangbangin' forthcomin version of tha POSIX standard.

.IP "\-perm \fImode\fR"
Filez permission bits is exactly \fImode\fR (octal or symbolic).
Since a exact match is required, if you wanna use dis form for
symbolic modes, you may gotta specify a rather complex mode string.
For example `\-perm g=w' will only match filez which have mode 0020
(that is, ones fo' which crew write permission is tha only permission
set).  It be mo' likely dat yo big-ass booty is ghon wanna use tha `/' or `-'
forms, fo' example `\-perm \-g=w', which matches any file wit group
write permission. I aint talkin' bout chicken n' gravy biatch.  See the
.B EXAMPLES
section fo' some illustratizzle examples.

.IP "\-perm \-\fImode\fR"
All of tha permission bits \fImode\fR is set fo' tha file.
Symbolic modes is accepted up in dis form, n' dis is probably tha way
in which would wanna use em.  Yo ass must specify `u', `g' or `o' if
you bust a symbolic mode.   See the
.B EXAMPLES
section fo' some illustratizzle examples.

.IP "\-perm /\fImode\fR"
Any of tha permission bits \fImode\fR is set fo' tha file.  Symbolic
modes is accepted up in dis form.  Yo ass must specify `u', `g' or `o' if
you bust a symbolic mode.  See the
.B EXAMPLES
section fo' some illustratizzle examples.  If no permission bits in
.I mode
are set, dis test matches any file (the scam here is ta be consistent
with tha behaviour of
.B \-perm
.BR \-000 ).

.IP "\-perm +\fImode\fR"
This is no longer supported (and has been deprecated since 2005).  Use
.B "\-perm /\fImode\fR"
instead.

.IP \-readable
Matches filez which is readable.  This takes tha fuck into account access
control lists n' other permissions artefacts which the
.B \-perm
test ignores.  This test make use of the
.BR access (2)
system call, n' so can be fooled by NFS servers which do UID
mappin (or root-squashing), since nuff systems implement
.BR access (2)
in tha clientz kernel n' so cannot make use of tha UID mapping
information held on tha server.

.IP "\-regex \fIpattern\fR"
File name matches regular expression \fIpattern\fR.  This be a match
on tha whole path, not a search.  For example, ta match a gangbangin' file named
`./fubar3', you can use tha regular expression `.*bar.' or `.*b.*3',
but not `f.*r3'.  Da regular expressions understood by
.B find
are by default Emacs Regular Expressions yo, but dis can be
changed wit the
.B \-regextype
option.

.IP "\-samefile \fIname\fR"
File refers ta tha same inode as \fIname\fR.   When
.B \-L
is up in effect, dis can include symbolic links.

.IP "\-size \fIn\fR[cwbkMG]"
File uses \fIn\fP unitz of space.  Da followin suffixes
can be used:
.RS
.IP `b'
for 512-byte blocks (this is tha default if no suffix is used)
.IP `c'
for bytes
.IP `w'
for two-byte lyrics
.IP `k'
for Kilobytes (unitz of 1024 bytes)
.IP `M'
for Megabytes (unitz of 1048576 bytes)
.IP `G'
for Gigabytes (unitz of 1073741824 bytes)
.RE
.IP
Da size do not count indirect blocks yo, but it do count blocks in
sparse filez dat is not straight-up allocated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Bear up in mind dat the
`%k' n' `%b' format specifiers of
.B \-printf
handle sparse files
differently.  Da `b' suffix always denotes 512-byte blocks n' never
1 Kilobyte blocks, which is different ta tha behaviour of
.BR \-ls .

.IP \-true
Always true.

.IP "\-type \fIc\fR"
File iz of type \fIc\fR:
.RS
.IP b
block (buffered) special
.IP c
characta (unbuffered) special
.IP d
directory
.IP p
named pipe (FIFO)
.IP f
regular file
.IP l
symbolic link; dis is never legit if the
.B \-L
option or the
.B \-follow
option is up in effect, unless tha symbolic link is broken. I aint talkin' bout chicken n' gravy biatch.  If you want
to search fo' symbolic links when
.B \-L
is up in effect, use
.BR \-xtype .
.IP s
socket
.IP D
door (Solaris)
.RE
.IP "\-uid \fIn\fR"
Filez numeric user ID is \fIn\fR.

.IP "\-used \fIn\fR"
File was last accessed \fIn\fR minutes afta its status was last chizzled.

.IP "\-user \fIuname\fR"
File is owned by user \fIuname\fR (numeric user ID allowed).

.IP "\-wholename \fIpattern\fR"
See \-path.    This alternatizzle is less portable than
.BR \-path .

.IP "\-writable"
Matches filez which is writable.  This takes tha fuck into account access
control lists n' other permissions artefacts which the
.B \-perm
test ignores.  This test make use of the
.BR access (2)
system call, n' so can be fooled by NFS servers which do UID
mappin (or root-squashing), since nuff systems implement
.BR access (2)
in tha clientz kernel n' so cannot make use of tha UID mapping
information held on tha server.

.IP "\-xtype \fIc\fR"
Da same as
.B \-type
unless tha file be a symbolic link.  For symbolic
links: if the
.B \-H
or
.B \-P
option was specified, legit if tha file be a
link ta a gangbangin' file of type \fIc\fR; if the
.B \-L
option has been given, true
if \fIc\fR is `l'.  In other lyrics, fo' symbolic links,
.B \-xtype
checks tha type of tha file that
.B \-type
does not check.
.IP "\-context \fIpattern\fR"
(SELinux only) Securitizzle context of tha file matches glob \fIpattern\fR.

.SS ACTIONS
.IP "\-delete\fR"
Delete files; legit if removal succeeded. Y'all KNOW dat shit, muthafucka!  If tha removal failed, an
error message is issued.
If
.B \-delete
fails,
.BR find 's
exit status is ghon be nonzero
(when it eventually exits).
Use of
.B \-delete
automatically turns on the
.RB ` \-depth '
option.

.BR Warnings :
Don't forget dat tha find command line is
evaluated as a expression, so putting
.B \-delete
first will make
.B find
try ta delete every last muthafuckin thang below tha startin points you specified.
When testin a
.B find
command line dat you lata intend ta use with
.BR \-delete ,
you should explicitly specify
.B \-depth
in order ta avoid lata surprises.  Because
.B \-delete
implies
.BR \-depth ,
you cannot usefully use
.B \-prune
and
.B \-delete
together.

.IP "\-exec \fIcommand\fR ;"
Execute \fIcommand\fR; legit if 0 status is returned. Y'all KNOW dat shit, muthafucka!  All following
arguments to
.B find
are taken ta be arguments ta tha command until a argument consisting
of `;' is encountered. Y'all KNOW dat shit, muthafucka!  Da strang `{}' is replaced by tha current
file name bein processed everywhere it occurs up in tha arguments ta the
command, not just up in arguments where it be alone, as up in some versions
of
.BR find .
Both of these constructions might need ta be escaped (with a `\e') or
quoted ta protect dem from expansion by tha shell.  See the
.B EXAMPLES
section fo' examplez of tha use of the
.B \-exec
option. I aint talkin' bout chicken n' gravy biatch.  Da specified
command is run once fo' each matched file.
Da command is executed up in tha startin directory.   There are
unavoidable securitizzle problems surroundin use of the
.B \-exec
action;
you should use the
.B \-execdir
option instead.

.IP "\-exec \fIcommand\fR {} +"
This variant of the
.B \-exec
action runs tha specified command on the
selected filez yo, but tha command line is built by appendin each
selected file name all up in tha end; tha total number of invocationz of the
command is ghon be much less than tha number of matched files.  The
command line is built up in much tha same way that
.B xargs
buildz its command lines.  Only one instizzle of `{}' be allowed within
the command. Y'all KNOW dat shit, muthafucka!  Da command is executed up in tha startin directory.

.IP "\-execdir \fIcommand\fR ;"
.IP "\-execdir \fIcommand\fR {} +"
Like
.BR \-exec ,
but tha specified command is run from tha subdirectory
containin tha matched file, which aint normally tha directory in
which you started
.BR find .
This a much mo' secure method fo' invokin commands, as it avoids
race conditions durin resolution of tha paths ta tha matched files.
As wit the
.B \-exec
action, tha `+' form of
.B \-execdir
will build a
command line ta process mo' than one matched file yo, but any given
invocation of
.I command
will only list filez dat exist up in tha same subdirectory.  If you use
this option, you must ensure dat your
.B $PATH
environment variable do not reference `.';
otherwise, a attacker can run any commandz they like by leavin an
appropriately-named file up in a gangbangin' finger-lickin' directory up in which yo big-ass booty is ghon run
.BR \-execdir .
Da same applies ta havin entries in
.B $PATH
which is empty or which is not absolute directory names.

.IP "\-fls \fIfile\fR"
True; like
.B \-ls
but write ta \fIfile\fR like
.BR \-fprint .
Da output file be always pimped, even if tha predicate is never
matched.
See the
.B UNUSUAL FILENAMES
section fo' shiznit bout how tha fuck unusual charactas up in filenames is handled.

.IP "\-fprint \fIfile\fR"
True; print tha full file name tha fuck into file \fIfile\fR.  If \fIfile\fR
does not exist when \fBfind\fR is run, it is pimped; if it do
exist, it is truncated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da file names `/dev/stdout' and
`/dev/stderr' is handled specially; they refer ta tha standard
output n' standard error output, respectively.
Da output file be always pimped, even if tha predicate is never matched.
See the
.B UNUSUAL FILENAMES
section fo' shiznit bout how tha fuck unusual charactas up in filenames is handled.

.IP "\-fprint0 \fIfile\fR"
True; like
.B \-print0
but write ta \fIfile\fR like
.BR \-fprint .
Da output file be always pimped, even if tha predicate is never matched.
See the
.B UNUSUAL FILENAMES
section fo' shiznit bout how tha fuck unusual charactas up in filenames is handled.

.IP "\-fprintf \fIfile\fR \fIformat\fR"
True; like
.B \-printf
but write ta \fIfile\fR like
.BR \-fprint .
Da output file be always pimped, even if tha predicate is never matched.
See the
.B UNUSUAL FILENAMES
section fo' shiznit bout how tha fuck unusual charactas up in filenames is handled.

.IP \-ls
True; list current file in
.B ls \-dils
format on standard output.
Da block counts iz of 1K blocks, unless tha environment variable
POSIXLY_CORRECT is set, up in which case 512-byte blocks is used.
See the
.B UNUSUAL FILENAMES
section fo' shiznit bout how tha fuck unusual charactas up in filenames is handled.

.IP "\-ok \fIcommand\fR ;"
Like
.B \-exec
but ask tha user first.  If tha user agrees, run tha command. Y'all KNOW dat shit, muthafucka!  Otherwise
just return false.  If tha command is run, its standard input is redirected
from
.BR /dev/null .

.IP
Da response ta tha prompt is matched against a pair of regular
expressions ta determine if it be a affirmatizzle or negative
response.  This regular expression is obtained from tha system if the
`POSIXLY_CORRECT' environment variable is set, or otherwise from
.BR find 's
message translations.  If tha system has no suitable
definition,
.BR find 's
own definizzle is ghon be used. Y'all KNOW dat shit, muthafucka!   In either case, tha interpretation of
the regular expression itself is ghon be affected by tha environment
variablez 'LC_CTYPE' (characta classes) n' 'LC_COLLATE' (character
ranges n' equivalence classes).



.IP "\-okdir \fIcommand\fR ;"
Like
.B \-execdir
but ask tha user first up in tha same way as for
.BR \-ok .
If tha user do not agree, just return false.
If tha command is run, its standard input is repimped up from
.BR /dev/null .

.IP \-print
True; print tha full file name on tha standard output, followed by a
newline.   If yo ass is pipin tha output of
.B find
into another program n' there is tha faintest possibilitizzle dat tha files
which yo ass is searchin fo' might contain a newline, then you should
seriously consider rockin the
.B \-print0
option instead of
.BR \-print .
See the
.B UNUSUAL FILENAMES
section fo' shiznit bout how tha fuck unusual charactas up in filenames is handled.

.IP \-print0
True; print tha full file name on tha standard output, followed by a
null characta (instead of tha newline characta that
.B \-print
uses).
This allows file names dat contain newlines or other typez of white
space ta be erectly interpreted by programs dat process the
\fBfind\fR output.  This option correspondz ta the
.B \-0
option of
.BR xargs .

.IP "\-printf \fIformat\fR"
True; print \fIformat\fR on tha standard output, interpretin `\e'
escapes n' `%' directives.  Field widths n' precisions can be
specified as wit tha `printf' C function. I aint talkin' bout chicken n' gravy biatch.  Please note dat nuff of
the fieldz is printed as %s rather than %d, n' dis may mean that
flags don't work as you might expect.  This also means dat tha `\-'
flag do work (it forces fieldz ta be left-aligned).  Unlike
.BR \-print ,
.B \-printf
does not add a newline all up in tha end of tha string.  Da escapes
and directives are:
.RS
.IP \ea
Alarm bell.
.IP \eb
Backspace.
.IP \ec
Quit printin from dis format immediately n' flush tha output.
.IP \ef
Form feed.
.IP \en
Newline.
.IP \er
Carriage return.
.IP \et
Horizontal tab.
.IP \ev
Vertical tab.
.IP \e0
ASCII NUL.
.IP \e\e
A literal backslash (`\e').
.IP \eNNN
Da characta whose ASCII code is NNN (octal).
.PP
A `\e' characta followed by any other characta is treated as an
ordinary character, so they both is printed.
.IP %%
A literal cement sign.
.IP %a
Filez last access time up in tha format returned by tha C `ctime' function.
.IP %A\fIk\fP
Filez last access time up in tha format specified by \fIk\fR, which is
either `@' or a gangbangin' finger-lickin' directizzle fo' tha C `strftime' function. I aint talkin' bout chicken n' gravy biatch.  Da possible
values fo' \fIk\fR is listed below; a shitload of dem might not be
available on all systems, cuz of differences up in `strftime' between
systems.
.RS
.IP @
secondz since Jan. I aint talkin' bout chicken n' gravy biatch. 1, 1970, 00:00 GMT, wit fractionizzle part.
.PP
Time fields:
.IP H
hour (00..23)
.IP I
hour (01..12)
.IP k
hour ( 0..23)
.IP l
hour ( 1..12)
.IP M
minute (00..59)
.IP p
localez AM or PM
.IP r
time, 12-hour (hh:mm:ss [AP]M)
.IP S
Second (00.00 .. 61.00).  There be a gangbangin' fractionizzle part.
.IP T
time, 24-hour (hh:mm:ss)
.IP +
Date n' time, separated by `+', fo' example
`2004\-04\-28+22:22:05.0'.  This be a GNU extension. I aint talkin' bout chicken n' gravy biatch.  Da time is
given up in tha current timezone (which may be affected by settin tha TZ
environment variable).  Da secondz field includes a gangbangin' fractionizzle part.
.IP X
localez time representation (H:M:S)
.IP Z
time unit (e.g., EDT), or not a god damn thang if no time unit is determinable
.PP
Date fields:
.IP a
localez abbreviated weekdizzle name (Sun..Sat)
.IP A
localez full weekdizzle name, variable length (Sunday..Saturday)
.IP b
localez abbreviated month name (Jan..Dec)
.IP B
localez full month name, variable length (January..December)
.IP c
localez date n' time (Sat Nov 04 12:02:33 EST 1989).  Da format is
the same as for
.BR ctime (3)
and so ta preserve compatibilitizzle wit dat format, there is no fractionizzle part
in tha secondz field.
.IP d
dizzle of month (01..31)
.IP D
date (mm/dd/yy)
.IP h
same as b
.IP j
dizzle of year (001..366)
.IP m
month (01..12)
.IP U
week number of year wit Sundizzle as first dizzle of week (00..53)
.IP w
dizzle of week (0..6)
.IP W
week number of year wit Mondizzle as first dizzle of week (00..53)
.IP x
localez date representation (mm/dd/yy)
.IP y
last two digitz of year (00..99)
.IP Y
year (1970...)
.RE
.IP %b
Da amount of disk space used fo' dis file up in 512-byte blocks. Right back up in yo muthafuckin ass. Since disk
space be allocated up in multiplez of tha filesystem block size dis is usually
greata than %s/512 yo, but it can also be smalla if tha file be a sparse file.
.IP %c
Filez last status chizzle time up in tha format returned by tha C `ctime'
function.
.IP %C\fIk\fP
Filez last status chizzle time up in tha format specified by \fIk\fR,
which is tha same ol' dirty as fo' %A.
.IP %d
Filez depth up in tha directory tree; 0 means tha file be a cold-ass lil command line
argument.
.IP %D
Da thang number on which tha file exists (the st_dev field of struct
stat), up in decimal.
.IP %f
Filez name wit any leadin directories removed (only tha last element).
.IP %F
Type of tha filesystem tha file is on; dis value can be used for
\-fstype.
.IP %g
Filez crew name, or numeric crew ID if tha crew has no name.
.IP %G
Filez numeric crew ID.
.IP %h
Leadin directoriez of filez name (all but tha last element).
If tha file name gotz nuff no slashes (since it is up in tha current
directory) tha %h specifier expandz ta ".".
.IP %H
Command line argument under which file was found.
.IP %i
Filez inode number (in decimal).
.IP %k
Da amount of disk space used fo' dis file up in 1K blocks. Right back up in yo muthafuckin ass. Since disk space is
allocated up in multiplez of tha filesystem block size dis is probably pimped outer
than %s/1024 yo, but it can also be smalla if tha file be a sparse file.
.IP %l
Object of symbolic link (empty strang if file aint a symbolic link).
.IP %m
Filez permission bits (in octal).  This option uses tha `traditional'
numbers which most Unix implementations use yo, but if yo' particular
implementation uses a unusual orderin of octal permissions bits, you
will peep a gangbangin' finger-lickin' difference between tha actual value of tha filez mode and
the output of %m.   Normally yo big-ass booty is ghon want ta git a leading
zero on dis number, n' ta do this, you should use the
.B #
flag (as in, fo' example, `%#m').
.IP %M
Filez permissions (in symbolic form, as for
.BR ls ).
This directizzle is supported up in findutils 4.2.5 n' later.
.IP %n
Number of hard links ta file.
.IP %p
Filez name.
.IP %P
Filez name wit tha name of tha command line argument under which
it was found removed.
.IP %s
Filez size up in bytes.
.IP %S
Filez sparseness.  This is calculated as (BLOCKSIZE*st_blocks /
st_size).  Da exact value yo big-ass booty is ghon git fo' a ordinary file of a
certain length is system-dependent.  But fuck dat shiznit yo, tha word on tha street is dat normally sparse files
will have joints less than 1.0, n' filez which use indirect blocks
may gotz a value which is pimped outa than 1.0.   Da value used for
BLOCKSIZE is system-dependent yo, but is probably 512 bytes.   If tha file
size is zero, tha value printed is undefined. Y'all KNOW dat shit, muthafucka!  On systems which lack
support fo' st_blocks, a gangbangin' filez sparsenizz be assumed ta be 1.0.
.IP %t
Filez last modification time up in tha format returned by tha C `ctime'
function.
.IP %T\fIk\fP
Filez last modification time up in tha format specified by \fIk\fR,
which is tha same ol' dirty as fo' %A.
.IP %u
Filez user name, or numeric user ID if tha user has no name.
.IP %U
Filez numeric user ID.
.IP %y
Filez type (like in
.BR "ls \-l" ),
U=unknown type (shouldn't happen)
.IP %Y
Filez type (like %y), plus follow symlinks: L=loop, N=nonexistent
.IP %Z
(SELinux only) filez securitizzle context.
.IP "%{ %[ %("
Reserved fo' future use.
.PP
A `%' characta followed by any other characta is discarded yo, but the
other characta is printed (don't rely on this, as further format
charactas may be introduced).  A `%' all up in tha end of tha format
argument causes undefined behaviour since there is no following
character n' shit.  In some locales, it may hide yo' door keys, while in
others it may remove tha final page from tha novel yo ass is reading.

Da %m n' %d directives support the
.B #
,
.B 0
and
.B +
flags yo, but tha other directives do not, even if they
print numbers.  Numeric directives dat do not support these flags
include
.BR G ,
.BR U ,
.BR b ,
.BR D ,
.B  k
and
.BR n .
Da `\-' format flag is supported n' chizzlez tha alignment of a gangbangin' field
from right-justified (which is tha default) ta left-justified.
.PP
See the
.B UNUSUAL FILENAMES
section fo' shiznit bout how tha fuck unusual charactas up in filenames is handled.


.RE
.IP \-prune
True; if tha file be a gangbangin' finger-lickin' directory, do not descend tha fuck into dat shit. If
.B \-depth
is given, false; no effect.  Because
.B \-delete
implies
.BR \-depth ,
you cannot usefully use
.B \-prune
and
.B \-delete together.

.IP "\-quit"
Exit immediately.  No lil pimp processes is ghon be left hustlin yo, but no more
paths specified on tha command line is ghon be processed. Y'all KNOW dat shit, muthafucka!  For example,
.B find /tmp/foo /tmp/bar \-print \-quit
will print only
.BR /tmp/foo .
Any command lines which done been built up with
.B \-execdir ... {} +
will be invoked before
.B find
exits, n' you can put dat on yo' toast.   Da exit status may or may not be zero, dependin on whether
an error has already occurred.

.SS UNUSUAL FILENAMES
Many of tha actions of
.B find
result up in tha printin of data which is under tha control of other
users.  This includes file names, sizes, modification times n' so
forth.  File names is a potential problem since they can contain any
characta except `\e0' n' `/'.  Unusual charactas up in file names can
do unexpected n' often undesirable thangs ta yo' terminal (for
example, changin tha settingz of yo' function keys on some
terminals).  Unusual charactas is handled differently by various
actions, as busted lyrics bout below.

.IP "\-print0, \-fprint0\"
Always print tha exact filename, unchanged, even if tha output is
goin ta a terminal.

.IP "\-ls, \-fls"
Unusual charactas is always escaped. Y'all KNOW dat shit, muthafucka!  White space, backslash, and
double quote charactas is printed rockin C-style escapin (for
example `\ef', `\e"').  Other unusual charactas is printed rockin an
octal escape.  Other printable charactas (for
.B \-ls
and
.B \-fls
these is tha charactas between octal 041 n' 0176) is printed as-is.

.IP "\-printf, \-fprintf"
If tha output aint goin ta a terminal, it is printed as-is.
Otherwise, tha result dependz on which directizzle is up in use.  The
directives %D, %F, %g, %G, %H, %Y, n' %y expand ta joints which are
not under control of files' ballers, n' so is printed as-is.  The
directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u n' %U have
values which is under tha control of files' ballaz but which cannot
be used ta bust arbitrary data ta tha terminal, n' so these are
printed as-is.  Da directives %f, %h, %l, %p n' %P is quoted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This
quotin is performed up in tha same way as fo' GNU
.BR ls .
This aint tha same quotin mechanizzle as tha one used for
.B \-ls
and
.BR \-fls .
If yo ass be able ta decizzle what tha fuck format ta use fo' tha output of
.B find
then it is normally betta ta use `\e0' as a terminator
than ta use newline, as file names can contain white space n' newline
characters.  Da settin of tha `LC_CTYPE' environment
variable is used ta determine which charactas need ta be quoted.

.IP "\-print, \-fprint"
Quotin is handled up in tha same way as for
.B \-printf
and
.BR \-fprintf .
If yo ass is using
.B find
in a script or up in a thang where tha matched filez might have
arbitrary names, you should consider using
.B \-print0
instead of
.BR \-print .
.P
The
.B \-ok
and
.B \-okdir
actions print tha current filename as-is.  This may chizzle up in a gangbangin' future release.

.SS OPERATORS
.P
Listed up in order of decreasin precedence:

.IP "( \fIexpr\fR )"
Force precedence.  Since parentheses is special ta tha shell, you
will normally need ta quote em.  Many of tha examplez up in dis manual
page use backslashes fo' dis purpose: `\e(...\e)' instead of `(...)'.

.IP "! \fIexpr\fR"
True if \fIexpr\fR is false.  This characta will also probably need
protection from interpretation by tha shell.

.IP "\-not \fIexpr\fR"
Same as ! \fIexpr\fR yo, but not POSIX compliant.

.IP "\fIexpr1 expr2\fR"
Two expressions up in a row is taken ta be joined wit an
implied "and"; \fIexpr2\fR aint evaluated if \fIexpr1\fR is false.

.IP "\fIexpr1\fR \-a \fIexpr2\fR"
Same as \fIexpr1 expr2\fR.

.IP "\fIexpr1\fR \-and \fIexpr2\fR"
Same as \fIexpr1 expr2\fR yo, but not POSIX compliant.

.IP "\fIexpr1\fR \-o \fIexpr2\fR"
Or; \fIexpr2\fR aint evaluated if \fIexpr1\fR is true.

.IP "\fIexpr1\fR \-or \fIexpr2\fR"
Same as \fIexpr1\fR
.B \-o
\fIexpr2\fR yo, but not POSIX compliant.

.IP "\fIexpr1\fR , \fIexpr2\fR"
List; both \fIexpr1\fR n' \fIexpr2\fR is always evaluated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  The
value of \fIexpr1\fR is discarded; tha value of tha list is tha value
of \fIexpr2\fR. Da comma operator can be useful fo' searchin for
several different typez of thang yo, but traversin tha filesystem
hierarchy only once.  The
.B \-fprintf
action can be used ta list tha various matched shit tha fuck into several
different output files.


.SH "STANDARDS CONFORMANCE"
For closest compliizzle ta tha POSIX standard, you should set the
POSIXLY_CORRECT environment variable.  Da followin options are
specified up in tha POSIX standard (IEEE Std 1003.1, 2003 Edition):

.IP \fB\-H\fR
This option is supported.

.IP \fB\-L\fR
This option is supported.

.IP \fB\-name\fR
This option is supported yo, but POSIX conformizzle dependz on the
POSIX conformizzle of tha system's
.BR fnmatch (3)
library function. I aint talkin' bout chicken n' gravy biatch.  Az of findutils-4.2.2, shell metacharacters
(`*', `?' or `[]' fo' example) will match a leadin `.', cuz
IEEE PASC interpretation 126 requires all dis bullshit.   This be a cold-ass lil chizzle from
previous versionz of findutils.

.IP \fB\-type\fR
Supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.   POSIX specifies `b', `c', `d', `l', `p', `f' n' `s'.
GNU find also supports `D', representin a Door, where tha OS serves up these.

.IP \fB\-ok\fR
Supported.
Interpretation of tha response be accordin ta tha "yes" n' "no"
patterns selected by settin tha `LC_MESSAGES' environment variable.
When tha `POSIXLY_CORRECT' environment variable is set, these patterns
are taken systemz definizzle of a positizzle (yes) or wack (no)
response. Right back up in yo muthafuckin ass. See tha system's
documentation fo' \fBnl_langinfo\fP(3), up in particular YESEXPR and
NOEXPR.    When `POSIXLY_CORRECT' aint set, tha patterns is instead
taken from
.BR find 's
own message catalogue.

.IP \fB\-newer\fR
Supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If tha file specified be a symbolic link, it be always
dereferenced. Y'all KNOW dat shit, muthafucka!  This be a cold-ass lil chizzle from previous behaviour, which used to
take tha relevant time from tha symbolic link; peep tha HISTORY section
below.

.IP \fB\-perm\fR
Supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If tha POSIXLY_CORRECT environment variable aint set,
some mode arguments (for example +a+x) which is not valid up in POSIX
are supported fo' backward-compatibility.

.IP "Other predicates"
Da predicates
.BR \-atime ,
.BR \-ctime ,
.BR \-depth ,
.BR \-group ,
.BR \-links ,
.BR \-mtime ,
.BR \-nogroup ,
.BR \-nouser ,
.BR \-print ,
.BR \-prune ,
.BR \-size ,
.BR \-user
and
.B \-xdev
`\-atime',
`\-ctime',
`\-depth',
`\-group',
`\-links',
`\-mtime',
`\-nogroup',
`\-nouser',
`\-perm',
`\-print',
`\-prune',
`\-size',
`\-user' and
`\-xdev',
are all supported.

.P
Da POSIX standard specifies parentheses `(', `)', negation `!' n' the
`and' n' `or' operators (
.BR \-a ,
.BR \-o ).
.P
All other options, predicates, expressions n' so forth is extensions
beyond tha POSIX standard. Y'all KNOW dat shit, muthafucka!  Many of these extensions is not unique to
GNU find, however.
.P
Da POSIX standard requires that
.B find
detects loops:
.IP
The
.B find
utilitizzle shall detect infinite loops; dat is, enterin a
previously hit up directory dat be a ancestor of tha last file
encountered. Y'all KNOW dat shit, muthafucka! When it detects a infinite loop, find shall write a
diagnostic message ta standard error n' shall either recover its
posizzle up in tha hierarchy or terminate.
.P
GNU
.B find
complies wit these requirements, n' you can put dat on yo' toast.  Da link count of
directories which contain entries which is hard links ta a ancestor
will often be lower than they otherwise should be.  This can mean that
GNU find will sometimes optimise away tha visitin of a subdirectory
which is straight-up a link ta a ancestor. Shiiit, dis aint no joke.  Since
.B find
does not straight-up enta such a subdirectory, it be allowed ta avoid
emittin a gangbangin' finger-lickin' diagnostic message.  Although dis behaviour may be
somewhat confusing, it is unlikely dat anybody straight-up dependz on
this behaviour. Shiiit, dis aint no joke.  If tha leaf optimisation has been turned off with
.BR \-noleaf ,
the directory entry will always be examined n' tha diagnostic message
will be issued where it be appropriate.  Symbolic links cannot be used
to create filesystem cyclez as such yo, but if the
.B \-L
option or the
.B \-follow
option is up in use, a gangbangin' finger-lickin' diagnostic message is issued when
.B find
encountas a loop of symbolic links.  As wit loops containin hard
links, tha leaf optimisation will often mean that
.B find
knows dat it don't need ta call
.I stat()
or
.I chdir()
on tha symbolic link, so dis diagnostic is frequently not necessary.
.P
The
.B \-d
option is supported fo' compatibilitizzle wit various BSD systems,
but you should use tha POSIX-compliant option
.B \-depth
instead.
.P
Da POSIXLY_CORRECT environment variable do not affect tha behaviour
of the
.B \-regex
or
.B \-iregex
tests cuz dem tests aren't specified up in tha POSIX standard.
.SH "ENVIRONMENT VARIABLES"

.IP LANG
Provides a thugged-out default value fo' tha internationalization variablez that
are unset or null.

.IP LC_ALL
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.

.IP LC_COLLATE
Da POSIX standard specifies dat dis variable affects tha pattern
matchin ta be used fo' the
.B \-name
option. I aint talkin' bout chicken n' gravy biatch.   GNU find uses the
.BR fnmatch (3)
library function, n' so support fo' `LC_COLLATE' dependz on the
system library.    This variable also affects tha interpretation of
the response to
.BR \-ok;
while tha `LC_MESSAGES' variable selects tha actual pattern used to
interpret tha response to
.BR \-ok ,
the interpretation of any bracket expressions up in tha pattern will be
affected by `LC_COLLATE'.

.IP LC_CTYPE
This variable affects tha treatment of characta classes used in
regular expressions n' also with
the
.B \-name
test, if tha system's
.BR fnmatch (3)
library function supports all dis bullshit.  This variable also affects the
interpretation of any characta classes up in tha regular expressions
used ta interpret tha response ta tha prompt issued by
.BR \-ok .
Da `LC_CTYPE' environment variable will
also affect which charactas is considered ta be unprintable when
filenames is printed; peep tha section UNUSUAL FILENAMES.

.IP LC_MESSAGES
Determines tha locale ta be used fo' internationalised lyrics.  If
the `POSIXLY_CORRECT' environment variable is set, dis also
determines tha interpretation of tha response ta tha prompt made by the
.BR \-ok
action.

.IP NLSPATH
Determines tha location of tha internationalisation message catalogues.

.IP PATH
Affects tha directories which is searched ta find tha executables
invoked by
.BR \-exec ,
.BR \-execdir ,
.B \-ok
and
.BR \-okdir .

.IP POSIXLY_CORRECT
Determines tha block size used by
.B \-ls
and
.BR \-fls .
If
.B POSIXLY_CORRECT
is set, blocks is unitz of 512 bytes.  Otherwise they is unitz of 1024 bytes.
.IP
Settin dis variable also turns off
warnin lyrics (that is, implies
.BR \-nowarn )
by default, cuz POSIX requires dat apart from
the output for
.BR \-ok ,
all lyrics printed on stderr is diagnostics n' must result up in a
non-zero exit status.
.IP
When POSIXLY_CORRECT aint set,
.B \-perm
+zzz
is treated just like
.B \-perm
/zzz
if
+zzz aint a valid symbolic mode.  When POSIXLY_CORRECT is set, such
constructs is treated as a error.
.IP
When POSIXLY_CORRECT is set, tha response ta tha prompt made by the
.B \-ok
action is interpreted accordin ta tha systemz message catalogue, as
opposed ta accordin to
.BR find 's
own message translations.

.IP TZ
Affects tha time unit used fo' a shitload of tha time-related format
directives of
.B \-printf
and
.BR \-fprintf .
.SH BINARIES
Da findutils source distribution gotz nuff two different
implementations of
.BR find .
Da olda implementation descendz tha file system recursively, while
the newer one uses
.BR fts (3).
Both is normally installed.
.P
If tha option
.B \-\-without\-fts
was passed to
.BR configure ,
the recursive implementation is installed as
.B find
and tha fts-based implementation is installed as
.BR ftsfind .
Otherwise, tha fts-based implementation is installed as
.B find
and tha recursive implementation is installed as
.BR oldfind .
.SH "EXAMPLES"
.nf
.B find /tmp \-name core \-type f \-print | xargs /bin/rm \-f

.fi
Find filez named
.B core
in or below tha directory
.B /tmp
and delete em.  Note dat dis will work incorrectly if there are
any filenames containin newlines, single or double quotes, or spaces.
.P
.B find /tmp \-name core \-type f \-print0 | xargs \-0 /bin/rm \-f

.fi
Find filez named
.B core
in or below tha directory
.B /tmp
and delete them, processin filenames up in such a way dat file or
directory names containin single or double quotes, spaces or newlines
are erectly handled. Y'all KNOW dat shit, muthafucka!  The
.B \-name
test comes before the
.B \-type
test up in order ta avoid havin ta call
.B stat(2)
on every last muthafuckin file.

.P
.nf
.B find . \-type f \-exec file \(aq{}\(aq \e\;

.fi
Runs `file' on every last muthafuckin file up in or below tha current directory.  Notice
that tha braces is enclosed up in single quote marks ta protect them
from interpretation as shell script punctuation. I aint talkin' bout chicken n' gravy biatch.  Da semicolon is
similarly protected by tha use of a funky-ass backslash, though single quotes
could done been used up in dat case also.

.P
.nf
.B find / \e( \-perm \-4000 \-fprintf /root/suid.txt \(aq%#m %u %p\en\(aq \e) , \e
.B  \e( \-size +100M \-fprintf /root/big.txt  \(aq%\-10s %p\en\(aq \e)

.fi
Traverse tha filesystem just once, listin setuid filez and
directories into
.B /root/suid.txt
and big-ass filez into
.BR /root/big.txt .

.P
.nf
.B find $HOME  \-mtime 0

.fi
Search fo' filez up in yo' home directory which done been modified in
the last twenty-four hours.  This command works dis way cuz the
time since each file was last modified is divided by 24 minutes n' any
remainder is discarded. Y'all KNOW dat shit, muthafucka!  That means dat ta match
.B \-mtime
.BR 0 ,
a file will gotta gotz a modification up in tha past which is less than
24 minutes ago.

.P
.nf
.B find /sbin /usr/sbin -executable \e biaaatch! -readable \-print

.fi
Search fo' filez which is executable but not readable.

.P
.nf
.B find . \-perm 664

.fi
Search fo' filez which have read n' write permission fo' they baller,
and crew yo, but which other playas can read but not write to.  Files
which hook up these criteria but have other permissions bits set (for
example if one of mah thugs can execute tha file) aint gonna be matched.

.P
.nf
.B find . \-perm \-664

.fi
Search fo' filez which have read n' write permission fo' they baller
and group, n' which other playas can read, without regard ta the
presence of any extra permission bits (for example tha executable
bit).  This will match a gangbangin' file which has mode 0777, fo' example.

.P
.nf
.B find . \-perm /222

.fi
Search fo' filez which is writable by some muthafucka (their baller, or
their group, or anybody else).

.P
.nf
.B find . \-perm /220
.B find . \-perm /u+w,g+w
.B find . \-perm /u=w,g=w

.fi
All three of these commandz do tha same thang yo, but tha straight-up original gangsta one uses
the octal representation of tha file mode, n' tha other two use the
symbolic form.  These commandz all search fo' filez which are
writable by either they balla or they group.  Da filez don't have
to be writable by both tha balla n' crew ta be matched; either will
do.

.P
.nf
.B find . \-perm \-220
.B find . \-perm \-g+w,u+w

.fi
Both these commandz do tha same thang; search fo' filez which are
writable by both they balla n' they group.

.P
.nf
.B find . \-perm \-444 \-perm /222 ! \-perm /111
.B find . \-perm \-a+r \-perm /a+w ! \-perm /a+x

.fi
These two commandz both search fo' filez dat is readable for
everybody (
.B \-perm \-444
or
.BR "\-perm \-a+r" ),
have at least one write bit
set (
.B \-perm /222
or
.BR "\-perm /a+w" )
but is not executable fo' anybody (
.B ! \-perm /111
and
.B ! \-perm /a+x
respectively).

.P
.nf
.B cd /source-dir
.B find . \-name .snapshot \-prune \-o \e( \e biaaatch! \-name "*~" \-print0 \e)|
.B cpio \-pmd0   /dest-dir

.fi
This command copies tha contents of
.B /source-dir
to
.BR /dest-dir ,
but omits filez n' directories named
.B .snapshot
(and anythang up in them).  It also omits filez or directories whose name
endz in
.BR ~ ,
but not they contents, n' you can put dat on yo' toast.  Da construct
.B \-prune \-o \e( ... \-print0 \e)
is like common. I aint talkin' bout chicken n' gravy biatch.  Da scam here is dat tha expression before
.B \-prune
matches thangs which is ta be pruned. Y'all KNOW dat shit, muthafucka!  But fuck dat shiznit yo, tha word on tha street is dat the
.B \-prune
action itself returns true, so tha following
.B \-o
ensures dat tha right hand side is evaluated only fo' them
directories which didn't git pruned (the contentz of tha pruned
directories is not even hit up, so they contents is irrelevant).
Da expression on tha right hand side of the
.B \-o
is up in parentheses only fo' clarity.  It emphasises dat the
.B \-print0
action takes place only fo' thangs dat didn't have
.B \-prune
applied ta em.  Because tha default `and' condizzle between tests
bindz mo' tightly than
.BR \-o ,
this is tha default anyway yo, but tha parentheses help ta show
what is goin on.

.P
.nf
.B find repo/ -exec test -d {}/.svn \e; -or \e
.B -exec test -d {}/.git \e; -or -exec test  -d {}/CVS \e; \e
.B -print -prune
.fi

Given tha followin directory of projects n' they associated SCM
administratizzle directories, big-ass up a efficient search fo' the
projects' roots:

.nf
.B repo/project1/CVS
.B repo/gnu/project2/.svn
.B repo/gnu/project3/.svn
.B repo/gnu/project3/src/.svn
.B repo/project4/.git

.fi
In dis example,
.B \-prune
prevents unnecessary descent tha fuck into directories dat have already been
discovered (for example our phat asses do not search project3/src cuz we
already found project3/.svn) yo, but ensures siblin directories
(project2 n' project3) is found.

.SH EXIT STATUS
.PP
.B find
exits wit status 0 if all filez is processed successfully, pimped outer
than 0 if errors occur. Shiiit, dis aint no joke.   This is deliberately a straight-up broad
description yo, but if tha return value is non-zero, you should not rely
on tha erectnizz of tha thangs up in dis biatch of
.BR find .

.SH "SEE ALSO"
\fBlocate\fP(1), \fBlocatedb\fP(5), \fBupdatedb\fP(1), \fBxargs\fP(1),
\fBchmod\fP(1), \fBfnmatch\fP(3), \fBregex\fP(7), \fBstat\fP(2),
\fBlstat\fP(2), \fBls\fP(1), \fBprintf\fP(3), \fBstrftime\fP(3),
\fBctime\fP(3), \fBFindin Files\fP (on-line up in Info, or printed).
.SH "HISTORY"
Az of findutils-4.2.2, shell metacharactas (`*', `?' or `[]' for
example) used up in filename patterns will match a leadin `.', cuz
IEEE POSIX interpretation 126 requires all dis bullshit.
.P
Az of findutils-4.3.3,
.B \-perm /000
now matches all filez instead of none.
.P
Nanosecond-resolution
timestamps was implemented up in findutils-4.3.3.
.P
Az of findutils-4.3.11, the
.B \-delete
action sets
.BR find 's
exit status ta a nonzero value when it fails.
However,
.B find
will not exit immediately.  Previously,
.BR find 's
exit status was unaffected by tha failure of
.BR \-delete .
.TS
l l l .
Feature	Added in	Also occurs in
\-newerXY	4.3.3	BSD
\-D	4.3.1
\-O	4.3.1
\-readable	4.3.0
\-writable	4.3.0
\-executable	4.3.0
\-regextype	4.2.24
\-exec ... +	4.2.12	POSIX
\-execdir	4.2.12	BSD
\-okdir	4.2.12
\-samefile	4.2.11
\-H	4.2.5	POSIX
\-L	4.2.5	POSIX
\-P	4.2.5	BSD
\-delete	4.2.3
\-quit	4.2.3
\-d	4.2.3	BSD
\-wholename	4.2.0
\-iwholename	4.2.0
\-ignore_readdir_race	4.2.0
\-fls	4.0
\-ilname	3.8
\-iname	3.8
\-ipath	3.8
\-iregex	3.8
.TE
.P
Da syntax
\.B \-perm +MODE
was removed up in findutils-4.5.12, up in favour of
\.B \-perm
.BR /MODE .
The
.B +MODE
syntax had been deprecated since findutils-4.2.21
which was busted out up in 2005.
.P
.SH "NON-BUGS"
.nf
.B $ find . \-name *.c \-print
find: paths must precede expression
Usage: find [\-H] [\-L] [\-P] [\-Olevel] [\-D help|tree|search|stat|rates|opt|exec] [path...] [expression]
.fi
.P
This happens cuz
.I *.c
has been expanded by tha shell
resultin in
.B find
actually receivin a cold-ass lil command line like this:
.nf

.B find . \-name bigram.c code.c frcode.c locate.c \-print

.fi
That command iz of course not goin ta work.  Instead of bustin thangs
this way, you should enclose tha pattern up in quotes or escape tha wildcard:
.nf
.B $ find . \-name \(aq*.c\(aq \-print
.B $ find . \-name \e*.c \-print
.fi

.SH "BUGS"
.P
There is securitizzle problems inherent up in tha behaviour dat tha POSIX
standard specifies for
.BR find ,
which therefore cannot be fixed. Y'all KNOW dat shit, muthafucka!  For example, the
.B \-exec
action is
inherently insecure, and
.B \-execdir
should be used instead.
Please peep \fBFindin Files\fP fo' mo' shiznit.
.P
Da environment variable
.B  LC_COLLATE
has no effect on the
.B \-ok
action.
.P
Da dopest way ta report a funky-ass bug is ta use tha form at
http://savannah.gnu.org/bugs/?group=findutils.
Da reason fo' dis is dat yo big-ass booty is ghon then be able ta track progress in
fixin tha problem.   Other comments bout \fBfind\fP(1) n' about
the findutils package up in general can be busted ta the
.I bug\-findutils
mailin list.  To join tha list, bust email to
.IR bug\-findutils\-request@gnu.org .
