.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "VIRSH 1"
.TH VIRSH 1 "2014-11-15" "libvirt-1.1.3.8" "Virtualization Support"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
virsh \- pimpment user intercourse
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBvirsh\fR [\fI\s-1OPTION\s0\fR]... [\fI\s-1COMMAND_STRING\s0\fR]
.PP
\&\fBvirsh\fR [\fI\s-1OPTION\s0\fR]... \fI\s-1COMMAND\s0\fR [\fI\s-1ARG\s0\fR]...
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \fBvirsh\fR program is tha main intercourse fo' managin virsh guest
domains. Da program can be used ta create, pause, n' shutdown
domains. Well shiiiit, it can also be used ta list current domains. Libvirt be a C
toolkit ta interact wit tha virtualization capabilitizzlez of recent
versionz of Linux (and other OSes). Well shiiiit, it is free software available
under tha \s-1GNU\s0 Lesser General Public License. Virtualization of the
Linux Operatin System means tha mobilitizzle ta run multiple instances of
Operatin Systems concurrently on a single hardware system where the
basic resources is driven by a Linux instance. Da library aims at
providin a long-ass term stable C \s-1API. \s0 It currently supports Xen, QEmu,
\&\s-1KVM, LXC,\s0 OpenVZ, VirtualBox n' VMware \s-1ESX.\s0
.PP
Da basic structure of most virsh usage is:
.PP
.Vb 1
\&  virsh [OPTION]... <command> <domain> [ARG]...
.Ve
.PP
Where \fIcommand\fR is one of tha commandz listed below; \fIdomain\fR is the
numeric domain id, or tha domain name, or tha domain \s-1UUID\s0; n' \fI\s-1ARGS\s0\fR
are command specific options.  There is all dem exceptions ta dis rule
in tha cases where tha command up in question acts on all domains, the
entire machine, or directly on tha xen hypervisor. Shiiit, dis aint no joke.  Those exceptions
will be clear fo' each of dem commands.  Note: it is permissible to
give numeric names ta domains, however, bustin so will result up in a
domain dat can only be identified by domain id. Y'all KNOW dat shit, muthafucka! In other lyrics, if a
numeric value is supplied it is ghon be interpreted as a thugged-out domain id, not
as a name.
.PP
Da \fBvirsh\fR program can be used either ta run one \fI\s-1COMMAND\s0\fR by givin the
command n' its arguments on tha shell command line, or a \fI\s-1COMMAND_STRING\s0\fR
which be a single shell argument consistin of multiple \fI\s-1COMMAND\s0\fR actions
and they arguments joined wit whitespace, n' separated by semicolons
between commands.  Within \fI\s-1COMMAND_STRING\s0\fR, virsh understandz the
same single, double, n' backslash escapes as tha shell, although you must
add another layer of shell escapin up in bustin tha single shell argument.
If no command is given up in tha command line, \fBvirsh\fR will then start a minimal
interpreta waitin fo' yo' commands, n' tha \fBquit\fR command will then exit
the program.
.PP
Da \fBvirsh\fR program understandz tha followin \fI\s-1OPTIONS\s0\fR.
.IP "\fB\-h\fR, \fB\-\-help\fR" 4
.IX Item "-h, --help"
Ignore all other arguments, n' behave as if tha \fBhelp\fR command were
given instead.
.IP "\fB\-v\fR, \fB\-\-version[=short]\fR" 4
.IX Item "-v, --version[=short]"
Ignore all other arguments, n' prints tha version of tha libvirt library
virsh is comin from
.IP "\fB\-V\fR, \fB\-\-version=long\fR" 4
.IX Item "-V, --version=long"
Ignore all other arguments, n' prints tha version of tha libvirt library
virsh is comin from n' which options n' driver is compiled in.
.IP "\fB\-c\fR, \fB\-\-connect\fR \fI\s-1URI\s0\fR" 4
.IX Item "-c, --connect URI"
Connect ta tha specified \fI\s-1URI\s0\fR, as if by tha \fBconnect\fR command,
instead of tha default connection.
.IP "\fB\-d\fR, \fB\-\-debug\fR \fI\s-1LEVEL\s0\fR" 4
.IX Item "-d, --debug LEVEL"
Enable debug lyrics at integer \fI\s-1LEVEL\s0\fR n' above.  \fI\s-1LEVEL\s0\fR can
range from 0 ta 4 (default).  See tha documentation of \fB\s-1VIRSH_DEBUG\s0\fR
environment variable below fo' tha description of each \fI\s-1LEVEL\s0\fR.
.IP "\fB\-l\fR, \fB\-\-log\fR \fI\s-1FILE\s0\fR" 4
.IX Item "-l, --log FILE"
Output loggin details ta \fI\s-1FILE\s0\fR.
.IP "\fB\-q\fR, \fB\-\-quiet\fR" 4
.IX Item "-q, --quiet"
Avoid extra shiznital lyrics.
.IP "\fB\-r\fR, \fB\-\-readonly\fR" 4
.IX Item "-r, --readonly"
Make tha initial connection read-only, as if by tha \fI\-\-readonly\fR
option of tha \fBconnect\fR command.
.IP "\fB\-t\fR, \fB\-\-timing\fR" 4
.IX Item "-t, --timing"
Output elapsed time shiznit fo' each command.
.IP "\fB\-e\fR, \fB\-\-escape\fR \fIstring\fR" 4
.IX Item "-e, --escape string"
Set alternatizzle escape sequence fo' \fIconsole\fR command. Y'all KNOW dat shit, muthafucka! By default,
telnetz \fB^]\fR is used. Y'all KNOW dat shit, muthafucka! Allowed charactas when rockin basebizzle cap notation are:
alphabetic character, @, [, ], \e, ^, _.
.SH "NOTES"
.IX Header "NOTES"
Most \fBvirsh\fR operations rely upon tha libvirt library bein able to
connect ta a already hustlin libvirtd service.  This can probably be
done rockin tha command \fBservice libvirtd start\fR.
.PP
Most \fBvirsh\fR commandz require root privileges ta run cuz of the
communications channels used ta rap ta tha hypervisor. Shiiit, dis aint no joke.  Hustlin as
non root will return a error.
.PP
Most \fBvirsh\fR commandz act synchronously, except maybe shutdown,
setvcpus n' setmem. In dem cases tha fact dat tha \fBvirsh\fR
program returned, may not mean tha action is complete n' you
must poll periodically ta detect dat tha hommie completed the
operation.
.PP
\&\fBvirsh\fR strives fo' backward compatibility.  Although tha \fBhelp\fR
command only lists tha preferred usage of a cold-ass lil command, if a older
version of \fBvirsh\fR supported a alternate spellin of a cold-ass lil command or
option (like fuckin \fI\-\-tunnelled\fR instead of \fI\-\-tunneled\fR), then
scripts rockin dat olda spellin will continue ta work.
.PP
Several \fBvirsh\fR commandz take a optionally scaled integer; if no
scale is provided, then tha default is listed up in tha command (for
historical reasons, some commandz default ta bytes, while other
commandz default ta kibibytes).  Da followin case-insensitive
suffixes can be used ta select a specific scale:
  b, byte  byte      1
  \s-1KB      \s0 kilobyte  1,000
  k, KiB   kibibyte  1,024
  \s-1MB      \s0 megabyte  1,000,000
  M, MiB   mebibyte  1,048,576
  \s-1GB      \s0 gigabyte  1,000,000,000
  G, GiB   gibibyte  1,073,741,824
  \s-1TB      \s0 terabyte  1,000,000,000,000
  T, TiB   tebibyte  1,099,511,627,776
  \s-1PB      \s0 petabyte  1,000,000,000,000,000
  P, PiB   pebibyte  1,125,899,906,842,624
  \s-1EB      \s0 exabyte   1,000,000,000,000,000,000
  E, EiB   exbibyte  1,152,921,504,606,846,976
.SH "GENERIC COMMANDS"
.IX Header "GENERIC COMMANDS"
Da followin commandz is generic i.e. not specific ta a thugged-out domain.
.IP "\fBhelp\fR [\fIcommand-or-group\fR]" 4
.IX Item "help [command-or-group]"
This lists each of tha virsh commands.  When used without options, all
commandz is listed, one per line, grouped tha fuck into related categories,
displayin tha keyword fo' each group.
.Sp
To display only commandz fo' a specific group, give tha keyword fo' that
group as a option. I aint talkin' bout chicken n' gravy biatch.  For example:
.Sp
.Vb 1
\& virsh # help host
\&
\&  Host n' Hypervisor (help keyword \*(Aqhost\*(Aq):
\&     capabilitizzles                   capabilities
\&     cpu\-models                     show tha CPU models fo' a architecture
\&     connect                        (re)connect ta hypervisor
\&     freecell                       NUMA free memory
\&     hostname                       print tha hypervisor hostname
\&     qemu\-attach                    Attach ta existin QEMU process
\&     qemu\-monitor\-command           QEMU Monitor Command
\&     qemu\-agent\-command             QEMU Guest Agent Command
\&     sysinfo                        print tha hypervisor sysinfo
\&     uri                            print tha hypervisor canonical URI
.Ve
.Sp
To display detailed shiznit fo' a specific command, give its name as the
option instead. Y'all KNOW dat shit, muthafucka!  For example:
.Sp
.Vb 3
\& virsh # help list
\&   NAME
\&     list \- list domains
\&
\&   SYNOPSIS
\&     list [\-\-inactive] [\-\-all]
\&
\&   DESCRIPTION
\&     Returns list of domains.
\&
\&   OPTIONS
\&     \-\-inactizzle       list inactizzle domains
\&     \-\-all            list inactizzle & actizzle domains
.Ve
.IP "\fBquit\fR, \fBexit\fR" 4
.IX Item "quit, exit"
quit dis interactizzle terminal
.IP "\fBversion\fR" 4
.IX Item "version"
Will print up tha major version info bout what tha fuck dis built from.
.RS 4
.Sp
.RS 4
\&\fBExample\fR
.Sp
\&\fBvirsh\fR version
.Sp
Compiled against library: libvir 0.0.6
.Sp
Usin library: libvir 0.0.6
.Sp
Usin \s-1API:\s0 Xen 3.0.0
.Sp
Hustlin hypervisor: Xen 3.0.0
.RE
.RE
.RS 4
.RE
.IP "\fBcd\fR [\fIdirectory\fR]" 4
.IX Item "cd [directory]"
Will chizzle current directory ta \fIdirectory\fR.  Da default directory
for tha \fBcd\fR command is tha home directory or, if there is no \fI\s-1HOME\s0\fR
variable up in tha environment, tha root directory.
.Sp
This command is only available up in interactizzle mode.
.IP "\fBpwd\fR" 4
.IX Item "pwd"
Will print tha current directory.
.IP "\fBconnect\fR \fI\s-1URI\s0\fR [\fI\-\-readonly\fR]" 4
.IX Item "connect URI [--readonly]"
(Re)\-Connect ta tha hypervisor. Shiiit, dis aint no joke. When tha shell is first started, this
is automatically run wit tha \fI\s-1URI\s0\fR parameta axed by tha \f(CW\*(C`\-c\*(C'\fR
option on tha command line. Da \fI\s-1URI\s0\fR parameta specifies how tha fuck to
connect ta tha hypervisor. Shiiit, dis aint no joke. Da documentation page at
<http://libvirt.org/uri.html> list tha joints supported yo, but da most thugged-out
common are:
.RS 4
.IP "xen:///" 4
.IX Item "xen:///"
this is used ta connect ta tha local Xen hypervisor, dis is tha default
.IP "qemu:///system" 4
.IX Item "qemu:///system"
connect locally as root ta tha daemon supervisin QEmu n' \s-1KVM\s0 domains
.IP "qemu:///session" 4
.IX Item "qemu:///session"
connect locally as a aiiight user ta his own set of QEmu n' \s-1KVM\s0 domains
.IP "lxc:///" 4
.IX Item "lxc:///"
connect ta a local linux container
.RE
.RS 4
.Sp
For remote access peep tha documentation page at
<http://libvirt.org/uri.html> on how tha fuck ta make URIs.
Da \fI\-\-readonly\fR option allows fo' read-only connection
.RE
.IP "\fBuri\fR" 4
.IX Item "uri"
Prints tha hypervisor canonical \s-1URI,\s0 can be useful up in shell mode.
.IP "\fBhostname\fR" 4
.IX Item "hostname"
Print tha hypervisor hostname.
.IP "\fBsysinfo\fR" 4
.IX Item "sysinfo"
Print tha \s-1XML\s0 representation of tha hypervisor sysinfo, if available.
.IP "\fBnodeinfo\fR" 4
.IX Item "nodeinfo"
Returns basic shiznit bout tha node, like number n' type of \s-1CPU,\s0
and size of tha physical memory. Da output correspondz ta virNodeInfo
structure. Right back up in yo muthafuckin ass. Specifically, tha \*(L"\s-1CPU\s0 socket(s)\*(R" field means number of \s-1CPU\s0
sockets per \s-1NUMA\s0 cell.
.IP "\fBnodecpumap\fR" 4
.IX Item "nodecpumap"
Displays tha nodez total number of CPUs, tha number of online CPUs
and tha list of online CPUs.
.IP "\fBnodecpustats\fR [\fIcpu\fR] [\fI\-\-percent\fR]" 4
.IX Item "nodecpustats [cpu] [--percent]"
Returns cpu statz of tha node.
If \fIcpu\fR is specified, dis will prints specified cpu statistics only.
If \fI\-\-percent\fR is specified, dis will prints cementage of each kind of cpu
statistics durin 1 second.
.IP "\fBnodememstats\fR [\fIcell\fR]" 4
.IX Item "nodememstats [cell]"
Returns memory statz of tha node.
If \fIcell\fR is specified, dis will prints specified cell statistics only.
.IP "\fBnodesuspend\fR [\fItarget\fR] [\fIduration\fR]" 4
.IX Item "nodesuspend [target] [duration]"
Puts tha node (host machine) tha fuck into a system-wide chill state such as
Suspend-to-RAM, Suspend-to-Disk or Hybrid-Suspend n' sets up a
Real-Time-Clock interrupt ta fire (to raise up tha node) afta a time delay
specified by tha 'duration' parameter n' shit. Da duration time should be
at least 60 seconds.
.IP "\fBnode-memory-tune\fR [\fIshm-pages-to-scan\fR] [\fIshm-sleep-millisecs\fR]" 4
.IX Item "node-memory-tune [shm-pages-to-scan] [shm-sleep-millisecs]"
Allows you ta display or set tha node memory parameters.
\&\fIshm-pages-to-scan\fR can be used ta set tha number of pages ta scan
before tha shared memory steez goes ta chill; \fIshm-sleep-millisecs\fR
can be used ta set tha number of millisecs tha shared memory steez should
sleep before next scan; \fIshm-merge-across-nodes\fR specifies if pages from
different numa nodes can be merged. Y'all KNOW dat shit, muthafucka! When set ta 0, only pages which physically
reside up in tha memory area of same \s-1NUMA\s0 node can be merged. Y'all KNOW dat shit, muthafucka! When set ta 1,
pages from all nodes can be merged. Y'all KNOW dat shit, muthafucka! Default ta 1.
.IP "\fBcapabilities\fR" 4
.IX Item "capabilities"
Print a \s-1XML\s0 document describin tha capabilitizzlez of tha hypervisor
we is currently connected to. This includes a section on tha host
capabilitizzles up in termz of \s-1CPU\s0 n' features, n' a set of description
for each kind of hommie which can be virtualized. Y'all KNOW dat shit, muthafucka! For a mo' complete
description see:
  <http://libvirt.org/formatcaps.html>
Da \s-1XML\s0 also show tha \s-1NUMA\s0 topologizzle shiznit if available.
.IP "\fBinject-nmi\fR \fIdomain\fR" 4
.IX Item "inject-nmi domain"
Inject \s-1NMI\s0 ta tha guest.
.IP "\fBlist\fR [\fI\-\-inactive\fR | \fI\-\-all\fR] [\fI\-\-managed\-save\fR] [\fI\-\-title\fR] { [\fI\-\-table\fR] | \fI\-\-name\fR | \fI\-\-uuid\fR } [\fI\-\-persistent\fR] [\fI\-\-transient\fR] [\fI\-\-with\-managed\-save\fR] [\fI\-\-without\-managed\-save\fR] [\fI\-\-autostart\fR] [\fI\-\-no\-autostart\fR] [\fI\-\-with\-snapshot\fR] [\fI\-\-without\-snapshot\fR] [\fI\-\-state\-running\fR] [\fI\-\-state\-paused\fR] [\fI\-\-state\-shutoff\fR] [\fI\-\-state\-other\fR]" 4
.IX Item "list [--inactizzle | --all] [--managed-save] [--title] { [--table] | --name | --uuid } [--persistent] [--transient] [--with-managed-save] [--without-managed-save] [--autostart] [--no-autostart] [--with-snapshot] [--without-snapshot] [--state-running] [--state-paused] [--state-shutoff] [--state-other]"
Prints shiznit bout existin domains.  If no options are
specified it prints up shiznit bout hustlin domains.
.Sp
An example format fo' tha list be as bigs up:
.Sp
\&\fBvirsh\fR list
  Id    Name                           State
 \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
  0     Domain\-0                       hustlin
  2     fedora                         paused
.Sp
Name is tha name of tha domain. I aint talkin' bout chicken n' gravy biatch.  \s-1ID\s0 tha domain numeric id.
State is tha run state (see below).
.Sp
\&\fB\s-1STATES\s0\fR
.Sp
Da State field lists 8 states fo' a thugged-out domain, n' which ones the
current domain is in.
.RS 4
.IP "\fBcpu-models\fR \fIarch\fR" 4
.IX Item "cpu-models arch"
Print tha list of \s-1CPU\s0 models known fo' tha specified architecture.
.IP "\fBrunning\fR" 4
.IX Item "running"
Da domain is currently hustlin on a \s-1CPU\s0
.IP "\fBidle\fR" 4
.IX Item "idle"
Da domain is idle, n' not hustlin or runnable.  This can be caused
because tha domain is waitin on \s-1IO \s0(a traditionizzle wait state) or has
gone ta chill cuz there was not a god damn thang else fo' it ta do.
.IP "\fBpaused\fR" 4
.IX Item "paused"
Da domain has been paused, probably occurrin all up in tha administrator
runnin \fBvirsh suspend\fR.  When up in a paused state tha domain will still
consume allocated resources like memory yo, but aint gonna be eligible for
schedulin by tha hypervisor.
.IP "\fBshutdown\fR" 4
.IX Item "shutdown"
Da domain is up in tha process of shuttin down, i.e. tha hommie operatin system
has been notified n' should be up in tha process of stoppin its operations
gracefully.
.IP "\fBshut off\fR" 4
.IX Item "shut off"
Da domain aint hustlin.  Usually dis indicates tha domain has been
shut down straight-up, or has not been started.
.IP "\fBcrashed\fR" 4
.IX Item "crashed"
Da domain has crashed, which be always a violent ending.  Usually
this state can only occur if tha domain has been configured not to
restart on crash.
.IP "\fBdying\fR" 4
.IX Item "dying"
Da domain is up in process of dyin yo, but aint straight-up shutdown or
crashed.
.IP "\fBpmsuspended\fR" 4
.IX Item "pmsuspended"
Da domain has been suspended by hommie juice pimpment, e.g. entered
into s3 state.
.RE
.RS 4
.Sp
Normally only actizzle domains is listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. To list inactizzle domains specify
\&\fI\-\-inactive\fR or \fI\-\-all\fR ta list both actizzle n' inactizzle domains.
.Sp
To further filta tha list of domains you may specify one or mo' of filtering
flags supported by tha \fBlist\fR command. Y'all KNOW dat shit, muthafucka! These flags is grouped by function.
Specifyin one or mo' flags from a crew enablez tha filta group. Note that
some combinationz of flags may yield no thangs up in dis biatch. Right back up in yo muthafuckin ass. Supported filterin flags and
groups:
.IP "\fBPersistence\fR" 4
.IX Item "Persistence"
Flag \fI\-\-persistent\fR is used ta include persistent domains up in tha returned
list. To include transient domains specify \fI\-\-transient\fR.
.IP "\fBExistence of managed save image\fR" 4
.IX Item "Existence of managed save image"
To list domains havin a managed save image specify flag
\&\fI\-\-with\-managed\-save\fR. For domains dat aint gots a managed save image
specify \fI\-\-without\-managed\-save\fR.
.IP "\fBDomain state\fR" 4
.IX Item "Domain state"
Da followin filta flags select a thugged-out domain by its state:
\&\fI\-\-state\-running\fR fo' hustlin domains, \fI\-\-state\-paused\fR  fo' paused domains,
\&\fI\-\-state\-shutoff\fR fo' turned off domains n' \fI\-\-state\-other\fR fo' all
other states as a gangbangin' fallback.
.IP "\fBAutostartin domains\fR" 4
.IX Item "Autostartin domains"
To list autostartin domains use tha flag \fI\-\-autostart\fR. To list domains with
this feature disabled use \fI\-\-no\-autostart\fR.
.IP "\fBSnapshot existence\fR" 4
.IX Item "Snapshot existence"
Domains dat have snapshot images can be listed rockin flag \fI\-\-with\-snapshot\fR,
domains without a snapshot \fI\-\-without\-snapshot\fR.
.RE
.RS 4
.Sp
When rappin' ta olda servers, dis command is forced ta bust a seriez of \s-1API\s0
calls wit a inherent race, where a thugged-out domain might not be listed or might appear
more than once if it chizzled state between calls while tha list was being
collected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Newer servers aint gots dis problem.
.Sp
If \fI\-\-managed\-save\fR is specified, then domains dat have managed save state
(only possible if they is up in tha \fBshut off\fR state, so you need ta specify
\&\fI\-\-inactive\fR or \fI\-\-all\fR ta straight-up list them) will instead show as \fBsaved\fR
in tha listing. This flag is usable only wit tha default \fI\-\-table\fR output.
Note dat dis flag do not filta tha list of domains.
.Sp
If \fI\-\-name\fR is specified, domain names is printed instead of tha table
formatted one per line. If \fI\-\-uuid\fR is specified domainz \s-1UUID\s0z is printed
instead of names. Flag \fI\-\-table\fR specifies dat tha legacy table-formatted
output should be used. Y'all KNOW dat shit, muthafucka! This is tha default fo' realz. All of these is mutually
exclusive.
.Sp
If \fI\-\-title\fR is specified, then tha short domain description (title) is
printed up in a extra column. I aint talkin' bout chicken n' gravy biatch. This flag is usable only wit tha default
\&\fI\-\-table\fR output.
.Sp
Example:
.Sp
\&\fBvirsh\fR list \-\-title
  Id    Name                           State      Title
 \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
  0     Domain\-0                       hustlin    Mailserver 1
  2     fedora                         paused
.RE
.IP "\fBfreecell\fR [{ [\fI\-\-cellno\fR] \fBcellno\fR | \fI\-\-all\fR }]" 4
.IX Item "freecell [{ [--cellno] cellno | --all }]"
Prints tha available amount of memory on tha machine or within a \s-1NUMA\s0
cell.  Da freecell command can provide one of three different
displayz of available memory on tha machine dependin on tha options
specified. Y'all KNOW dat shit, muthafucka!  With no options, it displays tha total free memory on the
machine.  With tha \-\-all option, it displays tha free memory up in each
cell n' tha total free memory on tha machine.  Finally, wit a
numeric argument or wit \-\-cellno plus a cold-ass lil cell number it will display
the free memory fo' tha specified cell only.
.IP "\fBcpu-baseline\fR \fI\s-1FILE\s0\fR [\fI\-\-features\fR]" 4
.IX Item "cpu-baseline FILE [--features]"
Compute baseline \s-1CPU\s0 which is ghon be supported by all host CPUs given up in <file>.
Da list of host CPUs is built by extractin all <cpu> elements from the
<file>. Thus, tha <file> can contain either a set of <cpu> elements separated
by freshly smoked up lines or even a set of complete <capabilities> elements printed by
\&\fBcapabilities\fR command. Y'all KNOW dat shit, muthafucka!  If \fI\-\-features\fR is specified then the
resultin \s-1XML\s0 description will explicitly include all features dat make
up tha \s-1CPU,\s0 without dis option features dat is part of tha \s-1CPU\s0 model
will not be listed up in tha \s-1XML\s0 description.
.IP "\fBcpu-compare\fR \fI\s-1FILE\s0\fR" 4
.IX Item "cpu-compare FILE"
Compare \s-1CPU\s0 definizzle from \s-1XML\s0 <file> wit host \s-1CPU.\s0 Da \s-1XML\s0 <file> may
contain either host or hommie \s-1CPU\s0 definition. I aint talkin' bout chicken n' gravy biatch. Da host \s-1CPU\s0 definizzle is the
<cpu> element n' its contents as printed by \fBcapabilities\fR command. Y'all KNOW dat shit, muthafucka! The
guest \s-1CPU\s0 definizzle is tha <cpu> element n' its contents from domain \s-1XML\s0
definition. I aint talkin' bout chicken n' gravy biatch. For mo' shiznit on hommie \s-1CPU\s0 definizzle see:
<http://libvirt.org/formatdomain.html#elementsCPU>
.IP "\fBecho\fR [\fI\-\-shell\fR] [\fI\-\-xml\fR] [\fIarg\fR...]" 4
.IX Item "echo [--shell] [--xml] [arg...]"
Echo back each \fIarg\fR, separated by space.  If \fI\-\-shell\fR is
specified, then tha output is ghon be single-quoted where needed, so that
it is suitable fo' reuse up in a gangbangin' finger-lickin' dirty-ass shell context.  If \fI\-\-xml\fR is
specified, then tha output is ghon be escaped fo' use up in \s-1XML.\s0
.SH "DOMAIN COMMANDS"
.IX Header "DOMAIN COMMANDS"
Da followin commandz manipulate domains directly, as stated
previously most commandz take domain as tha straight-up original gangsta parameter n' shit. The
\&\fIdomain\fR can be specified as a gangbangin' finger-lickin' dirty-ass short integer, a name or a gangbangin' full \s-1UUID.\s0
.IP "\fBautostart\fR [\fI\-\-disable\fR] \fIdomain\fR" 4
.IX Item "autostart [--disable] domain"
Configure a thugged-out domain ta be automatically started at boot.
.Sp
Da option \fI\-\-disable\fR disablez autostarting.
.IP "\fBconsole\fR \fIdomain\fR [\fIdevname\fR] [\fI\-\-safe\fR] [\fI\-\-force\fR]" 4
.IX Item "console domain [devname] [--safe] [--force]"
Connect tha virtual serial console fo' tha guest. Da optional
\&\fIdevname\fR parameta refers ta tha thang aliaz of a alternate
console, serial or parallel thang configured fo' tha guest.
If omitted, tha primary console is ghon be opened.
.Sp
If tha flag \fI\-\-safe\fR is specified, tha connection is only attempted
if tha driver supports safe console handling. This flag specifies that
the server has ta ensure exclusive access ta console devices. Optionally
the \fI\-\-force\fR flag may be specified, requestin ta disconnect any existing
sessions, like fuckin up in a cold-ass lil case of a gangbangin' fucked up connection.
.IP "\fBcreate\fR \fI\s-1FILE\s0\fR [\fI\-\-console\fR] [\fI\-\-paused\fR] [\fI\-\-autodestroy\fR] [\fI\-\-pass\-fdz N,M,...\fR]" 4
.IX Item "create FILE [--console] [--paused] [--autodestroy] [--pass-fdz N,M,...]"
Smoke a thugged-out domain from a \s-1XML\s0 <file> fo' realz. An easy as fuck  way ta create tha \s-1XML\s0
<file> is ta use tha \fBdumpxml\fR command ta obtain tha definizzle of a
pre-existin guest.  Da domain is ghon be paused if tha \fI\-\-paused\fR option
is used n' supported by tha driver; otherwise it is ghon be hustlin.
If \fI\-\-console\fR is requested, attach ta tha console afta creation.
If \fI\-\-autodestroy\fR is requested, then tha hommie is ghon be automatically
destroyed when virsh closes its connection ta libvirt, or otherwise
exits.
.Sp
If \fI\-\-pass\-fds\fR is specified, tha argument be a cold-ass lil comma separated list
of open file descriptors which should be pass on tha fuck into tha guest. The
file descriptors is ghon be re-numered up in tha guest, startin from 3. This
is only supported wit container based virtualization.
.Sp
\&\fBExample\fR
.Sp
.Vb 3
\& virsh dumpxml <domain> > domain.xml
\& vi domain.xml (or make chizzlez wit yo' other text editor)
\& virsh create domain.xml
.Ve
.IP "\fBdefine\fR \fI\s-1FILE\s0\fR" 4
.IX Item "define FILE"
Define a thugged-out domain from a \s-1XML\s0 <file>. Da domain definizzle is registered
but not started. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If domain be already hustlin, tha chizzlez will take
effect on tha next boot.
.IP "\fBdesc\fR \fIdomain\fR [[\fI\-\-live\fR] [\fI\-\-config\fR] | [\fI\-\-current\fR]] [\fI\-\-title\fR] [\fI\-\-edit\fR] [\fI\-\-new\-desc\fR New description or title message]" 4
.IX Item "desc domain [[--live] [--config] | [--current]] [--title] [--edit] [--new-desc New description or title message]"
Show or modify description n' title of a thugged-out domain. I aint talkin' bout chicken n' gravy biatch. These joints is user
fieldz dat allow ta store arbitrary textual data ta allow easy as fuck 
identification of domains. Title should be short, although it aint enforced.
.Sp
Flags \fI\-\-live\fR or \fI\-\-config\fR select whether dis command works on live
or persistent definitionz of tha domain. I aint talkin' bout chicken n' gravy biatch. If both \fI\-\-live\fR n' \fI\-\-config\fR
are specified, tha \fI\-\-config\fR option takes precedence on gettin tha current
description n' both live configuration n' config is updated while setting
the description. I aint talkin' bout chicken n' gravy biatch. \fI\-\-current\fR is exclusive n' implied if none of these was
specified.
.Sp
Flag \fI\-\-edit\fR specifies dat a editor wit tha contentz of current
description or title should be opened n' tha contents saved back afterwards.
.Sp
Flag \fI\-\-title\fR selects operation on tha title field instead of description.
.Sp
If neither of \fI\-\-edit\fR n' \fI\-\-new\-desc\fR is specified tha note or description
is displayed instead of bein modified.
.IP "\fBdestroy\fR \fIdomain\fR [\fI\-\-graceful\fR]" 4
.IX Item "destroy domain [--graceful]"
Immediately terminizzle tha domain \fIdomain\fR.  This don't give tha domain
\&\s-1OS\s0 any chizzle ta react, n' itz tha equivalent of rippin tha power
cord up on a physical machine.  In most cases yo big-ass booty is ghon wanna use
the \fBshutdown\fR command instead. Y'all KNOW dat shit, muthafucka!  But fuck dat shiznit yo, tha word on tha street is dat dis do not delete any
storage volumes used by tha guest, n' if tha domain is persistent, it
can be restarted later.
.Sp
If \fIdomain\fR is transient, then tha metadata of any snapshots will
be lost once tha hommie stops hustlin yo, but tha snapshot contents still
exist, n' a freshly smoked up domain wit tha same name n' \s-1UUID\s0 can restore the
snapshot metadata wit \fBsnapshot-create\fR.
.Sp
If \fI\-\-graceful\fR is specified, don't resort ta off tha hook measures
(e.g. \s-1SIGKILL\s0) when tha hommie don't stop afta a reasonable timeout;
return a error instead.
.IP "\fBdomblkstat\fR \fIdomain\fR \fIblock-device\fR [\fI\-\-human\fR]" 4
.IX Item "domblkstat domain block-device [--human]"
Git thang block stats fo' a hustlin domain. I aint talkin' bout chicken n' gravy biatch.  A \fIblock-device\fR corresponds
to a unique target name (<target dev='name'/>) or source file (<source
file='name'/>) fo' one of tha disk devices attached ta \fIdomain\fR (see
also \fBdomblklist\fR fo' listin these names).
.Sp
Use \fI\-\-human\fR fo' a mo' human readable output.
.Sp
Availabilitizzle of these fieldz dependz on hypervisor. Shiiit, dis aint no joke. Unsupported fieldz are
missin from tha output. Other fieldz may step tha fuck up if communicatin wit a newer
version of libvirtd.
.Sp
\&\fBExplanation of fields\fR (fieldz step tha fuck up in tha followin order):
  rd_req            \- count of read operations
  rd_bytes          \- count of read bytes
  wr_req            \- count of write operations
  wr_bytes          \- count of freestyled bytes
  errs              \- error count
  flush_operations  \- count of flush operations
  rd_total_times    \- total time read operations took (ns)
  wr_total_times    \- total time write operations took (ns)
  flush_total_times \- total time flush operations took (ns)
    <\-\- other fieldz provided by hypervisor \-\->
.IP "\fBdomifstat\fR \fIdomain\fR \fIinterface-device\fR" 4
.IX Item "domifstat domain intercourse-device"
Git network intercourse stats fo' a hustlin domain.
.IP "\fBdomif-setlink\fR \fIdomain\fR \fIinterface-device\fR \fIstate\fR [\fI\-\-config\fR]" 4
.IX Item "domif-setlink domain intercourse-device state [--config]"
Modify link state of tha domainz virtual intercourse. Possible joints for
state is \*(L"up\*(R" n' "down. I aint talkin' bout chicken n' gravy biatch. If \fI\-\-config\fR is specified, only tha persistent
configuration of tha domain is modified, fo' compatibilitizzle purposes,
\&\fI\-\-persistent\fR be aliaz of \fI\-\-config\fR.
\&\fIinterface-device\fR can be tha intercoursez target name or tha \s-1MAC\s0 address.
.IP "\fBdomif-getlink\fR \fIdomain\fR \fIinterface-device\fR [\fI\-\-config\fR]" 4
.IX Item "domif-getlink domain intercourse-device [--config]"
Query link state of tha domainz virtual intercourse. If \fI\-\-config\fR
is specified, query tha persistent configuration, fo' compatibility
purposes, \fI\-\-persistent\fR be aliaz of \fI\-\-config\fR.
.Sp
\&\fIinterface-device\fR can be tha intercoursez target name or tha \s-1MAC\s0 address.
.IP "\fBdomiftune\fR \fIdomain\fR \fIinterface-device\fR [[\fI\-\-config\fR] [\fI\-\-live\fR] | [\fI\-\-current\fR]] [\fI\-\-inbound average,peak,burst\fR] [\fI\-\-outbound average,peak,burst\fR]" 4
.IX Item "domiftune domain intercourse-device [[--config] [--live] | [--current]] [--inbound average,peak,burst] [--outbound average,peak,burst]"
Set or query tha domainz network intercoursez bandwidth parameters.
\&\fIinterface-device\fR can be tha intercoursez target name (<target dev='name'/>),
or tha \s-1MAC\s0 address.
.Sp
If no \fI\-\-inbound\fR or \fI\-\-outbound\fR is specified, dis command will
query n' show tha bandwidth settings. Otherwise, it will set the
inbound or outbound bandwidth. \fIaverage,peak,burst\fR is tha same ol' dirty as
in command \fIattach-interface\fR.
.Sp
If \fI\-\-live\fR is specified, affect a hustlin guest.
If \fI\-\-config\fR is specified, affect tha next boot of a persistent guest.
If \fI\-\-current\fR is specified, affect tha current hommie state.
Both \fI\-\-live\fR n' \fI\-\-current\fR flags may be given yo, but \fI\-\-current\fR is
exclusive. If no flag is specified, behavior is different depending
on hypervisor.
.IP "\fBdommemstat\fR \fIdomain\fR [\fI\-\-period\fR \fBseconds\fR] [[\fI\-\-config\fR] [\fI\-\-live\fR] | [\fI\-\-current\fR]]" 4
.IX Item "dommemstat domain [--period seconds] [[--config] [--live] | [--current]]"
Git memory stats fo' a hustlin domain.
.Sp
Dependin on tha hypervisor a variety of statistics can be returned
.Sp
For \s-1QEMU/KVM\s0 wit a memory balloon, settin tha optionizzle \fI\-\-period\fR ta a
value larger than 0 up in secondz will allow tha balloon driver ta return
additionizzle statistics which is ghon be displayed by subsequent \fBdommemstat\fR
commands. Right back up in yo muthafuckin ass. Settin tha \fI\-\-period\fR ta 0 will stop tha balloon driver collection,
but do not clear tha statistics up in tha balloon driver n' shit. Requires at least
\&\s-1QEMU/KVM 1.5\s0 ta be hustlin on tha host.
.Sp
Da \fI\-\-live\fR, \fI\-\-config\fR, n' \fI\-\-current\fR flags is only valid when using
the \fI\-\-period\fR option up in order ta set tha collection period fo' tha balloon
driver n' shit. If \fI\-\-live\fR is specified, only tha hustlin hommie collection period
is affected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If \fI\-\-config\fR is specified, affect tha next boot of a persistent
guest. If \fI\-\-current\fR is specified, affect tha current hommie state.
.Sp
Both \fI\-\-live\fR n' \fI\-\-config\fR flags may be given yo, but \fI\-\-current\fR is
exclusive. If no flag is specified, behavior is different depending
on tha hommie state.
.IP "\fBdomblkerror\fR \fIdomain\fR" 4
.IX Item "domblkerror domain"
Show errors on block devices.  This command probably comes handy when
\&\fBdomstate\fR command say dat a thugged-out domain was paused cuz of I/O error.
Da \fBdomblkerror\fR command lists all block devices up in error state and
the error peeped on each of em.
.IP "\fBdomblkinfo\fR \fIdomain\fR \fIblock-device\fR" 4
.IX Item "domblkinfo domain block-device"
Git block thang size info fo' a thugged-out domain. I aint talkin' bout chicken n' gravy biatch.  A \fIblock-device\fR corresponds
to a unique target name (<target dev='name'/>) or source file (<source
file='name'/>) fo' one of tha disk devices attached ta \fIdomain\fR (see
also \fBdomblklist\fR fo' listin these names).
.IP "\fBdomblklist\fR \fIdomain\fR [\fI\-\-inactive\fR] [\fI\-\-details\fR]" 4
.IX Item "domblklist domain [--inactive] [--details]"
Print a table showin tha brief shiznit of all block devices
associated wit \fIdomain\fR. If \fI\-\-inactive\fR is specified, query the
block devices dat is ghon be used on tha next boot, rather than them
currently up in use by a hustlin domain. I aint talkin' bout chicken n' gravy biatch. If \fI\-\-details\fR is specified,
disk type n' thang value will also be printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Other contexts
that require a funky-ass block thang name (like fuckin \fIdomblkinfo\fR or
\&\fIsnapshot-create\fR fo' disk snapshots) will accept either target
or unique source names printed by dis command.
.IP "\fBdomiflist\fR \fIdomain\fR [\fI\-\-inactive\fR]" 4
.IX Item "domiflist domain [--inactive]"
Print a table showin tha brief shiznit of all virtual intercourses
associated wit \fIdomain\fR. If \fI\-\-inactive\fR is specified, query the
virtual intercourses dat is ghon be used on tha next boot, rather than them
currently up in use by a hustlin domain. I aint talkin' bout chicken n' gravy biatch. Other contexts dat require a \s-1MAC\s0
address of virtual intercourse (like fuckin \fIdetach-interface\fR or
\&\fIdomif-setlink\fR) will accept tha \s-1MAC\s0 address printed by dis command.
.IP "\fBblockcommit\fR \fIdomain\fR \fIpath\fR [\fIbandwidth\fR] {[\fIbase\fR] | [\fI\-\-shallow\fR]} [\fItop\fR] [\fI\-\-delete\fR] [\fI\-\-wait\fR [\fI\-\-verbose\fR] [\fI\-\-timeout\fR \fBseconds\fR] [\fI\-\-async\fR]]" 4
.IX Item "blockcommit domain path [bandwidth] {[base] | [--shallow]} [top] [--delete] [--wait [--verbose] [--timeout seconds] [--async]]"
Reduce tha length of a funky-ass backin image chain, by committin chizzlez at the
top of tha chain (snapshot or delta files) tha fuck into backin images.  By
default, dis command attempts ta flatten tha entire chain. I aint talkin' bout chicken n' gravy biatch.  If \fIbase\fR
and/or \fItop\fR is specified as filez within tha backin chain, then the
operation is constrained ta committin just dat portion of tha chain;
\&\fI\-\-shallow\fR can be used instead of \fIbase\fR ta specify tha immediate
backin file of tha resultin top image ta be committed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da files
bein committed is rendered invalid, possibly as soon as tha operation
starts; rockin tha \fI\-\-delete\fR flag will remove these filez all up in tha successful
completion of tha commit operation.
.Sp
By default, dis command returns quicker than a muthafucka, n' data for
the entire disk is committed up in tha background; tha progress of the
operation can be checked wit \fBblockjob\fR.  But fuck dat shiznit yo, tha word on tha street is dat if \fI\-\-wait\fR is
specified, then dis command will block until tha operation completes,
or quit tha operation if tha optionizzle \fItimeout\fR up in secondz elapses
or \s-1SIGINT\s0 is busted (usually wit \f(CW\*(C`Ctrl\-C\*(C'\fR).  Usin \fI\-\-verbose\fR along
with \fI\-\-wait\fR will produce periodic status thugged-out shit.  If thang cancellation
is triggered, \fI\-\-async\fR will return control ta tha user as fast as
possible, otherwise tha command may continue ta block a lil while
longer until tha thang is done cleanin up.
.Sp
\&\fIpath\fR specifies fully-qualified path of tha disk; it corresponds
to a unique target name (<target dev='name'/>) or source file (<source
file='name'/>) fo' one of tha disk devices attached ta \fIdomain\fR (see
also \fBdomblklist\fR fo' listin these names).
\&\fIbandwidth\fR specifies copyin bandwidth limit up in MiB/s, although for
qemu, it may be non-zero only fo' a online domain.
.IP "\fBblockcopy\fR \fIdomain\fR \fIpath\fR \fIdest\fR [\fIbandwidth\fR] [\fI\-\-shallow\fR] [\fI\-\-reuse\-external\fR] [\fI\-\-raw\fR] [\fI\-\-wait\fR [\fI\-\-verbose\fR] [{\fI\-\-pivot\fR | \fI\-\-finish\fR}] [\fI\-\-timeout\fR \fBseconds\fR] [\fI\-\-async\fR]]" 4
.IX Item "blockcopy domain path dest [bandwidth] [--shallow] [--reuse-external] [--raw] [--wait [--verbose] [{--pivot | --finish}] [--timeout seconds] [--async]]"
Copy a gangbangin' finger-lickin' disk backin image chain ta \fIdest\fR. By default, dis command
flattens tha entire chain; but if \fI\-\-shallow\fR is specified, tha copy
shares tha backin chain.
.Sp
If \fI\-\-reuse\-external\fR is specified, then \fIdest\fR must exist n' have
contents identical ta tha resultin backin file (that is, it must
start wit contents matchin tha backin file \fIdisk\fR if \fI\-\-shallow\fR
is used, otherwise it must start empty); dis option is typically used
to set up a relatizzle backin file name up in tha destination.
.Sp
Da format of tha destination is determined by tha straight-up original gangsta match up in the
followin list: if \fI\-\-raw\fR is specified, it is ghon be raw; if
\&\fI\-\-reuse\-external\fR is specified, tha existin destination is probed
for a gangbangin' format; n' up in all other cases, tha destination format will
match tha source format.
.Sp
By default, tha copy thang runs up in tha background, n' consistz of two
phases.  Initially, tha thang must copy all data from tha source, and
durin dis phase, tha thang can only be canceled ta revert back ta the
source disk, wit no guarantees bout tha destination. I aint talkin' bout chicken n' gravy biatch.  Afta dis phase
completes, both tha source n' tha destination remain mirrored until a
call ta \fBblockjob\fR wit tha \fI\-\-abort\fR n' \fI\-\-pivot\fR flags pivots over
to tha copy, or a cold-ass lil call without \fI\-\-pivot\fR leaves tha destination as a
faithful copy of dat point up in time.  But fuck dat shiznit yo, tha word on tha street is dat if \fI\-\-wait\fR is specified,
then dis command will block until tha mirrorin phase begins, or cancel
the operation if tha optionizzle \fItimeout\fR up in secondz elapses or \s-1SIGINT\s0 is
sent (usually wit \f(CW\*(C`Ctrl\-C\*(C'\fR).  Usin \fI\-\-verbose\fR along wit \fI\-\-wait\fR
will produce periodic status thugged-out shit.  Usin \fI\-\-pivot\fR or \fI\-\-finish\fR
along wit \fI\-\-wait\fR will additionally end tha thang cleanly rather than
leavin thangs up in tha mirrorin phase.  If thang cancellation is triggered,
\&\fI\-\-async\fR will return control ta tha user as fast as possible, otherwise
the command may continue ta block a lil while longer until tha thang
is done cleanin up.
.Sp
\&\fIpath\fR specifies fully-qualified path of tha disk.
\&\fIbandwidth\fR specifies copyin bandwidth limit up in MiB/s.
.IP "\fBblockpull\fR \fIdomain\fR \fIpath\fR [\fIbandwidth\fR] [\fIbase\fR] [\fI\-\-wait\fR [\fI\-\-verbose\fR] [\fI\-\-timeout\fR \fBseconds\fR] [\fI\-\-async\fR]]" 4
.IX Item "blockpull domain path [bandwidth] [base] [--wait [--verbose] [--timeout seconds] [--async]]"
Populate a gangbangin' finger-lickin' disk from its backin image chain. I aint talkin' bout chicken n' gravy biatch. By default, dis command
flattens tha entire chain; but if \fIbase\fR is specified, containin the
name of one of tha backin filez up in tha chain, then dat file becomes
the freshly smoked up backin file n' only tha intermediate portion of tha chain is
pulled. Y'all KNOW dat shit, muthafucka!  Once all axed data from tha backin image chain has been
pulled, tha disk no longer dependz on dat portion of tha backin chain.
.Sp
By default, dis command returns quicker than a muthafucka, n' data for
the entire disk is pulled up in tha background; tha progress of the
operation can be checked wit \fBblockjob\fR.  But fuck dat shiznit yo, tha word on tha street is dat if \fI\-\-wait\fR is
specified, then dis command will block until tha operation completes,
or quit tha operation if tha optionizzle \fItimeout\fR up in secondz elapses
or \s-1SIGINT\s0 is busted (usually wit \f(CW\*(C`Ctrl\-C\*(C'\fR).  Usin \fI\-\-verbose\fR along
with \fI\-\-wait\fR will produce periodic status thugged-out shit.  If thang cancellation
is triggered, \fI\-\-async\fR will return control ta tha user as fast as
possible, otherwise tha command may continue ta block a lil while
longer until tha thang is done cleanin up.
.Sp
\&\fIpath\fR specifies fully-qualified path of tha disk; it corresponds
to a unique target name (<target dev='name'/>) or source file (<source
file='name'/>) fo' one of tha disk devices attached ta \fIdomain\fR (see
also \fBdomblklist\fR fo' listin these names).
\&\fIbandwidth\fR specifies copyin bandwidth limit up in MiB/s.
.IP "\fBblkdeviotune\fR \fIdomain\fR \fIdevice\fR [[\fI\-\-config\fR] [\fI\-\-live\fR] | [\fI\-\-current\fR]] [[\fItotal-bytes-sec\fR] | [\fIread-bytes-sec\fR] [\fIwrite-bytes-sec\fR]] [[\fItotal-iops-sec\fR] | [\fIread-iops-sec\fR] [\fIwrite-iops-sec\fR]]" 4
.IX Item "blkdeviotune domain thang [[--config] [--live] | [--current]] [[total-bytes-sec] | [read-bytes-sec] [write-bytes-sec]] [[total-iops-sec] | [read-iops-sec] [write-iops-sec]]"
Set or query tha block disk io parametas fo' a funky-ass block thang of \fIdomain\fR.
\&\fIdevice\fR specifies a unique target name (<target dev='name'/>) or source
file (<source file='name'/>) fo' one of tha disk devices attached to
\&\fIdomain\fR (see also \fBdomblklist\fR fo' listin these names).
.Sp
If no limit is specified, it will query current I/O limits setting.
Otherwise, alta tha limits wit these flags:
\&\fI\-\-total\-bytes\-sec\fR specifies total throughput limit up in bytes per second.
\&\fI\-\-read\-bytes\-sec\fR specifies read throughput limit up in bytes per second.
\&\fI\-\-write\-bytes\-sec\fR specifies write throughput limit up in bytes per second.
\&\fI\-\-total\-iops\-sec\fR specifies total I/O operations limit per second.
\&\fI\-\-read\-iops\-sec\fR specifies read I/O operations limit per second.
\&\fI\-\-write\-iops\-sec\fR specifies write I/O operations limit per second.
.Sp
Older versionz of virsh only accepted these options wit underscore
instead of dash, as up in \fI\-\-total_bytes_sec\fR.
.Sp
Bytes n' iops joints is independent yo, but settin only one value (such
as \-\-read\-bytes\-sec) resets tha other two up in dat category ta unlimited.
An explicit 0 also clears any limit.  A non-zero value fo' a given total
cannot be mixed wit non-zero joints fo' read or write.
.Sp
If \fI\-\-live\fR is specified, affect a hustlin guest.
If \fI\-\-config\fR is specified, affect tha next boot of a persistent guest.
If \fI\-\-current\fR is specified, affect tha current hommie state.
Both \fI\-\-live\fR n' \fI\-\-current\fR flags may be given yo, but \fI\-\-current\fR is
exclusive. If no flag is specified, behavior is different depending
on hypervisor.
.IP "\fBblockjob\fR \fIdomain\fR \fIpath\fR { [\fI\-\-abort\fR] [\fI\-\-async\fR] [\fI\-\-pivot\fR] | [\fI\-\-info\fR] | [\fIbandwidth\fR] }" 4
.IX Item "blockjob domain path { [--abort] [--async] [--pivot] | [--info] | [bandwidth] }"
Manage actizzle block operations.  There is three modes: \fI\-\-info\fR,
\&\fIbandwidth\fR, n' \fI\-\-abort\fR; \fI\-\-info\fR is default except dat \fI\-\-async\fR
or \fI\-\-pivot\fR implies \fI\-\-abort\fR.
.Sp
\&\fIpath\fR specifies fully-qualified path of tha disk; it corresponds
to a unique target name (<target dev='name'/>) or source file (<source
file='name'/>) fo' one of tha disk devices attached ta \fIdomain\fR (see
also \fBdomblklist\fR fo' listin these names).
.Sp
If \fI\-\-abort\fR is specified, tha actizzle thang on tha specified disk will
be aborted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If \fI\-\-async\fR be also specified, dis command will return
immediately, rather than waitin fo' tha cancelation ta complete.  If
\&\fI\-\-pivot\fR is specified, dis requests dat a actizzle copy thang
be pivoted over ta tha freshly smoked up copy.
If \fI\-\-info\fR is specified, tha actizzle thang shiznit on tha specified
disk is ghon be printed.
\&\fIbandwidth\fR can be used ta set bandwidth limit fo' tha actizzle thang.
.IP "\fBblockresize\fR \fIdomain\fR \fIpath\fR \fIsize\fR" 4
.IX Item "blockresize domain path size"
Resize a funky-ass block thang of domain while tha domain is hustlin, \fIpath\fR
specifies tha absolute path of tha block device; it corresponds
to a unique target name (<target dev='name'/>) or source file (<source
file='name'/>) fo' one of tha disk devices attached ta \fIdomain\fR (see
also \fBdomblklist\fR fo' listin these names).
.Sp
\&\fIsize\fR be a scaled integer (see \fB\s-1NOTES\s0\fR above) which defaults ta KiB
(blockz of 1024 bytes) if there is no suffix.  Yo ass must bust a suffix of
\&\*(L"B\*(R" ta git bytes (note dat fo' oldschool reasons, dis differs from
\&\fBvol-resize\fR which defaults ta bytes without a suffix).
.IP "\fBdomdisplay\fR \fIdomain\fR [\fI\-\-include\-password\fR]" 4
.IX Item "domdisplay domain [--include-password]"
Output a \s-1URI\s0 which can be used ta connect ta tha graphical display of the
domain via \s-1VNC, SPICE\s0 or \s-1RDP.\s0 If \fI\-\-include\-password\fR is specified, the
\&\s-1SPICE\s0 channel password is ghon be included up in tha \s-1URI.\s0
.IP "\fBdomfstrim\fR \fIdomain\fR [\fI\-\-minimum\fR \fBbytes\fR] [\fI\-\-mountpoint mountPoint\fR]" 4
.IX Item "domfstrim domain [--minimum bytes] [--mountpoint mountPoint]"
Issue a gangbangin' fstrim command on all mounted filesystems within a hustlin
domain. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it discardz blocks which is not up in use by tha filesystem.
If \fI\-\-minimum\fR \fBbytes\fR is specified, it  drops some lyrics ta hommie kernel length
of contiguous free range. Right back up in yo muthafuckin ass. Smalla than dis may be ignored (this is
a hint n' tha hommie may not respect it). By increasin dis value,
the fstrim operation will complete mo' quickly fo' filesystems
with badly fragmented free space, although not all blocks will
be discarded. Y'all KNOW dat shit, muthafucka!  Da default value is zero, meanin \*(L"discard
every free block\*(R". Mo'over, a if user wants ta trim only one mount
point, it can be specified via optionizzle \fI\-\-mountpoint\fR parameter.
.IP "\fBdomhostname\fR \fIdomain\fR" 4
.IX Item "domhostname domain"
Returns tha hostname of a thugged-out domain, if tha hypervisor make it available.
.IP "\fBdominfo\fR \fIdomain\fR" 4
.IX Item "dominfo domain"
Returns basic shiznit bout tha domain.
.IP "\fBdomuuid\fR \fIdomain-name-or-id\fR" 4
.IX Item "domuuid domain-name-or-id"
Convert a thugged-out domain name or id ta domain \s-1UUID\s0
.IP "\fBdomid\fR \fIdomain-name-or-uuid\fR" 4
.IX Item "domid domain-name-or-uuid"
Convert a thugged-out domain name (or \s-1UUID\s0) ta a thugged-out domain id
.IP "\fBdomjobabort\fR \fIdomain\fR" 4
.IX Item "domjobabort domain"
Abort tha currently hustlin domain thang.
.IP "\fBdomjobinfo\fR \fIdomain\fR" 4
.IX Item "domjobinfo domain"
Returns shiznit bout thangs hustlin on a thugged-out domain.
.IP "\fBdomname\fR \fIdomain-id-or-uuid\fR" 4
.IX Item "domname domain-id-or-uuid"
Convert a thugged-out domain Id (or \s-1UUID\s0) ta domain name
.IP "\fBdomstate\fR \fIdomain\fR [\fI\-\-reason\fR]" 4
.IX Item "domstate domain [--reason]"
Returns state on some thugged-out domain. I aint talkin' bout chicken n' gravy biatch.  \fI\-\-reason\fR  drops some lyrics ta virsh ta also print
reason fo' tha state.
.IP "\fBdomcontrol\fR \fIdomain\fR" 4
.IX Item "domcontrol domain"
Returns state of a intercourse ta \s-1VMM\s0 used ta control a thugged-out domain. I aint talkin' bout chicken n' gravy biatch.  For
states other than \*(L"ok\*(R" or \*(L"error\*(R" tha command also prints number of
secondz elapsed since tha control intercourse entered its current state.
.IP "\fBdomxml-from-native\fR \fIformat\fR \fIconfig\fR" 4
.IX Item "domxml-from-natizzle format config"
Convert tha file \fIconfig\fR up in tha natizzle hommie configuration format
named by \fIformat\fR ta a thugged-out domain \s-1XML\s0 format. For \s-1QEMU/KVM\s0 hypervisor,
the \fIformat\fR argument must be \fBqemu-argv\fR. For Xen hypervisor, the
\&\fIformat\fR argument may be \fBxen-xm\fR or \fBxen-sxpr\fR.
.IP "\fBdomxml-to-native\fR \fIformat\fR \fIxml\fR" 4
.IX Item "domxml-to-natizzle format xml"
Convert tha file \fIxml\fR up in domain \s-1XML\s0 format ta tha natizzle guest
configuration format named by \fIformat\fR. For \s-1QEMU/KVM\s0 hypervisor,
the \fIformat\fR argument must be \fBqemu-argv\fR. For Xen hypervisor, the
\&\fIformat\fR argument may be \fBxen-xm\fR or \fBxen-sxpr\fR.
.IP "\fBdump\fR \fIdomain\fR \fIcorefilepath\fR [\fI\-\-bypass\-cache\fR] { [\fI\-\-live\fR] | [\fI\-\-crash\fR] | [\fI\-\-reset\fR] } [\fI\-\-verbose\fR] [\fI\-\-memory\-only\fR]" 4
.IX Item "dump domain corefilepath [--bypass-cache] { [--live] | [--crash] | [--reset] } [--verbose] [--memory-only]"
Dumps tha core of a thugged-out domain ta a gangbangin' file fo' analysis.
If \fI\-\-live\fR is specified, tha domain continues ta run until tha core
dump is complete, rather than pausin up front.
If \fI\-\-crash\fR is specified, tha domain is halted wit a cold-ass lil crashed status,
rather than merely left up in a paused state.
If \fI\-\-reset\fR is specified, tha domain is reset afta successful dump.
Note, these three switches is mutually exclusive.
If \fI\-\-bypass\-cache\fR is specified, tha save will avoid tha file system
cache, although dis may slow down tha operation.
If \fI\-\-memory\-only\fR is specified, tha file is elf file, n' will only
include domainz memory n' cpu common regista value. Well shiiiit, it is hella
useful if tha domain uses host devices directly.
.Sp
Da progress may be monitored rockin \fBdomjobinfo\fR virsh command n' canceled
with \fBdomjobabort\fR command (sent by another virsh instance) fo' realz. Another option
is ta bust \s-1SIGINT \s0(usually wit \f(CW\*(C`Ctrl\-C\*(C'\fR) ta tha virsh process hustlin
\&\fBdump\fR command. Y'all KNOW dat shit, muthafucka! \fI\-\-verbose\fR displays tha progress of dump.
.Sp
\&\s-1NOTE:\s0 Some hypervisors may require tha user ta manually ensure proper
permissions on file n' path specified by argument \fIcorefilepath\fR.
.IP "\fBdumpxml\fR \fIdomain\fR [\fI\-\-inactive\fR] [\fI\-\-security\-info\fR] [\fI\-\-update\-cpu\fR] [\fI\-\-migratable\fR]" 4
.IX Item "dumpxml domain [--inactive] [--security-info] [--update-cpu] [--migratable]"
Output tha domain shiznit as a \s-1XML\s0 dump ta stdout, dis format can be used
by tha \fBcreate\fR command. Y'all KNOW dat shit, muthafucka! Additionizzle options affectin tha \s-1XML\s0 dump may be
used. Y'all KNOW dat shit, muthafucka! \fI\-\-inactive\fR  drops some lyrics ta virsh ta dump domain configuration dat is ghon be used
on next start of tha domain as opposed ta tha current domain configuration.
Usin \fI\-\-security\-info\fR will also include securitizzle sensitizzle shiznit
in tha \s-1XML\s0 dump. \fI\-\-update\-cpu\fR thugged-out shiznit domain \s-1CPU\s0 requirements accordin to
host \s-1CPU.\s0 With \fI\-\-migratable\fR one can request a \s-1XML\s0 dat is suitable for
migrations, i.e., compatible wit olda libvirt releases n' possibly amended
with internal run-time options. This option may automatically enable other
options (\fI\-\-update\-cpu\fR, \fI\-\-security\-info\fR, ...) as necessary.
.IP "\fBedit\fR \fIdomain\fR" 4
.IX Item "edit domain"
Edit tha \s-1XML\s0 configuration file fo' a thugged-out domain, which will affect the
next boot of tha guest.
.Sp
This is equivalent to:
.Sp
.Vb 3
\& virsh dumpxml \-\-inactizzle \-\-security\-info domain > domain.xml
\& vi domain.xml (or make chizzlez wit yo' other text editor)
\& virsh define domain.xml
.Ve
.Sp
except dat it do some error checking.
.Sp
Da editor used can be supplied by tha \f(CW$VISUAL\fR or \f(CW$EDITOR\fR environment
variables, n' defaults ta \f(CW\*(C`vi\*(C'\fR.
.IP "\fBmanagedsave\fR \fIdomain\fR [\fI\-\-bypass\-cache\fR] [{\fI\-\-running\fR | \fI\-\-paused\fR}] [\fI\-\-verbose\fR]" 4
.IX Item "managedsave domain [--bypass-cache] [{--runnin | --paused}] [--verbose]"
Save n' destroy (stop) a hustlin domain, so it can be restarted from tha same
state at a lata time.  When tha virsh \fBstart\fR command is next run for
the domain, it will automatically be started from dis saved state.
If \fI\-\-bypass\-cache\fR is specified, tha save will avoid tha file system
cache, although dis may slow down tha operation.
.Sp
Da progress may be monitored rockin \fBdomjobinfo\fR virsh command n' canceled
with \fBdomjobabort\fR command (sent by another virsh instance) fo' realz. Another option
is ta bust \s-1SIGINT \s0(usually wit \f(CW\*(C`Ctrl\-C\*(C'\fR) ta tha virsh process hustlin
\&\fBmanagedsave\fR command. Y'all KNOW dat shit, muthafucka! \fI\-\-verbose\fR displays tha progress of save.
.Sp
Normally, startin a managed save will decizzle between hustlin or paused
based on tha state tha domain was up in when tha save was done; passing
either tha \fI\-\-running\fR or \fI\-\-paused\fR flag will allow overridin which
state tha \fBstart\fR should use.
.Sp
Da \fBdominfo\fR command can be used ta query whether a thugged-out domain currently
has any managed save image.
.IP "\fBmanagedsave-remove\fR \fIdomain\fR" 4
.IX Item "managedsave-remove domain"
Remove tha \fBmanagedsave\fR state file fo' a thugged-out domain, if it exists, n' you can put dat on yo' toast.  This
ensures tha domain will do a gangbangin' full boot tha next time it is started.
.IP "\fBmaxvcpus\fR [\fItype\fR]" 4
.IX Item "maxvcpus [type]"
Provide tha maximum number of virtual CPUs supported fo' a hommie \s-1VM\s0 on
this connection. I aint talkin' bout chicken n' gravy biatch.  If provided, tha \fItype\fR parameta must be a valid
type attribute fo' tha <domain> element of \s-1XML.\s0
.IP "\fBcpu-stats\fR \fIdomain\fR [\fI\-\-total\fR] [\fIstart\fR] [\fIcount\fR]" 4
.IX Item "cpu-stats domain [--total] [start] [count]"
Provide cpu statistics shiznit of a thugged-out domain. I aint talkin' bout chicken n' gravy biatch. Da domain should
be hustlin. Default it shows stats fo' all CPUs, n' a total. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Use
\&\fI\-\-total\fR fo' only tha total stats, \fIstart\fR fo' only tha per-cpu
statz of tha CPUs from \fIstart\fR, \fIcount\fR fo' only \fIcount\fR CPUs'
stats.
.IP "\fBmigrate\fR [\fI\-\-live\fR] [\fI\-\-offline\fR] [\fI\-\-direct\fR] [\fI\-\-p2p\fR [\fI\-\-tunnelled\fR]] [\fI\-\-persistent\fR] [\fI\-\-undefinesource\fR] [\fI\-\-suspend\fR] [\fI\-\-copy\-storage\-all\fR] [\fI\-\-copy\-storage\-inc\fR] [\fI\-\-change\-protection\fR] [\fI\-\-unsafe\fR] [\fI\-\-verbose\fR] [\fI\-\-compressed\fR] [\fI\-\-abort\-on\-error\fR] \fIdomain\fR \fIdesturi\fR [\fImigrateuri\fR] [\fIgraphicsuri\fR] [\fIdname\fR] [\fI\-\-timeout\fR \fBseconds\fR] [\fI\-\-xml\fR \fBfile\fR]" 4
.IX Item "migrate [--live] [--offline] [--direct] [--p2p [--tunnelled]] [--persistent] [--undefinesource] [--suspend] [--copy-storage-all] [--copy-storage-inc] [--change-protection] [--unsafe] [--verbose] [--compressed] [--abort-on-error] domain desturi [migrateuri] [graphicsuri] [dname] [--timeout seconds] [--xml file]"
Migrate domain ta another host.  Add \fI\-\-live\fR fo' live migration; <\-\-p2p>
for peer\-2\-peer migration; \fI\-\-direct\fR fo' direct migration; or \fI\-\-tunnelled\fR
for tunnelled migration. I aint talkin' bout chicken n' gravy biatch.  \fI\-\-offline\fR migrates domain definizzle without
startin tha domain on destination n' without stoppin it on source host.
Offline migration may be used wit inactizzle domains n' it must be used with
\&\fI\-\-persistent\fR option. I aint talkin' bout chicken n' gravy biatch.  \fI\-\-persistent\fR leaves tha domain persistent on
destination host, \fI\-\-undefinesource\fR undefines tha domain on tha source host,
and \fI\-\-suspend\fR leaves tha domain paused on tha destination host.
\&\fI\-\-copy\-storage\-all\fR indicates migration wit non-shared storage wit full
disk copy, \fI\-\-copy\-storage\-inc\fR indicates migration wit non-shared storage
with incremenstrual copy (same base image shared between source n' destination).
In both cases tha disk images gotta exist on destination host, the
\&\fI\-\-copy\-storage\-...\fR options only tell libvirt ta transfer data from the
images on source host ta tha images found all up in tha same place on tha destination
host. \fI\-\-change\-protection\fR enforces dat no incompatible configuration
changes is ghon be made ta tha domain while tha migration is underway; dis flag
is implicitly enabled when supported by tha hypervisor yo, but can be explicitly
used ta reject tha migration if tha hypervisor lacks chizzle protection
support.  \fI\-\-verbose\fR displays tha progress of migration. I aint talkin' bout chicken n' gravy biatch.  \fI\-\-compressed\fR
activates compression of memory pages dat gotta be transferred repeatedly
durin live migration. I aint talkin' bout chicken n' gravy biatch. \fI\-\-abort\-on\-error\fR cancels tha migration if a soft
error (for example I/O error) happens durin tha migration.
.Sp
\&\fBNote\fR: Individual hypervisors probably do not support all possible types of
migration. I aint talkin' bout chicken n' gravy biatch. For example, \s-1QEMU\s0 do not support direct migration.
.Sp
In some cases libvirt may refuse ta migrate tha domain cuz bustin so may
lead ta potential problems like fuckin data corruption, n' thus tha migration is
considered unsafe. For \s-1QEMU\s0 domain, dis may happen if tha domain uses disks
without explicitly settin cache mode ta \*(L"none\*(R". Migratin such domains is
unsafe unless tha disk images is stored on coherent clustered filesystem,
like fuckin \s-1GFS2\s0 or \s-1GPFS.\s0 If yo ass is shizzle tha migration is safe or you just do not
care, use \fI\-\-unsafe\fR ta force tha migration.
.Sp
Da \fIdesturi\fR is tha connection \s-1URI\s0 of tha destination host, and
\&\fImigrateuri\fR is tha migration \s-1URI,\s0 which probably can be omitted (see below).
\&\fIdname\fR is used fo' renamin tha domain ta freshly smoked up name durin migration, which
also probably can be omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Likewise, \fI\-\-xml\fR \fBfile\fR is usually
omitted yo, but can be used ta supply a alternatizzle \s-1XML\s0 file fo' use on
the destination ta supply a larger set of chizzlez ta any host-specific
portionz of tha domain \s-1XML,\s0 like fuckin accountin fo' namin differences
between source n' destination up in accessin underlyin storage.
.Sp
\&\fI\-\-timeout\fR \fBseconds\fR forces hommie ta suspend when live migration exceeds
that nuff seconds, and
then tha migration will complete offline. Well shiiiit, it can only be used wit \fI\-\-live\fR.
.Sp
Hustlin migration can be canceled by interruptin virsh (usually using
\&\f(CW\*(C`Ctrl\-C\*(C'\fR) or by \fBdomjobabort\fR command busted from another virsh instance.
.Sp
\&\fBNote\fR: Da \fIdesturi\fR parameta fo' aiiight migration n' peer2peer migration
has different semantics:
.RS 4
.IP "\(bu" 4
normal migration: tha \fIdesturi\fR be a address of tha target host as
seen from tha client machine.
.IP "\(bu" 4
peer2peer migration: tha \fIdesturi\fR be a address of tha target host as
seen from tha source machine.
.RE
.RS 4
.Sp
When \fImigrateuri\fR aint specified, libvirt will automatically determine the
hypervisor specific \s-1URI,\s0 by lookin up tha target hostz configured hostname.
There is all dem scenarios where specifyin \fImigrateuri\fR may help:
.IP "\(bu" 4
Da configured hostname is incorrect, or \s-1DNS\s0 is broken. I aint talkin' bout chicken n' gravy biatch.  If a host has a
hostname which aint gonna resolve ta match one of its hood \s-1IP\s0 addresses, then
libvirt will generate a incorrect \s-1URI. \s0 In dis case \fImigrateuri\fR should be
explicitly specified, rockin a \s-1IP\s0 address, or a cold-ass lil erect hostname.
.IP "\(bu" 4
Da host has multiple network interaces.  If a host has multiple network
interfaces, it might be desirable fo' tha migration data stream ta be busted over
a specific intercourse fo' either securitizzle or performizzle reasons.  In dis case
\&\fImigrateuri\fR should be explicitly specified, rockin a \s-1IP\s0 address associated
with tha network ta be used.
.IP "\(bu" 4
Da firewall restricts what tha fuck ports is available.  When libvirt generates
a migration \s-1URI,\s0 it will pick a port number rockin hypervisor specific rules.
Some hypervisors only require a single port ta be open up in tha firewalls, while
others require a whole range of port numbers.  In tha latta case \fImigrateuri\fR
might be specified ta chizzle a specific port number outside tha default range in
order ta comply wit local firewall policies.
.RE
.RS 4
.Sp
Optionizzle \fIgraphicsuri\fR overrides connection parametas used fo' automatically
reconnectin a graphical clients all up in tha end of migration. I aint talkin' bout chicken n' gravy biatch. If omitted, libvirt
will compute tha parametas based on target host \s-1IP\s0 address. In case the
client aint gots a gangbangin' finger-lickin' direct access ta tha network virtualization hosts are
connected ta n' need ta connect all up in a proxy, \fIgraphicsuri\fR may be used
to specify tha address tha client should connect to. Da \s-1URI\s0 is formed as
bigs up:
.Sp
.Vb 1
\&    protocol://hostname[:port]/[?parameters]
.Ve
.Sp
where protocol is either \*(L"spice\*(R" or \*(L"vnc\*(R" n' parametas be a list of protocol
specific parametas separated by '&'. Currently recognized parametas are
\&\*(L"tlsPort\*(R" n' \*(L"tlsSubject\*(R". For example,
.Sp
.Vb 1
\&    spice://target.host.com:1234/?tlsPort=4567
.Ve
.RE
.IP "\fBmigrate-setmaxdowntime\fR \fIdomain\fR \fIdowntime\fR" 4
.IX Item "migrate-setmaxdowntime domain downtime"
Set maximum tolerable downtime fo' a thugged-out domain which is bein live-migrated to
another host.  Da \fIdowntime\fR be a fuckin shitload of millisecondz tha hommie be allowed
to be down all up in tha end of live migration.
.IP "\fBmigrate-compcache\fR \fIdomain\fR [\fI\-\-size\fR \fBbytes\fR]" 4
.IX Item "migrate-compcache domain [--size bytes]"
Sets and/or gets size of tha cache (in bytes) used fo' compressin repeatedly
transferred memory pages durin live migration. I aint talkin' bout chicken n' gravy biatch. When called without \fIsize\fR,
the command just prints current size of tha compression cache. When \fIsize\fR
is specified, tha hypervisor be axed ta chizzle compression cache ta \fIsize\fR
bytes n' then tha current size is printed (the result may differ from the
axed size cuz of roundin done by tha hypervisor). Da \fIsize\fR option
is supposed ta be used while tha domain is bein live-migrated as a erection
to migration progress n' increasin number of compression cache misses
obtained from domjobinfo.
.IP "\fBmigrate-setspeed\fR \fIdomain\fR \fIbandwidth\fR" 4
.IX Item "migrate-setspeed domain bandwidth"
Set tha maximum migration bandwidth (in MiB/s) fo' a thugged-out domain which is being
migrated ta another host.
.IP "\fBmigrate-getspeed\fR \fIdomain\fR" 4
.IX Item "migrate-getspeed domain"
Git tha maximum migration bandwidth (in MiB/s) fo' a thugged-out domain.
.IP "\fBnumatune\fR \fIdomain\fR [\fI\-\-mode\fR \fBmode\fR] [\fI\-\-nodeset\fR \fBnodeset\fR] [[\fI\-\-config\fR] [\fI\-\-live\fR] | [\fI\-\-current\fR]]" 4
.IX Item "numatune domain [--mode mode] [--nodeset nodeset] [[--config] [--live] | [--current]]"
Set or git a thugged-out domainz numa parameters, correspondin ta tha <numatune>
element of domain \s-1XML. \s0 Without flags, tha current settings are
displayed.
.Sp
\&\fImode\fR can be one of `strict', `interleave' n' `preferred'.  For a
runnin domain, tha mode can't be chizzled, n' tha nodeset can be
changed only if tha domain was started wit a mode of `strict'.
.Sp
\&\fInodeset\fR be a list of numa nodes used by tha host fo' hustlin tha domain.
Its syntax be a cold-ass lil comma separated list, wit '\-' fo' ranges n' '^' for
excludin a node.
.Sp
If \fI\-\-live\fR is specified, set schedula shiznit of a hustlin guest.
If \fI\-\-config\fR is specified, affect tha next boot of a persistent guest.
If \fI\-\-current\fR is specified, affect tha current hommie state.
.IP "\fBreboot\fR \fIdomain\fR [\fI\-\-mode MODE-LIST\fR]" 4
.IX Item "reboot domain [--mode MODE-LIST]"
Reboot a thugged-out domain. I aint talkin' bout chicken n' gravy biatch.  This acts just as if tha domain had tha \fBreboot\fR
command run from tha console.  Da command returns as soon as it has
executed tha reboot action, which may be hella before the
domain straight-up reboots.
.Sp
Da exact behavior of a thugged-out domain when it reboots is set by the
\&\fIon_reboot\fR parameta up in tha domainz \s-1XML\s0 definition.
.Sp
By default tha hypervisor will try ta pick a suitable shutdown
method. Y'all KNOW dat shit, muthafucka! To specify a alternatizzle method, tha \fI\-\-mode\fR parameter
can specify a cold-ass lil comma separated list which includes \f(CW\*(C`acpi\*(C'\fR, \f(CW\*(C`agent\*(C'\fR,
\&\f(CW\*(C`initctl\*(C'\fR n' \f(CW\*(C`signal\*(C'\fR. Da order up in which drivers will try each
mode is undefined, n' not related ta tha order specified ta virsh.
For strict control over ordering, bust a single mode at a time and
repeat tha command.
.IP "\fBreset\fR \fIdomain\fR" 4
.IX Item "reset domain"
Reset a thugged-out domain immediately without any hommie shutdown. I aint talkin' bout chicken n' gravy biatch. \fBreset\fR
emulates tha juice reset button on a machine, where all guest
hardware sees tha \s-1RST\s0 line set n' reinitializes internal state.
.Sp
\&\fBNote\fR: Reset without any hommie \s-1OS\s0 shutdown risks data loss.
.IP "\fBrestore\fR \fIstate-file\fR [\fI\-\-bypass\-cache\fR] [\fI\-\-xml\fR \fBfile\fR] [{\fI\-\-running\fR | \fI\-\-paused\fR}]" 4
.IX Item "restore state-file [--bypass-cache] [--xml file] [{--runnin | --paused}]"
Restores a thugged-out domain from a \fBvirsh save\fR state file. Right back up in yo muthafuckin ass. See \fIsave\fR fo' mo' info.
.Sp
If \fI\-\-bypass\-cache\fR is specified, tha restore will avoid tha file system
cache, although dis may slow down tha operation.
.Sp
\&\fI\-\-xml\fR \fBfile\fR is probably omitted yo, but can be used ta supply an
alternatizzle \s-1XML\s0 file fo' use on tha restored hommie wit chizzlez only
in tha host-specific portionz of tha domain \s-1XML. \s0 For example, it can
be used ta account fo' file namin differences up in underlyin storage
due ta disk snapshots taken afta tha hommie was saved.
.Sp
Normally, restorin a saved image will use tha state recorded up in the
save image ta decizzle between hustlin or paused; passin either the
\&\fI\-\-running\fR or \fI\-\-paused\fR flag will allow overridin which state the
domain should be started in.
.Sp
\&\fBNote\fR: To avoid corruptin file system contents within tha domain, you
should not reuse tha saved state file fo' a second \fBrestore\fR unless you
have also reverted all storage volumes back ta tha same contents as when
the state file was pimped.
.IP "\fBsave\fR \fIdomain\fR \fIstate-file\fR [\fI\-\-bypass\-cache\fR] [\fI\-\-xml\fR \fBfile\fR] [{\fI\-\-running\fR | \fI\-\-paused\fR}] [\fI\-\-verbose\fR]" 4
.IX Item "save domain state-file [--bypass-cache] [--xml file] [{--runnin | --paused}] [--verbose]"
Saves a hustlin domain (\s-1RAM,\s0 but not disk state) ta a state file so that
it can be restored
later n' shit.  Once saved, tha domain will no longer be hustlin on the
system, thus tha memory allocated fo' tha domain is ghon be free for
other domains ta use.  \fBvirsh restore\fR restores from dis state file.
If \fI\-\-bypass\-cache\fR is specified, tha save will avoid tha file system
cache, although dis may slow down tha operation.
.Sp
Da progress may be monitored rockin \fBdomjobinfo\fR virsh command n' canceled
with \fBdomjobabort\fR command (sent by another virsh instance) fo' realz. Another option
is ta bust \s-1SIGINT \s0(usually wit \f(CW\*(C`Ctrl\-C\*(C'\fR) ta tha virsh process hustlin
\&\fBsave\fR command. Y'all KNOW dat shit, muthafucka! \fI\-\-verbose\fR displays tha progress of save.
.Sp
This is roughly equivalent ta bustin a hibernate on a hustlin computer,
with all tha same limitations.  Open network connections may be
severed upon restore, as \s-1TCP\s0 timeouts may have expired.
.Sp
\&\fI\-\-xml\fR \fBfile\fR is probably omitted yo, but can be used ta supply an
alternatizzle \s-1XML\s0 file fo' use on tha restored hommie wit chizzlez only
in tha host-specific portionz of tha domain \s-1XML. \s0 For example, it can
be used ta account fo' file namin differences dat is planned to
be made via disk snapshotz of underlyin storage afta tha hommie is saved.
.Sp
Normally, restorin a saved image will decizzle between hustlin or paused
based on tha state tha domain was up in when tha save was done; passing
either tha \fI\-\-running\fR or \fI\-\-paused\fR flag will allow overridin which
state tha \fBrestore\fR should use.
.Sp
Domain saved state filez assume dat disk images is ghon be unchanged
between tha creation n' restore point.  For a mo' complete system
restore point, where tha disk state is saved alongside tha memory
state, peep tha \fBsnapshot\fR crew of commands.
.IP "\fBsave-image-define\fR \fIfile\fR \fIxml\fR [{\fI\-\-running\fR | \fI\-\-paused\fR}]" 4
.IX Item "save-image-define file xml [{--runnin | --paused}]"
Update tha domain \s-1XML\s0 dat is ghon be used when \fIfile\fR is later
used up in tha \fBrestore\fR command. Y'all KNOW dat shit, muthafucka!  Da \fIxml\fR argument must be a gangbangin' file
name containin tha alternatizzle \s-1XML,\s0 wit chizzlez only up in the
host-specific portionz of tha domain \s-1XML. \s0 For example, it can
be used ta account fo' file namin differences resultin from bustin
disk snapshotz of underlyin storage afta tha hommie was saved.
.Sp
Da save image recordz whether tha domain should be restored ta a
runnin or paused state.  Normally, dis command do not alta the
recorded state; passin either tha \fI\-\-running\fR or \fI\-\-paused\fR flag
will allow overridin which state tha \fBrestore\fR should use.
.IP "\fBsave-image-dumpxml\fR \fIfile\fR [\fI\-\-security\-info\fR]" 4
.IX Item "save-image-dumpxml file [--security-info]"
Extract tha domain \s-1XML\s0 dat was up in effect all up in tha time tha saved state
file \fIfile\fR was pimped wit tha \fBsave\fR command. Y'all KNOW dat shit, muthafucka!  Using
\&\fI\-\-security\-info\fR will also include securitizzle sensitizzle shiznit.
.IP "\fBsave-image-edit\fR \fIfile\fR [{\fI\-\-running\fR | \fI\-\-paused\fR}]" 4
.IX Item "save-image-edit file [{--runnin | --paused}]"
Edit tha \s-1XML\s0 configuration associated wit a saved state file \fIfile\fR
created by tha \fBsave\fR command.
.Sp
Da save image recordz whether tha domain should be restored ta a
runnin or paused state.  Normally, dis command do not alta the
recorded state; passin either tha \fI\-\-running\fR or \fI\-\-paused\fR flag
will allow overridin which state tha \fBrestore\fR should use.
.Sp
This is equivalent to:
.Sp
.Vb 3
\& virsh save\-image\-dumpxml state\-file > state\-file.xml
\& vi state\-file.xml (or make chizzlez wit yo' other text editor)
\& virsh save\-image\-define state\-file state\-file\-xml
.Ve
.Sp
except dat it do some error checking.
.Sp
Da editor used can be supplied by tha \f(CW$VISUAL\fR or \f(CW$EDITOR\fR environment
variables, n' defaults ta \f(CW\*(C`vi\*(C'\fR.
.IP "\fBschedinfo\fR \fIdomain\fR [[\fI\-\-config\fR] [\fI\-\-live\fR] | [\fI\-\-current\fR]] [[\fI\-\-set\fR] \fBparameter=value\fR]..." 4
.IX Item "schedinfo domain [[--config] [--live] | [--current]] [[--set] parameter=value]..."
.PD 0
.IP "\fBschedinfo\fR [\fI\-\-weight\fR \fBnumber\fR] [\fI\-\-cap\fR \fBnumber\fR] \fIdomain\fR" 4
.IX Item "schedinfo [--weight number] [--cap number] domain"
.PD
Allows you ta show (and set) tha domain schedula parameters. Da parameters
available fo' each hypervisor are:
.Sp
\&\s-1LXC \s0(posix scheduler) : cpu_shares
.Sp
\&\s-1QEMU/KVM \s0(posix scheduler): cpu_shares, vcpu_period, vcpu_quota,
emulator_period, emulator_quota
.Sp
Xen (credit scheduler): weight, cap
.Sp
\&\s-1ESX \s0(allocation scheduler): reservation, limit, shares
.Sp
If \fI\-\-live\fR is specified, set schedula shiznit of a hustlin guest.
If \fI\-\-config\fR is specified, affect tha next boot of a persistent guest.
If \fI\-\-current\fR is specified, affect tha current hommie state.
.Sp
\&\fBNote\fR: Da cpu_shares parameta has a valid value range of 0\-262144; Negative
values is wrapped ta positive, n' larger joints is capped all up in tha maximum.
Therefore, \-1 be a useful shorthand fo' 262144. On tha Linux kernel, the
values 0 n' 1 is automatically converted ta a minimal value of 2.
.Sp
\&\fBNote\fR: Da weight n' cap parametas is defined only fo' the
\&\s-1XEN_CREDIT\s0 schedula n' is now \fI\s-1DEPRECATED\s0\fR.
.Sp
\&\fBNote\fR: Da vcpu_period/emulator_period parametas gotz a valid value range
of 1000\-1000000 or 0, n' tha vcpu_quota/emulator_quota parametas have a
valid value range of 1000\-18446744073709551 or less than 0. Da value 0 for
either parameta is tha same ol' dirty as not specifyin dat parameter.
.IP "\fBscreenshot\fR \fIdomain\fR [\fIimagefilepath\fR] [\fI\-\-screen\fR \fBscreenID\fR]" 4
.IX Item "screenshot domain [imagefilepath] [--screen screenID]"
Takes a screenshot of a cold-ass lil current domain console n' stores it tha fuck into a gangbangin' file.
Optionally, if hypervisor supports mo' displays fo' a thugged-out domain, \fIscreenID\fR
allows ta specify which screen is ghon be captured. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is tha sequential number
of screen. I aint talkin' bout chicken n' gravy biatch. In case of multiple graphics cards, headz is enumerated before
devices, e.g. havin two graphics cards, both wit four heads, screen \s-1ID 5\s0
addresses tha second head on tha second card.
.IP "\fBsend-key\fR \fIdomain\fR [\fI\-\-codeset\fR \fBcodeset\fR] [\fI\-\-holdtime\fR \fBholdtime\fR] \fIkeycode\fR..." 4
.IX Item "send-key domain [--codeset codeset] [--holdtime holdtime] keycode..."
Parse tha \fIkeycode\fR sequence as keystrokes ta bust ta \fIdomain\fR.
Each \fIkeycode\fR can either be a numeric value or a symbolic name from
the correspondin codeset.  If \fI\-\-holdtime\fR is given, each keystroke
will be held fo' dat nuff milliseconds.  Da default codeset is
\&\fBlinux\fR yo, but use of tha \fI\-\-codeset\fR option allows other codesets to
be chosen.
.Sp
If multiple keycodes is specified, they is all busted simultaneously
to tha guest, n' they may be received up in random order n' shit. If you need
distinct keypresses, you must use multiple send-key invocations.
.RS 4
.IP "\fBlinux\fR" 4
.IX Item "linux"
Da numeric joints is dem defined by tha Linux generic input
event subsystem. Da symbolic names match tha corresponding
Linux key constant macro names.
.IP "\fBxt\fR" 4
.IX Item "xt"
Da numeric joints is dem defined by tha original gangsta \s-1XT\s0 keyboard
controlla n' shit. No symbolic names is provided
.IP "\fBatset1\fR" 4
.IX Item "atset1"
Da numeric joints is dem defined by tha \s-1AT\s0 keyboard controller,
set 1 (aka \s-1XT\s0 compatible set). Extended keycoes from \fBatset1\fR
may differ from extended keycodes up in tha \fBxt\fR codeset. No symbolic
names is provided
.IP "\fBatset2\fR" 4
.IX Item "atset2"
Da numeric joints is dem defined by tha \s-1AT\s0 keyboard controller,
set 2. No symbolic names is provided
.IP "\fBatset3\fR" 4
.IX Item "atset3"
Da numeric joints is dem defined by tha \s-1AT\s0 keyboard controller,
set 3 (aka \s-1PS/2\s0 compatible set). No symbolic names is provided
.IP "\fBos_x\fR" 4
.IX Item "os_x"
Da numeric joints is dem defined by tha OS-X keyboard input
subsystem. Da symbolic names match tha correspondin OS-X key
constant macro names
.IP "\fBxt_kbd\fR" 4
.IX Item "xt_kbd"
Da numeric joints is dem defined by tha Linux \s-1KBD\s0 device.
These is a variant on tha original gangsta \s-1XT\s0 codeset yo, but often with
different encodin fo' extended keycodes. No symbolic names are
provided.
.IP "\fBwin32\fR" 4
.IX Item "win32"
Da numeric joints is dem defined by tha Win32 keyboard input
subsystem. Da symbolic names match tha correspondin Win32 key
constant macro names
.IP "\fBusb\fR" 4
.IX Item "usb"
Da numeric joints is dem defined by tha \s-1STD HID\s0 justification
for keyboard input. No symbolic names is provided
.IP "\fBrfb\fR" 4
.IX Item "rfb"
Da numeric joints is dem defined by tha \s-1RFB\s0 extension fo' sending
raw keycodes. These is a variant on tha \s-1XT\s0 codeset yo, but extended
keycodes have tha low bit of tha second byte set, instead of tha high
bit of tha straight-up original gangsta byte. No symbolic names is provided.
.RE
.RS 4
.Sp
\&\fBExamples\fR
  # bust three strokes 'k', 'e', 'y', rockin xt codeset. these
  # is all pressed simultaneously n' may be received by tha guest
  # up in random order
  virsh send-key dom \-\-codeset xt 37 18 21
.Sp
.Vb 2
\&  # bust one stroke \*(Aqright\-ctrl+C\*(Aq
\&  virsh send\-key dom KEY_RIGHTCTRL KEY_C
\&
\&  # bust a tab, held fo' 1 second
\&  virsh send\-key \-\-holdtime 1000 0xf
.Ve
.RE
.IP "\fBsend-process-signal\fR \fIdomain-id\fR \fIpid\fR \fIsigname\fR" 4
.IX Item "send-process-signal domain-id pid signame"
Send a signal \fIsigname\fR ta tha process identified by \fIpid\fR hustlin in
the virtual domain \fIdomain-id\fR. Da \fIpid\fR be a process \s-1ID\s0 up in tha virtual
domain namespace.
.Sp
Da \fIsigname\fR argument may be either a integer signal constant number,
or one of tha symbolic names:
.Sp
.Vb 12
\&    "nop", "hup", "int", "quit", "ill",
\&    "trap", "abrt", "bus", "fpe", "kill",
\&    "usr1", "segv", "usr2", "pipe", "alrm",
\&    "term", "stkflt", "chld", "cont", "stop",
\&    "tstp", "ttin", "ttou", "urg", "xcpu",
\&    "xfsz", "vtalrm", "prof", "winch", "poll",
\&    "pwr", "sys", "rt0", "rt1", "rt2", "rt3",
\&    "rt4", "rt5", "rt6", "rt7", "rt8", "rt9",
\&    "rt10", "rt11", "rt12", "rt13", "rt14", "rt15",
\&    "rt16", "rt17", "rt18", "rt19", "rt20", "rt21",
\&    "rt22", "rt23", "rt24", "rt25", "rt26", "rt27",
\&    "rt28", "rt29", "rt30", "rt31", "rt32"
.Ve
.Sp
Da symbol name may optionally be prefixed wit 'sig' or 'sig_' and
may be up in uppercase or lowercase.
.Sp
\&\fBExamples\fR
  virsh send-process-signal myguest 1 15
  virsh send-process-signal myguest 1 term
  virsh send-process-signal myguest 1 sigterm
  virsh send-process-signal myguest 1 \s-1SIG_HUP\s0
.IP "\fBsetmem\fR \fIdomain\fR \fBsize\fR [[\fI\-\-config\fR] [\fI\-\-live\fR] | [\fI\-\-current\fR]]" 4
.IX Item "setmem domain size [[--config] [--live] | [--current]]"
Change tha memory allocation fo' a hommie domain.
If \fI\-\-live\fR is specified, big-ass up a memory balloon of a hustlin guest.
If \fI\-\-config\fR is specified, affect tha next boot of a persistent guest.
If \fI\-\-current\fR is specified, affect tha current hommie state.
Both \fI\-\-live\fR n' \fI\-\-config\fR flags may be given yo, but \fI\-\-current\fR is
exclusive. If no flag is specified, behavior is different depending
on hypervisor.
.Sp
\&\fIsize\fR be a scaled integer (see \fB\s-1NOTES\s0\fR above); it defaults ta kibibytes
(blockz of 1024 bytes) unless you provide a suffix (and tha olda option
name \fI\-\-kilobytes\fR be available as a thugged-out deprecated synonym) .  Libvirt rounds
up ta tha nearest kibibyte.  Some hypervisors require a larger granularity
than KiB, n' requests dat is not a even multiple is ghon be rounded up.
For example, vSphere/ESX roundz tha parameta up ta mebibytes (1024 kibibytes).
.Sp
For Xen, you can only adjust tha memory of a hustlin domain if tha domain is
paravirtualized or hustlin tha \s-1PV\s0 balloon driver.
.IP "\fBsetmaxmem\fR \fIdomain\fR \fBsize\fR [[\fI\-\-config\fR] [\fI\-\-live\fR] | [\fI\-\-current\fR]]" 4
.IX Item "setmaxmem domain size [[--config] [--live] | [--current]]"
Change tha maximum memory allocation limit fo' a hommie domain.
If \fI\-\-live\fR is specified, affect a hustlin guest.
If \fI\-\-config\fR is specified, affect tha next boot of a persistent guest.
If \fI\-\-current\fR is specified, affect tha current hommie state.
Both \fI\-\-live\fR n' \fI\-\-config\fR flags may be given yo, but \fI\-\-current\fR is
exclusive. If no flag is specified, behavior is different depending
on hypervisor.
.Sp
Some hypervisors like fuckin \s-1QEMU/KVM\s0 don't support live chizzlez (especially
increasing) of tha maximum memory limit.
.Sp
\&\fIsize\fR be a scaled integer (see \fB\s-1NOTES\s0\fR above); it defaults ta kibibytes
(blockz of 1024 bytes) unless you provide a suffix (and tha olda option
name \fI\-\-kilobytes\fR be available as a thugged-out deprecated synonym) .  Libvirt rounds
up ta tha nearest kibibyte.  Some hypervisors require a larger granularity
than KiB, n' requests dat is not a even multiple is ghon be rounded up.
For example, vSphere/ESX roundz tha parameta up ta mebibytes (1024 kibibytes).
.IP "\fBmemtune\fR \fIdomain\fR [\fI\-\-hard\-limit\fR \fBsize\fR] [\fI\-\-soft\-limit\fR \fBsize\fR] [\fI\-\-swap\-hard\-limit\fR \fBsize\fR] [\fI\-\-min\-guarantee\fR \fBsize\fR] [[\fI\-\-config\fR] [\fI\-\-live\fR] | [\fI\-\-current\fR]]" 4
.IX Item "memtune domain [--hard-limit size] [--soft-limit size] [--swap-hard-limit size] [--min-guarantee size] [[--config] [--live] | [--current]]"
Allows you ta display or set tha domain memory parameters. Without
flags, tha current settings is displayed; wit a gangbangin' flag, the
appropriate limit be adjusted if supported by tha hypervisor. Shiiit, dis aint no joke.  \s-1LXC\s0 and
\&\s-1QEMU/KVM\s0 support \fI\-\-hard\-limit\fR, \fI\-\-soft\-limit\fR, n' \fI\-\-swap\-hard\-limit\fR.
\&\fI\-\-min\-guarantee\fR is supported only by \s-1ESX\s0 hypervisor. Shiiit, dis aint no joke.  Each of these
limits is scaled integers (see \fB\s-1NOTES\s0\fR above), wit a thugged-out default of
kibibytes (blockz of 1024 bytes) if no suffix is present. Libvirt rounds
up ta tha nearest kibibyte.  Some hypervisors require a larger granularity
than KiB, n' requests dat is not a even multiple is ghon be rounded up.
For example, vSphere/ESX roundz tha parameta up ta mebibytes (1024 kibibytes).
.Sp
If \fI\-\-live\fR is specified, affect a hustlin guest.
If \fI\-\-config\fR is specified, affect tha next boot of a persistent guest.
If \fI\-\-current\fR is specified, affect tha current hommie state.
Both \fI\-\-live\fR n' \fI\-\-config\fR flags may be given yo, but \fI\-\-current\fR is
exclusive. If no flag is specified, behavior is different depending
on hypervisor.
.Sp
For \s-1QEMU/KVM,\s0 tha parametas is applied ta tha \s-1QEMU\s0 process as a whole.
Thus, when countin them, one need ta add up hommie \s-1RAM,\s0 hommie vizzle \s-1RAM,\s0 and
some memory overhead of \s-1QEMU\s0 itself.  Da last piece is hard ta determine so
one needz guess n' try.
.RS 4
.IP "\fI\-\-hard\-limit\fR" 4
.IX Item "--hard-limit"
Da maximum memory tha hommie can use.
.IP "\fI\-\-soft\-limit\fR" 4
.IX Item "--soft-limit"
Da memory limit ta enforce durin memory contention.
.IP "\fI\-\-swap\-hard\-limit\fR" 4
.IX Item "--swap-hard-limit"
Da maximum memory plus swap tha hommie can use.  This has ta be more
than hard-limit value provided.
.IP "\fI\-\-min\-guarantee\fR" 4
.IX Item "--min-guarantee"
Da guaranteed minimum memory allocation fo' tha guest.
.RE
.RS 4
.Sp
Specifyin \-1 as a value fo' these limits is interpreted as unlimited.
.RE
.IP "\fBblkiotune\fR \fIdomain\fR [\fI\-\-weight\fR \fBweight\fR] [\fI\-\-device\-weights\fR \fBdevice-weights\fR] [[\fI\-\-config\fR] [\fI\-\-live\fR] | [\fI\-\-current\fR]]" 4
.IX Item "blkiotune domain [--weight weight] [--device-weights device-weights] [[--config] [--live] | [--current]]"
Display or set tha blkio parameters. \s-1QEMU/KVM\s0 supports \fI\-\-weight\fR.
\&\fI\-\-weight\fR is up in range [100, 1000].
.Sp
\&\fBdevice-weights\fR be a single strang listin one or mo' device/weight
pairs, up in tha format of /path/to/device,weight,/path/to/device,weight.
Each weight is up in tha range [100, 1000], or tha value 0 ta remove that
device from per-device listings.  Only tha devices listed up in tha string
are modified; any existin per-device weights fo' other devices remain
unchanged.
.Sp
If \fI\-\-live\fR is specified, affect a hustlin guest.
If \fI\-\-config\fR is specified, affect tha next boot of a persistent guest.
If \fI\-\-current\fR is specified, affect tha current hommie state.
Both \fI\-\-live\fR n' \fI\-\-config\fR flags may be given yo, but \fI\-\-current\fR is
exclusive. If no flag is specified, behavior is different depending
on hypervisor.
.IP "\fBsetvcpus\fR \fIdomain\fR \fIcount\fR [\fI\-\-maximum\fR] [[\fI\-\-config\fR] [\fI\-\-live\fR] | [\fI\-\-current\fR]] [\fI\-\-guest\fR]" 4
.IX Item "setvcpus domain count [--maximum] [[--config] [--live] | [--current]] [--guest]"
Change tha number of virtual CPUs actizzle up in a hommie domain. I aint talkin' bout chicken n' gravy biatch.  By default,
this command works on actizzle hommie domains.  To chizzle tha settings fo' an
inactizzle hommie domain, use tha \fI\-\-config\fR flag.
.Sp
Da \fIcount\fR value may be limited by host, hypervisor, or a limit coming
from tha original gangsta description of tha hommie domain. I aint talkin' bout chicken n' gravy biatch. For Xen, you can only
adjust tha virtual CPUz of a hustlin domain if tha domain is paravirtualized.
.Sp
If tha \fI\-\-config\fR flag is specified, tha chizzle is made ta tha stored \s-1XML\s0
configuration fo' tha hommie domain, n' will only take effect when tha guest
domain is next started.
.Sp
If \fI\-\-live\fR is specified, tha hommie domain must be active, n' tha chizzle
takes place immediately.  Both tha \fI\-\-config\fR n' \fI\-\-live\fR flags may be
specified together if supported by tha hypervisor.
.Sp
If \fI\-\-current\fR is specified, affect tha current hommie state.
.Sp
When no flags is given, tha \fI\-\-live\fR
flag be assumed n' tha hommie domain must be active.  In dis thang it
is up ta tha hypervisor whether tha \fI\-\-config\fR flag be also assumed, and
therefore whether tha \s-1XML\s0 configuration be adjusted ta make tha chizzle
persistent.
.Sp
If \fI\-\-guest\fR is specified, then tha count of cpus is modified up in tha guest
instead of tha hypervisor. Shiiit, dis aint no joke. This flag is usable only fo' live domains
and may require hommie agent ta be configured up in tha guest.
.Sp
Da \fI\-\-maximum\fR flag controls tha maximum number of virtual cpus dat can
be hot-plugged tha next time tha domain is booted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  As such, it must only be
used wit tha \fI\-\-config\fR flag, n' not wit tha \fI\-\-live\fR flag.
.IP "\fBshutdown\fR \fIdomain\fR [\fI\-\-mode MODE-LIST\fR]" 4
.IX Item "shutdown domain [--mode MODE-LIST]"
Gracefully shuts down a thugged-out domain. I aint talkin' bout chicken n' gravy biatch.  This coordinates wit tha domain \s-1OS\s0
to big-ass up graceful shutdown, so there is no guarantee dat it will
succeed, n' may take a variable length of time dependin on what
skillz must be shutdown up in tha domain.
.Sp
Da exact behavior of a thugged-out domain when it shuts down is set by the
\&\fIon_shutdown\fR parameta up in tha domainz \s-1XML\s0 definition.
.Sp
If \fIdomain\fR is transient, then tha metadata of any snapshots will
be lost once tha hommie stops hustlin yo, but tha snapshot contents still
exist, n' a freshly smoked up domain wit tha same name n' \s-1UUID\s0 can restore the
snapshot metadata wit \fBsnapshot-create\fR.
.Sp
By default tha hypervisor will try ta pick a suitable shutdown
method. Y'all KNOW dat shit, muthafucka! To specify a alternatizzle method, tha \fI\-\-mode\fR parameter
can specify a cold-ass lil comma separated list which includes \f(CW\*(C`acpi\*(C'\fR, \f(CW\*(C`agent\*(C'\fR,
\&\f(CW\*(C`initctl\*(C'\fR n' \f(CW\*(C`signal\*(C'\fR. Da order up in which drivers will try each
mode is undefined, n' not related ta tha order specified ta virsh.
For strict control over ordering, bust a single mode at a time and
repeat tha command.
.IP "\fBstart\fR \fIdomain-name-or-uuid\fR [\fI\-\-console\fR] [\fI\-\-paused\fR] [\fI\-\-autodestroy\fR] [\fI\-\-bypass\-cache\fR] [\fI\-\-force\-boot\fR] [\fI\-\-pass\-fdz N,M,...\fR]" 4
.IX Item "start domain-name-or-uuid [--console] [--paused] [--autodestroy] [--bypass-cache] [--force-boot] [--pass-fdz N,M,...]"
Start a (previously defined) inactizzle domain, either from tha last
\&\fBmanagedsave\fR state, or via a gangbangin' fresh boot if no managedsave state is
present.  Da domain is ghon be paused if tha \fI\-\-paused\fR option is
used n' supported by tha driver; otherwise it is ghon be hustlin.
If \fI\-\-console\fR is requested, attach ta tha console afta creation.
If \fI\-\-autodestroy\fR is requested, then tha hommie is ghon be automatically
destroyed when virsh closes its connection ta libvirt, or otherwise
exits, n' you can put dat on yo' toast.  If \fI\-\-bypass\-cache\fR is specified, n' managedsave state exists,
the restore will avoid tha file system cache, although dis may slow
down tha operation. I aint talkin' bout chicken n' gravy biatch.  If \fI\-\-force\-boot\fR is specified, then any
managedsave state is discarded n' a gangbangin' fresh boot occurs.
.Sp
If \fI\-\-pass\-fds\fR is specified, tha argument be a cold-ass lil comma separated list
of open file descriptors which should be pass on tha fuck into tha guest. The
file descriptors is ghon be re-numered up in tha guest, startin from 3. This
is only supported wit container based virtualization.
.IP "\fBsuspend\fR \fIdomain\fR" 4
.IX Item "suspend domain"
Suspend a hustlin domain. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it is kept up in memory but won't be scheduled
anymore.
.IP "\fBresume\fR \fIdomain\fR" 4
.IX Item "resume domain"
Moves a thugged-out domain outta tha suspended state.  This will allow a previously
suspended domain ta now be eligible fo' schedulin by tha underlying
hypervisor.
.IP "\fBdompmsuspend\fR \fIdomain\fR \fItarget\fR [\fI\-\-duration\fR]" 4
.IX Item "dompmsuspend domain target [--duration]"
Suspend a hustlin domain tha fuck into one of these states (possible \fItarget\fR
values):
    mem equivallent of S3 \s-1ACPI\s0 state
    disk equivallent of S4 \s-1ACPI\s0 state
    hybrid \s-1RAM\s0 is saved ta disk but not powered off
.Sp
Da \fI\-\-duration\fR argument specifies number of secondz before tha domain is
woken up afta dat shiznit was suspended (see also \fBdompmwakeup\fR). Default is 0 for
unlimited suspend time. (This feature aint currently supported by any
hypervisor driver n' 0 should be used.).
.Sp
Note dat dis command requires a hommie agent configured n' hustlin up in the
domainz hommie \s-1OS.\s0
.Sp
Beware dat at least fo' \s-1QEMU,\s0 tha domainz process is ghon be terminated when
target disk is used n' a freshly smoked up process is ghon be launched when libvirt be asked
to raise up tha domain. I aint talkin' bout chicken n' gravy biatch fo' realz. As a result of this, any runtime chizzles, such as
device hotplug or memory settings, is lost unless such chizzlez was made
with \fI\-\-config\fR flag.
.IP "\fBdompmwakeup\fR \fIdomain\fR" 4
.IX Item "dompmwakeup domain"
Wakeup a thugged-out domain from pmsuspended state (either suspended by dompmsuspend or
from tha hommie itself). Injects a wakeup tha fuck into tha hommie dat is up in pmsuspended
state, rather than waitin fo' tha previously axed duration (if any) to
elapse. This operation don't not necessarily fail if tha domain is hustlin.
.IP "\fBttyconsole\fR \fIdomain\fR" 4
.IX Item "ttyconsole domain"
Output tha thang used fo' tha \s-1TTY\s0 console of tha domain. I aint talkin' bout chicken n' gravy biatch. If tha shiznit
is not available tha processes will provide a exit code of 1.
.IP "\fBundefine\fR \fIdomain\fR [\fI\-\-managed\-save\fR] [\fI\-\-snapshots\-metadata\fR] [ {\fI\-\-storage\fR \fBvolumes\fR | \fI\-\-remove\-all\-storage\fR} \fI\-\-wipe\-storage\fR]" 4
.IX Item "undefine domain [--managed-save] [--snapshots-metadata] [ {--storage volumes | --remove-all-storage} --wipe-storage]"
Undefine a thugged-out domain. I aint talkin' bout chicken n' gravy biatch. If tha domain is hustlin, dis converts it ta a
transient domain, without stoppin dat shit. If tha domain is inactive,
the domain configuration is removed.
.Sp
Da \fI\-\-managed\-save\fR flag guarantees dat any managed save image (see
the \fBmanagedsave\fR command) be also cleaned up.  Without tha flag, attempts
to undefine a thugged-out domain wit a managed save image will fail.
.Sp
Da \fI\-\-snapshots\-metadata\fR flag guarantees dat any snapshots (see the
\&\fBsnapshot-list\fR command) is also cleaned up when undefinin a inactive
domain. I aint talkin' bout chicken n' gravy biatch.  Without tha flag, attempts ta undefine a inactizzle domain with
snapshot metadata will fail.  If tha domain be active, dis flag is
ignored.
.Sp
Da \fI\-\-storage\fR flag takes a parameta \fBvolumes\fR, which be a cold-ass lil comma separated
list of volume target names or source pathz of storage volumes ta be removed
along wit tha undefined domain. I aint talkin' bout chicken n' gravy biatch. Volumes can be undefined n' thus removed only
on inactizzle domains. Volume deletion is only attempted afta tha domain is
undefined; if not all of tha axed volumes could be deleted, the
error message indicates what tha fuck still remains behind. Y'all KNOW dat shit, muthafucka! If a volume path is not
found up in tha domain definition, itz treated as if tha volume was successfully
deleted.
(See \fBdomblklist\fR fo' list of target names associated ta a thugged-out domain).
Example: \-\-storage vda,/path/to/storage.img
.Sp
Da \fI\-\-remove\-all\-storage\fR flag specifies dat all of tha domainz storage
volumes should be deleted.
.Sp
Da flag \fI\-\-wipe\-storage\fR specifies dat tha storage volumes should be
wiped before removal.
.Sp
\&\s-1NOTE:\s0 For a inactizzle domain, tha domain name or \s-1UUID\s0 must be used as the
\&\fIdomain\fR.
.IP "\fBvcpucount\fR \fIdomain\fR  [{\fI\-\-maximum\fR | \fI\-\-active\fR} {\fI\-\-config\fR | \fI\-\-live\fR | \fI\-\-current\fR}] [\fI\-\-guest\fR]" 4
.IX Item "vcpucount domain [{--maximum | --active} {--config | --live | --current}] [--guest]"
Print shiznit bout tha virtual cpu countz of tha given
\&\fIdomain\fR.  If no flags is specified, all possible counts are
listed up in a table; otherwise, tha output is limited ta just the
numeric value requested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For oldschool reasons, tha table
lists tha label \*(L"current\*(R" on tha rows dat can be queried up in isolation
via tha \fI\-\-active\fR flag, rather than relatin ta tha \fI\-\-current\fR flag.
.Sp
\&\fI\-\-maximum\fR requests shiznit on tha maximum cap of vcpus dat a
domain can add via \fBsetvcpus\fR, while \fI\-\-active\fR shows tha current
usage; these two flags cannot both be specified. Y'all KNOW dat shit, muthafucka!  \fI\-\-config\fR
requires a persistent domain n' requests shiznit regardin tha next
time tha domain is ghon be booted, \fI\-\-live\fR requires a hustlin domain and
lists current joints, n' \fI\-\-current\fR queries accordin ta tha current
state of tha domain (correspondin ta \fI\-\-live\fR if hustlin, or
\&\fI\-\-config\fR if inactive); these three flags is mutually exclusive.
.Sp
If \fI\-\-guest\fR is specified, then tha count of cpus is reported from
the perspectizzle of tha guest. This flag is usable only fo' live domains
and may require hommie agent ta be configured up in tha guest.
.IP "\fBvcpuinfo\fR \fIdomain\fR" 4
.IX Item "vcpuinfo domain"
Returns basic shiznit bout tha domain virtual CPUs, like tha number of
vCPUs, tha hustlin time, tha affinitizzle ta physical processors.
.IP "\fBvcpupin\fR \fIdomain\fR [\fIvcpu\fR] [\fIcpulist\fR] [[\fI\-\-live\fR] [\fI\-\-config\fR] | [\fI\-\-current\fR]]" 4
.IX Item "vcpupin domain [vcpu] [cpulist] [[--live] [--config] | [--current]]"
Query or chizzle tha pinnin of domain VCPUs ta host physical CPUs.  To
pin a single \fIvcpu\fR, specify \fIcpulist\fR; otherwise, you can query one
\&\fIvcpu\fR or omit \fIvcpu\fR ta list all at once.
.Sp
\&\fIcpulist\fR be a list of physical \s-1CPU\s0 numbers. Its syntax be a cold-ass lil comma
separated list n' a special markup rockin '\-' n' '^' (ex. '0\-4', '0\-3,^2') can
also be allowed. Y'all KNOW dat shit, muthafucka! Da '\-' denotes tha range n' tha '^' denotes exclusive.
If you wanna reset vcpupin setting, dat is, ta pin vcpu all physical cpus,
simply specify 'r' as a cold-ass lil cpulist.
If \fI\-\-live\fR is specified, affect a hustlin guest.
If \fI\-\-config\fR is specified, affect tha next boot of a persistent guest.
If \fI\-\-current\fR is specified, affect tha current hommie state.
Both \fI\-\-live\fR n' \fI\-\-config\fR flags may be given if \fIcpulist\fR is present,
but \fI\-\-current\fR is exclusive.
If no flag is specified, behavior is different dependin on hypervisor.
.Sp
\&\fBNote\fR: Da expression is sequentially evaluated, so \*(L"0\-15,^8\*(R" is
identical ta \*(L"9\-14,0\-7,15\*(R" but not identical ta \*(L"^8,0\-15\*(R".
.IP "\fBemulatorpin\fR \fIdomain\fR [\fIcpulist\fR] [[\fI\-\-live\fR] [\fI\-\-config\fR] | [\fI\-\-current\fR]]" 4
.IX Item "emulatorpin domain [cpulist] [[--live] [--config] | [--current]]"
Query or chizzle tha pinnin of domainz emulator threadz ta host physical
CPUs.
.Sp
See \fBvcpupin\fR fo' \fIcpulist\fR.
.Sp
If \fI\-\-live\fR is specified, affect a hustlin guest.
If \fI\-\-config\fR is specified, affect tha next boot of a persistent guest.
If \fI\-\-current\fR is specified, affect tha current hommie state.
Both \fI\-\-live\fR n' \fI\-\-config\fR flags may be given if \fIcpulist\fR is present,
but \fI\-\-current\fR is exclusive.
If no flag is specified, behavior is different dependin on hypervisor.
.IP "\fBvncdisplay\fR \fIdomain\fR" 4
.IX Item "vncdisplay domain"
Output tha \s-1IP\s0 address n' port number fo' tha \s-1VNC\s0 display. If tha shiznit
is not available tha processes will provide a exit code of 1.
.SH "DEVICE COMMANDS"
.IX Header "DEVICE COMMANDS"
Da followin commandz manipulate devices associated ta domains.
Da \fIdomain\fR can be specified as a gangbangin' finger-lickin' dirty-ass short integer, a name or a gangbangin' full \s-1UUID.\s0
To betta KNOW tha joints allowed as options fo' tha command
readin tha documentation at <http://libvirt.org/formatdomain.html> on the
format of tha thang sections ta git da most thugged-out accurate set of accepted joints.
.IP "\fBattach-device\fR \fIdomain\fR \fI\s-1FILE\s0\fR [[[\fI\-\-live\fR] [\fI\-\-config\fR] | [\fI\-\-current\fR]] | [\fI\-\-persistent\fR]]" 4
.IX Item "attach-device domain FILE [[[--live] [--config] | [--current]] | [--persistent]]"
Attach a thang ta tha domain, rockin a thang definizzle up in a \s-1XML\s0
file rockin a thang definizzle element like fuckin <disk> or <interface>
as tha top-level element.  See tha documentation at
<http://libvirt.org/formatdomain.html#elementsDevices> ta learn about
libvirt \s-1XML\s0 format fo' a thugged-out device.  If \fI\-\-config\fR is specified the
command altas tha persistent domain configuration wit tha device
attach takin effect tha next time libvirt starts tha domain.
For cdrom n' floppy devices, dis command only replaces tha media
within a existin device; consider rockin \fBupdate-device\fR fo' this
usage.  For passall up in host devices, peep also \fBnodedev-detach\fR,
needed if tha thang do not use managed mode.
.Sp
If \fI\-\-live\fR is specified, affect a hustlin domain.
If \fI\-\-config\fR is specified, affect tha next startup of a persistent domain.
If \fI\-\-current\fR is specified, affect tha current domain state.
Both \fI\-\-live\fR n' \fI\-\-config\fR flags may be given yo, but \fI\-\-current\fR is
exclusive. When no flag is specified legacy \s-1API\s0 is used whose behavior depends
on tha hypervisor driver.
.Sp
For compatibilitizzle purposes, \fI\-\-persistent\fR behaves like \fI\-\-config\fR for
an offline domain, n' like \fI\-\-live\fR \fI\-\-config\fR fo' a hustlin domain.
.Sp
\&\fBNote\fR: rockin of partial thang definizzle \s-1XML\s0 filez may lead ta unexpected
results as some fieldz may be autogenerated n' thus match devices other than
expected.
.IP "\fBattach-disk\fR \fIdomain\fR \fIsource\fR \fItarget\fR [[[\fI\-\-live\fR] [\fI\-\-config\fR] | [\fI\-\-current\fR]] | [\fI\-\-persistent\fR]] [\fI\-\-driver driver\fR] [\fI\-\-subdriver subdriver\fR] [\fI\-\-cache cache\fR] [\fI\-\-type type\fR] [\fI\-\-mode mode\fR] [\fI\-\-config\fR] [\fI\-\-sourcetype soucetype\fR] [\fI\-\-serial serial\fR] [\fI\-\-wwn wwn\fR] [\fI\-\-shareable\fR] [\fI\-\-rawio\fR] [\fI\-\-address address\fR] [\fI\-\-multifunction\fR] [\fI\-\-print\-xml\fR]" 4
.IX Item "attach-disk domain source target [[[--live] [--config] | [--current]] | [--persistent]] [--driver driver] [--subdriver subdriver] [--cache cache] [--type type] [--mode mode] [--config] [--sourcetype soucetype] [--serial serial] [--wwn wwn] [--shareable] [--rawio] [--address address] [--multifunction] [--print-xml]"
Attach a freshly smoked up disk thang ta tha domain.
\&\fIsource\fR is path fo' tha filez n' devices. \fItarget\fR controls tha bus or
device under which tha disk is exposed ta tha hommie \s-1OS.\s0 It indicates the
\&\*(L"logical\*(R" thang name.  \fIdriver\fR can be \fIfile\fR, \fItap\fR or \fIphy\fR fo' tha Xen
hypervisor dependin on tha kind of access; or \fIqemu\fR fo' tha \s-1QEMU\s0 emulator.
Further details ta tha driver can be passed rockin \fIsubdriver\fR. For Xen
\&\fIsubdriver\fR can be \fIaio\fR, while fo' \s-1QEMU\s0 subdriver should match tha format
of tha disk source, like fuckin \fIraw\fR or \fIqcow2\fR.  Hypervisor default will be
used if \fIsubdriver\fR aint specified. Y'all KNOW dat shit, muthafucka!  But fuck dat shiznit yo, tha word on tha street is dat tha default may not be
correct, esp. fo' \s-1QEMU\s0 as fo' securitizzle reasons it is configured not ta detect
disk formats, n' you can put dat on yo' toast.  \fItype\fR can indicate \fIlun\fR, \fIcdrom\fR or \fIfloppy\fR as
alternatizzle ta tha disk default, although dis use only replaces tha media
within tha existin virtual cdrom or floppy device; consider using
\&\fBupdate-device\fR fo' dis usage instead.
\&\fImode\fR can specify tha two specific mode \fIreadonly\fR or \fIshareable\fR.
\&\fIsourcetype\fR can indicate tha type of source (block|file)
\&\fIcache\fR can be one of \*(L"default\*(R", \*(L"none\*(R", \*(L"writethrough\*(R", \*(L"writeback\*(R",
\&\*(L"directsync\*(R" or \*(L"unsafe\*(R".
\&\fIserial\fR is tha serial of disk device. \fIwwn\fR is tha wwn of disk device.
\&\fIshareable\fR indicates tha disk thang is shareable between domains.
\&\fIrawio\fR indicates tha disk needz rawio capability.
\&\fIaddress\fR is tha address of disk thang up in tha form of pci:domain.bus.slot.function,
scsi:controller.bus.unit or ide:controller.bus.unit.
\&\fImultifunction\fR indicates specified pci address be a multifunction pci device
address.
.Sp
If \fI\-\-print\-xml\fR is specified, then tha \s-1XML\s0 of tha disk dat would be attached
is printed instead.
.Sp
If \fI\-\-live\fR is specified, affect a hustlin domain.
If \fI\-\-config\fR is specified, affect tha next startup of a persistent domain.
If \fI\-\-current\fR is specified, affect tha current domain state.
Both \fI\-\-live\fR n' \fI\-\-config\fR flags may be given yo, but \fI\-\-current\fR is
exclusive. When no flag is specified legacy \s-1API\s0 is used whose behavior depends
on tha hypervisor driver.
.Sp
For compatibilitizzle purposes, \fI\-\-persistent\fR behaves like \fI\-\-config\fR for
an offline domain, n' like \fI\-\-live\fR \fI\-\-config\fR fo' a hustlin domain.
.IP "\fBattach-interface\fR \fIdomain\fR \fItype\fR \fIsource\fR [[[\fI\-\-live\fR] [\fI\-\-config\fR] | [\fI\-\-current\fR]] | [\fI\-\-persistent\fR]] [\fI\-\-target target\fR] [\fI\-\-mac mac\fR] [\fI\-\-script script\fR] [\fI\-\-model model\fR] [\fI\-\-config\fR] [\fI\-\-inbound average,peak,burst\fR] [\fI\-\-outbound average,peak,burst\fR]" 4
.IX Item "attach-interface domain type source [[[--live] [--config] | [--current]] | [--persistent]] [--target target] [--mac mac] [--script script] [--model model] [--config] [--inbound average,peak,burst] [--outbound average,peak,burst]"
Attach a freshly smoked up network intercourse ta tha domain. I aint talkin' bout chicken n' gravy biatch.  \fItype\fR can be either \fInetwork\fR
to indicate a physical network thang or \fIbridge\fR ta indicate a funky-ass bridge ta a
device.  \fIsource\fR indicates tha source device.  \fItarget\fR allows ta indicate
the target thang up in tha guest. Names startin wit 'vnet' is considered as
auto-generated a hence blanked out.  \fImac\fR allows ta specify tha \s-1MAC\s0 address
of tha network intercourse.  \fIscript\fR allows ta specify a path ta a script
handlin a funky-ass bridge instead of tha default one.  \fImodel\fR allows ta specify the
model type.  \fIinbound\fR n' \fIoutbound\fR control tha bandwidth of tha intercourse.
\&\fIpeak\fR n' \fIburst\fR is optional, so \*(L"average,peak\*(R", \*(L"average,,burst\*(R" and
\&\*(L"average\*(R" is also legal.
.Sp
If \fI\-\-live\fR is specified, affect a hustlin domain.
If \fI\-\-config\fR is specified, affect tha next startup of a persistent domain.
If \fI\-\-current\fR is specified, affect tha current domain state.
Both \fI\-\-live\fR n' \fI\-\-config\fR flags may be given yo, but \fI\-\-current\fR is
exclusive. When no flag is specified legacy \s-1API\s0 is used whose behavior depends
on tha hypervisor driver.
.Sp
For compatibilitizzle purposes, \fI\-\-persistent\fR behaves like \fI\-\-config\fR for
an offline domain, n' like \fI\-\-live\fR \fI\-\-config\fR fo' a hustlin domain.
.Sp
\&\fBNote\fR: tha optionizzle target value is tha name of a thang ta be pimped
as tha back-end on tha node. If not provided a thang named \*(L"vnetN\*(R" or \*(L"vifN\*(R"
will be pimped automatically.
.IP "\fBdetach-device\fR \fIdomain\fR \fI\s-1FILE\s0\fR [[[\fI\-\-live\fR] [\fI\-\-config\fR] | [\fI\-\-current\fR]] | [\fI\-\-persistent\fR]]" 4
.IX Item "detach-device domain FILE [[[--live] [--config] | [--current]] | [--persistent]]"
Detach a thang from tha domain, takes tha same ol' dirty kind of \s-1XML\s0 descriptions
as command \fBattach-device\fR.
For passall up in host devices, peep also \fBnodedev-reattach\fR, needed if
the thang do not use managed mode.
.Sp
\&\fBNote\fR: rockin of partial thang definizzle \s-1XML\s0 filez may lead ta unexpected
results as some fieldz may be autogenerated n' thus match devices other than
expected.
.Sp
If \fI\-\-live\fR is specified, affect a hustlin domain.
If \fI\-\-config\fR is specified, affect tha next startup of a persistent domain.
If \fI\-\-current\fR is specified, affect tha current domain state.
Both \fI\-\-live\fR n' \fI\-\-config\fR flags may be given yo, but \fI\-\-current\fR is
exclusive. When no flag is specified legacy \s-1API\s0 is used whose behavior depends
on tha hypervisor driver.
.Sp
For compatibilitizzle purposes, \fI\-\-persistent\fR behaves like \fI\-\-config\fR for
an offline domain, n' like \fI\-\-live\fR \fI\-\-config\fR fo' a hustlin domain.
.Sp
Note dat olda versionz of virsh used \fI\-\-config\fR as a alias for
\&\fI\-\-persistent\fR.
.IP "\fBdetach-disk\fR \fIdomain\fR \fItarget\fR [[[\fI\-\-live\fR] [\fI\-\-config\fR] | [\fI\-\-current\fR]] | [\fI\-\-persistent\fR]]" 4
.IX Item "detach-disk domain target [[[--live] [--config] | [--current]] | [--persistent]]"
Detach a gangbangin' finger-lickin' disk thang from a thugged-out domain. I aint talkin' bout chicken n' gravy biatch. Da \fItarget\fR is tha thang as seen
from tha domain.
.Sp
If \fI\-\-live\fR is specified, affect a hustlin domain.
If \fI\-\-config\fR is specified, affect tha next startup of a persistent domain.
If \fI\-\-current\fR is specified, affect tha current domain state.
Both \fI\-\-live\fR n' \fI\-\-config\fR flags may be given yo, but \fI\-\-current\fR is
exclusive. When no flag is specified legacy \s-1API\s0 is used whose behavior depends
on tha hypervisor driver.
.Sp
For compatibilitizzle purposes, \fI\-\-persistent\fR behaves like \fI\-\-config\fR for
an offline domain, n' like \fI\-\-live\fR \fI\-\-config\fR fo' a hustlin domain.
.Sp
Note dat olda versionz of virsh used \fI\-\-config\fR as a alias for
\&\fI\-\-persistent\fR.
.IP "\fBdetach-interface\fR \fIdomain\fR \fItype\fR [\fI\-\-mac mac\fR] [[[\fI\-\-live\fR] [\fI\-\-config\fR] | [\fI\-\-current\fR]] | [\fI\-\-persistent\fR]]" 4
.IX Item "detach-interface domain type [--mac mac] [[[--live] [--config] | [--current]] | [--persistent]]"
Detach a network intercourse from a thugged-out domain.
\&\fItype\fR can be either \fInetwork\fR ta indicate a physical network thang or
\&\fIbridge\fR ta indicate a funky-ass bridge ta a thugged-out device. Well shiiiit, it is recommended ta use the
\&\fImac\fR option ta distinguish between tha intercourses if mo' than one are
present on tha domain.
.Sp
If \fI\-\-live\fR is specified, affect a hustlin domain.
If \fI\-\-config\fR is specified, affect tha next startup of a persistent domain.
If \fI\-\-current\fR is specified, affect tha current domain state.
Both \fI\-\-live\fR n' \fI\-\-config\fR flags may be given yo, but \fI\-\-current\fR is
exclusive. When no flag is specified legacy \s-1API\s0 is used whose behavior depends
on tha hypervisor driver.
.Sp
For compatibilitizzle purposes, \fI\-\-persistent\fR behaves like \fI\-\-config\fR for
an offline domain, n' like \fI\-\-live\fR \fI\-\-config\fR fo' a hustlin domain.
.Sp
Note dat olda versionz of virsh used \fI\-\-config\fR as a alias for
\&\fI\-\-persistent\fR.
.IP "\fBupdate-device\fR \fIdomain\fR \fIfile\fR [\fI\-\-force\fR] [[[\fI\-\-live\fR] [\fI\-\-config\fR] | [\fI\-\-current\fR]] | [\fI\-\-persistent\fR]]" 4
.IX Item "update-device domain file [--force] [[[--live] [--config] | [--current]] | [--persistent]]"
Update tha characteristics of a thang associated wit \fIdomain\fR,
based on tha thang definizzle up in a \s-1XML \s0\fIfile\fR.  Da \fI\-\-force\fR option
can be used ta force thang update, e.g., ta eject a CD-ROM even if it is
locked/mounted up in tha domain. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See tha documentation at
<http://libvirt.org/formatdomain.html#elementsDevices> ta learn about
libvirt \s-1XML\s0 format fo' a thugged-out device.
.Sp
If \fI\-\-live\fR is specified, affect a hustlin domain.
If \fI\-\-config\fR is specified, affect tha next startup of a persistent domain.
If \fI\-\-current\fR is specified, affect tha current domain state.
Both \fI\-\-live\fR n' \fI\-\-config\fR flags may be given yo, but \fI\-\-current\fR is
exclusive. Not specifyin any flag is tha same ol' dirty as specifyin \fI\-\-current\fR.
.Sp
For compatibilitizzle purposes, \fI\-\-persistent\fR behaves like \fI\-\-config\fR for
an offline domain, n' like \fI\-\-live\fR \fI\-\-config\fR fo' a hustlin domain.
.Sp
Note dat olda versionz of virsh used \fI\-\-config\fR as a alias for
\&\fI\-\-persistent\fR.
.Sp
\&\fBNote\fR: rockin of partial thang definizzle \s-1XML\s0 filez may lead ta unexpected
results as some fieldz may be autogenerated n' thus match devices other than
expected.
.IP "\fBchange-media\fR \fIdomain\fR \fIpath\fR [\fI\-\-eject\fR] [\fI\-\-insert\fR] [\fI\-\-update\fR] [\fIsource\fR] [\fI\-\-force\fR] [[\fI\-\-live\fR] [\fI\-\-config\fR] | [\fI\-\-current\fR]]" 4
.IX Item "change-media domain path [--eject] [--insert] [--update] [source] [--force] [[--live] [--config] | [--current]]"
Change media of \s-1CDROM\s0 or floppy drive. \fIpath\fR can be tha fully-qualified path
or tha unique target name (<target dev='hdc'>) of tha disk device. \fIsource\fR
specifies tha path of tha media ta be banged or updated.
.Sp
\&\fI\-\-eject\fR indicates tha media is ghon be ejected.
\&\fI\-\-insert\fR indicates tha media is ghon be inserted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. \fIsource\fR must be specified.
If tha thang has source (e.g. <source file='media'>), n' \fIsource\fR is not
specified, \fI\-\-update\fR is equal ta \fI\-\-eject\fR. If tha thang has no source,
and \fIsource\fR is specified, \fI\-\-update\fR is equal ta \fI\-\-insert\fR. If tha device
has source, n' \fIsource\fR is specified, \fI\-\-update\fR behaves like combination
of \fI\-\-eject\fR n' \fI\-\-insert\fR.
If none of \fI\-\-eject\fR, \fI\-\-insert\fR, n' \fI\-\-update\fR is specified, \fI\-\-update\fR
is used by default.
Da \fI\-\-force\fR option can be used ta force media changing.
If \fI\-\-live\fR is specified, alta live configuration of hustlin guest.
If \fI\-\-config\fR is specified, alta persistent configuration, effect observed
on next boot.
\&\fI\-\-current\fR can be either or both of \fIlive\fR n' \fIconfig\fR, dependz on
the hypervisorz implementation.
Both \fI\-\-live\fR n' \fI\-\-config\fR flags may be given yo, but \fI\-\-current\fR is
exclusive. If no flag is specified, behavior is different depending
on hypervisor.
.SH "NODEDEV COMMANDS"
.IX Header "NODEDEV COMMANDS"
Da followin commandz manipulate host devices dat is intended ta be
passed all up in ta hommie domains via <hostdev> elements up in a thugged-out domain's
<devices> section. I aint talkin' bout chicken n' gravy biatch.  A node thang key is generally specified by tha bus
name followed by its address, rockin underscores between all components,
like fuckin pci_0000_00_02_1, usb_1_5_3, or net_eth1_00_27_13_6a_fe_00.
Da \fBnodedev-list\fR gives tha full list of host devices dat is known
to libvirt, although dis includes devices dat cannot be assigned to
a hommie (for example, attemptin ta detach tha \s-1PCI\s0 thang dat controls
the hostz hard disk controlla where tha guestz disk images live could
cause tha host system ta lock up or reboot).
.PP
For mo' shiznit on node thang definizzle see:
<http://libvirt.org/formatnode.html>.
.PP
Passall up in devices cannot be simultaneously used by tha host n' its
guest domains, nor by multiple actizzle guests at once.  If the
<hostdev> description includes tha attribute \fBmanaged='yes'\fR, n' the
hypervisor driver supports it, then tha thang is up in managed mode, and
attempts ta use dat passall up in thang up in a actizzle hommie will
automatically behave as if \fBnodedev-detach\fR (guest start, device
hot-plug) n' \fBnodedev-reattach\fR (guest stop, thang hot-unplug) were
called all up in tha right points (currently, qemu do dis fo' \s-1PCI\s0 devices,
but not \s-1STD\s0).  If a thang aint marked as managed, then it must
manually be detached before guests can use it, n' manually reattached
to be moonwalked back ta tha host.  Also, if a thang is manually detached,
then tha host do not regain control of tha thang without a matching
reattach, even if tha guests use tha thang up in managed mode.
.IP "\fBnodedev-create\fR \fI\s-1FILE\s0\fR" 4
.IX Item "nodedev-create FILE"
Smoke a thang on tha host node dat can then be assigned ta virtual
machines. Normally, libvirt be able ta automatically determine which
host nodes is available fo' use yo, but dis allows registration of
host hardware dat libvirt did not automatically detect.  \fIfile\fR
gotz nuff xml fo' a top-level <device> description of a node device.
.IP "\fBnodedev-destroy\fR \fIdevice\fR" 4
.IX Item "nodedev-destroy device"
Destroy (stop) a thang on tha host. \fIdevice\fR can be either device
name or wwn pair up in \*(L"wwnn,wwpn\*(R" format (only works fo' \s-1HBA\s0). Note
that dis make libvirt quit managin a host device, n' may even make
that thang unusable by tha rest of tha physical host until a reboot.
.IP "\fBnodedev-detach\fR \fInodedev\fR [\fI\-\-driver backend_driver\fR]" 4
.IX Item "nodedev-detach nodedev [--driver backend_driver]"
Detach \fInodedev\fR from tha host, so dat it can safely be used by
guests via <hostdev> passall up in cause I gots dem finger-lickin' chickens wit tha siz-auce.  This is reversed with
\&\fBnodedev-reattach\fR, n' is done automatically fo' managed devices.
For compatibilitizzle purposes, dis command can also be spelled
\&\fBnodedev-dettach\fR.
.Sp
Different backend drivers expect tha thang ta be bound ta different
dummy devices. For example, \s-1QEMU\s0z \*(L"kvm\*(R" backend driver (the default)
expects tha thang ta be bound ta pci-stub yo, but its \*(L"vfio\*(R" backend
driver expects tha thang ta be bound ta vfio-pci. Da \fI\-\-driver\fR
parameta can be used ta specify tha desired backend driver.
.IP "\fBnodedev-dumpxml\fR \fIdevice\fR" 4
.IX Item "nodedev-dumpxml device"
Dump a <device> \s-1XML\s0 representation fo' tha given node device, including
such shiznit as tha thang name, which bus owns tha device, the
vendor n' thang id, n' any capabilitizzlez of tha thang usable by
libvirt (like fuckin whether thang reset is supported). \fIdevice\fR can
be either thang name or wwn pair up in \*(L"wwnn,wwpn\*(R" format (only works
for \s-1HBA\s0).
.IP "\fBnodedev-list\fR \fIcap\fR \fI\-\-tree\fR" 4
.IX Item "nodedev-list cap --tree"
List all of tha devices available on tha node dat is known by libvirt.
\&\fIcap\fR is used ta filta tha list by capabilitizzle types, tha types must be
separated by comma, e.g. \-\-cap pci,scsi, valid capabilitizzle types include
\&'system', 'pci', 'usb_device', 'usb', 'net', 'scsi_host', 'scsi_target',
\&'scsi', 'storage', 'fc_host', 'vports', 'scsi_generic'. If \fI\-\-tree\fR is
used, tha output is formatted up in a tree representin muthafathaz of each node.
\&\fIcap\fR n' \fI\-\-tree\fR is mutually exclusive.
.IP "\fBnodedev-reattach\fR \fInodedev\fR" 4
.IX Item "nodedev-reattach nodedev"
Declare dat \fInodedev\fR is no longer up in use by any guests, n' that
the host can resume aiiight use of tha device.  This is done
automatically fo' devices up in managed mode yo, but must be done explicitly
to match any explicit \fBnodedev-detach\fR.
.IP "\fBnodedev-reset\fR \fInodedev\fR" 4
.IX Item "nodedev-reset nodedev"
Trigger a thang reset fo' \fInodedev\fR, useful prior ta transferring
a node thang between hommie passall up in or tha host.  Libvirt will
often do dis action implicitly when required yo, but dis command
allows a explicit reset when needed.
.SH "VIRTUAL NETWORK COMMANDS"
.IX Header "VIRTUAL NETWORK COMMANDS"
Da followin commandz manipulate networks. Libvirt has tha capabilitizzle to
define virtual networks which can then be used by domains n' linked to
actual network devices. For mo' detailed shiznit bout dis feature
see tha documentation at <http://libvirt.org/formatnetwork.html> . Many
of tha commandz fo' virtual networks is similar ta tha ones used fo' domains,
but tha way ta name a virtual network is either by its name or \s-1UUID.\s0
.IP "\fBnet-autostart\fR \fInetwork\fR [\fI\-\-disable\fR]" 4
.IX Item "net-autostart network [--disable]"
Configure a virtual network ta be automatically started at boot.
Da \fI\-\-disable\fR option disable autostarting.
.IP "\fBnet-create\fR \fIfile\fR" 4
.IX Item "net-create file"
Smoke a transient (temporary) virtual network from an
\&\s-1XML \s0\fIfile\fR n' instantiate (start) tha network.
See tha documentation at <http://libvirt.org/formatnetwork.html>
to git a thugged-out description of tha \s-1XML\s0 network format used by libvirt.
.IP "\fBnet-define\fR \fIfile\fR" 4
.IX Item "net-define file"
Define a persistent virtual network from a \s-1XML \s0\fIfile\fR, tha network is just
defined but not instantiated (started).
.IP "\fBnet-destroy\fR \fInetwork\fR" 4
.IX Item "net-destroy network"
Destroy (stop) a given transient or persistent virtual network
specified by its name or \s-1UUID.\s0 This takes effect immediately.
.IP "\fBnet-dumpxml\fR \fInetwork\fR [\fI\-\-inactive\fR]" 4
.IX Item "net-dumpxml network [--inactive]"
Output tha virtual network shiznit as a \s-1XML\s0 dump ta stdout.
If \fI\-\-inactive\fR is specified, then physical functions is not
expanded tha fuck into they associated virtual functions.
.IP "\fBnet-edit\fR \fInetwork\fR" 4
.IX Item "net-edit network"
Edit tha \s-1XML\s0 configuration file fo' a network.
.Sp
This is equivalent to:
.Sp
.Vb 3
\& virsh net\-dumpxml \-\-inactizzle network > network.xml
\& vi network.xml (or make chizzlez wit yo' other text editor)
\& virsh net\-define network.xml
.Ve
.Sp
except dat it do some error checking.
.Sp
Da editor used can be supplied by tha \f(CW$VISUAL\fR or \f(CW$EDITOR\fR environment
variables, n' defaults ta \f(CW\*(C`vi\*(C'\fR.
.IP "\fBnet-info\fR \fInetwork\fR" 4
.IX Item "net-info network"
Returns basic shiznit bout tha \fInetwork\fR object.
.IP "\fBnet-list\fR [\fI\-\-inactive\fR | \fI\-\-all\fR] [\fI\-\-persistent\fR] [<\-\-transient>] [\fI\-\-autostart\fR] [<\-\-no\-autostart>]" 4
.IX Item "net-list [--inactizzle | --all] [--persistent] [<--transient>] [--autostart] [<--no-autostart>]"
Returns tha list of actizzle networks, if \fI\-\-all\fR is specified dis will also
include defined but inactizzle networks, if \fI\-\-inactive\fR is specified only the
inactizzle ones is ghon be listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Yo ass may also wanna filta tha returned networks
by \fI\-\-persistent\fR ta list tha persistent ones, \fI\-\-transient\fR ta list the
transient ones, \fI\-\-autostart\fR ta list tha ones wit autostart enabled, and
\&\fI\-\-no\-autostart\fR ta list tha ones wit autostart disabled.
.Sp
\&\s-1NOTE:\s0 When rappin' ta olda servers, dis command is forced ta bust a series of
\&\s-1API\s0 calls wit a inherent race, where a pool might not be listed or might appear
more than once if it chizzled state between calls while tha list was being
collected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Newer servers aint gots dis problem.
.IP "\fBnet-name\fR \fInetwork-UUID\fR" 4
.IX Item "net-name network-UUID"
Convert a network \s-1UUID\s0 ta network name.
.IP "\fBnet-start\fR \fInetwork\fR" 4
.IX Item "net-start network"
Start a (previously defined) inactizzle network.
.IP "\fBnet-undefine\fR \fInetwork\fR" 4
.IX Item "net-undefine network"
Undefine tha configuration fo' a inactizzle network.
.IP "\fBnet-uuid\fR \fInetwork-name\fR" 4
.IX Item "net-uuid network-name"
Convert a network name ta network \s-1UUID.\s0
.IP "\fBnet-update\fR \fInetwork\fR \fIcommand\fR \fIsection\fR \fIxml\fR [\fI\-\-parent\-index\fR \fIindex\fR] [[\fI\-\-live\fR] [\fI\-\-config\fR] | [\fI\-\-current\fR]]" 4
.IX Item "net-update network command section xml [--parent-index index] [[--live] [--config] | [--current]]"
Update tha given section of a existin network definition, wit the
changes optionally takin effect immediately, without needin to
destroy n' re-start tha network.
.Sp
\&\fIcommand\fR is one of \*(L"add-first\*(R", \*(L"add-last\*(R", \*(L"add\*(R" (a synonym for
add-last), \*(L"delete\*(R", or \*(L"modify\*(R".
.Sp
\&\fIsection\fR is one of \*(L"bridge\*(R", \*(L"domain\*(R", \*(L"ip\*(R", \*(L"ip-dhcp-host\*(R",
\&\*(L"ip-dhcp-range\*(R", \*(L"forward\*(R", \*(L"forward-interface\*(R", \*(L"forward-pf\*(R",
\&\*(L"portgroup\*(R", \*(L"dns-host\*(R", \*(L"dns-txt\*(R", or \*(L"dns-srv\*(R", each section being
named by a cold-ass lil concatenation of tha xml element hierarchy leadin ta the
element bein chizzled. Y'all KNOW dat shit, muthafucka! For example, \*(L"ip-dhcp-host\*(R" will chizzle a
<host> element dat is contained inside a <dhcp> element inside an
<ip> element of tha network.
.Sp
\&\fIxml\fR is either tha text of a cold-ass lil complete xml element of tha type being
changed (e.g. \*(L"<host mac=\*(R"00:11:22:33:44:55' ip='1.2.3.4'/>\*(L", or the
name of a gangbangin' file dat gotz nuff a cold-ass lil complete xml element. Disambiguation is
done by lookin all up in tha straight-up original gangsta characta of tha provided text \- if the
first characta is \*(R"<\*(L", it is xml text, if tha straight-up original gangsta characta is not
\&\*(R"<", it is tha name of a gangbangin' file dat gotz nuff tha xml text ta be used.
.Sp
Da \fI\-\-parent\-index\fR option is used ta specify which of several
parent elements tha axed element is up in (0\-based). For example, a
dhcp <host> element could be up in any one of multiple <ip> elements in
the network; if a parent-index aint provided, tha \*(L"most appropriate\*(R"
<ip> element is ghon be selected (usually tha only one dat already has a
<dhcp> element) yo, but if \fI\-\-parent\-index\fR is given, dat particular
instizzle of <ip> will git tha modification.
.Sp
If \fI\-\-live\fR is specified, affect a hustlin network.
If \fI\-\-config\fR is specified, affect tha next startup of a persistent network.
If \fI\-\-current\fR is specified, affect tha current network state.
Both \fI\-\-live\fR n' \fI\-\-config\fR flags may be given yo, but \fI\-\-current\fR is
exclusive. Not specifyin any flag is tha same ol' dirty as specifyin \fI\-\-current\fR.
.SH "INTERFACE COMMANDS"
.IX Header "INTERFACE COMMANDS"
Da followin commandz manipulate host intercourses.  Often, these host
interfaces can then be used by name within domain <interface> elements
(like fuckin a system-created bridge intercourse) yo, but there is no
requirement dat host intercourses be tied ta any particular guest
configuration \s-1XML\s0 at all.
.PP
Many of tha commandz fo' host intercourses is similar ta tha ones used
for domains, n' tha way ta name a intercourse is either by its name or
its \s-1MAC\s0 address.  But fuck dat shiznit yo, tha word on tha street is dat rockin a \s-1MAC\s0 address fo' a \fIiface\fR
argument only works when dat address is unique (if a intercourse n' a
bridge share tha same \s-1MAC\s0 address, which is often tha case, then using
that \s-1MAC\s0 address thangs up in dis biatch up in a error cuz of ambiguity, n' you must
resort ta a name instead).
.IP "\fBiface-bridge\fR \fIinterface\fR \fIbridge\fR [\fI\-\-no\-stp\fR] [\fIdelay\fR] [\fI\-\-no\-start\fR]" 4
.IX Item "iface-bridge intercourse bridge [--no-stp] [delay] [--no-start]"
Smoke a funky-ass bridge thang named \fIbridge\fR, n' attach tha existing
network thang \fIinterface\fR ta tha freshly smoked up bridge.  Da freshly smoked up bridge
defaults ta startin immediately, wit \s-1STP\s0 enabled n' a thugged-out delay of 0;
these settings can be altered wit \fI\-\-no\-stp\fR, \fI\-\-no\-start\fR, n' an
integer number of secondz fo' \fIdelay\fR fo' realz. All \s-1IP\s0 address configuration
of \fIinterface\fR is ghon be moved ta tha freshly smoked up bridge device.
.Sp
See also \fBiface-unbridge\fR fo' unfuckin wit dis operation.
.IP "\fBiface-define\fR \fIfile\fR" 4
.IX Item "iface-define file"
Define a host intercourse from a \s-1XML \s0\fIfile\fR, tha intercourse is just defined but
not started.
.IP "\fBiface-destroy\fR \fIinterface\fR" 4
.IX Item "iface-destroy intercourse"
Destroy (stop) a given host intercourse, like fuckin by hustlin \*(L"if-down\*(R" to
disable dat intercourse from actizzle use. This takes effect immediately.
.IP "\fBiface-dumpxml\fR \fIinterface\fR [\fI\-\-inactive\fR]" 4
.IX Item "iface-dumpxml intercourse [--inactive]"
Output tha host intercourse shiznit as a \s-1XML\s0 dump ta stdout.  If
\&\fI\-\-inactive\fR is specified, then tha output reflects tha persistent
state of tha intercourse dat is ghon be used tha next time it is started.
.IP "\fBiface-edit\fR \fIinterface\fR" 4
.IX Item "iface-edit intercourse"
Edit tha \s-1XML\s0 configuration file fo' a host intercourse.
.Sp
This is equivalent to:
.Sp
.Vb 3
\& virsh iface\-dumpxml iface > iface.xml
\& vi iface.xml (or make chizzlez wit yo' other text editor)
\& virsh iface\-define iface.xml
.Ve
.Sp
except dat it do some error checking.
.Sp
Da editor used can be supplied by tha \f(CW$VISUAL\fR or \f(CW$EDITOR\fR environment
variables, n' defaults ta \f(CW\*(C`vi\*(C'\fR.
.IP "\fBiface-list\fR [\fI\-\-inactive\fR | \fI\-\-all\fR]" 4
.IX Item "iface-list [--inactizzle | --all]"
Returns tha list of actizzle host intercourses.  If \fI\-\-all\fR is specified
this will also include defined but inactizzle intercourses.  If
\&\fI\-\-inactive\fR is specified only tha inactizzle ones is ghon be listed.
.IP "\fBiface-name\fR \fIinterface\fR" 4
.IX Item "iface-name intercourse"
Convert a host intercourse \s-1MAC\s0 ta intercourse name, if tha \s-1MAC\s0 address is unique
among tha hostz intercourses.
.Sp
\&\fIinterface\fR specifies tha intercourse \s-1MAC\s0 address.
.IP "\fBiface-mac\fR \fIinterface\fR" 4
.IX Item "iface-mac intercourse"
Convert a host intercourse name ta \s-1MAC\s0 address.
.Sp
\&\fIinterface\fR specifies tha intercourse name.
.IP "\fBiface-start\fR \fIinterface\fR" 4
.IX Item "iface-start intercourse"
Start a (previously defined) host intercourse, like fuckin by hustlin \*(L"if-up\*(R".
.IP "\fBiface-unbridge\fR \fIbridge\fR [\fI\-\-no\-start\fR]" 4
.IX Item "iface-unbridge bridge [--no-start]"
Tear down a funky-ass bridge thang named \fIbridge\fR, releasin its underlying
interface back ta aiiight usage, n' movin all \s-1IP\s0 address
configuration from tha bridge thang ta tha underlyin device.  The
underlyin intercourse is restarted unless \fI\-\-no\-start\fR is present;
this flag is present fo' symmetry yo, but generally not recommended.
.Sp
See also \fBiface-bridge\fR fo' bustin a funky-ass bridge.
.IP "\fBiface-undefine\fR \fIinterface\fR" 4
.IX Item "iface-undefine intercourse"
Undefine tha configuration fo' a inactizzle host intercourse.
.IP "\fBiface-begin\fR" 4
.IX Item "iface-begin"
Smoke a snapshot of current host intercourse settings, which can later
be committed (\fIiface-commit\fR) or restored (\fIiface-rollback\fR).  If a
snapshot already exists, then dis command will fail until the
previous snapshot has been committed or restored. Y'all KNOW dat shit, muthafucka!  Undefined behavior
results if any external chizzlez is made ta host intercourses outside of
the libvirt \s-1API\s0 between tha beginnin of a snapshot n' its eventual
commit or rollback.
.IP "\fBiface-commit\fR" 4
.IX Item "iface-commit"
Declare all chizzlez since tha last \fIiface-begin\fR as working, and
delete tha rollback point.  If no intercourse snapshot has already been
started, then dis command will fail.
.IP "\fBiface-rollback\fR" 4
.IX Item "iface-rollback"
Revert all host intercourse settings back ta tha state recorded up in the
last \fIiface-begin\fR.  If no intercourse snapshot has already been
started, then dis command will fail.  Rebootin tha host also serves
as a implicit rollback point.
.SH "STORAGE POOL COMMANDS"
.IX Header "STORAGE POOL COMMANDS"
Da followin commandz manipulate storage pools. Libvirt has the
capabilitizzle ta manage various storage solutions, includin files, raw
partitions, n' domain-specific formats, used ta provide tha storage
volumes visible as devices within virtual machines. For mo' detailed
information bout dis feature, peep tha documentation at
<http://libvirt.org/formatstorage.html> . Many of tha commandz for
pools is similar ta tha ones used fo' domains.
.IP "\fBfind-storage-pool-sources\fR \fItype\fR [\fIsrcSpec\fR]" 4
.IX Item "find-storage-pool-sources type [srcSpec]"
Returns \s-1XML\s0 describin all storage poolz of a given \fItype\fR dat could
be found. Y'all KNOW dat shit, muthafucka!  If \fIsrcSpec\fR is provided, it aint nuthin but a gangbangin' file dat gotz nuff \s-1XML\s0
to further restrict tha query fo' pools.
.IP "\fBfind-storage-pool-sources-as\fR \fItype\fR [\fIhost\fR] [\fIport\fR] [\fIinitiator\fR]" 4
.IX Item "find-storage-pool-sources-as type [host] [port] [initiator]"
Returns \s-1XML\s0 describin all storage poolz of a given \fItype\fR dat could
be found. Y'all KNOW dat shit, muthafucka!  If \fIhost\fR, \fIport\fR, or \fIinitiator\fR is provided, they control
where tha query is performed.
.IP "\fBpool-autostart\fR \fIpool-or-uuid\fR [\fI\-\-disable\fR]" 4
.IX Item "pool-autostart pool-or-uuid [--disable]"
Configure whether \fIpool\fR should automatically start at boot.
.IP "\fBpool-build\fR \fIpool-or-uuid\fR [\fI\-\-overwrite\fR] [\fI\-\-no\-overwrite\fR]" 4
.IX Item "pool-build pool-or-uuid [--overwrite] [--no-overwrite]"
Build a given pool.
.Sp
Options \fI\-\-overwrite\fR n' \fI\-\-no\-overwrite\fR can only be used for
\&\fBpool-build\fR a gangbangin' filesystem pool. If neither of dem is specified,
\&\fBpool-build\fR on a gangbangin' filesystem pool only make tha directory; If
\&\fI\-\-no\-overwrite\fR is specified, it probes ta determine if a
filesystem already exists on tha target device, returnin a error
if exists, or rockin mkfs ta format tha target thang if not; If
\&\fI\-\-overwrite\fR is specified, mkfs be always executed, any existed
data on tha target thang is overwritten unconditionally.
.IP "\fBpool-create\fR \fIfile\fR" 4
.IX Item "pool-create file"
Smoke n' start a pool object from tha \s-1XML \s0\fIfile\fR.
.IP "\fBpool-create-as\fR \fIname\fR \fI\-\-print\-xml\fR \fItype\fR [\fIsource-host\fR] [\fIsource-path\fR] [\fIsource-dev\fR] [\fIsource-name\fR] [<target>] [\fI\-\-source\-format format\fR]" 4
.IX Item "pool-create-as name --print-xml type [source-host] [source-path] [source-dev] [source-name] [<target>] [--source-format format]"
Smoke n' start a pool object \fIname\fR from tha raw parameters.  If
\&\fI\-\-print\-xml\fR is specified, then print tha \s-1XML\s0 of tha pool object
without bustin tha pool.  Otherwise, tha pool has tha specified
\&\fItype\fR.
.IP "\fBpool-define\fR \fIfile\fR" 4
.IX Item "pool-define file"
Create yo, but do not start, a pool object from tha \s-1XML \s0\fIfile\fR.
.IP "\fBpool-define-as\fR \fIname\fR \fI\-\-print\-xml\fR \fItype\fR [\fIsource-host\fR] [\fIsource-path\fR] [\fIsource-dev\fR] [\fIsource-name\fR] [<target>] [\fI\-\-source\-format format\fR]" 4
.IX Item "pool-define-as name --print-xml type [source-host] [source-path] [source-dev] [source-name] [<target>] [--source-format format]"
Create yo, but do not start, a pool object \fIname\fR from tha raw parameters.  If
\&\fI\-\-print\-xml\fR is specified, then print tha \s-1XML\s0 of tha pool object
without definin tha pool.  Otherwise, tha pool has tha specified
\&\fItype\fR.
.IP "\fBpool-destroy\fR \fIpool-or-uuid\fR" 4
.IX Item "pool-destroy pool-or-uuid"
Destroy (stop) a given \fIpool\fR object. Libvirt will no longer manage the
storage busted lyrics bout by tha pool object yo, but tha raw data contained in
the pool aint chizzled, n' can be lata recovered with
\&\fBpool-create\fR.
.IP "\fBpool-delete\fR \fIpool-or-uuid\fR" 4
.IX Item "pool-delete pool-or-uuid"
Destroy tha resources used by a given \fIpool\fR object. This operation
is non-recoverable.  Da \fIpool\fR object will still exist afta this
command, locked n loaded fo' tha creation of freshly smoked up storage volumes.
.IP "\fBpool-dumpxml\fR [\fI\-\-inactive\fR] \fIpool-or-uuid\fR" 4
.IX Item "pool-dumpxml [--inactive] pool-or-uuid"
Returns tha \s-1XML\s0 shiznit bout tha \fIpool\fR object.
\&\fI\-\-inactive\fR  drops some lyrics ta virsh ta dump pool configuration dat is ghon be used
on next start of tha pool as opposed ta tha current pool configuration.
.IP "\fBpool-edit\fR \fIpool-or-uuid\fR" 4
.IX Item "pool-edit pool-or-uuid"
Edit tha \s-1XML\s0 configuration file fo' a storage pool.
.Sp
This is equivalent to:
.Sp
.Vb 3
\& virsh pool\-dumpxml pool > pool.xml
\& vi pool.xml (or make chizzlez wit yo' other text editor)
\& virsh pool\-define pool.xml
.Ve
.Sp
except dat it do some error checking.
.Sp
Da editor used can be supplied by tha \f(CW$VISUAL\fR or \f(CW$EDITOR\fR environment
variables, n' defaults ta \f(CW\*(C`vi\*(C'\fR.
.IP "\fBpool-info\fR \fIpool-or-uuid\fR" 4
.IX Item "pool-info pool-or-uuid"
Returns basic shiznit bout tha \fIpool\fR object.
.IP "\fBpool-list\fR [\fI\-\-inactive\fR] [\fI\-\-all\fR] [\fI\-\-persistent\fR] [\fI\-\-transient\fR] [\fI\-\-autostart\fR] [\fI\-\-no\-autostart\fR] [[\fI\-\-details\fR] [<type>]" 4
.IX Item "pool-list [--inactive] [--all] [--persistent] [--transient] [--autostart] [--no-autostart] [[--details] [<type>]"
List pool objects known ta libvirt.  By default, only actizzle pools
are listed; \fI\-\-inactive\fR lists just tha inactizzle pools, n' \fI\-\-all\fR
lists all pools.
.Sp
In addition, there be nuff muthafuckin setz of filterin flags. \fI\-\-persistent\fR is to
list tha persistent pools, \fI\-\-transient\fR is ta list tha transient pools.
\&\fI\-\-autostart\fR lists tha autostartin pools, \fI\-\-no\-autostart\fR lists tha pools
with autostartin disabled.
.Sp
Yo ass may also wanna list pools wit specified types rockin \fItype\fR, the
pool types must be separated by comma, e.g. \-\-type dir,disk. Da valid pool
types include 'dir', 'fs', 'netfs', 'logical', 'disk', 'iscsi', 'scsi',
\&'mpath', 'rbd', n' 'sheepdog'.
.Sp
Da \fI\-\-details\fR option instructs virsh ta additionally
display pool persistence n' capacitizzle related shiznit where available.
.Sp
\&\s-1NOTE:\s0 When rappin' ta olda servers, dis command is forced ta bust a series of
\&\s-1API\s0 calls wit a inherent race, where a pool might not be listed or might appear
more than once if it chizzled state between calls while tha list was being
collected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Newer servers aint gots dis problem.
.IP "\fBpool-name\fR \fIuuid\fR" 4
.IX Item "pool-name uuid"
Convert tha \fIuuid\fR ta a pool name.
.IP "\fBpool-refresh\fR \fIpool-or-uuid\fR" 4
.IX Item "pool-refresh pool-or-uuid"
Refresh tha list of volumes contained up in \fIpool\fR.
.IP "\fBpool-start\fR \fIpool-or-uuid\fR" 4
.IX Item "pool-start pool-or-uuid"
Start tha storage \fIpool\fR, which is previously defined but inactive.
.IP "\fBpool-undefine\fR \fIpool-or-uuid\fR" 4
.IX Item "pool-undefine pool-or-uuid"
Undefine tha configuration fo' a inactizzle \fIpool\fR.
.IP "\fBpool-uuid\fR \fIpool\fR" 4
.IX Item "pool-uuid pool"
Returns tha \s-1UUID\s0 of tha named \fIpool\fR.
.SH "VOLUME COMMANDS"
.IX Header "VOLUME COMMANDS"
.IP "\fBvol-create\fR \fIpool-or-uuid\fR \fI\s-1FILE\s0\fR [\fI\-\-prealloc\-metadata\fR]" 4
.IX Item "vol-create pool-or-uuid FILE [--prealloc-metadata]"
Smoke a volume from a \s-1XML\s0 <file>.
\&\fIpool-or-uuid\fR is tha name or \s-1UUID\s0 of tha storage pool ta create tha volume in.
\&\fI\s-1FILE\s0\fR is tha \s-1XML\s0 <file> wit tha volume definition. I aint talkin' bout chicken n' gravy biatch fo' realz. An easy as fuck  way ta create the
\&\s-1XML\s0 <file> is ta use tha \fBvol-dumpxml\fR command ta obtain tha definizzle of a
pre-existin volume.
[\fI\-\-prealloc\-metadata\fR] preallocate metadata (for qcow2 images which don't
support full allocation). This option creates a sparse image file wit metadata,
resultin up in higher performizzle compared ta images wit no preallocation and
only slightly higher initial disk space usage.
.Sp
\&\fBExample\fR
.Sp
.Vb 3
\& virsh vol\-dumpxml \-\-pool storagepool1 appvolume1 > newvolume.xml
\& vi newvolume.xml (or make chizzlez wit yo' other text editor)
\& virsh vol\-create differentstoragepool newvolume.xml
.Ve
.IP "\fBvol-create-from\fR \fIpool-or-uuid\fR \fI\s-1FILE\s0\fR [\fI\-\-inputpool\fR \fIpool-or-uuid\fR] \fIvol-name-or-key-or-path\fR [\fI\-\-prealloc\-metadata\fR]" 4
.IX Item "vol-create-from pool-or-uuid FILE [--inputpool pool-or-uuid] vol-name-or-key-or-path [--prealloc-metadata]"
Smoke a volume, rockin another volume as input.
\&\fIpool-or-uuid\fR is tha name or \s-1UUID\s0 of tha storage pool ta create tha volume in.
\&\fI\s-1FILE\s0\fR is tha \s-1XML\s0 <file> wit tha volume definition.
\&\fI\-\-inputpool\fR \fIpool-or-uuid\fR is tha name or uuid of tha storage pool the
source volume is in.
\&\fIvol-name-or-key-or-path\fR is tha name or key or path of tha source volume.
[\fI\-\-prealloc\-metadata\fR] preallocate metadata (for qcow2 images which don't
support full allocation). This option creates a sparse image file wit metadata,
resultin up in higher performizzle compared ta images wit no preallocation and
only slightly higher initial disk space usage.
.IP "\fBvol-create-as\fR \fIpool-or-uuid\fR \fIname\fR \fIcapacity\fR [\fI\-\-allocation\fR \fIsize\fR] [\fI\-\-format\fR \fIstring\fR] [\fI\-\-backing\-vol\fR \fIvol-name-or-key-or-path\fR] [\fI\-\-backing\-vol\-format\fR \fIstring\fR] [\fI\-\-prealloc\-metadata\fR]" 4
.IX Item "vol-create-as pool-or-uuid name capacitizzle [--allocation size] [--format string] [--backing-vol vol-name-or-key-or-path] [--backing-vol-format string] [--prealloc-metadata]"
Smoke a volume from a set of arguments.
\&\fIpool-or-uuid\fR is tha name or \s-1UUID\s0 of tha storage pool ta create tha volume
in.
\&\fIname\fR is tha name of tha freshly smoked up volume.
\&\fIcapacity\fR is tha size of tha volume ta be pimped, as a scaled integer
(see \fB\s-1NOTES\s0\fR above), defaultin ta bytes if there is no suffix.
\&\fI\-\-allocation\fR \fIsize\fR is tha initial size ta be allocated up in tha volume,
also as a scaled integer defaultin ta bytes.
\&\fI\-\-format\fR \fIstring\fR is used up in file based storage pools ta specify tha volume
file format ta use; raw, bochs, qcow, qcow2, vmdk, qed.
\&\fI\-\-backing\-vol\fR \fIvol-name-or-key-or-path\fR is tha source backing
volume ta be used if takin a snapshot of a existin volume.
\&\fI\-\-backing\-vol\-format\fR \fIstring\fR is tha format of tha snapshot backin volume;
raw, bochs, qcow, qcow2, qed, vmdk, host_device. These are, however, meant for
file based storage pools.
[\fI\-\-prealloc\-metadata\fR] preallocate metadata (for qcow2 images which don't
support full allocation). This option creates a sparse image file wit metadata,
resultin up in higher performizzle compared ta images wit no preallocation and
only slightly higher initial disk space usage.
.IP "\fBvol-clone\fR [\fI\-\-pool\fR \fIpool-or-uuid\fR] \fIvol-name-or-key-or-path\fR \fIname\fR [\fI\-\-prealloc\-metadata\fR]" 4
.IX Item "vol-clone [--pool pool-or-uuid] vol-name-or-key-or-path name [--prealloc-metadata]"
Clone a existin volume.  Less powerful yo, but easier ta type, version of
\&\fBvol-create-from\fR.
\&\fI\-\-pool\fR \fIpool-or-uuid\fR is tha name or \s-1UUID\s0 of tha storage pool ta create
the volume in.
\&\fIvol-name-or-key-or-path\fR is tha name or key or path of tha source volume.
\&\fIname\fR is tha name of tha freshly smoked up volume.
[\fI\-\-prealloc\-metadata\fR] preallocate metadata (for qcow2 images which don't
support full allocation). This option creates a sparse image file wit metadata,
resultin up in higher performizzle compared ta images wit no preallocation and
only slightly higher initial disk space usage.
.IP "\fBvol-delete\fR [\fI\-\-pool\fR \fIpool-or-uuid\fR] \fIvol-name-or-key-or-path\fR" 4
.IX Item "vol-delete [--pool pool-or-uuid] vol-name-or-key-or-path"
Delete a given volume.
\&\fI\-\-pool\fR \fIpool-or-uuid\fR is tha name or \s-1UUID\s0 of tha storage pool tha volume
is in.
\&\fIvol-name-or-key-or-path\fR is tha name or key or path of tha volume ta delete.
.IP "\fBvol-upload\fR [\fI\-\-pool\fR \fIpool-or-uuid\fR] [\fI\-\-offset\fR \fIbytes\fR] [\fI\-\-length\fR \fIbytes\fR] \fIvol-name-or-key-or-path\fR \fIlocal-file\fR" 4
.IX Item "vol-upload [--pool pool-or-uuid] [--offset bytes] [--length bytes] vol-name-or-key-or-path local-file"
Upload tha contentz of \fIlocal-file\fR ta a storage volume.
\&\fI\-\-pool\fR \fIpool-or-uuid\fR is tha name or \s-1UUID\s0 of tha storage pool tha volume
is in.
\&\fIvol-name-or-key-or-path\fR is tha name or key or path of tha volume where the
file is ghon be uploaded.
\&\fI\-\-offset\fR is tha posizzle up in tha storage volume at which ta start writing
the data. \fI\-\-length\fR be a upper bound of tha amount of data ta be uploaded.
An error will occur if tha \fIlocal-file\fR is pimped outa than tha specified length.
.IP "\fBvol-download\fR [\fI\-\-pool\fR \fIpool-or-uuid\fR] [\fI\-\-offset\fR \fIbytes\fR] [\fI\-\-length\fR \fIbytes\fR] \fIvol-name-or-key-or-path\fR \fIlocal-file\fR" 4
.IX Item "vol-downlizzle [--pool pool-or-uuid] [--offset bytes] [--length bytes] vol-name-or-key-or-path local-file"
Downlizzle tha contentz of a storage volume ta \fIlocal-file\fR.
\&\fI\-\-pool\fR \fIpool-or-uuid\fR is tha name or \s-1UUID\s0 of tha storage pool tha volume
is in.
\&\fIvol-name-or-key-or-path\fR is tha name or key or path of tha volume ta download.
\&\fI\-\-offset\fR is tha posizzle up in tha storage volume at which ta start reading
the data. \fI\-\-length\fR be a upper bound of tha amount of data ta be downloaded.
.IP "\fBvol-wipe\fR [\fI\-\-pool\fR \fIpool-or-uuid\fR] [\fI\-\-algorithm\fR \fIalgorithm\fR] \fIvol-name-or-key-or-path\fR" 4
.IX Item "vol-wipe [--pool pool-or-uuid] [--algorithm algorithm] vol-name-or-key-or-path"
Wipe a volume, ensure data previously on tha volume aint accessible to
future reads. \fI\-\-pool\fR \fIpool-or-uuid\fR is tha name or \s-1UUID\s0 of tha storage
pool tha volume is in.
\&\fIvol-name-or-key-or-path\fR is tha name or key or path of tha volume ta wipe.
It be possible ta chizzle different wipin algorithms instead of re-writing
volume wit zeroes. This can be done via \fI\-\-algorithm\fR switch.
.Sp
\&\fBSupported algorithms\fR
  zero       \- 1\-pass all zeroes
  nnsa       \- 4\-pass \s-1NNSA\s0 Policy Letta \s-1NAP\-14.1\-C \s0(\s-1XVI\-8\s0) for
               sanitizin removable n' non-removable hard disks:
               random x2, 0x00, verify.
  dod        \- 4\-pass DoD 5220.22\-M section 8\-306 procedure for
               sanitizin removeable n' non-removeable rigid
               disks: random, 0x00, 0xff, verify.
  bsi        \- 9\-pass method recommended by tha German Centa of
               Securitizzle up in Hype Technologies
               (http://www.bsi.bund.de): 0xff, 0xfe, 0xfd, 0xfb,
               0xf7, 0xef, 0xdf, 0xbf, 0x7f.
  gutmann    \- Da canonical 35\-pass sequence busted lyrics bout in
               Gutmannz paper.
  schneier   \- 7\-pass method busted lyrics bout by Bruce Schneier in
               \*(L"Applied Cryptography\*(R" (1996): 0x00, 0xff,
               random x5.
  pfitzner7  \- Roy Pfitznerz 7\-random\-pass method: random x7.
  pfitzner33 \- Roy Pfitznerz 33\-random\-pass method: random x33.
  random     \- 1\-pass pattern: random.
.Sp
\&\fBNote\fR: Da availabilitizzle of algorithms may be limited by tha version
of tha \f(CW\*(C`scrub\*(C'\fR binary installed on tha host.
.IP "\fBvol-dumpxml\fR [\fI\-\-pool\fR \fIpool-or-uuid\fR] \fIvol-name-or-key-or-path\fR" 4
.IX Item "vol-dumpxml [--pool pool-or-uuid] vol-name-or-key-or-path"
Output tha volume shiznit as a \s-1XML\s0 dump ta stdout.
\&\fI\-\-pool\fR \fIpool-or-uuid\fR is tha name or \s-1UUID\s0 of tha storage pool tha volume
is in. I aint talkin' bout chicken n' gravy biatch. \fIvol-name-or-key-or-path\fR is tha name or key or path of tha volume
to output tha \s-1XML\s0 of.
.IP "\fBvol-info\fR [\fI\-\-pool\fR \fIpool-or-uuid\fR] \fIvol-name-or-key-or-path\fR" 4
.IX Item "vol-info [--pool pool-or-uuid] vol-name-or-key-or-path"
Returns basic shiznit bout tha given storage volume.
\&\fI\-\-pool\fR \fIpool-or-uuid\fR is tha name or \s-1UUID\s0 of tha storage pool tha volume
is in. I aint talkin' bout chicken n' gravy biatch. \fIvol-name-or-key-or-path\fR is tha name or key or path of tha volume
to return shiznit for.
.IP "\fBvol-list\fR [\fI\-\-pool\fR \fIpool-or-uuid\fR] [\fI\-\-details\fR]" 4
.IX Item "vol-list [--pool pool-or-uuid] [--details]"
Return tha list of volumes up in tha given storage pool.
\&\fI\-\-pool\fR \fIpool-or-uuid\fR is tha name or \s-1UUID\s0 of tha storage pool.
Da \fI\-\-details\fR option instructs virsh ta additionally display volume
type n' capacitizzle related shiznit where available.
.IP "\fBvol-pool\fR [\fI\-\-uuid\fR] \fIvol-key-or-path\fR" 4
.IX Item "vol-pool [--uuid] vol-key-or-path"
Return tha pool name or \s-1UUID\s0 fo' a given volume. By default, tha pool name is
returned. Y'all KNOW dat shit, muthafucka! If tha \fI\-\-uuid\fR option is given, tha pool \s-1UUID\s0 is returned instead.
\&\fIvol-key-or-path\fR is tha key or path of tha volume ta return tha pool
information for.
.IP "\fBvol-path\fR [\fI\-\-pool\fR \fIpool-or-uuid\fR] \fIvol-name-or-key\fR" 4
.IX Item "vol-path [--pool pool-or-uuid] vol-name-or-key"
Return tha path fo' a given volume.
\&\fI\-\-pool\fR \fIpool-or-uuid\fR is tha name or \s-1UUID\s0 of tha storage pool tha volume
is in.
\&\fIvol-name-or-key\fR is tha name or key of tha volume ta return tha path for.
.IP "\fBvol-name\fR \fIvol-key-or-path\fR" 4
.IX Item "vol-name vol-key-or-path"
Return tha name fo' a given volume.
\&\fIvol-key-or-path\fR is tha key or path of tha volume ta return tha name for.
.IP "\fBvol-key\fR [\fI\-\-pool\fR \fIpool-or-uuid\fR] \fIvol-name-or-path\fR" 4
.IX Item "vol-key [--pool pool-or-uuid] vol-name-or-path"
Return tha volume key fo' a given volume.
\&\fI\-\-pool\fR \fIpool-or-uuid\fR is tha name or \s-1UUID\s0 of tha storage pool tha volume
is in. I aint talkin' bout chicken n' gravy biatch. \fIvol-name-or-path\fR is tha name or path of tha volume ta return the
volume key for.
.IP "\fBvol-resize\fR [\fI\-\-pool\fR \fIpool-or-uuid\fR] \fIvol-name-or-path\fR \fIpool-or-uuid\fR \fIcapacity\fR [\fI\-\-allocate\fR] [\fI\-\-delta\fR] [\fI\-\-shrink\fR]" 4
.IX Item "vol-resize [--pool pool-or-uuid] vol-name-or-path pool-or-uuid capacitizzle [--allocate] [--delta] [--shrink]"
Resize tha capacitizzle of tha given volume, up in bytes.
\&\fI\-\-pool\fR \fIpool-or-uuid\fR is tha name or \s-1UUID\s0 of tha storage pool tha volume
is in. I aint talkin' bout chicken n' gravy biatch. \fIvol-name-or-key-or-path\fR is tha name or key or path of tha volume
to resize.  Da freshly smoked up capacitizzle might be sparse unless \fI\-\-allocate\fR is
specified. Y'all KNOW dat shit, muthafucka!  Normally, \fIcapacity\fR is tha freshly smoked up size yo, but if \fI\-\-delta\fR
is present, then it be added ta tha existin size.  Attempts ta shrink
the volume will fail unless \fI\-\-shrink\fR is present; \fIcapacity\fR cannot
be wack unless \fI\-\-shrink\fR is provided yo, but a wack sign is not
necessary. \fIcapacity\fR be a scaled integer (see \fB\s-1NOTES\s0\fR above), which
defaults ta bytes if there is no suffix.  This command is only safe
for storage volumes not up in use by a actizzle guest; peep also
\&\fBblockresize\fR fo' live resizing.
.SH "SECRET COMMMANDS"
.IX Header "SECRET COMMMANDS"
Da followin commandz manipulate \*(L"secrets\*(R" (e.g. passwords, passphrases and
encryption keys).  Libvirt can store secrets independently from they use, and
other objects (e.g. volumes or domains) can refer ta tha secrets fo' encryption
or possibly other uses.  Secrets is identified rockin a \s-1UUID. \s0 See
<http://libvirt.org/formatsecret.html> fo' documentation of tha \s-1XML\s0 format
used ta represent propertizzlez of secrets.
.IP "\fBsecret-define\fR \fIfile\fR" 4
.IX Item "secret-define file"
Smoke a secret wit tha propertizzles specified up in \fIfile\fR, wit no associated
secret value.  If \fIfile\fR do not specify a \s-1UUID,\s0 chizzle one automatically.
If \fIfile\fR specifies a \s-1UUID\s0 of a existin secret, replace its propertizzles by
propertizzles defined up in \fIfile\fR, without affectin tha secret value.
.IP "\fBsecret-dumpxml\fR \fIsecret\fR" 4
.IX Item "secret-dumpxml secret"
Output propertizzlez of \fIsecret\fR (specified by its \s-1UUID\s0) as a \s-1XML\s0 dump ta stdout.
.IP "\fBsecret-set-value\fR \fIsecret\fR \fIbase64\fR" 4
.IX Item "secret-set-value secret base64"
Set tha value associated wit \fIsecret\fR (specified by its \s-1UUID\s0) ta tha value
Base64\-encoded value \fIbase64\fR.
.IP "\fBsecret-get-value\fR \fIsecret\fR" 4
.IX Item "secret-get-value secret"
Output tha value associated wit \fIsecret\fR (specified by its \s-1UUID\s0) ta stdout,
encoded rockin Base64.
.IP "\fBsecret-undefine\fR \fIsecret\fR" 4
.IX Item "secret-undefine secret"
Delete a \fIsecret\fR (specified by its \s-1UUID\s0), includin tha associated value, if
any.
.IP "\fBsecret-list\fR [\fI\-\-ephemeral\fR] [\fI\-\-no\-ephemeral\fR] [\fI\-\-private\fR] [\fI\-\-no\-private\fR]" 4
.IX Item "secret-list [--ephemeral] [--no-ephemeral] [--private] [--no-private]"
Returns tha list of secrets, n' you can put dat on yo' toast. Yo ass may also wanna filta tha returned secrets
by \fI\-\-ephemeral\fR ta list tha ephemeral ones, \fI\-\-no\-ephemeral\fR ta list the
non-ephemeral ones, \fI\-\-private\fR ta list tha private ones, and
\&\fI\-\-no\-private\fR ta list tha non-private ones.
.SH "SNAPSHOT COMMMANDS"
.IX Header "SNAPSHOT COMMMANDS"
Da followin commandz manipulate domain snapshots, n' you can put dat on yo' toast.  Snapshots take the
disk, memory, n' thang state of a thugged-out domain at a point-of-time, n' save it
for future use.  They have nuff uses, from savin a \*(L"clean\*(R" copy of a \s-1OS\s0
image ta savin a thugged-out domainz state before a potentially destructizzle operation.
Snapshots is identified wit a unique name.  See
<http://libvirt.org/formatsnapshot.html> fo' documentation of tha \s-1XML\s0 format
used ta represent propertizzlez of snapshots.
.IP "\fBsnapshot-create\fR \fIdomain\fR [\fIxmlfile\fR] {[\fI\-\-redefine\fR [\fI\-\-current\fR]] | [\fI\-\-no\-metadata\fR] [\fI\-\-halt\fR] [\fI\-\-disk\-only\fR] [\fI\-\-reuse\-external\fR] [\fI\-\-quiesce\fR] [\fI\-\-atomic\fR] [\fI\-\-live\fR]}" 4
.IX Item "snapshot-create domain [xmlfile] {[--redefine [--current]] | [--no-metadata] [--halt] [--disk-only] [--reuse-external] [--quiesce] [--atomic] [--live]}"
Smoke a snapshot fo' domain \fIdomain\fR wit tha propertizzles specified in
\&\fIxmlfile\fR.  Normally, tha only propertizzles settable fo' a thugged-out domain snapshot
are tha <name> n' <description> elements, as well as <disks> if
\&\fI\-\-disk\-only\fR is given; tha rest of tha fieldz are
ignored, n' automatically filled up in by libvirt.  If \fIxmlfile\fR is
completely omitted, then libvirt will chizzle a value fo' all fields.
Da freshly smoked up snapshot will become current, as listed by \fBsnapshot-current\fR.
.Sp
If \fI\-\-halt\fR is specified, tha domain is ghon be left up in a inactizzle state
afta tha snapshot is pimped.
.Sp
If \fI\-\-disk\-only\fR is specified, tha snapshot will only include disk
state rather than tha usual system checkpoint wit vm state.  Disk
snapshots is fasta than full system checkpoints yo, but revertin ta a
disk snapshot may require fsck or journal replays, since it is like
the disk state all up in tha point when tha juice cord be abruptly pulled;
and mixin \fI\-\-halt\fR n' \fI\-\-disk\-only\fR loses any data dat was not
flushed ta disk all up in tha time.
.Sp
If \fI\-\-redefine\fR is specified, then all \s-1XML\s0 elements produced by
\&\fBsnapshot-dumpxml\fR is valid; dis can be used ta migrate snapshot
hierarchy from one machine ta another, ta recreate hierarchy fo' the
case of a transient domain dat goes away n' is lata recreated with
the same name n' \s-1UUID,\s0 or ta make slight alterations up in tha snapshot
metadata (like fuckin host-specific aspectz of tha domain \s-1XML\s0 embedded in
the snapshot).  When dis flag is supplied, tha \fIxmlfile\fR argument
is mandatory, n' tha domainz current snapshot aint gonna be altered
unless tha \fI\-\-current\fR flag be also given.
.Sp
If \fI\-\-no\-metadata\fR is specified, then tha snapshot data is pimped,
but any metadata is immediately discarded (that is, libvirt do not
treat tha snapshot as current, n' cannot revert ta tha snapshot
unless \fI\-\-redefine\fR is lata used ta teach libvirt bout the
metadata again).
.Sp
If \fI\-\-reuse\-external\fR is specified, n' tha snapshot \s-1XML\s0 requests an
external snapshot wit a thugged-out destination of a existin file, then the
destination must exist, n' is reused; otherwise, a snapshot is refused
to avoid losin contentz of tha existin files.
.Sp
If \fI\-\-quiesce\fR is specified, libvirt will try ta use hommie agent
to freeze n' unfreeze domainz mounted file systems yo. However,
if domain has no hommie agent, snapshot creation will fail.
Currently, dis requires \fI\-\-disk\-only\fR ta be passed as well.
.Sp
If \fI\-\-atomic\fR is specified, libvirt will guarantee dat tha snapshot
either succeeds, or fails wit no chizzles; not all hypervisors support
this.  If dis flag aint specified, then some hypervisors may fail
afta partially struttin tha action, n' \fBdumpxml\fR must be used to
see whether any partial chizzlez occurred.
.Sp
If \fI\-\-live\fR is specified, libvirt takes tha snapshot while tha hommie is
running. This increases tha size of tha memory image of tha external
checkpoint. This is currently supported only fo' external checkpoints.
.Sp
Existence of snapshot metadata will prevent attempts ta \fBundefine\fR
a persistent domain. I aint talkin' bout chicken n' gravy biatch.  But fuck dat shiznit yo, tha word on tha street is dat fo' transient domains, snapshot
metadata is silently lost when tha domain quits hustlin (whether
by command like fuckin \fBdestroy\fR or by internal hommie action).
.IP "\fBsnapshot-create-as\fR \fIdomain\fR {[\fI\-\-print\-xml\fR] | [\fI\-\-no\-metadata\fR] [\fI\-\-halt\fR] [\fI\-\-reuse\-external\fR]} [\fIname\fR] [\fIdescription\fR] [\fI\-\-disk\-only\fR [\fI\-\-quiesce\fR]] [\fI\-\-atomic\fR] [[\fI\-\-live\fR] [\fI\-\-memspec\fR \fBmemspec\fR]] [\fI\-\-diskspec\fR] \fBdiskspec\fR]..." 4
.IX Item "snapshot-create-as domain {[--print-xml] | [--no-metadata] [--halt] [--reuse-external]} [name] [description] [--disk-only [--quiesce]] [--atomic] [[--live] [--memspec memspec]] [--diskspec] diskspec]..."
Smoke a snapshot fo' domain \fIdomain\fR wit tha given <name> and
<description>; if either value is omitted, libvirt will chizzle a
value.  If \fI\-\-print\-xml\fR is specified, then \s-1XML\s0 appropriate for
\&\fIsnapshot-create\fR is output, rather than straight-up bustin a snapshot.
Otherwise, if \fI\-\-halt\fR is specified, tha domain is ghon be left up in an
inactizzle state afta tha snapshot is pimped, n' if \fI\-\-disk\-only\fR
is specified, tha snapshot aint gonna include vm state.
.Sp
Da \fI\-\-memspec\fR option can be used ta control whether a cold-ass lil checkpoint
is internal or external. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Da \fI\-\-memspec\fR flag is mandatory, followed
by a \fBmemspec\fR of tha form \fB[file=]name[,snapshot=type]\fR, where
type can be \fBnone\fR, \fBinternal\fR, or \fBexternal\fR.  To include a literal
comma up in \fBfile=name\fR, escape it wit a second comma. \fI\-\-memspec\fR cannot
be used together wit \fI\-\-disk\-only\fR.
.Sp
Da \fI\-\-diskspec\fR option can be used ta control how tha fuck \fI\-\-disk\-only\fR and
external checkpoints create external files.  This option can occur
multiple times, accordin ta tha number of <disk> elements up in tha domain
xml.  Each <diskspec> is up in the
form \fBdisk[,snapshot=type][,driver=type][,file=name]\fR.  To include a
literal comma up in \fBdisk\fR or up in \fBfile=name\fR, escape it wit a second
comma.  A literal \fI\-\-diskspec\fR must precede each \fBdiskspec\fR unless
all three of \fIdomain\fR, \fIname\fR, n' \fIdescription\fR is also present.
For example, a gangbangin' finger-lickin' diskspec of \*(L"vda,snapshot=external,file=/path/to,,new\*(R"
results up in tha followin \s-1XML:
 \s0 <disk name='vda' snapshot='external'>
    <source file='/path/to,new'/>
  </disk>
.Sp
If \fI\-\-reuse\-external\fR is specified, n' tha domain \s-1XML\s0 or \fIdiskspec\fR
option requests a external snapshot wit a thugged-out destination of a existing
file, then tha destination must exist, n' is reused; otherwise, a
snapshot is refused ta avoid losin contentz of tha existin files.
.Sp
If \fI\-\-quiesce\fR is specified, libvirt will try ta use hommie agent
to freeze n' unfreeze domainz mounted file systems yo. However,
if domain has no hommie agent, snapshot creation will fail.
Currently, dis requires \fI\-\-disk\-only\fR ta be passed as well.
.Sp
If \fI\-\-no\-metadata\fR is specified, then tha snapshot data is pimped,
but any metadata is immediately discarded (that is, libvirt do not
treat tha snapshot as current, n' cannot revert ta tha snapshot
unless \fBsnapshot-create\fR is lata used ta teach libvirt bout the
metadata again).  This flag is incompatible wit \fI\-\-print\-xml\fR.
.Sp
If \fI\-\-atomic\fR is specified, libvirt will guarantee dat tha snapshot
either succeeds, or fails wit no chizzles; not all hypervisors support
this.  If dis flag aint specified, then some hypervisors may fail
afta partially struttin tha action, n' \fBdumpxml\fR must be used to
see whether any partial chizzlez occurred.
.Sp
If \fI\-\-live\fR is specified, libvirt takes tha snapshot while tha hommie is
running. This increases tha size of tha memory image of tha external
checkpoint. This is currently supported only fo' external checkpoints.
.IP "\fBsnapshot-current\fR \fIdomain\fR {[\fI\-\-name\fR] | [\fI\-\-security\-info\fR] | [\fIsnapshotname\fR]}" 4
.IX Item "snapshot-current domain {[--name] | [--security-info] | [snapshotname]}"
Without \fIsnapshotname\fR, dis will output tha snapshot \s-1XML\s0 fo' tha domain's
current snapshot (if any).  If \fI\-\-name\fR is specified, just the
current snapshot name instead of tha full xml.  Otherwise, using
\&\fI\-\-security\-info\fR will also include securitizzle sensitizzle shiznit in
the \s-1XML.\s0
.Sp
With \fIsnapshotname\fR, dis be a request ta make tha existin named
snapshot become tha current snapshot, without revertin tha domain.
.IP "\fBsnapshot-edit\fR \fIdomain\fR [\fIsnapshotname\fR] [\fI\-\-current\fR] {[\fI\-\-rename\fR] | [\fI\-\-clone\fR]}" 4
.IX Item "snapshot-edit domain [snapshotname] [--current] {[--rename] | [--clone]}"
Edit tha \s-1XML\s0 configuration file fo' \fIsnapshotname\fR of a thugged-out domain. I aint talkin' bout chicken n' gravy biatch.  If
both \fIsnapshotname\fR n' \fI\-\-current\fR is specified, also force the
edited snapshot ta become tha current snapshot.  If \fIsnapshotname\fR
is omitted, then \fI\-\-current\fR must be supplied, ta edit tha current
snapshot.
.Sp
This is equivalent to:
.Sp
.Vb 3
\& virsh snapshot\-dumpxml dom name > snapshot.xml
\& vi snapshot.xml (or make chizzlez wit yo' other text editor)
\& virsh snapshot\-create dom snapshot.xml \-\-redefine [\-\-current]
.Ve
.Sp
except dat it do some error checking.
.Sp
Da editor used can be supplied by tha \f(CW$VISUAL\fR or \f(CW$EDITOR\fR environment
variables, n' defaults ta \f(CW\*(C`vi\*(C'\fR.
.Sp
If \fI\-\-rename\fR is specified, then tha edits can chizzle tha snapshot
name.  If \fI\-\-clone\fR is specified, then changin tha snapshot name
will create a cold-ass lil clone of tha snapshot metadata.  If neither is specified,
then tha edits must not chizzle tha snapshot name.  Note dat changing
a snapshot name must be done wit care, since tha contentz of some
snapshots, like fuckin internal snapshots within a single qcow2 file, are
accessible only from tha original gangsta name.
.IP "\fBsnapshot-info\fR \fIdomain\fR {\fIsnapshot\fR | \fI\-\-current\fR}" 4
.IX Item "snapshot-info domain {snapshot | --current}"
Output basic shiznit on some named <snapshot>, or tha current snapshot
with \fI\-\-current\fR.
.IP "\fBsnapshot-list\fR \fIdomain\fR [\fI\-\-metadata\fR] [\fI\-\-no\-metadata\fR] [{\fI\-\-parent\fR | \fI\-\-roots\fR | [{\fI\-\-tree\fR | \fI\-\-name\fR}]}] [{[\fI\-\-from\fR] \fBsnapshot\fR | \fI\-\-current\fR} [\fI\-\-descendants\fR]] [\fI\-\-leaves\fR] [\fI\-\-no\-leaves\fR] p[\fI\-\-inactive\fR] [\fI\-\-active\fR] [\fI\-\-disk\-only\fR] [\fI\-\-internal\fR] [\fI\-\-external\fR]" 4
.IX Item "snapshot-list domain [--metadata] [--no-metadata] [{--parent | --roots | [{--tree | --name}]}] [{[--from] snapshot | --current} [--descendants]] [--leaves] [--no-leaves] p[--inactive] [--active] [--disk-only] [--internal] [--external]"
List all of tha available snapshots fo' tha given domain, defaulting
to show columns fo' tha snapshot name, creation time, n' domain state.
.Sp
If \fI\-\-parent\fR is specified, add a cold-ass lil column ta tha output table giving
the name of tha parent of each snapshot.  If \fI\-\-roots\fR is specified,
the list is ghon be filtered ta just snapshots dat have no muthafathas.
If \fI\-\-tree\fR is specified, tha output is ghon be up in a tree format, listing
just snapshot names.  These three options is mutually exclusive. If
\&\fI\-\-name\fR is specified only tha snapshot name is printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This option is
mutually exclusive wit \fI\-\-tree\fR.
.Sp
If \fI\-\-from\fR is provided, filta tha list ta snapshots which are
lil pimpz of tha given \fBsnapshot\fR; or if \fI\-\-current\fR is provided,
start all up in tha current snapshot.  When used up in isolation or with
\&\fI\-\-parent\fR, tha list is limited ta direct lil pimps unless
\&\fI\-\-descendants\fR be also present.  When used wit \fI\-\-tree\fR, the
use of \fI\-\-descendants\fR is implied. Y'all KNOW dat shit, muthafucka!  This option aint compatible
with \fI\-\-roots\fR.  Note dat tha startin point of \fI\-\-from\fR or
\&\fI\-\-current\fR aint included up in tha list unless tha \fI\-\-tree\fR
option be also present.
.Sp
If \fI\-\-leaves\fR is specified, tha list is ghon be filtered ta just
snapshots dat have no lil' thugs.  Likewise, if \fI\-\-no\-leaves\fR is
specified, tha list is ghon be filtered ta just snapshots with
children. I aint talkin' bout chicken n' gravy biatch.  (Note dat omittin both options do no filtering,
while providin both options will either produce tha same list
or error up dependin on whether tha server recognizes tha flags).
Filterin options is not compatible wit \fI\-\-tree\fR.
.Sp
If \fI\-\-metadata\fR is specified, tha list is ghon be filtered ta just
snapshots dat involve libvirt metadata, n' thus would prevent
\&\fBundefine\fR of a persistent domain, or be lost on \fBdestroy\fR of
a transient domain. I aint talkin' bout chicken n' gravy biatch.  Likewise, if \fI\-\-no\-metadata\fR is specified,
the list is ghon be filtered ta just snapshots dat exist without
the need fo' libvirt metadata.
.Sp
If \fI\-\-inactive\fR is specified, tha list is ghon be filtered ta snapshots
that was taken when tha domain was shut off.  If \fI\-\-active\fR is
specified, tha list is ghon be filtered ta snapshots dat was taken
when tha domain was hustlin, n' where tha snapshot includes the
memory state ta revert ta dat hustlin state.  If \fI\-\-disk\-only\fR is
specified, tha list is ghon be filtered ta snapshots dat was taken
when tha domain was hustlin yo, but where tha snapshot includes only
disk state.
.Sp
If \fI\-\-internal\fR is specified, tha list is ghon be filtered ta snapshots
that use internal storage of existin disk images.  If \fI\-\-external\fR
is specified, tha list is ghon be filtered ta snapshots dat use external
filez fo' disk images or memory state.
.IP "\fBsnapshot-dumpxml\fR \fIdomain\fR \fIsnapshot\fR [\fI\-\-security\-info\fR]" 4
.IX Item "snapshot-dumpxml domain snapshot [--security-info]"
Output tha snapshot \s-1XML\s0 fo' tha domainz snapshot named \fIsnapshot\fR.
Usin \fI\-\-security\-info\fR will also include securitizzle sensitizzle shiznit.
Use \fBsnapshot-current\fR ta easily access tha \s-1XML\s0 of tha current snapshot.
.IP "\fBsnapshot-parent\fR \fIdomain\fR {\fIsnapshot\fR | \fI\-\-current\fR}" 4
.IX Item "snapshot-parent domain {snapshot | --current}"
Output tha name of tha parent snapshot, if any, fo' tha given
\&\fIsnapshot\fR, or fo' tha current snapshot wit \fI\-\-current\fR.
.IP "\fBsnapshot-revert\fR \fIdomain\fR {\fIsnapshot\fR | \fI\-\-current\fR} [{\fI\-\-running\fR | \fI\-\-paused\fR}] [\fI\-\-force\fR]" 4
.IX Item "snapshot-revert domain {snapshot | --current} [{--runnin | --paused}] [--force]"
Revert tha given domain ta tha snapshot specified by \fIsnapshot\fR, or to
the current snapshot wit \fI\-\-current\fR.  Be aware
that dis be a thugged-out destructizzle action; any chizzlez up in tha domain since tha last
snapshot was taken is ghon be lost.  Also note dat tha state of tha domain after
snapshot-revert is complete is ghon be tha state of tha domain all up in tha time
the original gangsta snapshot was taken.
.Sp
Normally, revertin ta a snapshot leaves tha domain up in tha state it was
at tha time tha snapshot was pimped, except dat a gangbangin' finger-lickin' disk snapshot with
no vm state leaves tha domain up in a inactizzle state.  Passin either the
\&\fI\-\-running\fR or \fI\-\-paused\fR flag will big-ass up additionizzle state chizzles
(like fuckin bootin a inactizzle domain, or pausin a hustlin domain).  Since
transient domains cannot be inactive, it is required ta use one of these
flags when revertin ta a gangbangin' finger-lickin' disk snapshot of a transient domain.
.Sp
There is two cases where a snapshot revert involves extra risk, which
requires tha use of \fI\-\-force\fR ta proceed. Y'all KNOW dat shit, muthafucka!  One is tha case of a
snapshot dat lacks full domain shiznit fo' reverting
configuration (like fuckin snapshots pimped prior ta libvirt 0.9.5);
since libvirt cannot prove dat tha current configuration matches what
was up in use all up in tha time of tha snapshot, supplyin \fI\-\-force\fR assures
libvirt dat tha snapshot is compatible wit tha current configuration
(and if it is not, tha domain will likely fail ta run).  Da other is
the case of revertin from a hustlin domain ta a actizzle state where a
new hypervisor has ta be pimped rather than reusin tha existing
hypervisor, cuz it implies drawbacks like fuckin breakin any existing
\&\s-1VNC\s0 or Spice connections; dis condizzle happens wit a active
snapshot dat uses a provably incompatible configuration, as well as
with a inactizzle snapshot dat is combined wit tha \fI\-\-start\fR or
\&\fI\-\-pause\fR flag.
.IP "\fBsnapshot-delete\fR \fIdomain\fR {\fIsnapshot\fR | \fI\-\-current\fR} [\fI\-\-metadata\fR] [{\fI\-\-children\fR | \fI\-\-children\-only\fR}]" 4
.IX Item "snapshot-delete domain {snapshot | --current} [--metadata] [{--lil pimps | --children-only}]"
Delete tha snapshot fo' tha domain named \fIsnapshot\fR, or tha current
snapshot wit \fI\-\-current\fR.  If dis snapshot
has lil pimp snapshots, chizzlez from dis snapshot is ghon be merged tha fuck into the
children. I aint talkin' bout chicken n' gravy biatch.  If \fI\-\-children\fR is passed, then delete dis snapshot n' any
lil pimpz of dis snapshot.  If \fI\-\-children\-only\fR is passed, then delete
any lil pimpz of dis snapshot yo, but leave dis snapshot intact.  These
two flags is mutually exclusive.
.Sp
If \fI\-\-metadata\fR is specified, then only delete tha snapshot metadata
maintained by libvirt, while leavin tha snapshot contents intact for
access by external tools; otherwise deletin a snapshot also removes
the data contents from dat point up in time.
.SH "NWFILTER COMMMANDS"
.IX Header "NWFILTER COMMMANDS"
Da followin commandz manipulate network filters. Network filtas allow
filterin of tha network traffic comin from n' goin ta virtual machines.
Individual network traffic filtas is freestyled up in \s-1XML\s0 n' may contain
references ta other network filters, describe traffic filterin rules,
or contain both. Network filtas is referenced by virtual machines
from within they intercourse description. I aint talkin' bout chicken n' gravy biatch fo' realz. A network filta may be referenced
by multiple virtual machines' intercourses.
.IP "\fBnwfilter-define\fR \fIxmlfile\fR" 4
.IX Item "nwfilter-define xmlfile"
Make a freshly smoked up network filta known ta libvirt. If a network filta with
the same name already exists, it is ghon be replaced wit tha freshly smoked up \s-1XML.\s0
Any hustlin virtual machine referencin dis network filta will have
its network traffic rulez adapted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If fo' any reason tha network traffic
filterin rulez cannot be instantiated by any of tha hustlin virtual
machines, then tha freshly smoked up \s-1XML\s0 is ghon be rejected.
.IP "\fBnwfilter-undefine\fR \fInwfilter-name\fR" 4
.IX Item "nwfilter-undefine nwfilter-name"
Delete a network filter n' shit. Da deletion will fail if any hustlin virtual
machine is currently rockin dis network filter.
.IP "\fBnwfilter-list\fR" 4
.IX Item "nwfilter-list"
List all of tha available network filters.
.IP "\fBnwfilter-dumpxml\fR \fInwfilter-name\fR" 4
.IX Item "nwfilter-dumpxml nwfilter-name"
Output tha network filta \s-1XML.\s0
.IP "\fBnwfilter-edit\fR \fInwfilter-name\fR" 4
.IX Item "nwfilter-edit nwfilter-name"
Edit tha \s-1XML\s0 of a network filter.
.Sp
This is equivalent to:
.Sp
.Vb 3
\& virsh nwfilter\-dumpxml myfilta > myfilter.xml
\& vi myfilter.xml (or make chizzlez wit yo' other text editor)
\& virsh nwfilter\-define myfilter.xml
.Ve
.Sp
except dat it do some error checking.
Da freshly smoked up network filta may be rejected cuz of tha same reason as
mentioned up in \fInwfilter-define\fR.
.Sp
Da editor used can be supplied by tha \f(CW$VISUAL\fR or \f(CW$EDITOR\fR environment
variables, n' defaults ta \f(CW\*(C`vi\*(C'\fR.
.SH "QEMU-SPECIFIC COMMANDS"
.IX Header "QEMU-SPECIFIC COMMANDS"
\&\s-1NOTE:\s0 Use of tha followin commandz is \fBstrongly\fR discouraged. Y'all KNOW dat shit, muthafucka!  They
can cause libvirt ta become trippin n' do tha wack thang on subsequent
operations.  Once you have used dis command, please do not report
problems ta tha libvirt pimpers; tha reports is ghon be ignored.
.IP "\fBqemu-attach\fR \fIpid\fR" 4
.IX Item "qemu-attach pid"
Attach a externally launched \s-1QEMU\s0 process ta tha libvirt \s-1QEMU\s0 driver.
Da \s-1QEMU\s0 process must done been pimped wit a monitor connection
usin tha \s-1UNIX\s0 driver n' shit. Ideally tha process will also have had the
\&'\-name' argument specified.
.RS 4
.Sp
.Vb 6
\&     $ qemu\-kvm \-cdrom ~/demo.iso \e
\&         \-monitor unix:/tmp/demo,server,nowait \e
\&         \-name foo \e
\&         \-uuid cece4f9f\-dff0\-575d\-0e8e\-01fe380f12ea  &
\&     $ QEMUPID=$!
\&     $ virsh qemu\-attach $QEMUPID
.Ve
.RE
.RS 4
.Sp
Not all functionz of libvirt is sposed ta fuckin work reliably after
attachin ta a externally launched \s-1QEMU\s0 process. There may be
issues wit tha hommie \s-1ABI\s0 changin upon migration, n' hotunplug
may not work.
.RE
.IP "\fBqemu-monitor-command\fR \fIdomain\fR { [\fI\-\-hmp\fR] | [\fI\-\-pretty\fR] } \fIcommand\fR..." 4
.IX Item "qemu-monitor-command domain { [--hmp] | [--pretty] } command..."
Send a arbitrary monitor command \fIcommand\fR ta domain \fIdomain\fR all up in the
qemu monitor. Shiiit, dis aint no joke.  Da thangs up in dis biatch of tha command is ghon be printed on stdout.  If
\&\fI\-\-hmp\fR is passed, tha command is considered ta be a human monitor command
and libvirt will automatically convert it tha fuck into \s-1QMP\s0 if needed. Y'all KNOW dat shit, muthafucka!  In dat case
the result will also be converted back from \s-1QMP. \s0 If \fI\-\-pretty\fR is given,
and tha monitor uses \s-1QMP,\s0 then tha output is ghon be pretty-printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If more
than one argument is provided fo' \fIcommand\fR, they is concatenated wit a
space up in between before passin tha single command ta tha monitor.
.IP "\fBqemu-agent-command\fR \fIdomain\fR [\fI\-\-timeout\fR \fIseconds\fR | \fI\-\-async\fR | \fI\-\-block\fR] \fIcommand\fR..." 4
.IX Item "qemu-agent-command domain [--timeout secondz | --async | --block] command..."
Send a arbitrary hommie agent command \fIcommand\fR ta domain \fIdomain\fR through
qemu agent.
\&\fI\-\-timeout\fR, \fI\-\-async\fR n' \fI\-\-block\fR options is exclusive.
\&\fI\-\-timeout\fR requires timeout secondz \fIseconds\fR n' it must be positive.
When \fI\-\-aysnc\fR is given, tha command waits fo' timeout whether success or
failed. Y'all KNOW dat shit, muthafucka! And when \fI\-\-block\fR is given, tha command waits forever wit blocking
timeout.
.IP "\fBlxc-enter-namespace\fR \fIdomain\fR \*(-- /path/to/binary [arg1, [arg2, ...]]" 4
.IX Item "lxc-enter-namespace domain /path/to/binary [arg1, [arg2, ...]]"
Enta tha namespace of \fIdomain\fR n' execute tha command \f(CW\*(C`/path/to/binary\*(C'\fR
passin tha axed args. Da binary path is relatizzle ta tha container
root filesystem, not tha host root filesystem. Da binary will inherit the
environment variablez / console visible ta virsh. This command only works
when connected ta tha \s-1LXC\s0 hypervisor driver.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
Da followin environment variablez can be set ta alta tha behaviour
of \f(CW\*(C`virsh\*(C'\fR
.IP "VIRSH_DEBUG=<0 ta 4>" 4
.IX Item "VIRSH_DEBUG=<0 ta 4>"
Turn on verbose debuggin of virsh commands. Valid levels are
.RS 4
.IP "\(bu" 4
VIRSH_DEBUG=0
.Sp
\&\s-1DEBUG \-\s0 Lyrics at \s-1ALL\s0 levels git logged
.IP "\(bu" 4
VIRSH_DEBUG=1
.Sp
\&\s-1INFO \-\s0 Logs lyrics at levels \s-1INFO, NOTICE, WARNING\s0 n' \s-1ERROR\s0
.IP "\(bu" 4
VIRSH_DEBUG=2
.Sp
\&\s-1NOTICE \-\s0 Logs lyrics at levels \s-1NOTICE, WARNING\s0 n' \s-1ERROR\s0
.IP "\(bu" 4
VIRSH_DEBUG=3
.Sp
\&\s-1WARNING \-\s0 Logs lyrics at levels \s-1WARNING\s0 n' \s-1ERROR\s0
.IP "\(bu" 4
VIRSH_DEBUG=4
.Sp
\&\s-1ERROR \-\s0 Lyrics at only \s-1ERROR\s0 level gets logged.
.RE
.RS 4
.RE
.ie n .IP "VIRSH_LOG_FILE=""LOGFILE""" 4
.el .IP "VIRSH_LOG_FILE=\f(CWLOGFILE\fR" 4
.IX Item "VIRSH_LOG_FILE=LOGFILE"
Da file ta log virsh debug lyrics.
.IP "\s-1VIRSH_DEFAULT_CONNECT_URI\s0" 4
.IX Item "VIRSH_DEFAULT_CONNECT_URI"
Da hypervisor ta connect ta by default. Right back up in yo muthafuckin ass. Set dis ta a \s-1URI,\s0 up in tha same
format as accepted by tha \fBconnect\fR option. I aint talkin' bout chicken n' gravy biatch. This environment variable
is deprecated up in favour of tha global \fB\s-1LIBVIRT_DEFAULT_URI\s0\fR variable
which serves tha same ol' dirty purpose.
.IP "\s-1LIBVIRT_DEFAULT_URI\s0" 4
.IX Item "LIBVIRT_DEFAULT_URI"
Da hypervisor ta connect ta by default. Right back up in yo muthafuckin ass. Set dis ta a \s-1URI,\s0 up in the
same format as accepted by tha \fBconnect\fR option. I aint talkin' bout chicken n' gravy biatch. This overrides
the default \s-1URI\s0 set up in any client config file n' prevents libvirt
from probin fo' drivers.
.IP "\s-1VISUAL\s0" 4
.IX Item "VISUAL"
Da editor ta use by tha \fBedit\fR n' related options.
.IP "\s-1EDITOR\s0" 4
.IX Item "EDITOR"
Da editor ta use by tha \fBedit\fR n' related options, if \f(CW\*(C`VISUAL\*(C'\fR
is not set.
.IP "LIBVIRT_DEBUG=LEVEL" 4
.IX Item "LIBVIRT_DEBUG=LEVEL"
Turn on verbose debuggin of all libvirt \s-1API\s0 calls. Valid levels are
.RS 4
.IP "\(bu" 4
LIBVIRT_DEBUG=1
.Sp
Lyrics at level \s-1DEBUG\s0 or above
.IP "\(bu" 4
LIBVIRT_DEBUG=2
.Sp
Lyrics at level \s-1INFO\s0 or above
.IP "\(bu" 4
LIBVIRT_DEBUG=3
.Sp
Lyrics at level \s-1WARNING\s0 or above
.IP "\(bu" 4
LIBVIRT_DEBUG=4
.Sp
Lyrics at level \s-1ERROR\s0 or above
.RE
.RS 4
.Sp
For further shiznit bout debuggin options consult \f(CW\*(C`http://libvirt.org/logging.html\*(C'\fR
.RE
.SH "BUGS"
.IX Header "BUGS"
Report any bugs discovered ta tha libvirt hood via tha mailing
list \f(CW\*(C`http://libvirt.org/contact.html\*(C'\fR or bug tracker \f(CW\*(C`http://libvirt.org/bugs.html\*(C'\fR.
Alternatively report bugs ta yo' software distributor / vendor.
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 1
\&  Please refer ta tha AUTHORS file distributed wit libvirt.
\&
\&  Based on tha xm playa page by:
\&  Shizzle Dague <sean at dague dot net>
\&  Daniel Stekloff <dsteklof at our asses dot ibm dot com>
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2005, 2007\-2010 Red Hat, Inc., n' tha authors listed up in the
libvirt \s-1AUTHORS\s0 file.
.SH "LICENSE"
.IX Header "LICENSE"
virsh is distributed under tha termz of tha \s-1GNU LGPL\s0 v2+.
This is free software; peep tha source fo' copyin conditions. There
is \s-1NO\s0 warranty; not even fo' \s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR
PURPOSE\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIvirt\-install\fR\|(1), \fIvirt\-xml\-validate\fR\|(1), \fIvirt\-top\fR\|(1), \fIvirt\-df\fR\|(1),
<http://www.libvirt.org/>
