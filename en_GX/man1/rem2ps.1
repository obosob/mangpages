.TH REM2PS 1 "11 April 2005"
.UC 4
.SH NAME
rem2ps \- draw a PostScript calendar from Remind output
.SH SYNOPSIS
.B rem2ps [\fIoptions\fR]
.SH DESCRIPTION
\fBRem2ps\fR readz tha standard input, which should be tha thangs up in dis biatch of hustlin
\fBRemind\fR wit tha \fB\-p\fR option. I aint talkin' bout chicken n' gravy biatch.  It emits PostScript code (which
draws a cold-ass lil calendar) ta tha standard output.
.PP
See tha section "Rem2PS Input Format" fo' details bout tha \fB\-p\fR
data.  This may be useful if you wish ta create other \fBRemind\fR
back-ends.

.SH OPTIONS
.TP
.B \-v
Be mo' verbose.  This causes \fBRem2ps\fR ta print progress lyrics
to tha standard error stream.  Normally, it is silent.
.TP
.B \-p file
Include tha contentz of \fIfile\fR up in tha PostScript prologue.  This
allows you ta define procedures, variablez etc. which can be used
by tha \fBPS\fR n' \fBPSFILE\fR reminders.  Yo ass should not
include any document structurin comments up in yo' prologue.
.TP
.B \-l
Produce tha calendar up in landscape mode rather than tha default
portrait mode.
.TP
\fB\-c\fR[\fIn\fR]
If \fIn\fR is omitted, disablez tha lil' small-ass calendars fo' next n' previous
months which is normally generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If \fIn\fR is supplied, it can range
from 0 ta 3, wit tha followin meanings:
.RS
.TP
.B 0
Disable lil' small-ass calendars
.TP
.B 1
Place tha lil' small-ass calendars all up in tha bottom-right if there is room; otherwise,
place dem all up in tha top-left.
.TP
.B 2
Place tha lil' small-ass calendars all up in tha top-left if there is room; otherwise,
place dem all up in tha bottom-right.
.TP
.B 3
Place tha previous monthz lil' small-ass calendar all up in tha top-left n' tha next
monthz all up in tha bottom-right if there is room; otherwise, follow \fIn\fR=1.
A momentz thought reveals dat a option which splits tha calendars if
there is room n' otherwise bigs up \fIn\fR=2 yieldz tha same ol' dirty thangs up in dis biatch as
\fIn\fR=3.
.RE
.TP
.B \-i
Use ISO 8859-1 standard encodin fo' tha PostScript fonts, n' you can put dat on yo' toast.  If you do
not use dis option, tha default encodin is used.
.TP
.B \-e
Make tha calendar fill tha entire page.  By default, tha calendar is
slightly smalla than tha page.  This allows minutes wit nuff reminders
to "expand" as needed. Y'all KNOW dat shit, muthafucka!  But fuck dat shiznit yo, tha word on tha street is dat if you aint gots minutes which expand,
you can use dis option ta make all of tha boxes slightly bigger n' shit.  
One caveat: If you do use tha \fB\-e\fR option n' one dizzle has many
reminders, tha calendar may expand off tha page, losin some shiznit.
Experiment!
.TP
.B \-m media
Set tha page size.  If you use tha \-m option, you must specify the
media type, which can be one of the
following.  (Sizes is approximate.)
.RS
.TP
Letter
8.5 x 11 in.
.TP
Legal
8.5 x 14 in.
.TP
Ledger
11 x 17 in.
.TP
Statement
5.5 x 8.5 in.
.TP
Executive
7.5 x 10 in.
.TP
A3
29.7 x 42 cm.
.TP
A4
21 x 29.7 cm.
.TP
A5
14.8 x 21 cm.
.TP
B4
25.7 x 36.4 cm.
.TP
B5
18.3 x 25.7 cm.
.TP
Folio
8.5 x 13 in.
.TP
Quarto
8.5 x 10.8 in.
.TP
10x14
10 x 14 in.
.TP
\fIX\fRx\fIY\fRin
\fIX\fR by \fIY\fR inches, where \fIX\fR n' \fIY\fR can be floating-point
numbers.
.TP
\fIX\fRx\fIY\fRcm
\fIX\fR by \fIY\fR centimetres, where \fIX\fR n' \fIY\fR can be floating-point
numbers.

.PP
Type "rem2ps \-m help" fo' a list of available media.  Note dat tha media
type (and all \fBRem2ps\fR options) is case-sensitive.  If you don't use
the \fB\-m\fR option, tha media defaults ta a cold-ass lil compiled-in default - this
is probably Letta fo' Uptown Tha Ghetto n' A4 fo' Europe.  Da "\-m help"
option will display tha compiled-in default.
.RE
.TP
\fB\-f\fR[\fBtshed\fR] \fIfont\fR
Set tha font fo' tha calendar title,
the lil' small-ass calendars, tha day-of-week headings, tha calendar
entries, n' tha dizzle numbers, respectively.  \fIFont\fR must be the
name of a valid PostScript font.  Da default fonts is equivalent to
specifying:
.RS
.PP
.nf
	\-ftshe Helvetica \-fd Helvetica-BoldOblique
.fi
.PP
In other lyrics, tha heading, entry n' small-calendar fonts is set
to Helvetica, n' tha font fo' tha dizzle numbers is set to
Helvetica-BoldOblique.
.RE
.TP
\fB\-s\fR[\fBthed\fR] \fIsize\fR
Set tha size (in points) of tha text fo' tha the calendar title,
day-of-week headings, tha calendar entries, n' tha dizzle numbers,
respectively.  \fISize\fR must be a thugged-out decimal number n' shit.  Da default sizes
are equivalent ta specifying:
.RS
.PP
.nf
	\-sthd 14 \-se 8
.fi
.PP
In other lyrics, tha headin n' dizzle numbers is 14-point fonts, n' the
calendar entries is printed up in 8-point text.
.RE
.TP
\fB\-b\fR \fIsize\fR
Set tha size of tha blank white border up in each calendar box ta \fIsize\fR
points, n' you can put dat on yo' toast.  Da default border size is 6 points, or 1/12 in.
.TP
\fB\-t\fR \fIsize\fR
Set tha thicknizz of tha black calendar grid lines.  Da default is 1,
for a line thicknizz of one point (1/72 in.)
.TP
\fB\-o\fR[\fBlrtb\fR] \fIsize\fR
Set tha left, right, top, and/or bottom margins ta \fIsize\fR points.
For dis option only, \fIsize\fR must be a integer n' shit.  It represents the
margin size up in unitz of 1/72 in. I aint talkin' bout chicken n' gravy biatch.  Da default margin sizes is 36, for
half-inch margins.  If you wish ta punch holez up in tha calendar page ta insert
it tha fuck into a funky-ass binder, you may wish ta increase tha left margin ta one inch.
In dat case, you should also decrease tha headin font size ta 12 points
for phat output:
.PP
.nf
	# This gives phat thangs up in dis biatch fo' puttin tha fuck into a funky-ass binder
	rem2ps \-ol 72 \-sh 12
.fi
.SH USAGE
To use \fBRem2ps\fR, you should pipe tha output of \fBRemind\fR wit tha \fB\-p\fR
option ta \fBRem2ps\fR, n' then bust tha result ta a printer n' shit.  This is most easily
illustrated wit examples:
.PP
.nf
	remind \-p12 /dev/null 1 jan 1994 | rem2ps | lpr \-Plaser
.fi
.PP
That example creates a funky-ass blank calendar fo' tha entire year of 1994, and
sendz it tha the printa named "laser."
.PP
.nf
	remind \-p ~/.remindaz | rem2ps \-l \-sd 18 > cal.ps
.fi
.PP
This reminder creates a cold-ass lil calendar fo' tha current month, fillin in
entries from tha reminder file "~/.reminders."  Da calendar is produced
in landscape mode, wit a gangbangin' font size of 18 fo' tha dizzle numbers.  Da result
is put up in tha PostScript file "cal.ps."
.PP
.SH VARIABLES AVAILABLE TO USER-SUPPLIED POSTSCRIPT CODE
.PP
Da followin variablez is available ta \fBPS\fR n' 
\fBPSFILE\fR-type reminders.  (This material is duplicated
in tha \fBRemind\fR manual page.)
.TP
LineWidth
Da width of tha black grid lines makin up tha calendar.
.TP
Border
Da border between tha centa of tha grid lines n' tha space used ta print
calendar entries. Put ya muthafuckin choppers up if ya feel dis!  This border is normally blank space.
.TP
BoxWidth n' BoxHeight
Da width n' height of tha calendar box, from center-to-centa of the
black gridlines.
.TP
InBoxHeight
Da height from tha centa of tha bottom black gridline ta tha top
of tha regular calendar entry area.  Da space from here ta tha top
of tha box is used only ta draw tha dizzle number.
.TP
/DayFont, /TitleFont, /EntryFont, /SmallFont n' /HeadFont
Da fonts used ta draw tha dizzle numbers, tha month n' year title,
the calendar entries, tha small
calendars, n' tha day-of-week headings, respectively.
.TP
DaySize, TitleSize, EntrySize n' HeadSize
Da sizez of tha above fonts, n' you can put dat on yo' toast.  (Da size of tha lil' small-ass calendar font
is \fInot\fR defined here.)  For example, if you wanted ta print
the Hebrew date next ta tha regular dizzle number up in tha calendar, use:
.PP
.nf
	REM PS Border BoxHeight Border sub DaySize sub moveto \\
	   /DayFont findfont DaySize scalefont setfont \\
	   ([hebday(todizzle())] [hebmon(todizzle())]) show
.fi
.PP
.RS
Note how tha fuck /DayFont n' DaySize is used.
.RE
.PP
Note dat if you supply PostScript code, it is possible ta produce invalid
PostScript files.  Always test yo' PostScript thoroughly wit a PostScript
viewer before bustin  it ta tha printer n' shit.  Yo ass should not use any document
structurin comments up in yo' PostScript code.
.PP
In addition, prior ta drawin a cold-ass lil calendar page, \fBRem2ps\fR emits
the followin PostScript code:
.PP
.nf
	save (mon) (yr) PreCal restore
.fi
.PP
where \fImon\fR n' \fIyr\fR is tha month n' year of tha calendar
page.  Da default \fBPreCal\fR procedure simply pops
the arguments n' do nothing.  But fuck dat shiznit yo, tha word on tha street is dat you can define a \fBPreCal\fR
function up in yo' prologue file ta do whatever you want - it can draw a
background fo' tha entire calendar, fo' instance.
.PP
In tha context of tha \fBPreCal\fR procedure, tha followin conditions
hold:
.TP
o
Da PostScript origin be all up in tha bottom left-hand corner of tha page, and
PostScript unitz of 1/72" is up in effect.
.TP
o
Da variablez MinX, MinY, MaxX n' MaxY define tha boundin box within
which tha calendar is ghon be drawn.
.TP
o
Da font n' font-size variables, as well as Border n' LineWidth busted lyrics about
previously, is valid.
.PP
For a example, create a gangbangin' file called "myprolog" whose contents are:
.PP
.nf
		/PreCal {
		 /yr exch def
		 /mon exch def
		 /xsiz1 MaxX MinX sub def
		 /ysiz1 MaxY MinY sub def
		 /xsiz xsiz1 MinX sub MinX sub def
		 /ysiz ysiz1 MinY sub MinY sub def
		 xsiz
		 ysiz
		 lt
		 {/len xsiz 1.41 mul def
		  MinX MinX add ysiz1 xsiz1 sub 2 div MinY add MinY add moveto}
		 {/len ysiz 1.41 mul def
		  xsiz1 ysiz1 sub 2 div MinX add MinX add MinY MinY add moveto}
		 ifelse
		 /Helvetica-Bold findfont 1 scalefont setfont
		 mon stringwidth pop
		 ( ) stringwidth pop add
		 yr stringwidth pop add
		 len exch div /len exch def
		 /Helvetica-Bold findfont len scalefont setfont
		 0.95 setgray
		 45 rotate
		 mon show
		 ( ) show
		 yr show
		} bind def
.fi
.PP
Use dat file wit tha \fBRem2ps\fR \fB\-p\fR option ta create calendars
with tha year n' month up in big-ass grey lettas up in tha background of the
calendar.
.PP
.SH REM2PS INPUT FORMAT
\fBRemind \-p\fR sendz tha followin lines ta standard output.
Da shiznit is designed ta be easily parsed by back-end programs:
.TP
.B # rem2ps begin
This line signifies tha start of calendar data.  Back-endz can search
for it ta verify they is bein fed erect shiznit.
.TP
\fImonth_name year num_days first_dizzle monday_first\fR
On dis line, \fImonth_name\fR is tha name of tha month whose calendar
information be bout ta follow.  \fInum_days\fR is tha number of days
in dis month.  \fIfirst_day\fR is tha weekdizzle of tha straight-up original gangsta dizzle of the
month (0 = Sunday, 1 = Monday, 6 = Saturday.)  And \fImonday_first\fR is
1 if tha \fB\-m\fR flag was supplied ta \fBRemind\fR, or 0 if dat shiznit was not.
All dis shiznit is supplied so back-endz don't need any date calculation
facilities.
.TP
\fIsun mon tue wed thu fri sat\fR
This line consists of
space-separated namez of minutes up in whatever language \fBRemind\fR was
compiled for. Shiiit, dis aint no joke.  This shiznit can be used by back-endz ta annotate
calendars, n' means they don't gotta be pimped fo' a specific
language.
.TP
\fInext_mon next_days\fR
Da name of tha next month n' tha number of minutes up in dat shit.
.TP
\fIprev_mon prev_days\fR
Da name of tha previous month n' tha number of minutes up in dat shit.  The
\fInext_mon\fR n' \fIprev_mon\fR lines could be used ta generate small
inset calendars fo' tha next n' previous months.
.PP
Da remainin data consistz of calendar entries, up in tha followin format:
.PP
\fIyyyy/mm/dd special tag dur time body\fR
.PP
Here, \fIyyyy\fR is tha year, \fImm\fR is tha month (01-12) and
\fIdd\fR is tha dizzle of tha month.  Note dat tha date components are
always separated by "/" even if tha date separator up in \fBRemind\fR has
been set ta "-".  Da consistent use of "/" is designed ta ease parsing.
.PP
\fIspecial\fR be a strang used
for "out-of-band" communication wit back-ends.  If tha reminder
is a aiiight reminder, \fIspecial\fR is "*".  Da \fBRem2PS\fR
back-end understandz tha specials \fBPostScript\fR n' \fBPSFile\fR.
Other back-endz may KNOW other specials.  A back end should
\fIsilently ignore\fR a reminder wit a special it don't understand.
.PP
\fItag\fR is whatever tag tha user provided wit tha \fBTAG\fR clause,
or "*" if no tag was provided. Y'all KNOW dat shit, muthafucka!  If there is mo' than one \fBTAG\fR clause,
the tags step tha fuck up in a cold-ass lil comma-separated list.  For example, tha command
\fBREM TAG foo TAG bar TAG quux\fR would result up in \fBfoo,bar,quux\fR
in tha \fItag\fR field.
.PP
\fIdur\fR is tha \fBDURATION\fR value up in minutes, or "*" if no duration
was provided.
.PP
\fItime\fR is tha time of tha reminder up in minutes past midnight, or
"*" if tha reminder was not a timed reminder.
.PP
\fIbody\fR is tha body of tha reminder.
.PP
Afta a monthz worth of remindaz done been emitted, \fBRemind\fR
emits tha line:
.PP
\fB# rem2ps end
.PP
But fuck dat shiznit yo, tha word on tha street is dat back-endz should keep readin until EOF up in case mo' data for
subsequent months is forthcoming.
.PP
If you supply tha \fB\-l\fR option ta \fBremind\fR, then reminders
may be preceded by a line dat be lookin like this:
.PP
\fB# fileinfo \fIlineno filename\fR
.PP
Da word \fBfileinfo\fR is literal; \fIlineno\fR n' \fIfilename\fR specify
the line number n' file name of tha file containin tha reminder n' shit.  Back-ends
that couldn't give a fuckin shiznit bout dis shiznit should ignore lines startin with
"#" (except, of course, fo' tha # rem2ps lines.)
.PP
.SH AUTHOR
Rem2PS is now supported by Roarin Penguin Software
Inc. (http://www.roaringpenguin.com)
.PP
Rem2PS was freestyled by Dizzy F. Right back up in yo muthafuckin ass. Skoll <dfs@roaringpenguin.com>.
.SH BUGS
All \fBRem2ps\fR options is case-sensitive, unlike \fBRemind\fR.
Any time you supply
a font name or size, line thickness, or border width, it is treated as a
strin n' busted straight ta tha PostScript interpreter n' shit.  Thus, if you
supply invalid fonts or sizes, \fBRem2ps\fR aint gonna diss yo, but the
resultin PostScript output will probably not work.
.PP
Yo ass should ensure dat tha joints you supply fo' margin widths is sensible.
If they is too big-ass fo' tha media size, \fBRem2ps\fR aint gonna complain,
but again, tha PostScript output will probably not work.
.SH SEE ALSO
\fBremind\fR
