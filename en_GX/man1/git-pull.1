'\" t
.\"     Title: git-pull
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-PULL" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-pull \- Fetch from n' integrate wit another repository or a local branch
.SH "SYNOPSIS"
.sp
.nf
\fIgit pull\fR [options] [<repository> [<refspec>\&...]]
.fi
.sp
.SH "DESCRIPTION"
.sp
Incorporates chizzlez from a remote repository tha fuck into tha current branch\&. In its default mode, git pull is shorthand fo' git fetch followed by git merge FETCH_HEAD\&.
.sp
Mo' precisely, \fIgit pull\fR runs \fIgit fetch\fR wit tha given parametas n' calls \fIgit merge\fR ta merge tha retrieved branch headz tha fuck into tha current branch\&. With \-\-rebase, it runs \fIgit rebase\fR instead of \fIgit merge\fR\&.
.sp
<repository> should be tha name of a remote repository as passed ta \fBgit-fetch\fR(1)\&. <refspec> can name a arbitrary remote ref (for example, tha name of a tag) or even a cold-ass lil collection of refs wit correspondin remote\-trackin branches (e\&.g\&., refs/heads/*:refs/remotes/origin/*) yo, but probably it is tha name of a funky-ass branch up in tha remote repository\&.
.sp
Default joints fo' <repository> n' <branch> is read from tha "remote" n' "merge" configuration fo' tha current branch as set by \fBgit-branch\fR(1) \-\-track\&.
.sp
Assume tha followin history exists n' tha current branch is "master":
.sp
.if n \{\
.RS 4
.\}
.nf
          A\-\-\-B\-\-\-C masta on origin
         /
    D\-\-\-E\-\-\-F\-\-\-G master
        ^
        origin/masta up in yo' repository
.fi
.if n \{\
.RE
.\}
.sp
.sp
Then "git pull" will fetch n' replay tha chizzlez from tha remote masta branch since it diverged from tha local masta (i\&.e\&., E) until its current commit (C) on top of masta n' record tha result up in a freshly smoked up commit along wit tha namez of tha two parent commits n' a log message from tha user describin tha chizzles\&.
.sp
.if n \{\
.RS 4
.\}
.nf
          A\-\-\-B\-\-\-C origin/master
         /         \e
    D\-\-\-E\-\-\-F\-\-\-G\-\-\-H master
.fi
.if n \{\
.RE
.\}
.sp
.sp
See \fBgit-merge\fR(1) fo' details, includin how tha fuck conflicts is presented n' handled\&.
.sp
In Git 1\&.7\&.0 or later, ta quit a cold-ass lil conflictin merge, use git reset \-\-merge\&. \fBWarning\fR: In olda versionz of Git, hustlin \fIgit pull\fR wit uncommitted chizzlez is discouraged: while possible, it leaves you up in a state dat may be hard ta back outta up in tha case of a cold-ass lil conflict\&.
.sp
If any of tha remote chizzlez overlap wit local uncommitted chizzles, tha merge is ghon be automatically shut down n' tha work tree untouched\&. Well shiiiit, it is generally dopest ta git any local chizzlez up in hustlin order before pullin or stash dem away wit \fBgit-stash\fR(1)\&.
.SH "OPTIONS"
.sp
Options meant fo' \fIgit pull\fR itself n' tha underlyin \fIgit merge\fR must be given before tha options meant fo' \fIgit fetch\fR\&.
.PP
\-q, \-\-quiet
.RS 4
This is passed ta both underlyin git\-fetch ta squelch reportin of durin transfer, n' underlyin git\-merge ta squelch output durin merging\&.
.RE
.PP
\-v, \-\-verbose
.RS 4
Pass \-\-verbose ta git\-fetch n' git\-merge\&.
.RE
.PP
\-\-[no\-]recurse\-submodules[=yes|on\-demand|no]
.RS 4
This option controls if freshly smoked up commitz of all populated submodulez should be fetched too (see
\fBgit-config\fR(1)
and
\fBgitmodules\fR(5))\&. That might be necessary ta git tha data needed fo' mergin submodule commits, a gangbangin' feature Git hustled up in 1\&.7\&.3\&. Notice dat tha result of a merge aint gonna be checked up in tha submodule, "git submodule update" has ta be called afterwardz ta brang tha work tree up ta date wit tha merge result\&.
.RE
.SS "Options related ta merging"
.PP
\-\-commit, \-\-no\-commit
.RS 4
Perform tha merge n' commit tha result\&. This option can be used ta override \-\-no\-commit\&.
.sp
With \-\-no\-commit big-ass up tha merge but pretend tha merge failed n' do not autocommit, ta give tha user a cold-ass lil chizzle ta inspect n' further tweak tha merge result before committing\&.
.RE
.PP
\-\-edit, \-e, \-\-no\-edit
.RS 4
Invoke a editor before committin successful mechanical merge ta further edit tha auto\-generated merge message, so dat tha user can explain n' justify tha merge\&. The
\-\-no\-edit
option can be used ta accept tha auto\-generated message (this is generally discouraged)\&.
.sp
Older scripts may depend on tha oldschool behaviour of not allowin tha user ta edit tha merge log message\&. They will peep a editor opened when they run
git merge\&. To make it easier ta adjust such scripts ta tha updated behaviour, tha environment variable
GIT_MERGE_AUTOEDIT
can be set to
no
at tha beginnin of them\&.
.RE
.PP
\-\-ff
.RS 4
When tha merge resolves as a gangbangin' fast\-forward, only update tha branch pointer, without bustin a merge commit\&. This is tha default behavior\&.
.RE
.PP
\-\-no\-ff
.RS 4
Smoke a merge commit even when tha merge resolves as a gangbangin' fast\-forward\&. This is tha default behaviour when mergin a annotated (and possibly signed) tag\&.
.RE
.PP
\-\-ff\-only
.RS 4
Refuse ta merge n' exit wit a non\-zero status unless tha current
HEAD
is already up\-to\-date or tha merge can be resolved as a gangbangin' fast\-forward\&.
.RE
.PP
\-\-log[=<n>], \-\-no\-log
.RS 4
In addizzle ta branch names, populate tha log message wit one\-line descriptions from at most <n> actual commits dat is bein merged\&. Right back up in yo muthafuckin ass. See also
\fBgit-fmt-merge-msg\fR(1)\&.
.sp
With \-\-no\-log do not list one\-line descriptions from tha actual commits bein merged\&.
.RE
.PP
\-\-stat, \-n, \-\-no\-stat
.RS 4
Show a gangbangin' finger-lickin' diffstat all up in tha end of tha merge\&. Da diffstat be also controlled by tha configuration option merge\&.stat\&.
.sp
With \-n or \-\-no\-stat do not show a gangbangin' finger-lickin' diffstat all up in tha end of tha merge\&.
.RE
.PP
\-\-squash, \-\-no\-squash
.RS 4
Produce tha hustlin tree n' index state as if a real merge happened (except fo' tha merge shiznit) yo, but do not straight-up cook up a cold-ass lil commit, move the
HEAD, or record
$GIT_DIR/MERGE_HEAD
(to cause tha next
git commit
command ta create a merge commit)\&. This allows you ta create a single commit on top of tha current branch whose effect is tha same ol' dirty as mergin another branch (or mo' up in case of a octopus)\&.
.sp
With \-\-no\-squash big-ass up tha merge n' commit tha result\&. This option can be used ta override \-\-squash\&.
.RE
.PP
\-s <strategy>, \-\-strategy=<strategy>
.RS 4
Use tha given merge game; can be supplied mo' than once ta specify dem up in tha order they should be tried\&. If there is no
\-s
option, a funky-ass built\-in list of strategies is used instead (\fIgit merge\-recursive\fR
when mergin a single head,
\fIgit merge\-octopus\fR
otherwise)\&.
.RE
.PP
\-X <option>, \-\-strategy\-option=<option>
.RS 4
Pass merge game specific option all up in ta tha merge game\&.
.RE
.PP
\-\-verify\-signatures, \-\-no\-verify\-signatures
.RS 4
Verify dat tha commits bein merged have phat n' trusted GPG signatures n' abort tha merge up in case they do not\&.
.RE
.PP
\-\-summary, \-\-no\-summary
.RS 4
Synonyms ta \-\-stat n' \-\-no\-stat; these is deprecated n' is ghon be removed up in tha future\&.
.RE
.PP
\-r, \-\-rebase[=false|true|preserve]
.RS 4
When true, rebase tha current branch on top of tha upstream branch afta fetching\&. If there be a remote\-trackin branch correspondin ta tha upstream branch n' tha upstream branch was rebased since last fetched, tha rebase uses dat shiznit ta avoid rebasin non\-local chizzles\&.
.sp
When preserve, also rebase tha current branch on top of tha upstream branch yo, but pass
\-\-preserve\-merges
along to
git rebase
so dat locally pimped merge commits aint gonna be flattened\&.
.sp
When false, merge tha current branch tha fuck into tha upstream branch\&.
.sp
See
pull\&.rebase,
branch\&.<name>\&.rebase
and
branch\&.autosetuprebase
in
\fBgit-config\fR(1)
if you wanna make
git pull
always use
\-\-rebase
instead of merging\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
This be a potentially
\fIdangerous\fR
mode of operation\&. Well shiiiit, it rewrites history, which do not bode well when you published dat history already\&. Do
\fBnot\fR
use dis option unless you have read
\fBgit-rebase\fR(1)
carefully\&.
.sp .5v
.RE
.RE
.PP
\-\-no\-rebase
.RS 4
Override earlier \-\-rebase\&.
.RE
.SS "Options related ta fetching"
.PP
\-\-all
.RS 4
Fetch all remotes\&.
.RE
.PP
\-a, \-\-append
.RS 4
Append ref names n' object namez of fetched refs ta tha existin contents of
\&.git/FETCH_HEAD\&. Without dis option oldschool data in
\&.git/FETCH_HEAD
will be overwritten\&.
.RE
.PP
\-\-depth=<depth>
.RS 4
Deepen or shorten tha history of a
\fIshallow\fR
repository pimped by
git clone
with
\-\-depth=<depth>
option (see
\fBgit-clone\fR(1)) ta tha specified number of commits from tha tip of each remote branch history\&. Tags fo' tha deepened commits is not fetched\&.
.RE
.PP
\-\-unshallow
.RS 4
If tha source repository is complete, convert a gangbangin' finger-lickin' dirty-ass shallow repository ta a cold-ass lil complete one, removin all tha limitations imposed by shallow repositories\&.
.sp
If tha source repository is shallow, fetch as much as possible so dat tha current repository has tha same ol' dirty history as tha source repository\&.
.RE
.PP
\-\-update\-shallow
.RS 4
By default when fetchin from a gangbangin' finger-lickin' dirty-ass shallow repository,
git fetch
refuses refs dat require uppimpin \&.git/shallow\&. This option thugged-out shiznit \&.git/shallow n' accept such refs\&.
.RE
.PP
\-f, \-\-force
.RS 4
When
\fIgit fetch\fR
is used with
<rbranch>:<lbranch>
refspec, it refuses ta update tha local branch
<lbranch>
unless tha remote branch
<rbranch>
it fetches be a thugged-out descendant of
<lbranch>\&. This option overrides dat check\&.
.RE
.PP
\-k, \-\-keep
.RS 4
Keep downloaded pack\&.
.RE
.PP
\-\-no\-tags
.RS 4
By default, tags dat point at objects dat is downloaded from tha remote repository is fetched n' stored locally\&. This option disablez dis automatic tag following\&. Da default behavior fo' a remote may be specified wit tha remote\&.<name>\&.tagopt setting\&. Right back up in yo muthafuckin ass. See
\fBgit-config\fR(1)\&.
.RE
.PP
\-u, \-\-update\-head\-ok
.RS 4
By default
\fIgit fetch\fR
refuses ta update tha head which correspondz ta tha current branch\&. This flag disablez tha check\&. This is purely fo' tha internal use for
\fIgit pull\fR
to rap with
\fIgit fetch\fR, n' unless yo ass is implementin yo' own Porcelain yo ass is not supposed ta use it\&.
.RE
.PP
\-\-upload\-pack <upload\-pack>
.RS 4
When given, n' tha repository ta fetch from is handled by
\fIgit fetch\-pack\fR,
\fI\-\-exec=<upload\-pack>\fR
is passed ta tha command ta specify non\-default path fo' tha command run on tha other end\&.
.RE
.PP
\-\-progress
.RS 4
Progress status is reported on tha standard error stream by default when it be attached ta a terminal, unless \-q is specified\&. This flag forces progress status even if tha standard error stream aint pimped up ta a terminal\&.
.RE
.PP
<repository>
.RS 4
Da "remote" repository dat is tha source of a gangbangin' fetch or pull operation\&. This parameta can be either a URL (see tha section
GIT URLS
below) or tha name of a remote (see tha section
REMOTES
below)\&.
.RE
.PP
<refspec>
.RS 4
Da format of a <refspec> parameta be a optionizzle plus
+, followed by tha source ref <src>, followed by a cold-ass lil colon
:, followed by tha destination ref <dst>\&.
.sp
Da remote ref dat matches <src> is fetched, n' if <dst> aint empty string, tha local ref dat matches it is fast\-forwarded rockin <src>\&. If tha optionizzle plus
+
is used, tha local ref is updated even if it do not result up in a gangbangin' fast\-forward update\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
If tha remote branch from which you wanna pull is modified up in non\-linear ways like fuckin bein rewound n' rebased frequently, then a pull will attempt a merge wit a olda version of itself, likely conflict, n' fail\&. Well shiiiit, it is under these conditions dat you would wanna use the
+
sign ta indicate non\-fast\-forward thugged-out shiznit is ghon be needed\&. There is currently no easy as fuck  way ta determine or declare dat a funky-ass branch is ghon be made available up in a repository wit dis behavior; tha pullin user simply must know dis is tha expected usage pattern fo' a funky-ass branch\&.
.sp .5v
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
Yo ass never do yo' own pimpment on branches dat step tha fuck up on tha right hand side of a <refspec> colon on
Pull:
lines; they is ta be updated by
\fIgit fetch\fR\&. If you intend ta do pimpment derived from a remote branch
B, have a
Pull:
line ta track it (i\&.e\&.
Pull: B:remote\-B), n' gotz a separate branch
my\-B
to do yo' pimpment on top of it\&. Da latta is pimped by
git branch my\-B remote\-B
(or its equivalent
git checkout \-b my\-B remote\-B)\&. Run
git fetch
to keep track of tha progress of tha remote side, n' when you peep suttin' freshly smoked up on tha remote branch, merge it tha fuck into yo' pimpment branch with
git pull \&. remote\-B, while yo ass is on
my\-B
branch\&.
.sp .5v
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
There be a gangbangin' finger-lickin' difference between listin multiple <refspec> directly on
\fIgit pull\fR
command line n' havin multiple
Pull:
<refspec> lines fo' a <repository> n' hustlin
\fIgit pull\fR
command without any explicit <refspec> parameters\&. <refspec> listed explicitly on tha command line is always merged tha fuck into tha current branch afta fetching\&. In other lyrics, if you list mo' than one remote refs, you would be bustin a Octopus\&. While
\fIgit pull\fR
run without any explicit <refspec> parameta takes default <refspec>s from
Pull:
lines, it merges only tha straight-up original gangsta <refspec> found tha fuck into tha current branch, afta fetchin all tha remote refs\&. This is cuz bustin a Octopus from remote refs is rarely done, while keepin track of multiple remote headz up in one\-go by fetchin mo' than one is often useful\&.
.sp .5v
.RE
Some short\-cut notations is also supported\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
tag <tag>
means tha same ol' dirty as
refs/tags/<tag>:refs/tags/<tag>; it requests fetchin every last muthafuckin thang up ta tha given tag\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A parameta <ref> without a cold-ass lil colon merges <ref> tha fuck into tha current branch, n' thugged-out shiznit tha remote\-trackin branches (if any)\&.
.RE
.RE
.SH "GIT URLS"
.sp
In general, URLs contain shiznit bout tha transhiznit protocol, tha address of tha remote server, n' tha path ta tha repository\&. Dependin on tha transhiznit protocol, a shitload of dis shiznit may be absent\&.
.sp
Git supports ssh, git, http, n' https protocols (in addition, ftp, n' ftps can be used fo' fetchin n' rsync can be used fo' fetchin n' pushin yo, but these is inefficient n' deprecated; do not use them)\&.
.sp
Da natizzle transhiznit (i\&.e\&. git:// URL) do no authentication n' should be used wit caution on unsecured networks\&.
.sp
Da followin syntaxes may be used wit them:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ssh://[user@]host\&.xz[:port]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
git://host\&.xz[:port]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
http[s]://host\&.xz[:port]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ftp[s]://host\&.xz[:port]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
rsync://host\&.xz/path/to/repo\&.git/
.RE
.sp
An alternatizzle scp\-like syntax may also be used wit tha ssh protocol:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
[user@]host\&.xz:path/to/repo\&.git/
.RE
.sp
This syntax is only recognized if there be no slashes before tha straight-up original gangsta colon\&. This helps differentiate a local path dat gotz nuff a cold-ass lil colon\&. For example tha local path foo:bar could be specified as a absolute path or \&./foo:bar ta avoid bein misinterpreted as a ssh url\&.
.sp
Da ssh n' git protocols additionally support ~username expansion:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ssh://[user@]host\&.xz[:port]/~[user]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
git://host\&.xz[:port]/~[user]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
[user@]host\&.xz:/~[user]/path/to/repo\&.git/
.RE
.sp
For local repositories, also supported by Git natively, tha followin syntaxes may be used:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
file:///path/to/repo\&.git/
.RE
.sp
These two syntaxes is mostly equivalent, except when cloning, when tha forma implies \-\-local option\&. Right back up in yo muthafuckin ass. See \fBgit-clone\fR(1) fo' details\&.
.sp
When Git don\(cqt know how tha fuck ta handle a cold-ass lil certain transhiznit protocol, it attempts ta use tha \fIremote\-<transport>\fR remote helper, if one exists\&. To explicitly request a remote helper, tha followin syntax may be used:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
<transport>::<address>
.RE
.sp
where <address> may be a path, a server n' path, or a arbitrary URL\-like strang recognized by tha specific remote helper bein invoked\&. Right back up in yo muthafuckin ass. See \fBgitremote-helpers\fR(1) fo' details\&.
.sp
If there be a big-ass number of similarly\-named remote repositories n' you wanna bust a gangbangin' finger-lickin' different format fo' dem (such dat tha URLs you use is ghon be rewritten tha fuck into URLs dat work), you can create a cold-ass lil configuration section of tha form:
.sp
.if n \{\
.RS 4
.\}
.nf
        [url "<actual url base>"]
                insteadOf = <other url base>
.fi
.if n \{\
.RE
.\}
.sp
.sp
For example, wit this:
.sp
.if n \{\
.RS 4
.\}
.nf
        [url "git://git\&.host\&.xz/"]
                insteadOf = host\&.xz:/path/to/
                insteadOf = work:
.fi
.if n \{\
.RE
.\}
.sp
.sp
a URL like "work:repo\&.git" or like "host\&.xz:/path/to/repo\&.git" is ghon be rewritten up in any context dat takes a URL ta be "git://git\&.host\&.xz/repo\&.git"\&.
.sp
If you wanna rewrite URLs fo' push only, you can create a cold-ass lil configuration section of tha form:
.sp
.if n \{\
.RS 4
.\}
.nf
        [url "<actual url base>"]
                pushInsteadOf = <other url base>
.fi
.if n \{\
.RE
.\}
.sp
.sp
For example, wit this:
.sp
.if n \{\
.RS 4
.\}
.nf
        [url "ssh://example\&.org/"]
                pushInsteadOf = git://example\&.org/
.fi
.if n \{\
.RE
.\}
.sp
.sp
a URL like "git://example\&.org/path/to/repo\&.git" is ghon be rewritten ta "ssh://example\&.org/path/to/repo\&.git" fo' pushes yo, but pulls will still use tha original gangsta URL\&.
.SH "REMOTES"
.sp
Da name of one of tha followin can be used instead of a URL as <repository> argument:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a remote up in tha Git configuration file:
$GIT_DIR/config,
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a file up in the
$GIT_DIR/remotes
directory, or
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a file up in the
$GIT_DIR/branches
directory\&.
.RE
.sp
All of these also allow you ta omit tha refspec from tha command line cuz they each contain a refspec which git will use by default\&.
.SS "Named remote up in configuration file"
.sp
Yo ass can chizzle ta provide tha name of a remote which you had previously configured rockin \fBgit-remote\fR(1), \fBgit-config\fR(1) or even by a manual edit ta tha $GIT_DIR/config file\&. Da URL of dis remote is ghon be used ta access tha repository\&. Da refspec of dis remote is ghon be used by default when you do not provide a refspec on tha command line\&. Da entry up in tha config file would step tha fuck up like this:
.sp
.if n \{\
.RS 4
.\}
.nf
        [remote "<name>"]
                url = <url>
                pushurl = <pushurl>
                push = <refspec>
                fetch = <refspec>
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da <pushurl> is used fo' pushes only\&. Well shiiiit, it is optionizzle n' defaults ta <url>\&.
.SS "Named file up in $GIT_DIR/remotes"
.sp
Yo ass can chizzle ta provide tha name of a gangbangin' file up in $GIT_DIR/remotes\&. Da URL up in dis file is ghon be used ta access tha repository\&. Da refspec up in dis file is ghon be used as default when you do not provide a refspec on tha command line\&. This file should have tha followin format:
.sp
.if n \{\
.RS 4
.\}
.nf
        URL: one of tha above URL format
        Push: <refspec>
        Pull: <refspec>
.fi
.if n \{\
.RE
.\}
.sp
.sp
Push: lines is used by \fIgit push\fR n' Pull: lines is used by \fIgit pull\fR n' \fIgit fetch\fR\&. Multiple Push: n' Pull: lines may be specified fo' additionizzle branch mappings\&.
.SS "Named file up in $GIT_DIR/branches"
.sp
Yo ass can chizzle ta provide tha name of a gangbangin' file up in $GIT_DIR/branches\&. Da URL up in dis file is ghon be used ta access tha repository\&. This file should have tha followin format:
.sp
.if n \{\
.RS 4
.\}
.nf
        <url>#<head>
.fi
.if n \{\
.RE
.\}
.sp
.sp
<url> is required; #<head> is optional\&.
.sp
Dependin on tha operation, git will use one of tha followin refspecs, if you don\(cqt provide one on tha command line\&. <branch> is tha name of dis file up in $GIT_DIR/branches n' <head> defaults ta master\&.
.sp
git fetch uses:
.sp
.if n \{\
.RS 4
.\}
.nf
        refs/heads/<head>:refs/heads/<branch>
.fi
.if n \{\
.RE
.\}
.sp
.sp
git push uses:
.sp
.if n \{\
.RS 4
.\}
.nf
        HEAD:refs/heads/<head>
.fi
.if n \{\
.RE
.\}
.sp
.SH "MERGE STRATEGIES"
.sp
Da merge mechanizzle (git merge n' git pull commands) allows tha backend \fImerge strategies\fR ta be chosen wit \-s option\&. Right back up in yo muthafuckin ass. Some strategies can also take they own options, which can be passed by givin \-X<option> arguments ta git merge and/or git pull\&.
.PP
resolve
.RS 4
This can only resolve two headz (i\&.e\&. tha current branch n' another branch you pulled from) rockin a 3\-way merge algorithm\&. Well shiiiit, it tries ta carefully detect criss\-cross merge ambiguitizzles n' is considered generally safe n' fast\&.
.RE
.PP
recursive
.RS 4
This can only resolve two headz rockin a 3\-way merge algorithm\&. When there is mo' than one common ancestor dat can be used fo' 3\-way merge, it creates a merged tree of tha common ancestors n' uses dat as tha reference tree fo' tha 3\-way merge\&. This has been reported ta result up in fewer merge conflicts without causin mis\-merges by tests done on actual merge commits taken from Linux 2\&.6 kernel pimpment history\& fo' realz. Additionally dis can detect n' handle merges involvin renames\&. This is tha default merge game when pullin or mergin one branch\&.
.sp
The
\fIrecursive\fR
strategy can take tha followin options:
.PP
ours
.RS 4
This option forces conflictin hunks ta be auto\-resolved cleanly by favoring
\fIour\fR
version\&. Chizzlez from tha other tree dat do not conflict wit our side is reflected ta tha merge result\&. For a funky-ass binary file, tha entire contents is taken from our side\&.
.sp
This should not be trippin wit the
\fIours\fR
merge game, which do not even peep what tha fuck tha other tree gotz nuff at all\&. Well shiiiit, it discardz every last muthafuckin thang tha other tree did, declaring
\fIour\fR
history gotz nuff all dat happened up in it\&.
.RE
.PP
theirs
.RS 4
This is tha opposite of
\fIours\fR\&.
.RE
.PP
patience
.RS 4
With dis option,
\fImerge\-recursive\fR
spendz a lil extra time ta avoid mismerges dat sometimes occur cuz of unimportant matchin lines (e\&.g\&., braces from distinct functions)\&. Use dis when tha branches ta be merged have diverged wildly\&. Right back up in yo muthafuckin ass. See also
\fBgit-diff\fR(1)\-\-patience\&.
.RE
.PP
diff\-algorithm=[patience|minimal|histogram|myers]
.RS 4
Tells
\fImerge\-recursive\fR
to bust a gangbangin' finger-lickin' different diff algorithm, which can help avoid mismerges dat occur cuz of unimportant matchin lines (like fuckin braces from distinct functions)\&. Right back up in yo muthafuckin ass. See also
\fBgit-diff\fR(1)\-\-diff\-algorithm\&.
.RE
.PP
ignore\-space\-change, ignore\-all\-space, ignore\-space\-at\-eol
.RS 4
Treats lines wit tha indicated type of whitespace chizzle as unchanged fo' tha sake of a three\-way merge\&. Whitespace chizzlez mixed wit other chizzlez ta a line is not ignored\&. Right back up in yo muthafuckin ass. See also
\fBgit-diff\fR(1)\-b,
\-w, and
\-\-ignore\-space\-at\-eol\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
\fItheir\fR
version only introduces whitespace chizzlez ta a line,
\fIour\fR
version is used;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
\fIour\fR
version introduces whitespace chizzlez but
\fItheir\fR
version includes a substantial chizzle,
\fItheir\fR
version is used;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Otherwise, tha merge proceedz up in tha usual way\&.
.RE
.RE
.PP
renormalize
.RS 4
This runs a virtual check\-out n' check\-in of all three stagez of a gangbangin' file when resolvin a three\-way merge\&. This option is meant ta be used when mergin branches wit different clean filtas or end\-of\-line normalization rules\&. Right back up in yo muthafuckin ass. See "Mergin branches wit differin checkin/checkout attributes" in
\fBgitattributes\fR(5)
for details\&.
.RE
.PP
no\-renormalize
.RS 4
Disablez the
renormalize
option\&. This overrides the
merge\&.renormalize
configuration variable\&.
.RE
.PP
rename\-threshold=<n>
.RS 4
Controls tha similaritizzle threshold used fo' rename detection\&. Right back up in yo muthafuckin ass. See also
\fBgit-diff\fR(1)\-M\&.
.RE
.PP
subtree[=<path>]
.RS 4
This option be a mo' advanced form of
\fIsubtree\fR
strategy, where tha game cook up a guess on how tha fuck two trees must be shifted ta match wit each other when merging\&. Instead, tha specified path is prefixed (or stripped from tha beginning) ta make tha shape of two trees ta match\&.
.RE
.RE
.PP
octopus
.RS 4
This resolves cases wit mo' than two headz yo, but refuses ta do a cold-ass lil complex merge dat needz manual resolution\&. Well shiiiit, it is primarily meant ta be used fo' bundlin topic branch headz together\&. This is tha default merge game when pullin or mergin mo' than one branch\&.
.RE
.PP
ours
.RS 4
This resolves any number of headz yo, but tha resultin tree of tha merge be always dat of tha current branch head, effectively ignorin all chizzlez from all other branches\&. Well shiiiit, it is meant ta be used ta supersede oldschool pimpment history of side branches\&. Note dat dis is different from tha \-Xours option ta the
\fIrecursive\fR
merge game\&.
.RE
.PP
subtree
.RS 4
This be a modified recursive game\&. When mergin trees A n' B, if B correspondz ta a subtree of A, B is first adjusted ta match tha tree structure of A, instead of readin tha trees all up in tha same level\&. This adjustment be also done ta tha common ancestor tree\&.
.RE
.sp
With tha strategies dat use 3\-way merge (includin tha default, \fIrecursive\fR), if a cold-ass lil chizzle is made on both branches yo, but lata reverted on one of tha branches, dat chizzle is ghon be present up in tha merged result; some playas find dis behavior confusing\&. Well shiiiit, it occurs cuz only tha headz n' tha merge base is considered when struttin a merge, not tha individual commits\&. Da merge algorithm therefore considaz tha reverted chizzle as no chizzle at all, n' substitutes tha chizzled version instead\&.
.SH "DEFAULT BEHAVIOUR"
.sp
Often playas use git pull without givin any parameter\&. Traditionally, dis has been equivalent ta sayin git pull origin\&. But fuck dat shiznit yo, tha word on tha street is dat when configuration branch\&.<name>\&.remote is present while on branch <name>, dat value is used instead of origin\&.
.sp
In order ta determine what tha fuck URL ta use ta fetch from, tha value of tha configuration remote\&.<origin>\&.url is consulted n' if there aint any such variable, tha value on URL: ` line up in `$GIT_DIR/remotes/<origin> file is used\&.
.sp
In order ta determine what tha fuck remote branches ta fetch (and optionally store up in tha remote\-trackin branches) when tha command is run without any refspec parametas on tha command line, jointz of tha configuration variable remote\&.<origin>\&.fetch is consulted, n' if there aren\(cqt any, $GIT_DIR/remotes/<origin> file is consulted n' its `Pull: ` lines is used\&. In addizzle ta tha refspec formats busted lyrics bout up in tha OPTIONS section, you can gotz a globbin refspec dat be lookin like this:
.sp
.if n \{\
.RS 4
.\}
.nf
refs/heads/*:refs/remotes/origin/*
.fi
.if n \{\
.RE
.\}
.sp
.sp
A globbin refspec must gotz a non\-empty RHS (i\&.e\&. must store what tha fuck was fetched up in remote\-trackin branches), n' its LHS n' RHS must end wit /*\&. Da above specifies dat all remote branches is tracked rockin remote\-trackin branches up in refs/remotes/origin/ hierarchy under tha same name\&.
.sp
Da rule ta determine which remote branch ta merge afta fetchin be a lil' bit involved, up in order not ta break backward compatibility\&.
.sp
If explicit refspecs was given on tha command line of git pull, they is all merged\&.
.sp
When no refspec was given on tha command line, then git pull uses tha refspec from tha configuration or $GIT_DIR/remotes/<origin>\&. In such cases, tha followin rulez apply:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
If
branch\&.<name>\&.merge
configuration fo' tha current branch
<name>
exists, dat is tha name of tha branch all up in tha remote joint dat is merged\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
If tha refspec be a globbin one, not a god damn thang is merged\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Otherwise tha remote branch of tha straight-up original gangsta refspec is merged\&.
.RE
.SH "EXAMPLES"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Update tha remote\-trackin branches fo' tha repository you cloned from, then merge one of dem tha fuck into yo' current branch:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git pull, git pull origin
.fi
.if n \{\
.RE
.\}
.sp
Normally tha branch merged up in is tha HEAD of tha remote repository yo, but tha chizzle is determined by tha branch\&.<name>\&.remote n' branch\&.<name>\&.merge options; see
\fBgit-config\fR(1)
for details\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Merge tha fuck into tha current branch tha remote branch
next:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git pull origin next
.fi
.if n \{\
.RE
.\}
.sp
This leaves a cold-ass lil copy of
next
temporarily up in FETCH_HEAD yo, but do not update any remote\-trackin branches\&. Usin remote\-trackin branches, tha same can be done by invokin fetch n' merge:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git fetch origin
$ git merge origin/next
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
If you tried a pull which resulted up in complex conflicts n' would wanna start over, you can recover wit \fIgit reset\fR\&.
.SH "BUGS"
.sp
Usin \-\-recurse\-submodulez can only fetch freshly smoked up commits up in already checked up submodulez right now\&. When e\&.g\&. upstream added a freshly smoked up submodule up in tha just fetched commitz of tha superproject tha submodule itself can not be fetched, makin it impossible ta check up dat submodule lata without havin ta do a gangbangin' fetch again\&. This is sposed ta fuckin be fixed up in a gangbangin' future Git version\&.
.SH "SEE ALSO"
.sp
\fBgit-fetch\fR(1), \fBgit-merge\fR(1), \fBgit-config\fR(1)
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
