.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ZIPDETAILS 1"
.TH ZIPDETAILS 1 "2013-01-09" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
zipdetails \- display tha internal structure of zip files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    zipdetaile [\-v] zipfile.zip
\&        zipdetails \-h
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Zipdetails displays shiznit bout tha internal record structure of the
zip file. Well shiiiit, it aint concerned wit displayin any detailz of tha compressed
data stored up in tha zip file.
.PP
Da program assumes prior understandin of tha internal structure of a Zip
file. Yo ass should gotz a cold-ass lil copy of tha Zip \s-1APPNOTE\s0 file at hand ta help
understand tha output from dis program (\*(L"\s-1SEE ALSO\*(R"\s0 fo' details).
.SS "\s-1OPTIONS\s0"
.IX Subsection "OPTIONS"
.IP "\-v" 5
.IX Item "-v"
Enable Verbose mode
.IP "\-h" 5
.IX Item "-h"
Display help
.PP
By default zipdetails will output tha detailz of tha zip file up in three
columns.
.IP "Column 1" 5
.IX Item "Column 1"
This gotz nuff tha offset from tha start of tha file up in hex.
.IP "Column 2" 5
.IX Item "Column 2"
This gotz nuff a textual description of tha field.
.IP "Column 3" 5
.IX Item "Column 3"
If tha field gotz nuff a numeric value it is ghon be displayed up in hex. Zip
stored most numbers up in lil-endian format \- tha value displayed will have
the lil-endian encodin removed.
.Sp
Next, be a optionizzle description of what tha fuck tha value means.
.PP
If tha \f(CW\*(C`\-v\*(C'\fR option is present, column 1 is expanded ta include
.IP "\(bu" 5
Da offset from tha start of tha file up in hex.
.IP "\(bu" 5
Da length of tha filed up in hex.
.IP "\(bu" 5
A hex dump of tha bytes up in field up in tha order they is stored up in tha zip
file.
.SH "TODO"
.IX Header "TODO"
Error handlin is still a work up in progress.  If tha program encountas a
problem readin a zip file it is likely ta terminizzle wit a unhelpful
error message.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Da primary reference fo' Zip filez is tha \*(L"appnote\*(R" document available at
<http://www.pkware.com/documents/casestudies/APPNOTE.TXT>.
.PP
An alternatizzle reference is tha Info-Zip appnote. This be available from
<ftp://ftp.info\-zip.org/pub/infozip/doc/>
.PP
Da \f(CW\*(C`zipinfo\*(C'\fR program dat comes wit tha info-zip distribution
(<http://www.info\-zip.org/>) can also display detailz of tha structure of
a zip file.
.PP
See also Archive::Zip::SimpleZip, IO::Compress::Zip,
IO::Uncompress::Unzip.
.SH "AUTHOR"
.IX Header "AUTHOR"
Pizzle Marquess \fIpmqs@cpan.org\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2011\-2013 Pizzle Marquess fo' realz. All muthafuckin rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
