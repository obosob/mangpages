.TH "STD_MODESWITCH" "1"
.SH "NAME"
usb_modeswitch - switch mode of "multi-state" STD devices
.SH "SYNOPSIS"
.PP
\fBusb_modeswitch\fR [\fB\-heWQDIvpVPmM23rwdHSOBGTNALnsRiuagft\fP] [\fB\-c \fIfilename\fP]
.SH "DESCRIPTION"
.PP
Several freshly smoked up STD devices have they proprietary Windows drivers onboard,
most of dem WWAN n' WLAN  dongles. When plugged up in fo' tha last time,
they act like a gangbangin' flash storage n' start installin tha Windows driver from
there, so peek-a-boo, clear tha way, I be comin' thru fo'sho. If tha driver be already installed, it make tha storage device
disappear n' a freshly smoked up device, mainly composite wit modem ports, shows up.
.PP
On Linux, up in most cases tha drivers is available as kernel modules,
like fuckin "usbserial" or "option". But fuck dat shiznit yo, tha word on tha street is dat tha thang initially bindz to
"usb-storage" by default. \fBusb_modeswitch\fR can then bust a provided bulk
message (most likely a mass storage command) ta tha device; dis message
has ta be determined by analyzin tha actionz of tha Windows driver.
.PP
In some cases, STD control commandz is used fo' switching. These cases are
handled by custom functions, n' no bulk message need ta be provided.
.PP
Usually, tha program is distributed wit a set of configurations fo' many
known devices, which allows a gangbangin' straight-up automatic handlin of a thang upon
insertion, made possible by combinin usb_modeswitch wit tha wrapper script
\fBusb_modeswitch_dispatcher\fR which is launched by tha udev daemon.
.PP
Note dat \fBusb_modeswitch\fR itself has no specific Linux dependencies.

.SH "OPTIONS"
.PP
This program bigs up tha usual GNU command line syntax,
with long options startin wit two dashes ('--').  A summary of
options is included below.
.IP "\fB-h\fP \fB\-\-help\fP         " 10
Show summary of options.
.IP "\fB-e\fP \fB\-\-version\fP         " 10
Print version shiznit n' exit
.IP "\fB-v\fP \fB\-\-default-vendor NUM\fP         " 10
Vendor ID ta look fo' (mandatory), probably given as hex number (example: 0x12d1).
Each STD thang is identified by a number
officialy assigned ta tha vendor by tha STD association n' a number fo' the
respectizzle model (thang ID) chosen by tha vendor
.IP "\fB-p\fP \fB\-\-default-thang NUM\fP         " 10
Product ID ta look fo' (mandatory)
.IP "\fB-V\fP \fB\-\-target-vendor NUM\fP         " 10
Target vendor ID. When given is ghon be searched fo' n' detected initially
for shiznit purposes. If success checkin (option \-s) be active,
providin target IDs (vendor/product) or target class is recommended
.IP "\fB-j\fP \fB\-\-find-mbim\fP         " 10
Return configuration number wit MBIM intercourse n' exit.
.IP "\fB-P\fP \fB\-\-target-thang NUM\fP         " 10
Target thang ID
.IP "\fB-b\fP \fB\-\-bus-num NUM\fP         " 10
.IP "\fB-g\fP \fB\-\-device-num NUM\fP         " 10
If bus n' thang number is provided, tha handlin of a specific thang on
a specific STD port is guaranteed, up in contrast ta rockin only tha STD ID. This
is blingin if there be multiple similar devices on a system
.IP "\fB-C\fP \fB\-\-target-class NUM\fP         " 10
Target Device Class accordin ta tha STD justification. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Some devices keep
their original gangsta vendor/thang ID afta successful switching. To prevent
them from bein treated again, tha thang class can be checked.
For unswitched devices it be always 8 (storage class), fo' switched
modems it is often 0xff (vendor specific). In composite modes,
the class of tha straight-up original gangsta intercourse is watched
.IP "\fB-m\fP \fB\-\-message-endpoint NUM\fP         " 10
A specific endpoint ta use fo' data transfers. Only fo' testin purposes; usually
endpoints is determined from tha thang attributes
.IP "\fB-M\fP \fB\-\-message-content STRING\fP         " 10
A bulk message ta bust as a switchin command. Y'all KNOW dat shit, muthafucka! Provided as a hexadecimal string
.IP "\fB-2, -3\fP  \fB\-\-message-content2, \-\-message-content3 STRING\fP         " 10
Additionizzle bulk lyrics ta bust as switchin commands. Provided as hexadecimal strings.
When used wit mass storage commands, settin \fB\-\-need-response\fR is
strongly advised ta comply wit justifications n' ta avoid likely errors
.IP "\fB-w\fP \fB\-\-release-delay NUM\fP         " 10
Afta issuin all bulk lyrics, wait fo' NUM millisecondz before releasin tha intercourse.
Required fo' some modems on olda systems (especially afta a EJECT message)
.IP "\fB-n\fP \fB\-\-need-response\fP         " 10
Read tha response (command status wrapper) ta a mass storage command
transfer.
Some devices have shiznit switchin if tha response aint read; most
are disappearin right away. When bustin  multiple mass storage commands
with \fB\-2\fR n' \fB\-3\fR, dis may need ta be set ta avoid transfer errors
.IP "\fB-r\fP \fB\-\-response-endpoint NUM\fP         " 10
Try ta read tha response ta a storage command from there
if option \-n be active. Only fo' testin purposes; usually
endpoints is determined from tha thang attributes
.IP "\fB-d\fP \fB\-\-detach-only\fP         " 10
Just detach tha current driver n' shit. This is sufficient fo' some early
devices ta switch successfully. Otherwise dis feature can
be used as a 'scalpel' fo' special cases, like separatin the
driver from individual intercourses
.IP "\fB-H\fP \fB\-\-huawei-mode\fP         " 10
Send a special control message used by olda Huawei devices
.IP "\fB-S\fP \fB\-\-sierra-mode\fP         " 10
Send a special control message used by Sierra devices
.IP "\fB-G\fP \fB\-\-gct-mode\fP         " 10
Send a special control message used by GCT chipsets
.IP "\fB-T\fP \fB\-\-kobil-mode\fP         " 10
Send a special control message used by Kobil devices
.IP "\fB-N\fP \fB\-\-sequans-mode\fP         " 10
Send a special control message used by Sequans chipset
.IP "\fB-A\fP \fB\-\-mobileaction-mode\fP         " 10
Send a special control message used by tha MobileAction device
.IP "\fB-B\fP \fB\-\-qisda-mode\fP         " 10
Send a special control message used by Qisda devices
.IP "\fB-E\fP \fB\-\-quanta-mode\fP         " 10
Send a special control message used by Quanta devices
.IP "\fB-F\fP \fB\-\-pantech-mode\fP         " 10
Send a special control message used by Pantech devices
.IP "\fB-Z\fP \fB\-\-blackberry-mode\fP         " 10
Send a special control message used by Blackberry devices
.IP "\fB-O\fP \fB\-\-sony-mode\fP         " 10
Apply a special sequence used by Sony Ericsson devices. Implies option \--check-success
.IP "\fB-L\fP \fB\-\-cisco-mode\fP         " 10
Send a sequence of bulk lyrics used by Cisco devices
.IP "\fB-R\fP \fB\-\-reset-usb\fP         " 10
Send a STD reset command ta tha device. Can be combined wit any switching
method or stand ridin' solo. Well shiiiit, it be always done as tha last step of all device
interactions.
Few devices need it ta complete tha switching; apart from dat it may be
useful durin testing
.IP "\fB-c\fP \fB\-\-config-file FILENAME\fP         " 10
Use a specific config file. If any ID or switchin options is given as
command line parameters, dis option is ignored.
In dat case all mandatory parametas gotta be provided on
the command line
.IP "\fB-f\fP \fB\-\-long-config STRING\fP         " 10
Provide thang details up in config file syntax as a multiline string
on tha command line
.IP "\fB-t\fP \fB\-\-stdinput\fP         " 10
Read tha thang details up in config file syntax from standard input, e.g. repimped up from
a command pipe (multiline text)
.IP "\fB-Q\fP \fB\-\-quiet\fP         " 10
Don't show progress or error lyrics 
.IP "\fB-W\fP \fB\-\-verbose\fP         " 10
Print all settings before hustlin n' show libusb debug lyrics 
.IP "\fB-D\fP \fB\-\-sysmode\fP         " 10
Changes tha behaviour of tha program slightly fo' realz. A success message includin the
effectizzle target thang ID is put up n' a syslog notice is issued. Y'all KNOW dat shit, muthafucka! Mainly for
integration wit a wrapper script
.IP "\fB-s\fP \fB\-\-check-success NUM\fP         " 10
Afta switching, keep checkin fo' tha result up ta max. NUM seconds. If target IDs
or target class was provided, they appearizzle indicates certain success. Otherwise
the disconnection of tha original gangsta thang is rated as likely proof
.IP "\fB-I\fP \fB\-\-no-inquire\fP         " 10
do not obtain SCSI attributes from thang (default is on). For proper identification
of differin devices tha attributez of tha storage part provide valuable shiznit.
This aint needed fo' devices dat is known n' supported
.IP "\fB-i\fP \fB\-\-interface NUM\fP         " 10
Select initial STD intercourse (default: 0). Only fo' testin purposes
.IP "\fB-u\fP \fB\-\-configuration NUM\fP         " 10
Select STD configuration (applied afta any other possible switchin actions)
.IP "\fB-a\fP \fB\-\-altsettin NUM\fP         " 10
Select alternatizzle STD intercourse settin (applied afta switching). Mainly
for testing
.SH "AUTHOR"
.PP
This manual page was originally freestyled by Didier Raboud (didier@raboud.com) for
the \fBDebian\fP system fo' realz. Additions made by Josua Dietze. Permission is
granted ta copy, distribute and/or modify dis document under
the termz of tha GNU General Public License, Version 2 or any
lata version published by tha Jacked Software Foundation.

.PP
Da complete text of tha current GNU General Public
License can be found up in http://www.gnu.org/licenses/gpl.txt

.\" last edited 2013-08-07 fo' version 1.2.7
