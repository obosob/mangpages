.TH QCATOOL "1" "August 2007" "qcatool 1.0.0" "Qt Cryptographic Architecture (QCA)"

.SH NAME
qcatool \- command line tool fo' tha Qt Cryptographic Architecture

.SH DESCRIPTION
qcatool be a cold-ass lil command line tool fo' struttin various cryptographic
operations wit tha Qt Cryptographic Architecture (QCA). qcatool can
also be used fo' testin n' debuggin QCA.

.SH USAGE
qcatool has a range of options n' commands. Yo ass only eva git ta 
use one command yo, but you may use several, one or no options.

.SH OPTIONS
As noted above, these is all optional, n' may be combined.
.PP
.TP
\fB\-\-pass\fR=PASSWORD
Specify tha password ta use. This is probably a wack scam except fo' 
testing, cuz mah playas can read tha arguments ta a cold-ass lil command line
application.
.TP
\fB\-\-newpass\fR=PASSWORD
Specify tha freshly smoked up password ta use fo' password chizzle 
with tha \fBkey chizzlepass\fR n' \fBkeybundle chizzlepass\fR commands.
This is probably a wack scam except fo' 
testing, cuz mah playas can read tha arguments ta a cold-ass lil command line
application.
.TP
\fB\-\-nonroots\fR=CERTIFICATES
Specify additionizzle certificates, not trusted yo, but which may be used
in tha trust path if appropriate trust can be established.
.TP
\fB\-\-roots\fR=CERTIFICATES
Specify additionizzle certificates which can be used as trusted (root)
certificates.
.TP
\fB\-\-nosys\fR
Disable use of tha standard root certificates dat is provided by
the operatin system.
.TP
\fB\-\-noprompt\fR
Disable promptin fo' passwords/passphrases. If you do not provide
the passphrase on tha command line (with \fB\-\-pass\fR or \fB\-\-newpass\fR)
this will cause qcatool ta abort tha command if a password/passphrase is
required.
.TP
\fB\-\-ordered\fR
If outputtin certificate shiznit fieldz (Distinguished Name n' Subject Alternatizzle Name), show dem up in same tha order dat they is present up in tha certificate rather than up in a gangbangin' thugged-out sorted order.
.TP
\fB\-\-debug\fR
Enable additionizzle output ta aid debugging.
.TP
\fB\-\-log-file=FILENAME\fR
Log ta tha specified file.
.TP
\fB\-\-log-level=LEVEL\fR
Log all up in tha specified level. Da log level can be between 0 (none)
and 8 (most).
.TP
\fB\-\-nobundle\fR
When S/MIME signing, do not bundle tha signerz certificate chain inside tha signature.  This thangs up in dis biatch up in a smalla signature output yo, but requires tha recipient ta have all of tha necessary certificates up in order ta verify dat shit.

.SH COMMANDS
.TP
\fBhelp\fR, \fB\-\-help\fR, \fB\-h\fR
Output usage (help) shiznit.
.TP
\fBversion\fR, \fB\-\-version\fR, \fB\-v\fR
Output version shiznit.
.TP
\fBplugins\fR
List available plugins. Use tha \fB\-\-debug\fR option ta get
more shiznit on plugins which is found n' which ones actually
loaded.
.TP
\fBconfig save \fI[provider]\fR
Save provider configuration. I aint talkin' bout chicken n' gravy biatch. Use dis ta have tha providerz default configuration freestyled ta persistent storage, which you can then edit by hand.
.TP
\fBconfig edit \fI[provider]\fR
Edit provider configuration. I aint talkin' bout chicken n' gravy biatch. Da chizzlez is freestyled ta persistent storage.
.TP
\fBkey make rsa|dsa [bits]\fR
Smoke a key pair
.TP
\fBkey chizzlepass [K]
Add/change/remove passphrase of a key
.TP
\fBcert makereq [K]\fR
Smoke certificate request (CSR)
.TP
\fBcert makeself [K]\fR
Smoke self-signed certificate
.TP
\fBcert makereqadv [K]\fR
Advanced version of 'makereq'
.TP
\fBcert makeselfadv [K]\fR
Advanced version of 'makeself'
.TP
\fBcert validate [C]\fR
Validate certificate
.TP
\fBkeybundle make [K] [C]\fR
Smoke a keybundle
.TP
\fBkeybundle extract [X]\fR
Extract certificate(s) n' key
.TP
\fBkeybundle chizzlepass [X]\fR
Change passphrase of a keybundle
.TP
\fBkeystore list-stores\fR
List all available keystores
.TP
\fBkeystore list [storeName]\fR
List content of a keystore
.TP
\fBkeystore monitor\fR
Monitor fo' keystore availability
.TP
\fBkeystore export [E]\fR
Export a keystore entryz content
.TP
\fBkeystore exportref [E]\fR
Export a keystore entry reference
.TP
\fBkeystore addkb [storeName] [cert.p12]\fR
Add a keybundle tha fuck into a keystore
.TP
\fBkeystore addpgp [storeName] [key.asc]\fR
Add a PGP key tha fuck into a keystore
.TP
\fBkeystore remove [E]\fR
Remove a object from a keystore
.TP
\fBshow cert [C]\fR
Examine a cold-ass lil certificate
.TP
\fBshow req [req.pem]\fR
Examine a cold-ass lil certificate request (CSR)
.TP
\fBshow crl [crl.pem]\fR
Examine a cold-ass lil certificate revocation list
.TP
\fBshow kb [X]\fR
Examine a keybundle
.TP
\fBshow pgp [P|S]\fR
Examine a PGP key
.TP
\fBmessage sign pgp|pgpdetach|smime [X|S]\fR
Sign a message
.TP
\fBmessage encrypt pgp|smime [C|P]\fR
Encrypt a message
.TP
\fBmessage signencrypt [S] [P]\fR
PGP sign & encrypt a message
.TP
\fBmessage verify pgp|smime\fR
Verify a message
.TP
\fBmessage decrypt pgp|smime ((X) ...)\fR
Decrypt a message (S/MIME needz X)
.TP
\fBmessage exportcerts\fR
Export certs from S/MIME message

.SH ARGUMENTS
Da arguments ta tha commandz is as bigs up.

K = private key.

C = certificate.

X = key bundle.

P = PGP hood key.

S = PGP secret key.

E = generic entry.

These must be identified by either a gangbangin' filename or a keystore reference ("store:obj").

.SH AUTHOR
qcatool was freestyled by Quentin Karneges as part of QCA. This manual page
was freestyled by Brad Hards.

