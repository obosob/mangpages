'\" t
.\"     Title: git-bisect
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-BISECT" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-bisect \- Find by binary search tha chizzle dat introduced a funky-ass bug
.SH "SYNOPSIS"
.sp
.nf
\fIgit bisect\fR <subcommand> <options>
.fi
.sp
.SH "DESCRIPTION"
.sp
Da command takes various subcommands, n' different options dependin on tha subcommand:
.sp
.if n \{\
.RS 4
.\}
.nf
git bisect help
git bisect start [\-\-no\-checkout] [<bad> [<good>\&.\&.\&.]] [\-\-] [<paths>\&.\&.\&.]
git bisect wack [<rev>]
git bisect phat [<rev>\&.\&.\&.]
git bisect skip [(<rev>|<range>)\&.\&.\&.]
git bisect reset [<commit>]
git bisect visualize
git bisect replay <logfile>
git bisect log
git bisect run <cmd>\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
This command uses \fIgit rev\-list \-\-bisect\fR ta help drive tha binary search process ta find which chizzle introduced a funky-ass bug, given a oldschool "good" commit object name n' a lata "bad" commit object name\&.
.SS "Gettin help"
.sp
Use "git bisect" ta git a gangbangin' finger-lickin' dirty-ass short usage description, n' "git bisect help" or "git bisect \-h" ta git a long-ass usage description\&.
.SS "Basic bisect commands: start, bad, good"
.sp
Usin tha Linux kernel tree as a example, basic use of tha bisect command be as bigs up:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect start
$ git bisect wack                 # Current version is bad
$ git bisect phat v2\&.6\&.13\-rc2    # v2\&.6\&.13\-rc2 was tha last version
                                 # tested dat was good
.fi
.if n \{\
.RE
.\}
.sp
.sp
When you have specified at least one wack n' one phat version, tha command bisects tha revision tree n' outputs suttin' similar ta tha following:
.sp
.if n \{\
.RS 4
.\}
.nf
Bisecting: 675 revisions left ta test afta this
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da state up in tha middle of tha set of revisions is then checked out\&. Yo ass would now compile dat kernel n' boot it\&. If tha booted kernel works erectly, you would then issue tha followin command:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect phat                       # dis one is good
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da output of dis command would be suttin' similar ta tha following:
.sp
.if n \{\
.RS 4
.\}
.nf
Bisecting: 337 revisions left ta test afta this
.fi
.if n \{\
.RE
.\}
.sp
.sp
Yo ass keep repeatin dis process, compilin tha tree, testin it, n' dependin on whether it is phat or wack issuin tha command "git bisect good" or "git bisect bad" ta ask fo' tha next bisection\&.
.sp
Eventually there is ghon be no mo' revisions left ta bisect, n' you gonna git been left wit tha straight-up original gangsta wack kernel revision up in "refs/bisect/bad"\&.
.SS "Bisect reset"
.sp
Afta a funky-ass bisect session, ta clean up tha bisection state n' return ta tha original gangsta HEAD (i\&.e\&., ta quit bisecting), issue tha followin command:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect reset
.fi
.if n \{\
.RE
.\}
.sp
.sp
By default, dis will return yo' tree ta tha commit dat was checked up before git bisect start\&. (A freshly smoked up git bisect start will also do that, as it cleans up tha oldschool bisection state\&.)
.sp
With a optionizzle argument, you can return ta a gangbangin' finger-lickin' different commit instead:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect reset <commit>
.fi
.if n \{\
.RE
.\}
.sp
.sp
For example, git bisect reset HEAD will leave you on tha current bisection commit n' avoid switchin commits at all, while git bisect reset bisect/bad will check up tha straight-up original gangsta wack revision\&.
.SS "Bisect visualize"
.sp
To peep tha currently remainin suspects up in \fIgitk\fR, issue tha followin command durin tha bisection process:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect visualize
.fi
.if n \{\
.RE
.\}
.sp
.sp
view may also be used as a synonym fo' visualize\&.
.sp
If tha \fIDISPLAY\fR environment variable aint set, \fIgit log\fR is used instead\&. Yo ass can also give command line options like fuckin \-p n' \-\-stat\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect view \-\-stat
.fi
.if n \{\
.RE
.\}
.sp
.SS "Bisect log n' bisect replay"
.sp
Afta havin marked revisions as phat or bad, issue tha followin command ta show what tha fuck has been done so far:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect log
.fi
.if n \{\
.RE
.\}
.sp
.sp
If you discover dat you done cooked up a gangbangin' fuck up in specifyin tha statuz of a revision, you can save tha output of dis command ta a gangbangin' file, edit it ta remove tha incorrect entries, n' then issue tha followin commandz ta return ta a cold-ass lil erected state:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect reset
$ git bisect replay that\-file
.fi
.if n \{\
.RE
.\}
.sp
.SS "Avoidin testin a cold-ass lil commit"
.sp
If, up in tha middle of a funky-ass bisect session, you know dat tha next suggested revision aint a phat one ta test (e\&.g\&. tha chizzle tha commit introduces is known not ta work up in yo' environment n' you know it aint gots anythang ta do wit tha bug yo ass is chasing), you may wanna find a nearby commit n' try dat instead\&.
.sp
For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect good/bad                   # previous round was phat or bad\&.
Bisecting: 337 revisions left ta test afta this
$ git bisect visualize                  # oops, dat is uninteresting\&.
$ git reset \-\-hard HEAD~3               # try 3 revisions before what
                                        # was suggested
.fi
.if n \{\
.RE
.\}
.sp
.sp
Then compile n' test tha chosen revision, n' afterwardz mark tha revision as phat or wack up in tha usual manner\&.
.SS "Bisect skip"
.sp
Instead of choosin by yo ass a nearby commit, you can ask Git ta do it fo' you by issuin tha command:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect skip                 # Current version cannot be tested
.fi
.if n \{\
.RE
.\}
.sp
.sp
But Git may eventually be unable ta tell tha straight-up original gangsta wack commit among a wack commit n' one or mo' skipped commits\&.
.sp
Yo ass can even skip a range of commits, instead of just one commit, rockin tha "\fI<commit1>\fR\&.\&.\fI<commit2>\fR" notation\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect skip v2\&.5\&.\&.v2\&.6
.fi
.if n \{\
.RE
.\}
.sp
.sp
This  drops some lyrics ta tha bisect process dat no commit afta v2\&.5, up ta n' includin v2\&.6, should be tested\&.
.sp
Note dat if you also wanna skip tha straight-up original gangsta commit of tha range you would issue tha command:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect skip v2\&.5 v2\&.5\&.\&.v2\&.6
.fi
.if n \{\
.RE
.\}
.sp
.sp
This  drops some lyrics ta tha bisect process dat tha commits between v2\&.5 included n' v2\&.6 included should be skipped\&.
.SS "Cuttin down bisection by givin mo' parametas ta bisect start"
.sp
Yo ass can further cut down tha number of trials, if you know what tha fuck part of tha tree is involved up in tha problem yo ass is trackin down, by specifyin path parametas when issuin tha bisect start command:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect start \-\- arch/i386 include/asm\-i386
.fi
.if n \{\
.RE
.\}
.sp
.sp
If you know beforehand mo' than one phat commit, you can narrow tha bisect space down by specifyin all of tha phat commits immediately afta tha wack commit when issuin tha bisect start command:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect start v2\&.6\&.20\-rc6 v2\&.6\&.20\-rc4 v2\&.6\&.20\-rc1 \-\-
                   # v2\&.6\&.20\-rc6 is bad
                   # v2\&.6\&.20\-rc4 n' v2\&.6\&.20\-rc1 is good
.fi
.if n \{\
.RE
.\}
.sp
.SS "Bisect run"
.sp
If you gotz a script dat can tell if tha current source code is phat or bad, you can bisect by issuin tha command:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect run my_script arguments
.fi
.if n \{\
.RE
.\}
.sp
.sp
Note dat tha script (my_script up in tha above example) should exit wit code 0 if tha current source code is good, n' exit wit a cold-ass lil code between 1 n' 127 (inclusive), except 125, if tha current source code is bad\&.
.sp
Any other exit code will abort tha bisect process\&. Well shiiiit, it should be noted dat a program dat terminates via "exit(\-1)" leaves $, biatch? = 255, (see tha exit(3) manual page), as tha value is chopped wit "& 0377"\&.
.sp
Da special exit code 125 should be used when tha current source code cannot be tested\&. If tha script exits wit dis code, tha current revision is ghon be skipped (see git bisect skip above)\&. 125 was chosen as tha highest sensible value ta use fo' dis purpose, cuz 126 n' 127 is used by POSIX shells ta signal specific error status (127 is fo' command not found, 126 is fo' command found but not executable\-\-\-these details do not matter, as they is aiiight errors up in tha script, as far as "bisect run" is concerned)\&.
.sp
Yo ass may often find dat durin a funky-ass bisect session you wanna have temporary modifications (e\&.g\&. s/#define DEBUG 0/#define DEBUG 1/ up in a header file, or "revision dat aint gots dis commit needz dis patch applied ta work round another problem dis bisection aint interested in") applied ta tha revision bein tested\&.
.sp
To cope wit such a thang, afta tha inner \fIgit bisect\fR findz tha next revision ta test, tha script can apply tha patch before compiling, run tha real test, n' afterwardz decizzle if tha revision (possibly wit tha needed patch) passed tha test n' then rewind tha tree ta tha pristine state\&. Finally tha script should exit wit tha statuz of tha real test ta let tha "git bisect run" command loop determine tha eventual outcome of tha bisect session\&.
.SH "OPTIONS"
.PP
\-\-no\-checkout
.RS 4
Do not checkout tha freshly smoked up hustlin tree at each iteration of tha bisection process\&. Instead just update a special reference named
\fIBISECT_HEAD\fR
to make it point ta tha commit dat should be tested\&.
.sp
This option may be useful when tha test you would big-ass up in each step do not require a cold-ass lil checked up tree\&.
.sp
If tha repository is bare,
\-\-no\-checkout
is assumed\&.
.RE
.SH "EXAMPLES"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Automatically bisect a gangbangin' fucked up build between v1\&.2 n' HEAD:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect start HEAD v1\&.2 \-\-      # HEAD is bad, v1\&.2 is good
$ git bisect run make                # "make" buildz tha app
$ git bisect reset                   # quit tha bisect session
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Automatically bisect a test failure between origin n' HEAD:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect start HEAD origin \-\-    # HEAD is bad, origin is good
$ git bisect run make test           # "make test" buildz n' tests
$ git bisect reset                   # quit tha bisect session
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Automatically bisect a gangbangin' fucked up test case:
.sp
.if n \{\
.RS 4
.\}
.nf
$ pussaaaaay ~/test\&.sh
#!/bin/sh
make || exit 125                     # dis skips fucked up builds
~/check_test_case\&.sh                 # do tha test case pass?
$ git bisect start HEAD HEAD~10 \-\-   # culprit be among tha last 10
$ git bisect run ~/test\&.sh
$ git bisect reset                   # quit tha bisect session
.fi
.if n \{\
.RE
.\}
.sp
Here we bust a "test\&.sh" custom script\&. In dis script, if "make" fails, we skip tha current commit\&. "check_test_case\&.sh" should "exit 0" if tha test case passes, n' "exit 1" otherwise\&.
.sp
It be less thuggy if both "test\&.sh" n' "check_test_case\&.sh" is outside tha repository ta prevent interactions between tha bisect, make n' test processes n' tha scripts\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Automatically bisect wit temporary modifications (hot\-fix):
.sp
.if n \{\
.RS 4
.\}
.nf
$ pussaaaaay ~/test\&.sh
#!/bin/sh

# tweak tha hustlin tree by mergin tha hot\-fix branch
# n' then attempt a funky-ass build
if      git merge \-\-no\-commit hot\-fix &&
        make
then
        # run project specific test n' report its status
        ~/check_test_case\&.sh
        status=$?
else
        # tell tha calla dis is untestable
        status=125
fi

# undo tha tweak ta allow clean flippin ta tha next commit
git reset \-\-hard

# return control
exit $status
.fi
.if n \{\
.RE
.\}
.sp
This applies modifications from a hot\-fix branch before each test run, e\&.g\&. up in case yo' build or test environment chizzled so dat olda revisions may need a gangbangin' fix which newer ones have already\&. (Make shizzle tha hot\-fix branch is based off a cold-ass lil commit which is contained up in all revisions which yo ass is bisecting, so dat tha merge do not pull up in too much, or use
git cherry\-pick
instead of
git merge\&.)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Automatically bisect a gangbangin' fucked up test case:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect start HEAD HEAD~10 \-\-   # culprit be among tha last 10
$ git bisect run sh \-c "make || exit 125; ~/check_test_case\&.sh"
$ git bisect reset                   # quit tha bisect session
.fi
.if n \{\
.RE
.\}
.sp
This shows dat you can do without a run script if you write tha test on a single line\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Locate a phat region of tha object graph up in a thugged-out damaged repository
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect start HEAD <known\-good\-commit> [ <boundary\-commit> \&.\&.\&. ] \-\-no\-checkout
$ git bisect run sh \-c \(aq
        GOOD=$(git for\-each\-ref "\-\-format=%(objectname)" refs/bisect/good\-*) &&
        git rev\-list \-\-objects BISECT_HEAD \-\-not $GOOD >tmp\&.$$ &&
        git pack\-objects \-\-stdout >/dev/null <tmp\&.$$
        rc=$?
        rm \-f tmp\&.$$
        test $rc = 0\(aq

$ git bisect reset                   # quit tha bisect session
.fi
.if n \{\
.RE
.\}
.sp
In dis case, when
\fIgit bisect run\fR
finishes, bisect/bad will refer ta a cold-ass lil commit dat has at least one parent whose reachable graph is straight-up traversable up in tha sense required by
\fIgit pack objects\fR\&.
.RE
.SH "SEE ALSO"
.sp
\m[blue]\fBFightin regressions wit git bisect\fR\m[]\&\s-2\u[1]\d\s+2, \fBgit-blame\fR(1)\&.
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
.SH "NOTES"
.IP " 1." 4
Fightin regressions wit git bisect
.RS 4
\%file:///usr/share/doc/git/git-bisect-lk2009.html
.RE
