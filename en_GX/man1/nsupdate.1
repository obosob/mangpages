.\" Copyright (C) 2004-2012 Internizzle Systems Consortium, Inc. ("ISC")
.\" Copyright (C) 2000-2003 Internizzle Software Consortium.
.\" 
.\" Permission ta use, copy, modify, and/or distribute dis software fo' any
.\" purpose wit or without fee is hereby granted, provided dat tha above
.\" copyright notice n' dis permission notice step tha fuck up in all copies.
.\" 
.\" THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
.\" REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
.\" INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
.\" LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
.\" OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
.\" PERFORMANCE OF THIS SOFTWARE.
.\"
.\" $Id$
.\"
.hy 0
.ad l
.\"     Title: nsupdate
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.71.1 <http://docbook.sf.net/>
.\"      Date: Aug 25, 2009
.\"    Manual: BIND9
.\"    Source: BIND9
.\"
.TH "NSUPDATE" "1" "Aug 25, 2009" "BIND9" "BIND9"
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.SH "NAME"
nsupdate \- Dynamic DNS update utility
.SH "SYNOPSIS"
.HP 9
\fBnsupdate\fR [\fB\-d\fR] [\fB\-D\fR] [[\fB\-g\fR] | [\fB\-o\fR] | [\fB\-l\fR] | [\fB\-y\ \fR\fB\fI[hmac:]\fR\fIkeyname:secret\fR\fR] | [\fB\-k\ \fR\fB\fIkeyfile\fR\fR]] [\fB\-t\ \fR\fB\fItimeout\fR\fR] [\fB\-u\ \fR\fB\fIudptimeout\fR\fR] [\fB\-r\ \fR\fB\fIudpretries\fR\fR] [\fB\-R\ \fR\fB\fIrandomdev\fR\fR] [\fB\-v\fR] [filename]
.SH "DESCRIPTION"
.PP
\fBnsupdate\fR
is used ta submit Dynamic DNS Update requests as defined up in RFC 2136 ta a name server n' shit. This allows resource recordz ta be added or removed from a unit without manually editin tha unit file fo' realz. A single update request can contain requests ta add or remove mo' than one resource record.
.PP
Zones dat is under dynamic control via
\fBnsupdate\fR
or a DHCP server should not be edited by hand. Y'all KNOW dat shit, muthafucka! Manual edits could conflict wit dynamic thugged-out shiznit n' cause data ta be lost.
.PP
Da resource recordz dat is dynamically added or removed with
\fBnsupdate\fR
have ta be up in tha same unit. Requests is busted ta tha unitz masta server n' shit. This is identified by tha MNAME field of tha unitz SOA record.
.PP
The
\fB\-d\fR
option makes
\fBnsupdate\fR
operate up in debug mode. This serves up tracin shiznit bout tha update requests dat is made n' tha replies received from tha name server.
.PP
The
\fB\-D\fR
option makes
\fBnsupdate\fR
report additionizzle debuggin shiznit to
\fB\-d\fR.
.PP
The
\fB\-L\fR
option wit a integer argument of zero or higher sets tha loggin debug level. If zero, loggin is disabled.
.PP
Transaction signatures can be used ta authenticate tha Dynamic DNS thugged-out shit. These use tha TSIG resource record type busted lyrics bout up in RFC 2845 or tha SIG(0) record busted lyrics bout up in RFC 2535 n' RFC 2931 or GSS\-TSIG as busted lyrics bout up in RFC 3645. TSIG relies on a gangbangin' finger-lickin' dirty-ass shared secret dat should only be known to
\fBnsupdate\fR
and tha name server n' shit. Currently, tha only supported encryption algorithm fo' TSIG is HMAC\-MD5, which is defined up in RFC 2104. Once other algorithms is defined fo' TSIG, applications will need ta ensure they select tha appropriate algorithm as well as tha key when authenticatin each other n' shit. For instance, suitable
\fBkey\fR
and
\fBserver\fR
statements would be added to
\fI/etc/named.conf\fR
so dat tha name server can associate tha appropriate secret key n' algorithm wit tha IP address of tha client application dat is ghon be rockin TSIG authentication. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. SIG(0) uses hood key cryptography. To bust a SIG(0) key, tha hood key must be stored up in a KEY record up in a unit served by tha name server.
\fBnsupdate\fR
does not read
\fI/etc/named.conf\fR.
.PP
GSS\-TSIG uses Kerberos credentials. Right back up in yo muthafuckin ass. Standard GSS\-TSIG mode is switched on wit the
\fB\-g\fR
flag fo' realz. A non\-standards\-compliant variant of GSS\-TSIG used by Windows 2000 can be switched on wit the
\fB\-o\fR
flag.
.PP
\fBnsupdate\fR
uses the
\fB\-y\fR
or
\fB\-k\fR
option ta provide tha shared secret needed ta generate a TSIG record fo' authenticatin Dynamic DNS update requests, default type HMAC\-MD5. These options is mutually exclusive.
.PP
When the
\fB\-y\fR
option is used, a signature is generated from
[\fIhmac:\fR]\fIkeyname:secret.\fR
\fIkeyname\fR
is tha name of tha key, and
\fIsecret\fR
is tha base64 encoded shared secret. Use of the
\fB\-y\fR
option is discouraged cuz tha shared secret is supplied as a cold-ass lil command line argument up in clear text. This may be visible up in tha output from
\fBps\fR(1)
or up in a history file maintained by tha userz shell.
.PP
With the
\fB\-k\fR
option,
\fBnsupdate\fR
readz tha shared secret from tha file
\fIkeyfile\fR. Keyfilez may be up in two formats: a single file containin a
\fInamed.conf\fR\-format
\fBkey\fR
statement, which may be generated automatically by
\fBddns\-confgen\fR, or a pair of filez whose names iz of tha format
\fIK{name}.+157.+{random}.key\fR
and
\fIK{name}.+157.+{random}.private\fR, which can be generated by
\fBdnssec\-keygen\fR. The
\fB\-k\fR
may also be used ta specify a SIG(0) key used ta authenticate Dynamic DNS update requests, n' you can put dat on yo' toast. In dis case, tha key specified aint a HMAC\-MD5 key.
.PP
\fBnsupdate\fR
can be run up in a local\-host only mode rockin the
\fB\-l\fR
flag. This sets tha server address ta localhost (disablin the
\fBserver\fR
so dat tha server address cannot be overridden). Connections ta tha local server will bust a TSIG key found in
\fI/var/run/named/session.key\fR, which be automatically generated by
\fBnamed\fR
if any local masta unit has set
\fBupdate\-policy\fR
to
\fBlocal\fR. Da location of dis key file can be overridden wit the
\fB\-k\fR
option.
.PP
By default,
\fBnsupdate\fR
uses UDP ta bust update requests ta tha name server unless they is too big-ass ta fit up in a UDP request up in which case TCP is ghon be used. Y'all KNOW dat shit, muthafucka! The
\fB\-v\fR
option makes
\fBnsupdate\fR
use a TCP connection. I aint talkin' bout chicken n' gravy biatch. This may be preferable when a funky-ass batch of update requests is made.
.PP
The
\fB\-p\fR
sets tha default port number ta use fo' connections ta a name server n' shit. Da default is 53.
.PP
The
\fB\-t\fR
option sets tha maximum time a update request can take before it be aborted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da default is 300 seconds. Zero can be used ta disable tha timeout.
.PP
The
\fB\-u\fR
option sets tha UDP retry interval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da default is 3 seconds. If zero, tha interval is ghon be computed from tha timeout interval n' number of UDP retries.
.PP
The
\fB\-r\fR
option sets tha number of UDP retries. Put ya muthafuckin choppers up if ya feel dis! Da default is 3. If zero, only one update request is ghon be made.
.PP
The
\fB\-R \fR\fB\fIrandomdev\fR\fR
option specifies a source of randomness. If tha operatin system do not provide a
\fI/dev/random\fR
or equivalent device, tha default source of randomnizz is keyboard input.
\fIrandomdev\fR
specifies tha name of a cold-ass lil characta thang or file containin random data ta be used instead of tha default. Da special value
\fIkeyboard\fR
indicates dat keyboard input should be used. Y'all KNOW dat shit, muthafucka! This option may be specified multiple times.
.SH "INPUT FORMAT"
.PP
\fBnsupdate\fR
readz input from
\fIfilename\fR
or standard input. Each command is supplied on exactly one line of input. Right back up in yo muthafuckin ass. Some commandz is fo' administratizzle purposes. Da others is either update instructions or prerequisite checks on tha contentz of tha unit. These checks set conditions dat some name or set of resource recordz (RRset) either exists or be absent from tha unit. These conditions must be kicked it wit if tha entire update request is ta succeed. Y'all KNOW dat shit, muthafucka! Updates is ghon be rejected if tha tests fo' tha prerequisite conditions fail.
.PP
Every update request consistz of zero or mo' prerequisites n' zero or mo' thugged-out shit. This allows a suitably authenticated update request ta proceed if some specified resource recordz is present or missin from tha unit fo' realz. A blank input line (or the
\fBsend\fR
command) causes tha accumulated commandz ta be busted as one Dynamic DNS update request ta tha name server.
.PP
Da command formats n' they meanin is as bigs up:
.PP
\fBserver\fR {servername} [port]
.RS 4
Sendz all dynamic update requests ta tha name server
\fIservername\fR. When no server statement is provided,
\fBnsupdate\fR
will bust thugged-out shiznit ta tha masta server of tha erect unit. Da MNAME field of dat unitz SOA record will identify tha masta server fo' dat unit.
\fIport\fR
is tha port number on
\fIservername\fR
where tha dynamic update requests git sent. If no port number is specified, tha default DNS port number of 53 is used.
.RE
.PP
\fBlocal\fR {address} [port]
.RS 4
Sendz all dynamic update requests rockin tha local
\fIaddress\fR. When no local statement is provided,
\fBnsupdate\fR
will bust thugged-out shiznit rockin a address n' port chosen by tha system.
\fIport\fR
can additionally be used ta make requests come from a specific port. If no port number is specified, tha system will assign one.
.RE
.PP
\fBzone\fR {zonename}
.RS 4
Specifies dat all thugged-out shiznit is ta be made ta tha unit
\fIzonename\fR. If no
\fIzone\fR
statement is provided,
\fBnsupdate\fR
will attempt determine tha erect unit ta update based on tha rest of tha input.
.RE
.PP
\fBclass\fR {classname}
.RS 4
Specify tha default class. If no
\fIclass\fR
is specified, tha default class is
\fIIN\fR.
.RE
.PP
\fBttl\fR {seconds}
.RS 4
Specify tha default time ta live fo' recordz ta be added. Y'all KNOW dat shit, muthafucka! Da value
\fInone\fR
will clear tha default ttl.
.RE
.PP
\fBkey\fR {name} {secret}
.RS 4
Specifies dat all thugged-out shiznit is ta be TSIG\-signed rockin the
\fIkeyname\fR
\fIkeysecret\fR
pair. Shiiit, dis aint no joke. The
\fBkey\fR
command overrides any key specified on tha command line via
\fB\-y\fR
or
\fB\-k\fR.
.RE
.PP
\fBgsstsig\fR
.RS 4
Use GSS\-TSIG ta sign tha updated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This is equivalent ta specifying
\fB\-g\fR
on tha commandline.
.RE
.PP
\fBoldgsstsig\fR
.RS 4
Use tha Windows 2000 version of GSS\-TSIG ta sign tha updated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This is equivalent ta specifying
\fB\-o\fR
on tha commandline.
.RE
.PP
\fBrealm\fR {[realm_name]}
.RS 4
When rockin GSS\-TSIG use
\fIrealm_name\fR
rather than tha default realm in
\fIkrb5.conf\fR. If no realm is specified tha saved realm is cleared.
.RE
.PP
\fB[prereq]\fR\fB nxdomain\fR {domain\-name}
.RS 4
Requires dat no resource record of any type exists wit name
\fIdomain\-name\fR.
.RE
.PP
\fB[prereq]\fR\fB yxdomain\fR {domain\-name}
.RS 4
Requires that
\fIdomain\-name\fR
exists (has as at least one resource record, of any type).
.RE
.PP
\fB[prereq]\fR\fB nxrrset\fR {domain\-name} [class] {type}
.RS 4
Requires dat no resource record existz of tha specified
\fItype\fR,
\fIclass\fR
and
\fIdomain\-name\fR. If
\fIclass\fR
is omitted, IN (internet) be assumed.
.RE
.PP
\fB[prereq]\fR\fB yxrrset\fR {domain\-name} [class] {type}
.RS 4
This requires dat a resource record of tha specified
\fItype\fR,
\fIclass\fR
and
\fIdomain\-name\fR
must exist. If
\fIclass\fR
is omitted, IN (internet) be assumed.
.RE
.PP
\fB[prereq]\fR\fB yxrrset\fR {domain\-name} [class] {type} {data...}
.RS 4
The
\fIdata\fR
from each set of prerequisitez of dis form pluggin a cold-ass lil common
\fItype\fR,
\fIclass\fR, and
\fIdomain\-name\fR
are combined ta form a set of RRs. This set of RRs must exactly match tha set of RRs existin up in tha unit all up in tha given
\fItype\fR,
\fIclass\fR, and
\fIdomain\-name\fR. The
\fIdata\fR
are freestyled up in tha standard text representation of tha resource recordz RDATA.
.RE
.PP
\fB[update]\fR\fB del\fR\fB[ete]\fR {domain\-name} [ttl] [class] [type\ [data...]]
.RS 4
Deletes any resource recordz named
\fIdomain\-name\fR. If
\fItype\fR
and
\fIdata\fR
is provided, only matchin resource recordz is ghon be removed. Y'all KNOW dat shit, muthafucka! Da internizzle class be assumed if
\fIclass\fR
is not supplied. Y'all KNOW dat shit, muthafucka! The
\fIttl\fR
is ignored, n' is only allowed fo' compatibility.
.RE
.PP
\fB[update]\fR\fB add\fR {domain\-name} {ttl} [class] {type} {data...}
.RS 4
Addz a freshly smoked up resource record wit tha specified
\fIttl\fR,
\fIclass\fR
and
\fIdata\fR.
.RE
.PP
\fBshow\fR
.RS 4
Displays tha current message, containin all of tha prerequisites n' thugged-out shiznit specified since tha last send.
.RE
.PP
\fBsend\fR
.RS 4
Sendz tha current message. This is equivalent ta enterin a funky-ass blank line.
.RE
.PP
\fBanswer\fR
.RS 4
Displays tha answer.
.RE
.PP
\fBdebug\fR
.RS 4
Turn on debugging.
.RE
.PP
Lines beginnin wit a semicolon is comments n' is ignored.
.SH "EXAMPLES"
.PP
Da examplez below show how
\fBnsupdate\fR
could be used ta bang n' delete resource recordz from the
\fBexample.com\fR
zone. Notice dat tha input up in each example gotz nuff a trailin blank line so dat a crew of commandz is busted as one dynamic update request ta tha masta name server for
\fBexample.com\fR.
.sp
.RS 4
.nf
# nsupdate
> update delete oldhost.example.com A
> update add newhost.example.com 86400 A 172.16.1.1
> send
.fi
.RE
.sp
.PP
Any A recordz for
\fBoldhost.example.com\fR
are deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. And a A record for
\fBnewhost.example.com\fR
with IP address 172.16.1.1 be added. Y'all KNOW dat shit, muthafucka! Da newly\-added record has a 1 dizzle TTL (86400 seconds).
.sp
.RS 4
.nf
# nsupdate
> prereq nxdomain nickname.example.com
> update add nickname.example.com 86400 CNAME somehost.example.com
> send
.fi
.RE
.sp
.PP
Da prerequisite condizzle gets tha name server ta check dat there be no resource recordz of any type for
\fBnickname.example.com\fR. If there are, tha update request fails. If dis name do not exist, a CNAME fo' it be added. Y'all KNOW dat shit, muthafucka! This ensures dat when tha CNAME be added, it cannot conflict wit tha long\-standin rule up in RFC 1034 dat a name must not exist as any other record type if it exists as a CNAME. (Da rule has been updated fo' DNSSEC up in RFC 2535 ta allow CNAMEs ta have RRSIG, DNSKEY n' NSEC records.)
.SH "FILES"
.PP
\fB/etc/resolv.conf\fR
.RS 4
used ta identify default name server
.RE
.PP
\fB/var/run/named/session.key\fR
.RS 4
sets tha default TSIG key fo' use up in local\-only mode
.RE
.PP
\fBK{name}.+157.+{random}.key\fR
.RS 4
base\-64 encodin of HMAC\-MD5 key pimped by
\fBdnssec\-keygen\fR(8).
.RE
.PP
\fBK{name}.+157.+{random}.private\fR
.RS 4
base\-64 encodin of HMAC\-MD5 key pimped by
\fBdnssec\-keygen\fR(8).
.RE
.SH "SEE ALSO"
.PP
RFC 2136,
RFC 3007,
RFC 2104,
RFC 2845,
RFC 1034,
RFC 2535,
RFC 2931,
\fBnamed\fR(8),
\fBddns\-confgen\fR(8),
\fBdnssec\-keygen\fR(8).
.SH "BUGS"
.PP
Da TSIG key is redundantly stored up in two separate files. This be a cold-ass lil consequence of nsupdate rockin tha DST library fo' its cryptographic operations, n' may chizzle up in future releases.
.SH "COPYRIGHT"
Copyright \(co 2004\-2012 Internizzle Systems Consortium, Inc. ("ISC")
.br
Copyright \(co 2000\-2003 Internizzle Software Consortium.
.br
