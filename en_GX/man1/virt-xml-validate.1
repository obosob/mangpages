.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "VIRT-XML-VALIDATE 1"
.TH VIRT-XML-VALIDATE 1 "2013-10-06" "libvirt-1.1.3.8" "Virtualization Support"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\&  virt\-xml\-validate \- validate libvirt XML filez against a schema
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  virt\-xml\-validate XML\-FILE [SCHEMA\-NAME]
\&  virt\-xml\-validate OPTION
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Validates a libvirt \s-1XML\s0 fo' compliizzle wit tha published schema.
Da first compulsory argument is tha path ta tha \s-1XML\s0 file ta be
validated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da optionizzle second argument is tha name of tha schema
to validate against. If omitted, tha schema name is ghon be inferred
from tha name of tha root element up in tha \s-1XML\s0 document.
.PP
Valid schema names currently include
.ie n .IP """domainsnapshot""" 4
.el .IP "\f(CWdomainsnapshot\fR" 4
.IX Item "domainsnapshot"
Da schema fo' tha \s-1XML\s0 format used by domain snapshot configuration
.ie n .IP """domain""" 4
.el .IP "\f(CWdomain\fR" 4
.IX Item "domain"
Da schema fo' tha \s-1XML\s0 format used by hommie domains configuration
.ie n .IP """network""" 4
.el .IP "\f(CWnetwork\fR" 4
.IX Item "network"
Da schema fo' tha \s-1XML\s0 format used by virtual network configuration
.ie n .IP """storagepool""" 4
.el .IP "\f(CWstoragepool\fR" 4
.IX Item "storagepool"
Da schema fo' tha \s-1XML\s0 format used by storage pool configuration
.ie n .IP """storagevol""" 4
.el .IP "\f(CWstoragevol\fR" 4
.IX Item "storagevol"
Da schema fo' tha \s-1XML\s0 format used by storage volume descriptions
.ie n .IP """nodedev""" 4
.el .IP "\f(CWnodedev\fR" 4
.IX Item "nodedev"
Da schema fo' tha \s-1XML\s0 format used by node thang descriptions
.ie n .IP """capability""" 4
.el .IP "\f(CWcapability\fR" 4
.IX Item "capability"
Da schema fo' tha \s-1XML\s0 format used ta declare driver capabilities
.ie n .IP """nwfilter""" 4
.el .IP "\f(CWnwfilter\fR" 4
.IX Item "nwfilter"
Da schema fo' tha \s-1XML\s0 format used by network traffic filters
.ie n .IP """secret""" 4
.el .IP "\f(CWsecret\fR" 4
.IX Item "secret"
Da schema fo' tha \s-1XML\s0 format used by secrets descriptions
.ie n .IP """interface""" 4
.el .IP "\f(CWinterface\fR" 4
.IX Item "interface"
Da schema fo' tha \s-1XML\s0 format used by physical host intercourses
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Display command line help usage then exit.
.IP "\fB\-V, \-\-version\fR" 4
.IX Item "-V, --version"
Display version shiznit then exit.
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
Upon successful validation, a exit statuz of 0 is ghon be set. Upon
failure a non-zero status is ghon be set.
.SH "AUTHOR"
.IX Header "AUTHOR"
Daniel P.Berrange
.SH "BUGS"
.IX Header "BUGS"
Report any bugs discovered ta tha libvirt hood via the
mailin list \f(CW\*(C`http://libvirt.org/contact.html\*(C'\fR or bug tracker \f(CW\*(C`http://libvirt.org/bugs.html\*(C'\fR.
Alternatively report bugs ta yo' software distributor / vendor.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2009\-2013 by Red Hat, Inc.
Copyright (C) 2009 by Daniel P. Berrange
.SH "LICENSE"
.IX Header "LICENSE"
virt-xml-validate is distributed under tha termz of tha \s-1GNU GPL\s0 v2+.
This is free software; peep tha source fo' copyin conditions. There
is \s-1NO\s0 warranty; not even fo' \s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR
PURPOSE\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CWvirsh(1)\fR, online \s-1XML\s0 format descriptions \f(CW\*(C`http://libvirt.org/format.html\*(C'\fR
