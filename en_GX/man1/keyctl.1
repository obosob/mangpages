.\"
.\" Copyright (C) 2004 Red Hat, Inc fo' realz. All Rights Reserved.
.\" Written by Dizzy Howells (dhowells@redhat.com)
.\"
.\" This program is free software; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License
.\" as published by tha Jacked Software Foundation; either version
.\" 2 of tha License, or (at yo' option) any lata version.
.\"
.TH KEYCTL 1 "20 Feb 2014" Linux "Linux Key Management Utilities"
.SH NAME
keyctl - Key pimpment facilitizzle control
.SH SYNOPSIS
\fBkeyctl\fR --version
.br
\fBkeyctl\fR show [-x] [<keyring>]
.br
\fBkeyctl\fR add <type> <desc> <data> <keyring>
.br
\fBkeyctl\fR padd <type> <desc> <keyring>
.br
\fBkeyctl\fR request <type> <desc> [<dest_keyring>]
.br
\fBkeyctl\fR request2 <type> <desc> <info> [<dest_keyring>]
.br
\fBkeyctl\fR prequest2 <type> <desc> [<dest_keyring>]
.br
\fBkeyctl\fR update <key> <data>
.br
\fBkeyctl\fR pupdate <key>
.br
\fBkeyctl\fR newrin <name> <keyring>
.br
\fBkeyctl\fR revoke <key>
.br
\fBkeyctl\fR clear <keyring>
.br
\fBkeyctl\fR link <key> <keyring>
.br
\fBkeyctl\fR unlink <key> [<keyring>]
.br
\fBkeyctl\fR search <keyring> <type> <desc> [<dest_keyring>]
.br
\fBkeyctl\fR read <key>
.br
\fBkeyctl\fR pipe <key>
.br
\fBkeyctl\fR print <key>
.br
\fBkeyctl\fR list <keyring>
.br
\fBkeyctl\fR rlist <keyring>
.br
\fBkeyctl\fR describe <keyring>
.br
\fBkeyctl\fR rdescribe <keyring> [sep]
.br
\fBkeyctl\fR chown <key> <uid>
.br
\fBkeyctl\fR chgrp <key> <gid>
.br
\fBkeyctl\fR setperm <key> <mask>
.br
\fBkeyctl\fR new_session
.br
\fBkeyctl\fR session
.br
\fBkeyctl\fR session - [<prog> <arg1> <arg2> ...]
.br
\fBkeyctl\fR session <name> [<prog> <arg1> <arg2> ...]
.br
\fBkeyctl\fR instantiate <key> <data> <keyring>
.br
\fBkeyctl\fR pinstantiate <key> <keyring>
.br
\fBkeyctl\fR negate <key> <timeout> <keyring>
.br
\fBkeyctl\fR reject <key> <timeout> <error> <keyring>
.br
\fBkeyctl\fR timeout <key> <timeout>
.br
\fBkeyctl\fR securitizzle <key>
.br
\fBkeyctl\fR reap [-v]
.br
\fBkeyctl\fR purge <type>
.br
\fBkeyctl\fR purge [-i] [-p] <type> <desc>
.br
\fBkeyctl\fR purge -s <type> <desc>
.br
\fBkeyctl\fR get_persistent <keyring> [<uid>]
.SH DESCRIPTION
This program is used ta control tha key pimpment facilitizzle up in various ways
usin a variety of subcommands.
.SH KEY IDENTIFIERS
.P
Da key identifiers passed ta or returned from keyctl are, up in general, positive
integers. There are, however, some special joints wit special meanings that
can be passed as arguments:
.P
(*) No key: \fB0\fR
.P
(*) Thread keyring: \fB@t\fR or \fB-1\fR
.P
Each thread may have its own keyring. This is searched first, before all
others. Da thread keyrin is replaced by (v)fork, exec n' clone.
.P
(*) Process keyring: \fB@p\fR or \fB-2\fR
.P
Each process (thread group) may have its own keyring. This is shared between
all thugz of a crew n' is ghon be searched afta tha thread keyring. The
process keyrin is replaced by (v)fork n' exec.
.P
(*) Session keyring: \fB@s\fR or \fB-3\fR
.P
Each process subscribes ta a session keyrin dat is inherited across (v)fork,
exec n' clone. This is searched afta tha process keyring. Right back up in yo muthafuckin ass. Session keyrings
can be named n' a extant keyrin can be joined up in place of a process's
current session keyring.
.P
(*) User specific keyring: \fB@u\fR or \fB-4\fR
.P
This keyrin is shared between all tha processes owned by a particular user n' shit. It
aint searched directly yo, but is normally linked ta from tha session keyring.
.P
(*) User default session keyring: \fB@us\fR or \fB-5\fR
.P
This is tha default session keyrin fo' a particular user n' shit. Login processes that
change ta a particular user will bind ta dis session until another session is
set.
.P
(*) Group specific keyring: \fB@g\fR or \fB-6\fR
.P
This be a place holda fo' a crew specific keyrin yo, but aint actually
implemented yet up in tha kernel.
.P
(*) Assumed request_key authorisation key: \fB@a\fR or \fB-7\fR
.P
This selects tha authorisation key provided ta tha request_key() helper to
permit it ta access tha callaz keyrings n' instantiate tha target key.
.P
(*) Keyrin by name: \fB%:<name>\fR
.P
A named keyring.  This is ghon be searched fo' up in tha processs keyrings n' in
/proc/keys.
.P
(*) Key by name: \fB%<type>:<name>\fR
.P
A named key of tha given type.  This is ghon be searched fo' up in tha process's
keyrings n' up in /proc/keys.
.SH COMMAND SYNTAX
Any non-ambiguous shortenin of a cold-ass lil command name may be used up in lieu of tha full
command name. This facilitizzle should not be used up in scriptin as freshly smoked up commandz may
be added up in future dat then cause ambiguity.
.P
(*) \fBDisplay tha package version number\fR
.P
\fBkeyctl --version\fR
.P
This command prints tha package version number n' build date n' exits:
.P
.RS
testbox>keyctl --version
.br
keyctl from keyutils-1.5.3 (Built 2011-08-24)
.RE
.P
(*) \fBShow process keyrings\fR
.P
\fBkeyctl show [-x] [<keyring>]\fR
.P
By default dis command recursively shows what tha fuck keyrings a process is subscribed
to n' what tha fuck keys n' keyrings they contain. I aint talkin' bout chicken n' gravy biatch.  If a keyrin is specified then
that keyrin is ghon be dumped instead. Y'all KNOW dat shit, muthafucka!  If \fB-x\fR is specified then tha keyring
IDs is ghon be dumped up in hex instead of decimal.
.P
(*) \fBAdd a key ta a keyring\fR
.P
\fBkeyctl add\fR <type> <desc> <data> <keyring>
.br
\fBkeyctl padd\fR <type> <desc> <keyring>
.P
This command creates a key of tha specified type n' description; instantiates
it wit tha given data n' attaches it ta tha specified keyring. Well shiiiit, it then prints
the freshly smoked up keyz ID on stdout:
.P
.RS
testbox>keyctl add user mykey shiznit @u
.br
26
.RE
.P
Da \fBpadd\fR variant of tha command readz tha data from stdin rather than
takin it from tha command line:
.P
.RS
testbox>echo -n shiznit | keyctl padd user mykey @u
.br
26
.RE
.P
(*) \fBRequest a key\fR
.P
\fBkeyctl request\fR <type> <desc> [<dest_keyring>]
.br
\fBkeyctl request2\fR <type> <desc> <info> [<dest_keyring>]
.br
\fBkeyctl prequest2\fR <type> <desc> [<dest_keyring>]
.P
These three commandz request tha lookup of a key of tha given type and
description. I aint talkin' bout chicken n' gravy biatch. Da processs keyrings is ghon be searched, n' if a match is found
the matchin keyz ID is ghon be printed ta stdout; n' if a thugged-out destination keyring
is given, tha key is ghon be added ta dat keyrin also.
.P
If there is no key, tha straight-up original gangsta command will simply return tha error ENOKEY and
fail. Da second n' third commandz will create a partial key wit tha type and
description, n' call up ta \fB/sbin/request-key\fR wit dat key n' the
extra shiznit supplied. Y'all KNOW dat shit, muthafucka! This will then attempt ta instantiate tha key in
some manner, such dat a valid key is obtained.
.P
Da third command is like tha second, except dat tha callout shiznit is
read from stdin rather than bein passed on tha command line.
.P
If a valid key is obtained, tha ID is ghon be printed n' tha key attached as if
the original gangsta search had succeeded.
.P
If there wasn't a valid key obtained, a temporary wack key is ghon be attached
to tha destination keyrin if given n' tha error "Requested key not available"
will be given.
.P
.RS
testbox>keyctl request2 user debug:wassup wibble
.br
23
.br
testbox>echo -n wibble | keyctl prequest2 user debug:hello
.br
23
.br
testbox>keyctl request user debug:hello
.br
23
.RE
.P
(*) \fBUpdate a key\fR
.P
\fBkeyctl update\fR <key> <data>
.br
\fBkeyctl pupdate\fR <key>
.P
This command replaces tha data attached ta a key wit a freshly smoked up set of data. If the
type of tha key don't support update then error "Operation not supported"
will be returned.
.P
.RS
testbox>keyctl update 23 zebra
.RE
.P
Da \fBpupdate\fR variant of tha command readz tha data from stdin rather than
takin it from tha command line:
.P
.RS
testbox>echo -n zebra | keyctl pupdate 23
.RE
.P
(*) \fBSmoke a keyring\fR
.P
\fBkeyctl newring\fR <name> <keyring>
.P
This command creates a freshly smoked up keyrin of tha specified name n' attaches it ta the
specified keyring. Da ID of tha freshly smoked up keyrin is ghon be printed ta stdout if
successful.
.P
.RS
testbox>keyctl newrin squelch @us
.br
27
.RE
.P
(*) \fBRevoke a key\fR
.P
\fBkeyctl revoke\fR <key>
.P
This command marks a key as bein revoked. Y'all KNOW dat shit, muthafucka! Any further operations on dat key
(apart from unlinkin it) will return error "Key has been revoked".
.P
.RS
testbox>keyctl revoke 26
.br
testbox>keyctl describe 26
.br
keyctl_describe: Key has been revoked
.RE
.P
(*) \fBClear a keyring\fR
.P
\fBkeyctl clear\fR <keyring>
.P
This command unlinks all tha keys attached ta tha specified keyring. Error
"Not a gangbangin' finger-lickin' directory" is ghon be returned if tha key specified aint a keyring.
.P
.RS
testbox>keyctl clear 27
.RE
.P
(*) \fBLink a key ta a keyring\fR
.P
\fBkeyctl link\fR <key> <keyring>
.P
This command cook up a link from tha key ta tha keyrin if there be a enough
capacitizzle ta do so. Error "Not a gangbangin' finger-lickin' directory" is ghon be returned if tha destination
is not a keyring. Error "Permission denied" is ghon be returned if tha key don't
have link permission or tha keyrin aint gots write permission. I aint talkin' bout chicken n' gravy biatch. Error "File
table overflow" is ghon be returned if tha keyrin is full. Error "Resource
deadlock avoided" is ghon be returned if a attempt was made ta introduce a
recursive link.
.P
.RS
testbox>keyctl link 23 27
.br
testbox>keyctl link 27 27
.br
keyctl_link: Resource deadlock avoided
.RE
.P
(*) \fBUnlink a key from a keyrin or tha session keyrin tree\fR
.P
\fBkeyctl unlink\fR <key> [<keyring>]
.P
If tha keyrin is specified, dis command removes a link ta tha key from the
keyring. Error "Not a gangbangin' finger-lickin' directory" is ghon be returned if tha destination aint a
keyring. Error "Permission denied" is ghon be returned if tha keyrin don't have
write permission. I aint talkin' bout chicken n' gravy biatch. Error "No such file or directory" is ghon be returned if tha key
is not linked ta by tha keyring.
.P
If tha keyrin aint specified, dis command performs a thugged-out depth-first search of
the session keyrin tree n' removes all tha links ta tha nominated key dat it
findz (and dat it is permitted ta remove).  It prints tha number of successful
unlinks before exiting.
.P
.RS
testbox>keyctl unlink 23 27
.RE
.P
(*) \fBSearch a keyring\fR
.P
\fBkeyctl search\fR <keyring> <type> <desc> [<dest_keyring>]
.P
This command non-recursively searches a keyrin fo' a key of a particular type
and description. I aint talkin' bout chicken n' gravy biatch. If found, tha ID of tha key is ghon be printed on stdout n' the
key is ghon be attached ta tha destination keyrin if present. Error "Requested
key not available" is ghon be returned if tha key aint found.
.P
.RS
testbox>keyctl search @us user debug:hello
.br
23
.br
testbox>keyctl search @us user debug:bye
.br
keyctl_search: Requested key not available
.RE
.P
(*) \fBRead a key\fR
.P
\fBkeyctl read\fR <key>
.br
\fBkeyctl pipe\fR <key>
.br
\fBkeyctl print\fR <key>
.P
These commandz read tha payload of a key. "read" prints it on stdout as a hex
dump, "pipe" dumps tha raw data ta stdout n' "print" dumps it ta stdout
directly if itz entirely printable or as a hexdump preceded by ":hex:" if not.
.P
If tha key type do not support readin of tha payload, then error "Operation
not supported" is ghon be returned.
.P
.RS
testbox>keyctl read 26
.br
1 bytez of data up in key:
.br
62
.br
testbox>keyctl print 26
.br
b
.br
testbox>keyctl pipe 26
.br
btestbox>
.RE
.P
(*) \fBList a keyring\fR
.P
\fBkeyctl list\fR <keyring>
.br
\fBkeyctl rlist\fR <keyring>
.P
These commandz list tha contentz of a key as a keyring. "list" pretty prints
the contents n' "rlist" just produces a space-separated list of key IDs.
.P
No attempt is made ta check dat tha specified keyrin be a keyring.
.P
.RS
testbox>keyctl list @us
.br
2 keys up in keyring:
.br
       22: vrwsl----------  4043    -1 keyring: _uid.4043
.br
       23: vrwsl----------  4043  4043 user: debug:hello
.br
testbox>keyctl rlist @us
.br
22 23
.RE
.P
(*) \fBDescribe a key\fR
.P
\fBkeyctl describe\fR <keyring>
.br
\fBkeyctl rdescribe\fR <keyring> [sep]
.P
These commandz fetch a thugged-out description of a keyring. "describe" pretty prints the
description up in tha same fashizzle as tha "list" command; "rdescribe" prints the
raw data returned from tha kernel.
.P
.RS
testbox>keyctl describe @us
       -5: vrwsl----------  4043    -1 keyring: _uid_ses.4043
testbox>keyctl rdescribe @us
keyring;4043;-1;3f1f0000;_uid_ses.4043
.RE
.P
Da raw strang is "<type>;<uid>;<gid>;<perms>;<description>", where \fIuid\fR
and \fIgid\fR is tha decimal user n' crew IDs, \fIperms\fR is the
permissions mask up in hex, \fItype\fR n' \fIdescription\fR is tha type name and
description strings (neither of which will contain semicolons).
.P
(*) \fBChange tha access controls on a key\fR
.P
\fBkeyctl chown\fR <key> <uid>
.br
\fBkeyctl chgrp\fR <key> <gid>
.P
These two commandz chizzle tha UID n' GID associated wit evaluatin a key's
permissions mask. Da UID also governs which quota a key is taken up of.
.P
Da chown command aint currently supported; attemptin it will git tha error
"Operation not supported" at best.
.P
For non-superuser users, tha GID may only be set ta tha processs GID or a GID
in tha processs crews list. Da superuser may set any GID it likes.
.P
.RS
testbox>sudo keyctl chown 27 0
.br
keyctl_chown: Operation not supported
.br
testbox>sudo keyctl chgrp 27 0
.RE
.P
(*) \fBSet tha permissions mask on a key\fR
.P
\fBkeyctl setperm\fR <key> <mask>
.P
This command chizzlez tha permission control mask on a key. Da mask may be
specified as a hex number if it begins "0x", a octal number if it begins "0"
or a thugged-out decimal number otherwise.
.P
Da hex numbers is a cold-ass lil combination of:
.P
.RS
Possessor UID       GID       Other     Permission Granted
.br
========  ========  ========  ========  ==================
.br
01000000  00010000  00000100  00000001  View
.br
02000000  00020000  00000200  00000002  Read
.br
04000000  00040000  00000400  00000004  Write
.br
08000000  00080000  00000800  00000008  Search
.br
10000000  00100000  00001000  00000010  Link
.br
20000000  00200000  00002000  00000020  Set Attribute
.br
3f000000  003f0000  00003f00  0000003f  All
.RE
.P
\fIView\fR permits tha type, description n' other parametaz of a key ta be
viewed.
.P
\fIRead\fR permits tha payload (or keyrin list) ta be read if supported by the
type.
.P
\fIWrite\fR permits tha payload (or keyrin list) ta be modified or updated.
.P
\fISearch\fR on a key permits it ta be found when a keyrin ta which it is
linked is searched.
.P
\fILink\fR permits a key ta be linked ta a keyring.
.P
\fISet Attribute\fR permits a key ta have its baller, crew membership,
permissions mask n' timeout chizzled.
.P
.RS
testbox>keyctl setperm 27 0x1f1f1f00
.RE
.P
(*) \fBStart a freshly smoked up session wit fresh keyrings\fR
.P
\fBkeyctl session\fR
.br
\fBkeyctl session\fR - [<prog> <arg1> <arg2> ...]
.br
\fBkeyctl session\fR <name> [<prog> <arg1> <arg2> ...]
.P
These commandz join or create a freshly smoked up keyrin n' then run a gangbangin' finger-lickin' dirty-ass shell or other
program wit dat keyrin as tha session key.
.P
Da variation wit no arguments just creates a anonymous session keyrin and
attaches dat as tha session keyring; it then execs $SHELL.
.P
Da variation wit a thugged-out dash up in place of a name creates a anonymous session
keyrin n' attaches dat as tha session keyring; it then execs tha supplied
command, or $SHELL if one aint supplied.
.P
Da variation wit a name supplied creates or joins tha named keyrin and
attaches dat as tha session keyring; it then execs tha supplied command, or
$SHELL if one aint supplied.
.P
.RS
testbox>keyctl rdescribe @s
.br
keyring;4043;-1;3f1f0000;_uid_ses.4043
.P
testbox>keyctl session
.br
Joined session keyring: 28
.br
testbox>keyctl rdescribe @s
.br
keyring;4043;4043;3f1f0000;_ses.24082
.P
testbox>keyctl session -
.br
Joined session keyring: 29
.br
testbox>keyctl rdescribe @s
.br
keyring;4043;4043;3f1f0000;_ses.24139
.P
testbox>keyctl session - keyctl rdescribe @s
.br
Joined session keyring: 30
.br
keyring;4043;4043;3f1f0000;_ses.24185
.P
testbox>keyctl session fish 
.br
Joined session keyring: 34
.br
testbox>keyctl rdescribe @s
.br
keyring;4043;4043;3f1f0000;fish
.P
testbox>keyctl session fish keyctl rdesc @s
.br
Joined session keyring: 35
.br
keyring;4043;4043;3f1f0000;fish
.RE
.P
(*) \fBInstantiate a key\fR
.P
\fBkeyctl instantiate\fR <key> <data> <keyring>
.br
\fBkeyctl pinstantiate\fR <key> <keyring>
.br
\fBkeyctl negate\fR <key> <timeout> <keyring>
.br
\fBkeyctl reject\fR <key> <timeout> <error> <keyring>
.P
These commandz is used ta attach data ta a partially set up key (as pimped by
the kernel n' passed ta /sbin/request-key).  "instantiate" marks a key as
bein valid n' attaches tha data as tha payload. Y'all KNOW dat shit, muthafucka!  "negate" n' "reject" mark a
key as invalid n' sets a timeout on it so dat it'll go away afta a while.
This prevents a shitload of quickly sequential requests from slowin tha system down
overmuch when they all fail, as all subsequent requests will then fail with
error "Requested key not found" (if negated) or tha specified error (if
rejected) until tha wack key has expired.
.P
Rejectz error argument can either be a UNIX error number or one of
.BR "" "'" rejected "', '" expired "' or '" revoked "'."
.P
Da newly instantiated key is ghon be attached ta tha specified keyring.
.P
These commandz may only be run from tha program run by request-key - a special
authorisation key is set up by tha kernel n' attached ta tha request-key's
session keyring. This special key is revoked once tha key ta which it refers
has been instantiated one way or another.
.P
.RS
testbox>keyctl instantiate $1 "Debug $3" $4
.br
testbox>keyctl negate $1 30 $4
.br
testbox>keyctl reject $1 30 64 $4
.RE
.P
Da \fBpinstantiate\fR variant of tha command readz tha data from stdin rather
than takin it from tha command line:
.P
.RS
testbox>echo -n "Debug $3" | keyctl pinstantiate $1 $4
.RE
.P
(*) \fBSet tha expiry time on a key\fR
.P
\fBkeyctl timeout\fR <key> <timeout>
.P
This command is used ta set tha timeout on a key, or clear a existin timeout
if tha value specified is zero. Da timeout is given as a fuckin shitload of seconds
into tha future.
.P
.RS
testbox>keyctl timeout $1 45
.RE
.P
(*) \fBRetrieve a keyz securitizzle context\fR
.P
\fBkeyctl security\fR <key>
.P
This command is used ta retrieve a keyz LSM securitizzle context.  Da label is
printed on stdout.
.P
.RS
testbox>keyctl securitizzle @s
.br
unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
.RE
.P
(*) \fBGive tha parent process a freshly smoked up session keyring\fR
.P
\fBkeyctl new_session\fR
.P
This command is used ta give tha invokin process (typically a gangbangin' finger-lickin' dirty-ass shell) a new
session keyring, discardin its oldschool session keyring.
.P
.RS
testbox> keyctl session foo
.br
Joined session keyring: 723488146
.br
testbox> keyctl show
.br
Session Keyring
.br
       -3 --alswrv      0     0  keyring: foo
.br
testbox> keyctl new_session
.br
490511412
.br
testbox> keyctl show
.br
Session Keyring
.br
       -3 --alswrv      0     0  keyring: _ses
.RE
.P
Note dat dis affects tha \fIparent\fP of tha process dat invokes tha system
call, n' so may only affect processes wit matchin credentials.
Furthermore, tha chizzle do not take effect till tha parent process next
transitions from kernel space ta user space - typically when tha \fBwait\fP()
system call returns.
.P
(*) \fBRemove dead keys from tha session keyrin tree\fR
.P
\fBkeyctl reap\fR
.P
This command performs a thugged-out depth-first search of tha callerz session keyrin tree
and attempts ta unlink any key dat it findz dat is inaccessible due to
expiry, revocation, rejection or negation. I aint talkin' bout chicken n' gravy biatch.  It do not attempt ta remove live
keys dat is unavailable simply cuz of a lack of granted permission.
.P
A key dat is designated reapable will only be removed from a keyrin if the
calla has Write permission on dat keyring, n' only keyrings dat grant
Search permission ta tha calla is ghon be searched.
.P
Da command prints tha number of keys reaped before it exits, n' you can put dat on yo' toast.  If tha \fB-v\fR
flag is passed then tha reaped keys is listed as they bein reaped,
together wit tha success or failure of tha unlink.
.P
(*) \fBRemove matchin keys from tha session keyrin tree\fR
.P
\fBkeyctl\fR purge <type>
.br
\fBkeyctl\fR purge [-i] [-p] <type> <desc>
.br
\fBkeyctl\fR purge -s <type> <desc>
.P
These commandz big-ass up a thugged-out depth-first search ta find matchin keys up in the
callerz session keyrin tree n' attempts ta unlink em.  Da number of
keys successfully unlinked is printed all up in tha end.
.P
Da keyrings must grant Read n' View permission ta tha calla ta be searched,
and tha keys ta be removed must also grant View permission. I aint talkin' bout chicken n' gravy biatch.  Keys can only be
removed from keyrings dat grant Write permission.
.P
Da first variant purges all keyz of tha specified type.
.P
Da second variant purges all keyz of tha specified type dat also match the
given description literally.  Da -i flag allows a cold-ass lil case-independent match and
the -p flag allows a prefix match.
.P
Da third variant purges all keyz of tha specified type n' matching
description rockin tha key typez comparator up in tha kernel ta match the
description. I aint talkin' bout chicken n' gravy biatch.  This permits tha key type ta match a key wit a variety of
descriptions.
.P
(*) \fBGit persistent keyring\fR
.P
\fBkeyctl\fR get_persistent <keyring> [<uid>]
.P
This command gets tha persistent keyrin fo' either tha current UID or the
specified UID n' attaches it ta tha nominated keyring.  Da persistent
keyringz ID is ghon be printed on stdout.
.P
Da kernel will create tha keyrin if it don't exist n' every last muthafuckin time this
command is called, will reset tha expiration timeout on tha keyrin ta the
value in:
.IP
/proc/sys/kernel/keys/persistent_keyring_expiry
.P
(by default three days).  Should tha timeout be reached, tha persistent keyring
will be removed n' every last muthafuckin thang it pins can then be garbage collected.
.P
If a UID other than tha processs real or effectizzle UIDs is specified, then an
error is ghon be given if tha process aint gots tha CAP_SETUID capability.
.P
.SH ERRORS
.P
There is a fuckin shitload of common errors returned by dis program:
.P
"Not a gangbangin' finger-lickin' directory" - a key wasn't a keyring.
.P
"Requested key not found" - tha looked fo' key aint available.
.P
"Key has been revoked" - a revoked key was accessed.
.P
"Key has expired" - a expired key was accessed.
.P
"Permission denied" - permission was denied by a UID/GID/mask combination.

.SH SEE ALSO
\fBkeyctl\fR(1), \fBrequest-key.conf\fR(5)
