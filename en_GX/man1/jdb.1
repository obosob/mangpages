." Copyright (c) 1995, 2011, Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
." DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
."
." This code is free software; you can redistribute it and/or modify it
." under tha termz of tha GNU General Public License version 2 only, as
." published by tha Jacked Software Foundation.
."
." This code is distributed up in tha hope dat it is ghon be useful yo, but WITHOUT
." ANY WARRANTY; without even tha implied warranty of MERCHANTABILITY or
." FITNESS FOR A PARTICULAR PURPOSE.  See tha GNU General Public License
." version 2 fo' mo' details (a copy is included up in tha LICENSE file that
." accompanied dis code).
."
." Yo ass should have received a cold-ass lil copy of tha GNU General Public License version
." 2 along wit dis work; if not, write ta tha Jacked Software Foundation,
." Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
."
." Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
." or visit www.oracle.com if you need additionizzle shiznit or have any
." thangs.
."
.TH jdb 1 "16 Mar 2012"

.LP
.SH "Name"
jdb \- Da Java Debugger
.LP
.LP
\f3jdb\fP helps you find n' fix bugs up in Java language programs.
.LP
.SH "SYNOPSIS"
.LP
.nf
\f3
.fl
\fP\f3jdb\fP [ options ] [ class ] [ arguments ] 
.fl
.fi

.LP
.RS 3
.TP 3
options 
Command\-line options, as specified below. 
.TP 3
class 
Name of tha class ta begin debugging. 
.TP 3
arguments 
Arguments passed ta tha \f2main()\fP method of \f2class\fP. 
.RE

.LP
.SH "DESCRIPTION"
.LP
.LP
Da Java Debugger, \f3jdb\fP, be a simple command\-line debugger fo' Java classes. Well shiiiit, it aint nuthin but a thugged-out demonstration of tha 
.na
\f2Java Platform Debugger Architecture\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/guides/jpda/index.html dat serves up inspection n' debuggin of a local or remote Java Virtual Machine.
.LP
.SS 
Startin a jdb Session
.LP
.LP
There is nuff ways ta start a jdb session. I aint talkin' bout chicken n' gravy biatch. Da most frequently used way is ta have \f3jdb\fP launch a freshly smoked up Java Virtual Machine (VM) wit tha main class of tha application ta be debugged. Y'all KNOW dat shit, muthafucka! This is done by substitutin tha command \f3jdb\fP fo' \f3java\fP up in tha command line. For example, if yo' applicationz main class is MyClass, you use tha followin command ta debug it under JDB:
.LP
.nf
\f3
.fl
 % jdb MyClass 
.fl
\fP
.fi

.LP
.LP
When started dis way, \f3jdb\fP invokes a second Java VM wit any specified parameters, loadz tha specified class, n' stops tha VM before executin dat classs first instruction.
.LP
.LP
Another way ta use \f3jdb\fP is by attachin it ta a Java VM dat be already hustlin. Right back up in yo muthafuckin ass. Syntax fo' Startin a VM ta which jdb will attach when tha VM is hustlin be as bigs up. This loadz in\-process debuggin libraries n' specifies tha kind of connection ta be made.
.LP
.nf
\f3
.fl
\-agentlib:jdwp=transport=dt_socket,server=y,suspend=n
.fl
\fP
.fi

.LP
.LP
For example, tha followin command will run tha MyClass application, n' allow \f3jdb\fP ta connect ta it at a lata time.
.LP
.nf
\f3
.fl
 % java \-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n MyClass
.fl
\fP
.fi

.LP
.LP
Yo ass can then attach \f3jdb\fP ta tha VM wit tha followin commmand:
.LP
.nf
\f3
.fl
 % jdb \-attach 8000 
.fl
\fP
.fi

.LP
.LP
Note dat "MyClass" aint specified up in tha \f3jdb\fP command line up in dis case cuz \f3jdb\fP is connectin ta a existin VM instead of launchin a freshly smoked up one.
.LP
.LP
There is nuff other ways ta connect tha debugger ta a VM, n' all of dem is supported by \f3jdb\fP. Da Java Platform Debugger Architecture has additionizzle 
.na
\f2documentation\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/guides/jpda/conninv.html on these connection options. For shiznit on startin a J2SE 1.4.2 or early VM fo' use wit \f3jdb\fP peep tha 
.na
\f21.4.2 documentation\fP @
.fi
http://java.sun.com/j2se/1.4.2/docs/guide/jpda/conninv.html
.LP
.SS 
Basic jdb Commands
.LP
.LP
Da followin be a list of tha basic \f3jdb\fP commands. Da Java debugger supports other commandz which you can list rockin \f3jdb\fPz \f2help\fP command.
.LP
.RS 3
.TP 3
help, or ? 
Da most blingin \f3jdb\fP command, \f2help\fP displays tha list of recognized commandz wit a funky-ass brief description. I aint talkin' bout chicken n' gravy biatch. 
.TP 3
run 
Afta startin \f3jdb\fP, n' settin any necessary breakpoints, you can use dis command ta start tha execution tha debugged application. I aint talkin' bout chicken n' gravy biatch. This command be available only when \f3jdb\fP launches tha debugged application (as opposed ta attachin ta a existin VM). 
.TP 3
cont 
Continues execution of tha debugged application afta a funky-ass breakpoint, exception, or step. 
.TP 3
print 
Displays Java objects n' primitizzle joints, n' you can put dat on yo' toast. For variablez or fieldz of primitizzle types, tha actual value is printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. For objects, a gangbangin' finger-lickin' dirty-ass short description is printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Right back up in yo muthafuckin ass. See tha \f2dump\fP command below fo' gettin mo' shiznit bout a object.
.br
.br
\f2NOTE: To display local variables, tha containin class must done been compiled wit tha \fP\f2javac(1)\fP\f2 \fP\f2\-g\fP option.
.br
.br
\f2print\fP supports nuff simple Java expressions includin dem wit method invocations, fo' example: 
.RS 3
.TP 2
o
\f2print MyClass.myStaticField\fP 
.TP 2
o
\f2print myObj.myInstanceField\fP 
.TP 2
o
\f2print i + j + k\fP \f2(i, j, k is primitizzles n' either fieldz or local variables)\fP 
.TP 2
o
\f2print myObj.myMethod()\fP \f2(if myMethod returns a non\-null)\fP 
.TP 2
o
\f2print freshly smoked up java.lang.String("Hello").length()\fP 
.RE
.TP 3
dump 
For primitizzle joints, dis command is identical ta \f2print\fP. For objects, it prints tha current value of each field defined up in tha object. Right back up in yo muthafuckin ass. Static n' instizzle fieldz is included.
.br
.br
Da \f2dump\fP command supports tha same ol' dirty set of expressions as tha \f2print\fP command. Y'all KNOW dat shit, muthafucka! 
.TP 3
threadz 
List tha threadz dat is currently hustlin. For each thread, its name n' current status is printed, as well as a index dat can be used fo' other commands, fo' example: 
.nf
\f3
.fl
4. (java.lang.Thread)0x1 main      hustlin
.fl
\fP
.fi
In dis example, tha thread index is 4, tha thread be a instizzle of java.lang.Thread, tha thread name is "main", n' it is currently hustlin, 
.TP 3
thread 
Select a thread ta be tha current thread. Y'all KNOW dat shit, muthafucka! Many \f3jdb\fP commandz is based on tha settin of tha current thread. Y'all KNOW dat shit, muthafucka! Da thread is specified wit tha thread index busted lyrics bout up in tha \f2threads\fP command above. 
.TP 3
where 
\f2where\fP wit no arguments dumps tha stack of tha current thread. Y'all KNOW dat shit, muthafucka! \f2where all\fP dumps tha stack of all threadz up in tha current thread group. \f2where\fP \f2threadindex\fP dumps tha stack of tha specified thread.
.br
.br
If tha current thread is suspended (either all up in a event like fuckin a funky-ass breakpoint or all up in tha \f2suspend\fP command), local variablez n' fieldz can be displayed wit tha \f2print\fP n' \f2dump\fP commands. Da \f2up\fP n' \f2down\fP commandz select which stack frame is current. 
.RE

.LP
.SS 
Breakpoints
.LP
.LP
Breakpoints can be set up in \f3jdb\fP at line numbers or all up in tha straight-up original gangsta instruction of a method, fo' example:
.LP
.RS 3
.TP 2
o
\f2stop at MyClass:22\fP \f2(sets a funky-ass breakpoint all up in tha straight-up original gangsta instruction fo' line 22 of tha source file containin MyClass)\fP 
.TP 2
o
\f2stop up in java.lang.String.length\fP \f2(sets a funky-ass breakpoint all up in tha beginnig of tha method \fP\f2java.lang.String.length\fP) 
.TP 2
o
\f2stop up in MyClass.<init>\fP \f2(<init> identifies tha MyClass constructor)\fP 
.TP 2
o
\f2stop up in MyClass.<clinit>\fP \f2(<clinit> identifies tha static initialization code fo' MyClass)\fP 
.RE

.LP
.LP
If a method is overloaded, you must also specify its argument types so dat tha proper method can be selected fo' a funky-ass breakpoint. For example, "\f2MyClass.myMethod(int,java.lang.String)\fP", or "\f2MyClass.myMethod()\fP".
.LP
.LP
Da \f2clear\fP command removes breakpoints rockin a syntax as up in "\f2clear\ MyClass:45\fP". Usin tha \f2clear\fP or command wit no argument displays a list of all breakpoints currently set. Da \f2cont\fP command continues execution.
.LP
.SS 
Stepping
.LP
.LP
Da \f2step\fP commandz advances execution ta tha next line whether it is up in tha current stack frame or a cold-ass lil called method. Y'all KNOW dat shit, muthafucka! Da \f2next\fP command advances execution ta tha next line up in tha current stack frame.
.LP
.SS 
Exceptions
.LP
.LP
When a exception occurs fo' which there aint a cold-ass lil catch statement anywhere up in tha throwin threadz call stack, tha VM normally prints a exception trace n' exits, n' you can put dat on yo' toast. When hustlin under \f3jdb\fP, however, control returns ta \f3jdb\fP all up in tha offendin throw. Yo ass can then use \f3jdb\fP ta diagnose tha cause of tha exception.
.LP
.LP
Use tha \f2catch\fP command ta cause tha debugged application ta stop at other thrown exceptions, fo' example: "\f2catch java.io.FileNotFoundException\fP" or "\f2catch mypackage.BigTroubleException\fP fo' realz. Any exception which be a instizzle of tha specifield class (or of a subclass) will stop tha application all up in tha point where it is thrown.
.LP
.LP
Da \f2ignore\fP command negates tha effect of a previous \f2catch\fP command.
.LP
.LP
\f2NOTE: Da \fP\f2ignore\fP command do not cause tha debugged VM ta ignore specific exceptions, only tha debugger.
.LP
.SH "Command Line Options"
.LP
.LP
When you use \f3jdb\fP up in place of tha Java application launcher on tha command line, \f3jdb\fP accepts nuff of tha same options as tha java command, includin \f2\-D\fP, \f2\-classpath\fP, n' \f2\-X<option>\fP.
.LP
.LP
Da followin additionizzle options is accepted by \f3jdb\fP:
.LP
.RS 3
.TP 3
\-help 
Displays a help message. 
.TP 3
\-sourcepath <dir1:dir2:...> 
Uses tha given path up in searchin fo' source filez up in tha specified path. If dis option aint specified, tha default path of "." is used. Y'all KNOW dat shit, muthafucka! 
.TP 3
\-attach <address> 
Attaches tha debugger ta previously hustlin VM rockin tha default connection mechanism. 
.TP 3
\-listen <address> 
Waits fo' a hustlin VM ta connect all up in tha specified address rockin standard connector. Shiiit, dis aint no joke. 
.TP 3
\-listenany 
Waits fo' a hustlin VM ta connect at any available address rockin standard connector. Shiiit, dis aint no joke. 
.TP 3
\-launch 
Launches tha debugged application immediately upon startup of jdb. This option removes tha need fo' rockin tha \f2run\fP command. Y'all KNOW dat shit, muthafucka! Da debuged application is launched n' then stopped just before tha initial application class is loaded. Y'all KNOW dat shit, muthafucka! At dat point you can set any necessary breakpoints n' use tha \f2cont\fP ta continue execution. I aint talkin' bout chicken n' gravy biatch. 
.TP 3
\-listconnectors 
List tha connectors available up in dis VM 
.TP 3
\-connect <connector\-name>:<name1>=<value1>,... 
Connects ta target VM rockin named connector wit listed argument joints, n' you can put dat on yo' toast. 
.TP 3
\-dbgtrace [flags] 
Prints info fo' debuggin jdb. 
.TP 3
\-tclient 
Runs tha application up in tha Java HotSpot(tm) VM (Client). 
.TP 3
\-tserver 
Runs tha application up in tha Java HotSpot(tm) VM (Server). 
.TP 3
\-Joption 
Pass \f2option\fP ta tha Java virtual machine used ta run jdb. (Options fo' tha application Java virtual machine is passed ta tha \f3run\fP command.) For example, \f3\-J\-Xms48m\fP sets tha startup memory ta 48 megabytes. 
.RE

.LP
.LP
Other options is supported fo' alternate mechanizzlez fo' connectin tha debugger n' tha VM it is ta debug. Da Java Platform Debugger Architecture has additionizzle 
.na
\f2documentation\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/guides/jpda/conninv.html on these connection alternatives.
.LP
.SS 
Options Forwarded ta Debuggee Process
.LP
.RS 3
.TP 3
\-v \-verbose[:class|gc|jni] 
Turns on verbose mode. 
.TP 3
\-D<name>=<value> 
Sets a system property. 
.TP 3
\-classpath <directories separated by ":"> 
Lists directories up in which ta look fo' classes. 
.TP 3
\-X<option> 
Non\-standard target VM option 
.RE

.LP
.SH "SEE ALSO"
.LP
.LP
javac(1), java(1), javah(1), javap(1), javadoc(1).
.LP
 
