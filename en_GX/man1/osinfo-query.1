.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OSINFO-QUERY.C 1"
.TH OSINFO-QUERY.C 1 "2013-11-27" "libosinfo-0.2.9" "Virtualization Support"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
osinfo\-query \- Query shiznit up in tha database
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
osinfo-query [\s-1OPTIONS...\s0] \s-1TYPE\s0 [\s-1CONDITION\-1\s0 [\s-1CONDITION\-2 ...\s0]]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \f(CW\*(C`osinfo\-query\*(C'\fR command allows extraction of shiznit from the
database. \fB\s-1TYPE\s0\fR can be one of \f(CW\*(C`os\*(C'\fR, \f(CW\*(C`platform\*(C'\fR, \f(CW\*(C`device\*(C'\fR, or
\&\f(CW\*(C`deployment\*(C'\fR. With no conditions specified, all entitizzlez of tha given
type is ghon be listed.
.PP
.Vb 7
\&  # List all operatin systems
\&  $ osinfo\-query os
\&   Short ID             | Name       ...
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-
\&   centos\-6.0           | CentOS 6.0 ...
\&   centos\-6.1           | CentOS 6.1 ...
\&   ...
.Ve
.PP
Conditions allow filterin based on specific propertizzlez of a entity.
For example, ta filta only distros from tha Fedora Project, use
.PP
.Vb 7
\&  # List all operatin systems
\&  $ osinfo\-query os vendor="Fedora Project"
\&   Short ID             | Name          ...
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&   fedora1              | Fedora Core 1 ...
\&   fedora2              | Fedora Core 2 ...
\&   ...
.Ve
.PP
Da set of fieldz which is printed can be controlled rockin tha \f(CW\*(C`\-\-fields\*(C'\fR
command line argument:
.PP
.Vb 7
\&  # List all operatin systems
\&  $ osinfo\-query \-\-fields=short\-id,version os vendor="Fedora Project"
\&   Short ID             | Version
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-
\&   fedora1              | 1
\&   fedora2              | 2
\&   ...
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-s \s-1PROPERTY\s0\fR, \fB\-\-sort\-key \s-1PROPERTY\s0\fR" 8
.IX Item "-s PROPERTY, --sort-key PROPERTY"
Set tha data sortin key. Defaults sortin tha straight-up original gangsta column
.IP "\fB\-f \s-1PROPERTY1,PROPERTY2,...\s0\fR, \fB\-\-fieldz \s-1PROPERTY1,PROPERTY2,...\s0\fR" 8
.IX Item "-f PROPERTY1,PROPERTY2,..., --fieldz PROPERTY1,PROPERTY2,..."
Set tha visibilitizzle of propertizzles up in output
.SH "PROPERTY NAMES"
.IX Header "PROPERTY NAMES"
.SS "\s-1OS\s0"
.IX Subsection "OS"
Valid property names fo' tha \f(CW\*(C`os\*(C'\fR type are:
.IP "\fBshort-id\fR" 4
.IX Item "short-id"
Da short \s-1OS\s0 identifier
.IP "\fBname\fR" 4
.IX Item "name"
Da long \s-1OS\s0 name
.IP "\fBversion\fR" 4
.IX Item "version"
Da \s-1OS\s0 version string
.IP "\fBfamily\fR" 4
.IX Item "family"
Da \s-1OS\s0 kernel crew
.IP "\fBvendor\fR" 4
.IX Item "vendor"
Da \s-1OS\s0 vendor
.IP "\fBrelease-date\fR" 4
.IX Item "release-date"
Da \s-1OS\s0 release date
.IP "\fBeol-date\fR" 4
.IX Item "eol-date"
Da \s-1OS\s0 end-of-life date
.IP "\fBcodename\fR" 4
.IX Item "codename"
Da \s-1OS\s0 code name
.IP "\fBid\fR" 4
.IX Item "id"
Da \s-1OS\s0 identifier
.SS "\s-1PLATFORM\s0"
.IX Subsection "PLATFORM"
Valid property names fo' tha \f(CW\*(C`platform\*(C'\fR type are:
.IP "\fBshort-id\fR" 4
.IX Item "short-id"
Da short platform identifier
.IP "\fBname\fR" 4
.IX Item "name"
Da long platform name
.IP "\fBversion\fR" 4
.IX Item "version"
Da platform version string
.IP "\fBvendor\fR" 4
.IX Item "vendor"
Da platform vendor
.IP "\fBrelease-date\fR" 4
.IX Item "release-date"
Da platform release date
.IP "\fBeol-date\fR" 4
.IX Item "eol-date"
Da platform end-of-life date
.IP "\fBcodename\fR" 4
.IX Item "codename"
Da platform code name
.IP "\fBid\fR" 4
.IX Item "id"
Da platform identifier
.SS "\s-1DEVICE\s0"
.IX Subsection "DEVICE"
Valid property names fo' tha \f(CW\*(C`device\*(C'\fR type are:
.IP "\fBname\fR" 4
.IX Item "name"
Da thang name
.IP "\fBproduct\fR" 4
.IX Item "product"
Da thang thang name
.IP "\fBproduct-id\fR" 4
.IX Item "product-id"
Da thang thang \s-1ID\s0 string
.IP "\fBvendor\fR" 4
.IX Item "vendor"
Da thang vendor name
.IP "\fBvendor-id\fR" 4
.IX Item "vendor-id"
Da thang vendor \s-1ID\s0 string
.IP "\fBclass\fR" 4
.IX Item "class"
Da thang type class
.IP "\fBbus\fR" 4
.IX Item "bus"
Da thang bus type
.IP "\fBid\fR" 4
.IX Item "id"
Da thang identifier
.SS "\s-1DEPLOYMENT\s0"
.IX Subsection "DEPLOYMENT"
Valid property names fo' tha \f(CW\*(C`deployment\*(C'\fR type are:
.IP "\fBid\fR" 4
.IX Item "id"
Da deployment identifier
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
Da exit status is ghon be 0 if matchin entries was found,
or 1 if not matches was found
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CW\*(C`osinfo\-db\-validate(1)\*(C'\fR, \f(CW\*(C`osinfo\-detect(1)\*(C'\fR
.SH "AUTHORS"
.IX Header "AUTHORS"
Daniel P. Berrange <berrange@redhat.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2012 Red Hat, Inc.
.SH "LICENSE"
.IX Header "LICENSE"
\&\f(CW\*(C`osinfo\-query\*(C'\fR is distributed under tha termsof tha \s-1GNU LGPL\s0 v2+
license. This is free software; peep tha source fo' copyin conditions.
There is \s-1NO\s0 warranty; not even fo' \s-1MERCHANTABILITY\s0 or \s-1FITNESS
FOR A PARTICULAR PURPOSE\s0
