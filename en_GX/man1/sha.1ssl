.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DGST 1"
.TH DGST 1 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
dgst, md5, md4, md2, sha1, sha, mdc2, ripemd160 \- message digests
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBopenssl\fR \fBdgst\fR 
[\fB\-md5|\-md4|\-md2|\-sha1|\-sha|\-mdc2|\-ripemd160|\-dss1\fR]
[\fB\-c\fR]
[\fB\-d\fR]
[\fB\-hex\fR]
[\fB\-binary\fR]
[\fB\-out filename\fR]
[\fB\-sign filename\fR]
[\fB\-keyform arg\fR]
[\fB\-passin arg\fR]
[\fB\-verify filename\fR]
[\fB\-prverify filename\fR]
[\fB\-signature filename\fR]
[\fB\-hmac key\fR]
[\fBfile...\fR]
.PP
[\fBmd5|md4|md2|sha1|sha|mdc2|ripemd160\fR]
[\fB\-c\fR]
[\fB\-d\fR]
[\fBfile...\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da digest functions output tha message digest of a supplied file or files
in hexadecimal form. They can also be used fo' digital signin n' verification.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-c\fR" 4
.IX Item "-c"
print up tha digest up in two digit crews separated by colons, only relevant if
\&\fBhex\fR format output is used.
.IP "\fB\-d\fR" 4
.IX Item "-d"
print up \s-1BIO\s0 debuggin shiznit.
.IP "\fB\-hex\fR" 4
.IX Item "-hex"
digest is ta be output as a hex dump. This is tha default case fo' a \*(L"normal\*(R"
digest as opposed ta a gangbangin' finger-lickin' digital signature.
.IP "\fB\-binary\fR" 4
.IX Item "-binary"
output tha digest or signature up in binary form.
.IP "\fB\-out filename\fR" 4
.IX Item "-out filename"
filename ta output to, or standard output by default.
.IP "\fB\-sign filename\fR" 4
.IX Item "-sign filename"
digitally sign tha digest rockin tha private key up in \*(L"filename\*(R".
.IP "\fB\-keyform arg\fR" 4
.IX Item "-keyform arg"
Specifies tha key format ta sign digest with. Only \s-1PEM\s0 n' \s-1ENGINE\s0
formats is supported by tha \fBdgst\fR command.
.IP "\fB\-engine id\fR" 4
.IX Item "-engine id"
Use engine \fBid\fR fo' operations (includin private key storage).
This engine aint used as source fo' digest algorithms, unless it is
also specified up in tha configuration file.
.IP "\fB\-sigopt nm:v\fR" 4
.IX Item "-sigopt nm:v"
Pass options ta tha signature algorithm durin sign or verify operations.
Names n' jointz of these options is algorithm-specific.
.IP "\fB\-passin arg\fR" 4
.IX Item "-passin arg"
the private key password source. For mo' shiznit bout tha format of \fBarg\fR
see tha \fB\s-1PASS PHRASE ARGUMENTS\s0\fR section up in \fIopenssl\fR\|(1).
.IP "\fB\-verify filename\fR" 4
.IX Item "-verify filename"
verify tha signature rockin tha the hood key up in \*(L"filename\*(R".
Da output is either \*(L"Verification \s-1OK\*(R"\s0 or \*(L"Verification Failure\*(R".
.IP "\fB\-prverify filename\fR" 4
.IX Item "-prverify filename"
verify tha signature rockin tha  tha private key up in \*(L"filename\*(R".
.IP "\fB\-signature filename\fR" 4
.IX Item "-signature filename"
the actual signature ta verify.
.IP "\fB\-hmac key\fR" 4
.IX Item "-hmac key"
create a hashed \s-1MAC\s0 rockin \*(L"key\*(R".
.IP "\fB\-mac alg\fR" 4
.IX Item "-mac alg"
create \s-1MAC \s0(keyed Message Authentication Code). Da most ghettofab \s-1MAC\s0
algorithm is \s-1HMAC \s0(hash-based \s-1MAC\s0) yo, but there be other \s-1MAC\s0 algorithms
which is not based on hash, fo' instizzle \fBgost-mac\fR algorithm,
supported by \fBccgost\fR engine. \s-1MAC\s0 keys n' other options should be set
via \fB\-macopt\fR parameter.
.IP "\fB\-macopt nm:v\fR" 4
.IX Item "-macopt nm:v"
Passes options ta \s-1MAC\s0 algorithm, specified by \fB\-mac\fR key.
Peepin options is supported by both by \fB\s-1HMAC\s0\fR n' \fBgost-mac\fR:
.RS 4
.IP "\fBkey:string\fR" 8
.IX Item "key:string"
Specifies \s-1MAC\s0 key as alphnumeric strang (use if key contain printable
charactas only). Right back up in yo muthafuckin ass. Strin length must conform ta any restrictions of
the \s-1MAC\s0 algorithm fo' example exactly 32 chars fo' gost-mac.
.IP "\fBhexkey:string\fR" 8
.IX Item "hexkey:string"
Specifies \s-1MAC\s0 key up in hexadecimal form (two hex digits per byte).
Key length must conform ta any restrictionz of tha \s-1MAC\s0 algorithm
for example exactly 32 chars fo' gost-mac.
.RE
.RS 4
.RE
.IP "\fB\-rand file(s)\fR" 4
.IX Item "-rand file(s)"
a file or filez containin random data used ta seed tha random number
generator, or a \s-1EGD\s0 socket (see \fIRAND_egd\fR\|(3)).
Multiple filez can be specified separated by a OS-dependent character.
Da separator is \fB;\fR fo' MS-Windows, \fB,\fR fo' OpenVMS, n' \fB:\fR for
all others.
.IP "\fBfile...\fR" 4
.IX Item "file..."
file or filez ta digest. If no filez is specified then standard input is
used.
.SH "NOTES"
.IX Header "NOTES"
Da digest of chizzle fo' all freshly smoked up applications is \s-1SHA1.\s0 Other digests are
however still widely used.
.PP
If you wish ta sign or verify data rockin tha \s-1DSA\s0 algorithm then tha dss1
digest must be used.
.PP
A source of random numbers is required fo' certain signin algorithms, in
particular \s-1DSA.\s0
.PP
Da signin n' verify options should only be used if a single file is
bein signed or verified.
