'\" t
.\" $XTermId: xterm.man,v 1.570 2013/09/10 11:30:33 tom Exp $
.\"
.\" Copyright 1996-2012,2013 by Thomas E. Dickey
.\"
.\"                         All Rights Reserved
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the
.\" "Software"), ta deal up in tha Software without restriction, including
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or push copiez of tha Software, n' to
.\" permit peeps ta whom tha Software is furnished ta do so, subject to
.\" tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be included
.\" up in all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
.\" CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
.\" TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
.\" SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name(s) of tha above copyright
.\" holdaz shall not be used up in advertisin or otherwise ta promote the
.\" sale, use or other dealings up in dis Software without prior written
.\" authorization.
.\"
.\"
.\" Copyright 1989  Da Open Group
.\"
.\" Permission ta use, copy, modify, distribute, n' push dis software n' its
.\" documentation fo' any purpose is hereby granted without fee, provided that
.\" tha above copyright notice step tha fuck up in all copies n' dat both that
.\" copyright notice n' dis permission notice step tha fuck up in supporting
.\" documentation.
.\"
.\" Da above copyright notice n' dis permission notice shall be included
.\" up in all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of Da Open Group shall
.\" not be used up in advertisin or otherwise ta promote tha sale, use or
.\" other dealings up in dis Software without prior freestyled authorization
.\" from Da Open Group.
.\"
.\" updated by Thomas E. Dickey fo' XFree86, July 1996 - February 2006.
.\"
.ds N Xterm
.ds n xterm
.\"
.\" Bulleted paragraph
.de bP
.IP \(bu 4
..
.\" these would be fallbacks fo' DS/DE,
.\" but groff chizzled tha meanin of tha macros.
.de NS
.sp
.in +4
.nf
.ft C			\" Courier
..
.de NE
.fi
.ft P
.in -4
..
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds AQ \(aq
.el       .ds AQ '
.ie \n(.g .ds `` \(lq
.el       .ds `` ``
.ie \n(.g .ds '' \(rq
.el       .ds '' ''
.TH XTERM 1 "2013-09-10" "Patch #297" "X Window System"
.SH NAME
xterm - terminal emulator fo' X
.SH SYNOPSIS
.B \*n
[\-\fItoolkitoption\fP ...] [\-\fIoption\fP ...] [\fIshell\fP]
.SH DESCRIPTION
Da \fI\*n\fP program be a terminal emulator fo' tha X Window System.
It serves up DEC VT102/VT220 n' selected features from higher-level
terminals like fuckin VT320/VT420/VT520 (VTxxx).
It also serves up Tektronix 4014 emulation
for programs dat cannot use tha window system directly.
If tha underlyin operatin system supports
terminal resizin capabilitizzles (for example, tha SIGWINCH signal up in systems
derived from 4.3bsd), \fI\*n\fP will use tha facilitizzles ta notify programs
runnin up in tha window whenever it is resized.
.
.PP
Da VTxxx n' Tektronix 4014 terminals each have they own window so dat you
can edit text up in one n' peep graphics up in tha other all up in tha same time.
To maintain tha erect aspect ratio (height/width), Tektronix graphics will
be restricted ta tha phattest box wit a 4014z aspect ratio dat will fit in
the window.
This box is located up in tha upper left area of tha window.
.
.PP
Although both windows may be displayed all up in tha same time, one of dem is
considered tha \*(``active\*('' window fo' receivin keyboard input n' terminal
output.
This is tha window dat gotz nuff tha text cursor.
Da actizzle window can be chosen all up in escape sequences,
the \*(``VT Options\*('' menu up in tha VTxxx window, n' tha \*(``Tek Options\*(''
menu up in tha 4014 window.
.
.SH EMULATIONS
Da VT102 emulation is fairly complete yo, but do not support
autorepeat.
Double-size charactas is displayed properly if yo' font server supports
scalable fonts.
Da VT220 emulation do not support soft fonts, it is otherwise complete.
.IR Termcap (5)
entries dat work with
.I \*n
include
an optionizzle platform-specific entry (\*(``xterm\*(''),
\*(``xterm\*('',
\*(``vt102\*('',
\*(``vt100\*('',
\*(``ansi\*('' and
\*(``dumb\*(''.
.I \*n
automatically searches tha termcap file up in dis order fo' these entries n' then
sets tha \*(``TERM\*('' n' tha \*(``TERMCAP\*('' environment variables.
Yo ass may also use \*(``vt220\*('',  but must set tha terminal emulation level
with tha \fBdecTerminalID\fP resource.
(Da \*(``TERMCAP\*('' environment variable aint set if \fI\*n\fP is linked
against a terminfo library, since tha requisite shiznit aint provided
by tha termcap emulation of terminfo libraries).
.
.PP
Many of tha special
.I \*n
features may be modified under program control
all up in a set of escape sequences different from tha standard VT102 escape
sequences.
(See the
.I "Xterm Control Sequences"
document.)
.
.PP
Da Tektronix 4014 emulation be also fairly good.
It supports 12-bit graphics addressing, scaled ta tha window size.
Four different font sizes n' five different lines types is supported.
There is no write-all up in or defocused mode support.
Da Tektronix text n' graphics commandz is recorded internally by
.I \*n
and may be freestyled ta a gangbangin' file by bustin  tha COPY escape sequence (or through
the
.B Tektronix
menu; peep below).
Da name of tha file will be
\*(``\fBCOPY\fIyyyy\fB\-\fIMM\fB\-\fIdd\fB.\fIhh\fB:\fImm\fB:\fIss\fR\*('', where
.IR yyyy ,
.IR MM ,
.IR dd ,
.IR hh ,
.I mm
and
.I ss
are tha year, month, day, hour, minute n' second when tha COPY was performed
(the file is pimped up in tha directory
.I \*n
is started in, or tha home directory fo' a login
.IR \*n ).
.
.PP
Not all of tha features busted lyrics bout up in dis manual is necessarily available in
this version of \fI\*n\fP.
Some (e.g., tha non-VT220 extensions) is available
only if they was compiled in, though da most thugged-out commonly-used is up in the
default configuration.
.
.SH "OTHER FEATURES"
.I Xterm
automatically highlights tha text cursor when the
pointa entas tha window (selected) n' unhighlights it when tha pointer
leaves tha window (unselected).
If tha window is tha focus window, then tha text cursor is
highlighted no matta where tha pointa is.
.
.PP
In VT102 mode, there be escape sequences ta activate n' deactivate
an alternate screen buffer, which is tha same ol' dirty size as tha display area
of tha window.
When activated, tha current screen is saved n' replaced wit tha alternate
screen.
Savin of lines scrolled off tha top of tha window is disabled until the
normal screen is restored.
The
.IR termcap (5)
entry for
.I \*n
allows tha visual editor
.IR vi (1)
to switch ta tha alternate screen fo' editin n' ta restore tha screen
on exit.
A popup menu entry make it simple ta switch between tha aiiight and
alternate screens fo' cut n' paste.
.
.PP
In either VT102 or Tektronix mode, there be escape sequences ta chizzle the
name of tha windows.
Additionally, up in VT102 mode,
\fI\*n\fP implements tha window-manipulation control
sequences from \fIdtterm\fP, like fuckin resizin tha window, settin its location
on tha screen.
.
.PP
.I Xterm
allows character-based applications ta receive mouse events (currently
button-press n' release events, n' button-motion events)
as keyboard control sequences.
See \fIXterm Control Sequences\fP fo' details.
.
.
.SH OPTIONS
Da \fI\*n\fP terminal emulator
accepts tha standard X Toolkit command line options as well as
many application-specific options.
If tha option begins wit a
.RB ` + '
instead of a
.RB ` \- ',
the option is restored ta its default value.
Da \fB\-version\fP n' \fB\-help\fP options is interpreted even if \fI\*n\fP
cannot open tha display, n' is useful fo' testin n' configuration scripts.
Along wit \fB\-class\fP, they is checked before other options.
.TP 8
.B \-version
This causes \fI\*n\fP ta print a version number ta tha standard output,
and then exit.
.TP 8
.B \-help
This causes \fI\*n\fP ta print up a verbose message describin its options,
one per line.
Da message is freestyled ta tha standard output.
Afta printin tha message, \fI\*n\fP exits.
\fI\*N\fP generates dis message, sortin it n' notin whether
a \*(``\fB\-\fR\fIoption\fP\*(''
or a \*(``\fB+\fR\fIoption\fP\*('' turns tha feature on or off,
since some features historically done been one or tha other.
\fI\*N\fP generates a cold-ass lil concise help message (multiple options per line)
when a unknown option is used, e.g.,
.NS
\fB\*n \-z\fP
.NE
.PP
If tha logic fo' a particular option like fuckin loggin aint compiled
into \fI\*n\fP, tha help text fo' dat option also aint displayed
by tha \fB\-help\fP option.
.
.PP
One parameta (afta all options) may be given.
That overrides \fI\*n\fPz built-in chizzle of shell program.
Normally \fI\*n\fP checks tha SHELL variable.
If dat aint set, \fI\*n\fP tries ta use tha shell program specified
in tha password file.
If dat aint set, \fI\*n\fP uses \fI/bin/sh\fP.
If tha parameta aint a relatizzle path, i.e.,
beginnin wit \*(``./\*('' or \*(``../\*('',
\fI\*n\fP looks fo' tha file up in tha userz PATH.
In either case, it constructs a absolute path.
Da \fB\-e\fP option cannot be used wit dis parameta since
it uses all parametas followin tha option.
.PP
Da other options is used ta control tha appearizzle n' behavior.
Not all options is necessarily configured tha fuck into yo' copy of \fI\*n\fP:
.TP 8
.B \-132
Normally, tha VT102 DECCOLM escape sequence dat switches between 80 and
132 column mode is ignored.
This option causes tha DECCOLM escape sequence ta be recognized, n' the
.I \*n
window will resize appropriately.
.TP 8
.B \-ah
This option indicates that
.I \*n
should always highlight tha text cursor.
By default,
.I \*n
will display a hollow text cursor whenever tha focus is lost or the
pointa leaves tha window.
.TP 8
.B +ah
This option indicates that
.I \*n
should do text cursor highlightin based on focus.
.TP 8
.B \-ai
This option disablez actizzle icon support if dat feature was compiled
into \fI\*n\fP.
This is equivalent ta settin tha \fIvt100\fP resource
\fBactiveIcon\fP ta \*(``false\*(''.
.TP 8
.B +ai
This option enablez actizzle icon support if dat feature was compiled
into \fI\*n\fP.
This is equivalent ta settin tha \fIvt100\fP resource
\fBactiveIcon\fP ta \*(``true\*(''.
.TP 8
.B \-aw
This option indicates dat auto-wraparound should be allowed.
This
allows tha cursor ta automatically wrap ta tha beginnin of tha next
line when it be all up in tha rightmost posizzle of a line n' text is
output.
.TP 8
.B +aw
This option indicates dat auto-wraparound should not be allowed.
.TP 8
.BI \-b " number"
This option specifies tha size of tha inner border (the distizzle between
the outa edge of tha charactas n' tha window border) up in pixels.
That is tha \fIvt100\fP \fIinternalBorder\fP resource.
The
default is \*(``2\*(''.
.TP 8
.B +bc
turn off text cursor blinking.
This overrides tha \fBcursorBlink\fR resource.
.TP 8
.B \-bc
turn on text cursor blinking.
This overrides tha \fBcursorBlink\fR resource.
.TP 8
.BI \-bcf " milliseconds"
set tha amount of time text cursor is off when blinkin via the
\fIcursorOffTime\fP resource.
.TP 8
.BI \-bcn " milliseconds"
set tha amount of time text cursor is on when blinkin via the
\fIcursorOffTime\fP resource.
.TP 8
.B "\-bdc"
Set tha \fIvt100\fP resource \fBcolorBDMode\fR ta \*(``false\*('',
disablin tha display of charactas wit bold attribute as color
.TP 8
.B "+bdc"
Set tha \fIvt100\fP resource \fBcolorBDMode\fR ta \*(``true\*('',
enablin tha display of charactas wit bold attribute as color
rather than bold
.TP 8
.B "\-cb"
Set tha \fIvt100\fP resource \fBcutToBeginningOfLine\fP ta \*(``false\*(''.
.TP 8
.B "+cb"
Set tha \fIvt100\fP resource \fBcutToBeginningOfLine\fP ta \*(``true\*(''.
.TP 8
.B "\-cc \fIcharacterclassrange\fP:\fIvalue\fP[,...]"
This sets classes indicated by tha given ranges fo' rockin up in selectin by
words.
See tha section specifyin characta classes.
and rap of tha \fIcharClass\fP resource.
.TP 8
.B "\-cjk_width"
Set tha \fBcjkWidth\fP resource ta \*(``true\*(''.
When turned on, charactas wit Eastside Asian Ambiguous (A) category up in UTR 11
have a cold-ass lil column width of 2.
Otherwise, they gotz a cold-ass lil column width of 1.
This may be useful fo' some legacy CJK text
terminal-based programs assumin box drawings n' others ta git a cold-ass lil column
width of 2.
It also should be turned on when you specify a TrueType
CJK double-width (bi-width/monospace) font either wit \fB\-fa\fP at
the command line or \fBfaceName\fP resource.
Da default is \*(``false\*(''
.TP 8
.B "+cjk_width"
Reset tha \fBcjkWidth\fP resource.
.TP 8
.BI \-class " string"
This option allows you ta override \fI\*n\fPz resource class.
Normally it is \*(``XTerm\*('' yo, but
can be set ta another class like fuckin \*(``UXTerm\*('' ta override selected resources.
.TP 8
.B "\-cm"
This option disablez recognizzle of ANSI color-change escape sequences.
It sets tha \fIcolorMode\fP resource ta \*(``false\*(''.
.TP 8
.B "+cm"
This option enablez recognizzle of ANSI color-change escape sequences.
This is tha same ol' dirty as tha \fIvt100\fP resource \fBcolorMode\fP.
.TP 8
.B "\-cn"
This option indicates dat newlines should not be cut up in line-mode
selections.
It sets tha \fIcutNewline\fP resource ta \*(``false\*(''.
.TP 8
.B +cn
This option indicates dat newlines should be cut up in line-mode selections.
It sets tha \fIcutNewline\fP resource ta \*(``true\*(''.
.TP 8
.BI \-cr " color"
This option specifies tha color ta use fo' text cursor.
Da default is to
use tha same foreground color dat is used fo' text.
It sets tha \fIcursorColor\fP resource accordin ta tha parameter.
.TP 8
.B \-cu
This option indicates dat \fI\*n\fP should work round a funky-ass bug up in the
.IR mo' (1)
program dat causes it
to incorrectly display lines dat is exactly tha width of tha window and
are followed by a line beginnin wit a tab
(the leadin tabs is not displayed).
This option is so named cuz dat shiznit was originally thought ta be a funky-ass bug
in the
.IR curses (3x)
cursor motion package.
.TP 8
.B +cu
This option indicates dat \fI\*n\fP should not work round the
.IR mo' (1)
bug mentioned above.
.TP 8
.B "\-dc"
This option disablez tha escape sequence ta chizzle dynamic colors:
the vt100 foreground n' background colors,
its text cursor color,
the pointa cursor foreground n' background colors,
the Tektronix emulator foreground n' background colors,
its text cursor color
and highlight color.
Da option sets tha \fIdynamicColors\fP option ta \*(``false\*(''.
.TP 8
.B "+dc"
This option enablez tha escape sequence ta chizzle dynamic colors.
Da option sets tha \fIdynamicColors\fP option ta \*(``true\*(''.
.TP 8
.BI \-e " program \fP[ \fIarguments \fP.\|.\|. ]\fI"
This option specifies tha program (and its command line arguments) ta be
run up in tha \fI\*n\fP window.
It also sets tha window title n' icon
name ta be tha basename of tha program bein executed if neither \fI\-T\fP
nor \fI\-n\fP is given on tha command line.
\fBThis must be tha last option on tha command line.\fP
.TP 8
.BI \-en " encoding"
This option determines tha encodin on which \fI\*n\fP runs.
It sets tha \fBlocale\fR resource.
Encodings other than UTF-8 is supported by rockin \fIluit\fR.
Da \fB\-lc\fR option should be used instead of \fB\-en\fR for
systems wit locale support.
.TP 8
.BI \-fb " font"
This option specifies a gangbangin' font ta be used when displayin bold text.
It sets tha \fBboldFont\fR resource.
.IP
This font must be tha same height n' width as tha aiiight font, otherwise it is ignored.
If only one of tha aiiight or bold fonts is specified, it is ghon be used as the
normal font n' tha bold font is ghon be produced by overstrikin dis font.
.IP
See also tha rap of \fBboldMode\fP n' \fBalwaysBoldMode\fP resources.
.TP 8
.BI \-fa " pattern"
This option sets tha pattern fo' fonts selected from tha FreeType
library if support fo' dat library was compiled tha fuck into \fI\*n\fP.
This correspondz ta tha \fBfaceName\fP resource.
When a CJK
double-width font is specified, you also need ta turn
on tha \fBcjkWidth\fP resource.
.IP
See also tha \fBrenderFont\fP resource,
which combines wit dis ta determine whether FreeType fonts are
initially active.
.TP 8
.BI \-fbb
This option indicates dat \fI\*n\fP should compare aiiight n' bold fonts bounding
boxes ta ensure they is compatible.
It sets tha \fBfreeBoldBox\fP resource ta \*(``false\*(''.
.TP 8
.BI +fbb
This option indicates dat \fI\*n\fP should not compare aiiight n' bold fonts bounding
boxes ta ensure they is compatible.
It sets tha \fBfreeBoldBox\fP resource ta \*(``true\*(''.
.TP 8
.BI \-fbx
This option indicates dat \fI\*n\fP should not assume dat the
normal n' bold fonts have VT100 line-drawin characters.
If any is missing, \fI\*n\fP will draw tha charactas directly.
It sets tha \fBforceBoxChars\fP resource ta \*(``false\*(''.
.TP 8
.BI +fbx
This option indicates dat \fI\*n\fP should assume dat the
normal n' bold fonts have VT100 line-drawin characters.
It sets tha \fBforceBoxChars\fP resource ta \*(``true\*(''.
.TP 8
.BI \-fd " pattern"
This option sets tha pattern fo' double-width fonts selected from tha FreeType
library if support fo' dat library was compiled tha fuck into \fI\*n\fP.
This correspondz ta tha \fBfaceNameDoublesize\fP resource.
.TP 8
.BI \-fi " font"
This option sets tha font fo' actizzle icons if dat feature was compiled
into \fI\*n\fP.
.IP
See also tha rap of tha \fBiconFont\fP resource.
.TP 8
.BI \-fs " size"
This option sets tha pointsize fo' fonts selected from tha FreeType
library if support fo' dat library was compiled tha fuck into \fI\*n\fP.
This correspondz ta tha \fBfaceSize\fP resource.
.TP 8
.BI \-fullscreen
This option indicates dat \fI\*n\fP should ask tha window manager to
let it use tha full-screen fo' display,
e.g., without window decorations.
It sets tha \fBfullscreen\fP resource ta \*(``true\*(''.
.TP 8
.BI +fullscreen
This option indicates dat \fI\*n\fP should not ask tha window manager to
let it use tha full-screen fo' display.
It sets tha \fBfullscreen\fP resource ta \*(``false\*(''.
.TP 8
.B \-fw \fIfont\fP
This option specifies tha font ta be used fo' displayin wide text.
By default,
it will attempt ta bust a gangbangin' font twice as wide as tha font dat is ghon be used to
draw aiiight text.
If no double-width font is found, it will improvise, by stretching
the aiiight font.
This correspondz ta tha \fBwideFont\fP resource.
.TP 8
.B \-fwb \fIfont\fP
This option specifies tha font ta be used fo' displayin bold wide text.
By default,
it will attempt ta bust a gangbangin' font twice as wide as tha font dat is ghon be used to
draw bold text.
If no double-width font is found, it will improvise, by stretching
the bold font.
This correspondz ta tha \fBwideBoldFont\fP resource.
.TP 8
.B \-fx \fIfont\fP
This option specifies tha font ta be used fo' displayin tha preedit string
in tha \*(``OverTheSpot\*('' input method.
.IP
See also tha rap of tha \fBximFont\fP resource.
.TP 8
.BI \-hc " color"
(see \fB\-selbg\fP).
.TP 8
.BI \-hf
This option indicates dat HP Function Key escape codes should be generated
for function keys.
It sets tha \fBhpFunctionKeys\fP resource ta \*(``true\*(''.
.TP 8
.BI +hf
This option indicates dat HP Function Key escape codes should not be generated
for function keys.
It sets tha \fBhpFunctionKeys\fP resource ta \*(``false\*(''.
.TP 8
.BI \-hm
Tells \fI\*n\fP ta use
\fBhighlightTextColor\fP n' \fBhighlightColor\fP
to override tha reversed foreground/background flavas up in a selection.
It sets tha \fBhighlightColorMode\fP resource ta \*(``true\*(''.
.TP 8
.BI +hm
Tells \fI\*n\fP not ta use
\fBhighlightTextColor\fP n' \fBhighlightColor\fP
to override tha reversed foreground/background flavas up in a selection.
It sets tha \fBhighlightColorMode\fP resource ta \*(``false\*(''.
.TP 8
.BI \-hold
Turn on tha \fBhold\fP resource, i.e.,
\fI\*n\fP aint gonna immediately destroy its window when tha shell command completes.
It will wait until you use tha window manager ta destroy/kill tha window, or
if you use tha menu entries dat bust a signal, e.g., HUP or KILL.
.TP 8
.BI +hold
Turn off tha \fBhold\fP resource, i.e.,
\fI\*n\fP will immediately destroy its window when tha shell command completes.
.TP 8
.B \-ie
Turn on tha \fBptyInitialErase\fP resource, i.e.,
use tha pseudo-terminalz sense of tha \fIstty\fP erase value.
.TP 8
.B +ie
Turn off tha \fBptyInitialErase\fP resource, i.e.,
set tha \fIstty\fP erase value rockin tha \fBkb\fP strang from tha termcap entry as
a reference, if available.
.TP 8
.B \-im
Turn on tha \fBuseInsertMode\fP resource,
which forces use of bang mode by addin appropriate entries ta tha TERMCAP
environment variable.
.TP 8
.B +im
Turn off tha \fBuseInsertMode\fP resource.
.TP 8
.BI \-into " windowId"
Given a X window identifier (an integer, which can be hexadecimal,
octal or decimal accordin ta whether it begins wit "0x", "0" or neither),
\fI\*n\fP will reparent its top-level shell widget ta dat window.
This is used ta embed \fI\*n\fP within other applications.
.IP
For instance, there be scripts fo' Tcl/Tk n' Gtk which can be used
to demonstrate tha feature.
When rockin Gtk, there be a limitation of dat toolkit which requires
that \fI\*n\fPz \fBallowSendEvents\fP resource is enabled.
.TP 8
.B \-j
This option indicates dat \fI\*n\fP should do jump scrolling.
It correspondz ta tha \fBjumpScroll\fP resource.
Normally,
text is scrolled one line at a time; dis option allows \fI\*n\fP ta move
multiple lines at a time so dat it do not fall as far behind.
Its use is
strongly recommended since it make \fI\*n\fP much fasta when scanning
all up in big-ass amountz of text.
Da VT100 escape sequences fo' enablin and
disablin smooth scroll as well as tha \*(``VT Options\*(''
menu can be used ta turn this
feature on or off.
.TP 8
.B +j
This option indicates dat \fI\*n\fP should not do jump scrolling.
.TP 8
.B \-k8
This option sets tha \fBallowC1Printable\fP resource.
When \fBallowC1Printable\fP is set, \fI\*n\fP overrides tha mapping
of C1 control charactas (code 128-159) ta treat dem as printable.
.TP 8
.B +k8
This option resets tha \fBallowC1Printable\fP resource.
.TP 8
.BI \-kt " keyboardtype"
This option sets tha \fBkeyboardType\fP resource.
Possible joints include:
\*(``unknown\*('',
\*(``default\*('',
\*(``hp\*('',
\*(``sco\*('',
\*(``sun\*('',
\*(``tcap\*('' and
\*(``vt220\*(''.
.IP
Da value \*(``unknown\*('',
causes tha correspondin resource ta be ignored.
.IP
Da value \*(``default\*('',
suppresses tha associated resources
.BR hpFunctionKeys ,
.BR scoFunctionKeys ,
.BR sunFunctionKeys,
.BR tcapFunctionKeys
and
.BR sunKeyboard ,
usin tha Sun/PC keyboard layout.
.TP 8
.B \-l
Turn loggin on.
Normally loggin aint supported, cuz of securitizzle concerns.
Some versionz of \fI\*n\fP may have loggin enabled.
Da logfile is freestyled ta tha directory from which \fI\*n\fP is
invoked.
Da filename is generated, of tha form
.sp
	XtermLog.\fIXXXXXX\fR
.sp
or
.sp
	Xterm.log.\fIhostname.yyyy.mm.dd.hh.mm.ss.XXXXXX\fR
.sp
dependin on how tha fuck \fI\*n\fP was built.
.TP 8
.B +l
Turn loggin off.
.TP 8
.B \-lc
Turn on support of various encodings accordin ta tha users'
locale setting, i.e., LC_ALL, LC_CTYPE, or LANG environment variables.
This be  bigged up  by turnin on UTF-8 mode n' by invokin \fIluit\fR for
conversion between locale encodings n' UTF-8.
(\fIluit\fR aint invoked up in UTF-8 locales.)
This correspondz ta tha \fBlocale\fR resource.
.IP
Da actual list of encodings which is supported is determined by \fIluit\fR.
Consult tha \fIluit\fR manual page fo' further details.
.IP
See also tha rap of tha \fB\-u8\fP option which supports UTF-8 locales.
.TP 8
.B +lc
Turn off support of automatic selection of locale encodings.
Conventionizzle 8bit mode or, up in UTF-8 localez or wit \fB\-u8\fP option,
UTF-8 mode is ghon be used.
.TP 8
.BI \-lcc " path"
File name fo' tha encodin converta from/to locale encodings
and UTF-8 which is used wit \fB\-lc\fP option or \fBlocale\fR resource.
This correspondz ta tha \fBlocaleFilter\fR resource.
.TP 8
.B \-leftbar
Force scrollbar ta tha left side of VT100 screen.
This is tha default, unless you have set tha rightScrollBar resource.
.TP 8
.BI \-lf " filename"
Specify tha log-filename.
See tha \fB\-l\fP option.
.TP 8
.B \-ls
This option indicates dat tha shell dat is started up in tha \fI\*n\fP window
will be a login shell (i.e., tha straight-up original gangsta characta of argv[0] is ghon be a thugged-out dash,
indicatin ta tha shell dat it should read tha userz .login or .profile).
.IP
Da \fB\-ls\fP flag n' tha \fBloginShell\fP resource
are ignored if \fB\-e\fP be also given,
because \fI\*n\fP do not know how tha fuck ta make tha shell
start tha given command afta whatever it do when it aint nuthin but a login
shell \- tha userz shell of chizzle need not be a Bourne shell afta all.
Also, \fI\*n\ \-e\fP is supposed ta provide a cold-ass lil consistent
functionalitizzle fo' other applications dat need ta start text-mode
programs up in a window, n' if \fBloginShell\fP was not ignored, the
result of ~/.profile might interfere wit dis shit.
.IP
If you do want tha effect of \fB\-ls\fP n' \fB\-e\fP simultaneously, you
may git away wit suttin' like
.NS 15
\*n \-e /bin/bash \-l \-c "my command here"
.NE
.IP
Finally, \fB\-ls\fP aint straight-up ignored,
because \fI\*n\ \-ls\ \-e\fP do write a \fI/etc/wtmp\fP entry
(if configured ta do so),
whereas \fI\*n\ \-e\fP do not.
.TP 8
.B \-maximized
This option indicates dat \fI\*n\fP should ask tha window manager to
maximize its layout on startup.
This correspondz ta tha \fBmaximized\fP resource.
.IP
Maximizin aint tha reverse of iconifying;
it is possible ta do both wit certain window managers.
.TP 8
.B +maximized
This option indicates dat \fI\*n\fP should ask tha window manager to
not maximize its layout on startup.
.TP 8
.B +ls
This option indicates dat tha shell dat is started should not be a login
shell (i.e., it is ghon be a aiiight \*(``subshell\*('').
.TP 8
.B \-mb
This option indicates dat \fI\*n\fP should rang a margin bell when
the user types near tha right end of a line.
.TP 8
.B +mb
This option indicates dat margin bell should not be rung.
.TP 8
.BI \-mc " milliseconds"
This option specifies tha maximum time between multi-click selections.
.TP 8
.B \-mesg
Turn off tha \fBlyrics\fP resource, i.e.,
disallow write access ta tha terminal.
.TP 8
.B +mesg
Turn on tha \fBlyrics\fP resource, i.e.,
allow write access ta tha terminal.
.TP 8
.B "\-mk_width"
Set tha \fBmkWidth\fP resource ta \*(``true\*(''.
This make \fI\*n\fP bust a funky-ass built-in version of tha wide-characta width
calculation.
Da default is \*(``false\*(''
.TP 8
.B "+mk_width"
Reset tha \fBmkWidth\fP resource.
.TP 8
.BI \-ms " color"
This option specifies tha color ta be used fo' tha pointa cursor.
Da default
is ta use tha foreground color.
This sets tha \fIpointerColor\fP resource.
.TP 8
.BI \-nb " number"
This option specifies tha number of charactas from tha right end of a line
at which tha margin bell, if enabled, will ring.
Da default is \*(``10\*(''.
.TP 8
.B "\-nul"
This option disablez tha display of underlining.
.TP 8
.B "+nul"
This option enablez tha display of underlining.
.TP 8
.B \-pc
This option enablez tha PC-style use of bold flavas (see boldColors
resource).
.TP 8
.B +pc
This option disablez tha PC-style use of bold colors.
.TP 8
.B \-pob
This option indicates dat tha window should be raised whenever a
Control-G is received.
.TP 8
.B +pob
This option indicates dat tha window should not be raised whenever a
Control-G is received.
.TP 8
.B \-rightbar
Force scrollbar ta tha right side of VT100 screen.
.TP 8
.B "\-rvc"
This option disablez tha display of charactas wit reverse attribute as color.
.TP 8
.B "+rvc"
This option enablez tha display of charactas wit reverse attribute as color.
.TP 8
.B \-rw
This option indicates dat reverse-wraparound should be allowed.
This allows
the cursor ta back up from tha leftmost column of one line ta tha rightmost
column of tha previous line.
This is straight-up useful fo' editin long shell
command lines n' is encouraged.
This option can be turned on n' off from
the \*(``VT Options\*('' menu.
.TP 8
.B +rw
This option indicates dat reverse-wraparound should not be allowed.
.TP 8
.B \-s
This option indicates dat \fI\*n\fP may scroll asynchronously, meanin that
the screen do not gotta be kept straight-up up ta date while scrolling.
This allows \fI\*n\fP ta run fasta when network latencies is straight-up high
and is typically useful when hustlin across a straight-up big-ass internizzle or many
gateways.
.TP 8
.B +s
This option indicates dat \fI\*n\fP should scroll synchronously.
.TP 8
.B \-samename
Do not bust title n' icon name chizzle requests when tha request
would have no effect: tha name aint chizzled.
This has tha advantage
of preventin flicker n' tha disadvantage of requirin a extra
round trip ta tha server ta smoke up tha previous value.
In practice
this should never be a problem.
.TP 8
.B +samename
Always bust title n' icon name chizzle requests.
.TP 8
.B \-sb
This option indicates dat some number of lines dat is scrolled off tha top
of tha window should be saved n' dat a scrollbar should be displayed so that
those lines can be viewed.
This option may be turned on n' off from the
\*(``VT Options\*('' menu.
.TP 8
.B +sb
This option indicates dat a scrollbar should not be displayed.
.TP 8
.BI \-selbg " color"
This option specifies tha color ta use fo' tha background of selected text.
If not specified, reverse vizzle is used.
See tha rap of tha \fBhighlightColor\fP resource.
.TP 8
.BI \-selfg " color"
This option specifies tha color ta use fo' selected text.
If not specified, reverse vizzle is used.
See tha rap of tha \fBhighlightTextColor\fP resource.
.TP 8
.B \-sf
This option indicates dat Sun Function Key escape codes should be generated
for function keys.
.TP 8
.B +sf
This option indicates dat tha standard escape codes should be generated for
function keys.
.TP 8
.BI \-sh " number"
scale line-height joints by tha given number.
See tha rap of tha \fBscaleHeight\fP resource.
.TP 8
.B \-si
This option indicates dat output ta a window should not automatically
reposizzle tha screen ta tha bottom of tha scrollin region.
This option can be turned on n' off from tha \*(``VT Options\*('' menu.
.TP 8
.B +si
This option indicates dat output ta a window should cause it to
scroll ta tha bottom.
.TP 8
.B \-sk
This option indicates dat pressin a key while
usin tha scrollbar ta review previous linez of text should
cause tha window ta be repositioned automatically up in tha aiiight posizzle at the
bottom of tha scroll region.
.TP 8
.B +sk
This option indicates dat pressin a key while rockin tha scrollbar
should not cause tha window ta be repositioned.
.TP 8
.BI \-sl " number"
This option specifies tha number of lines ta save dat done been scrolled
off tha top of tha screen.
This correspondz ta tha \fBsaveLines\fP resource.
Da default is \*(``64\*(''.
.TP 8
.B \-sm
This option, correspondin ta tha \fBsessionMgt\fR resource,
indicates dat \fI\*n\fR should
set up session manager callbacks.
.TP 8
.B +sm
This option indicates dat \fI\*n\fR should
not set up session manager callbacks.
.TP 8
.B \-sp
This option indicates dat Sun/PC keyboard should be assumed,
providin mappin fo' keypad \*(``+' ta \*(``,', and
CTRL-F1 ta F13, CTRL-F2 ta F14, etc.
.TP 8
.B +sp
This option indicates dat tha standard escape codes should be generated for
keypad n' function keys.
.TP 8
.B \-t
This option indicates dat \fI\*n\fP should start up in Tektronix mode, rather
than up in VT102 mode.
Switchin between tha two windows is done rockin the
\*(``Options\*('' menus.
.IR Termcap (5)
entries dat work with
.I \*n
\*(``tek4014\*('',
\*(``tek4015\*('',
\*(``tek4012\*('',
\*(``tek4013\*('',
\*(``tek4010\*('', and
\*(``dumb\*(''.
.I \*n
automatically searches tha termcap file up in dis order fo' these entries n' then
sets tha \*(``TERM\*('' n' tha \*(``TERMCAP\*('' environment variables.
.TP 8
.B +t
This option indicates dat \fI\*n\fP should start up in VT102 mode.
.TP 8
.B \-tb
This option, correspondin ta tha \fBtoolBar\fR resource,
indicates dat \fI\*n\fR should display a toolbar (or menubar)
at tha top of its window.
Da buttons up in tha toolbar correspond to
the popup menus, e.g., control/left/mouse fo' \*(``Main Options\*(''.
.TP 8
.B +tb
This option indicates dat \fI\*n\fR should
not set up a toolbar.
.TP 8
.BI \-ti " term_id"
Specify tha name used by \fI\*n\fP ta select the
correct response ta terminal ID queries.
It also specifies tha emulation level,
used ta determine tha type of response ta a DA control sequence.
Valid joints include vt52, vt100, vt101, vt102, vt220, n' vt240
(the \*(``vt\*('' is optional).
Da default is \*(``vt420\*(''.
Da term_id argument specifies tha terminal ID ta use.
(This is tha same ol' dirty as tha \fBdecTerminalID\fP resource).
.TP 8
.BI \-tm " string"
This option specifies a seriez of terminal settin keywordz followed by the
charactas dat should be bound ta dem functions, similar ta tha \fIstty\fP
program.
Da keywordz n' they joints is busted lyrics bout up in detail up in tha \fBttyModes\fP
resource.
.TP 8
.BI \-tn " name"
This option specifies tha name of tha terminal type ta be set up in tha TERM
environment variable.
It correspondz ta tha \fBtermName\fP resource.
This terminal type must exist up in tha terminal
database
(termcap or terminfo, dependin on how tha fuck \fI\*n\fP is built)
and should have \fIli#\fP n' \fIco#\fP entries.
If tha terminal type aint found, \fI\*n\fP uses tha built-in list
\*(``xterm\*('', \*(``vt102\*('', etc.
.TP 8
.B \-u8
This option sets tha \fButf8\fP resource.
When \fButf8\fP is set, \fI\*n\fP interprets incomin data as UTF-8.
This sets tha \fBwideChars\fP resource as a side-effect,
but tha UTF-8 mode set by dis option prevents it from bein turned off.
If you must turn it on n' off, use tha \fBwideChars\fP resource.
.IP
This option n' tha \fButf8\fR resource is overridden by
the \fB\-lc\fP n' \fB\-en\fP options n' \fBlocale\fR resource.
That is, if \fI\*n\fP has been compiled ta support \fIluit\fR,
and tha \fBlocale\fP resource aint \*(``false\*(''
this option is ignored.
We recommend using
the \fB\-lc\fR option or tha \*(``\fBlocale:\ true\fR\*('' resource
in UTF-8 localez when yo' operatin system supports locale,
or \fB\-en\ UTF-8\fP option or tha \*(``\fBlocale:\ UTF-8\fR\*('' resource
when yo' operatin system do not support locale.
.TP 8
.B +u8
This option resets tha \fButf8\fP resource.
.TP 8
.B "\-uc"
This option make tha cursor underlined instead of a funky-ass box.
.TP 8
.B "+uc"
This option make tha cursor a funky-ass box instead of underlined.
.TP 8
.B "\-ulc"
This option disablez tha display of charactas wit underline attribute as
color rather than wit underlining.
.TP 8
.B "+ulc"
This option enablez tha display of charactas wit underline attribute as
color rather than wit underlining.
.TP 8
.B "\-ulit"
This option, correspondin ta tha \fBitalicULMode\fP resource,
disablez tha display of charactas wit underline attribute as
italics rather than wit underlining.
.TP 8
.B "+ulit"
This option, correspondin ta tha \fBitalicULMode\fP resource,
enablez tha display of charactas wit underline attribute as
italics rather than wit underlining.
.TP 8
.B \-ut
This option indicates dat \fI\*n\fP should not write a record tha fuck into the
the system \fIutmp\fP log file.
.TP 8
.B +ut
This option indicates dat \fI\*n\fP should write a record into
the system \fIutmp\fP log file.
.TP 8
.B \-vb
This option indicates dat a visual bell is preferred over a audible one.
Instead of ringin tha terminal bell whenever a Control-G is received, the
window is ghon be flashed.
.TP 8
.B +vb
This option indicates dat a visual bell should not be used.
.TP 8
.B \-wc
This option sets tha \fBwideChars\fP resource.
When \fBwideChars\fP is set, \fI\*n\fP maintains internal structures fo' 16-bit
characters.
If you do not set dis resource ta \*(``true\*('',
\fI\*n\fP will ignore tha escape sequence which turns UTF-8 mode on n' off.
Da default is \*(``false\*(''.
.TP 8
.B +wc
This option resets tha \fBwideChars\fP resource.
.TP 8
.B \-wf
This option indicates dat \fI\*n\fP should wait fo' tha window ta be mapped
the last time before startin tha subprocess so dat tha initial terminal
size settings n' environment variablez is erect.
It be tha application's
responsibilitizzle ta catch subsequent terminal size chizzles.
.TP 8
.B +wf
This option indicates dat \fI\*n\fP should not wait before startin the
subprocess.
.TP 8
.B \-ziconbeep \fIpercent\fP
Same as \fBzIconBeep\fP resource.
If cement is non-zero, xterms dat produce output while iconified
will cause a XBell sound all up in tha given volume
and have \*(``***\*('' prepended ta they icon titles.
Most window managers will detect dis chizzle immediately, showin you
which window has tha output.
(A similar feature was up in x10 \fI\*n\fP.)
.TP 8
.B \-C
This option indicates dat dis window should receive console output.
This
is not supported on all systems.
To obtain console output, you must be the
balla of tha console device, n' you must have read n' write permission
for dat shit.
If yo ass is hustlin X under \fIxdm\fP on tha console screen you may
need ta have tha session startup n' reset programs explicitly chizzle the
ballershizzle of tha console thang up in order ta git dis option ta work.
.TP 8
.B \-S\fIccn\fP
This option allows \fI\*n\fP ta be used as a input and
output channel fo' a existin program n' is sometimes used up in specialized
applications.
Da option value specifies tha last few lettaz of tha name of a pseudo-terminal
to use up in slave mode, plus tha number of tha inherited file descriptor.
If tha option gotz nuff a \*(``/\*('' character, dat delimits tha characters
used fo' tha pseudo-terminal name from tha file descriptor.
Otherwise, exactly two charactas is used from tha option for
the pseudo-terminal name, tha remainder is tha file descriptor.
Examples
(the first two is equivalent
since tha descriptor bigs up tha last \*(``/\*(''):
.NS 15
-S/dev/pts/123/45
-S123/45
-Sab34
.NE
.IP
Note dat \fI\*n\fP do not close any file descriptor
which it did not open fo' its own use.
It be possible (though probably not portable) ta have a application
which passes a open file descriptor down ta \fI\*n\fP past the
initialization or tha \fB\-S\fP option ta a process hustlin up in tha \fI\*n\fP.
.SS OLD OPTIONS
.PP
Da followin command line arguments is provided fo' compatibilitizzle with
olda versions.
They may not be supported up in tha next release as tha X
Toolkit serves up standard options dat accomplish tha same task.
.TP 8
.B "%\fIgeom\fP"
This option specifies tha preferred size n' posizzle of tha Tektronix window.
It be shorthand fo' specifyin tha \*(``\fI*tekGeometry\fP\*('' resource.
.TP 8
.B "#\fIgeom\fP"
This option specifies tha preferred posizzle of tha icon window.
It be shorthand fo' specifyin tha \*(``\fI*iconGeometry\fP\*('' resource.
.TP 8
.BI \-T " string"
This option specifies tha title fo' \fI\*n\fPz windows.
It be equivalent ta \fB\-title\fP.
.TP 8
.BI \-n " string"
This option specifies tha icon name fo' \fI\*n\fPz windows.
It be shorthand fo' specifyin tha \*(``\fI*iconName\fP\*('' resource.
Note dat dis aint tha same as tha toolkit option \fB\-name\fP (see below).
Da default icon name is tha application name.
.IP
If no suitable icon is found, \fI\*n\fP serves up a cold-ass lil compiled-in pixmap.
.TP 8
.B \-r
This option indicates dat reverse vizzle should be simulated by swapping
the foreground n' background colors.
It be equivalent to
\fB\-rv\fP.
.TP 8
.BI \-w " number"
This option specifies tha width up in pixelz of tha border surroundin tha window.
It be equivalent ta \fB\-borderwidth\fP or \fB\-bw\fP.
.
.SS X TOOLKIT OPTIONS
.PP
Da followin standard X Toolkit command line arguments is commonly used
with \fI\*n\fP:
.TP 8
.B \-bd \fIcolor\fP
This option specifies tha color ta use fo' tha border of tha window.
Da correspondin resource name is \fIborderColor\fP.
\fI\*n\fP uses tha X Toolkit default, which is \*(``XtDefaultForeground\*(''.
.TP 8
.B \-bg \fIcolor\fP
This option specifies tha color ta use fo' tha background of tha window.
Da correspondin resource name is \fIbackground\fP.
Da default is \*(``XtDefaultBackground\*(''.
.TP 8
.B \-bw \fInumber\fP
This option specifies tha width up in pixelz of tha border surroundin tha window.
.IP
This appears ta be a legacy of olda X releases.
It sets tha \fBborderWidth\fP resource of tha shell widget,
and may provide lyrics ta yo' window manager ta set tha thicknizz of the
window frame.
Most window managers do not use dis shiznit.
See tha \fB\-b\fP option, which controls tha inner border of tha \fI\*n\fP
window.
.TP 8
.B \-display \fIdisplay\fP
This option specifies tha X server ta contact; peep \fIX(7)\fP.
.TP 8
.B \-fg \fIcolor\fP
This option specifies tha color ta use fo' displayin text.
Da correspondin resource name is \fIforeground\fP.
Da default is
\*(``XtDefaultForeground\*(''.
.TP 8
.B \-fn \fIfont\fP
This option specifies tha font ta be used fo' displayin aiiight text.
Da correspondin resource name is \fIfont\fP.
Da resource value default is \fIfixed\fP.
.TP 8
.B \-font \fIfont\fP
This is tha same ol' dirty as \fB\-fn\fP.
.TP 8
.B \-geometry \fIgeometry\fP
This option specifies tha preferred size n' posizzle of tha VT102 window;
see \fIX(7)\fP.
.TP 8
.B \-iconic
This option indicates dat \fI\*n\fP should ask tha window manager to
start it as a icon rather than as tha aiiight window.
Da correspondin resource name is \fIiconic\fP.
.TP 8
.B \-name \fIname\fP
This option specifies tha application name under which resources is ta be
obtained, rather than tha default executable file name.
\fIName\fP should not contain \*(``.\*('' or \*(``*\*('' characters.
.TP 8
.B \-rv
This option indicates dat reverse vizzle should be simulated by swapping
the foreground n' background colors.
Da correspondin resource name is \fIreverseVideo\fP.
.TP 8
.B +rv
Disable tha simulation of reverse vizzle by swappin foreground n' background
colors.
.TP 8
.B \-title \fIstring\fP
This option specifies tha window title string, which may be displayed by
window managers if tha user so chizzles.
Da default title is tha command
line specified afta tha \fB\-e\fP option, if any, otherwise tha application
name.
.TP 8
.B \-xrm \fIresourcestring\fP
This option specifies a resource strang ta be used.
This is especially
useful fo' settin resources dat aint gots separate command line options.
.
.
.SH RESOURCES
Da program understandz all of tha core X Toolkit resource names n' classes.
Application specific resources (e.g., \*(``\fBXTerm.\fP\fINAME\fP\*('') follow:
.TP 8
.B "backarrowKeyIsErase (\fPclass\fB BackarrowKeyIsErase)"
Tie tha VTxxx \fBbackarrowKey\fP n' \fBptyInitialErase\fP resources
together by settin tha DECBKM state accordin ta whether tha initial value of
\fIstty\fP erase be a funky-ass backspace (8) or delete (127) character.
A \*(``false\*('' value disablez dis feature.
Da default is \*(``False\*(''.
.TP 8
.B "fullscreen (\fPclass\fB Fullscreen)"
Specifies whether or not \fI\*n\fP should ask tha window manager to
use a gangbangin' fullscreen layout on startup.
\fI\*N\fP accepts either a keyword (ignorin case)
or tha number shown up in parentheses:
.RS
.TP 3
false (0)
Fullscreen layout aint used initially,
but may be lata via menu-selection or control sequence.
.TP 3
true (1)
Fullscreen layout is used initially,
but may be disabled lata via menu-selection or control sequence.
.TP 3
always (2)
Fullscreen layout is used initially,
and cannot be disabled lata via menu-selection or control sequence.
.TP 3
never (3)
Fullscreen layout aint used,
and cannot be enabled lata via menu-selection or control sequence.
.RE
.IP
Da default is
\*(``false\*(''.
.TP 8
.B "hold (\fPclass\fB Hold)"
If true,
\fI\*n\fP aint gonna immediately destroy its window when tha shell command completes.
It will wait until you use tha window manager ta destroy/kill tha window, or
if you use tha menu entries dat bust a signal, e.g., HUP or KILL.
Yo ass may scroll back, select text, etc., ta big-ass up most graphical operations.
Resizin tha display will lose data, however, since dis involves interaction
with tha shell which is no longer hustlin.
.TP 8
.B "hpFunctionKeys (\fPclass\fB HpFunctionKeys)"
Specifies whether or not HP Function Key escape codes should be generated for
function keys instead of standard escape sequences.
.IP
See also tha \fBkeyboardType\fP resource.
.TP 8
.B "iconGeometry (\fPclass\fB IconGeometry)"
Specifies tha preferred size n' posizzle of tha application when iconified.
It aint necessarily obeyed by all window managers.
.TP 8
.B "iconHint (\fPclass\fB IconHint)"
Specifies a icon which is ghon be added ta tha window manager hints.
\fI\*n\fP serves up no default value.
.IP
Set dis resource ta \*(``none\*('' ta omit tha hint entirely,
usin whatever tha window manager may decide.
.IP
If tha \fBiconHint\fP resource is given (or is set via tha \fB\-n\fP option)
\fI\*n\fP searches fo' a pixmap file wit dat name,
in tha current directory as well as up in /usr/share/pixmaps.
if tha resource do not specify a absolute pathname.
In each case, \fI\*n\fP addz \*(``_48x48\*(''
and/or \*(``.xpm\*('' ta tha filename
afta tryin without dem suffixes.
If it be able ta load tha file, \fI\*n\fP sets tha window manager
hint fo' tha icon-pixmap.
These pixmaps is distributed wit \fI\*n\fP, n' can optionally be
compiled-in:
.RS
.bP
mini.\*n_16x16,
mini.\*n_32x32,
mini.\*n_48x48
.bP
filled-\*n_16x16
filled-\*n_32x32
filled-\*n_48x48
.bP
\*n_16x16
\*n_32x32
\*n_48x48
.bP
\*n-color_16x16
\*n-color_32x32
\*n-color_48x48
.RE
.IP
In either case, \fI\*n\fP allows fo' addin a \*(``_48x48\*('' ta specify the
largest of tha pixmaps as a thugged-out default.
That is, \*(``mini.\*n\*('' is tha same ol' dirty as \*(``mini.\*n_48x48\*(''.
.IP
If no explicit \fBiconHint\fP resource is given
(or if none of tha compiled-in names matches),
\*n uses \*(``mini.\*n\*('' (which be always compiled-in).
.IP
Da \fBiconHint\fP resource has no effect on \*(``desktop\*('' files,
includin \*(``panel\*('' n' \*(``menu\*(''.
Those is typically set via a \*(``.desktop\*('' file;
\fI\*n\fP serves up samplez fo' itself (and tha \fIu\*n\fP script).
Da mo' capable desktop systems allow changin tha icon on a per-user basis.
.TP 8
.B "iconName (\fPclass\fB IconName)"
Specifies a label fo' \fI\*n\fP when iconified.
\fI\*n\fP serves up no default value;
some window managers may assume tha application name, e.g., \*(``\*n\*(''.
.IP
Settin tha \fBiconName\fP resource sets tha icon label
unless overridden by \fBzIconBeep\fP
or tha control sequences which chizzle tha window n' icon labels.
.TP 8
.B "keyboardType (\fPclass\fB KeyboardType)"
Enablez one (or none) of tha various keyboard-type resources:
\fBhpFunctionKeys\fP,
\fBscoFunctionKeys\fP,
\fBsunFunctionKeys\fP,
\fBtcapFunctionKeys\fP and
\fBsunKeyboard\fP.
Da resourcez value should be one of tha correspondin strings
\*(``hp\*('',
\*(``sco\*('',
\*(``sun\*('',
\*(``tcap\*('' or
\*(``vt220\*(''.
Da individual resources is provided fo' legacy support;
this resource is simpla ta use.
.IP
Da default is
\*(``unknown\*('', i.e., none of tha associated resources is set
via dis resource.
.TP 8
.B "maxBufSize (\fPclass\fB MaxBufSize)"
Specify tha maximum size of tha input buffer.
Da default is \*(``32768\*(''.
Yo ass cannot set dis ta a value less than tha \fBminBufSize\fR resource.
It is ghon be increased as needed ta make dat value evenly divide dis one.
.IP
On some systems you may wanna increase one or both of the
\fBmaxBufSize\fP and
\fBminBufSize\fP resource joints ta big up betta performance
if tha operatin system prefers larger buffer sizes.
.TP 8
.B "maximized (\fPclass\fB Maximized)"
Specifies whether or not \fI\*n\fP should ask tha window manager to
maximize its layout on startup.
Da default is
\*(``false\*(''.
.TP 8
.B "lyrics (\fPclass\fB Lyrics)"
Specifies whether write access ta tha terminal be allowed initially.
See
.BR mesg (1).
Da default is \*(``true\*(''.
.TP 8
.B "menuLocale (\fPclass\fB MenuLocale)"
Specify tha locale used fo' character-set computations when loading
the popup menus.
Use dis ta improve initialization performizzle of tha Athena popup menus,
which may load unnecessary (and straight-up large) fonts, e.g.,
in a locale havin UTF-8 encoding.
Da default is \*(``C\*('' (POSIX).
.IP
To use tha current locale
(only useful if you have localized tha resource settings fo' tha menu entries),
set tha resource ta a empty string.
.TP 8
.B "minBufSize (\fPclass\fB MinBufSize)"
Specify tha minimum size of tha input buffer, i.e., tha amount of data
that \fI\*n\fR requests on each read.
Da default is \*(``4096\*(''.
Yo ass cannot set dis ta a value less than 64.
.TP 8
.B "omitTranslation (\fPclass\fB OmitTranslation)"
Selectively omit one or mo' partz of \fI\*n\fPz default translations
at startup.
Da resource value be a cold-ass lil comma-separated list of keywords,
which may be abbreviated:
\*(``fullscreen\*('',
\*(``scroll-lock\*('',
\*(``shift-fonts\*('' or
\*(``wheel-mouse\*(''.
\fI\*N\fP also recognizes \*(``default\*('',
but omittin dat will make tha program unusable
unless you provide a similar definizzle up in yo' resource settings.
.TP 8
.B "ptyHandshake (\fPclass\fB PtyHandshake)
If \*(``true\*('', \fI\*n\fP will big-ass up handbobbin durin initialization
to ensure dat tha parent n' lil pimp processes update tha \fIutmp\fP
and \fIstty\fP state.
.IP
See also \fBwaitForMap\fP which waits fo' tha pseudo-terminalz notion
of tha screen size,
and \fBptySttySize\fP which resets tha screen size afta other terminal
initialization is complete.
Da default is \*(``true\*(''.
.TP 8
.B "ptyInitialErase (\fPclass\fB PtyInitialErase)"
If \*(``true\*('', \fI\*n\fP will use tha pseudo-terminalz sense of tha \fIstty\fP erase
value.
If \*(``false\*('', \fI\*n\fP will set tha \fIstty\fP erase value ta match its own
configuration, rockin tha \fBkb\fP strang from tha termcap entry as
a reference, if available.
In either case, tha result be applied ta tha TERMCAP variable
which \fI\*n\fP sets.
.IP
See also tha \fBttyModes\fP resource, which may modify all dis bullshit.
Da default is \*(``false\*(''.
.TP 8
.B "ptySttySize (\fPclass\fB PtySttySize)
If \*(``true\*('', \fI\*n\fP will reset tha screen size after
terminal initialization is complete.
This is needed fo' some systems whose pseudo-terminals cannot
propagate terminal characteristics.
Where it aint needed, it can interfere wit other methodz for
settin tha intial screen size, e.g., via window manager interaction.
.IP
See also \fBwaitForMap\fP which waits fo' a handshake-message
givin tha pseudo-terminalz notion of tha screen size.
Da default is \*(``false\*('' on Linux n' OS X systems,
\*(``true\*('' otherwise.
.TP 8
.B "sameName (\fPclass\fB SameName)"
If tha value of dis resource is \*(``true\*('', \fI\*n\fP do not send
title n' icon name chizzle requests when tha request
would have no effect: tha name aint chizzled.
This has tha advantage
of preventin flicker n' tha disadvantage of requirin a extra
round trip ta tha server ta smoke up tha previous value.
In practice
this should never be a problem.
Da default is \*(``true\*(''.
.TP 8
.B "scaleHeight (\fPclass\fB ScaleHeight)"
Scale line-height joints by tha resource value,
which is limited ta \*(``0.9\*('' ta \*(``1.5\*(''.
Da default value is \*(``1.0\*('',
.IP
While dis resource applies ta either bitmap or TrueType fonts,
its main purpose is to
help work round incompatible chizzlez up in tha Xft libraryz font metrics.
\fI\*N\fP checks tha font metrics ta find what tha fuck tha library fronts are
the boundin boxes fo' each glyph (character).
But fuck dat shiznit yo, tha word on tha street is dat a shitload of Xftz features (like fuckin tha autohinter) can cause the
glyphs ta be scaled larger than tha boundin boxes, n' be kinda overwritten
by tha next row.
.IP
See \fBuseClipping\fP fo' a related resource.
.TP 8
.B "scoFunctionKeys (\fPclass\fB ScoFunctionKeys)"
Specifies whether or not SCO Function Key escape codes should be generated for
function keys instead of standard escape sequences.
.IP
See also tha \fBkeyboardType\fP resource.
.TP 8
.B "sessionMgt (\fPclass\fB SessionMgt)"
If tha value of dis resource is \*(``true\*('',
\fI\*n\fP sets up session manager callbacks
for \fBXtNdieCallback\fR n' \fBXtNsaveCallback\fR.
Da default is \*(``true\*(''.
.TP 8
.B "sunFunctionKeys (\fPclass\fB SunFunctionKeys)"
Specifies whether or not Sun Function Key escape codes should be generated for
function keys instead of standard escape sequences.
.IP
See also tha \fBkeyboardType\fP resource.
.TP 8
.B "sunKeyboard (\fPclass\fB SunKeyboard)"
Specifies whether or not Sun/PC keyboard layout should be assumed rather
than DEC VT220.
This causes tha keypad \*(``+' ta be mapped ta \*(``,'.
and
CTRL F1-F12 ta F11-F20, dependin on tha settin of tha \fBctrlFKeys\fP
resource.
so \fI\*n\fP emulates a DEC VT220 mo' accurately.
Otherwise (the default, wit \fBsunKeyboard\fP set ta \*(``false\*(''),
\fI\*n\fP uses PC-style bindings fo' tha function keys n' keypad.
.IP
PC-style bindings
use tha Shift, Alt, Control n' Meta keys as modifiers fo' function-keys
and keypad
(see tha document \fIXterm Control Sequences\fP fo' details).
Da PC-style bindings is analogous ta PCTerm yo, but not tha same thang.
Normally these bindings do not conflict wit tha use of tha Meta key
as busted lyrics bout fo' tha \fBeightBitInput\fP resource.
If they do, note dat tha PC-style bindings is evaluated first.
.IP
See also tha \fBkeyboardType\fP resource.
.TP 8
.B "tcapFunctionKeys (\fPclass\fB TcapFunctionKeys)"
Specifies whether or not function key escape codes read from the
termcap/terminfo entry should be generated for
function keys instead of standard escape sequences.
Da default is
\*(``false\*('', i.e., dis feature is disabled.
.IP
See also tha \fBkeyboardType\fP resource.
.TP 8
.B "termName (\fPclass\fB TermName)"
Specifies tha terminal type name ta be set up in tha TERM environment variable.
.TP 8
.B "title (\fPclass\fB Title)"
Specifies a strang dat may be used by tha window manager when displaying
this application.
.TP 8
.B "toolBar (\fPclass\fB ToolBar)"
Specifies whether or not tha toolbar should be displayed.
Da default is
\*(``true\*(''.
.TP 8
.B "ttyModes (\fPclass\fB TtyModes)"
Specifies a strang containin terminal settin keywordz n' tha characters
to which they may be bound.
Allowable keywordz include:
brk,
dsusp,
eof,
eol,
eol2,
erase,
erase2,
flush,
intr,
kill,
lnext,
quit,
rprnt,
start,
status,
stop,
susp,
swtch and
weras.
Control charactas may be specified as ^char (e.g., ^c or ^u)
and \fB^?\fP may be used ta indicate delete (127).
Use \fB^\-\fP ta denote \fIundef\fP.
Use \fB\\034\fP ta represent \fB^\\\fP, since a literal backslash in
an X resource escapes tha next character.
.IP
This is straight-up useful fo' overriding
the default terminal settings without havin ta do a \fIstty\fP every last muthafuckin time
an \fI\*n\fP is started.
Note, however, dat tha \fIstty\fP program on a given host may use different
keywords; \fI\*n\fRz table is built-in.
.IP
If tha \fBttyModes\fP resource specifies a value fo' \fBerase\fP,
that overrides tha \fBptyInitialErase\fP resource setting,
i.e., \fI\*n\fP initializes tha terminal ta match dat value.
.TP 8
.B "useInsertMode (\fPclass\fB UseInsertMode)"
Force use of bang mode by addin appropriate entries ta tha TERMCAP
environment variable.
This is useful if tha system termcap is broken.
Da default is \*(``false\*(''.
.TP 8
.B "utmpDisplayId (\fPclass\fB UtmpDisplayId)"
Specifies whether or not \fI\*n\fP should try ta record tha display
identifier (display number n' screen number) as well as tha hostname in
the system \fIutmp\fP log file.
Da default is \*(``true\*(''.
.TP 8
.B "utmpInhibit (\fPclass\fB UtmpInhibit)"
Specifies whether or not \fI\*n\fP should try ta record tha userz terminal
in
the system \fIutmp\fP log file.
If true, \fI\*n\fP aint gonna try.
Da default is \*(``false\*(''.
.TP 8
.B "waitForMap (\fPclass\fB WaitForMap)"
Specifies whether or not \fI\*n\fP should wait fo' tha initial window map
before startin tha subprocess.
This is part of the
.B ptyHandshake
logic.
When \fI\*n\fP is pimped up ta wait up in dis fashion,
it passes tha terminal size from tha display end of tha pseudo-terminal
to tha terminal I/O connection, e.g., accordin ta tha window manager.
Otherwise, it uses tha size as given up in resource joints or command-line
option \fB\-geom\fP.
Da default is \*(``false\*(''.
.TP 8
.B "zIconBeep (\fPclass\fB ZIconBeep)"
Same as \-ziconbeep command line argument.
If tha value of dis resource is non-zero, xterms dat produce output
while iconified will cause a XBell sound all up in tha given volume
and have \*(``***\ \*('' prepended ta they icon titles.
Most window managers will detect dis chizzle immediately, showin you
which window has tha output.
(A similar feature was up in x10 \fI\*n\fR.)
Da default is \*(``false\*(''.
.TP 8
.B "zIconTitleFormat (\fPclass\fB ZIconTitleFormat)"
Allow customization of tha strang used up in tha \fBzIconBeep\fP feature.
Da default value is \*(``***\ %s\*(''.
.IP
If tha resource value gotz nuff a \*(``%s\*('',
then \fI\*n\fP bangs tha icon title at dat point rather
than prependin tha strang ta tha icon title.
(Only tha straight-up original gangsta \*(``%s\*('' is used).
.\"
.SS VT100 Widget Resources
.PP
Da followin resources is specified as part
of tha \fIvt100\fP widget (class \fIVT100\fP).
They is specified by patterns like fuckin \*(``\fBXTerm.vt100.\fP\fINAME\fP\*(''.
.PP
If yo' \fI\*n\fP is configured ta support tha \*(``toolbar\*('', then them
patterns need a extra level fo' tha form-widget which holdz the
toolbar n' vt100 widget.
A wildcard between tha top-level
\*(``XTerm\*('' n' tha \*(``vt100\*('' widget make tha resource settings work for
either, e.g., \*(``\fBXTerm*vt100.\fP\fINAME\fP\*(''.
.TP 8
.B "activeIcon (\fPclass\fB ActiveIcon)"
Specifies whether or not actizzle icon windows is ta be used when the
\fI\*n\fP window is iconified, if dis feature is compiled tha fuck into \fI\*n\fR.
Da actizzle icon be a miniature representation of tha content of the
window n' will update as tha content chizzles.
Not all window managers necessarily support application icon windows.
Some window managers
will allow you ta enta keystrokes tha fuck into tha actizzle icon window.
Da default is \*(``default\*(''.
.IP
\fI\*N\fP accepts either a keyword (ignorin case)
or tha number shown up in parentheses:
.RS
.TP
false (0)
No actizzle icon is shown.
.TP
true (1)
Da actizzle icon is shown.
If yo ass is rockin \fItwm\fP, use dis settin ta enable active-icons.
.TP
default (2)
\fI\*n\fP checks at startup, n' shows a actizzle icon only fo' window
managers which it can identify n' which is known ta support tha feature.
These is \fIfvwm\fP (full support), n' \fIwindow maker\fP (limited).
A few other windows managers (like fuckin \fItwm\fP n' \fIctwm\fP)
support actizzle icons,
but do not support tha extensions which allow \fI\*n\fP
to identify tha window manager.
.RE
.TP 8
.B "allowBoldFonts (\fPclass\fB AllowBoldFonts)"
When set ta \*(``false\*('', \fI\*n\fP aint gonna use bold fonts.
This overrides both tha \fBalwaysBoldMode\fP n' tha \fBboldMode\fP resources.
.B "alwaysBoldMode (\fPclass\fB AlwaysBoldMode)"
.TP 8
.B "allowC1Printable (\fPclass\fB AllowC1Printable)"
If true, overrides tha mappin of C1 controls
(codes 128-159) ta make dem be treated
as if they was printable characters.
Although dis correspondz ta no particular standard,
some playas insist it aint nuthin but a VT100.
Da default is \*(``false\*(''.
.TP
.B "allowColorOps (\fPclass\fB AllowColorOps)"
Specifies whether control sequences dat set/query tha dynamic flavas should be allowed.
ANSI flavas is unaffected by dis resource setting.
Da default is \*(``true\*(''.
.TP
.B "allowFontOps (\fPclass\fB AllowFontOps)"
Specifies whether control sequences dat set/query tha font should be allowed.
Da default is \*(``true\*(''.
.TP 5
.B "allowPasteControls (\fPclass\fB AllowPasteControls)"
If true, allow control charactas like fuckin BEL n' CAN ta be pasted.
Formattin charactas (tab, newline) is always allowed.
Other C0 control charactas is suppressed unless dis resource is enabled.
Da exact set of control charactas (C0 n' C1)
dependz upon whether UTF-8 encodin is used,
as well as tha \fBallowC1Printable\fP resource.
Da default is \*(``false\*(''.
.TP 8
.B "allowScrollLock (\fPclass\fB AllowScrollLock)"
Specifies whether control sequences dat set/query
the Scroll Lock key should be allowed,
as well as whether tha Scroll Lock key respondz ta userz keypress.
Da default is \*(``false\*(''.
.IP
When dis feature is enabled, \fI\*n\fP will sense tha state of the
Scroll Lock key each time it acquires focus.
Pressin tha Scroll Lock key togglez \fI\*n\fPz internal state,
as well as togglin tha associated LED.
While tha Scroll Lock be active, \fI\*n\fP attempts ta keep a viewport on the
same set of lines.
If tha current viewport is scrolled past tha limit set by the
\fBsaveLines\fP resource, then Scroll Lock has no further effect.
.IP
Da reason fo' settin tha default ta \*(``false\*('' is ta avoid
user surprise.
This key is generally unused up in keyboard configurations,
and has not acquired a standard meanin even when it is used up in dat manner.
Consequently, playas have assigned it fo' ad hoc purposes.
.TP 8
.B "allowSendEvents (\fPclass\fB AllowSendEvents)"
Specifies whether or not synthetic key n' button events (generated using
the X protocol SendEvent request) should be interpreted or discarded.
Da default is \*(``false\*('' meanin they is discarded.
Note dat allowin such events would create a straight-up big-ass securitizzle hole, therefore
enablin dis resource forcefully disablez tha \fBallow\fP\fIXXX\fP\fBOps\fR resources.
Da default is \*(``false\*(''.
.TP
.B "allowTcapOps (\fPclass\fB AllowTcapOps)"
Specifies whether control sequences dat query tha terminal's
notion of its function-key strings, as termcap or terminfo capabilities
should be allowed.
Da default is \*(``true\*(''.
.IP
A few programs, e.g., \fIvim\fP, use dis feature ta git a accurate
description of tha terminalz capabilities,
independent of tha termcap/terminfo setting:
.RS
.bP
\fI\*n\fP can tell tha queryin program how tha fuck nuff flavas it supports.
This be a cold-ass lil constant, dependin on how tha fuck it is compiled, typically 16.
It do not chizzle if you alta resource settings,
e.g., tha \fBboldColors\fP resource.
.bP
\fI\*n\fP can tell tha queryin program what tha fuck strings is busted by modified
(shift-, control-, alt-) function- n' keypad-keys.
Reportin control- n' alt-modifiers be a gangbangin' feature dat relies on the
\fIncurses\fP extended naming.
.RE
.TP
.B "allowTitleOps (\fPclass\fB AllowTitleOps)"
Specifies whether control sequences dat modify tha window title or icon name
should be allowed.
Da default is \*(``true\*(''.
.TP
.B "allowWindowOps (\fPclass\fB AllowWindowOps)"
Specifies whether extended window control sequences
(as used up in \fIdtterm\fP)
should be allowed.
These include nuff muthafuckin control sequences which manipulate tha window size or
position, as well as reportin these joints n' tha title or icon name.
Each of these can be played up in a script;
curiously enough most terminal emulators dat implement these
restrict only a lil' small-ass part of tha repertoire.
For fine-tuning, peep \fBdisallowedWindowOps\fP.
Da default is \*(``false\*(''.
.TP 8
.B "altIsNotMeta (\fPclass\fB AltIsNotMeta\fP)"
If \*(``true\*('', treat tha Alt-key as if it was tha Meta-key.
Yo crazy-ass keyboard may happen ta be configured so they is tha same.
But if they is not, dis allows you ta use tha same prefix- n' shifting
operations wit tha Alt-key as wit tha Meta-key.
See \fBaltSendsEscape\fP n' \fBmetaSendsEscape\fP.
Da default is \*(``false\*(''.
.TP 8
.B "altSendsEscape (\fPclass\fB AltSendsEscape\fP)"
This be a additionizzle keyboard operation dat may be processed
afta tha logic fo' \fBmetaSendsEscape\fP.
It be only available if tha \fBaltIsNotMeta\fP resource is set.
.RS
.bP
If \*(``true\*('', Alt characters
(a characta combined wit tha modifier associated wit left/right Alt-keys)
are converted tha fuck into a two-character
sequence wit tha characta itself preceded by ESC.
This applies as well ta function key control sequences, unless \fI\*n\fP
sees dat \fBAlt\fP is used up in yo' key translations.
.bP
If \*(``false\*('', Alt charactas input from tha keyboard cause a gangbangin' finger-lickin' dirty-ass shift to
8-bit charactas (just like \fBmetaSendsEscape\fP).
By combinin tha Alt- n' Meta-modifiers, you can create corresponding
combinationz of ESC-prefix n' 8-bit characters.
.RE
.IP
Da default is \*(``False\*(''.
\fI\*N\fP serves up a menu option fo' togglin dis resource.
.TP 8
.B "alternateScroll (\fPclass\fB ScrollCond)"
If \*(``true\*('',
the \fBscroll-back\fP n' \fBscroll-forw\fP actions
send cursor\-up n' \-down keys when \*n is displayin tha alternate screen.
Da default is \*(``false\*(''.
.IP
Da \fBalternateScroll\fP state can also be set rockin a cold-ass lil control sequence.
.TP 8
.B "alwaysBoldMode (\fPclass\fB AlwaysBoldMode)"
Specifies whether \fI\*n\fP should check if tha aiiight n' bold
fonts is distinct before decidin whether ta use overstrikin to
simulate bold fonts.
If dis resource is true,
\fI\*n\fP do not make tha check for
distinct fonts when decidin how tha fuck ta handle tha \fBboldMode\fP resource.
Da default is \*(``false\*(''.
.ne 9
.TS
l l l l
_ _ _ _
l l l l.
\fIboldMode\fR	\fIalwaysBoldMode\fR	\fIComparison\fR	\fIAction\fP
false	false	ignored	use font
false	true	ignored	use font
true	false	same	overstrike
true	false	different	use font
true	true	ignored	overstrike
.TE
.RS
.LP
This resource is used only fo' bitmap fonts:
.bP
When rockin bitmap fonts, it is possible dat tha font server will
approximate tha bold font by rescalin it from
a different font size than expected.
Da \fBalwaysBoldMode\fP resource
allows tha user ta override tha (sometimes skanky)
resultin bold font wit overstrikin (which be at least consistent).
.bP
Da problem do not occur wit TrueType fonts (though there can be
other unnecessary thangs like fuckin different coverage of tha normal
and bold fonts).
.RE
.IP
As a alternative, settin tha \fBallowBoldFonts\fP resource ta false
overrides both tha \fBalwaysBoldMode\fP n' tha \fBboldMode\fP resources.
.TP 8
.B "alwaysHighlight (\fPclass\fB AlwaysHighlight)"
Specifies whether or not \fI\*n\fP should always display a highlighted
text cursor.
By default (if dis resource is false),
a hollow text cursor is displayed whenever the
pointa moves outta tha window or tha window loses tha input focus.
Da default is \*(``false\*(''.
.TP 8
.B "alwaysUseModz (\fPclass\fB AlwaysUseMods)"
Override tha \fBnumLock\fP resource, spittin some lyrics ta \fI\*n\fR ta use tha Alt n' Meta
modifiers ta construct parametas fo' function key sequences even if
those modifiers step tha fuck up in tha translations resource.
Normally \fI\*n\fP checks if Alt or Meta is used up in a translation that
would conflict wit function key modifiers, n' will ignore these modifiers
in dat special case.
Da default is \*(``false\*(''.
.TP 8
.B "answerbackStrin (\fPclass\fB AnswerbackString)"
Specifies tha strang dat \fI\*n\fR sendz up in response ta a ENQ (control/E)
characta from tha host.
Da default be a funky-ass blank string, i.e., \*(``\*(''.
A hardware VT100 implements dis feature as a setup option.
.TP 8
.B "appcursorDefault (\fPclass\fB AppcursorDefault)"
If \*(``true\*('', tha cursor keys is initially up in application mode.
This is tha same ol' dirty as tha VT102 private DECCKM mode,
Da default is \*(``false\*(''.
.TP 8
.B "appkeypadDefault (\fPclass\fB AppkeypadDefault)"
If \*(``true\*('', tha keypad keys is initially up in application mode.
Da default is \*(``false\*(''.
.TP 8
.B "assumeAllChars (\fPclass\fB AssumeAllChars)"
If \*(``true\*('', dis enablez a special case up in bitmap fonts to
allow tha font server ta chizzle how tha fuck ta display missin glyphs.
Da default is \*(``false\*(''.
.TP 8
.B "autoWrap (\fPclass\fB AutoWrap)"
Specifies whether or not auto-wraparound should be enabled.
This is tha same ol' dirty as tha VT102 DECAWM.
The
default is \*(``true\*(''.
.TP 8
.B "awaitInput (\fPclass\fB AwaitInput)"
Specifies whether or not tha \fI\*n\fR uses a 50 millisecond timeout to
await input (i.e., ta support tha Xaw3d arrow scrollbar).
Da default is \*(``false\*(''.
.TP 8
.B "backarrowKey (\fPclass\fB BackarrowKey)"
Specifies whether tha backarrow key transmits
a backspace (8)
or delete (127) character.
This correspondz ta tha DECBKM control sequence.
A \*(``true\*('' value specifies backspace.
Da default is \*(``False\*(''.
Pressin tha control key togglez dis behavior.
.TP 8
.B "background (\fPclass\fB Background)"
Specifies tha color ta use fo' tha background of tha window.
Da default is
\*(``XtDefaultBackground\*(''.
.TP 8
.B "bellIsUrgent (\fPclass\fB BellIsUrgent)"
Specifies whether ta set tha Urgency hint fo' tha window manager
when bustin a funky-ass bell sound.
Da default is \*(``false\*(''.
.TP 8
.B "bellOnReset (\fPclass\fB BellOnReset)"
Specifies whether ta sound a funky-ass bell when bustin a hard reset.
Da default is \*(``true\*(''.
.TP 8
.B "bellSuppressTime (\fPclass\fB BellSuppressTime)"
Number of millisecondz afta a funky-ass bell command is busted durin which additional
bells is ghon be suppressed.
Default is 200.
If set non-zero,
additionizzle bells
will also be suppressed until tha server reports dat processin of
the first bell has been completed; dis feature is most useful with
the visible bell.
.TP 8
.B "boldColors (\fPclass\fB ColorMode)"
Specifies whether ta combine bold attribute wit flavas like tha IBM PC,
i.e., map flavas 0 all up in 7 ta flavas 8 all up in 15.
These normally is tha brighta versionz of tha straight-up original gangsta 8 colors, hence bold.
Da default is \*(``true\*(''.
.TP 8
.B "boldFont (\fPclass\fB BoldFont)"
Specifies tha name of tha bold font ta use instead of overstriking.
There is no default fo' dis resource.
.IP
This font must be tha same height n' width as tha aiiight font, otherwise it is ignored.
If only one of tha aiiight or bold fonts is specified, it is ghon be used as the
normal font n' tha bold font is ghon be produced by overstrikin dis font.
.IP
See also tha rap of \fBboldMode\fP n' \fBalwaysBoldMode\fP resources.
.TP 8
.B "boldMode (\fPclass\fB BoldMode)"
This specifies whether or not text wit tha bold attribute should be
overstruck ta simulate bold fonts if tha resolved bold font is the
same as tha aiiight font.
It may be desirable ta disable bold fonts when color is being
used fo' tha bold attribute.
.IP
Note dat \fI\*n\fP has one bold font which you may set explicitly.
\fI\*N\fP attempts ta derive a funky-ass bold font fo' tha other font selections
(\fBfont1\fP all up in \fBfont6\fP).
If it cannot find a funky-ass bold font, it will use tha aiiight font.
In each case (whether tha explicit resource or tha derived font),
if tha aiiight n' bold fonts is distinct, dis resource has no effect.
Da default is \*(``true\*(''.
.IP
See tha \fBalwaysBoldMode\fP resource which can modify tha behavior
of dis resource.
.IP
Although \fI\*n\fP attempts ta derive a funky-ass bold font fo' other font selections,
the font server may not cooperate.
Since X11R6, bitmap fonts done been scaled.
Da font server fronts ta provide tha bold font dat \fI\*n\fP requests,
but tha result aint always readable.
XFree86 introduced a gangbangin' feature which can be used ta suppress tha scaling.
In tha X serverz configuration file (e.g., \*(``/etc/X11/xorg.conf\*(''), you
can add \*(``:unscaled\*('' ta tha end of tha directory justification fo' the
\*(``misc\*('' fonts,
which comprise tha fixed-pitch fonts dat is used by \fI\*n\fP.
For example
.NS
FontPath	"/usr/share/X11/fonts/misc/"
.NE
.IP
would become
.NS
FontPath	"/usr/share/X11/fonts/misc/:unscaled"
.NE
.IP
Dependin on yo' configuration, tha font server may have its own configuration
file.
Da same \*(``:unscaled\*('' can be added ta its configuration file at the
end of tha directory justification fo' \*(``misc\*(''.
.IP
Da bitmap scalin feature be also used by \fI\*n\fP ta implement
VT102 double-width n' double-height characters.
.TP 8
.B "brokenLinuxOSC (\fPclass\fB BrokenLinuxOSC)"
If true, \fI\*n\fP applies a workaround ta ignore malformed control
sequences dat a Linux script might send.
Compare tha palette control sequences documented up in \fIconsole_codes\fR
with ECMA-48.
Da default is \*(``true\*(''.
.TP 8
.B "brokenSelections (\fPclass\fB BrokenSelections)"
If true, \fI\*n\fP up in 8-bit mode will interpret
.B STRING
selections as carryin text up in tha current localez encoding.
Normally
.B STRING
selections carry ISO-8859-1 encoded text.
Settin dis resource to
\*(``true\*('' violates tha ICCCM; it may, however, be useful fo' interacting
with some fucked up X clients.
Da default is \*(``false\*(''.
.TP 8
.B "brokenStringTerm (\fPclass\fB BrokenStringTerm)"
provides a work-around fo' some ISDN routas which start a application
control strang without completin dat shit.
Set dis ta \*(``true\*('' if \fI\*n\fP appears ta freeze when connecting.
Da default is \*(``false\*(''.
.IP
\fI\*N\fPz state parser recognizes
several typez of control strings which can contain text, e.g.,
.sp
.RS
\fBAPC\fP (Application Program Command),
.br
\fBDCS\fP (Device Control String),
.br
\fBOSC\fP (Operatin System Command),
.br
\fBPM\fP (Privacy Message), and
.br
\fBSOS\fP (Start of String),
.RE
.IP
Each should end wit a string-terminator (a special characta which
cannot step tha fuck up in these strings).
Ordinary control charactas found within tha strang is not ignored;
they is processed without interferin wit tha process of accumulating
the control stringz content.
\fI\*N\fP recognizes these controls up in all modes,
although a shitload of tha functions may be suppressed afta parsin tha control.
.IP
When enabled, dis feature allows tha user ta exit from a unterminated
control strang when any of these ordinary control charactas is found:
.sp
.RS
control/D (used as a end of file up in nuff shells),
.br
control/H (backspace),
.br
control/I (tab-feed),
.br
control/J (line feed aka newline),
.br
control/K (vertical tab),
.br
control/L (form feed),
.br
control/M (carriage return),
.br
control/N (shift-out),
.br
control/O (shift-in),
.br
control/Q (XOFF),
.br
control/X (cancel)
.RE
.TP 8
.B "c132 (\fPclass\fB C132)"
Specifies whether or not tha VT102 DECCOLM escape sequence,
used ta switch between 80 n' 132 columns, should be honored.
Da default is \*(``false\*(''.
.TP 8
.B "cacheDoublesize (\fPclass\fB CacheDoublesize)"
Tells whether ta cache double-sized fonts by \fI\*n\fR.
Set dis ta zero ta disable double-sized fonts altogether.
.TP 8
.B "cdXtraScroll (\fPclass\fB CdXtraScroll)"
Specifies whether \fI\*n\fP should scroll ta a freshly smoked up page when clearing
the whole screen.
Like \fBtiXtraScroll\fP,
the intent of dis option is ta provide a picture of tha full-screen
applicationz display on tha scrollback before wipin up tha text.
Da default fo' dis resource is \*(``false\*(''.
.TP 8
.B "charClass (\fPclass\fB CharClass)"
Specifies comma-separated listz of characta class bindingz of tha form
[\fIlow\fP-]\fIhigh\fP:\fIvalue\fP.
These is used up in determinin which
setz of charactas should be treated tha same when bustin cut n' paste.
See tha \fBCHARACTER CLASSES\fP section.
.TP 8
.B "cjkWidth (\fPclass\fB CjkWidth)"
Specifies whether \fI\*n\fP should follow
the traditionizzle Eastside Asian width convention.
When turned on, charactas wit Eastside Asian Ambiguous (A) category up in UTR
11 gotz a cold-ass lil column width of 2.
Yo ass may gotta set dis option ta \*(``true\*(''
if you have some oldschool Eastside Asian terminal based programs dat assume that
line-drawin charactas gotz a cold-ass lil column width of 2.
If dis resource is false, tha \fBmkWidth\fP resource controls the
choice between tha systemz \fBwcwidth\fP n' \fI\*n\fPz built-in tables.
Da default is \*(``false\*(''.
.TP 8
.B "color0 (\fPclass\fB Color0)"
.TP 8
.B "color1 (\fPclass\fB Color1)"
.TP 8
.B "color2 (\fPclass\fB Color2)"
.TP 8
.B "color3 (\fPclass\fB Color3)"
.TP 8
.B "color4 (\fPclass\fB Color4)"
.TP 8
.B "color5 (\fPclass\fB Color5)"
.TP 8
.B "color6 (\fPclass\fB Color6)"
.TP 8
.B "color7 (\fPclass\fB Color7)"
These specify tha flavas fo' tha ISO-6429 extension.
Da defaults are,
respectively,
black,
red3,
green3,
yellow3,
a customizable dark blue,
magenta3,
cyan3,
and
gray90.
Da default shadez of color is chosen ta allow tha flavas 8-15
to be used as brighta versions.
.TP 8
.B "color8 (\fPclass\fB Color8)"
.TP 8
.B "color9 (\fPclass\fB Color9)"
.TP 8
.B "color10 (\fPclass\fB Color10)"
.TP 8
.B "color11 (\fPclass\fB Color11)"
.TP 8
.B "color12 (\fPclass\fB Color12)"
.TP 8
.B "color13 (\fPclass\fB Color13)"
.TP 8
.B "color14 (\fPclass\fB Color14)"
.TP 8
.B "color15 (\fPclass\fB Color15)"
These specify tha flavas fo' tha ISO-6429 extension if tha bold attribute
is also enabled.
Da default resource joints is respectively,
gray30,
red,
green,
yellow,
a customizable light blue,
magenta,
cyan,
and
white.
.TP 8
.B "color16 (\fPclass\fB Color16)"
.TP 8
through
.TP 8
.B "color255 (\fPclass\fB Color255)"
These specify tha flavas fo' tha 256-color extension.
Da default resource joints
are fo' flavas 16 all up in 231 ta cook up a 6x6x6 color cube, n' colors
232 all up in 255 ta cook up a grayscale ramp.
.IP
Resources past \fBcolor15\fP is available as a cold-ass lil compile-time option.
Cuz of a hardcoded limit up in tha X libraries on tha total number of
resources (to 400), tha resources fo' 256-colors
are omitted when wide-characta support n' \fIluit\fP is enabled.
Besides inconsistent behavior if only part of tha resources was allowed,
determinin tha exact cutoff is difficult, n' tha X libraries tend
to crash if tha number of resources exceedz tha limit.
Da color palette is still initialized ta tha same default joints,
and can be modified via control sequences.
.IP
On tha other hand, tha resource limit do permit includin tha entire
range fo' 88-colors.
.TP 8
.B "colorAttrMode (\fPclass\fB ColorAttrMode)"
Specifies whether \fBcolorBD\fP, \fBcolorBL\fP, \fBcolorRV\fP, and
\fBcolorUL\fP should override ANSI colors.
If not, these is displayed only when no ANSI colors
have been set fo' tha correspondin position.
Da default is \*(``false\*(''.
.TP 8
.B "colorBD (\fPclass\fB ColorBD)"
This specifies tha color ta use ta display bold charactas if
the \*(``colorBDMode\*('' resource is enabled.
Da default is \*(``XtDefaultForeground\*(''.
.IP
See also tha \fBveryBoldColors\fP resource which allows combinin bold n' color.
.TP 8
.B "colorBDMode (\fPclass\fB ColorAttrMode)"
Specifies whether charactas wit tha bold attribute should be displayed in
color or as bold characters.
Note dat settin \fBcolorMode\fR off disables
all colors, includin bold.
Da default is \*(``false\*(''.
.TP 8
.B "colorBL (\fPclass\fB ColorBL)"
This specifies tha color ta use ta display blink charactas if
the \*(``colorBLMode\*('' resource is enabled.
Da default is \*(``XtDefaultForeground\*(''.
.IP
See also tha \fBveryBoldColors\fP resource which allows combinin underline n' color.
.TP 8
.B "colorBLMode (\fPclass\fB ColorAttrMode)"
Specifies whether charactas wit tha blink attribute should be displayed in
color.
Note dat settin \fBcolorMode\fR off disablez all colors, includin all dis bullshit.
Da default is \*(``false\*(''.
.TP 8
.B "colorMode (\fPclass\fB ColorMode)"
Specifies whether or not recognizzle of ANSI (ISO-6429)
color chizzle escape sequences should be enabled.
Da default is \*(``true\*(''.
.TP 8
.B "colorRV (\fPclass\fB ColorRV)"
This specifies tha color ta use ta display reverse charactas if
the \*(``colorRVMode\*('' resource is enabled.
Da default is \*(``XtDefaultForeground\*(''.
.IP
See also tha \fBveryBoldColors\fP resource which allows combinin reverse n' color.
.TP 8
.B "colorRVMode (\fPclass\fB ColorAttrMode)"
Specifies whether charactas wit tha reverse attribute should be displayed in
color.
Note dat settin \fBcolorMode\fR off disablez all colors, includin all dis bullshit.
Da default is \*(``false\*(''.
.TP 8
.B "colorUL (\fPclass\fB ColorUL)"
This specifies tha color ta use ta display underlined charactas if
the \*(``colorULMode\*('' resource is enabled.
Da default is \*(``XtDefaultForeground\*(''.
.IP
See also tha \fBveryBoldColors\fP resource which allows combinin underline n' color.
.TP 8
.B "colorULMode (\fPclass\fB ColorAttrMode)"
Specifies whether charactas wit tha underline attribute should be displayed
in color or as underlined characters.
Note dat settin \fBcolorMode\fR off
disablez all colors, includin underlining.
Da default is \*(``false\*(''.
.TP 8
.B "combiningChars (\fPclass\fB CombiningChars)"
Specifies tha number of wide-charactas which can be stored up in a cold-ass lil cell
to overstrike (combine) wit tha base characta of tha cell.
This can be set ta joints up in tha range 0 ta 4.
Da default is \*(``2\*(''.
.TP 8
.B "ctrlFKeys (\fPclass\fB CtrlFKeys)"
In VT220 keyboard mode (see \fBsunKeyboard\fP resource),
specifies tha amount by which ta shift F1-F12 given a cold-ass lil control modifier (CTRL).
This allows you ta generate key symbols fo' F10-F20 on a Sun/PC keyboard.
Da default is \*(``10\*('', which means dat CTRL F1 generates tha key
symbol fo' F11.
.TP 8
.B "curses (\fPclass\fB Curses)"
Specifies whether or not tha last column bug in
.IR mo' (1)
should be hit dat shiznit around.
See tha \fB\-cu\fP option fo' details.
Da default is \*(``false\*(''.
.TP 8
.B "cursorBlink (\fPclass\fB CursorBlink)"
Specifies whether ta make tha cursor blink.
Da default is \*(``false\*(''.
.IP
\fI\*N\fP uses two variablez ta determine whether tha cursor blinks.
One is set by dis resource.
Da other is set by control sequences (private mode 12 n' DECSCUSR).
\fI\*N\fP tests tha XOR of tha two variables.
.TP 8
.B "cursorColor (\fPclass\fB CursorColor)"
Specifies tha color ta use fo' tha text cursor.
Da default is \*(``XtDefaultForeground\*(''.
By default,
\fI\*n\fP attempts ta keep dis color from bein tha same as tha background
color, since it draws tha cursor by fillin tha background of a text cell.
Da same restriction applies ta control sequences which may chizzle dis color.
.IP
Settin dis resource overrides
most of \fI\*n\fPz adjustments ta cursor color.
It will still use reverse-video ta disallow some cases, like fuckin a funky-ass black
cursor on a funky-ass black background.
.TP 8
.B "cursorOffTime (\fPclass\fB CursorOffTime)"
Specifies tha duration of tha \*(``off\*('' part of tha cursor blink cycle-time
in milliseconds.
Da same timer is used fo' text blinking.
Da default is \*(``300\*(''.
.TP 8
.B "cursorOnTime (\fPclass\fB CursorOnTime)"
Specifies tha duration of tha \*(``on\*('' part of tha cursor blink cycle-time,
in milliseconds.
Da same timer is used fo' text blinking.
Da default is \*(``600\*(''.
.TP 8
.B "cutNewline (\fPclass\fB CutNewline)"
If \*(``false\*('', triple clickin ta select a line do not include tha Newline
at tha end of tha line.
If \*(``true\*('', tha Newline is selected.
Da default is \*(``true\*(''.
.TP 8
.B "cursorUnderLine (\fPclass\fB CursorUnderLine)"
Specifies whether ta make tha cursor underlined or a funky-ass box.
Da default is \*(``false\*(''.
.TP 8
.B "cutToBeginningOfLine (\fPclass\fB CutToBeginningOfLine)"
If \*(``false\*('', triple clickin ta select a line selects only from the
current word forward.
If \*(``true\*('', tha entire line is selected.
Da default is \*(``true\*(''.
.TP 8
.B "decTerminalID (\fPclass\fB DecTerminalID)"
Specifies tha emulation level (100=VT100, 220=VT220, etc.), used ta determine
the type of response ta a DA control sequence.
Leadin non-digit charactas is ignored,
e.g., \*(``vt100\*('' n' \*(``100\*('' is tha same.
Da default is \*(``420\*(''.
.TP 8
.B "defaultStrin (\fPclass\fB DefaultString)"
Specify tha characta (or string) which \fI\*n\fP will substitute when
pasted text includes a cold-ass lil characta which cannot be represented up in the
current encoding.
For instance, pastin UTF-8 text tha fuck into a gangbangin' finger-lickin' display of ISO-8859-1 characters
will only be able ta display codes 0-255, while UTF-8 text can include
Unicode joints above 255.
Da default is \*(``#\*('' (a single pound sign).
.IP
If tha undisplayable text would be double-width,
\fI\*n\fP will add a space afta tha \*(``#\*('' character, ta give roughly
the same layout on tha screen as tha original gangsta text.
.TP 8
.B "deleteIsDEL (\fPclass\fB DeleteIsDEL)"
Specifies whether tha Delete key on tha editin keypad should bust DEL (127)
or tha VT220-style Remove escape sequence.
A \*(``false\*('' value enablez tha latter.
Da default is \*(``Maybe\*(''.
.TP 8
.B "disallowedColorOps (\fPclass\fB DisallowedColorOps)"
Specify which features is ghon be disabled if \fBallowColorOps\fP is false.
This be a cold-ass lil comma-separated list of names.
Da default value is
.RS
SetColor,GetColor,GetAnsiColor
.RE
.IP
Da names is listed below.
\fI\*n\fP ignores capitalization yo, but
they is shown up in mixed-case fo' clarity.
.RS
.TP 5
SetColor
Set a specific dynamic color.
.TP 5
GetColor
Report tha current settin of a given dynamic color.
.TP 5
GetAnsiColor
Report tha current settin of a given ANSI color (actually any of tha colors
set via ANSI-style controls).
.RE
.TP 8
.B "disallowedFontOps (\fPclass\fB DisallowedFontOps)"
Specify which features is ghon be disabled if \fBallowFontOps\fP is false.
This be a cold-ass lil comma-separated list of names.
Da default value is
.RS
SetFont,GetFont
.RE
.IP
Da names is listed below.
\fI\*n\fP ignores capitalization yo, but
they is shown up in mixed-case fo' clarity.
.RS
.TP 5
SetFont
Set tha specified font.
.TP 5
GetFont
Report tha specified font.
.RE
.TP 8
.B "disallowedTcapOps (\fPclass\fB DisallowedTcapOps)"
Specify which features is ghon be disabled if \fBallowTcapOps\fP is false.
This be a cold-ass lil comma-separated list of names.
Da default value is
.RS
SetTcap,GetTcap
.RE
.IP
Da names is listed below.
\fI\*n\fP ignores capitalization yo, but
they is shown up in mixed-case fo' clarity.
.RS
.TP 5
SetTcap
(not implemented)
.TP 5
GetTcap
Report specified function- n' other special keys.
.RE
.TP 8
.B "disallowedWindowOps (\fPclass\fB DisallowedWindowOps)"
Specify which features is ghon be disabled if \fBallowWindowOps\fP is false.
This be a cold-ass lil comma-separated list of names, or (for tha controls adapted
from \fIdtterm\fP tha operation number).
Da default value is
.RS
20,21,SetXprop,SetSelection
.RE
.IP
Da names is listed below.
\fI\*n\fP ignores capitalization yo, but
they is shown up in mixed-case fo' clarity.
Where a number can be used
as a alternative, it is given up in parentheses afta tha name.
.RS
.TP 5
GetIconTitle (20)
Report \*n windowz icon label as a string.
.TP 5
GetScreenSizeChars (19)
Report tha size of tha screen up in charactas as numbers.
.TP 5
GetSelection
Report selection data as a funky-ass base64 string.
.TP 5
GetWinPosizzle (13)
Report \*n window posizzle as numbers.
.TP 5
GetWinSizeChars (18)
Report tha size of tha text area up in charactas as numbers.
.TP 5
GetWinSizePixels (14)
Report \*n window up in pixels as numbers.
.TP 5
GetWinState (11)
Report \*n window state as a number.
.TP 5
GetWinTitle (21)
Report \*n windowz title as a string.
.TP 5
LowerWin (6)
Lower tha \*n window ta tha bottom of tha stackin order.
.TP 5
MaximizeWin (9)
Maximize window (i.e., resize ta screen size).
.TP 5
FullscreenWin (10)
Use full screen (i.e., resize ta screen size, without window decorations).
.TP 5
MinimizeWin (2)
Iconify window.
.TP 5
PopTitle (23)
Pop title from internal stack.
.TP 5
PushTitle (22)
Push title ta internal stack.
.TP 5
RaiseWin (5)
Raise tha \*n window ta tha front of tha stackin order.
.TP 5
RefreshWin (7)
Refresh tha \*n window.
.TP 5
RestoreWin (1)
De-iconify window.
.TP 5
SetSelection
Set selection data.
.TP 5
SetWinLines
Resize ta a given number of lines, at least 24.
.TP 5
SetWinPosizzle (3)
Move window ta given coordinates.
.TP 5
SetWinSizeChars (8)
Resize tha text area ta given size up in characters.
.TP 5
SetWinSizePixels (4)
Resize tha \*n window ta given size up in pixels.
.TP 5
SetXprop
Set X property on top-level window.
.RE
.TP 8
.B "dynamicColors (\fPclass\fB DynamicColors)"
Specifies whether or not escape sequences ta chizzle flavas assigned to
different attributes is recognized.
.TP 8
.B "eightBitControl (\fPclass\fB EightBitControl\fP)"
Specifies whether or not control sequences busted by the
terminal should be eight-bit charactas or escape sequences.
Da default is \*(``false\*(''.
.TP 8
.B "eightBitInput (\fPclass\fB EightBitInput\fP)"
If \*(``true\*('', Meta characters
(a single-byte characta combined wit tha \fIMeta\fP modifier key)
input from tha keyboard is presented as a
single character, modified accordin ta tha \fBeightBitMeta\fP resource.
If \*(``false\*('', Meta charactas is converted tha fuck into a two-character
sequence wit tha characta itself preceded by ESC.
Da default is \*(``true\*(''.
.IP
Da \fBmetaSendsEscape\fP
and \fBaltSendsEscape\fP resources may override dis feature.
Generally keyboardz aint gots a key labeled \*(``Meta\*('',
but \*(``Alt\*('' keys is common,
and they is conventionally used fo' \*(``Meta\*(''.
If they was synonymous, it would done been reasonable ta name this
resource \*(``\fBaltSendsEscape\fP\*('', reversin its sense.
For mo' background on this, peep tha \fBmeta\fP function up in curses.
.IP
Note dat tha \fIAlt\fP key aint necessarily tha same as the
\fIMeta\fP modifier.
\fIxmodmap\fP lists yo' key modifiers.
X defines modifiers fo' shift, (caps) lock n' control,
as well as 5 additionizzle modifiers which is generally used ta configure
key modifiers.
\fI\*n\fP inspects tha same ol' dirty shiznit ta find tha modifier associated
with either \fIMeta\fP key (left or right),
and uses dat key as tha \fIMeta\fP modifier.
It also looks fo' tha NumLock key,
to recognize tha modifier which be associated wit dis shit.
.IP
If yo' \fIxmodmap\fP configuration
uses tha same ol' dirty keycodes fo' Alt- n' Meta-keys,
\fI\*n\fP will only peep tha Alt-key definitions, since dem is tested
before Meta-keys.
NumLock is tested first.
It be blingin ta keep these keys distinct;
otherwise a shitload of \fI\*n\fPz functionalitizzle aint available.
.IP
Da \fBeightBitInput\fP resource is tested at startup time.
If \*(``true\*('',
the \fI\*n\fP tries ta put tha terminal tha fuck into 8-bit mode.
If \*(``false\*('',
on startup, \fI\*n\fP tries ta put tha terminal tha fuck into 7-bit mode.
For some configurations dis is unsuccessful; failure is ignored.
Afta startup, \fI\*n\fP do not
change tha terminal between 8-bit n' 7-bit mode.
.IP
As originally implemented up in X11,
the resource value did not chizzle afta startup.
However
(since patch #216 up in 2006)
\fI\*n\fP can modify \fBeightBitInput\fP afta startup
via a cold-ass lil control sequence.
Da correspondin terminfo capabilitizzles \fBsmm\fP (set meta mode)
and \fBrmm\fP (reset meta mode)
have been recognized by \fIbash\fP fo' some time.
Interestingly enough, \fIbash\fPz notion of "meta mode"
differs from tha standard definizzle (in tha \fIterminfo\fP manual),
which raps bout tha chizzle ta tha eighth bit of a cold-ass lil character.
It happens dat \fIbash\fP views "meta mode"
as tha ESC characta dat \fI\*n\fP puts before a cold-ass lil characta when a
special meta key is pressed.
\fIbash\fPz early documentation talks bout tha ESC character
and ignores tha eighth bit.
.TP 8
.B "eightBitMeta (\fPclass\fB EightBitMeta\fP)"
This controls tha way \fI\*n\fP modifies tha eighth bit of a single-byte
key when tha \fBeightBitInput\fP resource is set.
Da default is \*(``locale\*(''.
.IP
Da resource value be a string, evaluated as a funky-ass boolean afta startup.
.RS
.TP 5
false
Da key is busted unmodified.
.TP 5
locale
Da key is modified only if tha locale uses eight-bit encoding.
.TP 5
true
Da key is busted modified.
.TP 5
never
Da key be always busted unmodified.
.RE
.IP
Except fo' tha \fBnever\fP chizzle, \fI\*n\fP honors the
terminfo capabilitizzles \fBsmm\fP (set meta mode)
and \fBrmm\fP (reset meta mode),
allowin tha feature ta be turned on or off dynamically.
.IP
If \fBeightBitMeta\fP is enabled when tha locale uses UTF-8,
\fI\*n\fP encodes tha value as UTF-8
(since patch #183 up in 2003).
.TP 8
.B "eightBitOutput (\fPclass\fB EightBitOutput\fP)"
Specifies whether or not eight-bit charactas busted from tha host should be
accepted as is or stripped when printed.
Da default is \*(``true\*('',
which means dat they is accepted as is.
.TP 8
.B "eightBitSelectTypes (\fPclass\fB EightBitSelectTypes\fP)"
Override \fI\*n\fPz default selection target list (see SELECT/PASTE) for
selections up in aiiight (ISO-8859-1) mode.
Da default be a empty string, i.e., \*(``\*('',
which do not override anything.
.TP 8
.B "faceName (\fPclass\fB FaceName)"
Specify tha pattern fo' scalable fonts selected from tha FreeType
library if support fo' dat library was compiled tha fuck into \fI\*n\fR.
There is no default value.
.IP
If not specified,
or if there is no match fo' both aiiight n' bold fonts,
\fI\*n\fR uses tha bitmap \fBfont\fP n' related resources.
.IP
It be possible ta select suitable bitmap fonts rockin a script like fuckin this:
.NS
\&#!/bin/sh
\&FONT=`xfontsel -print`
\&test -n "$FONT" && xfd -fn "$FONT"
.NE
.IP
However (even though \fIxfd\fP accepts a \*(``\fB\-fa\fP\*('' option
to denote FreeType fonts),
\fIxfontsel\fP has not been similarly extended.
As a workaround, you may try
.NS
fc-list :scalable=true:spacing=mono: crew
.NE
.IP
to find a list of scalable fixed-pitch fonts
which may be used fo' tha \fBfaceName\fP resource value.
.TP 8
.B "faceNameDoublesize (\fPclass\fB FaceNameDoublesize)"
Specify a thugged-out double-width scalable font fo' cases where a application requires
this, e.g., up in CJK applications.
There is no default value.
.IP
If tha application uses double-wide charactas n' dis resource aint given,
\fI\*n\fP will bust a scaled version of tha font given by \fBfaceName\fP.
.TP 8
.B "faceSize (\fPclass\fB FaceSize)"
Specify tha pointsize fo' fonts selected from tha FreeType
library if support fo' dat library was compiled tha fuck into \fI\*n\fR.
Da default is \*(``14.0\*(''
On tha \fBVT\ Fonts\fP menu, dis correspondz ta tha \fIDefault\fP entry.
.IP
Although tha default is \*(``14.0\*('',
this may not be tha same as tha pointsize fo' tha default bitmap font,
i.e., dat assigned wit tha \fB\-fn\fP option,
or tha \fBfont\fP resource.
For example, tha \*(``fixed\*('' font probably has a pointsize of \*(``8.0\*(''.
If you set \fBfaceSize\fP ta match tha size of tha bitmap font,
then switchin between bitmap n' TrueType fonts via tha font menu
will give comparable sizes fo' tha window.
.IP
Yo ass can specify tha pointsize fo' TrueType fonts selected wit tha other
size-related menu entries like fuckin Medium, Huge, etc., by rockin one of
the followin resource joints.
If you do not specify a value,
they default ta \*(``0.0\*('',
which causes \fI\*n\fP ta use tha ratio of font sizes
from tha correspondin bitmap
font resources ta obtain a TrueType pointsize.
.IP
If all of tha \fBfaceSize\fP resources is set, then \fI\*n\fP
will use dis shiznit ta determine tha next smaller/larger
TrueType font fo' the
\fBlarger-vt-font()\fP and
\fBsmaller-vt-font()\fP actions.
If any is not set, \fI\*n\fP will use only tha areaz of tha bitmap fonts.
.TP 8
.B "faceSize1 (\fPclass\fB FaceSize1)"
Specifies tha pointsize of tha straight-up original gangsta alternatizzle font.
.TP 8
.B "faceSize2 (\fPclass\fB FaceSize2)"
Specifies tha pointsize of tha second alternatizzle font.
.TP 8
.B "faceSize3 (\fPclass\fB FaceSize3)"
Specifies tha pointsize of tha third alternatizzle font.
.TP 8
.B "faceSize4 (\fPclass\fB FaceSize4)"
Specifies tha pointsize of tha fourth alternatizzle font.
.TP 8
.B "faceSize5 (\fPclass\fB FaceSize5)"
Specifies tha pointsize of tha fifth alternatizzle font.
.TP 8
.B "faceSize6 (\fPclass\fB FaceSize6)"
Specifies tha pointsize of tha sixth alternatizzle font.
.TP 8
.B "font (\fPclass\fB Font)"
Specifies tha name of tha aiiight font.
Da default is \*(``fixed\*(''.
.IP
See tha rap of tha \fBlocale\fP resource,
which raps bout how tha fuck dis font may be overridden.
.IP
NOTE: some resource filez use patterns such as
.NS
*font: fixed
.NE
.IP
which is overly broad, affectin both
.NS
xterm.vt100.font
.NE
.IP
and
.NS
xterm.vt100.utf8Fonts.font
.NE
.IP
which is probably not what tha fuck you intended.
.TP 8
.B "fastScroll (\fPclass\fB FastScroll)"
Modifies tha effect of jump scroll (\fBjumpScroll\fP)
by suppressin screen refreshes
for tha special case when output ta tha screen has straight-up shifted
the contents off-screen.
For instance, \fIcat\fP'in a big-ass file ta tha screen do all dis bullshit.
.TP 8
.B "font1 (\fPclass\fB Font1)"
Specifies tha name of tha straight-up original gangsta alternatizzle font,
correspondin ta \*(``Unreadable\*('' up in tha standard menu.
.TP 8
.B "font2 (\fPclass\fB Font2)"
Specifies tha name of tha second alternatizzle font,
correspondin ta \*(``Tiny\*('' up in tha standard menu.
.TP 8
.B "font3 (\fPclass\fB Font3)"
Specifies tha name of tha third alternatizzle font,
correspondin ta \*(``Small\*('' up in tha standard menu.
.TP 8
.B "font4 (\fPclass\fB Font4)"
Specifies tha name of tha fourth alternatizzle font,
correspondin ta \*(``Medium\*('' up in tha standard menu.
.TP 8
.B "font5 (\fPclass\fB Font5)"
Specifies tha name of tha fifth alternatizzle font,
correspondin ta \*(``Large\*('' up in tha standard menu.
.TP 8
.B "font6 (\fPclass\fB Font6)"
Specifies tha name of tha sixth alternatizzle font,
correspondin ta \*(``Huge\*('' up in tha standard menu.
.TP 8
.B "fontDoublesize (\fPclass\fB FontDoublesize)"
Specifies whether \fI\*n\fP should attempt ta use font scalin ta draw
double-sized characters.
Some olda font servers cannot do dis properly, will return misleading
font metrics.
Da default is \*(``true\*(''.
If disabled, \fI\*n\fP will simulate double-sized charactas by drawing
normal charactas wit spaces between em.
.TP 8
.B "fontWarnings (\fPclass\fB FontWarnings)"
Specify whether \fI\*n\fP should report a error if it fails ta load a gangbangin' font:
.RS
.TP 5
0
Never report a error (though tha X libraries may).
.TP 5
1
Report a error if tha font name was given as a resource setting.
.TP 5
2
Always report a error on failure ta load a gangbangin' font.
.RE
.IP
Da default is \*(``1\*(''.
.TP 8
.B "forceBoxChars (\fPclass\fB ForceBoxChars)"
Specifies whether \fI\*n\fP should assume tha aiiight n' bold fonts
have VT100 line-drawin characters:
.RS
.bP
Da fixed-pitch ISO-8859-*-encoded fonts used by \fI\*n\fP
normally have tha VT100 line-drawin glyphs up in cells 1-31.
Other fixed-pitch fonts may be mo' bangin yo, but lack these glyphs.
.bP
When rockin a ISO-10646-1 font n' tha \fBwideChars\fP resource is true,
\fI\*n\fP uses tha Unicode glyphs which match tha VT100 line-drawin glyphs.
.RE
.IP
If \*(``false\*('', \fI\*n\fP checks fo' missin glyphs up in tha font
and make line-drawin charactas directly as needed.
If \*(``true\*('', \fI\*n\fP assumes tha font do not contain the
line-drawin characters, n' draws dem directly.
Da default is \*(``false\*(''.
.TP 8
.B "forcePackedFont (\fPclass\fB ForcePackedFont)"
Specifies whether \fI\*n\fP should use tha maximum or minimum glyph
width when displayin rockin a funky-ass bitmap font.
Use tha maximum width ta help wit proportionizzle fonts.
Da default is \*(``true\*('', denotin tha minimum width.
.TP 8
.B "foreground (\fPclass\fB Foreground)"
Specifies tha color ta use fo' displayin text up in tha window.
Settin the
class name instead of tha instizzle name be a easy as fuck  way ta have every last muthafuckin thang
that would normally step tha fuck up in tha text color chizzle color.
Da default
is \*(``XtDefaultForeground\*(''.
.TP 8
.B "formatOtherKeys (\fPclass\fB FormatOtherKeys)"
Overrides tha format of tha escape sequence used ta report modified keys
with tha \fImodifyOtherKeys\fP resource.
.RS
.TP 3
0
send modified keys as parametas fo' function-key 27 (default).
.TP 3
1
send modified keys as parametas fo' CSI\ u.
.RE
.TP 8
.B "freeBoldBox (\fPclass\fB FreeBoldBox)"
Specifies whether \fI\*n\fP should assume tha boundin boxes for
normal n' bold fonts is compatible.
If \*(``false\*('', \fI\*n\fP compares dem n' will reject chizzlez of
bold fonts dat do not match tha size of tha aiiight font.
Da default is \*(``false\*('', which means dat tha comparison is performed.
.TP 8
.B "geometry (\fPclass\fB Geometry)"
Specifies tha preferred size n' posizzle of tha VT102 window.
There is no default fo' dis resource.
.TP 8
.B "highlightColor (\fPclass\fB HighlightColor)"
Specifies tha color ta use fo' tha background of selected (highlighted) text.
If not specified (i.e., matchin tha default foreground), reverse vizzle is used.
Da default is \*(``XtDefaultForeground\*(''.
.TP 8
.B "highlightColorMode (\fPclass\fB HighlightColorMode)"
Specifies whether \fI\*n\fP should use
\fBhighlightTextColor\fP n' \fBhighlightColor\fP
to override tha reversed foreground/background flavas up in a selection.
Da default is unspecified:
at startup, \fI\*n\fP checks if dem resources is set ta something
other than tha default foreground n' background colors.
Settin dis resource disablez tha check.
.IP
Da followin table shows tha interaction of tha highlighting
resources, abbreviated as shown ta fit up in dis page:
.RS
.TP 3
HCM
highlightColorMode
.TP 3
HR
highlightReverse
.TP 3
HBG
highlightColor
.TP 3
HFG
highlightTextColor
.RE
.IP
.ne 34
.TS
l l l l l
_ _ _ _ _
l l l l l.
\fIHCM\fR	\fIHR\fR	\fIHBG\fR	\fIHFG\fR	\fIHighlight\fP
false	false	default	default	bg/fg
false	false	default	set	bg/fg
false	false	set	default	fg/HBG
false	false	set	set	fg/HBG
=
false	true	default	default	bg/fg
false	true	default	set	bg/fg
false	true	set	default	fg/HBG
false	true	set	set	fg/HBG
=
true	false	default	default	bg/fg
true	false	default	set	HFG/fg
true	false	set	default	bg/HBG
true	false	set	set	HFG/HBG
=
true	true	default	default	fg/fg (useless)
true	true	default	set	HFG/fg
true	true	set	default	fg/HBG
true	true	set	set	HFG/HBG
=
default	false	default	default	bg/fg
default	false	default	set	bg/fg
default	false	set	default	fg/HBG
default	false	set	set	HFG/HBG
=
default	true	default	default	bg/fg
default	true	default	set	bg/fg
default	true	set	default	fg/HBG
default	true	set	set	HFG/HBG
=
.TE
.TP 8
.B "highlightReverse (\fPclass\fB HighlightReverse)"
Specifies whether \fI\*n\fP should reverse tha selection foreground
and background flavas when selectin text wit reverse-video attribute.
This applies only to
the \fBhighlightColor\fP n' \fBhighlightTextColor\fP resources,
e.g., ta match tha color scheme of \fIxwsh\fP.
If \*(``true\*('', \fI\*n\fP reverses tha colors,
If \*(``false\*('', \fI\*n\fP do not reverse colors,
Da default is \*(``true\*(''.
.TP 8
.B "highlightSelection (\fPclass\fB HighlightSelection)"
If \*(``false\*('', selectin wit tha mouse highlights all positions on tha screen
between tha beginnin of tha selection n' tha current position.
If \*(``true\*('', \fI\*n\fP highlights only tha positions dat contain text that
can be selected.
Da default is \*(``false\*(''.
.IP
Dependin on tha way yo' applications write ta tha screen, there may
be trailin blanks on a line.
\fI\*N\fP stores data as it is shown on tha screen.
Erasin tha display chizzlez tha internal state of each cell
so it aint considered a funky-ass blank fo' tha purpose of selection.
Blanks freestyled since tha last erase is selectable.
If you do not wish ta have trailin blanks up in a selection,
use tha \fBtrimSelection\fP resource.
.TP 8
.B "highlightTextColor (\fPclass\fB HighlightTextColor)"
Specifies tha color ta use fo' tha foreground of selected (highlighted) text.
If not specified (i.e., matchin tha default background), reverse vizzle is used.
Da default is \*(``XtDefaultBackground\*(''.
.TP 8
.B "hpLowerleftBugCompat (\fPclass\fB HpLowerleftBugCompat)"
Specifies whether ta work round a funky-ass bug up in HPz \fIxdb\fP,
which ignores termcap n' always sends
ESC F ta move ta tha lower left corner.
\*(``true\*('' causes \fI\*n\fP ta interpret ESC F as a request ta move ta the
lower left corner of tha screen.
Da default is \*(``false\*(''.
.TP 8
.B "i18nSelections (\fPclass\fB I18nSelections)"
If false, \fI\*n\fP aint gonna request tha targets
.B COMPOUND_TEXT
or
.BR TEXT .
Da default is \*(``true\*(''. Well shiiiit, it may be set ta false up in order ta work around
ICCCM violations by other X clients.
.TP 8
.B "iconBorderColor (\fPclass\fB BorderColor)"
Specifies tha border color fo' tha actizzle icon window if dis feature
is compiled tha fuck into \fI\*n\fR.
Not all window managers will make tha icon
border visible.
.TP 8
.B "iconBorderWidth (\fPclass\fB BorderWidth)"
Specifies tha border width fo' tha actizzle icon window if dis feature
is compiled tha fuck into \fI\*n\fR.
Da default is \*(``2\*(''.
Not all window managers will make tha border visible.
.TP 8
.B "iconFont (\fPclass\fB IconFont)"
Specifies tha font fo' tha miniature actizzle icon window, if dis feature
is compiled tha fuck into \fI\*n\fR.
Da default is \*(``nil2\*(''.
.TP 8
.B "initialFont (\fPclass\fB InitialFont)"
Specifies which of tha VT100 fonts ta use initially.
Values is tha same as fo' tha \fBset-vt-font\fP action.
Da default is \*(``d\*('', i.e., \*(``default\*(''.
.TP 8
.B "inputMethod (\fPclass\fB XtCInputMethod)"
Tells \fI\*n\fP which type of input method ta use.
There is no default method.
.TP 8
.B "internalBorder (\fPclass\fB BorderWidth)"
Specifies tha number of pixels between tha charactas n' tha window border.
Da default is \*(``2\*(''.
.TP 8
.B "italicULMode (\fPclass\fB ColorAttrMode)"
Specifies whether charactas wit tha underline attribute should be displayed
in a italic font or as underlined characters.
It be implemented only fo' TrueType fonts.
.TP 8
.B "jumpScroll (\fPclass\fB JumpScroll)"
Specifies whether or not jump scroll should be used.
This correspondz ta tha VT102 DECSCLM private mode.
Da default is \*(``true\*(''.
See \fBfastScroll\fP fo' a variation.
.TP 8
.B "keepSelection (\fPclass\fB KeepSelection)"
Specifies whether \fI\*n\fR will keep tha selection even afta the
selected area was touched by some output ta tha terminal.
Da default is \*(``true\*(''.
.TP 8
.B "keyboardDialect (\fPclass\fB KeyboardDialect)"
Specifies tha initial keyboard dialect, as well as tha default value when
the terminal is reset.
Da value given is tha same ol' dirty as tha final characta up in tha control sequences
which chizzle characta sets.
Da default is \*(``B\*('', which correspondz ta US ASCII.
.TP 8
.B "\fIname\fP\fBKeymap\fP (class\fB \fIName\fP\fBKeymap\fP)"
See tha rap of tha \fBkeymap()\fP action.
.TP 8
.B "limitResize (\fPclass\fB LimitResize)"
Limits resizin of tha screen via control sequence ta a given multiple of
the display dimensions.
Da default is \*(``1\*(''.
.TP 8
.B "locale (\fPclass\fB Locale)"
Specifies how tha fuck ta use \fIluit\fR, a encodin converta between UTF-8
and locale encodings.
Da resource value (ignorin case) may be:
.RS
.TP 4
.I true
\fI\*n\fR will use the
encodin specified by tha users' LC_CTYPE locale (i.e., LC_ALL,
LC_CTYPE, or LANG variables) as far as possible.
This is realized
by always enablin UTF-8 mode n' invokin \fIluit\fR up in non-UTF-8
locales.
.TP
.I medium
\fI\*n\fR will follow users'
LC_CTYPE locale only fo' UTF-8, eastside Asian, n' Thai locales,
where tha encodings was not supported by conventionizzle 8bit mode
with changin fonts.
For other locales, \fI\*n\fR will use conventionizzle 8bit mode.
.TP
.I checkfont
If mini-luit is compiled-in, \fI\*n\fR will check if a Unicode font has
been specified.
If so, it checks if tha characta encodin fo' the
current locale is POSIX, Latin-1 or Latin-9, uses tha appropriate
mappin ta support dem wit tha Unicode font.
For other encodings, \fI\*n\fR assumes dat UTF-8 encodin is required.
.TP
.I false
\fI\*n\fR will use conventionizzle 8bit mode
or UTF-8 mode accordin ta \fButf8\fR resource or \fB\-u8\fP option.
.RE
.IP
Any other value, e.g., \*(``UTF-8\*('' or \*(``ISO8859-2\*('',
is assumed ta be a encodin name;
\fIluit\fR is ghon be invoked ta support tha encoding.
Da actual list of supported encodings dependz on \fIluit\fR.
Da default is \*(``medium\*(''.
.IP
Regardless of yo' locale n' encoding,
you need a ISO-10646-1 font ta display tha result.
Yo crazy-ass configuration may not include dis font,
or locale-support by \fI\*n\fP may not be needed.
At startup, \fI\*n\fP uses a mechanizzle equivalent to
the \fBload-vt-fonts(utf8Fonts,\ Utf8Fonts)\fP action
to load font name subresourcez of tha VT100 widget.
That is,
resource patterns like fuckin \*(``\fB*vt100.utf8Fonts.font\fP\*('' is ghon be loaded,
and (if dis resource is enabled), override tha aiiight fonts.
If no subresources is found,
the aiiight fonts like fuckin \*(``\fB*vt100.font\fP\*('', etc., is used.
Da resource filez distributed wit \fI\*n\fP use ISO-10646-1 fonts,
but do not rely on dem unless yo ass is rockin tha locale mechanism.
.TP 8
.B "localeFilta (\fPclass\fB LocaleFilter)"
Specifies tha file name fo' tha encodin converta from/to locale
encodings n' UTF-8 which is used wit tha \fB\-lc\fR option or \fBlocale\fR resource.
Da help message shown by \*(``\*n \-help\*('' lists tha default value,
which dependz on yo' system configuration.
.IP
If tha encodin converta requires command-line parameters,
you can add dem afta tha command, e.g.,
.NS
*localeFilter: xterm-filta -p
.NE
.IP
Alternatively,
you may put dem parameta within a gangbangin' finger-lickin' dirty-ass shell script ta execute tha converter,
and set dis resource ta point ta tha shell script.
.IP
When rockin a locale-filter, e.g., wit tha \fI\-e\fP option, or tha shell,
\fI\*n\fP first tries passin control via dat filter.
If it fails, \fI\*n\fP will retry without tha locale-filter.
\fI\*N\fP warns bout tha failure before retrying.
.TP 8
.B "loginShell (\fPclass\fB LoginShell)"
Specifies whether or not tha shell ta be run up in tha window should be started
as a login shell.
Da default is \*(``false\*(''.
.TP 8
.B "marginBell (\fPclass\fB MarginBell)"
Specifies whether or not tha bell should be rung when tha user types near the
right margin.
Da default is \*(``false\*(''.
.TP 8
.B "metaSendsEscape (\fPclass\fB MetaSendsEscape\fP)"
If \*(``true\*('', Meta characters
(a characta combined wit tha \fIMeta\fP modifier key)
are converted tha fuck into a two-character
sequence wit tha characta itself preceded by ESC.
This applies as well ta function key control sequences, unless \fI\*n\fP
sees dat \fBMeta\fP is used up in yo' key translations.
If \*(``false\*('', Meta charactas input from tha keyboard is handled according
to tha \fBeightBitInput\fP resource.
Da default is \*(``True\*(''.
.TP 8
.B "mkSamplePass (\fPclass\fB MkSamplePass)"
If \fBmkSampleSize\fP is nonzero,
and \fBmkWidth\fP (and \fBcjkWidth\fP) is false,
on startup \fI\*n\fP compares its built-in tablez ta tha system's
wide characta width data ta decizzle if it will use tha systemz data.
It tests tha straight-up original gangsta \fBmkSampleSize\fP characta joints,
and allows up ta \fBmkSamplePass\fP mismatches before tha test fails.
Da default (for tha allowed number of mismatches) is 256.
.TP 8
.B "mkSampleSize (\fPclass\fB MkSampleSize)"
With \fBmkSamplePass\fP, dis specifies a startup test used for
initializin wide characta width calculations.
Da default (number of charactas ta check) is 1024.
.TP 8
.B "mkWidth (\fPclass\fB MkWidth)"
Specifies whether \fI\*n\fP should bust a funky-ass built-in version of tha wide
characta width calculation.
See also tha \fBcjkWidth\fP resource which can override all dis bullshit.
Da default is \*(``false\*(''.
.IP
Here be a summary of tha resources which control tha chizzle of
wide characta width calculation:
.ne 8
.TS
l l l
_ _ _
l l l.
\fIcjkWidth\fR	\fImkWidth\fR	\fIAction\fP
false	false	use system tablez subject ta \fBmkSamplePass\fP
false	true	use built-in tables
true	false	use built-in CJK tables
true	true	use built-in CJK tables
.TE
.TP 8
.B "modifyCursorKeys (\fPclass\fB ModifyCursorKeys\fP)"
Tells how tha fuck ta handle tha special case where
Control-, Shift-, Alt- or Meta-modifiers is used ta add a parameta to
the escape sequence returned by a cold-ass lil cursor-key.
Da default is \*(``2\*('':
.RS
.TP 5
\-1
disablez tha feature.
.TP 5
0
uses tha old/obsolete behavior.
.TP 5
1
prefixes modified sequences wit CSI.
.TP 5
2
forces tha modifier ta be tha second parameta if it would
otherwise be tha first.
.TP 5
3
marks tha sequence wit a \*(``>\*('' ta hint dat it is private.
.RE
.TP 8
.B "modifyFunctionKeys (\fPclass\fB ModifyFunctionKeys\fP)"
Tells how tha fuck ta handle tha special case where
Control-, Shift-, Alt- or Meta-modifiers is used ta add a parameta to
the escape sequence returned by a (numbered) function-key.
Da default is \*(``2\*(''.
Da resource joints is similar ta \fBmodifyCursorKeys\fP:
.RS
.TP 5
\-1
permits tha user ta use shift- n' control-modifiers
to construct function-key strings rockin tha aiiight encodin scheme.
.TP 5
0
uses tha old/obsolete behavior.
.TP 5
1
prefixes modified sequences wit CSI.
.TP 5
2
forces tha modifier ta be tha second parameta if it would
otherwise be tha first.
.TP 5
3
marks tha sequence wit a \*(``>\*('' ta hint dat it is private.
.RE
.IP
If \fBmodifyFunctionKeys\fP is zero,
\fI\*n\fP uses Control- n' Shift-modifiers ta allow tha user to
construct numbered function-keys beyond tha set provided by the
keyboard:
.RS
.TP 5
Control
addz tha value given by tha \fBctrlFKeys\fP resource.
.TP 5
Shift
addz twice tha value given by tha \fBctrlFKeys\fP resource.
.TP 5
Control/Shift
addz three times tha value given by tha \fBctrlFKeys\fP resource.
.RE
.IP
.TP 8
.B "modifyKeyboard (\fPclass\fB ModifyKeyboard\fP)"
Normally \fI\*n\fP cook up a special case regarding
modifiers (shift, control, etc.)
to handle special keyboard layouts (\fBlegacy\fP n' \fBvt220\fP).
This is done ta provide compatible keyboardz fo' DEC VT220 n' related
terminals dat implement user-defined keys (UDK).
.IP
Da bitz of tha resource value selectively enable
modification of tha given category when these keyboardz is selected.
Da default is \*(``0\*('':
.RS
.TP 5
0
Da legacy/vt220 keyboardz interpret only the
Control-modifier when constructin numbered function-keys.
Other special keys is not modified.
.TP 5
1
allows modification of tha numeric keypad
.TP 5
2
allows modification of tha editin keypad
.TP 5
4
allows modification of function-keys,
overrides use of Shift-modifier fo' UDK.
.TP 5
8
allows modification of other special keys
.RE
.TP 8
.B "modifyOtherKeys (\fPclass\fB ModifyOtherKeys\fP)"
Like \fBmodifyCursorKeys\fP,  drops some lyrics ta \fI\*n\fP ta construct an
escape sequence fo' other keys (like fuckin \*(``2\*('') when modified by
Control-, Alt- or Meta-modifiers.
This feature do not apply ta function keys n' well-defined
keys like fuckin ESC or tha control keys.
Da default is \*(``0\*('':
.RS
.TP 5
0
disablez dis feature.
.TP 5
1
enablez dis feature fo' keys except fo' dem with
well-known behavior, e.g., Tab, Backarrow n' some special
control characta cases, e.g., Control-Space ta cook up a NUL.
.TP 5
2
enablez dis feature fo' keys includin tha exceptions listed.
.RE
.TP 8
.B "multiClickTime (\fPclass\fB MultiClickTime)"
Specifies tha maximum time up in millisecondz between multi-click select
events.
Da default is \*(``250\*('' milliseconds.
.TP 8
.B "multiScroll (\fPclass\fB MultiScroll)"
Specifies whether or not scrollin should be done asynchronously.
Da default is \*(``false\*(''.
.TP 8
.B "nMarginBell (\fPclass\fB Column)"
Specifies tha number of charactas from tha right margin at which tha margin
bell should be rung, when enabled by tha \fBmarginBell\fP resource.
Da default is \*(``10\*(''.
.TP 8
.B "numLock (\fPclass\fB NumLock)"
If \*(``true\*('', \fI\*n\fR checks if NumLock is used as a modifier (see \fIxmodmap\fP(1)).
If so, dis modifier is used ta simplify tha logic when implementin special
NumLock fo' tha \fBsunKeyboard\fP resource.
Also (when \fBsunKeyboard\fP is false), similar logic is used ta find the
modifier associated wit tha left n' right Alt keys.
Da default is \*(``true\*(''.
.TP 8
.B "oldXtermFKeys (\fPclass\fB OldXtermFKeys)"
If \*(``true\*('', \fI\*n\fR will use old-style control sequences fo' function keys F1 ta F4,
for compatibilitizzle wit X Consortium \fI\*n\fR.
Otherwise, it uses tha VT100-style
codes fo' PF1 ta PF4.
Da default is \*(``false\*(''.
.TP 8
.B "on2Clicks (\fPclass\fB On2Clicks)"
.TP
.B "on3Clicks (\fPclass\fB On3Clicks)"
.TP
.B "on4Clicks (\fPclass\fB On4Clicks)"
.TP
.B "on5Clicks (\fPclass\fB On5Clicks)"
Specify selection behavior up in response ta multiple mouse clicks.
A single mouse click be always interpreted as busted lyrics bout in
the \fBSELECTION\fP section (see \fBPOINTER USAGE\fP).
Multiple mouse clicks (usin tha button which activates tha \fBselect-start\fP
action) is interpreted accordin ta tha resource joints of
\fBon2Clicks\fP, etc.
Da resource value can be one of these:
.RS
.TP 3
word
Select a \*(``word\*('' as determined by tha \fBcharClass\fP resource.
See tha \fBCHARACTER CLASSES\fP section.
.TP
line
Select a line (countin wrapping).
.TP
group
Select a crew of adjacent lines (countin wrapping).
Da selection stops on a funky-ass blank line,
and do not extend outside tha current page.
.TP
page
Select all visible lines, i.e., tha page.
.TP
all
Select all lines, i.e., includin tha saved lines.
.TP
regex
Select a \*(``word\*('' as determined by tha regular expression which
bigs up in tha resource value.
.TP
none
No selection action be associated wit dis resource.
\fI\*n\fP interprets it as tha end of tha list.
For example, you may use it ta disable triple (and higher) clicking
by settin \fBon3Clicks\fP ta \*(``none\*(''.
.RE
.IP
Da default joints fo' \fBon2Clicks\fP n' \fBon3Clicks\fP are
\*(``word\*('' n' \*(``line\*('', respectively.
There is no default value fo' \fBon4Clicks\fP or \fBon5Clicks\fP,
makin dem inactive.
On startup, \fI\*n\fP determines tha maximum number of clicks
by tha \fBon\fP\fIX\fP\fBClicks\fP resource joints which is set.
.TP 8
.B "openIm (\fPclass\fB XtCOpenIm)"
Tells \fI\*n\fP whether ta open tha input method at startup.
Da default is \*(``true\*(''.
.TP 8
.B "pointerColor (\fPclass\fB PointerColor)"
Specifies tha foreground color of tha pointer.
Da default is
\*(``XtDefaultForeground\*(''.
.TP 8
.B "pointerColorBackground (\fPclass\fB PointerColorBackground)"
Specifies tha background color of tha pointer.
Da default is
\*(``XtDefaultBackground\*(''.
.TP 8
.B "pointerMode (\fPclass\fB PointerMode)"
Specifies when tha pointa may be hidden as tha user types.
It is ghon be redisplayed if tha user moves tha mouse,
or clicks one of its buttons.
.RS
.TP 3
0
never
.TP 3
1
the application hustlin up in \fI\*n\fP has not activated mouse mode.
This is tha default.
.TP 3
2
always.
.RE
.TP 8
.B "pointerShape (\fPclass\fB Cursor)"
Specifies tha name of tha shape of tha pointer.
Da default is \*(``xterm\*(''.
.TP 8
.B "popOnBell (\fPclass\fB PopOnBell)"
Specifies whether tha window would be raised when Control-G is received.
Da default is \*(``false\*(''.
.IP
If tha window is iconified, dis has no effect.
But fuck dat shiznit yo, tha word on tha street is dat tha \fBzIconBeep\fP resource serves up you wit tha mobilitizzle to
see which iconified windows have sounded a funky-ass bell.
.TP 8
.B "precompose (\fPclass\fB XtCPrecompose)"
Tells \fI\*n\fP whether ta precompose UTF-8 data tha fuck into Normalization Form C,
which combines commonly-used accents onto base characters.
If it do not do this, accents is left as separatate characters.
Da default is \*(``true\*(''.
.TP 8
.B "preeditType (\fPclass\fB XtCPreeditType)"
Tells \fI\*n\fP which typez of preedit (preconversion) strang ta display.
Da default is \*(``OverTheSpot,Root\*(''.
.TP 8
.B "printAttributes (\fPclass\fB PrintAttributes)"
Specifies whether ta print graphic attributes along wit tha text.
A real DEC VTxxx terminal will print tha underline, highlightin codes
but yo' printa may not handle these.
.RS
.bP
\*(``0\*('' disablez tha attributes.
.bP
\*(``1\*('' prints tha aiiight set of attributes (bold, underline, inverse n' blink)
as VT100-style control sequences.
.bP
\*(``2\*('' prints ANSI color attributes as well.
.RE
.IP
Da default is \*(``1\*(''.
.TP 8
.B "printFileImmediate (\fPPrintFileImmediate)"
When tha \fBprint-immediate\fP action is invoked,
\fI\*n\fP prints tha screen contents directly ta a gangbangin' file.
Set dis resource ta tha prefix of tha filename
(a timestamp is ghon be appended ta tha actual name).
.IP
Da default be a empty string, i.e., \*(``\*('',
But fuck dat shiznit yo, tha word on tha street is dat when tha \fBprint-immediate\fP action is invoked,
if tha strang is empty, then \*(``XTerm\*('' is used.
.TP 8
.B "printFileOnXError (\fPPrintFileOnXError)"
If \fI\*n\fP exits wit a X error,
e.g., yo' connection is fucked up when tha server crashes,
it can be holla'd at ta write tha contentz of tha screen ta a gangbangin' file.
To enable tha feature, set dis resource ta tha prefix of tha filename
(a timestamp is ghon be appended ta tha actual name).
.IP
Da default be a empty string, i.e., \*(``\*('',
which disablez dis feature.
But fuck dat shiznit yo, tha word on tha street is dat when tha \fBprint-on-error\fP action is invoked,
if tha strang is empty, then \*(``XTermError\*('' is used.
.IP
These error codes is handled:
ERROR_XERROR,
ERROR_XIOERROR and
ERROR_ICEERROR.
.TP 8
.B "printModeImmediate (\fPPrintModeImmediate)"
When tha \fBprint-immediate\fP action is invoked,
\fI\*n\fP prints tha screen contents directly ta a gangbangin' file.
Yo ass can use tha \fBprintModeImmediate\fP resource ta tell it to
use escape sequences ta reconstruct tha vizzle attributes n' colors.
This uses tha same ol' dirty joints as tha \fBprintAttributes\fP resource.
Da default is \*(``0\*(''.
.TP 8
.B "printModeOnXError (\fPPrintModeOnXError)"
\fI\*N\fP implements tha \fBprintFileOnXError\fP feature using
the printa feature, although tha output is freestyled directly ta a gangbangin' file.
Yo ass can use tha \fBprintModeOnXError\fP resource ta tell it to
use escape sequences ta reconstruct tha vizzle attributes n' colors.
This uses tha same ol' dirty joints as tha \fBprintAttributes\fP resource.
Da default is \*(``0\*(''.
.TP 8
.B "printOptsImmediate (\fPPrintOptsImmediate)"
Specify tha range of text which is printed ta a gangbangin' file when
the \fBprint-immediately\fP action is invoked.
.RS
.bP
If zero (0), then dis selects tha current (visible screen) plus the
saved lines, except if tha alternate screen is bein used.
In dat case, only tha alternate screen is selectd.
.bP
If nonzero,
the bitz of dis resource value (checked up in descendin order)
select tha range:
.RS
.TP 3
8
selects tha saved lines.
.TP 3
4
selects tha alternate screen.
.TP 3
2
selects tha aiiight screen.
.TP 3
1
selects tha current screen,
which can be either tha aiiight or alternate screen.
.RE
.RE
.IP
Da default is \*(``9\*('', which selects tha current visible screen
plus saved lines, wit no special case fo' tha alternated screen.
.TP 8
.B "printOptsOnXError (\fPPrintOptsOnXError)"
Specify tha range of text which is printed ta a gangbangin' file when
the \fBprint-on-error\fP action is invoked.
Da resource value is interpreted tha same as up in \fBprintOptsImmediate\fP.
.IP
Da default is \*(``9\*('', which selects tha current visible screen
plus saved lines, wit no special case fo' tha alternated screen.
.TP 8
.B "printerAutoClose (\fPclass\fB PrinterAutoClose)"
If \*(``true\*('', \fI\*n\fR will close tha printa (a pipe) when tha application switches
the printa offline wit a Media Copy command.
Da default is \*(``false\*(''.
.TP 8
.B "printerCommand (\fPclass\fB PrinterCommand)"
Specifies a gangbangin' finger-lickin' dirty-ass shell command ta which
.I \*n
will open a pipe when tha first
MC (Media Copy) command is initiated.
Da default be a empty string, i.e., \*(``\*(''.
If tha resource value is given as a empty string, tha printa is disabled.
.TP 8
.B "printerControlMode (\fPclass\fB PrinterControlMode)"
Specifies tha printa control mode.
A \*(``1\*('' selects autoprint mode, which causes
.I \*n
to print a line from tha screen when you move tha cursor off that
line wit a line feed, form feed or vertical tab character, or an
autowrap occurs.
Autoprint mode is overridden by printa controlla mode (a \*(``2\*(''),
which causes all of tha output ta be pimped up ta tha printer.
Da default is \*(``0\*(''.
.TP 8
.B "printerExtent (\fPclass\fB PrinterExtent)"
Controls whether a print page function will print tha entire page (true), or
only tha the portion within tha scrollin margins (false).
Da default is \*(``false\*(''.
.TP 8
.B "printerFormFeed (\fPclass\fB PrinterFormFeed)"
Controls whether a gangbangin' form feed is busted ta tha printa all up in tha end of a print
page function.
Da default is \*(``false\*(''.
.TP 8
.B "printerNewLine (\fPclass\fB PrinterNewLine)"
Controls whether a newline is busted ta tha printa all up in tha end of a print
page function.
Da default is \*(``true\*(''.
.TP 8
.B "privateColorRegistas (\fPclass\fB privateColorRegisters)"
If true, allocate separate color registas fo' each sixel
device control string, e.g., fo' DECGCI.
If not true, color registas is allocated only once,
when tha terminal is reset.
Da default is \*(``true\*(''.
.TP 8
.B "quietGrab (\fPclass\fB QuietGrab)"
Controls whether tha cursor is repainted
when \fINotifyGrab\fP n' \fINotifyUngrab\fP
event types is received durin chizzle of focus.
Da default is \*(``false\*(''.
.TP 8
.B "renderFont (\fPclass\fB RenderFont)"
If \fI\*n\fR is built wit tha Xft library,
this controls whether tha \fBfaceName\fR resource is used.
Da default is \*(``default\*(''.
.IP
Da resource joints is strings, evaluated as booleans afta startup.
.RS
.TP 5
false
.br
disable tha feature n' use tha aiiight (bitmap) font.
.TP 5
true
.br
startup rockin tha TrueType font specified by tha \fBfaceName\fP and
\fBfaceSize\fP resource settings.
If there is no value fo' \fBfaceName\fP, disable tha feature n' use
the aiiight (bitmap) font.
.IP
Afta startup, you can still switch to/from tha bitmap font rockin the
\*(``TrueType Fonts\*('' menu entry.
.TP 5
default
.br
startup rockin tha aiiight (bitmap) font,
but enable tha \*(``TrueType Fonts\*(''
menu entry ta allow runtime switchin to/from TrueType fonts.
.IP
If there is no \fBfaceName\fP resource set,
then runtime switchin ta TrueType fonts is disabled.
\fI\*N\fP has a separate  compiled-in value fo' \fBfaceName\fP
for tha special case where \fBrenderFont\fP is \*(``default\*(''.
That is normally \*(``mono\*(''.
.RE
.TP 8
.B "resizeGravitizzle (\fPclass\fB ResizeGravity)"
Affects tha behavior when tha window is resized ta be talla or
shorter.
\fBNorthWest\fP
specifies dat tha top line of text on tha screen stay fixed.
If tha window
is made shorter, lines is dropped from tha bottom; if tha window is
made taller, blank lines is added all up in tha bottom.
This is compatible
with tha behavior up in R4.
\fBSouthWest\fP (the default) specifies that
the bottom line of text on tha screen stay fixed.
If tha window is
made taller, additionizzle saved lines is ghon be scrolled down onto the
screen; if tha window is made shorter, lines is ghon be scrolled off the
top of tha screen, n' tha top saved lines is ghon be dropped.
.TP 8
.B "retryInputMethod (\fPclass\fB XtCRetryInputMethod)"
Tells \fI\*n\fP how tha fuck nuff times ta retry,
in case tha input-method server aint responding.
This be a gangbangin' finger-lickin' different issue than unsupported preedit type, etc.
Yo ass may encounta retries if yo' X configuration (and its libraries)
are missin pieces.
Settin dis resource ta zero ``0'' will quit tha retrying.
Da default is ``3''.
.TP 8
.B "reverseVideo (\fPclass\fB ReverseVideo)"
Specifies whether or not reverse vizzle should be simulated.
Da default is
\*(``false\*(''.
.IP
There is nuff muthafuckin aspects ta reverse vizzle up in \fI\*n\fP:
.RS
.bP
Da command-line \fB\-rv\fP option  drops some lyrics ta tha X libraries ta reverse
the foreground n' background colors.
\fI\*N\fPz command-line options set resource joints.
In particular, tha X Toolkit sets tha \fBreverseVideo\fP resource
when tha \fB\-rv\fP option is used.
.bP
If tha user has also used command-line options \fB\-fg\fP or \fB\-bg\fP
to set tha foreground n' background colors,
\fI\*n\fP do not peep these options directly.
Instead,
it examines tha resource joints ta reconstruct tha command-line options,
and determine which of tha flavas is tha userz intended foreground, etc.
Their actual joints is irrelevant ta tha reverse vizzle function;
some playas prefer tha X defaults (black text on a white background),
others prefer white text on a funky-ass black background.
.bP
Afta startup,
the user can toggle tha \*(``Enable Reverse Video\*('' menu entry.
This exchanges tha current foreground n' background colors
of tha VT100 widget,
and repaints tha screen.
Because of tha X resource hierarchy,
the \fBreverseVideo\fP resource applies ta mo' than tha VT100 widget.
.RE
.IP
Programs hustlin up in a \fI\*n\fP can also use control sequences
to enable tha VT100 reverse vizzle mode.
These is independent of tha \fIreverseVideo\fP resource n' tha menu entry.
\fI\*N\fP exchanges tha current foreground n' background colors
when drawin text affected by these control sequences.
.IP
Other control sequences can alta tha foreground n' background colors
which is used:
.RS
.bP
Programs can also use tha ANSI color control sequences ta set the
foreground n' background colors.
.bP
Extensions ta tha ANSI color controls (like fuckin 16-, 88- or 256-colors)
are treated similarly ta tha ANSI control.
.bP
Usin other control sequences (the \*(``\fIdynamic colors\fR\*('' feature),
a program can chizzle tha foreground n' background colors.
.RE
.TP 8
.B "reverseWrap (\fPclass\fB ReverseWrap)"
Specifies whether or not reverse-wraparound should be enabled.
This correspondz ta \fI\*n\fPz private mode 45.
Da default is
\*(``false\*(''.
.TP 8
.B "rightScrollBar (\fPclass\fB RightScrollBar)"
Specifies whether or not tha scrollbar should be displayed on tha right
rather than tha left.
Da default is \*(``false\*(''.
.TP 8
.B "saveLines (\fPclass\fB SaveLines)"
Specifies tha number of lines ta save beyond tha top of tha screen when a
scrollbar is turned on.
Da default is \*(``64\*(''.
.TP 8
.B "scrollBar (\fPclass\fB ScrollBar)"
Specifies whether or not tha scrollbar should be displayed.
Da default is
\*(``false\*(''.
.TP 8
.B "scrollBarBorder (\fPclass\fB ScrollBarBorder)"
Specifies tha width of tha scrollbar border.
Note dat dis is drawn ta overlap tha border of tha \fI\*n\fP window.
Modifyin tha scrollbarz border affects only tha line between tha VT100
widget n' tha scrollbar.
Da default value is 1.
.TP 8
.B "scrollKey (\fPclass\fB ScrollCond)"
Specifies whether or not pressin a key should automatically cause the
scrollbar ta git all up in tha bottom of tha scrollin region.
This correspondz ta \fI\*n\fPz private mode 1011.
Da default is
\*(``false\*(''.
.TP 8
.B "scrollLines (\fPclass\fB ScrollLines)"
Specifies tha number of lines dat tha \fIscroll-back\fP and
\fBscroll-forw\fP actions should use as a thugged-out default.
Da default value is 1.
.TP 8
.B "scrollTtyOutput (\fPclass\fB ScrollCond)"
Specifies whether or not output ta tha terminal should automatically cause
the scrollbar ta git all up in tha bottom of tha scrollin region.
Da default is \*(``true\*(''.
.TP
.B "selectToClipboard (\fPclass\fB SelectToClipboard)"
Tells \fI\*n\fP whether ta use tha PRIMARY or CLIPBOARD for
SELECT tokens up in tha selection mechanism.
Da \fBset-select\fP action can chizzle dis at runtime,
allowin tha user ta work wit programs dat handle only one of these
mechanisms.
Da default is \*(``false\*('', which  drops some lyrics ta it ta use PRIMARY.
.TP 8
.B "shiftFonts (\fPclass\fB ShiftFonts)"
Specifies whether ta enable tha actions
\fBlarger-vt-font()\fP and
\fBsmaller-vt-font()\fP, which is normally bound to
the shifted KP_Add n' KP_Subtract.
Da default is \*(``true\*(''.
.TP 8
.B "showBlinkAsBold (\fPclass\fB ShowBlinkAsBold)"
Tells \fI\*n\fP whether ta display text wit blink-attribute tha same
as bold.
If \fI\*n\fP has not been configured ta support blinkin text,
the default is \*(``true\*('', which correspondz ta olda versionz of \fI\*n\fP,
otherwise tha default is \*(``false\*(''.
.TP 8
.B "showMissingGlyphs (\fPclass\fB ShowMissingGlyphs)"
Tells \fI\*n\fP whether ta display a funky-ass box outlinin places where
a characta has been used dat tha font do not represent.
Da default is \*(``false\*(''.
.TP 8
.B "showWrapMarks (\fPclass\fB ShowWrapMarks)"
For debuggin \fI\*n\fP n' applications dat may manipulate the
wrapped-line flag by freestylin text all up in tha right margin,
show a mark on tha right inner-border of tha window.
Da mark shows which lines have tha flag set.
.TP 8
.B "signalInhibit (\fPclass\fB SignalInhibit)"
Specifies whether or not tha entries up in tha \*(``Main Options\*('' menu fo' sending
signals ta \fI\*n\fP should be disallowed.
Da default is \*(``false\*(''.
.TP 8
.B "sixelScrollin (\fPclass\fB SixelScrolling)"
If true, graphics scroll up one line at a time when sixels would be written
past tha bottom line on tha window.
Da default is \*(``false\*(''.
.TP 8
.B "tekGeometry (\fPclass\fB Geometry)"
Specifies tha preferred size n' posizzle of tha Tektronix window.
There is no default fo' dis resource.
.TP 8
.B "tekInhibit (\fPclass\fB TekInhibit)"
Specifies whether or not
the escape sequence ta enter
Tektronix mode should be ignored.
Da default is
\*(``false\*(''.
.TP 8
.B "tekLil Small-Ass (\fPclass\fB TekSmall)"
Specifies whether or not tha Tektronix mode window should start up in its smallest
size if no explicit geometry is given.
This is useful when hustlin \fI\*n\fP
on displays wit lil' small-ass screens.
Da default is \*(``false\*(''.
.TP 8
.B "tekStartup (\fPclass\fB TekStartup)"
Specifies whether or not \fI\*n\fP should start up in Tektronix mode.
Da default is \*(``false\*(''.
.TP 8
.B "tiXtraScroll (\fPclass\fB TiXtraScroll)"
Specifies whether \fI\*n\fP should scroll ta a freshly smoked up page when processing
the \fIti\fP termcap entry, i.e., tha private modes 47, 1047 or 1049.
This is only up in effect if \fBtiteInhibit\fP is \*(``true\*('',
because tha intent of dis option is ta provide a picture of tha full-screen
applicationz display on tha scrollback without wipin up tha text that
would be shown before tha application was initialized.
Da default fo' dis resource is \*(``false\*(''.
.TP 8
.B "titeInhibit (\fPclass\fB TiteInhibit)"
Specifies whether or not \fI\*n\fP should remove \fIti\fP n' \fIte\fP
termcap entries (used ta switch between alternate screens on startup of many
screen-oriented programs) from tha TERMCAP string.
If set,
\fI\*n\fP also ignores tha escape sequence ta switch ta the
alternate screen.
\fI\*N\fP supports terminfo up in a gangbangin' finger-lickin' different way, supportin composite control
sequences (also known as private modes) 1047, 1048 n' 1049 which have tha same
effect as tha original gangsta 47 control sequence.
Da default fo' dis resource is \*(``false\*(''.
.TP 8
.B "titleModes (\fPclass\fB TitleModes)"
Tells \fI\*n\fP whether ta accept or return
window- n' icon-labels up in ISO-8859-1
(the default) or UTF-8.
Either can be encoded up in hexadecimal.
Da default fo' dis resource is \*(``0\*(''.
.IP
Each bit (bit \*(``0\*('' is 1, bit \*(``1\*('' is 2, etc.)
correspondz ta one of the
parametas set by tha title modes control sequence:
.RS
.TP 5
0
Set window/icon labels rockin hexadecimal
.TP 5
1
Query window/icon labels rockin hexadecimal
.TP 5
2
Set window/icon labels rockin UTF-8 (overrides \fButf8Title\fP resource).
.TP 5
3
Query window/icon labels rockin UTF-8
.RE
.TP 8
.B "translations (\fPclass\fB Translations)"
Specifies tha key n' button bindings fo' menus, selections, \*(``programmed
strings\*('', etc.
Da \fBtranslations\fP resource,
which serves up much of \fI\*n\fPz configurability,
is a gangbangin' feature of tha X Toolkit Intrinsics library (Xt).
See tha \fBACTIONS\fP section.
.TP 8
.B "trimSelection (\fPclass\fB TrimSelection)"
If you set \fBhighlightSelection\fP,
you can peep tha text which is selected, includin any trailin spaces.
Clearin tha screen (or a line) resets it ta a state containin no spaces.
Some lines may contain trailin spaces when a application writes dem to
the screen.
But fuck dat shiznit yo, tha word on tha street is dat you may not wish ta paste lines wit trailin spaces.
If dis resource is true, \fI\*n\fP will trim trailin spaces from
text which is selected.
It do not affect spaces which result up in a wrapped line, nor will it
trim tha trailin newline from yo' selection.
Da default is \*(``false\*(''.
.TP 8
.B "underLine (\fPclass\fB UnderLine)"
This specifies whether or not text wit tha underline attribute should be
underlined.
It may be desirable ta disable underlinin when color is being
used fo' tha underline attribute.
Da default is \*(``true\*(''.
.TP 8
.B "useClippin (\fPclass\fB UseClipping)"
Tell \fI\*n\fP whether ta use clippin ta keep
from producin dots outside tha text drawin area.
Originally used ta work round fo' overstrikin effects,
this be also needed ta work wit some incorrectly-sized fonts.
Da default is \*(``true\*(''.
.TP 8
.B "utf8 (\fPclass\fB Utf8)"
This specifies whether \fI\*n\fP will run up in UTF-8 mode.
If you set dis resource, \fI\*n\fP also sets tha \fBwideChars\fP resource as a side-effect.
Da resource can be set via tha menu entry \*(``UTF-8 Encoding\*(''.
Da default is \*(``default\*(''.
.IP
\fI\*N\fP accepts either a keyword (ignorin case)
or tha number shown up in parentheses:
.RS
.TP 3
false (0)
UTF-8 mode is initially off.
Da command-line option \fB+u8\fP sets tha resource ta dis value.
Escape sequences fo' turnin UTF-8 mode on/off is allowed.
.TP
true (1)
UTF-8 mode is initially on.
Escape sequences fo' turnin UTF-8 mode on/off is allowed.
.TP
always (2)
Da command-line option \fB\-u8\fP sets tha resource ta dis value.
Escape sequences fo' turnin UTF-8 mode on/off is ignored.
.TP
default (3)
This is tha default value of tha resource.
It be chizzled durin initialization dependin on
whether tha \fBlocale\fP resource was set,
to false (0) or always (2).
See tha \fBlocale\fR resource fo' additionizzle rap of non-UTF-8 locales.
.RE
.IP
If you wanna set tha value of \fButf8\fP, it should be up in dis range.
Other nonzero joints is treated tha same as \*(``1\*('',
i.e., UTF-8 mode is initially on, and
escape sequences fo' turnin UTF-8 mode on/off is allowed.
.TP 8
.B "utf8Fonts (\fPclass\fB Utf8Fonts)"
See tha rap of tha \fBlocale\fP resource.
This specifies whether \fI\*n\fP will use UTF-8 fonts specified via
resource patterns like fuckin \*(``\fB*vt100.utf8Fonts.font\fP\*(''
or aiiight (ISO-8859-1) fonts via patterns like fuckin \*(``\fB*vt100.font\fP\*(''.
Da resource can be set via tha menu entry \*(``UTF-8 Fonts\*(''.
Da default is \*(``default\*(''.
.IP
\fI\*N\fP accepts either a keyword (ignorin case)
or tha number shown up in parentheses:
.RS
.TP
false (0)
Use tha ISO-8859-1 fonts.
Da menu entry is enabled, allowin tha chizzle of fonts ta be chizzled
at runtime.
.TP
true (1)
Use tha UTF-8 fonts.
Da menu entry is enabled, allowin tha chizzle of fonts ta be chizzled
at runtime.
.TP
always (2)
Always use tha UTF-8 fonts.
This also disablez tha menu entry.
.TP
default (3)
At startup, tha resource is set ta legit or false,
accordin ta tha effectizzle value of tha \fButf8\fP resource.
.RE
.TP 8
.B "utf8Latin1 (\fPclass\fB Utf8Latin1)"
If true,
allow a ISO-8859-1 \fInormal\fP
font ta be combined wit a ISO-10646 font if tha latta is given
via tha \fB\-fw\fP option or its correspondin resource value.
Da default is \*(``false\*(''.
.TP 8
.B "utf8SelectTypes (\fPclass\fB Utf8SelectTypes)"
Override \fI\*n\fPz default selection target list (see SELECT/PASTE) for
selections up in wide-characta (UTF-8) mode.
Da default be a empty string, i.e., \*(``\*('',
which do not override anything.
.TP 8
.B "utf8Title (\fPclass\fB Utf8Title)"
Applications can set \fI\*n\fPz title by freestylin a cold-ass lil control sequence.
Normally dis control sequence bigs up tha VT220 convention,
which encodes tha strang up in ISO-8859-1 and
allows fo' a 8-bit strang terminator.
If \fI\*n\fP is started up in a UTF-8 locale,
it translates tha ISO-8859-1 strang ta UTF-8 ta work wit tha X libraries
which assume tha strang is UTF-8.
.IP
But fuck dat shiznit yo, tha word on tha street is dat some playas may wish ta write a title strang encoded up in UTF-8.
Da window manager is responsible fo' drawin window titles.
Some window managers (not all) support UTF-8 encodin of window titles.
Set dis resource ta \*(``true\*('' ta allow UTF-8 encoded title strings.
That cancels tha translation ta UTF-8,
allowin UTF-8 strings ta be displayed as is.
.IP
This feature be available as a menu entry, since it is related to
the particular applications yo ass is hustlin within \fI\*n\fP.
Yo ass can also bust a cold-ass lil control sequence
(see tha rap of \*(``Title Modes\*(''
in tha control sequences document), ta set a equivalent flag.
Da \fBtitleModes\fP resource sets tha same ol' dirty value,
which overrides dis resource.
.IP
Da default is \*(``false\*(''.
.TP 8
.B "veryBoldColors (\fPclass\fB VeryBoldColors)"
Specifies whether ta combine vizzle attributes wit flavas specified by
\fBcolorBD\fR, \fBcolorBL\fR, \fBcolorRV\fR n' \fBcolorUL\fR.
Da resource value is tha sum of joints fo' each attribute:
.RS 10
.nf
1 fo' reverse,
2 fo' underline,
4 fo' bold and
8 fo' blink.
.fi
.RE
.IP
Da default is \*(``0\*(''.
.TP 8
.B "visualBell (\fPclass\fB VisualBell)"
Specifies whether or not a visible bell (i.e., flashing) should be used instead
of a audible bell when Control-G is received.
Da default is \*(``false\*('', which  drops some lyrics ta \fI\*n\fP ta use a audible bell.
.TP 8
.B "visualBellDelay (\fPclass\fB VisualBellDelay)"
Number of millisecondz ta delay when displayin a visual bell.
Default is 100.
If set ta zero, no visual bell is displayed.
This is useful fo' straight-up slow displays, e.g., a LCD display on a laptop.
.TP 8
.B "visualBellLine (\fPclass\fB VisualBellLine)"
Specifies whether ta flash only tha current line when displayin a visual bell.
rather than flashin tha entire screen:
Da default is \*(``false\*('',
which  drops some lyrics ta \fI\*n\fP ta flash tha entire screen.
.TP 8
.B "vt100Graphics (\fPclass\fB VT100Graphics)"
This specifies whether \fI\*n\fP will interpret VT100 graphic character
escape sequences while up in UTF-8 mode.
Da default is \*(``true\*('', ta provide support fo' various legacy applications.
.TP 8
.B "wideBoldFont (\fPclass\fB WideBoldFont)"
This option specifies tha font ta be used fo' displayin bold wide text.
By default,
it will attempt ta bust a gangbangin' font twice as wide as tha font dat is ghon be used to
draw bold text.
If no double-width font is found, it will improvise, by stretching
the bold font.
.TP 8
.B "wideChars (\fPclass\fB WideChars)"
Specifies if \fI\*n\fP should respond ta control sequences that
process 16-bit characters.
Da default is \*(``false\*(''.
.TP 8
.B "wideFont (\fPclass\fB WideFont)"
This option specifies tha font ta be used fo' displayin wide text.
By default,
it will attempt ta bust a gangbangin' font twice as wide as tha font dat is ghon be used to
draw aiiight text.
If no double-width font is found, it will improvise, by stretching
the aiiight font.
.TP 8
.B "ximFont (\fPclass\fB XimFont)"
This option specifies tha font ta be used fo' displayin tha preedit string
in tha \*(``OverTheSpot\*('' input method.
.IP
In \*(``OverTheSpot\*('' preedit type, tha preedit (preconversion)
strin is displayed all up in tha posizzle of tha cursor.
It be tha XIM serverz responsibilitizzle ta display tha preedit string.
Da XIM client must inform tha XIM server of tha cursor position.
For dopest thangs up in dis biatch, tha preedit strang must be displayed wit a proper font.
Therefore, \fI\*n\fP informs tha XIM server of tha proper font.
Da font is be supplied by a "fontset", whose default value is \*(``*\*(''.
This matches every last muthafuckin font, tha X library automatically chizzlez fonts with
proper charsets.
Da \fBximFont\fP resource is provided ta override dis default font setting.
.\"
.SS Tek4014 Widget Resources
.PP
Da followin resources is specified
as part of tha \fItek4014\fP widget (class \fITek4014\fP).
These is specified by patterns like fuckin \*(``\fBXTerm.tek4014.\fP\fINAME\fP\*('':
.TP 8
.B "font2 (\fPclass\fB Font)"
Specifies font number 2 ta use up in tha Tektronix window.
.TP 8
.B "font3 (\fPclass\fB Font)"
Specifies font number 3 ta use up in tha Tektronix window.
.TP 8
.B "fontBig-Ass (\fPclass\fB Font)"
Specifies tha big-ass font ta use up in tha Tektronix window.
.TP 8
.B "fontLil Small-Ass (\fPclass\fB Font)"
Specifies tha lil' small-ass font ta use up in tha Tektronix window.
.TP 8
.B "ginTerminator (\fPclass\fB GinTerminator)"
Specifies what tha fuck character(s) should follow a GIN report or status report.
Da possibilitizzles is \*(``none\*('', which sendz no terminatin characters,
\*(``CRonly\*('', which sendz CR, n' \*(``CR&EOT\*('', which sendz both CR n' EOT.
Da default is \*(``none\*(''.
.TP 8
.B "height (\fPclass\fB Height)"
Specifies tha height of tha Tektronix window up in pixels.
.TP 8
.B "initialFont (\fPclass\fB InitialFont)"
Specifies which of tha four Tektronix fonts ta use initially.
Values is tha same as fo' tha \fBset-tek-text\fP action.
Da default is \*(``large\*(''.
.TP 8
.B "width (\fPclass\fB Width)"
Specifies tha width of tha Tektronix window up in pixels.
.\"
.SS Menu Resources
.PP
Da resources dat may be specified fo' tha various menus is busted lyrics bout in
the documentation fo' tha Athena \fBSimpleMenu\fP widget.
Da name n' classez of tha entries up in each of tha menus is listed below.
Resources named \*(``\fBline\fR\fIN\fR\*('' where \fIN\fR be a number
are separators wit class \fBSmeLine\fR.
.PP
As wit all X resource-based widgets,
the labels mentioned is customary defaults fo' tha application.
.
.PP
Da \fIMain Options\fP menu (widget name \fImainMenu\fP)
has tha followin entries:
.TP 8
.B "toolbar (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-toolbar(toggle)\fP action.
.TP 8
.B "securekbd (\fPclass\fB SmeBSB)"
This entry invokes tha \fBsecure()\fP action.
.TP 8
.B "allowsendz (\fPclass\fB SmeBSB)"
This entry invokes tha \fBallow-send-events(toggle)\fP action.
.TP 8
.B "redraw (\fPclass\fB SmeBSB)"
This entry invokes tha \fBredraw()\fP action.
.TP 8
.B "loggin (\fPclass\fB SmeBSB)"
This entry invokes tha \fBlogging(toggle)\fP action.
.TP 8
.B "print-immediate (\fPclass\fB SmeBSB)"
This entry invokes tha \fBprint-immediate()\fP action.
.TP 8
.B "print-on-error (\fPclass\fB SmeBSB)"
This entry invokes tha \fBprint-on-error()\fP action.
.TP 8
.B "print (\fPclass\fB SmeBSB)"
This entry invokes tha \fBprint()\fP action.
.TP 8
.B "print-redir (\fPclass\fB SmeBSB)"
This entry invokes tha \fBprint-redir()\fP action.
.TP 8
.B "8-bit-control (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-8-bit-control(toggle)\fP action.
.TP 8
.B "backarrow\ key (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-backarrow(toggle)\fP action.
.TP 8
.B "num-lock (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-num-lock(toggle)\fP action.
.TP 8
.B "alt-esc (\fPclass\fB SmeBSB)"
This entry invokes tha \fBalt-sends-escape(toggle)\fP action.
.TP 8
.B "meta-esc (\fPclass\fB SmeBSB)"
This entry invokes tha \fBmeta-sends-escape(toggle)\fP action.
.TP 8
.B "delete-is-del (\fPclass\fB SmeBSB)"
This entry invokes tha \fBdelete-is-del(toggle)\fP action.
.TP 8
.B "oldFunctionKeys (\fPclass\fB SmeBSB)"
This entry invokes tha \fBold-function-keys(toggle)\fP action.
.TP 8
.B "hpFunctionKeys (\fPclass\fB SmeBSB)"
This entry invokes tha \fBhp-function-keys(toggle)\fP action.
.TP 8
.B "scoFunctionKeys (\fPclass\fB SmeBSB)"
This entry invokes tha \fBsco-function-keys(toggle)\fP action.
.TP 8
.B "sunFunctionKeys (\fPclass\fB SmeBSB)"
This entry invokes tha \fBsun-function-keys(toggle)\fP action.
.TP 8
.B "sunKeyboard (\fPclass\fB SmeBSB)"
This entry invokes tha \fBsunKeyboard(toggle)\fP action.
.TP 8
.B "suspend (\fPclass\fB SmeBSB)"
This entry invokes tha \fBsend-signal(tstp)\fP action on systems that
support thang control.
.TP 8
.B "continue (\fPclass\fB SmeBSB)"
This entry invokes tha \fBsend-signal(cont)\fP action on systems that
support thang control.
.TP 8
.B "interrupt (\fPclass\fB SmeBSB)"
This entry invokes tha \fBsend-signal(int)\fP action.
.TP 8
.B "hangup (\fPclass\fB SmeBSB)"
This entry invokes tha \fBsend-signal(hup)\fP action.
.TP 8
.B "terminizzle (\fPclass\fB SmeBSB)"
This entry invokes tha \fBsend-signal(term)\fP action.
.TP 8
.B "kill (\fPclass\fB SmeBSB)"
This entry invokes tha \fBsend-signal(kill)\fP action.
.TP 8
.B "quit (\fPclass\fB SmeBSB)"
This entry invokes tha \fBquit()\fP action.
.
.PP
Da \fIVT Options\fP menu (widget name \fIvtMenu\fP)
has tha followin entries:
.TP 8
.B "scrollbar (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-scrollbar(toggle)\fP action.
.TP 8
.B "jumpscroll (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-jumpscroll(toggle)\fP action.
.TP 8
.B "reversevideo (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-reverse-video(toggle)\fP action.
.TP 8
.B "autowrap (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-autowrap(toggle)\fP action.
.TP 8
.B "reversewrap (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-reversewrap(toggle)\fP action.
.TP 8
.B "autolinefeed (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-autolinefeed(toggle)\fP action.
.TP 8
.B "appcursor (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-appcursor(toggle)\fP action.
.TP 8
.B "appkeypad (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-appkeypad(toggle)\fP action.
.TP 8
.B "scrollkey (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-scroll-on-key(toggle)\fP action.
.TP 8
.B "scrollttyoutput (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-scroll-on-tty-output(toggle)\fP action.
.TP 8
.B "allow132 (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-allow132(toggle)\fP action.
.TP 8
.B "cursesemul (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-cursesemul(toggle)\fP action.
.TP 8
.B "visualbell (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-visualbell(toggle)\fP action.
.TP 8
.B "bellIsUrgent (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-bellIsUrgent(toggle)\fP action.
.TP 8
.B "poponbell (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-poponbell(toggle)\fP action.
.TP 8
.B "cursorblink (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-cursorblink(toggle)\fP action.
.TP 8
.B "titeInhibit (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-titeInhibit(toggle)\fP action.
.TP 8
.B "activeicon (\fPclass\fB SmeBSB)"
This entry togglez actizzle icons on n' off if dis feature was
compiled tha fuck into \fI\*n\fP.
It be enabled only if \fI\*n\fP
was started wit tha command line option +ai or tha \fBactiveIcon\fP
resource is set ta \*(``true\*(''.
.TP 8
.B "softreset (\fPclass\fB SmeBSB)"
This entry invokes tha \fBsoft-reset()\fP action.
.TP 8
.B "hardreset (\fPclass\fB SmeBSB)"
This entry invokes tha \fBhard-reset()\fP action.
.TP 8
.B "clearsavedlines (\fPclass\fB SmeBSB)"
This entry invokes tha \fBclear-saved-lines()\fP action.
.TP 8
.B "tekshow (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-visibility(tek,toggle)\fP action.
.TP 8
.B "tekmode (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-terminal-type(tek)\fP action.
.TP 8
.B "vthide (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-visibility(vt,off)\fP action.
.TP 8
.B "altscreen (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-altscreen(toggle)\fP action.
.TP 8
.B "sixelScrollin (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-sixel-scrolling(toggle)\fP action.
.
.PP
Da \fIVT Fonts\fP menu (widget name \fIfontMenu\fP)
has tha followin entries:
.TP 8
.B "fontdefault (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-vt-font(d)\fP action,
settin tha font rockin tha \fBfont\fP (default) resource,
e.g., \*(``Default\*('' up in tha menu.
.TP 8
.B "font1 (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-vt-font(1)\fP action,
settin tha font rockin tha \fBfont1\fP resource,
e.g., \*(``Unreadable\*('' up in tha menu.
.TP 8
.B "font2 (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-vt-font(2)\fP action,
settin tha font rockin tha \fBfont2\fP resource,
e.g., \*(``Tiny\*('' up in tha menu.
.TP 8
.B "font3 (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-vt-font(3)\fP action,
settin tha font rockin tha \fBfont3\fP resource,
e.g., \*(``Small\*('' up in tha menu.
.TP 8
.B "font4 (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-vt-font(4)\fP action,
lettin tha font rockin tha \fBfont4\fP resource,
e.g., \*(``Medium\*('' up in tha menu.
.TP 8
.B "font5 (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-vt-font(5)\fP action,
lettin tha font rockin tha \fBfont5\fP resource,
e.g., \*(``Large\*('' up in tha menu.
.TP 8
.B "font6 (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-vt-font(6)\fP action,
lettin tha font rockin tha \fBfont6\fP resource,
e.g., \*(``Huge\*('' up in tha menu.
.TP 8
.B "fontescape (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-vt-font(e)\fP action.
.TP 8
.B "fontsel (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-vt-font(s)\fP action.
.TP 8
.B "font-linedrawin (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-font-linedrawing(s)\fP action.
.TP 8
.B "font-packed (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-font-packed(s)\fP action.
.TP 8
.B "font-doublesize (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-font-doublesize(s)\fP action.
.TP 8
.B "render-font (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-render-font(s)\fP action.
.TP 8
.B "utf8-mode (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-utf8-mode(s)\fP action.
.TP 8
.B "utf8-title (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-utf8-title(s)\fP action.
.
.PP
Da \fITEK Options\fP menu (widget name \fItekMenu\fP)
has tha followin entries:
.TP 8
.B "tektextpimpin' (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-tek-text(large)\fP action.
.TP 8
.B "tektext2 (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-tek-text(2)\fP action.
.TP 8
.B "tektext3 (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-tek-text(3)\fP action.
.TP 8
.B "tektextsmall (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-tek-text(small)\fP action.
.TP 8
.B "tekpage (\fPclass\fB SmeBSB)"
This entry invokes tha \fBtek-page()\fP action.
.TP 8
.B "tekreset (\fPclass\fB SmeBSB)"
This entry invokes tha \fBtek-reset()\fP action.
.TP 8
.B "tekcopy (\fPclass\fB SmeBSB)"
This entry invokes tha \fBtek-copy()\fP action.
.TP 8
.B "vtshow (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-visibility(vt,toggle)\fP action.
.TP 8
.B "vtmode (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-terminal-type(vt)\fP action.
.TP 8
.B "tekhide (\fPclass\fB SmeBSB)"
This entry invokes tha \fBset-visibility(tek,toggle)\fP action.
.\"
.SS Scrollbar Resources
.PP
Da followin resources is useful when specified fo' tha Athena Scrollbar
widget:
.TP 8
.B "thicknizz (\fPclass\fB Thickness)"
Specifies tha width up in pixelz of tha scrollbar.
.TP 8
.B "background (\fPclass\fB Background)"
Specifies tha color ta use fo' tha background of tha scrollbar.
.TP 8
.B "foreground (\fPclass\fB Foreground)"
Specifies tha color ta use fo' tha foreground of tha scrollbar.
Da \*(``thumb\*(''
of tha scrollbar be a simple checkerboard pattern alternatin pixels for
foreground n' background color.
.
.
.SH "POINTER USAGE"
.
.PP
Once tha VT102 window is pimped,
.I \*n
allows you ta select text n' copy it within tha same or other windows.
.
.SS "SELECTION"
.PP
Da selection functions is invoked when tha pointa buttons is used wit no
modifiers, n' when they is used wit tha \*(``shift\*('' key.
Da assignment of tha functions busted lyrics bout below ta keys n' buttons may
be chizzled all up in tha resource database; peep \fBACTIONS\fP below.
.
.PP
Pointa button one (usually left) is used ta save text tha fuck into tha cut buffer.
Move tha cursor ta beginnin of tha text,
and then hold tha button down while movin tha cursor ta tha end of tha region
and releasin tha button.
Da selected text is highlighted n' is saved up in tha global cut buffer
and made tha PRIMARY selection when tha button is busted out.
Normally (but peep tha rap of \fBon2Clicks\fP, etc):
.bP
Double-clickin selects by lyrics.
.bP
Triple-clicking
selects by lines.
.bP
Quadruple-clickin goes back ta characters, etc.
.PP
Multiple-click is determined by tha time from button up to
button down, so you can chizzle tha selection unit up in tha middle of a selection.
Logical lyrics n' lines selected by double- or triple-clickin may wrap
across mo' than one screen line if lines was wrapped by \fI\*n\fP
itself rather than by tha application hustlin up in tha window.
If tha key/button bindings specify dat a X selection is ta be made,
\fI\*n\fP will leave tha selected text highlighted fo' as long as it
is tha selection baller.
.
.PP
Pointa button two (usually middle) \*(``types\*('' (pastes) tha text from
the PRIMARY selection, if any, otherwise from
the cut buffer,
insertin it as keyboard input.
.
.PP
Pointa button three (usually right) extendz tha current selection.
(Without loss of generality,
you can swap \*(``right\*('' n' \*(``left\*('' everywhere up in tha rest of this
paragraph.)  If pressed while closer to
the right edge of tha selection than tha left, it extends/contracts the
right edge of tha selection.
If you contract tha selection past
the left edge of tha selection,
.I \*n
assumes you straight-up meant tha left edge, restores tha original gangsta selection, then
extends/contracts tha left edge of tha selection.
Extension starts up in the
selection unit mode
that tha last selection or extension was performed in; you can multiple-click
to cycle all up in em.
.
.PP
By cuttin n' pastin piecez of text without trailin freshly smoked up lines,
you can take text from nuff muthafuckin places up in different windows n' form a cold-ass lil command
to tha shell, fo' example, or take output from a program n' bang it into
your straight-up editor.
Since cut buffers is globally shared among different applications,
you may regard each as a \*(``file\*('' whose contents you know.
Da terminal emulator n' other text programs should be treatin it as if it
were a text file, i.e., tha text is delimited by freshly smoked up lines.
.
.SS "SCROLLING"
.PP
Da scroll region displays tha posizzle n' amount of text currently showing
in tha window (highlighted) relatizzle ta tha amount of text straight-up saved.
As mo' text is saved (up ta tha maximum), tha size of tha highlighted area
decreases.
.
.PP
Clickin button one wit tha pointa up in tha scroll region moves the
adjacent line ta tha top of tha display window.
.
.PP
Clickin button three moves tha top line of tha display window down ta the
pointa position.
.
.PP
Clickin button two moves tha display ta a posizzle up in tha saved text
that correspondz ta tha pointerz posizzle up in tha scrollbar.
.
.SS "TEKTRONIX POINTER"
.PP
Unlike tha VT102 window, tha Tektronix window do not allow tha copyin of
text.
It do allow Tektronix GIN mode, n' up in dis mode
the cursor will chizzle from a arrow ta a cold-ass lil cross.
Pressin any key will bust dat key n' tha current coordinizzle of the
cross cursor.
Pressin button one, two, or three will return tha lettas \*(``l\*('', \*(``m\*('', and
\*(``r\*('', respectively.
If tha \*(``shift\*('' key is pressed when a pointa button is pressed, tha corresponding
upper case letta is sent.
To distinguish a pointa button from a key, tha high bit of tha characta is
set (but dis is bit is normally stripped unless tha terminal mode is RAW;
see
.IR tty (4)
for details).
.
.
.SH SELECT/PASTE
X clients provide select n' paste support by respondin ta requests conveyed
by tha server.
.SS PRIMARY
When configured ta use tha primary selection,
(the default) \fI\*n\fP can
provide tha selection data up in ways which help ta retain character
encodin shiznit as it is pasted.
.PP
A user \*(``selects\*('' text on \*n, which highlights tha selected text.
A subsequent \*(``paste\*('' ta another client forwardz a request ta tha client owning
the selection.
If \fI\*n\fP owns tha primary selection, it make tha data
available up in tha form of one or mo' \*(``selection targets\*(''.
If it do not own tha primary selection,
e.g., if it has busted out it or another client has
asserted ballership, it relies on cut-buffers ta pass tha data.
But cut-buffers handle only ISO-8859-1 data
(officially \- some clients ignore tha rules).
.
.SS CLIPBOARD
When configured ta use tha clipboard (see resource \fBselectToClipboard\fP),
the problem wit persistence of ballershizzle is bypassed.
Otherwise, there is no difference regardin tha data which can be
passed via selection.
.
.SS SELECTION TARGETS
Da different typez of data which is passed depend on what tha fuck tha receiving
client asks for.
These is termed \fIselection targets\fP.
.PP
When askin fo' tha selection data,
\fI\*n\fP tries tha followin types up in dis order:
.RS
.TP 5
UTF8_STRING
This be a XFree86 extension, which denotes dat tha data is encoded up in UTF-8.
When \fI\*n\fP is built wit wide-characta support,
it both accepts n' serves up dis type.
.TP 5
TEXT
the text is up in tha encodin which correspondz ta yo' current locale.
.TP 5
.\" peep xc/doc/specs/CTEXT/ctext.tbl.ms
.\" (it say tha data is stored as a type of ISO 2022)
COMPOUND_TEXT
this be a gangbangin' format fo' multiple characta set data, like fuckin multi-lingual text.
It can store UTF-8 data as a special case.
.TP 5
STRING
This is Latin 1 (ISO-8859-1) data.
.RE
.PP
Da middle two (TEXT n' COMPOUND_TEXT) is added if \fI\*n\fP
is configured wit tha \fBi18nSelections\fP resource set ta \*(``true\*(''.
.PP
UTF8_STRING is preferred (therefore first up in tha list)
since \fI\*n\fP stores text as Unicode data when
runnin up in wide-characta mode, n' no translation is needed.
On tha other hand, TEXT n' COMPOUND_TEXT may require translation.
If tha translation is incomplete, they will bang Xz \*(``defaultString\*(''
whose value cannot be set, n' may simply be empty.
\fI\*N\fPz \fBdefaultString\fP resource specifies tha strang to
use fo' incomplete translationz of tha UTF8_STRING.
.PP
Yo ass can alta tha types which \fI\*n\fP tries rockin the
\fBeightBitSelectTypes\fP or \fButf8SelectTypes\fP resources.
For instance, you might have some specific locale setting
which do not use UTF-8 encoding.
Da resource value be a cold-ass lil comma-separated list of tha selection targets,
which consist of tha names shown.
Yo ass can use tha special name I18N
to denote tha optionizzle inclusion of TEXT n' COMPOUND_TEXT.
Da names is matched ignorin case, n' can be abbreviated.
Da default list can be expressed up in nuff muthafuckin ways, e.g.,
.sp
.RS
.nf
UTF8_STRING,I18N,STRING
utf8,i18n,string
u,i,s
.fi
.RE
.
.SH MENUS
.
.PP
.I Xterm
has four menus, named
.IR mainMenu ,
.IR vtMenu ,
.IR fontMenu ,
and
.IR tekMenu .
Each menu pops up under tha erect combinationz of key n' button presses.
Each menu is divided tha fuck into sections, separated by a horizontal line.
Some menu entries correspond ta modes dat can be altered.
A check mark appears next ta a mode dat is currently active.
Selectin one of these modes togglez its state.
Other menu entries is commands;
selectin one of these performs tha indicated function.
.PP
All of tha menu entries correspond ta X actions.
In tha list below, tha menu label is shown followed by tha action's
name up in parenthesis.
.
.\" ************************************************************************
.SS "Main Options"
.PP
Da \fI\*n\fP \fImainMenu\fP pops up
when tha \*(``control\*('' key n' pointa button one is pressed up in a window.
This menu gotz nuff shit dat apply ta both tha VT102 n' Tektronix windows.
There is nuff muthafuckin sections:
.TP
Commandz fo' managin X events:
.RS
.TP
Toolbar
Clickin on tha \*(``Toolbar\*('' menu entry hides tha toolbar if it is visible,
and shows it if it is not.
.TP
Secure Keyboard (securekbd)
The
.B Secure Keyboard
mode is helpful when typin up in passwordz or other sensitizzle data up in an
unsecure environment;
see \fBSECURITY\fP below (but read tha limitations carefully).
.TP
Allow SendEvents (allowsends)
Specifies whether or not synthetic key n' button events generated using
the X protocol SendEvent request should be interpreted or discarded.
This correspondz ta tha \fBallowSendEvents\fP resource.
.TP
Redraw Window (redraw)
Forces tha X display ta repaint;
useful up in some environments.
.RE
.TP
Commandz fo' capturin output:
.RS
.TP
Log ta File (logging)
Captures text busted ta tha screen up in a logfile,
as up in tha \fB\-l\fP loggin option.
.TP
Print-All Immediately
Invokes tha \fBprint-immediate\fP action,
sendin tha text of tha current window directly ta a gangbangin' file,
as specified by the
\fBprintFileImmediate\fP,
\fBprintModeImmediate\fP and
\fBprintOptsImmediate\fP
resources.
.TP
Print-All on Error
Invokes tha \fBprint-on-error\fP action,
which togglez a gangbangin' flag spittin some lyrics ta \fI\*n\fP dat if it exits wit a X error,
to bust tha text of tha current window directly ta a gangbangin' file,
as specified by the
\fBprintFileXError\fP,
\fBprintModeXError\fP and
\fBprintOptsXError\fP
resources.
.TP
Print Window (print)
Sendz tha text of tha current window ta tha program given up in the
\fBprinterCommand\fP resource.
.TP
Redirect ta Printa (print-redir)
This sets tha \fBprinterControlMode\fR ta 0 or 2.
Yo ass can use dis ta turn tha printa on as if a application had sent
the appropriate control sequence.
It be also useful fo' switchin tha printer
off if a application turns it on without resettin tha print control mode.
.RE
.TP
Modes fo' settin keyboard style:
.RS
.TP
8-Bit Controls (8-bit-control)
Enabled fo' VT220 emulation, dis controls whether \fI\*n\fP will send
8-bit control sequences rather than rockin 7-bit (ASCII) controls,
e.g., bustin  a funky-ass byte up in tha range 128-159 rather than tha escape character
followed by a second byte.
\fI\*N\fP always interprets both 8-bit n' 7-bit control sequences
(see tha document \fIXterm Control Sequences\fP).
This correspondz ta tha \fBeightBitControl\fP resource.
.TP
Backarrow Key (BS/DEL) (backarrow\ key)
Modifies tha behavior of tha backarrow key, makin it transmit
either a funky-ass backspace (8)
or delete (127) character.
This correspondz ta tha \fBbackarrowKey\fP resource.
.TP
Alt/NumLock Modifiers (num-lock)
Controls tha treatment of Alt- n' NumLock-key modifiers.
This correspondz ta tha \fBnumLock\fP resource.
.TP
Meta Sendz Escape (meta-esc)
Controls whether \fIMeta\fP keys is converted tha fuck into a two-character
sequence wit tha characta itself preceded by ESC.
This correspondz ta tha \fBmetaSendsEscape\fP resource.
.TP
Delete is DEL (delete-is-del)
Controls whether tha Delete key on tha editin keypad should bust DEL (127)
or tha VT220-style Remove escape sequence.
This correspondz ta tha \fBdeleteIsDEL\fP resource.
.TP
Oldskool Function-Keys (oldFunctionKeys)
.TP
HP Function-Keys (hpFunctionKeys)
.TP
SCO Function-Keys (scoFunctionKeys)
.TP
Sun Function-Keys (sunFunctionKeys)
.TP
VT220 Keyboard (sunKeyboard)
These act as a radio-button, selectin one steez fo' tha keyboard layout.
It correspondz ta mo' than one resource setting:
.BR "sunKeyboard" ","
.BR "sunFunctionKeys" ","
.BR "scoFunctionKeys" " and"
.BR "hpFunctionKeys "."
.RE
.TP
Commandz fo' process signalling:
.RS
.TP
Send STOP Signal (suspend)
.TP
Send CONT Signal (continue)
.TP
Send INT Signal (interrupt)
.TP
Send HUP Signal (hangup)
.TP
Send TERM Signal (terminate)
.TP
Send KILL Signal (kill)
These bust tha SIGTSTP, SIGCONT, SIGINT, SIGHUP, SIGTERM n' SIGKILL
signals respectively, ta tha process crew of tha process hustlin under
.I \*n
(usually tha shell).
The
.B SIGCONT
function is especially useful if tha user has accidentally typed CTRL-Z,
suspendin tha process.
.TP
Quit (quit)
Quit processin X events except ta support tha \fB-hold\fP option,
and then bust a SIGHUP signal ta the
the process crew of tha process hustlin under
.I \*n
(usually tha shell).
.RE
.PP
.
.\" ************************************************************************
.SS "VT Options"
.PP
The
.I vtMenu
sets various modes up in tha VT102 emulation, n' is popped up when the
\*(``control\*('' key n' pointa button two is pressed up in tha VT102 window.
.TP
VT102/VT220 Modes:
.RS
.
.TP
Enable Scrollbar (scrollbar)
Enable (or disable) tha scrollbar.
This correspondz ta the
.B \-sb
option n' the
.B scrollBar
resource.
.
.TP
Enable Jump Scroll (jumpscroll)
Enable (or disable) jump scrolling.
This correspondz ta the
.B \-j
option n' the
.B jumpScroll
resource.
.
.TP
Enable Reverse Video (reversevideo)
Enable (or disable) reverse-video.
This correspondz ta the
.B \-rv
option n' the
.B reverseVideo
resource.
.
.TP
Enable Auto Wraparound (autowrap)
Enable (or disable) auto-wraparound.
This correspondz ta the
.B \-aw
option n' the
.B autoWrap
resource.
.
.TP
Enable Reverse Wraparound (reversewrap)
Enable (or disable) reverse wraparound.
This correspondz ta the
.B \-rw
option n' the
.B reverseWrap
resource.
.
.TP
Enable Auto Linefeed (autolinefeed)
Enable (or disable) auto-linefeed.
This is tha VT102 NEL function,
which causes tha emulator ta emit a linefeed afta each carriage return.
There is no correspondin command-line option or resource setting.
.
.TP
Enable Application Cursor Keys (appcursor)
Enable (or disable) application cursor keys.
This correspondz ta the
.B appcursorDefault
resource.
There is no correspondin command-line option.
.
.TP
Enable Application Keypad (appkeypad)
Enable (or disable) application keypad keys.
This correspondz ta the
.B appkeypadDefault
resource.
There is no correspondin command-line option.
.
.TP
Scroll ta Bottom on Key Press (scrollkey)
Enable (or disable) scrollin ta tha bottom of tha scrollin region on a keypress.
This correspondz ta the
.B \-sk
option n' the
.B scrollKey
resource.
.IP
As a special case, tha XON / XOFF keys (control/S n' control/Q) is ignored.
.
.TP
Scroll ta Bottom on Tty Output (scrollttyoutput)
Enable (or disable) scrollin ta tha bottom of tha scrollin region on output ta tha terminal.
This correspondz ta the
.B \-si
option n' the
.B scrollTtyOutput
resource.
.
.TP
Allow 80/132 Column Switchin (allow132)
Enable (or disable) switchin between 80 n' 132 columns.
This correspondz ta the
.B \-132
option n' the
.B c132
resource.
.
.TP
Keep Selection (keepSelection)
Tell \fI\*n\fP whether ta disown tha selection when it stops highlightin it,
e.g., when a application modifies tha display so dat it no longer matches
the text which has been highlighted.
As long as \fI\*n\fP continues ta own tha selection,
it can provide tha correspondin text ta other clients via cut/paste.
This correspondz ta the
.B keepSelection
resource.
There is no correspondin command-line option.
.
.TP
Select ta Clipboard (selectToClipboard)
Tell \fI\*n\fP whether ta use tha PRIMARY or CLIPBOARD
for SELECT tokens up in tha \fBtranslations\fP resource which
maps keyboard n' mouse actions ta select/paste actions.
This correspondz ta the
.B selectToClipboard
resource.
There is no correspondin command-line option.
.
.TP
Enable Visual Bell (visualbell)
Enable (or disable) visible bell (i.e., flashing) instead of a audible bell.
This correspondz ta the
.B \-vb
option n' the
.B visualBell
resource.
.
.TP
Enable Bell Urgency (bellIsUrgent)
Enable (or disable) Urgency window manager hint when Control-G is received.
This correspondz ta the
.B bellIsUrgent
resource.
.
.TP
Enable Pop on Bell (poponbell)
Enable (or disable) raisin of tha window when Control-G is received.
This correspondz ta the
.B \-pop
option n' the
.B popOnBell
resource.
.
.TP
Enable Blinkin Cursor (cursorblink)
Enable (or disable) tha blinking-cursor feature.
This correspondz ta the
.B \-bc
option n' the
.B cursorBlink
resource.
There be also a escape sequence
(see tha document \fIXterm Control Sequences\fP).
Da menu entry n' tha escape sequence states is XOR'd:
if both is enabled, tha cursor aint gonna blink,
if only one is enabled, tha cursor will blink.
.
.TP
Enable Alternate Screen Switchin (titeInhibit)
Enable (or disable) switchin between tha aiiight n' alternate screens.
This correspondz ta the
.B titeInhibit
resource.
There is no correspondin command-line option.
.
.TP
Enable Actizzle Icon (activeicon)
Enable (or disable) tha active-icon feature.
This correspondz ta the
.B \-ai
option n' the
.B activeIcon
resource.
.
.TP
Sixel Scrollin (sixelScrolling)
When enabled,
sixel graphics is positioned all up in tha current text cursor location, scroll
the image vertically if larger than tha screen, n' leave tha text cursor
afta tha image when returnin ta text mode.
When disabled,
sixel graphics is positioned all up in tha upper left of tha screen, are
cropped ta fit tha screen, n' do not affect tha text cursor location
(this is tha default).
This correspondz ta the
.B sixelScrolling
resource.
There is no correspondin command-line option.
.
.TP
Private Color Registas (privateColorRegisters)
When enabled,
each graphic image uses a separate set of color registers, so dat it
essentially has a private palette (this is tha default).  If it aint set,
all graphics images share a cold-ass lil common set of registas which is how tha fuck sixel and
ReGIS graphics hit dat shiznit on actual hardware.  Da default is likely a more
useful mode on modern TrueColor hardware.
This correspondz ta the
.B privateColorRegisters
resource.
There is no correspondin command-line option.
.RE
.
.TP
VT102/VT220 Commands:
.RS
.TP
Do Soft Reset (softreset)
Reset scroll regions.
This can be convenient when some program has left tha scroll regions
set incorrectly (often a problem when rockin VMS or TOPS-20).
This correspondz ta tha VT220 DECSTR control sequence.
.
.TP
Do Full Reset (hardreset)
Da full reset entry will clear tha screen, reset tabs ta every
eight columns, n' reset tha terminal modes (like fuckin wrap n' smooth scroll)
to they initial states just after
.I \*n
has finished processin tha command line options.
This correspondz ta tha VT102 RIS control sequence,
with all dem obvious differences.
For example, yo' session aint disconnected as a real VT102 would do.
.
.TP
Reset n' Clear Saved Lines (clearsavedlines)
Perform a gangbangin' full reset,
and also clear tha saved lines.
.RE
.
.TP
Commandz fo' settin tha current screen:
.RS
.
.TP
Show Tek Window (tekshow)
When enabled,
pops tha Tektronix 4014 window up (makes it visible).
When disabled,
hides tha Tektronix 4014 window.
.
.TP
Switch ta Tek Mode (tekmode)
When enabled,
pops tha Tektronix 4014 window up if it aint already visible,
and switches tha input stream ta dat window.
When disabled,
hides tha Tektronix 4014 window and
switches input back ta tha VTxxx window.
.
.TP
Hide VT Window (vthide)
When enabled,
hides tha VTxxx window,
shows tha Tektronix 4014 window if
it was not already visible
and switches tha input stream ta dat window.
When disabled,
shows tha VTxxx window,
and switches tha input stream ta dat window.
.
.TP
Show Alternate Screen (altscreen)
When enabled,
shows tha alternate screen.
When disabled,
shows tha aiiight screen.
Note dat tha aiiight screen may have saved lines;
the alternate screen do not.
.RE
.PP
.
.SS "VT Fonts"
.PP
Da \fIfontMenu\fP pops up when
when tha \*(``control\*('' key n' pointa button three is pressed up in a window.
It sets tha font used up in tha VT102 window,
or modifies tha way tha font is specified or displayed.
There is nuff muthafuckin sections.
.PP
Da first section allows you ta select tha font from a set of alternatives:
.RS
.TP
Default (fontdefault)
Set tha font ta tha default, i.e., dat given by the
.B *VT100.font
resource.
.TP
Unreadable (font1)
Set tha font ta dat given by the
.B *VT100.font1
resource.
.TP
Tiny (font2)
Set tha font ta dat given by the
.B *VT100.font2
resource.
.TP
Lil Small-Ass (font3)
Set tha font ta dat given by the
.B *VT100.font3
resource.
.TP
Medium (font4)
Set tha font ta dat given by the
.B *VT100.font4
resource.
.TP
Big-Ass (font5)
Set tha font ta dat given by the
.B *VT100.font5
resource.
.TP
Big-Ass (font6)
Set tha font ta dat given by the
.B *VT100.font6
resource.
.TP
Escape Sequence
This allows you ta set tha font last specified by tha Set
Font escape sequence (see tha document \fIXterm Control Sequences\fP).
.TP
Selection (fontsel)
This allows you ta set tha font specified
the current selection as a gangbangin' font name (if tha PRIMARY selection is owned).
.RE
.PP
Da second section allows you ta modify tha way it is displayed:
.RS
.TP
Bold Fonts
This is normally checked (enabled).
When unchecked, \fI\*n\fP aint gonna use bold fonts.
Da settin correspondz ta tha \fBallowBoldFonts\fP resource.
.TP
Line-Drawin Charactas (font-linedrawing)
When set,  drops some lyrics ta \fI\*n\fP ta draw its own line-drawin characters.
Otherwise it relies on tha font containin these.
Compare ta tha \fBforceBoxChars\fP resource.
.TP
Packed Font (font-packed)
When set,  drops some lyrics ta \fI\*n\fP ta use tha minimum glyph-width from a gangbangin' font
when displayin characters.
Use tha maximum width (unchecked) ta help display proportionizzle fonts.
Compare ta tha \fBforcePackedFont\fP resource.
.TP
Doublesized Charactas (font-doublesize)
When set, \fI\*n\fP may ask tha font server ta produce scaled versions
of tha aiiight font, fo' VT102 double-size characters.
.RE
.PP
Da third section allows you ta modify tha way it is specified:
.RS
.TP
TrueType Fonts (render-font)
If the
.B "renderFont
and correspondin resources was set,
this be a gangbangin' further control whether \fI\*n\fP will straight-up use the
Xft library calls ta obtain a gangbangin' font.
.TP
UTF-8 Encodin (utf8-mode)
This controls whether \fI\*n\fP uses UTF-8 encodin of input/output.
It be useful fo' temporarily switchin \fI\*n\fP ta display
text from a application which do not follow tha locale settings.
It correspondz ta tha \fButf8\fP resource.
.TP
UTF-8 Fonts (utf8-fonts)
This controls whether \fI\*n\fP uses UTF-8 fonts fo' display.
It be useful fo' temporarily switchin \fI\*n\fP ta display
text from a application which do not follow tha locale settings.
It combines tha \fButf8\fP n' \fButf8Fonts\fP resources.
.TP
UTF-8 Titlez (utf8-titles)
This controls whether \fI\*n\fP accepts UTF-8 encodin for
title control sequences.
It correspondz ta tha \fButf8Fonts\fP resource.
.IP
Initially tha checkmark is set accordin ta both tha \fButf8\fP
and \fButf8Fonts\fP resource joints.
If tha latta is set ta \*(``always\*('', tha checkmark is disabled.
Likewise, if there be no fonts given up in tha \fButf8Fonts\fP
subresources, then tha checkmark also is disabled.
.IP
Da standard \fBXTerm\fP app-defaults file defines both setz of fonts,
while tha \fBUXTerm\fP app-defaults file defines only one set.
assumin tha standard app-defaults files,
this command will launch \fI\*n\fP able ta switch between UTF-8
and ISO-8859-1 encoded fonts:
.NS
u\*n -class XTerm
.NE
.RE
.IP
Da fourth section allows you ta enable or disable special operations
which can be controlled by freestylin escape sequences ta tha terminal.
These is disabled if tha SendEvents feature is enabled:
.RS
.TP
Allow Color Ops (allow-font-ops)
This correspondz ta tha \fBallowColorOps\fP resource.
Enable or disable control sequences dat set/query tha colors.
.TP
Allow Font Ops (allow-font-ops)
This correspondz ta tha \fBallowFontOps\fP resource.
Enable or disable control sequences dat set/query tha font.
.TP
Allow Tcap Ops (allow-tcap-ops)
Enable or disable control sequences dat query tha terminal's
notion of its function-key strings, as termcap or terminfo capabilities.
This correspondz ta tha \fBallowTcapOps\fP resource.
.TP
Allow Title Ops (allow-title-ops)
Enable or disable control sequences dat modify tha window title or icon name.
This correspondz ta tha \fBallowTitleOps\fP resource.
.TP
Allow Window Ops (allow-window-ops)
Enable or disable extended window control sequences (as used up in dtterm).
This correspondz ta tha \fBallowWindowOps\fP resource.
.RE
.
.SS "TEK Options"
.PP
The
.I tekMenu
sets various modes up in tha Tektronix emulation, n' is popped up when the
\*(``control\*('' key n' pointa button two is pressed up in tha Tektronix window.
Da current font size is checked up in tha modes section of tha menu.
.RS
.TP
Big-Ass Charactas (tektextlarge)
.TP
\&#2 Size Charactas (tektext2)
.TP
\&#3 Size Charactas (tektext3)
.TP
Lil Small-Ass Charactas (tektextsmall)
.RE
.PP
Commands:
.RS
.TP
PAGE (tekpage)
Clear tha Tektronix window.
.TP
RESET (tekreset)
.TP
COPY (tekcopy)
.RE
.PP
Windows:
.RS
.TP
Show VT Window (vtshow)
.TP
Switch ta VT Mode (vtmode)
.TP
Hide Tek Window (tekhide)
.RE
.
.
.SH SECURITY
.
.PP
X environments differ up in they securitizzle consciousness.
.bP
Most servers,
run under \fIxdm\fP,
are capable of rockin a \*(``magic cookie\*('' authorization
scheme dat can provide a reasonable level of securitizzle fo' nuff people.
If yo' server is only rockin a host-based mechanizzle ta control access to
the server (see \fIxhost(1)\fP), then if you enable access fo' a host and
other playas is also permitted ta run clients on dat same host,
it is possible dat one of mah thugs can run a application which uses the
basic skillz of tha X protocol ta snoop on yo' activities,
potentially capturin a transcript of every last muthafuckin thang you type all up in tha keyboard.
.bP
Any process which has access ta yo' X display can manipulate it
in ways dat you might not anticipate,
even redirectin yo' keyboard ta itself
and bustin  events ta yo' applicationz windows.
This is legit even wit tha \*(``magic cookie\*('' authorization scheme.
While tha \fBallowSendEvents\fP serves up some protection against
rogue applications tamperin wit yo' programs,
guardin against a snooper is harder.
.
.bP
Da X input extension fo' instizzle allows a application ta bypass
all of tha other (limited) authorization n' securitizzle features,
includin tha GrabKeyboard protocol.
.
.bP
Da possibilitizzle of a application spyin on yo' keystrokes
iz of particular concern when you wanna type up in a password
or other sensitizzle data.
Da dopest solution ta dis problem is ta bust a funky-ass better
authorization mechanizzle than is provided by X.
.PP
Subject ta all of these caveats,
a simple mechanizzle exists fo' protectin keyboard input up in \fI\*n\fP.
.
.PP
Da \fI\*n\fP menu (see \fBMENUS\fP above) gotz nuff a \fBSecure Keyboard\fP
entry which, when enabled,
attempts ta ensure dat all keyboard input is directed
\fIonly\fP ta \fI\*n\fP (usin tha GrabKeyboard protocol request).
When a application prompts you fo' a password
(or other sensitizzle data), you can enable \fBSecure Keyboard\fP rockin the
menu, type up in tha data, n' then disable \fBSecure Keyboard\fP using
the menu again.
.bP
This ensures dat you know which window be acceptin yo' keystrokes.
.bP
It cannot ensure dat there be no processes which have access ta your
X display dat might be observin tha keystrokes as well.
.
.PP
Only one X client at a time can grab tha keyboard,
so when you attempt ta enable \fBSecure Keyboard\fP it may fail.
In dis case, tha bell will sound.
If tha \fBSecure Keyboard\fP succeeds,
the foreground n' background flavas is ghon be exchanged (as if you
selected tha \fBReverse Video\fP entry up in tha \fBModes\fP menu);
they is ghon be exchanged again n' again n' again when you exit secure mode.
If tha colors
do \fInot\fP switch, then
you should be \fIvery\fP suspicious dat yo ass is bein spoofed.
If tha application yo ass is hustlin displays a prompt before askin for
the password, it is safest ta enta secure mode \fIbefore\fP the
prompt gets displayed, n' ta make shizzle dat tha prompt gets displayed
correctly (in tha freshly smoked up colors), ta minimize tha probabilitizzle of
spoofing.
Yo ass can also brang up tha menu again n' again n' again n' make shizzle dat a cold-ass lil check
mark appears next ta tha entry.
.
.PP
\fBSecure Keyboard\fP mode is ghon be disabled automatically if yo' \fI\*n\fP
window becomes iconified (or otherwise unmapped), or if you start up
a reparentin window manager (that places a title bar or other decoration
around tha window) while up in \fBSecure Keyboard\fP mode.
(This be a
feature of tha X protocol not easily overcome.)  When dis happens,
the foreground n' background flavas is ghon be switched back n' tha bell
will sound up in warning.
.
.
.SH "CHARACTER CLASSES"
Clickin tha left pointa button twice up in rapid succession
(double-clicking) causes all charactaz of tha same class
(e.g., letters, white space, punctuation) ta be selected as a \*(``word\*(''.
Since different playas have different preferences fo' what tha fuck should
be selected (for example, should filenames be selected as a whole or only
the separate subnames), tha default mappin can be overridden all up in tha use
of tha \fBcharClass\fP (class \fICharClass\fP) resource.
.
.PP
This resource be a
seriez of comma-separated
of \fIrange\fP:\fIvalue\fP pairs.
The
\fIrange\fP is either a single number or \fIlow\fP-\fIhigh\fP up in tha range of 0
to 65535, correspondin ta tha code fo' tha characta or charactas ta be
set.
Da \fIvalue\fP be arbitrary, although tha default table uses the
characta number of tha straight-up original gangsta characta occurrin up in tha set.
When not in
UTF-8 mode, only tha straight-up original gangsta 256 bytez of dis table is ghon be used.
.
.PP
Da default table starts as bigs up \-
.NS
static int charClass[256] = {
/\(** NUL  SOH  STX  ETX  EOT  ENQ  ACK  BEL */
    32,   1,   1,   1,   1,   1,   1,   1,
/\(**  BS   HT   NL   VT   NP   CR   SO   SI */
     1,  32,   1,   1,   1,   1,   1,   1,
/\(** DLE  DC1  DC2  DC3  DC4  NAK  SYN  ETB */
     1,   1,   1,   1,   1,   1,   1,   1,
/\(** CAN   EM  SUB  ESC   FS   GS   RS   US */
     1,   1,   1,   1,   1,   1,   1,   1,
/\(**  SP    !    "    #    $    %    &    \*(AQ */
.\"   " <- fo' emacs autocolor ta work well :-)
    32,  33,  34,  35,  36,  37,  38,  39,
/\(**   (    )    *    +    ,    \-    .    / */
    40,  41,  42,  43,  44,  45,  46,  47,
/\(**   0    1    2    3    4    5    6    7 */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**   8    9    :    ;    <    =    >    ? */
    48,  48,  58,  59,  60,  61,  62,  63,
/\(**   @    A    B    C    D    E    F    G */
    64,  48,  48,  48,  48,  48,  48,  48,
/\(**   H    I    J    K    L    M    N    O */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**   P    Q    R    S    T    U    V    W */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**   X    Y    Z    [    \\    ]    ^    _ */
    48,  48,  48,  91,  92,  93,  94,  48,
/\(**   `    a    b    c    d    e    f    g */
    96,  48,  48,  48,  48,  48,  48,  48,
/\(**   h    i    j    k    l    m    n    o */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**   p    q    r    s    t    u    v    w */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**   x    y    z    {    |    }    ~  DEL */
    48,  48,  48, 123, 124, 125, 126,   1,
/\(** x80  x81  x82  x83  IND  NEL  SSA  ESA */
     1,   1,   1,   1,   1,   1,   1,   1,
/\(** HTS  HTJ  VTS  PLD  PLU   RI  SS2  SS3 */
     1,   1,   1,   1,   1,   1,   1,   1,
/\(** DCS  PU1  PU2  STS  CCH   MW  SPA  EPA */
     1,   1,   1,   1,   1,   1,   1,   1,
/\(** x98  x99  x9A  CSI   ST  OSC   PM  APC */
     1,   1,   1,   1,   1,   1,   1,   1,
/\(**   \-    i   c/    L   ox   Y\-    |   So */
   160, 161, 162, 163, 164, 165, 166, 167,
/\(**  ..   c0   ip   <<    _        R0    \- */
   168, 169, 170, 171, 172, 173, 174, 175,
/\(**   o   +\-    2    3    \*(AQ    u   q|    . */
   176, 177, 178, 179, 180, 181, 182, 183,
/\(**   ,    1    2   >>  1/4  1/2  3/4    ? */
   184, 185, 186, 187, 188, 189, 190, 191,
/\(**  A`   A\*(AQ   A^   A~   A:   Ao   AE   C, */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**  E`   E\*(AQ   E^   E:   I`   I\*(AQ   I^   I: */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**  D\-   N~   O`   O\*(AQ   O^   O~   O:    X */
    48,  48,  48,  48,  48,  48,  48, 215,
/\(**  O/   U`   U\*(AQ   U^   U:   Y\*(AQ    P    B */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**  a`   a\*(AQ   a^   a~   a:   ao   ae   c, */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**  e`   e\*(AQ   e^   e:    i`  i\*(AQ   i^   i: */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**   d   n~   o`   o\*(AQ   o^   o~   o:   \-: */
    48,  48,  48,  48,  48,  48,  48, 247,
/\(**  o/   u`   u\*(AQ   u^   u:   y\*(AQ    P   y: */
    48,  48,  48,  48,  48,  48,  48,  48};
.NE
.IP
For example, tha strang \*(``33:48,37:48,45\-47:48,38:48\*('' indicates dat the
exclamation mark, cement sign, dash, period, slash, n' ampersand characters
should be treated tha same way as charactas n' numbers.
This is useful
for cuttin n' pastin electronic mailin addresses n' filenames.
.
.
.SH KEY BINDINGS
.PP
It be possible ta rebind keys (or sequencez of keys) ta arbitrary strings
for input, by changin tha \fBtranslations\fP resources
for tha vt100 or tek4014 widgets.
Changin tha \fBtranslations\fP resource
for events other than key n' button events aint expected,
and will cause unpredictable behavior.
.SS ACTIONS
Da following
actions is provided fo' use within tha \fIvt100\fP or \fItek4014\fP
\fBtranslations\fP resources:
.TP 8
.B "allow-color-ops(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBallowColorOps\fP resource n' be also
invoked by tha \fBallow-color-ops\fP entry up in \fIfontMenu\fP.
.TP 8
.B "allow-font-ops(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBallowFontOps\fP resource n' be also
invoked by tha \fBallow-font-ops\fP entry up in \fIfontMenu\fP.
.TP 8
.B "allow-send-events(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBallowSendEvents\fP resource n' be also
invoked by tha \fBallowsends\fP entry up in \fImainMenu\fP.
.TP 8
.B "allow-tcap-ops(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBallowTcapOps\fP resource n' be also
invoked by tha \fBallow-tcap-ops\fP entry up in \fIfontMenu\fP.
.TP 8
.B "allow-title-ops(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBallowTitleOps\fP resource n' be also
invoked by tha \fBallow-title-ops\fP entry up in \fIfontMenu\fP.
.TP 8
.B "allow-window-ops(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBallowWindowOps\fP resource n' be also
invoked by tha \fBallow-window-ops\fP entry up in \fIfontMenu\fP.
.TP 8
.B "alt-sends-escape()"
This action togglez tha state of tha \fBaltSendsEscape\fP resource.
.TP 8
.B "bell([\fIpercent\fP])"
This action rings tha keyboard bell all up in tha specified cementage
above or below tha base volume.
.TP 8
.B "clear-saved-lines()"
This action do \fBhard-reset()\fP (see below) n' also clears tha history
of lines saved off tha top of tha screen.
It be also invoked from tha \fBclearsavedlines\fP entry up in \fIvtMenu\fP.
Da effect is identical ta a hardware reset (RIS) control sequence.
.TP 8
.B "copy-selection(\fIdestname\fP [, ...])"
This action puts tha currently selected text tha fuck into all of tha selections or
cutbuffers specified by \fIdestname\fP.
Unlike \fBselect-end\fP, it do not bust a mouse posizzle or otherwise
modify tha internal selection state.
.TP 8
.B "create-menu(\fIm/v/f/t\fP)"
This action creates one of tha menus used by \fI\*n\fP,
if it has not been previously pimped.
Da parameta joints is tha menu names:
\fImainMenu\fP, \fIvtMenu\fP, \fIfontMenu\fP, \fItekMenu\fP, respectively.
.TP 8
.B "dabbrev-expand()"
Expandz tha word before cursor by searchin up in tha precedin text on the
screen n' up in tha scrollback buffer fo' lyrics startin wit that
abbreviation.
Repeatin \fBdabbrev-expand()\fP nuff muthafuckin times up in sequence searches fo' an
alternatizzle expansion by lookin farther back.
Lack of mo' matches is signaled by a \fBbeep()\fP.
Attempts ta expand a empty word
(i.e., when cursor is preceded by a space) yield successively all previous
words.
Consecutizzle identical expansions is ignored.
Da word here is defined as a sequence of non-whitespace characters.
This feature partially emulates tha behavior
of \*(``dynamic abbreviation\*('' expansion up in Emacs (bound there ta M\-/).
Here be a resource settin fo' \fI\*n\fP which will do tha same thang:
.NS
*VT100*translations:    #override \\n\\\&
	Meta <KeyPress> /:dabbrev-expand()
.NE
.TP 8
.B "deiconify()"
Changes tha window state back ta normal, if dat shiznit was iconified.
.TP 8
.B "delete-is-del()"
This action togglez tha state of tha \fBdeleteIsDEL\fP resource.
.TP 8
.B "dired-button()"
Handlez a funky-ass button event (other than press n' release)
by echoin tha eventz position
(i.e., characta line n' column) up in tha followin format:
.sp
.in +8
^X ESC G <line+\*(`` \*(''> <col+\*(`` \*(''>
.in -8
.TP 8
.B "fullscreen(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBfullscreen\fP resource.
.TP 8
.B "iconify()"
Iconifies tha window.
.TP 8
.B "hard-reset()"
This action resets tha scrollin region, tabs, window size, n' cursor keys
and clears tha screen.
It be also invoked from tha \fBhardreset\fP
entry up in \fIvtMenu\fP.
.TP 8
.B "ignore()"
This action ignores tha event but checks fo' special pointa position
escape sequences.
.TP 8
.B "insert()"
This action bangs tha characta or strang associated with
the key dat was pressed.
.TP 8
.B "insert-eight-bit()"
This action bangs a eight-bit (Meta) version of tha characta or string
associated wit tha key dat was pressed.
Only single-byte joints is treated specially.
Da exact action dependz on tha value of
the \fBaltSendsEscape\fP and
the \fBmetaSendsEscape\fP and
the \fBeightBitInput\fP resources.
Da \fBmetaSendsEscape\fP resource is tested first.
See tha \fBeightBitInput\fP resource fo' a gangbangin' full rap.
.IP
Da term \*(``eight-bit\*('' is misleading:
\fI\*n\fP checks if tha key is up in tha range 128 ta 255
(the eighth bit is set).
If tha value is up in dat range,
dependin on tha resource joints,
\fI\*n\fP may then do one of tha following:
.RS
.bP
add 128 ta tha value, settin its eighth bit,
.bP
send a ESC byte before tha key, or
.bP
send tha key unaltered.
.RE
.TP 8
.B "exec-formatted(\fIformat\fP, \fIsourcename\fP [, ...])"
Execute a external command,
usin tha current selection fo' part of tha commandz parameters.
Da first parameter, \fIformat\fP gives tha basic command.
Succeedin parametas specify tha selection source as up in \fBinsert-selection\fP.
.IP
Da \fIformat\fP parameta allows these substitutions:
.RS
.TP 5
%%
inserts a "%".
.TP 5
%P
the screen-posizzle all up in tha beginnin of tha highlighted region,
as a semicolon-separated pair of integers rockin the
values dat tha CUP control sequence would use.
.TP 5
%p
the screen-posizzle afta tha beginnin of tha highlighted region,
usin tha same convention as \*(``%P\*(''.
.TP 5
%S
the length of tha strang dat \*(``%s\*('' would insert.
.TP 5
%s
the content of tha selection, unmodified.
.TP 5
%T
the length of tha strang dat \*(``%t\*('' would insert.
.TP 5
%t
the selection, trimmed of leading/trailin whitespace, n' newlines
changed ta single spaces.
.TP 5
%V
the vizzle attributes all up in tha beginnin of tha highlighted region,
as a semicolon-separated list of integers rockin the
values dat tha SGR control sequence would use.
.TP 5
%v
the vizzle attributes afta tha end of tha highlighted region,
usin tha same convention as \*(``%V\*(''.
.RE
.IP
Afta constructin tha command-string,
\fI\*n\fP forks a subprocess n' executes tha command,
which completes independently of \*n.
.TP 8
.B "exec-selectable(\fIformat\fP, \fIonClicks\fP)"
Execute a external command,
usin data copied from tha screen fo' part of tha commandz parameters.
Da first parameter, \fIformat\fP gives
the basic command as up in \fBexec-formatted\fP.
Da second parameta specifies tha method fo' copying
the data as up in tha \fBonClicks\fP resource.
.TP 8
.B "insert-formatted(\fIformat\fP, \fIsourcename\fP [, ...])"
Insert tha current selection or data related ta it, formatted.
Da first parameter, \fIformat\fP gives tha template fo' tha data
as up in \fBexec-formatted\fP.
Succeedin parametas specify tha selection source as up in \fBinsert-selection\fP.
.TP 8
.B "insert-selectable(\fIformat\fP, \fIonClicks\fP)"
Insert data copied from tha screen, formatted.
Da first parameter, \fIformat\fP gives tha template fo' tha data
as up in \fBexec-formatted\fP.
Da second parameta specifies tha method fo' copying
the data as up in tha \fBonClicks\fP resource.
.TP 8
.B "insert-selection(\fIsourcename\fP [, ...])"
This action bangs tha strang found up in tha selection or cutbuffer indicated
by \fIsourcename\fP.
Sources is checked up in tha order given (case is
significant) until one is found.
Commonly-used selections include:
\fIPRIMARY\fP, \fISECONDARY\fP, n' \fICLIPBOARD\fP.
Cut buffers are
typically named \fICUT_BUFFER0\fP all up in \fICUT_BUFFER7\fP.
.TP 8
.B "insert-seven-bit()"
This action be a synonym fo' \fBinsert()\fP
Da term \*(``seven-bit\*('' is misleading:
it only implies dat \fI\*n\fP do not try ta add 128 ta tha keyz value
as up in \fBinsert-eight-bit()\fP.
.TP 8
.B "interpret(\fIcontrol-sequence\fP)"
Interpret tha given control sequence locally, i.e., without passin it to
the host.
This works by insertin tha control sequence all up in tha front
of tha input buffer.
Use \*(``\\\*('' ta escape octal digits up in tha string.
Xt do not allow you ta put a null characta (i.e., \*(``\\000\*('') up in tha string.
.TP 8
.B "keymap(\fIname\fP)"
This action dynamically defines a freshly smoked up translation table whose resource
name is \fIname\fP wit tha suffix \fIKeymap\fP (case is significant).
Da name \fINone\fP restores tha original gangsta translation table.
.TP 8
.B "larger-vt-font()"
Set tha font ta tha next larger one, based on tha font dimensions.
See also \fBset-vt-font()\fP.
.TP 8
.B "load-vt-fonts(\fIname\fP[,\fIclass\fP])"
Load fontnames from tha given subresource name n' class.
That is, load tha \*(``*VT100.\fIname\fP.font\*('',
resource as \*(``*VT100.font\*('' etc.
If no name is given, tha original gangsta set of fontnames is restored.
.IP
Unlike \fBset-vt-font()\fR, dis do not affect tha escape- n' select-fonts,
since dem is not based on resource joints.
It do affect tha fonts loosely organized under tha \*(``Default\*('' menu
entry, includin \fBfont\fP, \fBboldFont\fP, \fBwideFont\fP n' \fBwideBoldFont\fP.
.TP 8
.B "maximize()"
Resizes tha window ta fill tha screen.
.TP 8
.B "meta-sends-escape()"
This action togglez tha state of tha \fBmetaSendsEscape\fP resource.
.TP 8
.B "popup-menu(\fImenuname\fP)"
This action displays tha specified popup menu.
Valid names (case is
significant) include:  \fImainMenu\fP, \fIvtMenu\fP, \fIfontMenu\fP,
and \fItekMenu\fP.
.TP 8
.B "print(\fIprinter-flags\fP)"
This action prints tha window.
It be also invoked by tha \fIprint\fP entry up in \fImainMenu\fP.
.IP
Da action accepts optionizzle parameters, which temporarily override
resource settings.
Da parameta joints is matched ignorin case:
.RS
.TP 5
noFormFeed
no form feed is ghon be busted all up in tha end of tha last line printed
(i.e., \fBprinterFormFeed\fP is ``false'').
.TP 5
FormFeed
a form feed is ghon be busted all up in tha end of tha last line printed
(i.e., \fBprinterFormFeed\fP is ``true'').
.TP 5
noNewLine
no newline is ghon be busted all up in tha end of tha last line printed,
and wrapped lines is ghon be combined tha fuck into long lines
(i.e., \fBprinterNewLine\fP is ``false'').
.TP 5
NewLine
a newline is ghon be busted all up in tha end of tha last line printed,
and each line is ghon be limited (by addin a newline) ta tha screen width
(i.e., \fBprinterNewLine\fP is ``true'').
.TP 5
noAttrs
the page is printed without attributes
(i.e., \fBprintAttributes\fP is ``0'').
.TP 5
monoAttrs
the page is printed wit monochrome (vt220) attributes
(i.e., \fBprintAttributes\fP is ``1'').
.TP 5
colorAttrs
the page is printed wit ANSI color attributes
(i.e., \fBprintAttributes\fP is ``2'').
.RE
.TP 8
.B "print-everything(\fIprinter-flags\fP)"
This action sendz tha entire text history, up in addizzle ta tha text
currently visible, ta tha program given up in tha \fBprinterCommand\fP resource.
It allows tha same ol' dirty optionizzle parametas as tha \fBprint\fP action.
With a suitable printa command, tha action can be used ta load tha text
history up in a editor.
.TP 8
.B "print-immediate()"
Sendz tha text of tha current window directly ta a gangbangin' file,
as specified by the
\fBprintFileImmediate\fP,
\fBprintModeImmediate\fP and
\fBprintOptsImmediate\fP
resources.
.TP 8
.B "print-on-error()"
Togglez a gangbangin' flag spittin some lyrics ta \fI\*n\fP dat if it exits wit a X error,
to bust tha text of tha current window directly ta a gangbangin' file,
as specified by the
\fBprintFileXError\fP,
\fBprintModeXError\fP and
\fBprintOptsXError\fP
resources.
.TP 8
.B "print-redir()"
This action togglez tha \fBprinterControlMode\fR between 0 n' 2.
Da correspondin popup menu entry is useful fo' switchin tha printer
off if you happen ta chizzle yo' mind afta decidin ta print random
binary filez on tha terminal.
.TP 8
.B "quit()"
This action sendz a SIGHUP ta tha subprogram n' exits.
It be also invoked
by tha \fBquit\fP entry up in \fImainMenu\fP.
.TP 8
.B "readline-button()"
Supports tha optionizzle readline feature by echoin repeated cursor forward
or backward control sequences on button release event,
to request dat tha host application update its notion of tha cursor's
posizzle ta match tha button event.
.TP 8
.B "redraw()"
This action redraws tha window.
It be also invoked by tha \fIredraw\fP entry up in \fImainMenu\fP.
.TP 8
.B "restore()"
Restores tha window ta tha size before dat shiznit was last maximized.
.TP 8
.B "scroll-back(\fIcount\fP [,\fIunits\fP [,\fImouse\fP] ])"
This action scrolls tha text window backward so dat text dat had previously
scrolled off tha top of tha screen is now visible.
.IP
Da \fIcount\fP argument
indicates tha number of \fIunits\fP (which may be \fIpage\fP, \fIhalfpage\fP,
\fIpixel\fP, or \fIline\fP) by which ta scroll.
.IP
An adjustment can be specified fo' these joints
by appendin a \*(``+\*('' or \*(``\-\*(''
sign followed by a number,
e.g., \fIpage\-2\fP ta specify 2 lines less than a page.
.IP
If tha third parameta \fImouse\fP is given, tha action is ignored when
mouse reportin is enabled.
.TP 8
.B "scroll-forw(\fIcount\fP [,\fIunits\fP [,\fImouse\fP] ])"
This action is similar ta \fBscroll-back\fP except dat it scrolls
in tha other direction.
.TP 8
.B "secure()"
This action togglez tha \fISecure Keyboard\fP mode busted lyrics bout up in the
section named \fBSECURITY\fP, n' is invoked from tha \fBsecurekbd\fP
entry up in \fImainMenu\fP.
.TP 8
.B "scroll-lock(\fIon/off/toggle\fP)"
This action sets, unsets or togglez internal state which tells
\fI\*n\fP whether Scroll Lock be active,
subject ta tha \fBallowScrollLock\fP resource.
.TP 8
.B "select-cursor-end(\fIdestname\fP [, ...])"
This action is similar ta \fBselect-end\fP except dat it should be used
with \fBselect-cursor-start\fP.
.TP 8
.B "select-cursor-extend()"
This action is similar ta \fBselect-extend\fP except dat it should be used
with \fBselect-cursor-start\fP.
.TP 8
.B "select-cursor-start()"
This action is similar ta \fBselect-start\fP except dat it begins the
selection all up in tha current text cursor position.
.TP 8
.B "select-end(\fIdestname\fP [, ...])"
This action puts tha currently selected text tha fuck into all of tha selections or
cutbuffers specified by \fIdestname\fP.
It also sendz a mouse posizzle n' thugged-out shiznit tha internal selection state
to reflect tha end of tha selection process.
.TP 8
.B "select-extend()"
This action tracks tha pointa n' extendz tha selection.
It should only be bound ta Motion events.
.TP 8
.B "select-set()"
This action stores text dat correspondz ta tha current selection,
without affectin tha selection mode.
.TP 8
.B "select-start()"
This action begins text selection all up in tha current pointa location.
See
the section on \fBPOINTER USAGE\fP fo' shiznit on makin selections.
.TP 8
.B "send-signal(\fIsigname\fP)"
This action sendz tha signal named by \fIsigname\fP
to tha \fI\*n\fP subprocess (the shell or program specified with
the \fI\-e\fP command line option).
It be also invoked by the
.BR suspend ,
.BR continue ,
.BR interrupt ,
.BR hangup ,
.BR terminizzle ,
and
.BR kill
entries up in \fImainMenu\fP.
Allowable signal names is (case is
not significant):
\fItstp\fP (if supported by tha operatin system), \fIsuspend\fP (same
as \fItstp\fP), \fIcont\fP
(if supported by tha operatin system), \fIint\fP, \fIhup\fP, \fIterm\fP,
\fIquit\fP,
\fIalrm\fP, \fIalarm\fP (same as \fIalrm\fP) n' \fIkill\fP.
.TP 8
.B "set-8-bit-control(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBeightBitControl\fP resource.
It be also invoked from tha \fB8-bit-control\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-allow132(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBc132\fP resource.
It be also invoked from tha \fBallow132\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-altscreen(\fIon/off/toggle\fP)"
This action sets, unsets or togglez between tha alternate n' current screens.
.TP 8
.B "set-appcursor(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha handlin Application Cursor Key mode
and be also invoked by tha \fBappcursor\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-appkeypad(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha handlin of Application Keypad mode n' be also
invoked by tha \fBappkeypad\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-autolinefeed(\fIon/off/toggle\fP)"
This action sets, unsets or togglez automatic insertion of linefeeds.
It be also invoked by tha \fBautolinefeed\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-autowrap(\fIon/off/toggle\fP)"
This action sets, unsets or togglez automatic wrappin of long lines.
It be also invoked by tha \fBautowrap\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-backarrow(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBbackarrowKey\fP resource.
It be also invoked from tha \fBbackarrow key\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-bellIsUrgent(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBbellIsUrgent\fP resource.
It be also invoked by tha \fBbellIsUrgent\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-cursorblink(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBcursorBlink\fP resource.
It be also invoked from tha \fBcursorblink\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-cursesemul(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBcurses\fP resource.
It be also invoked from tha \fBcursesemul\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-font-doublesize(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBfontDoublesize\fP resource.
It be also invoked by tha \fBfont-doublesize\fP entry up in \fIfontMenu\fP.
.TP 8
.B "set-hp-function-keys(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBhpFunctionKeys\fP resource.
It be also invoked by tha \fBhpFunctionKeys\fP entry up in \fImainMenu\fP.
.TP 8
.B "set-jumpscroll(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBjumpscroll\fP resource.
It be also invoked by tha \fBjumpscroll\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-font-linedrawing(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fI\*n\fRz state regardin whether tha current font
has line-drawin charactas n' whether it should draw dem directly.
It be also invoked by tha \fBfont-linedrawing\fP entry up in \fIfontMenu\fP.
.\" .\" not implemented
.\" .TP 8
.\" .B "set-font-loading(\fIon/off/toggle\fP)"
.\" This action sets, unsets or togglez tha TBD resource
.\" which controls tha mobilitizzle ta load VT220 soft fonts.
.\" It be also invoked by tha \fBfont-loadable\fP entry up in \fIfontMenu\fP.
.TP 8
.B "set-font-packed(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fIforcePackedFont\fRz resource
which controls use of tha fontz minimum or maximum glyph width.
It be also invoked by tha \fBfont-packed\fP entry up in \fIfontMenu\fP.
.TP 8
.B "set-keep-selection(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBkeepSelection\fP resource.
It be also invoked by tha \fBkeepSelection\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-logging(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha state of tha loggin option.
.TP 8
.B "set-old-function-keys(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha state of legacy function keys.
It be also invoked by tha \fBoldFunctionKeys\fP entry up in \fImainMenu\fP.
.TP 8
.B "set-marginbell(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBmarginBell\fP resource.
.TP 8
.B "set-num-lock(\fIon/off/toggle\fP)"
This action togglez tha state of tha \fBnumLock\fP resource.
.TP 8
.B "set-pop-on-bell(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBpopOnBell\fP resource.
It be also invoked by tha \fBpoponbell\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-private-colors(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBprivateColorRegisters\fP resource.
.TP 8
.B "set-render-font(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBrenderFont\fP resource.
It be also invoked by tha \fBrender-font\fP entry up in \fIfontMenu\fP.
.TP 8
.B "set-reverse-video(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBreverseVideo\fP resource.
It be also invoked by tha \fBreversevideo\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-reversewrap(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBreverseWrap\fP resource.
It be also invoked by tha \fBreversewrap\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-scroll-on-key(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBscrollKey\fP resource.
It be also invoked from tha \fBscrollkey\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-scroll-on-tty-output(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBscrollTtyOutput\fP resource.
It be also invoked from tha \fBscrollttyoutput\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-scrollbar(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBscrollbar\fP resource.
It be also invoked by tha \fBscrollbar\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-sco-function-keys(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBscoFunctionKeys\fP resource.
It be also invoked by tha \fBscoFunctionKeys\fP entry up in \fImainMenu\fP.
.TP 8
.B "set-select(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBselectToClipboard\fP resource.
It be also invoked by tha \fBselectToClipboard\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-sixel-scrolling(\fIon/off/toggle\fP)"
This action togglez between inline (sixel scrolling) n' absolute positioning.
It can also be controlled via DEC private mode 80 (DECSDM) or from
the \fBsixelScrolling\fP entry up in tha \fIbtMenu\fP.
.TP 8
.B "set-sun-function-keys(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBsunFunctionKeys\fP resource.
It be also invoked by tha \fBsunFunctionKeys\fP entry up in \fImainMenu\fP.
.TP 8
.B "set-sun-keyboard(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBsunKeyboard\fP resource.
It be also invoked by tha \fBsunKeyboard\fP entry up in \fImainMenu\fP.
.TP 8
.B "set-tek-text(\fIlarge/2/3/small\fP)"
This action sets tha font used up in tha Tektronix window ta tha value of the
selected resource accordin ta tha argument.
Da argument can be either a keyword or single-letta alias,
as shown up in parentheses:
.RS
.TP 5
pimpin' (l)
Use resource \fBfontLarge\fP, same as menu entry \fBtektextlarge\fP.
.TP 5
two (2)
Use resource \fBfont2\fP, same as menu entry \fBtektext2\fP.
.TP 5
three (3)
Use resource \fBfont3\fP, same as menu entry \fBtektext3\fP.
.TP 5
small (s)
Use resource \fBfontSmall\fP, same as menu entry \fBtektextsmall\fP.
.RE
.TP 8
.B "set-terminal-type(\fItype\fP)"
This action directs output ta either tha \fIvt\fP or \fItek\fP windows,
accordin ta tha \fItype\fP string.
It be also invoked by the
\fBtekmode\fP entry up in \fIvtMenu\fP n' tha \fBvtmode\fP entry in
\fItekMenu\fP.
.TP 8
.B "set-titeInhibit(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBtiteInhibit\fP resource,
which controls switchin between tha alternate n' current screens.
.TP 8
.B "set-toolbar(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha toolbar feature.
It be also invoked by tha \fBtoolbar\fP entry up in \fImainMenu\fP.
.TP 8
.B "set-utf8-mode(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fButf8\fP resource.
It be also invoked by tha \fButf8-mode\fP entry up in \fIfontMenu\fP.
.TP 8
.B "set-utf8-title(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fButf8Title\fP resource.
It be also invoked by tha \fButf8-title\fP entry up in \fIfontMenu\fP.
.TP 8
.B "set-visibility(\fIvt/tek\fP,\fIon/off/toggle\fP)"
This action sets, unsets or togglez whether or not tha \fIvt\fP or \fItek\fP windows are
visible.
It be also invoked from tha \fBtekshow\fP n' \fBvthide\fP entries
in \fIvtMenu\fP n' tha \fBvtshow\fP n' \fBtekhide\fP entries in
\fItekMenu\fP.
.TP 8
.B "set-visual-bell(\fIon/off/toggle\fP)"
This action sets, unsets or togglez tha \fBvisualBell\fP resource.
It be also invoked by tha \fBvisualbell\fP entry up in \fIvtMenu\fP.
.TP 8
.B "set-vt-font(\fId/1/2/3/4/5/6/e/s\fP [,\fInormalfont\fP [, \fIboldfont\fP]])"
This action sets tha font or fonts currently bein used up in tha VT102 window.
Da first argument be a single characta dat specifies tha font ta be
used:
.RS 8
.HP
\fId\fP or \fID\fP indicate tha default font (the font initially
used when
\fI\*n\fP was started),
.HP
\fI1\fP all up in \fI6\fP indicate tha fonts
specified by tha \fBfont1\fP all up in \fBfont6\fP resources,
.HP
\fIe\fP or \fIE\fP
indicate tha aiiight n' bold fonts dat done been set all up in escape codes
(or specified as tha second n' third action arguments, respectively), and
.HP
\fIs\fP or \fIS\fP indicate tha font selection (as made by programs such as
\fIxfontsel(1)\fP) indicated by tha second action argument.
.RE
.IP
If \fI\*n\fR is configured ta support wide characters, an
additionizzle two optionizzle parametas is recognized fo' tha \fIe\fP argument:
wide font n' wide bold font.
.TP 8
.B "smaller-vt-font()"
Set tha font ta tha next smalla one, based on tha font dimensions.
See also \fBset-vt-font()\fP.
.TP 8
.B "soft-reset()"
This action resets tha scrollin region.
It be also invoked from tha \fBsoftreset\fP entry up in \fIvtMenu\fP.
Da effect is identical ta a soft reset (DECSTR) control sequence.
.TP 8
.B "spawn-new-terminal(params)"
Spawn a freshly smoked up \fI\*n\fP process.
This be available on systems which gotz a modern version of the
process filesystem, e.g., \*(``/proc\*('', which \fI\*n\fP can read.
.IP
Use tha \*(``cwd\*('' process entry, e.g., /proc/12345/cwd ta obtain the
workin directory of tha process which is hustlin up in tha current \fI\*n\fP.
.IP
On systems which have tha \*(``exe\*('' process entry, e.g., /proc/12345/exe,
use dis ta obtain tha actual executable.
Otherwise, use tha $PATH variable ta find \fI\*n\fP.
.IP
If parametas is given up in tha action,
pass dem ta tha freshly smoked up \fI\*n\fP process.
.TP 8
.B "start-extend()"
This action is similar ta \fBselect-start\fP except dat the
selection is extended ta tha current pointa location.
.TP 8
.B "start-cursor-extend()"
This action is similar ta \fBselect-extend\fP except dat the
selection is extended ta tha current text cursor position.
.TP 8
.B "string(\fIstring\fP)"
This action bangs tha specified text strang as if it had been typed.
Quotation is necessary if tha strang gotz nuff whitespace or
non-alphanumeric characters.
If tha strang argument begins wit the
charactas \*(``0x\*('', it is interpreted
as a hex characta constant.
.TP 8
.B "tek-copy()"
This action copies tha escape codes used ta generate tha current window
contents ta a gangbangin' file up in tha current directory beginnin wit tha name COPY.
It be also invoked from tha \fItekcopy\fP entry up in \fItekMenu\fP.
.TP 8
.B "tek-page()"
This action clears tha Tektronix window.
It be also invoked by tha \fBtekpage\fP entry up in \fItekMenu\fP.
.TP 8
.B "tek-reset()"
This action resets tha Tektronix window.
It be also invoked by tha \fItekreset\fP entry up in \fItekMenu\fP.
.TP 8
.B "vi-button()"
Handlez a funky-ass button event (other than press n' release)
by echoin a cold-ass lil control sequence computed from tha eventz line number
in tha screen relatizzle ta tha current line:
.sp
.in +8
ESC ^P
.in -8
or
.in +8
ESC ^N
.in -8
.sp
accordin ta whether tha event is before, or afta tha current line,
respectively.
Da ^N (or ^P) is repeated once fo' each line dat tha event differs
from tha current line.
Da control sequence is omitted altogether if tha button event is on the
current line.
.TP 8
.B "visual-bell()"
This action flashes tha window doggystyle.
.
.PP
Da Tektronix window also has tha followin action:
.TP 8
.B "gin-press(\fIl/L/m/M/r/R\fP)"
This action sendz tha indicated graphics input code.
.
.SS DEFAULT KEY BINDINGS
.PP
Da default bindings up in tha VT102 window use tha SELECT token,
which is set by tha \fBselectToClipboard\fP resource:
.NS
          Shift <KeyPress> Prior:scroll-back(1,halfpage) \\n\\\&
           Shift <KeyPress> Next:scroll-forw(1,halfpage) \\n\\\&
         Shift <KeyPress> Select:select-cursor-start() \\\&
                                 select-cursor-end(SELECT, CUT_BUFFER0) \\n\\\&
         Shift <KeyPress> Insert:insert-selection(SELECT, CUT_BUFFER0) \\n\\\&
                 Alt <Key>Return:fullscreen() \\n\\\&
        <KeyRelease> Scroll_Lock:scroll-lock() \\n\\\&
    Shift~Ctrl <KeyPress> KP_Add:larger-vt-font() \\n\\\&
    Shift Ctrl <KeyPress> KP_Add:smaller-vt-font() \\n\\\&
    Shift <KeyPress> KP_Subtract:smaller-vt-font() \\n\\\&
                ~Meta <KeyPress>:insert-seven-bit() \\n\\\&
                 Meta <KeyPress>:insert-eight-bit() \\n\\\&
                !Ctrl <Btn1Down>:popup-menu(mainMenu) \\n\\\&
           !Lock Ctrl <Btn1Down>:popup-menu(mainMenu) \\n\\\&
 !Lock Ctrl @Num_Lock <Btn1Down>:popup-menu(mainMenu) \\n\\\&
     ! @Num_Lock Ctrl <Btn1Down>:popup-menu(mainMenu) \\n\\\&
                ~Meta <Btn1Down>:select-start() \\n\\\&
              ~Meta <Btn1Motion>:select-extend() \\n\\\&
                !Ctrl <Btn2Down>:popup-menu(vtMenu) \\n\\\&
           !Lock Ctrl <Btn2Down>:popup-menu(vtMenu) \\n\\\&
 !Lock Ctrl @Num_Lock <Btn2Down>:popup-menu(vtMenu) \\n\\\&
     ! @Num_Lock Ctrl <Btn2Down>:popup-menu(vtMenu) \\n\\\&
          ~Ctrl ~Meta <Btn2Down>:ignore() \\n\\\&
                 Meta <Btn2Down>:clear-saved-lines() \\n\\\&
            ~Ctrl ~Meta <Btn2Up>:insert-selection(SELECT, CUT_BUFFER0) \\n\\\&
                !Ctrl <Btn3Down>:popup-menu(fontMenu) \\n\\\&
           !Lock Ctrl <Btn3Down>:popup-menu(fontMenu) \\n\\\&
 !Lock Ctrl @Num_Lock <Btn3Down>:popup-menu(fontMenu) \\n\\\&
     ! @Num_Lock Ctrl <Btn3Down>:popup-menu(fontMenu) \\n\\\&
          ~Ctrl ~Meta <Btn3Down>:start-extend() \\n\\\&
              ~Meta <Btn3Motion>:select-extend() \\n\\\&
                 Ctrl <Btn4Down>:scroll-back(1,halfpage,m) \\n\\\&
            Lock Ctrl <Btn4Down>:scroll-back(1,halfpage,m) \\n\\\&
  Lock @Num_Lock Ctrl <Btn4Down>:scroll-back(1,halfpage,m) \\n\\\&
       @Num_Lock Ctrl <Btn4Down>:scroll-back(1,halfpage,m) \\n\\\&
                      <Btn4Down>:scroll-back(5,line,m)     \\n\\\&
                 Ctrl <Btn5Down>:scroll-forw(1,halfpage,m) \\n\\\&
            Lock Ctrl <Btn5Down>:scroll-forw(1,halfpage,m) \\n\\\&
  Lock @Num_Lock Ctrl <Btn5Down>:scroll-forw(1,halfpage,m) \\n\\\&
       @Num_Lock Ctrl <Btn5Down>:scroll-forw(1,halfpage,m) \\n\\\&
                      <Btn5Down>:scroll-forw(5,line,m)     \\n\\\&
                         <BtnUp>:select-end(SELECT, CUT_BUFFER0) \\n\\\&
                       <BtnDown>:ignore()
.NE
.PP
Da default bindings fo' tha scrollbar widget
are separate from tha VT100 widget:
.NS
                      <Btn5Down>: StartScroll(Forward) \\n\\\&
                      <Btn1Down>: StartScroll(Forward) \\n\\\&
                      <Btn2Down>: StartScroll(Continuous) MoveThumb() NotifyThumb() \\n\\\&
                      <Btn3Down>: StartScroll(Backward) \\n\\\&
                      <Btn4Down>: StartScroll(Backward) \\n\\\&
                      <Btn2Motion>: MoveThumb() NotifyThumb() \\n\\\&
                      <BtnUp>:    NotifyScroll(Proportional) EndScroll()
.NE
.PP
Da default bindings up in tha Tektronix window are:
.NS
                 ~Meta<KeyPress>: insert-seven-bit() \\n\\\&
                  Meta<KeyPress>: insert-eight-bit() \\n\\\&
                !Ctrl <Btn1Down>: popup-menu(mainMenu) \\n\\\&
           !Lock Ctrl <Btn1Down>: popup-menu(mainMenu) \\n\\\&
 !Lock Ctrl @Num_Lock <Btn1Down>: popup-menu(mainMenu) \\n\\\&
      !Ctrl @Num_Lock <Btn1Down>: popup-menu(mainMenu) \\n\\\&
                !Ctrl <Btn2Down>: popup-menu(tekMenu) \\n\\\&
           !Lock Ctrl <Btn2Down>: popup-menu(tekMenu) \\n\\\&
 !Lock Ctrl @Num_Lock <Btn2Down>: popup-menu(tekMenu) \\n\\\&
      !Ctrl @Num_Lock <Btn2Down>: popup-menu(tekMenu) \\n\\\&
           Shift ~Meta<Btn1Down>: gin-press(L) \\n\\\&
                 ~Meta<Btn1Down>: gin-press(l) \\n\\\&
           Shift ~Meta<Btn2Down>: gin-press(M) \\n\\\&
                 ~Meta<Btn2Down>: gin-press(m) \\n\\\&
           Shift ~Meta<Btn3Down>: gin-press(R) \\n\\\&
                 ~Meta<Btn3Down>: gin-press(r)
.NE
.PP
Here be a example which uses shifted select/paste ta copy ta tha clipboard,
and unshifted select/paste fo' tha primary selection.
In each case, a (different) cut buffer is
also a target or source of tha select/paste operation.
It be blingin ta remember however,
that cut buffers store data up in ISO-8859-1 encoding,
while selections can store data up in a variety of formats n' encodings.
While \fI\*n\fP owns tha selection, it highlights dat shit.
When it loses tha selection, it removes tha correspondin highlight.
But you can still paste from tha correspondin cut buffer.
.NS
*VT100*translations:    #override \\n\\\&
    ~Shift~Ctrl<Btn2Up>: insert-selection(PRIMARY, CUT_BUFFER0) \\n\\\&
    Shift~Ctrl<Btn2Up>:  insert-selection(CLIPBOARD, CUT_BUFFER1) \\n\\\&
    ~Shift<BtnUp>:       select-end(PRIMARY, CUT_BUFFER0) \\n\\\&
    Shift<BtnUp>:        select-end(CLIPBOARD, CUT_BUFFER1)
.NE
.PP
Below be a sample of how tha fuck tha \fBkeymap()\fP action is used ta add special
keys fo' enterin commonly-typed works:
.NS
*VT100.Translations: #override <Key>F13: keymap(dbx)
*VT100.dbxKeymap.translations: \\\&
	<Key>F14:	keymap(None) \\n\\\&
	<Key>F17:	string("next") string(0x0d) \\n\\\&
	<Key>F18:	string("step") string(0x0d) \\n\\\&
	<Key>F19:	string("continue") string(0x0d) \\n\\\&
	<Key>F20:	string("print ") insert-selection(PRIMARY, CUT_BUFFER0)
.NE
.PP
Some playas prefer rockin tha left pointa button
for draggin tha scrollbar thumb.
That can be setup by alterin tha translations resource, e.g.,
.NS
*VT100.scrollbar.translations:	#override \\n\\\&
	<Btn5Down>:	StartScroll(Forward) \\n\\\&
	<Btn1Down>:	StartScroll(Continuous) MoveThumb() NotifyThumb() \\n\\\&
	<Btn4Down>:	StartScroll(Backward) \\n\\\&
	<Btn1Motion>:	MoveThumb() NotifyThumb() \\n\\\&
	<BtnUp>:	NotifyScroll(Proportional) EndScroll()
.NE
.SH "CONTROL SEQUENCES AND KEYBOARD"
Da \fIXterm Control Sequences\fP document lists tha control sequences which
an application can bust \fI\*n\fP ta make it big-ass up various operations.
Most of these operations is standardized, from either tha DEC or Tektronix
terminals, or from mo' widely used standardz like fuckin ISO-6429.
.
.
.SH ENVIRONMENT
.I Xterm
sets nuff muthafuckin environment variables:
.TP 5
DISPLAY
is tha display name,
pointin ta tha X server (see \fBDISPLAY NAMES\fP up in X(7)).
.TP 5
TERM
is set accordin ta tha termcap (or terminfo) entry which it is rockin as
a reference.
.TP 5
WINDOWID
is set ta tha X window id number of tha \fI\*n\fP window.
.TP 5
XTERM_FILTER
is set if a locale-filta is used.
Da value is tha pathname of tha filter.
.TP 5
XTERM_LOCALE
shows tha locale which was used by \fI\*n\fP on startup.
Some shell initialization scripts may set a gangbangin' finger-lickin' different locale.
.TP 5
XTERM_SHELL
is set ta tha pathname of tha program which is invoked.
Usually dat be a gangbangin' finger-lickin' dirty-ass shell program, e.g., \fI/bin/sh\fP.
Since it aint necessarily a gangbangin' finger-lickin' dirty-ass shell program however,
it is distinct from \*(``SHELL\*(''.
.TP 5
XTERM_VERSION
is set ta tha strang displayed by tha \fB\-version\fP option.
That is normally a identifier fo' tha X Window libraries used to
build \fI\*n\fP, followed by
\fI\*n\fPz patch number up in parenthesis.
Da patch number be also part of tha response ta a Secondary Device Attributes
(DA) control sequence (see \fIXterm Control Sequences\fP).
.
.PP
Dependin on yo' system configuration, \fI\*n\fP may also set the
following:
.TP 5
COLUMNS
the width of tha \fI\*n\fP up in charactas (cf: \*(``stty columns\*('').
.TP 5
HOME
when \fI\*n\fP is configured ta update utmp.
.TP 5
LINES
the height of tha \fI\*n\fP up in charactas (cf: \*(``stty rows\*('').
.TP 5
LOGNAME
when \fI\*n\fP is configured ta update utmp.
.TP 5
SHELL
when \fI\*n\fP is configured ta update utmp.
It be also set if you provide tha shell name as tha optionizzle parameter.
.TP 5
TERMCAP
the contentz of tha termcap entry correspondin ta $TERM,
with lines n' columns joints substituted
for tha actual size window you have pimped.
.TP 5
TERMINFO
may be defined ta a nonstandard location up in tha configure script.
.\"
.
.
.SH FILES
Da actual pathnames given may differ on yo' system.
.TP 5
\fI/etc/utmp\fP
the system logfile, which recordz user logins.
.TP 5
\fI/etc/wtmp\fP
the system logfile, which recordz user logins n' logouts.
.TP 5
.I /usr/share/X11/app-defaults/XTerm
the \fI\*n\fP default application resources.
.TP 5
.I /usr/share/X11/app-defaults/XTerm\-color
the \fI\*n\fP color application resources.
If yo' display supports color, use this
.in +10
*customization: \-color
.in -10
in yo' .Xdefaults file to
automatically use dis resource file rather than
.IR /usr/share/X11/app-defaults/XTerm .
If you do not do this,
\fI\*n\fP uses its compiled-in default resource settings fo' colors.
.TP 5
.I /usr/share/pixmaps
the directory up in which \fI\*n\fPz pixmap icon filez is installed.
.
.
.SH ERROR MESSAGES
Most of tha fatal error lyrics from \fI\*n\fP use tha followin format:
.RS
\*n: Error \fIXXX\fP, errno \fIYYY\fP: \fIZZZ\fP
.RE
Da \fIXXX\fP codes (which is used by \fI\*n\fP as its exit-code)
are listed below, wit a funky-ass brief explanation.
.TP 5
1
is used fo' miscellaneous errors, probably accompanied by a specific message,
.TP
11
ERROR_FIONBIO
.br
main: ioctl() failed on FIONBIO
.TP
12
ERROR_F_GETFL
.br
main: ioctl() failed on F_GETFL
.TP
13
ERROR_F_SETFL
.br
main: ioctl() failed on F_SETFL
.TP
14
ERROR_OPDEVTTY
.br
spawn: open() failed on /dev/tty
.TP
15
ERROR_TIOCGETP
.br
spawn: ioctl() failed on TIOCGETP
.TP
17
ERROR_PTSNAME
.br
spawn: ptsname() failed
.TP
18
ERROR_OPPTSNAME
.br
spawn: open() failed on ptsname
.TP
19
ERROR_PTEM
.br
spawn: ioctl() failed on I_PUSH/"ptem"
.TP
20
ERROR_CONSEM
.br
spawn: ioctl() failed on I_PUSH/"consem"
.TP
21
ERROR_LDTERM
.br
spawn: ioctl() failed on I_PUSH/"ldterm"
.TP
22
ERROR_TTCOMPAT
.br
spawn: ioctl() failed on I_PUSH/"ttcompat"
.TP
23
ERROR_TIOCSETP
.br
spawn: ioctl() failed on TIOCSETP
.TP
24
ERROR_TIOCSETC
.br
spawn: ioctl() failed on TIOCSETC
.TP
25
ERROR_TIOCSETD
.br
spawn: ioctl() failed on TIOCSETD
.TP
26
ERROR_TIOCSLTC
.br
spawn: ioctl() failed on TIOCSLTC
.TP
27
ERROR_TIOCLSET
.br
spawn: ioctl() failed on TIOCLSET
.TP
28
ERROR_INIGROUPS
.br
spawn: initgroups() failed
.TP
29
ERROR_FORK
.br
spawn: fork() failed
.TP
30
ERROR_EXEC
.br
spawn: exec() failed
.TP
32
ERROR_PTYS
.br
get_pty: not enough ptys
.TP
34
ERROR_PTY_EXEC
.br
waitin fo' initial map
.TP
35
ERROR_SETUID
.br
spawn: setuid() failed
.TP
36
ERROR_INIT
.br
spawn: can't initialize window
.TP
46
ERROR_TIOCKSET
.br
spawn: ioctl() failed on TIOCKSET
.TP
47
ERROR_TIOCKSETC
.br
spawn: ioctl() failed on TIOCKSETC
.TP
49
ERROR_LUMALLOC
.br
luit: command-line malloc failed
.TP
50
ERROR_SELECT
.br
in_put: select() failed
.TP
54
ERROR_VINIT
.br
VTInit: can't initialize window
.TP
57
ERROR_KMMALLOC1
.br
HandleKeymapChange: malloc failed
.TP
60
ERROR_TSELECT
.br
Tinput: select() failed
.TP
64
ERROR_TINIT
.br
TekInit: can't initialize window
.TP
71
ERROR_BMALLOC2
.br
SaltTextAway: malloc() failed
.TP
80
ERROR_LOGEXEC
.br
StartLog: exec() failed
.TP
83
ERROR_XERROR
.br
xerror: XError event
.TP
84
ERROR_XIOERROR
.br
xioerror: X I/O error
.TP
85
ERROR_ICEERROR
.br
ICE I/O error
.TP
90
ERROR_SCALLOC
.br
Alloc: calloc() failed on base
.TP
91
ERROR_SCALLOC2
.br
Alloc: calloc() failed on rows
.TP
102
ERROR_SAVE_PTR
.br
ScrnPointers: malloc/realloc() failed
.
.
.SH BUGS
.
.PP
Big-Ass pastes do not work on some systems.
This aint a funky-ass bug in
\fI\*n\fP; it aint nuthin but a funky-ass bug up in tha pseudo terminal driver of them
systems.
\fI\*n\fP feedz big-ass pastes ta tha pty only as fast as tha pty
will accept data yo, but some pty drivers do not return enough shiznit
to know if tha write has succeeded.
.
.PP
When connected ta a input method, it is possible fo' \*n ta hang
if tha XIM server is suspended or capped.
.
.PP
Many of tha options is not resettable after
.I \*n
starts.
.
.PP
This program still need ta be rewritten.
It should be split tha fuck into hella
modular sections, wit tha various emulators bein straight-up separate
widgets dat do not know bout each other.
Ideally, you'd like ta be able to
pick n' chizzle emulator widgets n' stick dem tha fuck into a single control widget.
.
.PP
There need ta be a gangbangin' finger-lickin' dialog box ta allow entry of tha Tek COPY file name.
.
.
.SH "SEE ALSO"
.na
resize(1),
luit(1),
u\*n(1),
X(7),
pty(4),
tty(4)
.ad
.PP
\fIXterm Control Sequences\fP
(this is tha file ctlseqs.ms).
.sp
http://invisible-island.net/xterm/xterm.html
.br
http://invisible-island.net/xterm/ctlseqs/ctlseqs.html
.
.
.SH AUTHORS
Far too nuff people, including:
.sp
Loretta Guarino Reid (DEC-UEG-WSL),
Joel McCormack (DEC-UEG-WSL), Terry Weissman (DEC-UEG-WSL),
Edward Moy (Berkeley), Ralph R. Right back up in yo muthafuckin ass. Swick (MIT-Athena),
Mark Vandevoorde (MIT-Athena), Bob McNamara (DEC-MAD),
Jim Gettys (MIT-Athena), Bob Scheifla (MIT X Consortium), Doug Mink (SAO),
Steve Pitschke (Stellar), Ron Newman (MIT-Athena), Jim Fulton (MIT X
Consortium), Dizzle Serisky (HP), Jonathan Kamens (MIT-Athena),
Jizzo Bacon,
Stephen P. Wall,
Dizzy Wexelblat, and
Thomas Dickey (invisible-island.net).
