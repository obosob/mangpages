'\" t
.\"     Title: git-read-tree
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-READ\-TREE" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-read-tree \- Readz tree shiznit tha fuck into tha index
.SH "SYNOPSIS"
.sp
.nf
\fIgit read\-tree\fR [[\-m [\-\-trivial] [\-\-aggressive] | \-\-reset | \-\-prefix=<prefix>]
                [\-u [\-\-exclude\-per\-directory=<gitignore>] | \-i]]
                [\-\-index\-output=<file>] [\-\-no\-sparse\-checkout]
                (\-\-empty | <tree\-ish1> [<tree\-ish2> [<tree\-ish3>]])
.fi
.sp
.SH "DESCRIPTION"
.sp
Readz tha tree shiznit given by <tree\-ish> tha fuck into tha index yo, but do not straight-up \fBupdate\fR any of tha filez it "caches"\&. (see: \fBgit-checkout-index\fR(1))
.sp
Optionally, it can merge a tree tha fuck into tha index, big-ass up a gangbangin' fast\-forward (i\&.e\&. 2\-way) merge, or a 3\-way merge, wit tha \-m flag\&. When used wit \-m, tha \-u flag causes it ta also update tha filez up in tha work tree wit tha result of tha merge\&.
.sp
Trivial merges is done by \fIgit read\-tree\fR itself\&. Only conflictin paths is ghon be up in unmerged state when \fIgit read\-tree\fR returns\&.
.SH "OPTIONS"
.PP
\-m
.RS 4
Perform a merge, not just a read\&. Da command will refuse ta run if yo' index file has unmerged entries, indicatin dat you aint finished previous merge you started\&.
.RE
.PP
\-\-reset
.RS 4
Same as \-m, except dat unmerged entries is discarded instead of failing\&.
.RE
.PP
\-u
.RS 4
Afta a successful merge, update tha filez up in tha work tree wit tha result of tha merge\&.
.RE
.PP
\-i
.RS 4
Usually a merge requires tha index file as well as tha filez up in tha hustlin tree ta be up ta date wit tha current head commit, up in order not ta lose local chizzles\&. This flag disablez tha check wit tha hustlin tree n' is meant ta be used when bustin a merge of trees dat is not directly related ta tha current hustlin tree status tha fuck into a temporary index file\&.
.RE
.PP
\-n, \-\-dry\-run
.RS 4
Peep if tha command would error out, without uppimpin tha index or tha filez up in tha hustlin tree fo' real\&.
.RE
.PP
\-v
.RS 4
Show tha progress of checkin filez out\&.
.RE
.PP
\-\-trivial
.RS 4
Restrict three\-way merge by
\fIgit read\-tree\fR
to happen only if there is no file\-level mergin required, instead of resolvin merge fo' trivial cases n' leavin conflictin filez unresolved up in tha index\&.
.RE
.PP
\-\-aggressive
.RS 4
Usually a three\-way merge by
\fIgit read\-tree\fR
resolves tha merge fo' straight-up trivial cases n' leaves other cases unresolved up in tha index, so dat porcelains can implement different merge policies\&. This flag make tha command resolve all dem mo' cases internally:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
when one side removes a path n' tha other side leaves tha path unmodified\&. Da resolution is ta remove dat path\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
when both sides remove a path\&. Da resolution is ta remove dat path\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
when both sides add a path identically\&. Da resolution is ta add dat path\&.
.RE
.RE
.PP
\-\-prefix=<prefix>/
.RS 4
Keep tha current index contents, n' read tha contentz of tha named tree\-ish under tha directory at
<prefix>\&. Da command will refuse ta overwrite entries dat already existed up in tha original gangsta index file\&. Note dat the
<prefix>/
value must end wit a slash\&.
.RE
.PP
\-\-exclude\-per\-directory=<gitignore>
.RS 4
When hustlin tha command with
\-u
and
\-m
options, tha merge result may need ta overwrite paths dat is not tracked up in tha current branch\&. Da command probably refuses ta proceed wit tha merge ta avoid losin such a path\& yo. However dis safety valve sometimes gets up in tha way\&. For example, it often happens dat tha other branch added a gangbangin' file dat used ta be a generated file up in yo' branch, n' tha safety valve triggers when you try ta switch ta dat branch afta you ran
make
but before hustlin
make clean
to remove tha generated file\&. This option  drops some lyrics ta tha command ta read per\-directory exclude file (usually
\fI\&.gitignore\fR) n' allows such a untracked but explicitly ignored file ta be overwritten\&.
.RE
.PP
\-\-index\-output=<file>
.RS 4
Instead of freestylin tha thangs up in dis biatch up to
$GIT_INDEX_FILE, write tha resultin index up in tha named file\&. While tha command is operating, tha original gangsta index file is locked wit tha same mechanizzle as usual\&. Da file must allow ta be rename(2)ed tha fuck into from a temporary file dat is pimped next ta tha usual index file; typically dis means it need ta be on tha same filesystem as tha index file itself, n' you need write permission ta tha directories tha index file n' index output file is located in\&.
.RE
.PP
\-\-no\-sparse\-checkout
.RS 4
Disable sparse checkout support even if
core\&.sparseCheckout
is true\&.
.RE
.PP
\-\-empty
.RS 4
Instead of readin tree object(s) tha fuck into tha index, just empty it\&.
.RE
.PP
<tree\-ish#>
.RS 4
Da id of tha tree object(s) ta be read/merged\&.
.RE
.SH "MERGING"
.sp
If \-m is specified, \fIgit read\-tree\fR can big-ass up 3 kindz of merge, a single tree merge if only 1 tree is given, a gangbangin' fast\-forward merge wit 2 trees, or a 3\-way merge if 3 trees is provided\&.
.SS "Single Tree Merge"
.sp
If only 1 tree is specified, \fIgit read\-tree\fR operates as if tha user did not specify \-m, except dat if tha original gangsta index has a entry fo' a given pathname, n' tha contentz of tha path match wit tha tree bein read, tha stat info from tha index is used\&. (In other lyrics, tha index\(cqs stat()s take precedence over tha merged tree\(cqs)\&.
.sp
That means dat if you do a git read\-tree \-m <newtree> followed by a git checkout\-index \-f \-u \-a, tha \fIgit checkout\-index\fR only checks up tha shiznit dat straight-up chizzled\&.
.sp
This is used ta avoid unnecessary false hits when \fIgit diff\-files\fR is run afta \fIgit read\-tree\fR\&.
.SS "Two Tree Merge"
.sp
Typically, dis is invoked as git read\-tree \-m $H $M, where $H is tha head commit of tha current repository, n' $M is tha head of a gangbangin' foreign tree, which is simply ahead of $H (i\&.e\&. we is up in a gangbangin' fast\-forward thang)\&.
.sp
When two trees is specified, tha user is spittin some lyrics ta \fIgit read\-tree\fR tha following:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Da current index n' work tree is derived from $H yo, but tha user may have local chizzlez up in dem since $H\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Da user wants ta fast\-forward ta $M\&.
.RE
.sp
In dis case, tha git read\-tree \-m $H $M command make shizzle dat no local chizzle is lost as tha result of dis "merge"\& yo. Here is tha "carry forward" rules, where "I" denotes tha index, "clean" means dat index n' work tree coincide, n' "exists"/"nothing" refer ta tha presence of a path up in tha specified commit:
.sp
.if n \{\
.RS 4
.\}
.nf
   I                   H        M        Result
  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
0  not a god damn thang             not a god damn thang  not a god damn thang  (does not happen)
1  not a god damn thang             not a god damn thang  exists   use M
2  not a god damn thang             exists   not a god damn thang  remove path from index
3  not a god damn thang             exists   exists,  use M if "initial checkout",
                                H == M   keep index otherwise
                                exists,  fail
                                H != M
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
   clean I==H  I==M
  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
4  yeaaaa   N/A   N/A     not a god damn thang  not a god damn thang  keep index
5  no    N/A   N/A     not a god damn thang  not a god damn thang  keep index
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
6  yeaaaa   N/A   yeaaaa     not a god damn thang  exists   keep index
7  no    N/A   yeaaaa     not a god damn thang  exists   keep index
8  yeaaaa   N/A   no      not a god damn thang  exists   fail
9  no    N/A   no      not a god damn thang  exists   fail
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
10 yeaaaa   yeaaaa   N/A     exists   not a god damn thang  remove path from index
11 no    yeaaaa   N/A     exists   not a god damn thang  fail
12 yeaaaa   no    N/A     exists   not a god damn thang  fail
13 no    no    N/A     exists   not a god damn thang  fail
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
   clean (H==M)
  \-\-\-\-\-\-
14 yeaaaa                 exists   exists   keep index
15 no                  exists   exists   keep index
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
   clean I==H  I==M (H!=M)
  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
16 yeaaaa   no    no      exists   exists   fail
17 no    no    no      exists   exists   fail
18 yeaaaa   no    yeaaaa     exists   exists   keep index
19 no    no    yeaaaa     exists   exists   keep index
20 yeaaaa   yeaaaa   no      exists   exists   use M
21 no    yeaaaa   no      exists   exists   fail
.fi
.if n \{\
.RE
.\}
.sp
In all "keep index" cases, tha index entry stays as up in tha original gangsta index file\&. If tha entry aint up ta date, \fIgit read\-tree\fR keeps tha copy up in tha work tree intact when operatin under tha \-u flag\&.
.sp
When dis form of \fIgit read\-tree\fR returns successfully, you can peep which of tha "local chizzles" dat you made was carried forward by hustlin git diff\-index \-\-cached $M\&. Note dat dis do not necessarily match what tha fuck git diff\-index \-\-cached $H would have produced before such a two tree merge\&. This is cuz of cases 18 n' 19 \-\-\- if you already had tha chizzlez up in $M (e\&.g\&. maybe you picked it up via e\-mail up in a patch form), git diff\-index \-\-cached $H would have holla'd at you bout tha chizzle before dis merge yo, but it would not show up in git diff\-index \-\-cached $M output afta tha two\-tree merge\&.
.sp
Case 3 is slightly tricky n' needz explanation\&. Da result from dis rule logically should be ta remove tha path if tha user staged tha removal of tha path n' then switchin ta a freshly smoked up branch\&. That however will prevent tha initial checkout from happening, so tha rule is modified ta use M (new tree) only when tha content of tha index is empty\&. Otherwise tha removal of tha path is kept as long as $H n' $M is tha same\&.
.SS "3\-Way Merge"
.sp
Each "index" entry has two bits worth of "stage" state\&. stage 0 is tha aiiight one, n' is tha only one you\(cqd peep up in any kind of aiiight use\&.
.sp
But fuck dat shiznit yo, tha word on tha street is dat when you do \fIgit read\-tree\fR wit three trees, tha "stage" starts up at 1\&.
.sp
This means dat you can do
.sp
.if n \{\
.RS 4
.\}
.nf
$ git read\-tree \-m <tree1> <tree2> <tree3>
.fi
.if n \{\
.RE
.\}
.sp
.sp
and yo big-ass booty is ghon end up wit a index wit all of tha <tree1> entries up in "stage1", all of tha <tree2> entries up in "stage2" n' all of tha <tree3> entries up in "stage3"\&. When struttin a merge of another branch tha fuck into tha current branch, we use tha common ancestor tree as <tree1>, tha current branch head as <tree2>, n' tha other branch head as <tree3>\&.
.sp
Furthermore, \fIgit read\-tree\fR has special\-case logic dat says: if you peep a gangbangin' file dat matches up in all respects up in tha followin states, it "collapses" back ta "stage0":
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
stage 2 n' 3 is tha same; take one or tha other (it make no difference \- tha same work has been done on our branch up in stage 2 n' they branch up in stage 3)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
stage 1 n' stage 2 is tha same n' stage 3 is different; take stage 3 (our branch up in stage 2 did not do anythang since tha ancestor up in stage 1 while they branch up in stage 3 hit dat shiznit on it)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
stage 1 n' stage 3 is tha same n' stage 2 is different take stage 2 (we did suttin' while they did nothing)
.RE
.sp
Da \fIgit write\-tree\fR command refuses ta write a nonsensical tree, n' it will diss bout unmerged entries if it sees a single entry dat aint stage 0\&.
.sp
OK, dis all soundz like a cold-ass lil collection of straight-up nonsensical rulez yo, but it\(cqs straight-up exactly what tha fuck you want up in order ta do a gangbangin' fast merge\&. Da different stages represent tha "result tree" (stage 0, aka "merged"), tha original gangsta tree (stage 1, aka "orig"), n' tha two trees yo ass is tryin ta merge (stage 2 n' 3 respectively)\&.
.sp
Da order of stages 1, 2 n' 3 (hence tha order of three <tree\-ish> command line arguments) is dope when you start a 3\-way merge wit a index file dat be already populated\& yo. Here be a outline of how tha fuck tha algorithm works:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
if a gangbangin' file exists up in identical format up in all three trees, it will automatically collapse ta "merged" state by
\fIgit read\-tree\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a file dat has
\fIany\fR
difference what\-so\-ever up in tha three trees will stay as separate entries up in tha index\&. It\(cqs up ta "porcelain policy" ta determine how tha fuck ta remove tha non\-0 stages, n' bang a merged version\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
the index file saves n' restores wit all dis shiznit, so you can merge thangs incrementally yo, but as long as it has entries up in stages 1/2/3 (i\&.e\&., "unmerged entries") you can\(cqt write tha result\&. Right back up in yo muthafuckin ass. So now tha merge algorithm endz up bein straight-up simple:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
you strutt tha index up in order, n' ignore all entriez of stage 0, since they\(cqve already been done\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
if you find a "stage1" yo, but no matchin "stage2" or "stage3", you know it\(cqs been removed from both trees (it only existed up in tha original gangsta tree), n' you remove dat entry\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
if you find a matchin "stage2" n' "stage3" tree, you remove one of them, n' turn tha other tha fuck into a "stage0" entry\&. Remove any matchin "stage1" entry if it exists too\&. \&.\&. all tha aiiight trivial rulez \&.\&.
.RE
.RE
.sp
Yo ass would normally use \fIgit merge\-index\fR wit supplied \fIgit merge\-one\-file\fR ta do dis last step\&. Da script thugged-out shiznit tha filez up in tha hustlin tree as it merges each path n' all up in tha end of a successful merge\&.
.sp
When you start a 3\-way merge wit a index file dat be already populated, it be assumed dat it represents tha state of tha filez up in yo' work tree, n' you can even have filez wit chizzlez unrecorded up in tha index file\&. Well shiiiit, it is further assumed dat dis state is "derived" from tha stage 2 tree\&. Da 3\-way merge refuses ta run if it findz a entry up in tha original gangsta index file dat do not match stage 2\&.
.sp
This is done ta prevent you from losin yo' work\-in\-progress chizzles, n' mixin yo' random chizzlez up in a unrelated merge commit\&. To illustrate, suppose you start from what tha fuck has been committed last ta yo' repository:
.sp
.if n \{\
.RS 4
.\}
.nf
$ JC=`git rev\-parse \-\-verify "HEAD^0"`
$ git checkout\-index \-f \-u \-a $JC
.fi
.if n \{\
.RE
.\}
.sp
.sp
Yo ass do random edits, without hustlin \fIgit update\-index\fR\& fo' realz. And then you notice dat tha tip of yo' "upstream" tree has advanced since you pulled from him:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git fetch git://\&.\&.\&.\&. linus
$ LT=`git rev\-parse FETCH_HEAD`
.fi
.if n \{\
.RE
.\}
.sp
.sp
Yo crazy-ass work tree is still based on yo' HEAD ($JC) yo, but you have some edits since\&. Three\-way merge make shizzle dat you aint added or modified index entries since $JC, n' if you haven\(cqt, then do tha right thang\&. Right back up in yo muthafuckin ass. So wit tha followin sequence:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git read\-tree \-m \-u `git merge\-base $JC $LT` $JC $LT
$ git merge\-index git\-merge\-one\-file \-a
$ echo "Merge wit Linus" | \e
  git commit\-tree `git write\-tree` \-p $JC \-p $LT
.fi
.if n \{\
.RE
.\}
.sp
.sp
what you would commit be a pure merge between $JC n' $LT without yo' work\-in\-progress chizzles, n' yo' work tree would be updated ta tha result of tha merge\&.
.sp
But fuck dat shiznit yo, tha word on tha street is dat if you have local chizzlez up in tha hustlin tree dat would be overwritten by dis merge, \fIgit read\-tree\fR will refuse ta run ta prevent yo' chizzlez from bein lost\&.
.sp
In other lyrics, there is no need ta worry bout what tha fuck exists only up in tha hustlin tree\&. When you have local chizzlez up in a part of tha project dat aint involved up in tha merge, yo' chizzlez do not interfere wit tha merge, n' is kept intact\&. When they \fBdo\fR interfere, tha merge do not even start (\fIgit read\-tree\fR bitches loudly n' fails without modifyin anything)\&. In such a cold-ass lil case, you can simply continue bustin what tha fuck you was up in tha middle of bustin, n' when yo' hustlin tree is locked n loaded (i\&.e\&. you have finished yo' work\-in\-progress), attempt tha merge again\&.
.SH "SPARSE CHECKOUT"
.sp
"Sparse checkout" allows populatin tha hustlin directory sparsely\&. Well shiiiit, it uses tha skip\-worktree bit (see \fBgit-update-index\fR(1)) ta tell Git whether a gangbangin' file up in tha hustlin directory is worth lookin at\&.
.sp
\fIgit read\-tree\fR n' other merge\-based commandz (\fIgit merge\fR, \fIgit checkout\fR\&...) can help maintainin tha skip\-worktree bitmap n' hustlin directory update\&. $GIT_DIR/info/sparse\-checkout is used ta define tha skip\-worktree reference bitmap\&. When \fIgit read\-tree\fR need ta update tha hustlin directory, it resets tha skip\-worktree bit up in tha index based on dis file, which uses tha same ol' dirty syntax as \&.gitignore files\&. If a entry matches a pattern up in dis file, skip\-worktree aint gonna be set on dat entry\&. Otherwise, skip\-worktree is ghon be set\&.
.sp
Then it compares tha freshly smoked up skip\-worktree value wit tha previous one\&. If skip\-worktree turns from set ta unset, it will add tha correspondin file back\&. If it turns from unset ta set, dat file is ghon be removed\&.
.sp
While $GIT_DIR/info/sparse\-checkout is probably used ta specify what tha fuck filez is in, you can also specify what tha fuck filez is \fInot\fR in, rockin negate patterns\&. For example, ta remove tha file unwanted:
.sp
.if n \{\
.RS 4
.\}
.nf
/*
!unwanted
.fi
.if n \{\
.RE
.\}
.sp
.sp
Another tricky thang is straight-up repopulatin tha hustlin directory when you no longer want sparse checkout\&. Yo ass cannot just disable "sparse checkout" cuz skip\-worktree bits is still up in tha index n' yo' hustlin directory is still sparsely populated\&. Yo ass should re\-populate tha hustlin directory wit tha $GIT_DIR/info/sparse\-checkout file content as bigs up:
.sp
.if n \{\
.RS 4
.\}
.nf
/*
.fi
.if n \{\
.RE
.\}
.sp
.sp
Then you can disable sparse checkout\&. Right back up in yo muthafuckin ass. Sparse checkout support up in \fIgit read\-tree\fR n' similar commandz is disabled by default\&. Yo ass need ta turn core\&.sparseCheckout on up in order ta have sparse checkout support\&.
.SH "SEE ALSO"
.sp
\fBgit-write-tree\fR(1); \fBgit-ls-files\fR(1); \fBgitignore\fR(5)
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
