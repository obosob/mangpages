.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "VERIFY 1"
.TH VERIFY 1 "2015-01-13" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
verify \- Utilitizzle ta verify certificates.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBopenssl\fR \fBverify\fR
[\fB\-CApath directory\fR]
[\fB\-CAfile file\fR]
[\fB\-trusted_first\fR]
[\fB\-purpose purpose\fR]
[\fB\-policy arg\fR]
[\fB\-ignore_critical\fR]
[\fB\-crl_check\fR]
[\fB\-crl_check_all\fR]
[\fB\-policy_check\fR]
[\fB\-explicit_policy\fR]
[\fB\-inhibit_any\fR]
[\fB\-inhibit_map\fR]
[\fB\-x509_strict\fR]
[\fB\-extended_crl\fR]
[\fB\-use_deltas\fR]
[\fB\-policy_print\fR]
[\fB\-untrusted file\fR]
[\fB\-help\fR]
[\fB\-issuer_checks\fR]
[\fB\-attime timestamp\fR]
[\fB\-verbose\fR]
[\fB\-\fR]
[certificates]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \fBverify\fR command verifies certificate chains.
.SH "COMMAND OPTIONS"
.IX Header "COMMAND OPTIONS"
.IP "\fB\-CApath directory\fR" 4
.IX Item "-CApath directory"
A directory of trusted certificates. Da certificates should have names
of tha form: hash.0 or have symbolic links ta dem of this
form (\*(L"hash\*(R" is tha hashed certificate subject name: peep tha \fB\-hash\fR option
of tha \fBx509\fR utility). Under Unix tha \fBc_rehash\fR script will automatically
create symbolic links ta a gangbangin' finger-lickin' directory of certificates.
.IP "\fB\-CAfile file\fR" 4
.IX Item "-CAfile file"
A file of trusted certificates. Da file should contain multiple certificates
in \s-1PEM\s0 format concatenated together.
.IP "\fB\-untrusted file\fR" 4
.IX Item "-untrusted file"
A file of untrusted certificates. Da file should contain multiple certificates
in \s-1PEM\s0 format concatenated together.
.IP "\fB\-trusted_first\fR" 4
.IX Item "-trusted_first"
Use certificates up in \s-1CA\s0 file or \s-1CA\s0 directory before tha certificates up in tha untrusted
file when buildin tha trust chain ta verify certificates.
This is mainly useful up in environments wit Bridge \s-1CA\s0 or Cross-Certified CAs.
.IP "\fB\-purpose purpose\fR" 4
.IX Item "-purpose purpose"
Da intended use fo' tha certificate. If dis option aint specified,
\&\fBverify\fR aint gonna consider certificate purpose durin chain verification.
Currently accepted uses is \fBsslclient\fR, \fBsslserver\fR, \fBnssslserver\fR,
\&\fBsmimesign\fR, \fBsmimeencrypt\fR. Right back up in yo muthafuckin ass. See tha \fB\s-1VERIFY OPERATION\s0\fR section fo' more
information.
.IP "\fB\-help\fR" 4
.IX Item "-help"
Print up a usage message.
.IP "\fB\-verbose\fR" 4
.IX Item "-verbose"
Print extra shiznit bout tha operations bein performed.
.IP "\fB\-issuer_checks\fR" 4
.IX Item "-issuer_checks"
Print up diagnostics relatin ta searches fo' tha issuer certificate of the
current certificate. This shows why each muthafucka issuer certificate was
rejected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da presence of rejection lyrics do not itself imply that
anythang is wrong; durin tha aiiight verification process, several
rejections may take place.
.IP "\fB\-attime timestamp\fR" 4
.IX Item "-attime timestamp"
Perform validation checks rockin tha time specified by \fBtimestamp\fR n' not
the current system time. \fBtimestamp\fR is tha number of secondz since
01.01.1970 (\s-1UNIX\s0 time).
.IP "\fB\-policy arg\fR" 4
.IX Item "-policy arg"
Enable policy processin n' add \fBarg\fR ta tha user-initial-policy-set (see
\&\s-1RFC5280\s0). Da policy \fBarg\fR can be a object name a \s-1OID\s0 up in numeric form.
This argument can step tha fuck up mo' than once.
.IP "\fB\-policy_check\fR" 4
.IX Item "-policy_check"
Enablez certificate policy processing.
.IP "\fB\-explicit_policy\fR" 4
.IX Item "-explicit_policy"
Set policy variable require-explicit-policy (see \s-1RFC5280\s0).
.IP "\fB\-inhibit_any\fR" 4
.IX Item "-inhibit_any"
Set policy variable inhibit-any-policy (see \s-1RFC5280\s0).
.IP "\fB\-inhibit_map\fR" 4
.IX Item "-inhibit_map"
Set policy variable inhibit-policy-mappin (see \s-1RFC5280\s0).
.IP "\fB\-policy_print\fR" 4
.IX Item "-policy_print"
Print up diagnostics related ta policy processing.
.IP "\fB\-crl_check\fR" 4
.IX Item "-crl_check"
Checks end entitizzle certificate validitizzle by attemptin ta look up a valid \s-1CRL.\s0
If a valid \s-1CRL\s0 cannot be found a error occurs.
.IP "\fB\-crl_check_all\fR" 4
.IX Item "-crl_check_all"
Checks tha validitizzle of \fBall\fR certificates up in tha chain by attempting
to look up valid CRLs.
.IP "\fB\-ignore_critical\fR" 4
.IX Item "-ignore_critical"
Normally if a unhandled critical extension is present which is not
supported by OpenSSL tha certificate is rejected (as required by \s-1RFC5280\s0).
If dis option is set critical extensions is ignored.
.IP "\fB\-x509_strict\fR" 4
.IX Item "-x509_strict"
For strict X.509 compliance, disable non-compliant workaroundz fo' broken
certificates.
.IP "\fB\-extended_crl\fR" 4
.IX Item "-extended_crl"
Enable extended \s-1CRL\s0 features like fuckin indirect CRLs n' alternate \s-1CRL\s0
signin keys.
.IP "\fB\-use_deltas\fR" 4
.IX Item "-use_deltas"
Enable support fo' delta CRLs.
.IP "\fB\-check_ss_sig\fR" 4
.IX Item "-check_ss_sig"
Verify tha signature on tha self-signed root \s-1CA.\s0 This is disabled by default
because it don't add any security.
.IP "\fB\-\fR" 4
.IX Item "-"
Indicates tha last option. I aint talkin' bout chicken n' gravy biatch fo' realz. All arguments followin dis is assumed ta be
certificate files. This is useful if tha straight-up original gangsta certificate filename begins
with a \fB\-\fR.
.IP "\fBcertificates\fR" 4
.IX Item "certificates"
One or mo' certificates ta verify. If no certificates is given, \fBverify\fR
will attempt ta read a cold-ass lil certificate from standard input. Certificates must be
in \s-1PEM\s0 format.
.SH "VERIFY OPERATION"
.IX Header "VERIFY OPERATION"
Da \fBverify\fR program uses tha same ol' dirty functions as tha internal \s-1SSL\s0 n' S/MIME
verification, therefore dis description applies ta these verify operations
too.
.PP
There is one crucial difference between tha verify operations performed
by tha \fBverify\fR program: wherever possible a attempt is made ta continue
afta a error whereas normally tha verify operation would halt on the
first error. Shiiit, dis aint no joke. This allows all tha problems wit a cold-ass lil certificate chain ta be
determined.
.PP
Da verify operation consistz of a fuckin shitload of separate steps.
.PP
Firstly a cold-ass lil certificate chain is built up startin from tha supplied certificate
and endin up in tha root \s-1CA.\s0 It be a error if tha whole chain cannot be built
up. Da chain is built up by lookin up tha issuers certificate of tha current
certificate. If a cold-ass lil certificate is found which is its own issuer it be assumed 
to be tha root \s-1CA.\s0
.PP
Da process of 'lookin up tha issuers certificate' itself involves a number
of steps. In versionz of OpenSSL before 0.9.5a tha straight-up original gangsta certificate whose
subject name matched tha issuer of tha current certificate was assumed ta be
the issuers certificate. In OpenSSL 0.9.6 n' lata all certificates
whose subject name matches tha issuer name of tha current certificate is 
subject ta further tests, n' you can put dat on yo' toast. Da relevant authoritizzle key identifier components
of tha current certificate (if present) must match tha subject key identifier
(if present) n' issuer n' serial number of tha muthafucka issuer, up in addition
the keyUsage extension of tha muthafucka issuer (if present) must permit
certificate signing.
.PP
Da lookup first looks up in tha list of untrusted certificates n' if no match
is found tha remainin lookups is from tha trusted certificates. Da root \s-1CA\s0
is always looked up in tha trusted certificate list: if tha certificate to
verify be a root certificate then a exact match must be found up in tha trusted
list.
.PP
Da second operation is ta check every last muthafuckin untrusted certificatez extensions for
consistency wit tha supplied purpose. If tha \fB\-purpose\fR option aint included
then no checks is done. Da supplied or \*(L"leaf\*(R" certificate must have extensions
compatible wit tha supplied purpose n' all other certificates must also be valid
\&\s-1CA\s0 certificates. Da precise extensions required is busted lyrics bout up in mo' detail in
the \fB\s-1CERTIFICATE EXTENSIONS\s0\fR section of tha \fBx509\fR utility.
.PP
Da third operation is ta check tha trust settings on tha root \s-1CA.\s0 Da root
\&\s-1CA\s0 should be trusted fo' tha supplied purpose. For compatibilitizzle wit previous
versionz of SSLeay n' OpenSSL a cold-ass lil certificate wit no trust settings is considered
to be valid fo' all purposes.
.PP
Da final operation is ta check tha validitizzle of tha certificate chain. I aint talkin' bout chicken n' gravy biatch. Da validity
period is checked against tha current system time n' tha notBefore n' notAfter
dates up in tha certificate. Da certificate signatures is also checked at this
point.
.PP
If all operations complete successfully then certificate is considered valid. Y'all KNOW dat shit, muthafucka! If
any operation fails then tha certificate aint valid.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
When a verify operation fails tha output lyrics can be somewhat cryptic. The
general form of tha error message is:
.PP
.Vb 2
\& server.pem: /C=AU/ST=Queensland/O=CryptSoft Pty Ltd/CN=Test CA (1024 bit)
\& error 24 at 1 depth lookup:invalid CA certificate
.Ve
.PP
Da first line gotz nuff tha name of tha certificate bein verified followed by
the subject name of tha certificate. Da second line gotz nuff tha error number
and tha depth. Da depth is number of tha certificate bein verified when a
problem was detected startin wit zero fo' tha certificate bein verified itself
then 1 fo' tha \s-1CA\s0 dat signed tha certificate n' so on. I aint talkin' bout chicken n' gravy biatch. Finally a text version
of tha error number is presented.
.PP
An exhaustizzle list of tha error codes n' lyrics is shown below, dis also
includes tha name of tha error code as defined up in tha header file x509_vfy.h
Some of tha error codes is defined but never returned: these is busted lyrics about
as \*(L"unused\*(R".
.IP "\fB0 X509_V_OK: ok\fR" 4
.IX Item "0 X509_V_OK: ok"
the operation was successful.
.IP "\fB2 X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT: unable ta git issuer certificate\fR" 4
.IX Item "2 X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT: unable ta git issuer certificate"
the issuer certificate of a looked up certificate could not be found. Y'all KNOW dat shit, muthafucka! This
normally means tha list of trusted certificates aint complete.
.IP "\fB3 X509_V_ERR_UNABLE_TO_GET_CRL: unable ta git certificate \s-1CRL\s0\fR" 4
.IX Item "3 X509_V_ERR_UNABLE_TO_GET_CRL: unable ta git certificate CRL"
the \s-1CRL\s0 of a cold-ass lil certificate could not be found.
.IP "\fB4 X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE: unable ta decrypt certificatez signature\fR" 4
.IX Item "4 X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE: unable ta decrypt certificatez signature"
the certificate signature could not be decrypted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This means dat tha actual signature value
could not be determined rather than it not matchin tha expected value, dis is only
meaningful fo' \s-1RSA\s0 keys.
.IP "\fB5 X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE: unable ta decrypt \s-1CRL\s0z signature\fR" 4
.IX Item "5 X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE: unable ta decrypt CRLz signature"
the \s-1CRL\s0 signature could not be decrypted: dis means dat tha actual signature value
could not be determined rather than it not matchin tha expected value. Unused.
.IP "\fB6 X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY: unable ta decode issuer hood key\fR" 4
.IX Item "6 X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY: unable ta decode issuer hood key"
the hood key up in tha certificate SubjectPublicKeyInfo could not be read.
.IP "\fB7 X509_V_ERR_CERT_SIGNATURE_FAILURE: certificate signature failure\fR" 4
.IX Item "7 X509_V_ERR_CERT_SIGNATURE_FAILURE: certificate signature failure"
the signature of tha certificate is invalid.
.IP "\fB8 X509_V_ERR_CRL_SIGNATURE_FAILURE: \s-1CRL\s0 signature failure\fR" 4
.IX Item "8 X509_V_ERR_CRL_SIGNATURE_FAILURE: CRL signature failure"
the signature of tha certificate is invalid.
.IP "\fB9 X509_V_ERR_CERT_NOT_YET_VALID: certificate aint yet valid\fR" 4
.IX Item "9 X509_V_ERR_CERT_NOT_YET_VALID: certificate aint yet valid"
the certificate aint yet valid: tha notBefore date be afta tha current time.
.IP "\fB10 X509_V_ERR_CERT_HAS_EXPIRED: certificate has expired\fR" 4
.IX Item "10 X509_V_ERR_CERT_HAS_EXPIRED: certificate has expired"
the certificate has expired: dat is tha notAfta date is before tha current time.
.IP "\fB11 X509_V_ERR_CRL_NOT_YET_VALID: \s-1CRL\s0 aint yet valid\fR" 4
.IX Item "11 X509_V_ERR_CRL_NOT_YET_VALID: CRL aint yet valid"
the \s-1CRL\s0 aint yet valid.
.IP "\fB12 X509_V_ERR_CRL_HAS_EXPIRED: \s-1CRL\s0 has expired\fR" 4
.IX Item "12 X509_V_ERR_CRL_HAS_EXPIRED: CRL has expired"
the \s-1CRL\s0 has expired.
.IP "\fB13 X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD: format error up in certificatez notBefore field\fR" 4
.IX Item "13 X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD: format error up in certificatez notBefore field"
the certificate notBefore field gotz nuff a invalid time.
.IP "\fB14 X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: format error up in certificatez notAfta field\fR" 4
.IX Item "14 X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: format error up in certificatez notAfta field"
the certificate notAfta field gotz nuff a invalid time.
.IP "\fB15 X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD: format error up in \s-1CRL\s0z lastUpdate field\fR" 4
.IX Item "15 X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD: format error up in CRLz lastUpdate field"
the \s-1CRL\s0 lastUpdate field gotz nuff a invalid time.
.IP "\fB16 X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD: format error up in \s-1CRL\s0z nextUpdate field\fR" 4
.IX Item "16 X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD: format error up in CRLz nextUpdate field"
the \s-1CRL\s0 nextUpdate field gotz nuff a invalid time.
.IP "\fB17 X509_V_ERR_OUT_OF_MEM: outta memory\fR" 4
.IX Item "17 X509_V_ERR_OUT_OF_MEM: outta memory"
an error occurred tryin ta allocate memory. This should never happen.
.IP "\fB18 X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: self signed certificate\fR" 4
.IX Item "18 X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: self signed certificate"
the passed certificate is self signed n' tha same certificate cannot be found up in tha list of
trusted certificates.
.IP "\fB19 X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: self signed certificate up in certificate chain\fR" 4
.IX Item "19 X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: self signed certificate up in certificate chain"
the certificate chain could be built up rockin tha untrusted certificates but tha root could not
be found locally.
.IP "\fB20 X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: unable ta git local issuer certificate\fR" 4
.IX Item "20 X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: unable ta git local issuer certificate"
the issuer certificate could not be found: dis occurs if tha issuer
certificate of a untrusted certificate cannot be found.
.IP "\fB21 X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: unable ta verify tha straight-up original gangsta certificate\fR" 4
.IX Item "21 X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: unable ta verify tha straight-up original gangsta certificate"
no signatures could be verified cuz tha chain gotz nuff only one certificate n' it is not
self signed.
.IP "\fB22 X509_V_ERR_CERT_CHAIN_TOO_LONG: certificate chain too long\fR" 4
.IX Item "22 X509_V_ERR_CERT_CHAIN_TOO_LONG: certificate chain too long"
the certificate chain length is pimped outa than tha supplied maximum depth. Unused.
.IP "\fB23 X509_V_ERR_CERT_REVOKED: certificate revoked\fR" 4
.IX Item "23 X509_V_ERR_CERT_REVOKED: certificate revoked"
the certificate has been revoked.
.IP "\fB24 X509_V_ERR_INVALID_CA: invalid \s-1CA\s0 certificate\fR" 4
.IX Item "24 X509_V_ERR_INVALID_CA: invalid CA certificate"
a \s-1CA\s0 certificate is invalid. Y'all KNOW dat shit, muthafucka! Either it aint a \s-1CA\s0 or its extensions is not consistent
with tha supplied purpose.
.IP "\fB25 X509_V_ERR_PATH_LENGTH_EXCEEDED: path length constraint exceeded\fR" 4
.IX Item "25 X509_V_ERR_PATH_LENGTH_EXCEEDED: path length constraint exceeded"
the basicConstraints pathlength parameta has been exceeded.
.IP "\fB26 X509_V_ERR_INVALID_PURPOSE: unsupported certificate purpose\fR" 4
.IX Item "26 X509_V_ERR_INVALID_PURPOSE: unsupported certificate purpose"
the supplied certificate cannot be used fo' tha specified purpose.
.IP "\fB27 X509_V_ERR_CERT_UNTRUSTED: certificate not trusted\fR" 4
.IX Item "27 X509_V_ERR_CERT_UNTRUSTED: certificate not trusted"
the root \s-1CA\s0 aint marked as trusted fo' tha specified purpose.
.IP "\fB28 X509_V_ERR_CERT_REJECTED: certificate rejected\fR" 4
.IX Item "28 X509_V_ERR_CERT_REJECTED: certificate rejected"
the root \s-1CA\s0 is marked ta reject tha specified purpose.
.IP "\fB29 X509_V_ERR_SUBJECT_ISSUER_MISMATCH: subject issuer mismatch\fR" 4
.IX Item "29 X509_V_ERR_SUBJECT_ISSUER_MISMATCH: subject issuer mismatch"
the current muthafucka issuer certificate was rejected cuz its subject name
did not match tha issuer name of tha current certificate. Only displayed when
the \fB\-issuer_checks\fR option is set.
.IP "\fB30 X509_V_ERR_AKID_SKID_MISMATCH: authoritizzle n' subject key identifier mismatch\fR" 4
.IX Item "30 X509_V_ERR_AKID_SKID_MISMATCH: authoritizzle n' subject key identifier mismatch"
the current muthafucka issuer certificate was rejected cuz its subject key
identifier was present n' did not match tha authoritizzle key identifier current
certificate. Only displayed when tha \fB\-issuer_checks\fR option is set.
.IP "\fB31 X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH: authoritizzle n' issuer serial number mismatch\fR" 4
.IX Item "31 X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH: authoritizzle n' issuer serial number mismatch"
the current muthafucka issuer certificate was rejected cuz its issuer name
and serial number was present n' did not match tha authoritizzle key identifier
of tha current certificate. Only displayed when tha \fB\-issuer_checks\fR option is set.
.IP "\fB32 X509_V_ERR_KEYUSAGE_NO_CERTSIGN:key usage do not include certificate signing\fR" 4
.IX Item "32 X509_V_ERR_KEYUSAGE_NO_CERTSIGN:key usage do not include certificate signing"
the current muthafucka issuer certificate was rejected cuz its keyUsage extension
does not permit certificate signing.
.IP "\fB50 X509_V_ERR_APPLICATION_VERIFICATION: application verification failure\fR" 4
.IX Item "50 X509_V_ERR_APPLICATION_VERIFICATION: application verification failure"
an application specific error. Shiiit, dis aint no joke. Unused.
.SH "BUGS"
.IX Header "BUGS"
Although tha issuer checks is a cold-ass lil considerably improvement over tha oldschool technique they still
suffer from limitations up in tha underlyin X509_LOOKUP \s-1API.\s0 One consequence of dis is that
trusted certificates wit matchin subject name must either step tha fuck up in a gangbangin' file (as specified by the
\&\fB\-CAfile\fR option) or a gangbangin' finger-lickin' directory (as specified by \fB\-CApath\fR. If they occur up in both then only
the certificates up in tha file is ghon be recognised.
.PP
Previous versionz of OpenSSL assume certificates wit matchin subject name is identical and
mishandled em.
.PP
Previous versionz of dis documentation swapped tha meanin of the
\&\fBX509_V_ERR_UNABLE_TO_GET_ISSUER_CERT\fR and
\&\fB20 X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY\fR error codes.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIx509\fR\|(1)
