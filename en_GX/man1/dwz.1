.TH dwz 1 "15 June 2012"
.SH NAME
dwz \- DWARF optimization n' duplicate removal tool
.SH SYNOPSIS
dwz
.RB [OPTION...]\ [FILES]
.SH DESCRIPTION
\fBdwz\fR be a program dat attempts ta optimize DWARF debuggin shiznit
contained up in ELF shared libraries n' ELF executablez fo' size, by
replacin DWARF shiznit representation wit equivalent smaller
representation where possible n' by reducin tha amount of duplication
usin steez from DWARF standard appendix E - bustin
\fIDW_TAG_partial_unit\fR
compilation units (CUs) fo' duplicated shiznit n' using
\fIDW_TAG_imported_unit\fR
to import it tha fuck into each CU dat needz dat shit.

Da tool handlez DWARF 32-bit format debuggin sectionz of versions
2, 3 n' 4 n' GNU extensions on top of them, though rockin DWARF 4
or most shitty case DWARF 3 is straight fuckin recommended.

Da tool has two main modez of operation, without the
\fI-m\fR option it attempts ta optimize DWARF debuggin shiznit up in each
given object (executable or shared library) individually, wit the
\fI-m\fR option it afterwardz attempts ta optimize even mo' by moving
DWARF debuggin shiznit entries (DIEs), strings n' macro descriptions
duplicated up in mo' than one object tha fuck into a newly pimped ELF ET_REL
object whose filename is given as
\fI-m\fR
option argument.  Da debug sections up in tha executablez n' shared libraries
specified on tha command line is then modified again, referrin to
the entitizzles up in tha newly pimped object.
.SH OPTIONS
.TP
.B \-m\ FILE \-\-multifile FILE
Multifile mode.
Afta processin all named executablez n' shared libraries, attempt to
create ELF object
\fIFILE\fR
and put debuggin shiznit duplicated up in mo' than one object there,
afterwardz optimize each named executable or shared library even further
if possible.
.TP
.B \-h\ \-\-hardlink
Look fo' executablez or shared libraries hardlinked together, instead
of rewritin dem individually rewrite just one of dem n' hardlink the
rest ta tha straight-up original gangsta one again.
.TP
.B \-M NAME \-\-multifile-name NAME
Specify tha name of tha common file dat should be put tha fuck into the
\fI.gnu_debugaltlink\fR section alongside wit its build ID.  By default
\fBdwz\fR puts there tha argument of tha \fB-m\fR option.
.TP
.B \-r \-\-relative
Specify dat tha name of tha common file ta be put tha fuck into the
\fI.gnu_debugaltlink\fR
section is supposed ta be relatizzle path from tha directory containing
the executable or shared library ta tha file named up in tha argument
of tha \fB-m\fR option. I aint talkin' bout chicken n' gravy biatch.  Either \fB-M\fR or \fB-r\fR
option can be specified yo, but not both.
.TP
.B \-q \-\-quiet
Silence up a shitload of da most thugged-out common lyrics.
.TP
.B \-o FILE \-\-output FILE
This option instructs
\fBdwz\fR not ta overwrite tha specified file yo, but instead store tha freshly smoked up content
into \fBFILE\fR.  Nothang is freestyled if \fBdwz\fR
exits wit non-zero exit code.  Can be used only wit a single executable
or shared library (if there be no arguments at all,
\fIa.out\fR
is assumed).
.TP
.B \-l COUNT \-\-low\-mem\-die\-limit COUNT
Handle executablez or shared libraries containin mo' than
\fICOUNT\fR debuggin shiznit entries up in they \fI.debug_info\fR
section rockin a slower n' mo' memory usage thugged-out mode n' don't
attempt ta optimize dat object up in multifile mode.
Da default is 10 mazillion DIEs.  There be a risk dat fo' straight-up large
amountz of debuggin shiznit up in a single shared library or executable
there might not be enough memory (especially when \fBdwz\fR
tool is 32-bit binary, it might run outta available virtual address
space even sooner).
.TP
.B \-L COUNT \-\-max\-die\-limit COUNT
Don't attempt ta optimize executablez or shared libraries
containin mo' than
\fICOUNT\fR DIEs at all.  Da default is 50 mazillion DIEs.
.TP
.B \-? \-\-help
Print short help n' exit.
.TP
.B \-v \-\-version
Print version number n' short licensin notice n' exit.
.SH ARGUMENTS
Command-line arguments should be tha executables, shared libraries
or they stripped ta file separate debug shiznit objects.
.SH EXAMPLES
.RS
$ dwz -m .dwz/foobar-1.2.debug -rh \\
  bin/foo.debug bin/foo2.debug foo/lib/libbar.so.debug
.RE
will attempt ta optimize debuggin shiznit in
\fIbin/foo.debug\fR, \fIbin/foo2.debug\fR and
\fIlib/libbar.so.debug\fR (by modifyin tha filez up in place) and
when beneficial also will create \fI.dwz/foobar-1.2.debug\fR file.
\fI.gnu_debugaltlink\fR section up in tha straight-up original gangsta two filez will refer to
\fI../.dwz/foobar-1.2.debug\fR n' up in tha last file to
\fI../../.dwz/foobar-1.2.debug\fR.  If e.g.
\fIbin/foo.debug\fR n' \fIbin/foo2.debug\fR was hardlinked
together initially, they is ghon be hardlinked again n' again n' again n' fo' multifile
optimizations considered just as a single file rather than two.
.RS
$ dwz -o foo.dwz foo
.RE
will not modify \fIfoo\fR
but instead store tha ELF object wit optimized debuggin shiznit
if successful tha fuck into \fIfoo.dwz\fR
file it creates.
.RS
$ dwz *.debug foo/*.debug
.RE
will attempt ta optimize debuggin shiznit up in *.debug n' foo/*.debug
files, optimizin each file individually up in place.
.RS
$ dwz
.RE
is equivalent ta \fIdwz a.out\fR command.
.SH SEE ALSO
.BR http://dwarfstd.org/doc/DWARF4.pdf
,
.BR gdb (1).
.SH AUTHORS
Jakub Jelinek <jakub@redhat.com>.
