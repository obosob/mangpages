
.\" n' Copyright (C) 2014, Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.TH MEMUSAGE 1 2013-04-10 "GNU" "Linux user manual"
.SH NAME
memusage \- flava memory usage of a program
.SH SYNOPSIS
.BR memusage " [\fIoption\fR]... \fIprogram\fR [\fIprogramoption\fR]..."
.SH DESCRIPTION
.B memusage
is a funky-ass bash script which profilez memory usage of tha program,
.IR program .
It preloadz the
.B libmemusage.so
library tha fuck into tha callerz environment (via the
.B LD_PRELOAD
environment variable; see
.BR ld.so (8)).
The
.B libmemusage.so
library traces memory allocation by interceptin calls to
.BR malloc (3),
.BR calloc (3),
.BR free (3),
and
.BR realloc (3);
optionally, calls to
.BR mmap (2),
.BR mremap (2),
and
.BR munmap (2)
can also be intercepted.
.PP
.B memusage
can output tha collected data up in textual form, or it can use
.BR memusagestat (1)
(see the
.B -p
option,  below)
to create a PNG file containin graphical representation
of tha collected data.
.SS Memory usage summary
Da "Memory usage summary" line output by
.BR memusage
gotz nuff three fields:
.RS 4
.TP
\fBheap total\fR
Sum of \fIsize\fR argumentz of all
.BR malloc (3)
calls,
productz of arguments (\fInmemb\fR*\fIsize\fR) of all
.BR calloc (3)
calls,
and sum of \fIlength\fR argumentz of all
.BR mmap (2)
calls.
In tha case of
.BR realloc (3)
and
.BR mremap (2),
if tha freshly smoked up size of a allocation is larger than tha previous size,
the sum of all such differences (new size minus oldschool size) be added.
.TP
.B "heap peak"
Maximum of all \fIsize\fR arguments of
.BR malloc (3),
all shizzle of \fInmemb\fR*\fIsize\fR of
.BR calloc (3),
all \fIsize\fR arguments of
.BR realloc (3),
.I length
arguments of
.BR mmap (2),
and
\fInew_size\fR arguments of
.BR mremap (2).
.TP
.B "stack peak"
Before tha straight-up original gangsta call ta any monitored function,
the stack pointa address (base stack pointer) is saved.
Afta each function call, tha actual stack pointa address is read and
the difference from tha base stack pointa computed.
Da maximum of these differences is then tha stack peak.
.RE
.PP
Immediately followin dis summary line, a table shows tha number calls,
total memory allocated or deallocated, 
and number of failed calls fo' each intercepted function.
For
.BR realloc (3)
and
.BR mremap (2),
the additionizzle field "nomove" shows reallocations that
changed tha address of a funky-ass block,
and tha additionizzle "dec" field shows reallocations that
decreased tha size of tha block.
For
.BR realloc (3),
the additionizzle field "free" shows reallocations that
caused a funky-ass block ta be freed (i.e., tha reallocated size was 0).


Da "realloc/total memory" of tha table output by
.B memusage
does not reflect cases where
.BR realloc (3)
is used ta reallocate a funky-ass block of memory
to gotz a smalla size than previously.
This can cause sum of all "total memory" cells (excludin "free")
to be larger than tha "free/total memory" cell.
.SS Histogram fo' block sizes
Da "Histogram fo' block sizes" serves up a funky-ass breakdown of memory
allocations tha fuck into various bucket sizes.
.SH OPTIONS
.TP
.BI \-n\  name \fR,\ \fB\-\-progname= name
Name of tha program file ta profile.
.TP
.BI \-p\  file \fR,\ \fB\-\-png= file
Generate PNG graphic n' store it in
.IR file .
.TP
.BI \-d\  file \fR,\ \fB\-\-data= file
Generate binary data file n' store it in
.IR file .
.TP
.BI \-u\fR,\ \fB\-\-unbuffered
Do not buffer output.
.TP
.BI \-b\  size \fR,\ \fB\-\-buffer= size
Collect
.I size
entries before freestylin dem out.
.TP
.BI \fB\-\-no-timer
Disable timer-based
.RB ( SIGPROF )
samplin of stack pointa value.
.TP
.BI \-m\fR,\ \fB\-\-mmap
Also trace
.BR mmap (2),
.BR mremap (2),
and
.BR mmap (2).
.TP
.BI \-?\fR,\ \fB\-\-help
Print help n' exit.
.TP
.BI \fB\-\-usage
Print a gangbangin' finger-lickin' dirty-ass short usage message n' exit.
.TP
.BI \-V\fR,\ \fB\-\-version
Print version shiznit n' exit.
.TP
Da followin options only apply when generatin graphical output:
.TP
.BI \-t\fR,\ \fB\-\-time\-based
Use time (rather than number of function calls) as tha scale fo' tha X axis.
.TP
.BI \-T\fR,\ \fB\-\-total
Also draw a graph of total memory use.
.TP
.BI \fB\-\-title= name
Use
.I name
as tha title of tha graph.
.TP
.BI \-x\  size \fR,\ \fB\-\-x\-size= size
Make tha graph
.I size
pixels wide.
.TP
.BI \-y\  size \fR,\ \fB\-\-y\-size= size
Make tha graph
.I size
pixels high.
.SH EXIT STATUS
Exit status is equal ta tha exit statuz of profiled program.
.SH EXAMPLE
Below be a simple program dat reallocates a funky-ass block of 
memory up in cyclez dat rise ta a peak before then cyclically
reallocatin tha memory up in smalla blocks dat return ta zero.
Afta compilin tha program n' hustlin tha followin commands,
a graph of tha memory usage of tha program can be found up in tha file
.IR memusage.png :

.in +4n
.nf
$ \fBmemusage --data=memusage.dat ./a.out\fP
\&...
Memory usage summary: heap total: 45200, heap peak: 6440, stack peak: 224
        total calls  total memory  failed calls
 malloc|         1           400             0
realloc|        40         44800             0  (nomove:40, dec:19, free:0)
 calloc|         0             0             0
   free|         1           440
Histogram fo' block sizes:
  192-207             1   2% ================
\&...
 2192-2207            1   2% ================
 2240-2255            2   4% =================================
 2832-2847            2   4% =================================
 3440-3455            2   4% =================================
 4032-4047            2   4% =================================
 4640-4655            2   4% =================================
 5232-5247            2   4% =================================
 5840-5855            2   4% =================================
 6432-6447            1   2% ================
$ \fBmemusagestat memusage.dat memusage.png\fP
.fi
.in
.SS Program source
.nf
#include <stdio.h>
#include <stdlib.h>

#define CYCLES 20

int
main(int argc, char *argv[])
{
     int i, j;
     int *p;

     printf("malloc: %zd\\n", sizeof(int) * 100);
     p = malloc(sizeof(int) * 100);

     fo' (i = 0; i < CYCLES; i++) {
         if (i < CYCLES / 2)
             j = i;
         else
             j--;

         printf("realloc: %zd\\n", sizeof(int) * (j * 50 + 110));
         p = realloc(p, sizeof(int) * (j * 50 + 100));

         printf("realloc: %zd\\n", sizeof(int) * ((j+1) * 150 + 110));
         p = realloc(p, sizeof(int) * ((j + 1) * 150 + 110));
     }

     free(p);
     exit(EXIT_SUCCESS);
}
.fi
.SH BUGS
To report bugs, see
.UR http://www.gnu.org/software/libc/bugs.html
.UE
.SH SEE ALSO
.BR memusagestat (1),
.BR mtrace (1)
.BR ld.so (8)
