.TH GS 1 "26 March 2014" 9.14 Ghostscript \" -*- nroff -*-
.SH NAME
gs \- Ghostscript (PostScript n' PDF language interpreta n' peepshower)
.SH SYNOPSIS
\fBgs\fR [ \fIoptions\fR ] [ \fIfiles\fR ] ... \fB(Unix, VMS)\fR
.br
\fBgswin32c\fR [ \fIoptions\fR ] [ \fIfiles\fR ] ... \fB(MS Windows)\fR
.br
\fBgswin32\fR [ \fIoptions\fR ] [ \fIfiles\fR ] ... \fB(MS Windows 3.1)\fR
.br
\fBgsos2\fR [ \fIoptions\fR ] [ \fIfiles\fR ] ... \fB(OS/2)\fR
.de TQ
.br
.ns
.TP \\$1
..
.SH DESCRIPTION
Da \fBgs\fR (\fBgswin32c\fR, \fBgswin32\fR, \fBgsos2\fR)
command invokes \fBGhostscript\fR, a interpreta of Adobe Systems'
\fBPostScript\fR(tm) n' \fBPortable Document Format\fR (PDF) languages.
\fBgs\fR readz "files" up in sequence n' executes dem as Ghostscript
programs fo' realz. Afta bustin this, it readz further input from tha standard input
stream (normally tha keyboard), interpretin each line separately and
output ta a output thang (may be a gangbangin' file or a X11 window peepshow,
see below). The
interpreta exits gracefully when it encountas tha "quit" command (either
in a gangbangin' file or from tha keyboard), at end-of-file, or at a interrupt signal
(like fuckin Control-C all up in tha keyboard).
.PP
Da interpreta recognizes nuff option switches, a shitload of which is busted lyrics about
below. Please peep tha usage documentation fo' complete shiznit. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Switches
may step tha fuck up anywhere up in tha command line n' apply ta all filez thereafter.
Invokin Ghostscript wit tha \fB\-h\fR or \fB\-?\fR switch produces a
message which shows nuff muthafuckin useful switches, all tha devices known to
that executable, n' tha search path fo' fonts; on Unix it also shows the
location of detailed documentation.
.PP
Ghostscript may be built ta use nuff different output devices.  To see
which devices yo' executable includes, run "\fBgs -h\fR".
.PP
Unless you
specify a particular device, Ghostscript normally opens tha straight-up original gangsta one of
those n' directs output ta dat shit.
.PP
If built wit X11 support, often
the default thang be a X11 window (previewer), else pimpscript will
typically
use tha bbox thang n' print on stdout tha dimension of tha postscript file.
.PP
So if tha straight-up original gangsta one up in tha list is tha one
you wanna use, just issue tha command
.PP
.nf
	gs myfile.ps
.fi
.PP
Yo ass can also check tha set of available devices from within Ghostscript:
invoke Ghostscript n' type
.PP
.nf
	devicenames ==
.fi
.PP
but tha straight-up original gangsta thang on tha resultin list may not be tha default device
you determine wit "\fBgs -h\fR".  To specify "AbcXyz" as the
initial output device, include tha switch
.PP
.nf
	\-sDEVICE=AbcXyz
.fi
.PP
For example, fo' output ta a Epson printa you might use tha command
.PP
.nf
	gs \-sDEVICE=epson myfile.ps
.fi
.PP
Da "\-sDEVICE=" switch must precede tha straight-up original gangsta mention of a gangbangin' file ta print,
and only tha switchz first use has any effect.
.PP
Finally, you can specify a thugged-out default thang up in tha environment variable
\fBGS_DEVICE\fR.  Da order of precedence fo' these alternatives from
highest ta lowest (Ghostscript uses tha thang defined highest up in tha list)
is:
.PP
Some devices can support different resolutions (densities).  To specify
the resolution on such a printer, use tha "\-r" switch:
.PP
.nf
	gs \-sDEVICE=<device> \-r<xres>x<yres>
.fi
.PP
For example, on a 9-pin Epson-compatible printer, you git the
lowest-densitizzle (fastest) mode with
.PP
.nf
	gs \-sDEVICE=epson \-r60x72
.fi
.PP
and tha highest-densitizzle (best output quality) mode with
.PP
.nf
	gs \-sDEVICE=epson \-r240x72.
.fi
.PP
If you select a printa as tha output device, Ghostscript also allows you
to chizzle where Ghostscript sendz tha output \-\- on Unix systems, usually
to a temporary file.  To bust tha output ta a gangbangin' file "foo.xyz",
use tha switch
.PP
.nf
	\-sOutputFile=foo.xyz
.fi
.PP
Yo ass might wanna print each page separately.  To do this, bust tha output
to a seriez of filez "foo1.xyz, foo2.xyz, ..." rockin tha "\-sOutputFile="
switch wit "%d" up in a gangbangin' filename template:
.PP
.nf
	\-sOutputFile=foo%d.xyz
.fi
.PP
Each resultin file receives one page of output, n' tha filez is numbered
in sequence.  "%d" be a printf format justification; you can also use a
variant like "%02d".
.PP
On Unix n' MS Windows systems you can also bust output ta a pipe.  For example, to
pipe output ta tha "\fBlpr\fR" command (which, on nuff Unix systems,
directs it ta a printer), use tha option
.PP
.nf
	\-sOutputFile=%pipe%lpr
.fi
.PP
Note dat tha '%' charactas need ta be doubled on MS Windows ta avoid 
manglin by tha command interpreter.
.PP
Yo ass can also bust output ta standard output:
.PP
.nf
	\-sOutputFile=\-
.fi
or
.nf
	\-sOutputFile=%stdout%
.fi
.PP
In dis case you must also use tha \fB\-q\fR switch, ta prevent Ghostscript
from freestylin lyrics ta standard output.
.PP
To select a specific paper size, use tha command line switch
.PP
.nf
	-sPAPERSIZE=<paper_size>
.fi
.PP
for instance
.PP
.nf
	-sPAPERSIZE=a4
.fi
or
.nf
	-sPAPERSIZE=legal
.fi
.PP
Most ISO n' US paper sizes is recognized. Y'all KNOW dat shit, muthafucka! See tha usage documentation for
a full list, or tha definitions up in tha initialization file "gs_statd.ps".
.PP
Ghostscript can do nuff thangs other than print or view PostScript and
PDF files.  For example, if you wanna know tha boundin box of a
PostScript (or EPS) file, Ghostscript serves up a special "device" that
just prints up dis shiznit.
.PP
For example, rockin one of tha example filez distributed wit Ghostscript,
.PP
.nf
	gs \-sDEVICE=bbox golfer.ps
.fi
.PP
prints out
.PP
.nf
	%%BoundingBox: 0 25 583 732
	%%HiResBoundingBox: 0.808497 25.009496 582.994503 731.809445
.fi
.SH OPTIONS
.TP
.BI \-\- " filename arg1 ..."
Takes tha next argument as a gangbangin' file name as usual yo, but takes all remaining
arguments (even if they have tha syntactic form of switches) n' defines
the name "ARGUMENTS" up in "userdict" (not "systemdict") as an
array of dem strings, \fBbefore\fR hustlin tha file.  When Ghostscript
finishes executin tha file, it exits back ta tha shell.
.TP
.BI \-D name = token
.TQ
.BI \-d name = token
Define a name up in "systemdict" wit tha given definition. I aint talkin' bout chicken n' gravy biatch.  Da token must be
exactly one token (as defined by tha "token" operator) n' may contain no
whitespace.
.TP
.BI \-D name
.TQ
.BI \-d name
Define a name up in "systemdict" wit value=null.
.TP
.BI \-S name = string
.TQ
.BI \-s name = string
Define a name up in "systemdict" wit a given strang as value.  This is
different from \fB\-d\fR.  For example, \fB\-dname=35\fR is equivalent ta the
program fragment
.br
	/name 35 def
.br
whereas \fB\-sname=35\fR is equivalent to
.br
	/name (35) def
.TP
.B \-P
Makes Ghostscript ta look first up in tha current directory fo' library files.
By default, Ghostscript no longer looks up in tha current directory,
unless, of course, tha straight-up original gangsta explicitly supplied directory is "." up in \fB-I\fR.
See also tha \fBINITIALIZATION FILES\fR section below, n' bundled 
\fBUse.htm\fR fo' detailed rap on search paths n' how tha fuck Ghostcript findz files.
.TP
.B \-q
Quiet startup: suppress aiiight startup lyrics, n' also do the
equivalent of \fB\-dQUIET\fR.
.TP
.BI \-g number1 x number2
Equivalent ta \fB\-dDEVICEWIDTH=\fR\fInumber1\fR and
\fB\-dDEVICEHEIGHT=\fR\fInumber2\fR.  This is fo' tha benefit of devices
(like fuckin X11 windows) dat require (or allow) width n' height ta be
specified.
.TP
.BI \-r number
.TQ
.BI \-r number1 x number2
Equivalent ta \fB\-dDEVICEXRESOLUTION=\fR\fInumber1\fR and
\fB\-dDEVICEYRESOLUTION=\fR\fInumber2\fR.  This is fo' tha benefit of
devices like fuckin printas dat support multiple X n' Y resolutions.  If
only one number is given, it is used fo' both X n' Y resolutions.
.TP
.BI \-I directories
Addz tha designated list of directories all up in tha head of the
search path fo' library files.
.TP
.B \-
This aint straight-up a switch yo, but indicates ta Ghostscript dat standard
input is comin from a gangbangin' file or a pipe n' not interactively from the
command line.  Ghostscript readz from standard input until it reaches
end-of-file, executin it like any other file, n' then continues with
processin tha command line.  When tha command line has been entirely
processed, Ghostscript exits rather than goin tha fuck into its interactizzle mode.
.PP
Note dat tha aiiight initialization file "gs_init.ps" make "systemdict"
read-only, so tha jointz of names defined wit \fB\-D\fR, \fB\-d\fR,
\fB\-S\fR, or \fB\-s\fR cannot be chizzled (although, of course, they can be
superseded by definitions up in "userdict" or other dictionaries.)
.SH "SPECIAL NAMES"
.TP
.B \-dDISKFONTS
Causes individual characta outlines ta be loaded from tha disk
the last time they is encountered. Y'all KNOW dat shit, muthafucka!  (Normally Ghostscript loadz all the
characta outlines when it loadz a gangbangin' font.)  This may allow loadin more
fonts tha fuck into RAM, all up in tha expense of slower rendering.
.TP
.B \-dNOCACHE
Disablez characta caching.  Useful only fo' debugging.
.TP
.B \-dNOBIND
Disablez tha "bind" operator. Shiiit, dis aint no joke.  Useful only fo' debugging.
.TP
.B \-dNODISPLAY
Suppresses tha aiiight initialization of tha output device.
This may be useful when debugging.
.TP
.B \-dNOPAUSE
Disablez tha prompt n' pause all up in tha end of each page.  This may be
desirable fo' applications where another program is rollin Ghostscript.
.TP
.B \-dNOPLATFONTS
Disablez tha use of fonts supplied by tha underlyin platform (for instance
X Windows). This may be needed if tha platform fonts look undesirably
different from tha scalable fonts.
.TP
.B \-dSAFER
Restricts file operations tha thang can perform.  Strongly recommended for
spoolers, conversion scripts or other sensitizzle environments where a funky-ass badly 
written or malicious PostScript program code must be prevented from changing
important files.
.TP
.B \-dWRITESYSTEMDICT
Leaves "systemdict" writable.  This is necessary when hustlin special
utilitizzle programs like fuckin \fBfont2c\fR n' \fBpcharstr\fR, which must bypass
normal PostScript access protection.
.TP
.BI \-sDEVICE= device
Selects a alternate initial output device, as busted lyrics bout above.
.TP
.BI \-sOutputFile= filename
Selects a alternate output file (or pipe) fo' tha initial output
device, as busted lyrics bout above.
.SH "SAFER MODE"
.PP
The
.B \-dSAFER
option disablez tha "deletefile" n' "renamefile" operators n' prohibits
openin piped commandz ("%pipe%\fIcmd\fR"). Only "%stdout" n' "%stderr" can be
opened fo' writing. Well shiiiit, it also disablez readin from files, except fo' "%stdin",
filez given as a cold-ass lil command line argument, n' filez contained up in paths given by
LIBPATH n' FONTPATH or specified by tha system params /FontResourceDir and
/GenericResourceDir.
.PP
This mode also sets tha .LockSafetyParams parameta of tha initial output device
to protect against programs dat attempt ta write ta filez rockin tha OutputFile
device parameter n' shit. Right back up in yo muthafuckin ass. Since tha thang parametas specified on tha command line,
includin OutputFile, is set prior ta SAFER mode, use of "-sOutputFile=..." on
the command line is unrestricted.
.PP
SAFER mode prevents changin tha /GenericResourceDir, /FontResourceDir,
/SystemParamsPassword, n' /StartJobPassword.
.PP
While SAFER mode aint tha default, it is tha default fo' nuff wrapper scripts
like fuckin ps2pdf n' may be tha default up in a subsequent release of Ghostscript.
Thus when hustlin programs dat need ta open filez or set restricted parameters
you should pass the
.B \-dNOSAFER
command line option or its synonym
.BR \-dDELAYSAFER .
.PP
When hustlin with
.B \-dNOSAFER
it is possible ta big-ass up a "save" followed by ".setsafe", execute a gangbangin' file or
procedure up in SAFER mode, n' then use "restore" ta return ta NOSAFER mode.  In
order ta prevent tha save object from bein restored by tha foreign file or
procedure, tha ".runandhide" operator should be used ta hide tha save object
from tha restricted procedure.
.SH FILES
.PP
Da locationz of nuff Ghostscript run-time filez is compiled tha fuck into the
executable when it is built.  On Unix these is typically based in
\fB/usr/local\fR yo, but dis may be different on yo' system.  Under DOS they
are typically based up in \fBC:\\GS\fR yo, but may be elsewhere, especially if
you install Ghostscript wit \fBGSview\fR.  Run "\fBgs -h\fR" ta find the
location of Ghostscript documentation on yo' system, from which you can
get mo' details.
.TP
.B /usr/local/share/ghostscript/#.##/*
Startup files, utilities, n' basic font definitions
.TP
.B /usr/local/share/ghostscript/fonts/*
Mo' font definitions
.TP
.B /usr/local/share/ghostscript/#.##/examples/*
Ghostscript demonstration files
.TP
.B /usr/local/share/ghostscript/#.##/doc/*
Diverse document files
.SH "INITIALIZATION FILES"
When lookin fo' tha initialization filez "gs_*.ps", tha filez related to
fonts, or tha file fo' tha "run" operator, Ghostscript first tries ta open
the file wit tha name as given, rockin tha current hustlin directory if no
directory is specified. Y'all KNOW dat shit, muthafucka!  If dis fails, n' tha file name don't specify
an explicit directory or drive (for instance, don't contain "/" on Unix
systems or "\\" on MS Windows systems), Ghostscript tries directories up in this
order:
.TP 4
1.
the directories specified by tha \fB\-I\fR switches up in tha command
line (see below), if any;
.TP
2.
the directories specified by tha \fBGS_LIB\fR environment variable,
if any;
.TP
3.
the directories specified by tha \fBGS_LIB_DEFAULT\fR macro up in the
Ghostscript makefile when tha executable was built.  When \fBgs\fR is built
on Unix, \fBGS_LIB_DEFAULT\fR is usually
"/usr/local/share/ghostscript/#.##:/usr/local/share/ghostscript/fonts"
where "#.##" represents tha Ghostscript version number.
.PP
Each of these (\fBGS_LIB_DEFAULT\fR, \fBGS_LIB\fR, n' \fB\-I\fR parameter)
may be either a single directory or a list of directories separated by
":".
.SH ENVIRONMENT
.TP
.B GS_OPTIONS
Strin of options ta be processed before tha command line options
.TP
.B GS_DEVICE
Used ta specify a output device
.TP
.B GS_FONTPATH
Path names used ta search fo' fonts
.TP
.B GS_LIB
Path names fo' initialization filez n' fonts
.TP
.B  TEMP
Where temporary filez is made
.SH X RESOURCES
Ghostscript, or mo' properly tha X11 display device, looks fo' tha 
followin resources under tha program name "Ghostscript":
.TP
.B borderWidth
Da border width up in pixels (default = 1).
.TP
.B borderColor
Da name of tha border color (default = black).
.TP
.B geometry
Da window size n' placement, WxH+X+Y (default is NULL).
.TP
.B xResolution
Da number of x pixels per inch (default is computed from \fBWidthOfScreen\fR
and \fBWidthMMOfScreen\fR).
.TP
.B yResolution
Da number of y pixels per inch (default is computed from
\fBHeightOfScreen\fR n' \fBHeightMMOfScreen\fR).
.TP
.B useBackingPixmap
Determines whether backin store is ta be used fo' savin display window
(default = true).
.PP
See tha usage document fo' a mo' complete list of resources.  To set these
resources on Unix, put dem up in a gangbangin' file like fuckin "~/.Xresources" up in the
followin form:
.PP
.nf
	Ghostscript*geometry:	 612x792\-0+0
	Ghostscript*xResolution: 72
	Ghostscript*yResolution: 72
.fi
.PP
Then merge these resources tha fuck into tha X serverz resource database:
.PP
.nf
	% xrdb \-merge ~/.Xresources
.fi
.SH SEE ALSO
Da various Ghostscript document filez (above), especially \fBUse.htm\fR.
.SH BUGS
See http://bugs.ghostscript.com/ n' tha Usenet shizzle crew 
comp.lang.postscript.
.SH VERSION
This document was last revised fo' Ghostscript version 9.14.
.SH AUTHOR
Artifex Software, Inc. is tha primary maintainers
of Ghostscript.
Russell J. Lang, gsview at pimpgum.com.au, is tha lyricist of 
most of tha MS Windows code up in Ghostscript.
