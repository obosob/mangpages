.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FFSERVER 1"
.TH FFSERVER 1 "2015-01-03" " " " "
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
ffserver \- ffserver vizzle server
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
ffserver [\fIoptions\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBffserver\fR be a streamin server fo' both audio n' vizzle. It
supports nuff muthafuckin live feeds, streamin from filez n' time shiftin on
live feedz (you can seek ta positions up in tha past on each live feed,
provided you specify a funky-ass big-ass enough feed storage in
\&\fIffserver.conf\fR).
.PP
\&\fBffserver\fR receives prerecorded filez or \s-1FFM\s0 streams from some
\&\fBffmpeg\fR instizzle as input, then streams dem over
\&\s-1RTP/RTSP/HTTP.\s0
.PP
An \fBffserver\fR instizzle will listen on some port as specified
in tha configuration file. Yo ass can launch one or mo' instances of
\&\fBffmpeg\fR n' bust one or mo' \s-1FFM\s0 streams ta tha port where
ffserver is expectin ta receive em fo' realz. Alternately, you can make
\&\fBffserver\fR launch such \fBffmpeg\fR instances at startup.
.PP
Input streams is called feeds, n' each one is specified by a
\&\f(CW\*(C`<Feed>\*(C'\fR section up in tha configuration file.
.PP
For each feed you can have different output streams up in various
formats, each one specified by a \f(CW\*(C`<Stream>\*(C'\fR section up in the
configuration file.
.SS "Status stream"
.IX Subsection "Status stream"
ffserver supports a \s-1HTTP\s0 intercourse which exposes tha current status
of tha server.
.PP
Simply point yo' browser ta tha address of tha special status stream
specified up in tha configuration file.
.PP
For example if you have:
.PP
.Vb 2
\&        <Stream status.html>
\&        Format status
\&        
\&        # Only allow local playas ta git tha status
\&        ACL allow localhost
\&        ACL allow 192.168.0.0 192.168.255.255
\&        </Stream>
.Ve
.PP
then tha server will post a page wit tha status shiznit when
the special stream \fIstatus.html\fR is requested.
.SS "What can dis do?"
.IX Subsection "What can dis do?"
When properly configured n' hustlin, you can capture vizzle n' audio up in real
time from a suitable capture card, n' stream it up over tha Internizzle to
either Windows Media Player or RealAudio playa (with some restrictions).
.PP
It can also stream from files, though dat is currently broken. I aint talkin' bout chicken n' gravy biatch. Straight-up often, a
web server can be used ta serve up tha filez just as well.
.PP
It can stream prerecorded vizzle from .ffm files, though it is somewhat tricky
to make it work erectly.
.SS "How tha fuck do I make it work?"
.IX Subsection "How tha fuck do I make it work?"
First, build tha kit. Well shiiiit, it *really* helps ta have installed \s-1LAME\s0 first. Then when
you run tha ffserver ./configure, make shizzle dat you have the
\&\f(CW\*(C`\-\-enable\-libmp3lame\*(C'\fR flag turned on.
.PP
\&\s-1LAME\s0 is blingin as it allows fo' streamin audio ta Windows Media Player.
Don't ask why tha other audio types do not work.
.PP
As a simple test, just run tha followin two command lines where \s-1INPUTFILE\s0
is some file which you can decode wit ffmpeg:
.PP
.Vb 2
\&        ffserver \-f doc/ffserver.conf &
\&        ffmpeg \-i INPUTFILE http://localhost:8090/feed1.ffm
.Ve
.PP
At dis point you should be able ta git all up in yo' Windows machine n' fire up
Windows Media Player (\s-1WMP\s0). Go ta Open \s-1URL\s0 n' enter
.PP
.Vb 1
\&            http://<linuxbox>:8090/test.asf
.Ve
.PP
Yo ass should (afta a gangbangin' finger-lickin' dirty-ass short delay) peep vizzle n' hear audio.
.PP
\&\s-1WARNING:\s0 tryin ta stream test1.mpg don't work wit \s-1WMP\s0 as it tries to
transfer tha entire file before startin ta play.
Da same is legit of \s-1AVI\s0 files.
.SS "What happens next?"
.IX Subsection "What happens next?"
Yo ass should edit tha ffserver.conf file ta suit yo' needz (in terms of
frame rates etc). Then install ffserver n' ffmpeg, write a script ta start
them up, n' off you go.
.SS "Troubleshooting"
.IX Subsection "Troubleshooting"
\fII don't hear any audio yo, but vizzle is fine.\fR
.IX Subsection "I don't hear any audio yo, but vizzle is fine."
.PP
Maybe you didn't install \s-1LAME,\s0 or gots yo' ./configure statement wrong. Check
the ffmpeg output ta peep if a line referrin ta \s-1MP3\s0 is present. If not, then
your configuration was incorrect. If it is, then maybe yo' wirin is not
set up erectly. Maybe tha sound card aint gettin data from tha right
input source. Maybe you gotz a straight-up wack audio intercourse (like I do)
that only captures up in stereo n' also requires dat one channel be flipped.
If yo ass is one of these people, then export 'AUDIO_FLIP_LEFT=1' before
startin ffmpeg.
.PP
\fIDa audio n' vizzle lose sync afta a while.\fR
.IX Subsection "Da audio n' vizzle lose sync afta a while."
.PP
Yes, they do.
.PP
\fIAfta a long-ass while, tha vizzle update rate goes way down up in \s-1WMP.\s0\fR
.IX Subsection "Afta a long-ass while, tha vizzle update rate goes way down up in WMP."
.PP
Yes, it do. Dum diddy-dum, here I come biaaatch! Who tha fuck knows why?
.PP
\fI\s-1WMP 6.4\s0 behaves differently ta \s-1WMP 7.\s0\fR
.IX Subsection "WMP 6.4 behaves differently ta WMP 7."
.PP
Yes, it do fo' realz. Any thoughts on dis would be gratefully received. Y'all KNOW dat shit, muthafucka! These
differences extend ta embeddin \s-1WMP\s0 tha fuck into a wizzy page. [There is two
object IDs dat you can use: Da oldschool one, which do not play well, and
the freshly smoked up one, which do (both tested on tha same system) yo. However,
I suspect dat tha freshly smoked up one aint available unless you have installed \s-1WMP 7\s0].
.SS "What else can it do?"
.IX Subsection "What else can it do?"
Yo ass can replay vizzle from .ffm filez dat was recorded earlier.
But fuck dat shiznit yo, tha word on tha street is dat there be a fuckin shitload of caveats, includin tha fact dat the
ffserver parametas must match tha original gangsta parametas used ta record the
file. If they do not, then ffserver deletes tha file before recordin tha fuck into dat shit.
(Now dat I write this, it seems broken).
.PP
Yo ass can fiddle wit nuff of tha codec chizzlez n' encodin parameters, and
there is a funky-ass bunch mo' parametas dat you cannot control. Post a message
to tha mailin list if there be some 'must have' parameters. Look in
ffserver.conf fo' a list of tha currently available controls.
.PP
It will automatically generate tha \s-1ASX\s0 or \s-1RAM\s0 filez dat is often used
in browsers. These filez is straight-up redirections ta tha underlyin \s-1ASF\s0
or \s-1RM\s0 file. Da reason fo' dis is dat tha browser often fetches the
entire file before startin up tha external viewer n' shit. Da redirection files
are straight-up lil' small-ass n' can be transferred doggystyle. [Da stream itself is
often 'infinite' n' thus tha browser tries ta downlizzle it n' never
finishes.]
.SS "Tips"
.IX Subsection "Tips"
* When you connect ta a live stream, most playas (\s-1WMP, RA,\s0 etc) want to
buffer a cold-ass lil certain number of secondz of material so dat they can display the
signal continuously. But fuck dat shiznit yo, tha word on tha street is dat ffserver (by default) starts bustin  data
in realtime. This means dat there be a pause of all dem secondz while the
bufferin is bein done by tha playa n' shit. Da phat shizzle is dat dis can be
cured by addin a '?buffer=5' ta tha end of tha \s-1URL.\s0 This means dat the
stream should start 5 secondz up in tha past \*(-- n' so tha straight-up original gangsta 5 seconds
of tha stream is busted as fast as tha network will allow. Well shiiiit, it will then
slow down ta real time. This noticeably improves tha startup experience.
.PP
Yo ass can also add a 'Preroll 15' statement tha fuck into tha ffserver.conf dat will
add tha 15 second prebufferin on all requests dat do not otherwise
specify a time. In addition, ffserver will skip frames until a key_frame
is found. Y'all KNOW dat shit, muthafucka! This further reduces tha startup delay by not transferrin data
that is ghon be discarded.
.PP
* Yo ass may wanna adjust tha MaxBandwidth up in tha ffserver.conf ta limit
the amount of bandwidth consumed by live streams.
.SS "Why do tha ?buffer / Preroll stop hustlin afta a time?"
.IX Subsection "Why do tha ?buffer / Preroll stop hustlin afta a time?"
It turns up dat (on mah machine at least) tha number of frames successfully
grabbed is marginally less than tha number dat ought ta be grabbed. Y'all KNOW dat shit, muthafucka! This
means dat tha timestamp up in tha encoded data stream gets behind realtime.
This means dat if you say 'Preroll 10', then when tha stream gets 10
or mo' secondz behind, there is no Preroll left.
.PP
Fixin dis requires a cold-ass lil chizzle up in tha internalz of how tha fuck timestamps are
handled.
.ie n .SS "Do tha ""?date="" shiznit work."
.el .SS "Do tha \f(CW?date=\fP shiznit work."
.IX Subsection "Do tha ?date= shiznit work."
Yes yes y'all, (subject ta tha limitation outlined above) fo' realz. Also note dat whenever you
start ffserver, it deletes tha ffm file (if any parametas have chizzled),
thus wipin up what tha fuck you had recorded before.
.PP
Da format of tha \f(CW\*(C`?date=xxxxxx\*(C'\fR is fairly flexible. Yo ass should use one
of tha followin formats (the 'T' is literal):
.PP
.Vb 2
\&        * YYYY\-MM\-DDTHH:MM:SS     (localtime)
\&        * YYYY\-MM\-DDTHH:MM:SSZ    (UTC)
.Ve
.PP
Yo ass can omit tha YYYY-MM-DD, n' then it refers ta tha current day. It make me wanna hollar playa! However
note dat \fB?date=16:00:00\fR refers ta 16:00 on tha current dizzle \*(-- this
may be up in tha future n' so is unlikely ta be useful.
.PP
Yo ass use dis by addin tha ?date= ta tha end of tha \s-1URL\s0 fo' tha stream.
For example:   \fBhttp://localhost:8080/test.asf?date=2002\-07\-26T23:05:00\fR.
.SS "What tha fuck iz \s-1FFM, FFM2\s0"
.IX Subsection "What tha fuck iz FFM, FFM2"
\&\s-1FFM\s0 n' \s-1FFM2\s0 is formats used by ffserver n' shit. They allow storin a wide variety of
video n' audio streams n' encodin options, n' can store a movin time segment
of a infinite porno or a whole porno.
.PP
\&\s-1FFM\s0 is version specific, n' there is limited compatibilitizzle of \s-1FFM\s0 files
generated by one version of ffmpeg/ffserver n' another version of
ffmpeg/ffserver n' shit. Well shiiiit, it may work but it aint guaranteed ta work.
.PP
\&\s-1FFM2\s0 is extensible while maintainin compatibilitizzle n' should work between
differin versionz of tools. \s-1FFM2\s0 is tha default.
.SH "OPTIONS"
.IX Header "OPTIONS"
All tha numerical options, if not specified otherwise, accept a string
representin a number as input, which may be followed by one of tha \s-1SI\s0
unit prefixes, fo' example: 'K', 'M', or 'G'.
.PP
If 'i' be appended ta tha \s-1SI\s0 unit prefix, tha complete prefix will be
interpreted as a unit prefix fo' binary multiplies, which is based on
powerz of 1024 instead of powerz of 1000 fo' realz. Appendin 'B' ta tha \s-1SI\s0 unit
prefix multiplies tha value by 8. This allows using, fo' example:
\&'\s-1KB\s0', 'MiB', 'G' n' 'B' as number suffixes.
.PP
Options which do not take arguments is boolean options, n' set the
correspondin value ta true. They can be set ta false by prefixing
the option name wit \*(L"no\*(R". For example rockin \*(L"\-nofoo\*(R"
will set tha boolean option wit name \*(L"foo\*(R" ta false.
.SS "Stream specifiers"
.IX Subsection "Stream specifiers"
Some options is applied per-stream, e.g. bitrate or codec. Right back up in yo muthafuckin ass. Stream specifiers
are used ta precisely specify which stream(s) a given option belongs to.
.PP
A stream specifier be a strang generally appended ta tha option name and
separated from it by a cold-ass lil colon. I aint talkin' bout chicken n' gravy biatch. E.g. \f(CW\*(C`\-codec:a:1 ac3\*(C'\fR gotz nuff the
\&\f(CW\*(C`a:1\*(C'\fR stream specifier, which matches tha second audio stream. Therefore, it
would select tha ac3 codec fo' tha second audio stream.
.PP
A stream specifier can match nuff muthafuckin streams, so dat tha option be applied ta all
of em. E.g. tha stream specifier up in \f(CW\*(C`\-b:a 128k\*(C'\fR matches all audio
streams.
.PP
An empty stream specifier matches all streams. For example, \f(CW\*(C`\-codec copy\*(C'\fR
or \f(CW\*(C`\-codec: copy\*(C'\fR would copy all tha streams without reencoding.
.PP
Possible formz of stream specifiers are:
.IP "\fIstream_index\fR" 4
.IX Item "stream_index"
Matches tha stream wit dis index. E.g. \f(CW\*(C`\-threads:1 4\*(C'\fR would set the
thread count fo' tha second stream ta 4.
.IP "\fIstream_type\fR\fB[:\fR\fIstream_index\fR\fB]\fR" 4
.IX Item "stream_type[:stream_index]"
\&\fIstream_type\fR is one of following: 'v' fo' vizzle, 'a' fo' audio, 's' fo' subtitle,
\&'d' fo' data, n' 't' fo' attachments, n' you can put dat on yo' toast. If \fIstream_index\fR is given, then it matches
stream number \fIstream_index\fR of dis type. Otherwise, it matches all
streamz of dis type.
.IP "\fBp:\fR\fIprogram_id\fR\fB[:\fR\fIstream_index\fR\fB]\fR" 4
.IX Item "p:program_id[:stream_index]"
If \fIstream_index\fR is given, then it matches tha stream wit number \fIstream_index\fR
in tha program wit tha id \fIprogram_id\fR. Otherwise, it matches all streams up in the
program.
.IP "\fB#\fR\fIstream_id\fR" 4
.IX Item "#stream_id"
Matches tha stream by a gangbangin' format-specific \s-1ID.\s0
.SS "Generic options"
.IX Subsection "Generic options"
These options is shared amongst tha ff* tools.
.IP "\fB\-L\fR" 4
.IX Item "-L"
Show license.
.IP "\fB\-h, \-?, \-help, \-\-help [\fR\fIarg\fR\fB]\fR" 4
.IX Item "-h, -?, -help, --help [arg]"
Show help fo' realz. An optionizzle parameta may be specified ta print help on some specific
item. If no argument is specified, only basic (non advanced) tool
options is shown.
.Sp
Possible jointz of \fIarg\fR are:
.RS 4
.IP "\fBlong\fR" 4
.IX Item "long"
Print advanced tool options up in addizzle ta tha basic tool options.
.IP "\fBfull\fR" 4
.IX Item "full"
Print complete list of options, includin shared n' private options
for encoders, decoders, demuxers, muxers, filters, etc.
.IP "\fBdecoder=\fR\fIdecoder_name\fR" 4
.IX Item "decoder=decoder_name"
Print detailed shiznit bout tha decoder named \fIdecoder_name\fR. Use the
\&\fB\-decoders\fR option ta git a list of all decoders.
.IP "\fBencoder=\fR\fIencoder_name\fR" 4
.IX Item "encoder=encoder_name"
Print detailed shiznit bout tha encoder named \fIencoder_name\fR. Use the
\&\fB\-encoders\fR option ta git a list of all encoders.
.IP "\fBdemuxer=\fR\fIdemuxer_name\fR" 4
.IX Item "demuxer=demuxer_name"
Print detailed shiznit bout tha demuxer named \fIdemuxer_name\fR. Use the
\&\fB\-formats\fR option ta git a list of all demuxers n' muxers.
.IP "\fBmuxer=\fR\fImuxer_name\fR" 4
.IX Item "muxer=muxer_name"
Print detailed shiznit bout tha muxer named \fImuxer_name\fR. Use the
\&\fB\-formats\fR option ta git a list of all muxers n' demuxers.
.IP "\fBfilter=\fR\fIfilter_name\fR" 4
.IX Item "filter=filter_name"
Print detailed shiznit bout tha filta name \fIfilter_name\fR. Use the
\&\fB\-filters\fR option ta git a list of all filters.
.RE
.RS 4
.RE
.IP "\fB\-version\fR" 4
.IX Item "-version"
Show version.
.IP "\fB\-formats\fR" 4
.IX Item "-formats"
Show available formats.
.IP "\fB\-codecs\fR" 4
.IX Item "-codecs"
Show all codecs known ta libavcodec.
.Sp
Note dat tha term 'codec' is used all up in dis documentation as a gangbangin' finger-lickin' dirty-ass shortcut
for what tha fuck is mo' erectly called a media bitstream format.
.IP "\fB\-decoders\fR" 4
.IX Item "-decoders"
Show available decoders.
.IP "\fB\-encoders\fR" 4
.IX Item "-encoders"
Show all available encoders.
.IP "\fB\-bsfs\fR" 4
.IX Item "-bsfs"
Show available bitstream filters.
.IP "\fB\-protocols\fR" 4
.IX Item "-protocols"
Show available protocols.
.IP "\fB\-filters\fR" 4
.IX Item "-filters"
Show available libavfilta filters.
.IP "\fB\-pix_fmts\fR" 4
.IX Item "-pix_fmts"
Show available pixel formats.
.IP "\fB\-sample_fmts\fR" 4
.IX Item "-sample_fmts"
Show available sample formats.
.IP "\fB\-layouts\fR" 4
.IX Item "-layouts"
Show channel names n' standard channel layouts.
.IP "\fB\-colors\fR" 4
.IX Item "-colors"
Show recognized color names.
.IP "\fB\-loglevel [repeat+]\fR\fIloglevel\fR \fB| \-v [repeat+]\fR\fIloglevel\fR" 4
.IX Item "-loglevel [repeat+]loglevel | -v [repeat+]loglevel"
Set tha loggin level used by tha library.
Addin \*(L"repeat+\*(R" indicates dat repeated log output should not be compressed
to tha straight-up original gangsta line n' tha \*(L"Last message repeated n times\*(R" line will be
omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. \*(L"repeat\*(R" can also be used ridin' solo.
If \*(L"repeat\*(R" is used alone, n' wit no prior loglevel set, tha default
loglevel is ghon be used. Y'all KNOW dat shit, muthafucka! If multiple loglevel parametas is given, using
\&'repeat' aint gonna chizzle tha loglevel.
\&\fIloglevel\fR be a number or a strang containin one of tha followin joints:
.RS 4
.IP "\fBquiet\fR" 4
.IX Item "quiet"
Show not a god damn thang at all; be silent.
.IP "\fBpanic\fR" 4
.IX Item "panic"
Only show fatal errors which could lead tha process ta crash, such as
and assert failure. This aint currently used fo' anything.
.IP "\fBfatal\fR" 4
.IX Item "fatal"
Only show fatal errors. These is errors afta which tha process straight-up
cannot continue after.
.IP "\fBerror\fR" 4
.IX Item "error"
Show all errors, includin ones which can be recovered from.
.IP "\fBwarning\fR" 4
.IX Item "warning"
Show all warnings n' errors fo' realz. Any message related ta possibly
incorrect or unexpected events is ghon be shown.
.IP "\fBinfo\fR" 4
.IX Item "info"
Show informatizzle lyrics durin processing. This is up in addizzle to
warnings n' errors. This is tha default value.
.IP "\fBverbose\fR" 4
.IX Item "verbose"
Same as \f(CW\*(C`info\*(C'\fR, except mo' verbose.
.IP "\fBdebug\fR" 4
.IX Item "debug"
Show every last muthafuckin thang, includin debuggin shiznit.
.RE
.RS 4
.Sp
By default tha program logs ta stderr, if colorin is supported by the
terminal, flavas is used ta mark errors n' warnings. Log coloring
can be disabled settin tha environment variable
\&\fB\s-1AV_LOG_FORCE_NOCOLOR\s0\fR or \fB\s-1NO_COLOR\s0\fR, or can be forced setting
the environment variable \fB\s-1AV_LOG_FORCE_COLOR\s0\fR.
Da use of tha environment variable \fB\s-1NO_COLOR\s0\fR is deprecated and
will be dropped up in a gangbangin' followin FFmpeg version.
.RE
.IP "\fB\-report\fR" 4
.IX Item "-report"
Dump full command line n' console output ta a gangbangin' file named
\&\f(CW\*(C`\f(CIprogram\f(CW\-\f(CIYYYYMMDD\f(CW\-\f(CIHHMMSS\f(CW.log\*(C'\fR up in tha current
directory.
This file can be useful fo' bug reports.
It also implies \f(CW\*(C`\-loglevel verbose\*(C'\fR.
.Sp
Settin tha environment variable \f(CW\*(C`FFREPORT\*(C'\fR ta any value has the
same effect. If tha value be a ':'\-separated key=value sequence, these
options will affect tha report; options joints must be escaped if they
contain special charactas or tha options delimita ':' (see the
``Quotin n' escaping'' section up in tha ffmpeg-utils manual). The
followin option is recognized:
.RS 4
.IP "\fBfile\fR" 4
.IX Item "file"
set tha file name ta use fo' tha report; \f(CW%p\fR is expanded ta tha name
of tha program, \f(CW%t\fR is expanded ta a timestamp, \f(CW\*(C`%%\*(C'\fR is expanded
to a plain \f(CW\*(C`%\*(C'\fR
.RE
.RS 4
.Sp
Errors up in parsin tha environment variable is not fatal, n' will not
appear up in tha report.
.RE
.IP "\fB\-cpuflags flags (\fR\fIglobal\fR\fB)\fR" 4
.IX Item "-cpuflags flags (global)"
Allows settin n' clearin cpu flags. This option is intended
for testing. Do not use it unless you know what tha fuck you bustin.
.Sp
.Vb 3
\&        ffmpeg \-cpuflags \-sse+mmx ...
\&        ffmpeg \-cpuflags mmx ...
\&        ffmpeg \-cpuflags 0 ...
.Ve
.Sp
Possible flags fo' dis option are:
.RS 4
.IP "\fBx86\fR" 4
.IX Item "x86"
.RS 4
.PD 0
.IP "\fBmmx\fR" 4
.IX Item "mmx"
.IP "\fBmmxext\fR" 4
.IX Item "mmxext"
.IP "\fBsse\fR" 4
.IX Item "sse"
.IP "\fBsse2\fR" 4
.IX Item "sse2"
.IP "\fBsse2slow\fR" 4
.IX Item "sse2slow"
.IP "\fBsse3\fR" 4
.IX Item "sse3"
.IP "\fBsse3slow\fR" 4
.IX Item "sse3slow"
.IP "\fBssse3\fR" 4
.IX Item "ssse3"
.IP "\fBatom\fR" 4
.IX Item "atom"
.IP "\fBsse4.1\fR" 4
.IX Item "sse4.1"
.IP "\fBsse4.2\fR" 4
.IX Item "sse4.2"
.IP "\fBavx\fR" 4
.IX Item "avx"
.IP "\fBxop\fR" 4
.IX Item "xop"
.IP "\fBfma4\fR" 4
.IX Item "fma4"
.IP "\fB3dnow\fR" 4
.IX Item "3dnow"
.IP "\fB3dnowext\fR" 4
.IX Item "3dnowext"
.IP "\fBcmov\fR" 4
.IX Item "cmov"
.RE
.RS 4
.RE
.IP "\fB\s-1ARM\s0\fR" 4
.IX Item "ARM"
.RS 4
.IP "\fBarmv5te\fR" 4
.IX Item "armv5te"
.IP "\fBarmv6\fR" 4
.IX Item "armv6"
.IP "\fBarmv6t2\fR" 4
.IX Item "armv6t2"
.IP "\fBvfp\fR" 4
.IX Item "vfp"
.IP "\fBvfpv3\fR" 4
.IX Item "vfpv3"
.IP "\fBneon\fR" 4
.IX Item "neon"
.RE
.RS 4
.RE
.IP "\fBPowerPC\fR" 4
.IX Item "PowerPC"
.RS 4
.IP "\fBaltivec\fR" 4
.IX Item "altivec"
.RE
.RS 4
.RE
.IP "\fBSpecific Processors\fR" 4
.IX Item "Specific Processors"
.RS 4
.IP "\fBpentium2\fR" 4
.IX Item "pentium2"
.IP "\fBpentium3\fR" 4
.IX Item "pentium3"
.IP "\fBpentium4\fR" 4
.IX Item "pentium4"
.IP "\fBk6\fR" 4
.IX Item "k6"
.IP "\fBk62\fR" 4
.IX Item "k62"
.IP "\fBathlon\fR" 4
.IX Item "athlon"
.IP "\fBathlonxp\fR" 4
.IX Item "athlonxp"
.IP "\fBk8\fR" 4
.IX Item "k8"
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.IP "\fB\-opencl_options options (\fR\fIglobal\fR\fB)\fR" 4
.IX Item "-opencl_options options (global)"
.PD
Set OpenCL environment options. This option is only available when
FFmpeg has been compiled wit \f(CW\*(C`\-\-enable\-opencl\*(C'\fR.
.Sp
\&\fIoptions\fR must be a list of \fIkey\fR=\fIvalue\fR option pairs
separated by ':'. Right back up in yo muthafuckin ass. See tha ``OpenCL Options'' section up in the
ffmpeg-utils manual fo' tha list of supported options.
.SS "AVOptions"
.IX Subsection "AVOptions"
These options is provided directly by tha libavformat, libavdevice and
libavcodec libraries. Put ya muthafuckin choppers up if ya feel dis! To peep tha list of available AVOptions, use the
\&\fB\-help\fR option. I aint talkin' bout chicken n' gravy biatch. They is separated tha fuck into two categories:
.IP "\fBgeneric\fR" 4
.IX Item "generic"
These options can be set fo' any container, codec or device. Generic options
are listed under AVFormatContext options fo' containers/devices n' under
AVCodecContext options fo' codecs.
.IP "\fBprivate\fR" 4
.IX Item "private"
These options is specific ta tha given container, thang or codec. Private
options is listed under they correspondin containers/devices/codecs.
.PP
For example ta write a ID3v2.3 header instead of a thugged-out default ID3v2.4 to
an \s-1MP3\s0 file, use tha \fBid3v2_version\fR private option of tha \s-1MP3\s0
muxer:
.PP
.Vb 1
\&        ffmpeg \-i input.flac \-id3v2_version 3 out.mp3
.Ve
.PP
All codec AVOptions is per-stream, n' thus a stream specifier
should be attached ta em.
.PP
Note: tha \fB\-nooption\fR syntax cannot be used fo' boolean
AVOptions, use \fB\-option 0\fR/\fB\-option 1\fR.
.PP
Note: tha oldschool undocumented way of specifyin per-stream AVOptions by
prependin v/a/s ta tha options name is now obsolete n' will be
removed soon.
.SS "Main options"
.IX Subsection "Main options"
.IP "\fB\-f\fR \fIconfigfile\fR" 4
.IX Item "-f configfile"
Use \fIconfigfile\fR instead of \fI/etc/ffserver.conf\fR.
.IP "\fB\-n\fR" 4
.IX Item "-n"
Enable no-launch mode. This option disablez all tha Launch directives
within tha various <Stream> sections. Right back up in yo muthafuckin ass. Since ffserver aint gonna launch
any ffmpeg instances, yo big-ass booty is ghon gotta launch dem manually.
.IP "\fB\-d\fR" 4
.IX Item "-d"
Enable debug mode. This option increases log verbosity, directs log
lyrics ta stdout.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIffserver\-all\fR\|(1),
the \fIdoc/ffserver.conf\fR example, \fIffmpeg\fR\|(1), \fIffplay\fR\|(1), \fIffprobe\fR\|(1),
\&\fIffmpeg\-utils\fR\|(1), \fIffmpeg\-scaler\fR\|(1), \fIffmpeg\-resampler\fR\|(1),
\&\fIffmpeg\-codecs\fR\|(1), \fIffmpeg\-bitstream\-filters\fR\|(1), \fIffmpeg\-formats\fR\|(1),
\&\fIffmpeg\-devices\fR\|(1), \fIffmpeg\-protocols\fR\|(1), \fIffmpeg\-filters\fR\|(1)
.SH "AUTHORS"
.IX Header "AUTHORS"
Da FFmpeg pimpers.
.PP
For details bout tha authorship, peep tha Git history of tha project
(git://source.ffmpeg.org/ffmpeg), e.g. by typin tha command
\&\fBgit log\fR up in tha FFmpeg source directory, or browsin the
online repository at <\fBhttp://source.ffmpeg.org\fR>.
.PP
Maintainers fo' tha specific components is listed up in tha file
\&\fI\s-1MAINTAINERS\s0\fR up in tha source code tree.
