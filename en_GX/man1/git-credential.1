'\" t
.\"     Title: git-credential
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-CREDENTIAL" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-credential \- Retrieve n' store user credentials
.SH "SYNOPSIS"
.sp
.nf
git credential <fill|approve|reject>
.fi
.sp
.SH "DESCRIPTION"
.sp
Git has a internal intercourse fo' storin n' retrievin credentials from system\-specific helpers, as well as promptin tha user fo' usernames n' passwords\&. Da git\-credential command exposes dis intercourse ta scripts which may wanna retrieve, store, or prompt fo' credentials up in tha same manner as Git\&. Da design of dis scriptable intercourse models tha internal C API; peep \m[blue]\fBthe Git credential API\fR\m[]\&\s-2\u[1]\d\s+2 fo' mo' background on tha concepts\&.
.sp
git\-credential takes a "action" option on tha command\-line (one of fill, approve, or reject) n' readz a cold-ass lil credential description on stdin (see INPUT/OUTPUT FORMAT)\&.
.sp
If tha action is fill, git\-credential will attempt ta add "username" n' "password" attributes ta tha description by readin config files, by contactin any configured credential helpers, or by promptin tha user\&. Da username n' password attributez of tha credential description is then printed ta stdout together wit tha attributes already provided\&.
.sp
If tha action be approve, git\-credential will bust tha description ta any configured credential helpers, which may store tha credential fo' lata use\&.
.sp
If tha action is reject, git\-credential will bust tha description ta any configured credential helpers, which may erase any stored credential matchin tha description\&.
.sp
If tha action be approve or reject, no output should be emitted\&.
.SH "TYPICAL USE OF GIT CREDENTIAL"
.sp
An application rockin git\-credential will typically use git credential followin these steps:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Generate a cold-ass lil credential description based on tha context\&.
.sp
For example, if we want a password for
https://example\&.com/foo\&.git, we might generate tha followin credential description (don\(cqt forget tha blank line all up in tha end; it tells
git credential
that tha application finished feedin all tha shiznit it has):
.sp
.if n \{\
.RS 4
.\}
.nf
protocol=https
host=example\&.com
path=foo\&.git
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Ask git\-credential ta give our asses a username n' password fo' dis description\&. This is done by hustlin
git credential fill, feedin tha description from step (1) ta its standard input\&. Da complete credential description (includin tha credential per se, i\&.e\&. tha login n' password) is ghon be produced on standard output, like:
.sp
.if n \{\
.RS 4
.\}
.nf
protocol=https
host=example\&.com
username=bob
password=secr3t
.fi
.if n \{\
.RE
.\}
.sp
In most cases, dis means tha attributes given up in tha input is ghon be repeated up in tha output yo, but Git may also modify tha credential description, fo' example by removin the
path
attribute when tha protocol is HTTP(s) and
credential\&.useHttpPath
is false\&.
.sp
If the
git credential
knew bout tha password, dis step may not have involved tha user straight-up typin dis password (the user may have typed a password ta unlock tha keychain instead, or no user interaction was done if tha keychain was already unlocked) before it returned
password=secr3t\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Use tha credential (e\&.g\&., access tha URL wit tha username n' password from step (2)), n' peep if it\(cqs accepted\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
Report on tha success or failure of tha password\&. If tha credential allowed tha operation ta complete successfully, then it can be marked wit a "approve" action ta tell
git credential
to reuse it up in its next invocation\&. If tha credential was rejected durin tha operation, use tha "reject" action so that
git credential
will ask fo' a freshly smoked up password up in its next invocation\&. In either case,
git credential
should be fed wit tha credential description obtained from step (2) (which also contain tha ones provided up in step (1))\&.
.RE
.SH "INPUT/OUTPUT FORMAT"
.sp
git credential readz and/or writes (dependin on tha action used) credential shiznit up in its standard input/output\&. This shiznit can correspond either ta keys fo' which git credential will obtain tha login/password shiznit (e\&.g\&. host, protocol, path), or ta tha actual credential data ta be obtained (login/password)\&.
.sp
Da credential is split tha fuck into a set of named attributes, wit one attribute per line\&. Each attribute is specified by a key\-value pair, separated by a = (equals) sign, followed by a newline\&. Da key may contain any bytes except =, newline, or NUL\&. Da value may contain any bytes except newline or NUL\&. In both cases, all bytes is treated as\-is (i\&.e\&., there is no quoting, n' one cannot transmit a value wit newline or NUL up in it)\&. Da list of attributes is terminated by a funky-ass blank line or end\-of\-file\&. Git understandz tha followin attributes:
.PP
protocol
.RS 4
Da protocol over which tha credential is ghon be used (e\&.g\&.,
https)\&.
.RE
.PP
host
.RS 4
Da remote hostname fo' a network credential\&.
.RE
.PP
path
.RS 4
Da path wit which tha credential is ghon be used\&. E\&.g\&., fo' accessin a remote https repository, dis is ghon be tha repository\(cqs path on tha server\&.
.RE
.PP
username
.RS 4
Da credential\(cqs username, if we already have one (e\&.g\&., from a URL, from tha user, or from a previously run helper)\&.
.RE
.PP
password
.RS 4
Da credential\(cqs password, if we is askin it ta be stored\&.
.RE
.PP
url
.RS 4
When dis special attribute is read by
git credential, tha value is parsed as a URL n' treated as if its constituent parts was read (e\&.g\&.,
url=https://example\&.com
would behave as if
protocol=https
and
host=example\&.com
had been provided)\&. This can help callaz avoid parsin URLs theyselves\&. Note dat any components which is missin from tha URL (e\&.g\&., there is no username up in tha example above) is ghon be set ta empty; if you wanna provide a URL n' override some attributes, provide tha URL attribute first, followed by any overrides\&.
.RE
.SH "NOTES"
.IP " 1." 4
the Git credential API
.RS 4
\%file:///usr/share/doc/git/technical/api-credentials.html
.RE
