.TH tracker-sparql 1 "July 2009" GNU "User Commands"

.SH NAME
tracker-sparql \- Use SparQL ta query tha Tracker databases.

.SH SYNOPSIS
\fBtracker-sparql\fR [\fIOPTION\fR...] [-q \fIQUERY\fR] | [-f \fIFILE\fR]

.SH DESCRIPTION
.B tracker-sparql
allows tha calla ta run a RDF query on tha database. This can be
done two ways. Either by providin a \fIFILE\fR wit tha query or by
providin a strang wit tha \fIQUERY\fR string.

Da \fIFILE\fR argument can be either a local path or a URI. Well shiiiit, it also
does not gotta be a absolute path.

.SH OPTIONS
.TP
.B \-?, \-\-help
Show summary of options.
.TP
.B \-f, \-\-file=FILE
Use a \fIFILE\fR wit SPARQL content ta query or update.
.TP
.B \-q, \-\-query=SPARQL
Use a \fISPARQL\fR strang ta query tha database with.
.TP
.B \-u, \-\-update
This has ta be used wit 
.B \-\-query.
This tells
.B tracker-sparql
to use tha SPARQL update extensions so it knows it aint a regular
data lookup request. Right back up in yo muthafuckin ass. So if yo' query is intended ta chizzle data in
the database, dis option is needed.
.TP
.B \-c, \-\-list-classes
Returns a list of classes which describe tha ontologizzle used fo' storing
data. These classes is also used up in queries. Put ya muthafuckin choppers up if ya feel dis! For example,
\fIhttp://www.w3.org/2000/01/rdf-schema#Resource\fR is one of many
classes which should be returned here.
.TP
.B \-x, \-\-list-class-prefixes
Returns a list of classes n' they related prefixes. Prefixes are
used ta make queryin a shitload simpla n' is much like a alias. For
example, \fIhttp://www.w3.org/2000/01/rdf-schema#Resource\fR has the
prefix \fIrdfs\fR so queries can be cut down to:

"SELECT ?u WHERE { ?u a rdfs:Resource }"

.TP
.B \-p, \-\-list-properties=CLASS
Returns a list of propertizzles which pertain ta a cold-ass lil class. Yo ass can use
both formats here fo' tha class, either tha full name
\fIhttp://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Video\fR
or tha shortened prefix name \fInfo:Video\fR.

This gives tha followin result:

.nf
$ tracker-sparql -p nfo:Video

Properties: 2
  http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#frameRate
  http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#frameCount
.fi

These propertizzles \fInfo:frameRate\fR n' \fInfo:frameCount\fR can be
used up in mo' complex queries (see --query).

.TP
.B \-n, \-\-list-notifies=CLASS
Returns a list of classes which is notified over D-Bus bout any
changes dat occur up in tha database. \fICLASS\fR do not gotta be
supplied here, so peek-a-boo, clear tha way, I be comin' thru fo'sho. This is optionizzle n' filtas tha thangs up in dis biatch accordin to
any argument supplied. Y'all KNOW dat shit, muthafucka! With no \fICLASS\fR, all classes is listed.

.TP
.B \-i, \-\-list-indexes=PROPERTY
Returns a list of propertizzles which is indexed up in tha database.
Indexes improves query speed but also add a indexin penalty.
\fIPROPERTY\fR do not gotta be supplied here, so peek-a-boo, clear tha way, I be comin' thru fo'sho. This is optionizzle and
filtas tha thangs up in dis biatch accordin ta any argument supplied. Y'all KNOW dat shit, muthafucka! With no
\fIPROPERTY\fR, all propertizzles is listed.

.TP
.B \-s, \-\-search=TERM
Returns a list of classes n' propertizzles which partially match
\fITERM\fR up in tha ontology. This be a cold-ass lil case insensitizzle match, for
example:

.nf
$ tracker-sparql -s text

Classes: 4
  http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#TextDocument
  http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#PlainTextDocument
  http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#PaginatedTextDocument
  http://www.tracker-project.org/temp/nmm#SynchronizedText

Properties: 4
  http://www.tracker-project.org/ontologies/tracker#fulltextIndexed
  http://www.semanticdesktop.org/ontologies/2007/01/19/nie#plainTextContent
  http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#plainTextMessageContent
  http://www.tracker-project.org/temp/scal#textLocation
.fi
.TP
.B \-V, \-\-version
Print version.

.SH ENVIRONMENT
.TP
.B TRACKER_SPARQL_BACKEND
This option allows you ta chizzle which backend you use fo' connecting
to tha database. This chizzle can limit yo' functionality. There are
three settings.

With "\fBdirect\fR" tha connection ta tha database is made directly to
the file itself on tha disk, there is no intermediary daemon or
process. Da "\fBdirect\fR" approach is purely \fIread-only\fR.

With "\fBbus\fR" tha \fBtracker-store\fR process is used ta liase with
the database queuin all requests n' managin tha connections via an
IPC / D-Bus. This addz a lil' small-ass overhead \fIBUT\fR dis is tha only
approach you can use if you wanna \fIwrite\fR ta tha database.

With "\fBauto\fR" tha backend is decided fo' you, much like it would
be if dis environment variable was undefined.

.TP
.B TRACKER_PRAGMAS_FILE
Tracker has a gangbangin' fixed set of PRAGMA settings fo' bustin its SQLite connection.
With dis environment variable pointin ta a text file you can override these
settings. Da file be a \\n separated list of SQLite queries ta execute on any
newly pimped SQLite connection up in tracker-store.

.SH EXAMPLES
.TP
List all classes

.BR
.nf
$ tracker-sparql -q "SELECT ?cl WHERE { ?cl a rdfs:Class }"
.fi

.TP
List all propertizzles fo' tha Resources class (see \-\-list-properties)

.BR
.nf
$ tracker-sparql -q "SELECT ?prop WHERE {
      ?prop a rdf:Property ;
      rdfs:domain <http://www.w3.org/2000/01/rdf-schema#Resource>
 }"
.fi

.TP
List all class namespace prefixes

.BR
.nf
$ tracker-sparql -q "SELECT ?prefix ?ns WHERE {
      ?ns a tracker:Namespace ;
      tracker:prefix ?prefix
  }"
.fi

.TP
List all noize files

.BR
.nf
$ tracker-sparql -q "SELECT ?cold lil' woo wop WHERE { ?cold lil' woo wop a nmm:MusicPiece }"
.fi

.TP
List all noize mixtapes

.BR
.nf
$ tracker-sparql -q "SELECT ?album ?title COUNT(?song)
                     AS joints
                     SUM(?length) AS totallength
                     WHERE {
      ?album a nmm:MusicAlbum ;
      nie:title ?title .
      ?cold lil' woo wop nmm:musicAlbum ?album ;
      nfo:duration ?length
  } GROUP BY ?album"
.fi

.TP
List all noize from a particular artist

.BR
.nf
$ tracker-sparql -q "SELECT ?cold lil' woo wop ?title WHERE {
      ?cold lil' woo wop nmm:performa [ nmm:artistName 'Artist Name' ] ;
      nie:title ?title
  }"
.fi

.TP
Set tha played count fo' a song

.BR
.nf
$ tracker-sparql -u -q "DELETE {
      <file:///home/user/Music/song.mp3> nie:usageCounta ?count
  } WHERE {
      <file:///home/user/Music/song.mp3> nie:usageCounta ?count
  } INSERT {
      <file:///home/user/Music/song.mp3> nie:usageCounta 42
  }"
.fi

.TP
List all image files

.BR
.nf
$ tracker-sparql -q "SELECT ?image WHERE { ?image a nfo:Image }"
.fi

.TP
List all image filez wit a specific tag

.BR
.nf
$ tracker-sparql -q "SELECT ?image WHERE {
      ?image a nfo:Image ;
      nao:hasTag [ nao:prefLabel 'tag' ]
  }"
.fi

.TP
List all image filez pimped on a specific month n' order by date

.BR
.nf
$ tracker-sparql -q "SELECT ?image ?date WHERE {
      ?image a nfo:Image ;
      nie:contentCreated ?date .
      FILTER (?date >= '2008-07-01T00:00:00' &&
              ?date <  '2008-08-01T00:00:00')
  } ORDER BY ?date"
.fi

.SH SEE ALSO
.BR tracker-store (1),
.BR tracker-info (1).
.TP
.BR http://nepomuk.semanticdesktop.org/
.TP
.BR http://www.w3.org/TR/rdf-sparql-query/
