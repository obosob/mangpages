.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLFAQ1 1"
.TH PERLFAQ1 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlfaq1 \- General Thangs Bout Perl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This section of tha \s-1FAQ\s0 lyrics straight-up general, high-level thangs
about Perl.
.SS "What tha fuck iz Perl?"
.IX Subsection "What tha fuck iz Perl?"
Perl be a high-level programmin language wit a eclectic heritage
written by Larry Wall n' a cold-ass lil cast of thousands.
.PP
Perlz process, file, n' text manipulation facilitizzles make it
particularly well-suited fo' tasks involvin quick prototyping, system
utilities, software tools, system pimpment tasks, database access,
graphical programming, networking, n' wizzy programming.
.PP
Perl derives from tha ubiquitous C programmin language n' ta a
lesser extent from sed, awk, tha Unix shell, n' nuff other tools
and languages.
.PP
These strengths make it especially ghettofab wit wizzy pimpers
and system administrators. Mathematicians, geneticists, journalists,
managers n' nuff other playas also use Perl.
.SS "Dum diddy-dum, here I come biaaatch! Who tha fuck supports Perl? Dum diddy-dum, here I come biaaatch! Who tha fuck pimps it? Why is it free?"
.IX Subsection "Dum diddy-dum, here I come biaaatch! Who tha fuck supports Perl? Dum diddy-dum, here I come biaaatch! Who tha fuck pimps it? Why is it free?"
Da original gangsta culture of tha pre-populist Internizzle n' tha deeply-held
beliefz of Perlz lyricist, Larry Wall, gave rise ta tha free n' open
distribution policy of Perl. Perl is supported by its users. The
core, tha standard Perl library, tha optionizzle modules, n' the
documentation you readin now was all freestyled by volunteers.
.PP
Da core pimpment crew (known as tha Perl Porters)
are a crew of highly altruistic dudes committed to
producin betta software fo' free than you could hope ta purchase for
money. Yo ass may snoop on pendin pimpments via the
archives <http://www.nntp.perl.org/group/perl.perl5.porters/>
or read tha faq <http://dev.perl.org/perl5/docs/p5p-faq.html>,
or you can subscribe ta tha mailin list by sending
perl5\-porters\-subscribe@perl.org a subscription request
(an empty message wit no subject is fine).
.PP
While tha \s-1GNU\s0 project includes Perl up in its distributions, there be a no
such thang as \*(L"\s-1GNU\s0 Perl\*(R". Perl aint produced nor maintained by the
Jacked Software Foundation. I aint talkin' bout chicken n' gravy biatch. Perlz licensin terms is also mo' open
than \s-1GNU\s0 softwarez tend ta be.
.PP
Yo ass can git commercial support of Perl if you wish, although fo' most
users tha informal support will mo' than suffice. Right back up in yo muthafuckin ass. See tha answer to
\&\*(L"Where can I loot a cold-ass lil commercial version of Perl?\*(R" fo' mo' shiznit.
.SS "Which version of Perl should I use?"
.IX Subsection "Which version of Perl should I use?"
(contributed by brian d foy)
.PP
There is often a matta of opinion n' taste, n' there aint no damn one
answer dat fits everyone. In general, you wanna use either tha current
stable release, or tha stable release immediately prior ta dat one.
Currently, dem is perl5.14.x n' perl5.12.x, respectively.
.PP
Beyond that, you gotta consider nuff muthafuckin thangs n' decizzle which is best
for yo thugged-out ass.
.IP "\(bu" 4
If thangs aren't broken, upgradin perl may break dem (or at least issue
new warnings).
.IP "\(bu" 4
Da sickest fuckin versionz of perl have mo' bug fixes.
.IP "\(bu" 4
Da Perl hood is geared toward supportin da most thugged-out recent releases,
so you gonna have a easier time findin help fo' them.
.IP "\(bu" 4
Versions prior ta perl5.004 had straight-up securitizzle problems wit buffer
overflows, n' up in some cases have \s-1CERT\s0 advisories (for instance,
<http://www.cert.org/advisories/CA\-1997\-17.html> ).
.IP "\(bu" 4
Da sickest fuckin versions is probably tha least deployed n' widely tested, so
you may wanna wait all dem months afta they release n' peep what
problems others have if yo ass is risk averse.
.IP "\(bu" 4
Da immediate, previous releases (i.e. perl5.8.x ) is probably maintained
for a while, although not all up in tha same level as tha current releases.
.IP "\(bu" 4
No one be actively supportin Perl 4. Ten muthafuckin years ago dat shiznit was a thugged-out dead
camel carcass (accordin ta dis document). Now itz barely a skeleton
as its whitewashed bones have fractured or eroded.
.IP "\(bu" 4
Da current leadin implementation of Perl 6, Rakudo, busted out a \*(L"useful,
usable, 'early adopter'\*(R" distribution of Perl 6 (called Rakudo Star) up in July of
2010. Please peep <http://rakudo.org/> fo' mo' shiznit.
.IP "\(bu" 4
There is straight-up two trackz of perl pimpment: a maintenizzle version
and a experimenstrual version. I aint talkin' bout chicken n' gravy biatch. Da maintenizzle versions is stable, and
have a even number as tha minor release (i.e. perl5.10.x, where 10 is the
minor release). Da experimenstrual versions may include features that
don't make it tha fuck into tha stable versions, n' have a odd number as the
minor release (i.e. perl5.9.x, where 9 is tha minor release).
.SS "What is Perl 4, Perl 5, or Perl 6?"
.IX Subsection "What is Perl 4, Perl 5, or Perl 6?"
In short, Perl 4 is tha parent ta both Perl 5 n' Perl 6. Perl 5 is tha older
sibling, n' though they is different languages, one of mah thugs whoz ass knows one will
spot nuff similaritizzles up in tha other.
.PP
Da number afta Perl (i.e. tha 5 afta Perl 5) is tha major release
of tha perl interpreta as well as tha version of tha language. Each
major version has dope differences dat earlier versions cannot
support.
.PP
Da current major release of Perl is Perl 5, first busted out in
1994. Well shiiiit, it can run scripts from tha previous major release, Perl 4
(March 1991) yo, but has dope differences.
.PP
Perl 6 be a reinvention of Perl, it aint nuthin but a language up in tha same lineage but
not compatible. Da two is complementary, not mutually exclusive. Perl 6 is
not meant ta replace Perl 5, n' vice versa. Right back up in yo muthafuckin ass. See \*(L"What tha fuck iz Perl 6?\*(R" below
to smoke up more.
.PP
See perlhist fo' a history of Perl revisions.
.SS "What tha fuck iz Perl 6?"
.IX Subsection "What tha fuck iz Perl 6?"
Perl 6 was \fIoriginally\fR busted lyrics bout as tha hoodz rewrite of Perl 5.
Development started up in 2002; syntax n' design work continue ta dis day.
As tha language has evolved, it has become clear dat it aint nuthin but a separate
language, incompatible wit Perl 5 but up in tha same language crew.
.PP
Contrary ta ghettofab belief, Perl 6 n' Perl 5 peacefully coexist wit one
another n' shit. Perl 6 has proven ta be a gangbangin' fascinatin source of scams fo' them
usin Perl 5 (the Moose object system be a well-known example). There is
overlap up in tha communities, n' dis overlap fostas tha tradizzle of sharing
and borrowin dat done been instrumenstrual ta Perlz success. Da current
leadin implementation of Perl 6 is Rakudo, n' you can learn mo' about
it at <http://rakudo.org>.
.PP
If you wanna learn mo' bout Perl 6, or gotz a thugged-out desire ta help in
the crusade ta make Perl a funky-ass betta place then read tha Perl 6 pimpers
page at <http://www.perl6.org/> n' git involved.
.PP
\&\*(L"We straight-up straight-up bout reinventin every last muthafuckin thang dat needz reinventing.\*(R"
\&\-\-Larry Wall
.SS "How tha fuck stable is Perl?"
.IX Subsection "How tha fuck stable is Perl?"
Production releases, which incorporate bug fixes n' freshly smoked up functionality,
are widely tested before release. Right back up in yo muthafuckin ass. Since tha 5.000 release, our crazy asses have
averaged bout one thang release per year.
.PP
Da Perl pimpment crew occasionally make chizzlez ta the
internal core of tha language yo, but all possible efforts is made toward
backward compatibility.
.SS "Is Perl hard as fuck ta learn?"
.IX Subsection "Is Perl hard as fuck ta learn?"
Fuck dat shit, Perl is easy as fuck  ta start peepin' <http://learn.perl.org/> \-\-and easy as fuck  ta keep peepin'. Well shiiiit, it looks
like most programmin languages you likely ta have experience
with, so if you've eva freestyled a C program, a awk script, a gangbangin' finger-lickin' dirty-ass shell
script, or even a \s-1BASIC\s0 program, you already partway there.
.PP
Most tasks only require a lil' small-ass subset of tha Perl language. One of
the guidin mottos fo' Perl pimpment is \*(L"therez mo' than one way
to do it\*(R" (\s-1TMTOWTDI,\s0 sometimes pronounced \*(L"tim toady\*(R"). Perl's
learnin curve is therefore shallow (easy ta learn) n' long (there's
a whole lot you can do if you straight-up want).
.PP
Finally, cuz Perl is frequently (but not always, n' certainly not by
definition) a interpreted language, you can write yo' programs n' test
them without a intermediate compilation step, allowin you ta experiment
and test/debug quickly n' doggystyle. This ease of experimentation flattens
the peepin' curve even more.
.PP
Things dat make Perl easier ta learn: Unix experience, almost any kind
of programmin experience, a understandin of regular expressions, and
the mobilitizzle ta KNOW other peoplez code. If there be a suttin' you
need ta do, then itz probably already been done, n' a hustlin example is
usually available fo' free. Don't forget Perl modules, either.
They're discussed up in Part 3 of dis \s-1FAQ,\s0 along wit \s-1CPAN\s0 <http://www.cpan.org/>, which is
discussed up in Part 2.
.SS "How tha fuck do Perl compare wit other languages like Java, Python, \s-1REXX,\s0 Scheme, or Tcl?"
.IX Subsection "How tha fuck do Perl compare wit other languages like Java, Python, REXX, Scheme, or Tcl?"
Perl can be used fo' almost any codin problem, even ones which require
integratin specialist C code fo' extra speed. Y'all KNOW dat shit, muthafucka! As wit any tool it can
be used well or badly. Perl has nuff strengths, n' all dem weaknesses,
precisely which areas is phat n' wack is often a underground chizzle.
.PP
When choosin a language you should also be hyped up by the
resources <http://www.cpan.org/>, testin culture <http://www.cpantesters.org/>
and hood <http://www.perl.org/community.html> which surroundz dat shit.
.PP
For comparisons ta a specific language it is often dopest ta create
a lil' small-ass project up in both languages n' compare tha thangs up in dis biatch, make sure
to use all tha resources <http://www.cpan.org/> of each language,
as a language is far mo' than just itz syntax.
.SS "Can I do [task] up in Perl?"
.IX Subsection "Can I do [task] up in Perl?"
Perl is flexible n' extensible enough fo' you ta use on virtually any
task, from one-line file-processin tasks ta large, elaborate systems.
.PP
For nuff people, Perl serves as a pimped out replacement fo' shell scripting.
For others, it serves as a cold-ass lil convenient, high-level replacement fo' most of
what they'd program up in low-level languages like C or \*(C+. It aint nuthin but ultimately
up ta you (and possibly yo' pimpment) which tasks you gonna use Perl
for n' which you won't.
.PP
If you gotz a library dat serves up a \s-1API,\s0 you can make any component
of it available as just another Perl function or variable rockin a Perl
extension freestyled up in C or \*(C+ n' dynamically linked tha fuck into yo' main
perl interpreter n' shit. Yo ass can also go tha other direction, n' write your
main program up in C or \*(C+, n' then link up in some Perl code on tha fly,
to create a bangin application. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See perlembed.
.PP
That holla'd, there will always be small, focused, special-purpose
languages all bout a specific problem domain dat is simply more
convenient fo' certain kindz of problems. Perl tries ta be all thangs
to all playas yo, but not a god damn thang special ta mah playas. Examplez of specialized
languages dat come ta mind include prolog n' matlab.
.SS "When shouldn't I program up in Perl?"
.IX Subsection "When shouldn't I program up in Perl?"
One phat reason is when you already have a existing
application freestyled up in another language thatz all done (and done
well), or you have a application language specifically designed fo' a
certain task (e.g. prolog, make).
.PP
If you find dat you need ta speed up a specific part of a Perl
application (not suttin' you often need) you may wanna use C,
but you can access dis from yo' Perl code wit perlxs.
.ie n .SS "Whatz tha difference between ""perl"" n' ""Perl""?"
.el .SS "Whatz tha difference between ``perl'' n' ``Perl''?"
.IX Subsection "Whatz tha difference between perl n' Perl?"
\&\*(L"Perl\*(R" is tha name of tha language. Only tha \*(L"P\*(R" is capitalized.
Da name of tha interpreta (the program which runs tha Perl script)
is \*(L"perl\*(R" wit a lowercase \*(L"p\*(R".
.PP
Yo ass may or may not chizzle ta follow dis usage. But never write \*(L"\s-1PERL\*(R",\s0
because perl aint a acronym.
.SS "What tha fuck iz a \s-1JAPH\s0?"
.IX Subsection "What tha fuck iz a JAPH?"
(contributed by brian d foy)
.PP
\&\s-1JAPH\s0 standz fo' \*(L"Just another Perl hacker,\*(R", which Randal Schwartz used
to sign email n' usenet lyrics startin up in tha late 1980s yo. He
previously used tha phrase wit nuff subjects (\*(L"Just another x hacker,\*(R"),
so ta distinguish his \s-1JAPH,\s0 da perved-out muthafucka started ta write dem as Perl programs:
.PP
.Vb 1
\&    print "Just another Perl hacker,";
.Ve
.PP
Other playas picked up on dis n' started ta write smart-ass or obfuscated
programs ta produce tha same output, spinnin thangs quickly up of
control while still providin minutez of amusement fo' they creators and
readers.
.PP
\&\s-1CPAN\s0 has nuff muthafuckin \s-1JAPH\s0 programs at <http://www.cpan.org/misc/japh>.
.SS "How tha fuck can I convince others ta use Perl?"
.IX Subsection "How tha fuck can I convince others ta use Perl?"
(contributed by brian d foy)
.PP
Appeal ta they self interest son! If Perl is freshly smoked up (and thus freaky) ta them,
find suttin' dat Perl can do ta solve one of they problems. That
might mean dat Perl either saves dem suttin' (time, headaches, scrilla)
or gives dem suttin' (flexibility, power, testability).
.PP
In general, tha benefit of a language is closely related ta tha skill of
the playas rockin dat language. If you or yo' crew can be faster,
better, n' stronger all up in Perl, you gonna serve up mo' value. Remember,
people often respond betta ta what tha fuck they git outta dat shit. If you run
into resistance, figure up what tha fuck dem playas git outta tha other
choice n' how tha fuck Perl might satisfy dat requirement.
.PP
Yo ass don't gotta worry bout findin or payin fo' Perl; itz freely
available n' nuff muthafuckin ghettofab operatin systems come wit Perl. Community
support up in places like fuckin Perlmonks ( <http://www.perlmonks.com> )
and tha various Perl mailin lists ( <http://lists.perl.org> ) means that
you can probably git quick lyrics ta yo' problems.
.PP
Finally, keep up in mind dat Perl might not be tha right tool fo' every
job. Yo ass be a much betta advocate if yo' fronts is reasonable and
grounded up in reality. Dogmatically advocatin anythang tendz ta make
people discount yo' message. Be real bout possible disadvantages
to yo' chizzle of Perl since any chizzle has trade-offs.
.PP
Yo ass might find these links useful:
.IP "\(bu" 4
<http://www.perl.org/about.html>
.IP "\(bu" 4
<http://perltraining.com.au/whyperl.html>
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Copyright (c) 1997\-2010 Tomothy Christiansen, Nathan Torkington, and
other authors as noted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. All muthafuckin rights reserved.
.PP
This documentation is free; you can redistribute it and/or modify it
under tha same terms as Perl itself.
.PP
Irrespectizzle of its distribution, all code examplez here is up in tha public
domain. I aint talkin' bout chicken n' gravy biatch. Yo ass is permitted n' encouraged ta use dis code n' any
derivatives thereof up in yo' own programs fo' funk or fo' profit as you
see fit fo' realz. A simple comment up in tha code givin credit ta tha \s-1FAQ\s0 would
be courteous but aint required.
