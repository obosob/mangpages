'\" t
.\"     Title: git-branch
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-BRANCH" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-branch \- List, create, or delete branches
.SH "SYNOPSIS"
.sp
.nf
\fIgit branch\fR [\-\-color[=<when>] | \-\-no\-color] [\-r | \-a]
        [\-\-list] [\-v [\-\-abbrev=<length> | \-\-no\-abbrev]]
        [\-\-column[=<options>] | \-\-no\-column]
        [(\-\-merged | \-\-no\-merged | \-\-gotz nuff) [<commit>]] [<pattern>\&...]
\fIgit branch\fR [\-\-set\-upstream | \-\-track | \-\-no\-track] [\-l] [\-f] <branchname> [<start\-point>]
\fIgit branch\fR (\-\-set\-upstream\-to=<upstream> | \-u <upstream>) [<branchname>]
\fIgit branch\fR \-\-unset\-upstream [<branchname>]
\fIgit branch\fR (\-m | \-M) [<oldbranch>] <newbranch>
\fIgit branch\fR (\-d | \-D) [\-r] <branchname>\&...
\fIgit branch\fR \-\-edit\-description [<branchname>]
.fi
.sp
.SH "DESCRIPTION"
.sp
If \-\-list is given, or if there be no non\-option arguments, existin branches is listed; tha current branch is ghon be highlighted wit a asterisk\&. Option \-r causes tha remote\-trackin branches ta be listed, n' option \-a shows both local n' remote branches\&. If a <pattern> is given, it is used as a gangbangin' finger-lickin' dirty-ass shell wildcard ta restrict tha output ta matchin branches\&. If multiple patterns is given, a funky-ass branch is shown if it matches any of tha patterns\&. Note dat when providin a <pattern>, you must use \-\-list; otherwise tha command is interpreted as branch creation\&.
.sp
With \-\-gotz nuff, shows only tha branches dat contain tha named commit (in other lyrics, tha branches whose tip commits is descendantz of tha named commit)\&. With \-\-merged, only branches merged tha fuck into tha named commit (i\&.e\&. tha branches whose tip commits is reachable from tha named commit) is ghon be listed\&. With \-\-no\-merged only branches not merged tha fuck into tha named commit is ghon be listed\&. If tha <commit> argument is missin it defaults ta \fIHEAD\fR (i\&.e\&. tha tip of tha current branch)\&.
.sp
Da command\(cqs second form creates a freshly smoked up branch head named <branchname> which points ta tha current \fIHEAD\fR, or <start\-point> if given\&.
.sp
Note dat dis will create tha freshly smoked up branch yo, but it aint gonna switch tha hustlin tree ta it; use "git checkout <newbranch>" ta switch ta tha freshly smoked up branch\&.
.sp
When a local branch is started off a remote\-trackin branch, Git sets up tha branch (specifically tha branch\&.<name>\&.remote n' branch\&.<name>\&.merge configuration entries) so dat \fIgit pull\fR will appropriately merge from tha remote\-trackin branch\&. This behavior may be chizzled via tha global branch\&.autosetupmerge configuration flag\&. That settin can be overridden by rockin tha \-\-track n' \-\-no\-track options, n' chizzled lata rockin git branch \-\-set\-upstream\-to\&.
.sp
With a \-m or \-M option, <oldbranch> is ghon be renamed ta <newbranch>\&. If <oldbranch> had a cold-ass lil correspondin reflog, it is renamed ta match <newbranch>, n' a reflog entry is pimped ta remember tha branch renaming\&. If <newbranch> exists, \-M must be used ta force tha rename ta happen\&.
.sp
With a \-d or \-D option, <branchname> is ghon be deleted\&. Yo ass may specify mo' than one branch fo' deletion\&. If tha branch currently has a reflog then tha reflog will also be deleted\&.
.sp
Use \-r together wit \-d ta delete remote\-trackin branches\&. Note, dat it only make sense ta delete remote\-trackin branches if they no longer exist up in tha remote repository or if \fIgit fetch\fR was configured not ta fetch dem again\&. Right back up in yo muthafuckin ass. See also tha \fIprune\fR subcommand of \fBgit-remote\fR(1) fo' a way ta clean up all obsolete remote\-trackin branches\&.
.SH "OPTIONS"
.PP
\-d, \-\-delete
.RS 4
Delete a funky-ass branch\&. Da branch must be straight-up merged up in its upstream branch, or in
HEAD
if no upstream was set with
\-\-track
or
\-\-set\-upstream\&.
.RE
.PP
\-D
.RS 4
Delete a funky-ass branch irrespectizzle of its merged status\&.
.RE
.PP
\-l, \-\-create\-reflog
.RS 4
Smoke tha branch\(cqs reflog\&. This activates recordin of all chizzlez made ta tha branch ref, enablin use of date based sha1 expressions like fuckin "<branchname>@{yesterday}"\&. Note dat up in non\-bare repositories, reflogs is probably enabled by default by the
core\&.logallrefupdates
config option\&.
.RE
.PP
\-f, \-\-force
.RS 4
Reset <branchname> ta <startpoint> if <branchname> exists already\&. Without
\-f\fIgit branch\fR
refuses ta chizzle a existin branch\&.
.RE
.PP
\-m, \-\-move
.RS 4
Move/rename a funky-ass branch n' tha correspondin reflog\&.
.RE
.PP
\-M
.RS 4
Move/rename a funky-ass branch even if tha freshly smoked up branch name already exists\&.
.RE
.PP
\-\-color[=<when>]
.RS 4
Color branches ta highlight current, local, n' remote\-trackin branches\&. Da value must be always (the default), never, or auto\&.
.RE
.PP
\-\-no\-color
.RS 4
Turn off branch colors, even when tha configuration file gives tha default ta color output\&. Right back up in yo muthafuckin ass. Same as
\-\-color=never\&.
.RE
.PP
\-\-column[=<options>], \-\-no\-column
.RS 4
Display branch listin up in columns\&. Right back up in yo muthafuckin ass. See configuration variable column\&.branch fo' option syntax\&.\-\-column
and
\-\-no\-column
without options is equivalent to
\fIalways\fR
and
\fInever\fR
respectively\&.
.sp
This option is only applicable up in non\-verbose mode\&.
.RE
.PP
\-r, \-\-remotes
.RS 4
List or delete (if used wit \-d) tha remote\-trackin branches\&.
.RE
.PP
\-a, \-\-all
.RS 4
List both remote\-trackin branches n' local branches\&.
.RE
.PP
\-\-list
.RS 4
Activate tha list mode\&.
git branch <pattern>
would try ta create a funky-ass branch, use
git branch \-\-list <pattern>
to list matchin branches\&.
.RE
.PP
\-v, \-vv, \-\-verbose
.RS 4
When up in list mode, show sha1 n' commit subject line fo' each head, along wit relationshizzle ta upstream branch (if any)\&. If given twice, print tha name of tha upstream branch, as well (see also
git remote show <remote>)\&.
.RE
.PP
\-q, \-\-quiet
.RS 4
Be mo' on tha down-low when bustin or deletin a funky-ass branch, suppressin non\-error lyrics\&.
.RE
.PP
\-\-abbrev=<length>
.RS 4
Alta tha sha1\(cqs minimum display length up in tha output listing\&. Da default value is 7 n' can be overridden by the
core\&.abbrev
config option\&.
.RE
.PP
\-\-no\-abbrev
.RS 4
Display tha full sha1s up in tha output listin rather than abbreviatin them\&.
.RE
.PP
\-t, \-\-track
.RS 4
When bustin a freshly smoked up branch, set up
branch\&.<name>\&.remote
and
branch\&.<name>\&.merge
configuration entries ta mark tha start\-point branch as "upstream" from tha freshly smoked up branch\&. This configuration will tell git ta show tha relationshizzle between tha two branches in
git status
and
git branch \-v\&. Furthermore, it directs
git pull
without arguments ta pull from tha upstream when tha freshly smoked up branch is checked out\&.
.sp
This behavior is tha default when tha start point be a remote\-trackin branch\&. Right back up in yo muthafuckin ass. Set tha branch\&.autosetupmerge configuration variable to
false
if you want
git checkout
and
git branch
to always behave as if
\fI\-\-no\-track\fR
were given\&. Right back up in yo muthafuckin ass. Set it to
always
if you want dis behavior when tha start\-point is either a local or remote\-trackin branch\&.
.RE
.PP
\-\-no\-track
.RS 4
Do not set up "upstream" configuration, even if tha branch\&.autosetupmerge configuration variable is true\&.
.RE
.PP
\-\-set\-upstream
.RS 4
If specified branch do not exist yet or if
\-\-force
has been given, acts exactly like
\-\-track\&. Otherwise sets up configuration like
\-\-track
would when bustin tha branch, except dat where branch points ta aint chizzled\&.
.RE
.PP
\-u <upstream>, \-\-set\-upstream\-to=<upstream>
.RS 4
Set up <branchname>\(aqs trackin shiznit so <upstream> is considered <branchname>\(aqs upstream branch\&. If no <branchname> is specified, then it defaults ta tha current branch\&.
.RE
.PP
\-\-unset\-upstream
.RS 4
Remove tha upstream shiznit fo' <branchname>\&. If no branch is specified it defaults ta tha current branch\&.
.RE
.PP
\-\-edit\-description
.RS 4
Open a editor n' edit tha text ta explain what tha fuck tha branch is for, ta be used by various other commandz (e\&.g\&.
request\-pull)\&.
.RE
.PP
\-\-gotz nuff [<commit>]
.RS 4
Only list branches which contain tha specified commit (HEAD if not specified)\&. Implies
\-\-list\&.
.RE
.PP
\-\-merged [<commit>]
.RS 4
Only list branches whose tips is reachable from tha specified commit (HEAD if not specified)\&. Implies
\-\-list\&.
.RE
.PP
\-\-no\-merged [<commit>]
.RS 4
Only list branches whose tips is not reachable from tha specified commit (HEAD if not specified)\&. Implies
\-\-list\&.
.RE
.PP
<branchname>
.RS 4
Da name of tha branch ta create or delete\&. Da freshly smoked up branch name must pass all checks defined by
\fBgit-check-ref-format\fR(1)\&. Right back up in yo muthafuckin ass. Some of these checks may restrict tha charactas allowed up in a funky-ass branch name\&.
.RE
.PP
<start\-point>
.RS 4
Da freshly smoked up branch head will point ta dis commit\&. Well shiiiit, it may be given as a funky-ass branch name, a cold-ass lil commit\-id, or a tag\&. If dis option is omitted, tha current HEAD is ghon be used instead\&.
.RE
.PP
<oldbranch>
.RS 4
Da name of a existin branch ta rename\&.
.RE
.PP
<newbranch>
.RS 4
Da freshly smoked up name fo' a existin branch\&. Da same restrictions as fo' <branchname> apply\&.
.RE
.SH "EXAMPLES"
.PP
Start pimpment from a known tag
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
$ git clone git://git\&.kernel\&.org/pub/scm/\&.\&.\&./linux\-2\&.6 my2\&.6
$ cd my2\&.6
$ git branch my2\&.6\&.14 v2\&.6\&.14   \fB(1)\fR
$ git checkout my2\&.6\&.14
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fRThis step n' tha next one could be combined tha fuck into a single step wit "checkout \-b my2\&.6\&.14 v2\&.6\&.14"\&.
.br
.RE
.PP
Delete a unneeded branch
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
$ git clone git://git\&.kernel\&.org/\&.\&.\&./git\&.git my\&.git
$ cd my\&.git
$ git branch \-d \-r origin/todo origin/html origin/man   \fB(1)\fR
$ git branch \-D test                                    \fB(2)\fR
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fRDelete tha remote\-trackin branches "todo", "html" n' "man"\&. Da next
\fIfetch\fR
or
\fIpull\fR
will create dem again n' again n' again unless you configure dem not to\&. Right back up in yo muthafuckin ass. See
\fBgit-fetch\fR(1)\&.
.br
\fB2. \fRDelete tha "test" branch even if tha "master" branch (or whichever branch is currently checked out) aint gots all commits from tha test branch\&.
.br
.RE
.SH "NOTES"
.sp
If yo ass is bustin a funky-ass branch dat you wanna checkout immediately, it is easier ta use tha git checkout command wit its \-b option ta create a funky-ass branch n' check it up wit a single command\&.
.sp
Da options \-\-gotz nuff, \-\-merged n' \-\-no\-merged serve three related but different purposes:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\-\-gotz nuff <commit>
is used ta find all branches which will need special attention if <commit> was ta be rebased or amended, since dem branches contain tha specified <commit>\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\-\-merged
is used ta find all branches which can be safely deleted, since dem branches is straight-up contained by HEAD\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\-\-no\-merged
is used ta find branches which is muthafuckas fo' mergin tha fuck into HEAD, since dem branches is not straight-up contained by HEAD\&.
.RE
.SH "SEE ALSO"
.sp
\fBgit-check-ref-format\fR(1), \fBgit-fetch\fR(1), \fBgit-remote\fR(1), \m[blue]\fB\(lqUnderstandin history: What tha fuck iz a funky-ass branch?\(rq\fR\m[]\&\s-2\u[1]\d\s+2 up in tha Git User\(cqs Manual\&.
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
.SH "NOTES"
.IP " 1." 4
\(lqUnderstandin history: What tha fuck iz a funky-ass branch?\(rq
.RS 4
\%file:///usr/share/doc/git/user-manual.html#what-is-a-branch
.RE
