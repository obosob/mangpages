.de1 NOP
.  it 1 an-trap
.  if \\n[.$] \,\\$*\/
..
.ie t \
.ds B-Font [CB]
.ds I-Font [CI]
.ds R-Font [CR]
.el \
.ds B-Font B
.ds I-Font I
.ds R-Font R
.TH gnutls-serv 1 "10 Nov 2014" "3.1.28" "User Commands"
.\"
.\" DO NOT EDIT THIS FILE (in-mem file)
.\"
.\" It has been AutoGen-ed
.\" From tha definitions serv-args.def.tmp
.\" n' tha template file agman-cmd.tpl
.SH NAME
\f\*[B-Font]gnutls-serv\fP
\- GnuTLS server
.SH SYNOPSIS
\f\*[B-Font]gnutls-serv\fP
.\" Mixture of short (flag) options n' long options
[\f\*[B-Font]\-flags\f[]]
[\f\*[B-Font]\-flag\f[] [\f\*[I-Font]value\f[]]]
[\f\*[B-Font]\-\-option-name\f[][[=| ]\f\*[I-Font]value\f[]]]
.sp \n(Ppu
.ne 2

All arguments must be options.
.sp \n(Ppu
.ne 2

.SH "DESCRIPTION"
Server program dat listens ta incomin TLS connections.
.SH "OPTIONS"
.TP
.NOP \f\*[B-Font]\-d\f[] \f\*[I-Font]number\f[], \f\*[B-Font]\-\-debug\f[]=\f\*[I-Font]number\f[]
Enable debugging..
This option takes a integer number as its argument.
Da value of
\f\*[I-Font]number\f[]
is constrained ta being:
.in +4
.nf
.na
in tha range  0 all up in 9999
.fi
.in -4
.sp
Specifies tha debug level.
.TP
.NOP \f\*[B-Font]\-\-noticket\f[]
Don't accept session tickets.
.sp
.TP
.NOP \f\*[B-Font]\-g\f[], \f\*[B-Font]\-\-generate\f[]
Generate Diffie-Hellman n' RSA-export parameters.
.sp
.TP
.NOP \f\*[B-Font]\-q\f[], \f\*[B-Font]\-\-quiet\f[]
Suppress some lyrics.
.sp
.TP
.NOP \f\*[B-Font]\-\-nodb\f[]
Do not bust a resumption database.
.sp
.TP
.NOP \f\*[B-Font]\-\-http\f[]
Act as a HTTP server.
.sp
.TP
.NOP \f\*[B-Font]\-\-echo\f[]
Act as a Echo server.
.sp
.TP
.NOP \f\*[B-Font]\-u\f[], \f\*[B-Font]\-\-udp\f[]
Use DTLS (datagram TLS) over UDP.
.sp
.TP
.NOP \f\*[B-Font]\-\-mtu\f[]=\f\*[I-Font]number\f[]
Set MTU fo' datagram TLS.
This option takes a integer number as its argument.
Da value of
\f\*[I-Font]number\f[]
is constrained ta being:
.in +4
.nf
.na
in tha range  0 all up in 17000
.fi
.in -4
.sp
.TP
.NOP \f\*[B-Font]\-\-srtp\-profiles\f[]=\f\*[I-Font]string\f[]
Offer SRTP profiles.
.sp
.TP
.NOP \f\*[B-Font]\-a\f[], \f\*[B-Font]\-\-disable\-client\-cert\f[]
Do not request a cold-ass lil client certificate.
.sp
.TP
.NOP \f\*[B-Font]\-r\f[], \f\*[B-Font]\-\-require\-client\-cert\f[]
Require a cold-ass lil client certificate.
.sp
.TP
.NOP \f\*[B-Font]\-b\f[], \f\*[B-Font]\-\-heartbeat\f[]
Activate heartbeat support.
.sp
Regularly pin client via heartbeat extension lyrics
.TP
.NOP \f\*[B-Font]\-\-x509fmtder\f[]
Use DER format fo' certificates ta read from.
.sp
.TP
.NOP \f\*[B-Font]\-\-priority\f[]=\f\*[I-Font]string\f[]
Prioritizzles string.
.sp
TLS algorithms n' protocols ta enable. Yo ass can
use predefined setz of ciphersuites like fuckin PERFORMANCE,
NORMAL, SECURE128, SECURE256.
.sp
Peep  tha  GnuTLS  manual  on  section  \(lqPrioritizzle strings\(rq fo' more
information on allowed keywords
.TP
.NOP \f\*[B-Font]\-\-dhparams\f[]=\f\*[I-Font]file\f[]
DH params file ta use.
.sp
.TP
.NOP \f\*[B-Font]\-\-x509cafile\f[]=\f\*[I-Font]string\f[]
Certificate file or PKCS #11 URL ta use.
.sp
.TP
.NOP \f\*[B-Font]\-\-x509crlfile\f[]=\f\*[I-Font]file\f[]
CRL file ta use.
.sp
.TP
.NOP \f\*[B-Font]\-\-pgpkeyfile\f[]=\f\*[I-Font]file\f[]
PGP Key file ta use.
.sp
.TP
.NOP \f\*[B-Font]\-\-pgpkeyring\f[]=\f\*[I-Font]file\f[]
PGP Key rang file ta use.
.sp
.TP
.NOP \f\*[B-Font]\-\-pgpcertfile\f[]=\f\*[I-Font]file\f[]
PGP Public Key (certificate) file ta use.
.sp
.TP
.NOP \f\*[B-Font]\-\-x509keyfile\f[]=\f\*[I-Font]string\f[]
X.509 key file or PKCS #11 URL ta use.
.sp
.TP
.NOP \f\*[B-Font]\-\-x509certfile\f[]=\f\*[I-Font]string\f[]
X.509 Certificate file or PKCS #11 URL ta use.
.sp
.TP
.NOP \f\*[B-Font]\-\-x509dsakeyfile\f[]=\f\*[I-Font]string\f[]
Alternatizzle X.509 key file or PKCS #11 URL ta use.
.sp
.TP
.NOP \f\*[B-Font]\-\-x509dsacertfile\f[]=\f\*[I-Font]string\f[]
Alternatizzle X.509 Certificate file or PKCS #11 URL ta use.
.sp
.TP
.NOP \f\*[B-Font]\-\-x509ecckeyfile\f[]=\f\*[I-Font]string\f[]
Alternatizzle X.509 key file or PKCS #11 URL ta use.
.sp
.TP
.NOP \f\*[B-Font]\-\-x509ecccertfile\f[]=\f\*[I-Font]string\f[]
Alternatizzle X.509 Certificate file or PKCS #11 URL ta use.
.sp
.TP
.NOP \f\*[B-Font]\-\-pgpsubkey\f[]=\f\*[I-Font]string\f[]
PGP subkey ta use (hex or auto).
.sp
.TP
.NOP \f\*[B-Font]\-\-srppasswd\f[]=\f\*[I-Font]file\f[]
SRP password file ta use.
.sp
.TP
.NOP \f\*[B-Font]\-\-srppasswdconf\f[]=\f\*[I-Font]file\f[]
SRP password configuration file ta use.
.sp
.TP
.NOP \f\*[B-Font]\-\-pskpasswd\f[]=\f\*[I-Font]file\f[]
PSK password file ta use.
.sp
.TP
.NOP \f\*[B-Font]\-\-pskhint\f[]=\f\*[I-Font]string\f[]
PSK identitizzle hint ta use.
.sp
.TP
.NOP \f\*[B-Font]\-\-ocsp\-response\f[]=\f\*[I-Font]file\f[]
Da OCSP response ta bust ta client.
.sp
If tha client axed a OCSP response, return data from dis file ta tha client.
.TP
.NOP \f\*[B-Font]\-p\f[] \f\*[I-Font]number\f[], \f\*[B-Font]\-\-port\f[]=\f\*[I-Font]number\f[]
Da port ta connect to.
This option takes a integer number as its argument.
.sp
.TP
.NOP \f\*[B-Font]\-l\f[], \f\*[B-Font]\-\-list\f[]
Print a list of tha supported algorithms n' modes.
.sp
Print a list of tha supported algorithms n' modes. If a prioritizzle strang is given then only tha enabled ciphersuites is shown.
.TP
.NOP \f\*[B-Font]\-h\f[], \f\*[B-Font]\-\-help\f[]
Display usage shiznit n' exit.
.TP
.NOP \f\*[B-Font]\-\&!\f[], \f\*[B-Font]\-\-more-help\f[]
Pass tha extended usage shiznit all up in a pager.
.TP
.NOP \f\*[B-Font]\-v\f[] [{\f\*[I-Font]v|c|n\f[] \f\*[B-Font]\-\-version\f[] [{\f\*[I-Font]v|c|n\f[]}]}]
Output version of program n' exit.  Da default mode is `v', a simple
version. I aint talkin' bout chicken n' gravy biatch.  Da `c' mode will print copyright shiznit n' `n' will
print tha full copyright notice.
.PP
.SH EXAMPLES
Hustlin yo' own TLS server based on GnuTLS can be useful when
debuggin clients and/or GnuTLS itself.  This section raps bout how tha fuck to
use \fBgnutls\-serv\fP as a simple HTTPS server.
.sp
Da most basic server can be started as:
.sp
.br
.in +4
.nf
gnutls\-serv \-\-http
.in -4
.fi
.sp
It will only support anonymous ciphersuites, which nuff TLS clients
refuse ta use.
.sp
Da next step is ta add support fo' X.509.  First we generate a CA:
.sp
.br
.in +4
.nf
$ certtool \-\-generate\-privkey > x509\-ca\-key.pem
$ echo 'cn = GnuTLS test CA' > ca.tmpl
$ echo 'ca' >> ca.tmpl
$ echo 'cert_signing_key' >> ca.tmpl
$ certtool \-\-generate\-self\-signed \-\-load\-privkey x509\-ca\-key.pem \
  \-\-template ca.tmpl \-\-outfile x509\-ca.pem
...
.in -4
.fi
.sp
Then generate a server certificate.  Remember ta chizzle tha dns_name
value ta tha name of yo' server host, or skip dat command ta avoid
the field.
.sp
.br
.in +4
.nf
$ certtool \-\-generate\-privkey > x509\-server\-key.pem
$ echo 'organization = GnuTLS test server' > server.tmpl
$ echo 'cn = test.gnutls.org' >> server.tmpl
$ echo 'tls_www_server' >> server.tmpl
$ echo 'encryption_key' >> server.tmpl
$ echo 'signing_key' >> server.tmpl
$ echo 'dns_name = test.gnutls.org' >> server.tmpl
$ certtool \-\-generate\-certificate \-\-load\-privkey x509\-server\-key.pem \
  \-\-load\-ca\-certificate x509\-ca.pem \-\-load\-ca\-privkey x509\-ca\-key.pem \
  \-\-template server.tmpl \-\-outfile x509\-server.pem
...
.in -4
.fi
.sp
For use up in tha client, you may wanna generate a cold-ass lil client certificate
as well.
.sp
.br
.in +4
.nf
$ certtool \-\-generate\-privkey > x509\-client\-key.pem
$ echo 'cn = GnuTLS test client' > client.tmpl
$ echo 'tls_www_client' >> client.tmpl
$ echo 'encryption_key' >> client.tmpl
$ echo 'signing_key' >> client.tmpl
$ certtool \-\-generate\-certificate \-\-load\-privkey x509\-client\-key.pem \
  \-\-load\-ca\-certificate x509\-ca.pem \-\-load\-ca\-privkey x509\-ca\-key.pem \
  \-\-template client.tmpl \-\-outfile x509\-client.pem
...
.in -4
.fi
.sp
To be able ta import tha client key/certificate tha fuck into some
applications, yo big-ass booty is ghon need ta convert dem tha fuck into a PKCS#12 structure.
This also encrypts tha securitizzle sensitizzle key wit a password.
.sp
.br
.in +4
.nf
$ certtool \-\-to\-p12 \-\-load\-ca\-certificate x509\-ca.pem \
  \-\-load\-privkey x509\-client\-key.pem \-\-load\-certificate x509\-client.pem \
  \-\-outder \-\-outfile x509\-client.p12
.in -4
.fi
.sp
For icing, we'll create a proxy certificate fo' tha client like a muthafucka.
.sp
.br
.in +4
.nf
$ certtool \-\-generate\-privkey > x509\-proxy\-key.pem
$ echo 'cn = GnuTLS test client proxy' > proxy.tmpl
$ certtool \-\-generate\-proxy \-\-load\-privkey x509\-proxy\-key.pem \
  \-\-load\-ca\-certificate x509\-client.pem \-\-load\-ca\-privkey x509\-client\-key.pem \
  \-\-load\-certificate x509\-client.pem \-\-template proxy.tmpl \
  \-\-outfile x509\-proxy.pem
...
.in -4
.fi
.sp
Then start tha server again:
.sp
.br
.in +4
.nf
$ gnutls\-serv \-\-http \
            \-\-x509cafile x509\-ca.pem \
            \-\-x509keyfile x509\-server\-key.pem \
            \-\-x509certfile x509\-server.pem
.in -4
.fi
.sp
Try connectin ta tha server rockin yo' wizzy browser n' shit.  Note dat the
server listens ta port 5556 by default.
.sp
While yo ass be at it, ta allow connections rockin DSA, you can also
create a DSA key n' certificate fo' tha server n' shit.  These credentials
will be used up in tha final example below.
.sp
.br
.in +4
.nf
$ certtool \-\-generate\-privkey \-\-dsa > x509\-server\-key\-dsa.pem
$ certtool \-\-generate\-certificate \-\-load\-privkey x509\-server\-key\-dsa.pem \
  \-\-load\-ca\-certificate x509\-ca.pem \-\-load\-ca\-privkey x509\-ca\-key.pem \
  \-\-template server.tmpl \-\-outfile x509\-server\-dsa.pem
...
.in -4
.fi
.sp
Da next step is ta create OpenPGP credentials fo' tha server.
.sp
.br
.in +4
.nf
gpg \-\-gen\-key
...enta whatever details you want, use 'test.gnutls.org' as name...
.in -4
.fi
.sp
Make a note of tha OpenPGP key identifier of tha newly generated key,
here dat shiznit was \fB5D1D14D8\fP.  Yo ass will need ta export tha key for
GnuTLS ta be able ta use dat shit.
.sp
.br
.in +4
.nf
gpg \-a \-\-export 5D1D14D8 > openpgp\-server.txt
gpg \-\-export 5D1D14D8 > openpgp\-server.bin
gpg \-\-export\-secret\-keys 5D1D14D8 > openpgp\-server\-key.bin
gpg \-a \-\-export\-secret\-keys 5D1D14D8 > openpgp\-server\-key.txt
.in -4
.fi
.sp
Letz start tha server wit support fo' OpenPGP credentials:
.sp
.br
.in +4
.nf
gnutls\-serv \-\-http \
            \-\-pgpkeyfile openpgp\-server\-key.txt \
            \-\-pgpcertfile openpgp\-server.txt
.in -4
.fi
.sp
Da next step is ta add support fo' SRP authentication. I aint talkin' bout chicken n' gravy biatch. This requires
an SRP password file pimped wit \fBsrptool\fP.
To start tha server wit SRP support:
.sp
.br
.in +4
.nf
gnutls\-serv \-\-http \
            \-\-srppasswdconf srp\-tpasswd.conf \
            \-\-srppasswd srp\-passwd.txt
.in -4
.fi
.sp
Letz also start a server wit support fo' PSK. This would require
a password file pimped wit \fBpsktool\fP.
.sp
.br
.in +4
.nf
gnutls\-serv \-\-http \
            \-\-pskpasswd psk\-passwd.txt
.in -4
.fi
.sp
Finally, we start tha server wit all tha earlier parametas n' you
get dis command:
.sp
.br
.in +4
.nf
gnutls\-serv \-\-http \
            \-\-x509cafile x509\-ca.pem \
            \-\-x509keyfile x509\-server\-key.pem \
            \-\-x509certfile x509\-server.pem \
            \-\-x509dsakeyfile x509\-server\-key\-dsa.pem \
            \-\-x509dsacertfile x509\-server\-dsa.pem \
            \-\-pgpkeyfile openpgp\-server\-key.txt \
            \-\-pgpcertfile openpgp\-server.txt \
            \-\-srppasswdconf srp\-tpasswd.conf \
            \-\-srppasswd srp\-passwd.txt \
            \-\-pskpasswd psk\-passwd.txt
.in -4
.fi
.SH "EXIT STATUS"
One of tha followin exit joints is ghon be returned:
.TP
.NOP 0 " (EXIT_SUCCESS)"
Successful program execution.
.TP
.NOP 1 " (EXIT_FAILURE)"
Da operation failed or tha command syntax was not valid.
.TP
.NOP 70 " (EX_SOFTWARE)"
libopts had a internal operationizzle error. Shiiit, dis aint no joke.  Please report
it ta autogen-users@lists.sourceforge.net.  Thank yo thugged-out ass.
.PP
.SH "SEE ALSO"
gnutls\-cli\-debug(1), gnutls\-cli(1)
.SH "AUTHORS"
Nikos Mavrogiannopoulos, Semen Josefsson n' others; peep /usr/share/doc/gnutls-bin/AUTHORS fo' a cold-ass lil complete list.
.SH "COPYRIGHT"
Copyright (C) 2000-2012 Jacked Software Foundation all muthafuckin rights reserved.
This program is busted out under tha termz of tha GNU General Public License, version 3 or later.
.SH "BUGS"
Please bust bug reports to: bugs@gnutls.org
.SH "NOTES"
This manual page was \fIAutoGen\fP-erated from tha \fBgnutls-serv\fP
option definitions.
