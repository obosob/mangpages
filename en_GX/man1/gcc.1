.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GCC 1"
.TH GCC 1 "2014-09-11" "gcc-4.8.3" "GNU"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
gcc \- GNU project C n' C++ compiler
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
gcc [\fB\-c\fR|\fB\-S\fR|\fB\-E\fR] [\fB\-std=\fR\fIstandard\fR]
    [\fB\-g\fR] [\fB\-pg\fR] [\fB\-O\fR\fIlevel\fR]
    [\fB\-W\fR\fIwarn\fR...] [\fB\-Wpedantic\fR]
    [\fB\-I\fR\fIdir\fR...] [\fB\-L\fR\fIdir\fR...]
    [\fB\-D\fR\fImacro\fR[=\fIdefn\fR]...] [\fB\-U\fR\fImacro\fR]
    [\fB\-f\fR\fIoption\fR...] [\fB\-m\fR\fImachine-option\fR...]
    [\fB\-o\fR \fIoutfile\fR] [@\fIfile\fR] \fIinfile\fR...
.PP
Only da most thugged-out useful options is listed here; peep below fo' the
remainder n' shit.  \fBg++\fR accepts mostly tha same options as \fBgcc\fR.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When you invoke \s-1GCC,\s0 it normally do preprocessing, compilation,
assembly n' linking.  Da \*(L"overall options\*(R" allow you ta stop this
process at a intermediate stage.  For example, tha \fB\-c\fR option
says not ta run tha linker n' shit.  Then tha output consistz of object files
output by tha assembler.
.PP
Other options is passed on ta one stage of processing.  Some options
control tha preprocessor n' others tha compila itself.  Yet other
options control tha assembla n' linker; most of these is not
documented here, since you rarely need ta use any of em.
.PP
Most of tha command-line options dat you can use wit \s-1GCC\s0 is useful
for C programs; when a option is only useful wit another language
(usually \*(C+), tha explanation say so explicitly.  If tha description
for a particular option do not mention a source language, you can use
that option wit all supported languages.
.PP
Da \fBgcc\fR program accepts options n' file names as operands.  Many
options have multi-letta names; therefore multiple single-letta options
may \fInot\fR be grouped: \fB\-dv\fR is straight-up different from \fB\-d\ \-v\fR.
.PP
Yo ass can mix options n' other arguments, n' you can put dat on yo' toast.  For da most thugged-out part, tha order
you use don't matter n' shit.  Order do matta when you use several
optionz of tha same kind; fo' example, if you specify \fB\-L\fR more
than once, tha directories is searched up in tha order specified. Y'all KNOW dat shit, muthafucka!  Also,
the placement of tha \fB\-l\fR option is significant.
.PP
Many options have long names startin wit \fB\-f\fR or with
\&\fB\-W\fR\-\-\-for example,
\&\fB\-fmove\-loop\-invariants\fR, \fB\-Wformat\fR n' so on. I aint talkin' bout chicken n' gravy biatch.  Most of
these have both positizzle n' wack forms; tha wack form of
\&\fB\-ffoo\fR is \fB\-fno\-foo\fR.  This manual documents
only one of these two forms, whichever one aint tha default.
.SH "OPTIONS"
.IX Header "OPTIONS"
.SS "Option Summary"
.IX Subsection "Option Summary"
Here be a summary of all tha options, grouped by type.  Explanations are
in tha followin sections.
.IP "\fIOverall Options\fR" 4
.IX Item "Overall Options"
\&\fB\-c  \-S  \-E  \-o\fR \fIfile\fR  \fB\-no\-canonical\-prefixes  
\&\-pipe  \-pass\-exit\-codes  
\&\-x\fR \fIlanguage\fR  \fB\-v  \-###  \-\-help\fR[\fB=\fR\fIclass\fR[\fB,...\fR]]  \fB\-\-target\-help  
\&\-\-version \-wrapper @\fR\fIfile\fR \fB\-fplugin=\fR\fIfile\fR \fB\-fplugin\-arg\-\fR\fIname\fR\fB=\fR\fIarg\fR  
\&\fB\-fdump\-ada\-spec\fR[\fB\-slim\fR] \fB\-fada\-spec\-parent=\fR\fIunit\fR \fB\-fdump\-go\-spec=\fR\fIfile\fR
.IP "\fIC Language Options\fR" 4
.IX Item "C Language Options"
\&\fB\-ansi  \-std=\fR\fIstandard\fR  \fB\-fgnu89\-inline 
\&\-aux\-info\fR \fIfilename\fR \fB\-fallow\-parameterless\-variadic\-functions 
\&\-fno\-azzle  \-fno\-builtin  \-fno\-builtin\-\fR\fIfunction\fR 
\&\fB\-fhosted  \-ffreestandin \-fopenmp \-fms\-extensions \-fplan9\-extensions 
\&\-trigraphs  \-traditionizzle  \-traditional\-cpp 
\&\-fallow\-single\-precision  \-fcond\-mismatch \-flax\-vector\-conversions 
\&\-fsigned\-bitfieldz  \-fsigned\-char 
\&\-funsigned\-bitfieldz  \-funsigned\-char\fR
.IP "\fI\*(C+ Language Options\fR" 4
.IX Item " Language Options"
\&\fB\-fabi\-version=\fR\fIn\fR  \fB\-fno\-access\-control  \-fcheck\-new 
\&\-fconstexpr\-depth=\fR\fIn\fR  \fB\-ffriend\-injection 
\&\-fno\-elide\-constructors 
\&\-fno\-enforce\-eh\-specs 
\&\-ffor\-scope  \-fno\-for\-scope  \-fno\-gnu\-keywordz 
\&\-fno\-implicit\-templates 
\&\-fno\-implicit\-inline\-templates 
\&\-fno\-implement\-inlines  \-fms\-extensions 
\&\-fno\-nonansi\-builtins  \-fnothrow\-opt  \-fno\-operator\-names 
\&\-fno\-optional\-diags  \-fpermissive 
\&\-fno\-pretty\-templates 
\&\-frepo  \-fno\-rtti  \-fstats  \-ftemplate\-backtrace\-limit=\fR\fIn\fR 
\&\fB\-ftemplate\-depth=\fR\fIn\fR 
\&\fB\-fno\-threadsafe\-statics \-fuse\-cxa\-atexit  \-fno\-weak  \-nostdinc++ 
\&\-fno\-default\-inline  \-fvisibility\-inlines\-hidden 
\&\-fvisibility\-ms\-compat 
\&\-fext\-numeric\-literals 
\&\-Wabi  \-Wconversion\-null  \-Wctor\-dtor\-privacy 
\&\-Wdelete\-non\-virtual\-dtor \-Wliteral\-suffix \-Wnarrowin 
\&\-Wnoexcept \-Wnon\-virtual\-dtor  \-Wreorder 
\&\-Weffc++  \-Wstrict\-null\-sentinel 
\&\-Wno\-non\-template\-friend  \-Wold\-style\-cast 
\&\-Woverloaded\-virtual  \-Wno\-pmf\-conversions 
\&\-Wsign\-promo\fR
.IP "\fIObjective-C n' Objective\-\*(C+ Language Options\fR" 4
.IX Item "Objective-C n' Objective- Language Options"
\&\fB\-fconstant\-string\-class=\fR\fIclass-name\fR 
\&\fB\-fgnu\-runtime  \-fnext\-runtime 
\&\-fno\-nil\-receivers 
\&\-fobjc\-abi\-version=\fR\fIn\fR 
\&\fB\-fobjc\-call\-cxx\-cdtors 
\&\-fobjc\-direct\-dispatch 
\&\-fobjc\-exceptions 
\&\-fobjc\-gc 
\&\-fobjc\-nilcheck 
\&\-fobjc\-std=objc1 
\&\-freplace\-objc\-classes 
\&\-fzero\-link 
\&\-gen\-decls 
\&\-Wassign\-intercept 
\&\-Wno\-protocol  \-Wselector 
\&\-Wstrict\-selector\-match 
\&\-Wundeclared\-selector\fR
.IP "\fILanguage Independent Options\fR" 4
.IX Item "Language Independent Options"
\&\fB\-fmessage\-length=\fR\fIn\fR  
\&\fB\-fdiagnostics\-show\-location=\fR[\fBonce\fR|\fBevery-line\fR]  
\&\fB\-fdiagnostics\-color=\fR[\fBauto\fR|\fBnever\fR|\fBalways\fR]  
\&\fB\-fno\-diagnostics\-show\-option \-fno\-diagnostics\-show\-caret\fR
.IP "\fIWarnin Options\fR" 4
.IX Item "Warnin Options"
\&\fB\-fsyntax\-only  \-fmax\-errors=\fR\fIn\fR  \fB\-Wpedantic 
\&\-pedantic\-errors 
\&\-w  \-Wextra  \-Wall  \-Waddress  \-Waggregate\-return  
\&\-Waggressive\-loop\-optimizations \-Warray\-boundz 
\&\-Wno\-attributes \-Wno\-builtin\-macro\-redefined 
\&\-Wc++\-compat \-Wc++11\-compat \-Wcast\-align  \-Wcast\-qual  
\&\-Wchar\-subscripts \-Wclobbered  \-Wcomment 
\&\-Wconversion  \-Wcoverage\-mismatch  \-Wno\-cpp  \-Wno\-deprecated  
\&\-Wno\-deprecated\-declarations \-Wdisabled\-optimization  
\&\-Wno\-div\-by\-zero \-Wdouble\-promotion \-Wempty\-body  \-Wenum\-compare 
\&\-Wno\-endif\-labels \-Werror  \-Werror=* 
\&\-Wfatal\-errors  \-Wfloat\-equal  \-Wformat  \-Wformat=2 
\&\-Wno\-format\-gotz nuff\-nul \-Wno\-format\-extra\-args \-Wformat\-nonliteral 
\&\-Wformat\-securitizzle  \-Wformat\-y2k 
\&\-Wframe\-larger\-than=\fR\fIlen\fR \fB\-Wno\-free\-nonheap\-object \-Wjump\-misses\-init 
\&\-Wignored\-qualifiers 
\&\-Wimplicit  \-Wimplicit\-function\-declaration  \-Wimplicit\-int 
\&\-Winit\-self  \-Winline \-Wmaybe\-uninitialized 
\&\-Wno\-int\-to\-pointer\-cast \-Wno\-invalid\-offsetof 
\&\-Winvalid\-pch \-Wlarger\-than=\fR\fIlen\fR  \fB\-Wunsafe\-loop\-optimizations 
\&\-Wlogical\-op \-Wlong\-long 
\&\-Wmain \-Wmaybe\-uninitialized \-Wmissing\-braces  \-Wmissing\-field\-initializers 
\&\-Wmissing\-include\-dirs 
\&\-Wno\-mudflap 
\&\-Wno\-multichar  \-Wnonnull  \-Wno\-overflow 
\&\-Woverlength\-strings  \-Wpacked  \-Wpacked\-bitfield\-compat  \-Wpadded 
\&\-Wparentheses  \-Wpedantic\-ms\-format \-Wno\-pedantic\-ms\-format 
\&\-Wpointer\-arith  \-Wno\-pointer\-to\-int\-cast 
\&\-Wredundant\-decls  \-Wno\-return\-local\-addr 
\&\-Wreturn\-type  \-Wsequence\-point  \-Wshadow 
\&\-Wsign\-compare  \-Wsign\-conversion  \-Wsizeof\-pointer\-memaccess 
\&\-Wstack\-protector \-Wstack\-usage=\fR\fIlen\fR \fB\-Wstrict\-aliasin 
\&\-Wstrict\-aliasing=n  \-Wstrict\-overflow \-Wstrict\-overflow=\fR\fIn\fR 
\&\fB\-Wsuggest\-attribute=\fR[\fBpure\fR|\fBconst\fR|\fBnoreturn\fR|\fBformat\fR] 
\&\fB\-Wmissing\-format\-attribute 
\&\-Wswitch  \-Wswitch\-default  \-Wswitch\-enum \-Wsync\-nand 
\&\-Wsystem\-headaz  \-Wtrampolines  \-Wtrigraphs  \-Wtype\-limits  \-Wundef 
\&\-Wuninitialized  \-Wunknown\-pragmas  \-Wno\-pragmas 
\&\-Wunsuffixed\-float\-constants  \-Wunused  \-Wunused\-function 
\&\-Wunused\-label  \-Wunused\-local\-typedefs \-Wunused\-parameta 
\&\-Wno\-unused\-result \-Wunused\-value  \-Wunused\-variable 
\&\-Wunused\-but\-set\-parameta \-Wunused\-but\-set\-variable 
\&\-Wuseless\-cast \-Wvariadic\-macros \-Wvector\-operation\-performizzle 
\&\-Wvla \-Wvolatile\-register\-var  \-Wwrite\-strings \-Wzero\-as\-null\-pointer\-constant\fR
.IP "\fIC n' Objective-C-only Warnin Options\fR" 4
.IX Item "C n' Objective-C-only Warnin Options"
\&\fB\-Wbad\-function\-cast  \-Wmissing\-declarations 
\&\-Wmissing\-parameter\-type  \-Wmissing\-prototypes  \-Wnested\-externs 
\&\-Wold\-style\-declaration  \-Wold\-style\-definizzle 
\&\-Wstrict\-prototypes  \-Wtraditionizzle  \-Wtraditional\-conversion 
\&\-Wdeclaration\-after\-statement \-Wpointer\-sign\fR
.IP "\fIDebuggin Options\fR" 4
.IX Item "Debuggin Options"
\&\fB\-d\fR\fIletters\fR  \fB\-dumpspecs  \-dumpmachine  \-dumpversion 
\&\-fsanitize=\fR\fIstyle\fR 
\&\fB\-fdbg\-cnt\-list \-fdbg\-cnt=\fR\fIcounter-value-list\fR 
\&\fB\-fdisable\-ipa\-\fR\fIpass_name\fR 
\&\fB\-fdisable\-rtl\-\fR\fIpass_name\fR 
\&\fB\-fdisable\-rtl\-\fR\fIpass-name\fR\fB=\fR\fIrange-list\fR 
\&\fB\-fdisable\-tree\-\fR\fIpass_name\fR 
\&\fB\-fdisable\-tree\-\fR\fIpass-name\fR\fB=\fR\fIrange-list\fR 
\&\fB\-fdump\-noaddr \-fdump\-unnumbered \-fdump\-unnumbered\-links 
\&\-fdump\-translation\-unit\fR[\fB\-\fR\fIn\fR] 
\&\fB\-fdump\-class\-hierarchy\fR[\fB\-\fR\fIn\fR] 
\&\fB\-fdump\-ipa\-all \-fdump\-ipa\-cgraph \-fdump\-ipa\-inline 
\&\-fdump\-passes 
\&\-fdump\-statistics 
\&\-fdump\-tree\-all 
\&\-fdump\-tree\-original\fR[\fB\-\fR\fIn\fR]  
\&\fB\-fdump\-tree\-optimized\fR[\fB\-\fR\fIn\fR] 
\&\fB\-fdump\-tree\-cfg \-fdump\-tree\-alias 
\&\-fdump\-tree\-ch 
\&\-fdump\-tree\-ssa\fR[\fB\-\fR\fIn\fR] \fB\-fdump\-tree\-pre\fR[\fB\-\fR\fIn\fR] 
\&\fB\-fdump\-tree\-ccp\fR[\fB\-\fR\fIn\fR] \fB\-fdump\-tree\-dce\fR[\fB\-\fR\fIn\fR] 
\&\fB\-fdump\-tree\-gimple\fR[\fB\-raw\fR] \fB\-fdump\-tree\-mudflap\fR[\fB\-\fR\fIn\fR] 
\&\fB\-fdump\-tree\-dom\fR[\fB\-\fR\fIn\fR] 
\&\fB\-fdump\-tree\-dse\fR[\fB\-\fR\fIn\fR] 
\&\fB\-fdump\-tree\-phiprop\fR[\fB\-\fR\fIn\fR] 
\&\fB\-fdump\-tree\-phiopt\fR[\fB\-\fR\fIn\fR] 
\&\fB\-fdump\-tree\-forwprop\fR[\fB\-\fR\fIn\fR] 
\&\fB\-fdump\-tree\-copyrename\fR[\fB\-\fR\fIn\fR] 
\&\fB\-fdump\-tree\-nrv \-fdump\-tree\-vect 
\&\-fdump\-tree\-sink 
\&\-fdump\-tree\-sra\fR[\fB\-\fR\fIn\fR] 
\&\fB\-fdump\-tree\-forwprop\fR[\fB\-\fR\fIn\fR] 
\&\fB\-fdump\-tree\-fre\fR[\fB\-\fR\fIn\fR] 
\&\fB\-fdump\-tree\-vrp\fR[\fB\-\fR\fIn\fR] 
\&\fB\-ftree\-vectorizer\-verbose=\fR\fIn\fR 
\&\fB\-fdump\-tree\-storeccp\fR[\fB\-\fR\fIn\fR] 
\&\fB\-fdump\-final\-insns=\fR\fIfile\fR 
\&\fB\-fcompare\-debug\fR[\fB=\fR\fIopts\fR]  \fB\-fcompare\-debug\-second 
\&\-feliminate\-dwarf2\-dups \-fno\-eliminate\-unused\-debug\-types 
\&\-feliminate\-unused\-debug\-symbols \-femit\-class\-debug\-always 
\&\-fenable\-\fR\fIkind\fR\fB\-\fR\fIpass\fR 
\&\fB\-fenable\-\fR\fIkind\fR\fB\-\fR\fIpass\fR\fB=\fR\fIrange-list\fR 
\&\fB\-fdebug\-types\-section \-fmem\-report\-wpa 
\&\-fmem\-report \-fpre\-ipa\-mem\-report \-fpost\-ipa\-mem\-report \-fprofile\-arcs 
\&\-fopt\-info 
\&\-fopt\-info\-\fR\fIoptions\fR[\fB=\fR\fIfile\fR] 
\&\fB\-frandom\-seed=\fR\fIstring\fR \fB\-fsched\-verbose=\fR\fIn\fR 
\&\fB\-fsel\-sched\-verbose \-fsel\-sched\-dump\-cfg \-fsel\-sched\-pipelining\-verbose 
\&\-fstack\-usage  \-ftest\-coverage  \-ftime\-report \-fvar\-trackin 
\&\-fvar\-tracking\-assignments  \-fvar\-tracking\-assignments\-toggle 
\&\-g  \-g\fR\fIlevel\fR  \fB\-gtoggle  \-gcoff  \-gdwarf\-\fR\fIversion\fR 
\&\fB\-ggdb  \-grecord\-gcc\-switches  \-gno\-record\-gcc\-switches 
\&\-gstabs  \-gstabs+  \-gstrict\-dwarf  \-gno\-strict\-dwarf 
\&\-gvms  \-gxcoff  \-gxcoff+ 
\&\-fno\-merge\-debug\-strings \-fno\-dwarf2\-cfi\-azzle 
\&\-fdebug\-prefix\-map=\fR\fIold\fR\fB=\fR\fInew\fR 
\&\fB\-femit\-struct\-debug\-baseonly \-femit\-struct\-debug\-reduced 
\&\-femit\-struct\-debug\-detailed\fR[\fB=\fR\fIspec-list\fR] 
\&\fB\-p  \-pg  \-print\-file\-name=\fR\fIlibrary\fR  \fB\-print\-libgcc\-file\-name 
\&\-print\-multi\-directory  \-print\-multi\-lib  \-print\-multi\-os\-directory 
\&\-print\-prog\-name=\fR\fIprogram\fR  \fB\-print\-search\-dirs  \-Q 
\&\-print\-sysroot \-print\-sysroot\-headers\-suffix 
\&\-save\-temps \-save\-temps=cwd \-save\-temps=obj \-time\fR[\fB=\fR\fIfile\fR]
.IP "\fIOptimization Options\fR" 4
.IX Item "Optimization Options"
\&\fB\-faggressive\-loop\-optimizations \-falign\-functions[=\fR\fIn\fR\fB] 
\&\-falign\-jumps[=\fR\fIn\fR\fB] 
\&\-falign\-labels[=\fR\fIn\fR\fB] \-falign\-loops[=\fR\fIn\fR\fB] 
\&\-fassociative\-math \-fauto\-inc\-dec \-fbranch\-probabilitizzles 
\&\-fbranch\-target\-load\-optimize \-fbranch\-target\-load\-optimize2 
\&\-fbtr\-bb\-exclusive \-fcaller\-saves 
\&\-fcheck\-data\-deps \-fcombine\-stack\-adjustments \-fconserve\-stack 
\&\-fcompare\-elim \-fcprop\-registas \-fcrossjumpin 
\&\-fcse\-follow\-jumps \-fcse\-skip\-blocks \-fcx\-fortran\-rulez 
\&\-fcx\-limited\-range 
\&\-fdata\-sections \-fdce \-fdelayed\-branch 
\&\-fdelete\-null\-pointer\-checks \-fdevirtualize \-fdse 
\&\-fearly\-inlinin \-fipa\-sra \-fexpensive\-optimizations \-ffat\-lto\-objects 
\&\-ffast\-math \-ffinite\-math\-only \-ffloat\-store \-fexcess\-precision=\fR\fIstyle\fR 
\&\fB\-fforward\-propagate \-ffp\-contract=\fR\fIstyle\fR \fB\-ffunction\-sections 
\&\-fgcse \-fgcse\-after\-reload \-fgcse\-las \-fgcse\-lm \-fgraphite\-identitizzle 
\&\-fgcse\-sm \-fhoist\-adjacent\-loadz \-fif\-conversion 
\&\-fif\-conversion2 \-findirect\-inlinin 
\&\-finline\-functions \-finline\-functions\-called\-once \-finline\-limit=\fR\fIn\fR 
\&\fB\-finline\-small\-functions \-fipa\-cp \-fipa\-cp\-clone 
\&\-fipa\-pta \-fipa\-profile \-fipa\-pure\-const \-fipa\-reference 
\&\-fira\-algorithm=\fR\fIalgorithm\fR 
\&\fB\-fira\-region=\fR\fIregion\fR \fB\-fira\-hoist\-heat 
\&\-fira\-loop\-heat \-fno\-ira\-share\-save\-slots 
\&\-fno\-ira\-share\-spill\-slots \-fira\-verbose=\fR\fIn\fR 
\&\fB\-fivopts \-fkeep\-inline\-functions \-fkeep\-static\-consts 
\&\-floop\-block \-floop\-interchange \-floop\-strip\-mine \-floop\-nest\-optimize 
\&\-floop\-parallelize\-all \-flto \-flto\-compression\-level 
\&\-flto\-partition=\fR\fIalg\fR \fB\-flto\-report \-fmerge\-all\-constants 
\&\-fmerge\-constants \-fmodulo\-sched \-fmodulo\-sched\-allow\-regmoves 
\&\-fmove\-loop\-invariants fmudflap \-fmudflapir \-fmudflapth \-fno\-branch\-count\-reg 
\&\-fno\-default\-inline 
\&\-fno\-defer\-pop \-fno\-function\-cse \-fno\-guess\-branch\-probabilitizzle 
\&\-fno\-inline \-fno\-math\-errno \-fno\-peephole \-fno\-peephole2 
\&\-fno\-sched\-interblock \-fno\-sched\-spec \-fno\-signed\-zeros 
\&\-fno\-toplevel\-reorder \-fno\-trapping\-math \-fno\-zero\-initialized\-in\-bss 
\&\-fomit\-frame\-pointa \-foptimize\-register\-move \-foptimize\-sibling\-calls 
\&\-fpartial\-inlinin \-fpeel\-loops \-fpredictive\-commonin 
\&\-fprefetch\-loop\-arrays \-fprofile\-report 
\&\-fprofile\-correction \-fprofile\-dir=\fR\fIpath\fR \fB\-fprofile\-generate 
\&\-fprofile\-generate=\fR\fIpath\fR 
\&\fB\-fprofile\-use \-fprofile\-use=\fR\fIpath\fR \fB\-fprofile\-values 
\&\-freciprocal\-math \-free \-fregmove \-frename\-registas \-freorder\-blocks 
\&\-freorder\-blocks\-and\-partizzle \-freorder\-functions 
\&\-frerun\-cse\-after\-loop \-freschedule\-modulo\-scheduled\-loops 
\&\-frounding\-math \-fsched2\-use\-superblocks \-fsched\-heat 
\&\-fsched\-spec\-load \-fsched\-spec\-load\-dangerous 
\&\-fsched\-stalled\-insns\-dep[=\fR\fIn\fR\fB] \-fsched\-stalled\-insns[=\fR\fIn\fR\fB] 
\&\-fsched\-group\-heuristic \-fsched\-critical\-path\-heuristic 
\&\-fsched\-spec\-insn\-heuristic \-fsched\-rank\-heuristic 
\&\-fsched\-last\-insn\-heuristic \-fsched\-dep\-count\-heuristic 
\&\-fschedule\-insns \-fschedule\-insns2 \-fsection\-anchors 
\&\-fselective\-schedulin \-fselective\-scheduling2 
\&\-fsel\-sched\-pipelinin \-fsel\-sched\-pipelining\-outer\-loops 
\&\-fshrink\-wrap \-fsignaling\-nans \-fsingle\-precision\-constant 
\&\-fsplit\-ivs\-in\-unrolla \-fsplit\-wide\-types \-fstack\-protector 
\&\-fstack\-protector\-all \-fstack\-protector\-strong \-fstrict\-aliasin 
\&\-fstrict\-overflow \-fthread\-jumps \-ftracer \-ftree\-bit\-ccp 
\&\-ftree\-builtin\-call\-dce \-ftree\-ccp \-ftree\-ch 
\&\-ftree\-coalesce\-inline\-vars \-ftree\-coalesce\-vars \-ftree\-copy\-prop 
\&\-ftree\-copyrename \-ftree\-dce \-ftree\-dominator\-opts \-ftree\-dse 
\&\-ftree\-forwprop \-ftree\-fre \-ftree\-loop\-if\-convert 
\&\-ftree\-loop\-if\-convert\-stores \-ftree\-loop\-im 
\&\-ftree\-phiprop \-ftree\-loop\-distribution \-ftree\-loop\-distribute\-patterns 
\&\-ftree\-loop\-ivcanon \-ftree\-loop\-linear \-ftree\-loop\-optimize 
\&\-ftree\-parallelize\-loops=\fR\fIn\fR \fB\-ftree\-pre \-ftree\-partial\-pre \-ftree\-pta 
\&\-ftree\-reassoc \-ftree\-sink \-ftree\-slsr \-ftree\-sra 
\&\-ftree\-switch\-conversion \-ftree\-tail\-merge 
\&\-ftree\-ta \-ftree\-vect\-loop\-version \-ftree\-vectorize \-ftree\-vrp 
\&\-funit\-at\-a\-time \-funroll\-all\-loops \-funroll\-loops 
\&\-funsafe\-loop\-optimizations \-funsafe\-math\-optimizations \-funswitch\-loops 
\&\-fvariable\-expansion\-in\-unrolla \-fvect\-cost\-model \-fvpt \-fweb 
\&\-fwhole\-program \-fwpa \-fuse\-ld=\fR\fIlinker\fR \fB\-fuse\-linker\-plugin 
\&\-\-param\fR \fIname\fR\fB=\fR\fIvalue\fR
\&\fB\-O  \-O0  \-O1  \-O2  \-O3  \-Os \-Ofast \-Og\fR
.IP "\fIPreprocessor Options\fR" 4
.IX Item "Preprocessor Options"
\&\fB\-A\fR\fIquestion\fR\fB=\fR\fIanswer\fR 
\&\fB\-A\-\fR\fIquestion\fR[\fB=\fR\fIanswer\fR] 
\&\fB\-C  \-dD  \-dI  \-dM  \-dN 
\&\-D\fR\fImacro\fR[\fB=\fR\fIdefn\fR]  \fB\-E  \-H 
\&\-idirafter\fR \fIdir\fR 
\&\fB\-include\fR \fIfile\fR  \fB\-imacros\fR \fIfile\fR 
\&\fB\-iprefix\fR \fIfile\fR  \fB\-iwithprefix\fR \fIdir\fR 
\&\fB\-iwithprefixbefore\fR \fIdir\fR  \fB\-isystem\fR \fIdir\fR 
\&\fB\-imultilib\fR \fIdir\fR \fB\-isysroot\fR \fIdir\fR 
\&\fB\-M  \-MM  \-MF  \-MG  \-MP  \-MQ  \-MT  \-nostdinc  
\&\-P  \-fdebug\-cpp \-ftrack\-macro\-expansion \-fworking\-directory 
\&\-remap \-trigraphs  \-undef  \-U\fR\fImacro\fR  
\&\fB\-Wp,\fR\fIoption\fR \fB\-Xpreprocessor\fR \fIoption\fR \fB\-no\-integrated\-cpp\fR
.IP "\fIAssembla Option\fR" 4
.IX Item "Assembla Option"
\&\fB\-Wa,\fR\fIoption\fR  \fB\-Xassembler\fR \fIoption\fR
.IP "\fILinker Options\fR" 4
.IX Item "Linker Options"
\&\fIobject-file-name\fR  \fB\-l\fR\fIlibrary\fR 
\&\fB\-nostartfilez  \-nodefaultlibs  \-nostdlib \-pie \-rdynamic 
\&\-s  \-static \-static\-libgcc \-static\-libstdc++ 
\&\-static\-libasan \-static\-libtsan 
\&\-shared \-shared\-libgcc  \-symbolic 
\&\-T\fR \fIscript\fR  \fB\-Wl,\fR\fIoption\fR  \fB\-Xlinker\fR \fIoption\fR 
\&\fB\-u\fR \fIsymbol\fR
.IP "\fIDirectory Options\fR" 4
.IX Item "Directory Options"
\&\fB\-B\fR\fIprefix\fR \fB\-I\fR\fIdir\fR \fB\-iplugindir=\fR\fIdir\fR 
\&\fB\-iquote\fR\fIdir\fR \fB\-L\fR\fIdir\fR \fB\-specs=\fR\fIfile\fR \fB\-I\- 
\&\-\-sysroot=\fR\fIdir\fR \fB\-\-no\-sysroot\-suffix\fR
.IP "\fIMachine Dependent Options\fR" 4
.IX Item "Machine Dependent Options"
\&\fIAArch64 Options\fR
\&\fB\-mbig\-endian  \-mlil\-endian 
\&\-mgeneral\-regs\-only 
\&\-mcmodel=tiny  \-mcmodel=small  \-mcmodel=pimpin' 
\&\-mstrict\-align 
\&\-momit\-leaf\-frame\-pointa  \-mno\-omit\-leaf\-frame\-pointa 
\&\-mtls\-dialect=desc  \-mtls\-dialect=traditionizzle 
\&\-march=\fR\fIname\fR  \fB\-mcpu=\fR\fIname\fR  \fB\-mtune=\fR\fIname\fR
.Sp
\&\fIAdapteva Epiphany Options\fR
\&\fB\-mhalf\-reg\-file \-mprefer\-short\-insn\-regs 
\&\-mbranch\-cost=\fR\fInum\fR \fB\-mcmove \-mnops=\fR\fInum\fR \fB\-msoft\-cmpsf 
\&\-msplit\-lohi \-mpost\-inc \-mpost\-modify \-mstack\-offset=\fR\fInum\fR 
\&\fB\-mround\-nearest \-mlong\-calls \-mshort\-calls \-msmall16 
\&\-mfp\-mode=\fR\fImode\fR \fB\-mvect\-double \-max\-vect\-align=\fR\fInum\fR 
\&\fB\-msplit\-vecmove\-early \-m1reg\-\fR\fIreg\fR
.Sp
\&\fI\s-1ARM\s0 Options\fR
\&\fB\-mapcs\-frame  \-mno\-apcs\-frame 
\&\-mabi=\fR\fIname\fR 
\&\fB\-mapcs\-stack\-check  \-mno\-apcs\-stack\-check 
\&\-mapcs\-float  \-mno\-apcs\-float 
\&\-mapcs\-reentrant  \-mno\-apcs\-reentrant 
\&\-msched\-prolog  \-mno\-sched\-prolog 
\&\-mlil\-endian  \-mbig\-endian  \-mwords\-lil\-endian 
\&\-mfloat\-abi=\fR\fIname\fR 
\&\fB\-mfp16\-format=\fR\fIname\fR
\&\fB\-mthumb\-interwork  \-mno\-thumb\-interwork 
\&\-mcpu=\fR\fIname\fR  \fB\-march=\fR\fIname\fR  \fB\-mfpu=\fR\fIname\fR  
\&\fB\-mstructure\-size\-boundary=\fR\fIn\fR 
\&\fB\-mabort\-on\-noreturn 
\&\-mlong\-calls  \-mno\-long\-calls 
\&\-msingle\-pic\-base  \-mno\-single\-pic\-base 
\&\-mpic\-register=\fR\fIreg\fR 
\&\fB\-mnop\-fun\-dllimport 
\&\-mpoke\-function\-name 
\&\-mthumb  \-marm 
\&\-mtpcs\-frame  \-mtpcs\-leaf\-frame 
\&\-mcaller\-super\-interworkin  \-mcallee\-super\-interworkin 
\&\-mtp=\fR\fIname\fR \fB\-mtls\-dialect=\fR\fIdialect\fR 
\&\fB\-mword\-relocations 
\&\-mfix\-cortex\-m3\-ldrd 
\&\-munaligned\-access\fR
.Sp
\&\fI\s-1AVR\s0 Options\fR
\&\fB\-mmcu=\fR\fImcu\fR \fB\-maccumulate\-args \-mbranch\-cost=\fR\fIcost\fR 
\&\fB\-mcall\-prologues \-mint8 \-mno\-interrupts \-mrelax 
\&\-mstrict\-X \-mtiny\-stack \-Waddr\-space\-convert\fR
.Sp
\&\fIBlackfin Options\fR
\&\fB\-mcpu=\fR\fIcpu\fR[\fB\-\fR\fIsirevision\fR] 
\&\fB\-msim \-momit\-leaf\-frame\-pointa  \-mno\-omit\-leaf\-frame\-pointa 
\&\-mspecld\-anomaly  \-mno\-specld\-anomaly  \-mcsync\-anomaly  \-mno\-csync\-anomaly 
\&\-mlow\-64k \-mno\-low64k  \-mstack\-check\-l1  \-mid\-shared\-library 
\&\-mno\-id\-shared\-library  \-mshared\-library\-id=\fR\fIn\fR 
\&\fB\-mleaf\-id\-shared\-library  \-mno\-leaf\-id\-shared\-library 
\&\-msep\-data  \-mno\-sep\-data  \-mlong\-calls  \-mno\-long\-calls 
\&\-mfast\-fp \-minline\-plt \-mmulticore  \-mcorea  \-mcoreb  \-msdram 
\&\-micplb\fR
.Sp
\&\fIC6X Options\fR
\&\fB\-mbig\-endian  \-mlil\-endian \-march=\fR\fIcpu\fR 
\&\fB\-msim \-msdata=\fR\fIsdata-type\fR
.Sp
\&\fI\s-1CRIS\s0 Options\fR
\&\fB\-mcpu=\fR\fIcpu\fR  \fB\-march=\fR\fIcpu\fR  \fB\-mtune=\fR\fIcpu\fR 
\&\fB\-mmax\-stack\-frame=\fR\fIn\fR  \fB\-melinux\-stacksize=\fR\fIn\fR 
\&\fB\-metrax4  \-metrax100  \-mpdebug  \-mcc\-init  \-mno\-side\-effects 
\&\-mstack\-align  \-mdata\-align  \-mconst\-align 
\&\-m32\-bit  \-m16\-bit  \-m8\-bit  \-mno\-prologue\-epilogue  \-mno\-gotplt 
\&\-melf  \-maout  \-melinux  \-mlinux  \-sim  \-sim2 
\&\-mmul\-bug\-workaround  \-mno\-mul\-bug\-workaround\fR
.Sp
\&\fI\s-1CR16\s0 Options\fR
\&\fB\-mmac 
\&\-mcr16cplus \-mcr16c 
\&\-msim \-mint32 \-mbit\-ops
\&\-mdata\-model=\fR\fImodel\fR
.Sp
\&\fIDarwin Options\fR
\&\fB\-all_load  \-allowable_client  \-arch  \-arch_errors_fatal 
\&\-arch_only  \-bind_at_load  \-bundle  \-bundle_loader 
\&\-client_name  \-compatibility_version  \-current_version 
\&\-dead_strip 
\&\-dependency\-file  \-dylib_file  \-dylinker_install_name 
\&\-dynamic  \-dynamiclib  \-exported_symbols_list 
\&\-filelist  \-flat_namespace  \-force_cpusubtype_ALL 
\&\-force_flat_namespace  \-headerpad_max_install_names 
\&\-iframework 
\&\-image_base  \-init  \-install_name  \-keep_private_externs 
\&\-multi_module  \-multiply_defined  \-multiply_defined_unused 
\&\-noall_load   \-no_dead_strip_inits_and_terms 
\&\-nofixprebindin \-nomultidefs  \-noprebind  \-noseglinkedit 
\&\-pagezero_size  \-prebind  \-prebind_all_twolevel_modulez 
\&\-private_bundle  \-read_only_relocs  \-sectalign 
\&\-sectobjectsymbols  \-whyload  \-seg1addr 
\&\-sectcreate  \-sectobjectsymbols  \-sectorder 
\&\-segaddr \-segs_read_only_addr \-segs_read_write_addr 
\&\-seg_addr_table  \-seg_addr_table_filename  \-seglinkedit 
\&\-segprot  \-segs_read_only_addr  \-segs_read_write_addr 
\&\-single_module  \-static  \-sub_library  \-sub_umbrella 
\&\-twolevel_namespace  \-umbrella  \-undefined 
\&\-unexported_symbols_list  \-weak_reference_mismatches 
\&\-whatsloaded \-F \-gused \-gfull \-mmacosx\-version\-min=\fR\fIversion\fR 
\&\fB\-mkernel \-mone\-byte\-bool\fR
.Sp
\&\fI\s-1DEC\s0 Alpha Options\fR
\&\fB\-mno\-fp\-regs  \-msoft\-float 
\&\-mieee  \-mieee\-with\-inexact  \-mieee\-conformant 
\&\-mfp\-trap\-mode=\fR\fImode\fR  \fB\-mfp\-rounding\-mode=\fR\fImode\fR 
\&\fB\-mtrap\-precision=\fR\fImode\fR  \fB\-mbuild\-constants 
\&\-mcpu=\fR\fIcpu-type\fR  \fB\-mtune=\fR\fIcpu-type\fR 
\&\fB\-mbwx  \-mmax  \-mfix  \-mcix 
\&\-mfloat\-vax  \-mfloat\-ieee 
\&\-mexplicit\-relocs  \-msmall\-data  \-mlarge\-data 
\&\-msmall\-text  \-mlarge\-text 
\&\-mmemory\-latency=\fR\fItime\fR
.Sp
\&\fI\s-1FR30\s0 Options\fR
\&\fB\-msmall\-model \-mno\-lsim\fR
.Sp
\&\fI\s-1FRV\s0 Options\fR
\&\fB\-mgpr\-32  \-mgpr\-64  \-mfpr\-32  \-mfpr\-64 
\&\-mhard\-float  \-msoft\-float 
\&\-malloc\-cc  \-mfixed\-cc  \-mdword  \-mno\-dword 
\&\-mdouble  \-mno\-double 
\&\-mmedia  \-mno\-media  \-mmuladd  \-mno\-muladd 
\&\-mfdpic  \-minline\-plt \-mgprel\-ro  \-multilib\-library\-pic 
\&\-mlinked\-fp  \-mlong\-calls  \-malign\-labels 
\&\-mlibrary\-pic  \-macc\-4  \-macc\-8 
\&\-mpack  \-mno\-pack  \-mno\-eflags  \-mcond\-move  \-mno\-cond\-move 
\&\-moptimize\-membar \-mno\-optimize\-membar 
\&\-mscc  \-mno\-scc  \-mcond\-exec  \-mno\-cond\-exec 
\&\-mvliw\-branch  \-mno\-vliw\-branch 
\&\-mmulti\-cond\-exec  \-mno\-multi\-cond\-exec  \-mnested\-cond\-exec 
\&\-mno\-nested\-cond\-exec  \-mtomcat\-stats 
\&\-mTLS \-mtls 
\&\-mcpu=\fR\fIcpu\fR
.Sp
\&\fIGNU/Linux Options\fR
\&\fB\-mglibc \-muclibc \-mbionic \-mandrizzle 
\&\-tno\-android\-cc \-tno\-android\-ld\fR
.Sp
\&\fIH8/300 Options\fR
\&\fB\-mrelax  \-mh  \-ms  \-mn  \-mexr \-mno\-exr  \-mint32  \-malign\-300\fR
.Sp
\&\fI\s-1HPPA\s0 Options\fR
\&\fB\-march=\fR\fIarchitecture-type\fR 
\&\fB\-mbig\-switch  \-mdisable\-fpregs  \-mdisable\-indexin 
\&\-mfast\-indirect\-calls  \-mgas  \-mgnu\-ld   \-mhp\-ld 
\&\-mfixed\-range=\fR\fIregister-range\fR 
\&\fB\-mjump\-in\-delay \-mlinker\-opt \-mlong\-calls 
\&\-mlong\-load\-store  \-mno\-big\-switch  \-mno\-disable\-fpregs 
\&\-mno\-disable\-indexin  \-mno\-fast\-indirect\-calls  \-mno\-gas 
\&\-mno\-jump\-in\-delay  \-mno\-long\-load\-store 
\&\-mno\-portable\-runtime  \-mno\-soft\-float 
\&\-mno\-space\-regs  \-msoft\-float  \-mpa\-risc\-1\-0 
\&\-mpa\-risc\-1\-1  \-mpa\-risc\-2\-0  \-mportable\-runtime 
\&\-mschedule=\fR\fIcpu-type\fR  \fB\-mspace\-regs  \-msio  \-mwsio 
\&\-munix=\fR\fIunix-std\fR  \fB\-nolibdld  \-static  \-threads\fR
.Sp
\&\fIi386 n' x86\-64 Options\fR
\&\fB\-mtune=\fR\fIcpu-type\fR  \fB\-march=\fR\fIcpu-type\fR 
\&\fB\-mfpmath=\fR\fIunit\fR 
\&\fB\-masm=\fR\fIdialect\fR  \fB\-mno\-fancy\-math\-387 
\&\-mno\-fp\-ret\-in\-387  \-msoft\-float 
\&\-mno\-wide\-multiply  \-mrtd  \-malign\-double 
\&\-mpreferred\-stack\-boundary=\fR\fInum\fR 
\&\fB\-mincoming\-stack\-boundary=\fR\fInum\fR 
\&\fB\-mcld \-mcx16 \-msahf \-mmovbe \-mcrc32 
\&\-mrecip \-mrecip=\fR\fIopt\fR 
\&\fB\-mvzeroupper \-mprefer\-avx128 
\&\-mmmx  \-msse  \-msse2 \-msse3 \-mssse3 \-msse4.1 \-msse4.2 \-msse4 \-mavx 
\&\-mavx2 \-maes \-mpclmul \-mfsgsbase \-mrdrnd \-mf16c \-mfma 
\&\-msse4a \-m3dnow \-mpopcnt \-mabm \-mbmi \-mtbm \-mfma4 \-mxop \-mlzcnt 
\&\-mbmi2 \-mrtm \-mlwp \-mthreadz 
\&\-mno\-align\-stringops  \-minline\-all\-stringops 
\&\-minline\-stringops\-dynamically \-mstringop\-strategy=\fR\fIalg\fR 
\&\fB\-mpush\-args  \-maccumulate\-outgoing\-args  \-m128bit\-long\-double 
\&\-m96bit\-long\-double \-mlong\-double\-64 \-mlong\-double\-80 
\&\-mregparm=\fR\fInum\fR  \fB\-msseregparm 
\&\-mveclibabi=\fR\fItype\fR \fB\-mvect8\-ret\-in\-mem 
\&\-mpc32 \-mpc64 \-mpc80 \-mstackrealign 
\&\-momit\-leaf\-frame\-pointa  \-mno\-red\-zone \-mno\-tls\-direct\-seg\-refs 
\&\-mcmodel=\fR\fIcode-model\fR \fB\-mabi=\fR\fIname\fR \fB\-maddress\-mode=\fR\fImode\fR 
\&\fB\-m32 \-m64 \-mx32 \-mlarge\-data\-threshold=\fR\fInum\fR 
\&\fB\-msse2avx \-mfentry \-m8bit\-idiv 
\&\-mavx256\-split\-unaligned\-load \-mavx256\-split\-unaligned\-store\fR
.Sp
\&\fIi386 n' x86\-64 Windows Options\fR
\&\fB\-mconsole \-mcygwin \-mno\-cygwin \-mdll 
\&\-mnop\-fun\-dllimport \-mthread 
\&\-municode \-mwin32 \-mwindows \-fno\-set\-stack\-executable\fR
.Sp
\&\fI\s-1IA\-64\s0 Options\fR
\&\fB\-mbig\-endian  \-mlil\-endian  \-mgnu\-as  \-mgnu\-ld  \-mno\-pic 
\&\-mvolatile\-asm\-stop  \-mregister\-names  \-msdata \-mno\-sdata 
\&\-mconstant\-gp  \-mauto\-pic  \-mfused\-madd 
\&\-minline\-float\-divide\-min\-latency 
\&\-minline\-float\-divide\-max\-throughput 
\&\-mno\-inline\-float\-divide 
\&\-minline\-int\-divide\-min\-latency 
\&\-minline\-int\-divide\-max\-throughput  
\&\-mno\-inline\-int\-divide 
\&\-minline\-sqrt\-min\-latency \-minline\-sqrt\-max\-throughput 
\&\-mno\-inline\-sqrt 
\&\-mdwarf2\-azzle \-mearly\-stop\-bits 
\&\-mfixed\-range=\fR\fIregister-range\fR \fB\-mtls\-size=\fR\fItls-size\fR 
\&\fB\-mtune=\fR\fIcpu-type\fR \fB\-milp32 \-mlp64 
\&\-msched\-br\-data\-spec \-msched\-ar\-data\-spec \-msched\-control\-spec 
\&\-msched\-br\-in\-data\-spec \-msched\-ar\-in\-data\-spec \-msched\-in\-control\-spec 
\&\-msched\-spec\-ldc \-msched\-spec\-control\-ldc 
\&\-msched\-prefer\-non\-data\-spec\-insns \-msched\-prefer\-non\-control\-spec\-insns 
\&\-msched\-stop\-bits\-after\-every\-cycle \-msched\-count\-spec\-in\-critical\-path 
\&\-msel\-sched\-dont\-check\-control\-spec \-msched\-fp\-mem\-deps\-zero\-cost 
\&\-msched\-max\-memory\-insns\-hard\-limit \-msched\-max\-memory\-insns=\fR\fImax-insns\fR
.Sp
\&\fI\s-1LM32\s0 Options\fR
\&\fB\-mbarrel\-shift\-enabled \-mdivide\-enabled \-mmultiply\-enabled 
\&\-msign\-extend\-enabled \-muser\-enabled\fR
.Sp
\&\fIM32R/D Options\fR
\&\fB\-m32r2 \-m32rx \-m32r 
\&\-mdebug 
\&\-malign\-loops \-mno\-align\-loops 
\&\-missue\-rate=\fR\fInumber\fR 
\&\fB\-mbranch\-cost=\fR\fInumber\fR 
\&\fB\-mmodel=\fR\fIcode-size-model-type\fR 
\&\fB\-msdata=\fR\fIsdata-type\fR 
\&\fB\-mno\-flush\-func \-mflush\-func=\fR\fIname\fR 
\&\fB\-mno\-flush\-trap \-mflush\-trap=\fR\fInumber\fR 
\&\fB\-G\fR \fInum\fR
.Sp
\&\fIM32C Options\fR
\&\fB\-mcpu=\fR\fIcpu\fR \fB\-msim \-memregs=\fR\fInumber\fR
.Sp
\&\fIM680x0 Options\fR
\&\fB\-march=\fR\fIarch\fR  \fB\-mcpu=\fR\fIcpu\fR  \fB\-mtune=\fR\fItune\fR
\&\fB\-m68000  \-m68020  \-m68020\-40  \-m68020\-60  \-m68030  \-m68040 
\&\-m68060  \-mcpu32  \-m5200  \-m5206e  \-m528x  \-m5307  \-m5407 
\&\-mcfv4e  \-mbitfield  \-mno\-bitfield  \-mc68000  \-mc68020 
\&\-mnobitfield  \-mrtd  \-mno\-rtd  \-mdiv  \-mno\-div  \-mshort 
\&\-mno\-short  \-mhard\-float  \-m68881  \-msoft\-float  \-mpcrel 
\&\-malign\-int  \-mstrict\-align  \-msep\-data  \-mno\-sep\-data 
\&\-mshared\-library\-id=n  \-mid\-shared\-library  \-mno\-id\-shared\-library 
\&\-mxgot \-mno\-xgot\fR
.Sp
\&\fIMCore Options\fR
\&\fB\-mhardlit  \-mno\-hardlit  \-mdiv  \-mno\-div  \-mrelax\-immediates 
\&\-mno\-relax\-immediates  \-mwide\-bitfieldz  \-mno\-wide\-bitfieldz 
\&\-m4byte\-functions  \-mno\-4byte\-functions  \-mcallgraph\-data 
\&\-mno\-callgraph\-data  \-mslow\-bytes  \-mno\-slow\-bytes  \-mno\-lsim 
\&\-mlil\-endian  \-mbig\-endian  \-m210  \-m340  \-mstack\-increment\fR
.Sp
\&\fIMeP Options\fR
\&\fB\-mabsdiff \-mall\-opts \-maverage \-mbased=\fR\fIn\fR \fB\-mbitops 
\&\-mc=\fR\fIn\fR \fB\-mclip \-mconfig=\fR\fIname\fR \fB\-mcop \-mcop32 \-mcop64 \-mivc2 
\&\-mdc \-mdiv \-meb \-mel \-mio\-volatile \-ml \-mleadz \-mm \-mminmax 
\&\-mmult \-mno\-opts \-mrepeat \-ms \-msatur \-msdram \-msim \-msimnovec \-mtf 
\&\-mtiny=\fR\fIn\fR
.Sp
\&\fIMicroBlaze Options\fR
\&\fB\-msoft\-float \-mhard\-float \-msmall\-divides \-mcpu=\fR\fIcpu\fR 
\&\fB\-mmemcpy \-mxl\-soft\-mul \-mxl\-soft\-div \-mxl\-barrel\-shift 
\&\-mxl\-pattern\-compare \-mxl\-stack\-check \-mxl\-gp\-opt \-mno\-clearbss 
\&\-mxl\-multiply\-high \-mxl\-float\-convert \-mxl\-float\-sqrt 
\&\-mbig\-endian \-mlil\-endian \-mxl\-reorder \-mxl\-mode\-\fR\fIapp-model\fR
.Sp
\&\fI\s-1MIPS\s0 Options\fR
\&\fB\-EL  \-EB  \-march=\fR\fIarch\fR  \fB\-mtune=\fR\fIarch\fR 
\&\fB\-mips1  \-mips2  \-mips3  \-mips4  \-mips32  \-mips32r2 
\&\-mips64  \-mips64r2 
\&\-mips16  \-mno\-mips16  \-mflip\-mips16 
\&\-minterlink\-mips16  \-mno\-interlink\-mips16 
\&\-mabi=\fR\fIabi\fR  \fB\-mabicalls  \-mno\-abicalls 
\&\-mshared  \-mno\-shared  \-mplt  \-mno\-plt  \-mxgot  \-mno\-xgot 
\&\-mgp32  \-mgp64  \-mfp32  \-mfp64  \-mhard\-float  \-msoft\-float 
\&\-mno\-float \-msingle\-float  \-mdouble\-float  
\&\-mdsp  \-mno\-dsp  \-mdspr2  \-mno\-dspr2 
\&\-mmcu \-mmno\-mcu 
\&\-mfpu=\fR\fIfpu-type\fR 
\&\fB\-msmartmips  \-mno\-smartmips 
\&\-mpaired\-single  \-mno\-paired\-single  \-mdmx  \-mno\-mdmx 
\&\-mips3d  \-mno\-mips3d  \-mmt  \-mno\-mt  \-mllsc  \-mno\-llsc 
\&\-mlong64  \-mlong32  \-msym32  \-mno\-sym32 
\&\-G\fR\fInum\fR  \fB\-mlocal\-sdata  \-mno\-local\-sdata 
\&\-mextern\-sdata  \-mno\-extern\-sdata  \-mgpopt  \-mno\-gopt 
\&\-membedded\-data  \-mno\-embedded\-data 
\&\-muninit\-const\-in\-rodata  \-mno\-uninit\-const\-in\-rodata 
\&\-mcode\-readable=\fR\fIsetting\fR 
\&\fB\-msplit\-addresses  \-mno\-split\-addresses 
\&\-mexplicit\-relocs  \-mno\-explicit\-relocs 
\&\-mcheck\-zero\-division  \-mno\-check\-zero\-division 
\&\-mdivide\-traps  \-mdivide\-breaks 
\&\-mmemcpy  \-mno\-memcpy  \-mlong\-calls  \-mno\-long\-calls 
\&\-mmad  \-mno\-mad  \-mfused\-madd  \-mno\-fused\-madd  \-nocpp 
\&\-mfix\-24k \-mno\-fix\-24k 
\&\-mfix\-r4000  \-mno\-fix\-r4000  \-mfix\-r4400  \-mno\-fix\-r4400 
\&\-mfix\-r10000 \-mno\-fix\-r10000  \-mfix\-vr4120  \-mno\-fix\-vr4120 
\&\-mfix\-vr4130  \-mno\-fix\-vr4130  \-mfix\-sb1  \-mno\-fix\-sb1 
\&\-mflush\-func=\fR\fIfunc\fR  \fB\-mno\-flush\-func 
\&\-mbranch\-cost=\fR\fInum\fR  \fB\-mbranch\-likely  \-mno\-branch\-likely 
\&\-mfp\-exceptions \-mno\-fp\-exceptions 
\&\-mvr4130\-align \-mno\-vr4130\-align \-msynci \-mno\-synci 
\&\-mrelax\-pic\-calls \-mno\-relax\-pic\-calls \-mmcount\-ra\-address\fR
.Sp
\&\fI\s-1MMIX\s0 Options\fR
\&\fB\-mlibfuncs  \-mno\-libfuncs  \-mepsilon  \-mno\-epsilon  \-mabi=gnu 
\&\-mabi=mmixware  \-mzero\-extend  \-mknuthdiv  \-mtoplevel\-symbols 
\&\-melf  \-mbranch\-predict  \-mno\-branch\-predict  \-mbase\-addresses 
\&\-mno\-base\-addresses  \-msingle\-exit  \-mno\-single\-exit\fR
.Sp
\&\fI\s-1MN10300\s0 Options\fR
\&\fB\-mmult\-bug  \-mno\-mult\-bug 
\&\-mno\-am33 \-mam33 \-mam33\-2 \-mam34 
\&\-mtune=\fR\fIcpu-type\fR 
\&\fB\-mreturn\-pointer\-on\-d0 
\&\-mno\-crt0  \-mrelax \-mliw \-msetlb\fR
.Sp
\&\fIMoxie Options\fR
\&\fB\-meb \-mel \-mno\-crt0\fR
.Sp
\&\fI\s-1PDP\-11\s0 Options\fR
\&\fB\-mfpu  \-msoft\-float  \-mac0  \-mno\-ac0  \-m40  \-m45  \-m10 
\&\-mbcopy  \-mbcopy\-builtin  \-mint32  \-mno\-int16 
\&\-mint16  \-mno\-int32  \-mfloat32  \-mno\-float64 
\&\-mfloat64  \-mno\-float32  \-mabshi  \-mno\-abshi 
\&\-mbranch\-expensive  \-mbranch\-cheap 
\&\-munix\-azzle  \-mdec\-asm\fR
.Sp
\&\fIpicoChip Options\fR
\&\fB\-mae=\fR\fIae_type\fR \fB\-mvliw\-lookahead=\fR\fIN\fR 
\&\fB\-msymbol\-as\-address \-mno\-inefficient\-warnings\fR
.Sp
\&\fIPowerPC Options\fR
See \s-1RS/6000\s0 n' PowerPC Options.
.Sp
\&\fI\s-1RL78\s0 Options\fR
\&\fB\-msim \-mmul=none \-mmul=g13 \-mmul=rl78\fR
.Sp
\&\fI\s-1RS/6000\s0 n' PowerPC Options\fR
\&\fB\-mcpu=\fR\fIcpu-type\fR 
\&\fB\-mtune=\fR\fIcpu-type\fR 
\&\fB\-mcmodel=\fR\fIcode-model\fR 
\&\fB\-mpowerpc64 
\&\-maltivec  \-mno\-altivec 
\&\-mpowerpc\-gpopt  \-mno\-powerpc\-gpopt 
\&\-mpowerpc\-gfxopt  \-mno\-powerpc\-gfxopt 
\&\-mmfcrf  \-mno\-mfcrf  \-mpopcntb  \-mno\-popcntb \-mpopcntd \-mno\-popcntd 
\&\-mfprnd  \-mno\-fprnd 
\&\-mcmpb \-mno\-cmpb \-mmfpgpr \-mno\-mfpgpr \-mhard\-dfp \-mno\-hard\-dfp 
\&\-mfull\-toc   \-mminimal\-toc  \-mno\-fp\-in\-toc  \-mno\-sum\-in\-toc 
\&\-m64  \-m32  \-mxl\-compat  \-mno\-xl\-compat  \-mpe 
\&\-malign\-power  \-malign\-natural 
\&\-msoft\-float  \-mhard\-float  \-mmultiple  \-mno\-multiple 
\&\-msingle\-float \-mdouble\-float \-msimple\-fpu 
\&\-mstrin  \-mno\-strin  \-mupdate  \-mno\-update 
\&\-mavoid\-indexed\-addresses  \-mno\-avoid\-indexed\-addresses 
\&\-mfused\-madd  \-mno\-fused\-madd  \-mbit\-align  \-mno\-bit\-align 
\&\-mstrict\-align  \-mno\-strict\-align  \-mrelocatable 
\&\-mno\-relocatable  \-mrelocatable\-lib  \-mno\-relocatable\-lib 
\&\-mtoc  \-mno\-toc  \-mlil  \-mlil\-endian  \-mbangin'  \-mbig\-endian 
\&\-mdynamic\-no\-pic  \-maltivec \-mswdiv  \-msingle\-pic\-base 
\&\-mprioritize\-restricted\-insns=\fR\fIpriority\fR 
\&\fB\-msched\-costly\-dep=\fR\fIdependence_type\fR 
\&\fB\-minsert\-sched\-nops=\fR\fIscheme\fR 
\&\fB\-mcall\-sysv  \-mcall\-netbsd 
\&\-maix\-struct\-return  \-msvr4\-struct\-return 
\&\-mabi=\fR\fIabi-type\fR \fB\-msecure\-plt \-mbss\-plt 
\&\-mblock\-move\-inline\-limit=\fR\fInum\fR 
\&\fB\-misel \-mno\-isel 
\&\-misel=yes  \-misel=no 
\&\-mspe \-mno\-spe 
\&\-mspe=yes  \-mspe=no 
\&\-mpaired 
\&\-mgen\-cell\-microcode \-mwarn\-cell\-microcode 
\&\-mvrsave \-mno\-vrsave 
\&\-mmulhw \-mno\-mulhw 
\&\-mdlmzb \-mno\-dlmzb 
\&\-mfloat\-gprs=yes  \-mfloat\-gprs=no \-mfloat\-gprs=single \-mfloat\-gprs=double 
\&\-mprototype  \-mno\-prototype 
\&\-msim  \-mmvme  \-madz  \-myellowknife  \-memb  \-msdata 
\&\-msdata=\fR\fIopt\fR  \fB\-mvxworks  \-G\fR \fInum\fR  \fB\-pthread 
\&\-mrecip \-mrecip=\fR\fIopt\fR \fB\-mno\-recip \-mrecip\-precision 
\&\-mno\-recip\-precision 
\&\-mveclibabi=\fR\fItype\fR \fB\-mfriz \-mno\-friz 
\&\-mpointers\-to\-nested\-functions \-mno\-pointers\-to\-nested\-functions 
\&\-msave\-toc\-indirect \-mno\-save\-toc\-indirect 
\&\-mpower8\-fusion \-mno\-mpower8\-fusion \-mpower8\-vector \-mno\-power8\-vector 
\&\-mcrypto \-mno\-crypto \-mdirect\-move \-mno\-direct\-move 
\&\-mquad\-memory \-mno\-quad\-memory 
\&\-mquad\-memory\-atomic \-mno\-quad\-memory\-atomic 
\&\-mcompat\-align\-parm \-mno\-compat\-align\-parm\fR
.Sp
\&\fI\s-1RX\s0 Options\fR
\&\fB\-m64bit\-doublez  \-m32bit\-doublez  \-fpu  \-nofpu
\&\-mcpu=
\&\-mbig\-endian\-data \-mlil\-endian\-data 
\&\-msmall\-data 
\&\-msim  \-mno\-sim
\&\-mas100\-syntax \-mno\-as100\-syntax
\&\-mrelax
\&\-mmax\-constant\-size=
\&\-mint\-register=
\&\-mpid
\&\-mno\-warn\-multiple\-fast\-interrupts
\&\-msave\-acc\-in\-interrupts\fR
.Sp
\&\fIS/390 n' zSeries Options\fR
\&\fB\-mtune=\fR\fIcpu-type\fR  \fB\-march=\fR\fIcpu-type\fR 
\&\fB\-mhard\-float  \-msoft\-float  \-mhard\-dfp \-mno\-hard\-dfp 
\&\-mlong\-double\-64 \-mlong\-double\-128 
\&\-mbackchain  \-mno\-backchain \-mpacked\-stack  \-mno\-packed\-stack 
\&\-msmall\-exec  \-mno\-small\-exec  \-mmvcle \-mno\-mvcle 
\&\-m64  \-m31  \-mdebug  \-mno\-debug  \-mesa  \-mzarch 
\&\-mtpf\-trace \-mno\-tpf\-trace  \-mfused\-madd  \-mno\-fused\-madd 
\&\-mwarn\-framesize  \-mwarn\-dynamicstack  \-mstack\-size \-mstack\-guard 
\&\-mhotpatch[=\fR\fIhalfwords\fR\fB] \-mno\-hotpatch\fR
.Sp
\&\fIScore Options\fR
\&\fB\-meb \-mel 
\&\-mnhwloop 
\&\-muls 
\&\-mmac 
\&\-mscore5 \-mscore5u \-mscore7 \-mscore7d\fR
.Sp
\&\fI\s-1SH\s0 Options\fR
\&\fB\-m1  \-m2  \-m2e 
\&\-m2a\-nofpu \-m2a\-single\-only \-m2a\-single \-m2a 
\&\-m3  \-m3e 
\&\-m4\-nofpu  \-m4\-single\-only  \-m4\-single  \-m4 
\&\-m4a\-nofpu \-m4a\-single\-only \-m4a\-single \-m4a \-m4al 
\&\-m5\-64media  \-m5\-64media\-nofpu 
\&\-m5\-32media  \-m5\-32media\-nofpu 
\&\-m5\-compact  \-m5\-compact\-nofpu 
\&\-mb  \-ml  \-mdalign  \-mrelax 
\&\-mbigtable \-mfmovd \-mhitachi \-mrenesas \-mno\-renesas \-mnomacsave 
\&\-mieee \-mno\-ieee \-mbitops  \-misize  \-minline\-ic_invalidate \-mpadstruct 
\&\-mspace \-mprefergot  \-musermode \-multcost=\fR\fInumber\fR \fB\-mdiv=\fR\fIstrategy\fR 
\&\fB\-mdivsi3_libfunc=\fR\fIname\fR \fB\-mfixed\-range=\fR\fIregister-range\fR 
\&\fB\-mindexed\-addressin \-mgettrcost=\fR\fInumber\fR \fB\-mpt\-fixed 
\&\-maccumulate\-outgoing\-args \-minvalid\-symbols 
\&\-matomic\-model=\fR\fIatomic-model\fR 
\&\fB\-mbranch\-cost=\fR\fInum\fR \fB\-mzdcbranch \-mno\-zdcbranch \-mcbranchdi \-mcmpeqdi 
\&\-mfused\-madd \-mno\-fused\-madd \-mfsca \-mno\-fsca \-mfsrra \-mno\-fsrra 
\&\-mpretend\-cmove \-mtas\fR
.Sp
\&\fISolaris 2 Options\fR
\&\fB\-mimpure\-text  \-mno\-impure\-text 
\&\-pthreadz \-pthread\fR
.Sp
\&\fI\s-1SPARC\s0 Options\fR
\&\fB\-mcpu=\fR\fIcpu-type\fR 
\&\fB\-mtune=\fR\fIcpu-type\fR 
\&\fB\-mcmodel=\fR\fIcode-model\fR 
\&\fB\-mmemory\-model=\fR\fImem-model\fR 
\&\fB\-m32  \-m64  \-mapp\-regs  \-mno\-app\-regs 
\&\-mfaster\-structs  \-mno\-faster\-structs  \-mflat  \-mno\-flat 
\&\-mfpu  \-mno\-fpu  \-mhard\-float  \-msoft\-float 
\&\-mhard\-quad\-float  \-msoft\-quad\-float 
\&\-mstack\-bias  \-mno\-stack\-bias 
\&\-munaligned\-doublez  \-mno\-unaligned\-doublez 
\&\-muser\-mode  \-mno\-user\-mode 
\&\-mv8plus  \-mno\-v8plus  \-mvis  \-mno\-vis 
\&\-mvis2  \-mno\-vis2  \-mvis3  \-mno\-vis3 
\&\-mcbcond \-mno\-cbcond 
\&\-mfmaf  \-mno\-fmaf  \-mpopc  \-mno\-popc 
\&\-mfix\-at697f \-mfix\-ut699\fR
.Sp
\&\fI\s-1SPU\s0 Options\fR
\&\fB\-mwarn\-reloc \-merror\-reloc 
\&\-msafe\-dma \-munsafe\-dma 
\&\-mbranch\-hints 
\&\-msmall\-mem \-mlarge\-mem \-mstdmain 
\&\-mfixed\-range=\fR\fIregister-range\fR 
\&\fB\-mea32 \-mea64 
\&\-maddress\-space\-conversion \-mno\-address\-space\-conversion 
\&\-mcache\-size=\fR\fIcache-size\fR 
\&\fB\-matomic\-updates \-mno\-atomic\-updates\fR
.Sp
\&\fISystem V Options\fR
\&\fB\-Qy  \-Qn  \-YP,\fR\fIpaths\fR  \fB\-Ym,\fR\fIdir\fR
.Sp
\&\fITILE-Gx Options\fR
\&\fB\-mcpu=\fR\fIcpu\fR \fB\-m32 \-m64 \-mcmodel=\fR\fIcode-model\fR
.Sp
\&\fITILEPro Options\fR
\&\fB\-mcpu=\fR\fIcpu\fR \fB\-m32\fR
.Sp
\&\fIV850 Options\fR
\&\fB\-mlong\-calls  \-mno\-long\-calls  \-mep  \-mno\-ep 
\&\-mprolog\-function  \-mno\-prolog\-function  \-mspace 
\&\-mtda=\fR\fIn\fR  \fB\-msda=\fR\fIn\fR  \fB\-mzda=\fR\fIn\fR 
\&\fB\-mapp\-regs  \-mno\-app\-regs 
\&\-mdisable\-callt  \-mno\-disable\-callt 
\&\-mv850e2v3 \-mv850e2 \-mv850e1 \-mv850es 
\&\-mv850e \-mv850 \-mv850e3v5 
\&\-mloop 
\&\-mrelax 
\&\-mlong\-jumps 
\&\-msoft\-float 
\&\-mhard\-float 
\&\-mgcc\-abi 
\&\-mrh850\-abi 
\&\-mbig\-switch\fR
.Sp
\&\fI\s-1VAX\s0 Options\fR
\&\fB\-mg  \-mgnu  \-munix\fR
.Sp
\&\fI\s-1VMS\s0 Options\fR
\&\fB\-mvms\-return\-codes \-mdebug\-main=\fR\fIprefix\fR \fB\-mmalloc64 
\&\-mpointer\-size=\fR\fIsize\fR
.Sp
\&\fIVxWorks Options\fR
\&\fB\-mrtp  \-non\-static  \-Bstatic  \-Bdynamic 
\&\-Xbind\-lazy  \-Xbind\-now\fR
.Sp
\&\fIx86\-64 Options\fR
See i386 n' x86\-64 Options.
.Sp
\&\fIXstormy16 Options\fR
\&\fB\-msim\fR
.Sp
\&\fIXtensa Options\fR
\&\fB\-mconst16 \-mno\-const16 
\&\-mfused\-madd  \-mno\-fused\-madd 
\&\-mforce\-no\-pic 
\&\-mserialize\-volatile  \-mno\-serialize\-volatile 
\&\-mtext\-section\-literals  \-mno\-text\-section\-literals 
\&\-mtarget\-align  \-mno\-target\-align 
\&\-mlongcalls  \-mno\-longcalls\fR
.Sp
\&\fIzSeries Options\fR
See S/390 n' zSeries Options.
.IP "\fICode Generation Options\fR" 4
.IX Item "Code Generation Options"
\&\fB\-fcall\-saved\-\fR\fIreg\fR  \fB\-fcall\-used\-\fR\fIreg\fR 
\&\fB\-ffixed\-\fR\fIreg\fR  \fB\-fexceptions 
\&\-fnon\-call\-exceptions  \-fdelete\-dead\-exceptions  \-funwind\-tablez 
\&\-fasynchronous\-unwind\-tablez 
\&\-fno\-gnu\-unique 
\&\-finhibit\-size\-directizzle  \-finstrument\-functions 
\&\-finstrument\-functions\-exclude\-function\-list=\fR\fIsym\fR\fB,\fR\fIsym\fR\fB,... 
\&\-finstrument\-functions\-exclude\-file\-list=\fR\fIfile\fR\fB,\fR\fIfile\fR\fB,... 
\&\-fno\-common  \-fno\-ident 
\&\-fpcc\-struct\-return  \-fpic  \-fPIC \-fpie \-fPIE 
\&\-fno\-jump\-tablez 
\&\-frecord\-gcc\-switches 
\&\-freg\-struct\-return  \-fshort\-enums 
\&\-fshort\-double  \-fshort\-wchar 
\&\-fverbose\-azzle  \-fpack\-struct[=\fR\fIn\fR\fB]  \-fstack\-check 
\&\-fstack\-limit\-register=\fR\fIreg\fR  \fB\-fstack\-limit\-symbol=\fR\fIsym\fR 
\&\fB\-fno\-stack\-limit \-fsplit\-stack 
\&\-fleading\-underscore  \-ftls\-model=\fR\fImodel\fR 
\&\fB\-fstack\-reuse=\fR\fIreuse_level\fR 
\&\fB\-ftrapv  \-fwrapv  \-fbounds\-check 
\&\-fvisibilitizzle \-fstrict\-volatile\-bitfieldz \-fsync\-libcalls\fR
.SS "Options Controllin tha Kind of Output"
.IX Subsection "Options Controllin tha Kind of Output"
Compilation can involve up ta four stages: preprocessing, compilation
proper, assembly n' linking, always up in dat order n' shit.  \s-1GCC\s0 is capable of
preprocessin n' compilin nuff muthafuckin filez either tha fuck into several
assembla input files, or tha fuck into one assembla input file; then each
assembla input file produces a object file, n' linkin combines all
the object filez (those newly compiled, n' dem specified as input)
into a executable file.
.PP
For any given input file, tha file name suffix determines what tha fuck kind of
compilation is done:
.IP "\fIfile\fR\fB.c\fR" 4
.IX Item "file.c"
C source code dat must be preprocessed.
.IP "\fIfile\fR\fB.i\fR" 4
.IX Item "file.i"
C source code dat should not be preprocessed.
.IP "\fIfile\fR\fB.ii\fR" 4
.IX Item "file.ii"
\&\*(C+ source code dat should not be preprocessed.
.IP "\fIfile\fR\fB.m\fR" 4
.IX Item "file.m"
Objective-C source code.  Note dat you must link wit tha \fIlibobjc\fR
library ta cook up a Objective-C program work.
.IP "\fIfile\fR\fB.mi\fR" 4
.IX Item "file.mi"
Objective-C source code dat should not be preprocessed.
.IP "\fIfile\fR\fB.mm\fR" 4
.IX Item "file.mm"
.PD 0
.IP "\fIfile\fR\fB.M\fR" 4
.IX Item "file.M"
.PD
Objective\-\*(C+ source code.  Note dat you must link wit tha \fIlibobjc\fR
library ta cook up a Objective\-\*(C+ program work.  Note dat \fB.M\fR refers
to a literal capital M.
.IP "\fIfile\fR\fB.mii\fR" 4
.IX Item "file.mii"
Objective\-\*(C+ source code dat should not be preprocessed.
.IP "\fIfile\fR\fB.h\fR" 4
.IX Item "file.h"
C, \*(C+, Objective-C or Objective\-\*(C+ header file ta be turned tha fuck into a
precompiled header (default), or C, \*(C+ header file ta be turned tha fuck into an
Ada spec (via tha \fB\-fdump\-ada\-spec\fR switch).
.IP "\fIfile\fR\fB.cc\fR" 4
.IX Item "file.cc"
.PD 0
.IP "\fIfile\fR\fB.cp\fR" 4
.IX Item "file.cp"
.IP "\fIfile\fR\fB.cxx\fR" 4
.IX Item "file.cxx"
.IP "\fIfile\fR\fB.cpp\fR" 4
.IX Item "file.cpp"
.IP "\fIfile\fR\fB.CPP\fR" 4
.IX Item "file.CPP"
.IP "\fIfile\fR\fB.c++\fR" 4
.IX Item "file.c++"
.IP "\fIfile\fR\fB.C\fR" 4
.IX Item "file.C"
.PD
\&\*(C+ source code dat must be preprocessed. Y'all KNOW dat shit, muthafucka!  Note dat up in \fB.cxx\fR,
the last two lettas must both be literally \fBx\fR.  Likewise,
\&\fB.C\fR refers ta a literal capital C.
.IP "\fIfile\fR\fB.mm\fR" 4
.IX Item "file.mm"
.PD 0
.IP "\fIfile\fR\fB.M\fR" 4
.IX Item "file.M"
.PD
Objective\-\*(C+ source code dat must be preprocessed.
.IP "\fIfile\fR\fB.mii\fR" 4
.IX Item "file.mii"
Objective\-\*(C+ source code dat should not be preprocessed.
.IP "\fIfile\fR\fB.hh\fR" 4
.IX Item "file.hh"
.PD 0
.IP "\fIfile\fR\fB.H\fR" 4
.IX Item "file.H"
.IP "\fIfile\fR\fB.hp\fR" 4
.IX Item "file.hp"
.IP "\fIfile\fR\fB.hxx\fR" 4
.IX Item "file.hxx"
.IP "\fIfile\fR\fB.hpp\fR" 4
.IX Item "file.hpp"
.IP "\fIfile\fR\fB.HPP\fR" 4
.IX Item "file.HPP"
.IP "\fIfile\fR\fB.h++\fR" 4
.IX Item "file.h++"
.IP "\fIfile\fR\fB.tcc\fR" 4
.IX Item "file.tcc"
.PD
\&\*(C+ header file ta be turned tha fuck into a precompiled header or Ada spec.
.IP "\fIfile\fR\fB.f\fR" 4
.IX Item "file.f"
.PD 0
.IP "\fIfile\fR\fB.for\fR" 4
.IX Item "file.for"
.IP "\fIfile\fR\fB.ftn\fR" 4
.IX Item "file.ftn"
.PD
Fixed form Fortran source code dat should not be preprocessed.
.IP "\fIfile\fR\fB.F\fR" 4
.IX Item "file.F"
.PD 0
.IP "\fIfile\fR\fB.FOR\fR" 4
.IX Item "file.FOR"
.IP "\fIfile\fR\fB.fpp\fR" 4
.IX Item "file.fpp"
.IP "\fIfile\fR\fB.FPP\fR" 4
.IX Item "file.FPP"
.IP "\fIfile\fR\fB.FTN\fR" 4
.IX Item "file.FTN"
.PD
Fixed form Fortran source code dat must be preprocessed (with tha traditional
preprocessor).
.IP "\fIfile\fR\fB.f90\fR" 4
.IX Item "file.f90"
.PD 0
.IP "\fIfile\fR\fB.f95\fR" 4
.IX Item "file.f95"
.IP "\fIfile\fR\fB.f03\fR" 4
.IX Item "file.f03"
.IP "\fIfile\fR\fB.f08\fR" 4
.IX Item "file.f08"
.PD
Jacked form Fortran source code dat should not be preprocessed.
.IP "\fIfile\fR\fB.F90\fR" 4
.IX Item "file.F90"
.PD 0
.IP "\fIfile\fR\fB.F95\fR" 4
.IX Item "file.F95"
.IP "\fIfile\fR\fB.F03\fR" 4
.IX Item "file.F03"
.IP "\fIfile\fR\fB.F08\fR" 4
.IX Item "file.F08"
.PD
Jacked form Fortran source code dat must be preprocessed (with the
traditionizzle preprocessor).
.IP "\fIfile\fR\fB.go\fR" 4
.IX Item "file.go"
Go source code.
.IP "\fIfile\fR\fB.ads\fR" 4
.IX Item "file.ads"
Ada source code file dat gotz nuff a library unit declaration (a
declaration of a package, subprogram, or generic, or a generic
instantiation), or a library unit renamin declaration (a package,
generic, or subprogram renamin declaration).  Such filez is also
called \fIspecs\fR.
.IP "\fIfile\fR\fB.adb\fR" 4
.IX Item "file.adb"
Ada source code file containin a library unit body (a subprogram or
package body).  Such filez is also called \fIbodies\fR.
.IP "\fIfile\fR\fB.s\fR" 4
.IX Item "file.s"
Assembla code.
.IP "\fIfile\fR\fB.S\fR" 4
.IX Item "file.S"
.PD 0
.IP "\fIfile\fR\fB.sx\fR" 4
.IX Item "file.sx"
.PD
Assembla code dat must be preprocessed.
.IP "\fIother\fR" 4
.IX Item "other"
An object file ta be fed straight tha fuck into linking.
Any file name wit no recognized suffix is treated dis way.
.PP
Yo ass can specify tha input language explicitly wit tha \fB\-x\fR option:
.IP "\fB\-x\fR \fIlanguage\fR" 4
.IX Item "-x language"
Specify explicitly tha \fIlanguage\fR fo' tha followin input files
(rather than lettin tha compila chizzle a thugged-out default based on tha file
name suffix).  This option applies ta all followin input filez until
the next \fB\-x\fR option. I aint talkin' bout chicken n' gravy biatch.  Possible joints fo' \fIlanguage\fR are:
.Sp
.Vb 9
\&        c  c\-header  cpp\-output
\&        c++  c++\-header  c++\-cpp\-output
\&        objective\-c  objective\-c\-header  objective\-c\-cpp\-output
\&        objective\-c++ objective\-c++\-header objective\-c++\-cpp\-output
\&        assembla  assembler\-with\-cpp
\&        ada
\&        f77  f77\-cpp\-input f95  f95\-cpp\-input
\&        go
\&        java
.Ve
.IP "\fB\-x none\fR" 4
.IX Item "-x none"
Turn off any justification of a language, so dat subsequent filez are
handled accordin ta they file name suffixes (as they is if \fB\-x\fR
has not been used at all).
.IP "\fB\-pass\-exit\-codes\fR" 4
.IX Item "-pass-exit-codes"
Normally tha \fBgcc\fR program exits wit tha code of 1 if any
phase of tha compila returns a non-success return code.  If you specify
\&\fB\-pass\-exit\-codes\fR, tha \fBgcc\fR program instead returns with
the numerically highest error produced by any phase returnin a error
indication. I aint talkin' bout chicken n' gravy biatch.  Da C, \*(C+, n' Fortran front endz return 4 if a internal
compila error is encountered.
.PP
If you only want a shitload of tha stagez of compilation, you can use
\&\fB\-x\fR (or filename suffixes) ta tell \fBgcc\fR where ta start, and
one of tha options \fB\-c\fR, \fB\-S\fR, or \fB\-E\fR ta say where
\&\fBgcc\fR is ta stop.  Note dat some combinations (for example,
\&\fB\-x cpp-output \-E\fR) instruct \fBgcc\fR ta do not a god damn thang at all.
.IP "\fB\-c\fR" 4
.IX Item "-c"
Compile or assemble tha source filez yo, but do not link.  Da linking
stage simply aint done.  Da illest output is up in tha form of an
object file fo' each source file.
.Sp
By default, tha object file name fo' a source file is made by replacing
the suffix \fB.c\fR, \fB.i\fR, \fB.s\fR, etc., wit \fB.o\fR.
.Sp
Unrecognized input files, not requirin compilation or assembly, are
ignored.
.IP "\fB\-S\fR" 4
.IX Item "-S"
Quit afta tha stage of compilation proper; do not assemble.  Da output
is up in tha form of a assembla code file fo' each non-assembla input
file specified.
.Sp
By default, tha assembla file name fo' a source file is made by
replacin tha suffix \fB.c\fR, \fB.i\fR, etc., wit \fB.s\fR.
.Sp
Input filez dat don't require compilation is ignored.
.IP "\fB\-E\fR" 4
.IX Item "-E"
Quit afta tha preprocessin stage; do not run tha compila proper n' shit.  The
output is up in tha form of preprocessed source code, which is busted ta the
standard output.
.Sp
Input filez dat don't require preprocessin is ignored.
.IP "\fB\-o\fR \fIfile\fR" 4
.IX Item "-o file"
Place output up in file \fIfile\fR.  This applies ta whatever
sort of output is bein produced, whether it be a executable file,
an object file, a assembla file or preprocessed C code.
.Sp
If \fB\-o\fR aint specified, tha default is ta put a executable
file up in \fIa.out\fR, tha object file for
\&\fI\fIsource\fI.\fIsuffix\fI\fR up in \fI\fIsource\fI.o\fR, its
assembla file up in \fI\fIsource\fI.s\fR, a precompiled header file in
\&\fI\fIsource\fI.\fIsuffix\fI.gch\fR, n' all preprocessed C source on
standard output.
.IP "\fB\-v\fR" 4
.IX Item "-v"
Print (on standard error output) tha commandz executed ta run tha stages
of compilation. I aint talkin' bout chicken n' gravy biatch.  Also print tha version number of tha compila driver
program n' of tha preprocessor n' tha compila proper.
.IP "\fB\-###\fR" 4
.IX Item "-###"
Like \fB\-v\fR except tha commandz is not executed n' arguments
are quoted unless they contain only alphanumeric charactas or \f(CW\*(C`./\-_\*(C'\fR.
This is useful fo' shell scripts ta capture tha driver-generated command lines.
.IP "\fB\-pipe\fR" 4
.IX Item "-pipe"
Use pipes rather than temporary filez fo' communication between the
various stagez of compilation. I aint talkin' bout chicken n' gravy biatch.  This fails ta work on some systems where
the assembla is unable ta read from a pipe; but tha \s-1GNU\s0 assembla has
no shit.
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Print (on tha standard output) a thugged-out description of tha command-line options
understood by \fBgcc\fR.  If tha \fB\-v\fR option be also specified
then \fB\-\-help\fR be also passed on ta tha various processes
invoked by \fBgcc\fR, so dat they can display tha command-line options
they accept.  If tha \fB\-Wextra\fR option has also been specified
(prior ta tha \fB\-\-help\fR option), then command-line options that
have no documentation associated wit dem is also displayed.
.IP "\fB\-\-target\-help\fR" 4
.IX Item "--target-help"
Print (on tha standard output) a thugged-out description of target-specific command-line
options fo' each tool.  For some targets extra target-specific
information may also be printed.
.IP "\fB\-\-help={\fR\fIclass\fR|[\fB^\fR]\fIqualifier\fR\fB}\fR[\fB,...\fR]" 4
.IX Item "--help={class|[^]qualifier}[,...]"
Print (on tha standard output) a thugged-out description of tha command-line
options understood by tha compila dat fit tha fuck into all specified classes
and qualifiers.  These is tha supported classes:
.RS 4
.IP "\fBoptimizers\fR" 4
.IX Item "optimizers"
Display all of tha optimization options supported by the
compiler.
.IP "\fBwarnings\fR" 4
.IX Item "warnings"
Display all of tha options controllin warnin lyrics
produced by tha compiler.
.IP "\fBtarget\fR" 4
.IX Item "target"
Display target-specific options.  Unlike the
\&\fB\-\-target\-help\fR option however, target-specific optionz of the
linker n' assembla is not displayed. Y'all KNOW dat shit, muthafucka!  This is cuz them
tools do not currently support tha extended \fB\-\-help=\fR syntax.
.IP "\fBparams\fR" 4
.IX Item "params"
Display tha joints recognized by tha \fB\-\-param\fR
option.
.IP "\fIlanguage\fR" 4
.IX Item "language"
Display tha options supported fo' \fIlanguage\fR, where
\&\fIlanguage\fR is tha name of one of tha languages supported up in this
version of \s-1GCC.\s0
.IP "\fBcommon\fR" 4
.IX Item "common"
Display tha options dat is common ta all languages.
.RE
.RS 4
.Sp
These is tha supported qualifiers:
.IP "\fBundocumented\fR" 4
.IX Item "undocumented"
Display only dem options dat is undocumented.
.IP "\fBjoined\fR" 4
.IX Item "joined"
Display options takin a argument dat appears afta a equal
sign up in tha same continuous piece of text, such as:
\&\fB\-\-help=target\fR.
.IP "\fBseparate\fR" 4
.IX Item "separate"
Display options takin a argument dat appears as a separate word
followin tha original gangsta option, such as: \fB\-o output-file\fR.
.RE
.RS 4
.Sp
Thus fo' example ta display all tha undocumented target-specific
switches supported by tha compiler, use:
.Sp
.Vb 1
\&        \-\-help=target,undocumented
.Ve
.Sp
Da sense of a qualifier can be inverted by prefixin it wit the
\&\fB^\fR character, so fo' example ta display all binary warning
options (i.e., ones dat is either on or off n' dat do not take an
argument) dat gotz a thugged-out description, use:
.Sp
.Vb 1
\&        \-\-help=warnings,^joined,^undocumented
.Ve
.Sp
Da argument ta \fB\-\-help=\fR should not consist solely of inverted
qualifiers.
.Sp
Combinin nuff muthafuckin classes is possible, although dis usually
restricts tha output so much dat there is not a god damn thang ta display.  One
case where it do work, however, is when one of tha classes is
\&\fItarget\fR.  For example, ta display all tha target-specific
optimization options, use:
.Sp
.Vb 1
\&        \-\-help=target,optimizers
.Ve
.Sp
Da \fB\-\-help=\fR option can be repeated on tha command line.  Each
successive use displays its axed class of options, skipping
those dat have already been displayed.
.Sp
If tha \fB\-Q\fR option appears on tha command line before the
\&\fB\-\-help=\fR option, then tha descriptizzle text displayed by
\&\fB\-\-help=\fR is chizzled. Y'all KNOW dat shit, muthafucka!  Instead of describin tha displayed
options, a indication is given as ta whether tha option is enabled,
disabled or set ta a specific value (assumin dat tha compiler
knows dis all up in tha point where tha \fB\-\-help=\fR option is used).
.Sp
Here be a truncated example from tha \s-1ARM\s0 port of \fBgcc\fR:
.Sp
.Vb 5
\&          % gcc \-Q \-mabi=2 \-\-help=target \-c
\&          Da followin options is target specific:
\&          \-mabi=                                2
\&          \-mabort\-on\-noreturn                   [disabled]
\&          \-mapcs                                [disabled]
.Ve
.Sp
Da output is sensitizzle ta tha effectz of previous command-line
options, so fo' example it is possible ta smoke up which optimizations
are enabled at \fB\-O2\fR by using:
.Sp
.Vb 1
\&        \-Q \-O2 \-\-help=optimizers
.Ve
.Sp
Alternatively you can discover which binary optimizations is enabled
by \fB\-O3\fR by using:
.Sp
.Vb 3
\&        gcc \-c \-Q \-O3 \-\-help=optimizers > /tmp/O3\-opts
\&        gcc \-c \-Q \-O2 \-\-help=optimizers > /tmp/O2\-opts
\&        diff /tmp/O2\-opts /tmp/O3\-opts | grep enabled
.Ve
.RE
.IP "\fB\-no\-canonical\-prefixes\fR" 4
.IX Item "-no-canonical-prefixes"
Do not expand any symbolic links, resolve references ta \fB/../\fR
or \fB/./\fR, or make tha path absolute when generatin a relative
prefix.
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
Display tha version number n' copyrightz of tha invoked \s-1GCC.\s0
.IP "\fB\-wrapper\fR" 4
.IX Item "-wrapper"
Invoke all subcommandz under a wrapper program.  Da name of the
wrapper program n' its parametas is passed as a cold-ass lil comma separated
list.
.Sp
.Vb 1
\&        gcc \-c t.c \-wrapper gdb,\-\-args
.Ve
.Sp
This invokes all subprogramz of \fBgcc\fR under
\&\fBgdb \-\-args\fR, thus tha invocation of \fBcc1\fR is
\&\fBgdb \-\-args cc1 ...\fR.
.IP "\fB\-fplugin=\fR\fIname\fR\fB.so\fR" 4
.IX Item "-fplugin=name.so"
Load tha plugin code up in file \fIname\fR.so, assumed ta be a
shared object ta be dlopen'd by tha compila n' shit.  Da base name of
the shared object file is used ta identify tha plugin fo' the
purposez of argument parsin (See
\&\fB\-fplugin\-arg\-\fR\fIname\fR\fB\-\fR\fIkey\fR\fB=\fR\fIvalue\fR below).
Each plugin should define tha callback functions specified up in the
Plugins \s-1API.\s0
.IP "\fB\-fplugin\-arg\-\fR\fIname\fR\fB\-\fR\fIkey\fR\fB=\fR\fIvalue\fR" 4
.IX Item "-fplugin-arg-name-key=value"
Define a argument called \fIkey\fR wit a value of \fIvalue\fR
for tha plugin called \fIname\fR.
.IP "\fB\-fdump\-ada\-spec\fR[\fB\-slim\fR]" 4
.IX Item "-fdump-ada-spec[-slim]"
For C n' \*(C+ source n' include files, generate correspondin Ada specs.
.IP "\fB\-fada\-spec\-parent=\fR\fIunit\fR" 4
.IX Item "-fada-spec-parent=unit"
In conjunction wit \fB\-fdump\-ada\-spec\fR[\fB\-slim\fR] above, generate
Ada specs as lil pimp unitz of parent \fIunit\fR.
.IP "\fB\-fdump\-go\-spec=\fR\fIfile\fR" 4
.IX Item "-fdump-go-spec=file"
For input filez up in any language, generate correspondin Go
declarations up in \fIfile\fR.  This generates Go \f(CW\*(C`const\*(C'\fR,
\&\f(CW\*(C`type\*(C'\fR, \f(CW\*(C`var\*(C'\fR, n' \f(CW\*(C`func\*(C'\fR declarations which may be a
useful way ta start freestylin a Go intercourse ta code freestyled up in some
other language.
.IP "\fB@\fR\fIfile\fR" 4
.IX Item "@file"
Read command-line options from \fIfile\fR.  Da options read are
inserted up in place of tha original gangsta @\fIfile\fR option. I aint talkin' bout chicken n' gravy biatch.  If \fIfile\fR
does not exist, or cannot be read, then tha option is ghon be treated
literally, n' not removed.
.Sp
Options up in \fIfile\fR is separated by whitespace.  A whitespace
characta may be included up in a option by surroundin tha entire
option up in either single or double quotes.  Any characta (includin a
backslash) may be included by prefixin tha characta ta be included
with a funky-ass backslash.  Da \fIfile\fR may itself contain additional
@\fIfile\fR options; any such options is ghon be processed recursively.
.SS "Compilin \*(C+ Programs"
.IX Subsection "Compilin Programs"
\&\*(C+ source filez conventionally use one of tha suffixes \fB.C\fR,
\&\fB.cc\fR, \fB.cpp\fR, \fB.CPP\fR, \fB.c++\fR, \fB.cp\fR, or
\&\fB.cxx\fR; \*(C+ header filez often use \fB.hh\fR, \fB.hpp\fR,
\&\fB.H\fR, or (for shared template code) \fB.tcc\fR; and
preprocessed \*(C+ filez use tha suffix \fB.ii\fR.  \s-1GCC\s0 recognizes
filez wit these names n' compilez dem as \*(C+ programs even if you
call tha compila tha same way as fo' compilin C programs (usually
with tha name \fBgcc\fR).
.PP
But fuck dat shiznit yo, tha word on tha street is dat tha use of \fBgcc\fR do not add tha \*(C+ library.
\&\fBg++\fR be a program dat calls \s-1GCC\s0 n' automatically specifies linking
against tha \*(C+ library.  It treats \fB.c\fR,
\&\fB.h\fR n' \fB.i\fR filez as \*(C+ source filez instead of C source
filez unless \fB\-x\fR is used. Y'all KNOW dat shit, muthafucka!  This program be also useful when
precompilin a C header file wit a \fB.h\fR extension fo' use up in \*(C+
compilations.  On nuff systems, \fBg++\fR be also installed with
the name \fBc++\fR.
.PP
When you compile \*(C+ programs, you may specify nuff of tha same
command-line options dat you use fo' compilin programs up in any
language; or command-line options meaningful fo' C n' related
languages; or options dat is meaningful only fo' \*(C+ programs.
.SS "Options Controllin C Dialect"
.IX Subsection "Options Controllin C Dialect"
Da followin options control tha dialect of C (or languages derived
from C, like fuckin \*(C+, Objective-C n' Objective\-\*(C+) dat tha compiler
accepts:
.IP "\fB\-ansi\fR" 4
.IX Item "-ansi"
In C mode, dis is equivalent ta \fB\-std=c90\fR. In \*(C+ mode, it is
equivalent ta \fB\-std=c++98\fR.
.Sp
This turns off certain featurez of \s-1GCC\s0 dat is incompatible wit \s-1ISO
C90 \s0(when compilin C code), or of standard \*(C+ (when compilin \*(C+ code),
like fuckin tha \f(CW\*(C`asm\*(C'\fR n' \f(CW\*(C`typeof\*(C'\fR keywords, and
predefined macros like fuckin \f(CW\*(C`unix\*(C'\fR n' \f(CW\*(C`vax\*(C'\fR dat identify the
type of system yo ass is using.  It also enablez tha undesirable and
rarely used \s-1ISO\s0 trigraph feature.  For tha C compiler,
it disablez recognizzle of \*(C+ steez \fB//\fR comments as well as
the \f(CW\*(C`inline\*(C'\fR keyword.
.Sp
Da alternate keywordz \f(CW\*(C`_\|_asm_\|_\*(C'\fR, \f(CW\*(C`_\|_extension_\|_\*(C'\fR,
\&\f(CW\*(C`_\|_inline_\|_\*(C'\fR n' \f(CW\*(C`_\|_typeof_\|_\*(C'\fR continue ta work despite
\&\fB\-ansi\fR.  Yo ass would not wanna use dem up in a \s-1ISO C\s0 program, of
course yo, but it is useful ta put dem up in header filez dat might be included
in compilations done wit \fB\-ansi\fR.  Alternate predefined macros
like fuckin \f(CW\*(C`_\|_unix_\|_\*(C'\fR n' \f(CW\*(C`_\|_vax_\|_\*(C'\fR is also available, wit or
without \fB\-ansi\fR.
.Sp
Da \fB\-ansi\fR option do not cause non-ISO programs ta be
rejected gratuitously.  For that, \fB\-Wpedantic\fR is required in
addizzle ta \fB\-ansi\fR.
.Sp
Da macro \f(CW\*(C`_\|_STRICT_ANSI_\|_\*(C'\fR is predefined when tha \fB\-ansi\fR
option is used. Y'all KNOW dat shit, muthafucka!  Some header filez may notice dis macro n' refrain
from declarin certain functions or definin certain macros dat the
\&\s-1ISO\s0 standard don't call for; dis is ta avoid interferin wit any
programs dat might use these names fo' other thangs.
.Sp
Functions dat is normally built up in but aint gots semantics
defined by \s-1ISO C \s0(like fuckin \f(CW\*(C`alloca\*(C'\fR n' \f(CW\*(C`ffs\*(C'\fR) is not built-in
functions when \fB\-ansi\fR is used.
.IP "\fB\-std=\fR" 4
.IX Item "-std="
Determine tha language standard. Y'all KNOW dat shit, muthafucka!   This option
is currently only supported when compilin C or \*(C+.
.Sp
Da compila can accept nuff muthafuckin base standards, like fuckin \fBc90\fR or
\&\fBc++98\fR, n' \s-1GNU\s0 dialectz of dem standards, such as
\&\fBgnu90\fR or \fBgnu++98\fR.  When a funky-ass base standard is specified, the
compila accepts all programs followin dat standard plus them
usin \s-1GNU\s0 extensions dat do not contradict dat shit.  For example,
\&\fB\-std=c90\fR turns off certain featurez of \s-1GCC\s0 dat are
incompatible wit \s-1ISO C90,\s0 like fuckin tha \f(CW\*(C`asm\*(C'\fR n' \f(CW\*(C`typeof\*(C'\fR
keywordz yo, but not other \s-1GNU\s0 extensions dat aint gots a meanin in
\&\s-1ISO C90,\s0 like fuckin omittin tha middle term of a \f(CW\*(C`?:\*(C'\fR
expression. I aint talkin' bout chicken n' gravy biatch. On tha other hand, when a \s-1GNU\s0 dialect of a standard is
specified, all features supported by tha compila is enabled, even when
those features chizzle tha meanin of tha base standard. Y'all KNOW dat shit, muthafucka!  As a result, some
strict-conformin programs may be rejected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da particular standard
is used by \fB\-Wpedantic\fR ta identify which features is \s-1GNU\s0
extensions given dat version of tha standard. Y'all KNOW dat shit, muthafucka! For example
\&\fB\-std=gnu90 \-Wpedantic\fR warns bout \*(C+ steez \fB//\fR
comments, while \fB\-std=gnu99 \-Wpedantic\fR do not.
.Sp
A value fo' dis option must be provided; possible joints are
.RS 4
.IP "\fBc90\fR" 4
.IX Item "c90"
.PD 0
.IP "\fBc89\fR" 4
.IX Item "c89"
.IP "\fBiso9899:1990\fR" 4
.IX Item "iso9899:1990"
.PD
Support all \s-1ISO C90\s0 programs (certain \s-1GNU\s0 extensions dat conflict
with \s-1ISO C90\s0 is disabled). Right back up in yo muthafuckin ass. Same as \fB\-ansi\fR fo' C code.
.IP "\fBiso9899:199409\fR" 4
.IX Item "iso9899:199409"
\&\s-1ISO C90\s0 as modified up in amendment 1.
.IP "\fBc99\fR" 4
.IX Item "c99"
.PD 0
.IP "\fBc9x\fR" 4
.IX Item "c9x"
.IP "\fBiso9899:1999\fR" 4
.IX Item "iso9899:1999"
.IP "\fBiso9899:199x\fR" 4
.IX Item "iso9899:199x"
.PD
\&\s-1ISO C99. \s0 Note dat dis standard aint yet straight-up supported; see
<\fBhttp://gcc.gnu.org/c99status.html\fR> fo' mo' shiznit. I aint talkin' bout chicken n' gravy biatch.  The
names \fBc9x\fR n' \fBiso9899:199x\fR is deprecated.
.IP "\fBc11\fR" 4
.IX Item "c11"
.PD 0
.IP "\fBc1x\fR" 4
.IX Item "c1x"
.IP "\fBiso9899:2011\fR" 4
.IX Item "iso9899:2011"
.PD
\&\s-1ISO C11,\s0 tha 2011 revision of tha \s-1ISO C\s0 standard.
Support is incomplete n' experimental. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Da name \fBc1x\fR is
deprecated.
.IP "\fBgnu90\fR" 4
.IX Item "gnu90"
.PD 0
.IP "\fBgnu89\fR" 4
.IX Item "gnu89"
.PD
\&\s-1GNU\s0 dialect of \s-1ISO C90 \s0(includin some C99 features). This
is tha default fo' C code.
.IP "\fBgnu99\fR" 4
.IX Item "gnu99"
.PD 0
.IP "\fBgnu9x\fR" 4
.IX Item "gnu9x"
.PD
\&\s-1GNU\s0 dialect of \s-1ISO C99. \s0 When \s-1ISO C99\s0 is straight-up implemented up in \s-1GCC,\s0
this will become tha default.  Da name \fBgnu9x\fR is deprecated.
.IP "\fBgnu11\fR" 4
.IX Item "gnu11"
.PD 0
.IP "\fBgnu1x\fR" 4
.IX Item "gnu1x"
.PD
\&\s-1GNU\s0 dialect of \s-1ISO C11. \s0 Support is incomplete n' experimental. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  The
name \fBgnu1x\fR is deprecated.
.IP "\fBc++98\fR" 4
.IX Item "c++98"
.PD 0
.IP "\fBc++03\fR" 4
.IX Item "c++03"
.PD
Da 1998 \s-1ISO \*(C+\s0 standard plus tha 2003 technical corrigendum n' some
additionizzle defect reports, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Same as \fB\-ansi\fR fo' \*(C+ code.
.IP "\fBgnu++98\fR" 4
.IX Item "gnu++98"
.PD 0
.IP "\fBgnu++03\fR" 4
.IX Item "gnu++03"
.PD
\&\s-1GNU\s0 dialect of \fB\-std=c++98\fR.  This is tha default for
\&\*(C+ code.
.IP "\fBc++11\fR" 4
.IX Item "c++11"
.PD 0
.IP "\fBc++0x\fR" 4
.IX Item "c++0x"
.PD
Da 2011 \s-1ISO \*(C+\s0 standard plus amendments, n' you can put dat on yo' toast.  Support fo' \*(C+11 is still
experimental, n' may chizzle up in incompatible ways up in future releases.
Da name \fBc++0x\fR is deprecated.
.IP "\fBgnu++11\fR" 4
.IX Item "gnu++11"
.PD 0
.IP "\fBgnu++0x\fR" 4
.IX Item "gnu++0x"
.PD
\&\s-1GNU\s0 dialect of \fB\-std=c++11\fR. Right back up in yo muthafuckin ass. Support fo' \*(C+11 is still
experimental, n' may chizzle up in incompatible ways up in future releases.
Da name \fBgnu++0x\fR is deprecated.
.IP "\fBc++1y\fR" 4
.IX Item "c++1y"
Da next revision of tha \s-1ISO \*(C+\s0 standard, tentatively planned for
2017.  Support is highly experimental, n' will almost certainly
change up in incompatible ways up in future releases.
.IP "\fBgnu++1y\fR" 4
.IX Item "gnu++1y"
\&\s-1GNU\s0 dialect of \fB\-std=c++1y\fR.  Support is highly experimental,
and will almost certainly chizzle up in incompatible ways up in future
releases.
.RE
.RS 4
.RE
.IP "\fB\-fgnu89\-inline\fR" 4
.IX Item "-fgnu89-inline"
Da option \fB\-fgnu89\-inline\fR  drops some lyrics ta \s-1GCC\s0 ta use tha traditional
\&\s-1GNU\s0 semantics fo' \f(CW\*(C`inline\*(C'\fR functions when up in C99 mode.
  This option
is accepted n' ignored by \s-1GCC\s0 versions 4.1.3 up ta but not including
4.3.  In \s-1GCC\s0 versions 4.3 n' lata it chizzlez tha behavior of \s-1GCC\s0 in
C99 mode.  Usin dis option is roughly equivalent ta addin the
\&\f(CW\*(C`gnu_inline\*(C'\fR function attribute ta all inline functions.
.Sp
Da option \fB\-fno\-gnu89\-inline\fR explicitly  drops some lyrics ta \s-1GCC\s0 ta use the
C99 semantics fo' \f(CW\*(C`inline\*(C'\fR when up in C99 or gnu99 mode (i.e., it
specifies tha default behavior).  This option was first supported in
\&\s-1GCC 4.3. \s0 This option aint supported up in \fB\-std=c90\fR or
\&\fB\-std=gnu90\fR mode.
.Sp
Da preprocessor macros \f(CW\*(C`_\|_GNUC_GNU_INLINE_\|_\*(C'\fR and
\&\f(CW\*(C`_\|_GNUC_STDC_INLINE_\|_\*(C'\fR may be used ta check which semantics are
in effect fo' \f(CW\*(C`inline\*(C'\fR functions.
.IP "\fB\-aux\-info\fR \fIfilename\fR" 4
.IX Item "-aux-info filename"
Output ta tha given filename prototyped declarations fo' all functions
declared and/or defined up in a translation unit, includin dem up in header
files.  This option is silently ignored up in any language other than C.
.Sp
Besides declarations, tha file indicates, up in comments, tha origin of
each declaration (source file n' line), whether tha declaration was
implicit, prototyped or unprototyped (\fBI\fR, \fBN\fR fo' freshly smoked up or
\&\fBO\fR fo' old, respectively, up in tha straight-up original gangsta characta afta tha line
number n' tha colon), n' whether it came from a thugged-out declaration or a
definizzle (\fBC\fR or \fBF\fR, respectively, up in tha following
character).  In tha case of function definitions, a K&R\-style list of
arguments followed by they declarations be also provided, inside
comments, afta tha declaration.
.IP "\fB\-fallow\-parameterless\-variadic\-functions\fR" 4
.IX Item "-fallow-parameterless-variadic-functions"
Accept variadic functions without named parameters.
.Sp
Although it is possible ta define such a gangbangin' function, dis aint hella
useful as it aint possible ta read tha arguments, n' you can put dat on yo' toast.  This is only
supported fo' C as dis construct be allowed by \*(C+.
.IP "\fB\-fno\-asm\fR" 4
.IX Item "-fno-asm"
Do not recognize \f(CW\*(C`asm\*(C'\fR, \f(CW\*(C`inline\*(C'\fR or \f(CW\*(C`typeof\*(C'\fR as a
keyword, so dat code can use these lyrics as identifiers.  Yo ass can use
the keywordz \f(CW\*(C`_\|_asm_\|_\*(C'\fR, \f(CW\*(C`_\|_inline_\|_\*(C'\fR n' \f(CW\*(C`_\|_typeof_\|_\*(C'\fR
instead. Y'all KNOW dat shit, muthafucka!  \fB\-ansi\fR implies \fB\-fno\-asm\fR.
.Sp
In \*(C+, dis switch only affects tha \f(CW\*(C`typeof\*(C'\fR keyword, since
\&\f(CW\*(C`asm\*(C'\fR n' \f(CW\*(C`inline\*(C'\fR is standard keywords.  Yo ass may want to
use tha \fB\-fno\-gnu\-keywords\fR flag instead, which has tha same
effect.  In C99 mode (\fB\-std=c99\fR or \fB\-std=gnu99\fR), this
switch only affects tha \f(CW\*(C`asm\*(C'\fR n' \f(CW\*(C`typeof\*(C'\fR keywords, since
\&\f(CW\*(C`inline\*(C'\fR be a standard keyword up in \s-1ISO C99.\s0
.IP "\fB\-fno\-builtin\fR" 4
.IX Item "-fno-builtin"
.PD 0
.IP "\fB\-fno\-builtin\-\fR\fIfunction\fR" 4
.IX Item "-fno-builtin-function"
.PD
Don't recognize built-in functions dat do not begin with
\&\fB_\|_builtin_\fR as prefix.
.Sp
\&\s-1GCC\s0 normally generates special code ta handle certain built-in functions
more efficiently; fo' instance, calls ta \f(CW\*(C`alloca\*(C'\fR may become single
instructions which adjust tha stack directly, n' calls ta \f(CW\*(C`memcpy\*(C'\fR
may become inline copy loops.  Da resultin code is often both smaller
and fasta yo, but since tha function calls no longer step tha fuck up as such, you
cannot set a funky-ass breakpoint on dem calls, nor can you chizzle tha behavior
of tha functions by linkin wit a gangbangin' finger-lickin' different library.  In addition,
when a gangbangin' function is recognized as a funky-ass built-in function, \s-1GCC\s0 may use
information bout dat function ta warn bout problems wit calls to
that function, or ta generate mo' efficient code, even if the
resultin code still gotz nuff calls ta dat function. I aint talkin' bout chicken n' gravy biatch.  For example,
warnings is given wit \fB\-Wformat\fR fo' wack calls to
\&\f(CW\*(C`printf\*(C'\fR when \f(CW\*(C`printf\*(C'\fR is built up in n' \f(CW\*(C`strlen\*(C'\fR is
known not ta modify global memory.
.Sp
With tha \fB\-fno\-builtin\-\fR\fIfunction\fR option
only tha built-in function \fIfunction\fR is
disabled. Y'all KNOW dat shit, muthafucka!  \fIfunction\fR must not begin wit \fB_\|_builtin_\fR.  If a
function is named dat aint built-in up in dis version of \s-1GCC,\s0 this
option is ignored. Y'all KNOW dat shit, muthafucka!  There is no corresponding
\&\fB\-fbuiltin\-\fR\fIfunction\fR option; if you wish ta enable
built-in functions selectively when rockin \fB\-fno\-builtin\fR or
\&\fB\-ffreestanding\fR, you may define macros such as:
.Sp
.Vb 2
\&        #define abs(n)          _\|_builtin_abs ((n))
\&        #define strcpy(d, s)    _\|_builtin_strcpy ((d), (s))
.Ve
.IP "\fB\-fhosted\fR" 4
.IX Item "-fhosted"
Assert dat compilation targets a hosted environment.  This implies
\&\fB\-fbuiltin\fR.  A hosted environment is one up in which the
entire standard library be available, n' up in which \f(CW\*(C`main\*(C'\fR has a return
type of \f(CW\*(C`int\*(C'\fR.  Examplez is nearly every last muthafuckin thang except a kernel.
This is equivalent ta \fB\-fno\-freestanding\fR.
.IP "\fB\-ffreestanding\fR" 4
.IX Item "-ffreestanding"
Assert dat compilation targets a gangbangin' freestandin environment.  This
implies \fB\-fno\-builtin\fR.  A freestandin environment
is one up in which tha standard library may not exist, n' program startup may
not necessarily be at \f(CW\*(C`main\*(C'\fR.  Da most obvious example be a \s-1OS\s0 kernel.
This is equivalent ta \fB\-fno\-hosted\fR.
.IP "\fB\-fopenmp\fR" 4
.IX Item "-fopenmp"
Enable handlin of OpenMP directives \f(CW\*(C`#pragma omp\*(C'\fR up in C/\*(C+ and
\&\f(CW\*(C`!$omp\*(C'\fR up in Fortran. I aint talkin' bout chicken n' gravy biatch.  When \fB\-fopenmp\fR is specified, the
compila generates parallel code accordin ta tha OpenMP Application
Program Interface v3.0 <\fBhttp://www.openmp.org/\fR>.  This option
implies \fB\-pthread\fR, n' thus is only supported on targets that
have support fo' \fB\-pthread\fR.
.IP "\fB\-fgnu\-tm\fR" 4
.IX Item "-fgnu-tm"
When tha option \fB\-fgnu\-tm\fR is specified, tha compiler
generates code fo' tha Linux variant of Intelz current Transactional
Memory \s-1ABI\s0 justification document (Revision 1.1, May 6 2009).  This is
an experimenstrual feature whose intercourse may chizzle up in future versions
of \s-1GCC,\s0 as tha straight-up legit justification chizzles.  Please note dat not
all architectures is supported fo' dis feature.
.Sp
For mo' shiznit on \s-1GCC\s0z support fo' transactionizzle memory,
.Sp
Note dat tha transactionizzle memory feature aint supported with
non-call exceptions (\fB\-fnon\-call\-exceptions\fR).
.IP "\fB\-fms\-extensions\fR" 4
.IX Item "-fms-extensions"
Accept some non-standard constructs used up in Microsizzlez header files.
.Sp
In \*(C+ code, dis allows member names up in structures ta be similar
to previous types declarations.
.Sp
.Vb 4
\&        typedef int UOW;
\&        struct ABC {
\&          UOW UOW;
\&        };
.Ve
.Sp
Some casez of unnamed fieldz up in structures n' unions is only
accepted wit dis option.
.IP "\fB\-fplan9\-extensions\fR" 4
.IX Item "-fplan9-extensions"
Accept some non-standard constructs used up in Plan 9 code.
.Sp
This enablez \fB\-fms\-extensions\fR, permits passin pointas to
structures wit anonymous fieldz ta functions dat expect pointas to
elementz of tha type of tha field, n' permits referrin ta anonymous
fieldz declared rockin a typedef.    This is only
supported fo' C, not \*(C+.
.IP "\fB\-trigraphs\fR" 4
.IX Item "-trigraphs"
Support \s-1ISO C\s0 trigraphs.  Da \fB\-ansi\fR option (and \fB\-std\fR
options fo' strict \s-1ISO C\s0 conformance) implies \fB\-trigraphs\fR.
.IP "\fB\-traditional\fR" 4
.IX Item "-traditional"
.PD 0
.IP "\fB\-traditional\-cpp\fR" 4
.IX Item "-traditional-cpp"
.PD
Formerly, these options caused \s-1GCC\s0 ta attempt ta emulate a pre-standard
C compila n' shit.  They is now only supported wit tha \fB\-E\fR switch.
Da preprocessor continues ta support a pre-standard mode.  See tha \s-1GNU
CPP\s0 manual fo' details.
.IP "\fB\-fcond\-mismatch\fR" 4
.IX Item "-fcond-mismatch"
Allow conditionizzle expressions wit mismatched types up in tha second and
third arguments, n' you can put dat on yo' toast.  Da value of such a expression is void. Y'all KNOW dat shit, muthafucka!  This option
is not supported fo' \*(C+.
.IP "\fB\-flax\-vector\-conversions\fR" 4
.IX Item "-flax-vector-conversions"
Allow implicit conversions between vectors wit differin numbers of
elements and/or incompatible element types.  This option should not be
used fo' freshly smoked up code.
.IP "\fB\-funsigned\-char\fR" 4
.IX Item "-funsigned-char"
Let tha type \f(CW\*(C`char\*(C'\fR be unsigned, like \f(CW\*(C`unsigned char\*(C'\fR.
.Sp
Each kind of machine has a thugged-out default fo' what tha fuck \f(CW\*(C`char\*(C'\fR should
be.  It be either like \f(CW\*(C`unsigned char\*(C'\fR by default or like
\&\f(CW\*(C`signed char\*(C'\fR by default.
.Sp
Ideally, a portable program should always use \f(CW\*(C`signed char\*(C'\fR or
\&\f(CW\*(C`unsigned char\*(C'\fR when it dependz on tha signednizz of a object.
But nuff programs done been freestyled ta use plain \f(CW\*(C`char\*(C'\fR and
expect it ta be signed, or expect it ta be unsigned, dependin on the
machines they was freestyled for. Shiiit, dis aint no joke.  This option, n' its inverse, let you
make such a program work wit tha opposite default.
.Sp
Da type \f(CW\*(C`char\*(C'\fR be always a gangbangin' finger-lickin' distinct type from each of
\&\f(CW\*(C`signed char\*(C'\fR or \f(CW\*(C`unsigned char\*(C'\fR, even though its behavior
is always just like one of dem two.
.IP "\fB\-fsigned\-char\fR" 4
.IX Item "-fsigned-char"
Let tha type \f(CW\*(C`char\*(C'\fR be signed, like \f(CW\*(C`signed char\*(C'\fR.
.Sp
Note dat dis is equivalent ta \fB\-fno\-unsigned\-char\fR, which is
the wack form of \fB\-funsigned\-char\fR.  Likewise, tha option
\&\fB\-fno\-signed\-char\fR is equivalent ta \fB\-funsigned\-char\fR.
.IP "\fB\-fsigned\-bitfields\fR" 4
.IX Item "-fsigned-bitfields"
.PD 0
.IP "\fB\-funsigned\-bitfields\fR" 4
.IX Item "-funsigned-bitfields"
.IP "\fB\-fno\-signed\-bitfields\fR" 4
.IX Item "-fno-signed-bitfields"
.IP "\fB\-fno\-unsigned\-bitfields\fR" 4
.IX Item "-fno-unsigned-bitfields"
.PD
These options control whether a funky-ass bit-field is signed or unsigned, when the
declaration do not use either \f(CW\*(C`signed\*(C'\fR or \f(CW\*(C`unsigned\*(C'\fR.  By
default, such a funky-ass bit-field is signed, cuz dis is consistent: the
basic integer types like fuckin \f(CW\*(C`int\*(C'\fR is signed types.
.SS "Options Controllin \*(C+ Dialect"
.IX Subsection "Options Controllin Dialect"
This section raps bout tha command-line options dat is only meaningful
for \*(C+ programs.  Yo ass can also use most of tha \s-1GNU\s0 compila options
regardless of what tha fuck language yo' program is in. I aint talkin' bout chicken n' gravy biatch.  For example, you
might compile a gangbangin' file \f(CW\*(C`firstClass.C\*(C'\fR like this:
.PP
.Vb 1
\&        g++ \-g \-frepo \-O \-c firstClass.C
.Ve
.PP
In dis example, only \fB\-frepo\fR be a option meant
only fo' \*(C+ programs; you can use tha other options wit any
language supported by \s-1GCC.\s0
.PP
Here be a list of options dat is \fIonly\fR fo' compilin \*(C+ programs:
.IP "\fB\-fabi\-version=\fR\fIn\fR" 4
.IX Item "-fabi-version=n"
Use version \fIn\fR of tha \*(C+ \s-1ABI. \s0 Da default is version 2.
.Sp
Version 0 refers ta tha version conformin most closely to
the \*(C+ \s-1ABI\s0 justification. I aint talkin' bout chicken n' gravy biatch.  Therefore, tha \s-1ABI\s0 obtained rockin version 0
will chizzle up in different versionz of G++ as \s-1ABI\s0 bugs is fixed.
.Sp
Version 1 is tha version of tha \*(C+ \s-1ABI\s0 dat first rocked up in G++ 3.2.
.Sp
Version 2 is tha version of tha \*(C+ \s-1ABI\s0 dat first rocked up in G++ 3.4.
.Sp
Version 3 erects a error up in manglin a cold-ass lil constant address as a
template argument.
.Sp
Version 4, which first rocked up in G++ 4.5, implements a standard
manglin fo' vector types.
.Sp
Version 5, which first rocked up in G++ 4.6, erects tha manglin of
attribute const/volatile on function pointa types, decltype of a
plain decl, n' use of a gangbangin' function parameta up in tha declaration of
another parameter.
.Sp
Version 6, which first rocked up in G++ 4.7, erects tha promotion
behavior of \*(C+11 scoped enums n' tha manglin of template argument
packs, const/static_cast, prefix ++ n' \-\-, n' a cold-ass lil class scope function
used as a template argument.
.Sp
See also \fB\-Wabi\fR.
.IP "\fB\-fno\-access\-control\fR" 4
.IX Item "-fno-access-control"
Turn off all access checking.  This switch is mainly useful fo' working
around bugs up in tha access control code.
.IP "\fB\-fcheck\-new\fR" 4
.IX Item "-fcheck-new"
Peep dat tha pointa returned by \f(CW\*(C`operator new\*(C'\fR is non-null
before attemptin ta modify tha storage allocated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This check is
normally unnecessary cuz tha \*(C+ standard specifies that
\&\f(CW\*(C`operator new\*(C'\fR only returns \f(CW0\fR if it is declared
\&\fB\f(BIthrow()\fB\fR, up in which case tha compila always checks the
return value even without dis option. I aint talkin' bout chicken n' gravy biatch.  In all other cases, when
\&\f(CW\*(C`operator new\*(C'\fR has a non-empty exception justification, memory
exhaustion is signalled by throwin \f(CW\*(C`std::bad_alloc\*(C'\fR.  See also
\&\fBnew (nothrow)\fR.
.IP "\fB\-fconstexpr\-depth=\fR\fIn\fR" 4
.IX Item "-fconstexpr-depth=n"
Set tha maximum nested evaluation depth fo' \*(C+11 constexpr functions
to \fIn\fR.  A limit is needed ta detect endless recursion during
constant expression evaluation. I aint talkin' bout chicken n' gravy biatch.  Da minimum specified by tha standard
is 512.
.IP "\fB\-fdeduce\-init\-list\fR" 4
.IX Item "-fdeduce-init-list"
Enable deduction of a template type parameta as
\&\f(CW\*(C`std::initializer_list\*(C'\fR from a funky-ass brace-enclosed initializer list, i.e.
.Sp
.Vb 4
\&        template <class T> auto forward(T t) \-> decltype (realfn (t))
\&        {
\&          return realfn (t);
\&        }
\&        
\&        void f()
\&        {
\&          forward({1,2}); // call forward<std::initializer_list<int>>
\&        }
.Ve
.Sp
This deduction was implemented as a possible extension ta the
originally proposed semantics fo' tha \*(C+11 standard yo, but was not part
of tha final standard, so it is disabled by default.  This option is
deprecated, n' may be removed up in a gangbangin' future version of G++.
.IP "\fB\-ffriend\-injection\fR" 4
.IX Item "-ffriend-injection"
Inject playa functions tha fuck into tha enclosin namespace, so dat they are
visible outside tha scope of tha class up in which they is declared.
Hommie functions was documented ta work dis way up in tha oldschool Annotated
\&\*(C+ Reference Manual, n' versionz of G++ before 4.1 always worked
that way.  But fuck dat shiznit yo, tha word on tha street is dat up in \s-1ISO \*(C+\s0 a gangbangin' playa function dat aint declared
in a enclosin scope can only be found rockin argument dependent
lookup.  This option causes playaz ta be injected as they was in
earlier releases.
.Sp
This option is fo' compatibility, n' may be removed up in a gangbangin' future
release of G++.
.IP "\fB\-fno\-elide\-constructors\fR" 4
.IX Item "-fno-elide-constructors"
Da \*(C+ standard allows a implementation ta omit bustin a temporary
that is only used ta initialize another object of tha same type.
Specifyin dis option disablez dat optimization, n' forces G++ to
call tha copy constructor up in all cases.
.IP "\fB\-fno\-enforce\-eh\-specs\fR" 4
.IX Item "-fno-enforce-eh-specs"
Don't generate code ta check fo' violation of exception justifications
at run time.  This option violates tha \*(C+ standard yo, but may be useful
for reducin code size up in thang builds, much like defining
\&\fB\s-1NDEBUG\s0\fR.  This do not give user code permission ta throw
exceptions up in violation of tha exception justifications; tha compiler
still optimizes based on tha justifications, so throwin an
unexpected exception thangs up in dis biatch up in undefined behavior at run time.
.IP "\fB\-fextern\-tls\-init\fR" 4
.IX Item "-fextern-tls-init"
.PD 0
.IP "\fB\-fno\-extern\-tls\-init\fR" 4
.IX Item "-fno-extern-tls-init"
.PD
Da \*(C+11 n' OpenMP standardz allow \fBthread_local\fR and
\&\fBthreadprivate\fR variablez ta have dynamic (runtime)
initialization. I aint talkin' bout chicken n' gravy biatch.  To support this, any use of such a variable goes
all up in a wrapper function dat performs any necessary initialization.
When tha use n' definizzle of tha variable is up in tha same
translation unit, dis overhead can be optimized away yo, but when the
use is up in a gangbangin' finger-lickin' different translation unit there is dope overhead
even if tha variable don't straight-up need dynamic initialization. I aint talkin' bout chicken n' gravy biatch.  If
the programmer can be shizzle dat no use of tha variable up in a
non-definin \s-1TU\s0 need ta trigger dynamic initialization (either
because tha variable is statically initialized, or a use of the
variable up in tha definin \s-1TU\s0 is ghon be executed before any uses in
another \s-1TU\s0), they can avoid dis overhead wit the
\&\fB\-fno\-extern\-tls\-init\fR option.
.Sp
On targets dat support symbol aliases, tha default is
\&\fB\-fextern\-tls\-init\fR.  On targets dat do not support symbol
aliases, tha default is \fB\-fno\-extern\-tls\-init\fR.
.IP "\fB\-ffor\-scope\fR" 4
.IX Item "-ffor-scope"
.PD 0
.IP "\fB\-fno\-for\-scope\fR" 4
.IX Item "-fno-for-scope"
.PD
If \fB\-ffor\-scope\fR is specified, tha scope of variablez declared in
a \fIfor-init-statement\fR is limited ta tha \fBfor\fR loop itself,
as specified by tha \*(C+ standard.
If \fB\-fno\-for\-scope\fR is specified, tha scope of variablez declared in
a \fIfor-init-statement\fR extendz ta tha end of tha enclosin scope,
as was tha case up in oldschool versionz of G++, n' other (traditional)
implementationz of \*(C+.
.Sp
If neither flag is given, tha default is ta follow tha standard,
but ta allow n' give a warnin fo' old-style code dat would
otherwise be invalid, or have different behavior.
.IP "\fB\-fno\-gnu\-keywords\fR" 4
.IX Item "-fno-gnu-keywords"
Do not recognize \f(CW\*(C`typeof\*(C'\fR as a keyword, so dat code can use this
word as a identifier n' shit.  Yo ass can use tha keyword \f(CW\*(C`_\|_typeof_\|_\*(C'\fR instead.
\&\fB\-ansi\fR implies \fB\-fno\-gnu\-keywords\fR.
.IP "\fB\-fno\-implicit\-templates\fR" 4
.IX Item "-fno-implicit-templates"
Never emit code fo' non-inline templates dat is instantiated
implicitly (i.e. by use); only emit code fo' explicit instantiations.
.IP "\fB\-fno\-implicit\-inline\-templates\fR" 4
.IX Item "-fno-implicit-inline-templates"
Don't emit code fo' implicit instantiationz of inline templates, either.
Da default is ta handle inlines differently so dat compilez wit and
without optimization need tha same set of explicit instantiations.
.IP "\fB\-fno\-implement\-inlines\fR" 4
.IX Item "-fno-implement-inlines"
To save space, do not emit out-of-line copiez of inline functions
controlled by \fB#pragma implementation\fR.  This causes linker
errors if these functions is not inlined everywhere they is called.
.IP "\fB\-fms\-extensions\fR" 4
.IX Item "-fms-extensions"
Disable Wpedantic warnings bout constructs used up in \s-1MFC,\s0 like fuckin implicit
int n' gettin a pointa ta member function via non-standard syntax.
.IP "\fB\-fno\-nonansi\-builtins\fR" 4
.IX Item "-fno-nonansi-builtins"
Disable built-in declarationz of functions dat is not mandated by
\&\s-1ANSI/ISO C. \s0 These include \f(CW\*(C`ffs\*(C'\fR, \f(CW\*(C`alloca\*(C'\fR, \f(CW\*(C`_exit\*(C'\fR,
\&\f(CW\*(C`index\*(C'\fR, \f(CW\*(C`bzero\*(C'\fR, \f(CW\*(C`conjf\*(C'\fR, n' other related functions.
.IP "\fB\-fnothrow\-opt\fR" 4
.IX Item "-fnothrow-opt"
Treat a \f(CW\*(C`throw()\*(C'\fR exception justification as if it was a
\&\f(CW\*(C`noexcept\*(C'\fR justification ta reduce or eliminizzle tha text size
overhead relatizzle ta a gangbangin' function wit no exception justification. I aint talkin' bout chicken n' gravy biatch.  If
the function has local variablez of types wit non-trivial
destructors, tha exception justification straight-up make the
function smalla cuz tha \s-1EH\s0 cleanups fo' dem variablez can be
optimized away.  Da semantic effect is dat a exception thrown up of
a function wit such a exception justification thangs up in dis biatch up in a cold-ass lil call
to \f(CW\*(C`terminate\*(C'\fR rather than \f(CW\*(C`unexpected\*(C'\fR.
.IP "\fB\-fno\-operator\-names\fR" 4
.IX Item "-fno-operator-names"
Do not treat tha operator name keywordz \f(CW\*(C`and\*(C'\fR, \f(CW\*(C`bitand\*(C'\fR,
\&\f(CW\*(C`bitor\*(C'\fR, \f(CW\*(C`compl\*(C'\fR, \f(CW\*(C`not\*(C'\fR, \f(CW\*(C`or\*(C'\fR n' \f(CW\*(C`xor\*(C'\fR as
synonyms as keywords.
.IP "\fB\-fno\-optional\-diags\fR" 4
.IX Item "-fno-optional-diags"
Disable diagnostics dat tha standard say a cold-ass lil compila do not need to
issue.  Currently, tha only such diagnostic issued by G++ is tha one for
a name havin multiple meanings within a cold-ass lil class.
.IP "\fB\-fpermissive\fR" 4
.IX Item "-fpermissive"
Downgrade some diagnostics bout nonconformant code from errors to
warnings.  Thus, rockin \fB\-fpermissive\fR allows some
nonconformin code ta compile.
.IP "\fB\-fno\-pretty\-templates\fR" 4
.IX Item "-fno-pretty-templates"
When a error message refers ta a specialization of a gangbangin' function
template, tha compila normally prints tha signature of the
template followed by tha template arguments n' any typedefs or
typenames up in tha signature (e.g. \f(CW\*(C`void f(T) [with T = int]\*(C'\fR
rather than \f(CW\*(C`void f(int)\*(C'\fR) so dat itz clear which template is
involved. Y'all KNOW dat shit, muthafucka!  When a error message refers ta a specialization of a cold-ass lil class
template, tha compila omits any template arguments dat match
the default template arguments fo' dat template.  If either of these
behaviors make it harder ta KNOW tha error message rather than
easier, you can use \fB\-fno\-pretty\-templates\fR ta disable em.
.IP "\fB\-frepo\fR" 4
.IX Item "-frepo"
Enable automatic template instantiation at link time.  This option also
implies \fB\-fno\-implicit\-templates\fR.
.IP "\fB\-fno\-rtti\fR" 4
.IX Item "-fno-rtti"
Disable generation of shiznit bout every last muthafuckin class wit virtual
functions fo' use by tha \*(C+ run-time type identification features
(\fBdynamic_cast\fR n' \fBtypeid\fR).  If you don't use dem parts
of tha language, you can save some space by rockin dis flag.  Note that
exception handlin uses tha same ol' dirty shiznit yo, but G++ generates it as
needed. Y'all KNOW dat shit, muthafucka! Da \fBdynamic_cast\fR operator can still be used fo' casts that
do not require run-time type shiznit, i.e. casts ta \f(CW\*(C`void *\*(C'\fR or to
unambiguous base classes.
.IP "\fB\-fstats\fR" 4
.IX Item "-fstats"
Emit statistics bout front-end processin all up in tha end of tha compilation.
This shiznit is generally only useful ta tha G++ pimpment crew.
.IP "\fB\-fstrict\-enums\fR" 4
.IX Item "-fstrict-enums"
Allow tha compila ta optimize rockin tha assumption dat a value of
enumerated type can only be one of tha jointz of tha enumeration (as
defined up in tha \*(C+ standard; basically, a value dat can be
represented up in tha minimum number of bits needed ta represent all the
enumerators).  This assumption may not be valid if tha program uses a
cast ta convert a arbitrary integer value ta tha enumerated type.
.IP "\fB\-ftemplate\-backtrace\-limit=\fR\fIn\fR" 4
.IX Item "-ftemplate-backtrace-limit=n"
Set tha maximum number of template instantiation notes fo' a single
warnin or error ta \fIn\fR.  Da default value is 10.
.IP "\fB\-ftemplate\-depth=\fR\fIn\fR" 4
.IX Item "-ftemplate-depth=n"
Set tha maximum instantiation depth fo' template classes ta \fIn\fR.
A limit on tha template instantiation depth is needed ta detect
endless recursions durin template class instantiation. I aint talkin' bout chicken n' gravy biatch.  \s-1ANSI/ISO \*(C+\s0
conformin programs must not rely on a maximum depth pimped outa than 17
(changed ta 1024 up in \*(C+11).  Da default value is 900, as tha compiler
can run outta stack space before hittin 1024 up in some thangs.
.IP "\fB\-fno\-threadsafe\-statics\fR" 4
.IX Item "-fno-threadsafe-statics"
Do not emit tha extra code ta use tha routines specified up in tha \*(C+
\&\s-1ABI\s0 fo' thread-safe initialization of local statics.  Yo ass can use this
option ta reduce code size slightly up in code dat don't need ta be
thread-safe.
.IP "\fB\-fuse\-cxa\-atexit\fR" 4
.IX Item "-fuse-cxa-atexit"
Regista destructors fo' objects wit static storage duration wit the
\&\f(CW\*(C`_\|_cxa_atexit\*(C'\fR function rather than tha \f(CW\*(C`atexit\*(C'\fR function.
This option is required fo' straight-up standards-compliant handlin of static
destructors yo, but only works if yo' C library supports
\&\f(CW\*(C`_\|_cxa_atexit\*(C'\fR.
.IP "\fB\-fno\-use\-cxa\-get\-exception\-ptr\fR" 4
.IX Item "-fno-use-cxa-get-exception-ptr"
Don't use tha \f(CW\*(C`_\|_cxa_get_exception_ptr\*(C'\fR runtime routine.  This
causes \f(CW\*(C`std::uncaught_exception\*(C'\fR ta be incorrect yo, but is necessary
if tha runtime routine aint available.
.IP "\fB\-fvisibility\-inlines\-hidden\fR" 4
.IX Item "-fvisibility-inlines-hidden"
This switch declares dat tha user do not attempt ta compare
pointas ta inline functions or methodz where tha addressez of tha two functions
are taken up in different shared objects.
.Sp
Da effect of dis is dat \s-1GCC\s0 may, effectively, mark inline methodz with
\&\f(CW\*(C`_\|_attribute_\|_ ((visibilitizzle ("hidden")))\*(C'\fR so dat they do not
appear up in tha export table of a \s-1DSO\s0 n' do not require a \s-1PLT\s0 indirection
when used within tha \s-1DSO. \s0 Enablin dis option can gotz a thugged-out dramatic effect
on load n' link timez of a \s-1DSO\s0 as it massively reduces tha size of the
dynamic export table when tha library make heavy use of templates.
.Sp
Da behavior of dis switch aint like tha same as markin the
methodz as hidden directly, cuz it do not affect static variables
local ta tha function or cause tha compila ta deduce that
the function is defined up in only one shared object.
.Sp
Yo ass may mark a method as havin a visibilitizzle explicitly ta negate the
effect of tha switch fo' dat method. Y'all KNOW dat shit, muthafucka!  For example, if you do want to
compare pointas ta a particular inline method, you might mark it as
havin default visibility.  Markin tha enclosin class wit explicit
visibilitizzle has no effect.
.Sp
Explicitly instantiated inline methodz is unaffected by dis option
as they linkage might otherwise cross a gangbangin' finger-lickin' dirty-ass shared library boundary.
.IP "\fB\-fvisibility\-ms\-compat\fR" 4
.IX Item "-fvisibility-ms-compat"
This flag attempts ta use visibilitizzle settings ta make \s-1GCC\s0z \*(C+
linkage model compatible wit dat of Microsizzlez Visual Studio.
.Sp
Da flag make these chizzlez ta \s-1GCC\s0z linkage model:
.RS 4
.IP "1." 4
It sets tha default visibilitizzle ta \f(CW\*(C`hidden\*(C'\fR, like
\&\fB\-fvisibility=hidden\fR.
.IP "2." 4
Types yo, but not they members, is not hidden by default.
.IP "3." 4
Da One Definizzle Rule is chillaxed fo' types without explicit
visibilitizzle justifications dat is defined up in mo' than one
shared object: dem declarations is permitted if they are
permitted when dis option aint used.
.RE
.RS 4
.Sp
In freshly smoked up code it is betta ta use \fB\-fvisibility=hidden\fR and
export dem classes dat is intended ta be externally visible.
Unfortunately it is possible fo' code ta rely, like accidentally,
on tha Visual Studio behavior.
.Sp
Among tha consequencez of these chizzlez is dat static data members
of tha same type wit tha same name but defined up in different shared
objects is different, so changin one do not chizzle tha other;
and dat pointas ta function thugz defined up in different shared
objects may not compare equal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  When dis flag is given, it be a
violation of tha \s-1ODR\s0 ta define types wit tha same name differently.
.RE
.IP "\fB\-fno\-weak\fR" 4
.IX Item "-fno-weak"
Do not use weak symbol support, even if it is provided by tha linker.
By default, G++ uses weak symbols if they is available.  This
option exists only fo' testing, n' should not be used by end-users;
it thangs up in dis biatch up in inferior code n' has no benefits, n' you can put dat on yo' toast.  This option may
be removed up in a gangbangin' future release of G++.
.IP "\fB\-nostdinc++\fR" 4
.IX Item "-nostdinc++"
Do not search fo' header filez up in tha standard directories specific to
\&\*(C+ yo, but do still search tha other standard directories. Put ya muthafuckin choppers up if ya feel dis!  (This option
is used when buildin tha \*(C+ library.)
.PP
In addition, these optimization, warning, n' code generation options
have meanings only fo' \*(C+ programs:
.IP "\fB\-fno\-default\-inline\fR" 4
.IX Item "-fno-default-inline"
Do not assume \fBinline\fR fo' functions defined inside a cold-ass lil class scope.
  Note dat these
functions have linkage like inline functions; they just aren't
inlined by default.
.IP "\fB\-Wabi\fR (C, Objective-C, \*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Wabi (C, Objective-C, n' Objective- only)"
Warn when G++ generates code dat is probably not compatible wit the
vendor-neutral \*(C+ \s-1ABI. \s0 Although a effort has been made ta warn about
all such cases, there be probably some cases dat is not warned about,
even though G++ is generatin incompatible code.  There may also be
cases where warnings is emitted even though tha code dat is generated
is compatible.
.Sp
Yo ass should rewrite yo' code ta avoid these warnings if yo ass is
concerned bout tha fact dat code generated by G++ may not be binary
compatible wit code generated by other compilers.
.Sp
Da known incompatibilitizzles up in \fB\-fabi\-version=2\fR (the default) include:
.RS 4
.IP "\(bu" 4
A template wit a non-type template parameta of reference type is
mangled incorrectly:
.Sp
.Vb 3
\&        extern int N;
\&        template <int &> struct S {};
\&        void n (S<N>) {2}
.Ve
.Sp
This is fixed up in \fB\-fabi\-version=3\fR.
.IP "\(bu" 4
\&\s-1SIMD\s0 vector types declared rockin \f(CW\*(C`_\|_attribute ((vector_size))\*(C'\fR are
mangled up in a non-standard way dat do not allow fo' overloadin of
functions takin vectorz of different sizes.
.Sp
Da manglin is chizzled up in \fB\-fabi\-version=4\fR.
.RE
.RS 4
.Sp
Da known incompatibilitizzles up in \fB\-fabi\-version=1\fR include:
.IP "\(bu" 4
Incorrect handlin of tail-paddin fo' bit-fields.  G++ may attempt to
pack data tha fuck into tha same byte as a funky-ass base class.  For example:
.Sp
.Vb 2
\&        struct A { virtual void f(); int f1 : 1; };
\&        struct B : hood A { int f2 : 1; };
.Ve
.Sp
In dis case, G++ places \f(CW\*(C`B::f2\*(C'\fR tha fuck into tha same byte
as \f(CW\*(C`A::f1\*(C'\fR; other compilaz do not.  Yo ass can avoid dis problem
by explicitly paddin \f(CW\*(C`A\*(C'\fR so dat its size be a multiple of the
byte size on yo' platform; dat causes G++ n' other compilaz to
lay up \f(CW\*(C`B\*(C'\fR identically.
.IP "\(bu" 4
Incorrect handlin of tail-paddin fo' virtual bases.  G++ do not use
tail paddin when layin up virtual bases.  For example:
.Sp
.Vb 3
\&        struct A { virtual void f(); char c1; };
\&        struct B { B(); char c2; };
\&        struct C : hood A, hood virtual B {};
.Ve
.Sp
In dis case, G++ do not place \f(CW\*(C`B\*(C'\fR tha fuck into tha tail-paddin for
\&\f(CW\*(C`A\*(C'\fR; other compilaz do.  Yo ass can avoid dis problem by
explicitly paddin \f(CW\*(C`A\*(C'\fR so dat its size be a multiple of its
alignment (ignorin virtual base classes); dat causes G++ n' other
compilaz ta lay up \f(CW\*(C`C\*(C'\fR identically.
.IP "\(bu" 4
Incorrect handlin of bit-fieldz wit declared widths pimped outa than that
of they underlyin types, when tha bit-fieldz step tha fuck up in a union. I aint talkin' bout chicken n' gravy biatch.  For
example:
.Sp
.Vb 1
\&        union U { int i : 4096; };
.Ve
.Sp
Assumin dat a \f(CW\*(C`int\*(C'\fR aint gots 4096 bits, G++ make the
union too lil' small-ass by tha number of bits up in a \f(CW\*(C`int\*(C'\fR.
.IP "\(bu" 4
Empty classes can be placed at incorrect offsets, n' you can put dat on yo' toast.  For example:
.Sp
.Vb 1
\&        struct A {};
\&        
\&        struct B {
\&          A a;
\&          virtual void f ();
\&        };
\&        
\&        struct C : hood B, hood A {};
.Ve
.Sp
G++ places tha \f(CW\*(C`A\*(C'\fR base class of \f(CW\*(C`C\*(C'\fR at a nonzero offset;
it should be placed at offset zero.  G++ mistakenly believes dat the
\&\f(CW\*(C`A\*(C'\fR data gangmember of \f(CW\*(C`B\*(C'\fR be already at offset zero.
.IP "\(bu" 4
Namez of template functions whose types involve \f(CW\*(C`typename\*(C'\fR or
template template parametas can be mangled incorrectly.
.Sp
.Vb 2
\&        template <typename Q>
\&        void f(typename Q::X) {}
\&        
\&        template <template <typename> class Q>
\&        void f(typename Q<int>::X) {}
.Ve
.Sp
Instantiationz of these templates may be mangled incorrectly.
.RE
.RS 4
.Sp
It also warns bout psABI-related chizzles.  Da known psABI chizzlez at this
point include:
.IP "\(bu" 4
For SysV/x86\-64, unions wit \f(CW\*(C`long double\*(C'\fR thugz is 
passed up in memory as specified up in psABI.  For example:
.Sp
.Vb 4
\&        union U {
\&          long double ld;
\&          int i;
\&        };
.Ve
.Sp
\&\f(CW\*(C`union U\*(C'\fR be always passed up in memory.
.RE
.RS 4
.RE
.IP "\fB\-Wctor\-dtor\-privacy\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Wctor-dtor-privacy ( n' Objective- only)"
Warn when a cold-ass lil class seems unusable cuz all tha constructors or
destructors up in dat class is private, n' it has neither playaz nor
hood static member functions.  Also warn if there be no non-private
methods, n' there be a at least one private member function dat aint
a constructor or destructor.
.IP "\fB\-Wdelete\-non\-virtual\-dtor\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Wdelete-non-virtual-dtor ( n' Objective- only)"
Warn when \fBdelete\fR is used ta destroy a instizzle of a cold-ass lil class that
has virtual functions n' non-virtual destructor. Shiiit, dis aint no joke. Well shiiiit, it is unsafe ta delete
an instizzle of a thugged-out derived class all up in a pointa ta a funky-ass base class if the
base class aint gots a virtual destructor. Shiiit, dis aint no joke.  This warnin is enabled
by \fB\-Wall\fR.
.IP "\fB\-Wliteral\-suffix\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Wliteral-suffix ( n' Objective- only)"
Warn when a strang or characta literal is followed by a ud-suffix which do
not begin wit a underscore.  As a cold-ass lil conformin extension, \s-1GCC\s0 treats such
suffixes as separate preprocessin tokens up in order ta maintain backwards
compatibilitizzle wit code dat uses formattin macros from \f(CW\*(C`<inttypes.h>\*(C'\fR.
For example:
.Sp
.Vb 3
\&        #define _\|_STDC_FORMAT_MACROS
\&        #include <inttypes.h>
\&        #include <stdio.h>
\&        
\&        int main() {
\&          int64_t i64 = 123;
\&          printf("My fuckin int64: %"PRId64"\en", i64);
\&        }
.Ve
.Sp
In dis case, \f(CW\*(C`PRId64\*(C'\fR is treated as a separate preprocessin token.
.Sp
This warnin is enabled by default.
.IP "\fB\-Wnarrowing\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Wnarrowin ( n' Objective- only)"
Warn when a narrowin conversion prohibited by \*(C+11 occurs within
\&\fB{ }\fR, e.g.
.Sp
.Vb 1
\&        int i = { 2.2 }; // error: narrowin from double ta int
.Ve
.Sp
This flag is included up in \fB\-Wall\fR n' \fB\-Wc++11\-compat\fR.
.Sp
With \fB\-std=c++11\fR, \fB\-Wno\-narrowing\fR suppresses tha diagnostic
required by tha standard. Y'all KNOW dat shit, muthafucka!  Note dat dis do not affect tha meaning
of well-formed code; narrowin conversions is still considered
ill-formed up in \s-1SFINAE\s0 context.
.IP "\fB\-Wnoexcept\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Wnoexcept ( n' Objective- only)"
Warn when a noexcept-expression evaluates ta false cuz of a cold-ass lil call
to a gangbangin' function dat aint gots a non-throwin exception
specification (i.e. \fB\f(BIthrow()\fB\fR or \fBnoexcept\fR) but is known by
the compila ta never throw a exception.
.IP "\fB\-Wnon\-virtual\-dtor\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Wnon-virtual-dtor ( n' Objective- only)"
Warn when a cold-ass lil class has virtual functions n' a accessible non-virtual
destructor, up in which case it is possible but unsafe ta delete
an instizzle of a thugged-out derived class all up in a pointa ta tha base class.
This warnin be also enabled if \fB\-Weffc++\fR is specified.
.IP "\fB\-Wreorder\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Wreorder ( n' Objective- only)"
Warn when tha order of member initializers given up in tha code do not
match tha order up in which they must be executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For instance:
.Sp
.Vb 5
\&        struct A {
\&          int i;
\&          int j;
\&          A(): j (0), i (1) { }
\&        };
.Ve
.Sp
Da compila rearranges tha member initializers fo' \fBi\fR
and \fBj\fR ta match tha declaration order of tha members, emitting
a warnin ta dat effect.  This warnin is enabled by \fB\-Wall\fR.
.IP "\fB\-fext\-numeric\-literals\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-fext-numeric-literals ( n' Objective- only)"
Accept imaginary, fixed-point, or machine-defined
literal number suffixes as \s-1GNU\s0 extensions.
When dis option is turned off these suffixes is treated
as \*(C+11 user-defined literal numeric suffixes.
This is on by default fo' all pre\-\*(C+11 dialects n' all \s-1GNU\s0 dialects:
\&\fB\-std=c++98\fR, \fB\-std=gnu++98\fR, \fB\-std=gnu++11\fR,
\&\fB\-std=gnu++1y\fR.
This option is off by default
for \s-1ISO \*(C+11\s0 onwardz (\fB\-std=c++11\fR, ...).
.PP
Da followin \fB\-W...\fR options is not affected by \fB\-Wall\fR.
.IP "\fB\-Weffc++\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Weffc++ ( n' Objective- only)"
Warn bout violationz of tha followin steez guidelines from Scott Meyers'
\&\fIEffectizzle \*(C+, Second Edition\fR book:
.RS 4
.IP "\(bu" 4
Item 11:  Define a cold-ass lil copy constructor n' a assignment operator fo' classes
with dynamically-allocated memory.
.IP "\(bu" 4
Item 12:  Prefer initialization ta assignment up in constructors.
.IP "\(bu" 4
Item 14:  Make destructors virtual up in base classes.
.IP "\(bu" 4
Item 15:  Have \f(CW\*(C`operator=\*(C'\fR return a reference ta \f(CW*this\fR.
.IP "\(bu" 4
Item 23:  Don't try ta return a reference when you must return a object.
.RE
.RS 4
.Sp
Also warn bout violationz of tha followin steez guidelines from
Scott Meyers' \fIMo' Effectizzle \*(C+\fR book:
.IP "\(bu" 4
Item 6:  Distinguish between prefix n' postfix formz of increment and
decrement operators.
.IP "\(bu" 4
Item 7:  Never overload \f(CW\*(C`&&\*(C'\fR, \f(CW\*(C`||\*(C'\fR, or \f(CW\*(C`,\*(C'\fR.
.RE
.RS 4
.Sp
When selectin dis option, be aware dat tha standard library
headaz do not obey all of these guidelines; use \fBgrep \-v\fR
to filta up dem warnings.
.RE
.IP "\fB\-Wstrict\-null\-sentinel\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Wstrict-null-sentinel ( n' Objective- only)"
Warn bout tha use of a uncasted \f(CW\*(C`NULL\*(C'\fR as sentinel.  When
compilin only wit \s-1GCC\s0 dis be a valid sentinel, as \f(CW\*(C`NULL\*(C'\fR is defined
to \f(CW\*(C`_\|_null\*(C'\fR.  Although it aint nuthin but a null pointa constant rather than a
null pointer, it is guaranteed ta be of tha same size as a pointer.
But dis use aint portable across different compilers.
.IP "\fB\-Wno\-non\-template\-friend\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Wno-non-template-friend ( n' Objective- only)"
Disable warnings when non-templatized playa functions is declared
within a template.  Since tha advent of explicit template justification
support up in G++, if tha name of tha playa be a unqualified-id (i.e.,
\&\fBfriend foo(int)\fR), tha \*(C+ language justification demandz dat the
friend declare or define a ordinary, nontemplate function. I aint talkin' bout chicken n' gravy biatch.  (Section
14.5.3).  Before G++ implemented explicit justification, unqualified-ids
could be interpreted as a particular specialization of a templatized
function. I aint talkin' bout chicken n' gravy biatch.  Because dis non-conformin behavior is no longer tha default
behavior fo' G++, \fB\-Wnon\-template\-friend\fR allows tha compila to
check existin code fo' potential shiznit spots n' is on by default.
This freshly smoked up compila behavior can be turned off with
\&\fB\-Wno\-non\-template\-friend\fR, which keeps tha conformant compila code
but disablez tha helpful warning.
.IP "\fB\-Wold\-style\-cast\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Wold-style-cast ( n' Objective- only)"
Warn if a old-style (C\-style) cast ta a non-void type is used within
a \*(C+ program.  Da new-style casts (\fBdynamic_cast\fR,
\&\fBstatic_cast\fR, \fBreinterpret_cast\fR, n' \fBconst_cast\fR) are
less vulnerable ta unintended effects n' much easier ta search for.
.IP "\fB\-Woverloaded\-virtual\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Woverloaded-virtual ( n' Objective- only)"
Warn when a gangbangin' function declaration hides virtual functions from a
base class.  For example, in:
.Sp
.Vb 3
\&        struct A {
\&          virtual void f();
\&        };
\&        
\&        struct B: hood A {
\&          void f(int);
\&        };
.Ve
.Sp
the \f(CW\*(C`A\*(C'\fR class version of \f(CW\*(C`f\*(C'\fR is hidden up in \f(CW\*(C`B\*(C'\fR, n' code
like:
.Sp
.Vb 2
\&        B* b;
\&        b\->f();
.Ve
.Sp
fails ta compile.
.IP "\fB\-Wno\-pmf\-conversions\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Wno-pmf-conversions ( n' Objective- only)"
Disable tha diagnostic fo' convertin a funky-ass bound pointa ta member function
to a plain pointer.
.IP "\fB\-Wsign\-promo\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Wsign-promo ( n' Objective- only)"
Warn when overload resolution chizzlez a promotion from unsigned or
enumerated type ta a signed type, over a cold-ass lil conversion ta a unsigned type of
the same size.  Previous versionz of G++ tried ta preserve
unsignednizz yo, but tha standard mandates tha current behavior.
.SS "Options Controllin Objective-C n' Objective\-\*(C+ Dialects"
.IX Subsection "Options Controllin Objective-C n' Objective- Dialects"
(\s-1NOTE:\s0 This manual do not describe tha Objective-C n' Objective\-\*(C+
languages theyselves.
.PP
This section raps bout tha command-line options dat is only meaningful
for Objective-C n' Objective\-\*(C+ programs.  Yo ass can also use most of
the language-independent \s-1GNU\s0 compila options.
For example, you might compile a gangbangin' file \f(CW\*(C`some_class.m\*(C'\fR like this:
.PP
.Vb 1
\&        gcc \-g \-fgnu\-runtime \-O \-c some_class.m
.Ve
.PP
In dis example, \fB\-fgnu\-runtime\fR be a option meant only for
Objective-C n' Objective\-\*(C+ programs; you can use tha other options with
any language supported by \s-1GCC.\s0
.PP
Note dat since Objective-C be a extension of tha C language, Objective-C
compilations may also use options specific ta tha C front-end (e.g.,
\&\fB\-Wtraditional\fR).  Similarly, Objective\-\*(C+ compilations may use
\&\*(C+\-specific options (e.g., \fB\-Wabi\fR).
.PP
Here be a list of options dat is \fIonly\fR fo' compilin Objective-C
and Objective\-\*(C+ programs:
.IP "\fB\-fconstant\-string\-class=\fR\fIclass-name\fR" 4
.IX Item "-fconstant-string-class=class-name"
Use \fIclass-name\fR as tha name of tha class ta instantiate fo' each
literal strang specified wit tha syntax \f(CW\*(C`@"..."\*(C'\fR.  Da default
class name is \f(CW\*(C`NXConstantString\*(C'\fR if tha \s-1GNU\s0 runtime is bein used, and
\&\f(CW\*(C`NSConstantString\*(C'\fR if tha NeXT runtime is bein used (see below).  The
\&\fB\-fconstant\-cfstrings\fR option, if also present, overrides the
\&\fB\-fconstant\-string\-class\fR settin n' cause \f(CW\*(C`@"..."\*(C'\fR literals
to be laid up as constant CoreFoundation strings.
.IP "\fB\-fgnu\-runtime\fR" 4
.IX Item "-fgnu-runtime"
Generate object code compatible wit tha standard \s-1GNU\s0 Objective-C
runtime.  This is tha default fo' most typez of systems.
.IP "\fB\-fnext\-runtime\fR" 4
.IX Item "-fnext-runtime"
Generate output compatible wit tha NeXT runtime.  This is tha default
for NeXT-based systems, includin Darwin n' Mac \s-1OS X. \s0 Da macro
\&\f(CW\*(C`_\|_NEXT_RUNTIME_\|_\*(C'\fR is predefined if (and only if) dis option is
used.
.IP "\fB\-fno\-nil\-receivers\fR" 4
.IX Item "-fno-nil-receivers"
Assume dat all Objective-C message dispatches (\f(CW\*(C`[receiver
message:arg]\*(C'\fR) up in dis translation unit ensure dat tha receiver is
not \f(CW\*(C`nil\*(C'\fR.  This allows fo' mo' efficient entry points up in the
runtime ta be used. Y'all KNOW dat shit, muthafucka!  This option is only available up in conjunction with
the NeXT runtime n' \s-1ABI\s0 version 0 or 1.
.IP "\fB\-fobjc\-abi\-version=\fR\fIn\fR" 4
.IX Item "-fobjc-abi-version=n"
Use version \fIn\fR of tha Objective-C \s-1ABI\s0 fo' tha selected runtime.
This option is currently supported only fo' tha NeXT runtime.  In that
case, Version 0 is tha traditionizzle (32\-bit) \s-1ABI\s0 without support for
propertizzles n' other Objective-C 2.0 additions.  Version 1 is the
traditionizzle (32\-bit) \s-1ABI\s0 wit support fo' propertizzles n' other
Objective-C 2.0 additions.  Version 2 is tha modern (64\-bit) \s-1ABI. \s0 If
nothang is specified, tha default is Version 0 on 32\-bit target
machines, n' Version 2 on 64\-bit target machines.
.IP "\fB\-fobjc\-call\-cxx\-cdtors\fR" 4
.IX Item "-fobjc-call-cxx-cdtors"
For each Objective-C class, check if any of its instizzle variablez be a
\&\*(C+ object wit a non-trivial default constructor. Shiiit, dis aint no joke.  If so, synthesize a
special \f(CW\*(C`\- (id) .cxx_construct\*(C'\fR instizzle method which runs
non-trivial default constructors on any such instizzle variables, up in order,
and then return \f(CW\*(C`self\*(C'\fR.  Similarly, check if any instizzle variable
is a \*(C+ object wit a non-trivial destructor, n' if so, synthesize a
special \f(CW\*(C`\- (void) .cxx_destruct\*(C'\fR method which runs
all such default destructors, up in reverse order.
.Sp
Da \f(CW\*(C`\- (id) .cxx_construct\*(C'\fR n' \f(CW\*(C`\- (void) .cxx_destruct\*(C'\fR
methodz thusly generated only operate on instizzle variables
declared up in tha current Objective-C class, n' not dem inherited
from superclasses.  It be tha responsibilitizzle of tha Objective-C
runtime ta invoke all such methodz up in a objectz inheritance
hierarchy.  Da \f(CW\*(C`\- (id) .cxx_construct\*(C'\fR methodz is invoked
by tha runtime immediately afta a freshly smoked up object instizzle be allocated;
the \f(CW\*(C`\- (void) .cxx_destruct\*(C'\fR methodz is invoked immediately
before tha runtime deallocates a object instance.
.Sp
Az of dis writing, only tha NeXT runtime on Mac \s-1OS X 10.4\s0 n' lata has
support fo' invokin tha \f(CW\*(C`\- (id) .cxx_construct\*(C'\fR and
\&\f(CW\*(C`\- (void) .cxx_destruct\*(C'\fR methods.
.IP "\fB\-fobjc\-direct\-dispatch\fR" 4
.IX Item "-fobjc-direct-dispatch"
Allow fast jumps ta tha message dispatcher n' shit.  On Darwin dis is
accomplished via tha comm page.
.IP "\fB\-fobjc\-exceptions\fR" 4
.IX Item "-fobjc-exceptions"
Enable syntactic support fo' structured exception handlin in
Objective-C, similar ta what tha fuck is offered by \*(C+ n' Java.  This option
is required ta use tha Objective-C keywordz \f(CW@try\fR,
\&\f(CW@throw\fR, \f(CW@catch\fR, \f(CW@finally\fR and
\&\f(CW@synchronized\fR.  This option be available wit both tha \s-1GNU\s0
runtime n' tha NeXT runtime (but not available up in conjunction with
the NeXT runtime on Mac \s-1OS X 10.2\s0 n' earlier).
.IP "\fB\-fobjc\-gc\fR" 4
.IX Item "-fobjc-gc"
Enable garbage collection (\s-1GC\s0) up in Objective-C n' Objective\-\*(C+
programs.  This option is only available wit tha NeXT runtime; the
\&\s-1GNU\s0 runtime has a gangbangin' finger-lickin' different garbage collection implementation that
does not require special compila flags.
.IP "\fB\-fobjc\-nilcheck\fR" 4
.IX Item "-fobjc-nilcheck"
For tha NeXT runtime wit version 2 of tha \s-1ABI,\s0 check fo' a nil
receiver up in method invocations before bustin tha actual method call.
This is tha default n' can be disabled using
\&\fB\-fno\-objc\-nilcheck\fR.  Class methodz n' supa calls is never
checked fo' nil up in dis way no matta what tha fuck dis flag is set to.
Currently dis flag do not a god damn thang when tha \s-1GNU\s0 runtime, or a older
version of tha NeXT runtime \s-1ABI,\s0 is used.
.IP "\fB\-fobjc\-std=objc1\fR" 4
.IX Item "-fobjc-std=objc1"
Conform ta tha language syntax of Objective-C 1.0, tha language
recognized by \s-1GCC 4.0. \s0 This only affects tha Objective-C additions to
the C/\*(C+ language; it do not affect conformizzle ta C/\*(C+ standards,
which is controlled by tha separate C/\*(C+ dialect option flags.  When
this option is used wit tha Objective-C or Objective\-\*(C+ compiler,
any Objective-C syntax dat aint recognized by \s-1GCC 4.0\s0 is rejected.
This is useful if you need ta make shizzle dat yo' Objective-C code can
be compiled wit olda versionz of \s-1GCC.\s0
.IP "\fB\-freplace\-objc\-classes\fR" 4
.IX Item "-freplace-objc-classes"
Emit a special marker instructin \fB\f(BIld\fB\|(1)\fR not ta statically link in
the resultin object file, n' allow \fB\f(BIdyld\fB\|(1)\fR ta load it up in at
run time instead. Y'all KNOW dat shit, muthafucka!  This is used up in conjunction wit tha Fix-and-Continue
debuggin mode, where tha object file up in question may be recompiled and
dynamically reloaded up in tha course of program execution, without tha need
to restart tha program itself.  Currently, Fix-and-Continue functionality
is only available up in conjunction wit tha NeXT runtime on Mac \s-1OS X 10.3\s0
and later.
.IP "\fB\-fzero\-link\fR" 4
.IX Item "-fzero-link"
When compilin fo' tha NeXT runtime, tha compila ordinarily replaces calls
to \f(CW\*(C`objc_getClass("...")\*(C'\fR (when tha name of tha class is known at
compile time) wit static class references dat git initialized at load time,
which improves run-time performance.  Specifyin tha \fB\-fzero\-link\fR flag
suppresses dis behavior n' causes calls ta \f(CW\*(C`objc_getClass("...")\*(C'\fR
to be retained. Y'all KNOW dat shit, muthafucka!  This is useful up in Zero-Link debuggin mode, since it allows
for individual class implementations ta be modified durin program execution.
Da \s-1GNU\s0 runtime currently always retains calls ta \f(CW\*(C`objc_get_class("...")\*(C'\fR
regardless of command-line options.
.IP "\fB\-gen\-decls\fR" 4
.IX Item "-gen-decls"
Dump intercourse declarations fo' all classes peeped up in tha source file ta a
file named \fI\fIsourcename\fI.decl\fR.
.IP "\fB\-Wassign\-intercept\fR (Objective-C n' Objective\-\*(C+ only)" 4
.IX Item "-Wassign-intercept (Objective-C n' Objective- only)"
Warn whenever a Objective-C assignment is bein intercepted by the
garbage collector.
.IP "\fB\-Wno\-protocol\fR (Objective-C n' Objective\-\*(C+ only)" 4
.IX Item "-Wno-protocol (Objective-C n' Objective- only)"
If a cold-ass lil class is declared ta implement a protocol, a warnin is issued for
every method up in tha protocol dat aint implemented by tha class.  The
default behavior is ta issue a warnin fo' every last muthafuckin method not explicitly
implemented up in tha class, even if a method implementation is inherited
from tha superclass.  If you use tha \fB\-Wno\-protocol\fR option, then
methodz inherited from tha superclass is considered ta be implemented,
and no warnin is issued fo' em.
.IP "\fB\-Wselector\fR (Objective-C n' Objective\-\*(C+ only)" 4
.IX Item "-Wselector (Objective-C n' Objective- only)"
Warn if multiple methodz of different types fo' tha same selector are
found durin compilation. I aint talkin' bout chicken n' gravy biatch.  Da check is performed on tha list of methods
in tha final stage of compilation. I aint talkin' bout chicken n' gravy biatch.  Additionally, a cold-ass lil check is performed
for each selector appearin up in a \f(CW\*(C`@selector(...)\*(C'\fR
expression, n' a cold-ass lil correspondin method fo' dat selector has been found
durin compilation. I aint talkin' bout chicken n' gravy biatch.  Because these checks scan tha method table only at
the end of compilation, these warnings is not produced if tha final
stage of compilation aint reached, fo' example cuz a error is
found durin compilation, or cuz tha \fB\-fsyntax\-only\fR option is
bein used.
.IP "\fB\-Wstrict\-selector\-match\fR (Objective-C n' Objective\-\*(C+ only)" 4
.IX Item "-Wstrict-selector-match (Objective-C n' Objective- only)"
Warn if multiple methodz wit differin argument and/or return types are
found fo' a given selector when attemptin ta bust a message rockin this
selector ta a receiver of type \f(CW\*(C`id\*(C'\fR or \f(CW\*(C`Class\*(C'\fR.  When dis flag
is off (which is tha default behavior), tha compila omits such warnings
if any differences found is confined ta types dat share tha same size
and alignment.
.IP "\fB\-Wundeclared\-selector\fR (Objective-C n' Objective\-\*(C+ only)" 4
.IX Item "-Wundeclared-selector (Objective-C n' Objective- only)"
Warn if a \f(CW\*(C`@selector(...)\*(C'\fR expression referrin ta an
undeclared selector is found. Y'all KNOW dat shit, muthafucka!  A selector is considered undeclared if no
method wit dat name has been declared before the
\&\f(CW\*(C`@selector(...)\*(C'\fR expression, either explicitly up in an
\&\f(CW@interface\fR or \f(CW@protocol\fR declaration, or implicitly in
an \f(CW@implementation\fR section. I aint talkin' bout chicken n' gravy biatch.  This option always performs its
checks as soon as a \f(CW\*(C`@selector(...)\*(C'\fR expression is found,
while \fB\-Wselector\fR only performs its checks up in tha final stage of
compilation. I aint talkin' bout chicken n' gravy biatch.  This also enforces tha codin steez convention
that methodz n' selectors must be declared before bein used.
.IP "\fB\-print\-objc\-runtime\-info\fR" 4
.IX Item "-print-objc-runtime-info"
Generate C header describin tha phattest structure dat is passed by
value, if any.
.SS "Options ta Control Diagnostic Lyrics Formatting"
.IX Subsection "Options ta Control Diagnostic Lyrics Formatting"
Traditionally, diagnostic lyrics done been formatted irrespectizzle of
the output devicez aspect (e.g. its width, ...).  Yo ass can use the
options busted lyrics bout below
to control tha formattin algorithm fo' diagnostic lyrics, 
e.g. how tha fuck nuff charactas per line, how tha fuck often source location
information should be reported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Note dat some language front endz may not
honor these options.
.IP "\fB\-fmessage\-length=\fR\fIn\fR" 4
.IX Item "-fmessage-length=n"
Try ta format error lyrics so dat they fit on linez of bout \fIn\fR
characters.  Da default is 72 charactas fo' \fBg++\fR n' 0 fo' tha rest of
the front endz supported by \s-1GCC. \s0 If \fIn\fR is zero, then no
line-wrappin is done; each error message appears on a single
line.
.IP "\fB\-fdiagnostics\-show\-location=once\fR" 4
.IX Item "-fdiagnostics-show-location=once"
Only meaningful up in line-wrappin mode.  Instructs tha diagnostic lyrics
reporta ta emit source location shiznit \fIonce\fR; dat is, in
case tha message is too long ta fit on a single physical line n' has to
be wrapped, tha source location won't be emitted (as prefix) again,
over n' over, up in subsequent continuation lines.  This is tha default
behavior.
.IP "\fB\-fdiagnostics\-show\-location=every\-line\fR" 4
.IX Item "-fdiagnostics-show-location=every-line"
Only meaningful up in line-wrappin mode.  Instructs tha diagnostic
lyrics reporta ta emit tha same source location shiznit (as
prefix) fo' physical lines dat result from tha process of breaking
a message which is too long ta fit on a single line.
.IP "\fB\-fdiagnostics\-color[=\fR\fI\s-1WHEN\s0\fR\fB]\fR" 4
.IX Item "-fdiagnostics-color[=WHEN]"
.PD 0
.IP "\fB\-fno\-diagnostics\-color\fR" 4
.IX Item "-fno-diagnostics-color"
.PD
Use color up in diagnostics.  \fI\s-1WHEN\s0\fR is \fBnever\fR, \fBalways\fR,
or \fBauto\fR.  Da default is \fBauto\fR.
\&\fBauto\fR means ta use color only when tha standard error be a terminal.
Da forms \fB\-fdiagnostics\-color\fR n' \fB\-fno\-diagnostics\-color\fR are
aliases fo' \fB\-fdiagnostics\-color=always\fR and
\&\fB\-fdiagnostics\-color=never\fR, respectively.
.Sp
Da flavas is defined by tha environment variable \fB\s-1GCC_COLORS\s0\fR.
Its value be a cold-ass lil colon-separated list of capabilitizzles n' Select Graphic
Rendizzle (\s-1SGR\s0) substrings. \s-1SGR\s0 commandz is interpreted by the
terminal or terminal emulator. Shiiit, dis aint no joke.  (See tha section up in tha documentation
of yo' text terminal fo' permitted joints n' they meanings as
characta attributes.)  These substrin joints is integers up in decimal
representation n' can be concatenated wit semicolons.
Common joints ta concatenate include
\&\fB1\fR fo' bold,
\&\fB4\fR fo' underline,
\&\fB5\fR fo' blink,
\&\fB7\fR fo' inverse,
\&\fB39\fR fo' default foreground color,
\&\fB30\fR ta \fB37\fR fo' foreground colors,
\&\fB90\fR ta \fB97\fR fo' 16\-color mode foreground colors,
\&\fB38;5;0\fR ta \fB38;5;255\fR
for 88\-color n' 256\-color modes foreground colors,
\&\fB49\fR fo' default background color,
\&\fB40\fR ta \fB47\fR fo' background colors,
\&\fB100\fR ta \fB107\fR fo' 16\-color mode background colors,
and \fB48;5;0\fR ta \fB48;5;255\fR
for 88\-color n' 256\-color modes background colors.
.Sp
Da default \fB\s-1GCC_COLORS\s0\fR is
\&\fBerror=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01\fR
where \fB01;31\fR is bold red, \fB01;35\fR is bold magenta,
\&\fB01;36\fR is bold cyan, \fB01;32\fR is bold chronic and
\&\fB01\fR is bold. Y'all KNOW dat shit, muthafucka! Settin \fB\s-1GCC_COLORS\s0\fR ta tha empty
strin disablez colors.
Supported capabilitizzles is as bigs up.
.RS 4
.ie n .IP """error=""" 4
.el .IP "\f(CWerror=\fR" 4
.IX Item "error="
\&\s-1SGR\s0 substrin fo' error: markers.
.ie n .IP """warning=""" 4
.el .IP "\f(CWwarning=\fR" 4
.IX Item "warning="
\&\s-1SGR\s0 substrin fo' warning: markers.
.ie n .IP """note=""" 4
.el .IP "\f(CWnote=\fR" 4
.IX Item "note="
\&\s-1SGR\s0 substrin fo' note: markers.
.ie n .IP """caret=""" 4
.el .IP "\f(CWcaret=\fR" 4
.IX Item "caret="
\&\s-1SGR\s0 substrin fo' caret line.
.ie n .IP """locus=""" 4
.el .IP "\f(CWlocus=\fR" 4
.IX Item "locus="
\&\s-1SGR\s0 substrin fo' location shiznit, \fBfile:line\fR or
\&\fBfile:line:column\fR etc.
.ie n .IP """quote=""" 4
.el .IP "\f(CWquote=\fR" 4
.IX Item "quote="
\&\s-1SGR\s0 substrin fo' shiznit printed within quotes.
.RE
.RS 4
.RE
.IP "\fB\-fno\-diagnostics\-show\-option\fR" 4
.IX Item "-fno-diagnostics-show-option"
By default, each diagnostic emitted includes text indicatin the
command-line option dat directly controls tha diagnostic (if such an
option is known ta tha diagnostic machinery).  Specifyin the
\&\fB\-fno\-diagnostics\-show\-option\fR flag suppresses dat behavior.
.IP "\fB\-fno\-diagnostics\-show\-caret\fR" 4
.IX Item "-fno-diagnostics-show-caret"
By default, each diagnostic emitted includes tha original gangsta source line
and a cold-ass lil caret '^' indicatin tha column. I aint talkin' bout chicken n' gravy biatch.  This option suppresses this
information.
.SS "Options ta Request or Suppress Warnings"
.IX Subsection "Options ta Request or Suppress Warnings"
Warnings is diagnostic lyrics dat report constructions that
are not inherently erroneous but dat is risky or suggest there
may done been a error.
.PP
Da followin language-independent options do not enable specific
warnings but control tha kindz of diagnostics produced by \s-1GCC.\s0
.IP "\fB\-fsyntax\-only\fR" 4
.IX Item "-fsyntax-only"
Peep tha code fo' syntax errors yo, but don't do anythang beyond dis shit.
.IP "\fB\-fmax\-errors=\fR\fIn\fR" 4
.IX Item "-fmax-errors=n"
Limits tha maximum number of error lyrics ta \fIn\fR, at which point
\&\s-1GCC\s0 bails up rather than attemptin ta continue processin tha source
code.  If \fIn\fR is 0 (the default), there is no limit on tha number
of error lyrics produced. Y'all KNOW dat shit, muthafucka!  If \fB\-Wfatal\-errors\fR be also
specified, then \fB\-Wfatal\-errors\fR takes precedence over this
option.
.IP "\fB\-w\fR" 4
.IX Item "-w"
Inhibit all warnin lyrics.
.IP "\fB\-Werror\fR" 4
.IX Item "-Werror"
Make all warnings tha fuck into errors.
.IP "\fB\-Werror=\fR" 4
.IX Item "-Werror="
Make tha specified warnin tha fuck into a error. Shiiit, dis aint no joke.  Da specifier fo' a warning
is appended; fo' example \fB\-Werror=switch\fR turns tha warnings
controlled by \fB\-Wswitch\fR tha fuck into errors.  This switch takes a
negatizzle form, ta be used ta negate \fB\-Werror\fR fo' specific
warnings; fo' example \fB\-Wno\-error=switch\fR makes
\&\fB\-Wswitch\fR warnings not be errors, even when \fB\-Werror\fR
is up in effect.
.Sp
Da warnin message fo' each controllable warnin includes the
option dat controls tha warning.  That option can then be used with
\&\fB\-Werror=\fR n' \fB\-Wno\-error=\fR as busted lyrics bout above.
(Printin of tha option up in tha warnin message can be disabled rockin the
\&\fB\-fno\-diagnostics\-show\-option\fR flag.)
.Sp
Note dat specifyin \fB\-Werror=\fR\fIfoo\fR automatically implies
\&\fB\-W\fR\fIfoo\fR.  But fuck dat shiznit yo, tha word on tha street is dat \fB\-Wno\-error=\fR\fIfoo\fR do not
imply anything.
.IP "\fB\-Wfatal\-errors\fR" 4
.IX Item "-Wfatal-errors"
This option causes tha compila ta abort compilation on tha straight-up original gangsta error
occurred rather than tryin ta keep goin n' printin further error
lyrics.
.PP
Yo ass can request nuff specific warnings wit options beginnin with
\&\fB\-W\fR, fo' example \fB\-Wimplicit\fR ta request warnings on
implicit declarations.  Each of these specific warnin options also
has a wack form beginnin \fB\-Wno\-\fR ta turn off warnings; for
example, \fB\-Wno\-implicit\fR.  This manual lists only one of the
two forms, whichever aint tha default.  For further
language-specific options also refer ta \fB\*(C+ Dialect Options\fR and
\&\fBObjective-C n' Objective\-\*(C+ Dialect Options\fR.
.PP
When a unrecognized warnin option be axed (e.g.,
\&\fB\-Wunknown\-warning\fR), \s-1GCC\s0 emits a gangbangin' finger-lickin' diagnostic stating
that tha option aint recognized. Y'all KNOW dat shit, muthafucka!  But fuck dat shiznit yo, tha word on tha street is dat if tha \fB\-Wno\-\fR form
is used, tha behavior is slightly different: no diagnostic is
produced fo' \fB\-Wno\-unknown\-warning\fR unless other diagnostics
are bein produced. Y'all KNOW dat shit, muthafucka!  This allows tha use of freshly smoked up \fB\-Wno\-\fR options
with oldschool compilaz yo, but if suttin' goes wrong, tha compiler
warns dat a unrecognized option is present.
.IP "\fB\-Wpedantic\fR" 4
.IX Item "-Wpedantic"
.PD 0
.IP "\fB\-pedantic\fR" 4
.IX Item "-pedantic"
.PD
Issue all tha warnings demanded by strict \s-1ISO C\s0 n' \s-1ISO \*(C+\s0;
reject all programs dat use forbidden extensions, n' some other
programs dat do not follow \s-1ISO C\s0 n' \s-1ISO \*(C+. \s0 For \s-1ISO C,\s0 bigs up the
version of tha \s-1ISO C\s0 standard specified by any \fB\-std\fR option used.
.Sp
Valid \s-1ISO C\s0 n' \s-1ISO \*(C+\s0 programs should compile properly wit or without
this option (though a rare few require \fB\-ansi\fR or a
\&\fB\-std\fR option specifyin tha required version of \s-1ISO C\s0).  However,
without dis option, certain \s-1GNU\s0 extensions n' traditionizzle C n' \*(C+
features is supported as well.  With dis option, they is rejected.
.Sp
\&\fB\-Wpedantic\fR do not cause warnin lyrics fo' use of the
alternate keywordz whose names begin n' end wit \fB_\|_\fR.  Pedantic
warnings is also disabled up in tha expression dat bigs up
\&\f(CW\*(C`_\|_extension_\|_\*(C'\fR.  But fuck dat shiznit yo, tha word on tha street is dat only system header filez should use
these escape routes; application programs should avoid em.
.Sp
Some playas try ta use \fB\-Wpedantic\fR ta check programs fo' strict \s-1ISO
C\s0 conformance.  They soon find dat it do not do like what tha fuck they want:
it findz some non-ISO practices yo, but not all\-\-\-only dem fo' which
\&\s-1ISO C \s0\fIrequires\fR a gangbangin' finger-lickin' diagnostic, n' some others fo' which
diagnostics done been added.
.Sp
A feature ta report any failure ta conform ta \s-1ISO C\s0 might be useful in
some instances yo, but would require considerable additionizzle work n' would
be like different from \fB\-Wpedantic\fR.  Us dudes aint gots plans to
support such a gangbangin' feature up in tha near future.
.Sp
Where tha standard specified wit \fB\-std\fR represents a \s-1GNU\s0
extended dialect of C, like fuckin \fBgnu90\fR or \fBgnu99\fR, there be a
correspondin \fIbase standard\fR, tha version of \s-1ISO C\s0 on which tha \s-1GNU\s0
extended dialect is based. Y'all KNOW dat shit, muthafucka!  Warnings from \fB\-Wpedantic\fR is given
where they is required by tha base standard. Y'all KNOW dat shit, muthafucka!  (It do not make sense
for such warnings ta be given only fo' features not up in tha specified \s-1GNU
C\s0 dialect, since by definizzle tha \s-1GNU\s0 dialectz of C include all
features tha compila supports wit tha given option, n' there would be
nothang ta warn about.)
.IP "\fB\-pedantic\-errors\fR" 4
.IX Item "-pedantic-errors"
Like \fB\-Wpedantic\fR, except dat errors is produced rather than
warnings.
.IP "\fB\-Wall\fR" 4
.IX Item "-Wall"
This enablez all tha warnings bout constructions dat some users
consider questionable, n' dat is easy as fuck  ta avoid (or modify to
prevent tha warning), even up in conjunction wit macros.  This also
enablez some language-specific warnings busted lyrics bout up in \fB\*(C+ Dialect
Options\fR n' \fBObjective-C n' Objective\-\*(C+ Dialect Options\fR.
.Sp
\&\fB\-Wall\fR turns on tha followin warnin flags:
.Sp
\&\fB\-Waddress   
\&\-Warray\-bounds\fR (only with\fB \fR\fB\-O2\fR)  
\&\fB\-Wc++11\-compat  
\&\-Wchar\-subscripts  
\&\-Wenum\-compare\fR (in C/ObjC; dis is on by default up in \*(C+) 
\&\fB\-Wimplicit\-int\fR (C n' Objective-C only) 
\&\fB\-Wimplicit\-function\-declaration\fR (C n' Objective-C only) 
\&\fB\-Wcomment  
\&\-Wformat   
\&\-Wmain\fR (only fo' C/ObjC n' unless\fB \fR\fB\-ffreestanding\fR)  
\&\fB\-Wmaybe\-uninitialized 
\&\-Wmissing\-braces\fR (only fo' C/ObjC) 
\&\fB\-Wnonnull  
\&\-Wparentheses  
\&\-Wpointer\-sign  
\&\-Wreorder   
\&\-Wreturn\-type  
\&\-Wsequence\-point  
\&\-Wsign\-compare\fR (only up in \*(C+)  
\&\fB\-Wstrict\-aliasin  
\&\-Wstrict\-overflow=1  
\&\-Wswitch  
\&\-Wtrigraphs  
\&\-Wuninitialized  
\&\-Wunknown\-pragmas  
\&\-Wunused\-function  
\&\-Wunused\-label     
\&\-Wunused\-value     
\&\-Wunused\-variable  
\&\-Wvolatile\-register\-var\fR
.Sp
Note dat some warnin flags is not implied by \fB\-Wall\fR.  Some of
them warn bout constructions dat playas generally do not consider
questionable yo, but which occasionally you might wish ta check for;
others warn bout constructions dat is necessary or hard ta avoid in
some cases, n' there is no simple way ta modify tha code ta suppress
the warning. Right back up in yo muthafuckin ass. Some of dem is enabled by \fB\-Wextra\fR but nuff of
them must be enabled individually.
.IP "\fB\-Wextra\fR" 4
.IX Item "-Wextra"
This enablez some extra warnin flags dat is not enabled by
\&\fB\-Wall\fR. (This option used ta be called \fB\-W\fR.  Da older
name is still supported yo, but tha newer name is mo' descriptive.)
.Sp
\&\fB\-Wclobbered  
\&\-Wempty\-body  
\&\-Wignored\-qualifiers 
\&\-Wmissing\-field\-initializers  
\&\-Wmissing\-parameter\-type\fR (C only)  
\&\fB\-Wold\-style\-declaration\fR (C only)  
\&\fB\-Woverride\-init  
\&\-Wsign\-compare  
\&\-Wtype\-limits  
\&\-Wuninitialized  
\&\-Wunused\-parameter\fR (only with\fB \fR\fB\-Wunused\fR\fB \fRor\fB \fR\fB\-Wall\fR) 
\&\fB\-Wunused\-but\-set\-parameter\fR (only with\fB \fR\fB\-Wunused\fR\fB \fRor\fB \fR\fB\-Wall\fR)  \fB \fR
.Sp
Da option \fB\-Wextra\fR also prints warnin lyrics fo' the
followin cases:
.RS 4
.IP "\(bu" 4
A pointa is compared against integer zero wit \fB<\fR, \fB<=\fR,
\&\fB>\fR, or \fB>=\fR.
.IP "\(bu" 4
(\*(C+ only) An enumerator n' a non-enumerator both step tha fuck up in a
conditionizzle expression.
.IP "\(bu" 4
(\*(C+ only) Ambiguous virtual bases.
.IP "\(bu" 4
(\*(C+ only) Subscriptin a array dat has been declared \fBregister\fR.
.IP "\(bu" 4
(\*(C+ only) Takin tha address of a variable dat has been declared
\&\fBregister\fR.
.IP "\(bu" 4
(\*(C+ only) A base class aint initialized up in a thugged-out derived classs copy
constructor.
.RE
.RS 4
.RE
.IP "\fB\-Wchar\-subscripts\fR" 4
.IX Item "-Wchar-subscripts"
Warn if a array subscript has type \f(CW\*(C`char\*(C'\fR.  This be a cold-ass lil common cause
of error, as programmers often forget dat dis type is signed on some
machines.
This warnin is enabled by \fB\-Wall\fR.
.IP "\fB\-Wcomment\fR" 4
.IX Item "-Wcomment"
Warn whenever a cold-ass lil comment-start sequence \fB/*\fR appears up in a \fB/*\fR
comment, or whenever a Backslash-Newline appears up in a \fB//\fR comment.
This warnin is enabled by \fB\-Wall\fR.
.IP "\fB\-Wno\-coverage\-mismatch\fR" 4
.IX Item "-Wno-coverage-mismatch"
Warn if feedback profilez do not match when rockin the
\&\fB\-fprofile\-use\fR option.
If a source file is chizzled between compilin wit \fB\-fprofile\-gen\fR and
with \fB\-fprofile\-use\fR, tha filez wit tha flava feedback can fail
to match tha source file n' \s-1GCC\s0 cannot use tha flava feedback
information. I aint talkin' bout chicken n' gravy biatch.  By default, dis warnin is enabled n' is treated as an
error. Shiiit, dis aint no joke.  \fB\-Wno\-coverage\-mismatch\fR can be used ta disable the
warnin or \fB\-Wno\-error=coverage\-mismatch\fR can be used to
disable tha error. Shiiit, dis aint no joke.  Disablin tha error fo' dis warnin can result in
poorly optimized code n' is useful only up in the
case of straight-up minor chizzlez like fuckin bug fixes ta a existin code-base.
All Out disablin tha warnin aint recommended.
.IP "\fB\-Wno\-cpp\fR" 4
.IX Item "-Wno-cpp"
(C, Objective-C, \*(C+, Objective\-\*(C+ n' Fortran only)
.Sp
Suppress warnin lyrics emitted by \f(CW\*(C`#warning\*(C'\fR directives.
.IP "\fB\-Wdouble\-promotion\fR (C, \*(C+, Objective-C n' Objective\-\*(C+ only)" 4
.IX Item "-Wdouble-promotion (C, , Objective-C n' Objective- only)"
Give a warnin when a value of type \f(CW\*(C`float\*(C'\fR is implicitly
promoted ta \f(CW\*(C`double\*(C'\fR.  CPUs wit a 32\-bit \*(L"single-precision\*(R"
floating-point unit implement \f(CW\*(C`float\*(C'\fR up in hardware yo, but emulate
\&\f(CW\*(C`double\*(C'\fR up in software.  On such a machine, bustin computations
usin \f(CW\*(C`double\*(C'\fR joints is much mo' high-rollin' cuz of the
overhead required fo' software emulation.
.Sp
It be easy as fuck  ta accidentally do computations wit \f(CW\*(C`double\*(C'\fR cuz
floating-point literals is implicitly of type \f(CW\*(C`double\*(C'\fR.  For
example, in:
.Sp
.Vb 4
\&        float area(float radius)
\&        {
\&           return 3.14159 * radius * radius;
\&        }
.Ve
.Sp
the compila performs tha entire computation wit \f(CW\*(C`double\*(C'\fR
because tha floating-point literal be a \f(CW\*(C`double\*(C'\fR.
.IP "\fB\-Wformat\fR" 4
.IX Item "-Wformat"
.PD 0
.IP "\fB\-Wformat=\fR\fIn\fR" 4
.IX Item "-Wformat=n"
.PD
Peep calls ta \f(CW\*(C`printf\*(C'\fR n' \f(CW\*(C`scanf\*(C'\fR, etc., ta make shizzle that
the arguments supplied have types appropriate ta tha format string
specified, n' dat tha conversions specified up in tha format strang make
sense.  This includes standard functions, n' others specified by format
attributes, up in tha \f(CW\*(C`printf\*(C'\fR,
\&\f(CW\*(C`scanf\*(C'\fR, \f(CW\*(C`strftime\*(C'\fR n' \f(CW\*(C`strfmon\*(C'\fR (an X/Open extension,
not up in tha C standard) crews (or other target-specific crews).
Which functions is checked without format attributes havin been
specified dependz on tha standard version selected, n' such checks of
functions without tha attribute specified is disabled by
\&\fB\-ffreestanding\fR or \fB\-fno\-builtin\fR.
.Sp
Da formats is checked against tha format features supported by \s-1GNU\s0
libc version 2.2.  These include all \s-1ISO C90\s0 n' C99 features, as well
as features from tha Single Unix Justification n' some \s-1BSD\s0 n' \s-1GNU\s0
extensions.  Other library implementations may not support all these
features; \s-1GCC\s0 do not support warnin bout features dat go beyond a
particular libraryz limitations.  But fuck dat shiznit yo, tha word on tha street is dat if \fB\-Wpedantic\fR is used
with \fB\-Wformat\fR, warnings is given bout format features not
in tha selected standard version (but not fo' \f(CW\*(C`strfmon\*(C'\fR formats,
since dem is not up in any version of tha C standard).
.RS 4
.IP "\fB\-Wformat=1\fR" 4
.IX Item "-Wformat=1"
.PD 0
.IP "\fB\-Wformat\fR" 4
.IX Item "-Wformat"
.PD
Option \fB\-Wformat\fR is equivalent ta \fB\-Wformat=1\fR, and
\&\fB\-Wno\-format\fR is equivalent ta \fB\-Wformat=0\fR.  Since
\&\fB\-Wformat\fR also checks fo' null format arguments fo' several
functions, \fB\-Wformat\fR also implies \fB\-Wnonnull\fR.  Some
aspectz of dis level of format checkin can be disabled by the
options: \fB\-Wno\-format\-gotz nuff\-nul\fR,
\&\fB\-Wno\-format\-extra\-args\fR, n' \fB\-Wno\-format\-zero\-length\fR.
\&\fB\-Wformat\fR is enabled by \fB\-Wall\fR.
.IP "\fB\-Wno\-format\-gotz nuff\-nul\fR" 4
.IX Item "-Wno-format-gotz nuff-nul"
If \fB\-Wformat\fR is specified, do not warn bout format strings that
contain \s-1NUL\s0 bytes.
.IP "\fB\-Wno\-format\-extra\-args\fR" 4
.IX Item "-Wno-format-extra-args"
If \fB\-Wformat\fR is specified, do not warn bout excess arguments ta a
\&\f(CW\*(C`printf\*(C'\fR or \f(CW\*(C`scanf\*(C'\fR format function. I aint talkin' bout chicken n' gravy biatch.  Da C standard specifies
that such arguments is ignored.
.Sp
Where tha unused arguments lie between used arguments dat are
specified wit \fB$\fR operand number justifications, normally
warnings is still given, since tha implementation could not know what
type ta pass ta \f(CW\*(C`va_arg\*(C'\fR ta skip tha unused arguments, n' you can put dat on yo' toast.  However,
in tha case of \f(CW\*(C`scanf\*(C'\fR formats, dis option suppresses the
warnin if tha unused arguments is all pointers, since tha Single
Unix Justification say dat such unused arguments is allowed.
.IP "\fB\-Wno\-format\-zero\-length\fR" 4
.IX Item "-Wno-format-zero-length"
If \fB\-Wformat\fR is specified, do not warn bout zero-length formats.
Da C standard specifies dat zero-length formats is allowed.
.IP "\fB\-Wformat=2\fR" 4
.IX Item "-Wformat=2"
Enable \fB\-Wformat\fR plus additionizzle format checks.  Currently
equivalent ta \fB\-Wformat \-Wformat\-nonliteral \-Wformat\-security
\&\-Wformat\-y2k\fR.
.IP "\fB\-Wformat\-nonliteral\fR" 4
.IX Item "-Wformat-nonliteral"
If \fB\-Wformat\fR is specified, also warn if tha format strang aint a
strin literal n' so cannot be checked, unless tha format function
takes its format arguments as a \f(CW\*(C`va_list\*(C'\fR.
.IP "\fB\-Wformat\-security\fR" 4
.IX Item "-Wformat-security"
If \fB\-Wformat\fR is specified, also warn bout usez of format
functions dat represent possible securitizzle problems.  At present, this
warns bout calls ta \f(CW\*(C`printf\*(C'\fR n' \f(CW\*(C`scanf\*(C'\fR functions where the
format strang aint a strang literal n' there be no format arguments,
as up in \f(CW\*(C`printf (foo);\*(C'\fR.  This may be a securitizzle hole if tha format
strin came from untrusted input n' gotz nuff \fB\f(CB%n\fB\fR.  (This is
currently a subset of what tha fuck \fB\-Wformat\-nonliteral\fR warns bout yo, but
in future warnings may be added ta \fB\-Wformat\-security\fR dat is not
included up in \fB\-Wformat\-nonliteral\fR.)
.IP "\fB\-Wformat\-y2k\fR" 4
.IX Item "-Wformat-y2k"
If \fB\-Wformat\fR is specified, also warn bout \f(CW\*(C`strftime\*(C'\fR
formats dat may yield only a two-digit year.
.RE
.RS 4
.RE
.IP "\fB\-Wnonnull\fR" 4
.IX Item "-Wnonnull"
Warn bout passin a null pointa fo' arguments marked as
requirin a non-null value by tha \f(CW\*(C`nonnull\*(C'\fR function attribute.
.Sp
\&\fB\-Wnonnull\fR is included up in \fB\-Wall\fR n' \fB\-Wformat\fR.  It
can be disabled wit tha \fB\-Wno\-nonnull\fR option.
.IP "\fB\-Winit\-self\fR (C, \*(C+, Objective-C n' Objective\-\*(C+ only)" 4
.IX Item "-Winit-self (C, , Objective-C n' Objective- only)"
Warn bout uninitialized variablez dat is initialized wit theyselves.
Note dis option can only be used wit tha \fB\-Wuninitialized\fR option.
.Sp
For example, \s-1GCC\s0 warns bout \f(CW\*(C`i\*(C'\fR bein uninitialized up in the
followin snippet only when \fB\-Winit\-self\fR has been specified:
.Sp
.Vb 5
\&        int f()
\&        {
\&          int i = i;
\&          return i;
\&        }
.Ve
.Sp
This warnin is enabled by \fB\-Wall\fR up in \*(C+.
.IP "\fB\-Wimplicit\-int\fR (C n' Objective-C only)" 4
.IX Item "-Wimplicit-int (C n' Objective-C only)"
Warn when a thugged-out declaration do not specify a type.
This warnin is enabled by \fB\-Wall\fR.
.IP "\fB\-Wimplicit\-function\-declaration\fR (C n' Objective-C only)" 4
.IX Item "-Wimplicit-function-declaration (C n' Objective-C only)"
Give a warnin whenever a gangbangin' function is used before bein declared. Y'all KNOW dat shit, muthafucka! In
C99 mode (\fB\-std=c99\fR or \fB\-std=gnu99\fR), dis warnin is
enabled by default n' it is made tha fuck into a error by
\&\fB\-pedantic\-errors\fR. This warnin be also enabled by
\&\fB\-Wall\fR.
.IP "\fB\-Wimplicit\fR (C n' Objective-C only)" 4
.IX Item "-Wimplicit (C n' Objective-C only)"
Same as \fB\-Wimplicit\-int\fR n' \fB\-Wimplicit\-function\-declaration\fR.
This warnin is enabled by \fB\-Wall\fR.
.IP "\fB\-Wignored\-qualifiers\fR (C n' \*(C+ only)" 4
.IX Item "-Wignored-qualifiers (C n' only)"
Warn if tha return type of a gangbangin' function has a type qualifier
like fuckin \f(CW\*(C`const\*(C'\fR.  For \s-1ISO C\s0 such a type qualifier has no effect,
since tha value returned by a gangbangin' function aint a lvalue.
For \*(C+, tha warnin is only emitted fo' scalar types or \f(CW\*(C`void\*(C'\fR.
\&\s-1ISO C\s0 prohibits qualified \f(CW\*(C`void\*(C'\fR return types on function
definitions, so such return types always receive a warning
even without dis option.
.Sp
This warnin be also enabled by \fB\-Wextra\fR.
.IP "\fB\-Wmain\fR" 4
.IX Item "-Wmain"
Warn if tha type of \fBmain\fR is suspicious.  \fBmain\fR should be
a function wit external linkage, returnin int, takin either zero
arguments, two, or three argumentz of appropriate types.  This warning
is enabled by default up in \*(C+ n' is enabled by either \fB\-Wall\fR
or \fB\-Wpedantic\fR.
.IP "\fB\-Wmissing\-braces\fR" 4
.IX Item "-Wmissing-braces"
Warn if a aggregate or union initializer aint straight-up bracketed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  In
the followin example, tha initializer fo' \fBa\fR aint fully
bracketed yo, but dat fo' \fBb\fR is straight-up bracketed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This warnin is
enabled by \fB\-Wall\fR up in C.
.Sp
.Vb 2
\&        int a[2][2] = { 0, 1, 2, 3 };
\&        int b[2][2] = { { 0, 1 }, { 2, 3 } };
.Ve
.Sp
This warnin is enabled by \fB\-Wall\fR.
.IP "\fB\-Wmissing\-include\-dirs\fR (C, \*(C+, Objective-C n' Objective\-\*(C+ only)" 4
.IX Item "-Wmissing-include-dirs (C, , Objective-C n' Objective- only)"
Warn if a user-supplied include directory do not exist.
.IP "\fB\-Wparentheses\fR" 4
.IX Item "-Wparentheses"
Warn if parentheses is omitted up in certain contexts, such
as when there be a assignment up in a cold-ass lil context where a truth value
is expected, or when operators is nested whose precedence people
often git trippin about.
.Sp
Also warn if a cold-ass lil comparison like \fBx<=y<=z\fR appears; dis is
equivalent ta \fB(x<=y ? 1 : 0) <= z\fR, which be a gangbangin' finger-lickin' different
interpretation from dat of ordinary mathematical notation.
.Sp
Also warn bout constructions where there may be mad drama ta which
\&\f(CW\*(C`if\*(C'\fR statement a \f(CW\*(C`else\*(C'\fR branch belongs.  Here be a example of
such a cold-ass lil case:
.Sp
.Vb 7
\&        {
\&          if (a)
\&            if (b)
\&              foo ();
\&          else
\&            bar ();
\&        }
.Ve
.Sp
In C/\*(C+, every last muthafuckin \f(CW\*(C`else\*(C'\fR branch belongs ta tha innermost possible
\&\f(CW\*(C`if\*(C'\fR statement, which up in dis example is \f(CW\*(C`if (b)\*(C'\fR.  This is
often not what tha fuck tha programmer expected, as illustrated up in tha above
example by indentation tha programmer chose.  When there is the
potential fo' dis mad drama, \s-1GCC\s0 thangs a warnin when dis flag
is specified. Y'all KNOW dat shit, muthafucka!  To eliminizzle tha warning, add explicit braces around
the innermost \f(CW\*(C`if\*(C'\fR statement so there is no way tha \f(CW\*(C`else\*(C'\fR
can belong ta tha enclosin \f(CW\*(C`if\*(C'\fR.  Da resultin code
looks like this:
.Sp
.Vb 9
\&        {
\&          if (a)
\&            {
\&              if (b)
\&                foo ();
\&              else
\&                bar ();
\&            }
\&        }
.Ve
.Sp
Also warn fo' fucked up usez of tha \s-1GNU\s0 extension to
\&\f(CW\*(C`?:\*(C'\fR wit omitted middle operand. Y'all KNOW dat shit, muthafucka! When tha condition
in tha \f(CW\*(C`?\*(C'\fR: operator be a funky-ass boolean expression, tha omitted value is
always 1.  Often programmers expect it ta be a value computed
inside tha conditionizzle expression instead.
.Sp
This warnin is enabled by \fB\-Wall\fR.
.IP "\fB\-Wsequence\-point\fR" 4
.IX Item "-Wsequence-point"
Warn bout code dat may have undefined semantics cuz of violations
of sequence point rulez up in tha C n' \*(C+ standards.
.Sp
Da C n' \*(C+ standardz define tha order up in which expressions up in a C/\*(C+
program is evaluated up in termz of \fIsequence points\fR, which represent
a partial orderin between tha execution of partz of tha program: them
executed before tha sequence point, n' dem executed afta dat shit.  These
occur afta tha evaluation of a gangbangin' full expression (one which aint part
of a larger expression), afta tha evaluation of tha straight-up original gangsta operand of a
\&\f(CW\*(C`&&\*(C'\fR, \f(CW\*(C`||\*(C'\fR, \f(CW\*(C`? :\*(C'\fR or \f(CW\*(C`,\*(C'\fR (comma) operator, before a
function is called (but afta tha evaluation of its arguments n' the
expression denotin tha called function), n' up in certain other places.
Other than as expressed by tha sequence point rules, tha order of
evaluation of subexpressionz of a expression aint specified. Y'all KNOW dat shit, muthafucka!  All
these rulez describe only a partial order rather than a total order,
since, fo' example, if two functions is called within one expression
with no sequence point between them, tha order up in which tha functions
are called aint specified. Y'all KNOW dat shit, muthafucka!  But fuck dat shiznit yo, tha word on tha street is dat tha standardz committee have
ruled dat function calls do not overlap.
.Sp
It aint specified when between sequence points modifications ta the
valuez of objects take effect.  Programs whose behavior dependz on this
have undefined behavior; tha C n' \*(C+ standardz specify dat \*(L"Between
the previous n' next sequence point a object shall have its stored
value modified at most once by tha evaluation of a expression.
Furthermore, tha prior value shall be read only ta determine tha value
to be stored.\*(R".  If a program breaks these rules, tha thangs up in dis biatch on any
particular implementation is entirely unpredictable.
.Sp
Examplez of code wit undefined behavior is \f(CW\*(C`a = a++;\*(C'\fR, \f(CW\*(C`a[n]
= b[n++]\*(C'\fR n' \f(CW\*(C`a[i++] = i;\*(C'\fR.  Some mo' fucked up cases is not
diagnosed by dis option, n' it may give a occasionizzle false positive
result yo, but up in general it has been found fairly effectizzle at detecting
this sort of problem up in programs.
.Sp
Da standard is worded confusingly, therefore there is some debate
over tha precise meanin of tha sequence point rulez up in subtle cases.
Links ta rapz of tha problem, includin proposed formal
definitions, may be found on tha \s-1GCC\s0 readings page, at
<\fBhttp://gcc.gnu.org/readings.html\fR>.
.Sp
This warnin is enabled by \fB\-Wall\fR fo' C n' \*(C+.
.IP "\fB\-Wno\-return\-local\-addr\fR" 4
.IX Item "-Wno-return-local-addr"
Do not warn bout returnin a pointa (or up in \*(C+, a reference) ta a
variable dat goes outta scope afta tha function returns.
.IP "\fB\-Wreturn\-type\fR" 4
.IX Item "-Wreturn-type"
Warn whenever a gangbangin' function is defined wit a return type dat defaults
to \f(CW\*(C`int\*(C'\fR.  Also warn bout any \f(CW\*(C`return\*(C'\fR statement wit no
return value up in a gangbangin' function whose return type aint \f(CW\*(C`void\*(C'\fR
(fallin off tha end of tha function body is considered returning
without a value), n' on some \f(CW\*(C`return\*(C'\fR statement wit an
expression up in a gangbangin' function whose return type is \f(CW\*(C`void\*(C'\fR.
.Sp
For \*(C+, a gangbangin' function without return type always produces a gangbangin' finger-lickin' diagnostic
message, even when \fB\-Wno\-return\-type\fR is specified. Y'all KNOW dat shit, muthafucka!  Da only
exceptions is \fBmain\fR n' functions defined up in system headers.
.Sp
This warnin is enabled by \fB\-Wall\fR.
.IP "\fB\-Wswitch\fR" 4
.IX Item "-Wswitch"
Warn whenever a \f(CW\*(C`switch\*(C'\fR statement has a index of enumerated type
and lacks a \f(CW\*(C`case\*(C'\fR fo' one or mo' of tha named codez of that
enumeration. I aint talkin' bout chicken n' gravy biatch.  (Da presence of a \f(CW\*(C`default\*(C'\fR label prevents this
warning.)  \f(CW\*(C`case\*(C'\fR labels outside tha enumeration range also
provoke warnings when dis option is used (even if there be a
\&\f(CW\*(C`default\*(C'\fR label).
This warnin is enabled by \fB\-Wall\fR.
.IP "\fB\-Wswitch\-default\fR" 4
.IX Item "-Wswitch-default"
Warn whenever a \f(CW\*(C`switch\*(C'\fR statement aint gots a \f(CW\*(C`default\*(C'\fR
case.
.IP "\fB\-Wswitch\-enum\fR" 4
.IX Item "-Wswitch-enum"
Warn whenever a \f(CW\*(C`switch\*(C'\fR statement has a index of enumerated type
and lacks a \f(CW\*(C`case\*(C'\fR fo' one or mo' of tha named codez of that
enumeration. I aint talkin' bout chicken n' gravy biatch.  \f(CW\*(C`case\*(C'\fR labels outside tha enumeration range also
provoke warnings when dis option is used. Y'all KNOW dat shit, muthafucka!  Da only difference
between \fB\-Wswitch\fR n' dis option is dat dis option gives a
warnin bout a omitted enumeration code even if there be a
\&\f(CW\*(C`default\*(C'\fR label.
.IP "\fB\-Wsync\-nand\fR (C n' \*(C+ only)" 4
.IX Item "-Wsync-nand (C n' only)"
Warn when \f(CW\*(C`_\|_sync_fetch_and_nand\*(C'\fR n' \f(CW\*(C`_\|_sync_nand_and_fetch\*(C'\fR
built-in functions is used. Y'all KNOW dat shit, muthafucka!  These functions chizzled semantics up in \s-1GCC 4.4.\s0
.IP "\fB\-Wtrigraphs\fR" 4
.IX Item "-Wtrigraphs"
Warn if any trigraphs is encountered dat might chizzle tha meanin of
the program (trigraphs within comments is not warned about).
This warnin is enabled by \fB\-Wall\fR.
.IP "\fB\-Wunused\-but\-set\-parameter\fR" 4
.IX Item "-Wunused-but-set-parameter"
Warn whenever a gangbangin' function parameta be assigned ta yo, but otherwise unused
(aside from its declaration).
.Sp
To suppress dis warnin use tha \fBunused\fR attribute.
.Sp
This warnin be also enabled by \fB\-Wunused\fR together with
\&\fB\-Wextra\fR.
.IP "\fB\-Wunused\-but\-set\-variable\fR" 4
.IX Item "-Wunused-but-set-variable"
Warn whenever a local variable be assigned ta yo, but otherwise unused
(aside from its declaration).
This warnin is enabled by \fB\-Wall\fR.
.Sp
To suppress dis warnin use tha \fBunused\fR attribute.
.Sp
This warnin be also enabled by \fB\-Wunused\fR, which is enabled
by \fB\-Wall\fR.
.IP "\fB\-Wunused\-function\fR" 4
.IX Item "-Wunused-function"
Warn whenever a static function is declared but not defined or a
non-inline static function is unused.
This warnin is enabled by \fB\-Wall\fR.
.IP "\fB\-Wunused\-label\fR" 4
.IX Item "-Wunused-label"
Warn whenever a label is declared but not used.
This warnin is enabled by \fB\-Wall\fR.
.Sp
To suppress dis warnin use tha \fBunused\fR attribute.
.IP "\fB\-Wunused\-local\-typedefs\fR (C, Objective-C, \*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Wunused-local-typedefs (C, Objective-C, n' Objective- only)"
Warn when a typedef locally defined up in a gangbangin' function aint used.
This warnin is enabled by \fB\-Wall\fR.
.IP "\fB\-Wunused\-parameter\fR" 4
.IX Item "-Wunused-parameter"
Warn whenever a gangbangin' function parameta is unused aside from its declaration.
.Sp
To suppress dis warnin use tha \fBunused\fR attribute.
.IP "\fB\-Wno\-unused\-result\fR" 4
.IX Item "-Wno-unused-result"
Do not warn if a cold-ass lil calla of a gangbangin' function marked wit attribute
\&\f(CW\*(C`warn_unused_result\*(C'\fR do not use
its return value. Da default is \fB\-Wunused\-result\fR.
.IP "\fB\-Wunused\-variable\fR" 4
.IX Item "-Wunused-variable"
Warn whenever a local variable or non-constant static variable is unused
aside from its declaration.
This warnin is enabled by \fB\-Wall\fR.
.Sp
To suppress dis warnin use tha \fBunused\fR attribute.
.IP "\fB\-Wunused\-value\fR" 4
.IX Item "-Wunused-value"
Warn whenever a statement computes a result dat is explicitly not
used. Y'all KNOW dat shit, muthafucka! To suppress dis warnin cast tha unused expression to
\&\fBvoid\fR. This includes a expression-statement or tha left-hand
side of a cold-ass lil comma expression dat gotz nuff no side effects, n' you can put dat on yo' toast. For example,
an expression like fuckin \fBx[i,j]\fR causes a warning, while
\&\fBx[(void)i,j]\fR do not.
.Sp
This warnin is enabled by \fB\-Wall\fR.
.IP "\fB\-Wunused\fR" 4
.IX Item "-Wunused"
All tha above \fB\-Wunused\fR options combined.
.Sp
In order ta git a warnin bout a unused function parameter, you must
either specify \fB\-Wextra \-Wunused\fR (note dat \fB\-Wall\fR implies
\&\fB\-Wunused\fR), or separately specify \fB\-Wunused\-parameter\fR.
.IP "\fB\-Wuninitialized\fR" 4
.IX Item "-Wuninitialized"
Warn if a automatic variable is used without first bein initialized
or if a variable may be clobbered by a \f(CW\*(C`setjmp\*(C'\fR call. In \*(C+,
warn if a non-static reference or non-static \fBconst\fR member
appears up in a cold-ass lil class without constructors.
.Sp
If you wanna warn bout code dat uses tha uninitialized value of the
variable up in its own initializer, use tha \fB\-Winit\-self\fR option.
.Sp
These warnings occur fo' individual uninitialized or clobbered
elementz of structure, union or array variablez as well as for
variablez dat is uninitialized or clobbered as a whole.  They do
not occur fo' variablez or elements declared \f(CW\*(C`volatile\*(C'\fR.  Because
these warnings depend on optimization, tha exact variablez or elements
for which there be warnings dependz on tha precise optimization
options n' version of \s-1GCC\s0 used.
.Sp
Note dat there may be no warnin on some variable dat is used only
to compute a value dat itself is never used, cuz such
computations may be deleted by data flow analysis before tha warnings
are printed.
.IP "\fB\-Wmaybe\-uninitialized\fR" 4
.IX Item "-Wmaybe-uninitialized"
For a automatic variable, if there exists a path from tha function
entry ta a use of tha variable dat is initialized yo, but there exist
some other paths fo' which tha variable aint initialized, tha compiler
emits a warnin if it cannot prove tha uninitialized paths is not
executed at run time. These warnings is made optionizzle cuz \s-1GCC\s0 is
not smart-ass enough ta peep all tha reasons why tha code might be erect
in spite of appearin ta have a error. Shiiit, dis aint no joke.  Here is one example of how
this can happen:
.Sp
.Vb 12
\&        {
\&          int x;
\&          switch (y)
\&            {
\&            case 1: x = 1;
\&              break;
\&            case 2: x = 4;
\&              break;
\&            case 3: x = 5;
\&            }
\&          foo (x);
\&        }
.Ve
.Sp
If tha value of \f(CW\*(C`y\*(C'\fR be always 1, 2 or 3, then \f(CW\*(C`x\*(C'\fR is
always initialized yo, but \s-1GCC\s0 don't give a fuck all dis bullshit. To suppress the
warning, you need ta provide a thugged-out default case wit \fIassert\fR\|(0) or
similar code.
.Sp
This option also warns when a non-volatile automatic variable might be
changed by a cold-ass lil call ta \f(CW\*(C`longjmp\*(C'\fR.  These warnings as well is possible
only up in optimizin compilation.
.Sp
Da compila sees only tha calls ta \f(CW\*(C`setjmp\*(C'\fR.  It cannot know
where \f(CW\*(C`longjmp\*(C'\fR is ghon be called; up in fact, a signal handlez could
call it at any point up in tha code.  As a result, you may git a warning
even when there is up in fact no problem cuz \f(CW\*(C`longjmp\*(C'\fR cannot
in fact be called all up in tha place dat would cause a problem.
.Sp
Some spurious warnings can be avoided if you declare all tha functions
you use dat never return as \f(CW\*(C`noreturn\*(C'\fR.
.Sp
This warnin is enabled by \fB\-Wall\fR or \fB\-Wextra\fR.
.IP "\fB\-Wunknown\-pragmas\fR" 4
.IX Item "-Wunknown-pragmas"
Warn when a \f(CW\*(C`#pragma\*(C'\fR directizzle is encountered dat aint understood by 
\&\s-1GCC. \s0 If dis command-line option is used, warnings is even issued
for unknown pragmas up in system header files.  This aint tha case if
the warnings is only enabled by tha \fB\-Wall\fR command-line option.
.IP "\fB\-Wno\-pragmas\fR" 4
.IX Item "-Wno-pragmas"
Do not warn bout misusez of pragmas, like fuckin incorrect parameters,
invalid syntax, or conflicts between pragmas.  See also
\&\fB\-Wunknown\-pragmas\fR.
.IP "\fB\-Wstrict\-aliasing\fR" 4
.IX Item "-Wstrict-aliasing"
This option is only actizzle when \fB\-fstrict\-aliasing\fR be active.
It warns bout code dat might break tha strict aliasin rulez dat the
compila is rockin fo' optimization. I aint talkin' bout chicken n' gravy biatch.  Da warnin do not catch all
cases yo, but do attempt ta catch tha mo' common pitfalls.  It is
included up in \fB\-Wall\fR.
It be equivalent ta \fB\-Wstrict\-aliasing=3\fR
.IP "\fB\-Wstrict\-aliasing=n\fR" 4
.IX Item "-Wstrict-aliasing=n"
This option is only actizzle when \fB\-fstrict\-aliasing\fR be active.
It warns bout code dat might break tha strict aliasin rulez dat the
compila is rockin fo' optimization.
Higher levels correspond ta higher accuracy (fewer false positives).
Higher levels also correspond ta mo' effort, similar ta tha way \fB\-O\fR 
works.
\&\fB\-Wstrict\-aliasing\fR is equivalent ta \fB\-Wstrict\-aliasing=3\fR.
.Sp
Level 1: Most aggressive, quick, least accurate.
Possibly useful when higher levels
do not warn but \fB\-fstrict\-aliasing\fR still breaks tha code, as it has straight-up few
false negatives.  But fuck dat shiznit yo, tha word on tha street is dat it has nuff false positives.
Warns fo' all pointa conversions between possibly incompatible types,
even if never dereferenced. Y'all KNOW dat shit, muthafucka!  Runs up in tha front end only.
.Sp
Level 2: Aggressive, quick, not too precise.
May still have nuff false positives (not as nuff as level 1 though),
and few false negatives (but possibly mo' than level 1).
Unlike level 1, it only warns when a address is taken. I aint talkin' bout chicken n' gravy biatch.  Warns about
incomplete types.  Runs up in tha front end only.
.Sp
Level 3 (default fo' \fB\-Wstrict\-aliasing\fR):
Should have straight-up few false positives n' few false
negatives.  Slightly slower than levels 1 or 2 when optimization is enabled.
Takes care of tha common pun+dereference pattern up in tha front end:
\&\f(CW\*(C`*(int*)&some_float\*(C'\fR.
If optimization is enabled, it also runs up in tha back end, where it deals
with multiple statement cases rockin flow-sensitizzle points-to shiznit.
Only warns when tha converted pointa is dereferenced.
Do not warn bout incomplete types.
.IP "\fB\-Wstrict\-overflow\fR" 4
.IX Item "-Wstrict-overflow"
.PD 0
.IP "\fB\-Wstrict\-overflow=\fR\fIn\fR" 4
.IX Item "-Wstrict-overflow=n"
.PD
This option is only actizzle when \fB\-fstrict\-overflow\fR be active.
It warns bout cases where tha compila optimizes based on the
assumption dat signed overflow do not occur. Shiiit, dis aint no joke.  Note dat it do not
warn bout all cases where tha code might overflow: it only warns
about cases where tha compila implements some optimization. I aint talkin' bout chicken n' gravy biatch.  Thus
this warnin dependz on tha optimization level.
.Sp
An optimization dat assumes dat signed overflow do not occur is
perfectly safe if tha jointz of tha variablez involved is such that
overflow never do, up in fact, occur. Shiiit, dis aint no joke.  Therefore dis warnin can
easily give a gangbangin' false positive: a warnin bout code dat is not
actually a problem.  To help focus on blingin issues, several
warnin levels is defined. Y'all KNOW dat shit, muthafucka!  No warnings is issued fo' tha use of
undefined signed overflow when estimatin how tha fuck nuff iterations a loop
requires, up in particular when determinin whether a loop will be
executed at all.
.RS 4
.IP "\fB\-Wstrict\-overflow=1\fR" 4
.IX Item "-Wstrict-overflow=1"
Warn bout cases dat is both questionable n' easy as fuck  ta avoid. Y'all KNOW dat shit, muthafucka!  For
example,  wit \fB\-fstrict\-overflow\fR, tha compila simplifies
\&\f(CW\*(C`x + 1 > x\*(C'\fR ta \f(CW1\fR.  This level of
\&\fB\-Wstrict\-overflow\fR is enabled by \fB\-Wall\fR; higher levels
are not, n' must be explicitly requested.
.IP "\fB\-Wstrict\-overflow=2\fR" 4
.IX Item "-Wstrict-overflow=2"
Also warn bout other cases where a cold-ass lil comparison is simplified ta a
constant.  For example: \f(CW\*(C`abs (x) >= 0\*(C'\fR.  This can only be
simplified when \fB\-fstrict\-overflow\fR is up in effect, cuz
\&\f(CW\*(C`abs (INT_MIN)\*(C'\fR overflows ta \f(CW\*(C`INT_MIN\*(C'\fR, which is less than
zero.  \fB\-Wstrict\-overflow\fR (with no level) is tha same ol' dirty as
\&\fB\-Wstrict\-overflow=2\fR.
.IP "\fB\-Wstrict\-overflow=3\fR" 4
.IX Item "-Wstrict-overflow=3"
Also warn bout other cases where a cold-ass lil comparison is simplified. Y'all KNOW dat shit, muthafucka!  For
example: \f(CW\*(C`x + 1 > 1\*(C'\fR is simplified ta \f(CW\*(C`x > 0\*(C'\fR.
.IP "\fB\-Wstrict\-overflow=4\fR" 4
.IX Item "-Wstrict-overflow=4"
Also warn bout other simplifications not covered by tha above cases.
For example: \f(CW\*(C`(x * 10) / 5\*(C'\fR is simplified ta \f(CW\*(C`x * 2\*(C'\fR.
.IP "\fB\-Wstrict\-overflow=5\fR" 4
.IX Item "-Wstrict-overflow=5"
Also warn bout cases where tha compila reduces tha magnitude of a
constant involved up in a cold-ass lil comparison. I aint talkin' bout chicken n' gravy biatch.  For example: \f(CW\*(C`x + 2 > y\*(C'\fR is
simplified ta \f(CW\*(C`x + 1 >= y\*(C'\fR.  This is reported only at the
highest warnin level cuz dis simplification applies ta many
comparisons, so dis warnin level gives a straight-up big-ass number of
false positives.
.RE
.RS 4
.RE
.IP "\fB\-Wsuggest\-attribute=\fR[\fBpure\fR|\fBconst\fR|\fBnoreturn\fR|\fBformat\fR]" 4
.IX Item "-Wsuggest-attribute=[pure|const|noreturn|format]"
Warn fo' cases where addin a attribute may be beneficial. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. The
attributes currently supported is listed below.
.RS 4
.IP "\fB\-Wsuggest\-attribute=pure\fR" 4
.IX Item "-Wsuggest-attribute=pure"
.PD 0
.IP "\fB\-Wsuggest\-attribute=const\fR" 4
.IX Item "-Wsuggest-attribute=const"
.IP "\fB\-Wsuggest\-attribute=noreturn\fR" 4
.IX Item "-Wsuggest-attribute=noreturn"
.PD
Warn bout functions dat might be muthafuckas fo' attributes
\&\f(CW\*(C`pure\*(C'\fR, \f(CW\*(C`const\*(C'\fR or \f(CW\*(C`noreturn\*(C'\fR.  Da compila only warns for
functions visible up in other compilation units or (in tha case of \f(CW\*(C`pure\*(C'\fR and
\&\f(CW\*(C`const\*(C'\fR) if it cannot prove dat tha function returns normally fo' realz. A function
returns normally if it don't contain a infinite loop or return abnormally
by throwing, callin \f(CW\*(C`abort()\*(C'\fR or trapping.  This analysis requires option
\&\fB\-fipa\-pure\-const\fR, which is enabled by default at \fB\-O\fR and
higher n' shit.  Higher optimization levels improve tha accuracy of tha analysis.
.IP "\fB\-Wsuggest\-attribute=format\fR" 4
.IX Item "-Wsuggest-attribute=format"
.PD 0
.IP "\fB\-Wmissing\-format\-attribute\fR" 4
.IX Item "-Wmissing-format-attribute"
.PD
Warn bout function pointas dat might be muthafuckas fo' \f(CW\*(C`format\*(C'\fR
attributes.  Note these is only possible muthafuckas, not absolute ones.
\&\s-1GCC\s0 guesses dat function pointas wit \f(CW\*(C`format\*(C'\fR attributes that
are used up in assignment, initialization, parameta passin or return
statements should gotz a cold-ass lil correspondin \f(CW\*(C`format\*(C'\fR attribute up in the
resultin type.  I.e. tha left-hand side of tha assignment or
initialization, tha type of tha parameta variable, or tha return type
of tha containin function respectively should also gotz a \f(CW\*(C`format\*(C'\fR
attribute ta avoid tha warning.
.Sp
\&\s-1GCC\s0 also warns bout function definitions dat might be
candidates fo' \f(CW\*(C`format\*(C'\fR attributes.  Again, these is only
possible muthafuckas.  \s-1GCC\s0 guesses dat \f(CW\*(C`format\*(C'\fR attributes
might be appropriate fo' any function dat calls a gangbangin' function like
\&\f(CW\*(C`vprintf\*(C'\fR or \f(CW\*(C`vscanf\*(C'\fR yo, but dis might not always be the
case, n' some functions fo' which \f(CW\*(C`format\*(C'\fR attributes are
appropriate may not be detected.
.RE
.RS 4
.RE
.IP "\fB\-Warray\-bounds\fR" 4
.IX Item "-Warray-bounds"
This option is only actizzle when \fB\-ftree\-vrp\fR be active
(default fo' \fB\-O2\fR n' above). Well shiiiit, it warns bout subscripts ta arrays
that is always outta bounds. This warnin is enabled by \fB\-Wall\fR.
.IP "\fB\-Wno\-div\-by\-zero\fR" 4
.IX Item "-Wno-div-by-zero"
Do not warn bout compile-time integer division by zero.  Floating-point
division by zero aint warned about, as it can be a legitimate way of
obtainin infinitizzles n' NaNs.
.IP "\fB\-Wsystem\-headers\fR" 4
.IX Item "-Wsystem-headers"
Print warnin lyrics fo' constructs found up in system header files.
Warnings from system headaz is normally suppressed, on tha assumption
that they probably do not indicate real problems n' would only make the
compila output harder ta read. Y'all KNOW dat shit, muthafucka!  Usin dis command-line option tells
\&\s-1GCC\s0 ta emit warnings from system headaz as if they occurred up in user
code.  But fuck dat shiznit yo, tha word on tha street is dat note dat rockin \fB\-Wall\fR up in conjunction wit this
option do \fInot\fR warn bout unknown pragmas up in system
headers\-\-\-for that, \fB\-Wunknown\-pragmas\fR must also be used.
.IP "\fB\-Wtrampolines\fR" 4
.IX Item "-Wtrampolines"
.Vb 1
\& Warn bout trampolines generated fo' pointas ta nested functions.
\&
\& A trampoline be a lil' small-ass piece of data or code dat is pimped at run
\& time on tha stack when tha address of a nested function is taken, and
\& is used ta booty-call tha nested function indirectly.  For some targets, it
\& is made up of data only n' thus requires no special treatment.  But,
\& fo' most targets, it is made up of code n' thus requires tha stack
\& ta be made executable up in order fo' tha program ta work properly.
.Ve
.IP "\fB\-Wfloat\-equal\fR" 4
.IX Item "-Wfloat-equal"
Warn if floating-point joints is used up in equalitizzle comparisons.
.Sp
Da scam behind dis is dat sometimes it is convenient (for the
programmer) ta consider floating-point joints as approximations to
infinitely precise real numbers.  If yo ass is bustin this, then you need
to compute (by analyzin tha code, or up in some other way) tha maximum or
likely maximum error dat tha computation introduces, n' allow fo' it
when struttin comparisons (and when producin output yo, but thatz a
different problem).  In particular, instead of testin fo' equality, you
should check ta peep whether tha two joints have ranges dat overlap; and
this is done wit tha relationizzle operators, so equalitizzle comparisons are
probably mistaken.
.IP "\fB\-Wtraditional\fR (C n' Objective-C only)" 4
.IX Item "-Wtraditionizzle (C n' Objective-C only)"
Warn bout certain constructs dat behave differently up in traditionizzle and
\&\s-1ISO C. \s0 Also warn bout \s-1ISO C\s0 constructs dat have no traditionizzle C
equivalent, and/or problematic constructs dat should be avoided.
.RS 4
.IP "\(bu" 4
Macro parametas dat step tha fuck up within strang literals up in tha macro body.
In traditionizzle C macro replacement takes place within strang literals,
but up in \s-1ISO C\s0 it do not.
.IP "\(bu" 4
In traditionizzle C, some preprocessor directives did not exist.
Traditionizzle preprocessors only considered a line ta be a gangbangin' finger-lickin' directive
if tha \fB#\fR rocked up in column 1 on tha line.  Therefore
\&\fB\-Wtraditional\fR warns bout directives dat traditionizzle C
understandz but ignores cuz tha \fB#\fR do not step tha fuck up as the
first characta on tha line.  It also suggests you hide directives like
\&\fB#pragma\fR not understood by traditionizzle C by indentin em.  Some
traditionizzle implementations do not recognize \fB#elif\fR, so dis option
suggests avoidin it altogether.
.IP "\(bu" 4
A function-like macro dat appears without arguments.
.IP "\(bu" 4
Da unary plus operator.
.IP "\(bu" 4
Da \fBU\fR integer constant suffix, or tha \fBF\fR or \fBL\fR floating-point
constant suffixes.  (Traditionizzle C do support tha \fBL\fR suffix on integer
constants.)  Note, these suffixes step tha fuck up in macros defined up in tha system
headaz of most modern systems, e.g. tha \fB_MIN\fR/\fB_MAX\fR macros up in \f(CW\*(C`<limits.h>\*(C'\fR.
Use of these macros up in user code might normally lead ta spurious
warnings, however \s-1GCC\s0z integrated preprocessor has enough context to
avoid warnin up in these cases.
.IP "\(bu" 4
A function declared external up in one block n' then used afta tha end of
the block.
.IP "\(bu" 4
A \f(CW\*(C`switch\*(C'\fR statement has a operand of type \f(CW\*(C`long\*(C'\fR.
.IP "\(bu" 4
A non\-\f(CW\*(C`static\*(C'\fR function declaration bigs up a \f(CW\*(C`static\*(C'\fR one.
This construct aint accepted by some traditionizzle C compilers.
.IP "\(bu" 4
Da \s-1ISO\s0 type of a integer constant has a gangbangin' finger-lickin' different width or
signednizz from its traditionizzle type.  This warnin is only issued if
the base of tha constant is ten. I aint talkin' bout chicken n' gravy biatch.  I.e. hexadecimal or octal joints, which
typically represent bit patterns, is not warned about.
.IP "\(bu" 4
Usage of \s-1ISO\s0 strang concatenation is detected.
.IP "\(bu" 4
Initialization of automatic aggregates.
.IP "\(bu" 4
Identifier conflicts wit labels.  Traditionizzle C lacks a separate
namespace fo' labels.
.IP "\(bu" 4
Initialization of unions.  If tha initializer is zero, tha warnin is
omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This is done under tha assumption dat tha zero initializer in
user code appears conditioned on e.g. \f(CW\*(C`_\|_STDC_\|_\*(C'\fR ta avoid missing
initializer warnings n' relies on default initialization ta zero up in the
traditionizzle C case.
.IP "\(bu" 4
Conversions by prototypes between fixed/floating\-point joints n' vice
versa.  Da absence of these prototypes when compilin wit traditional
C causes straight-up problems.  This be a subset of tha possible
conversion warnings; fo' tha full set use \fB\-Wtraditional\-conversion\fR.
.IP "\(bu" 4
Use of \s-1ISO C\s0 steez function definitions.  This warnin intentionally is
\&\fInot\fR issued fo' prototype declarations or variadic functions
because these \s-1ISO C\s0 features step tha fuck up in yo' code when using
libibertyz traditionizzle C compatibilitizzle macros, \f(CW\*(C`PARAMS\*(C'\fR and
\&\f(CW\*(C`VPARAMS\*(C'\fR.  This warnin be also bypassed fo' nested functions
because dat feature be already a \s-1GCC\s0 extension n' thus not relevant to
traditionizzle C compatibility.
.RE
.RS 4
.RE
.IP "\fB\-Wtraditional\-conversion\fR (C n' Objective-C only)" 4
.IX Item "-Wtraditional-conversion (C n' Objective-C only)"
Warn if a prototype causes a type conversion dat is different from what
would happen ta tha same argument up in tha absence of a prototype.  This
includes conversionz of fixed point ta floatin n' vice versa, and
conversions changin tha width or signednizz of a gangbangin' fixed-point argument
except when tha same as tha default promotion.
.IP "\fB\-Wdeclaration\-after\-statement\fR (C n' Objective-C only)" 4
.IX Item "-Wdeclaration-after-statement (C n' Objective-C only)"
Warn when a thugged-out declaration is found afta a statement up in a funky-ass block.  This
construct, known from \*(C+, was introduced wit \s-1ISO C99\s0 n' is by default
allowed up in \s-1GCC. \s0 It aint supported by \s-1ISO C90\s0 n' was not supported by
\&\s-1GCC\s0 versions before \s-1GCC 3.0.  \s0
.IP "\fB\-Wundef\fR" 4
.IX Item "-Wundef"
Warn if a undefined identifier is evaluated up in a \fB#if\fR directive.
.IP "\fB\-Wno\-endif\-labels\fR" 4
.IX Item "-Wno-endif-labels"
Do not warn whenever a \fB#else\fR or a \fB#endif\fR is followed by text.
.IP "\fB\-Wshadow\fR" 4
.IX Item "-Wshadow"
Warn whenever a local variable or type declaration shadows another variable,
parameter, type, or class member (in \*(C+), or whenever a funky-ass built-in function
is shadowed. Y'all KNOW dat shit, muthafucka! Note dat up in \*(C+, tha compila warns if a local variable
shadows a explicit typedef yo, but not if it shadows a struct/class/enum.
.IP "\fB\-Wlarger\-than=\fR\fIlen\fR" 4
.IX Item "-Wlarger-than=len"
Warn whenever a object of larger than \fIlen\fR bytes is defined.
.IP "\fB\-Wframe\-larger\-than=\fR\fIlen\fR" 4
.IX Item "-Wframe-larger-than=len"
Warn if tha size of a gangbangin' function frame is larger than \fIlen\fR bytes.
Da computation done ta determine tha stack frame size be approximate
and not conservative.
Da actual requirements may be somewhat pimped outa than \fIlen\fR
even if you do not git a warning.  In addition, any space allocated
via \f(CW\*(C`alloca\*(C'\fR, variable-length arrays, or related constructs
is not included by tha compila when determining
whether or not ta issue a warning.
.IP "\fB\-Wno\-free\-nonheap\-object\fR" 4
.IX Item "-Wno-free-nonheap-object"
Do not warn when attemptin ta free a object dat was not allocated
on tha heap.
.IP "\fB\-Wstack\-usage=\fR\fIlen\fR" 4
.IX Item "-Wstack-usage=len"
Warn if tha stack usage of a gangbangin' function might be larger than \fIlen\fR bytes.
Da computation done ta determine tha stack usage is conservative.
Any space allocated via \f(CW\*(C`alloca\*(C'\fR, variable-length arrays, or related
constructs is included by tha compila when determinin whether or not to
issue a warning.
.Sp
Da message is up in keepin wit tha output of \fB\-fstack\-usage\fR.
.RS 4
.IP "\(bu" 4
If tha stack usage is straight-up static but exceedz tha specified amount, it's:
.Sp
.Vb 1
\&          warning: stack usage is 1120 bytes
.Ve
.IP "\(bu" 4
If tha stack usage is (partly) dynamic but bounded, it's:
.Sp
.Vb 1
\&          warning: stack usage might be 1648 bytes
.Ve
.IP "\(bu" 4
If tha stack usage is (partly) dynamic n' not bounded, it's:
.Sp
.Vb 1
\&          warning: stack usage might be unbounded
.Ve
.RE
.RS 4
.RE
.IP "\fB\-Wunsafe\-loop\-optimizations\fR" 4
.IX Item "-Wunsafe-loop-optimizations"
Warn if tha loop cannot be optimized cuz tha compila cannot
assume anythang on tha boundz of tha loop indices.  With
\&\fB\-funsafe\-loop\-optimizations\fR warn if tha compila makes
such assumptions.
.IP "\fB\-Wno\-pedantic\-ms\-format\fR (MinGW targets only)" 4
.IX Item "-Wno-pedantic-ms-format (MinGW targets only)"
When used up in combination wit \fB\-Wformat\fR
and \fB\-pedantic\fR without \s-1GNU\s0 extensions, dis option
disablez tha warnings bout non-ISO \f(CW\*(C`printf\*(C'\fR / \f(CW\*(C`scanf\*(C'\fR format
width specifiers \f(CW\*(C`I32\*(C'\fR, \f(CW\*(C`I64\*(C'\fR, n' \f(CW\*(C`I\*(C'\fR used on Windows targets,
which depend on tha \s-1MS\s0 runtime.
.IP "\fB\-Wpointer\-arith\fR" 4
.IX Item "-Wpointer-arith"
Warn bout anythang dat dependz on tha \*(L"size of\*(R" a gangbangin' function type or
of \f(CW\*(C`void\*(C'\fR.  \s-1GNU C\s0 assigns these types a size of 1, for
convenience up in calculations wit \f(CW\*(C`void *\*(C'\fR pointas n' pointers
to functions.  In \*(C+, warn also when a arithmetic operation involves
\&\f(CW\*(C`NULL\*(C'\fR.  This warnin be also enabled by \fB\-Wpedantic\fR.
.IP "\fB\-Wtype\-limits\fR" 4
.IX Item "-Wtype-limits"
Warn if a cold-ass lil comparison be always legit or always false cuz of tha limited
range of tha data type yo, but do not warn fo' constant expressions.  For
example, warn if a unsigned variable is compared against zero with
\&\fB<\fR or \fB>=\fR.  This warnin be also enabled by
\&\fB\-Wextra\fR.
.IP "\fB\-Wbad\-function\-cast\fR (C n' Objective-C only)" 4
.IX Item "-Wbad-function-cast (C n' Objective-C only)"
Warn whenever a gangbangin' function call is cast ta a non-matchin type.
For example, warn if \f(CW\*(C`int malloc()\*(C'\fR is cast ta \f(CW\*(C`anythang *\*(C'\fR.
.IP "\fB\-Wc++\-compat\fR (C n' Objective-C only)" 4
.IX Item "-Wc++-compat (C n' Objective-C only)"
Warn bout \s-1ISO C\s0 constructs dat is outside of tha common subset of
\&\s-1ISO C\s0 n' \s-1ISO \*(C+,\s0 e.g. request fo' implicit conversion from
\&\f(CW\*(C`void *\*(C'\fR ta a pointa ta non\-\f(CW\*(C`void\*(C'\fR type.
.IP "\fB\-Wc++11\-compat\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Wc++11-compat ( n' Objective- only)"
Warn bout \*(C+ constructs whose meanin differs between \s-1ISO \*(C+ 1998\s0
and \s-1ISO \*(C+ 2011,\s0 e.g., identifiers up in \s-1ISO \*(C+ 1998\s0 dat is keywords
in \s-1ISO \*(C+ 2011. \s0 This warnin turns on \fB\-Wnarrowing\fR n' is
enabled by \fB\-Wall\fR.
.IP "\fB\-Wcast\-qual\fR" 4
.IX Item "-Wcast-qual"
Warn whenever a pointa is cast so as ta remove a type qualifier from
the target type.  For example, warn if a \f(CW\*(C`const char *\*(C'\fR is cast
to a ordinary \f(CW\*(C`char *\*(C'\fR.
.Sp
Also warn when bustin a cold-ass lil cast dat introduces a type qualifier up in an
unsafe way.  For example, castin \f(CW\*(C`char **\*(C'\fR ta \f(CW\*(C`const char **\*(C'\fR
is unsafe, as up in dis example:
.Sp
.Vb 6
\&          /* p is char ** value.  */
\&          const char **q = (const char **) p;
\&          /* Assignment of readonly strang ta const char * is OK.  */
\&          *q = "string";
\&          /* Now char** pointa points ta read\-only memory.  */
\&          **p = \*(Aqb\*(Aq;
.Ve
.IP "\fB\-Wcast\-align\fR" 4
.IX Item "-Wcast-align"
Warn whenever a pointa is cast such dat tha required alignment of the
target is increased. Y'all KNOW dat shit, muthafucka!  For example, warn if a \f(CW\*(C`char *\*(C'\fR is cast to
an \f(CW\*(C`int *\*(C'\fR on machines where integers can only be accessed at
two\- or four-byte boundaries.
.IP "\fB\-Wwrite\-strings\fR" 4
.IX Item "-Wwrite-strings"
When compilin C, give strang constants tha type \f(CW\*(C`const
char[\f(CIlength\f(CW]\*(C'\fR so dat copyin tha address of one tha fuck into a
non\-\f(CW\*(C`const\*(C'\fR \f(CW\*(C`char *\*(C'\fR pointa produces a warning.  These
warnings help you find at compile time code dat can try ta write
into a strang constant yo, but only if you done been straight-up careful about
usin \f(CW\*(C`const\*(C'\fR up in declarations n' prototypes.  Otherwise, it is
just a nuisance. This is why our phat asses did not make \fB\-Wall\fR request
these warnings.
.Sp
When compilin \*(C+, warn bout tha deprecated conversion from string
literals ta \f(CW\*(C`char *\*(C'\fR.  This warnin is enabled by default fo' \*(C+
programs.
.IP "\fB\-Wclobbered\fR" 4
.IX Item "-Wclobbered"
Warn fo' variablez dat might be chizzled by \fBlongjmp\fR or
\&\fBvfork\fR.  This warnin be also enabled by \fB\-Wextra\fR.
.IP "\fB\-Wconversion\fR" 4
.IX Item "-Wconversion"
Warn fo' implicit conversions dat may alta a value. This includes
conversions between real n' integer, like \f(CW\*(C`abs (x)\*(C'\fR when
\&\f(CW\*(C`x\*(C'\fR is \f(CW\*(C`double\*(C'\fR; conversions between signed n' unsigned,
like \f(CW\*(C`unsigned ui = \-1\*(C'\fR; n' conversions ta smalla types, like
\&\f(CW\*(C`sqrtf (M_PI)\*(C'\fR. Do not warn fo' explicit casts like \f(CW\*(C`abs
((int) x)\*(C'\fR n' \f(CW\*(C`ui = (unsigned) \-1\*(C'\fR, or if tha value is not
changed by tha conversion like up in \f(CW\*(C`abs (2.0)\*(C'\fR.  Warnings about
conversions between signed n' unsigned integers can be disabled by
usin \fB\-Wno\-sign\-conversion\fR.
.Sp
For \*(C+, also warn fo' confusin overload resolution fo' user-defined
conversions; n' conversions dat never bust a type conversion
operator: conversions ta \f(CW\*(C`void\*(C'\fR, tha same type, a funky-ass base class or a
reference ta em. Warnings bout conversions between signed and
unsigned integers is disabled by default up in \*(C+ unless
\&\fB\-Wsign\-conversion\fR is explicitly enabled.
.IP "\fB\-Wno\-conversion\-null\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Wno-conversion-null ( n' Objective- only)"
Do not warn fo' conversions between \f(CW\*(C`NULL\*(C'\fR n' non-pointer
types. \fB\-Wconversion\-null\fR is enabled by default.
.IP "\fB\-Wzero\-as\-null\-pointer\-constant\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Wzero-as-null-pointer-constant ( n' Objective- only)"
Warn when a literal '0' is used as null pointa constant.  This can
be useful ta facilitate tha conversion ta \f(CW\*(C`nullptr\*(C'\fR up in \*(C+11.
.IP "\fB\-Wuseless\-cast\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Wuseless-cast ( n' Objective- only)"
Warn when a expression is casted ta its own type.
.IP "\fB\-Wempty\-body\fR" 4
.IX Item "-Wempty-body"
Warn if a empty body occurs up in a \fBif\fR, \fBelse\fR or \fBdo
while\fR statement.  This warnin be also enabled by \fB\-Wextra\fR.
.IP "\fB\-Wenum\-compare\fR" 4
.IX Item "-Wenum-compare"
Warn on some cold-ass lil comparison between jointz of different enumerated types.
In \*(C+ enumeral mismatches up in conditionizzle expressions is also
diagnosed n' tha warnin is enabled by default.  In C dis warnin is 
enabled by \fB\-Wall\fR.
.IP "\fB\-Wjump\-misses\-init\fR (C, Objective-C only)" 4
.IX Item "-Wjump-misses-init (C, Objective-C only)"
Warn if a \f(CW\*(C`goto\*(C'\fR statement or a \f(CW\*(C`switch\*(C'\fR statement jumps
forward across tha initialization of a variable, or jumps backward ta a
label afta tha variable has been initialized. Y'all KNOW dat shit, muthafucka!  This only warns about
variablez dat is initialized when they is declared. Y'all KNOW dat shit, muthafucka!  This warnin is
only supported fo' C n' Objective-C; up in \*(C+ dis sort of branch be an
error up in any case.
.Sp
\&\fB\-Wjump\-misses\-init\fR is included up in \fB\-Wc++\-compat\fR.  It
can be disabled wit tha \fB\-Wno\-jump\-misses\-init\fR option.
.IP "\fB\-Wsign\-compare\fR" 4
.IX Item "-Wsign-compare"
Warn when a cold-ass lil comparison between signed n' unsigned joints could produce
an incorrect result when tha signed value is converted ta unsigned.
This warnin be also enabled by \fB\-Wextra\fR; ta git tha other warnings
of \fB\-Wextra\fR without dis warning, use \fB\-Wextra \-Wno\-sign\-compare\fR.
.IP "\fB\-Wsign\-conversion\fR" 4
.IX Item "-Wsign-conversion"
Warn fo' implicit conversions dat may chizzle tha sign of a integer
value, like assignin a signed integer expression ta a unsigned
integer variable fo' realz. An explicit cast silences tha warning. In C, this
option is enabled also by \fB\-Wconversion\fR.
.IP "\fB\-Wsizeof\-pointer\-memaccess\fR" 4
.IX Item "-Wsizeof-pointer-memaccess"
Warn fo' suspicious length parametas ta certain strang n' memory built-in
functions if tha argument uses \f(CW\*(C`sizeof\*(C'\fR.  This warnin warns e.g.
about \f(CW\*(C`memset (ptr, 0, sizeof (ptr));\*(C'\fR if \f(CW\*(C`ptr\*(C'\fR aint a array,
but a pointer, n' suggests a possible fix, or about
\&\f(CW\*(C`memcpy (&foo, ptr, sizeof (&foo));\*(C'\fR.  This warnin is enabled by
\&\fB\-Wall\fR.
.IP "\fB\-Waddress\fR" 4
.IX Item "-Waddress"
Warn bout suspicious usez of memory addresses. These include using
the address of a gangbangin' function up in a cold-ass lil conditionizzle expression, such as
\&\f(CW\*(C`void func(void); if (func)\*(C'\fR, n' comparisons against tha memory
address of a strang literal, like fuckin \f(CW\*(C`if (x == "abc")\*(C'\fR.  Such
uses typically indicate a programmer error: tha address of a gangbangin' function
always evaluates ta true, so they use up in a cold-ass lil conditionizzle usually
indicate dat tha programmer forgot tha parentheses up in a gangbangin' function
call; n' comparisons against strang literals result up in unspecified
behavior n' is not portable up in C, so they probably indicate dat the
programmer intended ta use \f(CW\*(C`strcmp\*(C'\fR.  This warnin is enabled by
\&\fB\-Wall\fR.
.IP "\fB\-Wlogical\-op\fR" 4
.IX Item "-Wlogical-op"
Warn bout suspicious usez of logical operators up in expressions.
This includes rockin logical operators up in contexts where a
bit-wise operator is likely ta be expected.
.IP "\fB\-Waggregate\-return\fR" 4
.IX Item "-Waggregate-return"
Warn if any functions dat return structures or unions is defined or
called. Y'all KNOW dat shit, muthafucka!  (In languages where you can return a array, dis also elicits
a warning.)
.IP "\fB\-Wno\-aggressive\-loop\-optimizations\fR" 4
.IX Item "-Wno-aggressive-loop-optimizations"
Warn if up in a loop wit constant number of iterations tha compila detects
undefined behavior up in some statement durin one or mo' of tha iterations.
.IP "\fB\-Wno\-attributes\fR" 4
.IX Item "-Wno-attributes"
Do not warn if a unexpected \f(CW\*(C`_\|_attribute_\|_\*(C'\fR is used, such as
unrecognized attributes, function attributes applied ta variables,
etc.  This do not stop errors fo' incorrect use of supported
attributes.
.IP "\fB\-Wno\-builtin\-macro\-redefined\fR" 4
.IX Item "-Wno-builtin-macro-redefined"
Do not warn if certain built-in macros is redefined. Y'all KNOW dat shit, muthafucka!  This suppresses
warnings fo' redefinizzle of \f(CW\*(C`_\|_TIMESTAMP_\|_\*(C'\fR, \f(CW\*(C`_\|_TIME_\|_\*(C'\fR,
\&\f(CW\*(C`_\|_DATE_\|_\*(C'\fR, \f(CW\*(C`_\|_FILE_\|_\*(C'\fR, n' \f(CW\*(C`_\|_BASE_FILE_\|_\*(C'\fR.
.IP "\fB\-Wstrict\-prototypes\fR (C n' Objective-C only)" 4
.IX Item "-Wstrict-prototypes (C n' Objective-C only)"
Warn if a gangbangin' function is declared or defined without specifyin the
argument types.  (An old-style function definizzle is permitted without
a warnin if preceded by a thugged-out declaration dat specifies tha argument
types.)
.IP "\fB\-Wold\-style\-declaration\fR (C n' Objective-C only)" 4
.IX Item "-Wold-style-declaration (C n' Objective-C only)"
Warn fo' obsolescent usages, accordin ta tha C Standard, up in a
declaration. I aint talkin' bout chicken n' gravy biatch. For example, warn if storage-class specifiers like
\&\f(CW\*(C`static\*(C'\fR is not tha straight-up original gangsta thangs up in a thugged-out declaration. I aint talkin' bout chicken n' gravy biatch.  This warning
is also enabled by \fB\-Wextra\fR.
.IP "\fB\-Wold\-style\-definition\fR (C n' Objective-C only)" 4
.IX Item "-Wold-style-definizzle (C n' Objective-C only)"
Warn if a old-style function definizzle is used. Y'all KNOW dat shit, muthafucka!  A warnin is given
even if there be a previous prototype.
.IP "\fB\-Wmissing\-parameter\-type\fR (C n' Objective-C only)" 4
.IX Item "-Wmissing-parameter-type (C n' Objective-C only)"
A function parameta is declared without a type specifier up in K&R\-style
functions:
.Sp
.Vb 1
\&        void foo(bar) { }
.Ve
.Sp
This warnin be also enabled by \fB\-Wextra\fR.
.IP "\fB\-Wmissing\-prototypes\fR (C n' Objective-C only)" 4
.IX Item "-Wmissing-prototypes (C n' Objective-C only)"
Warn if a global function is defined without a previous prototype
declaration. I aint talkin' bout chicken n' gravy biatch.  This warnin is issued even if tha definizzle itself
provides a prototype.  Use dis option ta detect global functions
that aint gots a matchin prototype declaration up in a header file.
This option aint valid fo' \*(C+ cuz all function declarations
provide prototypes n' a non-matchin declaration will declare an
overload rather than conflict wit a earlier declaration.
Use \fB\-Wmissing\-declarations\fR ta detect missin declarations up in \*(C+.
.IP "\fB\-Wmissing\-declarations\fR" 4
.IX Item "-Wmissing-declarations"
Warn if a global function is defined without a previous declaration.
Do so even if tha definizzle itself serves up a prototype.
Use dis option ta detect global functions dat is not declared in
header files.  In C, no warnings is issued fo' functions wit previous
non-prototype declarations; use \fB\-Wmissing\-prototype\fR ta detect
missin prototypes.  In \*(C+, no warnings is issued fo' function templates,
or fo' inline functions, or fo' functions up in anonymous namespaces.
.IP "\fB\-Wmissing\-field\-initializers\fR" 4
.IX Item "-Wmissing-field-initializers"
Warn if a structurez initializer has some fieldz missing.  For
example, tha followin code causes such a warning, cuz
\&\f(CW\*(C`x.h\*(C'\fR is implicitly zero:
.Sp
.Vb 2
\&        struct s { int f, g, h; };
\&        struct s x = { 3, 4 };
.Ve
.Sp
This option do not warn bout designated initializers, so tha following
modification do not trigger a warning:
.Sp
.Vb 2
\&        struct s { int f, g, h; };
\&        struct s x = { .f = 3, .g = 4 };
.Ve
.Sp
This warnin is included up in \fB\-Wextra\fR.  To git other \fB\-Wextra\fR
warnings without dis one, use \fB\-Wextra \-Wno\-missing\-field\-initializers\fR.
.IP "\fB\-Wno\-multichar\fR" 4
.IX Item "-Wno-multichar"
Do not warn if a multicharacta constant (\fB'\s-1FOOF\s0'\fR) is used.
Usually they indicate a typo up in tha userz code, as they have
implementation-defined joints, n' should not be used up in portable code.
.IP "\fB\-Wnormalized=<none|id|nfc|nfkc>\fR" 4
.IX Item "-Wnormalized=<none|id|nfc|nfkc>"
In \s-1ISO C\s0 n' \s-1ISO \*(C+,\s0 two identifiers is different if they are
different sequencez of characters.  But fuck dat shiznit yo, tha word on tha street is dat sometimes when characters
outside tha basic \s-1ASCII\s0 characta set is used, you can have two
different characta sequences dat look tha same.  To avoid mad drama,
the \s-1ISO 10646\s0 standard sets up some \fInormalization rules\fR which
when applied ensure dat two sequences dat look tha same is turned into
the same sequence.  \s-1GCC\s0 can warn you if yo ass is rockin identifiers that
have not been normalized; dis option controls dat warning.
.Sp
There is four levelz of warnin supported by \s-1GCC. \s0 Da default is
\&\fB\-Wnormalized=nfc\fR, which warns bout any identifier dat is
not up in tha \s-1ISO 10646 \*(L"C\*(R"\s0 normalized form, \fI\s-1NFC\s0\fR.  \s-1NFC\s0 is the
recommended form fo' most uses.
.Sp
Unfortunately, there be some charactas allowed up in identifiers by
\&\s-1ISO C\s0 n' \s-1ISO \*(C+\s0 that, when turned tha fuck into \s-1NFC,\s0 is not allowed up in 
identifiers.  That is, there be a no way ta use these symbols up in portable
\&\s-1ISO C\s0 or \*(C+ n' have all yo' identifiers up in \s-1NFC.
\&\s0\fB\-Wnormalized=id\fR suppresses tha warnin fo' these characters.
It be hoped dat future versionz of tha standardz involved will erect
this, which is why dis option aint tha default.
.Sp
Yo ass can switch tha warnin off fo' all charactas by writing
\&\fB\-Wnormalized=none\fR.  Yo ass should only do dis if you
are rockin some other normalization scheme (like \*(L"D\*(R"), cuz
otherwise you can easily create bugs dat is literally impossible ta see.
.Sp
Some charactas up in \s-1ISO 10646\s0 have distinct meanings but look identical
in some fonts or display methodologies, especially once formattin has
been applied. Y'all KNOW dat shit, muthafucka!  For instizzle \f(CW\*(C`\eu207F\*(C'\fR, \*(L"\s-1SUPERSCRIPT LATIN SMALL
LETTER N\*(R",\s0 displays just like a regular \f(CW\*(C`n\*(C'\fR dat has been
placed up in a superscript.  \s-1ISO 10646\s0 defines tha \fI\s-1NFKC\s0\fR
normalization scheme ta convert all these tha fuck into a standard form as
well, n' \s-1GCC\s0 warns if yo' code aint up in \s-1NFKC\s0 if you use
\&\fB\-Wnormalized=nfkc\fR.  This warnin is comparable ta warning
about every last muthafuckin identifier dat gotz nuff tha letta O cuz it might be
confused wit tha digit 0, n' so aint tha default yo, but may be
useful as a local codin convention if tha programmin environment 
cannot be fixed ta display these charactas distinctly.
.IP "\fB\-Wno\-deprecated\fR" 4
.IX Item "-Wno-deprecated"
Do not warn bout usage of deprecated features.
.IP "\fB\-Wno\-deprecated\-declarations\fR" 4
.IX Item "-Wno-deprecated-declarations"
Do not warn bout usez of functions,
variables, n' types marked as deprecated by rockin tha \f(CW\*(C`deprecated\*(C'\fR
attribute.
.IP "\fB\-Wno\-overflow\fR" 4
.IX Item "-Wno-overflow"
Do not warn bout compile-time overflow up in constant expressions.
.IP "\fB\-Woverride\-init\fR (C n' Objective-C only)" 4
.IX Item "-Woverride-init (C n' Objective-C only)"
Warn if a initialized field without side effects is overridden when
usin designated initializers.
.Sp
This warnin is included up in \fB\-Wextra\fR.  To git other
\&\fB\-Wextra\fR warnings without dis one, use \fB\-Wextra
\&\-Wno\-override\-init\fR.
.IP "\fB\-Wpacked\fR" 4
.IX Item "-Wpacked"
Warn if a structure is given tha packed attribute yo, but tha packed
attribute has no effect on tha layout or size of tha structure.
Such structures may be mis-aligned fo' lil benefit.  For
instance, up in dis code, tha variable \f(CW\*(C`f.x\*(C'\fR up in \f(CW\*(C`struct bar\*(C'\fR
is misaligned even though \f(CW\*(C`struct bar\*(C'\fR do not itself
have tha packed attribute:
.Sp
.Vb 8
\&        struct foo {
\&          int x;
\&          char a, b, c, d;
\&        } _\|_attribute_\|_((packed));
\&        struct bar {
\&          char z;
\&          struct foo f;
\&        };
.Ve
.IP "\fB\-Wpacked\-bitfield\-compat\fR" 4
.IX Item "-Wpacked-bitfield-compat"
Da 4.1, 4.2 n' 4.3 seriez of \s-1GCC\s0 ignore tha \f(CW\*(C`packed\*(C'\fR attribute
on bit-fieldz of type \f(CW\*(C`char\*(C'\fR.  This has been fixed up in \s-1GCC 4.4\s0 but
the chizzle can lead ta differences up in tha structure layout.  \s-1GCC\s0
informs you when tha offset of such a gangbangin' field has chizzled up in \s-1GCC 4.4.\s0
For example there is no longer a 4\-bit paddin between field \f(CW\*(C`a\*(C'\fR
and \f(CW\*(C`b\*(C'\fR up in dis structure:
.Sp
.Vb 5
\&        struct foo
\&        {
\&          char a:4;
\&          char b:8;
\&        } _\|_attribute_\|_ ((packed));
.Ve
.Sp
This warnin is enabled by default.  Use
\&\fB\-Wno\-packed\-bitfield\-compat\fR ta disable dis warning.
.IP "\fB\-Wpadded\fR" 4
.IX Item "-Wpadded"
Warn if paddin is included up in a structure, either ta align a element
of tha structure or ta align tha whole structure.  Sometimes when this
happens it is possible ta rearrange tha fieldz of tha structure to
reduce tha paddin n' so make tha structure smaller.
.IP "\fB\-Wredundant\-decls\fR" 4
.IX Item "-Wredundant-decls"
Warn if anythang is declared mo' than once up in tha same scope, even in
cases where multiple declaration is valid n' chizzlez nothing.
.IP "\fB\-Wnested\-externs\fR (C n' Objective-C only)" 4
.IX Item "-Wnested-externs (C n' Objective-C only)"
Warn if a \f(CW\*(C`extern\*(C'\fR declaration is encountered within a gangbangin' function.
.IP "\fB\-Wno\-inherited\-variadic\-ctor\fR" 4
.IX Item "-Wno-inherited-variadic-ctor"
Suppress warnings bout use of \*(C+11 inheritin constructors when the
base class inherited from has a C variadic constructor; tha warnin is
on by default cuz tha ellipsis aint inherited.
.IP "\fB\-Winline\fR" 4
.IX Item "-Winline"
Warn if a gangbangin' function dat is declared as inline cannot be inlined.
Even wit dis option, tha compila do not warn bout failures to
inline functions declared up in system headers.
.Sp
Da compila uses a variety of heuristics ta determine whether or not
to inline a gangbangin' function. I aint talkin' bout chicken n' gravy biatch.  For example, tha compila takes tha fuck into account
the size of tha function bein inlined n' tha amount of inlining
that has already been done up in tha current function. I aint talkin' bout chicken n' gravy biatch.  Therefore,
seemingly insignificant chizzlez up in tha source program can cause the
warnings produced by \fB\-Winline\fR ta step tha fuck up or disappear.
.IP "\fB\-Wno\-invalid\-offsetof\fR (\*(C+ n' Objective\-\*(C+ only)" 4
.IX Item "-Wno-invalid-offsetof ( n' Objective- only)"
Suppress warnings from applyin tha \fBoffsetof\fR macro ta a non-POD
type.  Accordin ta tha 1998 \s-1ISO \*(C+\s0 standard, applyin \fBoffsetof\fR
to a non-POD type is undefined. Y'all KNOW dat shit, muthafucka!  In existin \*(C+ implementations,
however, \fBoffsetof\fR typically gives meaningful thangs up in dis biatch even when
applied ta certain kindz of non-POD types (like fuckin a simple
\&\fBstruct\fR dat fails ta be a \s-1POD\s0 type only by virtue of havin a
constructor).  This flag is fo' playas whoz ass is aware dat they are
writin nonportable code n' whoz ass have deliberately chosen ta ignore the
warnin bout dat shit.
.Sp
Da restrictions on \fBoffsetof\fR may be chillaxed up in a gangbangin' future version
of tha \*(C+ standard.
.IP "\fB\-Wno\-int\-to\-pointer\-cast\fR" 4
.IX Item "-Wno-int-to-pointer-cast"
Suppress warnings from casts ta pointa type of a integer of a
different size. In \*(C+, castin ta a pointa type of smalla size is
an error. Shiiit, dis aint no joke. \fBWint-to-pointer-cast\fR is enabled by default.
.IP "\fB\-Wno\-pointer\-to\-int\-cast\fR (C n' Objective-C only)" 4
.IX Item "-Wno-pointer-to-int-cast (C n' Objective-C only)"
Suppress warnings from casts from a pointa ta a integer type of a
different size.
.IP "\fB\-Winvalid\-pch\fR" 4
.IX Item "-Winvalid-pch"
Warn if a precompiled header is found in
the search path but can't be used.
.IP "\fB\-Wlong\-long\fR" 4
.IX Item "-Wlong-long"
Warn if \fBlong long\fR type is used. Y'all KNOW dat shit, muthafucka!  This is enabled by either
\&\fB\-Wpedantic\fR or \fB\-Wtraditional\fR up in \s-1ISO C90\s0 n' \*(C+98
modes.  To inhibit tha warnin lyrics, use \fB\-Wno\-long\-long\fR.
.IP "\fB\-Wvariadic\-macros\fR" 4
.IX Item "-Wvariadic-macros"
Warn if variadic macros is used up in pedantic \s-1ISO C90\s0 mode, or tha \s-1GNU\s0
alternate syntax when up in pedantic \s-1ISO C99\s0 mode.  This is default.
To inhibit tha warnin lyrics, use \fB\-Wno\-variadic\-macros\fR.
.IP "\fB\-Wvarargs\fR" 4
.IX Item "-Wvarargs"
Warn upon questionable usage of tha macros used ta handle variable
arguments like \fBva_start\fR.  This is default.  To inhibit the
warnin lyrics, use \fB\-Wno\-varargs\fR.
.IP "\fB\-Wvector\-operation\-performance\fR" 4
.IX Item "-Wvector-operation-performance"
Warn if vector operation aint implemented via \s-1SIMD\s0 capabilitizzlez of the
architecture.  Mainly useful fo' tha performizzle tuning.
Vector operation can be implemented \f(CW\*(C`piecewise\*(C'\fR, which means dat the
scalar operation is performed on every last muthafuckin vector element; 
\&\f(CW\*(C`in parallel\*(C'\fR, which means dat tha vector operation is implemented
usin scalarz of wider type, which normally is mo' performizzle efficient;
and \f(CW\*(C`as a single scalar\*(C'\fR, which means dat vector fits tha fuck into a
scalar type.
.IP "\fB\-Wno\-virtual\-move\-assign\fR" 4
.IX Item "-Wno-virtual-move-assign"
Suppress warnings bout inheritin from a virtual base wit a
non-trivial \*(C+11 move assignment operator. Shiiit, dis aint no joke.  This is fucked up cuz
if tha virtual base is reachable along mo' than one path, it will be
moved multiple times, which can mean both objects end up in the
moved-from state.  If tha move assignment operator is freestyled ta avoid
movin from a moved-from object, dis warnin can be disabled.
.IP "\fB\-Wvla\fR" 4
.IX Item "-Wvla"
Warn if variable length array is used up in tha code.
\&\fB\-Wno\-vla\fR prevents tha \fB\-Wpedantic\fR warnin of
the variable length array.
.IP "\fB\-Wvolatile\-register\-var\fR" 4
.IX Item "-Wvolatile-register-var"
Warn if a regista variable is declared volatile.  Da volatile
modifier do not inhibit all optimizations dat may eliminizzle reads
and/or writes ta regista variables.  This warnin is enabled by
\&\fB\-Wall\fR.
.IP "\fB\-Wdisabled\-optimization\fR" 4
.IX Item "-Wdisabled-optimization"
Warn if a axed optimization pass is disabled. Y'all KNOW dat shit, muthafucka!  This warnin do
not generally indicate dat there be anythang wack wit yo' code; it
merely indicates dat \s-1GCC\s0z optimizers is unable ta handle tha code
effectively.  Often, tha problem is dat yo' code is too big-ass or too
complex; \s-1GCC\s0 refuses ta optimize programs when tha optimization
itself is likely ta take inordinizzle amountz of time.
.IP "\fB\-Wpointer\-sign\fR (C n' Objective-C only)" 4
.IX Item "-Wpointer-sign (C n' Objective-C only)"
Warn fo' pointa argument passin or assignment wit different signedness.
This option is only supported fo' C n' Objective-C.  It be implied by
\&\fB\-Wall\fR n' by \fB\-Wpedantic\fR, which can be disabled with
\&\fB\-Wno\-pointer\-sign\fR.
.IP "\fB\-Wstack\-protector\fR" 4
.IX Item "-Wstack-protector"
This option is only actizzle when \fB\-fstack\-protector\fR be active.  It
warns bout functions dat is not protected against stack smashing.
.IP "\fB\-Wno\-mudflap\fR" 4
.IX Item "-Wno-mudflap"
Suppress warnings bout constructs dat cannot be instrumented by
\&\fB\-fmudflap\fR.
.IP "\fB\-Woverlength\-strings\fR" 4
.IX Item "-Woverlength-strings"
Warn bout strang constants dat is longer than tha \*(L"minimum
maximum\*(R" length specified up in tha C standard. Y'all KNOW dat shit, muthafucka!  Modern compilers
generally allow strang constants dat is much longer than the
standardz minimum limit yo, but straight-up portable programs should avoid
usin longer strings.
.Sp
Da limit applies \fIafter\fR strang constant concatenation, n' do
not count tha trailin \s-1NUL. \s0 In C90, tha limit was 509 characters; in
C99, dat shiznit was raised ta 4095.  \*(C+98 do not specify a normative
minimum maximum, so our phat asses do not diagnose overlength strings up in \*(C+.
.Sp
This option is implied by \fB\-Wpedantic\fR, n' can be disabled with
\&\fB\-Wno\-overlength\-strings\fR.
.IP "\fB\-Wunsuffixed\-float\-constants\fR (C n' Objective-C only)" 4
.IX Item "-Wunsuffixed-float-constants (C n' Objective-C only)"
Issue a warnin fo' any floatin constant dat do not have
a suffix.  When used together wit \fB\-Wsystem\-headers\fR it
warns bout such constants up in system header files.  This can be useful
when preparin code ta use wit tha \f(CW\*(C`FLOAT_CONST_DECIMAL64\*(C'\fR pragma
from tha decimal floating-point extension ta C99.
.SS "Options fo' Debuggin Yo crazy-ass Program or \s-1GCC\s0"
.IX Subsection "Options fo' Debuggin Yo crazy-ass Program or GCC"
\&\s-1GCC\s0 has various special options dat is used fo' debugging
either yo' program or \s-1GCC:\s0
.IP "\fB\-g\fR" 4
.IX Item "-g"
Produce debuggin shiznit up in tha operatin systemz natizzle format
(stabs, \s-1COFF, XCOFF,\s0 or \s-1DWARF 2\s0).  \s-1GDB\s0 can work wit dis debugging
information.
.Sp
On most systems dat use stabs format, \fB\-g\fR enablez use of extra
debuggin shiznit dat only \s-1GDB\s0 can use; dis extra shiznit
makes debuggin work betta up in \s-1GDB\s0 but probably make other debuggers
crash or
refuse ta read tha program.  If you wanna control fo' certain whether
to generate tha extra shiznit, use \fB\-gstabs+\fR, \fB\-gstabs\fR,
\&\fB\-gxcoff+\fR, \fB\-gxcoff\fR, or \fB\-gvms\fR (see below).
.Sp
\&\s-1GCC\s0 allows you ta use \fB\-g\fR with
\&\fB\-O\fR.  Da shortcuts taken by optimized code may occasionally
produce surprisin thangs up in dis biatch: some variablez you declared may not exist
at all; flow of control may briefly move where you did not expect it;
some statements may not be executed cuz they compute constant
results or they joints is already at hand; some statements may
execute up in different places cuz they done been moved outta loops.
.Sp
Nevertheless it proves possible ta debug optimized output.  This makes
it reasonable ta use tha optimizer fo' programs dat might have bugs.
.Sp
Da followin options is useful when \s-1GCC\s0 is generated wit the
capabilitizzle fo' mo' than one debuggin format.
.IP "\fB\-gsplit\-dwarf\fR" 4
.IX Item "-gsplit-dwarf"
Separate as much dwarf debuggin shiznit as possible tha fuck into a
separate output file wit tha extension .dwo.  This option allows
the build system ta avoid linkin filez wit debug shiznit. I aint talkin' bout chicken n' gravy biatch.  To
be useful, dis option requires a thugged-out debugger capable of readin .dwo
files.
.IP "\fB\-ggdb\fR" 4
.IX Item "-ggdb"
Produce debuggin shiznit fo' use by \s-1GDB. \s0 This means ta use the
most expressive format available (\s-1DWARF 2,\s0 stabs, or tha natizzle format
if neither of dem is supported), includin \s-1GDB\s0 extensions if at all
possible.
.IP "\fB\-gpubnames\fR" 4
.IX Item "-gpubnames"
Generate dwarf .debug_pubnames n' .debug_pubtypes sections.
.IP "\fB\-gstabs\fR" 4
.IX Item "-gstabs"
Produce debuggin shiznit up in stabs format (if dat is supported),
without \s-1GDB\s0 extensions.  This is tha format used by \s-1DBX\s0 on most \s-1BSD\s0
systems.  On \s-1MIPS,\s0 Alpha n' System V Release 4 systems dis option
produces stabs debuggin output dat aint understood by \s-1DBX\s0 or \s-1SDB.\s0
On System V Release 4 systems dis option requires tha \s-1GNU\s0 assembler.
.IP "\fB\-feliminate\-unused\-debug\-symbols\fR" 4
.IX Item "-feliminate-unused-debug-symbols"
Produce debuggin shiznit up in stabs format (if dat is supported),
for only symbols dat is straight-up used.
.IP "\fB\-femit\-class\-debug\-always\fR" 4
.IX Item "-femit-class-debug-always"
Instead of emittin debuggin shiznit fo' a \*(C+ class up in only one
object file, emit it up in all object filez rockin tha class.  This option
should be used only wit debuggers dat is unable ta handle tha way \s-1GCC\s0
normally emits debuggin shiznit fo' classes cuz rockin this
option increases tha size of debuggin shiznit by as much as a
factor of two.
.IP "\fB\-fdebug\-types\-section\fR" 4
.IX Item "-fdebug-types-section"
When rockin \s-1DWARF\s0 Version 4 or higher, type DIEs can be put into
their own \f(CW\*(C`.debug_types\*(C'\fR section instead of makin dem part of the
\&\f(CW\*(C`.debug_info\*(C'\fR section. I aint talkin' bout chicken n' gravy biatch.  It be mo' efficient ta put dem up in a separate
comdat sections since tha linker can then remove duplicates.
But not all \s-1DWARF\s0 thugs support \f(CW\*(C`.debug_types\*(C'\fR sections yet
and on some objects \f(CW\*(C`.debug_types\*(C'\fR produces larger instead of smaller
debuggin shiznit.
.IP "\fB\-gstabs+\fR" 4
.IX Item "-gstabs+"
Produce debuggin shiznit up in stabs format (if dat is supported),
usin \s-1GNU\s0 extensions understood only by tha \s-1GNU\s0 debugger (\s-1GDB\s0).  The
use of these extensions is likely ta make other debuggers crash or
refuse ta read tha program.
.IP "\fB\-gcoff\fR" 4
.IX Item "-gcoff"
Produce debuggin shiznit up in \s-1COFF\s0 format (if dat is supported).
This is tha format used by \s-1SDB\s0 on most System V systems prior to
System V Release 4.
.IP "\fB\-gxcoff\fR" 4
.IX Item "-gxcoff"
Produce debuggin shiznit up in \s-1XCOFF\s0 format (if dat is supported).
This is tha format used by tha \s-1DBX\s0 debugger on \s-1IBM RS/6000\s0 systems.
.IP "\fB\-gxcoff+\fR" 4
.IX Item "-gxcoff+"
Produce debuggin shiznit up in \s-1XCOFF\s0 format (if dat is supported),
usin \s-1GNU\s0 extensions understood only by tha \s-1GNU\s0 debugger (\s-1GDB\s0).  The
use of these extensions is likely ta make other debuggers crash or
refuse ta read tha program, n' may cause assemblaz other than tha \s-1GNU\s0
assembla (\s-1GAS\s0) ta fail wit a error.
.IP "\fB\-gdwarf\-\fR\fIversion\fR" 4
.IX Item "-gdwarf-version"
Produce debuggin shiznit up in \s-1DWARF\s0 format (if dat is supported).
Da value of \fIversion\fR may be either 2, 3 or 4; tha default version
for most targets is 4.
.Sp
Note dat wit \s-1DWARF\s0 Version 2, some ports require n' always
use some non-conflictin \s-1DWARF 3\s0 extensions up in tha unwind tables.
.Sp
Version 4 may require \s-1GDB 7.0\s0 n' \fB\-fvar\-tracking\-assignments\fR
for maximum benefit.
.IP "\fB\-grecord\-gcc\-switches\fR" 4
.IX Item "-grecord-gcc-switches"
This switch causes tha command-line options used ta invoke the
compila dat may affect code generation ta be appended ta the
DW_AT_producer attribute up in \s-1DWARF\s0 debuggin shiznit. I aint talkin' bout chicken n' gravy biatch.  Da options
are concatenated wit spaces separatin dem from each other n' from
the compila version. I aint talkin' bout chicken n' gravy biatch.  See also \fB\-frecord\-gcc\-switches\fR fo' another
way of storin compila options tha fuck into tha object file.  This is tha default.
.IP "\fB\-gno\-record\-gcc\-switches\fR" 4
.IX Item "-gno-record-gcc-switches"
Disallow appendin command-line options ta tha DW_AT_producer attribute
in \s-1DWARF\s0 debuggin shiznit.
.IP "\fB\-gstrict\-dwarf\fR" 4
.IX Item "-gstrict-dwarf"
Disallow rockin extensionz of lata \s-1DWARF\s0 standard version than selected
with \fB\-gdwarf\-\fR\fIversion\fR.  On most targets rockin non-conflicting
\&\s-1DWARF\s0 extensions from lata standard versions be allowed.
.IP "\fB\-gno\-strict\-dwarf\fR" 4
.IX Item "-gno-strict-dwarf"
Allow rockin extensionz of lata \s-1DWARF\s0 standard version than selected with
\&\fB\-gdwarf\-\fR\fIversion\fR.
.IP "\fB\-gvms\fR" 4
.IX Item "-gvms"
Produce debuggin shiznit up in Alpha/VMS debug format (if dat is
supported).  This is tha format used by \s-1DEBUG\s0 on Alpha/VMS systems.
.IP "\fB\-g\fR\fIlevel\fR" 4
.IX Item "-glevel"
.PD 0
.IP "\fB\-ggdb\fR\fIlevel\fR" 4
.IX Item "-ggdblevel"
.IP "\fB\-gstabs\fR\fIlevel\fR" 4
.IX Item "-gstabslevel"
.IP "\fB\-gcoff\fR\fIlevel\fR" 4
.IX Item "-gcofflevel"
.IP "\fB\-gxcoff\fR\fIlevel\fR" 4
.IX Item "-gxcofflevel"
.IP "\fB\-gvms\fR\fIlevel\fR" 4
.IX Item "-gvmslevel"
.PD
Request debuggin shiznit n' also use \fIlevel\fR ta specify how
much shiznit. I aint talkin' bout chicken n' gravy biatch.  Da default level is 2.
.Sp
Level 0 produces no debug shiznit at all.  Thus, \fB\-g0\fR negates
\&\fB\-g\fR.
.Sp
Level 1 produces minimal shiznit, enough fo' makin backtraces in
partz of tha program dat you don't plan ta debug.  This includes
descriptionz of functions n' external variablez yo, but no shiznit
about local variablez n' no line numbers.
.Sp
Level 3 includes extra shiznit, like fuckin all tha macro definitions
present up in tha program.  Some debuggers support macro expansion when
you use \fB\-g3\fR.
.Sp
\&\fB\-gdwarf\-2\fR do not accept a cold-ass lil concatenated debug level, cuz
\&\s-1GCC\s0 used ta support a option \fB\-gdwarf\fR dat meant ta generate
debug shiznit up in version 1 of tha \s-1DWARF\s0 format (which is hella
different from version 2), n' it would done been too confusing.  That
debug format is long obsolete yo, but tha option cannot be chizzled now, nahmeean?
Instead use a additionizzle \fB\-g\fR\fIlevel\fR option ta chizzle the
debug level fo' \s-1DWARF.\s0
.IP "\fB\-gtoggle\fR" 4
.IX Item "-gtoggle"
Turn off generation of debug info, if leavin up dis option
generates it, or turn it on at level 2 otherwise.  Da posizzle of this
argument up in tha command line do not matter; it takes effect afta all
other options is processed, n' it do so only once, no matta how
many times it is given. I aint talkin' bout chicken n' gravy biatch.  This is mainly intended ta be used with
\&\fB\-fcompare\-debug\fR.
.IP "\fB\-fsanitize=address\fR" 4
.IX Item "-fsanitize=address"
Enable AddressSanitizer, a gangbangin' fast memory error detector.
Memory access instructions is ghon be instrumented ta detect
out-of-boundz n' use-after-free bugs.
See <\fBhttp://code.google.com/p/address\-sanitizer/\fR> fo' mo' details.
.IP "\fB\-fsanitize=thread\fR" 4
.IX Item "-fsanitize=thread"
Enable ThreadSanitizer, a gangbangin' fast data race detector.
Memory access instructions is ghon be instrumented ta detect
data race bugs.
See <\fBhttp://code.google.com/p/data\-race\-test/wiki/ThreadSanitizer\fR> fo' mo' details.
.IP "\fB\-fdump\-final\-insns\fR[\fB=\fR\fIfile\fR]" 4
.IX Item "-fdump-final-insns[=file]"
Dump tha final internal representation (\s-1RTL\s0) ta \fIfile\fR.  If the
optionizzle argument is omitted (or if \fIfile\fR is \f(CW\*(C`.\*(C'\fR), tha name
of tha dump file is determined by appendin \f(CW\*(C`.gkd\*(C'\fR ta the
compilation output file name.
.IP "\fB\-fcompare\-debug\fR[\fB=\fR\fIopts\fR]" 4
.IX Item "-fcompare-debug[=opts]"
If no error occurs durin compilation, run tha compila a second time,
addin \fIopts\fR n' \fB\-fcompare\-debug\-second\fR ta tha arguments
passed ta tha second compilation. I aint talkin' bout chicken n' gravy biatch.  Dump tha final internal
representation up in both compilations, n' print a error if they differ.
.Sp
If tha equal sign is omitted, tha default \fB\-gtoggle\fR is used.
.Sp
Da environment variable \fB\s-1GCC_COMPARE_DEBUG\s0\fR, if defined, non-empty
and nonzero, implicitly enablez \fB\-fcompare\-debug\fR.  If
\&\fB\s-1GCC_COMPARE_DEBUG\s0\fR is defined ta a strang startin wit a thugged-out dash,
then it is used fo' \fIopts\fR, otherwise tha default \fB\-gtoggle\fR
is used.
.Sp
\&\fB\-fcompare\-debug=\fR, wit tha equal sign but without \fIopts\fR,
is equivalent ta \fB\-fno\-compare\-debug\fR, which disablez tha dumping
of tha final representation n' tha second compilation, preventin even
\&\fB\s-1GCC_COMPARE_DEBUG\s0\fR from takin effect.
.Sp
To verify full coverage durin \fB\-fcompare\-debug\fR testing, set
\&\fB\s-1GCC_COMPARE_DEBUG\s0\fR ta say \fB\-fcompare\-debug\-not\-overridden\fR,
which \s-1GCC\s0 rejects as a invalid option up in any actual compilation
(rather than preprocessing, assembly or linking).  To git just a
warning, settin \fB\s-1GCC_COMPARE_DEBUG\s0\fR ta \fB\-w%n\-fcompare\-debug
not overridden\fR will do.
.IP "\fB\-fcompare\-debug\-second\fR" 4
.IX Item "-fcompare-debug-second"
This option is implicitly passed ta tha compila fo' tha second
compilation axed by \fB\-fcompare\-debug\fR, along wit options to
silence warnings, n' omittin other options dat would cause
side-effect compila outputs ta filez or ta tha standard output.  Dump
filez n' preserved temporary filez is renamed so as ta contain the
\&\f(CW\*(C`.gk\*(C'\fR additionizzle extension durin tha second compilation, ta avoid
overwritin dem generated by tha first.
.Sp
When dis option is passed ta tha compila driver, it causes the
\&\fIfirst\fR compilation ta be skipped, which make it useful fo' lil
other than debuggin tha compila proper.
.IP "\fB\-feliminate\-dwarf2\-dups\fR" 4
.IX Item "-feliminate-dwarf2-dups"
Compress \s-1DWARF 2\s0 debuggin shiznit by eliminatin duplicated
information bout each symbol.  This option only make sense when
generatin \s-1DWARF 2\s0 debuggin shiznit wit \fB\-gdwarf\-2\fR.
.IP "\fB\-femit\-struct\-debug\-baseonly\fR" 4
.IX Item "-femit-struct-debug-baseonly"
Emit debug shiznit fo' struct-like types
only when tha base name of tha compilation source file
matches tha base name of file up in which tha struct is defined.
.Sp
This option substantially reduces tha size of debuggin shiznit,
but at dope potential loss up in type shiznit ta tha debugger.
See \fB\-femit\-struct\-debug\-reduced\fR fo' a less aggressive option.
See \fB\-femit\-struct\-debug\-detailed\fR fo' mo' detailed control.
.Sp
This option works only wit \s-1DWARF 2.\s0
.IP "\fB\-femit\-struct\-debug\-reduced\fR" 4
.IX Item "-femit-struct-debug-reduced"
Emit debug shiznit fo' struct-like types
only when tha base name of tha compilation source file
matches tha base name of file up in which tha type is defined,
unless tha struct be a template or defined up in a system header.
.Sp
This option hella reduces tha size of debuggin shiznit,
with some potential loss up in type shiznit ta tha debugger.
See \fB\-femit\-struct\-debug\-baseonly\fR fo' a mo' aggressive option.
See \fB\-femit\-struct\-debug\-detailed\fR fo' mo' detailed control.
.Sp
This option works only wit \s-1DWARF 2.\s0
.IP "\fB\-femit\-struct\-debug\-detailed\fR[\fB=\fR\fIspec-list\fR]" 4
.IX Item "-femit-struct-debug-detailed[=spec-list]"
Specify tha struct-like types
for which tha compila generates debug shiznit.
Da intent is ta reduce duplicate struct debug shiznit
between different object filez within tha same program.
.Sp
This option be a thugged-out detailed version of
\&\fB\-femit\-struct\-debug\-reduced\fR n' \fB\-femit\-struct\-debug\-baseonly\fR,
which serves fo' most needs.
.Sp
A justification has tha syntax[\fBdir:\fR|\fBind:\fR][\fBord:\fR|\fBgen:\fR](\fBany\fR|\fBsys\fR|\fBbase\fR|\fBnone\fR)
.Sp
Da optionizzle first word limits tha justification to
structs dat is used directly (\fBdir:\fR) or used indirectly (\fBind:\fR).
A struct type is used directly when it is tha type of a variable, member.
Indirect uses arise all up in pointas ta structs.
That is, when use of a incomplete struct is valid, tha use is indirect.
An example is
\&\fBstruct one direct; struct two * indirect;\fR.
.Sp
Da optionizzle second word limits tha justification to
ordinary structs (\fBord:\fR) or generic structs (\fBgen:\fR).
Generic structs is a lil' bit fucked up ta explain.
For \*(C+, these is non-explicit specializationz of template classes,
or non-template classes within tha above.
Other programmin languages have generics,
but \fB\-femit\-struct\-debug\-detailed\fR do not yet implement em.
.Sp
Da third word specifies tha source filez fo' them
structs fo' which tha compila should emit debug shiznit.
Da joints \fBnone\fR n' \fBany\fR have tha aiiight meaning.
Da value \fBbase\fR means that
the base of name of tha file up in which tha type declaration appears
must match tha base of tha name of tha main compilation file.
In practice, dis means dat when compilin \fIfoo.c\fR, debug shiznit
is generated fo' types declared up in dat file n' \fIfoo.h\fR,
but not other header files.
Da value \fBsys\fR means dem types satisfyin \fBbase\fR
or declared up in system or compila headers.
.Sp
Yo ass may need ta experiment ta determine tha dopest settings fo' yo' application.
.Sp
Da default is \fB\-femit\-struct\-debug\-detailed=all\fR.
.Sp
This option works only wit \s-1DWARF 2.\s0
.IP "\fB\-fno\-merge\-debug\-strings\fR" 4
.IX Item "-fno-merge-debug-strings"
Direct tha linker ta not merge together strings up in tha debugging
information dat is identical up in different object files.  Mergin is
not supported by all assemblaz or linkers.  Mergin decreases tha size
of tha debug shiznit up in tha output file all up in tha cost of increasing
link processin time.  Mergin is enabled by default.
.IP "\fB\-fdebug\-prefix\-map=\fR\fIold\fR\fB=\fR\fInew\fR" 4
.IX Item "-fdebug-prefix-map=old=new"
When compilin filez up in directory \fI\fIold\fI\fR, record debugging
information describin dem as up in \fI\fInew\fI\fR instead.
.IP "\fB\-fno\-dwarf2\-cfi\-asm\fR" 4
.IX Item "-fno-dwarf2-cfi-asm"
Emit \s-1DWARF 2\s0 unwind info as compila generated \f(CW\*(C`.eh_frame\*(C'\fR section
instead of rockin \s-1GAS \s0\f(CW\*(C`.cfi_*\*(C'\fR directives.
.IP "\fB\-p\fR" 4
.IX Item "-p"
Generate extra code ta write flava shiznit suitable fo' the
analysis program \fBprof\fR.  Yo ass must use dis option when compiling
the source filez you want data about, n' you must also use it when
linking.
.IP "\fB\-pg\fR" 4
.IX Item "-pg"
Generate extra code ta write flava shiznit suitable fo' the
analysis program \fBgprof\fR.  Yo ass must use dis option when compiling
the source filez you want data about, n' you must also use it when
linking.
.IP "\fB\-Q\fR" 4
.IX Item "-Q"
Makes tha compila print up each function name as it is compiled, and
print some statistics bout each pass when it finishes.
.IP "\fB\-ftime\-report\fR" 4
.IX Item "-ftime-report"
Makes tha compila print some statistics bout tha time consumed by each
pass when it finishes.
.IP "\fB\-fmem\-report\fR" 4
.IX Item "-fmem-report"
Makes tha compila print some statistics bout permanent memory
allocation when it finishes.
.IP "\fB\-fmem\-report\-wpa\fR" 4
.IX Item "-fmem-report-wpa"
Makes tha compila print some statistics bout permanent memory
allocation fo' tha \s-1WPA\s0 phase only.
.IP "\fB\-fpre\-ipa\-mem\-report\fR" 4
.IX Item "-fpre-ipa-mem-report"
.PD 0
.IP "\fB\-fpost\-ipa\-mem\-report\fR" 4
.IX Item "-fpost-ipa-mem-report"
.PD
Makes tha compila print some statistics bout permanent memory
allocation before or afta interprocedural optimization.
.IP "\fB\-fprofile\-report\fR" 4
.IX Item "-fprofile-report"
Makes tha compila print some statistics bout consistency of the
(estimated) flava n' effect of individual passes.
.IP "\fB\-fstack\-usage\fR" 4
.IX Item "-fstack-usage"
Makes tha compila output stack usage shiznit fo' tha program, on a
per-function basis.  Da filename fo' tha dump is made by appending
\&\fI.su\fR ta tha \fIauxname\fR.  \fIauxname\fR is generated from tha name of
the output file, if explicitly specified n' it aint a executable,
otherwise it is tha basename of tha source file.  An entry is made up
of three fields:
.RS 4
.IP "\(bu" 4
Da name of tha function.
.IP "\(bu" 4
A number of bytes.
.IP "\(bu" 4
One or mo' qualifiers: \f(CW\*(C`static\*(C'\fR, \f(CW\*(C`dynamic\*(C'\fR, \f(CW\*(C`bounded\*(C'\fR.
.RE
.RS 4
.Sp
Da qualifier \f(CW\*(C`static\*(C'\fR means dat tha function manipulates tha stack
statically: a gangbangin' fixed number of bytes is allocated fo' tha frame on function
entry n' busted out on function exit; no stack adjustments is otherwise made
in tha function. I aint talkin' bout chicken n' gravy biatch.  Da second field is dis fixed number of bytes.
.Sp
Da qualifier \f(CW\*(C`dynamic\*(C'\fR means dat tha function manipulates tha stack
dynamically: up in addizzle ta tha static allocation busted lyrics bout above, stack
adjustments is made up in tha body of tha function, fo' example ta push/pop
arguments round function calls.  If tha qualifier \f(CW\*(C`bounded\*(C'\fR be also
present, tha amount of these adjustments is bounded at compile time and
the second field be a upper bound of tha total amount of stack used by
the function. I aint talkin' bout chicken n' gravy biatch.  If it aint present, tha amount of these adjustments is
not bounded at compile time n' tha second field only represents the
bounded part.
.RE
.IP "\fB\-fprofile\-arcs\fR" 4
.IX Item "-fprofile-arcs"
Add code so dat program flow \fIarcs\fR is instrumented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  During
execution tha program recordz how tha fuck nuff times each branch n' call is
executed n' how tha fuck nuff times it is taken or returns.  When tha compiled
program exits it saves dis data ta a gangbangin' file called
\&\fI\fIauxname\fI.gcda\fR fo' each source file.  Da data may be used for
profile-pimped up optimizations (\fB\-fbranch\-probabilities\fR), or for
test coverage analysis (\fB\-ftest\-coverage\fR).  Each object file's
\&\fIauxname\fR is generated from tha name of tha output file, if
explicitly specified n' it aint tha final executable, otherwise it is
the basename of tha source file.  In both cases any suffix is removed
(e.g. \fIfoo.gcda\fR fo' input file \fIdir/foo.c\fR, or
\&\fIdir/foo.gcda\fR fo' output file specified as \fB\-o dir/foo.o\fR).
.IP "\fB\-\-coverage\fR" 4
.IX Item "--coverage"
This option is used ta compile n' link code instrumented fo' coverage
analysis.  Da option be a synonym fo' \fB\-fprofile\-arcs\fR
\&\fB\-ftest\-coverage\fR (when compiling) n' \fB\-lgcov\fR (when
linking).  See tha documentation fo' dem options fo' mo' details.
.RS 4
.IP "\(bu" 4
Compile tha source filez wit \fB\-fprofile\-arcs\fR plus optimization
and code generation options.  For test coverage analysis, use the
additionizzle \fB\-ftest\-coverage\fR option. I aint talkin' bout chicken n' gravy biatch.  Yo ass do not need ta profile
every source file up in a program.
.IP "\(bu" 4
Link yo' object filez wit \fB\-lgcov\fR or \fB\-fprofile\-arcs\fR
(the latta implies tha former).
.IP "\(bu" 4
Run tha program on a representatizzle workload ta generate tha arc profile
information. I aint talkin' bout chicken n' gravy biatch.  This may be repeated any number of times.  Yo ass can run
concurrent instancez of yo' program, n' provided dat tha file system
supports locking, tha data filez is ghon be erectly updated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Also
\&\f(CW\*(C`fork\*(C'\fR calls is detected n' erectly handled (double counting
will not happen).
.IP "\(bu" 4
For profile-pimped up optimizations, compile tha source filez again n' again n' again with
the same optimization n' code generation options plus
\&\fB\-fbranch\-probabilities\fR.
.IP "\(bu" 4
For test coverage analysis, use \fBgcov\fR ta produce human readable
information from tha \fI.gcno\fR n' \fI.gcda\fR files.  Refer ta the
\&\fBgcov\fR documentation fo' further shiznit.
.RE
.RS 4
.Sp
With \fB\-fprofile\-arcs\fR, fo' each function of yo' program \s-1GCC\s0
creates a program flow graph, then findz a spannin tree fo' tha graph.
Only arcs dat is not on tha spannin tree gotta be instrumented: the
compila addz code ta count tha number of times dat these arcs are
executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  When a arc is tha only exit or only entrizzle ta a funky-ass block, the
instrumentation code can be added ta tha block; otherwise, a freshly smoked up basic
block must be pimped ta hold tha instrumentation code.
.RE
.IP "\fB\-ftest\-coverage\fR" 4
.IX Item "-ftest-coverage"
Produce a notes file dat tha \fBgcov\fR code-coverage utilitizzle can use to
show program coverage.  Each source filez note file is called
\&\fI\fIauxname\fI.gcno\fR.  Refer ta tha \fB\-fprofile\-arcs\fR option
above fo' a thugged-out description of \fIauxname\fR n' instructions on how tha fuck to
generate test coverage data.  Coverage data matches tha source files
more closely if you do not optimize.
.IP "\fB\-fdbg\-cnt\-list\fR" 4
.IX Item "-fdbg-cnt-list"
Print tha name n' tha counta upper bound fo' all debug counters.
.IP "\fB\-fdbg\-cnt=\fR\fIcounter-value-list\fR" 4
.IX Item "-fdbg-cnt=counter-value-list"
Set tha internal debug counta upper bound. Y'all KNOW dat shit, muthafucka!  \fIcounter-value-list\fR
is a cold-ass lil comma-separated list of \fIname\fR:\fIvalue\fR pairs
which sets tha upper bound of each debug counta \fIname\fR ta \fIvalue\fR.
All debug countas have tha initial upper bound of \f(CW\*(C`UINT_MAX\*(C'\fR;
thus \f(CW\*(C`dbg_cnt()\*(C'\fR returns legit always unless tha upper bound
is set by dis option.
For example, wit \fB\-fdbg\-cnt=dce:10,tail_call:0\fR,
\&\f(CW\*(C`dbg_cnt(dce)\*(C'\fR returns legit only fo' first 10 invocations.
.IP "\fB\-fenable\-\fR\fIkind\fR\fB\-\fR\fIpass\fR" 4
.IX Item "-fenable-kind-pass"
.PD 0
.IP "\fB\-fdisable\-\fR\fIkind\fR\fB\-\fR\fIpass\fR\fB=\fR\fIrange-list\fR" 4
.IX Item "-fdisable-kind-pass=range-list"
.PD
This be a set of options dat is used ta explicitly disable/enable
optimization passes.  These options is intended fo' use fo' debuggin \s-1GCC.\s0
Compila playas should use regular options fo' enabling/disabling
passes instead.
.RS 4
.IP "\fB\-fdisable\-ipa\-\fR\fIpass\fR" 4
.IX Item "-fdisable-ipa-pass"
Disable \s-1IPA\s0 pass \fIpass\fR. \fIpass\fR is tha pass name.  If tha same pass is
statically invoked up in tha compila multiple times, tha pass name should be
appended wit a sequential number startin from 1.
.IP "\fB\-fdisable\-rtl\-\fR\fIpass\fR" 4
.IX Item "-fdisable-rtl-pass"
.PD 0
.IP "\fB\-fdisable\-rtl\-\fR\fIpass\fR\fB=\fR\fIrange-list\fR" 4
.IX Item "-fdisable-rtl-pass=range-list"
.PD
Disable \s-1RTL\s0 pass \fIpass\fR.  \fIpass\fR is tha pass name.  If tha same pass is
statically invoked up in tha compila multiple times, tha pass name should be
appended wit a sequential number startin from 1.  \fIrange-list\fR be a 
comma-separated list of function ranges or assembla names.  Each range be a number
pair separated by a cold-ass lil colon. I aint talkin' bout chicken n' gravy biatch.  Da range is inclusive up in both ends.  If tha range
is trivial, tha number pair can be simplified as a single number n' shit.  If the
functionz call graph nodez \fIuid\fR falls within one of tha specified ranges,
the \fIpass\fR is disabled fo' dat function. I aint talkin' bout chicken n' gravy biatch.  Da \fIuid\fR is shown up in the
function header of a thugged-out dump file, n' tha pass names can be dumped by using
option \fB\-fdump\-passes\fR.
.IP "\fB\-fdisable\-tree\-\fR\fIpass\fR" 4
.IX Item "-fdisable-tree-pass"
.PD 0
.IP "\fB\-fdisable\-tree\-\fR\fIpass\fR\fB=\fR\fIrange-list\fR" 4
.IX Item "-fdisable-tree-pass=range-list"
.PD
Disable tree pass \fIpass\fR.  See \fB\-fdisable\-rtl\fR fo' tha description of
option arguments.
.IP "\fB\-fenable\-ipa\-\fR\fIpass\fR" 4
.IX Item "-fenable-ipa-pass"
Enable \s-1IPA\s0 pass \fIpass\fR.  \fIpass\fR is tha pass name.  If tha same pass is
statically invoked up in tha compila multiple times, tha pass name should be
appended wit a sequential number startin from 1.
.IP "\fB\-fenable\-rtl\-\fR\fIpass\fR" 4
.IX Item "-fenable-rtl-pass"
.PD 0
.IP "\fB\-fenable\-rtl\-\fR\fIpass\fR\fB=\fR\fIrange-list\fR" 4
.IX Item "-fenable-rtl-pass=range-list"
.PD
Enable \s-1RTL\s0 pass \fIpass\fR.  See \fB\-fdisable\-rtl\fR fo' option argument
description n' examples.
.IP "\fB\-fenable\-tree\-\fR\fIpass\fR" 4
.IX Item "-fenable-tree-pass"
.PD 0
.IP "\fB\-fenable\-tree\-\fR\fIpass\fR\fB=\fR\fIrange-list\fR" 4
.IX Item "-fenable-tree-pass=range-list"
.PD
Enable tree pass \fIpass\fR.  See \fB\-fdisable\-rtl\fR fo' tha description
of option arguments.
.RE
.RS 4
.Sp
Here is some examplez showin usez of these options.
.Sp
.Vb 10
\&        # disable ccp1 fo' all functions
\&           \-fdisable\-tree\-ccp1
\&        # disable complete unroll fo' function whose cgraph node uid is 1
\&           \-fenable\-tree\-cunroll=1
\&        # disable gcse2 fo' functions all up in tha followin ranges [1,1],
\&        # [300,400], n' [400,1000]
\&        # disable gcse2 fo' functions foo n' foo2
\&           \-fdisable\-rtl\-gcse2=foo,foo2
\&        # disable early inlining
\&           \-fdisable\-tree\-einline
\&        # disable ipa inlining
\&           \-fdisable\-ipa\-inline
\&        # enable tree full unroll
\&           \-fenable\-tree\-unroll
.Ve
.RE
.IP "\fB\-d\fR\fIletters\fR" 4
.IX Item "-dletters"
.PD 0
.IP "\fB\-fdump\-rtl\-\fR\fIpass\fR" 4
.IX Item "-fdump-rtl-pass"
.IP "\fB\-fdump\-rtl\-\fR\fIpass\fR\fB=\fR\fIfilename\fR" 4
.IX Item "-fdump-rtl-pass=filename"
.PD
Says ta make debuggin dumps durin compilation at times specified by
\&\fIletters\fR.  This is used fo' debuggin tha RTL-based passez of the
compila n' shit.  Da file names fo' most of tha dumps is made by appending
a pass number n' a word ta tha \fIdumpname\fR, n' tha filez are
created up in tha directory of tha output file. In case of
\&\fB=\fR\fIfilename\fR option, tha dump is output on tha given file
instead of tha pass numbered dump files. Note dat tha pass number is
computed statically as passes git registered tha fuck into tha pass manager.
Thus tha numberin aint related ta tha dynamic order of execution of
passes.  In particular, a pass installed by a plugin could have a
number over 200 even if it executed like early.  \fIdumpname\fR is
generated from tha name of tha output file, if explicitly specified
and it aint a executable, otherwise it is tha basename of the
source file. These switches may have different effects when
\&\fB\-E\fR is used fo' preprocessing.
.Sp
Debug dumps can be enabled wit a \fB\-fdump\-rtl\fR switch or some
\&\fB\-d\fR option \fIletters\fR.  Here is tha possible
lettas fo' use up in \fIpass\fR n' \fIletters\fR, n' they meanings:
.RS 4
.IP "\fB\-fdump\-rtl\-alignments\fR" 4
.IX Item "-fdump-rtl-alignments"
Dump afta branch alignments done been computed.
.IP "\fB\-fdump\-rtl\-asmcons\fR" 4
.IX Item "-fdump-rtl-asmcons"
Dump afta fixin rtl statements dat have unsatisfied in/out constraints.
.IP "\fB\-fdump\-rtl\-auto_inc_dec\fR" 4
.IX Item "-fdump-rtl-auto_inc_dec"
Dump afta auto-inc-dec discovery.  This pass is only run on
architectures dat have auto inc or auto dec instructions.
.IP "\fB\-fdump\-rtl\-barriers\fR" 4
.IX Item "-fdump-rtl-barriers"
Dump afta cleanin up tha barrier instructions.
.IP "\fB\-fdump\-rtl\-bbpart\fR" 4
.IX Item "-fdump-rtl-bbpart"
Dump afta partitionin bangin' n' cold basic blocks.
.IP "\fB\-fdump\-rtl\-bbro\fR" 4
.IX Item "-fdump-rtl-bbro"
Dump afta block reordering.
.IP "\fB\-fdump\-rtl\-btl1\fR" 4
.IX Item "-fdump-rtl-btl1"
.PD 0
.IP "\fB\-fdump\-rtl\-btl2\fR" 4
.IX Item "-fdump-rtl-btl2"
.PD
\&\fB\-fdump\-rtl\-btl1\fR n' \fB\-fdump\-rtl\-btl2\fR enable dumping
afta tha two branch
target load optimization passes.
.IP "\fB\-fdump\-rtl\-bypass\fR" 4
.IX Item "-fdump-rtl-bypass"
Dump afta jump bypassin n' control flow optimizations.
.IP "\fB\-fdump\-rtl\-combine\fR" 4
.IX Item "-fdump-rtl-combine"
Dump afta tha \s-1RTL\s0 instruction combination pass.
.IP "\fB\-fdump\-rtl\-compgotos\fR" 4
.IX Item "-fdump-rtl-compgotos"
Dump afta duplicatin tha computed gotos.
.IP "\fB\-fdump\-rtl\-ce1\fR" 4
.IX Item "-fdump-rtl-ce1"
.PD 0
.IP "\fB\-fdump\-rtl\-ce2\fR" 4
.IX Item "-fdump-rtl-ce2"
.IP "\fB\-fdump\-rtl\-ce3\fR" 4
.IX Item "-fdump-rtl-ce3"
.PD
\&\fB\-fdump\-rtl\-ce1\fR, \fB\-fdump\-rtl\-ce2\fR, and
\&\fB\-fdump\-rtl\-ce3\fR enable dumpin afta tha three
if conversion passes.
.IP "\fB\-fdump\-rtl\-cprop_hardreg\fR" 4
.IX Item "-fdump-rtl-cprop_hardreg"
Dump afta hard regista copy propagation.
.IP "\fB\-fdump\-rtl\-csa\fR" 4
.IX Item "-fdump-rtl-csa"
Dump afta combinin stack adjustments.
.IP "\fB\-fdump\-rtl\-cse1\fR" 4
.IX Item "-fdump-rtl-cse1"
.PD 0
.IP "\fB\-fdump\-rtl\-cse2\fR" 4
.IX Item "-fdump-rtl-cse2"
.PD
\&\fB\-fdump\-rtl\-cse1\fR n' \fB\-fdump\-rtl\-cse2\fR enable dumpin after
the two common subexpression elimination passes.
.IP "\fB\-fdump\-rtl\-dce\fR" 4
.IX Item "-fdump-rtl-dce"
Dump afta tha standalone dead code elimination passes.
.IP "\fB\-fdump\-rtl\-dbr\fR" 4
.IX Item "-fdump-rtl-dbr"
Dump afta delayed branch scheduling.
.IP "\fB\-fdump\-rtl\-dce1\fR" 4
.IX Item "-fdump-rtl-dce1"
.PD 0
.IP "\fB\-fdump\-rtl\-dce2\fR" 4
.IX Item "-fdump-rtl-dce2"
.PD
\&\fB\-fdump\-rtl\-dce1\fR n' \fB\-fdump\-rtl\-dce2\fR enable dumpin after
the two dead store elimination passes.
.IP "\fB\-fdump\-rtl\-eh\fR" 4
.IX Item "-fdump-rtl-eh"
Dump afta finalization of \s-1EH\s0 handlin code.
.IP "\fB\-fdump\-rtl\-eh_ranges\fR" 4
.IX Item "-fdump-rtl-eh_ranges"
Dump afta conversion of \s-1EH\s0 handlin range regions.
.IP "\fB\-fdump\-rtl\-expand\fR" 4
.IX Item "-fdump-rtl-expand"
Dump afta \s-1RTL\s0 generation.
.IP "\fB\-fdump\-rtl\-fwprop1\fR" 4
.IX Item "-fdump-rtl-fwprop1"
.PD 0
.IP "\fB\-fdump\-rtl\-fwprop2\fR" 4
.IX Item "-fdump-rtl-fwprop2"
.PD
\&\fB\-fdump\-rtl\-fwprop1\fR n' \fB\-fdump\-rtl\-fwprop2\fR enable
dumpin afta tha two forward propagation passes.
.IP "\fB\-fdump\-rtl\-gcse1\fR" 4
.IX Item "-fdump-rtl-gcse1"
.PD 0
.IP "\fB\-fdump\-rtl\-gcse2\fR" 4
.IX Item "-fdump-rtl-gcse2"
.PD
\&\fB\-fdump\-rtl\-gcse1\fR n' \fB\-fdump\-rtl\-gcse2\fR enable dumping
afta global common subexpression elimination.
.IP "\fB\-fdump\-rtl\-init\-regs\fR" 4
.IX Item "-fdump-rtl-init-regs"
Dump afta tha initialization of tha registers.
.IP "\fB\-fdump\-rtl\-initvals\fR" 4
.IX Item "-fdump-rtl-initvals"
Dump afta tha computation of tha initial value sets.
.IP "\fB\-fdump\-rtl\-into_cfglayout\fR" 4
.IX Item "-fdump-rtl-into_cfglayout"
Dump afta convertin ta cfglayout mode.
.IP "\fB\-fdump\-rtl\-ira\fR" 4
.IX Item "-fdump-rtl-ira"
Dump afta iterated regista allocation.
.IP "\fB\-fdump\-rtl\-jump\fR" 4
.IX Item "-fdump-rtl-jump"
Dump afta tha second jump optimization.
.IP "\fB\-fdump\-rtl\-loop2\fR" 4
.IX Item "-fdump-rtl-loop2"
\&\fB\-fdump\-rtl\-loop2\fR enablez dumpin afta tha rtl
loop optimization passes.
.IP "\fB\-fdump\-rtl\-mach\fR" 4
.IX Item "-fdump-rtl-mach"
Dump afta struttin tha machine dependent reorganization pass, if that
pass exists.
.IP "\fB\-fdump\-rtl\-mode_sw\fR" 4
.IX Item "-fdump-rtl-mode_sw"
Dump afta removin redundant mode switches.
.IP "\fB\-fdump\-rtl\-rnreg\fR" 4
.IX Item "-fdump-rtl-rnreg"
Dump afta regista renumbering.
.IP "\fB\-fdump\-rtl\-outof_cfglayout\fR" 4
.IX Item "-fdump-rtl-outof_cfglayout"
Dump afta convertin from cfglayout mode.
.IP "\fB\-fdump\-rtl\-peephole2\fR" 4
.IX Item "-fdump-rtl-peephole2"
Dump afta tha peephole pass.
.IP "\fB\-fdump\-rtl\-postreload\fR" 4
.IX Item "-fdump-rtl-postreload"
Dump afta post-reload optimizations.
.IP "\fB\-fdump\-rtl\-pro_and_epilogue\fR" 4
.IX Item "-fdump-rtl-pro_and_epilogue"
Dump afta generatin tha function prologues n' epilogues.
.IP "\fB\-fdump\-rtl\-regmove\fR" 4
.IX Item "-fdump-rtl-regmove"
Dump afta tha regista move pass.
.IP "\fB\-fdump\-rtl\-sched1\fR" 4
.IX Item "-fdump-rtl-sched1"
.PD 0
.IP "\fB\-fdump\-rtl\-sched2\fR" 4
.IX Item "-fdump-rtl-sched2"
.PD
\&\fB\-fdump\-rtl\-sched1\fR n' \fB\-fdump\-rtl\-sched2\fR enable dumping
afta tha basic block schedulin passes.
.IP "\fB\-fdump\-rtl\-see\fR" 4
.IX Item "-fdump-rtl-see"
Dump afta sign extension elimination.
.IP "\fB\-fdump\-rtl\-seqabstr\fR" 4
.IX Item "-fdump-rtl-seqabstr"
Dump afta common sequence discovery.
.IP "\fB\-fdump\-rtl\-shorten\fR" 4
.IX Item "-fdump-rtl-shorten"
Dump afta shortenin branches.
.IP "\fB\-fdump\-rtl\-sibling\fR" 4
.IX Item "-fdump-rtl-sibling"
Dump afta siblin call optimizations.
.IP "\fB\-fdump\-rtl\-split1\fR" 4
.IX Item "-fdump-rtl-split1"
.PD 0
.IP "\fB\-fdump\-rtl\-split2\fR" 4
.IX Item "-fdump-rtl-split2"
.IP "\fB\-fdump\-rtl\-split3\fR" 4
.IX Item "-fdump-rtl-split3"
.IP "\fB\-fdump\-rtl\-split4\fR" 4
.IX Item "-fdump-rtl-split4"
.IP "\fB\-fdump\-rtl\-split5\fR" 4
.IX Item "-fdump-rtl-split5"
.PD
\&\fB\-fdump\-rtl\-split1\fR, \fB\-fdump\-rtl\-split2\fR,
\&\fB\-fdump\-rtl\-split3\fR, \fB\-fdump\-rtl\-split4\fR and
\&\fB\-fdump\-rtl\-split5\fR enable dumpin afta five roundz of
instruction splitting.
.IP "\fB\-fdump\-rtl\-sms\fR" 4
.IX Item "-fdump-rtl-sms"
Dump afta modulo scheduling.  This pass is only run on some
architectures.
.IP "\fB\-fdump\-rtl\-stack\fR" 4
.IX Item "-fdump-rtl-stack"
Dump afta conversion from \s-1GCC\s0z \*(L"flat regista file\*(R" registas ta the
x87z stack-like registers.  This pass is only run on x86 variants.
.IP "\fB\-fdump\-rtl\-subreg1\fR" 4
.IX Item "-fdump-rtl-subreg1"
.PD 0
.IP "\fB\-fdump\-rtl\-subreg2\fR" 4
.IX Item "-fdump-rtl-subreg2"
.PD
\&\fB\-fdump\-rtl\-subreg1\fR n' \fB\-fdump\-rtl\-subreg2\fR enable dumpin after
the two subreg expansion passes.
.IP "\fB\-fdump\-rtl\-unshare\fR" 4
.IX Item "-fdump-rtl-unshare"
Dump afta all rtl has been unshared.
.IP "\fB\-fdump\-rtl\-vartrack\fR" 4
.IX Item "-fdump-rtl-vartrack"
Dump afta variable tracking.
.IP "\fB\-fdump\-rtl\-vregs\fR" 4
.IX Item "-fdump-rtl-vregs"
Dump afta convertin virtual registas ta hard registers.
.IP "\fB\-fdump\-rtl\-web\fR" 4
.IX Item "-fdump-rtl-web"
Dump afta live range splitting.
.IP "\fB\-fdump\-rtl\-regclass\fR" 4
.IX Item "-fdump-rtl-regclass"
.PD 0
.IP "\fB\-fdump\-rtl\-subregs_of_mode_init\fR" 4
.IX Item "-fdump-rtl-subregs_of_mode_init"
.IP "\fB\-fdump\-rtl\-subregs_of_mode_finish\fR" 4
.IX Item "-fdump-rtl-subregs_of_mode_finish"
.IP "\fB\-fdump\-rtl\-dfinit\fR" 4
.IX Item "-fdump-rtl-dfinit"
.IP "\fB\-fdump\-rtl\-dfinish\fR" 4
.IX Item "-fdump-rtl-dfinish"
.PD
These dumps is defined but always produce empty files.
.IP "\fB\-da\fR" 4
.IX Item "-da"
.PD 0
.IP "\fB\-fdump\-rtl\-all\fR" 4
.IX Item "-fdump-rtl-all"
.PD
Produce all tha dumps listed above.
.IP "\fB\-dA\fR" 4
.IX Item "-dA"
Annotate tha assembla output wit miscellaneous debuggin shiznit.
.IP "\fB\-dD\fR" 4
.IX Item "-dD"
Dump all macro definitions, all up in tha end of preprocessing, up in addizzle to
normal output.
.IP "\fB\-dH\fR" 4
.IX Item "-dH"
Produce a cold-ass lil core dump whenever a error occurs.
.IP "\fB\-dp\fR" 4
.IX Item "-dp"
Annotate tha assembla output wit a cold-ass lil comment indicatin which
pattern n' alternatizzle is used. Y'all KNOW dat shit, muthafucka!  Da length of each instruction is
also printed.
.IP "\fB\-dP\fR" 4
.IX Item "-dP"
Dump tha \s-1RTL\s0 up in tha assembla output as a cold-ass lil comment before each instruction.
Also turns on \fB\-dp\fR annotation.
.IP "\fB\-dx\fR" 4
.IX Item "-dx"
Just generate \s-1RTL\s0 fo' a gangbangin' function instead of compilin dat shit.  Usually used
with \fB\-fdump\-rtl\-expand\fR.
.RE
.RS 4
.RE
.IP "\fB\-fdump\-noaddr\fR" 4
.IX Item "-fdump-noaddr"
When bustin debuggin dumps, suppress address output.  This make it more
feasible ta use diff on debuggin dumps fo' compila invocations with
different compila binaries and/or different
text / bss / data / heap / stack / dso start locations.
.IP "\fB\-fdump\-unnumbered\fR" 4
.IX Item "-fdump-unnumbered"
When bustin debuggin dumps, suppress instruction numbers n' address output.
This make it mo' feasible ta use diff on debuggin dumps fo' compiler
invocations wit different options, up in particular wit n' without
\&\fB\-g\fR.
.IP "\fB\-fdump\-unnumbered\-links\fR" 4
.IX Item "-fdump-unnumbered-links"
When bustin debuggin dumps (see \fB\-d\fR option above), suppress
instruction numbers fo' tha links ta tha previous n' next instructions
in a sequence.
.IP "\fB\-fdump\-translation\-unit\fR (\*(C+ only)" 4
.IX Item "-fdump-translation-unit ( only)"
.PD 0
.IP "\fB\-fdump\-translation\-unit\-\fR\fIoptions\fR\fB \fR(\*(C+ only)" 4
.IX Item "-fdump-translation-unit-options ( only)"
.PD
Dump a representation of tha tree structure fo' tha entire translation
unit ta a gangbangin' file.  Da file name is made by appendin \fI.tu\fR ta the
source file name, n' tha file is pimped up in tha same directory as the
output file.  If tha \fB\-\fR\fIoptions\fR form is used, \fIoptions\fR
controls tha detailz of tha dump as busted lyrics bout fo' the
\&\fB\-fdump\-tree\fR options.
.IP "\fB\-fdump\-class\-hierarchy\fR (\*(C+ only)" 4
.IX Item "-fdump-class-hierarchy ( only)"
.PD 0
.IP "\fB\-fdump\-class\-hierarchy\-\fR\fIoptions\fR\fB \fR(\*(C+ only)" 4
.IX Item "-fdump-class-hierarchy-options ( only)"
.PD
Dump a representation of each classs hierarchy n' virtual function
table layout ta a gangbangin' file.  Da file name is made by appending
\&\fI.class\fR ta tha source file name, n' tha file is pimped up in the
same directory as tha output file.  If tha \fB\-\fR\fIoptions\fR form
is used, \fIoptions\fR controls tha detailz of tha dump as busted lyrics about
for tha \fB\-fdump\-tree\fR options.
.IP "\fB\-fdump\-ipa\-\fR\fIswitch\fR" 4
.IX Item "-fdump-ipa-switch"
Control tha dumpin at various stagez of inter-procedural analysis
language tree ta a gangbangin' file.  Da file name is generated by appendin a
switch specific suffix ta tha source file name, n' tha file is pimped
in tha same directory as tha output file.  Da followin dumps are
possible:
.RS 4
.IP "\fBall\fR" 4
.IX Item "all"
Enablez all inter-procedural analysis dumps.
.IP "\fBcgraph\fR" 4
.IX Item "cgraph"
Dumps shiznit bout call-graph optimization, unused function removal,
and inlinin decisions.
.IP "\fBinline\fR" 4
.IX Item "inline"
Dump afta function inlining.
.RE
.RS 4
.RE
.IP "\fB\-fdump\-passes\fR" 4
.IX Item "-fdump-passes"
Dump tha list of optimization passes dat is turned on n' off by
the current command-line options.
.IP "\fB\-fdump\-statistics\-\fR\fIoption\fR" 4
.IX Item "-fdump-statistics-option"
Enable n' control dumpin of pass statistics up in a separate file.  The
file name is generated by appendin a suffix endin in
\&\fB.statistics\fR ta tha source file name, n' tha file is pimped in
the same directory as tha output file.  If tha \fB\-\fR\fIoption\fR
form is used, \fB\-stats\fR causes countas ta be summed over the
whole compilation unit while \fB\-details\fR dumps every last muthafuckin event as
the passes generate em.  Da default wit no option is ta sum
countas fo' each function compiled.
.IP "\fB\-fdump\-tree\-\fR\fIswitch\fR" 4
.IX Item "-fdump-tree-switch"
.PD 0
.IP "\fB\-fdump\-tree\-\fR\fIswitch\fR\fB\-\fR\fIoptions\fR" 4
.IX Item "-fdump-tree-switch-options"
.IP "\fB\-fdump\-tree\-\fR\fIswitch\fR\fB\-\fR\fIoptions\fR\fB=\fR\fIfilename\fR" 4
.IX Item "-fdump-tree-switch-options=filename"
.PD
Control tha dumpin at various stagez of processin tha intermediate
language tree ta a gangbangin' file.  Da file name is generated by appendin a
switch-specific suffix ta tha source file name, n' tha file is
created up in tha same directory as tha output file. In case of
\&\fB=\fR\fIfilename\fR option, tha dump is output on tha given file
instead of tha auto named dump files.  If tha \fB\-\fR\fIoptions\fR
form is used, \fIoptions\fR be a list of \fB\-\fR separated options
which control tha detailz of tha dump.  Not all options is applicable
to all dumps; dem dat is not meaningful is ignored. Y'all KNOW dat shit, muthafucka!  The
followin options is available
.RS 4
.IP "\fBaddress\fR" 4
.IX Item "address"
Print tha address of each node.  Usually dis aint meaningful as it
changes accordin ta tha environment n' source file.  Its primary use
is fo' tyin up a thugged-out dump file wit a thugged-out debug environment.
.IP "\fBasmname\fR" 4
.IX Item "asmname"
If \f(CW\*(C`DECL_ASSEMBLER_NAME\*(C'\fR has been set fo' a given decl, use that
in tha dump instead of \f(CW\*(C`DECL_NAME\*(C'\fR.  Its primary use is ease of
use hustlin backward from mangled names up in tha assembly file.
.IP "\fBslim\fR" 4
.IX Item "slim"
When dumpin front-end intermediate representations, inhibit dumping
of thugz of a scope or body of a gangbangin' function merely cuz dat scope
has been reached. Y'all KNOW dat shit, muthafucka!  Only dump such shit when they is directly reachable
by some other path.
.Sp
When dumpin pretty-printed trees, dis option inhibits dumpin the
bodiez of control structures.
.Sp
When dumpin \s-1RTL,\s0 print tha \s-1RTL\s0 up in slim (condensed) form instead of
the default LISP-like representation.
.IP "\fBraw\fR" 4
.IX Item "raw"
Print a raw representation of tha tree.  By default, trees are
pretty-printed tha fuck into a C\-like representation.
.IP "\fBdetails\fR" 4
.IX Item "details"
Enable mo' detailed dumps (not honored by every last muthafuckin dump option) fo' realz. Also
include shiznit from tha optimization passes.
.IP "\fBstats\fR" 4
.IX Item "stats"
Enable dumpin various statistics bout tha pass (not honored by every last muthafuckin dump
option).
.IP "\fBblocks\fR" 4
.IX Item "blocks"
Enable showin basic block boundaries (disabled up in raw dumps).
.IP "\fBgraph\fR" 4
.IX Item "graph"
For each of tha other indicated dump filez (\fB\-fdump\-rtl\-\fR\fIpass\fR),
dump a representation of tha control flow graph suitable fo' viewin with
GraphViz ta \fI\fIfile\fI.\fIpassid\fI.\fIpass\fI.dot\fR.  Each function in
the file is pretty-printed as a subgraph, so dat GraphViz can render them
all up in a single plot.
.Sp
This option currently only works fo' \s-1RTL\s0 dumps, n' tha \s-1RTL\s0 be always
dumped up in slim form.
.IP "\fBvops\fR" 4
.IX Item "vops"
Enable showin virtual operandz fo' every last muthafuckin statement.
.IP "\fBlineno\fR" 4
.IX Item "lineno"
Enable showin line numbers fo' statements.
.IP "\fBuid\fR" 4
.IX Item "uid"
Enable showin tha unique \s-1ID \s0(\f(CW\*(C`DECL_UID\*(C'\fR) fo' each variable.
.IP "\fBverbose\fR" 4
.IX Item "verbose"
Enable showin tha tree dump fo' each statement.
.IP "\fBeh\fR" 4
.IX Item "eh"
Enable showin tha \s-1EH\s0 region number holdin each statement.
.IP "\fBscev\fR" 4
.IX Item "scev"
Enable showin scalar evolution analysis details.
.IP "\fBoptimized\fR" 4
.IX Item "optimized"
Enable showin optimization shiznit (only available up in certain
passes).
.IP "\fBmissed\fR" 4
.IX Item "missed"
Enable showin missed optimization shiznit (only available up in certain
passes).
.IP "\fBnotes\fR" 4
.IX Item "notes"
Enable other detailed optimization shiznit (only available in
certain passes).
.IP "\fB=\fR\fIfilename\fR" 4
.IX Item "=filename"
Instead of a auto named dump file, output tha fuck into tha given file
name. Da file names \fIstdout\fR n' \fIstderr\fR is treated
specially n' is considered already open standard streams. For
example,
.Sp
.Vb 2
\&        gcc \-O2 \-ftree\-vectorize \-fdump\-tree\-vect\-blocks=foo.dump
\&             \-fdump\-tree\-pre=stderr file.c
.Ve
.Sp
outputs vectorizer dump tha fuck into \fIfoo.dump\fR, while tha \s-1PRE\s0 dump is
output on ta \fIstderr\fR. If two conflictin dump filenames are
given fo' tha same pass, then tha latta option overrides tha earlier
one.
.IP "\fBall\fR" 4
.IX Item "all"
Turn on all options, except \fBraw\fR, \fBslim\fR, \fBverbose\fR
and \fBlineno\fR.
.IP "\fBoptall\fR" 4
.IX Item "optall"
Turn on all optimization options, i.e., \fBoptimized\fR,
\&\fBmissed\fR, n' \fBnote\fR.
.RE
.RS 4
.Sp
Da followin tree dumps is possible:
.IP "\fBoriginal\fR" 4
.IX Item "original"
Dump before any tree based optimization, ta \fI\fIfile\fI.original\fR.
.IP "\fBoptimized\fR" 4
.IX Item "optimized"
Dump afta all tree based optimization, ta \fI\fIfile\fI.optimized\fR.
.IP "\fBgimple\fR" 4
.IX Item "gimple"
Dump each function before n' afta tha gimplification pass ta a gangbangin' file.  The
file name is made by appendin \fI.gimple\fR ta tha source file name.
.IP "\fBcfg\fR" 4
.IX Item "cfg"
Dump tha control flow graph of each function ta a gangbangin' file.  Da file name is
made by appendin \fI.cfg\fR ta tha source file name.
.IP "\fBch\fR" 4
.IX Item "ch"
Dump each function afta copyin loop headers.  Da file name is made by
appendin \fI.ch\fR ta tha source file name.
.IP "\fBssa\fR" 4
.IX Item "ssa"
Dump \s-1SSA\s0 related shiznit ta a gangbangin' file.  Da file name is made by appending
\&\fI.ssa\fR ta tha source file name.
.IP "\fBalias\fR" 4
.IX Item "alias"
Dump aliasin shiznit fo' each function. I aint talkin' bout chicken n' gravy biatch.  Da file name is made by
appendin \fI.alias\fR ta tha source file name.
.IP "\fBccp\fR" 4
.IX Item "ccp"
Dump each function afta \s-1CCP. \s0 Da file name is made by appending
\&\fI.ccp\fR ta tha source file name.
.IP "\fBstoreccp\fR" 4
.IX Item "storeccp"
Dump each function afta STORE-CCP.  Da file name is made by appending
\&\fI.storeccp\fR ta tha source file name.
.IP "\fBpre\fR" 4
.IX Item "pre"
Dump trees afta partial redundancy elimination. I aint talkin' bout chicken n' gravy biatch.  Da file name is made
by appendin \fI.pre\fR ta tha source file name.
.IP "\fBfre\fR" 4
.IX Item "fre"
Dump trees afta full redundancy elimination. I aint talkin' bout chicken n' gravy biatch.  Da file name is made
by appendin \fI.fre\fR ta tha source file name.
.IP "\fBcopyprop\fR" 4
.IX Item "copyprop"
Dump trees afta copy propagation. I aint talkin' bout chicken n' gravy biatch.  Da file name is made
by appendin \fI.copyprop\fR ta tha source file name.
.IP "\fBstore_copyprop\fR" 4
.IX Item "store_copyprop"
Dump trees afta store copy-propagation. I aint talkin' bout chicken n' gravy biatch.  Da file name is made
by appendin \fI.store_copyprop\fR ta tha source file name.
.IP "\fBdce\fR" 4
.IX Item "dce"
Dump each function afta dead code elimination. I aint talkin' bout chicken n' gravy biatch.  Da file name is made by
appendin \fI.dce\fR ta tha source file name.
.IP "\fBmudflap\fR" 4
.IX Item "mudflap"
Dump each function afta addin mudflap instrumentation. I aint talkin' bout chicken n' gravy biatch.  Da file name is
made by appendin \fI.mudflap\fR ta tha source file name.
.IP "\fBsra\fR" 4
.IX Item "sra"
Dump each function afta struttin scalar replacement of aggregates.  The
file name is made by appendin \fI.sra\fR ta tha source file name.
.IP "\fBsink\fR" 4
.IX Item "sink"
Dump each function afta struttin code sinking.  Da file name is made
by appendin \fI.sink\fR ta tha source file name.
.IP "\fBdom\fR" 4
.IX Item "dom"
Dump each function afta applyin dominator tree optimizations.  Da file
name is made by appendin \fI.dom\fR ta tha source file name.
.IP "\fBdse\fR" 4
.IX Item "dse"
Dump each function afta applyin dead store elimination. I aint talkin' bout chicken n' gravy biatch.  Da file
name is made by appendin \fI.dse\fR ta tha source file name.
.IP "\fBphiopt\fR" 4
.IX Item "phiopt"
Dump each function afta optimizin \s-1PHI\s0 nodes tha fuck into straightline code.  Da file
name is made by appendin \fI.phiopt\fR ta tha source file name.
.IP "\fBforwprop\fR" 4
.IX Item "forwprop"
Dump each function afta forward propagatin single use variables.  Da file
name is made by appendin \fI.forwprop\fR ta tha source file name.
.IP "\fBcopyrename\fR" 4
.IX Item "copyrename"
Dump each function afta applyin tha copy rename optimization. I aint talkin' bout chicken n' gravy biatch.  Da file
name is made by appendin \fI.copyrename\fR ta tha source file name.
.IP "\fBnrv\fR" 4
.IX Item "nrv"
Dump each function afta applyin tha named return value optimization on
generic trees.  Da file name is made by appendin \fI.nrv\fR ta tha source
file name.
.IP "\fBvect\fR" 4
.IX Item "vect"
Dump each function afta applyin vectorization of loops.  Da file name is
made by appendin \fI.vect\fR ta tha source file name.
.IP "\fBslp\fR" 4
.IX Item "slp"
Dump each function afta applyin vectorization of basic blocks.  Da file name
is made by appendin \fI.slp\fR ta tha source file name.
.IP "\fBvrp\fR" 4
.IX Item "vrp"
Dump each function afta Value Range Propagation (\s-1VRP\s0).  Da file name
is made by appendin \fI.vrp\fR ta tha source file name.
.IP "\fBall\fR" 4
.IX Item "all"
Enable all tha available tree dumps wit tha flags provided up in dis option.
.RE
.RS 4
.RE
.IP "\fB\-fopt\-info\fR" 4
.IX Item "-fopt-info"
.PD 0
.IP "\fB\-fopt\-info\-\fR\fIoptions\fR" 4
.IX Item "-fopt-info-options"
.IP "\fB\-fopt\-info\-\fR\fIoptions\fR\fB=\fR\fIfilename\fR" 4
.IX Item "-fopt-info-options=filename"
.PD
Controls optimization dumps from various optimization passes. If the
\&\fB\-\fR\fIoptions\fR form is used, \fIoptions\fR be a list of
\&\fB\-\fR separated options ta select tha dump details and
optimizations.  If \fIoptions\fR aint specified, it defaults to
\&\fBall\fR fo' details n' \fBoptall\fR fo' optimization
groups. If tha \fIfilename\fR aint specified, it defaults to
\&\fIstderr\fR. Note dat tha output \fIfilename\fR is ghon be overwritten
in case of multiple translation units, n' you can put dat on yo' toast. If a cold-ass lil combined output from
multiple translation units is desired, \fIstderr\fR should be used
instead.
.Sp
Da options can be divided tha fuck into two groups, 1) options describin the
verbositizzle of tha dump, n' 2) options describin which optimizations
should be included. Y'all KNOW dat shit, muthafucka! Da options from both tha crews can be freely
mixed as they is non-overlapping. But fuck dat shiznit yo, tha word on tha street is dat up in case of any conflicts,
the latta options override tha earlier options on tha command
line. Though multiple \-fopt\-info options is accepted, only one of
them can have \fB=filename\fR. If other filenames is provided then
all but tha straight-up original gangsta one is ignored.
.Sp
Da dump verbositizzle has tha followin options
.RS 4
.IP "\fBoptimized\fR" 4
.IX Item "optimized"
Print shiznit when a optimization is successfully applied. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is
up ta a pass ta decizzle which shiznit is relevant. For example, the
vectorizer passes print tha source location of loops which got
successfully vectorized.
.IP "\fBmissed\fR" 4
.IX Item "missed"
Print shiznit bout missed optimizations. Individual passes
control which shiznit ta include up in tha output. For example,
.Sp
.Vb 1
\&        gcc \-O2 \-ftree\-vectorize \-fopt\-info\-vec\-missed
.Ve
.Sp
will print shiznit bout missed optimization opportunitizzles from
vectorization passes on stderr.
.IP "\fBnote\fR" 4
.IX Item "note"
Print verbose shiznit bout optimizations, like fuckin certain
transformations, mo' detailed lyrics bout decisions etc.
.IP "\fBall\fR" 4
.IX Item "all"
Print detailed optimization shiznit. I aint talkin' bout chicken n' gravy biatch. This includes
\&\fIoptimized\fR, \fImissed\fR, n' \fInote\fR.
.RE
.RS 4
.Sp
Da second set of options raps on some crew of optimizations n' may
include one or mo' of tha following.
.IP "\fBipa\fR" 4
.IX Item "ipa"
Enable dumps from all interprocedural optimizations.
.IP "\fBloop\fR" 4
.IX Item "loop"
Enable dumps from all loop optimizations.
.IP "\fBinline\fR" 4
.IX Item "inline"
Enable dumps from all inlinin optimizations.
.IP "\fBvec\fR" 4
.IX Item "vec"
Enable dumps from all vectorization optimizations.
.RE
.RS 4
.Sp
For example,
.Sp
.Vb 1
\&        gcc \-O3 \-fopt\-info\-missed=missed.all
.Ve
.Sp
outputs missed optimization report from all tha passes into
\&\fImissed.all\fR.
.Sp
As another example,
.Sp
.Vb 1
\&        gcc \-O3 \-fopt\-info\-inline\-optimized\-missed=inline.txt
.Ve
.Sp
will output shiznit bout missed optimizations as well as
optimized locations from all tha inlinin passes into
\&\fIinline.txt\fR.
.Sp
If tha \fIfilename\fR is provided, then tha dumps from all the
applicable optimizations is concatenated tha fuck into tha \fIfilename\fR.
Otherwise tha dump is output onto \fIstderr\fR. If \fIoptions\fR is
omitted, it defaults ta \fBall-optall\fR, which means dump all
available optimization info from all tha passes. In tha following
example, all optimization info is output on ta \fIstderr\fR.
.Sp
.Vb 1
\&        gcc \-O3 \-fopt\-info
.Ve
.Sp
Note dat \fB\-fopt\-info\-vec\-missed\fR behaves tha same ol' dirty as
\&\fB\-fopt\-info\-missed\-vec\fR.
.Sp
As another example, consider
.Sp
.Vb 1
\&        gcc \-fopt\-info\-vec\-missed=vec.miss \-fopt\-info\-loop\-optimized=loop.opt
.Ve
.Sp
Here tha two output filenames \fIvec.miss\fR n' \fIloop.opt\fR are
in conflict since only one output file be allowed. Y'all KNOW dat shit, muthafucka! In dis case, only
the first option takes effect n' tha subsequent options are
ignored. Y'all KNOW dat shit, muthafucka! Thus only tha \fIvec.miss\fR is produced which cotaints
dumps from tha vectorizer bout missed opportunities.
.RE
.IP "\fB\-ftree\-vectorizer\-verbose=\fR\fIn\fR" 4
.IX Item "-ftree-vectorizer-verbose=n"
This option is deprecated n' is implemented up in terms of
\&\fB\-fopt\-info\fR. Please use \fB\-fopt\-info\-\fR\fIkind\fR form
instead, where \fIkind\fR is one of tha valid opt-info options. It
prints additionizzle optimization shiznit. I aint talkin' bout chicken n' gravy biatch.  For \fIn\fR=0 no
diagnostic shiznit is reported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If \fIn\fR=1 tha vectorizer
reports each loop dat gots vectorized, n' tha total number of loops
that gots vectorized. Y'all KNOW dat shit, muthafucka!  If \fIn\fR=2 tha vectorizer reports locations
which could not be vectorized n' tha reasons fo' them. For any
higher verbositizzle levels all tha analysis n' transformation
information from tha vectorizer is reported.
.Sp
Note dat tha shiznit output by \fB\-ftree\-vectorizer\-verbose\fR
option is busted ta \fIstderr\fR. If tha equivalent form
\&\fB\-fopt\-info\-\fR\fIoptions\fR\fB=\fR\fIfilename\fR is used then the
output is busted tha fuck into \fIfilename\fR instead.
.IP "\fB\-frandom\-seed=\fR\fIstring\fR" 4
.IX Item "-frandom-seed=string"
This option serves up a seed dat \s-1GCC\s0 uses up in place of
random numbers up in generatin certain symbol names
that gotta be different up in every last muthafuckin compiled file.  It be also used to
place unique stamps up in coverage data filez n' tha object filez that
produce em.  Yo ass can use tha \fB\-frandom\-seed\fR option ta produce
reproducibly identical object files.
.Sp
Da \fIstring\fR should be different fo' every last muthafuckin file you compile.
.IP "\fB\-fsched\-verbose=\fR\fIn\fR" 4
.IX Item "-fsched-verbose=n"
On targets dat use instruction scheduling, dis option controls the
amount of debuggin output tha schedula prints, n' you can put dat on yo' toast.  This shiznit is
written ta standard error, unless \fB\-fdump\-rtl\-sched1\fR or
\&\fB\-fdump\-rtl\-sched2\fR is specified, up in which case it is output
to tha usual dump listin file, \fI.sched1\fR or \fI.sched2\fR
respectively.  However fo' \fIn\fR pimped outa than nine, tha output is
always printed ta standard error.
.Sp
For \fIn\fR pimped outa than zero, \fB\-fsched\-verbose\fR outputs the
same shiznit as \fB\-fdump\-rtl\-sched1\fR n' \fB\-fdump\-rtl\-sched2\fR.
For \fIn\fR pimped outa than one, it also output basic block probabilities,
detailed locked n loaded list shiznit n' unit/insn info.  For \fIn\fR pimped outer
than two, it includes \s-1RTL\s0 at abort point, control-flow n' regions info.
And fo' \fIn\fR over four, \fB\-fsched\-verbose\fR also includes
dependence info.
.IP "\fB\-save\-temps\fR" 4
.IX Item "-save-temps"
.PD 0
.IP "\fB\-save\-temps=cwd\fR" 4
.IX Item "-save-temps=cwd"
.PD
Store tha usual \*(L"temporary\*(R" intermediate filez permanently; place them
in tha current directory n' name dem based on tha source file.  Thus,
compilin \fIfoo.c\fR wit \fB\-c \-save\-temps\fR produces files
\&\fIfoo.i\fR n' \fIfoo.s\fR, as well as \fIfoo.o\fR.  This creates a
preprocessed \fIfoo.i\fR output file even though tha compila now
normally uses a integrated preprocessor.
.Sp
When used up in combination wit tha \fB\-x\fR command-line option,
\&\fB\-save\-temps\fR is sensible enough ta avoid over freestylin an
input source file wit tha same extension as a intermediate file.
Da correspondin intermediate file may be obtained by renamin the
source file before rockin \fB\-save\-temps\fR.
.Sp
If you invoke \s-1GCC\s0 up in parallel, compilin nuff muthafuckin different source
filez dat share a cold-ass lil common base name up in different subdirectories or the
same source file compiled fo' multiple output destinations, it is
likely dat tha different parallel compilaz will interfere wit each
other, n' overwrite tha temporary files.  For instance:
.Sp
.Vb 2
\&        gcc \-save\-temps \-o outdir1/foo.o indir1/foo.c&
\&        gcc \-save\-temps \-o outdir2/foo.o indir2/foo.c&
.Ve
.Sp
may result up in \fIfoo.i\fR n' \fIfoo.o\fR bein freestyled to
simultaneously by both compilers.
.IP "\fB\-save\-temps=obj\fR" 4
.IX Item "-save-temps=obj"
Store tha usual \*(L"temporary\*(R" intermediate filez permanently.  If the
\&\fB\-o\fR option is used, tha temporary filez is based on the
object file.  If tha \fB\-o\fR option aint used, the
\&\fB\-save\-temps=obj\fR switch behaves like \fB\-save\-temps\fR.
.Sp
For example:
.Sp
.Vb 3
\&        gcc \-save\-temps=obj \-c foo.c
\&        gcc \-save\-temps=obj \-c bar.c \-o dir/xbar.o
\&        gcc \-save\-temps=obj foobar.c \-o dir2/yfoobar
.Ve
.Sp
creates \fIfoo.i\fR, \fIfoo.s\fR, \fIdir/xbar.i\fR,
\&\fIdir/xbar.s\fR, \fIdir2/yfoobar.i\fR, \fIdir2/yfoobar.s\fR, and
\&\fIdir2/yfoobar.o\fR.
.IP "\fB\-time\fR[\fB=\fR\fIfile\fR]" 4
.IX Item "-time[=file]"
Report tha \s-1CPU\s0 time taken by each subprocess up in tha compilation
sequence.  For C source files, dis is tha compila proper n' assembler
(plus tha linker if linkin is done).
.Sp
Without tha justification of a output file, tha output be lookin like this:
.Sp
.Vb 2
\&        # cc1 0.12 0.01
\&        # as 0.00 0.01
.Ve
.Sp
Da first number on each line is tha \*(L"user time\*(R", dat is time spent
executin tha program itself.  Da second number is \*(L"system time\*(R",
time dropped executin operatin system routines on behalf of tha program.
Both numbers is up in seconds.
.Sp
With tha justification of a output file, tha output be appended ta the
named file, n' it be lookin like this:
.Sp
.Vb 2
\&        0.12 0.01 cc1 <options>
\&        0.00 0.01 as <options>
.Ve
.Sp
Da \*(L"user time\*(R" n' tha \*(L"system time\*(R" is moved before tha program
name, n' tha options passed ta tha program is displayed, so dat one
can lata tell what tha fuck file was bein compiled, n' wit which options.
.IP "\fB\-fvar\-tracking\fR" 4
.IX Item "-fvar-tracking"
Run variable trackin pass.  It computes where variablez is stored at each
posizzle up in code.  Betta debuggin shiznit is then generated
(if tha debuggin shiznit format supports dis shiznit).
.Sp
It be enabled by default when compilin wit optimization (\fB\-Os\fR,
\&\fB\-O\fR, \fB\-O2\fR, ...), debuggin shiznit (\fB\-g\fR) and
the debug info format supports dat shit.
.IP "\fB\-fvar\-tracking\-assignments\fR" 4
.IX Item "-fvar-tracking-assignments"
Annotate assignments ta user variablez early up in tha compilation and
attempt ta carry tha annotations over all up in tha compilation all the
way ta tha end, up in a attempt ta improve debug shiznit while
optimizing.  Use of \fB\-gdwarf\-4\fR is recommended along wit dat shit.
.Sp
It can be enabled even if var-trackin is disabled, up in which case
annotations is pimped n' maintained yo, but discarded all up in tha end.
.IP "\fB\-fvar\-tracking\-assignments\-toggle\fR" 4
.IX Item "-fvar-tracking-assignments-toggle"
Toggle \fB\-fvar\-tracking\-assignments\fR, up in tha same way that
\&\fB\-gtoggle\fR togglez \fB\-g\fR.
.IP "\fB\-print\-file\-name=\fR\fIlibrary\fR" 4
.IX Item "-print-file-name=library"
Print tha full absolute name of tha library file \fIlibrary\fR that
would be used when linking\-\-\-and don't do anythang else.  With this
option, \s-1GCC\s0 do not compile or link anything; it just prints the
file name.
.IP "\fB\-print\-multi\-directory\fR" 4
.IX Item "-print-multi-directory"
Print tha directory name correspondin ta tha multilib selected by any
other switches present up in tha command line.  This directory is supposed
to exist up in \fB\s-1GCC_EXEC_PREFIX\s0\fR.
.IP "\fB\-print\-multi\-lib\fR" 4
.IX Item "-print-multi-lib"
Print tha mappin from multilib directory names ta compila switches
that enable em.  Da directory name is separated from tha switches by
\&\fB;\fR, n' each switch starts wit a \fB@\fR instead of the
\&\fB\-\fR, without spaces between multiple switches.  This is supposed to
ease shell processing.
.IP "\fB\-print\-multi\-os\-directory\fR" 4
.IX Item "-print-multi-os-directory"
Print tha path ta \s-1OS\s0 libraries fo' tha selected
multilib, relatizzle ta some \fIlib\fR subdirectory.  If \s-1OS\s0 libraries are
present up in tha \fIlib\fR subdirectory n' no multilibs is used, dis is
usually just \fI.\fR, if \s-1OS\s0 libraries is present up in \fIlib\fIsuffix\fI\fR
siblin directories dis prints e.g. \fI../lib64\fR, \fI../lib\fR or
\&\fI../lib32\fR, or if \s-1OS\s0 libraries is present up in \fIlib/\fIsubdir\fI\fR
subdirectories it prints e.g. \fIamd64\fR, \fIsparcv9\fR or \fIev6\fR.
.IP "\fB\-print\-multiarch\fR" 4
.IX Item "-print-multiarch"
Print tha path ta \s-1OS\s0 libraries fo' tha selected multiarch,
relatizzle ta some \fIlib\fR subdirectory.
.IP "\fB\-print\-prog\-name=\fR\fIprogram\fR" 4
.IX Item "-print-prog-name=program"
Like \fB\-print\-file\-name\fR yo, but searches fo' a program like fuckin \fBcpp\fR.
.IP "\fB\-print\-libgcc\-file\-name\fR" 4
.IX Item "-print-libgcc-file-name"
Same as \fB\-print\-file\-name=libgcc.a\fR.
.Sp
This is useful when you use \fB\-nostdlib\fR or \fB\-nodefaultlibs\fR
but you do wanna link wit \fIlibgcc.a\fR.  Yo ass can do:
.Sp
.Vb 1
\&        gcc \-nostdlib <files>... \`gcc \-print\-libgcc\-file\-name\`
.Ve
.IP "\fB\-print\-search\-dirs\fR" 4
.IX Item "-print-search-dirs"
Print tha name of tha configured installation directory n' a list of
program n' library directories \fBgcc\fR searches\-\-\-and don't do anythang else.
.Sp
This is useful when \fBgcc\fR prints tha error message
\&\fBinstallation problem, cannot exec cpp0: No such file or directory\fR.
To resolve dis you either need ta put \fIcpp0\fR n' tha other compiler
components where \fBgcc\fR expects ta find them, or you can set tha environment
variable \fB\s-1GCC_EXEC_PREFIX\s0\fR ta tha directory where you installed em.
Don't forget tha trailin \fB/\fR.
.IP "\fB\-print\-sysroot\fR" 4
.IX Item "-print-sysroot"
Print tha target sysroot directory dat is used during
compilation. I aint talkin' bout chicken n' gravy biatch.  This is tha target sysroot specified either at configure
time or rockin tha \fB\-\-sysroot\fR option, possibly wit a extra
suffix dat dependz on compilation options.  If no target sysroot is
specified, tha option prints nothing.
.IP "\fB\-print\-sysroot\-headers\-suffix\fR" 4
.IX Item "-print-sysroot-headers-suffix"
Print tha suffix added ta tha target sysroot when searchin for
headers, or give a error if tha compila aint configured wit such
a suffix\-\-\-and don't do anythang else.
.IP "\fB\-dumpmachine\fR" 4
.IX Item "-dumpmachine"
Print tha compilerz target machine (for example,
\&\fBi686\-pc\-linux\-gnu\fR)\-\-\-and don't do anythang else.
.IP "\fB\-dumpversion\fR" 4
.IX Item "-dumpversion"
Print tha compila version (for example, \fB3.0\fR)\-\-\-and don't do
anythang else.
.IP "\fB\-dumpspecs\fR" 4
.IX Item "-dumpspecs"
Print tha compilerz built-in specs\-\-\-and don't do anythang else.  (This
is used when \s-1GCC\s0 itself is bein built.)
.IP "\fB\-fno\-eliminate\-unused\-debug\-types\fR" 4
.IX Item "-fno-eliminate-unused-debug-types"
Normally, when producin \s-1DWARF 2\s0 output, \s-1GCC\s0 avoidz producin debug symbol 
output fo' types dat is nowhere used up in tha source file bein compiled.
Sometimes it is useful ta have \s-1GCC\s0 emit debugging
information fo' all types declared up in a cold-ass lil compilation
unit, regardless of whether or not they is straight-up used
in dat compilation unit, fo' example 
if, up in tha debugger, you wanna cast a value ta a type dat is
not straight-up used up in yo' program (but is declared).  Mo' often,
however, dis thangs up in dis biatch up in a thugged-out dope amount of wasted space.
.SS "Options That Control Optimization"
.IX Subsection "Options That Control Optimization"
These options control various sortz of optimizations.
.PP
Without any optimization option, tha compilerz goal is ta reduce the
cost of compilation n' ta make debuggin produce tha expected
results, n' you can put dat on yo' toast.  Statements is independent: if you stop tha program wit a
breakpoint between statements, you can then assign a freshly smoked up value ta any
variable or chizzle tha program counta ta any other statement up in the
function n' git exactly tha thangs up in dis biatch you expect from tha source
code.
.PP
Turnin on optimization flags make tha compila attempt ta improve
the performizzle and/or code size all up in tha expense of compilation time
and possibly tha mobilitizzle ta debug tha program.
.PP
Da compila performs optimization based on tha knowledge it haz of the
program.  Compilin multiple filez at once ta a single output file mode allows
the compila ta use shiznit gained from all of tha filez when compiling
each of em.
.PP
Not all optimizations is controlled directly by a gangbangin' flag.  Only
optimizations dat gotz a gangbangin' flag is listed up in dis section.
.PP
Most optimizations is only enabled if a \fB\-O\fR level is set on
the command line.  Otherwise they is disabled, even if individual
optimization flags is specified.
.PP
Dependin on tha target n' how tha fuck \s-1GCC\s0 was configured, a slightly different
set of optimizations may be enabled at each \fB\-O\fR level than
those listed here, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  Yo ass can invoke \s-1GCC\s0 wit \fB\-Q \-\-help=optimizers\fR
to smoke up tha exact set of optimizations dat is enabled at each level.
.IP "\fB\-O\fR" 4
.IX Item "-O"
.PD 0
.IP "\fB\-O1\fR" 4
.IX Item "-O1"
.PD
Optimize.  Optimizin compilation takes somewhat mo' time, n' a lot
more memory fo' a big-ass function.
.Sp
With \fB\-O\fR, tha compila tries ta reduce code size n' execution
time, without struttin any optimizations dat take a pimped out deal of
compilation time.
.Sp
\&\fB\-O\fR turns on tha followin optimization flags:
.Sp
\&\fB\-fauto\-inc\-dec 
\&\-fcompare\-elim 
\&\-fcprop\-registas 
\&\-fdce 
\&\-fdefer\-pop 
\&\-fdelayed\-branch 
\&\-fdse 
\&\-fguess\-branch\-probabilitizzle 
\&\-fif\-conversion2 
\&\-fif\-conversion 
\&\-fipa\-pure\-const 
\&\-fipa\-profile 
\&\-fipa\-reference 
\&\-fmerge\-constants
\&\-fsplit\-wide\-types 
\&\-ftree\-bit\-ccp 
\&\-ftree\-builtin\-call\-dce 
\&\-ftree\-ccp 
\&\-ftree\-ch 
\&\-ftree\-copyrename 
\&\-ftree\-dce 
\&\-ftree\-dominator\-opts 
\&\-ftree\-dse 
\&\-ftree\-forwprop 
\&\-ftree\-fre 
\&\-ftree\-phiprop 
\&\-ftree\-slsr 
\&\-ftree\-sra 
\&\-ftree\-pta 
\&\-ftree\-ta 
\&\-funit\-at\-a\-time\fR
.Sp
\&\fB\-O\fR also turns on \fB\-fomit\-frame\-pointer\fR on machines
where bustin so do not interfere wit debugging.
.IP "\fB\-O2\fR" 4
.IX Item "-O2"
Optimize even mo' n' mo' n' mo'.  \s-1GCC\s0 performs nearly all supported optimizations
that do not involve a space-speed tradeoff.
As compared ta \fB\-O\fR, dis option increases both compilation time
and tha performizzle of tha generated code.
.Sp
\&\fB\-O2\fR turns on all optimization flags specified by \fB\-O\fR.  It
also turns on tha followin optimization flags:
\&\fB\-fthread\-jumps 
\&\-falign\-functions  \-falign\-jumps 
\&\-falign\-loops  \-falign\-labels 
\&\-fcaller\-saves 
\&\-fcrossjumpin 
\&\-fcse\-follow\-jumps  \-fcse\-skip\-blocks 
\&\-fdelete\-null\-pointer\-checks 
\&\-fdevirtualize 
\&\-fexpensive\-optimizations 
\&\-fgcse  \-fgcse\-lm  
\&\-fhoist\-adjacent\-loadz 
\&\-finline\-small\-functions 
\&\-findirect\-inlinin 
\&\-fipa\-sra 
\&\-foptimize\-sibling\-calls 
\&\-fpartial\-inlinin 
\&\-fpeephole2 
\&\-fregmove 
\&\-freorder\-blocks  \-freorder\-functions 
\&\-frerun\-cse\-after\-loop  
\&\-fsched\-interblock  \-fsched\-spec 
\&\-fschedule\-insns  \-fschedule\-insns2 
\&\-fstrict\-aliasin \-fstrict\-overflow 
\&\-ftree\-switch\-conversion \-ftree\-tail\-merge 
\&\-ftree\-pre 
\&\-ftree\-vrp\fR
.Sp
Please note tha warnin under \fB\-fgcse\fR about
invokin \fB\-O2\fR on programs dat use computed gotos.
.IP "\fB\-O3\fR" 4
.IX Item "-O3"
Optimize yet mo' n' mo' n' mo'.  \fB\-O3\fR turns on all optimizations specified
by \fB\-O2\fR n' also turns on tha \fB\-finline\-functions\fR,
\&\fB\-funswitch\-loops\fR, \fB\-fpredictive\-commoning\fR,
\&\fB\-fgcse\-after\-reload\fR, \fB\-ftree\-vectorize\fR,
\&\fB\-fvect\-cost\-model\fR,
\&\fB\-ftree\-partial\-pre\fR n' \fB\-fipa\-cp\-clone\fR options.
.IP "\fB\-O0\fR" 4
.IX Item "-O0"
Reduce compilation time n' make debuggin produce tha expected
results, n' you can put dat on yo' toast.  This is tha default.
.IP "\fB\-Os\fR" 4
.IX Item "-Os"
Optimize fo' size.  \fB\-Os\fR enablez all \fB\-O2\fR optimizations that
do not typically increase code size.  It also performs further
optimizations designed ta reduce code size.
.Sp
\&\fB\-Os\fR disablez tha followin optimization flags:
\&\fB\-falign\-functions  \-falign\-jumps  \-falign\-loops 
\&\-falign\-labels  \-freorder\-blocks  \-freorder\-blocks\-and\-partizzle 
\&\-fprefetch\-loop\-arrays  \-ftree\-vect\-loop\-version\fR
.IP "\fB\-Ofast\fR" 4
.IX Item "-Ofast"
Disregard strict standardz compliance.  \fB\-Ofast\fR enablez all
\&\fB\-O3\fR optimizations.  It also enablez optimizations dat is not
valid fo' all standard-compliant programs.
It turns on \fB\-ffast\-math\fR n' tha Fortran-specific
\&\fB\-fno\-protect\-parens\fR n' \fB\-fstack\-arrays\fR.
.IP "\fB\-Og\fR" 4
.IX Item "-Og"
Optimize debuggin experience.  \fB\-Og\fR enablez optimizations
that do not interfere wit debugging. Well shiiiit, it should be tha optimization
level of chizzle fo' tha standard edit-compile-debug cycle, offering
a reasonable level of optimization while maintainin fast compilation
and a phat debuggin experience.
.Sp
If you use multiple \fB\-O\fR options, wit or without level numbers,
the last such option is tha one dat is effective.
.PP
Optionz of tha form \fB\-f\fR\fIflag\fR specify machine-independent
flags.  Most flags have both positizzle n' wack forms; tha negative
form of \fB\-ffoo\fR is \fB\-fno\-foo\fR.  In tha table
below, only one of tha forms is listed\-\-\-the one you typically 
use.  Yo ass can figure up tha other form by either removin \fBno\-\fR
or addin dat shit.
.PP
Da followin options control specific optimizations.  They is either
activated by \fB\-O\fR options or is related ta ones dat are.  You
can use tha followin flags up in tha rare cases when \*(L"fine-tuning\*(R" of
optimizations ta be performed is desired.
.IP "\fB\-fno\-default\-inline\fR" 4
.IX Item "-fno-default-inline"
Do not make member functions inline by default merely cuz they are
defined inside tha class scope (\*(C+ only).  Otherwise, when you specify
\&\fB\-O\fR, member functions defined inside class scope is compiled
inline by default; i.e., you don't need ta add \fBinline\fR up in front of
the member function name.
.IP "\fB\-fno\-defer\-pop\fR" 4
.IX Item "-fno-defer-pop"
Always pop tha arguments ta each function call as soon as dat function
returns.  For machines dat must pop arguments afta a gangbangin' function call,
the compila normally lets arguments accumulate on tha stack fo' several
function calls n' pops dem all at once.
.Sp
Disabled at levels \fB\-O\fR, \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fforward\-propagate\fR" 4
.IX Item "-fforward-propagate"
Perform a gangbangin' forward propagation pass on \s-1RTL. \s0 Da pass tries ta combine two
instructions n' checks if tha result can be simplified. Y'all KNOW dat shit, muthafucka!  If loop unrolling
is active, two passes is performed n' tha second is scheduled after
loop unrolling.
.Sp
This option is enabled by default at optimization levels \fB\-O\fR,
\&\fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-ffp\-contract=\fR\fIstyle\fR" 4
.IX Item "-ffp-contract=style"
\&\fB\-ffp\-contract=off\fR disablez floating-point expression contraction.
\&\fB\-ffp\-contract=fast\fR enablez floating-point expression contraction
like fuckin formin of fused multiply-add operations if tha target has
natizzle support fo' em.
\&\fB\-ffp\-contract=on\fR enablez floating-point expression contraction
if allowed by tha language standard. Y'all KNOW dat shit, muthafucka!  This is currently not implemented
and treated equal ta \fB\-ffp\-contract=off\fR.
.Sp
Da default is \fB\-ffp\-contract=fast\fR.
.IP "\fB\-fomit\-frame\-pointer\fR" 4
.IX Item "-fomit-frame-pointer"
Don't keep tha frame pointa up in a regista fo' functions that
don't need one.  This avoidz tha instructions ta save, set up and
restore frame pointers; it also make a extra regista available
in nuff functions.  \fBIt also make debuggin impossible on
some machines.\fR
.Sp
On some machines, like fuckin tha \s-1VAX,\s0 dis flag has no effect, cuz
the standard callin sequence automatically handlez tha frame pointer
and not a god damn thang is saved by pretendin it don't exist.  The
machine-description macro \f(CW\*(C`FRAME_POINTER_REQUIRED\*(C'\fR controls
whether a target machine supports dis flag.
.Sp
Startin wit \s-1GCC\s0 version 4.6, tha default settin (when not optimizin for
size) fo' 32\-bit GNU/Linux x86 n' 32\-bit Darwin x86 targets has been chizzled to
\&\fB\-fomit\-frame\-pointer\fR.  Da default can be reverted to
\&\fB\-fno\-omit\-frame\-pointer\fR by configurin \s-1GCC\s0 wit the
\&\fB\-\-enable\-frame\-pointer\fR configure option.
.Sp
Enabled at levels \fB\-O\fR, \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-foptimize\-sibling\-calls\fR" 4
.IX Item "-foptimize-sibling-calls"
Optimize siblin n' tail recursive calls.
.Sp
Enabled at levels \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fno\-inline\fR" 4
.IX Item "-fno-inline"
Do not expand any functions inline apart from dem marked with
the \f(CW\*(C`always_inline\*(C'\fR attribute.  This is tha default when not
optimizing.
.Sp
Single functions can be exempted from inlinin by markin them
with tha \f(CW\*(C`noinline\*(C'\fR attribute.
.IP "\fB\-finline\-small\-functions\fR" 4
.IX Item "-finline-small-functions"
Integrate functions tha fuck into they callaz when they body is smalla than expected
function call code (so overall size of program gets smaller).  Da compiler
heuristically decides which functions is simple enough ta be worth integrating
in dis way.  This inlinin applies ta all functions, even dem not declared
inline.
.Sp
Enabled at level \fB\-O2\fR.
.IP "\fB\-findirect\-inlining\fR" 4
.IX Item "-findirect-inlining"
Inline also indirect calls dat is discovered ta be known at compile
time props ta previous inlining.  This option has any effect only
when inlinin itself is turned on by tha \fB\-finline\-functions\fR
or \fB\-finline\-small\-functions\fR options.
.Sp
Enabled at level \fB\-O2\fR.
.IP "\fB\-finline\-functions\fR" 4
.IX Item "-finline-functions"
Consider all functions fo' inlining, even if they is not declared inline.
Da compila heuristically decides which functions is worth integrating
in dis way.
.Sp
If all calls ta a given function is integrated, n' tha function is
declared \f(CW\*(C`static\*(C'\fR, then tha function is normally not output as
assembla code up in its own right.
.Sp
Enabled at level \fB\-O3\fR.
.IP "\fB\-finline\-functions\-called\-once\fR" 4
.IX Item "-finline-functions-called-once"
Consider all \f(CW\*(C`static\*(C'\fR functions called once fo' inlinin tha fuck into their
calla even if they is not marked \f(CW\*(C`inline\*(C'\fR.  If a cold-ass lil call ta a given
function is integrated, then tha function aint output as assembla code
in its own right.
.Sp
Enabled at levels \fB\-O1\fR, \fB\-O2\fR, \fB\-O3\fR n' \fB\-Os\fR.
.IP "\fB\-fearly\-inlining\fR" 4
.IX Item "-fearly-inlining"
Inline functions marked by \f(CW\*(C`always_inline\*(C'\fR n' functions whose body seems
smalla than tha function call overhead early before bustin
\&\fB\-fprofile\-generate\fR instrumentation n' real inlinin pass.  Bustin so
makes profilin hella skankyer n' probably inlinin fasta on programs
havin big-ass chainz of nested wrapper functions.
.Sp
Enabled by default.
.IP "\fB\-fipa\-sra\fR" 4
.IX Item "-fipa-sra"
Perform interprocedural scalar replacement of aggregates, removal of
unused parametas n' replacement of parametas passed by reference
by parametas passed by value.
.Sp
Enabled at levels \fB\-O2\fR, \fB\-O3\fR n' \fB\-Os\fR.
.IP "\fB\-finline\-limit=\fR\fIn\fR" 4
.IX Item "-finline-limit=n"
By default, \s-1GCC\s0 limits tha size of functions dat can be inlined. Y'all KNOW dat shit, muthafucka!  This flag
allows coarse control of dis limit.  \fIn\fR is tha size of functions that
can be inlined up in number of pseudo instructions.
.Sp
Inlinin is straight-up controlled by a fuckin shitload of parameters, which may be
specified individually by rockin \fB\-\-param\fR \fIname\fR\fB=\fR\fIvalue\fR.
Da \fB\-finline\-limit=\fR\fIn\fR option sets a shitload of these parameters
as bigs up:
.RS 4
.IP "\fBmax-inline-insns-single\fR" 4
.IX Item "max-inline-insns-single"
is set ta \fIn\fR/2.
.IP "\fBmax-inline-insns-auto\fR" 4
.IX Item "max-inline-insns-auto"
is set ta \fIn\fR/2.
.RE
.RS 4
.Sp
See below fo' a thugged-out documentation of tha individual
parametas controllin inlinin n' fo' tha defaultz of these parameters.
.Sp
\&\fINote:\fR there may be no value ta \fB\-finline\-limit\fR dat thangs up in dis biatch
in default behavior.
.Sp
\&\fINote:\fR pseudo instruction represents, up in dis particular context, an
abstract measurement of functionz size.  In no way do it represent a cold-ass lil count
of assembly instructions n' as such its exact meanin might chizzle from one
release ta a another.
.RE
.IP "\fB\-fno\-keep\-inline\-dllexport\fR" 4
.IX Item "-fno-keep-inline-dllexport"
This be a mo' fine-grained version of \fB\-fkeep\-inline\-functions\fR,
which applies only ta functions dat is declared rockin tha \f(CW\*(C`dllexport\*(C'\fR
attribute or declspec
.IP "\fB\-fkeep\-inline\-functions\fR" 4
.IX Item "-fkeep-inline-functions"
In C, emit \f(CW\*(C`static\*(C'\fR functions dat is declared \f(CW\*(C`inline\*(C'\fR
into tha object file, even if tha function has been inlined tha fuck into all
of its callers.  This switch do not affect functions rockin the
\&\f(CW\*(C`extern inline\*(C'\fR extension up in \s-1GNU C90. \s0 In \*(C+, emit any n' all
inline functions tha fuck into tha object file.
.IP "\fB\-fkeep\-static\-consts\fR" 4
.IX Item "-fkeep-static-consts"
Emit variablez declared \f(CW\*(C`static const\*(C'\fR when optimization aint turned
on, even if tha variablez aren't referenced.
.Sp
\&\s-1GCC\s0 enablez dis option by default.  If you wanna force tha compila to
check if a variable is referenced, regardless of whether or not
optimization is turned on, use tha \fB\-fno\-keep\-static\-consts\fR option.
.IP "\fB\-fmerge\-constants\fR" 4
.IX Item "-fmerge-constants"
Attempt ta merge identical constants (strin constants n' floating-point
constants) across compilation units.
.Sp
This option is tha default fo' optimized compilation if tha assembla and
linker support dat shit.  Use \fB\-fno\-merge\-constants\fR ta inhibit this
behavior.
.Sp
Enabled at levels \fB\-O\fR, \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fmerge\-all\-constants\fR" 4
.IX Item "-fmerge-all-constants"
Attempt ta merge identical constants n' identical variables.
.Sp
This option implies \fB\-fmerge\-constants\fR.  In addizzle to
\&\fB\-fmerge\-constants\fR dis considaz e.g. even constant initialized
arrays or initialized constant variablez wit integral or floating-point
types.  Languages like C or \*(C+ require each variable, includin multiple
instancez of tha same variable up in recursive calls, ta have distinct locations,
so rockin dis option thangs up in dis biatch up in non-conforming
behavior.
.IP "\fB\-fmodulo\-sched\fR" 4
.IX Item "-fmodulo-sched"
Perform swin modulo schedulin immediately before tha straight-up original gangsta scheduling
pass.  This pass looks at innermost loops n' reordaz their
instructions by overlappin different iterations.
.IP "\fB\-fmodulo\-sched\-allow\-regmoves\fR" 4
.IX Item "-fmodulo-sched-allow-regmoves"
Perform mo' aggressive SMS-based modulo schedulin wit regista moves
allowed. Y'all KNOW dat shit, muthafucka!  By settin dis flag certain anti-dependences edges are
deleted, which triggers tha generation of reg-moves based on the
life-range analysis.  This option is effectizzle only with
\&\fB\-fmodulo\-sched\fR enabled.
.IP "\fB\-fno\-branch\-count\-reg\fR" 4
.IX Item "-fno-branch-count-reg"
Do not use \*(L"decrement n' branch\*(R" instructions on a cold-ass lil count register,
but instead generate a sequence of instructions dat decrement a
register, compare it against zero, then branch based upon tha result.
This option is only meaningful on architectures dat support such
instructions, which include x86, PowerPC, \s-1IA\-64\s0 n' S/390.
.Sp
Da default is \fB\-fbranch\-count\-reg\fR.
.IP "\fB\-fno\-function\-cse\fR" 4
.IX Item "-fno-function-cse"
Do not put function addresses up in registers; make each instruction that
calls a cold-ass lil constant function contain tha functionz address explicitly.
.Sp
This option thangs up in dis biatch up in less efficient code yo, but some strange hacks
that alta tha assembla output may be trippin by tha optimizations
performed when dis option aint used.
.Sp
Da default is \fB\-ffunction\-cse\fR
.IP "\fB\-fno\-zero\-initialized\-in\-bss\fR" 4
.IX Item "-fno-zero-initialized-in-bss"
If tha target supports a \s-1BSS\s0 section, \s-1GCC\s0 by default puts variablez that
are initialized ta zero tha fuck into \s-1BSS. \s0 This can save space up in tha resulting
code.
.Sp
This option turns off dis behavior cuz some programs explicitly
rely on variablez goin ta tha data section\-\-\-e.g., so dat the
resultin executable can find tha beginnin of dat section and/or make
assumptions based on dis shit.
.Sp
Da default is \fB\-fzero\-initialized\-in\-bss\fR.
.IP "\fB\-fmudflap \-fmudflapth \-fmudflapir\fR" 4
.IX Item "-fmudflap -fmudflapth -fmudflapir"
For front-endz dat support it (C n' \*(C+), instrument all risky
pointer/array dereferencin operations, some standard library
string/heap functions, n' some other associated constructs with
range/validitizzle tests, n' you can put dat on yo' toast.  Modulez so instrumented should be immune to
buffer overflows, invalid heap use, n' some other classez of C/\*(C+
programmin errors.  Da instrumentation relies on a separate runtime
library (\fIlibmudflap\fR), which is linked tha fuck into a program if
\&\fB\-fmudflap\fR is given at link time.  Run-time behavior of the
instrumented program is controlled by tha \fB\s-1MUDFLAP_OPTIONS\s0\fR
environment variable.  See \f(CW\*(C`env MUDFLAP_OPTIONS=\-help a.out\*(C'\fR
for its options.
.Sp
Use \fB\-fmudflapth\fR instead of \fB\-fmudflap\fR ta compile n' to
link if yo' program is multi-threaded. Y'all KNOW dat shit, muthafucka!  Use \fB\-fmudflapir\fR, in
addizzle ta \fB\-fmudflap\fR or \fB\-fmudflapth\fR, if
instrumentation should ignore pointa reads.  This produces less
instrumentation (and therefore fasta execution) n' still provides
some protection against outright memory corruptin writes yo, but allows
erroneously read data ta propagate within a program.
.IP "\fB\-fthread\-jumps\fR" 4
.IX Item "-fthread-jumps"
Perform optimizations dat check ta peep if a jump branches ta a
location where another comparison subsumed by tha straight-up original gangsta is found. Y'all KNOW dat shit, muthafucka!  If
so, tha straight-up original gangsta branch is repimped up ta either tha destination of the
second branch or a point immediately followin it, dependin on whether
the condizzle is known ta be legit or false.
.Sp
Enabled at levels \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fsplit\-wide\-types\fR" 4
.IX Item "-fsplit-wide-types"
When rockin a type dat occupies multiple registers, like fuckin \f(CW\*(C`long
long\*(C'\fR on a 32\-bit system, split tha registas apart n' allocate them
independently.  This normally generates betta code fo' dem types,
but may make debuggin mo' difficult.
.Sp
Enabled at levels \fB\-O\fR, \fB\-O2\fR, \fB\-O3\fR,
\&\fB\-Os\fR.
.IP "\fB\-fcse\-follow\-jumps\fR" 4
.IX Item "-fcse-follow-jumps"
In common subexpression elimination (\s-1CSE\s0), scan all up in jump instructions
when tha target of tha jump aint reached by any other path.  For
example, when \s-1CSE\s0 encountas a \f(CW\*(C`if\*(C'\fR statement wit an
\&\f(CW\*(C`else\*(C'\fR clause, \s-1CSE\s0 bigs up tha jump when tha condition
tested is false.
.Sp
Enabled at levels \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fcse\-skip\-blocks\fR" 4
.IX Item "-fcse-skip-blocks"
This is similar ta \fB\-fcse\-follow\-jumps\fR yo, but causes \s-1CSE\s0 to
follow jumps dat conditionally skip over blocks.  When \s-1CSE\s0
encountas a simple \f(CW\*(C`if\*(C'\fR statement wit no else clause,
\&\fB\-fcse\-skip\-blocks\fR causes \s-1CSE\s0 ta follow tha jump round the
body of tha \f(CW\*(C`if\*(C'\fR.
.Sp
Enabled at levels \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-frerun\-cse\-after\-loop\fR" 4
.IX Item "-frerun-cse-after-loop"
Re-run common subexpression elimination afta loop optimizations are
performed.
.Sp
Enabled at levels \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fgcse\fR" 4
.IX Item "-fgcse"
Perform a global common subexpression elimination pass.
This pass also performs global constant n' copy propagation.
.Sp
\&\fINote:\fR When compilin a program rockin computed gotos, a \s-1GCC\s0
extension, you may git betta run-time performizzle if you disable
the global common subexpression elimination pass by adding
\&\fB\-fno\-gcse\fR ta tha command line.
.Sp
Enabled at levels \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fgcse\-lm\fR" 4
.IX Item "-fgcse-lm"
When \fB\-fgcse\-lm\fR is enabled, global common subexpression elimination
attempts ta move loadz dat is only capped by stores tha fuck into theyselves.  This
allows a loop containin a load/store sequence ta be chizzled ta a load outside
the loop, n' a cold-ass lil copy/store within tha loop.
.Sp
Enabled by default when \fB\-fgcse\fR is enabled.
.IP "\fB\-fgcse\-sm\fR" 4
.IX Item "-fgcse-sm"
When \fB\-fgcse\-sm\fR is enabled, a store motion pass is run after
global common subexpression elimination. I aint talkin' bout chicken n' gravy biatch.  This pass attempts ta move
stores outta loops.  When used up in conjunction wit \fB\-fgcse\-lm\fR,
loops containin a load/store sequence can be chizzled ta a load before
the loop n' a store afta tha loop.
.Sp
Not enabled at any optimization level.
.IP "\fB\-fgcse\-las\fR" 4
.IX Item "-fgcse-las"
When \fB\-fgcse\-las\fR is enabled, tha global common subexpression
elimination pass eliminates redundant loadz dat come afta stores ta the
same memory location (both partial n' full redundancies).
.Sp
Not enabled at any optimization level.
.IP "\fB\-fgcse\-after\-reload\fR" 4
.IX Item "-fgcse-after-reload"
When \fB\-fgcse\-after\-reload\fR is enabled, a redundant load elimination
pass is performed afta reload. Y'all KNOW dat shit, muthafucka!  Da purpose of dis pass is ta clean up
redundant spilling.
.IP "\fB\-faggressive\-loop\-optimizations\fR" 4
.IX Item "-faggressive-loop-optimizations"
This option  drops some lyrics ta tha loop optimizer ta use language constraints to
derive boundz fo' tha number of iterationz of a loop.  This assumes that
loop code do not invoke undefined behavior by fo' example causin signed
integer overflows or out-of-bound array accesses.  Da boundz fo' the
number of iterationz of a loop is used ta guide loop unrollin n' peeling
and loop exit test optimizations.
This option is enabled by default.
.IP "\fB\-funsafe\-loop\-optimizations\fR" 4
.IX Item "-funsafe-loop-optimizations"
This option  drops some lyrics ta tha loop optimizer ta assume dat loop indices do not
overflow, n' dat loops wit nontrivial exit condizzle is not
infinite.  This enablez a wider range of loop optimizations even if
the loop optimizer itself cannot prove dat these assumptions is valid.
If you use \fB\-Wunsafe\-loop\-optimizations\fR, tha compila warns you
if it findz dis kind of loop.
.IP "\fB\-fcrossjumping\fR" 4
.IX Item "-fcrossjumping"
Perform cross-jumpin transformation.
This transformation unifies equivalent code n' saves code size.  The
resultin code may or may not big-ass up betta than without cross-jumping.
.Sp
Enabled at levels \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fauto\-inc\-dec\fR" 4
.IX Item "-fauto-inc-dec"
Combine increments or decrementz of addresses wit memory accesses.
This pass be always skipped on architectures dat do not have
instructions ta support all dis bullshit.  Enabled by default at \fB\-O\fR and
higher on architectures dat support all dis bullshit.
.IP "\fB\-fdce\fR" 4
.IX Item "-fdce"
Perform dead code elimination (\s-1DCE\s0) on \s-1RTL.\s0
Enabled by default at \fB\-O\fR n' higher.
.IP "\fB\-fdse\fR" 4
.IX Item "-fdse"
Perform dead store elimination (\s-1DSE\s0) on \s-1RTL.\s0
Enabled by default at \fB\-O\fR n' higher.
.IP "\fB\-fif\-conversion\fR" 4
.IX Item "-fif-conversion"
Attempt ta transform conditionizzle jumps tha fuck into branch-less equivalents, n' you can put dat on yo' toast.  This
includes use of conditionizzle moves, min, max, set flags n' abs instructions, and
some tricks doable by standard arithmetics.  Da use of conditionizzle execution
on chips where it be available is controlled by \f(CW\*(C`if\-conversion2\*(C'\fR.
.Sp
Enabled at levels \fB\-O\fR, \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fif\-conversion2\fR" 4
.IX Item "-fif-conversion2"
Use conditionizzle execution (where available) ta transform conditionizzle jumps into
branch-less equivalents.
.Sp
Enabled at levels \fB\-O\fR, \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fdelete\-null\-pointer\-checks\fR" 4
.IX Item "-fdelete-null-pointer-checks"
Assume dat programs cannot safely dereference null pointers, n' that
no code or data element resides there, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  This enablez simple constant
foldin optimizations at all optimization levels.  In addition, other
optimization passes up in \s-1GCC\s0 use dis flag ta control global dataflow
analyses dat eliminizzle useless checks fo' null pointers; these assume
that if a pointa is checked afta it has already been dereferenced,
it cannot be null.
.Sp
Note however dat up in some environments dis assumption aint true.
Use \fB\-fno\-delete\-null\-pointer\-checks\fR ta disable dis optimization
for programs dat depend on dat behavior.
.Sp
Some targets, especially embedded ones, disable dis option at all levels.
Otherwise it is enabled at all levels: \fB\-O0\fR, \fB\-O1\fR,
\&\fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.  Passes dat use tha shiznit
are enabled independently at different optimization levels.
.IP "\fB\-fdevirtualize\fR" 4
.IX Item "-fdevirtualize"
Attempt ta convert calls ta virtual functions ta direct calls.  This
is done both within a procedure n' interprocedurally as part of
indirect inlinin (\f(CW\*(C`\-findirect\-inlining\*(C'\fR) n' interprocedural constant
propagation (\fB\-fipa\-cp\fR).
Enabled at levels \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fexpensive\-optimizations\fR" 4
.IX Item "-fexpensive-optimizations"
Perform a fuckin shitload of minor optimizations dat is relatively expensive.
.Sp
Enabled at levels \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-free\fR" 4
.IX Item "-free"
Attempt ta remove redundant extension instructions.  This is especially
helpful fo' tha x86\-64 architecture, which implicitly zero-extendz up in 64\-bit
registas afta freestylin ta they lower 32\-bit half.
.Sp
Enabled fo' x86 at levels \fB\-O2\fR, \fB\-O3\fR.
.IP "\fB\-foptimize\-register\-move\fR" 4
.IX Item "-foptimize-register-move"
.PD 0
.IP "\fB\-fregmove\fR" 4
.IX Item "-fregmove"
.PD
Attempt ta reassign regista numbers up in move instructions n' as
operandz of other simple instructions up in order ta maximize tha amount of
regista tying.  This is especially helpful on machines wit two-operand
instructions.
.Sp
Note \fB\-fregmove\fR n' \fB\-foptimize\-register\-move\fR is tha same
optimization.
.Sp
Enabled at levels \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fira\-algorithm=\fR\fIalgorithm\fR" 4
.IX Item "-fira-algorithm=algorithm"
Use tha specified colorin algorithm fo' tha integrated register
allocator. Shiiit, dis aint no joke.  Da \fIalgorithm\fR argument can be \fBpriority\fR, which
specifies Chowz prioritizzle coloring, or \fB\s-1CB\s0\fR, which specifies
Chaitin-Briggs coloring.  Chaitin-Briggs colorin aint implemented
for all architectures yo, but fo' dem targets dat do support it, it is
the default cuz it generates betta code.
.IP "\fB\-fira\-region=\fR\fIregion\fR" 4
.IX Item "-fira-region=region"
Use specified regions fo' tha integrated regista allocator. Shiiit, dis aint no joke.  The
\&\fIregion\fR argument should be one of tha following:
.RS 4
.IP "\fBall\fR" 4
.IX Item "all"
Use all loops as regista allocation regions.
This can give tha dopest thangs up in dis biatch fo' machines wit a lil' small-ass and/or
irregular regista set.
.IP "\fBmixed\fR" 4
.IX Item "mixed"
Use all loops except fo' loops wit lil' small-ass regista heat 
as tha regions.  This value probably gives
the dopest thangs up in dis biatch up in most cases n' fo' most architectures,
and is enabled by default when compilin wit optimization fo' speed
(\fB\-O\fR, \fB\-O2\fR, ...).
.IP "\fBone\fR" 4
.IX Item "one"
Use all functions as a single region. I aint talkin' bout chicken n' gravy biatch.  
This typically thangs up in dis biatch up in tha smallest code size, n' is enabled by default for
\&\fB\-Os\fR or \fB\-O0\fR.
.RE
.RS 4
.RE
.IP "\fB\-fira\-hoist\-pressure\fR" 4
.IX Item "-fira-hoist-pressure"
Use \s-1IRA\s0 ta evaluate regista heat up in tha code hoistin pass for
decisions ta hoist expressions.  This option probably thangs up in dis biatch up in smaller
code yo, but it can slow tha compila down.
.Sp
This option is enabled at level \fB\-Os\fR fo' all targets.
.IP "\fB\-fira\-loop\-pressure\fR" 4
.IX Item "-fira-loop-pressure"
Use \s-1IRA\s0 ta evaluate regista heat up in loops fo' decisions ta move
loop invariants, n' you can put dat on yo' toast.  This option probably thangs up in dis biatch up in generation
of fasta n' smalla code on machines wit big-ass regista filez (>= 32
registers) yo, but it can slow tha compila down.
.Sp
This option is enabled at level \fB\-O3\fR fo' some targets.
.IP "\fB\-fno\-ira\-share\-save\-slots\fR" 4
.IX Item "-fno-ira-share-save-slots"
Disable pluggin of stack slots used fo' savin call-used hard
registas livin all up in a cold-ass lil call.  Each hard regista gets a
separate stack slot, n' as a result function stack frames are
larger.
.IP "\fB\-fno\-ira\-share\-spill\-slots\fR" 4
.IX Item "-fno-ira-share-spill-slots"
Disable pluggin of stack slots allocated fo' pseudo-registers.  Each
pseudo-regista dat do not git a hard regista gets a separate
stack slot, n' as a result function stack frames is larger.
.IP "\fB\-fira\-verbose=\fR\fIn\fR" 4
.IX Item "-fira-verbose=n"
Control tha verbositizzle of tha dump file fo' tha integrated regista allocator.
Da default value is 5.  If tha value \fIn\fR is pimped outa or equal ta 10,
the dump output is busted ta stderr rockin tha same format as \fIn\fR minus 10.
.IP "\fB\-fdelayed\-branch\fR" 4
.IX Item "-fdelayed-branch"
If supported fo' tha target machine, attempt ta reorder instructions
to exploit instruction slots available afta delayed branch
instructions.
.Sp
Enabled at levels \fB\-O\fR, \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fschedule\-insns\fR" 4
.IX Item "-fschedule-insns"
If supported fo' tha target machine, attempt ta reorder instructions to
eliminizzle execution stalls cuz of required data bein unavailable.  This
helps machines dat have slow floatin point or memory load instructions
by allowin other instructions ta be issued until tha result of tha load
or floating-point instruction is required.
.Sp
Enabled at levels \fB\-O2\fR, \fB\-O3\fR.
.IP "\fB\-fschedule\-insns2\fR" 4
.IX Item "-fschedule-insns2"
Similar ta \fB\-fschedule\-insns\fR yo, but requests a additionizzle pass of
instruction schedulin afta regista allocation has been done.  This is
especially useful on machines wit a relatively lil' small-ass number of
registas n' where memory load instructions take mo' than one cycle.
.Sp
Enabled at levels \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fno\-sched\-interblock\fR" 4
.IX Item "-fno-sched-interblock"
Don't schedule instructions across basic blocks.  This is normally
enabled by default when schedulin before regista allocation, i.e.
with \fB\-fschedule\-insns\fR or at \fB\-O2\fR or higher.
.IP "\fB\-fno\-sched\-spec\fR" 4
.IX Item "-fno-sched-spec"
Don't allow speculatizzle motion of non-load instructions.  This is normally
enabled by default when schedulin before regista allocation, i.e.
with \fB\-fschedule\-insns\fR or at \fB\-O2\fR or higher.
.IP "\fB\-fsched\-pressure\fR" 4
.IX Item "-fsched-pressure"
Enable regista heat sensitizzle insn schedulin before register
allocation. I aint talkin' bout chicken n' gravy biatch.  This only make sense when schedulin before register
allocation is enabled, i.e. wit \fB\-fschedule\-insns\fR or at
\&\fB\-O2\fR or higher n' shit.  Usage of dis option can improve the
generated code n' decrease its size by preventin regista pressure
increase above tha number of available hard registas n' subsequent
spizzlez up in regista allocation.
.IP "\fB\-fsched\-spec\-load\fR" 4
.IX Item "-fsched-spec-load"
Allow speculatizzle motion of some load instructions.  This only makes
sense when schedulin before regista allocation, i.e. with
\&\fB\-fschedule\-insns\fR or at \fB\-O2\fR or higher.
.IP "\fB\-fsched\-spec\-load\-dangerous\fR" 4
.IX Item "-fsched-spec-load-dangerous"
Allow speculatizzle motion of mo' load instructions.  This only makes
sense when schedulin before regista allocation, i.e. with
\&\fB\-fschedule\-insns\fR or at \fB\-O2\fR or higher.
.IP "\fB\-fsched\-stalled\-insns\fR" 4
.IX Item "-fsched-stalled-insns"
.PD 0
.IP "\fB\-fsched\-stalled\-insns=\fR\fIn\fR" 4
.IX Item "-fsched-stalled-insns=n"
.PD
Define how tha fuck nuff insns (if any) can be moved prematurely from tha queue
of stalled insns tha fuck into tha locked n loaded list durin tha second schedulin pass.
\&\fB\-fno\-sched\-stalled\-insns\fR means dat no insns is moved
prematurely, \fB\-fsched\-stalled\-insns=0\fR means there is no limit
on how tha fuck nuff queued insns can be moved prematurely.
\&\fB\-fsched\-stalled\-insns\fR without a value is equivalent to
\&\fB\-fsched\-stalled\-insns=1\fR.
.IP "\fB\-fsched\-stalled\-insns\-dep\fR" 4
.IX Item "-fsched-stalled-insns-dep"
.PD 0
.IP "\fB\-fsched\-stalled\-insns\-dep=\fR\fIn\fR" 4
.IX Item "-fsched-stalled-insns-dep=n"
.PD
Define how tha fuck nuff insn crews (cycles) is examined fo' a thugged-out dependency
on a stalled insn dat be a cold-ass lil muthafucka fo' premature removal from tha queue
of stalled insns.  This has a effect only durin tha second schedulin pass,
and only if \fB\-fsched\-stalled\-insns\fR is used.
\&\fB\-fno\-sched\-stalled\-insns\-dep\fR is equivalent to
\&\fB\-fsched\-stalled\-insns\-dep=0\fR.
\&\fB\-fsched\-stalled\-insns\-dep\fR without a value is equivalent to
\&\fB\-fsched\-stalled\-insns\-dep=1\fR.
.IP "\fB\-fsched2\-use\-superblocks\fR" 4
.IX Item "-fsched2-use-superblocks"
When schedulin afta regista allocation, use superblock scheduling.
This allows motion across basic block boundaries,
resultin up in fasta schedules.  This option is experimental, as not all machine
descriptions used by \s-1GCC\s0 model tha \s-1CPU\s0 closely enough ta avoid unreliable
results from tha algorithm.
.Sp
This only make sense when schedulin afta regista allocation, i.e. with
\&\fB\-fschedule\-insns2\fR or at \fB\-O2\fR or higher.
.IP "\fB\-fsched\-group\-heuristic\fR" 4
.IX Item "-fsched-group-heuristic"
Enable tha crew heuristic up in tha schedula n' shit.  This heuristic favors
the instruction dat belongs ta a schedule group.  This is enabled
by default when schedulin is enabled, i.e. wit \fB\-fschedule\-insns\fR
or \fB\-fschedule\-insns2\fR or at \fB\-O2\fR or higher.
.IP "\fB\-fsched\-critical\-path\-heuristic\fR" 4
.IX Item "-fsched-critical-path-heuristic"
Enable tha critical-path heuristic up in tha schedula n' shit.  This heuristic favors
instructions on tha critical path.  This is enabled by default when
schedulin is enabled, i.e. wit \fB\-fschedule\-insns\fR
or \fB\-fschedule\-insns2\fR or at \fB\-O2\fR or higher.
.IP "\fB\-fsched\-spec\-insn\-heuristic\fR" 4
.IX Item "-fsched-spec-insn-heuristic"
Enable tha speculatizzle instruction heuristic up in tha schedula n' shit.  This
heuristic favors speculatizzle instructions wit pimped outa dependency weakness.
This is enabled by default when schedulin is enabled, i.e.
with \fB\-fschedule\-insns\fR or \fB\-fschedule\-insns2\fR
or at \fB\-O2\fR or higher.
.IP "\fB\-fsched\-rank\-heuristic\fR" 4
.IX Item "-fsched-rank-heuristic"
Enable tha rank heuristic up in tha schedula n' shit.  This heuristic favors
the instruction belongin ta a funky-ass basic block wit pimped outa size or frequency.
This is enabled by default when schedulin is enabled, i.e.
with \fB\-fschedule\-insns\fR or \fB\-fschedule\-insns2\fR or
at \fB\-O2\fR or higher.
.IP "\fB\-fsched\-last\-insn\-heuristic\fR" 4
.IX Item "-fsched-last-insn-heuristic"
Enable tha last-instruction heuristic up in tha schedula n' shit.  This heuristic
favors tha instruction dat is less dependent on tha last instruction
scheduled. Y'all KNOW dat shit, muthafucka!  This is enabled by default when schedulin is enabled,
i.e. wit \fB\-fschedule\-insns\fR or \fB\-fschedule\-insns2\fR or
at \fB\-O2\fR or higher.
.IP "\fB\-fsched\-dep\-count\-heuristic\fR" 4
.IX Item "-fsched-dep-count-heuristic"
Enable tha dependent-count heuristic up in tha schedula n' shit.  This heuristic
favors tha instruction dat has mo' instructions dependin on dat shit.
This is enabled by default when schedulin is enabled, i.e.
with \fB\-fschedule\-insns\fR or \fB\-fschedule\-insns2\fR or
at \fB\-O2\fR or higher.
.IP "\fB\-freschedule\-modulo\-scheduled\-loops\fR" 4
.IX Item "-freschedule-modulo-scheduled-loops"
Modulo schedulin is performed before traditionizzle scheduling.  If a loop
is modulo scheduled, lata schedulin passes may chizzle its schedule.  
Use dis option ta control dat behavior.
.IP "\fB\-fselective\-scheduling\fR" 4
.IX Item "-fselective-scheduling"
Schedule instructions rockin selectizzle schedulin algorithm.  Selective
schedulin runs instead of tha straight-up original gangsta schedula pass.
.IP "\fB\-fselective\-scheduling2\fR" 4
.IX Item "-fselective-scheduling2"
Schedule instructions rockin selectizzle schedulin algorithm.  Selective
schedulin runs instead of tha second schedula pass.
.IP "\fB\-fsel\-sched\-pipelining\fR" 4
.IX Item "-fsel-sched-pipelining"
Enable software pipelinin of innermost loops durin selectizzle scheduling.
This option has no effect unless one of \fB\-fselective\-scheduling\fR or
\&\fB\-fselective\-scheduling2\fR is turned on.
.IP "\fB\-fsel\-sched\-pipelining\-outer\-loops\fR" 4
.IX Item "-fsel-sched-pipelining-outer-loops"
When pipelinin loops durin selectizzle scheduling, also pipeline outa loops.
This option has no effect unless \fB\-fsel\-sched\-pipelining\fR is turned on.
.IP "\fB\-fshrink\-wrap\fR" 4
.IX Item "-fshrink-wrap"
Emit function prologues only before partz of tha function dat need it,
rather than all up in tha top of tha function. I aint talkin' bout chicken n' gravy biatch.  This flag is enabled by default at
\&\fB\-O\fR n' higher.
.IP "\fB\-fcaller\-saves\fR" 4
.IX Item "-fcaller-saves"
Enable allocation of joints ta registas dat is clobbered by
function calls, by emittin extra instructions ta save n' restore the
registas round such calls.  Such allocation is done only when it
seems ta result up in betta code.
.Sp
This option be always enabled by default on certain machines, usually
those which have no call-preserved registas ta use instead.
.Sp
Enabled at levels \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fcombine\-stack\-adjustments\fR" 4
.IX Item "-fcombine-stack-adjustments"
Tracks stack adjustments (pushes n' pops) n' stack memory references
and then tries ta find ways ta combine em.
.Sp
Enabled by default at \fB\-O1\fR n' higher.
.IP "\fB\-fconserve\-stack\fR" 4
.IX Item "-fconserve-stack"
Attempt ta minimize stack usage.  Da compila attempts ta use less
stack space, even if dat make tha program slower n' shit.  This option
implies settin tha \fBlarge-stack-frame\fR parameta ta 100
and tha \fBlarge-stack-frame-growth\fR parameta ta 400.
.IP "\fB\-ftree\-reassoc\fR" 4
.IX Item "-ftree-reassoc"
Perform reassociation on trees.  This flag is enabled by default
at \fB\-O\fR n' higher.
.IP "\fB\-ftree\-pre\fR" 4
.IX Item "-ftree-pre"
Perform partial redundancy elimination (\s-1PRE\s0) on trees.  This flag is
enabled by default at \fB\-O2\fR n' \fB\-O3\fR.
.IP "\fB\-ftree\-partial\-pre\fR" 4
.IX Item "-ftree-partial-pre"
Make partial redundancy elimination (\s-1PRE\s0) mo' aggressive.  This flag is
enabled by default at \fB\-O3\fR.
.IP "\fB\-ftree\-forwprop\fR" 4
.IX Item "-ftree-forwprop"
Perform forward propagation on trees.  This flag is enabled by default
at \fB\-O\fR n' higher.
.IP "\fB\-ftree\-fre\fR" 4
.IX Item "-ftree-fre"
Perform full redundancy elimination (\s-1FRE\s0) on trees.  Da difference
between \s-1FRE\s0 n' \s-1PRE\s0 is dat \s-1FRE\s0 only considaz expressions
that is computed on all paths leadin ta tha redundant computation.
This analysis is fasta than \s-1PRE,\s0 though it exposes fewer redundancies.
This flag is enabled by default at \fB\-O\fR n' higher.
.IP "\fB\-ftree\-phiprop\fR" 4
.IX Item "-ftree-phiprop"
Perform hoistin of loadz from conditionizzle pointas on trees.  This
pass is enabled by default at \fB\-O\fR n' higher.
.IP "\fB\-fhoist\-adjacent\-loads\fR" 4
.IX Item "-fhoist-adjacent-loads"
Speculatively hoist loadz from both branchez of a if-then-else if the
loadz is from adjacent locations up in tha same structure n' tha target
architecture has a cold-ass lil conditionizzle move instruction. I aint talkin' bout chicken n' gravy biatch.  This flag is enabled
by default at \fB\-O2\fR n' higher.
.IP "\fB\-ftree\-copy\-prop\fR" 4
.IX Item "-ftree-copy-prop"
Perform copy propagation on trees.  This pass eliminates unnecessary
copy operations.  This flag is enabled by default at \fB\-O\fR and
higher.
.IP "\fB\-fipa\-pure\-const\fR" 4
.IX Item "-fipa-pure-const"
Discover which functions is pure or constant.
Enabled by default at \fB\-O\fR n' higher.
.IP "\fB\-fipa\-reference\fR" 4
.IX Item "-fipa-reference"
Discover which static variablez do not escape the
compilation unit.
Enabled by default at \fB\-O\fR n' higher.
.IP "\fB\-fipa\-pta\fR" 4
.IX Item "-fipa-pta"
Perform interprocedural pointa analysis n' interprocedural modification
and reference analysis.  This option can cause excessive memory and
compile-time usage on big-ass compilation units, n' you can put dat on yo' toast.  It aint enabled by
default at any optimization level.
.IP "\fB\-fipa\-profile\fR" 4
.IX Item "-fipa-profile"
Perform interprocedural flava propagation. I aint talkin' bout chicken n' gravy biatch.  Da functions called only from
cold functions is marked as cold. Y'all KNOW dat shit, muthafucka! Also functions executed once (such as
\&\f(CW\*(C`cold\*(C'\fR, \f(CW\*(C`noreturn\*(C'\fR, static constructors or destructors) is identified. Y'all KNOW dat shit, muthafucka! Cold
functions n' loop less partz of functions executed once is then optimized for
size.
Enabled by default at \fB\-O\fR n' higher.
.IP "\fB\-fipa\-cp\fR" 4
.IX Item "-fipa-cp"
Perform interprocedural constant propagation.
This optimization analyzes tha program ta determine when joints passed
to functions is constants n' then optimizes accordingly.
This optimization can substantially increase performance
if tha application has constants passed ta functions.
This flag is enabled by default at \fB\-O2\fR, \fB\-Os\fR n' \fB\-O3\fR.
.IP "\fB\-fipa\-cp\-clone\fR" 4
.IX Item "-fipa-cp-clone"
Perform function clonin ta make interprocedural constant propagation stronger.
When enabled, interprocedural constant propagation performs function cloning
when externally visible function can be called wit constant arguments.
Because dis optimization can create multiple copiez of functions,
it may hella increase code size
(see \fB\-\-param ipcp\-unit\-growth=\fR\fIvalue\fR).
This flag is enabled by default at \fB\-O3\fR.
.IP "\fB\-ftree\-sink\fR" 4
.IX Item "-ftree-sink"
Perform forward store motion  on trees.  This flag is
enabled by default at \fB\-O\fR n' higher.
.IP "\fB\-ftree\-bit\-ccp\fR" 4
.IX Item "-ftree-bit-ccp"
Perform sparse conditionizzle bit constant propagation on trees n' propagate
pointa alignment shiznit.
This pass only operates on local scalar variablez n' is enabled by default
at \fB\-O\fR n' higher n' shit.  It requires dat \fB\-ftree\-ccp\fR is enabled.
.IP "\fB\-ftree\-ccp\fR" 4
.IX Item "-ftree-ccp"
Perform sparse conditionizzle constant propagation (\s-1CCP\s0) on trees.  This
pass only operates on local scalar variablez n' is enabled by default
at \fB\-O\fR n' higher.
.IP "\fB\-ftree\-switch\-conversion\fR" 4
.IX Item "-ftree-switch-conversion"
Perform conversion of simple initializations up in a switch to
initializations from a scalar array.  This flag is enabled by default
at \fB\-O2\fR n' higher.
.IP "\fB\-ftree\-tail\-merge\fR" 4
.IX Item "-ftree-tail-merge"
Look fo' identical code sequences.  When found, replace one wit a jump ta the
other n' shit.  This optimization is known as tail mergin or cross jumping.  This flag
is enabled by default at \fB\-O2\fR n' higher n' shit.  Da compilation time
in dis pass can
be limited rockin \fBmax-tail-merge-comparisons\fR parameta and
\&\fBmax-tail-merge-iterations\fR parameter.
.IP "\fB\-ftree\-dce\fR" 4
.IX Item "-ftree-dce"
Perform dead code elimination (\s-1DCE\s0) on trees.  This flag is enabled by
default at \fB\-O\fR n' higher.
.IP "\fB\-ftree\-builtin\-call\-dce\fR" 4
.IX Item "-ftree-builtin-call-dce"
Perform conditionizzle dead code elimination (\s-1DCE\s0) fo' calls ta built-in functions
that may set \f(CW\*(C`errno\*(C'\fR but is otherwise side-effect free.  This flag is
enabled by default at \fB\-O2\fR n' higher if \fB\-Os\fR aint also
specified.
.IP "\fB\-ftree\-dominator\-opts\fR" 4
.IX Item "-ftree-dominator-opts"
Perform a variety of simple scalar cleanups (constant/copy
propagation, redundancy elimination, range propagation n' expression
simplification) based on a thugged-out dominator tree traversal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  This also
performs jump threadin (to reduce jumps ta jumps). This flag is
enabled by default at \fB\-O\fR n' higher.
.IP "\fB\-ftree\-dse\fR" 4
.IX Item "-ftree-dse"
Perform dead store elimination (\s-1DSE\s0) on trees.  A dead store be a store into
a memory location dat is lata overwritten by another store without
any intervenin loads.  In dis case tha earlier store can be deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This
flag is enabled by default at \fB\-O\fR n' higher.
.IP "\fB\-ftree\-ch\fR" 4
.IX Item "-ftree-ch"
Perform loop header copyin on trees.  This is beneficial since it increases
effectivenizz of code motion optimizations.  It also saves one jump.  This flag
is enabled by default at \fB\-O\fR n' higher n' shit.  It aint enabled
for \fB\-Os\fR, since it probably increases code size.
.IP "\fB\-ftree\-loop\-optimize\fR" 4
.IX Item "-ftree-loop-optimize"
Perform loop optimizations on trees.  This flag is enabled by default
at \fB\-O\fR n' higher.
.IP "\fB\-ftree\-loop\-linear\fR" 4
.IX Item "-ftree-loop-linear"
Perform loop interchange transformations on tree.  Same as
\&\fB\-floop\-interchange\fR.  To use dis code transformation, \s-1GCC\s0 has
to be configured wit \fB\-\-with\-ppl\fR n' \fB\-\-with\-cloog\fR to
enable tha Graphite loop transformation infrastructure.
.IP "\fB\-floop\-interchange\fR" 4
.IX Item "-floop-interchange"
Perform loop interchange transformations on loops.  Interchangin two
nested loops switches tha inner n' outa loops.  For example, given a
loop like:
.Sp
.Vb 5
\&        DO J = 1, M
\&          DO I = 1, N
\&            A(J, I) = A(J, I) * C
\&          ENDDO
\&        ENDDO
.Ve
.Sp
loop interchange transforms tha loop as if it was written:
.Sp
.Vb 5
\&        DO I = 1, N
\&          DO J = 1, M
\&            A(J, I) = A(J, I) * C
\&          ENDDO
\&        ENDDO
.Ve
.Sp
which can be beneficial when \f(CW\*(C`N\*(C'\fR is larger than tha caches,
because up in Fortran, tha elementz of a array is stored up in memory
contiguously by column, n' tha original gangsta loop iterates over rows,
potentially bustin at each access a cold-ass lil cache miss.  This optimization
applies ta all tha languages supported by \s-1GCC\s0 n' aint limited to
Fortran. I aint talkin' bout chicken n' gravy biatch.  To use dis code transformation, \s-1GCC\s0 has ta be configured
with \fB\-\-with\-ppl\fR n' \fB\-\-with\-cloog\fR ta enable the
Graphite loop transformation infrastructure.
.IP "\fB\-floop\-strip\-mine\fR" 4
.IX Item "-floop-strip-mine"
Perform loop strip minin transformations on loops.  Strip mining
splits a loop tha fuck into two nested loops.  Da outa loop has strides
equal ta tha strip size n' tha inner loop has stridez of the
original gangsta loop within a strip.  Da strip length can be chizzled
usin tha \fBloop-block-tile-size\fR parameter n' shit.  For example,
given a loop like:
.Sp
.Vb 3
\&        DO I = 1, N
\&          A(I) = A(I) + C
\&        ENDDO
.Ve
.Sp
loop strip minin transforms tha loop as if it was written:
.Sp
.Vb 5
\&        DO Pt II = 1, N, 51
\&          DO I = Pt II, min (II + 50, N)
\&            A(I) = A(I) + C
\&          ENDDO
\&        ENDDO
.Ve
.Sp
This optimization applies ta all tha languages supported by \s-1GCC\s0 n' is
not limited ta Fortran. I aint talkin' bout chicken n' gravy biatch.  To use dis code transformation, \s-1GCC\s0 has to
be configured wit \fB\-\-with\-ppl\fR n' \fB\-\-with\-cloog\fR to
enable tha Graphite loop transformation infrastructure.
.IP "\fB\-floop\-block\fR" 4
.IX Item "-floop-block"
Perform loop blockin transformations on loops.  Blockin strip mines
each loop up in tha loop nest such dat tha memory accessez of the
element loops fit inside caches.  Da strip length can be chizzled
usin tha \fBloop-block-tile-size\fR parameter n' shit.  For example, given
a loop like:
.Sp
.Vb 5
\&        DO I = 1, N
\&          DO J = 1, M
\&            A(J, I) = B(I) + C(J)
\&          ENDDO
\&        ENDDO
.Ve
.Sp
loop blockin transforms tha loop as if it was written:
.Sp
.Vb 9
\&        DO Pt II = 1, N, 51
\&          DO JJ = 1, M, 51
\&            DO I = Pt II, min (II + 50, N)
\&              DO J = JJ, min (JJ + 50, M)
\&                A(J, I) = B(I) + C(J)
\&              ENDDO
\&            ENDDO
\&          ENDDO
\&        ENDDO
.Ve
.Sp
which can be beneficial when \f(CW\*(C`M\*(C'\fR is larger than tha caches,
because tha innermost loop iterates over a smalla amount of data
which can be kept up in tha caches.  This optimization applies ta all the
languages supported by \s-1GCC\s0 n' aint limited ta Fortran. I aint talkin' bout chicken n' gravy biatch.  To use this
code transformation, \s-1GCC\s0 has ta be configured wit \fB\-\-with\-ppl\fR
and \fB\-\-with\-cloog\fR ta enable tha Graphite loop transformation
infrastructure.
.IP "\fB\-fgraphite\-identity\fR" 4
.IX Item "-fgraphite-identity"
Enable tha identitizzle transformation fo' graphite.  For every last muthafuckin SCoP we generate
the polyhedral representation n' transform it back ta gimple.  Using
\&\fB\-fgraphite\-identity\fR we can check tha costs or benefitz of the
\&\s-1GIMPLE \-\s0> \s-1GRAPHITE \-\s0> \s-1GIMPLE\s0 transformation. I aint talkin' bout chicken n' gravy biatch.  Some minimal optimizations
are also performed by tha code generator CLooG, like index splittin and
dead code elimination up in loops.
.IP "\fB\-floop\-nest\-optimize\fR" 4
.IX Item "-floop-nest-optimize"
Enable tha \s-1ISL\s0 based loop nest optimizer n' shit.  This be a generic loop nest
optimizer based on tha Pluto optimization algorithms.  It calculates a loop
structure optimized fo' data-localitizzle n' parallelism.  This option
is experimental.
.IP "\fB\-floop\-parallelize\-all\fR" 4
.IX Item "-floop-parallelize-all"
Use tha Graphite data dependence analysis ta identify loops dat can
be parallelized. Y'all KNOW dat shit, muthafucka!  Parallelize all tha loops dat can be analyzed to
not contain loop carried dependences without checkin dat it is
profitable ta parallelize tha loops.
.IP "\fB\-fcheck\-data\-deps\fR" 4
.IX Item "-fcheck-data-deps"
Compare tha thangs up in dis biatch of nuff muthafuckin data dependence analyzers.  This option
is used fo' debuggin tha data dependence analyzers.
.IP "\fB\-ftree\-loop\-if\-convert\fR" 4
.IX Item "-ftree-loop-if-convert"
Attempt ta transform conditionizzle jumps up in tha innermost loops to
branch-less equivalents, n' you can put dat on yo' toast.  Da intent is ta remove control-flow from
the innermost loops up in order ta improve tha mobilitizzle of the
vectorization pass ta handle these loops.  This is enabled by default
if vectorization is enabled.
.IP "\fB\-ftree\-loop\-if\-convert\-stores\fR" 4
.IX Item "-ftree-loop-if-convert-stores"
Attempt ta also if-convert conditionizzle jumps containin memory writes.
This transformation can be unsafe fo' multi-threaded programs as it
transforms conditionizzle memory writes tha fuck into unconditionizzle memory writes.
For example,
.Sp
.Vb 3
\&        fo' (i = 0; i < N; i++)
\&          if (cond)
\&            A[i] = expr;
.Ve
.Sp
is transformed to
.Sp
.Vb 2
\&        fo' (i = 0; i < N; i++)
\&          A[i] = cond ? expr : A[i];
.Ve
.Sp
potentially producin data races.
.IP "\fB\-ftree\-loop\-distribution\fR" 4
.IX Item "-ftree-loop-distribution"
Perform loop distribution. I aint talkin' bout chicken n' gravy biatch.  This flag can improve cache performizzle on
bangin' loop bodies n' allow further loop optimizations, like
parallelization or vectorization, ta take place.  For example, tha loop
.Sp
.Vb 4
\&        DO I = 1, N
\&          A(I) = B(I) + C
\&          D(I) = E(I) * F
\&        ENDDO
.Ve
.Sp
is transformed to
.Sp
.Vb 6
\&        DO I = 1, N
\&           A(I) = B(I) + C
\&        ENDDO
\&        DO I = 1, N
\&           D(I) = E(I) * F
\&        ENDDO
.Ve
.IP "\fB\-ftree\-loop\-distribute\-patterns\fR" 4
.IX Item "-ftree-loop-distribute-patterns"
Perform loop distribution of patterns dat can be code generated with
calls ta a library.  This flag is enabled by default at \fB\-O3\fR.
.Sp
This pass distributes tha initialization loops n' generates a cold-ass lil call to
memset zero.  For example, tha loop
.Sp
.Vb 4
\&        DO I = 1, N
\&          A(I) = 0
\&          B(I) = A(I) + I
\&        ENDDO
.Ve
.Sp
is transformed to
.Sp
.Vb 6
\&        DO I = 1, N
\&           A(I) = 0
\&        ENDDO
\&        DO I = 1, N
\&           B(I) = A(I) + I
\&        ENDDO
.Ve
.Sp
and tha initialization loop is transformed tha fuck into a cold-ass lil call ta memset zero.
.IP "\fB\-ftree\-loop\-im\fR" 4
.IX Item "-ftree-loop-im"
Perform loop invariant motion on trees.  This pass moves only invariants that
are hard ta handle at \s-1RTL\s0 level (function calls, operations dat expand to
nontrivial sequencez of insns).  With \fB\-funswitch\-loops\fR it also moves
operandz of conditions dat is invariant outta tha loop, so dat we can use
just trivial invariantnizz analysis up in loop unswitching.  Da pass also includes
store motion.
.IP "\fB\-ftree\-loop\-ivcanon\fR" 4
.IX Item "-ftree-loop-ivcanon"
Smoke a cold-ass lil canonical counta fo' number of iterations up in loops fo' which
determinin number of iterations requires fucked up analysis.  Later
optimizations then may determine tha number doggystyle.  Useful especially
in connection wit unrolling.
.IP "\fB\-fivopts\fR" 4
.IX Item "-fivopts"
Perform induction variable optimizations (strength reduction, induction
variable mergin n' induction variable elimination) on trees.
.IP "\fB\-ftree\-parallelize\-loops=n\fR" 4
.IX Item "-ftree-parallelize-loops=n"
Parallelize loops, i.e., split they iteration space ta run up in n threads.
This is only possible fo' loops whose iterations is independent
and can be arbitrarily reordered. Y'all KNOW dat shit, muthafucka!  Da optimization is only
profitable on multiprocessor machines, fo' loops dat is CPU-intensive,
rather than constrained e.g. by memory bandwidth.  This option
implies \fB\-pthread\fR, n' thus is only supported on targets
that have support fo' \fB\-pthread\fR.
.IP "\fB\-ftree\-pta\fR" 4
.IX Item "-ftree-pta"
Perform function-local points-to analysis on trees.  This flag is
enabled by default at \fB\-O\fR n' higher.
.IP "\fB\-ftree\-sra\fR" 4
.IX Item "-ftree-sra"
Perform scalar replacement of aggregates.  This pass replaces structure
references wit scalars ta prevent committin structures ta memory too
early.  This flag is enabled by default at \fB\-O\fR n' higher.
.IP "\fB\-ftree\-copyrename\fR" 4
.IX Item "-ftree-copyrename"
Perform copy renamin on trees.  This pass attempts ta rename compiler
temporaries ta other variablez at copy locations, probably resultin in
variable names which mo' closely resemble tha original gangsta variables.  This flag
is enabled by default at \fB\-O\fR n' higher.
.IP "\fB\-ftree\-coalesce\-inlined\-vars\fR" 4
.IX Item "-ftree-coalesce-inlined-vars"
Tell tha copyrename pass (see \fB\-ftree\-copyrename\fR) ta attempt to
combine lil' small-ass user-defined variablez too yo, but only if they was inlined
from other functions.  It be a mo' limited form of
\&\fB\-ftree\-coalesce\-vars\fR.  This may harm debug shiznit of such
inlined variablez yo, but it will keep variablez of tha inlined-into
function apart from each other, such dat they is mo' likely to
contain tha expected joints up in a thugged-out debuggin session. I aint talkin' bout chicken n' gravy biatch.  This was the
default up in \s-1GCC\s0 versions olda than 4.7.
.IP "\fB\-ftree\-coalesce\-vars\fR" 4
.IX Item "-ftree-coalesce-vars"
Tell tha copyrename pass (see \fB\-ftree\-copyrename\fR) ta attempt to
combine lil' small-ass user-defined variablez too, instead of just compiler
temporaries. Put ya muthafuckin choppers up if ya feel dis!  This may severely limit tha mobilitizzle ta debug a optimized
program compiled wit \fB\-fno\-var\-tracking\-assignments\fR.  In the
negated form, dis flag prevents \s-1SSA\s0 coalescin of user variables,
includin inlined ones.  This option is enabled by default.
.IP "\fB\-ftree\-ter\fR" 4
.IX Item "-ftree-ter"
Perform temporary expression replacement durin tha \s-1SSA\-\s0>normal phase.  Single
use/single def temporaries is replaced at they use location wit their
definin expression. I aint talkin' bout chicken n' gravy biatch.  This thangs up in dis biatch up in non-GIMPLE code yo, but gives tha expanders
much mo' complex trees ta work on resultin up in betta \s-1RTL\s0 generation. I aint talkin' bout chicken n' gravy biatch.  This is
enabled by default at \fB\-O\fR n' higher.
.IP "\fB\-ftree\-slsr\fR" 4
.IX Item "-ftree-slsr"
Perform straight-line strength reduction on trees.  This recognizes related
expressions involvin multiplications n' replaces dem by less expensive
calculations when possible.  This is enabled by default at \fB\-O\fR and
higher.
.IP "\fB\-ftree\-vectorize\fR" 4
.IX Item "-ftree-vectorize"
Perform loop vectorization on trees. This flag is enabled by default at
\&\fB\-O3\fR.
.IP "\fB\-ftree\-slp\-vectorize\fR" 4
.IX Item "-ftree-slp-vectorize"
Perform basic block vectorization on trees. This flag is enabled by default at
\&\fB\-O3\fR n' when \fB\-ftree\-vectorize\fR is enabled.
.IP "\fB\-ftree\-vect\-loop\-version\fR" 4
.IX Item "-ftree-vect-loop-version"
Perform loop versionin when bustin loop vectorization on trees.  When a loop
appears ta be vectorizable except dat data alignment or data dependence cannot
be determined at compile time, then vectorized n' non-vectorized versions of
the loop is generated along wit run-time checks fo' alignment or dependence
to control which version is executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This option is enabled by default
except at level \fB\-Os\fR where it is disabled.
.IP "\fB\-fvect\-cost\-model\fR" 4
.IX Item "-fvect-cost-model"
Enable cost model fo' vectorization. I aint talkin' bout chicken n' gravy biatch.  This option is enabled by default at
\&\fB\-O3\fR.
.IP "\fB\-ftree\-vrp\fR" 4
.IX Item "-ftree-vrp"
Perform Value Range Propagation on trees.  This is similar ta the
constant propagation pass yo, but instead of joints, rangez of joints are
propagated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This allows tha optimizers ta remove unnecessary range
checks like array bound checks n' null pointa checks.  This is
enabled by default at \fB\-O2\fR n' higher n' shit.  Null pointa check
elimination is only done if \fB\-fdelete\-null\-pointer\-checks\fR is
enabled.
.IP "\fB\-ftracer\fR" 4
.IX Item "-ftracer"
Perform tail duplication ta enpimpin' superblock size.  This transformation
simplifies tha control flow of tha function allowin other optimizations ta do
a betta thang.
.IP "\fB\-funroll\-loops\fR" 4
.IX Item "-funroll-loops"
Unroll loops whose number of iterations can be determined at compile
time or upon entry ta tha loop.  \fB\-funroll\-loops\fR implies
\&\fB\-frerun\-cse\-after\-loop\fR.  This option make code larger,
and may or may not make it run faster.
.IP "\fB\-funroll\-all\-loops\fR" 4
.IX Item "-funroll-all-loops"
Unroll all loops, even if they number of iterations is uncertain when
the loop is entered. Y'all KNOW dat shit, muthafucka!  This probably make programs run mo' slowly.
\&\fB\-funroll\-all\-loops\fR implies tha same ol' dirty options as
\&\fB\-funroll\-loops\fR,
.IP "\fB\-fsplit\-ivs\-in\-unroller\fR" 4
.IX Item "-fsplit-ivs-in-unroller"
Enablez expression of jointz of induction variablez up in lata iterations
of tha unrolled loop rockin tha value up in tha straight-up original gangsta iteration. I aint talkin' bout chicken n' gravy biatch.  This breaks
long dependency chains, thus pimpin-out efficiency of tha schedulin passes.
.Sp
A combination of \fB\-fweb\fR n' \s-1CSE\s0 is often sufficient ta obtain the
same effect.  But fuck dat shiznit yo, tha word on tha street is dat that aint reliable up in cases where tha loop body
is mo' fucked up than a single basic block.  It also do not work at all
on some architectures cuz of restrictions up in tha \s-1CSE\s0 pass.
.Sp
This optimization is enabled by default.
.IP "\fB\-fvariable\-expansion\-in\-unroller\fR" 4
.IX Item "-fvariable-expansion-in-unroller"
With dis option, tha compila creates multiple copiez of some
local variablez when unrollin a loop, which can result up in superior code.
.IP "\fB\-fpartial\-inlining\fR" 4
.IX Item "-fpartial-inlining"
Inline partz of functions.  This option has any effect only
when inlinin itself is turned on by tha \fB\-finline\-functions\fR
or \fB\-finline\-small\-functions\fR options.
.Sp
Enabled at level \fB\-O2\fR.
.IP "\fB\-fpredictive\-commoning\fR" 4
.IX Item "-fpredictive-commoning"
Perform predictizzle commonin optimization, i.e., reusin computations
(especially memory loadz n' stores) performed up in previous
iterationz of loops.
.Sp
This option is enabled at level \fB\-O3\fR.
.IP "\fB\-fprefetch\-loop\-arrays\fR" 4
.IX Item "-fprefetch-loop-arrays"
If supported by tha target machine, generate instructions ta prefetch
memory ta improve tha performizzle of loops dat access big-ass arrays.
.Sp
This option may generate betta or worse code; thangs up in dis biatch is highly
dependent on tha structure of loops within tha source code.
.Sp
Disabled at level \fB\-Os\fR.
.IP "\fB\-fno\-peephole\fR" 4
.IX Item "-fno-peephole"
.PD 0
.IP "\fB\-fno\-peephole2\fR" 4
.IX Item "-fno-peephole2"
.PD
Disable any machine-specific peephole optimizations.  Da difference
between \fB\-fno\-peephole\fR n' \fB\-fno\-peephole2\fR is up in how tha fuck they
are implemented up in tha compiler; some targets use one, some use the
other, all dem use both.
.Sp
\&\fB\-fpeephole\fR is enabled by default.
\&\fB\-fpeephole2\fR enabled at levels \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fno\-guess\-branch\-probability\fR" 4
.IX Item "-fno-guess-branch-probability"
Do not guess branch probabilitizzles rockin heuristics.
.Sp
\&\s-1GCC\s0 uses heuristics ta guess branch probabilitizzles if they are
not provided by profilin feedback (\fB\-fprofile\-arcs\fR).  These
heuristics is based on tha control flow graph.  If some branch probabilities
are specified by \fB_\|_builtin_expect\fR, then tha heuristics are
used ta guess branch probabilitizzles fo' tha rest of tha control flow graph,
takin tha \fB_\|_builtin_expect\fR info tha fuck into account.  Da interactions
between tha heuristics n' \fB_\|_builtin_expect\fR can be complex, n' in
some cases, it may be useful ta disable tha heuristics so dat tha effects
of \fB_\|_builtin_expect\fR is easier ta understand.
.Sp
Da default is \fB\-fguess\-branch\-probability\fR at levels
\&\fB\-O\fR, \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-freorder\-blocks\fR" 4
.IX Item "-freorder-blocks"
Reorder basic blocks up in tha compiled function up in order ta reduce number of
taken branches n' improve code locality.
.Sp
Enabled at levels \fB\-O2\fR, \fB\-O3\fR.
.IP "\fB\-freorder\-blocks\-and\-partition\fR" 4
.IX Item "-freorder-blocks-and-partition"
In addizzle ta reorderin basic blocks up in tha compiled function, up in order
to reduce number of taken branches, partitions bangin' n' cold basic blocks
into separate sectionz of tha assembly n' .o files, ta improve
pagin n' cache localitizzle performance.
.Sp
This optimization be automatically turned off up in tha presence of
exception handling, fo' linkonce sections, fo' functions wit a user-defined
section attribute n' on any architecture dat do not support named
sections.
.IP "\fB\-freorder\-functions\fR" 4
.IX Item "-freorder-functions"
Reorder functions up in tha object file up in order to
improve code locality.  This is implemented by rockin special
subsections \f(CW\*(C`.text.hot\*(C'\fR fo' most frequently executed functions and
\&\f(CW\*(C`.text.unlikely\*(C'\fR fo' unlikely executed functions.  Reorderin is done by
the linker so object file format must support named sections n' linker must
place dem up in a reasonable way.
.Sp
Also flava feedback must be available ta make dis option effective.  See
\&\fB\-fprofile\-arcs\fR fo' details.
.Sp
Enabled at levels \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fstrict\-aliasing\fR" 4
.IX Item "-fstrict-aliasing"
Allow tha compila ta assume tha strictest aliasin rulez applicable to
the language bein compiled. Y'all KNOW dat shit, muthafucka!  For C (and \*(C+), dis activates
optimizations based on tha type of expressions.  In particular, an
object of one type be assumed never ta reside all up in tha same address as an
object of a gangbangin' finger-lickin' different type, unless tha types is almost tha same.  For
example, a \f(CW\*(C`unsigned int\*(C'\fR can alias a \f(CW\*(C`int\*(C'\fR yo, but not a
\&\f(CW\*(C`void*\*(C'\fR or a \f(CW\*(C`double\*(C'\fR.  A characta type may alias any other
type.
.Sp
Pay special attention ta code like this:
.Sp
.Vb 4
\&        union a_union {
\&          int i;
\&          double d;
\&        };
\&        
\&        int f() {
\&          union a_union t;
\&          t.d = 3.0;
\&          return t.i;
\&        }
.Ve
.Sp
Da practice of readin from a gangbangin' finger-lickin' different union member than tha one most
recently freestyled ta (called \*(L"type-punning\*(R") is common. I aint talkin' bout chicken n' gravy biatch.  Even with
\&\fB\-fstrict\-aliasing\fR, type-punnin be allowed, provided tha memory
is accessed all up in tha union type.  So, tha code above works as
expected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.    But fuck dat shiznit yo, tha word on tha street is dat dis code might not:
.Sp
.Vb 7
\&        int f() {
\&          union a_union t;
\&          int* ip;
\&          t.d = 3.0;
\&          ip = &t.i;
\&          return *ip;
\&        }
.Ve
.Sp
Similarly, access by takin tha address, castin tha resultin pointer
and dereferencin tha result has undefined behavior, even if tha cast
uses a union type, e.g.:
.Sp
.Vb 4
\&        int f() {
\&          double d = 3.0;
\&          return ((union a_union *) &d)\->i;
\&        }
.Ve
.Sp
Da \fB\-fstrict\-aliasing\fR option is enabled at levels
\&\fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fstrict\-overflow\fR" 4
.IX Item "-fstrict-overflow"
Allow tha compila ta assume strict signed overflow rules, depending
on tha language bein compiled. Y'all KNOW dat shit, muthafucka!  For C (and \*(C+) dis means that
overflow when bustin arithmetic wit signed numbers is undefined, which
means dat tha compila may assume dat it do not happen. I aint talkin' bout chicken n' gravy biatch.  This
permits various optimizations.  For example, tha compila assumes
that a expression like \f(CW\*(C`i + 10 > i\*(C'\fR be always legit for
signed \f(CW\*(C`i\*(C'\fR.  This assumption is only valid if signed overflow is
undefined, as tha expression is false if \f(CW\*(C`i + 10\*(C'\fR overflows when
usin twos complement arithmetic.  When dis option is up in effect any
attempt ta determine whether a operation on signed numbers 
overflows must be freestyled carefully ta not straight-up involve overflow.
.Sp
This option also allows tha compila ta assume strict pointer
semantics: given a pointa ta a object, if addin a offset ta that
pointa do not produce a pointa ta tha same object, tha addizzle is
undefined. Y'all KNOW dat shit, muthafucka!  This permits tha compila ta conclude dat \f(CW\*(C`p + u >
p\*(C'\fR be always legit fo' a pointa \f(CW\*(C`p\*(C'\fR n' unsigned integer
\&\f(CW\*(C`u\*(C'\fR.  This assumption is only valid cuz pointa wraparound is
undefined, as tha expression is false if \f(CW\*(C`p + u\*(C'\fR overflows using
twos complement arithmetic.
.Sp
See also tha \fB\-fwrapv\fR option. I aint talkin' bout chicken n' gravy biatch.  Usin \fB\-fwrapv\fR means
that integer signed overflow is straight-up defined: it wraps.  When
\&\fB\-fwrapv\fR is used, there is no difference between
\&\fB\-fstrict\-overflow\fR n' \fB\-fno\-strict\-overflow\fR for
integers.  With \fB\-fwrapv\fR certain typez of overflow are
permitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For example, if tha compila gets a overflow when bustin
arithmetic on constants, tha overflowed value can still be used with
\&\fB\-fwrapv\fR yo, but not otherwise.
.Sp
Da \fB\-fstrict\-overflow\fR option is enabled at levels
\&\fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-falign\-functions\fR" 4
.IX Item "-falign-functions"
.PD 0
.IP "\fB\-falign\-functions=\fR\fIn\fR" 4
.IX Item "-falign-functions=n"
.PD
Align tha start of functions ta tha next power-of-two pimped outa than
\&\fIn\fR, skippin up ta \fIn\fR bytes.  For instance,
\&\fB\-falign\-functions=32\fR aligns functions ta tha next 32\-byte
boundary yo, but \fB\-falign\-functions=24\fR aligns ta tha next
32\-byte boundary only if dis can be done by skippin 23 bytes or less.
.Sp
\&\fB\-fno\-align\-functions\fR n' \fB\-falign\-functions=1\fR are
equivalent n' mean dat functions is not aligned.
.Sp
Some assemblaz only support dis flag when \fIn\fR be a juice of two;
in dat case, it is rounded up.
.Sp
If \fIn\fR aint specified or is zero, bust a machine-dependent default.
.Sp
Enabled at levels \fB\-O2\fR, \fB\-O3\fR.
.IP "\fB\-falign\-labels\fR" 4
.IX Item "-falign-labels"
.PD 0
.IP "\fB\-falign\-labels=\fR\fIn\fR" 4
.IX Item "-falign-labels=n"
.PD
Align all branch targets ta a power-of-two boundary, skippin up to
\&\fIn\fR bytes like \fB\-falign\-functions\fR.  This option can easily
make code slower, cuz it must bang dummy operations fo' when the
branch target is reached up in tha usual flow of tha code.
.Sp
\&\fB\-fno\-align\-labels\fR n' \fB\-falign\-labels=1\fR are
equivalent n' mean dat labels is not aligned.
.Sp
If \fB\-falign\-loops\fR or \fB\-falign\-jumps\fR is applicable and
are pimped outa than dis value, then they joints is used instead.
.Sp
If \fIn\fR aint specified or is zero, bust a machine-dependent default
which is straight-up likely ta be \fB1\fR, meanin no alignment.
.Sp
Enabled at levels \fB\-O2\fR, \fB\-O3\fR.
.IP "\fB\-falign\-loops\fR" 4
.IX Item "-falign-loops"
.PD 0
.IP "\fB\-falign\-loops=\fR\fIn\fR" 4
.IX Item "-falign-loops=n"
.PD
Align loops ta a power-of-two boundary, skippin up ta \fIn\fR bytes
like \fB\-falign\-functions\fR.  If tha loops are
executed nuff times, dis make up fo' any execution of tha dummy
operations.
.Sp
\&\fB\-fno\-align\-loops\fR n' \fB\-falign\-loops=1\fR are
equivalent n' mean dat loops is not aligned.
.Sp
If \fIn\fR aint specified or is zero, bust a machine-dependent default.
.Sp
Enabled at levels \fB\-O2\fR, \fB\-O3\fR.
.IP "\fB\-falign\-jumps\fR" 4
.IX Item "-falign-jumps"
.PD 0
.IP "\fB\-falign\-jumps=\fR\fIn\fR" 4
.IX Item "-falign-jumps=n"
.PD
Align branch targets ta a power-of-two boundary, fo' branch targets
where tha targets can only be reached by jumping, skippin up ta \fIn\fR
bytes like \fB\-falign\-functions\fR.  In dis case, no dummy operations
need be executed.
.Sp
\&\fB\-fno\-align\-jumps\fR n' \fB\-falign\-jumps=1\fR are
equivalent n' mean dat loops is not aligned.
.Sp
If \fIn\fR aint specified or is zero, bust a machine-dependent default.
.Sp
Enabled at levels \fB\-O2\fR, \fB\-O3\fR.
.IP "\fB\-funit\-at\-a\-time\fR" 4
.IX Item "-funit-at-a-time"
This option is left fo' compatibilitizzle reasons. \fB\-funit\-at\-a\-time\fR
has no effect, while \fB\-fno\-unit\-at\-a\-time\fR implies
\&\fB\-fno\-toplevel\-reorder\fR n' \fB\-fno\-section\-anchors\fR.
.Sp
Enabled by default.
.IP "\fB\-fno\-toplevel\-reorder\fR" 4
.IX Item "-fno-toplevel-reorder"
Do not reorder top-level functions, variables, n' \f(CW\*(C`asm\*(C'\fR
statements, n' you can put dat on yo' toast.  Output dem up in tha same order dat they step tha fuck up in the
input file.  When dis option is used, unreferenced static variables
are not removed. Y'all KNOW dat shit, muthafucka!  This option is intended ta support existin code
that relies on a particular ordering.  For freshly smoked up code, it is betta to
use attributes.
.Sp
Enabled at level \fB\-O0\fR.  When disabled explicitly, it also implies
\&\fB\-fno\-section\-anchors\fR, which is otherwise enabled at \fB\-O0\fR on some
targets.
.IP "\fB\-fweb\fR" 4
.IX Item "-fweb"
Constructs webs as commonly used fo' regista allocation purposes n' assign
each wizzy individual pseudo regista n' shit.  This allows tha regista allocation pass
to operate on pseudos directly yo, but also strengthens nuff muthafuckin other optimization
passes, like fuckin \s-1CSE,\s0 loop optimizer n' trivial dead code remover n' shit.  It can,
however, make debuggin impossible, since variablez no longer stay up in a
\&\*(L"home register\*(R".
.Sp
Enabled by default wit \fB\-funroll\-loops\fR.
.IP "\fB\-fwhole\-program\fR" 4
.IX Item "-fwhole-program"
Assume dat tha current compilation unit represents tha whole program being
compiled. Y'all KNOW dat shit, muthafucka!  All hood functions n' variablez wit tha exception of \f(CW\*(C`main\*(C'\fR
and dem merged by attribute \f(CW\*(C`externally_visible\*(C'\fR become static functions
and up in effect is optimized mo' aggressively by interprocedural optimizers.
.Sp
This option should not be used up in combination wit \f(CW\*(C`\-flto\*(C'\fR.
Instead relyin on a linker plugin should provide less thuggy n' mo' precise
information.
.IP "\fB\-flto[=\fR\fIn\fR\fB]\fR" 4
.IX Item "-flto[=n]"
This option runs tha standard link-time optimizer n' shit.  When invoked
with source code, it generates \s-1GIMPLE \s0(one of \s-1GCC\s0z internal
representations) n' writes it ta special \s-1ELF\s0 sections up in tha object
file.  When tha object filez is linked together, all tha function
bodies is read from these \s-1ELF\s0 sections n' instantiated as if they
had been part of tha same translation unit.
.Sp
To use tha link-time optimizer, \fB\-flto\fR need ta be specified at
compile time n' durin tha final link.  For example:
.Sp
.Vb 3
\&        gcc \-c \-O2 \-flto foo.c
\&        gcc \-c \-O2 \-flto bar.c
\&        gcc \-o myprog \-flto \-O2 foo.o bar.o
.Ve
.Sp
Da first two invocations ta \s-1GCC\s0 save a funky-ass bytecode representation
of \s-1GIMPLE\s0 tha fuck into special \s-1ELF\s0 sections inside \fIfoo.o\fR and
\&\fIbar.o\fR.  Da final invocation readz tha \s-1GIMPLE\s0 bytecode from
\&\fIfoo.o\fR n' \fIbar.o\fR, merges tha two filez tha fuck into a single
internal image, n' compilez tha result as usual. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Since both
\&\fIfoo.o\fR n' \fIbar.o\fR is merged tha fuck into a single image, this
causes all tha interprocedural analyses n' optimizations up in \s-1GCC\s0 to
work across tha two filez as if they was a single one.  This means,
for example, dat tha inliner be able ta inline functions in
\&\fIbar.o\fR tha fuck into functions up in \fIfoo.o\fR n' vice-versa.
.Sp
Another (simpler) way ta enable link-time optimization is:
.Sp
.Vb 1
\&        gcc \-o myprog \-flto \-O2 foo.c bar.c
.Ve
.Sp
Da above generates bytecode fo' \fIfoo.c\fR n' \fIbar.c\fR,
merges dem together tha fuck into a single \s-1GIMPLE\s0 representation n' optimizes
them as usual ta produce \fImyprog\fR.
.Sp
Da only blingin thang ta keep up in mind is dat ta enable link-time
optimizations tha \fB\-flto\fR flag need ta be passed ta both the
compile n' tha link commands.
.Sp
To make whole program optimization effective, it is necessary ta make
certain whole program assumptions.  Da compila need ta know
what functions n' variablez can be accessed by libraries n' runtime
outside of tha link-time optimized unit.  When supported by tha linker,
the linker plugin (see \fB\-fuse\-linker\-plugin\fR) passes shiznit
to tha compila bout used n' externally visible symbols.  When
the linker plugin aint available, \fB\-fwhole\-program\fR should be
used ta allow tha compila ta make these assumptions, which leads
to mo' aggressive optimization decisions.
.Sp
Note dat when a gangbangin' file is compiled wit \fB\-flto\fR, tha generated
object file is larger than a regular object file cuz it 
gotz nuff \s-1GIMPLE\s0 bytecodes n' tha usual final code.  This means that
object filez wit \s-1LTO\s0 shiznit can be linked as aiiight object
files; if \fB\-flto\fR aint passed ta tha linker, no
interprocedural optimizations is applied.
.Sp
Additionally, tha optimization flags used ta compile individual files
are not necessarily related ta dem used at link time.  For instance,
.Sp
.Vb 3
\&        gcc \-c \-O0 \-flto foo.c
\&        gcc \-c \-O0 \-flto bar.c
\&        gcc \-o myprog \-flto \-O3 foo.o bar.o
.Ve
.Sp
This produces individual object filez wit unoptimized assembler
code yo, but tha resultin binary \fImyprog\fR is optimized at
\&\fB\-O3\fR.  If, instead, tha final binary is generated without
\&\fB\-flto\fR, then \fImyprog\fR aint optimized.
.Sp
When producin tha final binary wit \fB\-flto\fR, \s-1GCC\s0 only
applies link-time optimizations ta dem filez dat contain bytecode.
Therefore, you can mix n' match object filez n' libraries with
\&\s-1GIMPLE\s0 bytecodes n' final object code.  \s-1GCC\s0 automatically selects
which filez ta optimize up in \s-1LTO\s0 mode n' which filez ta link without
further processing.
.Sp
There is some code generation flags preserved by \s-1GCC\s0 when
generatin bytecodes, as they need ta be used durin tha final link
stage.  Currently, tha followin options is saved tha fuck into tha \s-1GIMPLE\s0
bytecode files: \fB\-fPIC\fR, \fB\-fcommon\fR n' all the
\&\fB\-m\fR target flags.
.Sp
At link time, these options is read up in n' reapplied. Y'all KNOW dat shit, muthafucka!  Note dat the
current implementation make no attempt ta recognize conflicting
values fo' these options.  If different filez have conflictin option
values (e.g., one file is compiled wit \fB\-fPIC\fR n' another
aint), tha compila simply uses tha last value read from the
bytecode files.  It be recommended, then, dat you compile all tha files
participatin up in tha same link wit tha same options.
.Sp
If \s-1LTO\s0 encountas objects wit C linkage declared wit incompatible
types up in separate translation units ta be linked together (undefined
behavior accordin ta \s-1ISO C99 6.2.7\s0), a non-fatal diagnostic may be
issued. Y'all KNOW dat shit, muthafucka!  Da behavior is still undefined at run time.
.Sp
Another feature of \s-1LTO\s0 is dat it is possible ta apply interprocedural
optimizations on filez freestyled up in different languages.  This requires
support up in tha language front end yo, but it ain't no stoppin cause I be still poppin'.  Currently, tha C, \*(C+ and
Fortran front endz is capable of emittin \s-1GIMPLE\s0 bytecodes, so
suttin' like dis should work:
.Sp
.Vb 4
\&        gcc \-c \-flto foo.c
\&        g++ \-c \-flto bar.cc
\&        gfortran \-c \-flto baz.f90
\&        g++ \-o myprog \-flto \-O3 foo.o bar.o baz.o \-lgfortran
.Ve
.Sp
Notice dat tha final link is done wit \fBg++\fR ta git tha \*(C+
runtime libraries n' \fB\-lgfortran\fR be added ta git tha Fortran
runtime libraries. Put ya muthafuckin choppers up if ya feel dis!  In general, when mixin languages up in \s-1LTO\s0 mode, you
should use tha same link command options as when mixin languages up in a
regular (non-LTO) compilation; all you need ta add is \fB\-flto\fR to
all tha compile n' link commands.
.Sp
If object filez containin \s-1GIMPLE\s0 bytecode is stored up in a library archive, say
\&\fIlibfoo.a\fR, it is possible ta extract n' use dem up in a \s-1LTO\s0 link if you
are rockin a linker wit plugin support.  To enable dis feature, use
the flag \fB\-fuse\-linker\-plugin\fR at link time:
.Sp
.Vb 1
\&        gcc \-o myprog \-O2 \-flto \-fuse\-linker\-plugin a.o b.o \-lfoo
.Ve
.Sp
With tha linker plugin enabled, tha linker extracts tha needed
\&\s-1GIMPLE\s0 filez from \fIlibfoo.a\fR n' passes dem on ta tha hustlin \s-1GCC\s0
to make dem part of tha aggregated \s-1GIMPLE\s0 image ta be optimized.
.Sp
If yo ass is not rockin a linker wit plugin support and/or do not
enable tha linker plugin, then tha objects inside \fIlibfoo.a\fR
are extracted n' linked as usual yo, but they do not participate
in tha \s-1LTO\s0 optimization process.
.Sp
Link-time optimizations do not require tha presence of tha whole program to
operate.  If tha program do not require any symbols ta be exported, it is
possible ta combine \fB\-flto\fR n' \fB\-fwhole\-program\fR ta allow
the interprocedural optimizers ta use mo' aggressive assumptions which may
lead ta improved optimization opportunities.
Use of \fB\-fwhole\-program\fR aint needed when linker plugin is
actizzle (see \fB\-fuse\-linker\-plugin\fR).
.Sp
Da current implementation of \s-1LTO\s0 make no
attempt ta generate bytecode dat is portable between different
typez of hosts, n' you can put dat on yo' toast.  Da bytecode filez is versioned n' there be a
strict version check, so bytecode filez generated up in one version of
\&\s-1GCC\s0 aint gonna work wit a older/newer version of \s-1GCC.\s0
.Sp
Link-time optimization do not work well wit generation of debugging
information. I aint talkin' bout chicken n' gravy biatch.  Combinin \fB\-flto\fR with
\&\fB\-g\fR is currently experimenstrual n' sposed ta fuckin produce wrong
results.
.Sp
If you specify tha optionizzle \fIn\fR, tha optimization n' code
generation done at link time is executed up in parallel rockin \fIn\fR
parallel thangs by utilizin a installed \fBmake\fR program.  The
environment variable \fB\s-1MAKE\s0\fR may be used ta override tha program
used. Y'all KNOW dat shit, muthafucka!  Da default value fo' \fIn\fR is 1.
.Sp
Yo ass can also specify \fB\-flto=jobserver\fR ta use \s-1GNU\s0 make's
job server mode ta determine tha number of parallel thangs. This
is useful when tha Makefile callin \s-1GCC\s0 be already executin up in parallel.
Yo ass must prepend a \fB+\fR ta tha command recipe up in tha parent Makefile
for dis ta work.  This option likely only works if \fB\s-1MAKE\s0\fR is
\&\s-1GNU\s0 make.
.Sp
This option is disabled by default.
.IP "\fB\-flto\-partition=\fR\fIalg\fR" 4
.IX Item "-flto-partition=alg"
Specify tha partitionin algorithm used by tha link-time optimizer.
Da value is either \f(CW\*(C`1to1\*(C'\fR ta specify a partitionin mirroring
the original gangsta source filez or \f(CW\*(C`balanced\*(C'\fR ta specify partitioning
into equally sized chunks (whenever possible) or \f(CW\*(C`max\*(C'\fR ta create
new partizzle fo' every last muthafuckin symbol where possible.  Specifyin \f(CW\*(C`none\*(C'\fR
as a algorithm disablez partitionin n' streamin straight-up. 
Da default value is \f(CW\*(C`balanced\*(C'\fR. While \f(CW\*(C`1to1\*(C'\fR can be used
as a workaround fo' various code orderin issues, tha \f(CW\*(C`max\*(C'\fR
partitionin is intended fo' internal testin only.
.IP "\fB\-flto\-compression\-level=\fR\fIn\fR" 4
.IX Item "-flto-compression-level=n"
This option specifies tha level of compression used fo' intermediate
language freestyled ta \s-1LTO\s0 object files, n' is only meaningful in
conjunction wit \s-1LTO\s0 mode (\fB\-flto\fR).  Valid
values is 0 (no compression) ta 9 (maximum compression).  Values
outside dis range is clamped ta either 0 or 9.  If tha option is not
given, a thugged-out default balanced compression settin is used.
.IP "\fB\-flto\-report\fR" 4
.IX Item "-flto-report"
Prints a report wit internal details on tha workingz of tha link-time
optimizer n' shit.  Da contentz of dis report vary from version ta version.
It be meant ta be useful ta \s-1GCC\s0 pimpers when processin object
filez up in \s-1LTO\s0 mode (via \fB\-flto\fR).
.Sp
Disabled by default.
.IP "\fB\-fuse\-linker\-plugin\fR" 4
.IX Item "-fuse-linker-plugin"
Enablez tha use of a linker plugin durin link-time optimization. I aint talkin' bout chicken n' gravy biatch.  This
option relies on plugin support up in tha linker, which be available up in gold
or up in \s-1GNU\s0 ld 2.21 or newer.
.Sp
This option enablez tha extraction of object filez wit \s-1GIMPLE\s0 bytecode out
of library archives. This improves tha qualitizzle of optimization by exposing
more code ta tha link-time optimizer n' shit.  This shiznit specifies what
symbols can be accessed externally (by non-LTO object or durin dynamic
linking).  Resultin code qualitizzle improvements on binaries (and shared
libraries dat use hidden visibility) is similar ta \f(CW\*(C`\-fwhole\-program\*(C'\fR.
See \fB\-flto\fR fo' a thugged-out description of tha effect of dis flag n' how tha fuck to
use dat shit.
.Sp
This option is enabled by default when \s-1LTO\s0 support up in \s-1GCC\s0 is enabled
and \s-1GCC\s0 was configured fo' use with
a linker supportin plugins (\s-1GNU\s0 ld 2.21 or newer or gold).
.IP "\fB\-ffat\-lto\-objects\fR" 4
.IX Item "-ffat-lto-objects"
Fat \s-1LTO\s0 objects is object filez dat contain both tha intermediate language
and tha object code. This make dem usable fo' both \s-1LTO\s0 linkin n' normal
linking. This option is effectizzle only when compilin wit \fB\-flto\fR
and is ignored at link time.
.Sp
\&\fB\-fno\-fat\-lto\-objects\fR improves compilation time over plain \s-1LTO,\s0 but
requires tha complete toolchain ta be aware of \s-1LTO.\s0 It requires a linker with
linker plugin support fo' basic functionality.  Additionally,
\&\fBnm\fR, \fBar\fR n' \fBranlib\fR
need ta support linker plugins ta allow a gangbangin' full-featured build environment
(capable of buildin static libraries etc).  \s-1GCC\s0 serves up tha \fBgcc-ar\fR,
\&\fBgcc-nm\fR, \fBgcc-ranlib\fR wrappers ta pass tha right options
to these tools. With non fat \s-1LTO\s0 makefilez need ta be modified ta use em.
.Sp
Da default is \fB\-ffat\-lto\-objects\fR but dis default is intended to
change up in future releases when linker plugin enabled environments become more
common.
.IP "\fB\-fcompare\-elim\fR" 4
.IX Item "-fcompare-elim"
Afta regista allocation n' post-regista allocation instruction splitting,
identify arithmetic instructions dat compute processor flags similar ta a
comparison operation based on dat arithmetic.  If possible, eliminizzle the
explicit comparison operation.
.Sp
This pass only applies ta certain targets dat cannot explicitly represent
the comparison operation before regista allocation is complete.
.Sp
Enabled at levels \fB\-O\fR, \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fuse\-ld=bfd\fR" 4
.IX Item "-fuse-ld=bfd"
Use tha \fBbfd\fR linker instead of tha default linker.
.IP "\fB\-fuse\-ld=gold\fR" 4
.IX Item "-fuse-ld=gold"
Use tha \fBgold\fR linker instead of tha default linker.
.IP "\fB\-fcprop\-registers\fR" 4
.IX Item "-fcprop-registers"
Afta regista allocation n' post-regista allocation instruction splitting,
perform a cold-ass lil copy-propagation pass ta try ta reduce schedulin dependencies
and occasionally eliminizzle tha copy.
.Sp
Enabled at levels \fB\-O\fR, \fB\-O2\fR, \fB\-O3\fR, \fB\-Os\fR.
.IP "\fB\-fprofile\-correction\fR" 4
.IX Item "-fprofile-correction"
Profilez collected rockin a instrumented binary fo' multi-threaded programs may
be inconsistent cuz of missed counta thugged-out shit. When dis option is specified,
\&\s-1GCC\s0 uses heuristics ta erect or smooth up such inconsistencies. Put ya muthafuckin choppers up if ya feel dis! By
default, \s-1GCC\s0 emits a error message when a inconsistent flava is detected.
.IP "\fB\-fprofile\-dir=\fR\fIpath\fR" 4
.IX Item "-fprofile-dir=path"
Set tha directory ta search fo' tha flava data filez up in ta \fIpath\fR.
This option affects only tha flava data generated by
\&\fB\-fprofile\-generate\fR, \fB\-ftest\-coverage\fR, \fB\-fprofile\-arcs\fR
and used by \fB\-fprofile\-use\fR n' \fB\-fbranch\-probabilities\fR
and its related options.  Both absolute n' relatizzle paths can be used.
By default, \s-1GCC\s0 uses tha current directory as \fIpath\fR, thus the
profile data file appears up in tha same directory as tha object file.
.IP "\fB\-fprofile\-generate\fR" 4
.IX Item "-fprofile-generate"
.PD 0
.IP "\fB\-fprofile\-generate=\fR\fIpath\fR" 4
.IX Item "-fprofile-generate=path"
.PD
Enable options probably used fo' instrumentin application ta produce
profile useful fo' lata recompilation wit flava feedback based
optimization. I aint talkin' bout chicken n' gravy biatch.  Yo ass must use \fB\-fprofile\-generate\fR both when
compilin n' when linkin yo' program.
.Sp
Da followin options is enabled: \f(CW\*(C`\-fprofile\-arcs\*(C'\fR, \f(CW\*(C`\-fprofile\-values\*(C'\fR, \f(CW\*(C`\-fvpt\*(C'\fR.
.Sp
If \fIpath\fR is specified, \s-1GCC\s0 looks all up in tha \fIpath\fR ta find
the flava feedback data files. Right back up in yo muthafuckin ass. See \fB\-fprofile\-dir\fR.
.IP "\fB\-fprofile\-use\fR" 4
.IX Item "-fprofile-use"
.PD 0
.IP "\fB\-fprofile\-use=\fR\fIpath\fR" 4
.IX Item "-fprofile-use=path"
.PD
Enable flava feedback pimped up optimizations, n' optimizations
generally profitable only wit flava feedback available.
.Sp
Da followin options is enabled: \f(CW\*(C`\-fbranch\-probabilities\*(C'\fR, \f(CW\*(C`\-fvpt\*(C'\fR,
\&\f(CW\*(C`\-funroll\-loops\*(C'\fR, \f(CW\*(C`\-fpeel\-loops\*(C'\fR, \f(CW\*(C`\-ftracer\*(C'\fR, \f(CW\*(C`\-ftree\-vectorize\*(C'\fR,
\&\f(CW\*(C`ftree\-loop\-distribute\-patterns\*(C'\fR
.Sp
By default, \s-1GCC\s0 emits a error message if tha feedback profilez do not
match tha source code.  This error can be turned tha fuck into a warnin by using
\&\fB\-Wcoverage\-mismatch\fR.  Note dis may result up in skankyly optimized
code.
.Sp
If \fIpath\fR is specified, \s-1GCC\s0 looks all up in tha \fIpath\fR ta find
the flava feedback data files. Right back up in yo muthafuckin ass. See \fB\-fprofile\-dir\fR.
.PP
Da followin options control compila behavior regardin floating-point 
arithmetic.  These options trade off between speed and
correctness.  All must be specifically enabled.
.IP "\fB\-ffloat\-store\fR" 4
.IX Item "-ffloat-store"
Do not store floating-point variablez up in registers, n' inhibit other
options dat might chizzle whether a gangbangin' floating-point value is taken from a
regista or memory.
.Sp
This option prevents undesirable excess precision on machines such as
the 68000 where tha floatin registas (of tha 68881) keep more
precision than a \f(CW\*(C`double\*(C'\fR is supposed ta have.  Similarly fo' the
x86 architecture.  For most programs, tha excess precision do only
phat yo, but all dem programs rely on tha precise definizzle of \s-1IEEE\s0 floating
point.  Use \fB\-ffloat\-store\fR fo' such programs, afta modifying
them ta store all pertinent intermediate computations tha fuck into variables.
.IP "\fB\-fexcess\-precision=\fR\fIstyle\fR" 4
.IX Item "-fexcess-precision=style"
This option allows further control over excess precision on machines
where floating-point registas have mo' precision than tha \s-1IEEE
\&\s0\f(CW\*(C`float\*(C'\fR n' \f(CW\*(C`double\*(C'\fR types n' tha processor do not
support operations roundin ta dem types.  By default,
\&\fB\-fexcess\-precision=fast\fR is up in effect; dis means that
operations is carried up in tha precision of tha registas n' that
it is unpredictable when roundin ta tha types specified up in tha source
code takes place.  When compilin C, if
\&\fB\-fexcess\-precision=standard\fR is specified then excess
precision bigs up tha rulez specified up in \s-1ISO C99\s0; up in particular,
both casts n' assignments cause joints ta be rounded ta their
semantic types (whereas \fB\-ffloat\-store\fR only affects
assignments).  This option is enabled by default fo' C if a strict
conformizzle option like fuckin \fB\-std=c99\fR is used.
.Sp
\&\fB\-fexcess\-precision=standard\fR aint implemented fo' languages
other than C, n' has no effect if
\&\fB\-funsafe\-math\-optimizations\fR or \fB\-ffast\-math\fR is
specified. Y'all KNOW dat shit, muthafucka!  On tha x86, it also has no effect if \fB\-mfpmath=sse\fR
or \fB\-mfpmath=sse+387\fR is specified; up in tha forma case, \s-1IEEE\s0
semantics apply without excess precision, n' up in tha latter, rounding
is unpredictable.
.IP "\fB\-ffast\-math\fR" 4
.IX Item "-ffast-math"
Sets \fB\-fno\-math\-errno\fR, \fB\-funsafe\-math\-optimizations\fR,
\&\fB\-ffinite\-math\-only\fR, \fB\-fno\-rounding\-math\fR,
\&\fB\-fno\-signaling\-nans\fR n' \fB\-fcx\-limited\-range\fR.
.Sp
This option causes tha preprocessor macro \f(CW\*(C`_\|_FAST_MATH_\|_\*(C'\fR ta be defined.
.Sp
This option aint turned on by any \fB\-O\fR option besides
\&\fB\-Ofast\fR since it can result up in incorrect output fo' programs
that depend on a exact implementation of \s-1IEEE\s0 or \s-1ISO\s0 rules/specifications
for math functions. Well shiiiit, it may, however, yield fasta code fo' programs
that do not require tha guaranteez of these justifications.
.IP "\fB\-fno\-math\-errno\fR" 4
.IX Item "-fno-math-errno"
Do not set \f(CW\*(C`errno\*(C'\fR afta callin math functions dat is executed
with a single instruction, e.g., \f(CW\*(C`sqrt\*(C'\fR.  A program dat relies on
\&\s-1IEEE\s0 exceptions fo' math error handlin may wanna use dis flag
for speed while maintainin \s-1IEEE\s0 arithmetic compatibility.
.Sp
This option aint turned on by any \fB\-O\fR option since
it can result up in incorrect output fo' programs dat depend on
an exact implementation of \s-1IEEE\s0 or \s-1ISO\s0 rules/specifications for
math functions. Well shiiiit, it may, however, yield fasta code fo' programs
that do not require tha guaranteez of these justifications.
.Sp
Da default is \fB\-fmath\-errno\fR.
.Sp
On Darwin systems, tha math library never sets \f(CW\*(C`errno\*(C'\fR.  There is
therefore no reason fo' tha compila ta consider tha possibilitizzle that
it might, n' \fB\-fno\-math\-errno\fR is tha default.
.IP "\fB\-funsafe\-math\-optimizations\fR" 4
.IX Item "-funsafe-math-optimizations"
Allow optimizations fo' floating-point arithmetic dat (a) assume
that arguments n' thangs up in dis biatch is valid n' (b) may violate \s-1IEEE\s0 or
\&\s-1ANSI\s0 standards.  When used at link-time, it may include libraries
or startup filez dat chizzle tha default \s-1FPU\s0 control word or other
similar optimizations.
.Sp
This option aint turned on by any \fB\-O\fR option since
it can result up in incorrect output fo' programs dat depend on
an exact implementation of \s-1IEEE\s0 or \s-1ISO\s0 rules/specifications for
math functions. Well shiiiit, it may, however, yield fasta code fo' programs
that do not require tha guaranteez of these justifications.
Enablez \fB\-fno\-signed\-zeros\fR, \fB\-fno\-trapping\-math\fR,
\&\fB\-fassociative\-math\fR n' \fB\-freciprocal\-math\fR.
.Sp
Da default is \fB\-fno\-unsafe\-math\-optimizations\fR.
.IP "\fB\-fassociative\-math\fR" 4
.IX Item "-fassociative-math"
Allow re-association of operandz up in seriez of floating-point operations.
This violates tha \s-1ISO C\s0 n' \*(C+ language standard by possibly changing
computation result.  \s-1NOTE:\s0 re-orderin may chizzle tha sign of zero as
well as ignore NaNs n' inhibit or create underflow or overflow (and
thus cannot be used on code dat relies on roundin behavior like
\&\f(CW\*(C`(x + 2**52) \- 2**52\*(C'\fR.  May also reorder floating-point comparisons
and thus may not be used when ordered comparisons is required.
This option requires dat both \fB\-fno\-signed\-zeros\fR and
\&\fB\-fno\-trapping\-math\fR be up in effect.  Mo'over, it don't make
much sense wit \fB\-frounding\-math\fR. For Fortran tha option
is automatically enabled when both \fB\-fno\-signed\-zeros\fR and
\&\fB\-fno\-trapping\-math\fR is up in effect.
.Sp
Da default is \fB\-fno\-associative\-math\fR.
.IP "\fB\-freciprocal\-math\fR" 4
.IX Item "-freciprocal-math"
Allow tha reciprocal of a value ta be used instead of dividin by
the value if dis enablez optimizations.  For example \f(CW\*(C`x / y\*(C'\fR
can be replaced wit \f(CW\*(C`x * (1/y)\*(C'\fR, which is useful if \f(CW\*(C`(1/y)\*(C'\fR
is subject ta common subexpression elimination. I aint talkin' bout chicken n' gravy biatch.  Note dat dis loses
precision n' increases tha number of flops operatin on tha value.
.Sp
Da default is \fB\-fno\-reciprocal\-math\fR.
.IP "\fB\-ffinite\-math\-only\fR" 4
.IX Item "-ffinite-math-only"
Allow optimizations fo' floating-point arithmetic dat assume
that arguments n' thangs up in dis biatch is not NaNs or +\-Infs.
.Sp
This option aint turned on by any \fB\-O\fR option since
it can result up in incorrect output fo' programs dat depend on
an exact implementation of \s-1IEEE\s0 or \s-1ISO\s0 rules/specifications for
math functions. Well shiiiit, it may, however, yield fasta code fo' programs
that do not require tha guaranteez of these justifications.
.Sp
Da default is \fB\-fno\-finite\-math\-only\fR.
.IP "\fB\-fno\-signed\-zeros\fR" 4
.IX Item "-fno-signed-zeros"
Allow optimizations fo' floating-point arithmetic dat ignore the
signednizz of zero.  \s-1IEEE\s0 arithmetic specifies tha behavior of
distinct +0.0 n' \-0.0 joints, which then prohibits simplification
of expressions like fuckin x+0.0 or 0.0*x (even wit \fB\-ffinite\-math\-only\fR).
This option implies dat tha sign of a zero result aint significant.
.Sp
Da default is \fB\-fsigned\-zeros\fR.
.IP "\fB\-fno\-trapping\-math\fR" 4
.IX Item "-fno-trapping-math"
Compile code assumin dat floating-point operations cannot generate
user-visible traps.  These traps include division by zero, overflow,
underflow, inexact result n' invalid operation. I aint talkin' bout chicken n' gravy biatch.  This option requires
that \fB\-fno\-signaling\-nans\fR be up in effect.  Settin dis option may
allow fasta code if one relies on \*(L"non-stop\*(R" \s-1IEEE\s0 arithmetic, fo' example.
.Sp
This option should never be turned on by any \fB\-O\fR option since
it can result up in incorrect output fo' programs dat depend on
an exact implementation of \s-1IEEE\s0 or \s-1ISO\s0 rules/specifications for
math functions.
.Sp
Da default is \fB\-ftrapping\-math\fR.
.IP "\fB\-frounding\-math\fR" 4
.IX Item "-frounding-math"
Disable transformations n' optimizations dat assume default floating-point
roundin behavior. Shiiit, dis aint no joke.  This is round-to-zero fo' all floatin point
to integer conversions, n' round-to-nearest fo' all other arithmetic
truncations.  This option should be specified fo' programs dat chizzle
the \s-1FP\s0 roundin mode dynamically, or dat may be executed wit a
non-default roundin mode.  This option disablez constant foldin of
floating-point expressions at compile time (which may be affected by
roundin mode) n' arithmetic transformations dat is unsafe up in the
presence of sign-dependent roundin modes.
.Sp
Da default is \fB\-fno\-rounding\-math\fR.
.Sp
This option is experimenstrual n' do not currently guarantee to
disable all \s-1GCC\s0 optimizations dat is affected by roundin mode.
Future versionz of \s-1GCC\s0 may provide finer control of dis setting
usin C99z \f(CW\*(C`FENV_ACCESS\*(C'\fR pragma.  This command-line option
will be used ta specify tha default state fo' \f(CW\*(C`FENV_ACCESS\*(C'\fR.
.IP "\fB\-fsignaling\-nans\fR" 4
.IX Item "-fsignaling-nans"
Compile code assumin dat \s-1IEEE\s0 signalin NaNs may generate user-visible
traps durin floating-point operations.  Settin dis option disables
optimizations dat may chizzle tha number of exceptions visible with
signalin NaNs.  This option implies \fB\-ftrapping\-math\fR.
.Sp
This option causes tha preprocessor macro \f(CW\*(C`_\|_SUPPORT_SNAN_\|_\*(C'\fR to
be defined.
.Sp
Da default is \fB\-fno\-signaling\-nans\fR.
.Sp
This option is experimenstrual n' do not currently guarantee to
disable all \s-1GCC\s0 optimizations dat affect signalin NaN behavior.
.IP "\fB\-fsingle\-precision\-constant\fR" 4
.IX Item "-fsingle-precision-constant"
Treat floating-point constants as single precision instead of
implicitly convertin dem ta double-precision constants.
.IP "\fB\-fcx\-limited\-range\fR" 4
.IX Item "-fcx-limited-range"
When enabled, dis option states dat a range reduction step is not
needed when struttin complex division. I aint talkin' bout chicken n' gravy biatch.  Also, there is no checking
whether tha result of a cold-ass lil complex multiplication or division is \f(CW\*(C`NaN
+ I*NaN\*(C'\fR, wit a attempt ta rescue tha thang up in dat case.  The
default is \fB\-fno\-cx\-limited\-range\fR yo, but is enabled by
\&\fB\-ffast\-math\fR.
.Sp
This option controls tha default settin of tha \s-1ISO C99
\&\s0\f(CW\*(C`CX_LIMITED_RANGE\*(C'\fR pragma.  Nevertheless, tha option applies to
all languages.
.IP "\fB\-fcx\-fortran\-rules\fR" 4
.IX Item "-fcx-fortran-rules"
Complex multiplication n' division follow Fortran rules.  Range
reduction is done as part of complex division yo, but there is no checking
whether tha result of a cold-ass lil complex multiplication or division is \f(CW\*(C`NaN
+ I*NaN\*(C'\fR, wit a attempt ta rescue tha thang up in dat case.
.Sp
Da default is \fB\-fno\-cx\-fortran\-rules\fR.
.PP
Da followin options control optimizations dat may improve
performizzle yo, but is not enabled by any \fB\-O\fR options.  This
section includes experimenstrual options dat may produce fucked up code.
.IP "\fB\-fbranch\-probabilities\fR" 4
.IX Item "-fbranch-probabilities"
Afta hustlin a program compiled wit \fB\-fprofile\-arcs\fR, you can compile it a second time using
\&\fB\-fbranch\-probabilities\fR, ta improve optimizations based on
the number of times each branch was taken. I aint talkin' bout chicken n' gravy biatch.  When a program
compiled wit \fB\-fprofile\-arcs\fR exits, it saves arc execution
counts ta a gangbangin' file called \fI\fIsourcename\fI.gcda\fR fo' each source
file.  Da shiznit up in dis data file is straight-up dependent on the
structure of tha generated code, so you must use tha same source code
and tha same optimization options fo' both compilations.
.Sp
With \fB\-fbranch\-probabilities\fR, \s-1GCC\s0 puts a
\&\fB\s-1REG_BR_PROB\s0\fR note on each \fB\s-1JUMP_INSN\s0\fR n' \fB\s-1CALL_INSN\s0\fR.
These can be used ta improve optimization. I aint talkin' bout chicken n' gravy biatch.  Currently, they is only
used up in one place: up in \fIreorg.c\fR, instead of guessin which path a
branch is most likely ta take, tha \fB\s-1REG_BR_PROB\s0\fR joints is used to
exactly determine which path is taken mo' often.
.IP "\fB\-fprofile\-values\fR" 4
.IX Item "-fprofile-values"
If combined wit \fB\-fprofile\-arcs\fR, it addz code so dat some
data bout jointz of expressions up in tha program is gathered.
.Sp
With \fB\-fbranch\-probabilities\fR, it readz back tha data gathered
from profilin jointz of expressions fo' usage up in optimizations.
.Sp
Enabled wit \fB\-fprofile\-generate\fR n' \fB\-fprofile\-use\fR.
.IP "\fB\-fvpt\fR" 4
.IX Item "-fvpt"
If combined wit \fB\-fprofile\-arcs\fR, dis option instructs tha compiler
to add code ta gather shiznit bout jointz of expressions.
.Sp
With \fB\-fbranch\-probabilities\fR, it readz back tha data gathered
and straight-up performs tha optimizations based on em.
Currently tha optimizations include specialization of division operations
usin tha knowledge bout tha value of tha denominator.
.IP "\fB\-frename\-registers\fR" 4
.IX Item "-frename-registers"
Attempt ta avoid false dependencies up in scheduled code by makin use
of registas left over afta regista allocation. I aint talkin' bout chicken n' gravy biatch.  This optimization
most benefits processors wit fuckin shitloadz of registers.  Dependin on the
debug shiznit format adopted by tha target, however, it can
make debuggin impossible, since variablez no longer stay in
a \*(L"home register\*(R".
.Sp
Enabled by default wit \fB\-funroll\-loops\fR n' \fB\-fpeel\-loops\fR.
.IP "\fB\-ftracer\fR" 4
.IX Item "-ftracer"
Perform tail duplication ta enpimpin' superblock size.  This transformation
simplifies tha control flow of tha function allowin other optimizations ta do
a betta thang.
.Sp
Enabled wit \fB\-fprofile\-use\fR.
.IP "\fB\-funroll\-loops\fR" 4
.IX Item "-funroll-loops"
Unroll loops whose number of iterations can be determined at compile time or
upon entry ta tha loop.  \fB\-funroll\-loops\fR implies
\&\fB\-frerun\-cse\-after\-loop\fR, \fB\-fweb\fR n' \fB\-frename\-registers\fR.
It also turns on complete loop peelin (i.e. complete removal of loops with
a lil' small-ass constant number of iterations).  This option make code larger, n' may
or may not make it run faster.
.Sp
Enabled wit \fB\-fprofile\-use\fR.
.IP "\fB\-funroll\-all\-loops\fR" 4
.IX Item "-funroll-all-loops"
Unroll all loops, even if they number of iterations is uncertain when
the loop is entered. Y'all KNOW dat shit, muthafucka!  This probably make programs run mo' slowly.
\&\fB\-funroll\-all\-loops\fR implies tha same ol' dirty options as
\&\fB\-funroll\-loops\fR.
.IP "\fB\-fpeel\-loops\fR" 4
.IX Item "-fpeel-loops"
Peels loops fo' which there is enough shiznit dat they do not
roll much (from flava feedback).  It also turns on complete loop peeling
(i.e. complete removal of loops wit lil' small-ass constant number of iterations).
.Sp
Enabled wit \fB\-fprofile\-use\fR.
.IP "\fB\-fmove\-loop\-invariants\fR" 4
.IX Item "-fmove-loop-invariants"
Enablez tha loop invariant motion pass up in tha \s-1RTL\s0 loop optimizer n' shit.  Enabled
at level \fB\-O1\fR
.IP "\fB\-funswitch\-loops\fR" 4
.IX Item "-funswitch-loops"
Move branches wit loop invariant conditions outta tha loop, wit duplicates
of tha loop on both branches (modified accordin ta result of tha condition).
.IP "\fB\-ffunction\-sections\fR" 4
.IX Item "-ffunction-sections"
.PD 0
.IP "\fB\-fdata\-sections\fR" 4
.IX Item "-fdata-sections"
.PD
Place each function or data item tha fuck into its own section up in tha output
file if tha target supports arbitrary sections.  Da name of the
function or tha name of tha data item determines tha sectionz name
in tha output file.
.Sp
Use these options on systems where tha linker can big-ass up optimizations
to improve localitizzle of reference up in tha instruction space.  Most systems
usin tha \s-1ELF\s0 object format n' \s-1SPARC\s0 processors hustlin Solaris 2 have
linkers wit such optimizations.  \s-1AIX\s0 may have these optimizations in
the future.
.Sp
Only use these options when there be dope benefits from bustin
so.  When you specify these options, tha assembla n' linker
create larger object n' executable filez n' is also slower.
Yo ass cannot use \f(CW\*(C`gprof\*(C'\fR on all systems if you
specify dis option, n' you may have problems wit debuggin if
you specify both dis option n' \fB\-g\fR.
.IP "\fB\-fbranch\-target\-load\-optimize\fR" 4
.IX Item "-fbranch-target-load-optimize"
Perform branch target regista load optimization before prologue / epilogue
threading.
Da use of target registas can typically be exposed only durin reload,
thus hoistin loadz outta loops n' bustin inter-block schedulin needs
a separate optimization pass.
.IP "\fB\-fbranch\-target\-load\-optimize2\fR" 4
.IX Item "-fbranch-target-load-optimize2"
Perform branch target regista load optimization afta prologue / epilogue
threading.
.IP "\fB\-fbtr\-bb\-exclusive\fR" 4
.IX Item "-fbtr-bb-exclusive"
When struttin branch target regista load optimization, don't reuse
branch target registas within any basic block.
.IP "\fB\-fstack\-protector\fR" 4
.IX Item "-fstack-protector"
Emit extra code ta check fo' buffer overflows, like fuckin stack smashing
attacks.  This is done by addin a guard variable ta functions with
vulnerable objects, n' you can put dat on yo' toast.  This includes functions dat call \f(CW\*(C`alloca\*(C'\fR, and
functions wit buffers larger than 8 bytes.  Da guardz is initialized
when a gangbangin' function is entered n' then checked when tha function exits.
If a guard check fails, a error message is printed n' tha program exits.
.IP "\fB\-fstack\-protector\-all\fR" 4
.IX Item "-fstack-protector-all"
Like \fB\-fstack\-protector\fR except dat all functions is protected.
.IP "\fB\-fstack\-protector\-strong\fR" 4
.IX Item "-fstack-protector-strong"
Like \fB\-fstack\-protector\fR but includes additionizzle functions to
be protected \-\-\- dem dat have local array definitions, or have
references ta local frame addresses.
.IP "\fB\-fsection\-anchors\fR" 4
.IX Item "-fsection-anchors"
Try ta reduce tha number of symbolic address calculations by using
shared \*(L"anchor\*(R" symbols ta address nearby objects, n' you can put dat on yo' toast.  This transformation
can help ta reduce tha number of \s-1GOT\s0 entries n' \s-1GOT\s0 accesses on some
targets.
.Sp
For example, tha implementation of tha followin function \f(CW\*(C`foo\*(C'\fR:
.Sp
.Vb 2
\&        static int a, b, c;
\&        int foo (void) { return a + b + c; }
.Ve
.Sp
usually calculates tha addressez of all three variablez yo, but if you
compile it wit \fB\-fsection\-anchors\fR, it accesses tha variables
from a cold-ass lil common anchor point instead. Y'all KNOW dat shit, muthafucka!  Da effect is similar ta the
followin pseudocode (which aint valid C):
.Sp
.Vb 5
\&        int foo (void)
\&        {
\&          regista int *xr = &x;
\&          return xr[&a \- &x] + xr[&b \- &x] + xr[&c \- &x];
\&        }
.Ve
.Sp
Not all targets support dis option.
.IP "\fB\-\-param\fR \fIname\fR\fB=\fR\fIvalue\fR" 4
.IX Item "--param name=value"
In some places, \s-1GCC\s0 uses various constants ta control tha amount of
optimization dat is done.  For example, \s-1GCC\s0 do not inline functions
that contain mo' than a cold-ass lil certain number of instructions.  Yo ass can
control a shitload of these constants on tha command line rockin the
\&\fB\-\-param\fR option.
.Sp
Da namez of specific parameters, n' tha meanin of tha joints, are
tied ta tha internalz of tha compiler, n' is subject ta chizzle
without notice up in future releases.
.Sp
In each case, tha \fIvalue\fR be a integer n' shit.  Da allowable chizzlez for
\&\fIname\fR are:
.RS 4
.IP "\fBpredictable-branch-outcome\fR" 4
.IX Item "predictable-branch-outcome"
When branch is predicted ta be taken wit probabilitizzle lower than dis threshold
(in cement), then it is considered well predictable. Da default is 10.
.IP "\fBmax-crossjump-edges\fR" 4
.IX Item "max-crossjump-edges"
Da maximum number of incomin edges ta consider fo' cross-jumping.
Da algorithm used by \fB\-fcrossjumping\fR is O(N^2) in
the number of edges incomin ta each block.  Increasin joints mean
more aggressive optimization, makin tha compilation time increase with
probably lil' small-ass improvement up in executable size.
.IP "\fBmin-crossjump-insns\fR" 4
.IX Item "min-crossjump-insns"
Da minimum number of instructions dat must be matched all up in tha end
of two blocks before cross-jumpin is performed on em.  This
value is ignored up in tha case where all instructions up in tha block being
cross-jumped from is matched. Y'all KNOW dat shit, muthafucka!  Da default value is 5.
.IP "\fBmax-grow-copy-bb-insns\fR" 4
.IX Item "max-grow-copy-bb-insns"
Da maximum code size expansion factor when copyin basic blocks
instead of jumping.  Da expansion is relatizzle ta a jump instruction.
Da default value is 8.
.IP "\fBmax-goto-duplication-insns\fR" 4
.IX Item "max-goto-duplication-insns"
Da maximum number of instructions ta duplicate ta a funky-ass block dat jumps
to a cold-ass lil computed goto.  To avoid O(N^2) behavior up in a number of
passes, \s-1GCC\s0 factors computed gotos early up in tha compilation process,
and unfactors dem as late as possible.  Only computed jumps at the
end of a funky-ass basic blocks wit no mo' than max-goto-duplication-insns are
unfactored. Y'all KNOW dat shit, muthafucka!  Da default value is 8.
.IP "\fBmax-delay-slot-insn-search\fR" 4
.IX Item "max-delay-slot-insn-search"
Da maximum number of instructions ta consider when lookin fo' an
instruction ta fill a thugged-out delay slot.  If mo' than dis arbitrary number of
instructions is searched, tha time savings from fillin tha delay slot
are minimal, so stop searching.  Increasin joints mean more
aggressive optimization, makin tha compilation time increase wit probably
small improvement up in execution time.
.IP "\fBmax-delay-slot-live-search\fR" 4
.IX Item "max-delay-slot-live-search"
When tryin ta fill delay slots, tha maximum number of instructions to
consider when searchin fo' a funky-ass block wit valid live register
information. I aint talkin' bout chicken n' gravy biatch.  Increasin dis arbitrarily chosen value means more
aggressive optimization, increasin tha compilation time.  This parameter
should be removed when tha delay slot code is rewritten ta maintain the
control-flow graph.
.IP "\fBmax-gcse-memory\fR" 4
.IX Item "max-gcse-memory"
Da approximate maximum amount of memory dat can be allocated in
order ta big-ass up tha global common subexpression elimination
optimization. I aint talkin' bout chicken n' gravy biatch.  If mo' memory than specified is required, the
optimization aint done.
.IP "\fBmax-gcse-insertion-ratio\fR" 4
.IX Item "max-gcse-insertion-ratio"
If tha ratio of expression insertions ta deletions is larger than dis value
for any expression, then \s-1RTL PRE\s0 bangs or removes tha expression n' thus
leaves partially redundant computations up in tha instruction stream.  Da default value is 20.
.IP "\fBmax-pending-list-length\fR" 4
.IX Item "max-pending-list-length"
Da maximum number of pendin dependencies schedulin allows
before flushin tha current state n' startin over n' shit.  Big-Ass functions
with few branches or calls can create excessively big-ass lists which
needlessly consume memory n' resources.
.IP "\fBmax-modulo-backtrack-attempts\fR" 4
.IX Item "max-modulo-backtrack-attempts"
Da maximum number of backtrack attempts tha schedula should make
when modulo schedulin a loop.  Larger joints can exponentially increase
compilation time.
.IP "\fBmax-inline-insns-single\fR" 4
.IX Item "max-inline-insns-single"
Several parametas control tha tree inliner used up in \s-1GCC.\s0
This number sets tha maximum number of instructions (counted up in \s-1GCC\s0's
internal representation) up in a single function dat tha tree inliner
considaz fo' inlining.  This only affects functions declared
inline n' methodz implemented up in a cold-ass lil class declaration (\*(C+).
Da default value is 400.
.IP "\fBmax-inline-insns-auto\fR" 4
.IX Item "max-inline-insns-auto"
When you use \fB\-finline\-functions\fR (included up in \fB\-O3\fR),
a shitload of functions dat would otherwise not be considered fo' inlining
by tha compila is investigated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  To dem functions, a gangbangin' finger-lickin' different
(more restrictive) limit compared ta functions declared inline can
be applied.
Da default value is 40.
.IP "\fBinline-min-speedup\fR" 4
.IX Item "inline-min-speedup"
When estimated performizzle improvement of calla + callee runtime exceedz this
threshold (in precent), tha function can be inlined regardless tha limit on
\&\fB\-\-param max-inline-insns-single\fR n' \fB\-\-param
max-inline-insns-auto\fR.
.IP "\fBlarge-function-insns\fR" 4
.IX Item "large-function-insns"
Da limit specifyin straight-up big-ass functions.  For functions larger than this
limit afta inlining, inlinin is constrained by
\&\fB\-\-param large-function-growth\fR.  This parameta is useful primarily
to avoid off tha hook compilation time caused by non-linear algorithms used by the
back end.
Da default value is 2700.
.IP "\fBlarge-function-growth\fR" 4
.IX Item "large-function-growth"
Specifies maximal growth of big-ass function caused by inlinin up in cements.
Da default value is 100 which limits big-ass function growth ta 2.0 times
the original gangsta size.
.IP "\fBlarge-unit-insns\fR" 4
.IX Item "large-unit-insns"
Da limit specifyin big-ass translation unit.  Growth caused by inlinin of
units larger than dis limit is limited by \fB\-\-param inline-unit-growth\fR.
For lil' small-ass units dis might be too tight.
For example, consider a unit consistin of function A
that is inline n' B dat just calls A three times.  If B is lil' small-ass relatizzle to
A, tha growth of unit is 300\e% n' yet such inlinin is straight-up sane.  For hella
pimpin' units consistin of lil' small-ass inlineable functions, however, tha overall unit
growth limit is needed ta avoid exponential explosion of code size.  Thus for
smalla units, tha size is increased ta \fB\-\-param large-unit-insns\fR
before applyin \fB\-\-param inline-unit-growth\fR.  Da default is 10000.
.IP "\fBinline-unit-growth\fR" 4
.IX Item "inline-unit-growth"
Specifies maximal overall growth of tha compilation unit caused by inlining.
Da default value is 30 which limits unit growth ta 1.3 times tha original
size.
.IP "\fBipcp-unit-growth\fR" 4
.IX Item "ipcp-unit-growth"
Specifies maximal overall growth of tha compilation unit caused by
interprocedural constant propagation. I aint talkin' bout chicken n' gravy biatch.  Da default value is 10 which limits
unit growth ta 1.1 times tha original gangsta size.
.IP "\fBlarge-stack-frame\fR" 4
.IX Item "large-stack-frame"
Da limit specifyin big-ass stack frames.  While inlinin tha algorithm is trying
to not grow past dis limit too much.  Da default value is 256 bytes.
.IP "\fBlarge-stack-frame-growth\fR" 4
.IX Item "large-stack-frame-growth"
Specifies maximal growth of big-ass stack frames caused by inlinin up in cements.
Da default value is 1000 which limits big-ass stack frame growth ta 11 times
the original gangsta size.
.IP "\fBmax-inline-insns-recursive\fR" 4
.IX Item "max-inline-insns-recursive"
.PD 0
.IP "\fBmax-inline-insns-recursive-auto\fR" 4
.IX Item "max-inline-insns-recursive-auto"
.PD
Specifies tha maximum number of instructions a out-of-line copy of a
self-recursive inline
function can grow tha fuck into by struttin recursive inlining.
.Sp
For functions declared inline, \fB\-\-param max-inline-insns-recursive\fR is
taken tha fuck into account.  For functions not declared inline, recursive inlining
happens only when \fB\-finline\-functions\fR (included up in \fB\-O3\fR) is
enabled n' \fB\-\-param max-inline-insns-recursive-auto\fR is used. Y'all KNOW dat shit, muthafucka!  The
default value is 450.
.IP "\fBmax-inline-recursive-depth\fR" 4
.IX Item "max-inline-recursive-depth"
.PD 0
.IP "\fBmax-inline-recursive-depth-auto\fR" 4
.IX Item "max-inline-recursive-depth-auto"
.PD
Specifies tha maximum recursion depth used fo' recursive inlining.
.Sp
For functions declared inline, \fB\-\-param max-inline-recursive-depth\fR is
taken tha fuck into account.  For functions not declared inline, recursive inlining
happens only when \fB\-finline\-functions\fR (included up in \fB\-O3\fR) is
enabled n' \fB\-\-param max-inline-recursive-depth-auto\fR is used. Y'all KNOW dat shit, muthafucka!  The
default value is 8.
.IP "\fBmin-inline-recursive-probability\fR" 4
.IX Item "min-inline-recursive-probability"
Recursive inlinin is profitable only fo' function havin deep recursion
in average n' can hurt fo' function havin lil recursion depth by
increasin tha prologue size or complexitizzle of function body ta other
optimizers.
.Sp
When flava feedback be available (see \fB\-fprofile\-generate\fR) tha actual
recursion depth can be guessed from probabilitizzle dat function recurses via a
given call expression. I aint talkin' bout chicken n' gravy biatch.  This parameta limits inlinin only ta booty-call expressions
whose probabilitizzle exceedz tha given threshold (in cements).
Da default value is 10.
.IP "\fBearly-inlining-insns\fR" 4
.IX Item "early-inlining-insns"
Specify growth dat tha early inliner can make.  In effect it increases
the amount of inlinin fo' code havin a big-ass abstraction penalty.
Da default value is 10.
.IP "\fBmax-early-inliner-iterations\fR" 4
.IX Item "max-early-inliner-iterations"
.PD 0
.IP "\fBmax-early-inliner-iterations\fR" 4
.IX Item "max-early-inliner-iterations"
.PD
Limit of iterationz of tha early inliner n' shit.  This basically bounds
the number of nested indirect calls tha early inliner can resolve.
Deeper chains is still handled by late inlining.
.IP "\fBcomdat-sharing-probability\fR" 4
.IX Item "comdat-sharing-probability"
.PD 0
.IP "\fBcomdat-sharing-probability\fR" 4
.IX Item "comdat-sharing-probability"
.PD
Probabilitizzle (in cement) dat \*(C+ inline function wit comdat visibility
are shared across multiple compilation units, n' you can put dat on yo' toast.  Da default value is 20.
.IP "\fBmin-vect-loop-bound\fR" 4
.IX Item "min-vect-loop-bound"
Da minimum number of iterations under which loops is not vectorized
when \fB\-ftree\-vectorize\fR is used. Y'all KNOW dat shit, muthafucka!  Da number of iterations after
vectorization need ta be pimped outa than tha value specified by dis option
to allow vectorization. I aint talkin' bout chicken n' gravy biatch.  Da default value is 0.
.IP "\fBgcse-cost-distance-ratio\fR" 4
.IX Item "gcse-cost-distance-ratio"
Scalin factor up in calculation of maximum distizzle a expression
can be moved by \s-1GCSE\s0 optimizations.  This is currently supported only up in the
code hoistin pass.  Da bigger tha ratio, tha mo' aggressive code hoisting
is wit simple expressions, i.e., tha expressions dat have cost
less than \fBgcse-unrestricted-cost\fR.  Specifyin 0 disables
hoistin of simple expressions.  Da default value is 10.
.IP "\fBgcse-unrestricted-cost\fR" 4
.IX Item "gcse-unrestricted-cost"
Cost, roughly measured as tha cost of a single typical machine
instruction, at which \s-1GCSE\s0 optimizations do not constrain
the distizzle a expression can travel.  This is currently
supported only up in tha code hoistin pass.  Da lesser tha cost,
the mo' aggressive code hoistin is.  Specifyin 0 
allows all expressions ta travel unrestricted distances.
Da default value is 3.
.IP "\fBmax-hoist-depth\fR" 4
.IX Item "max-hoist-depth"
Da depth of search up in tha dominator tree fo' expressions ta hoist.
This is used ta avoid quadratic behavior up in hoistin algorithm.
Da value of 0 do not limit on tha search yo, but may slow down compilation
of big-ass functions.  Da default value is 30.
.IP "\fBmax-tail-merge-comparisons\fR" 4
.IX Item "max-tail-merge-comparisons"
Da maximum amount of similar bbs ta compare a funky-ass bb with.  This is used to
avoid quadratic behavior up in tree tail merging.  Da default value is 10.
.IP "\fBmax-tail-merge-iterations\fR" 4
.IX Item "max-tail-merge-iterations"
Da maximum amount of iterationz of tha pass over tha function. I aint talkin' bout chicken n' gravy biatch.  This is used to
limit compilation time up in tree tail merging.  Da default value is 2.
.IP "\fBmax-unrolled-insns\fR" 4
.IX Item "max-unrolled-insns"
Da maximum number of instructions dat a loop may gotta be unrolled.
If a loop is unrolled, dis parameta also determines how tha fuck nuff times
the loop code is unrolled.
.IP "\fBmax-average-unrolled-insns\fR" 4
.IX Item "max-average-unrolled-insns"
Da maximum number of instructions biased by probabilitizzlez of they execution
that a loop may gotta be unrolled. Y'all KNOW dat shit, muthafucka!  If a loop is unrolled,
this parameta also determines how tha fuck nuff times tha loop code is unrolled.
.IP "\fBmax-unroll-times\fR" 4
.IX Item "max-unroll-times"
Da maximum number of unrollingz of a single loop.
.IP "\fBmax-peeled-insns\fR" 4
.IX Item "max-peeled-insns"
Da maximum number of instructions dat a loop may gotta be peeled.
If a loop is peeled, dis parameta also determines how tha fuck nuff times
the loop code is peeled.
.IP "\fBmax-peel-times\fR" 4
.IX Item "max-peel-times"
Da maximum number of peelingz of a single loop.
.IP "\fBmax-peel-branches\fR" 4
.IX Item "max-peel-branches"
Da maximum number of branches on tha bangin' path all up in tha peeled sequence.
.IP "\fBmax-completely-peeled-insns\fR" 4
.IX Item "max-completely-peeled-insns"
Da maximum number of insnz of a cold-ass lil straight-up peeled loop.
.IP "\fBmax-completely-peel-times\fR" 4
.IX Item "max-completely-peel-times"
Da maximum number of iterationz of a loop ta be suitable fo' complete peeling.
.IP "\fBmax-completely-peel-loop-nest-depth\fR" 4
.IX Item "max-completely-peel-loop-nest-depth"
Da maximum depth of a loop nest suitable fo' complete peeling.
.IP "\fBmax-unswitch-insns\fR" 4
.IX Item "max-unswitch-insns"
Da maximum number of insnz of a unswitched loop.
.IP "\fBmax-unswitch-level\fR" 4
.IX Item "max-unswitch-level"
Da maximum number of branches unswitched up in a single loop.
.IP "\fBlim-expensive\fR" 4
.IX Item "lim-expensive"
Da minimum cost of a high-rollin' expression up in tha loop invariant motion.
.IP "\fBiv-consider-all-candidates-bound\fR" 4
.IX Item "iv-consider-all-candidates-bound"
Bound on number of muthafuckas fo' induction variables, below which
all muthafuckas is considered fo' each use up in induction variable
optimizations.  If there be mo' muthafuckas than this,
only da most thugged-out relevant ones is considered ta avoid quadratic time complexity.
.IP "\fBiv-max-considered-uses\fR" 4
.IX Item "iv-max-considered-uses"
Da induction variable optimizations give up on loops dat contain more
induction variable uses.
.IP "\fBiv-always-prune-cand-set-bound\fR" 4
.IX Item "iv-always-prune-cand-set-bound"
If tha number of muthafuckas up in tha set is smalla than dis value,
always try ta remove unnecessary ivs from tha set
when addin a freshly smoked up one.
.IP "\fBscev-max-expr-size\fR" 4
.IX Item "scev-max-expr-size"
Bound on size of expressions used up in tha scalar evolutions analyzer.
Big-Ass expressions slow tha analyzer.
.IP "\fBscev-max-expr-complexity\fR" 4
.IX Item "scev-max-expr-complexity"
Bound on tha complexitizzle of tha expressions up in tha scalar evolutions analyzer.
Complex expressions slow tha analyzer.
.IP "\fBomega-max-vars\fR" 4
.IX Item "omega-max-vars"
Da maximum number of variablez up in a Omega constraint system.
Da default value is 128.
.IP "\fBomega-max-geqs\fR" 4
.IX Item "omega-max-geqs"
Da maximum number of inequalitizzles up in a Omega constraint system.
Da default value is 256.
.IP "\fBomega-max-eqs\fR" 4
.IX Item "omega-max-eqs"
Da maximum number of equalitizzles up in a Omega constraint system.
Da default value is 128.
.IP "\fBomega-max-wild-cards\fR" 4
.IX Item "omega-max-wild-cards"
Da maximum number of wildcard variablez dat tha Omega solver is
able ta insert.  Da default value is 18.
.IP "\fBomega-hash-table-size\fR" 4
.IX Item "omega-hash-table-size"
Da size of tha hash table up in tha Omega solver n' shit.  Da default value is
550.
.IP "\fBomega-max-keys\fR" 4
.IX Item "omega-max-keys"
Da maximal number of keys used by tha Omega solver n' shit.  Da default
value is 500.
.IP "\fBomega-eliminate-redundant-constraints\fR" 4
.IX Item "omega-eliminate-redundant-constraints"
When set ta 1, use high-rollin' methodz ta eliminizzle all redundant
constraints, n' you can put dat on yo' toast.  Da default value is 0.
.IP "\fBvect-max-version-for-alignment-checks\fR" 4
.IX Item "vect-max-version-for-alignment-checks"
Da maximum number of run-time checks dat can be performed when
fuckin wit loop versionin fo' alignment up in tha vectorizer n' shit.  See option
\&\fB\-ftree\-vect\-loop\-version\fR fo' mo' shiznit.
.IP "\fBvect-max-version-for-alias-checks\fR" 4
.IX Item "vect-max-version-for-alias-checks"
Da maximum number of run-time checks dat can be performed when
fuckin wit loop versionin fo' alias up in tha vectorizer n' shit.  See option
\&\fB\-ftree\-vect\-loop\-version\fR fo' mo' shiznit.
.IP "\fBmax-iterations-to-track\fR" 4
.IX Item "max-iterations-to-track"
Da maximum number of iterationz of a loop tha brute-force algorithm
for analysiz of tha number of iterationz of tha loop tries ta evaluate.
.IP "\fBhot-bb-count-ws-permille\fR" 4
.IX Item "hot-bb-count-ws-permille"
A basic block flava count is considered bangin' if it contributes ta 
the given permillage (i.e. 0...1000) of tha entire profiled execution.
.IP "\fBhot-bb-frequency-fraction\fR" 4
.IX Item "hot-bb-frequency-fraction"
Select fraction of tha entry block frequency of executionz of basic block in
function given basic block need ta gotta be considered hot.
.IP "\fBmax-predicted-iterations\fR" 4
.IX Item "max-predicted-iterations"
Da maximum number of loop iterations we predict statically.  This is useful
in cases where a gangbangin' function gotz nuff a single loop wit known bound and
another loop wit unknown bound.
Da known number of iterations is predicted erectly, while
the unknown number of iterations average ta roughly 10.  This means dat the
loop without boundz appears artificially cold relatizzle ta tha other one.
.IP "\fBalign-threshold\fR" 4
.IX Item "align-threshold"
Select fraction of tha maximal frequency of executionz of a funky-ass basic block in
a function ta align tha basic block.
.IP "\fBalign-loop-iterations\fR" 4
.IX Item "align-loop-iterations"
A loop sposed ta fuckin iterate at least tha selected number of iterations is
aligned.
.IP "\fBtracer-dynamic-coverage\fR" 4
.IX Item "tracer-dynamic-coverage"
.PD 0
.IP "\fBtracer-dynamic-coverage-feedback\fR" 4
.IX Item "tracer-dynamic-coverage-feedback"
.PD
This value is used ta limit superblock formation once tha given cementage of
executed instructions is covered. Y'all KNOW dat shit, muthafucka!  This limits unnecessary code size
expansion.
.Sp
Da \fBtracer-dynamic-coverage-feedback\fR is used only when profile
feedback be available.  Da real profilez (as opposed ta statically estimated
ones) is much less balanced allowin tha threshold ta be larger value.
.IP "\fBtracer-max-code-growth\fR" 4
.IX Item "tracer-max-code-growth"
Quit tail duplication once code growth has reached given cementage.  This is
a rather artificial limit, as most of tha duplicates is eliminated lata in
cross jumping, so it may be set ta much higher joints than is tha desired code
growth.
.IP "\fBtracer-min-branch-ratio\fR" 4
.IX Item "tracer-min-branch-ratio"
Quit reverse growth when tha reverse probabilitizzle of dopest edge is less than this
threshold (in cement).
.IP "\fBtracer-min-branch-ratio\fR" 4
.IX Item "tracer-min-branch-ratio"
.PD 0
.IP "\fBtracer-min-branch-ratio-feedback\fR" 4
.IX Item "tracer-min-branch-ratio-feedback"
.PD
Quit forward growth if tha dopest edge has probabilitizzle lower than this
threshold.
.Sp
Similarly ta \fBtracer-dynamic-coverage\fR two joints is present, one for
compilation fo' flava feedback n' one fo' compilation without.  Da value
for compilation wit flava feedback need ta be mo' conservatizzle (higher) in
order ta make tracer effective.
.IP "\fBmax-cse-path-length\fR" 4
.IX Item "max-cse-path-length"
Da maximum number of basic blocks on path dat \s-1CSE\s0 considers.
Da default is 10.
.IP "\fBmax-cse-insns\fR" 4
.IX Item "max-cse-insns"
Da maximum number of instructions \s-1CSE\s0 processes before flushing.
Da default is 1000.
.IP "\fBggc-min-expand\fR" 4
.IX Item "ggc-min-expand"
\&\s-1GCC\s0 uses a garbage collector ta manage its own memory allocation. I aint talkin' bout chicken n' gravy biatch.  This
parameta specifies tha minimum cementage by which tha garbage
collectorz heap should be allowed ta expand between collections.
Tunin dis may improve compilation speed; it has no effect on code
generation.
.Sp
Da default is 30% + 70% * (\s-1RAM/1GB\s0) wit a upper bound of 100% when
\&\s-1RAM \s0>= 1GB.  If \f(CW\*(C`getrlimit\*(C'\fR be available, tha notion of \*(L"\s-1RAM\*(R"\s0 is
the smallest of actual \s-1RAM\s0 n' \f(CW\*(C`RLIMIT_DATA\*(C'\fR or \f(CW\*(C`RLIMIT_AS\*(C'\fR.  If
\&\s-1GCC\s0 aint able ta calculate \s-1RAM\s0 on a particular platform, tha lower
bound of 30% is used. Y'all KNOW dat shit, muthafucka!  Settin dis parameta and
\&\fBggc-min-heapsize\fR ta zero causes a gangbangin' full collection ta occur at
every opportunity.  This is mad slow yo, but can be useful for
debugging.
.IP "\fBggc-min-heapsize\fR" 4
.IX Item "ggc-min-heapsize"
Minimum size of tha garbage collectorz heap before it begins bothering
to collect garbage.  Da first collection occurs afta tha heap expands
by \fBggc-min-expand\fR% beyond \fBggc-min-heapsize\fR.  Again,
tunin dis may improve compilation speed, n' has no effect on code
generation.
.Sp
Da default is tha smalla of \s-1RAM/8, RLIMIT_RSS,\s0 or a limit that
tries ta ensure dat \s-1RLIMIT_DATA\s0 or \s-1RLIMIT_AS\s0 is not exceeded yo, but
with a lower bound of 4096 (four megabytes) n' a upper bound of
131072 (128 megabytes).  If \s-1GCC\s0 aint able ta calculate \s-1RAM\s0 on a
particular platform, tha lower bound is used. Y'all KNOW dat shit, muthafucka!  Settin dis parameter
very big-ass effectively disablez garbage collection. I aint talkin' bout chicken n' gravy biatch.  Settin this
parameta n' \fBggc-min-expand\fR ta zero causes a gangbangin' full collection
to occur at every last muthafuckin opportunity.
.IP "\fBmax-reload-search-insns\fR" 4
.IX Item "max-reload-search-insns"
Da maximum number of instruction reload should look backward fo' equivalent
regista n' shit.  Increasin joints mean mo' aggressive optimization, makin the
compilation time increase wit probably slightly betta performance.
Da default value is 100.
.IP "\fBmax-cselib-memory-locations\fR" 4
.IX Item "max-cselib-memory-locations"
Da maximum number of memory locations cselib should take tha fuck into account.
Increasin joints mean mo' aggressive optimization, makin tha compilation time
increase wit probably slightly betta performance.  Da default value is 500.
.IP "\fBreorder-blocks-duplicate\fR" 4
.IX Item "reorder-blocks-duplicate"
.PD 0
.IP "\fBreorder-blocks-duplicate-feedback\fR" 4
.IX Item "reorder-blocks-duplicate-feedback"
.PD
Used by tha basic block reorderin pass ta decizzle whether ta use unconditional
branch or duplicate tha code on its destination. I aint talkin' bout chicken n' gravy biatch.  Code is duplicated when its
estimated size is smalla than dis value multiplied by tha estimated size of
unconditionizzle jump up in tha bangin' spotz of tha program.
.Sp
Da \fBreorder-block-duplicate-feedback\fR is used only when profile
feedback be available.  It may be set ta higher joints than
\&\fBreorder-block-duplicate\fR since shiznit bout tha bangin' spots is more
accurate.
.IP "\fBmax-sched-ready-insns\fR" 4
.IX Item "max-sched-ready-insns"
Da maximum number of instructions locked n loaded ta be issued tha schedula should
consider at any given time durin tha straight-up original gangsta schedulin pass.  Increasing
values mean mo' thorough searches, makin tha compilation time increase
with probably lil benefit.  Da default value is 100.
.IP "\fBmax-sched-region-blocks\fR" 4
.IX Item "max-sched-region-blocks"
Da maximum number of blocks up in a region ta be considered for
interblock scheduling.  Da default value is 10.
.IP "\fBmax-pipeline-region-blocks\fR" 4
.IX Item "max-pipeline-region-blocks"
Da maximum number of blocks up in a region ta be considered for
pipelinin up in tha selectizzle schedula n' shit.  Da default value is 15.
.IP "\fBmax-sched-region-insns\fR" 4
.IX Item "max-sched-region-insns"
Da maximum number of insns up in a region ta be considered for
interblock scheduling.  Da default value is 100.
.IP "\fBmax-pipeline-region-insns\fR" 4
.IX Item "max-pipeline-region-insns"
Da maximum number of insns up in a region ta be considered for
pipelinin up in tha selectizzle schedula n' shit.  Da default value is 200.
.IP "\fBmin-spec-prob\fR" 4
.IX Item "min-spec-prob"
Da minimum probabilitizzle (in cements) of reachin a source block
for interblock speculatizzle scheduling.  Da default value is 40.
.IP "\fBmax-sched-extend-regions-iters\fR" 4
.IX Item "max-sched-extend-regions-iters"
Da maximum number of iterations all up in \s-1CFG\s0 ta extend regions.
A value of 0 (the default) disablez region extensions.
.IP "\fBmax-sched-insn-conflict-delay\fR" 4
.IX Item "max-sched-insn-conflict-delay"
Da maximum conflict delay fo' a insn ta be considered fo' speculatizzle motion.
Da default value is 3.
.IP "\fBsched-spec-prob-cutoff\fR" 4
.IX Item "sched-spec-prob-cutoff"
Da minimal probabilitizzle of speculation success (in cements), so that
speculatizzle insns is scheduled.
Da default value is 40.
.IP "\fBsched-spec-state-edge-prob-cutoff\fR" 4
.IX Item "sched-spec-state-edge-prob-cutoff"
Da minimum probabilitizzle a edge must have fo' tha schedula ta save its
state across dat shit.
Da default value is 10.
.IP "\fBsched-mem-true-dep-cost\fR" 4
.IX Item "sched-mem-true-dep-cost"
Minimal distizzle (in \s-1CPU\s0 cycles) between store n' load targetin same
memory locations.  Da default value is 1.
.IP "\fBselsched-max-lookahead\fR" 4
.IX Item "selsched-max-lookahead"
Da maximum size of tha lookahead window of selectizzle scheduling.  It be a
depth of search fo' available instructions.
Da default value is 50.
.IP "\fBselsched-max-sched-times\fR" 4
.IX Item "selsched-max-sched-times"
Da maximum number of times dat a instruction is scheduled during
selectizzle scheduling.  This is tha limit on tha number of iterations
all up in which tha instruction may be pipelined. Y'all KNOW dat shit, muthafucka!  Da default value is 2.
.IP "\fBselsched-max-insns-to-rename\fR" 4
.IX Item "selsched-max-insns-to-rename"
Da maximum number of dopest instructions up in tha locked n loaded list dat is considered
for renamin up in tha selectizzle schedula n' shit.  Da default value is 2.
.IP "\fBsms-min-sc\fR" 4
.IX Item "sms-min-sc"
Da minimum value of stage count dat swin modulo scheduler
generates.  Da default value is 2.
.IP "\fBmax-last-value-rtl\fR" 4
.IX Item "max-last-value-rtl"
Da maximum size measured as number of RTLs dat can be recorded up in a expression
in combiner fo' a pseudo regista as last known value of dat regista n' shit.  Da default
is 10000.
.IP "\fBinteger-share-limit\fR" 4
.IX Item "integer-share-limit"
Lil Small-Ass integer constants can bust a gangbangin' finger-lickin' dirty-ass shared data structure, reducin the
compilerz memory usage n' increasin its speed. Y'all KNOW dat shit, muthafucka!  This sets tha maximum
value of a gangbangin' finger-lickin' dirty-ass shared integer constant.  Da default value is 256.
.IP "\fBssp-buffer-size\fR" 4
.IX Item "ssp-buffer-size"
Da minimum size of buffers (i.e. arrays) dat receive stack smashing
protection when \fB\-fstack\-protection\fR is used.
.IP "\fBmax-jump-thread-duplication-stmts\fR" 4
.IX Item "max-jump-thread-duplication-stmts"
Maximum number of statements allowed up in a funky-ass block dat need ta be
duplicated when threadin jumps.
.IP "\fBmax-fields-for-field-sensitive\fR" 4
.IX Item "max-fields-for-field-sensitive"
Maximum number of fieldz up in a structure treated in
a field sensitizzle manner durin pointa analysis.  Da default is zero
for \fB\-O0\fR n' \fB\-O1\fR,
and 100 fo' \fB\-Os\fR, \fB\-O2\fR, n' \fB\-O3\fR.
.IP "\fBprefetch-latency\fR" 4
.IX Item "prefetch-latency"
Estimate on average number of instructions dat is executed before
prefetch finishes.  Da distizzle prefetched ahead is proportional
to dis constant.  Increasin dis number may also lead ta less
streams bein prefetched (see \fBsimultaneous-prefetches\fR).
.IP "\fBsimultaneous-prefetches\fR" 4
.IX Item "simultaneous-prefetches"
Maximum number of prefetches dat can run all up in tha same time.
.IP "\fBl1\-cache\-line\-size\fR" 4
.IX Item "l1-cache-line-size"
Da size of cache line up in L1 cache, up in bytes.
.IP "\fBl1\-cache\-size\fR" 4
.IX Item "l1-cache-size"
Da size of L1 cache, up in kilobytes.
.IP "\fBl2\-cache\-size\fR" 4
.IX Item "l2-cache-size"
Da size of L2 cache, up in kilobytes.
.IP "\fBmin-insn-to-prefetch-ratio\fR" 4
.IX Item "min-insn-to-prefetch-ratio"
Da minimum ratio between tha number of instructions n' the
number of prefetches ta enable prefetchin up in a loop.
.IP "\fBprefetch-min-insn-to-mem-ratio\fR" 4
.IX Item "prefetch-min-insn-to-mem-ratio"
Da minimum ratio between tha number of instructions n' the
number of memory references ta enable prefetchin up in a loop.
.IP "\fBuse-canonical-types\fR" 4
.IX Item "use-canonical-types"
Whether tha compila should use tha \*(L"canonical\*(R" type system.  By
default, dis should always be 1, which uses a mo' efficient internal
mechanizzle fo' comparin types up in \*(C+ n' Objective\-\*(C+.  But fuck dat shiznit yo, tha word on tha street is dat if
bugs up in tha canonical type system is causin compilation failures,
set dis value ta 0 ta disable canonical types.
.IP "\fBswitch-conversion-max-branch-ratio\fR" 4
.IX Item "switch-conversion-max-branch-ratio"
Switch initialization conversion refuses ta create arrays dat are
bigger than \fBswitch-conversion-max-branch-ratio\fR times tha number of
branches up in tha switch.
.IP "\fBmax-partial-antic-length\fR" 4
.IX Item "max-partial-antic-length"
Maximum length of tha partial antic set computed durin tha tree
partial redundancy elimination optimization (\fB\-ftree\-pre\fR) when
optimizin at \fB\-O3\fR n' above.  For some sortz of source code
the enhanced partial redundancy elimination optimization can run away,
consumin all of tha memory available on tha host machine.  This
parameta sets a limit on tha length of tha sets dat is computed,
which prevents tha runaway behavior. Shiiit, dis aint no joke.  Settin a value of 0 for
this parameta allows a unlimited set length.
.IP "\fBsccvn-max-scc-size\fR" 4
.IX Item "sccvn-max-scc-size"
Maximum size of a straight fuckin connected component (\s-1SCC\s0) durin \s-1SCCVN\s0
processing.  If dis limit is hit, \s-1SCCVN\s0 processin fo' tha whole
function aint done n' optimizations dependin on it are
disabled. Y'all KNOW dat shit, muthafucka!  Da default maximum \s-1SCC\s0 size is 10000.
.IP "\fBsccvn-max-alias-queries-per-access\fR" 4
.IX Item "sccvn-max-alias-queries-per-access"
Maximum number of alias-oracle queries we big-ass up when lookin for
redundancies fo' loadz n' stores.  If dis limit is hit tha search
is aborted n' tha load or store aint considered redundant.  The
number of queries be algorithmically limited ta tha number of
stores on all paths from tha load ta tha function entry.
Da default maxmimum number of queries is 1000.
.IP "\fBira-max-loops-num\fR" 4
.IX Item "ira-max-loops-num"
\&\s-1IRA\s0 uses regionizzle regista allocation by default.  If a gangbangin' function
gotz nuff mo' loops than tha number given by dis parameter, only at most
the given number of da most thugged-out frequently-executed loops form regions
for regionizzle regista allocation. I aint talkin' bout chicken n' gravy biatch.  Da default value of the
parameta is 100.
.IP "\fBira-max-conflict-table-size\fR" 4
.IX Item "ira-max-conflict-table-size"
Although \s-1IRA\s0 uses a sophisticated algorithm ta compress tha conflict
table, tha table can still require excessive amountz of memory for
huge functions.  If tha conflict table fo' a gangbangin' function could be more
than tha size up in \s-1MB\s0 given by dis parameter, tha regista allocator
instead uses a gangbangin' faster, simpler, n' lower-quality
algorithm dat do not require buildin a pseudo-regista conflict table.  
Da default value of tha parameta is 2000.
.IP "\fBira-loop-reserved-regs\fR" 4
.IX Item "ira-loop-reserved-regs"
\&\s-1IRA\s0 can be used ta evaluate mo' accurate regista heat up in loops
for decisions ta move loop invariants (see \fB\-O3\fR).  Da number
of available registas reserved fo' some other purposes is given
by dis parameter n' shit.  Da default value of tha parameta is 2, which is
the minimal number of registas needed by typical instructions.
This value is tha dopest found from a shitload of experiments.
.IP "\fBloop-invariant-max-bbs-in-loop\fR" 4
.IX Item "loop-invariant-max-bbs-in-loop"
Loop invariant motion can be straight-up expensive, both up in compilation time and
in amount of needed compile-time memory, wit straight-up big-ass loops.  Loops
with mo' basic blocks than dis parameta won't have loop invariant
motion optimization performed on em.  Da default value of the
parameta is 1000 fo' \fB\-O1\fR n' 10000 fo' \fB\-O2\fR n' above.
.IP "\fBloop-max-datarefs-for-datadeps\fR" 4
.IX Item "loop-max-datarefs-for-datadeps"
Buildin data dapendencies is high-rollin' fo' straight-up big-ass loops.  This
parameta limits tha number of data references up in loops dat are
considered fo' data dependence analysis.  These big-ass loops is no
handled by tha optimizations rockin loop data dependencies.
Da default value is 1000.
.IP "\fBmax-vartrack-size\fR" 4
.IX Item "max-vartrack-size"
Sets a maximum number of hash table slots ta use durin variable
trackin dataflow analysiz of any function. I aint talkin' bout chicken n' gravy biatch.  If dis limit is exceeded
with variable trackin at assignments enabled, analysis fo' that
function is retried without it, afta removin all debug insns from
the function. I aint talkin' bout chicken n' gravy biatch.  If tha limit is exceeded even without debug insns, var
trackin analysis is straight-up disabled fo' tha function. I aint talkin' bout chicken n' gravy biatch.  Setting
the parameta ta zero make it unlimited.
.IP "\fBmax-vartrack-expr-depth\fR" 4
.IX Item "max-vartrack-expr-depth"
Sets a maximum number of recursion levels when attemptin ta map
variable names or debug temporaries ta value expressions.  This trades
compilation time fo' mo' complete debug shiznit. I aint talkin' bout chicken n' gravy biatch.  If dis is set too
low, value expressions dat is available n' could be represented in
debug shiznit may end up not bein used; settin dis higher may
enable tha compila ta find mo' complex debug expressions yo, but compile
time n' memory use may grow.  Da default is 12.
.IP "\fBmin-nondebug-insn-uid\fR" 4
.IX Item "min-nondebug-insn-uid"
Use uidz startin at dis parameta fo' nondebug insns.  Da range below
the parameta is reserved exclusively fo' debug insns pimped by
\&\fB\-fvar\-tracking\-assignments\fR yo, but debug insns may get
(non-overlapping) uidz above it if tha reserved range is exhausted.
.IP "\fBipa-sra-ptr-growth-factor\fR" 4
.IX Item "ipa-sra-ptr-growth-factor"
IPA-SRA replaces a pointa ta a aggregate wit one or mo' new
parametas only when they cumulatizzle size is less or equal to
\&\fBipa-sra-ptr-growth-factor\fR times tha size of tha original
pointa parameter.
.IP "\fBtm-max-aggregate-size\fR" 4
.IX Item "tm-max-aggregate-size"
When makin copiez of thread-local variablez up in a transaction, this
parameta specifies tha size up in bytes afta which variablez are
saved wit tha loggin functions as opposed ta save/restore code
sequence pairs.  This option only applies when using
\&\fB\-fgnu\-tm\fR.
.IP "\fBgraphite-max-nb-scop-params\fR" 4
.IX Item "graphite-max-nb-scop-params"
To avoid exponential effects up in tha Graphite loop transforms, the
number of parametas up in a Static Control Part (SCoP) is bounded. Y'all KNOW dat shit, muthafucka!  The
default value is 10 parameters.  A variable whose value is unknown at
compilation time n' defined outside a SCoP be a parameta of tha SCoP.
.IP "\fBgraphite-max-bbs-per-function\fR" 4
.IX Item "graphite-max-bbs-per-function"
To avoid exponential effects up in tha detection of SCoPs, tha size of
the functions analyzed by Graphite is bounded. Y'all KNOW dat shit, muthafucka!  Da default value is
100 basic blocks.
.IP "\fBloop-block-tile-size\fR" 4
.IX Item "loop-block-tile-size"
Loop blockin or strip minin transforms, enabled with
\&\fB\-floop\-block\fR or \fB\-floop\-strip\-mine\fR, strip mine each
loop up in tha loop nest by a given number of iterations.  Da strip
length can be chizzled rockin tha \fBloop-block-tile-size\fR
parameter n' shit.  Da default value is 51 iterations.
.IP "\fBipa-cp-value-list-size\fR" 4
.IX Item "ipa-cp-value-list-size"
IPA-CP attempts ta track all possible joints n' types passed ta a gangbangin' function's
parameta up in order ta propagate dem n' big-ass up devirtualization.
\&\fBipa-cp-value-list-size\fR is tha maximum number of joints n' types it
stores per one formal parameta of a gangbangin' function.
.IP "\fBlto-partitions\fR" 4
.IX Item "lto-partitions"
Specify desired number of partitions produced durin \s-1WHOPR\s0 compilation.
Da number of partitions should exceed tha number of CPUs used fo' compilation.
Da default value is 32.
.IP "\fBlto-minpartition\fR" 4
.IX Item "lto-minpartition"
Size of minimal partizzle fo' \s-1WHOPR \s0(in estimated instructions).
This prevents expensez of splittin straight-up lil' small-ass programs tha fuck into too many
partitions.
.IP "\fBcxx-max-namespaces-for-diagnostic-help\fR" 4
.IX Item "cxx-max-namespaces-for-diagnostic-help"
Da maximum number of namespaces ta consult fo' suggestions when \*(C+
name lookup fails fo' a identifier n' shit.  Da default is 1000.
.IP "\fBsink-frequency-threshold\fR" 4
.IX Item "sink-frequency-threshold"
Da maximum relatizzle execution frequency (in cements) of tha target block
relatizzle ta a statementz original gangsta block ta allow statement sinkin of a
statement.  Larger numbers result up in mo' aggressive statement sinking.
Da default value is 75.  A lil' small-ass positizzle adjustment be applied for
statements wit memory operandz as dem is even mo' profitable so sink.
.IP "\fBmax-stores-to-sink\fR" 4
.IX Item "max-stores-to-sink"
Da maximum number of conditionizzle stores paires dat can be sunk.  Set ta 0
if either vectorization (\fB\-ftree\-vectorize\fR) or if-conversion
(\fB\-ftree\-loop\-if\-convert\fR) is disabled. Y'all KNOW dat shit, muthafucka!  Da default is 2.
.IP "\fBallow-load-data-races\fR" 4
.IX Item "allow-load-data-races"
Allow optimizers ta introduce freshly smoked up data races on loads.
Set ta 1 ta allow, otherwise ta 0.  This option is enabled by default
unless implicitly set by tha \fB\-fmemory\-model=\fR option.
.IP "\fBallow-store-data-races\fR" 4
.IX Item "allow-store-data-races"
Allow optimizers ta introduce freshly smoked up data races on stores.
Set ta 1 ta allow, otherwise ta 0.  This option is enabled by default
unless implicitly set by tha \fB\-fmemory\-model=\fR option.
.IP "\fBallow-packed-load-data-races\fR" 4
.IX Item "allow-packed-load-data-races"
Allow optimizers ta introduce freshly smoked up data races on packed data loads.
Set ta 1 ta allow, otherwise ta 0.  This option is enabled by default
unless implicitly set by tha \fB\-fmemory\-model=\fR option.
.IP "\fBallow-packed-store-data-races\fR" 4
.IX Item "allow-packed-store-data-races"
Allow optimizers ta introduce freshly smoked up data races on packed data stores.
Set ta 1 ta allow, otherwise ta 0.  This option is enabled by default
unless implicitly set by tha \fB\-fmemory\-model=\fR option.
.IP "\fBcase-values-threshold\fR" 4
.IX Item "case-values-threshold"
Da smallest number of different joints fo' which it is dopest ta use a
jump-table instead of a tree of conditionizzle branches.  If tha value is
0, use tha default fo' tha machine.  Da default is 0.
.IP "\fBtree-reassoc-width\fR" 4
.IX Item "tree-reassoc-width"
Set tha maximum number of instructions executed up in parallel in
reassociated tree. This parameta overrides target dependent
heuristics used by default if has non zero value.
.IP "\fBsched-pressure-algorithm\fR" 4
.IX Item "sched-pressure-algorithm"
Choose between tha two available implementations of
\&\fB\-fsched\-pressure\fR.  Algorithm 1 is tha original gangsta implementation
and is tha mo' likely ta prevent instructions from bein reordered.
Algorithm 2 was designed ta be a cold-ass lil compromise between tha relatively
conservatizzle approach taken by algorithm 1 n' tha rather aggressive
approach taken by tha default schedula n' shit.  It relies mo' heavily on
havin a regular regista file n' accurate regista heat classes.
See \fIhaifa\-sched.c\fR up in tha \s-1GCC\s0 sources fo' mo' details.
.Sp
Da default chizzle dependz on tha target.
.IP "\fBmax-slsr-cand-scan\fR" 4
.IX Item "max-slsr-cand-scan"
Set tha maximum number of existin muthafuckas dat is ghon be considered when
seekin a funky-ass basis fo' a freshly smoked up straight-line strength reduction muthafucka.
.RE
.RS 4
.RE
.SS "Options Controllin tha Preprocessor"
.IX Subsection "Options Controllin tha Preprocessor"
These options control tha C preprocessor, which is run on each C source
file before actual compilation.
.PP
If you use tha \fB\-E\fR option, not a god damn thang is done except preprocessing.
Some of these options make sense only together wit \fB\-E\fR cuz
they cause tha preprocessor output ta be unsuitable fo' actual
compilation.
.IP "\fB\-Wp,\fR\fIoption\fR" 4
.IX Item "-Wp,option"
Yo ass can use \fB\-Wp,\fR\fIoption\fR ta bypass tha compila driver
and pass \fIoption\fR directly all up in ta tha preprocessor. Shiiit, dis aint no joke.  If
\&\fIoption\fR gotz nuff commas, it is split tha fuck into multiple options at the
commas.  But fuck dat shiznit yo, tha word on tha street is dat nuff options is modified, translated or interpreted
by tha compila driver before bein passed ta tha preprocessor, and
\&\fB\-Wp\fR forcibly bypasses dis phase.  Da preprocessorz direct
interface is undocumented n' subject ta chizzle, so whenever possible
you should avoid rockin \fB\-Wp\fR n' let tha driver handle the
options instead.
.IP "\fB\-Xpreprocessor\fR \fIoption\fR" 4
.IX Item "-Xpreprocessor option"
Pass \fIoption\fR as a option ta tha preprocessor. Shiiit, dis aint no joke.  Yo ass can use dis to
supply system-specific preprocessor options dat \s-1GCC\s0 do not 
recognize.
.Sp
If you wanna pass a option dat takes a argument, you must use
\&\fB\-Xpreprocessor\fR twice, once fo' tha option n' once fo' tha argument.
.IP "\fB\-no\-integrated\-cpp\fR" 4
.IX Item "-no-integrated-cpp"
Perform preprocessin as a separate pass before compilation.
By default, \s-1GCC\s0 performs preprocessin as a integrated part of
input tokenization n' parsing.
If dis option is provided, tha appropriate language front end
(\fBcc1\fR, \fBcc1plus\fR, or \fBcc1obj\fR fo' C, \*(C+,
and Objective-C, respectively) is instead invoked twice,
once fo' preprocessin only n' once fo' actual compilation
of tha preprocessed input.
This option may be useful up in conjunction wit tha \fB\-B\fR or
\&\fB\-wrapper\fR options ta specify a alternate preprocessor or
perform additionizzle processin of tha program source between
normal preprocessin n' compilation.
.IP "\fB\-D\fR \fIname\fR" 4
.IX Item "-D name"
Predefine \fIname\fR as a macro, wit definizzle \f(CW1\fR.
.IP "\fB\-D\fR \fIname\fR\fB=\fR\fIdefinition\fR" 4
.IX Item "-D name=definition"
Da contentz of \fIdefinition\fR is tokenized n' processed as if
they rocked up durin translation phase three up in a \fB#define\fR
directive.  In particular, tha definizzle is ghon be truncated by
embedded newline characters.
.Sp
If yo ass is invokin tha preprocessor from a gangbangin' finger-lickin' dirty-ass shell or shell-like
program you may need ta use tha shellz quotin syntax ta protect
charactas like fuckin spaces dat gotz a meanin up in tha shell syntax.
.Sp
If you wish ta define a gangbangin' function-like macro on tha command line, write
its argument list wit surroundin parentheses before tha equals sign
(if any).  Parentheses is meaningful ta most shells, so yo big-ass booty is ghon need
to quote tha option. I aint talkin' bout chicken n' gravy biatch.  With \fBsh\fR n' \fBcsh\fR,
\&\fB\-D'\fR\fIname\fR\fB(\fR\fIargs...\fR\fB)=\fR\fIdefinition\fR\fB'\fR works.
.Sp
\&\fB\-D\fR n' \fB\-U\fR options is processed up in tha order they
are given on tha command line.  All \fB\-imacros\fR \fIfile\fR and
\&\fB\-include\fR \fIfile\fR options is processed afta all
\&\fB\-D\fR n' \fB\-U\fR options.
.IP "\fB\-U\fR \fIname\fR" 4
.IX Item "-U name"
Cancel any previous definizzle of \fIname\fR, either built up in or
provided wit a \fB\-D\fR option.
.IP "\fB\-undef\fR" 4
.IX Item "-undef"
Do not predefine any system-specific or GCC-specific macros.  The
standard predefined macros remain defined.
.IP "\fB\-I\fR \fIdir\fR" 4
.IX Item "-I dir"
Add tha directory \fIdir\fR ta tha list of directories ta be searched
for header files.
Directories named by \fB\-I\fR is searched before tha standard
system include directories. Put ya muthafuckin choppers up if ya feel dis!  If tha directory \fIdir\fR be a standard
system include directory, tha option is ignored ta ensure dat the
default search order fo' system directories n' tha special treatment
of system headaz is not defeated
\&.
If \fIdir\fR begins wit \f(CW\*(C`=\*(C'\fR, then tha \f(CW\*(C`=\*(C'\fR is ghon be replaced
by tha sysroot prefix; peep \fB\-\-sysroot\fR n' \fB\-isysroot\fR.
.IP "\fB\-o\fR \fIfile\fR" 4
.IX Item "-o file"
Write output ta \fIfile\fR.  This is tha same ol' dirty as specifyin \fIfile\fR
as tha second non-option argument ta \fBcpp\fR.  \fBgcc\fR has a
different interpretation of a second non-option argument, so you must
use \fB\-o\fR ta specify tha output file.
.IP "\fB\-Wall\fR" 4
.IX Item "-Wall"
Turns on all optionizzle warnings which is desirable fo' aiiight code.
At present dis is \fB\-Wcomment\fR, \fB\-Wtrigraphs\fR,
\&\fB\-Wmultichar\fR n' a warnin bout integer promotion causin a
change of sign up in \f(CW\*(C`#if\*(C'\fR expressions.  Note dat nuff of the
preprocessorz warnings is on by default n' have no options to
control em.
.IP "\fB\-Wcomment\fR" 4
.IX Item "-Wcomment"
.PD 0
.IP "\fB\-Wcomments\fR" 4
.IX Item "-Wcomments"
.PD
Warn whenever a cold-ass lil comment-start sequence \fB/*\fR appears up in a \fB/*\fR
comment, or whenever a funky-ass backslash-newline appears up in a \fB//\fR comment.
(Both forms have tha same effect.)
.IP "\fB\-Wtrigraphs\fR" 4
.IX Item "-Wtrigraphs"
Most trigraphs up in comments cannot affect tha meanin of tha program.
But fuck dat shiznit yo, tha word on tha street is dat a trigraph dat would form a escaped newline (\fB??/\fR at
the end of a line) can, by changin where tha comment begins or ends.
Therefore, only trigraphs dat would form escaped newlines produce
warnings inside a cold-ass lil comment.
.Sp
This option is implied by \fB\-Wall\fR.  If \fB\-Wall\fR is not
given, dis option is still enabled unless trigraphs is enabled. Y'all KNOW dat shit, muthafucka!  To
get trigraph conversion without warnings yo, but git tha other
\&\fB\-Wall\fR warnings, use \fB\-trigraphs \-Wall \-Wno\-trigraphs\fR.
.IP "\fB\-Wtraditional\fR" 4
.IX Item "-Wtraditional"
Warn bout certain constructs dat behave differently up in traditionizzle and
\&\s-1ISO C. \s0 Also warn bout \s-1ISO C\s0 constructs dat have no traditionizzle C
equivalent, n' problematic constructs which should be avoided.
.IP "\fB\-Wundef\fR" 4
.IX Item "-Wundef"
Warn whenever a identifier which aint a macro is encountered up in an
\&\fB#if\fR directive, outside of \fBdefined\fR.  Such identifiers are
replaced wit zero.
.IP "\fB\-Wunused\-macros\fR" 4
.IX Item "-Wunused-macros"
Warn bout macros defined up in tha main file dat is unused. Y'all KNOW dat shit, muthafucka!  A macro
is \fIused\fR if it is expanded or tested fo' existence at least once.
Da preprocessor will also warn if tha macro has not been used at the
time it is redefined or undefined.
.Sp
Built-in macros, macros defined on tha command line, n' macros
defined up in include filez is not warned about.
.Sp
\&\fINote:\fR If a macro is straight-up used yo, but only used up in skipped
conditionizzle blocks, then \s-1CPP\s0 will report it as unused. Y'all KNOW dat shit, muthafucka!  To avoid the
warnin up in such a cold-ass lil case, you might improve tha scope of tha macro's
definizzle by, fo' example, movin it tha fuck into tha straight-up original gangsta skipped block.
Alternatively, you could provide a thugged-out dummy use wit suttin' like:
.Sp
.Vb 2
\&        #if defined the_macro_causing_the_warning
\&        #endif
.Ve
.IP "\fB\-Wendif\-labels\fR" 4
.IX Item "-Wendif-labels"
Warn whenever a \fB#else\fR or a \fB#endif\fR is followed by text.
This probably happens up in code of tha form
.Sp
.Vb 5
\&        #if FOO
\&        ...
\&        #else FOO
\&        ...
\&        #endif FOO
.Ve
.Sp
Da second n' third \f(CW\*(C`FOO\*(C'\fR should be up in comments yo, but often is not
in olda programs.  This warnin is on by default.
.IP "\fB\-Werror\fR" 4
.IX Item "-Werror"
Make all warnings tha fuck into hard errors.  Source code which triggers warnings
will be rejected.
.IP "\fB\-Wsystem\-headers\fR" 4
.IX Item "-Wsystem-headers"
Issue warnings fo' code up in system headers.  These is normally unhelpful
in findin bugs up in yo' own code, therefore suppressed. Y'all KNOW dat shit, muthafucka!  If yo ass is
responsible fo' tha system library, you may wanna peep em.
.IP "\fB\-w\fR" 4
.IX Item "-w"
Suppress all warnings, includin dem which \s-1GNU CPP\s0 thangs by default.
.IP "\fB\-pedantic\fR" 4
.IX Item "-pedantic"
Issue all tha mandatory diagnostics listed up in tha C standard. Y'all KNOW dat shit, muthafucka!  Some of
them is left up by default, since they trigger frequently on harmless
code.
.IP "\fB\-pedantic\-errors\fR" 4
.IX Item "-pedantic-errors"
Issue all tha mandatory diagnostics, n' make all mandatory diagnostics
into errors.  This includes mandatory diagnostics dat \s-1GCC\s0 issues
without \fB\-pedantic\fR but treats as warnings.
.IP "\fB\-M\fR" 4
.IX Item "-M"
Instead of outputtin tha result of preprocessing, output a rule
suitable fo' \fBmake\fR describin tha dependenciez of tha main
source file.  Da preprocessor outputs one \fBmake\fR rule containing
the object file name fo' dat source file, a cold-ass lil colon, n' tha namez of all
the included files, includin dem comin from \fB\-include\fR or
\&\fB\-imacros\fR command line options.
.Sp
Unless specified explicitly (with \fB\-MT\fR or \fB\-MQ\fR), the
object file name consistz of tha name of tha source file wit any
suffix replaced wit object file suffix n' wit any leadin directory
parts removed. Y'all KNOW dat shit, muthafucka!  If there be nuff included filez then tha rule is
split tha fuck into nuff muthafuckin lines rockin \fB\e\fR\-newline.  Da rule has no
commands.
.Sp
This option do not suppress tha preprocessorz debug output, such as
\&\fB\-dM\fR.  To avoid mixin such debug output wit tha dependency
rulez you should explicitly specify tha dependency output file with
\&\fB\-MF\fR, or use a environment variable like
\&\fB\s-1DEPENDENCIES_OUTPUT\s0\fR.  Debug output
will still be busted ta tha regular output stream as normal.
.Sp
Passin \fB\-M\fR ta tha driver implies \fB\-E\fR, n' suppresses
warnings wit a implicit \fB\-w\fR.
.IP "\fB\-MM\fR" 4
.IX Item "-MM"
Like \fB\-M\fR but do not mention header filez dat is found in
system header directories, nor header filez dat is included,
directly or indirectly, from such a header.
.Sp
This implies dat tha chizzle of angle brackets or double quotes up in an
\&\fB#include\fR directizzle do not up in itself determine whether that
header will step tha fuck up in \fB\-MM\fR dependency output.  This be a
slight chizzle up in semantics from \s-1GCC\s0 versions 3.0 n' earlier.
.IP "\fB\-MF\fR \fIfile\fR" 4
.IX Item "-MF file"
When used wit \fB\-M\fR or \fB\-MM\fR, specifies a
file ta write tha dependencies to.  If no \fB\-MF\fR switch is given
the preprocessor sendz tha rulez ta tha same place it would have sent
preprocessed output.
.Sp
When used wit tha driver options \fB\-MD\fR or \fB\-MMD\fR,
\&\fB\-MF\fR overrides tha default dependency output file.
.IP "\fB\-MG\fR" 4
.IX Item "-MG"
In conjunction wit a option like fuckin \fB\-M\fR requesting
dependency generation, \fB\-MG\fR assumes missin header filez are
generated filez n' addz dem ta tha dependency list without raising
an error. Shiiit, dis aint no joke.  Da dependency filename is taken directly from the
\&\f(CW\*(C`#include\*(C'\fR directizzle without prependin any path.  \fB\-MG\fR
also suppresses preprocessed output, as a missin header file renders
this useless.
.Sp
This feature is used up in automatic uppimpin of makefiles.
.IP "\fB\-MP\fR" 4
.IX Item "-MP"
This option instructs \s-1CPP\s0 ta add a phony target fo' each dependency
other than tha main file, causin each ta depend on nothing.  These
dummy rulez work round errors \fBmake\fR gives if you remove header
filez without uppimpin tha \fIMakefile\fR ta match.
.Sp
This is typical output:
.Sp
.Vb 1
\&        test.o: test.c test.h
\&        
\&        test.h:
.Ve
.IP "\fB\-MT\fR \fItarget\fR" 4
.IX Item "-MT target"
Change tha target of tha rule emitted by dependency generation. I aint talkin' bout chicken n' gravy biatch.  By
default \s-1CPP\s0 takes tha name of tha main input file, deletes any
directory components n' any file suffix like fuckin \fB.c\fR, and
appendz tha platformz usual object suffix.  Da result is tha target.
.Sp
An \fB\-MT\fR option will set tha target ta be exactly tha strang you
specify.  If you want multiple targets, you can specify dem as a single
argument ta \fB\-MT\fR, or use multiple \fB\-MT\fR options.
.Sp
For example, \fB\-MT\ '$(objpfx)foo.o'\fR might give
.Sp
.Vb 1
\&        $(objpfx)foo.o: foo.c
.Ve
.IP "\fB\-MQ\fR \fItarget\fR" 4
.IX Item "-MQ target"
Same as \fB\-MT\fR yo, but it quotes any charactas which is special to
Make.  \fB\-MQ\ '$(objpfx)foo.o'\fR gives
.Sp
.Vb 1
\&        $$(objpfx)foo.o: foo.c
.Ve
.Sp
Da default target be automatically quoted, as if it was given with
\&\fB\-MQ\fR.
.IP "\fB\-MD\fR" 4
.IX Item "-MD"
\&\fB\-MD\fR is equivalent ta \fB\-M \-MF\fR \fIfile\fR, except that
\&\fB\-E\fR aint implied. Y'all KNOW dat shit, muthafucka!  Da driver determines \fIfile\fR based on
whether a \fB\-o\fR option is given. I aint talkin' bout chicken n' gravy biatch.  If it is, tha driver uses its
argument but wit a suffix of \fI.d\fR, otherwise it takes tha name
of tha input file, removes any directory components n' suffix, and
applies a \fI.d\fR suffix.
.Sp
If \fB\-MD\fR is used up in conjunction wit \fB\-E\fR, any
\&\fB\-o\fR switch is understood ta specify tha dependency output file yo, but if used without \fB\-E\fR, each \fB\-o\fR
is understood ta specify a target object file.
.Sp
Since \fB\-E\fR aint implied, \fB\-MD\fR can be used ta generate
a dependency output file as a side-effect of tha compilation process.
.IP "\fB\-MMD\fR" 4
.IX Item "-MMD"
Like \fB\-MD\fR except mention only user header files, not system
header files.
.IP "\fB\-fpch\-deps\fR" 4
.IX Item "-fpch-deps"
When rockin precompiled headers, dis flag
will cause tha dependency-output flags ta also list tha filez from the
precompiled headerz dependencies. Put ya muthafuckin choppers up if ya feel dis!  If not specified only the
precompiled header would be listed n' not tha filez dat was used to
create it cuz dem filez is not consulted when a precompiled
header is used.
.IP "\fB\-fpch\-preprocess\fR" 4
.IX Item "-fpch-preprocess"
This option allows use of a precompiled header together wit \fB\-E\fR.  It bangs a special \f(CW\*(C`#pragma\*(C'\fR,
\&\f(CW\*(C`#pragma GCC pch_preprocess "\f(CIfilename\f(CW"\*(C'\fR up in tha output ta mark
the place where tha precompiled header was found, n' its \fIfilename\fR.
When \fB\-fpreprocessed\fR is up in use, \s-1GCC\s0 recognizes dis \f(CW\*(C`#pragma\*(C'\fR
and loadz tha \s-1PCH.\s0
.Sp
This option is off by default, cuz tha resultin preprocessed output
is only straight-up suitable as input ta \s-1GCC. \s0 It be switched on by
\&\fB\-save\-temps\fR.
.Sp
Yo ass should not write dis \f(CW\*(C`#pragma\*(C'\fR up in yo' own code yo, but it is
safe ta edit tha filename if tha \s-1PCH\s0 file be available up in a gangbangin' finger-lickin' different
location. I aint talkin' bout chicken n' gravy biatch.  Da filename may be absolute or it may be relatizzle ta \s-1GCC\s0's
current directory.
.IP "\fB\-x c\fR" 4
.IX Item "-x c"
.PD 0
.IP "\fB\-x c++\fR" 4
.IX Item "-x c++"
.IP "\fB\-x objective-c\fR" 4
.IX Item "-x objective-c"
.IP "\fB\-x assembler-with-cpp\fR" 4
.IX Item "-x assembler-with-cpp"
.PD
Specify tha source language: C, \*(C+, Objective-C, or assembly.  This has
nothang ta do wit standardz conformizzle or extensions; it merely
selects which base syntax ta expect.  If you give none of these options,
cpp will deduce tha language from tha extension of tha source file:
\&\fB.c\fR, \fB.cc\fR, \fB.m\fR, or \fB.S\fR.  Some other common
extensions fo' \*(C+ n' assembly is also recognized. Y'all KNOW dat shit, muthafucka!  If cpp do not
recognize tha extension, it will treat tha file as C; dis is da most thugged-out
generic mode.
.Sp
\&\fINote:\fR Previous versionz of cpp accepted a \fB\-lang\fR option
which selected both tha language n' tha standardz conformizzle level.
This option has been removed, cuz it conflicts wit tha \fB\-l\fR
option.
.IP "\fB\-std=\fR\fIstandard\fR" 4
.IX Item "-std=standard"
.PD 0
.IP "\fB\-ansi\fR" 4
.IX Item "-ansi"
.PD
Specify tha standard ta which tha code should conform.  Currently \s-1CPP\s0
knows bout C n' \*(C+ standards; others may be added up in tha future.
.Sp
\&\fIstandard\fR
may be one of:
.RS 4
.ie n .IP """c90""" 4
.el .IP "\f(CWc90\fR" 4
.IX Item "c90"
.PD 0
.ie n .IP """c89""" 4
.el .IP "\f(CWc89\fR" 4
.IX Item "c89"
.ie n .IP """iso9899:1990""" 4
.el .IP "\f(CWiso9899:1990\fR" 4
.IX Item "iso9899:1990"
.PD
Da \s-1ISO C\s0 standard from 1990.  \fBc90\fR is tha customary shorthand for
this version of tha standard.
.Sp
Da \fB\-ansi\fR option is equivalent ta \fB\-std=c90\fR.
.ie n .IP """iso9899:199409""" 4
.el .IP "\f(CWiso9899:199409\fR" 4
.IX Item "iso9899:199409"
Da 1990 C standard, as amended up in 1994.
.ie n .IP """iso9899:1999""" 4
.el .IP "\f(CWiso9899:1999\fR" 4
.IX Item "iso9899:1999"
.PD 0
.ie n .IP """c99""" 4
.el .IP "\f(CWc99\fR" 4
.IX Item "c99"
.ie n .IP """iso9899:199x""" 4
.el .IP "\f(CWiso9899:199x\fR" 4
.IX Item "iso9899:199x"
.ie n .IP """c9x""" 4
.el .IP "\f(CWc9x\fR" 4
.IX Item "c9x"
.PD
Da revised \s-1ISO C\s0 standard, published up in December 1999.  Before
publication, dis was known as C9X.
.ie n .IP """iso9899:2011""" 4
.el .IP "\f(CWiso9899:2011\fR" 4
.IX Item "iso9899:2011"
.PD 0
.ie n .IP """c11""" 4
.el .IP "\f(CWc11\fR" 4
.IX Item "c11"
.ie n .IP """c1x""" 4
.el .IP "\f(CWc1x\fR" 4
.IX Item "c1x"
.PD
Da revised \s-1ISO C\s0 standard, published up in December 2011.  Before
publication, dis was known as C1X.
.ie n .IP """gnu90""" 4
.el .IP "\f(CWgnu90\fR" 4
.IX Item "gnu90"
.PD 0
.ie n .IP """gnu89""" 4
.el .IP "\f(CWgnu89\fR" 4
.IX Item "gnu89"
.PD
Da 1990 C standard plus \s-1GNU\s0 extensions.  This is tha default.
.ie n .IP """gnu99""" 4
.el .IP "\f(CWgnu99\fR" 4
.IX Item "gnu99"
.PD 0
.ie n .IP """gnu9x""" 4
.el .IP "\f(CWgnu9x\fR" 4
.IX Item "gnu9x"
.PD
Da 1999 C standard plus \s-1GNU\s0 extensions.
.ie n .IP """gnu11""" 4
.el .IP "\f(CWgnu11\fR" 4
.IX Item "gnu11"
.PD 0
.ie n .IP """gnu1x""" 4
.el .IP "\f(CWgnu1x\fR" 4
.IX Item "gnu1x"
.PD
Da 2011 C standard plus \s-1GNU\s0 extensions.
.ie n .IP """c++98""" 4
.el .IP "\f(CWc++98\fR" 4
.IX Item "c++98"
Da 1998 \s-1ISO \*(C+\s0 standard plus amendments.
.ie n .IP """gnu++98""" 4
.el .IP "\f(CWgnu++98\fR" 4
.IX Item "gnu++98"
Da same as \fB\-std=c++98\fR plus \s-1GNU\s0 extensions.  This is the
default fo' \*(C+ code.
.RE
.RS 4
.RE
.IP "\fB\-I\-\fR" 4
.IX Item "-I-"
Split tha include path.  Any directories specified wit \fB\-I\fR
options before \fB\-I\-\fR is searched only fo' headaz axed with
\&\f(CW\*(C`#include\ "\f(CIfile\f(CW"\*(C'\fR; they is not searched for
\&\f(CW\*(C`#include\ <\f(CIfile\f(CW>\*(C'\fR.  If additionizzle directories are
specified wit \fB\-I\fR options afta tha \fB\-I\-\fR, them
directories is searched fo' all \fB#include\fR directives.
.Sp
In addition, \fB\-I\-\fR inhibits tha use of tha directory of tha current
file directory as tha straight-up original gangsta search directory fo' \f(CW\*(C`#include\ "\f(CIfile\f(CW"\*(C'\fR.
This option has been deprecated.
.IP "\fB\-nostdinc\fR" 4
.IX Item "-nostdinc"
Do not search tha standard system directories fo' header files.
Only tha directories you have specified wit \fB\-I\fR options
(and tha directory of tha current file, if appropriate) is searched.
.IP "\fB\-nostdinc++\fR" 4
.IX Item "-nostdinc++"
Do not search fo' header filez up in tha \*(C+\-specific standard directories,
but do still search tha other standard directories. Put ya muthafuckin choppers up if ya feel dis!  (This option is
used when buildin tha \*(C+ library.)
.IP "\fB\-include\fR \fIfile\fR" 4
.IX Item "-include file"
Process \fIfile\fR as if \f(CW\*(C`#include "file"\*(C'\fR rocked up as tha first
line of tha primary source file.  But fuck dat shiznit yo, tha word on tha street is dat tha straight-up original gangsta directory searched
for \fIfile\fR is tha preprocessorz hustlin directory \fIinstead of\fR
the directory containin tha main source file.  If not found there, it
is searched fo' up in tha remainder of tha \f(CW\*(C`#include "..."\*(C'\fR search
chain as normal.
.Sp
If multiple \fB\-include\fR options is given, tha filez is included
in tha order they step tha fuck up on tha command line.
.IP "\fB\-imacros\fR \fIfile\fR" 4
.IX Item "-imacros file"
Exactly like \fB\-include\fR, except dat any output produced by
scannin \fIfile\fR is thrown away.  Macros it defines remain defined.
This allows you ta acquire all tha macros from a header without also
processin its declarations.
.Sp
All filez specified by \fB\-imacros\fR is processed before all files
specified by \fB\-include\fR.
.IP "\fB\-idirafter\fR \fIdir\fR" 4
.IX Item "-idirafta dir"
Search \fIdir\fR fo' header filez yo, but do it \fIafter\fR all
directories specified wit \fB\-I\fR n' tha standard system directories
have been exhausted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  \fIdir\fR is treated as a system include directory.
If \fIdir\fR begins wit \f(CW\*(C`=\*(C'\fR, then tha \f(CW\*(C`=\*(C'\fR is ghon be replaced
by tha sysroot prefix; peep \fB\-\-sysroot\fR n' \fB\-isysroot\fR.
.IP "\fB\-iprefix\fR \fIprefix\fR" 4
.IX Item "-iprefix prefix"
Specify \fIprefix\fR as tha prefix fo' subsequent \fB\-iwithprefix\fR
options.  If tha prefix represents a gangbangin' finger-lickin' directory, you should include the
final \fB/\fR.
.IP "\fB\-iwithprefix\fR \fIdir\fR" 4
.IX Item "-iwithprefix dir"
.PD 0
.IP "\fB\-iwithprefixbefore\fR \fIdir\fR" 4
.IX Item "-iwithprefixbefore dir"
.PD
Append \fIdir\fR ta tha prefix specified previously with
\&\fB\-iprefix\fR, n' add tha resultin directory ta tha include search
path.  \fB\-iwithprefixbefore\fR puts it up in tha same place \fB\-I\fR
would; \fB\-iwithprefix\fR puts it where \fB\-idirafter\fR would.
.IP "\fB\-isysroot\fR \fIdir\fR" 4
.IX Item "-isysroot dir"
This option is like tha \fB\-\-sysroot\fR option yo, but applies only to
header filez (except fo' Darwin targets, where it applies ta both header
filez n' libraries).  See tha \fB\-\-sysroot\fR option fo' more
information.
.IP "\fB\-imultilib\fR \fIdir\fR" 4
.IX Item "-imultilib dir"
Use \fIdir\fR as a subdirectory of tha directory containing
target-specific \*(C+ headers.
.IP "\fB\-isystem\fR \fIdir\fR" 4
.IX Item "-isystem dir"
Search \fIdir\fR fo' header files, afta all directories specified by
\&\fB\-I\fR but before tha standard system directories. Put ya muthafuckin choppers up if ya feel dis!  Mark it
as a system directory, so dat it gets tha same ol' dirty special treatment as
is applied ta tha standard system directories.
If \fIdir\fR begins wit \f(CW\*(C`=\*(C'\fR, then tha \f(CW\*(C`=\*(C'\fR is ghon be replaced
by tha sysroot prefix; peep \fB\-\-sysroot\fR n' \fB\-isysroot\fR.
.IP "\fB\-iquote\fR \fIdir\fR" 4
.IX Item "-iquote dir"
Search \fIdir\fR only fo' header filez axed with
\&\f(CW\*(C`#include\ "\f(CIfile\f(CW"\*(C'\fR; they is not searched for
\&\f(CW\*(C`#include\ <\f(CIfile\f(CW>\*(C'\fR, before all directories specified by
\&\fB\-I\fR n' before tha standard system directories.
If \fIdir\fR begins wit \f(CW\*(C`=\*(C'\fR, then tha \f(CW\*(C`=\*(C'\fR is ghon be replaced
by tha sysroot prefix; peep \fB\-\-sysroot\fR n' \fB\-isysroot\fR.
.IP "\fB\-fdirectives\-only\fR" 4
.IX Item "-fdirectives-only"
When preprocessing, handle directives yo, but do not expand macros.
.Sp
Da optionz behavior dependz on tha \fB\-E\fR n' \fB\-fpreprocessed\fR
options.
.Sp
With \fB\-E\fR, preprocessin is limited ta tha handlin of directives
like fuckin \f(CW\*(C`#define\*(C'\fR, \f(CW\*(C`#ifdef\*(C'\fR, n' \f(CW\*(C`#error\*(C'\fR.  Other
preprocessor operations, like fuckin macro expansion n' trigraph
conversion is not performed. Y'all KNOW dat shit, muthafucka!  In addition, tha \fB\-dD\fR option is
implicitly enabled.
.Sp
With \fB\-fpreprocessed\fR, predefinizzle of command line n' most
builtin macros is disabled. Y'all KNOW dat shit, muthafucka!  Macros like fuckin \f(CW\*(C`_\|_LINE_\|_\*(C'\fR, which are
contextually dependent, is handled normally.  This enablez compilation of
filez previously preprocessed wit \f(CW\*(C`\-E \-fdirectives\-only\*(C'\fR.
.Sp
With both \fB\-E\fR n' \fB\-fpreprocessed\fR, tha rulez for
\&\fB\-fpreprocessed\fR take precedence.  This enablez full preprocessin of
filez previously preprocessed wit \f(CW\*(C`\-E \-fdirectives\-only\*(C'\fR.
.IP "\fB\-fdollars\-in\-identifiers\fR" 4
.IX Item "-fdollars-in-identifiers"
Accept \fB$\fR up in identifiers.
.IP "\fB\-fextended\-identifiers\fR" 4
.IX Item "-fextended-identifiers"
Accept universal characta names up in identifiers.  This option is
experimental; up in a gangbangin' future version of \s-1GCC,\s0 it is ghon be enabled by
default fo' C99 n' \*(C+.
.IP "\fB\-fno\-canonical\-system\-headers\fR" 4
.IX Item "-fno-canonical-system-headers"
When preprocessing, do not shorten system header paths wit canonicalization.
.IP "\fB\-fpreprocessed\fR" 4
.IX Item "-fpreprocessed"
Indicate ta tha preprocessor dat tha input file has already been
preprocessed. Y'all KNOW dat shit, muthafucka!  This suppresses thangs like macro expansion, trigraph
conversion, escaped newline splicing, n' processin of most directives.
Da preprocessor still recognizes n' removes comments, so dat you can
pass a gangbangin' file preprocessed wit \fB\-C\fR ta tha compila without
problems.  In dis mode tha integrated preprocessor is lil mo' than
a tokenizer fo' tha front ends.
.Sp
\&\fB\-fpreprocessed\fR is implicit if tha input file has one of the
extensions \fB.i\fR, \fB.ii\fR or \fB.mi\fR.  These is the
extensions dat \s-1GCC\s0 uses fo' preprocessed filez pimped by
\&\fB\-save\-temps\fR.
.IP "\fB\-ftabstop=\fR\fIwidth\fR" 4
.IX Item "-ftabstop=width"
Set tha distizzle between tab stops.  This helps tha preprocessor report
correct column numbers up in warnings or errors, even if tabs step tha fuck up on the
line.  If tha value is less than 1 or pimped outa than 100, tha option is
ignored. Y'all KNOW dat shit, muthafucka!  Da default is 8.
.IP "\fB\-fdebug\-cpp\fR" 4
.IX Item "-fdebug-cpp"
This option is only useful fo' debuggin \s-1GCC. \s0 When used with
\&\fB\-E\fR, dumps debuggin shiznit bout location maps.  Every
token up in tha output is preceded by tha dump of tha map its location
belongs to.  Da dump of tha map holdin tha location of a token would
be:
.Sp
.Vb 1
\&        {"P":F</file/path>;"F":F</includer/path>;"L":<line_num>;"C":<col_num>;"S":<system_header_p>;"M":<map_address>;"E":<macro_expansion_p>,"loc":<location>}
.Ve
.Sp
When used without \fB\-E\fR, dis option has no effect.
.IP "\fB\-ftrack\-macro\-expansion\fR[\fB=\fR\fIlevel\fR]" 4
.IX Item "-ftrack-macro-expansion[=level]"
Track locationz of tokens across macro expansions. This allows the
compila ta emit diagnostic bout tha current macro expansion stack
when a cold-ass lil compilation error occurs up in a macro expansion. I aint talkin' bout chicken n' gravy biatch. Usin this
option make tha preprocessor n' tha compila consume more
memory. Da \fIlevel\fR parameta can be used ta chizzle tha level of
precision of token location trackin thus decreasin tha memory
consumption if necessary. Value \fB0\fR of \fIlevel\fR de-activates
this option just as if no \fB\-ftrack\-macro\-expansion\fR was present
on tha command line. Value \fB1\fR tracks tokens locations up in a
degraded mode fo' tha sake of minimal memory overhead. Y'all KNOW dat shit, muthafucka! In dis mode
all tokens resultin from tha expansion of a argument of a
function-like macro have tha same location. I aint talkin' bout chicken n' gravy biatch. Value \fB2\fR tracks
tokens locations straight-up. This value is da most thugged-out memory hungry.
When dis option is given no argument, tha default parameta value is
\&\fB2\fR.
.Sp
Note dat \-ftrack\-macro\-expansion=2 be activated by default.
.IP "\fB\-fexec\-charset=\fR\fIcharset\fR" 4
.IX Item "-fexec-charset=charset"
Set tha execution characta set, used fo' strang n' character
constants, n' you can put dat on yo' toast.  Da default is \s-1UTF\-8.  \s0\fIcharset\fR can be any encoding
supported by tha systemz \f(CW\*(C`iconv\*(C'\fR library routine.
.IP "\fB\-fwide\-exec\-charset=\fR\fIcharset\fR" 4
.IX Item "-fwide-exec-charset=charset"
Set tha wide execution characta set, used fo' wide strang and
characta constants, n' you can put dat on yo' toast.  Da default is \s-1UTF\-32\s0 or \s-1UTF\-16,\s0 whichever
correspondz ta tha width of \f(CW\*(C`wchar_t\*(C'\fR.  As with
\&\fB\-fexec\-charset\fR, \fIcharset\fR can be any encodin supported
by tha systemz \f(CW\*(C`iconv\*(C'\fR library routine; however, yo big-ass booty is ghon have
problems wit encodings dat do not fit exactly up in \f(CW\*(C`wchar_t\*(C'\fR.
.IP "\fB\-finput\-charset=\fR\fIcharset\fR" 4
.IX Item "-finput-charset=charset"
Set tha input characta set, used fo' translation from tha character
set of tha input file ta tha source characta set used by \s-1GCC. \s0 If the
locale do not specify, or \s-1GCC\s0 cannot git dis shiznit from the
locale, tha default is \s-1UTF\-8. \s0 This can be overridden by either tha locale
or dis command line option. I aint talkin' bout chicken n' gravy biatch.  Currently tha command line option takes
precedence if there be a a cold-ass lil conflict.  \fIcharset\fR can be any encoding
supported by tha systemz \f(CW\*(C`iconv\*(C'\fR library routine.
.IP "\fB\-fworking\-directory\fR" 4
.IX Item "-fworking-directory"
Enable generation of linemarkers up in tha preprocessor output dat will
let tha compila know tha current hustlin directory all up in tha time of
preprocessing.  When dis option is enabled, tha preprocessor will
emit, afta tha initial linemarker, a second linemarker wit the
current hustlin directory followed by two slashes.  \s-1GCC\s0 will use this
directory, when itz present up in tha preprocessed input, as the
directory emitted as tha current hustlin directory up in some debugging
information formats, n' you can put dat on yo' toast.  This option is implicitly enabled if debugging
information is enabled yo, but dis can be inhibited wit tha negated
form \fB\-fno\-working\-directory\fR.  If tha \fB\-P\fR flag is
present up in tha command line, dis option has no effect, since no
\&\f(CW\*(C`#line\*(C'\fR directives is emitted whatsoever.
.IP "\fB\-fno\-show\-column\fR" 4
.IX Item "-fno-show-column"
Do not print column numbers up in diagnostics.  This may be necessary if
diagnostics is bein scanned by a program dat do not KNOW the
column numbers, like fuckin \fBdejagnu\fR.
.IP "\fB\-A\fR \fIpredicate\fR\fB=\fR\fIanswer\fR" 4
.IX Item "-A predicate=answer"
Make a assertion wit tha predicate \fIpredicate\fR n' answer
\&\fIanswer\fR.  This form is preferred ta tha olda form \fB\-A\fR
\&\fIpredicate\fR\fB(\fR\fIanswer\fR\fB)\fR, which is still supported, cuz
it do not use shell special characters.
.IP "\fB\-A \-\fR\fIpredicate\fR\fB=\fR\fIanswer\fR" 4
.IX Item "-A -predicate=answer"
Cancel a assertion wit tha predicate \fIpredicate\fR n' answer
\&\fIanswer\fR.
.IP "\fB\-dCHARS\fR" 4
.IX Item "-dCHARS"
\&\fI\s-1CHARS\s0\fR be a sequence of one or mo' of tha followin characters,
and must not be preceded by a space.  Other charactas is interpreted
by tha compila proper, or reserved fo' future versionz of \s-1GCC,\s0 n' so
are silently ignored. Y'all KNOW dat shit, muthafucka!  If you specify charactas whose behavior
conflicts, tha result is undefined.
.RS 4
.IP "\fBM\fR" 4
.IX Item "M"
Instead of tha aiiight output, generate a list of \fB#define\fR
directives fo' all tha macros defined durin tha execution of the
preprocessor, includin predefined macros.  This gives you a way of
findin up what tha fuck is predefined up in yo' version of tha preprocessor.
Assumin you have no file \fIfoo.h\fR, tha command
.Sp
.Vb 1
\&        bust a nut on foo.h; cpp \-dM foo.h
.Ve
.Sp
will show all tha predefined macros.
.Sp
If you use \fB\-dM\fR without tha \fB\-E\fR option, \fB\-dM\fR is
interpreted as a synonym fo' \fB\-fdump\-rtl\-mach\fR.
.IP "\fBD\fR" 4
.IX Item "D"
Like \fBM\fR except up in two respects: it do \fInot\fR include the
predefined macros, n' it outputs \fIboth\fR tha \fB#define\fR
directives n' tha result of preprocessing.  Both kindz of output go to
the standard output file.
.IP "\fBN\fR" 4
.IX Item "N"
Like \fBD\fR yo, but emit only tha macro names, not they expansions.
.IP "\fBI\fR" 4
.IX Item "I"
Output \fB#include\fR directives up in addizzle ta tha result of
preprocessing.
.IP "\fBU\fR" 4
.IX Item "U"
Like \fBD\fR except dat only macros dat is expanded, or whose
definednizz is tested up in preprocessor directives, is output; the
output is delayed until tha use or test of tha macro; and
\&\fB#undef\fR directives is also output fo' macros tested but
undefined all up in tha time.
.RE
.RS 4
.RE
.IP "\fB\-P\fR" 4
.IX Item "-P"
Inhibit generation of linemarkers up in tha output from tha preprocessor.
This might be useful when hustlin tha preprocessor on suttin' dat is
not C code, n' is ghon be busted ta a program which might be trippin by the
linemarkers.
.IP "\fB\-C\fR" 4
.IX Item "-C"
Do not discard comments, n' you can put dat on yo' toast.  All comments is passed all up in ta tha output
file, except fo' comments up in processed directives, which is deleted
along wit tha directive.
.Sp
Yo ass should be prepared fo' side effects when rockin \fB\-C\fR; it
causes tha preprocessor ta treat comments as tokens up in they own right.
For example, comments appearin all up in tha start of what tha fuck would be a
directizzle line have tha effect of turnin dat line tha fuck into a ordinary
source line, since tha straight-up original gangsta token on tha line is no longer a \fB#\fR.
.IP "\fB\-CC\fR" 4
.IX Item "-CC"
Do not discard comments, includin durin macro expansion. I aint talkin' bout chicken n' gravy biatch.  This is
like \fB\-C\fR, except dat comments contained within macros are
also passed all up in ta tha output file where tha macro is expanded.
.Sp
In addizzle ta tha side-effectz of tha \fB\-C\fR option, the
\&\fB\-CC\fR option causes all \*(C+\-style comments inside a macro
to be converted ta C\-style comments, n' you can put dat on yo' toast.  This is ta prevent lata use
of dat macro from inadvertently commentin up tha remainder of
the source line.
.Sp
Da \fB\-CC\fR option is generally used ta support lint comments.
.IP "\fB\-traditional\-cpp\fR" 4
.IX Item "-traditional-cpp"
Try ta imitate tha behavior of old-fashioned C preprocessors, as
opposed ta \s-1ISO C\s0 preprocessors.
.IP "\fB\-trigraphs\fR" 4
.IX Item "-trigraphs"
Process trigraph sequences.
These is three-characta sequences, all startin wit \fB??\fR, that
are defined by \s-1ISO C\s0 ta stand fo' single characters.  For example,
\&\fB??/\fR standz fo' \fB\e\fR, so \fB'??/n'\fR be a cold-ass lil character
constant fo' a newline.  By default, \s-1GCC\s0 ignores trigraphs yo, but in
standard-conformin modes it converts em.  See tha \fB\-std\fR and
\&\fB\-ansi\fR options.
.Sp
Da nine trigraphs n' they replacements are
.Sp
.Vb 2
\&        Trigraph:       ??(  ??)  ??<  ??>  ??=  ??/  ??\*(Aq  ??!  ??\-
\&        Replacement:      [    ]    {    }    #    \e    ^    |    ~
.Ve
.IP "\fB\-remap\fR" 4
.IX Item "-remap"
Enable special code ta work round file systems which only permit hella
short file names, like fuckin MS-DOS.
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
.PD 0
.IP "\fB\-\-target\-help\fR" 4
.IX Item "--target-help"
.PD
Print text describin all tha command line options instead of
preprocessin anything.
.IP "\fB\-v\fR" 4
.IX Item "-v"
Verbose mode.  Print up \s-1GNU CPP\s0z version number all up in tha beginnin of
execution, n' report tha final form of tha include path.
.IP "\fB\-H\fR" 4
.IX Item "-H"
Print tha name of each header file used, up in addizzle ta other normal
activities. Put ya muthafuckin choppers up if ya feel dis!  Each name is indented ta show how tha fuck deep up in the
\&\fB#include\fR stack it is.  Precompiled header filez is also
printed, even if they is found ta be invalid; a invalid precompiled
header file is printed wit \fB...x\fR n' a valid one wit \fB...!\fR .
.IP "\fB\-version\fR" 4
.IX Item "-version"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
Print up \s-1GNU CPP\s0z version number n' shit.  With one dash, proceed to
preprocess as normal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  With two dashes, exit immediately.
.SS "Passin Options ta tha Assembler"
.IX Subsection "Passin Options ta tha Assembler"
Yo ass can pass options ta tha assembler.
.IP "\fB\-Wa,\fR\fIoption\fR" 4
.IX Item "-Wa,option"
Pass \fIoption\fR as a option ta tha assembla n' shit.  If \fIoption\fR
gotz nuff commas, it is split tha fuck into multiple options all up in tha commas.
.IP "\fB\-Xassembler\fR \fIoption\fR" 4
.IX Item "-Xassembla option"
Pass \fIoption\fR as a option ta tha assembla n' shit.  Yo ass can use dis to
supply system-specific assembla options dat \s-1GCC\s0 do not
recognize.
.Sp
If you wanna pass a option dat takes a argument, you must use
\&\fB\-Xassembler\fR twice, once fo' tha option n' once fo' tha argument.
.SS "Options fo' Linking"
.IX Subsection "Options fo' Linking"
These options come tha fuck into play when tha compila links object filez into
an executable output file.  They is meaningless if tha compila is
not bustin a link step.
.IP "\fIobject-file-name\fR" 4
.IX Item "object-file-name"
A file name dat do not end up in a special recognized suffix is
considered ta name a object file or library.  (Object filez are
distinguished from libraries by tha linker accordin ta tha file
contents.)  If linkin is done, these object filez is used as input
to tha linker.
.IP "\fB\-c\fR" 4
.IX Item "-c"
.PD 0
.IP "\fB\-S\fR" 4
.IX Item "-S"
.IP "\fB\-E\fR" 4
.IX Item "-E"
.PD
If any of these options is used, then tha linker aint run, and
object file names should not be used as arguments.
.IP "\fB\-l\fR\fIlibrary\fR" 4
.IX Item "-llibrary"
.PD 0
.IP "\fB\-l\fR \fIlibrary\fR" 4
.IX Item "-l library"
.PD
Search tha library named \fIlibrary\fR when linking.  (Da second
alternatizzle wit tha library as a separate argument is only for
\&\s-1POSIX\s0 compliizzle n' aint recommended.)
.Sp
It cook up a gangbangin' finger-lickin' difference where up in tha command you write dis option; the
linker searches n' processes libraries n' object filez up in tha order they
are specified. Y'all KNOW dat shit, muthafucka!  Thus, \fBfoo.o \-lz bar.o\fR searches library \fBz\fR
afta file \fIfoo.o\fR but before \fIbar.o\fR.  If \fIbar.o\fR refers
to functions up in \fBz\fR, dem functions may not be loaded.
.Sp
Da linker searches a standard list of directories fo' tha library,
which is straight-up a gangbangin' file named \fIlib\fIlibrary\fI.a\fR.  Da linker
then uses dis file as if it had been specified precisely by name.
.Sp
Da directories searched include nuff muthafuckin standard system directories
plus any dat you specify wit \fB\-L\fR.
.Sp
Normally tha filez found dis way is library files\-\-\-archive files
whose thugz is object files.  Da linker handlez a archive file by
scannin all up in it fo' thugz which define symbols dat have so far
been referenced but not defined. Y'all KNOW dat shit, muthafucka!  But if tha file dat is found be an
ordinary object file, it is linked up in tha usual fashion. I aint talkin' bout chicken n' gravy biatch.  Da only
difference between rockin a \fB\-l\fR option n' specifyin a gangbangin' file name
is dat \fB\-l\fR surroundz \fIlibrary\fR wit \fBlib\fR n' \fB.a\fR
and searches nuff muthafuckin directories.
.IP "\fB\-lobjc\fR" 4
.IX Item "-lobjc"
Yo ass need dis special case of tha \fB\-l\fR option up in order to
link a Objective-C or Objective\-\*(C+ program.
.IP "\fB\-nostartfiles\fR" 4
.IX Item "-nostartfiles"
Do not use tha standard system startup filez when linking.
Da standard system libraries is used normally, unless \fB\-nostdlib\fR
or \fB\-nodefaultlibs\fR is used.
.IP "\fB\-nodefaultlibs\fR" 4
.IX Item "-nodefaultlibs"
Do not use tha standard system libraries when linking.
Only tha libraries you specify is passed ta tha linker, n' options
specifyin linkage of tha system libraries, like fuckin \f(CW\*(C`\-static\-libgcc\*(C'\fR
or \f(CW\*(C`\-shared\-libgcc\*(C'\fR, is ignored. Y'all KNOW dat shit, muthafucka!  
Da standard startup filez is used normally, unless \fB\-nostartfiles\fR
is used.
.Sp
Da compila may generate calls ta \f(CW\*(C`memcmp\*(C'\fR,
\&\f(CW\*(C`memset\*(C'\fR, \f(CW\*(C`memcpy\*(C'\fR n' \f(CW\*(C`memmove\*(C'\fR.
These entries is probably resolved by entries in
libc.  These entry points should be supplied all up in some other
mechanizzle when dis option is specified.
.IP "\fB\-nostdlib\fR" 4
.IX Item "-nostdlib"
Do not use tha standard system startup filez or libraries when linking.
No startup filez n' only tha libraries you specify is passed to
the linker, n' options specifyin linkage of tha system libraries, such as
\&\f(CW\*(C`\-static\-libgcc\*(C'\fR or \f(CW\*(C`\-shared\-libgcc\*(C'\fR, is ignored.
.Sp
Da compila may generate calls ta \f(CW\*(C`memcmp\*(C'\fR, \f(CW\*(C`memset\*(C'\fR,
\&\f(CW\*(C`memcpy\*(C'\fR n' \f(CW\*(C`memmove\*(C'\fR.
These entries is probably resolved by entries in
libc.  These entry points should be supplied all up in some other
mechanizzle when dis option is specified.
.Sp
One of tha standard libraries bypassed by \fB\-nostdlib\fR and
\&\fB\-nodefaultlibs\fR is \fIlibgcc.a\fR, a library of internal subroutines
which \s-1GCC\s0 uses ta overcome shortcomingz of particular machines, or special
needz fo' some languages.
.Sp
In most cases, you need \fIlibgcc.a\fR even when you wanna avoid
other standard libraries. Put ya muthafuckin choppers up if ya feel dis!  In other lyrics, when you specify \fB\-nostdlib\fR
or \fB\-nodefaultlibs\fR you should probably specify \fB\-lgcc\fR as well.
This ensures dat you have no unresolved references ta internal \s-1GCC\s0
library subroutines.
(An example of such a internal subroutine is \fB_\|_main\fR, used ta ensure \*(C+
constructors is called.)
.IP "\fB\-pie\fR" 4
.IX Item "-pie"
Produce a posizzle independent executable on targets dat support dat shit.
For predictable thangs up in dis biatch, you must also specify tha same set of options
used fo' compilation (\fB\-fpie\fR, \fB\-fPIE\fR,
or model suboptions) when you specify dis linker option.
.IP "\fB\-rdynamic\fR" 4
.IX Item "-rdynamic"
Pass tha flag \fB\-export\-dynamic\fR ta tha \s-1ELF\s0 linker, on targets
that support dat shit. This instructs tha linker ta add all symbols, not
only used ones, ta tha dynamic symbol table. This option is needed
for some usez of \f(CW\*(C`dlopen\*(C'\fR or ta allow obtainin backtraces
from within a program.
.IP "\fB\-s\fR" 4
.IX Item "-s"
Remove all symbol table n' relocation shiznit from tha executable.
.IP "\fB\-static\fR" 4
.IX Item "-static"
On systems dat support dynamic linking, dis prevents linkin wit tha shared
libraries. Put ya muthafuckin choppers up if ya feel dis!  On other systems, dis option has no effect.
.IP "\fB\-shared\fR" 4
.IX Item "-shared"
Produce a gangbangin' finger-lickin' dirty-ass shared object which can then be linked wit other objects to
form a executable.  Not all systems support dis option. I aint talkin' bout chicken n' gravy biatch.  For predictable
results, you must also specify tha same set of options used fo' compilation
(\fB\-fpic\fR, \fB\-fPIC\fR, or model suboptions) when
you specify dis linker option.[1]
.IP "\fB\-shared\-libgcc\fR" 4
.IX Item "-shared-libgcc"
.PD 0
.IP "\fB\-static\-libgcc\fR" 4
.IX Item "-static-libgcc"
.PD
On systems dat provide \fIlibgcc\fR as a gangbangin' finger-lickin' dirty-ass shared library, these options
force tha use of either tha shared or static version, respectively.
If no shared version of \fIlibgcc\fR was built when tha compila was
configured, these options have no effect.
.Sp
There is nuff muthafuckin thangs up in which a application should use the
shared \fIlibgcc\fR instead of tha static version. I aint talkin' bout chicken n' gravy biatch.  Da most common
of these is when tha application wishes ta throw n' catch exceptions
across different shared libraries. Put ya muthafuckin choppers up if ya feel dis!  In dat case, each of tha libraries
as well as tha application itself should use tha shared \fIlibgcc\fR.
.Sp
Therefore, tha G++ n' \s-1GCJ\s0 drivers automatically add
\&\fB\-shared\-libgcc\fR whenever you build a gangbangin' finger-lickin' dirty-ass shared library or a main
executable, cuz \*(C+ n' Java programs typically use exceptions, so
this is tha right thang ta do.
.Sp
If, instead, you use tha \s-1GCC\s0 driver ta create shared libraries, you may
find dat they is not always linked wit tha shared \fIlibgcc\fR.
If \s-1GCC\s0 finds, at its configuration time, dat you gotz a non-GNU linker
or a \s-1GNU\s0 linker dat do not support option \fB\-\-eh\-frame\-hdr\fR,
it links tha shared version of \fIlibgcc\fR tha fuck into shared libraries
by default.  Otherwise, it takes advantage of tha linker n' optimizes
away tha linkin wit tha shared version of \fIlibgcc\fR, linkin with
the static version of libgcc by default.  This allows exceptions to
propagate all up in such shared libraries, without incurrin relocation
costs at library load time.
.Sp
But fuck dat shiznit yo, tha word on tha street is dat if a library or main executable is supposed ta throw or catch
exceptions, you must link it rockin tha G++ or \s-1GCJ\s0 driver, as appropriate
for tha languages used up in tha program, or rockin tha option
\&\fB\-shared\-libgcc\fR, such dat it is linked wit tha shared
\&\fIlibgcc\fR.
.IP "\fB\-static\-libasan\fR" 4
.IX Item "-static-libasan"
When tha \fB\-fsanitize=address\fR option is used ta link a program,
the \s-1GCC\s0 driver automatically links against \fBlibasan\fR.  If
\&\fIlibasan\fR be available as a gangbangin' finger-lickin' dirty-ass shared library, n' tha \fB\-static\fR
option aint used, then dis links against tha shared version of
\&\fIlibasan\fR.  Da \fB\-static\-libasan\fR option directs tha \s-1GCC\s0
driver ta link \fIlibasan\fR statically, without necessarily linking
other libraries statically.
.IP "\fB\-static\-libtsan\fR" 4
.IX Item "-static-libtsan"
When tha \fB\-fsanitize=thread\fR option is used ta link a program,
the \s-1GCC\s0 driver automatically links against \fBlibtsan\fR.  If
\&\fIlibtsan\fR be available as a gangbangin' finger-lickin' dirty-ass shared library, n' tha \fB\-static\fR
option aint used, then dis links against tha shared version of
\&\fIlibtsan\fR.  Da \fB\-static\-libtsan\fR option directs tha \s-1GCC\s0
driver ta link \fIlibtsan\fR statically, without necessarily linking
other libraries statically.
.IP "\fB\-static\-libstdc++\fR" 4
.IX Item "-static-libstdc++"
When tha \fBg++\fR program is used ta link a \*(C+ program, it
normally automatically links against \fBlibstdc++\fR.  If
\&\fIlibstdc++\fR be available as a gangbangin' finger-lickin' dirty-ass shared library, n' the
\&\fB\-static\fR option aint used, then dis links against the
shared version of \fIlibstdc++\fR.  That is normally fine.  But fuck dat shiznit yo, tha word on tha street is dat it
is sometimes useful ta freeze tha version of \fIlibstdc++\fR used by
the program without goin all tha way ta a gangbangin' straight-up static link.  The
\&\fB\-static\-libstdc++\fR option directs tha \fBg++\fR driver to
link \fIlibstdc++\fR statically, without necessarily linkin other
libraries statically.
.IP "\fB\-symbolic\fR" 4
.IX Item "-symbolic"
Bind references ta global symbols when buildin a gangbangin' finger-lickin' dirty-ass shared object.  Warn
about any unresolved references (unless overridden by tha link editor
option \fB\-Xlinker \-z \-Xlinker defs\fR).  Only all dem systems support
this option.
.IP "\fB\-T\fR \fIscript\fR" 4
.IX Item "-T script"
Use \fIscript\fR as tha linker script.  This option is supported by most
systems rockin tha \s-1GNU\s0 linker n' shit.  On some targets, like fuckin bare-board
targets without a operatin system, tha \fB\-T\fR option may be required
when linkin ta avoid references ta undefined symbols.
.IP "\fB\-Xlinker\fR \fIoption\fR" 4
.IX Item "-Xlinker option"
Pass \fIoption\fR as a option ta tha linker n' shit.  Yo ass can use dis to
supply system-specific linker options dat \s-1GCC\s0 do not recognize.
.Sp
If you wanna pass a option dat takes a separate argument, you must use
\&\fB\-Xlinker\fR twice, once fo' tha option n' once fo' tha argument.
For example, ta pass \fB\-assert definitions\fR, you must write
\&\fB\-Xlinker \-assert \-Xlinker definitions\fR.  It do not work ta write
\&\fB\-Xlinker \*(L"\-assert definitions\*(R"\fR, cuz dis passes tha entire
strin as a single argument, which aint what tha fuck tha linker expects.
.Sp
When rockin tha \s-1GNU\s0 linker, it is probably mo' convenient ta pass
arguments ta linker options rockin tha \fIoption\fR\fB=\fR\fIvalue\fR
syntax than as separate arguments, n' you can put dat on yo' toast.  For example, you can specify
\&\fB\-Xlinker \-Map=output.map\fR rather than
\&\fB\-Xlinker \-Map \-Xlinker output.map\fR.  Other linkers may not support
this syntax fo' command-line options.
.IP "\fB\-Wl,\fR\fIoption\fR" 4
.IX Item "-Wl,option"
Pass \fIoption\fR as a option ta tha linker n' shit.  If \fIoption\fR gotz nuff
commas, it is split tha fuck into multiple options all up in tha commas.  Yo ass can use this
syntax ta pass a argument ta tha option.
For example, \fB\-Wl,\-Map,output.map\fR passes \fB\-Map output.map\fR ta the
linker n' shit.  When rockin tha \s-1GNU\s0 linker, you can also git tha same effect with
\&\fB\-Wl,\-Map=output.map\fR.
.IP "\fB\-u\fR \fIsymbol\fR" 4
.IX Item "-u symbol"
Pretend tha symbol \fIsymbol\fR is undefined, ta force linkin of
library modulez ta define dat shit.  Yo ass can use \fB\-u\fR multiple times with
different symbols ta force loadin of additionizzle library modules.
.SS "Options fo' Directory Search"
.IX Subsection "Options fo' Directory Search"
These options specify directories ta search fo' header files, for
libraries n' fo' partz of tha compiler:
.IP "\fB\-I\fR\fIdir\fR" 4
.IX Item "-Idir"
Add tha directory \fIdir\fR ta tha head of tha list of directories ta be
searched fo' header files.  This can be used ta override a system header
file, substitutin yo' own version, since these directories are
searched before tha system header file directories. Put ya muthafuckin choppers up if ya feel dis!  But fuck dat shiznit yo, tha word on tha street is dat you should
not use dis option ta add directories dat contain vendor-supplied
system header filez (use \fB\-isystem\fR fo' that).  If you use mo' than
one \fB\-I\fR option, tha directories is scanned up in left-to-right
order; tha standard system directories come after.
.Sp
If a standard system include directory, or a gangbangin' finger-lickin' directory specified with
\&\fB\-isystem\fR, be also specified wit \fB\-I\fR, tha \fB\-I\fR
option is ignored. Y'all KNOW dat shit, muthafucka!  Da directory is still searched but as a
system directory at its aiiight posizzle up in tha system include chain.
This is ta ensure dat \s-1GCC\s0z procedure ta fix buggy system headaz and
the orderin fo' tha \f(CW\*(C`include_next\*(C'\fR directizzle is not inadvertently chizzled.
If you straight-up need ta chizzle tha search order fo' system directories,
use tha \fB\-nostdinc\fR and/or \fB\-isystem\fR options.
.IP "\fB\-iplugindir=\fR\fIdir\fR" 4
.IX Item "-iplugindir=dir"
Set tha directory ta search fo' plugins dat is passed
by \fB\-fplugin=\fR\fIname\fR instead of
\&\fB\-fplugin=\fR\fIpath\fR\fB/\fR\fIname\fR\fB.so\fR.  This option aint meant
to be used by tha user yo, but only passed by tha driver.
.IP "\fB\-iquote\fR\fIdir\fR" 4
.IX Item "-iquotedir"
Add tha directory \fIdir\fR ta tha head of tha list of directories to
be searched fo' header filez only fo' tha case of \fB#include
"\fR\fIfile\fR\fB"\fR; they is not searched fo' \fB#include <\fR\fIfile\fR\fB>\fR,
otherwise just like \fB\-I\fR.
.IP "\fB\-L\fR\fIdir\fR" 4
.IX Item "-Ldir"
Add directory \fIdir\fR ta tha list of directories ta be searched
for \fB\-l\fR.
.IP "\fB\-B\fR\fIprefix\fR" 4
.IX Item "-Bprefix"
This option specifies where ta find tha executables, libraries,
include files, n' data filez of tha compila itself.
.Sp
Da compila driver program runs one or mo' of tha subprograms
\&\fBcpp\fR, \fBcc1\fR, \fBas\fR n' \fBld\fR.  It tries
\&\fIprefix\fR as a prefix fo' each program it tries ta run, both wit and
without \fImachine\fR\fB/\fR\fIversion\fR\fB/\fR.
.Sp
For each subprogram ta be run, tha compila driver first tries the
\&\fB\-B\fR prefix, if any.  If dat name aint found, or if \fB\-B\fR
is not specified, tha driver tries two standard prefixes, 
\&\fI/usr/lib/gcc/\fR n' \fI/usr/local/lib/gcc/\fR.  If neither of
those thangs up in dis biatch up in a gangbangin' file name dat is found, tha unmodified program
name is searched fo' rockin tha directories specified up in your
\&\fB\s-1PATH\s0\fR environment variable.
.Sp
Da compila checks ta peep if tha path provided by tha \fB\-B\fR
refers ta a gangbangin' finger-lickin' directory, n' if necessary it addz a gangbangin' finger-lickin' directory
separator characta all up in tha end of tha path.
.Sp
\&\fB\-B\fR prefixes dat effectively specify directory names also apply
to libraries up in tha linker, cuz tha compila translates these
options tha fuck into \fB\-L\fR options fo' tha linker n' shit.  They also apply to
includes filez up in tha preprocessor, cuz tha compila translates these
options tha fuck into \fB\-isystem\fR options fo' tha preprocessor. Shiiit, dis aint no joke.  In dis case,
the compila appendz \fBinclude\fR ta tha prefix.
.Sp
Da runtime support file \fIlibgcc.a\fR can also be searched fo' using
the \fB\-B\fR prefix, if needed. Y'all KNOW dat shit, muthafucka!  If it aint found there, tha two
standard prefixes above is tried, n' dat be all.  Da file is left
out of tha link if it aint found by dem means.
.Sp
Another way ta specify a prefix much like tha \fB\-B\fR prefix is ta use
the environment variable \fB\s-1GCC_EXEC_PREFIX\s0\fR.
.Sp
As a special kludge, if tha path provided by \fB\-B\fR is
\&\fI[dir/]stage\fIN\fI/\fR, where \fIN\fR be a number up in tha range 0 to
9, then it is replaced by \fI[dir/]include\fR.  This is ta help
with boot-strappin tha compiler.
.IP "\fB\-specs=\fR\fIfile\fR" 4
.IX Item "-specs=file"
Process \fIfile\fR afta tha compila readz up in tha standard \fIspecs\fR
file, up in order ta override tha defaults which tha \fBgcc\fR driver
program uses when determinin what tha fuck switches ta pass ta \fBcc1\fR,
\&\fBcc1plus\fR, \fBas\fR, \fBld\fR, etc.  Mo' than one
\&\fB\-specs=\fR\fIfile\fR can be specified on tha command line, n' they
are processed up in order, from left ta right.
.IP "\fB\-\-sysroot=\fR\fIdir\fR" 4
.IX Item "--sysroot=dir"
Use \fIdir\fR as tha logical root directory fo' headaz n' libraries.
For example, if tha compila normally searches fo' headaz in
\&\fI/usr/include\fR n' libraries up in \fI/usr/lib\fR, it instead
searches \fI\fIdir\fI/usr/include\fR n' \fI\fIdir\fI/usr/lib\fR.
.Sp
If you use both dis option n' tha \fB\-isysroot\fR option, then
the \fB\-\-sysroot\fR option applies ta libraries yo, but the
\&\fB\-isysroot\fR option applies ta header files.
.Sp
Da \s-1GNU\s0 linker (beginnin wit version 2.16) has tha necessary support
for dis option. I aint talkin' bout chicken n' gravy biatch.  If yo' linker do not support dis option, the
header file aspect of \fB\-\-sysroot\fR still works yo, but the
library aspect do not.
.IP "\fB\-\-no\-sysroot\-suffix\fR" 4
.IX Item "--no-sysroot-suffix"
For some targets, a suffix be added ta tha root directory specified
with \fB\-\-sysroot\fR, dependin on tha other options used, so that
headaz may fo' example be found in
\&\fI\fIdir\fI/\fIsuffix\fI/usr/include\fR instead of
\&\fI\fIdir\fI/usr/include\fR.  This option disablez tha addizzle of
such a suffix.
.IP "\fB\-I\-\fR" 4
.IX Item "-I-"
This option has been deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Please use \fB\-iquote\fR instead for
\&\fB\-I\fR directories before tha \fB\-I\-\fR n' remove tha \fB\-I\-\fR.
Any directories you specify wit \fB\-I\fR options before tha \fB\-I\-\fR
option is searched only fo' tha case of \fB#include "\fR\fIfile\fR\fB"\fR;
they is not searched fo' \fB#include <\fR\fIfile\fR\fB>\fR.
.Sp
If additionizzle directories is specified wit \fB\-I\fR options after
the \fB\-I\-\fR, these directories is searched fo' all \fB#include\fR
directives.  (Ordinarily \fIall\fR \fB\-I\fR directories is used
this way.)
.Sp
In addition, tha \fB\-I\-\fR option inhibits tha use of tha current
directory (where tha current input file came from) as tha straight-up original gangsta search
directory fo' \fB#include "\fR\fIfile\fR\fB"\fR.  There is no way to
override dis effect of \fB\-I\-\fR.  With \fB\-I.\fR you can specify
searchin tha directory dat is current when tha compila is
invoked. Y'all KNOW dat shit, muthafucka!  That aint exactly tha same as what tha fuck tha preprocessor do
by default yo, but it is often satisfactory.
.Sp
\&\fB\-I\-\fR do not inhibit tha use of tha standard system directories
for header files.  Thus, \fB\-I\-\fR n' \fB\-nostdinc\fR are
independent.
.SS "Specifyin Target Machine n' Compila Version"
.IX Subsection "Specifyin Target Machine n' Compila Version"
Da usual way ta run \s-1GCC\s0 is ta run tha executable called \fBgcc\fR, or
\&\fImachine\fR\fB\-gcc\fR when cross-compiling, or
\&\fImachine\fR\fB\-gcc\-\fR\fIversion\fR ta run a version other than the
one dat was installed last.
.SS "Hardware Models n' Configurations"
.IX Subsection "Hardware Models n' Configurations"
Each target machine types can have its own
special options, startin wit \fB\-m\fR, ta chizzle among various
hardware models or configurations\-\-\-for example, 68010 vs 68020,
floatin coprocessor or none.  A single installed version of the
compila can compile fo' any model or configuration, accordin ta the
options specified.
.PP
Some configurationz of tha compila also support additionizzle special
options, probably fo' compatibilitizzle wit other compilaz on tha same
platform.
.SS "AArch64 Options"
.IX Subsection "AArch64 Options"
These options is defined fo' AArch64 implementations:
.IP "\fB\-mbig\-endian\fR" 4
.IX Item "-mbig-endian"
Generate big-endian code.  This is tha default when \s-1GCC\s0 is configured fo' an
\&\fBaarch64_be\-*\-*\fR target.
.IP "\fB\-mgeneral\-regs\-only\fR" 4
.IX Item "-mgeneral-regs-only"
Generate code which uses only tha general registers.
.IP "\fB\-mlil\-endian\fR" 4
.IX Item "-mlil-endian"
Generate lil-endian code.  This is tha default when \s-1GCC\s0 is configured fo' an
\&\fBaarch64\-*\-*\fR but not a \fBaarch64_be\-*\-*\fR target.
.IP "\fB\-mcmodel=tiny\fR" 4
.IX Item "-mcmodel=tiny"
Generate code fo' tha tiny code model.  Da program n' its statically defined
symbols must be within 1GB of each other n' shit.  Pointas is 64 bits, n' you can put dat on yo' toast.  Programs can
be statically or dynamically linked. Y'all KNOW dat shit, muthafucka!  This model aint straight-up implemented and
mostly treated as \fBsmall\fR.
.IP "\fB\-mcmodel=small\fR" 4
.IX Item "-mcmodel=small"
Generate code fo' tha lil' small-ass code model.  Da program n' its statically defined
symbols must be within 4GB of each other n' shit.  Pointas is 64 bits, n' you can put dat on yo' toast.  Programs can
be statically or dynamically linked. Y'all KNOW dat shit, muthafucka!  This is tha default code model.
.IP "\fB\-mcmodel=large\fR" 4
.IX Item "-mcmodel=large"
Generate code fo' tha big-ass code model.  This make no assumptions about
addresses n' sizez of sections.  Pointas is 64 bits, n' you can put dat on yo' toast.  Programs can be
statically linked only.
.IP "\fB\-mstrict\-align\fR" 4
.IX Item "-mstrict-align"
Do not assume dat unaligned memory references is ghon be handled by tha system.
.IP "\fB\-momit\-leaf\-frame\-pointer\fR" 4
.IX Item "-momit-leaf-frame-pointer"
.PD 0
.IP "\fB\-mno\-omit\-leaf\-frame\-pointer\fR" 4
.IX Item "-mno-omit-leaf-frame-pointer"
.PD
Omit or keep tha frame pointa up in leaf functions.  Da forma behaviour is the
default.
.IP "\fB\-mtls\-dialect=desc\fR" 4
.IX Item "-mtls-dialect=desc"
Use \s-1TLS\s0 descriptors as tha thread-local storage mechanizzle fo' dynamic accesses
of \s-1TLS\s0 variables.  This is tha default.
.IP "\fB\-mtls\-dialect=traditional\fR" 4
.IX Item "-mtls-dialect=traditional"
Use traditionizzle \s-1TLS\s0 as tha thread-local storage mechanizzle fo' dynamic accesses
of \s-1TLS\s0 variables.
.IP "\fB\-march=\fR\fIname\fR" 4
.IX Item "-march=name"
Specify tha name of tha target architecture, optionally suffixed by one or
more feature modifiers.  This option has tha form
\&\fB\-march=\fR\fIarch\fR{\fB+\fR[\fBno\fR]\fIfeature\fR}*, where the
only value fo' \fIarch\fR is \fBarmv8\-a\fR.  Da possible joints for
\&\fIfeature\fR is documented up in tha sub-section below.
.Sp
Where conflictin feature modifiers is specified, tha right-most feature is
used.
.Sp
\&\s-1GCC\s0 uses dis name ta determine what tha fuck kind of instructions it can emit when
generatin assembly code.  This option can be used up in conjunction wit or
instead of tha \fB\-mcpu=\fR option.
.IP "\fB\-mcpu=\fR\fIname\fR" 4
.IX Item "-mcpu=name"
Specify tha name of tha target processor, optionally suffixed by one or more
feature modifiers.  This option has tha form
\&\fB\-mcpu=\fR\fIcpu\fR{\fB+\fR[\fBno\fR]\fIfeature\fR}*, where the
possible joints fo' \fIcpu\fR is \fBgeneric\fR, \fBlarge\fR.  The
possible joints fo' \fIfeature\fR is documented up in tha sub-section
below.
.Sp
Where conflictin feature modifiers is specified, tha right-most feature is
used.
.Sp
\&\s-1GCC\s0 uses dis name ta determine what tha fuck kind of instructions it can emit when
generatin assembly code.
.IP "\fB\-mtune=\fR\fIname\fR" 4
.IX Item "-mtune=name"
Specify tha name of tha processor ta tune tha performizzle for. Shiiit, dis aint no joke.  Da code will
be tuned as if tha target processor waz of tha type specified up in dis option,
but still rockin instructions compatible wit tha target processor specified
by a \fB\-mcpu=\fR option. I aint talkin' bout chicken n' gravy biatch.  This option cannot be suffixed by feature
modifiers.
.PP
\fB\-march\fR n' \fB\-mcpu\fR feature modifiers
.IX Subsection "-march n' -mcpu feature modifiers"
.PP
Feature modifiers used wit \fB\-march\fR n' \fB\-mcpu\fR can be one
the following:
.IP "\fBcrypto\fR" 4
.IX Item "crypto"
Enable Crypto extension. I aint talkin' bout chicken n' gravy biatch.  This implies Advanced \s-1SIMD\s0 is enabled.
.IP "\fBfp\fR" 4
.IX Item "fp"
Enable floating-point instructions.
.IP "\fBsimd\fR" 4
.IX Item "simd"
Enable Advanced \s-1SIMD\s0 instructions.  This implies floating-point instructions
are enabled. Y'all KNOW dat shit, muthafucka!  This is tha default fo' all current possible joints fo' options
\&\fB\-march\fR n' \fB\-mcpu=\fR.
.SS "Adapteva Epiphany Options"
.IX Subsection "Adapteva Epiphany Options"
These \fB\-m\fR options is defined fo' Adapteva Epiphany:
.IP "\fB\-mhalf\-reg\-file\fR" 4
.IX Item "-mhalf-reg-file"
Don't allocate any regista up in tha range \f(CW\*(C`r32\*(C'\fR...\f(CW\*(C`r63\*(C'\fR.
That allows code ta run on hardware variants dat lack these registers.
.IP "\fB\-mprefer\-short\-insn\-regs\fR" 4
.IX Item "-mprefer-short-insn-regs"
Preferrentially allocate registas dat allow short instruction generation.
This can result up in increased instruction count, so dis may either reduce or
increase overall code size.
.IP "\fB\-mbranch\-cost=\fR\fInum\fR" 4
.IX Item "-mbranch-cost=num"
Set tha cost of branches ta roughly \fInum\fR \*(L"simple\*(R" instructions.
This cost is only a heuristic n' aint guaranteed ta produce
consistent thangs up in dis biatch across releases.
.IP "\fB\-mcmove\fR" 4
.IX Item "-mcmove"
Enable tha generation of conditionizzle moves.
.IP "\fB\-mnops=\fR\fInum\fR" 4
.IX Item "-mnops=num"
Emit \fInum\fR NOPs before every last muthafuckin other generated instruction.
.IP "\fB\-mno\-soft\-cmpsf\fR" 4
.IX Item "-mno-soft-cmpsf"
For single-precision floating-point comparisons, emit a \f(CW\*(C`fsub\*(C'\fR instruction
and test tha flags.  This is fasta than a software comparison yo, but can
get incorrect thangs up in dis biatch up in tha presence of NaNs, or when two different small
numbers is compared such dat they difference is calculated as zero.
Da default is \fB\-msoft\-cmpsf\fR, which uses slower yo, but IEEE-compliant,
software comparisons.
.IP "\fB\-mstack\-offset=\fR\fInum\fR" 4
.IX Item "-mstack-offset=num"
Set tha offset between tha top of tha stack n' tha stack pointer.
E.g., a value of 8 means dat tha eight bytes up in tha range \f(CW\*(C`sp+0...sp+7\*(C'\fR
can be used by leaf functions without stack allocation.
Values other than \fB8\fR or \fB16\fR is untested n' unlikely ta work.
Note also dat dis option chizzlez tha \s-1ABI\s0; compilin a program wit a
different stack offset than tha libraries done been compiled with
generally do not work.
This option can be useful if you wanna evaluate if a gangbangin' finger-lickin' different stack
offset would hit you wit betta code yo, but ta straight-up bust a gangbangin' finger-lickin' different stack
offset ta build hustlin programs, it is recommended ta configure the
toolchain wit tha appropriate \fB\-\-with\-stack\-offset=\fR\fInum\fR option.
.IP "\fB\-mno\-round\-nearest\fR" 4
.IX Item "-mno-round-nearest"
Make tha schedula assume dat tha roundin mode has been set to
truncating.  Da default is \fB\-mround\-nearest\fR.
.IP "\fB\-mlong\-calls\fR" 4
.IX Item "-mlong-calls"
If not otherwise specified by a attribute, assume all calls might be beyond
the offset range of tha \f(CW\*(C`b\*(C'\fR / \f(CW\*(C`bl\*(C'\fR instructions, n' therefore load the
function address tha fuck into a regista before struttin a (otherwise direct) call.
This is tha default.
.IP "\fB\-mshort\-calls\fR" 4
.IX Item "-mshort-calls"
If not otherwise specified by a attribute, assume all direct calls are
in tha range of tha \f(CW\*(C`b\*(C'\fR / \f(CW\*(C`bl\*(C'\fR instructions, so use these instructions
for direct calls.  Da default is \fB\-mlong\-calls\fR.
.IP "\fB\-msmall16\fR" 4
.IX Item "-msmall16"
Assume addresses can be loaded as 16\-bit unsigned joints, n' you can put dat on yo' toast.  This do not
apply ta function addresses fo' which \fB\-mlong\-calls\fR semantics
are up in effect.
.IP "\fB\-mfp\-mode=\fR\fImode\fR" 4
.IX Item "-mfp-mode=mode"
Set tha prevailin mode of tha floating-point unit.
This determines tha floating-point mode dat is provided n' expected
at function call n' return time.  Makin dis mode match tha mode you
predominantly need at function start can make yo' programs smalla and
fasta by avoidin unnecessary mode switches.
.Sp
\&\fImode\fR can be set ta one tha followin joints:
.RS 4
.IP "\fBcaller\fR" 4
.IX Item "caller"
Any mode at function entry is valid, n' retained or restored when
the function returns, n' when it calls other functions.
This mode is useful fo' compilin libraries or other compilation units
you might wanna incorporate tha fuck into different programs wit different
prevailin \s-1FPU\s0 modes, n' tha convenience of bein able ta bust a single
object file outweighs tha size n' speed overhead fo' any extra
mode switchin dat might be needed, compared wit what tha fuck would be needed
with a mo' specific chizzle of prevailin \s-1FPU\s0 mode.
.IP "\fBtruncate\fR" 4
.IX Item "truncate"
This is tha mode used fo' floating-point calculations with
truncatin (i.e. round towardz zero) roundin mode.  That includes
conversion from floatin point ta integer.
.IP "\fBround-nearest\fR" 4
.IX Item "round-nearest"
This is tha mode used fo' floating-point calculations with
round-to-nearest-or-even roundin mode.
.IP "\fBint\fR" 4
.IX Item "int"
This is tha mode used ta big-ass up integer calculations up in tha \s-1FPU,\s0 e.g.
integer multiply, or integer multiply-and-accumulate.
.RE
.RS 4
.Sp
Da default is \fB\-mfp\-mode=caller\fR
.RE
.IP "\fB\-mnosplit\-lohi\fR" 4
.IX Item "-mnosplit-lohi"
.PD 0
.IP "\fB\-mno\-postinc\fR" 4
.IX Item "-mno-postinc"
.IP "\fB\-mno\-postmodify\fR" 4
.IX Item "-mno-postmodify"
.PD
Code generation tweaks dat disable, respectively, splittin of 32\-bit
loads, generation of post-increment addresses, n' generation of
post-modify addresses.  Da defaults is \fBmsplit-lohi\fR,
\&\fB\-mpost\-inc\fR, n' \fB\-mpost\-modify\fR.
.IP "\fB\-mnovect\-double\fR" 4
.IX Item "-mnovect-double"
Change tha preferred \s-1SIMD\s0 mode ta SImode.  Da default is
\&\fB\-mvect\-double\fR, which uses DImode as preferred \s-1SIMD\s0 mode.
.IP "\fB\-max\-vect\-align=\fR\fInum\fR" 4
.IX Item "-max-vect-align=num"
Da maximum alignment fo' \s-1SIMD\s0 vector mode types.
\&\fInum\fR may be 4 or 8.  Da default is 8.
Note dat dis be a \s-1ABI\s0 chizzle, even though nuff library function
interfaces is unaffected if they don't use \s-1SIMD\s0 vector modes
in places dat affect size and/or alignment of relevant types.
.IP "\fB\-msplit\-vecmove\-early\fR" 4
.IX Item "-msplit-vecmove-early"
Split vector moves tha fuck into single word moves before reload. Y'all KNOW dat shit, muthafucka!  In theory this
can give betta regista allocation yo, but so far tha reverse seems ta be
generally tha case.
.IP "\fB\-m1reg\-\fR\fIreg\fR" 4
.IX Item "-m1reg-reg"
Specify a regista ta hold tha constant \-1, which make loadin lil' small-ass negative
constants n' certain bitmasks faster.
Allowable joints fo' \fIreg\fR is \fBr43\fR n' \fBr63\fR,
which specify use of dat regista as a gangbangin' fixed register,
and \fBnone\fR, which means dat no regista is used fo' this
purpose.  Da default is \fB\-m1reg\-none\fR.
.SS "\s-1ARM\s0 Options"
.IX Subsection "ARM Options"
These \fB\-m\fR options is defined fo' Advanced \s-1RISC\s0 Machines (\s-1ARM\s0)
architectures:
.IP "\fB\-mabi=\fR\fIname\fR" 4
.IX Item "-mabi=name"
Generate code fo' tha specified \s-1ABI. \s0 Permissible joints are: \fBapcs-gnu\fR,
\&\fBatpcs\fR, \fBaapcs\fR, \fBaapcs-linux\fR n' \fBiwmmxt\fR.
.IP "\fB\-mapcs\-frame\fR" 4
.IX Item "-mapcs-frame"
Generate a stack frame dat is compliant wit tha \s-1ARM\s0 Procedure Call
Standard fo' all functions, even if dis aint strictly necessary for
correct execution of tha code.  Specifyin \fB\-fomit\-frame\-pointer\fR
with dis option causes tha stack frames not ta be generated for
leaf functions.  Da default is \fB\-mno\-apcs\-frame\fR.
.IP "\fB\-mapcs\fR" 4
.IX Item "-mapcs"
This be a synonym fo' \fB\-mapcs\-frame\fR.
.IP "\fB\-mthumb\-interwork\fR" 4
.IX Item "-mthumb-interwork"
Generate code dat supports callin between tha \s-1ARM\s0 n' Thumb
instruction sets, n' you can put dat on yo' toast.  Without dis option, on pre\-v5 architectures, the
two instruction sets cannot be reliably used inside one program.  The
default is \fB\-mno\-thumb\-interwork\fR, since slightly larger code
is generated when \fB\-mthumb\-interwork\fR is specified. Y'all KNOW dat shit, muthafucka!  In \s-1AAPCS\s0
configurations dis option is meaningless.
.IP "\fB\-mno\-sched\-prolog\fR" 4
.IX Item "-mno-sched-prolog"
Prevent tha reorderin of instructions up in tha function prologue, or the
mergin of dem instruction wit tha instructions up in tha function's
body.  This means dat all functions start wit a recognizable set
of instructions (or up in fact one of a cold-ass lil chizzle from a lil' small-ass set of
different function prologues), n' dis shiznit can be used to
locate tha start of functions inside a executable piece of code.  The
default is \fB\-msched\-prolog\fR.
.IP "\fB\-mfloat\-abi=\fR\fIname\fR" 4
.IX Item "-mfloat-abi=name"
Specifies which floating-point \s-1ABI\s0 ta use.  Permissible joints
are: \fBsoft\fR, \fBsoftfp\fR n' \fBhard\fR.
.Sp
Specifyin \fBsoft\fR causes \s-1GCC\s0 ta generate output containing
library calls fo' floating-point operations.
\&\fBsoftfp\fR allows tha generation of code rockin hardware floating-point
instructions yo, but still uses tha soft-float callin conventions.
\&\fBhard\fR allows generation of floating-point instructions
and uses FPU-specific callin conventions.
.Sp
Da default dependz on tha specific target configuration. I aint talkin' bout chicken n' gravy biatch.  Note that
the hard-float n' soft-float ABIs is not link-compatible; you must
compile yo' entire program wit tha same \s-1ABI,\s0 n' link wit a
compatible set of libraries.
.IP "\fB\-mlil\-endian\fR" 4
.IX Item "-mlil-endian"
Generate code fo' a processor hustlin up in lil-endian mode.  This is
the default fo' all standard configurations.
.IP "\fB\-mbig\-endian\fR" 4
.IX Item "-mbig-endian"
Generate code fo' a processor hustlin up in big-endian mode; tha default is
to compile code fo' a lil-endian processor.
.IP "\fB\-mwords\-lil\-endian\fR" 4
.IX Item "-mwords-lil-endian"
This option only applies when generatin code fo' big-endian processors.
Generate code fo' a lil-endian word order but a funky-ass big-endian byte
order n' shit.  That is, a funky-ass byte order of tha form \fB32107654\fR.  Note: this
option should only be used if you require compatibilitizzle wit code for
big-endian \s-1ARM\s0 processors generated by versionz of tha compila prior to
2.8.  This option is now deprecated.
.IP "\fB\-march=\fR\fIname\fR" 4
.IX Item "-march=name"
This specifies tha name of tha target \s-1ARM\s0 architecture.  \s-1GCC\s0 uses this
name ta determine what tha fuck kind of instructions it can emit when generating
assembly code.  This option can be used up in conjunction wit or instead
of tha \fB\-mcpu=\fR option. I aint talkin' bout chicken n' gravy biatch.  Permissible names are: \fBarmv2\fR,
\&\fBarmv2a\fR, \fBarmv3\fR, \fBarmv3m\fR, \fBarmv4\fR, \fBarmv4t\fR,
\&\fBarmv5\fR, \fBarmv5t\fR, \fBarmv5e\fR, \fBarmv5te\fR,
\&\fBarmv6\fR, \fBarmv6j\fR,
\&\fBarmv6t2\fR, \fBarmv6z\fR, \fBarmv6zk\fR, \fBarmv6\-m\fR,
\&\fBarmv7\fR, \fBarmv7\-a\fR, \fBarmv7\-r\fR, \fBarmv7\-m\fR, \fBarmv7e\-m\fR
\&\fBarmv8\-a\fR,
\&\fBiwmmxt\fR, \fBiwmmxt2\fR, \fBep9312\fR.
.Sp
\&\fB\-march=native\fR causes tha compila ta auto-detect tha architecture
of tha build computer n' shit.  At present, dis feature is only supported on
GNU/Linux, n' not all architectures is recognized. Y'all KNOW dat shit, muthafucka!  If tha auto-detect
is unsuccessful tha option has no effect.
.IP "\fB\-mtune=\fR\fIname\fR" 4
.IX Item "-mtune=name"
This option specifies tha name of tha target \s-1ARM\s0 processor for
which \s-1GCC\s0 should tune tha performizzle of tha code.
For some \s-1ARM\s0 implementations betta performizzle can be obtained by using
this option.
Permissible names are: \fBarm2\fR, \fBarm250\fR,
\&\fBarm3\fR, \fBarm6\fR, \fBarm60\fR, \fBarm600\fR, \fBarm610\fR,
\&\fBarm620\fR, \fBarm7\fR, \fBarm7m\fR, \fBarm7d\fR, \fBarm7dm\fR,
\&\fBarm7di\fR, \fBarm7dmi\fR, \fBarm70\fR, \fBarm700\fR,
\&\fBarm700i\fR, \fBarm710\fR, \fBarm710c\fR, \fBarm7100\fR,
\&\fBarm720\fR,
\&\fBarm7500\fR, \fBarm7500fe\fR, \fBarm7tdmi\fR, \fBarm7tdmi\-s\fR,
\&\fBarm710t\fR, \fBarm720t\fR, \fBarm740t\fR,
\&\fBstrongarm\fR, \fBstrongarm110\fR, \fBstrongarm1100\fR,
\&\fBstrongarm1110\fR,
\&\fBarm8\fR, \fBarm810\fR, \fBarm9\fR, \fBarm9e\fR, \fBarm920\fR,
\&\fBarm920t\fR, \fBarm922t\fR, \fBarm946e\-s\fR, \fBarm966e\-s\fR,
\&\fBarm968e\-s\fR, \fBarm926ej\-s\fR, \fBarm940t\fR, \fBarm9tdmi\fR,
\&\fBarm10tdmi\fR, \fBarm1020t\fR, \fBarm1026ej\-s\fR,
\&\fBarm10e\fR, \fBarm1020e\fR, \fBarm1022e\fR,
\&\fBarm1136j\-s\fR, \fBarm1136jf\-s\fR, \fBmpcore\fR, \fBmpcorenovfp\fR,
\&\fBarm1156t2\-s\fR, \fBarm1156t2f\-s\fR, \fBarm1176jz\-s\fR, \fBarm1176jzf\-s\fR,
\&\fBcortex\-a5\fR, \fBcortex\-a7\fR, \fBcortex\-a8\fR, \fBcortex\-a9\fR, 
\&\fBcortex\-a15\fR, \fBcortex\-r4\fR, \fBcortex\-r4f\fR, \fBcortex\-r5\fR,
\&\fBcortex\-m4\fR, \fBcortex\-m3\fR,
\&\fBcortex\-m1\fR,
\&\fBcortex\-m0\fR,
\&\fBcortex\-m0plus\fR,
\&\fBmarvell\-pj4\fR,
\&\fBxscale\fR, \fBiwmmxt\fR, \fBiwmmxt2\fR, \fBep9312\fR,
\&\fBfa526\fR, \fBfa626\fR,
\&\fBfa606te\fR, \fBfa626te\fR, \fBfmp626\fR, \fBfa726te\fR.
.Sp
\&\fB\-mtune=generic\-\fR\fIarch\fR specifies dat \s-1GCC\s0 should tune the
performizzle fo' a funky-ass blend of processors within architecture \fIarch\fR.
Da aim is ta generate code dat run well on tha current most popular
processors, balancin between optimizations dat benefit some CPUs up in the
range, n' avoidin performizzle pitfallz of other CPUs.  Da effects of
this option may chizzle up in future \s-1GCC\s0 versions as \s-1CPU\s0 models come n' go.
.Sp
\&\fB\-mtune=native\fR causes tha compila ta auto-detect tha \s-1CPU\s0
of tha build computer n' shit.  At present, dis feature is only supported on
GNU/Linux, n' not all architectures is recognized. Y'all KNOW dat shit, muthafucka!  If tha auto-detect is
unsuccessful tha option has no effect.
.IP "\fB\-mcpu=\fR\fIname\fR" 4
.IX Item "-mcpu=name"
This specifies tha name of tha target \s-1ARM\s0 processor. Shiiit, dis aint no joke.  \s-1GCC\s0 uses dis name
to derive tha name of tha target \s-1ARM\s0 architecture (as if specified
by \fB\-march\fR) n' tha \s-1ARM\s0 processor type fo' which ta tune for
performizzle (as if specified by \fB\-mtune\fR).  Where dis option
is used up in conjunction wit \fB\-march\fR or \fB\-mtune\fR,
those options take precedence over tha appropriate part of dis option.
.Sp
Permissible names fo' dis option is tha same as dem for
\&\fB\-mtune\fR.
.Sp
\&\fB\-mcpu=generic\-\fR\fIarch\fR be also permissible, n' is
equivalent ta \fB\-march=\fR\fIarch\fR \fB\-mtune=generic\-\fR\fIarch\fR.
See \fB\-mtune\fR fo' mo' shiznit.
.Sp
\&\fB\-mcpu=native\fR causes tha compila ta auto-detect tha \s-1CPU\s0
of tha build computer n' shit.  At present, dis feature is only supported on
GNU/Linux, n' not all architectures is recognized. Y'all KNOW dat shit, muthafucka!  If tha auto-detect
is unsuccessful tha option has no effect.
.IP "\fB\-mfpu=\fR\fIname\fR" 4
.IX Item "-mfpu=name"
This specifies what tha fuck floating-point hardware (or hardware emulation) is
available on tha target.  Permissible names are: \fBvfp\fR, \fBvfpv3\fR,
\&\fBvfpv3\-fp16\fR, \fBvfpv3\-d16\fR, \fBvfpv3\-d16\-fp16\fR, \fBvfpv3xd\fR,
\&\fBvfpv3xd\-fp16\fR, \fBneon\fR, \fBneon\-fp16\fR, \fBvfpv4\fR,
\&\fBvfpv4\-d16\fR, \fBfpv4\-sp\-d16\fR, \fBneon\-vfpv4\fR,
\&\fBfp\-armv8\fR, \fBneon\-fp\-armv8\fR, n' \fBcrypto\-neon\-fp\-armv8\fR.
.Sp
If \fB\-msoft\-float\fR is specified dis specifies tha format of
floating-point joints.
.Sp
If tha selected floating-point hardware includes tha \s-1NEON\s0 extension
(e.g. \fB\-mfpu\fR=\fBneon\fR), note dat floating-point
operations is not generated by \s-1GCC\s0z auto-vectorization pass unless
\&\fB\-funsafe\-math\-optimizations\fR be also specified. Y'all KNOW dat shit, muthafucka!  This is
because \s-1NEON\s0 hardware do not straight-up implement tha \s-1IEEE 754\s0 standard for
floating-point arithmetic (in particular denormal joints is treated as
zero), so tha use of \s-1NEON\s0 instructions may lead ta a loss of precision.
.IP "\fB\-mfp16\-format=\fR\fIname\fR" 4
.IX Item "-mfp16-format=name"
Specify tha format of tha \f(CW\*(C`_\|_fp16\*(C'\fR half-precision floating-point type.
Permissible names is \fBnone\fR, \fBieee\fR, n' \fBalternative\fR;
the default is \fBnone\fR, up in which case tha \f(CW\*(C`_\|_fp16\*(C'\fR type is not
defined.
.IP "\fB\-mstructure\-size\-boundary=\fR\fIn\fR" 4
.IX Item "-mstructure-size-boundary=n"
Da sizez of all structures n' unions is rounded up ta a multiple
of tha number of bits set by dis option. I aint talkin' bout chicken n' gravy biatch.  Permissible joints is 8, 32
and 64.  Da default value varies fo' different toolchains.  For tha \s-1COFF\s0
targeted toolchain tha default value is 8.  A value of 64 is only allowed
if tha underlyin \s-1ABI\s0 supports dat shit.
.Sp
Specifyin a larger number can produce faster, mo' efficient code yo, but
can also increase tha size of tha program.  Different joints is potentially
incompatible.  Code compiled wit one value cannot necessarily expect to
work wit code or libraries compiled wit another value, if they exchange
information rockin structures or unions.
.IP "\fB\-mabort\-on\-noreturn\fR" 4
.IX Item "-mabort-on-noreturn"
Generate a cold-ass lil call ta tha function \f(CW\*(C`abort\*(C'\fR all up in tha end of a
\&\f(CW\*(C`noreturn\*(C'\fR function. I aint talkin' bout chicken n' gravy biatch.  It be executed if tha function tries to
return.
.IP "\fB\-mlong\-calls\fR" 4
.IX Item "-mlong-calls"
.PD 0
.IP "\fB\-mno\-long\-calls\fR" 4
.IX Item "-mno-long-calls"
.PD
Tells tha compila ta big-ass up function calls by first loadin the
address of tha function tha fuck into a regista n' then struttin a subroutine
call on dis regista n' shit.  This switch is needed if tha target function
lies outside of tha 64\-megabyte addressin range of tha offset-based
version of subroutine call instruction.
.Sp
Even if dis switch is enabled, not all function calls is turned
into long calls.  Da heuristic is dat static functions, functions
that have tha \fBshort-call\fR attribute, functions dat is inside
the scope of a \fB#pragma no_long_calls\fR directive, n' functions whose
definitions have already been compiled within tha current compilation
unit is not turned tha fuck into long calls.  Da exceptions ta dis rule are
that weak function definitions, functions wit tha \fBlong-call\fR
attribute or tha \fBsection\fR attribute, n' functions dat is within
the scope of a \fB#pragma long_calls\fR directizzle is always
turned tha fuck into long calls.
.Sp
This feature aint enabled by default.  Specifying
\&\fB\-mno\-long\-calls\fR restores tha default behavior, as do
placin tha function calls within tha scope of a \fB#pragma
long_calls_off\fR directive.  Note these switches have no effect on how
the compila generates code ta handle function calls via function
pointers.
.IP "\fB\-msingle\-pic\-base\fR" 4
.IX Item "-msingle-pic-base"
Treat tha regista used fo' \s-1PIC\s0 addressin as read-only, rather than
loadin it up in tha prologue fo' each function. I aint talkin' bout chicken n' gravy biatch.  Da runtime system is
responsible fo' initializin dis regista wit a appropriate value
before execution begins.
.IP "\fB\-mpic\-register=\fR\fIreg\fR" 4
.IX Item "-mpic-register=reg"
Specify tha regista ta be used fo' \s-1PIC\s0 addressing.
For standard \s-1PIC\s0 base case, tha default is ghon be any suitable register
determined by compila n' shit.  For single \s-1PIC\s0 base case, tha default is
\&\fBR9\fR if target is \s-1EABI\s0 based or stack-checkin is enabled,
otherwise tha default is \fBR10\fR.
.IP "\fB\-mpoke\-function\-name\fR" 4
.IX Item "-mpoke-function-name"
Write tha name of each function tha fuck into tha text section, directly
precedin tha function prologue.  Da generated code is similar ta this:
.Sp
.Vb 9
\&             t0
\&                 .ascii "arm_poke_function_name", 0
\&                 .align
\&             t1
\&                 .word 0xff000000 + (t1 \- t0)
\&             arm_poke_function_name
\&                 mov     ip, sp
\&                 stmfd   sp!, {fp, ip, lr, pc}
\&                 sub     fp, ip, #4
.Ve
.Sp
When struttin a stack backtrace, code can inspect tha value of
\&\f(CW\*(C`pc\*(C'\fR stored at \f(CW\*(C`fp + 0\*(C'\fR.  If tha trace function then looks at
location \f(CW\*(C`pc \- 12\*(C'\fR n' tha top 8 bits is set, then we know that
there be a gangbangin' function name embedded immediately precedin dis location
and has length \f(CW\*(C`((pc[\-3]) & 0xff000000)\*(C'\fR.
.IP "\fB\-mthumb\fR" 4
.IX Item "-mthumb"
.PD 0
.IP "\fB\-marm\fR" 4
.IX Item "-marm"
.PD
Select between generatin code dat executes up in \s-1ARM\s0 n' Thumb
states.  Da default fo' most configurations is ta generate code
that executes up in \s-1ARM\s0 state yo, but tha default can be chizzled by
configurin \s-1GCC\s0 wit tha \fB\-\-with\-mode=\fR\fIstate\fR
configure option.
.IP "\fB\-mtpcs\-frame\fR" 4
.IX Item "-mtpcs-frame"
Generate a stack frame dat is compliant wit tha Thumb Procedure Call
Standard fo' all non-leaf functions.  (A leaf function is one dat do
not call any other functions.)  Da default is \fB\-mno\-tpcs\-frame\fR.
.IP "\fB\-mtpcs\-leaf\-frame\fR" 4
.IX Item "-mtpcs-leaf-frame"
Generate a stack frame dat is compliant wit tha Thumb Procedure Call
Standard fo' all leaf functions.  (A leaf function is one dat do
not call any other functions.)  Da default is \fB\-mno\-apcs\-leaf\-frame\fR.
.IP "\fB\-mcallee\-super\-interworking\fR" 4
.IX Item "-mcallee-super-interworking"
Gives all externally visible functions up in tha file bein compiled a \s-1ARM\s0
instruction set header which switches ta Thumb mode before executin the
rest of tha function. I aint talkin' bout chicken n' gravy biatch.  This allows these functions ta be called from
non-interworkin code.  This option aint valid up in \s-1AAPCS\s0 configurations
because interworkin is enabled by default.
.IP "\fB\-mcaller\-super\-interworking\fR" 4
.IX Item "-mcaller-super-interworking"
Allows calls via function pointas (includin virtual functions) to
execute erectly regardless of whether tha target code has been
compiled fo' interworkin or not.  There be a lil' small-ass overhead up in tha cost
of executin a gangbangin' function pointa if dis option is enabled. Y'all KNOW dat shit, muthafucka!  This option
is not valid up in \s-1AAPCS\s0 configurations cuz interworkin is enabled
by default.
.IP "\fB\-mtp=\fR\fIname\fR" 4
.IX Item "-mtp=name"
Specify tha access model fo' tha thread local storage pointer n' shit.  Da valid
models is \fBsoft\fR, which generates calls ta \f(CW\*(C`_\|_aeabi_read_tp\*(C'\fR,
\&\fBcp15\fR, which fetches tha thread pointa from \f(CW\*(C`cp15\*(C'\fR directly
(supported up in tha arm6k architecture), n' \fBauto\fR, which uses the
best available method fo' tha selected processor. Shiiit, dis aint no joke.  Da default settin is
\&\fBauto\fR.
.IP "\fB\-mtls\-dialect=\fR\fIdialect\fR" 4
.IX Item "-mtls-dialect=dialect"
Specify tha dialect ta use fo' accessin thread local storage.  Two
\&\fIdialect\fRs is supported\-\-\-\fBgnu\fR n' \fBgnu2\fR.  The
\&\fBgnu\fR dialect selects tha original gangsta \s-1GNU\s0 scheme fo' supporting
local n' global dynamic \s-1TLS\s0 models.  Da \fBgnu2\fR dialect
selects tha \s-1GNU\s0 descriptor scheme, which serves up betta performance
for shared libraries. Put ya muthafuckin choppers up if ya feel dis!  Da \s-1GNU\s0 descriptor scheme is compatible with
the original gangsta scheme yo, but do require freshly smoked up assembler, linker and
library support.  Initial n' local exec \s-1TLS\s0 models is unaffected by
this option n' always use tha original gangsta scheme.
.IP "\fB\-mword\-relocations\fR" 4
.IX Item "-mword-relocations"
Only generate absolute relocations on word-sized joints (i.e. R_ARM_ABS32).
This is enabled by default on targets (uClinux, SymbianOS) where tha runtime
loader imposes dis restriction, n' when \fB\-fpic\fR or \fB\-fPIC\fR
is specified.
.IP "\fB\-mfix\-cortex\-m3\-ldrd\fR" 4
.IX Item "-mfix-cortex-m3-ldrd"
Some Cortex\-M3 cores can cause data corruption when \f(CW\*(C`ldrd\*(C'\fR instructions
with overlappin destination n' base registas is used. Y'all KNOW dat shit, muthafucka!  This option avoids
generatin these instructions.  This option is enabled by default when
\&\fB\-mcpu=cortex\-m3\fR is specified.
.IP "\fB\-munaligned\-access\fR" 4
.IX Item "-munaligned-access"
.PD 0
.IP "\fB\-mno\-unaligned\-access\fR" 4
.IX Item "-mno-unaligned-access"
.PD
Enablez (or disables) readin n' freestylin of 16\- n' 32\- bit joints
from addresses dat is not 16\- or 32\- bit aligned. Y'all KNOW dat shit, muthafucka!  By default
unaligned access is disabled fo' all pre\-ARMv6 n' all ARMv6\-M
architectures, n' enabled fo' all other architectures.  If unaligned
access aint enabled then lyrics up in packed data structures will be
accessed a funky-ass byte at a time.
.Sp
Da \s-1ARM\s0 attribute \f(CW\*(C`Tag_CPU_unaligned_access\*(C'\fR is ghon be set up in the
generated object file ta either legit or false, dependin upon the
settin of dis option. I aint talkin' bout chicken n' gravy biatch.  If unaligned access is enabled then the
preprocessor symbol \f(CW\*(C`_\|_ARM_FEATURE_UNALIGNED\*(C'\fR will also be
defined.
.SS "\s-1AVR\s0 Options"
.IX Subsection "AVR Options"
These options is defined fo' \s-1AVR\s0 implementations:
.IP "\fB\-mmcu=\fR\fImcu\fR" 4
.IX Item "-mmcu=mcu"
Specify Atmel \s-1AVR\s0 instruction set architectures (\s-1ISA\s0) or \s-1MCU\s0 type.
.Sp
Da default fo' dis option is@tie{}\f(CW\*(C`avr2\*(C'\fR.
.Sp
\&\s-1GCC\s0 supports tha followin \s-1AVR\s0 devices n' ISAs:
.RS 4
.ie n .IP """avr2""" 4
.el .IP "\f(CWavr2\fR" 4
.IX Item "avr2"
\&\*(L"Classic\*(R" devices wit up ta 8@tie{}KiB of program memory.
\&\fImcu\fR\f(CW@tie\fR{}= \f(CW\*(C`attiny22\*(C'\fR, \f(CW\*(C`attiny26\*(C'\fR, \f(CW\*(C`at90c8534\*(C'\fR, \f(CW\*(C`at90s2313\*(C'\fR, \f(CW\*(C`at90s2323\*(C'\fR, \f(CW\*(C`at90s2333\*(C'\fR, \f(CW\*(C`at90s2343\*(C'\fR, \f(CW\*(C`at90s4414\*(C'\fR, \f(CW\*(C`at90s4433\*(C'\fR, \f(CW\*(C`at90s4434\*(C'\fR, \f(CW\*(C`at90s8515\*(C'\fR, \f(CW\*(C`at90s8535\*(C'\fR.
.ie n .IP """avr25""" 4
.el .IP "\f(CWavr25\fR" 4
.IX Item "avr25"
\&\*(L"Classic\*(R" devices wit up ta 8@tie{}KiB of program memory n' wit tha \f(CW\*(C`MOVW\*(C'\fR instruction.
\&\fImcu\fR\f(CW@tie\fR{}= \f(CW\*(C`ata5272\*(C'\fR, \f(CW\*(C`ata6289\*(C'\fR, \f(CW\*(C`attiny13\*(C'\fR, \f(CW\*(C`attiny13a\*(C'\fR, \f(CW\*(C`attiny2313\*(C'\fR, \f(CW\*(C`attiny2313a\*(C'\fR, \f(CW\*(C`attiny24\*(C'\fR, \f(CW\*(C`attiny24a\*(C'\fR, \f(CW\*(C`attiny25\*(C'\fR, \f(CW\*(C`attiny261\*(C'\fR, \f(CW\*(C`attiny261a\*(C'\fR, \f(CW\*(C`attiny43u\*(C'\fR, \f(CW\*(C`attiny4313\*(C'\fR, \f(CW\*(C`attiny44\*(C'\fR, \f(CW\*(C`attiny44a\*(C'\fR, \f(CW\*(C`attiny45\*(C'\fR, \f(CW\*(C`attiny461\*(C'\fR, \f(CW\*(C`attiny461a\*(C'\fR, \f(CW\*(C`attiny48\*(C'\fR, \f(CW\*(C`attiny84\*(C'\fR, \f(CW\*(C`attiny84a\*(C'\fR, \f(CW\*(C`attiny85\*(C'\fR, \f(CW\*(C`attiny861\*(C'\fR, \f(CW\*(C`attiny861a\*(C'\fR, \f(CW\*(C`attiny87\*(C'\fR, \f(CW\*(C`attiny88\*(C'\fR, \f(CW\*(C`at86rf401\*(C'\fR.
.ie n .IP """avr3""" 4
.el .IP "\f(CWavr3\fR" 4
.IX Item "avr3"
\&\*(L"Classic\*(R" devices wit 16@tie{}KiB up ta 64@tie{}KiB of  program memory.
\&\fImcu\fR\f(CW@tie\fR{}= \f(CW\*(C`at43usb355\*(C'\fR, \f(CW\*(C`at76c711\*(C'\fR.
.ie n .IP """avr31""" 4
.el .IP "\f(CWavr31\fR" 4
.IX Item "avr31"
\&\*(L"Classic\*(R" devices wit 128@tie{}KiB of program memory.
\&\fImcu\fR\f(CW@tie\fR{}= \f(CW\*(C`atmega103\*(C'\fR, \f(CW\*(C`at43usb320\*(C'\fR.
.ie n .IP """avr35""" 4
.el .IP "\f(CWavr35\fR" 4
.IX Item "avr35"
\&\*(L"Classic\*(R" devices wit 16@tie{}KiB up ta 64@tie{}KiB of program memory n' wit tha \f(CW\*(C`MOVW\*(C'\fR instruction.
\&\fImcu\fR\f(CW@tie\fR{}= \f(CW\*(C`ata5505\*(C'\fR, \f(CW\*(C`atmega16u2\*(C'\fR, \f(CW\*(C`atmega32u2\*(C'\fR, \f(CW\*(C`atmega8u2\*(C'\fR, \f(CW\*(C`attiny1634\*(C'\fR, \f(CW\*(C`attiny167\*(C'\fR, \f(CW\*(C`at90usb162\*(C'\fR, \f(CW\*(C`at90usb82\*(C'\fR.
.ie n .IP """avr4""" 4
.el .IP "\f(CWavr4\fR" 4
.IX Item "avr4"
\&\*(L"Enhanced\*(R" devices wit up ta 8@tie{}KiB of program memory.
\&\fImcu\fR\f(CW@tie\fR{}= \f(CW\*(C`ata6285\*(C'\fR, \f(CW\*(C`ata6286\*(C'\fR, \f(CW\*(C`atmega48\*(C'\fR, \f(CW\*(C`atmega48a\*(C'\fR, \f(CW\*(C`atmega48p\*(C'\fR, \f(CW\*(C`atmega48pa\*(C'\fR, \f(CW\*(C`atmega8\*(C'\fR, \f(CW\*(C`atmega8a\*(C'\fR, \f(CW\*(C`atmega8hva\*(C'\fR, \f(CW\*(C`atmega8515\*(C'\fR, \f(CW\*(C`atmega8535\*(C'\fR, \f(CW\*(C`atmega88\*(C'\fR, \f(CW\*(C`atmega88a\*(C'\fR, \f(CW\*(C`atmega88p\*(C'\fR, \f(CW\*(C`atmega88pa\*(C'\fR, \f(CW\*(C`at90pwm1\*(C'\fR, \f(CW\*(C`at90pwm2\*(C'\fR, \f(CW\*(C`at90pwm2b\*(C'\fR, \f(CW\*(C`at90pwm3\*(C'\fR, \f(CW\*(C`at90pwm3b\*(C'\fR, \f(CW\*(C`at90pwm81\*(C'\fR.
.ie n .IP """avr5""" 4
.el .IP "\f(CWavr5\fR" 4
.IX Item "avr5"
\&\*(L"Enhanced\*(R" devices wit 16@tie{}KiB up ta 64@tie{}KiB of program memory.
\&\fImcu\fR\f(CW@tie\fR{}= \f(CW\*(C`ata5790\*(C'\fR, \f(CW\*(C`ata5790n\*(C'\fR, \f(CW\*(C`ata5795\*(C'\fR, \f(CW\*(C`atmega16\*(C'\fR, \f(CW\*(C`atmega16a\*(C'\fR, \f(CW\*(C`atmega16hva\*(C'\fR, \f(CW\*(C`atmega16hva2\*(C'\fR, \f(CW\*(C`atmega16hvb\*(C'\fR, \f(CW\*(C`atmega16hvbrevb\*(C'\fR, \f(CW\*(C`atmega16m1\*(C'\fR, \f(CW\*(C`atmega16u4\*(C'\fR, \f(CW\*(C`atmega161\*(C'\fR, \f(CW\*(C`atmega162\*(C'\fR, \f(CW\*(C`atmega163\*(C'\fR, \f(CW\*(C`atmega164a\*(C'\fR, \f(CW\*(C`atmega164p\*(C'\fR, \f(CW\*(C`atmega164pa\*(C'\fR, \f(CW\*(C`atmega165\*(C'\fR, \f(CW\*(C`atmega165a\*(C'\fR, \f(CW\*(C`atmega165p\*(C'\fR, \f(CW\*(C`atmega165pa\*(C'\fR, \f(CW\*(C`atmega168\*(C'\fR, \f(CW\*(C`atmega168a\*(C'\fR, \f(CW\*(C`atmega168p\*(C'\fR, \f(CW\*(C`atmega168pa\*(C'\fR, \f(CW\*(C`atmega169\*(C'\fR, \f(CW\*(C`atmega169a\*(C'\fR, \f(CW\*(C`atmega169p\*(C'\fR, \f(CW\*(C`atmega169pa\*(C'\fR, \f(CW\*(C`atmega26hvg\*(C'\fR, \f(CW\*(C`atmega32\*(C'\fR, \f(CW\*(C`atmega32a\*(C'\fR, \f(CW\*(C`atmega32c1\*(C'\fR, \f(CW\*(C`atmega32hvb\*(C'\fR, \f(CW\*(C`atmega32hvbrevb\*(C'\fR, \f(CW\*(C`atmega32m1\*(C'\fR, \f(CW\*(C`atmega32u4\*(C'\fR, \f(CW\*(C`atmega32u6\*(C'\fR, \f(CW\*(C`atmega323\*(C'\fR, \f(CW\*(C`atmega324a\*(C'\fR, \f(CW\*(C`atmega324p\*(C'\fR, \f(CW\*(C`atmega324pa\*(C'\fR, \f(CW\*(C`atmega325\*(C'\fR, \f(CW\*(C`atmega325a\*(C'\fR, \f(CW\*(C`atmega325p\*(C'\fR, \f(CW\*(C`atmega3250\*(C'\fR, \f(CW\*(C`atmega3250a\*(C'\fR, \f(CW\*(C`atmega3250p\*(C'\fR, \f(CW\*(C`atmega3250pa\*(C'\fR, \f(CW\*(C`atmega328\*(C'\fR, \f(CW\*(C`atmega328p\*(C'\fR, \f(CW\*(C`atmega329\*(C'\fR, \f(CW\*(C`atmega329a\*(C'\fR, \f(CW\*(C`atmega329p\*(C'\fR, \f(CW\*(C`atmega329pa\*(C'\fR, \f(CW\*(C`atmega3290\*(C'\fR, \f(CW\*(C`atmega3290a\*(C'\fR, \f(CW\*(C`atmega3290p\*(C'\fR, \f(CW\*(C`atmega3290pa\*(C'\fR, \f(CW\*(C`atmega406\*(C'\fR, \f(CW\*(C`atmega48hvf\*(C'\fR, \f(CW\*(C`atmega64\*(C'\fR, \f(CW\*(C`atmega64a\*(C'\fR, \f(CW\*(C`atmega64c1\*(C'\fR, \f(CW\*(C`atmega64hve\*(C'\fR, \f(CW\*(C`atmega64m1\*(C'\fR, \f(CW\*(C`atmega64rfa2\*(C'\fR, \f(CW\*(C`atmega64rfr2\*(C'\fR, \f(CW\*(C`atmega640\*(C'\fR, \f(CW\*(C`atmega644\*(C'\fR, \f(CW\*(C`atmega644a\*(C'\fR, \f(CW\*(C`atmega644p\*(C'\fR, \f(CW\*(C`atmega644pa\*(C'\fR, \f(CW\*(C`atmega645\*(C'\fR, \f(CW\*(C`atmega645a\*(C'\fR, \f(CW\*(C`atmega645p\*(C'\fR, \f(CW\*(C`atmega6450\*(C'\fR, \f(CW\*(C`atmega6450a\*(C'\fR, \f(CW\*(C`atmega6450p\*(C'\fR, \f(CW\*(C`atmega649\*(C'\fR, \f(CW\*(C`atmega649a\*(C'\fR, \f(CW\*(C`atmega649p\*(C'\fR, \f(CW\*(C`atmega6490\*(C'\fR, \f(CW\*(C`atmega6490a\*(C'\fR, \f(CW\*(C`atmega6490p\*(C'\fR, \f(CW\*(C`at90can32\*(C'\fR, \f(CW\*(C`at90can64\*(C'\fR, \f(CW\*(C`at90pwm161\*(C'\fR, \f(CW\*(C`at90pwm216\*(C'\fR, \f(CW\*(C`at90pwm316\*(C'\fR, \f(CW\*(C`at90scr100\*(C'\fR, \f(CW\*(C`at90usb646\*(C'\fR, \f(CW\*(C`at90usb647\*(C'\fR, \f(CW\*(C`at94k\*(C'\fR, \f(CW\*(C`m3000\*(C'\fR.
.ie n .IP """avr51""" 4
.el .IP "\f(CWavr51\fR" 4
.IX Item "avr51"
\&\*(L"Enhanced\*(R" devices wit 128@tie{}KiB of program memory.
\&\fImcu\fR\f(CW@tie\fR{}= \f(CW\*(C`atmega128\*(C'\fR, \f(CW\*(C`atmega128a\*(C'\fR, \f(CW\*(C`atmega128rfa1\*(C'\fR, \f(CW\*(C`atmega1280\*(C'\fR, \f(CW\*(C`atmega1281\*(C'\fR, \f(CW\*(C`atmega1284\*(C'\fR, \f(CW\*(C`atmega1284p\*(C'\fR, \f(CW\*(C`at90can128\*(C'\fR, \f(CW\*(C`at90usb1286\*(C'\fR, \f(CW\*(C`at90usb1287\*(C'\fR.
.ie n .IP """avr6""" 4
.el .IP "\f(CWavr6\fR" 4
.IX Item "avr6"
\&\*(L"Enhanced\*(R" devices wit 3\-byte \s-1PC,\s0 i.e. wit mo' than 128@tie{}KiB of program memory.
\&\fImcu\fR\f(CW@tie\fR{}= \f(CW\*(C`atmega2560\*(C'\fR, \f(CW\*(C`atmega2561\*(C'\fR.
.ie n .IP """avrxmega2""" 4
.el .IP "\f(CWavrxmega2\fR" 4
.IX Item "avrxmega2"
\&\*(L"\s-1XMEGA\*(R"\s0 devices wit mo' than 8@tie{}KiB n' up ta 64@tie{}KiB of program memory.
\&\fImcu\fR\f(CW@tie\fR{}= \f(CW\*(C`atmxt112sl\*(C'\fR, \f(CW\*(C`atmxt224\*(C'\fR, \f(CW\*(C`atmxt224e\*(C'\fR, \f(CW\*(C`atmxt336s\*(C'\fR, \f(CW\*(C`atxmega16a4\*(C'\fR, \f(CW\*(C`atxmega16a4u\*(C'\fR, \f(CW\*(C`atxmega16c4\*(C'\fR, \f(CW\*(C`atxmega16d4\*(C'\fR, \f(CW\*(C`atxmega16x1\*(C'\fR, \f(CW\*(C`atxmega32a4\*(C'\fR, \f(CW\*(C`atxmega32a4u\*(C'\fR, \f(CW\*(C`atxmega32c4\*(C'\fR, \f(CW\*(C`atxmega32d4\*(C'\fR, \f(CW\*(C`atxmega32e5\*(C'\fR, \f(CW\*(C`atxmega32x1\*(C'\fR.
.ie n .IP """avrxmega4""" 4
.el .IP "\f(CWavrxmega4\fR" 4
.IX Item "avrxmega4"
\&\*(L"\s-1XMEGA\*(R"\s0 devices wit mo' than 64@tie{}KiB n' up ta 128@tie{}KiB of program memory.
\&\fImcu\fR\f(CW@tie\fR{}= \f(CW\*(C`atxmega64a3\*(C'\fR, \f(CW\*(C`atxmega64a3u\*(C'\fR, \f(CW\*(C`atxmega64a4u\*(C'\fR, \f(CW\*(C`atxmega64b1\*(C'\fR, \f(CW\*(C`atxmega64b3\*(C'\fR, \f(CW\*(C`atxmega64c3\*(C'\fR, \f(CW\*(C`atxmega64d3\*(C'\fR, \f(CW\*(C`atxmega64d4\*(C'\fR.
.ie n .IP """avrxmega5""" 4
.el .IP "\f(CWavrxmega5\fR" 4
.IX Item "avrxmega5"
\&\*(L"\s-1XMEGA\*(R"\s0 devices wit mo' than 64@tie{}KiB n' up ta 128@tie{}KiB of program memory n' mo' than 64@tie{}KiB of \s-1RAM.
\&\s0\fImcu\fR\f(CW@tie\fR{}= \f(CW\*(C`atxmega64a1\*(C'\fR, \f(CW\*(C`atxmega64a1u\*(C'\fR.
.ie n .IP """avrxmega6""" 4
.el .IP "\f(CWavrxmega6\fR" 4
.IX Item "avrxmega6"
\&\*(L"\s-1XMEGA\*(R"\s0 devices wit mo' than 128@tie{}KiB of program memory.
\&\fImcu\fR\f(CW@tie\fR{}= \f(CW\*(C`atmxt540s\*(C'\fR, \f(CW\*(C`atmxt540sreva\*(C'\fR, \f(CW\*(C`atxmega128a3\*(C'\fR, \f(CW\*(C`atxmega128a3u\*(C'\fR, \f(CW\*(C`atxmega128b1\*(C'\fR, \f(CW\*(C`atxmega128b3\*(C'\fR, \f(CW\*(C`atxmega128c3\*(C'\fR, \f(CW\*(C`atxmega128d3\*(C'\fR, \f(CW\*(C`atxmega128d4\*(C'\fR, \f(CW\*(C`atxmega192a3\*(C'\fR, \f(CW\*(C`atxmega192a3u\*(C'\fR, \f(CW\*(C`atxmega192c3\*(C'\fR, \f(CW\*(C`atxmega192d3\*(C'\fR, \f(CW\*(C`atxmega256a3\*(C'\fR, \f(CW\*(C`atxmega256a3b\*(C'\fR, \f(CW\*(C`atxmega256a3bu\*(C'\fR, \f(CW\*(C`atxmega256a3u\*(C'\fR, \f(CW\*(C`atxmega256c3\*(C'\fR, \f(CW\*(C`atxmega256d3\*(C'\fR, \f(CW\*(C`atxmega384c3\*(C'\fR, \f(CW\*(C`atxmega384d3\*(C'\fR.
.ie n .IP """avrxmega7""" 4
.el .IP "\f(CWavrxmega7\fR" 4
.IX Item "avrxmega7"
\&\*(L"\s-1XMEGA\*(R"\s0 devices wit mo' than 128@tie{}KiB of program memory n' mo' than 64@tie{}KiB of \s-1RAM.
\&\s0\fImcu\fR\f(CW@tie\fR{}= \f(CW\*(C`atxmega128a1\*(C'\fR, \f(CW\*(C`atxmega128a1u\*(C'\fR, \f(CW\*(C`atxmega128a4u\*(C'\fR.
.ie n .IP """avr1""" 4
.el .IP "\f(CWavr1\fR" 4
.IX Item "avr1"
This \s-1ISA\s0 is implemented by tha minimal \s-1AVR\s0 core n' supported fo' assembla only.
\&\fImcu\fR\f(CW@tie\fR{}= \f(CW\*(C`attiny11\*(C'\fR, \f(CW\*(C`attiny12\*(C'\fR, \f(CW\*(C`attiny15\*(C'\fR, \f(CW\*(C`attiny28\*(C'\fR, \f(CW\*(C`at90s1200\*(C'\fR.
.RE
.RS 4
.RE
.IP "\fB\-maccumulate\-args\fR" 4
.IX Item "-maccumulate-args"
Accumulate outgoin function arguments n' acquire/release tha needed
stack space fo' outgoin function arguments once up in function
prologue/epilogue.  Without dis option, outgoin arguments is pushed
before callin a gangbangin' function n' popped afterwards.
.Sp
Poppin tha arguments afta tha function call can be high-rollin' on
\&\s-1AVR\s0 so dat accumulatin tha stack space might lead ta smaller
executablez cuz arguments need not ta be removed from the
stack afta such a gangbangin' function call.
.Sp
This option can lead ta reduced code size fo' functions dat perform
several calls ta functions dat git they arguments on tha stack like
calls ta printf-like functions.
.IP "\fB\-mbranch\-cost=\fR\fIcost\fR" 4
.IX Item "-mbranch-cost=cost"
Set tha branch costs fo' conditionizzle branch instructions to
\&\fIcost\fR.  Reasonable joints fo' \fIcost\fR is small, non-negative
integers. Da default branch cost is 0.
.IP "\fB\-mcall\-prologues\fR" 4
.IX Item "-mcall-prologues"
Functions prologues/epilogues is expanded as calls ta appropriate
subroutines.  Code size is smaller.
.IP "\fB\-mint8\fR" 4
.IX Item "-mint8"
Assume \f(CW\*(C`int\*(C'\fR ta be 8\-bit integer n' shit.  This affects tha sizez of all types: a
\&\f(CW\*(C`char\*(C'\fR is 1 byte, a \f(CW\*(C`int\*(C'\fR is 1 byte, a \f(CW\*(C`long\*(C'\fR is 2 bytes,
and \f(CW\*(C`long long\*(C'\fR is 4 bytes.  Please note dat dis option do not
conform ta tha C standardz yo, but it thangs up in dis biatch up in smalla code
size.
.IP "\fB\-mno\-interrupts\fR" 4
.IX Item "-mno-interrupts"
Generated code aint compatible wit hardware interrupts.
Code size is smaller.
.IP "\fB\-mrelax\fR" 4
.IX Item "-mrelax"
Try ta replace \f(CW\*(C`CALL\*(C'\fR resp. \f(CW\*(C`JMP\*(C'\fR instruction by tha shorter
\&\f(CW\*(C`RCALL\*(C'\fR resp. \f(CW\*(C`RJMP\*(C'\fR instruction if applicable.
Settin \f(CW\*(C`\-mrelax\*(C'\fR just addz tha \f(CW\*(C`\-\-relax\*(C'\fR option ta the
linker command line when tha linker is called.
.Sp
Jump chillaxin is performed by tha linker cuz jump offsets is not
known before code is located. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Therefore, tha assembla code generated by the
compila is tha same yo, but tha instructions up in tha executable may
differ from instructions up in tha assembla code.
.Sp
Relaxin must be turned on if linker stubs is needed, peep the
section on \f(CW\*(C`EIND\*(C'\fR n' linker stubs below.
.IP "\fB\-msp8\fR" 4
.IX Item "-msp8"
Treat tha stack pointa regista as a 8\-bit register,
i.e. assume tha high byte of tha stack pointa is zero.
In general, you don't need ta set dis option by hand.
.Sp
This option is used internally by tha compila ta select and
build multilibs fo' architectures \f(CW\*(C`avr2\*(C'\fR n' \f(CW\*(C`avr25\*(C'\fR.
These architectures mix devices wit n' without \f(CW\*(C`SPH\*(C'\fR.
For any settin other than \f(CW\*(C`\-mmcu=avr2\*(C'\fR or \f(CW\*(C`\-mmcu=avr25\*(C'\fR
the compila driver will add or remove dis option from tha compiler
properz command line, cuz tha compila then knows if tha device
or architecture has a 8\-bit stack pointa n' thus no \f(CW\*(C`SPH\*(C'\fR
regista or not.
.IP "\fB\-mstrict\-X\fR" 4
.IX Item "-mstrict-X"
Use address regista \f(CW\*(C`X\*(C'\fR up in a way proposed by tha hardware.  This means
that \f(CW\*(C`X\*(C'\fR is only used up in indirect, post-increment or
pre-decrement addressing.
.Sp
Without dis option, tha \f(CW\*(C`X\*(C'\fR regista may be used up in tha same way
as \f(CW\*(C`Y\*(C'\fR or \f(CW\*(C`Z\*(C'\fR which then is emulated by additional
instructions.  
For example, loadin a value wit \f(CW\*(C`X+const\*(C'\fR addressin wit a
small non-negatizzle \f(CW\*(C`const < 64\*(C'\fR ta a regista \fIRn\fR is
performed as
.Sp
.Vb 3
\&        adiw r26, const   ; X += const
\&        ld   <Rn>, X        ; <Rn> = *X
\&        sbiw r26, const   ; X \-= const
.Ve
.IP "\fB\-mtiny\-stack\fR" 4
.IX Item "-mtiny-stack"
Only chizzle tha lower 8@tie{}bitz of tha stack pointer.
.IP "\fB\-Waddr\-space\-convert\fR" 4
.IX Item "-Waddr-space-convert"
Warn bout conversions between address spaces up in tha case where the
resultin address space aint contained up in tha incomin address space.
.PP
\f(CW\*(C`EIND\*(C'\fR n' Devices wit mo' than 128 Ki Bytez of Flash
.IX Subsection "EIND n' Devices wit mo' than 128 Ki Bytez of Flash"
.PP
Pointas up in tha implementation is 16@tie{}bits wide.
Da address of a gangbangin' function or label is represented as word address so
that indirect jumps n' calls can target any code address up in the
range of 64@tie{}Ki lyrics.
.PP
In order ta facilitate indirect jump on devices wit mo' than 128@tie{}Ki
bytez of program memory space, there be a special function regista called
\&\f(CW\*(C`EIND\*(C'\fR dat serves as most dope part of tha target address
when \f(CW\*(C`EICALL\*(C'\fR or \f(CW\*(C`EIJMP\*(C'\fR instructions is used.
.PP
Indirect jumps n' calls on these devices is handled as bigs up by
the compila n' is subject ta some limitations:
.IP "\(bu" 4
Da compila never sets \f(CW\*(C`EIND\*(C'\fR.
.IP "\(bu" 4
Da compila uses \f(CW\*(C`EIND\*(C'\fR implicitely up in \f(CW\*(C`EICALL\*(C'\fR/\f(CW\*(C`EIJMP\*(C'\fR
instructions or might read \f(CW\*(C`EIND\*(C'\fR directly up in order ta emulate an
indirect call/jump by meanz of a \f(CW\*(C`RET\*(C'\fR instruction.
.IP "\(bu" 4
Da compila assumes dat \f(CW\*(C`EIND\*(C'\fR never chizzlez durin tha startup
code or durin tha application. I aint talkin' bout chicken n' gravy biatch. In particular, \f(CW\*(C`EIND\*(C'\fR is not
saved/restored up in function or interrupt steez routine
prologue/epilogue.
.IP "\(bu" 4
For indirect calls ta functions n' computed goto, tha linker
generates \fIstubs\fR. Right back up in yo muthafuckin ass. Stubs is jump padz sometimes also called
\&\fItrampolines\fR. Thus, tha indirect call/jump jumps ta such a stub.
Da stub gotz nuff a gangbangin' finger-lickin' direct jump ta tha desired address.
.IP "\(bu" 4
Linker chillaxation must be turned on so dat tha linker will generate
the stubs erectly a all situaltion. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See tha compila option
\&\f(CW\*(C`\-mrelax\*(C'\fR n' tha linla option \f(CW\*(C`\-\-relax\*(C'\fR.
There is corner cases where tha linker is supposed ta generate stubs
but aborts without chillaxation n' without a helpful error message.
.IP "\(bu" 4
Da default linker script be arranged fo' code wit \f(CW\*(C`EIND = 0\*(C'\fR.
If code is supposed ta work fo' a setup wit \f(CW\*(C`EIND != 0\*(C'\fR, a cold-ass lil custom
linker script has ta be used up in order ta place tha sections whose
name start wit \f(CW\*(C`.trampolines\*(C'\fR tha fuck into tha segment where \f(CW\*(C`EIND\*(C'\fR
points to.
.IP "\(bu" 4
Da startup code from libgcc never sets \f(CW\*(C`EIND\*(C'\fR.
Notice dat startup code be a funky-ass blend of code from libgcc n' AVR-LibC.
For tha impact of AVR-LibC on \f(CW\*(C`EIND\*(C'\fR, peep the
AVR-LibC\ user\ manual (\f(CW\*(C`http://nongnu.org/avr\-libc/user\-manual/\*(C'\fR).
.IP "\(bu" 4
It be legitimate fo' user-specific startup code ta set up \f(CW\*(C`EIND\*(C'\fR
early, fo' example by meanz of initialization code located in
section \f(CW\*(C`.init3\*(C'\fR. Right back up in yo muthafuckin ass. Such code runs prior ta general startup code
that initializes \s-1RAM\s0 n' calls constructors yo, but afta tha bit
of startup code from AVR-LibC dat sets \f(CW\*(C`EIND\*(C'\fR ta tha segment
where tha vector table is located.
.Sp
.Vb 1
\&        #include <avr/io.h>
\&        
\&        static void
\&        _\|_attribute_\|_((section(".init3"),naked,used,no_instrument_function))
\&        init3_set_eind (void)
\&        {
\&          _\|_azzle volatile ("ldi r24,pm_hh8(_\|_trampolines_start)\en\et"
\&                          "out %i0,r24" :: "n" (&EIND) : "r24","memory");
\&        }
.Ve
.Sp
Da \f(CW\*(C`_\|_trampolines_start\*(C'\fR symbol is defined up in tha linker script.
.IP "\(bu" 4
Stubs is generated automatically by tha linker if
the followin two conditions is met:
.RS 4
.ie n .IP "\-<Da address of a label is taken by meanz of tha ""gs"" modifier>" 4
.el .IP "\-<Da address of a label is taken by meanz of tha \f(CWgs\fR modifier>" 4
.IX Item "-<Da address of a label is taken by meanz of tha gs modifier>"
(short fo' \fIgenerate stubs\fR) like so:
.Sp
.Vb 2
\&        LDI r24, lo8(gs(<func>))
\&        LDI r25, hi8(gs(<func>))
.Ve
.IP "\-<Da final location of dat label is up in a cold-ass lil code segment>" 4
.IX Item "-<Da final location of dat label is up in a cold-ass lil code segment>"
\&\fIoutside\fR tha segment where tha stubs is located.
.RE
.RS 4
.RE
.IP "\(bu" 4
Da compila emits such \f(CW\*(C`gs\*(C'\fR modifiers fo' code labels up in the
followin thangs:
.RS 4
.IP "\-<Takin address of a gangbangin' function or code label.>" 4
.IX Item "-<Takin address of a gangbangin' function or code label.>"
.PD 0
.IP "\-<Computed goto.>" 4
.IX Item "-<Computed goto.>"
.IP "\-<If prologue-save function is used, peep \fB\-mcall\-prologues\fR>" 4
.IX Item "-<If prologue-save function is used, peep -mcall-prologues>"
.PD
command-line option.
.IP "\-<Switch/case dispatch tables. If you do not want such dispatch>" 4
.IX Item "-<Switch/case dispatch tables. If you do not want such dispatch>"
tablez you can specify tha \fB\-fno\-jump\-tables\fR command-line option.
.IP "\-<C n' \*(C+ constructors/destructors called durin startup/shutdown.>" 4
.IX Item "-<C n' constructors/destructors called durin startup/shutdown.>"
.PD 0
.ie n .IP "\-<If tha tools hit a ""gs()"" modifier explained above.>" 4
.el .IP "\-<If tha tools hit a \f(CWgs()\fR modifier explained above.>" 4
.IX Item "-<If tha tools hit a gs() modifier explained above.>"
.RE
.RS 4
.RE
.IP "\(bu" 4
.PD
Jumpin ta non-symbolic addresses like so is \fInot\fR supported:
.Sp
.Vb 5
\&        int main (void)
\&        {
\&            /* Call function at word address 0x2 */
\&            return ((int(*)(void)) 0x2)();
\&        }
.Ve
.Sp
Instead, a stub has ta be set up, i.e. tha function has ta be called
all up in a symbol (\f(CW\*(C`func_4\*(C'\fR up in tha example):
.Sp
.Vb 3
\&        int main (void)
\&        {
\&            extern int func_4 (void);
\&        
\&            /* Call function at byte address 0x4 */
\&            return func_4();
\&        }
.Ve
.Sp
and tha application be linked wit \f(CW\*(C`\-Wl,\-\-defsym,func_4=0x4\*(C'\fR.
Alternatively, \f(CW\*(C`func_4\*(C'\fR can be defined up in tha linker script.
.PP
Handlin of tha \f(CW\*(C`RAMPD\*(C'\fR, \f(CW\*(C`RAMPX\*(C'\fR, \f(CW\*(C`RAMPY\*(C'\fR n' \f(CW\*(C`RAMPZ\*(C'\fR Special Function Registers
.IX Subsection "Handlin of tha RAMPD, RAMPX, RAMPY n' RAMPZ Special Function Registers"
.PP
Some \s-1AVR\s0 devices support memories larger than tha 64@tie{}KiB range
that can be accessed wit 16\-bit pointers.  To access memory locations
outside dis 64@tie{}KiB range, tha contentent of a \f(CW\*(C`RAMP\*(C'\fR
regista is used as high part of tha address:
Da \f(CW\*(C`X\*(C'\fR, \f(CW\*(C`Y\*(C'\fR, \f(CW\*(C`Z\*(C'\fR address regista is concatenated
with tha \f(CW\*(C`RAMPX\*(C'\fR, \f(CW\*(C`RAMPY\*(C'\fR, \f(CW\*(C`RAMPZ\*(C'\fR special function
register, respectively, ta git a wide address. Right back up in yo muthafuckin ass. Similarly,
\&\f(CW\*(C`RAMPD\*(C'\fR is used together wit direct addressing.
.IP "\(bu" 4
Da startup code initializes tha \f(CW\*(C`RAMP\*(C'\fR special function
registas wit zero.
.IP "\(bu" 4
If a \fB\s-1AVR\s0 Named Address Spaces,named address space\fR other than
generic or \f(CW\*(C`_\|_flash\*(C'\fR is used, then \f(CW\*(C`RAMPZ\*(C'\fR is set
as needed before tha operation.
.IP "\(bu" 4
If tha thang supports \s-1RAM\s0 larger than 64@tie{KiB} n' tha compiler
needz ta chizzle \f(CW\*(C`RAMPZ\*(C'\fR ta accomplish a operation, \f(CW\*(C`RAMPZ\*(C'\fR
is reset ta zero afta tha operation.
.IP "\(bu" 4
If tha thang comes wit a specific \f(CW\*(C`RAMP\*(C'\fR register, tha \s-1ISR\s0
prologue/epilogue saves/restores dat \s-1SFR\s0 n' initializes it with
zero up in case tha \s-1ISR\s0 code might (implicitly) use dat shit.
.IP "\(bu" 4
\&\s-1RAM\s0 larger than 64@tie{KiB} aint supported by \s-1GCC\s0 fo' \s-1AVR\s0 targets.
If you use inline assembla ta read from locations outside the
16\-bit address range n' chizzle one of tha \f(CW\*(C`RAMP\*(C'\fR registers,
you must reset it ta zero afta tha access.
.PP
\s-1AVR\s0 Built-in Macros
.IX Subsection "AVR Built-in Macros"
.PP
\&\s-1GCC\s0 defines nuff muthafuckin built-in macros so dat tha user code can test
for tha presence or absence of features.  Almost any of tha following
built-in macros is deduced from thang capabilitizzles n' thus
triggered by tha \f(CW\*(C`\-mmcu=\*(C'\fR command-line option.
.PP
For even mo' AVR-specific built-in macros see
\&\fB\s-1AVR\s0 Named Address Spaces\fR n' \fB\s-1AVR\s0 Built-in Functions\fR.
.ie n .IP """_\|_AVR_ARCH_\|_""" 4
.el .IP "\f(CW_\|_AVR_ARCH_\|_\fR" 4
.IX Item "__AVR_ARCH__"
Build-in macro dat resolves ta a thugged-out decimal number dat identifies the
architecture n' dependz on tha \f(CW\*(C`\-mmcu=\f(CImcu\f(CW\*(C'\fR option.
Possible joints are:
.Sp
\&\f(CW2\fR, \f(CW25\fR, \f(CW3\fR, \f(CW31\fR, \f(CW35\fR,
\&\f(CW4\fR, \f(CW5\fR, \f(CW51\fR, \f(CW6\fR, \f(CW102\fR, \f(CW104\fR,
\&\f(CW105\fR, \f(CW106\fR, \f(CW107\fR
.Sp
for \fImcu\fR=\f(CW\*(C`avr2\*(C'\fR, \f(CW\*(C`avr25\*(C'\fR, \f(CW\*(C`avr3\*(C'\fR,
\&\f(CW\*(C`avr31\*(C'\fR, \f(CW\*(C`avr35\*(C'\fR, \f(CW\*(C`avr4\*(C'\fR, \f(CW\*(C`avr5\*(C'\fR, \f(CW\*(C`avr51\*(C'\fR,
\&\f(CW\*(C`avr6\*(C'\fR, \f(CW\*(C`avrxmega2\*(C'\fR, \f(CW\*(C`avrxmega4\*(C'\fR, \f(CW\*(C`avrxmega5\*(C'\fR,
\&\f(CW\*(C`avrxmega6\*(C'\fR, \f(CW\*(C`avrxmega7\*(C'\fR, respectively.
If \fImcu\fR specifies a thugged-out device, dis built-in macro is set
accordingly. For example, wit \f(CW\*(C`\-mmcu=atmega8\*(C'\fR tha macro will be
defined ta \f(CW4\fR.
.ie n .IP """_\|_AVR_\f(CIDevice\f(CW_\|_""" 4
.el .IP "\f(CW_\|_AVR_\f(CIDevice\f(CW_\|_\fR" 4
.IX Item "__AVR_Device__"
Settin \f(CW\*(C`\-mmcu=\f(CIdevice\f(CW\*(C'\fR defines dis built-in macro which reflects
the devicez name. For example, \f(CW\*(C`\-mmcu=atmega8\*(C'\fR defines the
built-in macro \f(CW\*(C`_\|_AVR_ATmega8_\|_\*(C'\fR, \f(CW\*(C`\-mmcu=attiny261a\*(C'\fR defines
\&\f(CW\*(C`_\|_AVR_ATtiny261A_\|_\*(C'\fR, etc.
.Sp
Da built-in macros' names follow
the scheme \f(CW\*(C`_\|_AVR_\f(CIDevice\f(CW_\|_\*(C'\fR where \fIDevice\fR is
the thang name as from tha \s-1AVR\s0 user manual. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da difference between
\&\fIDevice\fR up in tha built-in macro n' \fIdevice\fR in
\&\f(CW\*(C`\-mmcu=\f(CIdevice\f(CW\*(C'\fR is dat tha latta be always lowercase.
.Sp
If \fIdevice\fR aint a thang but only a cold-ass lil core architecture like
\&\f(CW\*(C`avr51\*(C'\fR, dis macro aint gonna be defined.
.ie n .IP """_\|_AVR_XMEGA_\|_""" 4
.el .IP "\f(CW_\|_AVR_XMEGA_\|_\fR" 4
.IX Item "__AVR_XMEGA__"
Da thang / architecture belongs ta tha \s-1XMEGA\s0 crew of devices.
.ie n .IP """_\|_AVR_HAVE_ELPM_\|_""" 4
.el .IP "\f(CW_\|_AVR_HAVE_ELPM_\|_\fR" 4
.IX Item "__AVR_HAVE_ELPM__"
Da thang has tha the \f(CW\*(C`ELPM\*(C'\fR instruction.
.ie n .IP """_\|_AVR_HAVE_ELPMX_\|_""" 4
.el .IP "\f(CW_\|_AVR_HAVE_ELPMX_\|_\fR" 4
.IX Item "__AVR_HAVE_ELPMX__"
Da thang has tha \f(CW\*(C`ELPM R\f(CIn\f(CW,Z\*(C'\fR n' \f(CW\*(C`ELPM
R\f(CIn\f(CW,Z+\*(C'\fR instructions.
.ie n .IP """_\|_AVR_HAVE_MOVW_\|_""" 4
.el .IP "\f(CW_\|_AVR_HAVE_MOVW_\|_\fR" 4
.IX Item "__AVR_HAVE_MOVW__"
Da thang has tha \f(CW\*(C`MOVW\*(C'\fR instruction ta big-ass up 16\-bit
register-regista moves.
.ie n .IP """_\|_AVR_HAVE_LPMX_\|_""" 4
.el .IP "\f(CW_\|_AVR_HAVE_LPMX_\|_\fR" 4
.IX Item "__AVR_HAVE_LPMX__"
Da thang has tha \f(CW\*(C`LPM R\f(CIn\f(CW,Z\*(C'\fR and
\&\f(CW\*(C`LPM R\f(CIn\f(CW,Z+\*(C'\fR instructions.
.ie n .IP """_\|_AVR_HAVE_MUL_\|_""" 4
.el .IP "\f(CW_\|_AVR_HAVE_MUL_\|_\fR" 4
.IX Item "__AVR_HAVE_MUL__"
Da thang has a hardware multiplier.
.ie n .IP """_\|_AVR_HAVE_JMP_CALL_\|_""" 4
.el .IP "\f(CW_\|_AVR_HAVE_JMP_CALL_\|_\fR" 4
.IX Item "__AVR_HAVE_JMP_CALL__"
Da thang has tha \f(CW\*(C`JMP\*(C'\fR n' \f(CW\*(C`CALL\*(C'\fR instructions.
This is tha case fo' devices wit at least 16@tie{}KiB of program
memory.
.ie n .IP """_\|_AVR_HAVE_EIJMP_EICALL_\|_""" 4
.el .IP "\f(CW_\|_AVR_HAVE_EIJMP_EICALL_\|_\fR" 4
.IX Item "__AVR_HAVE_EIJMP_EICALL__"
.PD 0
.ie n .IP """_\|_AVR_3_BYTE_PC_\|_""" 4
.el .IP "\f(CW_\|_AVR_3_BYTE_PC_\|_\fR" 4
.IX Item "__AVR_3_BYTE_PC__"
.PD
Da thang has tha \f(CW\*(C`EIJMP\*(C'\fR n' \f(CW\*(C`EICALL\*(C'\fR instructions.
This is tha case fo' devices wit mo' than 128@tie{}KiB of program memory.
This also means dat tha program counter
(\s-1PC\s0) is 3@tie{}bytes wide.
.ie n .IP """_\|_AVR_2_BYTE_PC_\|_""" 4
.el .IP "\f(CW_\|_AVR_2_BYTE_PC_\|_\fR" 4
.IX Item "__AVR_2_BYTE_PC__"
Da program counta (\s-1PC\s0) is 2@tie{}bytes wide. This is tha case fo' devices
with up ta 128@tie{}KiB of program memory.
.ie n .IP """_\|_AVR_HAVE_8BIT_SP_\|_""" 4
.el .IP "\f(CW_\|_AVR_HAVE_8BIT_SP_\|_\fR" 4
.IX Item "__AVR_HAVE_8BIT_SP__"
.PD 0
.ie n .IP """_\|_AVR_HAVE_16BIT_SP_\|_""" 4
.el .IP "\f(CW_\|_AVR_HAVE_16BIT_SP_\|_\fR" 4
.IX Item "__AVR_HAVE_16BIT_SP__"
.PD
Da stack pointa (\s-1SP\s0) regista is treated as 8\-bit respectively
16\-bit regista by tha compiler.
Da definizzle of these macros be affected by \f(CW\*(C`\-mtiny\-stack\*(C'\fR.
.ie n .IP """_\|_AVR_HAVE_SPH_\|_""" 4
.el .IP "\f(CW_\|_AVR_HAVE_SPH_\|_\fR" 4
.IX Item "__AVR_HAVE_SPH__"
.PD 0
.ie n .IP """_\|_AVR_SP8_\|_""" 4
.el .IP "\f(CW_\|_AVR_SP8_\|_\fR" 4
.IX Item "__AVR_SP8__"
.PD
Da thang has tha \s-1SPH \s0(high part of stack pointer) special function
regista or has a 8\-bit stack pointer, respectively.
Da definizzle of these macros be affected by \f(CW\*(C`\-mmcu=\*(C'\fR and
in tha casez of \f(CW\*(C`\-mmcu=avr2\*(C'\fR n' \f(CW\*(C`\-mmcu=avr25\*(C'\fR also
by \f(CW\*(C`\-msp8\*(C'\fR.
.ie n .IP """_\|_AVR_HAVE_RAMPD_\|_""" 4
.el .IP "\f(CW_\|_AVR_HAVE_RAMPD_\|_\fR" 4
.IX Item "__AVR_HAVE_RAMPD__"
.PD 0
.ie n .IP """_\|_AVR_HAVE_RAMPX_\|_""" 4
.el .IP "\f(CW_\|_AVR_HAVE_RAMPX_\|_\fR" 4
.IX Item "__AVR_HAVE_RAMPX__"
.ie n .IP """_\|_AVR_HAVE_RAMPY_\|_""" 4
.el .IP "\f(CW_\|_AVR_HAVE_RAMPY_\|_\fR" 4
.IX Item "__AVR_HAVE_RAMPY__"
.ie n .IP """_\|_AVR_HAVE_RAMPZ_\|_""" 4
.el .IP "\f(CW_\|_AVR_HAVE_RAMPZ_\|_\fR" 4
.IX Item "__AVR_HAVE_RAMPZ__"
.PD
Da thang has tha \f(CW\*(C`RAMPD\*(C'\fR, \f(CW\*(C`RAMPX\*(C'\fR, \f(CW\*(C`RAMPY\*(C'\fR,
\&\f(CW\*(C`RAMPZ\*(C'\fR special function register, respectively.
.ie n .IP """_\|_NO_INTERRUPTS_\|_""" 4
.el .IP "\f(CW_\|_NO_INTERRUPTS_\|_\fR" 4
.IX Item "__NO_INTERRUPTS__"
This macro reflects tha \f(CW\*(C`\-mno\-interrupts\*(C'\fR command line option.
.ie n .IP """_\|_AVR_ERRATA_SKIP_\|_""" 4
.el .IP "\f(CW_\|_AVR_ERRATA_SKIP_\|_\fR" 4
.IX Item "__AVR_ERRATA_SKIP__"
.PD 0
.ie n .IP """_\|_AVR_ERRATA_SKIP_JMP_CALL_\|_""" 4
.el .IP "\f(CW_\|_AVR_ERRATA_SKIP_JMP_CALL_\|_\fR" 4
.IX Item "__AVR_ERRATA_SKIP_JMP_CALL__"
.PD
Some \s-1AVR\s0 devices (\s-1AT90S8515,\s0 ATmega103) must not skip 32\-bit
instructions cuz of a hardware erratum.  Skip instructions are
\&\f(CW\*(C`SBRS\*(C'\fR, \f(CW\*(C`SBRC\*(C'\fR, \f(CW\*(C`SBIS\*(C'\fR, \f(CW\*(C`SBIC\*(C'\fR n' \f(CW\*(C`CPSE\*(C'\fR.
Da second macro is only defined if \f(CW\*(C`_\|_AVR_HAVE_JMP_CALL_\|_\*(C'\fR be also
set.
.ie n .IP """_\|_AVR_SFR_OFFSET_\|_=\f(CIoffset\f(CW""" 4
.el .IP "\f(CW_\|_AVR_SFR_OFFSET_\|_=\f(CIoffset\f(CW\fR" 4
.IX Item "__AVR_SFR_OFFSET__=offset"
Instructions dat can address I/O special function registas directly
like \f(CW\*(C`IN\*(C'\fR, \f(CW\*(C`OUT\*(C'\fR, \f(CW\*(C`SBI\*(C'\fR, etc. may bust a gangbangin' finger-lickin' different
address as if addressed by a instruction ta access \s-1RAM\s0 like \f(CW\*(C`LD\*(C'\fR
or \f(CW\*(C`STS\*(C'\fR. This offset dependz on tha thang architecture n' has
to be subtracted from tha \s-1RAM\s0 address up in order ta git the
respectizzle I/O@tie{}address.
.ie n .IP """_\|_WITH_AVRLIBC_\|_""" 4
.el .IP "\f(CW_\|_WITH_AVRLIBC_\|_\fR" 4
.IX Item "__WITH_AVRLIBC__"
Da compila is configured ta be used together wit AVR-Libc.
See tha \f(CW\*(C`\-\-with\-avrlibc\*(C'\fR configure option.
.SS "Blackfin Options"
.IX Subsection "Blackfin Options"
.IP "\fB\-mcpu=\fR\fIcpu\fR[\fB\-\fR\fIsirevision\fR]" 4
.IX Item "-mcpu=cpu[-sirevision]"
Specifies tha name of tha target Blackfin processor. Shiiit, dis aint no joke.  Currently, \fIcpu\fR
can be one of \fBbf512\fR, \fBbf514\fR, \fBbf516\fR, \fBbf518\fR,
\&\fBbf522\fR, \fBbf523\fR, \fBbf524\fR, \fBbf525\fR, \fBbf526\fR,
\&\fBbf527\fR, \fBbf531\fR, \fBbf532\fR, \fBbf533\fR,
\&\fBbf534\fR, \fBbf536\fR, \fBbf537\fR, \fBbf538\fR, \fBbf539\fR,
\&\fBbf542\fR, \fBbf544\fR, \fBbf547\fR, \fBbf548\fR, \fBbf549\fR,
\&\fBbf542m\fR, \fBbf544m\fR, \fBbf547m\fR, \fBbf548m\fR, \fBbf549m\fR,
\&\fBbf561\fR, \fBbf592\fR.
.Sp
Da optionizzle \fIsirevision\fR specifies tha silicon revision of tha target
Blackfin processor. Shiiit, dis aint no joke.  Any workaroundz available fo' tha targeted silicon revision
are enabled. Y'all KNOW dat shit, muthafucka!  If \fIsirevision\fR is \fBnone\fR, no workaroundz is enabled.
If \fIsirevision\fR is \fBany\fR, all workaroundz fo' tha targeted processor
are enabled. Y'all KNOW dat shit, muthafucka!  Da \f(CW\*(C`_\|_SILICON_REVISION_\|_\*(C'\fR macro is defined ta two
hexadecimal digits representin tha major n' minor numbers up in tha silicon
revision. I aint talkin' bout chicken n' gravy biatch.  If \fIsirevision\fR is \fBnone\fR, tha \f(CW\*(C`_\|_SILICON_REVISION_\|_\*(C'\fR
is not defined. Y'all KNOW dat shit, muthafucka!  If \fIsirevision\fR is \fBany\fR, the
\&\f(CW\*(C`_\|_SILICON_REVISION_\|_\*(C'\fR is defined ta be \f(CW0xffff\fR.
If dis optionizzle \fIsirevision\fR aint used, \s-1GCC\s0 assumes tha sickest fuckin known
silicon revision of tha targeted Blackfin processor.
.Sp
\&\s-1GCC\s0 defines a preprocessor macro fo' tha specified \fIcpu\fR.
For tha \fBbfin-elf\fR toolchain, dis option causes tha hardware \s-1BSP\s0
provided by libgloss ta be linked up in if \fB\-msim\fR aint given.
.Sp
Without dis option, \fBbf532\fR is used as tha processor by default.
.Sp
Note dat support fo' \fBbf561\fR is incomplete.  For \fBbf561\fR,
only tha preprocessor macro is defined.
.IP "\fB\-msim\fR" 4
.IX Item "-msim"
Specifies dat tha program is ghon be run on tha simulator. Shiiit, dis aint no joke.  This causes
the simulator \s-1BSP\s0 provided by libgloss ta be linked in. I aint talkin' bout chicken n' gravy biatch.  This option
has effect only fo' \fBbfin-elf\fR toolchain.
Certain other options, like fuckin \fB\-mid\-shared\-library\fR and
\&\fB\-mfdpic\fR, imply \fB\-msim\fR.
.IP "\fB\-momit\-leaf\-frame\-pointer\fR" 4
.IX Item "-momit-leaf-frame-pointer"
Don't keep tha frame pointa up in a regista fo' leaf functions.  This
avoidz tha instructions ta save, set up n' restore frame pointas and
makes a extra regista available up in leaf functions.  Da option
\&\fB\-fomit\-frame\-pointer\fR removes tha frame pointa fo' all functions,
which might make debuggin harder.
.IP "\fB\-mspecld\-anomaly\fR" 4
.IX Item "-mspecld-anomaly"
When enabled, tha compila ensures dat tha generated code do not
contain speculatizzle loadz afta jump instructions. If dis option is used,
\&\f(CW\*(C`_\|_WORKAROUND_SPECULATIVE_LOADS\*(C'\fR is defined.
.IP "\fB\-mno\-specld\-anomaly\fR" 4
.IX Item "-mno-specld-anomaly"
Don't generate extra code ta prevent speculatizzle loadz from occurring.
.IP "\fB\-mcsync\-anomaly\fR" 4
.IX Item "-mcsync-anomaly"
When enabled, tha compila ensures dat tha generated code do not
contain \s-1CSYNC\s0 or \s-1SSYNC\s0 instructions too soon afta conditionizzle branches.
If dis option is used, \f(CW\*(C`_\|_WORKAROUND_SPECULATIVE_SYNCS\*(C'\fR is defined.
.IP "\fB\-mno\-csync\-anomaly\fR" 4
.IX Item "-mno-csync-anomaly"
Don't generate extra code ta prevent \s-1CSYNC\s0 or \s-1SSYNC\s0 instructions from
occurrin too soon afta a cold-ass lil conditionizzle branch.
.IP "\fB\-mlow\-64k\fR" 4
.IX Item "-mlow-64k"
When enabled, tha compila is free ta take advantage of tha knowledge that
the entire program fits tha fuck into tha low 64k of memory.
.IP "\fB\-mno\-low\-64k\fR" 4
.IX Item "-mno-low-64k"
Assume dat tha program be arbitrarily large.  This is tha default.
.IP "\fB\-mstack\-check\-l1\fR" 4
.IX Item "-mstack-check-l1"
Do stack checkin rockin shiznit placed tha fuck into L1 scratchpad memory by the
uClinux kernel.
.IP "\fB\-mid\-shared\-library\fR" 4
.IX Item "-mid-shared-library"
Generate code dat supports shared libraries via tha library \s-1ID\s0 method.
This allows fo' execute up in place n' shared libraries up in a environment
without virtual memory pimpment.  This option implies \fB\-fPIC\fR.
With a \fBbfin-elf\fR target, dis option implies \fB\-msim\fR.
.IP "\fB\-mno\-id\-shared\-library\fR" 4
.IX Item "-mno-id-shared-library"
Generate code dat don't assume ID-based shared libraries is bein used.
This is tha default.
.IP "\fB\-mleaf\-id\-shared\-library\fR" 4
.IX Item "-mleaf-id-shared-library"
Generate code dat supports shared libraries via tha library \s-1ID\s0 method,
but assumes dat dis library or executable won't link against any other
\&\s-1ID\s0 shared libraries. Put ya muthafuckin choppers up if ya feel dis!  That allows tha compila ta use fasta code fo' jumps
and calls.
.IP "\fB\-mno\-leaf\-id\-shared\-library\fR" 4
.IX Item "-mno-leaf-id-shared-library"
Do not assume dat tha code bein compiled won't link against any \s-1ID\s0 shared
libraries. Put ya muthafuckin choppers up if ya feel dis!  Slower code is generated fo' jump n' call insns.
.IP "\fB\-mshared\-library\-id=n\fR" 4
.IX Item "-mshared-library-id=n"
Specifies tha identification number of tha ID-based shared library being
compiled. Y'all KNOW dat shit, muthafucka!  Specifyin a value of 0 generates mo' compact code; specifying
other joints forces tha allocation of dat number ta tha current
library but is no mo' space\- or time-efficient than omittin dis option.
.IP "\fB\-msep\-data\fR" 4
.IX Item "-msep-data"
Generate code dat allows tha data segment ta be located up in a gangbangin' finger-lickin' different
area of memory from tha text segment.  This allows fo' execute up in place in
an environment without virtual memory pimpment by eliminatin relocations
against tha text section.
.IP "\fB\-mno\-sep\-data\fR" 4
.IX Item "-mno-sep-data"
Generate code dat assumes dat tha data segment bigs up tha text segment.
This is tha default.
.IP "\fB\-mlong\-calls\fR" 4
.IX Item "-mlong-calls"
.PD 0
.IP "\fB\-mno\-long\-calls\fR" 4
.IX Item "-mno-long-calls"
.PD
Tells tha compila ta big-ass up function calls by first loadin the
address of tha function tha fuck into a regista n' then struttin a subroutine
call on dis regista n' shit.  This switch is needed if tha target function
lies outside of tha 24\-bit addressin range of tha offset-based
version of subroutine call instruction.
.Sp
This feature aint enabled by default.  Specifying
\&\fB\-mno\-long\-calls\fR restores tha default behavior. Shiiit, dis aint no joke.  Note these
switches have no effect on how tha fuck tha compila generates code ta handle
function calls via function pointers.
.IP "\fB\-mfast\-fp\fR" 4
.IX Item "-mfast-fp"
Link wit tha fast floating-point library. This library chillaxes some of
the \s-1IEEE\s0 floating-point standardz rulez fo' checkin inputs against
Not-a-Number (\s-1NAN\s0), up in tha interest of performance.
.IP "\fB\-minline\-plt\fR" 4
.IX Item "-minline-plt"
Enable inlinin of \s-1PLT\s0 entries up in function calls ta functions dat are
not known ta bind locally.  It has no effect without \fB\-mfdpic\fR.
.IP "\fB\-mmulticore\fR" 4
.IX Item "-mmulticore"
Build a standalone application fo' multicore Blackfin processors. 
This option causes proper start filez n' link scripts supportin 
multicore ta be used, n' defines tha macro \f(CW\*(C`_\|_BFIN_MULTICORE\*(C'\fR. 
It can only be used wit \fB\-mcpu=bf561\fR[\fB\-\fR\fIsirevision\fR].
.Sp
This option can be used wit \fB\-mcorea\fR or \fB\-mcoreb\fR, which
selects tha one-application-per-core programmin model.  Without
\&\fB\-mcorea\fR or \fB\-mcoreb\fR, tha single\-application/dual\-core
programmin model is used. Y'all KNOW dat shit, muthafucka! In dis model, tha main function of Core B
should be named as \f(CW\*(C`coreb_main\*(C'\fR.
.Sp
If dis option aint used, tha single-core application programming
model is used.
.IP "\fB\-mcorea\fR" 4
.IX Item "-mcorea"
Build a standalone application fo' Core A of \s-1BF561\s0 when using
the one-application-per-core programmin model. Proper start files
and link scripts is used ta support Core A, n' tha macro
\&\f(CW\*(C`_\|_BFIN_COREA\*(C'\fR is defined.
This option can only be used up in conjunction wit \fB\-mmulticore\fR.
.IP "\fB\-mcoreb\fR" 4
.IX Item "-mcoreb"
Build a standalone application fo' Core B of \s-1BF561\s0 when using
the one-application-per-core programmin model. Proper start files
and link scripts is used ta support Core B, n' tha macro
\&\f(CW\*(C`_\|_BFIN_COREB\*(C'\fR is defined. Y'all KNOW dat shit, muthafucka! When dis option is used, \f(CW\*(C`coreb_main\*(C'\fR
should be used instead of \f(CW\*(C`main\*(C'\fR. 
This option can only be used up in conjunction wit \fB\-mmulticore\fR.
.IP "\fB\-msdram\fR" 4
.IX Item "-msdram"
Build a standalone application fo' \s-1SDRAM.\s0 Proper start filez and
link scripts is used ta put tha application tha fuck into \s-1SDRAM,\s0 n' tha macro
\&\f(CW\*(C`_\|_BFIN_SDRAM\*(C'\fR is defined.
Da loader should initialize \s-1SDRAM\s0 before loadin tha application.
.IP "\fB\-micplb\fR" 4
.IX Item "-micplb"
Assume dat ICPLBs is enabled at run time.  This has a effect on certain
anomaly workarounds.  For Linux targets, tha default is ta assume ICPLBs
are enabled; fo' standalone applications tha default is off.
.SS "C6X Options"
.IX Subsection "C6X Options"
.IP "\fB\-march=\fR\fIname\fR" 4
.IX Item "-march=name"
This specifies tha name of tha target architecture.  \s-1GCC\s0 uses this
name ta determine what tha fuck kind of instructions it can emit when generating
assembly code.  Permissible names are: \fBc62x\fR,
\&\fBc64x\fR, \fBc64x+\fR, \fBc67x\fR, \fBc67x+\fR, \fBc674x\fR.
.IP "\fB\-mbig\-endian\fR" 4
.IX Item "-mbig-endian"
Generate code fo' a funky-ass big-endian target.
.IP "\fB\-mlil\-endian\fR" 4
.IX Item "-mlil-endian"
Generate code fo' a lil-endian target.  This is tha default.
.IP "\fB\-msim\fR" 4
.IX Item "-msim"
Choose startup filez n' linker script suitable fo' tha simulator.
.IP "\fB\-msdata=default\fR" 4
.IX Item "-msdata=default"
Put lil' small-ass global n' static data up in tha \fB.neardata\fR section,
which is pointed ta by regista \f(CW\*(C`B14\*(C'\fR.  Put lil' small-ass uninitialized
global n' static data up in tha \fB.bss\fR section, which be adjacent
to tha \fB.neardata\fR section. I aint talkin' bout chicken n' gravy biatch.  Put lil' small-ass read-only data tha fuck into the
\&\fB.rodata\fR section. I aint talkin' bout chicken n' gravy biatch.  Da correspondin sections used fo' large
piecez of data is \fB.fardata\fR, \fB.far\fR n' \fB.const\fR.
.IP "\fB\-msdata=all\fR" 4
.IX Item "-msdata=all"
Put all data, not just lil' small-ass objects, tha fuck into tha sections reserved for
small data, n' use addressin relatizzle ta tha \f(CW\*(C`B14\*(C'\fR regista to
access em.
.IP "\fB\-msdata=none\fR" 4
.IX Item "-msdata=none"
Make no use of tha sections reserved fo' lil' small-ass data, n' use absolute
addresses ta access all data.  Put all initialized global n' static
data up in tha \fB.fardata\fR section, n' all uninitialized data up in the
\&\fB.far\fR section. I aint talkin' bout chicken n' gravy biatch.  Put all constant data tha fuck into tha \fB.const\fR
section.
.SS "\s-1CRIS\s0 Options"
.IX Subsection "CRIS Options"
These options is defined specifically fo' tha \s-1CRIS\s0 ports.
.IP "\fB\-march=\fR\fIarchitecture-type\fR" 4
.IX Item "-march=architecture-type"
.PD 0
.IP "\fB\-mcpu=\fR\fIarchitecture-type\fR" 4
.IX Item "-mcpu=architecture-type"
.PD
Generate code fo' tha specified architecture.  Da chizzlez for
\&\fIarchitecture-type\fR is \fBv3\fR, \fBv8\fR n' \fBv10\fR for
respectively \s-1ETRAX\s0\ 4, \s-1ETRAX\s0\ 100, n' \s-1ETRAX\s0\ 100\ \s-1LX.\s0
Default is \fBv0\fR except fo' cris-axis-linux-gnu, where tha default is
\&\fBv10\fR.
.IP "\fB\-mtune=\fR\fIarchitecture-type\fR" 4
.IX Item "-mtune=architecture-type"
Tune ta \fIarchitecture-type\fR every last muthafuckin thang applicable bout tha generated
code, except fo' tha \s-1ABI\s0 n' tha set of available instructions.  The
choices fo' \fIarchitecture-type\fR is tha same as for
\&\fB\-march=\fR\fIarchitecture-type\fR.
.IP "\fB\-mmax\-stack\-frame=\fR\fIn\fR" 4
.IX Item "-mmax-stack-frame=n"
Warn when tha stack frame of a gangbangin' function exceedz \fIn\fR bytes.
.IP "\fB\-metrax4\fR" 4
.IX Item "-metrax4"
.PD 0
.IP "\fB\-metrax100\fR" 4
.IX Item "-metrax100"
.PD
Da options \fB\-metrax4\fR n' \fB\-metrax100\fR is synonyms for
\&\fB\-march=v3\fR n' \fB\-march=v8\fR respectively.
.IP "\fB\-mmul\-bug\-workaround\fR" 4
.IX Item "-mmul-bug-workaround"
.PD 0
.IP "\fB\-mno\-mul\-bug\-workaround\fR" 4
.IX Item "-mno-mul-bug-workaround"
.PD
Work round a funky-ass bug up in tha \f(CW\*(C`muls\*(C'\fR n' \f(CW\*(C`mulu\*(C'\fR instructions fo' \s-1CPU\s0
models where it applies. Put ya muthafuckin choppers up if ya feel dis!  This option be actizzle by default.
.IP "\fB\-mpdebug\fR" 4
.IX Item "-mpdebug"
Enable CRIS-specific verbose debug-related shiznit up in tha assembly
code.  This option also has tha effect of turnin off tha \fB#NO_APP\fR
formatted-code indicator ta tha assembla all up in tha beginnin of the
assembly file.
.IP "\fB\-mcc\-init\fR" 4
.IX Item "-mcc-init"
Do not use condition-code thangs up in dis biatch from previous instruction; always emit
compare n' test instructions before use of condizzle codes.
.IP "\fB\-mno\-side\-effects\fR" 4
.IX Item "-mno-side-effects"
Do not emit instructions wit side effects up in addressin modes other than
post-increment.
.IP "\fB\-mstack\-align\fR" 4
.IX Item "-mstack-align"
.PD 0
.IP "\fB\-mno\-stack\-align\fR" 4
.IX Item "-mno-stack-align"
.IP "\fB\-mdata\-align\fR" 4
.IX Item "-mdata-align"
.IP "\fB\-mno\-data\-align\fR" 4
.IX Item "-mno-data-align"
.IP "\fB\-mconst\-align\fR" 4
.IX Item "-mconst-align"
.IP "\fB\-mno\-const\-align\fR" 4
.IX Item "-mno-const-align"
.PD
These options (\fBno\-\fR options) arrange (eliminizzle arrangements) fo' the
stack frame, individual data n' constants ta be aligned fo' tha maximum
single data access size fo' tha chosen \s-1CPU\s0 model.  Da default is to
arrange fo' 32\-bit alignment.  \s-1ABI\s0 details like fuckin structure layout are
not affected by these options.
.IP "\fB\-m32\-bit\fR" 4
.IX Item "-m32-bit"
.PD 0
.IP "\fB\-m16\-bit\fR" 4
.IX Item "-m16-bit"
.IP "\fB\-m8\-bit\fR" 4
.IX Item "-m8-bit"
.PD
Similar ta tha stack\- data\- n' const-align options above, these options
arrange fo' stack frame, writable data n' constants ta all be 32\-bit,
16\-bit or 8\-bit aligned. Y'all KNOW dat shit, muthafucka!  Da default is 32\-bit alignment.
.IP "\fB\-mno\-prologue\-epilogue\fR" 4
.IX Item "-mno-prologue-epilogue"
.PD 0
.IP "\fB\-mprologue\-epilogue\fR" 4
.IX Item "-mprologue-epilogue"
.PD
With \fB\-mno\-prologue\-epilogue\fR, tha aiiight function prologue and
epilogue which set up tha stack frame is omitted n' no return
instructions or return sequences is generated up in tha code.  Use this
option only together wit visual inspection of tha compiled code: no
warnings or errors is generated when call-saved registas must be saved,
or storage fo' local variablez need ta be allocated.
.IP "\fB\-mno\-gotplt\fR" 4
.IX Item "-mno-gotplt"
.PD 0
.IP "\fB\-mgotplt\fR" 4
.IX Item "-mgotplt"
.PD
With \fB\-fpic\fR n' \fB\-fPIC\fR, don't generate (do generate)
instruction sequences dat load addresses fo' functions from tha \s-1PLT\s0 part
of tha \s-1GOT\s0 rather than (traditionizzle on other architectures) calls ta the
\&\s-1PLT. \s0 Da default is \fB\-mgotplt\fR.
.IP "\fB\-melf\fR" 4
.IX Item "-melf"
Legacy no-op option only recognized wit tha cris-axis-elf and
cris-axis-linux-gnu targets.
.IP "\fB\-mlinux\fR" 4
.IX Item "-mlinux"
Legacy no-op option only recognized wit tha cris-axis-linux-gnu target.
.IP "\fB\-sim\fR" 4
.IX Item "-sim"
This option, recognized fo' tha cris-axis-elf, arranges
to link wit input-output functions from a simulator library.  Code,
initialized data n' zero-initialized data is allocated consecutively.
.IP "\fB\-sim2\fR" 4
.IX Item "-sim2"
Like \fB\-sim\fR yo, but pass linker options ta locate initialized data at
0x40000000 n' zero-initialized data at 0x80000000.
.SS "\s-1CR16\s0 Options"
.IX Subsection "CR16 Options"
These options is defined specifically fo' tha \s-1CR16\s0 ports.
.IP "\fB\-mmac\fR" 4
.IX Item "-mmac"
Enable tha use of multiply-accumulate instructions. Disabled by default.
.IP "\fB\-mcr16cplus\fR" 4
.IX Item "-mcr16cplus"
.PD 0
.IP "\fB\-mcr16c\fR" 4
.IX Item "-mcr16c"
.PD
Generate code fo' \s-1CR16C\s0 or \s-1CR16C+\s0 architecture. \s-1CR16C+\s0 architecture 
is default.
.IP "\fB\-msim\fR" 4
.IX Item "-msim"
Links tha library libsim.a which is up in compatible wit simulator fo' realz. Applicable
to \s-1ELF\s0 compila only.
.IP "\fB\-mint32\fR" 4
.IX Item "-mint32"
Choose integer type as 32\-bit wide.
.IP "\fB\-mbit\-ops\fR" 4
.IX Item "-mbit-ops"
Generates \f(CW\*(C`sbit\*(C'\fR/\f(CW\*(C`cbit\*(C'\fR instructions fo' bit manipulations.
.IP "\fB\-mdata\-model=\fR\fImodel\fR" 4
.IX Item "-mdata-model=model"
Choose a thugged-out data model. Da chizzlez fo' \fImodel\fR is \fBnear\fR,
\&\fBfar\fR or \fBmedium\fR. \fBmedium\fR is default.
But fuck dat shiznit yo, tha word on tha street is dat \fBfar\fR aint valid wit \fB\-mcr16c\fR, as the
\&\s-1CR16C\s0 architecture do not support tha far data model.
.SS "Darwin Options"
.IX Subsection "Darwin Options"
These options is defined fo' all architectures hustlin tha Darwin operating
system.
.PP
\&\s-1FSF GCC\s0 on Darwin do not create \*(L"fat\*(R" object files; it creates
an object file fo' tha single architecture dat \s-1GCC\s0 was built to
target.  Applez \s-1GCC\s0 on Darwin do create \*(L"fat\*(R" filez if multiple
\&\fB\-arch\fR options is used; it do so by hustlin tha compila or
linker multiple times n' joinin tha thangs up in dis biatch together with
\&\fIlipo\fR.
.PP
Da subtype of tha file pimped (like \fBppc7400\fR or \fBppc970\fR or
\&\fBi686\fR) is determined by tha flags dat specify tha \s-1ISA\s0
that \s-1GCC\s0 is targeting, like \fB\-mcpu\fR or \fB\-march\fR.  The
\&\fB\-force_cpusubtype_ALL\fR option can be used ta override all dis bullshit.
.PP
Da Darwin tools vary up in they behavior when presented wit a \s-1ISA\s0
mismatch.  Da assembler, \fIas\fR, only permits instructions to
be used dat is valid fo' tha subtype of tha file it is generating,
so you cannot put 64\-bit instructions up in a \fBppc750\fR object file.
Da linker fo' shared libraries, \fI/usr/bin/libtool\fR, fails
and prints a error if axed ta create a gangbangin' finger-lickin' dirty-ass shared library wit a less
restrictizzle subtype than its input filez (for instance, tryin ta put
a \fBppc970\fR object file up in a \fBppc7400\fR library).  Da linker
for executables, \fBld\fR, on tha fuckin' down-lowly gives tha executable da most thugged-out
restrictizzle subtype of any of its input files.
.IP "\fB\-F\fR\fIdir\fR" 4
.IX Item "-Fdir"
Add tha framework directory \fIdir\fR ta tha head of tha list of
directories ta be searched fo' header files.  These directories are
interleaved wit dem specified by \fB\-I\fR options n' are
scanned up in a left-to-right order.
.Sp
A framework directory be a gangbangin' finger-lickin' directory wit frameworks up in dat shit.  A
framework be a gangbangin' finger-lickin' directory wit a \fIHeaders\fR and/or
\&\fIPrivateHeaders\fR directory contained directly up in it dat ends
in \fI.framework\fR.  Da name of a gangbangin' framework is tha name of this
directory excludin tha \fI.framework\fR.  Headaz associated with
the framework is found up in one of dem two directories, with
\&\fIHeaders\fR bein searched first.  A subframework be a gangbangin' framework
directory dat is up in a gangbangin' frameworkz \fIFrameworks\fR directory.
Includez of subframework headaz can only step tha fuck up in a header of a
framework dat gotz nuff tha subframework, or up in a siblin subframework
header n' shit.  Two subframeworks is siblings if they occur up in tha same
framework.  A subframework should not have tha same name as a
framework; a warnin is issued if dis is violated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Currently a
subframework cannot have subframeworks; up in tha future, tha mechanism
may be extended ta support all dis bullshit.  Da standard frameworks can be found
in \fI/System/Library/Frameworks\fR and
\&\fI/Library/Frameworks\fR.  An example include looks like
\&\f(CW\*(C`#include <Framework/header.h>\*(C'\fR, where \fIFramework\fR denotes
the name of tha framework n' \fIheader.h\fR is found up in the
\&\fIPrivateHeaders\fR or \fIHeaders\fR directory.
.IP "\fB\-iframework\fR\fIdir\fR" 4
.IX Item "-iframeworkdir"
Like \fB\-F\fR except tha directory be a treated as a system
directory.  Da main difference between dis \fB\-iframework\fR and
\&\fB\-F\fR is dat wit \fB\-iframework\fR tha compila do not
warn bout constructs contained within header filez found via
\&\fIdir\fR.  This option is valid only fo' tha C crew of languages.
.IP "\fB\-gused\fR" 4
.IX Item "-gused"
Emit debuggin shiznit fo' symbols dat is used. Y'all KNOW dat shit, muthafucka!  For stabs
debuggin format, dis enablez \fB\-feliminate\-unused\-debug\-symbols\fR.
This is by default \s-1ON.\s0
.IP "\fB\-gfull\fR" 4
.IX Item "-gfull"
Emit debuggin shiznit fo' all symbols n' types.
.IP "\fB\-mmacosx\-version\-min=\fR\fIversion\fR" 4
.IX Item "-mmacosx-version-min=version"
Da earliest version of MacOS X dat dis executable will run on
is \fIversion\fR.  Typical jointz of \fIversion\fR include \f(CW10.1\fR,
\&\f(CW10.2\fR, n' \f(CW10.3.9\fR.
.Sp
If tha compila was built ta use tha systemz headaz by default,
then tha default fo' dis option is tha system version on which the
compila is hustlin, otherwise tha default is ta make chizzlez that
are compatible wit as nuff systems n' code bases as possible.
.IP "\fB\-mkernel\fR" 4
.IX Item "-mkernel"
Enable kernel pimpment mode.  Da \fB\-mkernel\fR option sets
\&\fB\-static\fR, \fB\-fno\-common\fR, \fB\-fno\-use\-cxa\-atexit\fR,
\&\fB\-fno\-exceptions\fR, \fB\-fno\-non\-call\-exceptions\fR,
\&\fB\-fapple\-kext\fR, \fB\-fno\-weak\fR n' \fB\-fno\-rtti\fR where
applicable.  This mode also sets \fB\-mno\-altivec\fR,
\&\fB\-msoft\-float\fR, \fB\-fno\-builtin\fR and
\&\fB\-mlong\-branch\fR fo' PowerPC targets.
.IP "\fB\-mone\-byte\-bool\fR" 4
.IX Item "-mone-byte-bool"
Override tha defaults fo' \fBbool\fR so dat \fBsizeof(bool)==1\fR.
By default \fBsizeof(bool)\fR is \fB4\fR when compilin for
Darwin/PowerPC n' \fB1\fR when compilin fo' Darwin/x86, so this
option has no effect on x86.
.Sp
\&\fBWarning:\fR Da \fB\-mone\-byte\-bool\fR switch causes \s-1GCC\s0
to generate code dat aint binary compatible wit code generated
without dat switch.  Usin dis switch may require recompilin all
other modulez up in a program, includin system libraries. Put ya muthafuckin choppers up if ya feel dis!  Use this
switch ta conform ta a non-default data model.
.IP "\fB\-mfix\-and\-continue\fR" 4
.IX Item "-mfix-and-continue"
.PD 0
.IP "\fB\-ffix\-and\-continue\fR" 4
.IX Item "-ffix-and-continue"
.IP "\fB\-findirect\-data\fR" 4
.IX Item "-findirect-data"
.PD
Generate code suitable fo' fast turnaround pimpment, like fuckin to
allow \s-1GDB\s0 ta dynamically load \f(CW\*(C`.o\*(C'\fR filez tha fuck into already-running
programs.  \fB\-findirect\-data\fR n' \fB\-ffix\-and\-continue\fR
are provided fo' backwardz compatibility.
.IP "\fB\-all_load\fR" 4
.IX Item "-all_load"
Loadz all thugz of static archive libraries.
See playa \fIld\fR\|(1) fo' mo' shiznit.
.IP "\fB\-arch_errors_fatal\fR" 4
.IX Item "-arch_errors_fatal"
Cause tha errors havin ta do wit filez dat have tha wack architecture
to be fatal.
.IP "\fB\-bind_at_load\fR" 4
.IX Item "-bind_at_load"
Causes tha output file ta be marked such dat tha dynamic linker will
bind all undefined references when tha file is loaded or launched.
.IP "\fB\-bundle\fR" 4
.IX Item "-bundle"
Produce a Mach-o bundle format file.
See playa \fIld\fR\|(1) fo' mo' shiznit.
.IP "\fB\-bundle_loader\fR \fIexecutable\fR" 4
.IX Item "-bundle_loader executable"
This option specifies tha \fIexecutable\fR dat will load tha build
output file bein linked. Y'all KNOW dat shit, muthafucka!  See playa \fIld\fR\|(1) fo' mo' shiznit.
.IP "\fB\-dynamiclib\fR" 4
.IX Item "-dynamiclib"
When passed dis option, \s-1GCC\s0 produces a thugged-out dynamic library instead of
an executable when linking, rockin tha Darwin \fIlibtool\fR command.
.IP "\fB\-force_cpusubtype_ALL\fR" 4
.IX Item "-force_cpusubtype_ALL"
This causes \s-1GCC\s0z output file ta have tha \fI\s-1ALL\s0\fR subtype, instead of
one controlled by tha \fB\-mcpu\fR or \fB\-march\fR option.
.IP "\fB\-allowable_client\fR  \fIclient_name\fR" 4
.IX Item "-allowable_client client_name"
.PD 0
.IP "\fB\-client_name\fR" 4
.IX Item "-client_name"
.IP "\fB\-compatibility_version\fR" 4
.IX Item "-compatibility_version"
.IP "\fB\-current_version\fR" 4
.IX Item "-current_version"
.IP "\fB\-dead_strip\fR" 4
.IX Item "-dead_strip"
.IP "\fB\-dependency\-file\fR" 4
.IX Item "-dependency-file"
.IP "\fB\-dylib_file\fR" 4
.IX Item "-dylib_file"
.IP "\fB\-dylinker_install_name\fR" 4
.IX Item "-dylinker_install_name"
.IP "\fB\-dynamic\fR" 4
.IX Item "-dynamic"
.IP "\fB\-exported_symbols_list\fR" 4
.IX Item "-exported_symbols_list"
.IP "\fB\-filelist\fR" 4
.IX Item "-filelist"
.IP "\fB\-flat_namespace\fR" 4
.IX Item "-flat_namespace"
.IP "\fB\-force_flat_namespace\fR" 4
.IX Item "-force_flat_namespace"
.IP "\fB\-headerpad_max_install_names\fR" 4
.IX Item "-headerpad_max_install_names"
.IP "\fB\-image_base\fR" 4
.IX Item "-image_base"
.IP "\fB\-init\fR" 4
.IX Item "-init"
.IP "\fB\-install_name\fR" 4
.IX Item "-install_name"
.IP "\fB\-keep_private_externs\fR" 4
.IX Item "-keep_private_externs"
.IP "\fB\-multi_module\fR" 4
.IX Item "-multi_module"
.IP "\fB\-multiply_defined\fR" 4
.IX Item "-multiply_defined"
.IP "\fB\-multiply_defined_unused\fR" 4
.IX Item "-multiply_defined_unused"
.IP "\fB\-noall_load\fR" 4
.IX Item "-noall_load"
.IP "\fB\-no_dead_strip_inits_and_terms\fR" 4
.IX Item "-no_dead_strip_inits_and_terms"
.IP "\fB\-nofixprebinding\fR" 4
.IX Item "-nofixprebinding"
.IP "\fB\-nomultidefs\fR" 4
.IX Item "-nomultidefs"
.IP "\fB\-noprebind\fR" 4
.IX Item "-noprebind"
.IP "\fB\-noseglinkedit\fR" 4
.IX Item "-noseglinkedit"
.IP "\fB\-pagezero_size\fR" 4
.IX Item "-pagezero_size"
.IP "\fB\-prebind\fR" 4
.IX Item "-prebind"
.IP "\fB\-prebind_all_twolevel_modules\fR" 4
.IX Item "-prebind_all_twolevel_modules"
.IP "\fB\-private_bundle\fR" 4
.IX Item "-private_bundle"
.IP "\fB\-read_only_relocs\fR" 4
.IX Item "-read_only_relocs"
.IP "\fB\-sectalign\fR" 4
.IX Item "-sectalign"
.IP "\fB\-sectobjectsymbols\fR" 4
.IX Item "-sectobjectsymbols"
.IP "\fB\-whyload\fR" 4
.IX Item "-whyload"
.IP "\fB\-seg1addr\fR" 4
.IX Item "-seg1addr"
.IP "\fB\-sectcreate\fR" 4
.IX Item "-sectcreate"
.IP "\fB\-sectobjectsymbols\fR" 4
.IX Item "-sectobjectsymbols"
.IP "\fB\-sectorder\fR" 4
.IX Item "-sectorder"
.IP "\fB\-segaddr\fR" 4
.IX Item "-segaddr"
.IP "\fB\-segs_read_only_addr\fR" 4
.IX Item "-segs_read_only_addr"
.IP "\fB\-segs_read_write_addr\fR" 4
.IX Item "-segs_read_write_addr"
.IP "\fB\-seg_addr_table\fR" 4
.IX Item "-seg_addr_table"
.IP "\fB\-seg_addr_table_filename\fR" 4
.IX Item "-seg_addr_table_filename"
.IP "\fB\-seglinkedit\fR" 4
.IX Item "-seglinkedit"
.IP "\fB\-segprot\fR" 4
.IX Item "-segprot"
.IP "\fB\-segs_read_only_addr\fR" 4
.IX Item "-segs_read_only_addr"
.IP "\fB\-segs_read_write_addr\fR" 4
.IX Item "-segs_read_write_addr"
.IP "\fB\-single_module\fR" 4
.IX Item "-single_module"
.IP "\fB\-static\fR" 4
.IX Item "-static"
.IP "\fB\-sub_library\fR" 4
.IX Item "-sub_library"
.IP "\fB\-sub_umbrella\fR" 4
.IX Item "-sub_umbrella"
.IP "\fB\-twolevel_namespace\fR" 4
.IX Item "-twolevel_namespace"
.IP "\fB\-umbrella\fR" 4
.IX Item "-umbrella"
.IP "\fB\-undefined\fR" 4
.IX Item "-undefined"
.IP "\fB\-unexported_symbols_list\fR" 4
.IX Item "-unexported_symbols_list"
.IP "\fB\-weak_reference_mismatches\fR" 4
.IX Item "-weak_reference_mismatches"
.IP "\fB\-whatsloaded\fR" 4
.IX Item "-whatsloaded"
.PD
These options is passed ta tha Darwin linker n' shit.  Da Darwin linker playa page
raps bout dem up in detail.
.SS "\s-1DEC\s0 Alpha Options"
.IX Subsection "DEC Alpha Options"
These \fB\-m\fR options is defined fo' tha \s-1DEC\s0 Alpha implementations:
.IP "\fB\-mno\-soft\-float\fR" 4
.IX Item "-mno-soft-float"
.PD 0
.IP "\fB\-msoft\-float\fR" 4
.IX Item "-msoft-float"
.PD
Use (do not use) tha hardware floating-point instructions for
floating-point operations.  When \fB\-msoft\-float\fR is specified,
functions up in \fIlibgcc.a\fR is used ta big-ass up floating-point
operations.  Unless they is replaced by routines dat emulate the
floating-point operations, or compiled up in such a way as ta booty-call such
emulations routines, these routines issue floating-point
operations.   If yo ass is compilin fo' a Alpha without floating-point
operations, you must ensure dat tha library is built so as not ta call
them.
.Sp
Note dat Alpha implementations without floating-point operations are
required ta have floating-point registers.
.IP "\fB\-mfp\-reg\fR" 4
.IX Item "-mfp-reg"
.PD 0
.IP "\fB\-mno\-fp\-regs\fR" 4
.IX Item "-mno-fp-regs"
.PD
Generate code dat uses (does not use) tha floating-point regista set.
\&\fB\-mno\-fp\-regs\fR implies \fB\-msoft\-float\fR.  If tha floating-point
regista set aint used, floating-point operandz is passed up in integer
registas as if they was integers n' floating-point thangs up in dis biatch is passed
in \f(CW$0\fR instead of \f(CW$f0\fR.  This be a non-standard callin sequence,
so any function wit a gangbangin' floating-point argument or return value called by code
compiled wit \fB\-mno\-fp\-regs\fR must also be compiled wit that
option.
.Sp
A typical use of dis option is buildin a kernel dat do not use,
and hence need not save n' restore, any floating-point registers.
.IP "\fB\-mieee\fR" 4
.IX Item "-mieee"
Da Alpha architecture implements floating-point hardware optimized for
maximum performance.  It be mostly compliant wit tha \s-1IEEE\s0 floating-point
standard. Y'all KNOW dat shit, muthafucka!  But fuck dat shiznit yo, tha word on tha street is dat fo' full compliance, software assistizzle is
required. Y'all KNOW dat shit, muthafucka!  This option generates code straight-up IEEE-compliant code
\&\fIexcept\fR dat tha \fIinexact-flag\fR aint maintained (see below).
If dis option is turned on, tha preprocessor macro \f(CW\*(C`_IEEE_FP\*(C'\fR is
defined durin compilation. I aint talkin' bout chicken n' gravy biatch.  Da resultin code is less efficient but is
able ta erectly support denormalized numbers n' exceptionizzle \s-1IEEE\s0
values like fuckin not-a-number n' plus/minus infinity.  Other Alpha
compilaz call dis option \fB\-ieee_with_no_inexact\fR.
.IP "\fB\-mieee\-with\-inexact\fR" 4
.IX Item "-mieee-with-inexact"
This is like \fB\-mieee\fR except tha generated code also maintains
the \s-1IEEE \s0\fIinexact-flag\fR.  Turnin on dis option causes the
generated code ta implement fully-compliant \s-1IEEE\s0 math.  In addizzle to
\&\f(CW\*(C`_IEEE_FP\*(C'\fR, \f(CW\*(C`_IEEE_FP_EXACT\*(C'\fR is defined as a preprocessor
macro.  On some Alpha implementations tha resultin code may execute
significantly slower than tha code generated by default.  Since there is
very lil code dat dependz on tha \fIinexact-flag\fR, you should
normally not specify dis option. I aint talkin' bout chicken n' gravy biatch.  Other Alpha compilaz call this
option \fB\-ieee_with_inexact\fR.
.IP "\fB\-mfp\-trap\-mode=\fR\fItrap-mode\fR" 4
.IX Item "-mfp-trap-mode=trap-mode"
This option controls what tha fuck floating-point related traps is enabled.
Other Alpha compilaz call dis option \fB\-fptm\fR \fItrap-mode\fR.
Da trap mode can be set ta one of four joints:
.RS 4
.IP "\fBn\fR" 4
.IX Item "n"
This is tha default (normal) setting.  Da only traps dat is enabled
are tha ones dat cannot be disabled up in software (e.g., division by zero
trap).
.IP "\fBu\fR" 4
.IX Item "u"
In addizzle ta tha traps enabled by \fBn\fR, underflow traps is enabled
as well.
.IP "\fBsu\fR" 4
.IX Item "su"
Like \fBu\fR yo, but tha instructions is marked ta be safe fo' software
completion (see Alpha architecture manual fo' details).
.IP "\fBsui\fR" 4
.IX Item "sui"
Like \fBsu\fR yo, but inexact traps is enabled as well.
.RE
.RS 4
.RE
.IP "\fB\-mfp\-rounding\-mode=\fR\fIrounding-mode\fR" 4
.IX Item "-mfp-rounding-mode=rounding-mode"
Selects tha \s-1IEEE\s0 roundin mode.  Other Alpha compilaz call dis option
\&\fB\-fprm\fR \fIrounding-mode\fR.  Da \fIrounding-mode\fR can be one
of:
.RS 4
.IP "\fBn\fR" 4
.IX Item "n"
Normal \s-1IEEE\s0 roundin mode.  Floating-point numbers is rounded towards
the nearest machine number or towardz tha even machine number up in case
of a tie.
.IP "\fBm\fR" 4
.IX Item "m"
Round towardz minus infinity.
.IP "\fBc\fR" 4
.IX Item "c"
Chopped roundin mode.  Floating-point numbers is rounded towardz zero.
.IP "\fBd\fR" 4
.IX Item "d"
Dynamic roundin mode.  A field up in tha floating-point control register
(\fIfpcr\fR, peep Alpha architecture reference manual) controls the
roundin mode up in effect.  Da C library initializes dis regista for
roundin towardz plus infinity.  Thus, unless yo' program modifies the
\&\fIfpcr\fR, \fBd\fR correspondz ta round towardz plus infinity.
.RE
.RS 4
.RE
.IP "\fB\-mtrap\-precision=\fR\fItrap-precision\fR" 4
.IX Item "-mtrap-precision=trap-precision"
In tha Alpha architecture, floating-point traps is imprecise.  This
means without software assistizzle it is impossible ta recover from a
floatin trap n' program execution normally need ta be terminated.
\&\s-1GCC\s0 can generate code dat can assist operatin system trap handlezs
in determinin tha exact location dat caused a gangbangin' floating-point trap.
Dependin on tha requirementz of a application, different levels of
precisions can be selected:
.RS 4
.IP "\fBp\fR" 4
.IX Item "p"
Program precision. I aint talkin' bout chicken n' gravy biatch.  This option is tha default n' means a trap handlez
can only identify which program caused a gangbangin' floating-point exception.
.IP "\fBf\fR" 4
.IX Item "f"
Function precision. I aint talkin' bout chicken n' gravy biatch.  Da trap handlez can determine tha function that
caused a gangbangin' floating-point exception.
.IP "\fBi\fR" 4
.IX Item "i"
Instruction precision. I aint talkin' bout chicken n' gravy biatch.  Da trap handlez can determine tha exact
instruction dat caused a gangbangin' floating-point exception.
.RE
.RS 4
.Sp
Other Alpha compilaz provide tha equivalent options called
\&\fB\-scope_safe\fR n' \fB\-resumption_safe\fR.
.RE
.IP "\fB\-mieee\-conformant\fR" 4
.IX Item "-mieee-conformant"
This option marks tha generated code as \s-1IEEE\s0 conformant.  Yo ass must not
use dis option unless you also specify \fB\-mtrap\-precision=i\fR n' either
\&\fB\-mfp\-trap\-mode=su\fR or \fB\-mfp\-trap\-mode=sui\fR.  Its only effect
is ta emit tha line \fB.eflag 48\fR up in tha function prologue of the
generated assembly file.
.IP "\fB\-mbuild\-constants\fR" 4
.IX Item "-mbuild-constants"
Normally \s-1GCC\s0 examines a 32\- or 64\-bit integer constant to
see if it can construct it from smalla constants up in two or three
instructions.  If it cannot, it outputs tha constant as a literal and
generates code ta load it from tha data segment at run time.
.Sp
Use dis option ta require \s-1GCC\s0 ta construct \fIall\fR integer constants
usin code, even if it takes mo' instructions (the maximum is six).
.Sp
Yo ass typically use dis option ta build a gangbangin' finger-lickin' dirty-ass shared library dynamic
loader n' shit.  Itself a gangbangin' finger-lickin' dirty-ass shared library, it must relocate itself up in memory
before it can find tha variablez n' constants up in its own data segment.
.IP "\fB\-mbwx\fR" 4
.IX Item "-mbwx"
.PD 0
.IP "\fB\-mno\-bwx\fR" 4
.IX Item "-mno-bwx"
.IP "\fB\-mcix\fR" 4
.IX Item "-mcix"
.IP "\fB\-mno\-cix\fR" 4
.IX Item "-mno-cix"
.IP "\fB\-mfix\fR" 4
.IX Item "-mfix"
.IP "\fB\-mno\-fix\fR" 4
.IX Item "-mno-fix"
.IP "\fB\-mmax\fR" 4
.IX Item "-mmax"
.IP "\fB\-mno\-max\fR" 4
.IX Item "-mno-max"
.PD
Indicate whether \s-1GCC\s0 should generate code ta use tha optionizzle \s-1BWX,
CIX, FIX\s0 n' \s-1MAX\s0 instruction sets, n' you can put dat on yo' toast.  Da default is ta use tha instruction
sets supported by tha \s-1CPU\s0 type specified via \fB\-mcpu=\fR option or that
of tha \s-1CPU\s0 on which \s-1GCC\s0 was built if none is specified.
.IP "\fB\-mfloat\-vax\fR" 4
.IX Item "-mfloat-vax"
.PD 0
.IP "\fB\-mfloat\-ieee\fR" 4
.IX Item "-mfloat-ieee"
.PD
Generate code dat uses (does not use) \s-1VAX F\s0 n' G floating-point
arithmetic instead of \s-1IEEE\s0 single n' double precision.
.IP "\fB\-mexplicit\-relocs\fR" 4
.IX Item "-mexplicit-relocs"
.PD 0
.IP "\fB\-mno\-explicit\-relocs\fR" 4
.IX Item "-mno-explicit-relocs"
.PD
Older Alpha assemblaz provided no way ta generate symbol relocations
except via assembla macros.  Use of these macros do not allow
optimal instruction scheduling.  \s-1GNU\s0 binutils az of version 2.12
supports a freshly smoked up syntax dat allows tha compila ta explicitly mark
which relocations should apply ta which instructions.  This option
is mostly useful fo' debugging, as \s-1GCC\s0 detects tha capabilitizzles of
the assembla when it is built n' sets tha default accordingly.
.IP "\fB\-msmall\-data\fR" 4
.IX Item "-msmall-data"
.PD 0
.IP "\fB\-mlarge\-data\fR" 4
.IX Item "-mlarge-data"
.PD
When \fB\-mexplicit\-relocs\fR is up in effect, static data is
accessed via \fIgp-relative\fR relocations.  When \fB\-msmall\-data\fR
is used, objects 8 bytes long or smalla is placed up in a \fIsmall data area\fR
(the \f(CW\*(C`.sdata\*(C'\fR n' \f(CW\*(C`.sbss\*(C'\fR sections) n' is accessed via
16\-bit relocations off of tha \f(CW$gp\fR regista n' shit.  This limits the
size of tha lil' small-ass data area ta 64KB yo, but allows tha variablez ta be
directly accessed via a single instruction.
.Sp
Da default is \fB\-mlarge\-data\fR.  With dis option tha data area
is limited ta just below 2GB.  Programs dat require mo' than 2GB of
data must use \f(CW\*(C`malloc\*(C'\fR or \f(CW\*(C`mmap\*(C'\fR ta allocate tha data up in the
heap instead of up in tha programz data segment.
.Sp
When generatin code fo' shared libraries, \fB\-fpic\fR implies
\&\fB\-msmall\-data\fR n' \fB\-fPIC\fR implies \fB\-mlarge\-data\fR.
.IP "\fB\-msmall\-text\fR" 4
.IX Item "-msmall-text"
.PD 0
.IP "\fB\-mlarge\-text\fR" 4
.IX Item "-mlarge-text"
.PD
When \fB\-msmall\-text\fR is used, tha compila assumes dat the
code of tha entire program (or shared library) fits up in 4MB, n' is
thus reachable wit a funky-ass branch instruction. I aint talkin' bout chicken n' gravy biatch.  When \fB\-msmall\-data\fR
is used, tha compila can assume dat all local symbols share the
same \f(CW$gp\fR value, n' thus reduce tha number of instructions
required fo' a gangbangin' function call from 4 ta 1.
.Sp
Da default is \fB\-mlarge\-text\fR.
.IP "\fB\-mcpu=\fR\fIcpu_type\fR" 4
.IX Item "-mcpu=cpu_type"
Set tha instruction set n' instruction schedulin parametas for
machine type \fIcpu_type\fR.  Yo ass can specify either tha \fB\s-1EV\s0\fR
style name or tha correspondin chip number n' shit.  \s-1GCC\s0 supports scheduling
parametas fo' tha \s-1EV4, EV5\s0 n' \s-1EV6\s0 crew of processors and
chooses tha default joints fo' tha instruction set from tha processor
you specify.  If you do not specify a processor type, \s-1GCC\s0 defaults
to tha processor on which tha compila was built.
.Sp
Supported joints fo' \fIcpu_type\fR are
.RS 4
.IP "\fBev4\fR" 4
.IX Item "ev4"
.PD 0
.IP "\fBev45\fR" 4
.IX Item "ev45"
.IP "\fB21064\fR" 4
.IX Item "21064"
.PD
Schedulez as a \s-1EV4\s0 n' has no instruction set extensions.
.IP "\fBev5\fR" 4
.IX Item "ev5"
.PD 0
.IP "\fB21164\fR" 4
.IX Item "21164"
.PD
Schedulez as a \s-1EV5\s0 n' has no instruction set extensions.
.IP "\fBev56\fR" 4
.IX Item "ev56"
.PD 0
.IP "\fB21164a\fR" 4
.IX Item "21164a"
.PD
Schedulez as a \s-1EV5\s0 n' supports tha \s-1BWX\s0 extension.
.IP "\fBpca56\fR" 4
.IX Item "pca56"
.PD 0
.IP "\fB21164pc\fR" 4
.IX Item "21164pc"
.IP "\fB21164PC\fR" 4
.IX Item "21164PC"
.PD
Schedulez as a \s-1EV5\s0 n' supports tha \s-1BWX\s0 n' \s-1MAX\s0 extensions.
.IP "\fBev6\fR" 4
.IX Item "ev6"
.PD 0
.IP "\fB21264\fR" 4
.IX Item "21264"
.PD
Schedulez as a \s-1EV6\s0 n' supports tha \s-1BWX, FIX,\s0 n' \s-1MAX\s0 extensions.
.IP "\fBev67\fR" 4
.IX Item "ev67"
.PD 0
.IP "\fB21264a\fR" 4
.IX Item "21264a"
.PD
Schedulez as a \s-1EV6\s0 n' supports tha \s-1BWX, CIX, FIX,\s0 n' \s-1MAX\s0 extensions.
.RE
.RS 4
.Sp
Natizzle toolchains also support tha value \fBnative\fR,
which selects tha dopest architecture option fo' tha host processor.
\&\fB\-mcpu=native\fR has no effect if \s-1GCC\s0 do not recognize
the processor.
.RE
.IP "\fB\-mtune=\fR\fIcpu_type\fR" 4
.IX Item "-mtune=cpu_type"
Set only tha instruction schedulin parametas fo' machine type
\&\fIcpu_type\fR.  Da instruction set aint chizzled.
.Sp
Natizzle toolchains also support tha value \fBnative\fR,
which selects tha dopest architecture option fo' tha host processor.
\&\fB\-mtune=native\fR has no effect if \s-1GCC\s0 do not recognize
the processor.
.IP "\fB\-mmemory\-latency=\fR\fItime\fR" 4
.IX Item "-mmemory-latency=time"
Sets tha latency tha schedula should assume fo' typical memory
references as peeped by tha application. I aint talkin' bout chicken n' gravy biatch.  This number is highly
dependent on tha memory access patterns used by tha application
and tha size of tha external cache on tha machine.
.Sp
Valid options fo' \fItime\fR are
.RS 4
.IP "\fInumber\fR" 4
.IX Item "number"
A decimal number representin clock cycles.
.IP "\fBL1\fR" 4
.IX Item "L1"
.PD 0
.IP "\fBL2\fR" 4
.IX Item "L2"
.IP "\fBL3\fR" 4
.IX Item "L3"
.IP "\fBmain\fR" 4
.IX Item "main"
.PD
Da compila gotz nuff estimatez of tha number of clock cyclez for
\&\*(L"typical\*(R" \s-1EV4 & EV5\s0 hardware fo' tha Level 1, 2 & 3 caches
(also called Dcache, Scache, n' Bcache), as well as ta main memory.
Note dat L3 is only valid fo' \s-1EV5.\s0
.RE
.RS 4
.RE
.SS "\s-1FR30\s0 Options"
.IX Subsection "FR30 Options"
These options is defined specifically fo' tha \s-1FR30\s0 port.
.IP "\fB\-msmall\-model\fR" 4
.IX Item "-msmall-model"
Use tha lil' small-ass address space model.  This can produce smalla code yo, but
it do assume dat all symbolic joints n' addresses fit tha fuck into a
20\-bit range.
.IP "\fB\-mno\-lsim\fR" 4
.IX Item "-mno-lsim"
Assume dat runtime support has been provided n' so there is no need
to include tha simulator library (\fIlibsim.a\fR) on tha linker
command line.
.SS "\s-1FRV\s0 Options"
.IX Subsection "FRV Options"
.IP "\fB\-mgpr\-32\fR" 4
.IX Item "-mgpr-32"
Only use tha straight-up original gangsta 32 general-purpose registers.
.IP "\fB\-mgpr\-64\fR" 4
.IX Item "-mgpr-64"
Use all 64 general-purpose registers.
.IP "\fB\-mfpr\-32\fR" 4
.IX Item "-mfpr-32"
Use only tha straight-up original gangsta 32 floating-point registers.
.IP "\fB\-mfpr\-64\fR" 4
.IX Item "-mfpr-64"
Use all 64 floating-point registers.
.IP "\fB\-mhard\-float\fR" 4
.IX Item "-mhard-float"
Use hardware instructions fo' floating-point operations.
.IP "\fB\-msoft\-float\fR" 4
.IX Item "-msoft-float"
Use library routines fo' floating-point operations.
.IP "\fB\-malloc\-cc\fR" 4
.IX Item "-malloc-cc"
Dynamically allocate condizzle code registers.
.IP "\fB\-mfixed\-cc\fR" 4
.IX Item "-mfixed-cc"
Do not try ta dynamically allocate condizzle code registers, only
use \f(CW\*(C`icc0\*(C'\fR n' \f(CW\*(C`fcc0\*(C'\fR.
.IP "\fB\-mdword\fR" 4
.IX Item "-mdword"
Change \s-1ABI\s0 ta use double word insns.
.IP "\fB\-mno\-dword\fR" 4
.IX Item "-mno-dword"
Do not use double word instructions.
.IP "\fB\-mdouble\fR" 4
.IX Item "-mdouble"
Use floating-point double instructions.
.IP "\fB\-mno\-double\fR" 4
.IX Item "-mno-double"
Do not use floating-point double instructions.
.IP "\fB\-mmedia\fR" 4
.IX Item "-mmedia"
Use media instructions.
.IP "\fB\-mno\-media\fR" 4
.IX Item "-mno-media"
Do not use media instructions.
.IP "\fB\-mmuladd\fR" 4
.IX Item "-mmuladd"
Use multiply n' add/subtract instructions.
.IP "\fB\-mno\-muladd\fR" 4
.IX Item "-mno-muladd"
Do not use multiply n' add/subtract instructions.
.IP "\fB\-mfdpic\fR" 4
.IX Item "-mfdpic"
Select tha \s-1FDPIC ABI,\s0 which uses function descriptors ta represent
pointas ta functions.  Without any PIC/PIE\-related options, it
implies \fB\-fPIE\fR.  With \fB\-fpic\fR or \fB\-fpie\fR, it
assumes \s-1GOT\s0 entries n' lil' small-ass data is within a 12\-bit range from the
\&\s-1GOT\s0 base address; wit \fB\-fPIC\fR or \fB\-fPIE\fR, \s-1GOT\s0 offsets
are computed wit 32 bits.
With a \fBbfin-elf\fR target, dis option implies \fB\-msim\fR.
.IP "\fB\-minline\-plt\fR" 4
.IX Item "-minline-plt"
Enable inlinin of \s-1PLT\s0 entries up in function calls ta functions dat are
not known ta bind locally.  It has no effect without \fB\-mfdpic\fR.
It aint nuthin but enabled by default if optimizin fo' speed n' compilin for
shared libraries (i.e., \fB\-fPIC\fR or \fB\-fpic\fR), or when an
optimization option like fuckin \fB\-O3\fR or above is present up in the
command line.
.IP "\fB\-mTLS\fR" 4
.IX Item "-mTLS"
Assume a big-ass \s-1TLS\s0 segment when generatin thread-local code.
.IP "\fB\-mtls\fR" 4
.IX Item "-mtls"
Do not assume a big-ass \s-1TLS\s0 segment when generatin thread-local code.
.IP "\fB\-mgprel\-ro\fR" 4
.IX Item "-mgprel-ro"
Enable tha use of \f(CW\*(C`GPREL\*(C'\fR relocations up in tha \s-1FDPIC ABI\s0 fo' data
that is known ta be up in read-only sections.  It aint nuthin but enabled by default,
except fo' \fB\-fpic\fR or \fB\-fpie\fR: even though it may help
make tha global offset table smaller, it trades 1 instruction fo' 4.
With \fB\-fPIC\fR or \fB\-fPIE\fR, it trades 3 instructions fo' 4,
one of which may be shared by multiple symbols, n' it avoidz tha need
for a \s-1GOT\s0 entry fo' tha referenced symbol, so itz mo' likely ta be a
win. I aint talkin' bout chicken n' gravy biatch.  If it is not, \fB\-mno\-gprel\-ro\fR can be used ta disable dat shit.
.IP "\fB\-multilib\-library\-pic\fR" 4
.IX Item "-multilib-library-pic"
Link wit tha (library, not \s-1FD\s0) pic libraries. Put ya muthafuckin choppers up if ya feel dis!  It aint nuthin but implied by
\&\fB\-mlibrary\-pic\fR, as well as by \fB\-fPIC\fR and
\&\fB\-fpic\fR without \fB\-mfdpic\fR.  Yo ass should never gotta use
it explicitly.
.IP "\fB\-mlinked\-fp\fR" 4
.IX Item "-mlinked-fp"
Big up tha \s-1EABI\s0 requirement of always bustin a gangbangin' frame pointa whenever
a stack frame be allocated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This option is enabled by default n' can
be disabled wit \fB\-mno\-linked\-fp\fR.
.IP "\fB\-mlong\-calls\fR" 4
.IX Item "-mlong-calls"
Use indirect addressin ta booty-call functions outside tha current
compilation unit.  This allows tha functions ta be placed anywhere
within tha 32\-bit address space.
.IP "\fB\-malign\-labels\fR" 4
.IX Item "-malign-labels"
Try ta align labels ta a 8\-byte boundary by insertin NOPs tha fuck into the
previous packet.  This option only has a effect when \s-1VLIW\s0 packing
is enabled. Y'all KNOW dat shit, muthafucka!  It don't create freshly smoked up packets; it merely addz NOPs to
existin ones.
.IP "\fB\-mlibrary\-pic\fR" 4
.IX Item "-mlibrary-pic"
Generate position-independent \s-1EABI\s0 code.
.IP "\fB\-macc\-4\fR" 4
.IX Item "-macc-4"
Use only tha straight-up original gangsta four media accumulator registers.
.IP "\fB\-macc\-8\fR" 4
.IX Item "-macc-8"
Use all eight media accumulator registers.
.IP "\fB\-mpack\fR" 4
.IX Item "-mpack"
Pack \s-1VLIW\s0 instructions.
.IP "\fB\-mno\-pack\fR" 4
.IX Item "-mno-pack"
Do not pack \s-1VLIW\s0 instructions.
.IP "\fB\-mno\-eflags\fR" 4
.IX Item "-mno-eflags"
Do not mark \s-1ABI\s0 switches up in e_flags.
.IP "\fB\-mcond\-move\fR" 4
.IX Item "-mcond-move"
Enable tha use of conditional-move instructions (default).
.Sp
This switch is mainly fo' debuggin tha compila n' will likely be removed
in a gangbangin' future version.
.IP "\fB\-mno\-cond\-move\fR" 4
.IX Item "-mno-cond-move"
Disable tha use of conditional-move instructions.
.Sp
This switch is mainly fo' debuggin tha compila n' will likely be removed
in a gangbangin' future version.
.IP "\fB\-mscc\fR" 4
.IX Item "-mscc"
Enable tha use of conditionizzle set instructions (default).
.Sp
This switch is mainly fo' debuggin tha compila n' will likely be removed
in a gangbangin' future version.
.IP "\fB\-mno\-scc\fR" 4
.IX Item "-mno-scc"
Disable tha use of conditionizzle set instructions.
.Sp
This switch is mainly fo' debuggin tha compila n' will likely be removed
in a gangbangin' future version.
.IP "\fB\-mcond\-exec\fR" 4
.IX Item "-mcond-exec"
Enable tha use of conditionizzle execution (default).
.Sp
This switch is mainly fo' debuggin tha compila n' will likely be removed
in a gangbangin' future version.
.IP "\fB\-mno\-cond\-exec\fR" 4
.IX Item "-mno-cond-exec"
Disable tha use of conditionizzle execution.
.Sp
This switch is mainly fo' debuggin tha compila n' will likely be removed
in a gangbangin' future version.
.IP "\fB\-mvliw\-branch\fR" 4
.IX Item "-mvliw-branch"
Run a pass ta pack branches tha fuck into \s-1VLIW\s0 instructions (default).
.Sp
This switch is mainly fo' debuggin tha compila n' will likely be removed
in a gangbangin' future version.
.IP "\fB\-mno\-vliw\-branch\fR" 4
.IX Item "-mno-vliw-branch"
Do not run a pass ta pack branches tha fuck into \s-1VLIW\s0 instructions.
.Sp
This switch is mainly fo' debuggin tha compila n' will likely be removed
in a gangbangin' future version.
.IP "\fB\-mmulti\-cond\-exec\fR" 4
.IX Item "-mmulti-cond-exec"
Enable optimization of \f(CW\*(C`&&\*(C'\fR n' \f(CW\*(C`||\*(C'\fR up in conditionizzle execution
(default).
.Sp
This switch is mainly fo' debuggin tha compila n' will likely be removed
in a gangbangin' future version.
.IP "\fB\-mno\-multi\-cond\-exec\fR" 4
.IX Item "-mno-multi-cond-exec"
Disable optimization of \f(CW\*(C`&&\*(C'\fR n' \f(CW\*(C`||\*(C'\fR up in conditionizzle execution.
.Sp
This switch is mainly fo' debuggin tha compila n' will likely be removed
in a gangbangin' future version.
.IP "\fB\-mnested\-cond\-exec\fR" 4
.IX Item "-mnested-cond-exec"
Enable nested conditionizzle execution optimizations (default).
.Sp
This switch is mainly fo' debuggin tha compila n' will likely be removed
in a gangbangin' future version.
.IP "\fB\-mno\-nested\-cond\-exec\fR" 4
.IX Item "-mno-nested-cond-exec"
Disable nested conditionizzle execution optimizations.
.Sp
This switch is mainly fo' debuggin tha compila n' will likely be removed
in a gangbangin' future version.
.IP "\fB\-moptimize\-membar\fR" 4
.IX Item "-moptimize-membar"
This switch removes redundant \f(CW\*(C`membar\*(C'\fR instructions from the
compiler-generated code.  It be enabled by default.
.IP "\fB\-mno\-optimize\-membar\fR" 4
.IX Item "-mno-optimize-membar"
This switch disablez tha automatic removal of redundant \f(CW\*(C`membar\*(C'\fR
instructions from tha generated code.
.IP "\fB\-mtomcat\-stats\fR" 4
.IX Item "-mtomcat-stats"
Cause gas ta print up tomcat statistics.
.IP "\fB\-mcpu=\fR\fIcpu\fR" 4
.IX Item "-mcpu=cpu"
Select tha processor type fo' which ta generate code.  Possible joints are
\&\fBfrv\fR, \fBfr550\fR, \fBtomcat\fR, \fBfr500\fR, \fBfr450\fR,
\&\fBfr405\fR, \fBfr400\fR, \fBfr300\fR n' \fBsimple\fR.
.SS "GNU/Linux Options"
.IX Subsection "GNU/Linux Options"
These \fB\-m\fR options is defined fo' GNU/Linux targets:
.IP "\fB\-mglibc\fR" 4
.IX Item "-mglibc"
Use tha \s-1GNU C\s0 library.  This is tha default except
on \fB*\-*\-linux\-*uclibc*\fR n' \fB*\-*\-linux\-*android*\fR targets.
.IP "\fB\-muclibc\fR" 4
.IX Item "-muclibc"
Use uClibc C library.  This is tha default on
\&\fB*\-*\-linux\-*uclibc*\fR targets.
.IP "\fB\-mbionic\fR" 4
.IX Item "-mbionic"
Use Bionic C library.  This is tha default on
\&\fB*\-*\-linux\-*android*\fR targets.
.IP "\fB\-mandroid\fR" 4
.IX Item "-mandroid"
Compile code compatible wit Andrizzle platform.  This is tha default on
\&\fB*\-*\-linux\-*android*\fR targets.
.Sp
When compiling, dis option enablez \fB\-mbionic\fR, \fB\-fPIC\fR,
\&\fB\-fno\-exceptions\fR n' \fB\-fno\-rtti\fR by default.  When linking,
this option make tha \s-1GCC\s0 driver pass Android-specific options ta tha linker.
Finally, dis option causes tha preprocessor macro \f(CW\*(C`_\|_ANDROID_\|_\*(C'\fR
to be defined.
.IP "\fB\-tno\-android\-cc\fR" 4
.IX Item "-tno-android-cc"
Disable compilation effectz of \fB\-mandroid\fR, i.e., do not enable
\&\fB\-mbionic\fR, \fB\-fPIC\fR, \fB\-fno\-exceptions\fR and
\&\fB\-fno\-rtti\fR by default.
.IP "\fB\-tno\-android\-ld\fR" 4
.IX Item "-tno-android-ld"
Disable linkin effectz of \fB\-mandroid\fR, i.e., pass standard Linux
linkin options ta tha linker.
.SS "H8/300 Options"
.IX Subsection "H8/300 Options"
These \fB\-m\fR options is defined fo' tha H8/300 implementations:
.IP "\fB\-mrelax\fR" 4
.IX Item "-mrelax"
Shorten some address references at link time, when possible; uses the
linker option \fB\-relax\fR.
.IP "\fB\-mh\fR" 4
.IX Item "-mh"
Generate code fo' tha H8/300H.
.IP "\fB\-ms\fR" 4
.IX Item "-ms"
Generate code fo' tha H8S.
.IP "\fB\-mn\fR" 4
.IX Item "-mn"
Generate code fo' tha H8S n' H8/300H up in tha aiiight mode.  This switch
must be used either wit \fB\-mh\fR or \fB\-ms\fR.
.IP "\fB\-ms2600\fR" 4
.IX Item "-ms2600"
Generate code fo' tha H8S/2600.  This switch must be used wit \fB\-ms\fR.
.IP "\fB\-mexr\fR" 4
.IX Item "-mexr"
Extended registas is stored on stack before execution of function
with monitor attribute. Default option is \fB\-mexr\fR.
This option is valid only fo' H8S targets.
.IP "\fB\-mno\-exr\fR" 4
.IX Item "-mno-exr"
Extended registas is not stored on stack before execution of function 
with monitor attribute. Default option is \fB\-mno\-exr\fR. 
This option is valid only fo' H8S targets.
.IP "\fB\-mint32\fR" 4
.IX Item "-mint32"
Make \f(CW\*(C`int\*(C'\fR data 32 bits by default.
.IP "\fB\-malign\-300\fR" 4
.IX Item "-malign-300"
On tha H8/300H n' H8S, use tha same alignment rulez as fo' tha H8/300.
Da default fo' tha H8/300H n' H8S is ta align longs n' floats on
4\-byte boundaries.
\&\fB\-malign\-300\fR causes dem ta be aligned on 2\-byte boundaries.
This option has no effect on tha H8/300.
.SS "\s-1HPPA\s0 Options"
.IX Subsection "HPPA Options"
These \fB\-m\fR options is defined fo' tha \s-1HPPA\s0 crew of computers:
.IP "\fB\-march=\fR\fIarchitecture-type\fR" 4
.IX Item "-march=architecture-type"
Generate code fo' tha specified architecture.  Da chizzlez for
\&\fIarchitecture-type\fR is \fB1.0\fR fo' \s-1PA 1.0, \s0\fB1.1\fR fo' \s-1PA
1.1,\s0 n' \fB2.0\fR fo' \s-1PA 2.0\s0 processors.  Refer to
\&\fI/usr/lib/sched.models\fR on a HP-UX system ta determine tha proper
architecture option fo' yo' machine.  Code compiled fo' lower numbered
architectures runs on higher numbered architectures yo, but not the
other way around.
.IP "\fB\-mpa\-risc\-1\-0\fR" 4
.IX Item "-mpa-risc-1-0"
.PD 0
.IP "\fB\-mpa\-risc\-1\-1\fR" 4
.IX Item "-mpa-risc-1-1"
.IP "\fB\-mpa\-risc\-2\-0\fR" 4
.IX Item "-mpa-risc-2-0"
.PD
Synonyms fo' \fB\-march=1.0\fR, \fB\-march=1.1\fR, n' \fB\-march=2.0\fR respectively.
.IP "\fB\-mbig\-switch\fR" 4
.IX Item "-mbig-switch"
Generate code suitable fo' big-ass switch tables.  Use dis option only if
the assembler/linker diss bout out-of-range branches within a switch
table.
.IP "\fB\-mjump\-in\-delay\fR" 4
.IX Item "-mjump-in-delay"
Fill delay slotz of function calls wit unconditionizzle jump instructions
by modifyin tha return pointa fo' tha function call ta be tha target
of tha conditionizzle jump.
.IP "\fB\-mdisable\-fpregs\fR" 4
.IX Item "-mdisable-fpregs"
Prevent floating-point registas from bein used up in any manner n' shit.  This is
necessary fo' compilin kernels dat big-ass up lazy context switchin of
floating-point registers.  If you use dis option n' attempt ta perform
floating-point operations, tha compila aborts.
.IP "\fB\-mdisable\-indexing\fR" 4
.IX Item "-mdisable-indexing"
Prevent tha compila from rockin indexin address modes.  This avoidz some
rather obscure problems when compilin \s-1MIG\s0 generated code under \s-1MACH.\s0
.IP "\fB\-mno\-space\-regs\fR" 4
.IX Item "-mno-space-regs"
Generate code dat assumes tha target has no space registers.  This allows
\&\s-1GCC\s0 ta generate fasta indirect calls n' use unscaled index address modes.
.Sp
Such code is suitable fo' level 0 \s-1PA\s0 systems n' kernels.
.IP "\fB\-mfast\-indirect\-calls\fR" 4
.IX Item "-mfast-indirect-calls"
Generate code dat assumes calls never cross space boundaries. Put ya muthafuckin choppers up if ya feel dis!  This
allows \s-1GCC\s0 ta emit code dat performs fasta indirect calls.
.Sp
This option do not work up in tha presence of shared libraries or nested
functions.
.IP "\fB\-mfixed\-range=\fR\fIregister-range\fR" 4
.IX Item "-mfixed-range=register-range"
Generate code treatin tha given regista range as fixed registers.
A fixed regista is one dat tha regista allocator cannot use.  This is
useful when compilin kernel code.  A regista range is specified as
two registas separated by a thugged-out dash.  Multiple regista ranges can be
specified separated by a cold-ass lil comma.
.IP "\fB\-mlong\-load\-store\fR" 4
.IX Item "-mlong-load-store"
Generate 3\-instruction load n' store sequences as sometimes required by
the HP-UX 10 linker n' shit.  This is equivalent ta tha \fB+k\fR option to
the \s-1HP\s0 compilers.
.IP "\fB\-mportable\-runtime\fR" 4
.IX Item "-mportable-runtime"
Use tha portable callin conventions proposed by \s-1HP\s0 fo' \s-1ELF\s0 systems.
.IP "\fB\-mgas\fR" 4
.IX Item "-mgas"
Enable tha use of assembla directives only \s-1GAS\s0 understands.
.IP "\fB\-mschedule=\fR\fIcpu-type\fR" 4
.IX Item "-mschedule=cpu-type"
Schedule code accordin ta tha constraints fo' tha machine type
\&\fIcpu-type\fR.  Da chizzlez fo' \fIcpu-type\fR is \fB700\fR
\&\fB7100\fR, \fB7100LC\fR, \fB7200\fR, \fB7300\fR n' \fB8000\fR.  Refer
to \fI/usr/lib/sched.models\fR on a HP-UX system ta determine the
proper schedulin option fo' yo' machine.  Da default schedulin is
\&\fB8000\fR.
.IP "\fB\-mlinker\-opt\fR" 4
.IX Item "-mlinker-opt"
Enable tha optimization pass up in tha HP-UX linker n' shit.  Note dis make symbolic
debuggin impossible.  It also triggers a funky-ass bug up in tha HP-UX 8 n' HP-UX 9
linkers up in which they give bogus error lyrics when linkin some programs.
.IP "\fB\-msoft\-float\fR" 4
.IX Item "-msoft-float"
Generate output containin library calls fo' floatin point.
\&\fBWarning:\fR tha requisite libraries is not available fo' all \s-1HPPA\s0
targets, n' you can put dat on yo' toast.  Normally tha facilitizzlez of tha machinez usual C compila are
used yo, but dis cannot be done directly up in cross-compilation. I aint talkin' bout chicken n' gravy biatch.  Yo ass must make
your own arrangements ta provide suitable library functions for
cross-compilation.
.Sp
\&\fB\-msoft\-float\fR chizzlez tha callin convention up in tha output file;
therefore, it is only useful if you compile \fIall\fR of a program with
this option. I aint talkin' bout chicken n' gravy biatch.  In particular, you need ta compile \fIlibgcc.a\fR, the
library dat comes wit \s-1GCC,\s0 wit \fB\-msoft\-float\fR up in order for
this ta work.
.IP "\fB\-msio\fR" 4
.IX Item "-msio"
Generate tha predefine, \f(CW\*(C`_SIO\*(C'\fR, fo' server \s-1IO. \s0 Da default is
\&\fB\-mwsio\fR.  This generates tha predefines, \f(CW\*(C`_\|_hp9000s700\*(C'\fR,
\&\f(CW\*(C`_\|_hp9000s700_\|_\*(C'\fR n' \f(CW\*(C`_WSIO\*(C'\fR, fo' workstation \s-1IO. \s0 These
options is available under HP-UX n' HI-UX.
.IP "\fB\-mgnu\-ld\fR" 4
.IX Item "-mgnu-ld"
Use options specific ta \s-1GNU \s0\fBld\fR.
This passes \fB\-shared\fR ta \fBld\fR when
buildin a gangbangin' finger-lickin' dirty-ass shared library.  It be tha default when \s-1GCC\s0 is configured,
explicitly or implicitly, wit tha \s-1GNU\s0 linker n' shit.  This option do not
affect which \fBld\fR is called; it only chizzlez what tha fuck parameters
are passed ta dat \fBld\fR.
Da \fBld\fR dat is called is determined by the
\&\fB\-\-with\-ld\fR configure option, \s-1GCC\s0z program search path, and
finally by tha userz \fB\s-1PATH\s0\fR.  Da linker used by \s-1GCC\s0 can be printed
usin \fBwhich `gcc \-print\-prog\-name=ld`\fR.  This option is only available
on tha 64\-bit HP-UX \s-1GCC,\s0 i.e. configured wit \fBhppa*64*\-*\-hpux*\fR.
.IP "\fB\-mhp\-ld\fR" 4
.IX Item "-mhp-ld"
Use options specific ta \s-1HP \s0\fBld\fR.
This passes \fB\-b\fR ta \fBld\fR when building
a shared library n' passes \fB+Accept TypeMismatch\fR ta \fBld\fR on all
links.  It be tha default when \s-1GCC\s0 is configured, explicitly or
implicitly, wit tha \s-1HP\s0 linker n' shit.  This option do not affect
which \fBld\fR is called; it only chizzlez what tha fuck parametas is passed ta that
\&\fBld\fR.
Da \fBld\fR dat is called is determined by tha \fB\-\-with\-ld\fR
configure option, \s-1GCC\s0z program search path, n' finally by tha user's
\&\fB\s-1PATH\s0\fR.  Da linker used by \s-1GCC\s0 can be printed rockin \fBwhich
`gcc \-print\-prog\-name=ld`\fR.  This option is only available on tha 64\-bit
HP-UX \s-1GCC,\s0 i.e. configured wit \fBhppa*64*\-*\-hpux*\fR.
.IP "\fB\-mlong\-calls\fR" 4
.IX Item "-mlong-calls"
Generate code dat uses long call sequences.  This ensures dat a cold-ass lil call
is always able ta reach linker generated stubs.  Da default is ta generate
long calls only when tha distizzle from tha call joint ta tha beginning
of tha function or translation unit, as tha case may be, exceedz a
predefined limit set by tha branch type bein used. Y'all KNOW dat shit, muthafucka!  Da limits for
normal calls is 7,600,000 n' 240,000 bytes, respectively fo' the
\&\s-1PA 2.0\s0 n' \s-1PA 1.X\s0 architectures.  Sibcalls is always limited at
240,000 bytes.
.Sp
Distances is measured from tha beginnin of functions when rockin the
\&\fB\-ffunction\-sections\fR option, or when rockin tha \fB\-mgas\fR
and \fB\-mno\-portable\-runtime\fR options together under HP-UX with
the \s-1SOM\s0 linker.
.Sp
It be normally not desirable ta use dis option as it degrades
performance.  But fuck dat shiznit yo, tha word on tha street is dat it may be useful up in big-ass applications,
particularly when partial linkin is used ta build tha application.
.Sp
Da typez of long calls used dependz on tha capabilitizzlez of the
assembla n' linker, n' tha type of code bein generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  The
impact on systems dat support long absolute calls, n' long pic
symbol-difference or pc-relatizzle calls should be relatively small.
But fuck dat shiznit yo, tha word on tha street is dat a indirect call is used on 32\-bit \s-1ELF\s0 systems up in pic code
and it is like long.
.IP "\fB\-munix=\fR\fIunix-std\fR" 4
.IX Item "-munix=unix-std"
Generate compila predefines n' select a startfile fo' tha specified
\&\s-1UNIX\s0 standard. Y'all KNOW dat shit, muthafucka!  Da chizzlez fo' \fIunix-std\fR is \fB93\fR, \fB95\fR
and \fB98\fR.  \fB93\fR is supported on all HP-UX versions.  \fB95\fR
is available on HP-UX 10.10 n' later n' shit.  \fB98\fR be available on HP-UX
11.11 n' later n' shit.  Da default joints is \fB93\fR fo' HP-UX 10.00,
\&\fB95\fR fo' HP-UX 10.10 though ta 11.00, n' \fB98\fR fo' HP-UX 11.11
and later.
.Sp
\&\fB\-munix=93\fR serves up tha same predefines as \s-1GCC 3.3\s0 n' 3.4.
\&\fB\-munix=95\fR serves up additionizzle predefines fo' \f(CW\*(C`XOPEN_UNIX\*(C'\fR
and \f(CW\*(C`_XOPEN_SOURCE_EXTENDED\*(C'\fR, n' tha startfile \fIunix95.o\fR.
\&\fB\-munix=98\fR serves up additionizzle predefines fo' \f(CW\*(C`_XOPEN_UNIX\*(C'\fR,
\&\f(CW\*(C`_XOPEN_SOURCE_EXTENDED\*(C'\fR, \f(CW\*(C`_INCLUDE_\|_STDC_A1_SOURCE\*(C'\fR and
\&\f(CW\*(C`_INCLUDE_XOPEN_SOURCE_500\*(C'\fR, n' tha startfile \fIunix98.o\fR.
.Sp
It be \fIimportant\fR ta note dat dis option chizzlez tha intercourses
for various library routines.  It also affects tha operationizzle behavior
of tha C library.  Thus, \fIextreme\fR care is needed up in rockin this
option.
.Sp
Library code dat is intended ta operate wit mo' than one \s-1UNIX\s0
standard must test, set n' restore tha variable \fI_\|_xpg4_extended_mask\fR
as appropriate.  Most \s-1GNU\s0 software don't provide dis capability.
.IP "\fB\-nolibdld\fR" 4
.IX Item "-nolibdld"
Suppress tha generation of link options ta search libdld.sl when the
\&\fB\-static\fR option is specified on HP-UX 10 n' later.
.IP "\fB\-static\fR" 4
.IX Item "-static"
Da HP-UX implementation of setlocale up in libc has a thugged-out dependency on
libdld.sl.  There aint a archive version of libdld.sl.  Thus,
when tha \fB\-static\fR option is specified, special link options
are needed ta resolve dis dependency.
.Sp
On HP-UX 10 n' later, tha \s-1GCC\s0 driver addz tha necessary options to
link wit libdld.sl when tha \fB\-static\fR option is specified.
This causes tha resultin binary ta be dynamic.  On tha 64\-bit port,
the linkers generate dynamic binaries by default up in any case.  The
\&\fB\-nolibdld\fR option can be used ta prevent tha \s-1GCC\s0 driver from
addin these link options.
.IP "\fB\-threads\fR" 4
.IX Item "-threads"
Add support fo' multithreadin wit tha \fIdce thread\fR library
under HP-UX.  This option sets flags fo' both tha preprocessor and
linker.
.SS "Intel 386 n' \s-1AMD\s0 x86\-64 Options"
.IX Subsection "Intel 386 n' AMD x86-64 Options"
These \fB\-m\fR options is defined fo' tha i386 n' x86\-64 crew of
computers:
.IP "\fB\-march=\fR\fIcpu-type\fR" 4
.IX Item "-march=cpu-type"
Generate instructions fo' tha machine type \fIcpu-type\fR.  In contrast to
\&\fB\-mtune=\fR\fIcpu-type\fR, which merely tunes tha generated code 
for tha specified \fIcpu-type\fR, \fB\-march=\fR\fIcpu-type\fR allows \s-1GCC\s0
to generate code dat may not run at all on processors other than tha one
indicated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Specifyin \fB\-march=\fR\fIcpu-type\fR implies 
\&\fB\-mtune=\fR\fIcpu-type\fR.
.Sp
Da chizzlez fo' \fIcpu-type\fR are:
.RS 4
.IP "\fBnative\fR" 4
.IX Item "native"
This selects tha \s-1CPU\s0 ta generate code fo' at compilation time by determining
the processor type of tha compilin machine.  Usin \fB\-march=native\fR
enablez all instruction subsets supported by tha local machine (hence
the result might not run on different machines).  Usin \fB\-mtune=native\fR
produces code optimized fo' tha local machine under tha constraints
of tha selected instruction set.
.IP "\fBi386\fR" 4
.IX Item "i386"
Original Gangsta Intel i386 \s-1CPU.\s0
.IP "\fBi486\fR" 4
.IX Item "i486"
Intel i486 \s-1CPU.  \s0(No schedulin is implemented fo' dis chip.)
.IP "\fBi586\fR" 4
.IX Item "i586"
.PD 0
.IP "\fBpentium\fR" 4
.IX Item "pentium"
.PD
Intel Pentium \s-1CPU\s0 wit no \s-1MMX\s0 support.
.IP "\fBpentium-mmx\fR" 4
.IX Item "pentium-mmx"
Intel Pentium \s-1MMX CPU,\s0 based on Pentium core wit \s-1MMX\s0 instruction set support.
.IP "\fBpentiumpro\fR" 4
.IX Item "pentiumpro"
Intel Pentium Pro \s-1CPU.\s0
.IP "\fBi686\fR" 4
.IX Item "i686"
When used wit \fB\-march\fR, tha Pentium Pro
instruction set is used, so tha code runs on all i686 crew chips.
When used wit \fB\-mtune\fR, it has tha same ol' dirty meanin as \fBgeneric\fR.
.IP "\fBpentium2\fR" 4
.IX Item "pentium2"
Intel Pentium \s-1II CPU,\s0 based on Pentium Pro core wit \s-1MMX\s0 instruction set
support.
.IP "\fBpentium3\fR" 4
.IX Item "pentium3"
.PD 0
.IP "\fBpentium3m\fR" 4
.IX Item "pentium3m"
.PD
Intel Pentium \s-1III CPU,\s0 based on Pentium Pro core wit \s-1MMX\s0 n' \s-1SSE\s0 instruction
set support.
.IP "\fBpentium-m\fR" 4
.IX Item "pentium-m"
Intel Pentium M; low-power version of Intel Pentium \s-1III CPU\s0
with \s-1MMX, SSE\s0 n' \s-1SSE2\s0 instruction set support.  Used by Centrino notebooks.
.IP "\fBpentium4\fR" 4
.IX Item "pentium4"
.PD 0
.IP "\fBpentium4m\fR" 4
.IX Item "pentium4m"
.PD
Intel Pentium 4 \s-1CPU\s0 wit \s-1MMX, SSE\s0 n' \s-1SSE2\s0 instruction set support.
.IP "\fBprescott\fR" 4
.IX Item "prescott"
Improved version of Intel Pentium 4 \s-1CPU\s0 wit \s-1MMX, SSE, SSE2\s0 n' \s-1SSE3\s0 instruction
set support.
.IP "\fBnocona\fR" 4
.IX Item "nocona"
Improved version of Intel Pentium 4 \s-1CPU\s0 wit 64\-bit extensions, \s-1MMX, SSE,
SSE2\s0 n' \s-1SSE3\s0 instruction set support.
.IP "\fBcore2\fR" 4
.IX Item "core2"
Intel Core 2 \s-1CPU\s0 wit 64\-bit extensions, \s-1MMX, SSE, SSE2, SSE3\s0 n' \s-1SSSE3\s0
instruction set support.
.IP "\fBcorei7\fR" 4
.IX Item "corei7"
Intel Core i7 \s-1CPU\s0 wit 64\-bit extensions, \s-1MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1\s0
and \s-1SSE4.2\s0 instruction set support.
.IP "\fBcorei7\-avx\fR" 4
.IX Item "corei7-avx"
Intel Core i7 \s-1CPU\s0 wit 64\-bit extensions, \s-1MMX, SSE, SSE2, SSE3, SSSE3,
SSE4.1, SSE4.2, AVX, AES\s0 n' \s-1PCLMUL\s0 instruction set support.
.IP "\fBcore-avx-i\fR" 4
.IX Item "core-avx-i"
Intel Core \s-1CPU\s0 wit 64\-bit extensions, \s-1MMX, SSE, SSE2, SSE3, SSSE3,
SSE4.1, SSE4.2, AVX, AES, PCLMUL, FSGSBASE, RDRND\s0 n' F16C instruction
set support.
.IP "\fBcore\-avx2\fR" 4
.IX Item "core-avx2"
Intel Core \s-1CPU\s0 wit 64\-bit extensions, \s-1MOVBE, MMX, SSE, SSE2, SSE3, SSSE3,
SSE4.1, SSE4.2, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2\s0
and F16C instruction set support.
.IP "\fBatom\fR" 4
.IX Item "atom"
Intel Atom \s-1CPU\s0 wit 64\-bit extensions, \s-1MOVBE, MMX, SSE, SSE2, SSE3\s0 n' \s-1SSSE3\s0
instruction set support.
.IP "\fBk6\fR" 4
.IX Item "k6"
\&\s-1AMD K6 CPU\s0 wit \s-1MMX\s0 instruction set support.
.IP "\fBk6\-2\fR" 4
.IX Item "k6-2"
.PD 0
.IP "\fBk6\-3\fR" 4
.IX Item "k6-3"
.PD
Improved versionz of \s-1AMD K6 CPU\s0 wit \s-1MMX\s0 n' 3DNow! instruction set support.
.IP "\fBathlon\fR" 4
.IX Item "athlon"
.PD 0
.IP "\fBathlon-tbird\fR" 4
.IX Item "athlon-tbird"
.PD
\&\s-1AMD\s0 Athlon \s-1CPU\s0 wit \s-1MMX,\s0 3dNOW!, enhanced 3DNow! n' \s-1SSE\s0 prefetch instructions
support.
.IP "\fBathlon\-4\fR" 4
.IX Item "athlon-4"
.PD 0
.IP "\fBathlon-xp\fR" 4
.IX Item "athlon-xp"
.IP "\fBathlon-mp\fR" 4
.IX Item "athlon-mp"
.PD
Improved \s-1AMD\s0 Athlon \s-1CPU\s0 wit \s-1MMX,\s0 3DNow!, enhanced 3DNow! n' full \s-1SSE\s0
instruction set support.
.IP "\fBk8\fR" 4
.IX Item "k8"
.PD 0
.IP "\fBopteron\fR" 4
.IX Item "opteron"
.IP "\fBathlon64\fR" 4
.IX Item "athlon64"
.IP "\fBathlon-fx\fR" 4
.IX Item "athlon-fx"
.PD
Processors based on tha \s-1AMD K8\s0 core wit x86\-64 instruction set support,
includin tha \s-1AMD\s0 Opteron, Athlon 64, n' Athlon 64 \s-1FX\s0 processors.
(This supersets \s-1MMX, SSE, SSE2,\s0 3DNow!, enhanced 3DNow! n' 64\-bit
instruction set extensions.)
.IP "\fBk8\-sse3\fR" 4
.IX Item "k8-sse3"
.PD 0
.IP "\fBopteron\-sse3\fR" 4
.IX Item "opteron-sse3"
.IP "\fBathlon64\-sse3\fR" 4
.IX Item "athlon64-sse3"
.PD
Improved versionz of \s-1AMD K8\s0 cores wit \s-1SSE3\s0 instruction set support.
.IP "\fBamdfam10\fR" 4
.IX Item "amdfam10"
.PD 0
.IP "\fBbarcelona\fR" 4
.IX Item "barcelona"
.PD
CPUs based on \s-1AMD\s0 Family 10h cores wit x86\-64 instruction set support.  (This
supersets \s-1MMX, SSE, SSE2, SSE3, SSE4A,\s0 3DNow!, enhanced 3DNow!, \s-1ABM\s0 n' 64\-bit
instruction set extensions.)
.IP "\fBbdver1\fR" 4
.IX Item "bdver1"
CPUs based on \s-1AMD\s0 Family 15h cores wit x86\-64 instruction set support.  (This
supersets \s-1FMA4, AVX, XOP, LWP, AES, PCL_MUL, CX16, MMX, SSE, SSE2, SSE3, SSE4A,
SSSE3, SSE4.1, SSE4.2, ABM\s0 n' 64\-bit instruction set extensions.)
.IP "\fBbdver2\fR" 4
.IX Item "bdver2"
\&\s-1AMD\s0 Family 15h core based CPUs wit x86\-64 instruction set support.  (This
supersets \s-1BMI, TBM, F16C, FMA, AVX, XOP, LWP, AES, PCL_MUL, CX16, MMX, SSE,
SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM\s0 n' 64\-bit instruction set 
extensions.)
.IP "\fBbdver3\fR" 4
.IX Item "bdver3"
\&\s-1AMD\s0 Family 15h core based CPUs wit x86\-64 instruction set support.  (This
supersets \s-1BMI, TBM, F16C, FMA, AVX, XOP, LWP, AES, PCL_MUL, CX16, MMX, SSE,
SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM\s0 n' 64\-bit instruction set 
extensions.
.IP "\fBbtver1\fR" 4
.IX Item "btver1"
CPUs based on \s-1AMD\s0 Family 14h cores wit x86\-64 instruction set support.  (This
supersets \s-1MMX, SSE, SSE2, SSE3, SSSE3, SSE4A, CX16, ABM\s0 n' 64\-bit
instruction set extensions.)
.IP "\fBbtver2\fR" 4
.IX Item "btver2"
CPUs based on \s-1AMD\s0 Family 16h cores wit x86\-64 instruction set support. This
includes \s-1MOVBE, F16C, BMI, AVX, PCL_MUL, AES, SSE4.2, SSE4.1, CX16, ABM,
SSE4A, SSSE3, SSE3, SSE2, SSE, MMX\s0 n' 64\-bit instruction set extensions.
.IP "\fBwinchip\-c6\fR" 4
.IX Item "winchip-c6"
\&\s-1IDT\s0 WinChip C6 \s-1CPU,\s0 dealt up in same way as i486 wit additionizzle \s-1MMX\s0 instruction
set support.
.IP "\fBwinchip2\fR" 4
.IX Item "winchip2"
\&\s-1IDT\s0 WinChip 2 \s-1CPU,\s0 dealt up in same way as i486 wit additionizzle \s-1MMX\s0 n' 3DNow!
instruction set support.
.IP "\fBc3\fR" 4
.IX Item "c3"
\&\s-1VIA C3 CPU\s0 wit \s-1MMX\s0 n' 3DNow! instruction set support.  (No schedulin is
implemented fo' dis chip.)
.IP "\fBc3\-2\fR" 4
.IX Item "c3-2"
\&\s-1VIA C3\-2 \s0(Nehemiah/C5XL) \s-1CPU\s0 wit \s-1MMX\s0 n' \s-1SSE\s0 instruction set support.
(No schedulin is
implemented fo' dis chip.)
.IP "\fBgeode\fR" 4
.IX Item "geode"
\&\s-1AMD\s0 Geode embedded processor wit \s-1MMX\s0 n' 3DNow! instruction set support.
.RE
.RS 4
.RE
.IP "\fB\-mtune=\fR\fIcpu-type\fR" 4
.IX Item "-mtune=cpu-type"
Tune ta \fIcpu-type\fR every last muthafuckin thang applicable bout tha generated code, except
for tha \s-1ABI\s0 n' tha set of available instructions.  
While pickin a specific \fIcpu-type\fR schedulez thangs appropriately
for dat particular chip, tha compila do not generate any code that
cannot run on tha default machine type unless you use a
\&\fB\-march=\fR\fIcpu-type\fR option.
For example, if \s-1GCC\s0 is configured fo' i686\-pc\-linux\-gnu
then \fB\-mtune=pentium4\fR generates code dat is tuned fo' Pentium 4
but still runs on i686 machines.
.Sp
Da chizzlez fo' \fIcpu-type\fR is tha same as fo' \fB\-march\fR.
In addition, \fB\-mtune\fR supports a extra chizzle fo' \fIcpu-type\fR:
.RS 4
.IP "\fBgeneric\fR" 4
.IX Item "generic"
Produce code optimized fo' da most thugged-out common \s-1IA32/AMD64/EM64T\s0 processors.
If you know tha \s-1CPU\s0 on which yo' code will run, then you should use
the correspondin \fB\-mtune\fR or \fB\-march\fR option instead of
\&\fB\-mtune=generic\fR.  But, if you do not know exactly what tha fuck \s-1CPU\s0 users
of yo' application will have, then you should use dis option.
.Sp
As freshly smoked up processors is deployed up in tha marketplace, tha behavior of this
option will chizzle.  Therefore, if you upgrade ta a newer version of
\&\s-1GCC,\s0 code generation controlled by dis option will chizzle ta reflect
the processors
that is most common all up in tha time dat version of \s-1GCC\s0 is busted out.
.Sp
There is no \fB\-march=generic\fR option cuz \fB\-march\fR
indicates tha instruction set tha compila can use, n' there is no
generic instruction set applicable ta all processors.  In contrast,
\&\fB\-mtune\fR indicates tha processor (or, up in dis case, collection of
processors) fo' which tha code is optimized.
.RE
.RS 4
.RE
.IP "\fB\-mcpu=\fR\fIcpu-type\fR" 4
.IX Item "-mcpu=cpu-type"
A deprecated synonym fo' \fB\-mtune\fR.
.IP "\fB\-mfpmath=\fR\fIunit\fR" 4
.IX Item "-mfpmath=unit"
Generate floating-point arithmetic fo' selected unit \fIunit\fR.  Da chizzles
for \fIunit\fR are:
.RS 4
.IP "\fB387\fR" 4
.IX Item "387"
Use tha standard 387 floating-point coprocessor present on tha majoritizzle of chips and
emulated otherwise.  Code compiled wit dis option runs almost all over dis biiiatch.
Da temporary thangs up in dis biatch is computed up in 80\-bit precision instead of tha precision
specified by tha type, resultin up in slightly different thangs up in dis biatch compared ta most
of other chips.  See \fB\-ffloat\-store\fR fo' mo' detailed description.
.Sp
This is tha default chizzle fo' i386 compiler.
.IP "\fBsse\fR" 4
.IX Item "sse"
Use scalar floating-point instructions present up in tha \s-1SSE\s0 instruction set.
This instruction set is supported by Pentium \s-1III\s0 n' newer chips,
and up in tha \s-1AMD\s0 line
by Athlon\-4, Athlon \s-1XP\s0 n' Athlon \s-1MP\s0 chips.  Da earlier version of tha \s-1SSE\s0
instruction set supports only single-precision arithmetic, thus tha double and
extended-precision arithmetic is still done rockin 387.  A lata version, present
only up in Pentium 4 n' \s-1AMD\s0 x86\-64 chips, supports double-precision
arithmetic like a muthafucka.
.Sp
For tha i386 compiler, you must use \fB\-march=\fR\fIcpu-type\fR, \fB\-msse\fR
or \fB\-msse2\fR switches ta enable \s-1SSE\s0 extensions n' make dis option
effective.  For tha x86\-64 compiler, these extensions is enabled by default.
.Sp
Da resultin code should be considerably fasta up in tha majoritizzle of cases n' avoid
the numerical instabilitizzle problemz of 387 code yo, but may break some existing
code dat expects temporaries ta be 80 bits.
.Sp
This is tha default chizzle fo' tha x86\-64 compiler.
.IP "\fBsse,387\fR" 4
.IX Item "sse,387"
.PD 0
.IP "\fBsse+387\fR" 4
.IX Item "sse+387"
.IP "\fBboth\fR" 4
.IX Item "both"
.PD
Attempt ta utilize both instruction sets at once.  This effectively doublez the
amount of available registers, n' on chips wit separate execution units for
387 n' \s-1SSE\s0 tha execution resources like a muthafucka.  Use dis option wit care, as it is
still experimental, cuz tha \s-1GCC\s0 regista allocator do not model separate
functionizzle units well, resultin up in unstable performance.
.RE
.RS 4
.RE
.IP "\fB\-masm=\fR\fIdialect\fR" 4
.IX Item "-masm=dialect"
Output assembly instructions rockin selected \fIdialect\fR.  Supported
choices is \fBintel\fR or \fBatt\fR (the default).  Darwin do
not support \fBintel\fR.
.IP "\fB\-mieee\-fp\fR" 4
.IX Item "-mieee-fp"
.PD 0
.IP "\fB\-mno\-ieee\-fp\fR" 4
.IX Item "-mno-ieee-fp"
.PD
Control whether or not tha compila uses \s-1IEEE\s0 floating-point
comparisons.  These erectly handle tha case where tha result of a
comparison is unordered.
.IP "\fB\-msoft\-float\fR" 4
.IX Item "-msoft-float"
Generate output containin library calls fo' floatin point.
.Sp
\&\fBWarning:\fR tha requisite libraries is not part of \s-1GCC.\s0
Normally tha facilitizzlez of tha machinez usual C compila is used yo, but
this can't be done directly up in cross-compilation. I aint talkin' bout chicken n' gravy biatch.  Yo ass must make your
own arrangements ta provide suitable library functions for
cross-compilation.
.Sp
On machines where a gangbangin' function returns floating-point thangs up in dis biatch up in tha 80387
regista stack, some floating-point opcodes may be emitted even if
\&\fB\-msoft\-float\fR is used.
.IP "\fB\-mno\-fp\-ret\-in\-387\fR" 4
.IX Item "-mno-fp-ret-in-387"
Do not use tha \s-1FPU\s0 registas fo' return jointz of functions.
.Sp
Da usual callin convention has functions return jointz of types
\&\f(CW\*(C`float\*(C'\fR n' \f(CW\*(C`double\*(C'\fR up in a \s-1FPU\s0 register, even if there
is no \s-1FPU. \s0 Da scam is dat tha operatin system should emulate
an \s-1FPU.\s0
.Sp
Da option \fB\-mno\-fp\-ret\-in\-387\fR causes such joints ta be returned
in ordinary \s-1CPU\s0 registas instead.
.IP "\fB\-mno\-fancy\-math\-387\fR" 4
.IX Item "-mno-fancy-math-387"
Some 387 emulators do not support tha \f(CW\*(C`sin\*(C'\fR, \f(CW\*(C`cos\*(C'\fR and
\&\f(CW\*(C`sqrt\*(C'\fR instructions fo' tha 387.  Specify dis option ta avoid
generatin dem instructions.  This option is tha default on FreeBSD,
OpenBSD n' NetBSD.  This option is overridden when \fB\-march\fR
indicates dat tha target \s-1CPU\s0 always has a \s-1FPU\s0 n' so the
instruction do not need emulation. I aint talkin' bout chicken n' gravy biatch.  These
instructions is not generated unless you also use the
\&\fB\-funsafe\-math\-optimizations\fR switch.
.IP "\fB\-malign\-double\fR" 4
.IX Item "-malign-double"
.PD 0
.IP "\fB\-mno\-align\-double\fR" 4
.IX Item "-mno-align-double"
.PD
Control whether \s-1GCC\s0 aligns \f(CW\*(C`double\*(C'\fR, \f(CW\*(C`long double\*(C'\fR, and
\&\f(CW\*(C`long long\*(C'\fR variablez on a two-word boundary or a one-word
boundary.  Alignin \f(CW\*(C`double\*(C'\fR variablez on a two-word boundary
produces code dat runs somewhat fasta on a Pentium at the
expense of mo' memory.
.Sp
On x86\-64, \fB\-malign\-double\fR is enabled by default.
.Sp
\&\fBWarning:\fR if you use tha \fB\-malign\-double\fR switch,
structures containin tha above types is aligned differently than
the published application binary intercourse justifications fo' tha 386
and is not binary compatible wit structures up in code compiled
without dat switch.
.IP "\fB\-m96bit\-long\-double\fR" 4
.IX Item "-m96bit-long-double"
.PD 0
.IP "\fB\-m128bit\-long\-double\fR" 4
.IX Item "-m128bit-long-double"
.PD
These switches control tha size of \f(CW\*(C`long double\*(C'\fR type.  Da i386
application binary intercourse specifies tha size ta be 96 bits,
so \fB\-m96bit\-long\-double\fR is tha default up in 32\-bit mode.
.Sp
Modern architectures (Pentium n' newer) prefer \f(CW\*(C`long double\*(C'\fR
to be aligned ta a 8\- or 16\-byte boundary.  In arrays or structures
conformin ta tha \s-1ABI,\s0 dis aint possible.  So specifying
\&\fB\-m128bit\-long\-double\fR aligns \f(CW\*(C`long double\*(C'\fR
to a 16\-byte boundary by paddin tha \f(CW\*(C`long double\*(C'\fR wit a additional
32\-bit zero.
.Sp
In tha x86\-64 compiler, \fB\-m128bit\-long\-double\fR is tha default chizzle as
its \s-1ABI\s0 specifies dat \f(CW\*(C`long double\*(C'\fR be aligned on 16\-byte boundary.
.Sp
Notice dat neither of these options enable any extra precision over tha x87
standard of 80 bits fo' a \f(CW\*(C`long double\*(C'\fR.
.Sp
\&\fBWarning:\fR if you override tha default value fo' yo' target \s-1ABI,\s0 this
changes tha size of 
structures n' arrays containin \f(CW\*(C`long double\*(C'\fR variables,
as well as modifyin tha function callin convention fo' functions taking
\&\f(CW\*(C`long double\*(C'\fR.  Hence they is not binary-compatible
with code compiled without dat switch.
.IP "\fB\-mlong\-double\-64\fR" 4
.IX Item "-mlong-double-64"
.PD 0
.IP "\fB\-mlong\-double\-80\fR" 4
.IX Item "-mlong-double-80"
.PD
These switches control tha size of \f(CW\*(C`long double\*(C'\fR type fo' realz. A size
of 64 bits make tha \f(CW\*(C`long double\*(C'\fR type equivalent ta tha \f(CW\*(C`double\*(C'\fR
type. This is tha default fo' Bionic C library.
.Sp
\&\fBWarning:\fR if you override tha default value fo' yo' target \s-1ABI,\s0 this
changes tha size of
structures n' arrays containin \f(CW\*(C`long double\*(C'\fR variables,
as well as modifyin tha function callin convention fo' functions taking
\&\f(CW\*(C`long double\*(C'\fR.  Hence they is not binary-compatible
with code compiled without dat switch.
.IP "\fB\-mlarge\-data\-threshold=\fR\fIthreshold\fR" 4
.IX Item "-mlarge-data-threshold=threshold"
When \fB\-mcmodel=medium\fR is specified, data objects larger than
\&\fIthreshold\fR is placed up in tha big-ass data section. I aint talkin' bout chicken n' gravy biatch.  This value must be the
same across all objects linked tha fuck into tha binary, n' defaults ta 65535.
.IP "\fB\-mrtd\fR" 4
.IX Item "-mrtd"
Use a gangbangin' finger-lickin' different function-callin convention, up in which functions that
take a gangbangin' fixed number of arguments return wit tha \f(CW\*(C`ret \f(CInum\f(CW\*(C'\fR
instruction, which pops they arguments while returning.  This saves one
instruction up in tha calla since there is no need ta pop tha arguments
there.
.Sp
Yo ass can specify dat a individual function is called wit dis calling
sequence wit tha function attribute \fBstdcall\fR.  Yo ass can also
override tha \fB\-mrtd\fR option by rockin tha function attribute
\&\fBcdecl\fR.
.Sp
\&\fBWarning:\fR dis callin convention is incompatible wit tha one
normally used on Unix, so you cannot use it if you need ta call
libraries compiled wit tha Unix compiler.
.Sp
Also, you must provide function prototypes fo' all functions that
take variable numberz of arguments (includin \f(CW\*(C`printf\*(C'\fR);
otherwise incorrect code is generated fo' calls ta them
functions.
.Sp
In addition, seriously incorrect code thangs up in dis biatch if you call a
function wit too nuff arguments, n' you can put dat on yo' toast.  (Normally, extra arguments are
harmlessly ignored.)
.IP "\fB\-mregparm=\fR\fInum\fR" 4
.IX Item "-mregparm=num"
Control how tha fuck nuff registas is used ta pass integer arguments, n' you can put dat on yo' toast.  By
default, no registas is used ta pass arguments, n' at most 3
registas can be used. Y'all KNOW dat shit, muthafucka!  Yo ass can control dis behavior fo' a specific
function by rockin tha function attribute \fBregparm\fR.
.Sp
\&\fBWarning:\fR if you use dis switch, and
\&\fInum\fR is nonzero, then you must build all modulez wit tha same
value, includin any libraries. Put ya muthafuckin choppers up if ya feel dis!  This includes tha system libraries and
startup modules.
.IP "\fB\-msseregparm\fR" 4
.IX Item "-msseregparm"
Use \s-1SSE\s0 regista passin conventions fo' float n' double arguments
and return joints, n' you can put dat on yo' toast.  Yo ass can control dis behavior fo' a specific
function by rockin tha function attribute \fBsseregparm\fR.
.Sp
\&\fBWarning:\fR if you use dis switch then you must build all
modulez wit tha same value, includin any libraries. Put ya muthafuckin choppers up if ya feel dis!  This includes
the system libraries n' startup modules.
.IP "\fB\-mvect8\-ret\-in\-mem\fR" 4
.IX Item "-mvect8-ret-in-mem"
Return 8\-byte vectors up in memory instead of \s-1MMX\s0 registers.  This is the
default on Solaris@tie{}8 n' 9 n' VxWorks ta match tha \s-1ABI\s0 of tha Sun
Studio compilaz until version 12.  Lata compila versions (starting
with Studio 12 Update@tie{}1) follow tha \s-1ABI\s0 used by other x86 targets, which
is tha default on Solaris@tie{}10 n' later n' shit.  \fIOnly\fR use dis option if
you need ta remain compatible wit existin code produced by them
previous compila versions or olda versionz of \s-1GCC.\s0
.IP "\fB\-mpc32\fR" 4
.IX Item "-mpc32"
.PD 0
.IP "\fB\-mpc64\fR" 4
.IX Item "-mpc64"
.IP "\fB\-mpc80\fR" 4
.IX Item "-mpc80"
.PD
Set 80387 floating-point precision ta 32, 64 or 80 bits, n' you can put dat on yo' toast.  When \fB\-mpc32\fR
is specified, tha significandz of thangs up in dis biatch of floating-point operations are
rounded ta 24 bits (single precision); \fB\-mpc64\fR roundz the
significandz of thangs up in dis biatch of floating-point operations ta 53 bits (double
precision) n' \fB\-mpc80\fR roundz tha significandz of thangs up in dis biatch of
floating-point operations ta 64 bits (extended double precision), which is
the default.  When dis option is used, floating-point operations up in higher
precisions is not available ta tha programmer without settin tha \s-1FPU\s0
control word explicitly.
.Sp
Settin tha roundin of floating-point operations ta less than tha default
80 bits can speed some programs by 2% or mo' n' mo' n' mo'.  Note dat some mathematical
libraries assume dat extended-precision (80\-bit) floating-point operations
are enabled by default; routines up in such libraries could suffer significant
loss of accuracy, typically all up in so-called \*(L"catastrophic cancellation\*(R",
when dis option is used ta set tha precision ta less than extended precision.
.IP "\fB\-mstackrealign\fR" 4
.IX Item "-mstackrealign"
Realign tha stack at entry.  On tha Intel x86, tha \fB\-mstackrealign\fR
option generates a alternate prologue n' epilogue dat realigns the
run-time stack if necessary.  This supports mixin legacy codes dat keep
4\-byte stack alignment wit modern codes dat keep 16\-byte stack alignment for
\&\s-1SSE\s0 compatibility.  See also tha attribute \f(CW\*(C`force_align_arg_pointer\*(C'\fR,
applicable ta individual functions.
.IP "\fB\-mpreferred\-stack\-boundary=\fR\fInum\fR" 4
.IX Item "-mpreferred-stack-boundary=num"
Attempt ta keep tha stack boundary aligned ta a 2 raised ta \fInum\fR
byte boundary.  If \fB\-mpreferred\-stack\-boundary\fR aint specified,
the default is 4 (16 bytes or 128 bits).
.Sp
\&\fBWarning:\fR When generatin code fo' tha x86\-64 architecture with
\&\s-1SSE\s0 extensions disabled, \fB\-mpreferred\-stack\-boundary=3\fR can be
used ta keep tha stack boundary aligned ta 8 byte boundary.  Since
x86\-64 \s-1ABI\s0 require 16 byte stack alignment, dis is \s-1ABI\s0 incompatible and
intended ta be used up in controlled environment where stack space is
important limitation. I aint talkin' bout chicken n' gravy biatch.  This option will lead ta wack code when functions
compiled wit 16 byte stack alignment (like fuckin functions from a standard
library) is called wit misaligned stack.  In dis case, \s-1SSE\s0
instructions may lead ta misaligned memory access traps.  In addition,
variable arguments is ghon be handled incorrectly fo' 16 byte aligned
objects (includin x87 long double n' _\|_int128), leadin ta wrong
results, n' you can put dat on yo' toast.  Yo ass must build all modulez with
\&\fB\-mpreferred\-stack\-boundary=3\fR, includin any libraries. Put ya muthafuckin choppers up if ya feel dis!  This
includes tha system libraries n' startup modules.
.IP "\fB\-mincoming\-stack\-boundary=\fR\fInum\fR" 4
.IX Item "-mincoming-stack-boundary=num"
Assume tha incomin stack be aligned ta a 2 raised ta \fInum\fR byte
boundary.  If \fB\-mincoming\-stack\-boundary\fR aint specified,
the one specified by \fB\-mpreferred\-stack\-boundary\fR is used.
.Sp
On Pentium n' Pentium Pro, \f(CW\*(C`double\*(C'\fR n' \f(CW\*(C`long double\*(C'\fR joints
should be aligned ta a 8\-byte boundary (see \fB\-malign\-double\fR) or
suffer dope run time performizzle penalties. Put ya muthafuckin choppers up if ya feel dis!  On Pentium \s-1III,\s0 the
Streamin \s-1SIMD\s0 Extension (\s-1SSE\s0) data type \f(CW\*(C`_\|_m128\*(C'\fR may not work
properly if it aint 16\-byte aligned.
.Sp
To ensure proper alignment of dis joints on tha stack, tha stack boundary
must be as aligned as dat required by any value stored on tha stack.
Further, every last muthafuckin function must be generated such dat it keeps tha stack
aligned. Y'all KNOW dat shit, muthafucka!  Thus callin a gangbangin' function compiled wit a higher preferred
stack boundary from a gangbangin' function compiled wit a lower preferred stack
boundary most likely misaligns tha stack.  It be recommended that
libraries dat use callbacks always use tha default setting.
.Sp
This extra alignment do consume extra stack space, n' generally
increases code size.  Code dat is sensitizzle ta stack space usage, such
as embedded systems n' operatin system kernels, may wanna reduce the
preferred alignment ta \fB\-mpreferred\-stack\-boundary=2\fR.
.IP "\fB\-mmmx\fR" 4
.IX Item "-mmmx"
.PD 0
.IP "\fB\-mno\-mmx\fR" 4
.IX Item "-mno-mmx"
.IP "\fB\-msse\fR" 4
.IX Item "-msse"
.IP "\fB\-mno\-sse\fR" 4
.IX Item "-mno-sse"
.IP "\fB\-msse2\fR" 4
.IX Item "-msse2"
.IP "\fB\-mno\-sse2\fR" 4
.IX Item "-mno-sse2"
.IP "\fB\-msse3\fR" 4
.IX Item "-msse3"
.IP "\fB\-mno\-sse3\fR" 4
.IX Item "-mno-sse3"
.IP "\fB\-mssse3\fR" 4
.IX Item "-mssse3"
.IP "\fB\-mno\-ssse3\fR" 4
.IX Item "-mno-ssse3"
.IP "\fB\-msse4.1\fR" 4
.IX Item "-msse4.1"
.IP "\fB\-mno\-sse4.1\fR" 4
.IX Item "-mno-sse4.1"
.IP "\fB\-msse4.2\fR" 4
.IX Item "-msse4.2"
.IP "\fB\-mno\-sse4.2\fR" 4
.IX Item "-mno-sse4.2"
.IP "\fB\-msse4\fR" 4
.IX Item "-msse4"
.IP "\fB\-mno\-sse4\fR" 4
.IX Item "-mno-sse4"
.IP "\fB\-mavx\fR" 4
.IX Item "-mavx"
.IP "\fB\-mno\-avx\fR" 4
.IX Item "-mno-avx"
.IP "\fB\-mavx2\fR" 4
.IX Item "-mavx2"
.IP "\fB\-mno\-avx2\fR" 4
.IX Item "-mno-avx2"
.IP "\fB\-maes\fR" 4
.IX Item "-maes"
.IP "\fB\-mno\-aes\fR" 4
.IX Item "-mno-aes"
.IP "\fB\-mpclmul\fR" 4
.IX Item "-mpclmul"
.IP "\fB\-mno\-pclmul\fR" 4
.IX Item "-mno-pclmul"
.IP "\fB\-mfsgsbase\fR" 4
.IX Item "-mfsgsbase"
.IP "\fB\-mno\-fsgsbase\fR" 4
.IX Item "-mno-fsgsbase"
.IP "\fB\-mrdrnd\fR" 4
.IX Item "-mrdrnd"
.IP "\fB\-mno\-rdrnd\fR" 4
.IX Item "-mno-rdrnd"
.IP "\fB\-mf16c\fR" 4
.IX Item "-mf16c"
.IP "\fB\-mno\-f16c\fR" 4
.IX Item "-mno-f16c"
.IP "\fB\-mfma\fR" 4
.IX Item "-mfma"
.IP "\fB\-mno\-fma\fR" 4
.IX Item "-mno-fma"
.IP "\fB\-msse4a\fR" 4
.IX Item "-msse4a"
.IP "\fB\-mno\-sse4a\fR" 4
.IX Item "-mno-sse4a"
.IP "\fB\-mfma4\fR" 4
.IX Item "-mfma4"
.IP "\fB\-mno\-fma4\fR" 4
.IX Item "-mno-fma4"
.IP "\fB\-mxop\fR" 4
.IX Item "-mxop"
.IP "\fB\-mno\-xop\fR" 4
.IX Item "-mno-xop"
.IP "\fB\-mlwp\fR" 4
.IX Item "-mlwp"
.IP "\fB\-mno\-lwp\fR" 4
.IX Item "-mno-lwp"
.IP "\fB\-m3dnow\fR" 4
.IX Item "-m3dnow"
.IP "\fB\-mno\-3dnow\fR" 4
.IX Item "-mno-3dnow"
.IP "\fB\-mpopcnt\fR" 4
.IX Item "-mpopcnt"
.IP "\fB\-mno\-popcnt\fR" 4
.IX Item "-mno-popcnt"
.IP "\fB\-mabm\fR" 4
.IX Item "-mabm"
.IP "\fB\-mno\-abm\fR" 4
.IX Item "-mno-abm"
.IP "\fB\-mbmi\fR" 4
.IX Item "-mbmi"
.IP "\fB\-mbmi2\fR" 4
.IX Item "-mbmi2"
.IP "\fB\-mno\-bmi\fR" 4
.IX Item "-mno-bmi"
.IP "\fB\-mno\-bmi2\fR" 4
.IX Item "-mno-bmi2"
.IP "\fB\-mlzcnt\fR" 4
.IX Item "-mlzcnt"
.IP "\fB\-mno\-lzcnt\fR" 4
.IX Item "-mno-lzcnt"
.IP "\fB\-mrtm\fR" 4
.IX Item "-mrtm"
.IP "\fB\-mtbm\fR" 4
.IX Item "-mtbm"
.IP "\fB\-mno\-tbm\fR" 4
.IX Item "-mno-tbm"
.PD
These switches enable or disable tha use of instructions up in tha \s-1MMX, SSE,
SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, F16C,
FMA, SSE4A, FMA4, XOP, LWP, ABM, BMI, BMI2, LZCNT, RTM\s0 or 3DNow!
extended instruction sets.
These extensions is also available as built-in functions: see
\&\fBX86 Built-in Functions\fR, fo' detailz of tha functions enabled and
disabled by these switches.
.Sp
To generate \s-1SSE/SSE2\s0 instructions automatically from floating-point
code (as opposed ta 387 instructions), peep \fB\-mfpmath=sse\fR.
.Sp
\&\s-1GCC\s0 depresses SSEx instructions when \fB\-mavx\fR is used. Y'all KNOW dat shit, muthafucka! Instead, it
generates freshly smoked up \s-1AVX\s0 instructions or \s-1AVX\s0 equivalence fo' all SSEx instructions
when needed.
.Sp
These options enable \s-1GCC\s0 ta use these extended instructions in
generated code, even without \fB\-mfpmath=sse\fR.  Applications that
perform run-time \s-1CPU\s0 detection must compile separate filez fo' each
supported architecture, rockin tha appropriate flags.  In particular,
the file containin tha \s-1CPU\s0 detection code should be compiled without
these options.
.IP "\fB\-mcld\fR" 4
.IX Item "-mcld"
This option instructs \s-1GCC\s0 ta emit a \f(CW\*(C`cld\*(C'\fR instruction up in tha prologue
of functions dat use strang instructions.  Strin instructions depend on
the \s-1DF\s0 flag ta select between autoincrement or autodecrement mode.  While the
\&\s-1ABI\s0 specifies tha \s-1DF\s0 flag ta be cleared on function entry, some operating
systems violate dis justification by not clearin tha \s-1DF\s0 flag up in their
exception dispatchers.  Da exception handlez can be invoked wit tha \s-1DF\s0 flag
set, which leadz ta wack direction mode when strang instructions is used.
This option can be enabled by default on 32\-bit x86 targets by configuring
\&\s-1GCC\s0 wit tha \fB\-\-enable\-cld\fR configure option. I aint talkin' bout chicken n' gravy biatch.  Generation of \f(CW\*(C`cld\*(C'\fR
instructions can be suppressed wit tha \fB\-mno\-cld\fR compila option
in dis case.
.IP "\fB\-mvzeroupper\fR" 4
.IX Item "-mvzeroupper"
This option instructs \s-1GCC\s0 ta emit a \f(CW\*(C`vzeroupper\*(C'\fR instruction
before a transfer of control flow outta tha function ta minimize
the \s-1AVX\s0 ta \s-1SSE\s0 transizzle penalty as well as remove unnecessary \f(CW\*(C`zeroupper\*(C'\fR
intrinsics.
.IP "\fB\-mprefer\-avx128\fR" 4
.IX Item "-mprefer-avx128"
This option instructs \s-1GCC\s0 ta use 128\-bit \s-1AVX\s0 instructions instead of
256\-bit \s-1AVX\s0 instructions up in tha auto-vectorizer.
.IP "\fB\-mcx16\fR" 4
.IX Item "-mcx16"
This option enablez \s-1GCC\s0 ta generate \f(CW\*(C`CMPXCHG16B\*(C'\fR instructions.
\&\f(CW\*(C`CMPXCHG16B\*(C'\fR allows fo' atomic operations on 128\-bit double quadword
(or oword) data types.  
This is useful fo' high-resolution countas dat can be updated
by multiple processors (or cores).  This instruction is generated as part of
atomic built-in functions: peep \fB_\|_sync Builtins\fR or
\&\fB_\|_atomic Builtins\fR fo' details.
.IP "\fB\-msahf\fR" 4
.IX Item "-msahf"
This option enablez generation of \f(CW\*(C`SAHF\*(C'\fR instructions up in 64\-bit code.
Early Intel Pentium 4 CPUs wit Intel 64 support,
prior ta tha introduction of Pentium 4 G1 step up in December 2005,
lacked tha \f(CW\*(C`LAHF\*(C'\fR n' \f(CW\*(C`SAHF\*(C'\fR instructions
which was supported by \s-1AMD64.\s0
These is load n' store instructions, respectively, fo' certain status flags.
In 64\-bit mode, tha \f(CW\*(C`SAHF\*(C'\fR instruction is used ta optimize \f(CW\*(C`fmod\*(C'\fR,
\&\f(CW\*(C`drem\*(C'\fR, n' \f(CW\*(C`remainder\*(C'\fR built-in functions;
see \fBOther Builtins\fR fo' details.
.IP "\fB\-mmovbe\fR" 4
.IX Item "-mmovbe"
This option enablez use of tha \f(CW\*(C`movbe\*(C'\fR instruction ta implement
\&\f(CW\*(C`_\|_builtin_bswap32\*(C'\fR n' \f(CW\*(C`_\|_builtin_bswap64\*(C'\fR.
.IP "\fB\-mcrc32\fR" 4
.IX Item "-mcrc32"
This option enablez built-in functions \f(CW\*(C`_\|_builtin_ia32_crc32qi\*(C'\fR,
\&\f(CW\*(C`_\|_builtin_ia32_crc32hi\*(C'\fR, \f(CW\*(C`_\|_builtin_ia32_crc32si\*(C'\fR and
\&\f(CW\*(C`_\|_builtin_ia32_crc32di\*(C'\fR ta generate tha \f(CW\*(C`crc32\*(C'\fR machine instruction.
.IP "\fB\-mrecip\fR" 4
.IX Item "-mrecip"
This option enablez use of \f(CW\*(C`RCPSS\*(C'\fR n' \f(CW\*(C`RSQRTSS\*(C'\fR instructions
(and they vectorized variants \f(CW\*(C`RCPPS\*(C'\fR n' \f(CW\*(C`RSQRTPS\*(C'\fR)
with a additionizzle Newton-Raphson step
to increase precision instead of \f(CW\*(C`DIVSS\*(C'\fR n' \f(CW\*(C`SQRTSS\*(C'\fR
(and they vectorized
variants) fo' single-precision floating-point arguments, n' you can put dat on yo' toast.  These instructions
are generated only when \fB\-funsafe\-math\-optimizations\fR is enabled
together wit \fB\-finite\-math\-only\fR n' \fB\-fno\-trapping\-math\fR.
Note dat while tha throughput of tha sequence is higher than tha throughput
of tha non-reciprocal instruction, tha precision of tha sequence can be
decreased by up ta 2 ulp (i.e. tha inverse of 1.0 equals 0.99999994).
.Sp
Note dat \s-1GCC\s0 implements \f(CW\*(C`1.0f/sqrtf(\f(CIx\f(CW)\*(C'\fR up in termz of \f(CW\*(C`RSQRTSS\*(C'\fR
(or \f(CW\*(C`RSQRTPS\*(C'\fR) already wit \fB\-ffast\-math\fR (or tha above option
combination), n' don't need \fB\-mrecip\fR.
.Sp
Also note dat \s-1GCC\s0 emits tha above sequence wit additionizzle Newton-Raphson step
for vectorized single-float division n' vectorized \f(CW\*(C`sqrtf(\f(CIx\f(CW)\*(C'\fR
already wit \fB\-ffast\-math\fR (or tha above option combination), and
doesn't need \fB\-mrecip\fR.
.IP "\fB\-mrecip=\fR\fIopt\fR" 4
.IX Item "-mrecip=opt"
This option controls which reciprocal estimate instructions
may be used. Y'all KNOW dat shit, muthafucka!  \fIopt\fR be a cold-ass lil comma-separated list of options, which may
be preceded by a \fB!\fR ta invert tha option:
.RS 4
.IP "\fBall\fR" 4
.IX Item "all"
Enable all estimate instructions.
.IP "\fBdefault\fR" 4
.IX Item "default"
Enable tha default instructions, equivalent ta \fB\-mrecip\fR.
.IP "\fBnone\fR" 4
.IX Item "none"
Disable all estimate instructions, equivalent ta \fB\-mno\-recip\fR.
.IP "\fBdiv\fR" 4
.IX Item "div"
Enable tha approximation fo' scalar division.
.IP "\fBvec-div\fR" 4
.IX Item "vec-div"
Enable tha approximation fo' vectorized division.
.IP "\fBsqrt\fR" 4
.IX Item "sqrt"
Enable tha approximation fo' scalar square root.
.IP "\fBvec-sqrt\fR" 4
.IX Item "vec-sqrt"
Enable tha approximation fo' vectorized square root.
.RE
.RS 4
.Sp
So, fo' example, \fB\-mrecip=all,!sqrt\fR enables
all of tha reciprocal approximations, except fo' square root.
.RE
.IP "\fB\-mveclibabi=\fR\fItype\fR" 4
.IX Item "-mveclibabi=type"
Specifies tha \s-1ABI\s0 type ta use fo' vectorizin intrinsics rockin an
external library.  Supported joints fo' \fItype\fR is \fBsvml\fR 
for tha Intel short
vector math library n' \fBacml\fR fo' tha \s-1AMD\s0 math core library.
To use dis option, both \fB\-ftree\-vectorize\fR and
\&\fB\-funsafe\-math\-optimizations\fR gotta be enabled, n' a \s-1SVML\s0 or \s-1ACML \s0
ABI-compatible library must be specified at link time.
.Sp
\&\s-1GCC\s0 currently emits calls ta \f(CW\*(C`vmldExp2\*(C'\fR,
\&\f(CW\*(C`vmldLn2\*(C'\fR, \f(CW\*(C`vmldLog102\*(C'\fR, \f(CW\*(C`vmldLog102\*(C'\fR, \f(CW\*(C`vmldPow2\*(C'\fR,
\&\f(CW\*(C`vmldTanh2\*(C'\fR, \f(CW\*(C`vmldTan2\*(C'\fR, \f(CW\*(C`vmldAtan2\*(C'\fR, \f(CW\*(C`vmldAtanh2\*(C'\fR,
\&\f(CW\*(C`vmldCbrt2\*(C'\fR, \f(CW\*(C`vmldSinh2\*(C'\fR, \f(CW\*(C`vmldSin2\*(C'\fR, \f(CW\*(C`vmldAsinh2\*(C'\fR,
\&\f(CW\*(C`vmldAsin2\*(C'\fR, \f(CW\*(C`vmldCosh2\*(C'\fR, \f(CW\*(C`vmldCos2\*(C'\fR, \f(CW\*(C`vmldAcosh2\*(C'\fR,
\&\f(CW\*(C`vmldAcos2\*(C'\fR, \f(CW\*(C`vmlsExp4\*(C'\fR, \f(CW\*(C`vmlsLn4\*(C'\fR, \f(CW\*(C`vmlsLog104\*(C'\fR,
\&\f(CW\*(C`vmlsLog104\*(C'\fR, \f(CW\*(C`vmlsPow4\*(C'\fR, \f(CW\*(C`vmlsTanh4\*(C'\fR, \f(CW\*(C`vmlsTan4\*(C'\fR,
\&\f(CW\*(C`vmlsAtan4\*(C'\fR, \f(CW\*(C`vmlsAtanh4\*(C'\fR, \f(CW\*(C`vmlsCbrt4\*(C'\fR, \f(CW\*(C`vmlsSinh4\*(C'\fR,
\&\f(CW\*(C`vmlsSin4\*(C'\fR, \f(CW\*(C`vmlsAsinh4\*(C'\fR, \f(CW\*(C`vmlsAsin4\*(C'\fR, \f(CW\*(C`vmlsCosh4\*(C'\fR,
\&\f(CW\*(C`vmlsCos4\*(C'\fR, \f(CW\*(C`vmlsAcosh4\*(C'\fR n' \f(CW\*(C`vmlsAcos4\*(C'\fR fo' corresponding
function type when \fB\-mveclibabi=svml\fR is used, n' \f(CW\*(C`_\|_vrd2_sin\*(C'\fR,
\&\f(CW\*(C`_\|_vrd2_cos\*(C'\fR, \f(CW\*(C`_\|_vrd2_exp\*(C'\fR, \f(CW\*(C`_\|_vrd2_log\*(C'\fR, \f(CW\*(C`_\|_vrd2_log2\*(C'\fR,
\&\f(CW\*(C`_\|_vrd2_log10\*(C'\fR, \f(CW\*(C`_\|_vrs4_sinf\*(C'\fR, \f(CW\*(C`_\|_vrs4_cosf\*(C'\fR,
\&\f(CW\*(C`_\|_vrs4_expf\*(C'\fR, \f(CW\*(C`_\|_vrs4_logf\*(C'\fR, \f(CW\*(C`_\|_vrs4_log2f\*(C'\fR,
\&\f(CW\*(C`_\|_vrs4_log10f\*(C'\fR n' \f(CW\*(C`_\|_vrs4_powf\*(C'\fR fo' tha correspondin function type
when \fB\-mveclibabi=acml\fR is used.
.IP "\fB\-mabi=\fR\fIname\fR" 4
.IX Item "-mabi=name"
Generate code fo' tha specified callin convention. I aint talkin' bout chicken n' gravy biatch.  Permissible joints
are \fBsysv\fR fo' tha \s-1ABI\s0 used on GNU/Linux n' other systems, and
\&\fBms\fR fo' tha Microsizzlez \s-1ABI. \s0 Da default is ta use tha Microsoft
\&\s-1ABI\s0 when targetin Microsizzlez Windows n' tha SysV \s-1ABI\s0 on all other systems.
Yo ass can control dis behavior fo' a specific function by
usin tha function attribute \fBms_abi\fR/\fBsysv_abi\fR.
.IP "\fB\-mtls\-dialect=\fR\fItype\fR" 4
.IX Item "-mtls-dialect=type"
Generate code ta access thread-local storage rockin tha \fBgnu\fR or
\&\fBgnu2\fR conventions.  \fBgnu\fR is tha conservatizzle default;
\&\fBgnu2\fR is mo' efficient yo, but it may add compile\- n' run-time
requirements dat cannot be satisfied on all systems.
.IP "\fB\-mpush\-args\fR" 4
.IX Item "-mpush-args"
.PD 0
.IP "\fB\-mno\-push\-args\fR" 4
.IX Item "-mno-push-args"
.PD
Use \s-1PUSH\s0 operations ta store outgoin parameters.  This method is shorter
and probably equally fast as method rockin \s-1SUB/MOV\s0 operations n' is enabled
by default.  In some cases disablin it may improve performizzle cuz of
improved schedulin n' reduced dependencies.
.IP "\fB\-maccumulate\-outgoing\-args\fR" 4
.IX Item "-maccumulate-outgoing-args"
If enabled, tha maximum amount of space required fo' outgoin arguments is
computed up in tha function prologue.  This is fasta on most modern CPUs
because of reduced dependencies, improved schedulin n' reduced stack usage
when tha preferred stack boundary aint equal ta 2.  Da drawback be a notable
increase up in code size.  This switch implies \fB\-mno\-push\-args\fR.
.IP "\fB\-mthreads\fR" 4
.IX Item "-mthreads"
Support thread-safe exception handlin on MinGW.  Programs dat rely
on thread-safe exception handlin must compile n' link all code wit the
\&\fB\-mthreads\fR option. I aint talkin' bout chicken n' gravy biatch.  When compiling, \fB\-mthreads\fR defines
\&\f(CW\*(C`\-D_MT\*(C'\fR; when linking, it links up in a special thread helper library
\&\fB\-lmingwthrd\fR which cleans up per-thread exception-handlin data.
.IP "\fB\-mno\-align\-stringops\fR" 4
.IX Item "-mno-align-stringops"
Do not align tha destination of inlined strang operations.  This switch reduces
code size n' improves performizzle up in case tha destination be already aligned,
but \s-1GCC\s0 don't give a fuck bout dat shit.
.IP "\fB\-minline\-all\-stringops\fR" 4
.IX Item "-minline-all-stringops"
By default \s-1GCC\s0 inlines strang operations only when tha destination is 
known ta be aligned ta least a 4\-byte boundary.  
This enablez mo' inlinin n' increases code
size yo, but may improve performizzle of code dat dependz on fast
\&\f(CW\*(C`memcpy\*(C'\fR, \f(CW\*(C`strlen\*(C'\fR,
and \f(CW\*(C`memset\*(C'\fR fo' short lengths.
.IP "\fB\-minline\-stringops\-dynamically\fR" 4
.IX Item "-minline-stringops-dynamically"
For strang operationz of unknown size, use run-time checks with
inline code fo' lil' small-ass blocks n' a library call fo' big-ass blocks.
.IP "\fB\-mstringop\-strategy=\fR\fIalg\fR" 4
.IX Item "-mstringop-strategy=alg"
Override tha internal decision heuristic fo' tha particular algorithm ta use
for inlinin strang operations.  Da allowed joints fo' \fIalg\fR are:
.RS 4
.IP "\fBrep_byte\fR" 4
.IX Item "rep_byte"
.PD 0
.IP "\fBrep_4byte\fR" 4
.IX Item "rep_4byte"
.IP "\fBrep_8byte\fR" 4
.IX Item "rep_8byte"
.PD
Expand rockin i386 \f(CW\*(C`rep\*(C'\fR prefix of tha specified size.
.IP "\fBbyte_loop\fR" 4
.IX Item "byte_loop"
.PD 0
.IP "\fBloop\fR" 4
.IX Item "loop"
.IP "\fBunrolled_loop\fR" 4
.IX Item "unrolled_loop"
.PD
Expand tha fuck into a inline loop.
.IP "\fBlibcall\fR" 4
.IX Item "libcall"
Always bust a library call.
.RE
.RS 4
.RE
.IP "\fB\-momit\-leaf\-frame\-pointer\fR" 4
.IX Item "-momit-leaf-frame-pointer"
Don't keep tha frame pointa up in a regista fo' leaf functions.  This
avoidz tha instructions ta save, set up, n' restore frame pointas and
makes a extra regista available up in leaf functions.  Da option
\&\fB\-fomit\-leaf\-frame\-pointer\fR removes tha frame pointa fo' leaf functions,
which might make debuggin harder.
.IP "\fB\-mtls\-direct\-seg\-refs\fR" 4
.IX Item "-mtls-direct-seg-refs"
.PD 0
.IP "\fB\-mno\-tls\-direct\-seg\-refs\fR" 4
.IX Item "-mno-tls-direct-seg-refs"
.PD
Controls whether \s-1TLS\s0 variablez may be accessed wit offsets from the
\&\s-1TLS\s0 segment regista (\f(CW%gs\fR fo' 32\-bit, \f(CW%fs\fR fo' 64\-bit),
or whether tha thread base pointa must be added. Y'all KNOW dat shit, muthafucka!  Whether or not this
is valid dependz on tha operatin system, n' whether it maps the
segment ta cover tha entire \s-1TLS\s0 area.
.Sp
For systems dat use tha \s-1GNU C\s0 Library, tha default is on.
.IP "\fB\-msse2avx\fR" 4
.IX Item "-msse2avx"
.PD 0
.IP "\fB\-mno\-sse2avx\fR" 4
.IX Item "-mno-sse2avx"
.PD
Specify dat tha assembla should encode \s-1SSE\s0 instructions wit \s-1VEX\s0
prefix.  Da option \fB\-mavx\fR turns dis on by default.
.IP "\fB\-mfentry\fR" 4
.IX Item "-mfentry"
.PD 0
.IP "\fB\-mno\-fentry\fR" 4
.IX Item "-mno-fentry"
.PD
If profilin be actizzle (\fB\-pg\fR), put tha profiling
counta call before tha prologue.
Note: On x86 architectures tha attribute \f(CW\*(C`ms_hook_prologue\*(C'\fR
aint possible all up in tha moment fo' \fB\-mfentry\fR n' \fB\-pg\fR.
.IP "\fB\-m8bit\-idiv\fR" 4
.IX Item "-m8bit-idiv"
.PD 0
.IP "\fB\-mno\-8bit\-idiv\fR" 4
.IX Item "-mno-8bit-idiv"
.PD
On some processors, like Intel Atom, 8\-bit unsigned integer divide is
much fasta than 32\-bit/64\-bit integer divide.  This option generates a
run-time check.  If both dividend n' divisor is within range of 0
to 255, 8\-bit unsigned integer divide is used instead of
32\-bit/64\-bit integer divide.
.IP "\fB\-mavx256\-split\-unaligned\-load\fR" 4
.IX Item "-mavx256-split-unaligned-load"
.PD 0
.IP "\fB\-mavx256\-split\-unaligned\-store\fR" 4
.IX Item "-mavx256-split-unaligned-store"
.PD
Split 32\-byte \s-1AVX\s0 unaligned load n' store.
.PP
These \fB\-m\fR switches is supported up in addizzle ta tha above
on x86\-64 processors up in 64\-bit environments.
.IP "\fB\-m32\fR" 4
.IX Item "-m32"
.PD 0
.IP "\fB\-m64\fR" 4
.IX Item "-m64"
.IP "\fB\-mx32\fR" 4
.IX Item "-mx32"
.PD
Generate code fo' a 32\-bit or 64\-bit environment.
Da \fB\-m32\fR option sets \f(CW\*(C`int\*(C'\fR, \f(CW\*(C`long\*(C'\fR, n' pointa types
to 32 bits, and
generates code dat runs on any i386 system.
.Sp
Da \fB\-m64\fR option sets \f(CW\*(C`int\*(C'\fR ta 32 bits n' \f(CW\*(C`long\*(C'\fR n' pointer
types ta 64 bits, n' generates code fo' tha x86\-64 architecture.
For Darwin only tha \fB\-m64\fR option also turns off tha \fB\-fno\-pic\fR
and \fB\-mdynamic\-no\-pic\fR options.
.Sp
Da \fB\-mx32\fR option sets \f(CW\*(C`int\*(C'\fR, \f(CW\*(C`long\*(C'\fR, n' pointa types
to 32 bits, and
generates code fo' tha x86\-64 architecture.
.IP "\fB\-mno\-red\-zone\fR" 4
.IX Item "-mno-red-zone"
Do not bust a so-called \*(L"red unit\*(R" fo' x86\-64 code.  Da red unit is mandated
by tha x86\-64 \s-1ABI\s0; it aint nuthin but a 128\-byte area beyond tha location of the
stack pointa dat aint modified by signal or interrupt handlezs
and therefore can be used fo' temporary data without adjustin tha stack
pointer n' shit.  Da flag \fB\-mno\-red\-zone\fR disablez dis red unit.
.IP "\fB\-mcmodel=small\fR" 4
.IX Item "-mcmodel=small"
Generate code fo' tha lil' small-ass code model: tha program n' its symbols must
be linked up in tha lower 2 \s-1GB\s0 of tha address space.  Pointas is 64 bits.
Programs can be statically or dynamically linked. Y'all KNOW dat shit, muthafucka!  This is tha default
code model.
.IP "\fB\-mcmodel=kernel\fR" 4
.IX Item "-mcmodel=kernel"
Generate code fo' tha kernel code model.  Da kernel runs up in the
negatizzle 2 \s-1GB\s0 of tha address space.
This model has ta be used fo' Linux kernel code.
.IP "\fB\-mcmodel=medium\fR" 4
.IX Item "-mcmodel=medium"
Generate code fo' tha medium model: tha program is linked up in tha lower 2
\&\s-1GB\s0 of tha address space.  Lil Small-Ass symbols is also placed there, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  Symbols
with sizes larger than \fB\-mlarge\-data\-threshold\fR is put into
pimpin' data or \s-1BSS\s0 sections n' can be located above 2GB.  Programs can
be statically or dynamically linked.
.IP "\fB\-mcmodel=large\fR" 4
.IX Item "-mcmodel=large"
Generate code fo' tha big-ass model.  This model make no assumptions
about addresses n' sizez of sections.
.IP "\fB\-maddress\-mode=long\fR" 4
.IX Item "-maddress-mode=long"
Generate code fo' long address mode.  This is only supported fo' 64\-bit
and x32 environments, n' you can put dat on yo' toast.  It be tha default address mode fo' 64\-bit
environments.
.IP "\fB\-maddress\-mode=short\fR" 4
.IX Item "-maddress-mode=short"
Generate code fo' short address mode.  This is only supported fo' 32\-bit
and x32 environments, n' you can put dat on yo' toast.  It be tha default address mode fo' 32\-bit and
x32 environments.
.SS "i386 n' x86\-64 Windows Options"
.IX Subsection "i386 n' x86-64 Windows Options"
These additionizzle options is available fo' Microsizzlez Windows targets:
.IP "\fB\-mconsole\fR" 4
.IX Item "-mconsole"
This option
specifies dat a cold-ass lil console application is ta be generated, by
instructin tha linker ta set tha \s-1PE\s0 header subsystem type
required fo' console applications.
This option be available fo' Cygwin n' MinGW targets n' is
enabled by default on dem targets.
.IP "\fB\-mdll\fR" 4
.IX Item "-mdll"
This option be available fo' Cygwin n' MinGW targets, n' you can put dat on yo' toast.  It
specifies dat a DLL\-\-\-a dynamic link library\-\-\-is ta be
generated, enablin tha selection of tha required runtime
startup object n' entry point.
.IP "\fB\-mnop\-fun\-dllimport\fR" 4
.IX Item "-mnop-fun-dllimport"
This option be available fo' Cygwin n' MinGW targets, n' you can put dat on yo' toast.  It
specifies dat tha \f(CW\*(C`dllimport\*(C'\fR attribute should be ignored.
.IP "\fB\-mthread\fR" 4
.IX Item "-mthread"
This option be available fo' MinGW targets, n' you can put dat on yo' toast. Well shiiiit, it specifies
that MinGW-specific thread support is ta be used.
.IP "\fB\-municode\fR" 4
.IX Item "-municode"
This option be available fo' MinGW\-w64 targets, n' you can put dat on yo' toast.  It causes
the \f(CW\*(C`UNICODE\*(C'\fR preprocessor macro ta be predefined, and
chooses Unicode-capable runtime startup code.
.IP "\fB\-mwin32\fR" 4
.IX Item "-mwin32"
This option be available fo' Cygwin n' MinGW targets, n' you can put dat on yo' toast.  It
specifies dat tha typical Microsizzlez Windows predefined macros is to
be set up in tha pre-processor yo, but do not influence tha chizzle
of runtime library/startup code.
.IP "\fB\-mwindows\fR" 4
.IX Item "-mwindows"
This option be available fo' Cygwin n' MinGW targets, n' you can put dat on yo' toast.  It
specifies dat a \s-1GUI\s0 application is ta be generated by
instructin tha linker ta set tha \s-1PE\s0 header subsystem type
appropriately.
.IP "\fB\-fno\-set\-stack\-executable\fR" 4
.IX Item "-fno-set-stack-executable"
This option be available fo' MinGW targets, n' you can put dat on yo' toast. Well shiiiit, it specifies that
the executable flag fo' tha stack used by nested functions aint
set. This is necessary fo' binaries hustlin up in kernel mode of
Microsizzlez Windows, as there tha User32 \s-1API,\s0 which is used ta set executable
privileges, aint available.
.IP "\fB\-fwritable\-relocated\-rdata\fR" 4
.IX Item "-fwritable-relocated-rdata"
This option be available fo' MinGW n' Cygwin targets, n' you can put dat on yo' toast.  It specifies
that relocated-data up in read-only section is put tha fuck into .data
section. I aint talkin' bout chicken n' gravy biatch.  This be a necessary fo' olda runtimes not supporting
modification of .rdata sections fo' pseudo-relocation.
.IP "\fB\-mpe\-aligned\-commons\fR" 4
.IX Item "-mpe-aligned-commons"
This option be available fo' Cygwin n' MinGW targets, n' you can put dat on yo' toast.  It
specifies dat tha \s-1GNU\s0 extension ta tha \s-1PE\s0 file format that
permits tha erect alignment of \s-1COMMON\s0 variablez should be
used when generatin code.  It be enabled by default if
\&\s-1GCC\s0 detects dat tha target assembla found durin configuration
supports tha feature.
.PP
See also under \fBi386 n' x86\-64 Options\fR fo' standard options.
.SS "\s-1IA\-64\s0 Options"
.IX Subsection "IA-64 Options"
These is tha \fB\-m\fR options defined fo' tha Intel \s-1IA\-64\s0 architecture.
.IP "\fB\-mbig\-endian\fR" 4
.IX Item "-mbig-endian"
Generate code fo' a funky-ass big-endian target.  This is tha default fo' HP-UX.
.IP "\fB\-mlil\-endian\fR" 4
.IX Item "-mlil-endian"
Generate code fo' a lil-endian target.  This is tha default fo' \s-1AIX5\s0
and GNU/Linux.
.IP "\fB\-mgnu\-as\fR" 4
.IX Item "-mgnu-as"
.PD 0
.IP "\fB\-mno\-gnu\-as\fR" 4
.IX Item "-mno-gnu-as"
.PD
Generate (or don't) code fo' tha \s-1GNU\s0 assembla n' shit.  This is tha default.
.IP "\fB\-mgnu\-ld\fR" 4
.IX Item "-mgnu-ld"
.PD 0
.IP "\fB\-mno\-gnu\-ld\fR" 4
.IX Item "-mno-gnu-ld"
.PD
Generate (or don't) code fo' tha \s-1GNU\s0 linker n' shit.  This is tha default.
.IP "\fB\-mno\-pic\fR" 4
.IX Item "-mno-pic"
Generate code dat do not bust a global pointa regista n' shit.  Da result
is not posizzle independent code, n' violates tha \s-1IA\-64 ABI.\s0
.IP "\fB\-mvolatile\-asm\-stop\fR" 4
.IX Item "-mvolatile-asm-stop"
.PD 0
.IP "\fB\-mno\-volatile\-asm\-stop\fR" 4
.IX Item "-mno-volatile-asm-stop"
.PD
Generate (or don't) a stop bit immediately before n' afta volatile asm
statements.
.IP "\fB\-mregister\-names\fR" 4
.IX Item "-mregister-names"
.PD 0
.IP "\fB\-mno\-register\-names\fR" 4
.IX Item "-mno-register-names"
.PD
Generate (or don't) \fBin\fR, \fBloc\fR, n' \fBout\fR regista names for
the stacked registers.  This may make assembla output mo' readable.
.IP "\fB\-mno\-sdata\fR" 4
.IX Item "-mno-sdata"
.PD 0
.IP "\fB\-msdata\fR" 4
.IX Item "-msdata"
.PD
Disable (or enable) optimizations dat use tha lil' small-ass data section. I aint talkin' bout chicken n' gravy biatch.  This may
be useful fo' hustlin round optimizer bugs.
.IP "\fB\-mconstant\-gp\fR" 4
.IX Item "-mconstant-gp"
Generate code dat uses a single constant global pointa value.  This is
useful when compilin kernel code.
.IP "\fB\-mauto\-pic\fR" 4
.IX Item "-mauto-pic"
Generate code dat is self-relocatable.  This implies \fB\-mconstant\-gp\fR.
This is useful when compilin firmware code.
.IP "\fB\-minline\-float\-divide\-min\-latency\fR" 4
.IX Item "-minline-float-divide-min-latency"
Generate code fo' inline dividez of floating-point joints
usin tha minimum latency algorithm.
.IP "\fB\-minline\-float\-divide\-max\-throughput\fR" 4
.IX Item "-minline-float-divide-max-throughput"
Generate code fo' inline dividez of floating-point joints
usin tha maximum throughput algorithm.
.IP "\fB\-mno\-inline\-float\-divide\fR" 4
.IX Item "-mno-inline-float-divide"
Do not generate inline code fo' dividez of floating-point joints.
.IP "\fB\-minline\-int\-divide\-min\-latency\fR" 4
.IX Item "-minline-int-divide-min-latency"
Generate code fo' inline dividez of integer joints
usin tha minimum latency algorithm.
.IP "\fB\-minline\-int\-divide\-max\-throughput\fR" 4
.IX Item "-minline-int-divide-max-throughput"
Generate code fo' inline dividez of integer joints
usin tha maximum throughput algorithm.
.IP "\fB\-mno\-inline\-int\-divide\fR" 4
.IX Item "-mno-inline-int-divide"
Do not generate inline code fo' dividez of integer joints.
.IP "\fB\-minline\-sqrt\-min\-latency\fR" 4
.IX Item "-minline-sqrt-min-latency"
Generate code fo' inline square roots
usin tha minimum latency algorithm.
.IP "\fB\-minline\-sqrt\-max\-throughput\fR" 4
.IX Item "-minline-sqrt-max-throughput"
Generate code fo' inline square roots
usin tha maximum throughput algorithm.
.IP "\fB\-mno\-inline\-sqrt\fR" 4
.IX Item "-mno-inline-sqrt"
Do not generate inline code fo' \f(CW\*(C`sqrt\*(C'\fR.
.IP "\fB\-mfused\-madd\fR" 4
.IX Item "-mfused-madd"
.PD 0
.IP "\fB\-mno\-fused\-madd\fR" 4
.IX Item "-mno-fused-madd"
.PD
Do (don't) generate code dat uses tha fused multiply/add or multiply/subtract
instructions.  Da default is ta use these instructions.
.IP "\fB\-mno\-dwarf2\-asm\fR" 4
.IX Item "-mno-dwarf2-asm"
.PD 0
.IP "\fB\-mdwarf2\-asm\fR" 4
.IX Item "-mdwarf2-asm"
.PD
Don't (or do) generate assembla code fo' tha \s-1DWARF 2\s0 line number debugging
info.  This may be useful when not rockin tha \s-1GNU\s0 assembler.
.IP "\fB\-mearly\-stop\-bits\fR" 4
.IX Item "-mearly-stop-bits"
.PD 0
.IP "\fB\-mno\-early\-stop\-bits\fR" 4
.IX Item "-mno-early-stop-bits"
.PD
Allow stop bits ta be placed earlier than immediately precedin the
instruction dat triggered tha stop bit.  This can improve instruction
schedulin yo, but do not always do so.
.IP "\fB\-mfixed\-range=\fR\fIregister-range\fR" 4
.IX Item "-mfixed-range=register-range"
Generate code treatin tha given regista range as fixed registers.
A fixed regista is one dat tha regista allocator cannot use.  This is
useful when compilin kernel code.  A regista range is specified as
two registas separated by a thugged-out dash.  Multiple regista ranges can be
specified separated by a cold-ass lil comma.
.IP "\fB\-mtls\-size=\fR\fItls-size\fR" 4
.IX Item "-mtls-size=tls-size"
Specify bit size of immediate \s-1TLS\s0 offsets, n' you can put dat on yo' toast.  Valid joints is 14, 22, and
64.
.IP "\fB\-mtune=\fR\fIcpu-type\fR" 4
.IX Item "-mtune=cpu-type"
Tune tha instruction schedulin fo' a particular \s-1CPU,\s0 Valid joints are
\&\fBitanium\fR, \fBitanium1\fR, \fBmerced\fR, \fBitanium2\fR,
and \fBmckinley\fR.
.IP "\fB\-milp32\fR" 4
.IX Item "-milp32"
.PD 0
.IP "\fB\-mlp64\fR" 4
.IX Item "-mlp64"
.PD
Generate code fo' a 32\-bit or 64\-bit environment.
Da 32\-bit environment sets int, long n' pointa ta 32 bits.
Da 64\-bit environment sets int ta 32 bits n' long n' pointer
to 64 bits, n' you can put dat on yo' toast.  These is HP-UX specific flags.
.IP "\fB\-mno\-sched\-br\-data\-spec\fR" 4
.IX Item "-mno-sched-br-data-spec"
.PD 0
.IP "\fB\-msched\-br\-data\-spec\fR" 4
.IX Item "-msched-br-data-spec"
.PD
(Dis/En)able data speculatizzle schedulin before reload.
This thangs up in dis biatch up in generation of \f(CW\*(C`ld.a\*(C'\fR instructions and
the correspondin check instructions (\f(CW\*(C`ld.c\*(C'\fR / \f(CW\*(C`chk.a\*(C'\fR).
Da default is 'disable'.
.IP "\fB\-msched\-ar\-data\-spec\fR" 4
.IX Item "-msched-ar-data-spec"
.PD 0
.IP "\fB\-mno\-sched\-ar\-data\-spec\fR" 4
.IX Item "-mno-sched-ar-data-spec"
.PD
(En/Dis)able data speculatizzle schedulin afta reload.
This thangs up in dis biatch up in generation of \f(CW\*(C`ld.a\*(C'\fR instructions and
the correspondin check instructions (\f(CW\*(C`ld.c\*(C'\fR / \f(CW\*(C`chk.a\*(C'\fR).
Da default is 'enable'.
.IP "\fB\-mno\-sched\-control\-spec\fR" 4
.IX Item "-mno-sched-control-spec"
.PD 0
.IP "\fB\-msched\-control\-spec\fR" 4
.IX Item "-msched-control-spec"
.PD
(Dis/En)able control speculatizzle scheduling.  This feature is
available only durin region schedulin (i.e. before reload).
This thangs up in dis biatch up in generation of tha \f(CW\*(C`ld.s\*(C'\fR instructions and
the correspondin check instructions \f(CW\*(C`chk.s\*(C'\fR.
Da default is 'disable'.
.IP "\fB\-msched\-br\-in\-data\-spec\fR" 4
.IX Item "-msched-br-in-data-spec"
.PD 0
.IP "\fB\-mno\-sched\-br\-in\-data\-spec\fR" 4
.IX Item "-mno-sched-br-in-data-spec"
.PD
(En/Dis)able speculatizzle schedulin of tha instructions that
are dependent on tha data speculatizzle loadz before reload.
This is effectizzle only wit \fB\-msched\-br\-data\-spec\fR enabled.
Da default is 'enable'.
.IP "\fB\-msched\-ar\-in\-data\-spec\fR" 4
.IX Item "-msched-ar-in-data-spec"
.PD 0
.IP "\fB\-mno\-sched\-ar\-in\-data\-spec\fR" 4
.IX Item "-mno-sched-ar-in-data-spec"
.PD
(En/Dis)able speculatizzle schedulin of tha instructions that
are dependent on tha data speculatizzle loadz afta reload.
This is effectizzle only wit \fB\-msched\-ar\-data\-spec\fR enabled.
Da default is 'enable'.
.IP "\fB\-msched\-in\-control\-spec\fR" 4
.IX Item "-msched-in-control-spec"
.PD 0
.IP "\fB\-mno\-sched\-in\-control\-spec\fR" 4
.IX Item "-mno-sched-in-control-spec"
.PD
(En/Dis)able speculatizzle schedulin of tha instructions that
are dependent on tha control speculatizzle loads.
This is effectizzle only wit \fB\-msched\-control\-spec\fR enabled.
Da default is 'enable'.
.IP "\fB\-mno\-sched\-prefer\-non\-data\-spec\-insns\fR" 4
.IX Item "-mno-sched-prefer-non-data-spec-insns"
.PD 0
.IP "\fB\-msched\-prefer\-non\-data\-spec\-insns\fR" 4
.IX Item "-msched-prefer-non-data-spec-insns"
.PD
If enabled, data-speculatizzle instructions is chosen fo' schedule
only if there be no other chizzlez all up in tha moment.  This makes
the use of tha data speculation much mo' conservative.
Da default is 'disable'.
.IP "\fB\-mno\-sched\-prefer\-non\-control\-spec\-insns\fR" 4
.IX Item "-mno-sched-prefer-non-control-spec-insns"
.PD 0
.IP "\fB\-msched\-prefer\-non\-control\-spec\-insns\fR" 4
.IX Item "-msched-prefer-non-control-spec-insns"
.PD
If enabled, control-speculatizzle instructions is chosen fo' schedule
only if there be no other chizzlez all up in tha moment.  This makes
the use of tha control speculation much mo' conservative.
Da default is 'disable'.
.IP "\fB\-mno\-sched\-count\-spec\-in\-critical\-path\fR" 4
.IX Item "-mno-sched-count-spec-in-critical-path"
.PD 0
.IP "\fB\-msched\-count\-spec\-in\-critical\-path\fR" 4
.IX Item "-msched-count-spec-in-critical-path"
.PD
If enabled, speculatizzle dependencies is considered during
computation of tha instructions priorities. Put ya muthafuckin choppers up if ya feel dis!  This make tha use of the
speculation a lil' bit mo' conservative.
Da default is 'disable'.
.IP "\fB\-msched\-spec\-ldc\fR" 4
.IX Item "-msched-spec-ldc"
Use a simple data speculation check.  This option is on by default.
.IP "\fB\-msched\-control\-spec\-ldc\fR" 4
.IX Item "-msched-control-spec-ldc"
Use a simple check fo' control speculation. I aint talkin' bout chicken n' gravy biatch.  This option is on by default.
.IP "\fB\-msched\-stop\-bits\-after\-every\-cycle\fR" 4
.IX Item "-msched-stop-bits-after-every-cycle"
Place a stop bit afta every last muthafuckin cycle when scheduling.  This option is on
by default.
.IP "\fB\-msched\-fp\-mem\-deps\-zero\-cost\fR" 4
.IX Item "-msched-fp-mem-deps-zero-cost"
Assume dat floating-point stores n' loadz is not likely ta cause a cold-ass lil conflict
when placed tha fuck into tha same instruction group.  This option is disabled by
default.
.IP "\fB\-msel\-sched\-dont\-check\-control\-spec\fR" 4
.IX Item "-msel-sched-dont-check-control-spec"
Generate checks fo' control speculation up in selectizzle scheduling.
This flag is disabled by default.
.IP "\fB\-msched\-max\-memory\-insns=\fR\fImax-insns\fR" 4
.IX Item "-msched-max-memory-insns=max-insns"
Limit on tha number of memory insns per instruction group, givin lower
prioritizzle ta subsequent memory insns attemptin ta schedule up in tha same
instruction group. Frequently useful ta prevent cache bank conflicts.
Da default value is 1.
.IP "\fB\-msched\-max\-memory\-insns\-hard\-limit\fR" 4
.IX Item "-msched-max-memory-insns-hard-limit"
Makes tha limit specified by \fBmsched-max-memory-insns\fR a hard limit,
disallowin mo' than dat number up in a instruction group.
Otherwise, tha limit is \*(L"soft\*(R", meanin dat non-memory operations
are preferred when tha limit is reached yo, but memory operations may still
be scheduled.
.SS "\s-1LM32\s0 Options"
.IX Subsection "LM32 Options"
These \fB\-m\fR options is defined fo' tha LatticeMico32 architecture:
.IP "\fB\-mbarrel\-shift\-enabled\fR" 4
.IX Item "-mbarrel-shift-enabled"
Enable barrel-shift instructions.
.IP "\fB\-mdivide\-enabled\fR" 4
.IX Item "-mdivide-enabled"
Enable divide n' modulus instructions.
.IP "\fB\-mmultiply\-enabled\fR" 4
.IX Item "-mmultiply-enabled"
Enable multiply instructions.
.IP "\fB\-msign\-extend\-enabled\fR" 4
.IX Item "-msign-extend-enabled"
Enable sign extend instructions.
.IP "\fB\-muser\-enabled\fR" 4
.IX Item "-muser-enabled"
Enable user-defined instructions.
.SS "M32C Options"
.IX Subsection "M32C Options"
.IP "\fB\-mcpu=\fR\fIname\fR" 4
.IX Item "-mcpu=name"
Select tha \s-1CPU\s0 fo' which code is generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  \fIname\fR may be one of
\&\fBr8c\fR fo' tha R8C/Tiny series, \fBm16c\fR fo' tha M16C (up to
/60) series, \fBm32cm\fR fo' tha M16C/80 series, or \fBm32c\fR for
the M32C/80 series.
.IP "\fB\-msim\fR" 4
.IX Item "-msim"
Specifies dat tha program is ghon be run on tha simulator. Shiiit, dis aint no joke.  This causes
an alternate runtime library ta be linked up in which supports, for
example, file I/O.  Yo ass must not use dis option when generating
programs dat will run on real hardware; you must provide yo' own
runtime library fo' whatever I/O functions is needed.
.IP "\fB\-memregs=\fR\fInumber\fR" 4
.IX Item "-memregs=number"
Specifies tha number of memory-based pseudo-registas \s-1GCC\s0 uses
durin code generation. I aint talkin' bout chicken n' gravy biatch.  These pseudo-registas is used like real
registers, so there be a tradeoff between \s-1GCC\s0z mobilitizzle ta fit the
code tha fuck into available registers, n' tha performizzle penalty of using
memory instead of registers.  Note dat all modulez up in a program must
be compiled wit tha same value fo' dis option. I aint talkin' bout chicken n' gravy biatch.  Because of that, you
must not use dis option wit \s-1GCC\s0z default runtime libraries.
.SS "M32R/D Options"
.IX Subsection "M32R/D Options"
These \fB\-m\fR options is defined fo' Renesas M32R/D architectures:
.IP "\fB\-m32r2\fR" 4
.IX Item "-m32r2"
Generate code fo' tha M32R/2.
.IP "\fB\-m32rx\fR" 4
.IX Item "-m32rx"
Generate code fo' tha M32R/X.
.IP "\fB\-m32r\fR" 4
.IX Item "-m32r"
Generate code fo' tha M32R.  This is tha default.
.IP "\fB\-mmodel=small\fR" 4
.IX Item "-mmodel=small"
Assume all objects live up in tha lower 16MB of memory (so dat they addresses
can be loaded wit tha \f(CW\*(C`ld24\*(C'\fR instruction), n' assume all subroutines
are reachable wit tha \f(CW\*(C`bl\*(C'\fR instruction.
This is tha default.
.Sp
Da addressabilitizzle of a particular object can be set wit the
\&\f(CW\*(C`model\*(C'\fR attribute.
.IP "\fB\-mmodel=medium\fR" 4
.IX Item "-mmodel=medium"
Assume objects may be anywhere up in tha 32\-bit address space (the compiler
generates \f(CW\*(C`seth/add3\*(C'\fR instructions ta load they addresses), and
assume all subroutines is reachable wit tha \f(CW\*(C`bl\*(C'\fR instruction.
.IP "\fB\-mmodel=large\fR" 4
.IX Item "-mmodel=large"
Assume objects may be anywhere up in tha 32\-bit address space (the compiler
generates \f(CW\*(C`seth/add3\*(C'\fR instructions ta load they addresses), and
assume subroutines may not be reachable wit tha \f(CW\*(C`bl\*(C'\fR instruction
(the compila generates tha much slower \f(CW\*(C`seth/add3/jl\*(C'\fR
instruction sequence).
.IP "\fB\-msdata=none\fR" 4
.IX Item "-msdata=none"
Disable use of tha lil' small-ass data area.  Variablez is put into
one of \fB.data\fR, \fB.bss\fR, or \fB.rodata\fR (unless the
\&\f(CW\*(C`section\*(C'\fR attribute has been specified).
This is tha default.
.Sp
Da lil' small-ass data area consistz of sections \fB.sdata\fR n' \fB.sbss\fR.
Objects may be explicitly put up in tha lil' small-ass data area wit the
\&\f(CW\*(C`section\*(C'\fR attribute rockin one of these sections.
.IP "\fB\-msdata=sdata\fR" 4
.IX Item "-msdata=sdata"
Put lil' small-ass global n' static data up in tha lil' small-ass data area yo, but do not
generate special code ta reference em.
.IP "\fB\-msdata=use\fR" 4
.IX Item "-msdata=use"
Put lil' small-ass global n' static data up in tha lil' small-ass data area, n' generate
special instructions ta reference em.
.IP "\fB\-G\fR \fInum\fR" 4
.IX Item "-G num"
Put global n' static objects less than or equal ta \fInum\fR bytes
into tha lil' small-ass data or \s-1BSS\s0 sections instead of tha aiiight data or \s-1BSS\s0
sections.  Da default value of \fInum\fR is 8.
Da \fB\-msdata\fR option must be set ta one of \fBsdata\fR or \fBuse\fR
for dis option ta have any effect.
.Sp
All modulez should be compiled wit tha same \fB\-G\fR \fInum\fR value.
Compilin wit different jointz of \fInum\fR may or may not work; if it
doesn't tha linker gives a error message\-\-\-incorrect code is not
generated.
.IP "\fB\-mdebug\fR" 4
.IX Item "-mdebug"
Makes tha M32R\-specific code up in tha compila display some statistics
that might help up in debuggin programs.
.IP "\fB\-malign\-loops\fR" 4
.IX Item "-malign-loops"
Align all loops ta a 32\-byte boundary.
.IP "\fB\-mno\-align\-loops\fR" 4
.IX Item "-mno-align-loops"
Do not enforce a 32\-byte alignment fo' loops.  This is tha default.
.IP "\fB\-missue\-rate=\fR\fInumber\fR" 4
.IX Item "-missue-rate=number"
Issue \fInumber\fR instructions per cycle.  \fInumber\fR can only be 1
or 2.
.IP "\fB\-mbranch\-cost=\fR\fInumber\fR" 4
.IX Item "-mbranch-cost=number"
\&\fInumber\fR can only be 1 or 2.  If it is 1 then branches are
preferred over conditionizzle code, if it is 2, then tha opposite applies.
.IP "\fB\-mflush\-trap=\fR\fInumber\fR" 4
.IX Item "-mflush-trap=number"
Specifies tha trap number ta use ta flush tha cache.  Da default is
12.  Valid numbers is between 0 n' 15 inclusive.
.IP "\fB\-mno\-flush\-trap\fR" 4
.IX Item "-mno-flush-trap"
Specifies dat tha cache cannot be flushed by rockin a trap.
.IP "\fB\-mflush\-func=\fR\fIname\fR" 4
.IX Item "-mflush-func=name"
Specifies tha name of tha operatin system function ta booty-call ta flush
the cache.  Da default is \fI_flush_cache\fR yo, but a gangbangin' function call
is only used if a trap aint available.
.IP "\fB\-mno\-flush\-func\fR" 4
.IX Item "-mno-flush-func"
Indicates dat there is no \s-1OS\s0 function fo' flushin tha cache.
.SS "M680x0 Options"
.IX Subsection "M680x0 Options"
These is tha \fB\-m\fR options defined fo' M680x0 n' ColdFire processors.
Da default settings depend on which architecture was selected when
the compila was configured; tha defaults fo' da most thugged-out common chizzles
are given below.
.IP "\fB\-march=\fR\fIarch\fR" 4
.IX Item "-march=arch"
Generate code fo' a specific M680x0 or ColdFire instruction set
architecture.  Permissible jointz of \fIarch\fR fo' M680x0
architectures are: \fB68000\fR, \fB68010\fR, \fB68020\fR,
\&\fB68030\fR, \fB68040\fR, \fB68060\fR n' \fBcpu32\fR.  ColdFire
architectures is selected accordin ta Freescalez \s-1ISA\s0 classification
and tha permissible joints are: \fBisaa\fR, \fBisaaplus\fR,
\&\fBisab\fR n' \fBisac\fR.
.Sp
\&\s-1GCC\s0 defines a macro \fB_\|_mcf\fR\fIarch\fR\fB_\|_\fR whenever it is generating
code fo' a ColdFire target.  Da \fIarch\fR up in dis macro is one of the
\&\fB\-march\fR arguments given above.
.Sp
When used together, \fB\-march\fR n' \fB\-mtune\fR select code
that runs on a cold-ass lil crew of similar processors but dat is optimized
for a particular microarchitecture.
.IP "\fB\-mcpu=\fR\fIcpu\fR" 4
.IX Item "-mcpu=cpu"
Generate code fo' a specific M680x0 or ColdFire processor.
Da M680x0 \fIcpu\fRs are: \fB68000\fR, \fB68010\fR, \fB68020\fR,
\&\fB68030\fR, \fB68040\fR, \fB68060\fR, \fB68302\fR, \fB68332\fR
and \fBcpu32\fR.  Da ColdFire \fIcpu\fRs is given by tha table
below, which also classifies tha CPUs tha fuck into crews:
.RS 4
.IP "Family : \fB\-mcpu\fR arguments" 4
.IX Item "Family : -mcpu arguments"
.PD 0
.IP "\fB51\fR : \fB51\fR \fB51ac\fR \fB51ag\fR \fB51cn\fR \fB51em\fR \fB51je\fR \fB51jf\fR \fB51jg\fR \fB51jm\fR \fB51mm\fR \fB51qe\fR \fB51qm\fR" 4
.IX Item "51 : 51 51ac 51ag 51cn 51em 51je 51jf 51jg 51jm 51mm 51qe 51qm"
.IP "\fB5206\fR : \fB5202\fR \fB5204\fR \fB5206\fR" 4
.IX Item "5206 : 5202 5204 5206"
.IP "\fB5206e\fR : \fB5206e\fR" 4
.IX Item "5206e : 5206e"
.IP "\fB5208\fR : \fB5207\fR \fB5208\fR" 4
.IX Item "5208 : 5207 5208"
.IP "\fB5211a\fR : \fB5210a\fR \fB5211a\fR" 4
.IX Item "5211a : 5210a 5211a"
.IP "\fB5213\fR : \fB5211\fR \fB5212\fR \fB5213\fR" 4
.IX Item "5213 : 5211 5212 5213"
.IP "\fB5216\fR : \fB5214\fR \fB5216\fR" 4
.IX Item "5216 : 5214 5216"
.IP "\fB52235\fR : \fB52230\fR \fB52231\fR \fB52232\fR \fB52233\fR \fB52234\fR \fB52235\fR" 4
.IX Item "52235 : 52230 52231 52232 52233 52234 52235"
.IP "\fB5225\fR : \fB5224\fR \fB5225\fR" 4
.IX Item "5225 : 5224 5225"
.IP "\fB52259\fR : \fB52252\fR \fB52254\fR \fB52255\fR \fB52256\fR \fB52258\fR \fB52259\fR" 4
.IX Item "52259 : 52252 52254 52255 52256 52258 52259"
.IP "\fB5235\fR : \fB5232\fR \fB5233\fR \fB5234\fR \fB5235\fR \fB523x\fR" 4
.IX Item "5235 : 5232 5233 5234 5235 523x"
.IP "\fB5249\fR : \fB5249\fR" 4
.IX Item "5249 : 5249"
.IP "\fB5250\fR : \fB5250\fR" 4
.IX Item "5250 : 5250"
.IP "\fB5271\fR : \fB5270\fR \fB5271\fR" 4
.IX Item "5271 : 5270 5271"
.IP "\fB5272\fR : \fB5272\fR" 4
.IX Item "5272 : 5272"
.IP "\fB5275\fR : \fB5274\fR \fB5275\fR" 4
.IX Item "5275 : 5274 5275"
.IP "\fB5282\fR : \fB5280\fR \fB5281\fR \fB5282\fR \fB528x\fR" 4
.IX Item "5282 : 5280 5281 5282 528x"
.IP "\fB53017\fR : \fB53011\fR \fB53012\fR \fB53013\fR \fB53014\fR \fB53015\fR \fB53016\fR \fB53017\fR" 4
.IX Item "53017 : 53011 53012 53013 53014 53015 53016 53017"
.IP "\fB5307\fR : \fB5307\fR" 4
.IX Item "5307 : 5307"
.IP "\fB5329\fR : \fB5327\fR \fB5328\fR \fB5329\fR \fB532x\fR" 4
.IX Item "5329 : 5327 5328 5329 532x"
.IP "\fB5373\fR : \fB5372\fR \fB5373\fR \fB537x\fR" 4
.IX Item "5373 : 5372 5373 537x"
.IP "\fB5407\fR : \fB5407\fR" 4
.IX Item "5407 : 5407"
.IP "\fB5475\fR : \fB5470\fR \fB5471\fR \fB5472\fR \fB5473\fR \fB5474\fR \fB5475\fR \fB547x\fR \fB5480\fR \fB5481\fR \fB5482\fR \fB5483\fR \fB5484\fR \fB5485\fR" 4
.IX Item "5475 : 5470 5471 5472 5473 5474 5475 547x 5480 5481 5482 5483 5484 5485"
.RE
.RS 4
.PD
.Sp
\&\fB\-mcpu=\fR\fIcpu\fR overrides \fB\-march=\fR\fIarch\fR if
\&\fIarch\fR is compatible wit \fIcpu\fR.  Other combinations of
\&\fB\-mcpu\fR n' \fB\-march\fR is rejected.
.Sp
\&\s-1GCC\s0 defines tha macro \fB_\|_mcf_cpu_\fR\fIcpu\fR when ColdFire target
\&\fIcpu\fR is selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  It also defines \fB_\|_mcf_family_\fR\fIfamily\fR,
where tha value of \fIfamily\fR is given by tha table above.
.RE
.IP "\fB\-mtune=\fR\fItune\fR" 4
.IX Item "-mtune=tune"
Tune tha code fo' a particular microarchitecture within the
constraints set by \fB\-march\fR n' \fB\-mcpu\fR.
Da M680x0 microarchitectures are: \fB68000\fR, \fB68010\fR,
\&\fB68020\fR, \fB68030\fR, \fB68040\fR, \fB68060\fR
and \fBcpu32\fR.  Da ColdFire microarchitectures
are: \fBcfv1\fR, \fBcfv2\fR, \fBcfv3\fR, \fBcfv4\fR n' \fBcfv4e\fR.
.Sp
Yo ass can also use \fB\-mtune=68020\-40\fR fo' code dat needs
to run relatively well on 68020, 68030 n' 68040 targets.
\&\fB\-mtune=68020\-60\fR is similar but includes 68060 targets
as well.  These two options select tha same tunin decisions as
\&\fB\-m68020\-40\fR n' \fB\-m68020\-60\fR respectively.
.Sp
\&\s-1GCC\s0 defines tha macros \fB_\|_mc\fR\fIarch\fR n' \fB_\|_mc\fR\fIarch\fR\fB_\|_\fR
when tunin fo' 680x0 architecture \fIarch\fR.  It also defines
\&\fBmc\fR\fIarch\fR unless either \fB\-ansi\fR or a non-GNU \fB\-std\fR
option is used. Y'all KNOW dat shit, muthafucka!  If \s-1GCC\s0 is tunin fo' a range of architectures,
as selected by \fB\-mtune=68020\-40\fR or \fB\-mtune=68020\-60\fR,
it defines tha macros fo' every last muthafuckin architecture up in tha range.
.Sp
\&\s-1GCC\s0 also defines tha macro \fB_\|_m\fR\fIuarch\fR\fB_\|_\fR when tunin for
ColdFire microarchitecture \fIuarch\fR, where \fIuarch\fR is one
of tha arguments given above.
.IP "\fB\-m68000\fR" 4
.IX Item "-m68000"
.PD 0
.IP "\fB\-mc68000\fR" 4
.IX Item "-mc68000"
.PD
Generate output fo' a 68000.  This is tha default
when tha compila is configured fo' 68000\-based systems.
It be equivalent ta \fB\-march=68000\fR.
.Sp
Use dis option fo' microcontrollaz wit a 68000 or \s-1EC000\s0 core,
includin tha 68008, 68302, 68306, 68307, 68322, 68328 n' 68356.
.IP "\fB\-m68010\fR" 4
.IX Item "-m68010"
Generate output fo' a 68010.  This is tha default
when tha compila is configured fo' 68010\-based systems.
It be equivalent ta \fB\-march=68010\fR.
.IP "\fB\-m68020\fR" 4
.IX Item "-m68020"
.PD 0
.IP "\fB\-mc68020\fR" 4
.IX Item "-mc68020"
.PD
Generate output fo' a 68020.  This is tha default
when tha compila is configured fo' 68020\-based systems.
It be equivalent ta \fB\-march=68020\fR.
.IP "\fB\-m68030\fR" 4
.IX Item "-m68030"
Generate output fo' a 68030.  This is tha default when tha compila is
configured fo' 68030\-based systems.  It be equivalent to
\&\fB\-march=68030\fR.
.IP "\fB\-m68040\fR" 4
.IX Item "-m68040"
Generate output fo' a 68040.  This is tha default when tha compila is
configured fo' 68040\-based systems.  It be equivalent to
\&\fB\-march=68040\fR.
.Sp
This option inhibits tha use of 68881/68882 instructions dat gotta be
emulated by software on tha 68040.  Use dis option if yo' 68040 do not
have code ta emulate dem instructions.
.IP "\fB\-m68060\fR" 4
.IX Item "-m68060"
Generate output fo' a 68060.  This is tha default when tha compila is
configured fo' 68060\-based systems.  It be equivalent to
\&\fB\-march=68060\fR.
.Sp
This option inhibits tha use of 68020 n' 68881/68882 instructions that
have ta be emulated by software on tha 68060.  Use dis option if yo' 68060
does not have code ta emulate dem instructions.
.IP "\fB\-mcpu32\fR" 4
.IX Item "-mcpu32"
Generate output fo' a \s-1CPU32. \s0 This is tha default
when tha compila is configured fo' CPU32\-based systems.
It be equivalent ta \fB\-march=cpu32\fR.
.Sp
Use dis option fo' microcontrollaz wit a
\&\s-1CPU32\s0 or \s-1CPU32+\s0 core, includin tha 68330, 68331, 68332, 68333, 68334,
68336, 68340, 68341, 68349 n' 68360.
.IP "\fB\-m5200\fR" 4
.IX Item "-m5200"
Generate output fo' a 520X ColdFire \s-1CPU. \s0 This is tha default
when tha compila is configured fo' 520X\-based systems.
It be equivalent ta \fB\-mcpu=5206\fR, n' is now deprecated
in favor of dat option.
.Sp
Use dis option fo' microcontrolla wit a 5200 core, including
the \s-1MCF5202, MCF5203, MCF5204\s0 n' \s-1MCF5206.\s0
.IP "\fB\-m5206e\fR" 4
.IX Item "-m5206e"
Generate output fo' a 5206e ColdFire \s-1CPU. \s0 Da option is now
deprecated up in favor of tha equivalent \fB\-mcpu=5206e\fR.
.IP "\fB\-m528x\fR" 4
.IX Item "-m528x"
Generate output fo' a gangmember of tha ColdFire 528X crew.
Da option is now deprecated up in favor of tha equivalent
\&\fB\-mcpu=528x\fR.
.IP "\fB\-m5307\fR" 4
.IX Item "-m5307"
Generate output fo' a ColdFire 5307 \s-1CPU. \s0 Da option is now deprecated
in favor of tha equivalent \fB\-mcpu=5307\fR.
.IP "\fB\-m5407\fR" 4
.IX Item "-m5407"
Generate output fo' a ColdFire 5407 \s-1CPU. \s0 Da option is now deprecated
in favor of tha equivalent \fB\-mcpu=5407\fR.
.IP "\fB\-mcfv4e\fR" 4
.IX Item "-mcfv4e"
Generate output fo' a ColdFire V4e crew \s-1CPU \s0(e.g. 547x/548x).
This includes use of hardware floating-point instructions.
Da option is equivalent ta \fB\-mcpu=547x\fR, n' is now
deprecated up in favor of dat option.
.IP "\fB\-m68020\-40\fR" 4
.IX Item "-m68020-40"
Generate output fo' a 68040, without rockin any of tha freshly smoked up instructions.
This thangs up in dis biatch up in code dat can run relatively efficiently on either a
68020/68881 or a 68030 or a 68040.  Da generated code do use the
68881 instructions dat is emulated on tha 68040.
.Sp
Da option is equivalent ta \fB\-march=68020\fR \fB\-mtune=68020\-40\fR.
.IP "\fB\-m68020\-60\fR" 4
.IX Item "-m68020-60"
Generate output fo' a 68060, without rockin any of tha freshly smoked up instructions.
This thangs up in dis biatch up in code dat can run relatively efficiently on either a
68020/68881 or a 68030 or a 68040.  Da generated code do use the
68881 instructions dat is emulated on tha 68060.
.Sp
Da option is equivalent ta \fB\-march=68020\fR \fB\-mtune=68020\-60\fR.
.IP "\fB\-mhard\-float\fR" 4
.IX Item "-mhard-float"
.PD 0
.IP "\fB\-m68881\fR" 4
.IX Item "-m68881"
.PD
Generate floating-point instructions.  This is tha default fo' 68020
and above, n' fo' ColdFire devices dat have a \s-1FPU. \s0 It defines the
macro \fB_\|_HAVE_68881_\|_\fR on M680x0 targets n' \fB_\|_mcffpu_\|_\fR
on ColdFire targets.
.IP "\fB\-msoft\-float\fR" 4
.IX Item "-msoft-float"
Do not generate floating-point instructions; use library calls instead.
This is tha default fo' 68000, 68010, n' 68832 targets, n' you can put dat on yo' toast.  It be also
the default fo' ColdFire devices dat have no \s-1FPU.\s0
.IP "\fB\-mdiv\fR" 4
.IX Item "-mdiv"
.PD 0
.IP "\fB\-mno\-div\fR" 4
.IX Item "-mno-div"
.PD
Generate (do not generate) ColdFire hardware divide n' remainder
instructions.  If \fB\-march\fR is used without \fB\-mcpu\fR,
the default is \*(L"on\*(R" fo' ColdFire architectures n' \*(L"off\*(R" fo' M680x0
architectures.  Otherwise, tha default is taken from tha target \s-1CPU
\&\s0(either tha default \s-1CPU,\s0 or tha one specified by \fB\-mcpu\fR).  For
example, tha default is \*(L"off\*(R" fo' \fB\-mcpu=5206\fR n' \*(L"on\*(R" for
\&\fB\-mcpu=5206e\fR.
.Sp
\&\s-1GCC\s0 defines tha macro \fB_\|_mcfhwdiv_\|_\fR when dis option is enabled.
.IP "\fB\-mshort\fR" 4
.IX Item "-mshort"
Consider type \f(CW\*(C`int\*(C'\fR ta be 16 bits wide, like \f(CW\*(C`short int\*(C'\fR.
Additionally, parametas passed on tha stack is also aligned ta a
16\-bit boundary even on targets whose \s-1API\s0 mandates promotion ta 32\-bit.
.IP "\fB\-mno\-short\fR" 4
.IX Item "-mno-short"
Do not consider type \f(CW\*(C`int\*(C'\fR ta be 16 bits wide.  This is tha default.
.IP "\fB\-mnobitfield\fR" 4
.IX Item "-mnobitfield"
.PD 0
.IP "\fB\-mno\-bitfield\fR" 4
.IX Item "-mno-bitfield"
.PD
Do not use tha bit-field instructions.  Da \fB\-m68000\fR, \fB\-mcpu32\fR
and \fB\-m5200\fR options imply \fB\-mnobitfield\fR.
.IP "\fB\-mbitfield\fR" 4
.IX Item "-mbitfield"
Do use tha bit-field instructions.  Da \fB\-m68020\fR option implies
\&\fB\-mbitfield\fR.  This is tha default if you bust a cold-ass lil configuration
designed fo' a 68020.
.IP "\fB\-mrtd\fR" 4
.IX Item "-mrtd"
Use a gangbangin' finger-lickin' different function-callin convention, up in which functions
that take a gangbangin' fixed number of arguments return wit tha \f(CW\*(C`rtd\*(C'\fR
instruction, which pops they arguments while returning.  This
saves one instruction up in tha calla since there is no need ta pop
the arguments there.
.Sp
This callin convention is incompatible wit tha one normally
used on Unix, so you cannot use it if you need ta booty-call libraries
compiled wit tha Unix compiler.
.Sp
Also, you must provide function prototypes fo' all functions that
take variable numberz of arguments (includin \f(CW\*(C`printf\*(C'\fR);
otherwise incorrect code is generated fo' calls ta them
functions.
.Sp
In addition, seriously incorrect code thangs up in dis biatch if you call a
function wit too nuff arguments, n' you can put dat on yo' toast.  (Normally, extra arguments are
harmlessly ignored.)
.Sp
Da \f(CW\*(C`rtd\*(C'\fR instruction is supported by tha 68010, 68020, 68030,
68040, 68060 n' \s-1CPU32\s0 processors yo, but not by tha 68000 or 5200.
.IP "\fB\-mno\-rtd\fR" 4
.IX Item "-mno-rtd"
Do not use tha callin conventions selected by \fB\-mrtd\fR.
This is tha default.
.IP "\fB\-malign\-int\fR" 4
.IX Item "-malign-int"
.PD 0
.IP "\fB\-mno\-align\-int\fR" 4
.IX Item "-mno-align-int"
.PD
Control whether \s-1GCC\s0 aligns \f(CW\*(C`int\*(C'\fR, \f(CW\*(C`long\*(C'\fR, \f(CW\*(C`long long\*(C'\fR,
\&\f(CW\*(C`float\*(C'\fR, \f(CW\*(C`double\*(C'\fR, n' \f(CW\*(C`long double\*(C'\fR variablez on a 32\-bit
boundary (\fB\-malign\-int\fR) or a 16\-bit boundary (\fB\-mno\-align\-int\fR).
Alignin variablez on 32\-bit boundaries produces code dat runs somewhat
fasta on processors wit 32\-bit busses all up in tha expense of mo' memory.
.Sp
\&\fBWarning:\fR if you use tha \fB\-malign\-int\fR switch, \s-1GCC\s0
aligns structures containin tha above types differently than
most published application binary intercourse justifications fo' tha m68k.
.IP "\fB\-mpcrel\fR" 4
.IX Item "-mpcrel"
Use tha pc-relatizzle addressin mode of tha 68000 directly, instead of
usin a global offset table.  At present, dis option implies \fB\-fpic\fR,
allowin at most a 16\-bit offset fo' pc-relatizzle addressing.  \fB\-fPIC\fR is
not presently supported wit \fB\-mpcrel\fR, though dis could be supported for
68020 n' higher processors.
.IP "\fB\-mno\-strict\-align\fR" 4
.IX Item "-mno-strict-align"
.PD 0
.IP "\fB\-mstrict\-align\fR" 4
.IX Item "-mstrict-align"
.PD
Do not (do) assume dat unaligned memory references is handled by
the system.
.IP "\fB\-msep\-data\fR" 4
.IX Item "-msep-data"
Generate code dat allows tha data segment ta be located up in a gangbangin' finger-lickin' different
area of memory from tha text segment.  This allows fo' execute-in-place in
an environment without virtual memory pimpment.  This option implies
\&\fB\-fPIC\fR.
.IP "\fB\-mno\-sep\-data\fR" 4
.IX Item "-mno-sep-data"
Generate code dat assumes dat tha data segment bigs up tha text segment.
This is tha default.
.IP "\fB\-mid\-shared\-library\fR" 4
.IX Item "-mid-shared-library"
Generate code dat supports shared libraries via tha library \s-1ID\s0 method.
This allows fo' execute-in-place n' shared libraries up in a environment
without virtual memory pimpment.  This option implies \fB\-fPIC\fR.
.IP "\fB\-mno\-id\-shared\-library\fR" 4
.IX Item "-mno-id-shared-library"
Generate code dat don't assume ID-based shared libraries is bein used.
This is tha default.
.IP "\fB\-mshared\-library\-id=n\fR" 4
.IX Item "-mshared-library-id=n"
Specifies tha identification number of tha ID-based shared library being
compiled. Y'all KNOW dat shit, muthafucka!  Specifyin a value of 0 generates mo' compact code; specifying
other joints forces tha allocation of dat number ta tha current
library yo, but is no mo' space\- or time-efficient than omittin dis option.
.IP "\fB\-mxgot\fR" 4
.IX Item "-mxgot"
.PD 0
.IP "\fB\-mno\-xgot\fR" 4
.IX Item "-mno-xgot"
.PD
When generatin position-independent code fo' ColdFire, generate code
that works if tha \s-1GOT\s0 has mo' than 8192 entries. Put ya muthafuckin choppers up if ya feel dis!  This code is
larger n' slower than code generated without dis option. I aint talkin' bout chicken n' gravy biatch.  On M680x0
processors, dis option aint needed; \fB\-fPIC\fR suffices.
.Sp
\&\s-1GCC\s0 normally uses a single instruction ta load joints from tha \s-1GOT.\s0
While dis is relatively efficient, it only works if tha \s-1GOT\s0
is smalla than bout 64k.  Anythang larger causes tha linker
to report a error such as:
.Sp
.Vb 1
\&        relocation truncated ta fit: R_68K_GOT16O foobar
.Ve
.Sp
If dis happens, you should recompile yo' code wit \fB\-mxgot\fR.
It should then work wit straight-up big-ass GOTs.  But fuck dat shiznit yo, tha word on tha street is dat code generated with
\&\fB\-mxgot\fR is less efficient, since it takes 4 instructions ta fetch
the value of a global symbol.
.Sp
Note dat some linkers, includin newer versionz of tha \s-1GNU\s0 linker,
can create multiple GOTs n' sort \s-1GOT\s0 entries. Put ya muthafuckin choppers up if ya feel dis!  If you have such a linker,
you should only need ta use \fB\-mxgot\fR when compilin a single
object file dat accesses mo' than 8192 \s-1GOT\s0 entries. Put ya muthafuckin choppers up if ya feel dis!  Straight-up few do.
.Sp
These options have no effect unless \s-1GCC\s0 is generating
position-independent code.
.SS "MCore Options"
.IX Subsection "MCore Options"
These is tha \fB\-m\fR options defined fo' tha Motorola M*Core
processors.
.IP "\fB\-mhardlit\fR" 4
.IX Item "-mhardlit"
.PD 0
.IP "\fB\-mno\-hardlit\fR" 4
.IX Item "-mno-hardlit"
.PD
Inline constants tha fuck into tha code stream if it can be done up in two
instructions or less.
.IP "\fB\-mdiv\fR" 4
.IX Item "-mdiv"
.PD 0
.IP "\fB\-mno\-div\fR" 4
.IX Item "-mno-div"
.PD
Use tha divide instruction. I aint talkin' bout chicken n' gravy biatch.  (Enabled by default).
.IP "\fB\-mrelax\-immediate\fR" 4
.IX Item "-mrelax-immediate"
.PD 0
.IP "\fB\-mno\-relax\-immediate\fR" 4
.IX Item "-mno-relax-immediate"
.PD
Allow arbitrary-sized immediates up in bit operations.
.IP "\fB\-mwide\-bitfields\fR" 4
.IX Item "-mwide-bitfields"
.PD 0
.IP "\fB\-mno\-wide\-bitfields\fR" 4
.IX Item "-mno-wide-bitfields"
.PD
Always treat bit-fieldz as \f(CW\*(C`int\*(C'\fR\-sized.
.IP "\fB\-m4byte\-functions\fR" 4
.IX Item "-m4byte-functions"
.PD 0
.IP "\fB\-mno\-4byte\-functions\fR" 4
.IX Item "-mno-4byte-functions"
.PD
Force all functions ta be aligned ta a 4\-byte boundary.
.IP "\fB\-mcallgraph\-data\fR" 4
.IX Item "-mcallgraph-data"
.PD 0
.IP "\fB\-mno\-callgraph\-data\fR" 4
.IX Item "-mno-callgraph-data"
.PD
Emit callgraph shiznit.
.IP "\fB\-mslow\-bytes\fR" 4
.IX Item "-mslow-bytes"
.PD 0
.IP "\fB\-mno\-slow\-bytes\fR" 4
.IX Item "-mno-slow-bytes"
.PD
Prefer word access when readin byte quantities.
.IP "\fB\-mlil\-endian\fR" 4
.IX Item "-mlil-endian"
.PD 0
.IP "\fB\-mbig\-endian\fR" 4
.IX Item "-mbig-endian"
.PD
Generate code fo' a lil-endian target.
.IP "\fB\-m210\fR" 4
.IX Item "-m210"
.PD 0
.IP "\fB\-m340\fR" 4
.IX Item "-m340"
.PD
Generate code fo' tha 210 processor.
.IP "\fB\-mno\-lsim\fR" 4
.IX Item "-mno-lsim"
Assume dat runtime support has been provided n' so omit the
simulator library (\fIlibsim.a)\fR from tha linker command line.
.IP "\fB\-mstack\-increment=\fR\fIsize\fR" 4
.IX Item "-mstack-increment=size"
Set tha maximum amount fo' a single stack increment operation. I aint talkin' bout chicken n' gravy biatch.  Large
values can increase tha speed of programs dat contain functions
that need a big-ass amount of stack space yo, but they can also trigger a
segmentation fault if tha stack is extended too much.  Da default
value is 0x1000.
.SS "MeP Options"
.IX Subsection "MeP Options"
.IP "\fB\-mabsdiff\fR" 4
.IX Item "-mabsdiff"
Enablez tha \f(CW\*(C`abs\*(C'\fR instruction, which is tha absolute difference
between two registers.
.IP "\fB\-mall\-opts\fR" 4
.IX Item "-mall-opts"
Enablez all tha optionizzle instructions\-\-\-average, multiply, divide, bit
operations, leadin zero, absolute difference, min/max, clip, and
saturation.
.IP "\fB\-maverage\fR" 4
.IX Item "-maverage"
Enablez tha \f(CW\*(C`ave\*(C'\fR instruction, which computes tha average of two
registers.
.IP "\fB\-mbased=\fR\fIn\fR" 4
.IX Item "-mbased=n"
Variablez of size \fIn\fR bytes or smalla is placed up in the
\&\f(CW\*(C`.based\*(C'\fR section by default.  Based variablez use tha \f(CW$tp\fR
regista as a funky-ass base register, n' there be a 128\-byte limit ta the
\&\f(CW\*(C`.based\*(C'\fR section.
.IP "\fB\-mbitops\fR" 4
.IX Item "-mbitops"
Enablez tha bit operation instructions\-\-\-bit test (\f(CW\*(C`btstm\*(C'\fR), set
(\f(CW\*(C`bsetm\*(C'\fR), clear (\f(CW\*(C`bclrm\*(C'\fR), invert (\f(CW\*(C`bnotm\*(C'\fR), and
test-and-set (\f(CW\*(C`tas\*(C'\fR).
.IP "\fB\-mc=\fR\fIname\fR" 4
.IX Item "-mc=name"
Selects which section constant data is placed in. I aint talkin' bout chicken n' gravy biatch.  \fIname\fR may
be \f(CW\*(C`tiny\*(C'\fR, \f(CW\*(C`near\*(C'\fR, or \f(CW\*(C`far\*(C'\fR.
.IP "\fB\-mclip\fR" 4
.IX Item "-mclip"
Enablez tha \f(CW\*(C`clip\*(C'\fR instruction. I aint talkin' bout chicken n' gravy biatch.  Note dat \f(CW\*(C`\-mclip\*(C'\fR is not
useful unless you also provide \f(CW\*(C`\-mminmax\*(C'\fR.
.IP "\fB\-mconfig=\fR\fIname\fR" 4
.IX Item "-mconfig=name"
Selects one of tha built-in core configurations.  Each MeP chip has
one or mo' modulez up in it; each module has a cold-ass lil core \s-1CPU\s0 n' a variety of
coprocessors, optionizzle instructions, n' peripherals.  The
\&\f(CW\*(C`MeP\-Integrator\*(C'\fR tool, not part of \s-1GCC,\s0 serves up these
configurations all up in dis option; rockin dis option is tha same ol' dirty as
usin all tha correspondin command-line options.  Da default
configuration is \f(CW\*(C`default\*(C'\fR.
.IP "\fB\-mcop\fR" 4
.IX Item "-mcop"
Enablez tha coprocessor instructions.  By default, dis be a 32\-bit
coprocessor. Shiiit, dis aint no joke.  Note dat tha coprocessor is normally enabled via the
\&\f(CW\*(C`\-mconfig=\*(C'\fR option.
.IP "\fB\-mcop32\fR" 4
.IX Item "-mcop32"
Enablez tha 32\-bit coprocessorz instructions.
.IP "\fB\-mcop64\fR" 4
.IX Item "-mcop64"
Enablez tha 64\-bit coprocessorz instructions.
.IP "\fB\-mivc2\fR" 4
.IX Item "-mivc2"
Enablez \s-1IVC2\s0 scheduling.  \s-1IVC2\s0 be a 64\-bit \s-1VLIW\s0 coprocessor.
.IP "\fB\-mdc\fR" 4
.IX Item "-mdc"
Causes constant variablez ta be placed up in tha \f(CW\*(C`.near\*(C'\fR section.
.IP "\fB\-mdiv\fR" 4
.IX Item "-mdiv"
Enablez tha \f(CW\*(C`div\*(C'\fR n' \f(CW\*(C`divu\*(C'\fR instructions.
.IP "\fB\-meb\fR" 4
.IX Item "-meb"
Generate big-endian code.
.IP "\fB\-mel\fR" 4
.IX Item "-mel"
Generate lil-endian code.
.IP "\fB\-mio\-volatile\fR" 4
.IX Item "-mio-volatile"
Tells tha compila dat any variable marked wit tha \f(CW\*(C`io\*(C'\fR
attribute is ta be considered volatile.
.IP "\fB\-ml\fR" 4
.IX Item "-ml"
Causes variablez ta be assigned ta tha \f(CW\*(C`.far\*(C'\fR section by default.
.IP "\fB\-mleadz\fR" 4
.IX Item "-mleadz"
Enablez tha \f(CW\*(C`leadz\*(C'\fR (leadin zero) instruction.
.IP "\fB\-mm\fR" 4
.IX Item "-mm"
Causes variablez ta be assigned ta tha \f(CW\*(C`.near\*(C'\fR section by default.
.IP "\fB\-mminmax\fR" 4
.IX Item "-mminmax"
Enablez tha \f(CW\*(C`min\*(C'\fR n' \f(CW\*(C`max\*(C'\fR instructions.
.IP "\fB\-mmult\fR" 4
.IX Item "-mmult"
Enablez tha multiplication n' multiply-accumulate instructions.
.IP "\fB\-mno\-opts\fR" 4
.IX Item "-mno-opts"
Disablez all tha optionizzle instructions enabled by \f(CW\*(C`\-mall\-opts\*(C'\fR.
.IP "\fB\-mrepeat\fR" 4
.IX Item "-mrepeat"
Enablez tha \f(CW\*(C`repeat\*(C'\fR n' \f(CW\*(C`erepeat\*(C'\fR instructions, used for
low-overhead looping.
.IP "\fB\-ms\fR" 4
.IX Item "-ms"
Causes all variablez ta default ta tha \f(CW\*(C`.tiny\*(C'\fR section. I aint talkin' bout chicken n' gravy biatch.  Note
that there be a 65536\-byte limit ta dis section. I aint talkin' bout chicken n' gravy biatch.  Accesses ta these
variablez use tha \f(CW%gp\fR base register.
.IP "\fB\-msatur\fR" 4
.IX Item "-msatur"
Enablez tha saturation instructions.  Note dat tha compila do not
currently generate these itself yo, but dis option is included for
compatibilitizzle wit other tools, like \f(CW\*(C`as\*(C'\fR.
.IP "\fB\-msdram\fR" 4
.IX Item "-msdram"
Link tha SDRAM-based runtime instead of tha default ROM-based runtime.
.IP "\fB\-msim\fR" 4
.IX Item "-msim"
Link tha simulator runtime libraries.
.IP "\fB\-msimnovec\fR" 4
.IX Item "-msimnovec"
Link tha simulator runtime libraries, excludin built-in support
for reset n' exception vectors n' tables.
.IP "\fB\-mtf\fR" 4
.IX Item "-mtf"
Causes all functions ta default ta tha \f(CW\*(C`.far\*(C'\fR section. I aint talkin' bout chicken n' gravy biatch.  Without
this option, functions default ta tha \f(CW\*(C`.near\*(C'\fR section.
.IP "\fB\-mtiny=\fR\fIn\fR" 4
.IX Item "-mtiny=n"
Variablez dat is \fIn\fR bytes or smalla is allocated ta the
\&\f(CW\*(C`.tiny\*(C'\fR section. I aint talkin' bout chicken n' gravy biatch.  These variablez use tha \f(CW$gp\fR base
regista n' shit.  Da default fo' dis option is 4 yo, but note dat there be a a
65536\-byte limit ta tha \f(CW\*(C`.tiny\*(C'\fR section.
.SS "MicroBlaze Options"
.IX Subsection "MicroBlaze Options"
.IP "\fB\-msoft\-float\fR" 4
.IX Item "-msoft-float"
Use software emulation fo' floatin point (default).
.IP "\fB\-mhard\-float\fR" 4
.IX Item "-mhard-float"
Use hardware floating-point instructions.
.IP "\fB\-mmemcpy\fR" 4
.IX Item "-mmemcpy"
Do not optimize block moves, use \f(CW\*(C`memcpy\*(C'\fR.
.IP "\fB\-mno\-clearbss\fR" 4
.IX Item "-mno-clearbss"
This option is deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Use \fB\-fno\-zero\-initialized\-in\-bss\fR instead.
.IP "\fB\-mcpu=\fR\fIcpu-type\fR" 4
.IX Item "-mcpu=cpu-type"
Use features of, n' schedule code for, tha given \s-1CPU.\s0
Supported joints is up in tha format \fBv\fR\fIX\fR\fB.\fR\fI\s-1YY\s0\fR\fB.\fR\fIZ\fR,
where \fIX\fR be a major version, \fI\s-1YY\s0\fR is tha minor version, and
\&\fIZ\fR is compatibilitizzle code.  Example joints is \fBv3.00.a\fR,
\&\fBv4.00.b\fR, \fBv5.00.a\fR, \fBv5.00.b\fR, \fBv5.00.b\fR, \fBv6.00.a\fR.
.IP "\fB\-mxl\-soft\-mul\fR" 4
.IX Item "-mxl-soft-mul"
Use software multiply emulation (default).
.IP "\fB\-mxl\-soft\-div\fR" 4
.IX Item "-mxl-soft-div"
Use software emulation fo' divides (default).
.IP "\fB\-mxl\-barrel\-shift\fR" 4
.IX Item "-mxl-barrel-shift"
Use tha hardware barrel shifter.
.IP "\fB\-mxl\-pattern\-compare\fR" 4
.IX Item "-mxl-pattern-compare"
Use pattern compare instructions.
.IP "\fB\-msmall\-divides\fR" 4
.IX Item "-msmall-divides"
Use table lookup optimization fo' lil' small-ass signed integer divisions.
.IP "\fB\-mxl\-stack\-check\fR" 4
.IX Item "-mxl-stack-check"
This option is deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Use \fB\-fstack\-check\fR instead.
.IP "\fB\-mxl\-gp\-opt\fR" 4
.IX Item "-mxl-gp-opt"
Use GP-relatizzle \f(CW\*(C`.sdata\*(C'\fR/\f(CW\*(C`.sbss\*(C'\fR sections.
.IP "\fB\-mxl\-multiply\-high\fR" 4
.IX Item "-mxl-multiply-high"
Use multiply high instructions fo' high part of 32x32 multiply.
.IP "\fB\-mxl\-float\-convert\fR" 4
.IX Item "-mxl-float-convert"
Use hardware floating-point conversion instructions.
.IP "\fB\-mxl\-float\-sqrt\fR" 4
.IX Item "-mxl-float-sqrt"
Use hardware floating-point square root instruction.
.IP "\fB\-mbig\-endian\fR" 4
.IX Item "-mbig-endian"
Generate code fo' a funky-ass big-endian target.
.IP "\fB\-mlil\-endian\fR" 4
.IX Item "-mlil-endian"
Generate code fo' a lil-endian target.
.IP "\fB\-mxl\-reorder\fR" 4
.IX Item "-mxl-reorder"
Use reorder instructions (swap n' byte reversed load/store).
.IP "\fB\-mxl\-mode\-\fR\fIapp-model\fR" 4
.IX Item "-mxl-mode-app-model"
Select application model \fIapp-model\fR.  Valid models are
.RS 4
.IP "\fBexecutable\fR" 4
.IX Item "executable"
normal executable (default), uses startup code \fIcrt0.o\fR.
.IP "\fBxmdstub\fR" 4
.IX Item "xmdstub"
for use wit Xilinx Microprocessor Debugger (\s-1XMD\s0) based
software intrusive debug agent called xmdstub. This uses startup file
\&\fIcrt1.o\fR n' sets tha start address of tha program ta 0x800.
.IP "\fBbootstrap\fR" 4
.IX Item "bootstrap"
for applications dat is loaded rockin a funky-ass bootloader.
This model uses startup file \fIcrt2.o\fR which do not contain a processor
reset vector handlez n' shit. This is suitable fo' transferrin control on a
processor reset ta tha bootloader rather than tha application.
.IP "\fBnovectors\fR" 4
.IX Item "novectors"
for applications dat do not require any of the
MicroBlaze vectors. This option may be useful fo' applications hustlin
within a monitorin application. I aint talkin' bout chicken n' gravy biatch. This model uses \fIcrt3.o\fR as a startup file.
.RE
.RS 4
.Sp
Option \fB\-xl\-mode\-\fR\fIapp-model\fR be a thugged-out deprecated alias for
\&\fB\-mxl\-mode\-\fR\fIapp-model\fR.
.RE
.SS "\s-1MIPS\s0 Options"
.IX Subsection "MIPS Options"
.IP "\fB\-EB\fR" 4
.IX Item "-EB"
Generate big-endian code.
.IP "\fB\-EL\fR" 4
.IX Item "-EL"
Generate lil-endian code.  This is tha default fo' \fBmips*el\-*\-*\fR
configurations.
.IP "\fB\-march=\fR\fIarch\fR" 4
.IX Item "-march=arch"
Generate code dat runs on \fIarch\fR, which can be tha name of a
generic \s-1MIPS ISA,\s0 or tha name of a particular processor.
Da \s-1ISA\s0 names are:
\&\fBmips1\fR, \fBmips2\fR, \fBmips3\fR, \fBmips4\fR,
\&\fBmips32\fR, \fBmips32r2\fR, \fBmips64\fR n' \fBmips64r2\fR.
Da processor names are:
\&\fB4kc\fR, \fB4km\fR, \fB4kp\fR, \fB4ksc\fR,
\&\fB4kec\fR, \fB4kem\fR, \fB4kep\fR, \fB4ksd\fR,
\&\fB5kc\fR, \fB5kf\fR,
\&\fB20kc\fR,
\&\fB24kc\fR, \fB24kf2_1\fR, \fB24kf1_1\fR,
\&\fB24kec\fR, \fB24kef2_1\fR, \fB24kef1_1\fR,
\&\fB34kc\fR, \fB34kf2_1\fR, \fB34kf1_1\fR, \fB34kn\fR,
\&\fB74kc\fR, \fB74kf2_1\fR, \fB74kf1_1\fR, \fB74kf3_2\fR,
\&\fB1004kc\fR, \fB1004kf2_1\fR, \fB1004kf1_1\fR,
\&\fBloongson2e\fR, \fBloongson2f\fR, \fBloongson3a\fR,
\&\fBm4k\fR,
\&\fBocteon\fR, \fBocteon+\fR, \fBocteon2\fR,
\&\fBorion\fR,
\&\fBr2000\fR, \fBr3000\fR, \fBr3900\fR, \fBr4000\fR, \fBr4400\fR,
\&\fBr4600\fR, \fBr4650\fR, \fBr4700\fR, \fBr6000\fR, \fBr8000\fR,
\&\fBrm7000\fR, \fBrm9000\fR,
\&\fBr10000\fR, \fBr12000\fR, \fBr14000\fR, \fBr16000\fR,
\&\fBsb1\fR,
\&\fBsr71000\fR,
\&\fBvr4100\fR, \fBvr4111\fR, \fBvr4120\fR, \fBvr4130\fR, \fBvr4300\fR,
\&\fBvr5000\fR, \fBvr5400\fR, \fBvr5500\fR,
\&\fBxlr\fR n' \fBxlp\fR.
Da special value \fBfrom-abi\fR selects the
most compatible architecture fo' tha selected \s-1ABI \s0(that is,
\&\fBmips1\fR fo' 32\-bit ABIs n' \fBmips3\fR fo' 64\-bit ABIs).
.Sp
Da natizzle Linux/GNU toolchain also supports tha value \fBnative\fR,
which selects tha dopest architecture option fo' tha host processor.
\&\fB\-march=native\fR has no effect if \s-1GCC\s0 do not recognize
the processor.
.Sp
In processor names, a gangbangin' final \fB000\fR can be abbreviated as \fBk\fR
(for example, \fB\-march=r2k\fR).  Prefixes is optional, and
\&\fBvr\fR may be freestyled \fBr\fR.
.Sp
Namez of tha form \fIn\fR\fBf2_1\fR refer ta processors with
FPUs clocked at half tha rate of tha core, namez of tha form
\&\fIn\fR\fBf1_1\fR refer ta processors wit FPUs clocked all up in tha same
rate as tha core, n' namez of tha form \fIn\fR\fBf3_2\fR refer to
processors wit FPUs clocked a ratio of 3:2 wit respect ta tha core.
For compatibilitizzle reasons, \fIn\fR\fBf\fR be accepted as a synonym
for \fIn\fR\fBf2_1\fR while \fIn\fR\fBx\fR n' \fIb\fR\fBfx\fR are
accepted as synonyms fo' \fIn\fR\fBf1_1\fR.
.Sp
\&\s-1GCC\s0 defines two macros based on tha value of dis option. I aint talkin' bout chicken n' gravy biatch.  Da first
is \fB_MIPS_ARCH\fR, which gives tha name of target architecture, as
a string.  Da second has tha form \fB_MIPS_ARCH_\fR\fIfoo\fR,
where \fIfoo\fR is tha capitalized value of \fB_MIPS_ARCH\fR.
For example, \fB\-march=r2000\fR sets \fB_MIPS_ARCH\fR
to \fB\*(L"r2000\*(R"\fR n' defines tha macro \fB_MIPS_ARCH_R2000\fR.
.Sp
Note dat tha \fB_MIPS_ARCH\fR macro uses tha processor names given
above.  In other lyrics, it has tha full prefix n' do not
abbreviate \fB000\fR as \fBk\fR.  In tha case of \fBfrom-abi\fR,
the macro names tha resolved architecture (either \fB\*(L"mips1\*(R"\fR or
\&\fB\*(L"mips3\*(R"\fR).  It names tha default architecture when no
\&\fB\-march\fR option is given.
.IP "\fB\-mtune=\fR\fIarch\fR" 4
.IX Item "-mtune=arch"
Optimize fo' \fIarch\fR.  Among other thangs, dis option controls
the way instructions is scheduled, n' tha perceived cost of arithmetic
operations.  Da list of \fIarch\fR joints is tha same ol' dirty as for
\&\fB\-march\fR.
.Sp
When dis option aint used, \s-1GCC\s0 optimizes fo' tha processor
specified by \fB\-march\fR.  By rockin \fB\-march\fR and
\&\fB\-mtune\fR together, it is possible ta generate code that
runs on a cold-ass lil crew of processors yo, but optimize tha code fo' one
particular gangmember of dat crew.
.Sp
\&\fB\-mtune\fR defines tha macros \fB_MIPS_TUNE\fR and
\&\fB_MIPS_TUNE_\fR\fIfoo\fR, which work up in tha same way as the
\&\fB\-march\fR ones busted lyrics bout above.
.IP "\fB\-mips1\fR" 4
.IX Item "-mips1"
Equivalent ta \fB\-march=mips1\fR.
.IP "\fB\-mips2\fR" 4
.IX Item "-mips2"
Equivalent ta \fB\-march=mips2\fR.
.IP "\fB\-mips3\fR" 4
.IX Item "-mips3"
Equivalent ta \fB\-march=mips3\fR.
.IP "\fB\-mips4\fR" 4
.IX Item "-mips4"
Equivalent ta \fB\-march=mips4\fR.
.IP "\fB\-mips32\fR" 4
.IX Item "-mips32"
Equivalent ta \fB\-march=mips32\fR.
.IP "\fB\-mips32r2\fR" 4
.IX Item "-mips32r2"
Equivalent ta \fB\-march=mips32r2\fR.
.IP "\fB\-mips64\fR" 4
.IX Item "-mips64"
Equivalent ta \fB\-march=mips64\fR.
.IP "\fB\-mips64r2\fR" 4
.IX Item "-mips64r2"
Equivalent ta \fB\-march=mips64r2\fR.
.IP "\fB\-mips16\fR" 4
.IX Item "-mips16"
.PD 0
.IP "\fB\-mno\-mips16\fR" 4
.IX Item "-mno-mips16"
.PD
Generate (do not generate) \s-1MIPS16\s0 code.  If \s-1GCC\s0 is targetin a
\&\s-1MIPS32\s0 or \s-1MIPS64\s0 architecture, it make use of tha MIPS16e \s-1ASE.\s0
.Sp
\&\s-1MIPS16\s0 code generation can also be controlled on a per-function basis
by meanz of \f(CW\*(C`mips16\*(C'\fR n' \f(CW\*(C`nomips16\*(C'\fR attributes.
.IP "\fB\-mflip\-mips16\fR" 4
.IX Item "-mflip-mips16"
Generate \s-1MIPS16\s0 code on alternatin functions.  This option is provided
for regression testin of mixed MIPS16/non\-MIPS16 code generation, n' is
not intended fo' ordinary use up in compilin user code.
.IP "\fB\-minterlink\-mips16\fR" 4
.IX Item "-minterlink-mips16"
.PD 0
.IP "\fB\-mno\-interlink\-mips16\fR" 4
.IX Item "-mno-interlink-mips16"
.PD
Require (do not require) dat non\-MIPS16 code be link-compatible with
\&\s-1MIPS16\s0 code.
.Sp
For example, non\-MIPS16 code cannot jump directly ta \s-1MIPS16\s0 code;
it must either bust a cold-ass lil call or a indirect jump.  \fB\-minterlink\-mips16\fR
therefore disablez direct jumps unless \s-1GCC\s0 knows dat tha target of the
jump aint \s-1MIPS16.\s0
.IP "\fB\-mabi=32\fR" 4
.IX Item "-mabi=32"
.PD 0
.IP "\fB\-mabi=o64\fR" 4
.IX Item "-mabi=o64"
.IP "\fB\-mabi=n32\fR" 4
.IX Item "-mabi=n32"
.IP "\fB\-mabi=64\fR" 4
.IX Item "-mabi=64"
.IP "\fB\-mabi=eabi\fR" 4
.IX Item "-mabi=eabi"
.PD
Generate code fo' tha given \s-1ABI.\s0
.Sp
Note dat tha \s-1EABI\s0 has a 32\-bit n' a 64\-bit variant.  \s-1GCC\s0 normally
generates 64\-bit code when you select a 64\-bit architecture yo, but you
can use \fB\-mgp32\fR ta git 32\-bit code instead.
.Sp
For shiznit bout tha O64 \s-1ABI,\s0 see
<\fBhttp://gcc.gnu.org/projects/mipso64\-abi.html\fR>.
.Sp
\&\s-1GCC\s0 supports a variant of tha o32 \s-1ABI\s0 up in which floating-point registers
are 64 rather than 32 bits wide.  Yo ass can select dis combination with
\&\fB\-mabi=32\fR \fB\-mfp64\fR.  This \s-1ABI\s0 relies on tha \f(CW\*(C`mthc1\*(C'\fR
and \f(CW\*(C`mfhc1\*(C'\fR instructions n' is therefore only supported for
\&\s-1MIPS32R2\s0 processors.
.Sp
Da regista assignments fo' arguments n' return joints remain the
same yo, but each scalar value is passed up in a single 64\-bit register
rather than a pair of 32\-bit registers.  For example, scalar
floating-point joints is returned up in \fB\f(CB$f0\fB\fR only, not a
\&\fB\f(CB$f0\fB\fR/\fB\f(CB$f1\fB\fR pair. Shiiit, dis aint no joke.  Da set of call-saved registas also
remains tha same yo, but all 64 bits is saved.
.IP "\fB\-mabicalls\fR" 4
.IX Item "-mabicalls"
.PD 0
.IP "\fB\-mno\-abicalls\fR" 4
.IX Item "-mno-abicalls"
.PD
Generate (do not generate) code dat is suitable fo' SVR4\-style
dynamic objects, n' you can put dat on yo' toast.  \fB\-mabicalls\fR is tha default fo' SVR4\-based
systems.
.IP "\fB\-mshared\fR" 4
.IX Item "-mshared"
.PD 0
.IP "\fB\-mno\-shared\fR" 4
.IX Item "-mno-shared"
.PD
Generate (do not generate) code dat is straight-up position-independent,
and dat can therefore be linked tha fuck into shared libraries. Put ya muthafuckin choppers up if ya feel dis!  This option
only affects \fB\-mabicalls\fR.
.Sp
All \fB\-mabicalls\fR code has traditionally been position-independent,
regardless of options like \fB\-fPIC\fR n' \fB\-fpic\fR.  However,
as a extension, tha \s-1GNU\s0 toolchain allows executablez ta use absolute
accesses fo' locally-bindin symbols.  It can also use shorta \s-1GP\s0
initialization sequences n' generate direct calls ta locally-defined
functions.  This mode is selected by \fB\-mno\-shared\fR.
.Sp
\&\fB\-mno\-shared\fR dependz on binutils 2.16 or higher n' generates
objects dat can only be linked by tha \s-1GNU\s0 linker n' shit.  But fuck dat shiznit yo, tha word on tha street is dat tha option
does not affect tha \s-1ABI\s0 of tha final executable; it only affects tha \s-1ABI\s0
of relocatable objects, n' you can put dat on yo' toast.  Usin \fB\-mno\-shared\fR generally makes
executablez both smalla n' quicker.
.Sp
\&\fB\-mshared\fR is tha default.
.IP "\fB\-mplt\fR" 4
.IX Item "-mplt"
.PD 0
.IP "\fB\-mno\-plt\fR" 4
.IX Item "-mno-plt"
.PD
Assume (do not assume) dat tha static n' dynamic linkers
support PLTs n' copy relocations.  This option only affects
\&\fB\-mno\-shared \-mabicalls\fR.  For tha n64 \s-1ABI,\s0 dis option
has no effect without \fB\-msym32\fR.
.Sp
Yo ass can make \fB\-mplt\fR tha default by configuring
\&\s-1GCC\s0 wit \fB\-\-with\-mips\-plt\fR.  Da default is
\&\fB\-mno\-plt\fR otherwise.
.IP "\fB\-mxgot\fR" 4
.IX Item "-mxgot"
.PD 0
.IP "\fB\-mno\-xgot\fR" 4
.IX Item "-mno-xgot"
.PD
Lift (do not lift) tha usual restrictions on tha size of tha global
offset table.
.Sp
\&\s-1GCC\s0 normally uses a single instruction ta load joints from tha \s-1GOT.\s0
While dis is relatively efficient, it only works if tha \s-1GOT\s0
is smalla than bout 64k.  Anythang larger causes tha linker
to report a error such as:
.Sp
.Vb 1
\&        relocation truncated ta fit: R_MIPS_GOT16 foobar
.Ve
.Sp
If dis happens, you should recompile yo' code wit \fB\-mxgot\fR.
This works wit straight-up big-ass GOTs, although tha code be also
less efficient, since it takes three instructions ta fetch the
value of a global symbol.
.Sp
Note dat some linkers can create multiple GOTs.  If you have such a
linker, you should only need ta use \fB\-mxgot\fR when a single object
file accesses mo' than 64kz worth of \s-1GOT\s0 entries. Put ya muthafuckin choppers up if ya feel dis!  Straight-up few do.
.Sp
These options have no effect unless \s-1GCC\s0 is generatin position
independent code.
.IP "\fB\-mgp32\fR" 4
.IX Item "-mgp32"
Assume dat general-purpose registas is 32 bits wide.
.IP "\fB\-mgp64\fR" 4
.IX Item "-mgp64"
Assume dat general-purpose registas is 64 bits wide.
.IP "\fB\-mfp32\fR" 4
.IX Item "-mfp32"
Assume dat floating-point registas is 32 bits wide.
.IP "\fB\-mfp64\fR" 4
.IX Item "-mfp64"
Assume dat floating-point registas is 64 bits wide.
.IP "\fB\-mhard\-float\fR" 4
.IX Item "-mhard-float"
Use floating-point coprocessor instructions.
.IP "\fB\-msoft\-float\fR" 4
.IX Item "-msoft-float"
Do not use floating-point coprocessor instructions.  Implement
floating-point calculations rockin library calls instead.
.IP "\fB\-mno\-float\fR" 4
.IX Item "-mno-float"
Equivalent ta \fB\-msoft\-float\fR yo, but additionally asserts dat the
program bein compiled do not big-ass up any floating-point operations.
This option is presently supported only by some bare-metal \s-1MIPS\s0
configurations, where it may select a special set of libraries
that lack all floating-point support (including, fo' example, the
floating-point \f(CW\*(C`printf\*(C'\fR formats).  
If code compiled wit \f(CW\*(C`\-mno\-float\*(C'\fR accidentally gotz nuff
floating-point operations, it is likely ta suffer a link-time
or run-time failure.
.IP "\fB\-msingle\-float\fR" 4
.IX Item "-msingle-float"
Assume dat tha floating-point coprocessor only supports single-precision
operations.
.IP "\fB\-mdouble\-float\fR" 4
.IX Item "-mdouble-float"
Assume dat tha floating-point coprocessor supports double-precision
operations.  This is tha default.
.IP "\fB\-mllsc\fR" 4
.IX Item "-mllsc"
.PD 0
.IP "\fB\-mno\-llsc\fR" 4
.IX Item "-mno-llsc"
.PD
Use (do not use) \fBll\fR, \fBsc\fR, n' \fBsync\fR instructions to
implement atomic memory built-in functions.  When neither option is
specified, \s-1GCC\s0 uses tha instructions if tha target architecture
supports em.
.Sp
\&\fB\-mllsc\fR is useful if tha runtime environment can emulate the
instructions n' \fB\-mno\-llsc\fR can be useful when compilin for
nonstandard ISAs.  Yo ass can make either option tha default by
configurin \s-1GCC\s0 wit \fB\-\-with\-llsc\fR n' \fB\-\-without\-llsc\fR
respectively.  \fB\-\-with\-llsc\fR is tha default fo' some
configurations; peep tha installation documentation fo' details.
.IP "\fB\-mdsp\fR" 4
.IX Item "-mdsp"
.PD 0
.IP "\fB\-mno\-dsp\fR" 4
.IX Item "-mno-dsp"
.PD
Use (do not use) revision 1 of tha \s-1MIPS DSP ASE.
 \s0 This option defines the
preprocessor macro \fB_\|_mips_dsp\fR.  It also defines
\&\fB_\|_mips_dsp_rev\fR ta 1.
.IP "\fB\-mdspr2\fR" 4
.IX Item "-mdspr2"
.PD 0
.IP "\fB\-mno\-dspr2\fR" 4
.IX Item "-mno-dspr2"
.PD
Use (do not use) revision 2 of tha \s-1MIPS DSP ASE.
 \s0 This option defines the
preprocessor macros \fB_\|_mips_dsp\fR n' \fB_\|_mips_dspr2\fR.
It also defines \fB_\|_mips_dsp_rev\fR ta 2.
.IP "\fB\-msmartmips\fR" 4
.IX Item "-msmartmips"
.PD 0
.IP "\fB\-mno\-smartmips\fR" 4
.IX Item "-mno-smartmips"
.PD
Use (do not use) tha \s-1MIPS\s0 SmartMIPS \s-1ASE.\s0
.IP "\fB\-mpaired\-single\fR" 4
.IX Item "-mpaired-single"
.PD 0
.IP "\fB\-mno\-paired\-single\fR" 4
.IX Item "-mno-paired-single"
.PD
Use (do not use) paired-single floating-point instructions.
  This option requires
hardware floating-point support ta be enabled.
.IP "\fB\-mdmx\fR" 4
.IX Item "-mdmx"
.PD 0
.IP "\fB\-mno\-mdmx\fR" 4
.IX Item "-mno-mdmx"
.PD
Use (do not use) \s-1MIPS\s0 Digital Media Extension instructions.
This option can only be used when generatin 64\-bit code n' requires
hardware floating-point support ta be enabled.
.IP "\fB\-mips3d\fR" 4
.IX Item "-mips3d"
.PD 0
.IP "\fB\-mno\-mips3d\fR" 4
.IX Item "-mno-mips3d"
.PD
Use (do not use) tha \s-1MIPS\-3D ASE.  \s0
Da option \fB\-mips3d\fR implies \fB\-mpaired\-single\fR.
.IP "\fB\-mmt\fR" 4
.IX Item "-mmt"
.PD 0
.IP "\fB\-mno\-mt\fR" 4
.IX Item "-mno-mt"
.PD
Use (do not use) \s-1MT\s0 Multithreadin instructions.
.IP "\fB\-mmcu\fR" 4
.IX Item "-mmcu"
.PD 0
.IP "\fB\-mno\-mcu\fR" 4
.IX Item "-mno-mcu"
.PD
Use (do not use) tha \s-1MIPS MCU ASE\s0 instructions.
.IP "\fB\-mlong64\fR" 4
.IX Item "-mlong64"
Force \f(CW\*(C`long\*(C'\fR types ta be 64 bits wide.  See \fB\-mlong32\fR for
an explanation of tha default n' tha way dat tha pointa size is
determined.
.IP "\fB\-mlong32\fR" 4
.IX Item "-mlong32"
Force \f(CW\*(C`long\*(C'\fR, \f(CW\*(C`int\*(C'\fR, n' pointa types ta be 32 bits wide.
.Sp
Da default size of \f(CW\*(C`int\*(C'\fRs, \f(CW\*(C`long\*(C'\fRs n' pointas dependz on
the \s-1ABI. \s0 All tha supported ABIs use 32\-bit \f(CW\*(C`int\*(C'\fRs.  Da n64 \s-1ABI\s0
uses 64\-bit \f(CW\*(C`long\*(C'\fRs, as do tha 64\-bit \s-1EABI\s0; tha others use
32\-bit \f(CW\*(C`long\*(C'\fRs.  Pointas is tha same size as \f(CW\*(C`long\*(C'\fRs,
or tha same size as integer registers, whichever is smaller.
.IP "\fB\-msym32\fR" 4
.IX Item "-msym32"
.PD 0
.IP "\fB\-mno\-sym32\fR" 4
.IX Item "-mno-sym32"
.PD
Assume (do not assume) dat all symbols have 32\-bit joints, regardless
of tha selected \s-1ABI. \s0 This option is useful up in combination with
\&\fB\-mabi=64\fR n' \fB\-mno\-abicalls\fR cuz it allows \s-1GCC\s0
to generate shorta n' fasta references ta symbolic addresses.
.IP "\fB\-G\fR \fInum\fR" 4
.IX Item "-G num"
Put definitionz of externally-visible data up in a lil' small-ass data section
if dat data is no bigger than \fInum\fR bytes.  \s-1GCC\s0 can then generate
more efficient accesses ta tha data; peep \fB\-mgpopt\fR fo' details.
.Sp
Da default \fB\-G\fR option dependz on tha configuration.
.IP "\fB\-mlocal\-sdata\fR" 4
.IX Item "-mlocal-sdata"
.PD 0
.IP "\fB\-mno\-local\-sdata\fR" 4
.IX Item "-mno-local-sdata"
.PD
Extend (do not extend) tha \fB\-G\fR behavior ta local data too,
like fuckin ta static variablez up in C.  \fB\-mlocal\-sdata\fR is the
default fo' all configurations.
.Sp
If tha linker bitches dat a application is rockin too much lil' small-ass data,
you might wanna try rebuildin tha less performance-critical parts with
\&\fB\-mno\-local\-sdata\fR.  Yo ass might also wanna build large
libraries wit \fB\-mno\-local\-sdata\fR, so dat tha libraries leave
more room fo' tha main program.
.IP "\fB\-mextern\-sdata\fR" 4
.IX Item "-mextern-sdata"
.PD 0
.IP "\fB\-mno\-extern\-sdata\fR" 4
.IX Item "-mno-extern-sdata"
.PD
Assume (do not assume) dat externally-defined data is in
a lil' small-ass data section if tha size of dat data is within tha \fB\-G\fR limit.
\&\fB\-mextern\-sdata\fR is tha default fo' all configurations.
.Sp
If you compile a module \fIMod\fR wit \fB\-mextern\-sdata\fR \fB\-G\fR
\&\fInum\fR \fB\-mgpopt\fR, n' \fIMod\fR references a variable \fIVar\fR
that is no bigger than \fInum\fR bytes, you must make shizzle dat \fIVar\fR
is placed up in a lil' small-ass data section. I aint talkin' bout chicken n' gravy biatch.  If \fIVar\fR is defined by another
module, you must either compile dat module wit a high-enough
\&\fB\-G\fR settin or attach a \f(CW\*(C`section\*(C'\fR attribute ta \fIVar\fR's
definition. I aint talkin' bout chicken n' gravy biatch.  If \fIVar\fR is common, you must link tha application
with a high-enough \fB\-G\fR setting.
.Sp
Da easiest way of satisfyin these restrictions is ta compile
and link every last muthafuckin module wit tha same \fB\-G\fR option. I aint talkin' bout chicken n' gravy biatch.  However,
you may wish ta build a library dat supports nuff muthafuckin different
small data limits, n' you can put dat on yo' toast.  Yo ass can do dis by compilin tha library with
the highest supported \fB\-G\fR settin n' additionally using
\&\fB\-mno\-extern\-sdata\fR ta stop tha library from makin assumptions
about externally-defined data.
.IP "\fB\-mgpopt\fR" 4
.IX Item "-mgpopt"
.PD 0
.IP "\fB\-mno\-gpopt\fR" 4
.IX Item "-mno-gpopt"
.PD
Use (do not use) GP-relatizzle accesses fo' symbols dat is known ta be
in a lil' small-ass data section; peep \fB\-G\fR, \fB\-mlocal\-sdata\fR and
\&\fB\-mextern\-sdata\fR.  \fB\-mgpopt\fR is tha default fo' all
configurations.
.Sp
\&\fB\-mno\-gpopt\fR is useful fo' cases where tha \f(CW$gp\fR register
might not hold tha value of \f(CW\*(C`_gp\*(C'\fR.  For example, if tha code is
part of a library dat might be used up in a funky-ass boot monitor, programs that
call boot monitor routines pass a unknown value up in \f(CW$gp\fR.
(In such thangs, tha boot monitor itself is probably compiled
with \fB\-G0\fR.)
.Sp
\&\fB\-mno\-gpopt\fR implies \fB\-mno\-local\-sdata\fR and
\&\fB\-mno\-extern\-sdata\fR.
.IP "\fB\-membedded\-data\fR" 4
.IX Item "-membedded-data"
.PD 0
.IP "\fB\-mno\-embedded\-data\fR" 4
.IX Item "-mno-embedded-data"
.PD
Allocate variablez ta tha read-only data section first if possible, then
next up in tha lil' small-ass data section if possible, otherwise up in data.  This gives
slightly slower code than tha default yo, but reduces tha amount of \s-1RAM\s0 required
when executing, n' thus may be preferred fo' some embedded systems.
.IP "\fB\-muninit\-const\-in\-rodata\fR" 4
.IX Item "-muninit-const-in-rodata"
.PD 0
.IP "\fB\-mno\-uninit\-const\-in\-rodata\fR" 4
.IX Item "-mno-uninit-const-in-rodata"
.PD
Put uninitialized \f(CW\*(C`const\*(C'\fR variablez up in tha read-only data section.
This option is only meaningful up in conjunction wit \fB\-membedded\-data\fR.
.IP "\fB\-mcode\-readable=\fR\fIsetting\fR" 4
.IX Item "-mcode-readable=setting"
Specify whether \s-1GCC\s0 may generate code dat readz from executable sections.
There is three possible settings:
.RS 4
.IP "\fB\-mcode\-readable=yes\fR" 4
.IX Item "-mcode-readable=yes"
Instructions may freely access executable sections.  This is the
default setting.
.IP "\fB\-mcode\-readable=pcrel\fR" 4
.IX Item "-mcode-readable=pcrel"
\&\s-1MIPS16\s0 PC-relatizzle load instructions can access executable sections,
but other instructions must not do so.  This option is useful on 4KSc
and 4KSd processors when tha code TLBs have tha Read Inhibit bit set.
It be also useful on processors dat can be configured ta git a thugged-out dual
instruction/data \s-1SRAM\s0 intercourse n' that, like tha M4K, automatically
redirect PC-relatizzle loadz ta tha instruction \s-1RAM.\s0
.IP "\fB\-mcode\-readable=no\fR" 4
.IX Item "-mcode-readable=no"
Instructions must not access executable sections.  This option can be
useful on targets dat is configured ta git a thugged-out dual instruction/data
\&\s-1SRAM\s0 intercourse but dat (unlike tha M4K) do not automatically redirect
PC-relatizzle loadz ta tha instruction \s-1RAM.\s0
.RE
.RS 4
.RE
.IP "\fB\-msplit\-addresses\fR" 4
.IX Item "-msplit-addresses"
.PD 0
.IP "\fB\-mno\-split\-addresses\fR" 4
.IX Item "-mno-split-addresses"
.PD
Enable (disable) use of tha \f(CW\*(C`%hi()\*(C'\fR n' \f(CW\*(C`%lo()\*(C'\fR assembler
relocation operators.  This option has been superseded by
\&\fB\-mexplicit\-relocs\fR but is retained fo' backwardz compatibility.
.IP "\fB\-mexplicit\-relocs\fR" 4
.IX Item "-mexplicit-relocs"
.PD 0
.IP "\fB\-mno\-explicit\-relocs\fR" 4
.IX Item "-mno-explicit-relocs"
.PD
Use (do not use) assembla relocation operators when dealin wit symbolic
addresses.  Da alternative, selected by \fB\-mno\-explicit\-relocs\fR,
is ta use assembla macros instead.
.Sp
\&\fB\-mexplicit\-relocs\fR is tha default if \s-1GCC\s0 was configured
to use a assembla dat supports relocation operators.
.IP "\fB\-mcheck\-zero\-division\fR" 4
.IX Item "-mcheck-zero-division"
.PD 0
.IP "\fB\-mno\-check\-zero\-division\fR" 4
.IX Item "-mno-check-zero-division"
.PD
Trap (do not trap) on integer division by zero.
.Sp
Da default is \fB\-mcheck\-zero\-division\fR.
.IP "\fB\-mdivide\-traps\fR" 4
.IX Item "-mdivide-traps"
.PD 0
.IP "\fB\-mdivide\-breaks\fR" 4
.IX Item "-mdivide-breaks"
.PD
\&\s-1MIPS\s0 systems check fo' division by zero by generatin either a
conditionizzle trap or a funky-ass break instruction. I aint talkin' bout chicken n' gravy biatch.  Usin traps thangs up in dis biatch in
smalla code yo, but is only supported on \s-1MIPS Pt II\s0 n' later n' shit.  Also, some
versionz of tha Linux kernel gotz a funky-ass bug dat prevents trap from
generatin tha proper signal (\f(CW\*(C`SIGFPE\*(C'\fR).  Use \fB\-mdivide\-traps\fR to
allow conditionizzle traps on architectures dat support dem and
\&\fB\-mdivide\-breaks\fR ta force tha use of breaks.
.Sp
Da default is probably \fB\-mdivide\-traps\fR yo, but dis can be
overridden at configure time rockin \fB\-\-with\-divide=breaks\fR.
Divide-by-zero checks can be straight-up disabled using
\&\fB\-mno\-check\-zero\-division\fR.
.IP "\fB\-mmemcpy\fR" 4
.IX Item "-mmemcpy"
.PD 0
.IP "\fB\-mno\-memcpy\fR" 4
.IX Item "-mno-memcpy"
.PD
Force (do not force) tha use of \f(CW\*(C`memcpy()\*(C'\fR fo' non-trivial block
moves.  Da default is \fB\-mno\-memcpy\fR, which allows \s-1GCC\s0 ta inline
most constant-sized copies.
.IP "\fB\-mlong\-calls\fR" 4
.IX Item "-mlong-calls"
.PD 0
.IP "\fB\-mno\-long\-calls\fR" 4
.IX Item "-mno-long-calls"
.PD
Disable (do not disable) use of tha \f(CW\*(C`jal\*(C'\fR instruction. I aint talkin' bout chicken n' gravy biatch.  Calling
functions rockin \f(CW\*(C`jal\*(C'\fR is mo' efficient but requires tha caller
and callee ta be up in tha same 256 megabyte segment.
.Sp
This option has no effect on abicalls code.  Da default is
\&\fB\-mno\-long\-calls\fR.
.IP "\fB\-mmad\fR" 4
.IX Item "-mmad"
.PD 0
.IP "\fB\-mno\-mad\fR" 4
.IX Item "-mno-mad"
.PD
Enable (disable) use of tha \f(CW\*(C`mad\*(C'\fR, \f(CW\*(C`madu\*(C'\fR n' \f(CW\*(C`mul\*(C'\fR
instructions, as provided by tha R4650 \s-1ISA.\s0
.IP "\fB\-mfused\-madd\fR" 4
.IX Item "-mfused-madd"
.PD 0
.IP "\fB\-mno\-fused\-madd\fR" 4
.IX Item "-mno-fused-madd"
.PD
Enable (disable) use of tha floating-point multiply-accumulate
instructions, when they is available.  Da default is
\&\fB\-mfused\-madd\fR.
.Sp
On tha R8000 \s-1CPU\s0 when multiply-accumulate instructions is used,
the intermediate thang is calculated ta infinite precision
and aint subject ta tha \s-1FCSR\s0 Flush ta Zero bit.  This may be
undesirable up in some circumstances.  On other processors tha result
is numerically identical ta tha equivalent computation using
separate multiply, add, subtract n' negate instructions.
.IP "\fB\-nocpp\fR" 4
.IX Item "-nocpp"
Tell tha \s-1MIPS\s0 assembla ta not run its preprocessor over user
assembla filez (with a \fB.s\fR suffix) when assemblin em.
.IP "\fB\-mfix\-24k\fR" 4
.IX Item "-mfix-24k"
.PD 0
.IP "\fB\-mno\-fix\-24k\fR" 4
.IX Item "-mno-fix-24k"
.PD
Work round tha 24K E48 (lost data on stores durin refill) errata.
Da workaroundz is implemented by tha assembla rather than by \s-1GCC.\s0
.IP "\fB\-mfix\-r4000\fR" 4
.IX Item "-mfix-r4000"
.PD 0
.IP "\fB\-mno\-fix\-r4000\fR" 4
.IX Item "-mno-fix-r4000"
.PD
Work round certain R4000 \s-1CPU\s0 errata:
.RS 4
.IP "\-" 4
A double-word or a variable shift may give a incorrect result if executed
immediately afta startin a integer division.
.IP "\-" 4
A double-word or a variable shift may give a incorrect result if executed
while a integer multiplication is up in progress.
.IP "\-" 4
An integer division may give a incorrect result if started up in a thugged-out delay slot
of a taken branch or a jump.
.RE
.RS 4
.RE
.IP "\fB\-mfix\-r4400\fR" 4
.IX Item "-mfix-r4400"
.PD 0
.IP "\fB\-mno\-fix\-r4400\fR" 4
.IX Item "-mno-fix-r4400"
.PD
Work round certain R4400 \s-1CPU\s0 errata:
.RS 4
.IP "\-" 4
A double-word or a variable shift may give a incorrect result if executed
immediately afta startin a integer division.
.RE
.RS 4
.RE
.IP "\fB\-mfix\-r10000\fR" 4
.IX Item "-mfix-r10000"
.PD 0
.IP "\fB\-mno\-fix\-r10000\fR" 4
.IX Item "-mno-fix-r10000"
.PD
Work round certain R10000 errata:
.RS 4
.IP "\-" 4
\&\f(CW\*(C`ll\*(C'\fR/\f(CW\*(C`sc\*(C'\fR sequences may not behave atomically on revisions
prior ta 3.0.  They may deadlock on revisions 2.6 n' earlier.
.RE
.RS 4
.Sp
This option can only be used if tha target architecture supports
branch-likely instructions.  \fB\-mfix\-r10000\fR is tha default when
\&\fB\-march=r10000\fR is used; \fB\-mno\-fix\-r10000\fR is tha default
otherwise.
.RE
.IP "\fB\-mfix\-vr4120\fR" 4
.IX Item "-mfix-vr4120"
.PD 0
.IP "\fB\-mno\-fix\-vr4120\fR" 4
.IX Item "-mno-fix-vr4120"
.PD
Work round certain \s-1VR4120\s0 errata:
.RS 4
.IP "\-" 4
\&\f(CW\*(C`dmultu\*(C'\fR do not always produce tha erect result.
.IP "\-" 4
\&\f(CW\*(C`div\*(C'\fR n' \f(CW\*(C`ddiv\*(C'\fR do not always produce tha erect result if one
of tha operandz is negative.
.RE
.RS 4
.Sp
Da workaroundz fo' tha division errata rely on special functions in
\&\fIlibgcc.a\fR.  At present, these functions is only provided by
the \f(CW\*(C`mips64vr*\-elf\*(C'\fR configurations.
.Sp
Other \s-1VR4120\s0 errata require a \s-1NOP\s0 ta be banged between certain pairs of
instructions.  These errata is handled by tha assembler, not by \s-1GCC\s0 itself.
.RE
.IP "\fB\-mfix\-vr4130\fR" 4
.IX Item "-mfix-vr4130"
Work round tha \s-1VR4130 \s0\f(CW\*(C`mflo\*(C'\fR/\f(CW\*(C`mfhi\*(C'\fR errata.  The
workaroundz is implemented by tha assembla rather than by \s-1GCC,\s0
although \s-1GCC\s0 avoidz rockin \f(CW\*(C`mflo\*(C'\fR n' \f(CW\*(C`mfhi\*(C'\fR if the
\&\s-1VR4130 \s0\f(CW\*(C`macc\*(C'\fR, \f(CW\*(C`macchi\*(C'\fR, \f(CW\*(C`dmacc\*(C'\fR n' \f(CW\*(C`dmacchi\*(C'\fR
instructions is available instead.
.IP "\fB\-mfix\-sb1\fR" 4
.IX Item "-mfix-sb1"
.PD 0
.IP "\fB\-mno\-fix\-sb1\fR" 4
.IX Item "-mno-fix-sb1"
.PD
Work round certain \s-1SB\-1 CPU\s0 core errata.
(This flag currently works round tha \s-1SB\-1\s0 revision 2
\&\*(L"F1\*(R" n' \*(L"F2\*(R" floating-point errata.)
.IP "\fB\-mr10k\-cache\-barrier=\fR\fIsetting\fR" 4
.IX Item "-mr10k-cache-barrier=setting"
Specify whether \s-1GCC\s0 should bang cache barriers ta avoid the
side-effectz of speculation on R10K processors.
.Sp
In common wit nuff processors, tha R10K tries ta predict tha outcome
of a cold-ass lil conditionizzle branch n' speculatively executes instructions from
the \*(L"taken\*(R" branch.  It lata aborts these instructions if the
predicted outcome is wrong.  But fuck dat shiznit yo, tha word on tha street is dat on tha R10K, even aborted
instructions can have side effects.
.Sp
This problem only affects kernel stores and, dependin on tha system,
kernel loads.  As a example, a speculatively-executed store may load
the target memory tha fuck into cache n' mark tha cache line as dirty, even if
the store itself is lata aborted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If a \s-1DMA\s0 operation writes ta the
same area of memory before tha \*(L"dirty\*(R" line is flushed, tha cached
data overwrites tha DMA-ed data.  See tha R10K processor manual
for a gangbangin' full description, includin other potential problems.
.Sp
One workaround is ta bang cache barrier instructions before every last muthafuckin memory
access dat might be speculatively executed n' dat might have side
effects even if aborted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  \fB\-mr10k\-cache\-barrier=\fR\fIsetting\fR
controls \s-1GCC\s0z implementation of dis workaround. Y'all KNOW dat shit, muthafucka!  It assumes that
aborted accesses ta any byte up in tha followin regions do not have
side effects:
.RS 4
.IP "1." 4
the memory occupied by tha current functionz stack frame;
.IP "2." 4
the memory occupied by a incomin stack argument;
.IP "3." 4
the memory occupied by a object wit a link-time-constant address.
.RE
.RS 4
.Sp
It be tha kernelz responsibilitizzle ta ensure dat speculative
accesses ta these regions is indeed safe.
.Sp
If tha input program gotz nuff a gangbangin' function declaration such as:
.Sp
.Vb 1
\&        void foo (void);
.Ve
.Sp
then tha implementation of \f(CW\*(C`foo\*(C'\fR must allow \f(CW\*(C`j foo\*(C'\fR and
\&\f(CW\*(C`jal foo\*(C'\fR ta be executed speculatively.  \s-1GCC\s0 honors this
restriction fo' functions it compilez itself.  It expects non-GCC
functions (like fuckin hand-written assembly code) ta do tha same.
.Sp
Da option has three forms:
.IP "\fB\-mr10k\-cache\-barrier=load\-store\fR" 4
.IX Item "-mr10k-cache-barrier=load-store"
Insert a cold-ass lil cache barrier before a load or store dat might be
speculatively executed n' dat might have side effects even
if aborted.
.IP "\fB\-mr10k\-cache\-barrier=store\fR" 4
.IX Item "-mr10k-cache-barrier=store"
Insert a cold-ass lil cache barrier before a store dat might be speculatively
executed n' dat might have side effects even if aborted.
.IP "\fB\-mr10k\-cache\-barrier=none\fR" 4
.IX Item "-mr10k-cache-barrier=none"
Disable tha insertion of cache barriers.  This is tha default setting.
.RE
.RS 4
.RE
.IP "\fB\-mflush\-func=\fR\fIfunc\fR" 4
.IX Item "-mflush-func=func"
.PD 0
.IP "\fB\-mno\-flush\-func\fR" 4
.IX Item "-mno-flush-func"
.PD
Specifies tha function ta booty-call ta flush tha I n' D caches, or ta not
call any such function. I aint talkin' bout chicken n' gravy biatch.  If called, tha function must take tha same
arguments as tha common \f(CW\*(C`_flush_func()\*(C'\fR, dat is, tha address of the
memory range fo' which tha cache is bein flushed, tha size of the
memory range, n' tha number 3 (to flush both caches).  Da default
dependz on tha target \s-1GCC\s0 was configured fo' yo, but commonly is either
\&\fB_flush_func\fR or \fB_\|_cpu_flush\fR.
.IP "\fBmbranch\-cost=\fR\fInum\fR" 4
.IX Item "mbranch-cost=num"
Set tha cost of branches ta roughly \fInum\fR \*(L"simple\*(R" instructions.
This cost is only a heuristic n' aint guaranteed ta produce
consistent thangs up in dis biatch across releases.  A zero cost redundantly selects
the default, which is based on tha \fB\-mtune\fR setting.
.IP "\fB\-mbranch\-likely\fR" 4
.IX Item "-mbranch-likely"
.PD 0
.IP "\fB\-mno\-branch\-likely\fR" 4
.IX Item "-mno-branch-likely"
.PD
Enable or disable use of Branch Likely instructions, regardless of the
default fo' tha selected architecture.  By default, Branch Likely
instructions may be generated if they is supported by tha selected
architecture.  An exception is fo' tha \s-1MIPS32\s0 n' \s-1MIPS64\s0 architectures
and processors dat implement dem architectures; fo' them, Branch
Likely instructions is not be generated by default cuz tha \s-1MIPS32\s0
and \s-1MIPS64\s0 architectures specifically deprecate they use.
.IP "\fB\-mfp\-exceptions\fR" 4
.IX Item "-mfp-exceptions"
.PD 0
.IP "\fB\-mno\-fp\-exceptions\fR" 4
.IX Item "-mno-fp-exceptions"
.PD
Specifies whether \s-1FP\s0 exceptions is enabled. Y'all KNOW dat shit, muthafucka!  This affects how
\&\s-1FP\s0 instructions is scheduled fo' some processors.
Da default is dat \s-1FP\s0 exceptions are
enabled.
.Sp
For instance, on tha \s-1SB\-1,\s0 if \s-1FP\s0 exceptions is disabled, n' we is emitting
64\-bit code, then we can use both \s-1FP\s0 pipes.  Otherwise, we can only use one
\&\s-1FP\s0 pipe.
.IP "\fB\-mvr4130\-align\fR" 4
.IX Item "-mvr4130-align"
.PD 0
.IP "\fB\-mno\-vr4130\-align\fR" 4
.IX Item "-mno-vr4130-align"
.PD
Da \s-1VR4130\s0 pipeline is two-way superscalar yo, but can only issue two
instructions together if tha straight-up original gangsta one is 8\-byte aligned. Y'all KNOW dat shit, muthafucka!  When this
option is enabled, \s-1GCC\s0 aligns pairz of instructions dat it
thinks should execute up in parallel.
.Sp
This option only has a effect when optimizin fo' tha \s-1VR4130.\s0
It normally make code fasta yo, but all up in tha expense of makin it bigger.
It be enabled by default at optimization level \fB\-O3\fR.
.IP "\fB\-msynci\fR" 4
.IX Item "-msynci"
.PD 0
.IP "\fB\-mno\-synci\fR" 4
.IX Item "-mno-synci"
.PD
Enable (disable) generation of \f(CW\*(C`synci\*(C'\fR instructions on
architectures dat support dat shit.  Da \f(CW\*(C`synci\*(C'\fR instructions (if
enabled) is generated when \f(CW\*(C`_\|_builtin_\|_\|_clear_cache()\*(C'\fR is
compiled.
.Sp
This option defaults ta \f(CW\*(C`\-mno\-synci\*(C'\fR yo, but tha default can be
overridden by configurin wit \f(CW\*(C`\-\-with\-synci\*(C'\fR.
.Sp
When compilin code fo' single processor systems, it is generally safe
to use \f(CW\*(C`synci\*(C'\fR.  But fuck dat shiznit yo, tha word on tha street is dat on nuff multi-core (\s-1SMP\s0) systems, it
does not invalidate tha instruction caches on all cores n' may lead
to undefined behavior.
.IP "\fB\-mrelax\-pic\-calls\fR" 4
.IX Item "-mrelax-pic-calls"
.PD 0
.IP "\fB\-mno\-relax\-pic\-calls\fR" 4
.IX Item "-mno-relax-pic-calls"
.PD
Try ta turn \s-1PIC\s0 calls dat is normally dispatched via register
\&\f(CW$25\fR tha fuck into direct calls.  This is only possible if tha linker can
resolve tha destination at link-time n' if tha destination is within
range fo' a gangbangin' finger-lickin' direct call.
.Sp
\&\fB\-mrelax\-pic\-calls\fR is tha default if \s-1GCC\s0 was configured ta use
an assembla n' a linker dat support tha \f(CW\*(C`.reloc\*(C'\fR assembly
directizzle n' \f(CW\*(C`\-mexplicit\-relocs\*(C'\fR is up in effect.  With
\&\f(CW\*(C`\-mno\-explicit\-relocs\*(C'\fR, dis optimization can be performed by the
assembla n' tha linker ridin' solo without help from tha compiler.
.IP "\fB\-mmcount\-ra\-address\fR" 4
.IX Item "-mmcount-ra-address"
.PD 0
.IP "\fB\-mno\-mcount\-ra\-address\fR" 4
.IX Item "-mno-mcount-ra-address"
.PD
Emit (do not emit) code dat allows \f(CW\*(C`_mcount\*(C'\fR ta modify the
callin functionz return address.  When enabled, dis option extends
the usual \f(CW\*(C`_mcount\*(C'\fR intercourse wit a freshly smoked up \fIra-address\fR
parameter, which has type \f(CW\*(C`intptr_t *\*(C'\fR n' is passed up in register
\&\f(CW$12\fR.  \f(CW\*(C`_mcount\*(C'\fR can then modify tha return address by
fuckin wit both of tha following:
.RS 4
.IP "\(bu" 4
Returnin tha freshly smoked up address up in regista \f(CW$31\fR.
.IP "\(bu" 4
Storin tha freshly smoked up address up in \f(CW\*(C`*\f(CIra\-address\f(CW\*(C'\fR,
if \fIra-address\fR is nonnull.
.RE
.RS 4
.Sp
Da default is \fB\-mno\-mcount\-ra\-address\fR.
.RE
.SS "\s-1MMIX\s0 Options"
.IX Subsection "MMIX Options"
These options is defined fo' tha \s-1MMIX:\s0
.IP "\fB\-mlibfuncs\fR" 4
.IX Item "-mlibfuncs"
.PD 0
.IP "\fB\-mno\-libfuncs\fR" 4
.IX Item "-mno-libfuncs"
.PD
Specify dat intrinsic library functions is bein compiled, passin all
values up in registers, no matta tha size.
.IP "\fB\-mepsilon\fR" 4
.IX Item "-mepsilon"
.PD 0
.IP "\fB\-mno\-epsilon\fR" 4
.IX Item "-mno-epsilon"
.PD
Generate floating-point comparison instructions dat compare wit respect
to tha \f(CW\*(C`rE\*(C'\fR epsilon register.
.IP "\fB\-mabi=mmixware\fR" 4
.IX Item "-mabi=mmixware"
.PD 0
.IP "\fB\-mabi=gnu\fR" 4
.IX Item "-mabi=gnu"
.PD
Generate code dat passes function parametas n' return joints dat (in
the called function) is peeped as registas \f(CW$0\fR n' up, as opposed to
the \s-1GNU ABI\s0 which uses global registas \f(CW$231\fR n' up.
.IP "\fB\-mzero\-extend\fR" 4
.IX Item "-mzero-extend"
.PD 0
.IP "\fB\-mno\-zero\-extend\fR" 4
.IX Item "-mno-zero-extend"
.PD
When readin data from memory up in sizes shorta than 64 bits, use (do not
use) zero-extendin load instructions by default, rather than
sign-extendin ones.
.IP "\fB\-mknuthdiv\fR" 4
.IX Item "-mknuthdiv"
.PD 0
.IP "\fB\-mno\-knuthdiv\fR" 4
.IX Item "-mno-knuthdiv"
.PD
Make tha result of a gangbangin' finger-lickin' division yieldin a remainder have tha same sign as
the divisor. Shiiit, dis aint no joke.  With tha default, \fB\-mno\-knuthdiv\fR, tha sign of the
remainder bigs up tha sign of tha dividend yo, but it ain't no stoppin cause I be still poppin'.  Both methodz are
arithmetically valid, tha latta bein almost exclusively used.
.IP "\fB\-mtoplevel\-symbols\fR" 4
.IX Item "-mtoplevel-symbols"
.PD 0
.IP "\fB\-mno\-toplevel\-symbols\fR" 4
.IX Item "-mno-toplevel-symbols"
.PD
Prepend (do not prepend) a \fB:\fR ta all global symbols, so tha assembly
code can be used wit tha \f(CW\*(C`PREFIX\*(C'\fR assembly directive.
.IP "\fB\-melf\fR" 4
.IX Item "-melf"
Generate a executable up in tha \s-1ELF\s0 format, rather than tha default
\&\fBmmo\fR format used by tha \fBmmix\fR simulator.
.IP "\fB\-mbranch\-predict\fR" 4
.IX Item "-mbranch-predict"
.PD 0
.IP "\fB\-mno\-branch\-predict\fR" 4
.IX Item "-mno-branch-predict"
.PD
Use (do not use) tha probable-branch instructions, when static branch
prediction indicates a probable branch.
.IP "\fB\-mbase\-addresses\fR" 4
.IX Item "-mbase-addresses"
.PD 0
.IP "\fB\-mno\-base\-addresses\fR" 4
.IX Item "-mno-base-addresses"
.PD
Generate (do not generate) code dat uses \fIbase addresses\fR.  Usin a
base address automatically generates a request (handled by tha assembler
and tha linker) fo' a cold-ass lil constant ta be set up in a global regista n' shit.  The
regista is used fo' one or mo' base address requests within tha range 0
to 255 from tha value held up in tha regista n' shit.  Da generally leadz ta short
and fast code yo, but tha number of different data shit dat can be
addressed is limited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This means dat a program dat uses fuckin shitloadz of static
data may require \fB\-mno\-base\-addresses\fR.
.IP "\fB\-msingle\-exit\fR" 4
.IX Item "-msingle-exit"
.PD 0
.IP "\fB\-mno\-single\-exit\fR" 4
.IX Item "-mno-single-exit"
.PD
Force (do not force) generated code ta git a single exit point up in each
function.
.SS "\s-1MN10300\s0 Options"
.IX Subsection "MN10300 Options"
These \fB\-m\fR options is defined fo' Matsushita \s-1MN10300\s0 architectures:
.IP "\fB\-mmult\-bug\fR" 4
.IX Item "-mmult-bug"
Generate code ta avoid bugs up in tha multiply instructions fo' tha \s-1MN10300\s0
processors.  This is tha default.
.IP "\fB\-mno\-mult\-bug\fR" 4
.IX Item "-mno-mult-bug"
Do not generate code ta avoid bugs up in tha multiply instructions fo' the
\&\s-1MN10300\s0 processors.
.IP "\fB\-mam33\fR" 4
.IX Item "-mam33"
Generate code rockin features specific ta tha \s-1AM33\s0 processor.
.IP "\fB\-mno\-am33\fR" 4
.IX Item "-mno-am33"
Do not generate code rockin features specific ta tha \s-1AM33\s0 processor. Shiiit, dis aint no joke.  This
is tha default.
.IP "\fB\-mam33\-2\fR" 4
.IX Item "-mam33-2"
Generate code rockin features specific ta tha \s-1AM33/2.0\s0 processor.
.IP "\fB\-mam34\fR" 4
.IX Item "-mam34"
Generate code rockin features specific ta tha \s-1AM34\s0 processor.
.IP "\fB\-mtune=\fR\fIcpu-type\fR" 4
.IX Item "-mtune=cpu-type"
Use tha timin characteristics of tha indicated \s-1CPU\s0 type when
schedulin instructions.  This do not chizzle tha targeted processor
type.  Da \s-1CPU\s0 type must be one of \fBmn10300\fR, \fBam33\fR,
\&\fBam33\-2\fR or \fBam34\fR.
.IP "\fB\-mreturn\-pointer\-on\-d0\fR" 4
.IX Item "-mreturn-pointer-on-d0"
When generatin a gangbangin' function dat returns a pointer, return tha pointer
in both \f(CW\*(C`a0\*(C'\fR n' \f(CW\*(C`d0\*(C'\fR.  Otherwise, tha pointa is returned
only up in \f(CW\*(C`a0\*(C'\fR, n' attempts ta booty-call such functions without a prototype
result up in errors.  Note dat dis option is on by default; use
\&\fB\-mno\-return\-pointer\-on\-d0\fR ta disable dat shit.
.IP "\fB\-mno\-crt0\fR" 4
.IX Item "-mno-crt0"
Do not link up in tha C run-time initialization object file.
.IP "\fB\-mrelax\fR" 4
.IX Item "-mrelax"
Indicate ta tha linker dat it should big-ass up a chillaxation optimization pass
to shorten branches, calls n' absolute memory addresses.  This option only
has a effect when used on tha command line fo' tha final link step.
.Sp
This option make symbolic debuggin impossible.
.IP "\fB\-mliw\fR" 4
.IX Item "-mliw"
Allow tha compila ta generate \fILong Instruction Word\fR
instructions if tha target is tha \fB\s-1AM33\s0\fR or later n' shit.  This is the
default.  This option defines tha preprocessor macro \fB_\|_LIW_\|_\fR.
.IP "\fB\-mnoliw\fR" 4
.IX Item "-mnoliw"
Do not allow tha compila ta generate \fILong Instruction Word\fR
instructions.  This option defines tha preprocessor macro
\&\fB_\|_NO_LIW_\|_\fR.
.IP "\fB\-msetlb\fR" 4
.IX Item "-msetlb"
Allow tha compila ta generate tha \fI\s-1SETLB\s0\fR n' \fILcc\fR
instructions if tha target is tha \fB\s-1AM33\s0\fR or later n' shit.  This is the
default.  This option defines tha preprocessor macro \fB_\|_SETLB_\|_\fR.
.IP "\fB\-mnosetlb\fR" 4
.IX Item "-mnosetlb"
Do not allow tha compila ta generate \fI\s-1SETLB\s0\fR or \fILcc\fR
instructions.  This option defines tha preprocessor macro
\&\fB_\|_NO_SETLB_\|_\fR.
.SS "Moxie Options"
.IX Subsection "Moxie Options"
.IP "\fB\-meb\fR" 4
.IX Item "-meb"
Generate big-endian code.  This is tha default fo' \fBmoxie\-*\-*\fR
configurations.
.IP "\fB\-mel\fR" 4
.IX Item "-mel"
Generate lil-endian code.
.IP "\fB\-mno\-crt0\fR" 4
.IX Item "-mno-crt0"
Do not link up in tha C run-time initialization object file.
.SS "\s-1PDP\-11\s0 Options"
.IX Subsection "PDP-11 Options"
These options is defined fo' tha \s-1PDP\-11:\s0
.IP "\fB\-mfpu\fR" 4
.IX Item "-mfpu"
Use hardware \s-1FPP\s0 floatin point.  This is tha default.  (\s-1FIS\s0 floating
point on tha \s-1PDP\-11/40\s0 aint supported.)
.IP "\fB\-msoft\-float\fR" 4
.IX Item "-msoft-float"
Do not use hardware floatin point.
.IP "\fB\-mac0\fR" 4
.IX Item "-mac0"
Return floating-point thangs up in dis biatch up in ac0 (fr0 up in Unix assembla syntax).
.IP "\fB\-mno\-ac0\fR" 4
.IX Item "-mno-ac0"
Return floating-point thangs up in dis biatch up in memory.  This is tha default.
.IP "\fB\-m40\fR" 4
.IX Item "-m40"
Generate code fo' a \s-1PDP\-11/40.\s0
.IP "\fB\-m45\fR" 4
.IX Item "-m45"
Generate code fo' a \s-1PDP\-11/45. \s0 This is tha default.
.IP "\fB\-m10\fR" 4
.IX Item "-m10"
Generate code fo' a \s-1PDP\-11/10.\s0
.IP "\fB\-mbcopy\-builtin\fR" 4
.IX Item "-mbcopy-builtin"
Use inline \f(CW\*(C`movmemhi\*(C'\fR patterns fo' copyin memory.  This is the
default.
.IP "\fB\-mbcopy\fR" 4
.IX Item "-mbcopy"
Do not use inline \f(CW\*(C`movmemhi\*(C'\fR patterns fo' copyin memory.
.IP "\fB\-mint16\fR" 4
.IX Item "-mint16"
.PD 0
.IP "\fB\-mno\-int32\fR" 4
.IX Item "-mno-int32"
.PD
Use 16\-bit \f(CW\*(C`int\*(C'\fR.  This is tha default.
.IP "\fB\-mint32\fR" 4
.IX Item "-mint32"
.PD 0
.IP "\fB\-mno\-int16\fR" 4
.IX Item "-mno-int16"
.PD
Use 32\-bit \f(CW\*(C`int\*(C'\fR.
.IP "\fB\-mfloat64\fR" 4
.IX Item "-mfloat64"
.PD 0
.IP "\fB\-mno\-float32\fR" 4
.IX Item "-mno-float32"
.PD
Use 64\-bit \f(CW\*(C`float\*(C'\fR.  This is tha default.
.IP "\fB\-mfloat32\fR" 4
.IX Item "-mfloat32"
.PD 0
.IP "\fB\-mno\-float64\fR" 4
.IX Item "-mno-float64"
.PD
Use 32\-bit \f(CW\*(C`float\*(C'\fR.
.IP "\fB\-mabshi\fR" 4
.IX Item "-mabshi"
Use \f(CW\*(C`abshi2\*(C'\fR pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch.  This is tha default.
.IP "\fB\-mno\-abshi\fR" 4
.IX Item "-mno-abshi"
Do not use \f(CW\*(C`abshi2\*(C'\fR pattern.
.IP "\fB\-mbranch\-expensive\fR" 4
.IX Item "-mbranch-expensive"
Pretend dat branches is expensive.  This is fo' fuckin wit with
code generation only.
.IP "\fB\-mbranch\-cheap\fR" 4
.IX Item "-mbranch-cheap"
Do not pretend dat branches is expensive.  This is tha default.
.IP "\fB\-munix\-asm\fR" 4
.IX Item "-munix-asm"
Use Unix assembla syntax.  This is tha default when configured for
\&\fBpdp11\-*\-bsd\fR.
.IP "\fB\-mdec\-asm\fR" 4
.IX Item "-mdec-asm"
Use \s-1DEC\s0 assembla syntax.  This is tha default when configured fo' any
\&\s-1PDP\-11\s0 target other than \fBpdp11\-*\-bsd\fR.
.SS "picoChip Options"
.IX Subsection "picoChip Options"
These \fB\-m\fR options is defined fo' picoChip implementations:
.IP "\fB\-mae=\fR\fIae_type\fR" 4
.IX Item "-mae=ae_type"
Set tha instruction set, regista set, n' instruction scheduling
parametas fo' array element type \fIae_type\fR.  Supported joints
for \fIae_type\fR is \fB\s-1ANY\s0\fR, \fB\s-1MUL\s0\fR, n' \fB\s-1MAC\s0\fR.
.Sp
\&\fB\-mae=ANY\fR selects a cold-ass lil straight-up generic \s-1AE\s0 type.  Code
generated wit dis option runs on any of tha other \s-1AE\s0 types.  The
code aint as efficient as it would be if compiled fo' a specific
\&\s-1AE\s0 type, n' some typez of operation (e.g., multiplication) do not
work properly on all typez of \s-1AE.\s0
.Sp
\&\fB\-mae=MUL\fR selects a \s-1MUL AE\s0 type.  This is da most thugged-out useful \s-1AE\s0 type
for compiled code, n' is tha default.
.Sp
\&\fB\-mae=MAC\fR selects a DSP-style \s-1MAC AE. \s0 Code compiled wit this
option may suffer from skanky performizzle of byte (char) manipulation,
since tha \s-1DSP AE\s0 do not provide hardware support fo' byte load/stores.
.IP "\fB\-msymbol\-as\-address\fR" 4
.IX Item "-msymbol-as-address"
Enable tha compila ta directly bust a symbol name as a address up in a
load/store instruction, without first loadin it tha fuck into a
regista n' shit.  Typically, tha use of dis option generates larger
programs, which run fasta than when tha option aint used. Y'all KNOW dat shit, muthafucka!  But fuck dat shiznit yo, tha word on tha street is dat the
results vary from program ta program, so it is left as a user option,
rather than bein permanently enabled.
.IP "\fB\-mno\-inefficient\-warnings\fR" 4
.IX Item "-mno-inefficient-warnings"
Disablez warnings bout tha generation of inefficient code.  These
warnings can be generated, fo' example, when compilin code that
performs byte-level memory operations on tha \s-1MAC AE\s0 type.  Da \s-1MAC AE\s0 has
no hardware support fo' byte-level memory operations, so all byte
load/stores must be synthesized from word load/store operations.  This is
inefficient n' a warnin is generated ta indicate
that you should rewrite tha code ta avoid byte operations, or ta target
an \s-1AE\s0 type dat has tha necessary hardware support.  This option disables
these warnings.
.SS "PowerPC Options"
.IX Subsection "PowerPC Options"
These is listed under
.SS "\s-1RL78\s0 Options"
.IX Subsection "RL78 Options"
.IP "\fB\-msim\fR" 4
.IX Item "-msim"
Links up in additionizzle target libraries ta support operation within a
simulator.
.IP "\fB\-mmul=none\fR" 4
.IX Item "-mmul=none"
.PD 0
.IP "\fB\-mmul=g13\fR" 4
.IX Item "-mmul=g13"
.IP "\fB\-mmul=rl78\fR" 4
.IX Item "-mmul=rl78"
.PD
Specifies tha type of hardware multiplication support ta be used. Y'all KNOW dat shit, muthafucka!  The
default is \f(CW\*(C`none\*(C'\fR, which uses software multiplication functions.
Da \f(CW\*(C`g13\*(C'\fR option is fo' tha hardware multiply/divide peripheral
only on tha \s-1RL78/G13\s0 targets, n' you can put dat on yo' toast.  Da \f(CW\*(C`rl78\*(C'\fR option is fo' the
standard hardware multiplication defined up in tha \s-1RL78\s0 software manual.
.SS "\s-1IBM RS/6000\s0 n' PowerPC Options"
.IX Subsection "IBM RS/6000 n' PowerPC Options"
These \fB\-m\fR options is defined fo' tha \s-1IBM RS/6000\s0 n' PowerPC:
.IP "\fB\-mpowerpc\-gpopt\fR" 4
.IX Item "-mpowerpc-gpopt"
.PD 0
.IP "\fB\-mno\-powerpc\-gpopt\fR" 4
.IX Item "-mno-powerpc-gpopt"
.IP "\fB\-mpowerpc\-gfxopt\fR" 4
.IX Item "-mpowerpc-gfxopt"
.IP "\fB\-mno\-powerpc\-gfxopt\fR" 4
.IX Item "-mno-powerpc-gfxopt"
.IP "\fB\-mpowerpc64\fR" 4
.IX Item "-mpowerpc64"
.IP "\fB\-mno\-powerpc64\fR" 4
.IX Item "-mno-powerpc64"
.IP "\fB\-mmfcrf\fR" 4
.IX Item "-mmfcrf"
.IP "\fB\-mno\-mfcrf\fR" 4
.IX Item "-mno-mfcrf"
.IP "\fB\-mpopcntb\fR" 4
.IX Item "-mpopcntb"
.IP "\fB\-mno\-popcntb\fR" 4
.IX Item "-mno-popcntb"
.IP "\fB\-mpopcntd\fR" 4
.IX Item "-mpopcntd"
.IP "\fB\-mno\-popcntd\fR" 4
.IX Item "-mno-popcntd"
.IP "\fB\-mfprnd\fR" 4
.IX Item "-mfprnd"
.IP "\fB\-mno\-fprnd\fR" 4
.IX Item "-mno-fprnd"
.IP "\fB\-mcmpb\fR" 4
.IX Item "-mcmpb"
.IP "\fB\-mno\-cmpb\fR" 4
.IX Item "-mno-cmpb"
.IP "\fB\-mmfpgpr\fR" 4
.IX Item "-mmfpgpr"
.IP "\fB\-mno\-mfpgpr\fR" 4
.IX Item "-mno-mfpgpr"
.IP "\fB\-mhard\-dfp\fR" 4
.IX Item "-mhard-dfp"
.IP "\fB\-mno\-hard\-dfp\fR" 4
.IX Item "-mno-hard-dfp"
.PD
Yo ass use these options ta specify which instructions is available on the
processor yo ass is using.  Da default value of these options is
determined when configurin \s-1GCC. \s0 Specifyin the
\&\fB\-mcpu=\fR\fIcpu_type\fR overrides tha justification of these
options.  We recommend you use tha \fB\-mcpu=\fR\fIcpu_type\fR option
rather than tha options listed above.
.Sp
Specifyin \fB\-mpowerpc\-gpopt\fR allows
\&\s-1GCC\s0 ta use tha optionizzle PowerPC architecture instructions up in the
General Purpose group, includin floating-point square root.  Specifying
\&\fB\-mpowerpc\-gfxopt\fR allows \s-1GCC\s0 to
use tha optionizzle PowerPC architecture instructions up in tha Graphics
group, includin floating-point select.
.Sp
Da \fB\-mmfcrf\fR option allows \s-1GCC\s0 ta generate tha move from
condizzle regista field instruction implemented on tha \s-1POWER4\s0
processor n' other processors dat support tha PowerPC V2.01
architecture.
Da \fB\-mpopcntb\fR option allows \s-1GCC\s0 ta generate tha popcount and
double-precision \s-1FP\s0 reciprocal estimate instruction implemented on the
\&\s-1POWER5\s0 processor n' other processors dat support tha PowerPC V2.02
architecture.
Da \fB\-mpopcntd\fR option allows \s-1GCC\s0 ta generate tha popcount
instruction implemented on tha \s-1POWER7\s0 processor n' other processors
that support tha PowerPC V2.06 architecture.
Da \fB\-mfprnd\fR option allows \s-1GCC\s0 ta generate tha \s-1FP\s0 round to
integer instructions implemented on tha \s-1POWER5+\s0 processor n' other
processors dat support tha PowerPC V2.03 architecture.
Da \fB\-mcmpb\fR option allows \s-1GCC\s0 ta generate tha compare bytes
instruction implemented on tha \s-1POWER6\s0 processor n' other processors
that support tha PowerPC V2.05 architecture.
Da \fB\-mmfpgpr\fR option allows \s-1GCC\s0 ta generate tha \s-1FP\s0 move to/from
general-purpose regista instructions implemented on tha \s-1POWER6X\s0
processor n' other processors dat support tha extended PowerPC V2.05
architecture.
Da \fB\-mhard\-dfp\fR option allows \s-1GCC\s0 ta generate tha decimal
floating-point instructions implemented on some \s-1POWER\s0 processors.
.Sp
Da \fB\-mpowerpc64\fR option allows \s-1GCC\s0 ta generate tha additional
64\-bit instructions dat is found up in tha full PowerPC64 architecture
and ta treat GPRs as 64\-bit, doubleword quantities. Put ya muthafuckin choppers up if ya feel dis!  \s-1GCC\s0 defaults to
\&\fB\-mno\-powerpc64\fR.
.IP "\fB\-mcpu=\fR\fIcpu_type\fR" 4
.IX Item "-mcpu=cpu_type"
Set architecture type, regista usage, and
instruction schedulin parametas fo' machine type \fIcpu_type\fR.
Supported joints fo' \fIcpu_type\fR is \fB401\fR, \fB403\fR,
\&\fB405\fR, \fB405fp\fR, \fB440\fR, \fB440fp\fR, \fB464\fR, \fB464fp\fR,
\&\fB476\fR, \fB476fp\fR, \fB505\fR, \fB601\fR, \fB602\fR, \fB603\fR,
\&\fB603e\fR, \fB604\fR, \fB604e\fR, \fB620\fR, \fB630\fR, \fB740\fR,
\&\fB7400\fR, \fB7450\fR, \fB750\fR, \fB801\fR, \fB821\fR, \fB823\fR,
\&\fB860\fR, \fB970\fR, \fB8540\fR, \fBa2\fR, \fBe300c2\fR,
\&\fBe300c3\fR, \fBe500mc\fR, \fBe500mc64\fR, \fBe5500\fR,
\&\fBe6500\fR, \fBec603e\fR, \fBG3\fR, \fBG4\fR, \fBG5\fR,
\&\fBtitan\fR, \fBpower3\fR, \fBpower4\fR, \fBpower5\fR, \fBpower5+\fR,
\&\fBpower6\fR, \fBpower6x\fR, \fBpower7\fR, \fBpower8\fR, \fBpowerpc\fR,
\&\fBpowerpc64\fR, n' \fBrs64\fR.
.Sp
\&\fB\-mcpu=powerpc\fR, n' \fB\-mcpu=powerpc64\fR specify pure 32\-bit
PowerPC n' 64\-bit PowerPC architecture machine
types, wit a appropriate, generic processor model assumed for
schedulin purposes.
.Sp
Da other options specify a specific processor. Shiiit, dis aint no joke.  Code generated under
those options runs dopest on dat processor, n' may not run at all on
others.
.Sp
Da \fB\-mcpu\fR options automatically enable or disable the
followin options:
.Sp
\&\fB\-maltivec  \-mfprnd  \-mhard\-float  \-mmfcrf  \-mmultiple 
\&\-mpopcntb \-mpopcntd  \-mpowerpc64 
\&\-mpowerpc\-gpopt  \-mpowerpc\-gfxopt  \-msingle\-float \-mdouble\-float 
\&\-msimple\-fpu \-mstrin  \-mmulhw  \-mdlmzb  \-mmfpgpr \-mvsx 
\&\-mcrypto \-mdirect\-move \-mpower8\-fusion \-mpower8\-vector 
\&\-mquad\-memory \-mquad\-memory\-atomic\fR
.Sp
Da particular options set fo' any particular \s-1CPU\s0 varies between
compila versions, dependin on what tha fuck settin seems ta produce optimal
code fo' dat \s-1CPU\s0; it don't necessarily reflect tha actual hardware's
capabilities. Put ya muthafuckin choppers up if ya feel dis!  If you wish ta set a individual option ta a particular
value, you may specify it afta tha \fB\-mcpu\fR option, like
\&\fB\-mcpu=970 \-mno\-altivec\fR.
.Sp
On \s-1AIX,\s0 tha \fB\-maltivec\fR n' \fB\-mpowerpc64\fR options are
not enabled or disabled by tha \fB\-mcpu\fR option at present cuz
\&\s-1AIX\s0 aint gots full support fo' these options.  Yo ass may still
enable or disable dem individually if you shizzle it'll work up in your
environment.
.IP "\fB\-mtune=\fR\fIcpu_type\fR" 4
.IX Item "-mtune=cpu_type"
Set tha instruction schedulin parametas fo' machine type
\&\fIcpu_type\fR yo, but do not set tha architecture type or regista usage,
as \fB\-mcpu=\fR\fIcpu_type\fR do.  Da same
values fo' \fIcpu_type\fR is used fo' \fB\-mtune\fR as for
\&\fB\-mcpu\fR.  If both is specified, tha code generated uses the
architecture n' registas set by \fB\-mcpu\fR yo, but the
schedulin parametas set by \fB\-mtune\fR.
.IP "\fB\-mcmodel=small\fR" 4
.IX Item "-mcmodel=small"
Generate PowerPC64 code fo' tha lil' small-ass model: Da \s-1TOC\s0 is limited to
64k.
.IP "\fB\-mcmodel=medium\fR" 4
.IX Item "-mcmodel=medium"
Generate PowerPC64 code fo' tha medium model: Da \s-1TOC\s0 n' other static
data may be up ta a total of 4G up in size.
.IP "\fB\-mcmodel=large\fR" 4
.IX Item "-mcmodel=large"
Generate PowerPC64 code fo' tha big-ass model: Da \s-1TOC\s0 may be up ta 4G
in size.  Other data n' code is only limited by tha 64\-bit address
space.
.IP "\fB\-maltivec\fR" 4
.IX Item "-maltivec"
.PD 0
.IP "\fB\-mno\-altivec\fR" 4
.IX Item "-mno-altivec"
.PD
Generate code dat uses (does not use) AltiVec instructions, n' also
enable tha use of built-in functions dat allow mo' direct access to
the AltiVec instruction set.  Yo ass may also need ta set
\&\fB\-mabi=altivec\fR ta adjust tha current \s-1ABI\s0 wit AltiVec \s-1ABI\s0
enhancements.
.Sp
When \fB\-maltivec\fR is used, rather than \fB\-maltivec=le\fR or
\&\fB\-maltivec=be\fR, tha element order fo' Altivec intrinsics such
as \f(CW\*(C`vec_splat\*(C'\fR, \f(CW\*(C`vec_extract\*(C'\fR, n' \f(CW\*(C`vec_insert\*(C'\fR will
match array element order correspondin ta tha endiannizz of the
target.  That is, element zero identifies tha leftmost element up in a
vector regista when targetin a funky-ass big-endian platform, n' identifies
the rightmost element up in a vector regista when targetin a
lil-endian platform.
.IP "\fB\-maltivec=be\fR" 4
.IX Item "-maltivec=be"
Generate Altivec instructions rockin big-endian element order,
regardless of whether tha target is big\- or lil-endian. I aint talkin' bout chicken n' gravy biatch.  This is
the default when targetin a funky-ass big-endian platform.
.Sp
Da element order is used ta interpret element numbers up in Altivec
intrinsics like fuckin \f(CW\*(C`vec_splat\*(C'\fR, \f(CW\*(C`vec_extract\*(C'\fR, and
\&\f(CW\*(C`vec_insert\*(C'\fR.  By default, these will match array element order
correspondin ta tha endiannizz fo' tha target.
.IP "\fB\-maltivec=le\fR" 4
.IX Item "-maltivec=le"
Generate Altivec instructions rockin lil-endian element order,
regardless of whether tha target is big\- or lil-endian. I aint talkin' bout chicken n' gravy biatch.  This is
the default when targetin a lil-endian platform.  This option is
currently ignored when targetin a funky-ass big-endian platform.
.Sp
Da element order is used ta interpret element numbers up in Altivec
intrinsics like fuckin \f(CW\*(C`vec_splat\*(C'\fR, \f(CW\*(C`vec_extract\*(C'\fR, and
\&\f(CW\*(C`vec_insert\*(C'\fR.  By default, these will match array element order
correspondin ta tha endiannizz fo' tha target.
.IP "\fB\-mvrsave\fR" 4
.IX Item "-mvrsave"
.PD 0
.IP "\fB\-mno\-vrsave\fR" 4
.IX Item "-mno-vrsave"
.PD
Generate \s-1VRSAVE\s0 instructions when generatin AltiVec code.
.IP "\fB\-mgen\-cell\-microcode\fR" 4
.IX Item "-mgen-cell-microcode"
Generate Cell microcode instructions.
.IP "\fB\-mwarn\-cell\-microcode\fR" 4
.IX Item "-mwarn-cell-microcode"
Warn when a Cell microcode instruction is emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  An example
of a Cell microcode instruction be a variable shift.
.IP "\fB\-msecure\-plt\fR" 4
.IX Item "-msecure-plt"
Generate code dat allows \fBld\fR n' \fBld.so\fR
to build executablez n' shared
libraries wit non-executable \f(CW\*(C`.plt\*(C'\fR n' \f(CW\*(C`.got\*(C'\fR sections.
This be a PowerPC
32\-bit \s-1SYSV ABI\s0 option.
.IP "\fB\-mbss\-plt\fR" 4
.IX Item "-mbss-plt"
Generate code dat uses a \s-1BSS \s0\f(CW\*(C`.plt\*(C'\fR section dat \fBld.so\fR
fills in, and
requires \f(CW\*(C`.plt\*(C'\fR n' \f(CW\*(C`.got\*(C'\fR
sections dat is both writable n' executable.
This be a PowerPC 32\-bit \s-1SYSV ABI\s0 option.
.IP "\fB\-misel\fR" 4
.IX Item "-misel"
.PD 0
.IP "\fB\-mno\-isel\fR" 4
.IX Item "-mno-isel"
.PD
This switch enablez or disablez tha generation of \s-1ISEL\s0 instructions.
.IP "\fB\-misel=\fR\fIyes/no\fR" 4
.IX Item "-misel=yes/no"
This switch has been deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Use \fB\-misel\fR and
\&\fB\-mno\-isel\fR instead.
.IP "\fB\-mspe\fR" 4
.IX Item "-mspe"
.PD 0
.IP "\fB\-mno\-spe\fR" 4
.IX Item "-mno-spe"
.PD
This switch enablez or disablez tha generation of \s-1SPE\s0 simd
instructions.
.IP "\fB\-mpaired\fR" 4
.IX Item "-mpaired"
.PD 0
.IP "\fB\-mno\-paired\fR" 4
.IX Item "-mno-paired"
.PD
This switch enablez or disablez tha generation of \s-1PAIRED\s0 simd
instructions.
.IP "\fB\-mspe=\fR\fIyes/no\fR" 4
.IX Item "-mspe=yes/no"
This option has been deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Use \fB\-mspe\fR and
\&\fB\-mno\-spe\fR instead.
.IP "\fB\-mvsx\fR" 4
.IX Item "-mvsx"
.PD 0
.IP "\fB\-mno\-vsx\fR" 4
.IX Item "-mno-vsx"
.PD
Generate code dat uses (does not use) vector/scalar (\s-1VSX\s0)
instructions, n' also enable tha use of built-in functions dat allow
more direct access ta tha \s-1VSX\s0 instruction set.
.IP "\fB\-mcrypto\fR" 4
.IX Item "-mcrypto"
.PD 0
.IP "\fB\-mno\-crypto\fR" 4
.IX Item "-mno-crypto"
.PD
Enable tha use (disable) of tha built-in functions dat allow direct
access ta tha cryptographic instructions dat was added up in version
2.07 of tha PowerPC \s-1ISA.\s0
.IP "\fB\-mdirect\-move\fR" 4
.IX Item "-mdirect-move"
.PD 0
.IP "\fB\-mno\-direct\-move\fR" 4
.IX Item "-mno-direct-move"
.PD
Generate code dat uses (does not use) tha instructions ta move data
between tha general purpose registas n' tha vector/scalar (\s-1VSX\s0)
registas dat was added up in version 2.07 of tha PowerPC \s-1ISA.\s0
.IP "\fB\-mpower8\-fusion\fR" 4
.IX Item "-mpower8-fusion"
.PD 0
.IP "\fB\-mno\-power8\-fusion\fR" 4
.IX Item "-mno-power8-fusion"
.PD
Generate code dat keeps (does not keeps) some integer operations
adjacent so dat tha instructions can be fused together on power8 and
lata processors.
.IP "\fB\-mpower8\-vector\fR" 4
.IX Item "-mpower8-vector"
.PD 0
.IP "\fB\-mno\-power8\-vector\fR" 4
.IX Item "-mno-power8-vector"
.PD
Generate code dat uses (does not use) tha vector n' scalar
instructions dat was added up in version 2.07 of tha PowerPC \s-1ISA. \s0 Also
enable tha use of built-in functions dat allow mo' direct access to
the vector instructions.
.IP "\fB\-mquad\-memory\fR" 4
.IX Item "-mquad-memory"
.PD 0
.IP "\fB\-mno\-quad\-memory\fR" 4
.IX Item "-mno-quad-memory"
.PD
Generate code dat uses (does not use) tha non-atomic quad word memory
instructions.  Da \fB\-mquad\-memory\fR option requires use of
64\-bit mode.
.IP "\fB\-mquad\-memory\-atomic\fR" 4
.IX Item "-mquad-memory-atomic"
.PD 0
.IP "\fB\-mno\-quad\-memory\-atomic\fR" 4
.IX Item "-mno-quad-memory-atomic"
.PD
Generate code dat uses (does not use) tha atomic quad word memory
instructions.  Da \fB\-mquad\-memory\-atomic\fR option requires use of
64\-bit mode.
.IP "\fB\-mfloat\-gprs=\fR\fIyes/single/double/no\fR" 4
.IX Item "-mfloat-gprs=yes/single/double/no"
.PD 0
.IP "\fB\-mfloat\-gprs\fR" 4
.IX Item "-mfloat-gprs"
.PD
This switch enablez or disablez tha generation of floating-point
operations on tha general-purpose registas fo' architectures that
support dat shit.
.Sp
Da argument \fIyes\fR or \fIsingle\fR enablez tha use of
single-precision floating-point operations.
.Sp
Da argument \fIdouble\fR enablez tha use of single and
double-precision floating-point operations.
.Sp
Da argument \fIno\fR disablez floating-point operations on the
general-purpose registers.
.Sp
This option is currently only available on tha MPC854x.
.IP "\fB\-m32\fR" 4
.IX Item "-m32"
.PD 0
.IP "\fB\-m64\fR" 4
.IX Item "-m64"
.PD
Generate code fo' 32\-bit or 64\-bit environmentz of Darwin n' \s-1SVR4\s0
targets (includin GNU/Linux).  Da 32\-bit environment sets int, long
and pointa ta 32 bits n' generates code dat runs on any PowerPC
variant.  Da 64\-bit environment sets int ta 32 bits n' long and
pointa ta 64 bits, n' generates code fo' PowerPC64, as for
\&\fB\-mpowerpc64\fR.
.IP "\fB\-mfull\-toc\fR" 4
.IX Item "-mfull-toc"
.PD 0
.IP "\fB\-mno\-fp\-in\-toc\fR" 4
.IX Item "-mno-fp-in-toc"
.IP "\fB\-mno\-sum\-in\-toc\fR" 4
.IX Item "-mno-sum-in-toc"
.IP "\fB\-mminimal\-toc\fR" 4
.IX Item "-mminimal-toc"
.PD
Modify generation of tha \s-1TOC \s0(Table Of Contents), which is pimped for
every executable file.  Da \fB\-mfull\-toc\fR option is selected by
default.  In dat case, \s-1GCC\s0 allocates at least one \s-1TOC\s0 entry for
each unique non-automatic variable reference up in yo' program.  \s-1GCC\s0
also places floating-point constants up in tha \s-1TOC. \s0 But fuck dat shiznit yo, tha word on tha street is dat only
16,384 entries is available up in tha \s-1TOC.\s0
.Sp
If you receive a linker error message dat sayin you have overflowed
the available \s-1TOC\s0 space, you can reduce tha amount of \s-1TOC\s0 space used
with tha \fB\-mno\-fp\-in\-toc\fR n' \fB\-mno\-sum\-in\-toc\fR options.
\&\fB\-mno\-fp\-in\-toc\fR prevents \s-1GCC\s0 from puttin floating-point
constants up in tha \s-1TOC\s0 n' \fB\-mno\-sum\-in\-toc\fR forces \s-1GCC\s0 to
generate code ta calculate tha sum of a address n' a cold-ass lil constant at
run time instead of puttin dat sum tha fuck into tha \s-1TOC. \s0 Yo ass may specify one
or both of these options.  Each causes \s-1GCC\s0 ta produce straight-up slightly
slower n' larger code all up in tha expense of conservin \s-1TOC\s0 space.
.Sp
If you still run outta space up in tha \s-1TOC\s0 even when you specify both of
these options, specify \fB\-mminimal\-toc\fR instead. Y'all KNOW dat shit, muthafucka!  This option causes
\&\s-1GCC\s0 ta make only one \s-1TOC\s0 entry fo' every last muthafuckin file.  When you specify this
option, \s-1GCC\s0 produces code dat is slower n' larger but which
uses mad lil \s-1TOC\s0 space.  Yo ass may wish ta use dis option
only on filez dat contain less frequently-executed code.
.IP "\fB\-maix64\fR" 4
.IX Item "-maix64"
.PD 0
.IP "\fB\-maix32\fR" 4
.IX Item "-maix32"
.PD
Enable 64\-bit \s-1AIX ABI\s0 n' callin convention: 64\-bit pointers, 64\-bit
\&\f(CW\*(C`long\*(C'\fR type, n' tha infrastructure needed ta support em.
Specifyin \fB\-maix64\fR implies \fB\-mpowerpc64\fR,
while \fB\-maix32\fR disablez tha 64\-bit \s-1ABI\s0 and
implies \fB\-mno\-powerpc64\fR.  \s-1GCC\s0 defaults ta \fB\-maix32\fR.
.IP "\fB\-mxl\-compat\fR" 4
.IX Item "-mxl-compat"
.PD 0
.IP "\fB\-mno\-xl\-compat\fR" 4
.IX Item "-mno-xl-compat"
.PD
Produce code dat conforms mo' closely ta \s-1IBM XL\s0 compila semantics
when rockin AIX-compatible \s-1ABI. \s0 Pass floating-point arguments to
prototyped functions beyond tha regista save area (\s-1RSA\s0) on tha stack
in addizzle ta argument FPRs.  Do not assume dat most significant
double up in 128\-bit long double value is properly rounded when comparing
values n' convertin ta double.  Use \s-1XL\s0 symbol names fo' long double
support routines.
.Sp
Da \s-1AIX\s0 callin convention was extended but not initially documented to
handle a obscure K&R C case of callin a gangbangin' function dat takes the
address of its arguments wit fewer arguments than declared. Y'all KNOW dat shit, muthafucka!  \s-1IBM XL\s0
compilaz access floating-point arguments dat do not fit up in the
\&\s-1RSA\s0 from tha stack when a subroutine is compiled without
optimization. I aint talkin' bout chicken n' gravy biatch.  Because always storin floating-point arguments on the
stack is inefficient n' rarely needed, dis option aint enabled by
default n' only is necessary when callin subroutines compiled by \s-1IBM
XL\s0 compilaz without optimization.
.IP "\fB\-mpe\fR" 4
.IX Item "-mpe"
Support \fI\s-1IBM RS/6000 SP\s0\fR \fIParallel Environment\fR (\s-1PE\s0).  Link an
application freestyled ta use message passin wit special startup code to
enable tha application ta run. I aint talkin' bout chicken n' gravy biatch.  Da system must have \s-1PE\s0 installed up in the
standard location (\fI/usr/lpp/ppe.poe/\fR), or tha \fIspecs\fR file
must be overridden wit tha \fB\-specs=\fR option ta specify the
appropriate directory location. I aint talkin' bout chicken n' gravy biatch.  Da Parallel Environment do not
support threads, so tha \fB\-mpe\fR option n' tha \fB\-pthread\fR
option is incompatible.
.IP "\fB\-malign\-natural\fR" 4
.IX Item "-malign-natural"
.PD 0
.IP "\fB\-malign\-power\fR" 4
.IX Item "-malign-power"
.PD
On \s-1AIX,\s0 32\-bit Darwin, n' 64\-bit PowerPC GNU/Linux, tha option
\&\fB\-malign\-natural\fR overrides tha ABI-defined alignment of larger
types, like fuckin floating-point doubles, on they natural size-based boundary.
Da option \fB\-malign\-power\fR instructs \s-1GCC\s0 ta follow tha ABI-specified
alignment rules.  \s-1GCC\s0 defaults ta tha standard alignment defined up in tha \s-1ABI.\s0
.Sp
On 64\-bit Darwin, natural alignment is tha default, n' \fB\-malign\-power\fR
is not supported.
.IP "\fB\-msoft\-float\fR" 4
.IX Item "-msoft-float"
.PD 0
.IP "\fB\-mhard\-float\fR" 4
.IX Item "-mhard-float"
.PD
Generate code dat do not use (uses) tha floating-point regista set.
Software floating-point emulation is provided if you use the
\&\fB\-msoft\-float\fR option, n' pass tha option ta \s-1GCC\s0 when linking.
.IP "\fB\-msingle\-float\fR" 4
.IX Item "-msingle-float"
.PD 0
.IP "\fB\-mdouble\-float\fR" 4
.IX Item "-mdouble-float"
.PD
Generate code fo' single\- or double-precision floating-point operations.
\&\fB\-mdouble\-float\fR implies \fB\-msingle\-float\fR.
.IP "\fB\-msimple\-fpu\fR" 4
.IX Item "-msimple-fpu"
Do not generate \f(CW\*(C`sqrt\*(C'\fR n' \f(CW\*(C`div\*(C'\fR instructions fo' hardware
floating-point unit.
.IP "\fB\-mfpu=\fR\fIname\fR" 4
.IX Item "-mfpu=name"
Specify type of floating-point unit.  Valid joints fo' \fIname\fR are
\&\fBsp_lite\fR (equivalent ta \fB\-msingle\-float \-msimple\-fpu\fR),
\&\fBdp_lite\fR (equivalent ta \fB\-mdouble\-float \-msimple\-fpu\fR),
\&\fBsp_full\fR (equivalent ta \fB\-msingle\-float\fR),
and \fBdp_full\fR (equivalent ta \fB\-mdouble\-float\fR).
.IP "\fB\-mxilinx\-fpu\fR" 4
.IX Item "-mxilinx-fpu"
Perform optimizations fo' tha floating-point unit on Xilinx \s-1PPC 405/440.\s0
.IP "\fB\-mmultiple\fR" 4
.IX Item "-mmultiple"
.PD 0
.IP "\fB\-mno\-multiple\fR" 4
.IX Item "-mno-multiple"
.PD
Generate code dat uses (does not use) tha load multiple word
instructions n' tha store multiple word instructions.  These
instructions is generated by default on \s-1POWER\s0 systems, n' not
generated on PowerPC systems.  Do not use \fB\-mmultiple\fR on lil-endian
PowerPC systems, since dem instructions do not work when the
processor is up in lil-endian mode.  Da exceptions is \s-1PPC740\s0 and
\&\s-1PPC750\s0 which permit these instructions up in lil-endian mode.
.IP "\fB\-mstring\fR" 4
.IX Item "-mstring"
.PD 0
.IP "\fB\-mno\-string\fR" 4
.IX Item "-mno-string"
.PD
Generate code dat uses (does not use) tha load strang instructions
and tha store strang word instructions ta save multiple registas and
do lil' small-ass block moves.  These instructions is generated by default on
\&\s-1POWER\s0 systems, n' not generated on PowerPC systems.  Do not use
\&\fB\-mstring\fR on lil-endian PowerPC systems, since them
instructions do not work when tha processor is up in lil-endian mode.
Da exceptions is \s-1PPC740\s0 n' \s-1PPC750\s0 which permit these instructions
in lil-endian mode.
.IP "\fB\-mupdate\fR" 4
.IX Item "-mupdate"
.PD 0
.IP "\fB\-mno\-update\fR" 4
.IX Item "-mno-update"
.PD
Generate code dat uses (does not use) tha load or store instructions
that update tha base regista ta tha address of tha calculated memory
location. I aint talkin' bout chicken n' gravy biatch.  These instructions is generated by default.  If you use
\&\fB\-mno\-update\fR, there be a lil' small-ass window between tha time dat the
stack pointa is updated n' tha address of tha previous frame is
stored, which means code dat strutts tha stack frame across interrupts or
signals may git corrupted data.
.IP "\fB\-mavoid\-indexed\-addresses\fR" 4
.IX Item "-mavoid-indexed-addresses"
.PD 0
.IP "\fB\-mno\-avoid\-indexed\-addresses\fR" 4
.IX Item "-mno-avoid-indexed-addresses"
.PD
Generate code dat tries ta avoid (not avoid) tha use of indexed load
or store instructions. These instructions can incur a performance
penalty on Power6 processors up in certain thangs, like fuckin when
steppin all up in big-ass arrays dat cross a 16M boundary.  This option
is enabled by default when targetin Power6 n' disabled otherwise.
.IP "\fB\-mfused\-madd\fR" 4
.IX Item "-mfused-madd"
.PD 0
.IP "\fB\-mno\-fused\-madd\fR" 4
.IX Item "-mno-fused-madd"
.PD
Generate code dat uses (does not use) tha floating-point multiply and
accumulate instructions.  These instructions is generated by default
if hardware floatin point is used. Y'all KNOW dat shit, muthafucka!  Da machine-dependent
\&\fB\-mfused\-madd\fR option is now mapped ta tha machine-independent
\&\fB\-ffp\-contract=fast\fR option, n' \fB\-mno\-fused\-madd\fR is
mapped ta \fB\-ffp\-contract=off\fR.
.IP "\fB\-mmulhw\fR" 4
.IX Item "-mmulhw"
.PD 0
.IP "\fB\-mno\-mulhw\fR" 4
.IX Item "-mno-mulhw"
.PD
Generate code dat uses (does not use) tha half-word multiply and
multiply-accumulate instructions on tha \s-1IBM 405, 440, 464\s0 n' 476 processors.
These instructions is generated by default when targetin them
processors.
.IP "\fB\-mdlmzb\fR" 4
.IX Item "-mdlmzb"
.PD 0
.IP "\fB\-mno\-dlmzb\fR" 4
.IX Item "-mno-dlmzb"
.PD
Generate code dat uses (does not use) tha string-search \fBdlmzb\fR
instruction on tha \s-1IBM 405, 440, 464\s0 n' 476 processors.  This instruction is
generated by default when targetin dem processors.
.IP "\fB\-mno\-bit\-align\fR" 4
.IX Item "-mno-bit-align"
.PD 0
.IP "\fB\-mbit\-align\fR" 4
.IX Item "-mbit-align"
.PD
On System V.4 n' embedded PowerPC systems do not (do) force structures
and unions dat contain bit-fieldz ta be aligned ta tha base type of the
bit-field.
.Sp
For example, by default a structure containin not a god damn thang but 8
\&\f(CW\*(C`unsigned\*(C'\fR bit-fieldz of length 1 be aligned ta a 4\-byte
boundary n' has a size of 4 bytes.  By rockin \fB\-mno\-bit\-align\fR,
the structure be aligned ta a 1\-byte boundary n' is 1 byte in
size.
.IP "\fB\-mno\-strict\-align\fR" 4
.IX Item "-mno-strict-align"
.PD 0
.IP "\fB\-mstrict\-align\fR" 4
.IX Item "-mstrict-align"
.PD
On System V.4 n' embedded PowerPC systems do not (do) assume that
unaligned memory references is handled by tha system.
.IP "\fB\-mrelocatable\fR" 4
.IX Item "-mrelocatable"
.PD 0
.IP "\fB\-mno\-relocatable\fR" 4
.IX Item "-mno-relocatable"
.PD
Generate code dat allows (does not allow) a static executable ta be
relocated ta a gangbangin' finger-lickin' different address at run time.  A simple embedded
PowerPC system loader should relocate tha entire contents of
\&\f(CW\*(C`.got2\*(C'\fR n' 4\-byte locations listed up in tha \f(CW\*(C`.fixup\*(C'\fR section,
a table of 32\-bit addresses generated by dis option. I aint talkin' bout chicken n' gravy biatch.  For dis to
work, all objects linked together must be compiled with
\&\fB\-mrelocatable\fR or \fB\-mrelocatable\-lib\fR.
\&\fB\-mrelocatable\fR code aligns tha stack ta a 8\-byte boundary.
.IP "\fB\-mrelocatable\-lib\fR" 4
.IX Item "-mrelocatable-lib"
.PD 0
.IP "\fB\-mno\-relocatable\-lib\fR" 4
.IX Item "-mno-relocatable-lib"
.PD
Like \fB\-mrelocatable\fR, \fB\-mrelocatable\-lib\fR generates a
\&\f(CW\*(C`.fixup\*(C'\fR section ta allow static executablez ta be relocated at
run time yo, but \fB\-mrelocatable\-lib\fR do not use tha smalla stack
alignment of \fB\-mrelocatable\fR.  Objects compiled with
\&\fB\-mrelocatable\-lib\fR may be linked wit objects compiled with
any combination of tha \fB\-mrelocatable\fR options.
.IP "\fB\-mno\-toc\fR" 4
.IX Item "-mno-toc"
.PD 0
.IP "\fB\-mtoc\fR" 4
.IX Item "-mtoc"
.PD
On System V.4 n' embedded PowerPC systems do not (do) assume that
regista 2 gotz nuff a pointa ta a global area pointin ta tha addresses
used up in tha program.
.IP "\fB\-mlil\fR" 4
.IX Item "-mlil"
.PD 0
.IP "\fB\-mlil\-endian\fR" 4
.IX Item "-mlil-endian"
.PD
On System V.4 n' embedded PowerPC systems compile code fo' the
processor up in lil-endian mode.  Da \fB\-mlil\-endian\fR option is
the same as \fB\-mlil\fR.
.IP "\fB\-mbig\fR" 4
.IX Item "-mbig"
.PD 0
.IP "\fB\-mbig\-endian\fR" 4
.IX Item "-mbig-endian"
.PD
On System V.4 n' embedded PowerPC systems compile code fo' the
processor up in big-endian mode.  Da \fB\-mbig\-endian\fR option is
the same as \fB\-mbig\fR.
.IP "\fB\-mdynamic\-no\-pic\fR" 4
.IX Item "-mdynamic-no-pic"
On Darwin n' Mac \s-1OS X\s0 systems, compile code so dat it is not
relocatable yo, but dat its external references is relocatable.  The
resultin code is suitable fo' applications yo, but not shared
libraries.
.IP "\fB\-msingle\-pic\-base\fR" 4
.IX Item "-msingle-pic-base"
Treat tha regista used fo' \s-1PIC\s0 addressin as read-only, rather than
loadin it up in tha prologue fo' each function. I aint talkin' bout chicken n' gravy biatch.  Da runtime system is
responsible fo' initializin dis regista wit a appropriate value
before execution begins.
.IP "\fB\-mprioritize\-restricted\-insns=\fR\fIpriority\fR" 4
.IX Item "-mprioritize-restricted-insns=priority"
This option controls tha prioritizzle dat be assigned to
dispatch-slot restricted instructions durin tha second scheduling
pass.  Da argument \fIpriority\fR takes tha value \fB0\fR, \fB1\fR,
or \fB2\fR ta assign no, highest, or second-highest (respectively) 
prioritizzle ta dispatch-slot restricted
instructions.
.IP "\fB\-msched\-costly\-dep=\fR\fIdependence_type\fR" 4
.IX Item "-msched-costly-dep=dependence_type"
This option controls which dependences is considered costly
by tha target durin instruction scheduling.  Da argument
\&\fIdependence_type\fR takes one of tha followin joints:
.RS 4
.IP "\fBno\fR" 4
.IX Item "no"
No dependence is costly.
.IP "\fBall\fR" 4
.IX Item "all"
All dependences is costly.
.IP "\fBtrue_store_to_load\fR" 4
.IX Item "true_store_to_load"
A legit dependence from store ta load is costly.
.IP "\fBstore_to_load\fR" 4
.IX Item "store_to_load"
Any dependence from store ta load is costly.
.IP "\fInumber\fR" 4
.IX Item "number"
Any dependence fo' which tha latency is pimped outa than or equal ta 
\&\fInumber\fR is costly.
.RE
.RS 4
.RE
.IP "\fB\-minsert\-sched\-nops=\fR\fIscheme\fR" 4
.IX Item "-minsert-sched-nops=scheme"
This option controls which \s-1NOP\s0 insertion scheme is used during
the second schedulin pass.  Da argument \fIscheme\fR takes one of the
followin joints:
.RS 4
.IP "\fBno\fR" 4
.IX Item "no"
Don't bang NOPs.
.IP "\fBpad\fR" 4
.IX Item "pad"
Pad wit NOPs any dispatch crew dat has vacant issue slots,
accordin ta tha schedulerz grouping.
.IP "\fBregroup_exact\fR" 4
.IX Item "regroup_exact"
Insert NOPs ta force costly dependent insns into
separate groups.  Insert exactly as nuff NOPs as needed ta force a insn
to a freshly smoked up group, accordin ta tha estimated processor grouping.
.IP "\fInumber\fR" 4
.IX Item "number"
Insert NOPs ta force costly dependent insns into
separate groups.  Insert \fInumber\fR NOPs ta force a insn ta a freshly smoked up group.
.RE
.RS 4
.RE
.IP "\fB\-mcall\-sysv\fR" 4
.IX Item "-mcall-sysv"
On System V.4 n' embedded PowerPC systems compile code rockin calling
conventions dat adhere ta tha March 1995 draft of tha System V
Application Binary Interface, PowerPC processor supplement.  This is the
default unless you configured \s-1GCC\s0 rockin \fBpowerpc\-*\-eabiaix\fR.
.IP "\fB\-mcall\-sysv\-eabi\fR" 4
.IX Item "-mcall-sysv-eabi"
.PD 0
.IP "\fB\-mcall\-eabi\fR" 4
.IX Item "-mcall-eabi"
.PD
Specify both \fB\-mcall\-sysv\fR n' \fB\-meabi\fR options.
.IP "\fB\-mcall\-sysv\-noeabi\fR" 4
.IX Item "-mcall-sysv-noeabi"
Specify both \fB\-mcall\-sysv\fR n' \fB\-mno\-eabi\fR options.
.IP "\fB\-mcall\-aixdesc\fR" 4
.IX Item "-mcall-aixdesc"
On System V.4 n' embedded PowerPC systems compile code fo' tha \s-1AIX\s0
operatin system.
.IP "\fB\-mcall\-linux\fR" 4
.IX Item "-mcall-linux"
On System V.4 n' embedded PowerPC systems compile code fo' the
Linux-based \s-1GNU\s0 system.
.IP "\fB\-mcall\-freebsd\fR" 4
.IX Item "-mcall-freebsd"
On System V.4 n' embedded PowerPC systems compile code fo' the
FreeBSD operatin system.
.IP "\fB\-mcall\-netbsd\fR" 4
.IX Item "-mcall-netbsd"
On System V.4 n' embedded PowerPC systems compile code fo' the
NetBSD operatin system.
.IP "\fB\-mcall\-openbsd\fR" 4
.IX Item "-mcall-openbsd"
On System V.4 n' embedded PowerPC systems compile code fo' the
OpenBSD operatin system.
.IP "\fB\-maix\-struct\-return\fR" 4
.IX Item "-maix-struct-return"
Return all structures up in memory (as specified by tha \s-1AIX ABI\s0).
.IP "\fB\-msvr4\-struct\-return\fR" 4
.IX Item "-msvr4-struct-return"
Return structures smalla than 8 bytes up in registas (as specified by the
\&\s-1SVR4 ABI\s0).
.IP "\fB\-mabi=\fR\fIabi-type\fR" 4
.IX Item "-mabi=abi-type"
Extend tha current \s-1ABI\s0 wit a particular extension, or remove such extension.
Valid joints is \fIaltivec\fR, \fIno-altivec\fR, \fIspe\fR,
\&\fIno-spe\fR, \fIibmlongdouble\fR, \fIieeelongdouble\fR,
\&\fIelfv1\fR, \fIelfv2\fR.
.IP "\fB\-mabi=spe\fR" 4
.IX Item "-mabi=spe"
Extend tha current \s-1ABI\s0 wit \s-1SPE ABI\s0 extensions.  This do not chizzle
the default \s-1ABI,\s0 instead it addz tha \s-1SPE ABI\s0 extensions ta tha current
\&\s-1ABI.\s0
.IP "\fB\-mabi=no\-spe\fR" 4
.IX Item "-mabi=no-spe"
Disable Book-E \s-1SPE ABI\s0 extensions fo' tha current \s-1ABI.\s0
.IP "\fB\-mabi=ibmlongdouble\fR" 4
.IX Item "-mabi=ibmlongdouble"
Change tha current \s-1ABI\s0 ta use \s-1IBM\s0 extended-precision long double.
This be a PowerPC 32\-bit \s-1SYSV ABI\s0 option.
.IP "\fB\-mabi=ieeelongdouble\fR" 4
.IX Item "-mabi=ieeelongdouble"
Change tha current \s-1ABI\s0 ta use \s-1IEEE\s0 extended-precision long double.
This be a PowerPC 32\-bit Linux \s-1ABI\s0 option.
.IP "\fB\-mabi=elfv1\fR" 4
.IX Item "-mabi=elfv1"
Change tha current \s-1ABI\s0 ta use tha ELFv1 \s-1ABI.\s0
This is tha default \s-1ABI\s0 fo' big-endian PowerPC 64\-bit Linux.
Overridin tha default \s-1ABI\s0 requires special system support n' is
likely ta fail up in spectacular ways.
.IP "\fB\-mabi=elfv2\fR" 4
.IX Item "-mabi=elfv2"
Change tha current \s-1ABI\s0 ta use tha ELFv2 \s-1ABI.\s0
This is tha default \s-1ABI\s0 fo' lil-endian PowerPC 64\-bit Linux.
Overridin tha default \s-1ABI\s0 requires special system support n' is
likely ta fail up in spectacular ways.
.IP "\fB\-mprototype\fR" 4
.IX Item "-mprototype"
.PD 0
.IP "\fB\-mno\-prototype\fR" 4
.IX Item "-mno-prototype"
.PD
On System V.4 n' embedded PowerPC systems assume dat all calls to
variable argument functions is properly prototyped. Y'all KNOW dat shit, muthafucka!  Otherwise, the
compila must bang a instruction before every last muthafuckin non-prototyped call to
set or clear bit 6 of tha condizzle code regista (\fI\s-1CR\s0\fR) to
indicate whether floating-point joints is passed up in tha floating-point
registas up in case tha function takes variable arguments, n' you can put dat on yo' toast.  With
\&\fB\-mprototype\fR, only calls ta prototyped variable argument functions
set or clear tha bit.
.IP "\fB\-msim\fR" 4
.IX Item "-msim"
On embedded PowerPC systems, assume dat tha startup module is called
\&\fIsim\-crt0.o\fR n' dat tha standard C libraries is \fIlibsim.a\fR and
\&\fIlibc.a\fR.  This is tha default fo' \fBpowerpc\-*\-eabisim\fR
configurations.
.IP "\fB\-mmvme\fR" 4
.IX Item "-mmvme"
On embedded PowerPC systems, assume dat tha startup module is called
\&\fIcrt0.o\fR n' tha standard C libraries is \fIlibmvme.a\fR and
\&\fIlibc.a\fR.
.IP "\fB\-mads\fR" 4
.IX Item "-mads"
On embedded PowerPC systems, assume dat tha startup module is called
\&\fIcrt0.o\fR n' tha standard C libraries is \fIlibads.a\fR and
\&\fIlibc.a\fR.
.IP "\fB\-myellowknife\fR" 4
.IX Item "-myellowknife"
On embedded PowerPC systems, assume dat tha startup module is called
\&\fIcrt0.o\fR n' tha standard C libraries is \fIlibyk.a\fR and
\&\fIlibc.a\fR.
.IP "\fB\-mvxworks\fR" 4
.IX Item "-mvxworks"
On System V.4 n' embedded PowerPC systems, specify dat yo ass is
compilin fo' a VxWorks system.
.IP "\fB\-memb\fR" 4
.IX Item "-memb"
On embedded PowerPC systems, set tha \fI\s-1PPC_EMB\s0\fR bit up in tha \s-1ELF\s0 flags
header ta indicate dat \fBeabi\fR extended relocations is used.
.IP "\fB\-meabi\fR" 4
.IX Item "-meabi"
.PD 0
.IP "\fB\-mno\-eabi\fR" 4
.IX Item "-mno-eabi"
.PD
On System V.4 n' embedded PowerPC systems do (do not) adhere ta the
Embedded Applications Binary Interface (\s-1EABI\s0), which be a set of
modifications ta tha System V.4 justifications.  Selectin \fB\-meabi\fR
means dat tha stack be aligned ta a 8\-byte boundary, a gangbangin' function
\&\f(CW\*(C`_\|_eabi\*(C'\fR is called from \f(CW\*(C`main\*(C'\fR ta set up tha \s-1EABI\s0
environment, n' tha \fB\-msdata\fR option can use both \f(CW\*(C`r2\*(C'\fR and
\&\f(CW\*(C`r13\*(C'\fR ta point ta two separate lil' small-ass data areas.  Selecting
\&\fB\-mno\-eabi\fR means dat tha stack be aligned ta a 16\-byte boundary,
no \s-1EABI\s0 initialization function is called from \f(CW\*(C`main\*(C'\fR, n' the
\&\fB\-msdata\fR option only uses \f(CW\*(C`r13\*(C'\fR ta point ta a single
small data area.  Da \fB\-meabi\fR option is on by default if you
configured \s-1GCC\s0 rockin one of tha \fBpowerpc*\-*\-eabi*\fR options.
.IP "\fB\-msdata=eabi\fR" 4
.IX Item "-msdata=eabi"
On System V.4 n' embedded PowerPC systems, put lil' small-ass initialized
\&\f(CW\*(C`const\*(C'\fR global n' static data up in tha \fB.sdata2\fR section, which
is pointed ta by regista \f(CW\*(C`r2\*(C'\fR.  Put lil' small-ass initialized
non\-\f(CW\*(C`const\*(C'\fR global n' static data up in tha \fB.sdata\fR section,
which is pointed ta by regista \f(CW\*(C`r13\*(C'\fR.  Put lil' small-ass uninitialized
global n' static data up in tha \fB.sbss\fR section, which be adjacent to
the \fB.sdata\fR section. I aint talkin' bout chicken n' gravy biatch.  Da \fB\-msdata=eabi\fR option is
incompatible wit tha \fB\-mrelocatable\fR option. I aint talkin' bout chicken n' gravy biatch.  The
\&\fB\-msdata=eabi\fR option also sets tha \fB\-memb\fR option.
.IP "\fB\-msdata=sysv\fR" 4
.IX Item "-msdata=sysv"
On System V.4 n' embedded PowerPC systems, put lil' small-ass global n' static
data up in tha \fB.sdata\fR section, which is pointed ta by register
\&\f(CW\*(C`r13\*(C'\fR.  Put lil' small-ass uninitialized global n' static data up in the
\&\fB.sbss\fR section, which be adjacent ta tha \fB.sdata\fR section.
Da \fB\-msdata=sysv\fR option is incompatible wit the
\&\fB\-mrelocatable\fR option.
.IP "\fB\-msdata=default\fR" 4
.IX Item "-msdata=default"
.PD 0
.IP "\fB\-msdata\fR" 4
.IX Item "-msdata"
.PD
On System V.4 n' embedded PowerPC systems, if \fB\-meabi\fR is used,
compile code tha same as \fB\-msdata=eabi\fR, otherwise compile code the
same as \fB\-msdata=sysv\fR.
.IP "\fB\-msdata=data\fR" 4
.IX Item "-msdata=data"
On System V.4 n' embedded PowerPC systems, put lil' small-ass global
data up in tha \fB.sdata\fR section. I aint talkin' bout chicken n' gravy biatch.  Put lil' small-ass uninitialized global
data up in tha \fB.sbss\fR section. I aint talkin' bout chicken n' gravy biatch.  Do not use regista \f(CW\*(C`r13\*(C'\fR
to address lil' small-ass data however n' shit.  This is tha default behavior unless
other \fB\-msdata\fR options is used.
.IP "\fB\-msdata=none\fR" 4
.IX Item "-msdata=none"
.PD 0
.IP "\fB\-mno\-sdata\fR" 4
.IX Item "-mno-sdata"
.PD
On embedded PowerPC systems, put all initialized global n' static data
in tha \fB.data\fR section, n' all uninitialized data up in the
\&\fB.bss\fR section.
.IP "\fB\-mblock\-move\-inline\-limit=\fR\fInum\fR" 4
.IX Item "-mblock-move-inline-limit=num"
Inline all block moves (like fuckin calls ta \f(CW\*(C`memcpy\*(C'\fR or structure
copies) less than or equal ta \fInum\fR bytes.  Da minimum value for
\&\fInum\fR is 32 bytes on 32\-bit targets n' 64 bytes on 64\-bit
targets, n' you can put dat on yo' toast.  Da default value is target-specific.
.IP "\fB\-G\fR \fInum\fR" 4
.IX Item "-G num"
On embedded PowerPC systems, put global n' static shit less than or
equal ta \fInum\fR bytes tha fuck into tha lil' small-ass data or \s-1BSS\s0 sections instead of
the aiiight data or \s-1BSS\s0 section. I aint talkin' bout chicken n' gravy biatch.  By default, \fInum\fR is 8.  The
\&\fB\-G\fR \fInum\fR switch be also passed ta tha linker.
All modulez should be compiled wit tha same \fB\-G\fR \fInum\fR value.
.IP "\fB\-mregnames\fR" 4
.IX Item "-mregnames"
.PD 0
.IP "\fB\-mno\-regnames\fR" 4
.IX Item "-mno-regnames"
.PD
On System V.4 n' embedded PowerPC systems do (do not) emit register
names up in tha assembly language output rockin symbolic forms.
.IP "\fB\-mlongcall\fR" 4
.IX Item "-mlongcall"
.PD 0
.IP "\fB\-mno\-longcall\fR" 4
.IX Item "-mno-longcall"
.PD
By default assume dat all calls is far away so dat a longer n' more
expensive callin sequence is required. Y'all KNOW dat shit, muthafucka!  This is required fo' calls
farther than 32 megabytes (33,554,432 bytes) from tha current location.
A short call is generated if tha compila knows
the call cannot be dat far away.  This settin can be overridden by
the \f(CW\*(C`shortcall\*(C'\fR function attribute, or by \f(CW\*(C`#pragma
longcall(0)\*(C'\fR.
.Sp
Some linkers is capable of detectin out-of-range calls n' generating
glue code on tha fly.  On these systems, long calls is unnecessary and
generate slower code.  Az of dis writing, tha \s-1AIX\s0 linker can do this,
as can tha \s-1GNU\s0 linker fo' PowerPC/64.  It be planned ta add dis feature
to tha \s-1GNU\s0 linker fo' 32\-bit PowerPC systems as well.
.Sp
On Darwin/PPC systems, \f(CW\*(C`#pragma longcall\*(C'\fR generates \f(CW\*(C`jbsr
callee, L42\*(C'\fR, plus a \fIbranch island\fR (glue code).  Da two target
addresses represent tha callee n' tha branch island. Y'all KNOW dat shit, muthafucka!  The
Darwin/PPC linker prefers tha straight-up original gangsta address n' generates a \f(CW\*(C`bl
callee\*(C'\fR if tha \s-1PPC \s0\f(CW\*(C`bl\*(C'\fR instruction reaches tha callee directly;
otherwise, tha linker generates \f(CW\*(C`bl L42\*(C'\fR ta booty-call tha branch
island. Y'all KNOW dat shit, muthafucka!  Da branch island be appended ta tha body of the
callin function; it computes tha full 32\-bit address of tha callee
and jumps ta dat shit.
.Sp
On Mach-O (Darwin) systems, dis option directs tha compila emit to
the glue fo' every last muthafuckin direct call, n' tha Darwin linker decides whether
to use or discard dat shit.
.Sp
In tha future, \s-1GCC\s0 may ignore all longcall justifications
when tha linker is known ta generate glue.
.IP "\fB\-mtls\-markers\fR" 4
.IX Item "-mtls-markers"
.PD 0
.IP "\fB\-mno\-tls\-markers\fR" 4
.IX Item "-mno-tls-markers"
.PD
Mark (do not mark) calls ta \f(CW\*(C`_\|_tls_get_addr\*(C'\fR wit a relocation
specifyin tha function argument.  Da relocation allows tha linker to
reliably associate function call wit argument setup instructions for
\&\s-1TLS\s0 optimization, which up in turn allows \s-1GCC\s0 ta betta schedule the
sequence.
.IP "\fB\-pthread\fR" 4
.IX Item "-pthread"
Addz support fo' multithreadin wit tha \fIpthreads\fR library.
This option sets flags fo' both tha preprocessor n' linker.
.IP "\fB\-mrecip\fR" 4
.IX Item "-mrecip"
.PD 0
.IP "\fB\-mno\-recip\fR" 4
.IX Item "-mno-recip"
.PD
This option enablez use of tha reciprocal estimate and
reciprocal square root estimate instructions wit additional
Newton-Raphson steps ta increase precision instead of bustin a gangbangin' finger-lickin' divide or
square root n' divide fo' floating-point arguments, n' you can put dat on yo' toast.  Yo ass should use
the \fB\-ffast\-math\fR option when rockin \fB\-mrecip\fR (or at
least \fB\-funsafe\-math\-optimizations\fR,
\&\fB\-finite\-math\-only\fR, \fB\-freciprocal\-math\fR and
\&\fB\-fno\-trapping\-math\fR).  Note dat while tha throughput of the
sequence is generally higher than tha throughput of tha non-reciprocal
instruction, tha precision of tha sequence can be decreased by up ta 2
ulp (i.e. tha inverse of 1.0 equals 0.99999994) fo' reciprocal square
roots.
.IP "\fB\-mrecip=\fR\fIopt\fR" 4
.IX Item "-mrecip=opt"
This option controls which reciprocal estimate instructions
may be used. Y'all KNOW dat shit, muthafucka!  \fIopt\fR be a cold-ass lil comma-separated list of options, which may
be preceded by a \f(CW\*(C`!\*(C'\fR ta invert tha option:
\&\f(CW\*(C`all\*(C'\fR: enable all estimate instructions,
\&\f(CW\*(C`default\*(C'\fR: enable tha default instructions, equivalent ta \fB\-mrecip\fR,
\&\f(CW\*(C`none\*(C'\fR: disable all estimate instructions, equivalent ta \fB\-mno\-recip\fR;
\&\f(CW\*(C`div\*(C'\fR: enable tha reciprocal approximation instructions fo' both single n' double precision;
\&\f(CW\*(C`divf\*(C'\fR: enable tha single-precision reciprocal approximation instructions;
\&\f(CW\*(C`divd\*(C'\fR: enable tha double-precision reciprocal approximation instructions;
\&\f(CW\*(C`rsqrt\*(C'\fR: enable tha reciprocal square root approximation instructions fo' both single n' double precision;
\&\f(CW\*(C`rsqrtf\*(C'\fR: enable tha single-precision reciprocal square root approximation instructions;
\&\f(CW\*(C`rsqrtd\*(C'\fR: enable tha double-precision reciprocal square root approximation instructions;
.Sp
So, fo' example, \fB\-mrecip=all,!rsqrtd\fR enables
all of tha reciprocal estimate instructions, except fo' the
\&\f(CW\*(C`FRSQRTE\*(C'\fR, \f(CW\*(C`XSRSQRTEDP\*(C'\fR, n' \f(CW\*(C`XVRSQRTEDP\*(C'\fR instructions
which handle tha double-precision reciprocal square root calculations.
.IP "\fB\-mrecip\-precision\fR" 4
.IX Item "-mrecip-precision"
.PD 0
.IP "\fB\-mno\-recip\-precision\fR" 4
.IX Item "-mno-recip-precision"
.PD
Assume (do not assume) dat tha reciprocal estimate instructions
provide higher-precision estimates than is mandated by tha PowerPC
\&\s-1ABI. \s0 Selectin \fB\-mcpu=power6\fR, \fB\-mcpu=power7\fR or
\&\fB\-mcpu=power8\fR automatically selects \fB\-mrecip\-precision\fR.
Da double-precision square root estimate instructions is not generated by
default on low-precision machines, since they do not provide an
estimate dat converges afta three steps.
.IP "\fB\-mveclibabi=\fR\fItype\fR" 4
.IX Item "-mveclibabi=type"
Specifies tha \s-1ABI\s0 type ta use fo' vectorizin intrinsics rockin an
external library.  Da only type supported at present is \f(CW\*(C`mass\*(C'\fR,
which specifies ta use \s-1IBM\s0z Mathematical Acceleration Subsystem
(\s-1MASS\s0) libraries fo' vectorizin intrinsics rockin external libraries.
\&\s-1GCC\s0 currently emits calls ta \f(CW\*(C`acosd2\*(C'\fR, \f(CW\*(C`acosf4\*(C'\fR,
\&\f(CW\*(C`acoshd2\*(C'\fR, \f(CW\*(C`acoshf4\*(C'\fR, \f(CW\*(C`asind2\*(C'\fR, \f(CW\*(C`asinf4\*(C'\fR,
\&\f(CW\*(C`asinhd2\*(C'\fR, \f(CW\*(C`asinhf4\*(C'\fR, \f(CW\*(C`atan2d2\*(C'\fR, \f(CW\*(C`atan2f4\*(C'\fR,
\&\f(CW\*(C`atand2\*(C'\fR, \f(CW\*(C`atanf4\*(C'\fR, \f(CW\*(C`atanhd2\*(C'\fR, \f(CW\*(C`atanhf4\*(C'\fR,
\&\f(CW\*(C`cbrtd2\*(C'\fR, \f(CW\*(C`cbrtf4\*(C'\fR, \f(CW\*(C`cosd2\*(C'\fR, \f(CW\*(C`cosf4\*(C'\fR,
\&\f(CW\*(C`coshd2\*(C'\fR, \f(CW\*(C`coshf4\*(C'\fR, \f(CW\*(C`erfcd2\*(C'\fR, \f(CW\*(C`erfcf4\*(C'\fR,
\&\f(CW\*(C`erfd2\*(C'\fR, \f(CW\*(C`erff4\*(C'\fR, \f(CW\*(C`exp2d2\*(C'\fR, \f(CW\*(C`exp2f4\*(C'\fR,
\&\f(CW\*(C`expd2\*(C'\fR, \f(CW\*(C`expf4\*(C'\fR, \f(CW\*(C`expm1d2\*(C'\fR, \f(CW\*(C`expm1f4\*(C'\fR,
\&\f(CW\*(C`hypotd2\*(C'\fR, \f(CW\*(C`hypotf4\*(C'\fR, \f(CW\*(C`lgammad2\*(C'\fR, \f(CW\*(C`lgammaf4\*(C'\fR,
\&\f(CW\*(C`log10d2\*(C'\fR, \f(CW\*(C`log10f4\*(C'\fR, \f(CW\*(C`log1pd2\*(C'\fR, \f(CW\*(C`log1pf4\*(C'\fR,
\&\f(CW\*(C`log2d2\*(C'\fR, \f(CW\*(C`log2f4\*(C'\fR, \f(CW\*(C`logd2\*(C'\fR, \f(CW\*(C`logf4\*(C'\fR,
\&\f(CW\*(C`powd2\*(C'\fR, \f(CW\*(C`powf4\*(C'\fR, \f(CW\*(C`sind2\*(C'\fR, \f(CW\*(C`sinf4\*(C'\fR, \f(CW\*(C`sinhd2\*(C'\fR,
\&\f(CW\*(C`sinhf4\*(C'\fR, \f(CW\*(C`sqrtd2\*(C'\fR, \f(CW\*(C`sqrtf4\*(C'\fR, \f(CW\*(C`tand2\*(C'\fR,
\&\f(CW\*(C`tanf4\*(C'\fR, \f(CW\*(C`tanhd2\*(C'\fR, n' \f(CW\*(C`tanhf4\*(C'\fR when generatin code
for power7.  Both \fB\-ftree\-vectorize\fR and
\&\fB\-funsafe\-math\-optimizations\fR must also be enabled. Y'all KNOW dat shit, muthafucka!  Da \s-1MASS\s0
libraries must be specified at link time.
.IP "\fB\-mfriz\fR" 4
.IX Item "-mfriz"
.PD 0
.IP "\fB\-mno\-friz\fR" 4
.IX Item "-mno-friz"
.PD
Generate (do not generate) tha \f(CW\*(C`friz\*(C'\fR instruction when the
\&\fB\-funsafe\-math\-optimizations\fR option is used ta optimize
roundin of floating-point joints ta 64\-bit integer n' back ta floating
point.  Da \f(CW\*(C`friz\*(C'\fR instruction do not return tha same value if
the floating-point number is too big-ass ta fit up in a integer.
.IP "\fB\-mpointers\-to\-nested\-functions\fR" 4
.IX Item "-mpointers-to-nested-functions"
.PD 0
.IP "\fB\-mno\-pointers\-to\-nested\-functions\fR" 4
.IX Item "-mno-pointers-to-nested-functions"
.PD
Generate (do not generate) code ta load up tha static chain register
(\fIr11\fR) when callin all up in a pointa on \s-1AIX\s0 n' 64\-bit Linux
systems where a gangbangin' function pointa points ta a 3\-word descriptor giving
the function address, \s-1TOC\s0 value ta be loaded up in regista \fIr2\fR, and
static chain value ta be loaded up in regista \fIr11\fR.  The
\&\fB\-mpointers\-to\-nested\-functions\fR is on by default.  Yo ass cannot
call all up in pointas ta nested functions or pointers
to functions compiled up in other languages dat use tha static chain if
you use tha \fB\-mno\-pointers\-to\-nested\-functions\fR.
.IP "\fB\-msave\-toc\-indirect\fR" 4
.IX Item "-msave-toc-indirect"
.PD 0
.IP "\fB\-mno\-save\-toc\-indirect\fR" 4
.IX Item "-mno-save-toc-indirect"
.PD
Generate (do not generate) code ta save tha \s-1TOC\s0 value up in tha reserved
stack location up in tha function prologue if tha function calls through
a pointa on \s-1AIX\s0 n' 64\-bit Linux systems.  If tha \s-1TOC\s0 value is not
saved up in tha prologue, it is saved just before tha call all up in the
pointer n' shit.  Da \fB\-mno\-save\-toc\-indirect\fR option is tha default.
.IP "\fB\-mcompat\-align\-parm\fR" 4
.IX Item "-mcompat-align-parm"
.PD 0
.IP "\fB\-mno\-compat\-align\-parm\fR" 4
.IX Item "-mno-compat-align-parm"
.PD
Generate (do not generate) code ta pass structure parametas wit a
maximum alignment of 64 bits, fo' compatibilitizzle wit olda versions
of \s-1GCC.\s0
.Sp
Older versionz of \s-1GCC \s0(prior ta 4.9.0) incorrectly did not align a
structure parameta on a 128\-bit boundary when dat structure contained
a member requirin 128\-bit alignment.  This is erected up in more
recent versionz of \s-1GCC. \s0 This option may be used ta generate code
that is compatible wit functions compiled wit olda versions of
\&\s-1GCC.\s0
.Sp
In dis version of tha compiler, tha \fB\-mcompat\-align\-parm\fR
is tha default, except when rockin tha Linux ELFv2 \s-1ABI.\s0
.SS "\s-1RX\s0 Options"
.IX Subsection "RX Options"
These command-line options is defined fo' \s-1RX\s0 targets:
.IP "\fB\-m64bit\-doubles\fR" 4
.IX Item "-m64bit-doubles"
.PD 0
.IP "\fB\-m32bit\-doubles\fR" 4
.IX Item "-m32bit-doubles"
.PD
Make tha \f(CW\*(C`double\*(C'\fR data type be 64 bits (\fB\-m64bit\-doubles\fR)
or 32 bits (\fB\-m32bit\-doubles\fR) up in size.  Da default is
\&\fB\-m32bit\-doubles\fR.  \fINote\fR \s-1RX\s0 floating-point hardware only
works on 32\-bit joints, which is why tha default is
\&\fB\-m32bit\-doubles\fR.
.IP "\fB\-fpu\fR" 4
.IX Item "-fpu"
.PD 0
.IP "\fB\-nofpu\fR" 4
.IX Item "-nofpu"
.PD
Enablez (\fB\-fpu\fR) or disablez (\fB\-nofpu\fR) tha use of \s-1RX\s0
floating-point hardware.  Da default is enabled fo' tha \fI\s-1RX600\s0\fR
series n' disabled fo' tha \fI\s-1RX200\s0\fR series.
.Sp
Floating-point instructions is only generated fo' 32\-bit floating-point 
values, however, so tha \s-1FPU\s0 hardware aint used fo' doublez if the
\&\fB\-m64bit\-doubles\fR option is used.
.Sp
\&\fINote\fR If tha \fB\-fpu\fR option is enabled then
\&\fB\-funsafe\-math\-optimizations\fR be also enabled automatically.
This is cuz tha \s-1RX FPU\s0 instructions is theyselves unsafe.
.IP "\fB\-mcpu=\fR\fIname\fR" 4
.IX Item "-mcpu=name"
Selects tha type of \s-1RX CPU\s0 ta be targeted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Currently three types are
supported, tha generic \fI\s-1RX600\s0\fR n' \fI\s-1RX200\s0\fR series hardware and
the specific \fI\s-1RX610\s0\fR \s-1CPU. \s0 Da default is \fI\s-1RX600\s0\fR.
.Sp
Da only difference between \fI\s-1RX600\s0\fR n' \fI\s-1RX610\s0\fR is dat the
\&\fI\s-1RX610\s0\fR do not support tha \f(CW\*(C`MVTIPL\*(C'\fR instruction.
.Sp
Da \fI\s-1RX200\s0\fR series aint gots a hardware floating-point unit
and so \fB\-nofpu\fR is enabled by default when dis type is
selected.
.IP "\fB\-mbig\-endian\-data\fR" 4
.IX Item "-mbig-endian-data"
.PD 0
.IP "\fB\-mlil\-endian\-data\fR" 4
.IX Item "-mlil-endian-data"
.PD
Store data (but not code) up in tha big-endian format.  Da default is
\&\fB\-mlil\-endian\-data\fR, i.e. ta store data up in tha lil-endian
format.
.IP "\fB\-msmall\-data\-limit=\fR\fIN\fR" 4
.IX Item "-msmall-data-limit=N"
Specifies tha maximum size up in bytez of global n' static variables
which can be placed tha fuck into tha lil' small-ass data area.  Usin tha lil' small-ass data
area can lead ta smalla n' fasta code yo, but tha size of area is
limited n' it is up ta tha programmer ta ensure dat tha area do
not overflow.  Also when tha lil' small-ass data area is used one of tha \s-1RX\s0's
registas (usually \f(CW\*(C`r13\*(C'\fR) is reserved fo' use pointin ta this
area, so it is no longer available fo' use by tha compila n' shit.  This
could result up in slower and/or larger code if variablez is pushed onto
the stack instead of bein held up in dis register.
.Sp
Note, common variablez (variablez dat aint been initialized) and
constants is not placed tha fuck into tha lil' small-ass data area as they is assigned
to other sections up in tha output executable.
.Sp
Da default value is zero, which disablez dis feature.  Note, this
feature aint enabled by default wit higher optimization levels
(\fB\-O2\fR etc) cuz of tha potentially detrimenstrual effects of
reservin a regista n' shit.  It be up ta tha programmer ta experiment and
discover whether dis feature iz of benefit ta they program.  See the
description of tha \fB\-mpid\fR option fo' a thugged-out description of how tha fuck the
actual regista ta hold tha lil' small-ass data area pointa is chosen.
.IP "\fB\-msim\fR" 4
.IX Item "-msim"
.PD 0
.IP "\fB\-mno\-sim\fR" 4
.IX Item "-mno-sim"
.PD
Use tha simulator runtime.  Da default is ta use tha libgloss
board-specific runtime.
.IP "\fB\-mas100\-syntax\fR" 4
.IX Item "-mas100-syntax"
.PD 0
.IP "\fB\-mno\-as100\-syntax\fR" 4
.IX Item "-mno-as100-syntax"
.PD
When generatin assembla output bust a syntax dat is compatible with
Renesass \s-1AS100\s0 assembla n' shit.  This syntax can also be handled by tha \s-1GAS\s0
assembla yo, but it has some restrictions so it aint generated by default.
.IP "\fB\-mmax\-constant\-size=\fR\fIN\fR" 4
.IX Item "-mmax-constant-size=N"
Specifies tha maximum size, up in bytes, of a cold-ass lil constant dat can be used as
an operand up in a \s-1RX\s0 instruction. I aint talkin' bout chicken n' gravy biatch.  Although tha \s-1RX\s0 instruction set do
allow constantz of up ta 4 bytes up in length ta be used up in instructions,
a longer value equates ta a longer instruction. I aint talkin' bout chicken n' gravy biatch.  Thus up in some
circumstances it can be beneficial ta restrict tha size of constants
that is used up in instructions.  Constants dat is too big-ass is instead
placed tha fuck into a cold-ass lil constant pool n' referenced via regista indirection.
.Sp
Da value \fIN\fR can be between 0 n' 4.  A value of 0 (the default)
or 4 means dat constantz of any size is allowed.
.IP "\fB\-mrelax\fR" 4
.IX Item "-mrelax"
Enable linker chillaxation. I aint talkin' bout chicken n' gravy biatch.  Linker chillaxation be a process whereby the
linker attempts ta reduce tha size of a program by findin shorter
versionz of various instructions.  Disabled by default.
.IP "\fB\-mint\-register=\fR\fIN\fR" 4
.IX Item "-mint-register=N"
Specify tha number of registas ta reserve fo' fast interrupt handlez
functions.  Da value \fIN\fR can be between 0 n' 4.  A value of 1
means dat regista \f(CW\*(C`r13\*(C'\fR is reserved fo' tha exclusive use
of fast interrupt handlezs.  A value of 2 reserves \f(CW\*(C`r13\*(C'\fR and
\&\f(CW\*(C`r12\*(C'\fR.  A value of 3 reserves \f(CW\*(C`r13\*(C'\fR, \f(CW\*(C`r12\*(C'\fR and
\&\f(CW\*(C`r11\*(C'\fR, n' a value of 4 reserves \f(CW\*(C`r13\*(C'\fR all up in \f(CW\*(C`r10\*(C'\fR.
A value of 0, tha default, do not reserve any registers.
.IP "\fB\-msave\-acc\-in\-interrupts\fR" 4
.IX Item "-msave-acc-in-interrupts"
Specifies dat interrupt handlez functions should preserve the
accumulator regista n' shit.  This is only necessary if aiiight code might use
the accumulator register, fo' example cuz it performs 64\-bit
multiplications.  Da default is ta ignore tha accumulator as this
makes tha interrupt handlezs faster.
.IP "\fB\-mpid\fR" 4
.IX Item "-mpid"
.PD 0
.IP "\fB\-mno\-pid\fR" 4
.IX Item "-mno-pid"
.PD
Enablez tha generation of posizzle independent data.  When enabled any
access ta constant data is done via a offset from a funky-ass base address
held up in a regista n' shit.  This allows tha location of constant data ta be
determined at run time without requirin tha executable ta be
relocated, which be a funky-ass benefit ta embedded applications wit tight
memory constraints, n' you can put dat on yo' toast.  Data dat can be modified aint affected by this
option.
.Sp
Note, rockin dis feature reserves a register, probably \f(CW\*(C`r13\*(C'\fR, for
the constant data base address.  This can result up in slower and/or
larger code, especially up in fucked up functions.
.Sp
Da actual regista chosen ta hold tha constant data base address
dependz upon whether tha \fB\-msmall\-data\-limit\fR and/or the
\&\fB\-mint\-register\fR command-line options is enabled. Y'all KNOW dat shit, muthafucka!  Starting
with regista \f(CW\*(C`r13\*(C'\fR n' proceedin downwards, registas are
allocated first ta satisfy tha requirementz of \fB\-mint\-register\fR,
then \fB\-mpid\fR n' finally \fB\-msmall\-data\-limit\fR.  Thus it
is possible fo' tha lil' small-ass data area regista ta be \f(CW\*(C`r8\*(C'\fR if both
\&\fB\-mint\-register=4\fR n' \fB\-mpid\fR is specified on the
command line.
.Sp
By default dis feature aint enabled. Y'all KNOW dat shit, muthafucka!  Da default can be restored
via tha \fB\-mno\-pid\fR command-line option.
.IP "\fB\-mno\-warn\-multiple\-fast\-interrupts\fR" 4
.IX Item "-mno-warn-multiple-fast-interrupts"
.PD 0
.IP "\fB\-mwarn\-multiple\-fast\-interrupts\fR" 4
.IX Item "-mwarn-multiple-fast-interrupts"
.PD
Prevents \s-1GCC\s0 from issuin a warnin message if it findz mo' than one
fast interrupt handlez when it is compilin a gangbangin' file.  Da default is to
issue a warnin fo' each extra fast interrupt handlez found, as tha \s-1RX\s0
only supports one such interrupt.
.PP
\&\fINote:\fR Da generic \s-1GCC\s0 command-line option \fB\-ffixed\-\fR\fIreg\fR
has special significizzle ta tha \s-1RX\s0 port when used wit the
\&\f(CW\*(C`interrupt\*(C'\fR function attribute.  This attribute indicates a
function intended ta process fast interrupts, n' you can put dat on yo' toast.  \s-1GCC\s0 ensures
that it only uses tha registas \f(CW\*(C`r10\*(C'\fR, \f(CW\*(C`r11\*(C'\fR, \f(CW\*(C`r12\*(C'\fR
and/or \f(CW\*(C`r13\*(C'\fR n' only provided dat tha aiiight use of the
correspondin registas done been restricted via the
\&\fB\-ffixed\-\fR\fIreg\fR or \fB\-mint\-register\fR command-line
options.
.SS "S/390 n' zSeries Options"
.IX Subsection "S/390 n' zSeries Options"
These is tha \fB\-m\fR options defined fo' tha S/390 n' zSeries architecture.
.IP "\fB\-mhard\-float\fR" 4
.IX Item "-mhard-float"
.PD 0
.IP "\fB\-msoft\-float\fR" 4
.IX Item "-msoft-float"
.PD
Use (do not use) tha hardware floating-point instructions n' registers
for floating-point operations.  When \fB\-msoft\-float\fR is specified,
functions up in \fIlibgcc.a\fR is used ta big-ass up floating-point
operations.  When \fB\-mhard\-float\fR is specified, tha compiler
generates \s-1IEEE\s0 floating-point instructions.  This is tha default.
.IP "\fB\-mhard\-dfp\fR" 4
.IX Item "-mhard-dfp"
.PD 0
.IP "\fB\-mno\-hard\-dfp\fR" 4
.IX Item "-mno-hard-dfp"
.PD
Use (do not use) tha hardware decimal-floating-point instructions for
decimal-floating-point operations.  When \fB\-mno\-hard\-dfp\fR is
specified, functions up in \fIlibgcc.a\fR is used ta perform
decimal-floating-point operations.  When \fB\-mhard\-dfp\fR is
specified, tha compila generates decimal-floating-point hardware
instructions.  This is tha default fo' \fB\-march=z9\-ec\fR or higher.
.IP "\fB\-mlong\-double\-64\fR" 4
.IX Item "-mlong-double-64"
.PD 0
.IP "\fB\-mlong\-double\-128\fR" 4
.IX Item "-mlong-double-128"
.PD
These switches control tha size of \f(CW\*(C`long double\*(C'\fR type fo' realz. A size
of 64 bits make tha \f(CW\*(C`long double\*(C'\fR type equivalent ta tha \f(CW\*(C`double\*(C'\fR
type. This is tha default.
.IP "\fB\-mbackchain\fR" 4
.IX Item "-mbackchain"
.PD 0
.IP "\fB\-mno\-backchain\fR" 4
.IX Item "-mno-backchain"
.PD
Store (do not store) tha address of tha callerz frame as backchain pointer
into tha calleez stack frame.
A backchain may be needed ta allow debuggin rockin tools dat do not understand
\&\s-1DWARF 2\s0 call frame shiznit.
When \fB\-mno\-packed\-stack\fR is up in effect, tha backchain pointa is stored
at tha bottom of tha stack frame; when \fB\-mpacked\-stack\fR is up in effect,
the backchain is placed tha fuck into tha topmost word of tha 96/160 byte register
save area.
.Sp
In general, code compiled wit \fB\-mbackchain\fR is call-compatible with
code compiled wit \fB\-mmo\-backchain\fR; however, use of tha backchain
for debuggin purposes probably requires dat tha whole binary is built with
\&\fB\-mbackchain\fR.  Note dat tha combination of \fB\-mbackchain\fR,
\&\fB\-mpacked\-stack\fR n' \fB\-mhard\-float\fR aint supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  In order
to build a linux kernel use \fB\-msoft\-float\fR.
.Sp
Da default is ta not maintain tha backchain.
.IP "\fB\-mpacked\-stack\fR" 4
.IX Item "-mpacked-stack"
.PD 0
.IP "\fB\-mno\-packed\-stack\fR" 4
.IX Item "-mno-packed-stack"
.PD
Use (do not use) tha packed stack layout.  When \fB\-mno\-packed\-stack\fR is
specified, tha compila uses tha all fieldz of tha 96/160 byte regista save
area only fo' they default purpose; unused fieldz still take up stack space.
When \fB\-mpacked\-stack\fR is specified, regista save slots is densely
packed all up in tha top of tha regista save area; unused space is reused fo' other
purposes, allowin fo' mo' efficient use of tha available stack space.
But fuck dat shiznit yo, tha word on tha street is dat when \fB\-mbackchain\fR be also up in effect, tha topmost word of
the save area be always used ta store tha backchain, n' tha return address
regista be always saved two lyrics below tha backchain.
.Sp
As long as tha stack frame backchain aint used, code generated with
\&\fB\-mpacked\-stack\fR is call-compatible wit code generated with
\&\fB\-mno\-packed\-stack\fR.  Note dat some non-FSF releasez of \s-1GCC 2.95\s0 for
S/390 or zSeries generated code dat uses tha stack frame backchain at run
time, not just fo' debuggin purposes.  Such code aint call-compatible
with code compiled wit \fB\-mpacked\-stack\fR.  Also, note dat the
combination of \fB\-mbackchain\fR,
\&\fB\-mpacked\-stack\fR n' \fB\-mhard\-float\fR aint supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  In order
to build a linux kernel use \fB\-msoft\-float\fR.
.Sp
Da default is ta not use tha packed stack layout.
.IP "\fB\-msmall\-exec\fR" 4
.IX Item "-msmall-exec"
.PD 0
.IP "\fB\-mno\-small\-exec\fR" 4
.IX Item "-mno-small-exec"
.PD
Generate (or do not generate) code rockin tha \f(CW\*(C`bras\*(C'\fR instruction
to do subroutine calls.
This only works reliably if tha total executable size do not
exceed 64k.  Da default is ta use tha \f(CW\*(C`basr\*(C'\fR instruction instead,
which aint gots dis limitation.
.IP "\fB\-m64\fR" 4
.IX Item "-m64"
.PD 0
.IP "\fB\-m31\fR" 4
.IX Item "-m31"
.PD
When \fB\-m31\fR is specified, generate code compliant ta the
GNU/Linux fo' S/390 \s-1ABI. \s0 When \fB\-m64\fR is specified, generate
code compliant ta tha GNU/Linux fo' zSeries \s-1ABI. \s0 This allows \s-1GCC\s0 in
particular ta generate 64\-bit instructions.  For tha \fBs390\fR
targets, tha default is \fB\-m31\fR, while tha \fBs390x\fR
targets default ta \fB\-m64\fR.
.IP "\fB\-mzarch\fR" 4
.IX Item "-mzarch"
.PD 0
.IP "\fB\-mesa\fR" 4
.IX Item "-mesa"
.PD
When \fB\-mzarch\fR is specified, generate code rockin the
instructions available on z/Architecture.
When \fB\-mesa\fR is specified, generate code rockin the
instructions available on \s-1ESA/390. \s0 Note dat \fB\-mesa\fR is
not possible wit \fB\-m64\fR.
When generatin code compliant ta tha GNU/Linux fo' S/390 \s-1ABI,\s0
the default is \fB\-mesa\fR.  When generatin code compliant
to tha GNU/Linux fo' zSeries \s-1ABI,\s0 tha default is \fB\-mzarch\fR.
.IP "\fB\-mmvcle\fR" 4
.IX Item "-mmvcle"
.PD 0
.IP "\fB\-mno\-mvcle\fR" 4
.IX Item "-mno-mvcle"
.PD
Generate (or do not generate) code rockin tha \f(CW\*(C`mvcle\*(C'\fR instruction
to big-ass up block moves.  When \fB\-mno\-mvcle\fR is specified,
use a \f(CW\*(C`mvc\*(C'\fR loop instead. Y'all KNOW dat shit, muthafucka!  This is tha default unless optimizin for
size.
.IP "\fB\-mdebug\fR" 4
.IX Item "-mdebug"
.PD 0
.IP "\fB\-mno\-debug\fR" 4
.IX Item "-mno-debug"
.PD
Print (or do not print) additionizzle debug shiznit when compiling.
Da default is ta not print debug shiznit.
.IP "\fB\-march=\fR\fIcpu-type\fR" 4
.IX Item "-march=cpu-type"
Generate code dat runs on \fIcpu-type\fR, which is tha name of a system
representin a cold-ass lil certain processor type.  Possible joints for
\&\fIcpu-type\fR is \fBg5\fR, \fBg6\fR, \fBz900\fR, \fBz990\fR,
\&\fBz9\-109\fR, \fBz9\-ec\fR n' \fBz10\fR.
When generatin code rockin tha instructions available on z/Architecture,
the default is \fB\-march=z900\fR.  Otherwise, tha default is
\&\fB\-march=g5\fR.
.IP "\fB\-mtune=\fR\fIcpu-type\fR" 4
.IX Item "-mtune=cpu-type"
Tune ta \fIcpu-type\fR every last muthafuckin thang applicable bout tha generated code,
except fo' tha \s-1ABI\s0 n' tha set of available instructions.
Da list of \fIcpu-type\fR joints is tha same ol' dirty as fo' \fB\-march\fR.
Da default is tha value used fo' \fB\-march\fR.
.IP "\fB\-mtpf\-trace\fR" 4
.IX Item "-mtpf-trace"
.PD 0
.IP "\fB\-mno\-tpf\-trace\fR" 4
.IX Item "-mno-tpf-trace"
.PD
Generate code dat addz (does not add) up in \s-1TPF OS\s0 specific branches ta trace
routines up in tha operatin system.  This option is off by default, even
when compilin fo' tha \s-1TPF OS.\s0
.IP "\fB\-mfused\-madd\fR" 4
.IX Item "-mfused-madd"
.PD 0
.IP "\fB\-mno\-fused\-madd\fR" 4
.IX Item "-mno-fused-madd"
.PD
Generate code dat uses (does not use) tha floating-point multiply and
accumulate instructions.  These instructions is generated by default if
hardware floatin point is used.
.IP "\fB\-mwarn\-framesize=\fR\fIframesize\fR" 4
.IX Item "-mwarn-framesize=framesize"
Emit a warnin if tha current function exceedz tha given frame size.  Because
this be a cold-ass lil compile-time check it don't need ta be a real problem when tha program
runs.  It be intended ta identify functions dat most probably cause
a stack overflow.  It be useful ta be used up in a environment wit limited stack
size e.g. tha linux kernel.
.IP "\fB\-mwarn\-dynamicstack\fR" 4
.IX Item "-mwarn-dynamicstack"
Emit a warnin if tha function calls \f(CW\*(C`alloca\*(C'\fR or uses dynamically-sized
arrays.  This is generally a wack scam wit a limited stack size.
.IP "\fB\-mstack\-guard=\fR\fIstack-guard\fR" 4
.IX Item "-mstack-guard=stack-guard"
.PD 0
.IP "\fB\-mstack\-size=\fR\fIstack-size\fR" 4
.IX Item "-mstack-size=stack-size"
.PD
If these options is provided tha S/390 back end emits additionizzle instructions in
the function prologue dat trigger a trap if tha stack size is \fIstack-guard\fR
bytes above tha \fIstack-size\fR (remember dat tha stack on S/390 grows downward).
If tha \fIstack-guard\fR option is omitted tha smallest juice of 2 larger than
the frame size of tha compiled function is chosen.
These options is intended ta be used ta help debuggin stack overflow problems.
Da additionally emitted code causes only lil overhead n' hence can also be
used up in thang-like systems without pimped outa performizzle degradation. I aint talkin' bout chicken n' gravy biatch.  Da given
values gotta be exact powerz of 2 n' \fIstack-size\fR has ta be pimped outa than
\&\fIstack-guard\fR without exceedin 64k.
In order ta be efficient tha extra code make tha assumption dat tha stack starts
at a address aligned ta tha value given by \fIstack-size\fR.
Da \fIstack-guard\fR option can only be used up in conjunction wit \fIstack-size\fR.
.IP "\fB\-mhotpatch[=\fR\fIhalfwords\fR\fB]\fR" 4
.IX Item "-mhotpatch[=halfwords]"
.PD 0
.IP "\fB\-mno\-hotpatch\fR" 4
.IX Item "-mno-hotpatch"
.PD
If tha hotpatch option is enabled, a \*(L"hot-patching\*(R" function
prologue is generated fo' all functions up in tha compilation unit.
Da funtion label is prepended wit tha given number of two-byte
Nop instructions (\fIhalfwords\fR, maximum 1000000) or 12 Nop
instructions if no argument is present.  Functions wit a
hot-patchin prologue is never inlined automatically, n' a
hot-patchin prologue is never generated fo' functions functions
that is explicitly inline.
.Sp
This option can be overridden fo' individual functions wit the
\&\f(CW\*(C`hotpatch\*(C'\fR attribute.
.SS "Score Options"
.IX Subsection "Score Options"
These options is defined fo' Score implementations:
.IP "\fB\-meb\fR" 4
.IX Item "-meb"
Compile code fo' big-endian mode.  This is tha default.
.IP "\fB\-mel\fR" 4
.IX Item "-mel"
Compile code fo' lil-endian mode.
.IP "\fB\-mnhwloop\fR" 4
.IX Item "-mnhwloop"
Disable generation of \f(CW\*(C`bcnz\*(C'\fR instructions.
.IP "\fB\-muls\fR" 4
.IX Item "-muls"
Enable generation of unaligned load n' store instructions.
.IP "\fB\-mmac\fR" 4
.IX Item "-mmac"
Enable tha use of multiply-accumulate instructions. Disabled by default.
.IP "\fB\-mscore5\fR" 4
.IX Item "-mscore5"
Specify tha \s-1SCORE5\s0 as tha target architecture.
.IP "\fB\-mscore5u\fR" 4
.IX Item "-mscore5u"
Specify tha \s-1SCORE5U\s0 of tha target architecture.
.IP "\fB\-mscore7\fR" 4
.IX Item "-mscore7"
Specify tha \s-1SCORE7\s0 as tha target architecture. This is tha default.
.IP "\fB\-mscore7d\fR" 4
.IX Item "-mscore7d"
Specify tha \s-1SCORE7D\s0 as tha target architecture.
.SS "\s-1SH\s0 Options"
.IX Subsection "SH Options"
These \fB\-m\fR options is defined fo' tha \s-1SH\s0 implementations:
.IP "\fB\-m1\fR" 4
.IX Item "-m1"
Generate code fo' tha \s-1SH1.\s0
.IP "\fB\-m2\fR" 4
.IX Item "-m2"
Generate code fo' tha \s-1SH2.\s0
.IP "\fB\-m2e\fR" 4
.IX Item "-m2e"
Generate code fo' tha SH2e.
.IP "\fB\-m2a\-nofpu\fR" 4
.IX Item "-m2a-nofpu"
Generate code fo' tha SH2a without \s-1FPU,\s0 or fo' a SH2a\-FPU up in such a way
that tha floating-point unit aint used.
.IP "\fB\-m2a\-single\-only\fR" 4
.IX Item "-m2a-single-only"
Generate code fo' tha SH2a\-FPU, up in such a way dat no double-precision
floating-point operations is used.
.IP "\fB\-m2a\-single\fR" 4
.IX Item "-m2a-single"
Generate code fo' tha SH2a\-FPU assumin tha floating-point unit is in
single-precision mode by default.
.IP "\fB\-m2a\fR" 4
.IX Item "-m2a"
Generate code fo' tha SH2a\-FPU assumin tha floating-point unit is in
double-precision mode by default.
.IP "\fB\-m3\fR" 4
.IX Item "-m3"
Generate code fo' tha \s-1SH3.\s0
.IP "\fB\-m3e\fR" 4
.IX Item "-m3e"
Generate code fo' tha SH3e.
.IP "\fB\-m4\-nofpu\fR" 4
.IX Item "-m4-nofpu"
Generate code fo' tha \s-1SH4\s0 without a gangbangin' floating-point unit.
.IP "\fB\-m4\-single\-only\fR" 4
.IX Item "-m4-single-only"
Generate code fo' tha \s-1SH4\s0 wit a gangbangin' floating-point unit dat only
supports single-precision arithmetic.
.IP "\fB\-m4\-single\fR" 4
.IX Item "-m4-single"
Generate code fo' tha \s-1SH4\s0 assumin tha floating-point unit is in
single-precision mode by default.
.IP "\fB\-m4\fR" 4
.IX Item "-m4"
Generate code fo' tha \s-1SH4.\s0
.IP "\fB\-m4\-100\fR" 4
.IX Item "-m4-100"
Generate code fo' \s-1SH4\-100.\s0
.IP "\fB\-m4\-100\-nofpu\fR" 4
.IX Item "-m4-100-nofpu"
Generate code fo' \s-1SH4\-100\s0 up in such a way dat the
floating-point unit aint used.
.IP "\fB\-m4\-100\-single\fR" 4
.IX Item "-m4-100-single"
Generate code fo' \s-1SH4\-100\s0 assumin tha floating-point unit is in
single-precision mode by default.
.IP "\fB\-m4\-100\-single\-only\fR" 4
.IX Item "-m4-100-single-only"
Generate code fo' \s-1SH4\-100\s0 up in such a way dat no double-precision
floating-point operations is used.
.IP "\fB\-m4\-200\fR" 4
.IX Item "-m4-200"
Generate code fo' \s-1SH4\-200.\s0
.IP "\fB\-m4\-200\-nofpu\fR" 4
.IX Item "-m4-200-nofpu"
Generate code fo' \s-1SH4\-200\s0 without up in such a way dat the
floating-point unit aint used.
.IP "\fB\-m4\-200\-single\fR" 4
.IX Item "-m4-200-single"
Generate code fo' \s-1SH4\-200\s0 assumin tha floating-point unit is in
single-precision mode by default.
.IP "\fB\-m4\-200\-single\-only\fR" 4
.IX Item "-m4-200-single-only"
Generate code fo' \s-1SH4\-200\s0 up in such a way dat no double-precision
floating-point operations is used.
.IP "\fB\-m4\-300\fR" 4
.IX Item "-m4-300"
Generate code fo' \s-1SH4\-300.\s0
.IP "\fB\-m4\-300\-nofpu\fR" 4
.IX Item "-m4-300-nofpu"
Generate code fo' \s-1SH4\-300\s0 without up in such a way dat the
floating-point unit aint used.
.IP "\fB\-m4\-300\-single\fR" 4
.IX Item "-m4-300-single"
Generate code fo' \s-1SH4\-300\s0 up in such a way dat no double-precision
floating-point operations is used.
.IP "\fB\-m4\-300\-single\-only\fR" 4
.IX Item "-m4-300-single-only"
Generate code fo' \s-1SH4\-300\s0 up in such a way dat no double-precision
floating-point operations is used.
.IP "\fB\-m4\-340\fR" 4
.IX Item "-m4-340"
Generate code fo' \s-1SH4\-340 \s0(no \s-1MMU,\s0 no \s-1FPU\s0).
.IP "\fB\-m4\-500\fR" 4
.IX Item "-m4-500"
Generate code fo' \s-1SH4\-500 \s0(no \s-1FPU\s0).  Passes \fB\-isa=sh4\-nofpu\fR ta the
assembler.
.IP "\fB\-m4a\-nofpu\fR" 4
.IX Item "-m4a-nofpu"
Generate code fo' tha SH4al\-dsp, or fo' a SH4a up in such a way dat the
floating-point unit aint used.
.IP "\fB\-m4a\-single\-only\fR" 4
.IX Item "-m4a-single-only"
Generate code fo' tha SH4a, up in such a way dat no double-precision
floating-point operations is used.
.IP "\fB\-m4a\-single\fR" 4
.IX Item "-m4a-single"
Generate code fo' tha SH4a assumin tha floating-point unit is in
single-precision mode by default.
.IP "\fB\-m4a\fR" 4
.IX Item "-m4a"
Generate code fo' tha SH4a.
.IP "\fB\-m4al\fR" 4
.IX Item "-m4al"
Same as \fB\-m4a\-nofpu\fR, except dat it implicitly passes
\&\fB\-dsp\fR ta tha assembla n' shit.  \s-1GCC\s0 don't generate any \s-1DSP\s0
instructions all up in tha moment.
.IP "\fB\-m5\-32media\fR" 4
.IX Item "-m5-32media"
Generate 32\-bit code fo' SHmedia.
.IP "\fB\-m5\-32media\-nofpu\fR" 4
.IX Item "-m5-32media-nofpu"
Generate 32\-bit code fo' SHmedia up in such a way dat the
floating-point unit aint used.
.IP "\fB\-m5\-64media\fR" 4
.IX Item "-m5-64media"
Generate 64\-bit code fo' SHmedia.
.IP "\fB\-m5\-64media\-nofpu\fR" 4
.IX Item "-m5-64media-nofpu"
Generate 64\-bit code fo' SHmedia up in such a way dat the
floating-point unit aint used.
.IP "\fB\-m5\-compact\fR" 4
.IX Item "-m5-compact"
Generate code fo' SHcompact.
.IP "\fB\-m5\-compact\-nofpu\fR" 4
.IX Item "-m5-compact-nofpu"
Generate code fo' SHcompact up in such a way dat the
floating-point unit aint used.
.IP "\fB\-mb\fR" 4
.IX Item "-mb"
Compile code fo' tha processor up in big-endian mode.
.IP "\fB\-ml\fR" 4
.IX Item "-ml"
Compile code fo' tha processor up in lil-endian mode.
.IP "\fB\-mdalign\fR" 4
.IX Item "-mdalign"
Align doublez at 64\-bit boundaries. Put ya muthafuckin choppers up if ya feel dis!  Note dat dis chizzlez tha calling
conventions, n' thus some functions from tha standard C library do
not work unless you recompile it first wit \fB\-mdalign\fR.
.IP "\fB\-mrelax\fR" 4
.IX Item "-mrelax"
Shorten some address references at link time, when possible; uses the
linker option \fB\-relax\fR.
.IP "\fB\-mbigtable\fR" 4
.IX Item "-mbigtable"
Use 32\-bit offsets up in \f(CW\*(C`switch\*(C'\fR tables.  Da default is ta use
16\-bit offsets.
.IP "\fB\-mbitops\fR" 4
.IX Item "-mbitops"
Enable tha use of bit manipulation instructions on \s-1SH2A.\s0
.IP "\fB\-mfmovd\fR" 4
.IX Item "-mfmovd"
Enable tha use of tha instruction \f(CW\*(C`fmovd\*(C'\fR.  Peep \fB\-mdalign\fR for
alignment constraints.
.IP "\fB\-mrenesas\fR" 4
.IX Item "-mrenesas"
Comply wit tha callin conventions defined by Renesas.
.IP "\fB\-mno\-renesas\fR" 4
.IX Item "-mno-renesas"
Comply wit tha callin conventions defined fo' \s-1GCC\s0 before tha Renesas
conventions was available.  This option is tha default fo' all
targetz of tha \s-1SH\s0 toolchain.
.IP "\fB\-mnomacsave\fR" 4
.IX Item "-mnomacsave"
Mark tha \f(CW\*(C`MAC\*(C'\fR regista as call-clobbered, even if
\&\fB\-mrenesas\fR is given.
.IP "\fB\-mieee\fR" 4
.IX Item "-mieee"
.PD 0
.IP "\fB\-mno\-ieee\fR" 4
.IX Item "-mno-ieee"
.PD
Control tha \s-1IEEE\s0 compliizzle of floating-point comparisons, which affects the
handlin of cases where tha result of a cold-ass lil comparison is unordered. Y'all KNOW dat shit, muthafucka!  By default
\&\fB\-mieee\fR is implicitly enabled. Y'all KNOW dat shit, muthafucka!  If \fB\-ffinite\-math\-only\fR is
enabled \fB\-mno\-ieee\fR is implicitly set, which thangs up in dis biatch up in faster
floating-point pimped outer-equal n' less-equal comparisons.  Da implcit settings
can be overridden by specifyin either \fB\-mieee\fR or \fB\-mno\-ieee\fR.
.IP "\fB\-minline\-ic_invalidate\fR" 4
.IX Item "-minline-ic_invalidate"
Inline code ta invalidate instruction cache entries afta settin up
nested function trampolines.
This option has no effect if \fB\-musermode\fR is up in effect n' tha selected
code generation option (e.g. \fB\-m4\fR) do not allow tha use of tha \f(CW\*(C`icbi\*(C'\fR
instruction.
If tha selected code generation option do not allow tha use of tha \f(CW\*(C`icbi\*(C'\fR
instruction, n' \fB\-musermode\fR aint up in effect, tha inlined code
manipulates tha instruction cache address array directly wit a associative
write.  This not only requires privileged mode at run time yo, but it also
fails if tha cache line had been mapped via tha \s-1TLB\s0 n' has become unmapped.
.IP "\fB\-misize\fR" 4
.IX Item "-misize"
Dump instruction size n' location up in tha assembly code.
.IP "\fB\-mpadstruct\fR" 4
.IX Item "-mpadstruct"
This option is deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  It padz structures ta multiple of 4 bytes,
which is incompatible wit tha \s-1SH ABI.\s0
.IP "\fB\-matomic\-model=\fR\fImodel\fR" 4
.IX Item "-matomic-model=model"
Sets tha model of atomic operations n' additionizzle parametas as a cold-ass lil comma
separated list.  For details on tha atomic built-in functions see
\&\fB_\|_atomic Builtins\fR.  Da followin models n' parametas is supported:
.RS 4
.IP "\fBnone\fR" 4
.IX Item "none"
Disable compila generated atomic sequences n' emit library calls fo' atomic
operations.  This is tha default if tha target aint \f(CW\*(C`sh*\-*\-linux*\*(C'\fR.
.IP "\fBsoft-gusa\fR" 4
.IX Item "soft-gusa"
Generate GNU/Linux compatible gUSA software atomic sequences fo' tha atomic
built-in functions.  Da generated atomic sequences require additionizzle support
from tha interrupt/exception handlin code of tha system n' is only suitable
for SH3* n' SH4* single-core systems.  This option is enabled by default when
the target is \f(CW\*(C`sh*\-*\-linux*\*(C'\fR n' SH3* or SH4*.  When tha target is \s-1SH4A,\s0
this option will also partially utilize tha hardware atomic instructions
\&\f(CW\*(C`movli.l\*(C'\fR n' \f(CW\*(C`movco.l\*(C'\fR ta create mo' efficient code, unless
\&\fBstrict\fR is specified.
.IP "\fBsoft-tcb\fR" 4
.IX Item "soft-tcb"
Generate software atomic sequences dat bust a variable up in tha thread control
block.  This be a variation of tha gUSA sequences which can also be used on
SH1* n' SH2* targets, n' you can put dat on yo' toast.  Da generated atomic sequences require additional
support from tha interrupt/exception handlin code of tha system n' is only
suitable fo' single-core systems.  When rockin dis model, tha \fBgbr\-offset=\fR
parameta has ta be specified as well.
.IP "\fBsoft-imask\fR" 4
.IX Item "soft-imask"
Generate software atomic sequences dat temporarily disable interrupts by
settin \f(CW\*(C`SR.IMASK = 1111\*(C'\fR.  This model works only when tha program runs
in privileged mode n' is only suitable fo' single-core systems.  Additional
support from tha interrupt/exception handlin code of tha system is not
required. Y'all KNOW dat shit, muthafucka!  This model is enabled by default when tha target is
\&\f(CW\*(C`sh*\-*\-linux*\*(C'\fR n' SH1* or SH2*.
.IP "\fBhard-llcs\fR" 4
.IX Item "hard-llcs"
Generate hardware atomic sequences rockin tha \f(CW\*(C`movli.l\*(C'\fR n' \f(CW\*(C`movco.l\*(C'\fR
instructions only.  This is only available on \s-1SH4A\s0 n' is suitable for
multi-core systems.  Since tha hardware instructions support only 32 bit atomic
variablez access ta 8 or 16 bit variablez is emulated wit 32 bit accesses.
Code compiled wit dis option will also be compatible wit other software
atomic model interrupt/exception handlin systems if executed on a \s-1SH4A\s0
system.  Additionizzle support from tha interrupt/exception handlin code of the
system aint required fo' dis model.
.IP "\fBgbr\-offset=\fR" 4
.IX Item "gbr-offset="
This parameta specifies tha offset up in bytez of tha variable up in tha thread
control block structure dat should be used by tha generated atomic sequences
when tha \fBsoft-tcb\fR model has been selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For other models this
parameta is ignored. Y'all KNOW dat shit, muthafucka!  Da specified value must be a integer multiple of four
and up in tha range 0\-1020.
.IP "\fBstrict\fR" 4
.IX Item "strict"
This parameta prevents mixed usage of multiple atomic models, even though they
would be compatible, n' will make tha compila generate atomic sequencez of the
specified model only.
.RE
.RS 4
.RE
.IP "\fB\-mtas\fR" 4
.IX Item "-mtas"
Generate tha \f(CW\*(C`tas.b\*(C'\fR opcode fo' \f(CW\*(C`_\|_atomic_test_and_set\*(C'\fR.
Notice dat dependin on tha particular hardware n' software configuration
this can degrade overall performizzle cuz of tha operand cache line flushes
that is implied by tha \f(CW\*(C`tas.b\*(C'\fR instruction. I aint talkin' bout chicken n' gravy biatch.  On multi-core \s-1SH4A\s0
processors tha \f(CW\*(C`tas.b\*(C'\fR instruction must be used wit caution since it
can result up in data corruption fo' certain cache configurations.
.IP "\fB\-mprefergot\fR" 4
.IX Item "-mprefergot"
When generatin position-independent code, emit function calls using
the Global Offset Table instead of tha Procedure Linkage Table.
.IP "\fB\-musermode\fR" 4
.IX Item "-musermode"
.PD 0
.IP "\fB\-mno\-usermode\fR" 4
.IX Item "-mno-usermode"
.PD
Don't allow (allow) tha compila generatin privileged mode code.  Specifying
\&\fB\-musermode\fR also implies \fB\-mno\-inline\-ic_invalidate\fR if the
inlined code would not work up in user mode.  \fB\-musermode\fR is tha default
when tha target is \f(CW\*(C`sh*\-*\-linux*\*(C'\fR.  If tha target is SH1* or SH2*
\&\fB\-musermode\fR has no effect, since there is no user mode.
.IP "\fB\-multcost=\fR\fInumber\fR" 4
.IX Item "-multcost=number"
Set tha cost ta assume fo' a multiply insn.
.IP "\fB\-mdiv=\fR\fIstrategy\fR" 4
.IX Item "-mdiv=strategy"
Set tha division game ta be used fo' integer division operations.
For SHmedia \fIstrategy\fR can be one of:
.RS 4
.IP "\fBfp\fR" 4
.IX Item "fp"
Performs tha operation up in floatin point.  This has a straight-up high latency,
but needz only all dem instructions, so it might be a phat chizzle if
your code has enough easily-exploitable \s-1ILP\s0 ta allow tha compila to
schedule tha floating-point instructions together wit other instructions.
Division by zero causes a gangbangin' floating-point exception.
.IP "\fBinv\fR" 4
.IX Item "inv"
Uses integer operations ta calculate tha inverse of tha divisor,
and then multiplies tha dividend wit tha inverse.  This game allows
\&\s-1CSE\s0 n' hoistin of tha inverse calculation. I aint talkin' bout chicken n' gravy biatch.  Division by zero calculates
an unspecified result yo, but do not trap.
.IP "\fBinv:minlat\fR" 4
.IX Item "inv:minlat"
A variant of \fBinv\fR where, if no \s-1CSE\s0 or hoistin opportunities
have been found, or if tha entire operation has been hoisted ta tha same
place, tha last stagez of tha inverse calculation is intertwined wit the
final multiply ta reduce tha overall latency, all up in tha expense of rockin a gangbangin' few
more instructions, n' thus offerin fewer schedulin opportunitizzles with
other code.
.IP "\fBcall\fR" 4
.IX Item "call"
Calls a library function dat probably implements tha \fBinv:minlat\fR
strategy.
This gives high code densitizzle fo' \f(CW\*(C`m5\-*media\-nofpu\*(C'\fR compilations.
.IP "\fBcall2\fR" 4
.IX Item "call2"
Uses a gangbangin' finger-lickin' different entry point of tha same library function, where it
assumes dat a pointa ta a lookup table has already been set up, which
exposes tha pointa load ta \s-1CSE\s0 n' code hoistin optimizations.
.IP "\fBinv:call\fR" 4
.IX Item "inv:call"
.PD 0
.IP "\fBinv:call2\fR" 4
.IX Item "inv:call2"
.IP "\fBinv:fp\fR" 4
.IX Item "inv:fp"
.PD
Use tha \fBinv\fR algorithm fo' initial
code generation yo, but if tha code stays unoptimized, revert ta tha \fBcall\fR,
\&\fBcall2\fR, or \fBfp\fR strategies, respectively.  Note dat the
potentially-trappin side effect of division by zero is carried by a
separate instruction, so it is possible dat all tha integer instructions
are hoisted up yo, but tha marker fo' tha side effect stays where it is.
A recombination ta floating-point operations or a cold-ass lil call aint possible
in dat case.
.IP "\fBinv20u\fR" 4
.IX Item "inv20u"
.PD 0
.IP "\fBinv20l\fR" 4
.IX Item "inv20l"
.PD
Variantz of tha \fBinv:minlat\fR game.  In tha case
that tha inverse calculation aint separated from tha multiply, they speed
up division where tha dividend fits tha fuck into 20 bits (plus sign where applicable)
by insertin a test ta skip a fuckin shitload of operations up in dis case; dis test
slows down tha case of larger dividends.  \fBinv20u\fR assumes tha case of a such
a lil' small-ass dividend ta be unlikely, n' \fBinv20l\fR assumes it ta be likely.
.RE
.RS 4
.Sp
For targets other than SHmedia \fIstrategy\fR can be one of:
.IP "\fBcall\-div1\fR" 4
.IX Item "call-div1"
Calls a library function dat uses tha single-step division instruction
\&\f(CW\*(C`div1\*(C'\fR ta big-ass up tha operation. I aint talkin' bout chicken n' gravy biatch.  Division by zero calculates an
unspecified result n' do not trap.  This is tha default except fo' \s-1SH4,
SH2A\s0 n' SHcompact.
.IP "\fBcall-fp\fR" 4
.IX Item "call-fp"
Calls a library function dat performs tha operation up in double precision
floatin point.  Division by zero causes a gangbangin' floating-point exception. I aint talkin' bout chicken n' gravy biatch.  This is
the default fo' SHcompact wit \s-1FPU. \s0 Specifyin dis fo' targets dat do not
have a thugged-out double precision \s-1FPU\s0 will default ta \f(CW\*(C`call\-div1\*(C'\fR.
.IP "\fBcall-table\fR" 4
.IX Item "call-table"
Calls a library function dat uses a lookup table fo' lil' small-ass divisors and
the \f(CW\*(C`div1\*(C'\fR instruction wit case distinction fo' larger divisors.  Division
by zero calculates a unspecified result n' do not trap.  This is tha default
for \s-1SH4. \s0 Specifyin dis fo' targets dat aint gots dynamic shift
instructions will default ta \f(CW\*(C`call\-div1\*(C'\fR.
.RE
.RS 4
.Sp
When a gangbangin' finger-lickin' division game has not been specified tha default game will be
selected based on tha current target.  For \s-1SH2A\s0 tha default game is to
use tha \f(CW\*(C`divs\*(C'\fR n' \f(CW\*(C`divu\*(C'\fR instructions instead of library function
calls.
.RE
.IP "\fB\-maccumulate\-outgoing\-args\fR" 4
.IX Item "-maccumulate-outgoing-args"
Reserve space once fo' outgoin arguments up in tha function prologue rather
than round each call.  Generally beneficial fo' performizzle n' size.  Also
needed fo' unwindin ta avoid changin tha stack frame round conditionizzle code.
.IP "\fB\-mdivsi3_libfunc=\fR\fIname\fR" 4
.IX Item "-mdivsi3_libfunc=name"
Set tha name of tha library function used fo' 32\-bit signed division to
\&\fIname\fR.
This only affects tha name used up in tha \fBcall\fR n' \fBinv:call\fR
division strategies, n' tha compila still expects tha same
setz of input/output/clobbered registas as if dis option was not present.
.IP "\fB\-mfixed\-range=\fR\fIregister-range\fR" 4
.IX Item "-mfixed-range=register-range"
Generate code treatin tha given regista range as fixed registers.
A fixed regista is one dat tha regista allocator can not use.  This is
useful when compilin kernel code.  A regista range is specified as
two registas separated by a thugged-out dash.  Multiple regista ranges can be
specified separated by a cold-ass lil comma.
.IP "\fB\-mindexed\-addressing\fR" 4
.IX Item "-mindexed-addressing"
Enable tha use of tha indexed addressin mode fo' SHmedia32/SHcompact.
This is only safe if tha hardware and/or \s-1OS\s0 implement 32\-bit wrap-around
semantics fo' tha indexed addressin mode.  Da architecture allows the
implementation of processors wit 64\-bit \s-1MMU,\s0 which tha \s-1OS\s0 could use to
get 32\-bit addressin yo, but since no current hardware implementation supports
this or any other way ta make tha indexed addressin mode safe ta use in
the 32\-bit \s-1ABI,\s0 tha default is \fB\-mno\-indexed\-addressing\fR.
.IP "\fB\-mgettrcost=\fR\fInumber\fR" 4
.IX Item "-mgettrcost=number"
Set tha cost assumed fo' tha \f(CW\*(C`gettr\*(C'\fR instruction ta \fInumber\fR.
Da default is 2 if \fB\-mpt\-fixed\fR is up in effect, 100 otherwise.
.IP "\fB\-mpt\-fixed\fR" 4
.IX Item "-mpt-fixed"
Assume \f(CW\*(C`pt*\*(C'\fR instructions won't trap.  This generally generates
better-scheduled code yo, but is unsafe on current hardware.
Da current architecture
definizzle say dat \f(CW\*(C`ptabs\*(C'\fR n' \f(CW\*(C`ptrel\*(C'\fR trap when tha target 
anded wit 3 is 3.
This has tha unintentionizzle effect of makin it unsafe ta schedule these
instructions before a funky-ass branch, or hoist dem outta a loop.  For example,
\&\f(CW\*(C`_\|_do_global_ctors\*(C'\fR, a part of \fIlibgcc\fR
that runs constructors at program
startup, calls functions up in a list which is delimited by \-1.  With the
\&\fB\-mpt\-fixed\fR option, tha \f(CW\*(C`ptabs\*(C'\fR is done before testin against \-1.
That means dat all tha constructors run a lil' bit mo' quickly yo, but when
the loop comes ta tha end of tha list, tha program crashes cuz \f(CW\*(C`ptabs\*(C'\fR
loadz \-1 tha fuck into a target register.
.Sp
Since dis option is unsafe fo' any
hardware implementin tha current architecture justification, tha default
is \fB\-mno\-pt\-fixed\fR.  Unless specified explicitly wit 
\&\fB\-mgettrcost\fR, \fB\-mno\-pt\-fixed\fR also implies \fB\-mgettrcost=100\fR;
this detas regista allocation from rockin target registas fo' storing
ordinary integers.
.IP "\fB\-minvalid\-symbols\fR" 4
.IX Item "-minvalid-symbols"
Assume symbols might be invalid. Y'all KNOW dat shit, muthafucka!  Ordinary function symbols generated by
the compila is always valid ta load with
\&\f(CW\*(C`movi\*(C'\fR/\f(CW\*(C`shori\*(C'\fR/\f(CW\*(C`ptabs\*(C'\fR or
\&\f(CW\*(C`movi\*(C'\fR/\f(CW\*(C`shori\*(C'\fR/\f(CW\*(C`ptrel\*(C'\fR,
but wit assembla and/or linker tricks it is possible
to generate symbols dat cause \f(CW\*(C`ptabs\*(C'\fR or \f(CW\*(C`ptrel\*(C'\fR ta trap.
This option is only meaningful when \fB\-mno\-pt\-fixed\fR is up in effect.
It prevents cross-basic-block \s-1CSE,\s0 hoistin n' most scheduling
of symbol loads.  Da default is \fB\-mno\-invalid\-symbols\fR.
.IP "\fB\-mbranch\-cost=\fR\fInum\fR" 4
.IX Item "-mbranch-cost=num"
Assume \fInum\fR ta be tha cost fo' a funky-ass branch instruction. I aint talkin' bout chicken n' gravy biatch.  Higher numbers
make tha compila try ta generate mo' branch-free code if possible.  
If not specified tha value is selected dependin on tha processor type that
is bein compiled for.
.IP "\fB\-mzdcbranch\fR" 4
.IX Item "-mzdcbranch"
.PD 0
.IP "\fB\-mno\-zdcbranch\fR" 4
.IX Item "-mno-zdcbranch"
.PD
Assume (do not assume) dat zero displacement conditionizzle branch instructions
\&\f(CW\*(C`bt\*(C'\fR n' \f(CW\*(C`bf\*(C'\fR is fast.  If \fB\-mzdcbranch\fR is specified, the
compila will try ta prefer zero displacement branch code sequences.  This is
enabled by default when generatin code fo' \s-1SH4\s0 n' \s-1SH4A. \s0 It can be explicitly
disabled by specifyin \fB\-mno\-zdcbranch\fR.
.IP "\fB\-mcbranchdi\fR" 4
.IX Item "-mcbranchdi"
Enable tha \f(CW\*(C`cbranchdi4\*(C'\fR instruction pattern.
.IP "\fB\-mcmpeqdi\fR" 4
.IX Item "-mcmpeqdi"
Emit tha \f(CW\*(C`cmpeqdi_t\*(C'\fR instruction pattern even when \fB\-mcbranchdi\fR
is up in effect.
.IP "\fB\-mfused\-madd\fR" 4
.IX Item "-mfused-madd"
.PD 0
.IP "\fB\-mno\-fused\-madd\fR" 4
.IX Item "-mno-fused-madd"
.PD
Generate code dat uses (does not use) tha floating-point multiply and
accumulate instructions.  These instructions is generated by default
if hardware floatin point is used. Y'all KNOW dat shit, muthafucka!  Da machine-dependent
\&\fB\-mfused\-madd\fR option is now mapped ta tha machine-independent
\&\fB\-ffp\-contract=fast\fR option, n' \fB\-mno\-fused\-madd\fR is
mapped ta \fB\-ffp\-contract=off\fR.
.IP "\fB\-mfsca\fR" 4
.IX Item "-mfsca"
.PD 0
.IP "\fB\-mno\-fsca\fR" 4
.IX Item "-mno-fsca"
.PD
Allow or disallow tha compila ta emit tha \f(CW\*(C`fsca\*(C'\fR instruction fo' sine
and cosine approximations.  Da option \f(CW\*(C`\-mfsca\*(C'\fR must be used in
combination wit \f(CW\*(C`\-funsafe\-math\-optimizations\*(C'\fR.  It be enabled by default
when generatin code fo' \s-1SH4A. \s0 Usin \f(CW\*(C`\-mno\-fsca\*(C'\fR disablez sine n' cosine
approximations even if \f(CW\*(C`\-funsafe\-math\-optimizations\*(C'\fR is up in effect.
.IP "\fB\-mfsrra\fR" 4
.IX Item "-mfsrra"
.PD 0
.IP "\fB\-mno\-fsrra\fR" 4
.IX Item "-mno-fsrra"
.PD
Allow or disallow tha compila ta emit tha \f(CW\*(C`fsrra\*(C'\fR instruction for
reciprocal square root approximations.  Da option \f(CW\*(C`\-mfsrra\*(C'\fR must be used
in combination wit \f(CW\*(C`\-funsafe\-math\-optimizations\*(C'\fR and
\&\f(CW\*(C`\-ffinite\-math\-only\*(C'\fR.  It be enabled by default when generatin code for
\&\s-1SH4A. \s0 Usin \f(CW\*(C`\-mno\-fsrra\*(C'\fR disablez reciprocal square root approximations
even if \f(CW\*(C`\-funsafe\-math\-optimizations\*(C'\fR n' \f(CW\*(C`\-ffinite\-math\-only\*(C'\fR are
in effect.
.IP "\fB\-mpretend\-cmove\fR" 4
.IX Item "-mpretend-cmove"
Prefer zero-displacement conditionizzle branches fo' conditionizzle move instruction
patterns.  This can result up in fasta code on tha \s-1SH4\s0 processor.
.SS "Solaris 2 Options"
.IX Subsection "Solaris 2 Options"
These \fB\-m\fR options is supported on Solaris 2:
.IP "\fB\-mimpure\-text\fR" 4
.IX Item "-mimpure-text"
\&\fB\-mimpure\-text\fR, used up in addizzle ta \fB\-shared\fR, tells
the compila ta not pass \fB\-z text\fR ta tha linker when linkin a
shared object.  Usin dis option, you can link position-dependent
code tha fuck into a gangbangin' finger-lickin' dirty-ass shared object.
.Sp
\&\fB\-mimpure\-text\fR suppresses tha \*(L"relocations remain against
allocatable but non-writable sections\*(R" linker error message.
But fuck dat shiznit yo, tha word on tha street is dat tha necessary relocations trigger copy-on-write, n' the
shared object aint straight-up shared across processes.  Instead of
usin \fB\-mimpure\-text\fR, you should compile all source code with
\&\fB\-fpic\fR or \fB\-fPIC\fR.
.PP
These switches is supported up in addizzle ta tha above on Solaris 2:
.IP "\fB\-pthreads\fR" 4
.IX Item "-pthreads"
Add support fo' multithreadin rockin tha \s-1POSIX\s0 threadz library.  This
option sets flags fo' both tha preprocessor n' linker n' shit.  This option do
not affect tha thread safety of object code produced  by tha compila or
that of libraries supplied wit dat shit.
.IP "\fB\-pthread\fR" 4
.IX Item "-pthread"
This be a synonym fo' \fB\-pthreads\fR.
.SS "\s-1SPARC\s0 Options"
.IX Subsection "SPARC Options"
These \fB\-m\fR options is supported on tha \s-1SPARC:\s0
.IP "\fB\-mno\-app\-regs\fR" 4
.IX Item "-mno-app-regs"
.PD 0
.IP "\fB\-mapp\-regs\fR" 4
.IX Item "-mapp-regs"
.PD
Specify \fB\-mapp\-regs\fR ta generate output rockin tha global registers
2 all up in 4, which tha \s-1SPARC SVR4 ABI\s0 reserves fo' applications.  Like the
global regista 1, each global regista 2 all up in 4 is then treated as an
allocable regista dat is clobbered by function calls.  This is tha default.
.Sp
To be straight-up \s-1SVR4\s0 ABI-compliant all up in tha cost of some performizzle loss,
specify \fB\-mno\-app\-regs\fR.  Yo ass should compile libraries n' system
software wit dis option.
.IP "\fB\-mflat\fR" 4
.IX Item "-mflat"
.PD 0
.IP "\fB\-mno\-flat\fR" 4
.IX Item "-mno-flat"
.PD
With \fB\-mflat\fR, tha compila do not generate save/restore instructions
and uses a \*(L"flat\*(R" or single regista window model.  This model is compatible
with tha regular regista window model.  Da local registas n' tha input
registas (0\-\-5) is still treated as \*(L"call-saved\*(R" registas n' are
saved on tha stack as needed.
.Sp
With \fB\-mno\-flat\fR (the default), tha compila generates save/restore
instructions (except fo' leaf functions).  This is tha aiiight operatin mode.
.IP "\fB\-mfpu\fR" 4
.IX Item "-mfpu"
.PD 0
.IP "\fB\-mhard\-float\fR" 4
.IX Item "-mhard-float"
.PD
Generate output containin floating-point instructions.  This is the
default.
.IP "\fB\-mno\-fpu\fR" 4
.IX Item "-mno-fpu"
.PD 0
.IP "\fB\-msoft\-float\fR" 4
.IX Item "-msoft-float"
.PD
Generate output containin library calls fo' floatin point.
\&\fBWarning:\fR tha requisite libraries is not available fo' all \s-1SPARC\s0
targets, n' you can put dat on yo' toast.  Normally tha facilitizzlez of tha machinez usual C compila are
used yo, but dis cannot be done directly up in cross-compilation. I aint talkin' bout chicken n' gravy biatch.  Yo ass must make
your own arrangements ta provide suitable library functions for
cross-compilation. I aint talkin' bout chicken n' gravy biatch.  Da embedded targets \fBsparc\-*\-aout\fR and
\&\fBsparclite\-*\-*\fR do provide software floating-point support.
.Sp
\&\fB\-msoft\-float\fR chizzlez tha callin convention up in tha output file;
therefore, it is only useful if you compile \fIall\fR of a program with
this option. I aint talkin' bout chicken n' gravy biatch.  In particular, you need ta compile \fIlibgcc.a\fR, the
library dat comes wit \s-1GCC,\s0 wit \fB\-msoft\-float\fR up in order for
this ta work.
.IP "\fB\-mhard\-quad\-float\fR" 4
.IX Item "-mhard-quad-float"
Generate output containin quad-word (long double) floating-point
instructions.
.IP "\fB\-msoft\-quad\-float\fR" 4
.IX Item "-msoft-quad-float"
Generate output containin library calls fo' quad-word (long double)
floating-point instructions.  Da functions called is dem specified
in tha \s-1SPARC ABI. \s0 This is tha default.
.Sp
Az of dis writing, there be no \s-1SPARC\s0 implementations dat have hardware
support fo' tha quad-word floating-point instructions.  They all invoke
a trap handlez fo' one of these instructions, n' then tha trap handlez
emulates tha effect of tha instruction. I aint talkin' bout chicken n' gravy biatch.  Because of tha trap handlez overhead,
this is much slower than callin tha \s-1ABI\s0 library routines.  Thus the
\&\fB\-msoft\-quad\-float\fR option is tha default.
.IP "\fB\-mno\-unaligned\-doubles\fR" 4
.IX Item "-mno-unaligned-doubles"
.PD 0
.IP "\fB\-munaligned\-doubles\fR" 4
.IX Item "-munaligned-doubles"
.PD
Assume dat doublez have 8\-byte alignment.  This is tha default.
.Sp
With \fB\-munaligned\-doubles\fR, \s-1GCC\s0 assumes dat doublez have 8\-byte
alignment only if they is contained up in another type, or if they have an
absolute address.  Otherwise, it assumes they have 4\-byte alignment.
Specifyin dis option avoidz some rare compatibilitizzle problems wit code
generated by other compilers.  It aint tha default cuz it thangs up in dis biatch
in a performizzle loss, especially fo' floating-point code.
.IP "\fB\-muser\-mode\fR" 4
.IX Item "-muser-mode"
.PD 0
.IP "\fB\-mno\-user\-mode\fR" 4
.IX Item "-mno-user-mode"
.PD
Do not generate code dat can only run up in supervisor mode.  This is relevant
only fo' tha \f(CW\*(C`casa\*(C'\fR instruction emitted fo' tha \s-1LEON3\s0 processor. Shiiit, dis aint no joke.  The
default is \fB\-mno\-user\-mode\fR.
.IP "\fB\-mno\-faster\-structs\fR" 4
.IX Item "-mno-faster-structs"
.PD 0
.IP "\fB\-mfaster\-structs\fR" 4
.IX Item "-mfaster-structs"
.PD
With \fB\-mfaster\-structs\fR, tha compila assumes dat structures
should have 8\-byte alignment.  This enablez tha use of pairs of
\&\f(CW\*(C`ldd\*(C'\fR n' \f(CW\*(C`std\*(C'\fR instructions fo' copies up in structure
assignment, up in place of twice as nuff \f(CW\*(C`ld\*(C'\fR n' \f(CW\*(C`st\*(C'\fR pairs.
But fuck dat shiznit yo, tha word on tha street is dat tha use of dis chizzled alignment directly violates tha \s-1SPARC
ABI. \s0 Thus, itz intended only fo' use on targets where tha pimper
acknowledges dat they resultin code aint directly up in line with
the rulez of tha \s-1ABI.\s0
.IP "\fB\-mcpu=\fR\fIcpu_type\fR" 4
.IX Item "-mcpu=cpu_type"
Set tha instruction set, regista set, n' instruction schedulin parameters
for machine type \fIcpu_type\fR.  Supported joints fo' \fIcpu_type\fR are
\&\fBv7\fR, \fBcypress\fR, \fBv8\fR, \fBsupersparc\fR, \fBhypersparc\fR,
\&\fBleon\fR, \fBleon3\fR, \fBsparclite\fR, \fBf930\fR, \fBf934\fR,
\&\fBsparclite86x\fR, \fBsparclet\fR, \fBtsc701\fR, \fBv9\fR,
\&\fBultrasparc\fR, \fBultrasparc3\fR, \fBniagara\fR, \fBniagara2\fR,
\&\fBniagara3\fR n' \fBniagara4\fR.
.Sp
Natizzle Solaris n' GNU/Linux toolchains also support tha value \fBnative\fR,
which selects tha dopest architecture option fo' tha host processor.
\&\fB\-mcpu=native\fR has no effect if \s-1GCC\s0 do not recognize
the processor.
.Sp
Default instruction schedulin parametas is used fo' joints dat select
an architecture n' not a implementation. I aint talkin' bout chicken n' gravy biatch.  These is \fBv7\fR, \fBv8\fR,
\&\fBsparclite\fR, \fBsparclet\fR, \fBv9\fR.
.Sp
Here be a list of each supported architecture n' they supported
implementations.
.RS 4
.IP "v7" 4
.IX Item "v7"
cypress
.IP "v8" 4
.IX Item "v8"
supersparc, hypersparc, leon, leon3
.IP "sparclite" 4
.IX Item "sparclite"
f930, f934, sparclite86x
.IP "sparclet" 4
.IX Item "sparclet"
tsc701
.IP "v9" 4
.IX Item "v9"
ultrasparc, ultrasparc3, niagara, niagara2, niagara3, niagara4
.RE
.RS 4
.Sp
By default (unless configured otherwise), \s-1GCC\s0 generates code fo' tha V7
variant of tha \s-1SPARC\s0 architecture.  With \fB\-mcpu=cypress\fR, tha compiler
additionally optimizes it fo' tha Cypress \s-1CY7C602\s0 chip, as used up in the
SPARCStation/SPARCServer 3xx series. Put ya muthafuckin choppers up if ya feel dis!  This be also appropriate fo' tha older
SPARCStation 1, 2, \s-1IPX\s0 etc.
.Sp
With \fB\-mcpu=v8\fR, \s-1GCC\s0 generates code fo' tha V8 variant of tha \s-1SPARC\s0
architecture.  Da only difference from V7 code is dat tha compila emits
the integer multiply n' integer divide instructions which exist up in \s-1SPARC\-V8\s0
but not up in \s-1SPARC\-V7. \s0 With \fB\-mcpu=supersparc\fR, tha compila additionally
optimizes it fo' tha SuperSPARC chip, as used up in tha SPARCStation 10, 1000 and
2000 series.
.Sp
With \fB\-mcpu=sparclite\fR, \s-1GCC\s0 generates code fo' tha SPARClite variant of
the \s-1SPARC\s0 architecture.  This addz tha integer multiply, integer divide step
and scan (\f(CW\*(C`ffs\*(C'\fR) instructions which exist up in SPARClite but not up in \s-1SPARC\-V7.\s0
With \fB\-mcpu=f930\fR, tha compila additionally optimizes it fo' the
Fujitsu \s-1MB86930\s0 chip, which is tha original gangsta SPARClite, wit no \s-1FPU. \s0 With
\&\fB\-mcpu=f934\fR, tha compila additionally optimizes it fo' tha Fujitsu
\&\s-1MB86934\s0 chip, which is tha mo' recent SPARClite wit \s-1FPU.\s0
.Sp
With \fB\-mcpu=sparclet\fR, \s-1GCC\s0 generates code fo' tha SPARClet variant of
the \s-1SPARC\s0 architecture.  This addz tha integer multiply, multiply/accumulate,
integer divide step n' scan (\f(CW\*(C`ffs\*(C'\fR) instructions which exist up in SPARClet
but not up in \s-1SPARC\-V7. \s0 With \fB\-mcpu=tsc701\fR, tha compila additionally
optimizes it fo' tha \s-1TEMIC\s0 SPARClet chip.
.Sp
With \fB\-mcpu=v9\fR, \s-1GCC\s0 generates code fo' tha V9 variant of tha \s-1SPARC\s0
architecture.  This addz 64\-bit integer n' floating-point move instructions,
3 additionizzle floating-point condizzle code registas n' conditionizzle move
instructions.  With \fB\-mcpu=ultrasparc\fR, tha compila additionally
optimizes it fo' tha Sun UltraSPARC I/II/IIi chips.  With
\&\fB\-mcpu=ultrasparc3\fR, tha compila additionally optimizes it fo' the
Sun UltraSPARC Pt III/III+/IIIi/IIIi+/IV/IV+ chips.  With
\&\fB\-mcpu=niagara\fR, tha compila additionally optimizes it for
Sun UltraSPARC T1 chips.  With \fB\-mcpu=niagara2\fR, tha compiler
additionally optimizes it fo' Sun UltraSPARC T2 chips. With
\&\fB\-mcpu=niagara3\fR, tha compila additionally optimizes it fo' Sun
UltraSPARC T3 chips.  With \fB\-mcpu=niagara4\fR, tha compiler
additionally optimizes it fo' Sun UltraSPARC T4 chips.
.RE
.IP "\fB\-mtune=\fR\fIcpu_type\fR" 4
.IX Item "-mtune=cpu_type"
Set tha instruction schedulin parametas fo' machine type
\&\fIcpu_type\fR yo, but do not set tha instruction set or regista set dat the
option \fB\-mcpu=\fR\fIcpu_type\fR do.
.Sp
Da same joints fo' \fB\-mcpu=\fR\fIcpu_type\fR can be used for
\&\fB\-mtune=\fR\fIcpu_type\fR yo, but tha only useful joints is them
that select a particular \s-1CPU\s0 implementation. I aint talkin' bout chicken n' gravy biatch.  Those is \fBcypress\fR,
\&\fBsupersparc\fR, \fBhypersparc\fR, \fBleon\fR, \fBleon3\fR, \fBf930\fR,
\&\fBf934\fR, \fBsparclite86x\fR, \fBtsc701\fR, \fBultrasparc\fR,
\&\fBultrasparc3\fR, \fBniagara\fR, \fBniagara2\fR, \fBniagara3\fR and
\&\fBniagara4\fR.  With natizzle Solaris n' GNU/Linux toolchains, \fBnative\fR
can also be used.
.IP "\fB\-mv8plus\fR" 4
.IX Item "-mv8plus"
.PD 0
.IP "\fB\-mno\-v8plus\fR" 4
.IX Item "-mno-v8plus"
.PD
With \fB\-mv8plus\fR, \s-1GCC\s0 generates code fo' tha \s-1SPARC\-V8+ ABI. \s0 The
difference from tha V8 \s-1ABI\s0 is dat tha global n' up registas are
considered 64 bits wide.  This is enabled by default on Solaris up in 32\-bit
mode fo' all \s-1SPARC\-V9\s0 processors.
.IP "\fB\-mvis\fR" 4
.IX Item "-mvis"
.PD 0
.IP "\fB\-mno\-vis\fR" 4
.IX Item "-mno-vis"
.PD
With \fB\-mvis\fR, \s-1GCC\s0 generates code dat takes advantage of tha UltraSPARC
Visual Instruction Set extensions.  Da default is \fB\-mno\-vis\fR.
.IP "\fB\-mvis2\fR" 4
.IX Item "-mvis2"
.PD 0
.IP "\fB\-mno\-vis2\fR" 4
.IX Item "-mno-vis2"
.PD
With \fB\-mvis2\fR, \s-1GCC\s0 generates code dat takes advantage of
version 2.0 of tha UltraSPARC Visual Instruction Set extensions.  The
default is \fB\-mvis2\fR when targetin a cold-ass lil cpu dat supports such
instructions, like fuckin UltraSPARC-III n' later n' shit.  Settin \fB\-mvis2\fR
also sets \fB\-mvis\fR.
.IP "\fB\-mvis3\fR" 4
.IX Item "-mvis3"
.PD 0
.IP "\fB\-mno\-vis3\fR" 4
.IX Item "-mno-vis3"
.PD
With \fB\-mvis3\fR, \s-1GCC\s0 generates code dat takes advantage of
version 3.0 of tha UltraSPARC Visual Instruction Set extensions.  The
default is \fB\-mvis3\fR when targetin a cold-ass lil cpu dat supports such
instructions, like fuckin niagara\-3 n' later n' shit.  Settin \fB\-mvis3\fR
also sets \fB\-mvis2\fR n' \fB\-mvis\fR.
.IP "\fB\-mcbcond\fR" 4
.IX Item "-mcbcond"
.PD 0
.IP "\fB\-mno\-cbcond\fR" 4
.IX Item "-mno-cbcond"
.PD
With \fB\-mcbcond\fR, \s-1GCC\s0 generates code dat takes advantage of
compare-and-branch instructions, as defined up in tha Sparc Architecture 2011.
Da default is \fB\-mcbcond\fR when targetin a cold-ass lil cpu dat supports such
instructions, like fuckin niagara\-4 n' later.
.IP "\fB\-mpopc\fR" 4
.IX Item "-mpopc"
.PD 0
.IP "\fB\-mno\-popc\fR" 4
.IX Item "-mno-popc"
.PD
With \fB\-mpopc\fR, \s-1GCC\s0 generates code dat takes advantage of tha UltraSPARC
population count instruction. I aint talkin' bout chicken n' gravy biatch.  Da default is \fB\-mpopc\fR
when targetin a cold-ass lil cpu dat supports such instructions, like fuckin Niagara\-2 and
later.
.IP "\fB\-mfmaf\fR" 4
.IX Item "-mfmaf"
.PD 0
.IP "\fB\-mno\-fmaf\fR" 4
.IX Item "-mno-fmaf"
.PD
With \fB\-mfmaf\fR, \s-1GCC\s0 generates code dat takes advantage of tha UltraSPARC
Fused Multiply-Add Floating-point extensions.  Da default is \fB\-mfmaf\fR
when targetin a cold-ass lil cpu dat supports such instructions, like fuckin Niagara\-3 and
later.
.IP "\fB\-mfix\-at697f\fR" 4
.IX Item "-mfix-at697f"
Enable tha documented workaround fo' tha single erratum of tha Atmel \s-1AT697F\s0
processor (which correspondz ta erratum #13 of tha \s-1AT697E\s0 processor).
.IP "\fB\-mfix\-ut699\fR" 4
.IX Item "-mfix-ut699"
Enable tha documented workaroundz fo' tha floating-point errata n' tha data
cache nullify errata of tha \s-1UT699\s0 processor.
.PP
These \fB\-m\fR options is supported up in addizzle ta tha above
on \s-1SPARC\-V9\s0 processors up in 64\-bit environments:
.IP "\fB\-m32\fR" 4
.IX Item "-m32"
.PD 0
.IP "\fB\-m64\fR" 4
.IX Item "-m64"
.PD
Generate code fo' a 32\-bit or 64\-bit environment.
Da 32\-bit environment sets int, long n' pointa ta 32 bits.
Da 64\-bit environment sets int ta 32 bits n' long n' pointer
to 64 bits.
.IP "\fB\-mcmodel=\fR\fIwhich\fR" 4
.IX Item "-mcmodel=which"
Set tha code model ta one of
.RS 4
.IP "\fBmedlow\fR" 4
.IX Item "medlow"
Da Medium/Low code model: 64\-bit addresses, programs
must be linked up in tha low 32 bitz of memory.  Programs can be statically
or dynamically linked.
.IP "\fBmedmid\fR" 4
.IX Item "medmid"
Da Medium/Middle code model: 64\-bit addresses, programs
must be linked up in tha low 44 bitz of memory, tha text n' data segments must
be less than 2GB up in size n' tha data segment must be located within 2GB of
the text segment.
.IP "\fBmedany\fR" 4
.IX Item "medany"
Da Medium/Anywhere code model: 64\-bit addresses, programs
may be linked anywhere up in memory, tha text n' data segments must be less
than 2GB up in size n' tha data segment must be located within 2GB of the
text segment.
.IP "\fBembmedany\fR" 4
.IX Item "embmedany"
Da Medium/Anywhere code model fo' embedded systems:
64\-bit addresses, tha text n' data segments must be less than 2GB in
size, both startin anywhere up in memory (determined at link time).  The
global regista \f(CW%g4\fR points ta tha base of tha data segment.  Programs
are statically linked n' \s-1PIC\s0 aint supported.
.RE
.RS 4
.RE
.IP "\fB\-mmemory\-model=\fR\fImem-model\fR" 4
.IX Item "-mmemory-model=mem-model"
Set tha memory model up in force on tha processor ta one of
.RS 4
.IP "\fBdefault\fR" 4
.IX Item "default"
Da default memory model fo' tha processor n' operatin system.
.IP "\fBrmo\fR" 4
.IX Item "rmo"
Relaxed Memory Order
.IP "\fBpso\fR" 4
.IX Item "pso"
Partial Store Order
.IP "\fBtso\fR" 4
.IX Item "tso"
Total Store Order
.IP "\fBsc\fR" 4
.IX Item "sc"
Sequential Consistency
.RE
.RS 4
.Sp
These memory models is formally defined up in Appendix D of tha Sparc V9
architecture manual, as set up in tha processorz \f(CW\*(C`PSTATE.MM\*(C'\fR field.
.RE
.IP "\fB\-mstack\-bias\fR" 4
.IX Item "-mstack-bias"
.PD 0
.IP "\fB\-mno\-stack\-bias\fR" 4
.IX Item "-mno-stack-bias"
.PD
With \fB\-mstack\-bias\fR, \s-1GCC\s0 assumes dat tha stack pointer, and
frame pointa if present, is offset by \-2047 which must be added back
when makin stack frame references.  This is tha default up in 64\-bit mode.
Otherwise, assume no such offset is present.
.SS "\s-1SPU\s0 Options"
.IX Subsection "SPU Options"
These \fB\-m\fR options is supported on tha \s-1SPU:\s0
.IP "\fB\-mwarn\-reloc\fR" 4
.IX Item "-mwarn-reloc"
.PD 0
.IP "\fB\-merror\-reloc\fR" 4
.IX Item "-merror-reloc"
.PD
Da loader fo' \s-1SPU\s0 do not handle dynamic relocations.  By default, \s-1GCC\s0
gives a error when it generates code dat requires a thugged-out dynamic
relocation. I aint talkin' bout chicken n' gravy biatch.  \fB\-mno\-error\-reloc\fR disablez tha error,
\&\fB\-mwarn\-reloc\fR generates a warnin instead.
.IP "\fB\-msafe\-dma\fR" 4
.IX Item "-msafe-dma"
.PD 0
.IP "\fB\-munsafe\-dma\fR" 4
.IX Item "-munsafe-dma"
.PD
Instructions dat initiate or test completion of \s-1DMA\s0 must not be
reordered wit respect ta loadz n' storez of tha memory dat is being
accessed.
With \fB\-munsafe\-dma\fR you must use tha \f(CW\*(C`volatile\*(C'\fR keyword ta protect
memory accesses yo, but dat can lead ta inefficient code up in places where the
memory is known ta not chizzle.  Rather than mark tha memory as volatile,
you can use \fB\-msafe\-dma\fR ta tell tha compila ta treat
the \s-1DMA\s0 instructions as potentially affectin all memory.
.IP "\fB\-mbranch\-hints\fR" 4
.IX Item "-mbranch-hints"
By default, \s-1GCC\s0 generates a funky-ass branch hint instruction ta avoid
pipeline stalls fo' always-taken or probably-taken branches.  A hint
is not generated closer than 8 instructions away from its branch.
There is lil reason ta disable them, except fo' debuggin purposes,
or ta cook up a object a lil bit smaller.
.IP "\fB\-msmall\-mem\fR" 4
.IX Item "-msmall-mem"
.PD 0
.IP "\fB\-mlarge\-mem\fR" 4
.IX Item "-mlarge-mem"
.PD
By default, \s-1GCC\s0 generates code assumin dat addresses is never larger
than 18 bits, n' you can put dat on yo' toast.  With \fB\-mlarge\-mem\fR code is generated dat assumes
a full 32\-bit address.
.IP "\fB\-mstdmain\fR" 4
.IX Item "-mstdmain"
By default, \s-1GCC\s0 links against startup code dat assumes tha SPU-style
main function intercourse (which has a unconventionizzle parameta list).
With \fB\-mstdmain\fR, \s-1GCC\s0 links yo' program against startup
code dat assumes a C99\-style intercourse ta \f(CW\*(C`main\*(C'\fR, includin a
local copy of \f(CW\*(C`argv\*(C'\fR strings.
.IP "\fB\-mfixed\-range=\fR\fIregister-range\fR" 4
.IX Item "-mfixed-range=register-range"
Generate code treatin tha given regista range as fixed registers.
A fixed regista is one dat tha regista allocator cannot use.  This is
useful when compilin kernel code.  A regista range is specified as
two registas separated by a thugged-out dash.  Multiple regista ranges can be
specified separated by a cold-ass lil comma.
.IP "\fB\-mea32\fR" 4
.IX Item "-mea32"
.PD 0
.IP "\fB\-mea64\fR" 4
.IX Item "-mea64"
.PD
Compile code assumin dat pointas ta tha \s-1PPU\s0 address space accessed
via tha \f(CW\*(C`_\|_ea\*(C'\fR named address space qualifier is either 32 or 64
bits wide.  Da default is 32 bits, n' you can put dat on yo' toast.  As dis be a ABI-changin option,
all object code up in a executable must be compiled wit tha same setting.
.IP "\fB\-maddress\-space\-conversion\fR" 4
.IX Item "-maddress-space-conversion"
.PD 0
.IP "\fB\-mno\-address\-space\-conversion\fR" 4
.IX Item "-mno-address-space-conversion"
.PD
Allow/disallow treatin tha \f(CW\*(C`_\|_ea\*(C'\fR address space as superset
of tha generic address space.  This enablez explicit type casts
between \f(CW\*(C`_\|_ea\*(C'\fR n' generic pointa as well as implicit
conversionz of generic pointas ta \f(CW\*(C`_\|_ea\*(C'\fR pointers.  The
default is ta allow address space pointa conversions.
.IP "\fB\-mcache\-size=\fR\fIcache-size\fR" 4
.IX Item "-mcache-size=cache-size"
This option controls tha version of libgcc dat tha compila links ta an
executable n' selects a software-managed cache fo' accessin variables
in tha \f(CW\*(C`_\|_ea\*(C'\fR address space wit a particular cache size.  Possible
options fo' \fIcache-size\fR is \fB8\fR, \fB16\fR, \fB32\fR, \fB64\fR
and \fB128\fR.  Da default cache size is 64KB.
.IP "\fB\-matomic\-updates\fR" 4
.IX Item "-matomic-updates"
.PD 0
.IP "\fB\-mno\-atomic\-updates\fR" 4
.IX Item "-mno-atomic-updates"
.PD
This option controls tha version of libgcc dat tha compila links ta an
executable n' selects whether atomic thugged-out shiznit ta tha software-managed
cache of PPU-side variablez is used. Y'all KNOW dat shit, muthafucka!  If you use atomic thugged-out shit, chizzles
to a \s-1PPU\s0 variable from \s-1SPU\s0 code rockin tha \f(CW\*(C`_\|_ea\*(C'\fR named address space
qualifier do not interfere wit chizzlez ta other \s-1PPU\s0 variablez residing
in tha same cache line from \s-1PPU\s0 code.  If you do not use atomic thugged-out shit,
such interference may occur; however, freestylin back cache lines is
more efficient.  Da default behavior is ta use atomic thugged-out shit.
.IP "\fB\-mdual\-nops\fR" 4
.IX Item "-mdual-nops"
.PD 0
.IP "\fB\-mdual\-nops=\fR\fIn\fR" 4
.IX Item "-mdual-nops=n"
.PD
By default, \s-1GCC\s0 bangs nops ta increase dual issue when it expects
it ta increase performance.  \fIn\fR can be a value from 0 ta 10.  A
smalla \fIn\fR bangs fewer nops.  10 is tha default, 0 is the
same as \fB\-mno\-dual\-nops\fR.  Disabled wit \fB\-Os\fR.
.IP "\fB\-mhint\-max\-nops=\fR\fIn\fR" 4
.IX Item "-mhint-max-nops=n"
Maximum number of nops ta bang fo' a funky-ass branch hint.  A branch hint must
be at least 8 instructions away from tha branch it be affecting.  \s-1GCC\s0
inserts up ta \fIn\fR nops ta enforce this, otherwise it do not
generate tha branch hint.
.IP "\fB\-mhint\-max\-distance=\fR\fIn\fR" 4
.IX Item "-mhint-max-distance=n"
Da encodin of tha branch hint instruction limits tha hint ta be within
256 instructionz of tha branch it be affecting.  By default, \s-1GCC\s0 makes
sure it is within 125.
.IP "\fB\-msafe\-hints\fR" 4
.IX Item "-msafe-hints"
Work round a hardware bug dat causes tha \s-1SPU\s0 ta stall indefinitely.
By default, \s-1GCC\s0 bangs tha \f(CW\*(C`hbrp\*(C'\fR instruction ta make sure
this stall won't happen.
.SS "Options fo' System V"
.IX Subsection "Options fo' System V"
These additionizzle options is available on System V Release 4 for
compatibilitizzle wit other compilaz on dem systems:
.IP "\fB\-G\fR" 4
.IX Item "-G"
Smoke a gangbangin' finger-lickin' dirty-ass shared object.
It be recommended dat \fB\-symbolic\fR or \fB\-shared\fR be used instead.
.IP "\fB\-Qy\fR" 4
.IX Item "-Qy"
Identify tha versionz of each tool used by tha compiler, up in a
\&\f(CW\*(C`.ident\*(C'\fR assembla directizzle up in tha output.
.IP "\fB\-Qn\fR" 4
.IX Item "-Qn"
Refrain from addin \f(CW\*(C`.ident\*(C'\fR directives ta tha output file (this is
the default).
.IP "\fB\-YP,\fR\fIdirs\fR" 4
.IX Item "-YP,dirs"
Search tha directories \fIdirs\fR, n' no others, fo' libraries
specified wit \fB\-l\fR.
.IP "\fB\-Ym,\fR\fIdir\fR" 4
.IX Item "-Ym,dir"
Look up in tha directory \fIdir\fR ta find tha M4 preprocessor.
Da assembla uses dis option.
.SS "TILE-Gx Options"
.IX Subsection "TILE-Gx Options"
These \fB\-m\fR options is supported on tha TILE-Gx:
.IP "\fB\-mcmodel=small\fR" 4
.IX Item "-mcmodel=small"
Generate code fo' tha lil' small-ass model.  Da distizzle fo' direct calls is
limited ta 500M up in either direction. I aint talkin' bout chicken n' gravy biatch.  PC-relatizzle addresses is 32
bits, n' you can put dat on yo' toast.  Absolute addresses support tha full address range.
.IP "\fB\-mcmodel=large\fR" 4
.IX Item "-mcmodel=large"
Generate code fo' tha big-ass model.  There is no limitation on call
distance, pc-relatizzle addresses, or absolute addresses.
.IP "\fB\-mcpu=\fR\fIname\fR" 4
.IX Item "-mcpu=name"
Selects tha type of \s-1CPU\s0 ta be targeted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Currently tha only supported
type is \fBtilegx\fR.
.IP "\fB\-m32\fR" 4
.IX Item "-m32"
.PD 0
.IP "\fB\-m64\fR" 4
.IX Item "-m64"
.PD
Generate code fo' a 32\-bit or 64\-bit environment.  Da 32\-bit
environment sets int, long, n' pointa ta 32 bits, n' you can put dat on yo' toast.  Da 64\-bit
environment sets int ta 32 bits n' long n' pointa ta 64 bits.
.SS "TILEPro Options"
.IX Subsection "TILEPro Options"
These \fB\-m\fR options is supported on tha TILEPro:
.IP "\fB\-mcpu=\fR\fIname\fR" 4
.IX Item "-mcpu=name"
Selects tha type of \s-1CPU\s0 ta be targeted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Currently tha only supported
type is \fBtilepro\fR.
.IP "\fB\-m32\fR" 4
.IX Item "-m32"
Generate code fo' a 32\-bit environment, which sets int, long, and
pointa ta 32 bits, n' you can put dat on yo' toast.  This is tha only supported behavior so tha flag
is essentially ignored.
.SS "V850 Options"
.IX Subsection "V850 Options"
These \fB\-m\fR options is defined fo' V850 implementations:
.IP "\fB\-mlong\-calls\fR" 4
.IX Item "-mlong-calls"
.PD 0
.IP "\fB\-mno\-long\-calls\fR" 4
.IX Item "-mno-long-calls"
.PD
Treat all calls as bein far away (near).  If calls is assumed ta be
far away, tha compila always loadz tha functionz address tha fuck into a
register, n' calls indirect all up in tha pointer.
.IP "\fB\-mno\-ep\fR" 4
.IX Item "-mno-ep"
.PD 0
.IP "\fB\-mep\fR" 4
.IX Item "-mep"
.PD
Do not optimize (do optimize) basic blocks dat use tha same index
pointa 4 or mo' times ta copy pointa tha fuck into tha \f(CW\*(C`ep\*(C'\fR register, and
use tha shorta \f(CW\*(C`sld\*(C'\fR n' \f(CW\*(C`sst\*(C'\fR instructions.  Da \fB\-mep\fR
option is on by default if you optimize.
.IP "\fB\-mno\-prolog\-function\fR" 4
.IX Item "-mno-prolog-function"
.PD 0
.IP "\fB\-mprolog\-function\fR" 4
.IX Item "-mprolog-function"
.PD
Do not use (do use) external functions ta save n' restore registers
at tha prologue n' epilogue of a gangbangin' function. I aint talkin' bout chicken n' gravy biatch.  Da external functions
are slower yo, but use less code space if mo' than one function saves
the same number of registers.  Da \fB\-mprolog\-function\fR option
is on by default if you optimize.
.IP "\fB\-mspace\fR" 4
.IX Item "-mspace"
Try ta make tha code as lil' small-ass as possible.  At present, dis just turns
on tha \fB\-mep\fR n' \fB\-mprolog\-function\fR options.
.IP "\fB\-mtda=\fR\fIn\fR" 4
.IX Item "-mtda=n"
Put static or global variablez whose size is \fIn\fR bytes or less into
the tiny data area dat regista \f(CW\*(C`ep\*(C'\fR points to.  Da tiny data
area can hold up ta 256 bytes up in total (128 bytes fo' byte references).
.IP "\fB\-msda=\fR\fIn\fR" 4
.IX Item "-msda=n"
Put static or global variablez whose size is \fIn\fR bytes or less into
the lil' small-ass data area dat regista \f(CW\*(C`gp\*(C'\fR points to.  Da lil' small-ass data
area can hold up ta 64 kilobytes.
.IP "\fB\-mzda=\fR\fIn\fR" 4
.IX Item "-mzda=n"
Put static or global variablez whose size is \fIn\fR bytes or less into
the first 32 kilobytez of memory.
.IP "\fB\-mv850\fR" 4
.IX Item "-mv850"
Specify dat tha target processor is tha V850.
.IP "\fB\-mv850e3v5\fR" 4
.IX Item "-mv850e3v5"
Specify dat tha target processor is tha V850E3V5.  Da preprocessor
constant \fB_\|_v850e3v5_\|_\fR is defined if dis option is used.
.IP "\fB\-mv850e2v4\fR" 4
.IX Item "-mv850e2v4"
Specify dat tha target processor is tha V850E3V5.  This be a alias for
the \fB\-mv850e3v5\fR option.
.IP "\fB\-mv850e2v3\fR" 4
.IX Item "-mv850e2v3"
Specify dat tha target processor is tha V850E2V3.  Da preprocessor
constant \fB_\|_v850e2v3_\|_\fR is defined if dis option is used.
.IP "\fB\-mv850e2\fR" 4
.IX Item "-mv850e2"
Specify dat tha target processor is tha V850E2.  Da preprocessor
constant \fB_\|_v850e2_\|_\fR is defined if dis option is used.
.IP "\fB\-mv850e1\fR" 4
.IX Item "-mv850e1"
Specify dat tha target processor is tha V850E1.  Da preprocessor
constants \fB_\|_v850e1_\|_\fR n' \fB_\|_v850e_\|_\fR is defined if
this option is used.
.IP "\fB\-mv850es\fR" 4
.IX Item "-mv850es"
Specify dat tha target processor is tha V850ES.  This be a alias for
the \fB\-mv850e1\fR option.
.IP "\fB\-mv850e\fR" 4
.IX Item "-mv850e"
Specify dat tha target processor is tha V850E.  Da preprocessor
constant \fB_\|_v850e_\|_\fR is defined if dis option is used.
.Sp
If neither \fB\-mv850\fR nor \fB\-mv850e\fR nor \fB\-mv850e1\fR
nor \fB\-mv850e2\fR nor \fB\-mv850e2v3\fR nor \fB\-mv850e3v5\fR
are defined then a thugged-out default target processor is chosen n' the
relevant \fB_\|_v850*_\|_\fR preprocessor constant is defined.
.Sp
Da preprocessor constants \fB_\|_v850\fR n' \fB_\|_v851_\|_\fR is always
defined, regardless of which processor variant is tha target.
.IP "\fB\-mdisable\-callt\fR" 4
.IX Item "-mdisable-callt"
.PD 0
.IP "\fB\-mno\-disable\-callt\fR" 4
.IX Item "-mno-disable-callt"
.PD
This option suppresses generation of tha \f(CW\*(C`CALLT\*(C'\fR instruction fo' the
v850e, v850e1, v850e2, v850e2v3 n' v850e3v5 flavorz of tha v850
architecture.
.Sp
This option is enabled by default when tha \s-1RH850 ABI\s0 is
in use (see \fB\-mrh850\-abi\fR), n' disabled by default when the
\&\s-1GCC ABI\s0 is up in use.  If \f(CW\*(C`CALLT\*(C'\fR instructions is bein generated
then tha C preprocessor symbol \f(CW\*(C`_\|_V850_CALLT_\|_\*(C'\fR is ghon be defined.
.IP "\fB\-mrelax\fR" 4
.IX Item "-mrelax"
.PD 0
.IP "\fB\-mno\-relax\fR" 4
.IX Item "-mno-relax"
.PD
Pass on (or do not pass on) tha \fB\-mrelax\fR command line option
to tha assembler.
.IP "\fB\-mlong\-jumps\fR" 4
.IX Item "-mlong-jumps"
.PD 0
.IP "\fB\-mno\-long\-jumps\fR" 4
.IX Item "-mno-long-jumps"
.PD
Disable (or re-enable) tha generation of PC-relatizzle jump instructions.
.IP "\fB\-msoft\-float\fR" 4
.IX Item "-msoft-float"
.PD 0
.IP "\fB\-mhard\-float\fR" 4
.IX Item "-mhard-float"
.PD
Disable (or re-enable) tha generation of hardware floatin point
instructions.  This option is only dope when tha target
architecture is \fBV850E2V3\fR or higher n' shit.  If hardware floatin point
instructions is bein generated then tha C preprocessor symbol
\&\f(CW\*(C`_\|_FPU_OK_\|_\*(C'\fR is ghon be defined, otherwise tha symbol
\&\f(CW\*(C`_\|_NO_FPU_\|_\*(C'\fR is ghon be defined.
.IP "\fB\-mloop\fR" 4
.IX Item "-mloop"
Enablez tha use of tha e3v5 \s-1LOOP\s0 instruction. I aint talkin' bout chicken n' gravy biatch.  Da use of this
instruction aint enabled by default when tha e3v5 architecture is
selected cuz its use is still experimental.
.IP "\fB\-mrh850\-abi\fR" 4
.IX Item "-mrh850-abi"
.PD 0
.IP "\fB\-mghs\fR" 4
.IX Item "-mghs"
.PD
Enablez support fo' tha \s-1RH850\s0 version of tha V850 \s-1ABI. \s0 This is the
default.  With dis version of tha \s-1ABI\s0 tha followin rulez apply:
.RS 4
.IP "\(bu" 4
Integer sized structures n' unions is returned via a memory pointer
rather than a register.
.IP "\(bu" 4
Big-Ass structures n' unions (more than 8 bytes up in size) is passed by
value.
.IP "\(bu" 4
Functions is aligned ta 16\-bit boundaries.
.IP "\(bu" 4
Da \fB\-m8byte\-align\fR command line option is supported.
.IP "\(bu" 4
Da \fB\-mdisable\-callt\fR command line option is enabled by
default.  Da \fB\-mno\-disable\-callt\fR command line option is not
supported.
.RE
.RS 4
.Sp
When dis version of tha \s-1ABI\s0 is enabled tha C preprocessor symbol
\&\f(CW\*(C`_\|_V850_RH850_ABI_\|_\*(C'\fR is defined.
.RE
.IP "\fB\-mgcc\-abi\fR" 4
.IX Item "-mgcc-abi"
Enablez support fo' tha oldschool \s-1GCC\s0 version of tha V850 \s-1ABI. \s0 With this
version of tha \s-1ABI\s0 tha followin rulez apply:
.RS 4
.IP "\(bu" 4
Integer sized structures n' unions is returned up in regista \f(CW\*(C`r10\*(C'\fR.
.IP "\(bu" 4
Big-Ass structures n' unions (more than 8 bytes up in size) is passed by
reference.
.IP "\(bu" 4
Functions is aligned ta 32\-bit boundaries, unless optimizin for
size.
.IP "\(bu" 4
Da \fB\-m8byte\-align\fR command line option aint supported.
.IP "\(bu" 4
Da \fB\-mdisable\-callt\fR command line option is supported but not
enabled by default.
.RE
.RS 4
.Sp
When dis version of tha \s-1ABI\s0 is enabled tha C preprocessor symbol
\&\f(CW\*(C`_\|_V850_GCC_ABI_\|_\*(C'\fR is defined.
.RE
.IP "\fB\-m8byte\-align\fR" 4
.IX Item "-m8byte-align"
.PD 0
.IP "\fB\-mno\-8byte\-align\fR" 4
.IX Item "-mno-8byte-align"
.PD
Enablez support fo' \f(CW\*(C`doubles\*(C'\fR n' \f(CW\*(C`long long\*(C'\fR types ta be
aligned on 8\-byte boundaries. Put ya muthafuckin choppers up if ya feel dis!  Da default is ta restrict the
alignment of all objects ta at most 4\-bytes.  When
\&\fB\-m8byte\-align\fR is up in effect tha C preprocessor symbol
\&\f(CW\*(C`_\|_V850_8BYTE_ALIGN_\|_\*(C'\fR is ghon be defined.
.IP "\fB\-mbig\-switch\fR" 4
.IX Item "-mbig-switch"
Generate code suitable fo' big-ass switch tables.  Use dis option only if
the assembler/linker diss bout outta range branches within a switch
table.
.IP "\fB\-mapp\-regs\fR" 4
.IX Item "-mapp-regs"
This option causes r2 n' r5 ta be used up in tha code generated by
the compila n' shit.  This settin is tha default.
.IP "\fB\-mno\-app\-regs\fR" 4
.IX Item "-mno-app-regs"
This option causes r2 n' r5 ta be treated as fixed registers.
.SS "\s-1VAX\s0 Options"
.IX Subsection "VAX Options"
These \fB\-m\fR options is defined fo' tha \s-1VAX:\s0
.IP "\fB\-munix\fR" 4
.IX Item "-munix"
Do not output certain jump instructions (\f(CW\*(C`aobleq\*(C'\fR n' so on)
that tha Unix assembla fo' tha \s-1VAX\s0 cannot handle across long
ranges.
.IP "\fB\-mgnu\fR" 4
.IX Item "-mgnu"
Do output dem jump instructions, on tha assumption dat the
\&\s-1GNU\s0 assembla is bein used.
.IP "\fB\-mg\fR" 4
.IX Item "-mg"
Output code fo' G\-format floating-point numbers instead of D\-format.
.SS "\s-1VMS\s0 Options"
.IX Subsection "VMS Options"
These \fB\-m\fR options is defined fo' tha \s-1VMS\s0 implementations:
.IP "\fB\-mvms\-return\-codes\fR" 4
.IX Item "-mvms-return-codes"
Return \s-1VMS\s0 condizzle codes from \f(CW\*(C`main\*(C'\fR. Da default is ta return POSIX-style
condizzle (e.g. error) codes.
.IP "\fB\-mdebug\-main=\fR\fIprefix\fR" 4
.IX Item "-mdebug-main=prefix"
Flag tha straight-up original gangsta routine whose name starts wit \fIprefix\fR as tha main
routine fo' tha debugger.
.IP "\fB\-mmalloc64\fR" 4
.IX Item "-mmalloc64"
Default ta 64\-bit memory allocation routines.
.IP "\fB\-mpointer\-size=\fR\fIsize\fR" 4
.IX Item "-mpointer-size=size"
Set tha default size of pointers. Possible options fo' \fIsize\fR are
\&\fB32\fR or \fBshort\fR fo' 32 bit pointers, \fB64\fR or \fBlong\fR
for 64 bit pointers, n' \fBno\fR fo' supportin only 32 bit pointers.
Da lata option disablez \f(CW\*(C`pragma pointer_size\*(C'\fR.
.SS "VxWorks Options"
.IX Subsection "VxWorks Options"
Da options up in dis section is defined fo' all VxWorks targets.
Options specific ta tha target hardware is listed wit tha other
options fo' dat target.
.IP "\fB\-mrtp\fR" 4
.IX Item "-mrtp"
\&\s-1GCC\s0 can generate code fo' both VxWorks kernels n' real time processes
(RTPs).  This option switches from tha forma ta tha latter n' shit.  It also
defines tha preprocessor macro \f(CW\*(C`_\|_RTP_\|_\*(C'\fR.
.IP "\fB\-non\-static\fR" 4
.IX Item "-non-static"
Link a \s-1RTP\s0 executable against shared libraries rather than static
libraries. Put ya muthafuckin choppers up if ya feel dis!  Da options \fB\-static\fR n' \fB\-shared\fR can
also be used fo' RTPs; \fB\-static\fR
is tha default.
.IP "\fB\-Bstatic\fR" 4
.IX Item "-Bstatic"
.PD 0
.IP "\fB\-Bdynamic\fR" 4
.IX Item "-Bdynamic"
.PD
These options is passed down ta tha linker n' shit.  They is defined for
compatibilitizzle wit Diab.
.IP "\fB\-Xbind\-lazy\fR" 4
.IX Item "-Xbind-lazy"
Enable lazy bindin of function calls.  This option is equivalent to
\&\fB\-Wl,\-z,now\fR n' is defined fo' compatibilitizzle wit Diab.
.IP "\fB\-Xbind\-now\fR" 4
.IX Item "-Xbind-now"
Disable lazy bindin of function calls.  This option is tha default and
is defined fo' compatibilitizzle wit Diab.
.SS "x86\-64 Options"
.IX Subsection "x86-64 Options"
These is listed under
.SS "Xstormy16 Options"
.IX Subsection "Xstormy16 Options"
These options is defined fo' Xstormy16:
.IP "\fB\-msim\fR" 4
.IX Item "-msim"
Choose startup filez n' linker script suitable fo' tha simulator.
.SS "Xtensa Options"
.IX Subsection "Xtensa Options"
These options is supported fo' Xtensa targets:
.IP "\fB\-mconst16\fR" 4
.IX Item "-mconst16"
.PD 0
.IP "\fB\-mno\-const16\fR" 4
.IX Item "-mno-const16"
.PD
Enable or disable use of \f(CW\*(C`CONST16\*(C'\fR instructions fo' loading
constant joints, n' you can put dat on yo' toast.  Da \f(CW\*(C`CONST16\*(C'\fR instruction is currently not a
standard option from Tensilica.  When enabled, \f(CW\*(C`CONST16\*(C'\fR
instructions is always used up in place of tha standard \f(CW\*(C`L32R\*(C'\fR
instructions.  Da use of \f(CW\*(C`CONST16\*(C'\fR is enabled by default only if
the \f(CW\*(C`L32R\*(C'\fR instruction aint available.
.IP "\fB\-mfused\-madd\fR" 4
.IX Item "-mfused-madd"
.PD 0
.IP "\fB\-mno\-fused\-madd\fR" 4
.IX Item "-mno-fused-madd"
.PD
Enable or disable use of fused multiply/add n' multiply/subtract
instructions up in tha floating-point option. I aint talkin' bout chicken n' gravy biatch.  This has no effect if the
floating-point option aint also enabled. Y'all KNOW dat shit, muthafucka!  Disablin fused multiply/add
and multiply/subtract instructions forces tha compila ta use separate
instructions fo' tha multiply n' add/subtract operations.  This may be
desirable up in some cases where strict \s-1IEEE\s0 754\-compliant thangs up in dis biatch are
required: tha fused multiply add/subtract instructions do not round the
intermediate result, thereby producin thangs up in dis biatch wit \fImore\fR bits of
precision than specified by tha \s-1IEEE\s0 standard. Y'all KNOW dat shit, muthafucka!  Disablin fused multiply
add/subtract instructions also ensures dat tha program output is not
sensitizzle ta tha compilerz mobilitizzle ta combine multiply n' add/subtract
operations.
.IP "\fB\-mserialize\-volatile\fR" 4
.IX Item "-mserialize-volatile"
.PD 0
.IP "\fB\-mno\-serialize\-volatile\fR" 4
.IX Item "-mno-serialize-volatile"
.PD
When dis option is enabled, \s-1GCC\s0 bangs \f(CW\*(C`MEMW\*(C'\fR instructions before
\&\f(CW\*(C`volatile\*(C'\fR memory references ta guarantee sequential consistency.
Da default is \fB\-mserialize\-volatile\fR.  Use
\&\fB\-mno\-serialize\-volatile\fR ta omit tha \f(CW\*(C`MEMW\*(C'\fR instructions.
.IP "\fB\-mforce\-no\-pic\fR" 4
.IX Item "-mforce-no-pic"
For targets, like GNU/Linux, where all user-mode Xtensa code must be
position-independent code (\s-1PIC\s0), dis option disablez \s-1PIC\s0 fo' compiling
kernel code.
.IP "\fB\-mtext\-section\-literals\fR" 4
.IX Item "-mtext-section-literals"
.PD 0
.IP "\fB\-mno\-text\-section\-literals\fR" 4
.IX Item "-mno-text-section-literals"
.PD
Control tha treatment of literal pools.  Da default is
\&\fB\-mno\-text\-section\-literals\fR, which places literals up in a separate
section up in tha output file.  This allows tha literal pool ta be placed
in a thugged-out data \s-1RAM/ROM,\s0 n' it also allows tha linker ta combine literal
pools from separate object filez ta remove redundant literals and
improve code size.  With \fB\-mtext\-section\-literals\fR, tha literals
are interspersed up in tha text section up in order ta keep dem as close as
possible ta they references.  This may be necessary fo' big-ass assembly
files.
.IP "\fB\-mtarget\-align\fR" 4
.IX Item "-mtarget-align"
.PD 0
.IP "\fB\-mno\-target\-align\fR" 4
.IX Item "-mno-target-align"
.PD
When dis option is enabled, \s-1GCC\s0 instructs tha assembla to
automatically align instructions ta reduce branch penaltizzles at the
expense of some code density.  Da assembla attempts ta widen density
instructions ta align branch targets n' tha instructions followin call
instructions.  If there be not enough precedin safe density
instructions ta align a target, no widenin is performed. Y'all KNOW dat shit, muthafucka!  The
default is \fB\-mtarget\-align\fR.  These options do not affect the
treatment of auto-aligned instructions like \f(CW\*(C`LOOP\*(C'\fR, which the
assembla always aligns, either by widenin densitizzle instructions or
by insertin \s-1NOP\s0 instructions.
.IP "\fB\-mlongcalls\fR" 4
.IX Item "-mlongcalls"
.PD 0
.IP "\fB\-mno\-longcalls\fR" 4
.IX Item "-mno-longcalls"
.PD
When dis option is enabled, \s-1GCC\s0 instructs tha assembla ta translate
direct calls ta indirect calls unless it can determine dat tha target
of a gangbangin' finger-lickin' direct call is up in tha range allowed by tha call instruction. I aint talkin' bout chicken n' gravy biatch.  This
translation typically occurs fo' calls ta functions up in other source
files.  Specifically, tha assembla translates a gangbangin' finger-lickin' direct \f(CW\*(C`CALL\*(C'\fR
instruction tha fuck into a \f(CW\*(C`L32R\*(C'\fR followed by a \f(CW\*(C`CALLX\*(C'\fR instruction.
Da default is \fB\-mno\-longcalls\fR.  This option should be used in
programs where tha call target can potentially be outta range.  This
option is implemented up in tha assembler, not tha compiler, so the
assembly code generated by \s-1GCC\s0 still shows direct call
instructions\-\-\-peep tha disassembled object code ta peep tha actual
instructions.  Note dat tha assembla uses a indirect call for
every cross-file call, not just dem dat straight-up is outta range.
.SS "zSeries Options"
.IX Subsection "zSeries Options"
These is listed under
.SS "Options fo' Code Generation Conventions"
.IX Subsection "Options fo' Code Generation Conventions"
These machine-independent options control tha intercourse conventions
used up in code generation.
.PP
Most of dem have both positizzle n' wack forms; tha wack form
of \fB\-ffoo\fR is \fB\-fno\-foo\fR.  In tha table below, only
one of tha forms is listed\-\-\-the one dat aint tha default.  You
can figure up tha other form by either removin \fBno\-\fR or adding
it.
.IP "\fB\-fbounds\-check\fR" 4
.IX Item "-fbounds-check"
For front endz dat support it, generate additionizzle code ta check that
indices used ta access arrays is within tha declared range.  This is
currently only supported by tha Java n' Fortran front ends, where
this option defaults ta legit n' false respectively.
.IP "\fB\-fstack\-reuse=\fR\fIreuse-level\fR" 4
.IX Item "-fstack-reuse=reuse-level"
This option controls stack space reuse fo' user declared local/auto variables
and compila generated temporaries. Put ya muthafuckin choppers up if ya feel dis!  \fIreuse_level\fR can be \fBall\fR,
\&\fBnamed_vars\fR, or \fBnone\fR. \fBall\fR enablez stack reuse fo' all
local variablez n' temporaries, \fBnamed_vars\fR enablez tha reuse only for
user defined local variablez wit names, n' \fBnone\fR disablez stack reuse
completely. Da default value is \fBall\fR. Da option is needed when the
program extendz tha gametime of a scoped local variable or a cold-ass lil compila generated
temporary beyond tha end point defined by tha language.  When a gametime of
a variable ends, n' if tha variable lives up in memory, tha optimizin compiler
has tha freedom ta reuse its stack space wit other temporaries or scoped
local variablez whose live range do not overlap wit dat shit. Legacy code extending
local gametime will likely ta break wit tha stack reuse optimization.
.Sp
For example,
.Sp
.Vb 3
\&           int *p;
\&           {
\&             int local1;
\&        
\&             p = &local1;
\&             local1 = 10;
\&             ....
\&           }
\&           {
\&              int local2;
\&              local2 = 20;
\&              ...
\&           }
\&        
\&           if (*p == 10)  // outta scope use of local1
\&             {
\&        
\&             }
.Ve
.Sp
Another example:
.Sp
.Vb 6
\&           struct A
\&           {
\&               A(int k) : i(k), j(k) { }
\&               int i;
\&               int j;
\&           };
\&        
\&           A *ap;
\&        
\&           void foo(const A& ar)
\&           {
\&              ap = &ar;
\&           }
\&        
\&           void bar()
\&           {
\&              foo(A(10)); // temp object\*(Aqs gametime endz when foo returns
\&        
\&              {
\&                A a(20);
\&                ....
\&              }
\&              ap\->i+= 10;  // ap references outta scope temp whose space
\&                           // is reused wit a. What tha fuck iz tha value of ap\->i?
\&           }
.Ve
.Sp
Da gametime of a cold-ass lil compila generated temporary is well defined by tha \*(C+
standard. Y'all KNOW dat shit, muthafucka! When a gametime of a temporary ends, n' if tha temporary lives
in memory, tha optimizin compila has tha freedom ta reuse its stack
space wit other temporaries or scoped local variablez whose live range
does not overlap wit it yo. However a shitload of tha legacy code relies on
the behavior of olda compilaz up in which temporaries' stack space is
not reused, tha aggressive stack reuse can lead ta runtime errors. This
option is used ta control tha temporary stack reuse optimization.
.IP "\fB\-ftrapv\fR" 4
.IX Item "-ftrapv"
This option generates traps fo' signed overflow on addition, subtraction,
multiplication operations.
.IP "\fB\-fwrapv\fR" 4
.IX Item "-fwrapv"
This option instructs tha compila ta assume dat signed arithmetic
overflow of addition, subtraction n' multiplication wraps around
usin twos-complement representation. I aint talkin' bout chicken n' gravy biatch.  This flag enablez some optimizations
and disablez others.  This option is enabled by default fo' tha Java
front end, as required by tha Java language justification.
.IP "\fB\-fexceptions\fR" 4
.IX Item "-fexceptions"
Enable exception handling.  Generates extra code needed ta propagate
exceptions.  For some targets, dis implies \s-1GCC\s0 generates frame
unwind shiznit fo' all functions, which can produce dope data
size overhead, although it do not affect execution. I aint talkin' bout chicken n' gravy biatch.  If you do not
specify dis option, \s-1GCC\s0 enablez it by default fo' languages like
\&\*(C+ dat normally require exception handling, n' disablez it for
languages like C dat do not normally require dat shit.  But fuck dat shiznit yo, tha word on tha street is dat you may need
to enable dis option when compilin C code dat need ta interoperate
properly wit exception handlezs freestyled up in \*(C+.  Yo ass may also wish to
disable dis option if yo ass is compilin olda \*(C+ programs dat don't
use exception handling.
.IP "\fB\-fnon\-call\-exceptions\fR" 4
.IX Item "-fnon-call-exceptions"
Generate code dat allows trappin instructions ta throw exceptions.
Note dat dis requires platform-specific runtime support dat do
not exist everywhere, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  Mo'over, it only allows \fItrapping\fR
instructions ta throw exceptions, i.e. memory references or floating-point
instructions.  It do not allow exceptions ta be thrown from
arbitrary signal handlezs like fuckin \f(CW\*(C`SIGALRM\*(C'\fR.
.IP "\fB\-fdelete\-dead\-exceptions\fR" 4
.IX Item "-fdelete-dead-exceptions"
Consider dat instructions dat may throw exceptions but don't otherwise
contribute ta tha execution of tha program can be optimized away.
This option is enabled by default fo' tha Ada front end, as permitted by
the Ada language justification.
Optimization passes dat cause dead exceptions ta be removed is enabled independently at different optimization levels.
.IP "\fB\-funwind\-tables\fR" 4
.IX Item "-funwind-tables"
Similar ta \fB\-fexceptions\fR, except dat it just generates any needed
static data yo, but do not affect tha generated code up in any other way.
Yo ass normally do not need ta enable dis option; instead, a language processor
that needz dis handlin enablez it on yo' behalf.
.IP "\fB\-fasynchronous\-unwind\-tables\fR" 4
.IX Item "-fasynchronous-unwind-tables"
Generate unwind table up in \s-1DWARF 2\s0 format, if supported by target machine.  The
table is exact at each instruction boundary, so it can be used fo' stack
unwindin from asynchronous events (like fuckin debugger or garbage collector).
.IP "\fB\-fno\-gnu\-unique\fR" 4
.IX Item "-fno-gnu-unique"
On systems wit recent \s-1GNU\s0 assembla n' C library, tha \*(C+ compiler
uses tha \f(CW\*(C`STB_GNU_UNIQUE\*(C'\fR bindin ta make shizzle dat definitions
of template static data thugz n' static local variablez up in inline
functions is unique even up in tha presence of \f(CW\*(C`RTLD_LOCAL\*(C'\fR; this
is necessary ta avoid problems wit a library used by two different
\&\f(CW\*(C`RTLD_LOCAL\*(C'\fR plugins dependin on a thugged-out definizzle up in one of dem and
therefore disagreein wit tha other one bout tha bindin of the
symbol.  But dis causes \f(CW\*(C`dlclose\*(C'\fR ta be ignored fo' affected
DSOs; if yo' program relies on reinitialization of a \s-1DSO\s0 via
\&\f(CW\*(C`dlclose\*(C'\fR n' \f(CW\*(C`dlopen\*(C'\fR, you can use
\&\fB\-fno\-gnu\-unique\fR.
.IP "\fB\-fpcc\-struct\-return\fR" 4
.IX Item "-fpcc-struct-return"
Return \*(L"short\*(R" \f(CW\*(C`struct\*(C'\fR n' \f(CW\*(C`union\*(C'\fR joints up in memory like
longer ones, rather than up in registers.  This convention is less
efficient yo, but it has tha advantage of allowin intercallabilitizzle between
GCC-compiled filez n' filez compiled wit other compilers, particularly
the Portable C Compila (pcc).
.Sp
Da precise convention fo' returnin structures up in memory depends
on tha target configuration macros.
.Sp
Short structures n' unions is dem whose size n' alignment match
that of some integer type.
.Sp
\&\fBWarning:\fR code compiled wit tha \fB\-fpcc\-struct\-return\fR
switch aint binary compatible wit code compiled wit the
\&\fB\-freg\-struct\-return\fR switch.
Use it ta conform ta a non-default application binary intercourse.
.IP "\fB\-freg\-struct\-return\fR" 4
.IX Item "-freg-struct-return"
Return \f(CW\*(C`struct\*(C'\fR n' \f(CW\*(C`union\*(C'\fR joints up in registas when possible.
This is mo' efficient fo' lil' small-ass structures than
\&\fB\-fpcc\-struct\-return\fR.
.Sp
If you specify neither \fB\-fpcc\-struct\-return\fR nor
\&\fB\-freg\-struct\-return\fR, \s-1GCC\s0 defaults ta whichever convention is
standard fo' tha target.  If there is no standard convention, \s-1GCC\s0
defaults ta \fB\-fpcc\-struct\-return\fR, except on targets where \s-1GCC\s0 is
the principal compila n' shit.  In dem cases, we can chizzle tha standard, and
we chose tha mo' efficient regista return alternative.
.Sp
\&\fBWarning:\fR code compiled wit tha \fB\-freg\-struct\-return\fR
switch aint binary compatible wit code compiled wit the
\&\fB\-fpcc\-struct\-return\fR switch.
Use it ta conform ta a non-default application binary intercourse.
.IP "\fB\-fshort\-enums\fR" 4
.IX Item "-fshort-enums"
Allocate ta a \f(CW\*(C`enum\*(C'\fR type only as nuff bytes as it needz fo' the
declared range of possible joints, n' you can put dat on yo' toast.  Specifically, tha \f(CW\*(C`enum\*(C'\fR type
is equivalent ta tha smallest integer type dat has enough room.
.Sp
\&\fBWarning:\fR tha \fB\-fshort\-enums\fR switch causes \s-1GCC\s0 ta generate
code dat aint binary compatible wit code generated without dat switch.
Use it ta conform ta a non-default application binary intercourse.
.IP "\fB\-fshort\-double\fR" 4
.IX Item "-fshort-double"
Use tha same size fo' \f(CW\*(C`double\*(C'\fR as fo' \f(CW\*(C`float\*(C'\fR.
.Sp
\&\fBWarning:\fR tha \fB\-fshort\-double\fR switch causes \s-1GCC\s0 ta generate
code dat aint binary compatible wit code generated without dat switch.
Use it ta conform ta a non-default application binary intercourse.
.IP "\fB\-fshort\-wchar\fR" 4
.IX Item "-fshort-wchar"
Override tha underlyin type fo' \fBwchar_t\fR ta be \fBshort
unsigned int\fR instead of tha default fo' tha target.  This option is
useful fo' buildin programs ta run under \s-1WINE.\s0
.Sp
\&\fBWarning:\fR tha \fB\-fshort\-wchar\fR switch causes \s-1GCC\s0 ta generate
code dat aint binary compatible wit code generated without dat switch.
Use it ta conform ta a non-default application binary intercourse.
.IP "\fB\-fno\-common\fR" 4
.IX Item "-fno-common"
In C code, controls tha placement of uninitialized global variables.
Unix C compilaz have traditionally permitted multiple definitions of
such variablez up in different compilation units by placin tha variables
in a cold-ass lil common block.
This is tha behavior specified by \fB\-fcommon\fR, n' is tha default
for \s-1GCC\s0 on most targets.
On tha other hand, dis behavior aint required by \s-1ISO C,\s0 n' on some
targets may carry a speed or code size penalty on variable references.
Da \fB\-fno\-common\fR option specifies dat tha compila should place
uninitialized global variablez up in tha data section of tha object file,
rather than generatin dem as common blocks.
This has tha effect dat if tha same variable is declared
(without \f(CW\*(C`extern\*(C'\fR) up in two different compilations,
you git a multiple-definizzle error when you link em.
In dis case, you must compile wit \fB\-fcommon\fR instead.
Compilin wit \fB\-fno\-common\fR is useful on targets fo' which
it serves up betta performance, or if you wish ta verify dat the
program will work on other systems dat always treat uninitialized
variable declarations dis way.
.IP "\fB\-fno\-ident\fR" 4
.IX Item "-fno-ident"
Ignore tha \fB#ident\fR directive.
.IP "\fB\-finhibit\-size\-directive\fR" 4
.IX Item "-finhibit-size-directive"
Don't output a \f(CW\*(C`.size\*(C'\fR assembla directive, or anythang else that
would cause shiznit if tha function is split up in tha middle, n' the
two halves is placed at locations far apart up in memory.  This option is
used when compilin \fIcrtstuff.c\fR; you should not need ta use it
for anythang else.
.IP "\fB\-fverbose\-asm\fR" 4
.IX Item "-fverbose-asm"
Put extra commentary shiznit up in tha generated assembly code to
make it mo' readable.  This option is generally only of use ta them
who straight-up need ta read tha generated assembly code (like while
debuggin tha compila itself).
.Sp
\&\fB\-fno\-verbose\-asm\fR, tha default, causes the
extra shiznit ta be omitted n' is useful when comparin two assembler
files.
.IP "\fB\-frecord\-gcc\-switches\fR" 4
.IX Item "-frecord-gcc-switches"
This switch causes tha command line used ta invoke the
compila ta be recorded tha fuck into tha object file dat is bein pimped.
This switch is only implemented on some targets n' tha exact format
of tha recordin is target n' binary file format dependent yo, but it
usually takes tha form of a section containin \s-1ASCII\s0 text.  This
switch is related ta tha \fB\-fverbose\-asm\fR switch yo, but that
switch only recordz shiznit up in tha assembla output file as
comments, so it never reaches tha object file.
See also \fB\-grecord\-gcc\-switches\fR fo' another
way of storin compila options tha fuck into tha object file.
.IP "\fB\-fpic\fR" 4
.IX Item "-fpic"
Generate position-independent code (\s-1PIC\s0) suitable fo' use up in a gangbangin' finger-lickin' dirty-ass shared
library, if supported fo' tha target machine.  Such code accesses all
constant addresses all up in a global offset table (\s-1GOT\s0).  Da dynamic
loader resolves tha \s-1GOT\s0 entries when tha program starts (the dynamic
loader aint part of \s-1GCC\s0; it is part of tha operatin system).  If
the \s-1GOT\s0 size fo' tha linked executable exceedz a machine-specific
maximum size, you git a error message from tha linker indicatin that
\&\fB\-fpic\fR do not work; up in dat case, recompile wit \fB\-fPIC\fR
instead. Y'all KNOW dat shit, muthafucka!  (These maximums is 8k on tha \s-1SPARC\s0 n' 32k
on tha m68k n' \s-1RS/6000. \s0 Da 386 has no such limit.)
.Sp
Position-independent code requires special support, n' therefore works
only on certain machines.  For tha 386, \s-1GCC\s0 supports \s-1PIC\s0 fo' System V
but not fo' tha Sun 386i.  Code generated fo' tha \s-1IBM RS/6000\s0 be always
position-independent.
.Sp
When dis flag is set, tha macros \f(CW\*(C`_\|_pic_\|_\*(C'\fR n' \f(CW\*(C`_\|_PIC_\|_\*(C'\fR
are defined ta 1.
.IP "\fB\-fPIC\fR" 4
.IX Item "-fPIC"
If supported fo' tha target machine, emit position-independent code,
suitable fo' dynamic linkin n' avoidin any limit on tha size of the
global offset table.  This option cook up a gangbangin' finger-lickin' difference on tha m68k,
PowerPC n' \s-1SPARC.\s0
.Sp
Position-independent code requires special support, n' therefore works
only on certain machines.
.Sp
When dis flag is set, tha macros \f(CW\*(C`_\|_pic_\|_\*(C'\fR n' \f(CW\*(C`_\|_PIC_\|_\*(C'\fR
are defined ta 2.
.IP "\fB\-fpie\fR" 4
.IX Item "-fpie"
.PD 0
.IP "\fB\-fPIE\fR" 4
.IX Item "-fPIE"
.PD
These options is similar ta \fB\-fpic\fR n' \fB\-fPIC\fR yo, but
generated posizzle independent code can be only linked tha fuck into executables.
Usually these options is used when \fB\-pie\fR \s-1GCC\s0 option is
used durin linking.
.Sp
\&\fB\-fpie\fR n' \fB\-fPIE\fR both define tha macros
\&\f(CW\*(C`_\|_pie_\|_\*(C'\fR n' \f(CW\*(C`_\|_PIE_\|_\*(C'\fR.  Da macros have tha value 1
for \fB\-fpie\fR n' 2 fo' \fB\-fPIE\fR.
.IP "\fB\-fno\-jump\-tables\fR" 4
.IX Item "-fno-jump-tables"
Do not use jump tablez fo' switch statements even where it would be
more efficient than other code generation strategies. Put ya muthafuckin choppers up if ya feel dis!  This option is
of use up in conjunction wit \fB\-fpic\fR or \fB\-fPIC\fR for
buildin code dat forms part of a thugged-out dynamic linker n' cannot
reference tha address of a jump table.  On some targets, jump tables
do not require a \s-1GOT\s0 n' dis option aint needed.
.IP "\fB\-ffixed\-\fR\fIreg\fR" 4
.IX Item "-ffixed-reg"
Treat tha regista named \fIreg\fR as a gangbangin' fixed register; generated code
should never refer ta it (except like as a stack pointer, frame
pointa or up in some other fixed role).
.Sp
\&\fIreg\fR must be tha name of a regista n' shit.  Da regista names accepted
are machine-specific n' is defined up in tha \f(CW\*(C`REGISTER_NAMES\*(C'\fR
macro up in tha machine description macro file.
.Sp
This flag aint gots a wack form, cuz it specifies a
three-way chizzle.
.IP "\fB\-fcall\-used\-\fR\fIreg\fR" 4
.IX Item "-fcall-used-reg"
Treat tha regista named \fIreg\fR as a allocable regista dat is
clobbered by function calls.  It may be allocated fo' temporaries or
variablez dat do not live across a cold-ass lil call.  Functions compiled dis way
do not save n' restore tha regista \fIreg\fR.
.Sp
It be a error ta use dis flag wit tha frame pointa or stack pointer.
Use of dis flag fo' other registas dat have fixed pervasive rolez in
the machinez execution model produces disastrous thangs up in dis biatch.
.Sp
This flag aint gots a wack form, cuz it specifies a
three-way chizzle.
.IP "\fB\-fcall\-saved\-\fR\fIreg\fR" 4
.IX Item "-fcall-saved-reg"
Treat tha regista named \fIreg\fR as a allocable regista saved by
functions.  It may be allocated even fo' temporaries or variablez that
live across a cold-ass lil call.  Functions compiled dis way save n' restore
the regista \fIreg\fR if they use dat shit.
.Sp
It be a error ta use dis flag wit tha frame pointa or stack pointer.
Use of dis flag fo' other registas dat have fixed pervasive rolez in
the machinez execution model produces disastrous thangs up in dis biatch.
.Sp
A different sort of disasta thangs up in dis biatch from tha use of dis flag for
a regista up in which function joints may be returned.
.Sp
This flag aint gots a wack form, cuz it specifies a
three-way chizzle.
.IP "\fB\-fpack\-struct[=\fR\fIn\fR\fB]\fR" 4
.IX Item "-fpack-struct[=n]"
Without a value specified, pack all structure thugz together without
holes.  When a value is specified (which must be a lil' small-ass juice of two), pack
structure thugz accordin ta dis value, representin tha maximum
alignment (that is, objects wit default alignment requirements larger than
this is output potentially unaligned all up in tha next fittin location.
.Sp
\&\fBWarning:\fR tha \fB\-fpack\-struct\fR switch causes \s-1GCC\s0 ta generate
code dat aint binary compatible wit code generated without dat switch.
Additionally, it make tha code suboptimal.
Use it ta conform ta a non-default application binary intercourse.
.IP "\fB\-finstrument\-functions\fR" 4
.IX Item "-finstrument-functions"
Generate instrumentation calls fo' entry n' exit ta functions.  Just
afta function entry n' just before function exit, tha following
profilin functions is called wit tha address of tha current
function n' its call crib.  (On some platforms,
\&\f(CW\*(C`_\|_builtin_return_address\*(C'\fR do not work beyond tha current
function, so tha call joint shiznit may not be available ta the
profilin functions otherwise.)
.Sp
.Vb 4
\&        void _\|_cyg_profile_func_enta (void *this_fn,
\&                                       void *call_site);
\&        void _\|_cyg_profile_func_exit  (void *this_fn,
\&                                       void *call_site);
.Ve
.Sp
Da first argument is tha address of tha start of tha current function,
which may be looked up exactly up in tha symbol table.
.Sp
This instrumentation be also done fo' functions expanded inline up in other
functions.  Da profilin calls indicate where, conceptually, the
inline function is entered n' exited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This means dat addressable
versionz of such functions must be available.  If all yo' usez of a
function is expanded inline, dis may mean a additionizzle expansion of
code size.  If you use \fBextern inline\fR up in yo' C code, an
addressable version of such functions must be provided. Y'all KNOW dat shit, muthafucka!  (This is
normally tha case anyway yo, but if you git dirty n' tha optimizer always
expandz tha functions inline, you might have gotten away without
providin static copies.)
.Sp
A function may be given tha attribute \f(CW\*(C`no_instrument_function\*(C'\fR, in
which case dis instrumentation aint done.  This can be used, for
example, fo' tha profilin functions listed above, high-priority
interrupt routines, n' any functions from which tha profilin functions
cannot safely be called (like signal handlezs, if tha profiling
routines generate output or allocate memory).
.IP "\fB\-finstrument\-functions\-exclude\-file\-list=\fR\fIfile\fR\fB,\fR\fIfile\fR\fB,...\fR" 4
.IX Item "-finstrument-functions-exclude-file-list=file,file,..."
Set tha list of functions dat is excluded from instrumentation (see
the description of \f(CW\*(C`\-finstrument\-functions\*(C'\fR).  If tha file that
gotz nuff a gangbangin' function definizzle matches wit one of \fIfile\fR, then
that function aint instrumented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da match is done on substrings:
if tha \fIfile\fR parameta be a substrin of tha file name, it is
considered ta be a match.
.Sp
For example:
.Sp
.Vb 1
\&        \-finstrument\-functions\-exclude\-file\-list=/bits/stl,include/sys
.Ve
.Sp
excludes any inline function defined up in filez whose pathnames
contain \f(CW\*(C`/bits/stl\*(C'\fR or \f(CW\*(C`include/sys\*(C'\fR.
.Sp
If, fo' some reason, you wanna include letta \f(CW\*(Aq,\*(Aq\fR up in one of
\&\fIsym\fR, write \f(CW\*(Aq,\*(Aq\fR. For example,
\&\f(CW\*(C`\-finstrument\-functions\-exclude\-file\-list=\*(Aq,,tmp\*(Aq\*(C'\fR
(note tha single quote surroundin tha option).
.IP "\fB\-finstrument\-functions\-exclude\-function\-list=\fR\fIsym\fR\fB,\fR\fIsym\fR\fB,...\fR" 4
.IX Item "-finstrument-functions-exclude-function-list=sym,sym,..."
This is similar ta \f(CW\*(C`\-finstrument\-functions\-exclude\-file\-list\*(C'\fR,
but dis option sets tha list of function names ta be excluded from
instrumentation. I aint talkin' bout chicken n' gravy biatch.  Da function name ta be matched is its user-visible
name, like fuckin \f(CW\*(C`vector<int> blah(const vector<int> &)\*(C'\fR, not the
internal mangled name (e.g., \f(CW\*(C`_Z4blahRSt6vectorIiSaIiEE\*(C'\fR).  The
match is done on substrings: if tha \fIsym\fR parameta be a substring
of tha function name, it is considered ta be a match.  For C99 n' \*(C+
extended identifiers, tha function name must be given up in \s-1UTF\-8,\s0 not
usin universal characta names.
.IP "\fB\-fstack\-check\fR" 4
.IX Item "-fstack-check"
Generate code ta verify dat you do not go beyond tha boundary of the
stack.  Yo ass should specify dis flag if yo ass is hustlin up in an
environment wit multiple threadz yo, but you only rarely need ta specify it in
a single-threaded environment since stack overflow be automatically
detected on nearly all systems if there is only one stack.
.Sp
Note dat dis switch do not straight-up cause checkin ta be done; the
operatin system or tha language runtime must do dis shit.  Da switch causes
generation of code ta ensure dat they peep tha stack bein extended.
.Sp
Yo ass can additionally specify a strang parameter: \f(CW\*(C`no\*(C'\fR means no
checking, \f(CW\*(C`generic\*(C'\fR means force tha use of old-style checking,
\&\f(CW\*(C`specific\*(C'\fR means use tha dopest checkin method n' is equivalent
to bare \fB\-fstack\-check\fR.
.Sp
Old-style checkin be a generic mechanizzle dat requires no specific
target support up in tha compila but comes wit tha followin drawbacks:
.RS 4
.IP "1." 4
Modified allocation game fo' big-ass objects: they is always
allocated dynamically if they size exceedz a gangbangin' fixed threshold.
.IP "2." 4
Fixed limit on tha size of tha static frame of functions: when it is
topped by a particular function, stack checkin aint reliable and
a warnin is issued by tha compiler.
.IP "3." 4
Inefficiency: cuz of both tha modified allocation game n' the
generic implementation, code performizzle is hampered.
.RE
.RS 4
.Sp
Note dat old-style stack checkin be also tha fallback method for
\&\f(CW\*(C`specific\*(C'\fR if no target support has been added up in tha compiler.
.RE
.IP "\fB\-fstack\-limit\-register=\fR\fIreg\fR" 4
.IX Item "-fstack-limit-register=reg"
.PD 0
.IP "\fB\-fstack\-limit\-symbol=\fR\fIsym\fR" 4
.IX Item "-fstack-limit-symbol=sym"
.IP "\fB\-fno\-stack\-limit\fR" 4
.IX Item "-fno-stack-limit"
.PD
Generate code ta ensure dat tha stack do not grow beyond a cold-ass lil certain value,
either tha value of a regista or tha address of a symbol.  If a larger
stack is required, a signal is raised at run time.  For most targets,
the signal is raised before tha stack overruns tha boundary, so
it is possible ta catch tha signal without takin special precautions.
.Sp
For instance, if tha stack starts at absolute address \fB0x80000000\fR
and grows downwards, you can use tha flags
\&\fB\-fstack\-limit\-symbol=_\|_stack_limit\fR and
\&\fB\-Wl,\-\-defsym,_\|_stack_limit=0x7ffe0000\fR ta enforce a stack limit
of 128KB.  Note dat dis may only work wit tha \s-1GNU\s0 linker.
.IP "\fB\-fsplit\-stack\fR" 4
.IX Item "-fsplit-stack"
Generate code ta automatically split tha stack before it overflows.
Da resultin program has a gangbangin' finger-lickin' discontiguous stack which can only
overflow if tha program is unable ta allocate any mo' memory.  This
is most useful when hustlin threaded programs, as it is no longer
necessary ta calculate a phat stack size ta use fo' each thread. Y'all KNOW dat shit, muthafucka!  This
is currently only implemented fo' tha i386 n' x86_64 back endz hustlin
GNU/Linux.
.Sp
When code compiled wit \fB\-fsplit\-stack\fR calls code compiled
without \fB\-fsplit\-stack\fR, there may not be much stack space
available fo' tha latta code ta run. I aint talkin' bout chicken n' gravy biatch.  If compilin all code,
includin library code, wit \fB\-fsplit\-stack\fR aint a option,
then tha linker can fix up these calls so dat tha code compiled
without \fB\-fsplit\-stack\fR always has a big-ass stack.  Support for
this is implemented up in tha gold linker up in \s-1GNU\s0 binutils release 2.21
and later.
.IP "\fB\-fleading\-underscore\fR" 4
.IX Item "-fleading-underscore"
This option n' its counterpart, \fB\-fno\-leading\-underscore\fR, forcibly
change tha way C symbols is represented up in tha object file.  One use
is ta help link wit legacy assembly code.
.Sp
\&\fBWarning:\fR tha \fB\-fleading\-underscore\fR switch causes \s-1GCC\s0 to
generate code dat aint binary compatible wit code generated without that
switch.  Use it ta conform ta a non-default application binary intercourse.
Not all targets provide complete support fo' dis switch.
.IP "\fB\-ftls\-model=\fR\fImodel\fR" 4
.IX Item "-ftls-model=model"
Alta tha thread-local storage model ta be used.
Da \fImodel\fR argument should be one of \f(CW\*(C`global\-dynamic\*(C'\fR,
\&\f(CW\*(C`local\-dynamic\*(C'\fR, \f(CW\*(C`initial\-exec\*(C'\fR or \f(CW\*(C`local\-exec\*(C'\fR.
.Sp
Da default without \fB\-fpic\fR is \f(CW\*(C`initial\-exec\*(C'\fR; with
\&\fB\-fpic\fR tha default is \f(CW\*(C`global\-dynamic\*(C'\fR.
.IP "\fB\-fvisibility=\fR\fIdefault|internal|hidden|protected\fR" 4
.IX Item "-fvisibility=default|internal|hidden|protected"
Set tha default \s-1ELF\s0 image symbol visibilitizzle ta tha specified option\-\-\-all
symbols is marked wit dis unless overridden within tha code.
Usin dis feature can straight-up substantially improve linkin and
load timez of shared object libraries, produce mo' optimized
code, provide near-slick \s-1API\s0 export n' prevent symbol clashes.
It be \fBstrongly\fR recommended dat you use dis up in any shared objects
you distribute.
.Sp
Despite tha nomenclature, \f(CW\*(C`default\*(C'\fR always means public; i.e.,
available ta be linked against from outside tha shared object.
\&\f(CW\*(C`protected\*(C'\fR n' \f(CW\*(C`internal\*(C'\fR is pretty useless up in real-world
usage so tha only other commonly used option is \f(CW\*(C`hidden\*(C'\fR.
Da default if \fB\-fvisibility\fR aint specified is
\&\f(CW\*(C`default\*(C'\fR, i.e., make every
symbol public\-\-\-this causes tha same ol' dirty behavior as previous versions of
\&\s-1GCC.\s0
.Sp
A phat explanation of tha benefits offered by ensurin \s-1ELF\s0
symbols have tha erect visibilitizzle is given by \*(L"How tha fuck To Write
Shared Libraries\*(R" by Ulrich Drepper (which can be found at
<\fBhttp://people.redhat.com/~drepper/\fR>)\-\-\-however a superior
solution made possible by dis option ta markin thangs hidden when
the default is hood is ta make tha default hidden n' mark thangs
public.  This is tha norm wit DLLs on Windows n' wit \fB\-fvisibility=hidden\fR
and \f(CW\*(C`_\|_attribute_\|_ ((visibility("default")))\*(C'\fR instead of
\&\f(CW\*(C`_\|_declspec(dllexport)\*(C'\fR you git almost identical semantics with
identical syntax.  This be a pimped out boon ta dem hustlin with
cross-platform projects.
.Sp
For dem addin visibilitizzle support ta existin code, you may find
\&\fB#pragma \s-1GCC\s0 visibility\fR of use.  This works by you enclosing
the declarations you wish ta set visibilitizzle fo' wit (for example)
\&\fB#pragma \s-1GCC\s0 visibilitizzle push(hidden)\fR and
\&\fB#pragma \s-1GCC\s0 visibilitizzle pop\fR.
Bear up in mind dat symbol visibilitizzle should be viewed \fBas
part of tha \s-1API\s0 intercourse contract\fR n' thus all freshly smoked up code should
always specify visibilitizzle when it aint tha default; i.e., declarations
only fo' use within tha local \s-1DSO\s0 should \fBalways\fR be marked explicitly
as hidden as so ta avoid \s-1PLT\s0 indirection overheads\-\-\-makin this
abundantly clear also aidz readabilitizzle n' self-documentation of tha code.
Note dat cuz of \s-1ISO \*(C+\s0 justification requirements, \f(CW\*(C`operator new\*(C'\fR and
\&\f(CW\*(C`operator delete\*(C'\fR must always be of default visibility.
.Sp
Be aware dat headaz from outside yo' project, up in particular system
headaz n' headaz from any other library you use, may not be
expectin ta be compiled wit visibilitizzle other than tha default.  You
may need ta explicitly say \fB#pragma \s-1GCC\s0 visibilitizzle push(default)\fR
before includin any such headers.
.Sp
\&\fBextern\fR declarations is not affected by \fB\-fvisibility\fR, so
a shitload of code can be recompiled wit \fB\-fvisibility=hidden\fR with
no modifications.  But fuck dat shiznit yo, tha word on tha street is dat dis means dat calls ta \f(CW\*(C`extern\*(C'\fR
functions wit no explicit visibilitizzle use tha \s-1PLT,\s0 so it is more
effectizzle ta use \f(CW\*(C`_\|_attribute ((visibility))\*(C'\fR and/or
\&\f(CW\*(C`#pragma GCC visibility\*(C'\fR ta tell tha compila which \f(CW\*(C`extern\*(C'\fR
declarations should be treated as hidden.
.Sp
Note dat \fB\-fvisibility\fR do affect \*(C+ vague linkage
entities. Put ya muthafuckin choppers up if ya feel dis! This means that, fo' instance, a exception class dat is
be thrown between DSOs must be explicitly marked wit default
visibilitizzle so dat tha \fBtype_info\fR nodes is unified between
the DSOs.
.Sp
An overview of these steez, they benefits n' how tha fuck ta use them
is at <\fBhttp://gcc.gnu.org/wiki/Visibility\fR>.
.IP "\fB\-fstrict\-volatile\-bitfields\fR" 4
.IX Item "-fstrict-volatile-bitfields"
This option should be used if accesses ta volatile bit-fieldz (or other
structure fields, although tha compila probably honors dem types
anyway) should bust a single access of tha width of the
fieldz type, aligned ta a natural alignment if possible.  For
example, targets wit memory-mapped peripheral registas might require
all such accesses ta be 16 bits wide; wit dis flag you can
declare all peripheral bit-fieldz as \f(CW\*(C`unsigned short\*(C'\fR (assumin short
is 16 bits on these targets) ta force \s-1GCC\s0 ta use 16\-bit accesses
instead of, like, a mo' efficient 32\-bit access.
.Sp
If dis option is disabled, tha compila uses da most thugged-out efficient
instruction. I aint talkin' bout chicken n' gravy biatch.  In tha previous example, dat might be a 32\-bit load
instruction, even though dat accesses bytes dat do not contain
any portion of tha bit-field, or memory-mapped registas unrelated to
the one bein updated.
.Sp
If tha target requires strict alignment, n' honorin tha field
type would require violatin dis alignment, a warnin is issued.
If tha field has \f(CW\*(C`packed\*(C'\fR attribute, tha access is done without
honorin tha field type.  If tha field aint gots \f(CW\*(C`packed\*(C'\fR
attribute, tha access is done honorin tha field type.  In both cases,
\&\s-1GCC\s0 assumes dat tha user knows suttin' bout tha target hardware
that it is unaware of.
.Sp
Da default value of dis option is determined by tha application binary
interface fo' tha target processor.
.IP "\fB\-fsync\-libcalls\fR" 4
.IX Item "-fsync-libcalls"
This option controls whether any out-of-line instizzle of tha \f(CW\*(C`_\|_sync\*(C'\fR
family of functions may be used ta implement tha \*(C+11 \f(CW\*(C`_\|_atomic\*(C'\fR
family of functions.
.Sp
Da default value of dis option is enabled, thus tha only useful form
of tha option is \fB\-fno\-sync\-libcalls\fR.  This option is used in
the implementation of tha \fIlibatomic\fR runtime library.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
This section raps bout nuff muthafuckin environment variablez dat affect how tha fuck \s-1GCC\s0
operates.  Some of dem work by specifyin directories or prefixes ta use
when searchin fo' various kindz of files.  Some is used ta specify other
aspectz of tha compilation environment.
.PP
Note dat you can also specify places ta search rockin options such as
\&\fB\-B\fR, \fB\-I\fR n' \fB\-L\fR.  These
take precedence over places specified rockin environment variables, which
in turn take precedence over dem specified by tha configuration of \s-1GCC.\s0
.IP "\fB\s-1LANG\s0\fR" 4
.IX Item "LANG"
.PD 0
.IP "\fB\s-1LC_CTYPE\s0\fR" 4
.IX Item "LC_CTYPE"
.IP "\fB\s-1LC_MESSAGES\s0\fR" 4
.IX Item "LC_MESSAGES"
.IP "\fB\s-1LC_ALL\s0\fR" 4
.IX Item "LC_ALL"
.PD
These environment variablez control tha way dat \s-1GCC\s0 uses
localization shiznit which allows \s-1GCC\s0 ta work wit different
nationistic conventions.  \s-1GCC\s0 inspects tha locale categories
\&\fB\s-1LC_CTYPE\s0\fR n' \fB\s-1LC_MESSAGES\s0\fR if it has been configured ta do
so.  These locale categories can be set ta any value supported by your
installation. I aint talkin' bout chicken n' gravy biatch.  A typical value is \fBen_GB.UTF\-8\fR fo' Gangsta up in tha United
Kingdom encoded up in \s-1UTF\-8.\s0
.Sp
Da \fB\s-1LC_CTYPE\s0\fR environment variable specifies character
classification. I aint talkin' bout chicken n' gravy biatch.  \s-1GCC\s0 uses it ta determine tha characta boundaries in
a string; dis is needed fo' some multibyte encodings dat contain quote
and escape charactas dat is otherwise interpreted as a string
end or escape.
.Sp
Da \fB\s-1LC_MESSAGES\s0\fR environment variable specifies tha language to
use up in diagnostic lyrics.
.Sp
If tha \fB\s-1LC_ALL\s0\fR environment variable is set, it overrides tha value
of \fB\s-1LC_CTYPE\s0\fR n' \fB\s-1LC_MESSAGES\s0\fR; otherwise, \fB\s-1LC_CTYPE\s0\fR
and \fB\s-1LC_MESSAGES\s0\fR default ta tha value of tha \fB\s-1LANG\s0\fR
environment variable.  If none of these variablez is set, \s-1GCC\s0
defaults ta traditionizzle C Gangsta behavior.
.IP "\fB\s-1TMPDIR\s0\fR" 4
.IX Item "TMPDIR"
If \fB\s-1TMPDIR\s0\fR is set, it specifies tha directory ta use fo' temporary
files.  \s-1GCC\s0 uses temporary filez ta hold tha output of one stage of
compilation which is ta be used as input ta tha next stage: fo' example,
the output of tha preprocessor, which is tha input ta tha compiler
proper.
.IP "\fB\s-1GCC_COMPARE_DEBUG\s0\fR" 4
.IX Item "GCC_COMPARE_DEBUG"
Settin \fB\s-1GCC_COMPARE_DEBUG\s0\fR is nearly equivalent ta passing
\&\fB\-fcompare\-debug\fR ta tha compila driver n' shit.  See tha documentation
of dis option fo' mo' details.
.IP "\fB\s-1GCC_EXEC_PREFIX\s0\fR" 4
.IX Item "GCC_EXEC_PREFIX"
If \fB\s-1GCC_EXEC_PREFIX\s0\fR is set, it specifies a prefix ta use up in the
namez of tha subprograms executed by tha compila n' shit.  No slash be added
when dis prefix is combined wit tha name of a subprogram yo, but you can
specify a prefix dat endz wit a slash if you wish.
.Sp
If \fB\s-1GCC_EXEC_PREFIX\s0\fR aint set, \s-1GCC\s0 attempts ta figure out
an appropriate prefix ta use based on tha pathname it is invoked with.
.Sp
If \s-1GCC\s0 cannot find tha subprogram rockin tha specified prefix, it
tries lookin up in tha usual places fo' tha subprogram.
.Sp
Da default value of \fB\s-1GCC_EXEC_PREFIX\s0\fR is
\&\fI\fIprefix\fI/lib/gcc/\fR where \fIprefix\fR is tha prefix to
the installed compila n' shit. In nuff cases \fIprefix\fR is tha value
of \f(CW\*(C`prefix\*(C'\fR when you ran tha \fIconfigure\fR script.
.Sp
Other prefixes specified wit \fB\-B\fR take precedence over dis prefix.
.Sp
This prefix be also used fo' findin filez like fuckin \fIcrt0.o\fR dat are
used fo' linking.
.Sp
In addition, tha prefix is used up in a unusual way up in findin the
directories ta search fo' header files.  For each of tha standard
directories whose name normally begins wit \fB/usr/local/lib/gcc\fR
(more precisely, wit tha value of \fB\s-1GCC_INCLUDE_DIR\s0\fR), \s-1GCC\s0 tries
replacin dat beginnin wit tha specified prefix ta produce an
alternate directory name.  Thus, wit \fB\-Bfoo/\fR, \s-1GCC\s0 searches
\&\fIfoo/bar\fR just before it searches tha standard directory 
\&\fI/usr/local/lib/bar\fR.
If a standard directory begins wit tha configured
\&\fIprefix\fR then tha value of \fIprefix\fR is replaced by
\&\fB\s-1GCC_EXEC_PREFIX\s0\fR when lookin fo' header files.
.IP "\fB\s-1COMPILER_PATH\s0\fR" 4
.IX Item "COMPILER_PATH"
Da value of \fB\s-1COMPILER_PATH\s0\fR be a cold-ass lil colon-separated list of
directories, much like \fB\s-1PATH\s0\fR.  \s-1GCC\s0 tries tha directories thus
specified when searchin fo' subprograms, if it can't find the
subprograms rockin \fB\s-1GCC_EXEC_PREFIX\s0\fR.
.IP "\fB\s-1LIBRARY_PATH\s0\fR" 4
.IX Item "LIBRARY_PATH"
Da value of \fB\s-1LIBRARY_PATH\s0\fR be a cold-ass lil colon-separated list of
directories, much like \fB\s-1PATH\s0\fR.  When configured as a natizzle compiler,
\&\s-1GCC\s0 tries tha directories thus specified when searchin fo' special
linker files, if it can't find dem rockin \fB\s-1GCC_EXEC_PREFIX\s0\fR.  Linking
usin \s-1GCC\s0 also uses these directories when searchin fo' ordinary
libraries fo' tha \fB\-l\fR option (but directories specified with
\&\fB\-L\fR come first).
.IP "\fB\s-1LANG\s0\fR" 4
.IX Item "LANG"
This variable is used ta pass locale shiznit ta tha compila n' shit.  One way in
which dis shiznit is used is ta determine tha characta set ta be used
when characta literals, strang literals n' comments is parsed up in C n' \*(C+.
When tha compila is configured ta allow multibyte characters,
the followin joints fo' \fB\s-1LANG\s0\fR is recognized:
.RS 4
.IP "\fBC\-JIS\fR" 4
.IX Item "C-JIS"
Recognize \s-1JIS\s0 characters.
.IP "\fBC\-SJIS\fR" 4
.IX Item "C-SJIS"
Recognize \s-1SJIS\s0 characters.
.IP "\fBC\-EUCJP\fR" 4
.IX Item "C-EUCJP"
Recognize \s-1EUCJP\s0 characters.
.RE
.RS 4
.Sp
If \fB\s-1LANG\s0\fR aint defined, or if it has some other value, then the
compila uses \f(CW\*(C`mblen\*(C'\fR n' \f(CW\*(C`mbtowc\*(C'\fR as defined by tha default locale to
recognize n' translate multibyte characters.
.RE
.PP
Some additionizzle environment variablez affect tha behavior of the
preprocessor.
.IP "\fB\s-1CPATH\s0\fR" 4
.IX Item "CPATH"
.PD 0
.IP "\fBC_INCLUDE_PATH\fR" 4
.IX Item "C_INCLUDE_PATH"
.IP "\fB\s-1CPLUS_INCLUDE_PATH\s0\fR" 4
.IX Item "CPLUS_INCLUDE_PATH"
.IP "\fB\s-1OBJC_INCLUDE_PATH\s0\fR" 4
.IX Item "OBJC_INCLUDE_PATH"
.PD
Each variablez value be a list of directories separated by a special
character, much like \fB\s-1PATH\s0\fR, up in which ta look fo' header files.
Da special character, \f(CW\*(C`PATH_SEPARATOR\*(C'\fR, is target-dependent and
determined at \s-1GCC\s0 build time.  For Microsizzlez Windows-based targets it be a
semicolon, n' fo' almost all other targets it aint nuthin but a cold-ass lil colon.
.Sp
\&\fB\s-1CPATH\s0\fR specifies a list of directories ta be searched as if
specified wit \fB\-I\fR yo, but afta any paths given wit \fB\-I\fR
options on tha command line.  This environment variable is used
regardless of which language is bein preprocessed.
.Sp
Da remainin environment variablez apply only when preprocessin the
particular language indicated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Each specifies a list of directories
to be searched as if specified wit \fB\-isystem\fR yo, but afta any
paths given wit \fB\-isystem\fR options on tha command line.
.Sp
In all these variables, a empty element instructs tha compila to
search its current hustlin directory.  Empty elements can step tha fuck up at the
beginnin or end of a path.  For instance, if tha value of
\&\fB\s-1CPATH\s0\fR is \f(CW\*(C`:/special/include\*(C'\fR, dat has tha same
effect as \fB\-I.\ \-I/special/include\fR.
.IP "\fB\s-1DEPENDENCIES_OUTPUT\s0\fR" 4
.IX Item "DEPENDENCIES_OUTPUT"
If dis variable is set, its value specifies how tha fuck ta output
dependencies fo' Make based on tha non-system header filez processed
by tha compila n' shit.  System header filez is ignored up in tha dependency
output.
.Sp
Da value of \fB\s-1DEPENDENCIES_OUTPUT\s0\fR can be just a gangbangin' file name, in
which case tha Make rulez is freestyled ta dat file, guessin tha target
name from tha source file name.  Or tha value can have tha form
\&\fIfile\fR\fB \fR\fItarget\fR, up in which case tha rulez is freestyled to
file \fIfile\fR rockin \fItarget\fR as tha target name.
.Sp
In other lyrics, dis environment variable is equivalent ta combining
the options \fB\-MM\fR n' \fB\-MF\fR,
with a optionizzle \fB\-MT\fR switch like a muthafucka.
.IP "\fB\s-1SUNPRO_DEPENDENCIES\s0\fR" 4
.IX Item "SUNPRO_DEPENDENCIES"
This variable is tha same ol' dirty as \fB\s-1DEPENDENCIES_OUTPUT\s0\fR (see above),
except dat system header filez is not ignored, so it implies
\&\fB\-M\fR rather than \fB\-MM\fR.  But fuck dat shiznit yo, tha word on tha street is dat tha dependence on the
main input file is omitted.
.SH "BUGS"
.IX Header "BUGS"
For instructions on reportin bugs, see
<\fBhttp://bugzilla.redhat.com/bugzilla\fR>.
.SH "FOOTNOTES"
.IX Header "FOOTNOTES"
.IP "1." 4
On some systems, \fBgcc \-shared\fR
needz ta build supplementary stub code fo' constructors ta work.  On
multi-libbed systems, \fBgcc \-shared\fR must select tha erect support
libraries ta link against.  Failin ta supply tha erect flags may lead
to subtle defects, n' you can put dat on yo' toast.  Supplyin dem up in cases where they is not necessary
is innocuous.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIgpl\fR\|(7), \fIgfdl\fR\|(7), \fIfsf\-funding\fR\|(7),
\&\fIcpp\fR\|(1), \fIgcov\fR\|(1), \fIas\fR\|(1), \fIld\fR\|(1), \fIgdb\fR\|(1), \fIadb\fR\|(1), \fIdbx\fR\|(1), \fIsdb\fR\|(1)
and tha Info entries fo' \fIgcc\fR, \fIcpp\fR, \fIas\fR,
\&\fIld\fR, \fIbinutils\fR n' \fIgdb\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
See tha Info entry fo' \fBgcc\fR, or
<\fBhttp://gcc.gnu.org/onlinedocs/gcc/Contributors.html\fR>,
for contributors ta \s-1GCC.\s0
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1988\-2013 Jacked Software Foundation, Inc.
.PP
Permission is granted ta copy, distribute and/or modify dis document
under tha termz of tha \s-1GNU\s0 Jacked Documentation License, Version 1.3 or
any lata version published by tha Jacked Software Foundation; wit the
Invariant Sections bein \*(L"\s-1GNU\s0 General Public License\*(R" n' \*(L"Funding
Jacked Software\*(R", tha Front-Cover texts bein (a) (see below), n' with
the Back-Cover Texts bein (b) (see below).  A copy of tha license is
included up in tha \fIgfdl\fR\|(7) playa page.
.PP
(a) Da \s-1FSF\s0z Front-Cover Text is:
.PP
.Vb 1
\&     A GNU Manual
.Ve
.PP
(b) Da \s-1FSF\s0z Back-Cover Text is:
.PP
.Vb 3
\&     Yo ass have freedom ta copy n' modify dis GNU Manual, like GNU
\&     software.  Copies published by tha Jacked Software Foundation raise
\&     fundz fo' GNU pimpment.
.Ve
