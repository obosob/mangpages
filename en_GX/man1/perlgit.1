.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLGIT 1"
.TH PERLGIT 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlgit \- Detailed shiznit bout git n' tha Perl repository
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document serves up details on rockin git ta pimp Perl. If yo ass is
just horny bout hustlin on a quick patch, peep perlhack first.
This document is intended fo' playas whoz ass is regular contributors to
Perl, includin dem wit write access ta tha git repository.
.SH "CLONING THE REPOSITORY"
.IX Header "CLONING THE REPOSITORY"
All of Perlz source code is kept centrally up in a Git repository at
\&\fIperl5.git.perl.org\fR.
.PP
Yo ass can cook up a read-only clone of tha repository by hustlin:
.PP
.Vb 1
\&  % git clone git://perl5.git.perl.org/perl.git perl
.Ve
.PP
This uses tha git protocol (port 9418).
.PP
If you cannot use tha git protocol fo' firewall reasons, you can also
clone via http, though dis is much slower:
.PP
.Vb 1
\&  % git clone http://perl5.git.perl.org/perl.git perl
.Ve
.SH "WORKING WITH THE REPOSITORY"
.IX Header "WORKING WITH THE REPOSITORY"
Once you have chizzled tha fuck into tha repository directory, you can inspect
it fo' realz. Afta a cold-ass lil clone tha repository will contain a single local branch,
which is ghon be tha current branch as well, as indicated by tha asterisk.
.PP
.Vb 2
\&  % git branch
\&  * blead
.Ve
.PP
Usin tha \-a switch ta \f(CW\*(C`branch\*(C'\fR will also show tha remote tracking
branches up in tha repository:
.PP
.Vb 5
\&  % git branch \-a
\&  * blead
\&    origin/HEAD
\&    origin/blead
\&  ...
.Ve
.PP
Da branches dat begin wit \*(L"origin\*(R" correspond ta tha \*(L"git remote\*(R"
that you cloned from (which is named \*(L"origin\*(R"). Each branch on the
remote is ghon be exactly tracked by these branches. Yo ass should \s-1NEVER\s0 do
work on these remote trackin branches. Yo ass only eva do work up in a
local branch. Local branches can be configured ta automerge (on pull)
from a thugged-out designated remote trackin branch. This is tha case wit the
default branch \f(CW\*(C`blead\*(C'\fR which is ghon be configured ta merge from the
remote trackin branch \f(CW\*(C`origin/blead\*(C'\fR.
.PP
Yo ass can peep recent commits:
.PP
.Vb 1
\&  % git log
.Ve
.PP
And pull freshly smoked up chizzlez from tha repository, n' update yo' local
repository (must be clean first)
.PP
.Vb 1
\&  % git pull
.Ve
.PP
Assumin we is on tha branch \f(CW\*(C`blead\*(C'\fR immediately afta a pull, this
command would be mo' or less equivalent to:
.PP
.Vb 2
\&  % git fetch
\&  % git merge origin/blead
.Ve
.PP
In fact if you wanna update yo' local repository without touching
your hustlin directory you do:
.PP
.Vb 1
\&  % git fetch
.Ve
.PP
And if you wanna update yo' remote-trackin branches fo' all defined
remotes simultaneously you can do
.PP
.Vb 1
\&  % git remote update
.Ve
.PP
Neither of these last two commandz will update yo' hustlin directory,
however both will update tha remote-trackin branches up in your
repository.
.PP
To cook up a local branch of a remote branch:
.PP
.Vb 1
\&  % git checkout \-b maint\-5.10 origin/maint\-5.10
.Ve
.PP
To switch back ta blead:
.PP
.Vb 1
\&  % git checkout blead
.Ve
.SS "Findin up yo' status"
.IX Subsection "Findin up yo' status"
Da most common git command yo big-ass booty is ghon use will probably be
.PP
.Vb 1
\&  % git status
.Ve
.PP
This command will produce as output a thugged-out description of tha current state
of tha repository, includin modified filez n' unignored untracked
files, n' up in addizzle it will show thangs like what tha fuck filez have been
staged fo' tha next commit, n' probably some useful shiznit about
how ta chizzle thangs. For instizzle tha following:
.PP
.Vb 10
\&  $ git status
\&  # On branch blead
\&  # Yo crazy-ass branch be ahead of \*(Aqorigin/blead\*(Aq by 1 commit.
\&  #
\&  # Chizzlez ta be committed:
\&  #   (use "git reset HEAD <file>..." ta unstage)
\&  #
\&  #       modified:   pod/perlgit.pod
\&  #
\&  # Chizzled but not updated:
\&  #   (use "git add <file>..." ta update what tha fuck is ghon be committed)
\&  #
\&  #       modified:   pod/perlgit.pod
\&  #
\&  # Untracked files:
\&  #   (use "git add <file>..." ta include up in what tha fuck is ghon be committed)
\&  #
\&  #       deliberate.untracked
.Ve
.PP
This shows dat there was chizzlez ta dis document staged fo' commit,
and dat there was further chizzlez up in tha hustlin directory not yet
staged. Y'all KNOW dat shit, muthafucka! Well shiiiit, it also shows dat there was a untracked file up in tha working
directory, n' as you can peep shows how tha fuck ta chizzle all of all dis bullshit. Well shiiiit, it also
shows dat there is one commit on tha hustlin branch \f(CW\*(C`blead\*(C'\fR which has
not been pushed ta tha \f(CW\*(C`origin\*(C'\fR remote yet. \fB\s-1NOTE\s0\fR: dat dis output
is also what tha fuck you peep as a template if you do not provide a message to
\&\f(CW\*(C`git commit\*(C'\fR.
.SS "Patch workflow"
.IX Subsection "Patch workflow"
First, please read perlhack fo' details on jackin tha Perl core.
That document covers nuff details on how tha fuck ta create a phat patch.
.PP
If you already gotz a Perl repository, you should ensure dat you on
the \fIblead\fR branch, n' yo' repository is up ta date:
.PP
.Vb 2
\&  % git checkout blead
\&  % git pull
.Ve
.PP
It aint nuthin but preferable ta patch against tha sickest fuckin blead version, since this
is where freshly smoked up pimpment occurs fo' all chizzlez other than critical bug
fixes. Critical bug fix patches should be made against tha relevant
maint branches, or should be submitted wit a note indicatin all the
branches where tha fix should be applied.
.PP
Now dat our crazy asses have every last muthafuckin thang up ta date, we need ta create a temporary
new branch fo' these chizzlez n' switch tha fuck into it:
.PP
.Vb 1
\&  % git checkout \-b orange
.Ve
.PP
which is tha short form of
.PP
.Vb 2
\&  % git branch orange
\&  % git checkout orange
.Ve
.PP
Creatin a topic branch make it easier fo' tha maintainers ta rebase
or merge back tha fuck into tha masta blead fo' a mo' linear history. If you
don't work on a topic branch tha maintainer has ta manually cherry pick
your chizzlez onto blead before they can be applied.
.PP
That'll git you scolded on perl5\-porters, so don't do dis shit. Be Awesome.
.PP
Then make yo' chizzles. For example, if Leon Brocard chizzlez his name
to Orange Brocard, we should chizzle his name up in tha \s-1AUTHORS\s0 file:
.PP
.Vb 1
\&  % perl \-pi \-e \*(Aqs{Leon Brocard}{Orange Brocard}\*(Aq AUTHORS
.Ve
.PP
Yo ass can peep what tha fuck filez is chizzled:
.PP
.Vb 7
\&  % git status
\&  # On branch orange
\&  # Chizzlez ta be committed:
\&  #   (use "git reset HEAD <file>..." ta unstage)
\&  #
\&  #    modified:   AUTHORS
\&  #
.Ve
.PP
And you can peep tha chizzles:
.PP
.Vb 10
\&  % git diff
\&  diff \-\-git a/AUTHORS b/AUTHORS
\&  index 293dd70..722c93e 100644
\&  \-\-\- a/AUTHORS
\&  +++ b/AUTHORS
\&  @@ \-541,7 +541,7 @@    Lars Heckin                   <lhecking@nmrc.ucc.ie>
\&   Laszlo Molnar                  <laszlo.molnar@eth.ericsson.se>
\&   Leif Huhn                      <leif@hale.dkstat.com>
\&   Len Johnston                    <lenjay@ibm.net>
\&  \-Leon Brocard                   <acme@astray.com>
\&  +Orange Brocard                 <acme@astray.com>
\&   Les Petas                     <lpeters@aol.net>
\&   Lesley Binks                   <lesley.binks@gmail.com>
\&   Lincoln D. Right back up in yo muthafuckin ass. Stein               <lstein@cshl.org>
.Ve
.PP
Now commit yo' chizzle locally:
.PP
.Vb 3
\&  % git commit \-a \-m \*(AqRename Leon Brocard ta Orange Brocard\*(Aq
\&  Created commit 6196c1d: Rename Leon Brocard ta Orange Brocard
\&   1 filez chizzled, 1 insertions(+), 1 deletions(\-)
.Ve
.PP
Da \f(CW\*(C`\-a\*(C'\fR option is used ta include all filez dat git tracks dat you
have chizzled. Y'all KNOW dat shit, muthafucka! If at dis time, you only wanna commit a shitload of the
filez you have hit dat shiznit on, you can omit tha \f(CW\*(C`\-a\*(C'\fR n' use tha command
\&\f(CW\*(C`git\ add\ \f(CIFILE\ ...\f(CW\*(C'\fR before bustin tha commit. \f(CW\*(C`git\ add\ \-\-interactive\*(C'\fR allows you ta even just commit portionz of files
instead of all tha chizzlez up in em.
.PP
Da \f(CW\*(C`\-m\*(C'\fR option is used ta specify tha commit message. If you omit it,
git will open a text editor fo' you ta compose tha message
interactively. This is useful when tha chizzlez is mo' complex than
the sample given here, and, dependin on tha editor, ta know dat the
first line of tha commit message don't exceed tha 50 characta legal
maximum.
.PP
Once you've finished freestylin yo' commit message n' exited your
editor, git will write yo' chizzle ta disk n' rap  suttin' like
this:
.PP
.Vb 2
\&  Created commit daf8e63: explain git status n' shiznit bout remotes
\&   1 filez chizzled, 83 insertions(+), 3 deletions(\-)
.Ve
.PP
If you re-run \f(CW\*(C`git status\*(C'\fR, you should peep suttin' like this:
.PP
.Vb 9
\&  % git status
\&  # On branch blead
\&  # Yo crazy-ass branch be ahead of \*(Aqorigin/blead\*(Aq by 2 commits.
\&  #
\&  # Untracked files:
\&  #   (use "git add <file>..." ta include up in what tha fuck is ghon be committed)
\&  #
\&  #       deliberate.untracked
\&  not a god damn thang added ta commit but untracked filez present (use "git add" ta track)
.Ve
.PP
When up in doubt, before you do anythang else, check yo' status n' read
it carefully, nuff thangs is answered directly by tha git status
output.
.PP
Yo ass can examine yo' last commit with:
.PP
.Vb 1
\&  % git show HEAD
.Ve
.PP
and if yo ass is not aiiight wit either tha description or tha patch
itself you can fix it up by editin tha filez once mo' n' then issue:
.PP
.Vb 1
\&  % git commit \-a \-\-amend
.Ve
.PP
Now you should create a patch file fo' all yo' local chizzles:
.PP
.Vb 2
\&  % git format\-patch \-M origin..
\&  0001\-Rename\-Leon\-Brocard\-to\-Orange\-Brocard.patch
.Ve
.PP
Yo ass should now bust a email to
perlbug@perl.org <mailto:perlbug@perl.org> wit a thugged-out description of your
changes, n' include dis patch file as a attachment. In addizzle to
bein tracked by \s-1RT,\s0 mail ta perlbug will automatically be forwarded to
perl5\-portas (with manual moderation, so please be patient). You
should only bust patches to
perl5\-porters@perl.org <mailto:perl5-porters@perl.org> directly if the
patch aint locked n loaded ta be applied yo, but intended fo' rap.
.PP
See tha next section fo' how tha fuck ta configure n' use git ta bust these
emails fo' yo thugged-out ass.
.PP
If you wanna delete yo' temporary branch, you may do so with:
.PP
.Vb 6
\&  % git checkout blead
\&  % git branch \-d orange
\&  error: Da branch \*(Aqorange\*(Aq aint a ancestor of yo' current HEAD.
\&  If yo ass is shizzle you wanna delete it, run \*(Aqgit branch \-D orange\*(Aq.
\&  % git branch \-D orange
\&  Deleted branch orange.
.Ve
.SS "Committin yo' chizzles"
.IX Subsection "Committin yo' chizzles"
Assumin dat you'd like ta commit all tha chizzlez you've made as a
single atomic unit, run dis command:
.PP
.Vb 1
\&   % git commit \-a
.Ve
.PP
(That \f(CW\*(C`\-a\*(C'\fR  drops some lyrics ta git ta add every last muthafuckin file you've chizzled ta dis commit.
New filez aren't automatically added ta yo' commit when you use
\&\f(CW\*(C`commit \-a\*(C'\fR If you wanna add filez or ta commit some yo, but not all of
your chizzles, gotz a peep tha documentation fo' \f(CW\*(C`git add\*(C'\fR.)
.PP
Git will start up yo' straight-up text editor, so dat you can craft a
commit message fo' yo' chizzle. Right back up in yo muthafuckin ass. See \*(L"Commit message\*(R" up in perlhack fo' more
information bout what tha fuck cook up a phat commit message.
.PP
Once you've finished freestylin yo' commit message n' exited your
editor, git will write yo' chizzle ta disk n' rap  suttin' like
this:
.PP
.Vb 2
\&  Created commit daf8e63: explain git status n' shiznit bout remotes
\&   1 filez chizzled, 83 insertions(+), 3 deletions(\-)
.Ve
.PP
If you re-run \f(CW\*(C`git status\*(C'\fR, you should peep suttin' like this:
.PP
.Vb 9
\&  % git status
\&  # On branch blead
\&  # Yo crazy-ass branch be ahead of \*(Aqorigin/blead\*(Aq by 2 commits.
\&  #
\&  # Untracked files:
\&  #   (use "git add <file>..." ta include up in what tha fuck is ghon be committed)
\&  #
\&  #       deliberate.untracked
\&  not a god damn thang added ta commit but untracked filez present (use "git add" ta track)
.Ve
.PP
When up in doubt, before you do anythang else, check yo' status n' read
it carefully, nuff thangs is answered directly by tha git status
output.
.SS "Usin git ta bust patch emails"
.IX Subsection "Usin git ta bust patch emails"
Please read perlhack first up in order ta figure up where yo' patches
should be sent.
.PP
In yo' ~/git/perl repository, set tha destination email ta perlz bug
tracker:
.PP
.Vb 1
\&  $ git config sendemail.to perlbug@perl.org
.Ve
.PP
Or maybe perl5\-porters:
.PP
.Vb 1
\&  $ git config sendemail.to perl5\-porters@perl.org
.Ve
.PP
Then you can use git directly ta bust yo' patch emails:
.PP
.Vb 1
\&  $ git send\-email 0001\-Rename\-Leon\-Brocard\-to\-Orange\-Brocard.patch
.Ve
.PP
Yo ass may need ta set some configuration variablez fo' yo' particular
email steez provider n' shit. For example, ta set yo' global git config to
send email via a gmail account:
.PP
.Vb 3
\&  $ git config \-\-global sendemail.smtpserver smtp.gmail.com
\&  $ git config \-\-global sendemail.smtpssl 1
\&  $ git config \-\-global sendemail.smtpuser YOURUSERNAME@gmail.com
.Ve
.PP
With dis configuration, yo big-ass booty is ghon be prompted fo' yo' gmail password
when you run 'git send\-email'. Yo ass can also configure
\&\f(CW\*(C`sendemail.smtppass\*(C'\fR wit yo' password if you couldn't give a fuckin shiznit bout having
your password up in tha .gitconfig file.
.SS "A note on derived files"
.IX Subsection "A note on derived files"
Be aware dat nuff filez up in tha distribution is derivative\*(--avoid
patchin them, cuz git won't peep tha chizzlez ta them, n' tha build
process will overwrite em. Patch tha originals instead. Y'all KNOW dat shit, muthafucka! Most
utilitizzles (like perldoc) is up in dis category, i.e. patch
\&\fIutils/perldoc.PL\fR rather than \fIutils/perldoc\fR. Right back up in yo muthafuckin ass. Similarly, don't
create patches fo' filez under \f(CW$src_root\fR/ext from they copies found in
\&\f(CW$install_root\fR/lib. If yo ass is unsure bout tha proper location of a
file dat may have gotten copied while buildin tha source
distribution, consult tha \f(CW\*(C`MANIFEST\*(C'\fR.
.SS "Cleanin a hustlin directory"
.IX Subsection "Cleanin a hustlin directory"
Da command \f(CW\*(C`git clean\*(C'\fR can wit varyin arguments be used as a
replacement fo' \f(CW\*(C`make clean\*(C'\fR.
.PP
To reset yo' hustlin directory ta a pristine condizzle you can do:
.PP
.Vb 1
\&  % git clean \-dxf
.Ve
.PP
But fuck dat shiznit yo, tha word on tha street is dat be aware dis will delete \s-1ALL\s0 untracked content. Yo ass can use
.PP
.Vb 1
\&  % git clean \-Xf
.Ve
.PP
to remove all ignored untracked files, like fuckin build n' test
bythang yo, but leave any  manually pimped filez ridin' solo.
.PP
If you only wanna quit some uncommitted edits, you can use \f(CW\*(C`git
checkout\*(C'\fR n' give it a list of filez ta be reverted, or \f(CW\*(C`git checkout
\&\-f\*(C'\fR ta revert dem all.
.PP
If you wanna quit one or nuff muthafuckin commits, you can use \f(CW\*(C`git reset\*(C'\fR.
.SS "Bisecting"
.IX Subsection "Bisecting"
\&\f(CW\*(C`git\*(C'\fR serves up a funky-ass built-in way ta determine which commit should be blamed
for introducin a given bug. \f(CW\*(C`git bisect\*(C'\fR performs a funky-ass binary search of
history ta locate tha straight-up original gangsta failin commit. Well shiiiit, it is fast, bangin and
flexible yo, but requires some setup n' ta automate tha process a auxiliary
shell script is needed.
.PP
Da core serves up a wrapper program, \fIPorting/bisect.pl\fR, which attempts to
simplify as much as possible, makin bisectin as simple as hustlin a Perl
one-liner n' shit. For example, if you wanna know when dis became a error:
.PP
.Vb 1
\&    perl \-e \*(Aqmy $a := 2\*(Aq
.Ve
.PP
you simply run this:
.PP
.Vb 1
\&    .../Porting/bisect.pl \-e \*(Aqmy $a := 2;\*(Aq
.Ve
.PP
Usin \f(CW\*(C`bisect.pl\*(C'\fR, wit one command (and no other files) itz easy as fuck  ta find
out
.IP "\(bu" 4
Which commit caused dis example code ta break?
.IP "\(bu" 4
Which commit caused dis example code ta start working?
.IP "\(bu" 4
Which commit added tha straight-up original gangsta file ta match dis regex?
.IP "\(bu" 4
Which commit removed tha last file ta match dis regex?
.PP
usually without needin ta know which versionz of perl ta use as start and
end revisions, as \fIbisect.pl\fR automatically searches ta find tha earliest
stable version fo' which tha test case passes. Run
\&\f(CW\*(C`Porting/bisect.pl \-\-help\*(C'\fR fo' tha full documentation, includin how tha fuck to
set tha \f(CW\*(C`Configure\*(C'\fR n' build time options.
.PP
If you require mo' flexibilitizzle than \fIPorting/bisect.pl\fR has ta offer, you'll
need ta run \f(CW\*(C`git bisect\*(C'\fR yo ass. It aint nuthin but most useful ta use \f(CW\*(C`git bisect run\*(C'\fR
to automate tha buildin n' testin of perl revisions. For dis you gonna need
a shell script fo' \f(CW\*(C`git\*(C'\fR ta booty-call ta test a particular revision. I aint talkin' bout chicken n' gravy biatch fo' realz. An example
script is \fIPorting/bisect\-example.sh\fR, which you should copy \fBoutside\fR of
the repository, as tha bisect process will reset tha state ta a cold-ass lil clean checkout
as it runs. Da instructions below assume dat you copied it as \fI~/run\fR and
then edited it as appropriate.
.PP
Yo ass first enta up in bisect mode with:
.PP
.Vb 1
\&  % git bisect start
.Ve
.PP
For example, if tha bug is present on \f(CW\*(C`HEAD\*(C'\fR but wasn't up in 5.10.0,
\&\f(CW\*(C`git\*(C'\fR will learn bout dis when you enter:
.PP
.Vb 3
\&  % git bisect bad
\&  % git bisect phat perl\-5.10.0
\&  Bisecting: 853 revisions left ta test afta this
.Ve
.PP
This thangs up in dis biatch up in checkin up tha median commit between \f(CW\*(C`HEAD\*(C'\fR and
\&\f(CW\*(C`perl\-5.10.0\*(C'\fR. Yo ass can then run tha bisectin process with:
.PP
.Vb 1
\&  % git bisect run ~/run
.Ve
.PP
When tha straight-up original gangsta wack commit is isolated, \f(CW\*(C`git bisect\*(C'\fR will rap  so:
.PP
.Vb 4
\&  ca4cfd28534303b82a216cfe83a1c80cbc3b9dc5 is first wack commit
\&  commit ca4cfd28534303b82a216cfe83a1c80cbc3b9dc5
\&  Author: Dizzle Mitchell <davem@fdisolutions.com>
\&  Date:   Sat Feb 9 14:56:23 2008 +0000
\&
\&      [perl #49472] Attributes + Unknown Error
\&      ...
\&
\&  bisect run success
.Ve
.PP
Yo ass can peek tha fuck into tha bisectin process wit \f(CW\*(C`git bisect log\*(C'\fR and
\&\f(CW\*(C`git bisect visualize\*(C'\fR. \f(CW\*(C`git bisect reset\*(C'\fR will git you outta bisect
mode.
.PP
Please note dat tha straight-up original gangsta \f(CW\*(C`good\*(C'\fR state must be a ancestor of the
first \f(CW\*(C`bad\*(C'\fR state. If you wanna search fo' tha commit dat \fIsolved\fR
some bug, you gotta negate yo' test case (i.e. exit wit \f(CW1\fR if \s-1OK\s0
and \f(CW0\fR if not) n' still mark tha lower bound as \f(CW\*(C`good\*(C'\fR n' the
upper as \f(CW\*(C`bad\*(C'\fR. Da \*(L"first wack commit\*(R" has then ta be understood as
the \*(L"first commit where tha bug is solved\*(R".
.PP
\&\f(CW\*(C`git help bisect\*(C'\fR has much mo' shiznit on how tha fuck you can tweak your
binary searches.
.SS "Topic branches n' rewritin history"
.IX Subsection "Topic branches n' rewritin history"
Individual committas should create topic branches under
\&\fByourname\fR/\fBsome_descriptive_name\fR. Other committas should check
with a topic branchz creator before makin any chizzle ta dat shit.
.PP
Da simplest way ta create a remote topic branch dat works on all
versionz of git is ta push tha current head as a freshly smoked up branch on the
remote, then check it up locally:
.PP
.Vb 3
\&  $ branch="$yourname/$some_descriptive_name"
\&  $ git push origin HEAD:$branch
\&  $ git checkout \-b $branch origin/$branch
.Ve
.PP
Userz of git 1.7 or newer can do it up in a mo' obvious manner:
.PP
.Vb 3
\&  $ branch="$yourname/$some_descriptive_name"
\&  $ git checkout \-b $branch
\&  $ git push origin \-u $branch
.Ve
.PP
If yo ass is not tha creator of \fByourname\fR/\fBsome_descriptive_name\fR, you
might sometimes find dat tha original gangsta lyricist has edited tha branch's
history. There is fuckin shitloadz of phat reasons fo' all dis bullshit. Right back up in yo muthafuckin ass. Sometimes, a author
might simply be rebasin tha branch onto a newer source point.
Sometimes, a lyricist might have found a error up in a early commit which
they wanted ta fix before mergin tha branch ta blead.
.PP
Currently tha masta repository is configured ta forbid
non-fast-forward merges. This means dat tha branches within can not be
rebased n' pushed as a single step.
.PP
Da only way yo big-ass booty is ghon eva be allowed ta rebase or modify tha history
of a pushed branch is ta delete it n' push it as a freshly smoked up branch under
the same name. Please be thinkin carefully bout bustin all dis bullshit. Well shiiiit, it may be
betta ta sequentially rename yo' branches so dat it is easier for
others hustlin wit you ta cherry-pick they local chizzlez onto tha new
version. I aint talkin' bout chicken n' gravy biatch. (\s-1XXX:\s0 needz explanation).
.PP
If you wanna rebase a underground topic branch, yo big-ass booty is ghon gotta delete
your existin topic branch n' push as a freshly smoked up version of dat shit. Yo ass can do
this via tha followin formula (see tha explanation bout \f(CW\*(C`refspec\*(C'\fR's
in tha git push documentation fo' details) afta you have rebased your
branch:
.PP
.Vb 4
\&   # first rebase
\&   $ git checkout $user/$topic
\&   $ git fetch
\&   $ git rebase origin/blead
\&
\&   # then "delete\-and\-push"
\&   $ git push origin :$user/$topic
\&   $ git push origin $user/$topic
.Ve
.PP
\&\fB\s-1NOTE:\s0\fR it is forbidden all up in tha repository level ta delete any of the
\&\*(L"primary\*(R" branches. That be any branch matching
\&\f(CW\*(C`m!^(blead|maint|perl)!\*(C'\fR fo' realz. Any attempt ta do so will result up in git
producin a error like this:
.PP
.Vb 7
\&    $ git push origin :blead
\&    *** It be forbidden ta delete blead/maint branches up in dis repository
\&    error: hooks/update exited wit error code 1
\&    error: hook declined ta update refs/heads/blead
\&    To ssh://perl5.git.perl.org/perl
\&     ! [remote rejected] blead (hook declined)
\&     error: failed ta push some refs ta \*(Aqssh://perl5.git.perl.org/perl\*(Aq
.Ve
.PP
As a matta of policy our phat asses do \fBnot\fR edit tha history of tha blead and
maint\-* branches. If a typo (or worse) sneaks tha fuck into a cold-ass lil commit ta blead or
maint\-*, we'll fix it up in another commit. Da only typez of thugged-out shit
allowed on these branches is \*(L"fast-forward's\*(R", where all history is
preserved.
.PP
Annotated tags up in tha canonical perl.git repository aint NEVER gonna be
deleted or modified. Y'all KNOW dat shit, muthafucka! Think long n' hard bout whether you wanna push
a local tag ta perl.git before bustin so. (Pushin unannotated tags is
not allowed.)
.SS "Grafts"
.IX Subsection "Grafts"
Da perl history gotz nuff one fuck up which was not caught up in the
conversion: a merge was recorded up in tha history between blead and
maint\-5.10 where no merge straight-up occurred. Y'all KNOW dat shit, muthafucka! Cuz of tha nature of git,
this is now impossible ta fix up in tha hood repository. Yo ass can remove
this mis-merge locally by addin tha followin line ta your
\&\f(CW\*(C`.git/info/grafts\*(C'\fR file:
.PP
.Vb 1
\&  296f12bbbbaa06de9be9d09d3dcf8f4528898a49 434946e0cb7a32589ed92d18008aaa1d88515930
.Ve
.PP
It be particularly blingin ta have dis graft line if any bisecting
is done up in tha area of tha \*(L"merge\*(R" up in question.
.SH "WRITE ACCESS TO THE GIT REPOSITORY"
.IX Header "WRITE ACCESS TO THE GIT REPOSITORY"
Once you have write access, yo big-ass booty is ghon need ta modify tha \s-1URL\s0 fo' the
origin remote ta enable pushing. Edit \fI.git/config\fR wit the
\&\fIgit\-config\fR\|(1) command:
.PP
.Vb 1
\&  % git config remote.origin.url ssh://perl5.git.perl.org/perl.git
.Ve
.PP
Yo ass can also set up yo' user name n' e\-mail address. Most playas do
this once globally up in they \fI~/.gitconfig\fR by bustin suttin' like:
.PP
.Vb 2
\&  % git config \-\-global user.name "\*(Aevar Arnfjo\*:r\*(d- Bjarmason"
\&  % git config \-\-global user.email avarab@gmail.com
.Ve
.PP
But fuck dat shiznit yo, tha word on tha street is dat if you'd like ta override dat just fo' perl, 
execute suttin' like tha followin up in \fIperl\fR:
.PP
.Vb 1
\&  % git config user.email avar@cpan.org
.Ve
.PP
It be also possible ta keep \f(CW\*(C`origin\*(C'\fR as a git remote, n' add a new
remote fo' ssh access:
.PP
.Vb 1
\&  % git remote add camel perl5.git.perl.org:/perl.git
.Ve
.PP
This allows you ta update yo' local repository by pullin from
\&\f(CW\*(C`origin\*(C'\fR, which is fasta n' don't require you ta authenticate, and
to push yo' chizzlez back wit tha \f(CW\*(C`camel\*(C'\fR remote:
.PP
.Vb 2
\&  % git fetch camel
\&  % git push camel
.Ve
.PP
Da \f(CW\*(C`fetch\*(C'\fR command just thugged-out shiznit tha \f(CW\*(C`camel\*(C'\fR refs, as tha objects
themselves should done been fetched when pullin from \f(CW\*(C`origin\*(C'\fR.
.SS "Acceptin a patch"
.IX Subsection "Acceptin a patch"
If you have received a patch file generated rockin tha above section,
you should hook up tha patch.
.PP
First we need ta create a temporary freshly smoked up branch fo' these chizzlez and
switch tha fuck into it:
.PP
.Vb 1
\&  % git checkout \-b experimental
.Ve
.PP
Patches dat was formatted by \f(CW\*(C`git format\-patch\*(C'\fR is applied with
\&\f(CW\*(C`git am\*(C'\fR:
.PP
.Vb 2
\&  % git be 0001\-Rename\-Leon\-Brocard\-to\-Orange\-Brocard.patch
\&  Applyin Rename Leon Brocard ta Orange Brocard
.Ve
.PP
If just a raw diff is provided, it be also possible use dis two-step
process:
.PP
.Vb 2
\&  % git apply bugfix.diff
\&  % git commit \-a \-m "Some fixing" \-\-author="That Guy <that.guy@internets.com>"
.Ve
.PP
Now we can inspect tha chizzle:
.PP
.Vb 4
\&  % git show HEAD
\&  commit b1b3dab48344cff6de4087efca3dbd63548ab5e2
\&  Author: Leon Brocard <acme@astray.com>
\&  Date:   Fri Dec 19 17:02:59 2008 +0000
\&
\&    Rename Leon Brocard ta Orange Brocard
\&
\&  diff \-\-git a/AUTHORS b/AUTHORS
\&  index 293dd70..722c93e 100644
\&  \-\-\- a/AUTHORS
\&  +++ b/AUTHORS
\&  @@ \-541,7 +541,7 @@ Lars Heckin                        <lhecking@nmrc.ucc.ie>
\&   Laszlo Molnar                  <laszlo.molnar@eth.ericsson.se>
\&   Leif Huhn                      <leif@hale.dkstat.com>
\&   Len Johnston                    <lenjay@ibm.net>
\&  \-Leon Brocard                   <acme@astray.com>
\&  +Orange Brocard                 <acme@astray.com>
\&   Les Petas                     <lpeters@aol.net>
\&   Lesley Binks                   <lesley.binks@gmail.com>
\&   Lincoln D. Right back up in yo muthafuckin ass. Stein               <lstein@cshl.org>
.Ve
.PP
If yo ass be a cold-ass lil committa ta Perl n' you be thinkin tha patch is good, you can
then merge it tha fuck into blead then push it up ta tha main repository:
.PP
.Vb 3
\&  % git checkout blead
\&  % git merge experimental
\&  % git push origin blead
.Ve
.PP
If you wanna delete yo' temporary branch, you may do so with:
.PP
.Vb 6
\&  % git checkout blead
\&  % git branch \-d experimental
\&  error: Da branch \*(Aqexperimental\*(Aq aint a ancestor of yo' current HEAD.
\&  If yo ass is shizzle you wanna delete it, run \*(Aqgit branch \-D experimental\*(Aq.
\&  % git branch \-D experimental
\&  Deleted branch experimental.
.Ve
.SS "Committin ta blead"
.IX Subsection "Committin ta blead"
Da 'blead' branch will become tha next thang release of Perl.
.PP
Before pushin \fIany\fR local chizzle ta blead, itz incredibly blingin
that you do all dem thangs, lest other committas come afta you with
pitchforks n' torches:
.IP "\(bu" 4
Make shizzle you gotz a phat commit message. Right back up in yo muthafuckin ass. See \*(L"Commit
message\*(R" up in perlhack fo' details.
.IP "\(bu" 4
Run tha test suite. Yo ass might not be thinkin dat one typo fix would break a
test file. You'd be wrong yo. Herez a example of where not hustlin the
suite caused problems fo' realz. A patch was submitted dat added a cold-ass lil couple
tests ta a existin .t. Well shiiiit, it couldn't possibly affect anythang else, so
no need ta test beyond tha single affected .t, right?  But, the
submitterz email address had chizzled since tha last of their
submissions, n' dis caused other tests ta fail. Hustlin tha test
target given up in tha next item would have caught dis problem.
.IP "\(bu" 4
If you don't run tha full test suite, at least \f(CW\*(C`make test_porting\*(C'\fR.
This will run basic sanitizzle checks. To peep which sanitizzle checks, have a
look up in \fIt/porting\fR.
.IP "\(bu" 4
If you make any chizzlez dat affect miniperl or core routines dat have
different code paths fo' miniperl, be shizzle ta run \f(CW\*(C`make minitest\*(C'\fR.
This will catch problems dat even tha full test suite aint gonna catch
because it runs a subset of tests under miniperl rather than perl.
.SS "On mergin n' rebasing"
.IX Subsection "On mergin n' rebasing"
Simple, one-off commits pushed ta tha 'blead' branch should be simple
commits dat apply cleanly.  In other lyrics, you should make shizzle your
work is committed against tha current posizzle of blead, so dat you can
push back ta tha masta repository without merging.
.PP
Sometimes, blead will move while you buildin or testin your
changes.  When dis happens, yo' push is ghon be rejected wit a message
like this:
.PP
.Vb 6
\&  To ssh://perl5.git.perl.org/perl.git
\&   ! [rejected]        blead \-> blead (non\-fast\-forward)
\&  error: failed ta push some refs ta \*(Aqssh://perl5.git.perl.org/perl.git\*(Aq
\&  To prevent you from losin history, non\-fast\-forward thugged-out shiznit was rejected
\&  Merge tha remote chizzlez (e.g. \*(Aqgit pull\*(Aq) before pushin again. I aint talkin' bout chicken n' gravy biatch.  See the
\&  \*(AqNote bout fast\-forwards\*(Aq section of \*(Aqgit push \-\-help\*(Aq fo' details.
.Ve
.PP
When dis happens, you can just \fIrebase\fR yo' work against tha new
posizzle of blead, like dis (assumin yo' remote fo' tha master
repository is \*(L"p5p\*(R"):
.PP
.Vb 2
\&  $ git fetch p5p
\&  $ git rebase p5p/blead
.Ve
.PP
Yo ass will peep yo' commits bein re-applied, n' yo big-ass booty is ghon then be able to
push safely.  Mo' shiznit bout rebasin can be found up in the
documentation fo' tha \fIgit\-rebase\fR\|(1) command.
.PP
For larger setz of commits dat only make sense together, or dat would
benefit from a summary of tha setz purpose, you should bust a merge
commit.  Yo ass should big-ass up yo' work on a topic branch, which you should regularly rebase
against blead ta ensure dat yo' code aint fucked up by blead moving.
When you have finished yo' work, please big-ass up a gangbangin' final rebase and
test.  Linear history is suttin' dat gets lost wit every
commit on blead yo, but a gangbangin' final rebase make tha history linear
again, makin it easier fo' future maintainers ta peep what tha fuck has
happened. Y'all KNOW dat shit, muthafucka!  Rebase as bigs up (assumin yo' work was on the
branch \f(CW\*(C`committer/somework\*(C'\fR):
.PP
.Vb 2
\&  $ git checkout committer/somework
\&  $ git rebase blead
.Ve
.PP
Then you can merge it tha fuck into masta like this:
.PP
.Vb 3
\&  $ git checkout blead
\&  $ git merge \-\-no\-ff \-\-no\-commit committer/somework
\&  $ git commit \-a
.Ve
.PP
Da switches above deserve explanation. I aint talkin' bout chicken n' gravy biatch.  \f(CW\*(C`\-\-no\-ff\*(C'\fR indicates dat even
if all yo' work can be applied linearly against blead, a merge commit
should still be prepared. Y'all KNOW dat shit, muthafucka!  This ensures dat all yo' work is ghon be shown
as a side branch, wit all its commits merged tha fuck into tha mainstream blead
by tha merge commit.
.PP
\&\f(CW\*(C`\-\-no\-commit\*(C'\fR means dat tha merge commit is ghon be \fIprepared\fR but not
\&\fIcommitted\fR.  Da commit is then straight-up performed when you run the
next command, which will brang up yo' editor ta describe tha commit.
Without \f(CW\*(C`\-\-no\-commit\*(C'\fR, tha commit would be made wit nearly no useful
message, which would pimped outly diminish tha value of tha merge commit as a
placeholda fo' tha workz description.
.PP
When describin tha merge commit, explain tha purpose of tha branch, and
keep up in mind dat dis description will probably be used by the
eventual release engineer when reviewin tha next perldelta document.
.SS "Committin ta maintenizzle versions"
.IX Subsection "Committin ta maintenizzle versions"
Maintenizzle versions should only be altered ta add critical bug fixes,
see perlpolicy.
.PP
To commit ta a maintenizzle version of perl, you need ta create a local
trackin branch:
.PP
.Vb 1
\&  % git checkout \-\-track \-b maint\-5.005 origin/maint\-5.005
.Ve
.PP
This creates a local branch named \f(CW\*(C`maint\-5.005\*(C'\fR, which tracks the
remote branch \f(CW\*(C`origin/maint\-5.005\*(C'\fR. Then you can pull, commit, merge
and push as before.
.PP
Yo ass can also cherry-pick commits from blead n' another branch, by
usin tha \f(CW\*(C`git cherry\-pick\*(C'\fR command. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is recommended ta use the
\&\fB\-x\fR option ta \f(CW\*(C`git cherry\-pick\*(C'\fR up in order ta record tha \s-1SHA1\s0 of the
original gangsta commit up in tha freshly smoked up commit message.
.PP
Before pushin any chizzle ta a maint version, make shizzle you've
satisfied tha steps up in \*(L"Committin ta blead\*(R" above.
.SS "Mergin from a funky-ass branch via GitHub"
.IX Subsection "Mergin from a funky-ass branch via GitHub"
While our phat asses don't encourage tha submission of patches via GitHub, that
will still happen. I aint talkin' bout chicken n' gravy biatch yo. Here be a guide ta mergin patches from a GitHub
repository.
.PP
.Vb 2
\&  % git remote add avar git://github.com/avar/perl.git
\&  % git fetch avar
.Ve
.PP
Now you can peep tha differences between tha branch n' blead:
.PP
.Vb 1
\&  % git diff avar/orange
.Ve
.PP
And you can peep tha commits:
.PP
.Vb 1
\&  % git log avar/orange
.Ve
.PP
If you approve of a specific commit, you can cherry pick it:
.PP
.Vb 1
\&  % git cherry\-pick 0c24b290ae02b2ab3304f51d5e11e85eb3659eae
.Ve
.PP
Or you could just merge tha whole branch if you like it all:
.PP
.Vb 1
\&  % git merge avar/orange
.Ve
.PP
And then push back ta tha repository:
.PP
.Vb 1
\&  % git push origin blead
.Ve
.SS "Usin a smoke-me branch ta test chizzles"
.IX Subsection "Usin a smoke-me branch ta test chizzles"
Sometimes a cold-ass lil chizzle affects code paths which you cannot test on tha OSes
which is directly available ta you n' it would be wise ta have users
on other OSes test tha chizzle before you commit it ta blead.
.PP
Fortunately, there be a way ta git yo' chizzle smoke-tested on various
OSes: push it ta a \*(L"smoke-me\*(R" branch n' wait fo' certain automated
smoke-testas ta report tha thangs up in dis biatch from they OSes.
.PP
Da procedure fo' bustin dis is roughly as bigs up (usin tha example of
of tonycs smoke-me branch called win32stat):
.PP
First, cook up a local branch n' switch ta it:
.PP
.Vb 1
\&  % git checkout \-b win32stat
.Ve
.PP
Make some chizzles, build perl n' test yo' chizzles, then commit dem to
your local branch. Then push yo' local branch ta a remote smoke-me
branch:
.PP
.Vb 1
\&  % git push origin win32stat:smoke\-me/tonyc/win32stat
.Ve
.PP
Now you can switch back ta blead locally:
.PP
.Vb 1
\&  % git checkout blead
.Ve
.PP
and continue hustlin on other thangs while you wait a thugged-out dizzle or two,
keepin a eye on tha thangs up in dis biatch reported fo' yo' smoke-me branch at
<http://perl.develop\-help.com/?b=smoke\-me/tonyc/win32state>.
.PP
If all is well then update yo' blead branch:
.PP
.Vb 1
\&  % git pull
.Ve
.PP
then checkout yo' smoke-me branch once mo' n' rebase it on blead:
.PP
.Vb 1
\&  % git rebase blead win32stat
.Ve
.PP
Now switch back ta blead n' merge yo' smoke-me branch tha fuck into it:
.PP
.Vb 2
\&  % git checkout blead
\&  % git merge win32stat
.Ve
.PP
As busted lyrics bout earlier, if there be nuff chizzlez on yo' smoke-me branch
then you should prepare a merge commit up in which ta give a overview of
those chizzlez by rockin tha followin command instead of tha last
command above:
.PP
.Vb 1
\&  % git merge win32stat \-\-no\-ff \-\-no\-commit
.Ve
.PP
Yo ass should now build perl n' test yo' (merged) chizzlez one last time
(ideally run tha whole test suite yo, but failin dat at least run the
\&\fIt/porting/*.t\fR tests) before pushin yo' chizzlez as usual:
.PP
.Vb 1
\&  % git push origin blead
.Ve
.PP
Finally, you should then delete tha remote smoke-me branch:
.PP
.Vb 1
\&  % git push origin :smoke\-me/tonyc/win32stat
.Ve
.PP
(which is likely ta produce a warnin like this, which can be ignored:
.PP
.Vb 2
\&  remote: fatal: ambiguous argument \*(Aqrefs/heads/smoke\-me/tonyc/win32stat\*(Aq: unknown revision or path not up in tha hustlin tree.
\&  remote: Use \*(Aq\-\-\*(Aq ta separate paths from revisions
.Ve
.PP
) n' then delete yo' local branch:
.PP
.Vb 1
\&  % git branch \-d win32stat
.Ve
.SS "A note on camel n' dromedary"
.IX Subsection "A note on camel n' dromedary"
Da committas have \s-1SSH\s0 access ta tha two servers dat serve
\&\f(CW\*(C`perl5.git.perl.org\*(C'\fR. One is \f(CW\*(C`perl5.git.perl.org\*(C'\fR itself (\fIcamel\fR),
which is tha 'master' repository. Da second one is
\&\f(CW\*(C`users.perl5.git.perl.org\*(C'\fR (\fIdromedary\fR), which can be used for
general testin n' pimpment. Dromedary syncs tha git tree from
camel every last muthafuckin few minutes, you should not push there, so peek-a-boo, clear tha way, I be comin' thru fo'sho. Both machines also
have a gangbangin' full \s-1CPAN\s0 mirror up in /srv/CPAN, please use all dis bullshit. To share files
with tha general public, dromedary serves yo' ~/public_html/ as
\&\f(CW\*(C`http://users.perl5.git.perl.org/~yourlogin/\*(C'\fR
.PP
These hosts have fairly strict firewalls ta tha outside. Outgoing, only
rsync, ssh n' git is allowed. Y'all KNOW dat shit, muthafucka! For http n' ftp, you can use
http://webproxy:3128 as proxy. Incoming, tha firewall tries ta detect
attacks n' blocks \s-1IP\s0 addresses wit suspicious activity. This
sometimes (but straight-up rarely) has false positives n' you might get
blocked. Y'all KNOW dat shit, muthafucka! Da quickest way ta git unblocked is ta notify tha admins.
.PP
These two boxes is owned, hosted, n' operated by booking.com. Yo ass can
reach tha sysadmins up in #p5p on irc.perl.org or via mail to
\&\f(CW\*(C`perl5\-porters@perl.org\*(C'\fR.
