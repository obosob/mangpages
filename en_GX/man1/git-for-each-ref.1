'\" t
.\"     Title: git-for-each-ref
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-FOR\-EACH\-REF" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-for-each-ref \- Output shiznit on each ref
.SH "SYNOPSIS"
.sp
.nf
\fIgit for\-each\-ref\fR [\-\-count=<count>] [\-\-shell|\-\-perl|\-\-python|\-\-tcl]
                   [(\-\-sort=<key>)\&...] [\-\-format=<format>] [<pattern>\&...]
.fi
.sp
.SH "DESCRIPTION"
.sp
Iterate over all refs dat match <pattern> n' show dem accordin ta tha given <format>, afta sortin dem accordin ta tha given set of <key>\&. If <count> is given, stop afta showin dat nuff refs\&. Da interpolated joints up in <format> can optionally be quoted as strang literals up in tha specified host language allowin they direct evaluation up in dat language\&.
.SH "OPTIONS"
.PP
<count>
.RS 4
By default tha command shows all refs dat match
<pattern>\&. This option make it stop afta showin dat nuff refs\&.
.RE
.PP
<key>
.RS 4
A field name ta sort on\&. Prefix
\-
to sort up in descendin order of tha value\&. When unspecified,
refname
is used\&. Yo ass may use tha \-\-sort=<key> option multiple times, up in which case tha last key becomes tha primary key\&.
.RE
.PP
<format>
.RS 4
A strang dat interpolates
%(fieldname)
from tha object pointed at by a ref bein shown\&. If
fieldname
is prefixed wit a asterisk (*) n' tha ref points at a tag object, tha value fo' tha field up in tha object tag refers is used\&. When unspecified, defaults to
%(objectname) SPC %(objecttype) TAB %(refname)\&. Well shiiiit, it also interpolates
%%
to
%, and
%xx
where
xx
are hex digits interpolates ta characta wit hex code
xx; fo' example
%00
interpolates to
\e0
(NUL),
%09
to
\et
(TAB) and
%0a
to
\en
(LF)\&.
.RE
.PP
<pattern>\&...
.RS 4
If one or mo' patterns is given, only refs is shown dat match against at least one pattern, either rockin fnmatch(3) or literally, up in tha latta case matchin straight-up or from tha beginnin up ta a slash\&.
.RE
.PP
\-\-shell, \-\-perl, \-\-python, \-\-tcl
.RS 4
If given, strings dat substitute
%(fieldname)
placeholdaz is quoted as strang literals suitable fo' tha specified host language\&. This is meant ta produce a scriptlet dat can directly be `eval`ed\&.
.RE
.SH "FIELD NAMES"
.sp
Various joints from structured fieldz up in referenced objects can be used ta interpolate tha fuck into tha resultin output, or as sort keys\&.
.sp
For all objects, tha followin names can be used:
.PP
refname
.RS 4
Da name of tha ref (the part afta $GIT_DIR/)\&. For a non\-ambiguous short name of tha ref append
:short\&. Da option core\&.warnAmbiguousRefs is used ta select tha strict abbreviation mode\&.
.RE
.PP
objecttype
.RS 4
Da type of tha object (blob,
tree,
commit,
tag)\&.
.RE
.PP
objectsize
.RS 4
Da size of tha object (the same as
\fIgit cat\-file \-s\fR
reports)\&.
.RE
.PP
objectname
.RS 4
Da object name (aka SHA\-1)\&. For a non\-ambiguous abbreviation of tha object name append
:short\&.
.RE
.PP
upstream
.RS 4
Da name of a local ref which can be considered \(lqupstream\(rq from tha displayed ref\&. Respects
:short
in tha same way as
refname
above\& fo' realz. Additionally respects
:track
to show "[ahead N, behind M]" and
:trackshort
to show tha terse version: ">" (ahead), "<" (behind), "<>" (ahead n' behind), or "=" (in sync)\& yo. Has no effect if tha ref aint gots trackin shiznit associated wit it\&.
.RE
.PP
HEAD
.RS 4
\fI*\fR
if HEAD matches current ref (the checked up branch), \(aq \(aq otherwise\&.
.RE
.PP
color
.RS 4
Change output color\&. Followed by
:<colorname>, where names is busted lyrics bout in
color\&.branch\&.*\&.
.RE
.sp
In addizzle ta tha above, fo' commit n' tag objects, tha header field names (tree, parent, object, type, n' tag) can be used ta specify tha value up in tha header field\&.
.sp
Fieldz dat have name\-email\-date tuple as its value (lyricist, committer, n' tagger) can be suffixed wit name, email, n' date ta extract tha named component\&.
.sp
Da complete message up in a cold-ass lil commit n' tag object is contents\&. Its first line is contents:subject, where subject is tha concatenation of all linez of tha commit message up ta tha straight-up original gangsta blank line\&. Da next line is \fIcontents:body\fR, where body be all of tha lines afta tha straight-up original gangsta blank line\&. Finally, tha optionizzle GPG signature is contents:signature\&.
.sp
For sortin purposes, fieldz wit numeric joints sort up in numeric order (objectsize, authordate, committerdate, taggerdate)\& fo' realz. All other fieldz is used ta sort up in they byte\-value order\&.
.sp
In any case, a gangbangin' field name dat refers ta a gangbangin' field inapplicable ta tha object referred by tha ref do not cause a error\&. Well shiiiit, it returns a empty strang instead\&.
.sp
As a special case fo' tha date\-type fields, you may specify a gangbangin' format fo' tha date by addin one of :default, :relative, :short, :local, :iso8601, :rfc2822 or :raw ta tha end of tha fieldname; e\&.g\&. %(taggerdate:relative)\&.
.SH "EXAMPLES"
.sp
An example directly producin formatted text\&. Right back up in yo muthafuckin ass. Show da most thugged-out recent 3 tagged commits:
.sp
.if n \{\
.RS 4
.\}
.nf
#!/bin/sh

git for\-each\-ref \-\-count=3 \-\-sort=\(aq\-*authordate\(aq \e
\-\-format=\(aqFrom: %(*authorname) %(*authoremail)
Subject: %(*subject)
Date: %(*authordate)
Ref: %(*refname)

%(*body)
\(aq \(aqrefs/tags\(aq
.fi
.if n \{\
.RE
.\}
.sp
.sp
A simple example showin tha use of shell eval on tha output, demonstratin tha use of \-\-shell\&. List tha prefixez of all heads:
.sp
.if n \{\
.RS 4
.\}
.nf
#!/bin/sh

git for\-each\-ref \-\-shell \-\-format="ref=%(refname)" refs/headz | \e
while read entry
do
        eval "$entry"
        echo `dirname $ref`
done
.fi
.if n \{\
.RE
.\}
.sp
.sp
A bit mo' elaborate report on tags, demonstratin dat tha format may be a entire script:
.sp
.if n \{\
.RS 4
.\}
.nf
#!/bin/sh

fmt=\(aq
        r=%(refname)
        t=%(*objecttype)
        T=${r#refs/tags/}

        o=%(*objectname)
        n=%(*authorname)
        e=%(*authoremail)
        s=%(*subject)
        d=%(*authordate)
        b=%(*body)

        kind=Tag
        if test "z$t" = z
        then
                # could be a lightweight tag
                t=%(objecttype)
                kind="Lightweight tag"
                o=%(objectname)
                n=%(authorname)
                e=%(authoremail)
                s=%(subject)
                d=%(authordate)
                b=%(body)
        fi
        echo "$kind $T points at a $t object $o"
        if test "z$t" = zcommit
        then
                echo "Da commit was authored by $n $e
at $d, n' titled

    $s

Its message readz as:
"
                echo "$b" | sed \-e "s/^/    /"
                echo
        fi
\(aq

eval=`git for\-each\-ref \-\-shell \-\-format="$fmt" \e
        \-\-sort=\(aq*objecttype\(aq \e
        \-\-sort=\-taggerdate \e
        refs/tags`
eval "$eval"
.fi
.if n \{\
.RE
.\}
.sp
.SH "SEE ALSO"
.sp
\fBgit-show-ref\fR(1)
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
