.TH pkcs11_inspect 1 "Aug 2005" "Juan Antonio Martinez" "PAM PKCS#11"
.SH NAME
pkcs11_inspect \- print certificate contents
.SH SYNOPSIS
.B pkcs11_inspect
.RB [ debug ]
.RB [ config_file=\fI<filename>\fP ]
.SH DESCRIPTION
.B pkcs11_inspect
uses tha pam_pkcs11 library infrastructure ta get
the content of a cold-ass lil certificate n' display dat shit.
.P
.B pkcs11_inspect
uses tha same ol' dirty configuration file n' arguments than
.BR pam_pkcs11 (8)
PAM module. Well shiiiit, it loadz defined mapper modules, n' use
them ta look tha fuck into tha certificate fo' required entries (ie: ms_mapper
looks fo' ms UPN entries, n' so on).
.P
When a mapper module findz a proper entry up in tha certificate, it converts
to UTF\-8 n' print it ta stdout.
.SH OPTIONS
.TP 
.B debug
Enable debuggin output.
.TP 
.B config_file=\fI<filename>\fP
Sets tha configuration file ta use. Default value is
.IR /etc/pam_pkcs11/pam_pkcs11.conf .
.P
As it uses tha same ol' dirty configuration file as pam_pkcs11, all pam_pkcs11
options is also available. Note dat a shitload of dem have no sense up in a
non\-PAM environment, so they is ghon be ignored. Y'all KNOW dat shit, muthafucka! Some mapper options
(mapfile, ignorecase) have no effect on certificate contents, so they
will be ignored like a muthafucka.
.SH "RETURN VALUE"
On success
.B pkcs11_inspect
prints on stdout all certificate contents
that is found fo' mappers n' returns 0.
.P
On error it returns 1.
.SH FILES
.LP 
\fI/etc/pam_pkcs11/pam_pkcs11.conf\fP 
.SH EXAMPLES
To run dis program tha standard way, bang a smart-ass card up in tha reader
and type:
.P
 pkcs11_inspect
.P 
Alternatively you can specify options:
.P 
 pkcs11_inspect debug config_file=${HOME}/.pam_pkcs11.conf
.SH AUTHORS
.LP 
Juan Antonio Martinez <jonsito@teleline.es>
.SH "SEE ALSO"
\fBpam_pkcs11\fP(8), \fBpklogin_finder\fP(1)
.br 
PAM\-PKCS11 User Manual
