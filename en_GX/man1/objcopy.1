.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OBJCOPY 1"
.TH OBJCOPY 1 "2013-03-25" "binutils-2.23.2" "GNU Development Tools"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
objcopy \- copy n' translate object files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
objcopy [\fB\-F\fR \fIbfdname\fR|\fB\-\-target=\fR\fIbfdname\fR]
        [\fB\-I\fR \fIbfdname\fR|\fB\-\-input\-target=\fR\fIbfdname\fR]
        [\fB\-O\fR \fIbfdname\fR|\fB\-\-output\-target=\fR\fIbfdname\fR]
        [\fB\-B\fR \fIbfdarch\fR|\fB\-\-binary\-architecture=\fR\fIbfdarch\fR]
        [\fB\-S\fR|\fB\-\-strip\-all\fR]
        [\fB\-g\fR|\fB\-\-strip\-debug\fR]
        [\fB\-K\fR \fIsymbolname\fR|\fB\-\-keep\-symbol=\fR\fIsymbolname\fR]
        [\fB\-N\fR \fIsymbolname\fR|\fB\-\-strip\-symbol=\fR\fIsymbolname\fR]
        [\fB\-\-strip\-unneeded\-symbol=\fR\fIsymbolname\fR]
        [\fB\-G\fR \fIsymbolname\fR|\fB\-\-keep\-global\-symbol=\fR\fIsymbolname\fR]
        [\fB\-\-localize\-hidden\fR]
        [\fB\-L\fR \fIsymbolname\fR|\fB\-\-localize\-symbol=\fR\fIsymbolname\fR]
        [\fB\-\-globalize\-symbol=\fR\fIsymbolname\fR]
        [\fB\-W\fR \fIsymbolname\fR|\fB\-\-weaken\-symbol=\fR\fIsymbolname\fR]
        [\fB\-w\fR|\fB\-\-wildcard\fR]
        [\fB\-x\fR|\fB\-\-discard\-all\fR]
        [\fB\-X\fR|\fB\-\-discard\-locals\fR]
        [\fB\-b\fR \fIbyte\fR|\fB\-\-byte=\fR\fIbyte\fR]
        [\fB\-i\fR [\fIbreadth\fR]|\fB\-\-interleave\fR[=\fIbreadth\fR]]
        [\fB\-\-interleave\-width=\fR\fIwidth\fR]
        [\fB\-j\fR \fIsectionname\fR|\fB\-\-only\-section=\fR\fIsectionname\fR]
        [\fB\-R\fR \fIsectionname\fR|\fB\-\-remove\-section=\fR\fIsectionname\fR]
        [\fB\-p\fR|\fB\-\-preserve\-dates\fR]
        [\fB\-D\fR|\fB\-\-enable\-deterministic\-archives\fR]
        [\fB\-U\fR|\fB\-\-disable\-deterministic\-archives\fR]
        [\fB\-\-debugging\fR]
        [\fB\-\-gap\-fill=\fR\fIval\fR]
        [\fB\-\-pad\-to=\fR\fIaddress\fR]
        [\fB\-\-set\-start=\fR\fIval\fR]
        [\fB\-\-adjust\-start=\fR\fIincr\fR]
        [\fB\-\-change\-addresses=\fR\fIincr\fR]
        [\fB\-\-change\-section\-address\fR \fIsection\fR{=,+,\-}\fIval\fR]
        [\fB\-\-change\-section\-lma\fR \fIsection\fR{=,+,\-}\fIval\fR]
        [\fB\-\-change\-section\-vma\fR \fIsection\fR{=,+,\-}\fIval\fR]
        [\fB\-\-change\-warnings\fR] [\fB\-\-no\-change\-warnings\fR]
        [\fB\-\-set\-section\-flags\fR \fIsection\fR=\fIflags\fR]
        [\fB\-\-add\-section\fR \fIsectionname\fR=\fIfilename\fR]
        [\fB\-\-rename\-section\fR \fIoldname\fR=\fInewname\fR[,\fIflags\fR]]
        [\fB\-\-long\-section\-names\fR {enable,disable,keep}]
        [\fB\-\-change\-leading\-char\fR] [\fB\-\-remove\-leading\-char\fR]
        [\fB\-\-reverse\-bytes=\fR\fInum\fR]
        [\fB\-\-srec\-len=\fR\fIival\fR] [\fB\-\-srec\-forceS3\fR]
        [\fB\-\-redefine\-sym\fR \fIold\fR=\fInew\fR]
        [\fB\-\-redefine\-syms=\fR\fIfilename\fR]
        [\fB\-\-weaken\fR]
        [\fB\-\-keep\-symbols=\fR\fIfilename\fR]
        [\fB\-\-strip\-symbols=\fR\fIfilename\fR]
        [\fB\-\-strip\-unneeded\-symbols=\fR\fIfilename\fR]
        [\fB\-\-keep\-global\-symbols=\fR\fIfilename\fR]
        [\fB\-\-localize\-symbols=\fR\fIfilename\fR]
        [\fB\-\-globalize\-symbols=\fR\fIfilename\fR]
        [\fB\-\-weaken\-symbols=\fR\fIfilename\fR]
        [\fB\-\-alt\-machine\-code=\fR\fIindex\fR]
        [\fB\-\-prefix\-symbols=\fR\fIstring\fR]
        [\fB\-\-prefix\-sections=\fR\fIstring\fR]
        [\fB\-\-prefix\-alloc\-sections=\fR\fIstring\fR]
        [\fB\-\-add\-gnu\-debuglink=\fR\fIpath-to-file\fR]
        [\fB\-\-keep\-file\-symbols\fR]
        [\fB\-\-only\-keep\-debug\fR]
        [\fB\-\-strip\-dwo\fR]
        [\fB\-\-extract\-dwo\fR]
        [\fB\-\-extract\-symbol\fR]
        [\fB\-\-writable\-text\fR]
        [\fB\-\-readonly\-text\fR]
        [\fB\-\-pure\fR]
        [\fB\-\-impure\fR]
        [\fB\-\-file\-alignment=\fR\fInum\fR]
        [\fB\-\-heap=\fR\fIsize\fR]
        [\fB\-\-image\-base=\fR\fIaddress\fR]
        [\fB\-\-section\-alignment=\fR\fInum\fR]
        [\fB\-\-stack=\fR\fIsize\fR]
        [\fB\-\-subsystem=\fR\fIwhich\fR:\fImajor\fR.\fIminor\fR]
        [\fB\-\-compress\-debug\-sections\fR]
        [\fB\-\-decompress\-debug\-sections\fR]
        [\fB\-\-dwarf\-depth=\fR\fIn\fR]
        [\fB\-\-dwarf\-start=\fR\fIn\fR]
        [\fB\-v\fR|\fB\-\-verbose\fR]
        [\fB\-V\fR|\fB\-\-version\fR]
        [\fB\-\-help\fR] [\fB\-\-info\fR]
        \fIinfile\fR [\fIoutfile\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \s-1GNU\s0 \fBobjcopy\fR utilitizzle copies tha contentz of a object
file ta another n' shit.  \fBobjcopy\fR uses tha \s-1GNU\s0 \s-1BFD\s0 Library to
read n' write tha object files.  It can write tha destination object
file up in a gangbangin' format different from dat of tha source object file.  The
exact behavior of \fBobjcopy\fR is controlled by command-line options.
Note dat \fBobjcopy\fR should be able ta copy a gangbangin' straight-up linked file
between any two formats, n' you can put dat on yo' toast. But fuck dat shiznit yo, tha word on tha street is dat copyin a relocatable object file
between any two formats may not work as expected.
.PP
\&\fBobjcopy\fR creates temporary filez ta do its translations and
deletes dem afterward. Y'all KNOW dat shit, muthafucka!  \fBobjcopy\fR uses \s-1BFD\s0 ta do all its
translation work; it has access ta all tha formats busted lyrics bout up in \s-1BFD\s0
and thus be able ta recognize most formats without bein holla'd at
explicitly.
.PP
\&\fBobjcopy\fR can be used ta generate S\-recordz by rockin a output
target of \fBsrec\fR (e.g., use \fB\-O srec\fR).
.PP
\&\fBobjcopy\fR can be used ta generate a raw binary file by rockin an
output target of \fBbinary\fR (e.g., use \fB\-O binary\fR).  When
\&\fBobjcopy\fR generates a raw binary file, it will essentially produce
a memory dump of tha contentz of tha input object file.  All symbols and
relocation shiznit is ghon be discarded. Y'all KNOW dat shit, muthafucka!  Da memory dump will start at
the load address of tha lowest section copied tha fuck into tha output file.
.PP
When generatin a S\-record or a raw binary file, it may be helpful to
use \fB\-S\fR ta remove sections containin debuggin shiznit. I aint talkin' bout chicken n' gravy biatch.  In
some cases \fB\-R\fR is ghon be useful ta remove sections which contain
information dat aint needed by tha binary file.
.PP
Note\-\-\-\fBobjcopy\fR aint able ta chizzle tha endiannizz of its input
files.  If tha input format has a endiannizz (some formats do not),
\&\fBobjcopy\fR can only copy tha inputs tha fuck into file formats dat have the
same endiannizz or which have no endiannizz (e.g., \fBsrec\fR).
(But fuck dat shiznit yo, tha word on tha street is dat peep tha \fB\-\-reverse\-bytes\fR option.)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fIinfile\fR" 4
.IX Item "infile"
.PD 0
.IP "\fIoutfile\fR" 4
.IX Item "outfile"
.PD
Da input n' output files, respectively.
If you do not specify \fIoutfile\fR, \fBobjcopy\fR creates a
temporary file n' destructively renames tha result with
the name of \fIinfile\fR.
.IP "\fB\-I\fR \fIbfdname\fR" 4
.IX Item "-I bfdname"
.PD 0
.IP "\fB\-\-input\-target=\fR\fIbfdname\fR" 4
.IX Item "--input-target=bfdname"
.PD
Consider tha source filez object format ta be \fIbfdname\fR, rather than
attemptin ta deduce dat shit.
.IP "\fB\-O\fR \fIbfdname\fR" 4
.IX Item "-O bfdname"
.PD 0
.IP "\fB\-\-output\-target=\fR\fIbfdname\fR" 4
.IX Item "--output-target=bfdname"
.PD
Write tha output file rockin tha object format \fIbfdname\fR.
.IP "\fB\-F\fR \fIbfdname\fR" 4
.IX Item "-F bfdname"
.PD 0
.IP "\fB\-\-target=\fR\fIbfdname\fR" 4
.IX Item "--target=bfdname"
.PD
Use \fIbfdname\fR as tha object format fo' both tha input n' tha output
file; i.e., simply transfer data from source ta destination wit no
translation.
.IP "\fB\-B\fR \fIbfdarch\fR" 4
.IX Item "-B bfdarch"
.PD 0
.IP "\fB\-\-binary\-architecture=\fR\fIbfdarch\fR" 4
.IX Item "--binary-architecture=bfdarch"
.PD
Useful when transformin a architecture-less input file tha fuck into a object file.
In dis case tha output architecture can be set ta \fIbfdarch\fR.  This
option is ghon be ignored if tha input file has a known \fIbfdarch\fR.  You
can access dis binary data inside a program by referencin tha special
symbols dat is pimped by tha conversion process.  These symbols are
called _binary_\fIobjfile\fR_start, _binary_\fIobjfile\fR_end and
_binary_\fIobjfile\fR_size.  e.g. you can transform a picture file into
an object file n' then access it up in yo' code rockin these symbols.
.IP "\fB\-j\fR \fIsectionname\fR" 4
.IX Item "-j sectionname"
.PD 0
.IP "\fB\-\-only\-section=\fR\fIsectionname\fR" 4
.IX Item "--only-section=sectionname"
.PD
Copy only tha named section from tha input file ta tha output file.
This option may be given mo' than once.  Note dat rockin dis option
inappropriately may make tha output file unusable.
.IP "\fB\-R\fR \fIsectionname\fR" 4
.IX Item "-R sectionname"
.PD 0
.IP "\fB\-\-remove\-section=\fR\fIsectionname\fR" 4
.IX Item "--remove-section=sectionname"
.PD
Remove any section named \fIsectionname\fR from tha output file.  This
option may be given mo' than once.  Note dat rockin dis option
inappropriately may make tha output file unusable.
.IP "\fB\-S\fR" 4
.IX Item "-S"
.PD 0
.IP "\fB\-\-strip\-all\fR" 4
.IX Item "--strip-all"
.PD
Do not copy relocation n' symbol shiznit from tha source file.
.IP "\fB\-g\fR" 4
.IX Item "-g"
.PD 0
.IP "\fB\-\-strip\-debug\fR" 4
.IX Item "--strip-debug"
.PD
Do not copy debuggin symbols or sections from tha source file.
.IP "\fB\-\-strip\-unneeded\fR" 4
.IX Item "--strip-unneeded"
Strip all symbols dat is not needed fo' relocation processing.
.IP "\fB\-K\fR \fIsymbolname\fR" 4
.IX Item "-K symbolname"
.PD 0
.IP "\fB\-\-keep\-symbol=\fR\fIsymbolname\fR" 4
.IX Item "--keep-symbol=symbolname"
.PD
When strippin symbols, keep symbol \fIsymbolname\fR even if it would
normally be stripped. Y'all KNOW dat shit, muthafucka!  This option may be given mo' than once.
.IP "\fB\-N\fR \fIsymbolname\fR" 4
.IX Item "-N symbolname"
.PD 0
.IP "\fB\-\-strip\-symbol=\fR\fIsymbolname\fR" 4
.IX Item "--strip-symbol=symbolname"
.PD
Do not copy symbol \fIsymbolname\fR from tha source file.  This option
may be given mo' than once.
.IP "\fB\-\-strip\-unneeded\-symbol=\fR\fIsymbolname\fR" 4
.IX Item "--strip-unneeded-symbol=symbolname"
Do not copy symbol \fIsymbolname\fR from tha source file unless it is needed
by a relocation. I aint talkin' bout chicken n' gravy biatch.  This option may be given mo' than once.
.IP "\fB\-G\fR \fIsymbolname\fR" 4
.IX Item "-G symbolname"
.PD 0
.IP "\fB\-\-keep\-global\-symbol=\fR\fIsymbolname\fR" 4
.IX Item "--keep-global-symbol=symbolname"
.PD
Keep only symbol \fIsymbolname\fR global. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Make all other symbols local
to tha file, so dat they is not visible externally.  This option may
be given mo' than once.
.IP "\fB\-\-localize\-hidden\fR" 4
.IX Item "--localize-hidden"
In a \s-1ELF\s0 object, mark all symbols dat have hidden or internal visibility
as local. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  This option applies on top of symbol-specific localization options
like fuckin \fB\-L\fR.
.IP "\fB\-L\fR \fIsymbolname\fR" 4
.IX Item "-L symbolname"
.PD 0
.IP "\fB\-\-localize\-symbol=\fR\fIsymbolname\fR" 4
.IX Item "--localize-symbol=symbolname"
.PD
Make symbol \fIsymbolname\fR local ta tha file, so dat it is not
visible externally.  This option may be given mo' than once.
.IP "\fB\-W\fR \fIsymbolname\fR" 4
.IX Item "-W symbolname"
.PD 0
.IP "\fB\-\-weaken\-symbol=\fR\fIsymbolname\fR" 4
.IX Item "--weaken-symbol=symbolname"
.PD
Make symbol \fIsymbolname\fR weak. This option may be given mo' than once.
.IP "\fB\-\-globalize\-symbol=\fR\fIsymbolname\fR" 4
.IX Item "--globalize-symbol=symbolname"
Give symbol \fIsymbolname\fR global scopin so dat it is visible
outside of tha file up in which it is defined. Y'all KNOW dat shit, muthafucka!  This option may be given
more than once.
.IP "\fB\-w\fR" 4
.IX Item "-w"
.PD 0
.IP "\fB\-\-wildcard\fR" 4
.IX Item "--wildcard"
.PD
Permit regular expressions up in \fIsymbolname\fRs used up in other command
line options.  Da question mark (?), asterisk (*), backslash (\e) and
square brackets ([]) operators can be used anywhere up in tha symbol
name.  If tha straight-up original gangsta characta of tha symbol name is tha exclamation
point (!) then tha sense of tha switch is reversed fo' dat symbol.
For example:
.Sp
.Vb 1
\&          \-w \-W !foo \-W fo*
.Ve
.Sp
would cause objcopy ta weaken all symbols dat start wit \*(L"fo\*(R"
except fo' tha symbol \*(L"foo\*(R".
.IP "\fB\-x\fR" 4
.IX Item "-x"
.PD 0
.IP "\fB\-\-discard\-all\fR" 4
.IX Item "--discard-all"
.PD
Do not copy non-global symbols from tha source file.
.IP "\fB\-X\fR" 4
.IX Item "-X"
.PD 0
.IP "\fB\-\-discard\-locals\fR" 4
.IX Item "--discard-locals"
.PD
Do not copy compiler-generated local symbols.
(These probably start wit \fBL\fR or \fB.\fR.)
.IP "\fB\-b\fR \fIbyte\fR" 4
.IX Item "-b byte"
.PD 0
.IP "\fB\-\-byte=\fR\fIbyte\fR" 4
.IX Item "--byte=byte"
.PD
If interleavin has been enabled via tha \fB\-\-interleave\fR option
then start tha range of bytes ta keep all up in tha \fIbyte\fRth byte.
\&\fIbyte\fR can be up in tha range from 0 ta \fIbreadth\fR\-1, where
\&\fIbreadth\fR is tha value given by tha \fB\-\-interleave\fR option.
.IP "\fB\-i [\fR\fIbreadth\fR\fB]\fR" 4
.IX Item "-i [breadth]"
.PD 0
.IP "\fB\-\-interleave[=\fR\fIbreadth\fR\fB]\fR" 4
.IX Item "--interleave[=breadth]"
.PD
Only copy a range outta every last muthafuckin \fIbreadth\fR bytes.  (Header data is
not affected).  Select which byte up in tha range begins tha copy with
the \fB\-\-byte\fR option. I aint talkin' bout chicken n' gravy biatch.  Select tha width of tha range wit the
\&\fB\-\-interleave\-width\fR option.
.Sp
This option is useful fo' bustin filez ta program \s-1ROM\s0.  It is
typically used wit a \f(CW\*(C`srec\*(C'\fR output target.  Note that
\&\fBobjcopy\fR will diss if you do not specify the
\&\fB\-\-byte\fR option as well.
.Sp
Da default interleave breadth is 4, so wit \fB\-\-byte\fR set ta 0,
\&\fBobjcopy\fR would copy tha straight-up original gangsta byte outta every last muthafuckin four bytes
from tha input ta tha output.
.IP "\fB\-\-interleave\-width=\fR\fIwidth\fR" 4
.IX Item "--interleave-width=width"
When used wit tha \fB\-\-interleave\fR option, copy \fIwidth\fR
bytes at a time.  Da start of tha range of bytes ta be copied is set
by tha \fB\-\-byte\fR option, n' tha extent of tha range is set with
the \fB\-\-interleave\fR option.
.Sp
Da default value fo' dis option is 1.  Da value of \fIwidth\fR plus
the \fIbyte\fR value set by tha \fB\-\-byte\fR option must not exceed
the interleave breadth set by tha \fB\-\-interleave\fR option.
.Sp
This option can be used ta create images fo' two 16\-bit flashes interleaved
in a 32\-bit bus by passin \fB\-b 0 \-i 4 \-\-interleave\-width=2\fR
and \fB\-b 2 \-i 4 \-\-interleave\-width=2\fR ta two \fBobjcopy\fR
commands.  If tha input was '12345678' then tha outputs would be
\&'1256' n' '3478' respectively.
.IP "\fB\-p\fR" 4
.IX Item "-p"
.PD 0
.IP "\fB\-\-preserve\-dates\fR" 4
.IX Item "--preserve-dates"
.PD
Set tha access n' modification datez of tha output file ta be tha same
as dem of tha input file.
.IP "\fB\-D\fR" 4
.IX Item "-D"
.PD 0
.IP "\fB\-\-enable\-deterministic\-archives\fR" 4
.IX Item "--enable-deterministic-archives"
.PD
Operate up in \fIdeterministic\fR mode.  When copyin archive members
and freestylin tha archive index, use zero fo' UIDs, GIDs, timestamps,
and use consistent file modes fo' all files.
.Sp
If \fIbinutils\fR was configured with
\&\fB\-\-enable\-deterministic\-archives\fR, then dis mode is on by default.
It can be disabled wit tha \fB\-U\fR option, below.
.IP "\fB\-U\fR" 4
.IX Item "-U"
.PD 0
.IP "\fB\-\-disable\-deterministic\-archives\fR" 4
.IX Item "--disable-deterministic-archives"
.PD
Do \fInot\fR operate up in \fIdeterministic\fR mode.  This is the
inverse of tha \fB\-D\fR option, above: when copyin archive members
and freestylin tha archive index, use they actual \s-1UID\s0, \s-1GID\s0, timestamp,
and file mode joints.
.Sp
This is tha default unless \fIbinutils\fR was configured with
\&\fB\-\-enable\-deterministic\-archives\fR.
.IP "\fB\-\-debugging\fR" 4
.IX Item "--debugging"
Convert debuggin shiznit, if possible.  This aint tha default
because only certain debuggin formats is supported, n' the
conversion process can be time consuming.
.IP "\fB\-\-gap\-fill\fR \fIval\fR" 4
.IX Item "--gap-fill val"
Fill gaps between sections wit \fIval\fR.  This operation applies to
the \fIload address\fR (\s-1LMA\s0) of tha sections.  It be done by increasing
the size of tha section wit tha lower address, n' fillin up in tha extra
space pimped wit \fIval\fR.
.IP "\fB\-\-pad\-to\fR \fIaddress\fR" 4
.IX Item "--pad-to address"
Pad tha output file up ta tha load address \fIaddress\fR.  This is
done by increasin tha size of tha last section. I aint talkin' bout chicken n' gravy biatch.  Da extra space is
filled up in wit tha value specified by \fB\-\-gap\-fill\fR (default zero).
.IP "\fB\-\-set\-start\fR \fIval\fR" 4
.IX Item "--set-start val"
Set tha start address of tha freshly smoked up file ta \fIval\fR.  Not all object file
formats support settin tha start address.
.IP "\fB\-\-change\-start\fR \fIincr\fR" 4
.IX Item "--change-start incr"
.PD 0
.IP "\fB\-\-adjust\-start\fR \fIincr\fR" 4
.IX Item "--adjust-start incr"
.PD
Change tha start address by addin \fIincr\fR.  Not all object file
formats support settin tha start address.
.IP "\fB\-\-change\-addresses\fR \fIincr\fR" 4
.IX Item "--change-addresses incr"
.PD 0
.IP "\fB\-\-adjust\-vma\fR \fIincr\fR" 4
.IX Item "--adjust-vma incr"
.PD
Change tha \s-1VMA\s0 n' \s-1LMA\s0 addressez of all sections, as well as tha start
address, by addin \fIincr\fR.  Some object file formats do not permit
section addresses ta be chizzled arbitrarily.  Note dat dis do not
relocate tha sections; if tha program expects sections ta be loaded at a
certain address, n' dis option is used ta chizzle tha sections such
that they is loaded at a gangbangin' finger-lickin' different address, tha program may fail.
.IP "\fB\-\-change\-section\-address\fR \fIsection\fR\fB{=,+,\-}\fR\fIval\fR" 4
.IX Item "--change-section-address section{=,+,-}val"
.PD 0
.IP "\fB\-\-adjust\-section\-vma\fR \fIsection\fR\fB{=,+,\-}\fR\fIval\fR" 4
.IX Item "--adjust-section-vma section{=,+,-}val"
.PD
Set or chizzle both tha \s-1VMA\s0 address n' tha \s-1LMA\s0 address of tha named
\&\fIsection\fR.  If \fB=\fR is used, tha section address is set to
\&\fIval\fR.  Otherwise, \fIval\fR be added ta or subtracted from the
section address.  See tha comments under \fB\-\-change\-addresses\fR,
above. If \fIsection\fR do not exist up in tha input file, a warnin will
be issued, unless \fB\-\-no\-change\-warnings\fR is used.
.IP "\fB\-\-change\-section\-lma\fR \fIsection\fR\fB{=,+,\-}\fR\fIval\fR" 4
.IX Item "--change-section-lma section{=,+,-}val"
Set or chizzle tha \s-1LMA\s0 address of tha named \fIsection\fR.  Da \s-1LMA\s0
address is tha address where tha section is ghon be loaded tha fuck into memory at
program load time.  Normally dis is tha same ol' dirty as tha \s-1VMA\s0 address, which
is tha address of tha section at program run time yo, but on some systems,
especially dem where a program is held up in \s-1ROM\s0, tha two can be
different.  If \fB=\fR is used, tha section address is set to
\&\fIval\fR.  Otherwise, \fIval\fR be added ta or subtracted from the
section address.  See tha comments under \fB\-\-change\-addresses\fR,
above.  If \fIsection\fR do not exist up in tha input file, a warning
will be issued, unless \fB\-\-no\-change\-warnings\fR is used.
.IP "\fB\-\-change\-section\-vma\fR \fIsection\fR\fB{=,+,\-}\fR\fIval\fR" 4
.IX Item "--change-section-vma section{=,+,-}val"
Set or chizzle tha \s-1VMA\s0 address of tha named \fIsection\fR.  Da \s-1VMA\s0
address is tha address where tha section is ghon be located once the
program has started executing.  Normally dis is tha same ol' dirty as tha \s-1LMA\s0
address, which is tha address where tha section is ghon be loaded into
memory yo, but on some systems, especially dem where a program is held in
\&\s-1ROM\s0, tha two can be different.  If \fB=\fR is used, tha section address
is set ta \fIval\fR.  Otherwise, \fIval\fR be added ta or subtracted
from tha section address.  See tha comments under
\&\fB\-\-change\-addresses\fR, above.  If \fIsection\fR do not exist in
the input file, a warnin is ghon be issued, unless
\&\fB\-\-no\-change\-warnings\fR is used.
.IP "\fB\-\-change\-warnings\fR" 4
.IX Item "--change-warnings"
.PD 0
.IP "\fB\-\-adjust\-warnings\fR" 4
.IX Item "--adjust-warnings"
.PD
If \fB\-\-change\-section\-address\fR or \fB\-\-change\-section\-lma\fR or
\&\fB\-\-change\-section\-vma\fR is used, n' tha named section do not
exist, issue a warning.  This is tha default.
.IP "\fB\-\-no\-change\-warnings\fR" 4
.IX Item "--no-change-warnings"
.PD 0
.IP "\fB\-\-no\-adjust\-warnings\fR" 4
.IX Item "--no-adjust-warnings"
.PD
Do not issue a warnin if \fB\-\-change\-section\-address\fR or
\&\fB\-\-adjust\-section\-lma\fR or \fB\-\-adjust\-section\-vma\fR is used, even
if tha named section do not exist.
.IP "\fB\-\-set\-section\-flags\fR \fIsection\fR\fB=\fR\fIflags\fR" 4
.IX Item "--set-section-flags section=flags"
Set tha flags fo' tha named section. I aint talkin' bout chicken n' gravy biatch.  Da \fIflags\fR argument be a
comma separated strang of flag names.  Da recognized names are
\&\fBalloc\fR, \fBcontents\fR, \fBload\fR, \fBnoload\fR,
\&\fBreadonly\fR, \fBcode\fR, \fBdata\fR, \fBrom\fR, \fBshare\fR, and
\&\fBdebug\fR.  Yo ass can set tha \fBcontents\fR flag fo' a section which
does not have contents yo, but it aint meaningful ta clear the
\&\fBcontents\fR flag of a section which do have contents\*(--just remove
the section instead. Y'all KNOW dat shit, muthafucka!  Not all flags is meaningful fo' all object file
formats.
.IP "\fB\-\-add\-section\fR \fIsectionname\fR\fB=\fR\fIfilename\fR" 4
.IX Item "--add-section sectionname=filename"
Add a freshly smoked up section named \fIsectionname\fR while copyin tha file.  The
contentz of tha freshly smoked up section is taken from tha file \fIfilename\fR.  The
size of tha section is ghon be tha size of tha file.  This option only
works on file formats which can support sections wit arbitrary names.
.IP "\fB\-\-rename\-section\fR \fIoldname\fR\fB=\fR\fInewname\fR\fB[,\fR\fIflags\fR\fB]\fR" 4
.IX Item "--rename-section oldname=newname[,flags]"
Rename a section from \fIoldname\fR ta \fInewname\fR, optionally
changin tha sectionz flags ta \fIflags\fR up in tha process.  This has
the advantage over usng a linker script ta big-ass up tha rename up in that
the output stays as a object file n' do not become a linked
executable.
.Sp
This option is particularly helpful when tha input format is binary,
since dis will always create a section called .data.  If fo' example,
you wanted instead ta create a section called .rodata containin binary
data you could use tha followin command line ta big up it:
.Sp
.Vb 3
\&          objcopy \-I binary \-O <output_format> \-B <architecture> \e
\&           \-\-rename\-section .data=.rodata,alloc,load,readonly,data,contents \e
\&           <input_binary_file> <output_object_file>
.Ve
.IP "\fB\-\-long\-section\-names {enable,disable,keep}\fR" 4
.IX Item "--long-section-names {enable,disable,keep}"
Controls tha handlin of long section names when processin \f(CW\*(C`COFF\*(C'\fR
and \f(CW\*(C`PE\-COFF\*(C'\fR object formats, n' you can put dat on yo' toast.  Da default behaviour, \fBkeep\fR,
is ta preserve long section names if any is present up in tha input file.
Da \fBenable\fR n' \fBdisable\fR options forcibly enable or disable
the use of long section names up in tha output object; when \fBdisable\fR
is up in effect, any long section names up in tha input object is ghon be truncated.
Da \fBenable\fR option will only emit long section names if any are
present up in tha inputs; dis is mostly tha same as \fBkeep\fR yo, but it
is left undefined whether tha \fBenable\fR option might force the
creation of a empty strang table up in tha output file.
.IP "\fB\-\-change\-leading\-char\fR" 4
.IX Item "--change-leading-char"
Some object file formats use special charactas all up in tha start of
symbols.  Da most common such characta is underscore, which compilers
often add before every last muthafuckin symbol.  This option  drops some lyrics ta \fBobjcopy\fR to
change tha leadin characta of every last muthafuckin symbol when it converts between
object file formats, n' you can put dat on yo' toast.  If tha object file formats use tha same leading
character, dis option has no effect.  Otherwise, it will add a
character, or remove a cold-ass lil character, or chizzle a cold-ass lil character, as
appropriate.
.IP "\fB\-\-remove\-leading\-char\fR" 4
.IX Item "--remove-leading-char"
If tha straight-up original gangsta characta of a global symbol be a special symbol leading
characta used by tha object file format, remove tha character n' shit.  The
most common symbol leadin characta is underscore.  This option will
remove a leadin underscore from all global symbols.  This can be useful
if you wanna link together objectz of different file formats with
different conventions fo' symbol names.  This is different from
\&\fB\-\-change\-leading\-char\fR cuz it always chizzlez tha symbol name
when appropriate, regardless of tha object file format of tha output
file.
.IP "\fB\-\-reverse\-bytes=\fR\fInum\fR" 4
.IX Item "--reverse-bytes=num"
Reverse tha bytes up in a section wit output contents, n' you can put dat on yo' toast.  A section length must
be evenly divisible by tha value given up in order fo' tha swap ta be able to
take place. Reversin takes place before tha interleavin is performed.
.Sp
This option is used typically up in generatin \s-1ROM\s0 images fo' problematic
target systems.  For example, on some target boards, tha 32\-bit lyrics
fetched from 8\-bit ROMs is re-assembled up in lil-endian byte order
regardless of tha \s-1CPU\s0 byte order n' shit.  Dependin on tha programmin model, the
endiannizz of tha \s-1ROM\s0 may need ta be modified.
.Sp
Consider a simple file wit a section containin tha followin eight
bytes:  \f(CW12345678\fR.
.Sp
Usin \fB\-\-reverse\-bytes=2\fR fo' tha above example, tha bytes up in the
output file would be ordered \f(CW21436587\fR.
.Sp
Usin \fB\-\-reverse\-bytes=4\fR fo' tha above example, tha bytes up in the
output file would be ordered \f(CW43218765\fR.
.Sp
By rockin \fB\-\-reverse\-bytes=2\fR fo' tha above example, followed by
\&\fB\-\-reverse\-bytes=4\fR on tha output file, tha bytes up in tha second
output file would be ordered \f(CW34127856\fR.
.IP "\fB\-\-srec\-len=\fR\fIival\fR" 4
.IX Item "--srec-len=ival"
Meaningful only fo' srec output.  Set tha maximum length of tha Srecords
bein produced ta \fIival\fR.  This length covers both address, data and
crc fields.
.IP "\fB\-\-srec\-forceS3\fR" 4
.IX Item "--srec-forceS3"
Meaningful only fo' srec output.  Avoid generation of S1/S2 records,
bustin S3\-only record format.
.IP "\fB\-\-redefine\-sym\fR \fIold\fR\fB=\fR\fInew\fR" 4
.IX Item "--redefine-sym old=new"
Change tha name of a symbol \fIold\fR, ta \fInew\fR.  This can be useful
when one is tryin link two thangs together fo' which you have no
source, n' there be name collisions.
.IP "\fB\-\-redefine\-syms=\fR\fIfilename\fR" 4
.IX Item "--redefine-syms=filename"
Apply \fB\-\-redefine\-sym\fR ta each symbol pair "\fIold\fR \fInew\fR"
listed up in tha file \fIfilename\fR.  \fIfilename\fR is simply a gangbangin' flat file,
with one symbol pair per line.  Line comments may be introduced by tha hash
character n' shit.  This option may be given mo' than once.
.IP "\fB\-\-weaken\fR" 4
.IX Item "--weaken"
Change all global symbols up in tha file ta be weak.  This can be useful
when buildin a object which is ghon be linked against other objects using
the \fB\-R\fR option ta tha linker n' shit.  This option is only effectizzle when
usin a object file format which supports weak symbols.
.IP "\fB\-\-keep\-symbols=\fR\fIfilename\fR" 4
.IX Item "--keep-symbols=filename"
Apply \fB\-\-keep\-symbol\fR option ta each symbol listed up in tha file
\&\fIfilename\fR.  \fIfilename\fR is simply a gangbangin' flat file, wit one symbol
name per line.  Line comments may be introduced by tha hash character.
This option may be given mo' than once.
.IP "\fB\-\-strip\-symbols=\fR\fIfilename\fR" 4
.IX Item "--strip-symbols=filename"
Apply \fB\-\-strip\-symbol\fR option ta each symbol listed up in tha file
\&\fIfilename\fR.  \fIfilename\fR is simply a gangbangin' flat file, wit one symbol
name per line.  Line comments may be introduced by tha hash character.
This option may be given mo' than once.
.IP "\fB\-\-strip\-unneeded\-symbols=\fR\fIfilename\fR" 4
.IX Item "--strip-unneeded-symbols=filename"
Apply \fB\-\-strip\-unneeded\-symbol\fR option ta each symbol listed in
the file \fIfilename\fR.  \fIfilename\fR is simply a gangbangin' flat file, wit one
symbol name per line.  Line comments may be introduced by tha hash
character n' shit.  This option may be given mo' than once.
.IP "\fB\-\-keep\-global\-symbols=\fR\fIfilename\fR" 4
.IX Item "--keep-global-symbols=filename"
Apply \fB\-\-keep\-global\-symbol\fR option ta each symbol listed up in the
file \fIfilename\fR.  \fIfilename\fR is simply a gangbangin' flat file, wit one
symbol name per line.  Line comments may be introduced by tha hash
character n' shit.  This option may be given mo' than once.
.IP "\fB\-\-localize\-symbols=\fR\fIfilename\fR" 4
.IX Item "--localize-symbols=filename"
Apply \fB\-\-localize\-symbol\fR option ta each symbol listed up in tha file
\&\fIfilename\fR.  \fIfilename\fR is simply a gangbangin' flat file, wit one symbol
name per line.  Line comments may be introduced by tha hash character.
This option may be given mo' than once.
.IP "\fB\-\-globalize\-symbols=\fR\fIfilename\fR" 4
.IX Item "--globalize-symbols=filename"
Apply \fB\-\-globalize\-symbol\fR option ta each symbol listed up in tha file
\&\fIfilename\fR.  \fIfilename\fR is simply a gangbangin' flat file, wit one symbol
name per line.  Line comments may be introduced by tha hash character.
This option may be given mo' than once.
.IP "\fB\-\-weaken\-symbols=\fR\fIfilename\fR" 4
.IX Item "--weaken-symbols=filename"
Apply \fB\-\-weaken\-symbol\fR option ta each symbol listed up in tha file
\&\fIfilename\fR.  \fIfilename\fR is simply a gangbangin' flat file, wit one symbol
name per line.  Line comments may be introduced by tha hash character.
This option may be given mo' than once.
.IP "\fB\-\-alt\-machine\-code=\fR\fIindex\fR" 4
.IX Item "--alt-machine-code=index"
If tha output architecture has alternate machine codes, use the
\&\fIindex\fRth code instead of tha default one.  This is useful up in case
a machine be assigned a straight-up legit code n' tha tool-chain adopts the
new code yo, but other applications still depend on tha original gangsta code
bein used. Y'all KNOW dat shit, muthafucka!  For \s-1ELF\s0 based architectures if tha \fIindex\fR
alternatizzle do not exist then tha value is treated as a absolute
number ta be stored up in tha e_machine field of tha \s-1ELF\s0 header.
.IP "\fB\-\-writable\-text\fR" 4
.IX Item "--writable-text"
Mark tha output text as writable.  This option aint meaningful fo' all
object file formats.
.IP "\fB\-\-readonly\-text\fR" 4
.IX Item "--readonly-text"
Make tha output text write protected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This option aint meaningful fo' all
object file formats.
.IP "\fB\-\-pure\fR" 4
.IX Item "--pure"
Mark tha output file as demand paged. Y'all KNOW dat shit, muthafucka!  This option aint meaningful fo' all
object file formats.
.IP "\fB\-\-impure\fR" 4
.IX Item "--impure"
Mark tha output file as impure.  This option aint meaningful fo' all
object file formats.
.IP "\fB\-\-prefix\-symbols=\fR\fIstring\fR" 4
.IX Item "--prefix-symbols=string"
Prefix all symbols up in tha output file wit \fIstring\fR.
.IP "\fB\-\-prefix\-sections=\fR\fIstring\fR" 4
.IX Item "--prefix-sections=string"
Prefix all section names up in tha output file wit \fIstring\fR.
.IP "\fB\-\-prefix\-alloc\-sections=\fR\fIstring\fR" 4
.IX Item "--prefix-alloc-sections=string"
Prefix all tha namez of all allocated sections up in tha output file with
\&\fIstring\fR.
.IP "\fB\-\-add\-gnu\-debuglink=\fR\fIpath-to-file\fR" 4
.IX Item "--add-gnu-debuglink=path-to-file"
Creates a .gnu_debuglink section which gotz nuff a reference ta \fIpath-to-file\fR
and addz it ta tha output file.
.IP "\fB\-\-keep\-file\-symbols\fR" 4
.IX Item "--keep-file-symbols"
When strippin a gangbangin' file, like wit \fB\-\-strip\-debug\fR or
\&\fB\-\-strip\-unneeded\fR, retain any symbols specifyin source file names,
which would otherwise git stripped.
.IP "\fB\-\-only\-keep\-debug\fR" 4
.IX Item "--only-keep-debug"
Strip a gangbangin' file, removin contentz of any sections dat would not be
stripped by \fB\-\-strip\-debug\fR n' leavin tha debuggin sections
intact.  In \s-1ELF\s0 files, dis preserves all note sections up in tha output.
.Sp
Da intention is dat dis option is ghon be used up in conjunction with
\&\fB\-\-add\-gnu\-debuglink\fR ta create a two part executable.  One a
stripped binary which will occupy less space up in \s-1RAM\s0 n' up in a
distribution n' tha second a thugged-out debuggin shiznit file which is only
needed if debuggin abilitizzles is required. Y'all KNOW dat shit, muthafucka!  Da suggested procedure
to create these filez be as bigs up:
.RS 4
.IP "1.<Link tha executable as normal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Assumin dat is is called>" 4
.IX Item "1.<Link tha executable as normal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Assumin dat is is called>"
\&\f(CW\*(C`foo\*(C'\fR then...
.ie n .IP "1.<Run ""objcopy \-\-only\-keep\-debug foo foo.dbg"" to>" 4
.el .IP "1.<Run \f(CWobjcopy \-\-only\-keep\-debug foo foo.dbg\fR to>" 4
.IX Item "1.<Run objcopy --only-keep-debug foo foo.dbg to>"
create a gangbangin' file containin tha debuggin info.
.ie n .IP "1.<Run ""objcopy \-\-strip\-debug foo"" ta create a>" 4
.el .IP "1.<Run \f(CWobjcopy \-\-strip\-debug foo\fR ta create a>" 4
.IX Item "1.<Run objcopy --strip-debug foo ta create a>"
stripped executable.
.ie n .IP "1.<Run ""objcopy \-\-add\-gnu\-debuglink=foo.dbg foo"">" 4
.el .IP "1.<Run \f(CWobjcopy \-\-add\-gnu\-debuglink=foo.dbg foo\fR>" 4
.IX Item "1.<Run objcopy --add-gnu-debuglink=foo.dbg foo>"
to add a link ta tha debuggin info tha fuck into tha stripped executable.
.RE
.RS 4
.Sp
Note\-\-\-the chizzle of \f(CW\*(C`.dbg\*(C'\fR as a extension fo' tha debug info
file be arbitrary.  Also tha \f(CW\*(C`\-\-only\-keep\-debug\*(C'\fR step is
optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Yo ass could instead do this:
.IP "1.<Link tha executable as normal.>" 4
.IX Item "1.<Link tha executable as normal.>"
.PD 0
.ie n .IP "1.<Copy ""foo"" ta  ""foo.full"">" 4
.el .IP "1.<Copy \f(CWfoo\fR ta  \f(CWfoo.full\fR>" 4
.IX Item "1.<Copy foo ta  foo.full>"
.ie n .IP "1.<Run ""objcopy \-\-strip\-debug foo"">" 4
.el .IP "1.<Run \f(CWobjcopy \-\-strip\-debug foo\fR>" 4
.IX Item "1.<Run objcopy --strip-debug foo>"
.ie n .IP "1.<Run ""objcopy \-\-add\-gnu\-debuglink=foo.full foo"">" 4
.el .IP "1.<Run \f(CWobjcopy \-\-add\-gnu\-debuglink=foo.full foo\fR>" 4
.IX Item "1.<Run objcopy --add-gnu-debuglink=foo.full foo>"
.RE
.RS 4
.PD
.Sp
i.e., tha file pointed ta by tha \fB\-\-add\-gnu\-debuglink\fR can be the
full executable.  It do not gotta be a gangbangin' file pimped by the
\&\fB\-\-only\-keep\-debug\fR switch.
.Sp
Note\-\-\-this switch is only intended fo' use on straight-up linked files.  It
does not make sense ta use it on object filez where tha debugging
information may be incomplete.  Besides tha gnu_debuglink feature
currently only supports tha presence of one filename containing
debuggin shiznit, not multiple filenames on a one-per-object-file
basis.
.RE
.IP "\fB\-\-strip\-dwo\fR" 4
.IX Item "--strip-dwo"
Remove tha contentz of all \s-1DWARF\s0 .dwo sections, leavin the
remainin debuggin sections n' all symbols intact.
This option is intended fo' use by tha compila as part of
the \fB\-gsplit\-dwarf\fR option, which splits debug shiznit
between tha .o file n' a separate .dwo file.  Da compiler
generates all debug shiznit up in tha same file, then uses
the \fB\-\-extract\-dwo\fR option ta copy tha .dwo sections to
the .dwo file, then tha \fB\-\-strip\-dwo\fR option ta remove
those sections from tha original gangsta .o file.
.IP "\fB\-\-extract\-dwo\fR" 4
.IX Item "--extract-dwo"
Extract tha contentz of all \s-1DWARF\s0 .dwo sections.  See the
\&\fB\-\-strip\-dwo\fR option fo' mo' shiznit.
.IP "\fB\-\-file\-alignment\fR \fInum\fR" 4
.IX Item "--file-alignment num"
Specify tha file alignment.  Sections up in tha file will always begin at
file offsets which is multiplez of dis number n' shit.  This defaults to
512.
[This option is specific ta \s-1PE\s0 targets.]
.IP "\fB\-\-heap\fR \fIreserve\fR" 4
.IX Item "--heap reserve"
.PD 0
.IP "\fB\-\-heap\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
.IX Item "--heap reserve,commit"
.PD
Specify tha number of bytez of memory ta reserve (and optionally commit)
to be used as heap fo' dis program.
[This option is specific ta \s-1PE\s0 targets.]
.IP "\fB\-\-image\-base\fR \fIvalue\fR" 4
.IX Item "--image-base value"
Use \fIvalue\fR as tha base address of yo' program or dll.  This is
the lowest memory location dat is ghon be used when yo' program or dll
is loaded. Y'all KNOW dat shit, muthafucka!  To reduce tha need ta relocate n' improve performizzle of
your dlls, each should gotz a unique base address n' not overlap any
other dlls.  Da default is 0x400000 fo' executables, n' 0x10000000
for dlls.
[This option is specific ta \s-1PE\s0 targets.]
.IP "\fB\-\-section\-alignment\fR \fInum\fR" 4
.IX Item "--section-alignment num"
Sets tha section alignment.  Sections up in memory will always begin at
addresses which is a multiple of dis number n' shit.  Defaults ta 0x1000.
[This option is specific ta \s-1PE\s0 targets.]
.IP "\fB\-\-stack\fR \fIreserve\fR" 4
.IX Item "--stack reserve"
.PD 0
.IP "\fB\-\-stack\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
.IX Item "--stack reserve,commit"
.PD
Specify tha number of bytez of memory ta reserve (and optionally commit)
to be used as stack fo' dis program.
[This option is specific ta \s-1PE\s0 targets.]
.IP "\fB\-\-subsystem\fR \fIwhich\fR" 4
.IX Item "--subsystem which"
.PD 0
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR" 4
.IX Item "--subsystem which:major"
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR\fB.\fR\fIminor\fR" 4
.IX Item "--subsystem which:major.minor"
.PD
Specifies tha subsystem under which yo' program will execute.  The
legal joints fo' \fIwhich\fR is \f(CW\*(C`native\*(C'\fR, \f(CW\*(C`windows\*(C'\fR,
\&\f(CW\*(C`console\*(C'\fR, \f(CW\*(C`posix\*(C'\fR, \f(CW\*(C`efi\-app\*(C'\fR, \f(CW\*(C`efi\-bsd\*(C'\fR,
\&\f(CW\*(C`efi\-rtd\*(C'\fR, \f(CW\*(C`sal\-rtd\*(C'\fR, n' \f(CW\*(C`xbox\*(C'\fR.  Yo ass may optionally set
the subsystem version also.  Numeric joints is also accepted for
\&\fIwhich\fR.
[This option is specific ta \s-1PE\s0 targets.]
.IP "\fB\-\-extract\-symbol\fR" 4
.IX Item "--extract-symbol"
Keep tha filez section flags n' symbols but remove all section data.
Specifically, tha option:
.RS 4
.IP "*<removes tha contentz of all sections;>" 4
.IX Item "*<removes tha contentz of all sections;>"
.PD 0
.IP "*<sets tha size of every last muthafuckin section ta zero; and>" 4
.IX Item "*<sets tha size of every last muthafuckin section ta zero; and>"
.IP "*<sets tha filez start address ta zero.>" 4
.IX Item "*<sets tha filez start address ta zero.>"
.RE
.RS 4
.PD
.Sp
This option is used ta build a \fI.sym\fR file fo' a VxWorks kernel.
It can also be a useful way of reducin tha size of a \fB\-\-just\-symbols\fR
linker input file.
.RE
.IP "\fB\-\-compress\-debug\-sections\fR" 4
.IX Item "--compress-debug-sections"
Compress \s-1DWARF\s0 debug sections rockin zlib.
.IP "\fB\-\-decompress\-debug\-sections\fR" 4
.IX Item "--decompress-debug-sections"
Decompress \s-1DWARF\s0 debug sections rockin zlib.
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
Show tha version number of \fBobjcopy\fR.
.IP "\fB\-v\fR" 4
.IX Item "-v"
.PD 0
.IP "\fB\-\-verbose\fR" 4
.IX Item "--verbose"
.PD
Verbose output: list all object filez modified. Y'all KNOW dat shit, muthafucka!  In tha case of
archives, \fBobjcopy \-V\fR lists all thugz of tha archive.
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Show a summary of tha options ta \fBobjcopy\fR.
.IP "\fB\-\-info\fR" 4
.IX Item "--info"
Display a list showin all architectures n' object formats available.
.IP "\fB@\fR\fIfile\fR" 4
.IX Item "@file"
Read command-line options from \fIfile\fR.  Da options read are
inserted up in place of tha original gangsta @\fIfile\fR option. I aint talkin' bout chicken n' gravy biatch.  If \fIfile\fR
does not exist, or cannot be read, then tha option is ghon be treated
literally, n' not removed.
.Sp
Options up in \fIfile\fR is separated by whitespace.  A whitespace
characta may be included up in a option by surroundin tha entire
option up in either single or double quotes.  Any characta (includin a
backslash) may be included by prefixin tha characta ta be included
with a funky-ass backslash.  Da \fIfile\fR may itself contain additional
@\fIfile\fR options; any such options is ghon be processed recursively.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIld\fR\|(1), \fIobjdump\fR\|(1), n' tha Info entries fo' \fIbinutils\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010, 2011, 2012
Jacked Software Foundation, Inc.
.PP
Permission is granted ta copy, distribute and/or modify dis document
under tha termz of tha \s-1GNU\s0 Jacked Documentation License, Version 1.3
or any lata version published by tha Jacked Software Foundation;
with no Invariant Sections, wit no Front-Cover Texts, n' wit no
Back-Cover Texts, n' you can put dat on yo' toast.  A copy of tha license is included up in the
section entitled \*(L"\s-1GNU\s0 Jacked Documentation License\*(R".
