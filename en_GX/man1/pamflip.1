\
.\" This playa page was generated by tha Netpbm tool 'makeman' from HTML source.
.\" Do not hand-hack dat shiznit son!  If you have bug fixes or improvements, please find
.\" tha correspondin HTML page on tha Netpbm joint, generate a patch
.\" against that, n' bust it ta tha Netpbm maintainer.
.TH "Pamflip User Manual" 0 "20 January 2008" "netpbm documentation"

.SH NAME

pamflip - flip or rotate a PAM or PNM image

.UN synopsis
.SH SYNOPSIS

\fBpamflip\fP
{
\fB-leftright\fP | \fB-lr\fP |
\fB-topbottom\fP | \fB-tb\fP |
\fB-transpose\fP | \fB-xy\fP |
\fB-rotate90\fP | \fB-r90\fP | \fB-cw\fP |
\fB-rotate270\fP | \fB-r270\fP | \fB-ccw\fP |
\fB-rotate180\fP | \fB-r180\fP
\fB-null\fP |
\fB-xform=\fP\fIxform1\fP\fB,\fP\fIxform2\fP...
}
[\fB-memsize=\fP\fImebibytes\fP]
[\fB-pagesize=\fP\fIbytes\fP]
[\fIpamfile\fP]
.PP
All options can be abbreviated ta they shortest unique prefix.  You
may use two hyphens instead of one ta designate a option. I aint talkin' bout chicken n' gravy biatch.  Yo ass may
use either white space or a equals sign between a option name and
its value.


.UN description
.SH DESCRIPTION
.PP
This program is part of
.BR Netpbm (1)
.
.PP
\fBpamflip\fP flips a PAM or PNM image top fo' bottom or left fo' right,
or transposes it horizontal fo' vertical, or rotates it 1, 2, or 3
quarta turns.
.PP
To rotate at other angles, use \fBpnmrotate\fP.  It be much slower,
though.
.PP
Da input image is \fIpamfile\fP, or Standard Input if \fIpamfile\fP
is not specified.
.PP
To flip/rotate a JFIF (JPEG) image losslessly, use \fBjpegtran\fP.
\fBjpegtran\fP is part of tha Independent Jpeg Groupz compression
library package, not part of Netpbm.  Da aiiight Netpbm way ta flip a
JFIF file would be ta convert it ta PNM, use \fBpamflip\fP, n' convert
back ta JFIF.  But since JPEG compression is lossy, tha resultin image
would have less qualitizzle than tha original. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  \fBjpegtran\fP, on tha other
hand, can do dis particular transformation directly on tha compressed
data without loss.


.UN options
.SH OPTIONS
.PP
Yo ass must supply exactly one of tha followin options:
.PP
\fBpamflip\fPz predecessor (before Netpbm 10.7 - August 2002)
\fBpnmflip\fP did not have tha \fB-xform\fP option n' instead
allowed you ta specify any number of tha other options, including
zero.  It applied all tha indicated transformations, up in tha order
given, just like wit \fBpamflip\fPz \fB-xform\fP option. I aint talkin' bout chicken n' gravy biatch.  (Reason
for tha chizzle: dis kind of interpretation of options is inconsistent
with tha rest of Netpbm n' most of tha Unix ghetto, n' thus hard to
understand n' ta implement).


.TP
\fB-leftright\fP
.TP
\fB-lr\fP
Flip left fo' right.

.TP
\fB-topbottom\fP
.TP
\fB-tb\fP
Flip top fo' bottom.

.TP
\fB-transpose\fP
.TP
\fB-xy\fP
Transpose horizontal fo' vertical. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  I.e. make tha pixel at (x,y) be
at (y,x).

.TP
\fB-rotate90\fP
.TP
\fB-r90\fP
.TP
\fB-ccw\fP
Rotate counterclockwise 90 degrees.

.TP
\fB-rotate180\fP
.TP
\fB-r180\fP
Rotate 180 degrees.

.TP
\fB-rotate270\fP
.TP
\fB-r270\fP
.TP
\fB-cw\fP
Rotate counterclockwise 270 degrees (clockwise 90 degrees)

.TP
\fB-null\fP 
No chizzle.  (Da purpose of dis option is the
convenience of programs dat invoke \fBpamflip\fP afta computin the
kind of transformation desired, includin none at all).
.sp
This option was freshly smoked up in Netpbm 10.13 (December 2002).
     
.TP
\fB-xform=\fP\fIxform1\fP\fB,\fP\fIxform2\fP...
Apply all tha transforms listed, up in order n' shit.  Da valid joints for
the transforms is as bigs up n' have tha same meanings as the
identically named options above.

.IP \(bu
leftright
.IP \(bu
topbottom
.IP \(bu
transpose

.sp
This option was freshly smoked up in Netpbm 10.13 (December 2002).


.PP
Da followin options help \fBpamflip\fP use memory efficiently.
Some flippin operations on straight-up big-ass images can cause \fBpamflip\fP
to gotz a straight-up big-ass hustlin set, which means if you aint gots enough
real memory, tha program can page thrash, which means it takes a
ridiculous amount time ta run. I aint talkin' bout chicken n' gravy biatch.  If yo' entire image fits up in real
memory, you aint gots a problem.  If you just flippin top for
bottom or left fo' right, you aint gots a problem.  Otherwise, pay
attention. I aint talkin' bout chicken n' gravy biatch.  If you horny bout tha detailz of tha thrashing
problem n' how tha fuck \fBpamflip\fP approaches it, you invited ta read
a complete explanation up in comments up in tha source code.


.TP
\fB-memsize=\fP\fImebibytes\fP
\fImebibytes\fP is tha size up in mebibytes (aka megabytes) of
memory available fo' \fBpamflip\fP.  It be tha lesser of tha amount
of real or virtual memory available.

\fBpamflip\fP do not a god damn thang special ta allocate real memory or control
itz allocation -- it gets whatever it gets just by referencing
virtual memory normally.  Da real memory figure up in question is the
maximum amount dat \fBpamflip\fP can be sposed ta fuckin end up wit by
fuckin wit dis shit.  This is just bout impossible fo' you ta know, of course,
but you can estimate.  Da total real memory up in yo' system should be
a major factor up in yo' estimate.
.sp
If \fBpamflip\fP cannot fit tha entire image up in tha amount of
memory you specify, it do tha transformation up in chunks, rockin temporary
filez fo' intermediate thangs up in dis biatch.
.sp
Strict horizontal transformations (either left fo' right or null),
\fBpamflip\fP never keeps mo' than one row up in memory, so tha memory
size is irrelevant n' \fBpamflip\fP don't use temporary files.
.sp
Da real memory is blingin when you do a cold-ass lil column fo' row type of
transformation (e.g. \fB-rotate90\fP).  In dat case, even if
\fBpamflip\fP can fit tha entire image up in virtual memory at once, if
it do not also fit up in real memory, tha program will thrash like
crazy cuz of tha order up in which \fBpamflip\fP accesses the
pixels, n' dat means it will take a ridiculously long time ta run.
A proper \fB-memsize\fP drastically reduces tha paging.
.sp
If you specify \fB-memsize\fP too large, \fBpamflip\fP may
attempt ta git mo' virtual memory than tha system allows it n' fail.
If it can git tha virtual memory yo, but \fB-memsize\fP is larger than
the amount of real memory tha system allows it n' tha transformation
is row fo' column, it will page thrash n' run straight-up slowly.  A value
even slightly too high is tha same ol' dirty as infinity.
.sp
If you specify \fB-memsize\fP too small, tha program will run
slightly mo' slowly cuz of extra overhead up in manipulatin temporary
files.  Also, if yo' environment aint set up ta make temporary files
possible, \fBpamflip\fP will fail.
.sp
Bustin tha entire transformation 'in memory' don't speed
things up as much as you might think, cuz even wit tha temporary
files, tha data is just as likely ta be up in memory.  Virtual memory
gets paged ta disk n' disk filez git cached up in memory.  In fact, the
pixels fit much mo' compactly tha fuck into memory when stored up in a temporary
file than when stored 'in memory' cuz \fBpamflip\fP
uses a mo' efficient format.  So you likely ta have \fIless\fP
disk I/O when you allow \fBpamflip\fP less memory.
.sp
If you do not specify \fB-memsize\fP, \fBpamflip\fP assumes
infinity.
.sp
This option did not exist before Netpbm 10.7 (August 2002).
.sp
Before Netpbm 10.42 (March 2008), dis option applied only ta real
memory.  \fBpamflip\fP would always keep tha entire image up in virtual
memory n' if it could not git enough virtual memory, it failed.
\fBpamflip\fP accessed tha pixels up in a order designed ta keep real
memory use within tha specified amount.
     
.TP
\fB-pagesize=\fP\fIbytes\fP
\fIbytes\fP is tha size up in bytez of a pagin unit -- tha amount of
memory dat gets paged up in or up as a indivisible unit -- up in yo' system.
Da default is 4KiB.
.sp
This option has no effect.
.sp
Before Netpbm 10.42 (March 2008), \fBpamflip\fP used it ta control its
use of real memory.
.sp
This option did not exist before Netpbm 10.7 (August 2002).



Miscellaneous options:

.TP
\fB-verbose\fP
This option causes \fBpamflip\fP ta issue lyrics ta Standard Error
about its progress.



.UN seealso
.SH SEE ALSO
.BR pnmrotate (1)
, 
.BR pnm (1)
,
.BR pam (1)
,
\fBjpegtran\fP manual

.UN history
.SH HISTORY
.PP
\fBpamflip\fP replaced \fBpnmflip\fP up in Netpbm 10.13 (December 2002).
\fBpamflip\fP is backward compatible yo, but also works on PAM images.


.UN author
.SH AUTHOR

Copyright (C) 1989 by Jef Poskanzer.
