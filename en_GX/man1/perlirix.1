.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLIRIX 1"
.TH PERLIRIX 1 "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlirix \- Perl version 5 on Irix systems
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document raps bout various featurez of Irix dat will affect how tha fuck Perl
version 5 (hereafta just Perl) is compiled and/or runs.
.SS "Buildin 32\-bit Perl up in Irix"
.IX Subsection "Buildin 32-bit Perl up in Irix"
Use
.PP
.Vb 1
\&        sh Configure \-Dcc=\*(Aqcc \-n32\*(Aq
.Ve
.PP
to compile Perl 32\-bit.  Don't bother wit \-n32 unless you have 7.1
or lata compilaz (use cc \-version ta check).
.PP
(Buildin 'cc \-n32' is tha default.)
.SS "Buildin 64\-bit Perl up in Irix"
.IX Subsection "Buildin 64-bit Perl up in Irix"
Use
.PP
.Vb 1
\&        sh Configure \-Dcc=\*(Aqcc \-64\*(Aq \-Duse64bitint
.Ve
.PP
This requires require a 64\-bit \s-1MIPS CPU \s0(R8000, R10000, ...)
.PP
Yo ass can also use
.PP
.Vb 1
\&        sh Configure \-Dcc=\*(Aqcc \-64\*(Aq \-Duse64bitall
.Ve
.PP
but dat make no difference compared wit tha \-Duse64bitint cuz
of tha \f(CW\*(C`cc \-64\*(C'\fR.
.PP
Yo ass can also do
.PP
.Vb 1
\&        sh Configure \-Dcc=\*(Aqcc \-n32\*(Aq \-Duse64bitint
.Ve
.PP
to use long longs fo' tha 64\-bit integer type, up in case you don't
have a 64\-bit \s-1CPU.\s0
.PP
If yo ass is rockin gcc, just
.PP
.Vb 1
\&        sh Configure \-Dcc=gcc \-Duse64bitint
.Ve
.PP
should be enough, tha Configure should automatically probe fo' the
correct 64\-bit settings.
.SS "Bout Compila Versionz of Irix"
.IX Subsection "Bout Compila Versionz of Irix"
Some Irix cc versions, e.g. 7.3.1.1m (try cc \-version) done been known
to have thangs (coredumps) when compilin perl.c.  If you've used
\&\-OPT:fast_io=ON n' dis happens, try removin dat shit.  If dat fails, or
you didn't use that, then try adjustin other optimization options
(\-LNO, \-INLINE, \-O3 ta \-O2, etcetera).  Da compila bug has been
reported ta \s-1SGI.  \s0(Allen Smizzle <easmith@beatrice.rutgers.edu>)
.SS "Linker Problems up in Irix"
.IX Subsection "Linker Problems up in Irix"
If you git disses bout so_locations then search up in tha file
hints/irix_6.sh fo' \*(L"lddflags\*(R" n' do tha suggested adjustments.
(Dizzy Bizzleinghurst <David.Bizzleinghurst@riotinto.com.au>)
.SS "Malloc up in Irix"
.IX Subsection "Malloc up in Irix"
Do not try ta use Perlz malloc, dis will lead tha fuck into straight-up mysterious
errors (especially wit \-Duse64bitall).
.SS "Buildin wit threadz up in Irix"
.IX Subsection "Buildin wit threadz up in Irix"
Run Configure wit \-Duseithreadz which will configure Perl with
the Perl 5.8.0 \*(L"interpreta threads\*(R", peep threads.
.PP
For Irix 6.2 wit perl threads, you gotta have tha following
patches installed:
.PP
.Vb 5
\&        1404 Irix 6.2 Posix 1003.1b playa pages
\&        1645 Irix 6.2 & 6.3 POSIX header file thugged-out shit
\&        2000 Irix 6.2 Posix 1003.1b support modules
\&        2254 Pthread library fixes
\&        2401 6.2 all platform kernel rollup
.Ve
.PP
\&\fB\s-1IMPORTANT\s0\fR: Without patch 2401, a kernel bug up in Irix 6.2 will cause
your machine ta panic n' crash when hustlin threaded perl.  Irix 6.3
and lata is aiiight.
.PP
.Vb 2
\&    Thanks ta Hannu Napari <Hannu.Napari@hut.fi> fo' tha IRIX
\&    pthreadz patches shiznit.
.Ve
.SS "Irix 5.3"
.IX Subsection "Irix 5.3"
While hustlin Configure n' when building, yo ass is likely ta get
quite all dem of these warnings:
.PP
.Vb 3
\&  ld:
\&  Da shared object /usr/lib/libm.so did not resolve any symbols.
\&        Yo ass may wanna remove it from yo' link line.
.Ve
.PP
Ignore them: up in \s-1IRIX 5.3\s0 there is no way ta on tha fuckin' down-lowen ld bout all dis bullshit.
.PP
Durin compilation yo big-ass booty is ghon peep dis warnin from toke.c:
.PP
.Vb 3
\&  uopt: Warning: Perl_yylex: dis procedure not optimized cuz it
\&        exceedz size threshold; ta optimize dis procedure, use \-Olimit option
\&        wit value >= 4252.
.Ve
.PP
Ignore tha warning.
.PP
In \s-1IRIX 5.3\s0 n' wit Perl 5.8.1 (Perl 5.8.0 didn't compile up in \s-1IRIX 5.3\s0)
the followin failures is known.
.PP
.Vb 7
\& Failed Test                  Stat Wstat Total Fail  Failed  List of Failed
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& ../ext/List/Util/t/shuffle.t    0   139    ?, biatch?   ?, biatch?       %  ??
\& ../lib/Math/Trig.t            255 65280    29   12  41.38%  24\-29
\& ../lib/sort.t                   0   138   119   72  60.50%  48\-119
\& 56 tests n' 474 subtests skipped.
\& Failed 3/811 test scripts, 99.63% aiiight. 78/75813 subtests failed, 99.90% aiiight.
.Ve
.PP
They is suspected ta be compila errors (at least tha shuffle.t
failure is known from some \s-1IRIX 6\s0 setups) n' math library errors
(the Trig.t failure) yo, but since \s-1IRIX 5\s0 is long since end-of-lifed,
further fixes fo' tha \s-1IRIX\s0 is unlikely.  If you can git gcc fo' 5.3,
you could try that, too, since gcc up in \s-1IRIX 6\s0 be a known workaround for
at least tha shuffle.t n' sort.t failures.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jarkko Hietaniemi <jhi@iki.fi>
.PP
Please report any errors, thugged-out shit, or suggestions ta \fIperlbug@perl.org\fR.
