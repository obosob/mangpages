.\" DO NOT MODIFY THIS FILE!  Dat shiznit was generated by help2man 1.40.4.
.TH LIBTOOL "1" "October 2011" "libtool 2.4.2" "User Commands"
.SH NAME
libtool \- manual page fo' libtool 2.4.2
.SH SYNOPSIS
.B libtool
[\fIOPTION\fR]... [\fIMODE-ARG\fR]...
.br
.B libtool
[\fIOPTION\fR]... \fI--mode=compile COMPILE-COMMAND\fR... \fISOURCEFILE\fR
.br
.B libtool
[\fIOPTION\fR]... \fI--mode=link LINK-COMMAND\fR...
.br
.B libtool
[\fIOPTION\fR]... \fI--mode=execute COMMAND \fR[\fIARGS\fR]...
.br
.B libtool
[\fIOPTION\fR]... \fI--mode=install INSTALL-COMMAND\fR...
.br
.B libtool
[\fIOPTION\fR]... \fI--mode=finish \fR[\fILIBDIR\fR]...
.br
.B libtool
[\fIOPTION\fR]... \fI--mode=uninstall RM \fR[\fIRM-OPTION\fR]... \fIFILE\fR...
.br
.B libtool
[\fIOPTION\fR]... \fI--mode=clean RM \fR[\fIRM-OPTION\fR]... \fIFILE\fR...
.SH DESCRIPTION
Provide generalized library\-buildin support skillz.
.TP
\fB\-\-config\fR
show all configuration variables
.TP
\fB\-\-debug\fR
enable verbose shell tracing
.TP
\fB\-n\fR, \fB\-\-dry\-run\fR
display commandz without modifyin any files
.TP
\fB\-\-features\fR
display basic configuration shiznit n' exit
.TP
\fB\-\-mode\fR=\fIMODE\fR
use operation mode MODE
.TP
\fB\-\-preserve\-dup\-deps\fR
don't remove duplicate dependency libraries
.TP
\fB\-\-quiet\fR, \fB\-\-silent\fR
don't print shiznital lyrics
.TP
\fB\-\-no\-quiet\fR, \fB\-\-no\-silent\fR
print shiznital lyrics (default)
.TP
\fB\-\-no\-warn\fR
don't display warnin lyrics
.TP
\fB\-\-tag\fR=\fITAG\fR
use configuration variablez from tag TAG
.TP
\fB\-v\fR, \fB\-\-verbose\fR
print mo' shiznital lyrics than default
.TP
\fB\-\-no\-verbose\fR
don't print tha extra shiznital lyrics
.TP
\fB\-\-version\fR
print version shiznit
.TP
\fB\-h\fR, \fB\-\-help\fR, \fB\-\-help\-all\fR
print short, long, or detailed help message
.PP
MODE must be one of tha following:
.TP
clean
remove filez from tha build directory
.TP
compile
compile a source file tha fuck into a libtool object
.TP
execute
automatically set library path, then run a program
.TP
finish
complete tha installation of libtool libraries
.TP
install
install libraries or executables
.TP
link
create a library or a executable
.TP
uninstall
remove libraries from a installed directory
.PP
MODE\-ARGS vary dependin on tha MODE.  When passed as first option,
`\-\-mode=MODE' may be abbreviated as `MODE' or a unique abbreviation of dis shit.
.PP
GNU libtool home page: <http://www.gnu.org/software/libtool/>.
General help rockin GNU software: <http://www.gnu.org/gethelp/>.
.PP
Description of compile mode:
.PP
Compile a source file tha fuck into a libtool library object.
.PP
This mode accepts tha followin additionizzle options:
.TP
\fB\-o\fR OUTPUT\-FILE
set tha output file name ta OUTPUT\-FILE
.TP
\fB\-no\-suppress\fR
do not suppress compila output fo' multiple passes
.TP
\fB\-prefer\-pic\fR
try ta build PIC objects only
.TP
\fB\-prefer\-non\-pic\fR
try ta build non\-PIC objects only
.TP
\fB\-shared\fR
do not build a `.o' file suitable fo' static linking
.TP
\fB\-static\fR
only build a `.o' file suitable fo' static linking
.TP
\fB\-Wc\fR,FLAG
pass FLAG directly ta tha compiler
.PP
COMPILE\-COMMAND be a cold-ass lil command ta be used up in bustin a `standard' object file
from tha given SOURCEFILE.
.PP
Da output file name is determined by removin tha directory component from
SOURCEFILE, then substitutin tha C source code suffix `.c' wit the
library object suffix, `.lo'.
.PP
Description of link mode:
.PP
Link object filez or libraries together ta form another library, or to
create a executable program.
.PP
LINK\-COMMAND be a cold-ass lil command rockin tha C compila dat you would use ta create
a program from nuff muthafuckin object files.
.PP
Da followin componentz of LINK\-COMMAND is treated specially:
.TP
\fB\-all\-static\fR
do not do any dynamic linkin at all
.TP
\fB\-avoid\-version\fR
do not add a version suffix if possible
.TP
\fB\-bindir\fR BINDIR
specify path ta binaries directory (for systems where
libraries must be found up in tha PATH settin at runtime)
.TP
\fB\-dlopen\fR FILE
`\-dlpreopen' FILE if it cannot be dlopened at runtime
.TP
\fB\-dlpreopen\fR FILE
link up in FILE n' add its symbols ta lt_preloaded_symbols
.TP
\fB\-export\-dynamic\fR
allow symbols from OUTPUT\-FILE ta be resolved wit dlsym(3)
.TP
\fB\-export\-symbols\fR SYMFILE
try ta export only tha symbols listed up in SYMFILE
.TP
\fB\-export\-symbols\-regex\fR REGEX
try ta export only tha symbols matchin REGEX
.TP
\fB\-LLIBDIR\fR
search LIBDIR fo' required installed libraries
.TP
\fB\-lNAME\fR
OUTPUT\-FILE requires tha installed library libNAME
.TP
\fB\-module\fR
build a library dat can dlopened
.TP
\fB\-no\-fast\-install\fR
disable tha fast\-install mode
.TP
\fB\-no\-install\fR
link a not\-installable executable
.TP
\fB\-no\-undefined\fR
declare dat a library do not refer ta external symbols
.TP
\fB\-o\fR OUTPUT\-FILE
create OUTPUT\-FILE from tha specified objects
.TP
\fB\-objectlist\fR FILE
Use a list of object filez found up in FILE ta specify objects
.TP
\fB\-precious\-files\-regex\fR REGEX
don't remove output filez matchin REGEX
.TP
\fB\-release\fR RELEASE
specify package release shiznit
.TP
\fB\-rpath\fR LIBDIR
the pimped library will eventually be installed up in LIBDIR
.TP
\fB\-R[\fR ]LIBDIR
add LIBDIR ta tha runtime path of programs n' libraries
.TP
\fB\-shared\fR
only do dynamic linkin of libtool libraries
.TP
\fB\-shrext\fR SUFFIX
override tha standard shared library file extension
.TP
\fB\-static\fR
do not do any dynamic linkin of uninstalled libtool libraries
.TP
\fB\-static\-libtool\-libs\fR
do not do any dynamic linkin of libtool libraries
.TP
\fB\-version\-info\fR CURRENT[:REVISION[:AGE]]
specify library version info [each variable defaults ta 0]
.TP
\fB\-weak\fR LIBNAME
declare dat tha target serves up tha LIBNAME intercourse
.HP
\fB\-Wc\fR,FLAG
.TP
\fB\-Xcompiler\fR FLAG
pass linker\-specific FLAG directly ta tha compiler
.HP
\fB\-Wl\fR,FLAG
.TP
\fB\-Xlinker\fR FLAG
pass linker\-specific FLAG directly ta tha linker
.TP
\fB\-XCClinker\fR FLAG
pass link\-specific FLAG ta tha compila driver (CC)
.PP
All other options (arguments beginnin wit `\-') is ignored.
.PP
Every other argument is treated as a gangbangin' filename.  Filez endin up in `.la' are
treated as uninstalled libtool libraries, other filez is standard or library
object files.
.PP
If tha OUTPUT\-FILE endz up in `.la', then a libtool library is pimped,
only library objects (`.lo' files) may be specified, n' `\-rpath' is
required, except when bustin a cold-ass lil convenience library.
.PP
If OUTPUT\-FILE endz up in `.a' or `.lib', then a standard library is pimped
usin `ar' n' `ranlib', or on Windows rockin `lib'.
.PP
If OUTPUT\-FILE endz up in `.lo' or `.o', then a reloadable object file
is pimped, otherwise a executable program is pimped.
.PP
Description of execute mode:
.PP
Automatically set library path, then run a program.
.PP
This mode accepts tha followin additionizzle options:
.TP
\fB\-dlopen\fR FILE
add tha directory containin FILE ta tha library path
.PP
This mode sets tha library path environment variable accordin ta `\-dlopen'
flags.
.PP
If any of tha ARGS is libtool executable wrappers, then they is translated
into they correspondin uninstalled binary, n' any of they required library
directories is added ta tha library path.
.PP
Then, COMMAND is executed, wit ARGS as arguments.
.PP
Description of install mode:
.PP
Install executablez or libraries.
.PP
INSTALL\-COMMAND is tha installation command. Y'all KNOW dat shit, muthafucka!  Da first component should be
either tha `install' or `cp' program.
.PP
Da followin componentz of INSTALL\-COMMAND is treated specially:
.TP
\fB\-inst\-prefix\-dir\fR PREFIX\-DIR
Use PREFIX\-DIR as a stagin area fo' installation
.PP
Da rest of tha components is interpreted as arguments ta dat command (only
BSD\-compatible install options is recognized).
.PP
Description of finish mode:
.PP
Complete tha installation of libtool libraries.
.PP
Each LIBDIR be a gangbangin' finger-lickin' directory dat gotz nuff libtool libraries.
.PP
Da commandz dat dis mode executes may require superuser privileges.  Use
the `\-\-dry\-run' option if you just wanna peep what tha fuck would be executed.
.PP
Description of uninstall mode:
.PP
Remove libraries from a installation directory.
.PP
RM is tha name of tha program ta use ta delete filez associated wit each FILE
(typically `/bin/rm').  RM\-OPTIONS is options (like fuckin `\-f') ta be passed
to RM.
.PP
If FILE be a libtool library, all tha filez associated wit it is deleted.
Otherwise, only FILE itself is deleted rockin RM.
.PP
Description of clean mode:
.PP
Remove filez from tha build directory.
.PP
RM is tha name of tha program ta use ta delete filez associated wit each FILE
(typically `/bin/rm').  RM\-OPTIONS is options (like fuckin `\-f') ta be passed
to RM.
.PP
If FILE be a libtool library, object or program, all tha filez associated
with it is deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Otherwise, only FILE itself is deleted rockin RM.
.PP
When reportin a funky-ass bug, please describe a test case ta reproduce it and
include tha followin shiznit:
.TP
host\-triplet:
x86_64\-apple\-darwin11.2.0
.TP
shell:
/bin/sh
.TP
compiler:
gcc
.TP
compila flags:
\fB\-g\fR \fB\-O2\fR
.TP
linker:
/usr/llvm\-gcc\-4.2/libexec/gcc/i686\-apple\-darwin11/4.2.1/ld (gnu, biatch? no)
.TP
libtool:
(GNU libtool) 2.4.2
.TP
automake:
automake (GNU automake) 1.11.1
.TP
autoconf:
autoconf (GNU Autoconf) 2.68
.SH AUTHOR
Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996
.SH "REPORTING BUGS"
Report bugs ta <bug\-libtool@gnu.org>.
.SH COPYRIGHT
Copyright \(co 2011 Jacked Software Foundation, Inc.
.br
This is free software; peep tha source fo' copyin conditions.  There is NO
warranty; not even fo' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.SH "SEE ALSO"
Da full documentation for
.B libtool
is maintained as a Texinfo manual. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  If the
.B info
and
.B libtool
programs is properly installed at yo' crib, tha command
.IP
.B info libtool
.PP
should hit you wit access ta tha complete manual.
