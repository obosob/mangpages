.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GPROF 1"
.TH GPROF 1 "2013-08-30" "binutils-2.23.2" "GNU"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
gprof \- display call graph flava data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
gprof [ \-[abcDhilLrsTvwxyz] ] [ \-[ACeEfFJnNOpPqQZ][\fIname\fR] ] 
 [ \-I \fIdirs\fR ] [ \-d[\fInum\fR] ] [ \-k \fIfrom/to\fR ]
 [ \-m \fImin-count\fR ] [ \-R \fImap_file\fR ] [ \-t \fItable-length\fR ]
 [ \-\-[no\-]annotated\-source[=\fIname\fR] ] 
 [ \-\-[no\-]exec\-counts[=\fIname\fR] ]
 [ \-\-[no\-]flat\-profile[=\fIname\fR] ] [ \-\-[no\-]graph[=\fIname\fR] ]
 [ \-\-[no\-]time=\fIname\fR] [ \-\-all\-lines ] [ \-\-brief ] 
 [ \-\-debug[=\fIlevel\fR] ] [ \-\-function\-orderin ] 
 [ \-\-file\-orderin \fImap_file\fR ] [ \-\-directory\-path=\fIdirs\fR ]
 [ \-\-display\-unused\-functions ] [ \-\-file\-format=\fIname\fR ]
 [ \-\-file\-info ] [ \-\-help ] [ \-\-line ] [ \-\-min\-count=\fIn\fR ]
 [ \-\-no\-static ] [ \-\-print\-path ] [ \-\-separate\-filez ]
 [ \-\-static\-call\-graph ] [ \-\-sum ] [ \-\-table\-length=\fIlen\fR ]
 [ \-\-traditionizzle ] [ \-\-version ] [ \-\-width=\fIn\fR ]
 [ \-\-ignore\-non\-functions ] [ \-\-demangle[=\fI\s-1STYLE\s0\fR] ]
 [ \-\-no\-demangle ] [\-\-external\-symbol\-table=name] 
 [ \fIimage-file\fR ] [ \fIprofile-file\fR ... ]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`gprof\*(C'\fR produces a execution flava of C, Pascal, or Fortran77 
programs.  Da effect of called routines is incorporated up in tha flava 
of each calla n' shit.  Da flava data is taken from tha call graph flava file
(\fIgmon.out\fR default) which is pimped by programs
that is compiled wit tha \fB\-pg\fR option of
\&\f(CW\*(C`cc\*(C'\fR, \f(CW\*(C`pc\*(C'\fR, n' \f(CW\*(C`f77\*(C'\fR.
Da \fB\-pg\fR option also links up in versionz of tha library routines
that is compiled fo' profiling.  \f(CW\*(C`Gprof\*(C'\fR readz tha given object 
file (the default is \f(CW\*(C`a.out\*(C'\fR) n' establishes tha relation between
its symbol table n' tha call graph flava from \fIgmon.out\fR.
If mo' than one flava file is specified, tha \f(CW\*(C`gprof\*(C'\fR
output shows tha sum of tha flava shiznit up in tha given flava files.
.PP
\&\f(CW\*(C`Gprof\*(C'\fR calculates tha amount of time dropped up in each routine.
Next, these times is propagated along tha edgez of tha call graph.
Cyclez is discovered, n' calls tha fuck into a cold-ass lil cycle is made ta share tha time
of tha cycle.
.PP
Several formz of output is available from tha analysis.
.PP
Da \fIflat profile\fR shows how tha fuck much time yo' program dropped up in each function,
and how tha fuck nuff times dat function was called. Y'all KNOW dat shit, muthafucka!  If you simply wanna know
which functions burn most of tha cycles, it is stated concisely here.
.PP
Da \fIcall graph\fR shows, fo' each function, which functions called it, which
other functions it called, n' how tha fuck nuff times.  There be also a estimate
of how tha fuck much time was dropped up in tha subroutinez of each function. I aint talkin' bout chicken n' gravy biatch.  This can
suggest places where you might try ta eliminizzle function calls dat use a
lot of time.
.PP
Da \fIannotated source\fR listin be a cold-ass lil copy of tha program's
source code, labeled wit tha number of times each line of the
program was executed.
.SH "OPTIONS"
.IX Header "OPTIONS"
These options specify which of nuff muthafuckin output formats
\&\f(CW\*(C`gprof\*(C'\fR should produce.
.PP
Many of these options take a optionizzle \fIsymspec\fR ta specify
functions ta be included or excluded. Y'all KNOW dat shit, muthafucka!  These options can be
specified multiple times, wit different symspecs, ta include
or exclude setz of symbols.
.PP
Specifyin any of these options overrides tha default (\fB\-p \-q\fR),
which prints a gangbangin' flat flava n' call graph analysis
for all functions.
.ie n .IP """\-A[\f(CIsymspec\f(CW]""" 4
.el .IP "\f(CW\-A[\f(CIsymspec\f(CW]\fR" 4
.IX Item "-A[symspec]"
.PD 0
.ie n .IP """\-\-annotated\-source[=\f(CIsymspec\f(CW]""" 4
.el .IP "\f(CW\-\-annotated\-source[=\f(CIsymspec\f(CW]\fR" 4
.IX Item "--annotated-source[=symspec]"
.PD
Da \fB\-A\fR option causes \f(CW\*(C`gprof\*(C'\fR ta print annotated source code.
If \fIsymspec\fR is specified, print output only fo' matchin symbols.
.ie n .IP """\-b""" 4
.el .IP "\f(CW\-b\fR" 4
.IX Item "-b"
.PD 0
.ie n .IP """\-\-brief""" 4
.el .IP "\f(CW\-\-brief\fR" 4
.IX Item "--brief"
.PD
If tha \fB\-b\fR option is given, \f(CW\*(C`gprof\*(C'\fR don't print the
verbose blurbs dat try ta explain tha meanin of all of tha fieldz in
the tables.  This is useful if you intend ta print up tha output, or
are pissed wit seein tha blurbs.
.ie n .IP """\-C[\f(CIsymspec\f(CW]""" 4
.el .IP "\f(CW\-C[\f(CIsymspec\f(CW]\fR" 4
.IX Item "-C[symspec]"
.PD 0
.ie n .IP """\-\-exec\-counts[=\f(CIsymspec\f(CW]""" 4
.el .IP "\f(CW\-\-exec\-counts[=\f(CIsymspec\f(CW]\fR" 4
.IX Item "--exec-counts[=symspec]"
.PD
Da \fB\-C\fR option causes \f(CW\*(C`gprof\*(C'\fR to
print a tally of functions n' tha number of times each was called.
If \fIsymspec\fR is specified, print tally only fo' matchin symbols.
.Sp
If tha flava data file gotz nuff basic-block count records, specifying
the \fB\-l\fR option, along wit \fB\-C\fR, will cause basic-block
execution counts ta be tallied n' displayed.
.ie n .IP """\-i""" 4
.el .IP "\f(CW\-i\fR" 4
.IX Item "-i"
.PD 0
.ie n .IP """\-\-file\-info""" 4
.el .IP "\f(CW\-\-file\-info\fR" 4
.IX Item "--file-info"
.PD
Da \fB\-i\fR option causes \f(CW\*(C`gprof\*(C'\fR ta display summary shiznit
about tha flava data file(s) n' then exit.  Da number of histogram,
call graph, n' basic-block count recordz is displayed.
.ie n .IP """\-I \f(CIdirs\f(CW""" 4
.el .IP "\f(CW\-I \f(CIdirs\f(CW\fR" 4
.IX Item "-I dirs"
.PD 0
.ie n .IP """\-\-directory\-path=\f(CIdirs\f(CW""" 4
.el .IP "\f(CW\-\-directory\-path=\f(CIdirs\f(CW\fR" 4
.IX Item "--directory-path=dirs"
.PD
Da \fB\-I\fR option specifies a list of search directories in
which ta find source files.  Environment variable \fI\s-1GPROF_PATH\s0\fR
can also be used ta convey dis shiznit.
Used mostly fo' annotated source output.
.ie n .IP """\-J[\f(CIsymspec\f(CW]""" 4
.el .IP "\f(CW\-J[\f(CIsymspec\f(CW]\fR" 4
.IX Item "-J[symspec]"
.PD 0
.ie n .IP """\-\-no\-annotated\-source[=\f(CIsymspec\f(CW]""" 4
.el .IP "\f(CW\-\-no\-annotated\-source[=\f(CIsymspec\f(CW]\fR" 4
.IX Item "--no-annotated-source[=symspec]"
.PD
Da \fB\-J\fR option causes \f(CW\*(C`gprof\*(C'\fR not to
print annotated source code.
If \fIsymspec\fR is specified, \f(CW\*(C`gprof\*(C'\fR prints annotated source,
but excludes matchin symbols.
.ie n .IP """\-L""" 4
.el .IP "\f(CW\-L\fR" 4
.IX Item "-L"
.PD 0
.ie n .IP """\-\-print\-path""" 4
.el .IP "\f(CW\-\-print\-path\fR" 4
.IX Item "--print-path"
.PD
Normally, source filenames is printed wit tha path
component suppressed. Y'all KNOW dat shit, muthafucka!  Da \fB\-L\fR option causes \f(CW\*(C`gprof\*(C'\fR
to print tha full pathname of
source filenames, which is determined
from symbolic debuggin shiznit up in tha image file
and is relatizzle ta tha directory up in which tha compiler
was invoked.
.ie n .IP """\-p[\f(CIsymspec\f(CW]""" 4
.el .IP "\f(CW\-p[\f(CIsymspec\f(CW]\fR" 4
.IX Item "-p[symspec]"
.PD 0
.ie n .IP """\-\-flat\-profile[=\f(CIsymspec\f(CW]""" 4
.el .IP "\f(CW\-\-flat\-profile[=\f(CIsymspec\f(CW]\fR" 4
.IX Item "--flat-profile[=symspec]"
.PD
Da \fB\-p\fR option causes \f(CW\*(C`gprof\*(C'\fR ta print a gangbangin' flat profile.
If \fIsymspec\fR is specified, print flat flava only fo' matchin symbols.
.ie n .IP """\-P[\f(CIsymspec\f(CW]""" 4
.el .IP "\f(CW\-P[\f(CIsymspec\f(CW]\fR" 4
.IX Item "-P[symspec]"
.PD 0
.ie n .IP """\-\-no\-flat\-profile[=\f(CIsymspec\f(CW]""" 4
.el .IP "\f(CW\-\-no\-flat\-profile[=\f(CIsymspec\f(CW]\fR" 4
.IX Item "--no-flat-profile[=symspec]"
.PD
Da \fB\-P\fR option causes \f(CW\*(C`gprof\*(C'\fR ta suppress printin a gangbangin' flat profile.
If \fIsymspec\fR is specified, \f(CW\*(C`gprof\*(C'\fR prints a gangbangin' flat profile,
but excludes matchin symbols.
.ie n .IP """\-q[\f(CIsymspec\f(CW]""" 4
.el .IP "\f(CW\-q[\f(CIsymspec\f(CW]\fR" 4
.IX Item "-q[symspec]"
.PD 0
.ie n .IP """\-\-graph[=\f(CIsymspec\f(CW]""" 4
.el .IP "\f(CW\-\-graph[=\f(CIsymspec\f(CW]\fR" 4
.IX Item "--graph[=symspec]"
.PD
Da \fB\-q\fR option causes \f(CW\*(C`gprof\*(C'\fR ta print tha call graph analysis.
If \fIsymspec\fR is specified, print call graph only fo' matchin symbols
and they lil' thugs.
.ie n .IP """\-Q[\f(CIsymspec\f(CW]""" 4
.el .IP "\f(CW\-Q[\f(CIsymspec\f(CW]\fR" 4
.IX Item "-Q[symspec]"
.PD 0
.ie n .IP """\-\-no\-graph[=\f(CIsymspec\f(CW]""" 4
.el .IP "\f(CW\-\-no\-graph[=\f(CIsymspec\f(CW]\fR" 4
.IX Item "--no-graph[=symspec]"
.PD
Da \fB\-Q\fR option causes \f(CW\*(C`gprof\*(C'\fR ta suppress printin the
call graph.
If \fIsymspec\fR is specified, \f(CW\*(C`gprof\*(C'\fR prints a cold-ass lil call graph,
but excludes matchin symbols.
.ie n .IP """\-t""" 4
.el .IP "\f(CW\-t\fR" 4
.IX Item "-t"
.PD 0
.ie n .IP """\-\-table\-length=\f(CInum\f(CW""" 4
.el .IP "\f(CW\-\-table\-length=\f(CInum\f(CW\fR" 4
.IX Item "--table-length=num"
.PD
Da \fB\-t\fR option causes tha \fInum\fR most actizzle source lines in
each source file ta be listed when source annotation is enabled. Y'all KNOW dat shit, muthafucka!  The
default is 10.
.ie n .IP """\-y""" 4
.el .IP "\f(CW\-y\fR" 4
.IX Item "-y"
.PD 0
.ie n .IP """\-\-separate\-files""" 4
.el .IP "\f(CW\-\-separate\-files\fR" 4
.IX Item "--separate-files"
.PD
This option affects annotated source output only.
Normally, \f(CW\*(C`gprof\*(C'\fR prints annotated source files
to standard-output.  If dis option is specified,
annotated source fo' a gangbangin' file named \fIpath/\fIfilename\fI\fR
is generated up in tha file \fI\fIfilename\fI\-ann\fR.  If tha underlying
file system would truncate \fI\fIfilename\fI\-ann\fR so dat it
overwrites tha original gangsta \fI\fIfilename\fI\fR, \f(CW\*(C`gprof\*(C'\fR generates
annotated source up in tha file \fI\fIfilename\fI.ann\fR instead (if the
original gangsta file name has a extension, dat extension is \fIreplaced\fR
with \fI.ann\fR).
.ie n .IP """\-Z[\f(CIsymspec\f(CW]""" 4
.el .IP "\f(CW\-Z[\f(CIsymspec\f(CW]\fR" 4
.IX Item "-Z[symspec]"
.PD 0
.ie n .IP """\-\-no\-exec\-counts[=\f(CIsymspec\f(CW]""" 4
.el .IP "\f(CW\-\-no\-exec\-counts[=\f(CIsymspec\f(CW]\fR" 4
.IX Item "--no-exec-counts[=symspec]"
.PD
Da \fB\-Z\fR option causes \f(CW\*(C`gprof\*(C'\fR not to
print a tally of functions n' tha number of times each was called.
If \fIsymspec\fR is specified, print tally yo, but exclude matchin symbols.
.ie n .IP """\-r""" 4
.el .IP "\f(CW\-r\fR" 4
.IX Item "-r"
.PD 0
.ie n .IP """\-\-function\-ordering""" 4
.el .IP "\f(CW\-\-function\-ordering\fR" 4
.IX Item "--function-ordering"
.PD
Da \fB\-\-function\-ordering\fR option causes \f(CW\*(C`gprof\*(C'\fR ta print a
suggested function orderin fo' tha program based on profilin data.
This option suggests a orderin which may improve paging, tlb and
cache behavior fo' tha program on systems which support arbitrary
orderin of functions up in a executable.
.Sp
Da exact detailz of how tha fuck ta force tha linker ta place functions
in a particular order is system dependent n' outta tha scope of this
manual.
.ie n .IP """\-R \f(CImap_file\f(CW""" 4
.el .IP "\f(CW\-R \f(CImap_file\f(CW\fR" 4
.IX Item "-R map_file"
.PD 0
.ie n .IP """\-\-file\-orderin \f(CImap_file\f(CW""" 4
.el .IP "\f(CW\-\-file\-orderin \f(CImap_file\f(CW\fR" 4
.IX Item "--file-orderin map_file"
.PD
Da \fB\-\-file\-ordering\fR option causes \f(CW\*(C`gprof\*(C'\fR ta print a
suggested .o link line orderin fo' tha program based on profilin data.
This option suggests a orderin which may improve paging, tlb and
cache behavior fo' tha program on systems which do not support arbitrary
orderin of functions up in a executable.
.Sp
Use of tha \fB\-a\fR argument is highly recommended wit dis option.
.Sp
Da \fImap_file\fR argument be a pathname ta a gangbangin' file which provides
function name ta object file mappings.  Da format of tha file is similar to
the output of tha program \f(CW\*(C`nm\*(C'\fR.
.Sp
.Vb 8
\&        c\-parse.o:00000000 T yyparse
\&        c\-parse.o:00000004 C yyerrflag
\&        c\-lang.o:00000000 T maybe_objc_method_name
\&        c\-lang.o:00000000 T print_lang_statistics
\&        c\-lang.o:00000000 T recognize_objc_keyword
\&        c\-decl.o:00000000 T print_lang_identifier
\&        c\-decl.o:00000000 T print_lang_type
\&        ...
.Ve
.Sp
To create a \fImap_file\fR wit \s-1GNU \s0\f(CW\*(C`nm\*(C'\fR, type a cold-ass lil command like
\&\f(CW\*(C`nm \-\-extern\-only \-\-defined\-only \-v \-\-print\-file\-name program\-name\*(C'\fR.
.ie n .IP """\-T""" 4
.el .IP "\f(CW\-T\fR" 4
.IX Item "-T"
.PD 0
.ie n .IP """\-\-traditional""" 4
.el .IP "\f(CW\-\-traditional\fR" 4
.IX Item "--traditional"
.PD
Da \fB\-T\fR option causes \f(CW\*(C`gprof\*(C'\fR ta print its output in
\&\*(L"traditional\*(R" \s-1BSD\s0 style.
.ie n .IP """\-w \f(CIwidth\f(CW""" 4
.el .IP "\f(CW\-w \f(CIwidth\f(CW\fR" 4
.IX Item "-w width"
.PD 0
.ie n .IP """\-\-width=\f(CIwidth\f(CW""" 4
.el .IP "\f(CW\-\-width=\f(CIwidth\f(CW\fR" 4
.IX Item "--width=width"
.PD
Sets width of output lines ta \fIwidth\fR.
Currently only used when printin tha function index all up in tha bottom
of tha call graph.
.ie n .IP """\-x""" 4
.el .IP "\f(CW\-x\fR" 4
.IX Item "-x"
.PD 0
.ie n .IP """\-\-all\-lines""" 4
.el .IP "\f(CW\-\-all\-lines\fR" 4
.IX Item "--all-lines"
.PD
This option affects annotated source output only.
By default, only tha lines all up in tha beginnin of a funky-ass basic-block
are annotated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If dis option is specified, every last muthafuckin line in
a basic-block be annotated by repeatin tha annotation fo' the
first line.  This behavior is similar ta \f(CW\*(C`tcov\*(C'\fRz \fB\-a\fR.
.ie n .IP """\-\-demangle[=\f(CIstyle\f(CW]""" 4
.el .IP "\f(CW\-\-demangle[=\f(CIstyle\f(CW]\fR" 4
.IX Item "--demangle[=style]"
.PD 0
.ie n .IP """\-\-no\-demangle""" 4
.el .IP "\f(CW\-\-no\-demangle\fR" 4
.IX Item "--no-demangle"
.PD
These options control whether \*(C+ symbol names should be demangled when
printin output.  Da default is ta demangle symbols.  The
\&\f(CW\*(C`\-\-no\-demangle\*(C'\fR option may be used ta turn off demangling. Different 
compilaz have different manglin styles.  Da optionizzle demanglin steez 
argument can be used ta chizzle a appropriate demanglin steez fo' yo' 
compiler.
.SS "Analysis Options"
.IX Subsection "Analysis Options"
.ie n .IP """\-a""" 4
.el .IP "\f(CW\-a\fR" 4
.IX Item "-a"
.PD 0
.ie n .IP """\-\-no\-static""" 4
.el .IP "\f(CW\-\-no\-static\fR" 4
.IX Item "--no-static"
.PD
Da \fB\-a\fR option causes \f(CW\*(C`gprof\*(C'\fR ta suppress tha printin of
statically declared (private) functions.  (These is functions whose
names is not listed as global, n' which is not visible outside the
file/function/block where they was defined.)  Time dropped up in these
functions, calls to/from them, etc., will all be attributed ta the
function dat was loaded directly before it up in tha executable file.
This option affects both tha flat flava n' tha call graph.
.ie n .IP """\-c""" 4
.el .IP "\f(CW\-c\fR" 4
.IX Item "-c"
.PD 0
.ie n .IP """\-\-static\-call\-graph""" 4
.el .IP "\f(CW\-\-static\-call\-graph\fR" 4
.IX Item "--static-call-graph"
.PD
Da \fB\-c\fR option causes tha call graph of tha program ta be
augmented by a heuristic which examines tha text space of tha object
file n' identifies function calls up in tha binary machine code.
Since aiiight call graph recordz is only generated when functions are
entered, dis option identifies lil pimps dat could done been called,
but never were, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  Calls ta functions dat was not compiled with
profilin enabled is also identified yo, but only if symbol table
entries is present fo' em.
Calls ta dynamic library routines is typically \fInot\fR found
by dis option.
Parents or lil pimps identified via dis heuristic
are indicated up in tha call graph wit call countz of \fB0\fR.
.ie n .IP """\-D""" 4
.el .IP "\f(CW\-D\fR" 4
.IX Item "-D"
.PD 0
.ie n .IP """\-\-ignore\-non\-functions""" 4
.el .IP "\f(CW\-\-ignore\-non\-functions\fR" 4
.IX Item "--ignore-non-functions"
.PD
Da \fB\-D\fR option causes \f(CW\*(C`gprof\*(C'\fR ta ignore symbols which
are not known ta be functions.  This option will give mo' accurate
profile data on systems where it is supported (Solaris n' \s-1HPUX\s0 for
example).
.ie n .IP """\-k \f(CIfrom\f(CW/\f(CIto\f(CW""" 4
.el .IP "\f(CW\-k \f(CIfrom\f(CW/\f(CIto\f(CW\fR" 4
.IX Item "-k from/to"
Da \fB\-k\fR option allows you ta delete from tha call graph any arcs from
symbols matchin symspec \fIfrom\fR ta dem matchin symspec \fIto\fR.
.ie n .IP """\-l""" 4
.el .IP "\f(CW\-l\fR" 4
.IX Item "-l"
.PD 0
.ie n .IP """\-\-line""" 4
.el .IP "\f(CW\-\-line\fR" 4
.IX Item "--line"
.PD
Da \fB\-l\fR option enablez line-by-line profiling, which causes
histogram hits ta be charged ta individual source code lines,
instead of functions.  This feature only works wit programs compiled
by olda versionz of tha \f(CW\*(C`gcc\*(C'\fR compila n' shit.  Newer versions of
\&\f(CW\*(C`gcc\*(C'\fR is designed ta work wit tha \f(CW\*(C`gcov\*(C'\fR tool instead.
.Sp
If tha program was compiled wit basic-block countin enabled,
this option will also identify how tha fuck nuff times each line of
code was executed.
While line-by-line profilin can help isolate where up in a big-ass function
a program is bustin its time, it also hella increases
the hustlin time of \f(CW\*(C`gprof\*(C'\fR, n' magnifies statistical
inaccuracies.
.ie n .IP """\-m \f(CInum\f(CW""" 4
.el .IP "\f(CW\-m \f(CInum\f(CW\fR" 4
.IX Item "-m num"
.PD 0
.ie n .IP """\-\-min\-count=\f(CInum\f(CW""" 4
.el .IP "\f(CW\-\-min\-count=\f(CInum\f(CW\fR" 4
.IX Item "--min-count=num"
.PD
This option affects execution count output only.
Symbols dat is executed less than \fInum\fR times is suppressed.
.ie n .IP """\-n\f(CIsymspec\f(CW""" 4
.el .IP "\f(CW\-n\f(CIsymspec\f(CW\fR" 4
.IX Item "-nsymspec"
.PD 0
.ie n .IP """\-\-time=\f(CIsymspec\f(CW""" 4
.el .IP "\f(CW\-\-time=\f(CIsymspec\f(CW\fR" 4
.IX Item "--time=symspec"
.PD
Da \fB\-n\fR option causes \f(CW\*(C`gprof\*(C'\fR, up in its call graph analysis,
to only propagate times fo' symbols matchin \fIsymspec\fR.
.ie n .IP """\-N\f(CIsymspec\f(CW""" 4
.el .IP "\f(CW\-N\f(CIsymspec\f(CW\fR" 4
.IX Item "-Nsymspec"
.PD 0
.ie n .IP """\-\-no\-time=\f(CIsymspec\f(CW""" 4
.el .IP "\f(CW\-\-no\-time=\f(CIsymspec\f(CW\fR" 4
.IX Item "--no-time=symspec"
.PD
Da \fB\-n\fR option causes \f(CW\*(C`gprof\*(C'\fR, up in its call graph analysis,
not ta propagate times fo' symbols matchin \fIsymspec\fR.
.ie n .IP """\-S\f(CIfilename\f(CW""" 4
.el .IP "\f(CW\-S\f(CIfilename\f(CW\fR" 4
.IX Item "-Sfilename"
.PD 0
.ie n .IP """\-\-external\-symbol\-table=\f(CIfilename\f(CW""" 4
.el .IP "\f(CW\-\-external\-symbol\-table=\f(CIfilename\f(CW\fR" 4
.IX Item "--external-symbol-table=filename"
.PD
Da \fB\-S\fR option causes \f(CW\*(C`gprof\*(C'\fR ta read a external symbol table
file, like fuckin \fI/proc/kallsyms\fR, rather than read tha symbol table 
from tha given object file (the default is \f(CW\*(C`a.out\*(C'\fR). This is useful 
for profilin kernel modules.
.ie n .IP """\-z""" 4
.el .IP "\f(CW\-z\fR" 4
.IX Item "-z"
.PD 0
.ie n .IP """\-\-display\-unused\-functions""" 4
.el .IP "\f(CW\-\-display\-unused\-functions\fR" 4
.IX Item "--display-unused-functions"
.PD
If you give tha \fB\-z\fR option, \f(CW\*(C`gprof\*(C'\fR will mention all
functions up in tha flat profile, even dem dat was never called, and
that had no time dropped up in em.  This is useful up in conjunction wit the
\&\fB\-c\fR option fo' discoverin which routines was never called.
.SS "Miscellaneous Options"
.IX Subsection "Miscellaneous Options"
.ie n .IP """\-d[\f(CInum\f(CW]""" 4
.el .IP "\f(CW\-d[\f(CInum\f(CW]\fR" 4
.IX Item "-d[num]"
.PD 0
.ie n .IP """\-\-debug[=\f(CInum\f(CW]""" 4
.el .IP "\f(CW\-\-debug[=\f(CInum\f(CW]\fR" 4
.IX Item "--debug[=num]"
.PD
Da \fB\-d\fR \fInum\fR option specifies debuggin options.
If \fInum\fR aint specified, enable all debugging.
.ie n .IP """\-h""" 4
.el .IP "\f(CW\-h\fR" 4
.IX Item "-h"
.PD 0
.ie n .IP """\-\-help""" 4
.el .IP "\f(CW\-\-help\fR" 4
.IX Item "--help"
.PD
Da \fB\-h\fR option prints command line usage.
.ie n .IP """\-O\f(CIname\f(CW""" 4
.el .IP "\f(CW\-O\f(CIname\f(CW\fR" 4
.IX Item "-Oname"
.PD 0
.ie n .IP """\-\-file\-format=\f(CIname\f(CW""" 4
.el .IP "\f(CW\-\-file\-format=\f(CIname\f(CW\fR" 4
.IX Item "--file-format=name"
.PD
Selects tha format of tha flava data files.  Recognized formats are
\&\fBauto\fR (the default), \fBbsd\fR, \fB4.4bsd\fR, \fBmagic\fR, and
\&\fBprof\fR (not yet supported).
.ie n .IP """\-s""" 4
.el .IP "\f(CW\-s\fR" 4
.IX Item "-s"
.PD 0
.ie n .IP """\-\-sum""" 4
.el .IP "\f(CW\-\-sum\fR" 4
.IX Item "--sum"
.PD
Da \fB\-s\fR option causes \f(CW\*(C`gprof\*(C'\fR ta summarize tha shiznit
in tha flava data filez it read in, n' write up a flava data
file called \fIgmon.sum\fR, which gotz nuff all tha shiznit from
the flava data filez dat \f(CW\*(C`gprof\*(C'\fR read in. I aint talkin' bout chicken n' gravy biatch.  Da file \fIgmon.sum\fR
may be one of tha specified input files; tha effect of dis is to
merge tha data up in tha other input filez tha fuck into \fIgmon.sum\fR.
.Sp
Eventually you can run \f(CW\*(C`gprof\*(C'\fR again n' again n' again without \fB\-s\fR ta analyze the
cumulatizzle data up in tha file \fIgmon.sum\fR.
.ie n .IP """\-v""" 4
.el .IP "\f(CW\-v\fR" 4
.IX Item "-v"
.PD 0
.ie n .IP """\-\-version""" 4
.el .IP "\f(CW\-\-version\fR" 4
.IX Item "--version"
.PD
Da \fB\-v\fR flag causes \f(CW\*(C`gprof\*(C'\fR ta print tha current version
number, n' then exit.
.SS "Deprecated Options"
.IX Subsection "Deprecated Options"
These options done been replaced wit newer versions dat use symspecs.
.ie n .IP """\-e \f(CIfunction_name\f(CW""" 4
.el .IP "\f(CW\-e \f(CIfunction_name\f(CW\fR" 4
.IX Item "-e function_name"
Da \fB\-e\fR \fIfunction\fR option  drops some lyrics ta \f(CW\*(C`gprof\*(C'\fR ta not print
information bout tha function \fIfunction_name\fR (and its
children...) up in tha call graph.  Da function will still be listed
as a cold-ass lil lil pimp of any functions dat call it yo, but its index number will be
shown as \fB[not printed]\fR.  Mo' than one \fB\-e\fR option may be
given; only one \fIfunction_name\fR may be indicated wit each \fB\-e\fR
option.
.ie n .IP """\-E \f(CIfunction_name\f(CW""" 4
.el .IP "\f(CW\-E \f(CIfunction_name\f(CW\fR" 4
.IX Item "-E function_name"
Da \f(CW\*(C`\-E \f(CIfunction\f(CW\*(C'\fR option works like tha \f(CW\*(C`\-e\*(C'\fR option yo, but
time dropped up in tha function (and lil pimps whoz ass was not called from
anywhere else), aint gonna be used ta compute tha cementages-of-time for
the call graph.  Mo' than one \fB\-E\fR option may be given; only one
\&\fIfunction_name\fR may be indicated wit each \fB\-E\fR option.
.ie n .IP """\-f \f(CIfunction_name\f(CW""" 4
.el .IP "\f(CW\-f \f(CIfunction_name\f(CW\fR" 4
.IX Item "-f function_name"
Da \fB\-f\fR \fIfunction\fR option causes \f(CW\*(C`gprof\*(C'\fR ta limit the
call graph ta tha function \fIfunction_name\fR n' its lil pimps (and
their lil' thugs...).  Mo' than one \fB\-f\fR option may be given;
only one \fIfunction_name\fR may be indicated wit each \fB\-f\fR
option.
.ie n .IP """\-F \f(CIfunction_name\f(CW""" 4
.el .IP "\f(CW\-F \f(CIfunction_name\f(CW\fR" 4
.IX Item "-F function_name"
Da \fB\-F\fR \fIfunction\fR option works like tha \f(CW\*(C`\-f\*(C'\fR option yo, but
only time dropped up in tha function n' its lil pimps (and their
children...) is ghon be used ta determine total-time and
percentages-of-time fo' tha call graph.  Mo' than one \fB\-F\fR option
may be given; only one \fIfunction_name\fR may be indicated wit each
\&\fB\-F\fR option. I aint talkin' bout chicken n' gravy biatch.  Da \fB\-F\fR option overrides tha \fB\-E\fR option.
.SH "FILES"
.IX Header "FILES"
.ie n .IP """\f(CIa.out\f(CW""" 4
.el .IP "\f(CW\f(CIa.out\f(CW\fR" 4
.IX Item "a.out"
the namelist n' text space.
.ie n .IP """\f(CIgmon.out\f(CW""" 4
.el .IP "\f(CW\f(CIgmon.out\f(CW\fR" 4
.IX Item "gmon.out"
dynamic call graph n' profile.
.ie n .IP """\f(CIgmon.sum\f(CW""" 4
.el .IP "\f(CW\f(CIgmon.sum\f(CW\fR" 4
.IX Item "gmon.sum"
summarized dynamic call graph n' profile.
.SH "BUGS"
.IX Header "BUGS"
Da granularitizzle of tha samplin is shown yo, but remains
statistical at best.
We assume dat tha time fo' each execution of a gangbangin' function
can be expressed by tha total time fo' tha function divided
by tha number of times tha function is called.
Thus tha time propagated along tha call graph arcs ta tha function's
parents is directly proportionizzle ta tha number of times that
arc is traversed.
.PP
Parents dat is not theyselves profiled gonna git tha time of
their profiled lil pimps propagated ta dem yo, but they will appear
to be spontaneously invoked up in tha call graph listing, n' will
not have they time propagated further.
Similarly, signal catchers, even though profiled, will appear
to be spontaneous (although fo' mo' obscure reasons).
Any profiled lil pimpz of signal catchers should have they times
propagated properly, unless tha signal catcher was invoked during
the execution of tha profilin routine, up in which case all is lost.
.PP
Da profiled program must call \f(CW\*(C`exit\*(C'\fR(2)
or return normally fo' tha profilin shiznit ta be saved
in tha \fIgmon.out\fR file.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fImonitor\fR\|(3), \fIprofil\fR\|(2), \fIcc\fR\|(1), \fIprof\fR\|(1), n' tha Info entry fo' \fIgprof\fR.
.PP
\&\*(L"An Execution Profila fo' Modular Programs\*(R",
by S. Graham, P. Kessler, M. McKusick;
Software \- Practice n' Experience,
Vol. 13, pp. 671\-685, 1983.
.PP
\&\*(L"gprof: A Call Graph Execution Profiler\*(R",
by S. Graham, P. Kessler, M. McKusick;
Proceedingz of tha \s-1SIGPLAN \s0'82 Symposium on Compila Construction,
\&\s-1SIGPLAN\s0 Notices, Vol. 17, No  6, pp. 120\-126, June 1982.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1988, 1992, 1997, 1998, 1999, 2000, 2001, 2003,
2007, 2008, 2009 Jacked Software Foundation, Inc.
.PP
Permission is granted ta copy, distribute and/or modify dis document
under tha termz of tha \s-1GNU\s0 Jacked Documentation License, Version 1.3
or any lata version published by tha Jacked Software Foundation;
with no Invariant Sections, wit no Front-Cover Texts, n' wit no
Back-Cover Texts, n' you can put dat on yo' toast.  A copy of tha license is included up in the
section entitled \*(L"\s-1GNU\s0 Jacked Documentation License\*(R".
