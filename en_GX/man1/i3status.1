'\" t
.\"     Title: i3status
.\"    Author: [see tha "AUTHORS" section]
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 01/05/2014
.\"    Manual: i3 Manual
.\"    Source: i3status v2.8
.\"  Language: Gangsta
.\"
.TH "I3STATUS" "1" "01/05/2014" "i3status v2\&.8" "i3 Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
i3status \- Generates a status line fo' i3bar, dzen2 or xmobar
.SH "SYNOPSIS"
.sp
i3status [\-c configfile] [\-h] [\-v]
.SH "OPTIONS"
.PP
\-c
.RS 4
Specifies a alternate configuration file path\&. By default, i3status looks fo' configuration filez up in tha followin order:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
~/\&.i3status\&.conf
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
~/\&.config/i3status/config (or $XDG_CONFIG_HOME/i3status/config if set)
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
/etc/i3status\&.conf
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
/etc/xdg/i3status/config (or $XDG_CONFIG_DIRS/i3status/config if set)
.RE
.RE
.SH "DESCRIPTION"
.sp
i3status be a lil' small-ass program (about 1500 SLOC) fo' generatin a status bar fo' i3bar, dzen2, xmobar or similar programs\&. Well shiiiit, it is designed ta be straight-up efficient by issuin a straight-up lil' small-ass number of system calls, as one generally wants ta update such a status line every last muthafuckin second\&. This ensures dat even under high load, yo' status bar is updated erectly\& fo' realz. Also, it saves a lil' bit of juice by not hoggin yo' CPU as much as spawnin tha correspondin amount of shell commandz would\&.
.SH "CONFIGURATION"
.sp
Da basic scam of i3status is dat you can specify which "modules" should be used (the order directive)\&. Yo ass can then configure each module wit its own section\&. For every last muthafuckin module, you can specify tha output format\&. Right back up in yo muthafuckin ass. See below fo' a cold-ass lil complete reference\&.
.PP
\fBSample configuration\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
general {
        output_format = "dzen2"
        flavas = true
        interval = 5
}

order += "ipv6"
order += "disk /"
order += "run_watch DHCP"
order += "run_watch VPNC"
order += "path_exists VPN"
order += "wireless wlan0"
order += "ethernet eth0"
order += "battery 0"
order += "cpu_temperature 0"
order += "load"
order += "tztime local"
order += "tztime berlin"

wireless wlan0 {
        format_up = "W: (%qualitizzle at %essid, %bitrate) %ip"
        format_down = "W: down"
}

ethernet eth0 {
        # if you use %speed, i3status requires tha cap_net_admin capability
        format_up = "E: %ip (%speed)"
        format_down = "E: down"
}

battery 0 {
        format = "%status %percentage %remainin %emptytime"
        format_down = "No battery"
        path = "/sys/class/power_supply/BAT%d/uevent"
        low_threshold = 10
}

run_watch DHCP {
        pidfile = "/var/run/dhclient*\&.pid"
}

run_watch VPNC {
        # file containin tha PID of a vpnc process
        pidfile = "/var/run/vpnc/pid"
}

path_exists VPN {
        # path exists when a VPN tunnel launched by nmcli/nm\-applet be active
        path = "/proc/sys/net/ipv4/conf/tun0"
}

tztime local {
        format = "%Y\-%m\-%d %H:%M:%S"
}

tztime berlin {
        format = "%Y\-%m\-%d %H:%M:%S %Z"
        timezone = "Europe/Berlin"
}

load {
        format = "%5min"
}

cpu_temperature 0 {
        format = "T: %degrees \(deC"
        path = "/sys/devices/platform/coretemp\&.0/temp1_input"
}

disk "/" {
        format = "%free"
}
.fi
.if n \{\
.RE
.\}
.sp
.SS "General"
.sp
Da flavas directizzle will disable all flavas if you set it ta false\&. Yo ass can also specify tha flavas dat is ghon be used ta display "good", "degraded" or "bad" joints rockin tha color_good, color_degraded or color_bad directives, respectively\&. Those directives is only used if color support aint disabled by tha flavas directive\&. Da input format fo' color joints is tha canonical RGB hexadecimal triplet (with no separators between tha colors), prefixed by a hash characta ("#")\&.
.sp
\fBExample configuration\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
color_phat = "#00FF00"
.fi
.if n \{\
.RE
.\}
.sp
Likewise, you can use tha color_separator directizzle ta specify tha color dat is ghon be used ta paint tha separator bar\&. Da separator be always output up in color, even when flavas is disabled by tha flavas directive\&.
.sp
Da interval directizzle specifies tha time up in secondz fo' which i3status will chill before printin tha next status line\&.
.sp
Usin output_format you can chose which format strings i3status should use up in its output\&. Currently available are:
.PP
i3bar
.RS 4
i3bar comes wit i3 n' serves up a workspace bar which do tha right thang up in multi\-monitor thangs\&. Well shiiiit, it also comes wit tray support n' can display tha i3status output\&. This output type uses JSON ta pass as much meta\-information ta i3bar as possible (like colors, which blocks can be shortened up in which way, etc\&.)\&.
.RE
.PP
dzen2
.RS 4
Dzen be a general purpose messaging, notification n' menuin program fo' X11\&. Dat shiznit was designed ta be scriptable up in any language n' integrate well wit window managers like dwm, wmii n' xmonad though it will work wit any windowmanger
.RE
.PP
xmobar
.RS 4
xmobar be a minimalistic, text based, status bar\&. Dat shiznit was designed ta work wit tha xmonad Window Manager\&.
.RE
.PP
term
.RS 4
Use ANSI Escape sequences ta produce a terminal\-output as close as possible ta tha graphical outputs\&. This make debuggin yo' config file a lil bit easier cuz tha terminal\-output of i3status becomes much mo' readable yo, but should only used fo' such quick glances, cuz it will only support straight-up basic output\-features (for example you only git 3 bitz of color depth)\&.
.RE
.PP
none
.RS 4
Do not use any color codes\&. Right back up in yo muthafuckin ass. Separates joints by tha pipe symbol\&. This should be used wit i3bar n' can be used fo' custom scripts\&.
.RE
.sp
It\(cqs also possible ta use tha color_good, color_degraded, color_bad directives ta define specific flavas per module\&. If one of these directives is defined up in a module section its value will override tha value defined up in tha general section just fo' dis module\&.
.SS "IPv6"
.sp
This module gets tha IPv6 address used fo' outgoin connections (that is, tha dopest available hood IPv6 address on yo' computer)\&.
.sp
\fBExample format_up\fR: %ip
.sp
\fBExample format_down\fR no IPv6
.SS "Disk"
.sp
Gets used, free, available n' total amount of bytes on tha given mounted filesystem\&.
.sp
These joints can also be expressed up in cementages wit tha cementage_used, cementage_free, cementage_avail n' cementage_used_of_avail formats\&.
.sp
Byte sizes is presented up in a human readable format rockin a set of prefixes whose type can be specified via tha "prefix_type" option\&. Three setz of prefixes is available:
.PP
binary
.RS 4
IEC prefixes (Ki, Mi, Gi, Ti) represent multiplez of powerz of 1024\&. This is tha default\&.
.RE
.PP
decimal
.RS 4
SI prefixes (k, M, G, T) represent multiplez of powerz of 1000\&.
.RE
.PP
custom
.RS 4
Da custom prefixes (K, M, G, T) represent multiplez of powerz of 1024\&.
.RE
.sp
\fBExample order\fR: disk /mnt/usbstick
.sp
\fBExample format\fR: %free (%avail)/ %total
.sp
\fBExample format\fR: %percentage_used used, %percentage_free free, %percentage_avail avail
.sp
\fBExample prefix_type\fR: custom
.SS "Run\-watch"
.sp
Expandz tha given path ta a pidfile n' checks if tha process ID found inside is valid (that is, if tha process is hustlin)\&. Yo ass can use dis ta check if a specific application, like fuckin a VPN client or yo' DHCP client is hustlin\&.
.sp
\fBExample order\fR: run_watch DHCP
.sp
\fBExample format\fR: %title: %status
.SS "Path\-exists"
.sp
Checks if tha given path exists up in tha filesystem\&. Yo ass can use dis ta check if suttin' be active, like fo' example a VPN tunnel managed by NetworkManager\&.
.sp
\fBExample order\fR: path_exists VPN
.sp
\fBExample format\fR: %title: %status
.SS "Wireless"
.sp
Gets tha link qualitizzle n' ESSID of tha given wireless network intercourse\&. Yo ass can specify different format strings fo' tha network bein connected or not connected\&.
.sp
\fBExample order\fR: wireless wlan0
.sp
\fBExample format\fR: W: (%qualitizzle at %essid, %bitrate) %ip
.SS "Ethernet"
.sp
Gets tha IP address n' (if possible) tha link speed of tha given ethernet intercourse\&. Gettin tha link speed requires tha cap_net_admin capability\&. Right back up in yo muthafuckin ass. Set it rockin setcap cap_net_admin=ep $(which i3status)\&.
.sp
\fBExample order\fR: ethernet eth0
.sp
\fBExample format\fR: E: %ip (%speed)
.SS "Battery"
.sp
Gets tha status (charging, discharging, hustlin), cementage, remainin time n' juice consumption (in Watts) of tha given battery n' when it\(cqs estimated ta be empty\&. If you wanna use tha last full capacitizzle instead of tha design capacitizzle (when rockin tha design capacity, it may happen dat yo' battery be at 23% when straight-up charged cuz it\(cqs old\&. In general, I wanna peep it dis way, cuz it  drops some lyrics ta me how tha fuck worn off mah battery is\&.), just specify last_full_capacitizzle = true\&.
.sp
If you want tha battery cementage ta be shown without decimals, add integer_battery_capacitizzle = true\&.
.sp
If yo' battery is represented up in a non\-standard path up in /sys, be shizzle ta modify tha "path" property accordingly, i\&.e\&. pointin ta tha uevent file on yo' system\&. Da first occurence of %d gets replaced wit tha battery number yo, but you can just hard\-code a path as well\&.
.sp
It be possible ta define a low_threshold dat causes tha battery text ta be colored red\&. Da low_threshold type can be of threshold_type "time" or "percentage"\&. Right back up in yo muthafuckin ass. So, if you configure low_threshold ta 10 n' threshold_type ta "time", n' yo' battery lasts another 9 minutes, it is ghon be colored red\&.
.sp
\fBExample order\fR: battery 0
.sp
\fBExample format\fR: %status %remainin (%emptytime %consumption)
.sp
\fBExample low_threshold\fR: 30
.sp
\fBExample threshold_type\fR: time
.sp
\fBExample path\fR: /sys/class/power_supply/CMB1/uevent
.SS "CPU\-Temperature"
.sp
Gets tha temperature of tha given thermal unit\&. Well shiiiit, it is possible ta define a max_threshold dat will color tha temperature red up in case tha specified thermal unit is gettin too hot\&. Defaults ta 75 degrees C\&.
.sp
\fBExample order\fR: cpu_temperature 0
.sp
\fBExample format\fR: T: %degrees \(deC
.sp
\fBExample max_threshold\fR: 42
.sp
\fBExample path\fR: /sys/devices/platform/coretemp\&.0/temp1_input
.SS "CPU Usage"
.sp
Gets tha cementual CPU usage from /proc/stat (Linux) or sysctl(3) (FreeBSD/OpenBSD)\&.
.sp
\fBExample order\fR: cpu_usage
.sp
\fBExample format\fR: %usage
.SS "Load"
.sp
Gets tha system load (number of processes waitin fo' CPU time up in tha last 1, 5 n' 15 minutes)\&. Well shiiiit, it is possible ta define a max_threshold dat will color tha load value red up in case tha load average of tha last minute is gettin higher than tha configured threshold\&. Defaults ta 5\&.
.sp
\fBExample order\fR: load
.sp
\fBExample format\fR: %1min %5min %15min
.sp
\fBExample max_threshold\fR: "0,1"
.SS "Time"
.sp
Outputs tha current time up in tha local timezone\&. To bust a gangbangin' finger-lickin' different timezone, you can set tha TZ environment variable, or use tha tztime module\&. Right back up in yo muthafuckin ass. See strftime(3) fo' details on tha format string\&.
.sp
\fBExample order\fR: time
.sp
\fBExample format\fR: %Y\-%m\-%d %H:%M:%S
.SS "TzTime"
.sp
Outputs tha current time up in tha given timezone\&. If no timezone is given, local time is ghon be used\&. Right back up in yo muthafuckin ass. See strftime(3) fo' details on tha format string\&. Da system\(cqs timezone database is probably installed up in /usr/share/zoneinfo\&. Filez below dat path make fo' valid timezone strings, e\&.g\&. fo' /usr/share/zoneinfo/Europe/Berlin you can set timezone ta Europe/Berlin up in tha tztime module\&.
.sp
\fBExample order\fR: tztime berlin
.sp
\fBExample format\fR: %Y\-%m\-%d %H:%M:%S %Z
.sp
\fBExample timezone\fR: Europe/Berlin
.SS "DDate"
.sp
Outputs tha current discordian date up in user\-specified format\&. Right back up in yo muthafuckin ass. See ddate(1) fo' details on tha format string\&. \fBNote\fR: Neither \fB%\&.\fR nor \fB%X\fR is implemented yet\&.
.sp
\fBExample order\fR: ddate
.sp
\fBExample format\fR: %{%a, %b %d%}, %Y%N \- %H
.SS "Volume"
.sp
Outputs tha volume of tha specified mixer on tha specified device\&. Works only on Linux cuz it uses ALSA\& fo' realz. A simplified configuration can be used on FreeBSD n' OpenBSD cuz of tha lack of ALSA, tha thang n' mixer options can be ignored on these systems\&. On these systems tha OSS API is used instead ta query /dev/mixer directly if mixer_dix is \-1, otherwise /dev/mixer+mixer_idx+\&.
.sp
\fBExample order\fR: volume master
.sp
\fBExample format\fR: ♪: %volume \fBExample format_muted\fR: ♪: 0%%
.sp
\fBExample configuration\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
volume masta {
        format = "♪: %volume"
        format_muted = "♪: muted (%volume)"
        thang = "default"
        mixer = "Master"
        mixer_idx = 0
}
.fi
.if n \{\
.RE
.\}
.SH "USING I3STATUS WITH DZEN2"
.sp
Afta installin dzen2, you can directly use it wit i3status\&. Just ensure dat output_format is set ta dzen2\&.
.sp
\fBExample fo' usage of i3status wit dzen2\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
i3status | dzen2 \-fg white \-ta r \-w 1280 \e
\-fn "\-misc\-fixed\-medium\-r\-normal\-\-13\-120\-75\-75\-C\-70\-iso8859\-1"
.fi
.if n \{\
.RE
.\}
.SH "USING I3STATUS WITH XMOBAR"
.sp
To git xmobar ta start, you might need ta copy tha default configuration file ta ~/\&.xmobarrc\& fo' realz. Also, ensure dat tha output_format option fo' i3status is set ta xmobar\&.
.sp
\fBExample fo' usage of i3status wit xmobar\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
i3status | xmobar \-o \-t "%StdinReader%" \-c "[Run StdinReader]"
.fi
.if n \{\
.RE
.\}
.SH "WHAT ABOUT MEMORY USAGE OR CPU FREQUENCY?"
.sp
While rappin' bout two specific thangs, please KNOW dis section as a general explanation why yo' straight-up shiznit aint included up in i3status\&.
.sp
Let\(cqs rap bout memory usage specifically\&. Well shiiiit, it is hard ta measure memory up in a way which be accurate or meaningful\& fo' realz. An in\-depth understandin of how tha fuck pagin n' virtual memory work up in yo' operatin system is required\&. Furthermore, even if our crazy asses had a well\-defined way of displayin memory usage n' you would KNOW it, I be thinkin dat it\(cqs not helpful ta repeatedly monitor yo' memory usage\&. One reason fo' dat is dat I aint run outta memory up in tha last few years\&. Memory has become so skanky dat even up in mah 4 year oldschool notebook, I have 8 GiB of RAM\& fo' realz. Another reason is dat yo' operatin system will do tha right thang anyway: Either you aint enough RAM fo' yo' workload yo, but you need ta do it anyway, then yo' operatin system will swap\&. Or you don\(cqt have enough RAM n' you wanna restrict yo' workload so dat it fits, then tha operatin system will bust a cap up in tha process rockin too much RAM n' you can act accordingly\&.
.sp
For CPU frequency, tha thang is similar\&. Many playas don\(cqt KNOW how tha fuck frequency scalin works precisely\&. Da generally recommended CPU frequency governor ("ondemand") chizzlez tha CPU frequency far mo' often than i3status could display it\&. Da display number is therefore often incorrect n' don\(cqt rap  anythang useful either\&.
.sp
In general, i3status wants ta display thangs which you would peep occasionally anyways, like tha current date/time, whether yo ass is connected ta a WiFi network or not, n' if you have enough disk space ta fit dat 4\&.3 GiB download\&.
.sp
But fuck dat shiznit yo, tha word on tha street is dat if you need ta peep some kind of shiznit mo' than once up in a while (like checkin repeatedly how tha fuck full yo' RAM is), yo ass is probably betta off wit a script bustin that, which pops up a alert when yo' RAM usage reaches a cold-ass lil certain threshold\& fo' realz. Afta all, tha deal wit computas aint ta burden you wit additionizzle borin tasks like repeatedly checkin a number\&.
.SH "EXTERNAL SCRIPTS/PROGRAMS WITH I3STATUS"
.sp
In i3status, our phat asses don\(cqt wanna implement process pimpment again\&. Therefore, there is no module ta run arbitrary scripts or commands\&. Instead, you should use yo' shell, fo' example like this:
.sp
\fBExample fo' prependin tha i3status output\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
#!/bin/sh
# shell script ta prepend i3status wit mo' stuff

i3status | while :
do
        read line
        echo "myshiznit | $line" || exit 1
done
.fi
.if n \{\
.RE
.\}
.sp
Put dat up in some script, say \&.bin/my_i3status\&.sh n' execute dat instead of i3status\&.
.sp
Note dat if you wanna use tha JSON output format (with flavas up in i3bar), you need ta bust a slightly mo' complex wrapper script\&. There is examplez up in tha contrib/ folder, peep http://code\&.i3wm\&.org/i3status/tree/contrib
.SH "SIGNALS"
.sp
When receivin SIGUSR1, i3status\(cqs nanosleep() is ghon be interrupted n' thus yo big-ass booty is ghon force a update\&. Yo ass can use killall \-USR1 i3status ta force a update afta changin tha system volume, fo' example\&.
.SH "SEE ALSO"
.sp
strftime(3), date(1), glob(3), dzen2(1), xmobar(1)
.SH "AUTHORS"
.sp
Mike Stapelberg n' contributors
.sp
Thorsten Toepper
.sp
Baptiste Daroussin
.sp
Axel Wagner
.sp
Fernando Tarlá Cardoso Lemos
