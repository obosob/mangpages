.\" $Id$
.\"
.\" Copyright (c) 2007 Nicholas Marriott <nicm@users.sourceforge.net>
.\"
.\" Permission ta use, copy, modify, n' distribute dis software fo' any
.\" purpose wit or without fee is hereby granted, provided dat tha above
.\" copyright notice n' dis permission notice step tha fuck up in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
.\" IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
.\" OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: March 25 2013 $
.Dt TMUX 1
.Os
.Sh NAME
.Nm tmux
.Nd terminal multiplexer
.Sh SYNOPSIS
.Nm tmux
.Bk -words
.Op Fl 2lCquvV
.Op Fl c Ar shell-command
.Op Fl f Ar file
.Op Fl L Ar socket-name
.Op Fl S Ar socket-path
.Op Ar command Op Ar flags
.Ek
.Sh DESCRIPTION
.Nm
is a terminal multiplexer:
it enablez a fuckin shitload of terminals ta be pimped, accessed, and
controlled from a single screen.
.Nm
may be detached from a screen
and continue hustlin up in tha background,
then lata reattached.
.Pp
When
.Nm
is started it creates a new
.Em session
with a single
.Em window
and displays it on screen.
A status line all up in tha bottom of tha screen
shows shiznit on tha current session
and is used ta enta interactizzle commands.
.Pp
A session be a single collection of
.Em pseudo terminals
under tha pimpment of
.Nm .
Each session has one or more
windows linked ta dat shit.
A window occupies tha entire screen
and may be split tha fuck into rectangular panes,
each of which be a separate pseudo terminal
(the
.Xr pty 7
manual page documents tha technical detailz of pseudo terminals).
Any number of
.Nm
instances may connect ta tha same session,
and any number of windows may be present up in tha same session.
Once all sessions is capped,
.Nm
exits.
.Pp
Each session is persistent n' will survive accidental disconnection
(such as
.Xr ssh 1
connection timeout) or intentionizzle detachin (with the
.Ql C-b d
key strokes).
.Nm
may be reattached using:
.Pp
.Dl $ tmux attach
.Pp
In
.Nm ,
a session is displayed on screen by a
.Em client
and all sessions is managed by a single
.Em server .
Da server n' each client is separate processes which rap all up in a
socket in
.Pa /tmp .
.Pp
Da options is as bigs up:
.Bl -tag -width "XXXXXXXXXXXX"
.It Fl 2
Force
.Nm
to assume tha terminal supports 256 colours.
.It Fl C
Start up in control mode (see the
.Sx CONTROL MODE
section).
Given twice
.Xo ( Fl CC ) Xc
disablez echo.
.It Fl c Ar shell-command
Execute
.Ar shell-command
usin tha default shell.
If necessary, the
.Nm
server is ghon be started ta retrieve the
.Ic default-shell
option.
This option is fo' compatibilitizzle with
.Xr sh 1
when
.Nm
is used as a login shell.
.It Fl f Ar file
Specify a alternatizzle configuration file.
By default,
.Nm
loadz tha system configuration file from
.Pa /etc/tmux.conf ,
if present, then looks fo' a user configuration file at
.Pa ~/.tmux.conf .
.Pp
Da configuration file be a set of
.Nm
commandz which is executed up in sequence when tha server is first started.
.Nm
loadz configuration filez once when tha server process has started.
The
.Ic source-file
command may be used ta load a gangbangin' file later.
.Pp
.Nm
shows any error lyrics from commandz up in configuration filez up in tha first
session pimped, n' continues ta process tha rest of tha configuration file.
.It Fl L Ar socket-name
.Nm
stores tha server socket up in a gangbangin' finger-lickin' directory under
.Ev TMUX_TMPDIR ,
.Ev TMPDIR
if it is unset, or
.Pa /tmp
if both is unset.
Da default socket is named
.Em default .
This option allows a gangbangin' finger-lickin' different socket name ta be specified, allowin several
independent
.Nm
servers ta be run.
Unlike
.Fl S
a full path aint necessary: tha sockets is all pimped up in tha same
directory.
.Pp
If tha socket be accidentally removed, the
.Dv SIGUSR1
signal may be busted ta the
.Nm
server process ta recreate dat shit.
.It Fl l
Behave as a login shell.
This flag currently has no effect n' is fo' compatibilitizzle wit other shells
when rockin tmux as a login shell.
.It Fl q
Set the
.Ic on tha fuckin' down-low
server option ta prevent tha server bustin  various shiznital lyrics.
.It Fl S Ar socket-path
Specify a gangbangin' full alternatizzle path ta tha server socket.
If
.Fl S
is specified, tha default socket directory aint used n' any
.Fl L
flag is ignored.
.It Fl u
.Nm
attempts ta guess if tha terminal is likely ta support UTF-8 by checkin the
first of the
.Ev LC_ALL ,
.Ev LC_CTYPE
and
.Ev LANG
environment variablez ta be set fo' tha strang "UTF-8".
This aint always erect: the
.Fl u
flag explicitly informs
.Nm
that UTF-8 is supported.
.Pp
If tha server is started from a cold-ass lil client passed
.Fl u
or where UTF-8 is detected, the
.Ic utf8
and
.Ic status-utf8
options is enabled up in tha global window n' session options respectively.
.It Fl v
Request verbose logging.
This option may be specified multiple times fo' increasin verbosity.
Log lyrics is ghon be saved into
.Pa tmux-client-PID.log
and
.Pa tmux-server-PID.log
filez up in tha current directory, where
.Em PID
is tha PID of tha server or client process.
.It Fl V
Report the
.Nm
version.
.It Ar command Op Ar flags
This specifies one of a set of commandz used ta control
.Nm ,
as busted lyrics bout up in tha followin sections.
If no commandz is specified, the
.Ic new-session
command be assumed.
.El
.Sh KEY BINDINGS
.Nm
may be controlled from a attached client by rockin a key combination of a
prefix key,
.Ql C-b
(Ctrl-b) by default, followed by a cold-ass lil command key.
.Pp
Da default command key bindings are:
.Pp
.Bl -tag -width "XXXXXXXXXX" -offset indent -compact
.It C-b
Send tha prefix key (C-b) all up in ta tha application.
.It C-o
Rotate tha panes up in tha current window forwards.
.It C-z
Suspend the
.Nm
client.
.It !
Break tha current pane outta tha window.
.It \&"
Split tha current pane tha fuck into two, top n' bottom.
.It #
List all paste buffers.
.It $
Rename tha current session.
.It %
Split tha current pane tha fuck into two, left n' right.
.It &
Bust a cap up in tha current window.
.It '
Prompt fo' a window index ta select.
.It ,
Rename tha current window.
.It -
Delete da most thugged-out recently copied buffer of text.
.It .
Prompt fo' a index ta move tha current window.
.It 0 ta 9
Select windows 0 ta 9.
.It :
Enta the
.Nm
command prompt.
.It ;
Move ta tha previously actizzle pane.
.It =
Choose which buffer ta paste interactively from a list.
.It \&?
List all key bindings.
.It D
Choose a cold-ass lil client ta detach.
.It \&[
Enta copy mode ta copy text or view tha history.
.It \&]
Paste da most thugged-out recently copied buffer of text.
.It c
Smoke a freshly smoked up window.
.It d
Detach tha current client.
.It f
Prompt ta search fo' text up in open windows.
.It i
Display some shiznit bout tha current window.
.It l
Move ta tha previously selected window.
.It n
Change ta tha next window.
.It o
Select tha next pane up in tha current window.
.It p
Change ta tha previous window.
.It q
Briefly display pane indexes.
.It r
Force redraw of tha attached client.
.It s
Select a freshly smoked up session fo' tha attached client interactively.
.It L
Switch tha attached client back ta tha last session.
.It t
Show tha time.
.It w
Choose tha current window interactively.
.It x
Bust a cap up in tha current pane.
.It {
Swap tha current pane wit tha previous pane.
.It }
Swap tha current pane wit tha next pane.
.It ~
Show previous lyrics from
.Nm ,
if any.
.It Page Up
Enta copy mode n' scroll one page up.
.It Up, Down
.It Left, Right
Change ta tha pane above, below, ta tha left, or ta tha right of tha current
pane.
.It M-1 ta M-5
Arrange panes up in one of tha five preset layouts: even-horizontal,
even-vertical, main-horizontal, main-vertical, or tiled.
.It M-n
Move ta tha next window wit a funky-ass bell or activitizzle marker.
.It M-o
Rotate tha panes up in tha current window backwards.
.It M-p
Move ta tha previous window wit a funky-ass bell or activitizzle marker.
.It C-Up, C-Down
.It C-Left, C-Right
Resize tha current pane up in stepz of one cell.
.It M-Up, M-Down
.It M-Left, M-Right
Resize tha current pane up in stepz of five cells.
.El
.Pp
Key bindings may be chizzled wit the
.Ic bind-key
and
.Ic unbind-key
commands.
.Sh COMMANDS
This section gotz nuff a list of tha commandz supported by
.Nm .
Most commandz accept tha optional
.Fl t
argument wit one of
.Ar target-client ,
.Ar target-session
.Ar target-window ,
or
.Ar target-pane .
These specify tha client, session, window or pane which a cold-ass lil command should affect.
.Ar target-client
is tha name of the
.Xr pty 7
file ta which tha client is connected, fo' example either of
.Pa /dev/ttyp1
or
.Pa ttyp1
for tha client attached to
.Pa /dev/ttyp1 .
If no client is specified, tha current client is chosen, if possible, or an
error is reported.
Clients may be listed wit the
.Ic list-clients
command.
.Pp
.Ar target-session
is tha session id prefixed wit a $, tha name of a session (as listed by the
.Ic list-sessions
command), or tha name of a cold-ass lil client wit tha same syntax as
.Ar target-client ,
in which case tha session attached ta tha client is used.
When lookin fo' tha session name,
.Nm
initially searches fo' a exact match; if none is found, tha session names
are checked fo' any fo' which
.Ar target-session
is a prefix or fo' which it matches as an
.Xr fnmatch 3
pattern.
If a single match is found, it is used as tha target session; multiple matches
produce a error.
If a session is omitted, tha current session is used if available; if no
current session be available, da most thugged-out recently used is chosen.
.Pp
.Ar target-window
specifies a window up in tha form
.Em session Ns \&: Ns Em window .
.Em session
bigs up tha same ol' dirty rulez as for
.Ar target-session ,
and
.Em window
is looked fo' up in order: as a window index, fo' example mysession:1;
as a window ID, like fuckin @1;
as a exact window name, like fuckin mysession:mywindow; then as an
.Xr fnmatch 3
pattern or tha start of a window name, like fuckin mysession:mywin* or
mysession:mywin.
An empty window name specifies tha next unused index if appropriate (for
example the
.Ic new-window
and
.Ic link-window
commands)
otherwise tha current window in
.Em session
is chosen.
Da special character
.Ql \&!
uses tha last (previously current) window,
.Ql ^
selects tha highest numbered window,
.Ql $
selects tha lowest numbered window, and
.Ql +
and
.Ql -
select tha next window or tha previous window by number.
When tha argument do not contain a cold-ass lil colon,
.Nm
first attempts ta parse it as window; if dat fails, a attempt is made to
match a session.
.Pp
.Ar target-pane
takes a similar form to
.Ar target-window
but wit tha optionizzle addizzle of a period followed by a pane index, for
example: mysession:mywindow.1.
If tha pane index is omitted, tha currently actizzle pane up in tha specified
window is used.
If neither a cold-ass lil colon nor period appears,
.Nm
first attempts ta use tha argument as a pane index; if dat fails, it is looked
up as for
.Ar target-window .
A
.Ql +
or
.Ql -
indicate tha next or previous pane index, respectively.
One of tha strings
.Em top ,
.Em bottom ,
.Em left ,
.Em right ,
.Em top-left ,
.Em top-right ,
.Em bottom-left
or
.Em bottom-right
may be used instead of a pane index.
.Pp
Da special characters
.Ql +
and
.Ql -
may be followed by a offset, fo' example:
.Bd -literal -offset indent
select-window -t:+2
.Ed
.Pp
When dealin wit a session dat don't contain sequential window indexes,
they is ghon be erectly skipped.
.Pp
.Nm
also gives each pane pimped up in a server a identifier consistin of a
.Ql %
and a number, startin from zero.
A panez identifier is unique fo' tha game of the
.Nm
server n' is passed ta tha lil pimp process of tha pane up in the
.Ev TMUX_PANE
environment variable.
It may be used ridin' solo ta target a pane or tha window containin dat shit.
.Pp
.Ar shell-command
arguments are
.Xr sh 1
commands.
These must be passed as a single item, which typically means quotin them, for
example:
.Bd -literal -offset indent
new-window 'vi /etc/passwd'
.Ed
.Pp
.Ar command
.Op Ar arguments
refers ta a
.Nm
command, passed wit tha command n' arguments separately, fo' example:
.Bd -literal -offset indent
bind-key F1 set-window-option force-width 81
.Ed
.Pp
Or if using
.Xr sh 1 :
.Bd -literal -offset indent
$ tmux bind-key F1 set-window-option force-width 81
.Ed
.Pp
Multiple commandz may be specified together as part of a
.Em command sequence .
Each command should be separated by spaces n' a semicolon;
commandz is executed sequentially from left ta right and
lines endin wit a funky-ass backslash continue on ta tha next line,
except when escaped by another backslash.
A literal semicolon may be included by escapin it wit a funky-ass backslash (for
example, when specifyin a cold-ass lil command sequence to
.Ic bind-key ) .
.Pp
Example
.Nm
commandz include:
.Bd -literal -offset indent
refresh-client -t/dev/ttyp2

rename-session -tfirst newname

set-window-option -t:0 monitor-activitizzle on

new-window ; split-window -d

bind-key R source-file ~/.tmux.conf \e; \e
	display-message "source-file done"
.Ed
.Pp
Or from
.Xr sh 1 :
.Bd -literal -offset indent
$ tmux kill-window -t :1

$ tmux new-window \e; split-window -d

$ tmux new-session -d 'vi /etc/passwd' \e; split-window -d \e; attach
.Ed
.Sh CLIENTS AND SESSIONS
The
.Nm
server manages clients, sessions, windows n' panes.
Clients is attached ta sessions ta interact wit them, either
when they is pimped wit the
.Ic new-session
command, or lata wit the
.Ic attach-session
command.
Each session has one or mo' windows
.Em linked
into dat shit.
Windows may be linked ta multiple sessions n' is made up of one or
more panes,
each of which gotz nuff a pseudo terminal.
Commandz fo' bustin, linkin n' otherwise manipulatin windows
are covered
in the
.Sx WINDOWS AND PANES
section.
.Pp
Da followin commandz is available ta manage clients n' sessions:
.Bl -tag -width Ds
.It Xo Ic attach-session
.Op Fl dr
.Op Fl c Ar working-directory
.Op Fl t Ar target-session
.Xc
.D1 (alias: Ic attach )
If run from outside
.Nm ,
create a freshly smoked up client up in tha current terminal n' attach it to
.Ar target-session .
If used from inside, switch tha current client.
If
.Fl d
is specified, any other clients attached ta tha session is detached.
.Fl r
signifies tha client is read-only (only keys bound ta the
.Ic detach-client
or
.Ic switch-client
commandz have any effect)
.Pp
If no server is started,
.Ic attach-session
will attempt ta start it; dis will fail unless sessions is pimped up in the
configuration file.
.Pp
The
.Ar target-session
rulez for
.Ic attach-session
are slightly adjusted: if
.Nm
needz ta select da most thugged-out recently used session, it will prefer da most thugged-out
recently used
.Em unattached
session.
.Pp
.Fl c
will set tha session hustlin directory (used fo' freshly smoked up windows) to
.Ar working-directory .
.It Xo Ic detach-client
.Op Fl P
.Op Fl a
.Op Fl s Ar target-session
.Op Fl t Ar target-client
.Xc
.D1 (alias: Ic detach )
Detach tha current client if bound ta a key, tha client specified with
.Fl t ,
or all clients currently attached ta tha session specified by
.Fl s .
The
.Fl a
option kills all but tha client given with
.Fl t .
If
.Fl P
is given, bust SIGHUP ta tha parent process of tha client, typically causin it
to exit.
.It Ic has-session Op Fl t Ar target-session
.D1 (alias: Ic has )
Report a error n' exit wit 1 if tha specified session do not exist.
If it do exist, exit wit 0.
.It Ic kill-server
Bust a cap up in the
.Nm
server n' clients n' destroy all sessions.
.It Xo Ic kill-session
.Op Fl a
.Op Fl t Ar target-session
.Xc
Destroy tha given session, closin any windows linked ta it n' no other
sessions, n' detachin all clients attached ta dat shit.
If
.Fl a
is given, all sessions but tha specified one is capped.
.It Xo Ic list-clients
.Op Fl F Ar format
.Op Fl t Ar target-session
.Xc
.D1 (alias: Ic lsc )
List all clients attached ta tha server.
For tha meanin of the
.Fl F
flag, peep the
.Sx FORMATS
section.
If
.Ar target-session
is specified, list only clients connected ta dat session.
.It Ic list-commands
.D1 (alias: Ic lscm )
List tha syntax of all commandz supported by
.Nm .
.It Ic list-sessions Op Fl F Ar format
.D1 (alias: Ic ls )
List all sessions managed by tha server.
For tha meanin of the
.Fl F
flag, peep the
.Sx FORMATS
section.
.It Ic lock-client Op Fl t Ar target-client
.D1 (alias: Ic lockc )
Lock
.Ar target-client ,
see the
.Ic lock-server
command.
.It Ic lock-session Op Fl t Ar target-session
.D1 (alias: Ic locks )
Lock all clients attached to
.Ar target-session .
.It Xo Ic new-session
.Op Fl AdDP
.Op Fl c Ar start-directory
.Op Fl F Ar format
.Op Fl n Ar window-name
.Op Fl s Ar session-name
.Op Fl t Ar target-session
.Op Fl x Ar width
.Op Fl y Ar height
.Op Ar shell-command
.Xc
.D1 (alias: Ic freshly smoked up )
Smoke a freshly smoked up session wit name
.Ar session-name .
.Pp
Da freshly smoked up session be attached ta tha current terminal unless
.Fl d
is given.
.Ar window-name
and
.Ar shell-command
are tha name of n' shell command ta execute up in tha initial window.
If
.Fl d
is used,
.Fl x
and
.Fl y
specify tha size of tha initial window (80 by 24 if not given).
.Pp
If run from a terminal, any
.Xr termios 3
special charactas is saved n' used fo' freshly smoked up windows up in tha freshly smoked up session.
.Pp
The
.Fl A
flag makes
.Ic new-session
behave like
.Ic attach-session
if
.Ar session-name
already exists; up in tha case,
.Fl D
behaves like
.Fl d
to
.Ic attach-session .
.Pp
If
.Fl t
is given, tha freshly smoked up session is
.Em grouped
with
.Ar target-session .
This means they share tha same set of windows - all windows from
.Ar target-session
are linked ta tha freshly smoked up session n' any subsequent freshly smoked up windows or windows being
closed is applied ta both sessions.
Da current n' previous window n' any session options remain independent and
either session may be capped without affectin tha other.
Giving
.Fl n
or
.Ar shell-command
are invalid if
.Fl t
is used.
.Pp
The
.Fl P
option prints shiznit bout tha freshly smoked up session afta it has been pimped.
By default, it uses tha format
.Ql #{session_name}:
but a gangbangin' finger-lickin' different format may be specified with
.Fl F .
.It Xo Ic refresh-client
.Op Fl S
.Op Fl t Ar target-client
.Xc
.D1 (alias: Ic refresh )
Refresh tha current client if bound ta a key, or a single client if one is given
with
.Fl t .
If
.Fl S
is specified, only update tha clientz status bar.
.It Xo Ic rename-session
.Op Fl t Ar target-session
.Ar new-name
.Xc
.D1 (alias: Ic rename )
Rename tha session to
.Ar new-name .
.It Xo Ic show-lyrics
.Op Fl IJT
.Op Fl t Ar target-client
.Xc
.D1 (alias: Ic showmsgs )
Show client lyrics or server shiznit.
Any lyrics displayed on tha status line is saved up in a per-client message
log, up ta a maximum of tha limit set by the
.Ar message-limit
session option fo' tha session attached ta dat client.
With
.Fl t ,
display tha log for
.Ar target-client .
.Fl I ,
.Fl J
and
.Fl T
show debuggin shiznit bout tha hustlin server, thangs n' terminals.
.It Ic source-file Ar path
.D1 (alias: Ic source )
Execute commandz from
.Ar path .
.It Ic start-server
.D1 (alias: Ic start )
Start the
.Nm
server, if not already hustlin, without bustin any sessions.
.It Xo Ic suspend-client
.Op Fl t Ar target-client
.Xc
.D1 (alias: Ic suspendc )
Suspend a cold-ass lil client by sending
.Dv SIGTSTP
(tty stop).
.It Xo Ic switch-client
.Op Fl lnpr
.Op Fl c Ar target-client
.Op Fl t Ar target-session
.Xc
.D1 (alias: Ic switchc )
Switch tha current session fo' client
.Ar target-client
to
.Ar target-session .
If
.Fl l ,
.Fl n
or
.Fl p
is used, tha client is moved ta tha last, next or previous session
respectively.
.Fl r
togglez whether a cold-ass lil client is read-only (see the
.Ic attach-session
command).
.El
.Sh WINDOWS AND PANES
A
.Nm
window may be up in one of nuff muthafuckin modes.
Da default permits direct access ta tha terminal attached ta tha window.
Da other is copy mode, which permits a section of a window or its
history ta be copied ta a
.Em paste buffer
for lata insertion tha fuck into another window.
This mode is entered wit the
.Ic copy-mode
command, bound to
.Ql \&[
by default.
It be also entered when a cold-ass lil command dat produces output, such as
.Ic list-keys ,
is executed from a key binding.
.Pp
Da keys available depend on whether emacs or vi mode is selected
(see the
.Ic mode-keys
option).
Da followin keys is supported as appropriate fo' tha mode:
.Bl -column "FunctionXXXXXXXXXXXXXXXXX" "viXXXXXXXXXX" "emacs" -offset indent
.It Sy "Function" Ta Sy "vi" Ta Sy "emacs"
.It Li "Back ta indentation" Ta "^" Ta "M-m"
.It Li "Bottom of history" Ta "G" Ta "M-<"
.It Li "Clear selection" Ta "Escape" Ta "C-g"
.It Li "Copy selection" Ta "Enter" Ta "M-w"
.It Li "Cursor down" Ta "j" Ta "Down"
.It Li "Cursor left" Ta "h" Ta "Left"
.It Li "Cursor right" Ta "l" Ta "Right"
.It Li "Cursor ta bottom line" Ta "L" Ta ""
.It Li "Cursor ta middle line" Ta "M" Ta "M-r"
.It Li "Cursor ta top line" Ta "H" Ta "M-R"
.It Li "Cursor up" Ta "k" Ta "Up"
.It Li "Delete entire line" Ta "d" Ta "C-u"
.It Li "Delete/Copy ta end of line" Ta "D" Ta "C-k"
.It Li "End of line" Ta "$" Ta "C-e"
.It Li "Go ta line" Ta ":" Ta "g"
.It Li "Half page down" Ta "C-d" Ta "M-Down"
.It Li "Half page up" Ta "C-u" Ta "M-Up"
.It Li "Jump forward" Ta "f" Ta "f"
.It Li "Jump ta forward" Ta "t" Ta ""
.It Li "Jump backward" Ta "F" Ta "F"
.It Li "Jump ta backward" Ta "T" Ta ""
.It Li "Jump again" Ta ";" Ta ";"
.It Li "Jump again n' again n' again up in reverse" Ta "," Ta ","
.It Li "Next page" Ta "C-f" Ta "Page down"
.It Li "Next space" Ta "W" Ta ""
.It Li "Next space, end of word" Ta "E" Ta ""
.It Li "Next word" Ta "w" Ta ""
.It Li "Next word end" Ta "e" Ta "M-f"
.It Li "Other end of selection" Ta "o" Ta ""
.It Li "Paste buffer" Ta "p" Ta "C-y"
.It Li "Previous page" Ta "C-b" Ta "Page up"
.It Li "Previous word" Ta "b" Ta "M-b"
.It Li "Previous space" Ta "B" Ta ""
.It Li "Quit mode" Ta "q" Ta "Escape"
.It Li "Rectangle toggle" Ta "v" Ta "R"
.It Li "Scroll down" Ta "C-Down or C-e" Ta "C-Down"
.It Li "Scroll up" Ta "C-Up or C-y" Ta "C-Up"
.It Li "Search again" Ta "n" Ta "n"
.It Li "Search again n' again n' again up in reverse" Ta "N" Ta "N"
.It Li "Search backward" Ta "?" Ta "C-r"
.It Li "Search forward" Ta "/" Ta "C-s"
.It Li "Start of line" Ta "0" Ta "C-a"
.It Li "Start selection" Ta "Space" Ta "C-Space"
.It Li "Top of history" Ta "g" Ta "M->"
.It Li "Transpose characters" Ta "" Ta "C-t"
.El
.Pp
Da next n' previous word keys use space n' the
.Ql - ,
.Ql _
and
.Ql @
charactas as word delimitas by default yo, but dis can be adjusted by
settin the
.Em word-separators
session option.
Next word moves ta tha start of tha next word, next word end ta tha end of the
next word n' previous word ta tha start of tha previous word.
Da three next n' previous space keys work similarly but bust a space ridin' solo as
the word separator.
.Pp
Da jump commandz enable quick movement within a line.
For instance, typing
.Ql f
followed by
.Ql /
will move tha cursor ta tha next
.Ql /
characta on tha current line.
A
.Ql \&;
will then jump ta tha next occurrence.
.Pp
Commandz up in copy mode may be prefaced by a optionizzle repeat count.
With vi key bindings, a prefix is entered rockin tha number keys; with
emacs, tha Alt (meta) key n' a number begins prefix entry.
For example, ta move tha cursor forward by ten lyrics, use
.Ql M-1 0 M-f
in emacs mode, and
.Ql 10w
in vi.
.Pp
When copyin tha selection, tha repeat count indicates tha buffer index to
replace, if used.
.Pp
Mode key bindings is defined up in a set of named tables:
.Em vi-edit
and
.Em emacs-edit
for keys used when line editin all up in tha command prompt;
.Em vi-choice
and
.Em emacs-choice
for keys used when choosin from lists (like fuckin produced by the
.Ic chizzle-window
command); and
.Em vi-copy
and
.Em emacs-copy
used up in copy mode.
Da tablez may be viewed wit the
.Ic list-keys
command n' keys modified or removed with
.Ic bind-key
and
.Ic unbind-key .
One command accepts a argument,
.Ic copy-pipe ,
which copies tha selection n' pipes it ta a cold-ass lil command.
For example tha followin will bind
.Ql C-q
to copy tha selection into
.Pa /tmp
as well as tha paste buffer:
.Bd -literal -offset indent
bind-key -temacs-copy C-q copy-pipe "cat >/tmp/out"
.Ed
.Pp
Da paste buffer key pastes tha straight-up original gangsta line from tha top paste buffer on the
stack.
.Pp
Da synopsis fo' the
.Ic copy-mode
command is:
.Bl -tag -width Ds
.It Xo Ic copy-mode
.Op Fl u
.Op Fl t Ar target-pane
.Xc
Enta copy mode.
The
.Fl u
option scrolls one page up.
.El
.Pp
Each window displayed by
.Nm
may be split tha fuck into one or more
.Em panes ;
each pane takes up a cold-ass lil certain area of tha display n' be a separate terminal.
A window may be split tha fuck into panes rockin the
.Ic split-window
command.
Windows may be split horizontally (with the
.Fl h
flag) or vertically.
Panes may be resized wit the
.Ic resize-pane
command (bound to
.Ql C-up ,
.Ql C-down
.Ql C-left
and
.Ql C-right
by default), tha current pane may be chizzled wit the
.Ic select-pane
command n' the
.Ic rotate-window
and
.Ic swap-pane
commandz may be used ta swap panes without changin they position.
Panes is numbered beginnin from zero up in tha order they is pimped.
.Pp
A number of preset
.Em layouts
are available.
These may be selected wit the
.Ic select-layout
command or cycled with
.Ic next-layout
(bound to
.Ql Space
by default); once a layout is chosen, panes within it may be moved n' resized
as normal.
.Pp
Da followin layouts is supported:
.Bl -tag -width Ds
.It Ic even-horizontal
Panes is spread up evenly from left ta right across tha window.
.It Ic even-vertical
Panes is spread evenly from top ta bottom.
.It Ic main-horizontal
A big-ass (main) pane is shown all up in tha top of tha window n' tha remainin panes
are spread from left ta right up in tha leftover space all up in tha bottom.
Use the
.Em main-pane-height
window option ta specify tha height of tha top pane.
.It Ic main-vertical
Similar to
.Ic main-horizontal
but tha big-ass pane is placed on tha left n' tha others spread from top to
bottom along tha right.
See the
.Em main-pane-width
window option.
.It Ic tiled
Panes is spread up as evenly as possible over tha window up in both rows and
columns.
.El
.Pp
In addition,
.Ic select-layout
may be used ta apply a previously used layout - the
.Ic list-windows
command displays tha layout of each window up in a gangbangin' form suitable fo' use with
.Ic select-layout .
For example:
.Bd -literal -offset indent
$ tmux list-windows
0: ksh [159x48]
    layout: bb62,159x48,0,0{79x48,0,0,79x48,80,0}
$ tmux select-layout bb62,159x48,0,0{79x48,0,0,79x48,80,0}
.Ed
.Pp
.Nm
automatically adjusts tha size of tha layout fo' tha current window size.
Note dat a layout cannot be applied ta a window wit mo' panes than that
from which tha layout was originally defined.
.Pp
Commandz related ta windows n' panes is as bigs up:
.Bl -tag -width Ds
.It Xo Ic break-pane
.Op Fl dP
.Op Fl F Ar format
.Op Fl t Ar target-pane
.Xc
.D1 (alias: Ic breakp )
Break
.Ar target-pane
off from its containin window ta make it tha only pane up in a freshly smoked up window.
If
.Fl d
is given, tha freshly smoked up window do not become tha current window.
The
.Fl P
option prints shiznit bout tha freshly smoked up window afta it has been pimped.
By default, it uses tha format
.Ql #{session_name}:#{window_index}
but a gangbangin' finger-lickin' different format may be specified with
.Fl F .
.It Xo Ic capture-pane
.Op Fl aepPq
.Op Fl b Ar buffer-index
.Op Fl E Ar end-line
.Op Fl S Ar start-line
.Op Fl t Ar target-pane
.Xc
.D1 (alias: Ic capturep )
Capture tha contentz of a pane.
If
.Fl p
is given, tha output goes ta stdout, otherwise ta tha buffer specified with
.Fl b
or a freshly smoked up buffer if omitted.
If
.Fl a
is given, tha alternate screen is used, n' tha history aint accessible.
If no alternate screen exists, a error is ghon be returned unless
.Fl q
is given.
If
.Fl e
is given, tha output includes escape sequences fo' text n' background
attributes.
.Fl C
also escapes non-printable charactas as octal \exxx.
.Fl J
joins wrapped lines n' preserves trailin spaces at each linez end.
.Fl P
captures only any output dat tha pane has received dat is tha beginnin of an
as-yet incomplete escape sequence.
.Pp
.Fl S
and
.Fl E
specify tha startin n' endin line numbers, zero is tha straight-up original gangsta line of the
visible pane n' wack numbers is lines up in tha history.
Da default is ta capture only tha visible contentz of tha pane.
.It Xo
.Ic chizzle-client
.Op Fl F Ar format
.Op Fl t Ar target-window
.Op Ar template
.Xc
Put a window tha fuck into client chizzle mode, allowin a cold-ass lil client ta be selected
interactively from a list.
Afta a cold-ass lil client is chosen,
.Ql %%
is replaced by tha client
.Xr pty 7
path in
.Ar template
and tha result executed as a cold-ass lil command.
If
.Ar template
is not given, "detach-client -t '%%'" is used.
For tha meanin of the
.Fl F
flag, peep the
.Sx FORMATS
section.
This command works only if at least one client be attached.
.It Xo
.Ic chizzle-list
.Op Fl l Ar items
.Op Fl t Ar target-window
.Op Ar template
.Xc
Put a window tha fuck into list chizzle mode, allowing
.Ar items
to be selected.
.Ar items
can be a cold-ass lil comma-separated list ta display mo' than one item.
If a item has spaces, dat entry must be quoted.
Afta a item is chosen,
.Ql %%
is replaced by tha chosen item up in the
.Ar template
and tha result is executed as a cold-ass lil command.
If
.Ar template
is not given, "run-shell '%%'" is used.
.Ar items
also accepts format specifiers.
For tha meanin of dis peep the
.Sx FORMATS
section.
This command works only if at least one client be attached.
.It Xo
.Ic chizzle-session
.Op Fl F Ar format
.Op Fl t Ar target-window
.Op Ar template
.Xc
Put a window tha fuck into session chizzle mode, where a session may be selected
interactively from a list.
When one is chosen,
.Ql %%
is replaced by tha session name in
.Ar template
and tha result executed as a cold-ass lil command.
If
.Ar template
is not given, "switch-client -t '%%'" is used.
For tha meanin of the
.Fl F
flag, peep the
.Sx FORMATS
section.
This command works only if at least one client be attached.
.It Xo
.Ic chizzle-tree
.Op Fl suw
.Op Fl b Ar session-template
.Op Fl c Ar window-template
.Op Fl S Ar format
.Op Fl W Ar format
.Op Fl t Ar target-window
.Xc
Put a window tha fuck into tree chizzle mode, where either sessions or windows may be
selected interactively from a list.
By default, windows belongin ta a session is indented ta show their
relationshizzle ta a session.
.Pp
Note dat the
.Ic chizzle-window
and
.Ic chizzle-session
commandz is wrappers around
.Ic chizzle-tree .
.Pp
If
.Fl s
is given, will show sessions.
If
.Fl w
is given, will show windows.
.Pp
By default, tha tree is collapsed n' sessions must be expanded ta windows
with tha right arrow key.
The
.Fl u
option will start wit all sessions expanded instead.
.Pp
If
.Fl b
is given, will override tha default session command.
Note that
.Ql %%
can be used n' is ghon be replaced wit tha session name.
Da default option if not specified is "switch-client -t '%%'".
If
.Fl c
is given, will override tha default window command.
Like
.Fl b ,
.Ql %%
can be used n' is ghon be replaced wit tha session name n' window index.
When a window is chosen from tha list, tha session command is run before the
window command.
.Pp
If
.Fl S
is given will display tha specified format instead of tha default session
format.
If
.Fl W
is given will display tha specified format instead of tha default window
format.
For tha meanin of the
.Fl s
and
.Fl w
options, peep the
.Sx FORMATS
section.
.Pp
This command works only if at least one client be attached.
.It Xo
.Ic chizzle-window
.Op Fl F Ar format
.Op Fl t Ar target-window
.Op Ar template
.Xc
Put a window tha fuck into window chizzle mode, where a window may be chosen
interactively from a list.
Afta a window is selected,
.Ql %%
is replaced by tha session name n' window index in
.Ar template
and tha result executed as a cold-ass lil command.
If
.Ar template
is not given, "select-window -t '%%'" is used.
For tha meanin of the
.Fl F
flag, peep the
.Sx FORMATS
section.
This command works only if at least one client be attached.
.It Ic display-panes Op Fl t Ar target-client
.D1 (alias: Ic displayp)
Display a visible indicator of each pane shown by
.Ar target-client .
See the
.Ic display-panes-time ,
.Ic display-panes-colour ,
and
.Ic display-panes-active-colour
session options.
While tha indicator is on screen, a pane may be selected wit the
.Ql 0
to
.Ql 9
keys.
.It Xo Ic find-window
.Op Fl CNT
.Op Fl F Ar format
.Op Fl t Ar target-window
.Ar match-string
.Xc
.D1 (alias: Ic findw )
Search fo' the
.Xr fnmatch 3
pattern
.Ar match-string
in window names, titles, n' visible content (but not history).
Da flags control matchin behavior:
.Fl C
matches only visible window contents,
.Fl N
matches only tha window name and
.Fl T
matches only tha window title.
Da default is
.Fl CNT .
If only one window is matched, it'll be automatically selected,
otherwise a cold-ass lil chizzle list is shown.
For tha meanin of the
.Fl F
flag, peep the
.Sx FORMATS
section.
This command works only if at least one client be attached.
.It Xo Ic join-pane
.Op Fl bdhv
.Oo Fl l
.Ar size |
.Fl p Ar cementage Oc
.Op Fl s Ar src-pane
.Op Fl t Ar dst-pane
.Xc
.D1 (alias: Ic joinp )
Like
.Ic split-window ,
but instead of splitting
.Ar dst-pane
and bustin a freshly smoked up pane, split it n' move
.Ar src-pane
into tha space.
This can be used ta reverse
.Ic break-pane .
The
.Fl b
option causes
.Ar src-pane
to be joined ta left of or above
.Ar dst-pane .
.It Xo Ic kill-pane
.Op Fl a
.Op Fl t Ar target-pane
.Xc
.D1 (alias: Ic killp )
Destroy tha given pane.
If no panes remain up in tha containin window, it be also destroyed.
The
.Fl a
option kills all but tha pane given with
.Fl t .
.It Xo Ic kill-window
.Op Fl a
.Op Fl t Ar target-window
.Xc
.D1 (alias: Ic killw )
Bust a cap up in tha current window or tha window at
.Ar target-window ,
removin it from any sessions ta which it is linked.
The
.Fl a
option kills all but tha window given with
.Fl t .
.It Ic last-pane Op Fl t Ar target-window
.D1 (alias: Ic lastp )
Select tha last (previously selected) pane.
.It Ic last-window Op Fl t Ar target-session
.D1 (alias: Ic last )
Select tha last (previously selected) window.
If no
.Ar target-session
is specified, select tha last window of tha current session.
.It Xo Ic link-window
.Op Fl dk
.Op Fl s Ar src-window
.Op Fl t Ar dst-window
.Xc
.D1 (alias: Ic linkw )
Link tha window at
.Ar src-window
to tha specified
.Ar dst-window .
If
.Ar dst-window
is specified n' no such window exists, the
.Ar src-window
is linked there.
If
.Fl k
is given and
.Ar dst-window
exists, it is capped, otherwise a error is generated.
If
.Fl d
is given, tha newly linked window aint selected.
.It Xo Ic list-panes
.Op Fl as
.Op Fl F Ar format
.Op Fl t Ar target
.Xc
.D1 (alias: Ic lsp )
If
.Fl a
is given,
.Ar target
is ignored n' all panes on tha server is listed.
If
.Fl s
is given,
.Ar target
is a session (or tha current session).
If neither is given,
.Ar target
is a window (or tha current window).
For tha meanin of the
.Fl F
flag, peep the
.Sx FORMATS
section.
.It Xo Ic list-windows
.Op Fl a
.Op Fl F Ar format
.Op Fl t Ar target-session
.Xc
.D1 (alias: Ic lsw )
If
.Fl a
is given, list all windows on tha server.
Otherwise, list windows up in tha current session or in
.Ar target-session .
For tha meanin of the
.Fl F
flag, peep the
.Sx FORMATS
section.
.It Xo Ic move-pane
.Op Fl bdhv
.Oo Fl l
.Ar size |
.Fl p Ar cementage Oc
.Op Fl s Ar src-pane
.Op Fl t Ar dst-pane
.Xc
.D1 (alias: Ic movep )
Like
.Ic join-pane ,
but
.Ar src-pane
and
.Ar dst-pane
may belong ta tha same window.
.It Xo Ic move-window
.Op Fl rdk
.Op Fl s Ar src-window
.Op Fl t Ar dst-window
.Xc
.D1 (alias: Ic movew )
This is similar to
.Ic link-window ,
except tha window at
.Ar src-window
is moved to
.Ar dst-window .
With
.Fl r ,
all windows up in tha session is renumbered up in sequential order, respecting
the
.Ic base-index
option.
.It Xo Ic new-window
.Op Fl adkP
.Op Fl c Ar start-directory
.Op Fl F Ar format
.Op Fl n Ar window-name
.Op Fl t Ar target-window
.Op Ar shell-command
.Xc
.D1 (alias: Ic neww )
Smoke a freshly smoked up window.
With
.Fl a ,
the freshly smoked up window is banged all up in tha next index up from tha specified
.Ar target-window ,
movin windows up if necessary,
otherwise
.Ar target-window
is tha freshly smoked up window location.
.Pp
If
.Fl d
is given, tha session do not make tha freshly smoked up window tha current window.
.Ar target-window
represents tha window ta be pimped; if tha target already exists a error is
shown, unless the
.Fl k
flag is used, up in which case it is destroyed.
.Ar shell-command
is tha command ta execute.
If
.Ar shell-command
is not specified, tha value of the
.Ic default-command
option is used.
.Fl c
specifies tha hustlin directory up in which tha freshly smoked up window is pimped.
.Pp
When tha shell command completes, tha window closes.
See the
.Ic remain-on-exit
option ta chizzle dis behaviour.
.Pp
The
.Ev TERM
environment variable must be set to
.Dq screen
for all programs hustlin
.Em inside
.Nm .
New windows will automatically have
.Dq TERM=screen
added ta they environment yo, but care must be taken not ta reset dis up in shell
start-up files.
.Pp
The
.Fl P
option prints shiznit bout tha freshly smoked up window afta it has been pimped.
By default, it uses tha format
.Ql #{session_name}:#{window_index}
but a gangbangin' finger-lickin' different format may be specified with
.Fl F .
.It Ic next-layout Op Fl t Ar target-window
.D1 (alias: Ic nextl )
Move a window ta tha next layout n' rearrange tha panes ta fit.
.It Xo Ic next-window
.Op Fl a
.Op Fl t Ar target-session
.Xc
.D1 (alias: Ic next )
Move ta tha next window up in tha session.
If
.Fl a
is used, move ta tha next window wit a alert.
.It Xo Ic pipe-pane
.Op Fl o
.Op Fl t Ar target-pane
.Op Ar shell-command
.Xc
.D1 (alias: Ic pipep )
Pipe any output busted by tha program in
.Ar target-pane
to a gangbangin' finger-lickin' dirty-ass shell command.
A pane may only be piped ta one command at a time, any existin pipe is
closed before
.Ar shell-command
is executed.
The
.Ar shell-command
strin may contain tha special characta sequences supported by the
.Ic status-left
option.
If no
.Ar shell-command
is given, tha current pipe (if any) is closed.
.Pp
The
.Fl o
option only opens a freshly smoked up pipe if no previous pipe exists, allowin a pipe to
be toggled wit a single key, fo' example:
.Bd -literal -offset indent
bind-key C-p pipe-pane -o 'cat >>~/output.#I-#P'
.Ed
.It Xo Ic previous-layout
.Op Fl t Ar target-window
.Xc
.D1 (alias: Ic prevl )
Move ta tha previous layout up in tha session.
.It Xo Ic previous-window
.Op Fl a
.Op Fl t Ar target-session
.Xc
.D1 (alias: Ic prev )
Move ta tha previous window up in tha session.
With
.Fl a ,
move ta tha previous window wit a alert.
.It Xo Ic rename-window
.Op Fl t Ar target-window
.Ar new-name
.Xc
.D1 (alias: Ic renamew )
Rename tha current window, or tha window at
.Ar target-window
if specified, to
.Ar new-name .
.It Xo Ic resize-pane
.Op Fl DLRUZ
.Op Fl t Ar target-pane
.Op Fl x Ar width
.Op Fl y Ar height
.Op Ar adjustment
.Xc
.D1 (alias: Ic resizep )
Resize a pane, up, down, left or right by
.Ar adjustment
with
.Fl U ,
.Fl D ,
.Fl L
or
.Fl R ,
or
to a absolute size
with
.Fl x
or
.Fl y .
The
.Ar adjustment
is given up in lines or cells (the default is 1).
.Pp
With
.Fl Z ,
the actizzle pane is toggled between zoomed (occupyin tha whole of tha window)
and unzoomed (its aiiight posizzle up in tha layout).
.It Xo Ic respawn-pane
.Op Fl k
.Op Fl t Ar target-pane
.Op Ar shell-command
.Xc
.D1 (alias: Ic respawnp )
Reactivate a pane up in which tha command has exited (see the
.Ic remain-on-exit
window option).
If
.Ar shell-command
is not given, tha command used when tha pane was pimped is executed.
Da pane must be already inactive, unless
.Fl k
is given, up in which case any existin command is capped.
.It Xo Ic respawn-window
.Op Fl k
.Op Fl t Ar target-window
.Op Ar shell-command
.Xc
.D1 (alias: Ic respawnw )
Reactivate a window up in which tha command has exited (see the
.Ic remain-on-exit
window option).
If
.Ar shell-command
is not given, tha command used when tha window was pimped is executed.
Da window must be already inactive, unless
.Fl k
is given, up in which case any existin command is capped.
.It Xo Ic rotate-window
.Op Fl DU
.Op Fl t Ar target-window
.Xc
.D1 (alias: Ic rotatew )
Rotate tha positionz of tha panes within a window, either upward (numerically
lower) with
.Fl U
or downward (numerically higher).
.It Xo Ic select-layout
.Op Fl np
.Op Fl t Ar target-window
.Op Ar layout-name
.Xc
.D1 (alias: Ic selectl )
Choose a specific layout fo' a window.
If
.Ar layout-name
is not given, tha last preset layout used (if any) is reapplied.
.Fl n
and
.Fl p
are equivalent ta the
.Ic next-layout
and
.Ic previous-layout
commands.
.It Xo Ic select-pane
.Op Fl lDLRU
.Op Fl t Ar target-pane
.Xc
.D1 (alias: Ic selectp )
Make pane
.Ar target-pane
the actizzle pane up in window
.Ar target-window .
If one of
.Fl D ,
.Fl L ,
.Fl R ,
or
.Fl U
is used, respectively tha pane below, ta tha left, ta tha right, or above the
target pane is used.
.Fl l
is tha same ol' dirty as rockin the
.Ic last-pane
command.
.It Xo Ic select-window
.Op Fl lnpT
.Op Fl t Ar target-window
.Xc
.D1 (alias: Ic selectw )
Select tha window at
.Ar target-window .
.Fl l ,
.Fl n
and
.Fl p
are equivalent ta the
.Ic last-window ,
.Ic next-window
and
.Ic previous-window
commands.
If
.Fl T
is given n' tha selected window be already tha current window,
the command behaves like
.Ic last-window .
.It Xo Ic split-window
.Op Fl dhvP
.Op Fl c Ar start-directory
.Oo Fl l
.Ar size |
.Fl p Ar cementage Oc
.Op Fl t Ar target-pane
.Op Ar shell-command
.Op Fl F Ar format
.Xc
.D1 (alias: Ic splitw )
Smoke a freshly smoked up pane by splitting
.Ar target-pane :
.Fl h
does a horizontal split and
.Fl v
a vertical split; if neither is specified,
.Fl v
is assumed.
The
.Fl l
and
.Fl p
options specify tha size of tha freshly smoked up pane up in lines (for vertical split) or in
cells (for horizontal split), or as a cementage, respectively.
All other options have tha same meanin as fo' the
.Ic new-window
command.
.It Xo Ic swap-pane
.Op Fl dDU
.Op Fl s Ar src-pane
.Op Fl t Ar dst-pane
.Xc
.D1 (alias: Ic swapp )
Swap two panes.
If
.Fl U
is used n' no source pane is specified with
.Fl s ,
.Ar dst-pane
is swapped wit tha previous pane (before it numerically);
.Fl D
swaps wit tha next pane (afta it numerically).
.Fl d
instructs
.Nm
not ta chizzle tha actizzle pane.
.It Xo Ic swap-window
.Op Fl d
.Op Fl s Ar src-window
.Op Fl t Ar dst-window
.Xc
.D1 (alias: Ic swapw )
This is similar to
.Ic link-window ,
except tha source n' destination windows is swapped.
It be a error if no window exists at
.Ar src-window .
.It Xo Ic unlink-window
.Op Fl k
.Op Fl t Ar target-window
.Xc
.D1 (alias: Ic unlinkw )
Unlink
.Ar target-window .
Unless
.Fl k
is given, a window may be unlinked only if it is linked ta multiple sessions -
windows may not be linked ta no sessions;
if
.Fl k
is specified n' tha window is linked ta only one session, it is unlinked and
destroyed.
.El
.Sh KEY BINDINGS
.Nm
allows a cold-ass lil command ta be bound ta most keys, wit or without a prefix key.
When specifyin keys, most represent theyselves (for example
.Ql A
to
.Ql Z ) .
Ctrl keys may be prefixed with
.Ql C-
or
.Ql ^ ,
and Alt (meta) with
.Ql M- .
In addition, tha followin special key names is accepted:
.Em Up ,
.Em Down ,
.Em Left ,
.Em Right ,
.Em BSpace ,
.Em BTab ,
.Em DC
(Delete),
.Em End ,
.Em Enta ,
.Em Escape ,
.Em F1
to
.Em F20 ,
.Em Home ,
.Em IC
(Insert),
.Em NPage/PageDown/PgDn ,
.Em PPage/PageUp/PgUp ,
.Em Space ,
and
.Em Tab .
Note dat ta bind the
.Ql \&"
or
.Ql '
keys, quotation marks is necessary, fo' example:
.Bd -literal -offset indent
bind-key '"' split-window
bind-key "'" new-window
.Ed
.Pp
Commandz related ta key bindings is as bigs up:
.Bl -tag -width Ds
.It Xo Ic bind-key
.Op Fl cnr
.Op Fl t Ar key-table
.Ar key Ar command Op Ar arguments
.Xc
.D1 (alias: Ic bind )
Bind key
.Ar key
to
.Ar command .
By default (without
.Fl t )
the primary key bindings is modified (those normally activated wit tha prefix
key); up in dis case, if
.Fl n
is specified, it aint necessary ta use tha prefix key,
.Ar command
is bound to
.Ar key
alone.
The
.Fl r
flag indicates dis key may repeat, peep the
.Ic repeat-time
option.
.Pp
If
.Fl t
is present,
.Ar key
is bound in
.Ar key-table :
the bindin fo' command mode with
.Fl c
or fo' aiiight mode without.
To view tha default bindings n' possible commands, peep the
.Ic list-keys
command.
.It Ic list-keys Op Fl t Ar key-table
.D1 (alias: Ic lsk )
List all key bindings.
Without
.Fl t
the primary key bindings - dem executed when preceded by tha prefix key -
are printed.
.Pp
With
.Fl t ,
the key bindings in
.Ar key-table
are listed; dis may be one of:
.Em vi-edit ,
.Em emacs-edit ,
.Em vi-choice ,
.Em emacs-choice ,
.Em vi-copy
or
.Em emacs-copy .
.It Xo Ic send-keys
.Op Fl lR
.Op Fl t Ar target-pane
.Ar key Ar ...
.Xc
.D1 (alias: Ic bust )
Send a key or keys ta a window.
Each argument
.Ar key
is tha name of tha key (such as
.Ql C-a
or
.Ql npage
) ta send; if tha strang aint recognised as a key, it is busted as a series of
characters.
The
.Fl l
flag disablez key name lookup n' sendz tha keys literally.
All arguments is busted sequentially from first ta last.
The
.Fl R
flag causes tha terminal state ta be reset.
.It Xo Ic send-prefix
.Op Fl 2
.Op Fl t Ar target-pane
.Xc
Send tha prefix key, or with
.Fl 2
the secondary prefix key, ta a window as if dat shiznit was pressed.
.It Xo Ic unbind-key
.Op Fl acn
.Op Fl t Ar key-table
.Ar key
.Xc
.D1 (alias: Ic unbind )
Unbind tha command bound to
.Ar key .
Without
.Fl t
the primary key bindings is modified; up in dis case, if
.Fl n
is specified, tha command bound to
.Ar key
without a prefix (if any) is removed.
If
.Fl a
is present, all key bindings is removed.
.Pp
If
.Fl t
is present,
.Ar key
in
.Ar key-table
is unbound: tha bindin fo' command mode with
.Fl c
or fo' aiiight mode without.
.El
.Sh OPTIONS
Da appearizzle n' behaviour of
.Nm
may be modified by changin tha value of various options.
There is three typez of option:
.Em server options ,
.Em session options
and
.Em window options .
.Pp
The
.Nm
server has a set of global options which do not apply ta any particular
window or session.
These is altered wit the
.Ic set-option
.Fl s
command, or displayed wit the
.Ic show-options
.Fl s
command.
.Pp
In addition, each individual session may gotz a set of session options, and
there be a separate set of global session options.
Sessions which aint gots a particular option configured inherit tha value
from tha global session options.
Session options is set or unset wit the
.Ic set-option
command n' may be listed wit the
.Ic show-options
command.
Da available server n' session options is listed under the
.Ic set-option
command.
.Pp
Similarly, a set of window options be attached ta each window, n' there is
a set of global window options from which any unset options is inherited.
Window options is altered wit the
.Ic set-window-option
command n' can be listed wit the
.Ic show-window-options
command.
All window options is documented wit the
.Ic set-window-option
command.
.Pp
.Nm
also supports user options which is prefixed wit a
.Ql \&@ .
User options may have any name, so long as they is prefixed with
.Ql \&@ ,
and be set ta any string.
For example
.Bd -literal -offset indent
$ tmux setw -q @foo "abc123"
$ tmux showw -v @foo
abc123
.Ed
.Pp
Commandz which set options is as bigs up:
.Bl -tag -width Ds
.It Xo Ic set-option
.Op Fl agoqsuw
.Op Fl t Ar target-session | Ar target-window
.Ar option Ar value
.Xc
.D1 (alias: Ic set )
Set a window option with
.Fl w
(equivalent ta the
.Ic set-window-option
command),
a server option with
.Fl s ,
otherwise a session option.
.Pp
If
.Fl g
is specified, tha global session or window option is set.
The
.Fl u
flag unsets a option, so a session inherits tha option from tha global
options.
It aint possible ta unset a global option.
.Pp
The
.Fl o
flag prevents settin a option dat be already set.
.Pp
The
.Fl q
flag suppresses tha shiznital message (as if the
.Ic on tha fuckin' down-low
server option was set).
.Pp
With
.Fl a ,
and if tha option expects a strang or a style,
.Ar value
is appended ta tha existin setting.
For example:
.Bd -literal -offset indent
set -g status-left "foo"
set -ag status-left "bar"
.Ed
.Pp
Will result in
.Ql foobar .
And:
.Bd -literal -offset indent
set -g status-style "bg=red"
set -ag status-style "fg=blue"
.Ed
.Pp
Will result up in a red background
.Em and
blue foreground.
Without
.Fl a ,
the result would be tha default background n' a funky-ass blue foreground.
.Pp
Available window options is listed under
.Ic set-window-option .
.Pp
.Ar value
dependz on tha option n' may be a number, a string, or a gangbangin' flag (on, off, or
omitted ta toggle).
.Pp
Available server options are:
.Bl -tag -width Ds
.It Ic buffer-limit Ar number
Set tha number of buffers; as freshly smoked up buffers is added ta tha top of tha stack,
old ones is removed from tha bottom if necessary ta maintain dis maximum
length.
.It Ic escape-time Ar time
Set tha time up in millisecondz fo' which
.Nm
waits afta a escape is input ta determine if it is part of a gangbangin' function or meta
key sequences.
Da default is 500 milliseconds.
.It Xo Ic exit-unattached
.Op Ic on | off
.Xc
If enabled, tha server will exit when there be no attached clients.
.It Xo Ic focus-events
.Op Ic on | off
.Xc
When enabled, focus events is axed from tha terminal if supported and
passed all up in ta applications hustlin in
.Nm .
Attached clients should be detached n' attached again n' again n' again afta changin this
option.
.It Xo Ic on tha fuckin' down-low
.Op Ic on | off
.Xc
Enable or disable tha display of various shiznital lyrics (see also the
.Fl q
command line flag).
.It Xo Ic set-clipboard
.Op Ic on | off
.Xc
Attempt ta set tha terminal clipboard content rockin the
\ee]52;...\e007
.Xr xterm 1
escape sequences.
This option is on by default if there be an
.Em \&Ms
entry up in the
.Xr terminfo 5
description fo' tha client terminal.
Note dat dis feature need ta be enabled in
.Xr xterm 1
by settin tha resource:
.Bd -literal -offset indent
disallowedWindowOps: 20,21,SetXprop
.Ed
.Pp
Or changin dis property from the
.Xr xterm 1
interactizzle menu when required.
.El
.Pp
Available session options are:
.Bl -tag -width Ds
.It Ic assume-paste-time Ar milliseconds
If keys is entered fasta than one in
.Ar millisecondz ,
they is assumed ta done been pasted rather than typed and
.Nm
key bindings is not processed.
Da default is one millisecond n' zero disables.
.It Ic base-index Ar index
Set tha base index from which a unused index should be searched when a new
window is pimped.
Da default is zero.
.It Xo Ic bell-action
.Op Ic any | none | current
.Xc
Set action on window bell.
.Ic any
means a funky-ass bell up in any window linked ta a session causes a funky-ass bell up in tha current
window of dat session,
.Ic none
means all bells is ignored and
.Ic current
means only bells up in windows other than tha current window is ignored.
.It Xo Ic bell-on-alert
.Op Ic on | off
.Xc
If on, rang tha terminal bell when a alert
occurs.
.It Ic default-command Ar shell-command
Set tha command used fo' freshly smoked up windows (if not specified when tha window is
created) to
.Ar shell-command ,
which may be any
.Xr sh 1
command.
Da default be a empty string, which instructs
.Nm
to create a login shell rockin tha value of the
.Ic default-shell
option.
.It Ic default-shell Ar path
Specify tha default shell.
This is used as tha login shell fo' freshly smoked up windows when the
.Ic default-command
option is set ta empty, n' must be tha full path of tha executable.
When started
.Nm
tries ta set a thugged-out default value from tha straight-up original gangsta suitable of the
.Ev SHELL
environment variable, tha shell returned by
.Xr getpwuid 3 ,
or
.Pa /bin/sh .
This option should be configured when
.Nm
is used as a login shell.
.It Ic default-terminal Ar terminal
Set tha default terminal fo' freshly smoked up windows pimped up in dis session - the
default value of the
.Ev TERM
environment variable.
For
.Nm
to work erectly, this
.Em must
be set to
.Ql screen
or a thugged-out derivatizzle of dat shit.
.It Xo Ic destroy-unattached
.Op Ic on | off
.Xc
If enabled n' tha session is no longer attached ta any clients, it is
destroyed.
.It Xo Ic detach-on-destroy
.Op Ic on | off
.Xc
If on (the default), tha client is detached when tha session it be attached to
is destroyed.
If off, tha client is switched ta da most thugged-out recently actizzle of tha remaining
sessions.
.It Ic display-panes-active-colour Ar colour
Set tha colour used by the
.Ic display-panes
command ta show tha indicator fo' tha actizzle pane.
.It Ic display-panes-colour Ar colour
Set tha colour used by the
.Ic display-panes
command ta show tha indicators fo' inactizzle panes.
.It Ic display-panes-time Ar time
Set tha time up in millisecondz fo' which tha indicators shown by the
.Ic display-panes
command appear.
.It Ic display-time Ar time
Set tha amount of time fo' which status line lyrics n' other on-screen
indicators is displayed.
.Ar time
is up in milliseconds.
.It Ic history-limit Ar lines
Set tha maximum number of lines held up in window history.
This settin applies only ta freshly smoked up windows - existin window histories is not
resized n' retain tha limit all up in tha point they was pimped.
.It Ic lock-after-time Ar number
Lock tha session (like the
.Ic lock-session
command) after
.Ar number
secondz of inactivity, or tha entire server (all sessions) if the
.Ic lock-server
option is set.
Da default aint ta lock (set ta 0).
.It Ic lock-command Ar shell-command
Command ta run when lockin each client.
Da default is ta run
.Xr lock 1
with
.Fl np .
.It Xo Ic lock-server
.Op Ic on | off
.Xc
If dis option is
.Ic on
(the default),
instead of each session lockin individually as each has been
idle for
.Ic lock-after-time ,
the entire server will lock after
.Em all
sessions would have locked.
This has no effect as a session option; it must be set as a global option.
.It Ic message-command-style Ar style
Set status line message command style, where
.Ar style
is a cold-ass lil comma-separated list of characteristics ta be specified.
.Pp
These may be
.Ql bg=colour
to set tha background colour,
.Ql fg=colour
to set tha foreground colour, n' a list of attributes as specified below.
.Pp
Da colour is one of:
.Ic black ,
.Ic red ,
.Ic chronic ,
.Ic yellow ,
.Ic blue ,
.Ic magenta ,
.Ic cyan ,
.Ic white ,
aixterm bright variants (if supported:
.Ic brightred ,
.Ic brightchronic ,
and so on),
.Ic colour0
to
.Ic colour255
from tha 256-colour set,
.Ic default ,
or a hexadecimal RGB strang such as
.Ql #ffffff ,
which chizzlez tha closest match from tha default 256-colour set.
.Pp
Da attributes is either
.Ic none
or a cold-ass lil comma-delimited list of one or mo' of:
.Ic bright
(or
.Ic bold ) ,
.Ic dim ,
.Ic underscore ,
.Ic blink ,
.Ic reverse ,
.Ic hidden ,
or
.Ic italics ,
to turn a attribute on, or a attribute prefixed with
.Ql no
to turn one off.
.Pp
Examplez are:
.Bd -literal -offset indent
fg=yellow,bold,underscore,blink
bg=black,fg=default,noreverse
.Ed
.Pp
With the
.Fl a
flag ta the
.Ic set-option
command tha freshly smoked up steez be added otherwise tha existin steez is replaced.
.It Ic message-limit Ar number
Set tha number of error or shiznit lyrics ta save up in tha message log for
each client.
Da default is 20.
.It Ic message-style Ar style
Set status line message style.
For how tha fuck ta specify
.Ar steez ,
see the
.Ic message-command-style
option.
.It Xo Ic mouse-resize-pane
.Op Ic on | off
.Xc
If on,
.Nm
captures tha mouse n' allows panes ta be resized by draggin on they borders.
.It Xo Ic mouse-select-pane
.Op Ic on | off
.Xc
If on,
.Nm
captures tha mouse n' when a window is split tha fuck into multiple panes tha mouse may
be used ta select tha current pane.
Da mouse click be also passed all up in ta tha application as normal.
.It Xo Ic mouse-select-window
.Op Ic on | off
.Xc
If on, clickin tha mouse on a window name up in tha status line will select that
window.
.It Xo Ic mouse-utf8
.Op Ic on | off
.Xc
If enabled, request mouse input as UTF-8 on UTF-8 terminals.
.It Ic pane-active-border-style Ar style
Set tha pane border steez fo' tha currently actizzle pane.
For how tha fuck ta specify
.Ar steez ,
see the
.Ic message-command-style
option.
Attributes is ignored.
.It Ic pane-border-style Ar style
Set tha pane border steez fo' paneas aside from tha actizzle pane.
For how tha fuck ta specify
.Ar steez ,
see the
.Ic message-command-style
option.
Attributes is ignored.
.It Ic prefix Ar key
Set tha key accepted as a prefix key.
.It Ic prefix2 Ar key
Set a secondary key accepted as a prefix key.
.It Xo Ic renumber-windows
.Op Ic on | off
.Xc
If on, when a window is closed up in a session, automatically renumber tha other
windows up in numerical order.
This respects the
.Ic base-index
option if it has been set.
If off, do not renumber tha windows.
.It Ic repeat-time Ar time
Allow multiple commandz ta be entered without pressin tha prefix-key again
in tha specified
.Ar time
millisecondz (the default is 500).
Whether a key repeats may be set when it is bound rockin the
.Fl r
flag to
.Ic bind-key .
Repeat is enabled fo' tha default keys bound ta the
.Ic resize-pane
command.
.It Xo Ic set-remain-on-exit
.Op Ic on | off
.Xc
Set the
.Ic remain-on-exit
window option fo' any windows first pimped up in dis session.
When dis option is true, windows up in which tha hustlin program has
exited do not close, instead remainin open but inactivate.
Use the
.Ic respawn-window
command ta reactivate such a window, or the
.Ic kill-window
command ta destroy dat shit.
.It Xo Ic set-titles
.Op Ic on | off
.Xc
Attempt ta set tha client terminal title rockin the
.Em tsl
and
.Em fsl
.Xr terminfo 5
entries if they exist.
.Nm
automatically sets these ta tha \ee]2;...\e007 sequence if
the terminal appears ta be a xterm.
This option is off by default.
Note dat elinks
will only attempt ta set tha window title if tha STY environment
variable is set.
.It Ic set-titles-strin Ar string
Strin used ta set tha window title if
.Ic set-titles
is on.
Characta sequences is replaced as fo' the
.Ic status-left
option.
.It Xo Ic status
.Op Ic on | off
.Xc
Show or hide tha status line.
.It Ic status-interval Ar interval
Update tha status bar every
.Ar interval
seconds.
By default, thugged-out shiznit will occur every last muthafuckin 15 seconds.
A settin of zero disablez redrawin at interval.
.It Xo Ic status-justify
.Op Ic left | centre | right
.Xc
Set tha posizzle of tha window list component of tha status line: left, centre
or right justified.
.It Xo Ic status-keys
.Op Ic vi | emacs
.Xc
Use vi or emacs-style
key bindings up in tha status line, fo' example all up in tha command prompt.
Da default is emacs, unless the
.Ev VISUAL
or
.Ev EDITOR
environment variablez is set n' contain tha string
.Ql vi .
.It Ic status-left Ar string
Display
.Ar string
(by default tha session name) ta tha left of tha status bar.
.Ar string
will be passed through
.Xr strftime 3
and formats (see
.Sx FORMATS )
will be expanded.
It may also contain any of tha followin special characta sequences:
.Bl -column "Characta pair" "Replaced with" -offset indent
.It Sy "Characta pair" Ta Sy "Replaced with"
.It Li "#(shell-command)" Ta "First line of tha commandz output"
.It Li "#[attributes]" Ta "Colour or attribute chizzle"
.It Li "##" Ta "A literal" Ql #
.El
.Pp
Da #(shell-command) form executes
.Ql shell-command
and bangs tha straight-up original gangsta line of its output.
Note dat shell commandz is only executed once all up in tha interval specified by
the
.Ic status-interval
option: if tha status line is redrawn up in tha meantime, tha previous result is
used.
Shell commandz is executed wit the
.Nm
global environment set (see the
.Sx ENVIRONMENT
section).
.Pp
For details on how tha fuck tha names n' titlez can be set peep the
.Sx "NAMES AND TITLES"
section.
For a list of allowed attributes peep the
.Ic message-command-style
option.
.Pp
Examplez are:
.Bd -literal -offset indent
#(sysctl vm.loadavg)
#[fg=yellow,bold]#(apm -l)%%#[default] [#S]
.Ed
.Pp
Where appropriate, special characta sequences may be prefixed wit a number to
specify tha maximum length, fo' example
.Ql #24T .
.Pp
By default, UTF-8 in
.Ar string
is not interpreted, ta enable UTF-8, use the
.Ic status-utf8
option.
.It Ic status-left-length Ar length
Set tha maximum
.Ar length
of tha left component of tha status bar.
Da default is 10.
.It Ic status-left-style Ar style
Set tha steez of tha left part of tha status line.
For how tha fuck ta specify
.Ar steez ,
see the
.Ic message-command-style
option.
.It Xo Ic status-position
.Op Ic top | bottom
.Xc
Set tha posizzle of tha status line.
.It Ic status-right Ar string
Display
.Ar string
to tha right of tha status bar.
By default, tha current window title up in double quotes, tha date n' tha time
are shown.
As with
.Ic status-left ,
.Ar string
will be passed to
.Xr strftime 3 ,
characta pairs is replaced, n' UTF-8 is dependent on the
.Ic status-utf8
option.
.It Ic status-right-length Ar length
Set tha maximum
.Ar length
of tha right component of tha status bar.
Da default is 40.
.It Ic status-right-style Ar style
Set tha steez of tha right part of tha status line.
For how tha fuck ta specify
.Ar steez ,
see the
.Ic message-command-style
option.
.It Ic status-style Ar style
Set status line style.
For how tha fuck ta specify
.Ar steez ,
see the
.Ic message-command-style
option.
.It Xo Ic status-utf8
.Op Ic on | off
.Xc
Instruct
.Nm
to treat top-bit-set charactas up in the
.Ic status-left
and
.Ic status-right
strings as UTF-8; notably, dis is blingin fo' wide characters.
This option defaults ta off.
.It Ic terminal-overrides Ar string
Gotz Nuff a list of entries which override terminal descriptions read using
.Xr terminfo 5 .
.Ar string
is a cold-ass lil comma-separated list of shit each a cold-ass lil colon-separated strang made up of a
terminal type pattern (matched using
.Xr fnmatch 3 )
and a set of
.Em name=value
entries.
.Pp
For example, ta set the
.Ql clear
.Xr terminfo 5
entry to
.Ql \ee[H\ee[2J
for all terminal types n' the
.Ql dch1
entry to
.Ql \ee[P
for the
.Ql rxvt
terminal type, tha option could be set ta tha string:
.Bd -literal -offset indent
"*:clear=\ee[H\ee[2J,rxvt:dch1=\ee[P"
.Ed
.Pp
Da terminal entry value is passed through
.Xr strunvis 3
before interpretation.
Da default value forcibly erects the
.Ql colors
entry fo' terminals which support 256 colours:
.Bd -literal -offset indent
"*256col*:colors=256,xterm*:XT"
.Ed
.It Ic update-environment Ar variables
Set a space-separated strang containin a list of environment variablez ta be
copied tha fuck into tha session environment when a freshly smoked up session is pimped or an
existin session be attached.
Any variablez dat do not exist up in tha source environment is set ta be
removed from tha session environment (as if
.Fl r
was given ta the
.Ic set-environment
command).
Da default is
"DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID
XAUTHORITY".
.It Xo Ic visual-activity
.Op Ic on | off
.Xc
If on, display a status line message when activitizzle occurs up in a window
for which the
.Ic monitor-activity
window option is enabled.
.It Xo Ic visual-bell
.Op Ic on | off
.Xc
If dis option is on, a message is shown on a funky-ass bell instead of it bein passed
all up in ta tha terminal (which normally cook up a sound).
Also peep the
.Ic bell-action
option.
.It Xo Ic visual-content
.Op Ic on | off
.Xc
Like
.Ic visual-activitizzle ,
display a message when content is present up in a window
for which the
.Ic monitor-content
window option is enabled.
.It Xo Ic visual-silence
.Op Ic on | off
.Xc
If
.Ic monitor-silence
is enabled, prints a message afta tha interval has expired on a given window.
.It Ic word-separators Ar string
Sets tha sessionz conception of what tha fuck charactas is considered word
separators, fo' tha purposez of tha next n' previous word commandz in
copy mode.
Da default is
.Ql \ -_@ .
.El
.It Xo Ic set-window-option
.Op Fl agoqu
.Op Fl t Ar target-window
.Ar option Ar value
.Xc
.D1 (alias: Ic setw )
Set a window option.
The
.Fl a ,
.Fl g ,
.Fl o ,
.Fl q
and
.Fl u
flags work similarly ta the
.Ic set-option
command.
.Pp
Supported window options are:
.Pp
.Bl -tag -width Ds -compact
.It Xo Ic aggressive-resize
.Op Ic on | off
.Xc
Aggressively resize tha chosen window.
This means that
.Nm
will resize tha window ta tha size of tha smallest session fo' which it is the
current window, rather than tha smallest session ta which it be attached.
Da window may resize when tha current window is chizzled on another sessions;
this option is phat fo' full-screen programs which support
.Dv SIGWINCH
and skanky fo' interactizzle programs like fuckin shells.
.Pp
.It Xo Ic allow-rename
.Op Ic on | off
.Xc
Allow programs ta chizzle tha window name rockin a terminal escape
sequence (\\033k...\\033\\\\).
Da default is on.
.Pp
.It Xo Ic alternate-screen
.Op Ic on | off
.Xc
This option configures whether programs hustlin inside
.Nm
may use tha terminal alternate screen feature, which allows the
.Em smcup
and
.Em rmcup
.Xr terminfo 5
capabilities.
Da alternate screen feature preserves tha contentz of tha window when an
interactizzle application starts n' restores it on exit, so dat any output
visible before tha application starts reappears unchanged afta it exits.
Da default is on.
.Pp
.It Xo Ic automatic-rename
.Op Ic on | off
.Xc
Control automatic window renaming.
When dis settin is enabled,
.Nm
will rename tha window automatically rockin tha format specified by
.Ic automatic-rename-format .
This flag be automatically disabled fo' a individual window when a name
is specified at creation with
.Ic new-window
or
.Ic new-session ,
or lata with
.Ic rename-window ,
or wit a terminal escape sequence.
It may be switched off globally with:
.Bd -literal -offset indent
set-window-option -g automatic-rename off
.Ed
.Pp
.It Ic automatic-rename-format Ar format
Da format (see
.Sx FORMATS )
used when the
.Ic automatic-rename
option is enabled.
.Pp
.It Ic c0-change-interval Ar interval
.It Ic c0-change-trigger Ar trigger
These two options configure a simple form of rate limitin fo' a pane.
If
.Nm
sees mo' than
.Ar trigger
C0 sequences dat modify tha screen (for example, carriage returns, linefeeds
or backspaces) up in one millisecond, it will stop uppimpin tha pane immediately and
instead redraw it entirely every
.Ar interval
milliseconds.
This helps ta prevent fast output (such as
.Xr yeaaaa 1 )
overwhelmin tha terminal.
Da default be a trigger of 250 n' a interval of 100.
A trigger of zero disablez tha rate limiting.
.Pp
.It Ic clock-mode-colour Ar colour
Set clock colour.
.Pp
.It Xo Ic clock-mode-style
.Op Ic 12 | 24
.Xc
Set clock minute format.
.Pp
.It Ic force-height Ar height
.It Ic force-width Ar width
Prevent
.Nm
from resizin a window ta pimped outa than
.Ar width
or
.Ar height .
A value of zero restores tha default unlimited setting.
.Pp
.It Ic main-pane-height Ar height
.It Ic main-pane-width Ar width
Set tha width or height of tha main (left or top) pane up in the
.Ic main-horizontal
or
.Ic main-vertical
layouts.
.Pp
.It Xo Ic mode-keys
.Op Ic vi | emacs
.Xc
Use vi or emacs-style key bindings up in copy n' chizzle modes.
As wit the
.Ic status-keys
option, tha default is emacs, unless
.Ev VISUAL
or
.Ev EDITOR
gotz nuff
.Ql vi .
.Pp
.It Xo Ic mode-mouse
.Op Ic on | off | copy-mode
.Xc
Mouse state up in modes.
If on, tha mouse may be used ta enta copy mode n' copy a selection by
dragging, ta enta copy mode n' scroll wit tha mouse wheel, or ta select an
option up in chizzle mode.
If set to
.Em copy-mode ,
the mouse behaves as set ta on yo, but cannot be used ta enta copy
mode.
.Pp
.It Ic mode-style Ar style
Set window modes style.
For how tha fuck ta specify
.Ar steez ,
see the
.Ic message-command-style
option.
.Pp
.It Xo Ic monitor-activity
.Op Ic on | off
.Xc
Monitor fo' activitizzle up in tha window.
Windows wit activitizzle is highlighted up in tha status line.
.Pp
.It Ic monitor-content Ar match-string
Monitor content up in tha window.
When
.Xr fnmatch 3
pattern
.Ar match-string
appears up in tha window, it is highlighted up in tha status line.
.Pp
.It Xo Ic monitor-silence
.Op Ic interval
.Xc
Monitor fo' silence (no activity) up in tha window within
.Ic interval
seconds.
Windows dat done been silent fo' tha interval is highlighted up in the
status line.
An interval of zero disablez tha monitoring.
.Pp
.It Ic other-pane-height Ar height
Set tha height of tha other panes (not tha main pane) up in the
.Ic main-horizontal
layout.
If dis option is set ta 0 (the default), it gonna git no effect.
If both the
.Ic main-pane-height
and
.Ic other-pane-height
options is set, tha main pane will grow talla ta make tha other panes the
specified height yo, but aint NEVER gonna shrink ta do so.
.Pp
.It Ic other-pane-width Ar width
Like
.Ic other-pane-height ,
but set tha width of other panes up in the
.Ic main-vertical
layout.
.Pp
.It Ic pane-base-index Ar index
Like
.Ic base-index ,
but set tha startin index fo' pane numbers.
.Pp
.It Xo Ic remain-on-exit
.Op Ic on | off
.Xc
A window wit dis flag set aint destroyed when tha program hustlin up in it
exits.
Da window may be reactivated wit the
.Ic respawn-window
command.
.Pp
.It Xo Ic synchronize-panes
.Op Ic on | off
.Xc
Duplicate input ta any pane ta all other panes up in tha same window (only
for panes dat is not up in any special mode).
.Pp
.It Xo Ic utf8
.Op Ic on | off
.Xc
Instructs
.Nm
to expect UTF-8 sequences ta step tha fuck up in dis window.
.Pp
.It Ic window-status-activity-style Ar style
Set status line steez fo' windows wit a activitizzle alert.
For how tha fuck ta specify
.Ar steez ,
see the
.Ic message-command-style
option.
.Pp
.It Ic window-status-bell-style Ar style
Set status line steez fo' windows wit a funky-ass bell alert.
For how tha fuck ta specify
.Ar steez ,
see the
.Ic message-command-style
option.
.Pp
.It Ic window-status-content-style Ar style
Set status line steez fo' windows wit a cold-ass lil content alert.
For how tha fuck ta specify
.Ar steez ,
see the
.Ic message-command-style
option.
.Pp
.It Ic window-status-current-format Ar string
Like
.Ar window-status-format ,
but is tha format used when tha window is tha current window.
.Pp
.It Ic window-status-current-style Ar style
Set status line steez fo' tha currently actizzle window.
For how tha fuck ta specify
.Ar steez ,
see the
.Ic message-command-style
option.
.Pp
.It Ic window-status-format Ar string
Set tha format up in which tha window is displayed up in tha status line window list.
See the
.Ar status-left
option fo' detailz of special characta sequences available.
Da default is
.Ql #I:#W#F .
.Pp
.It Ic window-status-last-style Ar style
Set status line steez fo' tha last actizzle window.
For how tha fuck ta specify
.Ar steez ,
see the
.Ic message-command-style
option.
.Pp
.It Ic window-status-separator Ar string
Sets tha separator drawn between windows up in tha status line.
Da default be a single space character.
.Pp
.It Ic window-status-style Ar style
Set status line steez fo' a single window.
For how tha fuck ta specify
.Ar steez ,
see the
.Ic message-command-style
option.
.Pp
.It Xo Ic xterm-keys
.Op Ic on | off
.Xc
If dis option is set,
.Nm
will generate
.Xr xterm 1 -style
function key sequences; these gotz a number included ta indicate modifiers such
as Shift, Alt or Ctrl.
Da default is off.
.Pp
.It Xo Ic wrap-search
.Op Ic on | off
.Xc
If dis option is set, searches will wrap round tha end of tha pane contents.
Da default is on.
.El
.It Xo Ic show-options
.Op Fl gqsvw
.Op Fl t Ar target-session | Ar target-window
.Op Ar option
.Xc
.D1 (alias: Ic show )
Show tha window options (or a single window option if given) with
.Fl w
(equivalent to
.Ic show-window-options ) ,
the server options with
.Fl s ,
otherwise tha session options for
.Ar target session .
Global session or window options is listed if
.Fl g
is used.
.Fl v
shows only tha option value, not tha name.
If
.Fl q
is set, no error is ghon be returned if
.Ar option
is unset.
.It Xo Ic show-window-options
.Op Fl gv
.Op Fl t Ar target-window
.Op Ar option
.Xc
.D1 (alias: Ic showw )
List tha window options or a single option for
.Ar target-window ,
or tha global window options if
.Fl g
is used.
.Fl v
shows only tha option value, not tha name.
.El
.Sh FORMATS
Certain commandz accept the
.Fl F
flag wit a
.Ar format
argument.
This be a strang which controls tha output format of tha command.
Replacement variablez is enclosed in
.Ql #{
and
.Ql } ,
for example
.Ql #{session_name} .
Some variablez also have a shorta alias such as
.Ql #S .
.Ql ##
is replaced by a single
.Ql # .
Conditionals is also accepted by prefixin with
.Ql \&?
and separatin two alternatives wit a cold-ass lil comma;
if tha specified variable exists n' aint zero, tha straight-up original gangsta alternative
is chosen, otherwise tha second is used.
For example
.Ql #{?session_attached,attached,not attached}
will include tha string
.Ql attached
if tha session be attached n' tha string
.Ql not attached
if it is unattached.
A limit may be placed on tha length of tha resultant strang by prefixin it
by an
.Ql = ,
a number n' a cold-ass lil colon, so
.Ql #{=10:pane_title}
will include at most tha straight-up original gangsta 10 charactaz of tha pane title.
.Pp
Da followin variablez is available, where appropriate:
.Bl -column "XXXXXXXXXXXXXXXXXXX" "XXXXX"
.It Sy "Variable name" Ta Sy "Alias" Ta Sy "Replaced with"
.It Li "alternate_on" Ta "" Ta "If pane is up in alternate screen"
.It Li "alternate_saved_x" Ta "" Ta "Saved cursor X up in alternate screen"
.It Li "alternate_saved_y" Ta "" Ta "Saved cursor Y up in alternate screen"
.It Li "buffer_sample" Ta "" Ta "First 50 charactas from buffer"
.It Li "buffer_size" Ta "" Ta "Size of tha specified buffer up in bytes"
.It Li "client_activity" Ta "" Ta "Integer time client last had activity"
.It Li "client_activity_string" Ta "" Ta "Strin time client last had activity"
.It Li "client_created" Ta "" Ta "Integer time client pimped"
.It Li "client_created_string" Ta "" Ta "Strin time client pimped"
.It Li "client_height" Ta "" Ta "Height of client"
.It Li "client_last_session" Ta "" Ta "Name of tha clientz last session"
.It Li "client_prefix" Ta "" Ta "1 if prefix key has been pressed"
.It Li "client_readonly" Ta "" Ta "1 if client is readonly"
.It Li "client_session" Ta "" Ta "Name of tha clientz session"
.It Li "client_termname" Ta "" Ta "Terminal name of client"
.It Li "client_tty" Ta "" Ta "Pseudo terminal of client"
.It Li "client_utf8" Ta "" Ta "1 if client supports utf8"
.It Li "client_width" Ta "" Ta "Width of client"
.It Li "cursor_flag" Ta "" Ta "Pane cursor flag"
.It Li "cursor_x" Ta "" Ta "Cursor X posizzle up in pane"
.It Li "cursor_y" Ta "" Ta "Cursor Y posizzle up in pane"
.It Li "history_bytes" Ta "" Ta "Number of bytes up in window history"
.It Li "history_limit" Ta "" Ta "Maximum window history lines"
.It Li "history_size" Ta "" Ta "Size of history up in bytes"
.It Li "host" Ta "#H" Ta "Hostname of local host"
.It Li "host_short" Ta "#h" Ta "Hostname of local host (no domain name)"
.It Li "insert_flag" Ta "" Ta "Pane bang flag"
.It Li "keypad_cursor_flag" Ta "" Ta "Pane keypad cursor flag"
.It Li "keypad_flag" Ta "" Ta "Pane keypad flag"
.It Li "line" Ta "" Ta "Line number up in tha list"
.It Li "mouse_any_flag" Ta "" Ta "Pane mouse any flag"
.It Li "mouse_button_flag" Ta "" Ta "Pane mouse button flag"
.It Li "mouse_standard_flag" Ta "" Ta "Pane mouse standard flag"
.It Li "mouse_utf8_flag" Ta "" Ta "Pane mouse UTF-8 flag"
.It Li "pane_active" Ta "" Ta "1 if actizzle pane"
.It Li "pane_current_command" Ta "" Ta "Current command if available"
.It Li "pane_current_path" Ta "" Ta "Current path if available"
.It Li "pane_dead" Ta "" Ta "1 if pane is dead"
.It Li "pane_height" Ta "" Ta "Height of pane"
.It Li "pane_id" Ta "#D" Ta "Unique pane ID"
.It Li "pane_in_mode" Ta "" Ta "If pane is up in a mode"
.It Li "pane_synchronized" Ta "" Ta "If pane is synchronized"
.It Li "pane_index" Ta "#P" Ta "Index of pane"
.It Li "pane_pid" Ta "" Ta "PID of first process up in pane"
.It Li "pane_start_command" Ta "" Ta "Command pane started with"
.It Li "pane_start_path" Ta "" Ta "Path pane started with"
.It Li "pane_tabs" Ta "" Ta "Pane tab positions"
.It Li "pane_title" Ta "#T" Ta "Title of pane"
.It Li "pane_tty" Ta "" Ta "Pseudo terminal of pane"
.It Li "pane_width" Ta "" Ta "Width of pane"
.It Li "saved_cursor_x" Ta "" Ta "Saved cursor X up in pane"
.It Li "saved_cursor_y" Ta "" Ta "Saved cursor Y up in pane"
.It Li "scroll_region_lower" Ta "" Ta "Bottom of scroll region up in pane"
.It Li "scroll_region_upper" Ta "" Ta "Top of scroll region up in pane"
.It Li "session_attached" Ta "" Ta "1 if session attached"
.It Li "session_created" Ta "" Ta "Integer time session pimped"
.It Li "session_created_string" Ta "" Ta "Strin time session pimped"
.It Li "session_group" Ta "" Ta "Number of session group"
.It Li "session_grouped" Ta "" Ta "1 if session up in a group"
.It Li "session_height" Ta "" Ta "Height of session"
.It Li "session_id" Ta "" Ta "Unique session ID"
.It Li "session_name" Ta "#S" Ta "Name of session"
.It Li "session_width" Ta "" Ta "Width of session"
.It Li "session_windows" Ta "" Ta "Number of windows up in session"
.It Li "window_active" Ta "" Ta "1 if window active"
.It Li "window_activity_flag" Ta "" Ta "1 if window has activitizzle alert"
.It Li "window_bell_flag" Ta "" Ta "1 if window has bell"
.It Li "window_content_flag" Ta "" Ta "1 if window has content alert"
.It Li "window_find_matches" Ta "" Ta "Matched data from tha find-window"
.It Li "window_flags" Ta "#F" Ta "Window flags"
.It Li "window_height" Ta "" Ta "Height of window"
.It Li "window_id" Ta "" Ta "Unique window ID"
.It Li "window_index" Ta "#I" Ta "Index of window"
.It Li "window_layout" Ta "" Ta "Window layout description"
.It Li "window_name" Ta "#W" Ta "Name of window"
.It Li "window_panes" Ta "" Ta "Number of panes up in window"
.It Li "window_silence_flag" Ta "" Ta "1 if window has silence alert"
.It Li "window_width" Ta "" Ta "Width of window"
.It Li "wrap_flag" Ta "" Ta "Pane wrap flag"
.El
.Sh NAMES AND TITLES
.Nm
distinguishes between names n' titles.
Windows n' sessions have names, which may be used ta specify dem up in targets
and is displayed up in tha status line n' various lists: tha name is the
.Nm
identifier fo' a window or session.
Only panes have titles.
A panez title is typically set by tha program hustlin inside tha pane and
is not modified by
.Nm .
It be tha same mechanizzle used ta set fo' example the
.Xr xterm 1
window title up in an
.Xr X 7
window manager.
Windows theyselves aint gots titlez - a windowz title is tha title of its
actizzle pane.
.Nm
itself may set tha title of tha terminal up in which tha client is hustlin, see
the
.Ic set-titles
option.
.Pp
A sessionz name is set wit the
.Ic new-session
and
.Ic rename-session
commands.
A windowz name is set wit one of:
.Bl -enum -width Ds
.It
A command argument (such as
.Fl n
for
.Ic new-window
or
.Ic new-session ) .
.It
An escape sequence:
.Bd -literal -offset indent
$ printf '\e033kWINDOW_NAME\e033\e\e'
.Ed
.It
Automatic renaming, which sets tha name ta tha actizzle command up in tha window's
actizzle pane.
See the
.Ic automatic-rename
option.
.El
.Pp
When a pane is first pimped, its title is tha hostname.
A panez title can be set via tha OSC title settin sequence, fo' example:
.Bd -literal -offset indent
$ printf '\e033]2;My fuckin Title\e033\e\e'
.Ed
.Sh ENVIRONMENT
When tha server is started,
.Nm
copies tha environment tha fuck into the
.Em global environment ;
in addition, each session has a
.Em session environment .
When a window is pimped, tha session n' global environments is merged.
If a variable exists up in both, tha value from tha session environment is used.
Da result is tha initial environment passed ta tha freshly smoked up process.
.Pp
The
.Ic update-environment
session option may be used ta update tha session environment from tha client
when a freshly smoked up session is pimped or a oldschool reattached.
.Nm
also initialises the
.Ev TMUX
variable wit some internal shiznit ta allow commandz ta be executed
from inside, n' the
.Ev TERM
variable wit tha erect terminal settin of
.Ql screen .
.Pp
Commandz ta alta n' view tha environment are:
.Bl -tag -width Ds
.It Xo Ic set-environment
.Op Fl gru
.Op Fl t Ar target-session
.Ar name Op Ar value
.Xc
.D1 (alias: Ic setenv )
Set or unset a environment variable.
If
.Fl g
is used, tha chizzle is made up in tha global environment; otherwise, it be applied
to tha session environment for
.Ar target-session .
The
.Fl u
flag unsets a variable.
.Fl r
indicates tha variable is ta be removed from tha environment before startin a
new process.
.It Xo Ic show-environment
.Op Fl g
.Op Fl t Ar target-session
.Op Ar variable
.Xc
.D1 (alias: Ic showenv )
Display tha environment for
.Ar target-session
or tha global environment with
.Fl g .
If
.Ar variable
is omitted, all variablez is shown.
Variablez removed from tha environment is prefixed with
.Ql - .
.El
.Sh STATUS LINE
.Nm
includes a optionizzle status line which is displayed up in tha bottom line of each
terminal.
By default, tha status line is enabled (it may be disabled wit the
.Ic status
session option) n' gotz nuff, from left-to-right: tha name of tha current
session up in square brackets; tha window list; tha title of tha actizzle pane
in double quotes; n' tha time n' date.
.Pp
Da status line is made of three parts: configurable left n' right sections
(which may contain dynamic content like fuckin tha time or output from a gangbangin' finger-lickin' dirty-ass shell
command, peep the
.Ic status-left ,
.Ic status-left-length ,
.Ic status-right ,
and
.Ic status-right-length
options below), n' a cold-ass lil central window list.
By default, tha window list shows tha index, name n' (if any) flag of the
windows present up in tha current session up in ascendin numerical order.
It may be customised wit the
.Ar window-status-format
and
.Ar window-status-current-format
options.
Da flag is one of tha followin symbols appended ta tha window name:
.Bl -column "Symbol" "Meaning" -offset indent
.It Sy "Symbol" Ta Sy "Meaning"
.It Li "*" Ta "Denotes tha current window."
.It Li "-" Ta "Marks tha last window (previously selected)."
.It Li "#" Ta "Window is monitored n' activitizzle has been detected."
.It Li "!" Ta "A bell has occurred up in tha window."
.It Li "+" Ta "Window is monitored fo' content n' it has rocked up."
.It Li "~" Ta "Da window has been silent fo' tha monitor-silence interval."
.It Li "Z" Ta "Da windowz actizzle pane is zoomed."
.El
.Pp
Da # symbol relates ta the
.Ic monitor-activity
and + ta the
.Ic monitor-content
window options.
Da window name is printed up in inverted colours if a alert (bell, activitizzle or
content) is present.
.Pp
Da colour n' attributez of tha status line may be configured, tha entire
status line rockin the
.Ic status-style
session option n' individual windows rockin the
.Ic window-status-style
window option.
.Pp
Da status line be automatically refreshed at interval if it has chizzled, the
interval may be controlled wit the
.Ic status-interval
session option.
.Pp
Commandz related ta tha status line is as bigs up:
.Bl -tag -width Ds
.It Xo Ic command-prompt
.Op Fl I Ar inputs
.Op Fl p Ar prompts
.Op Fl t Ar target-client
.Op Ar template
.Xc
Open tha command prompt up in a cold-ass lil client.
This may be used from inside
.Nm
to execute commandz interactively.
.Pp
If
.Ar template
is specified, it is used as tha command.
If present,
.Fl I
is a cold-ass lil comma-separated list of tha initial text fo' each prompt.
If
.Fl p
is given,
.Ar prompts
is a cold-ass lil comma-separated list of prompts which is displayed up in order; otherwise
a single prompt is displayed, constructed from
.Ar template
if it is present, or
.Ql \&:
if not.
.Pp
Both
.Ar inputs
and
.Ar prompts
may contain tha special characta sequences supported by the
.Ic status-left
option.
.Pp
Before tha command is executed, tha straight-up original gangsta occurrence of tha string
.Ql %%
and all occurrences of
.Ql %1
are replaced by tha response ta tha straight-up original gangsta prompt, tha second
.Ql %%
and all
.Ql %2
are replaced wit tha response ta tha second prompt, n' so on fo' further
prompts.
Up ta nine prompt responses may be replaced
.Po
.Ql %1
to
.Ql %9
.Pc .
.It Xo Ic confirm-before
.Op Fl p Ar prompt
.Op Fl t Ar target-client
.Ar command
.Xc
.D1 (alias: Ic confirm )
Ask fo' confirmation before executing
.Ar command .
If
.Fl p
is given,
.Ar prompt
is tha prompt ta display; otherwise a prompt is constructed from
.Ar command .
It may contain tha special characta sequences supported by the
.Ic status-left
option.
.Pp
This command works only from inside
.Nm .
.It Xo Ic display-message
.Op Fl p
.Op Fl c Ar target-client
.Op Fl t Ar target-pane
.Op Ar message
.Xc
.D1 (alias: Ic display )
Display a message.
If
.Fl p
is given, tha output is printed ta stdout, otherwise it is displayed up in the
.Ar target-client
status line.
Da format of
.Ar message
is busted lyrics bout up in the
.Sx FORMATS
section; shiznit is taken from
.Ar target-pane
if
.Fl t
is given, otherwise tha actizzle pane fo' tha session attached to
.Ar target-client .
.El
.Sh BUFFERS
.Nm
maintains a stack of
.Em paste buffers .
Up ta tha value of the
.Ic buffer-limit
option is kept; when a freshly smoked up buffer be added, tha buffer all up in tha bottom of the
stack is removed.
Buffers may be added using
.Ic copy-mode
or the
.Ic set-buffer
command, n' pasted tha fuck into a window rockin the
.Ic paste-buffer
command.
.Pp
A configurable history buffer be also maintained fo' each window.
By default, up ta 2000 lines is kept; dis can be altered wit the
.Ic history-limit
option (see the
.Ic set-option
command above).
.Pp
Da buffer commandz is as bigs up:
.Bl -tag -width Ds
.It Xo
.Ic chizzle-buffer
.Op Fl F Ar format
.Op Fl t Ar target-window
.Op Ar template
.Xc
Put a window tha fuck into buffer chizzle mode, where a funky-ass buffer may be chosen
interactively from a list.
Afta a funky-ass buffer is selected,
.Ql %%
is replaced by tha buffer index in
.Ar template
and tha result executed as a cold-ass lil command.
If
.Ar template
is not given, "paste-buffer -b '%%'" is used.
For tha meanin of the
.Fl F
flag, peep the
.Sx FORMATS
section.
This command works only if at least one client be attached.
.It Ic clear-history Op Fl t Ar target-pane
.D1 (alias: Ic clearhist )
Remove n' free tha history fo' tha specified pane.
.It Ic delete-buffer Op Fl b Ar buffer-index
.D1 (alias: Ic deleteb )
Delete tha buffer at
.Ar buffer-index ,
or tha top buffer if not specified.
.It Xo Ic list-buffers
.Op Fl F Ar format
.Xc
.D1 (alias: Ic lsb )
List tha global buffers.
For tha meanin of the
.Fl F
flag, peep the
.Sx FORMATS
section.
.It Xo Ic load-buffer
.Op Fl b Ar buffer-index
.Ar path
.Xc
.D1 (alias: Ic loadb )
Load tha contentz of tha specified paste buffer from
.Ar path .
.It Xo Ic paste-buffer
.Op Fl dpr
.Op Fl b Ar buffer-index
.Op Fl s Ar separator
.Op Fl t Ar target-pane
.Xc
.D1 (alias: Ic pasteb )
Insert tha contentz of a paste buffer tha fuck into tha specified pane.
If not specified, paste tha fuck into tha current one.
With
.Fl d ,
also delete tha paste buffer from tha stack.
When output, any linefeed (LF) charactas up in tha paste buffer is replaced with
a separator, by default carriage return (CR).
A custom separator may be specified rockin the
.Fl s
flag.
The
.Fl r
flag means ta do no replacement (equivalent ta a separator of LF).
If
.Fl p
is specified, paste bracket control codes is banged round the
buffer if tha application has axed bracketed paste mode.
.It Xo Ic save-buffer
.Op Fl a
.Op Fl b Ar buffer-index
.Ar path
.Xc
.D1 (alias: Ic saveb )
Save tha contentz of tha specified paste buffer to
.Ar path .
The
.Fl a
option appendz ta rather than overwritin tha file.
.It Xo Ic set-buffer
.Op Fl b Ar buffer-index
.Ar data
.Xc
.D1 (alias: Ic setb )
Set tha contentz of tha specified buffer to
.Ar data .
.It Xo Ic show-buffer
.Op Fl b Ar buffer-index
.Xc
.D1 (alias: Ic showb )
Display tha contentz of tha specified buffer.
.El
.Sh MISCELLANEOUS
Miscellaneous commandz is as bigs up:
.Bl -tag -width Ds
.It Ic clock-mode Op Fl t Ar target-pane
Display a big-ass clock.
.It Xo Ic if-shell
.Op Fl b
.Op Fl t Ar target-pane
.Ar shell-command command
.Op Ar command
.Xc
.D1 (alias: Ic if )
Execute tha first
.Ar command
if
.Ar shell-command
returns success or tha second
.Ar command
otherwise.
Before bein executed, shell-command is expanded rockin tha rulez specified up in the
.Sx FORMATS
section, includin dem relevant to
.Ar target-pane .
With
.Fl b ,
.Ar shell-command
is run up in tha background.
.It Ic lock-server
.D1 (alias: Ic lock )
Lock each client individually by hustlin tha command specified by the
.Ic lock-command
option.
.It Xo Ic run-shell
.Op Fl b
.Op Fl t Ar target-pane
.Ar shell-command
.Xc
.D1 (alias: Ic run )
Execute
.Ar shell-command
in tha background without bustin a window.
Before bein executed, shell-command is expanded rockin tha rulez specified in
the
.Sx FORMATS
section.
With
.Fl b ,
the command is run up in tha background.
Afta it finishes, any output ta stdout is displayed up in copy mode (in tha pane
specified by
.Fl t
or tha current pane if omitted).
If tha command don't return success, tha exit status be also displayed.
.It Xo Ic wait-for
.Op Fl L | S | U
.Ar channel
.Xc
.D1 (alias: Ic wait )
When used without options, prevents tha client from exitin until woken using
.Ic wait-for
.Fl S
with tha same channel.
When
.Fl L
is used, tha channel is locked n' any clients dat try ta lock tha same
channel is made ta wait until tha channel is unlocked with
.Ic wait-for
.Fl U .
This command only works from outside
.Nm .
.El
.Sh TERMINFO EXTENSIONS
.Nm
understandz some extensions to
.Xr terminfo 5 :
.Bl -tag -width Ds
.It Em Cs , Cr
Set tha cursor colour.
Da first takes a single strang argument n' is used ta set tha colour;
the second takes no arguments n' restores tha default cursor colour.
If set, a sequence like fuckin dis may be used
to chizzle tha cursor colour from inside
.Nm :
.Bd -literal -offset indent
$ printf '\e033]12;red\e033\e\e'
.Ed
.It Em \&Ss , Se
Change tha cursor style.
If set, a sequence like fuckin dis may be used
to chizzle tha cursor ta a underline:
.Bd -literal -offset indent
$ printf '\e033[4 q'
.Ed
.Pp
If
.Em Csr
is set, it is ghon be used ta reset tha cursor steez instead
of
.Em Cs .
.It Em \&Ms
This sequence can be used by
.Nm
to store tha current buffer up in tha host terminalz selection (clipboard).
See the
.Em set-clipboard
option above n' the
.Xr xterm 1
man page.
.El
.Sh CONTROL MODE
.Nm
offers a textual intercourse called
.Em control mode .
This allows applications ta rap with
.Nm
usin a simple text-only protocol.
.Pp
In control mode, a cold-ass lil client sends
.Nm
commandz or command sequences terminated by newlines on standard input.
Each command will produce one block of output on standard output.
An output block consistz of a
.Em %begin
line followed by tha output (which may be empty).
Da output block endz wit a
.Em %end
or
.Em %error .
.Em %begin
and matching
.Em %end
or
.Em %error
have two arguments: a integer time (as secondz from epoch) n' command number.
For example:
.Bd -literal -offset indent
%begin 1363006971 2
0: ksh* (1 panes) [80x24] [layout b25f,80x24,0,0,2] @2 (active)
%end 1363006971 2
.Ed
.Pp
In control mode,
.Nm
outputs notifications.
A notification aint NEVER gonna occur inside a output block.
.Pp
Da followin notifications is defined:
.Bl -tag -width Ds
.It Ic %exit Op Ar reason
The
.Nm
client is exitin immediately, either cuz it aint attached ta any session
or a error occurred.
If present,
.Ar reason
raps bout why tha client exited.
.It Ic %layout-change Ar window-id Ar window-layout
Da layout of a window wit ID
.Ar window-id
changed.
Da freshly smoked up layout is
.Ar window-layout .
.It Ic %output Ar pane-id Ar value
A window pane produced output.
.Ar value
escapes non-printable charactas n' backslash as octal \\xxx.
.It Ic %session-changed Ar session-id Ar name
Da client is now attached ta tha session wit ID
.Ar session-id ,
which is named
.Ar name .
.It Ic %session-renamed Ar name
Da current session was renamed to
.Ar name .
.It Ic %sessions-changed
A session was pimped or destroyed.
.It Ic %unlinked-window-add Ar window-id
Da window wit ID
.Ar window-id
was pimped but aint linked ta tha current session.
.It Ic %window-add Ar window-id
Da window wit ID
.Ar window-id
was linked ta tha current session.
.It Ic %window-close Ar window-id
Da window wit ID
.Ar window-id
closed.
.It Ic %window-renamed Ar window-id Ar name
Da window wit ID
.Ar window-id
was renamed to
.Ar name .
.El
.Sh FILES
.Bl -tag -width "/etc/tmux.confXXX" -compact
.It Pa ~/.tmux.conf
Default
.Nm
configuration file.
.It Pa /etc/tmux.conf
System-wide configuration file.
.El
.Sh EXAMPLES
To create a new
.Nm
session hustlin
.Xr vi 1 :
.Pp
.Dl $ tmux new-session vi
.Pp
Most commandz gotz a gangbangin' finger-lickin' dirty-ass shorta form, known as a alias.
For new-session, dis is
.Ic freshly smoked up :
.Pp
.Dl $ tmux freshly smoked up vi
.Pp
Alternatively, tha shortest unambiguous form of a cold-ass lil command be accepted.
If there be nuff muthafuckin options, they is listed:
.Bd -literal -offset indent
$ tmux n
ambiguous command: n, could be: new-session, new-window, next-window
.Ed
.Pp
Within a actizzle session, a freshly smoked up window may be pimped by typing
.Ql C-b c
(Ctrl
followed by the
.Ql b
key
followed by the
.Ql c
key).
.Pp
Windows may be navigated with:
.Ql C-b 0
(to select window 0),
.Ql C-b 1
(to select window 1), n' so on;
.Ql C-b n
to select tha next window; and
.Ql C-b p
to select tha previous window.
.Pp
A session may be detached using
.Ql C-b d
(or by a external event such as
.Xr ssh 1
disconnection) n' reattached with:
.Pp
.Dl $ tmux attach-session
.Pp
Typing
.Ql C-b \&?
lists tha current key bindings up in tha current window; up n' down may be used
to navigate tha list or
.Ql q
to exit from dat shit.
.Pp
Commandz ta be run when the
.Nm
server is started may be placed up in the
.Pa ~/.tmux.conf
configuration file.
Common examplez include:
.Pp
Changin tha default prefix key:
.Bd -literal -offset indent
set-option -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix
.Ed
.Pp
Turnin tha status line off, or changin its colour:
.Bd -literal -offset indent
set-option -g status off
set-option -g status-style bg=blue
.Ed
.Pp
Settin other options, like fuckin tha default command,
or lockin afta 30 minutez of inactivity:
.Bd -literal -offset indent
set-option -g default-command "exec /bin/ksh"
set-option -g lock-after-time 1800
.Ed
.Pp
Creatin freshly smoked up key bindings:
.Bd -literal -offset indent
bind-key b set-option status
bind-key / command-prompt "split-window 'exec playa %%'"
bind-key S command-prompt "new-window -n %1 'ssh %1'"
.Ed
.Sh SEE ALSO
.Xr pty 7
.Sh AUTHORS
.An Nicholas Marriott Aq Mt nicm@users.sourceforge.net
