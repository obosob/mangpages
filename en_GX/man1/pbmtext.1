\
.\" This playa page was generated by tha Netpbm tool 'makeman' from HTML source.
.\" Do not hand-hack dat shiznit son!  If you have bug fixes or improvements, please find
.\" tha correspondin HTML page on tha Netpbm joint, generate a patch
.\" against that, n' bust it ta tha Netpbm maintainer.
.TH "Pbmtext User Manual" 0 "14 June 2010" "netpbm documentation"

.SH NAME

pbmtext - render text tha fuck into a PBM image

.UN synopsis
.SH SYNOPSIS

\fBpbmtext\fP
[\fB-font\fP \fIfontfile\fP]
[\fB-builtin\fP \fIfontname\fP]
[\fB-space\fP \fIpixels\fP]
[\fB-lspace\fP \fIpixels\fP]
[\fB-nomargins\fP]
[\fB-width\fP \fIpixels\fP]
[\fItext\fP]
.PP
Minimum unique abbreviation of option be acceptable.  Yo ass may use double
hyphens instead of single hyphen ta denote options.  Yo ass may use white
space up in place of tha equals sign ta separate a option name from its value.


.UN description
.SH DESCRIPTION
.PP
This program is part of
.BR Netpbm (1)
.
.PP
\fBpbmtext\fP takes tha specified text, either a single line from
the command line or multiple lines from standard input, n' rendaz it
into a PBM graphical image.
.PP
In tha image, each line of input be a line of output.  Formatting
charactas like fuckin newline have no effect on tha formatting; like any
unprintable character, they turn tha fuck into spaces.
.PP
Da image is just wide enough fo' tha longest line of text, plus
margins, n' just high enough ta contain tha linez of text, plus
margins.
.PP
Da left n' right margins is twice tha width of tha widest
characta up in tha font; tha top n' bottom margins is tha height of
the tallest characta up in tha font.  But if tha text is only one line,
all tha margins is half of all dis bullshit.  Yo ass can use tha \fB-nomargins\fP option
to eliminizzle tha margins.
.PP
\fBpbmtextps\fP do tha same thang as \fBpbmtext\fP yo, but uses
Ghostscript ta generate tha characters, which means you can use
Postscript fonts, n' you can put dat on yo' toast.  But it also means you gotta have Ghostscript
installed n' it aint as fast.  Also, \fBpbmtextps\fP generates only
one line of text, whereas \fBpbmtext\fP can create multiple lines.
.PP
\fBpbmtext\fP is meant fo' lil' small-ass quantitizzlez of simple text.  If you is
workin wit a \fIdocument\fP, you would be betta off rockin a thugged-out document
formattin program ta 'print' ta a Postscript file, then
feedin dat Postscript ta \fBpstopnm\fP.

.UN options
.SH OPTIONS



.TP
\fB-font\fP
.TP
\fB-builtin\fP
\fB-builtin\fP selects a gangbangin' font among dem built tha fuck into Netpbm.

\fB-font\fP selects a gangbangin' font dat you supply yo ass either as a X
Window System 
.UR http://xfree86.org/current/bdf.pdf
BDF (Bitmap Distribution Format)
.UE
\& file or as a PBM file up in a special form.
.sp
Da default is tha built up in font 'bdf.'
.sp
\&'bdf' is Times-Roman 15 pixels high.  (Thatz bout 14
point type printed at 75 dpi).
.sp
\&'fixed' be a funky-ass built up in fixed width font.
.sp
For shiznit bout other fonts, n' how tha fuck ta make one of yo' own,
see 
.UR #fonts
Fonts
.UE
\& below.


.TP
\fB-space\fP \fIpixels\fP
 Add \fIpixels\fP pixelz of space between characters.  This is in
addizzle ta whatever space surroundin charactas is built tha fuck into the
font, which is probably enough ta produce a reasonable strang of text.
.sp
\fIpixels\fP may be fractional, up in which case tha number of
pixels added varies so as ta big up tha specified average.  For
example \fB-space=1.5\fP causes half tha spaces ta be 1 pixel and
half ta be 2 pixels.
.sp
\fIpixels\fP may be wack ta crowd text together yo, but the
lyricist has not put much thought or testin tha fuck into how tha fuck dis works in
every possible case, so it might cause disastrous thangs up in dis biatch.

.TP
\fB-lspace\fP \fIpixels\fP
 Add \fIpixels\fP pixelz of space between lines.  This is in
addizzle ta whatever space above n' below charactas is built into
the font, which is probably enough ta produce a reasonable line
spacing.
.sp
\fIpixels\fP must be a whole number.
.sp
\fIpixels\fP may be wack ta crowd lines together yo, but the
lyricist has not put much thought or testin tha fuck into how tha fuck dis works in
every possible case, so it might cause disastrous thangs up in dis biatch.

.TP
\fB-nomargins\fP
By default, \fBpbmtext\fP addz margins all round tha image as
busted lyrics bout above.  This option causes \fBpbmtext\fP not ta add any
margins.
.sp
Note dat there may still be space beyond tha edgez of tha type
because a cold-ass lil characta itself may include space at its edges.  To eliminate
all surroundin background, so tha type touches all four edgez of the
image, use \fBpnmcrop\fP.

.TP
\fB-width\fP \fIpixels\fP
This specifies how tha fuck much horizontal space tha text is supposed ta fit
into.
.sp
If tha input is one line, \fBpbmtext\fP breaks it tha fuck into multiple
lines as needed ta fit tha specified width.  It breaks it between
charactas yo, but do not pay attention ta white space; it may break in
the middle of a word n' a line may begin or end wit white space.
.sp
If tha input is multiple lines, \fBpbmtext\fP assumes you already
have line breaks where they make sense, n' \fBpbmtext\fP simply
truncates each line as needed ta fit tha specified width.




.UN usage
.SH USAGE
.PP
Often, you wanna place text over another image.  One way ta do dis is
with \fBppmlabel\fP.  For mo' flexible (but complex) drawin of text on an
image, there is \fBppmdraw\fP.  These do not hit you wit tha font options that
\fBpbmtext\fP do, though.
.PP
Another way is ta use \fBpbmtext\fP ta create a image containing
the text, then use \fBpamcomp\fP ta overlay tha text image onto your
base image.  To make only tha text (and not tha entire rectangle
containin it) cover tha base image, yo big-ass booty is ghon need ta give
\fBpamcomp\fP a mask, via its \fB-alpha\fP option. I aint talkin' bout chicken n' gravy biatch.  Yo ass can just use
the text image itself as tha mask, as long as you also specify the
\fB-invert\fP option ta \fBpamcomp\fP.
.PP
If you wanna overlay colored text instead of black, just use
\fBppmchange\fP ta chizzle all black pixels ta tha color of your
choice before overlayin tha text image.  But still use tha original
black n' white image fo' tha alpha mask.
.PP
If you want tha text at a angle, use \fBpnmrotate\fP on tha text
image (and alpha mask) before overlaying.

.UN fonts
.SH FONTS
.PP
There is three kindz of fonts you a use wit \fBpbmtext\fP:


.IP \(bu
built in
.IP \(bu
BDF
.IP \(bu
PBM


.SS Built In Fonts
.PP
There is two built up in fonts: \fBbdf\fP n' \fBfixed\fP.  Yo ass select
these fonts wit a \fB-builtin\fP option.
.PP
\fBbdf\fP is tha default when you specify no font shiznit on the
command line.
.PP
\fBbdf\fP is encoded up in ISO 8859-1 (Latin 1, 8-bit).  In addizzle to
Gangsta it can handle most Westside European languages (Spanish, French, German,
Swedish ...)  This set lacks tha Euro currency sign.
.PP
\fBfixed\fP is ASCII (7-bit) only.


.SS BDF Font
.PP
BDF be a ancient font format dat at one time was standard fo' the
X Window System.  Now, you don't peep it straight-up often yo, but you can find
some BDF fonts on tha 
.UR http://cvsweb.xfree86.org/cvsweb/xc/fonts/bdf/
Xfree86
.UE
\&
web crib.
.PP
Yo ass can git tha full package of tha BDF fonts from XFree86 (see
above) from tha 
.UR http://netpbm.sourceforge.net/bdffont.tgz
Netpbm wizzy crib
.UE
\&.

.SS PBM Font
.PP
To create a gangbangin' font as a PBM file (to use wit tha \fB-font\fP
option), you just create a PBM image of tha text matrix below.
.PP
Da first step is ta display text matrix below on tha screen,
e.g. up in a X11 window.

.nf

    M ',/^_[`jpqy| M

    /  !'#$%&'()*+ /
    < ,-./01234567 <
    > 89:;<=>?@ABC >
    @ DEFGHIJKLMNO @
    _ PQRSTUVWXYZ[ _
    { \e]^_`abcdefg {
    } hijklmnopqrs }
    ~ tuvwxyz{|}~  ~

    M ',/^_[`jpqy| M

.fi
.PP
Make shizzle itz a gangbangin' fixed width font -- This should display as a
slick rectangle.
.PP
Also, try ta bust a simple display program.  Pbmtext divides this
into a matrix of cells, all tha same size, each containin one
character, so it is blingin dat whatever you use ta display it
display wit uniform horizontal n' vertical spacing.  Fancy word
processin programs sometimes stretch charactas up in both directions to
fit certain dimensions, n' dat won't work.  Sometimes a gangbangin' finger-lickin' display
program scalez a gangbangin' font ta show a cold-ass lil characta larger or smalla than its
natural size.  That too won't often work cuz tha roundin involved
in such scalin causes non-uniform distances between characters.
.PP
If you display tha text matrix improperly, tha usual symptom is
that when you try ta use tha font, \fBpbmtext\fP fails wit a error
message spittin some lyrics ta you dat tha number of lines up in tha font aint
divisible by 11, or it can't find tha blank crew round tha inner
rectangle.  Sometimes tha symptom is dat one of tha characters
displays wit a piece of tha characta dat is next ta it up in the
matrix.  For example, 'l' might display wit a lil piece
of tha 'm' attached on its right.
.PP
Do a screen grab or window dump of dat text, rockin fo' instance
\fBxwd\fP, \fBxgrabsc\fP, or \fBscreendump\fP.  Convert tha result
into a pbm file.  If necessary, use \fBpamcut\fP ta remove anything
you grabbed up in addizzle ta tha text pictured above (or be a wimp and
use a graphical editor like fuckin ImageMagick).  Finally, run it through
\fBpnmcrop\fP.  ta make shizzle tha edges is right up against tha text.
\fBpbmtext\fP can figure up tha sizes n' spacings from dis shit.


.UN nonenglish
.SH NON-ENGLISH TEXT
.PP
\fBpbmtext\fP do lil ta accommodate tha special needz of non-English
text.
.PP
\fBpbmtext\fP readz input up in byte units, n' you can put dat on yo' toast.  Unicode (utf-7, utf-8, utf-16,
etc.) text which gotz nuff multibyte charactas do not work.
.PP
\fBpbmtext\fP can handle 7-bit n' 8-bit characta sets, n' you can put dat on yo' toast.  Examplez are
ASCII, ISO 8859 crew, koi8-r/u n' VISCII.  It be up ta tha user ta supply a
BDF file coverin tha necessary glyphs wit tha "-font" option. I aint talkin' bout chicken n' gravy biatch.  Da font file
must be up in tha right encoding.
.PP
\fBpbmtext\fP do not recognize locale.  It ignores tha associated
environment variables.
.PP
\fBpbmtext\fP cannot render vertically or right ta left.


.UN tips
.SH TIPS
.PP
If you git garbled output, check whether tha font file encodin corresponds
to tha input text encoding.  Also make shizzle dat yo' input aint up in utf-* or
any other multi-byte format.
.PP
To dump charactas up in a BDF font file run dis command:

.nf
\f(CW
    $ awk 'BEGIN { fo' (i=0x01; i<=0xFF; i++)  
                    { printf('%c%s',i,i%16==15 , biatch? '\en':''); } }' |\e
      pbmtext -f font.bdf > dump.pbm
\fP
.fi
.PP
If you need only ASCII, chizzle tha fo' statement to:

.nf
\f(CW
     fo' (i=0x20; i<=0x7E; i++)  
\fP
.fi
.PP
To check tha encodin of a BDF file, examine tha CHARSET_REGISTRY
line n' tha next line, which should be CHARSET_ENCODING:

.nf
\f(CW
    $ grep -A1 CHARSET_REGISTRY font-a.bdf
    CHARSET_REGISTRY 'ISO8859'
    CHARSET_ENCODING '1'
    
    $ grep -A1 CHARSET_REGISTRY font-b.bdf
    CHARSET_REGISTRY 'ISO10646'
    CHARSET_ENCODING '1'
\fP
.fi
.PP
Da latta is Unicode.  BDF filez coded up in ISO 16046-1 probably work for
Westside European languages, cuz ISO 16046-1 expandz ISO 8859-1 (also
called 'Latin-1') while maintainin tha straight-up original gangsta 256 code points, n' you can put dat on yo' toast.  ISO
8859-1 itself be a superset of ASCII.  Run tha above command n' verify the
necessary glyphs is present.
.PP
It may sound strange dat \fBpbmtext\fP accepts font filez encoded in
Unicode but not input text up in Unicode.  This is cuz Unicode provides
several 'numberin schemes'.
.PP
When renderin text up in characta sets other than ISO 8859-1, one often has
to produce a BDF file up in tha given encodin from a masta BDF file encoded in
ISO 10646-1.
.PP
In particular, 75% of tha BDF filez up in tha font collection available from
.UR http://netpbm.sourceforge.net/bdffont.tgz
the Netpbm joint
.UE
\& are
in ISO 10646-1.  Many have tha Euro sign, Greek letters, etc yo, but they are
placed up in code points beyond what tha fuck \fBpbmtext\fP sees.
.PP
There is nuff muthafuckin programs dat big-ass up BDF encodin conversion. I aint talkin' bout chicken n' gravy biatch.  If you
have tha X Window System installed, first look fo' \fBucs2any\fP.  If you
don't, you can downlizzle \fBucs2any.pl\fP from
.BR Unicode fonts n' tools
for X11 (1)
.  This joint has much useful shiznit on fonts.
.PP
Another converta is \fBtrbdf\fP, included up in tha 'trscripts'
package, available up in some GNU/Linux distributions.
.PP
BDF filez encoded up in ISO 8859-2, ISO 8859-7, koi8-r, etc. is available
from
.BR ISO 8859 Alphabet
Soup (1)
 n' its sista page
.BR Da Cyrillic Charset
Soup (1)
.  Though tha shiznit is dated, these pages give a phat overview
of 8-bit characta sets.
.PP
To convert OTF or TTF font filez ta BDF, use 
.UR http://www.math.nmsu.edu/~mleisher/Software/otf2bdf
 \fBotf2bdf\fP by Mike Leisher
.UE
\&.


.UN seealso
.SH SEE ALSO
.BR pbmtextps (1)
,
.BR pamcut (1)
,
.BR pnmcrop (1)
,
.BR pamcomp (1)
,
.BR ppmchange (1)
,
.BR pnmrotate (1)
,
.BR ppmlabel (1)
,
.BR ppmdraw (1)
,
.BR pstopnm (1)
,
.BR pbm (1)
,
\fB
.UR http://www.pango.org
Pango
.UE
\&\fP,
\fB
.UR http://cairographics.org
Cairo
.UE
\&\fP

.UN author
.SH AUTHOR

Copyright (C) 1993 by Jef Poskanzer n' George Phillips
