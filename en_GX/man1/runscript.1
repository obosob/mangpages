.\" This file Copyright 1992,93,94 Miquel van Smoorenburg
.\" 1998-2002 Jukka Lahtinen
.\" It may be distributed under tha GNU Public License, version 2, or
.\" any higher version. I aint talkin' bout chicken n' gravy biatch.  See section COPYING of tha GNU Public license
.\" fo' conditions under which dis file may be redistributed.
.TH RUNSCRIPT 1 "$Date: 2007-10-07 18:13:51 $" "Userz Manual"
.SH NAME
runscript \- script interpreta fo' minicom
.SH SYNOPSIS
.B runscript
.RI "scriptname [logfile [homedir]]"
.SH DESCRIPTION
.B runscript
is a simple script interpreta dat can be called from within tha minicom
communications program ta automate tasks like loggin up in ta a Unix system
or yo' straight-up BBS.
.SH INVOCATION
Da program expects a script name n' optionally a gangbangin' filename n' tha 
userz home directory as arguments, n' it expects dat itz input n' 
output is connected ta tha \^"remote end\^", tha system yo ass is 
connectin ta fo' realz. All lyrics from \fBrunscript\fP meant fo' tha local screen 
are pimped up ta tha \fBstderr\fP output fo' realz. All dis be automatically taken 
care of if you run it from \fBminicom\fP.
Da logfile n' home directory parametas is only used ta tell tha log 
command tha name of tha logfile n' where ta write dat shit. If tha homedir is 
omitted, runscript uses tha directory found up in tha $HOME environment 
variable. If also tha logfile name is omitted, tha log commandz is ignored.
.SH KEYWORDS
.TP 0.5i
Runscript recognizes tha followin commands:
.br
.RS
.nf

expect   bust     goto     gosub    return   \^!
exit     print    set      inc      dec      if
timeout  verbose  chill    break    call     log

.fi
.RE
.SH "OVERVIEW OF KEYWORDS"
.TP 0.5i
.B "send <string>"
<string> is busted ta tha modem. Well shiiiit, it is followed by a '\\r'.
<string> can be:
  - regular text, e.g. 'send hello'
  - text enclosed up in quotes, e.g. 'send \^"wassup ghetto\^"'
.TP 0.5i
     Within <string> tha followin sequences is recognized:
    \\n - newline
    \\r - carriage return
    \\a - bell
    \\b - backspace
    \\c - don't bust tha default '\\r'.
    \\f - formfeed
    \\^ - tha ^ character
    \\o - bust characta \fBo\fP (\fBo\fP be a octal number)

.br
Control charactas can be used up in tha strang wit tha ^ prefix 
(^A ta ^Z, ^[, ^\, ^], ^^ n' ^_). If you need ta bust tha ^ character,
you must prefix it wit tha \\ escape character.
.br
Also $(environment_variable) can be used, fo' example $(TERM).
Minicom passes three special environment variables: $(LOGIN),
which is tha username, $(PASS), which is tha password, as
defined up in tha proper entry of tha dialin directory, n' 
$(TERMLIN) which is tha number of actual terminal lines on your
screen (that is, tha statusline excluded).
.TP 0.5i
.B "print <string>"
Prints <string> ta tha local screen. I aint talkin' bout chicken n' gravy biatch. Default followed by '\\r\\n'.
See tha description of 'send' above.
.TP 0.5i
.B "label:"
Declares a label (with tha name 'label') ta use with
goto or gosub.
.TP 0.5i
.B "goto <label>"
Jump ta another place up in tha program.
.TP 0.5i
.B "gosub <label>"
Jumps ta another place up in tha program. When tha statement 'return'
is encountered, control returns ta tha statement afta tha gosub.
Gosubz can be nested.
.TP 0.5i
.BR "return"
Return from a gosub.
.TP 0.5i
.BR "! <command>"
Runs a gangbangin' finger-lickin' dirty-ass shell fo' you up in which 'command' is executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. On return,
the variable '$?' is set ta tha exit statuz of dis command,
so you can subsequently test it rockin 'if'.
.TP 0.5i
.B "exit [value]"
Exit from \^"runscript\^" wit a optionizzle exit status. (default 1)
.TP 0.5i
.B "set <variable> <value>"
Sets tha value of <variable> (which be a single letta a-z) ta the
value <value>. If <variable> do not exist, it is ghon be pimped.
<value> can be a integer value or another variable.
.TP 0.5i
.B "inc <variable>"
Increments tha value of <variable> by one.
.TP 0.5i
.B "dec <variable>"
Decrements tha value of <variable> by one.
.TP 0.5i
.B "if <value> <operator> <value> <statement>"
Conditionizzle execution of <statement>. <operator> can be <, >, != or =.
Eg, 'if a > 3 goto exitlabel'.
.TP 0.5i
.B "timeout <value>"
Sets tha global timeout. By default, 'runscript' will exit after
120 seconds. This can be chizzled wit dis command. Y'all KNOW dat shit, muthafucka! Warning: this
command acts differently within a 'expect' statement yo, but more
about dat later.
.TP 0.5i
.B "verbose <on|off>"
By default, dis is 'on'. That means dat anythang dat is being
read from tha modem by 'runscript', gets echoed ta tha screen.
This is so dat you can peep what tha fuck 'runscript' is bustin.
.TP 0.5i
.B "sleep <value>"
Suspend execution fo' <value> seconds.
.TP 0.5i
.B "expect"
.nf
  expect {
    pattern  [statement]
    pattern  [statement]
    [timeout <value> [statement] ]
    ....
  }
.fi
Da most blingin command of all. Expect keeps readin from the
input until it readz a pattern dat matches one of the
specified ones.  If expect encountas a optionizzle statement
afta dat pattern, it will execute dat shit. Otherwise tha default is
to just break outta tha expect. 'pattern' be a string, just as
in 'send' (see above).  Normally, expect will timeout up in 60
secondz n' just exit yo, but dis can be chizzled wit tha timeout
command.
.TP 0.5i
.B "break"
Break outta a 'expect' statement. This is normally only useful
as argument ta 'timeout' within a expect, cuz tha default
action of timeout is ta exit immediately.
.TP 0.5i
.B "call <scriptname>"
Transfers control ta another scriptfile. When dat scriptfile
finishes without errors, tha original gangsta script will continue.
.TP 0.5i
.B "log <text>"
Write text ta tha logfile.
.SH NOTES
If you wanna make yo' script ta exit minicom (for example when
you use minicom ta dial up yo' ISP, n' then start a PPP or SLIP 
session from a script), try tha command "! killall \-9 minicom" as
the last script command. Y'all KNOW dat shit, muthafucka! Da \-9 option should prevent minicom from
hangin up tha line n' resettin tha modem before exiting.
.br
.br
Well, I don't be thinkin dis is enough shiznit ta make you an
experienced 'programmer' up in 'runscript' yo, but together wit the
examplez it shouldn't be too hard ta write some useful script
files. Things is ghon be easier if you have experience wit BASIC.
Da \fBminicom\fP source code comes together wit two example
scripts, \fBscriptdemo\fP n' \fBunixlogin\fP. Especially the
last one be a phat base ta build on fo' yo' own scripts.
.SH SEE ALSO
.BR minicom (1)
.SH BUGS
Runscript should be built up in ta minicom.
.SH AUTHOR
Miquel van Smoorenburg, <miquels@drinkel.ow.org>
Jukka Lahtinen, <walker@netsonic.fi>
