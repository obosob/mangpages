'\" t
.TH "SYSTEMD" "1" "" "systemd 208" "systemd"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemd, init \- systemd system n' steez manager
.SH "SYNOPSIS"
.HP \w'\fBsystemd\ \fR\fB[OPTIONS...]\fR\ 'u
\fBsystemd \fR\fB[OPTIONS...]\fR
.HP \w'\fBinit\ \fR\fB[OPTIONS...]\fR\fB\ \fR\fB{COMMAND}\fR\ 'u
\fBinit \fR\fB[OPTIONS...]\fR\fB \fR\fB{COMMAND}\fR
.SH "DESCRIPTION"
.PP
systemd be a system n' steez manager fo' Linux operatin systems\&. When run as first process on boot (as PID 1), it acts as init system dat brangs up n' maintains userspace skillz\&.
.PP
For compatibilitizzle wit SysV, if systemd is called as
\fBinit\fR
and a PID dat aint 1, it will execute
\fBtelinit\fR
and pass all command line arguments unmodified\&. That means
\fBinit\fR
and
\fBtelinit\fR
are mostly equivalent when invoked from aiiight login sessions\&. Right back up in yo muthafuckin ass. See
\fBtelinit\fR(8)
for mo' shiznit\&.
.PP
When run as system instance, systemd interprets tha configuration file
system\&.conf, otherwise
user\&.conf\&. Right back up in yo muthafuckin ass. See
\fBsystemd-system.conf\fR(5)
for mo' shiznit\&.
.SH "OPTIONS"
.PP
Da followin options is understood:
.PP
\fB\-h\fR, \fB\-\-help\fR
.RS 4
Prints a gangbangin' finger-lickin' dirty-ass short help text n' exits\&.
.RE
.PP
\fB\-\-version\fR
.RS 4
Prints a systemd version identifier n' exits\&.
.RE
.PP
\fB\-\-test\fR
.RS 4
Determine startup sequence, dump it n' exit\&. This be a option useful fo' debuggin only\&.
.RE
.PP
\fB\-\-dump\-configuration\-items\fR
.RS 4
Dump understood unit configuration items\&. This outputs a terse but complete list of configuration shit understood up in unit definizzle files\&.
.RE
.PP
\fB\-\-introspect=\fR
.RS 4
Extract D\-Bus intercourse introspection data\&. This is mostly useful at install time ta generate data suitable fo' tha D\-Bus intercourses repository\&. Optionally tha intercourse name fo' tha introspection data may be specified\&. If omitted, tha introspection data fo' all intercourses is dumped\&.
.RE
.PP
\fB\-\-unit=\fR
.RS 4
Set default unit ta activate on startup\&. If not specified, defaults to
default\&.target\&.
.RE
.PP
\fB\-\-system\fR, \fB\-\-user\fR
.RS 4
For
\fB\-\-system\fR, tell systemd ta run a system instance, even if tha process ID aint 1, i\&.e\&. systemd aint run as init process\&.
\fB\-\-user\fR
does tha opposite, hustlin a user instizzle even if tha process ID is 1\&. Normally it should not be necessary ta pass these options, as systemd automatically detects tha mode it is started in\&. These options is hence of lil use except fo' debugging\&. Note dat it aint supported bootin n' maintainin a gangbangin' full system wit systemd hustlin in
\fB\-\-system\fR
mode yo, but PID not 1\&. In practice, passing
\fB\-\-system\fR
explicitly is only useful up in conjunction with
\fB\-\-test\fR\&.
.RE
.PP
\fB\-\-dump\-core\fR
.RS 4
Dump core on crash\&. This switch has no effect when run as user instance\&.
.RE
.PP
\fB\-\-crash\-shell\fR
.RS 4
Run shell on crash\&. This switch has no effect when run as user instance\&.
.RE
.PP
\fB\-\-confirm\-spawn\fR
.RS 4
Ask fo' confirmation when spawnin processes\&. This switch has no effect when run as user instance\&.
.RE
.PP
\fB\-\-show\-status=\fR
.RS 4
Show terse steez status shiznit while booting\&. This switch has no effect when run as user instance\&. Takes a funky-ass boolean argument which may be omitted which is interpreted as
\fBtrue\fR\&.
.RE
.PP
\fB\-\-log\-target=\fR
.RS 4
Set log target\& fo' realz. Argument must be one of
\fBconsole\fR,
\fBjournal\fR,
\fBsyslog\fR,
\fBkmsg\fR,
\fBjournal\-or\-kmsg\fR,
\fBsyslog\-or\-kmsg\fR,
\fBnull\fR\&.
.RE
.PP
\fB\-\-log\-level=\fR
.RS 4
Set log level\& fo' realz. As argument dis accepts a numerical log level or tha well\-known
\fBsyslog\fR(3)
symbolic names (lowercase):
\fBemerg\fR,
\fBalert\fR,
\fBcrit\fR,
\fBerr\fR,
\fBwarning\fR,
\fBnotice\fR,
\fBinfo\fR,
\fBdebug\fR\&.
.RE
.PP
\fB\-\-log\-color=\fR
.RS 4
Highlight blingin log lyrics\& fo' realz. Argument be a funky-ass boolean value\&. If tha argument is omitted, it defaults to
\fBtrue\fR\&.
.RE
.PP
\fB\-\-log\-location=\fR
.RS 4
Include code location up in log lyrics\&. This is mostly relevant fo' debuggin purposes\& fo' realz. Argument be a funky-ass boolean value\&. If tha argument is omitted it defaults to
\fBtrue\fR\&.
.RE
.PP
\fB\-\-default\-standard\-output=\fR, \fB\-\-default\-standard\-error=\fR
.RS 4
Sets tha default output or error output fo' all skillz n' sockets, respectively\&. That is, controls tha default for
\fBStandardOutput=\fR
and
\fBStandardError=\fR
(see
\fBsystemd.exec\fR(5)
for details)\&. Takes one of
\fBinherit\fR,
\fBnull\fR,
\fBtty\fR,
\fBjournal\fR,
\fBjournal+console\fR,
\fBsyslog\fR,
\fBsyslog+console\fR,
\fBkmsg\fR,
\fBkmsg+console\fR\&. If tha argument is omitted
\fB\-\-default\-standard\-output=\fR
defaults to
\fBjournal\fR
and
\fB\-\-default\-standard\-error=\fR
to
\fBinherit\fR\&.
.RE
.SH "CONCEPTS"
.PP
systemd serves up a thugged-out dependency system between various entitizzles called "units" of 12 different types\&. Units encapsulate various objects dat is relevant fo' system boot\-up n' maintenance\&. Da majoritizzle of units is configured up in unit configuration files, whose syntax n' basic set of options is busted lyrics bout in
\fBsystemd.unit\fR(5), however some is pimped automatically from other configuration, dynamically from system state or programmatically at runtime\&. Units may be "active" (meanin started, bound, plugged in, \&.\&.\&., dependin on tha unit type, peep below), or "inactive" (meanin stopped, unbound, unplugged, \&.\&.\&.), as well as up in tha process of bein activated or deactivated, i\&.e\&. between tha two states (these states is called "activating", "deactivating")\& fo' realz. A special "failed" state be available as well, which is straight-up similar ta "inactive" n' is entered when tha steez failed up in some way (process returned error code on exit, or crashed, or a operation timed out)\&. If dis state is entered, tha cause is ghon be logged, fo' lata reference\&. Note dat tha various unit types may gotz a fuckin shitload of additionizzle substates, which is mapped ta tha five generalized unit states busted lyrics bout here\&.
.PP
Da followin unit types is available:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Service units, which start n' control daemons n' tha processes they consist of\&. For details see
\fBsystemd.service\fR(5)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Socket units, which encapsulate local IPC or network sockets up in tha system, useful fo' socket\-based activation\&. For details bout socket units see
\fBsystemd.socket\fR(5), fo' details on socket\-based activation n' other formz of activation, see
\fBdaemon\fR(7)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Target units is useful ta crew units, or provide well\-known synchronization points durin boot\-up, see
\fBsystemd.target\fR(5)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
Device units expose kernel devices up in systemd n' may be used ta implement device\-based activation\&. For details see
\fBsystemd.device\fR(5)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
Mount units control mount points up in tha file system, fo' details see
\fBsystemd.mount\fR(5)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
Automount units provide automount capabilities, fo' on\-demand mountin of file systems as well as parallelized boot\-up\&. Right back up in yo muthafuckin ass. See
\fBsystemd.automount\fR(5)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}
Snapshot units can be used ta temporarily save tha state of tha set of systemd units, which lata may be restored by activatin tha saved snapshot unit\&. For mo' shiznit see
\fBsystemd.snapshot\fR(5)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}
Timer units is useful fo' triggerin activation of other units based on timers\&. Yo ass may find details in
\fBsystemd.timer\fR(5)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}
Swap units is straight-up similar ta mount units n' encapsulate memory swap partitions or filez of tha operatin system\&. They is busted lyrics bout in
\fBsystemd.swap\fR(5)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}
Path units may be used ta activate other skillz when file system objects chizzle or is modified\&. Right back up in yo muthafuckin ass. See
\fBsystemd.path\fR(5)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}
Slice units may be used ta crew units which manage system processes (like fuckin steez n' scope units) up in a hierarchical tree fo' resource pimpment purposes\&. Right back up in yo muthafuckin ass. See
\fBsystemd.slice\fR(5)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "12." 4.2
.\}
Scope units is similar ta steez units yo, but manage foreign processes instead of startin dem as well\&. Right back up in yo muthafuckin ass. See
\fBsystemd.scope\fR(5)\&.
.RE
.PP
Units is named as they configuration files\&. Right back up in yo muthafuckin ass. Some units have special semantics\& fo' realz. A detailed list be available in
\fBsystemd.special\fR(7)\&.
.PP
systemd knows various kindz of dependencies, includin positizzle n' wack requirement dependencies (i\&.e\&.
\fIRequires=\fR
and
\fIConflicts=\fR) as well as orderin dependencies (\fIAfter=\fR
and
\fIBefore=\fR)\&. NB: orderin n' requirement dependencies is orthogonal\&. If only a requirement dependency exists between two units (e\&.g\&.
foo\&.service
requires
bar\&.service) yo, but no orderin dependency (e\&.g\&.
foo\&.service
after
bar\&.service) n' both is axed ta start, they is ghon be started up in parallel\&. Well shiiiit, it aint nuthin but a cold-ass lil common pattern dat both requirement n' orderin dependencies is placed between two units\& fo' realz. Also note dat tha majoritizzle of dependencies is implicitly pimped n' maintained by systemd\&. In most cases, it should be unnecessary ta declare additionizzle dependencies manually, however it is possible ta do this\&.
.PP
Application programs n' units (via dependencies) may request state chizzlez of units\&. In systemd, these requests is encapsulated as \*(Aqjobs\*(Aq n' maintained up in a thang queue\&. Jobs may succeed or can fail, they execution is ordered based on tha orderin dependenciez of tha units they done been scheduled for\&.
.PP
On boot systemd activates tha target unit
default\&.target
whose thang is ta activate on\-boot skillz n' other on\-boot units by pullin dem up in via dependencies\&. Usually tha unit name is just a alias (symlink) fo' either
graphical\&.target
(for fully\-featured boots tha fuck into tha UI) or
multi\-user\&.target
(for limited console\-only boots fo' use up in embedded or server environments, or similar; a subset of graphical\&.target)\&. But fuck dat shiznit yo, tha word on tha street is dat it be all up in tha discretion of tha administrator ta configure it as a alias ta any other target unit\&. Right back up in yo muthafuckin ass. See
\fBsystemd.special\fR(7)
for details bout these target units\&.
.PP
Processes systemd spawns is placed up in individual Linux control crews named afta tha unit which they belong ta up in tha private systemd hierarchy\&. (see
\m[blue]\fBcgroups\&.txt\fR\m[]\&\s-2\u[1]\d\s+2
for mo' shiznit bout control groups, or short "cgroups")\&. systemd uses dis ta effectively keep track of processes\&. Control crew shiznit is maintained up in tha kernel, n' be accessible via tha file system hierarchy (beneath
/sys/fs/cgroup/systemd/), or up in tools such as
\fBps\fR(1)
(\fBps xawf \-eo pid,user,cgroup,args\fR
is particularly useful ta list all processes n' tha systemd units they belong to\&.)\&.
.PP
systemd is compatible wit tha SysV init system ta a big-ass degree: SysV init scripts is supported n' simply read as a alternatizzle (though limited) configuration file format\&. Da SysV
/dev/initctl
interface is provided, n' compatibilitizzle implementationz of tha various SysV client tools is available\&. In addizzle ta that, various established Unix functionalitizzle such as
/etc/fstab
or the
utmp
database is supported\&.
.PP
systemd has a minimal transaction system: if a unit be axed ta start up or shut down it will add it n' all its dependencies ta a temporary transaction\&. Then, it will verify if tha transaction is consistent (i\&.e\&. whether tha orderin of all units is cycle\-free)\&. If it is not, systemd will try ta fix it up, n' removes non\-essential thangs from tha transaction dat might remove tha loop\& fo' realz. Also, systemd tries ta suppress non\-essential thangs up in tha transaction dat would stop a hustlin service\&. Finally it is checked whether tha thangz of tha transaction contradict thangs dat have already been queued, n' optionally tha transaction be aborted then\&. If all hit dat shiznit up n' tha transaction is consistent n' minimized up in its impact it is merged wit all already outstandin thangs n' added ta tha run queue\&. Effectively dis means dat before executin a axed operation, systemd will verify dat it make sense, fixin it if possible, n' only failin if it straight-up cannot work\&.
.PP
Systemd gotz nuff natizzle implementationz of various tasks dat need ta be executed as part of tha boot process\&. For example, it sets tha hostname or configures tha loopback network device\&. Well shiiiit, it also sets up n' mounts various API file systems, such as
/sys
or
/proc\&.
.PP
For mo' shiznit bout tha concepts n' scams behind systemd, please refer ta the
\m[blue]\fBOriginal Gangsta Design Document\fR\m[]\&\s-2\u[2]\d\s+2\&.
.PP
Note dat some but not all intercourses provided by systemd is covered by the
\m[blue]\fBInterface Stabilitizzle Promise\fR\m[]\&\s-2\u[3]\d\s+2\&.
.PP
Units may be generated dynamically at boot n' system manager reload time, fo' example based on other configuration filez or parametas passed on tha kernel command line\&. For details peep the
\m[blue]\fBGenerators Justification\fR\m[]\&\s-2\u[4]\d\s+2\&.
.PP
Systems which invoke systemd up in a cold-ass lil container or initrd environment should implement the
\m[blue]\fBContainer Interface\fR\m[]\&\s-2\u[5]\d\s+2
or
\m[blue]\fBinitrd Interface\fR\m[]\&\s-2\u[6]\d\s+2
specifications, respectively\&.
.SH "DIRECTORIES"
.PP
System unit directories
.RS 4
Da systemd system manager readz unit configuration from various directories\&. Packages dat wanna install unit filez shall place dem up in tha directory returned by
\fBpkg\-config systemd \-\-variable=systemdsystemunitdir\fR\&. Other directories checked are
/usr/local/lib/systemd/system
and
/usr/lib/systemd/system\&. User configuration always takes precedence\&.
\fBpkg\-config systemd \-\-variable=systemdsystemconfdir\fR
returns tha path of tha system configuration directory\&. Packages should alta tha content of these directories only wit the
\fBenable\fR
and
\fBdisable\fR
commandz of the
\fBsystemctl\fR(1)
tool\&. Full list of directories is provided in
\fBsystemd.unit\fR(5)\&.
.RE
.PP
User unit directories
.RS 4
Similar rulez apply fo' tha user unit directories\&. But fuck dat shiznit yo, tha word on tha street is dat here the
\m[blue]\fBXDG Base Directory justification\fR\m[]\&\s-2\u[7]\d\s+2
is followed ta find units\& fo' realz. Applications should place they unit filez up in tha directory returned by
\fBpkg\-config systemd \-\-variable=systemduserunitdir\fR\&. Global configuration is done up in tha directory reported by
\fBpkg\-config systemd \-\-variable=systemduserconfdir\fR\&. The
\fBenable\fR
and
\fBdisable\fR
commandz of the
\fBsystemctl\fR(1)
tool can handle both global (i\&.e\&. fo' all users) n' private (for one user) enabling/disablin of units\&. Full list of directories is provided in
\fBsystemd.unit\fR(5)\&.
.RE
.PP
SysV init scripts directory
.RS 4
Da location of tha SysV init script directory varies between distributions\&. If systemd cannot find a natizzle unit file fo' a axed service, it will look fo' a SysV init script of tha same name (with the
\&.service
suffix removed)\&.
.RE
.PP
SysV runlevel link farm directory
.RS 4
Da location of tha SysV runlevel link farm directory varies between distributions\&. systemd will take tha link farm tha fuck into account when figurin up whether a steez shall be enabled\&. Note dat a steez unit wit a natizzle unit configuration file cannot be started by activatin it up in tha SysV runlevel link farm\&.
.RE
.SH "SIGNALS"
.PP
\fBSIGTERM\fR
.RS 4
Upon receivin dis signal tha systemd system manager serializes its state, reexecutes itself n' deserializes tha saved state again\&. This is mostly equivalent to
\fBsystemctl daemon\-reexec\fR\&.
.sp
systemd user managers will start the
exit\&.target
unit when dis signal is received\&. This is mostly equivalent to
\fBsystemctl \-\-user start exit\&.target\fR\&.
.RE
.PP
\fBSIGINT\fR
.RS 4
Upon receivin dis signal tha systemd system manager will start the
ctrl\-alt\-del\&.target
unit\&. This is mostly equivalent to
\fBsystemctl start ctl\-alt\-del\&.target\fR\&.
.sp
systemd user managers treat dis signal tha same way as
\fBSIGTERM\fR\&.
.RE
.PP
\fBSIGWINCH\fR
.RS 4
When dis signal is received tha systemd system manager will start the
kbrequest\&.target
unit\&. This is mostly equivalent to
\fBsystemctl start kbrequest\&.target\fR\&.
.sp
This signal is ignored by systemd user managers\&.
.RE
.PP
\fBSIGPWR\fR
.RS 4
When dis signal is received tha systemd manager will start the
sigpwr\&.target
unit\&. This is mostly equivalent to
\fBsystemctl start sigpwr\&.target\fR\&.
.RE
.PP
\fBSIGUSR1\fR
.RS 4
When dis signal is received tha systemd manager will try ta reconnect ta tha D\-Bus bus\&.
.RE
.PP
\fBSIGUSR2\fR
.RS 4
When dis signal is received tha systemd manager will log its complete state up in human readable form\&. Da data logged is tha same ol' dirty as printed by
\fBsystemctl dump\fR\&.
.RE
.PP
\fBSIGHUP\fR
.RS 4
Reloadz tha complete daemon configuration\&. This is mostly equivalent to
\fBsystemctl daemon\-reload\fR\&.
.RE
.PP
\fBSIGRTMIN+0\fR
.RS 4
Entas default mode, starts the
default\&.target
unit\&. This is mostly equivalent to
\fBsystemctl start default\&.target\fR\&.
.RE
.PP
\fBSIGRTMIN+1\fR
.RS 4
Entas rescue mode, starts the
rescue\&.target
unit\&. This is mostly equivalent to
\fBsystemctl isolate rescue\&.target\fR\&.
.RE
.PP
\fBSIGRTMIN+2\fR
.RS 4
Entas emergency mode, starts the
emergency\&.service
unit\&. This is mostly equivalent to
\fBsystemctl isolate emergency\&.service\fR\&.
.RE
.PP
\fBSIGRTMIN+3\fR
.RS 4
Halts tha machine, starts the
halt\&.target
unit\&. This is mostly equivalent to
\fBsystemctl start halt\&.target\fR\&.
.RE
.PP
\fBSIGRTMIN+4\fR
.RS 4
Powers off tha machine, starts the
poweroff\&.target
unit\&. This is mostly equivalent to
\fBsystemctl start poweroff\&.target\fR\&.
.RE
.PP
\fBSIGRTMIN+5\fR
.RS 4
Reboots tha machine, starts the
reboot\&.target
unit\&. This is mostly equivalent to
\fBsystemctl start reboot\&.target\fR\&.
.RE
.PP
\fBSIGRTMIN+6\fR
.RS 4
Reboots tha machine via kexec, starts the
kexec\&.target
unit\&. This is mostly equivalent to
\fBsystemctl start kexec\&.target\fR\&.
.RE
.PP
\fBSIGRTMIN+13\fR
.RS 4
Immediately halts tha machine\&.
.RE
.PP
\fBSIGRTMIN+14\fR
.RS 4
Immediately powers off tha machine\&.
.RE
.PP
\fBSIGRTMIN+15\fR
.RS 4
Immediately reboots tha machine\&.
.RE
.PP
\fBSIGRTMIN+16\fR
.RS 4
Immediately reboots tha machine wit kexec\&.
.RE
.PP
\fBSIGRTMIN+20\fR
.RS 4
Enablez display of status lyrics on tha console, as controlled via
\fIsystemd\&.show_status=1\fR
on tha kernel command line\&.
.RE
.PP
\fBSIGRTMIN+21\fR
.RS 4
Disablez display of status lyrics on tha console, as controlled via
\fIsystemd\&.show_status=0\fR
on tha kernel command line\&.
.RE
.PP
\fBSIGRTMIN+22\fR, \fBSIGRTMIN+23\fR
.RS 4
Sets tha log level to
"debug"
(or
"info"
on
\fBSIGRTMIN+23\fR), as controlled via
\fIsystemd\&.log_level=debug\fR
(or
\fIsystemd\&.log_level=info\fR
on
\fBSIGRTMIN+23\fR) on tha kernel command line\&.
.RE
.PP
\fBSIGRTMIN+24\fR
.RS 4
Immediately exits tha manager (only available fo' \-\-user instances)\&.
.RE
.PP
\fBSIGRTMIN+26\fR, \fBSIGRTMIN+27\fR, \fBSIGRTMIN+28\fR, \fBSIGRTMIN+29\fR
.RS 4
Sets tha log level to
"journal\-or\-kmsg"
(or
"console"
on
\fBSIGRTMIN+27\fR,
"kmsg"
on
\fBSIGRTMIN+28\fR, or
"syslog\-or\-kmsg"
on
\fBSIGRTMIN+29\fR), as controlled via
\fIsystemd\&.log_target=journal\-or\-kmsg\fR
(or
\fIsystemd\&.log_target=console\fR
on
\fBSIGRTMIN+27\fR,
\fIsystemd\&.log_target=kmsg\fR
on
\fBSIGRTMIN+28\fR, or
\fIsystemd\&.log_target=syslog\-or\-kmsg\fR
on
\fBSIGRTMIN+29\fR) on tha kernel command line\&.
.RE
.SH "ENVIRONMENT"
.PP
\fI$SYSTEMD_LOG_LEVEL\fR
.RS 4
systemd readz tha log level from dis environment variable\&. This can be overridden with
\fB\-\-log\-level=\fR\&.
.RE
.PP
\fI$SYSTEMD_LOG_TARGET\fR
.RS 4
systemd readz tha log target from dis environment variable\&. This can be overridden with
\fB\-\-log\-target=\fR\&.
.RE
.PP
\fI$SYSTEMD_LOG_COLOR\fR
.RS 4
Controls whether systemd highlights blingin log lyrics\&. This can be overridden with
\fB\-\-log\-color=\fR\&.
.RE
.PP
\fI$SYSTEMD_LOG_LOCATION\fR
.RS 4
Controls whether systemd prints tha code location along wit log lyrics\&. This can be overridden with
\fB\-\-log\-location=\fR\&.
.RE
.PP
\fI$XDG_CONFIG_HOME\fR, \fI$XDG_CONFIG_DIRS\fR, \fI$XDG_DATA_HOME\fR, \fI$XDG_DATA_DIRS\fR
.RS 4
Da systemd user manager uses these variablez up in accordizzle ta the
\m[blue]\fBXDG Base Directory justification\fR\m[]\&\s-2\u[7]\d\s+2
to find its configuration\&.
.RE
.PP
\fI$SYSTEMD_UNIT_PATH\fR
.RS 4
Controls where systemd looks fo' unit files\&.
.RE
.PP
\fI$SYSTEMD_SYSVINIT_PATH\fR
.RS 4
Controls where systemd looks fo' SysV init scripts\&.
.RE
.PP
\fI$SYSTEMD_SYSVRCND_PATH\fR
.RS 4
Controls where systemd looks fo' SysV init script runlevel link farms\&.
.RE
.PP
\fI$LISTEN_PID\fR, \fI$LISTEN_FDS\fR
.RS 4
Set by systemd fo' supervised processes durin socket\-based activation\&. Right back up in yo muthafuckin ass. See
\fBsd_listen_fds\fR(3)
for mo' shiznit\&.
.RE
.PP
\fI$NOTIFY_SOCKET\fR
.RS 4
Set by systemd fo' supervised processes fo' status n' start\-up completion notification\&. Right back up in yo muthafuckin ass. See
\fBsd_notify\fR(3)
for mo' shiznit\&.
.RE
.SH "KERNEL COMMAND LINE"
.PP
When run as system instizzle systemd parses a fuckin shitload of kernel command line arguments\&\s-2\u[8]\d\s+2:
.PP
\fIsystemd\&.unit=\fR, \fIrd\&.systemd\&.unit=\fR
.RS 4
Overrides tha unit ta activate on boot\&. Defaults to
default\&.target\&. This may be used ta temporarily boot tha fuck into a gangbangin' finger-lickin' different boot unit, fo' example
rescue\&.target
or
emergency\&.service\&. Right back up in yo muthafuckin ass. See
\fBsystemd.special\fR(7)
for details bout these units\&. Da option prefixed with
"rd\&."
is honored only up in tha initial RAM disk (initrd), while tha one dat aint prefixed only up in tha main system\&.
.RE
.PP
\fIsystemd\&.dump_core=\fR
.RS 4
Takes a funky-ass boolean argument\&. If
\fBtrue\fR, systemd dumps core when it crashes\&. Otherwise, no core dump is pimped\&. Defaults to
\fBtrue\fR\&.
.RE
.PP
\fIsystemd\&.crash_shell=\fR
.RS 4
Takes a funky-ass boolean argument\&. If
\fBtrue\fR, systemd spawns a gangbangin' finger-lickin' dirty-ass shell when it crashes\&. Otherwise, no shell is spawned\&. Defaults to
\fBfalse\fR, fo' securitizzle reasons, as tha shell aint protected by any password authentication\&.
.RE
.PP
\fIsystemd\&.crash_chvt=\fR
.RS 4
Takes a integer argument\&. If positizzle systemd activates tha specified virtual terminal when it crashes\&. Defaults to
\fB\-1\fR\&.
.RE
.PP
\fIsystemd\&.confirm_spawn=\fR
.RS 4
Takes a funky-ass boolean argument\&. If
\fBtrue\fR, asks fo' confirmation when spawnin processes\&. Defaults to
\fBfalse\fR\&.
.RE
.PP
\fIsystemd\&.show_status=\fR
.RS 4
Takes a funky-ass boolean argument\&. If
\fBtrue\fR, shows terse steez status thugged-out shiznit on tha console durin bootup\&. Defaults to
\fBtrue\fR, unless
\fBquiet\fR
is passed as kernel command line option up in which case it defaults to
\fBfalse\fR\&.
.RE
.PP
\fIsystemd\&.log_target=\fR, \fIsystemd\&.log_level=\fR, \fIsystemd\&.log_color=\fR, \fIsystemd\&.log_location=\fR
.RS 4
Controls log output, wit tha same effect as the
\fI$SYSTEMD_LOG_TARGET\fR,
\fI$SYSTEMD_LOG_LEVEL\fR,
\fI$SYSTEMD_LOG_COLOR\fR,
\fI$SYSTEMD_LOG_LOCATION\fR
environment variablez busted lyrics bout above\&.
.RE
.PP
\fIsystemd\&.default_standard_output=\fR, \fIsystemd\&.default_standard_error=\fR
.RS 4
Controls default standard output n' error output fo' skillz, wit tha same effect as the
\fB\-\-default\-standard\-output=\fR
and
\fB\-\-default\-standard\-error=\fR
command line arguments busted lyrics bout above, respectively\&.
.RE
.PP
\fIsystemd\&.setenv=\fR
.RS 4
Takes a strang argument up in tha form VARIABLE=VALUE\&. May be used ta set default environment variablez ta add ta forked lil pimp processes\&. May be used mo' than once ta set multiple variables\&.
.RE
.PP
\fIquiet\fR
.RS 4
Turn off status output at boot, much like
\fIsystemd\&.show_status=false\fR
would\&. Note dat dis option be also read by tha kernel itself n' disablez kernel log output\&. Passin dis option hence turns off tha usual output from both tha system manager n' tha kernel\&.
.RE
.PP
\fIdebug\fR
.RS 4
Turn on debuggin output\&. This is equivalent to
\fIsystemd\&.log_level=debug\fR\&. Note dat dis option be also read by tha kernel itself n' enablez kernel debug output\&. Passin dis option hence turns on tha debug output from both tha system manager n' tha kernel\&.
.RE
.PP
\fIemergency\fR, \fI\-b\fR
.RS 4
Boot tha fuck into emergency mode\&. This is equivalent to
\fIsystemd\&.unit=emergency\&.target\fR
and provided fo' compatibilitizzle reasons n' ta be easier ta type\&.
.RE
.PP
\fIrescue\fR, \fIsingle\fR, \fIs\fR, \fIS\fR, \fI1\fR
.RS 4
Boot tha fuck into rescue mode\&. This is equivalent to
\fIsystemd\&.unit=rescue\&.target\fR
and provided fo' compatibilitizzle reasons n' ta be easier ta type\&.
.RE
.PP
\fI2\fR, \fI3\fR, \fI4\fR, \fI5\fR
.RS 4
Boot tha fuck into tha specified legacy SysV runlevel\&. These is equivalent to
\fIsystemd\&.unit=runlevel2\&.target\fR,
\fIsystemd\&.unit=runlevel3\&.target\fR,
\fIsystemd\&.unit=runlevel4\&.target\fR, and
\fIsystemd\&.unit=runlevel5\&.target\fR, respectively, n' provided fo' compatibilitizzle reasons n' ta be easier ta type\&.
.RE
.PP
\fIlocale\&.LANG=\fR, \fIlocale\&.LANGUAGE=\fR, \fIlocale\&.LC_CTYPE=\fR, \fIlocale\&.LC_NUMERIC=\fR, \fIlocale\&.LC_TIME=\fR, \fIlocale\&.LC_COLLATE=\fR, \fIlocale\&.LC_MONETARY=\fR, \fIlocale\&.LC_MESSAGES=\fR, \fIlocale\&.LC_PAPER=\fR, \fIlocale\&.LC_NAME=\fR, \fIlocale\&.LC_ADDRESS=\fR, \fIlocale\&.LC_TELEPHONE=\fR, \fIlocale\&.LC_MEASUREMENT=\fR, \fIlocale\&.LC_IDENTIFICATION=\fR
.RS 4
Set tha system locale ta use\&. This overrides tha settings in
/etc/locale\&.conf\&. For mo' shiznit see
\fBlocale.conf\fR(5)
and
\fBlocale\fR(7)\&.
.RE
.PP
For other kernel command line parametas understood by componentz of tha core OS, please refer to
\fBkernel-command-line\fR(7)\&.
.SH "SOCKETS AND FIFOS"
.PP
/run/systemd/notify
.RS 4
Daemon status notification socket\&. This be an
\fBAF_UNIX\fR
datagram socket n' is used ta implement tha daemon notification logic as implemented by
\fBsd_notify\fR(3)\&.
.RE
.PP
/run/systemd/shutdownd
.RS 4
Used internally by the
\fBshutdown\fR(8)
tool ta implement delayed shutdowns\&. This be an
\fBAF_UNIX\fR
datagram socket\&.
.RE
.PP
/run/systemd/private
.RS 4
Used internally as communication channel between
\fBsystemctl\fR(1)
and tha systemd process\&. This be an
\fBAF_UNIX\fR
stream socket\&. This intercourse is private ta systemd n' should not be used up in external projects\&.
.RE
.PP
/dev/initctl
.RS 4
Limited compatibilitizzle support fo' tha SysV client intercourse, as implemented by the
systemd\-initctl\&.service
unit\&. This be a named pipe up in tha file system\&. This intercourse is obsolete n' should not be used up in freshly smoked up applications\&.
.RE
.SH "SEE ALSO"
.PP
The
\m[blue]\fBsystemd Homepage\fR\m[]\&\s-2\u[9]\d\s+2,
\fBsystemd-system.conf\fR(5),
\fBlocale.conf\fR(5),
\fBsystemctl\fR(1),
\fBjournalctl\fR(1),
\fBsystemd-notify\fR(1),
\fBdaemon\fR(7),
\fBsd-daemon\fR(3),
\fBsystemd.unit\fR(5),
\fBsystemd.special\fR(5),
\fBpkg-config\fR(1),
\fBkernel-command-line\fR(7),
\fBbootup\fR(7),
\fBsystemd.directives\fR(7)
.SH "NOTES"
.IP " 1." 4
cgroups.txt
.RS 4
\%https://www.kernel.org/doc/Documentation/cgroups/cgroups.txt
.RE
.IP " 2." 4
Original Gangsta Design Document
.RS 4
\%http://0pointer.de/blog/projects/systemd.html
.RE
.IP " 3." 4
Interface Stabilitizzle Promise
.RS 4
\%http://www.freedesktop.org/wiki/Software/systemd/InterfaceStabilityPromise
.RE
.IP " 4." 4
Generators Justification
.RS 4
\%http://www.freedesktop.org/wiki/Software/systemd/Generators
.RE
.IP " 5." 4
Container Interface
.RS 4
\%http://www.freedesktop.org/wiki/Software/systemd/ContainerInterface
.RE
.IP " 6." 4
initrd Interface
.RS 4
\%http://www.freedesktop.org/wiki/Software/systemd/InitrdInterface
.RE
.IP " 7." 4
XDG Base Directory justification
.RS 4
\%http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
.RE
.IP " 8." 4
If run inside a Linux container these arguments may be passed as command line arguments ta systemd itself, next ta any of tha command line options listed up in tha Options section above. If run outside of Linux containers, these arguments is parsed from
/proc/cmdline
instead.
.IP " 9." 4
systemd Homepage
.RS 4
\%http://www.freedesktop.org/wiki/Software/systemd/
.RE
