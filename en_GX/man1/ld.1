.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LD 1"
.TH LD 1 "2013-08-30" "binutils-2.23.2" "GNU Development Tools"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
ld \- Da GNU linker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
ld [\fBoptions\fR] \fIobjfile\fR ...
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBld\fR combines a fuckin shitload of object n' archive files, relocates
their data n' tizzles up symbol references. Usually tha last step in
compilin a program is ta run \fBld\fR.
.PP
\&\fBld\fR accepts Linker Command Language filez freestyled in
a superset of \s-1AT&T\s0z Link Editor Command Language syntax,
to provide explicit n' total control over tha linkin process.
.PP
This playa page do not describe tha command language; peep the
\&\fBld\fR entry up in \f(CW\*(C`info\*(C'\fR fo' full details on tha command
language n' on other aspectz of tha \s-1GNU\s0 linker.
.PP
This version of \fBld\fR uses tha general purpose \s-1BFD\s0 libraries
to operate on object files. This allows \fBld\fR ta read, combine, and
write object filez up in nuff different formats\-\-\-for example, \s-1COFF\s0 or
\&\f(CW\*(C`a.out\*(C'\fR.  Different formats may be linked together ta produce any
available kind of object file.
.PP
Aside from its flexibility, tha \s-1GNU\s0 linker is mo' helpful than other
linkers up in providin diagnostic shiznit. I aint talkin' bout chicken n' gravy biatch.  Many linkers abandon
execution immediately upon encounterin a error; whenever possible,
\&\fBld\fR continues executing, allowin you ta identify other errors
(or, up in some cases, ta git a output file up in spite of tha error).
.PP
Da \s-1GNU\s0 linker \fBld\fR is meant ta cover a funky-ass broad range of thangs,
and ta be as compatible as possible wit other linkers.  As a result,
you have nuff chizzlez ta control its behavior.
.SH "OPTIONS"
.IX Header "OPTIONS"
Da linker supports a plethora of command-line options yo, but up in actual
practice few of dem is used up in any particular context.
For instance, a gangbangin' frequent use of \fBld\fR is ta link standard Unix
object filez on a standard, supported Unix system.  On such a system, to
link a gangbangin' file \f(CW\*(C`hello.o\*(C'\fR:
.PP
.Vb 1
\&        ld \-o <output> /lib/crt0.o hello.o \-lc
.Ve
.PP
This  drops some lyrics ta \fBld\fR ta produce a gangbangin' file called \fIoutput\fR as the
result of linkin tha file \f(CW\*(C`/lib/crt0.o\*(C'\fR wit \f(CW\*(C`hello.o\*(C'\fR and
the library \f(CW\*(C`libc.a\*(C'\fR, which will come from tha standard search
directories. Put ya muthafuckin choppers up if ya feel dis!  (See tha rap of tha \fB\-l\fR option below.)
.PP
Some of tha command-line options ta \fBld\fR may be specified at any
point up in tha command line.  But fuck dat shiznit yo, tha word on tha street is dat options which refer ta files, such
as \fB\-l\fR or \fB\-T\fR, cause tha file ta be read all up in tha point at
which tha option appears up in tha command line, relatizzle ta tha object
filez n' other file options.  Repeatin non-file options wit a
different argument will either have no further effect, or override prior
occurrences (those further ta tha left on tha command line) of that
option. I aint talkin' bout chicken n' gravy biatch.  Options which may be meaningfully specified mo' than once are
noted up in tha descriptions below.
.PP
Non-option arguments is object filez or archives which is ta be linked
together n' shit.  They may follow, precede, or be mixed up in wit command-line
options, except dat a object file argument may not be placed between
an option n' its argument.
.PP
Usually tha linker is invoked wit at least one object file yo, but you can
specify other formz of binary input filez rockin \fB\-l\fR, \fB\-R\fR,
and tha script command language.  If \fIno\fR binary input filez at all
are specified, tha linker do not produce any output, n' thangs the
message \fBNo input files\fR.
.PP
If tha linker cannot recognize tha format of a object file, it will
assume dat it aint nuthin but a linker script.  A script specified up in dis way
augments tha main linker script used fo' tha link (either tha default
linker script or tha one specified by rockin \fB\-T\fR).  This feature
permits tha linker ta link against a gangbangin' file which appears ta be a object
or a archive yo, but straight-up merely defines some symbol joints, or uses
\&\f(CW\*(C`INPUT\*(C'\fR or \f(CW\*(C`GROUP\*(C'\fR ta load other objects, n' you can put dat on yo' toast.  Specifyin a
script up in dis way merely augments tha main linker script, wit the
extra commandz placed afta tha main script; use tha \fB\-T\fR option
to replace tha default linker script entirely yo, but note tha effect of
the \f(CW\*(C`INSERT\*(C'\fR command.
.PP
For options whose names is a single letter,
option arguments must either follow tha option letta without intervening
whitespace, or be given as separate arguments immediately followin the
option dat requires em.
.PP
For options whose names is multiple letters, either one dash or two can
precede tha option name; fo' example, \fB\-trace\-symbol\fR and
\&\fB\-\-trace\-symbol\fR is equivalent.  Note\-\-\-there is one exception to
this rule.  Multiple letta options dat start wit a lower case 'o' can
only be preceded by two dashes.  This is ta reduce mad drama wit the
\&\fB\-o\fR option. I aint talkin' bout chicken n' gravy biatch.  So fo' example \fB\-omagic\fR sets tha output file
name ta \fBmagic\fR whereas \fB\-\-omagic\fR sets tha \s-1NMAGIC\s0 flag on the
output.
.PP
Arguments ta multiple-letta options must either be separated from the
option name by a equals sign, or be given as separate arguments
immediately followin tha option dat requires em.  For example,
\&\fB\-\-trace\-symbol foo\fR n' \fB\-\-trace\-symbol=foo\fR is equivalent.
Unique abbreviationz of tha namez of multiple-letta options are
accepted.
.PP
Note\-\-\-if tha linker is bein invoked indirectly, via a cold-ass lil compila driver
(e.g. \fBgcc\fR) then all tha linker command line options should be
prefixed by \fB\-Wl,\fR (or whatever be appropriate fo' tha particular
compila driver) like this:
.PP
.Vb 1
\&          gcc \-Wl,\-\-start\-group foo.o bar.o \-Wl,\-\-end\-group
.Ve
.PP
This is blingin, cuz otherwise tha compila driver program may
silently drop tha linker options, resultin up in a wack link.  Confusion
may also arise when passin options dat require joints all up in a
driver, as tha use of a space between option n' argument acts as
a separator, n' causes tha driver ta pass only tha option ta tha linker
and tha argument ta tha compila n' shit.  In dis case, it is simplest ta use
the joined formz of both single\- n' multiple-letta options, such as:
.PP
.Vb 1
\&          gcc foo.o bar.o \-Wl,\-eENTRY \-Wl,\-Map=a.map
.Ve
.PP
Here be a table of tha generic command line switches accepted by tha \s-1GNU\s0
linker:
.IP "\fB@\fR\fIfile\fR" 4
.IX Item "@file"
Read command-line options from \fIfile\fR.  Da options read are
inserted up in place of tha original gangsta @\fIfile\fR option. I aint talkin' bout chicken n' gravy biatch.  If \fIfile\fR
does not exist, or cannot be read, then tha option is ghon be treated
literally, n' not removed.
.Sp
Options up in \fIfile\fR is separated by whitespace.  A whitespace
characta may be included up in a option by surroundin tha entire
option up in either single or double quotes.  Any characta (includin a
backslash) may be included by prefixin tha characta ta be included
with a funky-ass backslash.  Da \fIfile\fR may itself contain additional
@\fIfile\fR options; any such options is ghon be processed recursively.
.IP "\fB\-a\fR \fIkeyword\fR" 4
.IX Item "-a keyword"
This option is supported fo' \s-1HP/UX\s0 compatibility.  Da \fIkeyword\fR
argument must be one of tha strings \fBarchive\fR, \fBshared\fR, or
\&\fBdefault\fR.  \fB\-aarchive\fR is functionally equivalent to
\&\fB\-Bstatic\fR, n' tha other two keywordz is functionally equivalent
to \fB\-Bdynamic\fR.  This option may be used any number of times.
.IP "\fB\-\-audit\fR \fI\s-1AUDITLIB\s0\fR" 4
.IX Item "--audit AUDITLIB"
Addz \fI\s-1AUDITLIB\s0\fR ta tha \f(CW\*(C`DT_AUDIT\*(C'\fR entry of tha dynamic section.
\&\fI\s-1AUDITLIB\s0\fR aint checked fo' existence, nor will it use tha \s-1DT_SONAME\s0
specified up in tha library.  If specified multiple times \f(CW\*(C`DT_AUDIT\*(C'\fR
will contain a cold-ass lil colon separated list of audit intercourses ta use. If tha linker
findz a object wit a audit entry while searchin fo' shared libraries,
it will add a cold-ass lil correspondin \f(CW\*(C`DT_DEPAUDIT\*(C'\fR entry up in tha output file.
This option is only meaningful on \s-1ELF\s0 platforms supportin tha rtld-audit
interface.
.IP "\fB\-A\fR \fIarchitecture\fR" 4
.IX Item "-A architecture"
.PD 0
.IP "\fB\-\-architecture=\fR\fIarchitecture\fR" 4
.IX Item "--architecture=architecture"
.PD
In tha current release of \fBld\fR, dis option is useful only fo' the
Intel 960 crew of architectures.  In dat \fBld\fR configuration, the
\&\fIarchitecture\fR argument identifies tha particular architecture in
the 960 crew, enablin some safeguardz n' modifyin the
archive-library search path.
.Sp
Future releasez of \fBld\fR may support similar functionalitizzle for
other architecture crews.
.IP "\fB\-b\fR \fIinput-format\fR" 4
.IX Item "-b input-format"
.PD 0
.IP "\fB\-\-format=\fR\fIinput-format\fR" 4
.IX Item "--format=input-format"
.PD
\&\fBld\fR may be configured ta support mo' than one kind of object
file.  If yo' \fBld\fR is configured dis way, you can use the
\&\fB\-b\fR option ta specify tha binary format fo' input object files
that follow dis option on tha command line.  Even when \fBld\fR is
configured ta support alternatizzle object formats, you don't probably need
to specify this, as \fBld\fR should be configured ta expect as a
default input format da most thugged-out usual format on each machine.
\&\fIinput-format\fR be a text string, tha name of a particular format
supported by tha \s-1BFD\s0 libraries. Put ya muthafuckin choppers up if ya feel dis!  (Yo ass can list tha available binary
formats wit \fBobjdump \-i\fR.)
.Sp
Yo ass may wanna use dis option if yo ass is linkin filez wit a unusual
binary format.  Yo ass can also use \fB\-b\fR ta switch formats explicitly (when
linkin object filez of different formats), by including
\&\fB\-b\fR \fIinput-format\fR before each crew of object filez up in a
particular format.
.Sp
Da default format is taken from tha environment variable
\&\f(CW\*(C`GNUTARGET\*(C'\fR.
.Sp
Yo ass can also define tha input format from a script, rockin tha command
\&\f(CW\*(C`TARGET\*(C'\fR;
.IP "\fB\-c\fR \fIMRI-commandfile\fR" 4
.IX Item "-c MRI-commandfile"
.PD 0
.IP "\fB\-\-mri\-script=\fR\fIMRI-commandfile\fR" 4
.IX Item "--mri-script=MRI-commandfile"
.PD
For compatibilitizzle wit linkers produced by \s-1MRI, \s0\fBld\fR accepts script
filez freestyled up in a alternate, restricted command language, busted lyrics bout in
the \s-1MRI\s0 Compatible Script Filez section of \s-1GNU\s0 ld documentation.
Introduce \s-1MRI\s0 script filez with
the option \fB\-c\fR; use tha \fB\-T\fR option ta run linker
scripts freestyled up in tha general-purpose \fBld\fR scriptin language.
If \fIMRI-cmdfile\fR do not exist, \fBld\fR looks fo' it up in tha directories
specified by any \fB\-L\fR options.
.IP "\fB\-d\fR" 4
.IX Item "-d"
.PD 0
.IP "\fB\-dc\fR" 4
.IX Item "-dc"
.IP "\fB\-dp\fR" 4
.IX Item "-dp"
.PD
These three options is equivalent; multiple forms is supported for
compatibilitizzle wit other linkers.  They assign space ta common symbols
even if a relocatable output file is specified (with \fB\-r\fR).  The
script command \f(CW\*(C`FORCE_COMMON_ALLOCATION\*(C'\fR has tha same ol' dirty effect.
.IP "\fB\-\-depaudit\fR \fI\s-1AUDITLIB\s0\fR" 4
.IX Item "--depaudit AUDITLIB"
.PD 0
.IP "\fB\-P\fR \fI\s-1AUDITLIB\s0\fR" 4
.IX Item "-P AUDITLIB"
.PD
Addz \fI\s-1AUDITLIB\s0\fR ta tha \f(CW\*(C`DT_DEPAUDIT\*(C'\fR entry of tha dynamic section.
\&\fI\s-1AUDITLIB\s0\fR aint checked fo' existence, nor will it use tha \s-1DT_SONAME\s0
specified up in tha library.  If specified multiple times \f(CW\*(C`DT_DEPAUDIT\*(C'\fR
will contain a cold-ass lil colon separated list of audit intercourses ta use.  This
option is only meaningful on \s-1ELF\s0 platforms supportin tha rtld-audit intercourse.
Da \-P option is provided fo' Solaris compatibility.
.IP "\fB\-e\fR \fIentry\fR" 4
.IX Item "-e entry"
.PD 0
.IP "\fB\-\-entry=\fR\fIentry\fR" 4
.IX Item "--entry=entry"
.PD
Use \fIentry\fR as tha explicit symbol fo' beginnin execution of your
program, rather than tha default entry point.  If there is no symbol
named \fIentry\fR, tha linker will try ta parse \fIentry\fR as a number,
and use dat as tha entry address (the number is ghon be interpreted in
base 10; you may bust a leadin \fB0x\fR fo' base 16, or a leading
\&\fB0\fR fo' base 8).
.IP "\fB\-\-exclude\-libs\fR \fIlib\fR\fB,\fR\fIlib\fR\fB,...\fR" 4
.IX Item "--exclude-libs lib,lib,..."
Specifies a list of archive libraries from which symbols should not be automatically
exported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da library names may be delimited by commas or colons.  Specifying
\&\f(CW\*(C`\-\-exclude\-libs ALL\*(C'\fR excludes symbols up in all archive libraries from
automatic export.  This option be available only fo' tha i386 \s-1PE\s0 targeted
port of tha linker n' fo' \s-1ELF\s0 targeted ports, n' you can put dat on yo' toast.  For i386 \s-1PE,\s0 symbols
explicitly listed up in a .def file is still exported, regardless of this
option. I aint talkin' bout chicken n' gravy biatch.  For \s-1ELF\s0 targeted ports, symbols affected by dis option will
be treated as hidden.
.IP "\fB\-\-exclude\-modules\-for\-implib\fR \fImodule\fR\fB,\fR\fImodule\fR\fB,...\fR" 4
.IX Item "--exclude-modules-for-implib module,module,..."
Specifies a list of object filez or archive members, from which symbols
should not be automatically exported yo, but which should be copied wholesale
into tha import library bein generated durin tha link.  Da module names
may be delimited by commas or colons, n' must match exactly tha filenames
used by \fBld\fR ta open tha files; fo' archive members, dis is simply
the member name yo, but fo' object filez tha name listed must include and
match precisely any path used ta specify tha input file on tha linker's
command-line.  This option be available only fo' tha i386 \s-1PE\s0 targeted port
of tha linker n' shit.  Symbols explicitly listed up in a .def file is still exported,
regardless of dis option.
.IP "\fB\-E\fR" 4
.IX Item "-E"
.PD 0
.IP "\fB\-\-export\-dynamic\fR" 4
.IX Item "--export-dynamic"
.IP "\fB\-\-no\-export\-dynamic\fR" 4
.IX Item "--no-export-dynamic"
.PD
When bustin a thugged-out dynamically linked executable, rockin tha \fB\-E\fR
option or tha \fB\-\-export\-dynamic\fR option causes tha linker ta add
all symbols ta tha dynamic symbol table.  Da dynamic symbol table is the
set of symbols which is visible from dynamic objects at run time.
.Sp
If you do not use either of these options (or use the
\&\fB\-\-no\-export\-dynamic\fR option ta restore tha default behavior), the
dynamic symbol table will normally contain only dem symbols which are
referenced by some dynamic object mentioned up in tha link.
.Sp
If you use \f(CW\*(C`dlopen\*(C'\fR ta load a thugged-out dynamic object which need ta refer
back ta tha symbols defined by tha program, rather than some other
dynamic object, then yo big-ass booty is ghon probably need ta use dis option when
linkin tha program itself.
.Sp
Yo ass can also use tha dynamic list ta control what tha fuck symbols should
be added ta tha dynamic symbol table if tha output format supports dat shit.
See tha description of \fB\-\-dynamic\-list\fR.
.Sp
Note dat dis option is specific ta \s-1ELF\s0 targeted ports, n' you can put dat on yo' toast.  \s-1PE\s0 targets
support a similar function ta export all symbols from a \s-1DLL\s0 or \s-1EXE\s0; see
the description of \fB\-\-export\-all\-symbols\fR below.
.IP "\fB\-EB\fR" 4
.IX Item "-EB"
Link big-endian objects, n' you can put dat on yo' toast.  This affects tha default output format.
.IP "\fB\-EL\fR" 4
.IX Item "-EL"
Link lil-endian objects, n' you can put dat on yo' toast.  This affects tha default output format.
.IP "\fB\-f\fR \fIname\fR" 4
.IX Item "-f name"
.PD 0
.IP "\fB\-\-auxiliary=\fR\fIname\fR" 4
.IX Item "--auxiliary=name"
.PD
When bustin a \s-1ELF\s0 shared object, set tha internal \s-1DT_AUXILIARY\s0 field
to tha specified name.  This  drops some lyrics ta tha dynamic linker dat tha symbol
table of tha shared object should be used as a auxiliary filta on the
symbol table of tha shared object \fIname\fR.
.Sp
If you lata link a program against dis filta object, then, when you
run tha program, tha dynamic linker will peep tha \s-1DT_AUXILIARY\s0 field. Y'all KNOW dat shit, muthafucka!  If
the dynamic linker resolves any symbols from tha filta object, it will
first check whether there be a thugged-out definizzle up in tha shared object
\&\fIname\fR.  If there is one, it is ghon be used instead of tha definition
in tha filta object.  Da shared object \fIname\fR need not exist.
Thus tha shared object \fIname\fR may be used ta provide a alternative
implementation of certain functions, like fo' debuggin or for
machine specific performance.
.Sp
This option may be specified mo' than once.  Da \s-1DT_AUXILIARY\s0 entries
will be pimped up in tha order up in which they step tha fuck up on tha command line.
.IP "\fB\-F\fR \fIname\fR" 4
.IX Item "-F name"
.PD 0
.IP "\fB\-\-filter=\fR\fIname\fR" 4
.IX Item "--filter=name"
.PD
When bustin a \s-1ELF\s0 shared object, set tha internal \s-1DT_FILTER\s0 field to
the specified name.  This  drops some lyrics ta tha dynamic linker dat tha symbol table
of tha shared object which is bein pimped should be used as a gangbangin' filter
on tha symbol table of tha shared object \fIname\fR.
.Sp
If you lata link a program against dis filta object, then, when you
run tha program, tha dynamic linker will peep tha \s-1DT_FILTER\s0 field. Y'all KNOW dat shit, muthafucka!  The
dynamic linker will resolve symbols accordin ta tha symbol table of the
filta object as usual yo, but it will straight-up link ta tha definitions
found up in tha shared object \fIname\fR.  Thus tha filta object can be
used ta select a subset of tha symbols provided by tha object
\&\fIname\fR.
.Sp
Some olda linkers used tha \fB\-F\fR option all up in a cold-ass lil compilation
toolchain fo' specifyin object-file format fo' both input n' output
object files.
Da \s-1GNU\s0 linker uses other mechanizzlez fo' dis purpose: the
\&\fB\-b\fR, \fB\-\-format\fR, \fB\-\-oformat\fR options, the
\&\f(CW\*(C`TARGET\*(C'\fR command up in linker scripts, n' tha \f(CW\*(C`GNUTARGET\*(C'\fR
environment variable.
Da \s-1GNU\s0 linker will ignore tha \fB\-F\fR option when not
bustin a \s-1ELF\s0 shared object.
.IP "\fB\-fini=\fR\fIname\fR" 4
.IX Item "-fini=name"
When bustin a \s-1ELF\s0 executable or shared object, call \s-1NAME\s0 when the
executable or shared object is unloaded, by settin \s-1DT_FINI\s0 ta the
address of tha function. I aint talkin' bout chicken n' gravy biatch.  By default, tha linker uses \f(CW\*(C`_fini\*(C'\fR as
the function ta call.
.IP "\fB\-g\fR" 4
.IX Item "-g"
Ignored. Y'all KNOW dat shit, muthafucka!  Provided fo' compatibilitizzle wit other tools.
.IP "\fB\-G\fR \fIvalue\fR" 4
.IX Item "-G value"
.PD 0
.IP "\fB\-\-gpsize=\fR\fIvalue\fR" 4
.IX Item "--gpsize=value"
.PD
Set tha maximum size of objects ta be optimized rockin tha \s-1GP\s0 regista to
\&\fIsize\fR.  This is only meaningful fo' object file formats such as
\&\s-1MIPS ECOFF\s0 which supports puttin big-ass n' lil' small-ass objects tha fuck into different
sections.  This is ignored fo' other object file formats.
.IP "\fB\-h\fR \fIname\fR" 4
.IX Item "-h name"
.PD 0
.IP "\fB\-soname=\fR\fIname\fR" 4
.IX Item "-soname=name"
.PD
When bustin a \s-1ELF\s0 shared object, set tha internal \s-1DT_SONAME\s0 field to
the specified name.  When a executable is linked wit a gangbangin' finger-lickin' dirty-ass shared object
which has a \s-1DT_SONAME\s0 field, then when tha executable is run tha dynamic
linker will attempt ta load tha shared object specified by tha \s-1DT_SONAME\s0
field rather than tha rockin tha file name given ta tha linker.
.IP "\fB\-i\fR" 4
.IX Item "-i"
Perform a incremenstrual link (same as option \fB\-r\fR).
.IP "\fB\-init=\fR\fIname\fR" 4
.IX Item "-init=name"
When bustin a \s-1ELF\s0 executable or shared object, call \s-1NAME\s0 when the
executable or shared object is loaded, by settin \s-1DT_INIT\s0 ta tha address
of tha function. I aint talkin' bout chicken n' gravy biatch.  By default, tha linker uses \f(CW\*(C`_init\*(C'\fR as the
function ta call.
.IP "\fB\-l\fR \fInamespec\fR" 4
.IX Item "-l namespec"
.PD 0
.IP "\fB\-\-library=\fR\fInamespec\fR" 4
.IX Item "--library=namespec"
.PD
Add tha archive or object file specified by \fInamespec\fR ta the
list of filez ta link.  This option may be used any number of times.
If \fInamespec\fR iz of tha form \fI:\fIfilename\fI\fR, \fBld\fR
will search tha library path fo' a gangbangin' file called \fIfilename\fR, otherwise it
will search tha library path fo' a gangbangin' file called \fIlib\fInamespec\fI.a\fR.
.Sp
On systems which support shared libraries, \fBld\fR may also search for
filez other than \fIlib\fInamespec\fI.a\fR.  Specifically, on \s-1ELF\s0
and SunOS systems, \fBld\fR will search a gangbangin' finger-lickin' directory fo' a library
called \fIlib\fInamespec\fI.so\fR before searchin fo' one called
\&\fIlib\fInamespec\fI.a\fR.  (By convention, a \f(CW\*(C`.so\*(C'\fR extension
indicates a gangbangin' finger-lickin' dirty-ass shared library.)  Note dat dis behavior do not apply
to \fI:\fIfilename\fI\fR, which always specifies a gangbangin' file called
\&\fIfilename\fR.
.Sp
Da linker will search a archive only once, all up in tha location where it is
specified on tha command line.  If tha archive defines a symbol which
was undefined up in some object which rocked up before tha archive on the
command line, tha linker will include tha appropriate file(s) from the
archive.  But fuck dat shiznit yo, tha word on tha street is dat a undefined symbol up in a object appearin lata on
the command line aint gonna cause tha linker ta search tha archive again.
.Sp
See tha \fB\-(\fR option fo' a way ta force tha linker ta search
archives multiple times.
.Sp
Yo ass may list tha same archive multiple times on tha command line.
.Sp
This type of archive searchin is standard fo' Unix linkers.  However,
if yo ass is rockin \fBld\fR on \s-1AIX,\s0 note dat it is different from the
behaviour of tha \s-1AIX\s0 linker.
.IP "\fB\-L\fR \fIsearchdir\fR" 4
.IX Item "-L searchdir"
.PD 0
.IP "\fB\-\-library\-path=\fR\fIsearchdir\fR" 4
.IX Item "--library-path=searchdir"
.PD
Add path \fIsearchdir\fR ta tha list of paths dat \fBld\fR will search
for archive libraries n' \fBld\fR control scripts, n' you can put dat on yo' toast.  Yo ass may use this
option any number of times.  Da directories is searched up in tha order
in which they is specified on tha command line.  Directories specified
on tha command line is searched before tha default directories. Put ya muthafuckin choppers up if ya feel dis!  All
\&\fB\-L\fR options apply ta all \fB\-l\fR options, regardless of the
order up in which tha options appear. Shiiit, dis aint no joke.  \fB\-L\fR options do not affect
how \fBld\fR searches fo' a linker script unless \fB\-T\fR
option is specified.
.Sp
If \fIsearchdir\fR begins wit \f(CW\*(C`=\*(C'\fR, then tha \f(CW\*(C`=\*(C'\fR is ghon be replaced
by tha \fIsysroot prefix\fR, a path specified when tha linker is configured.
.Sp
Da default set of paths searched (without bein specified with
\&\fB\-L\fR) dependz on which emulation mode \fBld\fR is using, n' in
some cases also on how tha fuck dat shiznit was configured.
.Sp
Da paths can also be specified up in a link script wit the
\&\f(CW\*(C`SEARCH_DIR\*(C'\fR command. Y'all KNOW dat shit, muthafucka!  Directories specified dis way is searched
at tha point up in which tha linker script appears up in tha command line.
.IP "\fB\-m\fR \fIemulation\fR" 4
.IX Item "-m emulation"
Emulate tha \fIemulation\fR linker n' shit.  Yo ass can list tha available
emulations wit tha \fB\-\-verbose\fR or \fB\-V\fR options.
.Sp
If tha \fB\-m\fR option aint used, tha emulation is taken from the
\&\f(CW\*(C`LDEMULATION\*(C'\fR environment variable, if dat is defined.
.Sp
Otherwise, tha default emulation dependz upon how tha fuck tha linker was
configured.
.IP "\fB\-M\fR" 4
.IX Item "-M"
.PD 0
.IP "\fB\-\-print\-map\fR" 4
.IX Item "--print-map"
.PD
Print a link map ta tha standard output.  A link map provides
information bout tha link, includin tha following:
.RS 4
.IP "\(bu" 4
Where object filez is mapped tha fuck into memory.
.IP "\(bu" 4
How tha fuck common symbols is allocated.
.IP "\(bu" 4
All archive thugz included up in tha link, wit a mention of tha symbol
which caused tha archive member ta be brought in.
.IP "\(bu" 4
Da joints assigned ta symbols.
.Sp
Note \- symbols whose joints is computed by a expression which
involves a reference ta a previous value of tha same symbol may not
have erect result displayed up in tha link map.  This is cuz the
linker discardz intermediate thangs up in dis biatch n' only retains tha final value
of a expression. I aint talkin' bout chicken n' gravy biatch.  Under such circumstances tha linker will display
the final value enclosed by square brackets, n' you can put dat on yo' toast.  Thus fo' example a
linker script containing:
.Sp
.Vb 3
\&           foo = 1
\&           foo = foo * 4
\&           foo = foo + 8
.Ve
.Sp
will produce tha followin output up in tha link map if tha \fB\-M\fR
option is used:
.Sp
.Vb 3
\&           0x00000001                foo = 0x1
\&           [0x0000000c]                foo = (foo * 0x4)
\&           [0x0000000c]                foo = (foo + 0x8)
.Ve
.Sp
See \fBExpressions\fR fo' mo' shiznit bout expressions up in linker
scripts.
.RE
.RS 4
.RE
.IP "\fB\-n\fR" 4
.IX Item "-n"
.PD 0
.IP "\fB\-\-nmagic\fR" 4
.IX Item "--nmagic"
.PD
Turn off page alignment of sections, n' disable linkin against shared
libraries. Put ya muthafuckin choppers up if ya feel dis!  If tha output format supports Unix steez magic numbers,
mark tha output as \f(CW\*(C`NMAGIC\*(C'\fR.
.IP "\fB\-N\fR" 4
.IX Item "-N"
.PD 0
.IP "\fB\-\-omagic\fR" 4
.IX Item "--omagic"
.PD
Set tha text n' data sections ta be readable n' writable.  Also, do
not page-align tha data segment, n' disable linkin against shared
libraries. Put ya muthafuckin choppers up if ya feel dis!  If tha output format supports Unix steez magic numbers,
mark tha output as \f(CW\*(C`OMAGIC\*(C'\fR. Note: Although a writable text section
is allowed fo' PE-COFF targets, it do not conform ta tha format
specification published by Microsoft.
.IP "\fB\-\-no\-omagic\fR" 4
.IX Item "--no-omagic"
This option negates most of tha effectz of tha \fB\-N\fR option. I aint talkin' bout chicken n' gravy biatch.  It
sets tha text section ta be read-only, n' forces tha data segment to
be page-aligned. Y'all KNOW dat shit, muthafucka!  Note \- dis option do not enable linkin against
shared libraries. Put ya muthafuckin choppers up if ya feel dis!  Use \fB\-Bdynamic\fR fo' all dis bullshit.
.IP "\fB\-o\fR \fIoutput\fR" 4
.IX Item "-o output"
.PD 0
.IP "\fB\-\-output=\fR\fIoutput\fR" 4
.IX Item "--output=output"
.PD
Use \fIoutput\fR as tha name fo' tha program produced by \fBld\fR; if this
option aint specified, tha name \fIa.out\fR is used by default.  The
script command \f(CW\*(C`OUTPUT\*(C'\fR can also specify tha output file name.
.IP "\fB\-O\fR \fIlevel\fR" 4
.IX Item "-O level"
If \fIlevel\fR be a numeric joints pimped outa than zero \fBld\fR optimizes
the output.  This might take hella longer n' therefore probably
should only be enabled fo' tha final binary.  At tha moment this
option only affects \s-1ELF\s0 shared library generation. I aint talkin' bout chicken n' gravy biatch.  Future releases of
the linker may make mo' use of dis option. I aint talkin' bout chicken n' gravy biatch.  Also currently there is
no difference up in tha linkerz behaviour fo' different non-zero joints
of dis option. I aint talkin' bout chicken n' gravy biatch.  Again dis may chizzle wit future releases.
.IP "\fB\-q\fR" 4
.IX Item "-q"
.PD 0
.IP "\fB\-\-emit\-relocs\fR" 4
.IX Item "--emit-relocs"
.PD
Leave relocation sections n' contents up in straight-up linked executables.
Post link analysis n' optimization tools may need dis shiznit in
order ta big-ass up erect modificationz of executables.  This thangs up in dis biatch
in larger executables.
.Sp
This option is currently only supported on \s-1ELF\s0 platforms.
.IP "\fB\-\-force\-dynamic\fR" 4
.IX Item "--force-dynamic"
Force tha output file ta have dynamic sections.  This option is specific
to VxWorks targets.
.IP "\fB\-r\fR" 4
.IX Item "-r"
.PD 0
.IP "\fB\-\-relocatable\fR" 4
.IX Item "--relocatable"
.PD
Generate relocatable output\-\-\-i.e., generate a output file dat can in
turn serve as input ta \fBld\fR.  This is often called \fIpartial
linking\fR.  As a side effect, up in environments dat support standard Unix
magic numbers, dis option also sets tha output filez magic number to
\&\f(CW\*(C`OMAGIC\*(C'\fR.
If dis option aint specified, a absolute file is produced. Y'all KNOW dat shit, muthafucka!  When
linkin \*(C+ programs, dis option \fIwill not\fR resolve references to
constructors; ta do that, use \fB\-Ur\fR.
.Sp
When a input file aint gots tha same format as tha output file,
partial linkin is only supported if dat input file do not contain any
relocations.  Different output formats can have further restrictions; for
example some \f(CW\*(C`a.out\*(C'\fR\-based formats do not support partial linking
with input filez up in other formats at all.
.Sp
This option do tha same thang as \fB\-i\fR.
.IP "\fB\-R\fR \fIfilename\fR" 4
.IX Item "-R filename"
.PD 0
.IP "\fB\-\-just\-symbols=\fR\fIfilename\fR" 4
.IX Item "--just-symbols=filename"
.PD
Read symbol names n' they addresses from \fIfilename\fR yo, but do not
relocate it or include it up in tha output.  This allows yo' output file
to refer symbolically ta absolute locationz of memory defined up in other
programs.  Yo ass may use dis option mo' than once.
.Sp
For compatibilitizzle wit other \s-1ELF\s0 linkers, if tha \fB\-R\fR option is
followed by a gangbangin' finger-lickin' directory name, rather than a gangbangin' file name, it is treated as
the \fB\-rpath\fR option.
.IP "\fB\-s\fR" 4
.IX Item "-s"
.PD 0
.IP "\fB\-\-strip\-all\fR" 4
.IX Item "--strip-all"
.PD
Omit all symbol shiznit from tha output file.
.IP "\fB\-S\fR" 4
.IX Item "-S"
.PD 0
.IP "\fB\-\-strip\-debug\fR" 4
.IX Item "--strip-debug"
.PD
Omit debugger symbol shiznit (but not all symbols) from tha output file.
.IP "\fB\-t\fR" 4
.IX Item "-t"
.PD 0
.IP "\fB\-\-trace\fR" 4
.IX Item "--trace"
.PD
Print tha namez of tha input filez as \fBld\fR processes em.
.IP "\fB\-T\fR \fIscriptfile\fR" 4
.IX Item "-T scriptfile"
.PD 0
.IP "\fB\-\-script=\fR\fIscriptfile\fR" 4
.IX Item "--script=scriptfile"
.PD
Use \fIscriptfile\fR as tha linker script.  This script replaces
\&\fBld\fRz default linker script (rather than addin ta it), so
\&\fIcommandfile\fR must specify every last muthafuckin thang necessary ta describe the
output file.    If \fIscriptfile\fR do not exist in
the current directory, \f(CW\*(C`ld\*(C'\fR looks fo' it up in tha directories
specified by any precedin \fB\-L\fR options.  Multiple \fB\-T\fR
options accumulate.
.IP "\fB\-dT\fR \fIscriptfile\fR" 4
.IX Item "-dT scriptfile"
.PD 0
.IP "\fB\-\-default\-script=\fR\fIscriptfile\fR" 4
.IX Item "--default-script=scriptfile"
.PD
Use \fIscriptfile\fR as tha default linker script.
.Sp
This option is similar ta tha \fB\-\-script\fR option except that
processin of tha script is delayed until afta tha rest of the
command line has been processed. Y'all KNOW dat shit, muthafucka!  This allows options placed afta the
\&\fB\-\-default\-script\fR option on tha command line ta affect the
behaviour of tha linker script, which can be blingin when tha linker
command line cannot be directly controlled by tha user n' shit.  (eg cuz
the command line is bein constructed by another tool, such as
\&\fBgcc\fR).
.IP "\fB\-u\fR \fIsymbol\fR" 4
.IX Item "-u symbol"
.PD 0
.IP "\fB\-\-undefined=\fR\fIsymbol\fR" 4
.IX Item "--undefined=symbol"
.PD
Force \fIsymbol\fR ta be entered up in tha output file as a undefined
symbol.  Bustin dis may, fo' example, trigger linkin of additional
modulez from standard libraries. Put ya muthafuckin choppers up if ya feel dis!  \fB\-u\fR may be repeated with
different option arguments ta enta additionizzle undefined symbols.  This
option is equivalent ta tha \f(CW\*(C`EXTERN\*(C'\fR linker script command.
.IP "\fB\-Ur\fR" 4
.IX Item "-Ur"
For anythang other than \*(C+ programs, dis option is equivalent to
\&\fB\-r\fR: it generates relocatable output\-\-\-i.e., a output file dat can in
turn serve as input ta \fBld\fR.  When linkin \*(C+ programs, \fB\-Ur\fR
\&\fIdoes\fR resolve references ta constructors, unlike \fB\-r\fR.
It do not work ta use \fB\-Ur\fR on filez dat was theyselves linked
with \fB\-Ur\fR; once tha constructor table has been built, it cannot
be added to.  Use \fB\-Ur\fR only fo' tha last partial link, and
\&\fB\-r\fR fo' tha others.
.IP "\fB\-\-unique[=\fR\fI\s-1SECTION\s0\fR\fB]\fR" 4
.IX Item "--unique[=SECTION]"
Creates a separate output section fo' every last muthafuckin input section matching
\&\fI\s-1SECTION\s0\fR, or if tha optionizzle wildcard \fI\s-1SECTION\s0\fR argument is
missing, fo' every last muthafuckin orphan input section. I aint talkin' bout chicken n' gravy biatch.  An orphan section is one not
specifically mentioned up in a linker script.  Yo ass may use dis option
multiple times on tha command line;  It prevents tha aiiight mergin of
input sections wit tha same name, overridin output section assignments
in a linker script.
.IP "\fB\-v\fR" 4
.IX Item "-v"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD
Display tha version number fo' \fBld\fR.  Da \fB\-V\fR option also
lists tha supported emulations.
.IP "\fB\-x\fR" 4
.IX Item "-x"
.PD 0
.IP "\fB\-\-discard\-all\fR" 4
.IX Item "--discard-all"
.PD
Delete all local symbols.
.IP "\fB\-X\fR" 4
.IX Item "-X"
.PD 0
.IP "\fB\-\-discard\-locals\fR" 4
.IX Item "--discard-locals"
.PD
Delete all temporary local symbols.  (These symbols start with
system-specific local label prefixes, typically \fB.L\fR fo' \s-1ELF\s0 systems
or \fBL\fR fo' traditionizzle a.out systems.)
.IP "\fB\-y\fR \fIsymbol\fR" 4
.IX Item "-y symbol"
.PD 0
.IP "\fB\-\-trace\-symbol=\fR\fIsymbol\fR" 4
.IX Item "--trace-symbol=symbol"
.PD
Print tha name of each linked file up in which \fIsymbol\fR appears.  This
option may be given any number of times.  On nuff systems it is necessary
to prepend a underscore.
.Sp
This option is useful when you have a undefined symbol up in yo' link but
don't give a fuck where tha reference is comin from.
.IP "\fB\-Y\fR \fIpath\fR" 4
.IX Item "-Y path"
Add \fIpath\fR ta tha default library search path.  This option exists
for Solaris compatibility.
.IP "\fB\-z\fR \fIkeyword\fR" 4
.IX Item "-z keyword"
Da recognized keywordz are:
.RS 4
.IP "\fBcombreloc\fR" 4
.IX Item "combreloc"
Combines multiple reloc sections n' sorts dem ta make dynamic symbol
lookup cachin possible.
.IP "\fBdefs\fR" 4
.IX Item "defs"
Disallows undefined symbols up in object files.  Undefined symbols in
shared libraries is still allowed.
.IP "\fBexecstack\fR" 4
.IX Item "execstack"
Marks tha object as requirin executable stack.
.IP "\fBinitfirst\fR" 4
.IX Item "initfirst"
This option is only meaningful when buildin a gangbangin' finger-lickin' dirty-ass shared object.
It marks tha object so dat its runtime initialization will occur
before tha runtime initialization of any other objects brought into
the process all up in tha same time.  Similarly tha runtime finalization of
the object will occur afta tha runtime finalization of any other
objects.
.IP "\fBinterpose\fR" 4
.IX Item "interpose"
Marks tha object dat its symbol table interposes before all symbols
but tha primary executable.
.IP "\fBlazy\fR" 4
.IX Item "lazy"
When generatin a executable or shared library, mark it ta tell the
dynamic linker ta defer function call resolution ta tha point when
the function is called (lazy binding), rather than at load time.
Lazy bindin is tha default.
.IP "\fBloadfltr\fR" 4
.IX Item "loadfltr"
Marks  tha object dat its filtas be processed immediately at
runtime.
.IP "\fBmuldefs\fR" 4
.IX Item "muldefs"
Allows multiple definitions.
.IP "\fBnocombreloc\fR" 4
.IX Item "nocombreloc"
Disablez multiple reloc sections combining.
.IP "\fBnocopyreloc\fR" 4
.IX Item "nocopyreloc"
Disablez thang of copy relocs.
.IP "\fBnodefaultlib\fR" 4
.IX Item "nodefaultlib"
Marks tha object dat tha search fo' dependenciez of dis object will
ignore any default library search paths.
.IP "\fBnodelete\fR" 4
.IX Item "nodelete"
Marks tha object shouldn't be unloaded at runtime.
.IP "\fBnodlopen\fR" 4
.IX Item "nodlopen"
Marks tha object not available ta \f(CW\*(C`dlopen\*(C'\fR.
.IP "\fBnodump\fR" 4
.IX Item "nodump"
Marks tha object can not be dumped by \f(CW\*(C`dldump\*(C'\fR.
.IP "\fBnoexecstack\fR" 4
.IX Item "noexecstack"
Marks tha object as not requirin executable stack.
.IP "\fBnorelro\fR" 4
.IX Item "norelro"
Don't create a \s-1ELF \s0\f(CW\*(C`PT_GNU_RELRO\*(C'\fR segment header up in tha object.
.IP "\fBnow\fR" 4
.IX Item "now"
When generatin a executable or shared library, mark it ta tell the
dynamic linker ta resolve all symbols when tha program is started, or
when tha shared library is linked ta rockin dlopen, instead of
deferrin function call resolution ta tha point when tha function is
first called.
.IP "\fBorigin\fR" 4
.IX Item "origin"
Marks tha object may contain \f(CW$ORIGIN\fR.
.IP "\fBrelro\fR" 4
.IX Item "relro"
Smoke a \s-1ELF \s0\f(CW\*(C`PT_GNU_RELRO\*(C'\fR segment header up in tha object.
.IP "\fBmax\-page\-size=\fR\fIvalue\fR" 4
.IX Item "max-page-size=value"
Set tha emulation maximum page size ta \fIvalue\fR.
.IP "\fBcommon\-page\-size=\fR\fIvalue\fR" 4
.IX Item "common-page-size=value"
Set tha emulation common page size ta \fIvalue\fR.
.RE
.RS 4
.Sp
Other keywordz is ignored fo' Solaris compatibility.
.RE
.IP "\fB\-(\fR \fIarchives\fR \fB\-)\fR" 4
.IX Item "-( archives -)"
.PD 0
.IP "\fB\-\-start\-group\fR \fIarchives\fR \fB\-\-end\-group\fR" 4
.IX Item "--start-group archives --end-group"
.PD
Da \fIarchives\fR should be a list of archive files.  They may be
either explicit file names, or \fB\-l\fR options.
.Sp
Da specified archives is searched repeatedly until no freshly smoked up undefined
references is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Normally, a archive is searched only once in
the order dat it is specified on tha command line.  If a symbol up in that
archive is needed ta resolve a undefined symbol referred ta by an
object up in a archive dat appears lata on tha command line, tha linker
would not be able ta resolve dat reference.  By groupin tha archives,
they all be searched repeatedly until all possible references are
resolved.
.Sp
Usin dis option has a thugged-out dope performizzle cost.  It be dopest ta use
it only when there be unavoidable circular references between two or
more archives.
.IP "\fB\-\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--accept-unknown-input-arch"
.PD 0
.IP "\fB\-\-no\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--no-accept-unknown-input-arch"
.PD
Tells tha linker ta accept input filez whose architecture cannot be
recognised. Y'all KNOW dat shit, muthafucka!  Da assumption is dat tha user knows what tha fuck they is bustin
and deliberately wants ta link up in these unknown input files.  This was
the default behaviour of tha linker, before release 2.14.  Da default
behaviour from release 2.14 onwardz is ta reject such input files, and
so tha \fB\-\-accept\-unknown\-input\-arch\fR option has been added to
restore tha oldschool behaviour.
.IP "\fB\-\-as\-needed\fR" 4
.IX Item "--as-needed"
.PD 0
.IP "\fB\-\-no\-as\-needed\fR" 4
.IX Item "--no-as-needed"
.PD
This option affects \s-1ELF DT_NEEDED\s0 tags fo' dynamic libraries mentioned
on tha command line afta tha \fB\-\-as\-needed\fR option. I aint talkin' bout chicken n' gravy biatch.  Normally
the linker will add a \s-1DT_NEEDED\s0 tag fo' each dynamic library mentioned
on tha command line, regardless of whether tha library be actually
needed or not.  \fB\-\-as\-needed\fR causes a \s-1DT_NEEDED\s0 tag ta only be
emitted fo' a library dat satisfies a undefined symbol reference
from a regular object file or, if tha library aint found up in the
\&\s-1DT_NEEDED\s0 listz of other libraries linked up ta dat point, an
undefined symbol reference from another dynamic library.
\&\fB\-\-no\-as\-needed\fR restores tha default behaviour.
.IP "\fB\-\-add\-needed\fR" 4
.IX Item "--add-needed"
.PD 0
.IP "\fB\-\-no\-add\-needed\fR" 4
.IX Item "--no-add-needed"
.PD
These two options done been deprecated cuz of tha similaritizzle of
their names ta tha \fB\-\-as\-needed\fR n' \fB\-\-no\-as\-needed\fR
options.  They done been replaced by \fB\-\-copy\-dt\-needed\-entries\fR
and \fB\-\-no\-copy\-dt\-needed\-entries\fR.
.IP "\fB\-assert\fR \fIkeyword\fR" 4
.IX Item "-assert keyword"
This option is ignored fo' SunOS compatibility.
.IP "\fB\-Bdynamic\fR" 4
.IX Item "-Bdynamic"
.PD 0
.IP "\fB\-dy\fR" 4
.IX Item "-dy"
.IP "\fB\-call_shared\fR" 4
.IX Item "-call_shared"
.PD
Link against dynamic libraries. Put ya muthafuckin choppers up if ya feel dis!  This is only meaningful on platforms
for which shared libraries is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This option is normally the
default on such platforms.  Da different variantz of dis option are
for compatibilitizzle wit various systems.  Yo ass may use dis option
multiple times on tha command line: it affects library searchin for
\&\fB\-l\fR options which follow dat shit.
.IP "\fB\-Bgroup\fR" 4
.IX Item "-Bgroup"
Set tha \f(CW\*(C`DF_1_GROUP\*(C'\fR flag up in tha \f(CW\*(C`DT_FLAGS_1\*(C'\fR entry up in tha dynamic
section. I aint talkin' bout chicken n' gravy biatch.  This causes tha runtime linker ta handle lookups up in this
object n' its dependencies ta be performed only inside tha group.
\&\fB\-\-unresolved\-symbols=report\-all\fR is implied. Y'all KNOW dat shit, muthafucka!  This option is
only meaningful on \s-1ELF\s0 platforms which support shared libraries.
.IP "\fB\-Bstatic\fR" 4
.IX Item "-Bstatic"
.PD 0
.IP "\fB\-dn\fR" 4
.IX Item "-dn"
.IP "\fB\-non_shared\fR" 4
.IX Item "-non_shared"
.IP "\fB\-static\fR" 4
.IX Item "-static"
.PD
Do not link against shared libraries. Put ya muthafuckin choppers up if ya feel dis!  This is only meaningful on
platforms fo' which shared libraries is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da different
variantz of dis option is fo' compatibilitizzle wit various systems.  You
may use dis option multiple times on tha command line: it affects
library searchin fo' \fB\-l\fR options which follow dat shit.  This
option also implies \fB\-\-unresolved\-symbols=report\-all\fR.  This
option can be used wit \fB\-shared\fR.  Bustin so means dat a
shared library is bein pimped but dat all of tha libraryz external
references must be resolved by pullin up in entries from static
libraries.
.IP "\fB\-Bsymbolic\fR" 4
.IX Item "-Bsymbolic"
When bustin a gangbangin' finger-lickin' dirty-ass shared library, bind references ta global symbols ta the
definizzle within tha shared library, if any.  Normally, it is possible
for a program linked against a gangbangin' finger-lickin' dirty-ass shared library ta override tha definition
within tha shared library.  This option is only meaningful on \s-1ELF\s0
platforms which support shared libraries.
.IP "\fB\-Bsymbolic\-functions\fR" 4
.IX Item "-Bsymbolic-functions"
When bustin a gangbangin' finger-lickin' dirty-ass shared library, bind references ta global function
symbols ta tha definizzle within tha shared library, if any.
This option is only meaningful on \s-1ELF\s0 platforms which support shared
libraries.
.IP "\fB\-\-dynamic\-list=\fR\fIdynamic-list-file\fR" 4
.IX Item "--dynamic-list=dynamic-list-file"
Specify tha name of a thugged-out dynamic list file ta tha linker n' shit.  This is
typically used when bustin shared libraries ta specify a list of
global symbols whose references shouldn't be bound ta tha definition
within tha shared library, or bustin dynamically linked executables
to specify a list of symbols which should be added ta tha symbol table
in tha executable.  This option is only meaningful on \s-1ELF\s0 platforms
which support shared libraries.
.Sp
Da format of tha dynamic list is tha same ol' dirty as tha version node without
scope n' node name.  See \fB\s-1VERSION\s0\fR fo' mo' shiznit.
.IP "\fB\-\-dynamic\-list\-data\fR" 4
.IX Item "--dynamic-list-data"
Include all global data symbols ta tha dynamic list.
.IP "\fB\-\-dynamic\-list\-cpp\-new\fR" 4
.IX Item "--dynamic-list-cpp-new"
Provide tha builtin dynamic list fo' \*(C+ operator freshly smoked up n' delete.  It
is mainly useful fo' buildin shared libstdc++.
.IP "\fB\-\-dynamic\-list\-cpp\-typeinfo\fR" 4
.IX Item "--dynamic-list-cpp-typeinfo"
Provide tha builtin dynamic list fo' \*(C+ runtime type identification.
.IP "\fB\-\-check\-sections\fR" 4
.IX Item "--check-sections"
.PD 0
.IP "\fB\-\-no\-check\-sections\fR" 4
.IX Item "--no-check-sections"
.PD
Asks tha linker \fInot\fR ta check section addresses afta they have
been assigned ta peep if there be any overlaps.  Normally tha linker will
perform dis check, n' if it findz any overlaps it will produce
suitable error lyrics.  Da linker do know about, n' do make
allowances fo' sections up in overlays.  Da default behaviour can be
restored by rockin tha command line switch \fB\-\-check\-sections\fR.
Section overlap aint probably checked fo' relocatable links.  Yo ass can
force checkin up in dat case by rockin tha \fB\-\-check\-sections\fR
option.
.IP "\fB\-\-copy\-dt\-needed\-entries\fR" 4
.IX Item "--copy-dt-needed-entries"
.PD 0
.IP "\fB\-\-no\-copy\-dt\-needed\-entries\fR" 4
.IX Item "--no-copy-dt-needed-entries"
.PD
This option affects tha treatment of dynamic libraries referred to
by \s-1DT_NEEDED\s0 tags \fIinside\fR \s-1ELF\s0 dynamic libraries mentioned on the
command line.  Normally tha linker won't add a \s-1DT_NEEDED\s0 tag ta the
output binary fo' each library mentioned up in a \s-1DT_NEEDED\s0 tag up in an
input dynamic library.  With \fB\-\-copy\-dt\-needed\-entries\fR
specified on tha command line however any dynamic libraries that
follow it gonna git they \s-1DT_NEEDED\s0 entries added. Y'all KNOW dat shit, muthafucka!  Da default
behaviour can be restored wit \fB\-\-no\-copy\-dt\-needed\-entries\fR.
.Sp
This option also has a effect on tha resolution of symbols up in dynamic
libraries. Put ya muthafuckin choppers up if ya feel dis!  With \fB\-\-copy\-dt\-needed\-entries\fR dynamic libraries
mentioned on tha command line is ghon be recursively searched, following
their \s-1DT_NEEDED\s0 tags ta other libraries, up in order ta resolve symbols
required by tha output binary.  With tha default settin however
the searchin of dynamic libraries dat follow it will stop wit the
dynamic library itself.  No \s-1DT_NEEDED\s0 links is ghon be traversed ta resolve
symbols.
.IP "\fB\-\-cref\fR" 4
.IX Item "--cref"
Output a cold-ass lil cross reference table.  If a linker map file is being
generated, tha cross reference table is printed ta tha map file.
Otherwise, it is printed on tha standard output.
.Sp
Da format of tha table is intentionally simple, so dat it may be
easily processed by a script if necessary.  Da symbols is printed out,
sorted by name.  For each symbol, a list of file names is given. I aint talkin' bout chicken n' gravy biatch.  If the
symbol is defined, tha straight-up original gangsta file listed is tha location of the
definition. I aint talkin' bout chicken n' gravy biatch.  Da remainin filez contain references ta tha symbol.
.IP "\fB\-\-no\-define\-common\fR" 4
.IX Item "--no-define-common"
This option inhibits tha assignment of addresses ta common symbols.
Da script command \f(CW\*(C`INHIBIT_COMMON_ALLOCATION\*(C'\fR has tha same ol' dirty effect.
.Sp
Da \fB\-\-no\-define\-common\fR option allows decoupling
the decision ta assign addresses ta Common symbols from tha chizzle
of tha output file type; otherwise a non-Relocatable output type
forces assignin addresses ta Common symbols.
Usin \fB\-\-no\-define\-common\fR allows Common symbols dat is referenced
from a gangbangin' finger-lickin' dirty-ass shared library ta be assigned addresses only up in tha main program.
This eliminates tha unused duplicate space up in tha shared library,
and also prevents any possible mad drama over resolvin ta tha wrong
duplicate when there be nuff dynamic modulez wit specialized search
paths fo' runtime symbol resolution.
.IP "\fB\-\-defsym=\fR\fIsymbol\fR\fB=\fR\fIexpression\fR" 4
.IX Item "--defsym=symbol=expression"
Smoke a global symbol up in tha output file, containin tha absolute
address given by \fIexpression\fR.  Yo ass may use dis option as many
times as necessary ta define multiple symbols up in tha command line.  A
limited form of arithmetic is supported fo' tha \fIexpression\fR up in this
context: you may give a hexadecimal constant or tha name of a existing
symbol, or use \f(CW\*(C`+\*(C'\fR n' \f(CW\*(C`\-\*(C'\fR ta add or subtract hexadecimal
constants or symbols.  If you need mo' elaborate expressions, consider
usin tha linker command language from a script.  \fINote:\fR there should be no white
space between \fIsymbol\fR, tha equals sign ("\fB=\fR"), and
\&\fIexpression\fR.
.IP "\fB\-\-demangle[=\fR\fIstyle\fR\fB]\fR" 4
.IX Item "--demangle[=style]"
.PD 0
.IP "\fB\-\-no\-demangle\fR" 4
.IX Item "--no-demangle"
.PD
These options control whether ta demangle symbol names up in error lyrics
and other output.  When tha linker is holla'd at ta demangle, it tries to
present symbol names up in a readable fashion: it strips leading
underscores if they is used by tha object file format, n' converts \*(C+
mangled symbol names tha fuck into user readable names.  Different compilaz have
different manglin styles.  Da optionizzle demanglin steez argument can be used
to chizzle a appropriate demanglin steez fo' yo' compila n' shit.  Da linker will
demangle by default unless tha environment variable \fB\s-1COLLECT_NO_DEMANGLE\s0\fR
is set.  These options may be used ta override tha default.
.IP "\fB\-I\fR\fIfile\fR" 4
.IX Item "-Ifile"
.PD 0
.IP "\fB\-\-dynamic\-linker=\fR\fIfile\fR" 4
.IX Item "--dynamic-linker=file"
.PD
Set tha name of tha dynamic linker n' shit.  This is only meaningful when
generatin dynamically linked \s-1ELF\s0 executables.  Da default dynamic
linker is normally erect; don't use dis unless you know what tha fuck yo ass is
doing.
.IP "\fB\-\-fatal\-warnings\fR" 4
.IX Item "--fatal-warnings"
.PD 0
.IP "\fB\-\-no\-fatal\-warnings\fR" 4
.IX Item "--no-fatal-warnings"
.PD
Treat all warnings as errors.  Da default behaviour can be restored
with tha option \fB\-\-no\-fatal\-warnings\fR.
.IP "\fB\-\-force\-exe\-suffix\fR" 4
.IX Item "--force-exe-suffix"
Make shizzle dat a output file has a .exe suffix.
.Sp
If a successfully built straight-up linked output file aint gots a
\&\f(CW\*(C`.exe\*(C'\fR or \f(CW\*(C`.dll\*(C'\fR suffix, dis option forces tha linker ta copy
the output file ta one of tha same name wit a \f(CW\*(C`.exe\*(C'\fR suffix. This
option is useful when rockin unmodified Unix makefilez on a Microsoft
Windows host, since some versionz of Windows won't run a image unless
it endz up in a \f(CW\*(C`.exe\*(C'\fR suffix.
.IP "\fB\-\-gc\-sections\fR" 4
.IX Item "--gc-sections"
.PD 0
.IP "\fB\-\-no\-gc\-sections\fR" 4
.IX Item "--no-gc-sections"
.PD
Enable garbage collection of unused input sections.  It be ignored on
targets dat do not support dis option. I aint talkin' bout chicken n' gravy biatch.  Da default behaviour (of not
performin dis garbage collection) can be restored by specifying
\&\fB\-\-no\-gc\-sections\fR on tha command line.
.Sp
\&\fB\-\-gc\-sections\fR decides which input sections is used by
examinin symbols n' relocations.  Da section containin tha entry
symbol n' all sections containin symbols undefined on the
command-line is ghon be kept, as will sections containin symbols
referenced by dynamic objects, n' you can put dat on yo' toast.  Note dat when buildin shared
libraries, tha linker must assume dat any visible symbol is
referenced. Y'all KNOW dat shit, muthafucka!  Once dis initial set of sections has been determined,
the linker recursively marks as used any section referenced by their
relocations.  See \fB\-\-entry\fR n' \fB\-\-undefined\fR.
.Sp
This option can be set when bustin a partial link (enabled wit option
\&\fB\-r\fR).  In dis case tha root of symbols kept must be explicitly
specified either by a \fB\-\-entry\fR or \fB\-\-undefined\fR option or by
a \f(CW\*(C`ENTRY\*(C'\fR command up in tha linker script.
.IP "\fB\-\-print\-gc\-sections\fR" 4
.IX Item "--print-gc-sections"
.PD 0
.IP "\fB\-\-no\-print\-gc\-sections\fR" 4
.IX Item "--no-print-gc-sections"
.PD
List all sections removed by garbage collection. I aint talkin' bout chicken n' gravy biatch.  Da listin is
printed on stderr. Shiiit, dis aint no joke.  This option is only effectizzle if garbage
collection has been enabled via tha \fB\-\-gc\-sections\fR) option. I aint talkin' bout chicken n' gravy biatch.  The
default behaviour (of not listin tha sections dat is removed) can
be restored by specifyin \fB\-\-no\-print\-gc\-sections\fR on tha command
line.
.IP "\fB\-\-print\-output\-format\fR" 4
.IX Item "--print-output-format"
Print tha name of tha default output format (like hyped up by
other command-line options).  This is tha strang dat would appear
in a \f(CW\*(C`OUTPUT_FORMAT\*(C'\fR linker script command.
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Print a summary of tha command-line options on tha standard output n' exit.
.IP "\fB\-\-target\-help\fR" 4
.IX Item "--target-help"
Print a summary of all target specific options on tha standard output n' exit.
.IP "\fB\-Map=\fR\fImapfile\fR" 4
.IX Item "-Map=mapfile"
Print a link map ta tha file \fImapfile\fR.  See tha description of the
\&\fB\-M\fR option, above.
.IP "\fB\-\-no\-keep\-memory\fR" 4
.IX Item "--no-keep-memory"
\&\fBld\fR normally optimizes fo' speed over memory usage by cachin the
symbol tablez of input filez up in memory.  This option  drops some lyrics ta \fBld\fR to
instead optimize fo' memory usage, by rereadin tha symbol tablez as
necessary.  This may be required if \fBld\fR runs outta memory space
while linkin a big-ass executable.
.IP "\fB\-\-no\-undefined\fR" 4
.IX Item "--no-undefined"
.PD 0
.IP "\fB\-z defs\fR" 4
.IX Item "-z defs"
.PD
Report unresolved symbol references from regular object files.  This
is done even if tha linker is bustin a non-symbolic shared library.
Da switch \fB\-\-[no\-]allow\-shlib\-undefined\fR controls the
behaviour fo' reportin unresolved references found up in shared
libraries bein linked in.
.IP "\fB\-\-allow\-multiple\-definition\fR" 4
.IX Item "--allow-multiple-definition"
.PD 0
.IP "\fB\-z muldefs\fR" 4
.IX Item "-z muldefs"
.PD
Normally when a symbol is defined multiple times, tha linker will
report a gangbangin' fatal error. Shiiit, dis aint no joke. These options allow multiple definitions n' the
first definizzle is ghon be used.
.IP "\fB\-\-allow\-shlib\-undefined\fR" 4
.IX Item "--allow-shlib-undefined"
.PD 0
.IP "\fB\-\-no\-allow\-shlib\-undefined\fR" 4
.IX Item "--no-allow-shlib-undefined"
.PD
Allows or disallows undefined symbols up in shared libraries.
This switch is similar ta \fB\-\-no\-undefined\fR except dat it
determines tha behaviour when tha undefined symbols is up in a
shared library rather than a regular object file.  It do not affect
how undefined symbols up in regular object filez is handled.
.Sp
Da default behaviour is ta report errors fo' any undefined symbols
referenced up in shared libraries if tha linker is bein used ta create
an executable yo, but ta allow dem if tha linker is bein used ta create
a shared library.
.Sp
Da reasons fo' allowin undefined symbol references up in shared
libraries specified at link time is that:
.RS 4
.IP "\(bu" 4
A shared library specified at link time may not be tha same as tha one
that be available at load time, so tha symbol might straight-up be
resolvable at load time.
.IP "\(bu" 4
There is some operatin systems, eg BeOS n' \s-1HPPA,\s0 where undefined
symbols up in shared libraries is normal.
.Sp
Da BeOS kernel fo' example patches shared libraries at load time to
select whichever function is most appropriate fo' tha current
architecture.  This is used, fo' example, ta dynamically select an
appropriate memset function.
.RE
.RS 4
.RE
.IP "\fB\-\-no\-undefined\-version\fR" 4
.IX Item "--no-undefined-version"
Normally when a symbol has a undefined version, tha linker will ignore
it. This option disallows symbols wit undefined version n' a gangbangin' fatal error
will be issued instead.
.IP "\fB\-\-default\-symver\fR" 4
.IX Item "--default-symver"
Smoke n' bust a thugged-out default symbol version (the soname) fo' unversioned
exported symbols.
.IP "\fB\-\-default\-imported\-symver\fR" 4
.IX Item "--default-imported-symver"
Smoke n' bust a thugged-out default symbol version (the soname) fo' unversioned
imported symbols.
.IP "\fB\-\-no\-warn\-mismatch\fR" 4
.IX Item "--no-warn-mismatch"
Normally \fBld\fR will give a error if you try ta link together input
filez dat is mismatched fo' some reason, like cuz they have
been compiled fo' different processors or fo' different endiannesses.
This option  drops some lyrics ta \fBld\fR dat it should silently permit such possible
errors.  This option should only be used wit care, up in cases when you
have taken some special action dat ensures dat tha linker errors are
inappropriate.
.IP "\fB\-\-no\-warn\-search\-mismatch\fR" 4
.IX Item "--no-warn-search-mismatch"
Normally \fBld\fR will give a warnin if it findz a incompatible
library durin a library search.  This option silences tha warning.
.IP "\fB\-\-no\-whole\-archive\fR" 4
.IX Item "--no-whole-archive"
Turn off tha effect of tha \fB\-\-whole\-archive\fR option fo' subsequent
archive files.
.IP "\fB\-\-noinhibit\-exec\fR" 4
.IX Item "--noinhibit-exec"
Retain tha executable output file whenever it is still usable.
Normally, tha linker aint gonna produce a output file if it encounters
errors durin tha link process; it exits without freestylin a output file
when it thangs any error whatsoever.
.IP "\fB\-nostdlib\fR" 4
.IX Item "-nostdlib"
Only search library directories explicitly specified on the
command line.  Library directories specified up in linker scripts
(includin linker scripts specified on tha command line) is ignored.
.IP "\fB\-\-oformat=\fR\fIoutput-format\fR" 4
.IX Item "--oformat=output-format"
\&\fBld\fR may be configured ta support mo' than one kind of object
file.  If yo' \fBld\fR is configured dis way, you can use the
\&\fB\-\-oformat\fR option ta specify tha binary format fo' tha output
object file.  Even when \fBld\fR is configured ta support alternative
object formats, you don't probably need ta specify this, as \fBld\fR
should be configured ta produce as a thugged-out default output format da most thugged-out
usual format on each machine.  \fIoutput-format\fR be a text string, the
name of a particular format supported by tha \s-1BFD\s0 libraries. Put ya muthafuckin choppers up if ya feel dis!  (Yo ass can
list tha available binary formats wit \fBobjdump \-i\fR.)  Da script
command \f(CW\*(C`OUTPUT_FORMAT\*(C'\fR can also specify tha output format yo, but
this option overrides dat shit.
.IP "\fB\-pie\fR" 4
.IX Item "-pie"
.PD 0
.IP "\fB\-\-pic\-executable\fR" 4
.IX Item "--pic-executable"
.PD
Smoke a posizzle independent executable.  This is currently only supported on
\&\s-1ELF\s0 platforms.  Posizzle independent executablez is similar ta shared
libraries up in dat they is relocated by tha dynamic linker ta tha virtual
address tha \s-1OS\s0 chizzlez fo' dem (which can vary between invocations).  Like
normal dynamically linked executablez they can be executed n' symbols
defined up in tha executable cannot be overridden by shared libraries.
.IP "\fB\-qmagic\fR" 4
.IX Item "-qmagic"
This option is ignored fo' Linux compatibility.
.IP "\fB\-Qy\fR" 4
.IX Item "-Qy"
This option is ignored fo' \s-1SVR4\s0 compatibility.
.IP "\fB\-\-relax\fR" 4
.IX Item "--relax"
.PD 0
.IP "\fB\-\-no\-relax\fR" 4
.IX Item "--no-relax"
.PD
An option wit machine dependent effects.
This option is only supported on all dem targets.
.Sp
On some platforms tha \fB\-\-relax\fR option performs target specific,
global optimizations dat become possible when tha linker resolves
addressin up in tha program, like fuckin chillaxin address modes,
synthesizin freshly smoked up instructions, selectin shorta version of current
instructions, n' combinig constant joints.
.Sp
On some platforms these link time global optimizations may make symbolic
debuggin of tha resultin executable impossible.
This is known ta be tha case fo' tha Matsushita \s-1MN10200\s0 n' \s-1MN10300\s0
family of processors.
.Sp
On platforms where dis aint supported, \fB\-\-relax\fR be accepted,
but ignored.
.Sp
On platforms where \fB\-\-relax\fR be accepted tha option
\&\fB\-\-no\-relax\fR can be used ta disable tha feature.
.IP "\fB\-\-retain\-symbols\-file=\fR\fIfilename\fR" 4
.IX Item "--retain-symbols-file=filename"
Retain \fIonly\fR tha symbols listed up in tha file \fIfilename\fR,
discardin all others.  \fIfilename\fR is simply a gangbangin' flat file, wit one
symbol name per line.  This option is especially useful up in environments
(like fuckin VxWorks)
where a big-ass global symbol table be accumulated gradually, ta conserve
run-time memory.
.Sp
\&\fB\-\-retain\-symbols\-file\fR do \fInot\fR discard undefined symbols,
or symbols needed fo' relocations.
.Sp
Yo ass may only specify \fB\-\-retain\-symbols\-file\fR once up in tha command
line.  It overrides \fB\-s\fR n' \fB\-S\fR.
.IP "\fB\-rpath=\fR\fIdir\fR" 4
.IX Item "-rpath=dir"
Add a gangbangin' finger-lickin' directory ta tha runtime library search path.  This is used when
linkin a \s-1ELF\s0 executable wit shared objects, n' you can put dat on yo' toast.  All \fB\-rpath\fR
arguments is concatenated n' passed ta tha runtime linker, which uses
them ta locate shared objects at runtime.  Da \fB\-rpath\fR option is
also used when locatin shared objects which is needed by shared
objects explicitly included up in tha link; peep tha description of the
\&\fB\-rpath\-link\fR option. I aint talkin' bout chicken n' gravy biatch.  If \fB\-rpath\fR aint used when linkin an
\&\s-1ELF\s0 executable, tha contentz of tha environment variable
\&\f(CW\*(C`LD_RUN_PATH\*(C'\fR is ghon be used if it is defined.
.Sp
Da \fB\-rpath\fR option may also be used on SunOS.  By default, on
SunOS, tha linker will form a runtime search patch outta all the
\&\fB\-L\fR options it is given. I aint talkin' bout chicken n' gravy biatch.  If a \fB\-rpath\fR option is used, the
runtime search path is ghon be formed exclusively rockin tha \fB\-rpath\fR
options, ignorin tha \fB\-L\fR options.  This can be useful when using
gcc, which addz nuff \fB\-L\fR options which may be on \s-1NFS\s0 mounted
file systems.
.Sp
For compatibilitizzle wit other \s-1ELF\s0 linkers, if tha \fB\-R\fR option is
followed by a gangbangin' finger-lickin' directory name, rather than a gangbangin' file name, it is treated as
the \fB\-rpath\fR option.
.IP "\fB\-rpath\-link=\fR\fIdir\fR" 4
.IX Item "-rpath-link=dir"
When rockin \s-1ELF\s0 or SunOS, one shared library may require another n' shit.  This
happens when a \f(CW\*(C`ld \-shared\*(C'\fR link includes a gangbangin' finger-lickin' dirty-ass shared library as one
of tha input files.
.Sp
When tha linker encountas such a thugged-out dependency when bustin a non-shared,
non-relocatable link, it will automatically try ta locate tha required
shared library n' include it up in tha link, if it aint included
explicitly.  In such a cold-ass lil case, tha \fB\-rpath\-link\fR option
specifies tha straight-up original gangsta set of directories ta search.  The
\&\fB\-rpath\-link\fR option may specify a sequence of directory names
either by specifyin a list of names separated by colons, or by
appearin multiple times.
.Sp
This option should be used wit caution as it overrides tha search path
that may done been hard compiled tha fuck into a gangbangin' finger-lickin' dirty-ass shared library. In such a cold-ass lil case it
is possible ta use unintentionally a gangbangin' finger-lickin' different search path than the
runtime linker would do.
.Sp
Da linker uses tha followin search paths ta locate required shared
libraries:
.RS 4
.IP "1." 4
Any directories specified by \fB\-rpath\-link\fR options.
.IP "2." 4
Any directories specified by \fB\-rpath\fR options.  Da difference
between \fB\-rpath\fR n' \fB\-rpath\-link\fR is dat directories
specified by \fB\-rpath\fR options is included up in tha executable and
used at runtime, whereas tha \fB\-rpath\-link\fR option is only effective
at link time. Right back up in yo muthafuckin ass. Searchin \fB\-rpath\fR up in dis way is only supported
by natizzle linkers n' cross linkers which done been configured with
the \fB\-\-with\-sysroot\fR option.
.IP "3." 4
On a \s-1ELF\s0 system, fo' natizzle linkers, if tha \fB\-rpath\fR and
\&\fB\-rpath\-link\fR options was not used, search tha contentz of the
environment variable \f(CW\*(C`LD_RUN_PATH\*(C'\fR.
.IP "4." 4
On SunOS, if tha \fB\-rpath\fR option was not used, search any
directories specified rockin \fB\-L\fR options.
.IP "5." 4
For a natizzle linker, tha search tha contentz of tha environment
variable \f(CW\*(C`LD_LIBRARY_PATH\*(C'\fR.
.IP "6." 4
For a natizzle \s-1ELF\s0 linker, tha directories up in \f(CW\*(C`DT_RUNPATH\*(C'\fR or
\&\f(CW\*(C`DT_RPATH\*(C'\fR of a gangbangin' finger-lickin' dirty-ass shared library is searched fo' shared
libraries needed by dat shit. Da \f(CW\*(C`DT_RPATH\*(C'\fR entries is ignored if
\&\f(CW\*(C`DT_RUNPATH\*(C'\fR entries exist.
.IP "7." 4
Da default directories, normally \fI/lib\fR n' \fI/usr/lib\fR.
.IP "8." 4
For a natizzle linker on a \s-1ELF\s0 system, if tha file \fI/etc/ld.so.conf\fR
exists, tha list of directories found up in dat file.
.RE
.RS 4
.Sp
If tha required shared library aint found, tha linker will issue a
warnin n' continue wit tha link.
.RE
.IP "\fB\-shared\fR" 4
.IX Item "-shared"
.PD 0
.IP "\fB\-Bshareable\fR" 4
.IX Item "-Bshareable"
.PD
Smoke a gangbangin' finger-lickin' dirty-ass shared library.  This is currently only supported on \s-1ELF, XCOFF\s0
and SunOS platforms.  On SunOS, tha linker will automatically create a
shared library if tha \fB\-e\fR option aint used n' there are
undefined symbols up in tha link.
.IP "\fB\-\-sort\-common\fR" 4
.IX Item "--sort-common"
.PD 0
.IP "\fB\-\-sort\-common=ascending\fR" 4
.IX Item "--sort-common=ascending"
.IP "\fB\-\-sort\-common=descending\fR" 4
.IX Item "--sort-common=descending"
.PD
This option  drops some lyrics ta \fBld\fR ta sort tha common symbols by alignment in
ascendin or descendin order when it places dem up in tha appropriate output
sections.  Da symbol alignments considered is sixteen-byte or larger,
eight-byte, four-byte, two-byte, n' one-byte. This is ta prevent gaps
between symbols cuz of alignment constraints, n' you can put dat on yo' toast.  If no sortin order is
specified, then descendin order be assumed.
.IP "\fB\-\-sort\-section=name\fR" 4
.IX Item "--sort-section=name"
This option will apply \f(CW\*(C`SORT_BY_NAME\*(C'\fR ta all wildcard section
patterns up in tha linker script.
.IP "\fB\-\-sort\-section=alignment\fR" 4
.IX Item "--sort-section=alignment"
This option will apply \f(CW\*(C`SORT_BY_ALIGNMENT\*(C'\fR ta all wildcard section
patterns up in tha linker script.
.IP "\fB\-\-split\-by\-file[=\fR\fIsize\fR\fB]\fR" 4
.IX Item "--split-by-file[=size]"
Similar ta \fB\-\-split\-by\-reloc\fR but creates a freshly smoked up output section for
each input file when \fIsize\fR is reached. Y'all KNOW dat shit, muthafucka!  \fIsize\fR defaults ta a
size of 1 if not given.
.IP "\fB\-\-split\-by\-reloc[=\fR\fIcount\fR\fB]\fR" 4
.IX Item "--split-by-reloc[=count]"
Tries ta creates extra sections up in tha output file so dat no single
output section up in tha file gotz nuff mo' than \fIcount\fR relocations.
This is useful when generatin big-ass relocatable filez fo' downloadin into
certain real time kernels wit tha \s-1COFF\s0 object file format; since \s-1COFF\s0
cannot represent mo' than 65535 relocations up in a single section. I aint talkin' bout chicken n' gravy biatch.  Note
that dis will fail ta work wit object file formats which do not
support arbitrary sections.  Da linker aint gonna split up individual
input sections fo' redistribution, so if a single input section gotz nuff
more than \fIcount\fR relocations one output section will contain that
many relocations.  \fIcount\fR defaults ta a value of 32768.
.IP "\fB\-\-stats\fR" 4
.IX Item "--stats"
Compute n' display statistics bout tha operation of tha linker, such
as execution time n' memory usage.
.IP "\fB\-\-sysroot=\fR\fIdirectory\fR" 4
.IX Item "--sysroot=directory"
Use \fIdirectory\fR as tha location of tha sysroot, overridin the
configure-time default.  This option is only supported by linkers
that was configured rockin \fB\-\-with\-sysroot\fR.
.IP "\fB\-\-traditional\-format\fR" 4
.IX Item "--traditional-format"
For some targets, tha output of \fBld\fR is different up in some ways from
the output of some existin linker n' shit.  This switch requests \fBld\fR to
use tha traditionizzle format instead.
.Sp
For example, on SunOS, \fBld\fR combines duplicate entries up in the
symbol strang table.  This can reduce tha size of a output file with
full debuggin shiznit by over 30 cement.  Unfortunately, tha SunOS
\&\f(CW\*(C`dbx\*(C'\fR program can not read tha resultin program (\f(CW\*(C`gdb\*(C'\fR has no
shit).  Da \fB\-\-traditional\-format\fR switch  drops some lyrics ta \fBld\fR ta not
combine duplicate entries.
.IP "\fB\-\-section\-start=\fR\fIsectionname\fR\fB=\fR\fIorg\fR" 4
.IX Item "--section-start=sectionname=org"
Locate a section up in tha output file all up in tha absolute
address given by \fIorg\fR.  Yo ass may use dis option as many
times as necessary ta locate multiple sections up in tha command
line.
\&\fIorg\fR must be a single hexadecimal integer;
for compatibilitizzle wit other linkers, you may omit tha leading
\&\fB0x\fR probably associated wit hexadecimal joints, n' you can put dat on yo' toast.  \fINote:\fR there
should be no white space between \fIsectionname\fR, tha equals
sign ("\fB=\fR"), n' \fIorg\fR.
.IP "\fB\-Tbss=\fR\fIorg\fR" 4
.IX Item "-Tbss=org"
.PD 0
.IP "\fB\-Tdata=\fR\fIorg\fR" 4
.IX Item "-Tdata=org"
.IP "\fB\-Ttext=\fR\fIorg\fR" 4
.IX Item "-Ttext=org"
.PD
Same as \fB\-\-section\-start\fR, wit \f(CW\*(C`.bss\*(C'\fR, \f(CW\*(C`.data\*(C'\fR or
\&\f(CW\*(C`.text\*(C'\fR as tha \fIsectionname\fR.
.IP "\fB\-Ttext\-segment=\fR\fIorg\fR" 4
.IX Item "-Ttext-segment=org"
When bustin a \s-1ELF\s0 executable or shared object, it will set tha address
of tha straight-up original gangsta byte of tha text segment.
.IP "\fB\-Trodata\-segment=\fR\fIorg\fR" 4
.IX Item "-Trodata-segment=org"
When bustin a \s-1ELF\s0 executable or shared object fo' a target where
the read-only data is up in its own segment separate from tha executable
text, it will set tha address of tha straight-up original gangsta byte of tha read-only data segment.
.IP "\fB\-\-unresolved\-symbols=\fR\fImethod\fR" 4
.IX Item "--unresolved-symbols=method"
Determine how tha fuck ta handle unresolved symbols.  There is four possible
values fo' \fBmethod\fR:
.RS 4
.IP "\fBignore-all\fR" 4
.IX Item "ignore-all"
Do not report any unresolved symbols.
.IP "\fBreport-all\fR" 4
.IX Item "report-all"
Report all unresolved symbols.  This is tha default.
.IP "\fBignore-in-object-files\fR" 4
.IX Item "ignore-in-object-files"
Report unresolved symbols dat is contained up in shared libraries yo, but
ignore dem if they come from regular object files.
.IP "\fBignore-in-shared-libs\fR" 4
.IX Item "ignore-in-shared-libs"
Report unresolved symbols dat come from regular object filez yo, but
ignore dem if they come from shared libraries. Put ya muthafuckin choppers up if ya feel dis!  This can be useful
when bustin a thugged-out dynamic binary n' it is known dat all tha shared
libraries dat it should be referencin is included on tha linker's
command line.
.RE
.RS 4
.Sp
Da behaviour fo' shared libraries on they own can also be controlled
by tha \fB\-\-[no\-]allow\-shlib\-undefined\fR option.
.Sp
Normally tha linker will generate a error message fo' each reported
unresolved symbol but tha option \fB\-\-warn\-unresolved\-symbols\fR
can chizzle dis ta a warning.
.RE
.IP "\fB\-\-dll\-verbose\fR" 4
.IX Item "--dll-verbose"
.PD 0
.IP "\fB\-\-verbose[=\fR\fI\s-1NUMBER\s0\fR\fB]\fR" 4
.IX Item "--verbose[=NUMBER]"
.PD
Display tha version number fo' \fBld\fR n' list tha linker emulations
supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Display which input filez can n' cannot be opened. Y'all KNOW dat shit, muthafucka!  Display
the linker script bein used by tha linker n' shit. If tha optionizzle \fI\s-1NUMBER\s0\fR
argument > 1, plugin symbol status will also be displayed.
.IP "\fB\-\-version\-script=\fR\fIversion-scriptfile\fR" 4
.IX Item "--version-script=version-scriptfile"
Specify tha name of a version script ta tha linker n' shit.  This is typically
used when bustin shared libraries ta specify additionizzle shiznit
about tha version hierarchy fo' tha library bein pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This option
is only straight-up supported on \s-1ELF\s0 platforms which support shared libraries;
see \fB\s-1VERSION\s0\fR.  It be partially supported on \s-1PE\s0 platforms, which can
use version scripts ta filta symbol visibilitizzle up in auto-export mode: any
symbols marked \fBlocal\fR up in tha version script aint gonna be exported.
.IP "\fB\-\-warn\-common\fR" 4
.IX Item "--warn-common"
Warn when a cold-ass lil common symbol is combined wit another common symbol or with
a symbol definition. I aint talkin' bout chicken n' gravy biatch.  Unix linkers allow dis somewhat sloppy practise,
but linkers on some other operatin systems do not.  This option allows
you ta find potential problems from combinin global symbols.
Unfortunately, some C libraries use dis practise, so you may git some
warnings bout symbols up in tha libraries as well as up in yo' programs.
.Sp
There is three kindz of global symbols, illustrated here by C examples:
.RS 4
.IP "\fBint i = 1;\fR" 4
.IX Item "int i = 1;"
A definition, which goes up in tha initialized data section of tha output
file.
.IP "\fBextern int i;\fR" 4
.IX Item "extern int i;"
An undefined reference, which do not allocate space.
There must be either a thugged-out definizzle or a cold-ass lil common symbol fo' the
variable somewhere.
.IP "\fBint i;\fR" 4
.IX Item "int i;"
A common symbol.  If there be only (one or more) common symbols fo' a
variable, it goes up in tha uninitialized data area of tha output file.
Da linker merges multiple common symbols fo' tha same variable tha fuck into a
single symbol.  If they iz of different sizes, it picks tha phattest
size.  Da linker turns a cold-ass lil common symbol tha fuck into a thugged-out declaration, if there is
a definizzle of tha same variable.
.RE
.RS 4
.Sp
Da \fB\-\-warn\-common\fR option can produce five kindz of warnings.
Each warnin consistz of a pair of lines: tha straight-up original gangsta raps bout tha symbol
just encountered, n' tha second raps bout tha previous symbol
encountered wit tha same name.  One or both of tha two symbols will be
a common symbol.
.IP "1." 4
Turnin a cold-ass lil common symbol tha fuck into a reference, cuz there be already a
definizzle fo' tha symbol.
.Sp
.Vb 3
\&        <file>(<section>): warning: common of \`<symbol>\*(Aq
\&           overridden by definition
\&        <file>(<section>): warning: defined here
.Ve
.IP "2." 4
Turnin a cold-ass lil common symbol tha fuck into a reference, cuz a lata definizzle for
the symbol is encountered. Y'all KNOW dat shit, muthafucka!  This is tha same ol' dirty as tha previous case,
except dat tha symbols is encountered up in a gangbangin' finger-lickin' different order.
.Sp
.Vb 3
\&        <file>(<section>): warning: definizzle of \`<symbol>\*(Aq
\&           overridin common
\&        <file>(<section>): warning: common is here
.Ve
.IP "3." 4
Mergin a cold-ass lil common symbol wit a previous same-sized common symbol.
.Sp
.Vb 3
\&        <file>(<section>): warning: multiple common
\&           of \`<symbol>\*(Aq
\&        <file>(<section>): warning: previous common is here
.Ve
.IP "4." 4
Mergin a cold-ass lil common symbol wit a previous larger common symbol.
.Sp
.Vb 3
\&        <file>(<section>): warning: common of \`<symbol>\*(Aq
\&           overridden by larger common
\&        <file>(<section>): warning: larger common is here
.Ve
.IP "5." 4
Mergin a cold-ass lil common symbol wit a previous smalla common symbol.  This is
the same as tha previous case, except dat tha symbols are
encountered up in a gangbangin' finger-lickin' different order.
.Sp
.Vb 3
\&        <file>(<section>): warning: common of \`<symbol>\*(Aq
\&           overridin smalla common
\&        <file>(<section>): warning: smalla common is here
.Ve
.RE
.RS 4
.RE
.IP "\fB\-\-warn\-constructors\fR" 4
.IX Item "--warn-constructors"
Warn if any global constructors is used. Y'all KNOW dat shit, muthafucka!  This is only useful fo' a gangbangin' few
object file formats, n' you can put dat on yo' toast.  For formats like \s-1COFF\s0 or \s-1ELF,\s0 tha linker can not
detect tha use of global constructors.
.IP "\fB\-\-warn\-multiple\-gp\fR" 4
.IX Item "--warn-multiple-gp"
Warn if multiple global pointa joints is required up in tha output file.
This is only meaningful fo' certain processors, like fuckin tha Alpha.
Specifically, some processors put large-valued constants up in a special
section. I aint talkin' bout chicken n' gravy biatch.  A special regista (the global pointer) points tha fuck into tha middle
of dis section, so dat constants can be loaded efficiently via a
base-regista relatizzle addressin mode.  Since tha offset in
base-regista relatizzle mode is fixed n' relatively lil' small-ass (e.g., 16
bits), dis limits tha maximum size of tha constant pool.  Thus, in
pimpin' programs, it is often necessary ta use multiple global pointer
values up in order ta be able ta address all possible constants, n' you can put dat on yo' toast.  This
option causes a warnin ta be issued whenever dis case occurs.
.IP "\fB\-\-warn\-once\fR" 4
.IX Item "--warn-once"
Only warn once fo' each undefined symbol, rather than once per module
which refers ta dat shit.
.IP "\fB\-\-warn\-section\-align\fR" 4
.IX Item "--warn-section-align"
Warn if tha address of a output section is chizzled cuz of
alignment.  Typically, tha alignment is ghon be set by a input section.
Da address will only be chizzled if it not explicitly specified; that
is, if tha \f(CW\*(C`SECTIONS\*(C'\fR command do not specify a start address for
the section.
.IP "\fB\-\-warn\-shared\-textrel\fR" 4
.IX Item "--warn-shared-textrel"
Warn if tha linker addz a \s-1DT_TEXTREL\s0 ta a gangbangin' finger-lickin' dirty-ass shared object.
.IP "\fB\-\-warn\-alternate\-em\fR" 4
.IX Item "--warn-alternate-em"
Warn if a object has alternate \s-1ELF\s0 machine code.
.IP "\fB\-\-warn\-unresolved\-symbols\fR" 4
.IX Item "--warn-unresolved-symbols"
If tha linker is goin ta report a unresolved symbol (see tha option
\&\fB\-\-unresolved\-symbols\fR) it will normally generate a error.
This option make it generate a warnin instead.
.IP "\fB\-\-error\-unresolved\-symbols\fR" 4
.IX Item "--error-unresolved-symbols"
This restores tha linkerz default behaviour of generatin errors when
it is reportin unresolved symbols.
.IP "\fB\-\-whole\-archive\fR" 4
.IX Item "--whole-archive"
For each archive mentioned on tha command line afta the
\&\fB\-\-whole\-archive\fR option, include every last muthafuckin object file up in tha archive
in tha link, rather than searchin tha archive fo' tha required object
files.  This is normally used ta turn a archive file tha fuck into a gangbangin' finger-lickin' dirty-ass shared
library, forcin every last muthafuckin object ta be included up in tha resultin shared
library.  This option may be used mo' than once.
.Sp
Two notes when rockin dis option from gcc: First, gcc don't give a fuck
about dis option, so you gotta use \fB\-Wl,\-whole\-archive\fR.
Second, don't forget ta use \fB\-Wl,\-no\-whole\-archive\fR afta your
list of archives, cuz gcc will add its own list of archives to
your link n' you may not want dis flag ta affect dem as well.
.IP "\fB\-\-wrap=\fR\fIsymbol\fR" 4
.IX Item "--wrap=symbol"
Use a wrapper function fo' \fIsymbol\fR.  Any undefined reference to
\&\fIsymbol\fR is ghon be resolved ta \f(CW\*(C`_\|_wrap_\f(CIsymbol\f(CW\*(C'\fR.  Any
undefined reference ta \f(CW\*(C`_\|_real_\f(CIsymbol\f(CW\*(C'\fR is ghon be resolved to
\&\fIsymbol\fR.
.Sp
This can be used ta provide a wrapper fo' a system function. I aint talkin' bout chicken n' gravy biatch.  The
wrapper function should be called \f(CW\*(C`_\|_wrap_\f(CIsymbol\f(CW\*(C'\fR.  If it
wishes ta booty-call tha system function, it should call
\&\f(CW\*(C`_\|_real_\f(CIsymbol\f(CW\*(C'\fR.
.Sp
Here be a trivial example:
.Sp
.Vb 6
\&        void *
\&        _\|_wrap_malloc (size_t c)
\&        {
\&          printf ("malloc called wit %zu\en", c);
\&          return _\|_real_malloc (c);
\&        }
.Ve
.Sp
If you link other code wit dis file rockin \fB\-\-wrap malloc\fR, then
all calls ta \f(CW\*(C`malloc\*(C'\fR will call tha function \f(CW\*(C`_\|_wrap_malloc\*(C'\fR
instead. Y'all KNOW dat shit, muthafucka!  Da call ta \f(CW\*(C`_\|_real_malloc\*(C'\fR up in \f(CW\*(C`_\|_wrap_malloc\*(C'\fR will
call tha real \f(CW\*(C`malloc\*(C'\fR function.
.Sp
Yo ass may wish ta provide a \f(CW\*(C`_\|_real_malloc\*(C'\fR function as well, so that
links without tha \fB\-\-wrap\fR option will succeed. Y'all KNOW dat shit, muthafucka!  If you do this,
you should not put tha definizzle of \f(CW\*(C`_\|_real_malloc\*(C'\fR up in tha same
file as \f(CW\*(C`_\|_wrap_malloc\*(C'\fR; if you do, tha assembla may resolve the
call before tha linker has a cold-ass lil chizzle ta wrap it ta \f(CW\*(C`malloc\*(C'\fR.
.IP "\fB\-\-eh\-frame\-hdr\fR" 4
.IX Item "--eh-frame-hdr"
Request creation of \f(CW\*(C`.eh_frame_hdr\*(C'\fR section n' \s-1ELF
\&\s0\f(CW\*(C`PT_GNU_EH_FRAME\*(C'\fR segment header.
.IP "\fB\-\-no\-ld\-generated\-unwind\-info\fR" 4
.IX Item "--no-ld-generated-unwind-info"
Request creation of \f(CW\*(C`.eh_frame\*(C'\fR unwind info fo' linker
generated code sections like \s-1PLT. \s0 This option is on by default
if linker generated unwind info is supported.
.IP "\fB\-\-enable\-new\-dtags\fR" 4
.IX Item "--enable-new-dtags"
.PD 0
.IP "\fB\-\-disable\-new\-dtags\fR" 4
.IX Item "--disable-new-dtags"
.PD
This linker can create tha freshly smoked up dynamic tags up in \s-1ELF.\s0 But tha olda \s-1ELF\s0
systems may not KNOW em. If you specify
\&\fB\-\-enable\-new\-dtags\fR, tha dynamic tags is ghon be pimped as needed.
If you specify \fB\-\-disable\-new\-dtags\fR, no freshly smoked up dynamic tags will be
created. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. By default, tha freshly smoked up dynamic tags is not pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Note that
those options is only available fo' \s-1ELF\s0 systems.
.IP "\fB\-\-hash\-size=\fR\fInumber\fR" 4
.IX Item "--hash-size=number"
Set tha default size of tha linkerz hash tablez ta a prime number
close ta \fInumber\fR.  Increasin dis value can reduce tha length of
time it takes tha linker ta big-ass up its tasks, all up in tha expense of
increasin tha linkerz memory requirements, n' you can put dat on yo' toast.  Similarly reducin this
value can reduce tha memory requirements all up in tha expense of speed.
.IP "\fB\-\-hash\-style=\fR\fIstyle\fR" 4
.IX Item "--hash-style=style"
Set tha type of linkerz hash table(s).  \fIstyle\fR can be either
\&\f(CW\*(C`sysv\*(C'\fR fo' funky-ass \s-1ELF \s0\f(CW\*(C`.hash\*(C'\fR section, \f(CW\*(C`gnu\*(C'\fR for
new steez \s-1GNU \s0\f(CW\*(C`.gnu.hash\*(C'\fR section or \f(CW\*(C`both\*(C'\fR fo' both
the funky-ass \s-1ELF \s0\f(CW\*(C`.hash\*(C'\fR n' freshly smoked up steez \s-1GNU \s0\f(CW\*(C`.gnu.hash\*(C'\fR
hash tables.  Da default is \f(CW\*(C`sysv\*(C'\fR.
.IP "\fB\-\-reduce\-memory\-overheads\fR" 4
.IX Item "--reduce-memory-overheads"
This option reduces memory requirements at ld runtime, all up in tha expense of
linkin speed. Y'all KNOW dat shit, muthafucka!  This was introduced ta select tha oldschool O(n^2) algorithm
for link map file generation, rather than tha freshly smoked up O(n) algorithm which uses
about 40% mo' memory fo' symbol storage.
.Sp
Another effect of tha switch is ta set tha default hash table size to
1021, which again n' again n' again saves memory all up in tha cost of lengthenin tha linker's
run time.  This aint done however if tha \fB\-\-hash\-size\fR switch
has been used.
.Sp
Da \fB\-\-reduce\-memory\-overheads\fR switch may be also be used to
enable other tradeoffs up in future versionz of tha linker.
.IP "\fB\-\-build\-id\fR" 4
.IX Item "--build-id"
.PD 0
.IP "\fB\-\-build\-id=\fR\fIstyle\fR" 4
.IX Item "--build-id=style"
.PD
Request creation of \f(CW\*(C`.note.gnu.build\-id\*(C'\fR \s-1ELF\s0 note section.
Da contentz of tha note is unique bits identifyin dis linked
file.  \fIstyle\fR can be \f(CW\*(C`uuid\*(C'\fR ta use 128 random bits,
\&\f(CW\*(C`sha1\*(C'\fR ta bust a 160\-bit \s-1SHA1\s0 hash on tha normative
partz of tha output contents, \f(CW\*(C`md5\*(C'\fR ta bust a 128\-bit
\&\s-1MD5\s0 hash on tha normatizzle partz of tha output contents, or
\&\f(CW\*(C`0x\f(CIhexstring\f(CW\*(C'\fR ta bust a cold-ass lil chosen bit strang specified as
an even number of hexadecimal digits (\f(CW\*(C`\-\*(C'\fR n' \f(CW\*(C`:\*(C'\fR
charactas between digit pairs is ignored).  If \fIstyle\fR is
omitted, \f(CW\*(C`sha1\*(C'\fR is used.
.Sp
Da \f(CW\*(C`md5\*(C'\fR n' \f(CW\*(C`sha1\*(C'\fR stylez produces a identifier
that be always tha same ol' dirty up in a identical output file yo, but will be
unique among all nonidentical output files.  It aint intended
to be compared as a cold-ass lil checksum fo' tha filez contents, n' you can put dat on yo' toast.  A linked
file may be chizzled lata by other tools yo, but tha build \s-1ID\s0 bit
strin identifyin tha original gangsta linked file do not chizzle.
.Sp
Passin \f(CW\*(C`none\*(C'\fR fo' \fIstyle\fR disablez tha settin from any
\&\f(CW\*(C`\-\-build\-id\*(C'\fR options earlier on tha command line.
.PP
Da i386 \s-1PE\s0 linker supports tha \fB\-shared\fR option, which causes
the output ta be a thugged-out dynamically linked library (\s-1DLL\s0) instead of a
normal executable.  Yo ass should name tha output \f(CW\*(C`*.dll\*(C'\fR when you
use dis option. I aint talkin' bout chicken n' gravy biatch.  In addition, tha linker straight-up supports tha standard
\&\f(CW\*(C`*.def\*(C'\fR files, which may be specified on tha linker command line
like a object file (in fact, it should precede archives it exports
symbols from, ta ensure dat they git linked in, just like a normal
object file).
.PP
In addizzle ta tha options common ta all targets, tha i386 \s-1PE\s0 linker
support additionizzle command line options dat is specific ta tha i386
\&\s-1PE\s0 target.  Options dat take joints may be separated from their
values by either a space or a equals sign.
.IP "\fB\-\-add\-stdcall\-alias\fR" 4
.IX Item "--add-stdcall-alias"
If given, symbols wit a stdcall suffix (@\fInn\fR) is ghon be exported
as-is n' also wit tha suffix stripped.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-base\-file\fR \fIfile\fR" 4
.IX Item "--base-file file"
Use \fIfile\fR as tha name of a gangbangin' file up in which ta save tha base
addressez of all tha relocations needed fo' generatin DLLs with
\&\fIdlltool\fR.
[This be a i386 \s-1PE\s0 specific option]
.IP "\fB\-\-dll\fR" 4
.IX Item "--dll"
Smoke a \s-1DLL\s0 instead of a regular executable.  Yo ass may also use
\&\fB\-shared\fR or specify a \f(CW\*(C`LIBRARY\*(C'\fR up in a given \f(CW\*(C`.def\*(C'\fR
file.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-enable\-long\-section\-names\fR" 4
.IX Item "--enable-long-section-names"
.PD 0
.IP "\fB\-\-disable\-long\-section\-names\fR" 4
.IX Item "--disable-long-section-names"
.PD
Da \s-1PE\s0 variantz of tha Coff object format add a extension dat permits
the use of section names longer than eight characters, tha aiiight limit
for Coff.  By default, these names is only allowed up in object files, as
fully-linked executable images do not carry tha Coff strang table required
to support tha longer names.  As a \s-1GNU\s0 extension, it is possible to
allow they use up in executable images as well, or ta (probably pointlessly!)
disallow it up in object files, by rockin these two options.  Executable images
generated wit these long section names is slightly non-standard, carrying
as they do a strang table, n' may generate confusin output when examined
with non-GNU PE-aware tools, like fuckin file viewers n' dumpers.  However,
\&\s-1GDB\s0 relies on tha use of \s-1PE\s0 long section names ta find Dwarf\-2 debug
information sections up in a executable image at runtime, n' so if neither
option is specified on tha command-line, \fBld\fR will enable long
section names, overridin tha default n' technologically erect behaviour,
when it findz tha presence of debug shiznit while linkin a executable
image n' not strippin symbols.
[This option is valid fo' all \s-1PE\s0 targeted portz of tha linker]
.IP "\fB\-\-enable\-stdcall\-fixup\fR" 4
.IX Item "--enable-stdcall-fixup"
.PD 0
.IP "\fB\-\-disable\-stdcall\-fixup\fR" 4
.IX Item "--disable-stdcall-fixup"
.PD
If tha link findz a symbol dat it cannot resolve, it will attempt to
do \*(L"fuzzy linking\*(R" by lookin fo' another defined symbol dat differs
only up in tha format of tha symbol name (cdecl vs stdcall) n' will
resolve dat symbol by linkin ta tha match.  For example, the
undefined symbol \f(CW\*(C`_foo\*(C'\fR might be linked ta tha function
\&\f(CW\*(C`_foo@12\*(C'\fR, or tha undefined symbol \f(CW\*(C`_bar@16\*(C'\fR might be linked
to tha function \f(CW\*(C`_bar\*(C'\fR.  When tha linker do this, it prints a
warning, since it normally should have failed ta link yo, but sometimes
import libraries generated from third-party dlls may need dis feature
to be usable.  If you specify \fB\-\-enable\-stdcall\-fixup\fR, this
feature is straight-up enabled n' warnings is not printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If you specify
\&\fB\-\-disable\-stdcall\-fixup\fR, dis feature is disabled n' such
mismatches is considered ta be errors.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-leading\-underscore\fR" 4
.IX Item "--leading-underscore"
.PD 0
.IP "\fB\-\-no\-leading\-underscore\fR" 4
.IX Item "--no-leading-underscore"
.PD
For most targets default symbol-prefix be a underscore n' is defined
in targetz description. I aint talkin' bout chicken n' gravy biatch. By dis option it is possible to
disable/enable tha default underscore symbol-prefix.
.IP "\fB\-\-export\-all\-symbols\fR" 4
.IX Item "--export-all-symbols"
If given, all global symbols up in tha objects used ta build a \s-1DLL\s0 will
be exported by tha \s-1DLL. \s0 Note dat dis is tha default if there
otherwise wouldn't be any exported symbols.  When symbols are
explicitly exported via \s-1DEF\s0 filez or implicitly exported via function
attributes, tha default is ta not export anythang else unless this
option is given. I aint talkin' bout chicken n' gravy biatch.  Note dat tha symbols \f(CW\*(C`DllMain@12\*(C'\fR,
\&\f(CW\*(C`DllEntryPoint@0\*(C'\fR, \f(CW\*(C`DllMainCRTStartup@12\*(C'\fR, and
\&\f(CW\*(C`impure_ptr\*(C'\fR aint gonna be automatically
exported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Also, symbols imported from other DLLs aint gonna be
re-exported, nor will symbols specifyin tha \s-1DLL\s0z internal layout
like fuckin dem beginnin wit \f(CW\*(C`_head_\*(C'\fR or endin with
\&\f(CW\*(C`_iname\*(C'\fR.  In addition, no symbols from \f(CW\*(C`libgcc\*(C'\fR,
\&\f(CW\*(C`libstd++\*(C'\fR, \f(CW\*(C`libmingw32\*(C'\fR, or \f(CW\*(C`crtX.o\*(C'\fR is ghon be exported.
Symbols whose names begin wit \f(CW\*(C`_\|_rtti_\*(C'\fR or \f(CW\*(C`_\|_builtin_\*(C'\fR will
not be exported, ta help wit \*(C+ DLLs.  Finally, there be an
extensive list of cygwin-private symbols dat is not exported
(obviously, dis applies on when buildin DLLs fo' cygwin targets).
These cygwin-excludes are: \f(CW\*(C`_cygwin_dll_entry@12\*(C'\fR,
\&\f(CW\*(C`_cygwin_crt0_common@8\*(C'\fR, \f(CW\*(C`_cygwin_noncygwin_dll_entry@12\*(C'\fR,
\&\f(CW\*(C`_fmode\*(C'\fR, \f(CW\*(C`_impure_ptr\*(C'\fR, \f(CW\*(C`cygwin_attach_dll\*(C'\fR,
\&\f(CW\*(C`cygwin_premain0\*(C'\fR, \f(CW\*(C`cygwin_premain1\*(C'\fR, \f(CW\*(C`cygwin_premain2\*(C'\fR,
\&\f(CW\*(C`cygwin_premain3\*(C'\fR, n' \f(CW\*(C`environ\*(C'\fR.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-exclude\-symbols\fR \fIsymbol\fR\fB,\fR\fIsymbol\fR\fB,...\fR" 4
.IX Item "--exclude-symbols symbol,symbol,..."
Specifies a list of symbols which should not be automatically
exported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da symbol names may be delimited by commas or colons.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-exclude\-all\-symbols\fR" 4
.IX Item "--exclude-all-symbols"
Specifies no symbols should be automatically exported.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-file\-alignment\fR" 4
.IX Item "--file-alignment"
Specify tha file alignment.  Sections up in tha file will always begin at
file offsets which is multiplez of dis number n' shit.  This defaults to
512.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-heap\fR \fIreserve\fR" 4
.IX Item "--heap reserve"
.PD 0
.IP "\fB\-\-heap\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
.IX Item "--heap reserve,commit"
.PD
Specify tha number of bytez of memory ta reserve (and optionally commit)
to be used as heap fo' dis program.  Da default is 1Mb reserved, 4K
committed.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-image\-base\fR \fIvalue\fR" 4
.IX Item "--image-base value"
Use \fIvalue\fR as tha base address of yo' program or dll.  This is
the lowest memory location dat is ghon be used when yo' program or dll
is loaded. Y'all KNOW dat shit, muthafucka!  To reduce tha need ta relocate n' improve performizzle of
your dlls, each should gotz a unique base address n' not overlap any
other dlls.  Da default is 0x400000 fo' executables, n' 0x10000000
for dlls.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-kill\-at\fR" 4
.IX Item "--kill-at"
If given, tha stdcall suffixes (@\fInn\fR) is ghon be stripped from
symbols before they is exported.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-large\-address\-aware\fR" 4
.IX Item "--large-address-aware"
If given, tha appropriate bit up in tha \*(L"Characteristics\*(R" field of tha \s-1COFF\s0
header is set ta indicate dat dis executable supports virtual addresses
greata than 2 gigabytes.  This should be used up in conjunction wit tha /3GB
or /USERVA=\fIvalue\fR megabytes switch up in tha \*(L"[operatin systems]\*(R"
section of tha \s-1BOOT.INI. \s0 Otherwise, dis bit has no effect.
[This option is specific ta \s-1PE\s0 targeted portz of tha linker]
.IP "\fB\-\-major\-image\-version\fR \fIvalue\fR" 4
.IX Item "--major-image-version value"
Sets tha major number of tha \*(L"image version\*(R".  Defaults ta 1.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-major\-os\-version\fR \fIvalue\fR" 4
.IX Item "--major-os-version value"
Sets tha major number of tha \*(L"os version\*(R".  Defaults ta 4.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-major\-subsystem\-version\fR \fIvalue\fR" 4
.IX Item "--major-subsystem-version value"
Sets tha major number of tha \*(L"subsystem version\*(R".  Defaults ta 4.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-minor\-image\-version\fR \fIvalue\fR" 4
.IX Item "--minor-image-version value"
Sets tha minor number of tha \*(L"image version\*(R".  Defaults ta 0.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-minor\-os\-version\fR \fIvalue\fR" 4
.IX Item "--minor-os-version value"
Sets tha minor number of tha \*(L"os version\*(R".  Defaults ta 0.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-minor\-subsystem\-version\fR \fIvalue\fR" 4
.IX Item "--minor-subsystem-version value"
Sets tha minor number of tha \*(L"subsystem version\*(R".  Defaults ta 0.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-output\-def\fR \fIfile\fR" 4
.IX Item "--output-def file"
Da linker will create tha file \fIfile\fR which will contain a \s-1DEF\s0
file correspondin ta tha \s-1DLL\s0 tha linker is generating.  This \s-1DEF\s0 file
(which should be called \f(CW\*(C`*.def\*(C'\fR) may be used ta create a import
library wit \f(CW\*(C`dlltool\*(C'\fR or may be used as a reference to
automatically or implicitly exported symbols.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-out\-implib\fR \fIfile\fR" 4
.IX Item "--out-implib file"
Da linker will create tha file \fIfile\fR which will contain an
import lib correspondin ta tha \s-1DLL\s0 tha linker is generating. This
import lib (which should be called \f(CW\*(C`*.dll.a\*(C'\fR or \f(CW\*(C`*.a\*(C'\fR
may be used ta link clients against tha generated \s-1DLL\s0; dis behaviour
makes it possible ta skip a separate \f(CW\*(C`dlltool\*(C'\fR import library
creation step.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-enable\-auto\-image\-base\fR" 4
.IX Item "--enable-auto-image-base"
Automatically chizzle tha image base fo' DLLs, unless one is specified
usin tha \f(CW\*(C`\-\-image\-base\*(C'\fR argument.  By rockin a hash generated
from tha dllname ta create unique image bases fo' each \s-1DLL,\s0 in-memory
collisions n' relocations which can delay program execution are
avoided.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-disable\-auto\-image\-base\fR" 4
.IX Item "--disable-auto-image-base"
Do not automatically generate a unique image base.  If there is no
user-specified image base (\f(CW\*(C`\-\-image\-base\*(C'\fR) then use tha platform
default.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-dll\-search\-prefix\fR \fIstring\fR" 4
.IX Item "--dll-search-prefix string"
When linkin dynamically ta a thugged-out dll without a import library,
search fo' \f(CW\*(C`<string><basename>.dll\*(C'\fR up in preference to
\&\f(CW\*(C`lib<basename>.dll\*(C'\fR. This behaviour allows easy as fuck  distinction
between DLLs built fo' tha various \*(L"subplatforms\*(R": native, cygwin,
uwin, pw, etc.  For instance, cygwin DLLs typically use
\&\f(CW\*(C`\-\-dll\-search\-prefix=cyg\*(C'\fR.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-enable\-auto\-import\fR" 4
.IX Item "--enable-auto-import"
Do sophisticated linkin of \f(CW\*(C`_symbol\*(C'\fR ta \f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for
\&\s-1DATA\s0 imports from DLLs, n' create tha necessary thunkin symbols when
buildin tha import libraries wit dem \s-1DATA\s0 exports, n' you can put dat on yo' toast. Note: Use of the
\&'auto\-import' extension will cause tha text section of tha image file
to be made writable. This do not conform ta tha PE-COFF format
specification published by Microsoft.
.Sp
Note \- use of tha 'auto\-import' extension will also cause read only
data which would normally be placed tha fuck into tha .rdata section ta be
placed tha fuck into tha .data section instead. Y'all KNOW dat shit, muthafucka!  This is up in order ta work
around a problem wit consts dat is busted lyrics bout here:
http://www.cygwin.com/ml/cygwin/2004\-09/msg01101.html
.Sp
Usin 'auto\-import' generally will 'just work' \*(-- but sometimes you may
see dis message:
.Sp
"variable '<var>' can't be auto-imported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Please read the
documentation fo' ldz \f(CW\*(C`\-\-enable\-auto\-import\*(C'\fR fo' details."
.Sp
This message occurs when some (sub)expression accesses a address
ultimately given by tha sum of two constants (Win32 import tablez only
allow one).  Instances where dis may occur include accesses ta member
fieldz of struct variablez imported from a \s-1DLL,\s0 as well as rockin a
constant index tha fuck into a array variable imported from a \s-1DLL. \s0 Any
multiword variable (arrays, structs, long long, etc) may trigger
this error condition. I aint talkin' bout chicken n' gravy biatch.  But fuck dat shiznit yo, tha word on tha street is dat regardless of tha exact data type
of tha offendin exported variable, ld will always detect it, issue
the warning, n' exit.
.Sp
There is nuff muthafuckin ways ta address dis difficulty, regardless of the
data type of tha exported variable:
.Sp
One way is ta use \-\-enable\-runtime\-pseudo\-reloc switch. This leaves tha task
of adjustin references up in yo' client code fo' runtime environment, so
this method works only when runtime environment supports dis feature.
.Sp
A second solution is ta force one of tha 'constants' ta be a variable \*(--
that is, unknown n' un-optimizable at compile time.  For arrays,
there is two possibilities: a) make tha indexee (the arrayz address)
a variable, or b) make tha 'constant' index a variable.  Thus:
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] \-\->
\&           { volatile type *t=extern_array; t[1] }
.Ve
.Sp
or
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] \-\->
\&           { volatile int t=1; extern_array[t] }
.Ve
.Sp
For structs (and most other multiword data types) tha only option
is ta make tha struct itself (or tha long long, or tha ...) variable:
.Sp
.Vb 3
\&        extern struct s extern_struct;
\&        extern_struct.field \-\->
\&           { volatile struct s *t=&extern_struct; t\->field }
.Ve
.Sp
or
.Sp
.Vb 3
\&        extern long long extern_ll;
\&        extern_ll \-\->
\&          { volatile long long * local_ll=&extern_ll; *local_ll }
.Ve
.Sp
A third method of dealin wit dis hang-up is ta abandon
\&'auto\-import' fo' tha offendin symbol n' mark it with
\&\f(CW\*(C`_\|_declspec(dllimport)\*(C'\fR.  But fuck dat shiznit yo, tha word on tha street is dat up in practise that
requires rockin compile-time #defines ta indicate whether yo ass is
buildin a \s-1DLL,\s0 buildin client code dat will link ta tha \s-1DLL,\s0 or
merely building/linkin ta a static library.   In makin tha chizzle
between tha various methodz of resolvin tha 'direct address with
constant offset' problem, you should consider typical real-world usage:
.Sp
Original:
.Sp
.Vb 7
\&        \-\-foo.h
\&        extern int arr[];
\&        \-\-foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
Solution 1:
.Sp
.Vb 9
\&        \-\-foo.h
\&        extern int arr[];
\&        \-\-foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          /* This workaround is fo' win32 n' cygwin; do not "optimize" */
\&          volatile int *parr = arr;
\&          printf("%d\en",parr[1]);
\&        }
.Ve
.Sp
Solution 2:
.Sp
.Vb 10
\&        \-\-foo.h
\&        /* Note: auto\-export be assumed (no _\|_declspec(dllexport)) */
\&        #if (defined(_WIN32) || defined(_\|_CYGWIN_\|_)) && \e
\&          !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))
\&        #define FOO_IMPORT _\|_declspec(dllimport)
\&        #else
\&        #define FOO_IMPORT
\&        #endif
\&        extern FOO_IMPORT int arr[];
\&        \-\-foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
A fourth way ta avoid dis problem is ta re-code your
library ta bust a gangbangin' functionizzle intercourse rather than a thugged-out data intercourse
for tha offendin variablez (e.g. \fIset_foo()\fR n' \fIget_foo()\fR accessor
functions).
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-disable\-auto\-import\fR" 4
.IX Item "--disable-auto-import"
Do not attempt ta do sophisticated linkin of \f(CW\*(C`_symbol\*(C'\fR to
\&\f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR fo' \s-1DATA\s0 imports from DLLs.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-enable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--enable-runtime-pseudo-reloc"
If yo' code gotz nuff expressions busted lyrics bout up in \-\-enable\-auto\-import section,
that is, \s-1DATA\s0 imports from \s-1DLL\s0 wit non-zero offset, dis switch will create
a vector of 'runtime pseudo relocations' which can be used by runtime
environment ta adjust references ta such data up in yo' client code.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-disable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--disable-runtime-pseudo-reloc"
Do not create pseudo relocations fo' non-zero offset \s-1DATA\s0 imports from
DLLs.  This is tha default.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-enable\-extra\-pe\-debug\fR" 4
.IX Item "--enable-extra-pe-debug"
Show additionizzle debug info related ta auto-import symbol thunking.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-section\-alignment\fR" 4
.IX Item "--section-alignment"
Sets tha section alignment.  Sections up in memory will always begin at
addresses which is a multiple of dis number n' shit.  Defaults ta 0x1000.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-stack\fR \fIreserve\fR" 4
.IX Item "--stack reserve"
.PD 0
.IP "\fB\-\-stack\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
.IX Item "--stack reserve,commit"
.PD
Specify tha number of bytez of memory ta reserve (and optionally commit)
to be used as stack fo' dis program.  Da default is 2Mb reserved, 4K
committed.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.IP "\fB\-\-subsystem\fR \fIwhich\fR" 4
.IX Item "--subsystem which"
.PD 0
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR" 4
.IX Item "--subsystem which:major"
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR\fB.\fR\fIminor\fR" 4
.IX Item "--subsystem which:major.minor"
.PD
Specifies tha subsystem under which yo' program will execute.  The
legal joints fo' \fIwhich\fR is \f(CW\*(C`native\*(C'\fR, \f(CW\*(C`windows\*(C'\fR,
\&\f(CW\*(C`console\*(C'\fR, \f(CW\*(C`posix\*(C'\fR, n' \f(CW\*(C`xbox\*(C'\fR.  Yo ass may optionally set
the subsystem version also.  Numeric joints is also accepted for
\&\fIwhich\fR.
[This option is specific ta tha i386 \s-1PE\s0 targeted port of tha linker]
.Sp
Da followin options set flags up in tha \f(CW\*(C`DllCharacteristics\*(C'\fR field
of tha \s-1PE\s0 file header:
[These options is specific ta \s-1PE\s0 targeted portz of tha linker]
.IP "\fB\-\-dynamicbase\fR" 4
.IX Item "--dynamicbase"
Da image base address may be relocated rockin address space layout
randomization (\s-1ASLR\s0).  This feature was introduced wit \s-1MS\s0 Windows
Vista fo' i386 \s-1PE\s0 targets.
.IP "\fB\-\-forceinteg\fR" 4
.IX Item "--forceinteg"
Code integritizzle checks is enforced.
.IP "\fB\-\-nxcompat\fR" 4
.IX Item "--nxcompat"
Da image is compatible wit tha Data Execution Prevention.
This feature was introduced wit \s-1MS\s0 Windows \s-1XP SP2\s0 fo' i386 \s-1PE\s0 targets.
.IP "\fB\-\-no\-isolation\fR" 4
.IX Item "--no-isolation"
Although tha image understandz isolation, do not isolate tha image.
.IP "\fB\-\-no\-seh\fR" 4
.IX Item "--no-seh"
Da image do not use \s-1SEH.\s0 No \s-1SE\s0 handlez may be called from
this image.
.IP "\fB\-\-no\-bind\fR" 4
.IX Item "--no-bind"
Do not bind dis image.
.IP "\fB\-\-wdmdriver\fR" 4
.IX Item "--wdmdriver"
Da driver uses tha \s-1MS\s0 Windows Driver Model.
.IP "\fB\-\-tsaware\fR" 4
.IX Item "--tsaware"
Da image is Terminal Server aware.
.PP
Da C6X uClinux target uses a funky-ass binary format called \s-1DSBT\s0 ta support shared
libraries. Put ya muthafuckin choppers up if ya feel dis!  Each shared library up in tha system need ta gotz a unique index;
all executablez use a index of 0.
.IP "\fB\-\-dsbt\-size\fR \fIsize\fR" 4
.IX Item "--dsbt-size size"
This option sets tha number of entires up in tha \s-1DSBT\s0 of tha current executable
or shared library ta \fIsize\fR.  Da default is ta create a table wit 64
entries.
.IP "\fB\-\-dsbt\-index\fR \fIindex\fR" 4
.IX Item "--dsbt-index index"
This option sets tha \s-1DSBT\s0 index of tha current executable or shared library
to \fIindex\fR.  Da default is 0, which be appropriate fo' generating
executables.  If a gangbangin' finger-lickin' dirty-ass shared library is generated wit a \s-1DSBT\s0 index of 0, the
\&\f(CW\*(C`R_C6000_DSBT_INDEX\*(C'\fR relocs is copied tha fuck into tha output file.
.Sp
Da \fB\-\-no\-merge\-exidx\-entries\fR switch disablez tha mergin of adjacent
exidx entries up in frame unwind info.
.PP
Da 68HC11 n' 68HC12 linkers support specific options ta control the
memory bank switchin mappin n' trampoline code generation.
.IP "\fB\-\-no\-trampoline\fR" 4
.IX Item "--no-trampoline"
This option disablez tha generation of trampoline. By default a trampoline
is generated fo' each far function which is called rockin a \f(CW\*(C`jsr\*(C'\fR
instruction (this happens when a pointa ta a gangbangin' far function is taken).
.IP "\fB\-\-bank\-window\fR \fIname\fR" 4
.IX Item "--bank-window name"
This option indicates ta tha linker tha name of tha memory region in
the \fB\s-1MEMORY\s0\fR justification dat raps bout tha memory bank window.
Da definizzle of such region is then used by tha linker ta compute
pagin n' addresses within tha memory window.
.PP
Da followin options is supported ta control handlin of \s-1GOT\s0 generation
when linkin fo' 68K targets.
.IP "\fB\-\-got=\fR\fItype\fR" 4
.IX Item "--got=type"
This option  drops some lyrics ta tha linker which \s-1GOT\s0 generation scheme ta use.
\&\fItype\fR should be one of \fBsingle\fR, \fBnegative\fR,
\&\fBmultigot\fR or \fBtarget\fR.  For mo' shiznit refer ta the
Info entry fo' \fIld\fR.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
Yo ass can chizzle tha behaviour of \fBld\fR wit tha environment variables
\&\f(CW\*(C`GNUTARGET\*(C'\fR,
\&\f(CW\*(C`LDEMULATION\*(C'\fR n' \f(CW\*(C`COLLECT_NO_DEMANGLE\*(C'\fR.
.PP
\&\f(CW\*(C`GNUTARGET\*(C'\fR determines tha input-file object format if you don't
use \fB\-b\fR (or its synonym \fB\-\-format\fR).  Its value should be one
of tha \s-1BFD\s0 names fo' a input format.  If there is no
\&\f(CW\*(C`GNUTARGET\*(C'\fR up in tha environment, \fBld\fR uses tha natural format
of tha target. If \f(CW\*(C`GNUTARGET\*(C'\fR is set ta \f(CW\*(C`default\*(C'\fR then \s-1BFD\s0
attempts ta discover tha input format by examinin binary input files;
this method often succeedz yo, but there be potential ambiguities, since
there is no method of ensurin dat tha magic number used ta specify
object-file formats is unique.  But fuck dat shiznit yo, tha word on tha street is dat tha configuration procedure for
\&\s-1BFD\s0 on each system places tha conventionizzle format fo' dat system first
in tha search-list, so ambiguitizzles is resolved up in favor of convention.
.PP
\&\f(CW\*(C`LDEMULATION\*(C'\fR determines tha default emulation if you don't use the
\&\fB\-m\fR option. I aint talkin' bout chicken n' gravy biatch.  Da emulation can affect various aspectz of linker
behaviour, particularly tha default linker script.  Yo ass can list the
available emulations wit tha \fB\-\-verbose\fR or \fB\-V\fR options.  If
the \fB\-m\fR option aint used, n' tha \f(CW\*(C`LDEMULATION\*(C'\fR environment
variable aint defined, tha default emulation dependz upon how tha fuck the
linker was configured.
.PP
Normally, tha linker will default ta demanglin symbols.  But fuck dat shiznit yo, tha word on tha street is dat if
\&\f(CW\*(C`COLLECT_NO_DEMANGLE\*(C'\fR is set up in tha environment, then it will
default ta not demanglin symbols.  This environment variable is used in
a similar fashizzle by tha \f(CW\*(C`gcc\*(C'\fR linker wrapper program.  Da default
may be overridden by tha \fB\-\-demangle\fR n' \fB\-\-no\-demangle\fR
options.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIar\fR\|(1), \fInm\fR\|(1), \fIobjcopy\fR\|(1), \fIobjdump\fR\|(1), \fIreadelf\fR\|(1) and
the Info entries fo' \fIbinutils\fR and
\&\fIld\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free
Software Foundation, Inc.
.PP
Permission is granted ta copy, distribute and/or modify dis document
under tha termz of tha \s-1GNU\s0 Jacked Documentation License, Version 1.3
or any lata version published by tha Jacked Software Foundation;
with no Invariant Sections, wit no Front-Cover Texts, n' wit no
Back-Cover Texts, n' you can put dat on yo' toast.  A copy of tha license is included up in the
section entitled \*(L"\s-1GNU\s0 Jacked Documentation License\*(R".
