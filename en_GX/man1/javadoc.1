." Copyright (c) 1994, 2011, Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
." DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
."
." This code is free software; you can redistribute it and/or modify it
." under tha termz of tha GNU General Public License version 2 only, as
." published by tha Jacked Software Foundation.
."
." This code is distributed up in tha hope dat it is ghon be useful yo, but WITHOUT
." ANY WARRANTY; without even tha implied warranty of MERCHANTABILITY or
." FITNESS FOR A PARTICULAR PURPOSE.  See tha GNU General Public License
." version 2 fo' mo' details (a copy is included up in tha LICENSE file that
." accompanied dis code).
."
." Yo ass should have received a cold-ass lil copy of tha GNU General Public License version
." 2 along wit dis work; if not, write ta tha Jacked Software Foundation,
." Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
."
." Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
." or visit www.oracle.com if you need additionizzle shiznit or have any
." thangs.
."
.TH javadoc 1 "16 Mar 2012"
.SH "Name"
javadoc \- Da Java API Documentation Generator
.LP
Generates HTML pagez of API documentation from Java source files. This document gotz nuff Javadoc examplez fo' Solaris.
.SH "SYNOPSIS"
.LP
\f4javadoc\fP\f2\ [\ \fP\f2options\fP\f2\ ]\ [\ packagenames\ ]\ [\ sourcefilenames\ ]\ [\ \-subpackages\fP\ \f2pkg1:pkg2:...\fP\f2\ ]\ [\ \fP\f2@argfiles\fP\f2\ ]\fP
.LP
Arguments can be up in any order n' shit. Right back up in yo muthafuckin ass. See processin of Source Filez fo' details on how tha fuck tha Javadoc tool determines which "\f2.java\fP" filez ta process.
.RS 3
.TP 3
options 
Command\-line options, as specified up in dis document. To peep a typical use of javadoc options, peep Real\-Ghetto Example. 
.TP 3
packagenames 
A seriez of namez of packages, separated by spaces, like fuckin \f2java.lang\ java.lang.reflect\ java.awt\fP. Yo ass must separately specify each package you wanna document. Wildcardz is not allowed; use \-subpackages fo' recursion. I aint talkin' bout chicken n' gravy biatch. Da Javadoc tool uses \f2\-sourcepath\fP ta look fo' these package names. Right back up in yo muthafuckin ass. See Example \- Documentin One or Mo' Packages 
.TP 3
sourcefilenames 
A seriez of source file names, separated by spaces, each of which can begin wit a path n' contain a wildcard like fuckin asterisk (*). Da Javadoc tool will process every last muthafuckin file whose name endz wit ".java", n' whose name, when stripped of dat suffix, is straight-up a legal class name (see tha Java Language Justification). Therefore, you can name filez wit dashes (like fuckin \f2X\-Buffer\fP), or other illegal characters, ta prevent dem from bein documented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This is useful fo' test filez n' template filez Da path dat precedes tha source file name determines where javadoc will look fo' tha file. (Da Javadoc tool do \f2not\fP use \f2\-sourcepath\fP ta look fo' these source file names.) Relatizzle paths is relatizzle ta tha current directory, so passin up in \f2Button.java\fP is identical ta \f2./Button.java\fP fo' realz. A source file name wit a absolute path n' a wildcard, fo' example, is \f2/home/src/java/awt/Graphics*.java\fP. Right back up in yo muthafuckin ass. See Example\ \-\ Documentin One or Mo' Classes. Yo ass can also mix packagenames n' sourcefilenames, as up in Example\ \-\ Documentin Both Packages n' Classes 
.TP 3
\-subpackages pkg1:pkg2:... 
Generates documentation from source filez up in tha specified packages n' recursively up in they subpackages fo' realz. An alternatizzle ta supplyin packagenames or sourcefilenames. 
.TP 3
@argfilez 
One or mo' filez dat contain a list of Javadoc options, packagenames n' sourcefilenames up in any order n' shit. Wildcardz (*) n' \f2\-J\fP options is not allowed up in these files.  
.RE
.SH "DESCRIPTION"
.LP
Da \f3Javadoc\fP tool parses tha declarations n' documentation comments up in a set of Java source filez n' produces a cold-ass lil correspondin set of HTML pages describin (by default) tha hood n' protected classes, nested classes (but not anonymous inner classes), intercourses, constructors, methods, n' fields. Yo ass can use it ta generate tha API (Application Programmin Interface) documentation or tha implementation documentation fo' a set of source files.
.LP
Yo ass can run tha Javadoc tool on entire packages, individual source files, or both. When documentin entire packages, you can either use \f2\-subpackages\fP fo' traversin recursively down from a top\-level directory, or pass up in a explicit list of package names. When documentin individual source files, you pass up in a list of source (\f2.java\fP) filenames. Examplez is given all up in tha end of dis document yo. How tha fuck Javadoc processes source filez is covered next.
.SS 
Processin of source files
.LP
Da Javadoc tool processes filez dat end up in "\f2.java\fP" plus other filez busted lyrics bout under Source Files. If you run tha Javadoc tool by explicitly passin up in individual source filenames, you can determine exactly which "\f2.java\fP" filez is processed. Y'all KNOW dat shit, muthafucka! But fuck dat shiznit yo, tha word on tha street is dat that aint how tha fuck most pimpers wanna work, as it is simpla ta pass up in package names. Da Javadoc tool can be run three ways without explicitly specifyin tha source filenames. Yo ass can (1) pass up in package names, (2) use \f2\-subpackages\fP, n' (3) use wildcardz wit source filenames (\f2*.java\fP). In these cases, tha Javadoc tool processes a "\f2.java\fP" file only if it fulfills all of tha followin requirements:
.RS 3
.TP 2
o
Its name, afta strippin off tha "\f2.java\fP" suffix, is straight-up a legal class name (see tha Java Language Justification fo' legal characters) 
.TP 2
o
Its directory path relatizzle ta tha root of tha source tree is straight-up a legal package name (afta convertin its separators ta dots) 
.TP 2
o
Its package statement gotz nuff tha legal package name (specified up in tha previous bullet) 
.RE
.LP
\f3Processin of links\fP \- Durin a run, tha Javadoc tool automatically addz cross\-reference links ta package, class n' member names dat is bein documented as part of dat run. I aint talkin' bout chicken n' gravy biatch. Links step tha fuck up in nuff muthafuckin places:
.RS 3
.TP 2
o
Declarations (return types, argument types, field types) 
.TP 2
o
"See Also" sections generated from \f2@see\fP tags 
.TP 2
o
In\-line text generated from \f2{@link}\fP tags 
.TP 2
o
Exception names generated from \f2@throws\fP tags 
.TP 2
o
"Specified by" links ta thugz up in intercourses n' "Overrides" links ta thugz up in classes 
.TP 2
o
Summary tablez listin packages, classes n' thugz 
.TP 2
o
Package n' class inheritizzle trees 
.TP 2
o
Da index 
.RE
.LP
Yo ass can add hyperlinks ta existin text fo' classes not included on tha command line (but generated separately) by way of tha \f2\-link\fP n' \f2\-linkoffline\fP options.
.LP
\f3Other processin details\fP \- Da Javadoc tool produces one complete document each time it is run; it cannot do incremenstrual buildz \-\- dat is, it cannot modify or \f2directly\fP incorporate thangs up in dis biatch from previous runz of tha Javadoc tool. But fuck dat shiznit yo, tha word on tha street is dat it can link ta thangs up in dis biatch from other runs, as just mentioned.
.LP
As implemented, tha Javadoc tool requires n' relies on tha java compila ta do its thang. Da Javadoc tool calls part of \f2javac\fP ta compile tha declarations, ignorin tha member implementation. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it buildz a rich internal representation of tha classes, includin tha class hierarchy, n' "use" relationshizzles, then generates tha HTML from dis shit. Da Javadoc tool also picks up user\-supplied documentation from documentation comments up in tha source code.
.LP
In fact, tha Javadoc tool will run on \f2.java\fP source filez dat is pure stub filez wit no method bodies. Put ya muthafuckin choppers up if ya feel dis! This means you can write documentation comments n' run tha Javadoc tool up in tha earliest stagez of design while bustin tha API, before freestylin tha implementation.
.LP
Relyin on tha compila ensures dat tha HTML output correspondz exactly wit tha actual implementation, which may rely on implicit, rather than explicit, source code. For example, tha Javadoc tool documents default constructors (see Java Language Justification) dat is present up in tha \f2.class\fP filez but not up in tha source code.
.LP
In nuff cases, tha Javadoc tool allows you ta generate documentation fo' source filez whose code is incomplete or erroneous. This be a funky-ass benefit dat enablez you ta generate documentation before all debuggin n' shitshootin is done. For example, accordin ta tha \f2Java Language Justification\fP, a cold-ass lil class dat gotz nuff a abstract method should itself be declared abstract. Da Javadoc tool do not check fo' this, n' would proceed without a warning, whereas tha javac compila stops on dis error. Shiiit, dis aint no joke. Da Javadoc tool do do some primitizzle checkin of doc comments, n' you can put dat on yo' toast. Use tha DocPeep doclet ta check tha doc comments mo' thoroughly.
.LP
When tha Javadoc tool buildz its internal structure fo' tha documentation, it loadz all referenced classes. Because of this, tha Javadoc tool must be able ta find all referenced classes, whether bootstrap classes, extensions, or user classes. For mo' bout this, peep 
.na
\f2How tha fuck Classes Is Found\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/tools/findingclasses.html. Generally bustin lyrics, classes you create must either be loaded as a extension or up in tha Javadoc toolz class path.
.SS 
Javadoc Doclets
.LP
Yo ass can customize tha content n' format of tha Javadoc toolz output by rockin doclets, n' you can put dat on yo' toast. Da Javadoc tool has a thugged-out default "built\-in" doclet, called tha standard doclet, dat generates HTML\-formatted API documentation. I aint talkin' bout chicken n' gravy biatch. Yo ass can modify or subclass tha standard doclet, or write yo' own doclet ta generate HTML, XML, MIF, RTF or whatever output format you'd like yo. Hype bout doclets n' they use be all up in tha followin locations:
.RS 3
.TP 2
o
.na
\f2Javadoc Doclets\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/guides/javadoc/index.html 
.TP 2
o
Da \f2\-doclet\fP command\-line option 
.RE
.LP
When a cold-ass lil custom doclet aint specified wit tha \f2\-doclet\fP command line option, tha Javadoc tool will use tha default standard doclet. Da javadoc tool has nuff muthafuckin command line options dat is available regardless of which doclet is bein used. Y'all KNOW dat shit, muthafucka! Da standard doclet addz a supplementary set of command line options. Both setz of options is busted lyrics bout below up in tha options section.
.SS 
Related Documentation n' Doclets
.RS 3
.TP 2
o
.na
\f2Javadoc Enhancements\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/guides/javadoc/index.html fo' details bout improvements added up in Javadoc. 
.TP 2
o
.na
\f2Javadoc FAQUIZZY\fP @
.fi
http://java.sun.com/j2se/javadoc/faq/index.html fo' lyrics ta common thangs, shiznit bout Javadoc\-related tools, n' workaroundz fo' bugs. 
.TP 2
o
.na
\f2How tha fuck ta Write Doc Comments fo' Javadoc\fP @
.fi
http://www.oracle.com/technetwork/java/javase/documentation/index\-137868.html fo' mo' shiznit bout Sun conventions fo' freestylin documentation comments, n' you can put dat on yo' toast. 
.TP 2
o
.na
\f2Requirements fo' Freestylin API Justifications\fP @
.fi
http://java.sun.com/j2se/javadoc/writingapispecs/index.html \- Standard requirements used when freestylin tha Java SE Platform Justification. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it can be useful whether yo ass is freestylin API justifications up in source file documentation comments or up in other formats, n' you can put dat on yo' toast. Well shiiiit, it covers requirements fo' packages, classes, intercourses, fieldz n' methodz ta satisfy testable assertions. 
.TP 2
o
.na
\f2Documentation Comment Justification\fP @
.fi
http://java.sun.com/docs/books/jls/first_edition/html/18.doc.html \- Da original gangsta justification on documentation comments, Chapta 18, Documentation Comments, up in tha \f2Java Language Justification\fP, First Edition, by Jizzy Gosling, Bizzle Joy, n' Guy Steele. (This chapta was removed from tha second edition.)  
.TP 2
o
.na
\f2DocPeep Doclet\fP @
.fi
http://www.oracle.com/technetwork/java/javase/documentation/index\-141437.html \- Checks doc comments up in source filez n' generates a report listin tha errors n' irregularitizzles it finds. Well shiiiit, it is part of tha Doc Peep Utilities. Put ya muthafuckin choppers up if ya feel dis! 
.TP 2
o
.na
\f2MIF Doclet\fP @
.fi
http://java.sun.com/j2se/javadoc/mifdoclet/ \- Can automate tha generation of API documentation up in MIF, FrameMaker n' PDF formats, n' you can put dat on yo' toast. MIF is Adobe FrameMakerz interchange format. 
.RE
.SS 
Terminology
.LP
Da terms \f2documentation comment\fP, \f2doc comment\fP, \f2main description\fP, \f2tag\fP, \f2block tag\fP, n' \f2in\-line tag\fP is busted lyrics bout at Documentation Comments, n' you can put dat on yo' toast. These other terms have specific meanings within tha context of tha Javadoc tool:
.RS 3
.TP 3
generated document 
Da document generated by tha javadoc tool from tha doc comments up in Java source code. Da default generated document is up in HTML n' is pimped by tha standard doclet. 
.LP
.TP 3
name 
A name of a program element freestyled up in tha Java Language \-\- dat is, tha name of a package, class, intercourse, field, constructor or method. Y'all KNOW dat shit, muthafucka! A name can be fully\-qualified, like fuckin \f2java.lang.String.equals(java.lang.Object)\fP, or partially\-qualified, like fuckin \f2equals(Object)\fP. 
.LP
.TP 3
documented classes 
Da classes n' intercourses fo' which detailed documentation is generated durin a javadoc run. I aint talkin' bout chicken n' gravy biatch. To be documented, tha source filez must be available, they source filenames or package names must be passed tha fuck into tha javadoc command, n' they must not be filtered up by they access modifier (public, protected, package\-private or private). We also refer ta these as tha classes included up in tha javadoc output, or tha \f2included classes\fP. 
.LP
.TP 3
included classes 
Classes n' intercourses whose details is documented durin a run of tha Javadoc tool. Right back up in yo muthafuckin ass. Same as \f2documented classes\fP. 
.LP
.TP 3
excluded classes 
Classes n' intercourses whose details is \f2not\fP documented durin a run of tha Javadoc tool. 
.LP
.TP 3
referenced classes 
Da classes n' intercourses dat is explicitly referred ta up in tha definizzle (implementation) or doc commentz of tha documented classes n' intercourses. Examplez of references include return type, parameta type, cast type, extended class, implemented intercourse, imported classes, classes used up in method bodies, @see, {@link}, {@linkplain}, n' {@inheritDoc} tags. (Notice dis definizzle has chizzled since 
.na
\f21.3\fP @
.fi
http://docs.oracle.com/javase/1.3/docs/tooldocs/solaris/javadoc.html#referencedclasses.) When tha Javadoc tool is run, it should load tha fuck into memory all of tha referenced classes up in javadocs bootclasspath n' classpath. (Da Javadoc tool prints a "Class not found" warnin fo' referenced classes not found.) Da Javadoc tool can derive enough shiznit from tha .class filez ta determine they existence n' tha fully\-qualified namez of they members. 
.LP
.TP 3
external referenced classes 
Da referenced classes whose documentation aint bein generated durin a javadoc run. I aint talkin' bout chicken n' gravy biatch. In other lyrics, these classes is not passed tha fuck into tha Javadoc tool on tha command line. Links up in tha generated documentation ta dem classes is holla'd ta be \f2external references\fP or \f2external links\fP. For example, if you run tha Javadoc tool on only tha \f2java.awt\fP package, then any class up in \f2java.lang\fP, like fuckin \f2Object\fP, be a external referenced class. External referenced classes can be linked ta rockin tha \f2\-link\fP n' \f2\-linkoffline\fP options fo' realz. An blingin property of a external referenced class is dat its source comments is normally not available ta tha Javadoc run. I aint talkin' bout chicken n' gravy biatch. In dis case, these comments cannot be inherited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
.RE
.SH "SOURCE FILES"
.LP
Da Javadoc tool will generate output originatin from four different typez of "source" files: Java language source filez fo' classes (\f2.java\fP), package comment files, overview comment files, n' miscellaneous unprocessed files. This section also covers test filez n' template filez dat can also be up in tha source tree yo, but which you wanna be shizzle not ta document.
.SS 
Class Source Code Files
.LP
Each class or intercourse n' its thugz can have they own documentation comments, contained up in a \f2.java\fP file. For mo' details bout these doc comments, peep Documentation Comments.
.SS 
Package Comment Files
.LP
Each package can have its own documentation comment, contained up in its own "source" file, dat tha Javadoc tool will merge tha fuck into tha package summary page dat it generates. Yo ass typically include up in dis comment any documentation dat applies ta tha entire package.
.LP
To create a package comment file, you gotz a cold-ass lil chizzle of two filez ta place yo' comments:
.RS 3
.TP 2
o
\f2package\-info.java\fP \- Can contain a package declaration, package annotations, package comments n' Javadoc tags. This file is generally preferred over package.html. 
.TP 2
o
\f2package.html\fP \- Can contain only package comments n' Javadoc tags, no package annotations. 
.RE
.LP
A package may gotz a single \f2package.html\fP file or a single \f2package\-info.java\fP file but not both. Place either file up in tha package directory up in tha source tree along wit yo' \f2.java\fP files.
.LP
\f4package\-info.java\fP \- This file can contain a package comment of tha followin structure \-\- tha comment is placed before tha package declaration:
.LP
File: \f2java/applet/package\-info.java\fP
.nf
\f3
.fl
/**
.fl
 * Provides tha classes necessary ta create a  
.fl
 * applet n' tha classes a applet uses 
.fl
 * ta rap wit its applet context.
.fl
 * <p>
.fl
 * Da applet framework involves two entities:
.fl
 * tha applet n' tha applet context.
.fl
 * An applet be a embeddable window (see the
.fl
 * {@link java.awt.Panel} class) wit all dem extra
.fl
 * methodz dat tha applet context can use ta 
.fl
 * initialize, start, n' stop tha applet.
.fl
 *
.fl
 * @since 1.0
.fl
 * @see java.awt
.fl
 */
.fl
package java.lang.applet;
.fl
\fP
.fi
.LP
Note dat while tha comment separators \f2/**\fP n' \f2/*\fP must be present, tha leadin asterisks on tha intermediate lines can be omitted.
.LP
\f4package.html\fP \- This file can contain a package comment of tha followin structure \-\- tha comment is placed up in tha \f2<body>\fP element:
.LP
File: \f2java/applet/package.html\fP
.nf
\f3
.fl
<HTML>
.fl
<BODY>
.fl
Provides tha classes necessary ta create a applet n' tha 
.fl
classes a applet uses ta rap wit its applet context.
.fl
<p>
.fl
Da applet framework involves two entities: tha applet
.fl
and tha applet context fo' realz. An applet be a embeddable
.fl
window (see tha {@link java.awt.Panel} class) wit a
.fl
few extra methodz dat tha applet context can use to
.fl
initialize, start, n' stop tha applet. 
.fl

.fl
@since 1.0 
.fl
@see java.awt
.fl
</BODY>
.fl
</HTML>
.fl
\fP
.fi
.LP
Notice dis is just a aiiight HTML file n' do not include a package declaration. I aint talkin' bout chicken n' gravy biatch. Da content of tha package comment file is freestyled up in HTML, like all other comments, wit one exception: Da documentation comment should not include tha comment separators \f2/**\fP n' \f2*/\fP or leadin asterisks. When freestylin tha comment, you should make tha straight-up original gangsta sentence a summary bout tha package, n' not put a title or any other text between \f2<body>\fP n' tha straight-up original gangsta sentence. Yo ass can include package tags; as wit any documentation comment, all block tags must step tha fuck up afta tha main description. I aint talkin' bout chicken n' gravy biatch. If you add a \f2@see\fP tag up in a package comment file, it must gotz a gangbangin' fully\-qualified name. For mo' details, peep tha 
.na
\f2example of \fP\f2package.html\fP @
.fi
http://www.oracle.com/technetwork/java/javase/documentation/index\-137868.html#packagecomments.
.LP
\f3Processin of package comment file\fP \- When tha Javadoc tool runs, it will automatically look fo' tha package comment file; if found, tha Javadoc tool do tha following:
.RS 3
.TP 2
o
Copies tha comment fo' processing. (For \f2package.html\fP, copies all content between \f2<body>\fP n' \f2</body>\fP HTML tags. Yo ass can include a \f2<head>\fP section ta put a \f2<title>\fP, source file copyright statement, or other shiznit yo, but none of these will step tha fuck up in tha generated documentation.) 
.TP 2
o
Processes any package tags dat is present. 
.TP 2
o
Inserts tha processed text all up in tha bottom of tha package summary page it generates, as shown up in 
.na
\f2Package Summary\fP @
.fi
http://docs.oracle.com/javase/7/docs/api/java/applet/package\-summary.html. 
.TP 2
o
Copies tha straight-up original gangsta sentence of tha package comment ta tha top of tha package summary page. Well shiiiit, it also addz tha package name n' dis first sentence ta tha list of packages on tha overview page, as shown up in 
.na
\f2Overview Summary\fP @
.fi
http://docs.oracle.com/javase/7/docs/api/overview\-summary.html. Da end\-of\-sentence is determined by tha same rulez used fo' tha end of tha straight-up original gangsta sentence of class n' member main descriptions. 
.RE
.SS 
Overview Comment File
.LP
Each application or set of packages dat yo ass is documentin can have its own overview documentation comment, kept up in its own "source" file, dat tha Javadoc tool will merge tha fuck into tha overview page dat it generates. Yo ass typically include up in dis comment any documentation dat applies ta tha entire application or set of packages.
.LP
To create a overview comment file, you can name tha file anythang you want, typically \f4overview.html\fP n' place it anywhere, typically all up in tha top level of tha source tree. For example, if tha source filez fo' tha \f2java.applet\fP package is contained up in \f2/home/user/src/java/applet\fP directory, you could create a overview comment file at \f2/home/user/src/overview.html\fP.
.LP
Notice you can have multiple overview comment filez fo' tha same set of source files, up in case you wanna run javadoc multiple times on different setz of packages. For example, you could run javadoc once wit \-private fo' internal documentation n' again n' again n' again without dat option fo' hood documentation. I aint talkin' bout chicken n' gravy biatch. In dis case, you could describe tha documentation as hood or internal up in tha straight-up original gangsta sentence of each overview comment file.
.LP
Da content of tha overview comment file is one big-ass documentation comment, freestyled up in HTML, like tha package comment file busted lyrics bout previously. Right back up in yo muthafuckin ass. See dat description fo' details. To re\-iterate, when freestylin tha comment, you should make tha straight-up original gangsta sentence a summary bout tha application or set of packages, n' not put a title or any other text between \f2<body>\fP n' tha straight-up original gangsta sentence. Yo ass can include overview tags; as wit any documentation comment, all tags except in\-line tags, like fuckin \f2{@link}\fP, must step tha fuck up afta tha main description. I aint talkin' bout chicken n' gravy biatch. If you add a \f2@see\fP tag, it must gotz a gangbangin' fully\-qualified name.
.LP
When you run tha Javadoc tool, you specify tha overview comment file name wit tha \-overview option. I aint talkin' bout chicken n' gravy biatch. Da file is then processed similar ta dat of a package comment file.
.RS 3
.TP 2
o
Copies all content between \f2<body>\fP n' \f2</body>\fP tags fo' processing. 
.TP 2
o
Processes any overview tags dat is present. 
.TP 2
o
Inserts tha processed text all up in tha bottom of tha overview page it generates, as shown up in 
.na
\f2Overview Summary\fP @
.fi
http://docs.oracle.com/javase/7/docs/api/overview\-summary.html. 
.TP 2
o
Copies tha straight-up original gangsta sentence of tha overview comment ta tha top of tha overview summary page. 
.RE
.SS 
Miscellaneous Unprocessed Files
.LP
Yo ass can also include up in yo' source any miscellaneous filez dat you want tha Javadoc tool ta copy ta tha destination directory. These typically includes graphic files, example Java source (.java) n' class (.class) files, n' self\-standin HTML filez whose content would overwhelm tha documentation comment of a aiiight Java source file.
.LP
To include unprocessed files, put dem up in a gangbangin' finger-lickin' directory called \f4doc\-files\fP which can be a subdirectory of any package directory dat gotz nuff source files. Yo ass can have one such subdirectory fo' each package. Yo ass might include images, example code, source files, .class files, applets n' HTML files. For example, if you wanna include tha image of a funky-ass button \f2button.gif\fP up in tha \f2java.awt.Button\fP class documentation, you place dat file up in tha \f2/home/user/src/java/awt/doc\-files/\fP directory. Notice tha \f2doc\-files\fP directory should not be located at \f2/home/user/src/java/doc\-files\fP cuz \f2java\fP aint a package \-\- dat is, it do not directly contain any source files.
.LP
All links ta these unprocessed filez must be hard\-coded, cuz tha Javadoc tool do not peep tha filez \-\- it simply copies tha directory n' all its contents ta tha destination. I aint talkin' bout chicken n' gravy biatch. For example, tha link up in tha \f2Button.java\fP doc comment might look like:
.nf
\f3
.fl
    /**
.fl
     * This button be lookin like this: 
.fl
     * <img src="doc\-files/Button.gif">
.fl
     */
.fl
\fP
.fi
.SS 
Test Filez n' Template Files
.LP
Some pimpers have indicated they wanna store test filez n' templates filez up in tha source tree near they correspondin source files. That is, they wanna put dem up in tha same directory, or a subdirectory, of dem source files.
.LP
If you run tha Javadoc tool by explicitly passin up in individual source filenames, you can deliberately omit test n' templates filez n' prevent dem from bein processed. Y'all KNOW dat shit, muthafucka! But fuck dat shiznit yo, tha word on tha street is dat if yo ass is passin up in package names or wildcards, you need ta follow certain rulez ta ensure these test filez n' templates filez is not processed.
.LP
Test filez differ from template filez up in dat tha forma is legal, compilable source files, while tha latta is not yo, but may end wit ".java".
.LP
\f3Test files\fP \- Often pimpers wanna put compilable, runnable test filez fo' a given package up in tha \f2same\fP directory as tha source filez fo' dat package. But they want tha test filez ta belong ta a package other than tha source file package, like fuckin tha unnamed package (so tha test filez have no package statement or a gangbangin' finger-lickin' different package statement from tha source). In dis scenario, when tha source is bein documented by specifyin its package name specified on tha command line, tha test filez will cause warnings or errors. Yo ass need ta put such test filez up in a subdirectory. For example, if you wanna add test filez fo' source filez up in \f2com.package1\fP, put dem up in a subdirectory dat would be a invalid package name (because it gotz nuff a hyphen):
.nf
\f3
.fl
    com/package1/test\-files/
.fl
\fP
.fi
.LP
Da test directory is ghon be skipped by tha Javadoc tool wit no warnings.
.LP
If yo' test filez contain doc comments, you can set up a separate run of tha Javadoc tool ta produce documentation of tha test filez by passin up in they test source filenames wit wildcards, like fuckin \f2com/package1/test\-files/*.java\fP.
.LP
\f3Templates fo' source files\fP \- Template filez have names dat often end up in ".java" n' is not compilable. If you gotz a template fo' a source file dat you wanna keep up in tha source directory, you can name it wit a thugged-out dash (like fuckin \f2Buffer\-Template.java\fP), or any other illegal Java character, ta prevent it from bein processed. Y'all KNOW dat shit, muthafucka! This relies on tha fact dat tha Javadoc tool will only process source filez whose name, when stripped of tha ".java" suffix, is straight-up a legal class name (see shiznit bout Identifiers up in tha Java Language Justification).
.SH "GENERATED FILES"
.LP
By default, javadoc uses a standard doclet dat generates HTML\-formatted documentation. I aint talkin' bout chicken n' gravy biatch. This doclet generates tha followin kindz of filez (where each HTML "page" correspondz ta a separate file). Note dat javadoc generates filez wit two typez of names: dem named afta classes/interfaces, n' dem dat is not (like fuckin \f2package\-summary.html\fP). Filez up in tha latta crew contain hyphens ta prevent filename conflicts wit dem up in tha forma group.
.LP
\f3Basic Content Pages\fP
.RS 3
.TP 2
o
One \f3class or intercourse page\fP (\f2classname\fP\f2.html\fP) fo' each class or intercourse it is documenting.  
.TP 2
o
One \f3package page\fP (\f2package\-summary.html\fP) fo' each package it is documenting. Da Javadoc tool will include any HTML text provided up in a gangbangin' file named \f2package.html\fP or \f2package\-info.java\fP up in tha package directory of tha source tree.  
.TP 2
o
One \f3overview page\fP (\f2overview\-summary.html\fP) fo' tha entire set of packages. This is tha front page of tha generated document. Da Javadoc tool will include any HTML text provided up in a gangbangin' file specified wit tha \f2\-overview\fP option. I aint talkin' bout chicken n' gravy biatch. Note dat dis file is pimped only if you pass tha fuck into javadoc two or mo' package names. For further explanation, peep HTML Frames.) 
.RE
.LP
\f3Cross\-Reference Pages\fP
.RS 3
.TP 2
o
One \f3class hierarchy page fo' tha entire set of packages\fP (\f2overview\-tree.html\fP). To view this, click on "Overview" up in tha mastabation bar, then click on "Tree".  
.TP 2
o
One \f3class hierarchy page fo' each package\fP (\f2package\-tree.html\fP) To view this, git all up in a particular package, class or intercourse page; click "Tree" ta display tha hierarchy fo' dat package.  
.TP 2
o
One \f3"use" page\fP fo' each package (\f2package\-use.html\fP) n' a separate one fo' each class n' intercourse (\f2class\-use/\fP\f2classname\fP\f2.html\fP). This page raps bout what tha fuck packages, classes, methods, constructors n' fieldz use any part of tha given class, intercourse or package. Given a cold-ass lil class or intercourse A, its "use" page includes subclassez of A, fieldz declared as A, methodz dat return A, n' methodz n' constructors wit parametaz of type A. Yo ass can access dis page by first goin ta tha package, class or intercourse, then clickin on tha "Use" link up in tha mastabation bar. Shiiit, dis aint no joke.  
.TP 2
o
A \f3deprecated API page\fP (\f2deprecated\-list.html\fP) listin all deprecated names. (A deprecated name aint recommended fo' use, generally cuz of improvements, n' a replacement name is probably given. I aint talkin' bout chicken n' gravy biatch. Deprecated APIs may be removed up in future implementations.)  
.TP 2
o
A \f3constant field joints page\fP (\f2constant\-values.html\fP) fo' tha jointz of static fields.  
.TP 2
o
A \f3serialized form page\fP (\f2serialized\-form.html\fP) fo' shiznit bout serializable n' externalizable classes. Each such class has a thugged-out description of its serialization fieldz n' methods. This shiznit iz of interest ta re\-implementors, not ta pimpers rockin tha API. While there is no link up in tha mastabation bar, you can git ta dis shiznit by goin ta any serialized class n' clickin "Serialized Form" up in tha "See also" section of tha class comment. Da standard doclet automatically generates a serialized form page: any class (hood or non\-public) dat implements Serializable is included, along wit \f2readObject\fP n' \f2writeObject\fP methods, tha fieldz dat is serialized, n' tha doc comments from tha \f2@serial\fP, \f2@serialField\fP, n' \f2@serialData\fP tags. Public serializable classes can be excluded by markin dem (or they package) wit \f2@serial exclude\fP, n' package\-private serializable classes can be included by markin dem (or they package) wit \f2@serial include\fP fo' realz. Az of 1.4, you can generate tha complete serialized form fo' hood n' private classes by hustlin javadoc \f2without\fP specifyin tha \f2\-private\fP option. I aint talkin' bout chicken n' gravy biatch.  
.TP 2
o
An \f3index\fP (\f2index\-*.html\fP) of all class, intercourse, constructor, field n' method names, alphabetically arranged. Y'all KNOW dat shit, muthafucka! This is internationalized fo' Unicode n' can be generated as a single file or as a separate file fo' each startin characta (like fuckin A\-Z fo' Gangsta). 
.RE
.LP
\f3Support Files\fP
.RS 3
.TP 2
o
A \f3help page\fP (\f2help\-doc.html\fP) dat raps bout tha mastabation bar n' tha above pages. Yo ass can provide yo' own custom help file ta override tha default rockin \f2\-helpfile\fP. 
.TP 2
o
One \f3index.html file\fP which creates tha HTML frames fo' display. This is tha file you load ta display tha front page wit frames. This file itself gotz nuff no text content.  
.TP 2
o
Several \f3frame files\fP (\f2*\-frame.html\fP) containin listz of packages, classes n' intercourses, used when HTML frames is bein displayed. Y'all KNOW dat shit, muthafucka!  
.TP 2
o
A \f3package list\fP file (\f2package\-list\fP), used by tha \f2\-link\fP n' \f2\-linkoffline\fP options. This be a text file, not HTML, n' aint reachable all up in any links.  
.TP 2
o
A \f3style sheet\fP file (\f2stylesheet.css\fP) dat controls a limited amount of color, font crew, font size, font steez n' positionin on tha generated pages.  
.TP 2
o
A \f3doc\-files\fP directory dat holdz any image, example, source code or other filez dat you want copied ta tha destination directory. These filez is not processed by tha Javadoc tool up in any manner \-\- dat is, any javadoc tags up in dem is ghon be ignored. Y'all KNOW dat shit, muthafucka! This directory aint generated unless it exists up in tha source tree. 
.RE
.LP
\f3HTML Frames\fP
.LP
Da Javadoc tool will generate either two or three HTML frames, as shown up in tha figure below. Well shiiiit, it creates tha minimum necessary number of frames by omittin tha list of packages if there is only one package (or no packages). That is, when you pass a single package name or source filez (*.java) belongin ta a single package as arguments tha fuck into tha javadoc command, it will create only one frame (C) up in tha left\-hand column \-\- tha list of classes. When you pass tha fuck into javadoc two or mo' package names, it creates a third frame (P) listin all packages, as well as a overview page (Detail). This overview page has tha filename \f2overview\-summary.html\fP. Thus, dis file is pimped only if you pass up in two or mo' package names. Yo ass can bypass frames by clickin on tha "No Frames" link or enterin at overview\-summary.html.
.LP
If yo ass is unfamiliar wit HTML frames, you should be aware dat frames can have \f2focus\fP fo' printin n' scrolling. To give a gangbangin' frame focus, click on dat shit. Then on nuff browsers tha arrow keys n' page keys will scroll dat frame, n' tha print menu command will print dat shit.
.LP
Load one of tha followin two filez as tha startin page dependin on whether you want HTML frames or not:
.RS 3
.TP 2
o
\f2index.html\fP (for frames) 
.TP 2
o
\f2overview\-summary.html\fP (for no frames) 
.RE
.LP
\f3Generated File Structure\fP
.LP
Da generated class n' intercourse filez is organized up in tha same directory hierarchy dat Java source filez n' class filez is organized. Y'all KNOW dat shit, muthafucka! This structure is one directory per subpackage.
.LP
For example, tha document generated fo' tha class \f2java.applet.Applet\fP class would be located at \f2java/applet/Applet.html\fP. Da file structure fo' tha java.applet package bigs up, given dat tha destination directory is named \f2apidocs\fP fo' realz. All filez dat contain tha word "frame" step tha fuck up in tha upper\-left or lower\-left frames, as noted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. All other HTML filez step tha fuck up in tha right\-hand frame.
.LP
NOTE \- Directories is shown up in \f3bold\fP. Da asterisks (\f2*\fP) indicate tha filez n' directories dat is \f2omitted\fP when tha arguments ta javadoc is source filenames (*.java) rather than package names fo' realz. Also when arguments is source filenames, \f2package\-list\fP is pimped but is empty. Da doc\-filez directory aint gonna be pimped up in tha destination unless it exists up in tha source tree.
.nf
\f3
.fl

.fl
\fP\f3apidocs\fP                             Top directory
.fl
   index.html                       Initial page dat sets up HTML frames
.fl
 * overview\-summary.html            Lists all packages wit first sentence summaries
.fl
   overview\-tree.html               Lists class hierarchy fo' all packages
.fl
   deprecated\-list.html             Lists deprecated API fo' all packages
.fl
   constant\-values.html             Lists jointz of static fieldz fo' all packages
.fl
   serialized\-form.html             Lists serialized form fo' all packages
.fl
 * overview\-frame.html              Lists all packages, used up in upper\-left frame
.fl
   allclasses\-frame.html            Lists all classes fo' all packages, used up in lower\-left frame
.fl
   help\-doc.html                    Lists user help fo' how tha fuck these pages is organized
.fl
   index\-all.html                   Default index pimped without \-splitindex option
.fl
   \f3index\-files\fP                      Directory pimped wit \-splitindex option
.fl
       index\-<number>.html          Index filez pimped wit \-splitindex option
.fl
   package\-list                     Lists package names, used only fo' resolvin external refs
.fl
   stylesheet.css                   HTML steez shizzle fo' definin fonts, flavas n' positions
.fl
   \f3java\fP                             Package directory
.fl
       \f3applet\fP                       Subpackage directory
.fl
            Applet.html             Page fo' Applet class
.fl
            AppletContext.html      Page fo' AppletContext intercourse
.fl
            AppletStub.html         Page fo' AppletStub intercourse
.fl
            AudioClip.html          Page fo' AudioClip intercourse
.fl
          * package\-summary.html    Lists classes wit first sentence summaries fo' dis package
.fl
          * package\-frame.html      Lists classes up in dis package, used up in lower left\-hand frame
.fl
          * package\-tree.html       Lists class hierarchy fo' dis package
.fl
            package\-use             Lists where dis package is used
.fl
            \f3doc\-files\fP               Directory holdin image n' example files
.fl
            \f3class\-use\fP               Directory holdin pages API is used
.fl
                Applet.html         Page fo' usez of Applet class
.fl
                AppletContext.html  Page fo' usez of AppletContext intercourse
.fl
                AppletStub.html     Page fo' usez of AppletStub intercourse
.fl
                AudioClip.html      Page fo' usez of AudioClip intercourse
.fl
   \f3src\-html\fP                         Source code directory
.fl
       \f3java\fP                         Package directory
.fl
           \f3applet\fP                   Subpackage directory
.fl
                Applet.html         Page fo' Applet source code
.fl
                AppletContext.html  Page fo' AppletContext source code
.fl
                AppletStub.html     Page fo' AppletStub source code
.fl
                AudioClip.html      Page fo' AudioClip source code
.fl
.fi
.SS 
Generated API Declarations
.LP
Da Javadoc tool generates a thugged-out declaration all up in tha start of each class, intercourse, field, constructor, n' method description fo' dat API item. For example, tha declaration fo' tha \f2Boolean\fP class is:
.LP
\f2hood final class Boolean\fP
.br
\f2extendz Object\fP
.br
\f2implements Serializable\fP
.LP
and tha declaration fo' tha \f2Boolean.valueOf\fPmethod is:
.LP
\f2hood static Boolean valueOf(Strin s)\fP
.LP
Da Javadoc tool can include tha modifiers \f2public\fP, \f2protected\fP, \f2private\fP, \f2abstract\fP, \f2final\fP, \f2static\fP, \f2transient\fP, n' \f2volatile\fP yo, but not \f2synchronized\fP or \f2native\fP. These last two modifiers is considered implementation detail n' not part of tha API justification.
.LP
Rather than relyin on tha keyword \f2synchronized\fP, APIs should document they concurrency semantics up in tha commentz main description, as up in "a single \f2Enumeration\fP cannot be used by multiple threadz concurrently". Da document should not describe how tha fuck ta big up these semantics fo' realz. As another example, while \f2Hashtable\fP should be thread\-safe, there be a no reason ta specify dat we bust dis by synchronizin all of its exported methods. We should reserve tha right ta synchronize internally all up in tha bucket level, thus offerin higher concurrency.
.SH "DOCUMENTATION COMMENTS"
.LP
Da original gangsta "Documentation Comment Justification" can be found under related documentation.
.SS 
Commentin tha Source Code
.LP
Yo ass can include \f2documentation comments\fP ("doc comments") up in tha source code, ahead of declarations fo' any class, intercourse, method, constructor, or field. Y'all KNOW dat shit, muthafucka! Yo ass can also create doc comments fo' each package n' another one fo' tha overview, though they syntax is slightly different. Doc comments is also known informally as "Javadoc comments" (but dis term violates its trademark usage) fo' realz. A doc comment consistz of tha charactas between tha charactas \f2/**\fP dat begin tha comment n' tha charactas \f2*/\fP dat end dat shit. Leadin asterisks is allowed on each line n' is busted lyrics bout further below. Da text up in a cold-ass lil comment can continue onto multiple lines.
.nf
\f3
.fl
/**
.fl
 * This is tha typical format of a simple documentation comment
.fl
 * dat spans two lines.
.fl
 */
.fl
\fP
.fi
.LP
To save space you can put a cold-ass lil comment on one line:
.nf
\f3
.fl
/** This comment takes up only one line. */
.fl
\fP
.fi
.LP
\f3Placement of comments\fP \- Documentation comments is recognized only when placed immediately before class, intercourse, constructor, method, or field declarations \-\- peep tha class example, method example, n' field example. Documentation comments placed up in tha body of a method is ignored. Y'all KNOW dat shit, muthafucka! Only one documentation comment per declaration statement is recognized by tha Javadoc tool.
.LP
A common fuck up is ta put a \f2import\fP statement between tha class comment n' tha class declaration. I aint talkin' bout chicken n' gravy biatch fo' realz. Avoid this, as tha Javadoc tool will ignore tha class comment.
.nf
\f3
.fl
   /**
.fl
    * This is tha class comment fo' tha class Whatever.
.fl
    */
.fl

.fl
    import com.sun;   // MISTAKE \- Important not ta put import statement here
.fl

.fl
    hood class Whatever {
.fl
    }
.fl
\fP
.fi
.LP
\f3A doc comment is composed of a \fP\f4main description\fP\f3 followed by a \fP\f4tag section\fP \- Da \f2main description\fP begins afta tha startin delimita \f2/**\fP n' continues until tha tag section. I aint talkin' bout chicken n' gravy biatch. Da \f2tag section\fP starts wit tha straight-up original gangsta block tag, which is defined by tha straight-up original gangsta \f2@\fP characta dat begins a line (ignorin leadin asterisks, white space, n' leadin separator \f2/**\fP). Well shiiiit, it is possible ta git a cold-ass lil comment wit only a tag section n' no main description. I aint talkin' bout chicken n' gravy biatch. Da main description cannot continue afta tha tag section begins. Da argument ta a tag can span multiple lines. There can be any number of tags \-\- some typez of tags can be repeated while others cannot. For example, dis \f2@see\fP starts tha tag section:
.nf
\f3
.fl
/**
.fl
 * This sentence would hold tha main description fo' dis doc comment.
.fl
 * @see java.lang.Object
.fl
 */
.fl
\fP
.fi
.LP
\f3Block tags n' in\-line tags\fP \- A \f2tag\fP be a special keyword within a thugged-out doc comment dat tha Javadoc tool can process. There is two kindz of tags: block tags, which step tha fuck up as \f2@tag\fP (also known as "standalone tags"), n' in\-line tags, which step tha fuck up within curly braces, as \f2{@tag}\fP. To be interpreted, a funky-ass block tag must step tha fuck up all up in tha beginnin of a line, ignorin leadin asterisks, white space, n' separator (\f2/**\fP). This means you can use tha \f2@\fP characta elsewhere up in tha text n' it aint gonna be interpreted as tha start of a tag. If you wanna start a line wit tha \f2@\fP characta n' not have it be interpreted, use tha HTML entitizzle \f2&#064;\fP. Each block tag has associated text, which includes any text followin tha tag up ta yo, but not including, either tha next tag, or tha end of tha doc comment. This associated text can span multiple lines fo' realz. An in\-line tag be allowed n' interpreted anywhere dat text be allowed. Y'all KNOW dat shit, muthafucka! Da followin example gotz nuff tha block tag \f2@deprecated\fP n' in\-line tag \f2{@link}\fP.
.nf
\f3
.fl
/**
.fl
 * @deprecated  Az of JDK 1.1, replaced by {@link #setBounds(int,int,int,int)}
.fl
 */
.fl
\fP
.fi
.LP
\f3Comments is freestyled up in HTML\fP \- Da text must be freestyled up in HTML, up in dat they should use HTML entitizzles n' can use HTML tags. Yo ass can use whichever version of HTML yo' browser supports; our crazy asses have freestyled tha standard doclet ta generate HTML 3.2\-compliant code elsewhere (outside of tha documentation comments) wit tha inclusion of cascadin steez sheets n' frames. (We preface each generated file wit "HTML 4.0" cuz of tha frame sets.)
.LP
For example, entitizzles fo' tha less\-than (\f2<\fP) n' pimped outer\-than (\f2>\fP) symbols should be freestyled \f2<\fP n' \f2>\fP. Likewise, tha ampersand (\f2&\fP) should be freestyled \f2&\fP. Da bold HTML tag \f2<b>\fP is shown up in tha followin example.
.LP
Here be a thugged-out doc comment:
.nf
\f3
.fl
/**
.fl
 * This be a <b>doc</b> comment.
.fl
 * @see java.lang.Object
.fl
 */
.fl
\fP
.fi
.LP
\f3Leadin asterisks\fP \- When javadoc parses a thugged-out doc comment, leadin asterisk (\f2*\fP) charactas on each line is discarded; blanks n' tabs precedin tha initial asterisk (\f2*\fP) charactas is also discarded. Y'all KNOW dat shit, muthafucka! Startin wit 1.4, if you omit tha leadin asterisk on a line, tha leadin white space is no longer removed. Y'all KNOW dat shit, muthafucka! This enablez you ta paste code examplez directly tha fuck into a thugged-out doc comment inside a \f2<PRE>\fP tag, n' its indentation is ghon be honored. Y'all KNOW dat shit, muthafucka! Spaces is generally interpreted by browsers mo' uniformly than tabs. Indentation is relatizzle ta tha left margin (rather than tha separator \f2/**\fP or \f2<PRE>\fP tag).
.LP
\f3First sentence\fP \- Da first sentence of each doc comment should be a summary sentence, containin a cold-ass lil concise but complete description of tha declared entity. This sentence endz all up in tha straight-up original gangsta period dat is followed by a funky-ass blank, tab, or line terminator, or all up in tha straight-up original gangsta block tag. Da Javadoc tool copies dis first sentence ta tha member summary all up in tha top of tha HTML page.
.LP
\f3Declaration wit multiple fields\fP \- Java allows declarin multiple fieldz up in a single statement yo, but dis statement can have only one documentation comment, which is copied fo' all fields. Therefore if you want individual documentation comments fo' each field, you must declare each field up in a separate statement. For example, tha followin documentation comment don't make sense freestyled as a single declaration n' would be betta handled as two declarations:
.nf
\f3
.fl
/** 
.fl
 * Da horizontal n' vertical distancez of point (x,y)
.fl
 */
.fl
hood int x, y;      // Avoid dis  
.fl
\fP
.fi
.LP
Da Javadoc tool generates tha followin documentation from tha above code:
.nf
\f3
.fl
hood int \fP\f3x\fP
.fl
.fi
.RS 3
Da horizontal n' vertical distancez of point (x,y) 
.RE
.nf
\f3
.fl
hood int \fP\f3y\fP
.fl
.fi
.RS 3
Da horizontal n' vertical distancez of point (x,y) 
.RE
.LP
\f3Use header tags carefully\fP \- When freestylin documentation comments fo' members, itz dopest not ta use HTML headin tags like fuckin <H1> n' <H2>, cuz tha Javadoc tool creates a entire structured document n' these structural tags might interfere wit tha formattin of tha generated document. But fuck dat shiznit yo, tha word on tha street is dat it is fine ta use these headings up in class n' package comments ta provide yo' own structure.
.SS 
Automatic Copyin of Method Comments
.LP
Da Javadoc tool has tha mobilitizzle ta copy or "inherit" method comments up in classes n' intercourses under tha followin two circumstances. Constructors, fieldz n' nested classes do not inherit doc comments.
.RS 3
.TP 2
o
\f3Automatically inherit comment ta fill up in missin text\fP \- When a main description, or \f2@return\fP, \f2@param\fP or \f2@throws\fP  tag is missin from a method comment, tha Javadoc tool copies tha correspondin main description or tag comment from tha method it overrides or implements (if any), accordin ta tha algorithm below. 
.LP
Mo' specifically, when a \f2@param\fP tag fo' a particular parameta is missing, then tha comment fo' dat parameta is copied from tha method further up tha inheritizzle hierarchy. When a \f2@throws\fP tag fo' a particular exception is missing, tha \f2@throws\fP tag is copied \f2only if dat exception is declared\fP. 
.LP
This behavior contrasts wit version 1.3 n' earlier, where tha presence of any main description or tag would prevent all comments from bein inherited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  
.TP 2
o
\f3Explicitly inherit comment wit {@inheritDoc} tag\fP \- Insert tha inline tag \f2{@inheritDoc}\fP up in a method main description or \f2@return\fP, \f2@param\fP or \f2@throws\fP tag comment \-\- tha correspondin inherited main description or tag comment is copied tha fuck into dat spot. 
.RE
.LP
Da source file fo' tha inherited method need only be on tha path specified by \-sourcepath fo' tha doc comment ta straight-up be available ta copy. Neither tha class nor its package need ta be passed up in on tha command line. This contrasts wit 1.3.x n' earlier releases, where tha class had ta be a thugged-out documented class
.LP
\f3Inherit from classes n' intercourses\fP \- Inheritin of comments occurs up in all three possible casez of inheritizzle from classes n' intercourses:
.RS 3
.TP 2
o
When a method up in a cold-ass lil class overrides a method up in a superclass 
.TP 2
o
When a method up in a intercourse overrides a method up in a superinterface 
.TP 2
o
When a method up in a cold-ass lil class implements a method up in a intercourse 
.RE
.LP
In tha straight-up original gangsta two cases, fo' method overrides, tha Javadoc tool generates a subheadin "Overrides" up in tha documentation fo' tha overridin method, wit a link ta tha method it is overriding, whether or not tha comment is inherited.
.LP
In tha third case, when a method up in a given class implements a method up in a intercourse, tha Javadoc tool generates a subheadin "Specified by" up in tha documentation fo' tha overridin method, wit a link ta tha method it is implementing. This happens whether or not tha comment is inherited.
.LP
\f3Algorithm fo' Inheritin Method Comments\fP \- If a method aint gots a thugged-out doc comment, or has a {@inheritDoc} tag, tha Javadoc tool searches fo' a applicable comment rockin tha followin algorithm, which is designed ta find da most thugged-out specific applicable doc comment, givin preference ta intercourses over superclasses:
.RS 3
.TP 3
1.
Look up in each directly implemented (or extended) intercourse up in tha order they step tha fuck up followin tha word implements (or extends) up in tha method declaration. I aint talkin' bout chicken n' gravy biatch. Use tha straight-up original gangsta doc comment found fo' dis method. Y'all KNOW dat shit, muthafucka! 
.TP 3
2.
If step 1 failed ta find a thugged-out doc comment, recursively apply dis entire algorithm ta each directly implemented (or extended) intercourse, up in tha same order they was examined up in step 1. 
.TP 3
3.
If step 2 failed ta find a thugged-out doc comment n' dis be a cold-ass lil class other than Object (not a intercourse): 
.RS 3
.TP 3
a.
If tha superclass has a thugged-out doc comment fo' dis method, use dat shit. 
.TP 3
b.
If step 3a failed ta find a thugged-out doc comment, recursively apply dis entire algorithm ta tha superclass. 
.RE
.RE
.SH "JAVADOC TAGS"
.LP
Da Javadoc tool parses special tags when they is embedded within a Java doc comment. These doc tags enable you ta autogenerate a cold-ass lil complete, well\-formatted API from yo' source code. Da tags start wit a "at" sign (\f2@\fP) n' is case\-sensitizzle \-\- they must be typed wit tha uppercase n' lowercase lettas as shown. I aint talkin' bout chicken n' gravy biatch fo' realz. A tag must start all up in tha beginnin of a line (afta any leadin spaces n' a optionizzle asterisk) or it is treated as aiiight text. By convention, tags wit tha same name is grouped together n' shit. For example, put all \f2@see\fP tags together n' shit. 
.LP
Tags come up in two types:
.RS 3
.TP 2
o
\f3Block tags\fP \- Can be placed only up in tha tag section dat bigs up tha main description. I aint talkin' bout chicken n' gravy biatch. Block tags iz of tha form: \f2@tag\fP. 
.TP 2
o
\f3Inline tags\fP \- Can be placed anywhere up in tha main description or up in tha comments fo' block tags. Inline tags is denoted by curly braces: \f2{@tag}\fP. 
.RE
.LP
For shiznit bout tags we might introduce up in future releases, peep 
.na
\f2Proposed Tags\fP @
.fi
http://java.sun.com/j2se/javadoc/proposed\-tags.html.
.LP
Da current tags are:
.LP
.TS
.if \n+(b.=1 .nr d. Y'all KNOW dat shit, muthafucka! \n(.c-\n(c.-1
.de 35
.ps \n(.s
.vs \n(.vu
.in \n(.iu
.if \n(.u .fi
.if \n(.j .ad
.if \n(.j=0 .na
..
.nf
.nr #~ 0
.if n .nr #~ 0.6n
.ds #d .d
.if \(ts\n(.z\(ts\(ts .ds #d nl
.fc
.nr 33 \n(.s
.rm 80 81
.nr 80 0
.nr 38 \w\f3Tag\fP
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \w\f2@author\fP
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \w\f2{@code}\fP
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \w\f2{@docRoot}\fP
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \w\f2@deprecated\fP
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \w\f2@exception\fP
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \w\f2{@inheritDoc}\fP
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \w\f2{@link}\fP
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \w\f2{@linkplain}\fP
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \w\f2{@literal}\fP
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \w\f2@param\fP
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \w\f2@return\fP
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \w\f2@see\fP
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \w\f2@serial\fP
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \w\f2@serialData\fP
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \w\f2@serialField\fP
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \w\f2@since\fP
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \w\f2@throws\fP
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \w\f2{@value}\fP
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \w\f2@version\fP
.if \n(80<\n(38 .nr 80 \n(38
.80
.rm 80
.nr 81 0
.nr 38 \w\f3Introduced up in JDK/SDK\fP
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \w1.0
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \w1.5
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \w1.3
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \w1.0
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \w1.0
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \w1.4
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \w1.2
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \w1.4
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \w1.5
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \w1.0
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \w1.0
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \w1.0
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \w1.2
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \w1.2
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \w1.2
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \w1.1
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \w1.2
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \w1.4
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \w1.0
.if \n(81<\n(38 .nr 81 \n(38
.81
.rm 81
.nr 38 1n
.nr 79 0
.nr 40 \n(79+(0*\n(38)
.nr 80 +\n(40
.nr 41 \n(80+(3*\n(38)
.nr 81 +\n(41
.nr TW \n(81
.if t .if \n(TW>\n(.li .tm Table at line 873 file Input is too wide - \n(TW units
.fc  
.nr #T 0-1
.nr #a 0-1
.eo
.de T#
.ds #d .d
.if \(ts\n(.z\(ts\(ts .ds #d nl
.mk ##
.nr ## -1v
.ls 1
.ls
..
.ec
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f3Tag\fP\h'|\n(41u'\f3Introduced up in JDK/SDK\fP
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f2@author\fP\h'|\n(41u'1.0
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f2{@code}\fP\h'|\n(41u'1.5
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f2{@docRoot}\fP\h'|\n(41u'1.3
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f2@deprecated\fP\h'|\n(41u'1.0
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f2@exception\fP\h'|\n(41u'1.0
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f2{@inheritDoc}\fP\h'|\n(41u'1.4
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f2{@link}\fP\h'|\n(41u'1.2
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f2{@linkplain}\fP\h'|\n(41u'1.4
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f2{@literal}\fP\h'|\n(41u'1.5
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f2@param\fP\h'|\n(41u'1.0
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f2@return\fP\h'|\n(41u'1.0
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f2@see\fP\h'|\n(41u'1.0
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f2@serial\fP\h'|\n(41u'1.2
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f2@serialData\fP\h'|\n(41u'1.2
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f2@serialField\fP\h'|\n(41u'1.2
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f2@since\fP\h'|\n(41u'1.1
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f2@throws\fP\h'|\n(41u'1.2
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f2{@value}\fP\h'|\n(41u'1.4
.ta \n(80u \n(81u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f2@version\fP\h'|\n(41u'1.0
.fc
.nr T. 1
.T# 1
.35
.TE
.if \n-(b.=0 .nr c. \n(.c-\n(d.-42
.LP
For custom tags, peep tha \-tag option.
.RS 3
.TP 3
@author\  name\-text 
Addz a "Author" entry wit tha specified \f2name\-text\fP ta tha generated docs when tha \-lyricist option is used. Y'all KNOW dat shit, muthafucka! A doc comment may contain multiple \f2@author\fP tags. Yo ass can specify one name per \f2@author\fP tag or multiple names per tag. In tha forma case, tha Javadoc tool bangs a cold-ass lil comma (\f2,\fP) n' space between names. In tha latta case, tha entire text is simply copied ta tha generated document without bein parsed. Y'all KNOW dat shit, muthafucka! Therefore, you can use multiple names per line if you want a localized name separator other than comma. 
.RE
.LP
For mo' details, peep Where Tags Can Be Used n' 
.na
\f2writin @lyricist tags\fP @
.fi
http://www.oracle.com/technetwork/java/javase/documentation/index\-137868.html#@lyricist.
.LP
.RS 3
.TP 3
@deprecated\  deprecated\-text Note: Yo ass can deprecate a program element rockin tha @Deprecated annotation. I aint talkin' bout chicken n' gravy biatch.  
.RE
.LP
Addz a cold-ass lil comment indicatin dat dis API should no longer be used (even though it may continue ta work). Da Javadoc tool moves tha \f2deprecated\-text\fP ahead of tha main description, placin it up in italics n' precedin it wit a funky-ass bold warning: "Deprecated". This tag is valid up in all doc comments: overview, package, class, intercourse, constructor, method n' field.
.LP
Da first sentence of \f2deprecated\-text\fP should at least tell tha user when tha API was deprecated n' what tha fuck ta use as a replacement. Da Javadoc tool copies just tha straight-up original gangsta sentence ta tha summary section n' index. Right back up in yo muthafuckin ass. Subsequent sentences can also explain why it has been deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Yo ass should include a \f2{@link}\fP tag (for Javadoc 1.2 or later) dat points ta tha replacement API:
.LP
For mo' details, peep 
.na
\f2writin @deprecated tags\fP @
.fi
http://www.oracle.com/technetwork/java/javase/documentation/index\-137868.html#@deprecated.
.RS 3
.TP 2
o
For Javadoc 1.2 n' later, bust a \f2{@link}\fP tag. This creates tha link in\-line, where you want dat shit. For example: 
.nf
\f3
.fl
/**
.fl
 * @deprecated  Az of JDK 1.1, replaced by {@link #setBounds(int,int,int,int)}
.fl
 */
.fl
            
.fl
\fP
.fi
.TP 2
o
For Javadoc 1.1, tha standard format is ta create a \f2@see\fP tag (which cannot be in\-line) fo' each \f2@deprecated\fP tag. 
.RE
.LP
For mo' bout deprecation, peep 
.na
\f2Da @deprecated tag\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/guides/javadoc/deprecation/index.html.
.LP
.RS 3
.TP 3
{@code\  text} 
Equivalent ta \f2<code>{@literal}</code>\fP. 
.LP
Displays \f2text\fP up in \f2code\fP font without interpretin tha text as HTML markup or nested javadoc tags. This enablez you ta use regular angle brackets (\f2<\fP n' \f2>\fP) instead of tha HTML entitizzles (\f2<\fP n' \f2>\fP) up in doc comments, like fuckin up in parameta types (\f2<Object>\fP), inequalitizzles (\f23 < 4\fP), or arrows (\f2<\-\fP). For example, tha doc comment text: 
.nf
\f3
.fl
     \fP\f4{@code A<B>C}\fP\f3
.fl
          
.fl
\fP
.fi
.LP
displays up in tha generated HTML page unchanged, as: 
.nf
\f3
.fl
     \fP\f4A<B>C\fP\f3
.fl
          
.fl
\fP
.fi
.LP
Da noteworthy point is dat tha \f2<B>\fP aint interpreted as bold n' is up in code font. 
.LP
If you want tha same functionalitizzle without tha code font, use \f2{@literal}\fP. 
.LP
.TP 3
{@docRoot} 
Represents tha relatizzle path ta tha generated documentz (destination) root directory from any generated page. Well shiiiit, it is useful when you wanna include a gangbangin' file, like fuckin a cold-ass lil copyright page or company logo, dat you wanna reference from all generated pages. Linkin ta tha copyright page from tha bottom of each page is common. I aint talkin' bout chicken n' gravy biatch. 
.LP
This \f2{@docRoot}\fP tag can be used both on tha command line n' up in a thugged-out doc comment: This tag is valid up in all doc comments: overview, package, class, intercourse, constructor, method n' field, includin tha text portion of any tag (like fuckin @return, @param n' @deprecated). 
.RS 3
.TP 3
1.
On tha command line, where tha header/footer/bottom is defined: 
.nf
\f3
.fl
   javadoc \-bottom '<a href="{@docRoot}/copyright.html">Copyright</a>'
.fl
            
.fl
\fP
.fi
.LP
NOTE \- When rockin \f2{@docRoot}\fP dis way up in a make file, some makefile programs require special escapin fo' tha brace {} characters. For example, tha Inprise MAKE version 5.2 hustlin on Windows requires double braces: \f2{{@docRoot}}\fP. Well shiiiit, it also requires double (rather than single) quotes ta enclose arguments ta options like fuckin \f2\-bottom\fP (with tha quotes round tha \f2href\fP argument omitted).  
.TP 3
2.
In a thugged-out doc comment: 
.nf
\f3
.fl
   /**
.fl
    * See tha <a href="{@docRoot}/copyright.html">Copyright</a>.
.fl
    */
.fl
            
.fl
\fP
.fi
.RE
.LP
Da reason dis tag is needed is cuz tha generated docs is up in hierarchical directories, as deep as tha number of subpackages. This expression: 
.nf
\f3
.fl
  <a href="{@docRoot}/copyright.html">
.fl
          
.fl
\fP
.fi
.LP
would resolve to: 
.nf
\f3
.fl
  <a href="../../copyright.html">      fo' java/lang/Object.java
.fl
          
.fl
\fP
.fi
.LP
and 
.nf
\f3
.fl
  <a href="../../../copyright.html">   fo' java/lang/ref/Reference.java
.fl
          
.fl
\fP
.fi
.LP
.TP 3
@exception\  class\-name\  description 
Da \f2@exception\fP tag be a synonym fo' \f2@throws\fP. 
.LP
.TP 3
{@inheritDoc}\  
Inherits (copies) documentation from tha "nearest" inheritable class or implementable intercourse tha fuck into tha current doc comment at dis tagz location. I aint talkin' bout chicken n' gravy biatch. This allows you ta write mo' general comments higher up tha inheritizzle tree, n' ta write round tha copied text. 
.LP
This tag is valid only up in these places up in a thugged-out doc comment: 
.RS 3
.TP 2
o
In tha main description block of a method. Y'all KNOW dat shit, muthafucka! In dis case, tha main description is copied from a cold-ass lil class or intercourse up tha hierarchy. 
.TP 2
o
In tha text argumentz of tha @return, @param n' @throws tagz of a method. Y'all KNOW dat shit, muthafucka! In dis case, tha tag text is copied from tha correspondin tag up tha hierarchy. 
.RE
.LP
See Automatic Copyin of Method Comments fo' a mo' precise description of how tha fuck comments is found up in tha inheritizzle hierarchy. Note dat if dis tag is missing, tha comment is or aint automatically inherited accordin ta rulez busted lyrics bout up in dat section. I aint talkin' bout chicken n' gravy biatch. 
.LP
.TP 3
{@link\  package.class#member\  label} 
Inserts a in\-line link wit visible text \f2label\fP dat points ta tha documentation fo' tha specified package, class or member name of a referenced class. This tag is valid up in all doc comments: overview, package, class, intercourse, constructor, method n' field, includin tha text portion of any tag (like fuckin @return, @param n' @deprecated). 
.LP
This tag is straight-up simliar ta \f2@see\fP \-\- both require tha same references n' accept exactly tha same syntax fo' \f2package.class\fP\f2#\fP\f2member\fP n' \f2label\fP. Da main difference is dat \f2{@link}\fP generates a in\-line link rather than placin tha link up in tha "See Also" section. I aint talkin' bout chicken n' gravy biatch fo' realz. Also, tha \f2{@link}\fP tag begins n' endz wit curly braces ta separate it from tha rest of tha in\-line text. If you need ta use "}" inside tha label, use tha HTML entitizzle notation &#125; 
.LP
There is no limit ta tha number of \f2{@link}\fP tags allowed up in a sentence. Yo ass can use dis tag up in tha main description part of any documentation comment or up in tha text portion of any tag (like fuckin @deprecated, @return or @param). 
.LP
For example, here be a cold-ass lil comment dat refers ta tha \f2getComponentAt(int, int)\fP method: 
.nf
\f3
.fl
Use tha {@link #getComponentAt(int, int) getComponentAt} method.
.fl
        
.fl
\fP
.fi
.LP
From this, tha standard doclet would generate tha followin HTML (assumin it refers ta another class up in tha same package): 
.nf
\f3
.fl
Use tha <a href="Component.html#getComponentAt(int, int)">getComponentAt</a> method.
.fl
        
.fl
\fP
.fi
.LP
Which appears on tha wizzy page as: 
.nf
\f3
.fl
Use tha getComponentAt method.
.fl
        
.fl
\fP
.fi
.LP
Yo ass can extend \f2{@link}\fP ta link ta classes not bein documented by rockin tha \f2\-link\fP option. I aint talkin' bout chicken n' gravy biatch. 
.LP
For mo' details, peep 
.na
\f2writin {@link} tags\fP @
.fi
http://www.oracle.com/technetwork/java/javase/documentation/index\-137868.html#{@link}. 
.LP
.TP 3
{@linkplain\  package.class#member\  label} 
Identical ta \f2{@link}\fP, except tha linkz label is displayed up in plain text than code font. Useful when tha label is plain text. Example: 
.nf
\f3
.fl
     Refer ta {@linkplain add() tha overridden method}.
.fl
        
.fl
\fP
.fi
.LP
This would display as: 
.LP
Refer ta tha overridden method. Y'all KNOW dat shit, muthafucka! 
.LP
.TP 3
{@literal\  text} 
Displays \f2text\fP without interpretin tha text as HTML markup or nested javadoc tags. This enablez you ta use regular angle brackets (\f2<\fP n' \f2>\fP) instead of tha HTML entitizzles (\f2<\fP n' \f2>\fP) up in doc comments, like fuckin up in parameta types (\f2<Object>\fP), inequalitizzles (\f23 < 4\fP), or arrows (\f2<\-\fP). For example, tha doc comment text: 
.nf
\f3
.fl
     \fP\f4{@literal A<B>C}\fP\f3
.fl
        
.fl
\fP
.fi
.LP
displays unchanged up in tha generated HTML page up in yo' browser, as: 
.LP
\f2\ \ \ \ \ \fPA<B>C  
.LP
Da noteworthy point is dat tha \f2<B>\fP aint interpreted as bold (and it aint up in code font). 
.LP
If you want tha same functionalitizzle but wit tha text up in code font, use \f2{@code}\fP. 
.LP
.TP 3
@param\  parameter\-name description 
Addz a parameta wit tha specified \f2parameter\-name\fP followed by tha specified \f2description\fP ta tha "Parameters" section. I aint talkin' bout chicken n' gravy biatch. When freestylin tha doc comment, you may continue tha \f2description\fP onto multiple lines. This tag is valid only up in a thugged-out doc comment fo' a method, constructor or class. 
.LP
Da \f2parameter\-name\fP can be tha name of a parameta up in a method or constructor, or tha name of a type parameta of a cold-ass lil class, method or constructor. Shiiit, dis aint no joke. Use angle brackets round dis parameta name ta specify tha use of a type parameter n' shit. 
.LP
Example of a type parameta of a cold-ass lil class: 
.nf
\f3
.fl
     /**
.fl
      * @param <E> Type of element stored up in a list
.fl
      */
.fl
     hood intercourse List<E> extendz Collection<E> {
.fl
     }
.fl
        
.fl
\fP
.fi
.LP
Example of a type parameta of a method: 
.nf
\f3
.fl
     /**
.fl
      * @param strang  tha strang ta be converted
.fl
      * @param type    tha type ta convert tha strang to
.fl
      * @param <T>     tha type of tha element
.fl
      * @param <V>     tha value of tha element
.fl
      */
.fl
     <T, V extendz T> V convert(Strin string, Class<T> type) {
.fl
     }
.fl
        
.fl
\fP
.fi
.LP
For mo' details, peep 
.na
\f2writin @param tags\fP @
.fi
http://www.oracle.com/technetwork/java/javase/documentation/index\-137868.html#@param. 
.LP
.TP 3
@return\  description 
Addz a "Returns" section wit tha \f2description\fP text. This text should describe tha return type n' permissible range of joints, n' you can put dat on yo' toast. This tag is valid only up in a thugged-out doc comment fo' a method. Y'all KNOW dat shit, muthafucka! 
.LP
For mo' details, peep 
.na
\f2writin @return tags\fP @
.fi
http://www.oracle.com/technetwork/java/javase/documentation/index\-137868.html#@return, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. 
.LP
.TP 3
@see\  reference 
Addz a "See Also" headin wit a link or text entry dat points ta \f2reference\fP fo' realz. A doc comment may contain any number of \f2@see\fP tags, which is all grouped under tha same heading. Da \f2@see\fP tag has three variations; tha third form below is da most thugged-out common. I aint talkin' bout chicken n' gravy biatch. This tag is valid up in any doc comment: overview, package, class, intercourse, constructor, method or field. Y'all KNOW dat shit, muthafucka! For insertin a in\-line link within a sentence ta a package, class or member, peep \f2{@link}\fP. 
.RS 3
.TP 3
@see "string" 
Addz a text entry fo' \f2string\fP. No link is generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da \f2string\fP be a funky-ass book or other reference ta shiznit not available by URL. Da Javadoc tool distinguishes dis from tha previous cases by lookin fo' a thugged-out double\-quote (\f2"\fP) as tha straight-up original gangsta character n' shit. For example: 
.nf
\f3
.fl
     @see "Da Java Programmin Language"
.fl
            
.fl
\fP
.fi
.LP
This generates text such as:  
.RE
.RE
.RS 3
.RS 3
.RS 3
.RS 3
.TP 3
See Also: 
"Da Java Programmin Language" 
.RE
.RE
.TP 3
@see <a href="URL#value">label</a> 
Addz a link as defined by \f2URL\fP#\f2value\fP. Da \f2URL\fP#\f2value\fP be a relatizzle or absolute URL. Da Javadoc tool distinguishes dis from other cases by lookin fo' a less\-than symbol (\f2<\fP) as tha straight-up original gangsta character n' shit. For example: 
.nf
\f3
.fl
     @see <a href="spec.html#section">Java Spec</a>
.fl
\fP
.fi
This generates a link such as: 
.RS 3
.TP 3
See Also: 
Java Spec 
.RE
.TP 3
@see\  package.class#member\  label 
Addz a link, wit visible text \f2label\fP, dat points ta tha documentation fo' tha specified name up in tha Java Language dat is referenced. Y'all KNOW dat shit, muthafucka! Da \f2label\fP is optional; if omitted, tha name appears instead as tha visible text, suitably shortened \-\- peep How tha fuck a name is displayed. Y'all KNOW dat shit, muthafucka! Use \-noqualifier ta globally remove tha package name from dis visible text. Use tha label when you want tha visible text ta be different from tha auto\-generated visible text. 
.LP
Only up in version 1.2, just tha name but not tha label would automatically step tha fuck up in <code> HTML tags, Startin wit 1.2.2, tha <code> be always included round tha visible text, whether or not a label is used. Y'all KNOW dat shit, muthafucka! 
.LP
.RS 3
.TP 2
o
\f4package.class\fP\f4#\fP\f4member\fP be any valid program element name dat is referenced \-\- a package, class, intercourse, constructor, method or field name \-\- except dat tha characta ahead of tha member name should be a hash characta (\f2#\fP). Da \f2class\fP represents any top\-level or nested class or intercourse. Da \f2member\fP represents any constructor, method or field (not a nested class or intercourse). If dis name is up in tha documented classes, tha Javadoc tool will automatically create a link ta dat shit. To create links ta external referenced classes, use tha \f2\-link\fP option. I aint talkin' bout chicken n' gravy biatch. Use either of tha other two \f2@see\fP forms fo' referrin ta documentation of a name dat do not belong ta a referenced class. This argument is busted lyrics bout at pimped outa length below under Specifyin a Name. 
.TP 2
o
\f4label\fP is optionizzle text dat is visible as tha linkz label. Da \f2label\fP can contain whitespace. If \f2label\fP is omitted, then \f2package.class.member\fP will appear, suitably shortened relatizzle ta tha current class n' package \-\- peep How tha fuck a name is displayed. Y'all KNOW dat shit, muthafucka! 
.TP 2
o
A space is tha delimita between \f2package.class\fP\f2#\fP\f2member\fP n' \f2label\fP fo' realz. A space inside parentheses do not indicate tha start of a label, so spaces may be used between parametas up in a method. Y'all KNOW dat shit, muthafucka! 
.RE
.LP
\f3Example\fP \- In dis example, a \f2@see\fP tag (in tha \f2Character\fP class) refers ta tha \f2equals\fP method up in tha \f2String\fP class. Da tag includes both arguments: tha name "\f2String#equals(Object)\fP" n' tha label "\f2equals\fP". 
.nf
\f3
.fl
 /**
.fl
  * @see String#equals(Object) equals
.fl
  */
.fl
\fP
.fi
Da standard doclet produces HTML suttin' like this: 
.nf
\f3
.fl
<dl>
.fl
<dt><b>See Also:</b>
.fl
<dd><a href="../../java/lang/String#equals(java.lang.Object)"><code>equals<code></a>
.fl
</dl>
.fl
\fP
.fi
Which looks suttin' like dis up in a funky-ass browser, where tha label is tha visible link text: 
.RS 3
.TP 3
See Also: 
equals 
.RE
.LP
\f3Specifyin a name\fP \- This \f2package.class\fP\f2#\fP\f2member\fP name can be either fully\-qualified, like fuckin \f2java.lang.String#toUpperCase()\fP or not, like fuckin \f2String#toUpperCase()\fP or \f2#toUpperCase()\fP. If less than fully\-qualified, tha Javadoc tool uses tha aiiight Java compila search order ta find it, further busted lyrics bout below up in Search order fo' @see. Da name can contain whitespace within parentheses, like fuckin between method arguments, n' you can put dat on yo' toast. 
.LP
Of course tha advantage of providin shorter, "partially\-qualified" names is dat they is shorta ta type n' there is less clutta up in tha source code. Da followin table shows tha different formz of tha name, where \f2Class\fP can be a cold-ass lil class or intercourse, \f2Type\fP can be a cold-ass lil class, intercourse, array, or primitive, n' \f2method\fP can be a method or constructor. Shiiit, dis aint no joke. 
.LP
.LP
.TS
.if \n+(b.=1 .nr d. Y'all KNOW dat shit, muthafucka! \n(.c-\n(c.-1
.de 35
.ps \n(.s
.vs \n(.vu
.in \n(.iu
.if \n(.u .fi
.if \n(.j .ad
.if \n(.j=0 .na
..
.nf
.nr #~ 0
.if n .nr #~ 0.6n
.ds #d .d
.if \(ts\n(.z\(ts\(ts .ds #d nl
.fc
.nr 33 \n(.s
.rm 80
.nr 34 \n(.lu
.eo
.am 80
.br
.di a+
.35
.ft \n(.f
.ll \n(34u*1u/2u
.if \n(.l<\n(80 .ll \n(80u
.in 0
\f3Typical\ forms\ for\ \fP\f4@see\fP\f3\ \fP\f4package.class#member\fP
.br
.di
.nr a| \n(dn
.nr a- \n(dl
..
.ec \
.eo
.am 80
.br
.di b+
.35
.ft \n(.f
.ll \n(34u*1u/2u
.if \n(.l<\n(80 .ll \n(80u
.in 0
\f3Referencing\ a\ member\ of\ the\ current\ class\fP
.br
\f2@see\fP\ \f2#\fP\f2field\fP
.br
\f2@see\fP\ \f2#\fP\f2method(Type,\ Type,...)\fP
.br
\f2@see\fP\ \f2#\fP\f2method(Type\ argname,\ Type\ argname,...)\fP
.br
\f2@see\fP\ \f2#\fP\f2constructor(Type,\ Type,...)\fP
.br
\f2@see\fP\ \f2#\fP\f2constructor(Type\ argname,\ Type\ argname,...)\fP
.br
.di
.nr b| \n(dn
.nr b- \n(dl
..
.ec \
.eo
.am 80
.br
.di c+
.35
.ft \n(.f
.ll \n(34u*1u/2u
.if \n(.l<\n(80 .ll \n(80u
.in 0
\f3Referencing\ another\ class\ in\ the\ current\ or\ imported\ packages\fP
.br
\f2@see\fP\ \f2Class\fP\f2#\fP\f2field\fP
.br
\f2@see\fP\ \f2Class\fP\f2#\fP\f2method(Type,\ Type,...)\fP
.br
\f2@see\fP\ \f2Class\fP\f2#\fP\f2method(Type\ argname,\ Type\ argname,...)\fP
.br
\f2@see\fP\ \f2Class\fP\f2#\fP\f2constructor(Type,\ Type,...)\fP
.br
\f2@see\fP\ \f2Class\fP\f2#\fP\f2constructor(Type\ argname,\ Type\ argname,...)\fP
.br
\f2@see\fP\ \f2Class.NestedClass\fP
.br
\f2@see\fP\ \f2Class\fP
.br
.di
.nr c| \n(dn
.nr c- \n(dl
..
.ec \
.eo
.am 80
.br
.di d+
.35
.ft \n(.f
.ll \n(34u*1u/2u
.if \n(.l<\n(80 .ll \n(80u
.in 0
\f3Referencing\ an\ element\ in\ another\ package\fP\ (fully qualified)
.br
\f2@see\fP\ \f2package.Class\fP\f2#\fP\f2field\fP
.br
\f2@see\fP\ \f2package.Class\fP\f2#\fP\f2method(Type,\ Type,...)\fP
.br
\f2@see\fP\ \f2package.Class\fP\f2#\fP\f2method(Type\ argname,\ Type\ argname,...)\fP
.br
\f2@see\fP\ \f2package.Class\fP\f2#\fP\f2constructor(Type,\ Type,...)\fP
.br
\f2@see\fP\ \f2package.Class\fP\f2#\fP\f2constructor(Type\ argname,\ Type\ argname,...)\fP
.br
\f2@see\fP\ \f2package.Class.NestedClass\fP
.br
\f2@see\fP\ \f2package.Class\fP
.br
\f2@see\fP\ \f2package\fP
.br
.di
.nr d| \n(dn
.nr d- \n(dl
..
.ec \
.35
.nf
.ll \n(34u
.nr 80 0
.80
.rm 80
.nr 38 \n(a-
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \n(b-
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \n(c-
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \n(d-
.if \n(80<\n(38 .nr 80 \n(38
.35
.nf
.ll \n(34u
.nr 38 1n
.nr 79 0
.nr 40 \n(79+(0*\n(38)
.nr 80 +\n(40
.nr TW \n(80
.if t .if \n(TW>\n(.li .tm Table at line 1364 file Input is too wide - \n(TW units
.fc  
.nr #T 0-1
.nr #a 0-1
.eo
.de T#
.ds #d .d
.if \(ts\n(.z\(ts\(ts .ds #d nl
.mk ##
.nr ## -1v
.ls 1
.ls
..
.ec
.ne \n(a|u+\n(.Vu
.if (\n(a|+\n(#^-1v)>\n(#- .nr #- +(\n(a|+\n(#^-\n(#--1v)
.ta \n(80u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'
.mk ##
.nr 31 \n(##
.sp |\n(##u-1v
.nr 37 \n(40u
.in +\n(37u
.a+
.in -\n(37u
.mk 32
.if \n(32>\n(31 .nr 31 \n(32
.sp |\n(31u
.ne \n(b|u+\n(.Vu
.if (\n(b|+\n(#^-1v)>\n(#- .nr #- +(\n(b|+\n(#^-\n(#--1v)
.ta \n(80u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'
.mk ##
.nr 31 \n(##
.sp |\n(##u-1v
.nr 37 \n(40u
.in +\n(37u
.b+
.in -\n(37u
.mk 32
.if \n(32>\n(31 .nr 31 \n(32
.sp |\n(31u
.ne \n(c|u+\n(.Vu
.if (\n(c|+\n(#^-1v)>\n(#- .nr #- +(\n(c|+\n(#^-\n(#--1v)
.ta \n(80u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'
.mk ##
.nr 31 \n(##
.sp |\n(##u-1v
.nr 37 \n(40u
.in +\n(37u
.c+
.in -\n(37u
.mk 32
.if \n(32>\n(31 .nr 31 \n(32
.sp |\n(31u
.ne \n(d|u+\n(.Vu
.if (\n(d|+\n(#^-1v)>\n(#- .nr #- +(\n(d|+\n(#^-\n(#--1v)
.ta \n(80u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'
.mk ##
.nr 31 \n(##
.sp |\n(##u-1v
.nr 37 \n(40u
.in +\n(37u
.d+
.in -\n(37u
.mk 32
.if \n(32>\n(31 .nr 31 \n(32
.sp |\n(31u
.fc
.nr T. 1
.T# 1
.35
.rm a+
.rm b+
.rm c+
.rm d+
.TE
.if \n-(b.=0 .nr c. \n(.c-\n(d.-58
.LP
Da followin notes apply ta tha above table: 
.RS 3
.TP 2
o
Da first set of forms (with no class or package) will cause tha Javadoc tool ta search only all up in tha current classs hierarchy. Well shiiiit, it will find a gangmember of tha current class or intercourse, one of its superclasses or superinterfaces, or one of its enclosin classes or intercourses (search steps 1\-3). Well shiiiit, it aint gonna search tha rest of tha current package or other packages (search steps 4\-5). 
.TP 2
o
If any method or constructor is entered as a name wit no parentheses, like fuckin \f2getValue\fP, n' if there is no field wit tha same name, tha Javadoc tool will erectly create a link ta it yo, but will print a warnin message remindin you ta add tha parentheses n' arguments, n' you can put dat on yo' toast. If dis method is overloaded, tha Javadoc tool will link ta tha straight-up original gangsta method its search encounters, which is unspecified. Y'all KNOW dat shit, muthafucka! 
.TP 2
o
Nested classes must be specified as \f2outer\fP\f2.\fP\f2inner\fP, not simply \f2inner\fP, fo' all forms. 
.TP 2
o
As stated, tha hash characta (\f2#\fP), rather than a thugged-out dot (\f2.\fP) separates a member from its class. This enablez tha Javadoc tool ta resolve ambiguities, since tha dot also separates classes, nested classes, packages, n' subpackages. But fuck dat shiznit yo, tha word on tha street is dat tha Javadoc tool is generally lenient n' will properly parse a thugged-out dot if you know there is no ambiguity, though it will print a warning. 
.RE
.LP
\f3Search order fo' @see\fP \- tha Javadoc tool will process a \f2@see\fP tag dat appears up in a source file (.java), package file (package.html or package\-info.java) or overview file (overview.html). In tha latta two files, you must fully\-qualify tha name you supply wit \f2@see\fP. In a source file, you can specify a name dat is fully\-qualified or partially\-qualified. Y'all KNOW dat shit, muthafucka! 
.LP
When tha Javadoc tool encountas a \f2@see\fP tag up in a \f2.java\fP file dat is \f2not\fP straight-up qualified, it searches fo' tha specified name up in tha same order as tha Java compila would (except tha Javadoc tool aint gonna detect certain namespace ambiguities, since it assumes tha source code is free of these errors). This search order is formally defined up in tha \f2Java Language Justification\fP. Da Javadoc tool searches fo' dat name all up in all related n' imported classes n' packages. In particular, it searches up in dis order: 
.RS 3
.TP 3
1.
the current class or intercourse 
.TP 3
2.
any enclosin classes n' intercourses, searchin closest first 
.TP 3
3.
any superclasses n' superinterfaces, searchin closest first 
.TP 3
4.
the current package 
.TP 3
5.
any imported packages, classes n' intercourses, searchin up in tha order of tha import statement 
.RE
.LP
Da Javadoc tool continues ta search recursively all up in steps 1\-3 fo' each class it encountas until it findz a match. That is, afta it searches all up in tha current class n' its enclosin class E, it will search all up in Ez superclasses before Ez enclosin classes.  In steps 4 n' 5, tha Javadoc tool do not search classes or intercourses within a package up in any specified order (that order dependz on tha particular compiler). In step 5, tha Javadoc tool looks up in java.lang, since dat be automatically imported by all programs. 
.LP
Da Javadoc tool do not necessarily look up in subclasses, nor will it look up in other packages even if they documentation is bein generated up in tha same run. I aint talkin' bout chicken n' gravy biatch. For example, if tha \f2@see\fP tag is up in tha \f2java.awt.event.KeyEvent\fP class n' refers ta a name up in tha \f2java.awt\fP package, javadoc do not look up in dat package unless dat class imports dat shit. 
.LP
\f3How tha fuck a name is displayed\fP \- If \f2label\fP is omitted, then \f2package.class.member\fP appears. In general, it is suitably shortened relatizzle ta tha current class n' package. By "shortened", we mean tha Javadoc tool displays only tha minimum name necessary. For example, if tha \f2String.toUpperCase()\fP method gotz nuff references ta a gangmember of tha same class n' ta a gangmember of a gangbangin' finger-lickin' different class, tha class name is displayed only up in tha latta case, as shown up in tha followin table. 
.LP
Use \-noqualifier ta globally remove tha package names.
.br
.LP
.TS
.if \n+(b.=1 .nr d. Y'all KNOW dat shit, muthafucka! \n(.c-\n(c.-1
.de 35
.ps \n(.s
.vs \n(.vu
.in \n(.iu
.if \n(.u .fi
.if \n(.j .ad
.if \n(.j=0 .na
..
.nf
.nr #~ 0
.if n .nr #~ 0.6n
.ds #d .d
.if \(ts\n(.z\(ts\(ts .ds #d nl
.fc
.nr 33 \n(.s
.rm 80 81 82
.nr 34 \n(.lu
.eo
.am 81
.br
.di a+
.35
.ft \n(.f
.ll \n(34u*1u/4u
.if \n(.l<\n(81 .ll \n(81u
.in 0
\f3Example up in \fP\f4String.toUpperCase()\fP
.br
.di
.nr a| \n(dn
.nr a- \n(dl
..
.ec \
.eo
.am 80
.br
.di b+
.35
.ft \n(.f
.ll \n(34u*1u/4u
.if \n(.l<\n(80 .ll \n(80u
.in 0
\f2@see\fP tag refers ta gangmember of tha same class, same package
.br
.di
.nr b| \n(dn
.nr b- \n(dl
..
.ec \
.eo
.am 82
.br
.di c+
.35
.ft \n(.f
.ll \n(34u*1u/4u
.if \n(.l<\n(82 .ll \n(82u
.in 0
\f2toLowerCase()\fP (omits tha package n' class names)
.br
.di
.nr c| \n(dn
.nr c- \n(dl
..
.ec \
.eo
.am 80
.br
.di d+
.35
.ft \n(.f
.ll \n(34u*1u/4u
.if \n(.l<\n(80 .ll \n(80u
.in 0
\f2@see\fP tag refers ta gangmember of a gangbangin' finger-lickin' different class, same package
.br
.di
.nr d| \n(dn
.nr d- \n(dl
..
.ec \
.eo
.am 81
.br
.di e+
.35
.ft \n(.f
.ll \n(34u*1u/4u
.if \n(.l<\n(81 .ll \n(81u
.in 0
\f2@see Character#toLowerCase(char)\fP
.br
.di
.nr e| \n(dn
.nr e- \n(dl
..
.ec \
.eo
.am 82
.br
.di f+
.35
.ft \n(.f
.ll \n(34u*1u/4u
.if \n(.l<\n(82 .ll \n(82u
.in 0
\f2Character.toLowerCase(char)\fP (omits tha package name, includes tha class name)
.br
.di
.nr f| \n(dn
.nr f- \n(dl
..
.ec \
.eo
.am 80
.br
.di g+
.35
.ft \n(.f
.ll \n(34u*1u/4u
.if \n(.l<\n(80 .ll \n(80u
.in 0
\f2@see\fP tag refers ta gangmember of a gangbangin' finger-lickin' different class, different package
.br
.di
.nr g| \n(dn
.nr g- \n(dl
..
.ec \
.eo
.am 81
.br
.di h+
.35
.ft \n(.f
.ll \n(34u*1u/4u
.if \n(.l<\n(81 .ll \n(81u
.in 0
\f2@see java.io.File#exists()\fP
.br
.di
.nr h| \n(dn
.nr h- \n(dl
..
.ec \
.eo
.am 82
.br
.di i+
.35
.ft \n(.f
.ll \n(34u*1u/4u
.if \n(.l<\n(82 .ll \n(82u
.in 0
\f2java.io.File.exists()\fP (includes tha package n' class names)
.br
.di
.nr i| \n(dn
.nr i- \n(dl
..
.ec \
.35
.nf
.ll \n(34u
.nr 80 0
.nr 38 \w\f3Type of Reference\fP
.if \n(80<\n(38 .nr 80 \n(38
.80
.rm 80
.nr 38 \n(b-
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \n(d-
.if \n(80<\n(38 .nr 80 \n(38
.nr 38 \n(g-
.if \n(80<\n(38 .nr 80 \n(38
.nr 81 0
.nr 38 \w\f2@see String#toLowerCase()\fP
.if \n(81<\n(38 .nr 81 \n(38
.81
.rm 81
.nr 38 \n(a-
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \n(e-
.if \n(81<\n(38 .nr 81 \n(38
.nr 38 \n(h-
.if \n(81<\n(38 .nr 81 \n(38
.nr 82 0
.nr 38 \w\f3Displays As\fP
.if \n(82<\n(38 .nr 82 \n(38
.82
.rm 82
.nr 38 \n(c-
.if \n(82<\n(38 .nr 82 \n(38
.nr 38 \n(f-
.if \n(82<\n(38 .nr 82 \n(38
.nr 38 \n(i-
.if \n(82<\n(38 .nr 82 \n(38
.35
.nf
.ll \n(34u
.nr 38 1n
.nr 79 0
.nr 40 \n(79+(0*\n(38)
.nr 80 +\n(40
.nr 41 \n(80+(3*\n(38)
.nr 81 +\n(41
.nr 42 \n(81+(3*\n(38)
.nr 82 +\n(42
.nr TW \n(82
.if t .if \n(TW>\n(.li .tm Table at line 1440 file Input is too wide - \n(TW units
.fc  
.nr #T 0-1
.nr #a 0-1
.eo
.de T#
.ds #d .d
.if \(ts\n(.z\(ts\(ts .ds #d nl
.mk ##
.nr ## -1v
.ls 1
.ls
..
.ec
.ne \n(a|u+\n(.Vu
.if (\n(a|+\n(#^-1v)>\n(#- .nr #- +(\n(a|+\n(#^-\n(#--1v)
.ta \n(80u \n(81u \n(82u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\f3Type of Reference\fP\h'|\n(41u'\h'|\n(42u'\f3Displays As\fP
.mk ##
.nr 31 \n(##
.sp |\n(##u-1v
.nr 37 \n(41u
.in +\n(37u
.a+
.in -\n(37u
.mk 32
.if \n(32>\n(31 .nr 31 \n(32
.sp |\n(31u
.ne \n(b|u+\n(.Vu
.ne \n(c|u+\n(.Vu
.if (\n(b|+\n(#^-1v)>\n(#- .nr #- +(\n(b|+\n(#^-\n(#--1v)
.if (\n(c|+\n(#^-1v)>\n(#- .nr #- +(\n(c|+\n(#^-\n(#--1v)
.ta \n(80u \n(81u \n(82u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\h'|\n(41u'\f2@see String#toLowerCase()\fP\h'|\n(42u'
.mk ##
.nr 31 \n(##
.sp |\n(##u-1v
.nr 37 \n(40u
.in +\n(37u
.b+
.in -\n(37u
.mk 32
.if \n(32>\n(31 .nr 31 \n(32
.sp |\n(##u-1v
.nr 37 \n(42u
.in +\n(37u
.c+
.in -\n(37u
.mk 32
.if \n(32>\n(31 .nr 31 \n(32
.sp |\n(31u
.ne \n(d|u+\n(.Vu
.ne \n(e|u+\n(.Vu
.ne \n(f|u+\n(.Vu
.if (\n(d|+\n(#^-1v)>\n(#- .nr #- +(\n(d|+\n(#^-\n(#--1v)
.if (\n(e|+\n(#^-1v)>\n(#- .nr #- +(\n(e|+\n(#^-\n(#--1v)
.if (\n(f|+\n(#^-1v)>\n(#- .nr #- +(\n(f|+\n(#^-\n(#--1v)
.ta \n(80u \n(81u \n(82u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\h'|\n(41u'\h'|\n(42u'
.mk ##
.nr 31 \n(##
.sp |\n(##u-1v
.nr 37 \n(40u
.in +\n(37u
.d+
.in -\n(37u
.mk 32
.if \n(32>\n(31 .nr 31 \n(32
.sp |\n(##u-1v
.nr 37 \n(41u
.in +\n(37u
.e+
.in -\n(37u
.mk 32
.if \n(32>\n(31 .nr 31 \n(32
.sp |\n(##u-1v
.nr 37 \n(42u
.in +\n(37u
.f+
.in -\n(37u
.mk 32
.if \n(32>\n(31 .nr 31 \n(32
.sp |\n(31u
.ne \n(g|u+\n(.Vu
.ne \n(h|u+\n(.Vu
.ne \n(i|u+\n(.Vu
.if (\n(g|+\n(#^-1v)>\n(#- .nr #- +(\n(g|+\n(#^-\n(#--1v)
.if (\n(h|+\n(#^-1v)>\n(#- .nr #- +(\n(h|+\n(#^-\n(#--1v)
.if (\n(i|+\n(#^-1v)>\n(#- .nr #- +(\n(i|+\n(#^-\n(#--1v)
.ta \n(80u \n(81u \n(82u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\h'|\n(41u'\h'|\n(42u'
.mk ##
.nr 31 \n(##
.sp |\n(##u-1v
.nr 37 \n(40u
.in +\n(37u
.g+
.in -\n(37u
.mk 32
.if \n(32>\n(31 .nr 31 \n(32
.sp |\n(##u-1v
.nr 37 \n(41u
.in +\n(37u
.h+
.in -\n(37u
.mk 32
.if \n(32>\n(31 .nr 31 \n(32
.sp |\n(##u-1v
.nr 37 \n(42u
.in +\n(37u
.i+
.in -\n(37u
.mk 32
.if \n(32>\n(31 .nr 31 \n(32
.sp |\n(31u
.fc
.nr T. 1
.T# 1
.35
.rm a+
.rm b+
.rm c+
.rm d+
.rm e+
.rm f+
.rm g+
.rm h+
.rm i+
.TE
.if \n-(b.=0 .nr c. \n(.c-\n(d.-28
.LP
\f3Examplez of @see\fP
.br
Da comment ta tha right shows how tha fuck tha name would be displayed if tha \f2@see\fP tag is up in a cold-ass lil class up in another package, like fuckin \f2java.applet.Applet\fP. 
.nf
\f3
.fl
                                           See also: 
.fl
@see java.lang.Strin                   //  Strin                          \fP\f3 
.fl
@see java.lang.Strin Da Strin class  //  Da Strin class                \fP\f3 
.fl
@see Strin                             //  Strin                          \fP\f3 
.fl
@see String#equals(Object)              //  String.equals(Object)           \fP\f3 
.fl
@see String#equals                      //  String.equals(java.lang.Object) \fP\f3  
.fl
@see java.lang.Object#wait(long)        //  java.lang.Object.wait(long)     \fP\f3 
.fl
@see Character#MAX_RADIX                //  Character.MAX_RADIX             \fP\f3 
.fl
@see <a href="spec.html">Java Spec</a>  //  Java Spec           \fP\f3 
.fl
@see "Da Java Programmin Language"    //  "Da Java Programmin Language"        \fP\f3 
.fl
\fP
.fi
Yo ass can extend \f2@see\fP ta link ta classes not bein documented by rockin tha \f2\-link\fP option. I aint talkin' bout chicken n' gravy biatch. 
.LP
For mo' details, peep 
.na
\f2writin @see tags\fP @
.fi
http://www.oracle.com/technetwork/java/javase/documentation/index\-137868.html#@see.  
.RE
.RE
.LP
.RS 3
.TP 3
@serial\  field\-description | include | exclude 
Used up in tha doc comment fo' a thugged-out default serializable field. Y'all KNOW dat shit, muthafucka! 
.LP
An optionizzle \f2field\-description\fP should explain tha meanin of tha field n' list tha aaight joints, n' you can put dat on yo' toast. If needed, tha description can span multiple lines. Da standard doclet addz dis shiznit ta tha serialized form page. 
.LP
If a serializable field was added ta a cold-ass lil class some time afta tha class was made serializable, a statement should be added ta its main description ta identify at which version dat shiznit was added. Y'all KNOW dat shit, muthafucka! 
.LP
Da \f2include\fP n' \f2exclude\fP arguments identify whether a cold-ass lil class or package should be included or excluded from tha serialized form page. They work as bigs up: 
.RS 3
.TP 2
o
A hood or protected class dat implements \f2Serializable\fP is \f2included\fP unless dat class (or its package) is marked \f2@serial exclude\fP. 
.TP 2
o
A private or package\-private class dat implements \f2Serializable\fP is \f2excluded\fP unless dat class (or its package) is marked \f2@serial include\fP. 
.RE
.LP
Examples: Da \f2javax.swing\fP package is marked \f2@serial exclude\fP (in \f2package.html\fP or \f2package\-info.java\fP). Da hood class \f2java.security.BasicPermission\fP is marked \f2@serial exclude\fP. Da package\-private class \f2java.util.PropertyPermissionCollection\fP is marked \f2@serial include\fP. 
.LP
Da tag @serial at a cold-ass lil class level overrides @serial at a package level. 
.LP
For mo' shiznit bout how tha fuck ta use these tags, along wit a example, peep "
.na
\f2Documentin Serializable Fieldz n' Data fo' a Class\fP @
.fi
http://docs.oracle.com/javase/7/docs/platform/serialization/spec/serial\-arch.html," Section 1.6 of tha \f2Java Object Serialization Justification\fP fo' realz. Also peep tha 
.na
\f2Serialization FAQUIZZY\fP @
.fi
http://java.sun.com/javase/technologies/core/basic/serializationFAQ.jsp#javadoc_warn_missing, which covers common thangs, like fuckin "Why do I peep javadoc warnings statin dat I be missin @serial tags fo' private fieldz if I aint hustlin javadoc wit tha \-private switch?" fo' realz. Also peep 
.na
\f2Sunz criteria\fP @
.fi
http://java.sun.com/j2se/javadoc/writingapispecs/serialized\-criteria.html fo' includin classes up in tha serialized form justification. I aint talkin' bout chicken n' gravy biatch. 
.LP
.TP 3
@serialField\  field\-name\  field\-type\  field\-description 
Documents a \f2ObjectStreamField\fP component of a \f2Serializable\fP classs \f2serialPersistentFields\fP member n' shit. One \f2@serialField\fP tag should be used fo' each \f2ObjectStreamField\fP component. 
.LP
.TP 3
@serialData\  data\-description 
Da \f2data\-description\fP documents tha types n' order of data up in tha serialized form. Right back up in yo muthafuckin ass. Specifically, dis data includes tha optionizzle data freestyled by tha \f2writeObject\fP method n' all data (includin base classes) freestyled by tha \f2Externalizable.writeExternal\fP method. Y'all KNOW dat shit, muthafucka! 
.LP
Da \f2@serialData\fP tag can be used up in tha doc comment fo' tha \f2writeObject\fP, \f2readObject\fP, \f2writeExternal\fP, \f2readExternal\fP, \f2writeReplace\fP, n' \f2readResolve\fP methods. 
.LP
.TP 3
@since\  since\-text 
Addz a "Since" headin wit tha specified \f2since\-text\fP ta tha generated documentation. I aint talkin' bout chicken n' gravy biatch. Da text has no special internal structure. This tag is valid up in any doc comment: overview, package, class, intercourse, constructor, method or field. Y'all KNOW dat shit, muthafucka! This tag means dat dis chizzle or feature has existed since tha software release specified by tha \f2since\-text\fP. For example: 
.nf
\f3
.fl
    @since 1.5
.fl
        
.fl
\fP
.fi
.LP
For source code up in tha Java platform, dis tag indicates tha version of tha Java platform API justification (not necessarily when dat shiznit was added ta tha reference implementation). Multiple @since tags is allowed n' is treated like multiple @lyricist tags. Yo ass could use multiple tags if tha prgram element is used by mo' than one API. 
.LP
.TP 3
@throws\  class\-name\  description 
Da \f2@throws\fP n' \f2@exception\fP tags is synonyms fo' realz. Addz a "Throws" subheadin ta tha generated documentation, wit tha \f2class\-name\fP n' \f2description\fP text. Da \f2class\-name\fP is tha name of tha exception dat may be thrown by tha method. Y'all KNOW dat shit, muthafucka! This tag is valid only up in tha doc comment fo' a method or constructor. Shiiit, dis aint no joke. If dis class aint fully\-specified, tha Javadoc tool uses tha search order ta look up dis class. Multiple \f2@throws\fP tags can be used up in a given doc comment fo' tha same or different exceptions. 
.LP
To ensure dat all checked exceptions is documented, if a \f2@throws\fP tag do not exist fo' a exception up in tha throws clause, tha Javadoc tool automatically addz dat exception ta tha HTML output (with no description) as if it was documented wit @throws tag. 
.LP
Da \f2@throws\fP documentation is copied from a overridden method ta a subclass only when tha exception is explicitly declared up in tha overridden method. Y'all KNOW dat shit, muthafucka! Da same is legit fo' copyin from a intercourse method ta a implementin method. Y'all KNOW dat shit, muthafucka! Yo ass can use {@inheritDoc} ta force @throws ta inherit documentation. I aint talkin' bout chicken n' gravy biatch. 
.LP
For mo' details, peep 
.na
\f2writin @throws tags\fP @
.fi
http://www.oracle.com/technetwork/java/javase/documentation/index\-137868.html#@exception. I aint talkin' bout chicken n' gravy biatch. 
.LP
.TP 3
{@value\  package.class#field} 
When \f2{@value}\fP is used (without any argument) up in tha doc comment of a static field, it displays tha value of dat constant: 
.nf
\f3
.fl
    /**
.fl
     * Da value of dis constant is {@value}.
.fl
     */
.fl
    hood static final Strin SCRIPT_START = "<script>"
.fl
        
.fl
\fP
.fi
.LP
When used wit argument \f2package.class#field\fP up in any doc comment, it displays tha value of tha specified constant: 
.nf
\f3
.fl
    /**
.fl
     * Evaluates tha script startin wit {@value #SCRIPT_START}.
.fl
     */
.fl
    hood Strin evalScript(Strin script) {
.fl
    }
.fl
        
.fl
\fP
.fi
.LP
Da argument \f2package.class#field\fP takes a gangbangin' form identical ta dat of tha @see argument, except dat tha member must be a static field. Y'all KNOW dat shit, muthafucka! 
.LP
These jointz of these constants is also displayed on tha 
.na
\f2Constant Field Values\fP @
.fi
http://docs.oracle.com/javase/7/docs/api/constant\-values.html page. 
.LP
.TP 3
@version\  version\-text 
Addz a "Version" subheadin wit tha specified \f2version\-text\fP ta tha generated docs when tha \-version option is used. Y'all KNOW dat shit, muthafucka! This tag is intended ta hold tha current version number of tha software dat dis code is part of (as opposed ta @since, which holdz tha version number where dis code was introduced). Da \f2version\-text\fP has no special internal structure. To peep where tha version tag can be used, peep Where Tags Can Be Used. Y'all KNOW dat shit, muthafucka! 
.LP
A doc comment may contain multiple \f2@version\fP tags. If it make sense, you can specify one version number per \f2@version\fP tag or multiple version numbers per tag. In tha forma case, tha Javadoc tool bangs a cold-ass lil comma (\f2,\fP) n' space between names. In tha latta case, tha entire text is simply copied ta tha generated document without bein parsed. Y'all KNOW dat shit, muthafucka! Therefore, you can use multiple names per line if you want a localized name separator other than comma. 
.LP
For mo' details, peep 
.na
\f2writin @version tags\fP @
.fi
http://www.oracle.com/technetwork/java/javase/documentation/index\-137868.html#@version. I aint talkin' bout chicken n' gravy biatch.  
.RE
.SS 
Where Tags Can Be Used
.LP
Da followin sections describe where tha tags can be used. Y'all KNOW dat shit, muthafucka! Note dat these tags can be used up in all doc comments: \f2@see\fP, \f2@since\fP, \f2@deprecated\fP, \f2{@link}\fP, \f2{@linkplain}\fP, n' \f2{@docroot}\fP.
.SS 
Overview Documentation Tags
.LP
Overview tags is tags dat can step tha fuck up in tha documentation comment fo' tha overview page (which resides up in tha source file typically named \f2overview.html\fP). Like up in any other documentation comments, these tags must step tha fuck up afta tha main description.
.LP
\f3NOTE\fP \- Da \f2{@link}\fP tag has a funky-ass bug up in overview documents up in version 1.2 \-\- tha text appears properly but has no link. Da \f2{@docRoot}\fP tag do not currently work up in overview documents.
.LP
\f3Overview Tags\fP
.RS 3
.TP 2
o
\f2@see\fP 
.TP 2
o
\f2@since\fP 
.TP 2
o
\f2@author\fP 
.TP 2
o
\f2@version\fP 
.TP 2
o
\f2{@link}\fP 
.TP 2
o
\f2{@linkplain}\fP 
.TP 2
o
\f2{@docRoot}\fP 
.RE
.SS 
Package Documentation Tags
.LP
Package tags is tags dat can step tha fuck up in tha documentation comment fo' a package (which resides up in tha source file named \f2package.html\fP or \f2package\-info.java\fP). Da \f2@serial\fP tag can only be used here wit tha \f2include\fP or \f2exclude\fP argument.
.LP
\f3Package Tags\fP
.RS 3
.TP 2
o
\f2@see\fP 
.TP 2
o
\f2@since\fP 
.TP 2
o
\f2@serial\fP 
.TP 2
o
\f2@author\fP 
.TP 2
o
\f2@version\fP 
.TP 2
o
\f2{@link}\fP 
.TP 2
o
\f2{@linkplain}\fP 
.TP 2
o
\f2{@docRoot}\fP 
.RE
.SS 
Class n' Interface Documentation Tags
.LP
Da followin is tags dat can step tha fuck up in tha documentation comment fo' a cold-ass lil class or intercourse. Da \f2@serial\fP tag can only be used here wit tha \f2include\fP or \f2exclude\fP argument.
.LP
\f3Class/Interface Tags\fP
.RS 3
.TP 2
o
\f2@see\fP 
.TP 2
o
\f2@since\fP 
.TP 2
o
\f2@deprecated\fP 
.TP 2
o
\f2@serial\fP 
.TP 2
o
\f2@author\fP 
.TP 2
o
\f2@version\fP 
.TP 2
o
\f2{@link}\fP 
.TP 2
o
\f2{@linkplain}\fP  
.TP 2
o
\f2{@docRoot}\fP 
.RE
\f3An example of a cold-ass lil class comment:\fP
.nf
\f3
.fl
/**
.fl
 * A class representin a window on tha screen.
.fl
 * For example:
.fl
 * <pre>
.fl
 *    Window win = freshly smoked up Window(parent);
.fl
 *    win.show();
.fl
 * </pre>
.fl
 *
.fl
 * @lyricist  Sami Shaio
.fl
 * @version 1.13, 06/08/06
.fl
 * @see     java.awt.BaseWindow
.fl
 * @see     java.awt.Button
.fl
 */
.fl
class Window extendz BaseWindow {
.fl
   ...
.fl
}
.fl
\fP
.fi
.SS 
Field Documentation Tags
.LP
Da followin is tha tags dat can step tha fuck up in
.LP
\f3Field Tags\fP
.RS 3
.TP 2
o
\f2@see\fP 
.TP 2
o
\f2@since\fP 
.TP 2
o
\f2@deprecated\fP 
.TP 2
o
\f2@serial\fP 
.TP 2
o
\f2@serialField\fP 
.TP 2
o
\f2{@link}\fP 
.TP 2
o
\f2{@linkplain}\fP 
.TP 2
o
\f2{@docRoot}\fP 
.TP 2
o
\f2{@value}\fP 
.RE
\f3An example of a gangbangin' field comment:\fP
.nf
\f3
.fl
    /**
.fl
     * Da X\-coordinizzle of tha component.
.fl
     *
.fl
     * @see #getLocation()
.fl
     */
.fl
    int x = 1263732;
.fl
\fP
.fi
.SS 
Constructor n' Method Documentation Tags
.LP
Da followin is tha tags dat can step tha fuck up in tha documentation comment fo' a cold-ass lil constructor or method, except fo' \f2@return\fP, which cannot step tha fuck up in a cold-ass lil constructor, n' \f2{@inheritDoc}\fP, which has certain restrictions. Da \f2@serialData\fP tag can only be used up in tha doc comment fo' certain serialization methods.
.LP
\f3Method/Constructor Tags\fP
.RS 3
.TP 2
o
\f2@see\fP 
.TP 2
o
\f2@since\fP 
.TP 2
o
\f2@deprecated\fP 
.TP 2
o
\f2@param\fP 
.TP 2
o
\f2@return\fP 
.TP 2
o
\f2@throws\fP n' \f2@exception\fP 
.TP 2
o
\f2@serialData\fP 
.TP 2
o
\f2{@link}\fP 
.TP 2
o
\f2{@linkplain}\fP 
.TP 2
o
\f2{@inheritDoc}\fP 
.TP 2
o
\f2{@docRoot}\fP 
.RE
\f3An example of a method doc comment:\fP
.nf
\f3
.fl
    /**
.fl
     * Returns tha characta all up in tha specified index fo' realz. An index 
.fl
     * ranges from <code>0</code> ta <code>length() \- 1</code>.
.fl
     *
.fl
     * @param     index  tha index of tha desired character.
.fl
     * @return    tha desired character.
.fl
     * @exception StringIndexOutOfRangeException 
.fl
     *              if tha index aint up in tha range <code>0</code> 
.fl
     *              ta <code>length()\-1</code>.
.fl
     * @see       java.lang.Character#charValue()
.fl
     */
.fl
    hood char charAt(int index) {
.fl
       ...
.fl
    }
.fl
\fP
.fi
.SH "OPTIONS"
.LP
Da javadoc tool uses doclets ta determine its output. Da Javadoc tool uses tha default standard doclet unless a cold-ass lil custom doclet is specified wit tha \-doclet option. I aint talkin' bout chicken n' gravy biatch. Da Javadoc tool serves up a set of command\-line options dat can be used wit any doclet \-\- these options is busted lyrics bout below under tha sub\-headin Javadoc Options. Da standard doclet serves up a additionizzle set of command\-line options dat is busted lyrics bout below under tha sub\-headin Options Provided by tha Standard Doclet fo' realz. All option names is case\-insensitive, though they arguments can be case\-sensitive.
.LP
Da options are:
.LP
.TS
.if \n+(b.=1 .nr d. Y'all KNOW dat shit, muthafucka! \n(.c-\n(c.-1
.de 35
.ps \n(.s
.vs \n(.vu
.in \n(.iu
.if \n(.u .fi
.if \n(.j .ad
.if \n(.j=0 .na
..
.nf
.nr #~ 0
.if n .nr #~ 0.6n
.ds #d .d
.if \(ts\n(.z\(ts\(ts .ds #d nl
.fc
.nr 33 \n(.s
.rm 80 81 82
.nr 34 \n(.lu
.eo
.am 80
.br
.di a+
.35
.ft \n(.f
.ll \n(34u*1u/4u
.if \n(.l<\n(80 .ll \n(80u
.in 0
\-\f21.1\fP
.br
\-author
.br
\-\f2bootclasspath\fP
.br
\-bottom
.br
\-\f2breakiterator\fP
.br
\-charset
.br
\-\f2classpath\fP
.br
\-d
.br
\-docencoding
.br
\-docfilessubdirs
.br
\-\f2doclet\fP
.br
\-\f2docletpath\fP
.br
\-doctitle
.br
\-\f2encoding\fP
.br
\-\f2exclude\fP
.br
\-excludedocfilessubdir
.br
\-\f2extdirs\fP
.br
\-footer
.br
\-group
.br
.br
.di
.nr a| \n(dn
.nr a- \n(dl
..
.ec \
.eo
.am 81
.br
.di b+
.35
.ft \n(.f
.ll \n(34u*1u/4u
.if \n(.l<\n(81 .ll \n(81u
.in 0
\-header
.br
\-\f2help\fP
.br
\-helpfile
.br
\-\f2J\fP
.br
\-keywords
.br
\-link
.br
\-linkoffline
.br
\-linksource
.br
\-\f2locale\fP
.br
\-nocomment
.br
\-nodeprecated
.br
\-nodeprecatedlist
.br
\-nohelp
.br
\-noindex
.br
\-nonavbar
.br
\-noqualifier
.br
\-nosince
.br
\-notimestamp
.br
\-notree
.br
\-\f2overview\fP
.br
\-\f2package\fP
.br
.br
.di
.nr b| \n(dn
.nr b- \n(dl
..
.ec \
.eo
.am 82
.br
.di c+
.35
.ft \n(.f
.ll \n(34u*1u/4u
.if \n(.l<\n(82 .ll \n(82u
.in 0
\-\f2private\fP
.br
\-\f2protected\fP
.br
\-\f2public\fP
.br
\-\f2quiet\fP
.br
\-serialwarn
.br
\-\f2source\fP
.br
\-\f2sourcepath\fP
.br
\-sourcetab
.br
\-splitindex
.br
\-stylesheetfile
.br
\-\f2subpackages\fP
.br
\-tag
.br
\-taglet
.br
\-tagletpath
.br
\-top
.br
\-title
.br
\-use
.br
\-\f2verbose\fP
.br
\-version
.br
\-windowtitle
.br
.br
.di
.nr c| \n(dn
.nr c- \n(dl
..
.ec \
.35
.nf
.ll \n(34u
.nr 80 0
.80
.rm 80
.nr 38 \n(a-
.if \n(80<\n(38 .nr 80 \n(38
.nr 81 0
.81
.rm 81
.nr 38 \n(b-
.if \n(81<\n(38 .nr 81 \n(38
.nr 82 0
.82
.rm 82
.nr 38 \n(c-
.if \n(82<\n(38 .nr 82 \n(38
.35
.nf
.ll \n(34u
.nr 38 1n
.nr 79 0
.nr 40 \n(79+(0*\n(38)
.nr 80 +\n(40
.nr 41 \n(80+(3*\n(38)
.nr 81 +\n(41
.nr 42 \n(81+(3*\n(38)
.nr 82 +\n(42
.nr TW \n(82
.if t .if \n(TW>\n(.li .tm Table at line 2015 file Input is too wide - \n(TW units
.fc  
.nr #T 0-1
.nr #a 0-1
.eo
.de T#
.ds #d .d
.if \(ts\n(.z\(ts\(ts .ds #d nl
.mk ##
.nr ## -1v
.ls 1
.ls
..
.ec
.ne \n(a|u+\n(.Vu
.ne \n(b|u+\n(.Vu
.ne \n(c|u+\n(.Vu
.if (\n(a|+\n(#^-1v)>\n(#- .nr #- +(\n(a|+\n(#^-\n(#--1v)
.if (\n(b|+\n(#^-1v)>\n(#- .nr #- +(\n(b|+\n(#^-\n(#--1v)
.if (\n(c|+\n(#^-1v)>\n(#- .nr #- +(\n(c|+\n(#^-\n(#--1v)
.ta \n(80u \n(81u \n(82u 
.nr 31 \n(.f
.nr 35 1m
\&\h'|\n(40u'\h'|\n(41u'\h'|\n(42u'
.mk ##
.nr 31 \n(##
.sp |\n(##u-1v
.nr 37 \n(40u
.in +\n(37u
.a+
.in -\n(37u
.mk 32
.if \n(32>\n(31 .nr 31 \n(32
.sp |\n(##u-1v
.nr 37 \n(41u
.in +\n(37u
.b+
.in -\n(37u
.mk 32
.if \n(32>\n(31 .nr 31 \n(32
.sp |\n(##u-1v
.nr 37 \n(42u
.in +\n(37u
.c+
.in -\n(37u
.mk 32
.if \n(32>\n(31 .nr 31 \n(32
.sp |\n(31u
.fc
.nr T. 1
.T# 1
.35
.rm a+
.rm b+
.rm c+
.TE
.if \n-(b.=0 .nr c. \n(.c-\n(d.-127
.LP
Options shown up in \f2italic\fP is tha Javadoc core options, which is provided by tha front end of tha Javadoc tool n' is available ta all doclets, n' you can put dat on yo' toast. Da standard doclet itself serves up tha non\-italic options.
.SS 
Javadoc Options
.RS 3
.TP 3
\-overview \ path/filename 
Specifies dat javadoc should retrieve tha text fo' tha overview documentation from tha "source" file specified by \f2path/filename\fP n' place it on tha Overview page (\f2overview\-summary.html\fP). Da \f2path/filename\fP is relatizzle ta tha current directory.
.br
.br
While you can use any name you want fo' \f2filename\fP n' place it anywhere you want fo' \f2path\fP, a typical thang ta do is ta name it \f2overview.html\fP n' place it up in tha source tree all up in tha directory dat gotz nuff tha topmost package directories. Put ya muthafuckin choppers up if ya feel dis! In dis location, no \f2path\fP is needed when documentin packages, since \f2\-sourcepath\fP will point ta dis file. For example, if tha source tree fo' tha \f2java.lang\fP package is \f2/src/classes/java/lang/\fP, then you could place tha overview file at \f2/src/classes/overview.html\fP. Right back up in yo muthafuckin ass. See Real Ghetto Example.
.br
.br
For shiznit bout tha file specified by \f2path/filename\fP, peep overview comment file.
.br
.br
Note dat tha overview page is pimped only if you pass tha fuck into javadoc two or mo' package names. For further explanation, peep HTML Frames.)
.br
.br
Da title on tha overview page is set by \f2\-doctitle\fP.  
.TP 3
\-hood 
Shows only hood classes n' members.  
.TP 3
\-protected 
Shows only protected n' hood classes n' members. This is tha default.  
.TP 3
\-package 
Shows only package, protected, n' hood classes n' members.  
.TP 3
\-private 
Shows all classes n' members.  
.TP 3
\-help 
Displays tha online help, which lists these javadoc n' doclet command line options.  
.TP 3
\-doclet\  class 
Specifies tha class file dat starts tha doclet used up in generatin tha documentation. I aint talkin' bout chicken n' gravy biatch. Use tha fully\-qualified name. This doclet defines tha content n' formats tha output. If tha \f4\-doclet\fP option aint used, javadoc uses tha standard doclet fo' generatin tha default HTML format. This class must contain tha \f2start(Root)\fP method. Y'all KNOW dat shit, muthafucka! Da path ta dis startin class is defined by tha \f2\-docletpath\fP option.
.br
.br
For example, ta booty-call tha MIF doclet, use: 
.nf
\f3
.fl
    \-doclet com.sun.tools.doclets.mif.MIFDoclet
.fl
\fP
.fi
For full, hustlin examplez of hustlin a particular doclet, peep tha 
.na
\f2MIF Doclet documentation\fP @
.fi
http://java.sun.com/j2se/javadoc/mifdoclet/docs/mifdoclet.html.  
.TP 3
\-docletpath\  classpathlist 
Specifies tha path ta tha doclet startin class file (specified wit tha \f2\-doclet\fP option) n' any jar filez it dependz on. I aint talkin' bout chicken n' gravy biatch. If tha startin class file is up in a jar file, then dis specifies tha path ta dat jar file, as shown up in tha example below. Yo ass can specify a absolute path or a path relatizzle ta tha current directory. If \f2classpathlist\fP gotz nuff multiple paths or jar files, they should be separated wit a cold-ass lil colon (:) on Solaris n' a semi\-colon (;) on Windows. This option aint necessary if tha doclet startin class be already up in tha search path.
.br
.br
Example of path ta jar file dat gotz nuff tha startin doclet class file. Notice tha jar filename is included. Y'all KNOW dat shit, muthafucka! 
.nf
\f3
.fl
   \-docletpath /home/user/mifdoclet/lib/mifdoclet.jar
.fl
\fP
.fi
Example of path ta startin doclet class file. Notice tha class filename is omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
.nf
\f3
.fl
   \-docletpath /home/user/mifdoclet/classes/com/sun/tools/doclets/mif/
.fl
\fP
.fi
For full, hustlin examplez of hustlin a particular doclet, peep tha 
.na
\f2MIF Doclet documentation\fP @
.fi
http://java.sun.com/j2se/javadoc/mifdoclet/docs/mifdoclet.html.  
.TP 3
\-1.1 
\f2This feature has been removed from Javadoc 1.4. There is no replacement fo' dat shit. This option pimped documentation wit tha appearizzle n' functionalitizzle of documentation generated by Javadoc 1.1 (it never supported nested classes). If you need dis option, use Javadoc 1.2 or 1.3 instead.\fP  
.TP 3
\-source release 
Specifies tha version of source code accepted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da followin joints fo' \f2release\fP is allowed: 
.RS 3
.TP 2
o
\f31.5\fP \- javadoc accepts code containin generics n' other language features introduced up in JDK 1.5. Da compila defaults ta tha 1.5 behavior if tha \f3\-source\fP flag aint used. Y'all KNOW dat shit, muthafucka! 
.TP 2
o
\f31.4\fP \- javadoc accepts code containin assertions, which was introduced up in JDK 1.4. 
.TP 2
o
\f31.3\fP \- javadoc do \f2not\fP support assertions, generics, or other language features introduced afta JDK 1.3. 
.RE
Use tha value of \f2release\fP correspondin ta dat used when compilin tha code wit javac.  
.TP 3
\-sourcepath\  sourcepathlist 
Specifies tha search paths fo' findin source filez (\f2.java\fP) when passin package names or \f2\-subpackages\fP tha fuck into tha \f2javadoc\fP command. Y'all KNOW dat shit, muthafucka! Da \f2sourcepathlist\fP can contain multiple paths by separatin dem wit a cold-ass lil colon (\f2:\fP). Da Javadoc tool will search up in all subdirectoriez of tha specified paths. Note dat dis option aint only used ta locate tha source filez bein documented yo, but also ta find source filez dat is not bein documented but whose comments is inherited by tha source filez bein documented.
.br
.br
Note dat you can use tha \f2\-sourcepath\fP option only when passin package names tha fuck into tha javadoc command \-\- it aint gonna locate \f2.java\fP filez passed tha fuck into tha \f2javadoc\fP command. Y'all KNOW dat shit, muthafucka! (To locate \f2.java\fP files, cd ta dat directory or include tha path ahead of each file, as shown at Documentin One or Mo' Classes.) If \f2\-sourcepath\fP is omitted, javadoc uses tha class path ta find tha source filez (see \-classpath). Therefore, tha default \-sourcepath is tha value of class path. If \-classpath is omitted n' yo ass is passin package names tha fuck into javadoc, it looks up in tha current directory (and subdirectories) fo' tha source files.
.br
.br
Set \f2sourcepathlist\fP ta tha root directory of tha source tree fo' tha package yo ass is documenting. For example, suppose you wanna document a package called \f2com.mypackage\fP whose source filez is located at: 
.nf
\f3
.fl
  /home/user/src/com/mypackage/*.java
.fl
\fP
.fi
In dis case you would specify tha \f2sourcepath\fP ta \f2/home/user/src\fP, tha directory dat gotz nuff \f2com/mypackage\fP, n' then supply tha package name \f2com.mypackage\fP: 
.nf
\f3
.fl
  % \fP\f3javadoc \-sourcepath /home/user/src/ com.mypackage\fP
.fl
.fi
This is easy as fuck  ta remember by noticin dat if you concatenate tha value of sourcepath n' tha package name together n' chizzle tha dot ta a slash "/", you end up wit tha full path ta tha package: \f2/home/user/src/com/mypackage\fP.
.br
.br
To point ta two source paths: 
.nf
\f3
.fl
  % \fP\f3javadoc \-sourcepath /home/user1/src:/home/user2/src com.mypackage\fP
.fl
.fi
.TP 3
\-classpath\  classpathlist 
Specifies tha paths where javadoc will look fo' referenced classes (\f2.class\fP files) \-\- these is tha documented classes plus any classes referenced by dem classes. Da \f2classpathlist\fP can contain multiple paths by separatin dem wit a cold-ass lil colon (\f2:\fP). Da Javadoc tool will search up in all subdirectoriez of tha specified paths. Big up tha instructions up in 
.na
\f2class path\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/tools/index.html#general documentation fo' specifyin \f2classpathlist\fP.
.br
.br
If \f2\-sourcepath\fP is omitted, tha Javadoc tool uses \f2\-classpath\fP ta find tha source filez as well as class filez (for backward compatibility). Therefore, if you wanna search fo' source n' class filez up in separate paths, use both \f2\-sourcepath\fP n' \f2\-classpath\fP.
.br
.br
For example, if you wanna document \f2com.mypackage\fP, whose source filez reside up in tha directory \f2/home/user/src/com/mypackage\fP, n' if dis package relies on a library up in \f2/home/user/lib\fP, you would specify: 
.nf
\f3
.fl
  % \fP\f3javadoc \-classpath /home/user/lib \-sourcepath /home/user/src com.mypackage\fP
.fl
.fi
As wit other tools, if you do not specify \f2\-classpath\fP, tha Javadoc tool uses tha CLASSPATH environment variable, if it is set. If both is not set, tha Javadoc tool searches fo' classes from tha current directory.
.br
.br
For a in\-depth description of how tha fuck tha Javadoc tool uses \f2\-classpath\fP ta find user classes as it relates ta extension classes n' bootstrap classes, peep 
.na
\f2How tha fuck Classes Is Found\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/tools/findingclasses.html.  
.br
.br
As a special convenience, a cold-ass lil class path element containin a funky-ass basename of \f2*\fP is considered equivalent ta specifyin a list of all tha filez up in tha directory wit tha extension \f2.jar\fP or \f2.JAR\fP (a Java program cannot tell tha difference between tha two invocations).
.br
.br
For example, if directory \f2foo\fP gotz nuff \f2a.jar\fP n' \f2b.JAR\fP, then tha class path element \f2foo/*\fP is expanded ta a \f2A.jar:b.JAR\fP, except dat tha order of jar filez is unspecified. Y'all KNOW dat shit, muthafucka! All jar filez up in tha specified directory, even hidden ones, is included up in tha list fo' realz. A classpath entry consistin simply of \f2*\fP expandz ta a list of all tha jar filez up in tha current directory. Da \f2CLASSPATH\fP environment variable, where defined, is ghon be similarly expanded. Y'all KNOW dat shit, muthafucka! Any classpath wildcard expansion occurs before tha Java virtual machine is started \-\- no Java program will eva peep unexpanded wildcardz except by queryin tha environment. For example; by invokin \f2System.getenv("CLASSPATH")\fP.   
.TP 3
\-subpackages\ \ package1:package2:... 
Generates documentation from source filez up in tha specified packages n' recursively up in they subpackages. This option is useful when addin freshly smoked up subpackages ta tha source code, as they is automatically included. Y'all KNOW dat shit, muthafucka! Each \f2package\fP argument be any top\-level subpackage (like fuckin \f2java\fP) or straight-up qualified package (like fuckin \f2javax.swing\fP) dat do not need ta contain source filez fo' realz. Arguments is separated by colons (on all operatin systmes). Wildcardz is not needed or allowed. Y'all KNOW dat shit, muthafucka! Use \f2\-sourcepath\fP ta specify where ta find tha packages. This option is smart-ass bout not processin source filez dat is up in tha source tree but do not belong ta tha packages, as busted lyrics bout at processin of source files.
.br
.br
For example: 
.nf
\f3
.fl
  % \fP\f3javadoc \-d docs \-sourcepath /home/user/src \-subpackages java:javax.swing\fP
.fl
.fi
This command generates documentation fo' packages named "java" n' "javax.swing" n' all they subpackages.
.br
.br
Yo ass can use \f2\-subpackages\fP up in conjunction wit \f2\-exclude\fP ta exclude specific packages.  
.TP 3
\-exclude\ \ packagename1:packagename2:... 
Unconditionally excludes tha specified packages n' they subpackages from tha list formed by \f2\-subpackages\fP. Well shiiiit, it excludes dem packages even if they would otherwise be included by some previous or lata \f2\-subpackages\fP option. I aint talkin' bout chicken n' gravy biatch. For example: 
.nf
\f3
.fl
  % \fP\f3javadoc \-sourcepath /home/user/src \-subpackages java \-exclude java.net:java.lang\fP
.fl
.fi
would include \f2java.io\fP, \f2java.util\fP, n' \f2java.math\fP (among others) yo, but would exclude packages rooted at \f2java.net\fP n' \f2java.lang\fP. Notice dis excludes \f2java.lang.ref\fP, a subpackage of \f2java.lang\fP).  
.TP 3
\-bootclasspath\  classpathlist 
Specifies tha paths where tha boot classes reside. These is nominally tha Java platform classes. Da bootclasspath is part of tha search path tha Javadoc tool will use ta look up source n' class files. Right back up in yo muthafuckin ass. See 
.na
\f2How tha fuck Classes Is Found\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/tools/findingclasses.html#srcfiles. fo' mo' details. Right back up in yo muthafuckin ass. Separate directories up in \f2classpathlist\fP wit colons (:).  
.TP 3
\-extdirs\  dirlist 
Specifies tha directories where extension classes reside. These is any classes dat use tha Java Extension mechanism. Da extdirs is part of tha search path tha Javadoc tool will use ta look up source n' class files. Right back up in yo muthafuckin ass. See \f2\-classpath\fP (above) fo' mo' details. Right back up in yo muthafuckin ass. Separate directories up in \f2dirlist\fP wit colons (:).  
.TP 3
\-verbose 
Provides mo' detailed lyrics while javadoc is hustlin. Without tha verbose option, lyrics step tha fuck up fo' loadin tha source files, generatin tha documentation (one message per source file), n' sorting. Da verbose option causes tha printin of additionizzle lyrics specifyin tha number of millisecondz ta parse each java source file.  
.TP 3
\-quiet 
Shuts off non\-error n' non\-warnin lyrics, leavin only tha warnings n' errors appear, makin dem easier ta view fo' realz. Also suppresses tha version string.  
.TP 3
\-breakiterator\  
Uses tha internationalized sentence boundary of 
.na
\f2java.text.BreakIterator\fP @
.fi
http://docs.oracle.com/javase/7/docs/api/java/text/BreakIterator.html ta determine tha end of tha straight-up original gangsta sentence fo' Gangsta (all other localez already use \f2BreakIterator\fP), rather than a Gangsta language, locale\-specific algorithm. By \f2first sentence\fP, we mean tha straight-up original gangsta sentence up in tha main description of a package, class or member n' shit. This sentence is copied ta tha package, class or member summary, n' ta tha alphabetic index.
.br
.br
From JDK 1.2 forward, tha BreakIterator class be already used ta determine tha end of sentence fo' all languages but Gangsta. Therefore, tha \f2\-breakiterator\fP option has no effect except fo' Gangsta from 1.2 forward. Y'all KNOW dat shit, muthafucka! Gangsta has its own default algorithm: 
.RS 3
.TP 2
o
Gangsta default sentence\-break algorithm \- Stops at a period followed by a space or a HTML block tag, like fuckin \f2<P>\fP. 
.TP 2
o
Breakiterator sentence\-break algorithm \- In general, stops at a period, question mark or exclamation mark followed by a space if tha next word starts wit a cold-ass lil capital letter n' shit. This is meant ta handle most abbreviations (like fuckin "Da serial no. is valid" yo, but won't handle "Mista Muthafuckin Right back up in yo muthafuckin ass. Smizzle"). Don't stop at HTML tags or sentences dat begin wit numbers or symbols. Right back up in yo muthafuckin ass. Stops all up in tha last period up in "../filename", even if embedded up in a HTML tag. 
.RE
NOTE: Our thugged-out asses have removed from 1.5.0 tha breakiterator warnin lyrics dat was up in 1.4.x n' have left tha default sentence\-break algorithm unchanged. Y'all KNOW dat shit, muthafucka! That is, tha \-breakiterator option aint tha default up in 1.5.0, nor do we expect it ta become tha default. This be a reversal from our forma intention dat tha default would chizzle up in tha "next major release" (1.5.0). This means if you aint modified yo' source code ta eliminizzle tha breakiterator warnings up in 1.4.x, then you don't gotta do anything, n' tha warnings go away startin wit 1.5.0. Da reason fo' dis reversal is cuz any benefit ta havin breakiterator become tha default would be outweighed by tha incompatible source chizzle it would require. We regret any extra work n' mad drama dis has caused. Y'all KNOW dat shit, muthafucka!  
.TP 3
\-locale\  language_country_variant 
\f3Important\fP \- Da \f2\-locale\fP option must be placed \f2ahead\fP (to tha left) of any options provided by tha standard doclet or any other doclet. Otherwise, tha mastabation bars will step tha fuck up in Gangsta. This is tha only command\-line option dat is order\-dependent.
.br
.br
Specifies tha locale dat javadoc uses when generatin documentation. I aint talkin' bout chicken n' gravy biatch. Da argument is tha name of tha locale, as busted lyrics bout up in java.util.Locale documentation, like fuckin \f2en_US\fP (English, United Hoods) or \f2en_US_WIN\fP (Windows variant).
.br
.br
Specifyin a locale causes javadoc ta chizzle tha resource filez of dat locale fo' lyrics (strings up in tha mastabation bar, headings fo' lists n' tables, help file contents, comments up in stylesheet.css, n' so forth). Well shiiiit, it also specifies tha sortin order fo' lists sorted alphabetically, n' tha sentence separator ta determine tha end of tha straight-up original gangsta sentence. Well shiiiit, it do not determine tha locale of tha doc comment text specified up in tha source filez of tha documented classes.  
.TP 3
\-encoding\  name 
Specifies tha encodin name of tha source files, like fuckin \f2EUCJIS/SJIS\fP. If dis option aint specified, tha platform default converta is used.
.br
.br
Also peep \-docencodin n' \-charset.  
.TP 3
\-Jflag 
Passes \f2flag\fP directly ta tha runtime system java dat runs javadoc. Notice there must be no space between tha \f2J\fP n' tha \f2flag\fP. For example, if you need ta ensure dat tha system sets aside 32 megabytez of memory up in which ta process tha generated documentation, then you would call tha \f2\-Xmx\fP option of java as bigs up (\f2\-Xms\fP is optional, as it only sets tha size of initial memory, which is useful if you know tha minimum amount of memory required): 
.nf
\f3
.fl
   % \fP\f3javadoc \-J\-Xmx32m \-J\-Xms32m\fP \f3com.mypackage\fP
.fl
.fi
To tell what tha fuck version of javadoc yo ass is using, call tha "\f2\-version\fP" option of java: 
.nf
\f3
.fl
   % \fP\f3javadoc \-J\-version\fP
.fl
   java version "1.2"
.fl
   Funky-Ass VM (build JDK\-1.2\-V, chronic threads, sunwjit)
.fl
.fi
(Da version number of tha standard doclet appears up in its output stream.) 
.RE
.SS 
Options Provided by tha Standard Doclet
.RS 3
.TP 3
\-d\  directory 
Specifies tha destination directory where javadoc saves tha generated HTML files. (Da "d" means "destination.") Omittin dis option causes tha filez ta be saved ta tha current directory. Da value \f2directory\fP can be absolute, or relatizzle ta tha current hustlin directory fo' realz. Az of 1.4, tha destination directory be automatically pimped when javadoc is run.
.br
.br
For example, tha followin generates tha documentation fo' tha package \f2com.mypackage\fP n' saves tha thangs up in dis biatch up in tha \f2/home/user/doc/\fP directory: 
.nf
\f3
.fl
  % \fP\f3javadoc \-d /home/user/doc com.mypackage\fP
.fl
.fi
.TP 3
\-use 
Includes one "Use" page fo' each documented class n' package. Da page raps bout what tha fuck packages, classes, methods, constructors n' fieldz use any API of tha given class or package. Given class C, thangs dat use class C would include subclassez of C, fieldz declared as C, methodz dat return C, n' methodz n' constructors wit parametaz of type C.
.br
.br
For example, let our asses peep what tha fuck might step tha fuck up on tha "Use" page fo' String. Da \f2getName()\fP method up in tha \f2java.awt.Font\fP class returns type \f2String\fP. Therefore, \f2getName()\fP uses \f2String\fP, n' yo big-ass booty is ghon find dat method on tha "Use" page fo' \f2String\fP.
.br
.br
Note dat dis documents only usez of tha API, not tha implementation. I aint talkin' bout chicken n' gravy biatch. If a method uses \f2String\fP up in its implementation but do not take a strang as a argument or return a string, dat aint considered a "use" of \f2String\fP.
.br
.br
Yo ass can access tha generated "Use" page by first goin ta tha class or package, then clickin on tha "Use" link up in tha mastabation bar. Shiiit, dis aint no joke.  
.TP 3
\-version 
Includes tha @version text up in tha generated docs. This text is omitted by default. To tell what tha fuck version of tha Javadoc tool yo ass is using, use tha \f2\-J\-version\fP option. I aint talkin' bout chicken n' gravy biatch.  
.TP 3
\-lyricist 
Includes tha @lyricist text up in tha generated docs.  
.TP 3
\-splitindex 
Splits tha index file tha fuck into multiple files, alphabetically, one file per letter, plus a gangbangin' file fo' any index entries dat start wit non\-alphabetical characters.  
.TP 3
\-windowtitle\  title 
Specifies tha title ta be placed up in tha HTML <title> tag. This appears up in tha window title n' up in any browser bookmarks (straight-up places) dat one of mah thugs creates fo' dis page. This title should not contain any HTML tags, as tha browser aint gonna properly interpret em fo' realz. Any internal quotation marks within \f2title\fP may gotta be escaped. Y'all KNOW dat shit, muthafucka! If \-windowtitle is omitted, tha Javadoc tool uses tha value of \-doctitle fo' dis option. I aint talkin' bout chicken n' gravy biatch. 
.nf
\f3
.fl
  % \fP\f3javadoc \-windowtitle "Java SE Platform" com.mypackage\fP
.fl
.fi
.TP 3
\-doctitle\  title 
Specifies tha title ta be placed near tha top of tha overview summary file. Da title is ghon be placed as a cold-ass lil centered, level\-one headin directly beneath tha upper mastabation bar. Shiiit, dis aint no joke. Da \f2title\fP may contain html tags n' white space, though if it do, it must be enclosed up in quotes fo' realz. Any internal quotation marks within \f2title\fP may gotta be escaped. Y'all KNOW dat shit, muthafucka! 
.nf
\f3
.fl
  % \fP\f3javadoc \-doctitle "Java(TM)" com.mypackage\fP
.fl
.fi
.TP 3
\-title\  title 
\f3This option no longer exists.\fP It existed only up in Beta versionz of Javadoc 1.2. Well shiiiit, it has been renamed ta \f2\-doctitle\fP. This option is bein renamed ta make it clear dat it defines tha document title rather than tha window title.  
.TP 3
\-header\  header 
Specifies tha header text ta be placed all up in tha top of each output file. Da header is ghon be placed ta tha right of tha upper mastabation bar. Shiiit, dis aint no joke. \f2header\fP may contain HTML tags n' white space, though if it do, it must be enclosed up in quotes fo' realz. Any internal quotation marks within \f2header\fP may gotta be escaped. Y'all KNOW dat shit, muthafucka! 
.nf
\f3
.fl
  % \fP\f3javadoc \-header "<b>Java 2 Platform </b><br>v1.4" com.mypackage\fP
.fl
.fi
.TP 3
\-footer\  foota 
Specifies tha foota text ta be placed all up in tha bottom of each output file. Da foota is ghon be placed ta tha right of tha lower mastabation bar. Shiiit, dis aint no joke. \f2footer\fP may contain html tags n' white space, though if it do, it must be enclosed up in quotes fo' realz. Any internal quotation marks within \f2footer\fP may gotta be escaped. Y'all KNOW dat shit, muthafucka! 
.TP 3
\-top 
Specifies tha text ta be placed all up in tha top of each output file. 
.TP 3
\-bottom\  text 
Specifies tha text ta be placed all up in tha bottom of each output file. Da text is ghon be placed all up in tha bottom of tha page, below tha lower mastabation bar. Shiiit, dis aint no joke. Da \f2text\fP may contain HTML tags n' white space, though if it do, it must be enclosed up in quotes fo' realz. Any internal quotation marks within \f2text\fP may gotta be escaped. Y'all KNOW dat shit, muthafucka!  
.TP 3
\-link\  extdocURL 
Creates links ta existin javadoc\-generated documentation of external referenced classes. Well shiiiit, it takes one argument:  
.RS 3
.TP 2
o
\f4extdocURL\fP is tha absolute or relatizzle URL of tha directory containin tha external javadoc\-generated documentation you wanna link to. Examplez is shown below. Da package\-list file must be found up in dis directory (otherwise, use \f2\-linkoffline\fP). Da Javadoc tool readz tha package names from tha \f2package\-list\fP file n' then links ta dem packages at dat URL. When tha Javadoc tool is run, tha \f2extdocURL\fP value is copied literally tha fuck into tha \f2<A HREF>\fP links dat is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Therefore, \f2extdocURL\fP must be tha URL ta tha \f2directory\fP, not ta a gangbangin' file.
.br
.br
Yo ass can use a absolute link fo' \f2extdocURL\fP ta enable yo' docs ta link ta a thugged-out document on any joint, or can bust a relatizzle link ta link only ta a relatizzle location. I aint talkin' bout chicken n' gravy biatch. If relative, tha value you pass up in should be tha relatizzle path from tha destination directory (specified wit \f2\-d\fP) ta tha directory containin tha packages bein linked to.
.br
.br
When specifyin a absolute link you normally use a \f2http:\fP link. But fuck dat shiznit yo, tha word on tha street is dat if you wanna link ta a gangbangin' file system dat has no wizzy server, you can bust a \f2file:\fP link \-\- however, do dis only if mah playas wantin ta access tha generated documentation shares tha same ol' dirty file system.
.br
.br
In all cases, n' on all operatin systems, you should bust a gangbangin' forward slash as tha separator, whether tha URL be absolute or relative, n' "http:" or "file:" based (as specified up in tha 
.na
\f2URL Memo\fP @
.fi
http://www.ietf.org/rfc/rfc1738.txt). 
.RS 3
.TP 3
Absolute http: based link: 
\f2\-link http://<host>/<directory>/<directory>/.../<name>\fP 
.TP 3
Absolute file: based link: 
\f2\-link file://<host>/<directory>/<directory>/.../<name>\fP 
.TP 3
Relatizzle link: 
\f2\-link <directory>/<directory>/.../<name>\fP 
.RE
.RE
Yo ass can specify multiple \f2\-link\fP options up in a given javadoc run ta link ta multiple documents.
.br
.br
\f3Choosin between \-linkoffline n' \-link\fP:
.br
.br
Use \f2\-link\fP: 
.RS 3
.TP 2
o
when rockin a relatizzle path ta tha external API document, or 
.TP 2
o
when rockin a absolute URL ta tha external API document, if yo' shell allows a program ta open a cold-ass lil connection ta dat URL fo' reading. 
.RE
Use \f2\-linkoffline\fP: 
.RS 3
.TP 2
o
when rockin a absolute URL ta tha external API document, if yo' shell \f2does not allow\fP a program ta open a cold-ass lil connection ta dat URL fo' reading. This can occur if yo ass is behind a gangbangin' firewall n' tha document you wanna link ta is on tha other side. 
.RE
.br
.br
\f3Example rockin absolute links ta tha external docs\fP \- Let our asses say you wanna link ta tha \f2java.lang\fP, \f2java.io\fP n' other Java Platform packages at 
.na
\f2http://docs.oracle.com/javase/7/docs/api/\fP @
.fi
http://docs.oracle.com/javase/7/docs/api/. Da followin command generates documentation fo' tha package \f2com.mypackage\fP wit links ta tha Java SE Platform packages. Da generated documentation will contain links ta tha \f2Object\fP class, fo' example, up in tha class trees. (Other options, like fuckin \f2\-sourcepath\fP n' \f2\-d\fP, is not shown.) 
.nf
\f3
.fl
  % \fP\f3javadoc \-link http://docs.oracle.com/javase/7/docs/api/ com.mypackage\fP
.fl
.fi
\f3Example rockin relatizzle links ta tha external docs\fP \- Let our asses say you have two packages whose docs is generated up in different runz of tha Javadoc tool, n' dem docs is separated by a relatizzle path. In dis example, tha packages is \f2com.apipackage\fP, a API, n' \f2com.spipackage\fP, a SPI (Service Provide Interface). Yo ass want tha documentation ta reside up in \f2docs/api/com/apipackage\fP n' \f2docs/spi/com/spipackage\fP fo' realz. Assumin tha API package documentation be already generated, n' dat \f2docs\fP is tha current directory, you would document tha SPI package wit links ta tha API documentation by hustlin: 
.nf
\f3
.fl
  % \fP\f3javadoc \-d ./spi \-link ../api com.spipackage\fP
.fl
.fi
Notice tha \f2\-link\fP argument is relatizzle ta tha destination directory (\f2docs/spi\fP).
.br
.br
\f3Details\fP \- Da \f2\-link\fP option enablez you ta link ta classes referenced ta by yo' code but \f2not\fP documented up in tha current javadoc run. I aint talkin' bout chicken n' gravy biatch. For these links ta git all up in valid pages, you must know where dem HTML pages is located, n' specify dat location wit \f2extdocURL\fP. This allows, fo' instance, third jam documentation ta link ta \f2java.*\fP documentation on \f2http://java.sun.com\fP.
.br
.br
Omit tha \f2\-link\fP option fo' javadoc ta create links only ta API within tha documentation it is generatin up in tha current run. I aint talkin' bout chicken n' gravy biatch. (Without tha \f2\-link\fP option, tha Javadoc tool do not create links ta documentation fo' external references, cuz it do not know if or where dat documentation exists.)
.br
.br
This option can create links up in nuff muthafuckin places up in tha generated documentation.
.br
.br
Another use is fo' cross\-links between setz of packages: Execute javadoc on one set of packages, then run javadoc again n' again n' again on another set of packages, bustin links both ways between both sets.
.br
.br
\f3How tha fuck a Class Must be Referenced\fP \- For a link ta a external referenced class ta straight-up step tha fuck up (and not just its text label), tha class must be referenced up in tha followin way. Well shiiiit, it aint sufficient fo' it ta be referenced up in tha body of a method. Y'all KNOW dat shit, muthafucka! Well shiiiit, it must be referenced up in either a \f2import\fP statement or up in a thugged-out declaration. I aint talkin' bout chicken n' gravy biatch yo. Here is examplez of how tha fuck tha class \f2java.io.File\fP can be referenced: 
.RS 3
.TP 2
o
In any kind of \f2import\fP statement: by wildcard import, import explicitly by name, or automatically import fo' \f2java.lang.*\fP. For example, dis would suffice:
.br
\f2import java.io.*;\fP
.br
In 1.3.x n' 1.2.x, only a explicit import by name works \-\- a wildcard import statement do not work, nor do tha automatic import \f2java.lang.*\fP. 
.TP 2
o
In a thugged-out declaration:
.br
\f2void foo(File f) {}\fP
.br
Da reference n' be up in tha return type or parameta type of a method, constructor, field, class or intercourse, or up in a \f2implements\fP, \f2extends\fP or \f2throws\fP statement. 
.RE
An blingin corollary is dat when you use tha \f2\-link\fP option, there may be nuff links dat unintentionally do not step tha fuck up cuz of dis constraint. (Da text would step tha fuck up without a hypertext link.) Yo ass can detect these by tha warnings they emit. Da most innocuous way ta properly reference a cold-ass lil class n' thereby add tha link would be ta import dat class, as shown above.  
.br
.br
\f3Package List\fP \- Da \f2\-link\fP option requires dat a gangbangin' file named \f2package\-list\fP, which is generated by tha Javadoc tool, exist all up in tha URL you specify wit \f2\-link\fP. Da \f2package\-list\fP file be a simple text file dat lists tha namez of packages documented at dat location. I aint talkin' bout chicken n' gravy biatch. In tha earlier example, tha Javadoc tool looks fo' a gangbangin' file named \f2package\-list\fP all up in tha given URL, readz up in tha package names n' then links ta dem packages at dat URL.
.br
.br
For example, tha package list fo' tha Java SE 6 API is located at 
.na
\f2http://docs.oracle.com/javase/7/docs/api/package\-list\fP @
.fi
http://docs.oracle.com/javase/7/docs/api/package\-list. n' starts as bigs up: 
.nf
\f3
.fl
  java.applet  
.fl
  java.awt
.fl
  java.awt.color
.fl
  java.awt.datatransfer
.fl
  java.awt.dnd
.fl
  java.awt.event
.fl
  java.awt.font
.fl
  etc.
.fl
\fP
.fi
When javadoc is run without tha \f2\-link\fP option, when it encountas a name dat belongs ta a external referenced class, it prints tha name wit no link. But fuck dat shiznit yo, tha word on tha street is dat when tha \f2\-link\fP option is used, tha Javadoc tool searches tha \f2package\-list\fP file all up in tha specified \f2extdocURL\fP location fo' dat package name. If it findz tha package name, it prefixes tha name wit \f2extdocURL\fP.
.br
.br
In order fo' there ta be no fucked up links, all of tha documentation fo' tha external references must exist all up in tha specified URLs. Da Javadoc tool aint gonna check dat these pages exist \-\- only dat tha package\-list exists.
.br
.br
\f3Multiple Links\fP \- Yo ass can supply multiple \f2\-link\fP options ta link ta any number of external generated documents, n' you can put dat on yo' toast. \  Javadoc 1.2 has a known bug which prevents you from supplyin mo' than one \f2\-link\fP command. Y'all KNOW dat shit, muthafucka! This was fixed up in 1.2.2.
.br
.br
Specify a gangbangin' finger-lickin' different link option fo' each external document ta link to:
.br
.br
\ \  \f2% \fP\f4javadoc \-link\fP \f2extdocURL1\fP \f4\-link\fP \f2extdocURL2\fP \f2... \fP\f4\-link\fP \f2extdocURLn\fP \f4com.mypackage\fP
.br
.br
where \f2extdocURL1\fP,\  \f2extdocURL2\fP,\  ... \f2extdocURLn\fP point respectively ta tha rootz of external documents, each of which gotz nuff a gangbangin' file named \f2package\-list\fP.
.br
.br
\f3Cross\-links\fP \- Note dat "bootstrapping" may be required when cross\-linkin two or mo' documents dat aint previously been generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. In other lyrics, if \f2package\-list\fP do not exist fo' either document, when you run tha Javadoc tool on tha straight-up original gangsta document, tha \f2package\-list\fP aint gonna yet exist fo' tha second document. Therefore, ta create tha external links, you must re\-generate tha straight-up original gangsta document afta generatin tha second document.
.br
.br
In dis case, tha purpose of first generatin a thugged-out document is ta create its \f2package\-list\fP (or you can create it by hand it if you certain of tha package names). Then generate tha second document wit its external links. Da Javadoc tool prints a warnin if a needed external \f2package\-list\fP file do not exist.  
.TP 3
\-linkoffline\  extdocURL\  packagelistLoc 
This option be a variation of \f2\-link\fP; they both create links ta javadoc\-generated documentation fo' external referenced classes. Use tha \f2\-linkoffline\fP option when linkin ta a thugged-out document on tha wizzy when tha Javadoc tool itself is "offline" \-\- dat is, it cannot access tha document all up in a wizzy connection.
.br
.br
Mo' specifically, use \f2\-linkoffline\fP if tha external documentz \f2package\-list\fP file aint accessible or do not exist all up in tha \f2extdocURL\fP location but do exist at a gangbangin' finger-lickin' different location, which can be specified by \f2packageListLoc\fP (typically local). Thus, if \f2extdocURL\fP be accessible only on tha Ghetto Wide Web, \f2\-linkoffline\fP removes tha constraint dat tha Javadoc tool gotz a wizzy connection when generatin tha documentation.
.br
.br
Another use be as a "hack" ta update docs: Afta you have run javadoc on a gangbangin' full set of packages, then you can run javadoc again n' again n' again on onlya smalla set of chizzled packages, so dat tha updated filez can be banged back tha fuck into tha original gangsta set. Examplez is given below.
.br
.br
Da \f2\-linkoffline\fP option takes two arguments \-\- tha straight-up original gangsta fo' tha strang ta be embedded up in tha \f2<a href>\fP links, tha second spittin some lyrics ta it where ta find \f2package\-list\fP: 
.RS 3
.TP 2
o
\f4extdocURL\fP is tha absolute or relatizzle URL of tha directory containin tha external javadoc\-generated documentation you wanna link to. If relative, tha value should be tha relatizzle path from tha destination directory (specified wit \f2\-d\fP) ta tha root of tha packages bein linked to. For mo' details, peep \f2extdocURL\fP up in tha \f2\-link\fP option. I aint talkin' bout chicken n' gravy biatch. 
.TP 2
o
\f4packagelistLoc\fP is tha path or URL ta tha directory containin tha \f2package\-list\fP file fo' tha external documentation. I aint talkin' bout chicken n' gravy biatch. This can be a URL (http: or file:) or file path, n' can be absolute or relative. If relative, make it relatizzle ta tha \f2current\fP directory from where javadoc was run. I aint talkin' bout chicken n' gravy biatch. Do not include tha \f2package\-list\fP filename. 
.RE
Yo ass can specify multiple \f2\-linkoffline\fP options up in a given javadoc run. I aint talkin' bout chicken n' gravy biatch. (Prior ta 1.2.2, it could be specified only once.)
.br
.br
\f3Example rockin absolute links ta tha external docs\fP \- Let our asses say you wanna link ta tha \f2java.lang\fP, \f2java.io\fP n' other Java SE Platform packages at \f2http://docs.oracle.com/javase/7/docs/api/\fP yo, but yo' shell aint gots wizzy access. Yo ass could open tha \f2package\-list\fP file up in a funky-ass browser at 
.na
\f2http://docs.oracle.com/javase/7/docs/api/package\-list\fP @
.fi
http://docs.oracle.com/javase/7/docs/api/package\-list, save it ta a local directory, n' point ta dis local copy wit tha second argument, \f2packagelistLoc\fP. In dis example, tha package list file has been saved ta tha current directory "\f2.\fP" . Da followin command generates documentation fo' tha package \f2com.mypackage\fP wit links ta tha Java SE Platform packages. Da generated documentation will contain links ta tha \f2Object\fP class, fo' example, up in tha class trees. (Other necessary options, like fuckin \f2\-sourcepath\fP, is not shown.) 
.nf
\f3
.fl
% \fP\f3javadoc \-linkoffline http://docs.oracle.com/javase/7/docs/api/ . com.mypackage\fP
.fl
.fi
\f3Example rockin relatizzle links ta tha external docs\fP \- It aint nuthin but not straight-up common ta use \f2\-linkoffline\fP wit relatizzle paths, fo' tha simple reason dat \f2\-link\fP probably suffices. When rockin \f2\-linkoffline\fP, tha \f2package\-list\fP file is generally local, n' when rockin relatizzle links, tha file yo ass is linkin ta be also generally local. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Right back up in yo muthafuckin ass. So it is probably unnecessary ta give a gangbangin' finger-lickin' different path fo' tha two arguments ta \f2\-linkoffline\fP. When tha two arguments is identical, you can use \f2\-link\fP. Right back up in yo muthafuckin ass. See tha \f2\-link\fP relatizzle example.
.br
.br
\f3Manually Creatin a \fP\f4package\-list\fP\f3 File\fP \- If a \f2package\-list\fP file do not yet exist yo, but you know what tha fuck package names yo' document will link to, you can create yo' own copy of dis file by hand n' specify its path wit \f2packagelistLoc\fP fo' realz. An example would be tha previous case where tha package list fo' \f2com.spipackage\fP did not exist when \f2com.apipackage\fP was first generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This technique is useful when you need ta generate documentation dat links ta freshly smoked up external documentation whose package names you know yo, but which aint yet published. Y'all KNOW dat shit, muthafucka! This be also a way of bustin \f2package\-list\fP filez fo' packages generated wit Javadoc 1.0 or 1.1, where \f2package\-list\fP filez was not generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Likewise, two g-units can share they unpublished \f2package\-list\fP files, enablin dem ta release they cross\-linked documentation simultaneously.
.br
.br
\f3Linkin ta Multiple Documents\fP \- Yo ass can include \f2\-linkoffline\fP once fo' each generated document you wanna refer ta (each option is shown on a separate line fo' clarity):
.br
.br
\f2% \fP\f4javadoc \-linkoffline\fP \f2extdocURL1\fP \f2packagelistLoc1\fP \f2\\\fP
.br
\f2\ \ \ \ \ \ \ \ \ \ \fP\f4\-linkoffline\fP \f2extdocURL2\fP \f2packagelistLoc2\fP \f2\\\fP
.br
\f2\ \ \ \ \ \ \ \ \ \ ...\fP
.br
.br
\f3Uppimpin docs\fP \- Another use fo' \f2\-linkoffline\fP option is useful if yo' project has dozens or hundredz of packages, if you have already run javadoc on tha entire tree, n' now, up in a separate run, you wanna quickly cook up some fuckin lil' small-ass chizzlez n' re\-run javadoc on just a lil' small-ass portion of tha source tree. This is somewhat of a hack up in dat it works properly only if yo' chizzlez is only ta doc comments n' not ta declarations. If you was ta add, remove or chizzle any declarations from tha source code, then fucked up links could show up in tha index, package tree, inherited member lists, use page, n' other places.
.br
.br
First, you create a freshly smoked up destination directory (call it \f2update\fP) fo' dis freshly smoked up lil' small-ass run. I aint talkin' bout chicken n' gravy biatch. Let our asses say tha original gangsta destination directory was named \f2html\fP. In tha simplest example, cd ta tha parent of \f2html\fP. Right back up in yo muthafuckin ass. Set tha straight-up original gangsta argument of \f2\-linkoffline\fP ta tha current directory "." n' set tha second argument ta tha relatizzle path ta \f2html\fP, where it can find \f2package\-list\fP, n' pass up in only tha package namez of tha packages you wanna update: 
.nf
\f3
.fl
  % \fP\f3javadoc \-d update \-linkoffline . html com.mypackage\fP
.fl
.fi
When tha Javadoc tool is done, copy these generated class pages up in \f2update/com/package\fP (not tha overview or index), over tha original gangsta filez up in \f2html/com/package\fP.  
.TP 3
\-linksource\  
Creates a HTML version of each source file (with line numbers) n' addz links ta dem from tha standard HTML documentation. I aint talkin' bout chicken n' gravy biatch. Links is pimped fo' classes, intercourses, constructors, methodz n' fieldz whose declarations is up in a source file. Otherwise, links is not pimped, like fuckin fo' default constructors n' generated classes.
.br
.br
\f3This option exposes \fP\f4all\fP\f3 private implementation details up in tha included source files, includin private classes, private fields, n' tha bodiez of private methods, \fP\f4regardless of tha \fP\f4\-public\fP\f3, \fP\f4\-package\fP\f3, \fP\f4\-protected\fP\f3 n' \fP\f4\-private\fP\f3 options.\fP Unless you also use tha \f2\-private\fP option, not all private classes or intercourses will necessarily be accessible via links.
.br
.br
Each link appears on tha name of tha identifier up in its declaration. I aint talkin' bout chicken n' gravy biatch. For example, tha link ta tha source code of tha \f2Button\fP class would be on tha word "Button": 
.nf
\f3
.fl
    hood class Button
.fl
    extendz Component
.fl
    implements Accessible
.fl
\fP
.fi
and tha link ta tha source code of tha \f2getLabel()\fP method up in tha Button class would be on tha word "getLabel": 
.nf
\f3
.fl
    hood Strin getLabel()
.fl
\fP
.fi
.TP 3
\-group\  groupheading\  packagepattern:packagepattern:... 
Separates packages on tha overview page tha fuck into whatever crews you specify, one crew per table. Yo ass specify each crew wit a gangbangin' finger-lickin' different \f2\-group\fP option. I aint talkin' bout chicken n' gravy biatch. Da crews step tha fuck up on tha page up in tha order specified on tha command line; packages is alphabetized within a group. For a given \f2\-group\fP option, tha packages matchin tha list of \f2packagepattern\fP expressions step tha fuck up in a table wit tha headin \f2groupheading\fP. 
.RS 3
.TP 2
o
\f4groupheading\fP can be any text, n' can include white space. This text is placed up in tha table headin fo' tha group. 
.TP 2
o
\f4packagepattern\fP can be any package name, or can be tha start of any package name followed by a asterisk (\f2*\fP). Da asterisk be a wildcard meanin "match any characters". This is tha only wildcard allowed. Y'all KNOW dat shit, muthafucka! Multiple patterns can be included up in a crew by separatin dem wit colons (\f2:\fP). 
.RE
\f3NOTE: If rockin a asterisk up in a pattern or pattern list, tha pattern list must be inside quotes, like fuckin \fP\f4"java.lang*:java.util"\fP
.br
.br
If you do not supply any \f2\-group\fP option, all packages is placed up in one crew wit tha headin "Packages". If tha all crews do not include all documented packages, any leftover packages step tha fuck up in a separate crew wit tha headin "Other Packages".
.br
.br
For example, tha followin option separates tha four documented packages tha fuck into core, extension n' other packages. Notice tha trailin "dot" do not step tha fuck up in "java.lang*" \-\- includin tha dot, like fuckin "java.lang.*" would omit tha java.lang package. 
.nf
\f3
.fl
  % \fP\f3javadoc \-group "Core Packages" "java.lang*:java.util"
.fl
            \-group "Extension Packages" "javax.*"
.fl
            java.lang java.lang.reflect java.util javax.servlet java.new\fP
.fl
.fi
This thangs up in dis biatch up in tha groupings: 
.RS 3
.TP 3
Core Packages 
\f2java.lang\fP 
\f2java.lang.reflect\fP 
\f2java.util\fP 
.TP 3
Extension Packages 
\f2javax.servlet\fP 
.TP 3
Other Packages 
\f2java.new\fP 
.RE
.TP 3
\-nodeprecated 
Prevents tha generation of any deprecated API at all up in tha documentation. I aint talkin' bout chicken n' gravy biatch. This do what tha fuck \-nodeprecatedlist do, plus it do not generate any deprecated API all up in tha rest of tha documentation. I aint talkin' bout chicken n' gravy biatch. This is useful when freestylin code n' you don't wanna be distracted by tha deprecated code.  
.TP 3
\-nodeprecatedlist 
Prevents tha generation of tha file containin tha list of deprecated APIs (deprecated\-list.html) n' tha link up in tha mastabation bar ta dat page. (But fuck dat shiznit yo, tha word on tha street is dat javadoc continues ta generate tha deprecated API all up in tha rest of tha document.) This is useful if yo' source code gotz nuff no deprecated API, n' you wanna make tha mastabation bar cleaner n' shit.  
.TP 3
\-nosince 
Omits from tha generated docs tha "Since" sections associated wit tha @since tags.  
.TP 3
\-notree 
Omits tha class/interface hierarchy pages from tha generated docs. These is tha pages you reach rockin tha "Tree" button up in tha mastabation bar. Shiiit, dis aint no joke. Da hierarchy is produced by default.  
.TP 3
\-noindex 
Omits tha index from tha generated docs. Da index is produced by default.  
.TP 3
\-nohelp 
Omits tha HELP link up in tha mastabation bars all up in tha top n' bottom of each page of output.  
.TP 3
\-nonavbar 
Prevents tha generation of tha mastabation bar, header n' footer, otherwise found all up in tha top n' bottom of tha generated pages yo. Has no affect on tha "bottom" option. I aint talkin' bout chicken n' gravy biatch. Da \f2\-nonavbar\fP option is useful when yo ass is interested only up in tha content n' have no need fo' navigation, like fuckin convertin tha filez ta PostScript or PDF fo' print only.  
.TP 3
\-helpfile\  path/filename 
Specifies tha path of a alternate help file \f2path/filename\fP dat tha HELP link up in tha top n' bottom mastabation bars link to. Without dis option, tha Javadoc tool automatically creates a help file \f2help\-doc.html\fP dat is hard\-coded up in tha Javadoc tool. This option enablez you ta override dis default. Da \f2filename\fP can be any name n' aint restricted ta \f2help\-doc.html\fP \-\- tha Javadoc tool will adjust tha links up in tha mastabation bar accordingly. For example: 
.nf
\f3
.fl
  % \fP\f3javadoc \-helpfile /home/user/myhelp.html java.awt\fP
.fl
.fi
.TP 3
\-stylesheetfile\  path/filename 
Specifies tha path of a alternate HTML styleshizzle file. Without dis option, tha Javadoc tool automatically creates a styleshizzle file \f2stylesheet.css\fP dat is hard\-coded up in tha Javadoc tool. This option enablez you ta override dis default. Da \f2filename\fP can be any name n' aint restricted ta \f2stylesheet.css\fP. For example: 
.nf
\f3
.fl
  % \fP\f3javadoc \-stylesheetfile /home/user/mystylesheet.css com.mypackage\fP
.fl
.fi
.TP 3
\-serialwarn 
Generates compile\-time warnings fo' missin @serial tags. By default, Javadoc 1.2.2 (and lata versions) generates no serial warnings. (This be a reversal from earlier versions.) Use dis option ta display tha serial warnings, which helps ta properly document default serializable fieldz n' \f2writeExternal\fP methods.  
.TP 3
\-charset\  name 
Specifies tha HTML characta set fo' dis document. Da name should be a preferred MIME name as given up in tha 
.na
\f2IANA Registry\fP @
.fi
http://www.iana.org/assignments/character\-sets, n' you can put dat on yo' toast. For example: 
.nf
\f3
.fl
  % \fP\f3javadoc \-charset "iso\-8859\-1" mypackage\fP
.fl
.fi
would bang tha followin line up in tha head of every last muthafuckin generated page:  
.nf
\f3
.fl
   <META http\-equiv="Content\-Type" content="text/html; charset=ISO\-8859\-1">
.fl
\fP
.fi
This META tag is busted lyrics bout up in tha 
.na
\f2HTML standard\fP @
.fi
http://www.w3.org/TR/REC\-html40/charset.html#h\-5.2.2. (4197265 n' 4137321)
.br
.br
Also peep \-encodin n' \-docencoding. 
.TP 3
\-docencoding\  name 
Specifies tha encodin of tha generated HTML files. Da name should be a preferred MIME name as given up in tha 
.na
\f2IANA Registry\fP @
.fi
http://www.iana.org/assignments/character\-sets, n' you can put dat on yo' toast. If you omit dis option but use \-encoding, then tha encodin of tha generated HTML filez is determined by \-encoding. Example: 
.nf
\f3
.fl
  % \fP\f3javadoc \-docencodin "ISO\-8859\-1" mypackage\fP
.fl
.fi
Also peep \-encodin n' \-charset.  
.TP 3
\-keywordz 
Addz HTML meta keyword tags ta tha generated file fo' each class. These tags can help tha page be found by search engines dat look fo' meta tags. (Most search engines dat search tha entire Internizzle do not peep meta tags, cuz pages can misuse them; but search engines offered by g-units dat confine they search ta they own joint can benefit by lookin at meta tags.)
.br
.br
Da meta tags include tha straight-up qualified name of tha class n' tha unqualified namez of tha fieldz n' methods. Constructors is not included cuz they is identical ta tha class name. For example, tha class Strin starts wit these keywords: 
.nf
\f3
.fl
     <META NAME="keywords" CONTENT="java.lang.Strin class">
.fl
     <META NAME="keywords" CONTENT="CASE_INSENSITIVE_ORDER">
.fl
     <META NAME="keywords" CONTENT="length()">
.fl
     <META NAME="keywords" CONTENT="charAt()">
.fl
\fP
.fi
.TP 3
\-tag\ \ tagname:Xaoptcmf:"taghead" 
Enablez tha Javadoc tool ta interpret a simple, one\-argument custom block tag \f2@\fP\f2tagname\fP up in doc comments, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. So tha Javadoc tool can "spell\-check" tag names, it is blingin ta include a \f2\-tag\fP option fo' every last muthafuckin custom tag dat is present up in tha source code, disablin (with \f2X\fP) dem dat is not bein output up in tha current run.
.br
.br
Da colon (\f4:\fP) be always tha separator. Shiiit, dis aint no joke. To bust a cold-ass lil colon up in \f2tagname\fP, peep Use of Colon up in Tag Name.
.br
.br
Da \f2\-tag\fP option outputs tha tagz headin \f2taghead\fP up in bold, followed on tha next line by tha text from its single argument, as shown up in tha example below. Like any block tag, dis argumentz text can contain inline tags, which is also interpreted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da output is similar ta standard one\-argument tags, like fuckin \f2@return\fP n' \f2@author\fP. Omittin \f2taghead\fP causes \f2tagname\fP ta step tha fuck up as tha heading.
.br
.br
\f3Placement of tags\fP \- Da \f4Xaoptcmf\fP part of tha argument determines where up in tha source code tha tag be allowed ta be placed, n' whether tha tag can be disabled (usin \f2X\fP). Yo ass can supply either \f4a\fP, ta allow tha tag up in all places, or any combination of tha other letters:
.br
.br
\f4X\fP (disable tag)
.br
\f4a\fP (all)
.br
\f4o\fP (overview)
.br
\f4p\fP (packages)
.br
\f4t\fP (types, dat is classes n' intercourses)
.br
\f4c\fP (constructors)
.br
\f4m\fP (methods)
.br
\f4f\fP (fields) 
.br
.br
\f3Examplez of single tags\fP \- An example of a tag option fo' a tag dat can be used anywhere up in tha source code is: 
.nf
\f3
.fl
    \-tag todo:a:"To Do:"
.fl
\fP
.fi
If you wanted @todo ta be used only wit constructors, methodz n' fields, you would use: 
.nf
\f3
.fl
    \-tag todo:cmf:"To Do:"
.fl
\fP
.fi
Notice tha last colon (\f2:\fP) above aint a parameta separator yo, but is part of tha headin text (as shown below). Yo ass would use either tag option fo' source code dat gotz nuff tha tag \f2@todo\fP, such as: 
.nf
\f3
.fl
     @todo Da documentation fo' dis method needz work.
.fl
\fP
.fi
\f3Use of Colon up in Tag Name\fP \- A colon can be used up in a tag name if it is escaped wit a funky-ass backslash. For dis doc comment: 
.nf
\f3
.fl
    /**
.fl
     * @ejb:bean
.fl
     */
.fl
\fP
.fi
use dis tag option:  
.nf
\f3
.fl
    \-tag ejb\\\\:bean:a:"EJB Bean:"
.fl
\fP
.fi
\f3Spell\-checkin tag names (Disablin tags)\fP \- Some pimpers put custom tags up in tha source code dat they don't always wanna output. In these cases, it is blingin ta list all tags dat is present up in tha source code, enablin tha ones you wanna output n' disablin tha ones you don't wanna output. Da presence of \f2X\fP disablez tha tag, while its absence enablez tha tag. This gives tha Javadoc tool enough shiznit ta know if a tag it encountas is unknown, probably tha thangs up in dis biatch of a typo or a misspelling. Well shiiiit, it prints a warnin up in these cases.
.br
.br
Yo ass can add \f2X\fP ta tha placement joints already present, so dat when you wanna enable tha tag, you can simply delete tha \f2X\fP. For example, if @todo be a tag dat you wanna suppress on output, you would use: 
.nf
\f3
.fl
    \-tag todo:Xcmf:"To Do:"
.fl
\fP
.fi
or, if you'd rather keep it simple: 
.nf
\f3
.fl
    \-tag todo:X
.fl
\fP
.fi
Da syntax \f2\-tag todo:X\fP works even if \f2@todo\fP is defined by a taglet.
.br
.br
\f3Order of tags\fP \- Da order of tha \f2\-tag\fP (and \f2\-taglet\fP) options determine tha order tha tags is output. Yo ass can mix tha custom tags wit tha standard tags ta intersperse em. Da tag options fo' standard tags is placeholdaz only fo' determinin tha order \-\- they take only tha standard tagz name. (Subheadings fo' standard tags cannot be altered.) This is illustrated up in tha followin example.
.br
.br
If \f2\-tag\fP is missing, then tha posizzle of \f2\-taglet\fP determines its order n' shit. If they is both present, then whichever appears last on tha command line determines its order n' shit. (This happens cuz tha tags n' taglets is processed up in tha order dat they step tha fuck up on tha command line. For example, if \f2\-taglet\fP n' \f2\-tag\fP both have tha name "todo", tha one dat appears last on tha command line will determine its order.
.br
.br
\f3Example of a cold-ass lil complete set of tags\fP \- This example bangs "To Do" afta "Parameters" n' before "Throws" up in tha output. By rockin "X", it also specifies dat @example be a tag dat might be encountered up in tha source code dat should not be output durin dis run. I aint talkin' bout chicken n' gravy biatch. Notice dat if you use @argfile, you can put tha tags on separate lines up in a argument file like dis (no line continuation charactas needed): 
.nf
\f3
.fl
   \-tag param
.fl
   \-tag return
.fl
   \-tag todo:a:"To Do:"
.fl
   \-tag throws
.fl
   \-tag see
.fl
   \-tag example:X
.fl
\fP
.fi
When javadoc parses tha doc comments, any tag encountered dat is neither a standard tag nor passed up in wit \f2\-tag\fP or \f2\-taglet\fP is considered unknown, n' a warnin is thrown.
.br
.br
Da standard tags is initially stored internally up in a list up in they default order n' shit. Whenever \f2\-tag\fP options is used, dem tags git appended ta dis list \-\- standard tags is moved from they default position. I aint talkin' bout chicken n' gravy biatch. Therefore, if a \f2\-tag\fP option is omitted fo' a standard tag, it remains up in its default position.
.br
.br
\f3Avoidin Conflicts\fP \- If you wanna slice up yo' own namespace, you can bust a thugged-out dot\-separated namin convention similar ta dat used fo' packages: \f2com.mycompany.todo\fP. Oracle will continue ta create standard tags whose names do not contain dots fo' realz. Any tag you create will override tha behavior of a tag by tha same name defined by Oracle. In other lyrics, if you create a tag or taglet \f2@todo\fP, it will always have tha same behavior you define, even if Oracle lata creates a standard tag of tha same name.
.br
.br
\f3Annotations vs. Javadoc Tags\fP \- In general, if tha markup you wanna add is intended ta affect or produce documentation, it should probably be a javadoc tag; otherwise, it should be a annotation. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See 
.na
\f2Comparin Annotations n' Javadoc Tags\fP @
.fi
http://www.oracle.com/technetwork/java/javase/documentation/index\-137868.html#annotations<
.br
.br
Yo ass can also create mo' complex block tags, or custom inline tags wit tha \-taglet option. I aint talkin' bout chicken n' gravy biatch.  
.TP 3
\-taglet\ \ class 
Specifies tha class file dat starts tha taglet used up in generatin tha documentation fo' dat tag. Use tha fully\-qualified name fo' \f2class\fP. This taglet also defines tha number of text arguments dat tha custom tag has. Da taglet accepts dem arguments, processes them, n' generates tha output. For extensive documentation wit example taglets, see: 
.RS 3
.TP 2
o
.na
\f2Taglet Overview\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/guides/javadoc/taglet/overview.html 
.RE
Taglets is useful fo' block or inline tags. They can have any number of arguments n' implement custom behavior, like fuckin makin text bold, formattin bullets, freestylin up tha text ta a gangbangin' file, or startin other processes.
.br
.br
Taglets can only determine where a tag should step tha fuck up n' up in what tha fuck form fo' realz. All other decisions is made by tha doclet. Right back up in yo muthafuckin ass. So a taglet cannot do thangs like fuckin remove a cold-ass lil class name from tha list of included classes. But fuck dat shiznit yo, tha word on tha street is dat it can execute side effects, like fuckin printin tha tagz text ta a gangbangin' file or triggerin another process.
.br
.br
Use tha \f2\-tagletpath\fP option ta specify tha path ta tha taglet yo. Here be a example dat bangs tha "To Do" taglet afta "Parameters" n' ahead of "Throws" up in tha generated pages: 
.nf
\f3
.fl
    \-taglet com.sun.tools.doclets.ToDoTaglet
.fl
    \-tagletpath /home/taglets 
.fl
    \-tag return
.fl
    \-tag param
.fl
    \-tag todo
.fl
    \-tag throws
.fl
    \-tag see
.fl
\fP
.fi
Alternatively, you can use tha \f2\-taglet\fP option up in place of its \f2\-tag\fP option yo, but dat may be harder ta read. Y'all KNOW dat shit, muthafucka!  
.TP 3
\-tagletpath\ \ tagletpathlist 
Specifies tha search paths fo' findin taglet class filez (.class). Da \f2tagletpathlist\fP can contain multiple paths by separatin dem wit a cold-ass lil colon (\f2:\fP). Da Javadoc tool will search up in all subdirectoriez of tha specified paths.  
.TP 3
\-docfilessubdirs\  
Enablez deep copyin of "\f2doc\-files\fP" directories. Put ya muthafuckin choppers up if ya feel dis! In other lyrics, subdirectories n' all contents is recursively copied ta tha destination. I aint talkin' bout chicken n' gravy biatch. For example, tha directory \f2doc\-files/example/images\fP n' all its contents would now be copied. Y'all KNOW dat shit, muthafucka! There be also a option ta exclude subdirectories. Put ya muthafuckin choppers up if ya feel dis!  
.TP 3
\-excludedocfilessubdir\ \ name1:name2... 
Excludes any "\f2doc\-files\fP" subdirectories wit tha given names. This prevents tha copyin of SCCS n' other source\-code\-control subdirectories. Put ya muthafuckin choppers up if ya feel dis!  
.TP 3
\-noqualifier\ \ all\  | \ packagename1:packagename2:... 
Omits qualifyin package name from ahead of class names up in output. Da argument ta \f2\-noqualifier\fP is either "\f2all\fP" (all package qualifiers is omitted) or a cold-ass lil colon\-separate list of packages, wit wildcards, ta be removed as qualifiers. Da package name is removed from places where class or intercourse names appear.
.br
.br
Da followin example omits all package qualifiers: 
.nf
\f3
.fl
    \-noqualifier all
.fl
\fP
.fi
Da followin example omits "java.lang" n' "java.io" package qualifiers: 
.nf
\f3
.fl
    \-noqualifier java.lang:java.io
.fl
\fP
.fi
Da followin example omits package qualifiers startin wit "java", n' "com.sun" subpackages (but not "javax"): 
.nf
\f3
.fl
    \-noqualifier java.*:com.sun.*
.fl
\fP
.fi
Where a package qualifier would step tha fuck up cuz of tha above behavior, tha name can be suitably shortened \-\- peep How tha fuck a name is displayed. Y'all KNOW dat shit, muthafucka! This rule is up in effect whether or not \f2\-noqualifier\fP is used. Y'all KNOW dat shit, muthafucka!  
.TP 3
\-notimestamp\  
Suppresses tha timestamp, which is hidden up in a HTML comment up in tha generated HTML near tha top of each page. Useful when you wanna run javadoc on two source bases n' diff them, as it prevents timestamps from causin a gangbangin' finger-lickin' diff (which would otherwise be a gangbangin' finger-lickin' diff on every last muthafuckin page). Da timestamp includes tha javadoc version number, n' currently be lookin like this: 
.nf
\f3
.fl
     <!\-\- Generated by javadoc (build 1.5.0_01) on Thu Apr 02 14:04:52 IST 2009 \-\->
.fl
\fP
.fi
.TP 3
\-nocomment\  
Suppress tha entire comment body, includin tha main description n' all tags, generatin only declarations. This option enablez re\-usin source filez originally intended fo' a gangbangin' finger-lickin' different purpose, ta produce skeleton HTML documentation all up in tha early stagez of a freshly smoked up project. 
.TP 3
\-sourcetab tabLength 
Specify tha number of spaces each tab takes up in tha source. 
.RE
.SH "COMMAND LINE ARGUMENT FILES"
.LP
To shorten or simplify tha javadoc command line, you can specify one or mo' filez dat theyselves contain arguments ta tha \f2javadoc\fP command (except \f2\-J\fP options). This enablez you ta create javadoc commandz of any length on any operatin system.
.LP
An argument file can include javac options n' source filenames up in any combination. I aint talkin' bout chicken n' gravy biatch. Da arguments within a gangbangin' file can be space\-separated or newline\-separated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If a gangbangin' filename gotz nuff embedded spaces, put tha whole filename up in double quotes.
.LP
Filenames within a argument file is relatizzle ta tha current directory, not tha location of tha argument file. Wildcardz (*) is not allowed up in these lists (like fuckin fo' specifyin \f2*.java\fP). Use of tha '\f2@\fP' characta ta recursively interpret filez aint supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da \f2\-J\fP options is not supported cuz they is passed ta tha launcher, which do not support argument files.
.LP
When executin javadoc, pass up in tha path n' name of each argument file wit tha '\f2@\fP' leadin character n' shit. When javadoc encountas a argument beginnin wit tha characta `\f2@\fP', it expandz tha contentz of dat file tha fuck into tha argument list.
.SS 
Example \- Single Arg File
.LP
Yo ass could bust a single argument file named "\f2argfile\fP" ta hold all Javadoc arguments:
.nf
\f3
.fl
  % \fP\f3javadoc @argfile\fP
.fl
.fi
.LP
This argument file could contain tha contentz of both filez shown up in tha next example.
.SS 
Example \- Two Arg Files
.LP
Yo ass can create two argument filez \-\- one fo' tha Javadoc options n' tha other fo' tha package names or source filenames: (Notice tha followin lists have no line\-continuation characters.)
.LP
Smoke a gangbangin' file named "\f2options\fP" containing:
.nf
\f3
.fl
     \-d docs\-filelist 
.fl
     \-use 
.fl
     \-splitindex
.fl
     \-windowtitle 'Java SE 7 API Justification'
.fl
     \-doctitle 'Java SE 7 API Justification'
.fl
     \-header '<b>Java(TM) SE 7</b>'
.fl
     \-bottom 'Copyright &copy; 1993\-2011 Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.'
.fl
     \-group "Core Packages" "java.*"
.fl
     \-overview /java/pubs/ws/1.7.0/src/share/classes/overview\-core.html
.fl
     \-sourcepath /java/pubs/ws/1.7.0/src/share/classes
.fl
\fP
.fi
.LP
Smoke a gangbangin' file named "\f2packages\fP" containing:
.nf
\f3
.fl
     com.mypackage1
.fl
     com.mypackage2
.fl
     com.mypackage3
.fl
\fP
.fi
.LP
Yo ass would then run javadoc with:
.nf
\f3
.fl
  % \fP\f3javadoc @options @packages\fP
.fl
.fi
.SS 
Example \- Arg Filez wit Paths
.LP
Da argument filez can have paths yo, but any filenames inside tha filez is relatizzle ta tha current hustlin directory (not \f2path1\fP or \f2path2\fP):
.nf
\f3
.fl
  % \fP\f3javadoc @path1/options @path2/packages\fP
.fl
.fi
.SS 
Example \- Option Arguments
.LP
Herez a example of savin just a argument ta a javadoc option up in a argument file. We bout ta use tha \f2\-bottom\fP option, since it can gotz a lengthy argument. Yo ass could create a gangbangin' file named "\f2bottom\fP" containin its text argument:
.nf
\f3
.fl
<font size="\-1">
.fl
      <a href="http://bugreport.sun.com/bugreport/">Submit a funky-ass bug or feature</a><br/>
.fl
      Copyright &copy; 1993, 2011, Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.<br/>
.fl
      Oracle be a registered trademark of Oracle Corporation and/or its affiliates.
.fl
      Other names may be trademarkz of they respectizzle ballers.</font>
.fl
\fP
.fi
.LP
Then run tha Javadoc tool with:
.nf
\f3
.fl
  % \fP\f3javadoc \-bottom @bottom @packages\fP
.fl
.fi
.LP
Or you could include tha \f2\-bottom\fP option all up in tha start of tha argument file, n' then just run it as:
.nf
\f3
.fl
  % \fP\f3javadoc @bottom @packages\fP
.fl
.fi
.SH "Name"
Running
.SH "RUNNING JAVADOC"
.LP
\f3Version Numbers\fP \- Da version number of javadoc can be determined rockin \f3javadoc \-J\-version\fP. Da version number of tha standard doclet appears up in its output stream. Well shiiiit, it can be turned off wit \f2\-quiet\fP.
.LP
\f3Public programmatic intercourse\fP \- To invoke tha Javadoc tool from within programs freestyled up in tha Java language. This intercourse is up in \f2com.sun.tools.javadoc.Main\fP (and javadoc is re\-entrant). For mo' details, peep 
.na
\f2Standard Doclet\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/guides/javadoc/standard\-doclet.html#runningprogrammatically.
.LP
\f3Hustlin Doclets\fP \- Da instructions given below is fo' invokin tha standard HTML doclet. To invoke a cold-ass lil custom doclet, use tha \-doclet n' \-docletpath options. For full, hustlin examplez of hustlin a particular doclet, peep tha 
.na
\f2MIF Doclet documentation\fP @
.fi
http://java.sun.com/j2se/javadoc/mifdoclet/docs/mifdoclet.html.
.SH "SIMPLE EXAMPLES"
.LP
Yo ass can run javadoc on entire packages or individual source files. Each package name has a cold-ass lil correspondin directory name. In tha followin examples, tha source filez is located at \f2/home/src/java/awt/*.java\fP. Da destination directory is \f2/home/html\fP.
.SS 
Documentin One or Mo' Packages
.LP
To document a package, tha source filez (\f2*.java\fP) fo' dat package must be located up in a gangbangin' finger-lickin' directory havin tha same name as tha package. If a package name is made up of nuff muthafuckin identifiers (separated by dots, like fuckin \f2java.awt.color\fP), each subsequent identifier must correspond ta a thugged-out deeper subdirectory (like fuckin \f2java/awt/color\fP). Yo ass may split tha source filez fo' a single package among two such directory trees located at different places, as long as \f2\-sourcepath\fP points ta dem both \-\- fo' example \f2src1/java/awt/color\fP n' \f2src2/java/awt/color\fP.
.LP
Yo ass can run javadoc either by changin directories (with \f2cd\fP) or by rockin \f2\-sourcepath\fP option. I aint talkin' bout chicken n' gravy biatch. Da examplez below illustrate both alternatives.
.RS 3
.TP 2
o
\f3Case 1 \- Run recursively startin from one or mo' packages\fP \- This example uses \-sourcepath so javadoc can be run from any directory n' \-subpackages (a freshly smoked up 1.4 option) fo' recursion. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it traverses tha subpackagez of tha \f2java\fP directory excludin packages rooted at \f2java.net\fP n' \f2java.lang\fP. Notice dis excludes \f2java.lang.ref\fP, a subpackage of \f2java.lang\fP). 
.nf
\f3
.fl
  % \fP\f3javadoc \fP\f3\-d\fP\f3 /home/html \fP\f3\-sourcepath\fP\f3 /home/src \fP\f3\-subpackages\fP\f3 java \fP\f3\-exclude\fP\f3 java.net:java.lang\fP
.fl
.fi
.LP
To also traverse down other package trees, append they names ta tha \f2\-subpackages\fP argument, like fuckin \f2java:javax:org.xml.sax\fP.  
.TP 2
o
\f3Case 2 \- Run on explicit packages afta changin ta tha "root" source directory\fP \- Chizzle ta tha parent directory of tha fully\-qualified package. Then run javadoc, supplyin namez of one or mo' packages you wanna document: 
.nf
\f3
.fl
  % \fP\f3cd /home/src/\fP
.fl
  % \f3javadoc \-d /home/html java.awt java.awt.event\fP
.fl
.fi
.TP 2
o
\f3Case 3 \- Run from any directory on explicit packages up in a single directory tree\fP \- In dis case, it don't matta what tha fuck tha current directory is. Run javadoc supplyin \f2\-sourcepath\fP wit tha parent directory of tha top\-level package, n' supplyin namez of one or mo' packages you wanna document: 
.nf
\f3
.fl
  % \fP\f3javadoc \-d /home/html \-sourcepath /home/src java.awt java.awt.event\fP
.fl
.fi
.TP 2
o
\f3Case 4 \- Run from any directory on explicit packages up in multiple directory trees\fP \- This is tha same ol' dirty as case 3 yo, but fo' packages up in separate directory trees. Run javadoc supplyin \f2\-sourcepath\fP wit tha path ta each treez root (colon\-separated) n' supply namez of one or mo' packages you wanna document fo' realz. All source filez fo' a given package do not need ta be located under a single root directory \-\- they just need ta be found somewhere along tha sourcepath. 
.nf
\f3
.fl
  % \fP\f3javadoc \-d /home/html \-sourcepath /home/src1:/home/src2 java.awt java.awt.event\fP
.fl
.fi
.RE
.LP
Result: All cases generate HTML\-formatted documentation fo' tha hood n' protected classes n' intercourses up in packages \f2java.awt\fP n' \f2java.awt.event\fP n' save tha HTML filez up in tha specified destination directory (\f2/home/html\fP). Because two or mo' packages is bein generated, tha document has three HTML frames \-\- fo' tha list of packages, tha list of classes, n' tha main class pages.
.SS 
Documentin One or Mo' Classes
.LP
Da second way ta run tha Javadoc tool is by passin up in one or mo' source filez (\f2.java\fP). Yo ass can run javadoc either of tha followin two ways \-\- by changin directories (with \f2cd\fP) or by fully\-specifyin tha path ta tha \f2.java\fP files. Relatizzle paths is relatizzle ta tha current directory. Da \f2\-sourcepath\fP option is ignored when passin up in source files. Yo ass can use command line wildcards, like fuckin asterisk (*), ta specify crewz of classes.
.RS 3
.TP 2
o
\f3Case 1 \- Changin ta tha source directory\fP \- Chizzle ta tha directory holdin tha \f2.java\fP files. Then run javadoc, supplyin namez of one or mo' source filez you wanna document. 
.nf
\f3
.fl
  % \fP\f3cd /home/src/java/awt\fP
.fl
  % \f3javadoc \-d /home/html Button.java Canvas.java Graphics*.java\fP
.fl
.fi
This example generates HTML\-formatted documentation fo' tha classes \f2Button\fP, \f2Canvas\fP n' classes beginnin wit \f2Graphics\fP. Because source filez rather than package names was passed up in as arguments ta javadoc, tha document has two frames \-\- fo' tha list of classes n' tha main page. 
.TP 2
o
\f3Case 2 \- Changin ta tha package root directory\fP \- This is useful fo' documentin individual source filez from different subpackages off tha same root. Chizzle ta tha package root directory, n' supply tha source filez wit paths from tha root. 
.nf
\f3
.fl
  % \fP\f3cd /home/src/\fP
.fl
  % \f3javadoc \-d /home/html java/awt/Button.java java/applet/Applet.java\fP
.fl
.fi
This example generates HTML\-formatted documentation fo' tha classes \f2Button\fP n' \f2Applet\fP. 
.TP 2
o
\f3Case 3 \- From any directory\fP \- In dis case, it don't matta what tha fuck tha current directory is. Run javadoc supplyin tha absolute path (or path relatizzle ta tha current directory) ta tha \f2.java\fP filez you wanna document. 
.nf
\f3
.fl
  % \fP\f3javadoc \-d /home/html /home/src/java/awt/Button.java /home/src/java/awt/Graphics*.java\fP
.fl
.fi
This example generates HTML\-formatted documentation fo' tha class \f2Button\fP n' classes beginnin wit \f2Graphics\fP. 
.RE
.SS 
Documentin Both Packages n' Classes
.LP
Yo ass can document entire packages n' individual classes all up in tha same time yo. Herez a example dat mixes two of tha previous examples. Yo ass can use \f2\-sourcepath\fP fo' tha path ta tha packages but not fo' tha path ta tha individual classes.
.nf
\f3
.fl
  % \fP\f3javadoc \-d /home/html \-sourcepath /home/src java.awt /home/src/java/applet/Applet.java\fP
.fl
.fi
.LP
This example generates HTML\-formatted documentation fo' tha package \f2java.awt\fP n' class \f2Applet\fP. (Da Javadoc tool determines tha package name fo' \f2Applet\fP from tha package declaration, if any, up in tha \f2Applet.java\fP source file.)
.SH "REAL WORLD EXAMPLE"
.LP
Da Javadoc tool has nuff useful options, a shitload of which is mo' commonly used than others yo. Here is effectively tha command we use ta run tha Javadoc tool on tha Java platform API. We use 180MB of memory ta generate tha documentation fo' tha 1500 (approx.) hood n' protected classes up in tha Java SE Platform, Standard Edition, v1.2.
.LP
Da same example is shown twice \-\- first as executed on tha command line, then as executed from a makefile. Well shiiiit, it uses absolute paths up in tha option arguments, which enablez tha same ol' dirty \f2javadoc\fP command ta be run from any directory.
.SS 
Command Line Example
.LP
Da followin example may be too long fo' some shells like fuckin DOS. Yo ass can bust a cold-ass lil command line argument file (or write a gangbangin' finger-lickin' dirty-ass shell script) ta workaround dis limitation.
.nf
\f3
.fl
% javadoc \-sourcepath /java/jdk/src/share/classes \\ 
.fl
    \-overview /java/jdk/src/share/classes/overview.html \\ 
.fl
    \-d /java/jdk/build/api \\ 
.fl
    \-use \\ 
.fl
    \-splitIndex \\ 
.fl
    \-windowtitle 'Java Platform, Standard Edizzle 7 API Justification' \\ 
.fl
    \-doctitle 'Java Platform, Standard Edizzle 7 API Justification' \\ 
.fl
    \-header '<b>Java(TM) SE 7</b>' \\ 
.fl
    \-bottom '<font size="\-1">
.fl
      <a href="http://bugreport.sun.com/bugreport/">Submit a funky-ass bug or feature</a><br/>
.fl
      Copyright &copy; 1993, 2011, Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.<br/>
.fl
      Oracle be a registered trademark of Oracle Corporation and/or its affiliates.
.fl
      Other names may be trademarkz of they respectizzle ballers.</font>' \\ 
.fl
    \-group "Core Packages" "java.*:com.sun.java.*:org.omg.*" \\ 
.fl
    \-group "Extension Packages" "javax.*" \\ 
.fl
    \-J\-Xmx180m \\  
.fl
    @packages
.fl
\fP
.fi
.LP
where \f2packages\fP is tha name of a gangbangin' file containin tha packages ta process, like fuckin \f2java.applet java.lang\fP. None of tha options should contain any newline charactas between tha single quotes. (For example, if you copy n' paste dis example, delete tha newline charactas from tha \f2\-bottom\fP option.) See tha other notes listed below.
.SS 
Makefile Example
.LP
This be a example of a GNU makefile. For a example of a Windows makefile, peep 
.na
\f2bustin a makefile fo' Windows\fP @
.fi
http://java.sun.com/j2se/javadoc/faq/index.html#makefiles.
.nf
\f3
.fl
javadoc \-\fP\f3sourcepath\fP\f3 $(SRCDIR)              \\   /* Sets path fo' source filez     */
.fl
        \-\fP\f3overview\fP\f3 $(SRCDIR)/overview.html  \\   /* Sets file fo' overview text    */
.fl
        \-\fP\f3d\fP\f3 /java/jdk/build/api             \\   /* Sets destination directory     */
.fl
        \-\fP\f3use\fP\f3                               \\   /* Addz "Use" filez               */
.fl
        \-\fP\f3splitIndex\fP\f3                        \\   /* Splits index A\-Z               */
.fl
        \-\fP\f3windowtitle\fP\f3 $(WINDOWTITLE)        \\   /* Addz a window title            */
.fl
        \-\fP\f3doctitle\fP\f3 $(DOCTITLE)              \\   /* Addz a thugged-out doc title               */
.fl
        \-\fP\f3header\fP\f3 $(HEADER)                  \\   /* Addz hustlin header text       */
.fl
        \-\fP\f3bottom\fP\f3 $(BOTTOM)                  \\   /* Addz text at bottom            */
.fl
        \-\fP\f3group\fP\f3 $(GROUPCORE)                \\   /* 1st subhead on overview page   */
.fl
        \-\fP\f3group\fP\f3 $(GROUPEXT)                 \\   /* 2nd subhead on overview page   */
.fl
        \-\fP\f3J\fP\f3\-Xmx180m                         \\   /* Sets memory ta 180MB           */
.fl
        java.lang java.lang.reflect        \\   /* Sets packages ta document      */
.fl
        java.util java.io java.net         \\ 
.fl
        java.applet
.fl
        
.fl
WINDOWTITLE = 'Java(TM) SE 7 API Justification'
.fl
DOCTITLE = 'Java(TM) Platform Standard Edizzle 7 API Justification'
.fl
HEADER = '<b>Java(TM) SE 7</font>'
.fl
BOTTOM = '<font size="\-1">
.fl
      <a href="http://bugreport.sun.com/bugreport/">Submit a funky-ass bug or feature</a><br/>
.fl
      Copyright &copy; 1993, 2011, Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.<br/>
.fl
      Oracle be a registered trademark of Oracle Corporation and/or its affiliates.
.fl
      Other names may be trademarkz of they respectizzle ballers.</font>'
.fl
GROUPCORE = '"Core Packages" "java.*:com.sun.java.*:org.omg.*"'
.fl
GROUPEXT  = '"Extension Packages" "javax.*"'
.fl
SRCDIR = '/java/jdk/1.7.0/src/share/classes'
.fl
\fP
.fi
.LP
Single quotes is used ta surround makefile arguments.
.LP
\f3NOTES\fP
.RS 3
.TP 2
o
If you omit tha \f2\-windowtitle\fP option, tha Javadoc tool copies tha doc title ta tha window title. Da \f2\-windowtitle\fP text is basically tha same as tha \f2\-doctitle\fP but without HTML tags, ta prevent dem tags from appearin as raw text up in tha window title. 
.TP 2
o
If you omit tha \f2\-footer\fP option, as done here, tha Javadoc tool copies tha header text ta tha footer n' shit. 
.TP 2
o
Other blingin options you might wanna use but not needed up in dis example is \-\f2classpath\fP n' \-\f2link\fP. 
.RE
.SH "TROUBLESHOOTING"
.SS 
General Troubleshooting
.RS 3
.TP 2
o
\f3Javadoc FAQUIZZY\fP \- Commonly\-encountered bugs n' shitshootin tips can be found on tha 
.na
\f2Javadoc FAQUIZZY\fP @
.fi
http://java.sun.com/j2se/javadoc/faq/index.html#B 
.TP 2
o
\f3Bugs n' Limitations\fP \- Yo ass can also peep some bugs listed at Important Bug Fixes n' Chizzles. 
.TP 2
o
\f3Version number\fP \- See version numbers. 
.TP 2
o
\f3Documents only legal classes\fP \- When documentin a package, javadoc only readz filez whose names is composed of legal class names. Yo ass can prevent javadoc from parsin a gangbangin' file by including, fo' example, a hyphen "\-" up in its filename. 
.RE
.SS 
Errors n' Warnings
.LP
Error n' warnin lyrics contain tha filename n' line number ta tha declaration line rather than ta tha particular line up in tha doc comment.
.RS 3
.TP 2
o
\f2"error: cannot read: Class1.java"\fP tha Javadoc tool is tryin ta load tha class Class1.java up in tha current directory. Da class name is shown wit its path (absolute or relative), which up in dis case is tha same ol' dirty as \f2./Class1.java\fP. 
.RE
.SH "ENVIRONMENT"
.RS 3
.TP 3
CLASSPATH 
Environment variable dat serves up tha path which javadoc uses ta find user class files. This environment variable is overridden by tha \f2\-classpath\fP option. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Separate directories wit a cold-ass lil colon, fo' example: 
.:/home/classes:/usr/local/java/classes 
.RE
.SH "SEE ALSO"
.RS 3
.TP 2
o
javac(1) 
.TP 2
o
java(1) 
.TP 2
o
jdb(1) 
.TP 2
o
javah(1) 
.TP 2
o
javap(1) 
.TP 2
o
.na
\f2Javadoc Home Page\fP @
.fi
http://www.oracle.com/technetwork/java/javase/documentation/index\-jsp\-135444.html 
.TP 2
o
.na
\f2How tha fuck ta Write Doc Comments fo' Javadoc\fP @
.fi
http://www.oracle.com/technetwork/java/javase/documentation/index\-137868.html 
.TP 2
o
.na
\f2Settin tha Class Path\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/tools/index.html#general 
.TP 2
o
.na
\f2How tha fuck Javac n' Javadoc Find Classes\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/tools/findingclasses.html#srcfilez (tools.jar) 
.RE
 
