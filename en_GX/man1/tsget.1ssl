.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TSGET 1"
.TH TSGET 1 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
tsget \- Time Stampin HTTP/HTTPS client
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBtsget\fR
\&\fB\-h\fR server_url
[\fB\-e\fR extension]
[\fB\-o\fR output]
[\fB\-v\fR]
[\fB\-d\fR]
[\fB\-k\fR private_key.pem]
[\fB\-p\fR key_password]
[\fB\-c\fR client_cert.pem]
[\fB\-C\fR CA_certs.pem]
[\fB\-P\fR CA_path]
[\fB\-r\fR file:file...]
[\fB\-g\fR EGD_socket]
[request]...
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \fBtsget\fR command can be used fo' bustin  a time stamp request, as
specified up in \fB\s-1RFC 3161\s0\fR, ta a time stamp server over \s-1HTTP\s0 or \s-1HTTPS\s0 n' storing
the time stamp response up in a gangbangin' file. This tool cannot be used fo' bustin the
requests n' verifyin responses, you can use tha OpenSSL \fB\f(BIts\fB\|(1)\fR command to
do dis shit. \fBtsget\fR can bust nuff muthafuckin requests ta tha server without closing
the \s-1TCP\s0 connection if mo' than one requests is specified on tha command
line.
.PP
Da tool sendz tha followin \s-1HTTP\s0 request fo' each time stamp request:
.PP
.Vb 7
\&        POST url HTTP/1.1
\&        User\-Agent: OpenTSA tsget.pl/<version>
\&        Host: <host>:<port>
\&        Pragma: no\-cache
\&        Content\-Type: application/timestamp\-query
\&        Accept: application/timestamp\-reply
\&        Content\-Length: length of body
\&
\&        ...binary request specified by tha user...
.Ve
.PP
\&\fBtsget\fR expects a response of type application/timestamp\-reply, which is
written ta a gangbangin' file without any interpretation.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-h\fR server_url" 4
.IX Item "-h server_url"
Da \s-1URL\s0 of tha \s-1HTTP/HTTPS\s0 server listenin fo' time stamp requests.
.IP "\fB\-e\fR extension" 4
.IX Item "-e extension"
If tha \fB\-o\fR option aint given dis argument specifies tha extension of the
output files. Da base name of tha output file is ghon be tha same as dem of
the input files. Default extension is '.tsr'. (Optional)
.IP "\fB\-o\fR output" 4
.IX Item "-o output"
This option can be specified only when just one request is busted ta the
server n' shit. Da time stamp response is ghon be freestyled ta tha given output file. '\-'
means standard output. In case of multiple time stamp requests or tha absence
of dis argument tha namez of tha output filez is ghon be derived from tha names
of tha input filez n' tha default or specified extension argument. (Optional)
.IP "\fB\-v\fR" 4
.IX Item "-v"
Da name of tha currently processed request is printed on standard
error. Shiiit, dis aint no joke. (Optional)
.IP "\fB\-d\fR" 4
.IX Item "-d"
Switches on verbose mode fo' tha underlyin \fBcurl\fR library. Yo ass can see
detailed debug lyrics fo' tha connection. I aint talkin' bout chicken n' gravy biatch. (Optional)
.IP "\fB\-k\fR private_key.pem" 4
.IX Item "-k private_key.pem"
(\s-1HTTPS\s0) In case of certificate-based client authentication over \s-1HTTPS\s0
<private_key.pem> must contain tha private key of tha user n' shit. Da private key
file can optionally be protected by a passphrase. Da \fB\-c\fR option must also
be specified. Y'all KNOW dat shit, muthafucka! (Optional)
.IP "\fB\-p\fR key_password" 4
.IX Item "-p key_password"
(\s-1HTTPS\s0) Specifies tha passphrase fo' tha private key specified by tha \fB\-k\fR
argument. If dis option is omitted n' tha key is passphrase protected \fBtsget\fR
will ask fo' dat shit. (Optional)
.IP "\fB\-c\fR client_cert.pem" 4
.IX Item "-c client_cert.pem"
(\s-1HTTPS\s0) In case of certificate-based client authentication over \s-1HTTPS\s0
<client_cert.pem> must contain tha X.509 certificate of tha user n' shit.  Da \fB\-k\fR
option must also be specified. Y'all KNOW dat shit, muthafucka! If dis option aint specified no
certificate-based client authentication will take place. (Optional)
.IP "\fB\-C\fR CA_certs.pem" 4
.IX Item "-C CA_certs.pem"
(\s-1HTTPS\s0) Da trusted \s-1CA\s0 certificate store. Da certificate chain of tha peer's
certificate must include one of tha \s-1CA\s0 certificates specified up in dis file.
Either option \fB\-C\fR or option \fB\-P\fR must be given up in case of \s-1HTTPS. \s0(Optional)
.IP "\fB\-P\fR CA_path" 4
.IX Item "-P CA_path"
(\s-1HTTPS\s0) Da path containin tha trusted \s-1CA\s0 certificates ta verify tha peer's
certificate. Da directory must be prepared wit tha \fBc_rehash\fR
OpenSSL utility. Either option \fB\-C\fR or option \fB\-P\fR must be given up in case of
\&\s-1HTTPS. \s0(Optional)
.IP "\fB\-rand\fR file:file..." 4
.IX Item "-rand file:file..."
Da filez containin random data fo' seedin tha random number
generator. Shiiit, dis aint no joke. Multiple filez can be specified, tha separator is \fB;\fR for
MS-Windows, \fB,\fR fo' \s-1VMS\s0 n' \fB:\fR fo' all other platforms. (Optional)
.IP "\fB\-g\fR EGD_socket" 4
.IX Item "-g EGD_socket"
Da name of a \s-1EGD\s0 socket ta git random data from. (Optional)
.IP "[request]..." 4
.IX Item "[request]..."
List of filez containin \fB\s-1RFC 3161\s0\fR DER-encoded time stamp requests, n' you can put dat on yo' toast. If no
requests is specifed only one request is ghon be busted ta tha server n' it will be
read from tha standard input. (Optional)
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
Da \fB\s-1TSGET\s0\fR environment variable can optionally contain default
arguments, n' you can put dat on yo' toast. Da content of dis variable be added ta tha list of command line
arguments.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Da examplez below presume dat \fBfile1.tsq\fR n' \fBfile2.tsq\fR contain valid
time stamp requests, tsa.opentsa.org listens at port 8080 fo' \s-1HTTP\s0 requests
and at port 8443 fo' \s-1HTTPS\s0 requests, tha \s-1TSA\s0 steez be available all up in tha /tsa
absolute path.
.PP
Git a time stamp response fo' file1.tsq over \s-1HTTP,\s0 output is freestyled ta 
file1.tsr:
.PP
.Vb 1
\&  tsget \-h http://tsa.opentsa.org:8080/tsa file1.tsq
.Ve
.PP
Git a time stamp response fo' file1.tsq n' file2.tsq over \s-1HTTP\s0 showing
progress, output is freestyled ta file1.reply n' file2.reply respectively:
.PP
.Vb 2
\&  tsget \-h http://tsa.opentsa.org:8080/tsa \-v \-e .reply \e
\&        file1.tsq file2.tsq
.Ve
.PP
Smoke a time stamp request, write it ta file3.tsq, bust it ta tha server and
write tha response ta file3.tsr:
.PP
.Vb 3
\&  openssl ts \-query \-data file3.txt \-cert | tee file3.tsq \e
\&        | tsget \-h http://tsa.opentsa.org:8080/tsa \e
\&        \-o file3.tsr
.Ve
.PP
Git a time stamp response fo' file1.tsq over \s-1HTTPS\s0 without client
authentication:
.PP
.Vb 2
\&  tsget \-h https://tsa.opentsa.org:8443/tsa \e
\&        \-C cacerts.pem file1.tsq
.Ve
.PP
Git a time stamp response fo' file1.tsq over \s-1HTTPS\s0 wit certificate-based
client authentication (it will ask fo' tha passphrase if client_key.pem is
protected):
.PP
.Vb 2
\&  tsget \-h https://tsa.opentsa.org:8443/tsa \-C cacerts.pem \e
\&        \-k client_key.pem \-c client_cert.pem file1.tsq
.Ve
.PP
Yo ass can shorten tha previous command line if you make use of tha \fB\s-1TSGET\s0\fR
environment variable. Da followin commandz do tha same as tha previous
example:
.PP
.Vb 4
\&  TSGET=\*(Aq\-h https://tsa.opentsa.org:8443/tsa \-C cacerts.pem \e
\&        \-k client_key.pem \-c client_cert.pem\*(Aq
\&  export TSGET
\&  tsget file1.tsq
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Zoltan Glozik <zglozik@opentsa.org>, OpenTSA project (http://www.opentsa.org)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIopenssl\fR\|(1), \fIts\fR\|(1), \fIcurl\fR\|(1), 
\&\fB\s-1RFC 3161\s0\fR
