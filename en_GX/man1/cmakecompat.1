.TH cmakecompat 1 "February 11, 2014" "cmake 2.8.12.2"
.SH NAME
.PP
cmakecompat \- Reference of CMake compatibilitizzle commands.

.SH COMPATIBILITY COMMANDS
.PP
.nf
  CMake Compatibilitizzle Listfile Commandz \- Obsolete commandz supported by CMake fo' compatibility.
.fi

.PP
This is tha documentation fo' now obsolete listfile commandz from previous CMake versions, which is still supported fo' compatibilitizzle reasons. Yo ass should instead use tha newer, fasta n' shinier freshly smoked up commands. ;\-)

.TP
.B build_name
Deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Use ${CMAKE_SYSTEM} n' ${CMAKE_CXX_COMPILER} instead.

.nf
  build_name(variable)
.fi

Sets tha specified variable ta a strang representin tha platform n' compila settings.  These joints is now available all up in tha CMAKE_SYSTEM n' CMAKE_CXX_COMPILER variables.

.TP
.B exec_program
Deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Use tha execute_process() command instead.

Run a executable program durin tha processin of tha CMakeList.txt file.


.nf
  exec_program(Executable [directory up in which ta run]
               [ARGS <arguments ta executable>]
               [OUTPUT_VARIABLE <var>]
               [RETURN_VALUE <var>])
.fi

Da executable is run up in tha optionally specified directory.  Da executable can include arguments if it is double quoted yo, but it is betta ta use tha optionizzle ARGS argument ta specify arguments ta tha program.   This is cuz cmake will then be able ta escape spaces up in tha executable path.  An optionizzle argument OUTPUT_VARIABLE specifies a variable up in which ta store tha output. To capture tha return value of tha execution, provide a RETURN_VALUE. If OUTPUT_VARIABLE is specified, then no output will git all up in tha stdout/stderr of tha console hustlin cmake.


.TP
.B export_library_dependencies
Deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Use INSTALL(EXPORT) or EXPORT command.

This command generates a old\-style library dependencies file.  Projects requirin CMake 2.6 or lata should not use tha command. Y'all KNOW dat shit, muthafucka!  Use instead tha install(EXPORT) command ta help export targets from a installation tree n' tha export() command ta export targets from a funky-ass build tree.


Da old\-style library dependencies file do not take tha fuck into account per\-configuration namez of libraries or tha LINK_INTERFACE_LIBRARIES target property.


.nf
  export_library_dependencies(<file> [APPEND])
.fi

Smoke a gangbangin' file named <file> dat can be included tha fuck into a CMake listfile wit tha INCLUDE command. Y'all KNOW dat shit, muthafucka!  Da file will contain a fuckin shitload of SET commandz dat will set all tha variablez needed fo' library dependency shiznit. I aint talkin' bout chicken n' gravy biatch.  This should be tha last command up in tha top level CMakeLists.txt file of tha project.  If tha APPEND option is specified, tha SET commandz is ghon be appended ta tha given file instead of replacin dat shit.

.TP
.B install_files
Deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Use tha install(FILES ) command instead.

This command has been superceded by tha install command. Y'all KNOW dat shit, muthafucka!  It be provided fo' compatibilitizzle wit olda CMake code.  Da FILES form is directly replaced by tha FILES form of tha install command. Y'all KNOW dat shit, muthafucka!  Da regexp form can be expressed mo' clearly rockin tha GLOB form of tha file command.


.nf
  install_files(<dir> extension file file ...)
.fi

Smoke rulez ta install tha listed filez wit tha given extension tha fuck into tha given directory.  Only filez existin up in tha current source tree or its correspondin location up in tha binary tree may be listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If a gangbangin' file specified already has a extension, dat extension is ghon be removed first.  This is useful fo' providin listz of source filez like fuckin foo.cxx when you want tha correspondin foo.h ta be installed. Y'all KNOW dat shit, muthafucka! A typical extension is '.h'.


.nf
  install_files(<dir> regexp)
.fi

Any filez up in tha current source directory dat match tha regular expression is ghon be installed.


.nf
  install_files(<dir> FILES file file ...)
.fi

Any filez listed afta tha FILES keyword is ghon be installed explicitly from tha names given. I aint talkin' bout chicken n' gravy biatch.  Full paths is allowed up in dis form.


Da directory <dir> is relatizzle ta tha installation prefix, which is stored up in tha variable CMAKE_INSTALL_PREFIX.

.TP
.B install_programs
Deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use tha install(PROGRAMS ) command instead.

This command has been superceded by tha install command. Y'all KNOW dat shit, muthafucka!  It be provided fo' compatibilitizzle wit olda CMake code.  Da FILES form is directly replaced by tha PROGRAMS form of tha INSTALL command. Y'all KNOW dat shit, muthafucka!  Da regexp form can be expressed mo' clearly rockin tha GLOB form of tha FILE command.


.nf
  install_programs(<dir> file1 file2 [file3 ...])
  install_programs(<dir> FILES file1 [file2 ...])
.fi

Smoke rulez ta install tha listed programs tha fuck into tha given directory. Use tha FILES argument ta guarantee dat tha file list version of tha command is ghon be used even when there is only one argument.


.nf
  install_programs(<dir> regexp)
.fi

In tha second form any program up in tha current source directory dat matches tha regular expression is ghon be installed.


This command is intended ta install programs dat is not built by cmake, like fuckin shell scripts, n' you can put dat on yo' toast.  See tha TARGETS form of tha INSTALL command ta create installation rulez fo' targets built by cmake.


Da directory <dir> is relatizzle ta tha installation prefix, which is stored up in tha variable CMAKE_INSTALL_PREFIX.

.TP
.B install_targets
Deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use tha install(TARGETS )  command instead.

This command has been superceded by tha install command. Y'all KNOW dat shit, muthafucka!  It be provided fo' compatibilitizzle wit olda CMake code.


.nf
  install_targets(<dir> [RUNTIME_DIRECTORY dir] target target)
.fi

Smoke rulez ta install tha listed targets tha fuck into tha given directory.  Da directory <dir> is relatizzle ta tha installation prefix, which is stored up in tha variable CMAKE_INSTALL_PREFIX. If RUNTIME_DIRECTORY is specified, then on systems wit special runtime filez (Windows DLL), tha filez is ghon be copied ta dat directory.

.TP
.B link_libraries
Deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use tha target_link_libraries() command instead.

Link libraries ta all targets added later.


.nf
  link_libraries(library1 <debug | optimized> library2 ...)
.fi

Specify a list of libraries ta be linked tha fuck into any followin targets (typically added wit tha add_executable or add_library calls).  This command is passed down ta all subdirectories. Put ya muthafuckin choppers up if ya feel dis!  Da debug n' optimized strings may be used ta indicate dat tha next library listed is ta be used only fo' dat specific type of build.

.TP
.B make_directory
Deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use tha file(MAKE_DIRECTORY ) command instead.

.nf
  make_directory(directory)
.fi

Creates tha specified directory.  Full paths should be given. I aint talkin' bout chicken n' gravy biatch.  Any parent directories dat do not exist will also be pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Use wit care.

.TP
.B output_required_files
Deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Approximate C preprocessor dependency scanning.

This command exists only cuz ancient CMake versions provided dat shit.  CMake handlez preprocessor dependency scannin automatically rockin a mo' advanced scanner.


.nf
  output_required_files(srcfile outputfile)
.fi

Outputs a list of all tha source filez dat is required by tha specified srcfile. This list is freestyled tha fuck into outputfile. This is similar ta freestylin up tha dependencies fo' srcfile except dat it jumps from .h filez tha fuck into .cxx, .c n' .cpp filez if possible.

.TP
.B remove
Deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use tha list(REMOVE_ITEM ) command instead.

.nf
  remove(VAR VALUE VALUE ...)
.fi

Removes VALUE from tha variable VAR.  This is typically used ta remove entries from a vector (e.g. semicolon separated list).  VALUE is expanded.

.TP
.B subdir_depends
Deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Do nothing.

.nf
  subdir_depends(subdir dep1 dep2 ...)
.fi

Do not do anything.  This command used ta help projects order parallel buildz erectly.  This functionalitizzle is now automatic.

.TP
.B subdirs
Deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use tha add_subdirectory() command instead.

Add a list of subdirectories ta tha build.


.nf
  subdirs(dir1 dir2 ...[EXCLUDE_FROM_ALL exclude_dir1 exclude_dir2 ...]
          [PREORDER] )
.fi

Add a list of subdirectories ta tha build. Y'all KNOW dat shit, muthafucka! Da add_subdirectory command should be used instead of subdirs although subdirs will still work. This will cause any CMakeLists.txt filez up in tha sub directories ta be processed by CMake.  Any directories afta tha PREORDER flag is traversed first by makefile builds, tha PREORDER flag has no effect on IDE projects, n' you can put dat on yo' toast.  Any directories afta tha EXCLUDE_FROM_ALL marker aint gonna be included up in tha top level makefile or project file. This is useful fo' havin CMake create makefilez or projects fo' a set of examplez up in a project. Yo ass would want CMake ta generate makefilez or project filez fo' all tha examplez all up in tha same time yo, but you would not want dem ta show up in tha top level project or be built each time make is run from tha top.

.TP
.B use_mangled_mesa
Copy mesa headaz fo' use up in combination wit system GL.

.nf
  use_mangled_mesa(PATH_TO_MESA OUTPUT_DIRECTORY)
.fi

Da path ta mesa includes, should contain gl_mangle.h.  Da mesa headaz is copied ta tha specified output directory.  This allows mangled mesa headaz ta override other GL headaz by bein added ta tha include directory path earlier.

.TP
.B utility_source
Specify tha source tree of a third\-party utility.

.nf
  utility_source(cache_entry executable_name
                 path_to_source [file1 file2 ...])
.fi

When a third\-party utilityz source is included up in tha distribution, dis command specifies its location n' name.  Da cache entry aint gonna be set unless tha path_to_source n' all listed filez exist.  It be assumed dat tha source tree of tha utilitizzle gonna git been built before it is needed.


When cross compilin CMake will print a warnin if a utility_source() command is executed, cuz up in nuff cases it is used ta build a executable which is executed lata on. I aint talkin' bout chicken n' gravy biatch. This don't work when cross compiling, since tha executable can run only on they target platform. Right back up in yo muthafuckin ass. So up in dis case tha cache entry has ta be adjusted manually so it points ta a executable which is runnable on tha build host.

.TP
.B variable_requires
Deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use tha if() command instead.

Assert satisfaction of a optionz required variables.


.nf
  variable_requires(TEST_VARIABLE RESULT_VARIABLE
                    REQUIRED_VARIABLE1
                    REQUIRED_VARIABLE2 ...)
.fi

Da first argument (TEST_VARIABLE) is tha name of tha variable ta be tested, if dat variable is false not a god damn thang else is done. If TEST_VARIABLE is true, then tha next argument (RESULT_VARIABLE) be a variable dat is set ta legit if all tha required variablez is set. Da rest of tha arguments is variablez dat must be legit or not set ta NOTFOUND ta avoid a error. Shiiit, dis aint no joke.  If any is not true, a error is reported.

.TP
.B write_file
Deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use tha file(WRITE ) command instead.

.nf
  write_file(filename "message ta write"... [APPEND])
.fi

Da first argument is tha file name, tha rest of tha arguments is lyrics ta write. If tha argument APPEND is specified, then tha message is ghon be appended.


NOTE 1: file(WRITE ... n' file(APPEND ... do exactly tha same as dis one but add some mo' functionality.


NOTE 2: When rockin write_file tha produced file cannot be used as a input ta CMake (CONFIGURE_FILE, source file ...) cuz it will lead ta a infinite loop. Use configure_file if you wanna generate input filez ta CMake.

.SH COPYRIGHT
.PP
Copyright 2000\-2012 Kitware, Inc., Insight Software Consortium.  All muthafuckin rights reserved.

.PP
Redistribution n' use up in source n' binary forms, wit or without modification, is permitted provided dat tha followin conditions is met:

.PP
Redistributionz of source code must retain tha above copyright notice, dis list of conditions n' tha followin disclaimer.

.PP
Redistributions up in binary form must reproduce tha above copyright notice, dis list of conditions n' tha followin disclaimer up in tha documentation and/or other shiznit provided wit tha distribution.

.PP
Neither tha namez of Kitware, Inc., tha Insight Software Consortium, nor tha namez of they contributors may be used ta endorse or promote shizzle derived from dis software without specific prior freestyled permission.

.PP
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

.SH SEE ALSO
.PP
Da followin resources is available ta git help rockin CMake:

.TP
.B Home Page
http://www.cmake.org

Da primary startin point fo' peepin' bout CMake.

.TP
.B Frequently Axed Questions
http://www.cmake.org/Wiki/CMake_FAQ

A Wiki is provided containin lyrics ta frequently axed thangs. 

.TP
.B Online Documentation
http://www.cmake.org/HTML/Documentation.html

Links ta available documentation may be found on dis wizzy page.

.TP
.B Mailin List
http://www.cmake.org/HTML/MailingLists.html

For help n' rap bout rockin cmake, a mailin list is provided at cmake@cmake.org. Da list is member\-post\-only but one may sign up on tha CMake wizzy page. Please first read tha full documentation at http://www.cmake.org before postin thangs ta tha list.

