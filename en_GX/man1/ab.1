.\" XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
.\" DO NOT EDIT! Generated from XML source.
.\" XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "AB" 1 "2014-06-24" "Apache HTTP Server" "ab"

.SH NAME
ab \- Apache HTTP server benchmarkin tool

.SH "SYNOPSIS"
 
.PP
\fBab\fR [ -\fBA\fR \fIauth-username\fR:\fIpassword\fR ] [ -\fBb\fR \fIwindowsize\fR ] [ -\fBB\fR \fIlocal-address\fR ] [ -\fBc\fR \fIconcurrency\fR ] [ -\fBC\fR \fIcookie-name\fR=\fIvalue\fR ] [ -\fBd\fR ] [ -\fBe\fR \fIcsv-file\fR ] [ -\fBf\fR \fIprotocol\fR ] [ -\fBg\fR \fIgnuplot-file\fR ] [ -\fBh\fR ] [ -\fBH\fR \fIcustom-header\fR ] [ -\fBi\fR ] [ -\fBk\fR ] [ -\fBl\fR ] [ -\fBm\fR \fIHTTP-method\fR ] [ -\fBn\fR \fIrequests\fR ] [ -\fBp\fR \fIPOST-file\fR ] [ -\fBP\fR \fIproxy-auth-username\fR:\fIpassword\fR ] [ -\fBq\fR ] [ -\fBr\fR ] [ -\fBs\fR \fItimeout\fR ] [ -\fBS\fR ] [ -\fBt\fR \fItimelimit\fR ] [ -\fBT\fR \fIcontent-type\fR ] [ -\fBu\fR \fIPUT-file\fR ] [ -\fBv\fR \fIverbosity\fR] [ -\fBV\fR ] [ -\fBw\fR ] [ -\fBx\fR \fI<table>-attributes\fR ] [ -\fBX\fR \fIproxy\fR[:\fIport\fR] ] [ -\fBy\fR \fI<tr>-attributes\fR ] [ -\fBz\fR \fI<td>-attributes\fR ] [ -\fBZ\fR \fIciphersuite\fR ] [http[s]://]\fIhostname\fR[:\fIport\fR]/\fIpath\fR
 

.SH "SUMMARY"
 
.PP
ab be a tool fo' benchmarkin yo' Apache Hypertext Transfer Protocol (HTTP) server\&. Well shiiiit, it is designed ta hit you wit a impression of how tha fuck yo' current Apache installation performs\&. This especially shows you how tha fuck nuff requests per second yo' Apache installation is capable of serving\&.
 

.SH "OPTIONS"
 
 
.TP
-A \fIauth-username\fR:\fIpassword\fR
Supply BASIC Authentication credentials ta tha server\&. Da username n' password is separated by a single : n' busted on tha wire base64 encoded\&. Da strang is busted regardless of whether tha server needz it (\fIi\&.e\&.\fR, has busted a 401 authentication needed)\&.  
.TP
-b \fIwindowsize\fR
Size of TCP send/receive buffer, up in bytes\&.  
.TP
-B \fIlocal-address\fR
Address ta bind ta when makin outgoin connections\&.  
.TP
-c \fIconcurrency\fR
Number of multiple requests ta big-ass up at a time\&. Default is one request at a time\&.  
.TP
-C \fIcookie-name\fR=\fIvalue\fR
Add a Cookie: line ta tha request\&. Da argument is typically up in tha form of a \fIname\fR=\fIvalue\fR pair\&. This field is repeatable\&.  
.TP
-d
Do not display tha "percentage served within XX [ms] table"\&. (legacy support)\&.  
.TP
-e \fIcsv-file\fR
Write a Comma separated value (CSV) file which gotz nuff fo' each cementage (from 1% ta 100%) tha time (in milliseconds) it took ta serve dat cementage of tha requests\&. This is probably mo' useful than tha 'gnuplot' file; as tha thangs up in dis biatch is already 'binned'\&.  
.TP
-f \fIprotocol\fR
Specify SSL/TLS protocol (SSL2, SSL3, TLS1, TLS1\&.1, TLS1\&.2, or ALL)\&. TLS1\&.1 n' TLS1\&.2 support available up in 2\&.4\&.4 n' later\&.  
.TP
-g \fIgnuplot-file\fR
Write all measured joints up as a 'gnuplot' or TSV (Tab separate joints) file\&. This file can easily be imported tha fuck into packages like Gnuplot, IDL, Mathematica, Igor or even Excel\&. Da labels is on tha straight-up original gangsta line of tha file\&.  
.TP
-h
Display usage shiznit\&.  
.TP
-H \fIcustom-header\fR
Append extra headaz ta tha request\&. Da argument is typically up in tha form of a valid header line, containin a cold-ass lil colon-separated field-value pair (\fIi\&.e\&.\fR, "Accept-Encoding: zip/zop;8bit")\&.  
.TP
-i
Do HEAD requests instead of GET\&.  
.TP
-k
Enable tha HTTP KeepKickin It feature, \fIi\&.e\&.\fR, big-ass up multiple requests within one HTTP session\&. Default is no KeepKickin It\&.  
.TP
-l
Do not report errors if tha length of tha responses aint constant\&. This can be usefull fo' dynamic pages\& fo' realz. Available up in 2\&.4\&.7 n' later\&.  
.TP
-m \fIHTTP-method\fR
Custom HTTP method fo' tha requests\& fo' realz. Available up in 2\&.4\&.10 n' later\&.  
.TP
-n \fIrequests\fR
Number of requests ta big-ass up fo' tha benchmarkin session\&. Da default is ta just big-ass up a single request which probably leadz ta non-representatizzle benchmarkin thangs up in dis biatch\&.  
.TP
-p \fIPOST-file\fR
File containin data ta POST\&. Remember ta also set -T\&.  
.TP
-P \fIproxy-auth-username\fR:\fIpassword\fR
Supply BASIC Authentication credentials ta a proxy en-route\&. Da username n' password is separated by a single : n' busted on tha wire base64 encoded\&. Da strang is busted regardless of whether tha proxy needz it (\fIi\&.e\&.\fR, has busted a 407 proxy authentication needed)\&.  
.TP
-q
When processin mo' than 150 requests, ab outputs a progress count on stderr every last muthafuckin 10% or 100 requests or so\&. Da -q flag will suppress these lyrics\&.  
.TP
-r
Don't exit on socket receive errors\&.  
.TP
-s \fItimeout\fR
Maximum number of secondz ta wait before tha socket times out\&. Default is 30 seconds\& fo' realz. Available up in 2\&.4\&.4 n' later\&.  
.TP
-S
Do not display tha median n' standard deviation joints, nor display tha warning/error lyrics when tha average n' median is mo' than one or two times tha standard deviation apart\& fo' realz. And default ta tha min/avg/max joints\&. (legacy support)\&.  
.TP
-t \fItimelimit\fR
Maximum number of secondz ta spend fo' benchmarking\&. This implies a -n 50000 internally\&. Use dis ta benchmark tha server within a gangbangin' fixed total amount of time\&. Per default there is no timelimit\&.  
.TP
-T \fIcontent-type\fR
Content-type header ta use fo' POST/PUT data, eg\&. application/x-www-form-urlencoded\&. Default is text/plain\&.  
.TP
-u \fIPUT-file\fR
File containin data ta PUT\&. Remember ta also set -T\&.  
.TP
-v \fIverbosity\fR
Set verbositizzle level - 4 n' above prints shiznit on headers, 3 n' above prints response codes (404, 200, etc\&.), 2 n' above prints warnings n' info\&.  
.TP
-V
Display version number n' exit\&.  
.TP
-w
Print up thangs up in dis biatch up in HTML tables\&. Default table is two columns wide, wit a white background\&.  
.TP
-x \fI<table>-attributes\fR
Strin ta use as attributes fo' <table>\& fo' realz. Attributes is banged <table \fIhere\fR >\&.  
.TP
-X \fIproxy\fR[:\fIport\fR]
Use a proxy server fo' tha requests\&.  
.TP
-y \fI<tr>-attributes\fR
Strin ta use as attributes fo' <tr>\&.  
.TP
-z \fI<td>-attributes\fR
Strin ta use as attributes fo' <td>\&.  
.TP
-Z \fIciphersuite\fR
Specify SSL/TLS cipher suite (See openssl ciphers)  
 
.SH "OUTPUT"
 
.PP
Da followin list raps bout tha joints returned by ab:
 
 
.TP
Server Software
Da value, if any, returned up in tha \fIserver\fR HTTP header of tha straight-up original gangsta successful response\&. This includes all charactas up in tha header from beginnin ta tha point a cold-ass lil characta wit decimal value of 32 (most notably: a space or CR/LF) is detected\&.  
.TP
Server Hostname
Da DNS or IP address given on tha command line  
.TP
Server Port
Da port ta which ab is connecting\&. If no port is given on tha command line, dis will default ta 80 fo' http n' 443 fo' https\&.  
.TP
SSL/TLS Protocol
Da protocol parametas negotiated between tha client n' server\&. This will only be printed if SSL is used\&.  
.TP
Document Path
Da request URI parsed from tha command line string\&.  
.TP
Document Length
This is tha size up in bytez of tha straight-up original gangsta successfully returned document\&. If tha document length chizzlez durin testing, tha response is considered a error\&.  
.TP
Concurrency Level
Da number of concurrent clients used durin tha test  
.TP
Time taken fo' tests
This is tha time taken from tha moment tha straight-up original gangsta socket connection is pimped ta tha moment tha last response is received  
.TP
Complete requests
Da number of successful responses received  
.TP
Failed requests
Da number of requests dat was considered a gangbangin' failure\&. If tha number is pimped outa than zero, another line is ghon be printed showin tha number of requests dat failed cuz of connecting, reading, incorrect content length, or exceptions\&.  
.TP
Write errors
Da number of errors dat failed durin write (broken pipe)\&.  
.TP
Non-2xx responses
Da number of responses dat was not up in tha 200 seriez of response codes\&. If all responses was 200, dis field aint printed\&.  
.TP
Keep-Kickin It requests
Da number of connections dat resulted up in Keep-Kickin It requests  
.TP
Total body sent
If configured ta bust data as part of tha test, dis is tha total number of bytes busted durin tha tests\&. This field is omitted if tha test did not include a funky-ass body ta send\&.  
.TP
Total transferred
Da total number of bytes received from tha server\&. This number is essentially tha number of bytes busted over tha wire\&.  
.TP
HTML transferred
Da total number of document bytes received from tha server\&. This number excludes bytes received up in HTTP headaz  
.TP
Requests per second
This is tha number of requests per second\&. This value is tha result of dividin tha number of requests by tha total time taken  
.TP
Time per request
Da average time dropped per request\&. Da first value is calculated wit tha formula concurrency * timetaken * 1000 / done while tha second value is calculated wit tha formula timetaken * 1000 / done  
.TP
Transfer rate
Da rate of transfer as calculated by tha formula totalread / 1024 / timetaken  
 
.SH "BUGS"
 
.PP
There is various statically declared bufferz of fixed length\&. Combined wit tha lazy parsin of tha command line arguments, tha response headaz from tha server n' other external inputs, dis might bite you\&.
 
.PP
It do not implement HTTP/1\&.x fully; only accepts some 'expected' formz of responses\&. Da rather heavy use of strstr(3) shows up top up in profile, which might indicate a performizzle problem; \fIi\&.e\&.\fR, you would measure tha ab performizzle rather than tha server's\&.
 
