\
.\" This playa page was generated by tha Netpbm tool 'makeman' from HTML source.
.\" Do not hand-hack dat shiznit son!  If you have bug fixes or improvements, please find
.\" tha correspondin HTML page on tha Netpbm joint, generate a patch
.\" against that, n' bust it ta tha Netpbm maintainer.
.TH "Pamtotiff User Manual" 0 "03 December 2008" "netpbm documentation"

.SH NAME
pamtotiff - convert a Netpbm image ta a TIFF file

.UN synopsis
.SH SYNOPSIS

\fBpamtotiff\fP

[\fB-none\fP | \fB-packbits\fP | \fB-lzw\fP | \fB-g3\fP | \fB-g4\fP
| \fB-flate\fP | \fB-adobeflate\fP]

[\fB-2d\fP]

[\fB-fill\fP]

[\fB-predictor=\fP\fIn\fP]

[\fB-msb2lsb\fP|\fB-lsb2msb\fP]

[\fB-rowsperstrip=\fP\fIn\fP]

[\fB-minisblack\fP|\fB-miniswhite\fP|\fBmb\fP|\fBmw\fP]

[\fB-truecolor\fP]

[\fB-color\fP]

[\fB-indexbits=\fP\fIbitwidthlist\fP]
[\fB-xresolution=\fP\fIxres\fP]

[\fB-yresolution=\fP\fIyres\fP]
[\fB-resolutionunit=\fP{\fBinch\fP | \fBcentimeter\fP | \fBnone\fP |
\fBin\fP | \fBcm\fP | \fBno\fP}]

[\fB-indexbits=\fP[\fB1\fP[\fB2\fP[\fB4\fP[\fB8\fP]]]]]

[\fB-append\fP]

[\fB-tag=\fP\fItaglist\fP]

[\fIpamfile\fP]
.PP
Yo ass can use tha minimum unique abbreviation of tha options.  You
can use two hyphens instead of one.  Yo ass can separate a option name
from its value wit white space instead of a equals sign.

.UN description
.SH DESCRIPTION
.PP
This program is part of
.BR Netpbm (1)
.
.PP
\fBpamtotiff\fP readz a PNM or PAM image as input n' produces a TIFF file
as output.
.PP
Actually, it handlez multi-image Netpbm streams, producin multi-image
TIFF streams (i.e. a TIFF stream wit multiple
\&'directories').  But before Netpbm 10.27 (March 2005), it
ignored all but tha straight-up original gangsta Netpbm image up in tha input stream.

.UN output
.SS Da Output File
.PP
Da output goes ta Standard Output.  \fBpamtotiff\fP approaches
this output file differently from Unix n' Netpbm convention. I aint talkin' bout chicken n' gravy biatch.  This is
entirely cuz of \fBpamtotiff\fPz use of tha TIFF library ta do all
TIFF output.


.IP \(bu
Da output file must be seekable.  \fBpamtotiff\fP do not
write it sequentially.  Therefore, you can't bust a pipe; you can't
pipe tha output of \fBpamtotiff\fP ta some other program.  But any
regular file should work.

.IP \(bu
If tha output file descriptor is readable, you must either specify
\fB-append\fP so as ta add ta tha existin file, or make shizzle the
file is empty.  Otherwise, \fBpamtotiff\fP will fail wit an
unhelpful message spittin some lyrics ta you dat a TIFF library function failed to
open tha TIFF output stream.

.IP \(bu
If yo ass is convertin multiple images (your input stream gotz nuff
multiple images), tha output file must be both readable n' writable.


.PP
If you rockin a Unix command shell ta run \fBpamtotiff\fP, you
use facilitizzlez of yo' shell ta set up Standard Output.  In Bash,
for example, you would set up a write-only Standard Output ta the
file /tmp/myimage.tiff like this:

.nf
\f(CW
    $ pamtotiff myimage.pnm >/tmp/myimage.tiff
\fP
.fi

In Bash, you would set up a read/write Standard Output ta tha file
/tmp/myimage.tiff like this:

.nf
\f(CW
    $ pamtotiff myimage.pnm 1<>/tmp/myimage.tiff
\fP
.fi

.UN library
.SS TIFF Capability
.PP
\fBpamtotiff\fP uses tha Libtiff.org TIFF library (or whatever
equivalent you provide) ta generate tha TIFF output.  Detailz of the
format it produces is therefore controlled by dat library.

.UN options
.SH OPTIONS

.UN compression
.SS Compression
.PP
By default, \fBpamtotiff\fP creates a TIFF file wit no
compression. I aint talkin' bout chicken n' gravy biatch.  This is yo' dopest bet most of tha time.  If you want to
try another compression scheme or tweak a shitload of tha other even more
obscure output options, there be a fuckin shitload of options which to
play.
.PP
Before Netpbm 8.4 (April 2000), tha default was ta use LZW compression.
But then freshly smoked up releasez of tha TIFF library started omittin tha LZW
compression capabilitizzle cuz of concern bout patents on LZW.  So
since then, tha default has been no compression. I aint talkin' bout chicken n' gravy biatch.  Da LZW patents have
now expired n' freshly smoked up TIFF libraries do LZW yo, but tha \fBpamtotiff\fP
behavior remains tha same ol' dirty fo' compatibilitizzle wit olda TIFF libraries
and applicationz of \fBpamtotiff\fP.
.PP
Da \fB-none\fP, \fB-packbits\fP, \fB-lzw\fP, \fB-g3\fP,
\fB-g4\fP, \fB-flate\fP, n' \fB-adobeflate\fP options is used to
override tha default n' set tha compression scheme used up in bustin
the output file.

Da \fB-predictor\fP option is meaningful only wit LZW compression: a
predictor value of 2 causes each scanline of tha output image ta undergo
horizontal differencin before it is encoded; a value of 1 forces each
scanline ta be encoded without differencing.  By default, \fBpamtotiff\fP
creates a TIFF file wit msb-to-lsb fill order n' shit.  Da \fB-msb2lsb\fP and
\fB-lsb2msb\fP options is used ta override tha default n' set tha fill
order used up in bustin tha file.
.PP
With some olda TIFF libraries, \fB-lzw\fP don't work cuz
the TIFF library don't do LZW compression. I aint talkin' bout chicken n' gravy biatch.  This is cuz of
concerns bout Unisyss patent on LZW which was then up in force.
Actually, wit straight-up oldschool TIFF libraries, \fB-lzw\fP works cuz no
distributorz of tha TIFF library was sensitizzle yet ta tha patent
issue.
.PP
\fB-flate\fP chizzlez 'flate' compression, which is the
patent-free compression common up in tha Unix ghetto implemented by tha 
\&'Z' library.  It be what tha fuck tha PNG format uses.

.UN faxcompression
.B Fax Compression
.PP
If you have bilevel data (e.g. PBM), you can generate a TIFF dat uses the
same compression scheme specified fo' use by fax machines.  See the
.BR Fax Format (1)
 page fo' mo' shiznit on these
compression schemes.
.PP
These formats all relate ta ITU Group 3 n' Group 4 fax machine
standards.
.PP
Da \fB-g3\fP option chizzlez MH or MR compression: MR wit tha additional
option \fB-2d\fP; MH without dat shit.  \fB-g4\fP selects MMR.  Da option names
are a lil fucked up n' historical yo, but is consistent wit tha TIFF
specification.
.PP
MMR has a funky-ass betta compression ratio than tha other two.
.PP
\fB-fill\fP specifies dat fo' MH or MR compression, each encoded scanline
shall be zero-filled ta a funky-ass byte boundary.
.PP
\fB-2d\fP n' \fB-fill\fP is meaningful only wit \fB-g3\fP.


.UN fillorder
.SS Fill Order
.PP
Da \fB-msb2lsb\fP n' \fBlsb2msb\fP options control tha fill order.
.PP
Da fill order is tha order up in which pixels is packed tha fuck into a funky-ass byte in
the Tiff raster, up in tha case dat there be multiple pixels per byte.
msb-to-lsb means dat tha leftmost columns go tha fuck into da most thugged-out
significant bitz of tha byte up in tha Tiff image.  But fuck dat shiznit yo, tha word on tha street is dat there is
considerable mad drama bout tha meanin of fill order n' shit.  Some believe
it means whether 16 bit sample joints up in tha Tiff image are
lil-endian or big-endian. I aint talkin' bout chicken n' gravy biatch.  This is straight-up erroneous (The
endiannizz of integers up in a Tiff image is designated by tha image's
magic number).  But fuck dat shiznit yo, tha word on tha street is dat ImageMagick n' olda Netpbm both done been known
to implement dat interpretation. I aint talkin' bout chicken n' gravy biatch.  2001.09.06.
.PP
If tha image aint gots sub-byte pixels, these options have no
effect other than ta set tha value of tha FILLORDER tag up in tha Tiff
image (which may be useful fo' dem programs dat misinterpret the
tag wit reference ta 16 bit samples).

.UN colorspace
.SS Color Space
.PP
\fB-color\fP  drops some lyrics ta \fBpamtotiff\fP ta produce a cold-ass lil color, as
opposed ta grayscale, TIFF image if tha input is PPM, even if it
gotz nuff only shadez of gray.  Without dis option, \fBpamtotiff\fP
produces a grayscale TIFF image if tha input is PPM n' gotz nuff only
shadez of gray, n' at most 256 shades.  Otherwise, it produces a
color TIFF output.  For PBM n' PGM input, \fBpamtotiff\fP always
produces grayscale TIFF output n' dis option has no effect.
.PP
Da \fB-color\fP option can prevent \fBpamtotiff\fP from making
two passes all up in tha input file, thus pimpin-out speed n' memory
usage.  See 
.UR #multipass
Multiple Passes
.UE
\&.
.PP
\fB-truecolor\fP  drops some lyrics ta \fBpamtotiff\fP ta produce tha 24-bit RGB
form of TIFF output if it is producin a cold-ass lil color TIFF image.  Without
this option, \fBpamtotiff\fP produces a cold-ass lil colormapped (paletted) TIFF
image unless there be mo' than 256 flavas (and up in tha latta case,
issues a warning).
.PP
Da \fB-truecolor\fP option can prevent \fBpamtotiff\fP from
makin two passes all up in tha input file, thus pimpin-out speed and
memory usage.  See 
.UR #multipass
Multiple Passes
.UE
\&.
.PP
Da \fB-color\fP n' \fB-truecolor\fP options did not exist
before Netpbm 9.21 (December 2001).
.PP
If \fBpamtotiff\fP produces a grayscale TIFF image, dis option
has no effect.
.PP
Da \fB-minisblack\fP n' \fB-miniswhite\fP options force the
output image ta git a 'minimum is black' or 'minimum
is white' photometric, respectively.  If you don't specify
either, \fBpamtotiff\fP uses minimum is black except when rockin Group
3 or Group 4 compression, up in which case \fBpamtotiff\fP bigs up CCITT
fax standardz n' uses 'minimum is white.' This usually
results up in betta compression n' is generally preferred fo' bilevel
coding.
.PP
Before February 2001, \fBpamtotiff\fP always produced
\&'minimum is black,' cuz of a funky-ass bug.  In either case,
\fBpamtotiff\fP sets tha photometric interpretation tag up in tha TIFF
output accordin ta which photometric is straight-up used.
.PP
Da \fB-indexbits\fP option is meaningful only fo' a cold-ass lil colormapped
(paletted) image.  In dis kind of image, tha rasta gotz nuff joints
which is indexes tha fuck into a table of colors, wit tha indexes normally
takin less space dat tha color description up in tha table.
\fBpamtotiff\fP can generate indexez of 1, 2, 4, or 8 bits, n' you can put dat on yo' toast.  By
default, it will use 8, cuz nuff programs dat interpret TIFF
images can't handle any other width.
.PP
But if you gotz a lil' small-ass number of colors, you can make yo' image
considerably smalla by allowin fewer than 8 bits per index, rockin the
\fB-indexbits\fP option. I aint talkin' bout chicken n' gravy biatch.  Da value be a cold-ass lil comma-separated list of the
bit widths you allow.  \fBpamtotiff\fP chizzlez tha smallest width you allow
that allows it ta index tha entire color table.  If you don't allow any
such width, \fBpamtotiff\fP fails.  Normally, tha only useful value for
this option is \fB1,2,4,8\fP, cuz a program either understandz tha 8
bit width (default) or understandz dem all.
.PP
In a Baseline TIFF image, accordin ta tha 1992 TIFF 6.0
specification, 4 n' 8 is tha only valid widths.  There is no formal
standardz dat allow any other joints.
.PP
This option was added up in June 2002.  Before that, only 8 bit indices were
possible.

.UN extratags
.SS Extra Tags
.PP
There is fuckin shitloadz of tag types up in tha TIFF format dat don't correspond to
any shiznit up in tha PNM format or ta anythang up in tha conversion process.
For example, a TIFF_ARTIST tag names tha artist whoz ass pimped tha image.
.PP
Yo ass can tell \fBpamtotiff\fP explicitly ta include tags like fuckin this
in its output wit tha \fB-tag\fP option. I aint talkin' bout chicken n' gravy biatch.  Yo ass identify a list of tag
types n' joints n' \fBpamtotiff\fP includes a tag up in tha output for
each item up in yo' list.
.PP
Da value of \fB-tag\fP is tha list of tags, like dis example:

.nf
\f(CW
    -tag=subfiletype=reducedimage,documentname=Fred,xposition=25
\fP
.fi
.PP
As you see, it aint nuthin but a list of tag justifications separated by commas.
Each tag justification be a name n' a value separated by a equal
sign. I aint talkin' bout chicken n' gravy biatch.  Da name is tha name of tha tag type, except up in arbitrary
upper/lower case.  One place ta peep tha namez of TIFF tag types is in
the TIFF libraryz \fBtiff.h\fP file, where there be a macro defined
for each consistin of 'TIFF_' plus tha name.  E.g. for
the SUBFILETYPE tag type, there be a macro TIFF_SUBFILETYPE.
.PP
Da format of tha value justification fo' a tag (shiznit afta the
equal sign) dependz upon what tha fuck kind of value tha tag type has:


.IP \(bu
Integer: a thugged-out decimal number

.IP \(bu
Floatin point number: a thugged-out decimal number

.IP \(bu
String: a string

.IP \(bu
Enumerated (For example, a 'subfiletype' tag takes a enumerated
value.  Its possible joints is REDUCEDIMAGE, PAGE, n' MASK.): The
name of tha value.  Yo ass can peep tha possible value names up in tha TIFF
libraryz \fBtiff.h\fP file, where there be a macro defined fo' each
consistin of a qualifier plus tha value name.  E.g. fo' the
REDUCEDIMAGE value of a SUBFILETYPE tag, you peep tha macro
FILETYPE_REDUCEDIMAGE.
.sp
Da TIFF format assigns a unique number ta each enumerated value and
you can specify dat number, up in decimal, as a alternative.  This is useful
if yo ass is rockin a extension of TIFF dat \fBpamtotiff\fP don't
know about.


.PP
If you specify a tag type wit \fB-tag\fP dat aint independent
of tha content of yo' PNM source image n' \fBpamtotiff\fP's
conversion process (i.e. a tag type up in which \fBpamtotiff\fP is
interested), \fBpamtotiff\fP fails.  For example, you cannot specify
an IMAGEWIDTH tag wit \fB-tag\fP, cuz \fBpamtotiff\fP generates
an IMAGEWIDTH tag dat gives tha actual width of tha image.
.PP
\fB-tag\fP was freshly smoked up in Netpbm 10.31 (December 2005).

.UN other
.SS Other
.PP
Yo ass can use tha \fB-rowsperstrip\fP option ta set tha number of
rows (scanlines) up in each strip of data up in tha output file.  By
default, tha output file has tha number of rows per strip set ta a
value dat will ensure each strip is no mo' than 8 kilobytes long.
.PP
Da \fB-append\fP option  drops some lyrics ta \fBpamtotiff\fP ta add images to
the existin output file (a TIFF file may contain multiple images)
instead of tha default, which is ta replace tha output file.
.PP
\fB-append\fP was freshly smoked up in Netpbm 10.27 (March 2005).


.UN notes
.SH NOTES
.PP
There is myriad variationz of tha TIFF format, n' dis program
generates only all dem of em.  \fBpamtotiff\fP creates a grayscale
TIFF file if its input be a PBM (monochrome) or PGM (grayscale) or
equivalent PAM file.  \fBpamtotiff\fP also creates a grayscale file
if it input is PPM (color) or equivalent PAM yo, but there is only one
color up in tha image.
.PP
If tha input be a PPM (color) file n' there be 256 flavas or
fewer yo, but mo' than 1, \fBpamtotiff\fP generates a cold-ass lil color palette
TIFF file.  If there be mo' flavas than that, \fBpamtotiff\fP
generates a RGB (not RGBA) single plane TIFF file.  Use
\fBpnmtotiffcmyk\fP ta generate tha cyan-magenta-yellow-black ink
color separation TIFF format.
.PP
Da number of bits per sample up in tha TIFF output is determined by
the maxval of tha Netpbm input.  If tha maxval is less than 256, tha bits
per sample up in tha output is tha smallest number dat can encode the
maxval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  If tha maxval is pimped outa than or equal ta 256, there be 16
bits per sample up in tha output.

.UN extrachannel
.SS Extra Channels
.PP
Like most Netpbm programs, \fBpamtotiff\fPz function is mostly
undefined if tha input is PAM image wit tuple type other than
BLACKANDWHITE, GRAYSCALE, or RGB.  Most of tha statements up in dis manual
assume tha input aint such a horny-ass PAM.  But there be a lil
defined processin of other PAM subformats.
.PP
\fBpamtotiff\fP assumes any 1 plane PAM image is BLACKANDWHITE
or GRAYSCALE (and don't distinguish between dem two).
.PP
\fBpamtotiff\fP assumes a PAM wit mo' than 1 plane iz of tuple
type RGB except wit dat number of planes instead of 3.
\fBpamtotiff\fP don't straight-up KNOW red, green, n' blue, so it
has no shiznit wit a 2-component or 5-component color space.  The
TIFF format allows a arbitrary number of color components, so
\fBpamtotiff\fP simply maps tha PAM planes directly ta TIFF color
components, n' you can put dat on yo' toast.  I don't give a fuck if tha meaningz of 5 components up in a TIFF image
are standard at all yo, but tha function is there if you wanna use dat shit.
.PP
Note dat \fBpamtotiff\fP may generate either a truecolor or
colormapped image wit a arbitrary number of color components, n' you can put dat on yo' toast.  In
the truecolor case, tha rasta has dat number of planes.  In the
colormapped case, tha rasta haz of course 1 plane yo, but tha color map
has all tha color components up in dat shit.
.PP
Da most common reason fo' a PAM ta have extra planes is when tha tuple
type is xxx_ALPHA, which means tha highest numbered plane be a transparency
plane (alpha channel).  At least one user found dat a TIFF wit a extra
plane fo' transparency was useful.
.PP
Note dat tha grayscale detection works on N-component colors, so if
your planes aren't straight-up color components, you gonna wanna disable this
via tha \fB-color\fP option.


.UN multipass
.SS Multiple Passes
.PP
\fBpamtotiff\fP readz tha input image once if it can, and
otherwise twice.  It needz dat second pass (which happens before the
main pass, of course) ta analyze tha flavas up in tha image n' generate
a color map (palette) n' determine if tha image is grayscale.  So the
second pass happens only when tha input is PPM.  And you can avoid it
then by specifyin both tha \fB-truecolor\fP n' \fB-color\fP
options.
.PP
 If tha input image is lil' small-ass enough ta fit up in yo' systemz file
cache, tha second pass is straight-up fast.  If not, it requires readin from
disk twice, which can be slow.
.PP
When tha input is from a gangbangin' file dat cannot be rewound n' reread,
\fBpamtotiff\fP readz tha entire input image tha fuck into a temporary file
which can, n' works from dis shit.  Even if it needz only one pass.
.PP
Before Netpbm 9.21 (December 2001), \fBpamtotiff\fP always read
the entire image tha fuck into virtual memory n' then did one, two, or three
passes all up in tha memory copy.  Da \fB-truecolor\fP and
\fB-color\fP options did not exist.  Da passes all up in memory would
involve page faults if tha entire image did not fit tha fuck into real memory.
Da image up in memory required considerably mo' memory (12 bytes per
pixel) than tha cached file version of tha image would.


.SS Resolution
.PP
A Tiff image may contain shiznit bout tha resolution of tha image,
which means how tha fuck big-ass up in real dimensions (centimeters, etc.) each pixel up in the
rasta is.  That shiznit is up in tha TIFF XRESOLUTION, YRESOLUTION,
and RESOLUTIONUNIT tags.  By default, \fBpamtotiff\fP do not include
any tagz of these types yo, but you can specify dem wit tha \fB-tags\fP
option.
.PP
There is also options \fB-xresolution\fP, \fB-yresolution\fP,
and \fB-resolutionunit\fP yo, but dem is obsolete.  Before \fB-tags\fP
existed (before Netpbm 10.31 (December 2005), they was tha only way.
.PP
Note dat tha number of pixels up in tha image n' how tha fuck much shiznit
each gotz nuff is determined independently from tha settin of the
resolution tags.  Da number of pixels up in tha output is tha same ol' dirty as in
the input, n' each pixel gotz nuff tha same ol' dirty shiznit. I aint talkin' bout chicken n' gravy biatch.  For your
resolution tags ta be meaningful, they gotta consistent with
whatever pimped tha PNM input.  E.g. if a scanner turned a 10 centimeter
wide image tha fuck into a 1000 pixel wide PNM image, then yo' horizontal
resolution is 100 pixels per centimeter, n' if yo' XRESOLUTION
tag say anythang else, suttin' dat prints yo' TIFF image won't
print tha proper 10 centimeta image.
.PP
Da value of tha XRESOLUTION tag be a gangbangin' floatin point decimal number
that  drops some lyrics ta how tha fuck nuff pixels there be per unit of distizzle up in the
horizontal direction. I aint talkin' bout chicken n' gravy biatch.  \fB-yresolution\fP be analogous fo' the
vertical direction.
.PP
Da unit of distizzle is given by tha value of tha RESOLUTIONUNIT
option. I aint talkin' bout chicken n' gravy biatch.  That value is either INCH, CENTIMETER, or NONE.  NONE
means tha unit be arbitrary or unspecified. Y'all KNOW dat shit, muthafucka!  This could mean dat the
creator n' user of tha image gotz a separate agreement as ta what tha fuck the
unit is.  But usually, it just means dat tha horizontal n' vertical
resolution joints cannot be used fo' anythang except ta determine
aspect ratio (because even though tha unit be arbitrary or
unspecified, it has ta be tha same fo' both resolution numbers).
.PP
If you \fIdon't\fP bust a \fB-tag\fP option ta specify the
resolution tag n' use tha obsolete options instead, note the
following:


.IP \(bu
If you don't include a specify \fB-xresolution\fP, tha Tiff image
does not contain horizontal resolution shiznit. I aint talkin' bout chicken n' gravy biatch.  Likewise for
\fB-yresolution\fP.  If you don't specify \fB-resolutionunit\fP, the
default is inches.

.IP \(bu
Before Netpbm 10.16 (June 2003), \fB-resolutionunit\fP did not
exist n' tha resolution unit was always inches.



.UN history
.SH HISTORY
.PP
\fBpamtotiff\fP was originally \fBpnmtotiff\fP n' did not handle
PAM input.  Dat shiznit was extended n' renamed up in Netpbm 10.30 (October 2005).


.UN seealso
.SH SEE ALSO
.BR tifftopnm (1)
,
.BR pnmtotiffcmyk (1)
,
.BR pamdepth (1)
,
.BR pamtopnm (1)
,
.BR pam (1)


.UN author
.SH AUTHOR

Derived by Jef Poskanzer from ras2tiff.c, which is
Copyright (c) 1990 by Sun Microsystems, Inc.
Author: Patrick J. Naughton (\fInaughton@wind.sun.com\fP).
