'\" t
.TH mtools 1 "09Jan13" mtools-4.0.18
.SH Name
mtools - utilitizzles ta access DOS disks up in Unix.
'\" t
.de TQ
.br
.ns
.TP \\$1
..

.tr \(is'
.tr \(if`
.tr \(pd"

.PP
.SH Introduction
Mtools be a cold-ass lil collection of tools ta allow Unix systems ta manipulate
MS-DOS files: read, write, n' move round filez on a MS-DOS
file system (typically a gangbangin' floppy disk).  Where reasonable, each program
attempts ta emulate tha MS-DOS equivalent command. Y'all KNOW dat shit, muthafucka! However,
unnecessary restrictions n' odditizzlez of DOS is not emulated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. For
instance, it is possible ta move subdirectories from one subdirectory
to another.
.PP
Mtools is sufficient ta give access ta MS-DOS file systems.  For
instance, commandz like fuckin \fR\&\f(CWmdir a:\fR work on tha \fR\&\f(CWa:\fR floppy
without any preliminary mountin or initialization (assumin tha default
\&\fR\&\f(CW\(if/etc/mtools.conf\(is\fR works on yo' machine).  With mtools, one can
change floppies too without unmountin n' mounting.
.PP
.SH Where\ to\ get\ mtools
.PP
Mtools can be found all up in tha followin places (and they mirrors):
 
.nf
.ft 3
.in +0.3i
http://ftp.gnu.org/gnu/mtools/mtools-4.0.18.tar.gz
http://mtools.linux.lu/mtools-4.0.18.tar.gz
ftp://www.tux.org/pub/knaff/mtools/mtools-4.0.18.tar.gz
ftp://ibiblio.unc.edu/pub/Linux/utils/disk-management/mtools-4.0.18.tar.gz
.fi
.in -0.3i
.ft R
.PP
 
\&\fR
.PP
Before reportin a funky-ass bug, make shizzle dat it has not yet been fixed up in the
Alpha patches which can be found at:
 
.nf
.ft 3
.in +0.3i
http://ftp.gnu.org/gnu/mtools/
http://mtools.linux.lu/
ftp://www.tux.org/pub/knaff/mtools
.fi
.in -0.3i
.ft R
.PP
 
\&\fR
.PP
These patches is named
\&\fR\&\f(CWmtools-\fR\fIversion\fR\fR\&\f(CW-\fR\fIddmm\fR\fR\&\f(CW.taz\fR, where version
standz fo' tha base version, \fIdd\fR fo' tha dizzle n' \fImm\fR fo' the
month. Cuz of a lack of space, I probably leave only da most thugged-out recent
patch.
.PP
There be a mtools mailin list at mtools @ tux.org .  Please
send all bug reports ta dis list.  Yo ass may subscribe ta tha list by
sendin a message wit 'subscribe mtools @ tux.org' up in its
body ta majordomo @ tux.org . (N.B. Please remove tha spaces
around tha "@" both times. I left dem there up in order ta fool
spambots.)  Announcementz of freshly smoked up mtools versions will also be busted to
the list, up in addizzle ta tha Linux announce newsgroups.  Da mailing
list be archived at http://lists.gnu.org/pipermail/info-mtools/
.PP
.SH Common\ features\ of\ all\ mtools\ commands
.PP
.SS Options\ and\ filenames
MS-DOS filenames is composed of a thugged-out drive letta followed by a cold-ass lil colon, a
subdirectory, n' a gangbangin' filename. Only tha filename part is mandatory, the
drive letta n' tha subdirectory is optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Filenames without a
drive letta refer ta Unix files. Right back up in yo muthafuckin ass. Subdirectory names can use either the
\&'\fR\&\f(CW/\fR' or '\fR\&\f(CW\e\fR' separator. Shiiit, dis aint no joke.  Da use of tha '\fR\&\f(CW\e\fR' separator
or wildcardz requires tha names ta be enclosed up in quotes ta protect them
from tha shell. But fuck dat shiznit yo, tha word on tha street is dat wildcardz up in Unix filenames should not be
enclosed up in quotes, cuz here we \fBwant\fR tha shell ta expand
them.
.PP
Da regular expression "pattern matching" routines follow tha Unix-style
rules.  For example, `\fR\&\f(CW*\fR' matches all MS-DOS filez up in lieu of
`\fR\&\f(CW*.*\fR'.  Da archive, hidden, read-only n' system attribute bits
are ignored durin pattern matching.
.PP
All options use tha \fR\&\f(CW-\fR (minus) as they first character, not
\&\fR\&\f(CW/\fR as you'd expect up in MS-DOS.
.PP
Most mtools commandz allow multiple filename parameters, which
doesn't follow MS-DOS conventions yo, but which is mo' user-friendly.
.PP
Most mtools commandz allow options dat instruct dem how tha fuck ta handle file
name clashes. Right back up in yo muthafuckin ass. See section name clashes, fo' mo' details on these n' you can put dat on yo' toast fo' realz. All
commandz accept tha \fR\&\f(CW-V\fR flags which prints tha version, n' most
accept tha \fR\&\f(CW-v\fR flag, which switches on verbose mode. In verbose
mode, these commandz print up tha name of tha MS-DOS filez upon which
they act, unless stated otherwise. Right back up in yo muthafuckin ass. See section Commands, fo' a thugged-out description of
the options which is specific ta each command.
.PP
.SS Drive\ letters
.PP
Da meanin of tha drive lettas dependz on tha target architectures.
But fuck dat shiznit yo, tha word on tha street is dat on most target architectures, drive A is tha straight-up original gangsta floppy
drive, drive B is tha second floppy drive (if available), drive J be a
Jaz drive (if available), n' drive Z be a Zip drive (if available).  On
those systems where tha thang name is derived from tha SCSI id, tha Jaz
drive be assumed ta be at SCSI target 4, n' tha Zip at SCSI target 5
(factory default settings).  On Linux, both drives is assumed ta be the
second drive on tha SCSI bus (/dev/sdb). Da default settings can be
changes rockin a cold-ass lil configuration file (see section  Configuration).
.PP
Da drive letta : (colon) has a special meaning. Well shiiiit, it is used ta access
image filez which is directly specified on tha command line rockin the
\&\fR\&\f(CW-i\fR options.
.PP
Example:
 
.nf
.ft 3
.in +0.3i
 mcopy -i my-image-file.bin ::file1 ::file2 .
.fi
.in -0.3i
.ft R
.PP
 
\&\fR
.PP
This copies \fR\&\f(CWfile1\fR n' \fR\&\f(CWfile2\fR from tha image file
(\fR\&\f(CWmy-image-file.bin\fR) ta tha \fR\&\f(CW/tmp\fR directory.
.PP
Yo ass can also supply a offset within tha image file by including
\&\fR\&\f(CW@@\fR\fIoffset\fR tha fuck into tha file name.
.PP
Example:
 
.nf
.ft 3
.in +0.3i
 mcopy -i my-image-file.bin@@1M ::file1 ::file2 .
.fi
.in -0.3i
.ft R
.PP
 
\&\fR
.PP
This looks fo' tha image all up in tha offset of 1M up in tha file, rather than
at its beginning.
.PP
.SS Current\ working\ directory
.PP
Da \fR\&\f(CWmcd\fR command (\(ifmcd\(is) is used ta establish tha thang and
the current hustlin directory (relatizzle ta tha MS-DOS file system),
otherwise tha default be assumed ta be \fR\&\f(CWA:/\fR. But fuck dat shiznit yo, tha word on tha street is dat unlike
MS-DOS, there is only one hustlin directory fo' all drives, n' not one
per drive.
.PP
.SS VFAT-style\ long\ file\ names
.PP
This version of mtools supports VFAT steez long filenames. If a Unix
filename is too long ta fit up in a gangbangin' finger-lickin' dirty-ass short DOS name, it is stored as a
VFAT long name, n' a cold-ass lil companion short name is generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This short
name is what tha fuck you peep when you examine tha disk wit a pre-7.0 version
of DOS.
 Da followin table shows some examplez of short names:
.PP
 
.nf
.ft 3
.in +0.3i
Long name       MS-DOS name     Reason fo' tha chizzle
---------       ----------      ---------------------
thisisatest     THISIS~1        filename too long
alain.knaff     ALAIN~1.KNA     extension too long
prn.txt         PRN~1.TXT       PRN be a thang name
\&\&.abc            ABC~1           null filename
hot+cold        HOT_CO~1        illegal character
.fi
.in -0.3i
.ft R
.PP
 
\&\fR
.PP
 As you see, tha followin transformations happen ta derive a gangbangin' finger-lickin' dirty-ass short
name:
.TP
* \ \ 
Illegal charactas is replaced by underscores. Da illegal characters
are \fR\&\f(CW;+=[]',\e"*\e\e<>/?:|\fR.
.TP
* \ \ 
Extra dots, which cannot be interpreted as a main name/extension
separator is removed
.TP
* \ \ 
A \fR\&\f(CW~\fR\fIn\fR number is generated,
.TP
* \ \ 
Da name is shortened so as ta fit up in tha 8+3 limitation
.PP
 Da initial Unix-style file name (whether long or short) be also called
the \fIprimary\fR name, n' tha derived short name be also called the
\&\fIsecondary\fR name.
.PP
 Example:
 
.nf
.ft 3
.in +0.3i
 mcopy /etc/motd a:Reallylongname
.fi
.in -0.3i
.ft R
.PP
 
\&\fR Mtools creates a VFAT entry fo' Reallylongname, n' uses REALLYLO as
a short name. Reallylongname is tha primary name, n' REALLYLO is the
secondary name.
 
.nf
.ft 3
.in +0.3i
 mcopy /etc/motd a:motd
.fi
.in -0.3i
.ft R
.PP
 
\&\fR Motd fits tha fuck into tha DOS filename limits, n' you can put dat on yo' toast. Mtools don't need to
derivate another name. Motd is tha primary name, n' there is no
secondary name.
.PP
 In a nutshell: Da primary name is tha long name, if one exists, or
the short name if there is no long name.
.PP
 Although VFAT is much mo' flexible than FAT, there be still names
that is not acceptable, even up in VFAT. There is still some illegal
charactas left (\fR\&\f(CW\e"*\e\e<>/?:|\fR), n' thang names is still
reserved.
.PP
 
.nf
.ft 3
.in +0.3i
Unix name       Long name       Reason fo' tha chizzle
---------       ----------      ---------------------
prn             prn-1           PRN be a thang name
ab:c            ab_c-1          illegal character
.fi
.in -0.3i
.ft R
.PP
 
\&\fR
.PP
 As you see, tha followin transformations happen if a long-ass name is
illegal:
.TP
* \ \ 
Illegal charactas is replaces by underscores,
.TP
* \ \ 
A \fR\&\f(CW-\fR\fIn\fR number is generated,
.PP
.SS Name\ clashes
.PP
When freestylin a gangbangin' file ta disk, its long name or short name may collide
with a already existin file or directory. This may happen fo' all
commandz which create freshly smoked up directory entries, like fuckin \fR\&\f(CWmcopy\fR,
\&\fR\&\f(CWmmd\fR, \fR\&\f(CWmren\fR, \fR\&\f(CWmmove\fR. When a name clash happens, mtools
asks you what tha fuck it should do. Well shiiiit, it offers nuff muthafuckin chizzles:
.TP
\&\fR\&\f(CWoverwrite\fR\ 
Overwrites tha existin file. Well shiiiit, it aint possible ta overwrite a
directory wit a gangbangin' file.
.TP
\&\fR\&\f(CWrename\fR\ 
Renames tha newly pimped file. Mtools prompts fo' tha freshly smoked up filename
.TP
\&\fR\&\f(CWautorename\fR\ 
Renames tha newly pimped file. Mtools chizzlez a name by itself, without
prompting
.TP
\&\fR\&\f(CWskip\fR\ 
Gives up on dis file, n' moves on ta tha next (if any)
.PP
To chose one of these actions, type its first letta all up in tha prompt. If
you bust a lower case letter, tha action only applies fo' dis file only,
if you use a upper case letter, tha action applies ta all files, and
you won't be prompted again.
.PP
Yo ass may also chose actions (for all files) on tha command line, when
invokin mtools:
.TP
\&\fR\&\f(CW-D\ o\fR\ 
Overwrites primary names by default.
.TP
\&\fR\&\f(CW-D\ O\fR\ 
Overwrites secondary names by default.
.TP
\&\fR\&\f(CW-D\ r\fR\ 
Renames primary name by default.
.TP
\&\fR\&\f(CW-D\ R\fR\ 
Renames secondary name by default.
.TP
\&\fR\&\f(CW-D\ a\fR\ 
Autorenames primary name by default.
.TP
\&\fR\&\f(CW-D\ A\fR\ 
Autorenames secondary name by default.
.TP
\&\fR\&\f(CW-D\ s\fR\ 
Skip primary name by default.
.TP
\&\fR\&\f(CW-D\ S\fR\ 
Skip secondary name by default.
.TP
\&\fR\&\f(CW-D\ m\fR\ 
Ask user what tha fuck ta do wit primary name.
.TP
\&\fR\&\f(CW-D\ M\fR\ 
Ask user what tha fuck ta do wit secondary name.
.PP
Note dat fo' command line switches lower/upper differentiates between
primary/secondary name whereas fo' interactizzle chizzles, lower/upper
differentiates between just-this-time/always.
.PP
Da primary name is tha name as displayed up in Windows 95 or Windows NT:
i.e. tha long name if it exists, n' tha short name otherwise.  The
secondary name is tha "hidden" name, i.e. tha short name if a long-ass name
exists.
.PP
By default, tha user is prompted if tha primary name clashes, n' the
secondary name be autorenamed.
.PP
If a name clash occurs up in a Unix directory, mtools only asks whether
to overwrite tha file, or ta skip dat shit.
.PP
.SS Case\ sensitivity\ of\ the\ VFAT\ file\ system
.PP
Da VFAT file system be able ta remember tha case of the
filenames. But fuck dat shiznit yo, tha word on tha street is dat filenames which differ only up in case is not allowed
to coexist up in tha same directory. For example if you store a gangbangin' file called
LongFileName on a VFAT file system, mdir shows dis file as LongFileName,
and not as Longfilename. But fuck dat shiznit yo, tha word on tha street is dat if you then try ta add LongFilename to
the same directory, it is refused, cuz case is ignored fo' clash
checks.
.PP
Da VFAT file system allows ta store tha case of a gangbangin' filename up in the
attribute byte, if all lettaz of tha filename is tha same case, n' if
all lettaz of tha extension is tha same case like a muthafucka. Mtools uses this
information when displayin tha files, n' also ta generate tha Unix
filename when mcopyin ta a Unix directory. This may have unexpected
results when applied ta filez freestyled rockin a pre-7.0 version of DOS:
Indeed, tha oldschool steez filenames map ta all upper case. This is different
from tha behavior of tha oldschool version of mtools which used ta generate
lower case Unix filenames.
.PP
.SS high\ capacity\ formats
.PP
Mtools supports a fuckin shitload of formats which allow ta store mo' data on
disk as usual. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Cuz of different operatin system abilities, these
formats is not supported on all operatin systems. Mtools recognizes
these formats transparently where supported.
.PP
In order ta format these disks, you need ta use a operatin system
specific tool. For Linux, suitable floppy tools can be found up in the
\&\fR\&\f(CWfdutils\fR package all up in tha followin locations~:
 
.nf
.ft 3
.in +0.3i
\&\fR\&\f(CWftp://www.tux.org/pub/knaff/fdutils/.
\&\fR\&\f(CWftp://ibiblio.unc.edu/pub/Linux/utils/disk-management/fdutils-*
.fi
.in -0.3i
.ft R
.PP
 
\&\fR
.PP
See tha manual pages included up in dat package fo' further detail: Use
\&\fR\&\f(CWsuperformat\fR ta format all formats except XDF, n' use
\&\fR\&\f(CWxdfcopy\fR ta format XDF.
.PP
.SS \ \ Mo'\ sectors
.PP
Da crazy oldschool method of fittin mo' data on a gangbangin' finger-lickin' disk is ta use mo' sectors
and mo' cylindaz fo' realz. Although tha standard format uses 80 cylindaz and
18 sectors (on a 3 1/2 high densitizzle disk), it is possible ta use up to
83 cylindaz (on most drives) n' up ta 21 sectors. This method allows
to store up ta 1743K on a 3 1/2 HD disk. But fuck dat shiznit yo, tha word on tha street is dat 21 sector disks are
twice as slow as tha standard 18 sector disks cuz tha sectors are
packed so close together dat we need ta interleave em. This problem
doesn't exist fo' 20 sector formats.
.PP
These formats is supported by a shitload of DOS shareware utilitizzles such as
\&\fR\&\f(CWfdformat\fR n' \fR\&\f(CWvgacopy\fR. In his crazy-ass muthafuckin infinite hubris, Bizzle Gate$
believed dat he invented this, n' called it \fR\&\f(CW\(ifDMF disks\(is\fR, or
\&\fR\&\f(CW\(ifWindows formatted disks\(is\fR. But up in reality, it has already existed
years before biaaatch! Mtools supports these formats on Linux, on SunOS n' on
the DELL Unix PC.
.PP
.SS \ \ Bigger\ sectors
By rockin bigger sectors it is possible ta go beyond tha capacitizzle which
can be obtained by tha standard 512-byte sectors. This is cuz of the
sector header n' shit. Da sector header has tha same ol' dirty size, regardless of how
many data bytes is up in tha sector. Shiiit, dis aint no joke. Thus, we save some space by using
\&\fIfewer\fR yo, but bigger sectors. For example, 1 sector of 4K only takes
up header space once, whereas 8 sectorz of 512 bytes have also 8
headers, fo' tha same amount of useful data.
.PP
This method allows ta store up ta 1992K on a 3 1/2 HD disk.
.PP
Mtools supports these formats only on Linux.
.PP
.SS \ \ 2m
.PP
Da 2m format was originally invented by Ciriaco Garcia de Celis. It
also uses bigger sectors than usual up in order ta fit mo' data on the
disk.  But fuck dat shiznit yo, tha word on tha street is dat it uses tha standard format (18 sectorz of 512 bytes
each) on tha straight-up original gangsta cylinder, up in order ta make these disks easier to
handle by DOS. Git tha fuck outta mah grill wit dat bullshit dis method allows ta git a standard sized
boot sector, which gotz nuff a thugged-out description of how tha fuck tha rest of tha disk
should be read.
.PP
But fuck dat shiznit yo, tha word on tha street is dat tha drawback of dis is dat tha straight-up original gangsta cylinder can hold less
data than tha others. Unfortunately, DOS can only handle disks where
each track gotz nuff tha same ol' dirty amount of data. Thus 2m hides tha fact that
the first track gotz nuff less data by rockin a \fIshadow
FAT\fR. (Usually, DOS stores tha FAT up in two identical copies, for
additionizzle safety.  XDF stores only one copy yo, but  drops some lyrics ta DOS dat it
stores two. Thus tha space dat would be taken up by tha second FAT copy
is saved.) This also means dat you should \fBnever bust a 2m disk
to store anythang else than a DOS file system\fR.
.PP
Mtools supports these formats only on Linux.
.PP
.SS \ \ XDF
.PP
XDF be a high capacitizzle format used by OS/2. Well shiiiit, it can hold 1840 K per
disk. Thatz lower than tha dopest 2m formats yo, but its main advantage is
that it is fast: 600 millisecondz per track. Thatz fasta than tha 21
sector format, n' almost as fast as tha standard 18 sector format. In
order ta access these disks, make shizzle mtools has been compiled wit XDF
support, n' set tha \fR\&\f(CWuse_xdf\fR variable fo' tha drive up in the
configuration file. Right back up in yo muthafuckin ass. See section Compilin mtools, n' \(ifmiscellaneous variables\(is,
for details on how tha fuck ta do all dis bullshit. Fast XDF access is only available for
Linux kernels which is mo' recent than 1.1.34.
.PP
Mtools supports dis format only on Linux.
.PP
\&\fBCaution / Attention distributors\fR: If mtools is compiled on a
Linux kernel mo' recent than 1.3.34, it won't run on a older
kernel. But fuck dat shiznit yo, tha word on tha street is dat if it has been compiled on a olda kernel, it still
runs on a newer kernel, except dat XDF access is slower n' shit. Well shiiiit, it is
recommended dat distribution authors only include mtools binaries
compiled on kernels olda than 1.3.34 until 2.0 comes out. When 2.0 will
be out, mtools binaries compiled on newer kernels may (and should) be
distributed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Mtools binaries compiled on kernels olda than 1.3.34 won't
run on any 2.1 kernel or later.
.PP
.SS Exit\ codes
All tha Mtools commandz return 0 on success, 1 on utta failure, or 2
on partial failure.  All tha Mtools commandz big-ass up all dem sanity
checks before goin ahead, ta make shizzle dat tha disk is indeed an
MS-DOS disk (as opposed to, say a ext2 or MINIX disk). These checks
may reject partially corrupted disks, which might otherwise still be
readable. To avoid these checks, set tha MTOOLS_SKIP_CHECK
environmenstrual variable or tha correspondin configuration file variable
(see section  global variables)
.SS Bugs
An fucked up side effect of not guessin tha proper thang (when
multiple disk capacitizzles is supported) be a occasionizzle error message
from tha thang driver n' shit.  These can be safely ignored. Y'all KNOW dat shit, muthafucka!  
.PP
Da fat checkin code chokes on 1.72 Mb disks mformatted wit pre-2.0.7
mtools. Right back up in yo muthafuckin ass. Set tha environmenstrual variable MTOOLS_FAT_COMPATIBILITY (or the
correspondin configuration file variable, \(ifglobal variables\(is) to
bypass tha fat checking.
.PP
.SH See also
floppyd_installtest
mattrib
mbadblocks
mcd
mclasserase
mcopy
mdel
mdeltree
mdir
mdu
mformat
minfo
mkmanifest
mlabel
mmd
mmount
mmove
mrd
mren
mshortname
mshowfat
mtoolstest
mtype
