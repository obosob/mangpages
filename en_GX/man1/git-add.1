'\" t
.\"     Title: git-add
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-ADD" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-add \- Add file contents ta tha index
.SH "SYNOPSIS"
.sp
.nf
\fIgit add\fR [\-n] [\-v] [\-\-force | \-f] [\-\-interactizzle | \-i] [\-\-patch | \-p]
          [\-\-edit | \-e] [\-\-[no\-]all | \-\-[no\-]ignore\-removal | [\-\-update | \-u]]
          [\-\-intent\-to\-add | \-N] [\-\-refresh] [\-\-ignore\-errors] [\-\-ignore\-missing]
          [\-\-] [<pathspec>\&...]
.fi
.sp
.SH "DESCRIPTION"
.sp
This command thugged-out shiznit tha index rockin tha current content found up in tha hustlin tree, ta prepare tha content staged fo' tha next commit\&. Well shiiiit, it typically addz tha current content of existin paths as a whole yo, but wit some options it can also be used ta add content wit only part of tha chizzlez made ta tha hustlin tree filez applied, or remove paths dat do not exist up in tha hustlin tree no mo'\&.
.sp
Da "index" holdz a snapshot of tha content of tha hustlin tree, n' it is dis snapshot dat is taken as tha contentz of tha next commit\&. Thus afta makin any chizzlez ta tha hustlin directory, n' before hustlin tha commit command, you must use tha add command ta add any freshly smoked up or modified filez ta tha index\&.
.sp
This command can be performed multiple times before a cold-ass lil commit\&. Well shiiiit, it only addz tha content of tha specified file(s) all up in tha time tha add command is run; if you want subsequent chizzlez included up in tha next commit, then you must run git add again n' again n' again ta add tha freshly smoked up content ta tha index\&.
.sp
Da git status command can be used ta obtain a summary of which filez have chizzlez dat is staged fo' tha next commit\&.
.sp
Da git add command aint gonna add ignored filez by default\&. If any ignored filez was explicitly specified on tha command line, git add will fail wit a list of ignored files\&. Ignored filez reached by directory recursion or filename globbin performed by Git (quote yo' globs before tha shell) is ghon be silently ignored\&. Da \fIgit add\fR command can be used ta add ignored filez wit tha \-f (force) option\&.
.sp
Please peep \fBgit-commit\fR(1) fo' alternatizzle ways ta add content ta a cold-ass lil commit\&.
.SH "OPTIONS"
.PP
<pathspec>\&...
.RS 4
Filez ta add content from\&. Fileglobs (e\&.g\&.
*\&.c) can be given ta add all matchin files\& fo' realz. Also a leadin directory name (e\&.g\&.
dir
to add
dir/file1
and
dir/file2) can be given ta add all filez up in tha directory, recursively\&.
.RE
.PP
\-n, \-\-dry\-run
.RS 4
Don\(cqt straight-up add tha file(s), just show if they exist and/or is ghon be ignored\&.
.RE
.PP
\-v, \-\-verbose
.RS 4
Be verbose\&.
.RE
.PP
\-f, \-\-force
.RS 4
Allow addin otherwise ignored files\&.
.RE
.PP
\-i, \-\-interactive
.RS 4
Add modified contents up in tha hustlin tree interactively ta tha index\&. Optionizzle path arguments may be supplied ta limit operation ta a subset of tha hustlin tree\&. Right back up in yo muthafuckin ass. See \(lqInteractizzle mode\(rq fo' details\&.
.RE
.PP
\-p, \-\-patch
.RS 4
Interactively chizzle hunkz of patch between tha index n' tha work tree n' add dem ta tha index\&. This gives tha user a cold-ass lil chizzle ta review tha difference before addin modified contents ta tha index\&.
.sp
This effectively runs
add \-\-interactizzle yo, but bypasses tha initial command menu n' directly jumps ta the
patch
subcommand\&. Right back up in yo muthafuckin ass. See \(lqInteractizzle mode\(rq fo' details\&.
.RE
.PP
\-e, \-\-edit
.RS 4
Open tha diff vs\&. tha index up in a editor n' let tha user edit it\& fo' realz. Afta tha editor was closed, adjust tha hunk headaz n' apply tha patch ta tha index\&.
.sp
Da intent of dis option is ta pick n' chizzle linez of tha patch ta apply, or even ta modify tha contentz of lines ta be staged\&. This can be quicker n' mo' flexible than rockin tha interactizzle hunk selector\&. But fuck dat shiznit yo, tha word on tha street is dat it is easy as fuck  ta confuse oneself n' create a patch dat do not apply ta tha index\&. Right back up in yo muthafuckin ass. See EDITING PATCHES below\&.
.RE
.PP
\-u, \-\-update
.RS 4
Update tha index just where it already has a entry matchin <pathspec>\&. This removes as well as modifies index entries ta match tha hustlin tree yo, but addz no freshly smoked up files\&.
.sp
If no <pathspec> is given, tha current version of Git defaults ta "\&."; up in other lyrics, update all tracked filez up in tha current directory n' its subdirectories\&. This default will chizzle up in a gangbangin' future version of Git, hence tha form without <pathspec> should not be used\&.
.RE
.PP
\-A, \-\-all, \-\-no\-ignore\-removal
.RS 4
Update tha index not only where tha hustlin tree has a gangbangin' file matchin <pathspec> but also where tha index already has a entry\&. This adds, modifies, n' removes index entries ta match tha hustlin tree\&.
.sp
If no <pathspec> is given, tha current version of Git defaults ta "\&."; up in other lyrics, update all filez up in tha current directory n' its subdirectories\&. This default will chizzle up in a gangbangin' future version of Git, hence tha form without <pathspec> should not be used\&.
.RE
.PP
\-\-no\-all, \-\-ignore\-removal
.RS 4
Update tha index by addin freshly smoked up filez dat is unknown ta tha index n' filez modified up in tha hustlin tree yo, but ignore filez dat done been removed from tha hustlin tree\&. This option be a no\-op when no <pathspec> is used\&.
.sp
This option is primarily ta help tha current playaz of Git, whose "git add <pathspec>\&..." ignores removed files\&. In future versionz of Git, "git add <pathspec>\&..." is ghon be a synonym ta "git add \-A <pathspec>\&..." n' "git add \-\-ignore\-removal <pathspec>\&..." will behave like todizzle\(cqs "git add <pathspec>\&...", ignorin removed files\&.
.RE
.PP
\-N, \-\-intent\-to\-add
.RS 4
Record only tha fact dat tha path is ghon be added later\& fo' realz. An entry fo' tha path is placed up in tha index wit no content\&. This is useful for, among other thangs, showin tha unstaged content of such filez with
git diff
and committin dem with
git commit \-a\&.
.RE
.PP
\-\-refresh
.RS 4
Don\(cqt add tha file(s) yo, but only refresh they stat() shiznit up in tha index\&.
.RE
.PP
\-\-ignore\-errors
.RS 4
If some filez could not be added cuz of errors indexin them, do not abort tha operation yo, but continue addin tha others\&. Da command shall still exit wit non\-zero status\&. Da configuration variable
add\&.ignoreErrors
can be set ta legit ta make dis tha default behaviour\&.
.RE
.PP
\-\-ignore\-missing
.RS 4
This option can only be used together wit \-\-dry\-run\&. By rockin dis option tha user can check if any of tha given filez would be ignored, no matta if they is already present up in tha work tree or not\&.
.RE
.PP
\-\-
.RS 4
This option can be used ta separate command\-line options from tha list of files, (useful when filenames might be mistaken fo' command\-line options)\&.
.RE
.SH "CONFIGURATION"
.sp
Da optionizzle configuration variable core\&.excludesfile indicates a path ta a gangbangin' file containin patternz of file names ta exclude from git\-add, similar ta $GIT_DIR/info/exclude\&. Patterns up in tha exclude file is used up in addizzle ta dem up in info/exclude\&. Right back up in yo muthafuckin ass. See \fBgitignore\fR(5)\&.
.SH "EXAMPLES"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Addz content from all
*\&.txt
filez under
Documentation
directory n' its subdirectories:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git add Documentation/\e*\&.txt
.fi
.if n \{\
.RE
.\}
.sp
Note dat tha asterisk
*
is quoted from tha shell up in dis example; dis lets tha command include tha filez from subdirectories of
Documentation/
directory\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Considaz addin content from all git\-*\&.sh scripts:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git add git\-*\&.sh
.fi
.if n \{\
.RE
.\}
.sp
Because dis example lets tha shell expand tha asterisk (i\&.e\&. yo ass is listin tha filez explicitly), it do not consider
subdir/git\-foo\&.sh\&.
.RE
.SH "INTERACTIVE MODE"
.sp
When tha command entas tha interactizzle mode, it shows tha output of tha \fIstatus\fR subcommand, n' then goes tha fuck into its interactizzle command loop\&.
.sp
Da command loop shows tha list of subcommandz available, n' gives a prompt "What now> "\&. In general, when tha prompt endz wit a single \fI>\fR, you can pick only one of tha chizzlez given n' type return, like this:
.sp
.if n \{\
.RS 4
.\}
.nf
    *** Commandz ***
      1: status       2: update       3: revert       4: add untracked
      5: patch        6: diff         7: quit         8: help
    What now> 1
.fi
.if n \{\
.RE
.\}
.sp
.sp
Yo ass also could say s or sta or status above as long as tha chizzle is unique\&.
.sp
Da main command loop has 6 subcommandz (plus help n' quit)\&.
.PP
status
.RS 4
This shows tha chizzle between HEAD n' index (i\&.e\&. what tha fuck is ghon be committed if you say
git commit), n' between index n' hustlin tree filez (i\&.e\&. what tha fuck you could stage further before
git commit
using
git add) fo' each path\& fo' realz. A sample output be lookin like this:
.sp
.if n \{\
.RS 4
.\}
.nf
              staged     unstaged path
     1:       binary      not a god damn thang foo\&.png
     2:     +403/\-35        +1/\-1 git\-add\-\-interactive\&.perl
.fi
.if n \{\
.RE
.\}
.sp
It shows dat foo\&.png has differences from HEAD (but dat is binary so line count cannot be shown) n' there is no difference between indexed copy n' tha hustlin tree version (if tha hustlin tree version was also different,
\fIbinary\fR
would done been shown up in place of
\fInothing\fR)\&. Da other file, git\-add\-\-interactive\&.perl, has 403 lines added n' 35 lines deleted if you commit what tha fuck is up in tha index yo, but hustlin tree file has further modifications (one addizzle n' one deletion)\&.
.RE
.PP
update
.RS 4
This shows tha status shiznit n' thangs a "Update>>" prompt\&. When tha prompt endz wit double
\fI>>\fR, you can make mo' than one selection, concatenated wit whitespace or comma\& fo' realz. Also you can say ranges\&. E\&.g\&. "2\-5 7,9" ta chizzle 2,3,4,5,7,9 from tha list\&. If tha second number up in a range is omitted, all remainin patches is taken\&. E\&.g\&. "7\-" ta chizzle 7,8,9 from tha list\&. Yo ass can say
\fI*\fR
to chizzle every last muthafuckin thang\&.
.sp
What you chose is then highlighted with
\fI*\fR, like this:
.sp
.if n \{\
.RS 4
.\}
.nf
           staged     unstaged path
  1:       binary      not a god damn thang foo\&.png
* 2:     +403/\-35        +1/\-1 git\-add\-\-interactive\&.perl
.fi
.if n \{\
.RE
.\}
.sp
To remove selection, prefix tha input with
\-
like this:
.sp
.if n \{\
.RS 4
.\}
.nf
Update>> \-2
.fi
.if n \{\
.RE
.\}
.sp
Afta makin tha selection, answer wit a empty line ta stage tha contentz of hustlin tree filez fo' selected paths up in tha index\&.
.RE
.PP
revert
.RS 4
This has a straight-up similar UI to
\fIupdate\fR, n' tha staged shiznit fo' selected paths is reverted ta dat of tha HEAD version\&. Revertin freshly smoked up paths make dem untracked\&.
.RE
.PP
add untracked
.RS 4
This has a straight-up similar UI to
\fIupdate\fR
and
\fIrevert\fR, n' lets you add untracked paths ta tha index\&.
.RE
.PP
patch
.RS 4
This lets you chizzle one path outta a
\fIstatus\fR
like selection\& fo' realz. Afta choosin tha path, it presents tha diff between tha index n' tha hustlin tree file n' asks you if you wanna stage tha chizzle of each hunk\&. Yo ass can select one of tha followin options n' type return:
.sp
.if n \{\
.RS 4
.\}
.nf
y \- stage dis hunk
n \- do not stage dis hunk
q \- quit; do not stage dis hunk or any of tha remainin ones
a \- stage dis hunk n' all lata hunks up in tha file
d \- do not stage dis hunk or any of tha lata hunks up in tha file
g \- select a hunk ta go to
/ \- search fo' a hunk matchin tha given regex
j \- leave dis hunk undecided, peep next undecided hunk
J \- leave dis hunk undecided, peep next hunk
k \- leave dis hunk undecided, peep previous undecided hunk
K \- leave dis hunk undecided, peep previous hunk
s \- split tha current hunk tha fuck into smalla hunks
e \- manually edit tha current hunk
, biatch? \- print help
.fi
.if n \{\
.RE
.\}
.sp
Afta decidin tha fate fo' all hunks, if there be any hunk dat was chosen, tha index is updated wit tha selected hunks\&.
.sp
Yo ass can omit havin ta type return here, by settin tha configuration variable
interactive\&.singlekey
to
true\&.
.RE
.PP
diff
.RS 4
This lets you review what tha fuck is ghon be committed (i\&.e\&. between HEAD n' index)\&.
.RE
.SH "EDITING PATCHES"
.sp
Invokin git add \-e or selectin e from tha interactizzle hunk selector will open a patch up in yo' editor; afta tha editor exits, tha result be applied ta tha index\&. Yo ass is free ta make arbitrary chizzlez ta tha patch yo, but note dat some chizzlez may have confusin thangs up in dis biatch, or even result up in a patch dat cannot be applied\&. If you wanna abort tha operation entirely (i\&.e\&., stage not a god damn thang freshly smoked up in tha index), simply delete all linez of tha patch\&. Da list below raps bout some common thangs you may peep up in a patch, n' which editin operations make sense on them\&.
.PP
added content
.RS 4
Added content is represented by lines beginnin wit "+"\&. Yo ass can prevent stagin any addizzle lines by deletin them\&.
.RE
.PP
removed content
.RS 4
Removed content is represented by lines beginnin wit "\-"\&. Yo ass can prevent stagin they removal by convertin tha "\-" ta a " " (space)\&.
.RE
.PP
modified content
.RS 4
Modified content is represented by "\-" lines (removin tha oldschool content) followed by "+" lines (addin tha replacement content)\&. Yo ass can prevent stagin tha modification by convertin "\-" lines ta " ", n' removin "+" lines\&. Beware dat modifyin only half of tha pair is likely ta introduce confusin chizzlez ta tha index\&.
.RE
.sp
There is also mo' complex operations dat can be performed\&. But beware dat cuz tha patch be applied only ta tha index n' not tha hustlin tree, tha hustlin tree will step tha fuck up ta "undo" tha chizzle up in tha index\&. For example, introducin a freshly smoked up line tha fuck into tha index dat is up in neither tha HEAD nor tha hustlin tree will stage tha freshly smoked up line fo' commit yo, but tha line will step tha fuck up ta be reverted up in tha hustlin tree\&.
.sp
Avoid rockin these constructs, or do so wit off tha hook caution\&.
.PP
removin untouched content
.RS 4
Content which do not differ between tha index n' hustlin tree may be shown on context lines, beginnin wit a " " (space)\&. Yo ass can stage context lines fo' removal by convertin tha space ta a "\-"\&. Da resultin hustlin tree file will step tha fuck up ta re\-add tha content\&.
.RE
.PP
modifyin existin content
.RS 4
One can also modify context lines by stagin dem fo' removal (by convertin " " ta "\-") n' addin a "+" line wit tha freshly smoked up content\&. Right back up in yo muthafuckin ass. Similarly, one can modify "+" lines fo' existin additions or modifications\&. In all cases, tha freshly smoked up modification will step tha fuck up reverted up in tha hustlin tree\&.
.RE
.PP
new content
.RS 4
Yo ass may also add freshly smoked up content dat do not exist up in tha patch; simply add freshly smoked up lines, each startin wit "+"\&. Da addizzle will step tha fuck up reverted up in tha hustlin tree\&.
.RE
.sp
There is also nuff muthafuckin operations which should be avoided entirely, as they will make tha patch impossible ta apply:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
addin context (" ") or removal ("\-") lines
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
deletin context or removal lines
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
modifyin tha contentz of context or removal lines
.RE
.SH "SEE ALSO"
.sp
\fBgit-status\fR(1) \fBgit-rm\fR(1) \fBgit-reset\fR(1) \fBgit-mv\fR(1) \fBgit-commit\fR(1) \fBgit-update-index\fR(1)
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
