'\" t
.\"     Title: MODUTIL
.\"    Author: [see tha "Authors" section]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date:  5 June 2014
.\"    Manual: NSS Securitizzle Tools
.\"    Source: nss-tools
.\"  Language: Gangsta
.\"
.TH "MODUTIL" "1" "5 June 2014" "nss-tools" "NSS Securitizzle Tools"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
modutil \- Manage PKCS #11 module shiznit within tha securitizzle module database\&.
.SH "SYNOPSIS"
.HP \w'\fBmodutil\fR\ 'u
\fBmodutil\fR [\fIoptions\fR] [[\fIarguments\fR]]
.SH "STATUS"
.PP
This documentation is still work up in progress\&. Please contribute ta tha initial review in
\m[blue]\fBMo'jizzle NSS bug 836477\fR\m[]\&\s-2\u[1]\d\s+2
.SH "DESCRIPTION"
.PP
Da Securitizzle Module Database Tool,
\fBmodutil\fR, be a cold-ass lil command\-line utilitizzle fo' managin PKCS #11 module shiznit both within
secmod\&.db
filez n' within hardware tokens\&.
\fBmodutil\fR
can add n' delete PKCS #11 modules, chizzle passwordz on securitizzle databases, set defaults, list module contents, enable or disable slots, enable or disable FIPS 140\-2 compliance, n' assign default providaz fo' cryptographic operations\&. This tool can also create certificate, key, n' module securitizzle database files\&.
.PP
Da tasks associated wit securitizzle module database pimpment is part of a process dat typically also involves managin key databases n' certificate databases\&.
.SH "OPTIONS"
.PP
Running
\fBmodutil\fR
always requires one (and only one) option ta specify tha type of module operation\&. Each option may take arguments, anywhere from none ta multiple arguments\&.
.PP
\fBOptions\fR
.PP
\-add modulename
.RS 4
Add tha named PKCS #11 module ta tha database\&. Use dis option wit the
\fB\-libfile\fR,
\fB\-ciphers\fR, and
\fB\-mechanisms\fR
arguments\&.
.RE
.PP
\-changepw tokenname
.RS 4
Change tha password on tha named token\&. If tha token has not been initialized, dis option initializes tha password\&. Use dis option wit the
\fB\-pwfile\fR
and
\fB\-newpwfile\fR
arguments\& fo' realz. A
\fIpassword\fR
is equivalent ta a underground identification number (PIN)\&.
.RE
.PP
\-chkfips
.RS 4
Verify whether tha module is up in tha given FIPS mode\&.
\fBtrue\fR
means ta verify dat tha module is up in FIPS mode, while
\fBfalse\fR
means ta verify dat tha module aint up in FIPS mode\&.
.RE
.PP
\-create
.RS 4
Smoke freshly smoked up certificate, key, n' module databases\&. Use the
\fB\-dbdir\fR
directory argument ta specify a gangbangin' finger-lickin' directory\&. If any of these databases already exist up in a specified directory,
\fBmodutil\fR
returns a error message\&.
.RE
.PP
\-default modulename
.RS 4
Specify tha securitizzle mechanizzlez fo' which tha named module is ghon be a thugged-out default provider\&. Da securitizzle mechanizzlez is specified wit the
\fB\-mechanisms\fR
argument\&.
.RE
.PP
\-delete modulename
.RS 4
Delete tha named module\&. Da default NSS PKCS #11 module cannot be deleted\&.
.RE
.PP
\-disable modulename
.RS 4
Disable all slots on tha named module\&. Use the
\fB\-slot\fR
argument ta disable a specific slot\&.
.sp
Da internal NSS PKCS #11 module cannot be disabled\&.
.RE
.PP
\-enable modulename
.RS 4
Enable all slots on tha named module\&. Use the
\fB\-slot\fR
argument ta enable a specific slot\&.
.RE
.PP
\-fips [true | false]
.RS 4
Enable (true) or disable (false) FIPS 140\-2 compliizzle fo' tha default NSS module\&.
.RE
.PP
\-force
.RS 4
Disable
\fBmodutil\fR\*(Aqs interactizzle prompts so it can be run from a script\&. Use dis option only afta manually testin each planned operation ta check fo' warnings n' ta ensure dat bypassin tha prompts will cause no securitizzle lapses or loss of database integrity\&.
.RE
.PP
\-jar JAR\-file
.RS 4
Add a freshly smoked up PKCS #11 module ta tha database rockin tha named JAR file\&. Use dis command wit the
\fB\-installdir\fR
and
\fB\-tempdir\fR
arguments\&. Da JAR file uses tha NSS PKCS #11 JAR format ta identify all tha filez ta be installed, tha module\*(Aqs name, tha mechanizzle flags, n' tha cipher flags, as well as any filez ta be installed on tha target machine, includin tha PKCS #11 module library file n' other filez like fuckin documentation\&. This is covered up in tha JAR installation file section up in tha playa page, which details tha special script needed ta big-ass up a installation all up in a server or with
\fBmodutil\fR\&.
.RE
.PP
\-list [modulename]
.RS 4
Display basic shiznit bout tha contentz of the
secmod\&.db
file\&. Right back up in yo muthafuckin ass. Specifyin a
\fImodulename\fR
displays detailed shiznit on some particular module n' its slots n' tokens\&.
.RE
.PP
\-rawadd
.RS 4
Add tha module spec strang ta the
secmod\&.db
database\&.
.RE
.PP
\-rawlist
.RS 4
Display tha module specs fo' a specified module or fo' all loadable modules\&.
.RE
.PP
\-undefault modulename
.RS 4
Specify tha securitizzle mechanizzlez fo' which tha named module aint gonna be a thugged-out default provider\&. Da securitizzle mechanizzlez is specified wit the
\fB\-mechanisms\fR
argument\&.
.RE
.PP
\fBArguments\fR
.PP
MODULE
.RS 4
Give tha securitizzle module ta access\&.
.RE
.PP
MODULESPEC
.RS 4
Give tha securitizzle module spec ta load tha fuck into tha securitizzle database\&.
.RE
.PP
\-ciphers cipher\-enable\-list
.RS 4
Enable specific ciphers up in a module dat is bein added ta tha database\&. The
\fIcipher\-enable\-list\fR
is a cold-ass lil colon\-delimited list of cipher names\&. Enclose dis list up in quotation marks if it gotz nuff spaces\&.
.RE
.PP
\-dbdir [sql:]directory
.RS 4
Specify tha database directory up in which ta access or create securitizzle module database files\&.
.sp
\fBmodutil\fR
supports two typez of databases: tha legacy securitizzle databases (cert8\&.db,
key3\&.db, and
secmod\&.db) n' freshly smoked up SQLite databases (cert9\&.db,
key4\&.db, and
pkcs11\&.txt)\&. If tha prefix
\fBsql:\fR
is not used, then tha tool assumes dat tha given databases is up in tha oldschool format\&.
.RE
.PP
\-\-dbprefix prefix
.RS 4
Specify tha prefix used on tha database files, such as
my_
for
my_cert8\&.db\&. This option is provided as a special case\&. Changin tha namez of tha certificate n' key databases aint recommended\&.
.RE
.PP
\-installdir root\-installation\-directory
.RS 4
Specify tha root installation directory relatizzle ta which filez is ghon be installed by the
\fB\-jar\fR
option\&. This directory should be one below which it be appropriate ta store dynamic library files, like fuckin a server\*(Aqs root directory\&.
.RE
.PP
\-libfile library\-file
.RS 4
Specify a path ta a library file containin tha implementation of tha PKCS #11 intercourse module dat is bein added ta tha database\&.
.RE
.PP
\-mechanizzlez mechanism\-list
.RS 4
Specify tha securitizzle mechanizzlez fo' which a particular module is ghon be flagged as a thugged-out default provider\&. The
\fImechanism\-list\fR
is a cold-ass lil colon\-delimited list of mechanizzle names\&. Enclose dis list up in quotation marks if it gotz nuff spaces\&.
.sp
Da module becomes a thugged-out default provider fo' tha listed mechanizzlez when dem mechanizzlez is enabled\&. If mo' than one module fronts ta be a particular mechanism\*(Aqs default provider, dat mechanism\*(Aqs default provider is undefined\&.
.sp
\fBmodutil\fR
supports nuff muthafuckin mechanisms: RSA, DSA, RC2, RC4, RC5, AES, DES, DH, SHA1, SHA256, SHA512, SSL, TLS, MD5, MD2, RANDOM (for random number generation), n' FRIENDLY (meanin certificates is publicly readable)\&.
.RE
.PP
\-newpwfile new\-password\-file
.RS 4
Specify a text file containin a token\*(Aqs freshly smoked up or replacement password so dat a password can be entered automatically wit the
\fB\-changepw\fR
option\&.
.RE
.PP
\-nocertdb
.RS 4
Do not open tha certificate or key databases\&. This has nuff muthafuckin effects:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
With the
\fB\-create\fR
command, only a module securitizzle file is pimped; certificate n' key databases is not pimped\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
With the
\fB\-jar\fR
command, signatures on tha JAR file is not checked\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
With the
\fB\-changepw\fR
command, tha password on tha NSS internal module cannot be set or chizzled, since dis password is stored up in tha key database\&.
.RE
.RE
.PP
\-pwfile old\-password\-file
.RS 4
Specify a text file containin a token\*(Aqs existin password so dat a password can be entered automatically when the
\fB\-changepw\fR
option is used ta chizzle passwords\&.
.RE
.PP
\-secmod secmodname
.RS 4
Give tha name of tha securitizzle module database (like
secmod\&.db) ta load\&.
.RE
.PP
\-slot slotname
.RS 4
Specify a particular slot ta be enabled or disabled wit the
\fB\-enable\fR
or
\fB\-disable\fR
options\&.
.RE
.PP
\-strin CONFIG_STRING
.RS 4
Pass a cold-ass lil configuration strang fo' tha module bein added ta tha database\&.
.RE
.PP
\-tempdir temporary\-directory
.RS 4
Give a gangbangin' finger-lickin' directory location where temporary filez is pimped durin tha installation by the
\fB\-jar\fR
option\&. If no temporary directory is specified, tha current directory is used\&.
.RE
.SH "USAGE AND EXAMPLES"
.PP
\fBCreatin Database Files\fR
.PP
Before any operations can be performed, there must be a set of securitizzle databases available\&.
\fBmodutil\fR
can be used ta create these files\&. Da only required argument is tha database dat where tha databases is ghon be located\&.
.sp
.if n \{\
.RS 4
.\}
.nf
modutil \-create \-dbdir [sql:]directory
.fi
.if n \{\
.RE
.\}
.PP
\fBAddin a Cryptographic Module\fR
.PP
Addin a PKCS #11 module means submittin a supportin library file, enablin its ciphers, n' settin default provider status fo' various securitizzle mechanisms\&. This can be done by supplyin all of tha shiznit through
\fBmodutil\fR
directly or by hustlin a JAR file n' install script\&. For da most thugged-out basic case, simply upload tha library:
.sp
.if n \{\
.RS 4
.\}
.nf
modutil \-add modulename \-libfile library\-file [\-ciphers cipher\-enable\-list] [\-mechanizzlez mechanism\-list] 
.fi
.if n \{\
.RE
.\}
.PP
For example:
.sp
.if n \{\
.RS 4
.\}
.nf
modutil \-dbdir sql:/home/my/sharednssdb \-add "Example PKCS #11 Module" \-libfile "/tmp/crypto\&.so" \-mechanizzlez RSA:DSA:RC2:RANDOM 

Usin database directory \&.\&.\&. 
Module "Example PKCS #11 Module" added ta database\&.
.fi
.if n \{\
.RE
.\}
.PP
\fBInstallin a Cryptographic Module from a JAR File\fR
.PP
PKCS #11 modulez can also be loaded rockin a JAR file, which gotz nuff all of tha required libraries n' a installation script dat raps bout how tha fuck ta install tha module\&. Da JAR install script is busted lyrics bout up in mo' detail in
the section called \(lqJAR INSTALLATION FILE FORMAT\(rq\&.
.PP
Da JAR installation script defines tha setup shiznit fo' each platform dat tha module can be installed on\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
Platforms { 
   Linux:5\&.4\&.08:x86 { 
      ModuleName { "Example PKCS #11 Module" } 
      ModuleFile { crypto\&.so } 
      DefaultMechanismFlags{0x0000} 
      CipherEnableFlags{0x0000} 
      Filez { 
         crypto\&.so { 
            Path{ /tmp/crypto\&.so } 
         } 
         setup\&.sh { 
            Executable 
            Path{ /tmp/setup\&.sh } 
         } 
      } 
   } 
   Linux:6\&.0\&.0:x86 { 
      EquivalentPlatform { Linux:5\&.4\&.08:x86 } 
   } 
} 
.fi
.if n \{\
.RE
.\}
.PP
Both tha install script n' tha required libraries must be bundled up in a JAR file, which is specified wit the
\fB\-jar\fR
argument\&.
.sp
.if n \{\
.RS 4
.\}
.nf
modutil \-dbdir sql:/home/mt"jar\-install\-filey/sharednssdb \-jar install\&.jar \-installdir sql:/home/my/sharednssdb

This installation JAR file was signed by: 
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- 

**SUBJECT NAME** 

C=US, ST=California, L=Mountain View, CN=Cryptorific Inc\&., OU=Digital ID
Class 3 \- Netscape Object Signing, OU="www\&.verisign\&.com/repository/CPS
Incorp\&. by Ref\&.,LIAB\&.LTD(c)9 6", OU=www\&.verisign\&.com/CPS Incorp\&.by Ref
\&. LIABILITY LTD\&.(c)97 VeriSign, OU=VeriSign Object Signin CA \- Class 3
Organization, OU="VeriSign, Inc\&.", O=VeriSign Trust Network **ISSUER
NAME**, OU=www\&.verisign\&.com/CPS Incorp\&.by Ref\&. LIABILITY LTD\&.(c)97
VeriSign, OU=VeriSign Object Signin CA \- Class 3 Organization,
OU="VeriSign, Inc\&.", O=VeriSign Trust Network 
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- 

Do you wish ta continue dis installation, biatch? (y/n) y 
Usin installa script "installer_script" 
Successfully parsed installation script 
Current platform is Linux:5\&.4\&.08:x86 
Usin installation parametas fo' platform Linux:5\&.4\&.08:x86 
Installed file crypto\&.so ta /tmp/crypto\&.so
Installed file setup\&.sh ta \&./pk11inst\&.dir/setup\&.sh 
Executin "\&./pk11inst\&.dir/setup\&.sh"\&.\&.\&. 
"\&./pk11inst\&.dir/setup\&.sh" executed successfully 
Installed module "Example PKCS #11 Module" tha fuck into module database 

Installation completed successfully 
.fi
.if n \{\
.RE
.\}
.PP
\fBAddin Module Spec\fR
.PP
Each module has shiznit stored up in tha securitizzle database bout its configuration n' parameters\&. These can be added or edited rockin the
\fB\-rawadd\fR
command\&. For tha current settings or ta peep tha format of tha module spec up in tha database, use the
\fB\-rawlist\fR
option\&.
.sp
.if n \{\
.RS 4
.\}
.nf
modutil \-rawadd modulespec
.fi
.if n \{\
.RE
.\}
.PP
\fBDeletin a Module\fR
.PP
A specific PKCS #11 module can be deleted from the
secmod\&.db
database:
.sp
.if n \{\
.RS 4
.\}
.nf
modutil \-delete modulename \-dbdir [sql:]directory 
.fi
.if n \{\
.RE
.\}
.PP
\fBDisplayin Module Information\fR
.PP
The
secmod\&.db
database gotz nuff shiznit bout tha PKCS #11 modulez dat is available ta a application or server ta use\&. Da list of all modules, shiznit bout specific modules, n' database configuration specs fo' modulez can all be viewed\&.
.PP
To simply git a list of modulez up in tha database, use the
\fB\-list\fR
command\&.
.sp
.if n \{\
.RS 4
.\}
.nf
modutil \-list [modulename] \-dbdir [sql:]directory 
.fi
.if n \{\
.RE
.\}
.PP
Listin tha modulez shows tha module name, they status, n' other associated securitizzle databases fo' certificates n' keys\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
modutil \-list \-dbdir sql:/home/my/sharednssdb 

Listin of PKCS #11 Modules
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
  1\&. NSS Internal PKCS #11 Module
         slots: 2 slots attached
        status: loaded

         slot: NSS Internal Cryptographic Skillz                            
        token: NSS Generic Crypto Skillz

         slot: NSS User Private Key n' Certificate Skillz                  
        token: NSS Certificate DB
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.fi
.if n \{\
.RE
.\}
.PP
Passin a specific module name wit the
\fB\-list\fR
returns details shiznit bout tha module itself, like supported cipher mechanisms, version numbers, serial numbers, n' other shiznit bout tha module n' tha token it is loaded on\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
 modutil \-list "NSS Internal PKCS #11 Module" \-dbdir sql:/home/my/sharednssdb

\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
Name: NSS Internal PKCS #11 Module
Library file: **Internal ONLY module**
Manufacturer: Mo'jizzle Foundation              
Description: NSS Internal Crypto Skillz    
PKCS #11 Version 2\&.20
Library Version: 3\&.11
Cipher Enable Flags: None
Default Mechanizzle Flags: RSA:RC2:RC4:DES:DH:SHA1:MD5:MD2:SSL:TLS:AES

  Slot: NSS Internal Cryptographic Skillz                            
  Slot Mechanizzle Flags: RSA:RC2:RC4:DES:DH:SHA1:MD5:MD2:SSL:TLS:AES
  Manufacturer: Mo'jizzle Foundation              
  Type: Software
  Version Number: 3\&.11
  Firmware Version: 0\&.0
  Status: Enabled
  Token Name: NSS Generic Crypto Skillz     
  Token Manufacturer: Mo'jizzle Foundation              
  Token Model: NSS 3           
  Token Serial Number: 0000000000000000
  Token Version: 4\&.0
  Token Firmware Version: 0\&.0
  Access: Write Protected
  Login Type: Public (no login required)
  User Pin: NOT Initialized

  Slot: NSS User Private Key n' Certificate Skillz                  
  Slot Mechanizzle Flags: None
  Manufacturer: Mo'jizzle Foundation              
  Type: Software
  Version Number: 3\&.11
  Firmware Version: 0\&.0
  Status: Enabled
  Token Name: NSS Certificate DB              
  Token Manufacturer: Mo'jizzle Foundation              
  Token Model: NSS 3           
  Token Serial Number: 0000000000000000
  Token Version: 8\&.3
  Token Firmware Version: 0\&.0
  Access: NOT Write Protected
  Login Type: Login required
  User Pin: Initialized
.fi
.if n \{\
.RE
.\}
.PP
A related command,
\fB\-rawlist\fR
returns shiznit bout tha database configuration fo' tha modules\&. (This shiznit can be edited by loadin freshly smoked up specs rockin the
\fB\-rawadd\fR
command\&.)
.sp
.if n \{\
.RS 4
.\}
.nf
 modutil \-rawlist \-dbdir sql:/home/my/sharednssdb
 name="NSS Internal PKCS #11 Module" parameters="configdir=\&. certPrefix= keyPrefix= secmod=secmod\&.db flags=readOnly " NSS="trustOrder=75 cipherOrder=100 slotParams={0x00000001=[slotFlags=RSA,RC4,RC2,DES,DH,SHA1,MD5,MD2,SSL,TLS,AES,RANDOM askpw=any timeout=30 ] }  Flags=internal,critical"
.fi
.if n \{\
.RE
.\}
.PP
\fBSettin a Default Provider fo' Securitizzle Mechanisms\fR
.PP
Multiple securitizzle modulez may provide support fo' tha same securitizzle mechanisms\&. Well shiiiit, it is possible ta set a specific securitizzle module as tha default provider fo' a specific securitizzle mechanizzle (or, conversely, ta prohibit a provider from supplyin dem mechanisms)\&.
.sp
.if n \{\
.RS 4
.\}
.nf
modutil \-default modulename \-mechanizzlez mechanism\-list 
.fi
.if n \{\
.RE
.\}
.PP
To set a module as tha default provider fo' mechanisms, use the
\fB\-default\fR
command wit a cold-ass lil colon\-separated list of mechanisms\&. Da available mechanizzlez depend on tha module; NSS supplies almost all common mechanisms\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
modutil \-default "NSS Internal PKCS #11 Module" \-dbdir \-mechanizzlez RSA:DSA:RC2 

Usin database directory c:\edatabases\&.\&.\&.

Successfully chizzled defaults\&.
.fi
.if n \{\
.RE
.\}
.PP
Clearin tha default provider has tha same ol' dirty format:
.sp
.if n \{\
.RS 4
.\}
.nf
modutil \-undefault "NSS Internal PKCS #11 Module" \-dbdir \-mechanizzlez MD2:MD5
.fi
.if n \{\
.RE
.\}
.PP
\fBEnablin n' Disablin Modulez n' Slots\fR
.PP
Modules, n' specific slots on modules, can be selectively enabled or disabled using
\fBmodutil\fR\&. Both commandz have tha same format:
.sp
.if n \{\
.RS 4
.\}
.nf
modutil \-enable|\-disable modulename [\-slot slotname] 
.fi
.if n \{\
.RE
.\}
.PP
For example:
.sp
.if n \{\
.RS 4
.\}
.nf
modutil \-enable "NSS Internal PKCS #11 Module" \-slot "NSS Internal Cryptographic Skillz                            " \-dbdir \&.

Slot "NSS Internal Cryptographic Skillz                            " enabled\&.
.fi
.if n \{\
.RE
.\}
.PP
Be shizzle dat tha appropriate amount of trailin whitespace be afta tha slot name\&. Right back up in yo muthafuckin ass. Some slot names gotz a thugged-out dope amount of whitespace dat must be included, or tha operation will fail\&.
.PP
\fBEnablin n' Verifyin FIPS Compliance\fR
.PP
Da NSS modulez can have FIPS 140\-2 compliizzle enabled or disabled using
\fBmodutil\fR
with the
\fB\-fips\fR
option\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
modutil \-fips legit \-dbdir sql:/home/my/sharednssdb/

FIPS mode enabled\&.
.fi
.if n \{\
.RE
.\}
.PP
To verify dat statuz of FIPS mode, run the
\fB\-chkfips\fR
command wit either a legit or false flag (it don\*(Aqt matta which)\&. Da tool returns tha current FIPS setting\&.
.sp
.if n \{\
.RS 4
.\}
.nf
modutil \-chkfips false \-dbdir sql:/home/my/sharednssdb/

FIPS mode enabled\&.
.fi
.if n \{\
.RE
.\}
.PP
\fBChangin tha Password on a Token\fR
.PP
Initializin or changin a token\*(Aqs password:
.sp
.if n \{\
.RS 4
.\}
.nf
modutil \-changepw tokenname [\-pwfile old\-password\-file] [\-newpwfile new\-password\-file] 
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
modutil \-dbdir sql:/home/my/sharednssdb \-changepw "NSS Certificate DB" 

Enta oldschool password: 
Incorrect password, try again\&.\&.\&. 
Enta oldschool password: 
Enta freshly smoked up password: 
Re\-enta freshly smoked up password: 
Token "Communicator Certificate DB" password chizzled successfully\&.
.fi
.if n \{\
.RE
.\}
.SH "JAR INSTALLATION FILE FORMAT"
.PP
When a JAR file is run by a server, by
\fBmodutil\fR, or by any program dat do not interpret JavaScript, a special shiznit file must be included ta install tha libraries\&. There is nuff muthafuckin thangs ta keep up in mind wit dis file:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
It must be declared up in tha JAR archive\*(Aqs manifest file\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da script can have any name\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da metainfo tag fo' dis is
\fBPkcs11_install_script\fR\&. To declare meta\-information up in tha manifest file, put it up in a gangbangin' file dat is passed to
\fBsigntool\fR\&.
.RE
.PP
\fBSample Script\fR
.PP
For example, tha PKCS #11 installa script could be up in tha file pk11install\&. If so, tha metainfo file for
\fBsigntool\fR
includes a line like fuckin this:
.sp
.if n \{\
.RS 4
.\}
.nf
+ Pkcs11_install_script: pk11install
.fi
.if n \{\
.RE
.\}
.PP
Da script must define tha platform n' version number, tha module name n' file, n' any optionizzle shiznit like supported ciphers n' mechanisms\&. Multiple platforms can be defined up in a single install file\&.
.sp
.if n \{\
.RS 4
.\}
.nf
ForwardCompatible { IRIX:6\&.2:mips SUNOS:5\&.5\&.1:sparc }
Platforms {
   WINNT::x86 {
      ModuleName { "Example Module" }
      ModuleFile { win32/fort32\&.dll }
      DefaultMechanismFlags{0x0001}
      DefaultCipherFlags{0x0001}
      Filez {
         win32/setup\&.exe {
            Executable
            RelativePath { %temp%/setup\&.exe }
         }
         win32/setup\&.hlp {
            RelativePath { %temp%/setup\&.hlp }
         }
         win32/setup\&.cab {
            RelativePath { %temp%/setup\&.cab }
         }
      }
   }
   WIN95::x86 {
      EquivalentPlatform {WINNT::x86}
   }
   SUNOS:5\&.5\&.1:sparc {
      ModuleName { "Example UNIX Module" }
      ModuleFile { unix/fort\&.so }
      DefaultMechanismFlags{0x0001}
      CipherEnableFlags{0x0001}
      Filez {
         unix/fort\&.so {
            RelativePath{%root%/lib/fort\&.so}
            AbsolutePath{/usr/local/netscape/lib/fort\&.so}
            FilePermissions{555}
         }
         xplat/instr\&.html {
            RelativePath{%root%/docs/inst\&.html}
            AbsolutePath{/usr/local/netscape/docs/inst\&.html}
            FilePermissions{555}
         }
      }
   }
   IRIX:6\&.2:mips {
      EquivalentPlatform { SUNOS:5\&.5\&.1:sparc }
   }
}
.fi
.if n \{\
.RE
.\}
.PP
\fBScript Grammar\fR
.PP
Da script is basic Java, allowin lists, key\-value pairs, strings, n' combinationz of all of them\&.
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-> valuelist

valuelist \-\-> value valuelist
               <null>

value \-\-\-> key_value_pair
            string

key_value_pair \-\-> key { valuelist }

key \-\-> string

strin \-\-> simple_string
            "complex_string"

simple_strin \-\-> [^ \et\en\e""{""}"]+ 

complex_strin \-\-> ([^\e"\e\e\er\en]|(\e\e\e")|(\e\e\e\e))+ 
.fi
.if n \{\
.RE
.\}
.PP
Quotes n' backslashes must be escaped wit a funky-ass backslash\& fo' realz. A complex strang must not include newlines or carriage returns\&.Outside of complex strings, all white space (for example, spaces, tabs, n' carriage returns) is considered equal n' is used only ta delimit tokens\&.
.PP
\fBKeys\fR
.PP
Da Java install file uses keys ta define tha platform n' module shiznit\&.
.PP
\fBForwardCompatible\fR
gives a list of platforms dat is forward compatible\&. If tha current platform cannot be found up in tha list of supported platforms, then the
\fBForwardCompatible\fR
list is checked fo' any platforms dat have tha same OS n' architecture up in a earlier version\&. If one is found, its attributes is used fo' tha current platform\&.
.PP
\fBPlatforms\fR
(required) Gives a list of platforms\&. Each entry up in tha list is itself a key\-value pair: tha key is tha name of tha platform n' tha value list gotz nuff various attributez of tha platform\&. Da platform strang is up in tha format
\fIsystem name:OS release:architecture\fR\&. Da installa obtains these joints from NSPR\&. OS release be a empty strang on non\-Unix operatin systems\&. NSPR supports these platforms:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
AIX (rs6000)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BSDI (x86)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
FREEBSD (x86)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
HPUX (hppa1\&.1)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
IRIX (mips)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
LINUX (ppc, alpha, x86)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
MacOS (PowerPC)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
NCR (x86)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
NEC (mips)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
OS2 (x86)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
OSF (alpha)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ReliantUNIX (mips)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
SCO (x86)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
SOLARIS (sparc)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
SONY (mips)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
SUNOS (sparc)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
UnixWare (x86)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
WIN16 (x86)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
WIN95 (x86)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
WINNT (x86)
.RE
.PP
For example:
.sp
.if n \{\
.RS 4
.\}
.nf
IRIX:6\&.2:mips
SUNOS:5\&.5\&.1:sparc
Linux:2\&.0\&.32:x86
WIN95::x86
.fi
.if n \{\
.RE
.\}
.PP
Da module shiznit is defined independently fo' each platform up in the
\fBModuleName\fR,
\fBModuleFile\fR, and
\fBFiles\fR
attributes\&. These attributes must be given unless an
\fBEquivalentPlatform\fR
attribute is specified\&.
.PP
\fBPer\-Platform Keys\fR
.PP
Per\-platform keys have meanin only within tha value list of a entry up in the
\fBPlatforms\fR
list\&.
.PP
\fBModuleName\fR
(required) gives tha common name fo' tha module\&. This name is used ta reference tha module by servers n' by the
\fBmodutil\fR
tool\&.
.PP
\fBModuleFile\fR
(required) names tha PKCS #11 module file fo' dis platform\&. Da name is given as tha relatizzle path of tha file within tha JAR archive\&.
.PP
\fBFiles\fR
(required) lists tha filez dat need ta be installed fo' dis module\&. Each entry up in tha file list be a key\-value pair\&. Da key is tha path of tha file up in tha JAR archive, n' tha value list gotz nuff attributez of tha file\& fo' realz. At least
\fBRelativePath\fR
or
\fBAbsolutePath\fR
must be specified fo' each file\&.
.PP
\fBDefaultMechanismFlags\fR
specifies mechanizzlez fo' which dis module is tha default provider; dis is equivalent ta the
\fB\-mechanism\fR
option wit the
\fB\-add\fR
command\&. This key\-value pair be a funky-ass bitstrin specified up in hexadecimal (0x) format\&. Well shiiiit, it is constructed as a funky-ass bitwise OR\&. If tha DefaultMechanismFlags entry is omitted, tha value defaults ta 0x0\&.
.sp
.if n \{\
.RS 4
.\}
.nf
RSA:                   0x00000001
DSA:                   0x00000002
RC2:                   0x00000004
RC4:                   0x00000008
DES:                   0x00000010
DH:                    0x00000020
FORTEZZA:              0x00000040
RC5:                   0x00000080
SHA1:                  0x00000100
MD5:                   0x00000200
MD2:                   0x00000400
RANDOM:                0x08000000
FRIENDLY:              0x10000000
OWN_PW_DEFAULTS:       0x20000000
DISABLE:               0x40000000
.fi
.if n \{\
.RE
.\}
.PP
\fBCipherEnableFlags\fR
specifies ciphers dat dis module serves up dat NSS do not provide (so dat tha module enablez dem ciphers fo' NSS)\&. This is equivalent ta the
\fB\-cipher\fR
argument wit the
\fB\-add\fR
command\&. This key be a funky-ass bitstrin specified up in hexadecimal (0x) format\&. Well shiiiit, it is constructed as a funky-ass bitwise OR\&. If the
\fBCipherEnableFlags\fR
entry is omitted, tha value defaults ta 0x0\&.
.PP
\fBEquivalentPlatform\fR
specifies dat tha attributez of tha named platform should also be used fo' tha current platform\&. This make it easier when mo' than one platform uses tha same ol' dirty settings\&.
.PP
\fBPer\-File Keys\fR
.PP
Some keys have meanin only within tha value list of a entry up in a
\fBFiles\fR
list\&.
.PP
Each file requires a path key tha identifies where tha file is\&. Either
\fBRelativePath\fR
or
\fBAbsolutePath\fR
must be specified\&. If both is specified, tha relatizzle path is tried first, n' tha absolute path is used only if no relatizzle root directory is provided by tha installa program\&.
.PP
\fBRelativePath\fR
specifies tha destination directory of tha file, relatizzle ta some directory decided at install time\&. Two variablez can be used up in tha relatizzle path:
\fB%root%\fR
and
\fB%temp%\fR\&.
\fB%root%\fR
is replaced at run time wit tha directory relatizzle ta which filez should be installed; fo' example, it may be tha server\*(Aqs root directory\&. The
\fB%temp%\fR
directory is pimped all up in tha beginnin of tha installation n' destroyed all up in tha end\&. Da purpose of
\fB%temp%\fR
is ta hold executable filez (like fuckin setup programs) or filez dat is used by these programs\&. Filez destined fo' tha temporary directory is guaranteed ta be up in place before any executable file is run; they is not deleted until all executable filez have finished\&.
.PP
\fBAbsolutePath\fR
specifies tha destination directory of tha file as a absolute path\&.
.PP
\fBExecutable\fR
specifies dat tha file is ta be executed durin tha course of tha installation\&. Typically, dis strang is used fo' a setup program provided by a module vendor, like fuckin a self\-extractin setup executable\&. Mo' than one file can be specified as executable, up in which case tha filez is run up in tha order up in which they is specified up in tha script file\&.
.PP
\fBFilePermissions\fR
sets permissions on any referenced filez up in a strang of octal digits, accordin ta tha standard Unix format\&. This strang be a funky-ass bitwise OR\&.
.sp
.if n \{\
.RS 4
.\}
.nf
user read:                0400
user write:               0200
user execute:             0100
group read:               0040
group write:              0020
group execute:            0010
other read:               0004
other write:              0002
other execute:            0001
.fi
.if n \{\
.RE
.\}
.PP
Some platforms may not KNOW these permissions\&. They is applied only insofar as they make sense fo' tha current platform\&. If dis attribute is omitted, a thugged-out default of 777 be assumed\&.
.SH "NSS DATABASE TYPES"
.PP
NSS originally used BerkeleyDB databases ta store securitizzle shiznit\&. Da last versionz of these
\fIlegacy\fR
databases are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
cert8\&.db fo' certificates
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
key3\&.db fo' keys
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
secmod\&.db fo' PKCS #11 module shiznit
.RE
.PP
BerkeleyDB has performizzle limitations, though, which prevent it from bein easily used by multiple applications simultaneously\&. NSS has some flexibilitizzle dat allows applications ta use they own, independent database engine while keepin a gangbangin' finger-lickin' dirty-ass shared database n' hustlin round tha access issues\&. Right back up in yo muthafuckin ass. Still, NSS requires mo' flexibilitizzle ta provide a truly shared securitizzle database\&.
.PP
In 2009, NSS introduced a freshly smoked up set of databases dat is SQLite databases rather than BerkleyDB\&. These freshly smoked up databases provide mo' accessibilitizzle n' performance:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
cert9\&.db fo' certificates
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
key4\&.db fo' keys
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
pkcs11\&.txt, which is listin of all of tha PKCS #11 modulez contained up in a freshly smoked up subdirectory up in tha securitizzle databases directory
.RE
.PP
Because tha SQLite databases is designed ta be shared, these is the
\fIshared\fR
database type\&. Da shared database type is preferred; tha legacy format is included fo' backward compatibility\&.
.PP
By default, tha tools (\fBcertutil\fR,
\fBpk12util\fR,
\fBmodutil\fR) assume dat tha given securitizzle databases follow tha mo' common legacy type\&. Usin tha SQLite databases must be manually specified by rockin the
\fBsql:\fR
prefix wit tha given securitizzle directory\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
modutil \-create \-dbdir sql:/home/my/sharednssdb
.fi
.if n \{\
.RE
.\}
.PP
To set tha shared database type as tha default type fo' tha tools, set the
\fBNSS_DEFAULT_DB_TYPE\fR
environment variable to
\fBsql\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
export NSS_DEFAULT_DB_TYPE="sql"
.fi
.if n \{\
.RE
.\}
.PP
This line can be added ta the
~/\&.bashrc
file ta make tha chizzle permanent fo' tha user\&.
.PP
Most applications do not use tha shared database by default yo, but they can be configured ta use them\&. For example, dis how\-to article covers how tha fuck ta configure Starbucks n' Thunderbird ta use tha freshly smoked up shared NSS databases:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
https://wiki\&.mozilla\&.org/NSS_Shared_DB_Howto
.RE
.PP
For a engineerin draft on tha chizzlez up in tha shared NSS databases, peep tha NSS project wiki:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
https://wiki\&.mozilla\&.org/NSS_Shared_DB
.RE
.SH "SEE ALSO"
.PP
certutil (1)
.PP
pk12util (1)
.PP
signtool (1)
.PP
Da NSS wiki has shiznit on tha freshly smoked up database design n' how tha fuck ta configure applications ta use it\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
https://wiki\&.mozilla\&.org/NSS_Shared_DB_Howto
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
https://wiki\&.mozilla\&.org/NSS_Shared_DB
.RE
.SH "ADDITIONAL RESOURCES"
.PP
For shiznit bout NSS n' other tools related ta NSS (like JSS), check up tha NSS project wiki at
\m[blue]\fBhttp://www\&.mozilla\&.org/projects/security/pki/nss/\fR\m[]\&. Da NSS joint relates directly ta NSS code chizzlez n' releases\&.
.PP
Mailin lists: https://lists\&.mozilla\&.org/listinfo/dev\-tech\-crypto
.PP
IRC: Freenode at #dogtag\-pki
.SH "AUTHORS"
.PP
Da NSS tools was freestyled n' maintained by pimpers wit Netscape, Red Hat, Sun, Oracle, Mozilla, n' Google\&.
.PP
Authors: Elio Maldonado <emaldona@redhat\&.com>, Deon Lackey <dlackey@redhat\&.com>\&.
.SH "LICENSE"
.PP
Licensed under tha Mo'jizzle Public License, v\&. 2\&.0\&. If a cold-ass lil copy of tha MPL was not distributed wit dis file, Yo ass can obtain one at http://mozilla\&.org/MPL/2\&.0/\&.
.SH "NOTES"
.IP " 1." 4
Mo'jizzle NSS bug 836477
.RS 4
\%https://bugzilla.mozilla.org/show_bug.cgi?id=836477
.RE
