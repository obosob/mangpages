
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" 2007-10-23 mtk Added intro paragraph bout section, plus a paragraph
.\"     bout exit status joints.
.\"
.TH INTRO 1 2007-11-15 "Linux" "Linux Userz Manual"
.SH NAME
intro \- introduction ta user commands
.SH DESCRIPTION
Section 1 of tha manual raps bout user commandz n' tools,
for example, file manipulation tools, shells, compilers,
web browsers, file n' image viewers n' editors, n' so on.

All commandz yield a status value on termination.
This value can be tested (e.g., up in most shells tha variable
.I $?
gotz nuff tha statuz of tha last executed command)
to peep whether tha command completed successfully.
A zero exit status is conventionally used ta indicate success,
and a nonzero status means dat tha command was unsuccessful.
(Detailz of tha exit status can be found in
.BR wait (2).)
A nonzero exit status can be up in tha range 1 ta 255, n' some commands
use different nonzero status joints ta indicate tha reason why the
command failed.
.SH NOTES
Linux be a gangbangin' flavor of UNIX, n' as a gangbangin' first approximation
all user commandz under UNIX work precisely tha same under
Linux (and FreeBSD n' fuckin shitloadz of other UNIX-like systems).
.LP
Under Linux there be GUIs (graphical user intercourses), where you
can point n' click n' drag, n' hopefully git work done without
first readin fuckin shitloadz of documentation.
Da traditionizzle UNIX environment
is a CLI (command line intercourse), where you type commandz to
tell tha computa what tha fuck ta do.
That is fasta n' mo' powerful,
but requires findin up what tha fuck tha commandz are.
Below a funky-ass bare minimum, ta git started.
.SS Login
In order ta start working, you probably first gotta login,
that is, give yo' username n' password.
See also
.BR login (1).
Da program
.I login
now starts a
.I shell
(command interpreter) fo' yo thugged-out ass.
In case of a graphical login, you git a screen wit menus or icons
and a mouse click will start a gangbangin' finger-lickin' dirty-ass shell up in a window.
See also
.BR xterm (1).
.SS Da shell
One types commandz ta the
.IR shell ,
the command interpreter.
It aint built-in yo, but is just a program
and you can chizzle yo' shell.
All Y'all has her own straight-up one.
Da standard one is called
.IR sh .
See also
.BR ash (1),
.BR bash (1),
.BR csh (1),
.BR zsh (1),
.BR chsh (1).
.LP
A session might go like

.RS
.nf
.BI "knuth login: " aeb
.BI "Password: " ********
.BI "% " date
Tue Aug  6 23:50:44 CEST 2002
.BI "% " cal
     August 2002
Su Mo Tu We Th Fr Sa
             1  2  3
 4  5  6  7  8  9 10
11 12 13 14 15 16 17
18 19 20 21 22 23 24
25 26 27 28 29 30 31

.BI "% " ls
bin  tel
.BI "% " "ls \-l"
total 2
drwxrwxr\-x   2 aeb       1024 Aug  6 23:51 bin
\-rw\-rw\-r\-\-   1 aeb         37 Aug  6 23:52 tel
.BI "% " "cat tel"
maja    0501\-1136285
peta   0136\-7399214
.BI "% " "cp tel tel2"
.BI "% " "ls \-l"
total 3
drwxr\-xr\-x   2 aeb       1024 Aug  6 23:51 bin
\-rw\-r\-\-r\-\-   1 aeb         37 Aug  6 23:52 tel
\-rw\-r\-\-r\-\-   1 aeb         37 Aug  6 23:53 tel2
.BI "% " "mv tel tel1"
.BI "% " "ls \-l"
total 3
drwxr\-xr\-x   2 aeb       1024 Aug  6 23:51 bin
\-rw\-r\-\-r\-\-   1 aeb         37 Aug  6 23:52 tel1
\-rw\-r\-\-r\-\-   1 aeb         37 Aug  6 23:53 tel2
.BI "% " "diff tel1 tel2"
.BI "% " "rm tel1"
.BI "% " "grep maja tel2"
maja    0501\-1136285
.B "% "
.fi
.RE
and here typin Control-D ended tha session.
The
.B "% "
here was tha command prompt\(emit is tha shellz way of indicating
that it is locked n loaded fo' tha next command.
Da prompt can be customized
in fuckin shitloadz of ways, n' one might include shiznit like username,
machine name, current directory, time, n' so on.
An assignment PS1="What next, master, biatch? "
would chizzle tha prompt as indicated.
.LP
We peep dat there be commands
.I date
(that gives date n' time), and
.I cal
(that gives a cold-ass lil calendar).
.LP
Da command
.I ls
lists tha contentz of tha current directory\(emit  drops some lyrics ta you what
filez you have.
With a
.I \-l
option it gives a long-ass listing,
that includes tha balla n' size n' date of tha file, n' the
permissions playas have fo' readin and/or changin tha file.
For example, tha file "tel" here is 37 bytes long, owned by aeb
and tha balla can read n' write it, others can only read dat shit.
Owner n' permissions can be chizzled by tha commands
.I chown
and
.IR chmod .
.LP
Da command
.I cat
will show tha contentz of a gangbangin' file.
(Da name is from "concatenate n' print": all filez given as
parametas is concatenated n' busted ta "standard output", here
the terminal screen.)
.LP
Da command
.I cp
(from "copy") will copy a gangbangin' file.
On tha other hand, tha command
.I mv
(from "move") only renames dat shit.
.LP
Da command
.I diff
lists tha differences between two files.
Here there was no output cuz there was no differences.
.LP
Da command
.I rm
(from "remove") deletes tha file, n' be careful! it is gone.
No wastepaper basket or anything.
Deleted means lost.
.LP
Da command
.I grep
(from "g/re/p") findz occurrencez of a strang up in one or mo' files.
Here it findz Majaz telephone number.
.SS Pathnames n' tha current directory
Filez live up in a big-ass tree, tha file hierarchy.
Each has a
.I "pathname"
describin tha path from tha root of tha tree (which is called /)
to tha file.
For example, such a gangbangin' full pathname might be /home/aeb/tel.
Always rockin full pathnames would be inconvenient, n' tha name
of a gangbangin' file up in tha current directory may be abbreviated by giving
only tha last component.
That is why "/home/aeb/tel" can be abbreviated
to "tel" when tha current directory is "/home/aeb".
.LP
Da command
.I pwd
prints tha current directory.
.LP
Da command
.I cd
changes tha current directory.
Try "cd /" n' "pwd" n' "cd" n' "pwd".
.SS Directories
Da command
.I mkdir
makes a freshly smoked up directory.
.LP
Da command
.I rmdir
removes a gangbangin' finger-lickin' directory if it is empty, n' bitches otherwise.
.LP
Da command
.I find
(with a rather baroque syntax) will find filez wit given name
or other properties.
For example, "find . \-name tel" would find
the file "tel" startin up in tha present directory (which is called ".").
And "find / \-name tel" would do tha same yo, but startin all up in tha root
of tha tree.
Big-Ass searches on a multi-GB disk is ghon be time-consuming,
and it may be betta ta use
.BR locate (1).
.SS Disks n' filesystems
Da command
.I mount
will attach tha file system found on some disk (or floppy, or CDROM or so)
to tha big-ass file system hierarchy.
And
.I umount
detaches it again.
Da command
.I df
will rap  how tha fuck much of yo' disk is still free.
.SS Processes
On a UNIX system nuff user n' system processes run simultaneously.
Da one yo ass is rappin' ta runs up in the
.IR foreground ,
the others up in the
.IR background .
Da command
.I ps
will show you which processes is actizzle n' what tha fuck numbers these
processes have.
Da command
.I kill
allows you ta git rid of em.
Without option dis be a gangbangin' bumpin'
request: please go away.
And "kill \-9" followed by tha number
of tha process be a immediate kill.
Foreground processes can often be capped by typin Control-C.
.SS Gettin shiznit
There is thousandz of commands, each wit nuff options.
Traditionally commandz is documented on
.IR "man pages" ,
(like dis one), so dat tha command "man kill" will document
the use of tha command "kill" (and "man man" document tha command "man").
Da program
.I man
sendz tha text all up in some
.IR pager ,
usually
.IR less .
Hit tha space bar ta git tha next page, hit q ta quit.
.LP
In documentation it is customary ta refer ta playa pages
by givin tha name n' section number, as in
.BR playa (1).
Man pages is terse, n' allow you ta find quickly some forgotten
detail.
For newcomers a introductory text wit mo' examples
and explanations is useful.
.LP
All dem GNU/FSF software is provided wit info files.
Type "info info"
for a introduction on tha use of tha program "info".
.LP
Special topics is often treated up in HOWTOs.
Look in
.I /usr/share/doc/howto/en
and bust a funky-ass browser if you find HTML filez there.
.\"
.\" Actual examples, biatch? Separate section fo' each of cat, cp, ...?
.\" gzip, bzip2, tar, rpm
.SH SEE ALSO
.BR standardz (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
