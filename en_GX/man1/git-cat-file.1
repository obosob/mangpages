'\" t
.\"     Title: git-cat-file
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-CAT\-FILE" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-cat-file \- Provide content or type n' size shiznit fo' repository objects
.SH "SYNOPSIS"
.sp
.nf
\fIgit cat\-file\fR (\-t | \-s | \-e | \-p | <type> | \-\-textconv ) <object>
\fIgit cat\-file\fR (\-\-batch | \-\-batch\-check) < <list\-of\-objects>
.fi
.sp
.SH "DESCRIPTION"
.sp
In its first form, tha command serves up tha content or tha type of a object up in tha repository\&. Da type is required unless \fI\-t\fR or \fI\-p\fR is used ta find tha object type, or \fI\-s\fR is used ta find tha object size, or \fI\-\-textconv\fR is used (which implies type "blob")\&.
.sp
In tha second form, a list of objects (separated by linefeeds) is provided on stdin, n' tha SHA\-1, type, n' size of each object is printed on stdout\&.
.SH "OPTIONS"
.PP
<object>
.RS 4
Da name of tha object ta show\&. For a mo' complete list of ways ta spell object names, peep tha "SPECIFYING REVISIONS" section in
\fBgitrevisions\fR(7)\&.
.RE
.PP
\-t
.RS 4
Instead of tha content, show tha object type identified by <object>\&.
.RE
.PP
\-s
.RS 4
Instead of tha content, show tha object size identified by <object>\&.
.RE
.PP
\-e
.RS 4
Suppress all output; instead exit wit zero status if <object> exists n' be a valid object\&.
.RE
.PP
\-p
.RS 4
Pretty\-print tha contentz of <object> based on its type\&.
.RE
.PP
<type>
.RS 4
Typically dis matches tha real type of <object> but askin fo' a type dat can trivially be dereferenced from tha given <object> be also permitted\& fo' realz. An example is ta ask fo' a "tree" wit <object> bein a cold-ass lil commit object dat gotz nuff it, or ta ask fo' a "blob" wit <object> bein a tag object dat points at it\&.
.RE
.PP
\-\-textconv
.RS 4
Show tha content as transformed by a textconv filter\&. In dis case, <object> has be of tha form <tree\-ish>:<path>, or :<path> up in order ta apply tha filta ta tha content recorded up in tha index at <path>\&.
.RE
.PP
\-\-batch, \-\-batch=<format>
.RS 4
Print object shiznit n' contents fo' each object provided on stdin\&. May not be combined wit any other options or arguments\&. Right back up in yo muthafuckin ass. See tha section
BATCH OUTPUT
below fo' details\&.
.RE
.PP
\-\-batch\-check, \-\-batch\-check=<format>
.RS 4
Print object shiznit fo' each object provided on stdin\&. May not be combined wit any other options or arguments\&. Right back up in yo muthafuckin ass. See tha section
BATCH OUTPUT
below fo' details\&.
.RE
.SH "OUTPUT"
.sp
If \fI\-t\fR is specified, one of tha <type>\&.
.sp
If \fI\-s\fR is specified, tha size of tha <object> up in bytes\&.
.sp
If \fI\-e\fR is specified, no output\&.
.sp
If \fI\-p\fR is specified, tha contentz of <object> is pretty\-printed\&.
.sp
If <type> is specified, tha raw (though uncompressed) contentz of tha <object> is ghon be returned\&.
.SH "BATCH OUTPUT"
.sp
If \-\-batch or \-\-batch\-check is given, cat\-file will read objects from stdin, one per line, n' print shiznit bout them\&. By default, tha whole line is considered as a object, as if it was fed ta \fBgit-rev-parse\fR(1)\&.
.sp
Yo ass can specify tha shiznit shown fo' each object by rockin a cold-ass lil custom <format>\&. Da <format> is copied literally ta stdout fo' each object, wit placeholdaz of tha form %(atom) expanded, followed by a newline\&. Da available atoms are:
.PP
objectname
.RS 4
Da 40\-hex object name of tha object\&.
.RE
.PP
objecttype
.RS 4
Da type of tha object (the same as
cat\-file \-t
reports)\&.
.RE
.PP
objectsize
.RS 4
Da size, up in bytes, of tha object (the same as
cat\-file \-s
reports)\&.
.RE
.PP
objectsize:disk
.RS 4
Da size, up in bytes, dat tha object takes up on disk\&. Right back up in yo muthafuckin ass. See tha note bout on\-disk sizes up in the
CAVEATS
section below\&.
.RE
.PP
deltabase
.RS 4
If tha object is stored as a thugged-out delta on\-disk, dis expandz ta tha 40\-hex sha1 of tha delta base object\&. Otherwise, expandz ta tha null sha1 (40 zeroes)\&. Right back up in yo muthafuckin ass. See
CAVEATS
below\&.
.RE
.PP
rest
.RS 4
If dis atom is used up in tha output string, input lines is split all up in tha straight-up original gangsta whitespace boundary\& fo' realz. All charactas before dat whitespace is considered ta be tha object name; charactas afta dat first run of whitespace (i\&.e\&., tha "rest" of tha line) is output up in place of the
%(rest)
atom\&.
.RE
.sp
If no format is specified, tha default format is %(objectname) %(objecttype) %(objectsize)\&.
.sp
If \-\-batch is specified, tha object shiznit is followed by tha object contents (consistin of %(objectsize) bytes), followed by a newline\&.
.sp
For example, \-\-batch without a cold-ass lil custom format would produce:
.sp
.if n \{\
.RS 4
.\}
.nf
<sha1> SP <type> SP <size> LF
<contents> LF
.fi
.if n \{\
.RE
.\}
.sp
.sp
Whereas \-\-batch\-check=\(aq%(objectname) %(objecttype)\(aq would produce:
.sp
.if n \{\
.RS 4
.\}
.nf
<sha1> SP <type> LF
.fi
.if n \{\
.RE
.\}
.sp
.sp
If a name is specified on stdin dat cannot be resolved ta a object up in tha repository, then cat\-file will ignore any custom format n' print:
.sp
.if n \{\
.RS 4
.\}
.nf
<object> SP missin LF
.fi
.if n \{\
.RE
.\}
.sp
.SH "CAVEATS"
.sp
Note dat tha sizez of objects on disk is reported accurately yo, but care should be taken up in drawin conclusions bout which refs or objects is responsible fo' disk usage\&. Da size of a packed non\-delta object may be much larger than tha size of objects which delta against it yo, but tha chizzle of which object is tha base n' which is tha delta be arbitrary n' is subject ta chizzle durin a repack\&.
.sp
Note also dat multiple copiez of a object may be present up in tha object database; up in dis case, it is undefined which copy\(cqs size or delta base is ghon be reported\&.
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
