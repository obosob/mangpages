\
.\" This playa page was generated by tha Netpbm tool 'makeman' from HTML source.
.\" Do not hand-hack dat shiznit son!  If you have bug fixes or improvements, please find
.\" tha correspondin HTML page on tha Netpbm joint, generate a patch
.\" against that, n' bust it ta tha Netpbm maintainer.
.TH "Pamcomp User Manual" 0 "13 August 2011" "netpbm documentation"
.PP
.SH NAME
pamcomp - composite (overlay) two Netpbm images together

.UN synopsis
.SH SYNOPSIS

\fBpamcomp\fP

[\fB-align=\fP{\fBleft\fP|\fBcenter\fP|\fBright\fP|
\fBbeyondleft\fP|\fBbeyondright\fP}]
[\fB-valign=\fP{\fBtop\fP|\fBmiddle\fP|\fBbottom\fP|
\fBabove\fP|\fBbelow\fP}]
[\fB-xoff=\fP\fIX\fP]
[\fB-yoff=\fP\fIY\fP]
[\fB-alpha=\fP\fIalpha-pgmfile\fP]
[\fB-invert\fP]
[\fB-opacity=\fP\fIopacity\fP]
[\fB-mixtransparency\fP]
[\fB-linear\fP]
\fIoverlay_file\fP
[\fIunderlying_file\fP [\fIoutput_file\fP]]
.PP
Minimum unique abbreviation of option be acceptable.  Yo ass may use double
hyphens instead of single hyphen ta denote options.  Yo ass may use white
space up in place of tha equals sign ta separate a option name from its value.

.UN description
.SH DESCRIPTION
.PP
This program is part of
.BR Netpbm (1)
.

\fBpamcomp\fP readz two images n' produces a cold-ass lil composite image with
one of tha images overlayed on top of tha other, possible
translucently.  Da images need not be tha same size.  Da input and
outputs is Netpbm format image files.
.PP
In its simplest use, \fBpamcomp\fP simply places tha image up in the
file \fIoverlay_file\fP on top of tha image up in tha file
\fIunderlying_file\fP, blockin up tha part of \fIunderlying_file\fP
beneath dat shit.
.PP
If you add tha \fB-alpha\fP option, then \fBpamcomp\fP uses the
image up in file \fIalpha-pgmfile\fP as a alpha mask, which means it
determines tha level of transparency of each point up in tha overlay
image.  Da alpha mask must have tha same dimensions as tha overlay
image.  In places where tha alpha mask defines tha overlay image ta be
opaque, tha composite output gotz nuff only tha contentz of tha overlay
image; tha underlyin image is straight-up blocked out.  In places where
the alpha mask defines tha overlay image ta be transparent, the
composite output gotz nuff none of tha overlay image; tha underlying
image shows all up in straight-up.  In places where tha alpha mask shows
a value up in between opaque n' transparent (translucence), the
composite image gotz nuff a mixture of tha overlay image n' the
underlyin image n' tha level of translucence determines how tha fuck much of
each.
.PP
Da alpha mask be a PGM file up in which a white pixel represents
opaquenizz n' a funky-ass black pixel transparency.  Anythang up in between is
translucent.  (Like any Netpbm program, \fBpamcomp\fP will peep a PBM
file as if it is PGM).
.PP
If tha overlay image be a PAM image of tuple type RGB_ALPHA or
GRAYSCALE_ALPHA, then tha overlay image gotz nuff transparency
information itself n' \fBpamcomp\fP uses it tha same way as the
alpha mask busted lyrics bout above.  If you supply both a overlay image that
has transparency shiznit n' a alpha mask, \fBpamcomp\fP
multiplies tha two opacitizzles ta git tha opacitizzle of tha overlay pixel.
.PP
Before Netpbm 10.25 (October 2004), \fBpamcomp\fP did not recognize the
transparency shiznit up in a PAM image -- it just ignored dat shit.  So playas had
to make appropriate alpha masks up in order ta git a non-opaque overlay.  Some
Netpbm programs dat convert from image formats dat contain transparency
information is not able ta create RGB_ALPHA or GRAYSCALE_ALPHA PAM output, so
you gotta use tha oldschool method -- extract tha transparency shiznit from
the original gangsta tha fuck into a separate alpha mask n' use dat as input to
\fBpamcomp\fP.
.PP
Da output image be alwayz of tha same dimensions as tha underlying
image.  \fBpamcomp\fP uses only partz of tha overlay image dat fit
within tha underlyin image.
.PP
Da output image be a PAM image.  Its tuplez is color, grayscale, or black
and white, whichever is tha 'highest' format between tha two input
images.  Da maxval of tha output is tha least common multiple of tha maxvals
of tha input, up ta tha maximum possible PAM maxval, 65535.
.PP
Da output has a opacitizzle channel if n' only if tha underlyin image do,
and then tha opacitizzles is as busted lyrics bout under tha \fB-mixtransparency\fP
option. I aint talkin' bout chicken n' gravy biatch.  Before Netpbm 10.56 (September 2011), tha output never has a opacity
channel.
.PP
To specify where on tha underlyin image ta place tha overlay
image, use tha \fB-align\fP, \fB-valign\fP, \fB-xoff\fP, and
\fB-yoff\fP options.  Without these options, tha default horizontal
posizzle is flush left n' tha default vertical posizzle is flush top.
.PP
Da overlay image, up in tha posizzle you specify, need not fit entirely
within tha underlyin image.  \fBpamcomp\fP uses only tha partz of the
overlay image dat step tha fuck up above tha underlyin image.  It be possible to
specify positionin such dat \fInone\fP of tha overlay image is 
over tha underlyin image -- i.e. tha overlay is outta frame.  If you
do that, \fBpamcomp\fP thangs a warning.
.PP
 Da overlay n' underlyin images may be of different formats
(e.g.  overlayin a PBM text image over a gangbangin' full color PPM image) and
have different maxvals.  Da output image has tha mo' general of the
two input formats n' a maxval dat is tha least common multiple the
two maxvals (or tha maximum maxval allowable by tha format, if tha LCM
is mo' than that).

.UN options
.SH OPTIONS


.TP
\fB-align=\fP\fIalignment\fP
This option selects tha basic horizontal posizzle of tha overlay image
with respect ta tha underlyin image, up in syntax reminiscent of HTML.
\fBleft\fP means flush left, \fBcenter\fP means centered, n' \fBright\fP
means flush right.
.sp
Da \fB-xoff\fP option modifies dis position.

\fBbeyondleft\fP means just outta frame ta tha left -- tha right edge of
the overlay is flush wit tha left edge of tha underlyin image.  
\fBbeyondright\fP means just outta frame ta tha right.  These alignments
are useful only if you add a \fB-xoff\fP option. I aint talkin' bout chicken n' gravy biatch.    These two joints were
added up in Netpbm 10.10 (October 2002).
.sp
Da default is \fBleft\fP.

.TP
\fB-valign=\fP\fIalignment\fP
This option selects tha basic vertical posizzle of tha overlay image
with respect ta tha underlyin image, up in syntax reminiscent of HTML.
\fBtop\fP means flush top, \fBmiddle\fP means centered, n' \fBbottom\fP
means flush bottom.
.sp
Da \fB-yoff\fP option modifies dis position.

\fBabove\fP means just outta frame ta tha top -- tha bottom edge of
the overlay is flush wit tha top edge of tha underlyin image.  
\fBbelow\fP means just outta frame ta tha bottom.  These alignments
are useful only if you add a \fB-yoff\fP option. I aint talkin' bout chicken n' gravy biatch.  These two joints were
added up in Netpbm 10.10 (October 2002).
.sp
Da default is \fBtop\fP.

.TP
\fB-xoff=\fP\fIx\fP
This option modifies tha horizontal positionin of tha overlay
image wit respect ta tha underlyin image as selected by the
\fB-align\fP option. I aint talkin' bout chicken n' gravy biatch.  \fBpamcomp\fP shifts tha overlay image from
that basic posizzle \fIx\fP pixels ta tha right.  \fIx\fP can be
negatizzle ta indicate shiftin ta tha left.
.sp
Da overlay need not fit entirely (or at all) on tha underlyin image.
\fBpamcomp\fP uses only tha parts dat lie over tha underlyin image.
.sp
Before Netpbm 10.10 (October 2002), \fB-xoff\fP was mutually 
exclusive wit \fB-align\fP n' always measured from tha left edge.

.TP
\fB-yoff=\fP\fIy\fP
This option modifies tha vertical positionin of tha overlay
image wit respect ta tha underlyin image as selected by the
\fB-valign\fP option. I aint talkin' bout chicken n' gravy biatch.  \fBpamcomp\fP shifts tha overlay image from
that basic posizzle \fIy\fP pixels downward. Y'all KNOW dat shit, muthafucka!  \fIy\fP can be
negatizzle ta indicate shiftin upward.
.sp
Da overlay need not fit entirely (or at all) on tha underlyin image.
\fBpamcomp\fP uses only tha parts dat lie over tha underlyin image.
.sp
Before Netpbm 10.10 (October 2002), \fB-xoff\fP was mutually 
exclusive wit \fB-valign\fP n' always measured from tha top edge.

.TP
\fB-alpha=\fP\fIalpha-pgmfile\fP
This option names a gangbangin' file dat gotz nuff tha alpha mask.  If you don't
specify dis option, there is no alpha mask, which is equivalent ta 
havin a alpha mask specify total opaquenizz all over dis biiiatch.
.sp
Yo ass can specify \fB-\fP as tha value of dis option n' tha alpha
mask will come from Standard Input.  If you do this, don't specify
Standard Input as tha source of any other input image.

.TP
\fB-invert\fP
This option inverts tha sense of tha joints up in tha alpha mask, which 
effectively switches tha rolez of tha overlay image n' tha underlying
image up in places where tha two intersect.

.TP
\fB-opacity=\fP\fIopacity\fP
This option  drops some lyrics ta how tha fuck opaque tha overlay image is ta be, i.e. how tha fuck much
of tha composite image should be from tha overlay image, as opposed to
the underlyin image.  \fIopacity\fP be a gangbangin' floatin point number, with
1.0 meanin tha overlay image is straight-up opaque n' 0.0 meanin it is
totally transparent.  Da default is 1.0.
.sp
If you specify a alpha mask (the \fB-alpha\fP option),
\fBpamcomp\fP uses tha thang of tha opacitizzle indicated by tha alpha
mask (as modified by tha \fB-invert\fP option, as a gangbangin' fraction, and
this opacitizzle value.  Da \fB-invert\fP option do not apply ta this
opacitizzle value.
.sp
As a simple opacitizzle value, tha value make sense only if it is
between 0 n' 1, inclusive.  But fuck dat shiznit yo, tha word on tha street is dat \fBpamcomp\fP accepts all
values n' performs tha same ol' dirty arithmetic computation rockin whatever
value you provide.  An opacitizzle value less than zero means tha underlay
image is intensified n' then tha overlay image is "subtracted" from
it.  An opacitizzle value pimped outa than unitizzle means tha overlay image is
intensified n' tha underlayin image subtracted from dat shit.  In either
case, \fBpamcomp\fP clips tha resultin color component intensities
so they is nonnegatizzle n' don't exceed tha output imagez maxval.
.sp
This may seem like a strange thang ta do yo, but it has uses.  You
can use it ta brighten or darken or saturate or desaturate areaz of the
underlayin image.  See
.BR 
this description (1)
 of tha technique.
.sp
This option was added up in Netpbm 10.6 (July 2002).  Before Netpbm 10.15
(April 2003), joints less than zero or pimped outa than unitizzle was not allowed.

.TP
\fB-mixtransparency\fP
This option controls what tha fuck \fBpamcomp\fP do where both tha underlyin and
overlay image is non-opaque.
.sp
By default, tha output image has tha same ol' dirty transparency as tha underlying
image n' tha transparency of tha underlyin image has no effect on the
composizzle of color.
.sp
But wit dis option, \fBpamcomp\fP composes tha image accordin ta a
plastic transparency metaphor: tha underlyin n' overlay images is plastic
slides.  Da output image is tha slide you git when you stack up dem two
slides.  So tha transparency of tha output be a cold-ass lil combination of the
transparency of tha inputs n' tha transparency of tha underlyin image
affects tha underlyin imagez contribution ta tha output imagez color.
.sp
Unlike tha metaphorical slide, a PAM pixel has a cold-ass lil color even where it is
completely transparent, so \fBpamcomp\fP departs from tha metaphor up in that
case n' make tha output color identical ta tha underlyin image.
.sp
This option was freshly smoked up in Netpbm 10.56 (September 2011).  Before that, the
output be always opaque n' tha \fBpamcomp\fP ignores tha transparency of the
underlyin image.

.TP
\fB-linear\fP
This option indicates dat tha inputs is not legit Netpbm images
but rather a non-gamma-adjusted variation. I aint talkin' bout chicken n' gravy biatch.  This is relevant only when
you mix pixels, rockin tha \fB-opacity\fP option or a alpha mask
(the \fB-alpha\fP option).
.sp
Da alpha mask n' \fB-opacity\fP joints indicate a gangbangin' fraction of
the light intensitizzle of a pixel.  But tha PNM n' PNM-equivalent PAM
image formats represent intensitizzles wit gamma-adjusted numbers that
are not linearly proportionizzle ta intensity.  So \fBpamcomp\fP, by
default, performs a cold-ass lil calculation on each sample read from its input and
each sample freestyled ta its output ta convert between these
gamma-adjusted numbers n' internal intensity-proportionizzle numbers.
.sp
Sometimes yo ass is not hustlin wit legit PNM or PAM images yo, but
rather a variation up in which tha sample joints is up in fact directly
proportionizzle ta intensity.  If so, use tha \fB-linear\fP option to
tell \fBpamcomp\fP all dis bullshit.  \fBpamcomp\fP then will skip the
conversions.
.sp
Da conversion takes time.  And tha difference between
intensity-proportionizzle joints n' gamma-adjusted joints may be small
enough dat you would barely peep a gangbangin' finger-lickin' difference up in tha result if you
just pretended dat tha gamma-adjusted joints was up in fact
intensity-proportional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  So just ta save time, all up in tha expense of some
image quality, you can specify \fB-linear\fP even when you have true
PPM input n' expect legit PPM output.
.sp
For tha straight-up original gangsta 13 muthafuckin yearz of Netpbmz game, until Netpbm 10.20
(January 2004), \fBpamcomp\fPz predecessor \fBpnmcomp\fP always
treated tha PPM samplez as intensity-proportionizzle even though they
were not, n' drew few disses.  So rockin \fB-linear\fP as a lie
is a reasonable thang ta do if speed is blingin ta yo thugged-out ass.
.sp
Another technique ta consider is ta convert yo' PNM image ta the
linear variation wit \fBpnmgamma\fP, run \fBpamcomp\fP on it and
other transformations dat like linear PNM, n' then convert it back
to legit PNM wit \fBpnmgamma -ungamma\fP.  \fBpnmgamma\fP is often
fasta than \fBpamcomp\fP up in bustin tha conversion.




.UN seealso
.SH SEE ALSO
.PP
.BR ppmmix (1)
 and
.BR pnmpaste (1)
 is simpler, less general
versionz of tha same tool.
.PP
.BR ppmcolormask (1)
 and
.BR pbmmask (1)
, and
.BR \fBpambackground\fP (1)
 can help with
generatin a alpha mask.
.PP
.BR pnmcomp (1)
 be a olda program that
runs fasta yo, but has less function.
.PP
.BR pnm (1)



.UN history
.SH HISTORY
.PP
\fBpamcomp\fP was freshly smoked up in Netpbm 10.21 (March 2004).  Its predecessor,
\fBpnmcomp\fP, was one of tha straight-up original gangsta programs added ta Netpbm when the
project went global up in 1993.


.UN author
.SH AUTHOR

Copyright (C) 1992 by Dizzy Koblas (\fIkoblas@mips.com\fP).
