.TH "socat" "1" "Mar 2014" "" ""

.PP 
.SH "NAME"
socat \- Multipurpose relay (SOcket CAT)
.PP 
.SH "SYNOPSIS"
\f(CWsocat [options] <address> <address>\fP
.br 
\f(CWsocat \-V\fP
.br 
\f(CWsocat \-h[h[h]] | \-?[?[?]]\fP
.br 
\f(CWfilan\fP
.br 
\f(CWprocan\fP
.PP 
.SH "DESCRIPTION"

.PP 
\fBSocat\fP be a cold-ass lil command line based utilitizzle dat establishes two bidirectionizzle byte
streams n' transfers data between them\&. Because tha streams can be constructed
from a big-ass set of different typez of data sinks n' sources 
(see address types), n' cuz fuckin shitloadz of
address options may be applied ta tha streams, socat can
be used fo' nuff different purposes\&. 
.PP 
\fBFilan\fP be a utilitizzle dat prints shiznit bout its actizzle file
descriptors ta stdout\&. Well shiiiit, it has been freestyled fo' debuggin \fBsocat\fP yo, but might be
useful fo' other purposes too\&. Use tha \-h option ta find mo' infos\&.
.PP 
\fBProcan\fP be a utilitizzle dat prints shiznit bout process parametas to
stdout\&. Well shiiiit, it has been freestyled ta betta KNOW 
some UNIX process propertizzles n' fo' debuggin \fBsocat\fP yo, but might be 
useful fo' other purposes too\&.
.PP 
Da game cycle of a \fBsocat\fP instizzle typically consistz of four phases\&.
.PP 
In tha \fIinit\fP phase, tha command line options is parsed n' loggin is
initialized\&. 
.PP 
Durin tha \fIopen\fP phase, \fBsocat\fP opens tha straight-up original gangsta address n' afterwardz the
second address\&. These steps is probably blocking; thus, especially fo' complex address types like socks,
connection requests or authentication dialogs must be completed before tha next
step is started\&.
.PP 
In tha \fItransfer\fP phase, \fBsocat\fP watches both streams\(cq\& read n' write file
descriptors via 
\f(CWselect()\fP
, and, when data be available on one side \fIand\fP
can be freestyled ta tha other side, socat readz it, performs newline
characta conversions if required, n' writes tha data ta tha write file
descriptor of tha other stream, then continues waitin fo' mo' data up in both
directions\&.
.PP 
When one of tha streams effectively reaches EOF, tha \fIclosing\fP phase
begins\&. \fBSocat\fP transfers tha EOF condizzle ta tha other stream,
i\&.e\&. tries ta shutdown only its write stream, givin it a cold-ass lil chizzle to
terminizzle gracefully\&. For a thugged-out defined time \fBsocat\fP continues ta transfer data in
the other direction yo, but then closes all remainin channels n' terminates\&.
.PP 
.SH "OPTIONS"

.PP 
\fBSocat\fP serves up some command line options dat modify tha behaviour of the
program\&. They have not a god damn thang ta do wit so called
address options dat is used as partz of address justifications\&.
.PP 
.IP "\fB\f(CW\-V\fP\fP"
Print version n' available feature shiznit ta stdout, n' exit\&.
.IP "\fB\f(CW\-h | \-?\fP\fP"
Print a help text ta stdout describin command line options n' available address
types, n' exit\&.
.IP "\fB\f(CW\-hh | \-??\fP\fP"
Like \-h, plus a list of tha short namez of all available address options\&. Right back up in yo muthafuckin ass. Some options are
platform dependend, so dis output is helpful fo' checkin tha particular
implementation\&. 
.IP "\fB\f(CW\-hhh | \-???\fP\fP"
Like \-hh, plus a list of all available address option names\&.
.IP "\fB\f(CW\-d\fP\fP"
Without dis option, only fatal n' error lyrics is generated; applying
this option also prints warnin lyrics\&. Right back up in yo muthafuckin ass. See DIAGNOSTICS
for mo' shiznit\&. 
.IP "\fB\f(CW\-d \-d\fP\fP"
Prints fatal, error, warning, n' notice lyrics\&.
.IP "\fB\f(CW\-d \-d \-d\fP\fP"
Prints fatal, error, warning, notice, n' info lyrics\&.
.IP "\fB\f(CW\-d \-d \-d \-d\fP\fP"
Prints fatal, error, warning, notice, info, n' debug
lyrics\&. 
.IP "\fB\f(CW\-D\fP\fP"
Logs shiznit bout file descriptors before startin tha transfer phase\&.
.IP "\fB\f(CW\-ly[<facility>]\fP\fP"
Writes lyrics ta syslog instead of stderr; severitizzle as defined wit \-d
option\&. With optionizzle <facility>, tha syslog type can
be selected, default is \(dq\&daemon\(dq\&\&. Third jam libraries might not obey this
option\&.
.IP "\fB\f(CW\-lf\fP\fP\f(CW <logfile>\fP"
Writes lyrics ta <logfile> [filename] instead of
stderr\&. Right back up in yo muthafuckin ass. Some third jam libraries, up in particular libwrap, might not obey
this option\&.
.IP "\fB\f(CW\-ls\fP\fP"
Writes lyrics ta stderr (this is tha default)\&. Right back up in yo muthafuckin ass. Some third jam libraries 
might not obey dis option, up in particular libwrap appears ta only log to
syslog\&. 
.IP "\fB\f(CW\-lp\fP\fP\f(CW<progname>\fP"
Overrides tha program name printed up in error lyrics n' used for
constructin environment variable names\&.
.IP "\fB\f(CW\-lu\fP\fP"
Extendz tha timestamp of error lyrics ta microsecond resolution\&. Do not
work when loggin ta syslog\&.
.IP "\fB\f(CW\-lm[<facility>]\fP\fP"
Mixed log mode\&. Durin startup lyrics is printed ta stderr; when \fBsocat\fP 
starts tha transfer phase loop or daemon mode (i\&.e\&. afta openin all
streams n' before startin data transfer, or, wit listenin sockets with
fork option, before tha straight-up original gangsta accept call), it switches loggin ta syslog\&. 
With optionizzle <facility>, tha syslog type can be
selected, default is \(dq\&daemon\(dq\&\&. 
.IP "\fB\f(CW\-lh\fP\fP"
Addz hostname ta log lyrics\&. Uses tha value from environment variable
HOSTNAME or tha value retrieved wit \f(CWuname()\fP if HOSTNAME aint set\&.
.IP "\fB\f(CW\-v\fP\fP"
Writes tha transferred data not only ta they target streams yo, but also to
stderr\&. Da output format is text wit some conversions fo' readability, and
prefixed wit \(dq\&> \(dq\& or \(dq\&< \(dq\& indicatin flow directions\&.
.IP "\fB\f(CW\-x\fP\fP"
Writes tha transferred data not only ta they target streams yo, but also to
stderr\&. Da output format is hexadecimal, prefixed wit \(dq\&> \(dq\& or \(dq\&< \(dq\&
indicatin flow directions\&. Can be combined wit 
\f(CW\-v\fP
\&.
.IP "\fB\f(CW\-b\fP\fP\f(CW<size>\fP"
Sets tha data transfer block <size> [size_t]\&.
At most <size> bytes is transferred per step\&. Default is 8192 bytes\&. 
.IP "\fB\f(CW\-s\fP\fP"
By default, \fBsocat\fP terminates when a error occurred ta prevent tha process
from hustlin when some option could not be applied\&. With this
option, \fBsocat\fP is sloppy wit errors n' tries ta continue\&. Even wit this
option, socat will exit on fatals, n' will abort connection attempts when
securitizzle checks failed\&.
.IP "\fB\f(CW\-t\fP\fP\f(CW<timeout>\fP"
When one channel has reached EOF, tha write part of tha other channel is shut
down\&. Then, \fBsocat\fP waits <timeout> [timeval] seconds
before terminating\&. Default is 0\&.5 seconds\&. This timeout only applies to
addresses where write n' read part can be closed independently\&. When during
the timeout interval tha read part gives EOF, socat terminates without
awaitin tha timeout\&.
.IP "\fB\f(CW\-T\fP\fP\f(CW<timeout>\fP"
Total inactivitizzle timeout: when socat be already up in tha transfer loop and
nothang has happened fo' <timeout> [timeval] seconds
(no data arrived, no interrupt occurred\&.\&.\&.) then it terminates\&.
Useful wit protocols like UDP dat cannot transfer EOF\&.
.IP "\fB\f(CW\-u\fP\fP"
Uses unidirectionizzle mode\&. Da first address is only used fo' reading, n' the
second address is only used fo' freestylin (example)\&. 
.IP "\fB\f(CW\-U\fP\fP"
Uses unidirectionizzle mode up in reverse direction\&. Da first address is only
used fo' writing, n' tha second address is only used fo' reading\&. 
.IP "\fB\f(CW\-g\fP\fP"
Durin address option parsing, don\(cq\&t check if tha option is considered
useful up in tha given address environment\&. Use it if you wanna force, e\&.g\&.,
appliizzle of a socket option ta a serial device\&.
.IP "\fB\f(CW\-L\fP\fP\f(CW<lockfile>\fP"
If lockfile exists, exits wit error\&. If lockfile do not exist, creates it
and continues, unlinks lockfile on exit\&.
.IP "\fB\f(CW\-W\fP\fP\f(CW<lockfile>\fP"
If lockfile exists, waits until it disappears\&. When lockfile do not exist,
creates it n' continues, unlinks lockfile on exit\&.
.IP "\fB\f(CW\-4\fP\fP"
Use IP version 4 up in case dat tha addresses do not implicitly or explicitly
specify a version; dis is tha default\&.
.IP "\fB\f(CW\-6\fP\fP"
Use IP version 6 up in case dat tha addresses do not implicitly or explicitly
specify a version\&.

.PP 
.SH "ADDRESS SPECIFICATIONS"

.PP 
With tha address command line arguments, tha user gives \fBsocat\fP instructions and
the necessary shiznit fo' establishin tha byte streams\&. 
.PP 
An address justification probably consistz of a address type
keyword, zero or mo' required address parametas separated by \(cq\&:\(cq\& from tha keyword and
from each 
other, n' zero or mo' address options separated by \(cq\&,\(cq\&\&. 
.PP 
Da keyword specifies tha address type (e\&.g\&., TCP4, OPEN, EXEC)\&. For some
keywordz there exist synonyms (\(cq\&\-\(cq\& fo' STDIO, TCP fo' TCP4)\&. Keywordz is case
insensitive\&.
For all dem special address types, tha keyword may be omitted:
Address justifications startin wit a number is assumed ta be FD (raw file
descriptor) addresses; 
if a \(cq\&/\(cq\& is found before tha straight-up original gangsta \(cq\&:\(cq\& or \(cq\&,\(cq\&, GOPEN (generic file open) is
assumed\&. 
.PP 
Da required number n' type of address parametas depend on tha address
type\&. E\&.g\&., TCP4 requires a server justification (name or address), n' a port
specification (number or steez name)\&. 
.PP 
Zero or mo' address options may be given wit each address\&. They influence the
address up in some ways\&. 
Options consist of a option keyword or a option keyword n' a value,
separated by \(cq\&=\(cq\&\&. Option keywordz is case insensitive\&.
For filterin tha options dat is useful wit a address
type, each option is gangmember of one option group\&. For
each address type there be a set of option crews allowed\&. Only options
belongin ta one of these address crews may be used (except wit option \-g)\&. 
.PP 
Address justifications followin tha above schema is also called \fIsingle\fP
address justifications\&.
Two single addresses can be combined wit \(dq\&!!\(dq\& ta form a \fIdual\fP type
address fo' one channel\& yo. Here, tha straight-up original gangsta address is used by \fBsocat\fP fo' reading
data, n' tha 
second address fo' freestylin data\&. There is no way ta specify a option only once
for bein applied ta both single addresses\&.
.PP 
Usually, addresses is opened up in read/write
mode\&. When a address is part of a thugged-out dual address justification, or when
option \-u or \-U is used, a address might be
used only fo' readin or fo' writing\&. Considerin dis is blingin wit some
address types\&.
.PP 
With socat version 1\&.5\&.0 n' higher, tha lexical analysis tries ta handle
quotes n' parenthesis meaningfully n' allows escapin of special characters\&. 
If one of tha charactas ( { [ \(cq\& is found, tha correspondin closin 
characta \- ) } ] \(cq\& \- is looked for; they may also be nested\&. Within these
constructs, socats special charactas n' strings : , !! is not handled
specially\& fo' realz. All dem charactas n' strings can be escaped wit \e or within \(dq\&\(dq\&
.PP 
.SH "ADDRESS TYPES"

.PP 
This section raps bout tha available address types wit they keywords,
parameters, n' semantics\&.
.PP 
.IP "\fB\f(CWCREATE:<filename>\fP\fP"
Opens <filename> wit 
\f(CWcreat()\fP
and uses tha file
descriptor fo' writing\&. 
This address type requires write\-only context, cuz a gangbangin' file opened with
\f(CWcreat\fP
cannot be read from\&. 
.br 
Flags like O_LARGEFILE cannot be applied\&. If you need dem use
OPEN wit options
create,create\&. 
.br 
<filename> must be a valid existin or not existin path\&.
If <filename> be a named pipe, 
\f(CWcreat()\fP
might block;
if <filename> refers ta a socket, dis be a error\&.
.br 
Option groups: FD,REG,NAMED 
.br 
Useful options:
mode,
user,
group,
unlink\-early,
unlink\-late,
append
.br 
See also: OPEN, GOPEN
.IP "\fB\f(CWEXEC:<command\-line>\fP\fP"
Forks a sub process dat establishes communication wit its parent process
and invokes tha specified program wit 
\f(CWexecvp()\fP
\&.
<command\-line> be a simple command
with arguments separated by single spaces\&. If tha program name
gotz nuff a \(cq\&/\(cq\&, tha part afta tha last \(cq\&/\(cq\& is taken as ARGV[0]\&. If the
program name be a relatizzle 
path, tha 
\f(CWexecvp()\fP
semantics fo' findin tha program via
\f(CW$PATH\fP
apply\& fo' realz. Afta successful program start, \fBsocat\fP writes data ta stdin of the
process n' readz from its stdout rockin a UNIX domain socket generated by
\f(CWsocketpair()\fP
per default\&. (example) 
.br 
Option groups: FD,SOCKET,EXEC,FORK,TERMIOS 
.br 
Useful options:
path,
fdin,
fdout,
chroot,
su,
su\-d,
nofork,
pty,
stderr,
ctty,
setsid,
pipes,
login,
sigint,
sigquit
.br 
See also: SYSTEM
.IP "\fB\f(CWFD:<fdnum>\fP\fP"
Uses tha file descriptor <fdnum>\&. Well shiiiit, it must already exist as
valid UN*X file descriptor\&.
.br 
Option groups: FD (TERMIOS,REG,SOCKET) 
.br 
See also:
STDIO,
STDIN,
STDOUT,
STDERR 
.IP "\fB\f(CWGOPEN:<filename>\fP\fP"
(Generic open) This address type tries ta handle any file system entry
except directories usefully\&. <filename> may be a
relatizzle or absolute path\&. If it already exists, its type is checked\&. 
In case of a UNIX domain socket, \fBsocat\fP connects; if connectin fails,
\fBsocat\fP assumes a thugged-out datagram socket n' uses 
\f(CWsendto()\fP
calls\&.
If tha entry aint a socket, \fBsocat\fP opens it applyin tha 
\f(CWO_APPEND\fP
flag\&. 
If it do not exist, it is opened wit flag
\f(CWO_CREAT\fP
as a regular file (example)\&.
.br 
Option groups: FD,REG,SOCKET,NAMED,OPEN 
.br 
See also:
OPEN,
CREATE,
UNIX\-CONNECT
.IP 
.IP "\fB\f(CWIP\-SENDTO:<host>:<protocol>\fP\fP"
Opens a raw IP socket\&. Dependin on host justification or option pf, IP protocol version
4 or 6 is used\&. Well shiiiit, it uses <protocol> ta bust packets
to <host> [IP address] n' receives packets from
host, ignores packets from other hosts\&. 
Protocol 255 uses tha raw socket wit tha IP header bein part of the
data\&.
.br 
Option groups: FD,SOCKET,IP4,IP6 
.br 
Useful options:
pf,
ttl 
.br 
See also:
IP4\-SENDTO,
IP6\-SENDTO,
IP\-RECVFROM,
IP\-RECV,
UDP\-SENDTO,
UNIX\-SENDTO
.IP "\fB\f(CWINTERFACE:<interface>\fP\fP"
Communicates wit a network connected on a intercourse rockin raw packets
includin link level data\&. <interface> is tha name of
the network intercourse\&. Currently only available on Linux\&.
Option groups: FD,SOCKET 
.br 
Useful options:
pf,
type
.br 
See also: ip\-recv
.IP "\fB\f(CWIP4\-SENDTO:<host>:<protocol>\fP\fP"
Like IP\-SENDTO yo, but always uses IPv4\&.
.br 
Option groups: FD,SOCKET,IP4 
.br 
.IP "\fB\f(CWIP6\-SENDTO:<host>:<protocol>\fP\fP"
Like IP\-SENDTO yo, but always uses IPv6\&.
.br 
Option groups: FD,SOCKET,IP6 
.br 

.IP 
.IP "\fB\f(CWIP\-DATAGRAM:<address>:<protocol>\fP\fP"
Sendz outgoin data ta tha specified address which may up in particular be a
broadcast or multicast address\&. Packets arrivin on tha local socket are
checked if they source addresses match
RANGE or TCPWRAP
options\&. This address type can fo' example be used fo' implementing
symmetric or asymmetric broadcast or multicast communications\&.
.br 
Option groups: FD, SOCKET,
IP4, IP6, RANGE 
.br 
Useful options:
bind,
range,
tcpwrap,
broadcast,
ip\-multicast\-loop,
ip\-multicast\-ttl,
ip\-multicast\-if,
ip\-add\-membership,
ttl,
tos,
pf
.br 
See also:
IP4\-DATAGRAM,
IP6\-DATAGRAM,
IP\-SENDTO,
IP\-RECVFROM,
IP\-RECV,
UDP\-DATAGRAM
.IP "\fB\f(CWIP4\-DATAGRAM:<host>:<protocol>\fP\fP"
Like IP\-DATAGRAM yo, but always uses IPv4\&.
(example)
.br 
Option groups: FD,SOCKET,IP4,RANGE 
.br 
.IP "\fB\f(CWIP6\-DATAGRAM:<host>:<protocol>\fP\fP"
Like IP\-DATAGRAM yo, but always uses IPv6\&. Please
note dat IPv6 do not know broadcasts\&.
.br 
Option groups: FD,SOCKET,IP6,RANGE 
.br 

.IP 
.IP "\fB\f(CWIP\-RECVFROM:<protocol>\fP\fP"
Opens a raw IP socket of <protocol>\&. Dependin on option pf, IP protocol version
4 or 6 is used\&. Well shiiiit, it receives one packet from a unspecified peer n' may bust one or mo' answer packets ta dat peer\&.
This mode is particularly useful wit fork option where each arrivin packet \- from arbitrary peers \- is handled by its own sub process\&.
This allows a funky-ass behaviour similar ta typical UDP based servers like ntpd or
named\&.
.br 
Please note dat tha reply packets might be fetched as incomin traffic when
sender n' receiver IP address is identical cuz there is no port number
to distinguish tha sockets\&.
.br 
This address works well wit IP\-SENDTO address peers (see above)\&.
Protocol 255 uses tha raw socket wit tha IP header bein part of the
data\&.
.br 
Option groups: FD,SOCKET,IP4,IP6,CHILD,RANGE 
.br 
Useful options:
pf,
fork,
range,
ttl,
broadcast
.br 
See also:
IP4\-RECVFROM,
IP6\-RECVFROM,
IP\-SENDTO,
IP\-RECV,
UDP\-RECVFROM,
UNIX\-RECVFROM 
.IP "\fB\f(CWIP4\-RECVFROM:<protocol>\fP\fP"
Like IP\-RECVFROM yo, but always uses IPv4\&.
.br 
Option groups: FD,SOCKET,IP4,CHILD,RANGE 
.br 
.IP "\fB\f(CWIP6\-RECVFROM:<protocol>\fP\fP"
Like IP\-RECVFROM yo, but always uses IPv6\&.
.br 
Option groups: FD,SOCKET,IP6,CHILD,RANGE 
.br 

.IP 
.IP "\fB\f(CWIP\-RECV:<protocol>\fP\fP"
Opens a raw IP socket of <protocol>\&. Dependin on option pf, IP protocol version
4 or 6 is used\&. Well shiiiit, it receives packets from multiple unspecified peers n' merges tha data\&.
No replies is possible\&.
It can be, e\&.g\&., addressed by socat IP\-SENDTO address peers\&.
Protocol 255 uses tha raw socket wit tha IP header bein part of the
data\&.
.br 
Option groups: FD,SOCKET,IP4,IP6,RANGE 
.br 
Useful options:
pf,
range
.br 
See also:
IP4\-RECV,
IP6\-RECV,
IP\-SENDTO,
IP\-RECVFROM,
UDP\-RECV,
UNIX\-RECV 
.IP "\fB\f(CWIP4\-RECV:<protocol>\fP\fP"
Like IP\-RECV yo, but always uses IPv4\&.
.br 
Option groups: FD,SOCKET,IP4,RANGE 
.br 
.IP "\fB\f(CWIP6\-RECV:<protocol>\fP\fP"
Like IP\-RECV yo, but always uses IPv6\&.
.br 
Option groups: FD,SOCKET,IP6,RANGE 
.br 

.IP 
.IP "\fB\f(CWOPEN:<filename>\fP\fP"
Opens <filename> rockin tha 
\f(CWopen()\fP
system call
(example)\&.
This operation fails on UNIX domain sockets\&. 
.br 
Note: This address type is rarly useful up in bidirectionizzle mode\&.
.br 
Option groups: FD,REG,NAMED,OPEN 
.br 
Useful options:
creat,
excl,
noatime,
nofollow,
append,
rdonly,
wronly,
lock,
readbytes,
ignoreeof
.br 
See also:
CREATE,
GOPEN,
UNIX\-CONNECT
.IP "\fB\f(CWOPENSSL:<host>:<port>\fP\fP"
Tries ta establish a SSL connection ta <port> [TCP
service] on  
<host> [IP address] rockin TCP/IP version 4 or 6
dependin on address justification, name resolution, or option
pf\&.
.br 
NOTE: Da server certificate is only checked fo' validitizzle against
cafile or capath,
but not fo' match wit tha server\(cq\&s name or its IP address!
.br 
Option groups: FD,SOCKET,IP4,IP6,TCP,OPENSSL,RETRY 
.br 
Useful options:
cipher,
method,
verify,
cafile,
capath,
certificate,
key,
compress,
bind,
pf,
connect\-timeout,
sourceport,
retry
.br 
See also:
OPENSSL\-LISTEN,
TCP
.IP "\fB\f(CWOPENSSL\-LISTEN:<port>\fP\fP"
Listens on tcp <port> [TCP service]\&.
Da IP version is 4 or tha one specified with
pf\&. When a
connection be accepted, dis address behaves as SSL server\&.
.br 
Note: Yo ass probably wanna use tha certificate option wit dis address\&.
.br 
NOTE: Da client certificate is only checked fo' validitizzle against
cafile or capath,
but not fo' match wit tha client\(cq\&s name or its IP address!
.br 
Option groups: FD,SOCKET,IP4,IP6,TCP,LISTEN,OPENSSL,CHILD,RANGE,RETRY 
.br 
Useful options:
pf,
cipher,
method,
verify,
cafile,
capath,
certificate,
key,
compress,
fork,
bind,
range,
tcpwrap,
su,
reuseaddr,
retry
.br 
See also:
OPENSSL,
TCP\-LISTEN
.IP "\fB\f(CWPIPE:<filename>\fP\fP"
If <filename> already exists, it is opened\&.
If it do not exist, a named pipe is pimped n' opened\&. Beginnin with
socat version 1\&.4\&.3, tha named pipe is removed when tha address is closed
(but peep option unlink\-close
.br 
Note: When a pipe is used fo' both readin n' writing, it works
as echo service\&.
.br 
Note: When a pipe is used fo' both readin n' writing, n' socat tries
to write mo' bytes than tha pipe can buffer (Linux 2\&.4: 2048 bytes), socat
might block\&. Consider rockin socat option, e\&.g\&., 
\f(CW\-b 2048\fP
.br 
Option groups: FD,NAMED,OPEN 
.br 
Useful options:
rdonly,
nonblock,
group,
user,
mode,
unlink\-early
.br 
See also: unnamed pipe
.IP "\fB\f(CWPIPE\fP\fP"
Creates a unnamed pipe n' uses it fo' readin n' writing\&. Well shiiiit, it works as an
echo, cuz every last muthafuckin thang freestyled 
to it appeares immediately as read data\&.
.br 
Note: When socat tries ta write mo' bytes than tha pipe can queue (Linux
2\&.4: 2048 bytes), socat might block\&. Consider, e\&.g\&., using
option 
\f(CW\-b 2048\fP
.br 
Option groups: FD 
.br 
See also: named pipe
.IP "\fB\f(CWPROXY:<proxy>:<hostname>:<port>\fP\fP"
Connects ta a HTTP proxy server on port 8080 rockin TCP/IP  version 4 or 6
dependin on address justification, name resolution, or option
pf, n' sendz a CONNECT
request fo' hostname:port\&. If tha proxy grants access n' succeedz to
connect ta tha target, data transfer between socat n' tha target can
start\&. Note dat tha traffic need not be HTTP but can be a arbitrary
protocol\&. 
.br 
Option groups: FD,SOCKET,IP4,IP6,TCP,HTTP,RETRY 
.br 
Useful options:
proxyport,
ignorecr,
proxyauth,
resolve,
crnl,
bind,
connect\-timeout,
mss,
sourceport,
retry 
.br 
See also: SOCKS, TCP
.IP "\fB\f(CWPTY\fP\fP"
Generates a pseudo terminal (pty) n' uses its masta side\& fo' realz. Another process
may open tha pty\(cq\&s slave side rockin it like a serial line or terminal\&.
(example)\&. If
both tha ptmx n' tha openpty mechanizzlez is available, ptmx is used
(POSIX)\&.
.br 
Option groups: FD,NAMED,PTY,TERMIOS 
.br 
Useful options:
link,
openpty,
wait\-slave,
mode,
user,
group
.br 
See also:
UNIX\-LISTEN,
PIPE,
EXEC, SYSTEM
.IP "\fB\f(CWREADLINE\fP\fP"
Uses GNU readline n' history on stdio ta allow editin n' reusin input
lines (example)\&. This requires tha GNU readline n' 
history libraries\&. Note dat stdio should be a (pseudo) terminal device,
otherwise readline do not seem ta work\&.
.br 
Option groups: FD,READLINE,TERMIOS 
.br 
Useful options:
history,
noecho
.br 
See also:
STDIO
.IP "\fB\f(CWSCTP\-CONNECT:<host>:<port>\fP\fP"
Establishes a SCTP stream connection ta tha specified <host> [IP
address] n' <port> [TCP service]
usin TCP/IP version 4 or 6 dependin on address justification, name
resolution, or option pf\&.
.br 
Option groups: FD,SOCKET,IP4,IP6,SCTP,CHILD,RETRY 
.br 
Useful options:
bind,
pf,
connect\-timeout,
tos,
mtudiscover,
sctp\-maxseg,
sctp\-nodelay,
nonblock,
sourceport,
retry,
readbytes
.br 
See also:
SCTP4\-CONNECT,
SCTP6\-CONNECT,
SCTP\-LISTEN,
TCP\-CONNECT
.IP "\fB\f(CWSCTP4\-CONNECT:<host>:<port>\fP\fP"
Like SCTP\-CONNECT yo, but only supports IPv4 protocol\&.
.br 
Option groups: FD,SOCKET,IP4,SCTP,CHILD,RETRY 
.br 
.IP "\fB\f(CWSCTP6\-CONNECT:<host>:<port>\fP\fP"
Like SCTP\-CONNECT yo, but only supports IPv6 protocol\&.
.br 
Option groups: FD,SOCKET,IP6,SCTP,CHILD,RETRY 
.br 
.IP "\fB\f(CWSCTP\-LISTEN:<port>\fP\fP"
Listens on <port> [TCP service] n' accepts a
TCP/IP connection\&. Da IP version is 4 or tha one specified with
address option pf, socat option
(\-4, \-6), or environment variable SOCAT_DEFAULT_LISTEN_IP\&.
Note dat opening
this address probably blocks until a cold-ass lil client connects\&.
.br 
Option groups: FD,SOCKET,LISTEN,CHILD,RANGE,IP4,IP6,SCTP,RETRY 
.br 
Useful options:
crnl,
fork,
bind,
range,
tcpwrap,
pf,
max\-children,
backlog,
sctp\-maxseg,
sctp\-nodelay,
su,
reuseaddr,
retry,
cool\-write
.br 
See also:
SCTP4\-LISTEN,
SCTP6\-LISTEN,
TCP\-LISTEN,
SCTP\-CONNECT
.IP "\fB\f(CWSCTP4\-LISTEN:<port>\fP\fP"
Like SCTP\-LISTEN yo, but only supports IPv4
protocol\&.
.br 
Option groups: FD,SOCKET,LISTEN,CHILD,RANGE,IP4,SCTP,RETRY 
.br 
.IP "\fB\f(CWSCTP6\-LISTEN:<port>\fP\fP"
Like SCTP\-LISTEN yo, but only supports IPv6
protocol\&.
.br 
Option groups: FD,SOCKET,LISTEN,CHILD,RANGE,IP6,SCTP,RETRY 
.br 
.IP "\fB\f(CWSOCKET\-CONNECT:<domain>:<protocol>:<remote\-address>\fP\fP"
Creates a stream socket rockin tha straight-up original gangsta n' second given socket parameters
and \f(CWSOCK_STREAM\fP (see playa socket\e(2)) n' connects ta tha remote\-address\&.
Da two socket parametas gotta be specified by int
numbers\&. Consult yo' OS documentation n' include filez ta find the
appropriate joints\&. Da remote\-address must be tha data
representation of a sockaddr structure without sa_family n' (BSD) sa_len
components\&.
.br 
Please note dat you can \- beyond tha optionz of tha specified crews \- also
use optionz of higher level protocols when you apply socat option
\-g\&.
.br 
Option groups: FD,SOCKET,CHILD,RETRY
.br 
Useful options:
bind,
setsockopt\-int,
setsockopt\-bin,
setsockopt\-string
.br 
See also:
TCP,
UDP\-CONNECT,
UNIX\-CONNECT,
SOCKET\-LISTEN,
SOCKET\-SENDTO
.IP "\fB\f(CWSOCKET\-DATAGRAM:<domain>:<type>:<protocol>:<remote\-address>\fP\fP"
Creates a thugged-out datagram socket rockin tha straight-up original gangsta three given socket parametas (see
man socket\e(2)) n' sendz outgoin data ta tha remote\-address\&. Da three
socket parametas gotta be specified by int
numbers\&. Consult yo' OS documentation n' include filez ta find the
appropriate joints\&. Da remote\-address must be tha data
representation of a sockaddr structure without sa_family n' (BSD) sa_len
components\&.
.br 
Please note dat you can \- beyond tha optionz of tha specified crews \- also
use optionz of higher level protocols when you apply socat option
\-g\&.
.br 
Option groups: FD,SOCKET,RANGE
.br 
Useful options:
bind,
range,
setsockopt\-int,
setsockopt\-bin,
setsockopt\-string
.br 
See also:
UDP\-DATAGRAM,
IP\-DATAGRAM,
SOCKET\-SENDTO,
SOCKET\-RECV,
SOCKET\-RECVFROM
.IP "\fB\f(CWSOCKET\-LISTEN:<domain>:<protocol>:<local\-address>\fP\fP"
Creates a stream socket rockin tha straight-up original gangsta n' second given socket parameters
and \f(CWSOCK_STREAM\fP (see playa socket\e(2)) n' waits fo' incomin connections
on local\-address\&. Da two socket parametas gotta be specified by
int numbers\&. Consult yo' OS documentation n' include files
to find tha appropriate joints\&. Da local\-address must be the
data representation of a sockaddr structure without
sa_family n' (BSD) sa_len components\&.
.br 
Please note dat you can \- beyond tha optionz of tha specified crews \- also
use optionz of higher level protocols when you apply socat option
\-g\&.
.br 
Option groups: FD,SOCKET,LISTEN,RANGE,CHILD,RETRY
.br 
Useful options:
setsockopt\-int,
setsockopt\-bin,
setsockopt\-string
.br 
See also:
TCP,
UDP\-CONNECT,
UNIX\-CONNECT,
SOCKET\-LISTEN,
SOCKET\-SENDTO,
SOCKET\-SENDTO
.IP "\fB\f(CWSOCKET\-RECV:<domain>:<type>:<protocol>:<local\-address>\fP\fP"
Creates a socket rockin tha three given socket parametas (see playa socket\e(2))
and bindz it ta <local\-address>\&. Receives arrivin data\&. Da three
parametas gotta be specified by int numbers\&. Consult your
OS documentation n' include filez ta find tha appropriate joints\&. The
local\-address must be tha data representation of a sockaddr
structure without sa_family n' (BSD) sa_len components\&.
.br 
Option groups: FD,SOCKET,RANGE
.br 
Useful options:
range,
setsockopt\-int,
setsockopt\-bin,
setsockopt\-string
.br 
See also:
UDP\-RECV,
IP\-RECV,
UNIX\-RECV,
SOCKET\-DATAGRAM,
SOCKET\-SENDTO,
SOCKET\-RECVFROM
.IP "\fB\f(CWSOCKET\-RECVFROM:<domain>:<type>:<protocol>:<local\-address>\fP\fP"
Creates a socket rockin tha three given socket parametas (see playa socket\e(2))
and bindz it ta <local\-address>\&. Receives arrivin data n' sendz replies
back ta tha sender\&. Da first three parametas gotta be specified as
int numbers\&. Consult yo' OS documentation n' include files
to find tha appropriate joints\&. Da local\-address must be the
data representation of a sockaddr structure without
sa_family n' (BSD) sa_len components\&.
.br 
Option groups: FD,SOCKET,CHILD,RANGE
.br 
Useful options:
fork,
range,
setsockopt\-int,
setsockopt\-bin,
setsockopt\-string
.br 
See also:
UDP\-RECVFROM,
IP\-RECVFROM,
UNIX\-RECVFROM,
SOCKET\-DATAGRAM,
SOCKET\-SENDTO,
SOCKET\-RECV
.IP "\fB\f(CWSOCKET\-SENDTO:<domain>:<type>:<protocol>:<remote\-address>\fP\fP"
Creates a socket rockin tha three given socket parametas (see man
socket\e(2))\&. Right back up in yo muthafuckin ass. Sendz outgoin data ta tha given address n' receives replies\&.
Da three parametas gotta be specified as int
numbers\&. Consult yo' OS documentation n' include filez ta find the
appropriate joints\&. Da remote\-address must be tha data
representation of a sockaddr structure without sa_family n' (BSD) sa_len
components\&.
.br 
Option groups: FD,SOCKET
.br 
Useful options:
bind,
setsockopt\-int,
setsockopt\-bin,
setsockopt\-string
.br 
See also:
UDP\-SENDTO,
IP\-SENDTO,
UNIX\-SENDTO,
SOCKET\-DATAGRAM,
SOCKET\-RECV
SOCKET\-RECVFROM
.IP "\fB\f(CWSOCKS4:<socks\-server>:<host>:<port>\fP\fP"
Connects via <socks\-server> [IP address]
to <host> [IPv4 address]
on <port> [TCP service],
usin socks version 4 protocol over IP version 4 or 6 dependin on address justification, name resolution, or option
pf (example)\&.
.br 
Option groups: FD,SOCKET,IP4,IP6,TCP,SOCKS4,RETRY 
.br 
Useful options:
socksuser,
socksport,
sourceport,
pf,
retry
.br 
See also:
SOCKS4A,
PROXY,
TCP
.IP "\fB\f(CWSOCKS4A:<socks\-server>:<host>:<port>\fP\fP"
like SOCKS4 yo, but uses socks protocol version 4a, thus
leavin host name resolution ta tha socks server\&.
.br 
Option groups: FD,SOCKET,IP4,IP6,TCP,SOCKS4,RETRY 
.br 
.IP "\fB\f(CWSTDERR\fP\fP"
Uses file descriptor 2\&.
.br 
Option groups: FD (TERMIOS,REG,SOCKET) 
.br 
See also: FD
.IP "\fB\f(CWSTDIN\fP\fP"
Uses file descriptor 0\&.
.br 
Option groups: FD (TERMIOS,REG,SOCKET) 
.br 
Useful options:
readbytes
.br 
See also: FD
.IP "\fB\f(CWSTDIO\fP\fP"
Uses file descriptor 0 fo' reading, n' 1 fo' writing\&.
.br 
Option groups: FD (TERMIOS,REG,SOCKET) 
.br 
Useful options:
readbytes
.br 
See also: FD
.IP "\fB\f(CWSTDOUT\fP\fP"
Uses file descriptor 1\&.
.br 
Option groups: FD (TERMIOS,REG,SOCKET) 
.br 
See also: FD
.IP "\fB\f(CWSYSTEM:<shell\-command>\fP\fP"
Forks a sub process dat establishes communication wit its parent process
and invokes tha specified program wit 
\f(CWsystem()\fP
\&. Please note that
<shell\-command> [string] must 
not contain \(cq\&,\(cq\& or \(dq\&!!\(dq\&, n' dat shell meta charactas may gotta be
protected\&.
Afta successful program start, \fBsocat\fP writes data ta stdin of tha 
process n' readz from its stdout\&.
.br 
Option groups: FD,SOCKET,EXEC,FORK,TERMIOS 
.br 
Useful options:
path,
fdin,
fdout,
chroot,
su,
su\-d,
nofork,
pty,
stderr,
ctty,
setsid,
pipes,
sigint,
sigquit
.br 
See also: EXEC
.IP "\fB\f(CWTCP:<host>:<port>\fP\fP"
Connects ta <port> [TCP service] on
<host> [IP address] rockin TCP/IP version 4 or 6
dependin on address justification, name resolution, or option
pf\&.
.br 
Option groups: FD,SOCKET,IP4,IP6,TCP,RETRY 
.br 
Useful options:
crnl,
bind,
pf,
connect\-timeout,
tos,
mtudiscover,
mss,
nodelay,
nonblock,
sourceport,
retry,
readbytes
.br 
See also:
TCP4,
TCP6,
TCP\-LISTEN,
UDP,
SCTP\-CONNECT,
UNIX\-CONNECT
.IP "\fB\f(CWTCP4:<host>:<port>\fP\fP"
Like TCP yo, but only supports IPv4 protocol (example)\&.
.br 
Option groups: FD,SOCKET,IP4,TCP,RETRY 
.br 
.IP "\fB\f(CWTCP6:<host>:<port>\fP\fP"
Like TCP yo, but only supports IPv6 protocol\&.
.br 
Option groups: FD,SOCKET,IP6,TCP,RETRY 
.br 
.IP "\fB\f(CWTCP\-LISTEN:<port>\fP\fP"
Listens on <port> [TCP service] n' accepts a
TCP/IP connection\&. Da IP version is 4 or tha one specified with
address option pf, socat option
(\-4, \-6), or environment variable SOCAT_DEFAULT_LISTEN_IP\&.
Note dat opening
this address probably blocks until a cold-ass lil client connects\&.
.br 
Option groups: FD,SOCKET,LISTEN,CHILD,RANGE,IP4,IP6,TCP,RETRY 
.br 
Useful options:
crnl,
fork,
bind,
range,
tcpwrap,
pf,
max\-children,
backlog,
mss,
su,
reuseaddr,
retry,
cool\-write
.br 
See also:
TCP4\-LISTEN,
TCP6\-LISTEN,
UDP\-LISTEN,
SCTP\-LISTEN,
UNIX\-LISTEN,
OPENSSL\-LISTEN,
TCP\-CONNECT
.IP "\fB\f(CWTCP4\-LISTEN:<port>\fP\fP"
Like TCP\-LISTEN yo, but only supports IPv4
protocol (example)\&.
.br 
Option groups: FD,SOCKET,LISTEN,CHILD,RANGE,IP4,TCP,RETRY 
.br 
.IP "\fB\f(CWTCP6\-LISTEN:<port>\fP\fP"
Like TCP\-LISTEN yo, but only supports IPv6
protocol\&.
.br 
Additionizzle useful option:
ipv6only
.br 
Option groups: FD,SOCKET,LISTEN,CHILD,RANGE,IP6,TCP,RETRY 
.br 
.IP "\fB\f(CWTUN[:<if\-addr>/<bits>]\fP\fP"
Creates a Linux TUN/TAP thang n' optionally assignes it tha address and
netmask given by tha parameters\&. Da resultin network intercourse be almost
ready fo' use by other processes; socat serves its \(dq\&wire side\(dq\&\&. This address
requires read n' write access ta tha tunnel clonin device, usually
\f(CW/dev/net/tun\fP
, as well as permission ta set some \f(CWioctl()s\fP\&.
\fBOption iff\-up is required ta immediately activate tha intercourse!\fP
.br 
Option groups: FD,NAMED,OPEN,TUN 
.br 
Useful options:
iff\-up,
tun\-device,
tun\-name,
tun\-type,
iff\-no\-pi 
.br 
See also:
ip\-recv
.IP "\fB\f(CWUDP:<host>:<port>\fP\fP"
Connects ta <port> [UDP service] on
<host> [IP address] rockin UDP/IP version 4 or 6
dependin on address justification, name resolution, or option
pf\&.
.br 
Please note that,
due ta UDP protocol properties, no real connection is established; data has
to be busted fo' `connecting\(cq\& ta tha server, n' no end\-of\-file condizzle can
be transported\&.
.br 
Option groups: FD,SOCKET,IP4,IP6 
.br 
Useful options:
ttl,
tos,
bind,
sourceport,
pf
.br 
See also:
UDP4,
UDP6,
UDP\-LISTEN,
TCP,
IP
.IP "\fB\f(CWUDP4:<host>:<port>\fP\fP"
Like UDP yo, but only supports IPv4 protocol\&.
.br 
Option groups: FD,SOCKET,IP4 
.br 
.IP "\fB\f(CWUDP6:<host>:<port>\fP\fP"
Like UDP yo, but only supports IPv6 protocol\&.
.br 
Option groups: FD,SOCKET,IP6 
.br 
.IP "\fB\f(CWUDP\-DATAGRAM:<address>:<port>\fP\fP"
Sendz outgoin data ta tha specified address which may up in particular be a
broadcast or multicast address\&. Packets arrivin on tha local socket are
checked fo' tha erect remote port n' if they source addresses match
RANGE or TCPWRAP
options\&. This address type can fo' example be used fo' implementing
symmetric or asymmetric broadcast or multicast communications\&.
.br 
Option groups: FD,SOCKET,IP4,IP6,RANGE 
.br 
Useful options:
bind,
range,
tcpwrap,
broadcast,
ip\-multicast\-loop,
ip\-multicast\-ttl,
ip\-multicast\-if,
ip\-add\-membership,
ttl,
tos,
sourceport,
pf
.br 
See also:
UDP4\-DATAGRAM,
UDP6\-DATAGRAM,
UDP\-SENDTO,
UDP\-RECVFROM,
UDP\-RECV,
UDP\-CONNECT,
UDP\-LISTEN,
IP\-DATAGRAM
.IP "\fB\f(CWUDP4\-DATAGRAM:<address>:<port>\fP\fP"
Like UDP\-DATAGRAM yo, but only supports IPv4
protocol (example1,
example2)\&.
.br 
Option groups: FD,SOCKET,IP4, RANGE
.IP "\fB\f(CWUDP6\-DATAGRAM:<address>:<port>\fP\fP"
Like UDP\-DATAGRAM yo, but only supports IPv6
protocol\&.
.br 
Option groups: FD,SOCKET,IP6,RANGE
.IP "\fB\f(CWUDP\-LISTEN:<port>\fP\fP"
Waits fo' a UDP/IP packet arrivin on <port>
[UDP service] n' `connects\(cq\& back ta sender\&.
Da accepted IP version is 4 or tha one specified wit option
pf\&.
Please note that,
due ta UDP protocol properties, no real connection is established; data has
to arrive from tha peer first, n' no end\-of\-file condizzle can be
transported\&. Note dat openin  
this address probably blocks until a cold-ass lil client connects\&.
.br 
Option groups: FD,SOCKET,LISTEN,CHILD,RANGE,IP4,IP6 
.br 
Useful options:
fork,
bind,
range,
pf 
.br 
See also:
UDP,
UDP4\-LISTEN,
UDP6\-LISTEN,
TCP\-LISTEN
.IP "\fB\f(CWUDP4\-LISTEN:<port>\fP\fP"
Like UDP\-LISTEN yo, but only support IPv4
protocol\&.
.br 
Option groups: FD,SOCKET,LISTEN,CHILD,RANGE,IP4 
.br 
.IP "\fB\f(CWUDP6\-LISTEN:<port>\fP\fP"
Like UDP\-LISTEN yo, but only support IPv6
protocol\&.
.br 
Option groups: FD,SOCKET,LISTEN,CHILD,RANGE,IP6 
.br 
.IP "\fB\f(CWUDP\-SENDTO:<host>:<port>\fP\fP"
Communicates wit tha specified peer socket, defined by <port> [UDP
service] on
<host> [IP address], rockin UDP/IP version 4 or 6
dependin on address justification, name resolution, or option
pf\&. Well shiiiit, it sendz packets ta n' receives packets
from dat peer socket only\&.  
This address effectively implements a thugged-out datagram client\&.
It works well wit socat UDP\-RECVFROM n' UDP\-RECV address peers\&.
.br 
Option groups: FD,SOCKET,IP4,IP6 
.br 
Useful options:
ttl,
tos,
bind,
sourceport,
pf
.br 
See also:
UDP4\-SENDTO,
UDP6\-SENDTO,
UDP\-RECVFROM,
UDP\-RECV,
UDP\-CONNECT,
UDP\-LISTEN,
IP\-SENDTO
.IP "\fB\f(CWUDP4\-SENDTO:<host>:<port>\fP\fP"
Like UDP\-SENDTO yo, but only supports IPv4
protocol\&.
.br 
Option groups: FD,SOCKET,IP4
.IP "\fB\f(CWUDP6\-SENDTO:<host>:<port>\fP\fP"
Like UDP\-SENDTO yo, but only supports IPv6
protocol\&.
.br 
Option groups: FD,SOCKET,IP6
.IP 
.IP "\fB\f(CWUDP\-RECVFROM:<port>\fP\fP"
Creates a UDP socket on <port> [UDP service] using
UDP/IP version 4 or 6 
dependin on option pf\&.
It receives one packet from a unspecified peer n' may bust one or more
answer packets ta dat peer\&. This mode is particularly useful wit fork
option 
where each arrivin packet \- from arbitrary peers \- is handled by its own sub
process\&. This allows a funky-ass behaviour similar ta typical UDP based servers like ntpd
or named\&. This address works well wit socat UDP\-SENDTO address peers\&.
.br 
Option groups: FD,SOCKET,IP4,IP6,CHILD,RANGE 
.br 
Useful options:
fork,
ttl,
tos,
bind,
sourceport,
pf
.br 
See also:
UDP4\-RECVFROM,
UDP6\-RECVFROM,
UDP\-SENDTO,
UDP\-RECV,
UDP\-CONNECT,
UDP\-LISTEN,
IP\-RECVFROM,
UNIX\-RECVFROM
.IP "\fB\f(CWUDP4\-RECVFROM:<port>\fP\fP"
Like UDP\-RECVFROM yo, but only supports IPv4 protocol\&.
.br 
Option groups: FD,SOCKET,IP4,CHILD,RANGE
.IP "\fB\f(CWUDP6\-RECVFROM:<port>\fP\fP"
Like UDP\-RECVFROM yo, but only supports IPv6 protocol\&.
.br 
Option groups: FD,SOCKET,IP6,CHILD,RANGE
.IP 
.IP "\fB\f(CWUDP\-RECV:<port>\fP\fP"
Creates a UDP socket on <port> [UDP service] rockin UDP/IP version 4 or 6
dependin on option pf\&.
It receives packets from multiple unspecified peers n' merges tha data\&.
No replies is possible\&. Well shiiiit, it works well with, e\&.g\&., socat UDP\-SENDTO address peers; it behaves similar ta a syslog server\&.
.br 
Option groups: FD,SOCKET,IP4,IP6,RANGE 
.br 
Useful options:
fork,
pf,
bind,
sourceport,
ttl,
tos
.br 
See also:
UDP4\-RECV,
UDP6\-RECV,
UDP\-SENDTO,
UDP\-RECVFROM,
UDP\-CONNECT,
UDP\-LISTEN,
IP\-RECV,
UNIX\-RECV
.IP "\fB\f(CWUDP4\-RECV:<port>\fP\fP"
Like UDP\-RECV yo, but only supports IPv4 protocol\&.
.br 
Option groups: FD,SOCKET,IP4,RANGE
.IP "\fB\f(CWUDP6\-RECV:<port>\fP\fP"
Like UDP\-RECV yo, but only supports IPv6 protocol\&.
.br 
Option groups: FD,SOCKET,IP6,RANGE
.IP 
.IP "\fB\f(CWUNIX\-CONNECT:<filename>\fP\fP"
Connects ta <filename> assumin it aint nuthin but a UNIX domain
socket\&.
If <filename> do not exist, dis be a error;
if <filename> aint a UNIX domain socket, dis be a error;
if <filename> be a UNIX domain socket yo, but no process is listening, dis is
an error\&.
.br 
Option groups: FD,SOCKET,NAMED,RETRY,UNIX 
.br 
)
Useful options:
bind
.br 
See also:
UNIX\-LISTEN,
UNIX\-SENDTO,
TCP
.IP 
.IP "\fB\f(CWUNIX\-LISTEN:<filename>\fP\fP"
Listens on <filename> rockin a UNIX domain stream
socket n' accepts a cold-ass lil connection\&.
If <filename> exists n' aint a socket, dis be a error\&.
If <filename> exists n' be a UNIX domain socket, bindin ta tha address
fails (use option unlink\-early!)\&.
Note dat openin dis address probably blocks until a cold-ass lil client connects\&.
Beginnin wit socat version 1\&.4\&.3, tha file system entry is removed when
this address is closed (but peep option unlink\-close) (example)\&.
.br 
Option groups: FD,SOCKET,NAMED,LISTEN,CHILD,RETRY,UNIX 
.br 
Useful options:
fork,
umask,
mode,
user,
group,
unlink\-early
.br 
See also:
UNIX\-CONNECT,
UNIX\-RECVFROM,
UNIX\-RECV,
TCP\-LISTEN
.IP 
.IP "\fB\f(CWUNIX\-SENDTO:<filename>\fP\fP"
Communicates wit tha specified peer socket, defined by [<filename>] assumin it aint nuthin but a UNIX domain datagram socket\&.
It sendz packets ta n' receives packets from dat peer socket only\&.
Please note dat it might be neccessary ta bind the
local socket ta a address (e\&.g\&. \f(CW/tmp/sock1\fP, which must not exist
before)\&.
This address type works well wit socat UNIX\-RECVFROM n' UNIX\-RECV address
peers\&.
.br 
Option groups: FD,SOCKET,NAMED,UNIX
.br 
Useful options:
bind
.br 
See also:
UNIX\-RECVFROM,
UNIX\-RECV,
UNIX\-CONNECT,
UDP\-SENDTO,
IP\-SENDTO
.IP 
.IP "\fB\f(CWUNIX\-RECVFROM:<filename>\fP\fP"
Creates a UNIX domain datagram socket [<filename>]\&.
Receives one packet n' may bust one or mo' answer packets ta dat peer\&.
This mode is particularly useful wit fork option where each arrivin packet \- from arbitrary peers \- is handled by its own sub process\&.
This address works well wit socat UNIX\-SENDTO address peers\&.
.br 
Option groups: FD,SOCKET,NAMED,CHILD,UNIX 
.br 
Useful options:
fork
.br 
See also:
UNIX\-SENDTO,
UNIX\-RECV,
UNIX\-LISTEN,
UDP\-RECVFROM,
IP\-RECVFROM
.IP 
.IP "\fB\f(CWUNIX\-RECV:<filename>\fP\fP"
Creates a UNIX domain datagram socket [<filename>]\&.
Receives packets from multiple unspecified peers n' merges tha data\&.
No replies is possible\&. Well shiiiit, it can be, e\&.g\&., addressed by socat UNIX\-SENDTO address peers\&.
It behaves similar ta a syslog server\&.
Option groups: FD,SOCKET,NAMED,UNIX 
.br 
See also:
UNIX\-SENDTO,
UNIX\-RECVFROM,
UNIX\-LISTEN,
UDP\-RECV,
IP\-RECV
.IP 
.IP "\fB\f(CWUNIX\-CLIENT:<filename>\fP\fP"
Communicates wit tha specified peer socket, defined by
[<filename>] assumin it aint nuthin but a UNIX domain socket\&.
It first tries ta connect and, if dat fails, assumes it aint nuthin but a thugged-out datagram
socket, thus supportin both types\&.
.br 
Option groups: FD,SOCKET,NAMED,UNIX 
.br 
Useful options:
bind
.br 
See also:
UNIX\-CONNECT,
UNIX\-SENDTO,
GOPEN
.IP 
.IP "\fB\f(CWABSTRACT\-CONNECT:<string>\fP\fP"
.IP "\fB\f(CWABSTRACT\-LISTEN:<string>\fP\fP"
.IP "\fB\f(CWABSTRACT\-SENDTO:<string>\fP\fP"
.IP "\fB\f(CWABSTRACT\-RECVFROM:<string>\fP\fP"
.IP "\fB\f(CWABSTRACT\-RECV:<string>\fP\fP"
.IP "\fB\f(CWABSTRACT\-CLIENT:<string>\fP\fP"
Da ABSTRACT addresses is almost identical ta tha related UNIX addresses
except dat they do not address file system based sockets but a alternate
UNIX domain address space\&. To archieve dis tha socket address strings are
prefixed wit \(dq\&\e0\(dq\& internally\&. This feature be available (only?) on Linux\&.
Option crews is tha same as wit tha related UNIX addresses, except that
the ABSTRACT addresses is not gangmember of tha NAMED group\&.

.PP 
.SH "ADDRESS OPTIONS"

.PP 
Address options can be applied ta address justifications ta influence the
process of openin tha addresses n' tha 
propertizzlez of tha resultin data channels\&. 
.PP 
For technical reasons not every last muthafuckin option can be
applied ta every last muthafuckin address type; e\&.g\&., applyin a socket option ta a regular file
will fail\&. To catch most useless combinations as early as up in tha open phase,
the concept of \fIoption groups\fP was introduced\&. Each option belongs ta one
or mo' option groups\&. Options can be used only wit address types dat support
at least one of they option crews (but peep option \-g)\&.
.PP 
Address options have data types dat they joints must conform to\&. 
Every address option consistz of just a keyword or a keyword followed by
\(dq\&=value\(dq\&, where value must conform ta tha options type\&.
Some address options manipulate parametaz of system calls;
e\&.g\&., option sync sets tha 
\f(CWO_SYNC\fP
flag wit tha 
\f(CWopen()\fP
call\&. 
Other options cause a system or library call; e\&.g\&., wit option `ttl=value\(cq\&
the 
\f(CWsetsockopt(fd, SOL_IP, IP_TTL, value, sizeof(int))\fP
call be applied\&.
Other
options set internal \fBsocat\fP variablez dat is used durin data transfer;
e\&.g\&., `crnl\(cq\& causes explicit characta conversions\&. 
A few options have mo' complex implementations; e\&.g\&., su\-d
(substuser\-delayed) inquires some user n' crew infos, stores them, and
applies dem lata afta a possible 
\f(CWchroot()\fP
call\&.
.PP 
If multiple options is given ta a address, they sequence up in tha address justification has (almost) no
effect on tha sequence of they execution/application\&. Instead, \fBsocat\fP has
built up in a \fIoption phase\fP model dat tries ta brang tha options up in a useful
order\&. Right back up in yo muthafuckin ass. Some options exist up in different forms (e\&.g\&., 
unlink, unlink\-early, unlink\-late) ta control tha time of they execution\&.
.PP 
If tha same option is specified mo' than once within one address
specification, wit equal or different joints, tha effect dependz on tha kind of option\&. Options
resultin up in function calls like 
\f(CWsetsockopt()\fP
cause multiple
invocations\&. With options dat set parametas fo' a required call like
\f(CWopen()\fP
or set internal flags, tha value of tha last option occurrence is effective\&.
.PP 
Da existence or semantics of nuff options is system dependent\&. \fBSocat\fP
usually do NOT try ta emulate missin libc or kernel features, it just
provides a 
interface ta tha underlyin system\&. Right back up in yo muthafuckin ass. So, if a operatin system lacks a gangbangin' feature,
the related option is simply not available on dis platform\&.
.PP 
Da followin paragraphs introduce just tha mo' common address options\&. For
a mo' comprehensive reference n' ta find shiznit bout canonical option
names, alias names, option phases, n' platforms peep file \fBxio\&.help\fP\&. 
.br 
.br 

.PP 
.br 

.PP 
\fI\fBFD option group\fP\fP
.PP 
This option crew gotz nuff options dat is applied ta a UN*X
style file descriptor, no matta how tha fuck dat shiznit was generated\&.
Because all current \fBsocat\fP address types is file descriptor based, these
options may be applied ta any address\&. 
.br 
Note: Some of these options is also gangmember of another option group, that
provides a other, non\-fd based mechanism\&.
For these options, it dependz on tha actual address type n' its option crews 
which mechanizzle is used\&. Da second, non\-fd based mechanizzle is prioritized\&.
.IP "\fB\f(CWcloexec=<bool>\fP\fP"
Sets tha 
\f(CWFD_CLOEXEC\fP
flag wit tha 
\f(CWfcntl()\fP
system call ta value
<bool>\&. If set,
the file descriptor is closed on 
\f(CWexec()\fP
family function calls\&. \fBSocat\fP
internally handlez 
this flag fo' tha fdz it controls, so up in most cases there is ghon be no need to
apply dis option\&. 
.IP "\fB\f(CWsetlk\fP\fP"
Tries ta set a gangbangin' finger-lickin' discretionary write lock ta tha whole file rockin tha 
\f(CWfcntl(fd,
F_SETLK, \&.\&.\&.)\fP
system call\&. If tha file be already locked, dis call thangs up in dis biatch
in a error\&. 
On Linux, when tha file permissions fo' crew is \(dq\&S\(dq\& (g\-x,g+s), n' the
file system is locally mounted wit tha \(dq\&mand\(dq\& option, tha lock is
mandatory, i\&.e\&. prevents other processes from openin tha file\&.
.IP "\fB\f(CWsetlkw\fP\fP"
Tries ta set a gangbangin' finger-lickin' discretionary waitin write lock ta tha whole file rockin the
\f(CWfcntl(fd, F_SETLKW, \&.\&.\&.)\fP
system call\&. If tha file be already locked,
this call blocks\&. 
See option setlk fo' shiznit bout makin this
lock mandatory\&. 
.IP "\fB\f(CWsetlk\-rd\fP\fP"
Tries ta set a gangbangin' finger-lickin' discretionary read lock ta tha whole file rockin tha 
\f(CWfcntl(fd,
F_SETLK, \&.\&.\&.)\fP
system call\&. If tha file be already write locked, dis call
results up in a error\&. 
See option setlk fo' shiznit bout makin this
lock mandatory\&. 
.IP "\fB\f(CWsetlkw\-rd\fP\fP"
Tries ta set a gangbangin' finger-lickin' discretionary waitin read lock ta tha whole file rockin the
\f(CWfcntl(fd, F_SETLKW, \&.\&.\&.)\fP
system call\&. If tha file be already write
locked, dis call blocks\&. 
See option setlk fo' shiznit bout makin this
lock mandatory\&. 
.IP "\fB\f(CWflock\-ex\fP\fP"
Tries ta set a funky-ass blockin exclusive advisory lock ta tha file rockin the
\f(CWflock(fd, LOCK_EX)\fP
system call\&. \fBSocat\fP hangs up in dis call if tha file
is locked by another process\&.
.IP "\fB\f(CWflock\-ex\-nb\fP\fP"
Tries ta set a nonblockin exclusive advisory lock ta tha file rockin the
\f(CWflock(fd, LOCK_EX|LOCK_NB)\fP
system call\&. If tha file be already locked,
this option thangs up in dis biatch up in a error\&.
.IP "\fB\f(CWflock\-sh\fP\fP"
Tries ta set a funky-ass blockin shared advisory lock ta tha file rockin the
\f(CWflock(fd, LOCK_SH)\fP
system call\&. \fBSocat\fP hangs up in dis call if tha file
is locked by another process\&.
.IP "\fB\f(CWflock\-sh\-nb\fP\fP"
Tries ta set a nonblockin shared advisory lock ta tha file rockin the
\f(CWflock(fd, LOCK_SH|LOCK_NB)\fP
system call\&. If tha file be already locked,
this option thangs up in dis biatch up in a error\&.
.IP "\fB\f(CWlock\fP\fP"
Sets a funky-ass blockin lock on tha file\&. Uses tha setlk or flock mechanism
dependin on availabilitizzle on tha particular platform\&. If both is available,
the POSIX variant (setlkw) is used\&.
.IP "\fB\f(CWuser=<user>\fP\fP"
Sets tha <user> (baller) of tha stream\&.
If tha address is gangmember of tha NAMED option group,
\fBsocat\fP uses tha 
\f(CWchown()\fP
system call afta openin the
file or bindin ta tha UNIX domain socket (race condition!)\&.
Without filesystem entry, \fBsocat\fP sets tha user of tha stream 
usin tha 
\f(CWfchown()\fP
system call\&.
These calls might require root privilege\&. 
.IP "\fB\f(CWuser\-late=<user>\fP\fP"
Sets tha balla of tha fd ta <user> wit tha 
\f(CWfchown()\fP
system call afta openin 
or connectin tha channel\&.
This is useful only on file system entries\&.
.IP "\fB\f(CWgroup=<group>\fP\fP"
Sets tha <group> of tha stream\&.
If tha address is gangmember of tha NAMED option group,
\fBsocat\fP uses tha 
\f(CWchown()\fP
system call afta openin the
file or bindin ta tha UNIX domain socket (race condition!)\&.
Without filesystem entry, \fBsocat\fP sets tha crew of tha stream 
with tha 
\f(CWfchown()\fP
system call\&. 
These calls might require crew membershizzle or root privilege\&. 
.IP "\fB\f(CWgroup\-late=<group>\fP\fP"
Sets tha crew of tha fd ta <group> wit the
\f(CWfchown()\fP
system call afta openin 
or connectin tha channel\&.
This is useful only on file system entries\&. 
.IP "\fB\f(CWmode=<mode>\fP\fP"
Sets tha <mode> [mode_t] (permissions) of tha stream\&.
If tha address is gangmember of tha NAMED option crew and
uses tha 
\f(CWopen()\fP
or 
\f(CWcreat()\fP
call, tha mode be applied wit these\&.
If tha address is gangmember of tha NAMED option crew without rockin these
system calls, \fBsocat\fP uses tha 
\f(CWchmod()\fP
system call afta openin the
filesystem entry or bindin ta tha UNIX domain socket (race condition!)\&.
Otherwise, \fBsocat\fP sets tha mode of tha stream
usin 
\f(CWfchmod()\fP
\&. 
These calls might require ballershizzle or root privilege\&.
.IP "\fB\f(CWperm\-late=<mode>\fP\fP"
Sets tha permissionz of tha fd ta value <mode>
[mode_t] rockin tha 
\f(CWfchmod()\fP
system call after
openin or connectin tha channel\&.
This is useful only on file system entries\&. 
.IP "\fB\f(CWappend=<bool>\fP\fP"
Always writes data ta tha actual end of file\&.
If tha address is gangmember of tha OPEN option group, 
\fBsocat\fP uses tha 
\f(CWO_APPEND\fP
flag wit tha 
\f(CWopen()\fP
system call
(example)\&.
Otherwise, \fBsocat\fP applies tha 
\f(CWfcntl(fd, F_SETFL, O_APPEND)\fP
call\&.
.IP "\fB\f(CWnonblock=<bool>\fP\fP"
Tries ta open or use file up in nonblockin mode\&. Its only effects is dat the
\f(CWconnect()\fP
call of TCP addresses do not block, n' dat openin a
named pipe fo' readin do not block\&.
If tha address is gangmember of tha OPEN option group,
\fBsocat\fP uses tha 
\f(CWO_NONBLOCK\fP
flag wit tha 
\f(CWopen()\fP
system call\&.
Otherwise, \fBsocat\fP applies tha 
\f(CWfcntl(fd, F_SETFL, O_NONBLOCK)\fP
call\&.
.IP "\fB\f(CWbinary\fP\fP"
Opens tha file up in binary mode ta avoid implicit line terminator
conversions (Cygwin)\&.
.IP "\fB\f(CWtext\fP\fP"
Opens tha file up in text mode ta force implicit line terminator conversions
(Cygwin)\&.
.IP "\fB\f(CWnoinherit\fP\fP"
Do not keep dis file open up in a spawned process (Cygwin)\&.
.IP "\fB\f(CWcool\-write\fP\fP"
Takes it easy as fuck  when write fails wit EPIPE or ECONNRESET n' logs tha message
with \fInotice\fP level instead of \fIerror\fP\&.
This prevents tha log file from bein filled wit useless error lyrics
when socat is used as a high volume server or proxy where clients often
abort tha connection\&.
.br 
This option is experimental\&.
.IP "\fB\f(CWend\-close\fP\fP"
Changes tha (address dependent) method of endin a cold-ass lil connection ta just close
the file descriptors\&. This is useful when tha connection is ta be reused by
or shared wit other processes (example)\&.
.br 
Normally, socket connections is ghon be ended wit \f(CWshutdown(2)\fP which
terminates tha socket even if it is shared by multiple processes\&. 
\f(CWclose(2)\fP \(dq\&unlinks\(dq\& tha socket from tha process but keeps it actizzle as
long as there be still links from other processes\&.
.br 
Similarly, when a address of type EXEC or SYSTEM is ended, socat usually
will explicitely bust a cap up in tha sub process\&. With dis option, it will just close
the file descriptors\&.
.IP "\fB\f(CWshut\-none\fP\fP"
Changes tha (address dependent) method of shuttin down tha write part of a
connection ta not do anything\&.
.IP "\fB\f(CWshut\-down\fP\fP"
Changes tha (address dependent) method of shuttin down tha write part of a
connection ta \f(CWshutdown\e(fd, SHUT_WR)\fP\&. Is only useful wit sockets\&.
.IP "\fB\f(CWshut\-close\fP\fP"
Changes tha (address dependent) method of shuttin down tha write part of a
connection ta \f(CWclose\e(fd)\fP\&.
.IP "\fB\f(CWshut\-null\fP\fP"
When one address indicates EOF, \fBsocat\fP will bust a zero sized packet ta the
write channel of tha other address ta transfer tha EOF condition\&. This is
useful wit UDP n' other datagram protocols\& yo. Has been tested against
netcat n' socat wit option null\-eof\&.
.IP "\fB\f(CWnull\-eof\fP\fP"
Normally \fBsocat\fP will ignore empty (zero size payload) packets arrivin on
datagram sockets, so it survives port scans\&. With dis option \fBsocat\fP
interprets empty datagram packets as EOF indicator (see
shut\-null)\&.
.IP "\fB\f(CWioctl\-void=<request>\fP\fP"
Calls \f(CWioctl()\fP wit tha request value as second argument n' NULL as
third argument\&. This option allows ta utilize ioctls dat is not
explicitely implemented up in socat\&.
.IP "\fB\f(CWioctl\-int=<request>:<value>\fP\fP"
Calls \f(CWioctl()\fP wit tha request value as second argument n' tha integer
value as third argument\&.
.IP "\fB\f(CWioctl\-intp=<request>:<value>\fP\fP"
Calls \f(CWioctl()\fP wit tha request value as second argument n' a pointa to
the integer value as third argument\&.
.IP "\fB\f(CWioctl\-bin=<request>:<value>\fP\fP"
Calls \f(CWioctl()\fP wit tha request value as second argument n' a pointa to
the given data value as third argument\&. This data must be specified in
<dalan> form\&.
.IP "\fB\f(CWioctl\-string=<request>:<value>\fP\fP"
Calls \f(CWioctl()\fP wit tha request value as second argument n' a pointa to
the given strang as third argument\&.
<dalan> form\&.

.PP 
.br 

.PP 
\fI\fBNAMED option group\fP\fP
.PP 
These options work on file system entries\&.
.br 
See also options user, group, and
mode\&.
.PP 
.IP "\fB\f(CWuser\-early=<user>\fP\fP"
Changes tha <user> (baller) of tha file system entry before
accessin it, rockin tha 
\f(CWchown()\fP
system call\&. This call might require root privilege\&.
.IP "\fB\f(CWgroup\-early=<group>\fP\fP"
Changes tha <group> of tha file system entry before
accessin it, rockin tha 
\f(CWchown()\fP
system call\&. This call might require crew membershizzle or root
privilege\&. 
.IP "\fB\f(CWperm\-early=<mode>\fP\fP"
Changes tha <mode> [mode_t] of tha file system entry
before accessin it, rockin tha 
\f(CWchmod()\fP
system call\&. This call might require ballershizzle or root
privilege\&. 
.IP "\fB\f(CWumask=<mode>\fP\fP"
Sets tha umask of tha process ta <mode> [mode_t] before
accessin tha file system entry (useful 
with UNIX domain sockets!)\&. This call might affect all further operations
of tha \fBsocat\fP process muthafucka!  
.IP "\fB\f(CWunlink\-early\fP\fP"
Unlinks (removes) tha file before openin it n' even before applying
user\-early etc\&. 
.IP "\fB\f(CWunlink\fP\fP"
Unlinks (removes) tha file before accessin it yo, but afta user\-early etc\&.
.IP "\fB\f(CWunlink\-late\fP\fP"
Unlinks (removes) tha file afta openin it ta make it inaccessible for
other processes afta a gangbangin' finger-lickin' dirty-ass short race condition\&. 
.IP "\fB\f(CWunlink\-close\fP\fP"
Removes tha addresses file system entry when closin tha address\&.
For named pipes,
listenin unix domain sockets,
and tha symbolic linkz of pty addresses,
the default is 1; fo' pimped files,
opened files,
generic opened files, and
client unix domain sockets tha default is 0\&.

.PP 
.br 

.PP 
\fI\fBOPEN option group\fP\fP
.PP 
Da OPEN crew options allow ta set flags wit tha 
\f(CWopen()\fP
system call\&. 
E\&.g\&., option `creat\(cq\& sets tha 
\f(CWO_CREAT\fP
flag\&.
.br 
See also options append and
nonblock\&.
.IP "\fB\f(CWcreat=<bool>\fP\fP"
Creates tha file if it do not exist (example)\&.
.IP "\fB\f(CWdsync=<bool>\fP\fP"
Blocks 
\f(CWwrite()\fP
calls until metainfo is physically freestyled ta media\&.
.IP "\fB\f(CWexcl=<bool>\fP\fP"
With option creat, if file exists dis be a error\&.
.IP "\fB\f(CWlargefile=<bool>\fP\fP"
On 32 bit systems, allows a gangbangin' file larger than 2^31 bytes\&.
.IP "\fB\f(CWnoatime\fP\fP"
Sets tha O_NOATIME options, so readz do not chizzle tha access timestamp\&.
.IP "\fB\f(CWnoctty=<bool>\fP\fP"
Do not make dis file tha controllin terminal\&.
.IP "\fB\f(CWnofollow=<bool>\fP\fP"
Do not follow symbolic links\&.
.IP "\fB\f(CWnshare=<bool>\fP\fP"
Do not allow ta share dis file wit other processes\&.
.IP "\fB\f(CWrshare=<bool>\fP\fP"
Do not allow other processes ta open dis file fo' writing\&.
.IP "\fB\f(CWrsync=<bool>\fP\fP"
Blocks 
\f(CWwrite()\fP
until metainfo is physically freestyled ta media\&.
.IP "\fB\f(CWsync=<bool>\fP\fP"
Blocks 
\f(CWwrite()\fP
until data is physically freestyled ta media\&.
.IP "\fB\f(CWrdonly=<bool>\fP\fP"
Opens tha file fo' readin only\&.
.IP "\fB\f(CWwronly=<bool>\fP\fP"
Opens tha file fo' freestylin only\&.
.IP "\fB\f(CWtrunc\fP\fP"
Truncates tha file ta size 0 durin openin it\&.

.PP 
.br 

.PP 
\fI\fBREG n' BLK option group\fP\fP
.PP 
These options is probably applied ta a UN*X file descriptor yo, but their
semantics make sense only on a gangbangin' file supportin random access\&.
.IP "\fB\f(CWseek=<offset>\fP\fP"
Applies tha 
\f(CWlseek(fd, <offset>, SEEK_SET)\fP
(or 
\f(CWlseek64\fP
) system
call, thus positionin tha file pointa straight-up ta <offset>
[off_t or off64_t]\&. Please note dat a
missin value defaults ta 1, not 0\&.
.IP "\fB\f(CWseek\-cur=<offset>\fP\fP"
Applies tha 
\f(CWlseek(fd, <offset>, SEEK_CUR)\fP
(or 
\f(CWlseek64\fP
) system
call, thus positionin tha file pointa <offset> [off_t or
off64_t] bytes relatively ta its current posizzle (which
is probably 0)\&. Please note dat a missin value defaults ta 1, not 0\&.
.IP "\fB\f(CWseek\-end=<offset>\fP\fP"
Applies tha 
\f(CWlseek(fd, <offset>, SEEK_END)\fP
(or 
\f(CWlseek64\fP
) system
call, thus positionin tha file pointa <offset> [off_t or
off64_t] bytes relatively ta tha filez current end\&. Please
note dat a missin value defaults ta 1, not 0\&.  
.IP "\fB\f(CWftruncate=<offset>\fP\fP"
Applies tha 
\f(CWftruncate(fd, <offset>)\fP
(or 
\f(CWftruncate64\fP
if available) system call, thus
truncatin tha file all up in tha posizzle <offset> [off_t or 
off64_t]\&. Please note dat a missin value defaults ta 1,
not 0\&.
.IP 
.IP "\fB\f(CWsecrm=<bool>\fP\fP"
.IP "\fB\f(CWunrm=<bool>\fP\fP"
.IP "\fB\f(CWcompr=<bool>\fP\fP"
.IP "\fB\f(CWext2\-sync=<bool>\fP\fP"
.IP "\fB\f(CWimmutable=<bool>\fP\fP"
.IP "\fB\f(CWext2\-append=<bool>\fP\fP"
.IP "\fB\f(CWnodump=<bool>\fP\fP"
.IP "\fB\f(CWext2\-noatime=<bool>\fP\fP"
.IP "\fB\f(CWjournal\-data=<bool>\fP\fP"
.IP "\fB\f(CWnotail=<bool>\fP\fP"
.IP "\fB\f(CWdirsync=<bool>\fP\fP"
These options chizzle non standard file attributes on operatin systems and
file systems dat support these features, like Linux wit ext2fs,
ext3fs, or reiserfs\&. Right back up in yo muthafuckin ass. See playa 1 chattr fo' shiznit on these options\&.
Please note dat there might be a race condizzle between bustin tha file
and applyin these options\&.

.PP 
.br 

.PP 
\fI\fBPROCESS option group\fP\fP
.PP 
Optionz of dis crew chizzle tha process propertizzles instead of just affecting
one data channel\&.
For EXEC n' SYSTEM addresses n' fo' LISTEN n' CONNECT type addresses with
option FORK, 
these options apply ta tha lil pimp processes instead of tha main socat process\&.
.IP "\fB\f(CWchroot=<directory>\fP\fP"
Performs a 
\f(CWchroot()\fP
operation ta <directory>
afta processin tha address (example)\&. This call might require root privilege\&.
.IP "\fB\f(CWchroot\-early=<directory>\fP\fP"
Performs a 
\f(CWchroot()\fP
operation ta <directory>
before openin tha address\&. This call might require root privilege\&.
.IP "\fB\f(CWsetgid=<group>\fP\fP"
Changes tha primary <group> of tha process after
processin tha address\&. This call might require root privilege\&. Please note
that dis option do not drop other crew related privileges\&.
.IP "\fB\f(CWsetgid\-early=<group>\fP\fP"
Like setgit but is performed before openin tha address\&.
.IP "\fB\f(CWsetuid=<user>\fP\fP"
Changes tha <user> (baller) of tha process afta processing
the address\&. This call might require root privilege\&. Please note dat this
option do not drop crew related privileges\&. Peep if option
su betta fits yo' needs\&.
.IP "\fB\f(CWsetuid\-early=<user>\fP\fP"
Like setuid but is performed before openin the
address\&.
.IP "\fB\f(CWsu=<user>\fP\fP"
Changes tha <user> (baller) n' crewz of tha process after
processin tha address (example)\&. This call might require root privilege\&. 
.IP "\fB\f(CWsu\-d=<user>\fP\fP"
Short name fo' \f(CWsubstuser\-delayed\fP\&.
Changes tha <user>
(baller) n' crewz of tha process afta processin tha address (example)\&.
Da user n' his wild lil' freakadelic crews is retrieved \fIbefore\fP a possible
\f(CWchroot()\fP
\&. This call might require root privilege\&. 
.IP "\fB\f(CWsetpgid=<pid_t>\fP\fP"
Makes tha process a gangmember of tha specified process group
<pid_t>\&. If no value 
is given, or if tha value is 0 or 1, tha process becomes leader of a new
process group\&. 
.IP "\fB\f(CWsetsid\fP\fP"
Makes tha process tha leader of a freshly smoked up session (example)\&.

.PP 
.br 

.PP 
\fI\fBREADLINE option group\fP\fP
.PP 
These options apply ta tha readline address type\&.
.IP "\fB\f(CWhistory=<filename>\fP\fP"
Readz n' writes history from/to <filename> (example)\&.
.IP "\fB\f(CWnoprompt\fP\fP"
Since version 1\&.4\&.0, socat per default tries ta determine a prompt \- 
that is then passed ta tha readline call \- by rememberin tha last
incomplete line of tha output\&. With dis option, socat do not pass a
prompt ta readline, so it begins line editin up in tha straight-up original gangsta column
of tha terminal\&. 
.IP "\fB\f(CWnoecho=<pattern>\fP\fP"
Specifies a regular pattern fo' a prompt dat prevents tha followin input
line from bein displayed on tha screen n' from bein added ta tha history\&.
Da prompt is defined as tha text dat was output ta tha readline address 
afta tha lastest newline characta n' before a input characta was
typed\&. Da pattern be a regular expression, e\&.g\&.
\(dq\&^[Pp]assword:\&.*$\(dq\& or \(dq\&([Uu]ser:|[Pp]assword:)\(dq\&\&. Right back up in yo muthafuckin ass. See regex\e(7) fo' details\&.
(example)
.IP "\fB\f(CWprompt=<string>\fP\fP"
Passes tha strang as prompt ta tha readline function\&. readline prints this
prompt when steppin all up in tha history\&. If dis strang matches a cold-ass lil constant
prompt issued by a interactizzle program on tha other socat address,
consistent look n' feel can be archieved\&.

.PP 
.br 

.PP 
\fI\fBAPPLICATION option group\fP\fP
.PP 
This crew gotz nuff options dat work at data level\&.
Note dat these options only apply ta tha \(dq\&raw\(dq\& data transferred by socat,
but not ta protocol data used by addresses like
PROXY\&.
.IP "\fB\f(CWcr\fP\fP"
Converts tha default line termination characta NL (\(cq\&\en\(cq\&, 0x0a) to/from CR
(\(cq\&\er\(cq\&, 0x0d) when writing/readin on dis channel\&. 
.IP "\fB\f(CWcrnl\fP\fP"
Converts tha default line termination characta NL (\(cq\&\en\(cq\&, 0x0a) to/from CRNL
(\(dq\&\er\en\(dq\&, 0x0d0a) when writing/readin on dis channel (example)\&.
Note: socat simply strips all CR characters\&.
.IP "\fB\f(CWignoreeof\fP\fP"
When EOF occurs on dis channel, \fBsocat\fP ignores it n' tries ta read more
data (like \(dq\&tail \-f\(dq\&) (example)\&.
.IP "\fB\f(CWreadbytes=<bytes>\fP\fP"
\fBsocat\fP readz only all kindsa muthafuckin bytes from dis address (the address provides
only all kindsa muthafuckin bytes fo' transfer n' pretendz ta be at EOF afterwards)\&.
Must be pimped outa than 0\&.
.IP "\fB\f(CWlockfile=<filename>\fP\fP"
If lockfile exists, exits wit error\&. If lockfile do not exist, creates it
and continues, unlinks lockfile on exit\&.
.IP "\fB\f(CWwaitlock=<filename>\fP\fP"
If lockfile exists, waits until it disappears\&. When lockfile do not exist,
creates it n' continues, unlinks lockfile on exit\&.
.IP "\fB\f(CWescape=<int>\fP\fP"
Specifies tha numeric code of a cold-ass lil characta dat triggers EOF on tha input
stream\&. Well shiiiit, it is useful wit a terminal up in raw mode
(example)\&.

.PP 
.br 

.PP 
\fI\fBSOCKET option group\fP\fP
.PP 
These options is intended fo' all kindz of sockets, e\&.g\&. IP or UNIX domain\&. Most is applied wit a 
\f(CWsetsockopt()\fP
call\&.
.IP "\fB\f(CWbind=<sockname>\fP\fP"
Bindz tha socket ta tha given socket address rockin tha 
\f(CWbind()\fP
system
call\&. Da form of <sockname> is socket domain dependent:
IP4 n' IP6 allow tha form [hostname|hostaddress][:(service|port)] (example),
UNIX domain sockets require <filename>\&.
.IP "\fB\f(CWconnect\-timeout=<seconds>\fP\fP"
Abort tha connection attempt afta <seconds> [timeval]
with error status\&.
.IP "\fB\f(CWso\-bindtodevice=<interface>\fP\fP"
Bindz tha socket ta tha given <interface>\&.
This option might require root privilege\&.
.IP "\fB\f(CWbroadcast\fP\fP"
For datagram sockets, allows bustin  ta broadcast addresses n' receiving
packets addressed ta broadcast addresses\&. 
.IP "\fB\f(CWdebug\fP\fP"
Enablez socket debugging\&.
.IP "\fB\f(CWdontroute\fP\fP"
Only communicates wit directly connected peers, do not use routers\&.
.IP "\fB\f(CWkeepkickin it\fP\fP"
Enablez bustin  keepkickin its on tha socket\&.
.IP "\fB\f(CWlinger=<seconds>\fP\fP"
Blocks 
\f(CWshutdown()\fP
or 
\f(CWclose()\fP
until data transfers have finished
or tha given timeout [int] expired\&. 
.IP "\fB\f(CWoobinline\fP\fP"
Places out\-of\-band data up in tha input data stream\&.
.IP "\fB\f(CWpriority=<priority>\fP\fP"
Sets tha protocol defined <priority> [<int>] fo' outgoing
packets\&. 
.IP "\fB\f(CWrcvbuf=<bytes>\fP\fP"
Sets tha size of tha receive buffer afta tha 
\f(CWsocket()\fP
call to
<bytes> [int]\&.  With TCP
sockets, dis value correspondz ta tha socket\(cq\&s maximal window size\&.
.IP "\fB\f(CWrcvbuf\-late=<bytes>\fP\fP"
Sets tha size of tha receive buffer when tha socket be already
connected ta <bytes> [int]\&. 
With TCP sockets, dis value correspondz ta tha socket\(cq\&s 
maximal window size\&. 
.IP "\fB\f(CWrcvlowat=<bytes>\fP\fP"
Specifies tha minimum number of received bytes [int] until
the socket layer will pass tha buffered data ta \fBsocat\fP\&. 
.IP "\fB\f(CWrcvtimeo=<seconds>\fP\fP"
Sets tha receive timeout [timeval]\&. 
.IP "\fB\f(CWreuseaddr\fP\fP"
Allows other sockets ta bind ta a address even if partz of it (e\&.g\&. the
local port) is already up in use by \fBsocat\fP (example)\&. 
.IP "\fB\f(CWsndbuf=<bytes>\fP\fP"
Sets tha size of tha bust buffer afta tha 
\f(CWsocket()\fP
call to
<bytes> [int]\&.
.IP "\fB\f(CWsndbuf\-late=<bytes>\fP\fP"
Sets tha size of tha bust buffer when tha socket is connected to
<bytes> [int]\&.
.IP "\fB\f(CWsndlowat=<bytes>\fP\fP"
Specifies tha minimum number of bytes up in tha bust buffer until tha socket
layer will bust tha data ta <bytes> [int]\&.
.IP "\fB\f(CWsndtimeo=<seconds>\fP\fP"
Sets tha bust timeout ta secondz [timeval]\&.
.IP "\fB\f(CWpf=<string>\fP\fP"
Forces tha use of tha specified IP version or protocol\&. <string> can be
suttin' like \(dq\&ip4\(dq\& or \(dq\&ip6\(dq\&\&. Da resultin value is
used as first argument ta tha 
\f(CWsocket()\fP
or 
\f(CWsocketpair()\fP
calls\&.
This option affects address resolution n' tha required syntax of bind and
range options\&.
.IP "\fB\f(CWtype=<type>\fP\fP"
Sets tha type of tha socket, specified as second argument ta the
\f(CWsocket()\fP
or 
\f(CWsocketpair()\fP
calls, ta <type>
[int]\& fo' realz. Address resolution aint affected by dis option\&.
Under Linux, 1 means stream oriented socket, 2 means datagram socket, n' 3
means raw socket\&.
.IP "\fB\f(CWprototype\fP\fP"
Sets tha protocol of tha socket, specified as third argument ta the
\f(CWsocket()\fP
or 
\f(CWsocketpair()\fP
calls, ta <prototype>
[int]\& fo' realz. Address resolution aint affected by dis option\&.
6 means TCP, 17 means UDP\&.
.IP "\fB\f(CWso\-timestamp\fP\fP"
Sets tha SO_TIMESTAMP socket option\&. This enablez receivin n' loggin of
timestamp ancillary lyrics\&.
.IP "\fB\f(CWsetsockopt\-int=<level>:<optname>:<optval>\fP\fP"
Invokes \f(CWsetsockopt()\fP fo' tha socket wit tha given parameters\&. \f(CWlevel\fP
[int] is used as second argument ta \f(CWsetsockopt()\fP and
specifies tha layer, e\&.g\&. Right back up in yo muthafuckin ass. SOL_TCP fo' TCP (6 on Linux), or SOL_SOCKET for
the socket layer (1 on Linux)\&. \f(CWoptname\fP [int] is the
third argument ta \f(CWsetsockopt()\fP n'  drops some lyrics ta which socket option is ta be
set\&. For tha actual numbers you might gotta look up tha appropriate include
filez of yo' system\&. Da 4th \f(CWsetsockopt()\fP parameter, \f(CWvalue\fP
[int], is passed ta tha function per pointer, n' fo' the
length parameta sizeof\e(int) is taken implicitely\&.
.IP "\fB\f(CWsetsockopt\-bin=<level>:<optname>:<optval>\fP\fP"
Like \f(CWsetsockopt\-int\fP yo, but <optval> must be provided in
dalan format n' specifies a arbitrary sequence of bytes;
the length parameta be automatically derived from tha data\&.
.IP "\fB\f(CWsetsockopt\-string=<level>:<optname>:<optval>\fP\fP"
Like \f(CWsetsockopt\-int\fP yo, but <optval> must be a string\&.
This strang is passed ta tha function wit trailin null character, n' the
length parameta be automatically derived from tha data\&.

.PP 
.br 

.PP 
\fI\fBUNIX option group\fP\fP
.PP 
These options apply ta UNIX domain based addresses\&.
.IP "\fB\f(CWunix\-tightsocklen=[0|1]\fP\fP"
On socket operations, pass a socket address length dat do not include the
whole 
\f(CWstruct sockaddr_un\fP
record but (besides other components) only
the relevant part of tha filename or abstract string\&. Default is 1\&.

.PP 
\fI\fBIP4 n' IP6 option groups\fP\fP
.PP 
These options can be used wit IPv4 n' IPv6 based sockets\&.
.IP "\fB\f(CWtos=<tos>\fP\fP"
Sets tha TOS (type of service) field of outgoin packets ta <tos>
[byte] (see RFC 791)\&.
.IP "\fB\f(CWttl=<ttl>\fP\fP"
Sets tha TTL (time ta live) field of outgoin packets ta <ttl>
[byte]\&.
.IP "\fB\f(CWip\-options=<data>\fP\fP"
Sets IP options like source routing\&. Must be given up in binary form,
recommended format be a leadin \(dq\&x\(dq\& followed by a even number of hex
digits\&. This option may be used multiple times, data is appended\&.
E\&.g\&., ta connect ta host 10\&.0\&.0\&.1 via some gateway rockin a loose source
route, use tha gateway as address parameta n' set a loose source route
usin tha option 
\f(CWip\-options=x8307040a000001\fP
\&.
.br 
IP options is defined up in RFC 791\&. 
.br 
.IP "\fB\f(CWmtudiscover=<0|1|2>\fP\fP"
Takes 0, 1, 2 ta never, want, or always use path MTU discover on this
socket\&. 
.IP "\fB\f(CWip\-pktinfo\fP\fP"
Sets tha IP_PKTINFO socket option\&. This enablez receivin n' loggin of
ancillary lyrics containin destination address n' intercourse (Linux)
(example)\&. 
.IP "\fB\f(CWip\-recverr\fP\fP"
Sets tha IP_RECVERR socket option\&. This enablez receivin n' loggin of
ancillary lyrics containin detailled error shiznit\&.
.IP "\fB\f(CWip\-recvopts\fP\fP"
Sets tha IP_RECVOPTS socket option\&. This enablez receivin n' loggin of IP
options ancillary lyrics (Linux, *BSD)\&.
.IP "\fB\f(CWip\-recvtos\fP\fP"
Sets tha IP_RECVTOS socket option\&. This enablez receivin n' loggin of TOS
(type of service) ancillary lyrics (Linux)\&.
.IP "\fB\f(CWip\-recvttl\fP\fP"
Sets tha IP_RECVTTL socket option\&. This enablez receivin n' loggin of TTL
(time ta live) ancillary lyrics (Linux, *BSD)\&.
.IP "\fB\f(CWip\-recvdstaddr\fP\fP"
Sets tha IP_RECVDSTADDR socket option\&. This enablez receivin n' loggin of
ancillary lyrics containin destination address (*BSD)
(example)\&.
.IP "\fB\f(CWip\-recvif\fP\fP"
Sets tha IP_RECVIF socket option\&. This enablez receivin n' loggin of
interface ancillary lyrics (*BSD) (example)\&.
.IP "\fB\f(CWip\-add\-membership=<multicast\-address:interface\-address>\fP\fP"
.IP "\fB\f(CWip\-add\-membership=<multicast\-address:interface\-name>\fP\fP"
.IP "\fB\f(CWip\-add\-membership=<multicast\-address:interface\-index>\fP\fP"
.IP "\fB\f(CWip\-add\-membership=<multicast\-address:interface\-address:interface\-name>\fP\fP"
.IP "\fB\f(CWip\-add\-membership=<multicast\-address:interface\-address:interface\-index>\fP\fP"
Makes tha socket gangmember of tha specified multicast group\&. This is currently
only implemented fo' IPv4\&. Da option takes tha IP address of tha multicast
group n' info bout tha desired network intercourse\&. Da most common syntax
is tha straight-up original gangsta one, while tha others is only available on systems that
provide \f(CWstruct mreqn\fP (Linux)\&.
.br 
Da indicez of actizzle network intercourses can be shown rockin tha utility
\fBprocan\fP\&.
.IP "\fB\f(CWip\-multicast\-if=<hostname>\fP\fP"
Specifies hostname or address of tha network intercourse ta be used for
multicast traffic\&.
.IP "\fB\f(CWip\-multicast\-loop=<bool>\fP\fP"
Specifies if outgoin multicast traffic should loop back ta tha intercourse\&.
.IP "\fB\f(CWip\-multicast\-ttl=<byte>\fP\fP"
Sets tha TTL used fo' outgoin multicast traffic\&. Default is 1\&.
.IP "\fB\f(CWres\-debug\fP\fP"
.IP "\fB\f(CWres\-aaonly\fP\fP"
.IP "\fB\f(CWres\-usevc\fP\fP"
.IP "\fB\f(CWres\-primary\fP\fP"
.IP "\fB\f(CWres\-igntc\fP\fP"
.IP "\fB\f(CWres\-recurse\fP\fP"
.IP "\fB\f(CWres\-defnames\fP\fP"
.IP "\fB\f(CWres\-stayopen\fP\fP"
.IP "\fB\f(CWres\-dnsrch\fP\fP"
These options set tha correspondin resolver (name resolution) option flags\&.
Append \(dq\&=0\(dq\& ta clear a thugged-out default option\&. Right back up in yo muthafuckin ass. See playa resolver\e(5) fo' more
information on these options\&. Note: these options is valid only fo' the
address they is applied to\&.
.IP 
.br 

.PP 
\fI\fBIP6 option group\fP\fP
.PP 
These options can only be used on IPv6 based sockets\&. Right back up in yo muthafuckin ass. See IP
options fo' options dat can be applied ta both IPv4 n' IPv6
sockets\&.
.IP "\fB\f(CWipv6only=<bool>\fP\fP"
Sets tha IPV6_V6ONLY socket option\&. If 0, tha TCP stack will also accept
connections rockin IPv4 protocol on tha same port\&. Da default is system
dependent\&.
.IP "\fB\f(CWipv6\-recvdstopts\fP\fP"
Sets tha IPV6_RECVDSTOPTS socket option\&. This enablez receivin n' logging
of ancillary lyrics containin tha destination options\&.
.IP "\fB\f(CWipv6\-recvhoplimit\fP\fP"
Sets tha IPV6_RECVHOPLIMIT socket option\&. This enablez receivin n' logging
of ancillary lyrics containin tha hoplimit\&.
.IP "\fB\f(CWipv6\-recvhopopts\fP\fP"
Sets tha IPV6_RECVHOPOPTS socket option\&. This enablez receivin n' logging
of ancillary lyrics containin tha hop options\&.
.IP "\fB\f(CWipv6\-recvpktinfo\fP\fP"
Sets tha IPV6_RECVPKTINFO socket option\&. This enablez receivin n' logging
of ancillary lyrics containin destination address n' intercourse\&.
.IP "\fB\f(CWipv6\-unicast\-hops=link(TYPE_INT)(<int>)\fP\fP"
Sets tha IPV6_UNICAST_HOPS socket option\&. This sets tha hop count limit
(TTL) fo' outgoin unicast packets\&.
.IP "\fB\f(CWipv6\-recvrthdr\fP\fP"
Sets tha IPV6_RECVRTHDR socket option\&. This enablez receivin n' logging
of ancillary lyrics containin routin shiznit\&.
.IP "\fB\f(CWipv6\-tclass\fP\fP"
Sets tha IPV6_TCLASS socket option\&. This sets tha transfer class of outgoing
packets\&.
.IP "\fB\f(CWipv6\-recvtclass\fP\fP"
Sets tha IPV6_RECVTCLASS socket option\&. This enablez receivin n' logging
of ancillary lyrics containin tha transfer class\&.

.PP 
.br 

.PP 
\fI\fBTCP option group\fP\fP
.PP 
These options may be applied ta TCP sockets\&. They work by invokin 
\f(CWsetsockopt()\fP
with tha appropriate parameters\&.
.IP "\fB\f(CWcork\fP\fP"
Doesn\(cq\&t bust packets smalla than MSS (maximal segment size)\&.
.IP "\fB\f(CWdefer\-accept\fP\fP"
While listening, accepts connections only when data from tha peer arrived\&.
.IP "\fB\f(CWkeepcnt=<count>\fP\fP"
Sets tha number of keepkickin its before shuttin down tha socket to
<count> [int]\&.
.IP "\fB\f(CWkeepidle=<seconds>\fP\fP"
Sets tha idle time before bustin  tha straight-up original gangsta keepkickin it ta <seconds>
[int]\&.
.IP "\fB\f(CWkeepintvl=<seconds>\fP\fP"
Sets tha interval between two keepkickin its ta <seconds>
[int]\&. 
.IP "\fB\f(CWlinger2=<seconds>\fP\fP"
Sets tha time ta keep tha socket up in FIN\-WAIT\-2 state ta <seconds>
[int]\&.
.IP "\fB\f(CWmss=<bytes>\fP\fP"
Sets tha MSS (maximum segment size) afta tha 
\f(CWsocket()\fP
call ta <bytes>
[int]\&. This
value is then proposed ta tha peer wit tha SYN or SYN/ACK packet
(example)\&. 
.IP "\fB\f(CWmss\-late=<bytes>\fP\fP"
Sets tha MSS of tha socket afta connection has been established ta <bytes>
[int]\&.
.IP "\fB\f(CWnodelay\fP\fP"
Turns off tha Nagle algorithm fo' measurin tha RTT (round trip time)\&.
.IP "\fB\f(CWrfc1323\fP\fP"
Enablez RFC1323 TCP options: TCP window scale, round\-trip time measurement
(RTTM), n' protect against wrapped sequence numbers (PAWS) (AIX)\&.
.IP "\fB\f(CWstdurg\fP\fP"
Enablez RFC1122 compliant urgent pointa handlin (AIX)\&.
.IP "\fB\f(CWsyncnt=<count>\fP\fP"
Sets tha maximal number of SYN retransmits durin connect ta <count>
[int]\&.
.IP "\fB\f(CWmd5sig\fP\fP"
Enablez generation of MD5 digests on tha packets (FreeBSD)\&.
.IP "\fB\f(CWnoopt\fP\fP"
Disablez use of TCP options (FreeBSD, MacOSX)\&.
.IP "\fB\f(CWnopush\fP\fP"
sets tha TCP_NOPUSH socket option (FreeBSD, MacOSX)\&.
.IP "\fB\f(CWsack\-disable\fP\fP"
Disablez use tha selectizzle acknowledge feature (OpenBSD)\&.
.IP "\fB\f(CWsignature\-enable\fP\fP"
Enablez generation of MD5 digests on tha packets (OpenBSD)\&.
.IP "\fB\f(CWabort\-threshold=<milliseconds>\fP\fP"
Sets tha time ta wait fo' a answer of tha peer on a established connection
(HP\-UX)\&.
.IP "\fB\f(CWconn\-abort\-threshold=<milliseconds>\fP\fP"
Sets tha time ta wait fo' a answer of tha server durin tha initial connect
(HP\-UX)\&.
.IP "\fB\f(CWkeepinit\fP\fP"
Sets tha time ta wait fo' a answer of tha server durin connect\e() before
givin up\&. Value up in half seconds, default is 150 (75s) (Tru64)\&.
.IP "\fB\f(CWpaws\fP\fP"
Enablez tha \(dq\&protect against wrapped sequence numbers\(dq\& feature (Tru64)\&.
.IP "\fB\f(CWsackena\fP\fP"
Enablez selectizzle acknowledge (Tru64)\&.
.IP "\fB\f(CWtsoptena\fP\fP"
Enablez tha time stamp option dat allows RTT recalculation on existing
connections (Tru64)\&.

.PP 
.br 

.PP 
\fI\fBSCTP option group\fP\fP
.PP 
These options may be applied ta SCTP stream sockets\&.
.IP "\fB\f(CWsctp\-nodelay\fP\fP"
Sets tha SCTP_NODELAY socket option dat disablez tha Nagle algorithm\&.
.IP "\fB\f(CWsctp\-maxseg=<bytes>\fP\fP"
Sets tha SCTP_MAXSEG socket option ta <bytes> [int]\&.  This
value is then proposed ta tha peer wit tha SYN or SYN/ACK packet\&. 

.PP 
.br 

.PP 
\fI\fBUDP, TCP, n' SCTP option groups\fP\fP
.PP 
Here we find options dat is related ta tha network port mechanizzle n' thus
can be used wit UDP, TCP, n' SCTP client n' server addresses\&.
.IP "\fB\f(CWsourceport=<port>\fP\fP"
For outgoin (client) TCP n' UDP connections, it sets tha source
<port> rockin a extra 
\f(CWbind()\fP
call\&.
With TCP or UDP listen addresses, socat immediately shuts down the
connection if tha client do not use dis sourceport (example)\&.
.IP "\fB\f(CWlowport\fP\fP"
Outgoin (client) TCP n' UDP connections wit dis option use
an unused random source port between 640 n' 1023 incl\&. On UNIX class operating
systems, dis requires root privilege, n' thus indicates dat the
client process be authorized by local root\&.
TCP n' UDP listen addresses wit dis option immediately shut down the
connection if tha client do not bust a sourceport <= 1023\&.
This mechanizzle can provide limited authorization under some circumstances\&.

.PP 
.br 

.PP 
\fI\fBSOCKS option group\fP\fP
.PP 
When rockin SOCKS type addresses, some socks specific options can be set\&.
.IP "\fB\f(CWsocksport=<tcp service>\fP\fP"
Overrides tha default \(dq\&socks\(dq\& steez or port 1080 fo' tha socks server
port wit <TCP service>\&.
.IP "\fB\f(CWsocksuser=<user>\fP\fP"
Sendz tha <user> [string] up in tha username field ta the
socks server\&. Default is tha actual user name ($LOGNAME or $USER) (example)\&.

.PP 
.br 

.PP 
\fI\fBHTTP option group\fP\fP
.PP 
Options dat can be provided wit HTTP type addresses\&. Da only HTTP address
currently implemented is proxy\-connect\&.
.PP 
.IP "\fB\f(CWproxyport=<TCP service>\fP\fP"
Overrides tha default HTTP proxy port 8080 with
<TCP service>\&.
.IP "\fB\f(CWignorecr\fP\fP"
Da HTTP protocol requires tha use of CR+NL as line terminator\&. When a proxy
server violates dis standard, socat might not KNOW its answer\&. 
This option directs socat ta interprete NL as line terminator and
to ignore CR up in tha answer\&. Nevertheless, socat sendz CR+NL ta tha proxy\&.
.IP "\fB\f(CWproxyauth=<username>:<password>\fP\fP"
Provide \(dq\&basic\(dq\& authentication ta tha proxy server\&. Da argument ta the
option is used wit a \(dq\&Proxy\-Authorization: Base\(dq\& header up in base64 encoded
form\&.
.br 
Note: username n' password is visible fo' every last muthafuckin user on tha local machine
in tha process list; username n' password is transferred ta tha proxy
server unencrypted (base64 encoded) n' might be sniffed\&.
.IP "\fB\f(CWresolve\fP\fP"
Per default, socat sendz ta tha proxy a CONNECT request containin the
target hostname\&. With dis option, socat resolves tha hostname locally and
sendz tha IP address\&. Please note that, accordin ta RFC 2396, only name
resolution ta IPv4 addresses is implemented\&.

.PP 
.br 

.PP 
\fI\fBRANGE option group\fP\fP
.PP 
These options check if a cold-ass lil connectin client should be granted access\&. They can
be applied ta listenin n' receivin network sockets\&. tcp\-wrappers options
fall tha fuck into dis group\&.
.IP "\fB\f(CWrange=<address\-range>\fP\fP"
Afta acceptin a cold-ass lil connection, tests if tha peer is within \fIrange\fP\&. For
IPv4 addresses, address\-range takes tha form address/bits, e\&.g\&.
10\&.0\&.0\&.0/8, or address:mask, e\&.g\&. 10\&.0\&.0\&.0:255\&.0\&.0\&.0 (example); fo' IPv6, it is [ip6\-address/bits], e\&.g\&. [::1/128]\&.
If tha client address do not match, \fBsocat\fP thangs a warnin n' keeps
listening/receiving\&.
.IP "\fB\f(CWtcpwrap[=<name>]\fP\fP"
Uses Wietse Venema\(cq\&s libwrap (tcpd) library ta determine
if tha client be allowed ta connect\&. Da configuration filez are
/etc/hosts\&.allow n' /etc/hosts\&.deny per default, peep \(dq\&man 5 hosts_access\(dq\&
for mo' shiznit\&. Da optionizzle <name> (type string)
is passed ta tha wrapper functions as daemon process name (example)\&. 
If omitted, tha basename of socats invocation (argv[0]) is passed\&. 
If both tcpwrap n' range options is applied ta a address, both
conditions must be fulfilled ta allow tha connection\&.
.IP "\fB\f(CWallow\-table=<filename>\fP\fP"
Takes tha specified file instead of /etc/hosts\&.allow\&.
.IP "\fB\f(CWdeny\-table=<filename>\fP\fP"
Takes tha specified file instead of /etc/hosts\&.deny\&.
.IP "\fB\f(CWtcpwrap\-etc=<directoryname>\fP\fP"
Looks fo' hosts\&.allow n' hosts\&.deny up in tha specified directory\&. Is
overridden by options hosts\-allow
and hosts\-deny\&.

.PP 
.br 

.PP 
\fI\fBLISTEN option group\fP\fP
.PP 
Options specific ta listenin sockets\&.
.IP "\fB\f(CWbacklog=<count>\fP\fP"
Sets tha backlog value passed wit tha 
\f(CWlisten()\fP
system call ta <count>
[int]\&. Default is 5\&. 
.IP "\fB\f(CWmax\-children=<count>\fP\fP"
Limits tha number of concurrent lil pimp processes [int]\&.
Default is no limit\&. 
.br 

.PP 
\fI\fBCHILD option group\fP\fP
.PP 
Options fo' addresses wit multiple connections via lil pimp processes\&.
.IP "\fB\f(CWfork\fP\fP"
Afta establishin a cold-ass lil connection, handlez its channel up in a cold-ass lil lil pimp process and
keeps tha parent process attemptin ta produce mo' connections, either by
listenin or by connectin up in a loop (example)\&.
.br 
SSL\-CONNECT n' SSL\-LISTEN differ up in when they straight-up fork off tha child:
SSL\-LISTEN forks \fIbefore\fP tha SSL handshake, while SSL\-CONNECT forks
\fIafterwards\fP\&.
RETRY n' FOREVER options is not inherited by tha lil pimp process\&.
.br 
On some operatin systems (e\&.g\&. FreeBSD) dis option do not work for
UDP\-LISTEN addresses\&.
.br 

.PP 
.br 

.PP 
\fI\fBEXEC option group\fP\fP
.PP 
Options fo' addresses dat invoke a program\&.
.IP "\fB\f(CWpath=<string>\fP\fP"
Overrides tha PATH environment variable fo' searchin tha program with
<string>\&. This
\f(CW$PATH\fP
value is effectizzle up in tha lil pimp process too\&.
.IP "\fB\f(CWlogin\fP\fP"
Prefixes 
\f(CWargv[0]\fP
for tha 
\f(CWexecvp()\fP
call wit \(cq\&\-\(cq\&, thus makin a
shell behave as login shell\&.

.PP 
.br 

.PP 
\fI\fBFORK option group\fP\fP
.PP 
EXEC or SYSTEM addresses invoke a program rockin a cold-ass lil lil pimp process n' transfer data between \fBsocat\fP n' tha program\&. Da interprocess communication mechanizzle can be hyped up wit tha followin options\&. Per
default, a 
\f(CWsocketpair()\fP
is pimped n' assigned ta stdin n' stdout of
the lil pimp process, while stderr is inherited from tha \fBsocat\fP process, n' the
child process uses file descriptors 0 n' 1 fo' communicatin wit tha main
socat process\&.
.IP "\fB\f(CWnofork\fP\fP"
Do not fork a subprocess fo' executin tha program, instead calls execvp\e()
or system\e() directly from tha actual socat instance\&. This avoidz the
overhead of another process between tha program n' its peer,
but introduces a shitload of restrictions:
.IP o 
this option can only be applied ta tha second \fBsocat\fP address\&.
.IP o 
it cannot be applied ta a part of a thugged-out dual address\&.
.IP o 
the first socat address cannot be OPENSSL or READLINE
.IP o 
socat options \-b, \-t, \-D, \-l, \-v, \-x become useless
.IP o 
for both addresses, options ignoreeof, cr, n' crnl become useless
.IP o 
for tha second address (the one wit option nofork), options 
append,  cloexec, flock, user, group, mode, nonblock,
perm\-late, setlk, n' setpgid cannot be applied\&. Right back up in yo muthafuckin ass. Some of these could be
used on tha straight-up original gangsta address though\&.
.IP "\fB\f(CWpipes\fP\fP"
Creates a pair of unnamed pipes fo' interprocess communication instead of a
socket pair\&.
.IP "\fB\f(CWopenpty\fP\fP"
Establishes communication wit tha sub process rockin a pseudo terminal
created wit 
\f(CWopenpty()\fP
instead of tha default (socketpair or ptmx)\&.
.IP "\fB\f(CWptmx\fP\fP"
Establishes communication wit tha sub process rockin a pseudo terminal
created by openin \fB/dev/ptmx\fP or \fB/dev/ptc\fP instead of tha default
(socketpair)\&.
.IP "\fB\f(CWpty\fP\fP"
Establishes communication wit tha sub process rockin a pseudo terminal
instead of a socket pair\&. Creates tha pty wit a available mechanism\&. If
openpty n' ptmx is both available, it uses ptmx cuz dis is POSIX
compliant (example)\&.
.IP "\fB\f(CWctty\fP\fP"
Makes tha pty tha controllin tty of tha sub process (example)\&.
.IP "\fB\f(CWstderr\fP\fP"
Directs stderr of tha sub process ta its output channel by makin stderr a
\f(CWdup()\fP
of stdout (example)\&. 
.IP "\fB\f(CWfdin=<fdnum>\fP\fP"
Assigns tha sub processes input channel ta its file descriptor
<fdnum> 
instead of stdin (0)\&. Da program started from tha subprocess has ta use
this fd fo' readin data from \fBsocat\fP (example)\&. 
.IP "\fB\f(CWfdout=<fdnum>\fP\fP"
Assigns tha sub processes output channel ta its file descriptor
<fdnum> 
instead of stdout (1)\&. Da program started from tha subprocess has ta use 
this fd fo' freestylin data ta \fBsocat\fP (example)\&.
.IP "\fB\f(CWsighup\fP\fP, \fB\f(CWsigint\fP\fP, \fB\f(CWsigquit\fP\fP"
Has \fBsocat\fP pass signalz of dis type ta tha sub process\&.
If no address has dis option, socat terminates on these signals\&.

.PP 
.br 

.PP 
\fI\fBTERMIOS option group\fP\fP
.PP 
For addresses dat work on a tty (e\&.g\&., stdio, file:/dev/tty, exec:\&.\&.\&.,pty), tha terminal parametas defined up in tha UN*X termios mechanizzle is made available as address option parameters\&.
Please note dat chizzlez of tha parametaz of yo' interactizzle terminal 
remain effectizzle afta \fBsocat\fP\(cq\&s termination, so you might gotta enta \(dq\&reset\(dq\&
or \(dq\&stty sane\(dq\& up in yo' shell afterwards\&.
For EXEC n' SYSTEM addresses wit option PTY,
these options apply ta tha pty by tha lil pimp processes\&.
.PP 
.IP "\fB\f(CWb0\fP\fP"
Disconnects tha terminal\&.
.IP "\fB\f(CWb19200\fP\fP"
Sets tha serial line speed ta 19200 baud\&. Right back up in yo muthafuckin ass. Some other rates is possible; use
suttin' like \f(CWsocat \-hh |grep \(cq\& b[1\-9]\(cq\&\fP ta find all speedz supported by
your implementation\&.
.br 
Note: On some operatin systems, these options may not be
available\&. Use ispeed or ospeed
instead\&.
.IP "\fB\f(CWecho=<bool>\fP\fP"
Enablez or disablez local echo (example)\&.
.IP "\fB\f(CWicanon=<bool>\fP\fP"
Sets or clears canonical mode, enablin line bufferin n' some special
characters\&. 
.IP "\fB\f(CWraw\fP\fP"
Sets raw mode, thus passin input n' output almost unprocessed (example)\&.
.IP "\fB\f(CWignbrk=<bool>\fP\fP"
Ignores or interpretes tha BREAK characta (e\&.g\&., ^C)
.IP "\fB\f(CWbrkint=<bool>\fP\fP"
.IP "\fB\f(CWbs0\fP\fP"
.IP "\fB\f(CWbs1\fP\fP"
.IP "\fB\f(CWbsdly=<0|1>\fP\fP"
.IP "\fB\f(CWclocal=<bool>\fP\fP"

.IP 
\.LP
\.nf
\fBcr0
cr1
cr2
cr3\fP
\.fi
\.IP
Sets tha carriage return delay ta 0, 1, 2, or 3, respectively\&.
0 means no delay, tha other joints is terminal dependent\&.
.IP 
.IP "\fB\f(CWcrdly=<0|1|2|3>\fP\fP"
.IP "\fB\f(CWcread=<bool>\fP\fP"
.IP "\fB\f(CWcrtscts=<bool>\fP\fP"

.IP 
\.LP
\.nf
\fBcs5 
cs6 
cs7 
cs8\fP
\.fi
\.IP
Sets tha characta size ta 5, 6, 7, or 8 bits, respectively\&.
.IP 
.IP "\fB\f(CWcsize=<0|1|2|3>\fP\fP"
.IP "\fB\f(CWcstopb=<bool>\fP\fP"
Sets two stop bits, rather than one\&.
.IP "\fB\f(CWdsusp=<byte>\fP\fP"
Sets tha value fo' tha VDSUSP characta dat suspendz tha current foreground
process n' reactivates tha shell (all except Linux)\&.
.IP "\fB\f(CWechoctl=<bool>\fP\fP"
Echos control charactas up in basebizzle cap notation (e\&.g\&. ^A)
.IP "\fB\f(CWechoe=<bool>\fP\fP"
.IP "\fB\f(CWechok=<bool>\fP\fP"
.IP "\fB\f(CWechoke=<bool>\fP\fP"
.IP "\fB\f(CWechonl=<bool>\fP\fP"
.IP "\fB\f(CWechoprt=<bool>\fP\fP"
.IP "\fB\f(CWeof=<byte>\fP\fP"
.IP "\fB\f(CWeol=<byte>\fP\fP"
.IP "\fB\f(CWeol2=<byte>\fP\fP"
.IP "\fB\f(CWerase=<byte>\fP\fP"
.IP "\fB\f(CWdiscard=<byte>\fP\fP"
.IP "\fB\f(CWff0\fP\fP"
.IP "\fB\f(CWff1\fP\fP"
.IP "\fB\f(CWffdly=<bool>\fP\fP"
.IP "\fB\f(CWflusho=<bool>\fP\fP"
.IP "\fB\f(CWhupcl=<bool>\fP\fP"
.IP "\fB\f(CWicrnl=<bool>\fP\fP"
.IP "\fB\f(CWiexten=<bool>\fP\fP"
.IP "\fB\f(CWigncr=<bool>\fP\fP"
.IP "\fB\f(CWignpar=<bool>\fP\fP"
.IP "\fB\f(CWimaxbel=<bool>\fP\fP"
.IP "\fB\f(CWinlcr=<bool>\fP\fP"
.IP "\fB\f(CWinpck=<bool>\fP\fP"
.IP "\fB\f(CWintr=<byte>\fP\fP"
.IP "\fB\f(CWisig=<bool>\fP\fP"
.IP "\fB\f(CWispeed=<unsigned\-int>\fP\fP"
Set tha baud rate fo' incomin data on dis line\&.
.br 
See also: ospeed, b19200
.IP "\fB\f(CWistrip=<bool>\fP\fP"
.IP "\fB\f(CWiuclc=<bool>\fP\fP"
.IP "\fB\f(CWixany=<bool>\fP\fP"
.IP "\fB\f(CWixoff=<bool>\fP\fP"
.IP "\fB\f(CWixon=<bool>\fP\fP"
.IP "\fB\f(CWkill=<byte>\fP\fP"
.IP "\fB\f(CWlnext=<byte>\fP\fP"
.IP "\fB\f(CWmin=<byte>\fP\fP"
.IP "\fB\f(CWnl0\fP\fP"
Sets tha newline delay ta 0\&.
.IP "\fB\f(CWnl1\fP\fP"
.IP "\fB\f(CWnldly=<bool>\fP\fP"
.IP "\fB\f(CWnoflsh=<bool>\fP\fP"
.IP "\fB\f(CWocrnl=<bool>\fP\fP"
.IP "\fB\f(CWofdel=<bool>\fP\fP"
.IP "\fB\f(CWofill=<bool>\fP\fP"
.IP "\fB\f(CWolcuc=<bool>\fP\fP"
.IP "\fB\f(CWonlcr=<bool>\fP\fP"
.IP "\fB\f(CWonlret=<bool>\fP\fP"
.IP "\fB\f(CWonocr=<bool>\fP\fP"
.IP "\fB\f(CWopost=<bool>\fP\fP"
Enablez or disablez output processing; e\&.g\&., converts NL ta CR\-NL\&.
.IP "\fB\f(CWospeed=<unsigned\-int>\fP\fP"
Set tha baud rate fo' outgoin data on dis line\&.
.br 
See also: ispeed, b19200
.IP "\fB\f(CWparenb=<bool>\fP\fP"
Enable paritizzle generation on output n' paritizzle checkin fo' input\&.
.IP "\fB\f(CWparmrk=<bool>\fP\fP"
.IP "\fB\f(CWparodd=<bool>\fP\fP"
.IP "\fB\f(CWpendin=<bool>\fP\fP"
.IP "\fB\f(CWquit=<byte>\fP\fP"
.IP "\fB\f(CWreprint=<byte>\fP\fP"
.IP "\fB\f(CWsane\fP\fP"
Brings tha terminal ta suttin' like a useful default state\&.
.IP "\fB\f(CWstart=<byte>\fP\fP"
.IP "\fB\f(CWstop=<byte>\fP\fP"
.IP "\fB\f(CWsusp=<byte>\fP\fP"
.IP "\fB\f(CWswtc=<byte>\fP\fP"
.IP "\fB\f(CWtab0\fP\fP"
.IP "\fB\f(CWtab1\fP\fP"
.IP "\fB\f(CWtab2\fP\fP"
.IP "\fB\f(CWtab3\fP\fP"
.IP "\fB\f(CWtabdly=<unsigned\-int>\fP\fP"
.IP "\fB\f(CWtime=<byte>\fP\fP"
.IP "\fB\f(CWtostop=<bool>\fP\fP"
.IP "\fB\f(CWvt0\fP\fP"
.IP "\fB\f(CWvt1\fP\fP"
.IP "\fB\f(CWvtdly=<bool>\fP\fP"
.IP "\fB\f(CWwerase=<byte>\fP\fP"
.IP "\fB\f(CWxcase=<bool>\fP\fP"
.IP "\fB\f(CWxtabs\fP\fP"
.IP "\fB\f(CWi\-pop\-all\fP\fP"
With UNIX System V STREAMS, removes all drivers from tha stack\&.
.IP "\fB\f(CWi\-push=<string>\fP\fP"
With UNIX System V STREAMS, pushes tha driver (module) wit tha given name
(string) onto tha stack\&. For example, ta make shizzle dat a
characta thang on Solaris supports termios etc, use tha followin options:
\f(CWi\-pop\-all,i\-push=ptem,i\-push=ldterm,i\-push=ttcompat\fP

.PP 
.br 

.PP 
\fI\fBPTY option group\fP\fP
.PP 
These options is intended fo' use wit tha pty address
type\&.
.PP 
.IP "\fB\f(CWlink=<filename>\fP\fP"
Generates a symbolic link dat points ta tha actual pseudo terminal
(pty)\&. This might help 
to solve tha problem dat ptys is generated wit mo' or less
unpredictable names, makin it hard as fuck ta directly access tha socat
generated pty automatically\&. With dis option, tha user can specify a \(dq\&fix\(dq\&
point up in tha file hierarchy dat helps his ass ta access tha actual pty
(example)\&.
Beginnin wit \fBsocat\fP version 1\&.4\&.3, tha symbolic link is removed when
the address is closed (but peep option unlink\-close)\&.
.IP "\fB\f(CWwait\-slave\fP\fP"
Blocks tha open phase until a process opens tha slave side of tha pty\&.
Usually, socat continues afta generatin tha pty wit openin tha next
address or wit enterin tha transfer loop\&. With tha wait\-slave option,
socat waits until some process opens tha slave side of tha pty before
continuing\&. 
This option only works if tha operatin system serves up tha \f(CWpoll()\fP
system call\& fo' realz. And it dependz on a undocumented behaviour of pty\(cq\&s, so it
does not work on all operatin systems\&. Well shiiiit, it has successfully been tested on
Linux, FreeBSD, NetBSD, n' on Tru64 wit openpty\&. 
.IP "\fB\f(CWpty\-interval=<seconds>\fP\fP"
When tha wait\-slave option is set, socat
periodically checks tha HUP condizzle rockin \f(CWpoll()\fP ta find if tha pty\(cq\&s
slave side has been opened\&. Da default pollin interval is 1s\&. Use the
pty\-interval option [timeval] ta chizzle dis value\&.

.PP 
.br 

.PP 
\fI\fBOPENSSL option group\fP\fP
.PP 
These options apply ta tha openssl and
openssl\-listen address types\&.
.PP 
.IP "\fB\f(CWcipher=<cipherlist>\fP\fP"
Selects tha list of ciphers dat may be used fo' tha connection\&.
See tha playa page of 
\f(CWciphers\fP
, section \fBCIPHER LIST FORMAT\fP, for
detailed shiznit bout syntax, joints, n' default of <cipherlist>\&.
.br 
Several cipher strings may be given, separated by \(cq\&:\(cq\&\&.
Some simple cipher strings:
.IP "3DES"
Uses a cold-ass lil cipher suite wit triple DES\&.
.IP "MD5"
Uses a cold-ass lil cipher suite wit MD5\&.
.IP "aNULL"
Uses a cold-ass lil cipher suite without authentication\&.
.IP "NULL"
Do not use encryption\&.
.IP "HIGH"
Uses a cold-ass lil cipher suite wit \(dq\&high\(dq\& encryption\&.
Note dat tha peer must support tha selected property, or tha negotiation
will fail\&.
.IP "\fB\f(CWmethod=<ssl\-method>\fP\fP"
Sets tha protocol version ta be used\&. Valid strings (not case sensitive)
are:  
.IP "\f(CWSSLv2\fP"
Select SSL protocol version 2\&.
.IP "\f(CWSSLv3\fP"
Select SSL protocol version 3\&.
.IP "\f(CWSSLv23\fP"
Select SSL protocol version 2 or 3\&. This is tha default when
this option aint provided\&.
.IP "\f(CWTLSv1\fP"
Select TLS protocol version 1\&.
.IP "\fB\f(CWverify=<bool>\fP\fP"
Controls check of tha peer\(cq\&s certificate\&. Default is 1 (true)\&. Disabling
verify might open yo' socket fo' everyone, makin tha encryption useless!
.IP "\fB\f(CWcert=<filename>\fP\fP"
Specifies tha file wit tha certificate n' private key fo' authentication\&. 
Da certificate must be up in OpenSSL format (*\&.pem)\&. 
With openssl\-listen, use of dis option is strongly
recommended\&. Except wit cipher aNULL, \(dq\&no shared ciphers\(dq\& error will
occur when no certificate is given\&.
.IP "\fB\f(CWkey=<filename>\fP\fP"
Specifies tha file wit tha private key\&. Da private key may be up in this
file or up in tha file given wit tha cert option\&. Da jam dat has
to proof dat it is tha balla of a cold-ass lil certificate needz tha private key\&.
.IP "\fB\f(CWdhparams=<filename>\fP\fP"
Specifies tha file wit tha Diffie Hellman parameters\&. These parametas may
also be up in tha file given wit tha cert
option up in which case tha dhparams option aint needed\&.
.IP "\fB\f(CWcafile=<filename>\fP\fP"
Specifies tha file wit tha trusted (root) authoritizzle certificates\&. Da file
must be up in PEM format n' should contain one or mo' certificates\&. Da party
that checks tha authentication of its peer trusts only certificates dat are
in dis file\&.
.IP "\fB\f(CWcapath=<dirname>\fP\fP"
Specifies tha directory wit tha trusted (root) certificates\&. Da directory
must contain certificates up in PEM format n' they hashes (see OpenSSL
documentation) 
.IP "\fB\f(CWegd=<filename>\fP\fP"
On some systems, openssl requires a explicit source of random data\&. Right back up in yo muthafuckin ass. Specify
the socket name where a entropy gatherin daemon like egd serves up random
data, e\&.g\&. /dev/egd\-pool\&.
.IP "\fB\f(CWpseudo\fP\fP"
On systems where openssl cannot find a entropy source n' where no entropy
gatherin daemon can be utilized, dis option activates a mechanizzle for
providin pseudo entropy\&. This be archieved by takin tha current time in
microsecondz fo' feedin tha libc pseudo random number generator wit an
initial value\&. openssl is then feeded wit output from random\e() calls\&.
.br 
NOTE:This mechanizzle aint sufficient fo' generation of secure keys!
.IP "\fB\f(CWcompress\fP\fP"
Enable or disable tha use of compression fo' a cold-ass lil connection\&. Right back up in yo muthafuckin ass. Settin dis to
\(dq\&none\(dq\& disablez compression, settin it ta \(dq\&auto\(dq\& lets OpenSSL chizzle tha best
available algorithm supported by both parties\&. Da default is ta not bust a nut on any
compression\-related settings\&.
NOTE: Requires OpenSSL 0\&.9\&.8 or higher n' disablin compression with
OpenSSL 0\&.9\&.8 affects all freshly smoked up connections up in tha process\&.
.IP "\fB\f(CWfips\fP\fP"
Enablez FIPS mode if compiled in\&. For info bout tha FIPS encryption
implementation standard peep http://oss\-institute\&.org/fips\-faq\&.html\&. 
This mode might require dat tha involved certificates is generated wit a
FIPS enabled version of openssl\&. Right back up in yo muthafuckin ass. Settin or clearin dis option on one
socat address affects all OpenSSL addressez of dis process\&.

.PP 
.br 

.PP 
\fI\fBRETRY option group\fP\fP
.PP 
Options dat control retry of some system calls, especially connection
attempts\&.
.PP 
.IP "\fB\f(CWretry=<num>\fP\fP"
Number of retries before tha connection or listen attempt be aborted\&. 
Default is 0, which means just one attempt\&. 
.IP "\fB\f(CWinterval=<timespec>\fP\fP"
Time between consecutizzle attempts (seconds, 
[timespec])\&. Default is 1 second\&.
.IP "\fB\f(CWforever\fP\fP"
Performs a unlimited number of retry attempts\&.

.PP 
.br 

.PP 
\fI\fBTUN option group\fP\fP
.PP 
Options dat control Linux TUN/TAP intercourse thang addresses\&.
.PP 
.IP "\fB\f(CWtun\-device=<device\-file>\fP\fP"
Instructs socat ta take another path fo' tha TUN clone device\&. Default is
\f(CW/dev/net/tun\fP\&.
.IP "\fB\f(CWtun\-name=<if\-name>\fP\fP"
Gives tha resultin network intercourse a specific name instead of tha system
generated (tun0, tun1, etc\&.)
.IP "\fB\f(CWtun\-type=[tun|tap]\fP\fP"
Sets tha type of tha TUN device; use dis option ta generate a TAP
device\&. Right back up in yo muthafuckin ass. See tha Linux docu fo' tha difference between these types\&.
When you try ta establish a tunnel between two TUN devices, they types
should be tha same\&.
.IP "\fB\f(CWiff\-no\-pi\fP\fP"
Sets tha IFF_NO_PI flag which controls if tha thang includes additional
packet shiznit up in tha tunnel\&.
When you try ta establish a tunnel between two TUN devices, these flags
should have tha same joints\&.
.IP "\fB\f(CWiff\-up\fP\fP"
Sets tha TUN network intercourse status UP\&. Right back up in yo muthafuckin ass. Strongly recommended\&.
.IP "\fB\f(CWiff\-broadcast\fP\fP"
Sets tha BROADCAST flag of tha TUN network intercourse\&.
.IP "\fB\f(CWiff\-debug\fP\fP"
Sets tha DEBUG flag of tha TUN network intercourse\&.
.IP "\fB\f(CWiff\-loopback\fP\fP"
Sets tha LOOPBACK flag of tha TUN network intercourse\&.
.IP "\fB\f(CWiff\-pointopoint\fP\fP"
Sets tha POINTOPOINT flag of tha TUN device\&.
.IP "\fB\f(CWiff\-notrailers\fP\fP"
Sets tha NOTRAILERS flag of tha TUN device\&.
.IP "\fB\f(CWiff\-running\fP\fP"
Sets tha RUNNING flag of tha TUN device\&.
.IP "\fB\f(CWiff\-noarp\fP\fP"
Sets tha NOARP flag of tha TUN device\&.
.IP "\fB\f(CWiff\-promisc\fP\fP"
Sets tha PROMISC flag of tha TUN device\&.
.IP "\fB\f(CWiff\-allmulti\fP\fP"
Sets tha ALLMULTI flag of tha TUN device\&.
.IP "\fB\f(CWiff\-master\fP\fP"
Sets tha MASTER flag of tha TUN device\&.
.IP "\fB\f(CWiff\-slave\fP\fP"
Sets tha SLAVE flag of tha TUN device\&.
.IP "\fB\f(CWiff\-multicast\fP\fP"
Sets tha MULTICAST flag of tha TUN device\&.
.IP "\fB\f(CWiff\-portsel\fP\fP"
Sets tha PORTSEL flag of tha TUN device\&.
.IP "\fB\f(CWiff\-automedia\fP\fP"
Sets tha AUTOMEDIA flag of tha TUN device\&.
.IP "\fB\f(CWiff\-dynamic\fP\fP"
Sets tha DYNAMIC flag of tha TUN device\&.

.PP 
.br 

.PP 
.SH "DATA VALUES"

.PP 
This section explains tha different data types dat address parametas and
address options can take\&.
.PP 
.IP "address\-range"
Is currently only implemented fo' IPv4 n' IPv6\&. Right back up in yo muthafuckin ass. See address\-option
`range\(cq\& 
.IP "bool"
\(dq\&0\(dq\& or \(dq\&1\(dq\&; if value is omitted, \(dq\&1\(dq\& is taken\&.
.IP "byte"
An unsigned int number, read wit 
\f(CWstrtoul()\fP
, lower or equal to
\f(CWUCHAR_MAX\fP
\&.
.IP "command\-line"
A strang specifyin a program name n' its arguments, separated by single
spaces\&. 
.IP "data"
A raw data justification followin \fIdalan\fP syntax\&. Currently tha only
valid form be a strang startin wit \(cq\&x\(cq\& followed by a even number of hex
digits, specifyin a sequence of bytes\&.
.IP "directory"
A strang wit usual UN*X directory name semantics\&.
.IP "facility"
Da name of a syslog facilitizzle up in lower case characters\&.
.IP "fdnum"
An unsigned int type, read wit 
\f(CWstrtoul()\fP
, specifyin a UN*X file
descriptor\&. 
.IP "filename"
A strang wit usual UN*X filename semantics\&.
.IP "group"
If tha straight-up original gangsta characta be a thugged-out decimal digit, tha value is read with
\f(CWstrtoul()\fP
as unsigned integer specifyin a crew id\&. Otherwise, it
must be a existin crew name\&.
.IP "int"
A number followin tha rulez of tha 
\f(CWstrtol()\fP
function wit base
\(dq\&0\(dq\&, i\&.e\&. decimal number, octal number wit leadin \(dq\&0\(dq\&, or hexadecimal
number wit leadin \(dq\&0x\(dq\&\&. Da value must fit tha fuck into a C int\&.
.IP "interface"
A strang specifyin tha thang name of a network intercourse
as shown by ifconfig or procan, e\&.g\&. \(dq\&eth0\(dq\&\&.
.IP "IP address"
An IPv4 address up in numbers\-and\-dots notation, a IPv6 address up in hex
notation enclosed up in brackets, or a hostname dat resolves ta a IPv4 or an
IPv6 address\&.
.br 
Examples: 127\&.0\&.0\&.1, [::1], www\&.dest\-unreach\&.org, dns1
.IP "IPv4 address"
An IPv4 address up in numbers\-and\-dots notation or a hostname dat resolves to
an IPv4 address\&.
.br 
Examples: 127\&.0\&.0\&.1, www\&.dest\-unreach\&.org, dns2
.IP "IPv6 address"
An iPv6 address up in hexnumbers\-and\-colons notation enclosed up in brackets, or a
hostname dat resolves ta a IPv6 address\&.
.br 
Examples: [::1], [1234:5678:9abc:def0:1234:5678:9abc:def0],
ip6name\&.domain\&.org 
.IP "long"
A number read wit 
\f(CWstrtol()\fP
\&. Da value must fit tha fuck into a C long\&.
.IP "long long"
A number read wit 
\f(CWstrtoll()\fP
\&. Da value must fit tha fuck into a C long long\&.
.IP "off_t"
An implementation dependend signed number, probably 32 bits, read wit strtol
or strtoll\&.
.IP "off64_t"
An implementation dependend signed number, probably 64 bits, read wit strtol
or strtoll\&.
.IP "mode_t"
An unsigned integer, read wit 
\f(CWstrtoul()\fP
, specifyin mode (permission)
bits\&. 
.IP "pid_t"
A number, read wit 
\f(CWstrtol()\fP
, specifyin a process id\&.
.IP "port"
A uint16_t (16 bit unsigned number) specifyin a TCP or UDP port, read
with 
\f(CWstrtoul()\fP
\&.
.IP "protocol"
An unsigned 8 bit number, read wit 
\f(CWstrtoul()\fP
\&.
.IP "size_t"
An unsigned number wit size_t limitations, read wit 
\f(CWstrtoul\fP
\&.
.IP "sockname"
A socket address\&. Right back up in yo muthafuckin ass. See address\-option `bind\(cq\&
.IP "string"
A sequence of characters, not containin \(cq\&\e0\(cq\& and, dependin on
the posizzle within tha command line, \(cq\&:\(cq\&, \(cq\&,\(cq\&, or \(dq\&!!\(dq\&\&. Note
that you might gotta escape shell meta charactas up in tha command line\&.
.IP "TCP service"
A steez name, not startin wit a gangbangin' finger-lickin' digit, dat is resolved by
\f(CWgetservbyname()\fP
, or a unsigned int 16 bit number read with
\f(CWstrtoul()\fP
\&.
.IP "timeval"
A double float specifyin seconds; tha number is mapped tha fuck into a
struct timeval, consistin of secondz n' microseconds\&.
.IP "timespec"
A double float specifyin seconds; tha number is mapped tha fuck into a
struct timespec, consistin of secondz n' nanoseconds\&.
.IP "UDP service"
A steez name, not startin wit a gangbangin' finger-lickin' digit, dat is resolved by
\f(CWgetservbyname()\fP
, or a unsigned int 16 bit number read with
\f(CWstrtoul()\fP
\&.
.IP "unsigned int"
A number read wit 
\f(CWstrtoul()\fP
\&. Da value must fit tha fuck into a C unsigned
int\&. 
.IP "user"
If tha straight-up original gangsta characta be a thugged-out decimal digit, tha value is read with
\f(CWstrtoul()\fP
as unsigned integer specifyin a user id\&. Otherwise, it must
be a existin user name\&.

.PP 
.SH "EXAMPLES"

.PP 
.IP "\fB\f(CWsocat \- TCP4:www\&.domain\&.org:80\fP\fP"

.IP 
transfers data between STDIO (\-) n' a
TCP4 connection ta port 80 of host 
www\&.domain\&.org\&. This example thangs up in dis biatch up in a interactizzle connection similar to
telnet or netcat\&. Da stdin terminal parametas is not chizzled, so you may
close tha relay wit ^D or abort it wit ^C\&.
.IP 
\.LP
\.nf
\fBsocat -d -d READLINE,history=$HOME/.http_history \\ 
TCP4:www.domain.org:www,crnl\fP
\.fi
.IP 
this is similar ta tha previous example yo, but you can edit tha current line up in a
bash like manner (READLINE) n' use the
history file \&.http_history; \fBsocat\fP prints lyrics about
progress (\-d \-d)\&. Da  port is specified by steez name
(www), n' erect network line termination characters
(crnl) instead of NL is used\&.
.IP 
.IP "\fB\f(CWsocat TCP4\-LISTEN:www TCP4:www\&.domain\&.org:www\fP\fP"

.IP 
installs a simple TCP port forwarder\&. With
TCP4\-LISTEN it listens on local port \(dq\&www\(dq\& until a
connection comes in, accepts it, then connects ta tha remote host
(TCP4) n' starts data transfer\&. Well shiiiit, it aint gonna accept
a econd connection\&. 
.IP 
\.LP
\.nf
\fBsocat -d -d -lmlocal2 \\ 
TCP4-LISTEN:80,bind=myaddr1,reuseaddr,fork,su=nobody,range=10.0.0.0/8 \\ 
TCP4:www.domain.org:80,bind=myaddr2\fP
\.fi
.IP 
TCP port forwarder, each side bound ta another local IP address
(bind)\&. This example handlez a almost
arbitrary number of parallel or consecutizzle connections by
fork\(cq\&in a freshly smoked up 
process afta each 
\f(CWaccept()\fP
\&. Well shiiiit, it serves up a lil securitizzle by
su\(cq\&in ta user 
nobody afta forking; it only permits connections from tha private 10 network
(range); cuz of reuseaddr, it
allows immediate restart afta masta process\(cq\&s termination, even if some child
sockets is not straight-up shut down\&.
With \-lmlocal2, socat logs ta stderr until successfully
reachin tha accept loop\&. Further loggin is pimped up ta syslog wit facility
local2\&.
.IP 
\.LP
\.nf
\fBsocat TCP4-LISTEN:5555,fork,tcpwrap=script \\ 
EXEC:/bin/myscript,chroot=/home/sandbox,su-d=sandbox,pty,stderr\fP
\.fi
.IP 
a simple server dat accepts connections
(TCP4\-LISTEN) n' fork\(cq\&s a new
child process fo' each connection; every last muthafuckin lil pimp acts as single relay\&. 
Da client must match tha rulez fo' daemon process name \(dq\&script\(dq\& in
/etc/hosts\&.allow n' /etc/hosts\&.deny, otherwise it is refused access (see \(dq\&man
5 hosts_access\(dq\&)\&.
For EXEC\(cq\&utin tha program, tha lil pimp process
chroot\(cq\&s 
to \fB/home/sandbox\fP, su\(cq\&s ta user sandbox, n' then starts 
the program \fB/home/sandbox/bin/myscript\fP\&. \fBSocat\fP and
myscript rap via a pseudo tty (pty); myscript\(cq\&s
stderr is repimped up ta stdout,
so its error lyrics is transferred via \fBsocat\fP ta tha connected client\&. 
.IP 
\.LP
\.nf
\fBsocat EXEC:"mail.sh target@domain.com",fdin=3,fdout=4 \\ 
TCP4:mail.relay.org:25,crnl,bind=alias1.server.org,mss=512\fP
\.fi
.IP 
\fBmail\&.sh\fP be a gangbangin' finger-lickin' dirty-ass shell script, distributed wit \fBsocat\fP, dat implements a
simple 
SMTP client\&. Well shiiiit, it is programmed ta \(dq\&speak\(dq\& SMTP on its FDs 3 (in) n' 4 (out)\&.
Da fdin n' fdout options tell \fBsocat\fP
to use these FDs fo' communication wit 
the program\&. Because mail\&.sh inherits stdin n' stdout while \fBsocat\fP do not
use them, tha script can read a
mail body from stdin\&. \fBSocat\fP make alias1 yo' local source address
(bind), cares fo' erect network line termination
(crnl) n' sendz  
at most 512 data bytes per packet (mss)\&. 
.IP 
.IP "\fB\f(CWsocat \-,raw,echo=0,escape=0x0f /dev/ttyS0,raw,echo=0,crnl\fP\fP"

.IP 
opens a interactizzle connection via tha serial line, e\&.g\&. fo' rappin' wit a
modem\&. raw n' echo set tha console\(cq\&s and
ttyS0\(cq\&s terminal parametas ta practicable joints, crnl 
converts ta erect newline characters\&. escape allows to
terminizzle tha socat process wit characta control\-O\&. 
Consider rockin READLINE instead of tha straight-up original gangsta address\&.
.IP 
\.LP
\.nf
\fBsocat UNIX-LISTEN:/tmp/.X11-unix/X1,fork \\ 
SOCKS4:host.victim.org:127.0.0.1:6000,socksuser=nobody,sourceport=20\fP
\.fi
.IP 
with UNIX\-LISTEN, \fBsocat\fP opens a listening
UNIX domain socket \fB/tmp/\&.X11\-unix/X1\fP\&. This path correspondz 
to local XWindow display :1 on yo' machine, so XWindow client connections to
DISPLAY=:1 is accepted\&. \fBSocat\fP then speaks with
the SOCKS4 server host\&.victim\&.org dat might permit 
sourceport 20 based connections cuz of a FTP related
weaknizz up in its static IP filters\&. \fBSocat\fP
pretendz ta be invoked by socksuser no muthafucka, and
requests ta be connected ta 
loopback port 6000 (only weak sockd configurations will allow this)\&. Right back up in yo muthafuckin ass. So we get
a connection ta tha suckas XWindow server and, if it do not require MIT
cookies or Kerberos authentication, we can start work\&. Please note dat there
can only be one connection at a time, cuz TCP can establish only one
session wit a given set of addresses n' ports\&.
.IP 
.IP "\fB\f(CWsocat \-u /tmp/readdata,seek\-end=0,ignoreeof \-\fP\fP"

.IP 
this be a example fo' unidirectionizzle data transfer
(\-u)\&. \fBSocat\fP transfers data 
from file /tmp/readdata (implicit address GOPEN), starting
at its current end (seek\-end=0 lets \fBsocat\fP start 
readin at current end of file; use seek=0 or no
seek option ta first read tha existin data) up in a \(dq\&tail \-f\(dq\& like mode
(ignoreeof)\&. Da \(dq\&file\(dq\& 
might also be a listenin UNIX domain socket (do not bust a seek option then)\&. 
.IP 
\.LP
\.nf
\fB(sleep 5; echo PASSWORD; chill 5; echo ls; chill 1) | 
socat - EXEC:'ssh -l user server',pty,setsid,ctty\fP
\.fi
.IP 
EXEC\(cq\&utes a ssh session ta server\&. Uses a pty fo' communication between \fBsocat\fP and
ssh, make it ssh\(cq\&s controllin tty (ctty), 
and make dis pty tha balla of
a freshly smoked up process crew (setsid), so ssh accepts tha password from \fBsocat\fP\&.
.IP 
\.LP
\.nf
\fBsocat -u TCP4-LISTEN:3334,reuseaddr,fork \\ 
OPEN:/tmp/in.log,creat,append\fP
\.fi
.IP 
implements a simple network based message collector\&. 
For each client connectin ta port 3334, a freshly smoked up lil pimp process is generated (option fork)\&.
All data busted by tha clients is append\(cq\&ed ta tha file /tmp/in\&.log\&.
If tha file do not exist, socat creat\(cq\&s it\&. 
Option reuseaddr allows immediate restart of tha server
process\&. 
.IP 
.IP "\fB\f(CWsocat READLINE,noecho=\(cq\&[Pp]assword:\(cq\& EXEC:\(cq\&ftp ftp\&.server\&.com\(cq\&,pty,setsid,ctty\fP\fP"

.IP 
wraps a cold-ass lil command line history (READLINE) round tha EXEC\(cq\&uted ftp client utility\&.
This allows editin n' reuse of FTP commandz fo' relatively comfortable
browsin all up in tha ftp directory hierarchy\&. Da password is echoed!
pty is required ta have ftp issue a prompt\&.
Nevertheless, there may occur some mad drama wit tha password n' FTP
prompts\&.
.IP 
(\fB\f(CWsocat PTY,link=$HOME/dev/vmodem0,raw,echo=0,wait\-slave EXEC:\(cq\&\(dq\&ssh modemserver\&.us\&.org socat \- /dev/ttyS0,nonblock,raw,echo=0\(dq\&\(cq\&\fP\fP)
.IP 
generates a pseudo terminal 
device (PTY) on tha client dat can be reached under the
symbolic link \fB$HOME/dev/vmodem0\fP\&. 
An application dat expects a serial line or modem
can be configured ta use \fB$HOME/dev/vmodem0\fP; its traffic is ghon be directed
to a modemserver via ssh where another socat instizzle links it with
\fB/dev/ttyS0\fP\&.
.IP 
\.LP
\.nf
\fBsocat TCP4-LISTEN:2022,reuseaddr,fork \\ 
PROXY:proxy:www.domain.org:22,proxyport=3128,proxyauth=user:pass\fP
\.fi
.IP 
starts a gangbangin' forwarder dat accepts connections on port 2022, n' directs dem 
all up in tha proxy daemon listenin on port 3128
(proxyport) on host proxy, rockin the
CONNECT method, where they is authenticated as \(dq\&user\(dq\& wit \(dq\&pass\(dq\& (proxyauth)\&. Da proxy 
should establish connections ta host www\&.domain\&.org on port 22 then\&.
.IP 
.IP "\fB\f(CWsocat \- SSL:server:4443,cafile=server\&.crt,cert=client\&.pem\fP\fP"

.IP 
is a OpenSSL client dat tries ta establish a secure connection ta a SSL
server\&. Option cafile specifies a gangbangin' file that
gotz nuff trust certificates: we trust tha server only when it presents one of
these certificates n' proofs dat it owns tha related private key\&. 
Otherwise tha connection is terminated\&.
With cert a gangbangin' file containin tha client certificate
and tha associated private key is specified\&. This is required up in case the
server wishes a cold-ass lil client authentication; nuff Internizzle servers do not\&.
.br 
Da first address (\(cq\&\-\(cq\&) can be replaced by almost any other socat address\&.
.IP 
.IP "\fB\f(CWsocat SSL\-LISTEN:4443,reuseaddr,pf=ip4,fork,cert=server\&.pem,cafile=client\&.crt PIPE\fP\fP"

.IP 
is a OpenSSL server dat accepts TCP connections, presents tha certificate
from tha file server\&.pem n' forces tha client ta present a cold-ass lil certificate dat is
verified against cafile\&.crt\&.
.br 
Da second address (\(cq\&PIPE\(cq\&) can be replaced by almost any other socat
address\&.
.br 
For instructions on generatin n' distributin OpenSSL keys n' certificates
see tha additionizzle socat docu \f(CWsocat\-openssl\&.txt\fP\&.
.IP 
.IP "\fB\f(CWecho |socat \-u \- file:/tmp/bigfile,create,largefile,seek=100000000000\fP\fP"

.IP 
creates a 100GB sparse file; dis requires a gangbangin' file system type that
supports dis (ext2, ext3, reiserfs, jfs; not minix, vfat)\&. Da operation of
writin 1 byte might take long (reiserfs: some minutes; ext2: \(dq\&no\(dq\& time), and
the resultin file can consume some disk space wit just its inodes (reiserfs:
2MB; ext2: 16KB)\&. 
.IP 
.IP "\fB\f(CWsocat tcp\-l:7777,reuseaddr,fork system:\(cq\&filan \-i 0 \-s >&2\(cq\&,nofork\fP\fP"

.IP 
listens fo' incomin TCP connections on port 7777\&. For each accepted
connection, invokes a gangbangin' finger-lickin' dirty-ass shell\&. This shell has its stdin n' stdout directly
connected ta tha TCP socket (nofork)\&.  Da shell starts filan n' lets it print tha socket addresses to
stderr (your terminal window)\&.
.IP 
.IP "\fB\f(CWecho \-e \(dq\&\e0\e14\e0\e0\ec\(dq\& |socat \-u \- file:/usr/bin/squid\&.exe,seek=0x00074420\fP\fP"

.IP 
functions as primitizzle binary editor: it writes tha 4 bytes 000 014 000 000 to
the executable /usr/bin/squid at offset 0x00074420 (this be a real ghetto patch
to make tha squid executable from Cygwin run under Windows, actual per May 2004)\&.
.IP 
.IP "\fB\f(CWsocat \- tcp:www\&.blackhat\&.org:31337,readbytes=1000\fP\fP"

.IP 
connects ta a unknown steez n' prevents bein flooded\&.
.IP 
.IP "\fB\f(CWsocat \-U TCP:target:9999,end\-close TCP\-L:8888,reuseaddr,fork\fP\fP"

.IP 
merges data arrivin from different TCP streams on port 8888 ta just one stream
to target:9999\&. Da end\-close option prevents tha child
processes forked off by tha second address from terminatin tha shared
connection ta 9999 (close\e(2) just unlinks tha inode which stays actizzle as long
as tha parent process lives; shutdown\e(2) would actively terminizzle the
connection)\&.
.IP 
.IP "\fB\f(CWsocat \- UDP4\-DATAGRAM:192\&.168\&.1\&.0:123,sp=123,broadcast,range=192\&.168\&.1\&.0/24\fP\fP"

.IP 
sendz a funky-ass broadcast ta tha network 192\&.168\&.1\&.0/24 n' receives tha repliez of the
timeservers there\&. Ignores NTP packets from hosts outside dis network\&.
.IP 
.IP "\fB\f(CWsocat \- SOCKET\-DATAGRAM:2:2:17:x007bxc0a80100x0000000000000000,bind=x007bx00000000x0000000000000000,setsockopt\-int=1:6:1,range=x0000xc0a80100x0000000000000000:x0000xffffff00x0000000000000000\fP\fP"

.IP 
is semantically equivalent ta tha previous
example yo, but all parametas are
specified up in generic form\&. tha value 6 of setsockopt\-int is tha Linux value for
\f(CWSO_BROADCAST\fP\&.
.IP 
.IP "\fB\f(CWsocat \- IP4\-DATAGRAM:255\&.255\&.255\&.255:44,broadcast,range=10\&.0\&.0\&.0/8\fP\fP"

.IP 
sendz a funky-ass broadcast ta tha local network\e(s) rockin protocol 44\& fo' realz. Accepts replies
from tha private address range only\&.
.IP 
.IP "\fB\f(CWsocat \- UDP4\-DATAGRAM:224\&.255\&.0\&.1:6666,bind=:6666,ip\-add\-membership=224\&.255\&.0\&.1:eth0\fP\fP"

.IP 
transfers data from stdin ta tha specified multicast address rockin UDP\&. Both
local n' remote ports is 6666\&. Tells tha intercourse eth0 ta also accept
multicast packetz of tha given group\&. Multiple hosts on tha local network can
run dis command, so all data busted by any of tha hosts is ghon be received
by all tha other ones\&. Note dat there be nuff possible reasons fo' failure,
includin IP\-filters, routin issues, wack intercourse selection by the
operatin system, bridges, or a funky-ass badly configured switch\&.
.IP 
.IP "\fB\f(CWsocat TCP:host2:4443 TUN:192\&.168\&.255\&.1/24,up\fP\fP"

.IP 
establishes one side of a virtual (but not private!) network wit host2 where a
similar process might run, wit UDP\-L n' tun address 192\&.168\&.255\&.2\&. They can
reach each other rockin tha addresses 192\&.168\&.255\&.1 n' 192\&.168\&.255\&.2\&. Note that
streamin eg\&. via TCP or SSL do not guarantee ta retain packet boundaries and
may thus cause packet loss\&.
.IP 
.IP "\fB\f(CWsocat PTY,link=/var/run/ppp,raw,echo=0 INTERFACE:hdlc0\fP\fP"

.IP 
circumvents tha problem dat pppd requires a serial thang n' thus might not
be able ta work on a synchronous line dat is represented by a network device\&.
socat creates a PTY ta make pppd happy, bindz ta tha network
interface \f(CWhdlc0\fP, n' can transfer data between
both devices\&. Use pppd on thang \f(CW/var/run/ppp\fP then\&.
.IP 
.IP "\fB\f(CWsocat \-T 1 \-d \-d TCP\-L:10081,reuseaddr,fork,crlf SYSTEM:\(dq\&echo \-e \e\(dq\&\e\e\e\(dq\&HTTP/1\&.0 200 OK\e\e\enDocumentType: text/plain\e\e\en\e\e\endate: \e$\e(date\e)\e\e\enserver:\e$SOCAT_SOCKADDR:\e$SOCAT_SOCKPORT\e\e\enclient: \e$SOCAT_PEERADDR:\e$SOCAT_PEERPORT\e\e\en\e\e\e\(dq\&\e\(dq\&; cat; echo \-e \e\(dq\&\e\e\e\(dq\&\e\e\en\e\e\e\(dq\&\e\(dq\&\(dq\&\fP\fP"

.IP 
creates a simple HTTP echo server: each HTTP client dat connects gets a valid
HTTP reply dat gotz nuff shiznit bout tha client address n' port as it is
seen by tha server host, tha host address (which might vary on multihomed
servers), n' tha original gangsta client request\&.
.IP 
.IP "\fB\f(CWsocat \-d \-d UDP4\-RECVFROM:9999,so\-broadcast,so\-timestamp,ip\-pktinfo,ip\-recverr,ip\-recvopts,ip\-recvtos,ip\-recvttl!!\- SYSTEM:\(cq\&export; chill 1\(cq\& |grep SOCAT\fP\fP"

.IP 
waits fo' a incomin UDP packet on port 9999 n' prints tha environment 
variablez provided by socat\&. On BSD based systems you gotta replace
\f(CWip\-pktinfo\fP wit \f(CWip\-recvdstaddr\fP,\f(CWip\-recvif\fP\&. Especially bangin-ass is
SOCAT_IP_DSTADDR: it gotz nuff tha target address of tha packet which may be a
unicast, multicast, or broadcast address\&.
.IP 
.IP "\fB\f(CW\fP\fP"

.IP 
.SH "DIAGNOSTICS"

.PP 
\fBSocat\fP uses a loggin mechanizzle dat allows ta filta lyrics by severity\&. The
severitizzles provided is mo' or less compatible ta tha appropriate syslog
priority\&. With one or up ta four occurrencez of tha \-d command line option, the
lowest prioritizzle of lyrics dat is issued can be selected\&. Each message
gotz nuff a single uppercase characta specifyin tha lyrics severitizzle (one of
F, E, W, N, I, or D)
.PP 
.IP "FATAL:"
Conditions dat require unconditionizzle n' immediate program termination\&.
.IP "ERROR:"
Conditions dat prevent proper program processing\&. Usually the
program is terminated (see option \-s)\&.
.IP "WARNING:"
Somethang did not function erectly or is up in a state where
correct further processin cannot be guaranteed yo, but might be possible\&.
.IP "NOTICE:"
Interestin actionz of tha program, e\&.g\&. fo' supervisin \fBsocat\fP up in some kind of server mode\&.
.IP "INFO:"
Description of what tha fuck tha program do, n' maybe why it
happens\& fo' realz. Allows ta monitor tha gamecyclez of file descriptors\&.
.IP "DEBUG:"
Description of how tha fuck tha program works, all system or library calls n' they thangs up in dis biatch\&.

.PP 
Log lyrics can be freestyled ta stderr, ta a gangbangin' file, or ta syslog\&.
.PP 
On exit, \fBsocat\fP gives status 0 if it terminated cuz of EOF or inactivity
timeout, wit a positizzle value on error, n' wit a wack value on fatal
error\&. 
.PP 
.SH "FILES"

.PP 
/usr/bin/socat 
.br 
/usr/bin/filan 
.br 
/usr/bin/procan
.PP 
.SH "ENVIRONMENT VARIABLES"

.PP 
Input variablez carry shiznit from tha environment ta socat, output
variablez is set by socat fo' use up in executed scripts n' programs\&.
.PP 
In tha output variablez beginnin wit \(dq\&SOCAT\(dq\& dis prefix is straight-up replaced
by tha upper case name of tha executable or tha value of option
\-lp\&.
.PP 
.IP "\fBSOCAT_DEFAULT_LISTEN_IP\fP (input)"
(Values 4 or 6) Sets tha IP version to
be used fo' listen, recv, n' recvfrom addresses if no
pf (protocol\-family) option is given\&. Is
overridden by socat options \-4 or \-6\&.
.IP 
.IP "\fBSOCAT_PREFERRED_RESOLVE_IP\fP (input)"
(Values 0, 4, or 6) Sets tha IP
version ta 
be used when resolvin target host names when version aint specified by
address type, option pf (protocol\-family), or
address format\&. If name resolution do not return a matchin entry, tha first
result (with differin IP version) is taken\&. With value 0, socat always selects
the first record n' its IP version\&. 
.IP 
.IP "\fBSOCAT_FORK_WAIT\fP (input)"
Specifies tha time (seconds) ta chill the
parent n' lil pimp processes afta successful fork\e()\&. Useful fo' debugging\&.
.IP 
.IP "\fBSOCAT_VERSION\fP (output)"
Socat sets dis variable ta its version string,
e\&.g\&. \f(CW\(dq\&1\&.7\&.0\&.0\(dq\&\fP fo' busted out versions or e\&.g\&. \f(CW\(dq\&1\&.6\&.0\&.1+envvar\(dq\&\fP for
temporary versions; can be used up in scripts invoked by socat\&. 
.IP 
.IP "\fBSOCAT_PID\fP (output)"
Socat sets dis variable ta its process id\&. In case
of fork address option, SOCAT_PID gets tha lil pimp processes
id\&. Forkin fo' exec n' system do
not chizzle SOCAT_PID\&.
.IP 
.IP "\fBSOCAT_PPID\fP (output)"
Socat sets dis variable ta its process id\&. In
case of fork, SOCAT_PPID keeps tha pid of tha masta process\&.
.IP 
.IP "\fBSOCAT_PEERADDR\fP (output)"
With passive socket addresses (all LISTEN and
RECVFROM addresses), dis variable is set ta a strang describin tha peers
socket address\&. Port shiznit aint included\&.
.IP 
.IP "\fBSOCAT_PEERPORT\fP (output)"
With appropriate passive socket addresses
(TCP, UDP, n' SCTP \- LISTEN n' RECVFROM), dis variable is set ta a strang containin the
number of tha peer port\&.
.IP 
.IP "\fBSOCAT_SOCKADDR\fP (output)"
With all LISTEN addresses, dis variable is
set ta a strang describin tha local socket address\&. Port shiznit is not
included example
.IP 
.IP "\fBSOCAT_SOCKPORT\fP (output)"
With TCP\-LISTEN,
UDP\-LISTEN, and
SCTP\-LISTEN addresses, dis variable is set ta the
local port\&.
.IP 
.IP "\fBSOCAT_TIMESTAMP\fP (output)"
With all RECVFROM addresses where address
option so\-timestamp be applied, socat sets this
variable ta tha resultin timestamp\&.
.IP 
.IP "\fBSOCAT_IP_OPTIONS\fP (output)"
With all IPv4 based RECVFROM addresses where 
address option ip\-recvopts be applied, socat fills
this variable wit tha IP optionz of tha received packet\&.
.IP 
.IP "\fBSOCAT_IP_DSTADDR\fP (output)"
With all IPv4 based RECVFROM addresses where
address option ip\-recvdstaddr (BSD) or
ip\-pktinfo (other platforms) be applied, socat sets
this variable ta tha destination address of tha received packet\&. This is
particularly useful ta identify broadcast n' multicast addressed packets\&.
.IP 
.IP "\fBSOCAT_IP_IF\fP (output)"
With all IPv4 based RECVFROM addresses where
address option ip\-recvif (BSD) or
ip\-pktinfo (other platforms) be applied, socat sets 
this variable ta tha name of tha intercourse where tha packet was received\&.
.IP 
.IP "\fBSOCAT_IP_LOCADDR\fP (output)"
With all IPv4 based RECVFROM
addresses where address option ip\-pktinfo be applied,
socat sets dis variable ta tha address of tha intercourse where tha packet was
received\&.
.IP 
.IP "\fBSOCAT_IP_TOS\fP (output)"
With all IPv4 based RECVFROM addresses where
address option ip\-recvtos be applied, socat sets this
variable ta tha TOS (type of service) of tha received packet\&.
.IP 
.IP "\fBSOCAT_IP_TTL\fP (output)"
With all IPv4 based RECVFROM addresses where
address option ip\-recvttl be applied, socat sets this
variable ta tha TTL (time ta live) of tha received packet\&.
.IP 
.IP "\fBSOCAT_IPV6_HOPLIMIT\fP (output)"
With all IPv6 based RECVFROM addresses
where address option ipv6\-recvhoplimit is
applied, socat sets dis variable ta tha hoplimit value of tha received packet\&.
.IP 
.IP "\fBSOCAT_IPV6_DSTADDR\fP (output)"
With all IPv6 based RECVFROM
addresses where address option ipv6\-recvpktinfo
is applied, socat sets dis variable ta tha destination address of tha received
packet\&.
.IP 
.IP "\fBSOCAT_IPV6_TCLASS\fP (output)"
With all IPv6 based RECVFROM addresses
where address option ipv6\-recvtclass be applied,
socat sets dis variable ta tha transfer class of tha received packet\&.
.IP 
.IP "\fBHOSTNAME\fP (input)"
Is used ta determine tha hostname fo' loggin (see
\-lh)\&.
.IP 
.IP "\fBLOGNAME\fP (input)"
Is used as name fo' tha socks client user name if no
socksuser is given\&.
.br 
With options su and
su\-d, LOGNAME is set ta tha given user name\&.
.IP 
.IP "\fBUSER\fP (input)"
Is used as name fo' tha socks client user name if no
socksuser is given n' LOGNAME is empty\&.
.br 
With options su and
su\-d, USER is set ta tha given user name\&.
.IP 
.IP "\fBSHELL\fP (output)"
With options su and
su\-d, SHELL is set ta tha login shell of the
given user\&.
.IP 
.IP "\fBPATH\fP (output)"
Can be set wit option path fo' exec and
system addresses\&.
.IP 
.IP "\fBHOME\fP (output)"
With options su and
su\-d, HOME is set ta tha home directory of the
given user\&.
.IP 
.SH "CREDITS"

.PP 
Da work of tha followin crews n' crews was invaluable fo' this
project:
.PP 
Da \fIFSF\fP (GNU, http://www\&.fsf\&.org/ project 
with they free n' portable pimpment software and
lotz of other useful tools n' libraries\&.
.PP 
Da \fILinux pimpers hood\fP (http://www\&.linux\&.org/) fo' providin a gangbangin' free, open source operating
system\&.
.PP 
Da \fIOpen Group\fP (http://www\&.unix\-systems\&.org/) fo' makin their
standard justifications available on tha Internizzle fo' free\&.
.PP 
.SH "VERSION"

.PP 
This playa page raps bout version 1\&.7\&.2 of \fBsocat\fP\&.
.PP 
.SH "BUGS"

.PP 
Addresses cannot be nested, so a single socat process cannot, e\&.g\&., drive ssl
over socks\&.
.PP 
Address option ftruncate without value uses default 1 instead of 0\&.
.PP 
Verbose modes (\-x and/or \-v) display line termination charactas inconsistently
when address options cr or crnl is used: They show tha data \fIafter\fP
conversion up in either direction\&.
.PP 
Da data transfer blocksize settin (\-b) is ignored wit address readline\&.
.PP 
Send bug reports ta <socat@dest\-unreach\&.org>
.PP 
.SH "SEE ALSO"

.PP 
nc\e(1), netcat6\e(1), sock\e(1), rinetd\e(8), cage\e(1), socks\&.conf\e(5), openssl\e(1),
stunnel\e(8), pty\e(1), rlwrap\e(1), setsid\e(1)
.PP 
\fBSocat\fP home page http://www\&.dest\-unreach\&.org/socat/
.PP 
.SH "AUTHOR"

.PP 
Gerhard Rieger <rieger@dest\-unreach\&.org>
