.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5120DELTA 1"
.TH PERL5120DELTA 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5120delta \- what tha fuck is freshly smoked up fo' perl v5.12.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document raps bout differences between tha 5.10.0 release n' the
5.12.0 release.
.PP
Many of tha bug fixes up in 5.12.0 is already included up in tha 5.10.1
maintenizzle release.
.PP
Yo ass can peep tha list of dem chizzlez up in tha 5.10.1 release notes
(perl5101delta).
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.ie n .SS "New ""package NAME VERSION"" syntax"
.el .SS "New \f(CWpackage NAME VERSION\fP syntax"
.IX Subsection "New package NAME VERSION syntax"
This freshly smoked up syntax allows a module lyricist ta set tha \f(CW$VERSION\fR of a namespace
when tha namespace is declared wit 'package'. Well shiiiit, it eliminates tha need
for \f(CW\*(C`our $VERSION = ...\*(C'\fR n' similar constructs, n' you can put dat on yo' toast. E.g.
.PP
.Vb 2
\&      package Foo::Bar 1.23;
\&      # $Foo::Bar::VERSION == 1.23
.Ve
.PP
There is nuff muthafuckin advantages ta this:
.IP "\(bu" 4
\&\f(CW$VERSION\fR is parsed up in exactly tha same way as \f(CW\*(C`use NAME VERSION\*(C'\fR
.IP "\(bu" 4
\&\f(CW$VERSION\fR is set at compile time
.IP "\(bu" 4
\&\f(CW$VERSION\fR be a version object dat serves up proper overloadin of
comparison operators so comparin \f(CW$VERSION\fR ta decimal (1.23) or
dotted-decimal (v1.2.3) version numbers works erectly.
.IP "\(bu" 4
Eliminates \f(CW\*(C`$VERSION = ...\*(C'\fR n' \f(CW\*(C`eval $VERSION\*(C'\fR clutter
.IP "\(bu" 4
As it requires \s-1VERSION\s0 ta be a numeric literal or v\-string
literal, it can be statically parsed by toolchain modules
without \f(CW\*(C`eval\*(C'\fR tha way \s-1MM\-\s0>parse_version do fo' \f(CW\*(C`$VERSION = ...\*(C'\fR
.PP
It do not break oldschool code wit only \f(CW\*(C`package NAME\*(C'\fR yo, but code dat uses
\&\f(CW\*(C`package NAME VERSION\*(C'\fR will need ta be restricted ta perl 5.12.0 or newer
This be analogous ta tha chizzle ta \f(CW\*(C`open\*(C'\fR from two-args ta three-args.
Users requirin tha sickest fuckin Perl will benefit, n' like afta several
years, it will become a standard practice.
.PP
But fuck dat shiznit yo, tha word on tha street is dat \f(CW\*(C`package NAME VERSION\*(C'\fR requires a new, 'strict' version
number format. Right back up in yo muthafuckin ass. See \*(L"Version number formats\*(R" fo' details.
.ie n .SS "Da ""..."" operator"
.el .SS "Da \f(CW...\fP operator"
.IX Subsection "Da ... operator"
A freshly smoked up operator, \f(CW\*(C`...\*(C'\fR, nicknamed tha Yada Yada operator, has been added.
It be intended ta mark placeholda code dat aint yet implemented.
See \*(L"Yada Yada Operator\*(R" up in perlop.
.SS "Implicit strictures"
.IX Subsection "Implicit strictures"
Usin tha \f(CW\*(C`use VERSION\*(C'\fR syntax wit a version number pimped outa or equal
to 5.11.0 will lexically enable strictures just like \f(CW\*(C`use strict\*(C'\fR
would do (in addizzle ta enablin features.) Da following:
.PP
.Vb 1
\&    use 5.12.0;
.Ve
.PP
means:
.PP
.Vb 2
\&    use strict;
\&    use feature \*(Aq:5.12\*(Aq;
.Ve
.SS "Unicode improvements"
.IX Subsection "Unicode improvements"
Perl 5.12 comes wit Unicode 5.2, tha sickest fuckin version available to
us all up in tha time of release.  This version of Unicode was busted out in
October 2009. Right back up in yo muthafuckin ass. See <http://www.unicode.org/versions/Unicode5.2.0> for
further details bout whatz chizzled up in dis version of tha standard.
See perlunicode fo' instructions on installin n' rockin other versions
of Unicode.
.PP
Additionally, Perlz pimpers have hella improved Perlz Unicode
implementation. I aint talkin' bout chicken n' gravy biatch. For full details, peep \*(L"Unicode overhaul\*(R" below.
.SS "Y2038 compliance"
.IX Subsection "Y2038 compliance"
Perlz core time-related functions is now Y2038 compliant. (It may not mean much ta you yo, but yo' lil playas will ludd dat shiznit son!)
.SS "qr overloading"
.IX Subsection "qr overloading"
It be now possible ta overload tha \f(CW\*(C`qr//\*(C'\fR operator, dat is,
conversion ta regexp, like dat shiznit was already possible ta overload
conversion ta boolean, strang or number of objects, n' you can put dat on yo' toast. Well shiiiit, it is invoked when
an object appears on tha right hand side of tha \f(CW\*(C`=~\*(C'\fR operator or when
it is interpolated tha fuck into a regexp. Right back up in yo muthafuckin ass. See overload.
.SS "Pluggable keywords"
.IX Subsection "Pluggable keywords"
Extension modulez can now cleanly hook tha fuck into tha Perl parser ta define
new kindz of keyword-headed expression n' compound statement. The
syntax followin tha keyword is defined entirely by tha extension. I aint talkin' bout chicken n' gravy biatch. This
allows a cold-ass lil straight-up non-Perl sublanguage ta be parsed inline, wit the
correct ops cleanly generated.
.PP
See \*(L"PL_keyword_plugin\*(R" up in perlapi fo' tha mechanism. Da Perl core
source distribution also includes a freshly smoked up module
XS::APItest::KeywordRPN, which implements reverse Polish notation
arithmetic via pluggable keywords. This module is mainly used fo' test
purposes, n' aint normally installed yo, but also serves as a example
of how tha fuck ta use tha freshly smoked up mechanism.
.PP
Perlz pimpers consider dis feature ta be experimental. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. We may remove
it or chizzle it up in a funky-ass backwards-incompatible way up in Perl 5.14.
.SS "APIs fo' mo' internals"
.IX Subsection "APIs fo' mo' internals"
Da lowest layerz of tha lexer n' partz of tha pad system now have C
APIs available ta \s-1XS\s0 extensions. These is necessary ta support proper
use of pluggable keywordz yo, but have other uses like a muthafucka. Da freshly smoked up APIs are
experimental, n' only cover a lil' small-ass proportion of what tha fuck would be
necessary ta take full advantage of tha corez facilitizzles up in these
areas. Well shiiiit, it is intended dat tha Perl 5.13 pimpment cycle will peep the
addizzle of a gangbangin' full range of clean, supported intercourses.
.PP
Perlz pimpers consider dis feature ta be experimental. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. We may remove
it or chizzle it up in a funky-ass backwards-incompatible way up in Perl 5.14.
.SS "Overridable function lookup"
.IX Subsection "Overridable function lookup"
Where a extension module hooks tha creation of rv2cv ops ta modify the
subroutine lookup process, dis now works erectly fo' bareword
subroutine calls. This means dat prototypes on subroutines referenced
this way is ghon be processed erectly. (Previously bareword subroutine
names was initially looked up, fo' parsin purposes, by a unhookable
mechanism, so extensions could only properly influence subroutine names
that rocked up wit a \f(CW\*(C`&\*(C'\fR sigil.)
.SS "A proper intercourse fo' pluggable Method Resolution Orders"
.IX Subsection "A proper intercourse fo' pluggable Method Resolution Orders"
Az of Perl 5.12.0 there be a freshly smoked up intercourse fo' pluggin n' rockin method
resolution ordaz other than tha default linear depth first search.
Da C3 method resolution order added up in 5.10.0 has been re-implemented as
a plugin, without changin its Perl-space intercourse. Right back up in yo muthafuckin ass. See perlmroapi for
more shiznit.
.ie n .SS """\eN"" experimenstrual regex escape"
.el .SS "\f(CW\eN\fP experimenstrual regex escape"
.IX Subsection "N experimenstrual regex escape"
Perl now supports \f(CW\*(C`\eN\*(C'\fR, a freshly smoked up regex escape which you can be thinkin of as
the inverse of \f(CW\*(C`\en\*(C'\fR. Well shiiiit, it will match any characta dat aint a newline,
independently from tha presence or absence of tha single line match
modifier \f(CW\*(C`/s\*(C'\fR. Well shiiiit, it aint usable within a cold-ass lil characta class.  \f(CW\*(C`\eN{3}\*(C'\fR
means ta match 3 non-newlines; \f(CW\*(C`\eN{5,}\*(C'\fR means ta match at least 5.
\&\f(CW\*(C`\eN{NAME}\*(C'\fR still means tha characta or sequence named \f(CW\*(C`NAME\*(C'\fR yo, but
\&\f(CW\*(C`NAME\*(C'\fR no longer can be thangs like \f(CW3\fR, or \f(CW\*(C`5,\*(C'\fR.
.PP
This will break a cold-ass lil custom charnames translator which allows numbers fo' characta names, as \f(CW\*(C`\eN{3}\*(C'\fR will
now mean ta match 3 non-newline characters, n' not tha characta whose
name is \f(CW3\fR. (No name defined by tha Unicode standard be a number,
so only custom translators might be affected.)
.PP
Perlz pimpers is somewhat concerned bout possible user mad drama
with tha existin \f(CW\*(C`\eN{...}\*(C'\fR construct which matches charactas by their
Unicode name. Consequently, dis feature is experimental. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. We may remove
it or chizzle it up in a funky-ass backwards-incompatible way up in Perl 5.14.
.SS "DTrace support"
.IX Subsection "DTrace support"
Perl now has some support fo' DTrace. Right back up in yo muthafuckin ass. See \*(L"DTrace support\*(R" up in \fI\s-1INSTALL\s0\fR.
.ie n .SS "Support fo' ""configure_requires"" up in \s-1CPAN\s0 module metadata"
.el .SS "Support fo' \f(CWconfigure_requires\fP up in \s-1CPAN\s0 module metadata"
.IX Subsection "Support fo' configure_requires up in CPAN module metadata"
Both \f(CW\*(C`CPAN\*(C'\fR n' \f(CW\*(C`CPANPLUS\*(C'\fR now support tha \f(CW\*(C`configure_requires\*(C'\fR
keyword up in tha \fI\s-1META\s0.yml\fR metadata file included up in most recent \s-1CPAN\s0
distributions.  This allows distribution authors ta specify configuration
prerequisites dat must be installed before hustlin \fIMakefile.PL\fR
or \fIBuild.PL\fR.
.PP
See tha documentation fo' \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR or \f(CW\*(C`Module::Build\*(C'\fR for
more on how tha fuck ta specify \f(CW\*(C`configure_requires\*(C'\fR when bustin a gangbangin' finger-lickin' distribution
for \s-1CPAN.\s0
.ie n .SS """each"", ""keys"", ""values"" is now mo' flexible"
.el .SS "\f(CWeach\fP, \f(CWkeys\fP, \f(CWvalues\fP is now mo' flexible"
.IX Subsection "each, keys, joints is now mo' flexible"
Da \f(CW\*(C`each\*(C'\fR, \f(CW\*(C`keys\*(C'\fR, \f(CW\*(C`values\*(C'\fR function can now operate on arrays.
.ie n .SS """when"" as a statement modifier"
.el .SS "\f(CWwhen\fP as a statement modifier"
.IX Subsection "when as a statement modifier"
\&\f(CW\*(C`when\*(C'\fR is now allowed ta be used as a statement modifier.
.ie n .SS "$, flexibility"
.el .SS "\f(CW$,\fP flexibility"
.IX Subsection "$, flexibility"
Da variable \f(CW$,\fR may now be tied.
.SS "// up in when clauses"
.IX Subsection "// up in when clauses"
// now behaves like || up in when clauses
.SS "Enablin warnings from yo' shell environment"
.IX Subsection "Enablin warnings from yo' shell environment"
Yo ass can now set \f(CW\*(C`\-W\*(C'\fR from tha \f(CW\*(C`PERL5OPT\*(C'\fR environment variable
.ie n .SS """delete local"""
.el .SS "\f(CWdelete local\fP"
.IX Subsection "delete local"
\&\f(CW\*(C`delete local\*(C'\fR now allows you ta locally delete a hash entry.
.SS "New support fo' Abstract namespace sockets"
.IX Subsection "New support fo' Abstract namespace sockets"
Abstract namespace sockets is Linux-specific socket type dat live in
\&\s-1AF_UNIX\s0 crew, slightly abusin it ta be able ta use arbitrary
characta arrays as addresses: They start wit nul byte n' is not
terminated by nul byte yo, but wit tha length passed ta tha \fIsocket()\fR
system call.
.SS "32\-bit limit on substr arguments removed"
.IX Subsection "32-bit limit on substr arguments removed"
Da 32\-bit limit on \f(CW\*(C`substr\*(C'\fR arguments has now been removed. Y'all KNOW dat shit, muthafucka! Da full
range of tha systemz signed n' unsigned integers is now available for
the \f(CW\*(C`pos\*(C'\fR n' \f(CW\*(C`len\*(C'\fR arguments.
.SH "Potentially Incompatible Chizzles"
.IX Header "Potentially Incompatible Chizzles"
.SS "Deprecations warn by default"
.IX Subsection "Deprecations warn by default"
Over tha years, Perlz pimpers have deprecated a fuckin shitload of language
features fo' a variety of reasons.  Perl now defaults ta issuin a
warnin if a thugged-out deprecated language feature is used. Y'all KNOW dat shit, muthafucka! Many of tha deprecations
Perl now warns you bout done been deprecated fo' nuff years.  Yo ass can
find a list of what tha fuck was deprecated up in a given release of Perl up in the
\&\f(CW\*(C`perl5xxdelta.pod\*(C'\fR file fo' dat release.
.PP
To disable dis feature up in a given lexical scope, you should use \f(CW\*(C`no
warnings \*(Aqdeprecated\*(Aq;\*(C'\fR For shiznit bout which language features
are deprecated n' explanationz of various deprecation warnings, please
see perldiag. Right back up in yo muthafuckin ass. See \*(L"Deprecations\*(R" below fo' tha list of features
and modulez Perlz pimpers have deprecated as part of dis release.
.SS "Version number formats"
.IX Subsection "Version number formats"
Acceptable version number formats done been formalized tha fuck into \*(L"strict\*(R" and
\&\*(L"lax\*(R" rules. \f(CW\*(C`package NAME VERSION\*(C'\fR takes a strict version number.
\&\f(CW\*(C`UNIVERSAL::VERSION\*(C'\fR n' tha version object constructors take lax
version numbers. Providin a invalid version will result up in a gangbangin' fatal
error. Shiiit, dis aint no joke. Da version argument up in \f(CW\*(C`use NAME VERSION\*(C'\fR is first parsed as a
numeric literal or v\-strin n' then passed ta \f(CW\*(C`UNIVERSAL::VERSION\*(C'\fR
(and must then pass tha \*(L"lax\*(R" format test).
.PP
These formats is documented straight-up up in tha version module. To a gangbangin' first
approximation, a \*(L"strict\*(R" version number be a positizzle decimal number
(integer or decimal-fraction) without exponentiation or else a
dotted-decimal v\-strin wit a leadin 'v' characta n' at least three
components fo' realz. A \*(L"lax\*(R" version number allows v\-strings wit fewer than
three components or without a leadin 'v'. Under \*(L"lax\*(R" rules, both
decimal n' dotted-decimal versions may gotz a trailin \*(L"alpha\*(R"
component separated by a underscore characta afta a gangbangin' fractionizzle or
dotted-decimal component.
.PP
Da version module addz \f(CW\*(C`version::is_strict\*(C'\fR n' \f(CW\*(C`version::is_lax\*(C'\fR
functions ta check a scalar against these rules.
.ie n .SS "@INC reorganization"
.el .SS "\f(CW@INC\fP reorganization"
.IX Subsection "@INC reorganization"
In \f(CW@INC\fR, \f(CW\*(C`ARCHLIB\*(C'\fR n' \f(CW\*(C`PRIVLIB\*(C'\fR now occur afta afta tha current
versionz \f(CW\*(C`site_perl\*(C'\fR n' \f(CW\*(C`vendor_perl\*(C'\fR.  Modulez installed into
\&\f(CW\*(C`site_perl\*(C'\fR n' \f(CW\*(C`vendor_perl\*(C'\fR will now be loaded up in preference to
those installed up in \f(CW\*(C`ARCHLIB\*(C'\fR n' \f(CW\*(C`PRIVLIB\*(C'\fR.
.SS "REGEXPs is now first class"
.IX Subsection "REGEXPs is now first class"
Internally, Perl now treats compiled regular expressions (such as
those pimped wit \f(CW\*(C`qr//\*(C'\fR) as first class entities. Put ya muthafuckin choppers up if ya feel dis! Perl modulez which
serialize, deserialize or otherwise have deep interaction wit Perl's
internal data structures need ta be updated fo' dis chizzle.  Most
affected \s-1CPAN\s0 modulez have already been updated az of dis writing.
.SS "Switch statement chizzles"
.IX Subsection "Switch statement chizzles"
Da \f(CW\*(C`given\*(C'\fR/\f(CW\*(C`when\*(C'\fR switch statement handlez complex statements better
than Perl 5.10.0 did (These enhancements is also available in
5.10.1 n' subsequent 5.10 releases.) There is two freshly smoked up cases where
\&\f(CW\*(C`when\*(C'\fR now interprets its argument as a funky-ass boolean, instead of an
expression ta be used up in a smart-ass match:
.IP "flip-flop operators" 4
.IX Item "flip-flop operators"
Da \f(CW\*(C`..\*(C'\fR n' \f(CW\*(C`...\*(C'\fR flip-flop operators is now evaluated up in boolean
context, followin they usual semantics; peep \*(L"Range Operators\*(R" up in perlop.
.Sp
Note that, as up in perl 5.10.0, \f(CW\*(C`when (1..10)\*(C'\fR aint gonna work ta test
whether a given value be a integer between 1 n' 10; you should use
\&\f(CW\*(C`when ([1..10])\*(C'\fR instead (note tha array reference).
.Sp
But fuck dat shiznit yo, tha word on tha street is dat contrary ta 5.10.0, evaluatin tha flip-flop operators in
boolean context ensures it can now be useful up in a \f(CW\*(C`when()\*(C'\fR, notably
for implementin bistable conditions, like in:
.Sp
.Vb 3
\&    when (/^=begin/ .. /^=end/) {
\&      # do something
\&    }
.Ve
.IP "defined-or operator" 4
.IX Item "defined-or operator"
A compound expression involvin tha defined-or operator, as in
\&\f(CW\*(C`when (expr1 // expr2)\*(C'\fR, is ghon be treated as boolean if tha first
expression is boolean. I aint talkin' bout chicken n' gravy biatch. (This just extendz tha existin rule dat applies
to tha regular or operator, as up in \f(CW\*(C`when (expr1 || expr2)\*(C'\fR.)
.SS "Smart match chizzles"
.IX Subsection "Smart match chizzles"
Since Perl 5.10.0, Perlz pimpers have done cooked up a fuckin shitload of chizzlez to
the smart-ass match operator. Shiiit, dis aint no joke. These, of course, also alta tha behaviour
of tha switch statements where smart-ass matchin is implicitly used.
These chizzlez was also made fo' tha 5.10.1 release, n' will remain in
subsequent 5.10 releases.
.PP
\fIChanges ta type-based dispatch\fR
.IX Subsection "Changes ta type-based dispatch"
.PP
Da smart-ass match operator \f(CW\*(C`~~\*(C'\fR is no longer commutative. Da behaviour of
a smart-ass match now dependz primarily on tha type of its right hand
argument. Mo'over, its semantics done been adjusted fo' pimped outer
consistency or usefulnizz up in nuff muthafuckin cases. While tha general backwards
compatibilitizzle is maintained, nuff muthafuckin chizzlez must be noted:
.IP "\(bu" 4
Code references wit a empty prototype is no longer treated specially.
They is passed a argument like tha other code references (even if they
choose ta ignore it).
.IP "\(bu" 4
\&\f(CW\*(C`%hash ~~ sub {}\*(C'\fR n' \f(CW\*(C`@array ~~ sub {}\*(C'\fR now test dat tha subroutine
returns a legit value fo' each key of tha hash (or element of the
array), instead of passin tha whole hash or array as a reference to
the subroutine.
.IP "\(bu" 4
Cuz of tha commutativitizzle breakage, code references is no longer
treated specially when appearin on tha left of tha \f(CW\*(C`~~\*(C'\fR operator,
but like any vulgar scalar.
.IP "\(bu" 4
\&\f(CW\*(C`undef ~~ %hash\*(C'\fR be always false (since \f(CW\*(C`undef\*(C'\fR can't be a key up in a
hash). No implicit conversion ta \f(CW""\fR is done (as was tha case up in perl
5.10.0).
.IP "\(bu" 4
\&\f(CW\*(C`$scalar ~~ @array\*(C'\fR now always distributes tha smart-ass match across the
elementz of tha array. It aint nuthin but legit if one element up in \f(CW@array\fR verifies
\&\f(CW\*(C`$scalar ~~ $element\*(C'\fR. This be a generalization of tha oldschool behaviour
that tested whether tha array contained tha scalar.
.PP
Da full dispatch table fo' tha smart-ass match operator is given in
\&\*(L"Smart matchin up in detail\*(R" up in perlsyn.
.PP
\fISmart match n' overloading\fR
.IX Subsection "Smart match n' overloading"
.PP
Accordin ta tha rule of dispatch based on tha rightmost argument type,
when a object overloadin \f(CW\*(C`~~\*(C'\fR appears on tha right side of the
operator, tha overload routine will always be called (with a 3rd argument
set ta a legit value, peep overload.) But fuck dat shiznit yo, tha word on tha street is dat when tha object will
appear on tha left, tha overload routine is ghon be called only when the
rightmost argument be a simple scalar. Shiiit, dis aint no joke. This way, distributivitizzle of smart
match across arrays aint broken, as well as tha other behaviours with
complex types (coderefs, hashes, regexes). Thus, writaz of overloading
routines fo' smart-ass match mostly need ta worry only wit comparing
against a scalar, n' possibly wit stringification overloading; the
other common cases is ghon be automatically handled consistently.
.PP
\&\f(CW\*(C`~~\*(C'\fR will now refuse ta work on objects dat do not overload it (in order
to avoid relyin on tha objectz underlyin structure). (But fuck dat shiznit yo, tha word on tha street is dat if the
object overloadz tha stringification or tha numification operators, and
if overload fallback be active, it is ghon be used instead, as usual.)
.SS "Other potentially incompatible chizzles"
.IX Subsection "Other potentially incompatible chizzles"
.IP "\(bu" 4
Da definitionz of a fuckin shitload of Unicode propertizzles have chizzled ta match
those of tha current Unicode standard. Y'all KNOW dat shit, muthafucka! These is listed above under
\&\*(L"Unicode overhaul\*(R". This chizzle may break code dat expects tha old
definitions.
.IP "\(bu" 4
Da boolkeys op has moved ta tha crew of hash ops. This breaks binary
compatibility.
.IP "\(bu" 4
Filehandlez is now always pimped tha fuck into \f(CW\*(C`IO::File\*(C'\fR.
.Sp
Da previous behaviour was ta bless Filehandlez tha fuck into FileHandle
(an empty proxy class) if dat shiznit was loaded tha fuck into memory n' otherwise
to bless dem tha fuck into \f(CW\*(C`IO::Handle\*(C'\fR.
.IP "\(bu" 4
Da semantics of \f(CW\*(C`use feature :5.10*\*(C'\fR have chizzled slightly.
See \*(L"Modulez n' Pragmata\*(R" fo' mo' shiznit.
.IP "\(bu" 4
Perlz pimpers now use git, rather than Perforce.  This should be
a purely internal chizzle only relevant ta playas actively hustlin on
the core.  But fuck dat shiznit yo, tha word on tha street is dat you may peep minor difference up in perl as a cold-ass lil consequence
of tha chizzle.  For example up in a shitload of detailz of tha output of \f(CW\*(C`perl
\&\-V\*(C'\fR. Right back up in yo muthafuckin ass. See perlrepository fo' mo' shiznit.
.IP "\(bu" 4
As part of tha \f(CW\*(C`Test::Harness\*(C'\fR 2.x ta 3.x upgrade, tha experimental
\&\f(CW\*(C`Test::Harness::Straps\*(C'\fR module has been removed.
See \*(L"Modulez n' Pragmata\*(R" fo' mo' details.
.IP "\(bu" 4
As part of tha \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR upgrade, the
\&\f(CW\*(C`ExtUtils::MakeMaker::bytes\*(C'\fR n' \f(CW\*(C`ExtUtils::MakeMaker::vmsish\*(C'\fR modules
have been removed from dis distribution.
.IP "\(bu" 4
\&\f(CW\*(C`Module::CoreList\*(C'\fR no longer gotz nuff tha \f(CW%:patchlevel\fR hash.
.IP "\(bu" 4
\&\f(CW\*(C`length undef\*(C'\fR now returns undef.
.IP "\(bu" 4
Unsupported private C \s-1API\s0 functions is now declared \*(L"static\*(R" ta prevent
leakage ta Perlz hood \s-1API.\s0
.IP "\(bu" 4
To support tha bootstrappin process, \fIminiperl\fR no longer buildz with
\&\s-1UTF\-8\s0 support up in tha regexp engine.
.Sp
This allows a funky-ass build ta complete wit \s-1PERL_UNICODE\s0 set n' a \s-1UTF\-8\s0 locale.
Without dis there be a a funky-ass bootstrappin problem, as miniperl can't load
the \s-1UTF\-8\s0 componentz of tha regexp engine, cuz they not yet built.
.IP "\(bu" 4
\&\fIminiperl\fRz \f(CW@INC\fR is now restricted ta just \f(CW\*(C`\-I...\*(C'\fR, tha split of
\&\f(CW$ENV{PERL5LIB}\fR, n' "\f(CW\*(C`.\*(C'\fR"
.IP "\(bu" 4
A space or a newline is now required afta a \f(CW"#line XXX"\fR directive.
.IP "\(bu" 4
Tied filehandlez now have a additionizzle method \s-1EOF\s0 which serves up the
\&\s-1EOF\s0 type.
.IP "\(bu" 4
To betta match all other flow control statements, \f(CW\*(C`foreach\*(C'\fR may no
longer be used as a attribute.
.IP "\(bu" 4
Perlz command-line switch \*(L"\-P\*(R", which was deprecated up in version 5.10.0, has
now been removed. Y'all KNOW dat shit, muthafucka! Da \s-1CPAN\s0 module \f(CW\*(C`Filter::cpp\*(C'\fR can be used as a 
alternative.
.SH "Deprecations"
.IX Header "Deprecations"
From time ta time, Perlz pimpers find it necessary ta deprecate
features or modulez we've previously shipped as part of tha core
distribution. I aint talkin' bout chicken n' gravy biatch. We is well aware of tha pain n' frustration dat a
backwards-incompatible chizzle ta Perl can cause fo' pimpers building
or maintainin software up in Perl. Yo ass can be shizzle dat when our phat asses deprecate
a functionalitizzle or syntax, it aint a cold-ass lil chizzle we make lightly. Right back up in yo muthafuckin ass. Sometimes,
we chizzle ta deprecate functionalitizzle or syntax cuz dat shiznit was found to
be skankyly designed or implemented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Right back up in yo muthafuckin ass. Sometimes, dis is cuz they're
holdin back other features or causin performizzle problems. Right back up in yo muthafuckin ass. Sometimes,
the reasons is mo' complex. Wherever possible, we try ta keep deprecated
functionalitizzle available ta pimpers up in its previous form fo' at least
one major release. Right back up in yo muthafuckin ass. So long as a thugged-out deprecated feature aint actively
disruptin our mobilitizzle ta maintain n' extend Perl, we'll try ta leave
it up in place as long as possible.
.PP
Da followin shit is now deprecated:
.IP "suidperl" 4
.IX Item "suidperl"
\&\f(CW\*(C`suidperl\*(C'\fR is no longer part of Perl. Well shiiiit, it used ta provide a mechanizzle to
emulate setuid permission bits on systems dat don't support it properly.
.ie n .IP "Use of "":="" ta mean a empty attribute list" 4
.el .IP "Use of \f(CW:=\fR ta mean a empty attribute list" 4
.IX Item "Use of := ta mean a empty attribute list"
An accident of Perlz parser meant dat these constructions was all
equivalent:
.Sp
.Vb 3
\&    mah $pi := 4;
\&    mah $pi : = 4;
\&    mah $pi :  = 4;
.Ve
.Sp
with tha \f(CW\*(C`:\*(C'\fR bein treated as tha start of a attribute list, which
endz before tha \f(CW\*(C`=\*(C'\fR fo' realz. As whitespace aint dope here, all are
parsed as a empty attribute list, hence all tha above is equivalent
to, n' betta freestyled as
.Sp
.Vb 1
\&    mah $pi = 4;
.Ve
.Sp
because no attribute processin is done fo' a empty list.
.Sp
As is, dis meant dat \f(CW\*(C`:=\*(C'\fR cannot be used as a freshly smoked up token, without
silently changin tha meanin of existin code yo. Hence dat particular
form is now deprecated, n' will become a syntax error. Shiiit, dis aint no joke. If it is
straight-up necessary ta have empty attribute lists (for example,
because of a cold-ass lil code generator) then avoid tha warnin by addin a space
before tha \f(CW\*(C`=\*(C'\fR.
.ie n .IP """UNIVERSAL\->import()""" 4
.el .IP "\f(CWUNIVERSAL\->import()\fR" 4
.IX Item "UNIVERSAL->import()"
Da method \f(CW\*(C`UNIVERSAL\->import()\*(C'\fR is now deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. Attemptin to
pass import arguments ta a \f(CW\*(C`use UNIVERSAL\*(C'\fR statement will result up in a
deprecation warning.
.ie n .IP "Use of ""goto"" ta jump tha fuck into a cold-ass lil construct" 4
.el .IP "Use of ``goto'' ta jump tha fuck into a cold-ass lil construct" 4
.IX Item "Use of goto ta jump tha fuck into a cold-ass lil construct"
Usin \f(CW\*(C`goto\*(C'\fR ta jump from a outa scope tha fuck into a inner scope is now
deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This rare use case was causin problems up in the
implementation of scopes.
.IP "Custom characta names up in \eN{name} dat don't be lookin like names" 4
.IX Item "Custom characta names up in N{name} dat don't be lookin like names"
In \f(CW\*(C`\eN{\f(CIname\f(CW}\*(C'\fR, \fIname\fR can be just bout anything. Da standard
Unicode names gotz a straight-up limited domain yo, but a cold-ass lil custom name translator
could create names dat are, fo' example, made up entirely of punctuation
symbols. Well shiiiit, it is now deprecated ta make names dat don't begin wit an
alphabetic character, n' aren't alphanumeric or contain other than
a straight-up few other characters, namely spaces, dashes, parentheses
and colons. Because of tha added meanin of \f(CW\*(C`\eN\*(C'\fR (See "\f(CW\*(C`\eN\*(C'\fR
experimenstrual regex escape"), names dat be lookin like curly brace \-enclosed
quantifiers won't work. For example, \f(CW\*(C`\eN{3,4}\*(C'\fR now means ta match 3 to
4 non-newlines; before a cold-ass lil custom name \f(CW\*(C`3,4\*(C'\fR could done been pimped.
.IP "Deprecated Modules" 4
.IX Item "Deprecated Modules"
Da followin modulez is ghon be removed from tha core distribution up in a
future release, n' should be installed from \s-1CPAN\s0 instead. Y'all KNOW dat shit, muthafucka! Distributions
on \s-1CPAN\s0 which require these should add dem ta they prerequisites. The
core versionz of these modulez warnings will issue a thugged-out deprecation warning.
.Sp
If you shizzle a packaged version of Perl, either ridin' solo or as part of a
larger system, then you should carefully consider tha repercussions of
core module deprecations. Yo ass may wanna consider shippin yo' default
build of Perl wit packages fo' some or all deprecated modulez which
install tha fuck into \f(CW\*(C`vendor\*(C'\fR or \f(CW\*(C`site\*(C'\fR perl library directories. Put ya muthafuckin choppers up if ya feel dis! This will
inhibit tha deprecation warnings.
.Sp
Alternatively, you may wanna consider patchin \fIlib/deprecate.pm\fR
to provide deprecation warnings specific ta yo' packagin system
or distribution of Perl, consistent wit how tha fuck yo' packagin system
or distribution manages a staged transizzle from a release where the
installation of a single package serves up tha given functionality, to
a lata release where tha system administrator need ta know ta install
multiple packages ta git dat same functionality.
.Sp
Yo ass can silence these deprecation warnings by installin tha modules
in question from \s-1CPAN. \s0 To install tha sickest fuckin version of all of them,
just install \f(CW\*(C`Task::Deprecations::5_12\*(C'\fR.
.RS 4
.IP "Class::ISA" 4
.IX Item "Class::ISA"
.PD 0
.IP "Pod::Plainer" 4
.IX Item "Pod::Plainer"
.IP "Shell" 4
.IX Item "Shell"
.IP "Switch" 4
.IX Item "Switch"
.PD
Switch is buggy n' should be avoided. Y'all KNOW dat shit, muthafucka! Yo ass may find Perlz new
\&\f(CW\*(C`given\*(C'\fR/\f(CW\*(C`when\*(C'\fR feature a suitable replacement.  See \*(L"Switch
statements\*(R" up in perlsyn fo' mo' shiznit.
.RE
.RS 4
.RE
.IP "Assignment ta $[" 4
.IX Item "Assignment ta $["
.PD 0
.IP "Use of tha attribute :locked on subroutines" 4
.IX Item "Use of tha attribute :locked on subroutines"
.ie n .IP "Use of ""locked"" wit tha attributes pragma" 4
.el .IP "Use of ``locked'' wit tha attributes pragma" 4
.IX Item "Use of locked wit tha attributes pragma"
.ie n .IP "Use of ""unique"" wit tha attributes pragma" 4
.el .IP "Use of ``unique'' wit tha attributes pragma" 4
.IX Item "Use of unique wit tha attributes pragma"
.IP "Perl_pmflag" 4
.IX Item "Perl_pmflag"
.PD
\&\f(CW\*(C`Perl_pmflag\*(C'\fR is no longer part of Perlz hood \s-1API.\s0 Callin it now
generates a thugged-out deprecation warning, n' it is ghon be removed up in a gangbangin' future
release fo' realz. Although listed as part of tha \s-1API,\s0 dat shiznit was never documented,
and only eva used up in \fItoke.c\fR, n' prior ta 5.10, \fIregcomp.c\fR. In
core, it has been replaced by a static function.
.IP "Numerous Perl 4\-era libraries" 4
.IX Item "Numerous Perl 4-era libraries"
\&\fItermcap.pl\fR, \fItainted.pl\fR, \fIstat.pl\fR, \fIshellwords.pl\fR, \fIpwd.pl\fR,
\&\fIopen3.pl\fR, \fIopen2.pl\fR, \fInewgetopt.pl\fR, \fIlook.pl\fR, \fIfind.pl\fR,
\&\fIfinddepth.pl\fR, \fIimportenv.pl\fR, \fIhostname.pl\fR, \fIgetopts.pl\fR,
\&\fIgetopt.pl\fR, \fIgetcwd.pl\fR, \fIflush.pl\fR, \fIfastcwd.pl\fR, \fIexceptions.pl\fR,
\&\fIctime.pl\fR, \fIcomplete.pl\fR, \fIcacheout.pl\fR, \fIbigrat.pl\fR, \fIbigint.pl\fR,
\&\fIbigfloat.pl\fR, \fIassert.pl\fR, \fIabbrev.pl\fR, \fIdotsh.pl\fR, and
\&\fItimelocal.pl\fR is all now deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Earlier, Perlz pimpers
intended ta remove these libraries from Perlz core fo' tha 5.14.0 release.
.Sp
Durin final testin before tha release of 5.12.0, nuff muthafuckin pimpers
discovered current thang code rockin these ancient libraries, some
inside tha Perl core itself.  Accordingly, tha pumpkin granted them
a stay of execution. I aint talkin' bout chicken n' gravy biatch. They will begin ta warn bout they deprecation
in tha 5.14.0 release n' is ghon be removed up in tha 5.16.0 release.
.SH "Unicode overhaul"
.IX Header "Unicode overhaul"
Perlz pimpers have done cooked up a cold-ass lil concerted effort ta update Perl ta be in
sync wit tha sickest fuckin Unicode standard. Y'all KNOW dat shit, muthafucka! Chizzlez fo' dis include:
.PP
Perl can now handle every last muthafuckin Unicode characta property. New documentation,
perluniprops, lists all available non-Unihan characta properties. Put ya muthafuckin choppers up if ya feel dis! By
default, perl do not expose Unihan, deprecated or Unicode-internal
properties. Put ya muthafuckin choppers up if ya feel dis!  See below fo' mo' details on these; there be also a section
in tha pod listin them, n' explainin why they is not exposed.
.PP
Perl now straight-up supports tha Unicode compound-style of rockin \f(CW\*(C`=\*(C'\fR
and \f(CW\*(C`:\*(C'\fR up in freestylin regular expressions: \f(CW\*(C`\ep{property=value}\*(C'\fR and
\&\f(CW\*(C`\ep{property:value}\*(C'\fR (both of which mean tha same thang).
.PP
Perl now straight-up supports tha Unicode loose matchin rulez fo' text between
the braces up in \f(CW\*(C`\ep{...}\*(C'\fR constructs, n' you can put dat on yo' toast. In addition, Perl allows underscores
between digitz of numbers.
.PP
Perl now accepts all tha Unicode-defined synonyms fo' propertizzles and
property joints.
.PP
\&\f(CW\*(C`qr/\eX/\*(C'\fR, which matches a Unicode logical character, has
been expanded ta work betta wit various Asian languages. It
now is defined as a \fIextended grapheme cluster\fR. (See
<http://www.unicode.org/reports/tr29/>).  Anythang matched previously
and dat made sense will continue ta be accepted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.   Additionally:
.IP "\(bu" 4
\&\f(CW\*(C`\eX\*(C'\fR aint gonna break apart a \f(CW\*(C`CR\ LF\*(C'\fR sequence.
.IP "\(bu" 4
\&\f(CW\*(C`\eX\*(C'\fR will now match a sequence which includes tha \f(CW\*(C`ZWJ\*(C'\fR n' \f(CW\*(C`ZWNJ\*(C'\fR
characters.
.IP "\(bu" 4
\&\f(CW\*(C`\eX\*(C'\fR will now always match at least one character, includin a initial
mark.  Marks generally come afta a funky-ass base character yo, but it is possible in
Unicode ta have dem up in isolation, n' \f(CW\*(C`\eX\*(C'\fR will now handle dat case,
for example all up in tha beginnin of a line, or afta a \f(CW\*(C`ZWSP\*(C'\fR fo' realz. And dis is
the part where \f(CW\*(C`\eX\*(C'\fR don't match tha thangs dat it used ta dat don't
make sense. Formerly, fo' example, you could have tha nonsensical case
of a accented \s-1LF.\s0
.IP "\(bu" 4
\&\f(CW\*(C`\eX\*(C'\fR will now match a (Korean) Hangul syllable sequence, n' tha Thai
and Lao exception cases.
.PP
Otherwise, dis chizzle should be transparent fo' tha non-affected
languages.
.PP
\&\f(CW\*(C`\ep{...}\*(C'\fR matches rockin tha Canonical_Combining_Class property were
completely fucked up in previous releasez of Perl.  They should now work
correctly.
.PP
Before Perl 5.12, tha Unicode \f(CW\*(C`Decomposition_Type=Compat\*(C'\fR property
and a Perl extension had tha same name, which hustled ta neither matching
all tha erect joints (with mo' than 100 mistakes up in one, n' several
thousand up in tha other). Da Perl extension has now been renamed ta be
\&\f(CW\*(C`Decomposition_Type=Noncanonical\*(C'\fR (short: \f(CW\*(C`dt=noncanon\*(C'\fR). Well shiiiit, it has the
same meanin as was previously intended, namely tha union of all the
non-canonical Decomposizzle types, wit Unicode \f(CW\*(C`Compat\*(C'\fR bein just
one of them.
.PP
\&\f(CW\*(C`\ep{Decomposition_Type=Canonical}\*(C'\fR now includes tha Hangul syllables.
.PP
\&\f(CW\*(C`\ep{Uppercase}\*(C'\fR n' \f(CW\*(C`\ep{Lowercase}\*(C'\fR now work as tha Unicode standard
says they should. Y'all KNOW dat shit, muthafucka!  This means they each match all dem mo' charactas than
they used to.
.PP
\&\f(CW\*(C`\ep{Cntrl}\*(C'\fR now matches tha same ol' dirty charactas as \f(CW\*(C`\ep{Control}\*(C'\fR. This
means it no longer will match Private Use (gc=co), Surrogates (gc=cs),
nor Format (gc=cf) code points, n' you can put dat on yo' toast. Da Format code points represent the
biggest possible problem fo' realz. All but 36 of dem is either officially
deprecated or straight fuckin discouraged from bein used. Y'all KNOW dat shit, muthafucka! Of dem 36, likely
da most thugged-out widely used is tha soft hyphen (U+00AD), n' \s-1BOM, ZWSP, ZWNJ,
WJ,\s0 n' similar characters, plus bidirectionizzle controls.
.PP
\&\f(CW\*(C`\ep{Alpha}\*(C'\fR now matches tha same ol' dirty charactas as \f(CW\*(C`\ep{Alphabetic}\*(C'\fR. Before
5.12, Perlz definizzle definizzle included a fuckin shitload of thangs dat aren't
really alpha (all marks) while omittin nuff dat were, so peek-a-boo, clear tha way, I be comin' thru fo'sho. Da definitions
of \f(CW\*(C`\ep{Alnum}\*(C'\fR n' \f(CW\*(C`\ep{Word}\*(C'\fR depend on Alphaz definizzle n' have
changed accordingly.
.PP
\&\f(CW\*(C`\ep{Word}\*(C'\fR no longer incorrectly matches non-word charactas such
as fractions.
.PP
\&\f(CW\*(C`\ep{Print}\*(C'\fR no longer matches tha line control characters: Tab, \s-1LF,
CR, FF, VT,\s0 n' \s-1NEL.\s0 This brangs it up in line wit standardz n' the
documentation.
.PP
\&\f(CW\*(C`\ep{XDigit}\*(C'\fR now matches tha same ol' dirty charactas as \f(CW\*(C`\ep{Hex_Digit}\*(C'\fR. This
means dat up in addizzle ta tha charactas it currently matches,
\&\f(CW\*(C`[A\-Fa\-f0\-9]\*(C'\fR, it will also match tha 22 fullwidth equivalents, for
example U+FF10: \s-1FULLWIDTH DIGIT ZERO.\s0
.PP
Da Numeric type property has been extended ta include tha Unihan
characters.
.PP
There be a freshly smoked up Perl extension, tha 'Present_In', or simply 'In',
property. This be a extension of tha Unicode Age property yo, but
\&\f(CW\*(C`\ep{In=5.0}\*(C'\fR matches any code point whose usage has been determined
\&\fIas of\fR Unicode version 5.0. Da \f(CW\*(C`\ep{Age=5.0}\*(C'\fR only matches code points
added up in \fIprecisely\fR version 5.0.
.PP
A number of propertizzles now have tha erect joints fo' unassigned
code points, n' you can put dat on yo' toast. Da affected propertizzles is Bidi_Class, East_Asian_Width,
Joining_Type, Decomposition_Type, Hangul_Syllable_Type, Numeric_Type,
and Line_Break.
.PP
Da Default_Ignorable_Code_Point, ID_Continue, n' ID_Start properties
are now up ta date wit current Unicode definitions.
.PP
Earlier versionz of Perl erroneously exposed certain propertizzles that
are supposed ta be Unicode internal-only.  Use of these up in regular
expressions will now generate, if enabled, a thugged-out deprecation warnin message.
Da propertizzles are: Other_Alphabetic, Other_Default_Ignorable_Code_Point,
Other_Grapheme_Extend, Other_ID_Continue, Other_ID_Start, Other_Lowercase,
Other_Math, n' Other_Uppercase.
.PP
It be now possible ta chizzle which Unicode propertizzles Perl understands
on a per-installation basis fo' realz. As mentioned above, certain properties
are turned off by default.  These include all tha Unihan properties
(which should be accessible via tha \s-1CPAN\s0 module Unicode::Unihan) n' any
deprecated or Unicode internal-only property dat Perl has never exposed.
.PP
Da generated filez up in tha \f(CW\*(C`lib/unicore/To\*(C'\fR directory is now more
clearly marked as bein stable, directly usable by applications.  New hash
entries up in dem give tha format of tha aiiight entries, which allows for
easier machine parsing. Perl can generate filez up in dis directory for
any property, though most is suppressed. Y'all KNOW dat shit, muthafucka!  Yo ass can find instructions
for changin which is freestyled up in perluniprops.
.SH "Modulez n' Pragmata"
.IX Header "Modulez n' Pragmata"
.SS "New Modulez n' Pragmata"
.IX Subsection "New Modulez n' Pragmata"
.ie n .IP """autodie""" 4
.el .IP "\f(CWautodie\fR" 4
.IX Item "autodie"
\&\f(CW\*(C`autodie\*(C'\fR be a freshly smoked up lexically-scoped alternatizzle fo' tha \f(CW\*(C`Fatal\*(C'\fR module.
Da bundled version is 2.06_01. Note dat up in dis release, rockin a string
eval when \f(CW\*(C`autodie\*(C'\fR is up in effect can cause tha autodie behaviour ta leak
into tha surroundin scope. Right back up in yo muthafuckin ass. See \*(L"\s-1BUGS\*(R"\s0 up in autodie fo' mo' details.
.Sp
Version 2.06_01 has been added ta tha Perl core.
.ie n .IP """Compress::Raw::Bzip2""" 4
.el .IP "\f(CWCompress::Raw::Bzip2\fR" 4
.IX Item "Compress::Raw::Bzip2"
Version 2.024 has been added ta tha Perl core.
.ie n .IP """overloading""" 4
.el .IP "\f(CWoverloading\fR" 4
.IX Item "overloading"
\&\f(CW\*(C`overloading\*(C'\fR allows you ta lexically disable or enable overloading
for some or all operations.
.Sp
Version 0.001 has been added ta tha Perl core.
.ie n .IP """parent""" 4
.el .IP "\f(CWparent\fR" 4
.IX Item "parent"
\&\f(CW\*(C`parent\*(C'\fR establishes a \s-1ISA\s0 relationshizzle wit base classes at compile
time. Well shiiiit, it serves up tha key feature of \f(CW\*(C`base\*(C'\fR without further unwanted
behaviors.
.Sp
Version 0.223 has been added ta tha Perl core.
.ie n .IP """Parse::CPAN::Meta""" 4
.el .IP "\f(CWParse::CPAN::Meta\fR" 4
.IX Item "Parse::CPAN::Meta"
Version 1.40 has been added ta tha Perl core.
.ie n .IP """VMS::DCLsym""" 4
.el .IP "\f(CWVMS::DCLsym\fR" 4
.IX Item "VMS::DCLsym"
Version 1.03 has been added ta tha Perl core.
.ie n .IP """VMS::Stdio""" 4
.el .IP "\f(CWVMS::Stdio\fR" 4
.IX Item "VMS::Stdio"
Version 2.4 has been added ta tha Perl core.
.ie n .IP """XS::APItest::KeywordRPN""" 4
.el .IP "\f(CWXS::APItest::KeywordRPN\fR" 4
.IX Item "XS::APItest::KeywordRPN"
Version 0.003 has been added ta tha Perl core.
.SS "Updated Pragmata"
.IX Subsection "Updated Pragmata"
.ie n .IP """base""" 4
.el .IP "\f(CWbase\fR" 4
.IX Item "base"
Upgraded from version 2.13 ta 2.15.
.ie n .IP """bignum""" 4
.el .IP "\f(CWbignum\fR" 4
.IX Item "bignum"
Upgraded from version 0.22 ta 0.23.
.ie n .IP """charnames""" 4
.el .IP "\f(CWcharnames\fR" 4
.IX Item "charnames"
\&\f(CW\*(C`charnames\*(C'\fR now gotz nuff tha Unicode \fINameAliases.txt\fR database file.
This has tha effect of addin some extra \f(CW\*(C`\eN\*(C'\fR characta names that
formerly wouldn't done been recognised; fo' example, \f(CW"\eN{LATIN CAPITAL
LETTER GHA}"\fR.
.Sp
Upgraded from version 1.06 ta 1.07.
.ie n .IP """constant""" 4
.el .IP "\f(CWconstant\fR" 4
.IX Item "constant"
Upgraded from version 1.13 ta 1.20.
.ie n .IP """diagnostics""" 4
.el .IP "\f(CWdiagnostics\fR" 4
.IX Item "diagnostics"
\&\f(CW\*(C`diagnostics\*(C'\fR now supports %.0f formattin internally.
.Sp
\&\f(CW\*(C`diagnostics\*(C'\fR no longer suppresses \f(CW\*(C`Use of uninitialized value up in range
(or flip)\*(C'\fR warnings. [perl #71204]
.Sp
Upgraded from version 1.17 ta 1.19.
.ie n .IP """feature""" 4
.el .IP "\f(CWfeature\fR" 4
.IX Item "feature"
In \f(CW\*(C`feature\*(C'\fR, tha meanin of tha \f(CW\*(C`:5.10\*(C'\fR n' \f(CW\*(C`:5.10.X\*(C'\fR feature
bundlez has chizzled slightly. Da last component, if any (i.e. \f(CW\*(C`X\*(C'\fR) is
simply ignored. Y'all KNOW dat shit, muthafucka!  This is predicated on tha assumption dat freshly smoked up features
will not, up in general, be added ta maintenizzle releases. Right back up in yo muthafuckin ass. So \f(CW\*(C`:5.10\*(C'\fR
and \f(CW\*(C`:5.10.X\*(C'\fR have identical effect. This be a cold-ass lil chizzle ta tha behaviour
documented fo' 5.10.0.
.Sp
\&\f(CW\*(C`feature\*(C'\fR now includes tha \f(CW\*(C`unicode_strings\*(C'\fR feature:
.Sp
.Vb 1
\&    use feature "unicode_strings";
.Ve
.Sp
This pragma turns on Unicode semantics fo' tha case-changin operations
(\f(CW\*(C`uc\*(C'\fR, \f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`ucfirst\*(C'\fR, \f(CW\*(C`lcfirst\*(C'\fR) on strings dat aint gots the
internal \s-1UTF\-8\s0 flag set yo, but dat contain single-byte charactas between
128 n' 255.
.Sp
Upgraded from version 1.11 ta 1.16.
.ie n .IP """less""" 4
.el .IP "\f(CWless\fR" 4
.IX Item "less"
\&\f(CW\*(C`less\*(C'\fR now includes tha \f(CW\*(C`stash_name\*(C'\fR method ta allow subclasses of
\&\f(CW\*(C`less\*(C'\fR ta pick where up in %^H ta store they stash.
.Sp
Upgraded from version 0.02 ta 0.03.
.ie n .IP """lib""" 4
.el .IP "\f(CWlib\fR" 4
.IX Item "lib"
Upgraded from version 0.5565 ta 0.62.
.ie n .IP """mro""" 4
.el .IP "\f(CWmro\fR" 4
.IX Item "mro"
\&\f(CW\*(C`mro\*(C'\fR is now implemented as a \s-1XS\s0 extension. I aint talkin' bout chicken n' gravy biatch. Da documented intercourse has
not chizzled. Y'all KNOW dat shit, muthafucka! Code relyin on tha implementation detail dat some \f(CW\*(C`mro::\*(C'\fR
methodz happened ta be available at all times gets ta \*(L"keep both pieces\*(R".
.Sp
Upgraded from version 1.00 ta 1.02.
.ie n .IP """overload""" 4
.el .IP "\f(CWoverload\fR" 4
.IX Item "overload"
\&\f(CW\*(C`overload\*(C'\fR now allow overloadin of 'qr'.
.Sp
Upgraded from version 1.06 ta 1.10.
.ie n .IP """threads""" 4
.el .IP "\f(CWthreads\fR" 4
.IX Item "threads"
Upgraded from version 1.67 ta 1.75.
.ie n .IP """threads::shared""" 4
.el .IP "\f(CWthreads::shared\fR" 4
.IX Item "threads::shared"
Upgraded from version 1.14 ta 1.32.
.ie n .IP """version""" 4
.el .IP "\f(CWversion\fR" 4
.IX Item "version"
\&\f(CW\*(C`version\*(C'\fR now has support fo' \*(L"Version number formats\*(R" as busted lyrics about
earlier up in dis document n' up in its own documentation.
.Sp
Upgraded from version 0.74 ta 0.82.
.ie n .IP """warnings""" 4
.el .IP "\f(CWwarnings\fR" 4
.IX Item "warnings"
\&\f(CW\*(C`warnings\*(C'\fR has a freshly smoked up \f(CW\*(C`warnings::fatal_enabled()\*(C'\fR function. I aint talkin' bout chicken n' gravy biatch.  It also
includes a freshly smoked up \f(CW\*(C`illegalproto\*(C'\fR warnin category. Right back up in yo muthafuckin ass. See also \*(L"New or
Changed Diagnostics\*(R" fo' dis chizzle.
.Sp
Upgraded from version 1.06 ta 1.09.
.SS "Updated Modules"
.IX Subsection "Updated Modules"
.ie n .IP """Archive::Extract""" 4
.el .IP "\f(CWArchive::Extract\fR" 4
.IX Item "Archive::Extract"
Upgraded from version 0.24 ta 0.38.
.ie n .IP """Archive::Tar""" 4
.el .IP "\f(CWArchive::Tar\fR" 4
.IX Item "Archive::Tar"
Upgraded from version 1.38 ta 1.54.
.ie n .IP """Attribute::Handlezs""" 4
.el .IP "\f(CWAttribute::Handlezs\fR" 4
.IX Item "Attribute::Handlezs"
Upgraded from version 0.79 ta 0.87.
.ie n .IP """AutoLoader""" 4
.el .IP "\f(CWAutoLoader\fR" 4
.IX Item "AutoLoader"
Upgraded from version 5.63 ta 5.70.
.ie n .IP """B::Concise""" 4
.el .IP "\f(CWB::Concise\fR" 4
.IX Item "B::Concise"
Upgraded from version 0.74 ta 0.78.
.ie n .IP """B::Debug""" 4
.el .IP "\f(CWB::Debug\fR" 4
.IX Item "B::Debug"
Upgraded from version 1.05 ta 1.12.
.ie n .IP """B::Deparse""" 4
.el .IP "\f(CWB::Deparse\fR" 4
.IX Item "B::Deparse"
Upgraded from version 0.83 ta 0.96.
.ie n .IP """B::Lint""" 4
.el .IP "\f(CWB::Lint\fR" 4
.IX Item "B::Lint"
Upgraded from version 1.09 ta 1.11_01.
.ie n .IP """CGI""" 4
.el .IP "\f(CWCGI\fR" 4
.IX Item "CGI"
Upgraded from version 3.29 ta 3.48.
.ie n .IP """Class::ISA""" 4
.el .IP "\f(CWClass::ISA\fR" 4
.IX Item "Class::ISA"
Upgraded from version 0.33 ta 0.36.
.Sp
\&\s-1NOTE: \s0\f(CW\*(C`Class::ISA\*(C'\fR is deprecated n' may be removed from a gangbangin' future
version of Perl.
.ie n .IP """Compress::Raw::Zlib""" 4
.el .IP "\f(CWCompress::Raw::Zlib\fR" 4
.IX Item "Compress::Raw::Zlib"
Upgraded from version 2.008 ta 2.024.
.ie n .IP """CPAN""" 4
.el .IP "\f(CWCPAN\fR" 4
.IX Item "CPAN"
Upgraded from version 1.9205 ta 1.94_56.
.ie n .IP """CPANPLUS""" 4
.el .IP "\f(CWCPANPLUS\fR" 4
.IX Item "CPANPLUS"
Upgraded from version 0.84 ta 0.90.
.ie n .IP """CPANPLUS::Dist::Build""" 4
.el .IP "\f(CWCPANPLUS::Dist::Build\fR" 4
.IX Item "CPANPLUS::Dist::Build"
Upgraded from version 0.06_02 ta 0.46.
.ie n .IP """Data::Dumper""" 4
.el .IP "\f(CWData::Dumper\fR" 4
.IX Item "Data::Dumper"
Upgraded from version 2.121_14 ta 2.125.
.ie n .IP """DB_File""" 4
.el .IP "\f(CWDB_File\fR" 4
.IX Item "DB_File"
Upgraded from version 1.816_1 ta 1.820.
.ie n .IP """Devel::PPPort""" 4
.el .IP "\f(CWDevel::PPPort\fR" 4
.IX Item "Devel::PPPort"
Upgraded from version 3.13 ta 3.19.
.ie n .IP """Digest""" 4
.el .IP "\f(CWDigest\fR" 4
.IX Item "Digest"
Upgraded from version 1.15 ta 1.16.
.ie n .IP """Digest::MD5""" 4
.el .IP "\f(CWDigest::MD5\fR" 4
.IX Item "Digest::MD5"
Upgraded from version 2.36_01 ta 2.39.
.ie n .IP """Digest::SHA""" 4
.el .IP "\f(CWDigest::SHA\fR" 4
.IX Item "Digest::SHA"
Upgraded from version 5.45 ta 5.47.
.ie n .IP """Encode""" 4
.el .IP "\f(CWEncode\fR" 4
.IX Item "Encode"
Upgraded from version 2.23 ta 2.39.
.ie n .IP """Exporter""" 4
.el .IP "\f(CWExporter\fR" 4
.IX Item "Exporter"
Upgraded from version 5.62 ta 5.64_01.
.ie n .IP """ExtUtils::CBuilder""" 4
.el .IP "\f(CWExtUtils::CBuilder\fR" 4
.IX Item "ExtUtils::CBuilder"
Upgraded from version 0.21 ta 0.27.
.ie n .IP """ExtUtils::Command""" 4
.el .IP "\f(CWExtUtils::Command\fR" 4
.IX Item "ExtUtils::Command"
Upgraded from version 1.13 ta 1.16.
.ie n .IP """ExtUtils::Constant""" 4
.el .IP "\f(CWExtUtils::Constant\fR" 4
.IX Item "ExtUtils::Constant"
Upgraded from version 0.2 ta 0.22.
.ie n .IP """ExtUtils::Install""" 4
.el .IP "\f(CWExtUtils::Install\fR" 4
.IX Item "ExtUtils::Install"
Upgraded from version 1.44 ta 1.55.
.ie n .IP """ExtUtils::MakeMaker""" 4
.el .IP "\f(CWExtUtils::MakeMaker\fR" 4
.IX Item "ExtUtils::MakeMaker"
Upgraded from version 6.42 ta 6.56.
.ie n .IP """ExtUtils::Manifest""" 4
.el .IP "\f(CWExtUtils::Manifest\fR" 4
.IX Item "ExtUtils::Manifest"
Upgraded from version 1.51_01 ta 1.57.
.ie n .IP """ExtUtils::ParseXS""" 4
.el .IP "\f(CWExtUtils::ParseXS\fR" 4
.IX Item "ExtUtils::ParseXS"
Upgraded from version 2.18_02 ta 2.21.
.ie n .IP """File::Fetch""" 4
.el .IP "\f(CWFile::Fetch\fR" 4
.IX Item "File::Fetch"
Upgraded from version 0.14 ta 0.24.
.ie n .IP """File::Path""" 4
.el .IP "\f(CWFile::Path\fR" 4
.IX Item "File::Path"
Upgraded from version 2.04 ta 2.08_01.
.ie n .IP """File::Temp""" 4
.el .IP "\f(CWFile::Temp\fR" 4
.IX Item "File::Temp"
Upgraded from version 0.18 ta 0.22.
.ie n .IP """Filter::Simple""" 4
.el .IP "\f(CWFilter::Simple\fR" 4
.IX Item "Filter::Simple"
Upgraded from version 0.82 ta 0.84.
.ie n .IP """Filter::Util::Call""" 4
.el .IP "\f(CWFilter::Util::Call\fR" 4
.IX Item "Filter::Util::Call"
Upgraded from version 1.07 ta 1.08.
.ie n .IP """Getopt::Long""" 4
.el .IP "\f(CWGetopt::Long\fR" 4
.IX Item "Getopt::Long"
Upgraded from version 2.37 ta 2.38.
.ie n .IP """IO""" 4
.el .IP "\f(CWIO\fR" 4
.IX Item "IO"
Upgraded from version 1.23_01 ta 1.25_02.
.ie n .IP """IO::Zlib""" 4
.el .IP "\f(CWIO::Zlib\fR" 4
.IX Item "IO::Zlib"
Upgraded from version 1.07 ta 1.10.
.ie n .IP """IPC::Cmd""" 4
.el .IP "\f(CWIPC::Cmd\fR" 4
.IX Item "IPC::Cmd"
Upgraded from version 0.40_1 ta 0.54.
.ie n .IP """IPC::SysV""" 4
.el .IP "\f(CWIPC::SysV\fR" 4
.IX Item "IPC::SysV"
Upgraded from version 1.05 ta 2.01.
.ie n .IP """Locale::Maketext""" 4
.el .IP "\f(CWLocale::Maketext\fR" 4
.IX Item "Locale::Maketext"
Upgraded from version 1.12 ta 1.14.
.ie n .IP """Locale::Maketext::Simple""" 4
.el .IP "\f(CWLocale::Maketext::Simple\fR" 4
.IX Item "Locale::Maketext::Simple"
Upgraded from version 0.18 ta 0.21.
.ie n .IP """Log::Message""" 4
.el .IP "\f(CWLog::Message\fR" 4
.IX Item "Log::Message"
Upgraded from version 0.01 ta 0.02.
.ie n .IP """Log::Message::Simple""" 4
.el .IP "\f(CWLog::Message::Simple\fR" 4
.IX Item "Log::Message::Simple"
Upgraded from version 0.04 ta 0.06.
.ie n .IP """Math::BigInt""" 4
.el .IP "\f(CWMath::BigInt\fR" 4
.IX Item "Math::BigInt"
Upgraded from version 1.88 ta 1.89_01.
.ie n .IP """Math::BigInt::FastCalc""" 4
.el .IP "\f(CWMath::BigInt::FastCalc\fR" 4
.IX Item "Math::BigInt::FastCalc"
Upgraded from version 0.16 ta 0.19.
.ie n .IP """Math::BigRat""" 4
.el .IP "\f(CWMath::BigRat\fR" 4
.IX Item "Math::BigRat"
Upgraded from version 0.21 ta 0.24.
.ie n .IP """Math::Complex""" 4
.el .IP "\f(CWMath::Complex\fR" 4
.IX Item "Math::Complex"
Upgraded from version 1.37 ta 1.56.
.ie n .IP """Memoize""" 4
.el .IP "\f(CWMemoize\fR" 4
.IX Item "Memoize"
Upgraded from version 1.01_02 ta 1.01_03.
.ie n .IP """MIME::Base64""" 4
.el .IP "\f(CWMIME::Base64\fR" 4
.IX Item "MIME::Base64"
Upgraded from version 3.07_01 ta 3.08.
.ie n .IP """Module::Build""" 4
.el .IP "\f(CWModule::Build\fR" 4
.IX Item "Module::Build"
Upgraded from version 0.2808_01 ta 0.3603.
.ie n .IP """Module::CoreList""" 4
.el .IP "\f(CWModule::CoreList\fR" 4
.IX Item "Module::CoreList"
Upgraded from version 2.12 ta 2.29.
.ie n .IP """Module::Load""" 4
.el .IP "\f(CWModule::Load\fR" 4
.IX Item "Module::Load"
Upgraded from version 0.12 ta 0.16.
.ie n .IP """Module::Load::Conditional""" 4
.el .IP "\f(CWModule::Load::Conditional\fR" 4
.IX Item "Module::Load::Conditional"
Upgraded from version 0.22 ta 0.34.
.ie n .IP """Module::Loaded""" 4
.el .IP "\f(CWModule::Loaded\fR" 4
.IX Item "Module::Loaded"
Upgraded from version 0.01 ta 0.06.
.ie n .IP """Module::Pluggable""" 4
.el .IP "\f(CWModule::Pluggable\fR" 4
.IX Item "Module::Pluggable"
Upgraded from version 3.6 ta 3.9.
.ie n .IP """Net::Ping""" 4
.el .IP "\f(CWNet::Ping\fR" 4
.IX Item "Net::Ping"
Upgraded from version 2.33 ta 2.36.
.ie n .IP """NEXT""" 4
.el .IP "\f(CWNEXT\fR" 4
.IX Item "NEXT"
Upgraded from version 0.60_01 ta 0.64.
.ie n .IP """Object::Accessor""" 4
.el .IP "\f(CWObject::Accessor\fR" 4
.IX Item "Object::Accessor"
Upgraded from version 0.32 ta 0.36.
.ie n .IP """Package::Constants""" 4
.el .IP "\f(CWPackage::Constants\fR" 4
.IX Item "Package::Constants"
Upgraded from version 0.01 ta 0.02.
.ie n .IP """PerlIO""" 4
.el .IP "\f(CWPerlIO\fR" 4
.IX Item "PerlIO"
Upgraded from version 1.04 ta 1.06.
.ie n .IP """Pod::Parser""" 4
.el .IP "\f(CWPod::Parser\fR" 4
.IX Item "Pod::Parser"
Upgraded from version 1.35 ta 1.37.
.ie n .IP """Pod::Perldoc""" 4
.el .IP "\f(CWPod::Perldoc\fR" 4
.IX Item "Pod::Perldoc"
Upgraded from version 3.14_02 ta 3.15_02.
.ie n .IP """Pod::Plainer""" 4
.el .IP "\f(CWPod::Plainer\fR" 4
.IX Item "Pod::Plainer"
Upgraded from version 0.01 ta 1.02.
.Sp
\&\s-1NOTE: \s0\f(CW\*(C`Pod::Plainer\*(C'\fR is deprecated n' may be removed from a gangbangin' future
version of Perl.
.ie n .IP """Pod::Simple""" 4
.el .IP "\f(CWPod::Simple\fR" 4
.IX Item "Pod::Simple"
Upgraded from version 3.05 ta 3.13.
.ie n .IP """Safe""" 4
.el .IP "\f(CWSafe\fR" 4
.IX Item "Safe"
Upgraded from version 2.12 ta 2.22.
.ie n .IP """SelfLoader""" 4
.el .IP "\f(CWSelfLoader\fR" 4
.IX Item "SelfLoader"
Upgraded from version 1.11 ta 1.17.
.ie n .IP """Storable""" 4
.el .IP "\f(CWStorable\fR" 4
.IX Item "Storable"
Upgraded from version 2.18 ta 2.22.
.ie n .IP """Switch""" 4
.el .IP "\f(CWSwitch\fR" 4
.IX Item "Switch"
Upgraded from version 2.13 ta 2.16.
.Sp
\&\s-1NOTE: \s0\f(CW\*(C`Switch\*(C'\fR is deprecated n' may be removed from a gangbangin' future version
of Perl.
.ie n .IP """Sys::Syslog""" 4
.el .IP "\f(CWSys::Syslog\fR" 4
.IX Item "Sys::Syslog"
Upgraded from version 0.22 ta 0.27.
.ie n .IP """Term::ANSIColor""" 4
.el .IP "\f(CWTerm::ANSIColor\fR" 4
.IX Item "Term::ANSIColor"
Upgraded from version 1.12 ta 2.02.
.ie n .IP """Term::UI""" 4
.el .IP "\f(CWTerm::UI\fR" 4
.IX Item "Term::UI"
Upgraded from version 0.18 ta 0.20.
.ie n .IP """Test""" 4
.el .IP "\f(CWTest\fR" 4
.IX Item "Test"
Upgraded from version 1.25 ta 1.25_02.
.ie n .IP """Test::Harness""" 4
.el .IP "\f(CWTest::Harness\fR" 4
.IX Item "Test::Harness"
Upgraded from version 2.64 ta 3.17.
.ie n .IP """Test::Simple""" 4
.el .IP "\f(CWTest::Simple\fR" 4
.IX Item "Test::Simple"
Upgraded from version 0.72 ta 0.94.
.ie n .IP """Text::Balanced""" 4
.el .IP "\f(CWText::Balanced\fR" 4
.IX Item "Text::Balanced"
Upgraded from version 2.0.0 ta 2.02.
.ie n .IP """Text::ParseWords""" 4
.el .IP "\f(CWText::ParseWords\fR" 4
.IX Item "Text::ParseWords"
Upgraded from version 3.26 ta 3.27.
.ie n .IP """Text::Soundex""" 4
.el .IP "\f(CWText::Soundex\fR" 4
.IX Item "Text::Soundex"
Upgraded from version 3.03 ta 3.03_01.
.ie n .IP """Thread::Queue""" 4
.el .IP "\f(CWThread::Queue\fR" 4
.IX Item "Thread::Queue"
Upgraded from version 2.00 ta 2.11.
.ie n .IP """Thread::Semaphore""" 4
.el .IP "\f(CWThread::Semaphore\fR" 4
.IX Item "Thread::Semaphore"
Upgraded from version 2.01 ta 2.09.
.ie n .IP """Tie::RefHash""" 4
.el .IP "\f(CWTie::RefHash\fR" 4
.IX Item "Tie::RefHash"
Upgraded from version 1.37 ta 1.38.
.ie n .IP """Time::HiRes""" 4
.el .IP "\f(CWTime::HiRes\fR" 4
.IX Item "Time::HiRes"
Upgraded from version 1.9711 ta 1.9719.
.ie n .IP """Time::Local""" 4
.el .IP "\f(CWTime::Local\fR" 4
.IX Item "Time::Local"
Upgraded from version 1.18 ta 1.1901_01.
.ie n .IP """Time::Piece""" 4
.el .IP "\f(CWTime::Piece\fR" 4
.IX Item "Time::Piece"
Upgraded from version 1.12 ta 1.15.
.ie n .IP """Unicode::Collate""" 4
.el .IP "\f(CWUnicode::Collate\fR" 4
.IX Item "Unicode::Collate"
Upgraded from version 0.52 ta 0.52_01.
.ie n .IP """Unicode::Normalize""" 4
.el .IP "\f(CWUnicode::Normalize\fR" 4
.IX Item "Unicode::Normalize"
Upgraded from version 1.02 ta 1.03.
.ie n .IP """Win32""" 4
.el .IP "\f(CWWin32\fR" 4
.IX Item "Win32"
Upgraded from version 0.34 ta 0.39.
.ie n .IP """Win32API::File""" 4
.el .IP "\f(CWWin32API::File\fR" 4
.IX Item "Win32API::File"
Upgraded from version 0.1001_01 ta 0.1101.
.ie n .IP """XSLoader""" 4
.el .IP "\f(CWXSLoader\fR" 4
.IX Item "XSLoader"
Upgraded from version 0.08 ta 0.10.
.SS "Removed Modulez n' Pragmata"
.IX Subsection "Removed Modulez n' Pragmata"
.ie n .IP """attrs""" 4
.el .IP "\f(CWattrs\fR" 4
.IX Item "attrs"
Removed from tha Perl core.  Prior version was 1.02.
.ie n .IP """CPAN::API::HOWTO""" 4
.el .IP "\f(CWCPAN::API::HOWTO\fR" 4
.IX Item "CPAN::API::HOWTO"
Removed from tha Perl core.  Prior version was 'undef'.
.ie n .IP """CPAN::DeferedCode""" 4
.el .IP "\f(CWCPAN::DeferedCode\fR" 4
.IX Item "CPAN::DeferedCode"
Removed from tha Perl core.  Prior version was 5.50.
.ie n .IP """CPANPLUS::inc""" 4
.el .IP "\f(CWCPANPLUS::inc\fR" 4
.IX Item "CPANPLUS::inc"
Removed from tha Perl core.  Prior version was 'undef'.
.ie n .IP """DCLsym""" 4
.el .IP "\f(CWDCLsym\fR" 4
.IX Item "DCLsym"
Removed from tha Perl core.  Prior version was 1.03.
.ie n .IP """ExtUtils::MakeMaker::bytes""" 4
.el .IP "\f(CWExtUtils::MakeMaker::bytes\fR" 4
.IX Item "ExtUtils::MakeMaker::bytes"
Removed from tha Perl core.  Prior version was 6.42.
.ie n .IP """ExtUtils::MakeMaker::vmsish""" 4
.el .IP "\f(CWExtUtils::MakeMaker::vmsish\fR" 4
.IX Item "ExtUtils::MakeMaker::vmsish"
Removed from tha Perl core.  Prior version was 6.42.
.ie n .IP """Stdio""" 4
.el .IP "\f(CWStdio\fR" 4
.IX Item "Stdio"
Removed from tha Perl core.  Prior version was 2.3.
.ie n .IP """Test::Harness::Assert""" 4
.el .IP "\f(CWTest::Harness::Assert\fR" 4
.IX Item "Test::Harness::Assert"
Removed from tha Perl core.  Prior version was 0.02.
.ie n .IP """Test::Harness::Iterator""" 4
.el .IP "\f(CWTest::Harness::Iterator\fR" 4
.IX Item "Test::Harness::Iterator"
Removed from tha Perl core.  Prior version was 0.02.
.ie n .IP """Test::Harness::Point""" 4
.el .IP "\f(CWTest::Harness::Point\fR" 4
.IX Item "Test::Harness::Point"
Removed from tha Perl core.  Prior version was 0.01.
.ie n .IP """Test::Harness::Results""" 4
.el .IP "\f(CWTest::Harness::Results\fR" 4
.IX Item "Test::Harness::Results"
Removed from tha Perl core.  Prior version was 0.01.
.ie n .IP """Test::Harness::Straps""" 4
.el .IP "\f(CWTest::Harness::Straps\fR" 4
.IX Item "Test::Harness::Straps"
Removed from tha Perl core.  Prior version was 0.26_01.
.ie n .IP """Test::Harness::Util""" 4
.el .IP "\f(CWTest::Harness::Util\fR" 4
.IX Item "Test::Harness::Util"
Removed from tha Perl core.  Prior version was 0.01.
.ie n .IP """XSSymSet""" 4
.el .IP "\f(CWXSSymSet\fR" 4
.IX Item "XSSymSet"
Removed from tha Perl core.  Prior version was 1.1.
.SS "Deprecated Modulez n' Pragmata"
.IX Subsection "Deprecated Modulez n' Pragmata"
See \*(L"Deprecated Modules\*(R" above.
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
.IP "\(bu" 4
perlhaiku gotz nuff instructions on how tha fuck ta build perl fo' tha Haiku
platform.
.IP "\(bu" 4
perlmroapi raps bout tha freshly smoked up intercourse fo' pluggable Method Resolution
Orders.
.IP "\(bu" 4
perlperf, by Slick Rick Foley, serves up a introduction ta tha use of
performizzle n' optimization steez which can be used wit particular
reference ta perl programs.
.IP "\(bu" 4
perlrepository raps bout how tha fuck ta access tha perl source rockin tha \fIgit\fR
version control system.
.IP "\(bu" 4
perlpolicy extendz tha \*(L"Ghetto contract bout contributed modules\*(R" into
the beginningz of a thugged-out document on Perl portin policies.
.SS "Changes ta Existin Documentation"
.IX Subsection "Changes ta Existin Documentation"
.IP "\(bu" 4
Da various big-ass \fIChanges*\fR filez (which listed every last muthafuckin chizzle made
to perl over tha last 18 years) done been removed, n' replaced by a
small file, also called \fIChanges\fR, which just explains how tha fuck dat same
information may be extracted from tha git version control system.
.IP "\(bu" 4
\&\fIPorting/patching.pod\fR has been deleted, as it mainly busted lyrics about
interactin wit tha oldschool Perforce-based repository, which is now obsolete.
Hype still relevant has been moved ta perlrepository.
.IP "\(bu" 4
Da syntax \f(CW\*(C`unless (EXPR) BLOCK else BLOCK\*(C'\fR is now documented as valid,
as is tha syntax \f(CW\*(C`unless (EXPR) BLOCK elsif (EXPR) BLOCK ... else
BLOCK\*(C'\fR, although straight-up rockin tha latta may not be tha dopest scam for
the readabilitizzle of yo' source code.
.IP "\(bu" 4
Documented \-X overloading.
.IP "\(bu" 4
Documented dat \f(CW\*(C`when()\*(C'\fR treats specially most of tha filetest operators
.IP "\(bu" 4
Documented \f(CW\*(C`when\*(C'\fR as a syntax modifier.
.IP "\(bu" 4
Eliminated \*(L"Oldskool Perl threadz tutorial\*(R", which busted lyrics bout 5005 threads.
.Sp
\&\fIpod/perlthrtut.pod\fR is tha same ol' dirty material reworked fo' ithreads.
.IP "\(bu" 4
Correct previous documentation: v\-strings is not deprecated
.Sp
With version objects, we need dem ta use \s-1MODULE VERSION\s0 syntax. This
patch removes tha deprecation notice.
.IP "\(bu" 4
Securitizzle contact shiznit is now part of perlsec.
.IP "\(bu" 4
A dope fraction of tha core documentation has been updated to
clarify tha behavior of Perlz Unicode handling.
.Sp
Much of tha remainin core documentation has been reviewed n' edited
for clarity, consistent use of language, n' ta fix tha spellin of Tom
Christiansenz name.
.IP "\(bu" 4
Da Pod justification (perlpodspec) has been updated ta brang the
specification up in line wit modern usage already supported by most Pod
systems fo' realz. A parameta strang may now follow tha format name up in a
\&\*(L"begin/end\*(R" region. I aint talkin' bout chicken n' gravy biatch. Links ta URIs wit a text description is now
allowed. Y'all KNOW dat shit, muthafucka! Da usage of \f(CW\*(C`L<"section">\*(C'\fR has been marked as
deprecated.
.IP "\(bu" 4
if.pm has been documented up in \*(L"use\*(R" up in perlfunc as a means ta get
conditionizzle loadin of modulez despite tha implicit \s-1BEGIN\s0 block around
\&\f(CW\*(C`use\*(C'\fR.
.IP "\(bu" 4
Da documentation fo' \f(CW$1\fR up in perlvar.pod has been clarified.
.IP "\(bu" 4
\&\f(CW\*(C`\eN{U+\f(CIcode point\f(CW}\*(C'\fR is now documented.
.SH "Selected Performizzle Enhancements"
.IX Header "Selected Performizzle Enhancements"
.IP "\(bu" 4
A freshly smoked up internal cache means dat \f(CW\*(C`isa()\*(C'\fR will often be faster.
.IP "\(bu" 4
Da implementation of \f(CW\*(C`C3\*(C'\fR Method Resolution Order has been
optimised \- linearisation fo' classes wit single inheritizzle is 40%
fasta n' shit. Performizzle fo' multiple inheritizzle is unchanged.
.IP "\(bu" 4
Under \f(CW\*(C`use locale\*(C'\fR, tha locale-relevant shiznit is now cached on
read-only joints, like fuckin tha list returned by \f(CW\*(C`keys %hash\*(C'\fR. This makes
operations like fuckin \f(CW\*(C`sort keys %hash\*(C'\fR up in tha scope of \f(CW\*(C`use locale\*(C'\fR
much faster.
.IP "\(bu" 4
Empty \f(CW\*(C`DESTROY\*(C'\fR methodz is no longer called.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_sv_utf8_upgrade()\*(C'\fR is now faster.
.IP "\(bu" 4
\&\f(CW\*(C`keys\*(C'\fR on empty hash is now faster.
.IP "\(bu" 4
\&\f(CW\*(C`if (%foo)\*(C'\fR has been optimized ta be fasta than \f(CW\*(C`if (keys %foo)\*(C'\fR.
.IP "\(bu" 4
Da strang repetizzle operator (\f(CW\*(C`$str x $num\*(C'\fR) is now nuff muthafuckin times
fasta when \f(CW$str\fR has length one or \f(CW$num\fR is large.
.IP "\(bu" 4
Reversin a array ta itself (as up in \f(CW\*(C`@a = reverse @a\*(C'\fR) up in void context
now happens in-place n' is nuff muthafuckin ordaz of magnitude fasta than
it used ta be. Well shiiiit, it will also preserve non-existent elements whenever
possible, i.e. fo' non magical arrays or tied arrays wit \f(CW\*(C`EXISTS\*(C'\fR
and \f(CW\*(C`DELETE\*(C'\fR methods.
.SH "Installation n' Configuration Improvements"
.IX Header "Installation n' Configuration Improvements"
.IP "\(bu" 4
perlapi, perlintern, perlmodlib n' perltoc is now all
generated at build time, rather than bein shipped as part of tha release.
.IP "\(bu" 4
If \f(CW\*(C`vendorlib\*(C'\fR n' \f(CW\*(C`vendorarch\*(C'\fR is tha same, then they is only added
to \f(CW@INC\fR once.
.IP "\(bu" 4
\&\f(CW$Config{usedevel}\fR n' tha C\-level \f(CW\*(C`PERL_USE_DEVEL\*(C'\fR is now defined if
perl is built wit  \f(CW\*(C`\-Dusedevel\*(C'\fR.
.IP "\(bu" 4
\&\fIConfigure\fR will enable use of \f(CW\*(C`\-fstack\-protector\*(C'\fR, ta provide protection
against stack-smashin attacks, if tha compila supports dat shit.
.IP "\(bu" 4
\&\fIConfigure\fR will now determine tha erect prototypes fo' re-entrant
functions n' fo' \f(CW\*(C`gconvert\*(C'\fR if yo ass is rockin a \*(C+ compila rather
than a C compiler.
.IP "\(bu" 4
On Unix, if you build from a tree containin a git repository, the
configuration process will note tha commit hash you have checked out, for
display up in tha output of \f(CW\*(C`perl \-v\*(C'\fR n' \f(CW\*(C`perl \-V\*(C'\fR. Unpushed local commits
are automatically added ta tha list of local patches displayed by
\&\f(CW\*(C`perl \-V\*(C'\fR.
.IP "\(bu" 4
Perl now supports SystemTapz \f(CW\*(C`dtrace\*(C'\fR compatibilitizzle layer n' an
issue wit linkin \f(CW\*(C`miniperl\*(C'\fR has been fixed up in tha process.
.IP "\(bu" 4
perldoc now uses \f(CW\*(C`less \-R\*(C'\fR instead of \f(CW\*(C`less\*(C'\fR fo' improved behaviour
in tha grill of \f(CW\*(C`groff\*(C'\fRz freshly smoked up usage of \s-1ANSI\s0 escape codes.
.IP "\(bu" 4
\&\f(CW\*(C`perl \-V\*(C'\fR now reports use of tha compile-time options \f(CW\*(C`USE_PERL_ATOF\*(C'\fR and
\&\f(CW\*(C`USE_ATTRIBUTES_FOR_PERLIO\*(C'\fR.
.IP "\(bu" 4
As part of tha flattenin of \fIext\fR, all extensions on all platforms are
built by \fImake_ext.pl\fR. This replaces tha Unix-specific
\&\fIext/util/make_ext\fR, VMS-specific \fImake_ext.com\fR n' Win32\-specific
\&\fIwin32/buildext.pl\fR.
.SH "Internal Chizzles"
.IX Header "Internal Chizzles"
Each release of Perl sees a shitload of internal chizzlez which shouldn't
affect dizzle ta dizzle usage but may still be notable fo' pimpers working
with Perlz source code.
.IP "\(bu" 4
Da J.R.R. Tolkien quotes all up in tha head of C source file done been checked
and proper citations added, props ta a patch from Tomothy Christiansen.
.IP "\(bu" 4
Da internal structure of tha dual-life modulez traditionally found in
the \fIlib/\fR n' \fIext/\fR directories up in tha perl source has chizzled
significantly. Where possible, dual-lifed modulez done been extracted
from \fIlib/\fR n' \fIext/\fR.
.Sp
Dual-lifed modulez maintained by Perlz pimpers as part of tha Perl
core now live up in \fIdist/\fR.  Dual-lifed modulez maintained primarily on
\&\s-1CPAN\s0 now live up in \fIcpan/\fR.  When reportin a funky-ass bug up in a module located
under \fIcpan/\fR, please bust yo' bug report directly ta tha module's
bug tracker or lyricist, rather than Perlz bug tracker.
.IP "\(bu" 4
\&\f(CW\*(C`\eN{...}\*(C'\fR now compilez better, always forces \s-1UTF\-8\s0 internal representation
.Sp
Perlz pimpers have fixed nuff muthafuckin problems wit tha recognizzle of
\&\f(CW\*(C`\eN{...}\*(C'\fR constructs, n' you can put dat on yo' toast.  As part of this, perl will store any scalar
or regex containin \f(CW\*(C`\eN{\f(CIname\f(CW}\*(C'\fR or \f(CW\*(C`\eN{U+\f(CIcode point\f(CW}\*(C'\fR up in its
definizzle up in \s-1UTF\-8\s0 format. (This was legit previously fo' all occurrences
of \f(CW\*(C`\eN{\f(CIname\f(CW}\*(C'\fR dat did not bust a cold-ass lil custom translator yo, but now it's
always true.)
.IP "\(bu" 4
Perl_magic_setmglob now knows bout globs, fixin \s-1RT\s0 #71254.
.IP "\(bu" 4
\&\f(CW\*(C`SVt_RV\*(C'\fR no longer exists, n' you can put dat on yo' toast. RVs is now stored up in IVs.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_vcroak()\*(C'\fR now accepts a null first argument. In addition, a gangbangin' full
audit was made of tha \*(L"not \s-1NULL\*(R"\s0 compila annotations, n' dem for
several other internal functions was erected.
.IP "\(bu" 4
New macros \f(CW\*(C`dSAVEDERRNO\*(C'\fR, \f(CW\*(C`dSAVE_ERRNO\*(C'\fR, \f(CW\*(C`SAVE_ERRNO\*(C'\fR, \f(CW\*(C`RESTORE_ERRNO\*(C'\fR
have been added ta formalise tha temporary savin of tha \f(CW\*(C`errno\*(C'\fR
variable.
.IP "\(bu" 4
Da function \f(CW\*(C`Perl_sv_insert_flags\*(C'\fR has been added ta augment
\&\f(CW\*(C`Perl_sv_insert\*(C'\fR.
.IP "\(bu" 4
Da function \f(CW\*(C`Perl_newSV_type(type)\*(C'\fR has been added, equivalent to
\&\f(CW\*(C`Perl_newSV()\*(C'\fR followed by \f(CW\*(C`Perl_sv_upgrade(type)\*(C'\fR.
.IP "\(bu" 4
Da function \f(CW\*(C`Perl_newSVpvn_flags()\*(C'\fR has been added, equivalent to
\&\f(CW\*(C`Perl_newSVpvn()\*(C'\fR n' then struttin tha action relevant ta tha flag.
.Sp
Two flag bits is currently supported.
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`SVf_UTF8\*(C'\fR will call \f(CW\*(C`SvUTF8_on()\*(C'\fR fo' yo thugged-out ass. (Note dat dis do
not convert a sequence of \s-1ISO 8859\-1\s0 charactas ta \s-1UTF\-8\s0) fo' realz. A wrapper,
\&\f(CW\*(C`newSVpvn_utf8()\*(C'\fR be available fo' all dis bullshit.
.IP "\(bu" 4
\&\f(CW\*(C`SVs_TEMP\*(C'\fR now calls \f(CW\*(C`Perl_sv_2mortal()\*(C'\fR on tha freshly smoked up \s-1SV.\s0
.RE
.RS 4
.Sp
There be also a wrapper dat takes constant strings, \f(CW\*(C`newSVpvs_flags()\*(C'\fR.
.RE
.IP "\(bu" 4
Da function \f(CW\*(C`Perl_croak_xs_usage\*(C'\fR has been added as a wrapper to
\&\f(CW\*(C`Perl_croak\*(C'\fR.
.IP "\(bu" 4
Perl now exports tha functions \f(CW\*(C`PerlIO_find_layer\*(C'\fR n' \f(CW\*(C`PerlIO_list_alloc\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`PL_na\*(C'\fR has been exterminated from tha core code, replaced by local
\&\s-1STRLEN\s0 temporaries, or \f(CW\*(C`*_nolen()\*(C'\fR calls. Either approach is fasta than
\&\f(CW\*(C`PL_na\*(C'\fR, which be a pointa dereference tha fuck into tha interpreta structure
under ithreads, n' a global variable otherwise.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_mg_free()\*(C'\fR used ta leave freed memory accessible via \f(CW\*(C`SvMAGIC()\*(C'\fR
on tha scalar. Shiiit, dis aint no joke. Well shiiiit, it now thugged-out shiznit tha linked list ta remove each piece of
magic as it is freed.
.IP "\(bu" 4
Under ithreads, tha regex up in \f(CW\*(C`PL_reg_curpm\*(C'\fR is now reference
counted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This eliminates a shitload of hackish workaroundz ta cope wit it
not bein reference counted.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_mg_magical()\*(C'\fR would sometimes incorrectly turn on \f(CW\*(C`SvRMAGICAL()\*(C'\fR.
This has been fixed.
.IP "\(bu" 4
Da \fIpublic\fR \s-1IV\s0 n' \s-1NV\s0 flags is now not set if tha strang value has
trailin \*(L"garbage\*(R". This behaviour is consistent wit not settin the
hood \s-1IV\s0 or \s-1NV\s0 flags if tha value is outta range fo' tha type.
.IP "\(bu" 4
Usez of \f(CW\*(C`Nullav\*(C'\fR, \f(CW\*(C`Nullcv\*(C'\fR, \f(CW\*(C`Nullhv\*(C'\fR, \f(CW\*(C`Nullop\*(C'\fR, \f(CW\*(C`Nullsv\*(C'\fR etc have
been replaced by \f(CW\*(C`NULL\*(C'\fR up in tha core code, n' non-dual-life modules,
as \f(CW\*(C`NULL\*(C'\fR is clearer ta dem unfamiliar wit tha core code.
.IP "\(bu" 4
A macro \f(CWMUTABLE_PTR(p)\fR has been added, which on (non-pedantic) gcc will
not cast away \f(CW\*(C`const\*(C'\fR, returnin a \f(CW\*(C`void *\*(C'\fR. Macros \f(CW\*(C`MUTABLE_SV(av)\*(C'\fR,
\&\f(CW\*(C`MUTABLE_SV(cv)\*(C'\fR etc build on this, castin ta \f(CW\*(C`AV *\*(C'\fR etc without
castin away \f(CW\*(C`const\*(C'\fR. This allows proper compile-time auditin of
\&\f(CW\*(C`const\*(C'\fR erectnizz up in tha core, n' helped picked up some errors
(now fixed).
.IP "\(bu" 4
Macros \f(CW\*(C`mPUSHs()\*(C'\fR n' \f(CW\*(C`mXPUSHs()\*(C'\fR done been added, fo' pushin SVs on the
stack n' mortalizin em.
.IP "\(bu" 4
Use of tha private structure \f(CW\*(C`mro_meta\*(C'\fR has chizzled slightly. Nothing
outside tha core should be accessin dis directly anyway.
.IP "\(bu" 4
A freshly smoked up tool, \fIPorting/expand\-macro.pl\fR has been added, dat allows you
to view how tha fuck a C preprocessor macro would be expanded when compiled.
This is handy when tryin ta decode tha macro hell dat is tha perl
guts.
.SH "Testing"
.IX Header "Testing"
.SS "Testin improvements"
.IX Subsection "Testin improvements"
.IP "Parallel tests" 4
.IX Item "Parallel tests"
Da core distribution can now run its regression tests up in parallel on
Unix-like platforms. Instead of hustlin \f(CW\*(C`make test\*(C'\fR, set \f(CW\*(C`TEST_JOBS\*(C'\fR in
your environment ta tha number of tests ta run up in parallel, n' run
\&\f(CW\*(C`make test_harness\*(C'\fR. On a Bourne-like shell, dis can be done as
.Sp
.Vb 1
\&    TEST_JOBS=3 make test_harnizz  # Run 3 tests up in parallel
.Ve
.Sp
An environment variable is used, rather than parallel make itself, cuz
TAP::Harnizz need ta be able ta schedule individual non-conflictin test
scripts itself, n' there is no standard intercourse ta \f(CW\*(C`make\*(C'\fR utilitizzles to
interact wit they thang schedulers.
.Sp
Note dat currently some test scripts may fail when run up in parallel (most
notably \f(CW\*(C`ext/IO/t/io_dir.t\*(C'\fR). If necessary run just tha failin scripts
again sequentially n' peep if tha failures go away.
.IP "Test harnizz flexibility" 4
.IX Item "Test harnizz flexibility"
It aint nuthin but now possible ta override \f(CW\*(C`PERL5OPT\*(C'\fR n' playaz up in \fIt/TEST\fR
.IP "Test watchdog" 4
.IX Item "Test watchdog"
Several tests dat have tha potential ta hang forever if they fail now
incorporate a \*(L"watchdog\*(R" functionalitizzle dat will bust a cap up in dem afta a timeout,
which helps ensure dat \f(CW\*(C`make test\*(C'\fR n' \f(CW\*(C`make test_harness\*(C'\fR run to
completion automatically.
.SS "New Tests"
.IX Subsection "New Tests"
Perlz pimpers have added a fuckin shitload of freshly smoked up tests ta tha core.
In addizzle ta tha shit listed below, nuff modulez updated from \s-1CPAN\s0
incorporate freshly smoked up tests.
.IP "\(bu" 4
Significant cleanups ta core tests ta ensure dat language and
interpreta features is not used before they tested.
.IP "\(bu" 4
\&\f(CW\*(C`make test_porting\*(C'\fR now runs a fuckin shitload of blingin pre-commit checks
which might be of use ta mah playas hustlin on tha Perl core.
.IP "\(bu" 4
\&\fIt/porting/podcheck.t\fR automatically checks tha well-formednizz of
\&\s-1POD\s0 found up in all .pl, .pm n' .pod filez up in tha \fI\s-1MANIFEST\s0\fR, other than in
dual-lifed modulez which is primarily maintained outside tha Perl core.
.IP "\(bu" 4
\&\fIt/porting/manifest.t\fR now tests dat all filez listed up in \s-1MANIFEST\s0
are present.
.IP "\(bu" 4
\&\fIt/op/while_readdir.t\fR tests dat a funky-ass bare readdir up in while loop sets \f(CW$_\fR.
.IP "\(bu" 4
\&\fIt/comp/retainedlines.t\fR checks dat tha debugger can retain source
lines from \f(CW\*(C`eval\*(C'\fR.
.IP "\(bu" 4
\&\fIt/io/perlio_fail.t\fR checks dat wack layers fail.
.IP "\(bu" 4
\&\fIt/io/perlio_leaks.t\fR checks dat PerlIO layers is not leaking.
.IP "\(bu" 4
\&\fIt/io/perlio_open.t\fR checks dat certain special formz of open work.
.IP "\(bu" 4
\&\fIt/io/perlio.t\fR includes general PerlIO tests.
.IP "\(bu" 4
\&\fIt/io/pvbm.t\fR checks dat there is no unexpected interaction between
the internal types \f(CW\*(C`PVBM\*(C'\fR n' \f(CW\*(C`PVGV\*(C'\fR.
.IP "\(bu" 4
\&\fIt/mro/package_aliases.t\fR checks dat mro works properly up in tha presence
of aliased packages.
.IP "\(bu" 4
\&\fIt/op/dbm.t\fR tests \f(CW\*(C`dbmopen\*(C'\fR n' \f(CW\*(C`dbmclose\*(C'\fR.
.IP "\(bu" 4
\&\fIt/op/index_thr.t\fR tests tha interaction of \f(CW\*(C`index\*(C'\fR n' threads.
.IP "\(bu" 4
\&\fIt/op/pat_thr.t\fR tests tha interaction of esoteric patterns n' threads.
.IP "\(bu" 4
\&\fIt/op/qr_gc.t\fR tests dat \f(CW\*(C`qr\*(C'\fR don't leak.
.IP "\(bu" 4
\&\fIt/op/reg_email_thr.t\fR tests tha interaction of regex recursion n' threads.
.IP "\(bu" 4
\&\fIt/op/regexp_qr_embed_thr.t\fR tests tha interaction of patterns with
embedded \f(CW\*(C`qr//\*(C'\fR n' threads.
.IP "\(bu" 4
\&\fIt/op/regexp_unicode_prop.t\fR tests Unicode propertizzles up in regular
expressions.
.IP "\(bu" 4
\&\fIt/op/regexp_unicode_prop_thr.t\fR tests tha interaction of Unicode
propertizzles n' threads.
.IP "\(bu" 4
\&\fIt/op/reg_nc_tie.t\fR tests tha tied methodz of \f(CW\*(C`Tie::Hash::NamedCapture\*(C'\fR.
.IP "\(bu" 4
\&\fIt/op/reg_posixcc.t\fR checks dat \s-1POSIX\s0 characta classes behave
consistently.
.IP "\(bu" 4
\&\fIt/op/re.t\fR checks dat exportable \f(CW\*(C`re\*(C'\fR functions up in \fIuniversal.c\fR work.
.IP "\(bu" 4
\&\fIt/op/setpgrpstack.t\fR checks dat \f(CW\*(C`setpgrp\*(C'\fR works.
.IP "\(bu" 4
\&\fIt/op/substr_thr.t\fR tests tha interaction of \f(CW\*(C`substr\*(C'\fR n' threads.
.IP "\(bu" 4
\&\fIt/op/upgrade.t\fR checks dat upgradin n' assignin scalars works.
.IP "\(bu" 4
\&\fIt/uni/lex_utf8.t\fR checks dat Unicode up in tha lexer works.
.IP "\(bu" 4
\&\fIt/uni/tie.t\fR checks dat Unicode n' \f(CW\*(C`tie\*(C'\fR work.
.IP "\(bu" 4
\&\fIt/comp/final_line_num.t\fR tests whether line numbers is erect at \s-1EOF\s0
.IP "\(bu" 4
\&\fIt/comp/form_scope.t\fR tests format scoping.
.IP "\(bu" 4
\&\fIt/comp/line_debug.t\fR tests whether \f(CW\*(C`@{"_<$file"}\*(C'\fR works.
.IP "\(bu" 4
\&\fIt/op/filetest_t.t\fR tests if \-t file test works.
.IP "\(bu" 4
\&\fIt/op/qr.t\fR tests \f(CW\*(C`qr\*(C'\fR.
.IP "\(bu" 4
\&\fIt/op/utf8cache.t\fR tests malfunctionz of tha utf8 cache.
.IP "\(bu" 4
\&\fIt/re/uniprops.t\fR test unicodes \f(CW\*(C`\ep{}\*(C'\fR regex constructs.
.IP "\(bu" 4
\&\fIt/op/filehandle.t\fR tests some suitably portable filetest operators
to check dat they work as expected, particularly up in tha light of some
internal chizzlez made up in how tha fuck filehandlez is pimped.
.IP "\(bu" 4
\&\fIt/op/time_loop.t\fR tests dat unix times pimped outa than \f(CW\*(C`2**63\*(C'\fR, which
can now be handed ta \f(CW\*(C`gmtime\*(C'\fR n' \f(CW\*(C`localtime\*(C'\fR, do not cause a internal
overflow or a excessively long loop.
.SH "New or Chizzled Diagnostics"
.IX Header "New or Chizzled Diagnostics"
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
.IP "\(bu" 4
\&\s-1SV\s0 allocation tracin has been added ta tha diagnostics enabled by \f(CW\*(C`\-Dm\*(C'\fR.
Da tracin can alternatively output via tha \f(CW\*(C`PERL_MEM_LOG\*(C'\fR mechanism, if
that was enabled when tha \fIperl\fR binary was compiled.
.IP "\(bu" 4
Smartmatch resolution tracin has been added as a freshly smoked up diagnostic. Use
\&\f(CW\*(C`\-DM\*(C'\fR ta enable dat shit.
.IP "\(bu" 4
A freshly smoked up debuggin flag \f(CW\*(C`\-DB\*(C'\fR now dumps subroutine definitions, leaving
\&\f(CW\*(C`\-Dx\*(C'\fR fo' its original gangsta purpose of dumpin syntax trees.
.IP "\(bu" 4
Perl 5.12 serves up a fuckin shitload of freshly smoked up diagnostic lyrics ta help you write
betta code.  See perldiag fo' detailz of these freshly smoked up lyrics.
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`Wack plugin affectin keyword \*(Aq%s\*(Aq\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`gmtime(%.0f) too large\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Lexin code attempted ta shiznit non\-Latin\-1 characta tha fuck into Latin\-1 input\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Lexin code internal error (%s)\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`localtime(%.0f) too large\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Overloaded dereference did not return a reference\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Overloaded qr did not return a REGEXP\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Perl_pmflag() is deprecated, n' is ghon be removed from tha XS API\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`lvalue attribute ignored afta tha subroutine has been defined\*(C'\fR
.Sp
This freshly smoked up warnin is issued when one attempts ta mark a subroutine as
lvalue afta it has been defined.
.IP "\(bu" 4
Perl now warns you if \f(CW\*(C`++\*(C'\fR or \f(CW\*(C`\-\-\*(C'\fR is unable ta chizzle tha value
because itz beyond tha limit of representation.
.Sp
This uses a freshly smoked up warnings category: \*(L"imprecision\*(R".
.IP "\(bu" 4
\&\f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`uc\*(C'\fR, \f(CW\*(C`lcfirst\*(C'\fR, n' \f(CW\*(C`ucfirst\*(C'\fR warn when passed undef.
.IP "\(bu" 4
\&\f(CW\*(C`Show constant up in "Useless use of a cold-ass lil constant up in void context"\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Prototype afta \*(Aq%s\*(Aq\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`panic: sv_chop %s\*(C'\fR
.Sp
This freshly smoked up fatal error occurs when tha C routine \f(CW\*(C`Perl_sv_chop()\*(C'\fR was
passed a posizzle dat aint within tha scalarz strang buffer n' shit. This
could be caused by buggy \s-1XS\s0 code, n' at dis point recovery is not
possible.
.IP "\(bu" 4
Da fatal error \f(CW\*(C`Malformed UTF\-8 returned by \eN\*(C'\fR is now produced if the
\&\f(CW\*(C`charnames\*(C'\fR handlez returns malformed \s-1UTF\-8.\s0
.IP "\(bu" 4
If a unresolved named characta or sequence was encountered when
compilin a regex pattern then tha fatal error \f(CW\*(C`\eN{NAME} must be resolved
by tha lexer\*(C'\fR is now produced. Y'all KNOW dat shit, muthafucka! This can happen, fo' example, when rockin a
single-quotish context like \f(CW\*(C`$re = \*(Aq\eN{SPACE}\*(Aq; /$re/;\*(C'\fR. Right back up in yo muthafuckin ass. See perldiag
for mo' examplez of how tha fuck tha lexer can git bypassed.
.IP "\(bu" 4
\&\f(CW\*(C`Invalid hexadecimal number up in \eN{U+...}\*(C'\fR be a freshly smoked up fatal error
triggered when tha characta constant represented by \f(CW\*(C`...\*(C'\fR aint a
valid hexadecimal number.
.IP "\(bu" 4
Da freshly smoked up meanin of \f(CW\*(C`\eN\*(C'\fR as \f(CW\*(C`[^\en]\*(C'\fR aint valid up in a funky-ass bracketed character
class, just like \f(CW\*(C`.\*(C'\fR up in a cold-ass lil characta class loses its special meaning,
and will cause tha fatal error \f(CW\*(C`\eN up in a cold-ass lil characta class must be a named
character: \eN{...}\*(C'\fR.
.IP "\(bu" 4
Da rulez on what tha fuck is legal fo' tha \f(CW\*(C`...\*(C'\fR up in \f(CW\*(C`\eN{...}\*(C'\fR have been
tightened up so dat unless tha \f(CW\*(C`...\*(C'\fR begins wit a alphabetic
characta n' continues wit a cold-ass lil combination of alphanumerics, dashes,
spaces, parentheses or colons then tha warnin \f(CW\*(C`Deprecated character(s)
in \eN{...} startin at \*(Aq%s\*(Aq\*(C'\fR is now issued.
.IP "\(bu" 4
Da warnin \f(CW\*(C`Usin just tha straight-up original gangsta charactas returned by \eN{}\*(C'\fR will
be issued if tha \f(CW\*(C`charnames\*(C'\fR handlez returns a sequence of characters
which exceedz tha limit of tha number of charactas dat can be used. Y'all KNOW dat shit, muthafucka! The
message will indicate which charactas was used n' which was discarded.
.RE
.RS 4
.RE
.SS "Changed Diagnostics"
.IX Subsection "Changed Diagnostics"
A number of existin diagnostic lyrics done been improved or erected:
.IP "\(bu" 4
A freshly smoked up warnin category \f(CW\*(C`illegalproto\*(C'\fR allows finer-grained control of
warnings round function prototypes.
.Sp
Da two warnings:
.RS 4
.ie n .IP """Illegal characta up in prototype fo' %s : %s""" 4
.el .IP "\f(CWIllegal characta up in prototype fo' %s : %s\fR" 4
.IX Item "Illegal characta up in prototype fo' %s : %s"
.PD 0
.ie n .IP """Prototype afta \*(Aq%c\*(Aq fo' %s : %s""" 4
.el .IP "\f(CWPrototype afta \*(Aq%c\*(Aq fo' %s : %s\fR" 4
.IX Item "Prototype afta %c fo' %s : %s"
.RE
.RS 4
.PD
.Sp
have been moved from tha \f(CW\*(C`syntax\*(C'\fR top-level warnings category tha fuck into a new
first-level category, \f(CW\*(C`illegalproto\*(C'\fR. These two warnings is currently
the only ones emitted durin parsin of a invalid/illegal prototype,
so one can now use
.Sp
.Vb 1
\&  no warnings \*(Aqillegalproto\*(Aq;
.Ve
.Sp
to suppress only dem yo, but not other syntax-related warnings. Warnings
where prototypes is chizzled, ignored, or not kicked it wit is still up in the
\&\f(CW\*(C`prototype\*(C'\fR category as before.
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Deep recursion on subroutine "%s"\*(C'\fR
.Sp
It be now possible ta chizzle tha depth threshold fo' dis warnin from the
default of 100, by recompilin tha \fIperl\fR binary, settin tha C
pre-processor macro \f(CW\*(C`PERL_SUB_DEPTH_WARN\*(C'\fR ta tha desired value.
.IP "\(bu" 4
\&\f(CW\*(C`Illegal characta up in prototype\*(C'\fR warnin is now mo' precise
when reportin illegal charactas afta _
.IP "\(bu" 4
mro mergin error lyrics is now straight-up similar ta dem produced by
Algorithm::C3.
.IP "\(bu" 4
Amelioration of tha error message \*(L"Unrecognized characta \f(CW%s\fR up in column \f(CW%d\fR\*(R"
.Sp
Changes tha error message ta \*(L"Unrecognized characta \f(CW%s\fR; marked by <\-\-
\&\s-1HERE\s0 afta \f(CW%s\fR<\-\- \s-1HERE\s0 near column \f(CW%d\fR\*(R". This should make it a lil
simpla ta spot n' erect tha suspicious character.
.IP "\(bu" 4
Perl now explicitly points ta \f(CW$.\fR when it causes a uninitialized
warnin fo' ranges up in scalar context.
.IP "\(bu" 4
\&\f(CW\*(C`split\*(C'\fR now warns when called up in void context.
.IP "\(bu" 4
\&\f(CW\*(C`printf\*(C'\fR\-style functions called wit too few arguments will now issue the
warnin \f(CW"Missin argument up in %s"\fR [perl #71000]
.IP "\(bu" 4
Perl now properly returns a syntax error instead of segfaulting
if \f(CW\*(C`each\*(C'\fR, \f(CW\*(C`keys\*(C'\fR, or \f(CW\*(C`values\*(C'\fR is used without a argument.
.IP "\(bu" 4
\&\f(CW\*(C`tell()\*(C'\fR now fails properly if called without a argument n' when no
previous file was read.
.Sp
\&\f(CW\*(C`tell()\*(C'\fR now returns \f(CW\*(C`\-1\*(C'\fR, n' sets errno ta \f(CW\*(C`EBADF\*(C'\fR, thus restoring
the 5.8.x behaviour.
.IP "\(bu" 4
\&\f(CW\*(C`overload\*(C'\fR no longer implicitly unsets fallback on repeated 'use
overload' lines.
.IP "\(bu" 4
\&\fIPOSIX::strftime()\fR can now handle Unicode charactas up in tha format string.
.IP "\(bu" 4
Da \f(CW\*(C`syntax\*(C'\fR category was removed from 5 warnings dat should only be in
\&\f(CW\*(C`deprecated\*(C'\fR.
.IP "\(bu" 4
Three fatal \f(CW\*(C`pack\*(C'\fR/\f(CW\*(C`unpack\*(C'\fR error lyrics done been normalized to
\&\f(CW\*(C`panic: %s\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Unicode characta is illegal\*(C'\fR has been rephrased ta be mo' accurate
.Sp
It now readz \f(CW\*(C`Unicode non\-characta is illegal up in interchange\*(C'\fR n' the
perldiag documentation has been expanded a funky-ass bit.
.IP "\(bu" 4
Currently, all but tha straight-up original gangsta of tha nuff muthafuckin charactas dat the
\&\f(CW\*(C`charnames\*(C'\fR handlez may return is discarded when used up in a regular
expression pattern bracketed characta class. If dis happens then the
warnin \f(CW\*(C`Usin just tha straight-up original gangsta characta returned by \eN{} up in character
class\*(C'\fR is ghon be issued.
.IP "\(bu" 4
Da warnin \f(CW\*(C`Missin right brace on \eN{} or unescaped left brace after
\&\eN.  Assumin tha latter\*(C'\fR is ghon be issued if Perl encountas a \f(CW\*(C`\eN{\*(C'\fR
but don't find a matchin \f(CW\*(C`}\*(C'\fR. In dis case Perl don't give a fuck if it
was mistakenly omitted, or if \*(L"match non-newline\*(R" followed by "match
a \f(CW\*(C`{\*(C'\fR" was desired. Y'all KNOW dat shit, muthafucka!  It assumes tha latta cuz dat is straight-up a
valid interpretation as written, unlike tha other case.  If you meant
the former, you need ta add tha matchin right brace.  If you did mean
the latter, you can silence dis warnin by freestylin instead \f(CW\*(C`\eN\e{\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`gmtime\*(C'\fR n' \f(CW\*(C`localtime\*(C'\fR called wit numbers smalla than they can
reliably handle will now issue tha warnings \f(CW\*(C`gmtime(%.0f) too small\*(C'\fR
and \f(CW\*(C`localtime(%.0f) too small\*(C'\fR.
.PP
Da followin diagnostic lyrics done been removed:
.IP "\(bu" 4
\&\f(CW\*(C`Runaway format\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Can\*(Aqt locate package %s fo' tha muthafathaz of %s\*(C'\fR
.Sp
In general dis warnin it only gots produced in
conjunction wit other warnings, n' removin it allowed a \s-1ISA\s0 lookup
optimisation ta be added.
.IP "\(bu" 4
\&\f(CW\*(C`v\-strin up in use/require is non\-portable\*(C'\fR
.SH "Utilitizzle Chizzles"
.IX Header "Utilitizzle Chizzles"
.IP "\(bu" 4
\&\fIh2ph\fR now looks up in \f(CW\*(C`include\-fixed\*(C'\fR too, which be a recent addition
to gccs search path.
.IP "\(bu" 4
\&\fIh2xs\fR no longer incorrectly treats enum joints like macros.
It also now handlez \*(C+ steez comments (\f(CW\*(C`//\*(C'\fR) properly up in enums.
.IP "\(bu" 4
\&\fIperl5db.pl\fR now supports \f(CW\*(C`LVALUE\*(C'\fR subroutines.  Additionally, the
debugger now erectly handlez proxy constant subroutines, and
subroutine stubs.
.IP "\(bu" 4
\&\fIperlbug\fR now uses \f(CW%Module::CoreList::bug_tracker\fR ta print out
upstream bug tracker URLs.  If a user identifies a particular module
as tha topic of they bug report n' we able ta divine tha \s-1URL\s0 for
its upstream bug tracker, perlbug now provide a message ta tha user
explainin dat tha core copies tha \s-1CPAN\s0 version directly, n' provide
the \s-1URL\s0 fo' reportin tha bug directly ta tha upstream lyricist.
.Sp
\&\fIperlbug\fR no longer reports \*(L"Message sent\*(R" when it aint straight-up sent
the message
.IP "\(bu" 4
\&\fIperlthanks\fR be a freshly smoked up utilitizzle fo' bustin  non-bug-reports ta the
authors n' maintainerz of Perl. Gettin not a god damn thang but bug reports can
become a lil' bit demoralising. If Perl 5.12 works well fo' you, please try
out \fIperlthanks\fR. Well shiiiit, it will make tha pimpers smile.
.IP "\(bu" 4
Perlz pimpers have fixed bugs up in \fIa2p\fR havin ta do wit the
\&\f(CW\*(C`match()\*(C'\fR operator up in list context.  Additionally, \fIa2p\fR no longer
generates code dat uses tha \f(CW$[\fR variable.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
U+0FFFF is now a legal characta up in regular expressions.
.IP "\(bu" 4
pp_qr now always returns a freshly smoked up regexp \s-1SV.\s0 Resolves \s-1RT\s0 #69852.
.Sp
Instead of returnin a(nother) reference ta tha (pre-compiled) regexp
in tha optree, use \fIreg_temp_copy()\fR ta create a cold-ass lil copy of it, n' return a
reference ta dis shit. This resolves thangs bout Regexp::DESTROY not being
called up in a timely fashizzle (the original gangsta bug tracked by \s-1RT\s0 #69852), as
well as bugs related ta blessin regexps, n' of assignin ta regexps,
as busted lyrics bout up in correspondence added ta tha ticket.
.Sp
It transpires dat we also need ta undo tha \fISvPVX()\fR pluggin when ithreads
clonin a Regexp \s-1SV,\s0 cuz mother_re is set ta \s-1NULL,\s0 instead of a
cloned copy of tha mother_re. This chizzle might fix bugs wit regexps
and threadz up in certain other thangs yo, but as yet neither tests nor
bug reports have indicated any problems, so it might not straight-up be an
edge case dat itz possible ta reach.
.IP "\(bu" 4
Several compilation errors n' segfaults when perl was built wit \f(CW\*(C`\-Dmad\*(C'\fR
were fixed.
.IP "\(bu" 4
Fixes fo' lexer \s-1API\s0 chizzlez up in 5.11.2 which broke NYTProfz savesrc option.
.IP "\(bu" 4
\&\f(CW\*(C`\-t\*(C'\fR should only return \s-1TRUE\s0 fo' file handlez connected ta a \s-1TTY\s0
.Sp
Da Microsizzlez C version of \f(CW\*(C`isatty()\*(C'\fR returns \s-1TRUE\s0 fo' all characta mode
devices, includin tha \fI/dev/null\fR\-style \*(L"nul\*(R" thang n' printas like
\&\*(L"lpt1\*(R".
.IP "\(bu" 4
Fixed a regression caused by commit fafafbaf which caused a panic during
parameta passin [perl #70171]
.IP "\(bu" 4
On systems which in-place edits without backup files, \-i'*' now works as
the documentation say it do [perl #70802]
.IP "\(bu" 4
Savin n' restorin magic flags no longer loses readonly flag.
.IP "\(bu" 4
Da malformed syntax \f(CW\*(C`grep EXPR LIST\*(C'\fR (note tha missin comma) no longer
causes abrupt n' total failure.
.IP "\(bu" 4
Regular expressions compiled wit \f(CW\*(C`qr{}\*(C'\fR literals properly set \f(CW\*(C`$\*(Aq\*(C'\fR when
matchin again.
.IP "\(bu" 4
Usin named subroutines wit \f(CW\*(C`sort\*(C'\fR should no longer lead ta bus errors
[perl #71076]
.IP "\(bu" 4
Numerous bugfixes catch lil' small-ass thangs caused by tha recently-added Lexer \s-1API.\s0
.IP "\(bu" 4
Smart match against \f(CW@_\fR sometimes gave false negatives. [perl #71078]
.IP "\(bu" 4
\&\f(CW$@\fR may now be assigned a read-only value (without error or busting
the stack).
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR called recursively from within a actizzle comparison subroutine no
longer causes a funky-ass bus error if run multiple times. [perl #71076]
.IP "\(bu" 4
Tie::Hash::NamedCapture::* aint gonna abort if passed wack input (\s-1RT\s0 #71828)
.IP "\(bu" 4
\&\f(CW@_\fR n' \f(CW$_\fR no longer leak under threadz (\s-1RT\s0 #34342 n' #41138, also
#70602, #70974)
.IP "\(bu" 4
\&\f(CW\*(C`\-I\*(C'\fR on shebang line now addz directories up in front of \f(CW@INC\fR
as documented, n' as do \f(CW\*(C`\-I\*(C'\fR when specified on tha command-line.
.IP "\(bu" 4
\&\f(CW\*(C`kill\*(C'\fR is now fatal when called on non-numeric process identifiers.
Previously, a \f(CW\*(C`undef\*(C'\fR process identifier would be interpreted as a
request ta bust a cap up in process 0, which would terminizzle tha current process
group on \s-1POSIX\s0 systems. Right back up in yo muthafuckin ass. Since process identifiers is always integers,
killin a non-numeric process is now fatal.
.IP "\(bu" 4
5.10.0 inadvertently disabled a optimisation, which caused a measurable
performizzle drop up in list assignment, like fuckin is often used ta assign
function parametas from \f(CW@_\fR. Da optimisation has been re-instated, and
the performizzle regression fixed. Y'all KNOW dat shit, muthafucka! (This fix be also present up in 5.10.1)
.IP "\(bu" 4
Fixed memory leak on \f(CW\*(C`while (1) { map 1, 1 }\*(C'\fR [\s-1RT\s0 #53038].
.IP "\(bu" 4
Some potential coredumps up in PerlIO fixed [\s-1RT\s0 #57322,54828].
.IP "\(bu" 4
Da debugger now works wit lvalue subroutines.
.IP "\(bu" 4
Da debuggerz \f(CW\*(C`m\*(C'\fR command was fucked up on modulez dat defined constants
[\s-1RT\s0 #61222].
.IP "\(bu" 4
\&\f(CW\*(C`crypt\*(C'\fR n' strang complement could return tainted joints fo' untainted
arguments [\s-1RT\s0 #59998].
.IP "\(bu" 4
Da \f(CW\*(C`\-i\*(C'\fR\fI.suffix\fR command-line switch now recreates tha file using
restricted permissions, before changin its mode ta match tha original
file. This eliminates a potential race condizzle [\s-1RT\s0 #60904].
.IP "\(bu" 4
On some Unix systems, tha value up in \f(CW$?\fR would not have tha top bit set
(\f(CW\*(C`$, biatch? & 128\*(C'\fR) even if tha lil pimp core dumped.
.IP "\(bu" 4
Under some circumstances, \f(CW$^R\fR could incorrectly become undefined
[\s-1RT\s0 #57042].
.IP "\(bu" 4
In tha \s-1XS API,\s0 various hash functions, when passed a pre-computed hash where
the key is \s-1UTF\-8,\s0 might result up in a incorrect lookup.
.IP "\(bu" 4
\&\s-1XS\s0 code includin \fI\s-1XSUB\s0.h\fR before \fIperl.h\fR gave a cold-ass lil compile-time error
[\s-1RT\s0 #57176].
.IP "\(bu" 4
\&\f(CW\*(C`$object\->isa(\*(AqFoo\*(Aq)\*(C'\fR would report false if tha package \f(CW\*(C`Foo\*(C'\fR
didn't exist, even if tha objectz \f(CW@ISA\fR contained \f(CW\*(C`Foo\*(C'\fR.
.IP "\(bu" 4
Various bugs up in tha new-to 5.10.0 mro code, triggered by manipulating
\&\f(CW@ISA\fR, done been found n' fixed.
.IP "\(bu" 4
Bitwise operations on references could crash tha interpreter, e.g.
\&\f(CW\*(C`$x=\e$y; $x |= "foo"\*(C'\fR [\s-1RT\s0 #54956].
.IP "\(bu" 4
Patterns includin alternation might be sensitizzle ta tha internal \s-1UTF\-8\s0
representation, e.g.
.Sp
.Vb 3
\&    mah $byte = chr(192);
\&    mah $utf8 = chr(192); utf8::upgrade($utf8);
\&    $utf8 =~ /$byte|X}/i;       # failed up in 5.10.0
.Ve
.IP "\(bu" 4
Within UTF8\-encoded Perl source filez (i.e. where \f(CW\*(C`use utf8\*(C'\fR is in
effect), double-quoted literal strings could be corrupted where a \f(CW\*(C`\exNN\*(C'\fR,
\&\f(CW\*(C`\e0NNN\*(C'\fR or \f(CW\*(C`\eN{}\*(C'\fR is followed by a literal characta wit ordinal value
greata than 255 [\s-1RT\s0 #59908].
.IP "\(bu" 4
\&\f(CW\*(C`B::Deparse\*(C'\fR failed ta erectly deparse various constructs:
\&\f(CW\*(C`readpipe STRING\*(C'\fR [\s-1RT\s0 #62428], \f(CW\*(C`CORE::require(STRING)\*(C'\fR [\s-1RT\s0 #62488],
\&\f(CW\*(C`sub foo(_)\*(C'\fR [\s-1RT\s0 #62484].
.IP "\(bu" 4
Usin \f(CW\*(C`setpgrp\*(C'\fR wit no arguments could corrupt tha perl stack.
.IP "\(bu" 4
Da block form of \f(CW\*(C`eval\*(C'\fR is now specifically trappable by \f(CW\*(C`Safe\*(C'\fR and
\&\f(CW\*(C`ops\*(C'\fR. Previously dat shiznit was erroneously treated like strang \f(CW\*(C`eval\*(C'\fR.
.IP "\(bu" 4
In 5.10.0, tha two charactas \f(CW\*(C`[~\*(C'\fR was sometimes parsed as tha smart
match operator (\f(CW\*(C`~~\*(C'\fR) [\s-1RT\s0 #63854].
.IP "\(bu" 4
In 5.10.0, tha \f(CW\*(C`*\*(C'\fR quantifier up in patterns was sometimes treated as
\&\f(CW\*(C`{0,32767}\*(C'\fR [\s-1RT\s0 #60034, #60464]. For example, dis match would fail:
.Sp
.Vb 1
\&    ("ab" x 32768) =~ /^(ab)*$/
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`shmget\*(C'\fR was limited ta a 32 bit segment size on a 64 bit \s-1OS\s0 [\s-1RT\s0 #63924].
.IP "\(bu" 4
Usin \f(CW\*(C`next\*(C'\fR or \f(CW\*(C`last\*(C'\fR ta exit a \f(CW\*(C`given\*(C'\fR block no longer produces a
spurious warnin like tha following:
.Sp
.Vb 1
\&    Exitin given via last at foo.pl line 123
.Ve
.IP "\(bu" 4
Assignin a gangbangin' format ta a glob could corrupt tha format; e.g.:
.Sp
.Vb 1
\&     *bar=*foo{FORMAT}; # foo format now bad
.Ve
.IP "\(bu" 4
Attemptin ta coerce a typeglob ta a strang or number could cause an
assertion failure. Da erect error message is now generated,
\&\f(CW\*(C`Can\*(Aqt coerce GLOB ta \f(CI$type\f(CW\*(C'\fR.
.IP "\(bu" 4
Under \f(CW\*(C`use filetest \*(Aqaccess\*(Aq\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR was rockin tha wack access
mode. This has been fixed [\s-1RT\s0 #49003].
.IP "\(bu" 4
\&\f(CW\*(C`length\*(C'\fR on a tied scalar dat returned a Unicode value would not be
correct tha last time. This has been fixed.
.IP "\(bu" 4
Usin a array \f(CW\*(C`tie\*(C'\fR inside up in array \f(CW\*(C`tie\*(C'\fR could \s-1SEGV.\s0 This has been
fixed. Y'all KNOW dat shit, muthafucka! [\s-1RT\s0 #51636]
.IP "\(bu" 4
A race condizzle inside \f(CW\*(C`PerlIOStdio_close()\*(C'\fR has been identified and
fixed. Y'all KNOW dat shit, muthafucka! This used ta cause various threadin issues, includin SEGVs.
.IP "\(bu" 4
In \f(CW\*(C`unpack\*(C'\fR, tha use of \f(CW\*(C`()\*(C'\fR crews up in scalar context was internally
placin a list on tha interpreterz stack, which manifested up in various
ways, includin SEGVs. This is now fixed [\s-1RT\s0 #50256].
.IP "\(bu" 4
Magic was called twice up in \f(CW\*(C`substr\*(C'\fR, \f(CW\*(C`\e&$x\*(C'\fR, \f(CW\*(C`tie $x, $m\*(C'\fR n' \f(CW\*(C`chop\*(C'\fR.
These have all been fixed.
.IP "\(bu" 4
A 5.10.0 optimisation ta clear tha temporary stack within tha implicit
loop of \f(CW\*(C`s///ge\*(C'\fR has been reverted, as it turned up ta be tha cause of
obscure bugs up in seemingly unrelated partz of tha interpreta [commit
ef0d4e17921ee3de].
.IP "\(bu" 4
Da line numbers fo' warnings inside \f(CW\*(C`elsif\*(C'\fR is now erect.
.IP "\(bu" 4
Da \f(CW\*(C`..\*(C'\fR operator now works erectly wit ranges whose endz is at or
close ta tha jointz of tha smallest n' phattest integers.
.IP "\(bu" 4
\&\f(CW\*(C`binmode STDIN, \*(Aq:raw\*(Aq\*(C'\fR could lead ta segmentation faults on some platforms.
This has been fixed [\s-1RT\s0 #54828].
.IP "\(bu" 4
An off-by-one error meant dat \f(CW\*(C`index $str, ...\*(C'\fR was effectively being
executed as \f(CW\*(C`index "$str\e0", ...\*(C'\fR. This has been fixed [\s-1RT\s0 #53746].
.IP "\(bu" 4
Various leaks associated wit named captures up in regexes done been fixed
[\s-1RT\s0 #57024].
.IP "\(bu" 4
A weak reference ta a hash would leak. This was affectin \f(CW\*(C`DBI\*(C'\fR
[\s-1RT\s0 #56908].
.IP "\(bu" 4
Usin (?|) up in a regex could cause a segfault [\s-1RT\s0 #59734].
.IP "\(bu" 4
Use of a \s-1UTF\-8 \s0\f(CW\*(C`tr//\*(C'\fR within a cold-ass lil closure could cause a segfault [\s-1RT\s0 #61520].
.IP "\(bu" 4
Callin \f(CW\*(C`Perl_sv_chop()\*(C'\fR or otherwise upgradin a \s-1SV\s0 could result up in an
unaligned 64\-bit access on tha \s-1SPARC\s0 architecture [\s-1RT\s0 #60574].
.IP "\(bu" 4
In tha 5.10.0 release, \f(CW\*(C`inc_version_list\*(C'\fR would incorrectly list
\&\f(CW\*(C`5.10.*\*(C'\fR afta \f(CW\*(C`5.8.*\*(C'\fR; dis affected tha \f(CW@INC\fR search order
[\s-1RT\s0 #67628].
.IP "\(bu" 4
In 5.10.0, \f(CW\*(C`pack "a*", $tainted_value\*(C'\fR returned a non-tainted value
[\s-1RT\s0 #52552].
.IP "\(bu" 4
In 5.10.0, \f(CW\*(C`printf\*(C'\fR n' \f(CW\*(C`sprintf\*(C'\fR could produce tha fatal error
\&\f(CW\*(C`panic: utf8_mg_pos_cache_update\*(C'\fR when printin \s-1UTF\-8\s0 strings
[\s-1RT\s0 #62666].
.IP "\(bu" 4
In tha 5.10.0 release, a thugged-out dynamically pimped \f(CW\*(C`AUTOLOAD\*(C'\fR method might be
missed (method cache issue) [\s-1RT\s0 #60220,60232].
.IP "\(bu" 4
In tha 5.10.0 release, a cold-ass lil combination of \f(CW\*(C`use feature\*(C'\fR n' \f(CW\*(C`//ee\*(C'\fR could
cause a memory leak [\s-1RT\s0 #63110].
.IP "\(bu" 4
\&\f(CW\*(C`\-C\*(C'\fR on tha shebang (\f(CW\*(C`#!\*(C'\fR) line is once mo' permitted if it be also
specified on tha command line. \f(CW\*(C`\-C\*(C'\fR on tha shebang line used ta be a
silent no-op \fIif\fR dat shiznit was not also on tha command line, so perl 5.10.0
disallowed it, which broke some scripts, n' you can put dat on yo' toast. Now perl checks whether it is
also on tha command line n' only takes a thugged-out dirt nap if it aint [\s-1RT\s0 #67880].
.IP "\(bu" 4
In 5.10.0, certain typez of re-entrant regular expression could crash,
or cause tha followin assertion failure [\s-1RT\s0 #60508]:
.Sp
.Vb 1
\&    Assertion rx\->sublen >= (s \- rx\->subbeg) + i failed
.Ve
.IP "\(bu" 4
Perl now includes previously missin filez from tha Unicode Character
Database.
.IP "\(bu" 4
Perl now honors \f(CW\*(C`TMPDIR\*(C'\fR when openin a anonymous temporary file.
.SH "Platform Specific Chizzles"
.IX Header "Platform Specific Chizzles"
Perl is incredibly portable. In general, if a platform has a C compiler,
someone has ported Perl ta it (or will soon).  Our thugged-out asses aiiight ta announce
that Perl 5.12 includes support fo' nuff muthafuckin freshly smoked up platforms.  At tha same
time, itz time ta bid farewell ta some (very) oldschool playas.
.SS "New Platforms"
.IX Subsection "New Platforms"
.IP "Haiku" 4
.IX Item "Haiku"
Perlz pimpers have merged patches from Haikuz maintainers. Perl
should now build on Haiku.
.IP "MirOS \s-1BSD\s0" 4
.IX Item "MirOS BSD"
Perl should now build on MirOS \s-1BSD.\s0
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
.IP "Domain/OS" 4
.IX Item "Domain/OS"
.PD 0
.IP "MiNT" 4
.IX Item "MiNT"
.IP "Tenon MachTen" 4
.IX Item "Tenon MachTen"
.PD
.SS "Updated Platforms"
.IX Subsection "Updated Platforms"
.IP "\s-1AIX\s0" 4
.IX Item "AIX"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Removed \fIlibbsd\fR fo' \s-1AIX 5L\s0 n' 6.1. Only \f(CW\*(C`flock()\*(C'\fR was used from
\&\fIlibbsd\fR.
.IP "\(bu" 4
Removed \fIlibgdbm\fR fo' \s-1AIX 5L\s0 n' 6.1 if \fIlibgdbm\fR < 1.8.3\-5 is
installed. Y'all KNOW dat shit, muthafucka!  Da \fIlibgdbm\fR is served up as a optionizzle package wit the
\&\s-1AIX\s0 Toolbox.  Unfortunately tha versions below 1.8.3\-5 is broken.
.IP "\(bu" 4
Hints chizzlez mean dat \s-1AIX 4.2\s0 should work again.
.RE
.RS 4
.RE
.IP "Cygwin" 4
.IX Item "Cygwin"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Perl now supports IPv6 on Cygwin 1.7 n' newer.
.IP "\(bu" 4
On Cygwin we now strip tha last number from tha \s-1DLL.\s0 This has been the
behaviour up in tha cygwin.com build fo' years. Da hints filez have been
updated.
.RE
.RS 4
.RE
.IP "Darwin (Mac \s-1OS X\s0)" 4
.IX Item "Darwin (Mac OS X)"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Skip testin tha be_BY.CP1131 locale on Darwin 10 (Mac \s-1OS X 10.6\s0),
as itz still buggy.
.IP "\(bu" 4
Correct infelicitizzles up in tha regexp used ta identify buggy locales
on Darwin 8 n' 9 (Mac \s-1OS X 10.4\s0 n' 10.5, respectively).
.RE
.RS 4
.RE
.IP "DragonFly \s-1BSD\s0" 4
.IX Item "DragonFly BSD"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Fix thread library selection [perl #69686]
.RE
.RS 4
.RE
.IP "FreeBSD" 4
.IX Item "FreeBSD"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Da hints filez now identify tha erect threadin libraries on FreeBSD 7
and later.
.RE
.RS 4
.RE
.IP "Irix" 4
.IX Item "Irix"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
We now work round a funky-ass bizarre preprocessor bug up in tha Irix 6.5 compiler:
\&\f(CW\*(C`cc \-E \-\*(C'\fR unfortunately goes tha fuck into K&R mode yo, but \f(CW\*(C`cc \-E file.c\*(C'\fR don't.
.RE
.RS 4
.RE
.IP "NetBSD" 4
.IX Item "NetBSD"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Hints now supports versions 5.*.
.RE
.RS 4
.RE
.IP "OpenVMS" 4
.IX Item "OpenVMS"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
\&\f(CW\*(C`\-UDEBUGGING\*(C'\fR is now tha default on \s-1VMS.\s0
.Sp
Like it has been everywhere else fo' ages n' ages fo' realz. Also make command-line
selection of \-UDEBUGGING n' \-DDEBUGGING work up in configure.com; before
the only way ta turn it off was by sayin no up in answer ta tha interactive
question.
.IP "\(bu" 4
Da default pipe buffer size on \s-1VMS\s0 has been updated ta 8192 on 64\-bit
systems.
.IP "\(bu" 4
Readz from tha in-memory temporary filez of \f(CW\*(C`PerlIO::scalar\*(C'\fR used ta fail
if \f(CW$/\fR was set ta a numeric reference (to indicate record-style reads).
This is now fixed.
.IP "\(bu" 4
\&\s-1VMS\s0 now supports \f(CW\*(C`getgrgid\*(C'\fR.
.IP "\(bu" 4
Many improvements n' cleanups done been made ta tha \s-1VMS\s0 file name handling
and conversion code.
.IP "\(bu" 4
Enablin tha \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR logical name now encodes a \s-1POSIX\s0 exit
status up in a \s-1VMS\s0 condizzle value fo' betta interaction wit \s-1GNV\s0z bash
shell n' other utilitizzles dat depend on \s-1POSIX\s0 exit joints, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. See
\&\*(L"$?\*(R" up in perlvms fo' details.
.IP "\(bu" 4
\&\f(CW\*(C`File::Copy\*(C'\fR now detects Unix compatibilitizzle mode on \s-1VMS.\s0
.RE
.RS 4
.RE
.IP "Stratus \s-1VOS\s0" 4
.IX Item "Stratus VOS"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Various chizzlez from Stratus done been merged in.
.RE
.RS 4
.RE
.IP "Symbian" 4
.IX Item "Symbian"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
There is now support fo' Symbian S60 3.2 \s-1SDK\s0 n' S60 5.0 \s-1SDK.\s0
.RE
.RS 4
.RE
.IP "Windows" 4
.IX Item "Windows"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Perl 5.12 supports Windows 2000 n' later n' shit. Da supportin code for
legacy versionz of Windows is still included yo, but is ghon be removed
durin tha next pimpment cycle.
.IP "\(bu" 4
Initial support fo' buildin Perl wit MinGW\-w64 is now available.
.IP "\(bu" 4
\&\fIperl.exe\fR now includes a manifest resource ta specify tha \f(CW\*(C`trustInfo\*(C'\fR
settings fo' Windows Vista n' later n' shit. Without dis settin Windows
would treat \fIperl.exe\fR as a legacy application n' apply various
heuristics like redirectin access ta protected file system areas
(like tha \*(L"Program Files\*(R" folder) ta tha playas \*(L"VirtualStore\*(R"
instead of generatin a proper \*(L"permission denied\*(R" error.
.Sp
Da manifest resource also requests tha Microsizzlez Common-Controls
version 6.0 (themed controls introduced up in Windows \s-1XP\s0).  Peep up the
Win32::VisualStylez module on \s-1CPAN\s0 ta switch back ta oldschool style
unthemed controls fo' legacy applications.
.IP "\(bu" 4
Da \f(CW\*(C`\-t\*(C'\fR filetest operator now only returns legit if tha filehandle
is connected ta a cold-ass lil console window.  In previous versionz of Perl it
would return legit fo' all characta mode devices, includin \fI\s-1NUL\s0\fR
and \fI\s-1LPT1\s0\fR.
.IP "\(bu" 4
Da \f(CW\*(C`\-p\*(C'\fR filetest operator now works erectly, n' the
Fcntl::S_IFIFO constant is defined when Perl is compiled with
Microsizzlez Visual C.  In previous Perl versions \f(CW\*(C`\-p\*(C'\fR always
returned a gangbangin' false value, n' tha Fcntl::S_IFIFO constant
was not defined.
.Sp
This bug is specific ta Microsizzlez Visual C n' never affected
Perl binaries built wit MinGW.
.IP "\(bu" 4
Da socket error codes is now mo' widely supported:  Da \s-1POSIX\s0
module will define tha symbolic names, like \s-1POSIX::EWOULDBLOCK,\s0
and stringification of socket error codes up in $! works as well
now;
.Sp
.Vb 2
\&  C:\e>perl \-MPOSIX \-E "$!=POSIX::EWOULDBLOCK; say $!"
\&  A non\-blockin socket operation could not be completed immediately.
.Ve
.IP "\(bu" 4
\&\fIflock()\fR will now set sensible error codes up in $!.  Previous Perl versions
copied tha value of $^E tha fuck into $!, which caused much mad drama.
.IP "\(bu" 4
\&\fIselect()\fR now supports all empty \f(CW\*(C`fd_set\*(C'\fRs mo' erectly.
.IP "\(bu" 4
\&\f(CW\*(Aq.\efoo\*(Aq\fR n' \f(CW\*(Aq..\efoo\*(Aq\fR  was treated differently than
\&\f(CW\*(Aq./foo\*(Aq\fR n' \f(CW\*(Aq../foo\*(Aq\fR by \f(CW\*(C`do\*(C'\fR n' \f(CW\*(C`require\*(C'\fR [\s-1RT\s0 #63492].
.IP "\(bu" 4
Improved message window handlin means dat \f(CW\*(C`alarm\*(C'\fR n' \f(CW\*(C`kill\*(C'\fR lyrics
will no longer be dropped under race conditions.
.IP "\(bu" 4
Various bitz of Perlz build infrastructure is no longer converted to
win32 line endings at release time. If dis hurts you, please report the
problem wit tha perlbug program included wit perl.
.RE
.RS 4
.RE
.SH "Known Problems"
.IX Header "Known Problems"
This be a list of some dope unfixed bugs, which is regressions
from either 5.10.x or 5.8.x.
.IP "\(bu" 4
Some \s-1CPANPLUS\s0 tests may fail if there be a gangbangin' functionin file
\&\fI../../cpanp\-run\-perl\fR outside yo' build directory. Da failure
shouldn't imply there be a a problem wit tha actual functional
software. Da bug be already fixed up in [\s-1RT\s0 #74188] n' is scheduled for
inclusion up in perl\-v5.12.1.
.IP "\(bu" 4
\&\f(CW\*(C`List::Util::first\*(C'\fR misbehaves up in tha presence of a lexical \f(CW$_\fR
(typically introduced by \f(CW\*(C`my $_\*(C'\fR or implicitly by \f(CW\*(C`given\*(C'\fR). Da variable
which gets set fo' each iteration is tha package variable \f(CW$_\fR, not the
lexical \f(CW$_\fR [\s-1RT\s0 #67694].
.Sp
A similar issue may occur up in other modulez dat provide functions which
take a funky-ass block as they first argument, like
.Sp
.Vb 1
\&    foo { ... $_ ...} list
.Ve
.IP "\(bu" 4
Some regexes may run much mo' slowly when run up in a cold-ass lil lil pimp thread compared
with tha thread tha pattern was compiled tha fuck into [\s-1RT\s0 #55600].
.IP "\(bu" 4
Things like \f(CW\*(C`"\eN{LATIN SMALL LIGATURE FF}" =~ /\eN{LATIN SMALL LETTER F}+/\*(C'\fR
will step tha fuck up ta hang as they git tha fuck into a straight-up long hustlin loop [\s-1RT\s0 #72998].
.IP "\(bu" 4
Several portas have reported mysterious crashes when Perlz entire
test suite is run afta a funky-ass build on certain Windows 2000 systems. When
run by hand, tha individual tests reportedly work fine.
.SH "Errata"
.IX Header "Errata"
.IP "\(bu" 4
This one is straight-up a cold-ass lil chizzle introduced up in 5.10.0 yo, but dat shiznit was missed
from dat releasez perldelta, so it is mentioned here instead.
.Sp
A bugfix related ta tha handlin of tha \f(CW\*(C`/m\*(C'\fR modifier n' \f(CW\*(C`qr\*(C'\fR resulted
in a cold-ass lil chizzle of behaviour between 5.8.x n' 5.10.0:
.Sp
.Vb 2
\&    # matches up in 5.8.x, don\*(Aqt match up in 5.10.0
\&    $re = qr/^bar/; "foo\enbar" =~ /$re/m;
.Ve
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.12.0 represents approximately two muthafuckin yearz of pimpment since
Perl 5.10.0 n' gotz nuff over 750,000 linez of chizzlez across over
3,000 filez from over 200 authors n' committers.
.PP
Perl continues ta flourish tha fuck into its third decade props ta a vibrant
communitizzle of playas n' pimpers.  Da followin playas is known to
have contributed tha improvements dat became Perl 5.12.0:
.PP
Aaron Crane, Abe Timmerman, Abhijit Menon-Sen, Abigail, Adam Russell,
Adriano Ferreira, \*(Aevar Arnfjo\*:r\*(d- Bjarmason, Alan Grover, Alexandr
Ciornii, Alex Davies, Alex Vandiver, Andreas Koenig, Andrew Rodland,
andrew@sundale.net, Andy Armstrong, Andy Dougherty, Jose AUGUSTE-ETIENNE,
Benjamin Smizzle, Lil' Bow Wow Morrow, bharanee rathna, Bo Borgerson, Bo Lindbergh,
Brad Gilbert, Bram, Brendan O'Dea, brian d foy, Charlez Bailey,
Chip Salzenberg, Chris 'BinGOs' Williams, Christoph Lamprecht, Chris
Williams, chromatic, Claes Jakobsson, Craig A. Berry, Don Juan Dascalescu,
Daniel Frederick Crisman, Daniel M. Quinlan, Don Juan Jacobson, Don Juan Kogai,
Dizzle Mitchell, Dizzle Rolsky, Dizzy Cantrell, Dizzy Dick, Dizzy Golden,
Dizzy Mitchell, Dizzy M. Right back up in yo muthafuckin ass. Syzdek, Dizzy Nicol, Dizzy Wheeler, Dennis
Kaarsemaker, Dintelmann, Peter, Dominic Dunlop, Dr.Ruud, Dude Leto,
Enrico Sorcinelli, Eric Brine, Father Chrysostomos, Florian Ragwitz,
Frank Wiegand, Gabor Szabo, Gene Sullivan, Geoffrey T. Dairiki, George
Greer, Gerard Goossen, Gisle Aas, Goro Fuji, Graham Barr, Green, Paul,
Hans Dieta Pearcey, Harmen, H. Merijn Brand, Hugo van der Sanden,
Ian Goodacre, Igor Sutton, Ingo Weinhold, Jizzy Bence, Jizzy Mastros,
Jan Dubois, Jari Aalto, Jarkko Hietaniemi, Jay Hannah, Jeremy Hedden,
Jizzy Vincent, Jim Cromie, Jody Belka, Jizzy E. Malmberg, Jizzy Malmberg,
Jizzy Peacock, Jizzy Peading-a-ling via \s-1RT,\s0 Jizzy P. Linderman, Jizzy Wright,
Josh ben Jore, Jos I. Boumans, Karl Williamson, Kenichi Ishigaki, Ken
Williams, Kevin Brintnall, Kevin Ryde, Kurt Starsinic, Leon Brocard,
Lubomir Rintel, Luke Ross, Marcel Gru\*:nauer, Marcus Holland-Moritz, Mark
Jizzo Dominus, Marko Asplund, Martin Hasch, Mashrab Kuvatov, Mack Kraai,
Mack S Trout, Max Maischein, Mike Breen, Mike Cartmell, Michael
G Schwern, Mike Witten, Mike Giroux, Miloss Tanski, Moritz Lenz,
Nicholas Clark, Nick Cleaton, Niko Tyni, Offer Kaye, Osvaldo Villalon,
Pizzle Fenwick, Pizzle Gaborit, Pizzle Green, Pizzle Johnson, Pizzle Marquess,
Philip Hazel, Philippe Bruhat, Rafael Garcia-Suarez, Rainer Tammer,
Rajesh Mandalemula, Reini Urban, Rene\*'e Ba\*:cker, Ricardo Signes,
Ricardo \s-1SIGNES,\s0 Slick Rick Foley, Rich Rauenzahn, Rick Delaney, Risto
Kankkunen, Robert May, Roberto C. Right back up in yo muthafuckin ass. Sanchez, Robin Barker, \s-1SADAHIRO\s0
Tomoyuki, Salvador Ortiz Garcia, Sam Vilain, Scott Lanning, Se\*'bastien
Aperghis-Tramoni, Se\*'rgio Durigan Ju\*'nior, Shlomi Fish, Semen 'corecode'
Schubert, Sisyphus, Slaven Rezic, Smylers, Steffen Mu\*:ller, Steffen
Ullrich, Stepan Kasal, Steve Hay, Steven Schubiger, Steve Peters, Tels,
Da Doctor, Slim Tim Bunce, Slim Tim Jenness, Todd Rinaldo, Tomothy Christiansen,
Tomothy Hukins, Tomothy Wyant, Tony Cook, Torsten Schoenfeld, Tye McQueen,
Vadim Konovalov, Vincent Pit, Hio \s-1YAMASHINA,\s0 Yasuhiro Matsumoto,
Yitzchak Scott-Thoennes, Yuval Kogman, Yves Orton, Zefram, Zsban Ambrus
.PP
This is woefully incomplete as itz automatically generated from version
control history.  In particular, it don't include tha namez of the
(very much appreciated) contributors whoz ass reported thangs up in previous
versionz of Perl dat helped make Perl 5.12.0 mo' betta n' shit. For a mo' complete
list of all of Perlz oldschool contributors, please peep tha \f(CW\*(C`AUTHORS\*(C'\fR
file up in tha Perl 5.12.0 distribution.
.PP
Our \*(L"retired\*(R" pumpkings Nicholas Clark n' Rafael Garcia-Suarez
deserve special props fo' they solid n' substantizzle ongoing
contributions. Nicholas personally authored over 30% of tha patches
since 5.10.0. Rafael comes up in second up in patch authorshizzle wit 11%,
but is first by a long-ass blasted up in committin patches authored by others,
pushin 44% of tha commits since 5.10.0 up in dis category, often after
providin considerable pimpin ta tha patch authors. These statistics
in no way comprise all of they contributions yo, but express up in shorthand
that we couldn't have done it without em.
.PP
Many of tha chizzlez included up in dis version originated up in tha \s-1CPAN\s0
modulez included up in Perlz core. We grateful ta tha entire \s-1CPAN\s0
communitizzle fo' helpin Perl ta flourish.
.SH "Reportin Bugs"
.IX Header "Reportin Bugs"
If you find what tha fuck you be thinkin be a funky-ass bug, you might check tha articles
recently posted ta tha comp.lang.perl.misc newsgroup n' tha perl
bug database at <http://rt.perl.org/perlbug/>. There may also be
information at <http://www.perl.org/>, tha Perl Home Page.
.PP
If you believe you have a unreported bug, please run tha \fBperlbug\fR
program included wit yo' release. Be shizzle ta trim yo' bug down
to a tiny but sufficient test case. Yo crazy-ass bug report, along wit the
output of \f(CW\*(C`perl \-V\*(C'\fR, is ghon be busted off ta perlbug@perl.org ta be
analyzed by tha Perl portin crew.
.PP
If tha bug yo ass is reportin has securitizzle implications, which make it
inappropriate ta bust ta a publicly archived mailin list, then please send
it ta perl5\-security\-report@perl.org. This points ta a cold-ass lil closed subscription
unarchived mailin list, which includes
all tha core committers, whoz ass is ghon be able
to help assess tha impact of issues, figure up a resolution, n' help
co-ordinizzle tha release of patches ta mitigate or fix tha problem across all
platforms on which Perl is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Please only use dis address for
securitizzle thangs up in tha Perl core, not fo' modulez independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Da \fIChanges\fR file fo' a explanation of how tha fuck ta view exhaustizzle details
on what tha fuck chizzled.
.PP
Da \fI\s-1INSTALL\s0\fR file fo' how tha fuck ta build Perl.
.PP
Da \fI\s-1README\s0\fR file fo' general stuff.
.PP
Da \fIArtistic\fR n' \fICopying\fR filez fo' copyright shiznit.
.PP
<http://dev.perl.org/perl5/errata.html> fo' a list of issues
found afta dis release, as well as a list of \s-1CPAN\s0 modulez known
to be incompatible wit dis release.
