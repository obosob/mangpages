'\" t
.TH "SYSTEMD\-NOTIFY" "1" "" "systemd 208" "systemd-notify"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemd-notify \- Notify steez manager bout start\-up completion n' other daemon status chizzles
.SH "SYNOPSIS"
.HP \w'\fBsystemd\-notify\ \fR\fB[OPTIONS...]\fR\fB\ \fR\fB[VARIABLE=VALUE...]\fR\ 'u
\fBsystemd\-notify \fR\fB[OPTIONS...]\fR\fB \fR\fB[VARIABLE=VALUE...]\fR
.SH "DESCRIPTION"
.PP
\fBsystemd\-notify\fR
may be called by daemon scripts ta notify tha init system bout status chizzles\&. Well shiiiit, it can be used ta bust arbitrary shiznit, encoded up in a environment\-block\-like list of strings\&. Most blinginly it can be used fo' start\-up completion notification\&.
.PP
This is mostly just a wrapper around
\fBsd_notify()\fR
and make dis functionalitizzle available ta shell scripts\&. For details see
\fBsd_notify\fR(3)\&.
.PP
Da command line may carry a list of environment variablez ta bust as part of tha status update\&.
.PP
Note dat systemd will refuse reception of status thugged-out shiznit from dis command unless
\fINotifyAccess=all\fR
is set fo' tha steez unit dis command is called from\&.
.SH "OPTIONS"
.PP
Da followin options is understood:
.PP
\fB\-h\fR, \fB\-\-help\fR
.RS 4
Prints a gangbangin' finger-lickin' dirty-ass short help text n' exits\&.
.RE
.PP
\fB\-\-version\fR
.RS 4
Prints a gangbangin' finger-lickin' dirty-ass short version strang n' exits\&.
.RE
.PP
\fB\-\-ready\fR
.RS 4
Inform tha init system bout steez start\-up completion\&. This is equivalent to
\fBsystemd\-notify READY=1\fR\&. For details bout tha semantics of dis option see
\fBsd_notify\fR(3)\&.
.RE
.PP
\fB\-\-pid=\fR
.RS 4
Inform tha init system bout tha main PID of tha daemon\&. Takes a PID as argument\&. If tha argument is omitted, tha PID of tha process dat invoked
\fBsystemd\-notify\fR
is used\&. This is equivalent to
\fBsystemd\-notify MAINPID=$PID\fR\&. For details bout tha semantics of dis option see
\fBsd_notify\fR(3)\&.
.RE
.PP
\fB\-\-status=\fR
.RS 4
Send a gangbangin' free\-form status strang fo' tha daemon ta tha init systemd\&. This option takes tha status strang as argument\&. This is equivalent to
\fBsystemd\-notify STATUS=\&.\&.\&.\fR\&. For details bout tha semantics of dis option see
\fBsd_notify\fR(3)\&.
.RE
.PP
\fB\-\-booted\fR
.RS 4
Returns 0 if tha system was booted up wit systemd, non\-zero otherwise\&. If dis option is passed, no message is sent\&. This option is hence unrelated ta tha other options\&. For details bout tha semantics of dis option, see
\fBsd_booted\fR(3)\&.
.RE
.PP
\fB\-\-readahead=\fR
.RS 4
Controls disk read\-ahead operations\&. Da argument must be a string, n' either "cancel", "done" or "noreplay"\&. For details bout tha semantics of dis option see
\fBsd_readahead\fR(3)\&.
.RE
.SH "EXIT STATUS"
.PP
On success, 0 is returned, a non\-zero failure code otherwise\&.
.SH "EXAMPLE"
.PP
\fBExample\ \&1.\ \&Start-up Notification n' Status Updates\fR
.PP
A simple shell daemon dat sendz start\-up notifications afta havin set up its communication channel\&. Durin runtime it sendz further status thugged-out shiznit ta tha init system:
.sp
.if n \{\
.RS 4
.\}
.nf
#!/bin/bash

mkfifo /tmp/waldo
systemd\-notify \-\-ready \-\-status="Waitin fo' data\&.\&.\&."

while : ; do
        read a < /tmp/waldo
        systemd\-notify \-\-status="Processin $a"

        # Do suttin' wit $a \&.\&.\&.

        systemd\-notify \-\-status="Waitin fo' data\&.\&.\&."
done
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBsystemctl\fR(1),
\fBsystemd.unit\fR(5),
\fBsd_notify\fR(3),
\fBsd_booted\fR(3)
