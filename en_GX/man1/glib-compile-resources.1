'\" t
.\"     Title: glib-compile-resources
.\"    Author: Alexander Larsson
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 11/11/2013
.\"    Manual: User Commands
.\"    Source: GIO
.\"  Language: Gangsta
.\"
.TH "GLIB\-COMPILE\-RESOU" "1" "" "GIO" "User Commands"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glib-compile-resources \- GLib resource compiler
.SH "SYNOPSIS"
.HP \w'\fBglib\-compile\-resources\fR\ 'u
\fBglib\-compile\-resources\fR [OPTION...] {FILE}
.SH "DESCRIPTION"
.PP
\fBglib\-compile\-resources\fR
readz tha resource description from
\fIFILE\fR
and tha filez dat it references n' creates a funky-ass binary resource bundle dat is suitable fo' use wit the
\fBGResource\fR
API\&. Da resultin bundle is then freestyled up as\-is, or as C source fo' linkin tha fuck into a application\&.
.PP
Da XML resource filez normally have tha filename extension
\&.gresource\&.xml\&. For a thugged-out detailed description of tha XML file format, peep the
\fBGResource\fR
documentation\&.
.SH "OPTIONS"
.PP
\fB\-h\fR, \fB\-\-help\fR
.RS 4
Print help n' exit
.RE
.PP
\fB\-\-target=\fR\fB\fITARGET\fR\fR
.RS 4
Store tha compiled resources up in tha file
\fITARGET\fR\&. If not specified a gangbangin' filename based on the
\fIFILE\fR
basename is used\&.
.RE
.PP
\fB\-\-sourcedir=\fR\fB\fIDIRECTORY\fR\fR
.RS 4
Da filez referenced in
\fIFILE\fR
are loaded from dis directory\&. If not specified, tha current directory is used\&.
.RE
.PP
\fB\-\-generate\fR
.RS 4
Write tha output file up in tha format selected fo' by its filename extension:
.PP
\&.c
.RS 4
C source
.RE
.PP
\&.h
.RS 4
C header
.RE
.PP
\&.gresource
.RS 4
resource bundle
.RE
.sp
.RE
.PP
\fB\-\-generate\-source\fR
.RS 4
Instead of a gangbangin' freestylin tha resource bundle up in binary form create a C source file dat gotz nuff tha resource bundle\&. This can then be compiled tha fuck into a application fo' easy as fuck  access\&.
.RE
.PP
\fB\-\-generate\-header\fR
.RS 4
Generate a header file fo' use wit C code generated by
\fB\-\-generate\-source\fR\&.
.RE
.PP
\fB\-\-generate\-dependencies\fR
.RS 4
Prints tha list of filez dat tha resource bundle references ta standard output\&. This can be used ta track dependencies up in tha build system\&. For example, tha followin make rule would mark
\fItest\&.gresource\fR
as dependin on all tha filez that
\fItest\&.gresource\&.xml\fR
includes, so dat is be automatically rebuilt if any of dem chizzle:
.sp
.if n \{\
.RS 4
.\}
.nf
test\&.gresource: test\&.gresource\&.xml $(shell $(GLIB_COMPILE_RESOURCES) \-\-generate\-dependencies test\&.gresource\&.xml)
.fi
.if n \{\
.RE
.\}
.sp
Note dat dis may or may not be portable ta non\-GNU
\fBmake\fR\&.
.RE
.PP
\fB\-\-c\-name\fR
.RS 4
Specify tha prefix used fo' tha C identifiers up in tha code generated by
\fB\-\-generate\-source\fR
and
\fB\-\-generate\-header\fR\&.
.RE
.PP
\fB\-\-manual\-register\fR
.RS 4
By default code generated by
\fB\-\-generate\-source\fR
uses automatic initialization of tha resource\&. This works on most systems by rockin tha compila support fo' constructors\&. But fuck dat shiznit yo, tha word on tha street is dat some (uncommon) compilaz may not support this, you can then specify
\fB\-\-manual\-register\fR, which will generate custom regista n' unregista functions dat yo' code can manually call at initialization n' uninitialization time\&.
.RE
.PP
\fB\-\-internal\fR
.RS 4
By default code generated by
\fB\-\-generate\-source\fR
declares all initialization functions as
\fBextern\fR\&. Right back up in yo muthafuckin ass. So they is exported unless dis is prevented by a link script or other means\&. Right back up in yo muthafuckin ass. Since libraries probably wanna use tha functions only internally it can be mo' useful ta declare dem as
G_GNUC_INTERNAL
which is what
\fB\-\-internal\fR
does\&.
.RE
.SH "ENVIRONMENT"
.PP
\fBXMLLINT\fR
.RS 4
Da full path ta tha xmllint executable\&. This is used ta preprocess resources wit the
xml\-stripblanks
preprocessin option\&. If dis environment variable aint set, xmllint is searched up in the
\fBPATH\fR\&.
.RE
.PP
\fBGDK_PIXBUF_PIXDATA\fR
.RS 4
Da full path ta tha gdk\-pixbuf\-pixdata executable\&. This is used ta preprocess resources wit the
to\-pixdata
preprocessin option\&. If dis environment variable aint set, gdk\-pixbuf\-pixdata is searched up in the
\fBPATH\fR\&.
.RE
