'\" t
.\"     Title: git-receive-pack
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-RECEIVE\-PACK" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-receive-pack \- Receive what tha fuck is pushed tha fuck into tha repository
.SH "SYNOPSIS"
.sp
.nf
\fIgit\-receive\-pack\fR <directory>
.fi
.sp
.SH "DESCRIPTION"
.sp
Invoked by \fIgit send\-pack\fR n' thugged-out shiznit tha repository wit tha shiznit fed from tha remote end\&.
.sp
This command is probably not invoked directly by tha end user\&. Da UI fo' tha protocol is on tha \fIgit send\-pack\fR side, n' tha program pair is meant ta be used ta push thugged-out shiznit ta remote repository\&. For pull operations, peep \fBgit-fetch-pack\fR(1)\&.
.sp
Da command allows fo' creation n' fast\-forwardin of sha1 refs (heads/tags) on tha remote end (strictly bustin lyrics, it is tha local end \fIgit\-receive\-pack\fR runs yo, but ta tha user whoz ass is chillin all up in tha send\-pack end, it is uppimpin tha remote\&. Confused?)
.sp
There is other real\-world examplez of rockin update n' post\-update hooks found up in tha Documentation/howto directory\&.
.sp
\fIgit\-receive\-pack\fR honours tha receive\&.denyNonFastForwardz config option, which  drops some lyrics ta it if thugged-out shiznit ta a ref should be denied if they is not fast\-forwards\&.
.SH "OPTIONS"
.PP
<directory>
.RS 4
Da repository ta sync into\&.
.RE
.SH "PRE-RECEIVE HOOK"
.sp
Before any ref is updated, if $GIT_DIR/hooks/pre\-receive file exists n' is executable, it is ghon be invoked once wit no parameters\&. Da standard input of tha hook is ghon be one line per ref ta be updated:
.sp
.if n \{\
.RS 4
.\}
.nf
sha1\-old SP sha1\-new SP refname LF
.fi
.if n \{\
.RE
.\}
.sp
Da refname value is relatizzle ta $GIT_DIR; e\&.g\&. fo' tha masta head dis is "refs/heads/master"\&. Da two sha1 joints before each refname is tha object names fo' tha refname before n' afta tha update\&. Refs ta be pimped gonna git sha1\-old equal ta 0{40}, while refs ta be deleted gonna git sha1\-new equal ta 0{40}, otherwise sha1\-old n' sha1\-new should be valid objects up in tha repository\&.
.sp
This hook is called before any refname is updated n' before any fast\-forward checks is performed\&.
.sp
If tha pre\-receive hook exits wit a non\-zero exit status no thugged-out shiznit is ghon be performed, n' tha update, post\-receive n' post\-update hooks aint gonna be invoked either\&. This can be useful ta quickly bail up if tha update aint ta be supported\&.
.SH "UPDATE HOOK"
.sp
Before each ref is updated, if $GIT_DIR/hooks/update file exists n' is executable, it is invoked once per ref, wit three parameters:
.sp
.if n \{\
.RS 4
.\}
.nf
$GIT_DIR/hooks/update refname sha1\-old sha1\-new
.fi
.if n \{\
.RE
.\}
.sp
Da refname parameta is relatizzle ta $GIT_DIR; e\&.g\&. fo' tha masta head dis is "refs/heads/master"\&. Da two sha1 arguments is tha object names fo' tha refname before n' afta tha update\&. Note dat tha hook is called before tha refname is updated, so either sha1\-old is 0{40} (meanin there is no such ref yet), or it should match what tha fuck is recorded up in refname\&.
.sp
Da hook should exit wit non\-zero status if it wants ta disallow uppimpin tha named ref\&. Otherwise it should exit wit zero\&.
.sp
Successful execution (a zero exit status) of dis hook do not ensure tha ref will straight-up be updated, it is only a prerequisite\& fo' realz. As such it aint a phat scam ta bust notices (e\&.g\&. email) from dis hook\&. Consider rockin tha post\-receive hook instead\&.
.SH "POST-RECEIVE HOOK"
.sp
Afta all refs was updated (or attempted ta be updated), if any ref update was successful, n' if $GIT_DIR/hooks/post\-receive file exists n' is executable, it is ghon be invoked once wit no parameters\&. Da standard input of tha hook is ghon be one line fo' each successfully updated ref:
.sp
.if n \{\
.RS 4
.\}
.nf
sha1\-old SP sha1\-new SP refname LF
.fi
.if n \{\
.RE
.\}
.sp
Da refname value is relatizzle ta $GIT_DIR; e\&.g\&. fo' tha masta head dis is "refs/heads/master"\&. Da two sha1 joints before each refname is tha object names fo' tha refname before n' afta tha update\&. Refs dat was pimped gonna git sha1\-old equal ta 0{40}, while refs dat was deleted gonna git sha1\-new equal ta 0{40}, otherwise sha1\-old n' sha1\-new should be valid objects up in tha repository\&.
.sp
Usin dis hook, it is easy as fuck  ta generate mails describin tha thugged-out shiznit ta tha repository\&. This example script sendz one mail message per ref listin tha commits pushed ta tha repository:
.sp
.if n \{\
.RS 4
.\}
.nf
#!/bin/sh
# mail up commit update shiznit\&.
while read oval nval ref
do
        if expr "$oval" : \(aq0*$\(aq >/dev/null
        then
                echo "Created a freshly smoked up ref, wit tha followin commits:"
                git rev\-list \-\-pretty "$nval"
        else
                echo "New commits:"
                git rev\-list \-\-pretty "$nval" "^$oval"
        fi |
        mail \-s "Changes ta ref $ref" commit\-list@mydomain
done
exit 0
.fi
.if n \{\
.RE
.\}
.sp
Da exit code from dis hook invocation is ignored, however a non\-zero exit code will generate a error message\&.
.sp
Note dat it is possible fo' refname ta not have sha1\-new when dis hook runs\&. This can easily occur if another user modifies tha ref afta dat shiznit was updated by \fIgit\-receive\-pack\fR yo, but before tha hook was able ta evaluate it\&. Well shiiiit, it is recommended dat hooks rely on sha1\-new rather than tha current value of refname\&.
.SH "POST-UPDATE HOOK"
.sp
Afta all other processing, if at least one ref was updated, n' if $GIT_DIR/hooks/post\-update file exists n' is executable, then post\-update is ghon be called wit tha list of refs dat done been updated\&. This can be used ta implement any repository wide cleanup tasks\&.
.sp
Da exit code from dis hook invocation is ignored; tha only thang left fo' \fIgit\-receive\-pack\fR ta do at dat point is ta exit itself anyway\&.
.sp
This hook can be used, fo' example, ta run git update\-server\-info if tha repository is packed n' is served via a thugged-out dumb transport\&.
.sp
.if n \{\
.RS 4
.\}
.nf
#!/bin/sh
exec git update\-server\-info
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.sp
\fBgit-send-pack\fR(1), \fBgitnamespaces\fR(7)
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
