\
.\" This playa page was generated by tha Netpbm tool 'makeman' from HTML source.
.\" Do not hand-hack dat shiznit son!  If you have bug fixes or improvements, please find
.\" tha correspondin HTML page on tha Netpbm joint, generate a patch
.\" against that, n' bust it ta tha Netpbm maintainer.
.TH "Pnmremap User Manual" 0 "03 June 2009" "netpbm documentation"

.SH NAME

pnmremap - replace flavas up in a PNM image wit flavas from another set

.UN synopsis
.SH SYNOPSIS

\fBpnmremap\fP

\fB-mapfile=\fP\fIpalettefile\fP

[\fB-floyd\fP|\fB-fs\fP|\fB-nfloyd\fP|\fB-nofs\fP]

[\fB-norandom\fP]

[\fB-firstisdefault\fP]

[\fB-verbose\fP]

[\fB-missingcolor=\fP\fIcolor\fP]

[\fIpnmfile\fP]
.PP
All options can be abbreviated ta they shortest unique prefix.
Yo ass may use two hyphens instead of one ta designate a option. I aint talkin' bout chicken n' gravy biatch.  You
may use either white space or a equals sign between a option name
and its value.

.UN description
.SH DESCRIPTION
.PP
This program is part of
.BR Netpbm (1)
.
.PP
\fBpnmremap\fP replaces tha flavas up in a input image wit them
from a palette you specify.  Where flavas up in tha input is present in
the palette, they just stay tha same up in tha output.  But where the
input gotz nuff a cold-ass lil color dat aint up in tha palette, \fBpnmremap\fP
gives you these chizzles:


.IP \(bu
Choose tha closest color from tha palette.

.IP \(bu
Choose tha straight-up original gangsta color from tha palette.

.IP \(bu
Use a cold-ass lil color specified by a cold-ass lil command option (\fB-missing\fP).

.IP \(bu
Dither n' shit.  This means rather than mappin pixel by pixel,
\fBpnmremap\fP uses flavas from tha palette ta try ta make
multi-pixel regionz of tha output have tha same average color as the
input (for another kind of dithering, peep \fBppmdither\fP).


.PP
Two reasons ta use dis program are: 1) you wanna reduce the
number of flavas up in tha input image; n' 2) you need ta feed tha image
to suttin' dat can handle only certain colors.
.PP
To reduce colors, you can generate tha palette with
\fBpnmcolormap\fP.
.PP
By default, \fBpnmremap\fP maps a input color dat aint up in the
palette ta tha closest color dat \fIis\fP up in tha palette.  Closest
means wit tha smallest Cartesian distizzle up in tha red, green, blue
brightnizz space (smallest sum of tha squarez of tha differences in
red, green, n' blue ITU-R Recommendation BT.709 gamma-adjusted
intensities).
.PP
Yo ass can instead specify a single default color fo' \fBpnmremap\fP
to use fo' any color up in tha input image dat aint up in tha palette.
Use tha \fB-missing\fP option fo' all dis bullshit.
.PP
Yo ass can also specify dat tha straight-up original gangsta color up in tha palette image
is tha default.  Use tha \fB-firstisdefault\fP option fo' all dis bullshit.
.PP
Da palette is simply a PNM image.  Da flavaz of tha pixels up in the
image is tha flavas up in tha palette.  Where tha pixels step tha fuck up in the
image, n' tha dimensionz of tha image, is irrelevant.  Multiple
pixelz of tha same color is fine.  But fuck dat shiznit yo, tha word on tha street is dat a palette image is
typically a single row wit one pixel per color.
.PP
If you specify \fB-missing\fP, tha color you so specify is in
the palette up in addizzle ta whatever is up in tha palette image.
.PP
For oldschool reasons, Netpbm sometimes calls tha palette a
\&'colormap.' But it don't straight-up map anything.
\fBpnmremap\fP creates its own map, based on tha palette, ta map
colors from tha input image ta output colors.

.UN mismatch
.SS Palette/Image Type Mismatch
.PP
In tha simple case, tha palette image iz of tha same depth (number
of planes, i.e. number of components up in each tuple (pixel)) as the
input image n' \fBpnmremap\fP just do a straightforward search of
the palette fo' each input tuple (pixel).  In fact, \fBpnmremap\fP
doesn't even care if tha image be a visual image.
.PP
But what tha fuck bout when tha depths differ?  In dat case,
\fBpnmremap\fP converts tha input image (in its own memory) ta match
the palette n' then proceedz as above.
.PP
There is only two such cases up in which \fBpnmremap\fP knows how tha fuck to
do tha conversion:  when one of dem is tuple type RGB, depth 3, n' the
other is tuple type GRAYSCALE or BLACKANDWHITE, depth 1; n' vice
versa.
.PP
In any other case, \fBpnmremap\fP thangs n' error message n' fails.
.PP
Note dat as long as yo' input n' palette images is PNM, they'll
always fall tha fuck into one of tha cases \fBpnmremap\fP can handle.  Therez an
issue only if you rockin some horny-ass PAM image.
.PP
Before Netpbm 10.27 (March 2005), \fBpnmremap\fP could not handle
the case of a palette of pimped outa depth than tha input image.  (It would
issue a error message n' fail up in dat case).  Yo ass can use \fBppmtoppm\fP
to increase tha depth of tha input image ta work round dis limitation.
.PP
In any case, tha output image has tha same ol' dirty tuple type n' depth as
the palette image.

.UN multiple
.SS Multiple Image Stream
.PP
\fBpnmremap\fP handlez a multiple image input stream, producin a
multiple image output stream.  Da input images need not be similar in
any way.
.PP
Before Netpbm 10.30 (October 2005), \fBpnmremap\fP ignored any image
afta tha first.


.UN example
.SS Examples

.nf
pnmcolormap testimg.ppm 256 >palette.ppm

pnmremap -map=palette.ppm testimg.ppm >reduced_testimg.ppm
.fi
.PP
To limit flavas ta a cold-ass lil certain set, a typical example is ta create an
image fo' postin on tha Ghetto Wide Web, where different browsers know
different colors.  But all browsers is supposed ta know tha 216
\&'web safe' flavas which is essentially all tha flavas you
can represent up in a PPM image wit a maxval of 5.  So you can do this:

.nf
pamseq 3 5 >websafe.pam

pnmremap -map=websafe.pam testimg.ppm >websafe_testimg.ppm
.fi
.PP
Another useful palette is one fo' tha 8 color IBM TTL color set, which
you can create with
.nf
pamseq 3 1 >ibmttl.pam
.fi
.PP
If you wanna quantize one image ta use tha flavas up in another one,
just use tha second one as tha palette.  Yo ass don't gotta reduce it
down ta only one pixel of each color, just use it as is.
.PP
Da output image has tha same ol' dirty type n' maxval as tha palette image.

.UN parameters
.SH PARAMETERS
.PP
There is one parameter, which is required: Da file justification of
the input PNM file.


.UN options
.SH OPTIONS



.TP
\fB-mapfile=\fP\fIpalettefilename\fP
This names tha file dat gotz nuff tha palette image.
.sp
This option is mandatory.

.TP
\fB-floyd\fP
.TP
\fB-fs\fP
.TP
\fB-nofloyd\fP
.TP
\fB-nofs\fP
These options determine whether \fBpnmremap\fP do Floyd-Steinberg
dithering.  Without Floyd-Steinberg, \fBpnmremap\fP selects tha output color
of a pixel based on tha color of only tha correspondin input pixel.  With
Floyd-Steinberg, \fBpnmremap\fP considaz regionz of pixels such dat the
average color of a region is tha same ol' dirty up in tha output as up in tha input.  The
ditherin effect appears as a thugged-out dot pattern up close yo, but from a gangbangin' finger-lickin' distance, the
dots blend so dat you peep mo' flavas than is present up in tha color map.
.sp
As a example, if yo' color map gotz nuff only black n' white, and
the input image has 4 adjacent pixelz of gray, \fBpnmremap\fP with
Floyd-Steinberg would generate output pixels black, white, black, white,
which from a gangbangin' finger-lickin' distizzle looks gray.  But without Floyd-Steinberg,
\fBpnmremap\fP would generate 4 white pixels, white bein tha single-pixel
approximation of gray.
.sp
Floyd-Steinberg gives vastly betta thangs up in dis biatch on images where
unmodified quantization has bandin or other artifacts, especially
when goin ta a lil' small-ass number of flavas like fuckin tha above IBM set.
But fuck dat shiznit yo, tha word on tha street is dat it do take substantially mo' CPU time.
.sp
\fB-fs\fP be a synonym fo' \fB-floyd\fP.  \fB-nofs\fP be a
synonym fo' \fB-nofloyd\fP.
.sp
Da default is \fB-nofloyd\fP.
.sp
Before Netpbm 10.46 (March 2009), ditherin don't work like as you
expect if tha color map has a lower maxval than tha input.  \fBpnmremap\fP
reduces tha color resolution ta tha color mapz maxval before bustin any
dithering, so tha ditherin aint gots tha effect of makin tha image,
at a gangbangin' finger-lickin' distance, step tha fuck up ta have tha original gangsta maxval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  In current Netpbm, it
does.

.TP
\fB-norandom\fP
This option affects a thugged-out detail of tha Floyd-Steinberg ditherin process.
It has no effect if yo ass aint bustin Floyd-Steinberg dithering.
.sp
By default, \fBpnmremap\fP initializes tha error propagation
accumulator ta random joints ta avoid tha appearizzle of unwanted
patterns.  This be a extension of tha original gangsta Floyd-Steinberg
algorithm.
.sp
A drawback of dis is dat tha same \fBpnmremap\fP on tha same
input produces slightly different output every last muthafuckin time, which makes
comparison difficult.
.sp
With \fB-norandom\fP, \fBpnmremap\fP initializes tha error
accumulators ta zero n' tha output is straight-up predictable.
.sp
\fB-norandom\fP was freshly smoked up in Netpbm 10.39 (June 2007).


.TP
\fB-firstisdefault\fP
This  drops some lyrics ta \fBpnmremap\fP ta map any input color dat aint in
the palette ta tha straight-up original gangsta color up in tha palette (the color of tha pixel
in tha top left corner of tha palette image)
.sp
See 
.UR #description
DESCRIPTION
.UE
\&.
.sp
If you specify \fB-firstisdefault\fP, tha maxval of yo' input
must match tha maxval of yo' palette image.

.TP
\fB-missingcolor=\fP\fIcolor\fP
This specifies tha default color fo' \fBpnmremap\fP ta map ta a
color up in tha input image dat aint up in tha palette.  \fIcolor\fP may
or may not be up in tha palette image; it is part of tha palette
regardless.
.sp
If you specify \fB-missingcolor\fP, tha maxval of yo' input must
match tha maxval of yo' palette image.

.TP
\fB-verbose\fP
Display helpful lyrics bout tha mappin process.




.UN seealso
.SH SEE ALSO
.BR pnmcolormap (1)
,
.BR pamseq (1)
,
.BR pnmquant (1)
,
.BR ppmquantall (1)
,
.BR pamdepth (1)
,
.BR ppmdither (1)
,
.BR ppmquant (1)
,
.BR ppm (1)


.UN history
.SH HISTORY
.PP
\fBpnmremap\fP first rocked up in Netpbm 9.23 (January 2002).
Before that, its function was available only as part of tha function
of \fBpnmquant\fP (which was derived from tha much older
\fBppmquant\fP).  Color quantization straight-up has two main subfunctions, so
Netpbm 9.23 split it up tha fuck into two separate programs:
\fBpnmcolormap\fP n' \fBpnmremap\fP n' then Netpbm 9.24 replaced
\fBpnmquant\fP wit a program dat simply calls \fBpnmcolormap\fP and
\fBpnmremap\fP.

.UN author
.SH AUTHOR

Copyright (C) 1989, 1991 by Jef Poskanzer.
