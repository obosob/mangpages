.\"
.\" Author: Tatu Ylonen <ylo@cs.hut.fi>
.\" Copyright (c) 1995 Tatu Ylonen <ylo@cs.hut.fi>, Espoo, Finland
.\"                    All muthafuckin rights reserved
.\"
.\" As far as I be concerned, tha code I have freestyled fo' dis software
.\" can be used freely fo' any purpose.  Any derived versionz of this
.\" software must be clearly marked as such, n' if tha derived work is
.\" incompatible wit tha protocol description up in tha RFC file, it must be
.\" called by a name other than "ssh" or "Secure Shell".
.\"
.\" Copyright (c) 1999,2000 Markus Friedl.  All muthafuckin rights reserved.
.\" Copyright (c) 1999 Aaron Campbell.  All muthafuckin rights reserved.
.\" Copyright (c) 1999 Theo de Raadt.  All muthafuckin rights reserved.
.\"
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" $OpenBSD: ssh.1,v 1.334 2013/07/18 01:12:26 djm Exp $
.Dd $Mdocdate: July 18 2013 $
.Dt SSH 1
.Os
.Sh NAME
.Nm ssh
.Nd OpenSSH SSH client (remote login program)
.Sh SYNOPSIS
.Nm ssh
.Bk -words
.Op Fl 1246AaCfgKkMNnqsTtVvXxYy
.Op Fl b Ar bind_address
.Op Fl c Ar cipher_spec
.Op Fl D Oo Ar bind_address : Oc Ns Ar port
.Op Fl E Ar log_file
.Op Fl e Ar escape_char
.Op Fl F Ar configfile
.Op Fl I Ar pkcs11
.Op Fl i Ar identity_file
.Op Fl L Oo Ar bind_address : Oc Ns Ar port : Ns Ar host : Ns Ar hostport
.Op Fl l Ar login_name
.Op Fl m Ar mac_spec
.Op Fl O Ar ctl_cmd
.Op Fl o Ar option
.Op Fl p Ar port
.Op Fl R Oo Ar bind_address : Oc Ns Ar port : Ns Ar host : Ns Ar hostport
.Op Fl S Ar ctl_path
.Op Fl W Ar host : Ns Ar port
.Op Fl w Ar local_tun Ns Op : Ns Ar remote_tun
.Oo Ar user Ns @ Oc Ns Ar hostname
.Op Ar command
.Ek
.Nm
.Fl Q Ar protocol_feature
.Sh DESCRIPTION
.Nm
(SSH client) be a program fo' loggin tha fuck into a remote machine n' for
executin commandz on a remote machine.
It be intended ta replace rlogin n' rsh,
and provide secure encrypted communications between
two untrusted hosts over a insecure network.
X11 connections n' arbitrary TCP ports
can also be forwarded over tha secure channel.
.Pp
.Nm
connects n' logs tha fuck into tha specified
.Ar hostname
(with optional
.Ar user
name).
Da user must prove
his/her identitizzle ta tha remote machine rockin one of nuff muthafuckin methods
dependin on tha protocol version used (see below).
.Pp
If
.Ar command
is specified,
it is executed on tha remote host instead of a login shell.
.Pp
Da options is as bigs up:
.Bl -tag -width Ds
.It Fl 1
Forces
.Nm
to try protocol version 1 only.
.It Fl 2
Forces
.Nm
to try protocol version 2 only.
.It Fl 4
Forces
.Nm
to use IPv4 addresses only.
.It Fl 6
Forces
.Nm
to use IPv6 addresses only.
.It Fl A
Enablez forwardin of tha authentication agent connection.
This can also be specified on a per-host basis up in a cold-ass lil configuration file.
.Pp
Agent forwardin should be enabled wit caution.
Users wit tha mobilitizzle ta bypass file permissions on tha remote host
(for tha agent's
.Ux Ns -domain
socket) can access tha local agent all up in tha forwarded connection.
An attacker cannot obtain key material from tha agent,
however they can big-ass up operations on tha keys dat enable dem to
authenticate rockin tha identitizzles loaded tha fuck into tha agent.
.It Fl a
Disablez forwardin of tha authentication agent connection.
.It Fl b Ar bind_address
Use
.Ar bind_address
on tha local machine as tha source address
of tha connection.
Only useful on systems wit mo' than one address.
.It Fl C
Requests compression of all data (includin stdin, stdout, stderr, and
data fo' forwarded X11 n' TCP connections).
Da compression algorithm is tha same ol' dirty used by
.Xr gzip 1 ,
and the
.Dq level
can be controlled by the
.Cm CompressionLevel
option fo' protocol version 1.
Compression is desirable on modem lines n' other
slow connections yo, but will only slow down thangs on fast networks.
Da default value can be set on a host-by-host basis up in the
configuration files; peep the
.Cm Compression
option.
.It Fl c Ar cipher_spec
Selects tha cipher justification fo' encryptin tha session.
.Pp
Protocol version 1 allows justification of a single cipher.
Da supported joints are
.Dq 3des ,
.Dq blowfish ,
and
.Dq des .
.Ar 3des
(triple-des) be a encrypt-decrypt-encrypt triple wit three different keys.
It be believed ta be secure.
.Ar blowfish
is a gangbangin' fast block cipher; it appears straight-up secure n' is much fasta than
.Ar 3des .
.Ar des
is only supported up in the
.Nm
client fo' interoperabilitizzle wit legacy protocol 1 implementations
that do not support the
.Ar 3des
cipher.
Its use is straight fuckin discouraged cuz of cryptographic weaknesses.
Da default is
.Dq 3des .
.Pp
For protocol version 2,
.Ar cipher_spec
is a cold-ass lil comma-separated list of ciphers
listed up in order of preference.
See the
.Cm Ciphers
keyword in
.Xr ssh_config 5
for mo' shiznit.
.It Fl D Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port
.Sm on
.Xc
Specifies a local
.Dq dynamic
application-level port forwarding.
This works by allocatin a socket ta dig
.Ar port
on tha local side, optionally bound ta tha specified
.Ar bind_address .
Whenever a cold-ass lil connection is made ta dis port, the
connection is forwarded over tha secure channel, n' tha application
protocol is then used ta determine where ta connect ta from the
remote machine.
Currently tha SOCKS4 n' SOCKS5 protocols is supported, and
.Nm
will act as a SOCKS server.
Only root can forward privileged ports.
Dynamic port forwardings can also be specified up in tha configuration file.
.Pp
IPv6 addresses can be specified by enclosin tha address up in square brackets.
Only tha superuser can forward privileged ports.
By default, tha local port is bound up in accordizzle wit the
.Cm GatewayPorts
setting.
But fuck dat shiznit yo, tha word on tha street is dat a explicit
.Ar bind_address
may be used ta bind tha connection ta a specific address.
The
.Ar bind_address
of
.Dq localhost
indicates dat tha listenin port be bound fo' local use only, while an
empty address or
.Sq *
indicates dat tha port should be available from all intercourses.
.It Fl E Ar log_file
Append debug logs to
.Ar log_file
instead of standard error.
.It Fl e Ar escape_char
Sets tha escape characta fo' sessions wit a pty (default:
.Ql ~ ) .
Da escape characta is only recognized all up in tha beginnin of a line.
Da escape characta followed by a thugged-out dot
.Pq Ql \&.
closes tha connection;
followed by control-Z suspendz tha connection;
and followed by itself sendz tha escape characta once.
Settin tha characta to
.Dq none
disablez any escapes n' make tha session straight-up transparent.
.It Fl F Ar configfile
Specifies a alternatizzle per-user configuration file.
If a cold-ass lil configuration file is given on tha command line,
the system-wide configuration file
.Pq Pa /etc/ssh/ssh_config
will be ignored.
Da default fo' tha per-user configuration file is
.Pa ~/.ssh/config .
.It Fl f
Requests
.Nm
to git all up in background just before command execution.
This is useful if
.Nm
is goin ta ask fo' passwordz or passphrases yo, but tha user
wants it up in tha background.
This implies
.Fl n .
Da recommended way ta start X11 programs at a remote joint is with
suttin' like
.Ic ssh -f host xterm .
.Pp
If the
.Cm ExitOnForwardFailure
configuration option is set to
.Dq yeaaaa ,
then a cold-ass lil client started with
.Fl f
will wait fo' all remote port forwardz ta be successfully established
before placin itself up in tha background.
.It Fl g
Allows remote hosts ta connect ta local forwarded ports.
.It Fl I Ar pkcs11
Specify tha PKCS#11 shared library
.Nm
should use ta rap wit a PKCS#11 token providin tha user's
private RSA key.
.It Fl i Ar identity_file
Selects a gangbangin' file from which tha identitizzle (private key) for
hood key authentication is read.
Da default is
.Pa ~/.ssh/identity
for protocol version 1, and
.Pa ~/.ssh/id_dsa ,
.Pa ~/.ssh/id_ecdsa
and
.Pa ~/.ssh/id_rsa
for protocol version 2.
Identitizzle filez may also be specified on
a per-host basis up in tha configuration file.
It be possible ta have multiple
.Fl i
options (and multiple identitizzles specified in
configuration files).
.Nm
will also try ta load certificate shiznit from tha filename obtained
by appending
.Pa -cert.pub
to identitizzle filenames.
.It Fl K
Enablez GSSAPI-based authentication n' forwardin (delegation) of GSSAPI
credentials ta tha server.
.It Fl k
Disablez forwardin (delegation) of GSSAPI credentials ta tha server.
.It Fl L Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port : host : hostport
.Sm on
.Xc
Specifies dat tha given port on tha local (client) host is ta be
forwarded ta tha given host n' port on tha remote side.
This works by allocatin a socket ta dig
.Ar port
on tha local side, optionally bound ta tha specified
.Ar bind_address .
Whenever a cold-ass lil connection is made ta dis port, the
connection is forwarded over tha secure channel, n' a cold-ass lil connection is
made to
.Ar host
port
.Ar hostport
from tha remote machine.
Port forwardings can also be specified up in tha configuration file.
IPv6 addresses can be specified by enclosin tha address up in square brackets.
Only tha superuser can forward privileged ports.
By default, tha local port is bound up in accordizzle wit the
.Cm GatewayPorts
setting.
But fuck dat shiznit yo, tha word on tha street is dat a explicit
.Ar bind_address
may be used ta bind tha connection ta a specific address.
The
.Ar bind_address
of
.Dq localhost
indicates dat tha listenin port be bound fo' local use only, while an
empty address or
.Sq *
indicates dat tha port should be available from all intercourses.
.It Fl l Ar login_name
Specifies tha user ta log up in as on tha remote machine.
This also may be specified on a per-host basis up in tha configuration file.
.It Fl M
Places the
.Nm
client into
.Dq master
mode fo' connection sharing.
Multiple
.Fl M
options places
.Nm
into
.Dq master
mode wit confirmation required before slave connections is accepted.
Refer ta tha description of
.Cm ControlMaster
in
.Xr ssh_config 5
for details.
.It Fl m Ar mac_spec
Additionally, fo' protocol version 2 a cold-ass lil comma-separated list of MAC
(message authentication code) algorithms can
be specified up in order of preference.
See the
.Cm MACs
keyword fo' mo' shiznit.
.It Fl N
Do not execute a remote command.
This is useful fo' just forwardin ports
(protocol version 2 only).
.It Fl n
Redirects stdin from
.Pa /dev/null
(actually, prevents readin from stdin).
This must be used when
.Nm
is run up in tha background.
A common trick is ta use dis ta run X11 programs on a remote machine.
For example,
.Ic ssh -n shadows.cs.hut.fi emacs &
will start a emacs on shadows.cs.hut.fi, n' tha X11
connection is ghon be automatically forwarded over a encrypted channel.
The
.Nm
program is ghon be put up in tha background.
(This do not work if
.Nm
needz ta ask fo' a password or passphrase; peep also the
.Fl f
option.)
.It Fl O Ar ctl_cmd
Control a actizzle connection multiplexin masta process.
When the
.Fl O
option is specified, the
.Ar ctl_cmd
argument is interpreted n' passed ta tha masta process.
Valid commandz are:
.Dq check
(check dat tha masta process is hustlin),
.Dq forward
(request forwardings without command execution),
.Dq cancel
(cancel forwardings),
.Dq exit
(request tha masta ta exit), and
.Dq stop
(request tha masta ta stop acceptin further multiplexin requests).
.It Fl o Ar option
Can be used ta give options up in tha format used up in tha configuration file.
This is useful fo' specifyin options fo' which there is no separate
command-line flag.
For full detailz of tha options listed below, n' they possible joints, see
.Xr ssh_config 5 .
.Pp
.Bl -tag -width Ds -offset indent -compact
.It AddressFamily
.It BatchMode
.It BindAddress
.It ChallengeResponseAuthentication
.It CheckHostIP
.It Cipher
.It Ciphers
.It ClearAllForwardings
.It Compression
.It CompressionLevel
.It ConnectionAttempts
.It ConnectTimeout
.It ControlMaster
.It ControlPath
.It ControlPersist
.It DynamicForward
.It EscapeChar
.It ExitOnForwardFailure
.It ForwardAgent
.It ForwardX11
.It ForwardX11Timeout
.It ForwardX11Trusted
.It GatewayPorts
.It GlobalKnownHostsFile
.It GSSAPIAuthentication
.It GSSAPIDelegateCredentials
.It HashKnownHosts
.It Host
.It HostbasedAuthentication
.It HostKeyAlgorithms
.It HostKeyAlias
.It HostName
.It IdentityFile
.It IdentitiesOnly
.It IPQoS
.It KbdInteractiveAuthentication
.It KbdInteractiveDevices
.It KexAlgorithms
.It LocalCommand
.It LocalForward
.It LogLevel
.It MACs
.It NoHostAuthenticationForLocalhost
.It NumberOfPasswordPrompts
.It PasswordAuthentication
.It PermitLocalCommand
.It PKCS11Provider
.It Port
.It PreferredAuthentications
.It Protocol
.It ProxyCommand
.It PubkeyAuthentication
.It RekeyLimit
.It RemoteForward
.It RequestTTY
.It RhostsRSAAuthentication
.It RSAAuthentication
.It SendEnv
.It ServerKickin ItInterval
.It ServerKickin ItCountMax
.It StrictHostKeyChecking
.It TCPKeepKickin It
.It Tunnel
.It TunnelDevice
.It UsePrivilegedPort
.It User
.It UserKnownHostsFile
.It VerifyHostKeyDNS
.It VisualHostKey
.It XAuthLocation
.El
.It Fl p Ar port
Port ta connect ta on tha remote host.
This can be specified on a
per-host basis up in tha configuration file.
.It Fl Q Ar protocol_feature
Queries
.Nm
for tha algorithms supported fo' tha specified version 2
.Ar protocol_feature .
Da queriable features are:
.Dq cipher
(supported symmetric ciphers),
.Dq MAC
(supported message integritizzle codes),
.Dq KEX
(key exchange algorithms),
.Dq key
(key types).
Protocol features is treated case-insensitively.
.It Fl q
Quiet mode.
Causes most warnin n' diagnostic lyrics ta be suppressed.
.It Fl R Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port : host : hostport
.Sm on
.Xc
Specifies dat tha given port on tha remote (server) host is ta be
forwarded ta tha given host n' port on tha local side.
This works by allocatin a socket ta dig
.Ar port
on tha remote side, n' whenever a cold-ass lil connection is made ta dis port, the
connection is forwarded over tha secure channel, n' a cold-ass lil connection is
made to
.Ar host
port
.Ar hostport
from tha local machine.
.Pp
Port forwardings can also be specified up in tha configuration file.
Privileged ports can be forwarded only when
loggin up in as root on tha remote machine.
IPv6 addresses can be specified by enclosin tha address up in square brackets.
.Pp
By default, tha listenin socket on tha server is ghon be bound ta tha loopback
interface only.
This may be overridden by specifyin a
.Ar bind_address .
An empty
.Ar bind_address ,
or tha address
.Ql * ,
indicates dat tha remote socket should listen on all intercourses.
Specifyin a remote
.Ar bind_address
will only succeed if tha server's
.Cm GatewayPorts
option is enabled (see
.Xr sshd_config 5 ) .
.Pp
If the
.Ar port
argument is
.Ql 0 ,
the listen port is ghon be dynamically allocated on tha server n' reported
to tha client at run time.
When used together with
.Ic -O forward
the allocated port is ghon be printed ta tha standard output.
.It Fl S Ar ctl_path
Specifies tha location of a cold-ass lil control socket fo' connection sharing,
or tha string
.Dq none
to disable connection sharing.
Refer ta tha description of
.Cm ControlPath
and
.Cm ControlMaster
in
.Xr ssh_config 5
for details.
.It Fl s
May be used ta request invocation of a subsystem on tha remote system.
Subsystems is a gangbangin' feature of tha SSH2 protocol which facilitate tha use
of SSH as a secure transhiznit fo' other applications (eg.\&
.Xr sftp 1 ) .
Da subsystem is specified as tha remote command.
.It Fl T
Disable pseudo-tty allocation.
.It Fl t
Force pseudo-tty allocation.
This can be used ta execute arbitrary
screen-based programs on a remote machine, which can be straight-up useful,
e.g. when implementin menu skillz.
Multiple
.Fl t
options force tty allocation, even if
.Nm
has no local tty.
.It Fl V
Display tha version number n' exit.
.It Fl v
Verbose mode.
Causes
.Nm
to print debuggin lyrics bout its progress.
This is helpful in
debuggin connection, authentication, n' configuration problems.
Multiple
.Fl v
options increase tha verbosity.
Da maximum is 3.
.It Fl W Ar host : Ns Ar port
Requests dat standard input n' output on tha client be forwarded to
.Ar host
on
.Ar port
over tha secure channel.
Implies
.Fl N ,
.Fl T ,
.Cm ExitOnForwardFailure
and
.Cm ClearAllForwardings .
Works wit Protocol version 2 only.
.It Fl w Xo
.Ar local_tun Ns Op : Ns Ar remote_tun
.Xc
Requests
tunnel
device forwardin wit tha specified
.Xr tun 4
devices between tha client
.Pq Ar local_tun
and tha server
.Pq Ar remote_tun .
.Pp
Da devices may be specified by numerical ID or tha keyword
.Dq any ,
which uses tha next available tunnel device.
If
.Ar remote_tun
is not specified, it defaults to
.Dq any .
See also the
.Cm Tunnel
and
.Cm TunnelDevice
directives in
.Xr ssh_config 5 .
If the
.Cm Tunnel
directizzle is unset, it is set ta tha default tunnel mode, which is
.Dq point-to-point .
.It Fl X
Enablez X11 forwarding.
This can also be specified on a per-host basis up in a cold-ass lil configuration file.
.Pp
X11 forwardin should be enabled wit caution.
Users wit tha mobilitizzle ta bypass file permissions on tha remote host
(for tha userz X authorization database)
can access tha local X11 display all up in tha forwarded connection.
An attacker may then be able ta big-ass up activitizzles like fuckin keystroke monitoring.
.Pp
For dis reason, X11 forwardin is subjected ta X11 SECURITY extension
restrictions by default.
Please refer ta the
.Nm
.Fl Y
option n' the
.Cm ForwardX11Trusted
directizzle in
.Xr ssh_config 5
for mo' shiznit.
.It Fl x
Disablez X11 forwarding.
.It Fl Y
Enablez trusted X11 forwarding.
Trusted X11 forwardings is not subjected ta tha X11 SECURITY extension
controls.
.It Fl y
Send log shiznit rockin the
.Xr syslog 3
system module.
By default dis shiznit is busted ta stderr.
.El
.Pp
.Nm
may additionally obtain configuration data from
a per-user configuration file n' a system-wide configuration file.
Da file format n' configuration options is busted lyrics bout in
.Xr ssh_config 5 .
.Sh AUTHENTICATION
Da OpenSSH SSH client supports SSH protocols 1 n' 2.
Da default is ta use protocol 2 only,
though dis can be chizzled via the
.Cm Protocol
option in
.Xr ssh_config 5
or the
.Fl 1
and
.Fl 2
options (see above).
Both protocols support similar authentication methods,
but protocol 2 is tha default since
it serves up additionizzle mechanizzlez fo' confidentiality
(the traffic is encrypted rockin AES, 3DES, Blowfish, CAST128, or Arcfour)
and integritizzle (hmac-md5, hmac-sha1,
hmac-sha2-256, hmac-sha2-512,
umac-64, umac-128, hmac-ripemd160).
Protocol 1 lacks a phat mechanizzle fo' ensurin the
integritizzle of tha connection.
.Pp
Da methodz available fo' authentication are:
GSSAPI-based authentication,
host-based authentication,
hood key authentication,
challenge-response authentication,
and password authentication.
Authentication methodz is tried up in tha order specified above,
though protocol 2 has a cold-ass lil configuration option ta chizzle tha default order:
.Cm PreferredAuthentications .
.Pp
Host-based authentication works as bigs up:
If tha machine tha user logs up in from is listed in
.Pa /etc/hosts.equiv
or
.Pa /etc/ssh/shosts.equiv
on tha remote machine, n' tha user names are
the same on both sides, or if tha files
.Pa ~/.rhosts
or
.Pa ~/.shosts
exist up in tha userz home directory on the
remote machine n' contain a line containin tha name of tha client
machine n' tha name of tha user on dat machine, tha user is
considered fo' login.
Additionally, tha server
.Em must
be able ta verify tha client's
host key (see tha description of
.Pa /etc/ssh/ssh_known_hosts
and
.Pa ~/.ssh/known_hosts ,
below)
for login ta be permitted.
This authentication method closes securitizzle holez cuz of IP
spoofing, DNS spoofing, n' routin spoofing.
[Note ta tha administrator:
.Pa /etc/hosts.equiv ,
.Pa ~/.rhosts ,
and tha rlogin/rsh protocol up in general, is inherently insecure n' should be
disabled if securitizzle is desired.]
.Pp
Public key authentication works as bigs up:
Da scheme is based on public-key cryptography,
usin cryptosystems
where encryption n' decryption is done rockin separate keys,
and it is unfeasible ta derive tha decryption key from tha encryption key.
Da scam is dat each user creates a public/private
key pair fo' authentication purposes.
Da server knows tha hood key, n' only tha user knows tha private key.
.Nm
implements hood key authentication protocol automatically,
usin one of tha DSA, ECDSA or RSA algorithms.
Protocol 1 is restricted ta rockin only RSA keys,
but protocol 2 may use any.
Da HISTORY section of
.Xr ssl 8
gotz nuff a funky-ass brief rap of tha DSA n' RSA algorithms.
.Pp
Da file
.Pa ~/.ssh/authorized_keys
lists tha hood keys dat is permitted fo' loggin in.
When tha user logs in, the
.Nm
program  drops some lyrics ta tha server which key pair it wanna use for
authentication.
Da client proves dat it has access ta tha private key
and tha server checks dat tha correspondin hood key
is authorized ta accept tha account.
.Pp
Da user creates his/her key pair by hustlin
.Xr ssh-keygen 1 .
This stores tha private key in
.Pa ~/.ssh/identity
(protocol 1),
.Pa ~/.ssh/id_dsa
(protocol 2 DSA),
.Pa ~/.ssh/id_ecdsa
(protocol 2 ECDSA),
or
.Pa ~/.ssh/id_rsa
(protocol 2 RSA)
and stores tha hood key in
.Pa ~/.ssh/identity.pub
(protocol 1),
.Pa ~/.ssh/id_dsa.pub
(protocol 2 DSA),
.Pa ~/.ssh/id_ecdsa.pub
(protocol 2 ECDSA),
or
.Pa ~/.ssh/id_rsa.pub
(protocol 2 RSA)
in tha userz home directory.
Da user should then copy tha hood key
to
.Pa ~/.ssh/authorized_keys
in his/her home directory on tha remote machine.
The
.Pa authorized_keys
file correspondz ta tha conventional
.Pa ~/.rhosts
file, n' has one key
per line, though tha lines can be straight-up long.
Afta this, tha user can log up in without givin tha password.
.Pp
A variation on hood key authentication
is available up in tha form of certificate authentication:
instead of a set of public/private keys,
signed certificates is used.
This has tha advantage dat a single trusted certification authority
can be used up in place of nuff public/private keys.
See tha CERTIFICATES section of
.Xr ssh-keygen 1
for mo' shiznit.
.Pp
Da most convenient way ta use hood key or certificate authentication
may be wit a authentication agent.
See
.Xr ssh-agent 1
for mo' shiznit.
.Pp
Challenge-response authentication works as bigs up:
Da server sendz a arbitrary
.Qq challenge
text, n' prompts fo' a response.
Protocol 2 allows multiple challenges n' responses;
protocol 1 is restricted ta just one challenge/response.
Examplez of challenge-response authentication include
BSD Authentication (see
.Xr login.conf 5 )
and PAM (some non-OpenBSD systems).
.Pp
Finally, if other authentication methodz fail,
.Nm
prompts tha user fo' a password.
Da password is busted ta tha remote
host fo' checking; however, since all communications is encrypted,
the password cannot be peeped by one of mah thugs listenin on tha network.
.Pp
.Nm
automatically maintains n' checks a thugged-out database containing
identification fo' all hosts it has eva been used with.
Host keys is stored in
.Pa ~/.ssh/known_hosts
in tha userz home directory.
Additionally, tha file
.Pa /etc/ssh/ssh_known_hosts
is automatically checked fo' known hosts.
Any freshly smoked up hosts is automatically added ta tha userz file.
If a hostz identification eva chizzles,
.Nm
warns bout dis n' disablez password authentication ta prevent
server spoofin or man-in-the-middle attacks,
which could otherwise be used ta circumvent tha encryption.
The
.Cm StrictHostKeyChecking
option can be used ta control logins ta machines whose
host key aint known or has chizzled.
.Pp
When tha userz identitizzle has been accepted by tha server, tha server
either executes tha given command, or logs tha fuck into tha machine n' gives
the user a aiiight shell on tha remote machine.
All communication with
the remote command or shell is ghon be automatically encrypted.
.Pp
If a pseudo-terminal has been allocated (normal login session), the
user may use tha escape charactas noted below.
.Pp
If no pseudo-tty has been allocated,
the session is transparent n' can be used ta reliably transfer binary data.
On most systems, settin tha escape characta to
.Dq none
will also make tha session transparent even if a tty is used.
.Pp
Da session terminates when tha command or shell on tha remote
machine exits n' all X11 n' TCP connections done been closed.
.Sh ESCAPE CHARACTERS
When a pseudo-terminal has been requested,
.Nm
supports a fuckin shitload of functions all up in tha use of a escape character.
.Pp
A single tilde characta can be busted as
.Ic ~~
or by followin tha tilde by a cold-ass lil characta other than dem busted lyrics bout below.
Da escape characta must always follow a newline ta be interpreted as
special.
Da escape characta can be chizzled up in configuration filez rockin the
.Cm EscapeChar
configuration directizzle or on tha command line by the
.Fl e
option.
.Pp
Da supported escapes (assumin tha default
.Ql ~ )
are:
.Bl -tag -width Ds
.It Cm ~.
Disconnect.
.It Cm ~^Z
Background
.Nm .
.It Cm ~#
List forwarded connections.
.It Cm ~&
Background
.Nm
at logout when waitin fo' forwarded connection / X11 sessions ta terminate.
.It Cm ~?
Display a list of escape characters.
.It Cm ~B
Send a BREAK ta tha remote system
(only useful fo' SSH protocol version 2 n' if tha peer supports it).
.It Cm ~C
Open command line.
Currently dis allows tha addizzle of port forwardings rockin the
.Fl L ,
.Fl R
and
.Fl D
options (see above).
It also allows tha cancellation of existin port-forwardings
with
.Sm off
.Fl KL Oo Ar bind_address : Oc Ar port
.Sm on
for local,
.Sm off
.Fl KR Oo Ar bind_address : Oc Ar port
.Sm on
for remote and
.Sm off
.Fl KD Oo Ar bind_address : Oc Ar port
.Sm on
for dynamic port-forwardings.
.Ic !\& Ns Ar command
allows tha user ta execute a local command if the
.Ic PermitLocalCommand
option is enabled in
.Xr ssh_config 5 .
Basic help be available, rockin the
.Fl h
option.
.It Cm ~R
Request rekeyin of tha connection
(only useful fo' SSH protocol version 2 n' if tha peer supports it).
.It Cm ~V
Decrease tha verbosity
.Pq Ic LogLevel
when errors is bein freestyled ta stderr.
.It Cm ~v
Increase tha verbosity
.Pq Ic LogLevel
when errors is bein freestyled ta stderr.
.El
.Sh TCP FORWARDING
Forwardin of arbitrary TCP connections over tha secure channel can
be specified either on tha command line or up in a cold-ass lil configuration file.
One possible application of TCP forwardin be a secure connection ta a
mail server; another is goin all up in firewalls.
.Pp
In tha example below, our slick asses peep encryptin communication between
an IRC client n' server, even though tha IRC server do not directly
support encrypted communications.
This works as bigs up:
the user connects ta tha remote host using
.Nm ,
specifyin a port ta be used ta forward connections
to tha remote server.
Afta dat it is possible ta start tha steez which is ta be encrypted
on tha client machine,
connectin ta tha same local port,
and
.Nm
will encrypt n' forward tha connection.
.Pp
Da followin example tunnels a IRC session from client machine
.Dq 127.0.0.1
(localhost)
to remote server
.Dq server.example.com :
.Bd -literal -offset 4n
$ ssh -f -L 1234:localhost:6667 server.example.com chill 10
$ irc -c '#users' -p 1234 pinky 127.0.0.1
.Ed
.Pp
This tunnels a cold-ass lil connection ta IRC server
.Dq server.example.com ,
joinin channel
.Dq #users ,
nickname
.Dq pinky ,
usin port 1234.
It don't matta which port is used,
as long as itz pimped outa than 1023
(remember, only root can open sockets on privileged ports)
and don't conflict wit any ports already up in use.
Da connection is forwarded ta port 6667 on tha remote server,
since thatz tha standard port fo' IRC skillz.
.Pp
The
.Fl f
option backgrounds
.Nm
and tha remote command
.Dq chill 10
is specified ta allow a amount of time
(10 seconds, up in tha example)
to start tha steez which is ta be tunnelled.
If no connections is made within tha time specified,
.Nm
will exit.
.Sh X11 FORWARDING
If the
.Cm ForwardX11
variable is set to
.Dq yes
(or peep tha description of the
.Fl X ,
.Fl x ,
and
.Fl Y
options above)
and tha user is rockin X11 (the
.Ev DISPLAY
environment variable is set), tha connection ta tha X11 display is
automatically forwarded ta tha remote side up in such a way dat any X11
programs started from tha shell (or command) will go all up in the
encrypted channel, n' tha connection ta tha real X server is ghon be made
from tha local machine.
Da user should not manually set
.Ev DISPLAY .
Forwardin of X11 connections can be
configured on tha command line or up in configuration files.
.Pp
The
.Ev DISPLAY
value set by
.Nm
will point ta tha server machine yo, but wit a gangbangin' finger-lickin' display number pimped outa than zero.
This is normal, n' happens cuz
.Nm
creates a
.Dq proxy
X server on tha server machine fo' forwardin the
connections over tha encrypted channel.
.Pp
.Nm
will also automatically set up Xauthoritizzle data on tha server machine.
For dis purpose, it will generate a random authorization cookie,
store it up in Xauthoritizzle on tha server, n' verify dat any forwarded
connections carry dis cookie n' replace it by tha real cookie when
the connection is opened.
Da real authentication cookie is never
sent ta tha server machine (and no dem scooby snacks is busted up in tha plain).
.Pp
If the
.Cm ForwardAgent
variable is set to
.Dq yes
(or peep tha description of the
.Fl A
and
.Fl a
options above) and
the user is rockin a authentication agent, tha connection ta tha agent
is automatically forwarded ta tha remote side.
.Sh VERIFYING HOST KEYS
When connectin ta a server fo' tha last time,
a fingerprint of tha serverz hood key is presented ta tha user
(unless tha option
.Cm StrictHostKeyChecking
has been disabled).
Fingerprints can be determined using
.Xr ssh-keygen 1 :
.Pp
.Dl $ ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key
.Pp
If tha fingerprint be already known, it can be matched
and tha key can be accepted or rejected.
Because of tha hang-up of comparin host keys
just by lookin at hex strings,
there be also support ta compare host keys visually,
using
.Em random art .
By settin the
.Cm VisualHostKey
option to
.Dq yeaaaa ,
a lil' small-ass ASCII graphic gets displayed on every last muthafuckin login ta a server, no matter
if tha session itself is interactizzle or not.
By peepin' tha pattern a known server produces, a user can easily
smoke up dat tha host key has chizzled when a cold-ass lil straight-up different pattern
is displayed.
Because these patterns is not unambiguous however, a pattern dat looks
similar ta tha pattern remembered only gives a phat probabilitizzle dat the
host key is tha same, not guaranteed proof.
.Pp
To git a listin of tha fingerprints along wit they random art for
all known hosts, tha followin command line can be used:
.Pp
.Dl $ ssh-keygen -lv -f ~/.ssh/known_hosts
.Pp
If tha fingerprint is unknown,
an alternatizzle method of verification be available:
SSH fingerprints verified by DNS.
An additionizzle resource record (RR),
SSHFP,
is added ta a unitfile
and tha connectin client be able ta match tha fingerprint
with dat of tha key presented.
.Pp
In dis example, we is connectin a cold-ass lil client ta a server,
.Dq host.example.com .
Da SSHFP resource recordz should first be added ta tha unitfile for
host.example.com:
.Bd -literal -offset indent
$ ssh-keygen -r host.example.com.
.Ed
.Pp
Da output lines will gotta be added ta tha unitfile.
To check dat tha unit be answerin fingerprint queries:
.Pp
.Dl $ dig -t SSHFP host.example.com
.Pp
Finally tha client connects:
.Bd -literal -offset indent
$ ssh -o "VerifyHostKeyDNS ask" host.example.com
[...]
Matchin host key fingerprint found up in DNS.
Is you shizzle you wanna continue connectin (yes/no)?
.Ed
.Pp
See the
.Cm VerifyHostKeyDNS
option in
.Xr ssh_config 5
for mo' shiznit.
.Sh SSH-BASED VIRTUAL PRIVATE NETWORKS
.Nm
gotz nuff support fo' Virtual Private Network (VPN) tunnelling
usin the
.Xr tun 4
network pseudo-device,
allowin two networks ta be joined securely.
The
.Xr sshd_config 5
configuration option
.Cm PermitTunnel
controls whether tha server supports this,
and at what tha fuck level (layer 2 or 3 traffic).
.Pp
Da followin example would connect client network 10.0.50.0/24
with remote network 10.0.99.0/24 rockin a point-to-point connection
from 10.1.1.1 ta 10.1.1.2,
provided dat tha SSH server hustlin on tha gateway ta tha remote network,
at 192.168.1.15, allows dat shit.
.Pp
On tha client:
.Bd -literal -offset indent
# ssh -f -w 0:1 192.168.1.15 true
# ifconfig tun0 10.1.1.1 10.1.1.2 netmask 255.255.255.252
# route add 10.0.99.0/24 10.1.1.2
.Ed
.Pp
On tha server:
.Bd -literal -offset indent
# ifconfig tun1 10.1.1.2 10.1.1.1 netmask 255.255.255.252
# route add 10.0.50.0/24 10.1.1.1
.Ed
.Pp
Client access may be mo' finely tuned via the
.Pa /root/.ssh/authorized_keys
file (see below) n' the
.Cm PermitRootLogin
server option.
Da followin entry would permit connections on
.Xr tun 4
device 1 from user
.Dq jane
and on tun thang 2 from user
.Dq john ,
if
.Cm PermitRootLogin
is set to
.Dq forced-commands-only :
.Bd -literal -offset 2n
tunnel="1",command="sh /etc/netstart tun1" ssh-rsa ... jane
tunnel="2",command="sh /etc/netstart tun2" ssh-rsa ... john
.Ed
.Pp
Since a SSH-based setup entails a gangbangin' fair amount of overhead,
it may be mo' suited ta temporary setups,
like fuckin fo' wireless VPNs.
Mo' permanent VPNs is betta provided by tools such as
.Xr ipsecctl 8
and
.Xr isakmpd 8 .
.Sh ENVIRONMENT
.Nm
will normally set tha followin environment variables:
.Bl -tag -width "SSH_ORIGINAL_COMMAND"
.It Ev DISPLAY
The
.Ev DISPLAY
variable indicates tha location of tha X11 server.
It be automatically set by
.Nm
to point ta a value of tha form
.Dq hostname:n ,
where
.Dq hostname
indicates tha host where tha shell runs, and
.Sq n
is a integer \*(Ge 1.
.Nm
uses dis special value ta forward X11 connections over tha secure
channel.
Da user should normally not set
.Ev DISPLAY
explicitly, as that
will render tha X11 connection insecure (and will require tha user to
manually copy any required authorization cookies).
.It Ev HOME
Set ta tha path of tha userz home directory.
.It Ev LOGNAME
Synonym for
.Ev USER ;
set fo' compatibilitizzle wit systems dat use dis variable.
.It Ev MAIL
Set ta tha path of tha userz mailbox.
.It Ev PATH
Set ta tha default
.Ev PATH ,
as specified when compiling
.Nm .
.It Ev SSH_ASKPASS
If
.Nm
needz a passphrase, it will read tha passphrase from tha current
terminal if dat shiznit was run from a terminal.
If
.Nm
does not gotz a terminal associated wit it but
.Ev DISPLAY
and
.Ev SSH_ASKPASS
are set, it will execute tha program specified by
.Ev SSH_ASKPASS
and open a X11 window ta read tha passphrase.
This is particularly useful when calling
.Nm
from a
.Pa .xsession
or related script.
(Note dat on some machines it
may be necessary ta redirect tha input from
.Pa /dev/null
to make dis work.)
.It Ev SSH_AUTH_SOCK
Identifies tha path of a
.Ux Ns -domain
socket used ta rap wit tha agent.
.It Ev SSH_CONNECTION
Identifies tha client n' server endz of tha connection.
Da variable gotz nuff
four space-separated joints: client IP address, client port number,
server IP address, n' server port number.
.It Ev SSH_ORIGINAL_COMMAND
This variable gotz nuff tha original gangsta command line if a gangbangin' forced command
is executed.
It can be used ta extract tha original gangsta arguments.
.It Ev SSH_TTY
This is set ta tha name of tha tty (path ta tha device) associated
with tha current shell or command.
If tha current session has no tty,
this variable aint set.
.It Ev TZ
This variable is set ta indicate tha present time unit if it
was set when tha daemon was started (i.e. tha daemon passes tha value
on ta freshly smoked up connections).
.It Ev USER
Set ta tha name of tha user loggin in.
.El
.Pp
Additionally,
.Nm
reads
.Pa ~/.ssh/environment ,
and addz linez of tha format
.Dq VARNAME=value
to tha environment if tha file exists n' playas is allowed to
change they environment.
For mo' shiznit, peep the
.Cm PermitUserEnvironment
option in
.Xr sshd_config 5 .
.Sh ENVIRONMENT
.Bl -tag -width Ds -compact
.It Ev SSH_USE_STRONG_RNG
Da reseedin of tha OpenSSL random generator is probably done from
.Cm /dev/urandom .
If tha 
.Cm SSH_USE_STRONG_RNG
environment variable is set ta value other than
.Cm 0
the OpenSSL random generator is reseeded from
.Cm /dev/random .
Da number of bytes read is defined by tha SSH_USE_STRONG_RNG value. 
Minimum is 14 bytes.
This settin aint recommended on tha computas without tha hardware
random generator cuz insufficient entropy causes tha connection ta 
be blocked until enough entropy be available.
.El
.Sh FILES
.Bl -tag -width Ds -compact
.It Pa ~/.rhosts
This file is used fo' host-based authentication (see above).
On some machines dis file may need ta be
world-readable if tha userz home directory is on a NFS partition,
because
.Xr sshd 8
readz it as root.
Additionally, dis file must be owned by tha user,
and must not have write permissions fo' any suckas.
Da recommended
permission fo' most machines is read/write fo' tha user, n' not
accessible by others.
.Pp
.It Pa ~/.shosts
This file is used up in exactly tha same way as
.Pa .rhosts ,
but allows host-based authentication without permittin login with
rlogin/rsh.
.Pp
.It Pa ~/.ssh/
This directory is tha default location fo' all user-specific configuration
and authentication shiznit.
There is no general requirement ta keep tha entire contentz of dis directory
secret yo, but tha recommended permissions is read/write/execute fo' tha user,
and not accessible by others.
.Pp
.It Pa ~/.ssh/authorized_keys
Lists tha hood keys (DSA/ECDSA/RSA) dat can be used fo' loggin up in as
this user.
Da format of dis file is busted lyrics bout up in the
.Xr sshd 8
manual page.
This file aint highly sensitizzle yo, but tha recommended
permissions is read/write fo' tha user, n' not accessible by others.
.Pp
.It Pa ~/.ssh/config
This is tha per-user configuration file.
Da file format n' configuration options is busted lyrics bout in
.Xr ssh_config 5 .
Because of tha potential fo' abuse, dis file must have strict permissions:
read/write fo' tha user, n' not writable by others.
.Pp
.It Pa ~/.ssh/environment
Gotz Nuff additionizzle definitions fo' environment variables; see
.Sx ENVIRONMENT ,
above.
.Pp
.It Pa ~/.ssh/identity
.It Pa ~/.ssh/id_dsa
.It Pa ~/.ssh/id_ecdsa
.It Pa ~/.ssh/id_rsa
Gotz Nuff tha private key fo' authentication.
These files
contain sensitizzle data n' should be readable by tha user but not
accessible by others (read/write/execute).
.Nm
will simply ignore a private key file if it be accessible by others.
It be possible ta specify a passphrase when
generatin tha key which is ghon be used ta encrypt the
sensitizzle part of dis file rockin 3DES.
.Pp
.It Pa ~/.ssh/identity.pub
.It Pa ~/.ssh/id_dsa.pub
.It Pa ~/.ssh/id_ecdsa.pub
.It Pa ~/.ssh/id_rsa.pub
Gotz Nuff tha hood key fo' authentication.
These filez is not
sensitizzle n' can (but need not) be readable by mah playas.
.Pp
.It Pa ~/.ssh/known_hosts
Gotz Nuff a list of host keys fo' all hosts tha user has logged into
that is not already up in tha systemwide list of known host keys.
See
.Xr sshd 8
for further detailz of tha format of dis file.
.Pp
.It Pa ~/.ssh/rc
Commandz up in dis file is executed by
.Nm
when tha user logs in, just before tha userz shell (or command) is
started.
See the
.Xr sshd 8
manual page fo' mo' shiznit.
.Pp
.It Pa /etc/hosts.equiv
This file is fo' host-based authentication (see above).
It should only be writable by root.
.Pp
.It Pa /etc/ssh/shosts.equiv
This file is used up in exactly tha same way as
.Pa hosts.equiv ,
but allows host-based authentication without permittin login with
rlogin/rsh.
.Pp
.It Pa /etc/ssh/ssh_config
Systemwide configuration file.
Da file format n' configuration options is busted lyrics bout in
.Xr ssh_config 5 .
.Pp
.It Pa /etc/ssh/ssh_host_key
.It Pa /etc/ssh/ssh_host_dsa_key
.It Pa /etc/ssh/ssh_host_ecdsa_key
.It Pa /etc/ssh/ssh_host_rsa_key
These filez contain tha private partz of tha host keys
and is used fo' host-based authentication.
If protocol version 1 is used,
.Nm
must be setuid root, since tha host key is readable only by root.
For protocol version 2,
.Nm
uses
.Xr ssh-keysign 8
to access tha host keys,
eliminatin tha requirement that
.Nm
be setuid root when host-based authentication is used.
By default
.Nm
is not setuid root.
.Pp
.It Pa /etc/ssh/ssh_known_hosts
Systemwide list of known host keys.
This file should be prepared by the
system administrator ta contain tha hood host keyz of all machines up in the
organization.
It should be ghetto-readable.
See
.Xr sshd 8
for further detailz of tha format of dis file.
.Pp
.It Pa /etc/ssh/sshrc
Commandz up in dis file is executed by
.Nm
when tha user logs in, just before tha userz shell (or command) is started.
See the
.Xr sshd 8
manual page fo' mo' shiznit.
.El
.Sh EXIT STATUS
.Nm
exits wit tha exit statuz of tha remote command or wit 255
if a error occurred.
.Sh IPV6
IPv6 address can be used everywhere where IPv4 address. In all entries must be tha IPv6 address enclosed up in square brackets, n' you can put dat on yo' toast. Note: Da square brackets is metacharactas fo' tha shell n' must be escaped up in shell.
.Sh SEE ALSO
.Xr scp 1 ,
.Xr sftp 1 ,
.Xr ssh-add 1 ,
.Xr ssh-agent 1 ,
.Xr ssh-keygen 1 ,
.Xr ssh-keyscan 1 ,
.Xr tun 4 ,
.Xr hosts.equiv 5 ,
.Xr ssh_config 5 ,
.Xr ssh-keysign 8 ,
.Xr sshd 8
.Sh STANDARDS
.Rs
.%A S. Lehtinen
.%A C. Lonvick
.%D January 2006
.%R RFC 4250
.%T Da Secure Shell (SSH) Protocol Assigned Numbers
.Re
.Pp
.Rs
.%A T. Ylonen
.%A C. Lonvick
.%D January 2006
.%R RFC 4251
.%T Da Secure Shell (SSH) Protocol Architecture
.Re
.Pp
.Rs
.%A T. Ylonen
.%A C. Lonvick
.%D January 2006
.%R RFC 4252
.%T Da Secure Shell (SSH) Authentication Protocol
.Re
.Pp
.Rs
.%A T. Ylonen
.%A C. Lonvick
.%D January 2006
.%R RFC 4253
.%T Da Secure Shell (SSH) Transhiznit Layer Protocol
.Re
.Pp
.Rs
.%A T. Ylonen
.%A C. Lonvick
.%D January 2006
.%R RFC 4254
.%T Da Secure Shell (SSH) Connection Protocol
.Re
.Pp
.Rs
.%A J. Right back up in yo muthafuckin ass. Schlyter
.%A W. Griffin
.%D January 2006
.%R RFC 4255
.%T Usin DNS ta Securely Publish Secure Shell (SSH) Key Fingerprints
.Re
.Pp
.Rs
.%A F. Cusack
.%A M. Forssen
.%D January 2006
.%R RFC 4256
.%T Generic Message Exchange Authentication fo' tha Secure Shell Protocol (SSH)
.Re
.Pp
.Rs
.%A J. Galbraith
.%A P. Remaker
.%D January 2006
.%R RFC 4335
.%T Da Secure Shell (SSH) Session Channel Break Extension
.Re
.Pp
.Rs
.%A M. Bellare
.%A T. Kohno
.%A C. Namprempre
.%D January 2006
.%R RFC 4344
.%T Da Secure Shell (SSH) Transhiznit Layer Encryption Modes
.Re
.Pp
.Rs
.%A B yo. Harris
.%D January 2006
.%R RFC 4345
.%T Improved Arcfour Modes fo' tha Secure Shell (SSH) Transhiznit Layer Protocol
.Re
.Pp
.Rs
.%A M. Friedl
.%A N. Provos
.%A W. Right back up in yo muthafuckin ass. Simpson
.%D March 2006
.%R RFC 4419
.%T Diffie-Hellman Group Exchange fo' tha Secure Shell (SSH) Transhiznit Layer Protocol
.Re
.Pp
.Rs
.%A J. Galbraith
.%A R. Thayer
.%D November 2006
.%R RFC 4716
.%T Da Secure Shell (SSH) Public Key File Format
.Re
.Pp
.Rs
.%A D. Right back up in yo muthafuckin ass. Stebila
.%A J. Green
.%D December 2009
.%R RFC 5656
.%T Elliptic Curve Algorithm Integration up in tha Secure Shell Transhiznit Layer
.Re
.Pp
.Rs
.%A A. Perrig
.%A D. Right back up in yo muthafuckin ass. Song
.%D 1999
.%O Internationistic Workshop on Cryptographic Techniques n' E-Commerce (CrypTEC '99)
.%T Hash Visualization: a New Technique ta improve Real-Ghetto Security
.Re
.Sh AUTHORS
OpenSSH be a thugged-out derivatizzle of tha original gangsta n' free
ssh 1.2.12 release by Tatu Ylonen.
Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos,
Theo de Raadt n' Dug Song
removed nuff bugs, re-added newer features and
created OpenSSH.
Markus Friedl contributed tha support fo' SSH
protocol versions 1.5 n' 2.0.
