.\"  Copyright (c) 1990-2009 Info-ZIP.  All muthafuckin rights reserved.
.\"
.\"  See tha accompanyin file LICENSE, version 2009-Jan-02 or later
.\"  (the contentz of which is also included up in unzip.h) fo' termz of use.
.\"  If, fo' some reason, all these filez is missing, tha Info-ZIP license
.\"  also may be found at:  ftp://ftp.info-zip.org/pub/infozip/license.html
.\"
.\" zipinfo.1 by Greg Roelofs n' others.
.\"
.\" =========================================================================
.\" define .X macro (for long-line ZipInfo output examples; lil' small-ass Courier):
.de X
.nf
.ft CW
.ie n .ti -5
.el \{ .ti +2m
.ps -1 \}
\&\\$1
.ie n .ti +5
.el \{ .ti -2m
.ps +1 \}
.ft
.fi
..
.\" define .EX/.EE (for multiline user-command examples; aiiight Courier font)
.de EX
.in +4n
.nf
.ft CW
..
.de EE
.ft
.fi
.in -4n
..
.\" =========================================================================
.TH ZIPINFO 1L "20 April 2009 (v3.0)" "Info-ZIP"
.SH NAME
zipinfo \- list detailed shiznit on some ZIP archive
.PD
.SH SYNOPSIS
\fBzipinfo\fP [\fB\-12smlvhMtTz\fP] \fIfile\fP[\fI.zip\fP]
[\fIfile(s)\fP\ .\|.\|.] [\fB\-x\fP\ \fIxfile(s)\fP\ .\|.\|.]
.PP
\fBunzip\fP \fB\-Z\fP [\fB\-12smlvhMtTz\fP] \fIfile\fP[\fI.zip\fP]
[\fIfile(s)\fP\ .\|.\|.] [\fB\-x\fP\ \fIxfile(s)\fP\ .\|.\|.]
.PD
.\" =========================================================================
.SH DESCRIPTION
\fIzipinfo\fP lists technical shiznit bout filez up in a ZIP archive, most
commonly found on MS-DOS systems.  Such shiznit includes file access
permissions, encryption status, type of compression, version n' operating
system or file system of compressin program, n' tha like.  Da default
behavior (with no options) is
to list single-line entries fo' each file up in tha archive, wit header and
traila lines providin summary shiznit fo' tha entire archive.  The
format be a cold-ass lil cross between Unix ``\fCls \-l\fR'' n' ``\fCunzip \-v\fR''
output.  See
.B "DETAILED DESCRIPTION"
below.  Note dat \fIzipinfo\fP is tha same ol' dirty program as \fIunzip\fP (under
Unix, a link ta it); on some systems, however, \fIzipinfo\fP support may
have been omitted when \fIunzip\fP was compiled.
.PD
.\" =========================================================================
.SH ARGUMENTS
.TP
.IR file [ .zip ]
Path of tha ZIP archive(s).  If tha file justification be a wildcard,
each matchin file is processed up in a order determined by tha operating
system (or file system).  Only tha filename can be a wildcard; tha path
itself cannot.  Wildcard expressions is similar ta Unix \fIegrep\fP(1)
(regular) expressions n' may contain:
.RS
.IP *
matches a sequence of 0 or mo' characters
.IP ?
matches exactly 1 character
.IP [.\|.\|.]
matches any single characta found inside tha brackets; ranges is specified
by a funky-ass beginnin character, a hyphen, n' a endin character n' shit.  If a exclamation
point or a cold-ass lil caret (`!' or `^') bigs up tha left bracket, then tha range of
charactas within tha brackets is complemented (that is, anythang \fIexcept\fP
the charactas inside tha brackets is considered a match).  To specify a
verbatim left bracket, tha three-characta sequence ``[[]'' has ta be used.
.RE
.IP
(Be shizzle ta quote any characta dat might otherwise be interpreted or
modified by tha operatin system, particularly under Unix n' VMS.)  If no
matches is found, tha justification be assumed ta be a literal filename;
and if dat also fails, tha suffix \fC.zip\fR be appended. Y'all KNOW dat shit, muthafucka!  Note that
self-extractin ZIP filez is supported, as wit any other ZIP archive;
just specify tha \fC.exe\fR suffix (if any) explicitly.
.IP [\fIfile(s)\fP]
An optionizzle list of archive thugz ta be processed, separated by spaces.
(VMS versions compiled wit VMSCLI defined must delimit filez wit commas
instead.)
Regular expressions (wildcards) may be used ta match multiple members; see
above.  Again, be shizzle ta quote expressions dat would otherwise be expanded
or modified by tha operatin system.
.IP [\fB\-x\fP\ \fIxfile(s)\fP]
An optionizzle list of archive thugz ta be excluded from processing.
.\" =========================================================================
.SH OPTIONS
.TP
.B \-1
list filenames only, one per line.  This option excludes all others; headers,
trailaz n' zipfile comments is never printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  It be intended fo' use in
Unix shell scripts.
.TP
.B \-2
list filenames only, one per line yo, but allow headaz (\fB\-h\fP), trailers
(\fB\-t\fP) n' zipfile comments (\fB\-z\fP), as well.  This option may be
useful up in cases where tha stored filenames is particularly long.
.TP
.B \-s
list zipfile info up in short Unix ``\fCls \-l\fR'' format.  This is tha default
behavior; peep below.
.TP
.B \-m
list zipfile info up in medium Unix ``\fCls \-l\fR'' format.  Identical ta the
\fB\-s\fP output, except dat tha compression factor, expressed as a
percentage, be also listed.
.TP
.B \-l
list zipfile info up in long Unix ``\fCls \-l\fR'' format.  As wit \fB\-m\fP
except dat tha compressed size (in bytes) is printed instead of the
compression ratio.
.TP
.B \-v
list zipfile shiznit up in verbose, multi-page format.
.TP
.B \-h
list header line.  Da archive name, actual size (in bytes) n' total number
of filez is printed.
.TP
.B \-M
pipe all output all up in a internal pager similar ta tha Unix \fImore\fP(1)
command. Y'all KNOW dat shit, muthafucka!  At tha end of a screenful of output, \fIzipinfo\fP pauses wit a
``\-\-Mo'\-\-'' prompt; tha next screenful may be viewed by pressin the
Enta (Return) key or tha space bar. Shiiit, dis aint no joke.  \fIzipinfo\fP can be terminated by
pressin tha ``q'' key and, on some systems, tha Enter/Return key.  Unlike
Unix \fImore\fP(1), there is no forward-searchin or editin capability.
Also, \fIzipinfo\fP don't notice if long lines wrap all up in tha edge of the
screen, effectively resultin up in tha printin of two or mo' lines n' the
likelihood dat some text will scroll off tha top of tha screen before being
viewed. Y'all KNOW dat shit, muthafucka!  On some systems tha number of available lines on tha screen is not
detected, up in which case \fIzipinfo\fP assumes tha height is 24 lines.
.TP
.B \-t
list totals fo' filez listed or fo' all files.  Da number of filez listed,
their uncompressed n' compressed total sizes , n' they overall compression
factor is printed; or, if only tha totals line is bein printed, tha joints
for tha entire archive is given. I aint talkin' bout chicken n' gravy biatch.  Da compressed total size do not include
the 12 additionizzle header bytez of each encrypted entry. Note dat tha total
compressed (data) size aint NEVER gonna match tha actual zipfile size, since the
latta includes all of tha internal zipfile headaz up in addizzle ta the
compressed data.
.TP
.B \-T
print tha file dates n' times up in a sortable decimal format (yymmdd.hhmmss).
Da default date format be a mo' standard, human-readable version with
abbreviated month names (see examplez below).
.TP
.B \-U
[UNICODE_SUPPORT only] modify or disable UTF-8 handling.
When UNICODE_SUPPORT be available, tha option \fB\-U\fP forces \fIunzip\fP
to escape all non-ASCII charactas from UTF-8 coded filenames as ``#Uxxxx''.
This option is mainly provided fo' debuggin purpose when tha fairly new
UTF-8 support is suspected ta mangle up extracted filenames.
.IP
Da option \fB\-UU\fP allows ta entirely disable tha recognizzle of UTF-8
encoded filenames.  Da handlin of filename codings within \fIunzip\fP falls
back ta tha behaviour of previous versions.
.TP
.B \-z
include tha archive comment (if any) up in tha listing.
.PD
.\" =========================================================================
.SH "DETAILED DESCRIPTION"
.I zipinfo
has a fuckin shitload of modes, n' its behavior can be rather hard as fuck ta fathom
if one aint familiar wit Unix \fIls\fP(1) (or even if one is).  Da default
behavior is ta list filez up in tha followin format:
.PP
.X "-rw-rws---  1.9 unx    2802 t- defX 11-Aug-91 13:48 perms.2660"
.PP
Da last three fieldz is tha modification date n' time of
the file, n' its name.  Da case of tha filename is bigged up; thus
filez dat come from MS-DOS PKZIP is always capitalized. Y'all KNOW dat shit, muthafucka!  If tha file
was zipped wit a stored directory name, dat be also displayed as part
of tha filename.
.PP
Da second n' third fieldz indicate dat tha file was zipped under
Unix wit version 1.9 of \fIzip\fP.  Since it be reppin Unix, tha file
permissions all up in tha beginnin of tha line is printed up in Unix format.
Da uncompressed file-size (2802 up in dis example) is tha fourth field.
.PP
Da fifth field consistz of two characters, either of which may take
on nuff muthafuckin joints, n' you can put dat on yo' toast.  Da first characta may be either `t' or `b', indicating
that \fIzip\fP believes tha file ta be text or binary, respectively;
but if tha file is encrypted, \fIzipinfo\fP
notes dis fact by capitalizin tha characta (`T' or `B').  Da second
characta may also take on four joints, dependin on whether there is
an extended local header and/or a ``extra field'' associated wit the
file (fully explained up in PKWarez APPNOTE.TXT yo, but basically analogous to
pragmas up in ANSI C--i.e., they provide a standard way ta include non-standard
information up in tha archive).  If neither exists, tha character
will be a hyphen (`\-'); if there be a extended local header but no extra
field, `l'; if tha reverse, `x'; n' if both exist, `X'.  Thus the
file up in dis example is (probably) a text file, aint encrypted, and
has neither a extra field nor a extended local header associated wit dat shit.
Da example below, on tha other hand, be a encrypted binary file wit an
extra field:
.PP
.X "RWD,R,R     0.9 vms     168 Bx shrk  9-Aug-91 19:15 perms.0644"
.PP
Extra fieldz is used fo' various purposes (see rap of tha \fB\-v\fP
option below) includin tha storage of VMS file attributes, which is
presumably tha case here, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  Note dat tha file attributes is listed in
VMS format.  Some other possibilitizzles fo' tha host operatin system (which
is straight-up a misnomer--host file system is mo' erect) include
OS/2 or NT wit High Performizzle File System (HPFS), MS-DOS, OS/2 or NT
with File Allocation Table (FAT) file system, n' Macintosh.  These are
denoted as bigs up:
.PP
.X "-rw-a--     1.0 hpf    5358 Tl i4:3  4-Dec-91 11:33 longfilename.hpfs"
.X "-r--ahs     1.1 fat    4096 b- i4:2 14-Jul-91 12:58 EA DATA. Right back up in yo muthafuckin ass. SF"
.X "--w-------  1.0 mac   17357 bx i8:2  4-May-92 04:02 unzip.macr"
.PP
File attributes up in tha straight-up original gangsta two cases is indicated up in a Unix-like format,
where tha seven subfieldz indicate whether tha file:  (1) be a gangbangin' finger-lickin' directory,
(2) is readable (always true), (3) is writable, (4) is executable (guessed
on tha basiz of tha extension--\fI.exe\fP, \fI.com\fP, \fI.bat\fP, \fI.cmd\fP
and \fI.btm\fP filez is assumed ta be so), (5) has its archive bit set,
(6) is hidden, n' (7) be a system file.  Interpretation of Macintosh file
attributes is unreliable cuz some Macintosh archivers don't store any
attributes up in tha archive.
.PP
Finally, tha sixth field indicates
the compression method n' possible sub-method used. Y'all KNOW dat shit, muthafucka!  There is six methods
known at present:  storin (no compression), reducing, shrinking, imploding,
tokenizin (never publicly busted out), n' deflating.  In addition, there are
four levelz of reducin (1 all up in 4); four typez of implodin (4K or 8K
slidin dictionary, n' 2 or 3 Shannon-Fano trees); n' four levels of
deflatin (superfast, fast, normal, maximum compression).  \fIzipinfo\fP
represents these methodz n' they sub-methodz as bigs up:  \fIstor\fP;
\fIre:1\fP, \fIre:2\fP, etc.; \fIshrk\fP; \fIi4:2\fP, \fIi8:3\fP, etc.;
\fItokn\fP; n' \fIdefS\fP, \fIdefF\fP, \fIdefN\fP, n' \fIdefX\fP.
.PP
Da medium n' long listings is almost identical ta tha short format except
that they add shiznit on tha filez compression. I aint talkin' bout chicken n' gravy biatch.  Da medium format lists
the filez compression factor as a cementage indicatin tha amount of space
that has been ``removed'':
.PP
.X "-rw-rws---  1.5 unx    2802 t- 81% defX 11-Aug-91 13:48 perms.2660"
.PP
In dis example, tha file has been compressed by mo' than a gangbangin' factor of
five; tha compressed data is only 19% of tha original gangsta size.  Da long
format gives tha compressed filez size up in bytes, instead:
.PP
.X "-rw-rws---  1.5 unx    2802 t-     538 defX 11-Aug-91 13:48 perms.2660"
.PP
In contrast ta tha \fIunzip\fP listings, tha compressed size figures in
this listin format denote tha complete size of compressed data, including
the 12 extra header bytes up in case of encrypted entries.
.PP
Addin tha \fB\-T\fP option chizzlez tha file date n' time ta decimal
format:
.PP
.X "-rw-rws---  1.5 unx    2802 t-     538 defX 910811.134804 perms.2660"
.PP
Note dat cuz of limitations up in tha MS-DOS format used ta store file
times, tha secondz field be always rounded ta tha nearest even second.
For Unix filez dis is sposed ta fuckin chizzle up in tha next major releases of
\fIzip\fP(1L) n' \fIunzip\fP.
.PP
In addizzle ta individual file shiznit, a thugged-out default zipfile listing
also includes header n' traila lines:
.PP
.X "Archive:  OS2.zip   5453 bytes   5 files"
.X ",,rw,       1.0 hpf     730 b- i4:3 26-Jun-92 23:40 Contents"
.X ",,rw,       1.0 hpf    3710 b- i4:3 26-Jun-92 23:33 makefile.os2"
.X ",,rw,       1.0 hpf    8753 b- i8:3 26-Jun-92 15:29 os2unzip.c"
.X ",,rw,       1.0 hpf      98 b- stor 21-Aug-91 15:34 unzip.def"
.X ",,rw,       1.0 hpf      95 b- stor 21-Aug-91 17:51 zipinfo.def"
.X "5 files, 13386 bytes uncompressed, 4951 bytes compressed:  63.0%"
.PP
Da header line gives tha name of tha archive, its total size, n' the
total number of files; tha traila gives tha number of filez listed,
their total uncompressed size, n' they total compressed size (not
includin any of \fIzip\fPz internal overhead).  If, however, one or
more \fIfile(s)\fP is provided, tha header n' traila lines are
not listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This behavior be also similar ta dat of Unixz ``\fCls \-l\fR'';
it may be overridden by specifyin tha \fB\-h\fP n' \fB\-t\fP options
explicitly.
In such a cold-ass lil case tha listin format must also be specified explicitly,
since \fB\-h\fP or \fB\-t\fP (or both) up in tha absence of other options implies
that ONLY tha header or traila line (or both) is listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See the
\fBEXAMPLES\fP section below fo' a semi-intelligible translation of this
nonsense.
.PP
Da verbose listin is mostly self-explanatory.  It also lists file
comments n' tha zipfile comment, if any, n' tha type n' number of bytes
in any stored extra fields.  Currently known typez of extra fieldz include
PKWAREz authentication (``AV'') info; OS/2 extended attributes; VMS
filesystem info, both PKWARE n' Info-ZIP versions; Macintosh resource
forks; Acorn/Archimedes SparkFS info; n' so on. I aint talkin' bout chicken n' gravy biatch.  (Note
that up in tha case of OS/2 extended attributes--like da most thugged-out common
use of zipfile extra fields--the size of tha stored EAs as reported by
\fIzipinfo\fP may not match tha number given by OS/2z \fIdir\fP command:
OS/2 always reports tha number of bytes required up in 16-bit format, whereas
\fIzipinfo\fP always reports tha 32-bit storage.)
.PP
Again, tha compressed size figurez of tha individual entries include the
12 extra header bytes fo' encrypted entries. Put ya muthafuckin choppers up if ya feel dis!  In contrast, tha archive total
compressed size n' tha average compression ratio shown up in tha summary
bottom line is calculated \fBwithout\fP tha extra 12 header bytes of
encrypted entries.
.PD
.\" =========================================================================
.SH "ENVIRONMENT OPTIONS"
Modifyin \fIzipinfo\fPz default behavior via options placed in
an environment variable can be a lil' bit fucked up ta explain, due to
\fIzipinfo\fPz attempts ta handle various defaults up in a intuitive,
yet Unix-like, manner n' shit.  (Try not ta laugh.)  Nevertheless, there is some
underlyin logic.  In brief,
there is three ``prioritizzle levels'' of options:  tha default options;
environment options, which can override or add ta tha defaults; and
explicit options given by tha user, which can override or add to
either of tha above.
.PP
Da default listin format, as noted above, correspondz roughly
to tha "\fCzipinfo \-hst\fR" command (except when individual zipfile members
are specified).
A user whoz ass prefers tha long-listin format (\fB\-l\fP) can make use of the
\fIzipinfo\fPz environment variable ta chizzle dis default:
.TP
Unix Bourne shell:
\f(CW\&ZIPINFO=\-l; export ZIPINFO\fP
.TP
Unix C shell:
\f(CW\&setenv ZIPINFO \-l\fP
.TP
OS/2 or MS-DOS:
\f(CW\&set ZIPINFO=\-l\fP
.TP
VMS (quotes fo' \fIlowercase\fP):
\f(CW\&define ZIPINFO_OPTS "\-l"\fP
.EE
.PP
If, up in addition, tha user dislikes tha traila line, \fIzipinfo\fP's
concept of ``negatizzle options'' may be used ta override tha default
inclusion of tha line.  This be accomplished by precedin tha undesired
option wit one or mo' minuses:  e.g., ``\fC\-l\-t\fR'' or ``\fC\-\-tl\fR'',
in dis example.  Da first hyphen is tha regular switch character yo, but the
one before tha `t' be a minus sign. I aint talkin' bout chicken n' gravy biatch.  Da dual use of hyphens may seem a
lil awkward yo, but itz reasonably intuitizzle nonetheless:  simply ignore
the first hyphen n' go from there, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  It be also consistent wit tha behavior
of tha Unix command \fInice\fP(1).
.PP
As suggested above, tha default variable names is ZIPINFO_OPTS fo' VMS
(where tha symbol used ta install \fIzipinfo\fP as a gangbangin' foreign command
would otherwise be trippin wit tha environment variable), n' ZIPINFO
for all other operatin systems.  For compatibilitizzle wit \fIzip\fP(1L),
ZIPINFOOPT be also accepted (don't ask).  If both ZIPINFO n' ZIPINFOOPT
are defined, however, ZIPINFO takes precedence.  \fIunzip\fPz diagnostic
option (\fB\-v\fP wit no zipfile name) can be used ta check tha joints
of all four possible \fIunzip\fP n' \fIzipinfo\fP environment variables.
.PD
.\" =========================================================================
.SH EXAMPLES
To git a funky-ass basic, short-format listin of tha complete contentz of a ZIP
archive \fIstorage.zip\fP, wit both header n' totals lines, use only
the archive name as a argument ta zipinfo:
.PP
.EX
zipinfo storage
.EE
.PP
To produce a funky-ass basic, long-format listin (not verbose), includin header and
totals lines, use \fB\-l\fP:
.PP
.EX
zipinfo \-l storage
.EE
.PP
To list tha complete contentz of tha archive without header n' totals
lines, either negate tha \fB\-h\fP n' \fB\-t\fP options or else specify the
contents explicitly:
.PP
.EX
zipinfo \-\-h\-t storage
zipinfo storage \e*
.EE
.PP
(where tha backslash is required only if tha shell would otherwise expand
the `*' wildcard, as up in Unix when globbin is turned on--double quotes around
the asterisk would have hit dat shiznit as well).  To turn off tha totals line by
default, use tha environment variable (C shell be assumed here):
.PP
.EX
setenv ZIPINFO \-\-t
zipinfo storage
.EE
.PP
To git tha full, short-format listin of tha straight-up original gangsta example again, given
that tha environment variable is set as up in tha previous example, it is
necessary ta specify tha \fB\-s\fP option explicitly, since tha \fB\-t\fP
option by itself implies dat ONLY tha foota line is ta be printed:
.PP
.EX
setenv ZIPINFO \-\-t
zipinfo \-t storage            \fR[only totals line]\fP
zipinfo \-st storage           \fR[full listing]\fP
.EE
.PP
Da \fB\-s\fP option, like \fB\-m\fP n' \fB\-l\fP, includes headaz and
footas by default, unless otherwise specified. Y'all KNOW dat shit, muthafucka!  Since tha environment
variable specified no footas n' dat has a higher precedence than the
default behavior of \fB\-s\fP, a explicit \fB\-t\fP option was necessary
to produce tha full listing.  Nothang was indicated bout tha header,
however, so tha \fB\-s\fP option was sufficient.  Note dat both the
\fB\-h\fP n' \fB\-t\fP options, when used by theyselves or with
each other, override any default listin of member files; only tha header
and/or foota is printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This behavior is useful when \fIzipinfo\fP is
used wit a wildcard zipfile justification; tha contentz of all zipfiles
are then summarized wit a single command.
.PP
To list shiznit on a single file within tha archive, up in medium format,
specify tha filename explicitly:
.PP
.EX
zipinfo \-m storage unshrink.c
.EE
.PP
Da justification of any member file, as up in dis example, will override
the default header n' totals lines; only tha single line of shiznit
about tha axed file is ghon be printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This is intuitively what tha fuck one
would expect when requestin shiznit on some single file.  For multiple
files, it is often useful ta know tha total compressed n' uncompressed
size; up in such cases \fB\-t\fP may be specified explicitly:
.PP
.EX
zipinfo \-mt storage "*.[ch]" Mak\e*
.EE
.PP
To git maximal shiznit bout tha ZIP archive, use tha verbose
option. I aint talkin' bout chicken n' gravy biatch.  It be probably wise ta pipe tha output tha fuck into a gangbangin' filta such as
Unix \fImore\fP(1) if tha operatin system allows it:
.PP
.EX
zipinfo \-v storage | more
.EE
.PP
Finally, ta peep da most thugged-out recently modified filez up in tha archive, use
the \fB\-T\fP option up in conjunction wit a external sortin utility
like fuckin Unix \fIsort\fP(1) (and \fIsed\fP(1) as well, up in dis example):
.PP
.EX
zipinfo \-T storage | sort -nr -k 7 | sed 15q
.EE
.PP
Da \fB\-nr\fP option ta \fIsort\fP(1)  drops some lyrics ta it ta sort numerically
in reverse order rather than up in textual order, n' tha \fB\-k\ 7\fP option
 drops some lyrics ta it ta sort on tha seventh field. Y'all KNOW dat shit, muthafucka!  This
assumes tha default short-listin format; if \fB\-m\fP or \fB\-l\fP is
used, tha proper \fIsort\fP(1) option would be \fB\-k\ 8\fP.
Older versionz of \fIsort\fP(1) do not support tha \fB\-k\fP option,
but you can use tha traditionizzle \fB\+\fP option instead, e.g.,
\fB\+6\fP instead of \fB\-k\ 7\fP.  Da \fIsed\fP(1)
command filtas up all but tha straight-up original gangsta 15 linez of tha listing.  Future
releasez of \fIzipinfo\fP may incorporate date/time n' filename sorting
as built-in options.
.PD
.\" =========================================================================
.SH TIPS
Da lyricist findz it convenient ta define a alias \fIii\fP fo' \fIzipinfo\fP
on systems dat allow aliases (or, on other systems, copy/rename the
executable, create a link or create a cold-ass lil command file wit tha name \fIii\fP).
Da \fIii\fP usage parallels tha common \fIll\fP alias fo' long listings in
Unix, n' tha similaritizzle between tha outputz of tha two commandz was
intentional.
.PD
.\" =========================================================================
.SH BUGS
As wit \fIunzip\fP, \fIzipinfo\fPz \fB\-M\fP (``more'') option is overly
simplistic up in its handlin of screen output; as noted above, it fails ta detect
the wrappin of long lines n' may thereby cause lines all up in tha top of tha screen
to be scrolled off before bein read. Y'all KNOW dat shit, muthafucka!  \fIzipinfo\fP should detect n' treat
each occurrence of line-wrap as one additionizzle line printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This requires
knowledge of tha screenz width as well as its height.  In addition,
\fIzipinfo\fP should detect tha legit screen geometry on all systems.
.PP
\fIzipinfo\fPz listing-format behavior is unnecessarily complex n' should
be simplified. Y'all KNOW dat shit, muthafucka!  (This aint ta say dat it will be.)
.PP
.\" =========================================================================
.SH "SEE ALSO"
\fIls\fP(1), \fIfunzip\fP(1L), \fIunzip\fP(1L), \fIunzipsfx\fP(1L),
\fIzip\fP(1L), \fIzipcloak\fP(1L), \fIzipnote\fP(1L), \fIzipsplit\fP(1L)
.PD
.\" =========================================================================
.SH URL
Da Info-ZIP home page is currently at
.EX
\fChttp://www.info-zip.org/pub/infozip/\fR
.EE
or
.EX
\fCftp://ftp.info-zip.org/pub/infozip/\fR .
.EE
.PD
.\" =========================================================================
.SH AUTHOR
Greg ``Cave Newt'' Roelofs.  ZipInfo gotz nuff pattern-matchin code
by Mark Adla n' fixes/improvements by nuff others.  Please refer ta the
CONTRIBS file up in tha UnZip source distribution fo' a mo' complete list.
