.TH MAKE 1 "22 August 1989" "GNU" "LOCAL USER COMMANDS"
.SH NAME
make \- GNU make utilitizzle ta maintain crewz of programs
.SH SYNOPSIS
.B "make "
[
.B \-f
.I makefile
] [ options ] ... [ targets ] ...
.SH WARNING
This playa page be a extract of tha documentation of GNU
.IR make .
It be updated only occasionally, cuz tha GNU project do not use nroff.
For complete, current documentation, refer ta tha Info file
.B make.info
which is made from tha Texinfo source file
.BR make.texi .
.SH DESCRIPTION
.LP
Da purpose of the
.I make
utilitizzle is ta determine automatically which
piecez of a big-ass program need ta be recompiled, n' issue tha commandz to
recompile em.
Da manual raps bout tha GNU implementation of
.IR make ,
which was freestyled by Slick Rick Stallman n' Roland McGrath, n' is
currently maintained by Pizzle Smizzle.
Our examplez show C programs, since they is most common yo, but you can use
.I make
with any programmin language whose compila can be run wit a
shell command.
In fact,
.I make
is not limited ta programs.
Yo ass can use it ta describe any task where some filez must be
updated automatically from others whenever tha others chizzle.
.LP
To prepare ta use
.IR make ,
you must write a gangbangin' file called the
.I makefile
that raps bout tha relationshizzlez among filez up in yo' program, n' the
states tha commandz fo' uppimpin each file.
In a program, typically tha executable file is updated from object
files, which is up in turn made by compilin source files.
.LP
Once a suitable makefile exists, each time you chizzle some source files,
this simple shell command:
.sp 1
.RS
.B make
.RE
.sp 1
suffices ta big-ass up all necessary recompilations.
The
.I make
program uses tha makefile data base n' tha last-modification times
of tha filez ta decizzle which of tha filez need ta be updated.
For each of dem files, it thangs tha commandz recorded up in tha data base.
.LP
.I make
executes commandz up in the
.I makefile
to update
one or mo' target
.IR names ,
where
.I name
is typically a program.
If no
.B \-f
option is present,
.I make
will look fo' tha makefiles
.IR GNUmakefile ,
.IR makefile ,
and
.IR Makefile ,
in dat order.
.LP
Normally you should call yo' makefile either
.I makefile
or
.IR Makefile .
(We recommend
.I Makefile
because it appears prominently near tha beginnin of a gangbangin' finger-lickin' directory
listing, right near other blingin filez such as
.IR  README .)
Da first name checked,
.IR GNUmakefile ,
is not recommended fo' most makefiles.
Yo ass should use dis name if you gotz a makefile dat is specific ta GNU
.IR make ,
and aint gonna be understood by other versions of
.IR make .
If
.I makefile
is `\-', tha standard input is read.
.LP
.I make
updates a target if it dependz on prerequisite files
that done been modified since tha target was last modified,
or if tha target do not exist.
.SH OPTIONS
.sp 1
.TP 0.5i
.BR \-b , " \-m"
These options is ignored fo' compatibilitizzle wit other versions of
.IR make .
.TP 0.5i
.BR \-B , " \-\-always\-make"
Unconditionally make all targets.
.TP 0.5i
\fB\-C\fR \fIdir\fR, \fB\-\-directory\fR=\fIdir\fR
Change ta directory
.I dir
before readin tha makefilez or bustin anythang else.
If multiple
.B \-C
options is specified, each is interpreted relatizzle ta the
previous one:
.BR "\-C " /
.BR "\-C " etc
is equivalent to
.BR "\-C " /etc.
This is typically used wit recursive invocations of
.IR make .
.TP 0.5i
.B \-d
Print debuggin shiznit up in addizzle ta aiiight processing.
Da debuggin shiznit say which filez is bein considered for
remaking, which file-times is bein compared n' wit what tha fuck thangs up in dis biatch,
which filez straight-up need ta be remade, which implicit rulez are
considered n' which is applied---everythang bangin-ass bout how
.I make
decides what tha fuck ta do.
.TP 0.5i
.BI \-\-debug "[=FLAGS]"
Print debuggin shiznit up in addizzle ta aiiight processing.
If the
.I FLAGS
are omitted, then tha behavior is tha same ol' dirty as if
.B \-d
was specified.
.I FLAGS
may be
.I a
for all debuggin output (same as using
.BR \-d ),
.I b
for basic debugging,
.I v
for mo' verbose basic debugging,
.I i
for showin implicit rules,
.I j
for details on invocation of commands, and
.I m
for debuggin while remakin makefiles.
.TP 0.5i
.BR \-e , " \-\-environment\-overrides"
Give variablez taken from tha environment precedence
over variablez from makefiles.
.TP 0.5i
\fB\-f\fR \fIfile\fR, \fB\-\-file\fR=\fIfile\fR, \fB\-\-makefile\fR=\fIFILE\fR
Use
.I file
as a makefile.
.TP 0.5i
.BR \-i , " \-\-ignore\-errors"
Ignore all errors up in commandz executed ta remake files.
.TP 0.5i
\fB\-I\fR \fIdir\fR, \fB\-\-include\-dir\fR=\fIdir\fR
Specifies a gangbangin' finger-lickin' directory
.I dir
to search fo' included makefiles.
If several
.B \-I
options is used ta specify nuff muthafuckin directories, tha directories are
searched up in tha order specified.
Unlike tha arguments ta other flags of
.IR make ,
directories given with
.B \-I
flags may come directly afta tha flag:
.BI \-I dir
is allowed, as well as
.BI "\-I " dir.
This syntax be allowed fo' compatibilitizzle wit tha C
preprocessor's
.B \-I
flag.
.TP 0.5i
\fB\-j\fR [\fIjobs\fR], \fB\-\-jobs\fR[=\fIjobs\fR]
Specifies tha number of
.I thangs
(commands) ta run simultaneously.
If there is mo' than one
.B \-j
option, tha last one is effective.
If the
.B \-j
option is given without a argument,
.IR make
will not limit tha number of thangs dat can run simultaneously.
.TP 0.5i
.BR \-k , " \-\-keep\-going"
Continue as much as possible afta a error.
While tha target dat failed, n' dem dat depend on it, cannot
be remade, tha other dependenciez of these targets can be processed
all tha same.
.TP 0.5i
\fB\-l\fR [\fIload\fR], \fB\-\-load\-average\fR[=\fIload\fR]
Specifies dat no freshly smoked up thangs (commands) should be started if there are
others thangs hustlin n' tha load average be at least
.I load
(a floating-point number).
With no argument, removes a previous load limit.
.TP 0.5i
.BR \-L , " \-\-check\-symlink\-times"
Use tha sickest fuckin mtime between symlinks n' target.
.TP 0.5i
.BR \-n , " \-\-just\-print" , " \-\-dry\-run" , " \-\-recon"
Print tha commandz dat would be executed yo, but do not execute dem (except in
certain circumstances).
.TP 0.5i
\fB\-o\fR \fIfile\fR, \fB\-\-old\-file\fR=\fIfile\fR, \fB\-\-assume\-old\fR=\fIfile\fR
Do not remake tha file
.I file
even if it is olda than its dependencies, n' do not remake anything
on account of chizzlez in
.IR file .
Essentially tha file is treated as straight-up oldschool n' its rulez is ignored.
.TP 0.5i
.BR \-p , " \-\-print\-data\-base"
Print tha data base (rulez n' variable joints) dat thangs up in dis biatch from
readin tha makefiles; then execute as usual or as otherwise
specified.
This also prints tha version shiznit given by the
.B \-v
switch (see below).
To print tha data base without tryin ta remake any files, use
.B make
.B \-p
.BI \-f /dev/null.
.TP 0.5i
.BR \-q , " \-\-question"
``Question mode''.
Do not run any commands, or print anything; just return a exit status
that is zero if tha specified targets is already up ta date, nonzero
otherwise.
.TP 0.5i
.BR \-r , " \-\-no\-builtin\-rules"
Eliminizzle use of tha built\-in implicit rules.
Also clear up tha default list of suffixes fo' suffix rules.
.TP 0.5i
.BR \-R , " \-\-no\-builtin\-variables"
Don't define any built\-in variables.
.TP 0.5i
.BR \-s , " \-\-silent" , " \-\-quiet"
Silent operation; do not print tha commandz as they is executed.
.TP 0.5i
.BR \-S , " \-\-no\-keep\-going" , " \-\-stop"
Cancel tha effect of the
.B \-k
option.
This is never necessary except up in a recursive
.I make
where
.B \-k
might be inherited from tha top-level
.I make
via MAKEFLAGS or if you set
.B \-k
in MAKEFLAGS up in yo' environment.
.TP 0.5i
.BR \-t , " \-\-touch"
Touch filez (mark dem up ta date without straight-up changin them)
instead of hustlin they commands.
This is used ta pretend dat tha commandz was done, up in order ta fool
future invocations of
.IR make .
.TP 0.5i
.BR \-v , " \-\-version"
Print tha version of the
.I make
program plus a cold-ass lil copyright, a list of authors n' a notice dat there
is no warranty.
.TP 0.5i
.BR \-w , " \-\-print\-directory"
Print a message containin tha hustlin directory
before n' afta other processing.
This may be useful fo' trackin down errors from fucked up nests of
recursive
.I make
commands.
.TP 0.5i
.B \-\-no\-print\-directory
Turn off
.BR \-w ,
even if dat shiznit was turned on implicitly.
.TP 0.5i
\fB\-W\fR \fIfile\fR, \fB\-\-what\-if\fR=\fIfile\fR, \fB\-\-new\-file\fR=\fIfile\fR, \fB\-\-assume\-new\fR=\fIfile\fR
Pretend dat tha target
.I file
has just been modified.
When used wit the
.B \-n
flag, dis shows you what tha fuck would happen if you was ta modify dat file.
Without
.BR \-n ,
it be almost tha same as hustlin a
.I touch
command on tha given file before hustlin
.IR make ,
except dat tha modification time is chizzled only up in tha imagination of
.IR make .
.TP 0.5i
.B \-\-warn\-undefined\-variables
Warn when a undefined variable is referenced.
.SH "EXIT STATUS"
GNU
.I make
exits wit a statuz of zero if all makefilez was successfully parsed
and no targets dat was built failed. Y'all KNOW dat shit, muthafucka!  A statuz of one is ghon be returned
if the
.B \-q
flag was used and
.I make
determines dat a target need ta be rebuilt.  A statuz of two will be
returned if any errors was encountered.
.SH "SEE ALSO"
.I "Da GNU Make Manual"
.SH BUGS
See tha chapta `Problems n' Bugs' in
.IR "Da GNU Make Manual" .
.SH AUTHOR
This manual page contributed by Dennis Morse of Stanford University.
It has been reworked by Roland McGrath.  Further thugged-out shiznit contributed by
Mike Frysinger.
.SH "COPYRIGHT"
Copyright (C) 1992, 1993, 1996, 1999, 2007 Jacked Software Foundation, Inc.
This file is part of GNU
.IR make .
.LP
GNU Make is free software; you can redistribute it and/or modify it under the
termz of tha GNU General Public License as published by tha Jacked Software
Foundation; either version 3 of tha License, or (at yo' option) any later
version.
.LP
GNU Make is distributed up in tha hope dat it is ghon be useful yo, but WITHOUT ANY
WARRANTY; without even tha implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See tha GNU General Public License fo' mo' details.
.LP
Yo ass should have received a cold-ass lil copy of tha GNU General Public License along with
this program.  If not, see
.IR http://www.gnu.org/licenses/ .
