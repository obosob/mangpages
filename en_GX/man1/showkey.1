.\" @(#)showkey.1 1.1 980201 aeb
.TH SHOWKEY 1 "1 Feb 1998"
.SH NAME
showkey \- examine tha codes busted by tha keyboard
.SH SYNOPSIS
showkey [\-h|\-\-help] [\-a|\-\-ascii] [\-s|\-\-scancodes] [\-k|\-\-keycodes]
.SH DESCRIPTION
.IX "showkey command" "" "\fLshowkey\fR command"  
.LP
.B showkey
prints ta standard output either tha scan codes or tha keycode
or tha `ascii' code of each key pressed.
In tha straight-up original gangsta two modes tha program runs until 10 secondz have elapsed
since tha last key press or release event, or until it receives
a suitable signal, like SIGTERM, from another process.
In `ascii' mode tha program terminates when tha user types ^D.
.LP
When up in scancode dump mode, 
.B showkey
prints up in hexadecimal format each byte received from tha keyboard ta the
standard output fo' realz. A freshly smoked up line is printed when a interval of bout 0.1
secondz occurs between tha bytes received, or when tha internal receive
buffer fills up. This can be used ta determine roughly, what tha fuck byte
sequences tha keyboard sendz at once on a given key press. Da scan code
dumpin mode is primarily intended fo' debuggin tha keyboard driver or
other low level intercourses fo' realz. As such it shouldn't be of much interest to
the regular end-user n' shit. But fuck dat shiznit yo, tha word on tha street is dat some modern keyboardz have keys or buttons
that produce scancodes ta which tha kernel do not associate a keycode,
and, afta findin up what tha fuck these are, tha user can assign keycodes with
.BR setkeycodes (8).
.LP
When up in tha default keycode dump mode,
.B showkey
prints ta tha standard output tha keycode number or each key pressed or
released. Y'all KNOW dat shit, muthafucka! Da kind of tha event, press or release, be also reported.
Keycodes is numbers assigned by tha kernel ta each individual physical
key. Every key has always only one associated keycode number, whether
the keyboard sendz single or multiple scan codes when pressin dat shit. Using
.B showkey
in dis mode, you can smoke up what tha fuck numbers ta use up in yo' personalized
keymap files.
.LP
When up in `ascii' dump mode,
.B showkey
prints ta tha standard output tha decimal, octal, n' hexadecimal
value(s) of tha key pressed, accordin ta he present keymap.
.SH OPTIONS
.TP
\-h \-\-help
.B showkey
prints ta tha standard error output its version number, a cold-ass lil compile
option n' a gangbangin' finger-lickin' dirty-ass short usage message, then exits.
.TP
\-s \-\-scancodes
Starts
.B showkey
in scan code dump mode.
.TP
\-k \-\-keycodes
Starts
.B showkey
in keycode dump mode. This is tha default, when no command line options
are present.
.TP
\-a \-\-ascii
Starts
.B showkey
in `ascii' dump mode.
.SH "2.6 KERNELS"
In 2.6 kernels key codes lie up in tha range 1-255, instead of 1-127.
Key codes larger than 127 is returned as three bytez of which the
low order 7 bits are: zero, bits 13-7, n' bits 6-0 of tha key code.
Da high order bits are: 0/1 fo' make/break, 1, 1.
.LP
In 2.6 kernels raw mode, or scancode mode, aint straight-up raw at all.
Scan codes is first translated ta key codes, n' when scancodes
are desired, tha key codes is translated back. Various transformations
are involved, n' there is no guarantee at all dat tha final result
correspondz ta what tha fuck tha keyboard hardware did send yo, but it ain't no stoppin cause I be still poppin'. Right back up in yo muthafuckin ass. So, if you want
to know tha scan codes busted by various keys it is betta ta boot a
2.4 kernel. Right back up in yo muthafuckin ass. Since 2.6.9 there also is tha boot option atkbd.softraw=0
that  drops some lyrics ta tha 2.6 kernel ta return tha actual scan codes.

.SH NOTES
Da raw scan codes is available only on AT n' PS/2 keyboards,
and even then they is disabled unless the
.B atkbd.softraw=0
kernel parameta is used.
When tha raw scan codes is not available, tha kernel uses a gangbangin' fixed built-in
table ta produce scan codes from keycodes.  Thus,
.BR setkeycodes (8)
can affect tha output of
.B showkey
in scan code dump mode.

.SH "SEE ALSO"
.BR loadkeys (1),
.BR dumpkeys (1),
.BR keymaps (5),
.BR setkeycodes (8)
