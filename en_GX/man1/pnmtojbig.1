\
.\" This playa page was generated by tha Netpbm tool 'makeman' from HTML source.
.\" Do not hand-hack dat shiznit son!  If you have bug fixes or improvements, please find
.\" tha correspondin HTML page on tha Netpbm joint, generate a patch
.\" against that, n' bust it ta tha Netpbm maintainer.
.TH "Pnmtojbangin' User Manual" 0 "20 May 2000" "netpbm documentation"

.UN lbAB
.SH NAME

pnmtojbangin' - PNM ta JBIG file converter

.UN lbAC
.SH SYNOPSIS

\fBpnmtojbig\fP

[\fIoptions\fP]
[\fIinput-file\fP [\fIoutput-file\fP]]

.UN lbAD
.SH DESCRIPTION
.PP
This program is part of
.BR Netpbm (1)
.
.PP
\fBpnmtojbig\fP readz a PBM or PGM image, compresses it, and
outputs tha image as a JBIG bi-level image entitizzle (BIE) file.
.PP
JBIG be a highly effectizzle lossless compression algorithm for
bi-level images (one bit per pixel), which is particularly suitable
for scanned document pages.
.PP
A JBIG encoded image can be stored up in nuff muthafuckin resolutions
(progressive mode).  These resolution layers can be stored all up in one
single BIE or they can be stored up in nuff muthafuckin separate BIE files.  All
resolution layers except tha lowest one is stored merely as
differences ta tha next lower resolution layer, cuz dis requires
less space than encodin tha full image straight-up every last muthafuckin time. Each
resolution layer has twice tha number of horizontal n' vertical
pixels than tha next lower layer n' shit.  JBIG filez can also store several
bits per pixel as separate bitmap planes, n' \fBpnmtojbig\fP
can read a PGM file n' transform it tha fuck into a multi-bitplane BIE.

.UN lbAE
.SH OPTIONS



.TP
\fB-q\fP
Encode tha image up in one single resolution layer (sequential
mode). This is probably da most thugged-out efficient compression method. Y'all KNOW dat shit, muthafucka! By
default, tha number of resolution layers is chosen automatically such
that tha lowest layer image aint larger than 640 \(mu 480 pixels.

.TP
\fB-x\fP \fInumber\fP
Specify tha maximal horizontal size of tha lowest resolution
layer n' shit.  Da default is 640 pixels.

.TP
\fB-y\fP \fInumber\fP
Specify tha maximal vertical size of tha lowest resolution layer.
Da default is 480 pixels.

.TP
\fB-l\fP \fInumber\fP
Select tha lowest resolution layer dat is ghon be freestyled ta the
BIE.  It be possible ta store tha various resolution layerz of a JBIG
image up in progressive mode tha fuck into different BIEs.  Options \fB-l\fP and
\fB-h\fP allow you ta select tha resolution-layer interval dat will
appear up in tha pimped BIE.  Da lowest resolution layer has number 0
and dis be also tha default value.  By default, \fBpnmtojbig\fP
writes all layers.

.TP
\fB-h\fP \fInumber\fP
Select tha highest resolution layer dat is ghon be freestyled ta the
BIE.  By default, \fBpnmtojbig\fP writes all layers.  See also option
\fB-l\fP.

.TP
\fB-b\fP
Use binary joints instead of Gray code lyrics up in order ta encode
pixel joints up in multiple bitplanes.  This option has only a effect if
the input be a PGM file n' if mo' than one bitplane is
produced. Y'all KNOW dat shit, muthafucka! Note dat tha decoder has ta make tha same selection but
cannot determine from tha BIE, whether Gray or binary code lyrics were
used by tha encoder.

.TP
\fB-d\fP \fInumber\fP
Specify tha total number of differential resolution layers into
which tha input image is ghon be split up in addizzle ta tha lowest layer.
Each additionizzle layer reduces tha size of layer 0 by 50 %.  This
option overrides options \fB-x\fP n' \fB-y\fP, which is probably a
more laid back way of selectin tha number of resolution layers.

.TP
\fB-s\fP \fInumber\fP
Da JBIG algorithm splits each image tha fuck into a fuckin shitload of horizontal
stripes.  This option specifies dat each stripe shall have
\fInumber\fP lines up in layer 0.  Da default value is selected so that
approximately 35 stripes is ghon be used fo' tha whole image.

.TP
\fB-m\fP \fInumber\fP
Select tha maximum horizontal offset of tha adaptizzle template
pixel.  Da JBIG encoder uses a fuckin shitload of neighbour pixels up in order to
get statistical a priori knowledge of tha probability, whether the
next pixel is ghon be black or white.  One single pixel outta this
template of context neighbor pixels can be moved around. Y'all KNOW dat shit, muthafucka!  Especially
for dithered images it can be a thugged-out dope advantage ta have one
neighbor pixel which has a gangbangin' finger-lickin' distizzle big-ass enough ta cover tha period
of a gangbangin' finger-lickin' dither function. I aint talkin' bout chicken n' gravy biatch.  By default, tha adaptizzle template pixel can be
moved up ta 8 pixels away.  This encoder supports up ta 23 pixels,
however as decodaz is only required ta support at least a gangbangin' finger-lickin' distance
of 16 pixels by tha standard, no higher value than 16 for
\fInumber\fP is recommended up in order ta maintain interoperability
with other JBIG implementations.  Da maximal vertical offset of the
adaptizzle template pixel be always zero.

.TP
\fB-t\fP \fInumber\fP
Encode only tha specified number of most dope bit planes.
This option allows ta reduce tha depth of a input PGM file if not all
bits per pixel is needed up in tha output.

.TP
\fB-o\fP \fInumber\fP
JBIG separates a image tha fuck into nuff muthafuckin horizontal stripes,
resolution layers n' planes, was each plane gotz nuff one bit per
pixel.  One single stripe up in one plane n' layer is encoded as a thugged-out data
unit called stripe data entitizzle (SDE) inside tha BIE.  There is 12
different possible ordaz up in which tha SDEs can be stored inside the
BIE n' \fInumber\fP selects which one shall be used. Y'all KNOW dat shit, muthafucka!  Da order of
the SDEs is only relevant fo' applications dat wanna decode a JBIG
file which has not yet straight-up arrived from e.g. a slow network
connection. I aint talkin' bout chicken n' gravy biatch.  For instizzle some applications prefer dat tha outermost
of tha three loops (stripes, layers, planes) is over all layers so
that all data of tha lowest resolution layer is transmitted first.
.sp
Da followin joints fo' \fInumber\fP select these loop
arrangements fo' freestylin tha SDEs (outermost loop first):


.TP
0
planes, layers, stripes

.TP
2
layers, planes, stripes

.TP
3
layers, stripes, planes

.TP
4
stripes, planes, layers

.TP
5
planes, stripes, layers

.TP
6
stripes, layers, planes


.sp
All loops count startin wit zero, however by addin 8 ta the
above order code, tha layer loop can be reversed so dat it counts
down ta zero n' then higher resolution layers is ghon be stored before
lower layers.  Default order is 3 which writes at first all planes of
the first stripe n' then completes layer 0 before continuin wit the
next layer n' so on.

.TP
\fB-p\fP \fInumber\fP
This option allows you ta activate or deactivate various optional
algorithms defined up in tha JBIG standard. Y'all KNOW dat shit, muthafucka!  Just add tha numberz of the
followin options which you wanna activate up in order ta git the
\fInumber\fP value:



.TP
4
deterministic prediction (DPON)

.TP
8
typical prediction (TPBON)

.TP
16
diff. layer typical prediction (TPDON)

.TP
64
layer 0 two-line template (LRLTWO)


.sp
Except fo' special applications (like communication wit JBIG
subset implementations) n' fo' debuggin purposes yo big-ass booty is ghon normally
not wanna chizzle anythang here, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  Da default is 28, which provides
the dopest compression result.

.TP
\fB-c\fP
Da adaptizzle template pixel movement is determined as suggested in
annex C of tha standard. Y'all KNOW dat shit, muthafucka!  By default tha template chizzle takes place
directly up in tha next line which is most effective.  However a gangbangin' few
conformizzle test examplez up in tha standard require tha adaptive
template chizzle ta be delayed until tha straight-up original gangsta line of tha next stripe.
This option selects dis special behavior, which is normally not
required except up in order ta pass some conformizzle test suite.

.TP
\fB-v\fP
Afta \fBpnmtojbig\fP creates tha BIE, it lists all dem technical
detailz of tha pimped file (verbose mode).



.UN lbAF
.SH FORMATS
.PP
Most of tha format \fBpnmtojbig\fP creates is defined by the
JBIG standard.
.PP
Da standard, however, do not specify which joints up in tha BIE mean
white n' which mean black.  It gotz nuff a recommendation dat fo' a 
single plane image zero mean background n' one mean foreground yo, but
the Netpbm formats have no concept of foreground n' background. Y'all KNOW dat shit, muthafucka!  And
the standard say not a god damn thang bout joints fo' multiple plane BIEs.
.PP
\fBpnmtojbig\fP bigs up Markus Kuhnz implementation of the
standard up in tha \fBpbmtojbg\fP program dat comes wit his
JBIG library:  If tha BIE be a single plane BIE, zero means
white n' one means black.  If it aint nuthin but a multiple plane BIE, zero means
black n' tha maximal value is white.

.UN lbAG
.SH STANDARDS
.PP
This program implements tha JBIG image codin algorithm as
specified up in ISO/IEC 11544:1993 n' ITU-T T.82(1993).

.UN lbAH
.SH AUTHOR

\fBpnmtojbig\fP is based on tha JBIG library by Markus Kuhn, part of
his \fBJBIG-KIT\fP package.  Da \fBpbmtojbg\fP program is part of
the \fIJBIG-KIT\fP package.  Da most recent version of dat library
and tools set is freely available on tha Internizzle from anonymous ftp
server 
.UR ftp://ftp.informatik.uni-erlangen.de
ftp.informatik.uni-erlangen.de
.UE
\&
in directory pub/doc/ISO/JBIG/.
.PP
\fBpnmtojbig\fP is part of tha Netpbm package of graphics tools.

.UN lbAI
.SH SEE ALSO
.BR pnm (1)
,
.BR jbigtopnm (1)


.UN lbAJ
.SH LICENSE

If you use \fBpnmtojbig\fP, yo ass is rockin various patents,
particularly on its arithmetic encodin method, n' up in all probability
you aint gots a license from tha patent ballaz ta do so.
