.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLCYGWIN 1"
.TH PERLCYGWIN 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlcygwin \- Perl fo' Cygwin
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document will help you configure, make, test n' install Perl
on Cygwin. I aint talkin' bout chicken n' gravy biatch.  This document also raps bout featurez of Cygwin dat will
affect how tha fuck Perl behaves at runtime.
.PP
\&\fB\s-1NOTE:\s0\fR There is pre-built Perl packages available fo' Cygwin n' a
version of Perl is provided up in tha aiiight Cygwin install.  If you do
not need ta customize tha configuration, consider rockin one of them
packages.
.SH "PREREQUISITES FOR COMPILING PERL ON CYGWIN"
.IX Header "PREREQUISITES FOR COMPILING PERL ON CYGWIN"
.SS "Cygwin = GNU+Cygnus+Windows (Don't leave \s-1UNIX\s0 without it)"
.IX Subsection "Cygwin = GNU+Cygnus+Windows (Don't leave UNIX without it)"
Da Cygwin tools is portz of tha ghettofab \s-1GNU\s0 pimpment tools fo' Win32
platforms.  They run props ta tha Cygwin library which serves up tha \s-1UNIX\s0
system calls n' environment these programs expect.  Mo' shiznit
about dis project can be found at:
.PP
<http://www.cygwin.com/>
.PP
A recent net or commercial release of Cygwin is required.
.PP
At tha time dis document was last updated, Cygwin 1.7.16 was current.
.SS "Cygwin Configuration"
.IX Subsection "Cygwin Configuration"
While buildin Perl some chizzlez may be necessary ta yo' Cygwin setup so
that Perl buildz cleanly.  These chizzlez is \fBnot\fR required fo' normal
Perl usage.
.PP
\&\fB\s-1NOTE:\s0\fR Da binaries dat is built will run on all Win32 versions.
They do not depend on yo' host system (WinXP/Win2K/Win7) or your
Cygwin configuration (binary/text mounts, cvgserver).
Da only dependencies come from hard-coded pathnames like \fI/usr/local\fR.
But fuck dat shiznit yo, tha word on tha street is dat yo' host system n' Cygwin configuration will affect Perl's
runtime behavior (see \*(L"\s-1TEST\*(R"\s0).
.IP "\(bu" 4
\&\f(CW\*(C`PATH\*(C'\fR
.Sp
Set tha \f(CW\*(C`PATH\*(C'\fR environment variable so dat Configure findz tha Cygwin
versionz of programs fo' realz. Any not-needed Windows directories should be removed or
moved ta tha end of yo' \f(CW\*(C`PATH\*(C'\fR.
.IP "\(bu" 4
\&\fInroff\fR
.Sp
If you aint gots \fInroff\fR (which is part of tha \fIgroff\fR package),
Configure will \fBnot\fR prompt you ta install \fIman\fR pages.
.SH "CONFIGURE PERL ON CYGWIN"
.IX Header "CONFIGURE PERL ON CYGWIN"
Da default options gathered by Configure wit tha assistizzle of
\&\fIhints/cygwin.sh\fR will build a Perl dat supports dynamic loading
(which requires a gangbangin' finger-lickin' dirty-ass shared \fIcygperl5_16.dll\fR).
.PP
This will run Configure n' keep a record:
.PP
.Vb 1
\&  ./Configure 2>&1 | tee log.configure
.Ve
.PP
If yo ass is willin ta accept all tha defaults run Configure wit \fB\-de\fR.
But fuck dat shiznit yo, tha word on tha street is dat nuff muthafuckin useful customizations is available.
.SS "Strippin Perl Binaries on Cygwin"
.IX Subsection "Strippin Perl Binaries on Cygwin"
It be possible ta strip tha EXEs n' DLLs pimped by tha build process.
Da resultin binaries is ghon be hella smalla n' shit.  If you want the
binaries ta be stripped, you can either add a \fB\-s\fR option when Configure
prompts you,
.PP
.Vb 4
\&  Any additionizzle ld flags (NOT includin libraries)? [none] \-s
\&  Any special flags ta pass ta g++ ta create a thugged-out dynamically loaded library?
\&  [none] \-s
\&  Any special flags ta pass ta gcc ta use dynamic linking? [none] \-s
.Ve
.PP
or you can edit \fIhints/cygwin.sh\fR n' uncomment tha relevant variables
near tha end of tha file.
.SS "Optionizzle Libraries fo' Perl on Cygwin"
.IX Subsection "Optionizzle Libraries fo' Perl on Cygwin"
Several Perl functions n' modulez depend on tha existence of
some optionizzle libraries. Put ya muthafuckin choppers up if ya feel dis!  Configure will find dem if they are
installed up in one of tha directories listed as bein used fo' library
searches.  Pre-built packages fo' most of these is available from
the Cygwin installer.
.IP "\(bu" 4
\&\f(CW\*(C`\-lcrypt\*(C'\fR
.Sp
Da crypt package distributed wit Cygwin be a Linux compatible 56\-bit
\&\s-1DES\s0 crypt port by Corinna Vinschen.
.Sp
Alternatively, tha crypt libraries up in \s-1GNU\s0 libc done been ported ta Cygwin.
.IP "\(bu" 4
\&\f(CW\*(C`\-lgdbm_compat\*(C'\fR (\f(CW\*(C`use GDBM_File\*(C'\fR)
.Sp
\&\s-1GDBM\s0 be available fo' Cygwin.
.Sp
\&\s-1NOTE:\s0 Da \s-1GDBM\s0 library only works on \s-1NTFS\s0 partitions.
.IP "\(bu" 4
\&\f(CW\*(C`\-ldb\*(C'\fR (\f(CW\*(C`use DB_File\*(C'\fR)
.Sp
BerkeleyDB be available fo' Cygwin.
.Sp
\&\s-1NOTE:\s0 Da BerkeleyDB library only straight-up works on \s-1NTFS\s0 partitions.
.IP "\(bu" 4
\&\f(CW\*(C`cygserver\*(C'\fR (\f(CW\*(C`use IPC::SysV\*(C'\fR)
.Sp
A port of SysV \s-1IPC\s0 be available fo' Cygwin.
.Sp
\&\s-1NOTE:\s0 This has \fBnot\fR been extensively tested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  In particular,
\&\f(CW\*(C`d_semctl_semun\*(C'\fR is undefined cuz it fails a Configure test
and on Win9x tha \fIshm*()\fR functions seem ta hang.  It also creates
a compile time dependency cuz \fIperl.h\fR includes \fI<sys/ipc.h\fR>
and \fI<sys/sem.h\fR> (which is ghon be required up in tha future when compiling
\&\s-1CPAN\s0 modules). \s-1CURRENTLY NOT SUPPORTED\s0!
.IP "\(bu" 4
\&\f(CW\*(C`\-lutil\*(C'\fR
.Sp
Included wit tha standard Cygwin netrelease is tha inetutils package
which includes libutil.a.
.SS "Configure-time Options fo' Perl on Cygwin"
.IX Subsection "Configure-time Options fo' Perl on Cygwin"
Da \fI\s-1INSTALL\s0\fR document raps bout nuff muthafuckin Configure-time options.  Some of
these will work wit Cygwin, others is not yet possible.  Also, some of
these is experimental. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Yo ass can either select a option when Configure
prompts you or you can define (undefine) symbols on tha command line.
.IP "\(bu" 4
\&\f(CW\*(C`\-Uusedl\*(C'\fR
.Sp
Undefinin dis symbol forces Perl ta be compiled statically.
.IP "\(bu" 4
\&\f(CW\*(C`\-Dusemymalloc\*(C'\fR
.Sp
By default Perl do not use tha \f(CW\*(C`malloc()\*(C'\fR included wit tha Perl source,
because dat shiznit was slower n' not entirely thread-safe.  If you wanna force
Perl ta build wit tha oldschool \-Dusemymalloc define all dis bullshit.
.IP "\(bu" 4
\&\f(CW\*(C`\-Uuseperlio\*(C'\fR
.Sp
Undefinin dis symbol disablez tha PerlIO abstraction. I aint talkin' bout chicken n' gravy biatch.  PerlIO is now the
default; it aint recommended ta disable PerlIO.
.IP "\(bu" 4
\&\f(CW\*(C`\-Dusemultiplicity\*(C'\fR
.Sp
Multiplicitizzle is required when embeddin Perl up in a C program n' using
more than one interpreta instance.  This is only required when you build
a not-threaded perl wit \f(CW\*(C`\-Uuseithreads\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`\-Uuse64bitint\*(C'\fR
.Sp
By default Perl uses 64 bit integers.  If you wanna use smalla 32 bit
integers, define dis symbol.
.IP "\(bu" 4
\&\f(CW\*(C`\-Duselongdouble\*(C'\fR
.Sp
\&\fIgcc\fR supports long doublez (12 bytes).  But fuck dat shiznit yo, tha word on tha street is dat nuff muthafuckin additional
long double math functions is necessary ta use dem within Perl
(\fI{atan2, cos, exp, floor, fmod, frexp, isnan, log, modf, pow, sin, sqrt}l,
strtold\fR).
These is \fBnot\fR yet available wit newlib, tha Cygwin libc.
.IP "\(bu" 4
\&\f(CW\*(C`\-Uuseithreads\*(C'\fR
.Sp
Define dis symbol if you want not-threaded fasta perl.
.IP "\(bu" 4
\&\f(CW\*(C`\-Duselargefiles\*(C'\fR
.Sp
Cygwin uses 64\-bit integers fo' internal size n' posizzle calculations,
this is ghon be erectly detected n' defined by Configure.
.IP "\(bu" 4
\&\f(CW\*(C`\-Dmksymlinks\*(C'\fR
.Sp
Use dis ta build perl outside of tha source tree.  Details can be
found up in tha \fI\s-1INSTALL\s0\fR document.  This is tha recommended way to
build perl from sources.
.SS "Suspicious Warnings on Cygwin"
.IX Subsection "Suspicious Warnings on Cygwin"
Yo ass may peep some lyrics durin Configure dat seem suspicious.
.IP "\(bu" 4
Win9x n' \f(CW\*(C`d_eofnblk\*(C'\fR
.Sp
Win9x do not erectly report \f(CW\*(C`EOF\*(C'\fR wit a non-blockin read on a
closed pipe.  Yo ass will peep tha followin lyrics:
.Sp
.Vb 2
\&  But it also returns \-1 ta signal EOF, so be careful!
\&  WARNING: you can\*(Aqt distinguish between EOF n' no data!
\&
\&  *** WHOA THERE!!! ***
\&      Da recommended value fo' $d_eofnblk on dis machine was "define"!
\&      Keep tha recommended value? [y]
.Ve
.Sp
At least fo' consistency wit WinNT, you should keep tha recommended
value.
.IP "\(bu" 4
Compiler/Preprocessor defines
.Sp
Da followin error occurs cuz of tha Cygwin \f(CW\*(C`#define\*(C'\fR of
\&\f(CW\*(C`_LONG_DOUBLE\*(C'\fR:
.Sp
.Vb 2
\&  Guessin which symbols yo' C compila n' preprocessor define...
\&  try.c:<line#>: missin binary operator
.Ve
.Sp
This failure do not seem ta cause any problems.  With olda gcc
versions, \*(L"parse error\*(R" is reported instead of \*(L"missin binary
operator\*(R".
.SH "MAKE ON CYGWIN"
.IX Header "MAKE ON CYGWIN"
Simply run \fImake\fR n' wait:
.PP
.Vb 1
\&  make 2>&1 | tee log.make
.Ve
.SH "TEST ON CYGWIN"
.IX Header "TEST ON CYGWIN"
There is two steps ta hustlin tha test suite:
.PP
.Vb 1
\&  make test 2>&1 | tee log.make\-test
\&
\&  cd t; ./perl harnizz 2>&1 | tee ../log.harness
.Ve
.PP
Da same tests is run both times yo, but mo' shiznit is provided when
runnin as \f(CW\*(C`./perl harness\*(C'\fR.
.PP
Test thangs up in dis biatch vary dependin on yo' host system n' yo' Cygwin
configuration. I aint talkin' bout chicken n' gravy biatch.  If a test can pass up in some Cygwin setup, it be always
attempted n' explainable test failures is documented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  It be possible
for Perl ta pass all tha tests yo, but it is mo' likely dat some tests
will fail fo' one of tha reasons listed below.
.SS "File Permissions on Cygwin"
.IX Subsection "File Permissions on Cygwin"
\&\s-1UNIX\s0 file permissions is based on setz of mode bits for
{read,write,execute} fo' each {user,group,other}.  By default Cygwin
only tracks tha Win32 read-only attribute represented as tha \s-1UNIX\s0 file
user write bit (filez is always readable, filez is executable if they
have a \fI.{com,bat,exe}\fR extension or begin wit \f(CW\*(C`#!\*(C'\fR, directories are
always readable n' executable).  On WinNT wit tha \fIntea\fR \f(CW\*(C`CYGWIN\*(C'\fR
setting, tha additionizzle mode bits is stored as extended file attributes.
On WinNT wit tha default \fIntsec\fR \f(CW\*(C`CYGWIN\*(C'\fR setting, permissions use the
standard WinNT securitizzle descriptors n' access control lists, n' you can put dat on yo' toast. Without one of
these options, these tests will fail (listin not updated yet):
.PP
.Vb 12
\&  Failed Test           List of failed
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  io/fs.t               5, 7, 9\-10
\&  lib/anydbm.t          2
\&  lib/db\-btree.t        20
\&  lib/db\-hash.t         16
\&  lib/db\-recno.t        18
\&  lib/gdbm.t            2
\&  lib/ndbm.t            2
\&  lib/odbm.t            2
\&  lib/sdbm.t            2
\&  op/stat.t             9, 20 (.tmp not a executable extension)
.Ve
.SS "NDBM_File n' ODBM_File do not work on \s-1FAT\s0 filesystems"
.IX Subsection "NDBM_File n' ODBM_File do not work on FAT filesystems"
Do not use NDBM_File or ODBM_File on \s-1FAT\s0 filesystem.  They can be
built on a \s-1FAT\s0 filesystem yo, but nuff tests will fail:
.PP
.Vb 6
\& ../ext/NDBM_File/ndbm.t       13  3328    71   59  83.10%  1\-2 4 16\-71
\& ../ext/ODBM_File/odbm.t      255 65280    ??   ??       %  ??
\& ../lib/AnyDBM_File.t           2   512    12    2  16.67%  1 4
\& ../lib/Memoize/t/errors.t      0   139    11    5  45.45%  7\-11
\& ../lib/Memoize/t/tie_ndbm.t   13  3328     4    4 100.00%  1\-4
\& run/fresh_perl.t                          97    1   1.03%  91
.Ve
.PP
If you intend ta run only on \s-1FAT \s0(or if rockin AnyDBM_File on \s-1FAT\s0),
run Configure wit tha \-Ui_ndbm n' \-Ui_dbm options ta prevent
NDBM_File n' ODBM_File bein built.
.PP
With \s-1NTFS \s0(and no CYGWIN=nontsec), there should be no problems even if
perl was built on \s-1FAT.\s0
.ie n .SS """fork()"" failures up in io_* tests"
.el .SS "\f(CWfork()\fP failures up in io_* tests"
.IX Subsection "fork() failures up in io_* tests"
A \f(CW\*(C`fork()\*(C'\fR failure may result up in tha followin tests failing:
.PP
.Vb 3
\&  ext/IO/lib/IO/t/io_multihomed.t
\&  ext/IO/lib/IO/t/io_sock.t
\&  ext/IO/lib/IO/t/io_unix.t
.Ve
.PP
See comment on fork up in \*(L"Miscellaneous\*(R" below.
.SH "Specific featurez of tha Cygwin port"
.IX Header "Specific featurez of tha Cygwin port"
.SS "Script Portabilitizzle on Cygwin"
.IX Subsection "Script Portabilitizzle on Cygwin"
Cygwin do a outstandin thang of providin UNIX-like semantics on top of
Win32 systems.  But fuck dat shiznit yo, tha word on tha street is dat up in addizzle ta tha shit noted above, there are
some differences dat you should know about.  This be a straight-up brief guide
to portability, mo' shiznit can be found up in tha Cygwin documentation.
.IP "\(bu" 4
Pathnames
.Sp
Cygwin pathnames is separated by forward (\fI/\fR) slashes, Universal
Namin Codes (\fI//UNC\fR) is also supported Since cygwin\-1.7 non-POSIX
pathnames is discouraged. Y'all KNOW dat shit, muthafucka!  Names may contain all printable
characters.
.Sp
File names is case insensitizzle yo, but case preserving.  A pathname that
gotz nuff a funky-ass backslash or drive letta be a Win32 pathname, n' not
subject ta tha translations applied ta \s-1POSIX\s0 steez pathnames yo, but
cygwin will warn you, so betta convert dem ta \s-1POSIX.\s0
.Sp
For conversion our crazy asses have \f(CW\*(C`Cygwin::win_to_posix_path()\*(C'\fR and
\&\f(CW\*(C`Cygwin::posix_to_win_path()\*(C'\fR.
.Sp
Since cygwin\-1.7 pathnames is \s-1UTF\-8\s0 encoded.
.IP "\(bu" 4
Text/Binary
.Sp
Since cygwin\-1.7 textmounts is deprecated n' straight fuckin discouraged.
.Sp
When a gangbangin' file is opened it is up in either text or binary mode.  In text mode
a file is subject ta CR/LF/Ctrl\-Z translations.  With Cygwin, tha default
mode fo' a \f(CW\*(C`open()\*(C'\fR is determined by tha mode of tha mount dat underlies
the file. Right back up in yo muthafuckin ass. See \*(L"Cygwin::is_binmount\*(R"(). Perl serves up a \f(CW\*(C`binmode()\*(C'\fR function
to set binary mode on filez dat otherwise would be treated as text.
\&\f(CW\*(C`sysopen()\*(C'\fR wit tha \f(CW\*(C`O_TEXT\*(C'\fR flag sets text mode on filez dat otherwise
would be treated as binary:
.Sp
.Vb 1
\&    sysopen(FOO, "bar", O_WRONLY|O_CREAT|O_TEXT)
.Ve
.Sp
\&\f(CW\*(C`lseek()\*(C'\fR, \f(CW\*(C`tell()\*(C'\fR n' \f(CW\*(C`sysseek()\*(C'\fR only work wit filez opened up in binary
mode.
.Sp
Da text/binary issue is covered at length up in tha Cygwin documentation.
.IP "\(bu" 4
PerlIO
.Sp
PerlIO overrides tha default Cygwin Text/Binary behaviour. Shiiit, dis aint no joke.  A file will
always be treated as binary, regardless of tha mode of tha mount it lives
on, just like it is up in \s-1UNIX. \s0 So \s-1CR/LF\s0 translation need ta be axed in
either tha \f(CW\*(C`open()\*(C'\fR call like this:
.Sp
.Vb 1
\&  open(FH, ">:crlf", "out.txt");
.Ve
.Sp
which will do conversion from \s-1LF\s0 ta \s-1CR/LF\s0 on tha output, or up in the
environment settings (add dis ta yo' .bashrc):
.Sp
.Vb 1
\&  export PERLIO=crlf
.Ve
.Sp
which will pull up in tha crlf PerlIO layer which do \s-1LF \-\s0> \s-1CRLF\s0 conversion
on every last muthafuckin output generated by perl.
.IP "\(bu" 4
\&\fI.exe\fR
.Sp
Da Cygwin \f(CW\*(C`stat()\*(C'\fR, \f(CW\*(C`lstat()\*(C'\fR n' \f(CW\*(C`readlink()\*(C'\fR functions make tha \fI.exe\fR
extension transparent by lookin fo' \fIfoo.exe\fR when you ask fo' \fIfoo\fR
(unless a \fIfoo\fR also exists).  Cygwin do not require a \fI.exe\fR
extension yo, but \fIgcc\fR addz it automatically when buildin a program.
But fuck dat shiznit yo, tha word on tha street is dat when accessin a executable as a aiiight file (e.g., \fIcp\fR
in a makefile) tha \fI.exe\fR aint transparent.  Da \fIinstall\fR program
included wit Cygwin automatically appendz a \fI.exe\fR when necessary.
.IP "\(bu" 4
Cygwin vs. Windows process ids
.Sp
Cygwin processes have they own pid, which is different from the
underlyin windows pid. Y'all KNOW dat shit, muthafucka!  Most posix compliant Proc functions expect
the cygwin pid yo, but nuff muthafuckin Win32::Process functions expect the
winpid. Y'all KNOW dat shit, muthafucka! E.g. \f(CW$$\fR is tha cygwin pid of \fI/usr/bin/perl\fR, which is not
the winpid. Y'all KNOW dat shit, muthafucka!  Use \f(CW\*(C`Cygwin::winpid_to_pid()\*(C'\fR n' \f(CW\*(C`Cygwin::winpid_to_pid()\*(C'\fR
to translate between em.
.IP "\(bu" 4
Cygwin vs. Windows errors
.Sp
Under Cygwin, $^E is tha same ol' dirty as $!.  When rockin Win32 \s-1API\s0 Functions,
use \f(CW\*(C`Win32::GetLastError()\*(C'\fR ta git tha last Windows error.
.IP "\(bu" 4
rebase errors on fork or system
.Sp
Usin \f(CW\*(C`fork()\*(C'\fR or \f(CW\*(C`system()\*(C'\fR up ta another perl afta loadin multiple dlls
may result on a \s-1DLL\s0 baseaddress conflict. Da internal cygwin error
looks like like tha following:
.Sp
.Vb 2
\&  0 [main] perl 8916 child_info_fork::abort: data segment start: parent
\&  (0xC1A000) != child(0xA6A000)
.Ve
.Sp
or:
.Sp
.Vb 2
\&  183 [main] perl 3588 C:\ecygwin\ebin\eperl.exe: *** fatal error \- unable ta remap C:\ecygwin\ebin\ecygsvn_subr\-1\-0.dll ta same address as parent(0x6FB30000) != 0x6FE60000
\&  46 [main] perl 3488 fork: lil pimp 3588 \- took a dirt nap waitin fo' dll loading, errno11
.Ve
.Sp
See <http://cygwin.com/faq/faq\-nochunks.html#faq.using.fixing\-fork\-failures>
It helps if not too nuff DLLs is loaded up in memory so tha available address space is larger,
e.g. stoppin tha \s-1MS\s0 Internizzle Explainer might help.
.Sp
Use tha perlrebase or rebase utilitizzles ta resolve tha conflictin dll addresses.
Da rebase package is included up in tha Cygwin setup. Use \fIsetup.exe\fR
from <http://www.cygwin.com/setup.exe> ta install dat shit.
.Sp
1. bust a cap up in all perl processes n' run \f(CW\*(C`perlrebase\*(C'\fR or
.Sp
2. bust a cap up in all cygwin processes n' skillz, start dash from cmd.exe n' run \f(CW\*(C`rebaseall\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`chown()\*(C'\fR
.Sp
On WinNT \f(CW\*(C`chown()\*(C'\fR can chizzle a gangbangin' filez user n' crew IDs.  On Win9x \f(CW\*(C`chown()\*(C'\fR
is a no-op, although dis be appropriate since there is no securitizzle model.
.IP "\(bu" 4
Miscellaneous
.Sp
File lockin rockin tha \f(CW\*(C`F_GETLK\*(C'\fR command ta \f(CW\*(C`fcntl()\*(C'\fR be a stub that
returns \f(CW\*(C`ENOSYS\*(C'\fR.
.Sp
Win9x can not \f(CW\*(C`rename()\*(C'\fR a open file (although WinNT can).
.Sp
Da Cygwin \f(CW\*(C`chroot()\*(C'\fR implementation has holez (it can not restrict file
access by natizzle Win32 programs).
.Sp
Inplace editin \f(CW\*(C`perl \-i\*(C'\fR of filez don't work without bustin a funky-ass backup
of tha file bein edited \f(CW\*(C`perl \-i.bak\*(C'\fR cuz of windowish restrictions,
therefore Perl addz tha suffix \f(CW\*(C`.bak\*(C'\fR automatically if you use \f(CW\*(C`perl \-i\*(C'\fR
without specifyin a funky-ass backup extension.
.SS "Prebuilt methods:"
.IX Subsection "Prebuilt methods:"
.ie n .IP """Cwd::cwd""" 4
.el .IP "\f(CWCwd::cwd\fR" 4
.IX Item "Cwd::cwd"
Returns tha current hustlin directory.
.ie n .IP """Cygwin::pid_to_winpid""" 4
.el .IP "\f(CWCygwin::pid_to_winpid\fR" 4
.IX Item "Cygwin::pid_to_winpid"
Translates a cold-ass lil cygwin pid ta tha correspondin Windows pid (which may or
may not be tha same).
.ie n .IP """Cygwin::winpid_to_pid""" 4
.el .IP "\f(CWCygwin::winpid_to_pid\fR" 4
.IX Item "Cygwin::winpid_to_pid"
Translates a Windows pid ta tha correspondin cygwin pid (if any).
.ie n .IP """Cygwin::win_to_posix_path""" 4
.el .IP "\f(CWCygwin::win_to_posix_path\fR" 4
.IX Item "Cygwin::win_to_posix_path"
Translates a Windows path ta tha correspondin cygwin path respecting
the current mount points, n' you can put dat on yo' toast. With a second non-null argument returns an
absolute path. Double-byte charactas aint gonna be translated.
.ie n .IP """Cygwin::posix_to_win_path""" 4
.el .IP "\f(CWCygwin::posix_to_win_path\fR" 4
.IX Item "Cygwin::posix_to_win_path"
Translates a cold-ass lil cygwin path ta tha correspondin cygwin path respecting
the current mount points, n' you can put dat on yo' toast. With a second non-null argument returns an
absolute path. Double-byte charactas aint gonna be translated.
.ie n .IP """Cygwin::mount_table()""" 4
.el .IP "\f(CWCygwin::mount_table()\fR" 4
.IX Item "Cygwin::mount_table()"
Returns a array of [mnt_dir, mnt_fsname, mnt_type, mnt_opts].
.Sp
.Vb 8
\&  perl \-e \*(Aqfor $i (Cygwin::mount_table) {print join(" ",@$i),"\en";}\*(Aq
\&  /bin c:\ecygwin\ebin system binmode,cygexec
\&  /usr/bin c:\ecygwin\ebin system binmode
\&  /usr/lib c:\ecygwin\elib system binmode
\&  / c:\ecygwin system binmode
\&  /cygdrive/c c: system binmode,noumount
\&  /cygdrive/d d: system binmode,noumount
\&  /cygdrive/e e: system binmode,noumount
.Ve
.ie n .IP """Cygwin::mount_flags""" 4
.el .IP "\f(CWCygwin::mount_flags\fR" 4
.IX Item "Cygwin::mount_flags"
Returns tha mount type n' flags fo' a specified mount point.
A comma-separated strang of mntent\->mnt_type (always
\&\*(L"system\*(R" or \*(L"user\*(R"), then tha mntent\->mnt_opts, where
the first be always \*(L"binmode\*(R" or \*(L"textmode\*(R".
.Sp
.Vb 2
\&  system|user,binmode|textmode,exec,cygexec,cygdrive,mixed,
\&  notexec,managed,nosuid,devfs,proc,noumount
.Ve
.Sp
If tha argument is \*(L"/cygdrive\*(R", then just tha volume mount settings,
and tha cygdrive mount prefix is returned.
.Sp
User mounts override system mounts.
.Sp
.Vb 4
\&  $ perl \-e \*(Aqprint Cygwin::mount_flags "/usr/bin"\*(Aq
\&  system,binmode,cygexec
\&  $ perl \-e \*(Aqprint Cygwin::mount_flags "/cygdrive"\*(Aq
\&  binmode,cygdrive,/cygdrive
.Ve
.ie n .IP """Cygwin::is_binmount""" 4
.el .IP "\f(CWCygwin::is_binmount\fR" 4
.IX Item "Cygwin::is_binmount"
Returns legit if tha given cygwin path is binary mounted, false if the
path is mounted up in textmode.
.ie n .IP """Cygwin::sync_winenv""" 4
.el .IP "\f(CWCygwin::sync_winenv\fR" 4
.IX Item "Cygwin::sync_winenv"
Cygwin do not initialize all original gangsta Win32 environment variables.
See tha bottom of dis page <http://cygwin.com/cygwin\-ug\-net/setup\-env.html>
for \*(L"Restricted Win32 environment\*(R".
.Sp
Certain Win32 programs called from cygwin programs might need some environment
variable, like fuckin e.g. \s-1ADODB\s0 needz \f(CW%COMMONPROGRAMFILES\fR%.
Call \fICygwin::sync_winenv()\fR ta copy all Win32 environment variablez ta your
process n' note dat cygwin will warn on every last muthafuckin encounta of non-POSIX paths.
.SH "INSTALL PERL ON CYGWIN"
.IX Header "INSTALL PERL ON CYGWIN"
This will install Perl, includin \fIman\fR pages.
.PP
.Vb 1
\&  make install 2>&1 | tee log.make\-install
.Ve
.PP
\&\s-1NOTE:\s0 If \f(CW\*(C`STDERR\*(C'\fR is repimped up \f(CW\*(C`make install\*(C'\fR will \fBnot\fR prompt
you ta install \fIperl\fR tha fuck into \fI/usr/bin\fR.
.PP
Yo ass may need ta be \fIAdministrator\fR ta run \f(CW\*(C`make install\*(C'\fR.  If you
are not, you must have write access ta tha directories up in question.
.PP
Hype on installin tha Perl documentation up in \s-1HTML\s0 format can be
found up in tha \fI\s-1INSTALL\s0\fR document.
.SH "MANIFEST ON CYGWIN"
.IX Header "MANIFEST ON CYGWIN"
These is tha filez up in tha Perl release dat contain references ta Cygwin.
These straight-up brief notes attempt ta explain tha reason fo' all conditional
code.  Hopefully, keepin dis up ta date will allow tha Cygwin port to
be kept as clean as possible.
.IP "Documentation" 4
.IX Item "Documentation"
.Vb 10
\&  INSTALL README.cygwin README.win32 MANIFEST
\&  pod/perl.pod pod/perlport.pod pod/perlfaq3.pod
\&  pod/perldelta.pod pod/perl5004delta.pod pod/perl56delta.pod
\&  pod/perl561delta.pod pod/perl570delta.pod pod/perl572delta.pod
\&  pod/perl573delta.pod pod/perl58delta.pod pod/perl581delta.pod
\&  pod/perl590delta.pod pod/perlhist.pod pod/perlmodlib.pod
\&  pod/perltoc.pod Porting/Glossary pod/perlgit.pod
\&  Porting/checkAUTHORS.pl
\&  dist/Cwd/Changes ext/Compress\-Raw\-Zlib/Changes
\&  ext/Compress\-Raw\-Zlib/README ext/Compress\-Zlib/Changes
\&  ext/DB_File/Changes ext/Encode/Changes ext/Sys\-Syslog/Changes
\&  ext/Time\-HiRes/Changes ext/Win32API\-File/Changes lib/CGI/Changes
\&  lib/ExtUtils/CBuilder/Changes lib/ExtUtils/Changes lib/ExtUtils/NOTES
\&  lib/ExtUtils/PATCHING lib/ExtUtils/README lib/Module/Build/Changes
\&  lib/Net/Ping/Changes lib/Test/Harness/Changes
\&  lib/Term/ANSIColor/ChangeLog lib/Term/ANSIColor/README README.symbian
\&  symbian/TODO
.Ve
.IP "Build, Configure, Make, Install" 4
.IX Item "Build, Configure, Make, Install"
.Vb 10
\&  cygwin/Makefile.SHs
\&  ext/IPC/SysV/hints/cygwin.pl
\&  ext/NDBM_File/hints/cygwin.pl
\&  ext/ODBM_File/hints/cygwin.pl
\&  hints/cygwin.sh
\&  Configure             \- help findin hints from uname,
\&                          shared libperl required fo' dynamic loading
\&  Makefile.SH Cross/Makefile\-cross\-SH
\&                        \- linklibperl
\&  Porting/patchls       \- cygwin up in port list
\&  installman            \- playa pages wit :: translated ta .
\&  installperl           \- install dll, install ta \*(Aqpods\*(Aq
\&  makedepend.SH         \- uwinfix
\&  regen_lib.pl          \- file permissions
\&
\&  NetWare/Makefile
\&  plan9/mkfile
\&  symbian/sanity.pl symbian/sisify.pl
\&  hints/uwin.sh
\&  vms/descrip_mms.template
\&  win32/Makefile win32/makefile.mk
.Ve
.IP "Tests" 4
.IX Item "Tests"
.Vb 11
\&  t/io/fs.t             \- no file mode checks if not ntsec
\&                          skip rename() check when not check_case:relaxed
\&  t/io/tell.t           \- binmode
\&  t/lib/cygwin.t        \- builtin cygwin function tests
\&  t/op/groups.t         \- basegroup has ID = 0
\&  t/op/magic.t          \- $^X/symlink WORKAROUND, s/.exe//
\&  t/op/stat.t           \- no /dev, skip Win32 ftCreationTime quirk
\&                          (cache manager sometimes preserves ctime of file
\&                          previously pimped n' deleted), no \-u (setuid)
\&  t/op/taint.t          \- can\*(Aqt use empty path under Cygwin Perl
\&  t/op/time.t           \- no tzset()
.Ve
.IP "Compiled Perl Source" 4
.IX Item "Compiled Perl Source"
.Vb 12
\&  EXTERN.h              \- _\|_declspec(dllimport)
\&  XSUB.h                \- _\|_declspec(dllexport)
\&  cygwin/cygwin.c       \- os_extras (getcwd, spawn, n' nuff muthafuckin Cygwin:: functions)
\&  perl.c                \- os_extras, \-i.bak
\&  perl.h                \- binmode
\&  doio.c                \- win9x can not rename a gangbangin' file when it is open
\&  pp_sys.c              \- do not define h_errno, init _pwent_struct.pw_comment
\&  util.c                \- use setenv
\&  util.h                \- PERL_FILE_IS_ABSOLUTE macro
\&  pp.c                  \- Comment bout Posix vs IEEE math under Cygwin
\&  perlio.c              \- CR/LF mode
\&  perliol.c             \- Comment bout EXTCONST under Cygwin
.Ve
.IP "Compiled Module Source" 4
.IX Item "Compiled Module Source"
.Vb 10
\&  ext/Compress\-Raw\-Zlib/Makefile.PL
\&                        \- Can\*(Aqt install via CPAN shell under Cygwin
\&  ext/Compress\-Raw\-Zlib/zlib\-src/zutil.h
\&                        \- Cygwin is Unix\-like n' has vsnprintf
\&  ext/Errno/Errno_pm.PL \- Special handlin fo' Win32 Perl under Cygwin
\&  ext/POSIX/POSIX.xs    \- tzname defined externally
\&  ext/SDBM_File/sdbm/pair.c
\&                        \- EXTCONST need ta be redefined from EXTERN.h
\&  ext/SDBM_File/sdbm/sdbm.c
\&                        \- binary open
\&  ext/Sys/Syslog/Syslog.xs
\&                        \- Cygwin has syslog.h
\&  ext/Sys/Syslog/win32/compile.pl
\&                        \- Convert paths ta Windows paths
\&  ext/Time\-HiRes/HiRes.xs
\&                        \- Various timers not available
\&  ext/Time\-HiRes/Makefile.PL
\&                        \- Find w32api/windows.h
\&  ext/Win32/Makefile.PL \- Use various libraries under Cygwin
\&  ext/Win32/Win32.xs    \- Lil Pimp dir n' lil pimp env under Cygwin
\&  ext/Win32API\-File/File.xs
\&                        \- _open_osfhandle not implemented under Cygwin
\&  ext/Win32CORE/Win32CORE.c
\&                        \- _\|_declspec(dllexport)
.Ve
.IP "Perl Modules/Scripts" 4
.IX Item "Perl Modules/Scripts"
.Vb 10
\&  ext/B/t/OptreeCheck.pm \- Comment bout stderr/stdout order under Cygwin
\&  ext/Digest\-SHA/bin/shasum
\&                        \- Use binary mode under Cygwin
\&  ext/Sys/Syslog/win32/Win32.pm
\&                        \- Convert paths ta Windows paths
\&  ext/Time\-HiRes/HiRes.pm
\&                        \- Comment bout various timers not available
\&  ext/Win32API\-File/File.pm
\&                        \- _open_osfhandle not implemented under Cygwin
\&  ext/Win32CORE/Win32CORE.pm
\&                        \- History of Win32CORE under Cygwin
\&  lib/CGI.pm            \- binmode n' path separator
\&  lib/CPANPLUS/Dist/MM.pm \- Commented up code dat fails under Win32/Cygwin
\&  lib/CPANPLUS/Internals/Constants/Report.pm
\&                        \- OS classifications
\&  lib/CPANPLUS/Internals/Constants.pm
\&                        \- Constants fo' Cygwin
\&  lib/CPANPLUS/Internals/Report.pm
\&                        \- Example of Cygwin report
\&  lib/CPANPLUS/Module.pm
\&                        \- Abort if hustlin on oldschool Cygwin version
\&  lib/Cwd.pm            \- hook ta internal Cwd::cwd
\&  lib/ExtUtils/CBuilder/Platform/cygwin.pm
\&                        \- use gcc fo' ld, n' link ta libperl.dll.a
\&  lib/ExtUtils/CBuilder.pm
\&                        \- Cygwin is Unix\-like
\&  lib/ExtUtils/Install.pm \- Install n' rename thangs under Cygwin
\&  lib/ExtUtils/MM.pm    \- OS classifications
\&  lib/ExtUtils/MM_Any.pm \- Example fo' Cygwin
\&  lib/ExtUtils/MakeMaker.pm
\&                        \- require MM_Cygwin.pm
\&  lib/ExtUtils/MM_Cygwin.pm
\&                        \- canonpath, cflags, manifypods, perl_archive
\&  lib/File/Fetch.pm     \- Comment bout quotes rockin a Cygwin example
\&  lib/File/Find.pm      \- on remote drives stat() always sets st_nlink ta 1
\&  lib/File/Spec/Cygwin.pm \- case_tolerant
\&  lib/File/Spec/Unix.pm \- preserve //unc
\&  lib/File/Spec/Win32.pm \- References a message on cygwin.com
\&  lib/File/Spec.pm      \- Pulls up in lib/File/Spec/Cygwin.pm
\&  lib/File/Temp.pm      \- no directory sticky bit
\&  lib/Module/Build/Compat.pm \- Comment references \*(Aqmake\*(Aq under Cygwin
\&  lib/Module/Build/Platform/cygwin.pm
\&                        \- Use \*(Aq.\*(Aq fo' playa page separator
\&  lib/Module/Build.pm   \- Cygwin is Unix\-like
\&  lib/Module/CoreList.pm \- List of all module filez n' versions
\&  lib/Net/Domain.pm     \- No domainname command under Cygwin
\&  lib/Net/Netrc.pm      \- Bypass rockin stat() under Cygwin
\&  lib/Net/Ping.pm       \- ECONREFUSED is EAGAIN under Cygwin
\&  lib/Pod/Find.pm       \- Set \*(Aqpods\*(Aq dir
\&  lib/Pod/Perldoc/ToMan.pm \- \*(Aq\-c\*(Aq switch fo' pod2man
\&  lib/Pod/Perldoc.pm    \- Use \*(Aqless\*(Aq pager, n' use .exe extension
\&  lib/Term/ANSIColor.pm \- Cygwin terminal info
\&  lib/perl5db.pl        \- use stdin not /dev/tty
\&  utils/perlbug.PL      \- Add CYGWIN environment variable ta report
.Ve
.IP "Perl Module Tests" 4
.IX Item "Perl Module Tests"
.Vb 10
\&  dist/Cwd/t/cwd.t
\&  ext/Compress\-Zlib/t/14gzopen.t
\&  ext/DB_File/t/db\-btree.t
\&  ext/DB_File/t/db\-hash.t
\&  ext/DB_File/t/db\-recno.t
\&  ext/DynaLoader/t/DynaLoader.t
\&  ext/File\-Glob/t/basic.t
\&  ext/GDBM_File/t/gdbm.t
\&  ext/POSIX/t/sysconf.t
\&  ext/POSIX/t/time.t
\&  ext/SDBM_File/t/sdbm.t
\&  ext/Sys/Syslog/t/syslog.t
\&  ext/Time\-HiRes/t/HiRes.t
\&  ext/Win32/t/Unicode.t
\&  ext/Win32API\-File/t/file.t
\&  ext/Win32CORE/t/win32core.t
\&  lib/AnyDBM_File.t
\&  lib/Archive/Extract/t/01_Archive\-Extract.t
\&  lib/Archive/Tar/t/02_methods.t
\&  lib/CPANPLUS/t/05_CPANPLUS\-Internals\-Fetch.t
\&  lib/CPANPLUS/t/20_CPANPLUS\-Dist\-MM.t
\&  lib/ExtUtils/t/Embed.t
\&  lib/ExtUtils/t/eu_command.t
\&  lib/ExtUtils/t/MM_Cygwin.t
\&  lib/ExtUtils/t/MM_Unix.t
\&  lib/File/Compare.t
\&  lib/File/Copy.t
\&  lib/File/Find/t/find.t
\&  lib/File/Path.t
\&  lib/File/Spec/t/crossplatform.t
\&  lib/File/Spec/t/Spec.t
\&  lib/Module/Build/t/destinations.t
\&  lib/Net/hostent.t
\&  lib/Net/Ping/t/110_icmp_inst.t
\&  lib/Net/Ping/t/500_ping_icmp.t
\&  lib/Net/t/netrc.t
\&  lib/Pod/Simple/t/perlcyg.pod
\&  lib/Pod/Simple/t/perlcygo.txt
\&  lib/Pod/Simple/t/perlfaq.pod
\&  lib/Pod/Simple/t/perlfaqo.txt
\&  lib/User/grent.t
\&  lib/User/pwent.t
.Ve
.SH "BUGS ON CYGWIN"
.IX Header "BUGS ON CYGWIN"
Support fo' swappin real n' effectizzle user n' crew IDs is incomplete.
On WinNT Cygwin serves up \f(CW\*(C`setuid()\*(C'\fR, \f(CW\*(C`seteuid()\*(C'\fR, \f(CW\*(C`setgid()\*(C'\fR n' \f(CW\*(C`setegid()\*(C'\fR.
But fuck dat shiznit yo, tha word on tha street is dat additionizzle Cygwin calls fo' manipulatin WinNT access tokens
and securitizzle contexts is required.
.SH "AUTHORS"
.IX Header "AUTHORS"
Charlez Wilson <cwilson@ece.gatech.edu>,
Eric Fifer <egf7@columbia.edu>,
alexander smishlajev <als@turnhere.com>,
Steven Morlock <newspost@morlock.net>,
Sebastien Barre <Sebastien.Barre@utc.fr>,
Teun Burgers <burgers@ecn.nl>,
Gerrit P yo. Haase <gp@familiehaase.de>,
Reini Urban <rurban@cpan.org>,
Jan Dubois <jand@activestate.com>,
Jeremy D yo. Hedden <jdhedden@cpan.org>.
.SH "HISTORY"
.IX Header "HISTORY"
Last updated: 2012\-02\-08
