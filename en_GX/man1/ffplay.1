.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FFPLAY 1"
.TH FFPLAY 1 "2015-01-03" " " " "
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
ffplay \- FFplay media playa
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
ffplay [\fIoptions\fR] [\fIinput_file\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
FFplay be a straight-up simple n' portable media playa rockin tha FFmpeg
libraries n' tha \s-1SDL\s0 library. Well shiiiit, it is mostly used as a testbed fo' the
various FFmpeg APIs.
.SH "OPTIONS"
.IX Header "OPTIONS"
All tha numerical options, if not specified otherwise, accept a string
representin a number as input, which may be followed by one of tha \s-1SI\s0
unit prefixes, fo' example: 'K', 'M', or 'G'.
.PP
If 'i' be appended ta tha \s-1SI\s0 unit prefix, tha complete prefix will be
interpreted as a unit prefix fo' binary multiplies, which is based on
powerz of 1024 instead of powerz of 1000 fo' realz. Appendin 'B' ta tha \s-1SI\s0 unit
prefix multiplies tha value by 8. This allows using, fo' example:
\&'\s-1KB\s0', 'MiB', 'G' n' 'B' as number suffixes.
.PP
Options which do not take arguments is boolean options, n' set the
correspondin value ta true. They can be set ta false by prefixing
the option name wit \*(L"no\*(R". For example rockin \*(L"\-nofoo\*(R"
will set tha boolean option wit name \*(L"foo\*(R" ta false.
.SS "Stream specifiers"
.IX Subsection "Stream specifiers"
Some options is applied per-stream, e.g. bitrate or codec. Right back up in yo muthafuckin ass. Stream specifiers
are used ta precisely specify which stream(s) a given option belongs to.
.PP
A stream specifier be a strang generally appended ta tha option name and
separated from it by a cold-ass lil colon. I aint talkin' bout chicken n' gravy biatch. E.g. \f(CW\*(C`\-codec:a:1 ac3\*(C'\fR gotz nuff the
\&\f(CW\*(C`a:1\*(C'\fR stream specifier, which matches tha second audio stream. Therefore, it
would select tha ac3 codec fo' tha second audio stream.
.PP
A stream specifier can match nuff muthafuckin streams, so dat tha option be applied ta all
of em. E.g. tha stream specifier up in \f(CW\*(C`\-b:a 128k\*(C'\fR matches all audio
streams.
.PP
An empty stream specifier matches all streams. For example, \f(CW\*(C`\-codec copy\*(C'\fR
or \f(CW\*(C`\-codec: copy\*(C'\fR would copy all tha streams without reencoding.
.PP
Possible formz of stream specifiers are:
.IP "\fIstream_index\fR" 4
.IX Item "stream_index"
Matches tha stream wit dis index. E.g. \f(CW\*(C`\-threads:1 4\*(C'\fR would set the
thread count fo' tha second stream ta 4.
.IP "\fIstream_type\fR\fB[:\fR\fIstream_index\fR\fB]\fR" 4
.IX Item "stream_type[:stream_index]"
\&\fIstream_type\fR is one of following: 'v' fo' vizzle, 'a' fo' audio, 's' fo' subtitle,
\&'d' fo' data, n' 't' fo' attachments, n' you can put dat on yo' toast. If \fIstream_index\fR is given, then it matches
stream number \fIstream_index\fR of dis type. Otherwise, it matches all
streamz of dis type.
.IP "\fBp:\fR\fIprogram_id\fR\fB[:\fR\fIstream_index\fR\fB]\fR" 4
.IX Item "p:program_id[:stream_index]"
If \fIstream_index\fR is given, then it matches tha stream wit number \fIstream_index\fR
in tha program wit tha id \fIprogram_id\fR. Otherwise, it matches all streams up in the
program.
.IP "\fB#\fR\fIstream_id\fR" 4
.IX Item "#stream_id"
Matches tha stream by a gangbangin' format-specific \s-1ID.\s0
.SS "Generic options"
.IX Subsection "Generic options"
These options is shared amongst tha ff* tools.
.IP "\fB\-L\fR" 4
.IX Item "-L"
Show license.
.IP "\fB\-h, \-?, \-help, \-\-help [\fR\fIarg\fR\fB]\fR" 4
.IX Item "-h, -?, -help, --help [arg]"
Show help fo' realz. An optionizzle parameta may be specified ta print help on some specific
item. If no argument is specified, only basic (non advanced) tool
options is shown.
.Sp
Possible jointz of \fIarg\fR are:
.RS 4
.IP "\fBlong\fR" 4
.IX Item "long"
Print advanced tool options up in addizzle ta tha basic tool options.
.IP "\fBfull\fR" 4
.IX Item "full"
Print complete list of options, includin shared n' private options
for encoders, decoders, demuxers, muxers, filters, etc.
.IP "\fBdecoder=\fR\fIdecoder_name\fR" 4
.IX Item "decoder=decoder_name"
Print detailed shiznit bout tha decoder named \fIdecoder_name\fR. Use the
\&\fB\-decoders\fR option ta git a list of all decoders.
.IP "\fBencoder=\fR\fIencoder_name\fR" 4
.IX Item "encoder=encoder_name"
Print detailed shiznit bout tha encoder named \fIencoder_name\fR. Use the
\&\fB\-encoders\fR option ta git a list of all encoders.
.IP "\fBdemuxer=\fR\fIdemuxer_name\fR" 4
.IX Item "demuxer=demuxer_name"
Print detailed shiznit bout tha demuxer named \fIdemuxer_name\fR. Use the
\&\fB\-formats\fR option ta git a list of all demuxers n' muxers.
.IP "\fBmuxer=\fR\fImuxer_name\fR" 4
.IX Item "muxer=muxer_name"
Print detailed shiznit bout tha muxer named \fImuxer_name\fR. Use the
\&\fB\-formats\fR option ta git a list of all muxers n' demuxers.
.IP "\fBfilter=\fR\fIfilter_name\fR" 4
.IX Item "filter=filter_name"
Print detailed shiznit bout tha filta name \fIfilter_name\fR. Use the
\&\fB\-filters\fR option ta git a list of all filters.
.RE
.RS 4
.RE
.IP "\fB\-version\fR" 4
.IX Item "-version"
Show version.
.IP "\fB\-formats\fR" 4
.IX Item "-formats"
Show available formats.
.IP "\fB\-codecs\fR" 4
.IX Item "-codecs"
Show all codecs known ta libavcodec.
.Sp
Note dat tha term 'codec' is used all up in dis documentation as a gangbangin' finger-lickin' dirty-ass shortcut
for what tha fuck is mo' erectly called a media bitstream format.
.IP "\fB\-decoders\fR" 4
.IX Item "-decoders"
Show available decoders.
.IP "\fB\-encoders\fR" 4
.IX Item "-encoders"
Show all available encoders.
.IP "\fB\-bsfs\fR" 4
.IX Item "-bsfs"
Show available bitstream filters.
.IP "\fB\-protocols\fR" 4
.IX Item "-protocols"
Show available protocols.
.IP "\fB\-filters\fR" 4
.IX Item "-filters"
Show available libavfilta filters.
.IP "\fB\-pix_fmts\fR" 4
.IX Item "-pix_fmts"
Show available pixel formats.
.IP "\fB\-sample_fmts\fR" 4
.IX Item "-sample_fmts"
Show available sample formats.
.IP "\fB\-layouts\fR" 4
.IX Item "-layouts"
Show channel names n' standard channel layouts.
.IP "\fB\-colors\fR" 4
.IX Item "-colors"
Show recognized color names.
.IP "\fB\-loglevel [repeat+]\fR\fIloglevel\fR \fB| \-v [repeat+]\fR\fIloglevel\fR" 4
.IX Item "-loglevel [repeat+]loglevel | -v [repeat+]loglevel"
Set tha loggin level used by tha library.
Addin \*(L"repeat+\*(R" indicates dat repeated log output should not be compressed
to tha straight-up original gangsta line n' tha \*(L"Last message repeated n times\*(R" line will be
omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. \*(L"repeat\*(R" can also be used ridin' solo.
If \*(L"repeat\*(R" is used alone, n' wit no prior loglevel set, tha default
loglevel is ghon be used. Y'all KNOW dat shit, muthafucka! If multiple loglevel parametas is given, using
\&'repeat' aint gonna chizzle tha loglevel.
\&\fIloglevel\fR be a number or a strang containin one of tha followin joints:
.RS 4
.IP "\fBquiet\fR" 4
.IX Item "quiet"
Show not a god damn thang at all; be silent.
.IP "\fBpanic\fR" 4
.IX Item "panic"
Only show fatal errors which could lead tha process ta crash, such as
and assert failure. This aint currently used fo' anything.
.IP "\fBfatal\fR" 4
.IX Item "fatal"
Only show fatal errors. These is errors afta which tha process straight-up
cannot continue after.
.IP "\fBerror\fR" 4
.IX Item "error"
Show all errors, includin ones which can be recovered from.
.IP "\fBwarning\fR" 4
.IX Item "warning"
Show all warnings n' errors fo' realz. Any message related ta possibly
incorrect or unexpected events is ghon be shown.
.IP "\fBinfo\fR" 4
.IX Item "info"
Show informatizzle lyrics durin processing. This is up in addizzle to
warnings n' errors. This is tha default value.
.IP "\fBverbose\fR" 4
.IX Item "verbose"
Same as \f(CW\*(C`info\*(C'\fR, except mo' verbose.
.IP "\fBdebug\fR" 4
.IX Item "debug"
Show every last muthafuckin thang, includin debuggin shiznit.
.RE
.RS 4
.Sp
By default tha program logs ta stderr, if colorin is supported by the
terminal, flavas is used ta mark errors n' warnings. Log coloring
can be disabled settin tha environment variable
\&\fB\s-1AV_LOG_FORCE_NOCOLOR\s0\fR or \fB\s-1NO_COLOR\s0\fR, or can be forced setting
the environment variable \fB\s-1AV_LOG_FORCE_COLOR\s0\fR.
Da use of tha environment variable \fB\s-1NO_COLOR\s0\fR is deprecated and
will be dropped up in a gangbangin' followin FFmpeg version.
.RE
.IP "\fB\-report\fR" 4
.IX Item "-report"
Dump full command line n' console output ta a gangbangin' file named
\&\f(CW\*(C`\f(CIprogram\f(CW\-\f(CIYYYYMMDD\f(CW\-\f(CIHHMMSS\f(CW.log\*(C'\fR up in tha current
directory.
This file can be useful fo' bug reports.
It also implies \f(CW\*(C`\-loglevel verbose\*(C'\fR.
.Sp
Settin tha environment variable \f(CW\*(C`FFREPORT\*(C'\fR ta any value has the
same effect. If tha value be a ':'\-separated key=value sequence, these
options will affect tha report; options joints must be escaped if they
contain special charactas or tha options delimita ':' (see the
``Quotin n' escaping'' section up in tha ffmpeg-utils manual). The
followin option is recognized:
.RS 4
.IP "\fBfile\fR" 4
.IX Item "file"
set tha file name ta use fo' tha report; \f(CW%p\fR is expanded ta tha name
of tha program, \f(CW%t\fR is expanded ta a timestamp, \f(CW\*(C`%%\*(C'\fR is expanded
to a plain \f(CW\*(C`%\*(C'\fR
.RE
.RS 4
.Sp
Errors up in parsin tha environment variable is not fatal, n' will not
appear up in tha report.
.RE
.IP "\fB\-cpuflags flags (\fR\fIglobal\fR\fB)\fR" 4
.IX Item "-cpuflags flags (global)"
Allows settin n' clearin cpu flags. This option is intended
for testing. Do not use it unless you know what tha fuck you bustin.
.Sp
.Vb 3
\&        ffmpeg \-cpuflags \-sse+mmx ...
\&        ffmpeg \-cpuflags mmx ...
\&        ffmpeg \-cpuflags 0 ...
.Ve
.Sp
Possible flags fo' dis option are:
.RS 4
.IP "\fBx86\fR" 4
.IX Item "x86"
.RS 4
.PD 0
.IP "\fBmmx\fR" 4
.IX Item "mmx"
.IP "\fBmmxext\fR" 4
.IX Item "mmxext"
.IP "\fBsse\fR" 4
.IX Item "sse"
.IP "\fBsse2\fR" 4
.IX Item "sse2"
.IP "\fBsse2slow\fR" 4
.IX Item "sse2slow"
.IP "\fBsse3\fR" 4
.IX Item "sse3"
.IP "\fBsse3slow\fR" 4
.IX Item "sse3slow"
.IP "\fBssse3\fR" 4
.IX Item "ssse3"
.IP "\fBatom\fR" 4
.IX Item "atom"
.IP "\fBsse4.1\fR" 4
.IX Item "sse4.1"
.IP "\fBsse4.2\fR" 4
.IX Item "sse4.2"
.IP "\fBavx\fR" 4
.IX Item "avx"
.IP "\fBxop\fR" 4
.IX Item "xop"
.IP "\fBfma4\fR" 4
.IX Item "fma4"
.IP "\fB3dnow\fR" 4
.IX Item "3dnow"
.IP "\fB3dnowext\fR" 4
.IX Item "3dnowext"
.IP "\fBcmov\fR" 4
.IX Item "cmov"
.RE
.RS 4
.RE
.IP "\fB\s-1ARM\s0\fR" 4
.IX Item "ARM"
.RS 4
.IP "\fBarmv5te\fR" 4
.IX Item "armv5te"
.IP "\fBarmv6\fR" 4
.IX Item "armv6"
.IP "\fBarmv6t2\fR" 4
.IX Item "armv6t2"
.IP "\fBvfp\fR" 4
.IX Item "vfp"
.IP "\fBvfpv3\fR" 4
.IX Item "vfpv3"
.IP "\fBneon\fR" 4
.IX Item "neon"
.RE
.RS 4
.RE
.IP "\fBPowerPC\fR" 4
.IX Item "PowerPC"
.RS 4
.IP "\fBaltivec\fR" 4
.IX Item "altivec"
.RE
.RS 4
.RE
.IP "\fBSpecific Processors\fR" 4
.IX Item "Specific Processors"
.RS 4
.IP "\fBpentium2\fR" 4
.IX Item "pentium2"
.IP "\fBpentium3\fR" 4
.IX Item "pentium3"
.IP "\fBpentium4\fR" 4
.IX Item "pentium4"
.IP "\fBk6\fR" 4
.IX Item "k6"
.IP "\fBk62\fR" 4
.IX Item "k62"
.IP "\fBathlon\fR" 4
.IX Item "athlon"
.IP "\fBathlonxp\fR" 4
.IX Item "athlonxp"
.IP "\fBk8\fR" 4
.IX Item "k8"
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.IP "\fB\-opencl_options options (\fR\fIglobal\fR\fB)\fR" 4
.IX Item "-opencl_options options (global)"
.PD
Set OpenCL environment options. This option is only available when
FFmpeg has been compiled wit \f(CW\*(C`\-\-enable\-opencl\*(C'\fR.
.Sp
\&\fIoptions\fR must be a list of \fIkey\fR=\fIvalue\fR option pairs
separated by ':'. Right back up in yo muthafuckin ass. See tha ``OpenCL Options'' section up in the
ffmpeg-utils manual fo' tha list of supported options.
.SS "AVOptions"
.IX Subsection "AVOptions"
These options is provided directly by tha libavformat, libavdevice and
libavcodec libraries. Put ya muthafuckin choppers up if ya feel dis! To peep tha list of available AVOptions, use the
\&\fB\-help\fR option. I aint talkin' bout chicken n' gravy biatch. They is separated tha fuck into two categories:
.IP "\fBgeneric\fR" 4
.IX Item "generic"
These options can be set fo' any container, codec or device. Generic options
are listed under AVFormatContext options fo' containers/devices n' under
AVCodecContext options fo' codecs.
.IP "\fBprivate\fR" 4
.IX Item "private"
These options is specific ta tha given container, thang or codec. Private
options is listed under they correspondin containers/devices/codecs.
.PP
For example ta write a ID3v2.3 header instead of a thugged-out default ID3v2.4 to
an \s-1MP3\s0 file, use tha \fBid3v2_version\fR private option of tha \s-1MP3\s0
muxer:
.PP
.Vb 1
\&        ffmpeg \-i input.flac \-id3v2_version 3 out.mp3
.Ve
.PP
All codec AVOptions is per-stream, n' thus a stream specifier
should be attached ta em.
.PP
Note: tha \fB\-nooption\fR syntax cannot be used fo' boolean
AVOptions, use \fB\-option 0\fR/\fB\-option 1\fR.
.PP
Note: tha oldschool undocumented way of specifyin per-stream AVOptions by
prependin v/a/s ta tha options name is now obsolete n' will be
removed soon.
.SS "Main options"
.IX Subsection "Main options"
.IP "\fB\-x\fR \fIwidth\fR" 4
.IX Item "-x width"
Force displayed width.
.IP "\fB\-y\fR \fIheight\fR" 4
.IX Item "-y height"
Force displayed height.
.IP "\fB\-s\fR \fIsize\fR" 4
.IX Item "-s size"
Set frame size (WxH or abbreviation), needed fo' vizzlez which do
not contain a header wit tha frame size like raw \s-1YUV. \s0 This option
has been deprecated up in favor of private options, try \-video_size.
.IP "\fB\-an\fR" 4
.IX Item "-an"
Disable audio.
.IP "\fB\-vn\fR" 4
.IX Item "-vn"
Disable vizzle.
.IP "\fB\-ss\fR \fIpos\fR" 4
.IX Item "-ss pos"
Seek ta a given posizzle up in seconds.
.IP "\fB\-t\fR \fIduration\fR" 4
.IX Item "-t duration"
play <duration> secondz of audio/video
.IP "\fB\-bytes\fR" 4
.IX Item "-bytes"
Seek by bytes.
.IP "\fB\-nodisp\fR" 4
.IX Item "-nodisp"
Disable graphical display.
.IP "\fB\-f\fR \fIfmt\fR" 4
.IX Item "-f fmt"
Force format.
.IP "\fB\-window_title\fR \fItitle\fR" 4
.IX Item "-window_title title"
Set window title (default is tha input filename).
.IP "\fB\-loop\fR \fInumber\fR" 4
.IX Item "-loop number"
Loops porno playback <number> times. 0 means alllll muthafuckin day.
.IP "\fB\-showmode\fR \fImode\fR" 4
.IX Item "-showmode mode"
Set tha show mode ta use.
Available joints fo' \fImode\fR are:
.RS 4
.IP "\fB0, vizzle\fR" 4
.IX Item "0, vizzle"
show vizzle
.IP "\fB1, waves\fR" 4
.IX Item "1, waves"
show audio waves
.IP "\fB2, rdft\fR" 4
.IX Item "2, rdft"
show audio frequency crew rockin \s-1RDFT \s0((Inverse) Real Discrete Fourier Transform)
.RE
.RS 4
.Sp
Default value is \*(L"video\*(R", if vizzle aint present or cannot be played
\&\*(L"rdft\*(R" be automatically selected.
.Sp
Yo ass can interactively cycle all up in tha available show modes by
pressin tha key \fBw\fR.
.RE
.IP "\fB\-vf\fR \fIfiltergraph\fR" 4
.IX Item "-vf filtergraph"
Smoke tha filtergraph specified by \fIfiltergraph\fR n' use it to
filta tha vizzle stream.
.Sp
\&\fIfiltergraph\fR be a thugged-out description of tha filtergraph ta apply to
the stream, n' must gotz a single vizzle input n' a single vizzle
output. In tha filtergraph, tha input be associated ta tha label
\&\f(CW\*(C`in\*(C'\fR, n' tha output ta tha label \f(CW\*(C`out\*(C'\fR. Right back up in yo muthafuckin ass. See the
ffmpeg-filtas manual fo' mo' shiznit bout tha filtergraph
syntax.
.IP "\fB\-af\fR \fIfiltergraph\fR" 4
.IX Item "-af filtergraph"
\&\fIfiltergraph\fR be a thugged-out description of tha filtergraph ta apply to
the input audio.
Use tha option \*(L"\-filters\*(R" ta show all tha available filtas (including
sources n' sinks).
.IP "\fB\-i\fR \fIinput_file\fR" 4
.IX Item "-i input_file"
Read \fIinput_file\fR.
.SS "Advanced options"
.IX Subsection "Advanced options"
.IP "\fB\-pix_fmt\fR \fIformat\fR" 4
.IX Item "-pix_fmt format"
Set pixel format.
This option has been deprecated up in favor of private options, try \-pixel_format.
.IP "\fB\-stats\fR" 4
.IX Item "-stats"
Print nuff muthafuckin playback statistics, up in particular show tha stream
duration, tha codec parameters, tha current posizzle up in tha stream and
the audio/video synchronisation drift. Well shiiiit, it is on by default, to
explicitly disable it you need ta specify \f(CW\*(C`\-nostats\*(C'\fR.
.IP "\fB\-bug\fR" 4
.IX Item "-bug"
Work round bugs.
.IP "\fB\-fast\fR" 4
.IX Item "-fast"
Non-spec-compliant optimizations.
.IP "\fB\-genpts\fR" 4
.IX Item "-genpts"
Generate pts.
.IP "\fB\-rtp_tcp\fR" 4
.IX Item "-rtp_tcp"
Force \s-1RTP/TCP\s0 protocol usage instead of \s-1RTP/UDP.\s0 It be only meaningful
if yo ass is streamin wit tha \s-1RTSP\s0 protocol.
.IP "\fB\-sync\fR \fItype\fR" 4
.IX Item "-sync type"
Set tha masta clock ta audio (\f(CW\*(C`type=audio\*(C'\fR), vizzle
(\f(CW\*(C`type=video\*(C'\fR) or external (\f(CW\*(C`type=ext\*(C'\fR). Default be audio. The
masta clock is used ta control audio-video synchronization. I aint talkin' bout chicken n' gravy biatch. Most media
players use audio as masta clock yo, but up in some cases (streamin or high
qualitizzle broadcast) it is necessary ta chizzle dis shit. This option is mainly
used fo' debuggin purposes.
.IP "\fB\-threads\fR \fIcount\fR" 4
.IX Item "-threadz count"
Set tha thread count.
.IP "\fB\-ast\fR \fIaudio_stream_number\fR" 4
.IX Item "-ast audio_stream_number"
Select tha desired audio stream number, countin from 0. Da number
refers ta tha list of all tha input audio streams. If it is pimped outer
than tha number of audio streams minus one, then tha last one is
selected, if it is wack tha audio playback is disabled.
.IP "\fB\-vst\fR \fIvideo_stream_number\fR" 4
.IX Item "-vst vizzle_stream_number"
Select tha desired vizzle stream number, countin from 0. Da number
refers ta tha list of all tha input vizzle streams. If it is pimped outer
than tha number of vizzle streams minus one, then tha last one is
selected, if it is wack tha vizzle playback is disabled.
.IP "\fB\-sst\fR \fIsubtitle_stream_number\fR" 4
.IX Item "-sst subtitle_stream_number"
Select tha desired subtitle stream number, countin from 0. Da number
refers ta tha list of all tha input subtitle streams. If it is pimped outer
than tha number of subtitle streams minus one, then tha last one is
selected, if it is wack tha subtitle renderin is disabled.
.IP "\fB\-autoexit\fR" 4
.IX Item "-autoexit"
Exit when vizzle is done playing.
.IP "\fB\-exitonkeydown\fR" 4
.IX Item "-exitonkeydown"
Exit if any key is pressed.
.IP "\fB\-exitonmousedown\fR" 4
.IX Item "-exitonmousedown"
Exit if any mouse button is pressed.
.IP "\fB\-codec:\fR\fImedia_specifier\fR\fB \fR\fIcodec_name\fR" 4
.IX Item "-codec:media_specifier codec_name"
Force a specific decoder implementation fo' tha stream identified by
\&\fImedia_specifier\fR, which can assume tha joints \f(CW\*(C`a\*(C'\fR (audio),
\&\f(CW\*(C`v\*(C'\fR (video), n' \f(CW\*(C`s\*(C'\fR subtitle.
.IP "\fB\-acodec\fR \fIcodec_name\fR" 4
.IX Item "-acodec codec_name"
Force a specific audio decoder.
.IP "\fB\-vcodec\fR \fIcodec_name\fR" 4
.IX Item "-vcodec codec_name"
Force a specific vizzle decoder.
.IP "\fB\-scodec\fR \fIcodec_name\fR" 4
.IX Item "-scodec codec_name"
Force a specific subtitle decoder.
.SS "While playing"
.IX Subsection "While playing"
.IP "\fBq, \s-1ESC\s0\fR" 4
.IX Item "q, ESC"
Quit.
.IP "\fBf\fR" 4
.IX Item "f"
Toggle full screen.
.IP "\fBp, \s-1SPC\s0\fR" 4
.IX Item "p, SPC"
Pause.
.IP "\fBa\fR" 4
.IX Item "a"
Cycle audio channel up in tha curret program.
.IP "\fBv\fR" 4
.IX Item "v"
Cycle vizzle channel.
.IP "\fBt\fR" 4
.IX Item "t"
Cycle subtitle channel up in tha current program.
.IP "\fBc\fR" 4
.IX Item "c"
Cycle program.
.IP "\fBw\fR" 4
.IX Item "w"
Show audio waves.
.IP "\fBleft/right\fR" 4
.IX Item "left/right"
Seek backward/forward 10 seconds.
.IP "\fBdown/up\fR" 4
.IX Item "down/up"
Seek backward/forward 1 minute.
.IP "\fBpage down/page up\fR" 4
.IX Item "page down/page up"
Seek backward/forward 10 minutes.
.IP "\fBmouse click\fR" 4
.IX Item "mouse click"
Seek ta cementage up in file correspondin ta fraction of width.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIffplay\-all\fR\|(1),
\&\fIffmpeg\fR\|(1), \fIffprobe\fR\|(1), \fIffserver\fR\|(1),
\&\fIffmpeg\-utils\fR\|(1), \fIffmpeg\-scaler\fR\|(1), \fIffmpeg\-resampler\fR\|(1),
\&\fIffmpeg\-codecs\fR\|(1), \fIffmpeg\-bitstream\-filters\fR\|(1), \fIffmpeg\-formats\fR\|(1),
\&\fIffmpeg\-devices\fR\|(1), \fIffmpeg\-protocols\fR\|(1), \fIffmpeg\-filters\fR\|(1)
.SH "AUTHORS"
.IX Header "AUTHORS"
Da FFmpeg pimpers.
.PP
For details bout tha authorship, peep tha Git history of tha project
(git://source.ffmpeg.org/ffmpeg), e.g. by typin tha command
\&\fBgit log\fR up in tha FFmpeg source directory, or browsin the
online repository at <\fBhttp://source.ffmpeg.org\fR>.
.PP
Maintainers fo' tha specific components is listed up in tha file
\&\fI\s-1MAINTAINERS\s0\fR up in tha source code tree.
