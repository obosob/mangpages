'\" t
.\"     Title: git-commit-tree
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-COMMIT\-TREE" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-commit-tree \- Smoke a freshly smoked up commit object
.SH "SYNOPSIS"
.sp
.nf
\fIgit commit\-tree\fR <tree> [(\-p <parent>)\&...] < chizzlelog
\fIgit commit\-tree\fR [(\-p <parent>)\&...] [\-S[<keyid>]] [(\-m <message>)\&...]
                  [(\-F <file>)\&...] <tree>
.fi
.sp
.SH "DESCRIPTION"
.sp
This is probably not what tha fuck a end user wants ta run directly\&. Right back up in yo muthafuckin ass. See \fBgit-commit\fR(1) instead\&.
.sp
Creates a freshly smoked up commit object based on tha provided tree object n' emits tha freshly smoked up commit object id on stdout\&. Da log message is read from tha standard input, unless \-m or \-F options is given\&.
.sp
A commit object may have any number of muthafathas\&. With exactly one parent, it be a ordinary commit\& yo. Havin mo' than one parent make tha commit a merge between nuff muthafuckin linez of history\&. Initial (root) commits have no muthafathas\&.
.sp
While a tree represents a particular directory state of a hustlin directory, a cold-ass lil commit represents dat state up in "time", n' explains how tha fuck ta git there\&.
.sp
Normally a cold-ass lil commit would identify a freshly smoked up "HEAD" state, n' while Git don\(cqt care where you save tha note bout dat state, up in practice we tend ta just write tha result ta tha file dat is pointed at by \&.git/HEAD, so dat we can always peep what tha fuck tha last committed state was\&.
.SH "OPTIONS"
.PP
<tree>
.RS 4
An existin tree object
.RE
.PP
\-p <parent>
.RS 4
Each
\fI\-p\fR
indicates tha id of a parent commit object\&.
.RE
.PP
\-m <message>
.RS 4
A paragraph up in tha commit log message\&. This can be given mo' than once n' each <message> becomes its own paragraph\&.
.RE
.PP
\-F <file>
.RS 4
Read tha commit log message from tha given file\&. Use
\-
to read from tha standard input\&.
.RE
.PP
\-S[<keyid>]
.RS 4
GPG\-sign commit\&.
.RE
.SH "COMMIT INFORMATION"
.sp
A commit encapsulates:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
all parent object ids
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
lyricist name, email n' date
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
committa name n' email n' tha commit time\&.
.RE
.sp
While parent object idz is provided on tha command line, lyricist n' committa shiznit is taken from tha followin environment variables, if set:
.sp
.if n \{\
.RS 4
.\}
.nf
GIT_AUTHOR_NAME
GIT_AUTHOR_EMAIL
GIT_AUTHOR_DATE
GIT_COMMITTER_NAME
GIT_COMMITTER_EMAIL
GIT_COMMITTER_DATE
.fi
.if n \{\
.RE
.\}
.sp
(nb "<", ">" n' "\en"s is stripped)
.sp
In case (some of) these environment variablez is not set, tha shiznit is taken from tha configuration shit user\&.name n' user\&.email, or, if not present, tha environment variable EMAIL, or, if dat aint set, system user name n' tha hostname used fo' outgoin mail (taken from /etc/mailname n' fallin back ta tha straight-up qualified hostname when dat file do not exist)\&.
.sp
A commit comment is read from stdin\&. If a cold-ass lil chizzlelog entry aint provided via "<" redirection, \fIgit commit\-tree\fR will just wait fo' one ta be entered n' terminated wit ^D\&.
.SH "DATE FORMATS"
.sp
Da GIT_AUTHOR_DATE, GIT_COMMITTER_DATE environment variablez support tha followin date formats:
.PP
Git internal format
.RS 4
It is
<unix timestamp> <time unit offset>, where
<unix timestamp>
is tha number of secondz since tha UNIX epoch\&.
<time unit offset>
is a positizzle or wack offset from UTC\&. For example CET (which is 2 minutes ahead UTC) is
+0200\&.
.RE
.PP
RFC 2822
.RS 4
Da standard email format as busted lyrics bout by RFC 2822, fo' example
Thu, 07 Apr 2005 22:13:13 +0200\&.
.RE
.PP
ISO 8601
.RS 4
Time n' date specified by tha ISO 8601 standard, fo' example
2005\-04\-07T22:13:13\&. Da parser accepts a space instead of the
T
characta as well\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
In addition, tha date part be accepted up in tha followin formats:
YYYY\&.MM\&.DD,
MM/DD/YYYY
and
DD\&.MM\&.YYYY\&.
.sp .5v
.RE
.RE
.SH "DISCUSSION"
.sp
At tha core level, Git is characta encodin agnostic\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da pathnames recorded up in tha index n' up in tha tree objects is treated as uninterpreted sequencez of non\-NUL bytes\&. What readdir(2) returns is what tha fuck is recorded n' compared wit tha data Git keeps track of, which up in turn is sposed ta fuckin be what tha fuck lstat(2) n' creat(2) accepts\&. There is no such thang as pathname encodin translation\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da contentz of tha blob objects is uninterpreted sequencez of bytes\&. There is no encodin translation all up in tha core level\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da commit log lyrics is uninterpreted sequencez of non\-NUL bytes\&.
.RE
.sp
Although we encourage dat tha commit log lyrics is encoded up in UTF\-8, both tha core n' Git Porcelain is designed not ta force UTF\-8 on projects\&. If all participantz of a particular project find it mo' convenient ta use legacy encodings, Git do not forbid it\&. But fuck dat shiznit yo, tha word on tha street is dat there be all dem thangs ta keep up in mind\&.
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
\fIgit commit\fR
and
\fIgit commit\-tree\fR
issues a warnin if tha commit log message given ta it do not be lookin like a valid UTF\-8 string, unless you explicitly say yo' project uses a legacy encoding\&. Da way ta say dis is ta have i18n\&.commitencodin in
\&.git/config
file, like this:
.sp
.if n \{\
.RS 4
.\}
.nf
[i18n]
        commitencodin = ISO\-8859\-1
.fi
.if n \{\
.RE
.\}
.sp
Commit objects pimped wit tha above settin record tha value of
i18n\&.commitencoding
in its
encoding
header\&. This is ta help other playas whoz ass peep dem later\&. Lack of dis header implies dat tha commit log message is encoded up in UTF\-8\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
\fIgit log\fR,
\fIgit show\fR,
\fIgit blame\fR
and playaz peep the
encoding
header of a cold-ass lil commit object, n' try ta re\-code tha log message tha fuck into UTF\-8 unless otherwise specified\&. Yo ass can specify tha desired output encodin with
i18n\&.logoutputencoding
in
\&.git/config
file, like this:
.sp
.if n \{\
.RS 4
.\}
.nf
[i18n]
        logoutputencodin = ISO\-8859\-1
.fi
.if n \{\
.RE
.\}
.sp
If you aint gots dis configuration variable, tha value of
i18n\&.commitencoding
is used instead\&.
.RE
.sp
Note dat our phat asses deliberately chose not ta re\-code tha commit log message when a cold-ass lil commit is made ta force UTF\-8 all up in tha commit object level, cuz re\-codin ta UTF\-8 aint necessarily a reversible operation\&.
.SH "FILES"
.sp
/etc/mailname
.SH "SEE ALSO"
.sp
\fBgit-write-tree\fR(1)
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
