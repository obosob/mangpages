." Copyright (c) 1994, 2013, Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
." DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
."
." This code is free software; you can redistribute it and/or modify it
." under tha termz of tha GNU General Public License version 2 only, as
." published by tha Jacked Software Foundation.
."
." This code is distributed up in tha hope dat it is ghon be useful yo, but WITHOUT
." ANY WARRANTY; without even tha implied warranty of MERCHANTABILITY or
." FITNESS FOR A PARTICULAR PURPOSE.  See tha GNU General Public License
." version 2 fo' mo' details (a copy is included up in tha LICENSE file that
." accompanied dis code).
."
." Yo ass should have received a cold-ass lil copy of tha GNU General Public License version
." 2 along wit dis work; if not, write ta tha Jacked Software Foundation,
." Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
."
." Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
." or visit www.oracle.com if you need additionizzle shiznit or have any
." thangs.
."
.TH java 1 "18 Jul 2013"

.LP
.SH "Name"
java \- tha Java application launcher
.LP
.SH "SYNOPSIS"
.LP
.nf
\f3
.fl
\fP\f3java\fP [ \f2options\fP ] \f2class\fP [ \f2argument ...\fP ]
.fl
\f3java\fP [ \f2options\fP ] \f3\-jar\fP \f2file.jar\fP [ \f2argument ...\fP ]
.fl
.fi

.LP
.RS 3
.TP 3
options 
Command\-line options. Right back up in yo muthafuckin ass. See \f2Options\fP. 
.TP 3
class 
Da name of tha class ta be called. Y'all KNOW dat shit, muthafucka! 
.TP 3
file.jar 
Da name of tha JAR file ta be called. Y'all KNOW dat shit, muthafucka! Used only wit tha \f3\-jar\fP command. Y'all KNOW dat shit, muthafucka! 
.TP 3
argument 
Da arguments passed ta tha \f3main\fP function. I aint talkin' bout chicken n' gravy biatch. 
.RE

.LP
.SH "DESCRIPTION"
.LP
.LP
Da \f3java\fP command starts a Java application. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it do dis by startin a Java runtime environment, loadin a specified class, n' callin dat classs \f3main\fP method.
.LP
.LP
Da method must be declared hood n' static, it must not return any value, n' it must accept a Strin array as a parameter n' shit. Da method declaration has tha followin form:
.LP
.nf
\f3
.fl
hood static void main(Strin args[])
.fl
\fP
.fi

.LP
.LP
By default, tha straight-up original gangsta argument without a option is tha name of tha class ta be called. Y'all KNOW dat shit, muthafucka! A straight-up qualified class name should be used. Y'all KNOW dat shit, muthafucka! If tha \f3\-jar\fP option is specified, then tha straight-up original gangsta non\-option argument is tha name of a JAR file containin class n' resource filez fo' tha application, wit tha startup class indicated by tha Main\-Class manifest header.
.LP
.LP
Da Java runtime searches fo' tha startup class, n' other classes used, up in three setz of locations: tha bootstrap class path, tha installed extensions, n' tha user class path.
.LP
.LP
Non\-option arguments afta tha class name or JAR file name is passed ta tha \f3main\fP function.
.LP
.SH "OPTIONS"
.LP
.LP
Da launcher has a set of standard options dat is supported up in tha current runtime environment.
.LP
.LP
In addition, tha current implementationz of tha virtual machines support a set of nonstandard options dat is subject ta chizzle up in future releases. Right back up in yo muthafuckin ass. See \f2Nonstandard Options\fP.
.LP
.SS 
Standard Options
.LP
.RS 3
.TP 3
\-client 
Selects tha Java HotSpot Client VM fo' realz. A 64\-bit capable JDK currently ignores dis option n' instead uses tha Java Hotspot Server VM.
.br
.br
For default Java VM selection, peep \f2Server\-Class Machine Detection\fP at http://docs.oracle.com/javase/7/docs/technotes/guides/vm/server\-class.html 
.TP 3
\-server 
Selects tha Java HotSpot Server VM. On a 64\-bit capable JDK, only tha Java Hotspot Server VM is supported so tha \f3\-\fP\f3server\fP option is implicit.
.br
.br
For default a Java VM selection, peep \f2Server\-Class Machine Detection\fP at http://docs.oracle.com/javase/7/docs/technotes/guides/vm/server\-class.html 
.TP 3
\-agentlib:libname[=options] 
Loadz natizzle agent library \f2libname\fP, fo' example: 
.nf
\f3
.fl
\-agentlib:hprof
.fl
 
.fl
\-agentlib:jdwp=help
.fl
 
.fl
\-agentlib:hprof=help
.fl
\fP
.fi
See \f2JVMTI Agent Command\-Line Options\fP at http://docs.oracle.com/javase/7/docs/platform/jvmti/jvmti.html#startin 
.TP 3
\-agentpath:pathname[=options] 
Loadz a natizzle agent library by full \f2pathname\fP. Right back up in yo muthafuckin ass. See \f2JVMTI Command\-Line Options\fP at http://docs.oracle.com/javase/7/docs/platform/jvmti/jvmti.html#startin 
.TP 3
\-classpath classpath, \-cp classpath 
Specifies a list of directories, JAR files, n' ZIP archives ta search fo' class files. Right back up in yo muthafuckin ass. Separate class path entries wit colons (:). Right back up in yo muthafuckin ass. Specifyin \f3\-classpath\fP or \f3\-cp\fP overrides any settin of tha \f2CLASSPATH\fP environment variable.
.br
.br
If \f3\-classpath\fP n' \f3\-cp\fP is not used n' \f2CLASSPATH\fP aint set, then tha user class path consistz of tha current directory (.).
.br
.br
As a special convenience, a cold-ass lil class path element dat gotz nuff a funky-ass base name of \f3*\fP is considered equivalent ta specifyin a list of all tha filez up in tha directory wit tha extension .jar or .JAR fo' realz. A Java program cannot tell tha difference between tha two invocations.
.br
.br
For example, if directory mydir gotz nuff a.jar n' b.JAR, then tha class path element \f3mydir/*\fP is expanded ta a A.jar:b.JAR, except dat tha order of jar filez is unspecified. Y'all KNOW dat shit, muthafucka! All jar filez up in tha specified directory, even hidden ones, is included up in tha list fo' realz. A class path entry consistin simply of \f3*\fP expandz ta a list of all tha jar filez up in tha current directory. Da \f2CLASSPATH\fP environment variable, where defined, is ghon be similarly expanded. Y'all KNOW dat shit, muthafucka! Any class path wildcard expansion occurs before tha Java VM is started. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. No Java program will eva peep wild cardz dat is not expanded except by queryin tha environment. For example, by callin \f3System.getenv("CLASSPATH")\fP. 
.TP 3
\-Dproperty=value 
Sets a system property value. 
.TP 3
\-d32 
Run tha application up in a 32\-bit environment. If a 32\-bit environment aint installed or aint supported, a error is ghon be reported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. By default, tha application is run up in a 32\-bit environment unless a 64\-bit only system is used. Y'all KNOW dat shit, muthafucka! 
.TP 3
\-d64 
Run tha application up in a 64\-bit environment. If a 64\-bit environment aint installed or aint supported, a error is ghon be reported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. By default, tha application is run up in a 32\-bit environment unless a 64\-bit only system is used.
.br
.br
Currently only tha Java HotSpot Server VM supports 64\-bit operation, n' tha \f3\-server\fP option is implicit wit tha use of \f3\-d64\fP. Da \f3\-client\fP option is ignored wit tha use of \f3\-d64\fP. This is subject ta chizzle up in a gangbangin' future release. 
.TP 3
\-disableassertions[:package name"..." | :class name ], \-da[:package name"..." | :class name ] 
Disable assertions. This is tha default.
.br
.br
With no arguments, \f3\-disableassertions\fP or \f3\-da\fP disablez assertions. With one argument endin up in \f3"..."\fP, tha switch disablez assertions up in tha specified package n' any subpackages. If tha argument is \f3"..."\fP, then tha switch disablez assertions up in tha unnamed package up in tha current hustlin directory. With one argument not endin up in \f3"..."\fP, tha switch disablez assertions up in tha specified class.
.br
.br
To run a program wit assertions enabled up in \f3package com.wombat.fruitbat\fP but disabled up in class \f3com.wombat.fruitbat.Brickbat\fP, tha followin command could be used: 
.nf
\f3
.fl
java \-ea:com.wombat.fruitbat... \-da:com.wombat.fruitbat.Brickbat <Main Class>
.fl
\fP
.fi
Da \f3\-disableassertions\fP n' \f3\-da\fP switches apply ta all class loadaz n' ta system classes (which aint gots a cold-ass lil class loader). There is one exception ta dis rule: up in they no\-argument form, tha switches do not apply ta system. This make it easy as fuck  ta turn on asserts up in all classes except fo' system classes. Da \f3\-disablesystemassertions\fP option serves up a separate swith ta enable assertions up in all system classes. 
.TP 3
\-enableassertions[:package name"..." | :class name ], \-ea[:package name"..." | :class name ] 
Enable assertions fo' realz. Assertions is disabled by default.
.br
.br
With no arguments, \f3\-enableassertions\fP or \f3\-ea\fP enablez assertions. With one argument endin up in \f3"..."\fP, tha switch enablez assertions up in tha specified package n' any subpackages. If tha argument is \f3"..."\fP, then tha switch enablez assertions up in tha unnamed package up in tha current hustlin directory. With one argument not endin up in \f3"..."\fP, tha switch enablez assertions up in tha specified class.
.br
.br
If a single command gotz nuff multiple instancez of these switches, then they is processed up in order before loadin any classes. Right back up in yo muthafuckin ass. So, fo' example, ta run a program wit assertions enabled only up in package com.wombat.fruitbat (and any subpackages), tha followin command could be used: 
.nf
\f3
.fl
java \-ea:com.wombat.fruitbat... <Main Class>
.fl
\fP
.fi
Da \f3\-enableassertions\fP n' \f3\-ea\fP switches apply ta all class loadaz n' ta system classes (which aint gots a cold-ass lil class loader). There is one exception ta dis rule: up in they no\-argument form, tha switches do not apply ta system. This make it easy as fuck  ta turn on asserts up in all classes except fo' system classes. Da \f3\-enablesystemassertions\fP option serves up a separate switch ta enable assertions up in all system classes. 
.TP 3
\-enablesystemassertions, \-esa 
Enable assertions up in all system classes (sets tha default assertion status fo' system classes ta true). 
.TP 3
\-disablesystemassertions, \-dsa 
Disablez assertions up in all system classes. 
.TP 3
\-help or \-, biatch? 
Displays usage shiznit n' exit. 
.TP 3
\-jar 
Executes a program encapsulated up in a JAR file. Da first argument is tha name of a JAR file instead of a startup class name. For dis option ta work, tha manifest of tha JAR file must contain a line up in tha form \f3Main\-Class\fP: \f2classname\fP yo. Here, \f2classname\fP identifies tha class wit tha \f3hood static void main(String[] args)\fP method dat serves as yo' applicationz startin point.
.br
.br
When you use dis option, tha JAR file is tha source of all user classes, n' other user class path settings is ignored.
.br
.br
JAR filez dat can be run wit tha \f3java \-jar\fP option can have they execute permissions set so they can be run without rockin \f3java \-jar\fP. Right back up in yo muthafuckin ass. See \f2JAR File Overview\fP at http://docs.oracle.com/javase/7/docs/technotes/guides/jar/jarGuide.html 
.TP 3
\-javaagent:jarpath[=options] 
Loadz a Java programmin language agent. For mo' shiznit bout instrumentin Java applications, peep tha java.lang.instrument package description up in tha Java API documentation at
.br
.na
\f2http://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package\-summary.html\fP @
.fi
http://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package\-summary.html 
.TP 3
\-jre\-restrict\-search 
Includes user\-private JREs up in tha version search. 
.TP 3
\-no\-jre\-restrict\-search 
Excludes user\-private JREs up in tha version search. 
.TP 3
\-showversion 
Displays version shiznit n' continues. 
.TP 3
\-splash:imagepath 
Shows splash screen wit image specified by \f2imagepath\fP. 
.TP 3
\-verbose, \-verbose:class 
Displays shiznit bout each class loaded. Y'all KNOW dat shit, muthafucka! 
.TP 3
\-verbose:gc 
Reports on each garbage collection event. 
.TP 3
\-verbose:jni 
Reports shiznit bout use of natizzle methodz n' other Java Natizzle Interface activity. 
.TP 3
\-version 
Displays version shiznit n' exits, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. See also tha \f3\-showversion\fP option. I aint talkin' bout chicken n' gravy biatch. 
.TP 3
\-version:release 
Specifies dat tha version specified by tha release is required by tha class or JAR file specified on tha command line. If tha version of tha \f3java\fP command called do not hook up dis justification n' a appropriate implementation is found on tha system, then tha appropriate implementation is ghon be used.
.br
.br
Da \f3release\fP option specifies a exact version n' a list of versions called a version strin fo' realz. A version strang be a ordered list of version ranges separated by spaces fo' realz. A version range is either a \f2version\-id\fP, a \f2version\-id\fP followed by a asterisk (\f3*\fP), a \f2version\-id\fP followed by a plus sign (\f3+\fP), or a version range dat consistz of two \f2version\-ids\fP combined rockin a ampersand (\f3&\fP). Da asterisk means prefix match, tha plus sign means dis version or pimped outer, n' tha ampersand means tha logical \f3and\fP of tha two version\-ranges, fo' example: 
.nf
\f3
.fl
\-version:"1.6.0_13 1.6*&1.6.0_10+"
.fl
\fP
.fi
Da meanin of tha previous example is dat tha class or JAR file requires either version 1.6.0_13, or a version wit 1.6 as a \f2version\-id\fP prefix n' dat aint less than 1.6.0_10. Da exact syntax n' definizzle of version strings can be found up in Appendix A of tha \f2Java Network Launchin Protocol & API Justification (JSR\-56)\fP.
.br
.br
For JAR files, tha preference is ta specify version requirements up in tha JAR file manifest rather than on tha command line.
.br
.br
See \f2Notes\fP fo' blingin policy shiznit on tha use of dis option. I aint talkin' bout chicken n' gravy biatch. 
.RE

.LP
.SS 
Non\-Standard Options
.LP
.RS 3
.TP 3
\-X 
Displays shiznit bout nonstandard options n' exits, n' you can put dat on yo' toast. 
.TP 3
\-Xint 
Operates up in interpreted\-only mode. Compilation ta natizzle code is disabled, n' all bytecode is executed by tha interpreter n' shit. Da performizzle benefits offered by tha Java HotSpot Client VM adaptizzle compila aint present up in dis mode. 
.TP 3
\-Xbatch 
Disablez background compilation. I aint talkin' bout chicken n' gravy biatch. Typically, tha Java VM compilez tha method as a funky-ass background task, hustlin tha method up in interpreta mode until tha background compilation is finished. Y'all KNOW dat shit, muthafucka! Da \-Xbatch flag disablez background compilation so dat compilation of all methodz proceedz as a gangbangin' foreground task until completed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
.TP 3
\-Xbootclasspath:bootclasspath 
Specifies a cold-ass lil colon\-separated list of directories, JAR files, n' ZIP archives ta search fo' boot class files. These is used up in place of tha boot class filez included up in tha Java platform JDK.
.br
.br
Applications dat use dis option fo' tha purpose of overridin a cold-ass lil class up in rt.jar should not be deployed cuz bustin so would contravene tha Java Runtime Environment binary code license. 
.TP 3
\-Xbootclasspath/a:path 
Specifies a cold-ass lil colon\-separated path of directories, JAR files, n' ZIP archives ta append ta tha default bootstrap class path. 
.TP 3
\-Xbootclasspath/p:path 
Specifies a cold-ass lil colon\-separated path of directories, JAR files, n' ZIP archives ta add up in front of tha default bootstrap class path.
.br
.br
Do not deploy applications dat use dis option ta override a cold-ass lil class up in rt.jar cuz dis violates tha Java Runtime Environment binary code license. 
.TP 3
\-Xcheck:jni 
Performs additionizzle checks fo' Java Natizzle Interface (JNI) functions. Right back up in yo muthafuckin ass. Specifically, tha Java Virtual Machine validates tha parametas passed ta tha JNI function n' tha runtime environment data before processin tha JNI request fo' realz. Any invalid data encountered indicates a problem up in tha natizzle code, n' tha Java Virtual Machine will terminizzle wit a gangbangin' fatal error up in such cases. Expect a performizzle degradation when dis option is used. Y'all KNOW dat shit, muthafucka! 
.TP 3
\-Xfuture 
Performs strict class\-file format checks. For backward compatibility, tha default format checks performed by tha Java virtual machine is no stricta than tha checks performed by 1.1.x versionz of tha JDK software. Da \f3\-Xfuture\fP option turns on stricta class\-file format checks dat enforce closer conformizzle ta tha class\-file format justification. I aint talkin' bout chicken n' gravy biatch. Developers is encouraged ta use dis flag when pimpin freshly smoked up code cuz tha stricta checks will become tha default up in future releasez of tha Java application launcher n' shit. 
.TP 3
\-Xnoclassgc 
Disablez class garbage collection. I aint talkin' bout chicken n' gravy biatch. Use of dis option preven memory recovery from loaded classes thus increasin overall memory usage. This could cause \f3OutOfMemoryError\fP ta be thrown up in some applications. 
.TP 3
\-Xincgc 
Enablez tha incremenstrual garbage collector. Shiiit, dis aint no joke. Da incremenstrual garbage collector, which is turned off by default, will reduce tha occasionizzle long garbage\-collection pauses durin program execution. I aint talkin' bout chicken n' gravy biatch. Da incremenstrual garbage collector will at times execute concurrently wit tha program n' durin such times will reduce tha processor capacitizzle available ta tha program. 
.TP 3
\-Xloggc:file 
Reports on each garbage collection event, as wit \f3\-verbose:gc\fP yo, but logs dis data ta a gangbangin' file. In addizzle ta tha shiznit \f3\-verbose:gc\fP gives, each reported event is ghon be preceded by tha time (in seconds) since tha straight-up original gangsta garbage\-collection event.
.br
.br
Always bust a local file system fo' storage of dis file ta avoid stallin tha Java VM cuz of network latency. Da file may be truncated up in tha case of a gangbangin' full file system n' loggin will continue on tha truncated file. This option overrides \f3\-verbose:gc\fP when both is specified on tha command line. 
.TP 3
\-Xmnsize or \-XX:NewSize 
Sets tha size of tha lil' generation (nursery). 
.TP 3
\-Xmsn 
Specifies tha initial size, up in bytes, of tha memory allocation pool. This value must be a multiple of 1024 pimped outa than 1 MB fo' realz. Append tha letta \f3k\fP or \f3K\fP ta indicate kilobytes, or \f3m\fP or \f3M\fP ta indicate megabytes. Da default value is chosen at runtime based on system configuration. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See \f2Garbage Collector Ergonomics\fP at http://docs.oracle.com/javase/7/docs/technotes/guides/vm/gc\-ergonomics.html
.br
.br
Examples: 
.nf
\f3
.fl
\-Xms6291456
.fl
\-Xms6144k
.fl
\-Xms6m
.fl
\fP
.fi
.TP 3
\-Xmxn 
Specifies tha maximum size, up in bytes, of tha memory allocation pool. This value must a multiple of 1024 pimped outa than 2 MB fo' realz. Append tha letta \f3k\fP or \f3K\fP ta indicate kilobytes, or \f3m\fP or \f3M\fP ta indicate megabytes. Da default value is chosen at runtime based on system configuration.
.br
.br
For server deployments, \f3\-Xms\fP n' \f3\-Xmx\fP is often set ta tha same value. Right back up in yo muthafuckin ass. See \f2Garbage Collector Ergonomics\fP at http://docs.oracle.com/javase/7/docs/technotes/guides/vm/gc\-ergonomics.html
.br
.br
Examples: 
.nf
\f3
.fl
\-Xmx83886080
.fl
\-Xmx81920k
.fl
\-Xmx80m
.fl
\fP
.fi
On Solaris 7 n' Solaris 8 SPARC platforms, tha upper limit fo' dis value be approximately 4000 m minus overhead amounts, n' you can put dat on yo' toast. On Solaris 2.6 n' x86 platforms, tha upper limit be approximately 2000 m minus overhead amounts, n' you can put dat on yo' toast. On Linux platforms, tha upper limit be approximately 2000 m minus overhead amounts, n' you can put dat on yo' toast. 
.TP 3
\-Xprof 
Profilez tha hustlin program, n' sendz profilin data ta standard output. This option is provided as a utilitizzle dat is useful up in program pimpment n' aint intended ta be used up in thang systems. 
.TP 3
\-Xrs 
Reduces use of operating\-system signals by tha Java VM.
.br
.br
In a earlier release, tha Shutdown Hooks facilitizzle was added ta enable orderly shutdown of a Java application. I aint talkin' bout chicken n' gravy biatch. Da intent was ta enable user cleanup code (like fuckin closin database connections) ta run at shutdown, even if tha Java VM terminates abruptly.
.br
.br
Da Java VM catches signals ta implement shutdown hooks fo' unexpected Java VM termination. I aint talkin' bout chicken n' gravy biatch. Da Java VM uses \f3SIGHUP\fP, \f3SIGINT\fP, n' \f3SIGTERM\fP ta initiate tha hustlin of shutdown hooks.
.br
.br
Da JVM uses a similar mechanizzle ta implement tha feature of dumpin thread stacks fo' debuggin purposes. Da JVM uses \f3SIGQUIT\fP ta big-ass up thread dumps.
.br
.br
Applications embeddin tha Java VM frequently need ta trap signals like fuckin \f3SIGINT\fP or \f3SIGTERM\fP, which can lead ta interference wit tha Java VM signal handlezs. Da \f3\-Xrs\fP command\-line option be available ta address dis issue. When \f3\-Xrs\fP is used on tha Java VM, tha signal masks fo' \f3SIGINT\fP, \f3SIGTERM\fP, \f3SIGHUP\fP, n' \f3SIGQUIT\fP is not chizzled by tha Java VM, n' signal handlezs fo' these signals is not installed.
.br
.br
There is two consequencez of specifyin \f3\-Xrs\fP: 
.RS 3
.TP 2
o
\f3SIGQUIT\fP thread dumps is not available. 
.TP 2
o
User code is responsible fo' causin shutdown hooks ta run, fo' example by callin \f3System.exit()\fP when tha Java VM is ta be terminated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
.RE
.TP 3
\-Xssn 
Sets tha thread stack size. 
.TP 3
\-XX:AllocationPrefetchStyle=n 
Sets tha steez of prefetch used durin allocation. I aint talkin' bout chicken n' gravy biatch. default=2. 
.TP 3
\-XX:+AggressiveOpts 
Enablez aggressive optimization. I aint talkin' bout chicken n' gravy biatch. 
.TP 3
\-XX:+|\-DisableAttachMechanizzle 
Specifies whether commandz (like fuckin \f3jmap\fP n' \f3jconsole\fP) can attach ta tha Java VM. By default, dis feature is disabled. Y'all KNOW dat shit, muthafucka! That is, attachin is enabled, fo' example: 
.nf
\f3
.fl
java \-XX:+DisableAttachMechanism
.fl
\fP
.fi
.TP 3
\-XXLargePageSizeInBytes=n 
Specifies tha maximum size fo' big-ass pages. 
.TP 3
\-XX:MaxGCPauseMillis=n 
Sets a target fo' tha maximum GC pause time.
.br
.br
This be a soft goal, n' tha Java VM will make its dopest effort ta big up dat shit. There is no maximum value set by default. 
.TP 3
\-XX:NewSize 
Sets tha size of tha lil' generation (nursery). Right back up in yo muthafuckin ass. Sames as \f3\-Xmnsize\fP. 
.TP 3
\-XX:ParallelGCThreads=n 
Sets tha number of GC threadz up in tha parallel collectors. 
.TP 3
\-XX:PredictedClassLoadCount=n 
This option requires dat tha \f3UnlockExperimentalVMOptions\fP flag be set first. Use tha \f3PredictedClassLoadCount\fP flag if yo' application loadz a shitload of classes n' especially if \f3class.forName()\fP is used heavily. Da recommended value is tha number of classes loaded as shown up in tha output from \f3\-verbose:class\fP.
.br
.br
Example: 
.nf
\f3
.fl
java \-XX:+UnlockExperimentalVMOptions \-XX:PredictedClassLoadCount=60013
.fl
\fP
.fi
.TP 3
\-XX:+PrintCompilation 
Prints verbose output from tha Java HotSpot VM dynamic runtime compila n' shit. 
.TP 3
\-XX:+PrintGCDetails \-XX:+PrintGCTimeStamps 
Prints garbage collection output along wit time stamps. 
.TP 3
\-XX:SoftRefLRUPolicyMSPerMB=0 
This flag enablez aggressive processin of software references. Use dis flag if tha software reference count has a impact on tha Java HotSpot VM garbage collector. Shiiit, dis aint no joke. 
.TP 3
\-XX:TLABSize=n 
Thread local allocation buffers (TLAB) is enabled by default up in tha Java HotSpot VM. Da Java HotSpot VM sizes TLABs based on allocation patterns. Da \f3\-XX:TLABSize\fP option enablez fine\-tunin tha size of TLABs. 
.TP 3
\-XX:+UseAltSigs 
Da Java VM uses \f3SIGUSR1\fP n' \f3SIGUSR2\fP by default, which can sometimes conflict wit applications dat signal\-chain \f3SIGUSR1\fP n' \f3SIGUSR2\fP. Da \f3\-XX:+UseAltSigs\fP option causes tha Java VM ta use signals other than \f3SIGUSR1\fP n' \f3SIGUSR2\fP as tha default. 
.TP 3
\-XX:+|\-UseCompressedOops 
Enablez compressed references up in 64\-bit Java VMs.
.br
.br
This option is legit by default. 
.TP 3
\-XX:+UseConcMarkSweepGC or \-XX:+UseG1GC 
Enablez either tha Concurrent Mark Sweep (CMS) or tha G1 garbage collectors. 
.TP 3
\-XX:+|\-UseLargePages 
Enablez big-ass page support.
.br
.br
Big-Ass pages is enabled by default on Solaris. 
.TP 3
\-XX:+UseParallelOldGC 
Enablez tha parallel garbage collectors, which is optimized fo' throughput n' average response time. 
.RE

.LP
.SH "NOTES"
.LP
.LP
Da \f2\-version:release\fP option places no restrictions on tha complexitizzle of tha release justification. I aint talkin' bout chicken n' gravy biatch. But fuck dat shiznit yo, tha word on tha street is dat only a restricted subset of tha possible release justifications represent sound policy n' only these is straight-up supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. These policies are:
.LP
.RS 3
.TP 3
1.
Any version, represented by not rockin dis option. I aint talkin' bout chicken n' gravy biatch. 
.TP 3
2.
Any version pimped outa than a arbitrarily precise \f2version\-i\fPd value, fo' example: 
.nf
\f3
.fl
"1.6.0_10+"
.fl
\fP
.fi
This would utilize any version pimped outa than 1.6.0_10. This is useful fo' a cold-ass lil case where a intercourse was introduced (or a funky-ass bug fixed) up in tha release specified. Y'all KNOW dat shit, muthafucka! 
.TP 3
3.
A version pimped outa than a arbitrarily precise version\-id, bounded by tha upper bound of dat release crew, fo' example: 
.nf
\f3
.fl
"1.6.0_10+&1.6*"
.fl
\fP
.fi
.TP 3
4.
An \f3or\fP expressionz of shit 2 or 3, fo' example: 
.nf
\f3
.fl
"1.6.0_10+&1.6* 1.7+"
.fl
\fP
.fi
Similar ta item 2. This is useful when a cold-ass lil chizzle was introduced up in a release (1.7) but also made available up in thugged-out shiznit ta earlier releases. 
.RE

.LP
.SH "Performizzle Tunin Examples"
.LP
.LP
Da followin examplez show how tha fuck ta use experimenstrual tunin flags ta optimize either throughput or fasta response time.
.LP
.SS 
Example 1, Tunin fo' Higher Throughput
.LP
.nf
\f3
.fl
        java \-d64 \-server \-XX:+AggressiveOpts \-XX:+UseLargePages \-Xmn10g  \-Xms26g \-Xmx26g 
.fl
\fP
.fi

.LP
.SS 
Example 2, Tunin fo' Lower Response Time
.LP
.nf
\f3
.fl
        java \-d64 \-XX:+UseG1GC \-Xms26g Xmx26g \-XX:MaxGCPauseMillis=500 \-XX:+PrintGCTimeStamps 
.fl
\fP
.fi

.LP
.SH "EXIT STATUS"
.LP
.LP
Da followin exit joints is typically returned by tha launcher, typically when tha launcher is called wit tha wack arguments, straight-up errors, or exceptions thrown from tha Java Virtual Machine. But fuck dat shiznit yo, tha word on tha street is dat a Java application may chizzle ta return any value rockin tha API call \f3System.exit(exitValue)\fP.
.LP
.RS 3
.TP 2
o
\f30\fP: Successful completion 
.TP 2
o
\f3>0\fP: An error occurred 
.RE

.LP
.SH "SEE ALSO"
.LP
.RS 3
.TP 2
o
javac(1) 
.TP 2
o
jdb(1) 
.TP 2
o
javah(1) 
.TP 2
o
jar(1) 
.RE

.LP
 
