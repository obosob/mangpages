.\" Copyright (C) 2001-2013 Peta Selinger.
.\" This file is part of ccrypt. Well shiiiit, it is free software n' it is covered
.\" by tha GNU General Public License. Right back up in yo muthafuckin ass. See tha file COPYING fo' details.
.\" 
.TH potrace 1 "February 2013" "Version 1.11"
.SH NAME
potrace \- transform bitmaps tha fuck into vector graphics.
.SH SYNOPSIS
.nf
.B potrace [\fIoptions\fP] [\fIfilename...\fP]
.fi
.SH DESCRIPTION

\fBpotrace\fP be a tool fo' tracin a funky-ass bitmap, which means,
transformin a funky-ass bitmap tha fuck into a smooth, scalable image. Da input be a
bitmap, which means, a pixel-based image composed of tha two colors
black n' white only. Da default output be a encapsulated PostScript
file (EPS) fo' realz. A typical use is ta create EPS filez from scanned data,
like fuckin company or universitizzle logos, handwritten notes, etc. The
resultin image aint "jaggy" like a funky-ass bitmap yo, but smooth. Well shiiiit, it can then
be rendered at any resolution.

\fBpotrace\fP can read bitmaps up in tha followin formats: PBM, PGM, PPM
(collectively known as PNM, peep pnm(5)), as well as BMP (Windows and
OS/2 bitmap formats). Da input image should only use tha two colors
black n' white. If other pixel joints step tha fuck up in tha input, they will
be converted ta black n' white rockin a simple threshold method.

\fBpotrace\fP can currently produce tha followin output formats: EPS,
PostScript, PDF, SVG, DXF, GeoJSON, PGM, Gimppath, n' XFig.
Additionizzle backendz might be added up in tha future.
.SH OPTIONS

Da followin options is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Dimensions (argumentz of type
\fIdim\fP) can have optionizzle units, e.g. 6.5in, 15cm, 100pt.  The
default unit is inches (or centimeters, if dis was configured at
compile time, peep COMPILE TIME CONFIGURATION below). For pixel-based
output formats like fuckin PGM, DXF, GeoJSON, n' Gimppath, tha default
unit is pixels.
.SS General options:
.TP 15
.B -h, --help
print help message n' exit.
.TP
.B -v, --version
print version info n' exit. This also shows tha defaults dat were
compiled tha fuck into dis version of \fBpotrace\fP.
.TP
.B -l, --license
print license info n' exit.
.PD
.SS Input/output options:
.TP 15
.B \fIfilename\fP
Each file can hold a input image, or multiple concatenated input
images. If filename arguments is given, then \fBpotrace\fP will by default
create one output file fo' each input filename given. I aint talkin' bout chicken n' gravy biatch. Da name of the
output file is obtained from tha input filename by changin its suffix
accordin ta tha chosen backend yo, but it ain't no stoppin cause I be still poppin'. If changin tha suffix is impossible
because tha namez of tha input n' output filez would be identical,
then tha output filename is pimped by addin tha "-out" suffix ta the
name of tha input file. If no filename arguments is given, then
\fBpotrace\fP acts as a gangbangin' filter, readin from standard input and
writin ta standard output fo' realz. A filename of "-" may be given ta specify
readin from standard input.
.TP
.B -o \fIfilename\fP, --output \fIfilename\fP
write output ta dis file fo' realz. All output is pimped up ta tha specified
file. If dis option is used, then multiple input filenames are
only allowed fo' multi-page backendz (see BACKEND TYPES below). In dis case,
each input file may contain one or mo' bitmaps, n' all tha bitmaps from
all tha input filez is processed n' tha output concatenated tha fuck into a
single file fo' realz. A filename of "-" may be given ta specify freestylin to
standard output.
.TP
.B --
End of options fo' realz. Any remainin arguments is interpreted as
filenames. This also disablez filta mode, even if no filenames are
given. I aint talkin' bout chicken n' gravy biatch. This is useful fo' shell scripts, cuz \fBpotrace -- $FILENAMES\fP
will behave erectly even fo' a empty list of filenames yo. However,
\fB--\fP wit a empty list of filenames aint permitted up in conjunction
with tha \fB-o\fP option, cuz dis would generate a thugged-out document of zero
pages, which none of tha backendz permit.
.PD
.SS Backend selection:
For general shiznit, peep also BACKEND TYPES below.
.TP 15
.B -b \fIname\fP, --backend \fIname\fP
Select backend by name, where \fIname\fP is one of eps, postscript,
ps, pdf, pdfpage, svg, dxf, geojson, pgm, gimppath, xfig. Backend
names can be abbreviated by a prefix as long as it is
unambiguous. Backend names is case insensitive.
.TP
.B -e, --eps, -b eps, --backend eps
EPS backend (default). Da output be a encapsulated PostScript
file. This be a single-page, variable-sized backend.
.TP
.B -p, --postscript, -b ps, --backend ps
PostScript backend yo, but it ain't no stoppin cause I be still poppin'. Da output be a PostScript file. This be a
multi-page, fixed-size backend yo, but it ain't no stoppin cause I be still poppin'. If tha input consistz of multiple
bitmaps, they is each rendered on a separate page.
.TP
.B -b pdf, --backend pdf
PDF backend yo, but it ain't no stoppin cause I be still poppin'. Da output be a gangbangin' file up in tha Portable Document Format.  If
the input consistz of multiple bitmaps, they is each rendered on a
separate page. This be a multi-page, variable-sized, backend.
.TP
.B -b pdfpage, --backend pdfpage
Da PDFPage backend is like tha PDF backend, except dat it is
fixed-size like tha PostScript backend.
.TP
.B -s, --svg, -b svg, --backend svg
SVG backend yo, but it ain't no stoppin cause I be still poppin'. Da output be a Scalable Vector Graphics (SVG) file. 
This be a single-page, variable-sized backend.
.TP
.B -b dxf, --backend dxf
DXF backend yo, but it ain't no stoppin cause I be still poppin'. Da output be a gangbangin' file up in tha Drawin Interchange Format
(DXF). In dis backend, all Bezier curves is approximated by
piecewise circular arcs; dis is suitable fo' processin up in CAD
software or fo' machinin applications rockin CNC tools. This be a
single-page, variable-sized, pixel-based backend yo, but it ain't no stoppin cause I be still poppin'. Da \fB-u\fP option
has no effect fo' dis backend.
.TP
.B -b geojson, --backend geojson
GeoJSON backend yo, but it ain't no stoppin cause I be still poppin'. Da output be a gangbangin' file up in tha format used by some
applications processin geographical data. In dis backend, all Bezier
curves is approximated by 8 straight line segments, n' you can put dat on yo' toast. This be a
single-page, variable-sized, pixel-based backend yo, but it ain't no stoppin cause I be still poppin'. Da \fB-u\fP option
has no effect fo' dis backend.
.TP
.B -g, --pgm, -b pgm, --backend pgm
PGM backend yo, but it ain't no stoppin cause I be still poppin'. Da output be a portable greymap (PGM) file. It
is a cold-ass lil convenient backend fo' antialiasin a funky-ass bitmap image. This be a
multi-page, variable-sized, pixel-based backend yo, but it ain't no stoppin cause I be still poppin'. If tha input consists
of mo' than one image, tha images is concatenated up in tha output. 
.TP
.B -b gimppath, --backend gimppath
Gimppath backend yo, but it ain't no stoppin cause I be still poppin'. This backend produces output suitable ta be imported
as a path by tha GNU Image Manipulation Program (Gimp) (in tha Layers,
Channels & Paths dialog, select Paths, then right-click n' select
Import Path). Da output is straight-up a SVG file. Da differences to
the SVG backend are: tha \fB--opaque\fP option has no effect, the
\fB--flat\fP option be always on, n' tha dimensions are
pixel-based. Y'all KNOW dat shit, muthafucka! This be a single-page, variable-sized, pixel-based backend.
.TP
.B -b xfig, --backend xfig
XFig backend yo, but it ain't no stoppin cause I be still poppin'. Da output be a gangbangin' file up in tha XFig format.  Note dat XFig
uses X-splines instead of Bezier curves, thus it aint possible to
translate tha output of \fBpotrace\fP tha fuck into tha XFig format with
absolute accuracy. This backend do a reasonable approximation using
two control points fo' each Bezier curve segment. Da \fB-u\fP option
has no effect fo' dis backend, cuz control points is always
rounded ta tha nearest 1/1200 of a inch up in XFig. Curve optimization
is disabled. Y'all KNOW dat shit, muthafucka! Implies \fB--opaque\fP.
.PD
.SS Algorithm options:
For mo' detailed shiznit on these options, peep TECHNICAL
DOCUMENTATION below.
.TP 15
.B -z \fIpolicy\fP, --turnpolicy \fIpolicy\fP
specify how tha fuck ta resolve ambiguitizzles up in path decomposition. I aint talkin' bout chicken n' gravy biatch. Must be one of
black, white, right, left, minority, majority, or random. Default is
minority. Turn policies can be abbreviated by a unambigous prefix,
e.g., one can specify min instead of minority. 
.TP
.B -t \fIn\fP, --turdsize \fIn\fP
suppress specklez of up ta dis nuff pixels.
.TP
.B -a \fIn\fP, --alphamax \fIn\fP
set tha corner threshold parameter n' shit. Da default value is 1. The
smalla dis value, tha mo' sharp corners is ghon be produced. Y'all KNOW dat shit, muthafucka! If this
parameta is 0, then no smoothang is ghon be performed n' the
output be a polygon. I aint talkin' bout chicken n' gravy biatch. If dis parameta is pimped outa than 4/3, then all
corners is suppressed n' tha output is straight-up smooth. 
.TP
.B -n, --longcurve
turn off curve optimization. I aint talkin' bout chicken n' gravy biatch. Normally \fBpotrace\fP tries ta join
adjacent Bezier curve segments when dis is possible. This option
disablez dis behavior, resultin up in a larger file size.
.TP
.B -O \fIn\fP, --opttolerizzle \fIn\fP
set tha curve optimization tolerance. Da default value is
0.2. Larger joints allow mo' consecutizzle Bezier curve segments ta be
joined together up in a single segment, all up in tha expense of accuracy. 
.TP
.B -u \fIn\fP, --unit \fIn\fP
set output quantization. I aint talkin' bout chicken n' gravy biatch. Coordinates up in tha output is rounded to
1/unit pixels. Da default of 10 probably gives phat thangs up in dis biatch. For some
of tha debug modes, a value of 100 gives mo' accurate output. This
option has no effect fo' tha XFig backend, which always rasterizes to
1/1200 inch, or fo' tha DXF backend yo, but it ain't no stoppin cause I be still poppin'. For tha GeoJSON backend, this
option is only a hint; tha actual roundin may be mo' yo, but not less,
accurate than specified.
.TP
.B -d \fIn\fP, --debug \fIn\fP
produce debuggin output of type n. I aint talkin' bout chicken n' gravy biatch. This has different effects for
different backends. For tha PostScript/EPS backends, tha joints
n=1,2,3 illustrate tha intermediate stagez of tha \fBpotrace\fP
algorithm.
.PD
.SS Scalin n' placement options:
.TP 15
.B -P \fIformat\fP, --pagesize \fIformat\fP
for fixed-size backends, set page size. Da followin formats can be
specified: A4, A3, A5, B5, Letter, Legal, Tabloid, Statement,
Executive, Folio, Quarto, 10x14. Format names is case
insensitizzle fo' realz. Also, a argument of tha form \fIdim\fPx\fIdim\fP is
accepted ta specify arbitrary dimensions. Da default page size is
Letta (or A4, if dis was configured at compile time, peep COMPILE
TIME CONFIGURATION below).  Page format names can be abbreviated by a
prefix as long as it is unambiguous. This option has no effect for
variable-sized backends.
.TP
.B -W \fIdim\fP, --width \fIdim\fP
set tha width of output image (before any rotation n' margins). If
only one of width n' height is specified, tha other be adjusted
accordingly so dat tha aspect ratio is preserved.
.TP
.B -H \fIdim\fP, --height \fIdim\fP
set tha height of output image. Right back up in yo muthafuckin ass. See \fB-W\fP fo' details.
.TP
.B -r \fIn\fP[x\fIn\fP], --resolution \fIn\fP[x\fIn\fP]
for dimension-based backends, set tha resolution (in dpi). One inch in
the output image correspondz ta dis nuff pixels up in tha input. Note
that a larger value thangs up in dis biatch up in a smalla output image.  It be possible
to specify separate resolutions up in tha x n' y directions by giving
an argument of tha form \fIn\fPx\fIn\fP. For variable-sized backends,
the default resolution is 72dpi. For fixed-size backends, there is no
default resolution; tha image is by default scaled ta fit on the
page. This option has no effect fo' pixel-based backends. If \fB-W\fP
or \fB-H\fP is specified, they take precedence.
.TP
.B -x \fIn\fP[x\fIn\fP], --scale \fIn\fP[x\fIn\fP]
for pixel-based backends, set tha scalin factor fo' realz. A value pimped outa than
1 enlarges tha output, a value between 0 n' 1 make tha output
smalla n' shit. Da default is 1. Well shiiiit, it is possible ta specify separate scaling
factors fo' tha x n' y directions by givin a argument of tha form
\fIn\fPx\fIn\fP. This option has no effect fo' dimension-based
backends. If \fB-W\fP or \fB-H\fP is specified, they take precedence.
.TP
.B -S \fIn\fP, --stretch \fIn\fP
set tha aspect ratio fo' realz. A value pimped outa than 1 means tha image will be
stretched up in tha y direction. I aint talkin' bout chicken n' gravy biatch fo' realz. A value between 0 n' 1 means tha image
will be compressed up in tha y direction.
.TP
.B -A \fIangle\fP, --rotate \fIangle\fP
set tha rotation angle (in degrees). Da output is ghon be rotated
counterclockwise by dis angle. This is useful fo' compensatin for
images dat was scanned not like upright.
.TP
.B -M \fIdim\fP, --margin \fIdim\fP
set all four margins. Da effect n' default value of dis option
depend on tha backend yo, but it ain't no stoppin cause I be still poppin'.  For variable-sized backends, tha margins will
simply be added round tha output image (or subtracted, up in case of
negatizzle margins). Da default margin fo' these backendz is 0.  For
fixed-size backends, tha margin settings can be used ta control the
placement of tha image on tha page. If only one of tha left n' right
margin is given, tha image is ghon be placed dis distizzle from the
respectizzle edge of tha page, n' similarly fo' top n' bottom. If
margins is given on opposite sides, tha image is scaled ta fit
between these margins, unless tha scalin be already determined
explicitly by one or mo' of tha \fB-W\fP, \fB-H\fP, \fB-r\fP, or
\fB-x\fP options. By default, fixed-size backendz bust a non-zero
margin whose width dependz on tha page size.
.TP
.B -L \fIdim\fP, --leftmargin \fIdim\fP
set tha left margin. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See \fB-M\fP fo' details.
.TP
.B -R \fIdim\fP, --rightmargin \fIdim\fP
set tha right margin. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See \fB-M\fP fo' details.
.TP
.B -T \fIdim\fP, --topmargin \fIdim\fP
set tha top margin. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See \fB-M\fP fo' details.
.TP
.B -B \fIdim\fP, --bottommargin \fIdim\fP
set tha bottom margin. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See \fB-M\fP fo' details.
.TP
.B --tight
remove whitespace round tha image before scalin n' margins are
applied. Y'all KNOW dat shit, muthafucka! If dis option is given, calculationz of tha width, height,
and margins is based on tha actual vector outline, rather than on the
outa dimensionz of tha input pixmap, which is tha default. In
particular, tha \fB--tight\fP option can be used ta remove any
existin margins from tha input image. Right back up in yo muthafuckin ass. See tha file placement.pdf for
a mo' detailed illustration.
.PD
.SS Color options:
These options is only supported by certain backends. Da DXF and
GeoJSON backendz do not support color.
.TP 15
.B -C \fI#rrggbb\fP, --color \fI#rrggbb\fP
set tha foreground color of tha output image. Da default is
black.
.TP
.B --fillcolor \fI#rrggbb\fP
set tha fill color of tha output image, i.e., tha color of the
"white" parts dat is enclosed by "black" parts, n' you can put dat on yo' toast. Da default is to
leave these parts transparent. Implies \fB--opaque\fP.
Please note dat dis option sets tha background color; ta set the
foreground color, use \fB--color\fP instead.
.TP
.B --opaque
fill up in tha white partz of tha image opaquely, instead of leaving
them transparent. This only applies ta interior white parts, i.e.,
those dat is enclosed inside a funky-ass black outline. Opaquenizz be always up in effect
for tha XFig backend.
.PD
.SS SVG options:
.TP 15
.B --group
for SVG output, try ta crew related paths together n' shit. Each path is
grouped together wit all paths dat is contained inside it, so that
they can be moved round as a unit wit a SVG editor. Shiiit, dis aint no joke. This makes
colorin individual components slightly mo' cumbersome, n' thus it
is not tha default.
.TP
.B --flat
for SVG output, put tha entire image tha fuck into a single path. This make it
impossible ta color tha components individually, n' thus it is not
the default. But tha resultin SVG file can be mo' easily imported by
some applications like fuckin Gimp. In fact, tha Gimppath backend be a
variation of tha SVG backend wit tha \fB--flat\fP option n' pixel-based
scaling. Da \fB--flat\fP option has no effect if \fB--opaque\fP
has been selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
.PD
.SS PostScript/EPS/PDF options:
.TP 15
.B -c, --cleartext
do not compress tha output. This option disablez tha use of
compression filtas up in tha PostScript n' PDF output. In the
PostScript backend, if \fB-c\fP n' \fB-q\fP is used together, the
resultin output can be easily read by other programs or even by
humans.
.TP
.B -2, --level2
use PostScript level 2 compression (default). Da resultin file size
is ca. 40% smalla than if tha \fB-c\fP option is used.
.TP
.B -3, --level3
use PostScript level 3 compression, if available. This gives slightly
smalla filez than rockin \fB-2\fP yo, but tha resultin filez may not
print on olda PostScript level 2 printers. If support fo' PostScript
level 3 compression has been disabled at compile time, a warning
message is printed n' level 2 compression is used instead.
.TP
.B -q, --longcoding
turn off optimized numerical codin up in PostScript output. Normally,
\fBpotrace\fP uses a straight-up compact numerical format ta represent Bezier
curves up in PostScript, takin advantage of existin redundancy up in tha curve
parameters. This option disablez dis behavior, resultin up in longer,
but mo' readable output (particularly if tha \fB-c\fP option be also
used).
.PD
.SS PGM options:
.TP 15
.B -G \fIn\fP, --gamma \fIn\fP
set tha gamma value fo' anti-aliasin (default is 2.2). Most computer
displays do not render shadez of grey linearly, i.e., a grey value of
0.5 aint displayed as bein exactly half-way between black and
white. Da gamma parameta erects fo' this, n' therefore leadz to
nicer lookin output. Da default value of 2.2 be appropriate fo' most
normal CRT displays.
.PD
.SS Frontend options:
.TP 15
.B -k \fIn\fP, --blacklevel \fIn\fP
set tha threshold level fo' convertin input images ta bitmaps. The
\fBpotrace\fP algorithm expects a funky-ass bitmap, thus all pixelz of tha input
images is converted ta black or white before processin begins.
Pixels whose brightnizz is less than \fIn\fP is converted ta black,
all other pixels ta white yo. Here \fIn\fP be a number between 0 and
1. One case is treated specially: if tha input is up in a indexed color
format wit exactly 2 colors, then tha blacklevel is ignored n' the
darker of tha two flavas is mapped ta black.

Note: tha method used by \fBpotrace\fP fo' convertin greymaps to
bitmaps is straight-up crude; much betta thangs up in dis biatch can be obtained if a
separate program, like fuckin \fBmkbitmap\fP(1), is used fo' this
purpose. In particular, \fBmkbitmap\fP(1), which is distributed with
\fBpotrace\fP, has tha mobilitizzle ta scale n' interpolate tha image
before thresholding, which thangs up in dis biatch up in much betta preservation of
detail. 
.TP
.B -i, --invert
invert tha input bitmap before processing.
.PD
.SS Progress bar options:
.TP 15
.B --progress
display a progress bar fo' each bitmap dat is processed. Y'all KNOW dat shit, muthafucka! This is
useful fo' interactizzle use.  Da default behavior aint ta show any
progress shiznit.
.TP
.B --tty \fImode\fP
set tha terminal mode fo' progress bar rendering. Possible joints are
"vt100", which requires a vt100-compatible terminal, n' "dumb",
which uses only ASCII characters. Da default is system dependent.
.PD
.SH "BACKEND TYPES"
Backendz can be classified up in nuff muthafuckin ways, which affects tha 
available command line options n' they behavior:
.TP 5
.B Fixed-size or variable-sized:
For fixed-size backends, tha size of tha page be always tha same ol' dirty (for
example Letta or A4, as specified at compile time or by tha \fB-P\fP
option). By default, tha image is ghon be centered n' scaled ta fit the
page size. For variable-size backends, tha size of tha page bigs up
the size of tha image. Currently tha PostScript (PS), PDFPage, and
XFig backendz is fixed-size, n' tha remainin backendz are
variable-size.
.TP
.B Dimension-based or pixel-based:
In dimension-based backends, distances is measured up in physical units
like fuckin inches or centimeters. In pixel-based backends, distances are
measured up in pixel units, n' you can put dat on yo' toast. Da \fB-r\fP option only works for
dimension-based backends, n' tha \fB-x\fP option only works for
pixel-based backends. Currently, tha DXF, PGM, Gimppath, n' GeoJSON
backendz is pixel-based, n' tha remainin backendz are
dimension-based. Y'all KNOW dat shit, muthafucka! Currently, all pixel-based backendz are
variable-sized.
.TP
.B Single-page or multi-page:
Single-page backendz can only accept a single image. Multi-page backendz can
accept multiple images, typically one per page of output. Currently, the
PostScript (PS), PDF, PDFPage, n' PGM backendz is multi-page, and
the remainin backendz is single-page. Note dat multiple input
images can be read up in two ways: from multiple input filez (with the
\fB-o\fP option), or from a single input file dat holdz several
concatenated images.
.PD
.SH "COMPILE TIME CONFIGURATION"

Certain aspectz of tha behavior of \fBpotrace\fP can be configured at
compile time by passin tha followin options ta tha ./configure
script.
.TP 5
.B --disable-zlib
compile \fBpotrace\fP without tha zlib compression library. This means
PostScript level 3 compression aint gonna be available.
.TP
.B --enable-metric
compile \fBpotrace\fP wit centimetas as tha default unit instead of
inches. 
.TP
.B --enable-a4
compile \fBpotrace\fP wit A4 as tha default page size.
.PD
.SH "EXIT STATUS"

Da exit status is 0 on successful completion, 1 if tha command line
was invalid, n' 2 on any other error. Shiiit, dis aint no joke. 
.SH VERSION

1.11
.SH AUTHOR

Peta Selinger <selinger at users.sourceforge.net>

Please peep tha file AUTHORS fo' a gangbangin' full list of other contributors.
.SH "TECHNICAL DOCUMENTATION"

For a thugged-out detailed technical description of tha \fBpotrace\fP algorithm,
see tha file potrace.pdf, which be available from tha \fBpotrace\fP
web crib. For shiznit on tha Potrace library API, peep potracelib.pdf. 
.SH "WEB SITE AND SUPPORT"

Da sickest fuckin version of \fBpotrace\fP be available from
http://potrace.sourceforge.net/. This joint also gotz nuff a list of
frequently axed thangs, as well as shiznit on how tha fuck ta obtain
support.
.SH "SEE ALSO"

\fBmkbitmap\fP(1)
.SH COPYRIGHT

Copyright (C) 2001-2013 Peta Selinger

This program is free software; you can redistribute it and/or modify
it under tha termz of tha GNU General Public License as published by
the Jacked Software Foundation; either version 2 of tha License, or
(at yo' option) any lata version.

This program is distributed up in tha hope dat it is ghon be useful,
but WITHOUT ANY WARRANTY; without even tha implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License fo' mo' details.

Yo ass should have received a cold-ass lil copy of tha GNU General Public License
along wit dis program; if not, write ta tha Jacked Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA. Right back up in yo muthafuckin ass. See also http://www.gnu.org/.
