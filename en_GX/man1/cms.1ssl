.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CMS 1"
.TH CMS 1 "2015-01-13" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
cms \- CMS utility
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBopenssl\fR \fBcms\fR
[\fB\-encrypt\fR]
[\fB\-decrypt\fR]
[\fB\-sign\fR]
[\fB\-verify\fR]
[\fB\-cmsout\fR]
[\fB\-resign\fR]
[\fB\-data_create\fR]
[\fB\-data_out\fR]
[\fB\-digest_create\fR]
[\fB\-digest_verify\fR]
[\fB\-compress\fR]
[\fB\-uncompress\fR]
[\fB\-EncryptedData_encrypt\fR]
[\fB\-sign_receipt\fR]
[\fB\-verify_receipt receipt\fR]
[\fB\-in filename\fR]
[\fB\-inform SMIME|PEM|DER\fR]
[\fB\-rctform SMIME|PEM|DER\fR]
[\fB\-out filename\fR]
[\fB\-outform SMIME|PEM|DER\fR]
[\fB\-stream \-indef \-noindef\fR]
[\fB\-noindef\fR]
[\fB\-content filename\fR]
[\fB\-text\fR]
[\fB\-noout\fR]
[\fB\-print\fR]
[\fB\-CAfile file\fR]
[\fB\-CApath dir\fR]
[\fB\-trusted_first\fR]
[\fB\-md digest\fR]
[\fB\-[cipher]\fR]
[\fB\-nointern\fR]
[\fB\-no_signer_cert_verify\fR]
[\fB\-nocerts\fR]
[\fB\-noattr\fR]
[\fB\-nosmimecap\fR]
[\fB\-binary\fR]
[\fB\-nodetach\fR]
[\fB\-certfile file\fR]
[\fB\-certsout file\fR]
[\fB\-signer file\fR]
[\fB\-recip file\fR]
[\fB\-keyid\fR]
[\fB\-receipt_request_all \-receipt_request_first\fR]
[\fB\-receipt_request_from emailaddress\fR]
[\fB\-receipt_request_to emailaddress\fR]
[\fB\-receipt_request_print\fR]
[\fB\-secretkey key\fR]
[\fB\-secretkeyid id\fR]
[\fB\-econtent_type type\fR]
[\fB\-inkey file\fR]
[\fB\-passin arg\fR]
[\fB\-rand file(s)\fR]
[\fBcert.pem...\fR]
[\fB\-to addr\fR]
[\fB\-from addr\fR]
[\fB\-subject subj\fR]
[cert.pem]...
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \fBcms\fR command handlez S/MIME v3.1 mail. Well shiiiit, it can encrypt, decrypt, sign and
verify, compress n' uncompress S/MIME lyrics.
.SH "COMMAND OPTIONS"
.IX Header "COMMAND OPTIONS"
There is fourteen operation options dat set tha type of operation ta be
performed. Y'all KNOW dat shit, muthafucka! Da meanin of tha other options varies accordin ta tha operation
type.
.IP "\fB\-encrypt\fR" 4
.IX Item "-encrypt"
encrypt mail fo' tha given recipient certificates. Input file is tha message
to be encrypted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da output file is tha encrypted mail up in \s-1MIME\s0 format. The
actual \s-1CMS\s0 type is <B>EnvelopedData<B>.
.IP "\fB\-decrypt\fR" 4
.IX Item "-decrypt"
decrypt mail rockin tha supplied certificate n' private key. Expects an
encrypted mail message up in \s-1MIME\s0 format fo' tha input file. Da decrypted mail
is freestyled ta tha output file.
.IP "\fB\-sign\fR" 4
.IX Item "-sign"
sign mail rockin tha supplied certificate n' private key. Input file is
the message ta be signed. Y'all KNOW dat shit, muthafucka! Da signed message up in \s-1MIME\s0 format is written
to tha output file.
.IP "\fB\-verify\fR" 4
.IX Item "-verify"
verify signed mail. Expects a signed mail message on input n' outputs
the signed data. Both clear text n' opaque signin is supported.
.IP "\fB\-cmsout\fR" 4
.IX Item "-cmsout"
takes a input message n' writes up a \s-1PEM\s0 encoded \s-1CMS\s0 structure.
.IP "\fB\-resign\fR" 4
.IX Item "-resign"
resign a message: take a existin message n' one or mo' freshly smoked up signers.
.IP "\fB\-data_create\fR" 4
.IX Item "-data_create"
Smoke a \s-1CMS \s0\fBData\fR type.
.IP "\fB\-data_out\fR" 4
.IX Item "-data_out"
\&\fBData\fR type n' output tha content.
.IP "\fB\-digest_create\fR" 4
.IX Item "-digest_create"
Smoke a \s-1CMS \s0\fBDigestedData\fR type.
.IP "\fB\-digest_verify\fR" 4
.IX Item "-digest_verify"
Verify a \s-1CMS \s0\fBDigestedData\fR type n' output tha content.
.IP "\fB\-compress\fR" 4
.IX Item "-compress"
Smoke a \s-1CMS \s0\fBCompressedData\fR type. OpenSSL must be compiled wit \fBzlib\fR
support fo' dis option ta work, otherwise it will output a error.
.IP "\fB\-uncompress\fR" 4
.IX Item "-uncompress"
Uncompress a \s-1CMS \s0\fBCompressedData\fR type n' output tha content. OpenSSL must be
compiled wit \fBzlib\fR support fo' dis option ta work, otherwise it will
output a error.
.IP "\fB\-EncryptedData_encrypt\fR" 4
.IX Item "-EncryptedData_encrypt"
Encrypt suppled content rockin supplied symmetric key n' algorithm rockin a \s-1CMS
\&\s0\fBEncrytedData\fR type n' output tha content.
.IP "\fB\-sign_receipt\fR" 4
.IX Item "-sign_receipt"
Generate n' output a signed receipt fo' tha supplied message. Da input 
message \fBmust\fR contain a signed receipt request. Functionalitizzle is otherwise
similar ta tha \fB\-sign\fR operation.
.IP "\fB\-verify_receipt receipt\fR" 4
.IX Item "-verify_receipt receipt"
Verify a signed receipt up in filename \fBreceipt\fR. Da input message \fBmust\fR 
contain tha original gangsta receipt request. Functionalitizzle is otherwise similar
to tha \fB\-verify\fR operation.
.IP "\fB\-in filename\fR" 4
.IX Item "-in filename"
the input message ta be encrypted or signed or tha message ta be decrypted
or verified.
.IP "\fB\-inform SMIME|PEM|DER\fR" 4
.IX Item "-inform SMIME|PEM|DER"
this specifies tha input format fo' tha \s-1CMS\s0 structure. Da default
is \fB\s-1SMIME\s0\fR which readz a S/MIME format message. \fB\s-1PEM\s0\fR n' \fB\s-1DER\s0\fR
format chizzle dis ta expect \s-1PEM\s0 n' \s-1DER\s0 format \s-1CMS\s0 structures
instead. Y'all KNOW dat shit, muthafucka! This currently only affects tha input format of tha \s-1CMS\s0
structure, if no \s-1CMS\s0 structure is bein input (for example with
\&\fB\-encrypt\fR or \fB\-sign\fR) dis option has no effect.
.IP "\fB\-rctform SMIME|PEM|DER\fR" 4
.IX Item "-rctform SMIME|PEM|DER"
specify tha format fo' a signed receipt fo' use wit tha \fB\-receipt_verify\fR
operation.
.IP "\fB\-out filename\fR" 4
.IX Item "-out filename"
the message text dat has been decrypted or verified or tha output \s-1MIME\s0
format message dat has been signed or verified.
.IP "\fB\-outform SMIME|PEM|DER\fR" 4
.IX Item "-outform SMIME|PEM|DER"
this specifies tha output format fo' tha \s-1CMS\s0 structure. Da default
is \fB\s-1SMIME\s0\fR which writes a S/MIME format message. \fB\s-1PEM\s0\fR n' \fB\s-1DER\s0\fR
format chizzle dis ta write \s-1PEM\s0 n' \s-1DER\s0 format \s-1CMS\s0 structures
instead. Y'all KNOW dat shit, muthafucka! This currently only affects tha output format of tha \s-1CMS\s0
structure, if no \s-1CMS\s0 structure is bein output (for example with
\&\fB\-verify\fR or \fB\-decrypt\fR) dis option has no effect.
.IP "\fB\-stream \-indef \-noindef\fR" 4
.IX Item "-stream -indef -noindef"
the \fB\-stream\fR n' \fB\-indef\fR options is equivalent n' enable streamin I/O
for encodin operations. This permits single pass processin of data without
the need ta hold tha entire contents up in memory, potentially supportin hella
pimpin' files. Right back up in yo muthafuckin ass. Streamin be automatically set fo' S/MIME signin wit detached
data if tha output format is \fB\s-1SMIME\s0\fR it is currently off by default fo' all
other operations.
.IP "\fB\-noindef\fR" 4
.IX Item "-noindef"
disable streamin I/O where it would produce n' indefinite length constructed
encoding. This option currently has no effect. In future streamin will be
enabled by default on all relevant operations n' dis option will disable dat shit.
.IP "\fB\-content filename\fR" 4
.IX Item "-content filename"
This specifies a gangbangin' file containin tha detached content, dis is only
useful wit tha \fB\-verify\fR command. Y'all KNOW dat shit, muthafucka! This is only usable if tha \s-1CMS\s0
structure is rockin tha detached signature form where tha content is
not included. Y'all KNOW dat shit, muthafucka! This option will override any content if tha input format
is S/MIME n' it uses tha multipart/signed \s-1MIME\s0 content type.
.IP "\fB\-text\fR" 4
.IX Item "-text"
this option addz plain text (text/plain) \s-1MIME\s0 headaz ta tha supplied
message if encryptin or signing. If decryptin or verifyin it strips
off text headers: if tha decrypted or verified message aint of \s-1MIME \s0
type text/plain then a error occurs.
.IP "\fB\-noout\fR" 4
.IX Item "-noout"
for tha \fB\-cmsout\fR operation do not output tha parsed \s-1CMS\s0 structure. This
is useful when combined wit tha \fB\-print\fR option or if tha syntax of tha \s-1CMS\s0
structure is bein checked.
.IP "\fB\-print\fR" 4
.IX Item "-print"
for tha \fB\-cmsout\fR operation print up all fieldz of tha \s-1CMS\s0 structure. This
is mainly useful fo' testin purposes.
.IP "\fB\-CAfile file\fR" 4
.IX Item "-CAfile file"
a file containin trusted \s-1CA\s0 certificates, only used wit \fB\-verify\fR.
.IP "\fB\-CApath dir\fR" 4
.IX Item "-CApath dir"
a directory containin trusted \s-1CA\s0 certificates, only used with
\&\fB\-verify\fR. This directory must be a standard certificate directory: that
is a hash of each subject name (usin \fBx509 \-hash\fR) should be linked
to each certificate.
.IP "\fB\-trusted_first\fR" 4
.IX Item "-trusted_first"
Use certificates up in \s-1CA\s0 file or \s-1CA\s0 directory before untrusted certificates
from tha message when buildin tha trust chain ta verify certificates.
This is mainly useful up in environments wit Bridge \s-1CA\s0 or Cross-Certified CAs.
.IP "\fB\-md digest\fR" 4
.IX Item "-md digest"
digest algorithm ta use when signin or resigning. If not present then the
default digest algorithm fo' tha signin key is ghon be used (usually \s-1SHA1\s0).
.IP "\fB\-[cipher]\fR" 4
.IX Item "-[cipher]"
the encryption algorithm ta use. For example triple \s-1DES \s0(168 bits) \- \fB\-des3\fR
or 256 bit \s-1AES \- \s0\fB\-aes256\fR fo' realz. Any standard algorithm name (as used by the
\&\fIEVP_get_cipherbyname()\fR function) can also be used preceded by a thugged-out dash, fo' 
example \fB\-aes_128_cbc\fR. Right back up in yo muthafuckin ass. See \fBenc\fR fo' a list of ciphers
supported by yo' version of OpenSSL.
.Sp
If not specified triple \s-1DES\s0 is used. Y'all KNOW dat shit, muthafucka! Only used wit \fB\-encrypt\fR n' 
\&\fB\-EncryptedData_create\fR commands.
.IP "\fB\-nointern\fR" 4
.IX Item "-nointern"
when verifyin a message normally certificates (if any) included in
the message is searched fo' tha signin certificate. With dis option
only tha certificates specified up in tha \fB\-certfile\fR option is used.
Da supplied certificates can still be used as untrusted CAs however.
.IP "\fB\-no_signer_cert_verify\fR" 4
.IX Item "-no_signer_cert_verify"
do not verify tha signers certificate of a signed message.
.IP "\fB\-nocerts\fR" 4
.IX Item "-nocerts"
when signin a message tha signerz certificate is normally included
with dis option it is excluded. Y'all KNOW dat shit, muthafucka! This will reduce tha size of the
signed message but tha verifier must gotz a cold-ass lil copy of tha signers certificate
available locally (passed rockin tha \fB\-certfile\fR option fo' example).
.IP "\fB\-noattr\fR" 4
.IX Item "-noattr"
normally when a message is signed a set of attributes is included which
include tha signin time n' supported symmetric algorithms. With this
option they is not included.
.IP "\fB\-nosmimecap\fR" 4
.IX Item "-nosmimecap"
exclude tha list of supported algorithms from signed attributes, other options
like fuckin signin time n' content type is still included.
.IP "\fB\-binary\fR" 4
.IX Item "-binary"
normally tha input message is converted ta \*(L"canonical\*(R" format which is
effectively rockin \s-1CR\s0 n' \s-1LF\s0 as end of line: as required by tha S/MIME
specification. I aint talkin' bout chicken n' gravy biatch. When dis option is present no translation occurs. This
is useful when handlin binary data which may not be up in \s-1MIME\s0 format.
.IP "\fB\-nodetach\fR" 4
.IX Item "-nodetach"
when signin a message use opaque signing: dis form is mo' resistant
to translation by mail relays but it cannot be read by mail agents that
do not support S/MIME.  Without dis option cleartext signin with
the \s-1MIME\s0 type multipart/signed is used.
.IP "\fB\-certfile file\fR" 4
.IX Item "-certfile file"
allows additionizzle certificates ta be specified. Y'all KNOW dat shit, muthafucka! When signin these will
be included wit tha message. When verifyin these is ghon be searched for
the signers certificates. Da certificates should be up in \s-1PEM\s0 format.
.IP "\fB\-certsout file\fR" 4
.IX Item "-certsout file"
any certificates contained up in tha message is freestyled ta \fBfile\fR.
.IP "\fB\-signer file\fR" 4
.IX Item "-signer file"
a signin certificate when signin or resignin a message, dis option can be
used multiple times if mo' than one signer is required. Y'all KNOW dat shit, muthafucka! If a message is being
verified then tha signers certificates is ghon be freestyled ta dis file if the
verification was successful.
.IP "\fB\-recip file\fR" 4
.IX Item "-recip file"
the recipients certificate when decryptin a message. This certificate
must match one of tha recipientz of tha message or a error occurs.
.IP "\fB\-keyid\fR" 4
.IX Item "-keyid"
use subject key identifier ta identify certificates instead of issuer name and
serial number n' shit. Da supplied certificate \fBmust\fR include a subject key
identifier extension. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Supported by \fB\-sign\fR n' \fB\-encrypt\fR options.
.IP "\fB\-receipt_request_all \-receipt_request_first\fR" 4
.IX Item "-receipt_request_all -receipt_request_first"
for \fB\-sign\fR option include a signed receipt request. Indicate requests should
be provided by all receipient or first tier recipients (those mailed directly
and not from a mailin list). Ignored it \fB\-receipt_request_from\fR is included.
.IP "\fB\-receipt_request_from emailaddress\fR" 4
.IX Item "-receipt_request_from emailaddress"
for \fB\-sign\fR option include a signed receipt request fo' realz. Add a explicit email
address where receipts should be supplied.
.IP "\fB\-receipt_request_to emailaddress\fR" 4
.IX Item "-receipt_request_to emailaddress"
Add a explicit email address where signed receipts should be busted to. This 
option \fBmust\fR but supplied if a signed receipt it requested.
.IP "\fB\-receipt_request_print\fR" 4
.IX Item "-receipt_request_print"
For tha \fB\-verify\fR operation print up tha contentz of any signed receipt
requests.
.IP "\fB\-secretkey key\fR" 4
.IX Item "-secretkey key"
specify symmetric key ta use. Da key must be supplied up in hex format n' be
consistent wit tha algorithm used. Y'all KNOW dat shit, muthafucka! Supported by tha \fB\-EncryptedData_encrypt\fR
\&\fB\-EncrryptedData_decrypt\fR, \fB\-encrypt\fR n' \fB\-decrypt\fR options. When used
with \fB\-encrypt\fR or \fB\-decrypt\fR tha supplied key is used ta wrap or unwrap the
content encryption key rockin a \s-1AES\s0 key up in tha \fBKEKRecipientInfo\fR type.
.IP "\fB\-secretkeyid id\fR" 4
.IX Item "-secretkeyid id"
the key identifier fo' tha supplied symmetric key fo' \fBKEKRecipientInfo\fR type.
This option \fBmust\fR be present if tha \fB\-secretkey\fR option is used with
\&\fB\-encrypt\fR. With \fB\-decrypt\fR operations tha \fBid\fR is used ta locate the
relevant key if it aint supplied then a attempt is used ta decrypt any
\&\fBKEKRecipientInfo\fR structures.
.IP "\fB\-econtent_type type\fR" 4
.IX Item "-econtent_type type"
set tha encapsulated content type ta \fBtype\fR if not supplied tha \fBData\fR type
is used. Y'all KNOW dat shit, muthafucka! Da \fBtype\fR argument can be any valid \s-1OID\s0 name up in either text or
numerical format.
.IP "\fB\-inkey file\fR" 4
.IX Item "-inkey file"
the private key ta use when signin or decrypting. This must match the
correspondin certificate. If dis option aint specified then the
private key must be included up in tha certificate file specified with
the \fB\-recip\fR or \fB\-signer\fR file. When signin dis option can be used
multiple times ta specify successive keys.
.IP "\fB\-passin arg\fR" 4
.IX Item "-passin arg"
the private key password source. For mo' shiznit bout tha format of \fBarg\fR
see tha \fB\s-1PASS PHRASE ARGUMENTS\s0\fR section up in \fIopenssl\fR\|(1).
.IP "\fB\-rand file(s)\fR" 4
.IX Item "-rand file(s)"
a file or filez containin random data used ta seed tha random number
generator, or a \s-1EGD\s0 socket (see \fIRAND_egd\fR\|(3)).
Multiple filez can be specified separated by a OS-dependent character.
Da separator is \fB;\fR fo' MS-Windows, \fB,\fR fo' OpenVMS, n' \fB:\fR for
all others.
.IP "\fBcert.pem...\fR" 4
.IX Item "cert.pem..."
one or mo' certificatez of message recipients: used when encrypting
a message.
.IP "\fB\-to, \-from, \-subject\fR" 4
.IX Item "-to, -from, -subject"
the relevant mail headers. These is included outside tha signed
portion of a message so they may be included manually. If signing
then nuff S/MIME mail clients check tha signers certificatez email
address matches dat specified up in tha From: address.
.IP "\fB\-purpose, \-ignore_critical, \-issuer_checks, \-crl_check, \-crl_check_all, \-policy_check, \-extended_crl, \-x509_strict, \-policy \-check_ss_sig\fR" 4
.IX Item "-purpose, -ignore_critical, -issuer_checks, -crl_check, -crl_check_all, -policy_check, -extended_crl, -x509_strict, -policy -check_ss_sig"
Set various certificate chain valiadizzle option. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See the
\&\fBverify\fR manual page fo' details.
.SH "NOTES"
.IX Header "NOTES"
Da \s-1MIME\s0 message must be busted without any blank lines between the
headaz n' tha output. Right back up in yo muthafuckin ass. Some mail programs will automatically add
a blank line. Pipin tha mail directly ta sendmail is one way to
achieve tha erect format.
.PP
Da supplied message ta be signed or encrypted must include the
necessary \s-1MIME\s0 headaz or nuff S/MIME clients aint gonna display it
properly (if at all). Yo ass can use tha \fB\-text\fR option ta automatically
add plain text headers.
.PP
A \*(L"signed n' encrypted\*(R" message is one where a signed message is
then encrypted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This can be produced by encryptin a already signed
message: peep tha examplez section.
.PP
This version of tha program only allows one signer per message but it
will verify multiple signers on received lyrics. Right back up in yo muthafuckin ass. Some S/MIME clients
choke if a message gotz nuff multiple signers. Well shiiiit, it is possible ta sign
lyrics \*(L"in parallel\*(R" by signin a already signed message.
.PP
Da options \fB\-encrypt\fR n' \fB\-decrypt\fR reflect common usage up in S/MIME
clients, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Strictly bustin lyrics these process \s-1CMS\s0 enveloped data: \s-1CMS\s0
encrypted data is used fo' other purposes.
.PP
Da \fB\-resign\fR option uses a existin message digest when addin a new
signer n' shit. This means dat attributes must be present up in at least one existing
signer rockin tha same message digest or dis operation will fail.
.PP
Da \fB\-stream\fR n' \fB\-indef\fR options enable experimenstrual streamin I/O support.
As a result tha encodin is \s-1BER\s0 rockin indefinite length constructed encoding
and no longer \s-1DER.\s0 Streamin is supported fo' tha \fB\-encrypt\fR operation n' the
\&\fB\-sign\fR operation if tha content aint detached.
.PP
Streamin be always used fo' tha \fB\-sign\fR operation wit detached data but
since tha content is no longer part of tha \s-1CMS\s0 structure tha encoding
remains \s-1DER.\s0
.SH "EXIT CODES"
.IX Header "EXIT CODES"
.ie n .IP "0" 4
.el .IP "\f(CW0\fR" 4
.IX Item "0"
the operation was straight-up successfully.
.ie n .IP "1" 4
.el .IP "\f(CW1\fR" 4
.IX Item "1"
an error occurred parsin tha command options.
.ie n .IP "2" 4
.el .IP "\f(CW2\fR" 4
.IX Item "2"
one of tha input filez could not be read.
.ie n .IP "3" 4
.el .IP "\f(CW3\fR" 4
.IX Item "3"
an error occurred bustin tha \s-1CMS\s0 file or when readin tha \s-1MIME\s0
message.
.ie n .IP "4" 4
.el .IP "\f(CW4\fR" 4
.IX Item "4"
an error occurred decryptin or verifyin tha message.
.ie n .IP "5" 4
.el .IP "\f(CW5\fR" 4
.IX Item "5"
the message was verified erectly but a error occurred freestylin out
the signers certificates.
.SH "COMPATIBILITY WITH PKCS#7 format."
.IX Header "COMPATIBILITY WITH PKCS#7 format."
Da \fBsmime\fR utilitizzle can only process tha olda \fBPKCS#7\fR format. Da \fBcms\fR
utilitizzle supports Cryptographic Message Syntax format. Use of some features
will result up in lyrics which cannot be processed by applications which only
support tha olda format. These is detailed below.
.PP
Da use of tha \fB\-keyid\fR option wit \fB\-sign\fR or \fB\-encrypt\fR.
.PP
Da \fB\-outform \s-1PEM\s0\fR option uses different headers.
.PP
Da \fB\-compress\fR option.
.PP
Da \fB\-secretkey\fR option when used wit \fB\-encrypt\fR.
.PP
Additionally tha \fB\-EncryptedData_create\fR n' \fB\-data_create\fR type cannot
be processed by tha olda \fBsmime\fR command.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Smoke a cold-ass lil cleartext signed message:
.PP
.Vb 2
\& openssl cms \-sign \-in message.txt \-text \-out mail.msg \e
\&        \-signer mycert.pem
.Ve
.PP
Smoke a opaque signed message
.PP
.Vb 2
\& openssl cms \-sign \-in message.txt \-text \-out mail.msg \-nodetach \e
\&        \-signer mycert.pem
.Ve
.PP
Smoke a signed message, include some additionizzle certificates and
read tha private key from another file:
.PP
.Vb 2
\& openssl cms \-sign \-in in.txt \-text \-out mail.msg \e
\&        \-signer mycert.pem \-inkey mykey.pem \-certfile mycerts.pem
.Ve
.PP
Smoke a signed message wit two signers, use key identifier:
.PP
.Vb 2
\& openssl cms \-sign \-in message.txt \-text \-out mail.msg \e
\&        \-signer mycert.pem \-signer othercert.pem \-keyid
.Ve
.PP
Send a signed message under Unix directly ta sendmail, includin headers:
.PP
.Vb 3
\& openssl cms \-sign \-in in.txt \-text \-signer mycert.pem \e
\&        \-from steve@openssl.org \-to one of mah thugs@somewhere \e
\&        \-subject "Signed message" | sendmail one of mah thugs@somewhere
.Ve
.PP
Verify a message n' extract tha signerz certificate if successful:
.PP
.Vb 1
\& openssl cms \-verify \-in mail.msg \-signer user.pem \-out signedtext.txt
.Ve
.PP
Send encrypted mail rockin triple \s-1DES:\s0
.PP
.Vb 3
\& openssl cms \-encrypt \-in in.txt \-from steve@openssl.org \e
\&        \-to one of mah thugs@somewhere \-subject "Encrypted message" \e
\&        \-des3 user.pem \-out mail.msg
.Ve
.PP
Sign n' encrypt mail:
.PP
.Vb 4
\& openssl cms \-sign \-in ml.txt \-signer my.pem \-text \e
\&        | openssl cms \-encrypt \-out mail.msg \e
\&        \-from steve@openssl.org \-to one of mah thugs@somewhere \e
\&        \-subject "Signed n' Encrypted message" \-des3 user.pem
.Ve
.PP
Note: tha encryption command do not include tha \fB\-text\fR option cuz the
message bein encrypted already has \s-1MIME\s0 headers.
.PP
Decrypt mail:
.PP
.Vb 1
\& openssl cms \-decrypt \-in mail.msg \-recip mycert.pem \-inkey key.pem
.Ve
.PP
Da output from Netscape form signin be a PKCS#7 structure wit the
detached signature format. Yo ass can use dis program ta verify the
signature by line rappin bout da base64 encoded structure n' surrounding
it with:
.PP
.Vb 2
\& \-\-\-\-\-BEGIN PKCS7\-\-\-\-\-
\& \-\-\-\-\-END PKCS7\-\-\-\-\-
.Ve
.PP
and rockin tha command,
.PP
.Vb 1
\& openssl cms \-verify \-inform PEM \-in signature.pem \-content content.txt
.Ve
.PP
alternatively you can base64 decode tha signature n' use
.PP
.Vb 1
\& openssl cms \-verify \-inform DER \-in signature.der \-content content.txt
.Ve
.PP
Smoke a encrypted message rockin 128 bit Camellia:
.PP
.Vb 1
\& openssl cms \-encrypt \-in plain.txt \-camellia128 \-out mail.msg cert.pem
.Ve
.PP
Add a signer ta a existin message:
.PP
.Vb 1
\& openssl cms \-resign \-in mail.msg \-signer newsign.pem \-out mail2.msg
.Ve
.SH "BUGS"
.IX Header "BUGS"
Da \s-1MIME\s0 parser aint straight-up def: it seems ta handle most lyrics dat I've
thrown at it but it may choke on others.
.PP
Da code currently will only write up tha signerz certificate ta a gangbangin' file: if
the signer has a separate encryption certificate dis must be manually
extracted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. There should be some heuristic dat determines tha erect
encryption certificate.
.PP
Ideally a thugged-out database should be maintained of a cold-ass lil certificates fo' each email
address.
.PP
Da code don't currently take note of tha permitted symmetric encryption
algorithms as supplied up in tha SMIMECapabilitizzles signed attribute. dis means the
user has ta manually include tha erect encryption algorithm. Well shiiiit, it should store
the list of permitted ciphers up in a thugged-out database n' only use them.
.PP
No revocation checkin is done on tha signerz certificate.
.SH "HISTORY"
.IX Header "HISTORY"
Da use of multiple \fB\-signer\fR options n' tha \fB\-resign\fR command was first
added up in OpenSSL 1.0.0
