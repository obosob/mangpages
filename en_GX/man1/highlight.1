.TH highlight 1 "2013-05-27" "Andre Simon" "user documentation"

.SH NAME
Highlight - a universal sourcecode ta formatted text converter

.SH SYNOPSIS
.B highlight
[OPTIONS]... [FILES]...

.SH DESCRIPTION
.B Highlight
converts sourcecode ta HTML, XHTML, RTF, ODT, LaTeX, TeX, BBCode, SVG, XTERM or ANSI escape sequences.
There is nuff muthafuckin colour themes available.
.B Highlight
recognizes keywords, numbers, strings, comments, symbols n' preprocessor directives.
It supports bout 160 programmin languages, which is defined up in Lua scripts.

.PP
It aint nuthin but easily possible ta enhizzle highlightz database of programmin languages n' colour themes.
See tha README file fo' details.
.SH General options
.IP "-B, --batch-recursive=<wildcard>"
convert all filez matchin tha wildcard (uses recursive search)
.IP "-D, --data-dir=<path>"
set path ta highlight data directory (deprecated)
.IP "--config-file=<file>"
set path ta a lang or theme file
.IP "-h, --help"
print dis help
.IP "-i, --input=<file>"
name of input file
.IP "-o, --output=<file>"
name of output file
.IP "-d, --outdir=<output directory>"
name of output directory
.IP "-P, --progress"
print progress bar up in batch mode
.IP "-S, --syntax=<type>"
set type of source code, necessary if input file suffix is missing
.IP "-v, --verbose"
print debug info ta stderr
.IP "-p, --list-langs"
list installed language definitions (deprecated)
.IP "-q, --quiet"
supress progress info up in batch mode
.IP "-w, --list-themes"
list installed themes (deprecated)
.IP "--force"
generate output if input syntax is unknown
.IP "--list-scripts=<type>"
list installed scripts 
<type>=[langs, themes, plugins]
.IP "--plug-in=<script>"
execute Lua plug-in script; repeat option ta apply multiple plug-ins
.IP "--plug-in-read"
set input file fo' a plug-in (e.g. 'tags')
.IP "--print-config"
print path configuration
.IP "--print-style"
print styleshizzle only (see --style-outfile)
.IP "--skip=<list>"
ignore listed unknown file types (Example: --skip='bak;c~;h~')
.IP "--start-nested=<lang>"
define nested language which starts input without openin delimiter
.IP "--validate-input"
test if input be a valid text file
.IP "--version"
print version n' copyright info

.SH Output formattin options
.IP "-O, --out-format=<format>"
output file up in given format
<format>=[html, xhtml, latex, tex, rtf, odt, ansi, xterm256, bbcode, svg]
.IP "-c, --style-outfile=<file>"
name of steez definizzle file or output ta stdout, if "stdout" is given as file argument
.IP "-T, --doc-title"
document title
.IP "-e, --style-infile=<file>"
name of file ta be included up in style-outfile
.IP "-f, --fragment"
omit header n' foota of tha output document
.IP "-F, --reformat=<style>"
reformat output up in given style.
<style>=[allman, banner, gnu, java, kr, linux, stroustrup, whitesmith, google, pico, lisp]
.IP "-I, --include-style"
include steez definizzle up in output
.IP "-J, --line-length=<num>"
line length before wrappin (see -W, -V)
.IP "-j, --line-number-length=<num>"
line number length incl. left padding
.IP "-k, --font=<font>"
set font (specific ta output format)
.IP "-K, --font-size=<num?>"
set font size (specific ta output format)
.IP "-l, --line-numbers"
print line numbers up in output file
.IP "-m, --line-number-start=<cnt>"
start line numberin wit cnt (assumes -l)
.IP "-s, --style=<style name>"
set highlightin steez (see --list-themes)
.IP "-t  --replace-tabs=<num>"
replace tabs by num spaces
.IP "-u, --encoding=<enc>"
set output encodin which matches input file encoding; omit encodin shiznit if set ta "NONE"
.IP "-V, --wrap-simple"
wrap long lines without indentin function parametas n' statements
.IP "-W, --wrap"
wrap long lines (use wit caution)
.IP "-z, --zeroes"
fill leadin space of line numbers wit zeroes
.IP "--kw-case=<upper|lower|capitalize>"
output all keywordz up in given case if language aint case sensitive
.IP "--delim-cr"
set CR as end-of-line delimita (MacOS 9)
.IP "--no-trailing-nl"
omit trailin newline
.IP "--wrap-no-numbers"
omit line numberz of wrapped lines (assumes -l)

.SH "(X)HTML OPTIONS"
.IP "-a, --anchors"
attach anchors ta line numbers (HTML only)
.IP "-y, --anchor-prefix=<str>"
set anchor name prefix
.IP "-N, --anchor-filename"
use input file name as anchor name
.IP "-C, --print-index"
print index file wit links ta all output files
.IP "-n, --ordered-list"
print lines as ordered list items
.IP "--class-name=<str>"
set CSS class name prefix; omit class name if set ta "NONE"
.IP "--inline-css"
output CSS within each tag (verbose output)
.IP "--enclose-pre"
enclose fragmented output wit pre tag (assumes -f)

.SH "LaTeX OPTIONS"
.IP "-b, --babel"
disable Muthafuckal package shorthands
.IP "-r, --replace-quotes"
replace double quotes by \\dq
.IP "--pretty-symbols"
improve appearizzle of brackets n' other symbols

.SH "RTF OPTIONS"
.IP "-x, --page-size=<size>"
set page size, <size>=[a3, a4, a5, b4, b5, b6, letter]
.IP "--char-styles"
include characta stylesheets

.SH "SVG OPTIONS"
.IP "--height=<h>"
set image height (units allowed)
.IP "--width=<w>"
set image size (see --height)

.SH "GNU SOURCE-HIGHLIGHT COMPATIBILITY OPTIONS"
.IP "--doc"
create stand ridin' solo document
.IP "--no-doc"
cancel tha --doc option
.IP "--css=filename"
the external steez shizzle filename
.IP "--src-lang=STRING"
source language
.IP " -t, --tab=INT"
specify tab length
.IP " -n, --line-number[=0]"
number all output lines, optionizzle padding
.IP "--line-number-ref[=p]"
number all output lines n' generate a anchor, made of tha specified prefix
 p + tha line number  (default='line')
.IP "--output-dir=path"
 output directory
.IP "--failsafe"
if no language definizzle is found fo' the
input, it is simply copied ta tha output

.PP
If no in- or output filez is specified, stdin n' stdout is ghon be used fo'  in- or output.
HTML is ghon be generated unless a other output format is given.
Style definitions is stored up in highlight.css (HTML, XHTML, SVG) or
highlight.sty (LaTeX, TeX) if neither -c nor -I is given.
Reformattin code (-F)  will only work wit C, C++, C# n' Java input files.
.SH BUGS
Da wrappin options might cause faulty highlightin of long single line comments.
.SH FILES
Da configuration filez is stored in
.I /usr/share/highlight/.
Language definitions, themes n' plugins is located up in subdirectories.
.PP
Documentation filez is stored in
.I /usr/share/doc/highlight/
, configuration filez in
.I /etc/highlight/.
.PP
See README how tha fuck ta install own scripts up in tha home directory.
.SH Examples
Single file conversion:
.PP
highlight -o hello.html -i hello.c
.PP
highlight -o hello.html hello.c
.PP
highlight -o hello.html -S c < hello.c
.PP
highlight -S c < hello.c > hello.html
.PP
Note dat a gangbangin' file highlight.css is pimped up in tha current directory.
.PP
Batch file processing:

highlight --out-format=xhtml  -B '*.cpp' -d /home/you/html_code/
.PP
converts all *.cpp filez up in tha current directory n' its subdirectories to
xhtml files, n' stores tha output up in /home/you/html_code.
.PP
highlight --out-format=latex  * -d /home/you/latex_code/
.PP
converts all filez ta LaTeX, stored up in /home/you/latex_code/.
.PP
Use --quiet ta improve performizzle of batch file processin (recommended fo' usage up in shell scripts).
.PP
Use highlight --out-format=xterm256 <yourfile> | less -R ta display a source file up in a terminal.

.SH AUTHORS
Andre Semen <as@andre-simon.de>
.SH SEE ALSO
README file n' highlight webpage at http://www.andre-simon.de/.
