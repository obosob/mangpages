.TH "NOSETESTS" "1" "April 08, 2013" "1.3" "nose"
.SH NAME
nosetests \- Nicer testin fo' Python
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" Man page generated from reStructuredText.
.
.SH NICER TESTING FOR PYTHON
.SS SYNOPSIS
.INDENT 0.0
.INDENT 3.5
nosetests [options] [names]
.UNINDENT
.UNINDENT
.SS DESCRIPTION
.sp
nose collects tests automatically from python source files,
directories n' packages found up in its hustlin directory (which
defaults ta tha current hustlin directory) fo' realz. Any python source file,
directory or package dat matches tha testMatch regular expression
(by default: \fI(?:^|[b_.\-])[Tt]est)\fP is ghon be collected as a test (or
source fo' collection of tests). In addition, all other packages
found up in tha hustlin directory is ghon be examined fo' python source files
or directories dat match testMatch. Package discovery descendz all
the way down tha tree, so package.tests n' package.sub.tests and
package.sub.sub2.tests will all be collected.
.sp
Within a test directory or package, any python source file matching
testMatch is ghon be examined fo' test cases. Within a test module,
functions n' classes whose names match testMatch n' TestCase
subclasses wit any name is ghon be loaded n' executed as tests, n' you can put dat on yo' toast. Tests
may use tha assert keyword or raise AssertionErrors ta indicate test
failure. TestCase subclasses may do tha same or use tha various
TestCase methodz available.
.SS Selectin Tests
.sp
To specify which tests ta run, pass test names on tha command line:
.sp
.nf
.ft C
nosetests only_test_this.py
.ft P
.fi
.sp
Test names specified may be file or module names, n' may optionally
indicate tha test case ta run by separatin tha module or file name
from tha test case name wit a cold-ass lil colon. I aint talkin' bout chicken n' gravy biatch. Filenames may be relatizzle or
absolute. Examples:
.sp
.nf
.ft C
nosetests test.module
nosetests another.test:TestCase.test_method
nosetests a.test:TestCase
nosetests /path/to/test/file.py:test_function
.ft P
.fi
.sp
Yo ass may also chizzle tha hustlin directory where nozzle looks fo' tests
by rockin tha \-w switch:
.sp
.nf
.ft C
nosetests \-w /path/to/tests
.ft P
.fi
.sp
Note, however, dat support fo' multiple \-w arguments is now deprecated
and is ghon be removed up in a gangbangin' future release fo' realz. Az of nozzle 0.10, you can get
the same behavior by specifyin tha target directories \fIwithout\fP
the \-w switch:
.sp
.nf
.ft C
nosetests /path/to/tests /another/path/to/tests
.ft P
.fi
.sp
Further customization of test selection n' loadin is possible
all up in tha use of plugins.
.sp
Test result output is identical ta dat of unittest, except for
the additionizzle features (error classes, n' plugin\-supplied
features like fuckin output capture n' assert introspection) detailed
in tha options below.
.SS Configuration
.sp
In addizzle ta passin command\-line options, you may also put
configuration options up in yo' project\(aqs \fIsetup.cfg\fP file, or a .noserc
or nose.cfg file up in yo' home directory. In any of these standard
ini\-style config files, you put yo' nosetests configuration up in a
\fB[nosetests]\fP section. I aint talkin' bout chicken n' gravy biatch. Options is tha same as on tha command line,
with tha \-\- prefix removed. Y'all KNOW dat shit, muthafucka! For options dat is simple switches, you
must supply a value:
.sp
.nf
.ft C
[nosetests]
verbosity=3
with\-doctest=1
.ft P
.fi
.sp
All configuration filez dat is found is ghon be loaded n' their
options combined. Y'all KNOW dat shit, muthafucka! Yo ass can override tha standard config file loading
with tha \fB\-c\fP option.
.SS Usin Plugins
.sp
There is a shitload of nozzle plugins available via easy as fuck _install and
elsewhere, so peek-a-boo, clear tha way, I be comin' thru fo'sho. To bust a plugin, just install dat shit. Da plugin will add
command line options ta nosetests, n' you can put dat on yo' toast. To verify dat tha plugin is installed,
run:
.sp
.nf
.ft C
nosetests \-\-plugins
.ft P
.fi
.sp
Yo ass can add \-v or \-vv ta dat command ta show mo' shiznit
about each plugin.
.sp
If yo ass is hustlin nose.main() or nose.run() from a script, you
can specify a list of plugins ta use by passin a list of plugins
with tha plugins keyword argument.
.SS 0.9 plugins
.sp
nose 1.0 can use SOME plugins dat was freestyled fo' nozzle 0.9. The
default plugin manager bangs a cold-ass lil compatibilitizzle wrapper round 0.9
plugins dat adapts tha chizzled plugin api calls. But fuck dat shiznit yo, tha word on tha street is dat plugins
that access nozzle internals is likely ta fail, especially if they
attempt ta access test case or test suite classes. For example,
plugins dat try ta determine if a test passed ta startTest be an
individual test or a suite will fail, kinda cuz suites is no
longer passed ta startTest n' kinda cuz it\(aqs likely dat the
plugin is tryin ta smoke up if tha test be a instizzle of a cold-ass lil class
that no longer exists.
.SS 0.10 n' 0.11 plugins
.sp
All plugins freestyled fo' nozzle 0.10 n' 0.11 should work wit nozzle 1.0.
.SS Options
.INDENT 0.0
.TP
.B \-V, \-\-version
Output nozzle version n' exit
.UNINDENT
.INDENT 0.0
.TP
.B \-p, \-\-plugins
Output list of available plugins n' exit. Combine wit higher verbositizzle fo' pimped outa detail
.UNINDENT
.INDENT 0.0
.TP
.B \-v=DEFAULT, \-\-verbose=DEFAULT
Be mo' verbose. [NOSE_VERBOSE]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-verbosity=VERBOSITY
Set verbosity; \-\-verbosity=2 is tha same ol' dirty as \-v
.UNINDENT
.INDENT 0.0
.TP
.B \-q=DEFAULT, \-\-quiet=DEFAULT
Be less verbose
.UNINDENT
.INDENT 0.0
.TP
.B \-c=FILES, \-\-config=FILES
Load configuration from config file(s). May be specified multiple times; up in dat case, all config filez is ghon be loaded n' combined
.UNINDENT
.INDENT 0.0
.TP
.B \-w=WHERE, \-\-where=WHERE
Look fo' tests up in dis directory. May be specified multiple times. Da first directory passed is ghon be used as tha hustlin directory, up in place of tha current hustlin directory, which is tha default. Others is ghon be added ta tha list of tests ta execute. [NOSE_WHERE]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-py3where=PY3WHERE
Look fo' tests up in dis directory under Python 3.x. Functions tha same ol' dirty as \(aqwhere\(aq yo, but only applies if hustlin under Python 3.x or above.  Note that, if present under 3.x, dis option straight-up replaces any directories specified wit \(aqwhere\(aq, so tha \(aqwhere\(aq option becomes ineffective. [NOSE_PY3WHERE]
.UNINDENT
.INDENT 0.0
.TP
.B \-m=REGEX, \-\-match=REGEX, \-\-testmatch=REGEX
Files, directories, function names, n' class names dat match dis regular expression is considered tests, n' you can put dat on yo' toast.  Default: (?:^|[b_./\-])[Tt]est [NOSE_TESTMATCH]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-tests=NAMES
Run these tests (comma\-separated list). This argument is useful mainly from configuration files; on tha command line, just pass tha tests ta run as additionizzle arguments wit no switch.
.UNINDENT
.INDENT 0.0
.TP
.B \-l=DEFAULT, \-\-debug=DEFAULT
Activate debug loggin fo' one or mo' systems fo' realz. Available debug loggers: nose, nose.importer, nose.inspector, nose.plugins, nose.result n' nose.selector. Shiiit, dis aint no joke. Right back up in yo muthafuckin ass. Separate multiple names wit a cold-ass lil comma.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-debug\-log=FILE
Log debug lyrics ta dis file (default: sys.stderr)
.UNINDENT
.INDENT 0.0
.TP
.B \-\-logging\-config=FILE, \-\-log\-config=FILE
Load loggin config from dis file \-\- bypasses all other loggin config settings.
.UNINDENT
.INDENT 0.0
.TP
.B \-I=REGEX, \-\-ignore\-files=REGEX
All Out ignore any file dat matches dis regular expression. I aint talkin' bout chicken n' gravy biatch. Takes precedence over any other settings or plugins. Right back up in yo muthafuckin ass. Specifyin dis option will replace tha default setting. Right back up in yo muthafuckin ass. Specify dis option multiple times ta add mo' regular expressions [NOSE_IGNORE_FILES]
.UNINDENT
.INDENT 0.0
.TP
.B \-e=REGEX, \-\-exclude=REGEX
Don\(aqt run tests dat match regular expression [NOSE_EXCLUDE]
.UNINDENT
.INDENT 0.0
.TP
.B \-i=REGEX, \-\-include=REGEX
This regular expression is ghon be applied ta files, directories, function names, n' class names fo' a cold-ass lil chizzle ta include additionizzle tests dat do not match TESTMATCH.  Specify dis option multiple times ta add mo' regular expressions [NOSE_INCLUDE]
.UNINDENT
.INDENT 0.0
.TP
.B \-x, \-\-stop
Quit hustlin tests afta tha straight-up original gangsta error or failure
.UNINDENT
.INDENT 0.0
.TP
.B \-P, \-\-no\-path\-adjustment
Don\(aqt make any chizzlez ta sys.path when loadin tests [NOSE_NOPATH]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-exe
Look fo' tests up in python modulez dat is executable. Normal behavior is ta exclude executable modules, since they may not be import\-safe [NOSE_INCLUDE_EXE]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-noexe
DO NOT look fo' tests up in python modulez dat is executable. (Da default on tha windows platform is ta do so.)
.UNINDENT
.INDENT 0.0
.TP
.B \-\-traverse\-namespace
Traverse all up in all path entriez of a namespace package
.UNINDENT
.INDENT 0.0
.TP
.B \-\-first\-package\-wins, \-\-first\-pkg\-wins, \-\-1st\-pkg\-wins
nose\(aqs importa will normally evict a package from sys.modulez if it sees a package wit tha same name up in a gangbangin' finger-lickin' different location. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Set dis option ta disable dat behavior.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-byte\-compile
Prevent nozzle from byte\-compilin tha source tha fuck into .pyc filez while nozzle is scannin fo' n' hustlin tests.
.UNINDENT
.INDENT 0.0
.TP
.B \-a=ATTR, \-\-attr=ATTR
Run only tests dat have attributes specified by ATTR [NOSE_ATTR]
.UNINDENT
.INDENT 0.0
.TP
.B \-A=EXPR, \-\-eval\-attr=EXPR
Run only tests fo' whose attributes tha Python expression EXPR evaluates ta True [NOSE_EVAL_ATTR]
.UNINDENT
.INDENT 0.0
.TP
.B \-s, \-\-nocapture
Don\(aqt capture stdout (any stdout output is ghon be printed immediately) [NOSE_NOCAPTURE]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-nologcapture
Disable loggin capture plugin. I aint talkin' bout chicken n' gravy biatch. Loggin configurtion is ghon be left intact. [NOSE_NOLOGCAPTURE]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-logging\-format=FORMAT
Specify custom format ta print statements, n' you can put dat on yo' toast. Uses tha same ol' dirty format as used by standard loggin handlezs. [NOSE_LOGFORMAT]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-logging\-datefmt=FORMAT
Specify custom date/time format ta print statements, n' you can put dat on yo' toast. Uses tha same ol' dirty format as used by standard loggin handlezs. [NOSE_LOGDATEFMT]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-logging\-filter=FILTER
Specify which statements ta filta in/out. By default, every last muthafuckin thang is captured. Y'all KNOW dat shit, muthafucka! If tha output is too verbose,
use dis option ta filta up needless output.
Example: filter=foo will capture statements issued ONLY to
 foo or foo.what.ever.sub but not foobar or other logger.
Specify multiple loggers wit comma: filter=foo,bar,baz.
If any logger name is prefixed wit a minus, eg filter=\-foo,
it is ghon be excluded rather than included. Y'all KNOW dat shit, muthafucka! Default: exclude loggin lyrics from nozzle itself (\-nose). [NOSE_LOGFILTER]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-logging\-clear\-handlezs
Clear all other loggin handlezs
.UNINDENT
.INDENT 0.0
.TP
.B \-\-logging\-level=DEFAULT
Set tha log level ta capture
.UNINDENT
.INDENT 0.0
.TP
.B \-\-with\-coverage
Enable plugin Coverage: 
Activate a cold-ass lil coverage report rockin Ned Batchelder\(aqs coverage module.
 [NOSE_WITH_COVERAGE]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-cover\-package=PACKAGE
Restrict coverage output ta selected packages [NOSE_COVER_PACKAGE]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-cover\-erase
Erase previously collected coverage statistics before run
.UNINDENT
.INDENT 0.0
.TP
.B \-\-cover\-tests
Include test modulez up in coverage report [NOSE_COVER_TESTS]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-cover\-min\-percentage=DEFAULT
Minimum cementage of coverage fo' teststo pass [NOSE_COVER_MIN_PERCENTAGE]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-cover\-inclusive
Include all python filez under hustlin directory up in coverage report.  Useful fo' discoverin holez up in test coverage if not all filez is imported by tha test suite. [NOSE_COVER_INCLUSIVE]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-cover\-html
Produce HTML coverage shiznit
.UNINDENT
.INDENT 0.0
.TP
.B \-\-cover\-html\-dir=DIR
Produce HTML coverage shiznit up in dir
.UNINDENT
.INDENT 0.0
.TP
.B \-\-cover\-branches
Include branch coverage up in coverage report [NOSE_COVER_BRANCHES]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-cover\-xml
Produce XML coverage shiznit
.UNINDENT
.INDENT 0.0
.TP
.B \-\-cover\-xml\-file=FILE
Produce XML coverage shiznit up in file
.UNINDENT
.INDENT 0.0
.TP
.B \-\-pdb
Drop tha fuck into debugger on errors
.UNINDENT
.INDENT 0.0
.TP
.B \-\-pdb\-failures
Drop tha fuck into debugger on failures
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-deprecated
Disable special handlin of DeprecatedTest exceptions.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-with\-doctest
Enable plugin Doctest: 
Activate doctest plugin ta find n' run doctests up in non\-test modules.
 [NOSE_WITH_DOCTEST]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-doctest\-tests
Also look fo' doctests up in test modules. Note dat classes, methodz n' functions should have either doctests or non\-doctest tests, not both. [NOSE_DOCTEST_TESTS]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-doctest\-extension=EXT
Also look fo' doctests up in filez wit dis extension [NOSE_DOCTEST_EXTENSION]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-doctest\-result\-variable=VAR
Change tha variable name set ta tha result of tha last interpreta command from tha default \(aq_\(aq. Can be used ta avoid conflicts wit tha _() function used fo' text translation. I aint talkin' bout chicken n' gravy biatch. [NOSE_DOCTEST_RESULT_VAR]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-doctest\-fixtures=SUFFIX
Find fixtures fo' a thugged-out doctest file up in module wit dis name appended ta tha base name of tha doctest file
.UNINDENT
.INDENT 0.0
.TP
.B \-\-doctest\-options=OPTIONS
Specify options ta pass ta doctest. Eg. \(aq+ELLIPSIS,+NORMALIZE_WHITESPACE\(aq
.UNINDENT
.INDENT 0.0
.TP
.B \-\-with\-isolation
Enable plugin IsolationPlugin: 
Activate tha isolation plugin ta isolate chizzlez ta external
modulez ta a single test module or package. Da isolation plugin
resets tha contentz of sys.modulez afta each test module or
package runs ta its state before tha test. PLEASE NOTE dat this
plugin should not be used wit tha coverage plugin, or up in any other case
where module reloadin may produce undesirable side\-effects.
 [NOSE_WITH_ISOLATION]
.UNINDENT
.INDENT 0.0
.TP
.B \-d, \-\-detailed\-errors, \-\-failure\-detail
Add detail ta error output by attemptin ta evaluate failed asserts [NOSE_DETAILED_ERRORS]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-with\-profile
Enable plugin Profile: 
Use dis plugin ta run tests rockin tha hotshot profila n' shit. 
 [NOSE_WITH_PROFILE]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-profile\-sort=SORT
Set sort order fo' profila output
.UNINDENT
.INDENT 0.0
.TP
.B \-\-profile\-stats\-file=FILE
Profila stats file; default be a freshly smoked up temp file on each run
.UNINDENT
.INDENT 0.0
.TP
.B \-\-profile\-restrict=RESTRICT
Restrict profila output. Right back up in yo muthafuckin ass. See help fo' pstats.Stats fo' details
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-skip
Disable special handlin of SkipTest exceptions.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-with\-id
Enable plugin TestId: 
Activate ta add a test id (like #1) ta each test name output fo' realz. Activate
with \-\-failed ta rerun failin tests only.
 [NOSE_WITH_ID]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-id\-file=FILE
Store test idz found up in test runs up in dis file. Default is tha file .noseidz up in tha hustlin directory.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-failed
Run tha tests dat failed up in tha last test run.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-processes=NUM
Spread test run among dis nuff processes. Right back up in yo muthafuckin ass. Set a number equal ta tha number of processors or cores up in yo' machine fo' dopest thangs up in dis biatch. Pass a wack number ta have tha number of processes automatically set ta tha number of cores. Passin 0 means ta disable parallel testing. Default is 0 unless NOSE_PROCESSES is set. [NOSE_PROCESSES]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-process\-timeout=SECONDS
Set timeout fo' return of thangs up in dis biatch from each test runner process. Default is 10. [NOSE_PROCESS_TIMEOUT]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-process\-restartworker
If set, will restart each worker process once they tests is done, dis helps control memory leaks from cappin' tha system. [NOSE_PROCESS_RESTARTWORKER]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-with\-xunit
Enable plugin Xunit: This plugin serves up test thangs up in dis biatch up in tha standard XUnit XML format. [NOSE_WITH_XUNIT]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-xunit\-file=FILE
Path ta xml file ta store tha xunit report in. I aint talkin' bout chicken n' gravy biatch. Default is nosetests.xml up in tha hustlin directory [NOSE_XUNIT_FILE]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-all\-modules
Enable plugin AllModules: Collect tests from all python modules.
 [NOSE_ALL_MODULES]
.UNINDENT
.INDENT 0.0
.TP
.B \-\-collect\-only
Enable collect\-only: 
Collect n' output test names only, don\(aqt run any tests.
 [COLLECT_ONLY]
.UNINDENT
.SH AUTHOR
Nose pimpers
.SH COPYRIGHT
2009, Jizzo Pellerin
.\" Generated by docutils manpage writer.
.
