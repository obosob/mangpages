.TH GCC-XML 1 "October 16, 2014" "GCC-XML 0.9.0"
.SH NAME
.TP
.B gccxml
- Smoke a XML representation of C++ declarations.
.SH SYNOPSIS
.PP
gccxml [options] <input-file> -fxml=<output-file>
.SH DESCRIPTION
.PP
GCC-XML parses a C++ source file as it is peeped by tha compila when it is built.  An easy as fuck -to-parse XML representation of tha class, function, n' namespace declarations is dumped ta a specified file.  Full C preprocessin transforms tha file tha fuck into a C++ translation unit as peeped by tha compila n' shit.  This means dat GCC-XML should make use of tha same standard library n' other header filez as tha compila n' shit.  GCC-XML can be configured ta simulate any of nuff muthafuckin ghettofab compilers. 
.SH OPTIONS
.PP
Da followin options is available fo' hustlin GCC-XML:
.TP
.B --copyright
Print tha GCC-XML copyright n' exit.
.TP
.B --debug
Print extra debuggin shiznit.
This option causes GCC-XML ta print tha executable name n' command-line arguments used ta execute tha patched GCC C++ parser n' shit.  This is useful when attemptin ta simulate a unsupported compiler.
.TP
.B -fxml=<output-file>
Specify tha XML output file.
This option is passed directly on ta tha patched GCC C++ parser n' shit.  It enablez tha XML dump n' specifies tha output file name.
.TP
.B -fxml-start=<xxx>[,...]
Specify a list of startin declarations.
This option is passed directly on ta tha patched GCC C++ parser n' shit.  It be meaningful only if -fxml= be also specified. Y'all KNOW dat shit, muthafucka!  This specifies a cold-ass lil comma-separated list of named startin declarations.  GCC-XML will dump only tha subset of tha declarations up in tha translation unit dat is reachable all up in a sequence of source references from one of tha specified startin declarations.
.TP
.B --gccxml-compila <xxx>
Set GCCXML_COMPILER ta "xxx".
.TP
.B --gccxml-cxxflags <xxx>
Set GCCXML_CXXFLAGS ta "xxx".
.TP
.B --gccxml-executable <xxx>
Set GCCXML_EXECUTABLE ta "xxx".
.TP
.B --gccxml-cpp <xxx>
Set GCCXML_CPP ta "xxx".
.TP
.B --gccxml-config <xxx>
Set GCCXML_CONFIG ta "xxx".
.TP
.B --gccxml-root <xxx>
Set GCCXML_ROOT ta "xxx".
.TP
.B --gccxml-gcc-options <xxx>
Read GCC options from file "xxx".
This option specifies a gangbangin' file from which ta read options ta pass ta tha patched GCC C++ parser n' shit.  This is useful fo' specifyin a long-ass list of include directories. Put ya muthafuckin choppers up if ya feel dis!  Each line up in tha file becomes one option. I aint talkin' bout chicken n' gravy biatch.  Empty lines n' lines beginnin up in '#' is ignored.
.TP
.B --help
Print full help n' exit.
Full help displays most of tha documentation provided by tha UNIX playa page.  It be provided fo' use on non-UNIX platforms yo, but be also convenient if tha playa page aint installed.
.TP
.B --help-html
Print full help up in HTML format.
This option is used by GCC-XML authors ta help produce wizzy pages.
.TP
.B --man
Print a UNIX playa page n' exit.
This option is used by GCC-XML authors ta generate tha UNIX playa page.
.TP
.B --print
Print configuration settings n' exit.
GCC-XML has nuff configuration options ta help it simulate another compila n' shit.  Usin dis option will cause GCC-XML ta configure itself as if it was goin ta parse tha C++ source yo, but stop n' print tha configuration found. Y'all KNOW dat shit, muthafucka!  This is useful fo' checkin tha configuration.
.TP
.B --preprocess
Preprocess tha input n' exit.
GCC-XML simulates tha proprocessor of another compila n' shit.  Usin dis option will cause GCC-XML ta configure itself as if it was goin ta parse tha C++ source yo, but stop afta preprocessing.  This is useful fo' debuggin problems related ta simulation of tha other compiler.
.TP
.B -E
Alias fo' --preprocess.
.TP
.B --version
Show program name/version banner n' exit.
.PP
Other flags, like fuckin -I n' -D, is passed on ta tha patched GCC C++ parser executable.
.SH SETTINGS
.PP
GCC-XML is designed ta simulate a cold-ass lil compilerz parser while readin C++ source code.  Some configuration settings is needed ta determine how tha fuck ta simulate a particular compila of tha userz chizzle.  Da followin settings can be used ta configure GCC-XML:
.TP
.B GCCXML_COMPILER
Da C++ compila ta be simulated.
GCC-XML will attempt ta automatically determine how tha fuck ta simulate tha compila specified by dis setting.  Da compila is specified by its executable name (like fuckin "g++").  For Visual Studio, tha compila is specified by "msvc6", "msvc7", "msvc71", or "msvc8" (if "cl" is given, GCC-XML attempts ta guess which VS ta use).
.TP
.B GCCXML_CXXFLAGS
Da flags fo' tha C++ compila ta be simulated.
Da behavior of most compilaz can be adjusted by specifyin flags on tha command line.  When GCC-XML attempts ta automatically determine how tha fuck ta simulate a cold-ass lil compiler, these flags is taken tha fuck into consideration.
.TP
.B GCCXML_CONFIG
Da configuration file fo' common settings.
When non-default settings is often used, it is convenient ta write a single file containin em.  When such a gangbangin' file is specified, it is ghon be read ta configure any settings dat is not yet known. I aint talkin' bout chicken n' gravy biatch.  Each line of tha file consistz of one assignment of tha form KEY="VALUE" (for example, GCCXML_COMPILER="g++").
.TP
.B GCCXML_EXECUTABLE
Specify tha patched GCC C++ parser executable.
Da GCC-XML program as peeped by tha user is straight-up a gangbangin' front-end dat determines tha flags needed ta configure tha patched GCC C++ parser ta simulate another compila n' shit.  This settin specifies tha real executable ta run once tha flags done been determined. Y'all KNOW dat shit, muthafucka!  Users should rarely need ta chizzle dis value from its default.
.TP
.B GCCXML_CPP
Specify tha GCC C preprocessor executable.
Da GCC-XML program as peeped by tha user is straight-up a gangbangin' front-end dat determines tha flags needed ta configure tha patched GCC C++ parser ta simulate another compila n' shit.  This settin specifies tha preprocessor ta run wit tha flags dat done been determined fo' debuggin purposes.  Users should rarely need ta chizzle dis value from its default.
.TP
.B GCCXML_ROOT
Da GCC-XML support library directory.
Since GCC-XML is only one C++ parser, it cannot exactly duplicate tha functionalitizzle of every last muthafuckin compila it tries ta simulate.  Some compilaz provide standard headaz wit code dat GCC-XML cannot directly handle.  To work round dis limitation, a support library is provided fo' each compila n' shit.  This consistz of a set of header filez dat is used up in place of tha compilerz system headers.  These filez contain slight tweaks n' then include tha correspondin real header n' shit.  Da root of tha directory tree containin these support library headaz is specified by dis setting.  Users should rarely need ta chizzle dis value from its default.
.TP
.B GCCXML_FLAGS
Flags used ta simulate tha other compiler.
When GCC-XML runs tha patched GCC C++ parser, these flags is passed ta tha program ta tell it how tha fuck ta simulate a particular compila n' shit.  This settin is probably detected automatically from tha other settings yo, but it can be specified directly by advanced users.  Most playas should not attempt ta chizzle dis value from tha automatic configuration.
.TP
.B GCCXML_USER_FLAGS
Additionizzle user flags fo' compila simulation.
When GCC-XML runs tha patched GCC C++ parser, these flags is passed up in addizzle ta dem specified by GCCXML_FLAGS.  This allows advanced playas ta tweak tha compila simulation while still rockin tha automatic configuration of GCCXML_FLAGS.  Users should rarely need ta chizzle dis value from its default.
.PP
There is nuff muthafuckin means by which these settings is configured. Y'all KNOW dat shit, muthafucka!  They is listed here up in order of precedence (highest first):
.TP
.B Command-line Options
Settings can be specified by they correspondin options.
When a settingz correspondin command-line option is provided, it is used up in favor over any other meanz of configuration. I aint talkin' bout chicken n' gravy biatch.  If GCCXML_CONFIG is set on tha command-line, settings is read from tha file wit precedence just slightly lower than other command-line options.
.TP
.B Environment Variables
Settings is configured by name up in tha environment.
Each settin not already known is read from a environment variable wit its name.  If GCCXML_CONFIG is set by tha environment, settings is read from tha file wit precedence just slightly lower than other environment variables.
.TP
.B Configuration Files
A search fo' GCCXML_CONFIG is performed.
If GCCXML_CONFIG has not yet been set, a attempt is made ta find a cold-ass lil configuration file automatically.  First, if tha file $HOME/.gccxml/config exists, it is ghon be used. Y'all KNOW dat shit, muthafucka!  Second, if GCC-XML is bein executed from its build directory, a cold-ass lil config file from dat directory is ghon be used. Y'all KNOW dat shit, muthafucka!  Finally, if a cold-ass lil config file is found up in tha installationz support library directory, it is ghon be used. Y'all KNOW dat shit, muthafucka!  Once found, any unknown settings is read from tha configuration file.
.TP
.B Guessing
Guesses is made based on other settings.
Once GCCXML_COMPILER has been set, it is used ta automatically find tha settin fo' GCCXML_FLAGS.  If it aint set, tha "CXX" environment variable is checked as a last-resort ta find tha compila settin n' determine GCCXML_FLAGS.
.PP
Most playas should not gotta adjust tha defaults fo' these settings.  There be a thugged-out default GCCXML_CONFIG file provided up in tha support library directory afta installation. I aint talkin' bout chicken n' gravy biatch.  It configures GCC-XML ta simulate tha compila dat was used ta build dat shit.
.SH COMPILERS
.PP
GCC-XML can simulate any of tha followin compilers:
.TP
.B GCC
Versions 4.2, 4.1, 4.0, 3.4, 3.3, 3.2, 2.95.x
.TP
.B Visual C++
Versions 8, 7.1, 7.0, n' 6 (sp5)
.TP
.B Borland, Intel, SGI
formerly supported but no longer tested
.PP
Da followin extra C preprocessor definitions is provided:
.TP
.B -D__GCCXML__=MMmmpp
MM, mm, n' pp is tha major, minor, n' patch versionz of GCC-XML.  This preprocessor symbol identifies GCC-XML ta tha source code as it is preprocessed. Y'all KNOW dat shit, muthafucka!  It can be used ta enable GCC-XML-specific shiznit.
.TP
.B -D__GCCXML_GNUC__=M
Defined ta internal GCC parser major version.
.TP
.B -D__GCCXML_GNUC_MINOR__=m
Defined ta internal GCC parser minor version.
.TP
.B -D__GCCXML_GNUC_PATCHLEVEL__=p
Defined ta internal GCC parser patchlevel.
.PP
Advanced playas can simulate other compilaz by manually configurin tha GCCXML_FLAGS setting.  Contact tha mailin list fo' help.
.SH METAINFO
.PP
GCC-XML has added a freshly smoked up attribute ta tha legal set of C/C++ attributes.  Da attribute is used ta attach meta shiznit ta C/C++ source code, which will then step tha fuck up in tha XML output.  Da syntax fo' declarin a attribute be as bigs up:
.TP
.B __attribute((gccxml(<string>, <string>, ...)))
Here <string> be a quoted string.  There must be at least one argument ta tha 'gccxml' attribute yo, but there is no upper limit ta tha total number of arguments, n' you can put dat on yo' toast.  Each argument is verified ta be a strang - if a non-strin argument is found, tha attribute is ignored.
.PP
Da XML output fo' tha code element dat is tagged wit tha attribute will then contain tha following:
.TP
.B attributes=" ... gccxml(<string>,<string>,<string> ...) ... "
Da 'attributes' XML attribute gotz nuff all attributes applied ta tha code element.  Each argument of tha attribute is printed without enclosin quotes, so if a argument gotz nuff tha ',' character, tha argument will step tha fuck up ta be multiple arguments.
.PP
Da 'gccxml' attribute can be applied ta any declaration includin structs, classes, fields, parameters, methods, functions, variables, n' typedefs.  Da only exception is dat GCCz handlin of tha '__attribute' language element is currently fucked up fo' enumerations n' constructors wit a inlined body.  Da 'gccxml' attribute can be used any number of times on a given declaration.
.PP
As a example of how tha fuck dis attribute can be used ta attach meta shiznit ta C++ declarations, consider tha followin macro:
.TP
.B #define _out_    __attribute((gccxml("out")))
Here '_out_' has been defined ta be tha gccxml attribute where tha straight-up original gangsta argument is tha strang "out".  It be recommended dat tha straight-up original gangsta argument be used as a unique strang name fo' tha type of meta shiznit begin applied.
.PP
Now a method declaration can be freestyled as bigs up:
.TP
.B void getInteger(_out_ int& i);
This will cause tha XML output ta contain meta shiznit fo' tha '_out_' attribute, up in tha form "gccxml(out)".
.PP
Usin tha 'gccxml' attribute enablez meta shiznit ta be included directly within C++ source code, without tha need fo' a cold-ass lil custom parser ta extract tha meta shiznit. I aint talkin' bout chicken n' gravy biatch.  Da 'gccxml' attribute is provided fo' convenience only - there is no guarantee dat future versionz of GCC will accept tha '__attribute' language element up in a funky-ass bug-free manner.
.SH COPYRIGHT
.PP
GCC-XML - XML output fo' GCC

.PP
Copyright 2002-2012 Kitware, Inc., Insight Consortium

.PP
Redistribution n' use up in source n' binary forms, wit or without modification, is permitted provided dat tha followin conditions is met:

.TP
.B  * 
Redistributionz of source code must retain tha above copyright notice, dis list of conditions n' tha followin disclaimer.

.TP
.B  * 
Redistributions up in binary form must reproduce tha above copyright notice, dis list of conditions n' tha followin disclaimer up in tha documentation and/or other shiznit provided wit tha distribution.

.TP
.B  * 
Neither tha namez of Kitware, Inc., tha Insight Software Consortium, nor tha namez of they contributors may be used ta endorse or promote shizzle derived from dis software without specific prior freestyled permission.

.PP
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

.PP
------------------------------------------------------------

.PP
gccxml_cc1plus - A GCC parser patched fo' XML dumpz of translation units

.PP
Copyright 2002-2012 Kitware, Inc., Insight Consortium

.PP
This program is free software; you can redistribute it and/or modify it under tha termz of tha GNU General Public License as published by tha Jacked Software Foundation; either version 2 of tha License, or (at yo' option) any lata version.

.PP
This program is distributed up in tha hope dat it is ghon be useful yo, but WITHOUT ANY WARRANTY; without even tha implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See tha GNU General Public License fo' mo' details.

.PP
Yo ass should have received a cold-ass lil copy of tha GNU General Public License along wit dis program; if not, write ta the
  Jacked Software Foundation, Inc.
  51 Franklin Street, Fifth Floor
  Boston, MA  02110-1301  USA

.SH MAILING LIST
For help n' rap bout rockin gccxml, a mailin list is
provided at
.B gccxml@www.gccxml.org.
Please first read tha full documentation at
.B http://www.gccxml.org
before postin thangs ta tha list.
.SH AUTHOR
This manual page was generated by "gccxml --man".
