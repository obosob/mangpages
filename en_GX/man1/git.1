'\" t
.\"     Title: git
.\"    Author: [see tha "Authors" section]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git \- tha wack content tracker
.SH "SYNOPSIS"
.sp
.nf
\fIgit\fR [\-\-version] [\-\-help] [\-C <path>] [\-c <name>=<value>]
    [\-\-exec\-path[=<path>]] [\-\-html\-path] [\-\-man\-path] [\-\-info\-path]
    [\-p|\-\-paginate|\-\-no\-pager] [\-\-no\-replace\-objects] [\-\-bare]
    [\-\-git\-dir=<path>] [\-\-work\-tree=<path>] [\-\-namespace=<name>]
    <command> [<args>]
.fi
.sp
.SH "DESCRIPTION"
.sp
Git be a gangbangin' fast, scalable, distributed revision control system wit a unusually rich command set dat serves up both high\-level operations n' full access ta internals\&.
.sp
See \fBgittutorial\fR(7) ta git started, then peep \m[blue]\fBEverydizzle Git\fR\m[]\&\s-2\u[1]\d\s+2 fo' a useful minimum set of commands\&. Da \m[blue]\fBGit User\(cqs Manual\fR\m[]\&\s-2\u[2]\d\s+2 has a mo' in\-depth introduction\&.
.sp
Afta you mastered tha basic concepts, you can come back ta dis page ta learn what tha fuck commandz Git offers\&. Yo ass can learn mo' bout individual Git commandz wit "git help command"\&. \fBgitcli\fR(7) manual page gives you a overview of tha command line command syntax\&.
.sp
Formatted n' hyperlinked version of tha sickest fuckin Git documentation can be viewed at http://git\-htmldocs\&.googlecode\&.com/git/git\&.html\&.
.SH "OPTIONS"
.PP
\-\-version
.RS 4
Prints tha Git suite version dat the
\fIgit\fR
program came from\&.
.RE
.PP
\-\-help
.RS 4
Prints tha synopsis n' a list of da most thugged-out commonly used commands\&. If tha option
\fI\-\-all\fR
or
\fI\-a\fR
is given then all available commandz is printed\&. If a Git command is named dis option will brang up tha manual page fo' dat command\&.
.sp
Other options is available ta control how tha fuck tha manual page is displayed\&. Right back up in yo muthafuckin ass. See
\fBgit-help\fR(1)
for mo' shiznit, cuz
git \-\-help \&.\&.\&.
is converted internally into
git help \&.\&.\&.\&.
.RE
.PP
\-C <path>
.RS 4
Run as if git was started in
\fI<path>\fR
instead of tha current hustlin directory\&. When multiple
\-C
options is given, each subsequent non\-absolute
\-C <path>
is interpreted relatizzle ta tha preceding
\-C <path>\&.
.sp
This option affects options dat expect path name like
\-\-git\-dir
and
\-\-work\-tree
in dat they interpretationz of tha path names would be made relatizzle ta tha hustlin directory caused by the
\-C
option\&. For example tha followin invocations is equivalent:
.sp
.if n \{\
.RS 4
.\}
.nf
git \-\-git\-dir=a\&.git \-\-work\-tree=b \-C c status
git \-\-git\-dir=c/a\&.git \-\-work\-tree=c/b status
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-c <name>=<value>
.RS 4
Pass a cold-ass lil configuration parameta ta tha command\&. Da value given will override joints from configuration files\&. Da <name> is expected up in tha same format as listed by
\fIgit config\fR
(subkeys separated by dots)\&.
.RE
.PP
\-\-exec\-path[=<path>]
.RS 4
Path ta wherever yo' core Git programs is installed\&. This can also be controlled by settin tha GIT_EXEC_PATH environment variable\&. If no path is given,
\fIgit\fR
will print tha current settin n' then exit\&.
.RE
.PP
\-\-html\-path
.RS 4
Print tha path, without trailin slash, where Git\(cqs HTML documentation is installed n' exit\&.
.RE
.PP
\-\-man\-path
.RS 4
Print tha manpath (see
man(1)) fo' tha playa pages fo' dis version of Git n' exit\&.
.RE
.PP
\-\-info\-path
.RS 4
Print tha path where tha Info filez documentin dis version of Git is installed n' exit\&.
.RE
.PP
\-p, \-\-paginate
.RS 4
Pipe all output into
\fIless\fR
(or if set, $PAGER) if standard output be a terminal\&. This overrides the
pager\&.<cmd>
configuration options (see tha "Configuration Mechanism" section below)\&.
.RE
.PP
\-\-no\-pager
.RS 4
Do not pipe Git output tha fuck into a pager\&.
.RE
.PP
\-\-git\-dir=<path>
.RS 4
Set tha path ta tha repository\&. This can also be controlled by settin tha GIT_DIR environment variable\&. Well shiiiit, it can be a absolute path or relatizzle path ta current hustlin directory\&.
.RE
.PP
\-\-work\-tree=<path>
.RS 4
Set tha path ta tha hustlin tree\&. Well shiiiit, it can be a absolute path or a path relatizzle ta tha current hustlin directory\&. This can also be controlled by settin tha GIT_WORK_TREE environment variable n' tha core\&.worktree configuration variable (see core\&.worktree in
\fBgit-config\fR(1)
for a mo' detailed rap)\&.
.RE
.PP
\-\-namespace=<path>
.RS 4
Set tha Git namespace\&. Right back up in yo muthafuckin ass. See
\fBgitnamespaces\fR(7)
for mo' details\&. Equivalent ta settin the
GIT_NAMESPACE
environment variable\&.
.RE
.PP
\-\-bare
.RS 4
Treat tha repository as a funky-ass bare repository\&. If GIT_DIR environment aint set, it is set ta tha current hustlin directory\&.
.RE
.PP
\-\-no\-replace\-objects
.RS 4
Do not use replacement refs ta replace Git objects\&. Right back up in yo muthafuckin ass. See
\fBgit-replace\fR(1)
for mo' shiznit\&.
.RE
.PP
\-\-literal\-pathspecs
.RS 4
Treat pathspecs literally (i\&.e\&. no globbing, no pathspec magic)\&. This is equivalent ta settin the
GIT_LITERAL_PATHSPECS
environment variable to
1\&.
.RE
.PP
\-\-glob\-pathspecs
.RS 4
Add "glob" magic ta all pathspec\&. This is equivalent ta settin the
GIT_GLOB_PATHSPECS
environment variable to
1\&. Disablin globbin on individual pathspecs can be done rockin pathspec magic ":(literal)"
.RE
.PP
\-\-noglob\-pathspecs
.RS 4
Add "literal" magic ta all pathspec\&. This is equivalent ta settin the
GIT_NOGLOB_PATHSPECS
environment variable to
1\&. Enablin globbin on individual pathspecs can be done rockin pathspec magic ":(glob)"
.RE
.PP
\-\-icase\-pathspecs
.RS 4
Add "icase" magic ta all pathspec\&. This is equivalent ta settin the
GIT_ICASE_PATHSPECS
environment variable to
1\&.
.RE
.SH "GIT COMMANDS"
.sp
Us dudes divide Git tha fuck into high level ("porcelain") commandz n' low level ("plumbing") commands\&.
.SH "HIGH-LEVEL COMMANDS (PORCELAIN)"
.sp
We separate tha porcelain commandz tha fuck into tha main commandz n' some ancillary user utilities\&.
.SS "Main porcelain commands"
.PP
\fBgit-add\fR(1)
.RS 4
Add file contents ta tha index\&.
.RE
.PP
\fBgit-am\fR(1)
.RS 4
Apply a seriez of patches from a mailbox\&.
.RE
.PP
\fBgit-archive\fR(1)
.RS 4
Smoke a archive of filez from a named tree\&.
.RE
.PP
\fBgit-bisect\fR(1)
.RS 4
Find by binary search tha chizzle dat introduced a funky-ass bug\&.
.RE
.PP
\fBgit-branch\fR(1)
.RS 4
List, create, or delete branches\&.
.RE
.PP
\fBgit-bundle\fR(1)
.RS 4
Move objects n' refs by archive\&.
.RE
.PP
\fBgit-checkout\fR(1)
.RS 4
Checkout a funky-ass branch or paths ta tha hustlin tree\&.
.RE
.PP
\fBgit-cherry-pick\fR(1)
.RS 4
Apply tha chizzlez introduced by some existin commits\&.
.RE
.PP
\fBgit-citool\fR(1)
.RS 4
Graphical alternatizzle ta git\-commit\&.
.RE
.PP
\fBgit-clean\fR(1)
.RS 4
Remove untracked filez from tha hustlin tree\&.
.RE
.PP
\fBgit-clone\fR(1)
.RS 4
Clone a repository tha fuck into a freshly smoked up directory\&.
.RE
.PP
\fBgit-commit\fR(1)
.RS 4
Record chizzlez ta tha repository\&.
.RE
.PP
\fBgit-describe\fR(1)
.RS 4
Show da most thugged-out recent tag dat is reachable from a cold-ass lil commit\&.
.RE
.PP
\fBgit-diff\fR(1)
.RS 4
Show chizzlez between commits, commit n' hustlin tree, etc\&.
.RE
.PP
\fBgit-fetch\fR(1)
.RS 4
Downlizzle objects n' refs from another repository\&.
.RE
.PP
\fBgit-format-patch\fR(1)
.RS 4
Prepare patches fo' e\-mail submission\&.
.RE
.PP
\fBgit-gc\fR(1)
.RS 4
Cleanup unnecessary filez n' optimize tha local repository\&.
.RE
.PP
\fBgit-grep\fR(1)
.RS 4
Print lines matchin a pattern\&.
.RE
.PP
\fBgit-gui\fR(1)
.RS 4
A portable graphical intercourse ta Git\&.
.RE
.PP
\fBgit-init\fR(1)
.RS 4
Smoke a empty Git repository or reinitialize a existin one\&.
.RE
.PP
\fBgit-log\fR(1)
.RS 4
Show commit logs\&.
.RE
.PP
\fBgit-merge\fR(1)
.RS 4
Join two or mo' pimpment histories together\&.
.RE
.PP
\fBgit-mv\fR(1)
.RS 4
Move or rename a gangbangin' file, a gangbangin' finger-lickin' directory, or a symlink\&.
.RE
.PP
\fBgit-notes\fR(1)
.RS 4
Add or inspect object notes\&.
.RE
.PP
\fBgit-pull\fR(1)
.RS 4
Fetch from n' integrate wit another repository or a local branch\&.
.RE
.PP
\fBgit-push\fR(1)
.RS 4
Update remote refs along wit associated objects\&.
.RE
.PP
\fBgit-rebase\fR(1)
.RS 4
Forward\-port local commits ta tha updated upstream head\&.
.RE
.PP
\fBgit-reset\fR(1)
.RS 4
Reset current HEAD ta tha specified state\&.
.RE
.PP
\fBgit-revert\fR(1)
.RS 4
Revert some existin commits\&.
.RE
.PP
\fBgit-rm\fR(1)
.RS 4
Remove filez from tha hustlin tree n' from tha index\&.
.RE
.PP
\fBgit-shortlog\fR(1)
.RS 4
Summarize
\fIgit log\fR
output\&.
.RE
.PP
\fBgit-show\fR(1)
.RS 4
Show various typez of objects\&.
.RE
.PP
\fBgit-stash\fR(1)
.RS 4
Stash tha chizzlez up in a gangbangin' finger-lickin' dirty hustlin directory away\&.
.RE
.PP
\fBgit-status\fR(1)
.RS 4
Show tha hustlin tree status\&.
.RE
.PP
\fBgit-submodule\fR(1)
.RS 4
Initialize, update or inspect submodules\&.
.RE
.PP
\fBgit-tag\fR(1)
.RS 4
Create, list, delete or verify a tag object signed wit GPG\&.
.RE
.PP
\fBgitk\fR(1)
.RS 4
Da Git repository browser\&.
.RE
.SS "Ancillary Commands"
.sp
Manipulators:
.PP
\fBgit-config\fR(1)
.RS 4
Git n' set repository or global options\&.
.RE
.PP
\fBgit-fast-export\fR(1)
.RS 4
Git data exporter\&.
.RE
.PP
\fBgit-fast-import\fR(1)
.RS 4
Backend fo' fast Git data importers\&.
.RE
.PP
\fBgit-filter-branch\fR(1)
.RS 4
Rewrite branches\&.
.RE
.PP
\fBgit-mergetool\fR(1)
.RS 4
Run merge conflict resolution tools ta resolve merge conflicts\&.
.RE
.PP
\fBgit-pack-refs\fR(1)
.RS 4
Pack headz n' tags fo' efficient repository access\&.
.RE
.PP
\fBgit-prune\fR(1)
.RS 4
Prune all unreachable objects from tha object database\&.
.RE
.PP
\fBgit-reflog\fR(1)
.RS 4
Manage reflog shiznit\&.
.RE
.PP
\fBgit-relink\fR(1)
.RS 4
Hardlink common objects up in local repositories\&.
.RE
.PP
\fBgit-remote\fR(1)
.RS 4
manage set of tracked repositories\&.
.RE
.PP
\fBgit-repack\fR(1)
.RS 4
Pack unpacked objects up in a repository\&.
.RE
.PP
\fBgit-replace\fR(1)
.RS 4
Create, list, delete refs ta replace objects\&.
.RE
.sp
Interrogators:
.PP
\fBgit-annotate\fR(1)
.RS 4
Annotate file lines wit commit shiznit\&.
.RE
.PP
\fBgit-blame\fR(1)
.RS 4
Show what tha fuck revision n' lyricist last modified each line of a gangbangin' file\&.
.RE
.PP
\fBgit-cherry\fR(1)
.RS 4
Find commits yet ta be applied ta upstream\&.
.RE
.PP
\fBgit-count-objects\fR(1)
.RS 4
Count unpacked number of objects n' they disk consumption\&.
.RE
.PP
\fBgit-difftool\fR(1)
.RS 4
Show chizzlez rockin common diff tools\&.
.RE
.PP
\fBgit-fsck\fR(1)
.RS 4
Verifies tha connectivitizzle n' validitizzle of tha objects up in tha database\&.
.RE
.PP
\fBgit-get-tar-commit-id\fR(1)
.RS 4
Extract commit ID from a archive pimped rockin git\-archive\&.
.RE
.PP
\fBgit-help\fR(1)
.RS 4
Display help shiznit bout Git\&.
.RE
.PP
\fBgit-instaweb\fR(1)
.RS 4
Instantly browse yo' hustlin repository up in gitweb\&.
.RE
.PP
\fBgit-merge-tree\fR(1)
.RS 4
Show three\-way merge without touchin index\&.
.RE
.PP
\fBgit-rerere\fR(1)
.RS 4
Reuse recorded resolution of conflicted merges\&.
.RE
.PP
\fBgit-rev-parse\fR(1)
.RS 4
Pick up n' massage parameters\&.
.RE
.PP
\fBgit-show-branch\fR(1)
.RS 4
Show branches n' they commits\&.
.RE
.PP
\fBgit-verify-tag\fR(1)
.RS 4
Peep tha GPG signature of tags\&.
.RE
.PP
\fBgit-whatchanged\fR(1)
.RS 4
Show logs wit difference each commit introduces\&.
.RE
.PP
\fBgitweb\fR(1)
.RS 4
Git wizzy intercourse (web frontend ta Git repositories)\&.
.RE
.SS "Interactin wit Others"
.sp
These commandz is ta interact wit foreign SCM n' wit other playas via patch over e\-mail\&.
.PP
\fBgit-archimport\fR(1)
.RS 4
Import a Arch repository tha fuck into Git\&.
.RE
.PP
\fBgit-cvsexportcommit\fR(1)
.RS 4
Export a single commit ta a CVS checkout\&.
.RE
.PP
\fBgit-cvsimport\fR(1)
.RS 4
Salvage yo' data outta another SCM playas ludd ta hate\&.
.RE
.PP
\fBgit-cvsserver\fR(1)
.RS 4
A CVS server emulator fo' Git\&.
.RE
.PP
\fBgit-imap-send\fR(1)
.RS 4
Send a cold-ass lil collection of patches from stdin ta a IMAP folder\&.
.RE
.PP
\fBgit-p4\fR(1)
.RS 4
Import from n' submit ta Perforce repositories\&.
.RE
.PP
\fBgit-quiltimport\fR(1)
.RS 4
Applies a quilt patchset onto tha current branch\&.
.RE
.PP
\fBgit-request-pull\fR(1)
.RS 4
Generates a summary of pendin chizzles\&.
.RE
.PP
\fBgit-send-email\fR(1)
.RS 4
Send a cold-ass lil collection of patches as emails\&.
.RE
.PP
\fBgit-svn\fR(1)
.RS 4
Bidirectionizzle operation between a Subversion repository n' Git\&.
.RE
.SH "LOW-LEVEL COMMANDS (PLUMBING)"
.sp
Although Git includes its own porcelain layer, its low\-level commandz is sufficient ta support pimpment of alternatizzle porcelains\&. Developerz of such porcelains might start by readin bout \fBgit-update-index\fR(1) n' \fBgit-read-tree\fR(1)\&.
.sp
Da intercourse (input, output, set of options n' tha semantics) ta these low\-level commandz is meant ta be a shitload mo' stable than Porcelain level commands, cuz these commandz is primarily fo' scripted use\&. Da intercourse ta Porcelain commandz on tha other hand is subject ta chizzle up in order ta improve tha end user experience\&.
.sp
Da followin description divides tha low\-level commandz tha fuck into commandz dat manipulate objects (in tha repository, index, n' hustlin tree), commandz dat invigorate n' compare objects, n' commandz dat move objects n' references between repositories\&.
.SS "Manipulation commands"
.PP
\fBgit-apply\fR(1)
.RS 4
Apply a patch ta filez and/or ta tha index\&.
.RE
.PP
\fBgit-checkout-index\fR(1)
.RS 4
Copy filez from tha index ta tha hustlin tree\&.
.RE
.PP
\fBgit-commit-tree\fR(1)
.RS 4
Smoke a freshly smoked up commit object\&.
.RE
.PP
\fBgit-hash-object\fR(1)
.RS 4
Compute object ID n' optionally creates a funky-ass blob from a gangbangin' file\&.
.RE
.PP
\fBgit-index-pack\fR(1)
.RS 4
Build pack index file fo' a existin packed archive\&.
.RE
.PP
\fBgit-merge-file\fR(1)
.RS 4
Run a three\-way file merge\&.
.RE
.PP
\fBgit-merge-index\fR(1)
.RS 4
Run a merge fo' filez needin merging\&.
.RE
.PP
\fBgit-mktag\fR(1)
.RS 4
Creates a tag object\&.
.RE
.PP
\fBgit-mktree\fR(1)
.RS 4
Build a tree\-object from ls\-tree formatted text\&.
.RE
.PP
\fBgit-pack-objects\fR(1)
.RS 4
Smoke a packed archive of objects\&.
.RE
.PP
\fBgit-prune-packed\fR(1)
.RS 4
Remove extra objects dat is already up in pack files\&.
.RE
.PP
\fBgit-read-tree\fR(1)
.RS 4
Readz tree shiznit tha fuck into tha index\&.
.RE
.PP
\fBgit-symbolic-ref\fR(1)
.RS 4
Read, modify n' delete symbolic refs\&.
.RE
.PP
\fBgit-unpack-objects\fR(1)
.RS 4
Unpack objects from a packed archive\&.
.RE
.PP
\fBgit-update-index\fR(1)
.RS 4
Regista file contents up in tha hustlin tree ta tha index\&.
.RE
.PP
\fBgit-update-ref\fR(1)
.RS 4
Update tha object name stored up in a ref safely\&.
.RE
.PP
\fBgit-write-tree\fR(1)
.RS 4
Smoke a tree object from tha current index\&.
.RE
.SS "Interrogation commands"
.PP
\fBgit-cat-file\fR(1)
.RS 4
Provide content or type n' size shiznit fo' repository objects\&.
.RE
.PP
\fBgit-diff-files\fR(1)
.RS 4
Compares filez up in tha hustlin tree n' tha index\&.
.RE
.PP
\fBgit-diff-index\fR(1)
.RS 4
Compare a tree ta tha hustlin tree or index\&.
.RE
.PP
\fBgit-diff-tree\fR(1)
.RS 4
Compares tha content n' mode of blobs found via two tree objects\&.
.RE
.PP
\fBgit-for-each-ref\fR(1)
.RS 4
Output shiznit on each ref\&.
.RE
.PP
\fBgit-ls-files\fR(1)
.RS 4
Show shiznit bout filez up in tha index n' tha hustlin tree\&.
.RE
.PP
\fBgit-ls-remote\fR(1)
.RS 4
List references up in a remote repository\&.
.RE
.PP
\fBgit-ls-tree\fR(1)
.RS 4
List tha contentz of a tree object\&.
.RE
.PP
\fBgit-merge-base\fR(1)
.RS 4
Find as phat common ancestors as possible fo' a merge\&.
.RE
.PP
\fBgit-name-rev\fR(1)
.RS 4
Find symbolic names fo' given revs\&.
.RE
.PP
\fBgit-pack-redundant\fR(1)
.RS 4
Find redundant pack files\&.
.RE
.PP
\fBgit-rev-list\fR(1)
.RS 4
Lists commit objects up in reverse chronological order\&.
.RE
.PP
\fBgit-show-index\fR(1)
.RS 4
Show packed archive index\&.
.RE
.PP
\fBgit-show-ref\fR(1)
.RS 4
List references up in a local repository\&.
.RE
.PP
\fBgit-unpack-file\fR(1)
.RS 4
Creates a temporary file wit a funky-ass blob\(cqs contents\&.
.RE
.PP
\fBgit-var\fR(1)
.RS 4
Show a Git logical variable\&.
.RE
.PP
\fBgit-verify-pack\fR(1)
.RS 4
Validate packed Git archive files\&.
.RE
.sp
In general, tha invigorate commandz do not bust a nut on tha filez up in tha hustlin tree\&.
.SS "Synchin repositories"
.PP
\fBgit-daemon\fR(1)
.RS 4
A straight-up simple server fo' Git repositories\&.
.RE
.PP
\fBgit-fetch-pack\fR(1)
.RS 4
Receive missin objects from another repository\&.
.RE
.PP
\fBgit-http-backend\fR(1)
.RS 4
Server side implementation of Git over HTTP\&.
.RE
.PP
\fBgit-send-pack\fR(1)
.RS 4
Push objects over Git protocol ta another repository\&.
.RE
.PP
\fBgit-update-server-info\fR(1)
.RS 4
Update auxiliary info file ta help dumb servers\&.
.RE
.sp
Da followin is helper commandz used by tha above; end playas typically do not use dem directly\&.
.PP
\fBgit-http-fetch\fR(1)
.RS 4
Downlizzle from a remote Git repository via HTTP\&.
.RE
.PP
\fBgit-http-push\fR(1)
.RS 4
Push objects over HTTP/DAV ta another repository\&.
.RE
.PP
\fBgit-parse-remote\fR(1)
.RS 4
Routines ta help parsin remote repository access parameters\&.
.RE
.PP
\fBgit-receive-pack\fR(1)
.RS 4
Receive what tha fuck is pushed tha fuck into tha repository\&.
.RE
.PP
\fBgit-shell\fR(1)
.RS 4
Restricted login shell fo' Git\-only SSH access\&.
.RE
.PP
\fBgit-upload-archive\fR(1)
.RS 4
Send archive back ta git\-archive\&.
.RE
.PP
\fBgit-upload-pack\fR(1)
.RS 4
Send objects packed back ta git\-fetch\-pack\&.
.RE
.SS "Internal helper commands"
.sp
These is internal helper commandz used by other commands; end playas typically do not use dem directly\&.
.PP
\fBgit-check-attr\fR(1)
.RS 4
Display gitattributes shiznit\&.
.RE
.PP
\fBgit-check-ignore\fR(1)
.RS 4
Debug gitignore / exclude files\&.
.RE
.PP
\fBgit-check-mailmap\fR(1)
.RS 4
Show canonical names n' email addressez of contacts\&.
.RE
.PP
\fBgit-check-ref-format\fR(1)
.RS 4
Ensures dat a reference name is well formed\&.
.RE
.PP
\fBgit-column\fR(1)
.RS 4
Display data up in columns\&.
.RE
.PP
\fBgit-credential\fR(1)
.RS 4
Retrieve n' store user credentials\&.
.RE
.PP
\fBgit-credential-cache\fR(1)
.RS 4
Helper ta temporarily store passwordz up in memory\&.
.RE
.PP
\fBgit-credential-store\fR(1)
.RS 4
Helper ta store credentials on disk\&.
.RE
.PP
\fBgit-fmt-merge-msg\fR(1)
.RS 4
Produce a merge commit message\&.
.RE
.PP
\fBgit-mailinfo\fR(1)
.RS 4
Extracts patch n' authorshizzle from a single e\-mail message\&.
.RE
.PP
\fBgit-mailsplit\fR(1)
.RS 4
Simple UNIX mbox splitta program\&.
.RE
.PP
\fBgit-merge-one-file\fR(1)
.RS 4
Da standard helper program ta use wit git\-merge\-index\&.
.RE
.PP
\fBgit-patch-id\fR(1)
.RS 4
Compute unique ID fo' a patch\&.
.RE
.PP
\fBgit-sh-i18n\fR(1)
.RS 4
Git\(cqs i18n setup code fo' shell scripts\&.
.RE
.PP
\fBgit-sh-setup\fR(1)
.RS 4
Common Git shell script setup code\&.
.RE
.PP
\fBgit-stripspace\fR(1)
.RS 4
Remove unnecessary whitespace\&.
.RE
.SH "CONFIGURATION MECHANISM"
.sp
Git uses a simple text format ta store customizations dat is per repository n' is per user\&. Right back up in yo muthafuckin ass. Such a cold-ass lil configuration file may be lookin like this:
.sp
.if n \{\
.RS 4
.\}
.nf
#
# A \(aq#\(aq or \(aq;\(aq characta indicates a cold-ass lil comment\&.
#

; core variables
[core]
        ; Don\(aqt trust file modes
        filemode = false

; user identity
[user]
        name = "Junio C Hamano"
        email = "gitster@pobox\&.com"
.fi
.if n \{\
.RE
.\}
.sp
.sp
Various commandz read from tha configuration file n' adjust they operation accordingly\&. Right back up in yo muthafuckin ass. See \fBgit-config\fR(1) fo' a list n' mo' details bout tha configuration mechanism\&.
.SH "IDENTIFIER TERMINOLOGY"
.PP
<object>
.RS 4
Indicates tha object name fo' any type of object\&.
.RE
.PP
<blob>
.RS 4
Indicates a funky-ass blob object name\&.
.RE
.PP
<tree>
.RS 4
Indicates a tree object name\&.
.RE
.PP
<commit>
.RS 4
Indicates a cold-ass lil commit object name\&.
.RE
.PP
<tree\-ish>
.RS 4
Indicates a tree, commit or tag object name\& fo' realz. A command dat takes a <tree\-ish> argument ultimately wants ta operate on a <tree> object but automatically dereferences <commit> n' <tag> objects dat point at a <tree>\&.
.RE
.PP
<commit\-ish>
.RS 4
Indicates a cold-ass lil commit or tag object name\& fo' realz. A command dat takes a <commit\-ish> argument ultimately wants ta operate on a <commit> object but automatically dereferences <tag> objects dat point at a <commit>\&.
.RE
.PP
<type>
.RS 4
Indicates dat a object type is required\&. Currently one of:
blob,
tree,
commit, or
tag\&.
.RE
.PP
<file>
.RS 4
Indicates a gangbangin' filename \- almost always relatizzle ta tha root of tha tree structure
GIT_INDEX_FILE
raps about\&.
.RE
.SH "SYMBOLIC IDENTIFIERS"
.sp
Any Git command acceptin any <object> can also use tha followin symbolic notation:
.PP
HEAD
.RS 4
indicates tha head of tha current branch\&.
.RE
.PP
<tag>
.RS 4
a valid tag
\fIname\fR
(i\&.e\&. a
refs/tags/<tag>
reference)\&.
.RE
.PP
<head>
.RS 4
a valid head
\fIname\fR
(i\&.e\&. a
refs/heads/<head>
reference)\&.
.RE
.sp
For a mo' complete list of ways ta spell object names, peep "SPECIFYING REVISIONS" section up in \fBgitrevisions\fR(7)\&.
.SH "FILE/DIRECTORY STRUCTURE"
.sp
Please peep tha \fBgitrepository-layout\fR(5) document\&.
.sp
Read \fBgithooks\fR(5) fo' mo' details bout each hook\&.
.sp
Higher level SCMs may provide n' manage additionizzle shiznit up in tha $GIT_DIR\&.
.SH "TERMINOLOGY"
.sp
Please peep \fBgitglossary\fR(7)\&.
.SH "ENVIRONMENT VARIABLES"
.sp
Various Git commandz use tha followin environment variables:
.SS "Da Git Repository"
.sp
These environment variablez apply ta \fIall\fR core Git commands\&. Nb: it is worth notin dat they may be used/overridden by SCMS chillin above Git so take care if rockin Cogito etc\&.
.PP
\fIGIT_INDEX_FILE\fR
.RS 4
This environment allows tha justification of a alternate index file\&. If not specified, tha default of
$GIT_DIR/index
is used\&.
.RE
.PP
\fIGIT_OBJECT_DIRECTORY\fR
.RS 4
If tha object storage directory is specified via dis environment variable then tha sha1 directories is pimped underneath \- otherwise tha default
$GIT_DIR/objects
directory is used\&.
.RE
.PP
\fIGIT_ALTERNATE_OBJECT_DIRECTORIES\fR
.RS 4
Cuz of tha immutable nature of Git objects, oldschool objects can be archived tha fuck into shared, read\-only directories\&. This variable specifies a ":" separated (on Windows ";" separated) list of Git object directories which can be used ta search fo' Git objects\&. New objects aint gonna be freestyled ta these directories\&.
.RE
.PP
\fIGIT_DIR\fR
.RS 4
If the
\fIGIT_DIR\fR
environment variable is set then it specifies a path ta use instead of tha default
\&.git
for tha base of tha repository\&. The
\fI\-\-git\-dir\fR
command\-line option also sets dis value\&.
.RE
.PP
\fIGIT_WORK_TREE\fR
.RS 4
Set tha path ta tha root of tha hustlin tree\&. This can also be controlled by the
\fI\-\-work\-tree\fR
command line option n' tha core\&.worktree configuration variable\&.
.RE
.PP
\fIGIT_NAMESPACE\fR
.RS 4
Set tha Git namespace; see
\fBgitnamespaces\fR(7)
for details\&. The
\fI\-\-namespace\fR
command\-line option also sets dis value\&.
.RE
.PP
\fIGIT_CEILING_DIRECTORIES\fR
.RS 4
This should be a cold-ass lil colon\-separated list of absolute paths\&. If set, it aint nuthin but a list of directories dat Git should not chdir up tha fuck into while lookin fo' a repository directory (useful fo' excludin slow\-loadin network directories)\&. Well shiiiit, it aint gonna exclude tha current hustlin directory or a GIT_DIR set on tha command line or up in tha environment\&. Normally, Git has ta read tha entries up in dis list n' resolve any symlink dat might be present up in order ta compare dem wit tha current directory\&. But fuck dat shiznit yo, tha word on tha street is dat if even dis access is slow, you can add a empty entry ta tha list ta tell Git dat tha subsequent entries is not symlinks n' needn\(cqt be resolved; e\&.g\&.,
\fIGIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink\fR\&.
.RE
.PP
\fIGIT_DISCOVERY_ACROSS_FILESYSTEM\fR
.RS 4
When run up in a gangbangin' finger-lickin' directory dat aint gots "\&.git" repository directory, Git tries ta find such a gangbangin' finger-lickin' directory up in tha parent directories ta find tha top of tha hustlin tree yo, but by default it do not cross filesystem boundaries\&. This environment variable can be set ta legit ta tell Git not ta stop at filesystem boundaries\&. Like
\fIGIT_CEILING_DIRECTORIES\fR, dis aint gonna affect a explicit repository directory set via
\fIGIT_DIR\fR
or on tha command line\&.
.RE
.SS "Git Commits"
.PP
\fIGIT_AUTHOR_NAME\fR, \fIGIT_AUTHOR_EMAIL\fR, \fIGIT_AUTHOR_DATE\fR, \fIGIT_COMMITTER_NAME\fR, \fIGIT_COMMITTER_EMAIL\fR, \fIGIT_COMMITTER_DATE\fR, \fIEMAIL\fR
.RS 4
see
\fBgit-commit-tree\fR(1)
.RE
.SS "Git Diffs"
.PP
\fIGIT_DIFF_OPTS\fR
.RS 4
Only valid settin is "\-\-unified=??" or "\-u??" ta set tha number of context lines shown when a unified diff is pimped\&. This takes precedence over any "\-U" or "\-\-unified" option value passed on tha Git diff command line\&.
.RE
.PP
\fIGIT_EXTERNAL_DIFF\fR
.RS 4
When tha environment variable
\fIGIT_EXTERNAL_DIFF\fR
is set, tha program named by it is called, instead of tha diff invocation busted lyrics bout above\&. For a path dat be added, removed, or modified,
\fIGIT_EXTERNAL_DIFF\fR
is called wit 7 parameters:
.sp
.if n \{\
.RS 4
.\}
.nf
path old\-file old\-hex old\-mode new\-file new\-hex new\-mode
.fi
.if n \{\
.RE
.\}
.sp
where:
.RE
.PP
<old|new>\-file
.RS 4
are filez GIT_EXTERNAL_DIFF can use ta read tha contentz of <old|new>,
.RE
.PP
<old|new>\-hex
.RS 4
are tha 40\-hexdigit SHA\-1 hashes,
.RE
.PP
<old|new>\-mode
.RS 4
are tha octal representation of tha file modes\&.
.sp
Da file parametas can point all up in tha user\(cqs hustlin file (e\&.g\&.
new\-file
in "git\-diff\-files"),
/dev/null
(e\&.g\&.
old\-file
when a freshly smoked up file be added), or a temporary file (e\&.g\&.
old\-file
in tha index)\&.
\fIGIT_EXTERNAL_DIFF\fR
should not worry bout unlinkin tha temporary file \-\-\- it is removed when
\fIGIT_EXTERNAL_DIFF\fR
exits\&.
.sp
For a path dat is unmerged,
\fIGIT_EXTERNAL_DIFF\fR
is called wit 1 parameter, <path>\&.
.sp
For each path
\fIGIT_EXTERNAL_DIFF\fR
is called, two environment variables,
\fIGIT_DIFF_PATH_COUNTER\fR
and
\fIGIT_DIFF_PATH_TOTAL\fR
are set\&.
.RE
.PP
\fIGIT_DIFF_PATH_COUNTER\fR
.RS 4
A 1\-based counta incremented by one fo' every last muthafuckin path\&.
.RE
.PP
\fIGIT_DIFF_PATH_TOTAL\fR
.RS 4
Da total number of paths\&.
.RE
.SS "other"
.PP
\fIGIT_MERGE_VERBOSITY\fR
.RS 4
A number controllin tha amount of output shown by tha recursive merge game\&. Overrides merge\&.verbosity\&. Right back up in yo muthafuckin ass. See
\fBgit-merge\fR(1)
.RE
.PP
\fIGIT_PAGER\fR
.RS 4
This environment variable overrides
$PAGER\&. If it is set ta a empty strang or ta tha value "cat", Git aint gonna launch a pager\&. Right back up in yo muthafuckin ass. See also the
core\&.pager
option in
\fBgit-config\fR(1)\&.
.RE
.PP
\fIGIT_EDITOR\fR
.RS 4
This environment variable overrides
$EDITOR
and
$VISUAL\&. Well shiiiit, it is used by nuff muthafuckin Git commandz when, on interactizzle mode, a editor is ta be launched\&. Right back up in yo muthafuckin ass. See also
\fBgit-var\fR(1)
and the
core\&.editor
option in
\fBgit-config\fR(1)\&.
.RE
.PP
\fIGIT_SSH\fR
.RS 4
If dis environment variable is set then
\fIgit fetch\fR
and
\fIgit push\fR
will use dis command instead of
\fIssh\fR
when they need ta connect ta a remote system\&. The
\fI$GIT_SSH\fR
command is ghon be given exactly two or four arguments: the
\fIusername@host\fR
(or just
\fIhost\fR) from tha URL n' tha shell command ta execute on dat remote system, optionally preceded by
\fI\-p\fR
(literally) n' the
\fIport\fR
from tha URL when it specifies suttin' other than tha default SSH port\&.
.sp
To pass options ta tha program dat you wanna list up in GIT_SSH yo big-ass booty is ghon need ta wrap tha program n' options tha fuck into a gangbangin' finger-lickin' dirty-ass shell script, then set GIT_SSH ta refer ta tha shell script\&.
.sp
Usually it is easier ta configure any desired options all up in yo' personal
\&.ssh/config
file\&. Please consult yo' ssh documentation fo' further details\&.
.RE
.PP
\fIGIT_ASKPASS\fR
.RS 4
If dis environment variable is set, then Git commandz which need ta acquire passwordz or passphrases (e\&.g\&. fo' HTTP or IMAP authentication) will call dis program wit a suitable prompt as command line argument n' read tha password from its STDOUT\&. Right back up in yo muthafuckin ass. See also the
\fIcore\&.askpass\fR
option in
\fBgit-config\fR(1)\&.
.RE
.PP
\fIGIT_CONFIG_NOSYSTEM\fR
.RS 4
Whether ta skip readin settings from tha system\-wide
$(prefix)/etc/gitconfig
file\&. This environment variable can be used along with
$HOME
and
$XDG_CONFIG_HOME
to create a predictable environment fo' a picky script, or you can set it temporarily ta avoid rockin a funky-ass buggy
/etc/gitconfig
file while waitin fo' one of mah thugs wit sufficient permissions ta fix it\&.
.RE
.PP
\fIGIT_FLUSH\fR
.RS 4
If dis environment variable is set ta "1", then commandz such as
\fIgit blame\fR
(in incremenstrual mode),
\fIgit rev\-list\fR,
\fIgit log\fR,
\fIgit check\-attr\fR
and
\fIgit check\-ignore\fR
will force a gangbangin' flush of tha output stream afta each record done been flushed\&. If dis variable is set ta "0", tha output of these commandz is ghon be done rockin straight-up buffered I/O\&. If dis environment variable aint set, Git will chizzle buffered or record\-oriented flushin based on whether stdout appears ta be repimped up ta a gangbangin' file or not\&.
.RE
.PP
\fIGIT_TRACE\fR
.RS 4
If dis variable is set ta "1", "2" or "true" (comparison is case insensitive), Git will print
trace:
lyrics on stderr spittin some lyrics ta bout alias expansion, built\-in command execution n' external command execution\&. If dis variable is set ta a integer value pimped outa than 1 n' lower than 10 (strictly) then Git will interpret dis value as a open file descriptor n' will try ta write tha trace lyrics tha fuck into dis file descriptor\& fo' realz. Alternatively, if dis variable is set ta a absolute path (startin wit a
\fI/\fR
character), Git will interpret dis as a gangbangin' file path n' will try ta write tha trace lyrics tha fuck into it\&.
.RE
.PP
\fIGIT_TRACE_PACK_ACCESS\fR
.RS 4
If dis variable is set ta a path, a gangbangin' file is ghon be pimped all up in tha given path loggin all accesses ta any packs\&. For each access, tha pack file name n' a offset up in tha pack is recorded\&. This may be helpful fo' shitshootin some pack\-related performizzle problems\&.
.RE
.PP
\fIGIT_TRACE_PACKET\fR
.RS 4
If dis variable is set, it shows a trace of all packets comin up in or outta a given program\&. This can help wit debuggin object negotiation or other protocol issues\&. Tracin is turned off at a packet startin wit "PACK"\&.
.RE
.PP
GIT_LITERAL_PATHSPECS
.RS 4
Settin dis variable to
1
will cause Git ta treat all pathspecs literally, rather than as glob patterns\&. For example, hustlin
GIT_LITERAL_PATHSPECS=1 git log \-\- \(aq*\&.c\(aq
will search fo' commits dat bust a nut on tha path
*\&.c, not any paths dat tha glob
*\&.c
matches\&. Yo ass might want dis if yo ass is feedin literal paths ta Git (e\&.g\&., paths previously given ta you by
git ls\-tree,
\-\-raw
diff output, etc)\&.
.RE
.PP
GIT_GLOB_PATHSPECS
.RS 4
Settin dis variable to
1
will cause Git ta treat all pathspecs as glob patterns (aka "glob" magic)\&.
.RE
.PP
GIT_NOGLOB_PATHSPECS
.RS 4
Settin dis variable to
1
will cause Git ta treat all pathspecs as literal (aka "literal" magic)\&.
.RE
.PP
GIT_ICASE_PATHSPECS
.RS 4
Settin dis variable to
1
will cause Git ta treat all pathspecs as case\-insensitive\&.
.RE
.PP
\fIGIT_REFLOG_ACTION\fR
.RS 4
When a ref is updated, reflog entries is pimped ta keep track of tha reason why tha ref was updated (which is typically tha name of tha high\-level command dat updated tha ref), up in addizzle ta tha oldschool n' freshly smoked up jointz of tha ref\& fo' realz. A scripted Porcelain command can use set_reflog_action helper function in
git\-sh\-setup
to set its name ta dis variable when it is invoked as tha top level command by tha end user, ta be recorded up in tha body of tha reflog\&.
.RE
.SH "DISCUSSION"
.sp
Mo' detail on tha followin be available from tha \m[blue]\fBGit concepts chapta of tha user\-manual\fR\m[]\&\s-2\u[3]\d\s+2 n' \fBgitcore-tutorial\fR(7)\&.
.sp
A Git project normally consistz of a hustlin directory wit a "\&.git" subdirectory all up in tha top level\&. Da \&.git directory gotz nuff, among other thangs, a cold-ass lil compressed object database representin tha complete history of tha project, a "index" file which links dat history ta tha current contentz of tha hustlin tree, n' named pointas tha fuck into dat history like fuckin tags n' branch heads\&.
.sp
Da object database gotz nuff objectz of three main types: blobs, which hold file data; trees, which point ta blobs n' other trees ta build up directory hierarchies; n' commits, which each reference a single tree n' some number of parent commits\&.
.sp
Da commit, equivalent ta what tha fuck other systems call a "changeset" or "version", represents a step up in tha project\(cqs history, n' each parent represents a immediately precedin step\&. Commits wit mo' than one parent represent mergez of independent linez of pimpment\&.
.sp
All objects is named by tha SHA\-1 hash of they contents, normally freestyled as a strang of 40 hex digits\&. Right back up in yo muthafuckin ass. Such names is globally unique\&. Da entire history leadin up ta a cold-ass lil commit can be vouched fo' by signin just dat commit\& fo' realz. A fourth object type, tha tag, is provided fo' dis purpose\&.
.sp
When first pimped, objects is stored up in individual filez yo, but fo' efficiency may lata be compressed together tha fuck into "pack files"\&.
.sp
Named pointas called refs mark bangin-ass points up in history\& fo' realz. A ref may contain tha SHA\-1 name of a object or tha name of another ref\&. Refs wit names beginnin ref/head/ contain tha SHA\-1 name of da most thugged-out recent commit (or "head") of a funky-ass branch under pimpment\&. Right back up in yo muthafuckin ass. SHA\-1 namez of tagz of interest is stored under ref/tags/\& fo' realz. A special ref named HEAD gotz nuff tha name of tha currently checked\-out branch\&.
.sp
Da index file is initialized wit a list of all paths and, fo' each path, a funky-ass blob object n' a set of attributes\&. Da blob object represents tha contentz of tha file az of tha head of tha current branch\&. Da attributes (last modified time, size, etc\&.) is taken from tha correspondin file up in tha hustlin tree\&. Right back up in yo muthafuckin ass. Subsequent chizzlez ta tha hustlin tree can be found by comparin these attributes\&. Da index may be updated wit freshly smoked up content, n' freshly smoked up commits may be pimped from tha content stored up in tha index\&.
.sp
Da index be also capable of storin multiple entries (called "stages") fo' a given pathname\&. These stages is used ta hold tha various unmerged version of a gangbangin' file when a merge is up in progress\&.
.SH "FURTHER DOCUMENTATION"
.sp
See tha references up in tha "description" section ta git started rockin Git\&. Da followin is probably mo' detail than necessary fo' a gangbangin' first\-time user\&.
.sp
Da \m[blue]\fBGit concepts chapta of tha user\-manual\fR\m[]\&\s-2\u[3]\d\s+2 n' \fBgitcore-tutorial\fR(7) both provide introductions ta tha underlyin Git architecture\&.
.sp
See \fBgitworkflows\fR(7) fo' a overview of recommended workflows\&.
.sp
See also tha \m[blue]\fBhowto\fR\m[]\&\s-2\u[4]\d\s+2 documents fo' some useful examples\&.
.sp
Da internals is documented up in tha \m[blue]\fBGit API documentation\fR\m[]\&\s-2\u[5]\d\s+2\&.
.sp
Users migratin from CVS may also wanna read \fBgitcvs-migration\fR(7)\&.
.SH "AUTHORS"
.sp
Git was started by Linus Torvalds, n' is currently maintained by Junio C Hamano\&. Numerous contributions have come from tha Git mailin list <\m[blue]\fBgit@vger\&.kernel\&.org\fR\m[]\&\s-2\u[6]\d\s+2>\&. \m[blue]\fBhttp://www\&.ohloh\&.net/p/git/contributors/summary\fR\m[] gives you a mo' complete list of contributors\&.
.sp
If you gotz a cold-ass lil clone of git\&.git itself, tha output of \fBgit-shortlog\fR(1) n' \fBgit-blame\fR(1) can show you tha authors fo' specific partz of tha project\&.
.SH "REPORTING BUGS"
.sp
Report bugs ta tha Git mailin list <\m[blue]\fBgit@vger\&.kernel\&.org\fR\m[]\&\s-2\u[6]\d\s+2> where tha pimpment n' maintenizzle is primarily done\&. Yo ass do not gotta be subscribed ta tha list ta bust a message there\&.
.SH "SEE ALSO"
.sp
\fBgittutorial\fR(7), \fBgittutorial-2\fR(7), \m[blue]\fBEverydizzle Git\fR\m[]\&\s-2\u[1]\d\s+2, \fBgitcvs-migration\fR(7), \fBgitglossary\fR(7), \fBgitcore-tutorial\fR(7), \fBgitcli\fR(7), \m[blue]\fBDa Git User\(cqs Manual\fR\m[]\&\s-2\u[2]\d\s+2, \fBgitworkflows\fR(7)
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
.SH "NOTES"
.IP " 1." 4
Everydizzle Git
.RS 4
\%file:///usr/share/doc/git/everyday.html
.RE
.IP " 2." 4
Git User\(cqs Manual
.RS 4
\%file:///usr/share/doc/git/user-manual.html
.RE
.IP " 3." 4
Git concepts chapta of tha user-manual
.RS 4
\%file:///usr/share/doc/git/user-manual.html#git-concepts
.RE
.IP " 4." 4
howto
.RS 4
\%file:///usr/share/doc/git/howto-index.html
.RE
.IP " 5." 4
Git API documentation
.RS 4
\%file:///usr/share/doc/git/technical/api-index.html
.RE
.IP " 6." 4
git@vger.kernel.org
.RS 4
\%mailto:git@vger.kernel.org
.RE
