.TH cmakeprops 1 "February 11, 2014" "cmake 2.8.12.2"
.SH NAME
.PP
cmakeprops \- Reference of CMake properties.

.SH PROPERTIES
.PP
.nf
  CMake Propertizzles \- Propertizzles supported by CMake, tha Cross\-Platform Makefile Generator.
.fi

.PP
This is tha documentation fo' tha propertizzles supported by CMake. Propertizzles can have different scopes. They can either be assigned ta a source file, a gangbangin' finger-lickin' directory, a target or globally ta CMake. By modifyin tha jointz of propertizzles tha behaviour of tha build system can be customized.

.SH PROPERTIES OF GLOBAL SCOPE
.TP
.B ALLOW_DUPLICATE_CUSTOM_TARGETS
Allow duplicate custom targets ta be pimped.

Normally CMake requires dat all targets built up in a project have globally unique logical names (see policy CMP0002).  This is necessary ta generate meaningful project file names up in Xcode n' VS IDE generators.  It also allows tha target names ta be referenced unambiguously.


Makefile generators is capable of supportin duplicate custom target names.  For projects dat care only bout Makefile generators n' do not wish ta support Xcode or VS IDE generators, one may set dis property ta legit ta allow duplicate custom targets, n' you can put dat on yo' toast.  Da property allows multiple add_custom_target command calls up in different directories ta specify tha same target name.  But fuck dat shiznit yo, tha word on tha street is dat settin dis property will cause non\-Makefile generators ta produce a error n' refuse ta generate tha project.

.TP
.B AUTOMOC_TARGETS_FOLDER
Name of FOLDER fo' *_automoc targets dat is added automatically by CMake fo' targets fo' which AUTOMOC is enabled.

If not set, CMake uses tha FOLDER property of tha parent target as a thugged-out default value fo' dis property. Right back up in yo muthafuckin ass. See also tha documentation fo' tha FOLDER target property n' tha AUTOMOC target property.

.TP
.B DEBUG_CONFIGURATIONS
Specify which configurations is fo' debugging.

Da value must be a semi\-colon separated list of configuration names.  Currently dis property is used only by tha target_link_libraries command (see its documentation fo' details).  Additionizzle uses may be defined up in tha future.  


This property must be set all up in tha top level of tha project n' before tha straight-up original gangsta target_link_libraries command invocation. I aint talkin' bout chicken n' gravy biatch.  If any entry up in tha list do not match a valid configuration fo' tha project tha behavior is undefined.

.TP
.B DISABLED_FEATURES
List of features which is disabled durin tha CMake run.

List of features which is disabled durin tha CMake run. I aint talkin' bout chicken n' gravy biatch. By default it gotz nuff tha namez of all packages which was not found. Y'all KNOW dat shit, muthafucka! This is determined rockin tha <NAME>_FOUND variables. Packages which is searched QUIET is not listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. A project can add its own features ta dis list. This property is used by tha macros up in FeatureSummary.cmake.

.TP
.B ENABLED_FEATURES
List of features which is enabled durin tha CMake run.

List of features which is enabled durin tha CMake run. I aint talkin' bout chicken n' gravy biatch. By default it gotz nuff tha namez of all packages which was found. Y'all KNOW dat shit, muthafucka! This is determined rockin tha <NAME>_FOUND variables. Packages which is searched QUIET is not listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. A project can add its own features ta dis list. This property is used by tha macros up in FeatureSummary.cmake.

.TP
.B ENABLED_LANGUAGES
Read\-only property dat gotz nuff tha list of currently enabled languages

Set ta list of currently enabled languages.

.TP
.B FIND_LIBRARY_USE_LIB64_PATHS
Whether FIND_LIBRARY should automatically search lib64 directories.

FIND_LIBRARY_USE_LIB64_PATHS be a funky-ass boolean specifyin whether tha FIND_LIBRARY command should automatically search tha lib64 variant of directories called lib up in tha search path when buildin 64\-bit binaries.

.TP
.B FIND_LIBRARY_USE_OPENBSD_VERSIONING
Whether FIND_LIBRARY should find OpenBSD\-style shared libraries.

This property be a funky-ass boolean specifyin whether tha FIND_LIBRARY command should find shared libraries wit OpenBSD\-style versioned extension: ".so.<major>.<minor>".  Da property is set ta legit on OpenBSD n' false on other platforms.

.TP
.B GLOBAL_DEPENDS_DEBUG_MODE
Enable global target dependency graph debug mode.

CMake automatically analyzes tha global inter\-target dependency graph all up in tha beginnin of natizzle build system generation. I aint talkin' bout chicken n' gravy biatch.  This property causes it ta display detailz of its analysis ta stderr.

.TP
.B GLOBAL_DEPENDS_NO_CYCLES
Disallow global target dependency graph cycles.

CMake automatically analyzes tha global inter\-target dependency graph all up in tha beginnin of natizzle build system generation. I aint talkin' bout chicken n' gravy biatch.  It reports a error if tha dependency graph gotz nuff a cold-ass lil cycle dat do not consist of all STATIC library targets, n' you can put dat on yo' toast.  This property  drops some lyrics ta CMake ta disallow all cyclez straight-up, even among static libraries.

.TP
.B IN_TRY_COMPILE
Read\-only property dat is legit durin a try\-compile configuration.

True when buildin a project inside a TRY_COMPILE or TRY_RUN command.

.TP
.B PACKAGES_FOUND
List of packages which was found durin tha CMake run.

List of packages which was found durin tha CMake run. I aint talkin' bout chicken n' gravy biatch. Whether a package has been found is determined rockin tha <NAME>_FOUND variables.

.TP
.B PACKAGES_NOT_FOUND
List of packages which was not found durin tha CMake run.

List of packages which was not found durin tha CMake run. I aint talkin' bout chicken n' gravy biatch. Whether a package has been found is determined rockin tha <NAME>_FOUND variables.

.TP
.B PREDEFINED_TARGETS_FOLDER
Name of FOLDER fo' targets dat is added automatically by CMake.

If not set, CMake uses "CMakePredefinedTargets" as a thugged-out default value fo' dis property. Targets like fuckin INSTALL, PACKAGE n' RUN_TESTS is ghon be organized tha fuck into dis FOLDER. Right back up in yo muthafuckin ass. See also tha documentation fo' tha FOLDER target property.

.TP
.B REPORT_UNDEFINED_PROPERTIES
If set, report any undefined propertizzles ta dis file.

If dis property is set ta a gangbangin' filename then when CMake runs it will report any propertizzles or variablez dat was accessed but not defined tha fuck into tha filename specified up in dis property.

.TP
.B RULE_LAUNCH_COMPILE
Specify a launcher fo' compile rules.

Makefile generators prefix compila commandz wit tha given launcher command line.  This is intended ta allow launchers ta intercept build problems wit high granularity.  Non\-Makefile generators currently ignore dis property.

.TP
.B RULE_LAUNCH_CUSTOM
Specify a launcher fo' custom rules.

Makefile generators prefix custom commandz wit tha given launcher command line.  This is intended ta allow launchers ta intercept build problems wit high granularity.  Non\-Makefile generators currently ignore dis property.

.TP
.B RULE_LAUNCH_LINK
Specify a launcher fo' link rules.

Makefile generators prefix link n' archive commandz wit tha given launcher command line.  This is intended ta allow launchers ta intercept build problems wit high granularity.  Non\-Makefile generators currently ignore dis property.

.TP
.B RULE_MESSAGES
Specify whether ta report a message fo' each make rule.

This property specifies whether Makefile generators should add a progress message describin what tha fuck each build rule do.  If tha property aint set tha default is ON.  Set tha property ta OFF ta disable granular lyrics n' report only as each target completes.  This is intended ta allow scripted buildz ta avoid tha build time cost of detailed reports, n' you can put dat on yo' toast.  If a CMAKE_RULE_MESSAGES cache entry exists its value initializes tha value of dis property.  Non\-Makefile generators currently ignore dis property.

.TP
.B TARGET_ARCHIVES_MAY_BE_SHARED_LIBS
Set if shared libraries may be named like archives.

On AIX shared libraries may be named "lib<name>.a".  This property is set ta legit on such platforms.

.TP
.B TARGET_SUPPORTS_SHARED_LIBS
Do tha target platform support shared libraries.

TARGET_SUPPORTS_SHARED_LIBS be a funky-ass boolean specifyin whether tha target platform supports shared libraries. Put ya muthafuckin choppers up if ya feel dis! Basically all current general general purpose OS do so, tha exception is probably embedded systems wit no or special OSs.

.TP
.B USE_FOLDERS
Use tha FOLDER target property ta organize targets tha fuck into folders.

If not set, CMake treats dis property as OFF by default. CMake generators dat is capable of organizin tha fuck into a hierarchy of foldaz use tha jointz of tha FOLDER target property ta name dem folders. Right back up in yo muthafuckin ass. See also tha documentation fo' tha FOLDER target property.

.TP
.B __CMAKE_DELETE_CACHE_CHANGE_VARS_
Internal property

Used ta detect compila chizzles, Do not set.

.SH PROPERTIES ON DIRECTORIES
.TP
.B ADDITIONAL_MAKE_CLEAN_FILES
Additionizzle filez ta clean durin tha make clean stage.

A list of filez dat is ghon be cleaned as a part of tha "make clean" stage. 

.TP
.B CACHE_VARIABLES
List of cache variablez available up in tha current directory.

This read\-only property specifies tha list of CMake cache variablez currently defined. Y'all KNOW dat shit, muthafucka!  It be intended fo' debuggin purposes.

.TP
.B CLEAN_NO_CUSTOM
Should tha output of custom commandz be left.

If dis is legit then tha outputz of custom commandz fo' dis directory aint gonna be removed durin tha "make clean" stage. 

.TP
.B COMPILE_DEFINITIONS
Preprocessor definitions fo' compilin a gangbangin' finger-lickin' directoryz sources.

Da COMPILE_DEFINITIONS property may be set ta a semicolon\-separated list of preprocessor definitions rockin tha syntax VAR or VAR=value.  Function\-style definitions is not supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  CMake will automatically escape tha value erectly fo' tha natizzle build system (note dat CMake language syntax may require escapes ta specify some joints).  This property may be set on a per\-configuration basis rockin tha name COMPILE_DEFINITIONS_<CONFIG> where <CONFIG> be a upper\-case name (ex. "COMPILE_DEFINITIONS_DEBUG").  This property is ghon be initialized up in each directory by its value up in tha directoryz parent.


CMake will automatically drop some definitions dat is not supported by tha natizzle build tool.  Da VS6 IDE do not support definizzle joints wit spaces (but NMake do).


Disclaimer: Most natizzle build tools have skanky support fo' escapin certain joints, n' you can put dat on yo' toast.  CMake has work\-aroundz fo' nuff cases but some joints may just not be possible ta pass erectly.  If a value do not seem ta be escaped erectly, do not attempt ta work\-around tha problem by addin escape sequences ta tha value.  Yo crazy-ass work\-around may break up in a gangbangin' future version of CMake dat has improved escape support.  Instead consider definin tha macro up in a (configured) header file.  Then report tha limitation. I aint talkin' bout chicken n' gravy biatch.  Known limitations include:


.nf
  #          \- fucked up almost everywhere
  ;          \- fucked up in VS IDE 7.0 n' Borland Makefiles
  ,          \- fucked up in VS IDE
  %          \- fucked up in some cases up in NMake
  & |        \- fucked up in some cases on MinGW
  ^ < > \\"   \- fucked up in most Make tools on Windows
.fi

CMake do not reject these joints outright cuz they do work up in some cases.  Use wit caution. I aint talkin' bout chicken n' gravy biatch.  

.TP
.B COMPILE_DEFINITIONS_<CONFIG>
Per\-configuration preprocessor definitions up in a gangbangin' finger-lickin' directory.

This is tha configuration\-specific version of COMPILE_DEFINITIONS.  This property is ghon be initialized up in each directory by its value up in tha directoryz parent.


.TP
.B COMPILE_OPTIONS
List of options ta pass ta tha compiler.

This property specifies tha list of directories given so far fo' dis property.  This property exists on directories n' targets.


Da target property joints is used by tha generators ta set tha options fo' tha compiler.


Contentz of COMPILE_OPTIONS may use "generator expressions" wit tha syntax "$<...>".  Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

.TP
.B DEFINITIONS
For CMake 2.4 compatibilitizzle only.  Use COMPILE_DEFINITIONS instead.

This read\-only property specifies tha list of flags given so far ta tha add_definitions command. Y'all KNOW dat shit, muthafucka!  It be intended fo' debuggin purposes.  Use tha COMPILE_DEFINITIONS instead.

.TP
.B EXCLUDE_FROM_ALL
Exclude tha directory from tha all target of its parent.

A property on a gangbangin' finger-lickin' directory dat indicates if its targets is excluded from tha default build target. If it is not, then wit a Makefile fo' example typin make will cause tha targets ta be built. Da same concept applies ta tha default build of other generators.

.TP
.B IMPLICIT_DEPENDS_INCLUDE_TRANSFORM
Specify #include line transforms fo' dependencies up in a gangbangin' finger-lickin' directory.

This property specifies rulez ta transform macro\-like #include lines durin implicit dependency scannin of C n' C++ source files.  Da list of rulez must be semicolon\-separated wit each entry of tha form "A_MACRO(%)=value\-with\-%" (the % must be literal).  Durin dependency scannin occurrencez of A_MACRO(...) on #include lines is ghon be replaced by tha value given wit tha macro argument substituted fo' '%'.  For example, tha entry


.nf
  MYDIR(%)=<mydir/%>
.fi

will convert linez of tha form


.nf
  #include MYDIR(myheader.h)
.fi

to


.nf
  #include <mydir/myheader.h>
.fi

allowin tha dependency ta be followed.


This property applies ta sources up in all targets within a gangbangin' finger-lickin' directory.  Da property value is initialized up in each directory by its value up in tha directoryz parent.

.TP
.B INCLUDE_DIRECTORIES
List of preprocessor include file search directories.

This property specifies tha list of directories given so far ta tha include_directories command. Y'all KNOW dat shit, muthafucka!  This property exists on directories n' targets, n' you can put dat on yo' toast.  In addizzle ta acceptin joints from tha include_directories command, joints may be set directly on any directory or any target rockin tha set_property command. Y'all KNOW dat shit, muthafucka!  A target gets its initial value fo' dis property from tha value of tha directory property.  A directory gets its initial value from its parent directory if it has one.  Both directory n' target property joints is adjusted by calls ta tha include_directories command.


Da target property joints is used by tha generators ta set tha include paths fo' tha compila n' shit.  See also tha include_directories command.

.TP
.B INCLUDE_REGULAR_EXPRESSION
Include file scannin regular expression.

This read\-only property specifies tha regular expression used durin dependency scannin ta match include filez dat should be followed. Y'all KNOW dat shit, muthafucka!  See tha include_regular_expression command.

.TP
.B INTERPROCEDURAL_OPTIMIZATION
Enable interprocedural optimization fo' targets up in a gangbangin' finger-lickin' directory.

If set ta true, enablez interprocedural optimizations if they is known ta be supported by tha compiler.

.TP
.B INTERPROCEDURAL_OPTIMIZATION_<CONFIG>
Per\-configuration interprocedural optimization fo' a gangbangin' finger-lickin' directory.

This be a per\-configuration version of INTERPROCEDURAL_OPTIMIZATION.  If set, dis property overrides tha generic property fo' tha named configuration.

.TP
.B LINK_DIRECTORIES
List of linker search directories.

This read\-only property specifies tha list of directories given so far ta tha link_directories command. Y'all KNOW dat shit, muthafucka!  It be intended fo' debuggin purposes.

.TP
.B LISTFILE_STACK
Da current stack of listfilez bein processed.

This property is mainly useful when tryin ta debug errors up in yo' CMake scripts, n' you can put dat on yo' toast. Well shiiiit, it returns a list of what tha fuck list filez is currently bein processed, up in order n' shit. Right back up in yo muthafuckin ass. So if one listfile do a INCLUDE command then dat is effectively pushin tha included listfile onto tha stack.

.TP
.B MACROS
List of macro commandz available up in tha current directory.

This read\-only property specifies tha list of CMake macros currently defined. Y'all KNOW dat shit, muthafucka!  It be intended fo' debuggin purposes.  See tha macro command.

.TP
.B PARENT_DIRECTORY
Source directory dat added current subdirectory.

This read\-only property specifies tha source directory dat added tha current source directory as a subdirectory of tha build. Y'all KNOW dat shit, muthafucka!  In tha top\-level directory tha value is tha empty\-string.

.TP
.B RULE_LAUNCH_COMPILE
Specify a launcher fo' compile rules.

See tha global property of tha same name fo' details.  This overrides tha global property fo' a gangbangin' finger-lickin' directory.

.TP
.B RULE_LAUNCH_CUSTOM
Specify a launcher fo' custom rules.

See tha global property of tha same name fo' details.  This overrides tha global property fo' a gangbangin' finger-lickin' directory.

.TP
.B RULE_LAUNCH_LINK
Specify a launcher fo' link rules.

See tha global property of tha same name fo' details.  This overrides tha global property fo' a gangbangin' finger-lickin' directory.

.TP
.B TEST_INCLUDE_FILE
A cmake file dat is ghon be included when ctest is run.

If you specify TEST_INCLUDE_FILE, dat file is ghon be included n' processed when ctest is run on tha directory.

.TP
.B VARIABLES
List of variablez defined up in tha current directory.

This read\-only property specifies tha list of CMake variablez currently defined. Y'all KNOW dat shit, muthafucka!  It be intended fo' debuggin purposes.

.TP
.B VS_GLOBAL_SECTION_POST_<section>
Specify a postSolution global section up in Visual Studio.

Settin a property like dis generates a entry of tha followin form up in tha solution file:


.nf
  GlobalSection(<section>) = postSolution
    <contents based on property value>
  EndGlobalSection
.fi

Da property must be set ta a semicolon\-separated list of key=value pairs. Each such pair is ghon be transformed tha fuck into a entry up in tha solution global section. I aint talkin' bout chicken n' gravy biatch. Whitespace round key n' value is ignored. Y'all KNOW dat shit, muthafucka! List elements which do not contain a equal sign is skipped.


This property only works fo' Visual Studio 7 n' above; it is ignored on other generators. Da property only applies when set on a gangbangin' finger-lickin' directory whose CMakeLists.txt gotz nuff a project() command.


Note dat CMake generates postSolution sections ExtensibilityGlobals n' ExtensibilityAddIns by default. If you set tha correspondin property, it will override tha default section. I aint talkin' bout chicken n' gravy biatch. For example, settin VS_GLOBAL_SECTION_POST_ExtensibilityGlobals will override tha default contentz of tha ExtensibilityGlobals section, while keepin ExtensibilityAddIns on its default.

.TP
.B VS_GLOBAL_SECTION_PRE_<section>
Specify a preSolution global section up in Visual Studio.

Settin a property like dis generates a entry of tha followin form up in tha solution file:


.nf
  GlobalSection(<section>) = preSolution
    <contents based on property value>
  EndGlobalSection
.fi

Da property must be set ta a semicolon\-separated list of key=value pairs. Each such pair is ghon be transformed tha fuck into a entry up in tha solution global section. I aint talkin' bout chicken n' gravy biatch. Whitespace round key n' value is ignored. Y'all KNOW dat shit, muthafucka! List elements which do not contain a equal sign is skipped.


This property only works fo' Visual Studio 7 n' above; it is ignored on other generators. Da property only applies when set on a gangbangin' finger-lickin' directory whose CMakeLists.txt gotz nuff a project() command.

.SH PROPERTIES ON TARGETS
.TP
.B <CONFIG>_OUTPUT_NAME
Oldskool per\-configuration target file base name.

This be a cold-ass lil configuration\-specific version of OUTPUT_NAME.  Use OUTPUT_NAME_<CONFIG> instead.

.TP
.B <CONFIG>_POSTFIX
Postfix ta append ta tha target file name fo' configuration <CONFIG>.

When buildin wit configuration <CONFIG> tha value of dis property be appended ta tha target file name built on disk.  For non\-executable targets, dis property is initialized by tha value of tha variable CMAKE_<CONFIG>_POSTFIX if it is set when a target is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This property is ignored on tha Mac fo' Frameworks n' App Bundles.

.TP
.B <LANG>_VISIBILITY_PRESET
Value fo' symbol visibilitizzle compile flags

Da <LANG>_VISIBILITY_PRESET property determines tha value passed up in a visibilitizzle related compile option, like fuckin \-fvisibility= fo' <LANG>.  This property only has a affect fo' libraries n' executablez wit exports, n' you can put dat on yo' toast.  This property is initialized by tha value of tha variable CMAKE_<LANG>_VISIBILITY_PRESET if it is set when a target is pimped.

.TP
.B ALIASED_TARGET
Name of target aliased by dis target.

If dis be a ALIAS target, dis property gotz nuff tha name of tha target aliased.

.TP
.B ARCHIVE_OUTPUT_DIRECTORY
Output directory up in which ta build ARCHIVE target files.

This property specifies tha directory tha fuck into which archive target filez should be built. Multi\-configuration generators (VS, Xcode) append a per\-configuration subdirectory ta tha specified directory.  There is three kindz of target filez dat may be built: archive, library, n' runtime.  Executablez is always treated as runtime targets, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Static libraries is always treated as archive targets, n' you can put dat on yo' toast. Module libraries is always treated as library targets, n' you can put dat on yo' toast. For non\-DLL platforms shared libraries is treated as library targets, n' you can put dat on yo' toast. For DLL platforms tha DLL part of a gangbangin' finger-lickin' dirty-ass shared library is treated as a runtime target n' tha correspondin import library is treated as a archive target fo' realz. All Windows\-based systems includin Cygwin is DLL platforms.  This property is initialized by tha value of tha variable CMAKE_ARCHIVE_OUTPUT_DIRECTORY if it is set when a target is pimped.

.TP
.B ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>
Per\-configuration output directory fo' ARCHIVE target files.

This be a per\-configuration version of ARCHIVE_OUTPUT_DIRECTORY yo, but multi\-configuration generators (VS, Xcode) do NOT append a per\-configuration subdirectory ta tha specified directory.  This property is initialized by tha value of tha variable CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG> if it is set when a target is pimped.

.TP
.B ARCHIVE_OUTPUT_NAME
Output name fo' ARCHIVE target files.

This property specifies tha base name fo' archive target files. Well shiiiit, it overrides OUTPUT_NAME n' OUTPUT_NAME_<CONFIG> properties. Put ya muthafuckin choppers up if ya feel dis!  There is three kindz of target filez dat may be built: archive, library, n' runtime.  Executablez is always treated as runtime targets, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Static libraries is always treated as archive targets, n' you can put dat on yo' toast. Module libraries is always treated as library targets, n' you can put dat on yo' toast. For non\-DLL platforms shared libraries is treated as library targets, n' you can put dat on yo' toast. For DLL platforms tha DLL part of a gangbangin' finger-lickin' dirty-ass shared library is treated as a runtime target n' tha correspondin import library is treated as a archive target fo' realz. All Windows\-based systems includin Cygwin is DLL platforms.

.TP
.B ARCHIVE_OUTPUT_NAME_<CONFIG>
Per\-configuration output name fo' ARCHIVE target files.

This is tha configuration\-specific version of ARCHIVE_OUTPUT_NAME.

.TP
.B AUTOMOC
Should tha target be processed wit automoc (for Qt projects).

AUTOMOC be a funky-ass boolean specifyin whether CMake will handle tha Qt moc preprocessor automatically, i.e. without havin ta use tha QT4_WRAP_CPP() or QT5_WRAP_CPP() macro. Currently Qt4 n' Qt5 is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  When dis property is set ta TRUE, CMake will scan tha source filez at build time n' invoke moc accordingly. If a #include statement like #include "moc_foo.cpp" is found, tha Q_OBJECT class declaration is expected up in tha header, n' moc is run on tha header file. If a #include statement like #include "foo.moc" is found, then a Q_OBJECT is expected up in tha current source file n' moc is run on tha file itself fo' realz. Additionally, all header filez is parsed fo' Q_OBJECT macros, n' if found, moc be also executed on dem files. Da resultin moc files, which is not included as shown above up in any of tha source filez is included up in a generated <targetname>_automoc.cpp file, which is compiled as part of tha target.This property is initialized by tha value of tha variable CMAKE_AUTOMOC if it is set when a target is pimped.


Additionizzle command line options fo' moc can be set via tha AUTOMOC_MOC_OPTIONS property.


By settin tha CMAKE_AUTOMOC_RELAXED_MODE variable ta TRUE tha rulez fo' searchin tha filez which is ghon be processed by moc can be chillaxed. Y'all KNOW dat shit, muthafucka! See tha documentation fo' dis variable fo' mo' details.


Da global property AUTOMOC_TARGETS_FOLDER can be used ta crew tha automoc targets together up in a IDE, e.g. up in MSVS.

.TP
.B AUTOMOC_MOC_OPTIONS
Additionizzle options fo' moc when rockin automoc (see tha AUTOMOC property)

This property is only used if tha AUTOMOC property is set ta TRUE fo' dis target. In dis case, it holdz additionizzle command line options which is ghon be used when moc is executed durin tha build, i.e. it is equivalent ta tha optionizzle OPTIONS argument of tha qt4_wrap_cpp() macro.


By default it is empty.

.TP
.B BUILD_WITH_INSTALL_RPATH
Should build tree targets have install tree rpaths.

BUILD_WITH_INSTALL_RPATH be a funky-ass boolean specifyin whether ta link tha target up in tha build tree wit tha INSTALL_RPATH.  This takes precedence over SKIP_BUILD_RPATH n' avoidz tha need fo' relinkin before installation. I aint talkin' bout chicken n' gravy biatch.  This property is initialized by tha value of tha variable CMAKE_BUILD_WITH_INSTALL_RPATH if it is set when a target is pimped.

.TP
.B BUNDLE
This target be a CFBundle on tha Mac.

If a module library target has dis property set ta legit it is ghon be built as a CFBundle when built on tha mac. Well shiiiit, it gonna git tha directory structure required fo' a CFBundle n' is ghon be suitable ta be used fo' bustin Browser Plugins or other application resources.

.TP
.B BUNDLE_EXTENSION
Da file extension used ta name a BUNDLE target on tha Mac.

Da default value is "bundle" \- you can also use "plugin" or whatever file extension is required by tha host app fo' yo' bundle.

.TP
.B COMPATIBLE_INTERFACE_BOOL
Propertizzles which must be compatible wit they link intercourse

Da COMPATIBLE_INTERFACE_BOOL property may contain a list of propertiesfor dis target which must be consistent when evaluated as a funky-ass boolean up in tha INTERFACE of all linked dependees.  For example, if a property "FOO" appears up in tha list, then fo' each dependee, tha "INTERFACE_FOO" property content up in all of its dependencies must be consistent wit each other, n' wit tha "FOO" property up in tha dependee.  Consistency up in dis sense has tha meanin dat if tha property is set, then it must have tha same boolean value as all others, n' if tha property aint set, then it is ignored. Y'all KNOW dat shit, muthafucka!  Note dat fo' each dependee, tha set of propertizzles from dis property must not intersect wit tha set of propertizzles from tha COMPATIBLE_INTERFACE_STRING property.

.TP
.B COMPATIBLE_INTERFACE_STRING
Propertizzles which must be string\-compatible wit they link intercourse

Da COMPATIBLE_INTERFACE_STRING property may contain a list of propertizzles fo' dis target which must be tha same when evaluated as a strang up in tha INTERFACE of all linked dependees.  For example, if a property "FOO" appears up in tha list, then fo' each dependee, tha "INTERFACE_FOO" property content up in all of its dependencies must be equal wit each other, n' wit tha "FOO" property up in tha dependee.  If tha property aint set, then it is ignored. Y'all KNOW dat shit, muthafucka!  Note dat fo' each dependee, tha set of propertizzles from dis property must not intersect wit tha set of propertizzles from tha COMPATIBLE_INTERFACE_BOOL property.

.TP
.B COMPILE_DEFINITIONS
Preprocessor definitions fo' compilin a targetz sources.

Da COMPILE_DEFINITIONS property may be set ta a semicolon\-separated list of preprocessor definitions rockin tha syntax VAR or VAR=value.  Function\-style definitions is not supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  CMake will automatically escape tha value erectly fo' tha natizzle build system (note dat CMake language syntax may require escapes ta specify some joints).  This property may be set on a per\-configuration basis rockin tha name COMPILE_DEFINITIONS_<CONFIG> where <CONFIG> be a upper\-case name (ex. "COMPILE_DEFINITIONS_DEBUG").


CMake will automatically drop some definitions dat is not supported by tha natizzle build tool.  Da VS6 IDE do not support definizzle joints wit spaces (but NMake do).


Contentz of COMPILE_DEFINITIONS may use "generator expressions" wit tha syntax "$<...>".  Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

Disclaimer: Most natizzle build tools have skanky support fo' escapin certain joints, n' you can put dat on yo' toast.  CMake has work\-aroundz fo' nuff cases but some joints may just not be possible ta pass erectly.  If a value do not seem ta be escaped erectly, do not attempt ta work\-around tha problem by addin escape sequences ta tha value.  Yo crazy-ass work\-around may break up in a gangbangin' future version of CMake dat has improved escape support.  Instead consider definin tha macro up in a (configured) header file.  Then report tha limitation. I aint talkin' bout chicken n' gravy biatch.  Known limitations include:


.nf
  #          \- fucked up almost everywhere
  ;          \- fucked up in VS IDE 7.0 n' Borland Makefiles
  ,          \- fucked up in VS IDE
  %          \- fucked up in some cases up in NMake
  & |        \- fucked up in some cases on MinGW
  ^ < > \\"   \- fucked up in most Make tools on Windows
.fi

CMake do not reject these joints outright cuz they do work up in some cases.  Use wit caution. I aint talkin' bout chicken n' gravy biatch.  

.TP
.B COMPILE_DEFINITIONS_<CONFIG>
Per\-configuration preprocessor definitions on a target.

This is tha configuration\-specific version of COMPILE_DEFINITIONS.

.TP
.B COMPILE_FLAGS
Additionizzle flags ta use when compilin dis targetz sources.

Da COMPILE_FLAGS property sets additionizzle compila flags used ta build sources within tha target.  Use COMPILE_DEFINITIONS ta pass additionizzle preprocessor definitions.

.TP
.B COMPILE_OPTIONS
List of options ta pass ta tha compiler.

This property specifies tha list of options specified so far fo' dis property.  This property exists on directories n' targets.


Da target property joints is used by tha generators ta set tha options fo' tha compiler.


Contentz of COMPILE_OPTIONS may use "generator expressions" wit tha syntax "$<...>".  Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

.TP
.B DEBUG_POSTFIX
See target property <CONFIG>_POSTFIX.

This property be a special case of tha more\-general <CONFIG>_POSTFIX property fo' tha DEBUG configuration.

.TP
.B DEFINE_SYMBOL
Define a symbol when compilin dis targetz sources.

DEFINE_SYMBOL sets tha name of tha preprocessor symbol defined when compilin sources up in a gangbangin' finger-lickin' dirty-ass shared library. If not set here then it is set ta target_EXPORTS by default (with some substitutions if tha target aint a valid C identifier). This is useful fo' headaz ta know whether they is bein included from inside they library or outside ta properly setup dllexport/dllimport decorations. 

.TP
.B ENABLE_EXPORTS
Specify whether a executable exports symbols fo' loadable modules.

Normally a executable do not export any symbols cuz it is tha final program.  It be possible fo' a executable ta export symbols ta be used by loadable modules.  When dis property is set ta legit CMake will allow other targets ta "link" ta tha executable wit tha TARGET_LINK_LIBRARIES command. Y'all KNOW dat shit, muthafucka!  On all platforms a target\-level dependency on tha executable is pimped fo' targets dat link ta dat shit.  For DLL platforms a import library is ghon be pimped fo' tha exported symbols n' then used fo' linking.  All Windows\-based systems includin Cygwin is DLL platforms.  For non\-DLL platforms dat require all symbols ta be resolved at link time, like fuckin Mac OS X, tha module will "link" ta tha executable rockin a gangbangin' flag like "\-bundle_loader".  For other non\-DLL platforms tha link rule is simply ignored since tha dynamic loader will automatically bind symbols when tha module is loaded. Y'all KNOW dat shit, muthafucka!  

.TP
.B EXCLUDE_FROM_ALL
Exclude tha target from tha all target.

A property on a target dat indicates if tha target is excluded from tha default build target. If it is not, then wit a Makefile fo' example typin make will cause dis target ta be built. Da same concept applies ta tha default build of other generators. Installin a target wit EXCLUDE_FROM_ALL set ta legit has undefined behavior.

.TP
.B EXCLUDE_FROM_DEFAULT_BUILD
Exclude target from "Build Solution".

This property is only used by Visual Studio generators 7 n' above. When set ta TRUE, tha target aint gonna be built when you press "Build Solution".

.TP
.B EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>
Per\-configuration version of target exclusion from "Build Solution". 

This is tha configuration\-specific version of EXCLUDE_FROM_DEFAULT_BUILD. If tha generic EXCLUDE_FROM_DEFAULT_BUILD be also set on a target, EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG> takes precedence up in configurations fo' which it has a value.

.TP
.B EXPORT_NAME
Exported name fo' target files.

This sets tha name fo' tha IMPORTED target generated when it dis target is is exported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If not set, tha logical target name is used by default.

.TP
.B EchoString
A message ta be displayed when tha target is built.

A message ta display on some generators (like fuckin makefiles) when tha target is built.

.TP
.B FOLDER
Set tha folda name. Use ta organize targets up in a IDE.

Targets wit no FOLDER property will step tha fuck up as top level entitizzles up in IDEs like Visual Studio. Targets wit tha same FOLDER property value will step tha fuck up next ta each other up in a gangbangin' folda of dat name. To nest folders, use FOLDER joints like fuckin 'GUI/Dialogs' wit '/' charactas separatin folda levels.

.TP
.B FRAMEWORK
This target be a gangbangin' framework on tha Mac.

If a gangbangin' finger-lickin' dirty-ass shared library target has dis property set ta legit it is ghon be built as a gangbangin' framework when built on tha mac. Well shiiiit, it gonna git tha directory structure required fo' a gangbangin' framework n' is ghon be suitable ta be used wit tha \-framework option

.TP
.B Fortran_FORMAT
Set ta FIXED or FREE ta indicate tha Fortran source layout.

This property  drops some lyrics ta CMake whether tha Fortran source filez up in a target use fixed\-format or free\-format.  CMake will pass tha correspondin format flag ta tha compila n' shit.  Use tha source\-specific Fortran_FORMAT property ta chizzle tha format of a specific source file.  If tha variable CMAKE_Fortran_FORMAT is set when a target is pimped its value is used ta initialize dis property.

.TP
.B Fortran_MODULE_DIRECTORY
Specify output directory fo' Fortran modulez provided by tha target.

If tha target gotz nuff Fortran source filez dat provide modulez n' tha compila supports a module output directory dis specifies tha directory up in which tha modulez is ghon be placed. Y'all KNOW dat shit, muthafucka!  When dis property aint set tha modulez is ghon be placed up in tha build directory correspondin ta tha targetz source directory.  If tha variable CMAKE_Fortran_MODULE_DIRECTORY is set when a target is pimped its value is used ta initialize dis property.


Note dat some compilaz will automatically search tha module output directory fo' modulez USEd durin compilation but others will not.  If yo' sources USE modulez they location must be specified by INCLUDE_DIRECTORIES regardless of dis property.

.TP
.B GENERATOR_FILE_NAME
Generatorz file fo' dis target.

An internal property used by some generators ta record tha name of tha project or dsp file associated wit dis target. Note dat at configure time, dis property is only set fo' targets pimped by include_external_msproject().

.TP
.B GNUtoMS
Convert GNU import library (.dll.a) ta MS format (.lib).

When linkin a gangbangin' finger-lickin' dirty-ass shared library or executable dat exports symbols rockin GNU tools on Windows (MinGW/MSYS) wit Visual Studio installed convert tha import library (.dll.a) from GNU ta MS format (.lib).  Both import libraries is ghon be installed by install(TARGETS) n' exported by install(EXPORT) n' export() ta be linked by applications wit either GNU\- or MS\-compatible tools.


If tha variable CMAKE_GNUtoMS is set when a target is pimped its value is used ta initialize dis property.  Da variable must be set prior ta tha straight-up original gangsta command dat enablez a language like fuckin project() or enable_language().  CMake serves up tha variable as a option ta tha user automatically when configurin on Windows wit GNU tools.

.TP
.B HAS_CXX
Link tha target rockin tha C++ linker tool (obsolete).

This is equivalent ta settin tha LINKER_LANGUAGE property ta CXX.  See dat propertyz documentation fo' details.

.TP
.B IMPLICIT_DEPENDS_INCLUDE_TRANSFORM
Specify #include line transforms fo' dependencies up in a target.

This property specifies rulez ta transform macro\-like #include lines durin implicit dependency scannin of C n' C++ source files.  Da list of rulez must be semicolon\-separated wit each entry of tha form "A_MACRO(%)=value\-with\-%" (the % must be literal).  Durin dependency scannin occurrencez of A_MACRO(...) on #include lines is ghon be replaced by tha value given wit tha macro argument substituted fo' '%'.  For example, tha entry


.nf
  MYDIR(%)=<mydir/%>
.fi

will convert linez of tha form


.nf
  #include MYDIR(myheader.h)
.fi

to


.nf
  #include <mydir/myheader.h>
.fi

allowin tha dependency ta be followed.


This property applies ta sources up in tha target on which it is set.

.TP
.B IMPORTED
Read\-only indication of whether a target is IMPORTED.

Da boolean value of dis property is legit fo' targets pimped wit tha IMPORTED option ta add_executable or add_library.  It be false fo' targets built within tha project.

.TP
.B IMPORTED_CONFIGURATIONS
Configurations provided fo' a IMPORTED target.

Set dis ta tha list of configuration names available fo' a IMPORTED target.  Da names correspond ta configurations defined up in tha project from which tha target is imported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If tha importin project uses a gangbangin' finger-lickin' different set of configurations tha names may be mapped rockin tha MAP_IMPORTED_CONFIG_<CONFIG> property.  Ignored fo' non\-imported targets.

.TP
.B IMPORTED_IMPLIB
Full path ta tha import library fo' a IMPORTED target.

Set dis ta tha location of tha ".lib" part of a windows DLL.  Ignored fo' non\-imported targets.

.TP
.B IMPORTED_IMPLIB_<CONFIG>
<CONFIG>\-specific version of IMPORTED_IMPLIB property.

Configuration names correspond ta dem provided by tha project from which tha target is imported.

.TP
.B IMPORTED_LINK_DEPENDENT_LIBRARIES
Dependent shared librariez of a imported shared library.

Shared libraries may be linked ta other shared libraries as part of they implementation. I aint talkin' bout chicken n' gravy biatch.  On some platforms tha linker searches fo' tha dependent librariez of shared libraries they is includin up in tha link.  Set dis property ta tha list of dependent shared librariez of a imported library.  Da list should be disjoint from tha list of intercourse libraries up in tha INTERFACE_LINK_LIBRARIES property.  On platforms requirin dependent shared libraries ta be found at link time CMake uses dis list ta add appropriate filez or paths ta tha link command line.  Ignored fo' non\-imported targets.

.TP
.B IMPORTED_LINK_DEPENDENT_LIBRARIES_<CONFIG>
<CONFIG>\-specific version of IMPORTED_LINK_DEPENDENT_LIBRARIES.

Configuration names correspond ta dem provided by tha project from which tha target is imported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If set, dis property straight-up overrides tha generic property fo' tha named configuration.

.TP
.B IMPORTED_LINK_INTERFACE_LANGUAGES
Languages compiled tha fuck into a IMPORTED static library.

Set dis ta tha list of languagez of source filez compiled ta produce a STATIC IMPORTED library (like fuckin "C" or "CXX").  CMake accounts fo' these languages when computin how tha fuck ta link a target ta tha imported library.  For example, when a C executable links ta a imported C++ static library CMake chizzlez tha C++ linker ta satisfy language runtime dependenciez of tha static library.  


This property is ignored fo' targets dat is not STATIC libraries. Put ya muthafuckin choppers up if ya feel dis!  This property is ignored fo' non\-imported targets.

.TP
.B IMPORTED_LINK_INTERFACE_LANGUAGES_<CONFIG>
<CONFIG>\-specific version of IMPORTED_LINK_INTERFACE_LANGUAGES.

Configuration names correspond ta dem provided by tha project from which tha target is imported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If set, dis property straight-up overrides tha generic property fo' tha named configuration.

.TP
.B IMPORTED_LINK_INTERFACE_LIBRARIES
Transitizzle link intercourse of a IMPORTED target.

Set dis ta tha list of libraries whose intercourse is included when a IMPORTED library target is linked ta another target.  Da libraries is ghon be included on tha link line fo' tha target.  Unlike tha LINK_INTERFACE_LIBRARIES property, dis property applies ta all imported target types, includin STATIC libraries. Put ya muthafuckin choppers up if ya feel dis!  This property is ignored fo' non\-imported targets.


This property is ignored if tha target also has a non\-empty INTERFACE_LINK_LIBRARIES property.


This property is deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use INTERFACE_LINK_LIBRARIES instead.

.TP
.B IMPORTED_LINK_INTERFACE_LIBRARIES_<CONFIG>
<CONFIG>\-specific version of IMPORTED_LINK_INTERFACE_LIBRARIES.

Configuration names correspond ta dem provided by tha project from which tha target is imported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If set, dis property straight-up overrides tha generic property fo' tha named configuration.


This property is ignored if tha target also has a non\-empty INTERFACE_LINK_LIBRARIES property.


This property is deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use INTERFACE_LINK_LIBRARIES instead.

.TP
.B IMPORTED_LINK_INTERFACE_MULTIPLICITY
Repetizzle count fo' cyclez of IMPORTED static libraries.

This is LINK_INTERFACE_MULTIPLICITY fo' IMPORTED targets.

.TP
.B IMPORTED_LINK_INTERFACE_MULTIPLICITY_<CONFIG>
<CONFIG>\-specific version of IMPORTED_LINK_INTERFACE_MULTIPLICITY.

If set, dis property straight-up overrides tha generic property fo' tha named configuration.

.TP
.B IMPORTED_LOCATION
Full path ta tha main file on disk fo' a IMPORTED target.

Set dis ta tha location of a IMPORTED target file on disk.  For executablez dis is tha location of tha executable file.  For bundlez on OS X dis is tha location of tha executable file inside Contents/MacOS under tha application bundle folda n' shit.  For static libraries n' modulez dis is tha location of tha library or module.  For shared libraries on non\-DLL platforms dis is tha location of tha shared library.  For frameworks on OS X dis is tha location of tha library file symlink just inside tha framework folda n' shit.  For DLLs dis is tha location of tha ".dll" part of tha library.  For UNKNOWN libraries dis is tha location of tha file ta be linked. Y'all KNOW dat shit, muthafucka!  Ignored fo' non\-imported targets.


Projects may skip IMPORTED_LOCATION if tha configuration\-specific property IMPORTED_LOCATION_<CONFIG> is set.  To git tha location of a imported target read one of tha LOCATION or LOCATION_<CONFIG> properties.

.TP
.B IMPORTED_LOCATION_<CONFIG>
<CONFIG>\-specific version of IMPORTED_LOCATION property.

Configuration names correspond ta dem provided by tha project from which tha target is imported.

.TP
.B IMPORTED_NO_SONAME
Specifies dat a IMPORTED shared library target has no "soname".  

Set dis property ta legit fo' a imported shared library file dat has no "soname" field. Y'all KNOW dat shit, muthafucka!  CMake may adjust generated link commandz fo' some platforms ta prevent tha linker from rockin tha path ta tha library up in place of its missin soname.  Ignored fo' non\-imported targets.

.TP
.B IMPORTED_NO_SONAME_<CONFIG>
<CONFIG>\-specific version of IMPORTED_NO_SONAME property.

Configuration names correspond ta dem provided by tha project from which tha target is imported.

.TP
.B IMPORTED_SONAME
Da "soname" of a IMPORTED target of shared library type.

Set dis ta tha "soname" embedded up in a imported shared library.  This is meaningful only on platforms supportin tha feature.  Ignored fo' non\-imported targets.

.TP
.B IMPORTED_SONAME_<CONFIG>
<CONFIG>\-specific version of IMPORTED_SONAME property.

Configuration names correspond ta dem provided by tha project from which tha target is imported.

.TP
.B IMPORT_PREFIX
What comes before tha import library name.

Similar ta tha target property PREFIX yo, but used fo' import libraries (typically correspondin ta a DLL) instead of regular libraries fo' realz. A target property dat can be set ta override tha prefix (like fuckin "lib") on a import library name.

.TP
.B IMPORT_SUFFIX
What comes afta tha import library name.

Similar ta tha target property SUFFIX yo, but used fo' import libraries (typically correspondin ta a DLL) instead of regular libraries fo' realz. A target property dat can be set ta override tha suffix (like fuckin ".lib") on a import library name.

.TP
.B INCLUDE_DIRECTORIES
List of preprocessor include file search directories.

This property specifies tha list of directories given so far ta tha include_directories command. Y'all KNOW dat shit, muthafucka! This property exists on directories n' targets, n' you can put dat on yo' toast. In addizzle ta acceptin joints from tha include_directories command, joints may be set directly on any directory or any target rockin tha set_property command. Y'all KNOW dat shit, muthafucka! A target gets its initial value fo' dis property from tha value of tha directory property fo' realz. A directory gets its initial value from its parent directory if it has one. Both directory n' target property joints is adjusted by calls ta tha include_directories command.


Da target property joints is used by tha generators ta set tha include paths fo' tha compila n' shit.  See also tha include_directories command.


Contentz of INCLUDE_DIRECTORIES may use "generator expressions" wit tha syntax "$<...>".  Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

.TP
.B INSTALL_NAME_DIR
Mac OSX directory name fo' installed targets.

INSTALL_NAME_DIR be a strang specifyin tha directory portion of tha "install_name" field of shared libraries on Mac OSX ta use up in tha installed targets, n' you can put dat on yo' toast. 

.TP
.B INSTALL_RPATH
Da rpath ta use fo' installed targets.

A semicolon\-separated list specifyin tha rpath ta use up in installed targets (for platforms dat support it).  This property is initialized by tha value of tha variable CMAKE_INSTALL_RPATH if it is set when a target is pimped.

.TP
.B INSTALL_RPATH_USE_LINK_PATH
Add paths ta linker search n' installed rpath.

INSTALL_RPATH_USE_LINK_PATH be a funky-ass boolean dat if set ta legit will append directories up in tha linker search path n' outside tha project ta tha INSTALL_RPATH.  This property is initialized by tha value of tha variable CMAKE_INSTALL_RPATH_USE_LINK_PATH if it is set when a target is pimped.

.TP
.B INTERFACE_COMPILE_DEFINITIONS
List of hood compile definitions fo' a library.

Targets may populate dis property ta publish tha compile definitions required ta compile against tha headaz fo' tha target.  Consumin targets can add entries ta they own COMPILE_DEFINITIONS property like fuckin $<TARGET_PROPERTY:foo,INTERFACE_COMPILE_DEFINITIONS> ta use tha compile definitions specified up in tha intercourse of 'foo'.


Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

.TP
.B INTERFACE_COMPILE_OPTIONS
List of intercourse options ta pass ta tha compiler.

Targets may populate dis property ta publish tha compile options required ta compile against tha headaz fo' tha target.  Consumin targets can add entries ta they own COMPILE_OPTIONS property like fuckin $<TARGET_PROPERTY:foo,INTERFACE_COMPILE_OPTIONS> ta use tha compile options specified up in tha intercourse of 'foo'.


Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

.TP
.B INTERFACE_INCLUDE_DIRECTORIES
List of hood include directories fo' a library.

Targets may populate dis property ta publish tha include directories required ta compile against tha headaz fo' tha target.  Consumin targets can add entries ta they own INCLUDE_DIRECTORIES property like fuckin $<TARGET_PROPERTY:foo,INTERFACE_INCLUDE_DIRECTORIES> ta use tha include directories specified up in tha intercourse of 'foo'.


Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

.TP
.B INTERFACE_LINK_LIBRARIES
List hood intercourse libraries fo' a library.

This property gotz nuff tha list of transitizzle link dependencies. Put ya muthafuckin choppers up if ya feel dis!  When tha target is linked tha fuck into another target tha libraries listed (and recursively they link intercourse libraries) is ghon be provided ta tha other target also.  This property is overridden by tha LINK_INTERFACE_LIBRARIES or LINK_INTERFACE_LIBRARIES_<CONFIG> property if policy CMP0022 is OLD or unset.





Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

.TP
.B INTERFACE_POSITION_INDEPENDENT_CODE
Whether thugs need ta create a position\-independent target

Da INTERFACE_POSITION_INDEPENDENT_CODE property informs thugz of dis target whether they must set they POSITION_INDEPENDENT_CODE property ta ON.  If dis property is set ta ON, then tha POSITION_INDEPENDENT_CODE property on all thugs is ghon be set ta ON.  Similarly, if dis property is set ta OFF, then tha POSITION_INDEPENDENT_CODE property on all thugs is ghon be set ta OFF.  If dis property is undefined, then thugs will determine they POSITION_INDEPENDENT_CODE property by other means.  Consumers must ensure dat tha targets dat they link ta git a cold-ass lil consistent requirement fo' they INTERFACE_POSITION_INDEPENDENT_CODE property.

.TP
.B INTERFACE_SYSTEM_INCLUDE_DIRECTORIES
List of hood system include directories fo' a library.

Targets may populate dis property ta publish tha include directories which contain system headers, n' therefore should not result up in compila warnings.  Consumin targets will then mark tha same include directories as system headers.


Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

.TP
.B INTERPROCEDURAL_OPTIMIZATION
Enable interprocedural optimization fo' a target.

If set ta true, enablez interprocedural optimizations if they is known ta be supported by tha compiler.

.TP
.B INTERPROCEDURAL_OPTIMIZATION_<CONFIG>
Per\-configuration interprocedural optimization fo' a target.

This be a per\-configuration version of INTERPROCEDURAL_OPTIMIZATION.  If set, dis property overrides tha generic property fo' tha named configuration.

.TP
.B LABELS
Specify a list of text labels associated wit a target.

Target label semantics is currently unspecified.

.TP
.B LIBRARY_OUTPUT_DIRECTORY
Output directory up in which ta build LIBRARY target files.

This property specifies tha directory tha fuck into which library target filez should be built. Multi\-configuration generators (VS, Xcode) append a per\-configuration subdirectory ta tha specified directory.  There is three kindz of target filez dat may be built: archive, library, n' runtime.  Executablez is always treated as runtime targets, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Static libraries is always treated as archive targets, n' you can put dat on yo' toast. Module libraries is always treated as library targets, n' you can put dat on yo' toast. For non\-DLL platforms shared libraries is treated as library targets, n' you can put dat on yo' toast. For DLL platforms tha DLL part of a gangbangin' finger-lickin' dirty-ass shared library is treated as a runtime target n' tha correspondin import library is treated as a archive target fo' realz. All Windows\-based systems includin Cygwin is DLL platforms.  This property is initialized by tha value of tha variable CMAKE_LIBRARY_OUTPUT_DIRECTORY if it is set when a target is pimped.

.TP
.B LIBRARY_OUTPUT_DIRECTORY_<CONFIG>
Per\-configuration output directory fo' LIBRARY target files.

This be a per\-configuration version of LIBRARY_OUTPUT_DIRECTORY yo, but multi\-configuration generators (VS, Xcode) do NOT append a per\-configuration subdirectory ta tha specified directory.  This property is initialized by tha value of tha variable CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG> if it is set when a target is pimped.

.TP
.B LIBRARY_OUTPUT_NAME
Output name fo' LIBRARY target files.

This property specifies tha base name fo' library target files. Well shiiiit, it overrides OUTPUT_NAME n' OUTPUT_NAME_<CONFIG> properties. Put ya muthafuckin choppers up if ya feel dis!  There is three kindz of target filez dat may be built: archive, library, n' runtime.  Executablez is always treated as runtime targets, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Static libraries is always treated as archive targets, n' you can put dat on yo' toast. Module libraries is always treated as library targets, n' you can put dat on yo' toast. For non\-DLL platforms shared libraries is treated as library targets, n' you can put dat on yo' toast. For DLL platforms tha DLL part of a gangbangin' finger-lickin' dirty-ass shared library is treated as a runtime target n' tha correspondin import library is treated as a archive target fo' realz. All Windows\-based systems includin Cygwin is DLL platforms.

.TP
.B LIBRARY_OUTPUT_NAME_<CONFIG>
Per\-configuration output name fo' LIBRARY target files.

This is tha configuration\-specific version of LIBRARY_OUTPUT_NAME.

.TP
.B LINKER_LANGUAGE
Specifies language whose compila will invoke tha linker.

For executables, shared libraries, n' modules, dis sets tha language whose compila is used ta link tha target (like fuckin "C" or "CXX").  A typical value fo' a executable is tha language of tha source file providin tha program entry point (main).  If not set, tha language wit tha highest linker preference value is tha default.  See documentation of CMAKE_<LANG>_LINKER_PREFERENCE variables.


If dis property aint set by tha user, it is ghon be calculated at generate\-time by CMake.

.TP
.B LINK_DEPENDS
Additionizzle filez on which a target binary dependz fo' linking.

Specifies a semicolon\-separated list of full\-paths ta filez on which tha link rule fo' dis target depends.  Da target binary is ghon be linked if any of tha named filez is newer than dat shit.


This property is ignored by non\-Makefile generators.  It be intended ta specify dependencies on "linker scripts" fo' custom Makefile link rules.

.TP
.B LINK_DEPENDS_NO_SHARED
Do not depend on linked shared library files.

Set dis property ta legit ta tell CMake generators not ta add file\-level dependencies on tha shared library filez linked by dis target.  Modification ta tha shared libraries aint gonna be sufficient ta re\-link dis target.  Logical target\-level dependencies aint gonna be affected so tha linked shared libraries will still be brought up ta date before dis target is built.


This property is initialized by tha value of tha variable CMAKE_LINK_DEPENDS_NO_SHARED if it is set when a target is pimped.

.TP
.B LINK_FLAGS
Additionizzle flags ta use when linkin dis target.

Da LINK_FLAGS property can be used ta add extra flags ta tha link step of a target. LINK_FLAGS_<CONFIG> will add ta tha configuration <CONFIG>, fo' example, DEBUG, RELEASE, MINSIZEREL, RELWITHDEBINFO. 

.TP
.B LINK_FLAGS_<CONFIG>
Per\-configuration linker flags fo' a target.

This is tha configuration\-specific version of LINK_FLAGS.

.TP
.B LINK_INTERFACE_LIBRARIES
List hood intercourse libraries fo' a gangbangin' finger-lickin' dirty-ass shared library or executable.

By default linkin ta a gangbangin' finger-lickin' dirty-ass shared library target transitively links ta targets wit which tha library itself was linked. Y'all KNOW dat shit, muthafucka!  For a executable wit exports (see tha ENABLE_EXPORTS property) no default transitizzle link dependencies is used. Y'all KNOW dat shit, muthafucka!  This property replaces tha default transitizzle link dependencies wit a explicit list.  When tha target is linked tha fuck into another target tha libraries listed (and recursively they link intercourse libraries) is ghon be provided ta tha other target also.  If tha list is empty then no transitizzle link dependencies is ghon be incorporated when dis target is linked tha fuck into another target even if tha default set is non\-empty.  This property is initialized by tha value of tha variable CMAKE_LINK_INTERFACE_LIBRARIES if it is set when a target is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This property is ignored fo' STATIC libraries.


This property is overridden by tha INTERFACE_LINK_LIBRARIES property if policy CMP0022 is NEW.


This property is deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use INTERFACE_LINK_LIBRARIES instead.

.TP
.B LINK_INTERFACE_LIBRARIES_<CONFIG>
Per\-configuration list of hood intercourse libraries fo' a target.

This is tha configuration\-specific version of LINK_INTERFACE_LIBRARIES.  If set, dis property straight-up overrides tha generic property fo' tha named configuration.


This property is overridden by tha INTERFACE_LINK_LIBRARIES property if policy CMP0022 is NEW.


This property is deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use INTERFACE_LINK_LIBRARIES instead.

.TP
.B LINK_INTERFACE_MULTIPLICITY
Repetizzle count fo' STATIC libraries wit cyclic dependencies.

When linkin ta a STATIC library target wit cyclic dependencies tha linker may need ta scan mo' than once all up in tha archives up in tha straight fuckin connected component of tha dependency graph.  CMake by default constructs tha link line so dat tha linker will scan all up in tha component at least twice.  This property specifies tha minimum number of scans if it is larger than tha default.  CMake uses tha phattest value specified by any target up in a cold-ass lil component.

.TP
.B LINK_INTERFACE_MULTIPLICITY_<CONFIG>
Per\-configuration repetizzle count fo' cyclez of STATIC libraries.

This is tha configuration\-specific version of LINK_INTERFACE_MULTIPLICITY.  If set, dis property straight-up overrides tha generic property fo' tha named configuration.

.TP
.B LINK_LIBRARIES
List of direct link dependencies.

This property specifies tha list of libraries or targets which is ghon be used fo' linking. In addizzle ta acceptin joints from tha target_link_libraries command, joints may be set directly on any target rockin tha set_property command. Y'all KNOW dat shit, muthafucka! 


Da target property joints is used by tha generators ta set tha link libraries fo' tha compila n' shit.  See also tha target_link_libraries command.


Contentz of LINK_LIBRARIES may use "generator expressions" wit tha syntax "$<...>".  Generator expressions is evaluated durin build system generation ta produce shiznit specific ta each build configuration. I aint talkin' bout chicken n' gravy biatch.  Valid expressions are:


.nf
  $<0:...>                  = empty strang (ignores "...")
  $<1:...>                  = content of "..."
  $<CONFIG:cfg>             = '1' if config is "cfg", else '0'
  $<CONFIGURATION>          = configuration name
  $<BOOL:...>               = '1' if tha '...' is true, else '0'
  $<STREQUAL:a,b>           = '1' if a is STREQUAL b, else '0'
  $<ANGLE\-R>                = A literal '>'. Used ta compare strings which contain a '>' fo' example.
  $<COMMA>                  = A literal ','. Used ta compare strings which contain a ',' fo' example.
  $<SEMICOLON>              = A literal ';'. Used ta prevent list expansion on a argument wit ';'.
  $<JOIN:list,...>          = joins tha list wit tha content of "..."
  $<TARGET_NAME:...>        = Marks ... as bein tha name of a target.  This is required if exportin targets ta multiple dependent export sets, n' you can put dat on yo' toast.  Da '...' must be a literal name of a target\- it may not contain generator expressions.
  $<INSTALL_INTERFACE:...>  = content of "..." when tha property is exported rockin install(EXPORT), n' empty otherwise.
  $<BUILD_INTERFACE:...>    = content of "..." when tha property is exported rockin export(), or when tha target is used by another target up in tha same buildsystem. Expandz ta tha empty strang otherwise.
  $<C_COMPILER_ID>          = Da CMake\-id of tha C compila used.
  $<C_COMPILER_ID:comp>     = '1' if tha CMake\-id of tha C compila matches comp, otherwise '0'.
  $<CXX_COMPILER_ID>        = Da CMake\-id of tha CXX compila used.
  $<CXX_COMPILER_ID:comp>   = '1' if tha CMake\-id of tha CXX compila matches comp, otherwise '0'.
  $<VERSION_GREATER:v1,v2>  = '1' if v1 be a version pimped outa than v2, else '0'.
  $<VERSION_LESS:v1,v2>     = '1' if v1 be a version less than v2, else '0'.
  $<VERSION_EQUAL:v1,v2>    = '1' if v1 is tha same ol' dirty version as v2, else '0'.
  $<C_COMPILER_VERSION>     = Da version of tha C compila used.
  $<C_COMPILER_VERSION:ver> = '1' if tha version of tha C compila matches ver, otherwise '0'.
  $<CXX_COMPILER_VERSION>   = Da version of tha CXX compila used.
  $<CXX_COMPILER_VERSION:ver> = '1' if tha version of tha CXX compila matches ver, otherwise '0'.
  $<TARGET_FILE:tgt>        = main file (.exe, .so.1.2, .a)
  $<TARGET_LINKER_FILE:tgt> = file used ta link (.a, .lib, .so)
  $<TARGET_SONAME_FILE:tgt> = file wit soname (.so.3)
.fi

where "tgt" is tha name of a target.  Target file expressions produce a gangbangin' full path yo, but _DIR n' _NAME versions can produce tha directory n' file name components:


.nf
  $<TARGET_FILE_DIR:tgt>/$<TARGET_FILE_NAME:tgt>
  $<TARGET_LINKER_FILE_DIR:tgt>/$<TARGET_LINKER_FILE_NAME:tgt>
  $<TARGET_SONAME_FILE_DIR:tgt>/$<TARGET_SONAME_FILE_NAME:tgt>
.fi




.nf
  $<TARGET_PROPERTY:tgt,prop>   = Da value of tha property prop on tha target tgt.
.fi

Note dat tgt aint added as a thugged-out dependency of tha target dis expression is evaluated on.


.nf
  $<TARGET_POLICY:pol>          = '1' if tha policy was NEW when tha 'head' target was pimped, else '0'.  If tha policy was not set, tha warnin message fo' tha policy is ghon be emitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This generator expression only works fo' a subset of policies.
  $<INSTALL_PREFIX>         = Content of tha install prefix when tha target is exported via INSTALL(EXPORT) n' empty otherwise.
.fi

Boolean expressions:


.nf
  $<AND:?[,?]...>           = '1' if all '?' is '1', else '0'
  $<OR:?[,?]...>            = '0' if all '?' is '0', else '1'
  $<NOT:?>                  = '0' if '?' is '1', else '1'
.fi

where '?' be always either '0' or '1'.


Expressions wit a implicit 'this' target:


.nf
  $<TARGET_PROPERTY:prop>   = Da value of tha property prop on tha target on which tha generator expression is evaluated.
.fi

.TP
.B LINK_SEARCH_END_STATIC
End a link line such dat static system libraries is used.

Some linkers support switches like fuckin \-Bstatic n' \-Bdynamic ta determine whether ta use static or shared libraries fo' \-lXXX options.  CMake uses these options ta set tha link type fo' libraries whose full paths is not known or (in some cases) is up in implicit link directories fo' tha platform.  By default CMake addz a option all up in tha end of tha library list (if necessary) ta set tha linker search type back ta its startin type.  This property switches tha final linker search type ta \-Bstatic regardless of how tha fuck it started. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See also LINK_SEARCH_START_STATIC.

.TP
.B LINK_SEARCH_START_STATIC
Assume tha linker looks fo' static libraries by default.

Some linkers support switches like fuckin \-Bstatic n' \-Bdynamic ta determine whether ta use static or shared libraries fo' \-lXXX options.  CMake uses these options ta set tha link type fo' libraries whose full paths is not known or (in some cases) is up in implicit link directories fo' tha platform.  By default tha linker search type be assumed ta be \-Bdynamic all up in tha beginnin of tha library list.  This property switches tha assumption ta \-Bstatic.  It be intended fo' use when linkin a executable statically (e.g. wit tha GNU \-static option).  See also LINK_SEARCH_END_STATIC.

.TP
.B LOCATION
Read\-only location of a target on disk.

For a imported target, dis read\-only property returns tha value of tha LOCATION_<CONFIG> property fo' a unspecified configuration <CONFIG> provided by tha target.


For a non\-imported target, dis property is provided fo' compatibilitizzle wit CMake 2.4 n' below.  Dat shiznit was meant ta git tha location of a executable targetz output file fo' use up in add_custom_command. Y'all KNOW dat shit, muthafucka!  Da path may contain a funky-ass build\-system\-specific portion dat is replaced at build time wit tha configuration gettin built (like fuckin "$(ConfigurationName)" up in VS). In CMake 2.6 n' above add_custom_command automatically recognizes a target name up in its COMMAND n' DEPENDS options n' computes tha target location. I aint talkin' bout chicken n' gravy biatch.  In CMake 2.8.4 n' above add_custom_command recognizes generator expressions ta refer ta target locations anywhere up in tha command. Y'all KNOW dat shit, muthafucka!  Therefore dis property aint needed fo' bustin custom commands.


Do not set propertizzles dat affect tha location of a target afta readin dis property.  These include propertizzles whose names match "(RUNTIME|LIBRARY|ARCHIVE)_OUTPUT_(NAME|DIRECTORY)(_<CONFIG>)?", "(IMPLIB_)?(PREFIX|SUFFIX)", or "LINKER_LANGUAGE".  Failure ta follow dis rule aint diagnosed n' leaves tha location of tha target undefined.

.TP
.B LOCATION_<CONFIG>
Read\-only property providin a target location on disk.

A read\-only property dat indicates where a targetz main file is located on disk fo' tha configuration <CONFIG>.  Da property is defined only fo' library n' executable targets, n' you can put dat on yo' toast.  An imported target may provide a set of configurations different from dat of tha importin project.  By default CMake looks fo' a exact\-match but otherwise uses a arbitrary available configuration. I aint talkin' bout chicken n' gravy biatch.  Use tha MAP_IMPORTED_CONFIG_<CONFIG> property ta map imported configurations explicitly.


Do not set propertizzles dat affect tha location of a target afta readin dis property.  These include propertizzles whose names match "(RUNTIME|LIBRARY|ARCHIVE)_OUTPUT_(NAME|DIRECTORY)(_<CONFIG>)?", "(IMPLIB_)?(PREFIX|SUFFIX)", or "LINKER_LANGUAGE".  Failure ta follow dis rule aint diagnosed n' leaves tha location of tha target undefined.

.TP
.B MACOSX_BUNDLE
Build a executable as a application bundle on Mac OS X.

When dis property is set ta legit tha executable when built on Mac OS X is ghon be pimped as a application bundle.  This make it a GUI executable dat can be launched from tha Finder n' shit.  See tha MACOSX_BUNDLE_INFO_PLIST target property fo' shiznit bout creation of tha Info.plist file fo' tha application bundle.  This property is initialized by tha value of tha variable CMAKE_MACOSX_BUNDLE if it is set when a target is pimped.

.TP
.B MACOSX_BUNDLE_INFO_PLIST
Specify a cold-ass lil custom Info.plist template fo' a Mac OS X App Bundle.

An executable target wit MACOSX_BUNDLE enabled is ghon be built as a application bundle on Mac OS X.  By default its Info.plist file is pimped by configurin a template called MacOSXBundleInfo.plist.in located up in tha CMAKE_MODULE_PATH.  This property specifies a alternatizzle template file name which may be a gangbangin' full path.


Da followin target propertizzles may be set ta specify content ta be configured tha fuck into tha file:


.nf
  MACOSX_BUNDLE_INFO_STRING
  MACOSX_BUNDLE_ICON_FILE
  MACOSX_BUNDLE_GUI_IDENTIFIER
  MACOSX_BUNDLE_LONG_VERSION_STRING
  MACOSX_BUNDLE_BUNDLE_NAME
  MACOSX_BUNDLE_SHORT_VERSION_STRING
  MACOSX_BUNDLE_BUNDLE_VERSION
  MACOSX_BUNDLE_COPYRIGHT
.fi

CMake variablez of tha same name may be set ta affect all targets up in a gangbangin' finger-lickin' directory dat aint gots each specific property set.  If a cold-ass lil custom Info.plist is specified by dis property it may of course hard\-code all tha settings instead of rockin tha target properties.

.TP
.B MACOSX_FRAMEWORK_INFO_PLIST
Specify a cold-ass lil custom Info.plist template fo' a Mac OS X Framework.

A library target wit FRAMEWORK enabled is ghon be built as a gangbangin' framework on Mac OS X.  By default its Info.plist file is pimped by configurin a template called MacOSXFrameworkInfo.plist.in located up in tha CMAKE_MODULE_PATH.  This property specifies a alternatizzle template file name which may be a gangbangin' full path.


Da followin target propertizzles may be set ta specify content ta be configured tha fuck into tha file:


.nf
  MACOSX_FRAMEWORK_ICON_FILE
  MACOSX_FRAMEWORK_IDENTIFIER
  MACOSX_FRAMEWORK_SHORT_VERSION_STRING
  MACOSX_FRAMEWORK_BUNDLE_VERSION
.fi

CMake variablez of tha same name may be set ta affect all targets up in a gangbangin' finger-lickin' directory dat aint gots each specific property set.  If a cold-ass lil custom Info.plist is specified by dis property it may of course hard\-code all tha settings instead of rockin tha target properties.

.TP
.B MACOSX_RPATH
Whether ta use rpaths on Mac OS X.

When dis property is set ta true, tha directory portion of the"install_name" field of shared libraries will default ta "@rpath".Runtime paths will also be embedded up in binaries rockin dis target.This property is initialized by tha value of tha variable CMAKE_MACOSX_RPATH if it is set when a target is pimped.

.TP
.B MAP_IMPORTED_CONFIG_<CONFIG>
Map from project configuration ta IMPORTED targetz configuration.

Set dis ta tha list of configurationz of a imported target dat may be used fo' tha current projectz <CONFIG> configuration. I aint talkin' bout chicken n' gravy biatch.  Targets imported from another project may not provide tha same set of configuration names available up in tha current project.  Settin dis property  drops some lyrics ta CMake what tha fuck imported configurations is suitable fo' use when buildin tha <CONFIG> configuration. I aint talkin' bout chicken n' gravy biatch.  Da first configuration up in tha list found ta be provided by tha imported target is selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If dis property is set n' no matchin configurations is available, then tha imported target is considered ta be not found. Y'all KNOW dat shit, muthafucka!  This property is ignored fo' non\-imported targets.

.TP
.B NAME
Logical name fo' tha target.

Read\-only logical name fo' tha target as used by CMake.

.TP
.B NO_SONAME
Whether ta set "soname" when linkin a gangbangin' finger-lickin' dirty-ass shared library or module.

Enable dis boolean property if a generated shared library or module should not have "soname" set. Default is ta set "soname" on all shared libraries n' modulez as long as tha platform supports dat shit. Generally, use dis property only fo' leaf private libraries or plugins. If you use it on aiiight shared libraries which other targets link against, on some platforms a linker will bang a gangbangin' full path ta tha library (as specified at link time) tha fuck into tha dynamic section of tha dependent binary. Therefore, once installed, dynamic loader may eventually fail ta locate tha library fo' tha binary.

.TP
.B OSX_ARCHITECTURES
Target specific architectures fo' OS X.

Da OSX_ARCHITECTURES property sets tha target binary architecture fo' targets on OS X.  This property is initialized by tha value of tha variable CMAKE_OSX_ARCHITECTURES if it is set when a target is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Use OSX_ARCHITECTURES_<CONFIG> ta set tha binary architectures on a per\-configuration basis.  <CONFIG> be a upper\-case name (ex: "OSX_ARCHITECTURES_DEBUG").

.TP
.B OSX_ARCHITECTURES_<CONFIG>
Per\-configuration OS X binary architectures fo' a target.

This property is tha configuration\-specific version of OSX_ARCHITECTURES.

.TP
.B OUTPUT_NAME
Output name fo' target files.

This sets tha base name fo' output filez pimped fo' a executable or library target.  If not set, tha logical target name is used by default.

.TP
.B OUTPUT_NAME_<CONFIG>
Per\-configuration target file base name.

This is tha configuration\-specific version of OUTPUT_NAME.

.TP
.B PDB_NAME
Output name fo' MS debug symbols .pdb file from linker.

Set tha base name fo' debug symbols file pimped fo' a executable or shared library target.  If not set, tha logical target name is used by default.  


This property aint implemented by tha Visual Studio 6 generator.

.TP
.B PDB_NAME_<CONFIG>
Per\-configuration name fo' MS debug symbols .pdb file.  

This is tha configuration\-specific version of PDB_NAME.  


This property aint implemented by tha Visual Studio 6 generator.

.TP
.B PDB_OUTPUT_DIRECTORY
Output directory fo' MS debug symbols .pdb file from linker.

This property specifies tha directory tha fuck into which tha MS debug symbols is ghon be placed by tha linker n' shit.  This property is initialized by tha value of tha variable CMAKE_PDB_OUTPUT_DIRECTORY if it is set when a target is pimped.


This property aint implemented by tha Visual Studio 6 generator.

.TP
.B PDB_OUTPUT_DIRECTORY_<CONFIG>
Per\-configuration output directory fo' MS debug symbols .pdb files.

This be a per\-configuration version of PDB_OUTPUT_DIRECTORY yo, but multi\-configuration generators (VS, Xcode) do NOT append a per\-configuration subdirectory ta tha specified directory. This property is initialized by tha value of tha variable CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG> if it is set when a target is pimped.


This property aint implemented by tha Visual Studio 6 generator.

.TP
.B POSITION_INDEPENDENT_CODE
Whether ta create a position\-independent target

Da POSITION_INDEPENDENT_CODE property determines whether posizzle independent executablez or shared libraries is ghon be pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This property is legit by default fo' SHARED n' MODULE library targets n' false otherwise.  This property is initialized by tha value of tha variable CMAKE_POSITION_INDEPENDENT_CODE if it is set when a target is pimped.

.TP
.B POST_INSTALL_SCRIPT
Deprecated install support.

Da PRE_INSTALL_SCRIPT n' POST_INSTALL_SCRIPT propertizzles is tha oldschool way ta specify CMake scripts ta run before n' afta installin a target.  They is used only when tha oldschool INSTALL_TARGETS command is used ta install tha target.  Use tha INSTALL command instead.

.TP
.B PREFIX
What comes before tha library name.

A target property dat can be set ta override tha prefix (like fuckin "lib") on a library name.

.TP
.B PRE_INSTALL_SCRIPT
Deprecated install support.

Da PRE_INSTALL_SCRIPT n' POST_INSTALL_SCRIPT propertizzles is tha oldschool way ta specify CMake scripts ta run before n' afta installin a target.  They is used only when tha oldschool INSTALL_TARGETS command is used ta install tha target.  Use tha INSTALL command instead.

.TP
.B PRIVATE_HEADER
Specify private header filez up in a FRAMEWORK shared library target.

Shared library targets marked wit tha FRAMEWORK property generate frameworks on OS X n' aiiight shared libraries on other platforms.  This property may be set ta a list of header filez ta be placed up in tha PrivateHeadaz directory inside tha framework folda n' shit.  On non\-Applez platforms these headaz may be installed rockin tha PRIVATE_HEADER option ta tha install(TARGETS) command.

.TP
.B PROJECT_LABEL
Change tha name of a target up in a IDE.

Can be used ta chizzle tha name of tha target up in a IDE like Visual Studio. 

.TP
.B PUBLIC_HEADER
Specify hood header filez up in a FRAMEWORK shared library target.

Shared library targets marked wit tha FRAMEWORK property generate frameworks on OS X n' aiiight shared libraries on other platforms.  This property may be set ta a list of header filez ta be placed up in tha Headaz directory inside tha framework folda n' shit.  On non\-Applez platforms these headaz may be installed rockin tha PUBLIC_HEADER option ta tha install(TARGETS) command.

.TP
.B RESOURCE
Specify resource filez up in a FRAMEWORK shared library target.

Shared library targets marked wit tha FRAMEWORK property generate frameworks on OS X n' aiiight shared libraries on other platforms.  This property may be set ta a list of filez ta be placed up in tha Resources directory inside tha framework folda n' shit.  On non\-Applez platforms these filez may be installed rockin tha RESOURCE option ta tha install(TARGETS) command.

.TP
.B RULE_LAUNCH_COMPILE
Specify a launcher fo' compile rules.

See tha global property of tha same name fo' details.  This overrides tha global n' directory property fo' a target.

.TP
.B RULE_LAUNCH_CUSTOM
Specify a launcher fo' custom rules.

See tha global property of tha same name fo' details.  This overrides tha global n' directory property fo' a target.

.TP
.B RULE_LAUNCH_LINK
Specify a launcher fo' link rules.

See tha global property of tha same name fo' details.  This overrides tha global n' directory property fo' a target.

.TP
.B RUNTIME_OUTPUT_DIRECTORY
Output directory up in which ta build RUNTIME target files.

This property specifies tha directory tha fuck into which runtime target filez should be built. Multi\-configuration generators (VS, Xcode) append a per\-configuration subdirectory ta tha specified directory.  There is three kindz of target filez dat may be built: archive, library, n' runtime.  Executablez is always treated as runtime targets, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Static libraries is always treated as archive targets, n' you can put dat on yo' toast. Module libraries is always treated as library targets, n' you can put dat on yo' toast. For non\-DLL platforms shared libraries is treated as library targets, n' you can put dat on yo' toast. For DLL platforms tha DLL part of a gangbangin' finger-lickin' dirty-ass shared library is treated as a runtime target n' tha correspondin import library is treated as a archive target fo' realz. All Windows\-based systems includin Cygwin is DLL platforms.  This property is initialized by tha value of tha variable CMAKE_RUNTIME_OUTPUT_DIRECTORY if it is set when a target is pimped.

.TP
.B RUNTIME_OUTPUT_DIRECTORY_<CONFIG>
Per\-configuration output directory fo' RUNTIME target files.

This be a per\-configuration version of RUNTIME_OUTPUT_DIRECTORY yo, but multi\-configuration generators (VS, Xcode) do NOT append a per\-configuration subdirectory ta tha specified directory.  This property is initialized by tha value of tha variable CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG> if it is set when a target is pimped.

.TP
.B RUNTIME_OUTPUT_NAME
Output name fo' RUNTIME target files.

This property specifies tha base name fo' runtime target files.  It overrides OUTPUT_NAME n' OUTPUT_NAME_<CONFIG> properties. Put ya muthafuckin choppers up if ya feel dis!  There is three kindz of target filez dat may be built: archive, library, n' runtime.  Executablez is always treated as runtime targets, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Static libraries is always treated as archive targets, n' you can put dat on yo' toast. Module libraries is always treated as library targets, n' you can put dat on yo' toast. For non\-DLL platforms shared libraries is treated as library targets, n' you can put dat on yo' toast. For DLL platforms tha DLL part of a gangbangin' finger-lickin' dirty-ass shared library is treated as a runtime target n' tha correspondin import library is treated as a archive target fo' realz. All Windows\-based systems includin Cygwin is DLL platforms.

.TP
.B RUNTIME_OUTPUT_NAME_<CONFIG>
Per\-configuration output name fo' RUNTIME target files.

This is tha configuration\-specific version of RUNTIME_OUTPUT_NAME.

.TP
.B SKIP_BUILD_RPATH
Should rpaths be used fo' tha build tree.

SKIP_BUILD_RPATH be a funky-ass boolean specifyin whether ta skip automatic generation of a rpath allowin tha target ta run from tha build tree.  This property is initialized by tha value of tha variable CMAKE_SKIP_BUILD_RPATH if it is set when a target is pimped.

.TP
.B SOURCES
Source names specified fo' a target.

Read\-only list of sources specified fo' a target.  Da names returned is suitable fo' passin ta tha set_source_files_propertizzles command.

.TP
.B SOVERSION
What version number is dis target.

For shared libraries VERSION n' SOVERSION can be used ta specify tha build version n' API version respectively. When buildin or installin appropriate symlinks is pimped if tha platform supports symlinks n' tha linker supports so\-names. If only one of both is specified tha missin be assumed ta have tha same version number n' shit. Right back up in yo muthafuckin ass. SOVERSION is ignored if NO_SONAME property is set. For shared libraries n' executablez on Windows tha VERSION attribute is parsed ta extract a "major.minor" version number n' shit. These numbers is used as tha image version of tha binary. 

.TP
.B STATIC_LIBRARY_FLAGS
Extra flags ta use when linkin static libraries.

Extra flags ta use when linkin a static library.

.TP
.B STATIC_LIBRARY_FLAGS_<CONFIG>
Per\-configuration flags fo' bustin a static library.

This is tha configuration\-specific version of STATIC_LIBRARY_FLAGS.

.TP
.B SUFFIX
What comes afta tha target name.

A target property dat can be set ta override tha suffix (like fuckin ".so" or ".exe") on tha name of a library, module or executable.

.TP
.B TYPE
Da type of tha target.

This read\-only property can be used ta test tha type of tha given target. Well shiiiit, it is ghon be one of STATIC_LIBRARY, MODULE_LIBRARY, SHARED_LIBRARY, EXECUTABLE or one of tha internal target types.

.TP
.B VERSION
What version number is dis target.

For shared libraries VERSION n' SOVERSION can be used ta specify tha build version n' API version respectively. When buildin or installin appropriate symlinks is pimped if tha platform supports symlinks n' tha linker supports so\-names. If only one of both is specified tha missin be assumed ta have tha same version number n' shit. For executablez VERSION can be used ta specify tha build version. I aint talkin' bout chicken n' gravy biatch. When buildin or installin appropriate symlinks is pimped if tha platform supports symlinks. For shared libraries n' executablez on Windows tha VERSION attribute is parsed ta extract a "major.minor" version number n' shit. These numbers is used as tha image version of tha binary. 

.TP
.B VISIBILITY_INLINES_HIDDEN
Whether ta add a cold-ass lil compile flag ta hide symbolz of inline functions

Da VISIBILITY_INLINES_HIDDEN property determines whether a gangbangin' flag fo' hidin symbols fo' inline functions. tha value passed used up in a visibilitizzle related compile option, like fuckin \-fvisibility=.  This property only has a affect fo' libraries n' executablez wit exports, n' you can put dat on yo' toast.  This property is initialized by tha value of tha variable CMAKE_VISIBILITY_INLINES_HIDDEN if it is set when a target is pimped.

.TP
.B VS_DOTNET_REFERENCES
Visual Studio managed project .NET references

Addz one or mo' semicolon\-delimited .NET references ta a generated Visual Studio project. For example, "System;System.Windows.Forms".

.TP
.B VS_DOTNET_TARGET_FRAMEWORK_VERSION
Specify tha .NET target framework version.

Used ta specify tha .NET target framework version fo' C++/CLI. For example, "v4.5".

.TP
.B VS_GLOBAL_<variable>
Visual Studio project\-specific global variable.

Tell tha Visual Studio generator ta set tha global variable '<variable>' ta a given value up in tha generated Visual Studio project. Ignored on other generators. Qt integration works betta if VS_GLOBAL_QtVersion is set ta tha version FindQt4.cmake found. Y'all KNOW dat shit, muthafucka! For example, "4.7.3"

.TP
.B VS_GLOBAL_KEYWORD
Visual Studio project keyword.

Sets tha "keyword" attribute fo' a generated Visual Studio project. Defaults ta "Win32Proj". Yo ass may wish ta override dis value wit "ManagedCProj", fo' example, up in a Visual Studio managed C++ unit test project.

.TP
.B VS_GLOBAL_PROJECT_TYPES
Visual Studio project type(s).

Can be set ta one or mo' UUIDs recognized by Visual Studio ta indicate tha type of project. This value is copied verbatim tha fuck into tha generated project file. Example fo' a managed C++ unit testin project:


.nf
 {3AC096D0\-A1C2\-E12C\-1390\-A8335801FDAB};{8BC9CEB8\-8B4A\-11D0\-8D11\-00A0C91BC942}
.fi

UUIDs is semicolon\-delimited.

.TP
.B VS_GLOBAL_ROOTNAMESPACE
Visual Studio project root namespace.

Sets tha "RootNamespace" attribute fo' a generated Visual Studio project.  Da attribute is ghon be generated only if dis is set.

.TP
.B VS_KEYWORD
Visual Studio project keyword.

Can be set ta chizzle tha visual basement keyword, fo' example Qt integration works betta if dis is set ta Qt4VSv1.0. 

.TP
.B VS_SCC_AUXPATH
Visual Studio Source Code Control Aux Path.

Can be set ta chizzle tha visual basement source code control auxpath property.

.TP
.B VS_SCC_LOCALPATH
Visual Studio Source Code Control Local Path.

Can be set ta chizzle tha visual basement source code control local path property.

.TP
.B VS_SCC_PROJECTNAME
Visual Studio Source Code Control Project.

Can be set ta chizzle tha visual basement source code control project name property.

.TP
.B VS_SCC_PROVIDER
Visual Studio Source Code Control Provider.

Can be set ta chizzle tha visual basement source code control provider property.

.TP
.B VS_WINRT_EXTENSIONS
Visual Studio project C++/CX language extensions fo' Windows Runtime

Can be set ta enable C++/CX language extensions.

.TP
.B VS_WINRT_REFERENCES
Visual Studio project Windows Runtime Metadata references

Addz one or mo' semicolon\-delimited WinRT references ta a generated Visual Studio project. For example, "Windows;Windows.UI.Core".

.TP
.B WIN32_EXECUTABLE
Build a executable wit a WinMain entry point on windows.

When dis property is set ta legit tha executable when linked on Windows is ghon be pimped wit a WinMain() entry point instead of just main().  This make it a GUI executable instead of a cold-ass lil console application. I aint talkin' bout chicken n' gravy biatch.  See tha CMAKE_MFC_FLAG variable documentation ta configure use of MFC fo' WinMain executables.  This property is initialized by tha value of tha variable CMAKE_WIN32_EXECUTABLE if it is set when a target is pimped.

.TP
.B XCODE_ATTRIBUTE_<an-attribute>
Set Xcode target attributes directly.

Tell tha Xcode generator ta set '<an\-attribute>' ta a given value up in tha generated Xcode project.  Ignored on other generators.

.SH PROPERTIES ON TESTS
.TP
.B ATTACHED_FILES
Attach a list of filez ta a thugged-out dashboard submission.

Set dis property ta a list of filez dat is ghon be encoded n' submitted ta tha dashboard as a addizzle ta tha test result.

.TP
.B ATTACHED_FILES_ON_FAIL
Attach a list of filez ta a thugged-out dashboard submission if tha test fails.

Same as ATTACHED_FILES yo, but these filez will only be included if tha test do not pass.

.TP
.B COST
Set dis ta a gangbangin' floatin point value. Tests up in a test set is ghon be run up in descendin order of cost.

This property raps bout tha cost of a test. Yo ass can explicitly set dis value; tests wit higher COST joints will run first.

.TP
.B DEPENDS
Specifies dat dis test should only be run afta tha specified list of tests.

Set dis ta a list of tests dat must finish before dis test is run.

.TP
.B ENVIRONMENT
Specify environment variablez dat should be defined fo' hustlin a test.

If set ta a list of environment variablez n' jointz of tha form MYVAR=value dem environment variablez is ghon be defined while hustlin tha test. Da environment is restored ta its previous state afta tha test is done.

.TP
.B FAIL_REGULAR_EXPRESSION
If tha output matches dis regular expression tha test will fail.

If set, if tha output matches one of specified regular expressions, tha test will fail.For example: FAIL_REGULAR_EXPRESSION "[^a\-z]Error;ERROR;Failed"

.TP
.B LABELS
Specify a list of text labels associated wit a test.

Da list is reported up in dashboard submissions.

.TP
.B MEASUREMENT
Specify a CDASH measurement n' value ta be reported fo' a test.

If set ta a name then dat name is ghon be reported ta CDASH as a named measurement wit a value of 1. Yo ass may also specify a value by settin MEASUREMENT ta "measurement=value".

.TP
.B PASS_REGULAR_EXPRESSION
Da output must match dis regular expression fo' tha test ta pass.

If set, tha test output is ghon be checked against tha specified regular expressions n' at least one of tha regular expressions has ta match, otherwise tha test will fail.

.TP
.B PROCESSORS
How tha fuck nuff process slots dis test requires

Denotes tha number of processors dat dis test will require. This is typically used fo' MPI tests, n' should be used up in conjunction wit tha ctest_test PARALLEL_LEVEL option.

.TP
.B REQUIRED_FILES
List of filez required ta run tha test.

If set ta a list of files, tha test aint gonna be run unless all of tha filez exist.

.TP
.B RESOURCE_LOCK
Specify a list of resources dat is locked by dis test.

If multiple tests specify tha same resource lock, they is guaranteed not ta run concurrently.

.TP
.B RUN_SERIAL
Do not run dis test up in parallel wit any other test.

Use dis option up in conjunction wit tha ctest_test PARALLEL_LEVEL option ta specify dat dis test should not be run up in parallel wit any other tests.

.TP
.B TIMEOUT
How tha fuck nuff secondz ta allow fo' dis test.

This property if set will limit a test ta not take mo' than tha specified number of secondz ta run. I aint talkin' bout chicken n' gravy biatch. If it exceedz dat tha test process is ghon be capped n' ctest will move ta tha next test. This settin takes precedence over CTEST_TESTING_TIMEOUT.

.TP
.B WILL_FAIL
If set ta true, dis will invert tha pass/fail flag of tha test.

This property can be used fo' tests dat is sposed ta fuckin fail n' return a non zero return code.

.TP
.B WORKING_DIRECTORY
Da directory from which tha test executable is ghon be called.

If dis aint set it is called from tha directory tha test executable is located in.

.SH PROPERTIES ON SOURCE FILES
.TP
.B ABSTRACT
Is dis source file a abstract class.

A property on a source file dat indicates if tha source file represents a cold-ass lil class dat be abstract. This only make sense fo' languages dat gotz a notion of a abstract class n' it is only used by some tools dat wrap classes tha fuck into other languages.

.TP
.B COMPILE_DEFINITIONS
Preprocessor definitions fo' compilin a source file.

Da COMPILE_DEFINITIONS property may be set ta a semicolon\-separated list of preprocessor definitions rockin tha syntax VAR or VAR=value.  Function\-style definitions is not supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  CMake will automatically escape tha value erectly fo' tha natizzle build system (note dat CMake language syntax may require escapes ta specify some joints).  This property may be set on a per\-configuration basis rockin tha name COMPILE_DEFINITIONS_<CONFIG> where <CONFIG> be a upper\-case name (ex. "COMPILE_DEFINITIONS_DEBUG").


CMake will automatically drop some definitions dat is not supported by tha natizzle build tool.  Da VS6 IDE do not support definizzle joints wit spaces (but NMake do).  Xcode do not support per\-configuration definitions on source files.


Disclaimer: Most natizzle build tools have skanky support fo' escapin certain joints, n' you can put dat on yo' toast.  CMake has work\-aroundz fo' nuff cases but some joints may just not be possible ta pass erectly.  If a value do not seem ta be escaped erectly, do not attempt ta work\-around tha problem by addin escape sequences ta tha value.  Yo crazy-ass work\-around may break up in a gangbangin' future version of CMake dat has improved escape support.  Instead consider definin tha macro up in a (configured) header file.  Then report tha limitation. I aint talkin' bout chicken n' gravy biatch.  Known limitations include:


.nf
  #          \- fucked up almost everywhere
  ;          \- fucked up in VS IDE 7.0 n' Borland Makefiles
  ,          \- fucked up in VS IDE
  %          \- fucked up in some cases up in NMake
  & |        \- fucked up in some cases on MinGW
  ^ < > \\"   \- fucked up in most Make tools on Windows
.fi

CMake do not reject these joints outright cuz they do work up in some cases.  Use wit caution. I aint talkin' bout chicken n' gravy biatch.  

.TP
.B COMPILE_DEFINITIONS_<CONFIG>
Per\-configuration preprocessor definitions on a source file.

This is tha configuration\-specific version of COMPILE_DEFINITIONS.  Note dat Xcode do not support per\-configuration source file flags so dis property is ghon be ignored by tha Xcode generator.

.TP
.B COMPILE_FLAGS
Additionizzle flags ta be added when compilin dis source file.

These flags is ghon be added ta tha list of compile flags when dis source file builds.  Use COMPILE_DEFINITIONS ta pass additionizzle preprocessor definitions.

.TP
.B EXTERNAL_OBJECT
If set ta legit then dis be a object file.

If dis property is set ta legit then tha source file is straight-up a object file n' should not be compiled. Y'all KNOW dat shit, muthafucka!  It will still be linked tha fuck into tha target though.

.TP
.B Fortran_FORMAT
Set ta FIXED or FREE ta indicate tha Fortran source layout.

This property  drops some lyrics ta CMake whether a given Fortran source file uses fixed\-format or free\-format.  CMake will pass tha correspondin format flag ta tha compila n' shit.  Consider rockin tha target\-wide Fortran_FORMAT property if all source filez up in a target share tha same format.

.TP
.B GENERATED
Is dis source file generated as part of tha build process.

If a source file is generated by tha build process CMake will handle it differently up in termz of dependency checkin etc. Otherwise havin a non\-existent source file could create problems.

.TP
.B HEADER_FILE_ONLY
Is dis source file only a header file.

A property on a source file dat indicates if tha source file be a header file wit no associated implementation. I aint talkin' bout chicken n' gravy biatch. This is set automatically based on tha file extension n' is used by CMake ta determine if certain dependency shiznit should be computed.

.TP
.B KEEP_EXTENSION
Make tha output file have tha same extension as tha source file.

If dis property is set then tha file extension of tha output file is ghon be tha same as dat of tha source file. Normally tha output file extension is computed based on tha language of tha source file, fo' example .cxx will git all up in a .o extension.

.TP
.B LABELS
Specify a list of text labels associated wit a source file.

This property has meanin only when tha source file is listed up in a target whose LABELS property be also set.  No other semantics is currently specified.

.TP
.B LANGUAGE
What programmin language is tha file.

A property dat can be set ta indicate what tha fuck programmin language tha source file is. If it aint set tha language is determined based on tha file extension. I aint talkin' bout chicken n' gravy biatch. Typical joints is CXX C etc. Right back up in yo muthafuckin ass. Settin dis property fo' a gangbangin' file means dis file is ghon be compiled. Y'all KNOW dat shit, muthafucka! Do not set dis fo' headaz or filez dat should not be compiled.

.TP
.B LOCATION
Da full path ta a source file.

A read only property on a SOURCE FILE dat gotz nuff tha full path ta tha source file.

.TP
.B MACOSX_PACKAGE_LOCATION
Place a source file inside a Mac OS X bundle, CFBundle, or framework.

Executable targets wit tha MACOSX_BUNDLE property set is built as Mac OS X application bundlez on Applez platforms.  Shared library targets wit tha FRAMEWORK property set is built as Mac OS X frameworks on Applez platforms.  Module library targets wit tha BUNDLE property set is built as Mac OS X CFBundle bundlez on Applez platforms.  Source filez listed up in tha target wit dis property set is ghon be copied ta a gangbangin' finger-lickin' directory inside tha bundle or framework content folda specified by tha property value.  For bundlez tha content folda is "<name>.app/Contents".  For frameworks tha content folda is "<name>.framework/Versions/<version>".  For cfbundlez tha content folda is "<name>.bundle/Contents" (unless tha extension is chizzled).  See tha PUBLIC_HEADER, PRIVATE_HEADER, n' RESOURCE target propertizzles fo' specifyin filez meant fo' Headers, PrivateHeaders, or Resources directories.

.TP
.B OBJECT_DEPENDS
Additionizzle filez on which a cold-ass lil compiled object file depends.

Specifies a semicolon\-separated list of full\-paths ta filez on which any object filez compiled from dis source file depend yo, but it ain't no stoppin cause I be still poppin'.  An object file is ghon be recompiled if any of tha named filez is newer than dat shit.


This property need not be used ta specify tha dependency of a source file on a generated header file dat it includes.  Although tha property was originally introduced fo' dis purpose, it is no longer necessary.  If tha generated header file is pimped by a cold-ass lil custom command up in tha same target as tha source file, tha automatic dependency scannin process will recognize tha dependency.  If tha generated header file is pimped by another target, a inter\-target dependency should be pimped wit tha add_dependencies command (if one do not already exist cuz of linkin relationshizzles).

.TP
.B OBJECT_OUTPUTS
Additionizzle outputs fo' a Makefile rule.

Additionizzle outputs pimped by compilation of dis source file. If any of these outputs is missin tha object is ghon be recompiled. Y'all KNOW dat shit, muthafucka! This is supported only on Makefile generators n' is ghon be ignored on other generators.

.TP
.B SYMBOLIC
Is dis just a name fo' a rule.

If SYMBOLIC (boolean) is set ta legit tha build system is ghon be informed dat tha source file aint straight-up pimped on disk but instead used as a symbolic name fo' a funky-ass build rule.

.TP
.B WRAP_EXCLUDE
Exclude dis source file from any code wrappin steez.

Some packages can wrap source filez tha fuck into alternate languages ta provide additionizzle functionality. For example, C++ code can be wrapped tha fuck into Java or Python etc rockin SWIG etc. If WRAP_EXCLUDE is set ta legit (1 etc) dat indicates dat dis source file should not be wrapped.

.SH PROPERTIES ON CACHE ENTRIES
.TP
.B ADVANCED
True if entry should be hidden by default up in GUIs.

This be a funky-ass boolean value indicatin whether tha entry is considered bangin-ass only fo' advanced configuration. I aint talkin' bout chicken n' gravy biatch.  Da mark_as_advanced() command modifies dis property.

.TP
.B HELPSTRING
Help associated wit entry up in GUIs.

This strang summarizes tha purpose of a entry ta help playas set it all up in a CMake GUI.

.TP
.B MODIFIED
Internal pimpment property.  Do not set or get.

This be a internal cache entry property managed by CMake ta track interactizzle user modification of entries. Put ya muthafuckin choppers up if ya feel dis!  Ignore dat shit.

.TP
.B STRINGS
Enumerate possible STRING entry joints fo' GUI selection.

For cache entries wit type STRING, dis enumerates a set of joints, n' you can put dat on yo' toast.  CMake GUIs may use dis ta provide a selection widget instead of a generic strang entry field. Y'all KNOW dat shit, muthafucka!  This is fo' convenience only.  CMake do not enforce dat tha value matches one of dem listed.

.TP
.B TYPE
Widget type fo' entry up in GUIs.

Cache entry joints is always strings yo, but CMake GUIs present widgets ta help playas set joints, n' you can put dat on yo' toast.  Da GUIs use dis property as a hint ta determine tha widget type.  Valid TYPE joints are:


.nf
  BOOL          = Boolean ON/OFF value.
  PATH          = Path ta a gangbangin' finger-lickin' directory.
  FILEPATH      = Path ta a gangbangin' file.
  STRING        = Generic strang value.
  INTERNAL      = Do not present up in GUI at all.
  STATIC        = Value managed by CMake, do not chizzle.
  UNINITIALIZED = Type not yet specified.
.fi

Generally tha TYPE of a cold-ass lil cache entry should be set by tha command which creates it (set, option, find_library, etc.).

.TP
.B VALUE
Value of a cold-ass lil cache entry.

This property maps ta tha actual value of a cold-ass lil cache entry.  Settin dis property always sets tha value without checking, so use wit care.

.SH COPYRIGHT
.PP
Copyright 2000\-2012 Kitware, Inc., Insight Software Consortium.  All muthafuckin rights reserved.

.PP
Redistribution n' use up in source n' binary forms, wit or without modification, is permitted provided dat tha followin conditions is met:

.PP
Redistributionz of source code must retain tha above copyright notice, dis list of conditions n' tha followin disclaimer.

.PP
Redistributions up in binary form must reproduce tha above copyright notice, dis list of conditions n' tha followin disclaimer up in tha documentation and/or other shiznit provided wit tha distribution.

.PP
Neither tha namez of Kitware, Inc., tha Insight Software Consortium, nor tha namez of they contributors may be used ta endorse or promote shizzle derived from dis software without specific prior freestyled permission.

.PP
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

.SH SEE ALSO
.PP
Da followin resources is available ta git help rockin CMake:

.TP
.B Home Page
http://www.cmake.org

Da primary startin point fo' peepin' bout CMake.

.TP
.B Frequently Axed Questions
http://www.cmake.org/Wiki/CMake_FAQ

A Wiki is provided containin lyrics ta frequently axed thangs. 

.TP
.B Online Documentation
http://www.cmake.org/HTML/Documentation.html

Links ta available documentation may be found on dis wizzy page.

.TP
.B Mailin List
http://www.cmake.org/HTML/MailingLists.html

For help n' rap bout rockin cmake, a mailin list is provided at cmake@cmake.org. Da list is member\-post\-only but one may sign up on tha CMake wizzy page. Please first read tha full documentation at http://www.cmake.org before postin thangs ta tha list.

