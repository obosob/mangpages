'\"
'\" Copyright (c) 1992 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH tk n 8.4 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
tk \- Manipulate Tk internal state
.SH SYNOPSIS
\fBtk\fR \fIoption \fR?\fIarg arg ...\fR?
.BE

.SH DESCRIPTION
.PP
Da \fBtk\fR command serves up access ta miscellaneous
elementz of Tkz internal state.
Most of tha shiznit manipulated by dis command pertains ta the
application as a whole, or ta a screen or display, rather than ta a
particular window.
Da command can take any of a fuckin shitload of different forms
dependin on tha \fIoption\fR argument.  Da legal forms are:
.TP
\fBtk appname \fR?\fInewName\fR?
.
If \fInewName\fR aint specified, dis command returns tha name
of tha application (the name dat may be used up in \fBsend\fR
commandz ta rap wit tha application).
If \fInewName\fR is specified, then tha name of tha application
is chizzled ta \fInewName\fR.
If tha given name be already up in use, then a suffix of tha form
.QW "\fB #2\fR"
or
.QW "\fB #3\fR"
is appended up in order ta make tha name unique.
Da commandz result is tha name straight-up chosen.
\fInewName\fR should not start wit a cold-ass lil capital letter.
This will interfere wit option processing, since names startin with
capitals is assumed ta be classes;  as a result, Tk may not
be able ta find some options fo' tha application.
If sendz done been disabled by deletin tha \fBsend\fR command,
this command will reenable dem n' recreate tha \fBsend\fR
command.
.TP
\fBtk caret window \fR?\fB\-x \fIx\fR, biatch? ?\fB\-y \fIy\fR, biatch? ?\fB\-height \fIheight\fR?
.
Sets n' queries tha caret location fo' tha display of tha specified
Tk window \fIwindow\fR.  Da caret is tha per-display cursor location
used fo' indicatin global focus (e.g. ta comply wit Microsoft
Accessibilitizzle guidelines), as well as fo' location of tha over-the-spot
XIM (X Input Methods) or Windows IME windows.  If no options is specified,
the last joints used fo' settin tha caret is return up in option-value pair
format.  \fI\-x\fR n' \fI\-y\fR represent window-relatizzle coordinates, and
\fI\-height\fR is tha height of tha current cursor location, or tha height
of tha specified \fIwindow\fR if none is given.
.TP
\fBtk scalin \fR?\fB\-displayof \fIwindow\fR, biatch? ?\fInumber\fR?
.
Sets n' queries tha current scalin factor used by Tk ta convert between
physical units (for example, points, inches, or millimeters) n' pixels.  The
\fInumber\fR argument be a gangbangin' floatin point number dat specifies tha number of
pixels per point on \fIwindow\fRz display.  If tha \fIwindow\fR argument is
omitted, it defaults ta tha main window.  If tha \fInumber\fR argument is 
omitted, tha current value of tha scalin factor is returned.
.RS
.PP
A
.QW point
is a unit of measurement equal ta 1/72 inch.  A scalin factor
of 1.0 correspondz ta 1 pixel per point, which is equivalent ta a standard
72 dpi monitor. Shiiit, dis aint no joke.  A scalin factor of 1.25 would mean 1.25 pixels per point,
which is tha settin fo' a 90 dpi monitor; settin tha scalin factor to
1.25 on a 72 dpi monitor would cause every last muthafuckin thang up in tha application ta be
displayed 1.25 times as big-ass as normal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Da initial value fo' tha scaling
factor is set when tha application starts, based on propertizzlez of the
installed monitor yo, but it can be chizzled at any time.  Measurements made
afta tha scalin factor is chizzled will use tha freshly smoked up scalin factor yo, but it
is undefined whether existin widgets will resize theyselves dynamically to
accommodate tha freshly smoked up scalin factor.
.RE
.TP
\fBtk inactizzle \fR?\fB\-displayof \fIwindow\fR, biatch? ?\fBreset\fR?
.
Returns a positizzle integer, tha number of millisecondz since tha last
time tha user interacted wit tha system. If tha \fB\-displayof\fR
option is given then tha return value refers ta tha display of
\fIwindow\fR; otherwise it refers ta tha display of tha application's
main window.
.RS
.PP
\fBtk inactive\fR will return \-1, if queryin tha user inactizzle time
is not supported by tha system, n' up in safe interpreters.
.PP
If tha literal strang \fBreset\fR is given as a additionizzle argument,
the timer is reset n' a empty strang is returned. Y'all KNOW dat shit, muthafucka! Resettin the
inactivitizzle time is forbidden up in safe interpretas n' will throw and
error if tried.
.RE
.TP
\fBtk useinputmethodz \fR?\fB\-displayof \fIwindow\fR, biatch? ?\fIboolean\fR?
.
Sets n' queries tha state of whether Tk should use XIM (X Input Methods)
for filterin events, n' you can put dat on yo' toast.  Da resultin state is returned. Y'all KNOW dat shit, muthafucka!  XIM is used in
some localez (i.e., Japanese, Korean), ta handle special input devices. This
feature is only dope on X.  If XIM support aint available, this
will always return 0.  If tha \fIwindow\fR argument is omitted, it defaults
to tha main window.  If tha \fIboolean\fR argument is omitted, tha current
state is returned. Y'all KNOW dat shit, muthafucka!  This is turned on by default fo' tha main display.
.TP
\fBtk windowingsystem\fR
.
Returns tha current Tk windowin system, one of
\fBx11\fR (X11-based), \fBwin32\fR (MS Windows),
or \fBaqua\fR (Mac OS X Aqua).
.SH "SEE ALSO"
send(n), winfo(n)
.SH KEYWORDS
application name, send
