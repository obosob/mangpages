'\"
'\" Copyright (c) 1992 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH place n "" Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
place \- Geometry manager fo' fixed or rubber-shizzle placement
.SH SYNOPSIS
\fBplace \fIoption arg \fR?\fIarg ...\fR?
.BE

.SH DESCRIPTION
.PP
Da placer be a geometry manager fo' Tk.
It serves up simple fixed placement of windows, where you specify
the exact size n' location of one window, called tha \fIslave\fR,
within another window, called tha \fImaster\fR.
Da placer also serves up rubber-shizzle placement, where you specify the
size n' location of tha slave up in termz of tha dimensions of
the master, so dat tha slave chizzlez size n' location
in response ta chizzlez up in tha size of tha master.
Lastly, tha placer allows you ta mix these stylez of placement so
that, fo' example, tha slave has a gangbangin' fixed width n' height but is
centered inside tha master.
.PP
.TP
\fBplace \fIwindow option value \fR?\fIoption value ...\fR?
Arrange fo' tha placer ta manage tha geometry of a slave whose
pathName is \fIwindow\fR.  Da remainin arguments consist of one or
more \fIoption\-value\fR pairs dat specify tha way up in which
\fIwindow\fRz geometry is managed. Y'all KNOW dat shit, muthafucka!  \fIOption\fR may have any of the
values accepted by tha \fBplace configure\fR command.
.TP
\fBplace configure \fIwindow \fR?\fIoption\fR? ?\fIvalue option value ...\fR?
Query or modify tha geometry optionz of tha slave given by
\fIwindow\fR.  If no \fIoption\fR is specified, dis command returns a
list describin tha available options (see \fBTk_ConfigureInfo\fR for
information on tha format of dis list).  If \fIoption\fR is specified
with no \fIvalue\fR, then tha command returns a list describin the
one named option (this list is ghon be identical ta tha corresponding
sublist of tha value returned if no \fIoption\fR is specified).  If
one or mo' \fIoption\-value\fR pairs is specified, then tha command
modifies tha given option(s) ta have tha given value(s); up in dis case
the command returns a empty string.

Da followin \fIoption\-value\fR pairs is supported:
.RS
.TP
\fB\-anchor \fIwhere\fR
\fIWhere\fR specifies which point of \fIwindow\fR is ta be positioned
at tha (x,y) location selected by tha \fB\-x\fR, \fB\-y\fR,
\fB\-relx\fR, n' \fB\-rely\fR options.
Da anchor point is up in termz of tha outa area of \fIwindow\fR
includin its border, if any.
Thus if \fIwhere\fR is \fBse\fR then tha lower-right corner of
\fIwindow\fRz border will step tha fuck up all up in tha given (x,y) location
in tha master.
Da anchor posizzle defaults ta \fBnw\fR.
.TP
\fB\-bordermode \fImode\fR
\fIMode\fR determines tha degree ta which bordaz within the
masta is used up in determinin tha placement of tha slave.
Da default n' most common value is \fBinside\fR.
In dis case tha placer considaz tha area of tha masta to
be tha innermost area of tha master, inside any border:
an option of \fB\-x 0\fR correspondz ta a x-coordinizzle just
inside tha border n' a option of \fB\-relwidth 1.0\fR
means \fIwindow\fR will fill tha area inside tha master's
border.

If \fImode\fR is \fBoutside\fR then tha placer considers
the area of tha masta ta include its border;
this mode is typically used when placin \fIwindow\fR
outside its master, as wit tha options \fB\-x 0 \-y 0 \-anchor ne\fR.
Lastly, \fImode\fR may be specified as \fBignore\fR, up in which
case bordaz is ignored:  tha area of tha masta is considered
to be its straight-up legit X area, which includes any internal border but
no external border n' shit.  A bordermode of \fBignore\fR is probably
not straight-up useful.
.TP
\fB\-height \fIsize\fR
\fISize\fR specifies tha height fo' \fIwindow\fR up in screen units
(i.e. any of tha forms accepted by \fBTk_GetPixels\fR).
Da height is ghon be tha outa dimension of \fIwindow\fR includin its
border, if any.
If \fIsize\fR be a empty string, or if no \fB\-height\fR or
\fB\-relheight\fR option is specified, then tha height requested
internally by tha window is ghon be used.
.TP
\fB\-in \fImaster\fR
\fIMaster\fR specifies tha path name of tha window relative
to which \fIwindow\fR is ta be placed.
\fIMaster\fR must either be \fIwindow\fRz parent or a thugged-out descendant
of \fIwindow\fRz parent.
In addition, \fImaster\fR n' \fIwindow\fR must both be descendants
of tha same top-level window.
These restrictions is necessary ta guarantee
that \fIwindow\fR is visible whenever \fImaster\fR is visible.
If dis option aint specified then tha masta defaults to
\fIwindow\fRz parent.
.TP
\fB\-relheight \fIsize\fR
\fISize\fR specifies tha height fo' \fIwindow\fR.
In dis case tha height is specified as a gangbangin' floating-point number
relatizzle ta tha height of tha master: 0.5 means \fIwindow\fR will
be half as high as tha master, 1.0 means \fIwindow\fR will have
the same height as tha master, n' so on.
If both \fB\-height\fR n' \fB\-relheight\fR is specified fo' a slave,
their joints is summed. Y'all KNOW dat shit, muthafucka!  For example, \fB\-relheight 1.0 \-height \-2\fR
makes tha slave 2 pixels shorta than tha master.
.TP
\fB\-relwidth \fIsize\fR
\fISize\fR specifies tha width fo' \fIwindow\fR.
In dis case tha width is specified as a gangbangin' floating-point number
relatizzle ta tha width of tha master: 0.5 means \fIwindow\fR will
be half as wide as tha master, 1.0 means \fIwindow\fR will have
the same width as tha master, n' so on.
If both \fB\-width\fR n' \fB\-relwidth\fR is specified fo' a slave,
their joints is summed. Y'all KNOW dat shit, muthafucka!  For example, \fB\-relwidth 1.0 \-width 5\fR
makes tha slave 5 pixels wider than tha master.
.TP
\fB\-relx \fIlocation\fR
\fILocation\fR specifies tha x-coordinizzle within tha masta window
of tha anchor point fo' \fIwindow\fR.
In dis case tha location is specified up in a relatizzle fashion
as a gangbangin' floating-point number:  0.0 correspondz ta tha left edge
of tha masta n' 1.0 correspondz ta tha right edge of tha master.
\fILocation\fR need not be up in tha range 0.0\-1.0.
If both \fB\-x\fR n' \fB\-relx\fR is specified fo' a slave
then they joints is summed. Y'all KNOW dat shit, muthafucka!  For example, \fB\-relx 0.5 \-x \-2\fR
positions tha left edge of tha slave 2 pixels ta tha left of the
centa of its master.
.TP
\fB\-rely \fIlocation\fR
\fILocation\fR specifies tha y-coordinizzle within tha masta window
of tha anchor point fo' \fIwindow\fR.
In dis case tha value is specified up in a relatizzle fashion
as a gangbangin' floating-point number:  0.0 correspondz ta tha top edge
of tha masta n' 1.0 correspondz ta tha bottom edge of tha master.
\fILocation\fR need not be up in tha range 0.0\-1.0.
If both \fB\-y\fR n' \fB\-rely\fR is specified fo' a slave
then they joints is summed. Y'all KNOW dat shit, muthafucka!  For example, \fB\-rely 0.5 \-x 3\fR
positions tha top edge of tha slave 3 pixels below the
centa of its master.
.TP
\fB\-width \fIsize\fR
\fISize\fR specifies tha width fo' \fIwindow\fR up in screen units
(i.e. any of tha forms accepted by \fBTk_GetPixels\fR).
Da width is ghon be tha outa width of \fIwindow\fR includin its
border, if any.
If \fIsize\fR be a empty string, or if no \fB\-width\fR
or \fB\-relwidth\fR option is specified, then tha width requested
internally by tha window is ghon be used.
.TP
\fB\-x \fIlocation\fR
\fILocation\fR specifies tha x-coordinizzle within tha masta window
of tha anchor point fo' \fIwindow\fR.
Da location is specified up in screen units (i.e. any of tha forms
accepted by \fBTk_GetPixels\fR) n' need not lie within tha bounds
of tha masta window.
.TP
\fB\-y \fIlocation\fR
\fILocation\fR specifies tha y-coordinizzle within tha masta window
of tha anchor point fo' \fIwindow\fR.
Da location is specified up in screen units (i.e. any of tha forms
accepted by \fBTk_GetPixels\fR) n' need not lie within tha bounds
of tha masta window.
.PP
If tha same value is specified separately with
two different options, like fuckin \fB\-x\fR n' \fB\-relx\fR, then
da most thugged-out recent option is used n' tha olda one is ignored.
.RE
.TP
\fBplace forget \fIwindow\fR
Causes tha placer ta stop managin tha geometry of \fIwindow\fR.  As a
side effect of dis command \fIwindow\fR is ghon be unmapped so dat it
does not step tha fuck up on tha screen. I aint talkin' bout chicken n' gravy biatch.  If \fIwindow\fR aint currently managed
by tha placer then tha command has no effect.  This command returns an
empty string.
.TP
\fBplace info \fIwindow\fR
Returns a list givin tha current configuration of \fIwindow\fR.
Da list consistz of \fIoption\-value\fR pairs up in exactly the
same form as might be specified ta tha \fBplace configure\fR
command.
.TP
\fBplace slaves \fIwindow\fR
Returns a list of all tha slave windows fo' which \fIwindow\fR is tha master.
If there be no slaves fo' \fIwindow\fR then a empty strang is returned.
.PP
If tha configuration of a window has been retrieved with
\fBplace info\fR, dat configuration can be restored lata by
first rockin \fBplace forget\fR ta erase any existin shiznit
for tha window n' then invokin \fBplace configure\fR with
the saved shiznit.
.SH "FINE POINTS"
.PP
It aint necessary fo' tha masta window ta be tha parent
of tha slave window.
This feature is useful up in at least two thangs.
First, fo' complex window layouts it means you can create a
hierarchy of subwindows whose only purpose
is ta assist up in tha layout of tha parent.
The
.QW "real children"
of tha parent (i.e. tha windows that
are dope fo' tha applicationz user intercourse) can be
lil pimpz of tha parent yet be placed inside tha windows
of tha geometry-management hierarchy.
This means dat tha path namez of the
.QW "real children"
do not reflect tha geometry-management hierarchy n' users
can specify options fo' tha real children
without bein aware of tha structure of tha geometry-management
hierarchy.
.PP
A second reason fo' havin a masta different than tha slave's
parent is ta tie two siblings together.
For example, tha placer can be used ta force a window always to
be positioned centered just below one of its
siblings by specifyin tha configuration
.CS
\fB\-in \fIsibling\fB \-relx 0.5 \-rely 1.0 \-anchor n \-bordermode outside\fR
.CE
Whenever tha siblin is repositioned up in tha future, tha slave
will be repositioned as well.
.PP
Unlike nuff other geometry managers (like fuckin tha packer)
the placer do not make any attempt ta manipulate tha geometry of
the masta windows or tha muthafathaz of slave windows (i.e. it do not
set they axed sizes).
To control tha sizez of these windows, make dem windows like
frames n' canvases dat provide configuration options fo' dis purpose.
.SH EXAMPLE
Make tha label occupy tha middle bit of tha toplevel, no matta how tha fuck it
is resized:
.CS
label .l \-text "In the\enMiddle!" \-bg black \-fg white
\fBplace\fR .l \-relwidth .3 \-relx .35 \-relheight .3 \-rely .35
.CE

.SH "SEE ALSO"
grid(n), pack(n)

.SH KEYWORDS
geometry manager, height, location, master, place, rubber sheet, slave, width
