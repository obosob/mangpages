'\" 
'\" Copyright (c) 1995-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\"
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH fconfigure n 8.3 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
fconfigure \- Set n' git options on a cold-ass lil channel
.SH SYNOPSIS
.nf
\fBfconfigure \fIchannelId\fR
\fBfconfigure \fIchannelId\fR \fIname\fR
\fBfconfigure \fIchannelId\fR \fIname value \fR?\fIname value ...\fR?
.fi
.BE
.SH DESCRIPTION
.PP
Da \fBfconfigure\fR command sets n' retrieves options fo' channels.
.PP
\fIChannelId\fR identifies tha channel fo' which ta set or query an
option n' must refer ta a open channel like fuckin a Tcl standard
channel (\fBstdin\fR, \fBstdout\fR, or \fBstderr\fR), tha return
value from a invocation of \fBopen\fR or \fBsocket\fR, or tha result
of a cold-ass lil channel creation command provided by a Tcl extension.
.PP
If no \fIname\fR or \fIvalue\fR arguments is supplied, tha command
returns a list containin alternatin option names n' joints fo' tha channel.
If \fIname\fR is supplied but no \fIvalue\fR then tha command returns
the current value of tha given option.
If one or mo' pairz of \fIname\fR n' \fIvalue\fR is supplied, the
command sets each of tha named options ta tha correspondin \fIvalue\fR;
in dis case tha return value be a empty string.
.PP
Da options busted lyrics bout below is supported fo' all channels. In addition,
each channel type may add options dat only it supports, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. See tha manual
entry fo' tha command dat creates each type of channels fo' tha options
that dat specific type of channel supports, n' you can put dat on yo' toast. For example, peep tha manual
entry fo' tha \fBsocket\fR command fo' its additionizzle options.
.TP
\fB\-blocking\fR \fIboolean\fR
Da \fB\-blocking\fR option determines whether I/O operations on the
channel can cause tha process ta block indefinitely.
Da value of tha option must be a proper boolean value.
Channels is normally up in blockin mode;  if a cold-ass lil channel is placed into
nonblockin mode it will affect tha operation of tha \fBgets\fR,
\fBread\fR, \fBputs\fR, \fBflush\fR, n' \fBclose\fR commandz by
allowin dem ta operate asynchronously;
see tha documentation fo' dem commandz fo' details.
For nonblockin mode ta work erectly, tha application must be
usin tha Tcl event loop (e.g. by callin \fBTcl_DoOneEvent\fR or
invokin tha \fBvwait\fR command).
.TP
\fB\-buffering\fR \fInewValue\fR
.
If \fInewValue\fR is \fBfull\fR then tha I/O system will buffer output
until its internal buffer is full or until tha \fBflush\fR command is
invoked. Y'all KNOW dat shit, muthafucka! If \fInewValue\fR is \fBline\fR, then tha I/O system will
automatically flush output fo' tha channel whenever a newline character
is output. If \fInewValue\fR is \fBnone\fR, tha I/O system will flush
automatically afta every last muthafuckin output operation. I aint talkin' bout chicken n' gravy biatch.  Da default is for
\fB\-buffering\fR ta be set ta \fBfull\fR except fo' channels that
connect ta terminal-like devices; fo' these channels tha initial setting
is \fBline\fR.  Additionally, \fBstdin\fR n' \fBstdout\fR are
initially set ta \fBline\fR, n' \fBstderr\fR is set ta \fBnone\fR.
.TP
\fB\-buffersize\fR \fInewSize\fR
.
\fINewvalue\fR must be a integer; its value is used ta set tha size of
buffers, up in bytes, subsequently allocated fo' dis channel ta store input
or output. \fINewvalue\fR must be between ten n' one million, allowing
bufferz of ten ta one mazillion bytes up in size.
.TP
\fB\-encoding\fR \fIname\fR
.
This option is used ta specify tha encodin of tha channel, so dat tha data
can be converted ta n' from Unicode fo' use up in Tcl.  For instance, in
order fo' Tcl ta read charactas from a Japanese file up in \fBshiftjis\fR
and properly process n' display tha contents, tha encodin would be set
to \fBshiftjis\fR.  Thereafter, when readin from tha channel, tha bytes in
the Japanese file would be converted ta Unicode as they is read.
Freestylin be also supported \- as Tcl strings is freestyled ta tha channel they
will automatically be converted ta tha specified encodin on output.
.RS
.PP
If a gangbangin' file gotz nuff pure binary data (for instance, a JPEG image), the
encodin fo' tha channel should be configured ta be \fBbinary\fR.  Tcl
will then assign no interpretation ta tha data up in tha file n' simply read or
write raw bytes.  Da Tcl \fBbinary\fR command can be used ta manipulate this
byte-oriented data.  It be probably betta ta set the
\fB\-translation\fR option ta \fBbinary\fR when you wanna transfer
binary data, as dis turns off tha other automatic interpretations of
the bytes up in tha stream as well.
.PP
Da default encodin fo' newly opened channels is tha same ol' dirty platform- and
locale-dependent system encodin used fo' interfacin wit tha operating
system, as returned by \fBencodin system\fR.
.RE
.TP
\fB\-eofchar\fR \fIchar\fR
.TP
\fB\-eofchar\fR \fB{\fIinChar outChar\fB}\fR
.
This option supports DOS file systems dat use Control-z (\ex1a) as an
end of file marker n' shit.  If \fIchar\fR aint a empty string, then this
characta signals end-of-file when it is encountered durin input.  For
output, tha end-of-file characta is output when tha channel is closed.
If \fIchar\fR is tha empty string, then there is no special end of file
characta marker n' shit.  For read-write channels, a two-element list specifies
the end of file marker fo' input n' output, respectively.  As a
convenience, when settin tha end-of-file characta fo' a read-write
channel you can specify a single value dat will apply ta both reading
and writing.  When queryin tha end-of-file characta of a read-write
channel, a two-element list will always be returned. Y'all KNOW dat shit, muthafucka!  Da default value
for \fB\-eofchar\fR is tha empty strang up in all cases except fo' files
under Windows.  In dat case tha \fB\-eofchar\fR is Control-z (\ex1a) for
readin n' tha empty strang fo' writing.
Da aaight range fo' \fB\-eofchar\fR joints is \ex01 - \ex7f;
attemptin ta set \fB\-eofchar\fR ta a value outside of dis range will
generate a error.
.TP
\fB\-translation\fR \fImode\fR
.TP
\fB\-translation\fR \fB{\fIinMode outMode\fB}\fR 
.
In Tcl scripts tha end of a line be always represented rockin a single
newline characta (\en).  But fuck dat shiznit yo, tha word on tha street is dat up in actual filez n' devices tha end of
a line may be represented differently on different platforms, or even for
different devices on tha same platform.  For example, under UNIX newlines
are used up in files, whereas carriage-return-linefeed sequences are
normally used up in network connections.  On input (i.e., wit \fBgets\fR
and \fBread\fR) tha Tcl I/O system automatically translates tha external
end-of-line representation tha fuck into newline characters.  Upon output (i.e.,
with \fBputs\fR), tha I/O system translates newlines ta tha external
end-of-line representation. I aint talkin' bout chicken n' gravy biatch.  Da default translation mode, \fBauto\fR,
handlez all tha common cases automatically yo, but tha \fB\-translation\fR
option serves up explicit control over tha end of line translations.
.RS
.PP
Da value associated wit \fB\-translation\fR be a single item for
read-only n' write-only channels.  Da value be a two-element list for
read-write channels; tha read translation mode is tha straight-up original gangsta element of
the list, n' tha write translation mode is tha second element.  As a
convenience, when settin tha translation mode fo' a read-write channel
you can specify a single value dat will apply ta both readin and
writing.  When queryin tha translation mode of a read-write channel, a
two-element list will always be returned. Y'all KNOW dat shit, muthafucka!  Da followin joints are
currently supported:
.TP
\fBauto\fR
.
As tha input translation mode, \fBauto\fR treats any of newline
(\fBlf\fR), carriage return (\fBcr\fR), or carriage return followed by a
newline (\fBcrlf\fR) as tha end of line representation. I aint talkin' bout chicken n' gravy biatch.  Da end of line
representation can even chizzle from line-to-line, n' all cases are
translated ta a newline.  As tha output translation mode, \fBauto\fR
chooses a platform specific representation; fo' sockets on all platforms
Tcl chizzlez \fBcrlf\fR, fo' all Unix flavors, it chizzlez \fBlf\fR, and
for tha various flavorz of Windows it chizzlez \fBcrlf\fR.  Da default
settin fo' \fB\-translation\fR is \fBauto\fR fo' both input n' output.
.TP
\fBbinary\fR 
.
No end-of-line translations is performed. Y'all KNOW dat shit, muthafucka!  This is nearly identical to
\fBlf\fR mode, except dat up in addizzle \fBbinary\fR mode also sets the
end-of-file characta ta tha empty strang (which disablez it) n' sets the
encodin ta \fBbinary\fR (which disablez encodin filtering).  See the
description of \fB\-eofchar\fR n' \fB\-encoding\fR fo' mo' shiznit.
.RS
.PP
Internally, i.e. when it comes ta tha actual behaviour of the
translator dis value \fBis\fR identical ta \fBlf\fR n' is therefore
reported as such when queried. Y'all KNOW dat shit, muthafucka! Even if \fBbinary\fR was used ta set
the translation.
.RE
.TP
\fBcr\fR
.
Da end of a line up in tha underlyin file or thang is represented by a
single carriage return character n' shit.  As tha input translation mode,
\fBcr\fR mode converts carriage returns ta newline characters.  As the
output translation mode, \fBcr\fR mode translates newline charactas to
carriage returns.
.TP
\fBcrlf\fR
.
Da end of a line up in tha underlyin file or thang is represented by a
carriage return characta followed by a linefeed character n' shit.  As tha input
translation mode, \fBcrlf\fR mode converts carriage-return-linefeed
sequences ta newline characters.  As tha output translation mode,
\fBcrlf\fR mode translates newline charactas ta carriage-return-linefeed
sequences.  This mode is typically used on Windows platforms n' for
network connections.
.TP
\fBlf\fR
.
Da end of a line up in tha underlyin file or thang is represented by a
single newline (linefeed) character n' shit.  In dis mode no translations occur
durin either input or output.  This mode is typically used on UNIX
platforms.
.RE
.PP
.SH "STANDARD CHANNELS"
.PP
Da Tcl standard channels (\fBstdin\fR, \fBstdout\fR, n' \fBstderr\fR)
can be configured all up in dis command like every last muthafuckin other channel opened
by tha Tcl library. Beyond tha standard options busted lyrics bout above they
will also support any special option accordin ta they current type.
If, fo' example, a Tcl application is started by tha \fBinet\fR
super-server common on Unix system its Tcl standard channels will be
sockets n' thus support tha socket options.
.SH EXAMPLES
Instruct Tcl ta always bust output ta \fBstdout\fR immediately,
whether or not it is ta a terminal:
.CS
\fBfconfigure\fR stdout -bufferin none
.CE
.PP
Open a socket n' read lines from it without eva blockin the
processin of other events:
.CS
set s [socket some.where.com 12345]
\fBfconfigure\fR $s -blockin 0
fileevent $s readable "readMe $s"
proc readMe chan {
   if {[gets $chan line] < 0} {
      if {[eof $chan]} {
         close $chan
         return
      }
      # Could not read a cold-ass lil complete line dis time; Tcl's
      # internal bufferin will hold tha partial line fo' us
      # until some mo' data be available over tha socket.
   } else {
      puts stdout $line
   }
}
.CE
.PP
Read a PPM-format image from a gangbangin' file:
.CS
# Open tha file n' put it tha fuck into Unix ASCII mode
set f [open teapot.ppm]
\fBfconfigure\fR $f \-encodin ascii \-translation lf

# Git tha header
if {[gets $f] ne "P6"} {
   error "not a raw\-bits PPM"
}

# Read lines until our crazy asses have gots non-comment lines
# dat supply our asses wit three decimal joints.
set lyrics {}
while {[llength $words] < 3} {
   gets $f line
   if {[strin match "#*" $line]} continue
   lappend lyrics {*}[join [scan $line %d%d%d]]
}

# Those lyrics supply tha size of tha image n' its
# overall depth per channel fo' realz. Assign ta variables.
lassign $wordz xSize ySize depth

# Now switch ta binary mode ta pull up in tha data,
# one byte per channel (red,green,blue) per pixel.
\fBfconfigure\fR $f \-translation binary
set numDataBytes [expr {3 * $xSize * $ySize}]
set data [read $f $numDataBytes]

close $f
.CE

.SH "SEE ALSO"
close(n), flush(n), gets(n), open(n), puts(n), read(n), socket(n),
Tcl_StandardChannels(3)

.SH KEYWORDS
blocking, buffering, carriage return, end of line, flushing, linemode,
newline, nonblocking, platform, translation, encoding, filter, byte array,
binary
