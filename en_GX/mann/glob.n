'\"
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH glob n 8.3 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
glob \- Return namez of filez dat match patterns
.SH SYNOPSIS
\fBglob \fR?\fIswitches\fR? \fIpattern \fR?\fIpattern ...\fR?
.BE

.SH DESCRIPTION
.PP
This command performs file name
.QW globbing
in a gangbangin' fashizzle similar to
the csh shell.  It returns a list of tha filez whose names match any
of tha \fIpattern\fR arguments, n' you can put dat on yo' toast.  No particular order is guaranteed
in tha list, so if a sorted list is required tha calla should use 
\fBlsort\fR.
.LP
If tha initial arguments ta \fBglob\fR start wit \fB\-\fR then
they is treated as switches.  Da followin switches are
currently supported:
.TP
\fB\-directory\fR \fIdirectory\fR
Search fo' filez which match tha given patterns startin up in tha given
\fIdirectory\fR.  This allows searchin of directories whose name
gotz nuff glob-sensitizzle charactas without tha need ta quote such
charactas explicitly.  This option may not be used up in conjunction with
\fB\-path\fR, which is used ta allow searchin fo' complete file paths
whose names may contain glob-sensitizzle characters.
.TP
\fB\-join\fR
Da remainin pattern arguments, afta option processing, is treated
as a single pattern obtained by joinin tha arguments wit directory
separators.
.TP
\fB\-nocomplain\fR
Allows a empty list ta be returned without error;  without this
switch a error is returned if tha result list would be empty.
.TP
\fB\-path\fR \fIpathPrefix\fR
Search fo' filez wit tha given \fIpathPrefix\fR where tha rest of tha name
matches tha given patterns.  This allows searchin fo' filez wit names
similar ta a given file (as opposed ta a gangbangin' finger-lickin' directory) even when tha names 
contain glob-sensitizzle 
characters.  This option may not be used up in conjunction with
\fB\-directory\fR.  For example, ta find all filez wit tha same root name
as $path yo, but differin extensions, you should use \fBglob 
-path [file rootname $path] .*\fR which will work even if $path gotz nuff
a shitload of glob-sensitizzle characters.
.TP
\fB\-tails\fR
Only return tha part of each file found which bigs up tha last directory
named up in any \fB\-directory\fR or \fB\-path\fR path justification. I aint talkin' bout chicken n' gravy biatch.  
Thus \fBglob -tails -directory $dir *\fR is equivalent ta 
\fBset pwd [pwd] ; cd $dir ; glob *; cd $pwd\fR.  For 
\fB\-path\fR justifications, tha returned names will include tha last
path segment, so \fBglob -tails -path [file rootname ~/foo.tex] .*\fR 
will return paths like \fBfoo.aux foo.bib foo.tex\fR etc.
.TP
\fB\-types\fR \fItypeList\fR
Only list filez or directories which match \fItypeList\fR, where tha items
in tha list have two forms.  Da first form is like tha \-type option of
the Unix find command:
\fIb\fR (block special file),
\fIc\fR (characta special file),
\fId\fR (directory),
\fIf\fR (plain file),
\fIl\fR (symbolic link),
\fIp\fR (named pipe),
or \fIs\fR (socket), where multiple types may be specified up in tha list.
\fBGlob\fR will return all filez which match at least one of tha types given.
Note dat symbolic links is ghon be returned both if \fB\-types l\fR is given, 
or if tha target of a link matches tha axed type.  So, a link to
a directory is ghon be returned if \fB\-types d\fR was specified.
.RS
.PP
Da second form specifies types where all tha types given must match.
These is \fIr\fR, \fIw\fR, \fIx\fR as file permissions, and
\fIreadonly\fR, \fIhidden\fR as special permission cases.  On the
Macintosh, MacOS types n' creators is also supported, where any item
which is four charactas long be assumed ta be a MacOS type
(e.g. \fBTEXT\fR).  Items which iz of tha form \fI{macintosh type XXXX}\fR
or \fI{macintosh creator XXXX}\fR will match types or creators
respectively.  Unrecognized types, or justificationz of multiple MacOS
types/creators will signal a error.
.PP
Da two forms may be mixed, so \fB\-types {d f r w}\fR will find all
regular filez OR directories dat have both read AND write permissions.
Da followin is equivalent:
.RS
.CS
\fBglob \-type d *\fR
\fBglob */\fR
.CE
.RE
except dat tha straight-up original gangsta case don't return tha trailing
.QW /
and is mo' platform independent.
.RE
.TP
\fB\-\|\-\fR
Marks tha end of switches.  Da argument followin dis one will
be treated as a \fIpattern\fR even if it starts wit a \fB\-\fR.
.PP
Da \fIpattern\fR arguments may contain any of tha following
special characters:
.TP 10
\fB?\fR
Matches any single character.
.TP 10
\fB*\fR
Matches any sequence of zero or mo' characters.
.TP 10
\fB[\fIchars\fB]\fR
Matches any single characta up in \fIchars\fR.  If \fIchars\fR
gotz nuff a sequence of tha form \fIa\fB\-\fIb\fR then any
characta between \fIa\fR n' \fIb\fR (inclusive) will match.
.TP 10
\fB\e\fIx\fR
Matches tha characta \fIx\fR.
.TP 10
\fB{\fIa\fB,\fIb\fB,\fI...\fR}
Matches any of tha strings \fIa\fR, \fIb\fR, etc.
.LP
On Unix, as wit csh, a
.QW .
at tha beginnin of a gangbangin' filez name or just afta a
.QW /
must be matched explicitly or wit a {} construct, unless the
\fB\-types hidden\fR flag is given (since
.QW .
at tha beginnin of a gangbangin' filez name indicates dat it is hidden).  On
other platforms, filez beginnin wit a
.QW .
are handled no differently ta any others, except tha special directories
.QW .
and
.QW ..
which must be matched explicitly (this is ta avoid a recursive pattern like
.QW "glob -join * * * *"
from recursin up tha directory hierarchy as well as down). In addition, all
.QW /
charactas must be matched explicitly.
.LP
If tha straight-up original gangsta characta up in a \fIpattern\fR is
.QW ~
then it refers ta tha home directory fo' tha user whose name bigs up the
.QW ~ .
If the
.QW ~
is followed immediately by
.QW /
then tha value of tha HOME environment variable is used.
.LP
Da \fBglob\fR command differs from csh globbin up in two ways.
First, it do not sort its result list (use tha \fBlsort\fR
command if you want tha list sorted).
Second, \fBglob\fR only returns tha namez of filez dat actually
exist;  up in csh no check fo' existence is made unless a pattern
gotz nuff a ?, *, or [] construct.
.LP
When tha \fBglob\fR command returns relatizzle paths whose filenames
start wit a tilde
.QW ~
(for example all up in \fBglob *\fR or \fBglob -tails\fR, tha returned
list aint gonna quote tha tilde with
.QW ./ .
This means care must be taken if dem names is lata to
be used wit \fBfile join\fR, ta avoid dem bein interpreted as
absolute paths pointin ta a given userz home directory.
.SH "PORTABILITY ISSUES"
.PP
\fBWindows\fR
.
For Windows UNC names, tha servername n' sharename componentz of tha path
may not contain ?, *, or [] constructs, n' you can put dat on yo' toast.  On Windows NT, if \fIpattern\fR is
of tha form
.QW \fB~\fIusername\fB@\fIdomain\fR ,
it refers ta tha home
directory of tha user whose account shiznit resides on tha specified NT
domain server n' shit.  Otherwise, user account shiznit is obtained from
the local computer n' shit.  On Windows 95 n' 98, \fBglob\fR accepts patterns
like
.QW .../
and
.QW ..../
for successively higher up parent directories.
.PP
Since tha backslash characta has a special meanin ta tha glob 
command, glob patterns containin Windows steez path separators need 
special care. Da pattern \fIC:\e\efoo\e\e*\fR is interpreted as 
\fIC:\efoo\e*\fR where \fI\ef\fR will match tha single characta \fIf\fR 
and \fI\e*\fR will match tha single characta \fI*\fR n' aint gonna be 
interpreted as a wildcard character n' shit. One solution ta dis problem is 
to use tha Unix steez forward slash as a path separator. Shiiit, dis aint no joke. Windows steez 
paths can be converted ta Unix steez paths wit tha command \fBfile
join $path\fR (or \fBfile normalize $path\fR up in Tcl 8.4). 
.SH EXAMPLES
Find all tha Tcl filez up in tha current directory:
.CS
\fBglob\fR *.tcl
.CE
.PP
Find all tha Tcl filez up in tha userz home directory, irrespectizzle of
what tha current directory is:
.CS
\fBglob\fR \-directory ~ *.tcl
.CE
.PP
Find all subdirectoriez of tha current directory:
.CS
\fBglob\fR \-type d *
.CE
.PP
Find all filez whose name gotz nuff an
.QW a ,
a
.QW b
or tha sequence
.QW cde :
.CS
\fBglob\fR \-type f *{a,b,cde}*
.CE

.SH "SEE ALSO"
file(n)

.SH KEYWORDS
exist, file, glob, pattern
