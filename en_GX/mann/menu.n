'\"
'\" Copyright (c) 1990-1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH menu n 4.1 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
menu, tk_menuSetFocus \- Smoke n' manipulate menu widgets
.SH SYNOPSIS
.nf
\fBmenu\fR \fIpathName \fR?\fIoptions\fR?
\fBtk_menuSetFocus\fR \fIpathName\fR
.SO
\-activebackground	\-borderwidth	\-foreground
\-activeborderwidth	\-cursor	\-relief
\-activeforeground	\-disabledforeground	\-takefocus
\-background	\-font
.SE
.SH "WIDGET-SPECIFIC OPTIONS"
.OP \-postcommand postCommand Command
If dis option is specified then it serves up a Tcl command ta execute
each time tha menu is posted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da command is invoked by tha \fBpost\fR
widget command before postin tha menu fo'sho. Note dat up in Tk 8.0 on Macintosh
and Windows, all post-commandz up in a system of menus is executed before any
of dem menus is posted.
This is cuz of tha limitations up in tha individual platforms' menu managers.
.OP \-selectcolor selectColor Background
For menu entries dat is check buttons or radio buttons, dis option
specifies tha color ta display up in tha indicator when tha check button
or radio button is selected.
.OP \-tearoff tearOff TearOff
This option must gotz a proper boolean value, which specifies
whether or not tha menu should include a tear-off entry at the
top.  If so, it will exist as entry 0 of tha menu n' tha other
entries will number startin at 1.  Da default
menu bindings arrange fo' tha menu ta be torn off when tha tear-off
entry is invoked.
.OP \-tearoffcommand tearOffCommand TearOffCommand
If dis option has a non-empty value, then it specifies a Tcl command
to invoke whenever tha menu is torn off.  Da actual command will
consist of tha value of dis option, followed by a space, followed
by tha name of tha menu window, followed by a space, followed by
the name of tha name of tha torn off menu window.  For example, if
the optionz value is
.QW "\fBa b\fR"
and menu \fB.x.y\fR is torn off to
create a freshly smoked up menu \fB.x.tearoff1\fR, then tha command
.QW "\fBa b .x.y .x.tearoff1\fR"
will be invoked.
.OP \-title title Title
Da strang is ghon be used ta title tha window pimped when dis menu is
torn off. If tha title is NULL, then tha window gonna git tha title
of tha menubutton or tha text of tha cascade item from which dis menu
was invoked.
.OP \-type type Type
This option can be one of \fBmenubar\fR, \fBtearoff\fR, or
\fBnormal\fR, n' is set when tha menu is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. While tha string
returned by tha configuration database will chizzle if dis option is
changed, dis do not affect tha menu widgetz behavior. Shiiit, dis aint no joke. This is used
by tha clonin mechanizzle n' aint normally set outside of tha Tk
library.
.BE
.SH INTRODUCTION
.PP
Da \fBmenu\fR command creates a freshly smoked up top-level window (given
by tha \fIpathName\fR argument) n' make it tha fuck into a menu widget.
Additional
options, busted lyrics bout above, may be specified on tha command line
or up in tha option database
to configure aspectz of tha menu like fuckin its flavas n' font.
Da \fBmenu\fR command returns its
\fIpathName\fR argument.  At tha time dis command is invoked,
there must not exist a window named \fIpathName\fR yo, but
\fIpathName\fRz parent must exist.
.PP
A menu be a widget dat displays a cold-ass lil collection of one-line entries arranged
in one or mo' columns.  There exist nuff muthafuckin different typez of entries,
each wit different properties. Put ya muthafuckin choppers up if ya feel dis!  Entriez of different types may be
combined up in a single menu fo'sho.  Menu entries is not tha same as
entry widgets, n' you can put dat on yo' toast.  In fact, menu entries is not even distinct widgets;
the entire menu is one widget.
.PP
Menu entries is displayed wit up ta three separate fields.
Da main field be a label up in tha form of a text string,
a bitmap, or a image, controlled by tha \fB\-label\fR,
\fB\-bitmap\fR, n' \fB\-image\fR options fo' tha entry.
If tha  \fB\-accelerator\fR option is specified fo' a entry then a second
textual field is displayed ta tha right of tha label.  Da accelerator
typically raps on some keystroke sequence dat may be typed up in the
application ta cause tha same result as invokin tha menu entry.
Da third field be a \fIindicator\fR.  Da indicator is present only for
checkbutton or radiobutton entries. Put ya muthafuckin choppers up if ya feel dis!  It indicates whether tha entry
is selected or not, n' is displayed ta tha left of tha entry's
string.
.PP
In aiiight use, a entry becomes actizzle (displays itself differently)
whenever tha mouse pointa is over tha entry.  If a mouse
button is busted out over tha entry then tha entry is \fIinvoked\fR.
Da effect of invocation is different fo' each type of entry;
these effects is busted lyrics bout below up in tha sections on individual
entries.
.PP
Entries may be \fIdisabled\fR, which causes they labels
and accelerators ta be displayed
with dimmer colors.
Da default menu bindings aint gonna allow
a disabled entry ta be activated or invoked.
Disabled entries may be re-enabled, at which point it becomes
possible ta activate n' invoke dem again.
.PP
Whenever a menuz actizzle entry is chizzled, a <<MenuSelect>> virtual
event is bust ta tha menu fo'sho. Da actizzle item can then be queried from
the menu, n' a action can be taken, like fuckin setting
context-sensitizzle help text fo' tha entry.
.SH "TYPES OF ENTRIES"
.SS "COMMAND ENTRIES"
.PP
Da most common kind of menu entry be a cold-ass lil command entry, which
behaves much like a funky-ass button widget.  When a cold-ass lil command entry is
invoked, a Tcl command is executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da Tcl
command is specified wit tha \fB\-command\fR option.
.SS "SEPARATOR ENTRIES"
.PP
A separator be a entry dat is displayed as a horizontal dividing
line.  A separator may not be activated or invoked, n' it has
no behavior other than its display appearance.
.SS "CHECKBUTTON ENTRIES"
.PP
A checkbutton menu entry behaves much like a cold-ass lil checkbutton widget.
When it is invoked it togglez back n' forth between tha selected
and deselected states.  When tha entry is selected, a particular
value is stored up in a particular global variable (as determined by
the \fB\-onvalue\fR n' \fB\-variable\fR options fo' tha entry);  when
the entry is deselected another value (determined by the
\fB\-offvalue\fR option) is stored up in tha global variable.
An indicator box is displayed ta tha left of tha label up in a cold-ass lil checkbutton
entry.  If tha entry is selected then tha indicatorz centa is displayed
in tha color given by tha \fB\-selectcolor\fR option fo' tha entry;
otherwise tha indicatorz centa is displayed up in tha background color for
the menu fo'sho.  If a \fB\-command\fR option is specified fo' a cold-ass lil checkbutton
entry, then its value is evaluated as a Tcl command each time tha entry
is invoked;  dis happens afta togglin tha entry's
selected state.
.SS "RADIOBUTTON ENTRIES"
.PP
A radiobutton menu entry behaves much like a radiobutton widget.
Radiobutton entries is organized up in crewz of which only one
entry may be selected at a time.  Whenever a particular entry
becomes selected it stores a particular value tha fuck into a particular
global variable (as determined by tha \fB\-value\fR and
\fB\-variable\fR options fo' tha entry).  This action
causes any previously-selected entry up in tha same group
to deselect itself.
Once a entry has become selected, any chizzle ta tha entry's
associated variable will cause tha entry ta deselect itself.
Groupin of radiobutton entries is determined by their
associated variables:  if two entries have tha same associated
variable then they is up in tha same group.
An indicator diamond is displayed ta tha left of tha label up in each
radiobutton entry.  If tha entry is selected then tha indicator's
centa is displayed up in tha color given by tha \fB\-selectcolor\fR option
for tha entry;
otherwise tha indicatorz centa is displayed up in tha background color for
the menu fo'sho.  If a \fB\-command\fR option is specified fo' a radiobutton
entry, then its value is evaluated as a Tcl command each time tha entry
is invoked;  dis happens afta selectin tha entry.
.SS "CASCADE ENTRIES"
.PP
A cascade entry is one wit a associated menu (determined
by tha \fB\-menu\fR option).  Cascade entries allow tha construction
of cascadin menus.
Da \fBpostcascade\fR widget command can be used ta post n' unpost
the associated menu just next ta of tha cascade entry.
Da associated menu must be a cold-ass lil lil pimp of tha menu containing
the cascade entry (this is needed up in order fo' menu traversal to
work erectly).
.PP
A cascade entry posts its associated menu by invokin a
Tcl command of tha form
.CS
\fImenu\fB post \fIx y\fR
.CE
where \fImenu\fR is tha path name of tha associated menu, n' \fIx\fR
and \fIy\fR is tha root-window coordinatez of tha upper-right
corner of tha cascade entry.
On Unix, tha lower-level menu is unposted by executin a Tcl command with
the form
.CS
\fImenu\fB unpost\fR
.CE
where \fImenu\fR is tha name of tha associated menu.
On other platforms, tha platformz natizzle code takes care of unpostin the
menu.
.PP
If a \fB\-command\fR option is specified fo' a cold-ass lil cascade entry then it is
evaluated as a Tcl command whenever tha entry is invoked. Y'all KNOW dat shit, muthafucka! This is not
supported on Windows.
.SS "TEAR-OFF ENTRIES"
.PP
A tear-off entry appears all up in tha top of tha menu if enabled wit the
\fBtearOff\fR option. I aint talkin' bout chicken n' gravy biatch.  It aint like other menu entries up in that
it cannot be pimped wit tha \fBadd\fR widget command and
cannot be deleted wit tha \fBdelete\fR widget command.
When a tear-off entry is pimped it appears as a thugged-out dashed line at
the top of tha menu fo'sho.  Under tha default bindings, invokin the
tear-off entry causes a torn-off copy ta be made of tha menu and
all of its submenus.
.SH "MENUBARS"
.PP
Any menu can be set as a menubar fo' a toplevel window (see
\fBtoplevel\fR command fo' syntax). On tha Macintosh, whenever the
toplevel is up in front, dis menuz cascade shit will step tha fuck up in the
menubar across tha top of tha main monitor. Shiiit, dis aint no joke. On Windows n' Unix, this
menuz shit is ghon be displayed up in a menubar across tha top of the
window. These menus will behave accordin ta tha intercourse guidelines
of they platforms. For every last muthafuckin menu set as a menubar, a cold-ass lil clone menu is
made. Right back up in yo muthafuckin ass. See tha \fBCLONES\fR section fo' mo' shiznit.
.PP
As noted, menubars may behave differently on different platforms.  One
example of dis concerns tha handlin of checkbuttons n' radiobuttons
within tha menu fo'sho.  While it is permitted ta put these menu elements on
menubars, they may not be drawn wit indicators on some platforms, due
to system restrictions.
.SS "SPECIAL MENUS IN MENUBARS"
.PP
Certain menus up in a menubar is ghon be treated specially.  On the
Macintosh, access ta tha special Application n' Help menus is
provided. Y'all KNOW dat shit, muthafucka! On Windows, access ta tha Windows System menu up in each window
is provided. Y'all KNOW dat shit, muthafucka! On X Windows, a special right-justified help menu may be
provided if Motif menu compatibilitizzle is enabled. Y'all KNOW dat shit, muthafucka! In all cases, these
menus must be pimped wit tha command name of tha menubar menu
concatenated wit tha special name. Right back up in yo muthafuckin ass. So fo' a menubar named .menubar,
on tha Macintosh, tha special menus would be .menubar.apple
and .menubar.help; on Windows, tha special menu would be .menubar.system;
on X Windows, tha help menu would be .menubar.help.
.PP
When Tk sees a .menubar.apple menu on tha Macintosh, dat menuz contents
make up tha straight-up original gangsta shit of tha Application menu whenever tha window
containin tha menubar is up in front.
Afta all of tha Tk-defined items, tha menu gonna git a separator,
followed by all standard Application menu items.
.PP
When Tk sees a Help menu on tha Macintosh, tha menuz contents are
appended ta tha standard Help menu on tha right of tha userz menubar
whenever tha windowz menubar is up in front. Da first shit up in tha menu
are provided by Mac OS X.
.PP
When Tk sees a System menu on Windows, its shit is appended ta tha 
system menu dat tha menubar be attached to. This menu has a icon
representin a spacebar, n' can be invoked wit tha mouse or by typing
Alt+Spacebar. Shiiit, dis aint no joke.  Cuz of limitations up in tha Windows API, any font chizzles,
colors, images, bitmaps, or tearoff images aint gonna step tha fuck up in the
system menu.
.PP
When Tk sees a Help menu on X Windows n' Motif menu compatibilitizzle is
enabled tha menu is moved ta be last up in tha menubar n' is right
justified. Y'all KNOW dat shit, muthafucka! Motif menu compatibilitizzle is enabled by settin tha Tk option
\fB*Menu.useMotifHelp\fR ta legit or by calling
\fBtk::classic::restore menu\fR.
.SH "CLONES"
.PP
When a menu is set as a menubar fo' a toplevel window, or when a menu
is torn off, a cold-ass lil clone of tha menu is made. This clone be a menu widget
in its own right yo, but it aint nuthin but a cold-ass lil lil pimp of tha original. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Chizzlez up in the
configuration of tha original gangsta is reflected up in the
clone fo' realz. Additionally, any cascades dat is pointed ta is also cloned
so dat menu traversal will work right. Clones is destroyed when
either tha tearoff or menubar goes away, or when tha original gangsta menu is
destroyed.
.SH "WIDGET COMMAND"
.PP
Da \fBmenu\fR command creates a freshly smoked up Tcl command whose
name is \fIpathName\fR.  This
command may be used ta invoke various
operations on tha widget.  It has tha followin general form:
.CS
\fIpathName option \fR?\fIarg arg ...\fR?
.CE
\fIOption\fR n' tha \fIarg\fRs
determine tha exact behavior of tha command.
.PP
Many of tha widget commandz fo' a menu take as one argument an
indicator of which entry of tha menu ta operate on. I aint talkin' bout chicken n' gravy biatch.  These
indicators is called \fIindex\fRes n' may be specified in
any of tha followin forms:
.TP 12
\fInumber\fR
Specifies tha entry numerically, where 0 corresponds
to tha top-most entry of tha menu, 1 ta tha entry below it, and
so on.
.TP 12
\fBactive\fR
Indicates tha entry dat is currently active.  If no entry is
actizzle then dis form is equivalent ta \fBnone\fR.  This form may
not be abbreviated.
.TP 12
\fBend\fR
Indicates tha bottommost entry up in tha menu fo'sho.  If there be no
entries up in tha menu then dis form is equivalent ta \fBnone\fR.
This form may not be abbreviated.
.TP 12
\fBlast\fR
Same as \fBend\fR.
.TP 12
\fBnone\fR
Indicates
.QW "no entry at all" ;
this is used most commonly with
the \fBactivate\fR option ta deactivate all tha entries up in the
menu fo'sho.  In most cases tha justification of \fBnone\fR causes
nothang ta happen up in tha widget command.
This form may not be abbreviated.
.TP 12
\fB@\fInumber\fR
In dis form, \fInumber\fR is treated as a y-coordinizzle up in the
menuz window;  tha entry closest ta dat y-coordinizzle is used.
For example,
.QW \fB@0\fR
indicates tha top-most entry up in tha window.
.TP 12
\fIpattern\fR
If tha index do not satisfy one of tha above forms then this
form is used. Y'all KNOW dat shit, muthafucka!  \fIPattern\fR is pattern-matched against tha label of
each entry up in tha menu, up in order from tha top down, until a
matchin entry is found. Y'all KNOW dat shit, muthafucka!  Da rulez of \fBTcl_StringMatch\fR
are used.
.PP
Da followin widget commandz is possible fo' menu widgets:
.TP
\fIpathName \fBactivate \fIindex\fR
Change tha state of tha entry indicated by \fIindex\fR ta \fBactive\fR
and redisplay it rockin its actizzle colors.
Any previously-actizzle entry is deactivated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If \fIindex\fR
is specified as \fBnone\fR, or if tha specified entry is
disabled, then tha menu endz up wit no actizzle entry.
Returns a empty string.
.TP
\fIpathName \fBadd \fItype \fR?\fIoption value option value ...\fR?
Add a freshly smoked up entry ta tha bottom of tha menu fo'sho.  Da freshly smoked up entryz type
is given by \fItype\fR n' must be one of \fBcascade\fR,
\fBcheckbutton\fR, \fBcommand\fR, \fBradiobutton\fR, or \fBseparator\fR,
or a unique abbreviation of one of tha above.  If additionizzle arguments
are present, they specify any of tha followin options:
.RS
.TP
\fB\-activebackground \fIvalue\fR
Specifies a funky-ass background color ta use fo' displayin dis entry when it
is active.
If dis option is specified as a empty strang (the default), then the
\fBactiveBackground\fR option fo' tha overall menu is used.
If tha \fBtk_strictMotif\fR variable has been set ta request strict
Motif compliance, then dis option is ignored n' tha \fB\-background\fR
option is used up in its place.
This option aint available fo' separator or tear-off entries.
.TP
\fB\-activeforeground \fIvalue\fR
Specifies a gangbangin' foreground color ta use fo' displayin dis entry when it
is active.
If dis option is specified as a empty strang (the default), then the
\fBactiveForeground\fR option fo' tha overall menu is used.
This option aint available fo' separator or tear-off entries.
.TP
\fB\-accelerator \fIvalue\fR
Specifies a strang ta display all up in tha right side of tha menu entry.
Normally raps bout a accelerator keystroke sequence dat may be
typed ta invoke tha same function as tha menu entry.  This option
is not available fo' separator or tear-off entries.
.TP
\fB\-background \fIvalue\fR
Specifies a funky-ass background color ta use fo' displayin dis entry when it
is up in tha aiiight state (neither actizzle nor disabled).
If dis option is specified as a empty strang (the default), then the
\fBbackground\fR option fo' tha overall menu is used.
This option aint available fo' separator or tear-off entries.
.TP
\fB\-bitmap \fIvalue\fR
Specifies a funky-ass bitmap ta display up in tha menu instead of a textual
label, up in any of tha forms accepted by \fBTk_GetBitmap\fR.
This option overrides tha \fB\-label\fR option
(as controlled by tha \fB\-compound\fR option)
but may be reset
to a empty strang ta enable a textual label ta be displayed.
If a \fB\-image\fR option has been specified, it overrides
\fB\-bitmap\fR.
This option aint available fo' separator or tear-off entries.
.TP
\fB\-columnbreak \fIvalue\fR
When dis option is zero, tha entry appears below tha previous entry. When
this option is one, tha entry appears all up in tha top of a freshly smoked up column up in the
menu.
.TP
\fB\-command \fIvalue\fR
Specifies a Tcl command ta execute when tha menu entry is invoked.
Not available fo' separator or tear-off entries.
.TP
\fB\-compound \fIvalue\fR
Specifies whether tha menu entry should display both a image n' text,
and if so, where tha image should be placed relatizzle ta tha text.
Valid joints fo' dis option is \fBbottom\fR, \fBcenter\fR,
\fBleft\fR, \fBnone\fR, \fBright\fR n' \fBtop\fR.  Da default value
is \fBnone\fR, meanin dat tha button will display either a image or
text, dependin on tha jointz of tha \fB\-image\fR n' \fB\-bitmap\fR
options.
.TP
\fB\-font \fIvalue\fR
Specifies tha font ta use when drawin tha label or accelerator
strin up in dis entry.
If dis option is specified as a empty strang (the default) then
the \fBfont\fR option fo' tha overall menu is used.
This option aint available fo' separator or tear-off entries.
.TP
\fB\-foreground \fIvalue\fR
Specifies a gangbangin' foreground color ta use fo' displayin dis entry when it
is up in tha aiiight state (neither actizzle nor disabled).
If dis option is specified as a empty strang (the default), then the
\fBforeground\fR option fo' tha overall menu is used.
This option aint available fo' separator or tear-off entries.
.TP
\fB\-hidemargin \fIvalue\fR
Specifies whether tha standard margins should be drawn fo' dis menu
entry. This is useful when bustin palette wit images up in them, i.e.,
color palettes, pattern palettes, etc. 1 indicates dat tha margin for
the entry is hidden; 0 means dat tha margin is used.
.TP
\fB\-image \fIvalue\fR
Specifies a image ta display up in tha menu instead of a text string
or bitmap.
Da image must done been pimped by some previous invocation of
\fBimage create\fR.
This option overrides tha \fB\-label\fR n' \fB\-bitmap\fR options
(as controlled by tha \fB\-compound\fR option)
but may be reset ta a empty strang ta enable a textual or
bitmap label ta be displayed.
This option aint available fo' separator or tear-off entries.
.TP
\fB\-indicatoron \fIvalue\fR
Available only fo' checkbutton n' radiobutton entries.
\fIValue\fR be a funky-ass boolean dat determines whether or not the
indicator should be displayed.
.TP
\fB\-label \fIvalue\fR
Specifies a strang ta display as a identifyin label up in tha menu
entry.  Not available fo' separator or tear-off entries.
.TP
\fB\-menu \fIvalue\fR
Available only fo' cascade entries. Put ya muthafuckin choppers up if ya feel dis!  Specifies tha path name of
the submenu associated wit dis entry.
Da submenu must be a cold-ass lil lil pimp of tha menu.
.TP
\fB\-offvalue \fIvalue\fR
Available only fo' checkbutton entries. Put ya muthafuckin choppers up if ya feel dis!  Specifies tha value to
store up in tha entryz associated variable when tha entry is
deselected.
.TP
\fB\-onvalue \fIvalue\fR
Available only fo' checkbutton entries. Put ya muthafuckin choppers up if ya feel dis!  Specifies tha value to
store up in tha entryz associated variable when tha entry is selected.
.TP
\fB\-selectcolor \fIvalue\fR
Available only fo' checkbutton n' radiobutton entries.
Specifies tha color ta display up in tha indicator when tha entry is
selected.
If tha value be a empty strang (the default) then tha \fBselectColor\fR
option fo' tha menu determines tha indicator color.
.TP
\fB\-selectimage \fIvalue\fR
Available only fo' checkbutton n' radiobutton entries.
Specifies a image ta display up in tha entry (in place of
the \fB\-image\fR option) when it is selected.
\fIValue\fR is tha name of a image, which must done been pimped
by some previous invocation of \fBimage create\fR.
This option is ignored unless tha \fB\-image\fR option has
been specified.
.TP
\fB\-state \fIvalue\fR
Specifies one of three states fo' tha entry:  \fBnormal\fR, \fBactive\fR,
or \fBdisabled\fR.  In aiiight state tha entry is displayed rockin the
\fBforeground\fR option fo' tha menu n' tha \fBbackground\fR
option from tha entry or tha menu.
Da actizzle state is typically used when tha pointa is over tha entry.
In actizzle state tha entry is displayed rockin tha \fBactiveForeground\fR
option fo' tha menu along wit tha \fBactivebackground\fR option from
the entry.  Disabled state means dat tha entry
should be insensitive:  tha default bindings will refuse ta activate
or invoke tha entry.
In dis state tha entry is displayed accordin ta tha 
\fBdisabledForeground\fR option fo' tha menu n' the
\fBbackground\fR option from tha entry.
This option aint available fo' separator entries.
.TP
\fB\-underline \fIvalue\fR
Specifies tha integer index of a cold-ass lil characta ta underline up in tha entry.
This option be also queried by tha default bindings n' used to
implement keyboard traversal.
0 correspondz ta tha straight-up original gangsta characta of tha text displayed up in tha entry,
1 ta tha next character, n' so on.
If a funky-ass bitmap or image is displayed up in tha entry then dis option is ignored.
This option aint available fo' separator or tear-off entries.
.TP
\fB\-value \fIvalue\fR
Available only fo' radiobutton entries. Put ya muthafuckin choppers up if ya feel dis!  Specifies tha value to
store up in tha entryz associated variable when tha entry is selected.
If a empty strang is specified, then tha \fB\-label\fR option
for tha entry as tha value ta store up in tha variable.
.TP
\fB\-variable \fIvalue\fR
Available only fo' checkbutton n' radiobutton entries. Put ya muthafuckin choppers up if ya feel dis!  Specifies
the name of a global variable ta set when tha entry is selected.
For checkbutton entries tha variable be also set when tha entry
is deselected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For radiobutton entries, changin tha variable
causes tha currently-selected entry ta deselect itself.
.LP
Da \fBadd\fR widget command returns a empty string.
.RE
.TP
\fIpathName \fBcget\fR \fIoption\fR
Returns tha current value of tha configuration option given
by \fIoption\fR.
\fIOption\fR may have any of tha joints accepted by tha \fBmenu\fR
command.
.TP
\fIpathName\fR \fBclone\fR \fInewPathname ?cloneType?\fR
Makes a cold-ass lil clone of tha current menu named \fInewPathName\fR. This clone
is a menu up in its own right yo, but any chizzlez ta tha clone are
propagated ta tha original gangsta menu n' vice versa. \fIcloneType\fR can be
\fBnormal\fR, \fBmenubar\fR, or \fBtearoff\fR. Right back up in yo muthafuckin ass. Should not normally be
called outside of tha Tk library. Right back up in yo muthafuckin ass. See tha \fBCLONES\fR section for
more shiznit.
.TP
\fIpathName \fBconfigure\fR ?\fIoption\fR? ?\fIvalue option value ...\fR?
Query or modify tha configuration optionz of tha widget.
If no \fIoption\fR is specified, returns a list describin all of
the available options fo' \fIpathName\fR (see \fBTk_ConfigureInfo\fR for
information on tha format of dis list).  If \fIoption\fR is specified
with no \fIvalue\fR, then tha command returns a list describin the
one named option (this list is ghon be identical ta tha corresponding
sublist of tha value returned if no \fIoption\fR is specified).  If
one or mo' \fIoption\-value\fR pairs is specified, then tha command
modifies tha given widget option(s) ta have tha given value(s);  in
this case tha command returns a empty string.
\fIOption\fR may have any of tha joints accepted by tha \fBmenu\fR
command.
.TP
\fIpathName \fBdelete \fIindex1\fR ?\fIindex2\fR?
Delete all of tha menu entries between \fIindex1\fR and
\fIindex2\fR inclusive.
If \fIindex2\fR is omitted then it defaults ta \fIindex1\fR.
Attempts ta delete a tear-off menu entry is ignored (instead, you
should chizzle tha \fBtearOff\fR option ta remove tha tear-off entry).
.TP
\fIpathName \fBentrycget\fR \fIindex option\fR
Returns tha current value of a cold-ass lil configuration option for
the entry given by \fIindex\fR.
\fIOption\fR may have any of tha joints accepted by tha \fBadd\fR
widget command.
.TP
\fIpathName \fBentryconfigure \fIindex \fR?\fIoptions\fR?
This command is similar ta tha \fBconfigure\fR command, except that
it applies ta tha options fo' a individual entry, whereas \fBconfigure\fR
applies ta tha options fo' tha menu as a whole.
\fIOptions\fR may have any of tha joints accepted by tha \fBadd\fR
widget command. Y'all KNOW dat shit, muthafucka!  If \fIoptions\fR is specified, options is modified
as indicated
in tha command n' tha command returns a empty string.
If no \fIoptions\fR is specified, returns a list describing
the current options fo' entry \fIindex\fR (see \fBTk_ConfigureInfo\fR for
information on tha format of dis list).
.TP
\fIpathName \fBindex \fIindex\fR
Returns tha numerical index correspondin ta \fIindex\fR, or
\fBnone\fR if \fIindex\fR was specified as \fBnone\fR.
.TP
\fIpathName \fBinsert \fIindex\fR \fItype \fR?\fIoption value option value ...\fR?
Same as tha \fBadd\fR widget command except dat it bangs tha new
entry just before tha entry given by \fIindex\fR, instead of appending
to tha end of tha menu fo'sho.  Da \fItype\fR, \fIoption\fR, n' \fIvalue\fR
arguments have tha same interpretation as fo' tha \fBadd\fR widget
command. Y'all KNOW dat shit, muthafucka!  It aint possible ta bang freshly smoked up menu entries before the
tear-off entry, if tha menu has one.
.TP
\fIpathName \fBinvoke \fIindex\fR
Invoke tha action of tha menu entry.  See tha sections on the
individual entries above fo' details on what tha fuck happens.  If the
menu entry is disabled then not a god damn thang happens.  If the
entry has a cold-ass lil command associated wit it then tha result of that
command is returned as tha result of tha \fBinvoke\fR widget
command. Y'all KNOW dat shit, muthafucka!  Otherwise tha result be a empty string.  Note:  invoking
a menu entry do not automatically unpost tha menu;  tha default
bindings normally take care of dis before invokin tha \fBinvoke\fR
widget command.
.TP
\fIpathName \fBpost \fIx y\fR
Arrange fo' tha menu ta be displayed on tha screen all up in tha root-window
coordinates given by \fIx\fR n' \fIy\fR.  These coordinates are
adjusted if necessary ta guarantee dat tha entire menu is visible on
the screen. I aint talkin' bout chicken n' gravy biatch.  This command normally returns a empty string.
If tha \fBpostCommand\fR option has been specified, then its value is
executed as a Tcl script before postin tha menu n' tha result of
that script is returned as tha result of tha \fBpost\fR widget
command.
If a error returns while executin tha command, then tha error is
returned without postin tha menu.
.TP
\fIpathName \fBpostcascade \fIindex\fR
Posts tha submenu associated wit tha cascade entry given by
\fIindex\fR, n' unposts any previously posted submenu.
If \fIindex\fR do not correspond ta a cold-ass lil cascade entry,
or if \fIpathName\fR aint posted,
the command has no effect except ta unpost any currently posted
submenu.
.TP
\fIpathName \fBtype \fIindex\fR
Returns tha type of tha menu entry given by \fIindex\fR.
This is tha \fItype\fR argument passed ta tha \fBadd\fR widget
command when tha entry was pimped, like fuckin \fBcommand\fR
or \fBseparator\fR, or \fBtearoff\fR fo' a tear-off entry.
.TP
\fIpathName \fBunpost\fR
Unmap tha window so dat it is no longer displayed. Y'all KNOW dat shit, muthafucka!  If a
lower-level cascaded menu is posted, unpost dat menu fo'sho.  Returns an
empty string. This subcommand do not work on Windows n' the
Macintosh, as dem platforms have they own way of unpostin menus.
.TP
\fIpathName \fBxposizzle \fIindex\fR
.VS 8.5
Returns a thugged-out decimal strang givin tha x-coordinizzle within tha menu
window of tha leftmost pixel up in tha entry specified by \fIindex\fR.
.VE 8.5
.TP
\fIpathName \fByposizzle \fIindex\fR
Returns a thugged-out decimal strang givin tha y-coordinizzle within tha menu
window of tha topmost pixel up in tha entry specified by \fIindex\fR.
.SH "MENU CONFIGURATIONS"
.PP
Da default bindings support four different wayz of rockin menus:
.TP
\fBPulldown Menus up in Menubar\fR
This is da most thugged-out common case. Yo ass create a menu widget dat will become the
menu bar. Shiiit, dis aint no joke. Yo ass then add cascade entries ta dis menu, specifyin the
pull down menus you wish ta use up in yo' menu bar. Shiiit, dis aint no joke. Yo ass then create all
of tha pulldowns. Once you have done this, specify tha menu rockin the
\fB\-menu\fR option of tha toplevelz widget command. Y'all KNOW dat shit, muthafucka! See the
\fBtoplevel\fR manual entry fo' details.
.TP
\fBPulldown Menus up in Menu Buttons\fR
This is tha compatible way ta do menu bars.  Yo ass create one menubutton
widget fo' each top-level menu, n' typically you arrange a series of
menubuttons up in a row up in a menubar window.  Yo ass also create tha top-level menus
and any cascaded submenus, n' tie dem together wit \fB\-menu\fR
options up in menubuttons n' cascade menu entries. Put ya muthafuckin choppers up if ya feel dis!  Da top-level menu must
be a cold-ass lil lil pimp of tha menubutton, n' each submenu must be a cold-ass lil lil pimp of the
menu dat refers ta dat shit.  Once you have done this, tha default bindings
will allow playas ta traverse n' invoke tha tree of menus via its
menubutton;  peep tha \fBmenubutton\fR manual entry fo' details.
.TP
\fBPopup Menus\fR
Popup menus typically post up in response ta a mouse button press or
keystroke.  Yo ass create tha popup menus n' any cascaded submenus,
then you call tha \fBtk_popup\fR procedure all up in tha appropriate time
to post tha top-level menu.
.TP
\fBOption Menus\fR
An option menu consistz of a menubutton wit a associated menu
that allows you ta select one of nuff muthafuckin joints, n' you can put dat on yo' toast.  Da current value
is displayed up in tha menubutton n' be also stored up in a global
variable.  Use tha \fBtk_optionMenu\fR procedure ta create option
menubuttons n' they menus.
.TP
\fBTorn-off Menus\fR
Yo ass create a torn-off menu by invokin tha tear-off entry at
the top of a existin menu fo'sho.  Da default bindings will create a freshly smoked up menu
that be a cold-ass lil copy of tha original gangsta menu n' leave it permanently
posted as a top-level window.  Da torn-off menu behaves just
the same as tha original gangsta menu.
.SH "DEFAULT BINDINGS"
.PP
Tk automatically creates class bindings fo' menus dat give them
the followin default behavior:
.IP [1]
When tha mouse entas a menu, tha entry underneath tha mouse
cursor activates;  as tha mouse moves round tha menu, tha active
entry chizzlez ta track tha mouse.
.IP [2]
When tha mouse leaves a menu all of tha entries up in tha menu
deactivate, except up in tha special case where tha mouse moves from
a menu ta a cold-ass lil cascaded submenu.
.IP [3]
When a funky-ass button is busted out over a menu, tha actizzle entry (if any) is invoked.
Da menu also unposts unless it aint nuthin but a torn-off menu.
.IP [4]
Da Space n' Return keys invoke tha actizzle entry and
unpost tha menu.
.IP [5]
If any of tha entries up in a menu have lettas underlined with
the \fB\-underline\fR option, then pressin one of tha underlined
lettas (or its upper-case or lower-case equivalent) invokes that
entry n' unposts tha menu.
.IP [6]
Da Escape key aborts a menu selection up in progress without invokin any
entry.  It also unposts tha menu unless it aint nuthin but a torn-off menu.
.IP [7]
Da Up n' Down keys activate tha next higher or lower entry
in tha menu fo'sho.  When one end of tha menu is reached, tha active
entry wraps round ta tha other end.
.IP [8]
Da Left key moves ta tha next menu ta tha left.
If tha current menu be a cold-ass lil cascaded submenu, then tha submenu is
unposted n' tha current menu entry becomes tha cascade entry
in tha parent.
If tha current menu be a top-level menu posted from a
menubutton, then tha current menubutton is unposted n' the
next menubutton ta tha left is posted.
Otherwise tha key has no effect.
Da left-right order of menubuttons is determined by they stacking
order:  Tk assumes dat tha lowest menubutton (which by default
is tha straight-up original gangsta one pimped) is on tha left.
.IP [9]
Da Right key moves ta tha next menu ta tha right.
If tha current entry be a cold-ass lil cascade entry, then tha submenu is
posted n' tha  current menu entry becomes tha straight-up original gangsta entry
in tha submenu.
Otherwise, if tha current menu was posted from a
menubutton, then tha current menubutton is unposted n' the
next menubutton ta tha right is posted.
.PP
Disabled menu entries is non-responsive:  they do not activate and
they ignore mouse button presses n' releases.
.PP
Several of tha bindings make use of tha command \fBtk_menuSetFocus\fR.
It saves tha current focus n' sets tha focus ta its \fIpathName\fR
argument, which be a menu widget.
.PP
Da behavior of menus can be chizzled by definin freshly smoked up bindings for
individual widgets or by redefinin tha class bindings.
.SH BUGS
.PP
At present it aint possible ta use the
option database ta specify joints fo' tha options ta individual
entries.
.SH "SEE ALSO"
bind(n), menubutton(n), ttk::menubutton(n), toplevel(n)
.SH KEYWORDS
menu, widget
