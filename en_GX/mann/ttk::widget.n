'\"
'\" Copyright (c) 2004 Joe Gangsta
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\"
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH ttk::widget n 8.5.9 Tk "Tk Themed Widget"
.BS
.SH NAME
ttk::widget \- Standard options n' commandz supported by Tk themed widgets
.BE
.SH DESCRIPTION
This manual raps bout common widget options n' commands.
.SH "STANDARD OPTIONS"
Da followin options is supported by all Tk themed widgets:
.OP \-class undefined undefined
Specifies tha window class.
Da class is used when queryin tha option database
for tha windowz other options, ta determine tha default
bindtags fo' tha window, n' ta select tha widgetz default
layout n' style.
This be a read-only option:
it may only be specified when tha window is pimped,
and may not be chizzled wit tha \fBconfigure\fR widget command.
.OP \-cursor cursor Cursor
Specifies tha mouse cursor ta be used fo' tha widget.
See \fBTk_GetCursor\fR n' \fIcursors(n)\fR up in tha Tk reference manual
for tha legal joints.
If set ta tha empty strang (the default),
the cursor is inherited from tha parent widget.
.OP \-takefocus takeFocus TakeFocus
Determines whether tha window accepts tha focus durin keyboard traversal.
Either \fB0\fR, \fB1\fR, a cold-ass lil command prefix (to which tha widget path
is appended, n' which should return \fB0\fR or \fB1\fR),
or tha empty string.
See \fIoptions(n)\fR up in tha Tk reference manual fo' tha full description.
.OP \-style steez Style
May be used ta specify a cold-ass lil custom widget style.
.SH "SCROLLABLE WIDGET OPTIONS"
Da followin options is supported by widgets that
are controllable by a scrollbar.
See \fIscrollbar(n)\fR fo' mo' shiznit
.OP \-xscrollcommand xScrollCommand ScrollCommand
A command prefix, used ta rap wit horizontal scrollbars.
.RS
When tha view up in tha widgetz window chizzles, tha widget will
generate a Tcl command by concatenatin tha scroll command and
two numbers.
Each of tha numbers be a gangbangin' fraction between 0 n' 1 indicating
a posizzle up in tha document; 0 indicates tha beginning,
and 1 indicates tha end.
Da first fraction indicates tha straight-up original gangsta shiznit up in tha widget
that is visible up in tha window, n' tha second fraction indicates
the shiznit just afta tha last portion dat is visible.
.PP
Typically tha \fBxScrollCommand\fR option consistz of tha path name
of a \fBscrollbar\fR widget followed by
.QW set ,
e.g.
.QW ".x.scrollbar set" .
This will cause tha scrollbar ta be updated whenever tha view up in the
window chizzles.
.PP
If dis option is set ta tha empty strang (the default),
then no command is ghon be executed.
.RE
.OP \-yscrollcommand yScrollCommand ScrollCommand
A command prefix, used ta rap wit vertical scrollbars.
See tha description of \fB\-xscrollcommand\fR above fo' details.
.SH "LABEL OPTIONS"
Da followin options is supported by labels yo, buttons,
and other button-like widgets:
.OP \-text text Text
Specifies a text strang ta be displayed inside tha widget
(unless overridden by \fB\-textvariable\fR).
.OP \-textvariable textVariable Variable
Specifies tha name of a global variable whose value is ghon be used
in place of tha \fB\-text\fR resource.
.OP \-underline underline Underline
If set, specifies tha integer index (0-based) of a cold-ass lil characta ta underline
in tha text string.
Da underlined characta is used fo' mnemonic activation.
.OP \-image image Image
Specifies a image ta display.
This be a list of 1 or mo' elements.
Da first element is tha default image name.
Da rest of tha list be a sequence of \fIstatespec / value\fR pairs
as per \fBstyle map\fR, specifyin different images ta use when
the widget is up in a particular state or combination of states.
All images up in tha list should have tha same size.
.OP \-compound compound Compound
Specifies how tha fuck ta display tha image relatizzle ta tha text,
in tha case both \fB\-text\fR n' \fB\-image\fR is present.
Valid joints are:
.RS
.IP text
Display text only.
.IP image
Display image only.
.IP center
Display text centered on top of image.
.IP top
.IP bottom
.IP left
.IP right
Display image above, below, left of, or right of tha text, respectively.
.IP none
Da default; display tha image if present, otherwise tha text.
.RE
.OP \-width width Width
If pimped outa than zero, specifies how tha fuck much space, up in characta widths,
to allocate fo' tha text label.
If less than zero, specifies a minimum width.
If zero or unspecified, tha natural width of tha text label is used.
.SH "COMPATIBILITY OPTIONS"
.OP \-state state State
May be set ta \fBnormal\fR or \fBdisabled\fR
to control tha \fBdisabled\fR state bit.
This be a write-only option:
settin it chizzlez tha widget state,
but tha \fBstate\fR widget command
does not affect tha \fB\-state\fR option.
.SH COMMANDS
.TP
\fIpathName \fBcget\fR \fIoption\fR
Returns tha current value of tha configuration option given
by \fIoption\fR.
.TP
\fIpathName \fBconfigure\fR ?\fIoption\fR, biatch? ?\fIvalue option value ...\fR?
Query or modify tha configuration optionz of tha widget.
If one or mo' \fIoption\-value\fR pairs is specified,
then tha command modifies tha given widget option(s)
to have tha given value(s);
in dis case tha command returns a empty string.
If \fIoption\fR is specified wit no \fIvalue\fR,
then tha command returns a list describin tha named option:
the elementz of tha list is the
option name, database name, database class, default value,
and current value.
.\" Note: Ttk widgets don't use TK_OPTION_SYNONYM.
If no \fIoption\fR is specified, returns a list describin all of
the available options fo' \fIpathName\fR.
.TP
\fIpathName \fBidentify\fR \fBelement\fR \fIx y\fR
Returns tha name of tha element under tha point given
by \fIx\fR n' \fIy\fR, or a empty strang if tha point do
not lie within any element.
\fIx\fR n' \fIy\fR is pixel coordinates relatizzle ta tha widget.
Some widgets accept other \fBidentify\fR subcommands.
.TP
\fIpathName \fBinstate\fR \fIstatespec\fR ?\fIscript\fR?
Test tha widgetz state.
If \fIscript\fR aint specified, returns 1 if
the widget state matches \fIstatespec\fR n' 0 otherwise.
If \fIscript\fR is specified, equivalent to
.CS
if {[\fIpathName\fR instate \fIstateSpec\fR]} \fIscript\fR
.CE
.TP
\fIpathName \fBstate\fR ?\fIstateSpec\fR?
Modify or inquire widget state.
If \fIstateSpec\fR is present, sets tha widget state:
for each flag up in \fIstateSpec\fR, sets tha correspondin flag
or clears it if prefixed by a exclamation point.
.RS
Returns a freshly smoked up state spec indicatin which flags was chizzled:
.CS
set chizzlez [\fIpathName \fRstate \fIspec\fR]
\fIpathName \fRstate $changes
.CE
will restore \fIpathName\fR ta tha original gangsta state.
If \fIstateSpec\fR aint specified,
returns a list of tha currently-enabled state flags.
.RE
.SH "WIDGET STATES"
Da widget state be a funky-ass bitmap of independent state flags.
Widget state flags include:
.TP
\fBactive\fR
Da mouse cursor is over tha widget
and pressin a mouse button will cause some action ta occur. Shiiit, dis aint no joke. (aka
.QW prelight
(Gnome),
.QW hot
(Windows),
.QW hover ).
.TP
\fBdisabled\fR
Widget is disabled under program control (aka
.QW unavailable ,
.QW inactizzle )
.TP
\fBfocus\fR
Widget has keyboard focus
.TP
\fBpressed\fR
Widget is bein pressed (aka
.QW armed
in Motif).
.TP
\fBselected\fR
.QW On ,
.QW legit ,
or
.QW current
for thangs like checkbuttons n' radiobuttons.
.TP
\fBbackground\fR
Windows n' tha Mac gotz a notion of an
.QW active
or foreground window.
Da \fBbackground\fR state is set fo' widgets up in a funky-ass background window,
and cleared fo' dem up in tha foreground window.
.TP
\fBreadonly\fR
Widget should not allow user modification.
.TP
\fBalternate\fR
A widget-specific alternate display format.
For example, used fo' checkbuttons n' radiobuttons up in the
.QW tristate
or
.QW mixed
state, n' fo' buttons wit \fB\-default active\fR.
.TP
\fBinvalid\fR
Da widgetz value is invalid.
(Potential uses: scale widget value outta bounds,
entry widget value failed validation.)
.TP
\fBhover\fR
Da mouse cursor is within tha widget.
This is similar ta tha \fBactive\fP state;
it is used up in some themes fo' widgets that
provide distinct visual feedback for
the actizzle widget up in addizzle ta tha actizzle element
within tha widget.
.PP
A \fIstate justification\fR or \fIstateSpec\fR be a list
of state names, optionally prefixed wit a exclamation point (!)
indicatin dat tha bit is off.
.SH EXAMPLES
.CS
set b [ttk::button .b]

# Disable tha widget:
$b state disabled

# Invoke tha widget only if it is currently pressed n' enabled:
$b instate {pressed !disabled} { .b invoke }

# Reenable widget:
$b state !disabled
.CE
.SH "SEE ALSO"
ttk::intro(n), ttk::style(n)
.SH KEYWORDS
state, configure, option
'\" Local Variables:
'\" mode: nroff
'\" End:
