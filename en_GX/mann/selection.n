'\"
'\" Copyright (c) 1990-1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH selection n 8.1 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
selection \- Manipulate tha X selection
.SH SYNOPSIS
\fBselection \fIoption\fR ?\fIarg arg ...\fR?
.BE

.SH DESCRIPTION
.PP
This command serves up a Tcl intercourse ta tha X selection mechanizzle and
implements tha full selection functionalitizzle busted lyrics bout up in the
X Inter-Client Communication Conventions Manual (ICCCM).
.PP
Note dat fo' pimpment of tha CLIPBOARD selection (see below), the
\fBclipboard\fR command may also be used.
.PP
Da first argument ta \fBselection\fR determines tha format of the
rest of tha arguments n' tha behavior of tha command. Y'all KNOW dat shit, muthafucka!  Da following
forms is currently supported:
.PP
.TP
\fBselection clear\fR ?\fB\-displayof\fR \fIwindow\fR, biatch? ?\fB\-selection\fR \fIselection\fR?
If \fIselection\fR exists anywhere on \fIwindow\fRz display, clear it
so dat no window owns tha selection no mo'.  \fISelection\fR
specifies tha X selection dat should be cleared, n' should be an
atom name like fuckin PRIMARY or CLIPBOARD; peep tha Inter-Client
Communication Conventions Manual fo' complete details.
\fISelection\fR defaults ta PRIMARY n' \fIwindow\fR defaults to
.QW . .
Returns a empty string. 
.TP
\fBselection get\fR ?\fB\-displayof\fR \fIwindow\fR, biatch? ?\fB\-selection\fR \fIselection\fR, biatch? ?\fB\-type\fR \fItype\fR?
Retrieves tha value of \fIselection\fR from \fIwindow\fRz display and
returns it as a result.  \fISelection\fR defaults ta PRIMARY and
\fIwindow\fR defaults to
.QW . .
\fIType\fR specifies tha form up in which tha selection is ta be returned
(the desired
.QW target
for conversion, up in ICCCM terminology), and
should be a atom name like fuckin STRING or FILE_NAME; peep the
Inter-Client Communication Conventions Manual fo' complete details.
\fIType\fR defaults ta STRING.  Da selection balla may chizzle to
return tha selection up in any of nuff muthafuckin different representation
formats, like fuckin STRING, UTF8_STRING, ATOM, INTEGER, etc. (this format
is different
than tha selection type; peep tha ICCCM fo' all tha confusin details).
If tha selection is returned up in a non-strin format, like fuckin INTEGER
or ATOM, tha \fBselection\fR command converts it ta strang format as a
collection of fieldz separated by spaces: atoms is converted ta their
textual names, n' anythang else is converted ta hexadecimal integers.
Note dat \fBselection get\fR do not retrieve tha selection up in the
UTF8_STRING format unless holla'd at to.
.TP
\fBselection handle\fR ?\fB\-selection\fR \fIs\fR, biatch? ?\fB\-type\fR \fIt\fR, biatch? ?\fB\-format\fR \fIf\fR, biatch? \fIwindow command\fR
Creates a handlez fo' selection requests, such dat \fIcommand\fR will
be executed whenever selection \fIs\fR is owned by \fIwindow\fR and
someone attempts ta retrieve it up in tha form given by type \fIt\fR
(e.g. \fIt\fR is specified up in tha \fBselection get\fR command).
\fIS\fR defaults ta PRIMARY, \fIt\fR defaults ta STRING, and
\fIf\fR defaults ta STRING.  If \fIcommand\fR be a empty string
then any existin handlez fo' \fIwindow\fR, \fIt\fR, and
\fIs\fR is removed.
Note dat when tha selection is handled as type STRING it be also
automatically handled as type UTF8_STRING as well.
.RS
.PP
When \fIselection\fR is requested, \fIwindow\fR is tha selection baller,
and \fItype\fR is tha axed type, \fIcommand\fR is ghon be executed
as a Tcl command wit two additionizzle numbers appended ta it
(with space separators).  
Da two additionizzle numbers
are \fIoffset\fR n' \fImaxChars\fR:  \fIoffset\fR specifies a starting
characta posizzle up in tha selection n' \fImaxChars\fR gives tha maximum
number of charactas ta retrieve.  Da command should return a value consisting
of at most \fImaxChars\fR of tha selection, startin at position
\fIoffset\fR.  For straight-up big-ass selections (larger than \fImaxChars\fR)
the selection is ghon be retrieved rockin nuff muthafuckin invocationz of \fIcommand\fR
with increasin \fIoffset\fR joints, n' you can put dat on yo' toast.  If \fIcommand\fR returns a string
whose length is less than \fImaxChars\fR, tha return value be assumed to
include all of tha remainder of tha selection;  if tha length of
\fIcommand\fRz result is equal ta \fImaxChars\fR then
\fIcommand\fR is ghon be invoked again, until it eventually
returns a result shorta than \fImaxChars\fR.  Da value of \fImaxChars\fR
will always be relatively big-ass (thousandz of characters).
.PP
If \fIcommand\fR returns a error then tha selection retrieval is rejected
just as if tha selection did not exist at all.
.PP
Da \fIformat\fR argument specifies tha representation dat should be
used ta transmit tha selection ta tha requesta (the second column of
Table 2 of tha ICCCM), n' defaults ta STRING.  If \fIformat\fR is
STRING, tha selection is transmitted as 8-bit ASCII charactas (i.e.
just up in tha form returned by \fIcommand\fR, up in tha system \fBencoding\fR;
the UTF8_STRING format always uses UTF-8 as its encoding).
If \fIformat\fR is
ATOM, then tha return value from \fIcommand\fR is divided tha fuck into fields
separated by white space;  each field is converted ta its atom value,
and tha 32-bit atom value is transmitted instead of tha atom name.
For any other \fIformat\fR, tha return value from \fIcommand\fR is
divided tha fuck into fieldz separated by white space n' each field is
converted ta a 32-bit integer;  a array of integers is transmitted
to tha selection requester.
.PP
Da \fIformat\fR argument is needed only fo' compatibilitizzle with
selection requestas dat do not use Tk.  If Tk is being
used ta retrieve tha selection then tha value is converted back to
a strang all up in tha requestin end, so \fIformat\fR is
irrelevant.
.RE
.TP
\fBselection own\fR ?\fB\-displayof\fR \fIwindow\fR, biatch? ?\fB\-selection\fR \fIselection\fR?
.TP
\fBselection own\fR ?\fB\-command\fR \fIcommand\fR, biatch? ?\fB\-selection\fR \fIselection\fR, biatch? \fIwindow\fR
Da first form of \fBselection own\fR returns tha path name of the
window up in dis application dat owns \fIselection\fR on tha display
containin \fIwindow\fR, or a empty strang if no window up in this
application owns tha selection. I aint talkin' bout chicken n' gravy biatch.  \fISelection\fR defaults ta PRIMARY and
\fIwindow\fR defaults to
.QW . .
.PP
Da second form of \fBselection own\fR causes \fIwindow\fR ta become
the freshly smoked up balla of \fIselection\fR on \fIwindow\fRz display, returning
an empty strang as result. Da existin baller, if any, is notified
that it has lost tha selection.
If \fIcommand\fR is specified, it aint nuthin but a Tcl script ta execute when
some other window fronts ballershizzle of tha selection away from
\fIwindow\fR.  \fISelection\fR defaults ta PRIMARY.
.SH EXAMPLES
On X11 platforms, one of tha standard selections available is the
SECONDARY selection. I aint talkin' bout chicken n' gravy biatch yo. Hardly anythang uses it yo, but here is how tha fuck ta read
it rockin Tk:
.CS
set selContents [\fBselection get\fR \-selection SECONDARY]
.CE
.PP
Many different typez of data may be available fo' a selection; the
special type TARGETS allows you ta git a list of available types:
.CS
foreach type [\fBselection get\fR \-type TARGETS] {
   puts "Selection PRIMARY supports type $type"
}
.CE
.PP
To claim tha selection, you must first set up a handlez ta supply the
data fo' tha selection. I aint talkin' bout chicken n' gravy biatch.  Then you gotta claim tha selection...
.CS
# Set up tha data handlez locked n loaded fo' incomin requests
set foo "This be a strang wit some data up in dat shit... blah blah"
\fBselection handle\fR \-selection SECONDARY . getData
proc getData {offset maxChars} {
   puts "Retrievin selection startin at $offset"
   return [strin range $::foo $offset [expr {$offset+$maxChars}]]
}

# Now we grab tha selection itself
puts "Claimin selection"
\fBselection own\fR \-command lost \-selection SECONDARY .
proc lost {} {
   puts "Lost selection"
}
.CE
.SH "SEE ALSO"
clipboard(n)
.SH KEYWORDS
clear, format, handlez, ICCCM, own, selection, target, type
