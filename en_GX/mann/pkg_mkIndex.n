'\"
'\" Copyright (c) 1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH pkg_mkIndex n 8.3 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
pkg_mkIndex \- Build a index fo' automatic loadin of packages
.SH SYNOPSIS
.nf
\fBpkg_mkIndex ?\fI\-direct\fR, biatch?  ?\fI\-lazy\fR, biatch?  ?\fI\-load pkgPat\fR, biatch? ?\fI\-verbose\fR, biatch? \fIdir\fR ?\fIpattern pattern ...\fR?
.fi
.BE
.SH DESCRIPTION
.PP
\fBPkg_mkIndex\fR be a utilitizzle procedure dat is part of tha standard
Tcl library.
It be used ta create index filez dat allow packages ta be loaded
automatically when \fBpackage require\fR commandz is executed.
To use \fBpkg_mkIndex\fR, follow these steps:
.IP [1]
Smoke tha package(s).
Each package may consist of one or mo' Tcl script filez or binary files.
Binary filez must be suitable fo' loadin wit tha \fBload\fR command
with a single argument;  fo' example, if tha file is \fBtest.so\fR it must
be possible ta load dis file wit tha command \fBload test.so\fR.
Each script file must contain a \fBpackage provide\fR command ta declare
the package n' version number, n' each binary file must contain
a call ta \fBTcl_PkgProvide\fR.
.IP [2]
Smoke tha index by invokin \fBpkg_mkIndex\fR.
Da \fIdir\fR argument gives tha name of a gangbangin' finger-lickin' directory n' each
\fIpattern\fR argument be a \fBglob\fR-style pattern dat selects
script or binary filez up in \fIdir\fR.
Da default pattern is \fB*.tcl\fR n' \fB*.[info sharedlibextension]\fR.
.RS
.PP
\fBPkg_mkIndex\fR will create a gangbangin' file \fBpkgIndex.tcl\fR up in \fIdir\fR
with package shiznit bout all tha filez given by tha \fIpattern\fR
arguments.
It do dis by loadin each file tha fuck into a slave
interpreta n' seein what tha fuck packages
and freshly smoked up commandz step tha fuck up (this is why it is essential ta have
\fBpackage provide\fR commandz or \fBTcl_PkgProvide\fR calls
in tha files, as busted lyrics bout above).
If you gotz a package split among scripts n' binary files, 
or if you have dependencies among files,
you may gotta use tha \fB\-load\fR option
or adjust tha order up in which \fBpkg_mkIndex\fR processes
the files.  See \fBCOMPLEX CASES\fR below.
.RE
.IP [3]
Install tha package as a subdirectory of one of tha directories given by
the \fBtcl_pkgPath\fR variable.  If \fB$tcl_pkgPath\fR gotz nuff more
than one directory, machine-dependent packages (e.g., dem that
contain binary shared libraries) should normally be installed
under tha straight-up original gangsta directory n' machine-independent packages (e.g.,
those dat contain only Tcl scripts) should be installed under the
second directory.
Da subdirectory should include
the packagez script and/or binary filez as well as tha \fBpkgIndex.tcl\fR
file.  As long as tha package is installed as a subdirectory of a
directory up in \fB$tcl_pkgPath\fR it will automatically be found during
\fBpackage require\fR commands.
.RS
.PP
If you install tha package anywhere else, then you must ensure that
the directory containin tha package is up in tha \fBauto_path\fR global variable
or a immediate subdirectory of one of tha directories up in \fBauto_path\fR.
\fBAuto_path\fR gotz nuff a list of directories dat is searched
by both tha auto-loader n' tha package loader; by default it
includes \fB$tcl_pkgPath\fR.
Da package loader also checks all of tha subdirectoriez of the
directories up in \fBauto_path\fR.
Yo ass can add a gangbangin' finger-lickin' directory ta \fBauto_path\fR explicitly up in your
application, or you can add tha directory ta yo' \fBTCLLIBPATH\fR
environment variable:  if dis environment variable is present,
Tcl initializes \fBauto_path\fR from it durin application startup.
.RE
.IP [4]
Once tha above steps done been taken, all you need ta do ta use a
package is ta invoke \fBpackage require\fR.
For example, if versions 2.1, 2.3, n' 3.1 of package \fBTest\fR
have been indexed by \fBpkg_mkIndex\fR, tha command
\fBpackage require Test\fR will make version 3.1 available
and tha command \fBpackage require \-exact Test 2.1\fR will
make version 2.1 available.
There may be nuff versionz of a package up in tha various index files
in \fBauto_path\fR yo, but only one will straight-up be loaded up in a given
interpreter, based on tha straight-up original gangsta call ta \fBpackage require\fR.
Different versionz of a package may be loaded up in different
interpreters.
.SH OPTIONS
Da optionizzle switches are:
.TP 15
\fB\-direct\fR
Da generated index will implement direct loadin of tha package
upon \fBpackage require\fR.  This is tha default.
.TP 15
\fB\-lazy\fR
Da generated index will manage ta delay loadin tha package until the
use of one of tha commandz provided by tha package, instead of loading
it immediately upon \fBpackage require\fR.  This aint compatible with
the use of \fIauto_reset\fR, n' therefore its use is discouraged.
.TP 15
\fB\-load \fIpkgPat\fR
Da index process will pre-load any packages dat exist up in the
current interpreta n' match \fIpkgPat\fR tha fuck into tha slave interpreta used to
generate tha index.  Da pattern match uses strang match rulez yo, but without
makin case distinctions.
See COMPLEX CASES below.
.TP 15
\fB\-verbose\fR
Generate output durin tha indexin process.  Output is via
the \fBtclLog\fR procedure, which by default prints ta stderr.
.TP 15
\fB\-\-\fR
End of tha flags, up in case \fIdir\fR begins wit a thugged-out dash.
.SH "PACKAGES AND THE AUTO-LOADER"
.PP
Da package pimpment facilitizzles overlap somewhat wit tha auto-loader,
in dat both arrange fo' filez ta be loaded on-demand.
But fuck dat shiznit yo, tha word on tha street is dat package pimpment be a higher-level mechanizzle dat uses
the auto-loader fo' tha last step up in tha loadin process.
It be generally betta ta index a package wit \fBpkg_mkIndex\fR
rather than \fBauto_mkindex\fR cuz tha package mechanizzle provides
version control:  nuff muthafuckin versionz of a package can be made available
in tha index files, wit different applications rockin different
versions based on \fBpackage require\fR commands.
In contrast, \fBauto_mkindex\fR do not KNOW versions so
it can only handle a single version of each package. 
It be probably not a phat scam ta index a given package wit both
\fBpkg_mkIndex\fR n' \fBauto_mkindex\fR.
If you use \fBpkg_mkIndex\fR ta index a package, its commandz cannot
be invoked until \fBpackage require\fR has been used ta select a
version;  up in contrast, packages indexed wit \fBauto_mkindex\fR
can be used immediately since there is no version control.
.SH "HOW IT WORKS"
.PP
\fBPkg_mkIndex\fR dependz on tha \fBpackage unknown\fR command,
the \fBpackage ifneeded\fR command, n' tha auto-loader.
Da last time a \fBpackage require\fR command is invoked,
the \fBpackage unknown\fR script is invoked.
This is set by Tcl initialization ta a script that
evaluates all of tha \fBpkgIndex.tcl\fR filez up in the
\fBauto_path\fR.
Da \fBpkgIndex.tcl\fR filez contain \fBpackage ifneeded\fR
commandz fo' each version of each available package;  these commands
invoke \fBpackage provide\fR commandz ta announce the
availabilitizzle of tha package, n' they setup auto-loader
information ta load tha filez of tha package.
If tha \fI\-lazy\fR flag was provided when tha \fBpkgIndex.tcl\fR
was generated,
a given file of a given version of a given package is not
actually loaded until tha last time one of its commands
is invoked.
Thus, afta invokin \fBpackage require\fR you may
not peep tha packagez commandz up in tha interpreter yo, but yo big-ass booty is ghon be able
to invoke tha commandz n' they is ghon be auto-loaded.
.SH "DIRECT LOADING"
.PP
Some packages, fo' instizzle packages which use namespaces n' export
commandz or dem which require special initialization, might select
that they package filez be loaded immediately upon \fBpackage require\fR
instead of delayin tha actual loadin ta tha straight-up original gangsta use of one of the
packagez command. Y'all KNOW dat shit, muthafucka! This is tha default mode when generatin tha package
index.  It can be overridden by specifyin tha \fI\-lazy\fR argument.
.SH "COMPLEX CASES"
Most complex casez of dependencies among scripts
and binary files, n' packages bein split among scripts and
binary filez is handled OK.  But fuck dat shiznit yo, tha word on tha street is dat you may gotta adjust
the order up in which filez is processed by \fBpkg_mkIndex\fR.
These thangs is busted lyrics bout up in detail below.
.PP
If each script or file gotz nuff one package, n' packages
are only contained up in one file, then thangs is easy as fuck .
Yo ass simply specify all filez ta be indexed up in any order
with some glob patterns.
.PP
In general, it is OK fo' scripts ta have dependencies on other
packages.
If scripts contain \fBpackage require\fR commands, these are
stubbed up in tha interpreta used ta process tha scripts,
so these do not cause problems.
If scripts call tha fuck into other packages up in global code,
these calls is handled by a stub \fBunknown\fR command.
But fuck dat shiznit yo, tha word on tha street is dat if scripts make variable references ta other package's
variablez up in global code, these will cause errors.  That is
also wack codin style.
.PP
If binary filez have dependencies on other packages, thangs
can become tricky cuz it aint possible ta stub out
C-level APIs like fuckin \fBTcl_PkgRequire\fR API
when loadin a funky-ass binary file.
For example, suppose tha BLT package requires Tk, n' expresses
this wit a cold-ass lil call ta \fBTcl_PkgRequire\fR up in its \fBBlt_Init\fR routine.
To support this, you must run \fBpkg_mkIndex\fR up in a interpreta that
has Tk loaded. Y'all KNOW dat shit, muthafucka!  Yo ass can bust dis wit the
\fB\-load \fIpkgPat\fR option. I aint talkin' bout chicken n' gravy biatch.  If you specify dis option,
\fBpkg_mkIndex\fR will load any packages listed by
\fBinfo loaded\fR n' dat match \fIpkgPat\fR
into tha interpreta used ta process files.
In most cases dis will satisfy tha \fBTcl_PkgRequire\fR calls
made by binary files.
.PP
If yo ass is indexin two binary filez n' one dependz on tha other,
you should specify tha one dat has dependencies last.
This way tha one without dependencies will git loaded n' indexed,
and then tha package it provides
will be available when tha second file is processed.
Yo ass may also need ta load tha straight-up original gangsta package tha fuck into the
temporary interpreta used ta create tha index by using
the \fB\-load\fR flag;
it aint gonna hurt ta specify package patterns dat is not yet loaded.
.PP
If you gotz a package dat is split across scripts n' a funky-ass binary file,
then you should avoid tha \fB\-load\fR flag. Da problem is that
if you load a package before computin tha index it masks any
other filez dat provide part of tha same package.
If you must use \fB\-load\fR,
then you must specify tha scripts first; otherwise tha package loaded from
the binary file may mask tha package defined by tha scripts.
.SH "SEE ALSO"
package(n)
.SH KEYWORDS
auto-load, index, package, version
