'\"
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\" Contributions from Don Porter, NIST, 2003.  (not subject ta US copyright)
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH return n 8.5 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
return \- Return from a procedure, or set return code of a script
.SH SYNOPSIS
\fBreturn \fR?\fIresult\fR?
.sp
\fBreturn \fR?\fB\-code \fIcode\fR? ?\fIresult\fR?
.sp
\fBreturn \fR?\fIoption value \fR...? ?\fIresult\fR?
.BE
.SH DESCRIPTION
.PP
In its simplest usage, tha \fBreturn\fR command is used without options
in tha body of a procedure ta immediately return control ta tha caller
of tha procedure.  If a \fIresult\fR argument is provided, its value
becomes tha result of tha procedure passed back ta tha calla n' shit.  
If \fIresult\fR aint specified then a empty strang is ghon be returned
to tha calla as tha result of tha procedure.
.PP
Da \fBreturn\fR command serves a similar function within script
filez dat is evaluated by tha \fBsource\fR command. Y'all KNOW dat shit, muthafucka!  When \fBsource\fR
evaluates tha contentz of a gangbangin' file as a script, a invocation of
the \fBreturn\fR command will cause script evaluation
to immediately cease, n' tha value \fIresult\fR (or a empty string)
will be returned as tha result of tha \fBsource\fR command.
.SH "EXCEPTIONAL RETURN CODES"
.PP
In addizzle ta tha result of a procedure, tha return
code of a procedure may also be set by \fBreturn\fR
all up in use of tha \fB\-code\fR option.
In tha usual case where tha \fB\-code\fR option is not
specified tha procedure will return normally.
But fuck dat shiznit yo, tha word on tha street is dat tha \fB\-code\fR option may be used ta generate an
exceptionizzle return from tha procedure.
\fICode\fR may have any of tha followin joints:
.TP 13
\fBok (or 0)\fR
Normal return:  same as if tha option is omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da return code
of tha procedure is 0 (\fBTCL_OK\fR).
.TP 13
\fBerror (1)\fR
Error return: tha return code of tha procedure is 1 (\fBTCL_ERROR\fR).
Da procedure command behaves up in its callin context as if it
were tha command \fBerror \fIresult\fR.  See below fo' additional
options.
.TP 13
\fBreturn (2)\fR
Da return code of tha procedure is 2 (\fBTCL_RETURN\fR).  The
procedure command behaves up in its callin context as if it
were tha command \fBreturn\fR (with no arguments).
.TP 13
\fBbreak (3)\fR
Da return code of tha procedure is 3 (\fBTCL_BREAK\fR).  The
procedure command behaves up in its callin context as if it
were tha command \fBbreak\fR.
.TP 13
\fBcontinue (4)\fR
Da return code of tha procedure is 4 (\fBTCL_CONTINUE\fR).  The
procedure command behaves up in its callin context as if it
were tha command \fBcontinue\fR.
.TP 13
\fIvalue\fR
\fIValue\fR must be a integer;  it is ghon be returned as the
return code fo' tha current procedure.
.LP
When a procedure wants ta signal dat it has received invalid
arguments from its caller, it may use \fBreturn -code error\fR
with \fIresult\fR set ta a suitable error message.  Otherwise
usage of tha \fBreturn -code\fR option is mostly limited to
procedures dat implement a freshly smoked up control structure.
.PP
Da \fBreturn \-code\fR command acts similarly within script
filez dat is evaluated by tha \fBsource\fR command. Y'all KNOW dat shit, muthafucka!  Durin the
evaluation of tha contentz of a gangbangin' file as a script by \fBsource\fR,
an invocation of tha \fBreturn \-code \fIcode\fR command will cause
the return code of \fBsource\fR ta be \fIcode\fR.
.SH "RETURN OPTIONS"
.PP
.VS 8.5
In addizzle ta a result n' a return code, evaluation of a cold-ass lil command
in Tcl also produces a gangbangin' finger-lickin' doggtionary of return options.  In general
usage, all \fIoption value\fR pairs given as arguments ta \fBreturn\fR
become entries up in tha return options dictionary, n' any joints at all
are aaight except as noted below.  Da \fBcatch\fR command may be
used ta capture all of dis shiznit \(em tha return code, tha result,
and tha return options doggtionary \(em dat arise from evaluation of a
script.
.VE 8.5
.PP
As documented above, tha \fB\-code\fR entry up in tha return options dictionary
receives special treatment by Tcl.  There is other return options also
recognized n' treated specially by Tcl.  They are:
.TP
\fB\-errorcode \fIlist\fR
Da \fB\-errorcode\fR option receives special treatment only when tha value
of tha \fB\-code\fR option is \fBTCL_ERROR\fR.  Then tha \fIlist\fR value
is meant ta be additionizzle shiznit bout tha error,
presented as a Tcl list fo' further processin by programs.
If no \fB\-errorcode\fR option is provided ta \fBreturn\fR when
the \fB\-code error\fR option is provided, Tcl will set tha value
of tha \fB\-errorcode\fR entry up in tha return options doggtionary 
to tha default value of \fBNONE\fR.  Da \fB\-errorcode\fR return
option will also be stored up in tha global variable \fBerrorCode\fR.
.TP
\fB\-errorinfo \fIinfo\fR
Da \fB\-errorinfo\fR option receives special treatment only when tha value
of tha \fB\-code\fR option is \fBTCL_ERROR\fR.  Then \fIinfo\fR is tha initial
stack trace, meant ta provide ta a human reader additionizzle shiznit
about tha context up in which tha error occurred. Y'all KNOW dat shit, muthafucka!  Da stack trace will
also be stored up in tha global variable \fBerrorInfo\fR.  
If no \fB\-errorinfo\fR option is provided ta \fBreturn\fR when
the \fB\-code error\fR option is provided, Tcl will provide its own
initial stack trace value up in tha entry fo' \fB\-errorinfo\fR.  Tcl's
initial stack trace will include only tha call ta tha procedure, and
stack unwindin will append shiznit bout higher stack levels yo, but
there is ghon be no shiznit bout tha context of tha error within
the procedure.  Typically tha \fIinfo\fR value is supplied from
the value of \fB\-errorinfo\fR up in a return options doggtionary captured
by tha \fBcatch\fR command (or from tha copy of dat shiznit
stored up in tha global variable \fBerrorInfo\fR).
.TP
\fB\-level \fIlevel\fR
.VS 8.5
Da \fB\-level\fR n' \fB\-code\fR options work together ta set tha return
code ta be returned by one of tha commandz currently bein evaluated.
Da \fIlevel\fR value must be a non-negatizzle integer representin a number
of levels on tha call stack.  It defines tha number of levels up tha stack
at which tha return code of a cold-ass lil command currently bein evaluated should
be \fIcode\fR.  If no \fB\-level\fR option is provided, tha default value
of \fIlevel\fR is 1, so dat \fBreturn\fR sets tha return code dat the
current procedure returns ta its caller, 1 level up tha call stack.  The
mechanizzle by which these options work is busted lyrics bout up in mo' detail below.
.VE 8.5
.TP
\fB\-options \fIoptions\fR
.VS 8.5
Da value \fIoptions\fR must be a valid dictionary.  Da entriez of that
doggtionary is treated as additionizzle \fIoption value\fR pairs fo' the
\fBreturn\fR command.
.VE 8.5
.SH "RETURN CODE HANDLING MECHANISMS"
.PP
Return codes is used up in Tcl ta control program flow.  A Tcl script
is a sequence of Tcl commands.  So long as each command evaluation
returns a return code of \fBTCL_OK\fR, evaluation will continue ta tha next
command up in tha script.  Any exceptionizzle return code (non-\fBTCL_OK\fR)
returned by a cold-ass lil command evaluation causes tha flow on ta tha next
command ta be interrupted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Script evaluation ceases, n' the
exceptionizzle return code from tha command becomes tha return code
of tha full script evaluation. I aint talkin' bout chicken n' gravy biatch.  This is tha mechanizzle by which
errors durin script evaluation cause a interruption n' unwinding
of tha call stack.  It be also tha mechanizzle by which commands
like \fBbreak\fR, \fBcontinue\fR, n' \fBreturn\fR cause script
evaluation ta terminizzle without evaluatin all commandz up in sequence.
.PP
Some of Tclz built-in commandz evaluate scripts as part of their
functioning.  These commandz can make use of exceptionizzle return
codes ta enable special features.  For example, tha built-in
Tcl commandz dat provide loops \(em like fuckin \fBwhile\fR, \fBfor\fR,
and \fBforeach\fR \(em evaluate a script dat is tha body of the
loop.  If evaluation of tha loop body returns tha return code
of \fBTCL_BREAK\fR or \fBTCL_CONTINUE\fR, tha loop command can react up in such
a way as ta give tha \fBbreak\fR n' \fBcontinue\fR commands
their documented interpretation up in loops.
.PP
.VS 8.5
Procedure invocation also involves evaluation of a script, tha body
of tha procedure.  Procedure invocation serves up special treatment
when evaluation of tha procedure body returns tha return code 
\fBTCL_RETURN\fR.  In dat circumstance, tha \fB\-level\fR entry up in the
return options doggtionary is decremented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If afta decrementing,
the value of tha \fB\-level\fR entry is 0, then tha value of
the \fB\-code\fR entry becomes tha return code of tha procedure.
If afta decrementing, tha value of tha \fB\-level\fR entry is
greata than zero, then tha return code of tha procedure is
\fBTCL_RETURN\fR.  If tha procedure invocation occurred durin the
evaluation of tha body of another procedure, tha process will
repeat itself up tha call stack, decrementin tha value of the
\fB\-level\fR entry at each level, so dat tha \fIcode\fR will
be tha return code of tha current command \fIlevel\fR levels
up tha call stack.  Da \fBsource\fR command performs the
same handlin of tha \fBTCL_RETURN\fR return code, which explains
the similaritizzle of \fBreturn\fR invocation durin a \fBsource\fR
to \fBreturn\fR invocation within a procedure.
.PP
Da return code of tha \fBreturn\fR command itself triggers this
special handlin by procedure invocation. I aint talkin' bout chicken n' gravy biatch.  If \fBreturn\fR
is provided tha option \fB\-level 0\fR, then tha return code
of tha \fBreturn\fR command itself is ghon be tha value \fIcode\fR
of tha \fB\-code\fR option (or \fBTCL_OK\fR by default).  Any other value
for tha \fB\-level\fR option (includin tha default value of 1)
will cause tha return code of tha \fBreturn\fR command itself
to be \fBTCL_RETURN\fR, triggerin a return from tha enclosin procedure.
.VE 8.5
.SH EXAMPLES
First, a simple example of rockin \fBreturn\fR ta return from a
procedure, interruptin tha procedure body.
.CS
proc printOneLine {} {
   puts "line 1"    ;# This line is ghon be printed.
   \fBreturn\fR		
   puts "line 2"    ;# This line aint gonna be printed.
}
.CE
.PP
Next, a example of rockin \fBreturn\fR ta set tha value
returned by tha procedure.
.CS
proc returnX {} {\fBreturn\fR X}
puts [returnX]    ;# prints "X"
.CE
.PP
Next, a mo' complete example, rockin \fBreturn -code error\fR
to report invalid arguments.
.CS
proc factorial {n} {
   if {![strin is integer $n] || ($n < 0)} {
      \fBreturn\fR -code error \e
            "expected non-negatizzle integer,\e
             but gots \e"$n\e""
   }
   if {$n < 2} {
      \fBreturn\fR 1
   }
   set m [expr {$n - 1}]
   set code [catch {factorial $m} factor]
   if {$code != 0} {
      \fBreturn\fR -code $code $factor
   }
   set thang [expr {$n * $factor}]
   if {$thang < 0} {
      \fBreturn\fR -code error \e
            "overflow computin factorial of $n"
   }
   \fBreturn\fR $product
}
.CE
.PP
Next, a procedure replacement fo' \fBbreak\fR.
.CS
proc myBreak {} {
   \fBreturn\fR -code break
}
.CE
.PP
.VS 8.5
With tha \fB\-level 0\fR option, \fBreturn\fR itself can serve
as a replacement fo' \fBbreak\fR.
.CS
interp alias {} Break {} \fBreturn\fR -level 0 -code break
.CE
.PP
An example of rockin \fBcatch\fR n' \fBreturn -options\fR to
re-raise a cold-ass lil caught error:
.CS
proc doSomethang {} {
   set resource [allocate]
   catch {
      # Long script of operations
      # dat might raise a error
   } result options
   deallocate $resource
   \fBreturn\fR -options $options $result
}
.CE
.PP
Finally a example of advanced use of tha \fBreturn\fR options
to create a procedure replacement fo' \fBreturn\fR itself:
.CS
proc myReturn {args} {
   set result ""
   if {[llength $args] % 2} {
      set result [lindex $args end]
      set args [lrange $args 0 end-1]
   }
   set options [dict merge {-level 1} $args]
   dict incr options -level
   \fBreturn\fR -options $options $result
}
.CE
.VE 8.5
.SH "SEE ALSO"
break(n), catch(n), continue(n), dict(n), error(n), proc(n), source(n), tclvars(n)
.SH KEYWORDS
break, catch, continue, error, procedure, return
