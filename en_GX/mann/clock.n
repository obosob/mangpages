'\"
'\" Generated from file './doc/clock.dt' by tcllib/doctools wit format 'nroff'
'\" Copyright (c) 2004 Kevin B. Kenny <kennykb@acm.org> fo' realz. All muthafuckin rights reserved.
'\"
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH "clock" n 8.5 Tcl "Tcl Built-In Commands"
.BS
.SH NAME
clock \- Obtain n' manipulate dates n' times
.SH "SYNOPSIS"
package require \fBTcl 8.5\fR
.sp
\fBclock add\fR \fItimeVal\fR ?\fIcount unit...\fR, biatch? ?\fI\-option value\fR?
.sp
\fBclock clicks\fR ?\fI\-option\fR?
.sp
\fBclock format\fR \fItimeVal\fR ?\fI\-option value\fR...?
.sp
\fBclock microseconds\fR 
.sp
\fBclock milliseconds\fR 
.sp
\fBclock scan\fR \fIinputString\fR ?\fI\-option value\fR...?
.sp
\fBclock seconds\fR 
.sp
.BE
.SH "DESCRIPTION"
.PP
Da \fBclock\fR command performs nuff muthafuckin operations dat obtain and
manipulate joints dat represent times.  Da command supports several
subcommandz dat determine what tha fuck action is carried up by tha command.
.TP
\fBclock add\fR \fItimeVal\fR ?\fIcount unit...\fR, biatch? ?\fI\-option value\fR?
Addz a (possibly negative) offset ta a time dat is expressed as an
integer number of seconds.  See \fBCLOCK ARITHMETIC\fR fo' a gangbangin' full description.
.TP
\fBclock clicks\fR ?\fI\-option\fR?
If no \fI\-option\fR argument is supplied, returns a high-resolution
time value as a system-dependent integer value.  Da unit of tha value
is system-dependent but should be tha highest resolution clock available
on tha system like fuckin a CPU cycle counter n' shit.  See \fBHIGH RESOLUTION TIMERS\fR fo' a gangbangin' full description.
.RS
.PP
If tha \fI\-option\fR argument is \fI\-milliseconds\fR, then tha command
is synonymous wit \fBclock milliseconds\fR (see below).  This
usage is obsolete, n' \fBclock milliseconds\fR is ta be
considered tha preferred way of obtainin a cold-ass lil count of milliseconds.
.PP
If tha \fI\-option\fR argument is \fI\-microseconds\fR, then tha command
is synonymous wit \fBclock microseconds\fR (see below).  This
usage is obsolete, n' \fBclock microseconds\fR is ta be
considered tha preferred way of obtainin a cold-ass lil count of microseconds.
.RE
.TP
\fBclock format\fR \fItimeVal\fR ?\fI\-option value\fR...?
Formats a time dat is expressed as a integer number of secondz tha fuck into a gangbangin' format
intended fo' consumption by playas or external programs.
See \fBFORMATTING TIMES\fR fo' a gangbangin' full description.
.TP
\fBclock microseconds\fR 
Returns tha current time as a integer number of microseconds.  See \fBHIGH RESOLUTION TIMERS\fR fo' a gangbangin' full description.
.TP
\fBclock milliseconds\fR 
Returns tha current time as a integer number of milliseconds.  See \fBHIGH RESOLUTION TIMERS\fR fo' a gangbangin' full description.
.TP
\fBclock scan\fR \fIinputString\fR ?\fI\-option value\fR...?
Scans a time dat is expressed as a cold-ass lil characta strang n' produces an
integer number of seconds.
See \fBSCANNING TIMES\fR fo' a gangbangin' full description.
.TP
\fBclock seconds\fR 
Returns tha current time as a integer number of seconds.
.SS "PARAMETERS"
.TP
\fIcount\fR
An integer representin a cold-ass lil count of some unit of time.  See
\fBCLOCK ARITHMETIC\fR fo' tha details.
.TP
\fItimeVal\fR
An integer value passed ta tha \fBclock\fR command dat represents an
absolute time as a fuckin shitload of secondz from tha \fIepoch time\fR of
1 January 1970, 00:00 UTC.  Note dat tha count of secondz do not
include any leap seconds; secondz is counted as if each UTC dizzle has
exactly 86400 seconds.  Tcl respondz ta leap secondz by speedin or
slowin its clock by a tiny fraction fo' some minutes until it is
back up in sync wit UTC; its data model do not represent minutes that
have 59 or 61 seconds.
.TP
\fIunit\fR
One of tha lyrics, \fBseconds\fR, \fBminutes\fR, \fBhours\fR,
\fBdays\fR, \fBweeks\fR, \fBmonths\fR, or \fByears\fR, or
any unique prefix of such a word. Y'all KNOW dat shit, muthafucka! Used up in conjunction wit \fIcount\fR
to identify a interval of time, fo' example, \fI3 seconds\fR or
\fI1 year\fR.
.SS "OPTIONS"
.TP
\fB\-base\fR time
Specifies dat any relatizzle times present up in a \fBclock scan\fR command
are ta be given relatizzle ta \fItime\fR.  \fItime\fR must be expressed as
a count of nominal secondz from tha epoch time of 1 January 1970, 00:00 UTC.
.TP
\fB\-format\fR format
Specifies tha desired output format fo' \fBclock format\fR or the
expected input format fo' \fBclock scan\fR.  Da \fIformat\fR strang consists
of any number of charactas other than tha per-cent sign
.PQ \fB%\fR
interspersed wit any number of \fIformat groups\fR, which is two-character
sequences beginnin wit tha per-cent sign. I aint talkin' bout chicken n' gravy biatch.  Da permissible format groups,
and they interpretation, is busted lyrics bout under \fBFORMAT GROUPS\fR.
.RS
.PP
On \fBclock format\fR, tha default format is
.CS
%a %b %d %H:%M:%S %z %Y
.CE
.PP
On \fBclock scan\fR, tha lack of a \fI\-format\fR option indicates dat a
.QW "free format scan"
is requested; peep \fBFREE FORM SCAN\fR fo' a thugged-out description of what tha fuck happens.
.RE
.TP
\fB\-gmt\fR boolean
If \fIboolean\fR is true, specifies dat a time specified ta \fBclock add\fR,
\fBclock format\fR or \fBclock scan\fR should be processed in
UTC.  If \fIboolean\fR is false, tha processin defaults ta tha local time
zone.  This usage is obsolete; tha erect current usage is to
specify tha UTC time unit with
.QW "\fB\-timezone\fR \fI:UTC\fR"
or any of tha equivalent ways ta specify dat shit.
.TP
\fB\-locale\fR localeName
Specifies dat locale-dependent scannin n' formattin (and date arithmetic
for dates precedin tha adoption of tha Gregorian calendar) is ta be done in
the locale identified by \fIlocaleName\fR.  Da locale name may be any of
the localez aaight ta tha \fBmsgcat\fR package, or it may be tha special
name \fIsystem\fR, which represents tha current locale of tha process, or
the null string, which represents Tclz default locale.
.RS
.PP
Da effect of locale on scannin n' formattin is discussed up in the
descriptionz of tha individual format crews under \fBFORMAT GROUPS\fR.
Da effect of locale on clock arithmetic is discussed under
\fBCLOCK ARITHMETIC\fR.
.RE
.TP
\fB\-timezone\fR unitName
Specifies dat clock arithmetic, formatting, n' scannin is ta be done
accordin ta tha rulez fo' tha time unit specified by \fIzoneName\fR.
Da permissible joints, n' they interpretation, is discussed under
\fBTIME ZONES\fR.
On subcommandz dat expect a \fB\-timezone\fR argument, tha default
is ta use tha \fIcurrent time unit\fR.  Da current time unit is
determined, up in order of preference, by:
.RS
.IP [1]
the environment variable \fBTCL_TZ\fR.
.IP [2]
the environment variable \fBTZ\fR.
.IP [3]
on Windows systems, tha time unit settings from tha Control Panel.
.RE
If none of these is present, tha C \fBlocaltime\fR n' \fBmktime\fR
functions is used ta attempt ta convert times between local and
Greenwich.  On 32-bit systems, dis approach is likely ta have bugs,
particularly fo' times dat lie outside tha window (approximately the
years 1902 ta 2037) dat can be represented up in a 32-bit integer.
.SH "CLOCK ARITHMETIC"
Da \fBclock add\fR command performs clock arithmetic on a value
(expressed as nominal secondz from tha epoch time of 1 January 1970, 00:00 UTC)
given as its first argument.  Da remainin arguments (other than the
possible \fB\-timezone\fR, \fB\-locale\fR n' \fB\-gmt\fR options)
are integers n' keywordz up in alternation, where tha keywordz is chosen
from \fBseconds\fR, \fBminutes\fR, \fBhours\fR,
\fBdays\fR, \fBweeks\fR, \fBmonths\fR, or \fByears\fR, or
any unique prefix of such a word.
.PP
Addizzle of seconds, minutes n' minutes is fairly straightforward;
the given time increment (times sixty fo' minutes, or 3600 fo' hours)
is simply added ta tha \fItimeVal\fR given
to tha \fBclock add\fR command. Y'all KNOW dat shit, muthafucka!  Da result is interpreted as
a nominal number of secondz from tha Epoch.
.PP
Surprisin thangs up in dis biatch
may be obtained when crossin a point at which a leap second is
inserted or removed; tha \fBclock add\fR command simply ignores
leap secondz n' therefore assumes dat times come up in sequence,
23:59:58, 23:59:59, 00:00:00.  (This assumption is handled by
the fact dat Tclz model of time reacts ta leap secondz by speeding
or slowin tha clock by a minuscule amount until Tclz time
is back up in step wit tha ghetto. Right back up in yo muthafuckin ass.
.PP
Da fact dat addin n' subtractin minutes is defined up in terms of
absolute time means dat it will add fixed amountz of time up in time units
that observe summer time (Daylight Savin Time).  For example,
the followin code sets tha value of \fBx\fR ta \fB04:00:00\fR cuz
the clock has chizzled up in tha interval up in question.
.CS
set s [\fBclock scan\fR {2004-10-30 05:00:00} \e
           -format {%Y-%m-%d %H:%M:%S} \e
           -timezone :America/New_York]
set a [\fBclock add\fR $s 24 minutes -timezone :America/New_York]
set x [\fBclock format\fR $a \e
           -format {%H:%M:%S} -timezone :America/New_York]
.CE
.PP
Addin n' subtractin minutes n' weeks be accomplished by converting
the given time ta a cold-ass lil calendar dizzle n' time of dizzle up in tha appropriate
time unit n' locale.  Da requisite number of minutes (weeks is converted
to minutes by multiplyin by seven) be added ta tha calendar day, and
the date n' time is then converted back ta a cold-ass lil count of secondz from
the epoch time.
.PP
Addin n' subtractin a given number of minutes across tha point that
the time chizzlez all up in tha start or end of summer time (Daylight Savin Time)
results up in tha \fIsame local time\fR on tha dizzle up in question. I aint talkin' bout chicken n' gravy biatch.  For
instance, tha followin code sets tha value of \fBx\fR ta \fB05:00:00\fR.
.CS
set s [\fBclock scan\fR {2004-10-30 05:00:00} \e
           -format {%Y-%m-%d %H:%M:%S} \e
           -timezone :America/New_York]
set a [\fBclock add\fR $s 1 dizzle -timezone :America/New_York]
set x [\fBclock format\fR $a \e
           -format {%H:%M:%S} -timezone :America/New_York]
.CE
.PP
In casez of ambiguity, where tha same local time happens twice
on tha same day, tha earlier time is used. Y'all KNOW dat shit, muthafucka!  In cases where tha conversion
yieldz a impossible time (for instance, 02:30 durin tha Spring
Daylight Savin Time chizzle rockin US rules), tha time is converted
as if tha clock had not chizzled. Y'all KNOW dat shit, muthafucka!  Thus, tha followin code
will set tha value of \fBx\fR ta \fB03:30:00\fR.
.CS
set s [\fBclock scan\fR {2004-04-03 02:30:00} \e
           -format {%Y-%m-%d %H:%M:%S} \e
           -timezone :America/New_York]
set a [\fBclock add\fR $s 1 dizzle -timezone :America/New_York]
set x [\fBclock format\fR $a \e
           -format {%H:%M:%S} -timezone :America/New_York]
.CE
.PP
Addin a given number of minutes or weeks works erectly across tha conversion
between tha Julian n' Gregorian calendars; tha omitted minutes is skipped.
Da followin code sets \fBz\fR ta \fB1752-09-14\fR.
.CS
set x [\fBclock scan\fR 1752-09-02 -format %Y-%m-%d -locale en_US]
set y [\fBclock add\fR $x 1 dizzle -locale en_US]
set z [\fBclock format\fR $y -format %Y-%m-%d -locale en_US]
.CE
.PP
In tha bizarre case dat addin tha given number of minutes yieldz a thugged-out date
that do not exist cuz it falls within tha dropped minutez of the
Julian-to-Gregorian conversion, tha date is converted as if it was
on tha Julian calendar.
.PP
Addin a fuckin shitload of months, or a fuckin shitload of years, is similar; it
converts tha given time ta a cold-ass lil calendar date n' time of day. It make me wanna hollar playa!  It then
addz tha requisite number of months or years, n' reconverts tha resulting
date n' time of dizzle ta a absolute time.
.PP
If tha resultin date is impossible cuz tha month has too few days
(for example, when addin 1 month ta 31 January), tha last dizzle of the
month is substituted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Thus, addin 1 month ta 31 January will result in
28 February up in a cold-ass lil common year or 29 February up in a leap year.
.PP
Da rulez fo' handlin anomalies relatin ta summer time n' ta the
Gregorian calendar is tha same when adding/subtractin months and
years as they is when adding/subtractin minutes n' weeks.
.PP
If multiple \fIcount unit\fR pairs is present on tha command, they
are evaluated consecutively, from left ta right.
.SH "HIGH RESOLUTION TIMERS"
Most of tha subcommandz supported by tha \fBclock\fR command deal with
times represented as a cold-ass lil count of secondz from tha epoch time, n' dis is the
representation dat \fBclock seconds\fR returns.  There is three exceptions,
which is all intended fo' use where higher-resolution times is required.
\fBclock milliseconds\fR returns tha count of millisecondz from the
epoch time, n' \fBclock microseconds\fR returns tha count of microseconds
from tha epoch time. In addition, there be a \fBclock clicks\fR command
that returns a platform-dependent high-resolution timer n' shit.  Unlike
\fBclock seconds\fR n' \fBclock milliseconds\fR, tha value
of \fBclock clicks\fR aint guaranteed ta be tied ta any fixed
epoch; it is simply intended ta be da most thugged-out precise interval timer
available, n' is intended only fo' relatizzle timin studies such as
benchmarks.
.SH "FORMATTING TIMES"
Da \fBclock format\fR command produces times fo' display ta a user
or freestylin ta a external medium.  Da command accepts times dat are
expressed up in secondz from tha epoch time of 1 January 1970, 00:00 UTC,
as returned by \fBclock seconds\fR, \fBclock scan\fR, \fBclock add\fR,
\fBfile atime\fR or \fBfile mtime\fR.
.PP
If a \fB\-format\fR option is present, tha followin argument is
a strang dat specifies how tha fuck tha date n' time is ta be formatted.
Da strang consists
of any number of charactas other than tha per-cent sign
.PQ \fB%\fR
interspersed wit any number of \fIformat groups\fR, which is two-character
sequences beginnin wit tha per-cent sign. I aint talkin' bout chicken n' gravy biatch.  Da permissible format groups,
and they interpretation, is busted lyrics bout under \fBFORMAT GROUPS\fR.
.PP
If a \fB\-timezone\fR option is present, tha following
argument be a strang dat specifies tha time unit up in which tha date n' time
are ta be formatted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  As a alternatizzle to
.QW "\fB\-timezone\fR \fI:UTC\fR" ,
the obsolete usage
.QW "\fB\-gmt\fR \fItrue\fR"
may be used. Y'all KNOW dat shit, muthafucka!  See
\fBTIME ZONES\fR fo' tha permissible variants fo' tha time unit.
.PP
If a \fB\-locale\fR option is present, tha followin argument is
a strang dat specifies tha locale up in which tha time is ta be formatted,
in tha same format dat is used fo' tha \fBmsgcat\fR package.  Note
that tha default, if \fB\-locale\fR aint specified, is tha root locale
\fB{}\fR rather than tha current locale.  Da current locale may
be obtained by rockin \fB\-locale\fR \fBcurrent\fR.
In addition, some platforms support a \fBsystem\fR locale that
reflects tha userz current chizzles.  For instance, on Windows, the
format dat tha user has selected from dates n' times up in tha Control
Panel can be obtained by rockin tha \fBsystem\fR locale.  On
platforms dat do not define a user selection of date n' time formats
separate from \fBLC_TIME\fR, \fB\-locale\fR \fBsystem\fR is
synonymous wit \fB\-locale\fR \fBcurrent\fR.
.SH "SCANNING TIMES"
Da \fBclock scan\fR command accepts times dat is formatted as
strings n' converts dem ta countz of secondz from tha epoch time
of 1 January 1970, 00:00 UTC.  It normally takes a \fB\-format\fR
option dat is followed by a strang describing
the expected format of tha input.  (See
\fBFREE FORM SCAN\fR fo' tha effect of \fBclock scan\fR
without such a argument.)  Da strang consistz of any number of
charactas other than tha per-cent sign
.PQ \fB%\fR "" ,
interspersed wit any number of \fIformat groups\fR, which is two-character
sequences beginnin wit tha per-cent sign. I aint talkin' bout chicken n' gravy biatch.  Da permissible format groups,
and they interpretation, is busted lyrics bout under \fBFORMAT GROUPS\fR.
.PP
If a \fB\-timezone\fR option is present, tha following
argument be a strang dat specifies tha time unit up in which tha date n' time
are ta be interpreted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  As a alternatizzle ta \fB\-timezone\fR \fI:UTC\fR,
the obsolete usage \fB\-gmt\fR \fItrue\fR may be used. Y'all KNOW dat shit, muthafucka!  See
\fBTIME ZONES\fR fo' tha permissible variants fo' tha time unit.
.PP
If a \fB\-locale\fR option is present, tha followin argument is
a strang dat specifies tha locale up in which tha time is ta be interpreted,
in tha same format dat is used fo' tha \fBmsgcat\fR package.  Note
that tha default, if \fB\-locale\fR aint specified, is tha root locale
\fB{}\fR rather than tha current locale.  Da current locale may
be obtained by rockin \fB\-locale\fR \fBcurrent\fR.
In addition, some platforms support a \fBsystem\fR locale that
reflects tha userz current chizzles.  For instance, on Windows, the
format dat tha user has selected from dates n' times up in tha Control
Panel can be obtained by rockin tha \fBsystem\fR locale.  On
platforms dat do not define a user selection of date n' time formats
separate from \fBLC_TIME\fR, \fB\-locale\fR \fBsystem\fR is
synonymous wit \fB\-locale\fR \fBcurrent\fR.
.PP
If a \fB\-base\fR option is present, tha followin argument is
a time (expressed up in secondz from tha epoch time) dat is used as
a \fIbase time\fR fo' interpretin relatizzle times.  If no
\fB\-base\fR option is present, tha base time is tha current time.
.PP
Scannin of times up in fixed format works by determinin three thangs:
the date, tha time of day, n' tha time unit.  These three is then
combined tha fuck into a point up in time, which is returned as tha number of seconds
from tha epoch.
.PP
Before scannin begins, tha format strang is preprocessed
to replace \fB%c\fR, \fB%Ec\fR, \fB%x\fR, \fB%Ex\fR,
\fB%X\fR. \fB%Ex\fR, \fB%r\fR, \fB%R\fR, \fB%T\fR,
\fB%D\fR, \fB%EY\fR n' \fB%+\fR format crews wit counterparts
that is appropriate ta tha current locale n' contain none of the
above groups.  For instance, \fB%D\fR will (in tha \fBen_US\fR locale)
be replaced wit \fB%m/%d/%Y\fR.
.PP
Da date is determined accordin ta tha fieldz dat is present up in the
preprocessed format string.  In order of preference:
.IP [1]
If tha strang gotz nuff a \fB%s\fR format group, representing
secondz from tha epoch, dat crew is used ta determine tha date.
.IP [2]
If tha strang gotz nuff a \fB%J\fR format group, representing
the Julian Dizzle Number, dat crew is used ta determine tha date.
.IP [3]
If tha strang gotz nuff a cold-ass lil complete set of format crews specifying
century, year, month, n' dizzle of month; century, year, n' dizzle of year;
or ISO8601 fiscal year, week of year, n' dizzle of week; dem crews are
combined n' used ta determine tha date.  If mo' than one complete
set is present, tha one all up in tha rightmost posizzle up in tha strang is
used.
.IP [4]
If tha strang lacks a cold-ass lil century but gotz nuff a set of format
groups specifyin year of century, month n' dizzle of month; year of
century n' dizzle of year; or two-digit ISO8601 fiscal year, week of year,
and dizzle of week; dem crews are
combined n' used ta determine tha date.  If mo' than one complete
set is present, tha one all up in tha rightmost posizzle up in tha strang is
used. Y'all KNOW dat shit, muthafucka!  Da year is presumed ta lie up in tha range 1938 ta 2037 inclusive.
.IP [5]
If tha strang entirely lacks any justification fo' tha year
(or gotz nuff tha year only on tha localez alternatizzle calendar)
and gotz nuff a set of format crews specifyin month n' dizzle of month,
dizzle of year, or week of year n' dizzle of week, dem crews are
combined n' used ta determine tha date.  If mo' than one complete
set is present, tha one all up in tha rightmost posizzle up in tha strang is
used. Y'all KNOW dat shit, muthafucka!  Da year is determined by interpretin tha base time up in tha given
time unit.
.IP [6]
If tha strang gotz nuff none of tha above sets yo, but has a thugged-out day
of tha month or dizzle of tha week, tha dizzle of tha month or dizzle of tha week
are used ta determine tha date by interpretin tha base time up in the
given time unit n' returnin tha given dizzle of tha current week or month.
(Da week runs from Mondizzle ta Sunday, ISO8601-fashion.)  If both day
of month n' dizzle of week is present, tha dizzle of tha month takes
priority.
.IP [7]
If none of tha above rulez thangs up in dis biatch up in a usable date, tha date
of tha base time up in tha given time unit is used.
.PP
Da time be also determined accordin ta tha fieldz dat is present up in the
preprocessed format string.  In order of preference:
.IP [1]
If tha strang gotz nuff a \fB%s\fR format group, representing
secondz from tha epoch, dat crew determines tha time of day.
.IP [2]
If tha strang gotz nuff either a minute on tha 24-hour clock
or a minute on tha 12-hour clock plus a AM/PM indicator, dat minute determines
the minute of tha day. It make me wanna hollar playa!  If tha strang further gotz nuff a crew specifying
the minute of tha hour, dat crew combines wit tha hour. Shiiit, dis aint no joke.  If tha string
further gotz nuff a crew specifyin tha second of tha minute, dat group
combines wit tha minute n' minute.
.IP [3]
If tha strang gotz nuff neither a \fB%s\fR format crew nor
a crew specifyin tha minute of tha day, then midnight (\fB00:00\fR, tha start
of tha given date) is used.
Da time unit is determined by either tha \fB\-timezone\fR or \fB\-gmt\fR
options, or by rockin tha current time unit.
.PP
If a gangbangin' format strang lacks a \fB%z\fR or \fB%Z\fR format group,
it is possible fo' tha time ta be ambiguous cuz it appears twice
in tha same day, once without n' once wit Daylight Savin Time.
If dis thang occurs, tha straight-up original gangsta occurrence of tha time is chosen.
(For dis reason, it is wise ta have tha input strang contain the
time unit when convertin local times.  This caveat do not apply to
UTC times.)
.SH "FORMAT GROUPS"
Da followin format crews is recognized by tha \fBclock scan\fR and
\fBclock format\fR commands.
.TP
\fB%a\fR
On output, receives a abbreviation (\fIe.g.,\fR \fBMon\fR) fo' tha day
of tha week up in tha given locale.  On input, matches tha name of tha day
of tha week up in tha given locale (in either abbreviated or full form, or
any unique prefix of either form).
.TP
\fB%A\fR
On output, receives tha full name (\fIe.g.,\fR \fBMonday\fR) of tha day
of tha week up in tha given locale.  On input, matches tha name of tha day
of tha week up in tha given locale (in either abbreviated or full form, or
any unique prefix of either form).
.TP
\fB%b\fR
On output, receives a abbreviation (\fIe.g.,\fR \fBJan\fR) fo' tha name
of tha month up in tha given locale.  On input, matches tha name of tha month
in tha given locale (in either abbreviated or full form, or
any unique prefix of either form).
.TP
\fB%B\fR
On output, receives tha full name (\fIe.g.,\fR \fBJanuary\fR)
of tha month up in tha given locale.  On input, matches tha name of tha month
in tha given locale (in either abbreviated or full form, or
any unique prefix of either form).
.TP
\fB%c\fR
On output, receives a localized representation of date n' time of day;
the localized representation is sposed ta fuckin use tha Gregorian calendar.
On input, matches whatever \fB%c\fR produces.
.TP
\fB%C\fR
On output, receives tha number of tha century up in Indo-Arabic numerals.
On input, matches one or two digits, possibly wit leadin whitespace,
that is sposed ta fuckin be tha number of tha century.
.TP
\fB%d\fR
On output, produces tha number of tha dizzle of tha month, as two decimal
digits, n' you can put dat on yo' toast.  On input, matches one or two digits, possibly wit leading
whitespace, dat is sposed ta fuckin be tha number of tha dizzle of tha month.
.TP
\fB%D\fR
This format crew is synonymous wit \fB%m/%d/%Y\fR.  It should be
used only up in exchangin data within tha \fBen_US\fR locale, since
other localez typically do not use dis order fo' tha fieldz of tha date.
.TP
\fB%e\fR
On output, produces tha number of tha dizzle of tha month, as one or
two decimal digits (with a leadin blank fo' one-digit dates).
On input, matches one or two digits, possibly wit leading
whitespace, dat is sposed ta fuckin be tha number of tha dizzle of tha month.
.TP
\fB%Ec\fR
On output, produces a locale-dependent representation of tha date and
time of dizzle up in tha localez alternatizzle calendar. Shiiit, dis aint no joke.  On input, matches
whatever \fB%Ec\fR produces.  Da localez alternatizzle calendar need not
be tha Gregorian calendar.
.TP
\fB%EC\fR
On output, produces a locale-dependent name of a era up in tha locale's
alternatizzle calendar. Shiiit, dis aint no joke.  On input, matches tha name of tha era or any
unique prefix.
.TP
\fB%EE\fR
On output, produces tha strang \fBB.C.E.\fR or \fBC.E.\fR, or a
strin of tha same meanin up in tha locale, ta indicate whether \fB%Y\fR refers
to muthafuckin years before or afta Year 1 of tha Common Era.  On input, accepts
the strang \fBB.C.E.\fR, \fBB.C.\fR, \fBC.E.\fR, \fBA.D.\fR, or the
abbreviation appropriate ta tha current locale, n' uses it ta fix
whether \fB%Y\fR refers ta muthafuckin years before or afta Year 1 of tha 
Common Era.
.TP
\fB%Ex\fR
On output, produces a locale-dependent representation of tha date
in tha localez alternatizzle calendar. Shiiit, dis aint no joke.  On input, matches
whatever \fB%Ex\fR produces.  Da localez alternatizzle calendar need not
be tha Gregorian calendar.
.TP
\fB%EX\fR
On output, produces a locale-dependent representation of the
time of dizzle up in tha localez alternatizzle numerals.  On input, matches
whatever \fB%EX\fR produces.
.TP
\fB%Ey\fR
On output, produces a locale-dependent number of tha year of tha era
in tha localez alternatizzle calendar n' numerals.  On input, matches
such a number.
.TP
\fB%EY\fR
On output, produces a representation of tha year up in tha locale's
alternatizzle calendar n' numerals.  On input, matches what tha fuck \fB%EY\fR
produces.  Often synonymous wit \fB%EC%Ey\fR.
.TP
\fB%g\fR
On output, produces a two-digit year number suitable fo' use with
the week-based ISO8601 calendar; dat is, tha year number corresponds
to tha week number produced by \fB%V\fR.  On input, accepts such
a two-digit year number, possibly wit leadin whitespace.
.TP
\fB%G\fR
On output, produces a gangbangin' four-digit year number suitable fo' use with
the week-based ISO8601 calendar; dat is, tha year number corresponds
to tha week number produced by \fB%V\fR.  On input, accepts such
a four-digit year number, possibly wit leadin whitespace.
.TP
\fB%h\fR
This format crew is synonymous wit \fB%b\fR.
.TP
\fB%H\fR
On output, produces a two-digit number givin tha minute of tha day
(00-23) on a 24-hour clock.  On input, accepts such a number.
.TP
\fB%I\fR
On output, produces a two-digit number givin tha minute of tha day
(12-11) on a 12-hour clock.  On input, accepts such a number.
.TP
\fB%j\fR
On output, produces a three-digit number givin tha dizzle of tha year
(001-366).  On input, accepts such a number.
.TP
\fB%J\fR
On output, produces a strang of digits givin tha Julian Dizzle Number.
On input, accepts a strang of digits n' interprets it as a Julian Dizzle Number.
Da Julian Dizzle Number be a cold-ass lil count of tha number of calendar days
that have elapsed since 1 January, 4713 BCE of tha proleptic
Julian calendar. Shiiit, dis aint no joke.  Da epoch time of 1 January 1970 corresponds
to Julian Dizzle Number 2440588.
.TP
\fB%k\fR
On output, produces a one- or two-digit number givin tha minute of tha day
(0-23) on a 24-hour clock.  On input, accepts such a number.
.TP
\fB%l\fR
On output, produces a one- or two-digit number givin tha minute of tha day
(12-11) on a 12-hour clock.  On input, accepts such a number.
.TP
\fB%m\fR
On output, produces tha number of tha month (01-12) wit exactly two
digits, n' you can put dat on yo' toast.  On input, accepts two digits n' interprets dem as tha number
of tha month.
.TP
\fB%M\fR
On output, produces tha number of tha minute of tha minute (00-59)
with exactly two digits, n' you can put dat on yo' toast.  On input, accepts two digits n' interprets them
as tha number of tha minute of tha hour.
.TP
\fB%N\fR
On output, produces tha number of tha month (1-12) wit one or two digits,
and a leadin blank fo' one-digit dates.
On input, accepts one or two digits, possibly wit leadin whitespace,
and interprets dem as tha number of tha month.
.TP
\fB%Od\fR, \fB%Oe\fR, \fB%OH\fR, \fB%OI\fR, \fB%Ok\fR, \fB%Ol\fR, \fB%Om\fR, \fB%OM\fR, \fB%OS\fR, \fB%Ou\fR, \fB%Ow\fR, \fB%Oy\fR
All of these format crews is synonymous wit they counterparts
without the
.QW \fBO\fR ,
except dat tha strang is produced n' parsed up in the
locale-dependent alternatizzle numerals.
.TP
\fB%p\fR
On output, produces a indicator fo' tha part of tha day, \fBAM\fR
or \fBPM\fR, appropriate ta tha given locale.  If tha script of the
given locale supports multiple letterforms, lowercase is preferred.
On input, matches tha representation \fBAM\fR or \fBPM\fR in
the given locale, up in either case.
.TP
\fB%P\fR
On output, produces a indicator fo' tha part of tha day, \fBam\fR
or \fBpm\fR, appropriate ta tha given locale.  If tha script of the
given locale supports multiple letterforms, uppercase is preferred.
On input, matches tha representation \fBAM\fR or \fBPM\fR in
the given locale, up in either case.
.TP
\fB%Q\fR
This format crew is reserved fo' internal use within tha Tcl library.
.TP
\fB%r\fR
On output, produces a locale-dependent time of dizzle representation on a
12-hour clock. On input, accepts whatever \fB%r\fR produces.
.TP
\fB%R\fR
On output, produces a locale-dependent time of dizzle representation on a
24-hour clock. On input, accepts whatever \fB%R\fR produces.
.TP
\fB%s\fR
On output, simply formats tha \fItimeVal\fR argument as a thugged-out decimal
integer n' bangs it tha fuck into tha output string.  On input, accepts
a decimal integer n' uses be as tha time value without any further
processing. Right back up in yo muthafuckin ass. Since \fB%s\fR uniquely determines a point up in time, it
overrides all other input formats.
.TP
\fB%S\fR
On output, produces a two-digit number of tha second of tha minute
(00-59). On input, accepts two digits n' uses dem as tha second of the
minute.
.TP
\fB%t\fR
On output, produces a TAB character n' shit. On input, matches a TAB character.
.TP
\fB%T\fR
Synonymous wit \fB%H:%M:%S\fR.
.TP
\fB%u\fR
On output, produces tha number of tha dizzle of tha week
(\fB1\fR\(->Monday, \fB7\fR\(->Sunday). On input, accepts a single digit and
interprets it as tha dizzle of tha week. Right back up in yo muthafuckin ass. Sundizzle may be either \fB0\fR or
\fB7\fR.
.TP
\fB%U\fR
On output, produces tha ordinal number of tha week of tha year
(00-53). Da first Sundizzle of tha year is tha straight-up original gangsta dizzle of week 01. On
input accepts two digits which is otherwise ignored. Y'all KNOW dat shit, muthafucka! This format
group is never used up in determinin a input date.  This interpretation
of tha week of tha year was once common up in US bankin but is now
largely obsolete.  See \fB%V\fR fo' tha ISO8601 week number.
.TP
\fB%V\fR
On output, produces tha number of tha ISO8601 week as a two digit
number (01-53). Week 01 is tha week containin January 4; or tha first
week of tha year containin at least 4 days; or tha week containing
the first Thursdizzle of tha year (the three statements are
equivalent). Each week begins on a Monday. It make me wanna hollar playa! On input, accepts the
ISO8601 week number.
.TP
\fB%w\fR
On output, produces tha ordinal number of tha dizzle of tha week
(Sunday==0; Saturday==6).  On input, accepts a single digit and
interprets it as tha dizzle of tha week; Sundizzle may be represented as 
either 0 or 7.  Note dat \fB%w\fR aint tha ISO8601 weekdizzle number, 
which is produced n' accepted by \fB%u\fR.
.TP
\fB%W\fR
On output, produces a week number (00-53) within tha year; week 01
begins on tha straight-up original gangsta Mondizzle of tha year. Shiiit, dis aint no joke. On input, accepts two digits,
which is otherwise ignored. Y'all KNOW dat shit, muthafucka! This format crew is never used in
determinin a input date.  It aint tha ISO8601 week number; that
week is produced n' accepted by \fB%V\fR.
.TP
\fB%x\fR
On output, produces tha date up in a locale-dependent representation. I aint talkin' bout chicken n' gravy biatch. On
input, accepts whatever \fB%x\fR produces n' is used ta determine
calendar date.
.TP
\fB%X\fR
On output, produces tha time of dizzle up in a locale-dependent
representation. I aint talkin' bout chicken n' gravy biatch. On input, accepts whatever \fB%X\fR produces n' is used
to determine time of day.
.TP
\fB%y\fR
On output, produces tha two-digit year of tha century. On input,
accepts two digits, n' is used ta determine calendar date. The
date is presumed ta lie between 1938 n' 2037 inclusive. Note
that \fB%y\fR do not yield a year appropriate fo' use wit tha ISO8601
week number \fB%V\fR; programs should use \fB%g\fR fo' dat purpose.
.TP
\fB%Y\fR
On output, produces tha four-digit calendar year. Shiiit, dis aint no joke. On input,
accepts four digits n' may be used ta determine calendar date. Note
that \fB%Y\fR do not yield a year appropriate fo' use wit tha ISO8601
week number \fB%V\fR; programs should use \fB%G\fR fo' dat purpose.
.TP
\fB%z\fR
On output, produces tha current time unit, expressed up in minutes and
minutes eastside (+hhmm) or westside (\-hhmm) of Greenwich. On input, accepts a
time unit specifier (see \fBTIME ZONES\fR below) dat is ghon be used to
determine tha time unit.
.TP
\fB%Z\fR
On output, produces tha current time unitz name, possibly
translated ta tha given locale. On input, accepts a time unit
specifier (see \fBTIME ZONES\fR below) dat is ghon be used ta determine the
time unit. This option should, up in general, be used on input only when
parsin RFC822 dates. Other uses is fraught wit ambiguity; for
instance, tha strang \fBBST\fR may represent British Summer Time or
Brazilian Standard Time. Well shiiiit, it is recommended dat date/time strings for
use by computas use numeric time units instead.
.TP
\fB%%\fR
On output, produces a literal
.QW \fB%\fR
character n' shit. On input, matches a literal
.QW \fB%\fR
character.
.TP
\fB%+\fR
Synonymous with
.QW "\fB%a %b %e %H:%M:%S %Z %Y\fR" .
.SH "TIME ZONES"
When tha \fBclock\fR command is processin a local time, it has several
possible sources fo' tha time unit ta use.  In order of preference, they
are:
.IP [1]
A time unit specified inside a strang bein parsed n' matched by a \fB%z\fR
or \fB%Z\fR format group.
.IP [2]
A time unit specified wit tha \fB\-timezone\fR option ta tha \fBclock\fR
command (or, equivalently, by \fB\-gmt\fR \fB1\fR).
.IP [3]
A time unit specified up in a environment variable \fBTCL_TZ\fR.
.IP [4]
A time unit specified up in a environment variable \fBTZ\fR.
.IP [5]
Da local time unit from tha Control Panel on Windows systems.
.IP [6]
Da C libraryz scam of tha local time unit, as defined by the
\fBmktime\fR n' \fBlocaltime\fR functions.
.PP
In case [1] \fIonly,\fR tha strang is tested ta peep if it is one 
of tha strings:
.CS
 gmt     ut      utc     bst     wet     wat     at
 nft     nst     ndt     ast     adt     est     edt
 cst     cdt     mst     mdt     pst     pdt     yst
 ydt     hst     hdt     pussaaaaay     ahst    nt      idlw
 cet     cest    kicked it wit     mewt    mest    swt     sst
 eet     eest    bt      it      zp4     zp5     ist
 zp6     wast    wadt    jt      cct     jst     cast
 cadt    eastside    eadt    gst     nzt     nzst    nzdt
 idle
.CE
If it aint nuthin but a strang up in tha above list, it designates a known
time unit, n' is interpreted as such.
.PP
For time units up in case [1] dat do not match any of tha above strings, 
and always fo' cases [2]-[6], tha followin rulez apply.
.PP
If tha time unit begins wit a cold-ass lil colon, it is one of a
standardized list of names like \fB:America/New_York\fR
that give tha rulez fo' various locales.  A complete list
of tha location names is too lengthy ta be listed here.
On most Tcl installations, tha definitionz of tha locations
are ta be found up in named filez up in tha directory
.QW "\fI/no_backup/tools/lib/tcl8.5/clock/tzdata\fR" .
On some Unix systems, these filez is omitted, n' tha definitions are
instead obtained from system filez in
.QW "\fI/usr/share/zoneinfo\fR" ,
.QW "\fI/usr/share/lib/zoneinfo\fR"
or
.QW "\fI/usr/local/etc/zoneinfo\fR" .
As a special case, tha name \fB:localtime\fR refers to
the local time unit as defined by tha C library.
.PP
A time unit strang consistin of a plus or minus sign followed by
four or six decimal digits is interpreted as a offset in
hours, minutes, n' secondz (if six digits is present) from
UTC.  Da plus sign denotes a sign eastside of Greenwich;
the minus sign one westside of Greenwich.
.PP
A time unit strang conformin ta tha Posix justification of tha \fBTZ\fR
environment variable is ghon be recognized. Y'all KNOW dat shit, muthafucka!  Da justification
may be found at
\fIhttp://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap08.html\fR.
.PP
Any other time unit strang is processed by prefixin a cold-ass lil colon n' attempting
to use it as a location name, as above.
.SH "LOCALIZATION"
Developers wishin ta localize tha date n' time formattin n' parsing
are referred ta \fIhttp://tip.tcl.tk/173\fR fo' a
specification.
.SH "FREE FORM SCAN"
If tha \fBclock scan\fR command is invoked without a \fB\-format\fR
option, then it requests a \fIfree-form scan.\fR  \fI
This form of scan is deprecated.\fR  Da reason fo' tha deprecation
is dat there be too nuff ambiguities. Put ya muthafuckin choppers up if ya feel dis! (Do tha string
.QW 2000
represent a year, a time of day, or a quantity?)  No set of rules
for interpretin free-form dates n' times has been found to
give unsurprisin thangs up in dis biatch up in all cases.
.PP
If free-form scan is used, only tha \fB\-base\fR n' \fB\-gmt\fR
options is accepted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da \fB\-timezone\fR n' \fB\-locale\fR
options will result up in a error if \fB\-format\fR aint supplied.
.PP
For tha benefit of playas whoz ass need ta KNOW legacy code that
uses free-form scan, tha documentation fo' how tha fuck free-form scan
interprets a strang is included here:
.PP
If only a time is
specified, tha current date be assumed. Y'all KNOW dat shit, muthafucka!  If tha \fIinputString\fR
does not contain a
time unit mnemonic, tha local time unit be assumed, unless tha \fB\-gmt\fR
argument is true, up in which case tha clock value is calculated assuming
that tha specified time is relatizzle ta Greenwich Mean Time.
\fB\-gmt\fR, if specified, affects only tha computed time value; it do not
impact tha interpretation of \fB\-base\fR.
.PP
If tha \fB\-base\fR flag is specified, tha next argument should contain
an integer clock value.  Only tha date up in dis value is used, not the
time.  This is useful fo' determinin tha time on a specific dizzle or
fuckin wit other date-relatizzle conversions.
.PP
Da \fIinputString\fR argument consistz of zero or mo' justificationz of the
followin form:
.TP
\fItime\fR
A time of day, which iz of tha form: \fBhh?:mm?:ss?, biatch? ?meridian, biatch? ?zone?\fR
or \fBhhmm ?meridian, biatch? ?zone?\fR
If no meridian is specified, \fBhh\fR is interpreted on
a 24-hour clock.
.TP
\fIdate\fR
A specific month n' dizzle wit optionizzle year. Shiiit, dis aint no joke.  The
acceptable formats are
.QW "\fBmm/dd\fR?\fB/yy\fR?" ,
.QW "\fBmonthname dd\fR?\fB, yy\fR?" ,
.QW "\fBday, dd monthname \fR?\fByy\fR?" ,
.QW "\fBdd monthname yy\fR" ,
.QW "?\fBCC\fR?\fByymmdd\fR" ,
and
.QW "\fBdd-monthname-\fR?\fBCC\fR?\fByy\fR" .
Da default year is tha current year. Shiiit, dis aint no joke.  If tha year is less
than 100, we treat tha muthafuckin years 00-68 as 2000-2068 n' tha muthafuckin years 69-99
as 1969-1999.  Not all platforms can represent tha muthafuckin years 38-70, so
an error may result if these muthafuckin years is used.
.TP
\fIISO 8601 point-in-time\fR
An ISO 8601 point-in-time justification, such as
.QW \fICCyymmdd\fBT\fIhhmmss\fR,
where \fBT\fR is tha literal
.QW T ,
.QW "\fICCyymmdd hhmmss\fR" ,
or
.QW \fICCyymmdd\fBT\fIhh:mm:ss\fR .
Note dat only these three formats is accepted.
Da command do \fInot\fR accept tha full range of point-in-time
specifications specified up in ISO8601.  Other formats can be recognized by
givin a explicit \fI\-format\fR option ta tha \fBclock scan\fR command.
.TP
\fIrelatizzle time\fR
A justification relatizzle ta tha current time.  Da format is \fBnumber
unit\fR fo' realz. Acceptable units is \fByear\fR, \fBfortnight\fR, 
\fBmonth\fR, \fBweek\fR, \fBday\fR,
\fBhour\fR, \fBminute\fR (or \fBmin\fR), n' \fBsecond\fR (or \fBsec\fR).  The
unit can be specified as a singular or plural, as up in \fB3 weeks\fR.
These modifiers may also be specified:
\fBtomorrow\fR, \fByesterday\fR, \fBtodizzle\fR, \fBnow\fR,
\fBlast\fR, \fBthis\fR, \fBnext\fR, \fBago\fR.
.PP
Da actual date is calculated accordin ta tha followin steps.
.PP
First, any absolute date and/or time is processed n' converted.
Usin dat time as tha base, day-of-week justifications is added.
Next, relatizzle justifications is used. Y'all KNOW dat shit, muthafucka!  If a thugged-out date or dizzle is
specified, n' no absolute or relatizzle time is given, midnight is
used. Y'all KNOW dat shit, muthafucka!  Finally, a cold-ass lil erection be applied so dat tha erect minute of
the dizzle is produced afta allowin fo' daylight savings time
differences n' tha erect date is given when goin from tha end
of a long-ass month ta a gangbangin' finger-lickin' dirty-ass short month.
.SH "SEE ALSO"
msgcat(n)
.SH KEYWORDS
clock, date, time
.SH "COPYRIGHT"
Copyright (c) 2004 Kevin B. Kenny <kennykb@acm.org> fo' realz. All muthafuckin rights reserved.
