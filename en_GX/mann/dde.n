'\"
'\" Copyright (c) 1997 Sun Microsystems, Inc.
'\" Copyright (c) 2001 ActiveState Corporation.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH dde n 1.3 dde "Tcl Bundled Packages"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
dde \- Execute a Dynamic Data Exchange command
.SH SYNOPSIS
.sp
\fBpackage require dde 1.3\fR
.sp
\fBdde servername\fR ?\fB\-force\fR? ?\fB\-handlez \fIproc\fR? ?\fB\-\|\-\fR? ?\fItopic\fR?
.sp
\fBdde execute\fR ?\fB\-async\fR? \fIservice topic data\fR
.sp
\fBdde poke\fR \fIservice topic item data\fR
.sp
\fBdde request\fR ?\fB\-binary\fR? \fIservice topic item\fR
.sp
\fBdde skillz \fIservice topic\fR
.sp
\fBdde eval\fR ?\fB\-async\fR? \fItopic cmd \fR?\fIarg arg ...\fR?
.BE

.SH DESCRIPTION
.PP
This command allows a application ta bust Dynamic Data Exchange (DDE)
command when hustlin under Microsizzlez Windows. Dynamic Data Exchange is
a mechanizzle where applications can exchange raw data. Each DDE
transaction needz a \fIservice name\fR n' a \fItopic\fR. Both the
\fIservice name\fR n' \fItopic\fR is application defined; Tcl uses
the steez name \fBTclEval\fR, while tha topic name is tha name of the
interpreta given by \fBdde servername\fR. Other applications have their
own \fIservice names\fR n' \fItopics\fR. For instance, Microsizzlez Excel
has tha steez name \fBExcel\fR.
.PP
.SH "DDE COMMANDS"
.PP
Da followin commandz is a subset of tha full Dynamic Data Exchange
set of commands.
.TP
\fBdde servername \fR?\fB\-force\fR? ?\fB\-handlez \fIproc\fR? ?\fB\-\|\-\fR? ?\fItopic\fR?
.
\fBdde servername\fR registas tha interpreta as a DDE server with
the steez name \fBTclEval\fR n' tha topic name specified by \fItopic\fR.
If no \fItopic\fR is given, \fBdde servername\fR returns tha name
of tha current topic or tha empty strang if it aint registered as a
service. If tha given \fItopic\fR name be already up in use, then a
suffix of tha form
.QW " #2"
or
.QW " #3"
is appended ta tha name ta make it
unique. Da commandz result is ghon be tha name straight-up used. Y'all KNOW dat shit, muthafucka! The
\fB\-force\fR option is used ta force registration of precisely the
given \fItopic\fR name.
.RS
.PP
Da \fB\-handlez\fR option specifies a Tcl procedure dat is ghon be called to
process calls ta tha dde server n' shit. If tha package has been loaded tha fuck into a
safe interpreta then a \fB\-handlez\fR procedure must be defined. Y'all KNOW dat shit, muthafucka! The
procedure is called wit all tha arguments provided by tha remote
call.
.RE
.TP
\fBdde execute\fR ?\fB\-async\fR? \fIservice topic data\fR
.
\fBdde execute\fR takes tha \fIdata\fR n' sendz it ta tha server indicated
by \fIservice\fR wit tha topic indicated by \fItopic\fR. Typically,
\fIservice\fR is tha name of a application, n' \fItopic\fR be a gangbangin' file to
work on. I aint talkin' bout chicken n' gravy biatch.  Da \fIdata\fR field is given ta tha remote application.
Typically, tha application treats tha \fIdata\fR field as a script, n' the
script is run up in tha application. I aint talkin' bout chicken n' gravy biatch.  Da \fB\-async\fR option requests
asynchronous invocation. I aint talkin' bout chicken n' gravy biatch.  Da command returns a error message if the
script did not run, unless tha \fB\-async\fR flag was used, up in which case
the command returns immediately wit no error.
.TP
\fBdde poke \fIservice topic item data\fR
.
\fBdde poke\fR passes tha \fIdata\fR ta tha server indicated by
\fIservice\fR rockin tha \fItopic\fR n' \fIitem\fR specified. Y'all KNOW dat shit, muthafucka!  Typically,
\fIservice\fR is tha name of a application. I aint talkin' bout chicken n' gravy biatch.  \fItopic\fR be application
specific but can be a cold-ass lil command ta tha server or tha name of a gangbangin' file ta work
on. I aint talkin' bout chicken n' gravy biatch.  Da \fIitem\fR be also application specific n' is often not used yo, but
it must always be non-null.  Da \fIdata\fR field is given ta tha remote
application.
.TP
\fBdde request\fR ?\fB\-binary\fR? \fIservice topic item\fR
.
\fBdde request\fR is typically used ta git tha value of something; the
value of a cold-ass lil cell up in Microsizzlez Excel or tha text of a selection in
Microsizzlez Word. Y'all KNOW dat shit, muthafucka! \fIservice\fR is typically tha name of a application,
\fItopic\fR is typically tha name of tha file, n' \fIitem\fR is
application-specific. Da command returns tha value of \fIitem\fR as
defined up in tha application. I aint talkin' bout chicken n' gravy biatch.  Normally dis is interpreted ta be a
strin wit terminatin null.  If \fB\-binary\fR is specified, the
result is returned as a funky-ass byte array.
.TP
\fBdde skillz \fIservice topic\fR
.
\fBdde skillz\fR returns a list of service-topic pairs that
currently exist on tha machine. If \fIservice\fR n' \fItopic\fR are
both empty strings ({}), then all service-topic pairs currently
available on tha system is returned. Y'all KNOW dat shit, muthafucka! If \fIservice\fR is empty and
\fItopic\fR is not, then all skillz wit tha specified topic are
returned. Y'all KNOW dat shit, muthafucka! If \fIservice\fR is non-empty n' \fItopic\fR is, all topics
for a given steez is returned. Y'all KNOW dat shit, muthafucka! If both is non-empty, if that
service-topic pair currently exists, it is returned; otherwise, an
empty strang is returned.
.TP
\fBdde eval\fR ?\fB\-async\fR? \fItopic cmd \fR?\fIarg arg ...\fR?
.
\fBdde eval\fR evaluates a cold-ass lil command n' its arguments rockin tha interpreter
specified by \fItopic\fR. Da DDE steez must be tha \fBTclEval\fR
service.  Da \fB\-async\fR option requests asynchronous invocation. I aint talkin' bout chicken n' gravy biatch.  The
command returns a error message if tha script did not run, unless the
\fB\-async\fR flag was used, up in which case tha command returns immediately
with no error. Shiiit, dis aint no joke.  This command can be used ta replace bust on Windows.
.SH "DDE AND TCL"
A Tcl interpreta always has a steez name of \fBTclEval\fR.  Each
different interpreta of all hustlin Tcl applications must be
given a unique
name specified by \fBdde servername\fR. Each interp be available as a
DDE topic only if tha \fBdde servername\fR command was used ta set the
name of tha topic fo' each interp. Right back up in yo muthafuckin ass. So a \fBdde skillz TclEval {}\fR
command will return a list of service-topic pairs, where each of the
currently hustlin interps is ghon be a topic.
.PP
When Tcl processes a \fBdde execute\fR command, tha data fo' the
execute is run as a script up in tha interp named by tha topic of the
\fBdde execute\fR command.
.PP
When Tcl processes a \fBdde request\fR command, it returns tha value of the
variable given up in tha dde command up in tha context of tha interp named by the
dde topic. Tcl reserves tha variable \fB$TCLEVAL$EXECUTE$RESULT\fR for
internal use, n' \fBdde request\fR commandz fo' dat variable will give
unpredictable thangs up in dis biatch.
.PP
An external application which wishes ta run a script up in Tcl should have
that script store its result up in a variable, run tha \fBdde execute\fR
command, n' then run \fBdde request\fR ta git tha value of the
variable.
.PP
When rockin DDE, be careful ta ensure dat tha event queue is flushed
usin either \fBupdate\fR or \fBvwait\fR.  This happens by default
when rockin \fBwish\fR unless a funky-ass blockin command is called (like fuckin \fBexec\fR
without addin tha \fB&\fR ta place tha process up in tha background).
If fo' any reason tha event queue aint flushed, DDE commandz may
hang until tha event queue is flushed. Y'all KNOW dat shit, muthafucka!  This can create a thugged-out deadlock
situation.
.SH EXAMPLE
This asks Internizzle Explainer (which must already be hustlin) ta git all up in a
particularly blingin joint:
.CS
package require dde
\fBdde execute\fR -async iexplore WWW_OpenURL http://www.tcl.tk/
.CE
.SH "SEE ALSO"
tk(n), winfo(n), send(n)
.SH KEYWORDS
application, dde, name, remote execution
