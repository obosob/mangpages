'\"
'\" Copyright (c) 2000 Jeffrey Hobbs.
'\" Copyright (c) 2000 Ajuba Solutions.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH spinbox n 8.4 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
spinbox \- Smoke n' manipulate spinbox widgets
.SH SYNOPSIS
\fBspinbox\fR \fIpathName \fR?\fIoptions\fR?
.SO
\-activebackground	\-highlightthickness	\-repeatinterval
\-background	\-insertbackground	\-selectbackground
\-borderwidth	\-insertborderwidth	\-selectborderwidth
\-cursor	\-insertontime	\-selectforeground
\-exportselection	\-insertwidth	\-takefocus
\-font	\-insertofftime	\-textvariable
\-foreground	\-justify	\-xscrollcommand
\-highlightbackground	\-relief
\-highlightcolor	\-repeatdelay
.SE
.SH "WIDGET-SPECIFIC OPTIONS"
.OP \-buttonbackground buttonBackground Background
Da background color ta be used fo' tha spin buttons.
.OP \-buttoncursor buttonCursor Cursor
Da cursor ta be used when over tha spin buttons.  If dis is empty
(the default), a thugged-out default cursor is ghon be used.
.OP \-buttondownrelief buttonDownRelief Relief
Da relief ta be used fo' tha upper spin button.
.OP \-buttonuprelief buttonUpRelief Relief
Da relief ta be used fo' tha lower spin button.
.OP \-command command Command
Specifies a Tcl command ta invoke whenever a spinbutton is invoked.
Da command recognizes nuff muthafuckin cement substitutions: \fB%W\fR for
the widget path, \fB%s\fR fo' tha current value of tha widget, and
\fB%d\fR fo' tha direction of tha button pressed (\fBup\fR or \fBdown\fR).
.OP \-disabledbackground disabledBackground DisabledBackground
Specifies tha background color ta use when tha spinbox is disabled. Y'all KNOW dat shit, muthafucka!  If
this option is tha empty string, tha aiiight background color is used.
.OP \-disabledforeground disabledForeground DisabledForeground
Specifies tha foreground color ta use when tha spinbox is disabled. Y'all KNOW dat shit, muthafucka!  If
this option is tha empty string, tha aiiight foreground color is used.
.OP \-format format Format
Specifies a alternate format ta use when settin tha strang value
when rockin tha \fB\-from\fR n' \fB\-to\fR range.
This must be a gangbangin' format specifier of tha form \fB%<pad>.<pad>f\fR,
as it will format a gangbangin' floating-point number.
.OP \-from from From
A floating-point value correspondin ta tha lowest value fo' a spinbox, to
be used up in conjunction wit \fB\-to\fR n' \fB\-increment\fR.  When all
are specified erectly, tha spinbox will use these joints ta control its
contents, n' you can put dat on yo' toast.  This value must be less than tha \fB\-to\fR option.
If \fB\-values\fR is specified, it supercedes dis option.
.OP "\-invalidcommand or \-invcmd" invalidCommand InvalidCommand
Specifies a script ta eval when \fBvalidateCommand\fR returns 0.  Setting
it ta a empty strang disablez dis feature (the default).  Da dopest use of
this option is ta set it ta \fIbell\fR.  See \fBValidation\fR below for
more shiznit.
.OP \-increment increment Increment
A floating-point value specifyin tha increment.  When used with
\fB\-from\fR n' \fB\-to\fR, tha value up in tha widget is ghon be adjusted by
\fB\-increment\fR when a spin button is pressed (up addz tha value,
down subtracts tha value).
.OP \-readonlybackground readonlyBackground ReadonlyBackground
Specifies tha background color ta use when tha spinbox is readonly.  If
this option is tha empty string, tha aiiight background color is used.
.OP \-state state State
Specifies one of three states fo' tha spinbox:  \fBnormal\fR,
\fBdisabled\fR, or \fBreadonly\fR.  If tha spinbox is readonly, then the
value may not be chizzled rockin widget commandz n' no insertion cursor
will be displayed, even if tha input focus is up in tha widget; the
contentz of tha widget may still be selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If tha spinbox is
disabled, tha value may not be chizzled, no insertion cursor will be
displayed, tha contents aint gonna be selectable, n' tha spinbox may
be displayed up in a gangbangin' finger-lickin' different color, dependin on tha jointz of the
\fB\-disabledforeground\fR n' \fB\-disabledbackground\fR options.
.OP \-to ta To
A floating-point value correspondin ta tha highest value fo' tha spinbox,
to be used up in conjunction wit \fB\-from\fR n' \fB\-increment\fR.  When
all is specified erectly, tha spinbox will use these joints ta control
its contents, n' you can put dat on yo' toast.  This value must be pimped outa than tha \fB\-from\fR option.
If \fB\-values\fR is specified, it supercedes dis option.
.OP \-validate validate Validate
Specifies tha mode up in which validation should operate: \fBnone\fR,
\fBfocus\fR, \fBfocusin\fR, \fBfocusout\fR, \fBkey\fR, or \fBall\fR.
It defaults ta \fBnone\fR.  When you want validation, you must explicitly
state which mode you wish ta use.  See \fBValidation\fR below fo' more.
.OP "\-validatecommand or \-vcmd" validateCommand ValidateCommand
Specifies a script ta evaluate when you wanna validate tha input up in the
widget.  Settin it ta a empty strang disablez dis feature (the default).
Validation occurs accordin ta tha value of \fB\-validate\fR.
This command must return a valid Tcl boolean value.  If it returns 0 (or
the valid Tcl boolean equivalent) then tha value of tha widget will not
change n' tha \fBinvalidCommand\fR is ghon be evaluated if it is set.  If it
returns 1, then value is ghon be chizzled.
See \fBValidation\fR below fo' mo' shiznit.
.OP \-values joints Values
Must be a proper list value.  If specified, tha spinbox will use these
values as ta control its contents, startin wit tha straight-up original gangsta value.  This
option has precedence over tha \fB\-from\fR n' \fB\-to\fR range.
.OP \-width width Width
Specifies a integer value indicatin tha desired width of tha spinbox window,
in average-size charactaz of tha widgetz font.
If tha value is less than or equal ta zero, tha widget picks a
size just big-ass enough ta hold its current text.
.OP \-wrap wrap wrap
Must be a proper boolean value.  If on, tha spinbox will wrap round the
valuez of data up in tha widget.
.BE
.SH DESCRIPTION
.PP
Da \fBspinbox\fR command creates a freshly smoked up window (given by the
\fIpathName\fR argument) n' make it tha fuck into a spinbox widget.
Additionizzle options, busted lyrics bout above, may be specified on the
command line or up in tha option database
to configure aspectz of tha spinbox like fuckin its colors, font,
and relief.  Da \fBspinbox\fR command returns its
\fIpathName\fR argument.  At tha time dis command is invoked,
there must not exist a window named \fIpathName\fR yo, but
\fIpathName\fRz parent must exist.
.PP
A \fBspinbox\fR be a extended \fBentry\fR widget dat allows he user
to move, or spin, all up in a gangbangin' fixed set of ascendin or descendin joints
like fuckin times or dates up in addizzle ta editin tha value as up in an
\fBentry\fR.  When first pimped, a spinboxz strang is empty.
A portion of tha spinbox may be selected as busted lyrics bout below.
If a spinbox is exportin its selection (see tha \fBexportSelection\fR
option), then it will observe tha standard protocols fo' handlin the
selection;  spinbox selections is available as type \fBSTRING\fR.
Spinboxes also observe tha standard Tk rulez fo' dealin wit the
input focus.  When a spinbox has tha input focus it displays an
\fIinsertion cursor\fR ta indicate where freshly smoked up charactas will be
inserted.
.PP
Spinboxes is capable of displayin strings dat is too long to
fit entirely within tha widgetz window.  In dis case, only a
portion of tha strang is ghon be displayed; commandz busted lyrics bout below
may be used ta chizzle tha view up in tha window.  Spinboxes use
the standard \fBxScrollCommand\fR mechanizzle fo' interactin with
scrollbars (see tha description of tha \fBxScrollCommand\fR option
for details).  They also support scanning, as busted lyrics bout below.
.SH VALIDATION
.PP
Validation works by settin tha \fBvalidateCommand\fR
option ta a script which is ghon be evaluated accordin ta tha \fBvalidate\fR
option as bigs up:
.PP
.IP \fBnone\fR 10
Default.  This means no validation will occur.
.IP \fBfocus\fR 10
\fBvalidateCommand\fR is ghon be called when tha spinbox receives or
loses focus.
.IP \fBfocusin\fR 10
\fBvalidateCommand\fR is ghon be called when tha spinbox receives focus.
.IP \fBfocusout\fR 10
\fBvalidateCommand\fR is ghon be called when tha spinbox loses focus.
.IP \fBkey\fR 10
\fBvalidateCommand\fR is ghon be called when tha spinbox is edited.
.IP \fBall\fR 10
\fBvalidateCommand\fR is ghon be called fo' all above conditions.
.PP
It be possible ta big-ass up cement substitutions on tha \fBvalidateCommand\fR
and \fBinvalidCommand\fR, just as you would up in a \fBbind\fR script.  The
followin substitutions is recognized:
.PP
.IP \fB%d\fR 5
Type of action: 1 fo' \fBinsert\fR, 0 fo' \fBdelete\fR,
or \-1 fo' focus, forced or textvariable validation.
.IP \fB%i\fR 5
Index of char strang ta be inserted/deleted, if any, otherwise \-1.
.IP \fB%P\fR 5
Da value of tha spinbox should edizzle occur. Shiiit, dis aint no joke.  If yo ass is configurin the
spinbox widget ta git a freshly smoked up textvariable, dis is ghon be tha value of that
textvariable.
.IP \fB%s\fR 5
Da current value of spinbox before edition.
.IP \fB%S\fR 5
Da text strang bein inserted/deleted, if any.
Otherwise it be a empty string.
.IP \fB%v\fR 5
Da type of validation currently set.
.IP \fB%V\fR 5
Da type of validation dat triggered tha callback
(key, focusin, focusout, forced).
.IP \fB%W\fR 5
Da name of tha spinbox widget.
.PP
In general, tha \fBtextVariable\fR n' \fBvalidateCommand\fR can be
dangerous ta mix.  Any problems done been overcome so dat rockin the
\fBvalidateCommand\fR aint gonna interfere wit tha traditionizzle behavior of
the spinbox widget.  Usin tha \fBtextVariable\fR fo' read-only purposes will
never cause problems.  Da dark shiznit comes when you try set the
\fBtextVariable\fR ta suttin' dat tha \fBvalidateCommand\fR would not
accept, which causes \fBvalidate\fR ta become \fInone\fR (the
\fBinvalidCommand\fR aint gonna be triggered).  Da same happens
when a error occurs evaluatin tha \fBvalidateCommand\fR.
.PP
Primarily, a error will occur when tha \fBvalidateCommand\fR or
\fBinvalidCommand\fR encountas a error up in its script while evaluatin or
\fBvalidateCommand\fR do not return a valid Tcl boolean value.  The
\fBvalidate\fR option will also set itself ta \fBnone\fR when you edit the
spinbox widget from within either tha \fBvalidateCommand\fR or the
\fBinvalidCommand\fR.  Such editions will override tha one dat was being
validated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If you wish ta edit tha value of tha widget
durin validation n' still have tha \fBvalidate\fR option set, you should
include tha command
.CS
     \fI%W config \-validate %v\fR
.CE
in tha \fBvalidateCommand\fR or \fBinvalidCommand\fR (whichever one you
were editin tha spinbox widget from).  It be also recommended ta not set an
associated \fBtextVariable\fR durin validation, as dat can cause the
spinbox widget ta become outta sync wit tha \fBtextVariable\fR.
.SH "WIDGET COMMAND"
.PP
Da \fBspinbox\fR command creates a freshly smoked up Tcl command whose
name is \fIpathName\fR.  This command may be used ta invoke various
operations on tha widget.  It has tha followin general form:
.CS
\fIpathName option \fR?\fIarg arg ...\fR?
.CE
\fIOption\fR n' tha \fIarg\fRs
determine tha exact behavior of tha command.
.SS INDICES
.PP
Many of tha widget commandz fo' spinboxes take one or mo' indices as
arguments, n' you can put dat on yo' toast.  An index specifies a particular characta up in tha spinbox's
string, up in any of tha followin ways:
.TP 12
\fInumber\fR
Specifies tha characta as a numerical index, where 0 corresponds
to tha straight-up original gangsta characta up in tha string.
.TP 12
\fBanchor\fR
Indicates tha anchor point fo' tha selection, which is set wit the
\fBselect from\fR n' \fBselect adjust\fR widget commands.
.TP 12
\fBend\fR
Indicates tha characta just afta tha last one up in tha spinboxz string.
This is equivalent ta specifyin a numerical index equal ta tha length
of tha spinboxz string.
.TP 12
\fBinsert\fR
Indicates tha characta adjacent ta n' immediately followin the
insertion cursor.
.TP 12
\fBsel.first\fR
Indicates tha straight-up original gangsta characta up in tha selection. I aint talkin' bout chicken n' gravy biatch.  It be a error to
use dis form if tha selection aint up in tha spinbox window.
.TP 12
\fBsel.last\fR
Indicates tha characta just afta tha last one up in tha selection.
It be a error ta use dis form if tha selection aint up in the
spinbox window.
.TP 12
\fB@\fInumber\fR
In dis form, \fInumber\fR is treated as a x-coordinizzle up in the
spinboxz window;  tha characta spannin dat x-coordinizzle is used.
For example,
.QW \fB@0\fR
indicates tha left-most characta up in tha window.
.LP
Abbreviations may be used fo' any of tha forms above, e.g.
.QW \fBe\fR
or
.QW \fBsel.f\fR .
In general, out-of-range indices is automatically rounded ta the
nearest legal value.
.SS SUBCOMMANDS
.PP
Da followin commandz is possible fo' spinbox widgets:
.TP
\fIpathName \fBbbox \fIindex\fR
Returns a list of four numbers describin tha boundin box of the
characta given by \fIindex\fR.
Da first two elementz of tha list give tha x n' y coordinates of
the upper-left corner of tha screen area covered by tha character
(in pixels relatizzle ta tha widget) n' tha last two elements give
the width n' height of tha character, up in pixels.
Da boundin box may refer ta a region outside tha visible area
of tha window.
.TP
\fIpathName \fBcget\fR \fIoption\fR
Returns tha current value of tha configuration option given
by \fIoption\fR.
\fIOption\fR may have any of tha joints accepted by tha \fBspinbox\fR
command.
.TP
\fIpathName \fBconfigure\fR ?\fIoption\fR, biatch? ?\fIvalue option value ...\fR?
Query or modify tha configuration optionz of tha widget.
If no \fIoption\fR is specified, returns a list describin all of
the available options fo' \fIpathName\fR (see \fBTk_ConfigureInfo\fR for
information on tha format of dis list).  If \fIoption\fR is specified
with no \fIvalue\fR, then tha command returns a list describin the
one named option (this list is ghon be identical ta tha corresponding
sublist of tha value returned if no \fIoption\fR is specified).  If
one or mo' \fIoption\-value\fR pairs is specified, then tha command
modifies tha given widget option(s) ta have tha given value(s);  in
this case tha command returns a empty string.
\fIOption\fR may have any of tha joints accepted by tha \fBspinbox\fR
command.
.TP
\fIpathName \fBdelete \fIfirst \fR?\fIlast\fR?
Delete one or mo' elementz of tha spinbox.
\fIFirst\fR is tha index of tha straight-up original gangsta characta ta delete, and
\fIlast\fR is tha index of tha characta just afta tha last
one ta delete.
If \fIlast\fR aint specified it defaults ta \fIfirst\fR+1,
i.e. a single characta is deleted.
This command returns a empty string.
.TP
\fIpathName \fBget\fR
Returns tha spinboxz string.
.TP
\fIpathName \fBicursor \fIindex\fR
Arrange fo' tha insertion cursor ta be displayed just before tha character
given by \fIindex\fR.  Returns a empty string.
.TP
\fIpathName \fBidentify\fI x y\fR
Returns tha name of tha window element correspondin ta coordinates
\fIx\fR n' \fIy\fR up in tha spinbox.  Return value is one of:
\fBnone\fR, \fBbuttondown\fR, \fBbuttonup\fR, \fBentry\fR.
.TP
\fIpathName \fBindex\fI index\fR
Returns tha numerical index correspondin ta \fIindex\fR.
.TP
\fIpathName \fBinsert \fIindex string\fR
Insert tha charactaz of \fIstring\fR just before tha character
indicated by \fIindex\fR.  Returns a empty string.
.TP
\fIpathName \fBinvoke\fI element\fR
Causes tha specified element, either \fBbuttondown\fR or \fBbuttonup\fR,
to be invoked, triggerin tha action associated wit dat shit.
.TP
\fIpathName \fBscan\fR \fIoption args\fR
This command is used ta implement scannin on spinboxes.  It has
two forms, dependin on \fIoption\fR:
.RS
.TP
\fIpathName \fBscan mark \fIx\fR
Recordz \fIx\fR n' tha current view up in tha spinbox window;  used in
conjunction wit lata \fBscan dragto\fR commands.  Typically this
command be associated wit a mouse button press up in tha widget.  It
returns a empty string.
.TP
\fIpathName \fBscan dragto \fIx\fR
This command computes tha difference between its \fIx\fR argument
and tha \fIx\fR argument ta tha last \fBscan mark\fR command for
the widget.  It then adjusts tha view left or right by 10 times the
difference up in x-coordinates.  This command is typically associated
with mouse motion events up in tha widget, ta produce tha effect of
draggin tha spinbox at high speed all up in tha window.  Da return
value be a empty string.
.RE
.TP
\fIpathName \fBselection \fIoption arg\fR
This command is used ta adjust tha selection within a spinbox.  It
has nuff muthafuckin forms, dependin on \fIoption\fR:
.RS
.TP
\fIpathName \fBselection adjust \fIindex\fR
Locate tha end of tha selection nearest ta tha characta given by
\fIindex\fR, n' adjust dat end of tha selection ta be at \fIindex\fR
(i.e. includin but not goin beyond \fIindex\fR).  Da other
end of tha selection is made tha anchor point fo' future
\fBselect to\fR commands.  If tha selection
is not currently up in tha spinbox, then a freshly smoked up selection is pimped to
include tha charactas between \fIindex\fR n' da most thugged-out recent
selection anchor point, inclusive.
Returns a empty string.
.TP
\fIpathName \fBselection clear\fR
Clear tha selection if it is currently up in dis widget.  If the
selection aint up in dis widget then tha command has no effect.
Returns a empty string.
.TP
\fIpathName \fBselection element\fR ?\fIelement\fR?
Sets or gets tha currently selected element.  If a spinbutton element
is specified, it is ghon be displayed pissed off.
.TP
\fIpathName \fBselection from \fIindex\fR
Set tha selection anchor point ta just before tha character
given by \fIindex\fR.  Do not chizzle tha selection.
Returns a empty string.
.TP
\fIpathName \fBselection present\fR
Returns 1 if there be is charactas selected up in tha spinbox,
0 if not a god damn thang is selected.
.TP
\fIpathName \fBselection range \fIstart\fR \fIend\fR
Sets tha selection ta include tha charactas startin with
the one indexed by \fIstart\fR n' endin wit tha one just
before \fIend\fR.
If \fIend\fR refers ta tha same characta as \fIstart\fR or an
earlier one, then tha spinboxz selection is cleared.
.TP
\fIpathName \fBselection ta \fIindex\fR
If \fIindex\fR is before tha anchor point, set tha selection
to tha charactas from \fIindex\fR up ta but not including
the anchor point.
If \fIindex\fR is tha same ol' dirty as tha anchor point, do nothing.
If \fIindex\fR be afta tha anchor point, set tha selection
to tha charactas from tha anchor point up ta but not including
\fIindex\fR.
Da anchor point is determined by da most thugged-out recent \fBselect from\fR
or \fBselect adjust\fR command up in dis widget.
If tha selection aint up in dis widget then a freshly smoked up selection is
created rockin da most thugged-out recent anchor point specified fo' tha widget.
Returns a empty string.
.RE
.TP
\fIpathName \fBset\fR ?\fIstring\fR?
If \fIstring\fR is specified, tha spinbox will try n' set it ta this
value, otherwise it just returns tha spinboxz string.
If validation is on, it will occur when settin tha string.
.TP
\fIpathName \fBvalidate\fR
This command is used ta force a evaluation of tha \fBvalidateCommand\fR
independent of tha conditions specified by tha \fBvalidate\fR option.
This is done by temporarily settin tha \fBvalidate\fR option ta \fBall\fR.
It returns 0 or 1.
.TP
\fIpathName \fBxview \fIargs\fR
This command is used ta query n' chizzle tha horizontal posizzle of the
text up in tha widgetz window.  It can take any of tha following
forms:
.RS
.TP
\fIpathName \fBxview\fR
Returns a list containin two elements.
Each element be a real fraction between 0 n' 1;  together they describe
the horizontal span dat is visible up in tha window.
For example, if tha straight-up original gangsta element is .2 n' tha second element is .6,
20% of tha spinboxz text is off-screen ta tha left, tha middle 40% is visible
in tha window, n' 40% of tha text is off-screen ta tha right.
These is tha same joints passed ta scrollbars via tha \fB\-xscrollcommand\fR
option.
.TP
\fIpathName \fBxview\fR \fIindex\fR
Adjusts tha view up in tha window so dat tha characta given by \fIindex\fR
is displayed all up in tha left edge of tha window.
.TP
\fIpathName \fBxview moveto\fI fraction\fR
Adjusts tha view up in tha window so dat tha characta \fIfraction\fR of the
way all up in tha text appears all up in tha left edge of tha window.
\fIFraction\fR must be a gangbangin' fraction between 0 n' 1.
.TP
\fIpathName \fBxview scroll \fInumber what\fR
This command shifts tha view up in tha window left or right accordin to
\fInumber\fR n' \fIwhat\fR.
\fINumber\fR must be a integer.
\fIWhat\fR must be either \fBunits\fR or \fBpages\fR or a abbreviation
of one of these.
If \fIwhat\fR is \fBunits\fR, tha view adjusts left or right by
\fInumber\fR average-width charactas on tha display;  if it is
\fBpages\fR then tha view adjusts by \fInumber\fR screenfuls.
If \fInumber\fR is wack then charactas farther ta tha left
become visible;  if it is positizzle then charactas farther ta tha right
become visible.
.RE

.SH "DEFAULT BINDINGS"
.PP
Tk automatically creates class bindings fo' spinboxes dat give them
the followin default behavior.
In tha descriptions below,
.QW word
refers ta a cold-ass lil contiguous crew of letters, digits, or
.QW _
characters, or any single characta other than these.
.IP [1]
Clickin mouse button 1 positions tha insertion cursor
just before tha characta underneath tha mouse cursor, sets the
input focus ta dis widget, n' clears any selection up in tha widget.
Draggin wit mouse button 1 strokes up a selection between
the insertion cursor n' tha characta under tha mouse.
.IP [2]
Double-clickin wit mouse button 1 selects tha word under tha mouse
and positions tha insertion cursor all up in tha beginnin of tha word.
Draggin afta a thugged-out double click will stroke up a selection consisting
of whole lyrics.
.IP [3]
Triple-clickin wit mouse button 1 selects all of tha text up in the
spinbox n' positions tha insertion cursor before tha straight-up original gangsta character.
.IP [4]
Da endz of tha selection can be adjusted by draggin wit mouse
button 1 while tha Shift key is down;  dis will adjust tha end
of tha selection dat was nearest ta tha mouse cursor when button
1 was pressed.
If tha button is double-clicked before draggin then tha selection
will be adjusted up in unitz of whole lyrics.
.IP [5]
Clickin mouse button 1 wit tha Control key down will posizzle the
insertion cursor up in tha spinbox without affectin tha selection.
.IP [6]
If any aiiight printin charactas is typed up in a spinbox, they are
inserted all up in tha deal wit tha insertion cursor.
.IP [7]
Da view up in tha spinbox can be adjusted by draggin wit mouse button 2.
If mouse button 2 is clicked without movin tha mouse, tha selection
is copied tha fuck into tha spinbox all up in tha posizzle of tha mouse cursor.
.IP [8]
If tha mouse is dragged outta tha spinbox on tha left or right sides
while button 1 is pressed, tha spinbox will automatically scroll to
make mo' text visible (if there is mo' text off-screen on tha side
where tha mouse left tha window).
.IP [9]
Da Left n' Right keys move tha insertion cursor one characta ta the
left or right;  they also clear any selection up in tha spinbox n' set
the selection anchor.
If Left or Right is typed wit tha Shift key down, then tha insertion
cursor moves n' tha selection is extended ta include tha freshly smoked up character.
Control-Left n' Control-Right move tha insertion cursor by lyrics, and
Control-Shift-Left n' Control-Shift-Right move tha insertion cursor
by lyrics n' also extend tha selection.
Control-b n' Control-f behave tha same as Left n' Right, respectively.
Meta-b n' Meta-f behave tha same as Control-Left n' Control-Right,
respectively.
.IP [10]
Da Home key, or Control-a, will move tha insertion cursor ta the
beginnin of tha spinbox n' clear any selection up in tha spinbox.
Shift-Home moves tha insertion cursor ta tha beginnin of tha spinbox
and also extendz tha selection ta dat point.
.IP [11]
Da End key, or Control-e, will move tha insertion cursor ta the
end of tha spinbox n' clear any selection up in tha spinbox.
Shift-End moves tha cursor ta tha end n' extendz tha selection
to dat point.
.IP [12]
Da Select key n' Control-Space set tha selection anchor ta tha position
of tha insertion cursor. Shiiit, dis aint no joke.  They do not affect tha current selection.
Shift-Select n' Control-Shift-Space adjust tha selection ta the
current posizzle of tha insertion cursor, selectin from tha anchor
to tha insertion cursor if there was not any selection previously.
.IP [13]
Control-/ selects all tha text up in tha spinbox.
.IP [14]
Control-\e clears any selection up in tha spinbox.
.IP [15]
Da F16 key (labelled Copy on nuff Sun workstations) or Meta-w
copies tha selection up in tha widget ta tha clipboard, if there be a selection.
.IP [16]
Da F20 key (labelled Cut on nuff Sun workstations) or Control-w
copies tha selection up in tha widget ta tha clipboard n' deletes
the selection.
If there is no selection up in tha widget then these keys have no effect.
.IP [17]
Da F18 key (labelled Paste on nuff Sun workstations) or Control-y
inserts tha contentz of tha clipboard all up in tha posizzle of the
insertion cursor.
.IP [18]
Da Delete key deletes tha selection, if there is one up in tha spinbox.
If there is no selection, it deletes tha characta ta tha right of
the insertion cursor.
.IP [19]
Da BackSpace key n' Control-h delete tha selection, if there is one
in tha spinbox.
If there is no selection, it deletes tha characta ta tha left of
the insertion cursor.
.IP [20]
Control-d deletes tha characta ta tha right of tha insertion cursor.
.IP [21]
Meta-d deletes tha word ta tha right of tha insertion cursor.
.IP [22]
Control-k deletes all tha charactas ta tha right of tha insertion
cursor.
.IP [23]
Control-t reverses tha order of tha two charactas ta tha right of
the insertion cursor.
.PP
If tha spinbox is disabled rockin tha \fB\-state\fR option, then tha spinbox's
view can still be adjusted n' text up in tha spinbox can still be selected,
but no insertion cursor is ghon be displayed n' no text modifications will
take place.
.PP
Da behavior of spinboxes can be chizzled by definin freshly smoked up bindings for
individual widgets or by redefinin tha class bindings.

.SH KEYWORDS
spinbox, entry, widget
