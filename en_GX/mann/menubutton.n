'\"
'\" Copyright (c) 1990-1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH menubutton n 4.0 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
menubutton \- Smoke n' manipulate menubutton widgets
.SH SYNOPSIS
\fBmenubutton\fR \fIpathName \fR?\fIoptions\fR?
.SO
\-activebackground	\-disabledforeground	\-padx
\-activeforeground	\-font	\-pady
\-anchor	\-foreground	\-relief
\-background	\-highlightbackground	\-takefocus
\-bitmap	\-highlightcolor	\-text
\-borderwidth	\-highlightthickness	\-textvariable
\-cursor	\-image	\-underline
\-compound	\-justify	\-wraplength
.SE
.SH "WIDGET-SPECIFIC OPTIONS"
.OP \-direction direction Height
Specifies where tha menu is goin ta be popup up. \fBabove\fR tries to
pop tha menu above tha menubutton. I aint talkin' bout chicken n' gravy biatch. \fBbelow\fR tries ta pop tha menu
below tha menubutton. I aint talkin' bout chicken n' gravy biatch. \fBleft\fR tries ta pop tha menu ta tha left of
the menubutton. I aint talkin' bout chicken n' gravy biatch. \fBright\fR tries ta pop tha menu ta tha right of the
menu button. I aint talkin' bout chicken n' gravy biatch. \fBflush\fR pops tha menu directly over tha menubutton.
In tha case of \fBabove\fR or \fBbelow\fR, tha direction will be
reversed if tha menu would show offscreen.
.OP \-height height Height
Specifies a thugged-out desired height fo' tha menubutton.
If a image or bitmap is bein displayed up in tha menubutton then tha value is in
screen units (i.e. any of tha forms aaight ta \fBTk_GetPixels\fR);
for text it is up in linez of text.
If dis option aint specified, tha menubuttonz desired height is computed
from tha size of tha image or bitmap or text bein displayed up in dat shit.
.OP \-indicatoron indicatorOn IndicatorOn
Da value must be a proper boolean value.  If it is legit then
a lil' small-ass indicator rectangle is ghon be displayed on tha right side
of tha menubutton n' tha default menu bindings will treat this
as a option menubutton. I aint talkin' bout chicken n' gravy biatch.  If false then no indicator will be
displayed.
.OP \-menu menu MenuName
Specifies tha path name of tha menu associated wit dis menubutton.
Da menu must be a cold-ass lil lil pimp of tha menubutton.
.OP \-state state State
Specifies one of three states fo' tha menubutton:  \fBnormal\fR, \fBactive\fR,
or \fBdisabled\fR.  In aiiight state tha menubutton is displayed rockin the
\fBforeground\fR n' \fBbackground\fR options.  Da actizzle state is
typically used when tha pointa is over tha menubutton. I aint talkin' bout chicken n' gravy biatch.  In actizzle state
the menubutton is displayed rockin tha \fBactiveForeground\fR and
\fBactiveBackground\fR options.  Disabled state means dat tha menubutton
should be insensitive:  tha default bindings will refuse ta activate
the widget n' will ignore mouse button presses.
In dis state tha \fBdisabledForeground\fR and
\fBbackground\fR options determine how tha fuck tha button is displayed.
.OP \-width width Width
Specifies a thugged-out desired width fo' tha menubutton.
If a image or bitmap is bein displayed up in tha menubutton then tha value is in
screen units (i.e. any of tha forms aaight ta \fBTk_GetPixels\fR);
for text it is up in characters.
If dis option aint specified, tha menubuttonz desired width is computed
from tha size of tha image or bitmap or text bein displayed up in dat shit.
.BE
.SH INTRODUCTION
.PP
Da \fBmenubutton\fR command creates a freshly smoked up window (given by the
\fIpathName\fR argument) n' make it tha fuck into a menubutton widget.
Additional
options, busted lyrics bout above, may be specified on tha command line
or up in tha option database
to configure aspectz of tha menubutton like fuckin its colors, font,
text, n' initial relief.  Da \fBmenubutton\fR command returns its
\fIpathName\fR argument.  At tha time dis command is invoked,
there must not exist a window named \fIpathName\fR yo, but
\fIpathName\fRz parent must exist.
.PP
A menubutton be a widget dat displays a textual string, bitmap, or image
and be associated wit a menu widget.
If text is displayed, it must all be up in a single font yo, but it
can occupy multiple lines on tha screen (if it gotz nuff newlines
or if wrappin occurs cuz of tha \fBwrapLength\fR option) and
one of tha charactas may optionally be underlined rockin the
\fBunderline\fR option. I aint talkin' bout chicken n' gravy biatch.  In aiiight usage, pressing
mouse button 1 over tha menubutton causes tha associated menu to
be posted just underneath tha menubutton. I aint talkin' bout chicken n' gravy biatch.  If tha mouse is moved over
the menu before releasin tha mouse button, tha button release
causes tha underlyin menu entry ta be invoked. Y'all KNOW dat shit, muthafucka!  When tha button
is busted out, tha menu is unposted.
.PP
Menubuttons is typically organized tha fuck into crews called menu bars
that allow scanning:
if tha mouse button is pressed over one menubutton (causin it
to post its menu) n' tha mouse is moved over another menubutton
in tha same menu bar without releasin tha mouse button, then the
menu of tha straight-up original gangsta menubutton is unposted n' tha menu of the
new menubutton is posted instead.
.PP
There is nuff muthafuckin interactions between menubuttons n' menus;  see
the \fBmenu\fR manual entry fo' shiznit on various menu configurations,
like fuckin pulldown menus n' option menus.
.SH "WIDGET COMMAND"
.PP
Da \fBmenubutton\fR command creates a freshly smoked up Tcl command whose
name is \fIpathName\fR.  This
command may be used ta invoke various
operations on tha widget.  It has tha followin general form:
.CS
\fIpathName option \fR?\fIarg arg ...\fR?
.CE
\fIOption\fR n' tha \fIarg\fRs
determine tha exact behavior of tha command. Y'all KNOW dat shit, muthafucka!  Da following
commandz is possible fo' menubutton widgets:
.TP
\fIpathName \fBcget\fR \fIoption\fR
Returns tha current value of tha configuration option given
by \fIoption\fR.
\fIOption\fR may have any of tha joints accepted by tha \fBmenubutton\fR
command.
.TP
\fIpathName \fBconfigure\fR ?\fIoption\fR, biatch? ?\fIvalue option value ...\fR?
Query or modify tha configuration optionz of tha widget.
If no \fIoption\fR is specified, returns a list describin all of
the available options fo' \fIpathName\fR (see \fBTk_ConfigureInfo\fR for
information on tha format of dis list).  If \fIoption\fR is specified
with no \fIvalue\fR, then tha command returns a list describin the
one named option (this list is ghon be identical ta tha corresponding
sublist of tha value returned if no \fIoption\fR is specified).  If
one or mo' \fIoption\-value\fR pairs is specified, then tha command
modifies tha given widget option(s) ta have tha given value(s);  in
this case tha command returns a empty string.
\fIOption\fR may have any of tha joints accepted by tha \fBmenubutton\fR
command.
.SH "DEFAULT BINDINGS"
.PP
Tk automatically creates class bindings fo' menubuttons dat give them
the followin default behavior:
.IP [1]
A menubutton activates whenever tha mouse passes over it n' deactivates
whenever tha mouse leaves dat shit.
.IP [2]
Pressin mouse button 1 over a menubutton posts tha menubutton:
its relief chizzlez ta raised n' its associated menu is posted
under tha menubutton. I aint talkin' bout chicken n' gravy biatch.  If tha mouse is dragged down tha fuck into tha menu
with tha button still down, n' if tha mouse button is then
released over a entry up in tha menu, tha menubutton is unposted
and tha menu entry is invoked.
.IP [3]
If button 1 is pressed over a menubutton n' then busted out over that
menubutton, tha menubutton stays posted: you can still move tha mouse
over tha menu n' click button 1 on a entry ta invoke dat shit.
Once a menu entry has been invoked, tha menubutton unposts itself.
.IP [4]
If button 1 is pressed over a menubutton n' then dragged over some
other menubutton, tha original gangsta menubutton unposts itself n' the
new menubutton posts.
.IP [5]
If button 1 is pressed over a menubutton n' busted out outside
any menubutton or menu, tha menubutton unposts without invoking
any menu entry.
.IP [6]
When a menubutton is posted, its associated menu fronts tha input
focus ta allow keyboard traversal of tha menu n' its submenus.
See tha \fBmenu\fR manual entry fo' details on these bindings.
.IP [7]
If tha \fBunderline\fR option has been specified fo' a menubutton
then keyboard traversal may be used ta post tha menubutton:
Alt+\fIx\fR, where \fIx\fR is tha underlined characta (or its
lower-case or upper-case equivalent), may be typed up in any window
under tha menubuttonz toplevel ta post tha menubutton.
.IP [8]
Da F10 key may be typed up in any window ta post tha straight-up original gangsta menubutton
under its toplevel window dat aint disabled.
.IP [9]
If a menubutton has tha input focus, tha space n' return keys
post tha menubutton.
.PP
If tha menubuttonz state is \fBdisabled\fR then none of tha above
actions occur:  tha menubutton is straight-up non-responsive.
.PP
Da behavior of menubuttons can be chizzled by definin freshly smoked up bindings for
individual widgets or by redefinin tha class bindings.
.SH "SEE ALSO"
ttk::menubutton(n), menu(n)
.SH KEYWORDS
menubutton, widget
