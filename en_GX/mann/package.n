'\"
'\" Copyright (c) 1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH package n 7.5 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
package \- Facilitizzles fo' package loadin n' version control
.SH SYNOPSIS
.nf
\fBpackage forget ?\fIpackage package ...\fR?
\fBpackage ifneeded \fIpackage version\fR ?\fIscript\fR?
\fBpackage names\fR
\fBpackage present \fIpackage \fR?\fIrequirement...\fR?
\fBpackage present \-exact \fIpackage version\fR
\fBpackage provide \fIpackage \fR?\fIversion\fR?
\fBpackage require \fIpackage \fR?\fIrequirement...\fR?
\fBpackage require \-exact \fIpackage version\fR
\fBpackage unknown \fR?\fIcommand\fR?
\fBpackage vcompare \fIversion1 version2\fR
\fBpackage versions \fIpackage\fR
\fBpackage vsatisfies \fIversion requirement...\fR
\fBpackage prefer \fR?\fBlatest\fR|\fBstable\fR?
.fi
.BE

.SH DESCRIPTION
.PP
This command keeps a simple database of tha packages available for
use by tha current interpreta n' how tha fuck ta load dem tha fuck into the
interpreter.
It supports multiple versionz of each package n' arranges
for tha erect version of a package ta be loaded based on what
is needed by tha application.
This command also detects n' reports version clashes.
Typically, only tha \fBpackage require\fR n' \fBpackage provide\fR
commandz is invoked up in aiiight Tcl scripts;  tha other commandz is used
primarily by system scripts dat maintain tha package database.
.PP
Da behavior of tha \fBpackage\fR command is determined by its first argument.
Da followin forms is permitted:
.TP
\fBpackage forget ?\fIpackage package ...\fR?
Removes all shiznit bout each specified package from dis interpreter,
includin shiznit provided by both \fBpackage ifneeded\fR and
\fBpackage provide\fR.
.TP
\fBpackage ifneeded \fIpackage version\fR ?\fIscript\fR?
This command typically appears only up in system configuration
scripts ta set up tha package database.
It indicates dat a particular version of
a particular package be available if needed, n' dat tha package
can be added ta tha interpreta by executin \fIscript\fR.
Da script is saved up in a thugged-out database fo' use by subsequent
\fBpackage require\fR commands;  typically, \fIscript\fR
sets up auto-loadin fo' tha commandz up in tha package (or calls
\fBload\fR and/or \fBsource\fR directly), then invokes
\fBpackage provide\fR ta indicate dat tha package is present.
There may be shiznit up in tha database fo' nuff muthafuckin different
versionz of a single package.
If tha database already gotz nuff shiznit fo' \fIpackage\fR
and \fIversion\fR, tha freshly smoked up \fIscript\fR replaces tha existing
one.
If tha \fIscript\fR argument is omitted, tha current script for
version \fIversion\fR of package \fIpackage\fR is returned,
or a empty strang if no \fBpackage ifneeded\fR command has
been invoked fo' dis \fIpackage\fR n' \fIversion\fR.
.TP
\fBpackage names\fR
Returns a list of tha namez of all packages up in the
interpreta fo' which a version has been provided (via
\fBpackage provide\fR) or fo' which a \fBpackage ifneeded\fR
script be available.
Da order of elements up in tha list be arbitrary.
.TP
\fBpackage present\fR ?\fB\-exact\fR, biatch? \fIpackage\fR ?\fIrequirement...\fR?
.
This command is equivalent ta \fBpackage require\fR except dat it
does not try n' load tha package if it aint already loaded.
.TP
\fBpackage provide \fIpackage \fR?\fIversion\fR?
This command is invoked ta indicate dat version \fIversion\fR
of package \fIpackage\fR is now present up in tha interpreter.
It be typically invoked once as part of a \fBifneeded\fR script,
and again n' again n' again by tha package itself when it is finally loaded.
An error occurs if a gangbangin' finger-lickin' different version of \fIpackage\fR has been
provided by a previous \fBpackage provide\fR command.
If tha \fIversion\fR argument is omitted, then tha command
returns tha version number dat is currently provided, or an
empty strang if no \fBpackage provide\fR command has been
invoked fo' \fIpackage\fR up in dis interpreter n' shit.  
.TP
\fBpackage require\fR \fIpackage \fR?\fIrequirement...\fR?
This command is typically invoked by Tcl code dat wishes ta use
a particular version of a particular package.  Da arguments
indicate which package is wanted, n' tha command ensures that
a suitable version of tha package is loaded tha fuck into tha interpreter.
If tha command succeeds, it returns tha version number dat is
loaded;  otherwise it generates a error.
.RS
.PP
A suitable version of tha package be any version which satisfies at
least one of tha requirements, per tha rulez of \fBpackage
vsatisfies\fR. If multiple versions is suitable tha implementation
with tha highest version is chosen. I aint talkin' bout chicken n' gravy biatch. This last part be additionally
influenced by tha selection mode set wit \fBpackage prefer\fR.
.PP
In the
.QW stable
selection mode tha command will select tha highest
stable version satisfyin tha requirements, if any. If no stable
version satisfies tha requirements, tha highest unstable version
satisfyin tha requirements is ghon be selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  In the
.QW sickest fuckin
selection mode tha command will accept tha highest version satisfying
all tha requirements, regardless of its stableness.
.PP
If a version of \fIpackage\fR has already been provided (by invoking
the \fBpackage provide\fR command), then its version number must
satisfy tha \fIrequirement\fRs n' tha command returns immediately.
Otherwise, tha command searches tha database of shiznit provided by
previous \fBpackage ifneeded\fR commandz ta peep if a acceptable
version of tha package be available.
If so, tha script fo' tha highest aaight version number is evaluated
in tha global namespace;
it must do whatever is necessary ta load tha package,
includin callin \fBpackage provide\fR fo' tha package.
If tha \fBpackage ifneeded\fR database do not contain a acceptable
version of tha package n' a \fBpackage unknown\fR command has been
specified fo' tha interpreta then dat command is evaluated up in the
global namespace;  when
it completes, Tcl checks again n' again n' again ta peep if tha package is now provided
or if there be a \fBpackage ifneeded\fR script fo' dat shit.
If all of these steps fail ta provide a aaight version of the
package, then tha command returns a error.
.RE
.TP
\fBpackage require \-exact \fIpackage version\fR
This form of tha command is used when only tha given \fIversion\fR
of \fIpackage\fR be aaight ta tha calla n' shit.  This command is
equivalent ta \fBpackage require \fIpackage version\fR-\fIversion\fR.
.TP
\fBpackage unknown \fR?\fIcommand\fR?
This command supplies a
.QW "last resort"
command ta invoke during
\fBpackage require\fR if no suitable version of a package can be found
in tha \fBpackage ifneeded\fR database.
If tha \fIcommand\fR argument is supplied, it gotz nuff tha straight-up original gangsta part
of a cold-ass lil command;  when tha command is invoked durin a \fBpackage require\fR
command, Tcl appendz one or mo' additionizzle arguments givin tha desired
package name n' requirements.
For example, if \fIcommand\fR is \fBfoo bar\fR n' lata tha command
\fBpackage require test 2.4\fR is invoked, then Tcl will execute
the command \fBfoo bar test 2.4\fR ta load tha package.
If no requirements is supplied ta tha \fBpackage require\fR command,
then only tha name is ghon be added ta invoked command.
If tha \fBpackage unknown\fR command is invoked without a \fIcommand\fR
argument, then tha current \fBpackage unknown\fR script is returned,
or a empty strang if there is none.
If \fIcommand\fR is specified as a empty string, then tha current
\fBpackage unknown\fR script is removed, if there is one.
.TP
\fBpackage vcompare \fIversion1 version2\fR
Compares tha two version numbers given by \fIversion1\fR n' \fIversion2\fR.
Returns -1 if \fIversion1\fR be a earlier version than \fIversion2\fR,
0 if they is equal, n' 1 if \fIversion1\fR is lata than \fBversion2\fR.
.TP
\fBpackage versions \fIpackage\fR
Returns a list of all tha version numberz of \fIpackage\fR
for which shiznit has been provided by \fBpackage ifneeded\fR
commands.
.TP
\fBpackage vsatisfies \fIversion requirement...\fR
Returns 1 if tha \fIversion\fR satisfies at least one of tha given
requirements, n' 0 otherwise. Each \fIrequirement\fR be allowed to
have any of tha forms:
.RS
.TP
min
This form is called
.QW min-bounded .
.TP
min-
This form is called
.QW min-unbound .
.TP
min-max
This form is called
.QW bounded .
.RE
.RS
.PP
where
.QW min
and
.QW max
are valid version numbers. Da legacy syntax is
a special case of tha extended syntax, keepin backward
compatibility. Regardin satisfaction tha rulez are:
.RE
.RS
.IP [1]
Da \fIversion\fR has ta pass at least one of tha listed
\fIrequirement\fRs ta be satisfactory.
.IP [2]
A version satisfies a
.QW bounded
requirement when
.RS
.IP [a]
For \fImin\fR equal ta tha \fImax\fR if, n' only if tha \fIversion\fR
is equal ta tha \fImin\fR.
.IP [b]
Otherwise if, n' only if tha \fIversion\fR is pimped outa than or equal
to tha \fImin\fR, n' less than tha \fImax\fR, where both \fImin\fR
and \fImax\fR done been padded internally with
.QW a0 .
Note dat while tha comparison ta \fImin\fR is inclusive, the
comparison ta \fImax\fR is exclusive.
.RE
.IP [3]
A
.QW min-bounded
requirement be a
.QW bounded
requirement up in disguise,
with tha \fImax\fR part implicitly specified as tha next higher major
version number of tha \fImin\fR part fo' realz. A version satisfies it per the
rulez above.
.IP [4]
A \fIversion\fR satisfies a
.QW min-unbound
requirement if, n' only if it is pimped outa than or equal ta the
\fImin\fR, where tha \fImin\fR has been padded internally with
.QW a0 .
There is no constraint ta a maximum.
.RE
.TP
\fBpackage prefer \fR?\fBlatest\fR|\fBstable\fR?
With no arguments, tha commandz returns either
.QW sickest fuckin
or
.QW stable ,
whichever raps bout tha current mode of selection logic used by
\fBpackage require\fR.
.RS
.PP
When passed tha argument
.QW sickest fuckin ,
it sets tha selection logic mode to
.QW sickest fuckin .
.PP
When passed tha argument
.QW stable ,
if tha mode be already
.QW stable ,
that value is kept.  If tha mode be already
.QW sickest fuckin ,
then tha attempt ta set it back to
.QW stable
is ineffectizzle n' tha mode value remains
.QW sickest fuckin .
.PP
When passed any other value as a argument, raise a invalid argument
error.
.PP
When a interpreta is pimped, its initial selection mode value is set to
.QW stable
unless tha environment variable \fBTCL_PKG_PREFER_LATEST\fR
is set.  If dat environment variable is defined (with any value) then
the initial (and permanent) selection mode value is set to
.QW sickest fuckin .
.RE
.SH "VERSION NUMBERS"
.PP
Version numbers consist of one or mo' decimal numbers separated
by dots, like fuckin 2 or 1.162 or 3.1.13.1.
Da first number is called tha major version number.
Larger numbers correspond ta lata versionz of a package, with
leftmost numbers havin pimped outa significance.
For example, version 2.1 is lata than 1.3 n' version
3.4.6 is lata than 3.3.5.
Missin fieldz is equivalent ta zeroes:  version 1.3 is the
same as version 1.3.0 n' 1.3.0.0, so it is earlier than 1.3.1 or 1.3.0.2.
In addition, tha letters
.QW a
(alpha) and/or
.QW b
(beta) may appear
exactly once ta replace a thugged-out dot fo' separation. I aint talkin' bout chicken n' gravy biatch. These letters
semantically add a wack specifier tha fuck into tha version, where
.QW a
is \-2, and
.QW b
is \-1. Each may be specified only once, and
.QW a
or
.QW b
are mutually exclusive up in a specifier n' shit. Thus 1.3a1 becomes (semantically)
1.3.\-2.1, 1.3b1 is 1.3.\-1.1. Negatizzle numbers is not directly allowed
in version specifiers.
A version number not containin tha letters
.QW a
or
.QW b
as specified
above is called a \fBstable\fR version, whereas presence of tha letters
causes tha version ta be called is \fBunstable\fR.
A lata version number be assumed ta be upwardz compatible with
an earlier version number as long as both versions have tha same
major version number.
For example, Tcl scripts freestyled fo' version 2.3 of a package should
work unchanged under versions 2.3.2, 2.4, n' 2.5.1.
Changes up in tha major version number signify incompatible chizzles:
if code is freestyled ta use version 2.1 of a package, it aint guaranteed
to work unmodified wit either version 1.7.3 or version 3.1.
.SH "PACKAGE INDICES"
.PP
Da recommended way ta use packages up in Tcl is ta invoke \fBpackage require\fR
and \fBpackage provide\fR commandz up in scripts, n' use tha procedure
\fBpkg_mkIndex\fR ta create package index files.
Once you have done this, packages is ghon be loaded automatically
in response ta \fBpackage require\fR commands.
See tha documentation fo' \fBpkg_mkIndex\fR fo' details.
.SH EXAMPLES
To state dat a Tcl script requires tha Tk n' http packages, put this
at tha top of tha script:
.CS
\fBpackage require\fR Tk
\fBpackage require\fR http
.CE
.PP
To test ta peep if tha Snack package be available n' load if it is
(often useful fo' optionizzle enhancements ta programs where tha loss of
the functionalitizzle aint critical) do this:
.CS
if {[catch {\fBpackage require\fR Snack}]} {
   # Error thrown - package not found.
   # Set up a thugged-out dummy intercourse ta work round tha absence
} else {
   # Our thugged-out asses have tha package, configure tha app ta use it
}
.CE
.SH "SEE ALSO"
msgcat(n), packagens(n), pkgMkIndex(n)
.SH KEYWORDS
package, version
