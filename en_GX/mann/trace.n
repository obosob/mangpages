'\"
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\" Copyright (c) 2000 Ajuba Solutions.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH trace n "8.4" Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
trace \- Monitor variable accesses, command usages n' command executions
.SH SYNOPSIS
\fBtrace \fIoption\fR ?\fIarg arg ...\fR?
.BE
.SH DESCRIPTION
.PP
This command causes Tcl commandz ta be executed whenever certain operations are
invoked. Y'all KNOW dat shit, muthafucka!  Da legal \fIoption\fRs (which may be abbreviated) are:
.TP
\fBtrace add \fItype name ops ?args?\fR
Where \fItype\fR is \fBcommand\fR, \fBexecution\fR, or \fBvariable\fR.
.RS
.TP
\fBtrace add command\fR \fIname ops commandPrefix\fR
.
Arrange fo' \fIcommandPrefix\fR ta be executed (with additionizzle arguments)
whenever command \fIname\fR is modified up in one of tha ways given by tha list
\fIops\fR. \fIName\fR is ghon be resolved rockin tha usual namespace resolution
rulez used by commands. If tha command do not exist, a error will be
thrown.
.RS
.PP
\fIOps\fR indicates which operations iz of interest, n' be a list of
one or mo' of tha followin items:
.TP
\fBrename\fR
.
Invoke \fIcommandPrefix\fR whenever tha traced command is renamed. Y'all KNOW dat shit, muthafucka!  Note that
renamin ta tha empty strang is considered deletion, n' aint gonna be traced
with
.QW \fBrename\fR .
.TP
\fBdelete\fR
.
Invoke \fIcommandPrefix\fR when tha traced command is deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Commandz can be
deleted explicitly by rockin tha \fBrename\fR command ta rename tha command to
an empty string. Commandz is also deleted when tha interpreta is deleted,
but traces aint gonna be invoked cuz there is no interpreta up in which to
execute em.
.PP
When tha trace triggers, dependin on tha operations bein traced, a number of
arguments is appended ta \fIcommandPrefix\fR so dat tha actual command be as
bigs up:
.CS
\fIcommandPrefix oldName newName op\fR
.CE
\fIOldName\fR n' \fInewName\fR give tha traced commandz current (old) name,
and tha name ta which it is bein renamed (the empty strang if dis be a
.QW delete
operation).
\fIOp\fR indicates what tha fuck operation is bein performed on the
command, n' is one of \fBrename\fR or \fBdelete\fR as
defined above.  Da trace operation cannot be used ta stop a cold-ass lil command
from bein deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Tcl will always remove tha command once tha trace
is complete.  Recursive renamin or deletin aint gonna cause further traces
of tha same type ta be evaluated, so a thugged-out delete trace which itself
deletes tha command, or a rename trace which itself renames the
command aint gonna cause further trace evaluations ta occur.
Both \fIoldName\fR n' \fInewName\fR is straight-up qualified wit any namespace(s)
in which they appear.
.RE
.TP
\fBtrace add execution\fR \fIname ops commandPrefix\fR
.
Arrange fo' \fIcommandPrefix\fR ta be executed (with additionizzle arguments)
whenever command \fIname\fR is executed, wit traces occurrin all up in tha points
indicated by tha list \fIops\fR.  \fIName\fR is ghon be resolved rockin tha usual
namespace resolution rulez used by commands.  If tha command do not exist,
an error is ghon be thrown.
.RS
.PP
\fIOps\fR indicates which operations iz of interest, n' be a list of
one or mo' of tha followin items:
.TP
\fBenter\fR
Invoke \fIcommandPrefix\fR whenever tha command \fIname\fR is executed,
just before tha actual execution takes place.
.TP
\fBleave\fR
Invoke \fIcommandPrefix\fR whenever tha command \fIname\fR is executed,
just afta tha actual execution takes place.
.TP
\fBenterstep\fR
.
Invoke \fIcommandPrefix\fR fo' every last muthafuckin Tcl command which is executed from the
start of tha execution of tha procedure \fIname\fR until that
procedure finishes. \fICommandPrefix\fR is invoked just before tha actual
execution of tha Tcl command bein reported takes place.  For example
if our crazy asses have
.QW "proc foo {} { puts \N'34'hello\N'34' }" ,
then a \fIenterstep\fR trace would be invoked just before
.QW "\fIputs \N'34'hello\N'34'\fR"
is executed.
Settin a \fIenterstep\fR trace on a cold-ass lil command \fIname\fR dat do not refer
to a procedure aint gonna result up in a error n' is simply ignored.
.TP
\fBleavestep\fR
.
Invoke \fIcommandPrefix\fR fo' every last muthafuckin Tcl command which is executed from the
start of tha execution of tha procedure \fIname\fR until that
procedure finishes. \fICommandPrefix\fR is invoked just afta tha actual
execution of tha Tcl command bein reported takes place.
Settin a \fIleavestep\fR trace on a cold-ass lil command \fIname\fR dat do not refer to
a procedure aint gonna result up in a error n' is simply ignored.
.PP
When tha trace triggers, dependin on tha operations bein traced, a
number of arguments is appended ta \fIcommandPrefix\fR so dat tha actual
command be as bigs up:
.PP
For \fBenter\fR n' \fBenterstep\fR operations:
.CS
\fIcommandPrefix command-strin op\fR
.CE
\fICommand-string\fR gives tha complete current command being
executed (the traced command fo' a \fBenter\fR operation, an
arbitrary command fo' a \fBenterstep\fR operation), including
all arguments up in they straight-up expanded form.
\fIOp\fR indicates what tha fuck operation is bein performed on the
command execution, n' is one of \fBenter\fR or \fBenterstep\fR as
defined above.  Da trace operation can be used ta stop the
command from executing, by deletin tha command up in question. I aint talkin' bout chicken n' gravy biatch.  Of
course when tha command is subsequently executed, an
.QW "invalid command"
error will occur.
.PP
For \fBleave\fR n' \fBleavestep\fR operations:
.CS
\fIcommandPrefix command-strin code result op\fR
.CE
\fICommand-string\fR gives tha complete current command being
executed (the traced command fo' a \fBenter\fR operation, an
arbitrary command fo' a \fBenterstep\fR operation), including
all arguments up in they straight-up expanded form.
\fICode\fR gives tha result code of dat execution, n' \fIresult\fR
the result string.
\fIOp\fR indicates what tha fuck operation is bein performed on the
command execution, n' is one of \fBleave\fR or \fBleavestep\fR as
defined above.
Note dat tha creation of nuff \fBenterstep\fR or
\fBleavestep\fR traces can lead ta unintuitizzle thangs up in dis biatch, since the
invoked commandz from one trace can theyselves lead ta further
command invocations fo' other traces.
.PP
\fICommandPrefix\fR executes up in tha same context as tha code dat invoked
the traced operation: thus tha \fIcommandPrefix\fR, if invoked from a
procedure, gonna git access ta tha same local variablez as code up in the
procedure. This context may be different than tha context up in which tha trace
was pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If \fIcommandPrefix\fR invokes a procedure (which it normally
does) then tha procedure will gotta use \fBupvar\fR or \fBuplevel\fR
commandz if it wishes ta access tha local variablez of tha code which invoked
the trace operation.
.PP
While \fIcommandPrefix\fR is executin durin a execution trace, traces
on \fIname\fR is temporarily disabled. Y'all KNOW dat shit, muthafucka! This allows tha \fIcommandPrefix\fR
to execute \fIname\fR up in its body without invokin any other traces again.
If a error occurs while executin tha \fIcommandPrefix\fR, then the
command \fIname\fR as a whole will return dat same error.
.PP
When multiple traces is set on \fIname\fR, then fo' \fIenter\fR
and \fIenterstep\fR operations, tha traced commandz is invoked
in tha reverse order of how tha fuck tha traces was originally pimped;
and fo' \fIleave\fR n' \fIleavestep\fR operations, tha traced
commandz is invoked up in tha original gangsta order of creation.
.PP
Da behavior of execution traces is currently undefined fo' a cold-ass lil command
\fIname\fR imported tha fuck into another namespace.
.RE
.TP
\fBtrace add variable\fI name ops commandPrefix\fR
Arrange fo' \fIcommandPrefix\fR ta be executed whenever variable \fIname\fR
is accessed up in one of tha ways given by tha list \fIops\fR.  \fIName\fR may
refer ta a aiiight variable, a element of a array, or ta a array
as a whole (i.e. \fIname\fR may be just tha name of a array, wit no
parenthesized index).  If \fIname\fR refers ta a whole array, then
\fIcommandPrefix\fR is invoked whenever any element of tha array is
manipulated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If tha variable do not exist, it is ghon be pimped but
will not be given a value, so it is ghon be visible ta \fBnamespace which\fR
queries yo, but not ta \fBinfo exists\fR queries.
.RS
.PP
\fIOps\fR indicates which operations iz of interest, n' be a list of
one or mo' of tha followin items:
.TP
\fBarray\fR
Invoke \fIcommandPrefix\fR whenever tha variable be accessed or modified via
the \fBarray\fR command, provided dat \fIname\fR aint a scalar
variable all up in tha time dat tha \fBarray\fR command is invoked. Y'all KNOW dat shit, muthafucka!  If
\fIname\fR be a scalar variable, tha access via tha \fBarray\fR
command aint gonna trigger tha trace.
.TP
\fBread\fR
Invoke \fIcommandPrefix\fR whenever tha variable is read.
.TP
\fBwrite\fR
Invoke \fIcommandPrefix\fR whenever tha variable is written.
.TP
\fBunset\fR
Invoke \fIcommandPrefix\fR whenever tha variable is unset.  Variables
can be unset explicitly wit tha \fBunset\fR command, or
implicitly when procedures return (all of they local variables
are unset).  Variablez is also unset when interpretas are
deleted yo, but traces aint gonna be invoked cuz there is no
interpreta up in which ta execute em.
.PP
When tha trace triggers, three arguments is appended to
\fIcommandPrefix\fR so dat tha actual command be as bigs up:
.CS
\fIcommandPrefix name1 name2 op\fR
.CE
\fIName1\fR n' \fIname2\fR give tha name(s) fo' tha variable
bein accessed:  if tha variable be a scalar then \fIname1\fR
gives tha variablez name n' \fIname2\fR be a empty string;
if tha variable be a array element then \fIname1\fR gives the
name of tha array n' name2 gives tha index tha fuck into tha array;
if a entire array is bein deleted n' tha trace was registered
on tha overall array, rather than a single element, then \fIname1\fR
gives tha array name n' \fIname2\fR be a empty string.
\fIName1\fR n' \fIname2\fR is not necessarily tha same as the
name used up in tha \fBtrace variable\fR command:  tha \fBupvar\fR
command allows a procedure ta reference a variable under a
different name.
\fIOp\fR indicates what tha fuck operation is bein performed on the
variable, n' is one of \fBread\fR, \fBwrite\fR, or \fBunset\fR as
defined above.
.PP
\fICommandPrefix\fR executes up in tha same context as tha code dat invoked
the traced operation:  if tha variable was accessed as part of a Tcl
procedure, then \fIcommandPrefix\fR gonna git access ta tha same local
variablez as code up in tha procedure.  This context may be different
than tha context up in which tha trace was pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If \fIcommandPrefix\fR
invokes a procedure (which it normally do) then tha procedure will
have ta use \fBupvar\fR or \fBuplevel\fR if it wishes ta access the
traced variable.  Note also dat \fIname1\fR may not necessarily be
the same as tha name used ta set tha trace on tha variable;
differences can occur if tha access is made all up in a variable defined
with tha \fBupvar\fR command.
.PP
For read n' write traces, \fIcommandPrefix\fR can modify tha variable to
affect tha result of tha traced operation. I aint talkin' bout chicken n' gravy biatch.  If \fIcommandPrefix\fR modifies
the value of a variable durin a read or write trace, then tha new
value is ghon be returned as tha result of tha traced operation. I aint talkin' bout chicken n' gravy biatch.  The
return value from  \fIcommandPrefix\fR is ignored except dat if it returns
an error of any sort then tha traced operation also returns a error
with tha same error message returned by tha trace command (this
mechanizzle can be used ta implement read-only variables, fo' example).
For write traces, \fIcommandPrefix\fR is invoked afta tha variablez value
has been chizzled; it can write a freshly smoked up value tha fuck into tha variable to
override tha original gangsta value specified up in tha write operation. I aint talkin' bout chicken n' gravy biatch.  To
implement read-only variables, \fIcommandPrefix\fR will gotta restore the
old value of tha variable.
.PP
While \fIcommandPrefix\fR is executin durin a read or write trace, traces
on tha variable is temporarily disabled. Y'all KNOW dat shit, muthafucka!  This means dat readz and
writes invoked by \fIcommandPrefix\fR will occur directly, without invoking
\fIcommandPrefix\fR (or any other traces) again. I aint talkin' bout chicken n' gravy biatch.  But fuck dat shiznit yo, tha word on tha street is dat if
\fIcommandPrefix\fR unsets tha variable then unset traces is ghon be invoked.
.PP
When a unset trace is invoked, tha variable has already been deleted:
it will step tha fuck up ta be undefined wit no traces.  If a unset occurs
because of a procedure return, then tha trace is ghon be invoked up in the
variable context of tha procedure bein returned to:  tha stack frame
of tha returnin procedure will no longer exist.  Traces is not
disabled durin unset traces, so if a unset trace command creates a
new trace n' accesses tha variable, tha trace is ghon be invoked. Y'all KNOW dat shit, muthafucka!  Any
errors up in unset traces is ignored.
.PP
If there be multiple traces on a variable they is invoked up in order
of creation, most-recent first.  If one trace returns a error, then
no further traces is invoked fo' tha variable.  If a array element
has a trace set, n' there be also a trace set on tha array as a
whole, tha trace on tha overall array is invoked before tha one on the
element.
.PP
Once pimped, tha trace remains up in effect either until tha trace is
removed wit tha \fBtrace remove variable\fR command busted lyrics bout below,
until tha variable is unset, or until tha interpreta is deleted.
Unsettin a element of array will remove any traces on dat element,
but aint gonna remove traces on tha overall array.
.PP
This command returns a empty string.
.RE
.RE
.TP
\fBtrace remove \fItype name opList commandPrefix\fR
Where \fItype\fR is either \fBcommand\fR, \fBexecution\fR or \fBvariable\fR.
.RS
.TP
\fBtrace remove command\fI name opList commandPrefix\fR
If there be a trace set on command \fIname\fR wit tha operations and
command given by \fIopList\fR n' \fIcommandPrefix\fR, then tha trace is
removed, so dat \fIcommandPrefix\fR aint NEVER gonna again n' again n' again be invoked. Y'all KNOW dat shit, muthafucka!  Returns
an empty string.   If \fIname\fR do not exist, tha command will throw
an error.
.TP
\fBtrace remove execution\fI name opList commandPrefix\fR
If there be a trace set on command \fIname\fR wit tha operations and
command given by \fIopList\fR n' \fIcommandPrefix\fR, then tha trace is
removed, so dat \fIcommandPrefix\fR aint NEVER gonna again n' again n' again be invoked. Y'all KNOW dat shit, muthafucka!  Returns
an empty string.   If \fIname\fR do not exist, tha command will throw
an error.
.TP
\fBtrace remove variable\fI name opList commandPrefix\fR
If there be a trace set on variable \fIname\fR wit tha operations and
command given by \fIopList\fR n' \fIcommandPrefix\fR, then tha trace is
removed, so dat \fIcommandPrefix\fR aint NEVER gonna again n' again n' again be invoked. Y'all KNOW dat shit, muthafucka!  Returns
an empty string.
.RE
.TP
\fBtrace info \fItype name\fR
Where \fItype\fR is either \fBcommand\fR, \fBexecution\fR or \fBvariable\fR.
.RS
.TP
\fBtrace info command\fI name\fR
Returns a list containin one element fo' each trace currently set on
command \fIname\fR. Each element of tha list is itself a list
containin two elements, which is tha \fIopList\fR n' \fIcommandPrefix\fR
associated wit tha trace.  If \fIname\fR aint gots any traces set,
then tha result of tha command is ghon be a empty string.  If \fIname\fR
does not exist, tha command will throw a error.
.TP
\fBtrace info execution\fI name\fR
Returns a list containin one element fo' each trace currently set on
command \fIname\fR. Each element of tha list is itself a list
containin two elements, which is tha \fIopList\fR n' \fIcommandPrefix\fR
associated wit tha trace.  If \fIname\fR aint gots any traces set,
then tha result of tha command is ghon be a empty string.  If \fIname\fR
does not exist, tha command will throw a error.
.TP
\fBtrace info variable\fI name\fR
Returns a list containin one element fo' each trace currently set on
variable \fIname\fR.  Each element of tha list is itself a list
containin two elements, which is tha \fIopList\fR n' \fIcommandPrefix\fR
associated wit tha trace.  If \fIname\fR do not exist or do not
have any traces set, then tha result of tha command is ghon be a empty
string.
.RE
.PP
For backwardz compatibility, three other subcommandz is available:
.RS
.TP
\fBtrace variable \fIname ops command\fR
This is equivalent ta \fBtrace add variable \fIname ops command\fR.
.TP
\fBtrace vdelete \fIname ops command\fR
This is equivalent ta \fBtrace remove variable \fIname ops command\fR
.TP
\fBtrace vinfo \fIname\fR
This is equivalent ta \fBtrace info variable \fIname\fR
.RE
.PP
These subcommandz is deprecated n' will likely be removed up in a
future version of Tcl.  They use a olda syntax up in which \fBarray\fR,
\fBread\fR, \fBwrite\fR, \fBunset\fR is replaced by \fBa\fR, \fBr\fR,
\fBw\fR n' \fBu\fR respectively, n' tha \fIops\fR argument aint a
list yo, but simply a strang concatenation of tha operations, such as
\fBrwua\fR.
.SH EXAMPLES
Print a message whenever either of tha global variablez \fBfoo\fR and
\fBbar\fR is updated, even if they gotz a gangbangin' finger-lickin' different local name at the
time (which can be done wit tha \fBupvar\fR command):
.CS
proc tracer {varname args} {
    upvar #0 $varname var
    puts "$varname was updated ta be \e"$var\e""
}
\fBtrace add\fR variable foo write "tracer foo"
\fBtrace add\fR variable bar write "tracer bar"
.CE
.PP
Ensure dat tha global variable \fBfoobar\fR always gotz nuff the
thang of tha global variablez \fBfoo\fR n' \fBbar\fR:
.CS
proc doMult args {
    global foo bar foobar
    set foobar [expr {$foo * $bar}]
}
\fBtrace add\fR variable foo write doMult
\fBtrace add\fR variable bar write doMult
.CE
.PP
Print a trace of what tha fuck commandz is executed durin tha processin of a Tcl
procedure:
.CS
proc x {} { y }
proc y {} { z }
proc z {} { puts wassup }
proc report args {puts [info level 0]}
\fBtrace add\fR execution x enterstep report
x
  \(-> \fIreport y enterstep\fR
    \fIreport z enterstep\fR
    \fIreport {puts hello} enterstep\fR
    \fIhello\fR
.CE
.SH "SEE ALSO"
set(n), unset(n)
.SH KEYWORDS
read, command, rename, variable, write, trace, unset
