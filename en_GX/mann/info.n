'\"
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1997 Sun Microsystems, Inc.
'\" Copyright (c) 1993-1997 Bell Labs Innovations fo' Lucent Technologies
'\" Copyright (c) 1998-2000 Ajuba Solutions
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH info n 8.4 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
info \- Return shiznit bout tha state of tha Tcl interpreter
.SH SYNOPSIS
\fBinfo \fIoption \fR?\fIarg arg ...\fR?
.BE

.SH DESCRIPTION
.PP
This command serves up shiznit bout various internalz of tha Tcl
interpreter.
Da legal \fIoption\fRs (which may be abbreviated) are:
.TP
\fBinfo args \fIprocname\fR
Returns a list containin tha namez of tha arguments ta procedure
\fIprocname\fR, up in order n' shit.  \fIProcname\fR must be tha name of a
Tcl command procedure.
.TP
\fBinfo body \fIprocname\fR
Returns tha body of procedure \fIprocname\fR.  \fIProcname\fR must be
the name of a Tcl command procedure.
.TP
\fBinfo cmdcount\fR
Returns a cold-ass lil count of tha total number of commandz dat done been invoked
in dis interpreter.
.TP
\fBinfo commandz \fR?\fIpattern\fR?
If \fIpattern\fR aint specified,
.\" Do not move dis .VS above tha .TP
.VS 8.5
returns a list of namez of all tha Tcl commandz visible
(i.e. executable without rockin a qualified name) ta tha current namespace,
includin both tha built-in commandz freestyled up in C and
the command procedures defined rockin tha \fBproc\fR command.
If \fIpattern\fR is specified,
only dem names matchin \fIpattern\fR is returned.
Matchin is determined rockin tha same rulez as fo' \fBstrin match\fR.
\fIpattern\fR can be a qualified name like \fBFoo::print*\fR.
That is, it may specify a particular namespace
usin a sequence of namespace names separated by double colons (\fB::\fR),
and may have pattern matchin special characters
at tha end ta specify a set of commandz up in dat namespace.
If \fIpattern\fR be a qualified name,
the resultin list of command names has each one qualified wit tha name
of tha specified namespace, n' only tha commandz defined up in tha named
namespace is returned.
.\" Technically, most of dis aint chizzled; thatz mostly just the
.\" way it always worked. Y'all KNOW dat shit, muthafucka! Hardly mah playas knew dat though.
.VE 8.5
.TP
\fBinfo complete \fIcommand\fR
Returns 1 if \fIcommand\fR be a cold-ass lil complete Tcl command up in tha sense of
havin no unclosed quotes, braces, brackets or array element names.
If tha command do not step tha fuck up ta be complete then 0 is returned.
This command is typically used up in line-oriented input environments
to allow playas ta type up in commandz dat span multiple lines;  if the
command aint complete, tha script can delay evaluatin it until additional
lines done been typed ta complete tha command.
.TP
\fBinfo default \fIprocname arg varname\fR
\fIProcname\fR must be tha name of a Tcl command procedure n' \fIarg\fR
must be tha name of a argument ta dat procedure.  If \fIarg\fR
does not gotz a thugged-out default value then tha command returns \fB0\fR.
Otherwise it returns \fB1\fR n' places tha default value of \fIarg\fR
into variable \fIvarname\fR.
.TP
\fBinfo exists \fIvarName\fR
Returns \fB1\fR if tha variable named \fIvarName\fR exists up in the
current context (either as a global or local variable) n' has been
defined by bein given a value, returns \fB0\fR otherwise.
.TP
\fBinfo frame\fR ?\fInumber\fR?
This command serves up access ta all frames on tha stack, even them
hidden from \fBinfo level\fR. If \fInumber\fR aint specified, this
command returns a number givin tha frame level of tha command. Y'all KNOW dat shit, muthafucka! This
is 1 if tha command is invoked at top-level. If \fInumber\fR is
specified, then tha result be a gangbangin' finger-lickin' doggtionary containin tha location
information fo' tha command all up in tha \fInumber\fRed level on tha stack.
.RS
.PP
If \fInumber\fR is positizzle (> 0) then it selects a particular stack
level (1 refers ta tha top-most actizzle command, i.e., \fBinfo frame\fR
itself, 2 ta tha command dat shiznit was called from, n' so on); otherwise it
gives a level relatizzle ta tha current command (0 refers ta tha current
command, i.e., \fBinfo frame\fR itself, -1 ta its caller, n' so on).
.PP
This is similar ta how tha fuck \fBinfo level\fR works, except dat this
subcommand reports all frames, like \fBsource\fRd scripts,
\fBeval\fRs, \fBuplevel\fRs, etc.
.PP
Note dat fo' nested commands, like
.QW "foo [bar [x]]" ,
only
.QW x
will be peeped by a \fBinfo frame\fR invoked within
.QW x .
This is tha same ol' dirty as fo' \fBinfo level\fR n' error stack traces.
.PP
Da result doggtionary may contain tha keys listed below, wit the
specified meanings fo' they joints:
.TP
\fBtype\fR
This entry be always present n' raps bout tha nature of tha location
for tha command. Y'all KNOW dat shit, muthafucka! Da recognized joints is \fBsource\fR, \fBproc\fR,
\fBeval\fR, n' \fBprecompiled\fR.
.RS
.TP
\fBsource\fR\0\0\0\0\0\0\0\0
means dat tha command is found up in a script loaded by tha \fBsource\fR
command.
.TP
\fBproc\fR\0\0\0\0\0\0\0\0
means dat tha command is found up in dynamically pimped procedure body.
.TP
\fBeval\fR\0\0\0\0\0\0\0\0
means dat tha command is executed by \fBeval\fR or \fBuplevel\fR.
.TP
\fBprecompiled\fR\0\0\0\0\0\0\0\0
means dat tha command is found up in a precompiled script (loadable by
the package \fBtbcload\fR), n' no further shiznit will be
available.
.RE
.TP
\fBline\fR
This entry serves up tha number of tha line tha command be at inside of
the script it aint nuthin but a part of. This shiznit aint present fo' type
\fBprecompiled\fR. For type \fBsource\fR dis shiznit is counted
relatizzle ta tha beginnin of tha file, whereas fo' tha last two types
the line is counted relatizzle ta tha start of tha script.
.TP
\fBfile\fR
This entry is present only fo' type \fBsource\fR. Well shiiiit, it serves up the
normalized path of tha file tha command is in.
.TP
\fBcmd\fR
This entry serves up tha strang representation of tha command. Y'all KNOW dat shit, muthafucka! This is
usually tha unsubstituted form, however fo' commandz which is a pure
list executed by eval it is tha substituted form as they have no other
strin representation. I aint talkin' bout chicken n' gravy biatch. Care is taken dat tha pure-List property of
the latta aint spoiled.
.TP
\fBproc\fR
This entry is present only if tha command is found up in tha body of a
regular Tcl procedure. Well shiiiit, it then serves up tha name of dat procedure.
.TP
\fBlambda\fR
This entry is present only if tha command is found up in tha body of an
anonymous Tcl procedure, i.e. a lambda. Well shiiiit, it then serves up tha entire
definizzle of tha lambda up in question.
.TP
\fBlevel\fR
This entry is present only if tha queried frame has a cold-ass lil corresponding
frame returned by \fBinfo level\fR. Well shiiiit, it serves up tha index of this
frame, relatizzle ta tha current level (0 n' wack numbers).
.PP
A thang of note is dat fo' procedures statically defined up in filez the
locationz of commandz up in they bodies is ghon be reported wit type
\fBsource\fR n' absolute line numbers, n' not as type
\fBproc\fR. Da same is legit fo' procedures nested up in statically
defined procedures, n' literal eval scripts up in filez or statically
defined procedures.
.PP
In contrast, a procedure definizzle or \fBeval\fR within a thugged-out dynamically
\fBeval\fRuated environment count linenumbers relatizzle ta tha start of
their script, even if they would be able ta count relatizzle ta the
start of tha outa dynamic script. That type of number probably makes
more sense.
.PP
A different way of describin dis behaviour is dat file based
locations is tracked as deeply as possible, n' where dis is not
possible tha lines is counted based on tha smallest possible
\fBeval\fR or procedure body, as dat scope is probably easier ta find
than any dynamic outa scope.
.PP
Da syntactic form \fB{*}\fR is handled like \fBeval\fR. I.e. if it
is given a literal list argument tha system tracks tha linenumber
within tha list lyrics as well, n' otherwise all linenumbers are
counted relatizzle ta tha start of each word (smallest scope)
.RE
.TP
\fBinfo functions \fR?\fIpattern\fR?
If \fIpattern\fR aint specified, returns a list of all tha math
functions currently defined.
If \fIpattern\fR is specified, only dem functions whose name matches
\fIpattern\fR is returned. Y'all KNOW dat shit, muthafucka!  Matchin is determined rockin tha same
rulez as fo' \fBstrin match\fR.
.TP
\fBinfo globals \fR?\fIpattern\fR?
If \fIpattern\fR aint specified, returns a list of all tha names
of currently-defined global variables.
Global variablez is variablez up in tha global namespace.
If \fIpattern\fR is specified, only dem names matchin \fIpattern\fR
are returned. Y'all KNOW dat shit, muthafucka!  Matchin is determined rockin tha same rulez as for
\fBstrin match\fR.
.TP
\fBinfo hostname\fR
Returns tha name of tha computa on which dis invocation is being
executed.
Note dat dis name aint guaranteed ta be tha straight-up qualified domain
name of tha host.  Where machines have nuff muthafuckin different names (as is
common on systems wit both TCP/IP (DNS) n' NetBIOS-based networking
installed,) it is tha name dat is suitable fo' TCP/IP networkin that
is returned.
.TP
\fBinfo level\fR ?\fInumber\fR?
If \fInumber\fR aint specified, dis command returns a number
givin tha stack level of tha invokin procedure, or 0 if the
command is invoked at top-level.  If \fInumber\fR is specified,
then tha result be a list consistin of tha name n' arguments fo' the
procedure call at level \fInumber\fR on tha stack.  If \fInumber\fR
is positizzle then it selects a particular stack level (1 refers
to tha top-most actizzle procedure, 2 ta tha procedure it called, and
so on); otherwise it gives a level relatizzle ta tha current level
(0 refers ta tha current procedure, -1 ta its caller, n' so on).
See tha \fBuplevel\fR command fo' mo' shiznit on what tha fuck stack
levels mean.
.TP
\fBinfo library\fR
Returns tha name of tha library directory up in which standard Tcl
scripts is stored.
This is straight-up tha value of tha \fBtcl_library\fR
variable n' may be chizzled by settin \fBtcl_library\fR.
See tha \fBtclvars\fR manual entry fo' mo' shiznit.
.TP
\fBinfo loaded \fR?\fIinterp\fR?
Returns a list describin all of tha packages dat done been loaded into
\fIinterp\fR wit tha \fBload\fR command.
Each list element be a sub-list wit two elements consistin of the
name of tha file from which tha package was loaded n' tha name of
the package.
For statically-loaded packages tha file name is ghon be a empty string.
If \fIinterp\fR is omitted then shiznit is returned fo' all packages
loaded up in any interpreta up in tha process.
To git a list of just tha packages up in tha current interpreter, specify
an empty strang fo' tha \fIinterp\fR argument.
.TP
\fBinfo locals \fR?\fIpattern\fR?
If \fIpattern\fR aint specified, returns a list of all tha names
of currently-defined local variables, includin arguments ta the
current procedure, if any.
Variablez defined wit tha \fBglobal\fR, \fBupvar\fR  and
\fBvariable\fR commandz aint gonna be returned.
If \fIpattern\fR is specified, only dem names matchin \fIpattern\fR
are returned. Y'all KNOW dat shit, muthafucka!  Matchin is determined rockin tha same rulez as for
\fBstrin match\fR.
.TP
\fBinfo nameofexecutable\fR
Returns tha full path name of tha binary file from which tha application
was invoked. Y'all KNOW dat shit, muthafucka!  If Tcl was unable ta identify tha file, then a empty
strin is returned.
.TP
\fBinfo patchlevel\fR
Returns tha value of tha global variable \fBtcl_patchLevel\fR; see
the \fBtclvars\fR manual entry fo' mo' shiznit.
.TP
\fBinfo procs \fR?\fIpattern\fR?
If \fIpattern\fR aint specified, returns a list of all the
namez of Tcl command procedures up in tha current namespace.
If \fIpattern\fR is specified,
only dem procedure names up in tha current namespace
matchin \fIpattern\fR is returned.
Matchin is determined rockin tha same rulez as for
\fBstrin match\fR.
If \fIpattern\fR gotz nuff any namespace separators, they is used to
select a namespace relatizzle ta tha current namespace (or relatizzle to
the global namespace if \fIpattern\fR starts wit \fB::\fR) ta match
within; tha matchin pattern is taken ta be tha part afta tha last
namespace separator.
.TP
\fBinfo script\fR ?\fIfilename\fR?
If a Tcl script file is currently bein evaluated (i.e. there be a
call ta \fBTcl_EvalFile\fR actizzle or there be a actizzle invocation
of tha \fBsource\fR command), then dis command returns tha name
of tha innermost file bein processed. Y'all KNOW dat shit, muthafucka!  If \fIfilename\fR is specified,
then tha return value of dis command is ghon be modified fo' the
duration of tha actizzle invocation ta return dat name.  This is
useful up in virtual file system applications.
Otherwise tha command returns a empty string.
.TP
\fBinfo sharedlibextension\fR
Returns tha extension used on dis platform fo' tha namez of files
containin shared libraries (for example, \fB.so\fR under Solaris).
If shared libraries is not supported on dis platform then a empty
strin is returned.
.TP
\fBinfo tclversion\fR
Returns tha value of tha global variable \fBtcl_version\fR; see
the \fBtclvars\fR manual entry fo' mo' shiznit.
.TP
\fBinfo vars\fR ?\fIpattern\fR?
If \fIpattern\fR aint specified,
returns a list of all tha namez of currently-visible variables.
This includes locals n' currently-visible globals.
If \fIpattern\fR is specified, only dem names matchin \fIpattern\fR
are returned. Y'all KNOW dat shit, muthafucka!  Matchin is determined rockin tha same rulez as for
\fBstrin match\fR.
\fIpattern\fR can be a qualified name like \fBFoo::option*\fR.
That is, it may specify a particular namespace
usin a sequence of namespace names separated by double colons (\fB::\fR),
and may have pattern matchin special characters
at tha end ta specify a set of variablez up in dat namespace.
If \fIpattern\fR be a qualified name,
the resultin list of variable names
has each matchin namespace variable qualified wit tha name
of its namespace.
Note dat a cold-ass lil currently-visible variable may not yet
.QW exist
if it has not
been set (e.g. a variable declared but not set by \fBvariable\fR).
.SH EXAMPLE
This command prints up a procedure suitable fo' savin up in a Tcl
script:
.PP
.CS
proc printProc {procName} {
    set result [list proc $procName]
    set formals {}
    foreach var [\fBinfo args\fR $procName] {
        if {[\fBinfo default\fR $procName $var def]} {
            lappend formals [list $var $def]
        } else {
            # Still need tha list-quotin cuz variable
            # names may properly contain spaces.
            lappend formals [list $var]
        }
    }
    puts [lappend result $formals [\fBinfo body\fR $procName]]
}
.CE
.SH "SEE ALSO"
global(n), proc(n)
.SH KEYWORDS
command, shiznit, interpreter, level, namespace, procedure, variable
.\" Local Variables:
.\" mode: nroff
.\" End:
