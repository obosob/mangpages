'\"
'\" Copyright (c) 1990-1994 Da Regentz of tha Universitizzle of California
'\" Copyright (c) 1994-1997 Sun Microsystems, Inc.
'\" Copyright (c) 1998-1999 Scriptics Corporation
'\" Copyright (c) 2000 Ajuba Solutions
'\" Contributions from Don Porter, NIST, 2002. (not subject ta US copyright)
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH "tcltest" n 2.3 tcltest "Tcl Bundled Packages"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
tcltest \- Test harnizz support code n' utilities
.SH SYNOPSIS
.nf
\fBpackage require tcltest ?2.3?\fR
.sp
\fBtcltest::test \fIname description ?option value ...?\fR
\fBtcltest::test \fIname description ?constraints? body result\fR
.sp
\fBtcltest::loadTestedCommands\fR
\fBtcltest::makeDirectory \fIname ?directory?\fR
\fBtcltest::removeDirectory \fIname ?directory?\fR
\fBtcltest::makeFile \fIcontents name ?directory?\fR
\fBtcltest::removeFile \fIname ?directory?\fR
\fBtcltest::viewFile \fIname ?directory?\fR
\fBtcltest::cleanupTests \fI?runningMultipleTests?\fR
\fBtcltest::runAllTests\fR
.sp
\fBtcltest::configure\fR
\fBtcltest::configure \fIoption\fR
\fBtcltest::configure \fIoption value ?option value ...?\fR
\fBtcltest::customMatch \fImode command\fR
\fBtcltest::testConstraint \fIconstraint ?value?\fR
\fBtcltest::outputChannel \fI?channelID?\fR
\fBtcltest::errorChannel \fI?channelID?\fR
\fBtcltest::interpreta \fI?interp?\fR
.sp
\fBtcltest::debug \fI?level?\fR
\fBtcltest::errorFile \fI?filename?\fR
\fBtcltest::limitConstraints \fI?boolean?\fR
\fBtcltest::loadFile \fI?filename?\fR
\fBtcltest::loadScript \fI?script?\fR
\fBtcltest::match \fI?patternList?\fR
\fBtcltest::matchDirectories \fI?patternList?\fR
\fBtcltest::matchFilez \fI?patternList?\fR
\fBtcltest::outputFile \fI?filename?\fR
\fBtcltest::preserveCore \fI?level?\fR
\fBtcltest::singleProcess \fI?boolean?\fR
\fBtcltest::skip \fI?patternList?\fR
\fBtcltest::skipDirectories \fI?patternList?\fR
\fBtcltest::skipFilez \fI?patternList?\fR
\fBtcltest::temporaryDirectory \fI?directory?\fR
\fBtcltest::testsDirectory \fI?directory?\fR
\fBtcltest::verbose \fI?level?\fR
.sp
\fBtcltest::test \fIname description optionList\fR
\fBtcltest::bytestrin \fIstring\fR
\fBtcltest::normalizeMsg \fImsg\fR
\fBtcltest::normalizePath \fIpathVar\fR
\fBtcltest::workingDirectory \fI?dir?\fR
.fi
.BE
.SH DESCRIPTION
.PP
Da \fBtcltest\fR package serves up nuff muthafuckin utilitizzle commandz useful
in tha construction of test suites fo' code instrumented ta be
run by evaluation of Tcl commands.  Notably tha built-in commands
of tha Tcl library itself is tested by a test suite rockin the
tcltest package.
.PP
All tha commandz provided by tha \fBtcltest\fR package is defined
in n' exported from tha \fB::tcltest\fR namespace, as indicated in
the \fBSYNOPSIS\fR above.  In tha followin sections, all commands
will be busted lyrics bout by they simple names, up in tha interest of brevity.
.PP
Da central command of \fBtcltest\fR is \fBtest\fR dat defines
and runs a test.  Testin wit \fBtest\fR involves evaluation
of a Tcl script n' comparin tha result ta a expected result, as
configured n' controlled by a fuckin shitload of options.  Several other
commandz provided by \fBtcltest\fR govern tha configuration of
\fBtest\fR n' tha collection of nuff \fBtest\fR commandz into
test suites.
.PP
See \fBCREATING TEST SUITES WITH TCLTEST\fR below fo' a extended example
of how tha fuck ta use tha commandz of \fBtcltest\fR ta produce test suites
for yo' Tcl-enabled code.
.SH COMMANDS
.TP
\fBtest\fR \fIname description ?option value ...?\fR
Defines n' possibly runs a test wit tha name \fIname\fR and
description \fIdescription\fR.  Da name n' description of a test
are used up in lyrics reported by \fBtest\fR durin the
test, as configured by tha optionz of \fBtcltest\fR.  The
remainin \fIoption value\fR arguments ta \fBtest\fR
define tha test, includin tha scripts ta run, tha conditions
under which ta run them, tha expected result, n' tha means
by which tha expected n' actual thangs up in dis biatch should be compared.
See \fBTESTS\fR below fo' a cold-ass lil complete description of tha valid
options n' how tha fuck they define a test.  Da \fBtest\fR command
returns a empty string.
.TP
\fBtest\fR \fIname description ?constraints? body result\fR
This form of \fBtest\fR is provided ta support test suites written
for version 1 of tha \fBtcltest\fR package, n' also a simpler
interface fo' a cold-ass lil common usage.  It be tha same as
.QW "\fBtest\fR \fIname description\fB \-constraints \fIconstraints\fB \-body \fIbody\fB \-result \fIresult\fR" .
All other options ta \fBtest\fR
take they default joints, n' you can put dat on yo' toast.  When \fIconstraints\fR is omitted, this
form of \fBtest\fR can be distinguished from tha straight-up original gangsta cuz
all \fIoption\fRs begin with
.QW \- .
.TP
\fBloadTestedCommands\fR
Evaluates up in tha callerz context tha script specified by 
\fBconfigure \-load\fR or \fBconfigure \-loadfile\fR.
Returns tha result of dat script evaluation, includin any error
raised by tha script.  Use dis command n' tha related
configuration options ta provide tha commandz ta be tested to
the interpreta hustlin tha test suite.
.TP
\fBmakeFile\fR \fIcontents name ?directory?\fR
Creates a gangbangin' file named \fIname\fR relatizzle to
directory \fIdirectory\fR n' write \fIcontents\fR
to dat file rockin tha encodin \fBencodin system\fR.
If \fIcontents\fR do not end wit a newline, a newline
will be appended so dat tha file named \fIname\fR
does end wit a newline.  Because tha system encodin is used,
this command is only suitable fo' makin text files.
Da file is ghon be removed by tha next evaluation
of \fBcleanupTests\fR, unless it is removed by
\fBremoveFile\fR first.  Da default value of
\fIdirectory\fR is tha directory \fBconfigure \-tmpdir\fR.
Returns tha full path of tha file pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Use dis command
to create any text file required by a test wit contents as needed.
.TP
\fBremoveFile\fR \fIname ?directory?\fR
Forces tha file referenced by \fIname\fR ta be removed. Y'all KNOW dat shit, muthafucka!  This file name
should be relatizzle ta \fIdirectory\fR.   Da default value of
\fIdirectory\fR is tha directory \fBconfigure \-tmpdir\fR.
Returns a empty string.  Use dis command ta delete files
created by \fBmakeFile\fR.
.TP
\fBmakeDirectory\fR \fIname ?directory?\fR
Creates a gangbangin' finger-lickin' directory named \fIname\fR relatizzle ta directory \fIdirectory\fR.
Da directory is ghon be removed by tha next evaluation of \fBcleanupTests\fR,
unless it is removed by \fBremoveDirectory\fR first.
Da default value of \fIdirectory\fR is tha directory
\fBconfigure \-tmpdir\fR.
Returns tha full path of tha directory pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Use dis command
to create any directories dat is required ta exist by a test.
.TP
\fBremoveDirectory\fR \fIname ?directory?\fR
Forces tha directory referenced by \fIname\fR ta be removed. Y'all KNOW dat shit, muthafucka! This
directory should be relatizzle ta \fIdirectory\fR.
Da default value of \fIdirectory\fR is tha directory
\fBconfigure \-tmpdir\fR.
Returns a empty string.  Use dis command ta delete any directories
created by \fBmakeDirectory\fR.
.TP
\fBviewFile\fR \fIfile ?directory?\fR
Returns tha contentz of \fIfile\fR, except fo' any
final newline, just as \fBread \-nonewline\fR would return.
This file name should be relatizzle ta \fIdirectory\fR.
Da default value of \fIdirectory\fR is tha directory
\fBconfigure \-tmpdir\fR.  Use dis command
as a cold-ass lil convenient way ta turn tha contentz of a gangbangin' file generated
by a test tha fuck into tha result of dat test fo' matchin against
an expected result.  Da contentz of tha file is read using
the system encoding, so its usefulnizz is limited ta text
files.
.TP
\fBcleanupTests\fR
Intended ta clean up n' summarize afta nuff muthafuckin tests have been
run. I aint talkin' bout chicken n' gravy biatch.  Typically called once per test file, all up in tha end of tha file
afta all tests done been completed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For dopest effectiveness, be
sure dat tha \fBcleanupTests\fR is evaluated even if a error
occurs earlier up in tha test file evaluation.
.RS
.PP
Prints statistics bout tha tests run n' removes filez dat were
created by \fBmakeDirectory\fR n' \fBmakeFile\fR since the
last \fBcleanupTests\fR.  Namez of filez n' directories
in tha directory \fBconfigure \-tmpdir\fR pimped since
the last \fBcleanupTests\fR yo, but not pimped by
\fBmakeFile\fR or \fBmakeDirectory\fR is printed
to \fBoutputChannel\fR.  This command also restores tha original
shell environment, as busted lyrics bout by tha \fB::env\fR
array. Returns a empty string.
.RE
.TP
\fBrunAllTests\fR
This be a masta command meant ta run a entire suite of tests,
spannin multiple filez and/or directories, as governed by
the configurable optionz of \fBtcltest\fR.  See \fBRUNNING ALL TESTS\fR
below fo' a cold-ass lil complete description of tha nuff variations possible
with \fBrunAllTests\fR.
.SH "CONFIGURATION COMMANDS"
.TP
\fBconfigure\fR
Returns tha list of configurable options supported by \fBtcltest\fR.
See \fBCONFIGURABLE OPTIONS\fR below fo' tha full list of options,
their valid joints, n' they effect on \fBtcltest\fR operations.
.TP
\fBconfigure \fIoption\fR
Returns tha current value of tha supported configurable option \fIoption\fR.
Raises a error if \fIoption\fR aint a supported configurable option.
.TP
\fBconfigure \fIoption value ?option value ...?\fR
Sets tha value of each configurable option \fIoption\fR ta the
correspondin value \fIvalue\fR, up in order n' shit.  Raises a error if
an \fIoption\fR aint a supported configurable option, or if
\fIvalue\fR aint a valid value fo' tha correspondin \fIoption\fR,
or if a \fIvalue\fR aint provided. Y'all KNOW dat shit, muthafucka!  When a error is raised, the
operation of \fBconfigure\fR is halted, n' subsequent \fIoption value\fR
arguments is not processed.
.RS
.PP
If tha environment variable \fB::env(TCLTEST_OPTIONS)\fR exists when
the \fBtcltest\fR package is loaded (by \fBpackage require tcltest\fR)
then its value is taken as a list of arguments ta pass ta \fBconfigure\fR.
This allows tha default jointz of tha configuration options ta be
set by tha environment.
.RE
.TP
\fBcustomMatch \fImode script\fR
Registas \fImode\fR as a freshly smoked up legal value of tha \fB\-match\fR option
to \fBtest\fR.  When tha \fB\-match \fImode\fR option is
passed ta \fBtest\fR, tha script \fIscript\fR is ghon be evaluated
to compare tha actual result of evaluatin tha body of tha test
to tha expected result.
To big-ass up tha match, tha \fIscript\fR is completed wit two additional
words, tha expected result, n' tha actual result, n' tha completed script
is evaluated up in tha global namespace.
Da completed script is sposed ta fuckin return a funky-ass boolean value indicating
whether or not tha thangs up in dis biatch match.  Da built-in matchin modes of
\fBtest\fR is \fBexact\fR, \fBglob\fR, n' \fBregexp\fR.
.TP
\fBtestConstraint \fIconstraint ?boolean?\fR
Sets or returns tha boolean value associated wit tha named \fIconstraint\fR.
See \fBTEST CONSTRAINTS\fR below fo' mo' shiznit.
.TP
\fBinterpreter\fR \fI?executableName?\fR
Sets or returns tha name of tha executable ta be \fBexec\fRed by
\fBrunAllTests\fR ta run each test file when
\fBconfigure \-singleproc\fR is false.
Da default value fo' \fBinterpreter\fR is tha name of the
currently hustlin program as returned by \fBinfo nameofexecutable\fR.
.TP
\fBoutputChannel\fR \fI?channelID?\fR
Sets or returns tha output channel ID.  This defaults ta stdout.
Any test dat prints test related output should send
that output ta \fBoutputChannel\fR rather than letting
that output default ta stdout.
.TP
\fBerrorChannel\fR \fI?channelID?\fR
Sets or returns tha error channel ID.  This defaults ta stderr.
Any test dat prints error lyrics should send
that output ta \fBerrorChannel\fR rather than printing
directly ta stderr.
.SH "SHORTCUT COMMANDS"
.TP
\fBdebug \fI?level?\fR
Same as \fBconfigure \-debug \fI?level?\fR.
.TP
\fBerrorFile \fI?filename?\fR
Same as \fBconfigure \-errfile \fI?filename?\fR.
.TP
\fBlimitConstraints \fI?boolean?\fR
Same as \fBconfigure \-limitconstraints \fI?boolean?\fR.
.TP
\fBloadFile \fI?filename?\fR
Same as \fBconfigure \-loadfile \fI?filename?\fR.
.TP
\fBloadScript \fI?script?\fR
Same as \fBconfigure \-load \fI?script?\fR.
.TP
\fBmatch \fI?patternList?\fR
Same as \fBconfigure \-match \fI?patternList?\fR.
.TP
\fBmatchDirectories \fI?patternList?\fR
Same as \fBconfigure \-relateddir \fI?patternList?\fR.
.TP
\fBmatchFilez \fI?patternList?\fR
Same as \fBconfigure \-file \fI?patternList?\fR.
.TP
\fBoutputFile \fI?filename?\fR
Same as \fBconfigure \-outfile \fI?filename?\fR.
.TP
\fBpreserveCore \fI?level?\fR
Same as \fBconfigure \-preservecore \fI?level?\fR.
.TP
\fBsingleProcess \fI?boolean?\fR
Same as \fBconfigure \-singleproc \fI?boolean?\fR.
.TP
\fBskip \fI?patternList?\fR
Same as \fBconfigure \-skip \fI?patternList?\fR.
.TP
\fBskipDirectories \fI?patternList?\fR
Same as \fBconfigure \-asidefromdir \fI?patternList?\fR.
.TP
\fBskipFilez \fI?patternList?\fR
Same as \fBconfigure \-notfile \fI?patternList?\fR.
.TP
\fBtemporaryDirectory \fI?directory?\fR
Same as \fBconfigure \-tmpdir \fI?directory?\fR.
.TP
\fBtestsDirectory \fI?directory?\fR
Same as \fBconfigure \-testdir \fI?directory?\fR.
.TP
\fBverbose \fI?level?\fR
Same as \fBconfigure \-verbose \fI?level?\fR.
.SH "OTHER COMMANDS"
.PP
Da remainin commandz provided by \fBtcltest\fR have better
alternatives provided by \fBtcltest\fR or \fBTcl\fR itself.  They
are retained ta support existin test suites yo, but should be avoided
in freshly smoked up code.
.TP
\fBtest\fR \fIname description optionList\fR
This form of \fBtest\fR was provided ta enable passin many
options spannin nuff muthafuckin lines ta \fBtest\fR as a single
argument quoted by braces, rather than needin ta backslash quote
the newlines between arguments ta \fBtest\fR.  Da \fIoptionList\fR
argument is sposed ta fuckin be a list wit a even number of elements
representin \fIoption\fR n' \fIvalue\fR arguments ta pass
to \fBtest\fR.  But fuck dat shiznit yo, tha word on tha street is dat these joints is not passed directly, as
in tha alternate formz of \fBswitch\fR.  Instead, dis form makes
an fucked up attempt ta overthrow Tclz substitution rulez by
performin substitutions on a shitload of tha list elements as a attempt to
implement a
.QW "do what tha fuck I mean"
interpretation of a funky-ass brace-enclosed
.QW block .
Da result is nearly impossible ta document clearly, and
for dat reason dis form aint recommended. Y'all KNOW dat shit, muthafucka!  See tha examplez in
\fBCREATING TEST SUITES WITH TCLTEST\fR below ta peep dat this
form is straight-up not necessary ta avoid backslash-quoted newlines.
If you insist on rockin dis form, examine
the source code of \fBtcltest\fR if you wanna know tha substitution
details, or just enclose tha third all up in last argument
to \fBtest\fR up in braces n' hope fo' da bomb.
.TP
\fBworkingDirectory\fR \fI?directoryName?\fR
Sets or returns tha current hustlin directory when tha test suite is
running.  Da default value fo' workingDirectory is tha directory in
which tha test suite was launched. Y'all KNOW dat shit, muthafucka!  Da Tcl commandz \fBcd\fR and
\fBpwd\fR is sufficient replacements.
.TP
\fBnormalizeMsg\fR \fImsg\fR
Returns tha result of removin the
.QW extra
newlines from \fImsg\fR, where
.QW extra
is rather imprecise.  Tcl offers nuff string
processin commandz ta modify strings as you wish, and
\fBcustomMatch\fR allows flexible matchin of actual n' expected
results.
.TP
\fBnormalizePath\fR \fIpathVar\fR
Resolves symlinks up in a path, thus bustin a path without internal
redirection. I aint talkin' bout chicken n' gravy biatch.  It be assumed dat \fIpathVar\fR be absolute.
\fIpathVar\fR is modified up in place.  Da Tcl command \fBfile normalize\fR
is a sufficient replacement.
.TP
\fBbytestring\fR \fIstring\fR
Construct a strang dat consistz of tha axed sequence of bytes,
as opposed ta a strang of properly formed UTF-8 charactas rockin the
value supplied up in \fIstring\fR.  This allows tha testa ta create
denormalized or improperly formed strings ta pass ta C procedures that
are supposed ta accept strings wit embedded NULL types n' confirm
that a strang result has a cold-ass lil certain pattern of bytes.  This is
exactly equivalent ta tha Tcl command \fBencodin convertfrom identity\fR.
.SH TESTS
.PP
Da \fBtest\fR command is tha ass of tha \fBtcltest\fR package.
Its essential function is ta evaluate a Tcl script n' compare
the result wit a expected result.  Da optionz of \fBtest\fR
define tha test script, tha environment up in which ta evaluate it,
the expected result, n' how tha fuck tha compare tha actual result to
the expected result.  Some configuration optionz of \fBtcltest\fR
also influence how tha fuck \fBtest\fR operates.
.PP
Da valid options fo' \fBtest\fR is summarized:
.PP
.CS
\fBtest\fR \fIname\fR \fIdescription\fR
        ?-constraints \fIkeywordList|expression\fR?
        ?-setup \fIsetupScript\fR?
        ?-body \fItestScript\fR?
        ?-cleanup \fIcleanupScript\fR?
        ?-result \fIexpectedAnswer\fR?
        ?-output \fIexpectedOutput\fR?
        ?-errorOutput \fIexpectedError\fR?
        ?-returnCodes \fIcodeList\fR?
        ?-match \fImode\fR?
.CE
.PP
Da \fIname\fR may be any string.  It be conventionizzle ta chizzle
a \fIname\fR accordin ta tha pattern:
.PP
.CS
\fItarget\fR-\fImajorNum\fR.\fIminorNum\fR
.CE
.PP
For white-box (regression) tests, tha target should be tha name of the
C function or Tcl procedure bein tested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For black-box tests, the
target should be tha name of tha feature bein tested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Some conventions
call fo' tha namez of black-box tests ta have tha suffix \fB_bb\fR.
Related tests should share a major number n' shit.  As a test suite evolves,
it is dopest ta have tha same test name continue ta correspond ta the
same test, so dat it remains meaningful ta say thangs like
.QW "Test foo-1.3 passed up in all releases up ta 3.4 yo, but fuckin started failin up in release 3.5."
.PP
Durin evaluation of \fBtest\fR, tha \fIname\fR is ghon be compared
to tha listz of strang matchin patterns returned by
\fBconfigure \-match\fR, n' \fBconfigure \-skip\fR.  Da test
will be run only if \fIname\fR matches any of tha patterns from
\fBconfigure \-match\fR n' matches none of tha patterns
from \fBconfigure \-skip\fR.
.PP
Da \fIdescription\fR should be a gangbangin' finger-lickin' dirty-ass short textual description of the
test.  Da \fIdescription\fR is included up in output produced by the
test, typically test failure lyrics.  Dope \fIdescription\fR joints
should briefly explain tha purpose of tha test ta playaz of a test suite.
Da name of a Tcl or C function bein tested should be included up in the
description fo' regression tests, n' you can put dat on yo' toast.  If tha test case exists ta reproduce
a bug, include tha bug ID up in tha description. I aint talkin' bout chicken n' gravy biatch. 
.PP
Valid attributes n' associated joints are:
.TP
\fB\-constraints \fIkeywordList|expression\fR
Da optionizzle \fB\-constraints\fR attribute can be list of one or more
keywordz or a expression. I aint talkin' bout chicken n' gravy biatch.  If tha \fB\-constraints\fR value be a list of
keywords, each of these keywordz should be tha name of a cold-ass lil constraint
defined by a cold-ass lil call ta \fBtestConstraint\fR.  If any of tha listed
constraints is false or do not exist, tha test is skipped. Y'all KNOW dat shit, muthafucka!  If the
\fB\-constraints\fR value be a expression, dat expression
is evaluated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If tha expression evaluates ta true, then tha test is run.
Note dat tha expression form of \fB\-constraints\fR may interfere wit the
operation of \fBconfigure \-constraints\fR and
\fBconfigure \-limitconstraints\fR, n' aint recommended.
Appropriate constraints should be added ta any tests dat should
not always be run. I aint talkin' bout chicken n' gravy biatch.  That is, conditionizzle evaluation of a test
should be accomplished by tha \fB\-constraints\fR option, not by
conditionizzle evaluation of \fBtest\fR.  In dat way, tha same
number of tests is always reported by tha test suite, though
the number skipped may chizzle based on tha testin environment.
Da default value be a empty list.  
See \fBTEST CONSTRAINTS\fR below fo' a list of built-in constraints 
and shiznit on how tha fuck ta add yo' own constraints.
.TP
\fB\-setup \fIscript\fR
Da optionizzle \fB\-setup\fR attribute indicates a \fIscript\fR dat is ghon be run
before tha script indicated by tha \fB\-body\fR attribute.  If evaluation
of \fIscript\fR raises a error, tha test will fail.  Da default value
is a empty script.
.TP
\fB\-body \fIscript\fR
Da \fB\-body\fR attribute indicates tha \fIscript\fR ta run ta carry up tha 
test.  It must return a result dat can be checked fo' erectness.
If evaluation of \fIscript\fR raises a error, tha test will fail.
Da default value be a empty script.
.TP
\fB\-cleanup \fIscript\fR
Da optionizzle \fB\-cleanup\fR attribute indicates a \fIscript\fR dat will be
run afta tha script indicated by tha \fB\-body\fR attribute.
If evaluation of \fIscript\fR raises a error, tha test will fail.
Da default value be a empty script.
.TP
\fB\-match \fImode\fR
Da \fB\-match\fR attribute determines how tha fuck expected lyrics supplied by
\fB\-result\fR, \fB\-output\fR, n' \fB\-errorOutput\fR is compared. Y'all KNOW dat shit, muthafucka!  Valid
values fo' \fImode\fR is \fBregexp\fR, \fBglob\fR, \fBexact\fR, and
any value registered by a prior call ta \fBcustomMatch\fR.  Da default
value is \fBexact\fR.
.TP
\fB\-result \fIexpectedValue\fR
Da \fB\-result\fR attribute supplies tha \fIexpectedValue\fR against which
the return value from script is ghon be compared. Y'all KNOW dat shit, muthafucka! Da default value is
an empty string.
.TP
\fB\-output \fIexpectedValue\fR
Da \fB\-output\fR attribute supplies tha \fIexpectedValue\fR against which
any output busted ta \fBstdout\fR or \fBoutputChannel\fR durin evaluation
of tha script(s) is ghon be compared. Y'all KNOW dat shit, muthafucka!  Note dat only output printed using
\fB::puts\fR is used fo' comparison. I aint talkin' bout chicken n' gravy biatch.  If \fB\-output\fR aint specified,
output busted ta \fBstdout\fR n' \fBoutputChannel\fR aint processed for
comparison.
.TP
\fB\-errorOutput \fIexpectedValue\fR
Da \fB\-errorOutput\fR attribute supplies tha \fIexpectedValue\fR against
which any output busted ta \fBstderr\fR or \fBerrorChannel\fR durin 
evaluation of tha script(s) is ghon be compared. Y'all KNOW dat shit, muthafucka! Note dat only output
printed rockin \fB::puts\fR is used fo' comparison. I aint talkin' bout chicken n' gravy biatch.  If \fB\-errorOutput\fR
is not specified, output busted ta \fBstderr\fR n' \fBerrorChannel\fR is
not processed fo' comparison.
.TP
\fB\-returnCodes \fIexpectedCodeList\fR
Da optionizzle \fB\-returnCodes\fR attribute supplies \fIexpectedCodeList\fR,
a list of return codes dat may be accepted from evaluation of the
\fB\-body\fR script.  If evaluation of tha \fB\-body\fR script returns
a code not up in tha \fIexpectedCodeList\fR, tha test fails.  All
return codes known ta \fBreturn\fR, up in both numeric n' symbolic
form, includin extended return codes, is aaight elements in
the \fIexpectedCodeList\fR.  Default value is
.QW \fBok return\fR.
.PP
To pass, a test must successfully evaluate its \fB\-setup\fR, \fB\-body\fR,
and \fB\-cleanup\fR scripts, n' you can put dat on yo' toast.  Da return code of tha \fB\-body\fR script and
its result must match expected joints, n' if specified, output n' error
data from tha test must match expected \fB\-output\fR n' \fB\-errorOutput\fR
values.  If any of these conditions is not met, then tha test fails.
Note dat all scripts is evaluated up in tha context of tha caller
of \fBtest\fR.
.PP
As long as \fBtest\fR is called wit valid syntax n' legal
values fo' all attributes, it aint gonna raise a error. Shiiit, dis aint no joke.  Test
failures is instead reported as output freestyled ta \fBoutputChannel\fR.
In default operation, a successful test produces no output.  Da output
lyrics produced by \fBtest\fR is controlled by the
\fBconfigure \-verbose\fR option as busted lyrics bout up in \fBCONFIGURABLE OPTIONS\fR
below.  Any output produced by tha test scripts theyselves should be
produced rockin \fB::puts\fR ta \fBoutputChannel\fR or
\fBerrorChannel\fR, so dat playaz of tha test suite may
easily capture output wit tha \fBconfigure \-outfile\fR and
\fBconfigure \-errfile\fR options, n' so dat tha \fB\-output\fR
and \fB\-errorOutput\fR attributes work properly.
.SH "TEST CONSTRAINTS"
.PP
Constraints is used ta determine whether or not a test should be skipped.
Each constraint has a name, which may be any string, n' a funky-ass boolean
value.  Each \fBtest\fR has a \fB\-constraints\fR value which be a
list of constraint names.  There is two modez of constraint control.
Most frequently, tha default mode is used, indicated by a setting
of \fBconfigure \-limitconstraints\fR ta false.  Da test will run
only if all constraints up in tha list is true-valued. Y'all KNOW dat shit, muthafucka!  Thus,
the \fB\-constraints\fR option of \fBtest\fR be a cold-ass lil convenient, symbolic
way ta define any conditions required fo' tha test ta be possible or
meaningful naaahhmean?  For example, a \fBtest\fR wit \fB\-constraints unix\fR
will only be run if tha constraint \fBunix\fR is true, which indicates
the test suite is bein run on a Unix platform.
.PP
Each \fBtest\fR should include whatever \fB\-constraints\fR are
required ta constrain it ta run only where appropriate.  Several
constraints is pre-defined up in tha \fBtcltest\fR package, listed
below.  Da registration of user-defined constraints is performed
by tha \fBtestConstraint\fR command. Y'all KNOW dat shit, muthafucka!  User-defined constraints
may step tha fuck up within a test file, or within tha script specified
by tha \fBconfigure \-load\fR or \fBconfigure \-loadfile\fR
options.
.PP
Da followin be a list of constraints pre-defined by the
\fBtcltest\fR package itself:
.TP
\fIsingleTestInterp\fR
test can only be run if all test filez is sourced tha fuck into a single interpreter
.TP
\fIunix\fR
test can only be run on any Unix platform
.TP
\fIwin\fR
test can only be run on any Windows platform
.TP
\fInt\fR
test can only be run on any Windows NT platform
.TP
\fI95\fR
test can only be run on any Windows 95 platform
.TP
\fI98\fR
test can only be run on any Windows 98 platform
.TP
\fImac\fR
test can only be run on any Mac platform
.TP
\fIunixOrWin\fR
test can only be run on a Unix or Windows platform
.TP
\fImacOrWin\fR
test can only be run on a Mac or Windows platform
.TP
\fImacOrUnix\fR
test can only be run on a Mac or Unix platform
.TP
\fItempNotWin\fR
test can not be run on Windows.  This flag is used ta temporarily
disable a test. 
.TP
\fItempNotMac\fR
test can not be run on a Mac.  This flag is used
to temporarily disable a test.
.TP
\fIunixCrash\fR
test crashes if it is run on Unix.  This flag is used ta temporarily
disable a test. 
.TP
\fIwinCrash\fR
test crashes if it is run on Windows.  This flag is used ta temporarily
disable a test. 
.TP
\fImacCrash\fR
test crashes if it is run on a Mac.  This flag is used ta temporarily
disable a test. 
.TP
\fIemptyTest\fR
test is empty, n' so not worth hustlin yo, but it remains as a
place-holda fo' a test ta be freestyled up in tha future.  This constraint
has value false ta cause tests ta be skipped unless tha user specifies
otherwise.
.TP
\fIknownBug\fR
test is known ta fail n' tha bug aint yet fixed. Y'all KNOW dat shit, muthafucka!  This constraint
has value false ta cause tests ta be skipped unless tha user specifies
otherwise.
.TP
\fInonPortable\fR
test can only be run up in some known pimpment environment.
Some tests is inherently non-portable cuz they depend on thangs
like word length, file system configuration, window manager, etc.
This constraint has value false ta cause tests ta be skipped unless
the user specifies otherwise.  
.TP
\fIuserInteraction\fR
test requires interaction from tha user n' shit.  This constraint has
value false ta causes tests ta be skipped unless tha user specifies
otherwise.  
.TP
\fIinteractive\fR
test can only be run up in if tha interpreta is up in interactizzle mode 
(when tha global tcl_interactizzle variable is set ta 1).
.TP
\fInonBlockFiles\fR
test can only be run if platform supports settin filez into
nonblockin mode 
.TP
\fIasyncPipeClose\fR
test can only be run if platform supports async flush n' async close
on a pipe 
.TP
\fIunixExecs\fR
test can only be run if dis machine has Unix-style commands
\fBcat\fR, \fBecho\fR, \fBsh\fR, \fBwc\fR, \fBrm\fR, \fBsleep\fR,
\fBfgrep\fR, \fBps\fR, \fBchmod\fR, n' \fBmkdir\fR available
.TP
\fIhasIsoLocale\fR
test can only be run if can switch ta a ISO locale
.TP
\fIroot\fR
test can only run if Unix user is root
.TP
\fInotRoot\fR
test can only run if Unix user aint root
.TP
\fIeformat\fR
test can only run if app has a hustlin version of sprintf wit respect
to the
.QW e
format of floating-point numbers.
.TP
\fIstdio\fR
test can only be run if \fBinterpreter\fR can be \fBopen\fRed
as a pipe.
.PP
Da alternatizzle mode of constraint control is enabled by setting
\fBconfigure \-limitconstraints\fR ta true.  With dat configuration
setting, all existin constraints other than dem up in tha constraint
list returned by \fBconfigure \-constraints\fR is set ta false.
When tha value of \fBconfigure \-constraints\fR
is set, all dem constraints is set ta true.  Da effect is that
when both options \fBconfigure \-constraints\fR and
\fBconfigure \-limitconstraints\fR is up in use, only dem tests including
only constraints from tha \fBconfigure \-constraints\fR list
are run; all others is skipped. Y'all KNOW dat shit, muthafucka!  For example, one might set
up a cold-ass lil configuration with
.PP
.CS
\fBconfigure\fR -constraints knownBug \e
          -limitconstraints legit \e
          -verbose pass
.CE
.PP
to run exactly dem tests dat exercise known bugs, n' discover
whether any of dem pass, indicatin tha bug had been fixed.
.SH "RUNNING ALL TESTS"
.PP
Da single command \fBrunAllTests\fR is evaluated ta run a entire
test suite, spannin nuff filez n' directories. Put ya muthafuckin choppers up if ya feel dis!  Da configuration
optionz of \fBtcltest\fR control tha precise operations.  The
\fBrunAllTests\fR command begins by printin a summary of its
configuration ta \fBoutputChannel\fR.
.PP
Test filez ta be evaluated is sought up in tha directory
\fBconfigure \-testdir\fR.  Da list of filez up in dat directory
that match any of tha patterns up in \fBconfigure \-file\fR and
match none of tha patterns up in \fBconfigure \-notfile\fR is generated
and sorted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Then each file is ghon be evaluated up in turn, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch.  If
\fBconfigure \-singleproc\fR is true, then each file will
be \fBsource\fRd up in tha callerz context.  If it is false,
then a cold-ass lil copy of \fBinterpreter\fR is ghon be \fBexec\fR'd to
evaluate each file.  Da multi-process operation is useful
when testin can cause errors so severe dat a process 
terminates.  Although such a error may terminizzle a cold-ass lil child
process evaluatin one file, tha masta process can continue
with tha rest of tha test suite.  In multi-process operation,
the configuration of \fBtcltest\fR up in tha masta process is
passed ta tha lil pimp processes as command line arguments,
with tha exception of \fBconfigure \-outfile\fR.  The
\fBrunAllTests\fR command up in the
masta process collects all output from tha lil pimp processes
and collates they thangs up in dis biatch tha fuck into one masta report.  Any
reportz of individual test failures, or lyrics requested
by a \fBconfigure \-verbose\fR settin is passed directly
on ta \fBoutputChannel\fR by tha masta process.
.PP
Afta evaluatin all selected test files, a summary of the
results is printed ta \fBoutputChannel\fR.  Da summary
includes tha total number of \fBtest\fRs evaluated, broken
down tha fuck into dem skipped, dem passed, n' dem failed.
Da summary also notes tha number of filez evaluated, n' tha names
of any filez wit failin tests or errors.  A list of
the constraints dat caused tests ta be skipped, n' the
number of tests skipped fo' each be also printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Also,
lyrics is printed if it appears dat evaluation of
a test file has caused any temporary filez ta be left
behind up in \fBconfigure \-tmpdir\fR.
.PP
Havin completed n' summarized all selected test files,
\fBrunAllTests\fR then recursively acts on subdirectories
of \fBconfigure \-testdir\fR.  All subdirectories that
match any of tha patterns up in \fBconfigure \-relateddir\fR
and do not match any of tha patterns in
\fBconfigure \-asidefromdir\fR is examined. Y'all KNOW dat shit, muthafucka!  If
a file named \fBall.tcl\fR is found up in such a gangbangin' finger-lickin' directory,
it is ghon be \fBsource\fRd up in tha callerz context.
Whether or not a examined directory gotz nuff an
\fBall.tcl\fR file, its subdirectories is also scanned
against tha \fBconfigure \-relateddir\fR and
\fBconfigure \-asidefromdir\fR patterns.  In dis way,
many directories up in a gangbangin' finger-lickin' directory tree can have all their
test filez evaluated by a single \fBrunAllTests\fR
command.
.SH "CONFIGURABLE OPTIONS"
Da \fBconfigure\fR command is used ta set n' query tha configurable
optionz of \fBtcltest\fR.  Da valid options are:
.TP
\fB\-singleproc \fIboolean\fR
Controls whether or not \fBrunAllTests\fR spawns a cold-ass lil lil pimp process for
each test file.  No spawnin when \fIboolean\fR is true.  Default
value is false.
.TP
\fB\-debug \fIlevel\fR
Sets tha debug level ta \fIlevel\fR, a integer value indicatin how
much debuggin shiznit should be printed ta stdout.  Note that
debug lyrics always git all up in stdout, independent of tha value of
\fBconfigure \-outfile\fR.  Default value is 0.  Levels is defined as:
.RS
.IP 0
Do not display any debug shiznit.
.IP 1
Display shiznit regardin whether a test is skipped cuz it
does not match any of tha tests dat was specified rockin by
\fBconfigure \-match\fR (userSpecifiedNonMatch) or matches any of
the tests specified by \fBconfigure \-skip\fR (userSpecifiedSkip).  Also
print warnings bout possible lack of cleanup or balizzle up in test files.
Also print warnings bout any re-use of test names.
.IP 2
Display tha flag array parsed by tha command line processor, the
contentz of tha ::env array, n' all user-defined variablez dat exist
in tha current namespace as they is used.
.IP 3
Display shiznit regardin what tha fuck individual procs up in tha test
harnizz is bustin.
.RE
.TP
\fB\-verbose \fIlevel\fR
Sets tha type of output verbositizzle desired ta \fIlevel\fR,
a list of zero or mo' of tha elements \fBbody\fR, \fBpass\fR,
\fBskip\fR, \fBstart\fR, \fBerror\fR n' \fBline\fR.  Default value
is \fB{body error}\fR.
Levels is defined as: 
.RS
.IP "body (b)"
Display tha body of failed tests
.IP "pass (p)"
Print output when a test passes
.IP "skip (s)"
Print output when a test is skipped
.IP "start (t)"
Print output whenever a test starts
.IP "error (e)"
Print errorInfo n' errorCode, if they exist, when a test return code
does not match its expected return code
.IP "line (l)"
Print source file line shiznit of failed tests
.RE
Da single letta abbreviations noted above is also recognized
so that
.QW "\fBconfigure \-verbose pt\fR"
is tha same ol' dirty as
.QW "\fBconfigure \-verbose {pass start}\fR" .
.TP
\fB\-preservecore \fIlevel\fR
Sets tha core preservation level ta \fIlevel\fR.  This level
determines how tha fuck stringent checks fo' core filez are.  Default
value is 0.  Levels is defined as:
.RS
.IP 0
No checkin \(em do not check fo' core filez all up in tha end of each test
command yo, but do check fo' dem up in \fBrunAllTests\fR afta all
test filez done been evaluated.
.IP 1
Also check fo' core filez all up in tha end of each \fBtest\fR command.
.IP 2
Peep fo' core filez at all times busted lyrics bout above, n' save a 
copy of each core file produced up in \fBconfigure \-tmpdir\fR.
.RE
.TP
\fB\-limitconstraints \fIboolean\fR
Sets tha mode by which \fBtest\fR honors constraints as busted lyrics about
in \fBTESTS\fR above.  Default value is false.
.TP
\fB\-constraints \fIlist\fR
Sets all tha constraints up in \fIlist\fR ta true.  Also used in
combination wit \fBconfigure \-limitconstraints true\fR ta control an
alternatizzle constraint mode as busted lyrics bout up in \fBTESTS\fR above.
Default value be a empty list.
.TP
\fB\-tmpdir \fIdirectory\fR
Sets tha temporary directory ta be used by \fBmakeFile\fR,
\fBmakeDirectory\fR, \fBviewFile\fR, \fBremoveFile\fR,
and \fBremoveDirectory\fR as tha default directory where
temporary filez n' directories pimped by test filez should
be pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Default value is \fBworkingDirectory\fR.
.TP
\fB\-testdir \fIdirectory\fR
Sets tha directory searched by \fBrunAllTests\fR fo' test files
and subdirectories. Put ya muthafuckin choppers up if ya feel dis!  Default value is \fBworkingDirectory\fR.
.TP
\fB\-file \fIpatternList\fR
Sets tha list of patterns used by \fBrunAllTests\fR ta determine
what test filez ta evaluate.  Default value is
.QW \fB*.test\fR .
.TP
\fB\-notfile \fIpatternList\fR
Sets tha list of patterns used by \fBrunAllTests\fR ta determine
what test filez ta skip.  Default value is
.QW \fBl.*.test\fR ,
so dat any SCCS lock filez is skipped.
.TP
\fB\-relateddir \fIpatternList\fR
Sets tha list of patterns used by \fBrunAllTests\fR ta determine
what subdirectories ta search fo' a \fBall.tcl\fR file.  Default
value is
.QW \fB*\fR .
.TP
\fB\-asidefromdir \fIpatternList\fR
Sets tha list of patterns used by \fBrunAllTests\fR ta determine
what subdirectories ta skip when searchin fo' a \fBall.tcl\fR file.
Default value be a empty list.
.TP
\fB\-match \fIpatternList\fR
Set tha list of patterns used by \fBtest\fR ta determine whether
a test should be run. I aint talkin' bout chicken n' gravy biatch.  Default value is
.QW \fB*\fR .
.TP
\fB\-skip \fIpatternList\fR
Set tha list of patterns used by \fBtest\fR ta determine whether
a test should be skipped. Y'all KNOW dat shit, muthafucka!  Default value be a empty list.
.TP
\fB\-load \fIscript\fR
Sets a script ta be evaluated by \fBloadTestedCommands\fR.
Default value be a empty script.
.TP
\fB\-loadfile \fIfilename\fR
Sets tha filename from which ta read a script ta be evaluated
by \fBloadTestedCommands\fR.  This be a alternatizzle to
\fB\-load\fR.  They cannot be used together.
.TP
\fB\-outfile \fIfilename\fR 
Sets tha file ta which all output produced by tcltest should be
written. I aint talkin' bout chicken n' gravy biatch.  A file named \fIfilename\fR is ghon be \fBopen\fRed fo' writing,
and tha resultin channel is ghon be set as tha value of \fBoutputChannel\fR.
.TP
\fB\-errfile \fIfilename\fR
Sets tha file ta which all error output produced by tcltest
should be written. I aint talkin' bout chicken n' gravy biatch.  A file named \fIfilename\fR is ghon be \fBopen\fRed
for writing, n' tha resultin channel is ghon be set as tha value
of \fBerrorChannel\fR.
.SH "CREATING TEST SUITES WITH TCLTEST"
.PP
Da fundamenstrual element of a test suite is tha individual \fBtest\fR
command. Y'all KNOW dat shit, muthafucka!  We begin wit nuff muthafuckin examples.
.IP [1]
Test of a script dat returns normally.
.RS
.PP
.CS
\fBtest\fR example-1.0 {normal return} {
    format %s value
} value
.CE
.RE
.IP [2]
Test of a script dat requires context setup n' cleanup.  Note the
bracin n' indentin steez dat avoidz any need fo' line continuation.
.RS
.PP
.CS
\fBtest\fR example-1.1 {test file existence} -setup {
    set file [makeFile {} test]
} -body {
    file exists $file
} -cleanup {
    removeFile test
} -result 1
.CE
.RE
.IP [3]
Test of a script dat raises a error.
.RS
.PP
.CS
\fBtest\fR example-1.2 {error return} -body {
    error message
} -returnCodes error -result message
.CE
.RE
.IP [4]
Test wit a cold-ass lil constraint.
.RS
.PP
.CS
\fBtest\fR example-1.3 {user owns pimped files} -constraints {
    unix
} -setup {
    set file [makeFile {} test]
} -body {
    file attributes $file -baller
} -cleanup {
    removeFile test
} -result $::tcl_platform(user)
.CE
.RE
.PP
At tha next higher layer of organization, nuff muthafuckin \fBtest\fR commands
are gathered together tha fuck into a single test file.  Test filez should have
names wit tha \fB.test\fR extension, cuz dat is tha default pattern
used by \fBrunAllTests\fR ta find test files.  It be a phat rule of
thumb ta have one test file fo' each source code file of yo' project.
It be phat practice ta edit tha test file n' tha source code file
together, keepin tests synchronized wit code chizzles.
.PP 
Most of tha code up in tha test file should be tha \fBtest\fR commands.
Use constraints ta skip tests, rather than conditionizzle evaluation
of \fBtest\fR.
.IP [5]
Recommended system fo' freestylin conditionizzle tests, rockin constraints to
guard:
.RS
.PP
.CS
\fBtestConstraint\fR X [expr $myRequirement]
\fBtest\fR goodConditionalTest {} X {
    # body
} result
.CE
.RE
.IP [6]
Discouraged system fo' freestylin conditionizzle tests, rockin \fBif\fR to
guard:
.RS
.PP
.CS
if $myRequirement {
    test badConditionalTest {} {
        #body
    } result
}
.CE
.RE
.PP
Use tha \fB\-setup\fR n' \fB\-cleanup\fR options ta establish n' release
all context requirementz of tha test body.  Do not make tests depend on
prior tests up in tha file.  Those prior tests might be skipped. Y'all KNOW dat shit, muthafucka!  If several
consecutizzle tests require tha same context, tha appropriate setup
and cleanup scripts may be stored up in variable fo' passin ta each tests
\fB\-setup\fR n' \fB\-cleanup\fR options.  This be a funky-ass betta solution than
performin setup outside of \fBtest\fR commands, cuz tha setup will
only be done if necessary, n' any errors durin setup is ghon be reported,
and not cause tha test file ta abort.
.PP
A test file should be able ta be combined wit other test filez n' not
interfere wit them, even when \fBconfigure \-singleproc 1\fR causes
all filez ta be evaluated up in a cold-ass lil common interpreter n' shit.  A simple way to
bust dis is ta have yo' tests define all they commandz n' variables
in a namespace dat is deleted when tha test file evaluation is complete.
A phat namespace ta use be a cold-ass lil lil pimp namespace \fBtest\fR of tha namespace
of tha module yo ass is testing.
.PP
A test file should also be able ta be evaluated directly as a script,
not dependin on bein called by a masta \fBrunAllTests\fR.  This
means dat each test file should process command line arguments ta give
the testa all tha configuration control dat \fBtcltest\fR provides.
.PP
Afta all \fBtest\fRs up in a test file, tha command \fBcleanupTests\fR
should be called.
.IP [7]
Here be a sketch of a sample test file illustratin dem points:
.RS
.PP
.CS
package require tcltest 2.2
eval \fB::tcltest::configure\fR $argv
package require example
namespace eval ::example::test {
    namespace import ::tcltest::*
    \fBtestConstraint\fR X [expr {...}]
    variable SETUP {#common setup code}
    variable CLEANUP {#common cleanup code}
    \fBtest\fR example-1 {} -setup $SETUP -body {
        # First test
    } -cleanup $CLEANUP -result {...}
    \fBtest\fR example-2 {} -constraints X -setup $SETUP -body {
        # Second test; constrained
    } -cleanup $CLEANUP -result {...}
    \fBtest\fR example-3 {} {
        # Third test; no context required
    } {...}
    \fBcleanupTests\fR
}
namespace delete ::example::test
.CE
.RE
.PP
Da next level of organization be a gangbangin' full test suite, made up of several
test files.  One script is used ta control tha entire suite.  The
basic function of dis script is ta booty-call \fBrunAllTests\fR after
fuckin wit any necessary setup.  This script is probably named \fBall.tcl\fR
because dat is tha default name used by \fBrunAllTests\fR when combining
multiple test suites tha fuck into one testin run.
.IP [8]
Here be a sketch of a sample test suite masta script:
.RS
.PP
.CS
package require Tcl 8.4
package require tcltest 2.2
package require example
\fB::tcltest::configure\fR -testdir \e
        [file dirname [file normalize [info script]]]
eval \fB::tcltest::configure\fR $argv
\fB::tcltest::runAllTests\fR
.CE
.RE
.SH COMPATIBILITY
.PP
A number of commandz n' variablez up in tha \fB::tcltest\fR namespace
provided by earlier releasez of \fBtcltest\fR aint been documented
here, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  They is no longer part of tha supported hood intercourse of
\fBtcltest\fR n' should not be used up in freshly smoked up test suites.  However,
to continue ta support existin test suites freestyled ta tha older
interface justifications, nuff of dem deprecated commandz and
variablez still work as before.  For example, up in nuff circumstances,
\fBconfigure\fR is ghon be automatically called shortly after
\fBpackage require tcltest 2.1\fR succeedz wit arguments
from tha variable \fB::argv\fR.  This is ta support test suites
that depend on tha oldschool behavior dat \fBtcltest\fR was automatically
configured from command line arguments, n' you can put dat on yo' toast.  New test filez should not
depend on dis yo, but should explicitly include
.PP
.CS
eval \fB::tcltest::configure\fR $::argv
.CE
.PP
to establish a cold-ass lil configuration from command line arguments.
.SH "KNOWN ISSUES"
There is two known thangs related ta nested evaluationz of \fBtest\fR.
Da first issue relates ta tha stack level up in which test scripts are
executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Tests nested within other tests may be executed all up in tha same
stack level as tha outermost test.  For example, up in tha followin code: 
.PP
.CS
\fBtest\fR level-1.1 {level 1} {
    -body {
        \fBtest\fR level-2.1 {level 2} {
        }
    }
}
.CE
.PP
any script executed up in level-2.1 may be executed all up in tha same stack
level as tha script defined fo' level-1.1.  
.PP
In addition, while two \fBtest\fRs done been run, thangs up in dis biatch will only
be reported by \fBcleanupTests\fR fo' tests all up in tha same level as
test level-1.1.  But fuck dat shiznit yo, tha word on tha street is dat test thangs up in dis biatch fo' all tests run prior to
level-1.1 is ghon be available when test level-2.1 runs.  What this
means is dat if you try ta access tha test thangs up in dis biatch fo' test level-2.1,
it will may say that
.QW m
tests have run,
.QW n
tests done been skipped,
.QW o
tests have passed and
.QW p
tests have failed, where
.QW m ,
.QW n ,
.QW o ,
and
.QW p
refer ta tests dat was run all up in tha same test level as test level-1.1.
.PP
Implementation of output n' error comparison up in tha test command
dependz on usage of ::puts up in yo' application code.  Output is
intercepted by redefinin tha ::puts command while tha defined test
script is bein run. I aint talkin' bout chicken n' gravy biatch.  Errors thrown by C procedures or printed
directly from C applications aint gonna be caught by tha test command.
Therefore, usage of tha \fB\-output\fR n' \fB\-errorOutput\fR
options ta \fBtest\fR is useful only fo' pure Tcl applications
that use \fB::puts\fR ta produce output. 
.SH KEYWORDS
test, test harness, test suite
