'\"
'\" Copyright (c) 1992 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH grab n "" Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
grab \- Confine pointa n' keyboard events ta a window sub-tree
.SH SYNOPSIS
\fBgrab \fR?\fB\-global\fR? \fIwindow\fR
.sp
\fBgrab \fIoption \fR?\fIarg arg \fR...?
.BE

.SH DESCRIPTION
.PP
This command implements simple pointa n' keyboard grabs fo' Tk.
Tkz grabs is different than tha grabs
busted lyrics bout up in tha Xlib documentation.
When a grab is set fo' a particular window, Tk restricts all pointer
events ta tha grab window n' its descendants up in Tkz window hierarchy.
Whenever tha pointa is within tha grab windowz subtree, tha pointer
will behave exactly tha same as if there had been no grab at all
and all events is ghon be reported up in tha aiiight fashion.
When tha pointa is outside \fIwindow\fRz tree yo, button presses and
releases and
mouse motion events is reported ta \fIwindow\fR, n' window entry
and window exit events is ignored. Y'all KNOW dat shit, muthafucka! Da grab subtree
.QW owns
the pointer:
windows outside tha grab subtree is ghon be visible on tha screen
but they is ghon be insensitizzle until tha grab is busted out.
Da tree of windows underneath tha grab window can include top-level
windows, up in which case all of dem top-level windows
and they descendants will continue ta receive mouse events
durin tha grab.
.PP
Two formz of grabs is possible:  local n' global.
A local grab affects only tha grabbin application:  events will
be reported ta other applications as if tha grab had never occurred.
Grabs is local by default.
A global grab locks up all applications on tha screen,
so dat only tha given subtree of tha grabbin application will be
sensitizzle ta pointa events (mouse button presses, mouse button releases,
pointa motions, window entries, n' window exits).
Durin global grabs tha window manager aint gonna receive pointer
events either.
.PP
Durin local grabs, keyboard events (key presses n' key releases)
are served up as usual:  tha window
manager controls which application receives keyboard events, and
if they is busted ta any window up in tha grabbin application then they are
repimped up ta tha focus window.
Durin a global grab Tk grabs tha keyboard so dat all keyboard events
are always busted ta tha grabbin application.
Da \fBfocus\fR command is still used ta determine which window up in the
application receives tha keyboard events.
Da keyboard grab is busted out when tha grab is busted out.
.PP
Grabs apply ta particular displays.  If a application has windows
on multiple displays then it can establish a separate grab on each
display.
Da grab on a particular display affects only tha windows on
that display.
It be possible fo' different applications on a single display ta have
simultaneous local grabs yo, but only one application can gotz a global
grab on a given display at once.
.PP
Da \fBgrab\fR command can take any of tha followin forms:
.TP
\fBgrab \fR?\fB\-global\fR? \fIwindow\fR
Same as \fBgrab set\fR, busted lyrics bout below.
.TP
\fBgrab current \fR?\fIwindow\fR?
If \fIwindow\fR is specified, returns tha name of tha current grab
window up in dis application fo' \fIwindow\fRz display, or a empty
strin if there is no such window.
If \fIwindow\fR is omitted, tha command returns a list whose elements
are all of tha windows grabbed by dis application fo' all displays,
or a empty strang if tha application has no grabs.
.TP
\fBgrab release \fIwindow\fR
Releases tha grab on \fIwindow\fR if there is one, otherwise do
nothing.  Returns a empty string.
.TP
\fBgrab set \fR?\fB\-global\fR? \fIwindow\fR
Sets a grab on \fIwindow\fR.  If \fB\-global\fR is specified then the
grab is global, otherwise it is local.
If a grab was already up in effect fo' dis application on
\fIwindow\fRz display then it be automatically busted out.
If there be already a grab on \fIwindow\fR n' it has tha same
global/local form as tha axed grab, then tha command
does nothing.  Returns a empty string.
.TP
\fBgrab status \fIwindow\fR
Returns \fBnone\fR if no grab is currently set on \fIwindow\fR,
\fBlocal\fR if a local grab is set on \fIwindow\fR, and
\fBglobal\fR if a global grab is set.
.SH WARNING
It be straight-up easy as fuck  ta use global grabs ta render a gangbangin' finger-lickin' display straight-up
unusable (e.g. by settin a grab on a widget which do not respond to
events n' not providin any mechanizzle fo' releasin tha grab).  Take
\fIextreme\fR care when rockin them!
.SH BUGS
.PP
It took a incredibly complex n' gross implementation ta produce
the simple grab effect busted lyrics bout above.
Given tha current implementation, it aint safe fo' applications
to use tha Xlib grab facilitizzles at all except all up in tha Tk grab
procedures.
If applications try ta manipulate Xz grab mechanizzlez directly,
things will probably break.
.PP
If a single process is managin nuff muthafuckin different Tk applications,
only one of dem applications can gotz a local grab fo' a given
display at any given time.  If tha applications is up in different
processes, dis restriction do not exist.
.SH EXAMPLE
Set a grab so dat only one button may be clicked outta a group.  The
other buttons is unresponsive ta tha mouse until tha middle button is
clicked.
.CS
pack [button .b1 \-text "Click me biaaatch! #1" \-command {destroy .b1}]
pack [button .b2 \-text "Click me biaaatch! #2" \-command {destroy .b2}]
pack [button .b3 \-text "Click me biaaatch! #3" \-command {destroy .b3}]
\fBgrab\fR .b2
.CE

.SH KEYWORDS
grab, keyboard events, pointa events, window
