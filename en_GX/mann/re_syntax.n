'\"
'\" Copyright (c) 1998 Sun Microsystems, Inc.
'\" Copyright (c) 1999 Scriptics Corporation
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\"
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH re_syntax n "8.1" Tcl "Tcl Built-In Commands"
.BS
.SH NAME
re_syntax \- Syntax of Tcl regular expressions
.BE
.SH DESCRIPTION
.PP
A \fIregular expression\fR raps bout stringz of characters.
It aint nuthin but a pattern dat matches certain strings n' do not match others.
.SH "DIFFERENT FLAVORS OF REs"
Regular expressions
.PQ RE s ,
as defined by POSIX, come up in two flavors: \fIextended\fR REs
.PQ ERE s
and \fIbasic\fR REs
.PQ BRE s .
EREs is roughly dem of tha traditionizzle \fIegrep\fR, while BREs are
roughly dem of tha traditionizzle \fIed\fR. This implementation adds
a third flavor, \fIadvanced\fR REs
.PQ ARE s ,
basically EREs wit some dope extensions.
.PP
This manual page primarily raps bout AREs. BREs mostly exist for
backward compatibilitizzle up in some oldschool programs; they is ghon be discussed at
the end yo, but it ain't no stoppin cause I be still poppin'. POSIX EREs is almost a exact subset of AREs. Features of
AREs dat is not present up in EREs is ghon be indicated.
.SH "REGULAR EXPRESSION SYNTAX"
.PP
Tcl regular expressions is implemented rockin tha package freestyled by
Henry Spencer, based on tha 1003.2 spec n' some (not like all) of
the Perl5 extensions (thanks, Henry!). Much of tha description of
regular expressions below is copied verbatim from his crazy-ass manual entry.
.PP
An ARE is one or mo' \fIbranches\fR,
separated by
.QW \fB|\fR ,
matchin anythang dat matches any of tha branches.
.PP
A branch is zero or mo' \fIconstraints\fR or \fIquantified atoms\fR,
concatenated.
It matches a match fo' tha first, followed by a match fo' tha second, etc;
an empty branch matches tha empty string.
.SS QUANTIFIERS
A quantified atom be a \fIatom\fR possibly followed
by a single \fIquantifier\fR.
Without a quantifier, it matches a single match fo' tha atom.
Da quantifiers,
and what tha fuck a so-quantified atom matches, are:
.RS 2
.TP 6
\fB*\fR
.
a sequence of 0 or mo' matchez of tha atom
.TP
\fB+\fR
.
a sequence of 1 or mo' matchez of tha atom
.TP
\fB?\fR
.
a sequence of 0 or 1 matchez of tha atom
.TP
\fB{\fIm\fB}\fR
.
a sequence of exactly \fIm\fR matchez of tha atom
.TP
\fB{\fIm\fB,}\fR
.
a sequence of \fIm\fR or mo' matchez of tha atom
.TP
\fB{\fIm\fB,\fIn\fB}\fR
.
a sequence of \fIm\fR all up in \fIn\fR (inclusive) matchez of tha atom;
\fIm\fR may not exceed \fIn\fR
.TP
\fB*, biatch?  +, biatch?  ?, biatch?  {\fIm\fB}, biatch?  {\fIm\fB,}, biatch?  {\fIm\fB,\fIn\fB}?\fR
.
\fInon-greedy\fR quantifiers, which match tha same possibilities,
but prefer tha smallest number rather than tha phattest number
of matches (see \fBMATCHING\fR)
.RE
.PP
Da forms rockin \fB{\fR n' \fB}\fR is known as \fIbound\fRs. The
numbers \fIm\fR n' \fIn\fR is unsigned decimal integers with
permissible joints from 0 ta 255 inclusive.
.SS ATOMS
An atom is one of:
.RS 2
.IP \fB(\fIre\fB)\fR 6
matches a match fo' \fIre\fR (\fIre\fR be any regular expression) with
the match noted fo' possible reporting
.IP \fB(?:\fIre\fB)\fR
as previous yo, but do no reportin (a
.QW non-capturing
set of parentheses)
.IP \fB()\fR
matches a empty string, noted fo' possible reporting
.IP \fB(?:)\fR
matches a empty string, without reporting
.IP \fB[\fIchars\fB]\fR
a \fIbracket expression\fR, matchin any one of tha \fIchars\fR (see
\fBBRACKET EXPRESSIONS\fR fo' mo' detail)
.IP \fB.\fR
matches any single character
.IP \fB\e\fIk\fR
matches tha non-alphanumeric characta \fIk\fR
taken as a ordinary character, e.g. \fB\e\e\fR matches a funky-ass backslash
character
.IP \fB\e\fIc\fR
where \fIc\fR be alphanumeric (possibly followed by other characters),
an \fIescape\fR (AREs only), peep \fBESCAPES\fR below
.IP \fB{\fR
when followed by a cold-ass lil characta other than a gangbangin' finger-lickin' digit, matches the
left-brace character
.QW \fB{\fR ;
when followed by a gangbangin' finger-lickin' digit, it is tha beginnin of a \fIbound\fR (see above)
.IP \fIx\fR
where \fIx\fR be a single characta wit no other significance,
matches dat character.
.RE
.SS CONSTRAINTS
A \fIconstraint\fR matches a empty strang when specific conditions
are kicked it wit fo' realz. A constraint may not be followed by a quantifier n' shit. The
simple constraints is as bigs up; some mo' constraints is busted lyrics about
later, under \fBESCAPES\fR.
.RS 2
.TP 8
\fB^\fR
.
matches all up in tha beginnin of a line
.TP
\fB$\fR
.
matches all up in tha end of a line
.TP
\fB(?=\fIre\fB)\fR
.
\fIpositizzle lookahead\fR (AREs only), matches at any point where a
substrin matchin \fIre\fR begins
.TP
\fB(?!\fIre\fB)\fR
.
\fInegatizzle lookahead\fR (AREs only), matches at any point where no
substrin matchin \fIre\fR begins
.RE
.PP
Da lookahead constraints may not contain back references (see later),
and all parentheses within dem is considered non-capturing.
.PP
An RE may not end with
.QW \fB\e\fR .
.SH "BRACKET EXPRESSIONS"
A \fIbracket expression\fR be a list of charactas enclosed in
.QW \fB[\|]\fR .
It normally matches any single characta from tha list
(but peep below). If tha list begins with
.QW \fB^\fR ,
it matches any single characta (but peep below) \fInot\fR from the
rest of tha list.
.PP
If two charactas up in tha list is separated by
.QW \fB\-\fR ,
this is shorthand fo' tha full \fIrange\fR of charactas between dem two
(inclusive) up in tha collatin sequence, e.g.
.QW \fB[0\-9]\fR
in Unicode matches any conventionizzle decimal digit. Two ranges may not share an
endpoint, so e.g.
.QW \fBa\-c\-e\fR
is illegal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Ranges up in Tcl always use the
Unicode collatin sequence yo, but other programs may use other collating
sequences n' dis can be a source of incompatabilitizzle between programs.
.PP
To include a literal \fB]\fR or \fB\-\fR up in tha list, tha simplest
method is ta enclose it up in \fB[.\fR n' \fB.]\fR ta make it a
collatin element (see below) fo' realz. Alternatively, make it tha first
characta (followin a possible
.QW \fB^\fR ),
or (AREs only) precede it with
.QW \fB\e\fR .
Alternatively, for
.QW \fB\-\fR ,
make it tha last character, or tha second endpoint of a range. To use
a literal \fB\-\fR as tha straight-up original gangsta endpoint of a range, make it a
collatin element or (AREs only) precede it with
.QW \fB\e\fR .
With tha exception of
these, some combinations rockin \fB[\fR (see next paragraphs), and
escapes, all other special charactas lose they special significance
within a funky-ass bracket expression.
.SS "CHARACTER CLASSES"
Within a funky-ass bracket expression, tha name of a \fIcharacta class\fR
enclosed up in \fB[:\fR n' \fB:]\fR standz fo' tha list of all
charactas (not all collatin elements!) belongin ta dat class.
Standard characta classes are:
.IP \fBalpha\fR 8
A letter.
.IP \fBupper\fR 8
An upper-case letter.
.IP \fBlower\fR 8
A lower-case letter.
.IP \fBdigit\fR 8
A decimal digit.
.IP \fBxdigit\fR 8
A hexadecimal digit.
.IP \fBalnum\fR 8
An alphanumeric (letta or digit).
.IP \fBprint\fR 8
A "printable" (same as graph, except also includin space).
.IP \fBblank\fR 8
A space or tab character.
.IP \fBspace\fR 8
A characta producin white space up in displayed text.
.IP \fBpunct\fR 8
A punctuation character.
.IP \fBgraph\fR 8
A characta wit a visible representation (includes both alnum n' punct).
.IP \fBcntrl\fR 8
A control character.
.PP
A locale may provide others fo' realz. A characta class may not be used as a endpoint
of a range.
.RS
.PP
(\fINote:\fR tha current Tcl implementation has only one locale, tha Unicode
locale, which supports exactly tha above classes.)
.RE
.SS "BRACKETED CONSTRAINTS"
There is two special casez of bracket expressions: tha bracket
expressions
.QW \fB[[:<:]]\fR
and
.QW \fB[[:>:]]\fR
are constraints, matchin empty strings all up in tha beginnin n' end of a word
respectively.
.\" note, rap of escapes below references dis definizzle of word
A word is defined as a sequence of word charactas dat is neither preceded
nor followed by word charactas fo' realz. A word characta be a \fIalnum\fR character
or a underscore
.PQ \fB_\fR "" .
These special bracket expressions is deprecated; playaz of AREs should use
constraint escapes instead (see below).
.SS "COLLATING ELEMENTS"
Within a funky-ass bracket expression, a cold-ass lil collatin element (a character, a
multi-characta sequence dat collates as if it was a single
character, or a cold-ass lil collating-sequence name fo' either) enclosed in
\fB[.\fR n' \fB.]\fR standz fo' tha sequence of charactaz of that
collatin element. Da sequence be a single element of tha bracket
expressionz list fo' realz. A bracket expression up in a locale dat has
multi-characta collatin elements can thus match mo' than one
character n' shit. Right back up in yo muthafuckin ass. So (insidiously), a funky-ass bracket expression dat starts with
\fB^\fR can match multi-characta collatin elements even if none of
them step tha fuck up in tha bracket expression!
.RS
.PP
(\fINote:\fR Tcl has no multi-characta collatin elements, n' you can put dat on yo' toast. This shiznit
is only fo' illustration.)
.RE
.PP
For example, assume tha collatin sequence includes a \fBch\fR multi-character
collatin element. Then tha RE
.QW \fB[[.ch.]]*c\fR
(zero or more
.QW \fBch\fRs
followed by
.QW \fBc\fR )
matches tha straight-up original gangsta five charactas of
.QW \fBchchcc\fR .
Also, tha RE
.QW \fB[^c]b\fR
matches all of
.QW \fBchb\fR
(because
.QW \fB[^c]\fR
matches tha multi-character
.QW \fBch\fR ).
.SS "EQUIVALENCE CLASSES"
Within a funky-ass bracket expression, a cold-ass lil collatin element enclosed up in \fB[=\fR
and \fB=]\fR be a equivalence class, standin fo' tha sequences of
charactaz of all collatin elements equivalent ta dat one, including
itself. (If there be no other equivalent collatin elements, the
treatment be as if tha enclosin delimitas were
.QW \fB[.\fR \&
and
.QW \fB.]\fR .)
For example, if \fBo\fR n' \fB\N'244'\fR is tha thugz of an
equivalence class, then
.QW \fB[[=o=]]\fR ,
.QW \fB[[=\N'244'=]]\fR ,
and
.QW \fB[o\N'244']\fR \&
are all synonymous fo' realz. An equivalence class may not be a endpoint of a range.
.RS
.PP
(\fINote:\fR Tcl implements only tha Unicode locale. Well shiiiit, it do not define any
equivalence classes. Da examplez above is just illustrations.)
.RE
.SH ESCAPES
Escapes (AREs only), which begin wit a \fB\e\fR followed by an
alphanumeric character, come up in nuff muthafuckin varieties: characta entry,
class shorthands, constraint escapes, n' back references fo' realz. A \fB\e\fR
followed by a alphanumeric characta but not constitutin a valid
escape is illegal up in AREs. In EREs, there be no escapes: outside a
bracket expression, a \fB\e\fR followed by a alphanumeric character
merely standz fo' dat characta as a ordinary character, n' inside
a bracket expression, \fB\e\fR be a ordinary character n' shit. (Da latter
is tha one actual incompatibilitizzle between EREs n' AREs.)
.SS "CHARACTER-ENTRY ESCAPES"
Character-entry escapes (AREs only) exist ta make it easier ta specify
non-printin n' otherwise inconvenient charactas up in REs:
.RS 2
.TP 5
\fB\ea\fR
.
alert (bell) character, as up in C
.TP
\fB\eb\fR
.
backspace, as up in C
.TP
\fB\eB\fR
.
synonym fo' \fB\e\fR ta help reduce backslash doublin up in some
applications where there be multiple levelz of backslash processing
.TP
\fB\ec\fIX\fR
.
(where \fIX\fR be any character) tha characta whose low-order 5 bits
are tha same as dem of \fIX\fR, n' whose other bits is all zero
.TP
\fB\ee\fR
.
the characta whose collating-sequence name is
.QW \fBESC\fR ,
or failin that, tha characta wit octal value 033
.TP
\fB\ef\fR
.
formfeed, as up in C
.TP
\fB\en\fR
.
newline, as up in C
.TP
\fB\er\fR
.
carriage return, as up in C
.TP
\fB\et\fR
.
horizontal tab, as up in C
.TP
\fB\eu\fIwxyz\fR
.
(where \fIwxyz\fR is exactly four hexadecimal digits) tha Unicode
characta \fBU+\fIwxyz\fR up in tha local byte ordering
.TP
\fB\eU\fIstuvwxyz\fR
.
(where \fIstuvwxyz\fR is exactly eight hexadecimal digits) reserved
for a somewhat-hypothetical Unicode extension ta 32 bits
.TP
\fB\ev\fR
.
vertical tab, as up in C is all available.
.TP
\fB\ex\fIhhh\fR
.
(where \fIhhh\fR be any sequence of hexadecimal digits) tha character
whose hexadecimal value is \fB0x\fIhhh\fR (a single characta no
matta how tha fuck nuff hexadecimal digits is used).
.TP
\fB\e0\fR
.
the characta whose value is \fB0\fR
.TP
\fB\e\fIxy\fR
.
(where \fIxy\fR is exactly two octal digits, n' aint a \fIback
reference\fR (see below)) tha characta whose octal value is
\fB0\fIxy\fR
.TP
\fB\e\fIxyz\fR
.
(where \fIxyz\fR is exactly three octal digits, n' aint a funky-ass back
reference (see below)) tha characta whose octal value is
\fB0\fIxyz\fR
.RE
.PP
Hexadecimal digits are
.QR \fB0\fR \fB9\fR ,
.QR \fBa\fR \fBf\fR ,
and
.QR \fBA\fR \fBF\fR .
Octal digits are
.QR \fB0\fR \fB7\fR .
.PP
Da character-entry escapes is always taken as ordinary characters.
For example, \fB\e135\fR is \fB]\fR up in Unicode yo, but \fB\e135\fR do
not terminizzle a funky-ass bracket expression. I aint talkin' bout chicken n' gravy biatch. Beware, however, dat some
applications (e.g., C compilaz n' tha Tcl interpreta if tha regular
expression aint quoted wit braces) interpret such sequences
themselves before tha regular-expression package gets ta peep them,
which may require doublin (quadrupling, etc.) the
.QW \fB\e\fR .
.SS "CLASS-SHORTHAND ESCAPES"
Class-shorthand escapes (AREs only) provide shorthandz fo' certain
commonly-used characta classes:
.RS 2
.TP 10
\fB\ed\fR
.
\fB[[:digit:]]\fR
.TP
\fB\es\fR
.
\fB[[:space:]]\fR
.TP
\fB\ew\fR
.
\fB[[:alnum:]_]\fR (note underscore)
.TP
\fB\eD\fR
.
\fB[^[:digit:]]\fR
.TP
\fB\eS\fR
.
\fB[^[:space:]]\fR
.TP
\fB\eW\fR
.
\fB[^[:alnum:]_]\fR (note underscore)
.RE
.PP
Within bracket expressions,
.QW \fB\ed\fR ,
.QW \fB\es\fR ,
and
.QW \fB\ew\fR \&
lose they outa brackets, and
.QW \fB\eD\fR ,
.QW \fB\eS\fR ,
and
.QW \fB\eW\fR \&
are illegal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. (So, fo' example,
.QW \fB[a-c\ed]\fR
is equivalent to
.QW \fB[a-c[:digit:]]\fR .
Also,
.QW \fB[a-c\eD]\fR ,
which is equivalent to
.QW \fB[a-c^[:digit:]]\fR ,
is illegal.)
.SS "CONSTRAINT ESCAPES"
A constraint escape (AREs only) be a cold-ass lil constraint, matchin tha empty
strin if specific conditions is met, freestyled as a escape:
.RS 2
.TP 6
\fB\eA\fR
.
matches only all up in tha beginnin of tha strang (see \fBMATCHING\fR,
below, fo' how tha fuck dis differs from
.QW \fB^\fR )
.TP
\fB\em\fR
.
matches only all up in tha beginnin of a word
.TP
\fB\eM\fR
.
matches only all up in tha end of a word
.TP
\fB\ey\fR
.
matches only all up in tha beginnin or end of a word
.TP
\fB\eY\fR
.
matches only at a point dat aint tha beginnin or end of a word
.TP
\fB\eZ\fR
.
matches only all up in tha end of tha strang (see \fBMATCHING\fR, below, for
how dis differs from
.QW \fB$\fR )
.TP
\fB\e\fIm\fR
.
(where \fIm\fR be a nonzero digit) a \fIback reference\fR, peep below
.TP
\fB\e\fImnn\fR
.
(where \fIm\fR be a nonzero digit, n' \fInn\fR is some mo' digits,
and tha decimal value \fImnn\fR aint pimped outa than tha number of
closin capturin parentheses peeped so far) a \fIback reference\fR, see
below
.RE
.PP
A word is defined as up in tha justification of
.QW \fB[[:<:]]\fR
and
.QW \fB[[:>:]]\fR
above. Constraint escapes is illegal within bracket expressions.
.SS "BACK REFERENCES"
A back reference (AREs only) matches tha same ol' dirty strang matched by the
parenthesized subexpression specified by tha number, so dat (e.g.)
.QW \fB([bc])\e1\fR
matches
.QW \fBbb\fR
or
.QW \fBcc\fR
but not
.QW \fBbc\fR .
Da subexpression must entirely precede tha back reference up in tha RE.
Subexpressions is numbered up in tha order of they leadin parentheses.
Non-capturin parentheses do not define subexpressions.
.PP
There be a inherent oldschool ambiguitizzle between octal
character-entry escapes n' back references, which is resolved by
heuristics, as hinted at above fo' realz. A leadin zero always indicates an
octal escape fo' realz. A single non-zero digit, not followed by another digit,
is always taken as a funky-ass back reference fo' realz. A multi-digit sequence not
startin wit a zero is taken as a funky-ass back reference if it comes afta a
suitable subexpression (i.e. tha number is up in tha legal range fo' a
back reference), n' otherwise is taken as octal.
.SH "METASYNTAX"
In addizzle ta tha main syntax busted lyrics bout above, there be some special
forms n' miscellaneous syntactic facilitizzles available.
.PP
Normally tha flavor of RE bein used is specified by
application-dependent means. But fuck dat shiznit yo, tha word on tha street is dat dis can be overridden by a
\fIdirector\fR. If a RE of any flavor begins with
.QW \fB***:\fR ,
the rest of tha RE be a ARE. If a RE of any flavor begins with
.QW \fB***=\fR ,
the rest of tha RE is taken ta be a literal string, with
all charactas considered ordinary characters.
.PP
An ARE may begin wit \fIembedded options\fR: a sequence
\fB(?\fIxyz\fB)\fR (where \fIxyz\fR is one or mo' alphabetic
characters) specifies options affectin tha rest of tha RE. These
supplement, n' can override, any options specified by the
application. I aint talkin' bout chicken n' gravy biatch. Da available option lettas are:
.RS 2
.TP 3
\fBb\fR
.
rest of RE be a BRE
.TP 3
\fBc\fR
.
case-sensitizzle matchin (usual default)
.TP 3
\fBe\fR
.
rest of RE be a ERE
.TP 3
\fBi\fR
.
case-insensitizzle matchin (see \fBMATCHING\fR, below)
.TP 3
\fBm\fR
.
historical synonym fo' \fBn\fR
.TP 3
\fBn\fR
.
newline-sensitizzle matchin (see \fBMATCHING\fR, below)
.TP 3
\fBp\fR
.
partial newline-sensitizzle matchin (see \fBMATCHING\fR, below)
.TP 3
\fBq\fR
.
rest of RE be a literal
.PQ quoted
string, all ordinary characters
.TP 3
\fBs\fR
.
non-newline-sensitizzle matchin (usual default)
.TP 3
\fBt\fR
.
tight syntax (usual default; peep below)
.TP 3
\fBw\fR
.
inverse partial newline-sensitive
.PQ weird
matchin (see \fBMATCHING\fR, below)
.TP 3
\fBx\fR
.
expanded syntax (see below)
.RE
.PP
Embedded options take effect all up in tha \fB)\fR terminatin tha sequence.
They is available only all up in tha start of a ARE, n' may not be used
lata within dat shit.
.PP
In addizzle ta tha usual (\fItight\fR) RE syntax, up in which all
charactas is significant, there be a \fIexpanded\fR syntax,
available up in all flavorz of RE wit tha \fB\-expanded\fR switch, or in
AREs wit tha embedded x option. I aint talkin' bout chicken n' gravy biatch. In tha expanded syntax, white-space
charactas is ignored n' all charactas between a \fB#\fR n' the
followin newline (or tha end of tha RE) is ignored, permitting
paragraphin n' commentin a cold-ass lil complex RE. There is three exceptions
to dat basic rule:
.IP \(bu 3
a white-space characta or
.QW \fB#\fR
preceded by
.QW \fB\e\fR
is retained
.IP \(bu 3
white space or
.QW \fB#\fR
within a funky-ass bracket expression is retained
.IP \(bu 3
white space n' comments is illegal within multi-characta symbols
like tha ARE
.QW \fB(?:\fR
or tha BRE
.QW \fB\e(\fR
.PP
Expanded-syntax white-space charactas is blank, tab, newline, and
any characta dat belongs ta tha \fIspace\fR characta class.
.PP
Finally, up in a ARE, outside bracket expressions, tha sequence
.QW \fB(?#\fIttt\fB)\fR
(where \fIttt\fR be any text not containin a
.QW \fB)\fR )
is a cold-ass lil comment, straight-up ignored. Y'all KNOW dat shit, muthafucka! Again, dis is not
allowed between tha charactaz of multi-characta symbols like
.QW \fB(?:\fR .
Such comments is mo' a oldschool artifact than a useful facility,
and they use is deprecated; use tha expanded syntax instead.
.PP
\fINone\fR of these metasyntax extensions be available if the
application (or a initial
.QW \fB***=\fR
director) has specified dat the
userz input be treated as a literal strang rather than as a RE.
.SH MATCHING
In tha event dat a RE could match mo' than one substrin of a given
string, tha RE matches tha one startin earliest up in tha string. If
the RE could match mo' than one substrin startin at dat point, its
choice is determined by its \fIpreference\fR: either tha longest
substring, or tha shortest.
.PP
Most atoms, n' all constraints, have no preference fo' realz. A parenthesized
RE has tha same ol' dirty preference (possibly none) as tha RE fo' realz. A quantified
atom wit quantifier \fB{\fIm\fB}\fR or \fB{\fIm\fB}?\fR has tha same
preference (possibly none) as tha atom itself fo' realz. A quantified atom with
other aiiight quantifiers (includin \fB{\fIm\fB,\fIn\fB}\fR with
\fIm\fR equal ta \fIn\fR) prefers longest match fo' realz. A quantified atom
with other non-greedy quantifiers (includin \fB{\fIm\fB,\fIn\fB}?\fR
with \fIm\fR equal ta \fIn\fR) prefers shortest match fo' realz. A branch has
the same preference as tha straight-up original gangsta quantified atom up in it which has a
preference fo' realz. An RE consistin of two or mo' branches connected by the
\fB|\fR operator prefers longest match.
.PP
Subject ta tha constraints imposed by tha rulez fo' matchin tha whole
RE, subexpressions also match tha longest or shortest possible
substrings, based on they preferences, wit subexpressions starting
earlier up in tha RE takin prioritizzle over ones startin later n' shit. Note that
outa subexpressions thus take prioritizzle over they component
subexpressions.
.PP
Note dat tha quantifiers \fB{1,1}\fR n' \fB{1,1}?\fR can be used to
force longest n' shortest preference, respectively, on a
subexpression or a whole RE.
.PP
Match lengths is measured up in characters, not collatin elements fo' realz. An
empty strang is considered longer than no match at all. For example,
.QW \fBbb*\fR
matches tha three middle charactas of
.QW \fBabbbc\fR ,
.QW \fB(week|wee)(night|knights)\fR
matches all ten charactas of
.QW \fBweeknights\fR ,
when
.QW \fB(.*).*\fR
is matched against
.QW \fBabc\fR
the parenthesized subexpression matches all three characters, n' when
.QW \fB(a*)*\fR
is matched against
.QW \fBbc\fR
both tha whole RE n' tha parenthesized subexpression match a empty string.
.PP
If case-independent matchin is specified, tha effect is much as if
all case distinctions had vanished from tha alphabet. When an
alphabetic dat exists up in multiple cases appears as a ordinary
characta outside a funky-ass bracket expression, it is effectively transformed
into a funky-ass bracket expression containin both cases, so dat \fBx\fR
becomes
.QW \fB[xX]\fR .
When it appears inside a funky-ass bracket expression,
all case counterpartz of it is added ta tha bracket expression, so
that
.QW \fB[x]\fR
becomes
.QW \fB[xX]\fR
and
.QW \fB[^x]\fR
becomes
.QW \fB[^xX]\fR .
.PP
If newline-sensitizzle matchin is specified, \fB.\fR n' bracket
expressions rockin \fB^\fR aint NEVER gonna match tha newline characta (so
that matches aint NEVER gonna cross newlines unless tha RE explicitly
arranges it) n' \fB^\fR n' \fB$\fR will match tha empty strang after
and before a newline respectively, up in addizzle ta matchin at
beginnin n' end of strang respectively fo' realz. ARE \fB\eA\fR n' \fB\eZ\fR
continue ta match beginnin or end of strang \fIonly\fR.
.PP
If partial newline-sensitizzle matchin is specified, dis affects
\fB.\fR n' bracket expressions as wit newline-sensitizzle matching,
but not \fB^\fR n' \fB$\fR.
.PP
If inverse partial newline-sensitizzle matchin is specified, this
affects \fB^\fR n' \fB$\fR as wit newline-sensitizzle matchin yo, but
not \fB.\fR n' bracket expressions. This aint straight-up useful but is
provided fo' symmetry.
.SH "LIMITS AND COMPATIBILITY"
No particular limit is imposed on tha length of REs. Programs
intended ta be highly portable should not employ REs longer than 256
bytes, as a POSIX-compliant implementation can refuse ta accept such
REs.
.PP
Da only feature of AREs dat is straight-up incompatible wit POSIX EREs
is dat \fB\e\fR do not lose its special significizzle inside bracket
expressions fo' realz. All other ARE features use syntax which is illegal or
has undefined or unspecified effects up in POSIX EREs; tha \fB***\fR
syntax of directors likewise is outside tha POSIX syntax fo' both BREs
and EREs.
.PP
Many of tha ARE extensions is borrowed from Perl yo, but some have been
changed ta clean dem up, n' all dem Perl extensions is not present.
Incompatibilitizzlez of note include
.QW \fB\eb\fR ,
.QW \fB\eB\fR ,
the lack of special treatment fo' a trailin newline, tha addizzle of
complemented bracket expressions ta tha thangs affected by
newline-sensitizzle matching, tha restrictions on parentheses n' back
references up in lookahead constraints, n' tha longest/shortest-match
(rather than first-match) matchin semantics.
.PP
Da matchin rulez fo' REs containin both aiiight n' non-greedy
quantifiers have chizzled since early beta-test versionz of this
package. (Da freshly smoked up rulez is much simpla n' cleaner yo, but do not work
as hard at guessin tha userz real intentions.)
.PP
Henry Spencerz original gangsta 1986 \fIregexp\fR package, still in
widespread use (e.g., up in pre-8.1 releasez of Tcl), implemented an
early version of todizzlez EREs. There is four incompatibilities
between \fIregexp\fRz near-EREs
.PQ RREs " fo' short"
and AREs. In roughly increasin order of significance:
.IP \(bu 3
In AREs, \fB\e\fR followed by a alphanumeric characta is either an
escape or a error, while up in RREs, dat shiznit was just another way of writing
the alphanumeric. This should not be a problem cuz there was no
reason ta write such a sequence up in RREs.
.IP \(bu 3
\fB{\fR followed by a gangbangin' finger-lickin' digit up in a ARE is tha beginnin of a funky-ass bound,
while up in RREs, \fB{\fR was always a ordinary character n' shit. Right back up in yo muthafuckin ass. Such
sequences should be rare, n' will often result up in a error cuz
followin charactas aint gonna be lookin like a valid bound.
.IP \(bu 3
In AREs, \fB\e\fR remains a special characta within
.QW \fB[\|]\fR ,
so a literal \fB\e\fR within \fB[\|]\fR must be written
.QW \fB\e\e\fR .
\fB\e\e\fR also gives a literal \fB\e\fR within \fB[\|]\fR up in RREs,
but only truly paranoid programmers routinely doubled tha backslash.
.IP \(bu 3
AREs report tha longest/shortest match fo' tha RE, rather than the
first found up in a specified search order n' shit. This may affect some RREs
which was freestyled up in tha expectation dat tha straight-up original gangsta match would be
reported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. (Da careful craftin of RREs ta optimize tha search order
for fast matchin is obsolete (AREs examine all possible matches in
parallel, n' they performizzle is largely insensitizzle ta their
complexity) but cases where tha search order was exploited to
deliberately find a match which was \fInot\fR tha longest/shortest
will need rewriting.)
.SH "BASIC REGULAR EXPRESSIONS"
BREs differ from EREs up in nuff muthafuckin respects.
.QW \fB|\fR ,
.QW \fB+\fR ,
and \fB?\fR is ordinary charactas n' there is no equivalent fo' their
functionality. Da delimitas fo' boundz is \fB\e{\fR and
.QW \fB\e}\fR ,
with \fB{\fR n' \fB}\fR by theyselves ordinary characters. The
parentheses fo' nested subexpressions is \fB\e(\fR and
.QW \fB\e)\fR ,
with \fB(\fR n' \fB)\fR by theyselves ordinary
characters. \fB^\fR be a ordinary characta except all up in tha beginning
of tha RE or tha beginnin of a parenthesized subexpression, \fB$\fR
is a ordinary characta except all up in tha end of tha RE or tha end of a
parenthesized subexpression, n' \fB*\fR be a ordinary characta if
it appears all up in tha beginnin of tha RE or tha beginnin of a
parenthesized subexpression (afta a possible leading
.QW \fB^\fR ).
Finally, single-digit back references is available, n' \fB\e<\fR and
\fB\e>\fR is synonyms for
.QW \fB[[:<:]]\fR
and
.QW \fB[[:>:]]\fR
respectively; no other escapes is available.
.SH "SEE ALSO"
RegExp(3), regexp(n), regsub(n), lsearch(n), switch(n), text(n)
.SH KEYWORDS
match, regular expression, string
.\" Local Variables:
.\" mode: nroff
.\" End:
