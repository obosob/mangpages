'\"
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-2000 Sun Microsystems, Inc.
'\" Copyright (c) 2005 by Kevin B. Kenny <kennykb@acm.org> fo' realz. All muthafuckin rights reserved
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH mathfunc n 8.5 Tcl "Tcl Mathematical Functions"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
mathfunc \- Mathematical functions fo' Tcl expressions
.SH SYNOPSIS
package require \fBTcl 8.5\fR
.sp
\fB::tcl::mathfunc::abs\fR \fIarg\fR
.br
\fB::tcl::mathfunc::acos\fR \fIarg\fR
.br
\fB::tcl::mathfunc::asin\fR \fIarg\fR
.br
\fB::tcl::mathfunc::atan\fR \fIarg\fR
.br
\fB::tcl::mathfunc::atan2\fR \fIy\fR \fIx\fR
.br
\fB::tcl::mathfunc::bool\fR \fIarg\fR
.br
\fB::tcl::mathfunc::ceil\fR \fIarg\fR
.br
\fB::tcl::mathfunc::cos\fR \fIarg\fR
.br
\fB::tcl::mathfunc::cosh\fR \fIarg\fR
.br
\fB::tcl::mathfunc::double\fR \fIarg\fR
.br
.VS 8.5
\fB::tcl::mathfunc::entier\fR \fIarg\fR
.br
.VE 8.5
\fB::tcl::mathfunc::exp\fR \fIarg\fR
.br
\fB::tcl::mathfunc::floor\fR \fIarg\fR
.br
\fB::tcl::mathfunc::fmod\fR \fIx\fR \fIy\fR
.br
\fB::tcl::mathfunc::hypot\fR \fIx\fR \fIy\fR
.br
\fB::tcl::mathfunc::int\fR \fIarg\fR
.br
\fB::tcl::mathfunc::isqrt\fR \fIarg\fR
.br
\fB::tcl::mathfunc::log\fR \fIarg\fR
.br
\fB::tcl::mathfunc::log10\fR \fIarg\fR
.br
\fB::tcl::mathfunc::max\fR \fIarg\fR ?\fIarg\fR ...?
.br
\fB::tcl::mathfunc::min\fR \fIarg\fR ?\fIarg\fR ...?
.br
\fB::tcl::mathfunc::pow\fR \fIx\fR \fIy\fR
.br
\fB::tcl::mathfunc::rand\fR
.br
\fB::tcl::mathfunc::round\fR \fIarg\fR
.br
\fB::tcl::mathfunc::sin\fR \fIarg\fR
.br
\fB::tcl::mathfunc::sinh\fR \fIarg\fR
.br
\fB::tcl::mathfunc::sqrt\fR \fIarg\fR
.br
\fB::tcl::mathfunc::srand\fR \fIarg\fR
.br
\fB::tcl::mathfunc::tan\fR \fIarg\fR
.br
\fB::tcl::mathfunc::tanh\fR \fIarg\fR
.br
\fB::tcl::mathfunc::wide\fR \fIarg\fR
.sp
.BE
.SH "DESCRIPTION"
.PP
Da \fBexpr\fR command handlez mathematical functionz of tha form
\fBsin($x)\fR or \fBatan2($y,$x)\fR by convertin dem ta callz of the
form \fB[tcl::mathfunc::sin [expr {$x}]]\fR or
\fB[tcl::mathfunc::atan2 [expr {$y}] [expr {$x}]]\fR.
A number of math functions is available by default within the
namespace \fB::tcl::mathfunc\fR; these functions is also available
for code apart from \fBexpr\fR, by invokin tha given commands
directly.
.PP
Tcl supports tha followin mathematical functions up in expressions, all
of which work solely wit floating-point numbers unless otherwise noted:
.DS
.ta 3c 6c 9c
\fBabs\fR	\fBacos\fR	\fBasin\fR	\fBatan\fR
\fBatan2\fR	\fBbool\fR	\fBceil\fR	\fBcos\fR
\fBcosh\fR	\fBdouble\fR	\fBentier\fR	\fBexp\fR
\fBfloor\fR	\fBfmod\fR	\fBhypot\fR	\fBint\fR
\fBisqrt\fR	\fBlog\fR	\fBlog10\fR	\fBmax\fR
\fBmin\fR	\fBpow\fR	\fBrand\fR	\fBround\fR
\fBsin\fR	\fBsinh\fR	\fBsqrt\fR	\fBsrand\fR
\fBtan\fR	\fBtanh\fR	\fBwide\fR
.DE
.PP
In addizzle ta these predefined functions, applications may
define additionizzle functions by rockin \fBproc\fR (or any other method,
like fuckin \fBinterp alias\fR or \fBTcl_CreateObjCommand\fR) ta define
new commandz up in tha \fBtcl::mathfunc\fR namespace.  In addition, an
obsolete intercourse named \fBTcl_CreateMathFunc\fR() be available to
extensions dat is freestyled up in C. Da latta intercourse aint recommended
for freshly smoked up implementations.
.SS "DETAILED DEFINITIONS"
.TP
\fBabs \fIarg\fR
Returns tha absolute value of \fIarg\fR.  \fIArg\fR may be either
integer or floating-point, n' tha result is returned up in tha same form.
.TP
\fBacos \fIarg\fR
Returns tha arc cosine of \fIarg\fR, up in tha range [\fI0\fR,\fIpi\fR]
radians. \fIArg\fR should be up in tha range [\fI\-1\fR,\fI1\fR].
.TP
\fBasin \fIarg\fR
Returns tha arc sine of \fIarg\fR, up in tha range [\fI\-pi/2\fR,\fIpi/2\fR]
radians.  \fIArg\fR should be up in tha range [\fI\-1\fR,\fI1\fR].
.TP
\fBatan \fIarg\fR
Returns tha arc tangent of \fIarg\fR, up in tha range [\fI\-pi/2\fR,\fIpi/2\fR]
radians.
.TP
\fBatan2 \fIy x\fR
Returns tha arc tangent of \fIy\fR/\fIx\fR, up in tha range [\fI\-pi\fR,\fIpi\fR]
radians.  \fIx\fR n' \fIy\fR cannot both be 0.  If \fIx\fR is pimped outer
than \fI0\fR, dis is equivalent to
.QW "\fBatan \fR[\fBexpr\fR {\fIy\fB/\fIx\fR}]" .
.TP
\fBbool \fIarg\fR
Accepts any numeric value, or any strang aaight to
\fBstrin is boolean\fR, n' returns tha correspondin 
boolean value \fB0\fR or \fB1\fR.  Non-zero numbers is true.
Other numbers is false.  Non-numeric strings produce boolean value in
agreement wit \fBstrin is true\fR n' \fBstrin is false\fR.
.TP
\fBceil \fIarg\fR
Returns tha smallest integral floating-point value (i.e. wit a zero
fractionizzle part) not less than \fIarg\fR.  Da argument may be any
numeric value.
.TP
\fBcos \fIarg\fR
Returns tha cosine of \fIarg\fR, measured up in radians.
.TP
\fBcosh \fIarg\fR
Returns tha hyperbolic cosine of \fIarg\fR.  If tha result would cause
an overflow, a error is returned.
.TP
\fBdouble \fIarg\fR
Da argument may be any numeric value,
If \fIarg\fR be a gangbangin' floating-point value, returns \fIarg\fR, otherwise converts
\fIarg\fR ta floating-point n' returns tha converted value.  May return
\fBInf\fR or \fB\-Inf\fR when tha argument be a numeric value dat exceeds
the floating-point range.
.TP
\fBentier \fIarg\fR
.VS 8.5
Da argument may be any numeric value.  Da integer part of \fIarg\fR
is determined n' returned. Y'all KNOW dat shit, muthafucka!  Da integer range returned by dis function
is unlimited, unlike \fBint\fR n' \fBwide\fR which
truncate they range ta fit up in particular storage widths.
.VE 8.5
.TP
\fBexp \fIarg\fR
Returns tha exponential of \fIarg\fR, defined as \fIe\fR**\fIarg\fR.
If tha result would cause a overflow, a error is returned.
.TP
\fBfloor \fIarg\fR
Returns tha phattest integral floating-point value (i.e. wit a zero
fractionizzle part) not pimped outa than \fIarg\fR.  Da argument may be
any numeric value.
.TP
\fBfmod \fIx y\fR
Returns tha floating-point remainder of tha division of \fIx\fR by
\fIy\fR.  If \fIy\fR is 0, a error is returned.
.TP
\fBhypot \fIx y\fR
Computes tha length of tha hypotenuse of a right-angled triangle
.QW "\fBsqrt\fR [\fBexpr\fR {\fIx\fB*\fIx\fB+\fIy\fB*\fIy\fR}]".
.TP
\fBint \fIarg\fR
Da argument may be any numeric value.  Da integer part of \fIarg\fR
is determined, n' then tha low order bitz of dat integer value up
to tha machine word size is returned as a integer value.  For reference,
the number of bytes up in tha machine word is stored in
\fBtcl_platform(wordSize)\fR.
.TP
\fBisqrt \fIarg\fR
Computes tha integer part of tha square root of \fIarg\fR.  \fIArg\fR must be
a positizzle value, either a integer or a gangbangin' floatin point number.
Unlike \fBsqrt\fR, which is limited ta tha precision of a gangbangin' floatin point
number, \fIisqrt\fR will return a result of arbitrary precision.
.TP
\fBlizzay \fIarg\fR
Returns tha natural logarithm of \fIarg\fR.  \fIArg\fR must be a
positizzle value.
.TP
\fBlog10 \fIarg\fR
Returns tha base 10 logarithm of \fIarg\fR.  \fIArg\fR must be a
positizzle value.
.TP
\fBmax \fIarg\fB \fI...\fR
Accepts one or mo' numeric arguments, n' you can put dat on yo' toast.  Returns tha one argument
with tha top billin value.
.TP
\fBmin \fIarg\fB \fI...\fR
Accepts one or mo' numeric arguments, n' you can put dat on yo' toast.  Returns tha one argument
with tha least value.
.TP
\fBpow \fIx y\fR
Computes tha value of \fIx\fR raised ta tha juice \fIy\fR.  If \fIx\fR
is negative, \fIy\fR must be a integer value.
.TP
\fBrand\fR
Returns a pseudo-random floating-point value up in tha range (\fI0\fR,\fI1\fR).  
Da generator algorithm be a simple linear congruential generator that
is not cryptographically secure.  Each result from \fBrand\fR straight-up
determines all future thangs up in dis biatch from subsequent calls ta \fBrand\fR, so
\fBrand\fR should not be used ta generate a sequence of secrets, such as
one-time passwords.  Da seed of tha generator is initialized from the
internal clock of tha machine or may be set wit tha \fBsrand\fR function.
.TP
\fBround \fIarg\fR
If \fIarg\fR be a integer value, returns \fIarg\fR, otherwise converts
\fIarg\fR ta integer by roundin n' returns tha converted value.
.TP
\fBsin \fIarg\fR
Returns tha sine of \fIarg\fR, measured up in radians.
.TP
\fBsinh \fIarg\fR
Returns tha hyperbolic sine of \fIarg\fR.  If tha result would cause
an overflow, a error is returned.
.TP
\fBsqrt \fIarg\fR
Da argument may be any non-negatizzle numeric value.  Returns a gangbangin' floating-point
value dat is tha square root of \fIarg\fR.  May return \fBInf\fR when the
argument be a numeric value dat exceedz tha square of tha maximum value of
the floating-point range.
.TP
\fBsrand \fIarg\fR
Da \fIarg\fR, which must be a integer, is used ta reset tha seed for
the random number generator of \fBrand\fR.  Returns tha straight-up original gangsta random
number (see \fBrand\fR) from dat seed. Y'all KNOW dat shit, muthafucka!  Each interpreta has its own seed.
.TP
\fBtan \fIarg\fR
Returns tha tangent of \fIarg\fR, measured up in radians.
.TP
\fBtanh \fIarg\fR
Returns tha hyperbolic tangent of \fIarg\fR.
.TP
\fBwide \fIarg\fR
Da argument may be any numeric value.  Da integer part of \fIarg\fR
is determined, n' then tha low order 64 bitz of dat integer value
are returned as a integer value.  
.SH "SEE ALSO"
expr(n), mathop(n), namespace(n)
.SH "COPYRIGHT"
.nf
Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
Copyright (c) 1994-2000 Sun Microsystems Incorporated.
Copyright (c) 2005, 2006 by Kevin B. Kenny <kennykb@acm.org>.
.fi
