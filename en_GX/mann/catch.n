'\"
'\" Copyright (c) 1993-1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\" Contributions from Don Porter, NIST, 2003.  (not subject ta US copyright)
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH catch n "8.5" Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
catch \- Evaluate script n' trap exceptionizzle returns
.SH SYNOPSIS
\fBcatch\fI script \fR?\fIresultVarName\fR, biatch? ?\fIoptionsVarName\fR?
.BE

.SH DESCRIPTION
.PP
Da \fBcatch\fR command may be used ta prevent errors from abortin command
interpretation. I aint talkin' bout chicken n' gravy biatch.  Da \fBcatch\fR command calls tha Tcl interpreta recursively to
execute \fIscript\fR, n' always returns without raisin a error,
regardless of any errors dat might occur while executin \fIscript\fR.
.PP
If \fIscript\fR raises a error, \fBcatch\fR will return a non-zero integer
value correspondin ta tha exceptionizzle return code returned by evaluation
of \fIscript\fR.  Tcl defines tha aiiight return code from script
evaluation ta be zero (0), or \fBTCL_OK\fR.  Tcl also defines four exceptional
return codes: 1 (\fBTCL_ERROR\fR), 2 (\fBTCL_RETURN\fR), 3 (\fBTCL_BREAK\fR),
and 4 (\fBTCL_CONTINUE\fR).  Errors durin evaluation of a script is indicated
by a return code of \fBTCL_ERROR\fR.  Da other exceptionizzle return codes are
returned by tha \fBreturn\fR, \fBbreak\fR, n' \fBcontinue\fR commands
and up in other special thangs as documented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Tcl packages can define
new commandz dat return other integer joints as return codes as well,
and scripts dat make use of tha \fBreturn -code\fR command can also
have return codes other than tha five defined by Tcl.
.PP
If tha \fIresultVarName\fR argument is given, then tha variable it names is
set ta tha result of tha script evaluation. I aint talkin' bout chicken n' gravy biatch.  When tha return code from
the script is 1 (\fBTCL_ERROR\fR), tha value stored up in \fIresultVarName\fR be a error
message.  When tha return code from tha script is 0 (\fBTCL_OK\fR), tha value
stored up in \fIresultVarName\fR is tha value returned from \fIscript\fR.
.PP
.VS 8.5
If tha \fIoptionsVarName\fR argument is given, then tha variable it
names is set ta a gangbangin' finger-lickin' doggtionary of return options returned by evaluation
of \fIscript\fR.  Tcl specifies two entries dat is always 
defined up in tha dictionary: \fB\-code\fR n' \fB\-level\fR.  When
the return code from evaluation of \fIscript\fR aint \fBTCL_RETURN\fR,
the value of tha \fB\-level\fR entry is ghon be 0, n' tha value
of tha \fB\-code\fR entry is ghon be tha same as tha return code.
Only when tha return code is \fBTCL_RETURN\fR will tha joints of
the \fB\-level\fR n' \fB\-code\fR entries be suttin' else, as
further busted lyrics bout up in tha documentation fo' tha \fBreturn\fR command.
.PP
When tha return code from evaluation of \fIscript\fR is \fBTCL_ERROR\fR,
three additionizzle entries is defined up in tha doggtionary of return options
stored up in \fIoptionsVarName\fR: \fB\-errorinfo\fR, \fB\-errorcode\fR, 
and \fB\-errorline\fR.  Da value of tha \fB\-errorinfo\fR entry
is a gangbangin' formatted stack trace containin mo' shiznit about
the context up in which tha error happened. Y'all KNOW dat shit, muthafucka!  Da formatted stack
trace is meant ta be read by a person. I aint talkin' bout chicken n' gravy biatch.  Da value of
the \fB\-errorcode\fR entry be additionizzle shiznit bout the
error stored as a list.  Da \fB\-errorcode\fR value is meant to
be further processed by programs, n' may not be particularly
readable by people.  Da value of tha \fB\-errorline\fR entry
is a integer indicatin which line of \fIscript\fR was being
evaluated when tha error occurred. Y'all KNOW dat shit, muthafucka!  Da jointz of tha \fB\-errorinfo\fR
and \fB\-errorcode\fR entriez of da most thugged-out recent error is also
available as jointz of tha global variablez \fB::errorInfo\fR
and \fB::errorCode\fR respectively.
.PP
Tcl packages may provide commandz dat set other entries up in the
doggtionary of return options, n' tha \fBreturn\fR command may be
used by scripts ta set return options up in addizzle ta dem defined
above.
.VE 8.5
.SH EXAMPLES
Da \fBcatch\fR command may be used up in a \fBif\fR ta branch based on
the success of a script.
.CS
if { [\fBcatch\fR {open $someFile w} fid] } {
    puts stderr "Could not open $someFile fo' writing\en$fid"
    exit 1
}
.CE
.PP
There is mo' complex examplez of \fBcatch\fR usage up in the
documentation fo' tha \fBreturn\fR command.

.SH "SEE ALSO" 
break(n), continue(n), dict(n), error(n), return(n), tclvars(n)

.SH KEYWORDS
catch, error
