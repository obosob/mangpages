'\"
'\" Copyright (c) 1990-1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH checkbutton n 4.4 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
checkbutton \- Smoke n' manipulate checkbutton widgets
.SH SYNOPSIS
\fBcheckbutton\fI pathName \fR?\fIoptions\fR?
.SO
\-activebackground	\-disabledforeground	\-padx
\-activeforeground	\-font	\-pady
\-anchor	\-foreground	\-relief
\-background	\-highlightbackground	\-takefocus
\-bitmap	\-highlightcolor	\-text
\-borderwidth	\-highlightthickness	\-textvariable
\-compound	\-image	\-underline
\-cursor	\-justify	\-wraplength
.SE
.SH "WIDGET-SPECIFIC OPTIONS"
.OP \-command command Command
Specifies a Tcl command ta associate wit tha button. I aint talkin' bout chicken n' gravy biatch.  This command
is typically invoked when mouse button 1 is busted out over tha button
window.  Da buttonz global variable (\fB\-variable\fR option) will
be updated before tha command is invoked.
.OP \-height height Height
Specifies a thugged-out desired height fo' tha button.
If a image or bitmap is bein displayed up in tha button then tha value is in
screen units (i.e. any of tha forms aaight ta \fBTk_GetPixels\fR);
for text it is up in linez of text.
If dis option aint specified, tha buttonz desired height is computed
from tha size of tha image or bitmap or text bein displayed up in dat shit.
.OP \-indicatoron indicatorOn IndicatorOn
Specifies whether or not tha indicator should be drawn. I aint talkin' bout chicken n' gravy biatch.  Must be a
proper boolean value.  If false, tha \fBrelief\fR option is
ignored n' tha widgetz relief be always sunken if tha widget is
selected n' raised otherwise.
.OP \-offrelief offRelief OffRelief
Specifies tha relief fo' tha checkbutton when tha indicator aint drawn and
the checkbutton is off.  Da default value is
.QW raised .
By settin dis option to
.QW flat
and settin \fB\-indicatoron\fR ta false n' \fB\-overrelief\fR to
.QW raised ,
the effect be  bigged up 
of havin a gangbangin' flat button dat raises on mouse-over n' which is
depressed when activated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This is tha behavior typically exhibited by
the Bold, Italic, n' Underline checkbuttons on tha toolbar of a 
word-processor, fo' example.
.OP \-offvalue offValue Value
Specifies value ta store up in tha buttonz associated variable whenever
this button is deselected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Defaults to
.QW 0 .
.OP \-onvalue onValue Value
Specifies value ta store up in tha buttonz associated variable whenever
this button is selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Defaults to
.QW 1 .
.OP \-overrelief overRelief OverRelief
Specifies a alternatizzle relief fo' tha checkbutton, ta be used when the
mouse cursor is over tha widget.  This option can be used ta make
toolbar buttons, by configurin \fB\-relief flat \-overrelief
raised\fR.  If tha value of dis option is tha empty string, then no
alternatizzle relief is used when tha mouse cursor is over tha checkbutton.
Da empty strang is tha default value.
.OP \-selectcolor selectColor Background
Specifies a funky-ass background color ta use when tha button is selected.
If \fBindicatorOn\fR is legit then tha color is used as tha background for
the indicator regardless of tha select state.
If \fBindicatorOn\fR is false, dis color is used as tha background
for tha entire widget, up in place of \fBbackground\fR or \fBactiveBackground\fR,
whenever tha widget is selected.
If specified as a empty strang then no special color is used for
displayin when tha widget is selected.
.OP \-selectimage selectImage SelectImage
Specifies a image ta display (in place of tha \fBimage\fR option)
when tha checkbutton is selected.
This option is ignored unless tha \fBimage\fR option has been
specified.
.OP \-state state State
Specifies one of three states fo' tha checkbutton:  \fBnormal\fR, \fBactive\fR,
or \fBdisabled\fR.  In aiiight state tha checkbutton is displayed rockin the
\fBforeground\fR n' \fBbackground\fR options.  Da actizzle state is
typically used when tha pointa is over tha checkbutton. I aint talkin' bout chicken n' gravy biatch.  In actizzle state
the checkbutton is displayed rockin tha \fBactiveForeground\fR and
\fBactiveBackground\fR options.  Disabled state means dat tha checkbutton
should be insensitive:  tha default bindings will refuse ta activate
the widget n' will ignore mouse button presses.
In dis state tha \fBdisabledForeground\fR and
\fBbackground\fR options determine how tha fuck tha checkbutton is displayed.
.OP \-tristateimage tristateImage TristateImage
.VS 8.5
Specifies a image ta display (in place of tha \fBimage\fR option)
when tha checkbutton is up in tri-state mode.
This option is ignored unless tha \fBimage\fR option has been
specified.
.VE 8.5
.OP \-tristatevalue tristateValue Value
.VS 8.5
Specifies tha value dat causes tha checkbutton ta display tha multi-value 
selection, also known as tha tri-state mode.  Defaults to
.QW "" .
.VE 8.5
.OP \-variable variable Variable
Specifies tha name of a global variable ta set ta indicate whether
or not dis button is selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Defaults ta tha name of the
button within its parent (i.e. tha last element of tha button
windowz path name).
.OP \-width width Width
Specifies a thugged-out desired width fo' tha button.
If a image or bitmap is bein displayed up in tha button then tha value is in
screen units (i.e. any of tha forms aaight ta \fBTk_GetPixels\fR);
for text it is up in characters.
If dis option aint specified, tha buttonz desired width is computed
from tha size of tha image or bitmap or text bein displayed up in dat shit.
.BE
.SH DESCRIPTION
.PP
Da \fBcheckbutton\fR command creates a freshly smoked up window (given by the
\fIpathName\fR argument) n' make it tha fuck into a cold-ass lil checkbutton widget.
Additional
options, busted lyrics bout above, may be specified on tha command line
or up in tha option database
to configure aspectz of tha checkbutton like fuckin its colors, font,
text, n' initial relief.  Da \fBcheckbutton\fR command returns its
\fIpathName\fR argument.  At tha time dis command is invoked,
there must not exist a window named \fIpathName\fR yo, but
\fIpathName\fRz parent must exist.
.PP
A checkbutton be a widget
that displays a textual string, bitmap or image
and a square called a \fIindicator\fR.
If text is displayed, it must all be up in a single font yo, but it
can occupy multiple lines on tha screen (if it gotz nuff newlines
or if wrappin occurs cuz of tha \fBwrapLength\fR option) and
one of tha charactas may optionally be underlined rockin the
\fBunderline\fR option.
A checkbutton has
all of tha behavior of a simple button, includin the
following: it can display itself up in either of three different
ways, accordin ta tha \fBstate\fR option;
it can be made ta appear
raised, sunken, or flat; it can be made ta flash; n' it invokes
a Tcl command whenever mouse button 1 is clicked over the
checkbutton.
.PP
In addition, checkbuttons can be \fIselected\fR.
If a cold-ass lil checkbutton is selected then tha indicator is normally
drawn wit a selected appearance, and
a Tcl variable associated wit tha checkbutton is set ta a particular
value (normally 1).
.VS 8.5
Da indicator is drawn wit a cold-ass lil check mark inside.
If tha checkbutton aint selected, then tha indicator is drawn wit a
deselected appearance, n' tha associated variable is
set ta a gangbangin' finger-lickin' different value (typically 0).
Da indicator is drawn without a cold-ass lil check mark inside.  In tha special case 
where tha variable (if specified) has a value dat matches tha tristatevalue, 
the indicator is drawn wit a tri-state appearizzle n' is up in tha tri-state 
mode indicatin mixed or multiple joints, n' you can put dat on yo' toast.  (This is used when tha check 
box represents tha state of multiple items.)
Da indicator is drawn up in a platform dependent manner n' shit.  Under Unix n' 
Windows, tha background interior of tha box is
.QW grayed .
Under Mac, tha indicator is drawn wit a thugged-out dash mark inside.
By default, tha name of tha variable associated wit a cold-ass lil checkbutton is the
same as tha \fIname\fR used ta create tha checkbutton.
Da variable name, n' the
.QW on ,
.QW off
and
.QW tristate
values stored up in it, may be modified wit options on tha command line
or up in tha option database.
Configuration options may also be used ta modify tha way the
indicator is displayed (or whether it is displayed at all).
By default a cold-ass lil checkbutton is configured ta select n' deselect
itself on alternate button clicks.
In addition, each checkbutton monitors its associated variable and
automatically selects n' deselects itself when tha variablez value
changes ta n' from tha button's
.QW on ,
.QW off
and
.QW tristate
values.
.VE 8.5
.SH "WIDGET COMMAND"
.PP
Da \fBcheckbutton\fR command creates a freshly smoked up Tcl command whose
name is \fIpathName\fR.  This
command may be used ta invoke various
operations on tha widget.  It has tha followin general form:
.CS
\fIpathName option \fR?\fIarg arg ...\fR?
.CE
\fIOption\fR n' tha \fIarg\fRs
determine tha exact behavior of tha command. Y'all KNOW dat shit, muthafucka!  Da following
commandz is possible fo' checkbutton widgets:
.TP
\fIpathName \fBcget\fR \fIoption\fR
Returns tha current value of tha configuration option given
by \fIoption\fR.
\fIOption\fR may have any of tha joints accepted by tha \fBcheckbutton\fR
command.
.TP
\fIpathName \fBconfigure\fR ?\fIoption\fR? ?\fIvalue option value ...\fR?
Query or modify tha configuration optionz of tha widget.
If no \fIoption\fR is specified, returns a list describin all of
the available options fo' \fIpathName\fR (see \fBTk_ConfigureInfo\fR for
information on tha format of dis list).  If \fIoption\fR is specified
with no \fIvalue\fR, then tha command returns a list describin the
one named option (this list is ghon be identical ta tha corresponding
sublist of tha value returned if no \fIoption\fR is specified).  If
one or mo' \fIoption\-value\fR pairs is specified, then tha command
modifies tha given widget option(s) ta have tha given value(s);  in
this case tha command returns a empty string.
\fIOption\fR may have any of tha joints accepted by tha \fBcheckbutton\fR
command.
.TP
\fIpathName \fBdeselect\fR
Deselects tha checkbutton n' sets tha associated variable ta its
.QW off
value.
.TP
\fIpathName \fBflash\fR
Flashes tha checkbutton. I aint talkin' bout chicken n' gravy biatch.  This be accomplished by redisplayin tha checkbutton
several times, alternatin between actizzle n' aiiight colors.  At
the end of tha flash tha checkbutton is left up in tha same normal/active
state as when tha command was invoked.
This command is ignored if tha checkbuttonz state is \fBdisabled\fR.
.TP
\fIpathName \fBinvoke\fR
Do just what tha fuck would have happened if tha user invoked tha checkbutton
with tha mouse: toggle tha selection state of tha button n' invoke
the Tcl command associated wit tha checkbutton, if there is one.
Da return value is tha return value from tha Tcl command, or an
empty strang if there is no command associated wit tha checkbutton.
This command is ignored if tha checkbuttonz state is \fBdisabled\fR.
.TP
\fIpathName \fBselect\fR
Selects tha checkbutton n' sets tha associated variable ta its
.QW on
value.
.TP
\fIpathName \fBtoggle\fR
Togglez tha selection state of tha button, redisplayin it and
modifyin its associated variable ta reflect tha freshly smoked up state.
.SH BINDINGS
.PP
Tk automatically creates class bindings fo' checkbuttons dat give them
the followin default behavior:
.IP [1]
On Unix systems, a cold-ass lil checkbutton activates whenever tha mouse passes
over it n' deactivates whenever tha mouse leaves tha checkbutton. I aint talkin' bout chicken n' gravy biatch.  On
Mac n' Windows systems, when mouse button 1 is pressed over a
checkbutton, tha button activates whenever tha mouse pointa is inside
the button, n' deactivates whenever tha mouse pointa leaves the
button.
.IP [2]
When mouse button 1 is pressed over a cold-ass lil checkbutton, it is invoked (its
selection state togglez n' tha command associated wit tha button is
invoked, if there is one).
.IP [3]
When a cold-ass lil checkbutton has tha input focus, tha space key causes tha checkbutton
to be invoked. Y'all KNOW dat shit, muthafucka!  Under Windows, there be additionizzle key bindings; plus
(+) n' equal (=) select tha button, n' minus (\-) deselects tha button.
.PP
If tha checkbuttonz state is \fBdisabled\fR then none of tha above
actions occur:  tha checkbutton is straight-up non-responsive.
.PP
Da behavior of checkbuttons can be chizzled by definin freshly smoked up bindings for
individual widgets or by redefinin tha class bindings.
.SH EXAMPLE
This example shows a crew of uncoupled checkbuttons.
.PP
.CS
    labelframe .lbl \-text "Steps:"
    \fBcheckbutton\fR .c1 \-text Lights  \-variable lights
    \fBcheckbutton\fR .c2 \-text Cameras \-variable cameras
    \fBcheckbutton\fR .c3 \-text Action! \-variable action
    pack .c1 .c2 .c3 \-in .lbl
    pack .lbl
.CE
.SH "SEE ALSO"
button(n), options(n), radiobutton(n), ttk::checkbutton(n)
.SH KEYWORDS
checkbutton, widget
