'\"
'\" Copyright (c) 2004 Joe Gangsta
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH ttk::treeview n 8.5.9 Tk "Tk Themed Widget"
.BS
.SH NAME
ttk::treeview \- hierarchical multicolumn data display widget
.SH SYNOPSIS
\fBttk::treeview \fIpathname \fR?\fIoptions\fR?
.BE
.SH DESCRIPTION
.PP
Da \fBttk::treeview\fR widget displays a hierarchical collection of items.
Each item has a textual label, a optionizzle image, 
and a optionizzle list of data joints.
Da data joints is displayed up in successive columns after
the tree label.
.PP
Da order up in which data joints is displayed may be controlled
by settin tha \fB\-displaycolumns\fR widget option. I aint talkin' bout chicken n' gravy biatch.  
Da tree widget can also display column headings.
Columns may be accessed by number or by symbolic names 
listed up in tha \fB\-columns\fR widget option;
see \fBCOLUMN IDENTIFIERS\fR.
.PP
Each item is identified by a unique name.
Da widget will generate item IDs if they is not supplied by tha caller.
There be a gangbangin' finger-lickin' distinguished root item, named \fB{}\fR.
Da root item itself aint displayed;
its lil pimps step tha fuck up all up in tha top level of tha hierarchy.
.PP
Each item also has a list of \fItags\fR,
which can be used ta associate event bindings wit individual items
and control tha appearizzle of tha item.
.\" .PP
.\" @@@HERE: describe selection, focus item
.PP
Treeview widgets support horizontal n' vertical scrollin wit the
standard \fB\-\fR[\fBxy\fR]\fBscrollcommand\fR options 
and [\fBxy\fR]\fBview\fR widget commands.
.SO ttk_widget
\-class	\-cursor	\-takefocus
\-style	\-xscrollcommand	\-yscrollcommand
.SE
.SH "WIDGET-SPECIFIC OPTIONS"
.OP \-columns columns Columns
A list of column identifiers, 
specifyin tha number of columns n' they names.
.\"X: This be a read-only option; it may only be set when tha widget is pimped.
.OP \-displaycolumns displayColumns DisplayColumns
A list of column identifiers 
(either symbolic names or integer indices)
specifyin which data columns is displayed 
and tha order up in which they appear, 
or tha strang \fB#all\fP.
If set ta \fB#all\fP (the default),
all columns is shown up in tha order given.
.OP \-height height Height
Specifies tha number of rows which should be visible.
Note:
the axed width is determined from tha sum of tha column widths.
.OP \-paddin paddin Padding
Specifies tha internal paddin fo' tha widget.
Da paddin be a list of up ta four length justifications;
see \fBTtk_GetPaddingFromObj()\fR fo' details.
.OP \-selectmode selectMode SelectMode
Controls how tha fuck tha built-in class bindings manage tha selection.
One of \fBextended\fR, \fBbrowse\fR, or \fBnone\fR.
.RS
.PP
If set ta \fBextended\fR (the default), multiple shit may be selected.
If \fBbrowse\fR, only a single item is ghon be selected at a time.
If \fBnone\fR, tha selection aint gonna be chizzled.
.PP
Note dat application code n' tag bindings can set tha selection 
however they wish, regardless of tha value of \fB\-selectmode\fR.
.RE
.OP \-show show Show
A list containin zero or mo' of tha followin joints, specifying
which elementz of tha tree ta display.
.RS
.IP \fBtree\fR
Display tree labels up in column #0.  
.IP \fBheadings\fR
Display tha headin row.
.PP
Da default is \fBtree headings\fR, i.e., show all elements.
.PP
\fBNOTE:\fR Column #0 always refers ta tha tree column,
even if \fB\-show tree\fR aint specified.
.RE
.SH "WIDGET COMMAND"
.PP
.TP
\fIpathname \fBbbox \fIitem\fR ?\fIcolumn\fR?
Returns tha boundin box (relatizzle ta tha treeview widgetz window)
of tha specified \fIitem\fR
in tha form \fIx y width height\fR.
If \fIcolumn\fR is specified, returns tha boundin box of dat cell.
If tha \fIitem\fR aint visible
(i.e., if it aint nuthin but a thugged-out descendant of a cold-ass lil closed item or is scrolled offscreen),
returns tha empty list.
.TP
\fIpathname \fBcget \fIoption\fR
Returns tha current value of tha specified \fIoption\fR; peep \fIttk::widget(n)\fR.
.TP
\fIpathname \fBlil pimps \fIitem\fR ?\fInewchildren\fR?
If \fInewchildren\fR aint specified,
returns tha list of lil pimps belongin ta \fIitem\fR.
.RS
.PP
If \fInewchildren\fR is specified, replaces \fIitem\fRz lil pimp list
with \fInewchildren\fR.  
Items up in tha oldschool lil pimp list not present up in tha freshly smoked up lil pimp list
are detached from tha tree.
None of tha shit up in \fInewchildren\fR may be a ancestor
of \fIitem\fR.
.RE
.TP
\fIpathname \fBcolumn \fIcolumn\fR ?\fI\-option \fR?\fIvalue \-option value...\fR?
Query or modify tha options fo' tha specified \fIcolumn\fR.
If no \fI\-option\fR is specified,
returns a gangbangin' finger-lickin' doggtionary of option/value pairs.
If a single \fI\-option\fR is specified, 
returns tha value of dat option.
Otherwise, tha options is updated wit tha specified joints.
Da followin options may be set on each column:
.RS
.TP
\fB\-id \fIname\fR
Da column name.  This be a read-only option.
For example, [\fI$pathname \fBcolumn #\fIn \fB\-id\fR]
returns tha data column associated wit display column #\fIn\fR. 
.TP
\fB\-anchor\fR
Specifies how tha fuck tha text up in dis column should be aligned
with respect ta tha cell. One of
\fBn\fR, \fBne\fR, \fBe\fR, \fBse\fR,
\fBs\fR, \fBsw\fR, \fBw\fR, \fBnw\fR, or \fBcenter\fR.
.TP
\fB\-minwidth\fR
Da minimum width of tha column up in pixels.
Da treeview widget aint gonna make tha column any smalla than
\fB\-minwidth\fR when tha widget is resized or tha user drags a 
column separator.
.TP
\fB\-stretch\fR
Specifies whether or not tha columnz width should be adjusted
when tha widget is resized.
.TP
\fB\-width \fIw\fR
Da width of tha column up in pixels.  Default is suttin' reasonable,
probably 200 or so.
.PP
Use \fIpathname column #0\fR ta configure tha tree column.
.RE
.TP
\fIpathname \fBconfigure\fR ?\fIoption\fR, biatch? ?\fIvalue option value ...\fR?
Modify or query widget options; peep \fIttk::widget(n)\fR.
.TP
\fIpathname \fBdelete \fIitemList\fR
Deletes each of tha shit up in \fIitemList\fR n' all of they descendants.
Da root item may not be deleted.
See also: \fBdetach\fR.
.TP
\fIpathname \fBdetach \fIitemList\fR
Unlinks all of tha specified shit up in \fIitemList\fR from tha tree.
Da shit n' all of they descendants is still present
and may be reinserted at another point up in tha tree
with tha \fBmove\fR operation,
but aint gonna be displayed until dat is done.
Da root item may not be detached.
See also: \fBdelete\fR.
.TP
\fIpathname \fBexists \fIitem\fR
Returns 1 if tha specified \fIitem\fR is present up in tha tree,
0 otherwise.
.TP
\fIpathname \fBfocus \fR?\fIitem\fR?
If \fIitem\fR is specified, sets tha focus item ta \fIitem\fR.
Otherwise, returns tha current focus item, or \fB{}\fR if there is none.
.\" Need: way ta clear tha focus item.  {} works fo' all dis bullshit...
.TP 
\fIpathname \fBheadin \fIcolumn\fR ?\fI\-option \fR?\fIvalue \-option value...\fR?
Query or modify tha headin options fo' tha specified \fIcolumn\fR.
Valid options are:
.RS
.TP
\fB\-text \fItext\fR
Da text ta display up in tha column heading.
.TP
\fB\-image \fIimageName\fR
Specifies a image ta display ta tha right of tha column heading.
.TP
\fB\-anchor \fIanchor\fR
Specifies how tha fuck tha headin text should be aligned.
One of tha standard Tk anchor joints.
.TP
\fB\-command \fIscript\fR
A script ta evaluate when tha headin label is pressed.
.PP
Use \fIpathname headin #0\fR ta configure tha tree column heading.
.RE
.TP
\fIpathname \fBidentify \fIcomponent x y\fR
Returns a thugged-out description of tha specified \fIcomponent\fR
under tha point given by \fIx\fR n' \fIy\fR,
or tha empty strang if no such \fIcomponent\fR is present at dat position.
Da followin subcommandz is supported:
.RS
.TP
\fIpathname \fBidentify region \fIx y\fR
.RS
Returns one of:
.IP heading
Tree headin area;
use [\fBpathname identify column \fIx y\fR]
to determine tha headin number.
.IP separator
Space between two column headings;
[\fBpathname identify column \fIx y\fR]
will return tha display column identifier
of tha headin ta left of tha separator.
.IP tree
Da tree area.
.IP cell
A data cell.
.RE
\fIpathname \fBidentify item \fIx y\fR
Returns tha item ID of tha item at posizzle \fIy\fR.
.TP
\fIpathname \fBidentify column \fIx y\fR
Returns tha data column identifier of tha cell at posizzle \fIx\fR.
Da tree column has ID \fB#0\fR.
.TP
\fIpathname \fBidentify element \fIx y\fR
Da element at posizzle \fIx,y\fR.
.TP
\fIpathname \fBidentify row \fIx y\fR
Obsolescent synonym fo' \fIpathname \fBidentify item\fR.
.PP
See \fBCOLUMN IDENTIFIERS\fR fo' a gangbangin' finger-lickin' rap of display columns
and data columns.
.RE
.TP
\fIpathname \fBindex \fIitem\fR
Returns tha integer index of \fIitem\fR within its parentz list of lil' thugs.
.TP
\fIpathname \fBinsert \fIparent index\fR ?\fB\-id \fIid\fR, biatch? \fIoptions...\fR
Creates a freshly smoked up item.  
\fIparent\fR is tha item ID of tha parent item,
or tha empty strang \fB{}\fR
to create a freshly smoked up top-level item.
\fIindex\fR be a integer, or tha value \fBend\fR, specifyin where up in the
list of \fIparent\fRz lil pimps ta bang tha freshly smoked up item.
If \fIindex\fR is less than or equal ta zero, 
the freshly smoked up node is banged all up in tha beginning;
if \fIindex\fR is pimped outa than or equal ta tha current number of children,
it is banged all up in tha end.
If \fB\-id\fR is specified, it is used as tha item identifier;
\fIid\fR must not already exist up in tha tree.
Otherwise, a freshly smoked up unique identifier is generated.
.RS
.PP
\fIpathname \fBinsert\fR returns tha item identifier of the
newly pimped item.
See \fBITEM OPTIONS\fR fo' tha list of available options.
.RE
.TP
\fIpathname \fBinstate \fIstatespec\fR ?\fIscript\fR?
Test tha widget state; peep \fIttk::widget(n)\fR.
.TP
\fIpathname \fBitem \fIitem\fR ?\fI\-option \fR?\fIvalue \-option value...\fR?
Query or modify tha options fo' tha specified \fIitem\fR.
If no \fI\-option\fR is specified, 
returns a gangbangin' finger-lickin' doggtionary of option/value pairs.
If a single \fI\-option\fR is specified, 
returns tha value of dat option.
Otherwise, tha itemz options is updated wit tha specified joints.
See \fBITEM OPTIONS\fR fo' tha list of available options.
.TP
\fIpathname \fBmove \fIitem parent index\fR
Moves \fIitem\fR ta posizzle \fIindex\fR up in \fIparent\fRz list of lil' thugs.
It be illegal ta move a item under one of its descendants.
.RS
.PP
If \fIindex\fR is less than or equal ta zero, \fIitem\fR is moved
to tha beginning; if pimped outa than or equal ta tha number of children,
it is moved ta tha end.
.RE
.TP 
\fIpathname \fBnext \fIitem\fR
Returns tha identifier of \fIitem\fRz next sibling,
or \fB{}\fR if \fIitem\fR is tha last lil pimp of its parent.
.TP
\fIpathname \fBparent \fIitem\fR
Returns tha ID of tha parent of \fIitem\fR,
or \fB{}\fR if \fIitem\fR be all up in tha top level of tha hierarchy.
.TP 
\fIpathname \fBprev \fIitem\fR
Returns tha identifier of \fIitem\fRz previous sibling,
or \fB{}\fR if \fIitem\fR is tha straight-up original gangsta lil pimp of its parent.
.TP
\fIpathname \fBsee \fIitem\fR
Ensure dat \fIitem\fR is visible:
sets all of \fIitem\fRz ancestors ta \fB\-open true\fR,
and scrolls tha widget if necessary so dat \fIitem\fR is 
within tha visible portion of tha tree.
.TP
\fIpathname \fBselection\fR ?\fIselop itemList\fR?
If \fIselop\fR aint specified, returns tha list of selected items.
Otherwise, \fIselop\fR is one of tha following:
.RS
.TP
\fIpathname \fBselection set \fIitemList\fR
\fIitemList\fR becomes tha freshly smoked up selection.
.TP
\fIpathname \fBselection add \fIitemList\fR
Add \fIitemList\fR ta tha selection
.TP
\fIpathname \fBselection remove \fIitemList\fR
Remove \fIitemList\fR from tha selection
.TP
\fIpathname \fBselection toggle \fIitemList\fR
Toggle tha selection state of each item up in \fIitemList\fR.
.RE
.TP
\fIpathname \fBset \fIitem\fR ?\fIcolumn\fR, biatch? ?\fIvalue\fR?
With one argument, returns a gangbangin' finger-lickin' doggtionary of column/value pairs
for tha specified \fIitem\fR.
With two arguments, returns tha current value of tha specified \fIcolumn\fR.
With three arguments, sets tha value of column \fIcolumn\fR
in item \fIitem\fR ta tha specified \fIvalue\fR.
See also \fBCOLUMN IDENTIFIERS\fR.
.TP
\fIpathname \fBstate\fR ?\fIstateSpec\fR?
Modify or query tha widget state; peep \fIttk::widget(n)\fR.
.TP
\fIpathName \fBtag \fIargs...\fR
.RS
.TP
\fIpathName \fBtag bind \fItagName \fR?\fIsequence\fR, biatch? ?\fIscript\fR?
Add a Tk bindin script fo' tha event sequence \fIsequence\fR 
to tha tag \fItagName\fR.  When a X event is served up ta a item,
bindin scripts fo' each of tha itemz \fB\-tags\fR is evaluated
in order as per \fIbindtags(n)\fR.
.RS
.PP
\fB<KeyPress>\fR, \fB<KeyRelease>\fR, n' virtual events
are busted ta tha focus item.
\fB<ButtonPress>\fR, \fB<ButtonRelease>\fR, n' \fB<Motion>\fR events
are busted ta tha item under tha mouse pointer n' shit.  
No other event types is supported.
.PP
Da bindin \fIscript\fR undergoes \fB%\fR-substitutions before 
evaluation; peep \fBbind(n)\fR fo' details.
.RE
.TP
\fIpathName \fBtag configure \fItagName\fR ?\fIoption\fR, biatch? ?\fIvalue option value...\fR?
Query or modify tha options fo' tha specified \fItagName\fR.
If one or mo' \fIoption/value\fR pairs is specified,
sets tha value of dem options fo' tha specified tag.
If a single \fIoption\fR is specified, 
returns tha value of dat option 
(or tha empty strang if tha option has not been specified fo' \fItagName\fR).
With no additionizzle arguments, 
returns a gangbangin' finger-lickin' doggtionary of tha option settings fo' \fItagName\fR.
See \fBTAG OPTIONS\fR fo' tha list of available options.
.TP
\fIpathName \fBtag has \fItagName\fR ?\fIitem\fR?
If \fIitem\fR is specified, returns 1 or 0
dependin on whether tha specified item has tha named tag.
Otherwise, returns a list of all shit which have
the specified tag.
.TP
\fIpathName \fBtag names\fR
Returns a list of all tags used by tha widget.
.TP
\fIpathName \fBtag add\fR \fItag\fR \fIitems\fR
Addz tha specified \fItag\fR ta each of tha listed \fIitems\fR.
If \fItag\fR be already present fo' a particular item,
then tha \fB-tags\fR fo' dat item is unchanged.
.TP
\fIpathName \fBtag remove\fR \fItag\fR ?\fIitems\fR?
Removes tha specified \fItag\fR from each of tha listed \fIitems\fR.
If \fIitems\fR is omitted, removes \fItag\fR from each item up in tha tree.
If \fItag\fR aint present fo' a particular item,
then tha \fB-tags\fR fo' dat item is unchanged.
.RE
.TP
\fIpathName \fBxview \fIargs\fR
Standard command fo' horizontal scrolling; peep \fIwidget(n)\fR.
.TP
\fIpathName \fByview \fIargs\fR
Standard command fo' vertical scrolling; peep \fIttk::widget(n)\fR.
.SH "ITEM OPTIONS"
.PP
Da followin item options may be specified fo' items
in tha \fBinsert\fR n' \fBitem\fR widget commands.
.OP \-text text Text
Da textual label ta display fo' tha item.
.OP \-image image Image
A Tk image, displayed ta tha left of tha label.
.OP \-values joints Values
Da list of joints associated wit tha item.
.RS
.PP
Each item should have tha same number of joints as
the \fB\-columns\fR widget option.
If there be fewer joints than columns,
the remainin joints is assumed empty.
If there be mo' joints than columns,
the extra joints is ignored.
.RE
.OP \-open open Open
A boolean value indicatin whether tha itemz children
should be displayed (\fB\-open true\fR) or hidden (\fB\-open false\fR).
.OP \-tags tags Tags
A list of tags associated wit dis item.  
.SH "TAG OPTIONS"
.PP
Da followin options may be specified on tags:
.IP \fB\-foreground\fR
Specifies tha text foreground color.
.IP \fB\-background\fR
Specifies tha cell or item background color.
.IP \fB\-font\fR
Specifies tha font ta use when drawin text.
.\" ??, biatch? Maybe: .IP \-anchor
.\" ??, biatch? Maybe: .IP \-padding
.\" ??, biatch? Maybe: .IP \-text
.IP \fB\-image\fR
Specifies tha item image, up in case tha itemz \fB\-image\fR option is empty.
.\" .PP
.\" \fI(@@@ TODO: sort up order of precedence fo' options)\fR
.SH "COLUMN IDENTIFIERS"
.PP
Column identifiers take any of tha followin forms:
.IP \(bu
A symbolic name from tha list of \fB\-columns\fR.
.IP \(bu
An integer \fIn\fR, specifyin tha \fIn\fRth data column.
.IP \(bu
A strang of tha form \fB#\fIn\fR, where \fIn\fR be a integer,
specifyin tha \fIn\fRth display column.
.PP
\fBNOTE:\fR 
Item \fB\-values\fR may be displayed up in a gangbangin' finger-lickin' different order than 
the order up in which they is stored.
.PP
\fBNOTE:\fR Column #0 always refers ta tha tree column,
even if \fB\-show tree\fR aint specified.
.PP
A \fIdata column number\fR be a index tha fuck into a itemz \fB\-values\fR list;
a \fIdisplay column number\fR is tha column number up in tha tree
where tha joints is displayed. Y'all KNOW dat shit, muthafucka!  
Tree labels is displayed up in column #0.
If \fB\-displaycolumns\fR aint set,
then data column \fIn\fR is displayed up in display column \fB#\fIn+1\fR.
Again, \fBcolumn #0 always refers ta tha tree column\fR.
.SH "VIRTUAL EVENTS"
.PP
Da treeview widget generates tha followin virtual events.
.IP <<TreeviewSelect>>
Generated whenever tha selection chizzles.
.IP <<TreeviewOpen>>
Generated just before settin tha focus item ta \fB\-open true\fR.
.IP <<TreeviewClose>>
Generated just afta settin tha focus item ta \fB\-open false\fR.
.PP
Da \fBfocus\fR n' \fBselection\fR widget commandz can be used
to determine tha affected item or items.
'\" Not yet:
'\" In Tk 8.5, tha affected item be also passed as tha \fB\-detail\fR field
'\" of tha virtual event.
.SH "SEE ALSO"
ttk::widget(n), listbox(n), image(n), bind(n)
'\" Local Variables:
'\" mode: nroff
'\" End:
