'\"
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH file n 8.3 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
file \- Manipulate file names n' attributes
.SH SYNOPSIS
\fBfile \fIoption\fR \fIname\fR ?\fIarg arg ...\fR?
.BE
.SH DESCRIPTION
.PP
This command serves up nuff muthafuckin operations on a gangbangin' filez name or attributes.
\fIName\fR is tha name of a gangbangin' file; if it starts wit a tilde, then tilde
substitution is done before executin tha command (see tha manual entry for
\fBfilename\fR fo' details).  \fIOption\fR indicates what tha fuck ta do wit the
file name.  Any unique abbreviation fo' \fIoption\fR be acceptable.  The
valid options are:
.TP
\fBfile atime \fIname\fR ?\fBtime\fR?
.
Returns a thugged-out decimal strang givin tha time at which file \fIname\fR was last
accessed. Y'all KNOW dat shit, muthafucka!  If \fItime\fR is specified, it be a access time ta set
for tha file.  Da time is measured up in tha standard POSIX fashizzle as
secondz from a gangbangin' fixed startin time (often January 1, 1970).  If tha file
does not exist or its access time cannot be queried or set then a error is
generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  On Windows, FAT file systems do not support access time.
.TP
\fBfile attributes \fIname\fR
.TP
\fBfile attributes \fIname\fR ?\fBoption\fR?
.TP
\fBfile attributes \fIname\fR ?\fBoption value option value...\fR?
.
This subcommand returns or sets platform specific joints associated
with a gangbangin' file. Da first form returns a list of tha platform specific
flags n' they joints, n' you can put dat on yo' toast. Da second form returns tha value fo' the
specific option. I aint talkin' bout chicken n' gravy biatch. Da third form sets one or mo' of tha joints, n' you can put dat on yo' toast. The
values is as bigs up:
.RS
.PP
On Unix, \fB\-group\fR gets or sets tha crew name fo' tha file fo' realz. A crew id
can be given ta tha command yo, but it returns a crew name. \fB\-baller\fR gets
or sets tha user name of tha balla of tha file. Da command returns the
balla name yo, but tha numerical id can be passed when settin the
balla n' shit. \fB\-permissions\fR sets or retrieves tha octal code dat chmod(1)
uses.  This command do also has limited support fo' settin rockin the
symbolic attributes fo' chmod(1), of tha form [ugo]?[[+\-=][rwxst],[...]],
where multiple symbolic attributes can be separated by commas (example:
\fBu+s,go\-rw\fR add sticky bit fo' user, remove read n' write
permissions fo' crew n' other).  A simplified \fBls\fR steez string,
of tha form rwxrwxrwx (must be 9 characters), be also supported
(example: \fBrwxr\-xr\-t\fR is equivalent ta 01755).
On versionz of Unix supportin file flags, \fB\-readonly\fR gives the
value or sets or clears tha readonly attribute of tha file,
i.e. tha user immutable flag \fBuchg\fR ta chflags(1).
.PP
On Windows, \fB\-archive\fR gives tha value or sets or clears the
archive attribute of tha file. \fB\-hidden\fR gives tha value or sets
or clears tha hidden attribute of tha file. \fB\-longname\fR will
expand each path element ta its long version. I aint talkin' bout chicken n' gravy biatch. This attribute cannot be
set. \fB\-readonly\fR gives tha value or sets or clears tha readonly
attribute of tha file. \fB\-shortname\fR gives a strang where every
path element is replaced wit its short (8.3) version of the
name. This attribute cannot be set. \fB\-system\fR gives or sets or
clears tha value of tha system attribute of tha file.
.PP
On Mac OS X n' Darwin, \fB\-creator\fR gives or sets the
Finder creator type of tha file. \fB\-hidden\fR gives or sets or clears
the hidden attribute of tha file. \fB\-readonly\fR gives or sets or
clears tha readonly attribute of tha file. \fB\-rsrclength\fR gives
the length of tha resource fork of tha file, dis attribute can only be
set ta tha value 0, which thangs up in dis biatch up in tha resource fork bein stripped
off tha file.
.RE
.TP
\fBfile channels ?\fIpattern\fR?
.
If \fIpattern\fR aint specified, returns a list of namez of all
registered open channels up in dis interpreter n' shit.  If \fIpattern\fR is
specified, only dem names matchin \fIpattern\fR is returned. Y'all KNOW dat shit, muthafucka!  Matching
is determined rockin tha same rulez as fo' \fBstrin match\fR.
.TP
\fBfile copy \fR?\fB\-force\fR? ?\fB\-\|\-\fR? \fIsource\fR \fItarget\fR
.TP
\fBfile copy \fR?\fB\-force\fR? ?\fB\-\|\-\fR? \fIsource\fR ?\fIsource\fR ...? \fItargetDir\fR
.
Da first form cook up a cold-ass lil copy of tha file or directory \fIsource\fR under
the pathname \fItarget\fR. If \fItarget\fR be a existin directory,
then tha second form is used. Y'all KNOW dat shit, muthafucka!  Da second form cook up a cold-ass lil copy inside
\fItargetDir\fR of each \fIsource\fR file listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If a gangbangin' finger-lickin' directory is
specified as a \fIsource\fR, then tha contentz of tha directory will be
recursively copied tha fuck into \fItargetDir\fR. Existin filez aint gonna be
overwritten unless tha \fB\-force\fR option is specified (when Tcl will
also attempt ta adjust permissions on tha destination file or directory
if dat is necessary ta allow tha copy ta proceed).  When copying
within a single filesystem, \fIfile copy\fR will copy soft links (i.e.
the links theyselves is copied, not tha thangs they point to).  Trying
to overwrite a non-empty directory, overwrite a gangbangin' finger-lickin' directory wit a gangbangin' file,
or overwrite a gangbangin' file wit a gangbangin' finger-lickin' directory will all result up in errors even if
\fI\-force\fR was specified. Y'all KNOW dat shit, muthafucka!  Arguments is processed up in tha order
specified, haltin all up in tha straight-up original gangsta error, if any.  A \fB\-\|\-\fR marks
the end of switches; tha argument followin tha \fB\-\|\-\fR will be
treated as a \fIsource\fR even if it starts wit a \fB\-\fR.
.TP
\fBfile delete \fR?\fB\-force\fR? ?\fB\-\|\-\fR? \fIpathname\fR ?\fIpathname\fR ... ?
.
Removes tha file or directory specified by each \fIpathname\fR
argument.  Non-empty directories is ghon be removed only if the
\fB\-force\fR option is specified. Y'all KNOW dat shit, muthafucka!  When operatin on symbolic links,
the links theyselves is ghon be deleted, not tha objects they point to.
Tryin ta delete a non-existent file aint considered a error.
Tryin ta delete a read-only file will cause tha file ta be deleted,
even if tha \fB\-force\fR flags aint specified. Y'all KNOW dat shit, muthafucka!  If tha \fB\-force\fR
option is specified on a gangbangin' finger-lickin' directory, Tcl will attempt both ta chizzle
permissions n' move tha current directory
.QW pwd
out of tha given path if dat is necessary ta allow tha deletion to
proceed. Y'all KNOW dat shit, muthafucka!  Arguments is processed up in tha order specified, haltin at
the first error, if any.
A \fB\-\|\-\fR marks tha end of switches; tha argument followin the
\fB\-\|\-\fR is ghon be treated as a \fIpathname\fR even if it starts with
a \fB\-\fR.
.TP
\fBfile dirname \fIname\fR
Returns a name comprised of all of tha path components up in \fIname\fR
excludin tha last element.  If \fIname\fR be a relatizzle file name and
only gotz nuff one path element, then returns
.QW \fB.\fR .
If \fIname\fR refers ta a root directory, then tha root directory is
returned. Y'all KNOW dat shit, muthafucka!  For example,
.RS
.CS
\fBfile dirname c:/\fR
.CE
returns \fBc:/\fR. 
.PP
Note dat tilde substitution will only be
performed if it is necessary ta complete tha command. Y'all KNOW dat shit, muthafucka! For example,
.CS
\fBfile dirname ~/src/foo.c\fR
.CE
returns \fB~/src\fR, whereas
.CS
\fBfile dirname ~\fR
.CE
returns \fB/home\fR (or suttin' similar).
.RE
.TP
\fBfile executable \fIname\fR
.
Returns \fB1\fR if file \fIname\fR is executable by tha current user,
\fB0\fR otherwise.  
.TP
\fBfile exists \fIname\fR
.
Returns \fB1\fR if file \fIname\fR exists n' tha current user has
search privileges fo' tha directories leadin ta it, \fB0\fR otherwise.
.TP
\fBfile extension \fIname\fR
.
Returns all of tha charactas up in \fIname\fR afta n' includin tha last
dot up in tha last element of \fIname\fR.  If there is no dot up in tha last
element of \fIname\fR then returns tha empty string.
.TP
\fBfile isdirectory \fIname\fR
.
Returns \fB1\fR if file \fIname\fR be a gangbangin' finger-lickin' directory, \fB0\fR otherwise.
.TP
\fBfile isfile \fIname\fR
.
Returns \fB1\fR if file \fIname\fR be a regular file, \fB0\fR otherwise.
.TP
\fBfile join \fIname\fR ?\fIname ...\fR?
.
Takes one or mo' file names n' combines them, rockin tha erect path
separator fo' tha current platform.  If a particular \fIname\fR is
relative, then it is ghon be joined ta tha previous file name argument.
Otherwise, any earlier arguments is ghon be discarded, n' joinin will
proceed from tha current argument.  For example,
.RS
.CS
\fBfile join a funky-ass b /foo bar\fR
.CE
returns \fB/foo/bar\fR.
.PP
Note dat any of tha names can contain separators, n' dat tha result
is always canonical fo' tha current platform: \fB/\fR fo' Unix and
Windows.
.RE
.TP
\fBfile link ?\fI\-linktype\fR? \fIlinkName\fR ?\fItarget\fR?
.
If only one argument is given, dat argument be assumed ta be
\fIlinkName\fR, n' dis command returns tha value of tha link given by
\fIlinkName\fR (i.e. tha name of tha file it points to).  If
\fIlinkName\fR aint a link or its value cannot be read (as, fo' example,
seems ta be tha case wit hard links, which look just like ordinary
files), then a error is returned.
.RS
.PP
If 2 arguments is given, then these is assumed ta be \fIlinkName\fR
and \fItarget\fR. If \fIlinkName\fR already exists, or if \fItarget\fR
does not exist, a error is ghon be returned. Y'all KNOW dat shit, muthafucka!  Otherwise, Tcl creates a new
link called \fIlinkName\fR which points ta tha existin filesystem
object at \fItarget\fR (which be also tha returned value), where the
type of tha link is platform-specific (on Unix a symbolic link will be
the default).  This is useful fo' tha case where tha user wishes to
create a link up in a cold-ass lil cross-platform way, n' do not care what tha fuck type of
link is pimped.
.PP
If tha user wishes ta cook up a link of a specific type only, (and signal an
error if fo' some reason dat aint possible), then tha optional
\fI\-linktype\fR argument should be given. I aint talkin' bout chicken n' gravy biatch.  Accepted joints for
\fI\-linktype\fR are
.QW \-symbolic
and
.QW \-hard .
.PP
On Unix, symbolic links can be made ta relatizzle paths, n' dem paths
must be relatizzle ta tha actual \fIlinkName\fRz location (not ta the
cwd) yo, but on all other platforms where relatizzle links is not supported,
target paths will always be converted ta absolute, normalized form
before tha link is pimped (and therefore relatizzle paths is interpreted
as relatizzle ta tha cwd).  Furthermore,
.QW ~user
paths is always expanded
to absolute form.  When bustin links on filesystems dat either do not
support any links, or do not support tha specific type requested, an
error message is ghon be returned. Y'all KNOW dat shit, muthafucka!  In particular Windows 95, 98 n' ME do
not support any links at present yo, but most Unix platforms support both
symbolic n' hard links (the latta fo' filez only) n' Windows
NT/2000/XP (on NTFS drives) support symbolic
directory links n' hard file links.
.RE
.TP
\fBfile lstat \fIname varName\fR
.
Same as \fBstat\fR option (see below) except uses tha \fIlstat\fR
kernel call instead of \fIstat\fR.  This means dat if \fIname\fR
refers ta a symbolic link tha shiznit returned up in \fIvarName\fR
is fo' tha link rather than tha file it refers to.  On systems that
do not support symbolic links dis option behaves exactly tha same
as tha \fBstat\fR option.
.TP
\fBfile mkdir \fIdir\fR ?\fIdir\fR ...?
.
Creates each directory specified. Y'all KNOW dat shit, muthafucka!  For each pathname \fIdir\fR specified,
this command will create all non-existin parent directories as
well as \fIdir\fR itself.  If a existin directory is specified, then
no action is taken n' no error is returned. Y'all KNOW dat shit, muthafucka!  Tryin ta overwrite a existing
file wit a gangbangin' finger-lickin' directory will result up in a error. Shiiit, dis aint no joke.  Arguments is processed in
the order specified, haltin all up in tha straight-up original gangsta error, if any.
.TP
\fBfile mtime \fIname\fR ?\fItime\fR?
.
Returns a thugged-out decimal strang givin tha time at which file \fIname\fR was last
modified. Y'all KNOW dat shit, muthafucka!  If \fItime\fR is specified, it aint nuthin but a modification time ta set for
the file (equivalent ta Unix \fBtouch\fR).  Da time is measured up in the
standard POSIX fashizzle as secondz from a gangbangin' fixed startin time (often January
1, 1970).  If tha file do not exist or its modified time cannot be queried
or set then a error is generated.
.TP
\fBfile nativename \fIname\fR
.
Returns tha platform-specific name of tha file. This is useful if the
filename is needed ta pass ta a platform-specific call, like fuckin ta a
subprocess via \fBexec\fR under Windows (see \fBEXAMPLES\fR below).
.TP
\fBfile normalize \fIname\fR
.
Returns a unique normalized path representation fo' tha file-system
object (file, directory, link, etc), whose strang value can be used as a
unique identifier fo' dat shit.  A normalized path be a absolute path which has
all
.QW ../
and
.QW ./
removed. Y'all KNOW dat shit, muthafucka!  Also it is one which is up in the
.QW standard
format fo' tha natizzle platform.  On Unix, dis means tha segments
leadin up ta tha path must be free of symbolic links/aliases (but the
very last path component may be a symbolic link), n' on Windows it also
means we want tha long form wit dat formz case-dependence (which
gives our asses a unique, case-dependent path).  Da one exception concernin the
last link up in tha path is necessary, cuz Tcl or tha user may wish to
operate on tha actual symbolic link itself (for example \fBfile delete\fR,
\fBfile rename\fR, \fBfile copy\fR is defined ta operate on symbolic
links, not on tha thangs dat they point to).
.TP
\fBfile owned \fIname\fR 
.
Returns \fB1\fR if file \fIname\fR is owned by tha current user, \fB0\fR
otherwise.
.TP
\fBfile pathtype \fIname\fR
.
Returns one of \fBabsolute\fR, \fBrelative\fR, \fBvolumerelative\fR. If
\fIname\fR refers ta a specific file on a specific volume, tha path type will
be \fBabsolute\fR. If \fIname\fR refers ta a gangbangin' file relatizzle ta tha current
workin directory, then tha path type is ghon be \fBrelative\fR. If \fIname\fR
refers ta a gangbangin' file relatizzle ta tha current hustlin directory on a specified
volume, or ta a specific file on tha current hustlin volume, then tha path
type is \fBvolumerelative\fR.
.TP
\fBfile readable \fIname\fR
.
Returns \fB1\fR if file \fIname\fR is readable by tha current user,
\fB0\fR otherwise. 
.TP
\fBfile readlink \fIname\fR
.
Returns tha value of tha symbolic link given by \fIname\fR (i.e. tha name
of tha file it points to).  If \fIname\fR aint a symbolic link or its
value cannot be read, then a error is returned. Y'all KNOW dat shit, muthafucka!  On systems dat do not
support symbolic links dis option is undefined.
.TP
\fBfile rename \fR?\fB\-force\fR? ?\fB\-\|\-\fR? \fIsource\fR \fItarget\fR
.TP
\fBfile rename \fR?\fB\-force\fR? ?\fB\-\|\-\fR? \fIsource\fR ?\fIsource\fR ...? \fItargetDir\fR
.
Da first form takes tha file or directory specified by pathname
\fIsource\fR n' renames it ta \fItarget\fR, movin tha file if the
pathname \fItarget\fR specifies a name up in a gangbangin' finger-lickin' different directory.  If
\fItarget\fR be a existin directory, then tha second form is used.
Da second form moves each \fIsource\fR file or directory tha fuck into the
directory \fItargetDir\fR. Existin filez aint gonna be overwritten
unless tha \fB\-force\fR option is specified. Y'all KNOW dat shit, muthafucka!  When operatin inside a
single filesystem, Tcl will rename symbolic links rather than the
things dat they point to.  Tryin ta overwrite a non-empty directory,
overwrite a gangbangin' finger-lickin' directory wit a gangbangin' file, or a gangbangin' file wit a gangbangin' finger-lickin' directory will all
result up in errors.  Arguments is processed up in tha order specified,
haltin all up in tha straight-up original gangsta error, if any.  A \fB\-\|\-\fR marks tha end of
switches; tha argument followin tha \fB\-\|\-\fR is ghon be treated as a
\fIsource\fR even if it starts wit a \fB\-\fR.
.TP
\fBfile rootname \fIname\fR
.
Returns all of tha charactas up in \fIname\fR up ta but not includin the
last
.QW .
characta up in tha last component of name.  If tha last
component of \fIname\fR do not contain a thugged-out dot, then returns \fIname\fR.
.TP
\fBfile separator\fR ?\fIname\fR?
.
If no argument is given, returns tha characta which is used ta separate 
path segments fo' natizzle filez on dis platform.  If a path is given,
the filesystem responsible fo' dat path be axed ta return its
separator character n' shit.  If no file system accepts \fIname\fR, a error
is generated.
.TP
\fBfile size \fIname\fR
.
Returns a thugged-out decimal strang givin tha size of file \fIname\fR up in bytes.  If
the file do not exist or its size cannot be queried then a error is
generated.
.TP
\fBfile split \fIname\fR
.
Returns a list whose elements is tha path components up in \fIname\fR.  The
first element of tha list gonna git tha same path type as \fIname\fR.
All other elements is ghon be relative.  Path separators is ghon be discarded
unless they is needed ta ensure dat a element is unambiguously relative.
For example, under Unix
.RS
.CS
file split /foo/~bar/baz
.CE
returns \fB/\0\0foo\0\0./~bar\0\0baz\fR ta ensure dat lata commands
that use tha third component do not attempt ta big-ass up tilde
substitution.
.RE
.TP
\fBfile stat  \fIname varName\fR
.
Invokes tha \fBstat\fR kernel call on \fIname\fR, n' uses tha variable
given by \fIvarName\fR ta hold shiznit returned from tha kernel call.
\fIVarName\fR is treated as a array variable, n' tha followin elements
of dat variable is set: \fBatime\fR, \fBctime\fR, \fBdev\fR, \fBgid\fR,
\fBino\fR, \fBmode\fR, \fBmtime\fR, \fBnlink\fR, \fBsize\fR, \fBtype\fR,
\fBuid\fR.  Each element except \fBtype\fR be a thugged-out decimal strang wit the
value of tha correspondin field from tha \fBstat\fR return structure;
see tha manual entry fo' \fBstat\fR fo' details on tha meaningz of the
values.  Da \fBtype\fR element gives tha type of tha file up in tha same
form returned by tha command \fBfile type\fR.  This command returns an
empty string.
.TP
\fBfile system \fIname\fR
.
Returns a list of one or two elements, tha straight-up original gangsta of which is tha name of
the filesystem ta use fo' tha file, n' tha second, if given, an
arbitrary strang representin tha filesystem-specific nature or type of
the location within dat filesystem.  If a gangbangin' filesystem only supports one
type of file, tha second element may not be supplied. Y'all KNOW dat shit, muthafucka!  For example the
natizzle filez gotz a gangbangin' first element
.QW natizzle ,
and a second element which when given be a platform-specific type name
for tha filez system (e.g.
.QW NTFS ,
.QW FAT ,
on Windows).  A generic virtual file system might return
the list
.QW "vfs ftp"
to represent a gangbangin' file on a remote ftp joint mounted as a
virtual filesystem all up in a extension called
.QW vfs .
If tha file do not belong ta any filesystem, a error is generated.
.TP
\fBfile tail \fIname\fR
.
Returns all of tha charactas up in tha last filesystem component of
\fIname\fR.  Any trailin directory separator up in \fIname\fR is ignored.
If \fIname\fR gotz nuff no separators then returns \fIname\fR.  So, 
\fBfile tail a/b\fR, \fBfile tail a/b/\fR n' \fBfile tail b\fR all
return \fBb\fR.
.TP
\fBfile type \fIname\fR
.
Returns a strang givin tha type of file \fIname\fR, which is ghon be one of
\fBfile\fR, \fBdirectory\fR, \fBcharacterSpecial\fR, \fBblockSpecial\fR,
\fBfifo\fR, \fBlink\fR, or \fBsocket\fR.
.TP
\fBfile volumes\fR
. 
Returns tha absolute paths ta tha volumes mounted on tha system, as a
proper Tcl list.  Without any virtual filesystems mounted as root
volumes, on UNIX, tha command will always return
.QW / ,
since all filesystems is locally mounted.
On Windows, it will return a list of tha available local drives
(e.g.
.QW "a:/ c:/" ).
If any virtual filesystem has mounted additional
volumes, they is ghon be up in tha returned list.
.TP
\fBfile writable \fIname\fR
.
Returns \fB1\fR if file \fIname\fR is writable by tha current user,
\fB0\fR otherwise.
.SH "PORTABILITY ISSUES"
.TP
\fBUnix\fR\0\0\0\0\0\0\0
.
These commandz always operate rockin tha real user n' crew identifiers,
not tha effectizzle ones. 
.SH EXAMPLES
This procedure shows how tha fuck ta search fo' C filez up in a given directory
that gotz a cold-ass lil correspondingly-named object file up in tha current
directory:
.CS
proc findMatchingCFilez {dir} {
   set filez {}
   switch $::tcl_platform(platform) {
      windows {
         set ext .obj
      }
      unix {
         set ext .o
      }
   }
   foreach file [glob \-nodiss \-directory $dir *.c] {
      set objectFile [\fBfile tail\fR [\fBfile rootname\fR $file]]$ext
      if {[\fBfile exists\fR $objectFile]} {
         lappend filez $file
      }
   }
   return $files
}
.CE
.PP
Rename a gangbangin' file n' leave a symbolic link pointin from tha oldschool location
to tha freshly smoked up place:
.CS
set oldName foobar.txt
set newName foo/bar.txt
# Make shizzle dat where we goin ta move ta exists...
if {![\fBfile isdirectory\fR [\fBfile dirname\fR $newName]]} {
   \fBfile mkdir\fR [\fBfile dirname\fR $newName]
}
\fBfile rename\fR $oldName $newName
\fBfile link\fR \-symbolic $oldName $newName
.CE
.PP
On Windows, a gangbangin' file can be
.QW started
easily enough (equivalent ta double-clickin on it up in tha Explorer
interface) but tha name passed ta tha operatin system must be in
natizzle format:
.CS
exec {*}[auto_execok start] {} [\fBfile nativename\fR ~/example.txt]
.CE
.SH "SEE ALSO"
filename(n), open(n), close(n), eof(n), gets(n), tell(n), seek(n),
fblocked(n), flush(n)
.SH KEYWORDS
attributes, copy files, delete files, directory, file, move files, name, rename files, stat
