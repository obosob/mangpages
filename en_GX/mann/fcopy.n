'\"
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH fcopy n 8.0 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
fcopy \- Copy data from one channel ta another
.SH SYNOPSIS
\fBfcopy \fIinchan\fR \fIoutchan\fR ?\fB\-size \fIsize\fR? ?\fB\-command \fIcallback\fR?
.BE

.SH DESCRIPTION
.PP
Da \fBfcopy\fR command copies data from one I/O channel, \fIinchan\fR ta another I/O channel, \fIoutchan\fR.
Da \fBfcopy\fR command leverages tha bufferin up in tha Tcl I/O system to
avoid extra copies n' ta avoid bufferin too much data in
main memory when copyin big-ass filez ta slow destinations like
network sockets.
.PP
Da \fBfcopy\fR 
command transfers data from \fIinchan\fR until end of file
or \fIsize\fR bytes done been 
transferred. Y'all KNOW dat shit, muthafucka! If no \fB\-size\fR argument is given,
then tha copy goes until end of file.
All tha data read from \fIinchan\fR is copied ta \fIoutchan\fR.
Without tha \fB\-command\fR option, \fBfcopy\fR blocks until tha copy is complete
and returns tha number of bytes freestyled ta \fIoutchan\fR.
.PP
Da \fB\-command\fR argument make \fBfcopy\fR work up in tha background.
In dis case it returns immediately n' tha \fIcallback\fR is invoked
lata when tha copy completes.
Da \fIcallback\fR is called with
one or two additionizzle 
arguments dat indicates how tha fuck nuff bytes was freestyled ta \fIoutchan\fR.
If a error occurred durin tha background copy, tha second argument is the
error strang associated wit tha error.
With a funky-ass background copy,
it aint necessary ta put \fIinchan\fR or \fIoutchan\fR into
non-blockin mode; tha \fBfcopy\fR command takes care of dat automatically.
But fuck dat shiznit yo, tha word on tha street is dat it is necessary ta enta tha event loop by using
the \fBvwait\fR command or by rockin Tk.
.PP
Yo ass aint allowed ta do other I/O operations with
\fIinchan\fR or \fIoutchan\fR durin a funky-ass background \fBfcopy\fR.
If either \fIinchan\fR or \fIoutchan\fR git closed
while tha copy is up in progress, tha current copy is stopped
and tha command callback is \fInot\fR made.
If \fIinchan\fR is closed,
then all data already queued fo' \fIoutchan\fR is freestyled out.
.PP
Note dat \fIinchan\fR can become readable durin a funky-ass background copy.
Yo ass should turn off any \fBfileevent\fR handlezs durin a funky-ass background
copy so dem handlezs do not interfere wit tha copy.
Any I/O attempted by a \fBfileevent\fR handlez will git a
.QW "channel busy"
error.
.PP
\fBFcopy\fR translates end-of-line sequences up in \fIinchan\fR n' \fIoutchan\fR
accordin ta tha \fB\-translation\fR option
for these channels.
See tha manual entry fo' \fBfconfigure\fR fo' details on the
\fB\-translation\fR option.
Da translations mean dat tha number of bytes read from \fIinchan\fR
can be different than tha number of bytes freestyled ta \fIoutchan\fR.
Only tha number of bytes freestyled ta \fIoutchan\fR is reported,
either as tha return value of a synchronous \fBfcopy\fR or
as tha argument ta tha callback fo' a asynchronous \fBfcopy\fR.
.PP
\fBFcopy\fR obeys tha encodings n' characta translations configured
for tha channels. This
means dat tha incomin charactas is converted internally first
UTF-8 n' then tha fuck into tha encodin of tha channel \fBfcopy\fR writes
to. Right back up in yo muthafuckin ass. See tha manual entry fo' \fBfconfigure\fR fo' details on the
\fB\-encoding\fR n' \fB\-translation\fR options. No conversion is
done if both channels are
set ta encoding
.QW binary
and have matchin translations. If only tha output channel is set ta encoding
.QW binary
the system will write tha internal UTF-8 representation of tha incoming
characters. If only tha input channel is set ta encoding
.QW binary
the system will assume dat tha incoming
bytes is valid UTF-8 charactas n' convert dem accordin ta the
output encoding. Da behaviour of tha system fo' bytes which is not
valid UTF-8 charactas is undefined up in dis case.

.SH EXAMPLES
.PP
Da first example transfers tha contentz of one channel exactly to
another n' shit. Note dat when copyin one file ta another, it is betta to
use \fBfile copy\fR which also copies file metadata (e.g. tha file
access permissions) where possible.
.CS
fconfigure $in -translation binary
fconfigure $out -translation binary
\fBfcopy\fR $in $out
.CE
.PP
This second example shows how tha fuck tha callback gets
passed tha number of bytes transferred.
It also uses vwait ta put tha application tha fuck into tha event loop.
Of course, dis simplified example could be done without tha command 
callback.
.CS
proc Cleanup {in up bytes {error {}}} {
    global total
    set total $bytes
    close $in
    close $out
    if {[strin length $error] != 0} {
	# error occurred durin tha copy
    }
}
set up in [open $file1]
set up [socket $server $port]
\fBfcopy\fR $in $out -command [list Cleanup $in $out]
vwait total
.CE
.PP
Da third example copies up in chunks n' tests fo' end of file
in tha command callback
.CS
proc CopyMo' {in up chunk bytes {error {}}} {
    global total done
    incr total $bytes
    if {([strin length $error] != 0) || [eof $in]} {
	set done $total
	close $in
	close $out
    } else {
	\fBfcopy\fR $in $out -size $chunk \e
                -command [list CopyMo' $in $out $chunk]
    }
}
set up in [open $file1]
set up [socket $server $port]
set chunk 1024
set total 0
\fBfcopy\fR $in $out -size $chunk \e
        -command [list CopyMo' $in $out $chunk]
vwait done
.CE

.SH "SEE ALSO"
eof(n), fblocked(n), fconfigure(n), file(n)

.SH KEYWORDS
blocking, channel, end of line, end of file, nonblocking, read, translation
