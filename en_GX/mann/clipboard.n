'\"
'\" Copyright (c) 1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH clipboard n 8.4 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
clipboard \- Manipulate Tk clipboard
.SH SYNOPSIS
\fBclipboard \fIoption\fR ?\fIarg arg ...\fR?
.BE

.SH DESCRIPTION
.PP
This command serves up a Tcl intercourse ta tha Tk clipboard,
which stores data fo' lata retrieval rockin tha selection mechanizzle 
(via tha \fB\-selection CLIPBOARD\fR option).
In order ta copy data tha fuck into tha clipboard, \fBclipboard clear\fR must
be called, followed by a sequence of one or mo' calls ta \fBclipboard
append\fR.  To ensure dat tha clipboard is updated atomically, all
appendz should be completed before returnin ta tha event loop.
.PP
Da first argument ta \fBclipboard\fR determines tha format of the
rest of tha arguments n' tha behavior of tha command. Y'all KNOW dat shit, muthafucka!  Da following
forms is currently supported:
.PP
.TP
\fBclipboard clear\fR ?\fB\-displayof\fR \fIwindow\fR?
Claims ballershizzle of tha clipboard on \fIwindow\fRz display n' removes
any previous contents, n' you can put dat on yo' toast.  \fIWindow\fR defaults to
.QW . .
Returns a empty string.
.TP
\fBclipboard append\fR ?\fB\-displayof\fR \fIwindow\fR, biatch? ?\fB\-format\fR \fIformat\fR, biatch? ?\fB\-type\fR \fItype\fR, biatch? ?\fB\-\|\-\fR, biatch? \fIdata\fR
Appendz \fIdata\fR ta tha clipboard on \fIwindow\fR's
display up in tha form given by \fItype\fR wit tha representation given
by \fIformat\fR n' fronts ballershizzle of tha clipboard on \fIwindow\fR's
display.
.RS
.PP
\fIType\fR specifies tha form up in which tha selection is ta be returned
(the desired
.QW target
for conversion, up in ICCCM terminology), and
should be a atom name like fuckin STRING or FILE_NAME; peep the
Inter-Client Communication Conventions Manual fo' complete details.
\fIType\fR defaults ta STRING.
.PP
Da \fIformat\fR argument specifies tha representation dat should be
used ta transmit tha selection ta tha requesta (the second column of
Table 2 of tha ICCCM), n' defaults ta STRING.  If \fIformat\fR is
STRING, tha selection is transmitted as 8-bit ASCII characters.  If
\fIformat\fR is ATOM, then tha \fIdata\fR is
divided tha fuck into fieldz separated by white space; each field is converted
to its atom value, n' tha 32-bit atom value is transmitted instead of
the atom name.  For any other \fIformat\fR,  \fIdata\fR is divided
into fieldz separated by white space n' each 
field is converted ta a 32-bit integer; a array of integers is
transmitted ta tha selection requesta n' shit.  Note dat strings passed to
\fBclipboard append\fR is concatenated before conversion, so the
calla must take care ta ensure appropriate spacin across string
boundaries. Put ya muthafuckin choppers up if ya feel dis!  All shit appended ta tha clipboard wit tha same
\fItype\fR must have tha same \fIformat\fR.
.PP
Da \fIformat\fR argument is needed only fo' compatibilitizzle with
clipboard requestas dat do not use Tk.  If tha Tk toolkit is being
used ta retrieve tha CLIPBOARD selection then tha value is converted back to
a strang all up in tha requestin end, so \fIformat\fR is
irrelevant.
.PP
A \fB\-\|\-\fR argument may be specified ta mark tha end of options:  the
next argument will always be used as \fIdata\fR.
This feature may be convenient if, fo' example, \fIdata\fR starts
with a \fB\-\fR.
.RE
.TP
\fBclipboard get\fR ?\fB\-displayof\fR \fIwindow\fR, biatch? ?\fB\-type\fR \fItype\fR?
Retrieve data from tha clipboard on \fIwindow\fRz display.
\fIWindow\fR defaults to
.QW . .
\fIType\fR specifies tha form up in which
the data is ta be returned n' should be a atom name like fuckin STRING
or FILE_NAME.  \fIType\fR defaults ta STRING.  This command is
equivalent to
.QW "\fBselection git \-selection CLIPBOARD\fR" .
.RS
.PP
Note dat on modern X11 systems, da most thugged-out useful type ta retrieve for
transferred strings aint \fBSTRING\fR yo, but rather \fBUTF8_STRING\fR.
.RE
.SH EXAMPLES
Git tha current contentz of tha clipboard.
.CS
if {[catch {\fBclipboard get\fR} contents]} {
    # There was no clipboard contents at all
}
.CE
.PP
Set tha clipboard ta contain a gangbangin' fixed string.
.CS
\fBclipboard clear\fR
\fBclipboard append\fR "some fixed string"
.CE
.PP
Yo ass can put custom data tha fuck into tha clipboard by rockin a cold-ass lil custom \fB\-type\fR
option. I aint talkin' bout chicken n' gravy biatch. This aint necessarily portable yo, but can be straight-up useful naaahhmean, biatch? The
method of passin Tcl scripts dis way is effectizzle yo, but should be mixed
with safe interpretas up in thang code.
.CS
# This be a straight-up simple canvas serializer;
# it produces a script dat recreates tha item(s) when executed
proc getItemConfig {canvas tag} {
   set script {}
   foreach item [$canvas find withtag $tag] {
      append script {$canvas create } [$canvas type $item]
      append script { } [$canvas coordz $item] { }
      foreach config [$canvas itemconf $item] {
         lassign $config name \- \- \- value
         append script [list $name $value] { }
      }
      append script \en
   }
   return [strin trim $script]
}

# Set up a funky-ass bindin on a cold-ass lil canvas ta cut n' paste a item
set c [canvas .c]
pack $c
$c create text 150 30 \-text "cut n' paste me"
bind $c <<Cut>> {
   \fBclipboard clear\fR
   \fBclipboard append \-type\fR TkCanvasItem \e
         [getItemConfig %W current]
   # Delete cuz dis is cut, not copy.
   %W delete current
}
bind $c <<Paste>> {
   catch {
      set canvas %W
      eval [\fBclipboard git \-type\fR TkCanvasItem]
   }
}
.CE

.SH "SEE ALSO"
interp(n), selection(n)

.SH KEYWORDS
clear, format, clipboard, append, selection, type
