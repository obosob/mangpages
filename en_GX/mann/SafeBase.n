'\"
'\" Copyright (c) 1995-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH "Safe Tcl" n 8.0 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
Safe\ Base \- A mechanizzle fo' bustin n' manipulatin safe interpreters
.SH SYNOPSIS
\fB::safe::interpCreate\fR ?\fIslave\fR, biatch? ?\fIoptions...\fR?
.sp
\fB::safe::interpInit\fR \fIslave\fR ?\fIoptions...\fR?
.sp
\fB::safe::interpConfigure\fR \fIslave\fR ?\fIoptions...\fR?
.sp
\fB::safe::interpDelete\fR \fIslave\fR
.sp
\fB::safe::interpAddToAccessPath\fR \fIslave\fR \fIdirectory\fR
.sp
\fB::safe::interpFindInAccessPath\fR \fIslave\fR \fIdirectory\fR
.sp
\fB::safe::setLogCmd\fR ?\fIcmd arg...\fR?
.SS OPTIONS
.PP
?\fB\-accessPath\fR \fIpathList\fR?
?\fB\-statics\fR \fIboolean\fR, biatch? ?\fB\-noStatics\fR?
?\fB\-nested\fR \fIboolean\fR, biatch? ?\fB\-nestedLoadOk\fR?
?\fB\-deleteHook\fR \fIscript\fR?
.BE
.SH DESCRIPTION
Safe Tcl be a mechanizzle fo' executin untrusted Tcl scripts
safely n' fo' providin mediated access by such scripts to
potentially fucked up functionality.
.PP
Da Safe Base ensures dat untrusted Tcl scripts cannot harm the
hostin application.
Da Safe Base prevents integritizzle n' privacy attacks. Untrusted Tcl
scripts is prevented from corruptin tha state of tha hosting
application or computer n' shit. Untrusted scripts is also prevented from
disclosin shiznit stored on tha hostin computa or up in the
hostin application ta any party.
.PP
Da Safe Base allows a masta interpreta ta create safe, restricted
interpretas dat contain a set of predefined aliases fo' tha \fBsource\fR,
\fBload\fR, \fBfile\fR, \fBencoding\fR, n' \fBexit\fR commandz and
are able ta use tha auto-loadin n' package mechanisms.
.PP
No knowledge of tha file system structure is leaked ta the
safe interpreter, cuz it has access only ta a virtualized path
containin tokens. When tha safe interpreta requests ta source a gangbangin' file, it
uses tha token up in tha virtual path as part of tha file name ta source; the
masta interpreta transparently 
translates tha token tha fuck into a real directory name n' executes tha 
axed operation (see tha section \fBSECURITY\fR below fo' details).
Different levelz of securitizzle can be selected by rockin tha optionizzle flags
of tha commandz busted lyrics bout below.
.PP
All commandz provided up in tha masta interpreta by tha Safe Base reside in
the \fBsafe\fR namespace.
.SH COMMANDS
Da followin commandz is provided up in tha masta interpreter:
.TP
\fB::safe::interpCreate\fR ?\fIslave\fR, biatch? ?\fIoptions...\fR?
Creates a safe interpreter, installs tha aliases busted lyrics bout up in tha section
\fBALIASES\fR n' initializes tha auto-loadin n' package mechanizzle as
specified by tha supplied \fIoptions\fR.
See tha \fBOPTIONS\fR section below fo' a thugged-out description of the
optionizzle arguments.
If tha \fIslave\fR argument is omitted, a name is ghon be generated.
\fB::safe::interpCreate\fR always returns tha interpreta name.
.TP
\fB::safe::interpInit\fR \fIslave\fR ?\fIoptions...\fR?
This command is similar ta \fBinterpCreate\fR except it dat do not
create tha safe interpreter n' shit. \fIslave\fR must done been pimped by some
other means, like \fBinterp create \-safe\fR.
.TP
\fB::safe::interpConfigure\fR \fIslave\fR ?\fIoptions...\fR?
If no \fIoptions\fR is given, returns tha settings fo' all options fo' the
named safe interpreta as a list of options n' they current joints
for dat \fIslave\fR. 
If a single additionizzle argument is provided,
it will return a list of 2 elements \fIname\fR n' \fIvalue\fR where
\fIname\fR is tha full name of dat option n' \fIvalue\fR tha current value
for dat option n' tha \fIslave\fR.
If mo' than two additionizzle arguments is provided, it will reconfigure the
safe interpreta n' chizzle each n' only tha provided options.
See tha section on \fBOPTIONS\fR below fo' options description.
Example of use:
.RS
.PP
.CS
# Smoke freshly smoked up interp wit tha same configuration as "$i0":
set i1 [safe::interpSmoke {*}[safe::interpConfigure $i0]]

# Git tha current deleteHook
set dh [safe::interpConfigure $i0  \-del]

# Chizzle (only) tha statics loadin aiiight attribute of an
# interp n' its deleteHook (leavin tha rest unchanged):
safe::interpConfigure $i0  \-delete {foo bar} \-statics 0
.CE
.RE
.TP
\fB::safe::interpDelete\fR \fIslave\fR
Deletes tha safe interpreta n' cleans up tha correspondin  
masta interpreta data structures.
If a \fIdeleteHook\fR script was specified fo' dis interpreta it is
evaluated before tha interpreta is deleted, wit tha name of the
interpreta as a additionizzle argument.
.TP
\fB::safe::interpFindInAccessPath\fR \fIslave\fR \fIdirectory\fR
This command findz n' returns tha token fo' tha real directory
\fIdirectory\fR up in tha safe interpreterz current virtual access path.
It generates a error if tha directory aint found.
Example of use:
.RS
.PP
.CS
$slave eval [list set tk_library \e
      [::safe::interpFindInAccessPath $name $tk_library]]
.CE
.RE
.TP
\fB::safe::interpAddToAccessPath\fR \fIslave\fR \fIdirectory\fR
This command addz \fIdirectory\fR ta tha virtual path maintained fo' the
safe interpreta up in tha master, n' returns tha token dat can be used in
the safe interpreta ta obtain access ta filez up in dat directory.
If tha directory be already up in tha virtual path, it only returns tha token
without addin tha directory ta tha virtual path again.
Example of use:
.RS
.PP
.CS
$slave eval [list set tk_library \e
      [::safe::interpAddToAccessPath $name $tk_library]]
.CE
.RE
.TP
\fB::safe::setLogCmd\fR ?\fIcmd arg...\fR?
This command installs a script dat is ghon be called when interesting
life cycle events occur fo' a safe interpreter.
When called wit no arguments, it returns tha currently installed script.
When called wit one argument, a empty string, tha currently installed
script is removed n' loggin is turned off.
Da script is ghon be invoked wit one additionizzle argument, a string
describin tha event of interest.
Da main purpose is ta help up in debuggin safe interpreters.
Usin dis facilitizzle you can git complete error lyrics while tha safe
interpreta gets only generic error lyrics.
This prevents a safe interpreta from seein lyrics bout failures
and other events dat might contain sensitizzle shiznit like fuckin real
directory names.
.RS
.PP
Example of use:
.PP
.CS
::safe::setLogCmd puts stderr
.CE
.PP
Below is tha output of a sample session up in which a safe interpreter
attempted ta source a gangbangin' file not found up in its virtual access path.
Note dat tha safe interpreta only received a error message sayin that
the file was not found:
.PP
.CS
NOTICE fo' slave interp10 : Created
NOTICE fo' slave interp10 : Settin accessPath=(/foo/bar) staticsok=1 nestedok=0 deletehook=()
NOTICE fo' slave interp10 : auto_path up in interp10 has been set ta {$p(:0:)}
ERROR fo' slave interp10 : /foo/bar/init.tcl: no such file or directory
.CE
.RE
.SS OPTIONS
Da followin options is common ta 
\fB::safe::interpCreate\fR, \fB::safe::interpInit\fR, 
and \fB::safe::interpConfigure\fR.
Any option name can be abbreviated ta its minimal 
non-ambiguous name.
Option names is not case sensitive.
.TP 
\fB\-accessPath\fR \fIdirectoryList\fR
This option sets tha list of directories from which tha safe interpreter
can \fBsource\fR n' \fBload\fR files.
If dis option aint specified, or if it is given as the
empty list, tha safe interpreta will use tha same directories as its
masta fo' auto-loading.
See tha section \fBSECURITY\fR below fo' mo' detail bout virtual paths, 
tokens n' access control.
.TP
\fB\-statics\fR \fIboolean\fR
This option specifies if tha safe interpreta is ghon be allowed
to load statically linked packages (like \fBload {} Tk\fR).
Da default value is \fBtrue\fR : 
safe interpretas is allowed ta load statically linked packages.
.TP
\fB\-noStatics\fR
This option be a cold-ass lil convenience shortcut fo' \fB\-statics false\fR and
thus specifies dat tha safe interpreta aint gonna be allowed
to load statically linked packages.
.TP
\fB\-nested\fR \fIboolean\fR
This option specifies if tha safe interpreta is ghon be allowed
to load packages tha fuck into its own sub-interpreters.
Da default value is \fBfalse\fR : 
safe interpretas is not allowed ta load packages into
their own sub-interpreters.
.TP
\fB\-nestedLoadOk\fR
This option be a cold-ass lil convenience shortcut fo' \fB\-nested true\fR and
thus specifies tha safe interpreta is ghon be allowed
to load packages tha fuck into its own sub-interpreters.
.TP 
\fB\-deleteHook\fR \fIscript\fR
When dis option is given a non-empty \fIscript\fR, it will be
evaluated up in tha masta wit tha name of
the safe interpreta as a additionizzle argument
just before straight-up deletin tha safe interpreter.
Givin a empty value removes any currently installed deletion hook
script fo' dat safe interpreter.
Da default value (\fB{}\fR) aint ta have any deletion call back.
.SH ALIASES
Da followin aliases is provided up in a safe interpreter:
.TP
\fBsource\fR \fIfileName\fR
Da axed file, a Tcl source file, is sourced tha fuck into tha safe interpreter
if it is found.
Da \fBsource\fR alias can only source filez from directories in
the virtual path fo' tha safe interpreter n' shit. Da \fBsource\fR alias requires
the safe interpreta to
use one of tha token names up in its virtual path ta denote tha directory in
which tha file ta be sourced can be found.
See tha section on \fBSECURITY\fR fo' mo' rap of restrictions on
valid filenames.
.TP
\fBload\fR \fIfileName\fR
Da axed file, a gangbangin' finger-lickin' dirty-ass shared object file, is dynamically loaded tha fuck into the
safe interpreta if it is found.
Da filename must contain a token name mentioned up in tha virtual path for
the safe interpreta fo' it ta be found successfully.
Additionally, tha shared object file must contain a safe entry point; see
the manual page fo' tha \fBload\fR command fo' mo' details.
.TP
\fBfile\fR ?\fIsubCmd args...\fR?
Da \fBfile\fR alias serves up access ta a safe subset of tha subcommandz of
the \fBfile\fR command; it allows only \fBdirname\fR, \fBjoin\fR,
\fBextension\fR, \fBroot\fR, \fBtail\fR, \fBpathname\fR n' \fBsplit\fR
subcommands. For mo' details on what tha fuck these subcommandz do peep tha manual
page fo' tha \fBfile\fR command.
.TP
\fBencoding\fR ?\fIsubCmd args...\fR?
Da \fBencoding\fR alias serves up access ta a safe subset of the
subcommandz of tha \fBencoding\fR command;  it disallows settin of
the system encodin yo, but allows all other subcommandz including
\fBsystem\fR ta check tha current encoding.
.TP
\fBexit\fR
Da callin interpreta is deleted n' its computation is stopped yo, but the
Tcl process up in which dis interpreta exists aint terminated.
.SH SECURITY
Da Safe Base do not attempt ta straight-up prevent annoyizzle and
denial of steez attacks. These formz of battle prevent the
application or user from temporarily rockin tha computa ta perform
useful work, fo' example by consumin all available CPU time or
all available screen real estate.
These attacks, while aggravating, is deemed ta be of lesser importance
in general than integritizzle n' privacy attacks dat tha Safe Base
is ta prevent.
.PP
Da commandz available up in a safe interpreter, up in addizzle to
the safe set as defined up in \fBinterp\fR manual page, is mediated aliases
for \fBsource\fR, \fBload\fR, \fBexit\fR, n' safe subsets of
\fBfile\fR n' \fBencoding\fR. Da safe interpreta can also auto-load
code n' it can request dat packages be loaded.
.PP
Because a shitload of these commandz access tha local file system, there be a
potential fo' shiznit leakage bout its directory structure.
To prevent this, commandz dat take file names as arguments up in a safe
interpreta use tokens instead of tha real directory names.
These tokens is translated ta tha real directory name while a request to,
e.g., source a gangbangin' file is mediated by tha masta interpreter.
This virtual path system is maintained up in tha masta interpreta fo' each safe
interpreta pimped by \fB::safe::interpCreate\fR or initialized by
\fB::safe::interpInit\fR and
the path maps tokens accessible up in tha safe interpreta tha fuck into real path
names on tha local file system thus preventin safe interpretas 
from bustin knowledge bout the
structure of tha file system of tha host on which tha interpreta is
executing.
Da only valid file names arguments
for tha \fBsource\fR n' \fBload\fR aliases provided ta tha slave
are path up in tha form of 
\fB[file join \fR\fItoken filename\fR\fB]\fR (i.e. when rockin the
natizzle file path formats: \fItoken\fR\fB/\fR\fIfilename\fR
on Unix n' \fItoken\fR\fB\e\fIfilename\fR on Windows),
where \fItoken\fR is representin one of tha directories 
of tha \fIaccessPath\fR list n' \fIfilename\fR is
one file up in dat directory (no sub directories access is allowed).
.PP
When a token is used up in a safe interpreta up in a request ta source or
load a gangbangin' file, tha token is checked and
translated ta a real path name n' tha file ta be
sourced or loaded is located on tha file system.
Da safe interpreta never gains knowledge of tha actual path name under
which tha file is stored on tha file system.
.PP
To further prevent potential shiznit leakage from sensitizzle filez that
are accidentally included up in tha set of filez dat can be sourced by a safe
interpreter, tha \fBsource\fR alias restricts access ta files
meetin tha followin constraints: tha file name must
fourteen charactas or shorter, must not contain mo' than one dot
.PQ \fB.\fR "" ,
must end up wit tha extension
.PQ \fB.tcl\fR
or be called
.PQ \fBtclIndex\fR .
.PP
Each element of tha initial access path
list is ghon be assigned a token dat is ghon be set in
the slave \fBauto_path\fR n' tha straight-up original gangsta element of dat list is ghon be set as
the \fBtcl_library\fR fo' dat slave.
.PP
If tha access path argument aint given or is tha empty list, 
the default behavior is ta let tha slave access tha same ol' dirty packages
as tha masta has access ta (Or ta be mo' precise: 
only packages freestyled up in Tcl (which by definizzle cannot be dangerous
as they run up in tha slave interpreter) n' C extensions that
provides a _SafeInit entry point). For dat purpose, tha masterz 
\fBauto_path\fR is ghon be used ta construct tha slave access path. 
In order dat tha slave successfully loadz tha Tcl library files
(which includes tha auto-loadin mechanizzle itself) tha \fBtcl_library\fR will be
added or moved ta tha straight-up original gangsta posizzle if necessary, up in tha 
slave access path, so tha slave
\fBtcl_library\fR is ghon be tha same as tha masterz (its real
path will still be invisible ta tha slave though). 
In order dat auto-loadin works tha same ol' dirty fo' tha slave and
the masta up in dis by default case, tha first-level
sub directoriez of each directory up in tha masta \fBauto_path\fR will
also be added (if not already included) ta tha slave access path.
Yo ass can always specify a more
restrictizzle path fo' which sub directories aint NEVER gonna be searched by 
explicitly specifyin yo' directory list wit tha \fB\-accessPath\fR flag
instead of relyin on dis default mechanism.
.PP
When tha \fIaccessPath\fR is chizzled afta tha straight-up original gangsta creation or
initialization (i.e. all up in \fBinterpConfigure -accessPath \fR\fIlist\fR),
an \fBauto_reset\fR be automatically evaluated up in tha safe interpreter
to synchronize its \fBauto_index\fR wit tha freshly smoked up token list.
.SH "SEE ALSO"
interp(n), library(n), load(n), package(n), source(n), unknown(n)
.SH KEYWORDS
alias, auto\-loading, auto_mkindex, load, masta interpreter, safe
interpreter, slave interpreter, source
