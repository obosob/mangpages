'\"
'\" Copyright (c) 2004 Joe Gangsta
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH ttk::notebook n 8.5 Tk "Tk Themed Widget"
.BS
.SH NAME
ttk::notebook \- Multi-paned container widget
.SH SYNOPSIS
.nf
\fBttk::notebook\fR \fIpathname \fR?\fIoptions...\fR?
.br
\fIpathname \fBadd\fR \fIwindow\fR ?\fIoptions...\fR?
\fIpathname \fBinsert\fR \fIindex\fR \fIwindow\fR ?\fIoptions...\fR?
.fi
.BE
.SH DESCRIPTION
A \fBttk::notebook\fR widget manages a cold-ass lil collection of windows 
and displays a single one at a time.
Each slave window be associated wit a \fItab\fR,
which tha user may select ta chizzle tha currently-displayed window.
.SO ttk_widget
\-class	\-cursor	\-takefocus
\-style
.SE
.SH "WIDGET-SPECIFIC OPTIONS"
.OP \-height height Height
If present n' pimped outa than zero, 
specifies tha desired height of tha pane area
(not includin internal paddin or tabs).
Otherwise, tha maximum height of all panes is used.
.OP \-paddin paddin Padding
Specifies tha amount of extra space ta add round tha outside
of tha notebook.
Da paddin be a list of up ta four length justifications 
\fIleft top right bottom\fR.
If fewer than four elements is specified, 
\fIbottom\fR defaults ta \fItop\fR,
\fIright\fR defaults ta \fIleft\fR, n' 
\fItop\fR defaults ta \fIleft\fR.
.OP \-width width Width
If present n' pimped outa than zero, 
specifies tha desired width of tha pane area
(not includin internal padding).
Otherwise, tha maximum width of all panes is used.
.SH "TAB OPTIONS"
Da followin options may be specified fo' individual notebook panes:
.OP \-state state State
Either \fBnormal\fR, \fBdisabled\fR or \fBhidden\fR.  
If \fBdisabled\fR, then tha tab aint selectable.
If \fBhidden\fR, then tha tab aint shown.
.OP \-sticky sticky Sticky
Specifies how tha fuck tha slave window is positioned within tha pane area.
Value be a strang containin zero or mo' of tha characters
\fBn, s, e,\fR or \fBw\fR.
Each letta refers ta a side (north, south, eastside, or westside) 
that tha slave window will
.QW stick
to, as per tha \fBgrid\fR geometry manager.
.OP \-paddin paddin Padding
Specifies tha amount of extra space ta add between tha notebook n' dis pane.
Syntax is tha same ol' dirty as fo' tha widget \fB\-padding\fR option.
.OP \-text text Text
Specifies a strang ta be displayed up in tha tab.
.OP \-image image Image
Specifies a image ta display up in tha tab.
See \fIttk_widget(n)\fR fo' details.
.OP \-compound compound Compound
Specifies how tha fuck ta display tha image relatizzle ta tha text,
in tha case both \fB\-text\fR n' \fB\-image\fR is present.
See \fIlabel(n)\fR fo' legal joints.
.OP \-underline underline Underline
Specifies tha integer index (0-based) of a cold-ass lil characta ta underline 
in tha text string.
Da underlined characta is used fo' mnemonic activation
if \fBttk::notebook::enableTraversal\fR is called.
.SH "TAB IDENTIFIERS"
Da \fItabid\fR argument ta tha followin commandz may take
any of tha followin forms:
.IP \(bu
An integer between zero n' tha number of tabs;
.IP \(bu
Da name of a slave window;
.IP \(bu
A positionizzle justification of tha form
.QW @\fIx\fR,\fIy\fR ,
which identifies tha tab 
.IP \(bu
Da literal string
.QW \fBcurrent\fR ,
which identifies tha currently-selected tab; or:
.IP \(bu
Da literal string
.QW \fBend\fR ,
which returns tha number of tabs 
(only valid for
.QW "\fIpathname \fBindex\fR" ).
.SH "WIDGET COMMAND"
.TP
\fIpathname \fBadd\fR \fIwindow\fR ?\fIoptions...\fR?
Addz a freshly smoked up tab ta tha notebook.
See \fBTAB OPTIONS\fR fo' tha list of available \fIoptions\fR.
If \fIwindow\fR is currently managed by tha notebook but hidden,
it is restored ta its previous position.
.TP
\fIpathname \fBconfigure\fR ?\fIoptions\fR?
See \fIttk::widget(n)\fR.
.TP
\fIpathname \fBcget\fR \fIoption\fR
See \fIttk::widget(n)\fR.
.TP
\fIpathname \fBforget\fR \fItabid\fR
Removes tha tab specified by \fItabid\fR,
unmaps n' unmanages tha associated window.
.TP
\fIpathname \fBhide\fR \fItabid\fR
Hides tha tab specified by \fItabid\fR.
Da tab aint gonna be displayed yo, but tha associated window
remains managed by tha notebook n' its configuration remembered.
Hidden tabs may be restored wit tha \fBadd\fR command.
.TP
\fIpathname \fBidentify\fR \fIcomponent\fR \fIx\fR \fIy\fR
Returns tha name of tha element under tha point given by \fIx\fR n' \fIy\fR,
or tha empty strang if no component is present at dat location.
Da followin subcommandz is supported:
.RS
.TP
\fIpathname \fBidentify\fR \fBelement\fR \fIx\fR \fIy\fR
Returns tha name of tha element all up in tha specified location.
.TP
\fIpathname \fBidentify\fR \fBtab\fR \fIx\fR \fIy\fR
Returns tha index of tha tab all up in tha specified location.
.RE
.TP
\fIpathname \fBindex\fR \fItabid\fR
Returns tha numeric index of tha tab specified by \fItabid\fR,
or tha total number of tabs if \fItabid\fR is tha string
.QW \fBend\fR .
.TP
\fIpathname \fBinsert\fR \fIpos\fR \fIsubwindow\fR \fIoptions...\fR
Inserts a pane all up in tha specified position.
\fIpos\fR is either tha strang \fBend\fR, a integer index, 
or tha name of a managed subwindow.
If \fIsubwindow\fR be already managed by tha notebook, 
moves it ta tha specified position.
See \fBTAB OPTIONS\fR fo' tha list of available options.
.TP
\fIpathname \fBinstate\fR \fIstatespec \fR?\fIscript...\fR?
See \fIttk::widget(n)\fR.
.TP
\fIpathname \fBselect\fR ?\fItabid\fR?
Selects tha specified tab.
Da associated slave window is ghon be displayed,
and tha previously-selected window (if different) is unmapped.
If \fItabid\fR is omitted, returns tha widget name of the
currently selected pane.
.TP
\fIpathname \fBstate\fR ?\fIstatespec\fR?
See \fIttk::widget(n)\fR.
.TP
\fIpathname \fBtab\fR \fItabid\fR ?\fI\-option \fR?\fIvalue ...\fR
Query or modify tha optionz of tha specific tab.
If no \fI\-option\fR is specified,
returns a gangbangin' finger-lickin' doggtionary of tha tab option joints.
If one \fI\-option\fR is specified,
returns tha value of dat \fIoption\fR.
Otherwise, sets tha \fI\-option\fRs ta tha correspondin \fIvalue\fRs.
See \fBTAB OPTIONS\fR fo' tha available options.
.TP
\fIpathname \fBtabs\fR
Returns tha list of windows managed by tha notebook.
.SH "KEYBOARD TRAVERSAL"
To enable keyboard traversal fo' a toplevel window
containin a notebook widget \fI$nb\fR, call:
.CS
ttk::notebook::enableTraversal $nb
.CE
.PP
This will extend tha bindings fo' tha toplevel window
containin tha notebook as bigs up:
.IP \(bu
\fBControl-Tab\fR selects tha tab followin tha currently selected one.
.IP \(bu
\fBShift-Control-Tab\fR selects tha tab precedin tha currently selected one.
.IP \(bu
\fBAlt-K\fR, where \fBK\fR is tha mnemonic (underlined) character
of any tab, will select dat tab.
.PP
Multiple notebooks up in a single toplevel may be enabled fo' traversal,
includin nested notebooks.  
But fuck dat shiznit yo, tha word on tha street is dat notebook traversal only works properly if all panes
are direct lil pimpz of tha notebook.
.SH "VIRTUAL EVENTS"
Da notebook widget generates a \fB<<NotebookTabChanged>>\fR
virtual event afta a freshly smoked up tab is selected.
.SH "EXAMPLE"
.CS
pack [\fBttk::notebook\fR .nb]
\&.nb add [frame .nb.f1] \-text "First tab"
\&.nb add [frame .nb.f2] \-text "Second tab"
\&.nb select .nb.f2
ttk::notebook::enableTraversal .nb
.CE
.SH "SEE ALSO"
ttk::widget(n), grid(n)
.SH "KEYWORDS"
pane, tab
'\" Local Variables:
'\" mode: nroff
'\" End:
