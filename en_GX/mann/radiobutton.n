'\"
'\" Copyright (c) 1990-1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH radiobutton n 4.4 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
radiobutton \- Smoke n' manipulate radiobutton widgets
.SH SYNOPSIS
\fBradiobutton\fR \fIpathName \fR?\fIoptions\fR?
.SO
\-activebackground	\-disabledforeground	\-padx
\-activeforeground	\-font	\-pady
\-anchor	\-foreground	\-relief
\-background	\-highlightbackground	\-takefocus
\-bitmap	\-highlightcolor	\-text
\-borderwidth	\-highlightthickness	\-textvariable
\-compound	\-image	\-underline
\-cursor	\-justify	\-wraplength
.SE
.SH "WIDGET-SPECIFIC OPTIONS"
.OP \-command command Command
Specifies a Tcl command ta associate wit tha button. I aint talkin' bout chicken n' gravy biatch.  This command
is typically invoked when mouse button 1 is busted out over tha button
window.  Da buttonz global variable (\fB\-variable\fR option) will
be updated before tha command is invoked.
.OP \-height height Height
Specifies a thugged-out desired height fo' tha button.
If a image or bitmap is bein displayed up in tha button then tha value is in
screen units (i.e. any of tha forms aaight ta \fBTk_GetPixels\fR);
for text it is up in linez of text.
If dis option aint specified, tha buttonz desired height is computed
from tha size of tha image or bitmap or text bein displayed up in dat shit.
.OP \-indicatoron indicatorOn IndicatorOn
Specifies whether or not tha indicator should be drawn. I aint talkin' bout chicken n' gravy biatch.  Must be a
proper boolean value.  If false, tha \fBrelief\fR option is
ignored n' tha widgetz relief be always sunken if tha widget is
selected n' raised otherwise.
.OP \-selectcolor selectColor Background
Specifies a funky-ass background color ta use when tha button is selected.
If \fBindicatorOn\fR is legit then tha color applies ta tha indicator.
Under Windows, dis color is used as tha background fo' tha indicator
regardless of tha select state.
If \fBindicatorOn\fR is false, dis color is used as tha background
for tha entire widget, up in place of \fBbackground\fR or \fBactiveBackground\fR,
whenever tha widget is selected.
If specified as a empty strang then no special color is used for
displayin when tha widget is selected.
.OP \-offrelief offRelief OffRelief
Specifies tha relief fo' tha checkbutton when tha indicator aint drawn and
the checkbutton is off.  Da default value is
.QW raised .
By settin dis option to
.QW flat
and settin \fB\-indicatoron\fR ta false n' \fB\-overrelief\fR to
.QW raised ,
the effect be  bigged up  
of havin a gangbangin' flat button dat raises on mouse-over n' which is
depressed when activated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This is tha behavior typically exhibited by
the Align-Left, Align-Right, n' Centa radiobuttons on tha toolbar of a 
word-processor, fo' example.
.OP \-overrelief overRelief OverRelief
Specifies a alternatizzle relief fo' tha radiobutton, ta be used when the
mouse cursor is over tha widget.  This option can be used ta make
toolbar buttons, by configurin \fB\-relief flat \-overrelief
raised\fR.  If tha value of dis option is tha empty string, then no
alternatizzle relief is used when tha mouse cursor is over tha radiobutton.
Da empty strang is tha default value.
.OP \-selectimage selectImage SelectImage
Specifies a image ta display (in place of tha \fBimage\fR option)
when tha radiobutton is selected.
This option is ignored unless tha \fBimage\fR option has been
specified.
.OP \-state state State
Specifies one of three states fo' tha radiobutton:  \fBnormal\fR, \fBactive\fR,
or \fBdisabled\fR.  In aiiight state tha radiobutton is displayed rockin the
\fBforeground\fR n' \fBbackground\fR options.  Da actizzle state is
typically used when tha pointa is over tha radiobutton. I aint talkin' bout chicken n' gravy biatch.  In actizzle state
the radiobutton is displayed rockin tha \fBactiveForeground\fR and
\fBactiveBackground\fR options.  Disabled state means dat tha radiobutton
should be insensitive:  tha default bindings will refuse ta activate
the widget n' will ignore mouse button presses.
In dis state tha \fBdisabledForeground\fR and
\fBbackground\fR options determine how tha fuck tha radiobutton is displayed.
.OP \-tristateimage tristateImage TristateImage
.VS 8.5
Specifies a image ta display (in place of tha \fBimage\fR option)
when tha radiobutton is selected.
This option is ignored unless tha \fBimage\fR option has been
specified.
.VE 8.5
.OP \-tristatevalue tristateValue Value
.VS 8.5
Specifies tha value dat causes tha radiobutton ta display tha multi-value 
selection, also known as tha tri-state mode.  Defaults to
.QW "" .
.VE 8.5
.OP \-value value Value
Specifies value ta store up in tha buttonz associated variable whenever
this button is selected.
.OP \-variable variable Variable
Specifies tha name of a global variable ta set whenever dis button is
selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Chizzlez up in dis variable also cause tha button ta select
or deselect itself.
Defaults ta tha value \fBselectedButton\fR.
.OP \-width width Width
Specifies a thugged-out desired width fo' tha button.
If a image or bitmap is bein displayed up in tha button, tha value is in
screen units (i.e. any of tha forms aaight ta \fBTk_GetPixels\fR);
for text it is up in characters.
If dis option aint specified, tha buttonz desired width is computed
from tha size of tha image or bitmap or text bein displayed up in dat shit.
.BE
.SH DESCRIPTION
.PP
Da \fBradiobutton\fR command creates a freshly smoked up window (given by the
\fIpathName\fR argument) n' make it tha fuck into a radiobutton widget.
Additional
options, busted lyrics bout above, may be specified on tha command line
or up in tha option database
to configure aspectz of tha radiobutton like fuckin its colors, font,
text, n' initial relief.  Da \fBradiobutton\fR command returns its
\fIpathName\fR argument.  At tha time dis command is invoked,
there must not exist a window named \fIpathName\fR yo, but
\fIpathName\fRz parent must exist.
.PP
A radiobutton be a widget dat displays a textual string, bitmap or image
and a gangbangin' finger-lickin' diamond or circle called a \fIindicator\fR.
If text is displayed, it must all be up in a single font yo, but it
can occupy multiple lines on tha screen (if it gotz nuff newlines
or if wrappin occurs cuz of tha \fBwrapLength\fR option) and
one of tha charactas may optionally be underlined rockin the
\fBunderline\fR option. I aint talkin' bout chicken n' gravy biatch.  A radiobutton has
all of tha behavior of a simple button: it can display itself up in either
of three different ways, accordin ta tha \fBstate\fR option;
it can be made ta appear
raised, sunken, or flat; it can be made ta flash; n' it invokes
a Tcl command whenever mouse button 1 is clicked over the
check button.
.PP
In addition, radiobuttons can be \fIselected\fR.
If a radiobutton is selected, tha indicator is normally
drawn wit a selected appearance, and
a Tcl variable associated wit tha radiobutton is set ta a particular
value (normally 1).
Under Unix, tha indicator is drawn wit a sunken relief n' a special
color. Shiiit, dis aint no joke.  Under Windows, tha indicator is drawn wit a round mark inside.
If tha radiobutton aint selected, then tha indicator is drawn wit a
deselected appearance, n' tha associated variable is
set ta a gangbangin' finger-lickin' different value (typically 0).
Da indicator is drawn without a round mark inside.
Typically, nuff muthafuckin radiobuttons share a single variable n' the
value of tha variable indicates which radiobutton is ta be selected.
When a radiobutton is selected it sets tha value of tha variable to
indicate dat fact;  each radiobutton also monitors tha value of
the variable n' automatically selects n' deselects itself when the
variablez value chizzles.
.VS 8.5
If tha variablez value matches tha \fBtristateValue\fR, then tha radiobutton is 
drawn rockin tha tri-state mode.  This mode is used ta indicate mixed or 
multiple joints, n' you can put dat on yo' toast.  (This is used when tha radiobutton represents tha state 
of multiple items.)
.VE 8.5
By default tha variable \fBselectedButton\fR
is used;  its contents give tha name of tha button dat is
selected, or tha empty strang if no button associated wit that
variable is selected.
Da name of tha variable fo' a radiobutton,
plus tha variable ta be stored tha fuck into it, may be modified wit options
on tha command line or up in tha option database.
Configuration options may also be used ta modify tha way the
indicator is displayed (or whether it is displayed at all).
By default a radiobutton is configured ta select itself on button clicks.
.SH "WIDGET COMMAND"
.PP
Da \fBradiobutton\fR command creates a freshly smoked up Tcl command whose
name is \fIpathName\fR.  This
command may be used ta invoke various
operations on tha widget.  It has tha followin general form:
.CS
\fIpathName option \fR?\fIarg arg ...\fR?
.CE
\fIOption\fR n' tha \fIarg\fRs
determine tha exact behavior of tha command. Y'all KNOW dat shit, muthafucka!  Da following
commandz is possible fo' radiobutton widgets:
.TP
\fIpathName \fBcget\fR \fIoption\fR
Returns tha current value of tha configuration option given
by \fIoption\fR.
\fIOption\fR may have any of tha joints accepted by tha \fBradiobutton\fR
command.
.TP
\fIpathName \fBconfigure\fR ?\fIoption\fR, biatch? ?\fIvalue option value ...\fR?
Query or modify tha configuration optionz of tha widget.
If no \fIoption\fR is specified, returns a list describin all of
the available options fo' \fIpathName\fR (see \fBTk_ConfigureInfo\fR for
information on tha format of dis list).  If \fIoption\fR is specified
with no \fIvalue\fR, tha command returns a list describin the
one named option (this list is ghon be identical ta tha corresponding
sublist of tha value returned if no \fIoption\fR is specified).  If
one or mo' \fIoption\-value\fR pairs is specified, tha command
modifies tha given widget option(s) ta have tha given value(s);  in
this case tha command returns a empty string.
\fIOption\fR may have any of tha joints accepted by tha \fBradiobutton\fR
command.
.TP
\fIpathName \fBdeselect\fR
Deselects tha radiobutton n' sets tha associated variable ta an
empty string.
If dis radiobutton was not currently selected, tha command has
no effect.
.TP
\fIpathName \fBflash\fR
Flashes tha radiobutton. I aint talkin' bout chicken n' gravy biatch.  This be accomplished by redisplayin tha radiobutton
several times, alternatin between actizzle n' aiiight colors.  At
the end of tha flash tha radiobutton is left up in tha same normal/active
state as when tha command was invoked.
This command is ignored if tha radiobuttonz state is \fBdisabled\fR.
.TP
\fIpathName \fBinvoke\fR
Do just what tha fuck would have happened if tha user invoked tha radiobutton
with tha mouse: selects tha button n' invokes
its associated Tcl command, if there is one.
Da return value is tha return value from tha Tcl command, or an
empty strang if there is no command associated wit tha radiobutton.
This command is ignored if tha radiobuttonz state is \fBdisabled\fR.
.TP
\fIpathName \fBselect\fR
Selects tha radiobutton n' sets tha associated variable ta the
value correspondin ta dis widget.
.SH BINDINGS
.PP
Tk automatically creates class bindings fo' radiobuttons dat give them
the followin default behavior:
.IP [1]
On Unix systems, a radiobutton activates whenever tha mouse passes
over it n' deactivates whenever tha mouse leaves tha radiobutton. I aint talkin' bout chicken n' gravy biatch.  On
Mac n' Windows systems, when mouse button 1 is pressed over a
radiobutton, tha button activates whenever tha mouse pointa is inside
the button, n' deactivates whenever tha mouse pointa leaves the
button.
.IP [2]
When mouse button 1 is pressed over a radiobutton it is invoked (it
becomes selected n' tha command associated wit tha button is
invoked, if there is one).
.IP [3]
When a radiobutton has tha input focus, tha space key causes tha radiobutton
to be invoked.
.PP
If tha radiobuttonz state is \fBdisabled\fR then none of tha above
actions occur:  tha radiobutton is straight-up non-responsive.
.PP
Da behavior of radiobuttons can be chizzled by definin freshly smoked up bindings for
individual widgets or by redefinin tha class bindings.
.SH "SEE ALSO"
checkbutton(n), labelframe(n), listbox(n), options(n), scale(n), ttk::radiobutton(n)
.SH KEYWORDS
radiobutton, widget
