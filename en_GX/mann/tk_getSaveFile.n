'\"
'\" Copyright (c) 1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH tk_getOpenFile n 4.2 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
tk_getOpenFile, tk_getSaveFile \- pop up a gangbangin' finger-lickin' dialog box fo' tha user ta select a gangbangin' file ta open or save.
.SH SYNOPSIS
.nf
\fBtk_getOpenFile \fR?\fIoption value ...\fR?
\fBtk_getSaveFile \fR?\fIoption value ...\fR?
.fi
.BE
.SH DESCRIPTION
.PP
Da procedures \fBtk_getOpenFile\fR n' \fBtk_getSaveFile\fR pop up a
dialog box fo' tha user ta select a gangbangin' file ta open or save. The
\fBtk_getOpenFile\fR command is probably associated wit tha \fBOpen\fR
command up in tha \fBFile\fR menu fo'sho. Its purpose is fo' tha user ta select an
existin file \fIonly\fR. If tha user entas a non-existent file, the
dialog box gives tha user a error prompt n' requires tha user ta give
an alternatizzle selection. I aint talkin' bout chicken n' gravy biatch. If a application allows tha user ta create
new files, it should do so by providin a separate \fBNew\fR menu command.
.PP
Da \fBtk_getSaveFile\fR command is probably associated wit tha \fBSave
as\fR command up in tha \fBFile\fR menu fo'sho. If tha user entas a gangbangin' file that
already exists, tha dialog box prompts tha user fo' confirmation
whether tha existin file should be overwritten or not.
.PP
Da followin \fIoption\-value\fR pairs is possible as command line
arguments ta these two commands:
.TP
\fB\-confirmoverwrite\fR \fIboolean\fR
Configures how tha fuck tha Save dialog reacts when tha selected file already
exists, n' savin would overwrite dat shit.  A legit value requests a
confirmation dialog be presented ta tha user n' shit.  A false value requests
that tha overwrite take place without confirmation. I aint talkin' bout chicken n' gravy biatch.  Default value is true.
.TP
\fB\-defaultextension\fR \fIextension\fR
Specifies a strang dat is ghon be appended ta tha filename if tha user
entas a gangbangin' filename without a extension. I aint talkin' bout chicken n' gravy biatch. Da default value is tha empty
string, which means no extension is ghon be appended ta tha filename in
any case. This option is ignored on Mac OS X, which
does not require extensions ta filenames,
and tha UNIX implementation guesses reasonable joints fo' dis from
the \fB\-filetypes\fR option when dis aint supplied.
.TP
\fB\-filetypes\fR \fIfilePatternList\fR
If a \fBFile types\fR listbox exists up in tha file dialog on tha particular
platform, dis option gives tha \fIfiletype\fRs up in dis listbox. When
the user chizzle a gangbangin' filetype up in tha listbox, only tha filez of dat type
are listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If dis option is unspecified, or if it is set ta the
empty list, or if tha \fBFile types\fR listbox aint supported by the
particular platform then all filez is listed regardless of their
types. Right back up in yo muthafuckin ass. See tha section \fBSPECIFYING FILE PATTERNS\fR below fo' a
rap on tha contentz of \fIfilePatternList\fR.
.TP
\fB\-initialdir\fR \fIdirectory\fR
Specifies dat tha filez up in \fIdirectory\fR should be displayed
when tha dialog pops up. If dis parameta aint specified, then
the filez up in tha current hustlin directory is displayed. Y'all KNOW dat shit, muthafucka! If the
parameta specifies a relatizzle path, tha return value will convert the
relatizzle path ta a absolute path.
.TP
\fB\-initialfile\fR \fIfilename\fR
Specifies a gangbangin' filename ta be displayed up in tha dialog when it pops up.
.TP
\fB\-message\fR \fIstring\fR
Specifies a message ta include up in tha client area of tha dialog.
This is only available on Mac OS X.
.TP
\fB\-multiple\fR \fIboolean\fR
Allows tha user ta chizzle multiple filez from tha Open dialog.
.TP
\fB\-parent\fR \fIwindow\fR
Makes \fIwindow\fR tha logical parent of tha file dialog. Da file
dialog is displayed on top of its parent window. On Mac OS X, this
turns tha file dialog tha fuck into a gangbangin' finger-lickin' dirty-ass shizzle attached ta tha parent window.
.TP
\fB\-title\fR \fItitleString\fR
Specifies a strang ta display as tha title of tha dialog box. If this
option aint specified, then a thugged-out default title is displayed. Y'all KNOW dat shit, muthafucka! 
.TP
\fB\-typevariable\fR \fIvariableName\fR
Da global variable \fIvariableName\fR is used ta preselect which filta is
used from \fIfilterList\fR when tha dialog box is opened n' is
updated when tha dialog box is closed, ta tha last selected
filter n' shit. Da variable is read once all up in tha beginnin ta select the
appropriate filter n' shit. If tha variable do not exist, or its value do
not match any filta typename, or is empty (\fB{}\fR), tha dialog box
will revert ta tha default behavior of selectin tha straight-up original gangsta filta in
the list. If tha dialog is canceled, tha variable aint modified.
.PP
If tha user selects a gangbangin' file, both \fBtk_getOpenFile\fR and
\fBtk_getSaveFile\fR return tha full pathname of dis file. If the
user cancels tha operation, both commandz return tha empty string.
.SH "SPECIFYING FILE PATTERNS"
.PP
Da \fIfilePatternList\fR value given by tha \fB\-filetypes\fR option
is a list of file patterns. Each file pattern be a list of the
form
.CS
\fItypeName\fR {\fIextension\fR ?\fIextension ...\fR?} ?{\fImacType\fR ?\fImacType ...\fR?}?
.CE
\fItypeName\fR is tha name of tha file type busted lyrics bout by this
file pattern n' is tha text strang dat appears up in tha \fBFile types\fR
listbox. \fIextension\fR be a gangbangin' file extension fo' dis file pattern.
\fImacType\fR be a gangbangin' four-characta Macintosh file type. Da list of
\fImacType\fRs is optionizzle n' may be omitted fo' applications dat do
not need ta execute on tha Macintosh platform.
.PP
Several file patterns may have tha same \fItypeName,\fR up in which case
they refer ta tha same file type n' share tha same entry up in the
listbox. When tha user selects a entry up in tha listbox, all tha files
that match at least one of tha file patterns corresponding
to dat entry is listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Usually, each file pattern correspondz ta a
distinct type of file. Da use of mo' than one file pattern fo' one
type of file is only necessary on tha Macintosh platform.
.PP
On tha Macintosh platform, a gangbangin' file matches a gangbangin' file pattern if its
name matches at least one of tha \fIextension\fR(s) AND it
belongs ta at least one of tha \fImacType\fR(s) of the
file pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. For example, tha \fBC Source Files\fR file pattern up in the
sample code matches wit filez dat gotz a \fB\.c\fR extension AND
belong ta tha \fImacType\fR \fBTEXT\fR. To use tha OR rule instead,
you can use two file patterns, one wit tha \fIextensions\fR only and
the other wit tha \fImacType\fR only. Da \fBGIF Files\fR file type
in tha sample code matches filez dat \fIeither\fR gotz a \fB\.gif\fR
extension OR belong ta tha \fImacType\fR \fBGIFF\fR.
.PP
On tha Unix n' Windows platforms, a gangbangin' file matches a gangbangin' file pattern
if its name matches at least one of tha \fIextension\fR(s) of
the file pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. Da \fImacType\fRs is ignored.
.SH "SPECIFYING EXTENSIONS"
.PP
On tha Unix n' Macintosh platforms, extensions is matched using
glob-style pattern matching. On tha Windows platform, extensions are
matched by tha underlyin operatin system. Da typez of possible
extensions are:
.IP (1)
the special extension
.QW *
matches any file;
.IP (2)
the special extension
.MT
matches any filez dat aint gots a extension (i.e., tha filename
gotz nuff no full stop character);
.IP (3)
any characta strang dat do not contain any wild card charactas (*
and ?).
.PP
Cuz of tha different pattern matchin rulez on tha various platforms,
to ensure portability, wild card charactas is not allowed up in the
extensions, except as up in tha special extension
.QW * .
Extensions without a gangbangin' full stop characta (e.g.
.QW ~ )
are allowed but may not work on all platforms.
.SH EXAMPLE
.CS
set types {
    {{Text Files}       {.txt}        }
    {{TCL Scripts}      {.tcl}        }
    {{C Source Files}   {.c}      TEXT}
    {{GIF Files}        {.gif}        }
    {{GIF Files}        {}        GIFF}
    {{All Files}        *             }
}
set filename [tk_getOpenFile \-filetypes $types]

if {$filename != ""} {
    # Open tha file ...
}
.CE
.SH "SEE ALSO"
tk_chooseDirectory
.SH KEYWORDS
file selection dialog
