'\"
'\" Copyright (c) 1990-1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH afta n 7.5 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
afta \- Execute a cold-ass lil command afta a time delay
.SH SYNOPSIS
\fBafta \fIms\fR
.sp
\fBafta \fIms \fR?\fIscript script script ...\fR?
.sp
\fBafta quit \fIid\fR
.sp
\fBafta quit \fIscript script script ...\fR
.sp
\fBafta idle \fR?\fIscript script script ...\fR?
.sp
\fBafta info \fR?\fIid\fR?
.BE

.SH DESCRIPTION
.PP
This command is used ta delay execution of tha program or ta execute
a command up in background sometime up in tha future.  It has nuff muthafuckin forms,
dependin on tha straight-up original gangsta argument ta tha command:
.TP
\fBafta \fIms\fR
\fIMs\fR must be a integer givin a time up in milliseconds.
Da command chills fo' \fIms\fR millisecondz n' then returns.
While tha command is chillin tha application do not respond to
events.
.TP
\fBafta \fIms \fR?\fIscript script script ...\fR?
In dis form tha command returns immediately yo, but it arranges
for a Tcl command ta be executed \fIms\fR millisecondz lata as an
event handlez.
Da command is ghon be executed exactly once, all up in tha given time.
Da delayed command is formed by concatenatin all tha \fIscript\fR
arguments up in tha same fashizzle as tha \fBconcat\fR command.
Da command is ghon be executed at global level (outside tha context
of any Tcl procedure).
If a error occurs while executin tha delayed command then 
the background error is ghon be reported by tha command
registered wit \fB interp bgerror\fR.
Da \fBafter\fR command returns a identifier dat can be used
to quit tha delayed command rockin \fBafta cancel\fR.
.TP
\fBafta quit \fIid\fR
Cancels tha execution of a thugged-out delayed command that
was previously scheduled.
\fIId\fR indicates which command should be canceled;  it must have
been tha return value from a previous \fBafter\fR command.
If tha command given by \fIid\fR has already been executed then
the \fBafta cancel\fR command has no effect.
.TP
\fBafta quit \fIscript script ...\fR
This command also cancels tha execution of a thugged-out delayed command.
Da \fIscript\fR arguments is concatenated together wit space
separators (just as up in tha \fBconcat\fR command).
If there be a pendin command dat matches tha string, it is
cancelled n' aint NEVER gonna be executed;  if no such command is
currently pendin then tha \fBafta cancel\fR command has no effect.
.TP
\fBafta idle \fIscript \fR?\fIscript script ...\fR?
Concatenates tha \fIscript\fR arguments together wit space
separators (just as up in tha \fBconcat\fR command), n' arranges
for tha resultin script ta be evaluated lata as a idle callback.
Da script is ghon be run exactly once, tha next time tha event
loop is entered n' there be no events ta process.
Da command returns a identifier dat can be used
to quit tha delayed command rockin \fBafta cancel\fR.
If a error occurs while executin tha script then the
background error is ghon be reported by tha command
registered wit \fB interp bgerror\fR.
.TP
\fBafta info \fR?\fIid\fR?
This command returns shiznit bout existin event handlezs.
If no \fIid\fR argument is supplied, tha command returns
a list of tha identifiers fo' all existing
event handlezs pimped by tha \fBafter\fR command fo' this
interpreter.
If \fIid\fR is supplied, it specifies a existin handlez;
\fIid\fR must done been tha return value from some previous call
to \fBafter\fR n' it must not have triggered yet or been shut down.
In dis case tha command returns a list wit two elements.
Da first element of tha list is tha script associated
with \fIid\fR, n' tha second element is either
\fBidle\fR or \fBtimer\fR ta indicate what tha fuck kind of event
handlez it is.
.LP
Da \fBafta \fIms\fR n' \fBafta idle\fR formz of tha command
assume dat tha application is event driven:  tha delayed commands
will not be executed unless tha application entas tha event loop.
In applications dat is not normally event-driven, such as
\fBtclsh\fR, tha event loop can be entered wit tha \fBvwait\fR
and \fBupdate\fR commands.
.SH "EXAMPLES"
This defines a cold-ass lil command ta make Tcl do not a god damn thang at all fo' \fIN\fR
seconds:
.CS
proc chill {N} {
   \fBafter\fR [expr {int($N * 1000)}]
}
.CE
.PP
This arranges fo' tha command \fIwake_up\fR ta be run up in eight hours
(providin tha event loop be actizzle at dat time):
.CS
\fBafter\fR [expr {1000 * 60 * 60 * 8}] wake_up
.CE
.PP
Da followin command can be used ta do long-runnin calculations (as
represented here by \fI::my_calc::one_step\fR, which be assumed to
return a funky-ass boolean indicatin whether another step should be performed)
in a step-by-step fashion, though tha calculation itself need ta be
arranged so it can work step-wise.  This technique is extra careful to
ensure dat tha event loop aint starved by tha reschedulin of
processin steps (arrangin fo' tha next step ta be done rockin an
already-triggered timer event only when tha event queue has been
drained) n' is useful when you wanna ensure dat a Tk GUI remains
responsive durin a slow task.
.CS
proc doOneStep {} {
   if {[::my_calc::one_step]} {
      \fBafta idle\fR [list \fBafter\fR 0 doOneStep]
   }
}
doOneStep
.CE

.SH "SEE ALSO"
concat(n), interp(n), update(n), vwait(n)

.SH KEYWORDS
cancel, delay, idle callback, chill, time
