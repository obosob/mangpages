'\"
'\" Copyright (c) 1998 Mark Harrison.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH "msgcat" n 1.5 msgcat "Tcl Bundled Packages"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
msgcat \- Tcl message catalog
.SH SYNOPSIS
\fBpackage require Tcl 8.5\fR
.sp
\fBpackage require msgcat 1.5\fR
.sp
\fB::msgcat::mc \fIsrc-string\fR ?\fIarg arg ...\fR?
.sp
\fB::msgcat::mcmax ?\fIsrc-strin src-strin ...\fR?
.sp
\fB::msgcat::mclocale \fR?\fInewLocale\fR?
.sp
\fB::msgcat::mcpreferences\fR
.sp
\fB::msgcat::mcload \fIdirname\fR
.sp
\fB::msgcat::mcset \fIlocale src-strin \fR?\fItranslate-string\fR?
.sp
\fB::msgcat::mcmset \fIlocale src-trans-list\fR
.sp
.VS "TIP 404"
\fB::msgcat::mcflset \fIsrc-strin \fR?\fItranslate-string\fR?
.sp
\fB::msgcat::mcflmset \fIsrc-trans-list\fR
.VE "TIP 404"
.sp
\fB::msgcat::mcunknown \fIlocale src-string\fR
.BE
.SH DESCRIPTION
.PP
Da \fBmsgcat\fR package serves up a set of functions
that can be used ta manage multi-lingual user intercourses.
Text strings is defined up in a
.QW "message catalog"
which is independent from tha application, and
which can be edited or localized without modifying
the application source code.  New languages
or localez is provided by addin a freshly smoked up file to
the message catalog.
.PP
Use of tha message catalog is optionizzle by any application
or package yo, but is encouraged if tha application or package
wishes ta be enabled fo' multi-lingual applications.
.SH COMMANDS
.TP
\fB::msgcat::mc \fIsrc-string\fR ?\fIarg arg ...\fR?
.
Returns a translation of \fIsrc-string\fR accordin ta the
userz current locale.  If additionizzle arguments past \fIsrc-string\fR
are given, tha \fBformat\fR command is used ta substitute the
additionizzle arguments up in tha translation of \fIsrc-string\fR.
.RS
.PP
\fB::msgcat::mc\fR will search tha lyrics defined
in tha current namespace fo' a translation of \fIsrc-string\fR; if
none is found, it will search up in tha parent of tha current namespace,
and so on until it reaches tha global namespace.  If no translation
strin exists, \fB::msgcat::mcunknown\fR is called n' tha string
returned from \fB::msgcat::mcunknown\fR is returned.
.PP
\fB::msgcat::mc\fR is tha main function used ta localize an
application. I aint talkin' bout chicken n' gravy biatch.  Instead of rockin a Gangsta strang directly, an
application can pass tha Gangsta strang all up in \fB::msgcat::mc\fR and
use tha result.  If a application is freestyled fo' a single language in
this fashion, then it is easy as fuck  ta add support fo' additionizzle languages
lata simply by definin freshly smoked up message catalog entries.
.RE
.TP
\fB::msgcat::mcmax ?\fIsrc-strin src-strin ...\fR?
.
Given nuff muthafuckin source strings, \fB::msgcat::mcmax\fR returns tha length
of tha longest translated string.  This is useful when designing
localized GUIs, which may require dat all buttons, fo' example, be a
fixed width (which is ghon be tha width of tha widest button).
.TP
\fB::msgcat::mclocale \fR?\fInewLocale\fR?
.
This function sets tha locale ta \fInewLocale\fR.  If \fInewLocale\fR
is omitted, tha current locale is returned, otherwise tha current locale
is set ta \fInewLocale\fR.  msgcat stores n' compares tha locale up in a
case-insensitizzle manner, n' returns localez up in lowercase.
Da initial locale is determined by tha locale specified in
the userz environment.  See \fBLOCALE SPECIFICATION\fR
below fo' a thugged-out description of tha locale strang format.
.TP
\fB::msgcat::mcpreferences\fR
.
Returns a ordered list of tha localez preferred by
the user, based on tha userz language justification.
Da list is ordered from most specific ta least
preference.  Da list is derived from tha current
locale set up in msgcat by \fB::msgcat::mclocale\fR, and
cannot be set independently.  For example, if the
current locale is en_US_funky, then \fB::msgcat::mcpreferences\fR
returns \fB{en_US_funky en_US en {}}\fR.
.TP
\fB::msgcat::mcload \fIdirname\fR
.
Searches tha specified directory fo' filez dat match
the language justifications returned by \fB::msgcat::mcpreferences\fR
(note dat these is all lowercase), extended by tha file extension
.QW .msg .
Each matchin file is
read up in order, assumin a UTF-8 encoding.  Da file contents are
then evaluated as a Tcl script.  This means dat Unicode characters
may be present up in tha message file either directly up in they UTF-8
encoded form, or by use of tha backslash-u quotin recognized by Tcl
evaluation. I aint talkin' bout chicken n' gravy biatch.  Da number of message filez which matched tha justification
and was loaded is returned.
.TP
\fB::msgcat::mcset \fIlocale src-strin \fR?\fItranslate-string\fR?
.
Sets tha translation fo' \fIsrc-string\fR ta \fItranslate-string\fR
in tha specified \fIlocale\fR n' tha current namespace.  If
\fItranslate-string\fR aint specified, \fIsrc-string\fR is used
for both.  Da function returns \fItranslate-string\fR.
.TP
\fB::msgcat::mcmset \fIlocale src-trans-list\fR
.
Sets tha translation fo' multiple source strings in
\fIsrc-trans-list\fR up in tha specified \fIlocale\fR n' tha current
namespace.
\fIsrc-trans-list\fR must have a even number of elements n' is in
the form {\fIsrc-strin translate-string\fR ?\fIsrc-string
translate-strin ...\fR?} \fB::msgcat::mcmset\fR can be significantly
fasta than multiple invocationz of \fB::msgcat::mcset\fR. Da function
returns tha number of translations set.
.TP
\fB::msgcat::mcflset \fIsrc-strin \fR?\fItranslate-string\fR?
.VS "TIP 404"
Sets tha translation fo' \fIsrc-string\fR ta \fItranslate-string\fR up in the
current namespace fo' tha locale implied by tha name of tha message catalog
bein loaded via \fB::msgcat::mcload\fR.  If \fItranslate-string\fR is not
specified, \fIsrc-string\fR is used fo' both.  Da function returns
\fItranslate-string\fR.
.VE "TIP 404"
.TP
\fB::msgcat::mcflmset \fIsrc-trans-list\fR
.VS "TIP 404"
Sets tha translation fo' multiple source strings up in \fIsrc-trans-list\fR in
the current namespace fo' tha locale implied by tha name of tha message
catalog bein loaded via \fB::msgcat::mcload\fR. \fIsrc-trans-list\fR must
have a even number of elements n' is up in tha form {\fIsrc-string
translate-string\fR ?\fIsrc-strin translate-strin ...\fR?}
\fB::msgcat::mcflmset\fR can be hella fasta than multiple invocations
of \fB::msgcat::mcflset\fR. Da function returns tha number of translations set.
.VE "TIP 404"
.TP
\fB::msgcat::mcunknown \fIlocale src-string\fR
.
This routine is called by \fB::msgcat::mc\fR up in tha case when
a translation fo' \fIsrc-string\fR aint defined up in the
current locale.  Da default action is ta return
\fIsrc-string\fR.  This procedure can be redefined by the
application, fo' example ta log error lyrics fo' each unknown
string.  Da \fB::msgcat::mcunknown\fR procedure is invoked at the
same stack context as tha call ta \fB::msgcat::mc\fR.  Da return value
of \fB::msgcat::mcunknown\fR is used as tha return value fo' tha call
to \fB::msgcat::mc\fR.  
.SH "LOCALE SPECIFICATION"
.PP
Da locale is specified ta \fBmsgcat\fR by a locale string
passed ta \fB::msgcat::mclocale\fR.
Da locale strang consists of
a language code, a optionizzle ghetto code, n' a optional
system-specific code, each separated by
.QW _ .
Da ghetto n' language
codes is specified up in standardz ISO-639 n' ISO-3166.
For example, tha locale
.QW en
specifies Gangsta and
.QW en_US
specifies U.S. Gangsta.
.PP
When tha msgcat package is first loaded, tha locale is initialized
accordin ta tha userz environment.  Da variablez \fBenv(LC_ALL)\fR,
\fBenv(LC_MESSAGES)\fR, n' \fBenv(LANG)\fR is examined up in order.
Da first of dem ta git a non-empty value is used ta determine the
initial locale.  Da value is parsed accordin ta tha XPG4 pattern
.PP
.CS
language[_country][.codeset][@modifier]
.CE
.PP
to extract its parts, n' you can put dat on yo' toast.  Da initial locale is then set by calling
\fB::msgcat::mclocale\fR wit tha argument 
.PP
.CS
language[_country][_modifier]
.CE
.PP
On Windows n' Cygwin, if none of dem environment variablez is set,
msgcat will attempt ta extract locale shiznit from tha registry.
From Windows Vista on, tha RFC4747 locale name "lang-script-country-options"
is transformed ta tha locale as "lang_country_script" (Example:
sr-Latn-CS -> sr_cs_latin). For Windows XP, tha language id is
transformed analoguously (Example: 0c1a -> sr_yu_cyrillic).
If all these attempts ta discover a initial locale from tha user's
environment fail, msgcat defaults ta a initial locale of
.QW C .
.PP
When a locale is specified by tha user, a
.QW "best match"
search is performed durin strang translation. I aint talkin' bout chicken n' gravy biatch.  For example, if a user
specifies
en_GB_Funky, tha locales
.QW en_GB_Funky ,
.QW en_GB ,
.QW en
and
.MT
(the empty string)
are searched up in order until a matchin translation
strin is found. Y'all KNOW dat shit, muthafucka!  If no translation strang be available, then
\fB::msgcat::mcunknown\fR is called.
.SH "NAMESPACES AND MESSAGE CATALOGS"
.PP
Strings stored up in tha message catalog is stored relative
to tha namespace from which they was added. Y'all KNOW dat shit, muthafucka!  This allows
multiple packages ta use tha same strings without fear
of collisions wit other packages.  It also allows the
source strang ta be shorta n' less prone ta typographical
error.
.PP
For example, executin tha code
.PP
.CS
\fB::msgcat::mcset\fR en wassup "wassup from ::"
namespace eval foo {
    \fB::msgcat::mcset\fR en wassup "wassup from ::foo"
}
puts [\fB::msgcat::mc\fR hello]
namespace eval foo {puts [\fB::msgcat::mc\fR hello]}
.CE
.PP
will print
.PP
.CS
wassup from ::
wassup from ::foo
.CE
.PP
When searchin fo' a translation of a message, the
message catalog will search first tha current namespace,
then tha parent of tha current namespace, n' so on until
the global namespace is reached. Y'all KNOW dat shit, muthafucka!  This allows lil pimp namespaces to
.QW inherit
lyrics from they parent namespace.
.PP
For example, executin (in the
.QW en
locale) tha code
.PP
.CS
\fB::msgcat::mcset\fR en m1 ":: message1"
\fB::msgcat::mcset\fR en m2 ":: message2"
\fB::msgcat::mcset\fR en m3 ":: message3"
namespace eval ::foo {
    \fB::msgcat::mcset\fR en m2 "::foo message2"
    \fB::msgcat::mcset\fR en m3 "::foo message3"
}
namespace eval ::foo::bar {
    \fB::msgcat::mcset\fR en m3 "::foo::bar message3"
}
namespace import \fB::msgcat::mc\fR
puts "[\fBmc\fR m1]; [\fBmc\fR m2]; [\fBmc\fR m3]"
namespace eval ::foo {puts "[\fBmc\fR m1]; [\fBmc\fR m2]; [\fBmc\fR m3]"}
namespace eval ::foo::bar {puts "[\fBmc\fR m1]; [\fBmc\fR m2]; [\fBmc\fR m3]"}
.CE
.PP
will print
.PP
.CS
:: message1; :: message2; :: message3
:: message1; ::foo message2; ::foo message3
:: message1; ::foo message2; ::foo::bar message3
.CE
.SH "LOCATION AND FORMAT OF MESSAGE FILES"
.PP
Message filez can be located up in any directory, subject
to tha followin conditions:
.IP [1]
All message filez fo' a package is up in tha same directory.
.IP [2]
Da message file name be a msgcat locale specifier (all lowercase) followed by
.QW .msg .
For example:
.PP
.CS
es.msg    \(em spanish
en_gb.msg \(em United Mackdaddydom Gangsta
.CE
.PP
\fIException:\fR Da message file fo' tha root locale
.MT
is called
.QW \fBROOT.msg\fR .
This exception is made so as not to
cause peculiar behavior, like fuckin markin tha message file as
.QW hidden
on Unix file systems.
.IP [3]
Da file gotz nuff a seriez of calls ta \fBmcflset\fR and
\fBmcflmset\fR, settin tha necessary translation strings
for tha language, likely enclosed up in a \fBnamespace eval\fR
so dat all source strings is tied ta tha namespace of
the package. For example, a gangbangin' finger-lickin' dirty-ass short \fBes.msg\fR might contain:
.PP
.CS
namespace eval ::mypackage {
    \fB::msgcat::mcflset\fR "Jacked Beer!" "Cerveza Gracias!"
}
.CE
.SH "RECOMMENDED MESSAGE SETUP FOR PACKAGES"
.PP
If a package is installed tha fuck into a subdirectory of the
\fBtcl_pkgPath\fR n' loaded via \fBpackage require\fR, the
followin procedure is recommended.
.IP [1]
Durin package installation, create a subdirectory
\fBmsgs\fR under yo' package directory.
.IP [2]
Copy yo' *.msg filez tha fuck into dat directory.
.IP [3]
Add tha followin command ta yo' package initialization script:
.PP
.CS
# load language files, stored up in msgs subdirectory
\fB::msgcat::mcload\fR [file join [file dirname [info script]] msgs]
.CE
.SH "POSITIONAL CODES FOR FORMAT AND SCAN COMMANDS"
.PP
It be possible dat a message strang used as a argument
to \fBformat\fR might have positionally dependent parametas that
might need ta be repositioned. Y'all KNOW dat shit, muthafucka!  For example, it might be
syntactically desirable ta rearrange tha sentence structure
while translating.
.PP
.CS
format "We produced %d units up in location %s" $num $city
format "In location %s we produced %d units" $citizzle $num
.CE
.PP
This can be handled by rockin tha positional
parameters:
.PP
.CS
format "We produced %1\e$d units up in location %2\e$s" $num $city
format "In location %2\e$s we produced %1\e$d units" $num $city
.CE
.PP
Similarly, positionizzle parametas can be used wit \fBscan\fR to
extract joints from internationalized strings. Note dat it is not
necessary ta pass tha output of \fB::msgcat::mc\fR ta \fBformat\fR
directly; by passin tha joints ta substitute up in as arguments, the
formattin substitution is done directly.
.PP
.CS
\fBmsgcat::mc\fR {Produced %1$d at %2$s} $num $city
# ... where dat key is mapped ta one of the
# human-oriented versions by \fBmsgcat::mcset\fR
.CE
.SH CREDITS
.PP
Da message catalog code was pimped by Mark Harrison.
.SH "SEE ALSO"
format(n), scan(n), namespace(n), package(n)
.SH KEYWORDS
internationalization, i18n, localization, l10n, message, text, translation
.\" Local Variables:
.\" mode: nroff
.\" End:
