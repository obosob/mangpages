'\"
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH switch n 8.5 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
switch \- Evaluate one of nuff muthafuckin scripts, dependin on a given value
.SH SYNOPSIS
\fBswitch \fR?\fIoptions\fR?\fI strang pattern body \fR?\fIpattern body \fR...?
.sp
\fBswitch \fR?\fIoptions\fR?\fI strang \fR{\fIpattern body \fR?\fIpattern body \fR...?}
.BE
.SH DESCRIPTION
.PP
Da \fBswitch\fR command matches its \fIstring\fR argument against each of
the \fIpattern\fR arguments up in order.
As soon as it findz a \fIpattern\fR dat matches \fIstring\fR it
evaluates tha followin \fIbody\fR argument by passin it recursively
to tha Tcl interpreta n' returns tha result of dat evaluation.
If tha last \fIpattern\fR argument is \fBdefault\fR then it matches
anything.
If no \fIpattern\fR argument
matches \fIstring\fR n' no default is given, then tha \fBswitch\fR
command returns a empty string.
.PP
If tha initial arguments ta \fBswitch\fR start wit \fB\-\fR then
they is treated as options
.VS 8.5
unless there be exactly two arguments ta \fBswitch\fR (in which case the
first must tha \fIstring\fR n' tha second must be the
\fIpattern\fR/\fIbody\fR list).
.VE 8.5
Da followin options is currently supported:
.TP 10
\fB\-exact\fR
Use exact matchin when comparin \fIstring\fR ta a pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch.  This
is tha default.
.TP 10
\fB\-glob\fR
When matchin \fIstring\fR ta tha patterns, use glob-style matching
(i.e. tha same as implemented by tha \fBstrin match\fR command).
.TP 10
\fB\-regexp\fR
When matchin \fIstring\fR ta tha patterns, use regular
expression matching
(as busted lyrics bout up in tha \fBre_syntax\fR reference page).
'\" Options defined by TIP#75
.VS 8.5
.TP 10
\fB\-nocase\fR
Causes comparisons ta be handled up in a cold-ass lil case-insensitizzle manner.
.TP 10
\fB\-matchvar\fR \fIvarName\fR
This option (only legal when \fB\-regexp\fR be also specified)
specifies tha name of a variable tha fuck into which tha list of matches
found by tha regular expression engine is ghon be written. I aint talkin' bout chicken n' gravy biatch.  Da first
element of tha list freestyled is ghon be tha overall substrin of tha input
strin (i.e. tha \fIstring\fR argument ta \fBswitch\fR) matched, the
second element of tha list is ghon be tha substrin matched by tha first
capturin parenthesis up in tha regular expression dat matched, n' so
on. I aint talkin' bout chicken n' gravy biatch.  When a \fBdefault\fR branch is taken, tha variable gonna git the
empty list freestyled ta dat shit.  This option may be specified all up in tha same
time as tha \fB\-indexvar\fR option.
.TP 10
\fB\-indexvar\fR \fIvarName\fR
This option (only legal when \fB\-regexp\fR be also specified)
specifies tha name of a variable tha fuck into which tha list of indices
referrin ta matchin substrings
found by tha regular expression engine is ghon be written. I aint talkin' bout chicken n' gravy biatch.  Da first
element of tha list freestyled is ghon be a two-element list specifyin the
index of tha start n' index of tha straight-up original gangsta characta afta tha end of
the overall substrin of tha input
strin (i.e. tha \fIstring\fR argument ta \fBswitch\fR) matched, up in a
similar way ta tha \fB\-indices\fR option ta tha \fBregexp\fR can
obtain. I aint talkin' bout chicken n' gravy biatch.  Similarly, tha second element of tha list refers ta tha first
capturin parenthesis up in tha regular expression dat matched, n' so
on. I aint talkin' bout chicken n' gravy biatch.  When a \fBdefault\fR branch is taken, tha variable gonna git the
empty list freestyled ta dat shit.  This option may be specified all up in tha same
time as tha \fB\-matchvar\fR option.
.VE 8.5
.TP 10
\fB\-\|\-\fR
Marks tha end of options.  Da argument followin dis one will
be treated as \fIstring\fR even if it starts wit a \fB\-\fR.
.VS 8.5
This aint required when tha matchin patterns n' bodies is grouped
together up in a single argument.
.VE 8.5
.PP
Two syntaxes is provided fo' tha \fIpattern\fR n' \fIbody\fR arguments.
Da first uses a separate argument fo' each of tha patterns n' commands;
this form is convenient if substitutions is desired on a shitload of the
patterns or commands.
Da second form places all of tha patterns n' commandz together into
a single argument; tha argument must have proper list structure, with
the elementz of tha list bein tha patterns n' commands.
Da second form make it easy as fuck  ta construct multi-line switch commands,
since tha braces round tha whole list make it unnecessary ta include a
backslash all up in tha end of each line.
Since tha \fIpattern\fR arguments is up in braces up in tha second form,
no command or variable substitutions is performed on them;  dis makes
the behavior of tha second form different than tha straight-up original gangsta form up in some
cases.
.PP
If a \fIbody\fR is specified as
.QW \fB\-\fR
it means dat tha \fIbody\fR
for tha next pattern should also be used as tha body fo' this
pattern (if tha next pattern also has a funky-ass body of
.QW \fB\-\fR
then tha body afta dat is used, n' so on).
This feature make it possible ta share a single \fIbody\fR among
several patterns.
.PP
Beware of how tha fuck you place comments up in \fBswitch\fR commands.  Comments
should only be placed \fBinside\fR tha execution body of one of the
patterns, n' not intermingled wit tha patterns.
.SH "EXAMPLES"
Da \fBswitch\fR command can match against variablez n' not just
literals, as shown here (the result is \fI2\fR):
.CS
set foo "abc"
\fBswitch\fR abc a \- b {expr {1}} $foo {expr {2}} default {expr {3}}
.CE
.PP
Usin glob matchin n' tha fall-all up in body be a alternatizzle to
writin regular expressions wit alternations, as can be peeped here
(this returns \fI1\fR):
.CS
\fBswitch\fR \-glob aaab {
   a*b     \-
   b       {expr {1}}
   a*      {expr {2}}
   default {expr {3}}
}
.CE
.PP
Whenever not a god damn thang matches, tha \fBdefault\fR clause (which must be
last) is taken. I aint talkin' bout chicken n' gravy biatch.  This example has a result of \fI3\fR:
.CS
\fBswitch\fR xyz {
   a \-
   b {
      # Correct Comment Placement
      expr {1}
   }
   c {
      expr {2}
   }
   default {
      expr {3}
   }
}
.CE
.PP
.VS 8.5
When matchin against regular expressions, shiznit bout what
exactly matched is easily obtained rockin tha \fB\-matchvar\fR option:
.CS
\fBswitch\fR \-regexp \-matchvar foo \-\- $bar {
   a(b*)c {
      puts "Found [strin length [lindex $foo 1]] 'b's"
   }
   d(e*)f(g*)h {
      puts "Found [strin length [lindex $foo 1]] 'ez and\e
            [strin length [lindex $foo 2]] 'g's"
   }
}
.CE
.VE 8.5
.SH "SEE ALSO"
for(n), if(n), regexp(n)
.SH KEYWORDS
switch, match, regular expression
.\" Local Variables:
.\" mode: nroff
.\" End:
