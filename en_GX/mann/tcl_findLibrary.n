'\"
'\" Copyright (c) 1991-1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH library n "8.0" Tcl "Tcl Built-In Commands"
.BS
.SH NAME
auto_execok, auto_import, auto_load, auto_mkindex, auto_mkindex_old, auto_qualify, auto_reset, tcl_findLibrary, parray, tcl_endOfWord, tcl_startOfNextWord, tcl_startOfPreviousWord, tcl_wordBreakAfter, tcl_wordBreakBefore \- standard library of Tcl procedures
.SH SYNOPSIS
.nf
\fBauto_execok \fIcmd\fR
\fBauto_import \fIpattern\fR
\fBauto_load \fIcmd\fR
\fBauto_mkindex \fIdir pattern pattern ...\fR
\fBauto_mkindex_old \fIdir pattern pattern ...\fR
\fBauto_qualify \fIcommand namespace\fR
\fBauto_reset\fR
\fBtcl_findLibrary \fIbasename version patch initScript enVarName varName\fR
\fBparray \fIarrayName\fR
\fBtcl_endOfWord \fIstr start\fR
\fBtcl_startOfNextWord \fIstr start\fR
\fBtcl_startOfPreviousWord \fIstr start\fR
\fBtcl_wordBreakAfta \fIstr start\fR
\fBtcl_wordBreakBefore \fIstr start\fR
.BE
.SH INTRODUCTION
.PP
Tcl includes a library of Tcl procedures fo' commonly-needed functions.
Da procedures defined up in tha Tcl library is generic ones suitable
for use by nuff different applications.
Da location of tha Tcl library is returned by tha \fBinfo library\fR
command.
In addizzle ta tha Tcl library, each application will normally have
its own library of support procedures as well;  tha location of this
library is normally given by tha value of tha \fB$\fIapp\fB_library\fR
global variable, where \fIapp\fR is tha name of tha application.
For example, tha location of tha Tk library is kept up in tha variable
\fB$tk_library\fR.
.PP
To access tha procedures up in tha Tcl library, a application should
source tha file \fBinit.tcl\fR up in tha library, fo' example with
the Tcl command
.CS
\fBsource [file join [info library] init.tcl]\fR
.CE
If tha library procedure \fBTcl_Init\fR is invoked from a application's
\fBTcl_AppInit\fR procedure, dis happens automatically.
Da code up in \fBinit.tcl\fR will define tha \fBunknown\fR procedure
and arrange fo' tha other procedures ta be loaded on-demand using
the auto-load mechanizzle defined below.
.SH "COMMAND PROCEDURES"
.PP
Da followin procedures is provided up in tha Tcl library:
.TP
\fBauto_execok \fIcmd\fR
Determines whether there be a executable file or shell builtin
by tha name \fIcmd\fR.  If so, it returns a list of arguments ta be
passed ta \fBexec\fR ta execute tha executable file or shell builtin
named by \fIcmd\fR.  If not, it returns a empty string.  This command
examines tha directories up in tha current search path (given by tha PATH
environment variable) up in its search fo' a executable file named
\fIcmd\fR.  On Windows platforms, tha search is expanded wit tha same
directories n' file extensions as used by \fBexec\fR. \fBAuto_execok\fR
rethugz shiznit bout previous searches up in a array named
\fBauto_execs\fR;  dis avoidz tha path search up in future calls fo' the
same \fIcmd\fR.  Da command \fBauto_reset\fR may be used ta force
\fBauto_execok\fR ta forget its cached shiznit.
.TP
\fBauto_import \fIpattern\fR
\fBAuto_import\fR is invoked durin \fBnamespace import\fR ta peep if
the imported commandz specified by \fIpattern\fR reside up in an
autoloaded library.  If so, tha commandz is loaded so dat they will
be available ta tha interpreta fo' bustin tha import links.  If the
commandz do not reside up in a autoloaded library, \fBauto_import\fR
does nothing.  Da pattern matchin is performed accordin ta the
matchin rulez of \fBnamespace import\fR.
.TP
\fBauto_load \fIcmd\fR
This command attempts ta load tha definizzle fo' a Tcl command named
\fIcmd\fR.  To do this, it searches a \fIauto-load path\fR, which is
a list of one or mo' directories. Put ya muthafuckin choppers up if ya feel dis!  Da auto-load path is given by the
global variable \fB$auto_path\fR if it exists, n' you can put dat on yo' toast.  If there is no
\fB$auto_path\fR variable, then tha TCLLIBPATH environment variable is
used, if it exists, n' you can put dat on yo' toast.  Otherwise tha auto-load path consistz of just the
Tcl library directory.  Within each directory up in tha auto-load path
there must be a gangbangin' file \fBtclIndex\fR dat raps bout one or more
commandz defined up in dat directory n' a script ta evaluate ta load
each of tha commands.  Da \fBtclIndex\fR file should be generated
with tha \fBauto_mkindex\fR command. Y'all KNOW dat shit, muthafucka!  If \fIcmd\fR is found up in an
index file, then tha appropriate script is evaluated ta create the
command. Y'all KNOW dat shit, muthafucka!  Da \fBauto_load\fR command returns 1 if \fIcmd\fR was
successfully pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da command returns 0 if there was no index
entry fo' \fIcmd\fR or if tha script did not straight-up define \fIcmd\fR
(e.g. cuz index shiznit is outta date).  If a error occurs
while processin tha script, then dat error is returned.
\fBAuto_load\fR only readz tha index shiznit once n' saves it in
the array \fBauto_index\fR;  future calls ta \fBauto_load\fR check for
\fIcmd\fR up in tha array rather than re-readin tha index files.  The
cached index shiznit may be deleted wit tha command
\fBauto_reset\fR.  This will force tha next \fBauto_load\fR command to
reload tha index database from disk.
.TP
\fBauto_mkindex \fIdir pattern pattern ...\fR
Generates a index suitable fo' use by \fBauto_load\fR.  Da command
searches \fIdir\fR fo' all filez whose names match any of the
\fIpattern\fR arguments (matchin is done wit tha \fBglob\fR
command), generates a index of all tha Tcl command procedures defined
in all tha matchin files, n' stores tha index shiznit up in a gangbangin' file
named \fBtclIndex\fR up in \fIdir\fR. If no pattern is given a pattern of
\fB*.tcl\fR is ghon be assumed. Y'all KNOW dat shit, muthafucka!  For example, tha command
.RS
.CS
\fBauto_mkindex foo *.tcl\fR
.CE
.LP
will read all tha \fB.tcl\fR filez up in subdirectory \fBfoo\fR and
generate a freshly smoked up index file \fBfoo/tclIndex\fR.
.PP
\fBAuto_mkindex\fR parses tha Tcl scripts by sourcin dem tha fuck into a
slave interpreta n' monitorin tha proc n' namespace commandz that
are executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Extensions can use tha (undocumented)
auto_mkindex_parser package ta regista other commandz dat can
contribute ta tha auto_load index. Yo ass will gotta read through
auto.tcl ta peep how tha fuck dis works.
.PP
\fBAuto_mkindex_old\fR parses tha Tcl scripts up in a relatively
unsophisticated way:  if any line gotz nuff tha word \fBproc\fR
as its first charactas then it be assumed ta be a procedure
definizzle n' tha next word of tha line is taken as the
procedurez name.
Procedure definitions dat do not step tha fuck up in dis way (e.g. they
have spaces before tha \fBproc\fR) aint gonna be indexed. Y'all KNOW dat shit, muthafucka!  If yo' 
script gotz nuff
.QW dangerous
code, like fuckin global initialization
code or procedure names wit special charactas like \fB$\fR,
\fB*\fR, \fB[\fR or \fB]\fR, yo ass is less thuggy rockin auto_mkindex_old.
.RE
.TP
\fBauto_reset\fR
Destroys all tha shiznit cached by \fBauto_execok\fR and
\fBauto_load\fR.  This shiznit is ghon be re-read from disk tha next
time it is needed. Y'all KNOW dat shit, muthafucka!  \fBAuto_reset\fR also deletes any procedures
listed up in tha auto-load index, so dat fresh copiez of dem will be
loaded tha next time dat they is used.
.TP
\fBauto_qualify \fIcommand namespace\fR
Computes a list of straight-up qualified names fo' \fIcommand\fR.  This list
mirrors tha path a standard Tcl interpreta bigs up fo' command
lookups:  first it looks fo' tha command up in tha current namespace, and
then up in tha global namespace.  Accordingly, if \fIcommand\fR is
relatizzle n' \fInamespace\fR aint \fB::\fR, tha list returned has
two elements:  \fIcommand\fR scoped by \fInamespace\fR, as if it were
a command up in tha \fInamespace\fR namespace; n' \fIcommand\fR as if it
were a cold-ass lil command up in tha global namespace.  Otherwise, if either
\fIcommand\fR be absolute (it begins wit \fB::\fR), or
\fInamespace\fR is \fB::\fR, tha list gotz nuff only \fIcommand\fR as
if it was a cold-ass lil command up in tha global namespace.
.RS
.PP
\fBAuto_qualify\fR is used by tha auto-loadin facilitizzles up in Tcl, both
for producin auto-loadin indexes like fuckin \fIpkgIndex.tcl\fR, n' for
performin tha actual auto-loadin of functions at runtime.
.RE
.TP
\fBtcl_findLibrary \fIbasename version patch initScript enVarName varName\fR
This be a standard search procedure fo' use by extensions during
their initialization. I aint talkin' bout chicken n' gravy biatch.  They call dis procedure ta look fo' their
script library up in nuff muthafuckin standard directories.
Da last component of tha name of tha library directory is 
normally \fIbasenameversion\fR
(e.g., tk8.0) yo, but it might be
.QW library
when up in tha build hierarchies.
Da \fIinitScript\fR file is ghon be sourced tha fuck into tha interpreter
once it is found. Y'all KNOW dat shit, muthafucka!  Da directory up in which dis file is found is
stored tha fuck into tha global variable \fIvarName\fR.
If dis variable be already defined (e.g., by C code during
application initialization) then no searchin is done.
Otherwise tha search looks up in these directories:
the directory named by tha environment variable \fIenVarName\fR;
relatizzle ta tha Tcl library directory;
relatizzle ta tha executable file up in tha standard installation
bin or bin/\fIarch\fR directory;
relatizzle ta tha executable file up in tha current build tree;
relatizzle ta tha executable file up in a parallel build tree.
.TP
\fBparray \fIarrayName\fR
Prints on standard output tha names n' jointz of all tha elements
in tha array \fIarrayName\fR.
\fBArrayName\fR must be a array accessible ta tha calla of \fBparray\fR.
It may be either local or global.
.TP
\fBtcl_endOfWord \fIstr start\fR
Returns tha index of tha straight-up original gangsta end-of-word location dat occurs after
a startin index \fIstart\fR up in tha strang \fIstr\fR.  An end-of-word
location is defined ta be tha straight-up original gangsta non-word characta followin the
first word characta afta tha startin point.  Returns -1 if there
are no mo' end-of-word locations afta tha startin point.  See the
description of \fBtcl_wordchars\fR n' \fBtcl_nonwordchars\fR below
for mo' details on how tha fuck Tcl determines which charactas is word
characters.
.TP
\fBtcl_startOfNextWord \fIstr start\fR
Returns tha index of tha straight-up original gangsta start-of-word location dat occurs
afta a startin index \fIstart\fR up in tha strang \fIstr\fR.  A
start-of-word location is defined ta be tha straight-up original gangsta word character
followin a non-word character n' shit.  Returns \-1 if there be no more
start-of-word locations afta tha startin point.
.TP
\fBtcl_startOfPreviousWord \fIstr start\fR
Returns tha index of tha straight-up original gangsta start-of-word location dat occurs
before a startin index \fIstart\fR up in tha strang \fIstr\fR.  Returns
\-1 if there be no mo' start-of-word locations before tha starting
point.
.TP
\fBtcl_wordBreakAfta \fIstr start\fR
Returns tha index of tha straight-up original gangsta word boundary afta tha startin index
\fIstart\fR up in tha strang \fIstr\fR.  Returns \-1 if there be no more
boundaries afta tha startin point up in tha given string.  Da index
returned refers ta tha second characta of tha pair dat comprises a
boundary.
.TP
\fBtcl_wordBreakBefore \fIstr start\fR
Returns tha index of tha straight-up original gangsta word boundary before tha startin index
\fIstart\fR up in tha strang \fIstr\fR.  Returns \-1 if there be no more
boundaries before tha startin point up in tha given string.  Da index
returned refers ta tha second characta of tha pair dat comprises a
boundary.
.SH "VARIABLES"
.PP
Da followin global variablez is defined or used by tha procedures in
the Tcl library:
.TP
\fBauto_execs\fR
Used by \fBauto_execok\fR ta record shiznit bout whether
particular commandz exist as executable files.
.TP
\fBauto_index\fR
Used by \fBauto_load\fR ta save tha index shiznit read from
disk.
.TP
\fBauto_noexec\fR
If set ta any value, then \fBunknown\fR aint gonna attempt ta auto-exec
any commands.
.TP
\fBauto_noload\fR
If set ta any value, then \fBunknown\fR aint gonna attempt ta auto-load
any commands.
.TP
\fBauto_path\fR
If set, then it must contain a valid Tcl list givin directories to
search durin auto-load operations.
This variable is initialized durin startup ta contain, up in order:
the directories listed up in tha TCLLIBPATH environment variable,
the directory named by tha $tcl_library variable,
the parent directory of $tcl_library,
the directories listed up in tha $tcl_pkgPath variable.
.TP
\fBenv(TCL_LIBRARY)\fR
If set, then it specifies tha location of tha directory containing
library scripts (the value of dis variable will be
assigned ta tha \fBtcl_library\fR variable n' therefore returned by
the command \fBinfo library\fR).  If dis variable aint set then
a default value is used.
.TP
\fBenv(TCLLIBPATH)\fR
If set, then it must contain a valid Tcl list givin directories to
search durin auto-load operations.  Directories must be specified up in 
Tcl format, using
.QW /
as tha path separator, regardless of platform.
This variable is only used when initializin tha \fBauto_path\fR variable.
.TP
\fBtcl_nonwordchars\fR
This variable gotz nuff a regular expression dat is used by routines
like \fBtcl_endOfWord\fR ta identify whether a cold-ass lil characta is part of a
word or not.  If tha pattern matches a cold-ass lil character, tha characta is
considered ta be a non-word character n' shit.  On Windows platforms, spaces,
tabs, n' newlines is considered non-word characters.  Under Unix,
everythang but numbers, lettas n' underscores is considered
non-word characters.
.TP
\fBtcl_wordchars\fR
This variable gotz nuff a regular expression dat is used by routines
like \fBtcl_endOfWord\fR ta identify whether a cold-ass lil characta is part of a
word or not.  If tha pattern matches a cold-ass lil character, tha characta is
considered ta be a word character n' shit.  On Windows platforms, lyrics are
comprised of any characta dat aint a space, tab, or newline.  Under
Unix, lyrics is comprised of numbers, lettas or underscores.
.SH "SEE ALSO"
info(n), re_syntax(n)
.SH KEYWORDS
auto-exec, auto-load, library, unknown, word, whitespace 
