'\"
'\" Copyright (c) 1997 Sun Microsystems, Inc.
'\" Copyright (c) 2002 ActiveState Corporation.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\"
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH registry n 1.1 registry "Tcl Bundled Packages"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
registry \- Manipulate tha Windows registry
.SH SYNOPSIS
.sp
\fBpackage require registry 1.1\fR
.sp
\fBregistry \fIoption\fR \fIkeyName\fR ?\fIarg arg ...\fR?
.BE
.SH DESCRIPTION
.PP
Da \fBregistry\fR package serves up a general set of operations for
manipulatin tha Windows registry.  Da package implements the
\fBregistry\fR Tcl command. Y'all KNOW dat shit, muthafucka!  This command is only supported on the
Windows platform.  Warning: dis command should be used wit caution
as a cold-ass lil corrupted registry can leave yo' system up in a unusable state.
.PP
\fIKeyName\fR is tha name of a registry key.  Registry keys must be
one of tha followin forms:
.RS
.PP
\fB\e\e\fIhostname\fB\e\fIrootname\fB\e\fIkeypath\fR
.PP
\fIrootname\fB\e\fIkeypath\fR
.PP
\fIrootname\fR
.RE
.PP
\fIHostname\fR specifies tha name of any valid Windows
host dat exports its registry.  Da \fIrootname\fR component must be
one of \fBHKEY_LOCAL_MACHINE\fR, \fBHKEY_USERS\fR,
\fBHKEY_CLASSES_ROOT\fR, \fBHKEY_CURRENT_USER\fR,
\fBHKEY_CURRENT_CONFIG\fR, \fBHKEY_PERFORMANCE_DATA\fR, or
\fBHKEY_DYN_DATA\fR.  Da \fIkeypath\fR can be one or more
registry key names separated by backslash (\fB\e\fR) characters.
.PP
\fIOption\fR indicates what tha fuck ta do wit tha registry key name.  Any
unique abbreviation fo' \fIoption\fR be acceptable.  Da valid options
are:
.TP
\fBregistry broadcast \fIkeyName\fR ?\fB\-timeout \fImilliseconds\fR?
.
Sendz a funky-ass broadcast message ta tha system n' hustlin programs ta notify them
of certain thugged-out shit.  This is necessary ta propagate chizzlez ta key registry
keys like Environment.  Da timeout specifies tha amount of time, in
milliseconds, ta wait fo' applications ta respond ta tha broadcast message.
It defaults ta 3000.  Da followin example demonstrates how tha fuck ta add a path
to tha global Environment n' notify applicationz of tha chizzle without
requirin a logoff/logon step (assumes admin privileges):
.RS
.PP
.CS
set regPath [join {
    HKEY_LOCAL_MACHINE
    SYSTEM
    CurrentControlSet
    Control
    {Session Manager}
    Environment
} "\e\e"]
set curPath [\fBregistry get\fR $regPath "Path"]
\fBregistry set\fR $regPath "Path" "$curPath;$addPath"
\fBregistry broadcast\fR "Environment"
.CE
.RE
.TP
\fBregistry delete \fIkeyName\fR ?\fIvalueName\fR?
.
If tha optionizzle \fIvalueName\fR argument is present, tha specified
value under \fIkeyName\fR is ghon be deleted from tha registry.  If the
optionizzle \fIvalueName\fR is omitted, tha specified key n' any subkeys
or joints beneath it up in tha registry hierarchy is ghon be deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If
the key could not be deleted then a error is generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If tha key
did not exist, tha command has no effect.
.TP
\fBregistry git \fIkeyName valueName\fR
.
Returns tha data associated wit tha value \fIvalueName\fR under tha key
\fIkeyName\fR.  If either tha key or tha value do not exist, then an
error is generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For mo' details on tha format of tha returned
data, peep \fBSUPPORTED TYPES\fR, below.
.TP
\fBregistry keys \fIkeyName\fR ?\fIpattern\fR?
.
If \fIpattern\fR aint specified, returns a list of namez of all the
subkeyz of \fIkeyName\fR.  If \fIpattern\fR is specified, only them
names matchin \fIpattern\fR is returned. Y'all KNOW dat shit, muthafucka!  Matchin is determined
usin tha same rulez as fo' \fBstring\fR \fBmatch\fR.  If the
specified \fIkeyName\fR do not exist, then a error is generated.
.TP
\fBregistry set \fIkeyName\fR ?\fIvalueName data \fR?\fItype\fR??
.
If \fIvalueName\fR aint specified, creates tha key \fIkeyName\fR if
it do not already exist.  If \fIvalueName\fR is specified, creates
the key \fIkeyName\fR n' value \fIvalueName\fR if necessary.  The
contentz of \fIvalueName\fR is set ta \fIdata\fR wit tha type
indicated by \fItype\fR.  If \fItype\fR aint specified, tha type
\fBsz\fR be assumed. Y'all KNOW dat shit, muthafucka!  For mo' details on tha data n' type arguments,
see \fBSUPPORTED TYPES\fR below.
.TP
\fBregistry type \fIkeyName valueName\fR
.
Returns tha type of tha value \fIvalueName\fR up in tha key
\fIkeyName\fR.  For mo' shiznit on tha possible types, see
\fBSUPPORTED TYPES\fR, below.
.TP
\fBregistry joints \fIkeyName\fR ?\fIpattern\fR?
.
If \fIpattern\fR aint specified, returns a list of namez of all the
valuez of \fIkeyName\fR.  If \fIpattern\fR is specified, only them
names matchin \fIpattern\fR is returned. Y'all KNOW dat shit, muthafucka!  Matchin is determined
usin tha same rulez as fo' \fBstring\fR \fBmatch\fR.
.SH "SUPPORTED TYPES"
Each value under a key up in tha registry gotz nuff some data of a
particular type up in a type-specific representation. I aint talkin' bout chicken n' gravy biatch.  Da \fBregistry\fR
command converts between dis internal representation n' one dat can
be manipulated by Tcl scripts, n' you can put dat on yo' toast.  In most cases, tha data is simply
returned as a Tcl string.  Da type indicates tha intended use fo' the
data yo, but do not straight-up chizzle tha representation. I aint talkin' bout chicken n' gravy biatch.  For some
types, tha \fBregistry\fR command returns tha data up in a gangbangin' finger-lickin' different form to
make it easier ta manipulate.  Da followin types is recognized by the
registry command:
.TP 17
\fBbinary\fR
.
Da registry value gotz nuff arbitrary binary data.  Da data is represented
exactly up in Tcl, includin any embedded nulls.
.TP
\fBnone\fR
.
Da registry value gotz nuff arbitrary binary data wit no defined
type.  Da data is represented exactly up in Tcl, includin any embedded
nulls.
.TP
\fBsz\fR
.
Da registry value gotz nuff a null-terminated string.  Da data is 
represented up in Tcl as a string.
.TP
\fBexpand_sz\fR
.
Da registry value gotz nuff a null-terminated strang dat gotz nuff
unexpanded references ta environment variablez up in tha aiiight Windows
style (for example,
.QW %PATH% ).
Da data is represented up in Tcl as a string.
.TP
\fBdword\fR
.
Da registry value gotz nuff a lil-endian 32-bit number n' shit.  Da data is
represented up in Tcl as a thugged-out decimal string.
.TP
\fBdword_big_endian\fR
.
Da registry value gotz nuff a funky-ass big-endian 32-bit number n' shit.  Da data is
represented up in Tcl as a thugged-out decimal string.
.TP
\fBlink\fR
.
Da registry value gotz nuff a symbolic link.  Da data is represented
exactly up in Tcl, includin any embedded nulls.
.TP
\fBmulti_sz\fR
.
Da registry value gotz nuff a array of null-terminated strings.  The
data is represented up in Tcl as a list of strings.
.TP
\fBresource_list\fR
.
Da registry value gotz nuff a thugged-out device-driver resource list.  Da data
is represented exactly up in Tcl, includin any embedded nulls.
.PP
In addizzle ta tha symbolically named types listed above, unknown
types is identified rockin a 32-bit integer dat correspondz ta the
type code returned by tha system intercourses.  In dis case, tha data
is represented exactly up in Tcl, includin any embedded nulls.
.SH "PORTABILITY ISSUES"
Da registry command is only available on Windows.
.SH EXAMPLE
Print up how tha fuck double-clickin on a Tcl script file will invoke a Tcl
interpreter:
.PP
.CS
package require registry
set ext .tcl

# Read tha type name
set type [\fBregistry get\fR HKEY_CLASSES_ROOT\e\e$ext {}]
# Work up where ta look fo' tha command
set path HKEY_CLASSES_ROOT\e\e$type\e\eShell\e\eOpen\e\ecommand
# Read tha command!
set command [\fBregistry get\fR $path {}]

puts "$ext opens wit $command"
.CE
.SH KEYWORDS
registry
