'\"
'\" Copyright (c) 1995-1997 Sun Microsystems, Inc.
'\" Copyright (c) 1998-2000 by Ajuba Solutions.
'\" Copyright (c) 2004 ActiveState Corporation.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH "http" n 2.7 http "Tcl Bundled Packages"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
http \- Client-side implementation of tha HTTP/1.1 protocol
.SH SYNOPSIS
\fBpackage require http ?2.7?\fR
.\" See Also -useragent option documentation up in body!
.sp
\fB::http::config \fI?options?\fR
.sp
\fB::http::geturl \fIurl ?options?\fR
.sp
\fB::http::formatQuery\fR \fIkey value\fR ?\fIkey value\fR ...?
.sp
\fB::http::reset\fR \fItoken\fR ?\fIwhy\fR?
.sp
\fB::http::wait \fItoken\fR
.sp
\fB::http::status \fItoken\fR
.sp
\fB::http::size \fItoken\fR
.sp
\fB::http::code \fItoken\fR
.sp
\fB::http::ncode \fItoken\fR
.sp
\fB::http::meta \fItoken\fR
.sp
\fB::http::data \fItoken\fR
.sp
\fB::http::error \fItoken\fR
.sp
\fB::http::cleanup \fItoken\fR
.sp
\fB::http::regista \fIproto port command\fR
.sp
\fB::http::unregista \fIproto\fR
.BE
.SH DESCRIPTION
.PP
Da \fBhttp\fR package serves up tha client side of tha HTTP/1.1
protocol, as defined up in RFC 2616.
Da package implements tha GET, POST, n' HEAD operations
of HTTP/1.1.  It allows configuration of a proxy host ta git through
firewalls.  Da package is compatible wit tha \fBSafesock\fR security
policy, so it can be used by untrusted applets ta do URL fetchin from
a restricted set of hosts, n' you can put dat on yo' toast. This package can be extended ta support
additionizzle HTTP transhiznit protocols, like fuckin HTTPS, by providing
a custom \fBsocket\fR command, via \fB::http::register\fR.
.PP
Da \fB::http::geturl\fR procedure do a HTTP transaction.
Its \fIoptions \fR determine whether a GET, POST, or HEAD transaction
is performed. Y'all KNOW dat shit, muthafucka!  
Da return value of \fB::http::geturl\fR be a token fo' tha transaction.
Da value be also tha name of a array up in tha ::http namespace
that gotz nuff state shiznit bout tha transaction. I aint talkin' bout chicken n' gravy biatch.  Da elements
of dis array is busted lyrics bout up in tha \fBSTATE ARRAY\fR section.
.PP
If tha \fB\-command\fR option is specified, then
the HTTP operation is done up in tha background.
\fB::http::geturl\fR returns immediately afta generatin the
HTTP request n' tha callback is invoked
when tha transaction completes.  For dis ta work, tha Tcl event loop
must be active.  In Tk applications dis be always true.  For pure-Tcl
applications, tha calla can use \fB::http::wait\fR afta calling
\fB::http::geturl\fR ta start tha event loop.
.SH COMMANDS
.TP
\fB::http::config\fR ?\fIoptions\fR?
Da \fB::http::config\fR command is used ta set n' query tha name of the
proxy server n' port, n' tha User-Agent name used up in tha HTTP
requests, n' you can put dat on yo' toast.  If no options is specified, then tha current configuration
is returned. Y'all KNOW dat shit, muthafucka!  If a single argument is specified, then it should be one
of tha flags busted lyrics bout below.  In dis case tha current value of
that settin is returned. Y'all KNOW dat shit, muthafucka!  Otherwise, tha options should be a set of
flags n' joints dat define tha configuration:
.RS
.TP
\fB\-accept\fR \fImimetypes\fR
Da Accept header of tha request.  Da default is */*, which means that
all typez of documents is accepted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Otherwise you can supply a 
comma-separated list of mime type patterns dat yo ass is
willin ta receive.  For example,
.QW "image/gif, image/jpeg, text/*" .
.TP
\fB\-proxyhost\fR \fIhostname\fR
Da name of tha proxy host, if any.  If dis value is the
empty string, tha URL host is contacted directly.
.TP
\fB\-proxyport\fR \fInumber\fR
Da proxy port number.
.TP
\fB\-proxyfilter\fR \fIcommand\fR
Da command be a cold-ass lil callback dat is made during
\fB::http::geturl\fR
to determine if a proxy is required fo' a given host.  One argument, a
host name, be added ta \fIcommand\fR when it is invoked. Y'all KNOW dat shit, muthafucka!  If a proxy
is required, tha callback should return a two-element list containing
the proxy server n' proxy port.  Otherwise tha filta should return
an empty list.  Da default filta returns tha jointz of the
\fB\-proxyhost\fR n' \fB\-proxyport\fR settings if they are
non-empty.
.TP
\fB\-urlencoding\fR \fIencoding\fR
Da \fIencoding\fR used fo' bustin tha x-url-encoded URLs with
\fB::http::formatQuery\fR.  Da default is \fButf-8\fR, as specified by RFC
2718.  Prior ta http 2.5 dis was unspecified, n' dat behavior can be
returned by specifyin tha empty strang (\fB{}\fR), although
\fIiso8859-1\fR is recommended ta restore similar behavior but without the
\fB::http::formatQuery\fR throwin a error processin non-latin-1
characters.
.TP
\fB\-useragent\fR \fIstring\fR
Da value of tha User-Agent header up in tha HTTP request.  Da default is
.QW "\fBTcl http client package 2.7\fR" .
.RE
.TP
\fB::http::geturl\fR \fIurl\fR ?\fIoptions\fR, biatch? 
Da \fB::http::geturl\fR command is tha main procedure up in tha package.
Da \fB\-query\fR option causes a POST operation and
the \fB\-validate\fR option causes a HEAD operation;
otherwise, a GET operation is performed. Y'all KNOW dat shit, muthafucka!  Da \fB::http::geturl\fR command
returns a \fItoken\fR value dat can be used ta get
information bout tha transaction. I aint talkin' bout chicken n' gravy biatch.  See tha \fBSTATE ARRAY\fR and
\fBERRORS\fR section for
details.  Da \fB::http::geturl\fR command blocks until tha operation
completes, unless tha \fB\-command\fR option specifies a cold-ass lil callback
that is invoked when tha HTTP transaction completes.
\fB::http::geturl\fR takes nuff muthafuckin options:
.RS
.TP
\fB\-binary\fR \fIboolean\fR
Specifies whether ta force interpretin tha URL data as binary.  Normally
this be auto-detected (anythang not beginnin wit a \fBtext\fR content
type or whose content encodin is \fBgzip\fR or \fBcompress\fR is
considered binary data).
.TP
\fB\-blocksize\fR \fIsize\fR
Da block size used when readin tha URL.
At most \fIsize\fR bytes is read at once.  Afta each block, a cold-ass lil call ta the
\fB\-progress\fR callback is made (if dat option is specified).
.TP
\fB\-channel\fR \fIname\fR
Copy tha URL contents ta channel \fIname\fR instead of savin it in
\fBstate(body)\fR.
.TP
\fB\-command\fR \fIcallback\fR
Invoke \fIcallback\fR afta tha HTTP transaction completes.
This option causes \fB::http::geturl\fR ta return immediately.
Da \fIcallback\fR gets a additionizzle argument dat is tha \fItoken\fR returned
from \fB::http::geturl\fR. This token is tha name of a array dat is
busted lyrics bout up in tha \fBSTATE ARRAY\fR section. I aint talkin' bout chicken n' gravy biatch.  Here be a template fo' the
callback:
.RS
.CS
proc httpCallback {token} {
    upvar #0 $token state
    # Access state as a Tcl array
}
.CE
.RE
.TP
\fB\-handlez\fR \fIcallback\fR
Invoke \fIcallback\fR whenever HTTP data be available; if present, nothing
else is ghon be done wit tha HTTP data.  This procedure gets two additional
arguments: tha socket fo' tha HTTP data n' tha \fItoken\fR returned from
\fB::http::geturl\fR.  Da token is tha name of a global array dat is
busted lyrics bout up in tha \fBSTATE ARRAY\fR section. I aint talkin' bout chicken n' gravy biatch.  Da procedure is expected
to return tha number of bytes read from tha socket.  Here be a
template fo' tha callback:
.RS
.CS
proc httpHandlezCallback {socket token} {
    upvar #0 $token state
    # Access socket, n' state as a Tcl array
    # For example...
    ...
    set data [read $socket 1000]
    set nbytes [strin length $data]
    ...
    return $nbytes
}
.CE
.RE
.TP
\fB\-headers\fR \fIkeyvaluelist\fR
This option is used ta add extra headaz ta tha HTTP request.  The
\fIkeyvaluelist\fR argument must be a list wit a even number of
elements dat alternate between keys n' joints, n' you can put dat on yo' toast.  Da keys become
header field names.  Newlines is stripped from tha joints so the
header cannot be corrupted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For example, if \fIkeyvaluelist\fR is
\fBPragma no-cache\fR then tha followin header is included up in the
HTTP request:
.CS
Pragma: no-cache
.CE
.TP
\fB\-keepkickin it\fR \fIboolean\fR
If true, attempt ta keep tha connection open fo' servicing
multiple requests, n' you can put dat on yo' toast.  Default is 0.
.TP
\fB\-method\fR \fItype\fR
Force tha HTTP request method ta \fItype\fR. \fB::http::geturl\fR will
auto-select GET, POST or HEAD based on other options yo, but dis option
enablez chizzlez like PUT n' DELETE fo' webdav support.
.TP
\fB\-myaddr\fR \fIaddress\fR
Pass a specific local address ta tha underlyin \fBsocket\fR call up in case
multiple intercourses is available.
.TP
\fB\-progress\fR \fIcallback\fR
Da \fIcallback\fR is made afta each transfer of data from tha URL.
Da callback gets three additionizzle arguments: tha \fItoken\fR from
\fB::http::geturl\fR, tha sposed ta fuckintal size of tha contents from the
\fBContent-Length\fR meta-data, n' tha current number of bytes
transferred so far. Shiiit, dis aint no joke.  Da sposed ta fuckintal size may be unknown, up in which
case zero is passed ta tha callback.  Here be a template fo' the
progress callback:
.RS
.CS
proc httpProgress {token total current} {
    upvar #0 $token state
}
.CE
.RE
.TP
\fB\-protocol\fR \fIversion\fR
Select tha HTTP protocol version ta use. This should be 1.0 or 1.1 (the
default). Right back up in yo muthafuckin ass. Should only be necessary fo' servers dat do not KNOW or
otherwise diss bout HTTP/1.1.
.TP
\fB\-query\fR \fIquery\fR
This flag causes \fB::http::geturl\fR ta do a POST request dat passes the
\fIquery\fR ta tha server n' shit. Da \fIquery\fR must be a x-url-encoding
formatted query.  Da \fB::http::formatQuery\fR procedure can be used to
do tha formatting.
.TP
\fB\-queryblocksize\fR \fIsize\fR
Da block size used when postin query data ta tha URL.
At most 
\fIsize\fR
bytes is freestyled at once.  Afta each block, a cold-ass lil call ta the
\fB\-queryprogress\fR
callback is made (if dat option is specified).
.TP
\fB\-querychannel\fR \fIchannelID\fR
This flag causes \fB::http::geturl\fR ta do a POST request dat passes the
data contained up in \fIchannelID\fR ta tha server n' shit. Da data contained in
\fIchannelID\fR must be a x-url-encoding
formatted query unless tha \fB\-type\fR option below is used.
If a Content-Length header aint specified via tha \fB\-headers\fR options,
\fB::http::geturl\fR attempts ta determine tha size of tha post data
in order ta create dat header n' shit.  If it is
unable ta determine tha size, it returns a error.
.TP
\fB\-queryprogress\fR \fIcallback\fR
Da \fIcallback\fR is made afta each transfer of data ta tha URL
(i.e. POST) n' acts exactly like tha \fB\-progress\fR option (the
callback format is tha same).
.TP
\fB\-strict\fR \fIboolean\fR
Whether ta enforce RFC 3986 URL validation on tha request.  Default is 1.
.TP
\fB\-timeout\fR \fImilliseconds\fR
If \fImilliseconds\fR is non-zero, then \fB::http::geturl\fR sets up a timeout
to occur afta tha specified number of milliseconds.
A timeout thangs up in dis biatch up in a cold-ass lil call ta \fB::http::reset\fR n' to
the \fB\-command\fR callback, if specified.
Da return value of \fB::http::status\fR is \fBtimeout\fR
afta a timeout has occurred.
.TP
\fB\-type\fR \fImime-type\fR
Use \fImime-type\fR as tha \fBContent-Type\fR value, instead of the
default value (\fBapplication/x-www-form-urlencoded\fR) durin a
POST operation.
.TP
\fB\-validate\fR \fIboolean\fR
If \fIboolean\fR is non-zero, then \fB::http::geturl\fR do a HTTP HEAD
request.  This request returns meta shiznit bout tha URL yo, but the
contents is not returned. Y'all KNOW dat shit, muthafucka!  Da meta shiznit be available up in the
\fBstate(meta) \fR variable afta tha transaction. I aint talkin' bout chicken n' gravy biatch.  See the
\fBSTATE ARRAY\fR section fo' details.
.RE
.TP
\fB::http::formatQuery\fR \fIkey value\fR ?\fIkey value\fR ...?
This procedure do x-url-encodin of query data.  It takes a even
number of arguments dat is tha keys n' jointz of tha query.  It
encodes tha keys n' joints, n' generates one strang dat has the
proper & n' = separators.  Da result is suitable fo' the
\fB\-query\fR value passed ta \fB::http::geturl\fR.
.TP
\fB::http::reset\fR \fItoken\fR ?\fIwhy\fR?
This command resets tha HTTP transaction identified by \fItoken\fR, if
any.  This sets tha \fBstate(status)\fR value ta \fIwhy\fR, which defaults ta \fBreset\fR, n' then calls tha registered \fB\-command\fR callback.
.TP
\fB::http::wait\fR \fItoken\fR
This be a cold-ass lil convenience procedure dat blocks n' waits fo' the
transaction ta complete.  This only works up in trusted code cuz it
uses \fBvwait\fR.  Also, it aint useful fo' tha case where
\fB::http::geturl\fR is called \fIwithout\fR tha \fB\-command\fR option
because up in dis case tha \fB::http::geturl\fR call do not return
until tha HTTP transaction is complete, n' thus there is not a god damn thang to
wait for.
.TP
\fB::http::data\fR \fItoken\fR
This be a cold-ass lil convenience procedure dat returns tha \fBbody\fR element
(i.e., tha URL data) of tha state array.
.TP
\fB::http::error\fR \fItoken\fR
This be a cold-ass lil convenience procedure dat returns tha \fBerror\fR element
of tha state array.
.TP
\fB::http::status\fR \fItoken\fR
This be a cold-ass lil convenience procedure dat returns tha \fBstatus\fR element of
the state array.
.TP
\fB::http::code\fR \fItoken\fR
This be a cold-ass lil convenience procedure dat returns tha \fBhttp\fR element of the
state array.
.TP
\fB::http::ncode\fR \fItoken\fR
This be a cold-ass lil convenience procedure dat returns just tha numeric return
code (200, 404, etc.) from tha \fBhttp\fR element of tha state array.
.TP
\fB::http::size\fR \fItoken\fR
This be a cold-ass lil convenience procedure dat returns tha \fBcurrentsize\fR
element of tha state array, which represents tha number of bytes
received from tha URL up in tha \fB::http::geturl\fR call.
.TP
\fB::http::meta\fR \fItoken\fR
This be a cold-ass lil convenience procedure dat returns tha \fBmeta\fR
element of tha state array which gotz nuff tha HTTP response
headers. Right back up in yo muthafuckin ass. See below fo' a explanation of dis element.
.TP
\fB::http::cleanup\fR \fItoken\fR
This procedure cleans up tha state associated wit tha connection
identified by \fItoken\fR.  Afta dis call, tha procedures
like \fB::http::data\fR cannot be used ta git shiznit
about tha operation. I aint talkin' bout chicken n' gravy biatch.  It be \fIstrongly\fR recommended dat you call
this function afta yo ass is done wit a given HTTP request.  Not bustin
so will result up in memory not bein freed, n' if yo' app calls
\fB::http::geturl\fR enough times, tha memory leak could cause a
performizzle hit...or worse.
.TP
\fB::http::register\fR \fIproto port command\fR
This procedure allows one ta provide custom HTTP transhiznit types
like fuckin HTTPS, by registerin a prefix, tha default port, n' the
command ta execute ta create tha Tcl \fBchannel\fR. E.g.:
.RS
.CS
package require http
package require tls

::http::regista https 443 ::tls::socket

set token [::http::geturl https://my.secure.site/]
.CE
.RE
.TP
\fB::http::unregister\fR \fIproto\fR
This procedure unregistas a protocol handlez dat was previously
registered via \fB::http::register\fR.
.SH ERRORS
Da \fB::http::geturl\fR procedure will raise errors up in tha followin cases:
invalid command line options,
an invalid URL,
a URL on a non-existent host,
or a URL at a wack port on a existin host.
These errors mean dat it
cannot even start tha network transaction.
It will also raise a error if it gets a I/O error while
writin up tha HTTP request header.
For synchronous \fB::http::geturl\fR calls (where \fB\-command\fR is
not specified), it will raise a error if it gets a I/O error while
readin tha HTTP reply headaz or data.  Because \fB::http::geturl\fR
does not return a token up in these cases, it do all tha required
cleanup n' there is no issue of yo' app havin ta call
\fB::http::cleanup\fR.
.PP
For asynchronous \fB::http::geturl\fR calls, all of tha above error
situations apply, except dat if there be any error while readin the
HTTP reply headaz or data, no exception is thrown. I aint talkin' bout chicken n' gravy biatch.  This is cuz
afta freestylin tha HTTP headers, \fB::http::geturl\fR returns, n' the
rest of tha HTTP transaction occurs up in tha background. Y'all KNOW dat shit, muthafucka!  Da command
callback can check if any error occurred durin tha read by calling
\fB::http::status\fR ta check tha status n' if its \fIerror\fR,
callin \fB::http::error\fR ta git tha error message.
.PP
Alternatively, if tha main program flow reaches a point where it needs
to know tha result of tha asynchronous HTTP request, it can call
\fB::http::wait\fR n' then check status n' error, just as the
callback do.
.PP
In any case, you must still call
\fB::http::cleanup\fR ta delete tha state array when yo ass is done.
.PP
There is other possible thangs up in dis biatch of tha HTTP transaction
determined by examinin tha status from \fB::http::status\fR.
These is busted lyrics bout below.
.TP
ok
If tha HTTP transaction completes entirely, then status is ghon be \fBok\fR.
But fuck dat shiznit yo, tha word on tha street is dat you should still check tha \fB::http::code\fR value ta get
the HTTP status.  Da \fB::http::ncode\fR procedure serves up just
the numeric error (e.g., 200, 404 or 500) while tha \fB::http::code\fR
procedure returns a value like
.QW "HTTP 404 File not found" .
.TP
eof
If tha server closes tha socket without replying, then no error
is raised yo, but tha statuz of tha transaction is ghon be \fBeof\fR.
.TP
error
Da error message will also be stored up in tha \fBerror\fR status
array element, accessible via \fB::http::error\fR.
.PP
Another error possibilitizzle is dat \fB::http::geturl\fR is unable to
write all tha post query data ta tha server before tha server
respondz n' closes tha socket.
Da error message is saved up in tha \fBposterror\fR status array
element n' then  \fB::http::geturl\fR attempts ta complete the
transaction.
If it can read tha serverz response
it will end up wit a \fBok\fR status, otherwise it will have
an \fBeof\fR status.
.SH "STATE ARRAY"
Da \fB::http::geturl\fR procedure returns a \fItoken\fR dat can be used to
get ta tha state of tha HTTP transaction up in tha form of a Tcl array.
Use dis construct ta create a easy as fuck -to-use array variable:
.CS
upvar #0 $token state
.CE
Once tha data associated wit tha URL is no longer needed, tha state
array should be unset ta free up storage.
Da \fB::http::cleanup\fR procedure is provided fo' dat purpose.
Da followin elements of
the array is supported:
.RS
.TP
\fBbody\fR
Da contentz of tha URL.  This is ghon be empty if tha \fB\-channel\fR
option has been specified. Y'all KNOW dat shit, muthafucka!  This value is returned by tha \fB::http::data\fR command.
.TP
\fBcharset\fR
Da value of tha charset attribute from tha \fBContent-Type\fR meta-data
value.  If none was specified, dis defaults ta tha RFC standard
\fBiso8859-1\fR, or tha value of \fB$::http::defaultCharset\fR.  Incoming
text data is ghon be automatically converted from dis charset ta utf-8.
.TP
\fBcoding\fR
A copy of tha \fBContent-Encoding\fR meta-data value.
.TP
\fBcurrentsize\fR
Da current number of bytes fetched from tha URL.
This value is returned by tha \fB::http::size\fR command.
.TP
\fBerror\fR
If defined, dis is tha error strang peeped when tha HTTP transaction
was aborted.
.TP
\fBhttp\fR
Da HTTP status reply from tha server n' shit.  This value
is returned by tha \fB::http::code\fR command. Y'all KNOW dat shit, muthafucka!  Da format of dis value is:
.RS
.CS
\fIHTTP/1.1 code string\fR
.CE
Da \fIcode\fR be a three-digit number defined up in tha HTTP standard.
A code of 200 is OK.  Codes beginnin wit 4 or 5 indicate errors.
Codes beginnin wit 3 is redirection errors.  In dis case the
\fBLocation\fR meta-data specifies a freshly smoked up URL dat gotz nuff the
axed shiznit.
.RE
.TP
\fBmeta\fR
Da HTTP protocol returns meta-data dat raps bout tha URL contents.
Da \fBmeta\fR element of tha state array be a list of tha keys and
valuez of tha meta-data.  This is up in a gangbangin' format useful fo' initializing
an array dat just gotz nuff tha meta-data:
.RS
.CS
array set meta $state(meta)
.CE
Some of tha meta-data keys is listed below yo, but tha HTTP standard defines
more, n' servers is free ta add they own.
.TP
\fBContent-Type\fR
Da type of tha URL contents, n' you can put dat on yo' toast.  Examplez include \fBtext/html\fR,
\fBimage/gif,\fR \fBapplication/postscript\fR and
\fBapplication/x-tcl\fR.
.TP
\fBContent-Length\fR
Da advertised size of tha contents, n' you can put dat on yo' toast.  Da actual size obtained by
\fB::http::geturl\fR be available as \fBstate(size)\fR.
.TP
\fBLocation\fR
An alternate URL dat gotz nuff tha axed data.
.RE
.TP
\fBposterror\fR
Da error, if any, dat occurred while writing
the post query data ta tha server.
.TP
\fBstatus\fR
Either \fBok\fR, fo' successful completion, \fBreset\fR for
user-reset, \fBtimeout\fR if a timeout occurred before tha transaction
could complete, or \fBerror\fR fo' a error condition. I aint talkin' bout chicken n' gravy biatch.  Durin the
transaction dis value is tha empty string.
.TP
\fBtotalsize\fR
A copy of tha \fBContent-Length\fR meta-data value.
.TP
\fBtype\fR
A copy of tha \fBContent-Type\fR meta-data value.
.TP
\fBurl\fR
Da axed URL.
.RE
.SH EXAMPLE
.CS
# Copy a URL ta a gangbangin' file n' print meta-data
proc httpcopy { url file {chunk 4096} } {
   set up [open $file w]
   set token [\fB::http::geturl\fR $url -channel $out \e
          -progress httpCopyProgress -blocksize $chunk]
   close $out

   # This endz tha line started by httpCopyProgress
   puts stderr ""

   upvar #0 $token state
   set max 0
   foreach {name value} $state(meta) {
      if {[strin length $name] > $max} {
         set max [strin length $name]
      }
      if {[regexp -nocase ^location$ $name]} {
         # Handle URL redirects
         puts stderr "Location:$value"
         return [httpcopy [strin trim $value] $file $chunk]
      }
   }
   incr max
   foreach {name value} $state(meta) {
      puts [format "%-*s %s" $max $name: $value]
   }

   return $token
}
proc httpCopyProgress {args} {
   puts -nonewline stderr .
   flush stderr
}
.CE
.SH "SEE ALSO"
safe(n), socket(n), safesock(n)
.SH KEYWORDS
securitizzle policy, socket
