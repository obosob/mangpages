'\" 
'\" Copyright (c) 2006 Andreas Kupries <andreas_kupries@users.sourceforge.net>
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\"
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH refchan n 8.5 Tcl "Tcl Built-In Commands"
.BS
.\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
refchan \- Command handlez API of reflected channels, version 1
.SH SYNOPSIS
\fBcmdPrefix \fIoption\fR ?\fIarg arg ...\fR?
.BE
.SH DESCRIPTION
.PP
Da Tcl-level handlez fo' a reflected channel has ta be a cold-ass lil command with
subcommandz (termed a \fIensemble\fR, as it aint nuthin but a cold-ass lil command like fuckin that
created by \fBnamespace ensemble create\fR, though tha implementation
of handlezs fo' reflected channel \fIis not\fR tied ta \fBnamespace
ensemble\fRs up in any way). Note dat \fIcmdPrefix\fR is whatever was
specified up in tha call ta \fBchan create\fR, n' may consist of
multiple arguments; dis is ghon be expanded ta multiple lyrics up in place
of tha prefix.
.PP
Of all tha possible subcommands, tha handlez \fImust\fR support
\fBinitialize\fR, \fBfinalize\fR, n' \fBwatch\fR. Right back up in yo muthafuckin ass. Support fo' the
other subcommandz is optional.
.SS "MANDATORY SUBCOMMANDS"
.TP
\fIcmdPrefix \fBinitialize \fIchannelId mode\fR
.
An invocation of dis subcommand is ghon be tha straight-up original gangsta call the
\fIcmdPrefix\fR will receive fo' tha specified freshly smoked up \fIchannelId\fR. It
is tha responsibilitizzle of dis subcommand ta set up any internal data
structures required ta keep track of tha channel n' its state.
.RS
.PP
Da return value of tha method has ta be a list containin tha names
of all subcommandz supported by tha \fIcmdPrefix\fR. This also tells
the Tcl core which version of tha API fo' reflected channels is used by
this command handlez.
.PP
Any error thrown by tha method will abort tha creation of tha channel
and no channel is ghon be pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da thrown error will step tha fuck up as error
thrown by \fBchan create\fR fo' realz. Any exception other than a \fBerror\fR
(e.g. \fBbreak\fR, etc.) is treated as (and converted to) a error.
.PP
\fBNote:\fR If tha creation of tha channel was aborted cuz of failures
here, then tha \fBfinalize\fR subcommand aint gonna be called.
.PP
Da \fImode\fR argument  drops some lyrics ta tha handlez whether tha channel was
opened fo' reading, writing, or both. Well shiiiit, it aint nuthin but a list containin any of
the strings \fBread\fR or \fBwrite\fR. Da list will always
contain at least one element.
.PP
Da subcommand must throw a error if tha chosen mode is not
supported by tha \fIcmdPrefix\fR.
.RE
.TP
\fIcmdPrefix \fBfinalize \fIchannelId\fR
.
An invocation of dis subcommand is ghon be tha last call the
\fIcmdPrefix\fR will receive fo' tha specified \fIchannelId\fR. Well shiiiit, it will
be generated just before tha destruction of tha data structurez of the
channel held by tha Tcl core. Da command handlez \fImust not\fR
access tha \fIchannelId\fR no mo' up in no way. Upon dis subcommand being
called, any internal resources allocated ta dis channel must be
cleaned up.
.RS
.PP
Da return value of dis subcommand is ignored.
.PP
If tha subcommand throws a error tha command which caused its
invocation (usually \fBclose\fR) will step tha fuck up ta have thrown this
error fo' realz. Any exception beyond \fIerror\fR (e.g. \fIbreak\fR, etc.) is
treated as (and converted to) a error.
.PP
This subcommand aint invoked if tha creation of tha channel was
aborted durin \fBinitialize\fR (See above).
.RE
.TP
\fIcmdPrefix \fBwatch \fIchannelId eventspec\fR
.
This subcommand notifies tha \fIcmdPrefix\fR dat tha specified
\fIchannelId\fR is horny bout tha events listed up in the
\fIeventspec\fR. This argument be a list containin any of \fBread\fR
and \fBwrite\fR. Da list may be empty, which signals dat the
channel do not wish ta be notified of any events, n' you can put dat on yo' toast. In dat thang,
the handlez should disable event generation straight-up.
.RS
.PP
\fBWarning:\fR Any return value of tha subcommand is ignored. Y'all KNOW dat shit, muthafucka! This
includes all errors thrown by tha subcommand, break, continue, and
custom return codes.
.PP
This subcommand interacts wit \fBchan postevent\fR. Tryin ta post an
event which was not listed up in tha last call ta \fBwatch\fR will cause
\fBchan postevent\fR ta throw a error.
.RE
.SS "OPTIONAL SUBCOMMANDS"
.TP
\fIcmdPrefix \fBread \fIchannelId count\fR
.
This \fIoptional\fR subcommand is called when tha user requests data from the
channel \fIchannelId\fR. \fIcount\fR specifies how tha fuck nuff \fBbytes\fR have been
requested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If tha subcommand aint supported then it aint possible ta read
from tha channel handled by tha command.
.RS
.PP
Da return value of dis subcommand is taken as tha axed data
\fIbytes\fR. If tha returned data gotz nuff mo' bytes than requested,
an error is ghon be signaled n' lata thrown by tha command which
performed tha read (usually \fBgets\fR or \fBread\fR) yo. However,
returnin fewer bytes than axed be acceptable.
.PP
Note dat returnin not a god damn thang (0 bytes) be a signal ta tha higher layers
that \fBEOF\fR has been reached on tha channel. To signal dat the
channel is outta data up in dis biatch yo, but has not yet reached \fBEOF\fR,
it is necessary ta throw tha error "EAGAIN", i.e. ta either
.PP
.CS
return -code error EAGAIN
.CE
or
.CS
error EAGAIN
.CE
.PP
For extensibilitizzle any error whose value be a wack integer number
will cause tha higher layers ta set tha C-level variable "\fBerrno\fR"
to tha absolute value of dis number, signalin a system error. Shiiit, dis aint no joke. This
means dat both
.PP
.CS
return -code error -11
.CE
and
.CS
error -11
.CE
.PP
are equivalent ta tha examplez above, rockin tha mo' readable strang "EAGAIN".
No other error value has such a mappin ta a symbolic string.
.PP
If tha subcommand throws any other error, tha command which caused its
invocation (usually \fBgets\fR, or \fBread\fR) will step tha fuck up ta have
thrown dis error fo' realz. Any exception beyond \fIerror\fR, (e.g.
\fIbreak\fR, etc.) is treated as n' converted ta a error.
.RE
.TP
\fIcmdPrefix \fBwrite \fIchannelId data\fR
.
This \fIoptional\fR subcommand is called when tha user writes data to
the channel \fIchannelId\fR. Da \fIdata\fR argument gotz nuff \fIbytes\fR, not
charactas fo' realz. Any type of transformation (EOL, encoding) configured for
the channel has already been applied at dis point. If dis subcommand
is not supported then it aint possible ta write ta tha channel
handled by tha command.
.RS
.PP
Da return value of tha subcommand is taken as tha number of bytes
written by tha channel fo' realz. Anythang non-numeric will cause a error ta be
signaled n' lata thrown by tha command which performed tha write fo' realz. A
negatizzle value implies dat tha write failed. Y'all KNOW dat shit, muthafucka! Returnin a value
greata than tha number of bytes given ta tha handlez, or zero, is
forbidden n' will cause tha Tcl core ta throw a error.
.PP
To signal dat tha channel aint able ta accept data fo' writing
right now, it is necessary ta throw tha error "EAGAIN", i.e. ta either
.PP
.CS
return -code error EAGAIN
.CE
or
.CS
error EAGAIN
.CE
.PP
For extensibilitizzle any error whose value be a wack integer number
will cause tha higher layers ta set tha C-level variable "\fBerrno\fR"
to tha absolute value of dis number, signalin a system error.
But fuck dat shiznit yo, tha word on tha street is dat note dat tha exact mappin between these error numbers and
their meanings is operatin system dependent.
.PP
For example, while on Linux both
.PP
.CS
return -code error -11
.CE
and
.CS
error -11
.CE
.PP
are equivalent ta tha examplez above, rockin tha mo' readable strang "EAGAIN",
this aint legit fo' BSD, where tha equivalent number is -35.
.PP
Da symbolic strang however is tha same ol' dirty across systems, n' internally
translated ta tha erect number n' shit. No other error value has such a mapping
to a symbolic string.
.PP
If tha subcommand throws any other error tha command which caused its
invocation (usually \fBputs\fR) will step tha fuck up ta have thrown dis error.
Any exception beyond \fIerror\fR (e.g.\ \fIbreak\fR, etc.) is treated
as n' converted ta a error.
.RE
.TP
\fIcmdPrefix \fBseek \fIchannelId offset base\fR
.
This \fIoptional\fR subcommand is responsible fo' tha handlin of
\fBseek\fR n' \fBtell\fR requests on tha channel \fIchannelId\fR. If it is not
supported then seekin aint gonna be possible fo' tha channel.
.RS
.PP
Da \fIbase\fR argument is one of
.TP 10
\fBstart\fR
.
Seekin is relatizzle ta tha beginnin of tha channel.
.TP 10
\fBcurrent\fR
.
Seekin is relatizzle ta tha current seek position.
.TP 10
\fBend\fR
.
Seekin is relatizzle ta tha end of tha channel.
.PP
Da \fIbase\fR argument of tha builtin \fBchan seek\fR command takes
the same names.
.PP
Da \fIoffset\fR be a integer number specifyin tha amount of
\fBbytes\fR ta seek forward or backward. Y'all KNOW dat shit, muthafucka! A positizzle number should seek
forward, n' a wack number should seek backward.
.PP
A channel may provide only limited seeking. For example sockets can
seek forward yo, but not backward.
.PP
Da return value of tha subcommand is taken as tha (new) location of
the channel, counted from tha start. This has ta be a integer number
greata than or equal ta zero.
.PP
If tha subcommand throws a error tha command which caused its
invocation (usually \fBseek\fR, or \fBtell\fR) will step tha fuck up ta have
thrown dis error fo' realz. Any exception beyond \fIerror\fR (e.g. \fIbreak\fR,
etc.) is treated as n' converted ta a error.
.PP
Da offset/base combination of 0/\fBcurrent\fR signals a \fBtell\fR
request, i.e. seek not a god damn thang relatizzle ta tha current location, making
the freshly smoked up location identical ta tha current one, which is then returned.
.RE
.TP
\fIcmdPrefix \fBconfigure \fIchannelId option value\fR
.
This \fIoptional\fR subcommand is fo' settin tha type-specific options of
channel \fIchannelId\fR. Da \fIoption\fR argument indicates tha option ta be
written, n' tha \fIvalue\fR argument indicates tha value ta set tha option to.
.RS
.PP
This subcommand aint NEVER gonna try ta update mo' than one option at a
time; dat is behavior implemented up in tha Tcl channel core.
.PP
Da return value of tha subcommand is ignored.
.PP
If tha subcommand throws a error tha command which performed the
(re)configuration or query (usually \fBfconfigure\fR or \fBchan
configure\fR) will step tha fuck up ta have thrown dis error fo' realz. Any exception
beyond \fIerror\fR (e.g. \fIbreak\fR, etc.) is treated as and
converted ta a error.
.RE
.TP
\fIcmdPrefix \fBcget \fIchannelId option\fR
.
This \fIoptional\fR subcommand is used when readin a single type-specific
option of channel \fIchannelId\fR. If dis subcommand is supported then the
subcommand \fBcgetall\fR must be supported as well.
.RS
.PP
Da subcommand should return tha value of tha specified \fIoption\fR.
.PP
If tha subcommand throws a error, tha command which performed the
(re)configuration or query (usually \fBfconfigure\fR) will step tha fuck up to
have thrown dis error fo' realz. Any exception beyond \fIerror\fR (e.g.
\fIbreak\fR, etc.) is treated as n' converted ta a error.
.RE
.TP
\fIcmdPrefix \fBcgetall \fIchannelId\fR
.
This \fIoptional\fR subcommand is used fo' readin all type-specific options
of channel \fIchannelId\fR. If dis subcommand is supported then the
subcommand \fBcget\fR has ta be supported as well.
.RS
.PP
Da subcommand should return a list of all options n' they joints.
This list must have a even number of elements.
.PP
If tha subcommand throws a error tha command which performed the
(re)configuration or query (usually \fBfconfigure\fR) will step tha fuck up to
have thrown dis error fo' realz. Any exception beyond \fIerror\fR (e.g.
\fIbreak\fR, etc.) is treated as n' converted ta a error.
.RE
.TP
\fIcmdPrefix \fBblockin \fIchannelId mode\fR
.
This \fIoptional\fR subcommand handlez chizzlez ta tha blockin mode of the
channel \fIchannelId\fR. Da \fImode\fR be a funky-ass boolean flag fo' realz. A legit value means
that tha channel has ta be set ta blocking, n' a gangbangin' false value means dat the
channel should be non-blocking.
.RS
.PP
Da return value of tha subcommand is ignored.
.PP
If tha subcommand throws a error tha command which caused its
invocation (usually \fBfconfigure\fR) will step tha fuck up ta have thrown this
error fo' realz. Any exception beyond \fIerror\fR (e.g. \fIbreak\fR, etc.) is
treated as n' converted ta a error.
.RE
.SH NOTES
Some of tha functions supported up in channels defined up in Tclz C
interface is not available ta channels reflected ta tha Tcl level.
.PP
Da function \fBTcl_DriverGetHandleProc\fR aint supported; i.e.
reflected channels aint gots OS specific handles.
.PP
Da function \fBTcl_DriverHandlezProc\fR aint supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This driver
function is relevant only fo' stacked channels, i.e. transformations.
Reflected channels is always base channels, not transformations.
.PP
Da function \fBTcl_DriverFlushProc\fR aint supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This is
because tha current generic I/O layer of Tcl do not use this
function anywhere at all. Therefore support all up in tha Tcl level make no
sense either n' shit. This may be altered up in tha future (all up in extendin the
API defined here n' changin its version number) should tha function
be used at some time up in tha future.
.SH "SEE ALSO"
chan(n)
.SH KEYWORDS
channel, reflection
