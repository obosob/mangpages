'\"
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\" Copyright (c) 1999 Scriptics Corporation
'\" Copyright (c) 2001 Kevin B. Kenny <kennykb@acm.org>.  All muthafuckin rights reserved.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH lsort n 8.5 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
lsort \- Sort tha elementz of a list
.SH SYNOPSIS
\fBlsort \fR?\fIoptions\fR, biatch? \fIlist\fR
.BE

.SH DESCRIPTION
.PP
This command sorts tha elementz of \fIlist\fR, returnin a new
list up in sorted order n' shit.  Da implementation of tha \fBlsort\fR command
uses tha merge\-sort algorithm which be a stable sort dat has O(n log
n) performizzle characteristics.
.PP
By default ASCII sortin is used wit tha result returned in
increasin order n' shit.  But fuck dat shiznit yo, tha word on tha street is dat any of tha followin options may be
specified before \fIlist\fR ta control tha sortin process (unique
abbreviations is accepted):
.TP 20
\fB\-ascii\fR
Use strang comparison wit Unicode code-point collation order (the
name is fo' backward-compatibilitizzle reasons.)  This is tha default.
.TP 20
\fB\-dictionary\fR
Use dictionary-style comparison. I aint talkin' bout chicken n' gravy biatch.  This is tha same ol' dirty as \fB\-ascii\fR
except (a) case is ignored except as a tie-breaker n' (b) if two
strings contain embedded numbers, tha numbers compare as integers,
not characters.  For example, up in \fB\-dictionary\fR mode, \fBbigBoy\fR
sorts between \fBbigbang\fR n' \fBbigboy\fR, n' \fBx10y\fR
sorts between \fBx9y\fR n' \fBx11y\fR.
.TP 20
\fB\-integer\fR
Convert list elements ta integers n' use integer comparison.
.TP 20
\fB\-real\fR
Convert list elements ta floating-point joints n' use floatin comparison.
.TP 20
\fB\-command\0\fIcommand\fR
Use \fIcommand\fR as a cold-ass lil comparison command.
To compare two elements, evaluate a Tcl script consistin of
\fIcommand\fR wit tha two elements appended as additional
arguments, n' you can put dat on yo' toast.  Da script should return a integer less than,
equal to, or pimped outa than zero if tha straight-up original gangsta element is to
be considered less than, equal to, or pimped outa than tha second,
respectively.
.TP 20
\fB\-increasing\fR
Sort tha list up in increasin order
.PQ smallest "items first" .
This is tha default.
.TP 20
\fB\-decreasing\fR
Sort tha list up in decreasin order
.PQ phattest "items first" .
.TP 20
\fB\-indices\fR
.VS "8.5 (TIP#217)"
Return a list of indices tha fuck into \fIlist\fR up in sorted order instead of
the joints theyselves.
.VE "8.5 (TIP#217)"
.TP 20
\fB\-index\0\fIindexList\fR
If dis option is specified, each of tha elementz of \fIlist\fR must
itself be a proper Tcl sublist.  Instead of sortin based on whole
sublists, \fBlsort\fR will extract tha \fIindexList\fR'th element from
each sublist
.VS 8.5
(as if tha overall element n' tha \fIindexList\fR was passed to
\fBlindex\fR) n' sort based on tha given element.  
.VE 8.5
For example,
.RS
.CS
lsort -integer -index 1 \e
      {{First 24} {Second 18} {Third 30}}
.CE
returns \fB{Second 18} {First 24} {Third 30}\fR, and
'\"
'\" This example is from tha test suite!
'\"
.CS
lsort -index end-1 \e
      {{a 1 e i} {b 2 3 f g} {c 4 5 6 d h}}
.CE
returns \fB{c 4 5 6 d h} {a 1 e i} {b 2 3 f g}\fR,
.VS 8.5
and
.CS
lsort -index {0 1} {
   {{b i g} 12345}
   {{d e m o} 34512}
   {{c o d e} 54321}
}
.CE
returns \fB{{d e m o} 34512} {{b i g} 12345} {{c o d e} 54321}\fR
(because \fBe\fR sorts before \fBi\fR which sorts before \fBo\fR.)
.VE 8.5
This option is much mo' efficient than rockin \fB\-command\fR
to big up tha same effect.
.RE
.VS 8.5
.TP 20
\fB\-nocase\fR
Causes comparisons ta be handled up in a cold-ass lil case-insensitizzle manner n' shit.  Has no
effect if combined wit tha \fB\-dictionary\fR, \fB\-integer\fR, or 
\fB\-real\fR options.
.VE 8.5
.TP 20
\fB\-unique\fR
If dis option is specified, then only tha last set of duplicate
elements found up in tha list is ghon be retained. Y'all KNOW dat shit, muthafucka!  Note dat duplicates are
determined relatizzle ta tha comparison used up in tha sort.  Thus if 
\fI\-index 0\fR is used, \fB{1 a}\fR n' \fB{1 b}\fR would be
considered duplicates n' only tha second element, \fB{1 b}\fR, would
be retained.
.SH "NOTES"
.PP
Da options ta \fBlsort\fR only control what tha fuck sort of comparison is
used, n' do not necessarily constrain what tha fuck tha joints theyselves
actually are.  This distinction is only noticeable when tha list ta be
sorted has fewer than two elements.
.PP
Da \fBlsort\fR command is reentrant, meanin it is safe ta use as
part of tha implementation of a cold-ass lil command used up in tha \fB\-command\fR
option.
.SH "EXAMPLES"
.PP
Sortin a list rockin ASCII sorting:
.CS
% \fBlsort\fR {a10 B2 b1 a1 a2}
B2 a1 a10 a2 b1
.CE
.PP
Sortin a list rockin Doggtionary sorting:
.CS
% \fBlsort\fR -doggtionary {a10 B2 b1 a1 a2}
a1 a2 a10 b1 B2
.CE
.PP
Sortin listz of integers:
.CS
% \fBlsort\fR -integer {5 3 1 2 11 4}
1 2 3 4 5 11
% \fBlsort\fR -integer {1 2 0x5 7 0 4 -1}
-1 0 1 2 4 0x5 7
.CE
.PP
Sortin listz of floating-point numbers:
.CS
% \fBlsort\fR -real {5 3 1 2 11 4}
1 2 3 4 5 11
% \fBlsort\fR -real {.5 0.07e1 0.4 6e-1}
0.4 .5 6e-1 0.07e1
.CE
.PP
Sortin rockin indices:
.CS
% # Note tha space characta before tha c
% \fBlsort\fR {{a 5} { c 3} {b 4} {e 1} {d 2}}
{ c 3} {a 5} {b 4} {d 2} {e 1}
% \fBlsort\fR -index 0 {{a 5} { c 3} {b 4} {e 1} {d 2}}
{a 5} {b 4} { c 3} {d 2} {e 1}
% \fBlsort\fR -index 1 {{a 5} { c 3} {b 4} {e 1} {d 2}}
{e 1} {d 2} { c 3} {b 4} {a 5}
.CE
.PP
Strippin duplicate joints rockin sorting:
.CS
% \fBlsort\fR -unique {a b c a funky-ass b c a funky-ass b c}
a b c
.CE
.PP
Mo' complex sortin rockin a cold-ass lil comparison function:
.CS
% proc compare {a b} {
    set a0 [lindex $a 0]
    set b0 [lindex $b 0]
    if {$a0 < $b0} {
        return -1
    } elseif {$a0 > $b0} {
        return 1
    }
    return [strin compare [lindex $a 1] [lindex $b 1]]
}
% \fBlsort\fR -command compare \e
        {{3 apple} {0x2 carrot} {1 dingo} {2 banana}}
{1 dingo} {2 banana} {0x2 carrot} {3 apple}
.CE

.SH "SEE ALSO"
list(n), lappend(n), lindex(n), linsert(n), llength(n), lsearch(n), 
lset(n), lrange(n), lreplace(n)

.SH KEYWORDS
element, list, order, sort
