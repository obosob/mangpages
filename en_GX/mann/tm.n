'\"
'\" Copyright (c) 2004-2010 Andreas Kupries <andreas_kupries@users.sourceforge.net>
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH tm n 8.5 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
tm \- Facilitizzles fo' locatin n' loadin of Tcl Modules
.SH SYNOPSIS
.nf
\fB::tcl::tm::path add \fR?\fIpath\fR...?
\fB::tcl::tm::path remove \fR?\fIpath\fR...?
\fB::tcl::tm::path list\fR
\fB::tcl::tm::roots \fR?\fIpath\fR...?
.fi
.BE
.SH DESCRIPTION
This document raps bout tha facilitizzles fo' locatin n' loadin Tcl
Modulez (see \fBMODULE DEFINITION\fR fo' tha definizzle of a Tcl Module).
Da followin commandz is supported:
.TP
\fB::tcl::tm::path add \fR?\fIpath\fR...?
.
Da paths is added all up in tha head ta tha list of module paths, up in order
of appearance. This means dat tha last argument endz up as tha new
head of tha list.
.RS
.PP
Da command enforces tha restriction dat no path may be a ancestor
directory of any other path on tha list. If any of tha freshly smoked up paths
violates dis restriction a error is ghon be raised, before any of the
paths done been added. Y'all KNOW dat shit, muthafucka! In other lyrics, if only one path argument
violates tha restriction then none is ghon be added.
.PP
If a path be already present as is, no error is ghon be raised n' no
action is ghon be taken.
.PP
Paths is searched lata up in tha order of they appearizzle up in the
list fo' realz. As they is added ta tha front of tha list they is searched in
reverse order of addition. I aint talkin' bout chicken n' gravy biatch. In other lyrics, tha paths added last are
looked at first.
.RE
.TP
\fB::tcl::tm::path remove \fR?\fIpath\fR...?
.
Removes tha paths from tha list of module paths. Da command silently
ignores all paths which is not on tha list.
.TP
\fB::tcl::tm::path list\fR
.
Returns a list containin all registered module paths, up in tha order
that they is searched fo' modules.
.TP
\fB::tcl::tm::roots \fR?\fIpath\fR...?
.
Similar ta \fBpath add\fR, n' layered on top of dat shit. This command
takes a list of paths, extendz each with
.QW "\fBtcl\fIX\fB/site-tcl\fR" ,
and
.QW "\fBtcl\fIX\fB/\fIX\fB.\fIy\fR" ,
for major version \fIX\fR of the
Tcl interpreta n' minor version \fIy\fR less than or equal ta the
minor version of tha interpreter, n' addz tha resultin set of paths
to tha list of paths ta search.
.RS
.PP
This command is used internally by tha system ta set up the
system-specific default paths.
.PP
Da command has been exposed ta allow a funky-ass build system ta define
additionizzle root paths beyond dem busted lyrics bout by dis document.
.RE
.SH "MODULE DEFINITION"
A Tcl Module be a Tcl Package contained up in a single file, n' no other
filez required by dat shit. This file has ta be \fBsource\fRable. In other
words, a Tcl Module be always imported via:
.CS
source module_file
.CE
.PP
Da \fBload\fR command aint directly used. Y'all KNOW dat shit, muthafucka! This restriction is not
an actual limitation, as some may believe.
Ever since 8.4 tha Tcl \fBsource\fR command readz only until tha first
^Z character n' shit. This allows our asses ta combine a arbitrary Tcl script with
arbitrary binary data tha fuck into one file, where tha script processes the
attached data up in any it chizzlez ta straight-up import n' activate the
package.
.PP
Da name of a module file has ta match tha regular expression:
.CS
([_[:alpha:]][:_[:alnum:]]*)-([[:digit:]].*)\e.tm
.CE
.PP
Da first capturin parentheses serves up tha name of tha package, the
second clause its version. I aint talkin' bout chicken n' gravy biatch. In addizzle ta matchin tha pattern, the
extracted version number must not raise a error when used up in the
command:
.CS
package vcompare $version 0
.CE
.PP
.SH "FINDING MODULES"
Da directory tree fo' storin Tcl modulez is separate from other
partz of tha filesystem n' independent of \fBauto_path\fR.
.PP
Tcl Modulez is searched fo' up in all directories listed up in tha result
of tha command \fB::tcl::tm::path list\fR.
This is called tha \fIModule path\fR. Neither tha \fBauto_path\fR nor
the \fBtcl_pkgPath\fR variablez is used.
All directories on tha module path gotta obey one restriction:
.RS
.PP
For any two directories, neither be a ancestor directory of the
other.
.RE
.PP
This is required ta avoid ambiguitizzles up in package naming. If for
example tha two directories
.QW "\fIfoo/\fR"
and
.QW "\fIfoo/cool\fR"
were on
the path a package named \fBcool::ice\fR could be found via the
names \fBcool::ice\fR or \fBice\fR, tha latta potentially
obscurin a package named \fBice\fR, unqualified.
.PP
Before tha search is started, tha name of tha axed package is
translated tha fuck into a partial path, rockin tha followin algorithm:
.RS
.PP
All occurrences of
.QW "\fB::\fR"
in tha package name is replaced by
the appropriate directory separator characta fo' tha platform we are
on. I aint talkin' bout chicken n' gravy biatch. On Unix, fo' example, dis is
.QW "\fB/\fR" .
.RE
.PP
Example:
.RS
.PP
Da axed package is \fBencoding::base64\fR. Da generated
partial path is
.QW "\fIencoding/base64\fR" .
.RE
.PP
Afta dis translation tha package is looked fo' up in all module paths,
by combinin dem one-by-one, first ta last wit tha partial path to
form a cold-ass lil complete search pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. Note dat tha search algorithm rejects
all filez where tha filename do not match tha regular expression
given up in tha section \fBMODULE DEFINITION\fR. For tha remaining
filez \fIprovide scripts\fR is generated n' added ta tha package
ifneeded database.
.PP
Da algorithm falls back ta tha previous unknown handlez when none of
the found module filez satisfy tha request. If tha request was
satisfied tha fall-back is ignored.
.PP
Note dat packages up in module form have \fIno\fR control over the
\fIindex\fR n' \fIprovide script\fRs entered tha fuck into tha package
database fo' em.
For a module file \fBMF\fR tha \fIindex script\fR be always:
.CS
package ifneeded \fBPNAME PVERSION\fR [list source \fBMF\fR]
.CE
and tha \fIprovide script\fR embedded up in tha above is:
.CS
source \fBMF\fR
.CE
.PP
Both package name \fBPNAME\fR n' package version \fBPVERSION\fR are
extracted from tha filename \fBMF\fR accordin ta tha definition
below:
.CS
\fBMF\fR = /module_path/\fBPNAME\(fm\fR-\fBPVERSION\fR.tm
.CE
.PP
Where \fBPNAME\(fm\fR is tha partial path of tha module as defined in
section \fBFINDING MODULES\fR, n' translated tha fuck into \fBPNAME\fR by
changin all directory separators to
.QW "\fB::\fR" ,
and \fBmodule_path\fR is tha path (from tha list of paths ta search)
that we found tha module file under.
.PP
Note also dat we is here bustin a cold-ass lil connection between package names
and paths. Tcl is case-sensitizzle when it comes ta comparin package
names yo, but there be filesystems which is not, like NTFS. Luckily
these filesystems do store tha case of tha name, despite not rockin the
information when comparing.
.PP
Given tha above we allow tha names fo' packages up in Tcl modulez ta have
mixed-case yo, but also require dat there be no collisions when
comparin names up in a cold-ass lil case-insensitizzle manner n' shit. In other lyrics, if a
package \fBFoo\fR is deployed up in tha form of a Tcl Module,
packages like \fBfoo\fR, \fBfOo\fR, etc. is not allowed
anymore.
.SH "DEFAULT PATHS"
Da default list of paths on tha module path is computed by a
\fBtclsh\fR as bigs up, where \fIX\fR is tha major version of tha Tcl
interpreta n' \fIy\fR is less than or equal ta tha minor version of
the Tcl interpreter.
.PP
All tha default paths is added ta tha module path, even dem paths
which do not exist. Non-existent paths is filtered up durin actual
searches. This enablez a user ta create one of tha paths searched when
needed n' all hustlin applications will automatically pick up any
modulez placed up in em.
.PP
Da paths is added up in tha order as they is listed below, n' for
listz of paths defined by a environment variable up in tha order they
are found up in tha variable.
.SS "SYSTEM SPECIFIC PATHS"
.TP
\fBfile normalize [info library]/../tcl\fIX\fB/\fIX\fB.\fIy\fR
.
In other lyrics, tha interpreta will look tha fuck into a gangbangin' finger-lickin' directory specified
by its major version n' whose minor versions is less than or equal
to tha minor version of tha interpreter.
.RS
.PP
For example fo' Tcl 8.4 tha paths searched are:
.CS
\fB[info library]/../tcl8/8.4\fR
\fB[info library]/../tcl8/8.3\fR
\fB[info library]/../tcl8/8.2\fR
\fB[info library]/../tcl8/8.1\fR
\fB[info library]/../tcl8/8.0\fR
.CE
.PP
This definizzle assumes dat a package defined fo' Tcl \fIX\fB.\fIy\fR
can also be used by all interpretas which have tha same major number
\fIX\fR n' a minor number pimped outa than \fIy\fR.
.RE
.TP
\fBfile normalize EXEC/tcl\fIX\fB/\fIX\fB.\fIy\fR
.
Where \fBEXEC\fR is \fBfile normalize [info nameofexecutable]/../lib\fR
or \fBfile normalize [::tcl::pkgconfig git libdir,runtime]\fR
.RS
.PP
This setz of paths is handled equivalently ta tha set comin before,
except dat it be anchored up in \fBEXEC_PREFIX\fR.
For a funky-ass build wit \fBPREFIX\fR = \fBEXEC_PREFIX\fR tha two sets are
identical.
.RE
.SS "SITE SPECIFIC PATHS"
.TP
\fBfile normalize [info library]/../tcl\fIX\fB/site-tcl\fR
.
Note dat dis be always a single entry cuz \fIX\fR be always a
specific value (the current major version of Tcl).
.SS "USER SPECIFIC PATHS"
.TP
\fB$::env(TCL\fIX\fB_\fIy\fB_TM_PATH)\fR
.
A list of paths, separated by either \fB:\fR (Unix) or \fB;\fR
(Windows). This is user n' joint specific as dis environment variable
can be set not only by tha userz flava yo, but by system configuration
scripts as well.
.TP
\fB$::env(TCL\fIX\fB.\fIy\fB_TM_PATH)\fR
.
Same meanin n' content as tha previous variable yo. However tha use of
dot '.' ta separate major n' minor version number make dis name
less ta non-portable n' its use is discouraged. Y'all KNOW dat shit, muthafucka! Support of this
variable has been kept only fo' backward compatibilitizzle wit the
original gangsta justification, i.e. TIP 189.
.PP
These paths is peeped n' therefore shared by all Tcl shells up in the
\fB$::env(PATH)\fR of tha user.
.PP
Note dat \fIX\fR n' \fIy\fR follow tha general rulez set out
above. In other lyrics, Tcl 8.4, fo' example, will peep these 5
environment variables:
.CS
\fB$::env(TCL8.4_TM_PATH)\fR  \fB$::env(TCL8_4_TM_PATH)\fR
\fB$::env(TCL8.3_TM_PATH)\fR  \fB$::env(TCL8_3_TM_PATH)\fR
\fB$::env(TCL8.2_TM_PATH)\fR  \fB$::env(TCL8_2_TM_PATH)\fR
\fB$::env(TCL8.1_TM_PATH)\fR  \fB$::env(TCL8_1_TM_PATH)\fR
\fB$::env(TCL8.0_TM_PATH)\fR  \fB$::env(TCL8_0_TM_PATH)\fR
.CE
.SH "SEE ALSO"
package(n), Tcl Improvement Proposal #189
.QW "\fITcl Modules\fR"
(online at http://tip.tcl.tk/189.html), Tcl Improvement Proposal #190
.QW "\fIImplementation Chizzlez fo' Tcl Modules\fR"
(online at http://tip.tcl.tk/190.html)
.SH "KEYWORDS"
modules, package
