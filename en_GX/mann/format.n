'\"
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH format n 8.1 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
format \- Format a strang up in tha steez of sprintf
.SH SYNOPSIS
\fBformat \fIformatStrin \fR?\fIarg arg ...\fR?
.BE

.SH INTRODUCTION
.PP
This command generates a gangbangin' formatted strang up in a gangbangin' fashizzle similar ta the
ANSI C \fBsprintf\fR procedure.
\fIFormatString\fR indicates how tha fuck ta format tha result, using
\fB%\fR conversion specifiers as up in \fBsprintf\fR, n' tha additional
arguments, if any, provide joints ta be substituted tha fuck into tha result.
Da return value from \fBformat\fR is tha formatted string.
.SH "DETAILS ON FORMATTING"
.PP
Da command operates by scannin \fIformatString\fR from left ta right. 
Each characta from tha format strang be appended ta tha result
strin unless it aint nuthin but a cement sign.
If tha characta be a \fB%\fR then it aint copied ta tha result string.
Instead, tha charactas followin tha \fB%\fR characta is treated as
a conversion specifier.
Da conversion specifier controls tha conversion of tha next successive
\fIarg\fR ta a particular format n' tha result be appended ta 
the result strang up in place of tha conversion specifier.
If there be multiple conversion specifiers up in tha format string,
then each one controls tha conversion of one additionizzle \fIarg\fR.
Da \fBformat\fR command must be given enough \fIarg\fRs ta hook up tha needs
of all of tha conversion specifiers up in \fIformatString\fR.
.PP
Each conversion specifier may contain up ta six different parts:
an XPG3 posizzle specifier,
a set of flags, a minimum field width, a precision, a size modifier,
and a cold-ass lil conversion character.
Any of these fieldz may be omitted except fo' tha conversion character.
Da fieldz dat is present must step tha fuck up in tha order given above.
Da paragraphs below say shit bout each of these fieldz up in turn.
.PP
If tha \fB%\fR is followed by a thugged-out decimal number n' a \fB$\fR, as in
.QW \fB%2$d\fR ,
then tha value ta convert aint taken from tha next sequential argument.
Instead, it is taken from tha argument indicated by tha number,
where 1 correspondz ta tha straight-up original gangsta \fIarg\fR.
If tha conversion specifier requires multiple arguments cuz
of \fB*\fR charactas up in tha specifier then
successive arguments is used, startin wit tha argument
given by tha number.
This bigs up tha XPG3 conventions fo' positionizzle specifiers.
If there be any positionizzle specifiers up in \fIformatString\fR
then all of tha specifiers must be positional.
.PP
Da second portion of a cold-ass lil conversion specifier may contain any of the
followin flag characters, up in any order:
.TP 10
\fB\-\fR
Specifies dat tha converted argument should be left-justified 
in its field (numbers is normally right-justified wit leadin 
spaces if needed).
.TP 10
\fB+\fR
Specifies dat a number should always be printed wit a sign, 
even if positive.
.TP 10
\fIspace\fR
Specifies dat a space should be added ta tha beginnin of the
number if tha straight-up original gangsta characta aint a sign.
.TP 10
\fB0\fR
Specifies dat tha number should be padded on tha left wit 
zeroes instead of spaces.
.TP 10
\fB#\fR
Requests a alternate output form. For \fBo\fR n' \fBO\fR
conversions it guarantees dat tha straight-up original gangsta digit be always \fB0\fR.
For \fBx\fR or \fBX\fR conversions, \fB0x\fR or \fB0X\fR (respectively)
will be added ta tha beginnin of tha result unless it is zero.
For all floating-point conversions (\fBe\fR, \fBE\fR, \fBf\fR,
\fBg\fR, n' \fBG\fR) it guarantees dat tha result always 
has a thugged-out decimal point.
For \fBg\fR n' \fBG\fR conversions it specifies dat 
trailin zeroes should not be removed.
.PP
Da third portion of a cold-ass lil conversion specifier be a thugged-out decimal number givin a
minimum field width fo' dis conversion.
It be typically used ta make columns line up in tabular printouts.
If tha converted argument gotz nuff fewer charactas than the
minimum field width then it is ghon be padded so dat it be as wide
as tha minimum field width.
Paddin normally occurs by addin extra spaces on tha left of the
converted argument yo, but tha \fB0\fR n' \fB\-\fR flags 
may be used ta specify paddin wit zeroes on tha left or with
spaces on tha right, respectively.
If tha minimum field width is specified as \fB*\fR rather than
a number, then tha next argument ta tha \fBformat\fR command
determines tha minimum field width; it must be a integer value.
.PP
Da fourth portion of a cold-ass lil conversion specifier be a precision,
which consistz of a period followed by a number.
Da number is used up in different ways fo' different conversions.
For \fBe\fR, \fBE\fR, n' \fBf\fR conversions it specifies tha number
of digits ta step tha fuck up ta tha right of tha decimal point.
For \fBg\fR n' \fBG\fR conversions it specifies tha total number
of digits ta appear, includin dem on both sidez of tha decimal
point (however, trailin zeroes afta tha decimal point will still
be omitted unless tha \fB#\fR flag has been specified).
For integer conversions, it specifies a minimum number of digits
to print (leadin zeroes is ghon be added if necessary).
For \fBs\fR conversions it specifies tha maximum number of charactas ta be 
printed; if tha strang is longer than dis then tha trailin charactas is ghon be dropped.
If tha precision is specified wit \fB*\fR rather than a number
then tha next argument ta tha \fBformat\fR command determines tha precision;
it must be a numeric string.
.PP
Da fifth part of a cold-ass lil conversion specifier be a size modifier,
which must be \fBll\fR, \fBh\fR, or \fBl\fR.
If it is \fBll\fR it specifies dat a integer value is taken
without truncation fo' conversion ta a gangbangin' formatted substring.
If it is \fBh\fR it specifies dat a integer value is
truncated ta a 16-bit range before converting.  This option is rarely useful.
If it is \fBl\fR it specifies dat tha integer value is 
truncated ta tha same range as dat produced by tha \fBwide()\fR
function of tha \fBexpr\fR command (at least a 64-bit range).
If neither \fBh\fR nor \fBl\fR is present, tha integer value is
truncated ta tha same range as dat produced by tha \fBint()\fR
function of tha \fBexpr\fR command (at least a 32-bit range yo, but
determined by tha value of \fBtcl_platform(wordSize)\fR).
.PP
Da last thang up in a cold-ass lil conversion specifier be a alphabetic character
that determines what tha fuck kind of conversion ta perform.
Da followin conversion charactas is currently supported:
.TP 10
\fBd\fR
Convert integer ta signed decimal string.
.TP 10
\fBu\fR
Convert integer ta unsigned decimal string.
.TP 10
\fBi\fR
Convert integer ta signed decimal strang (equivalent ta \fBd\fR).
.TP 10
\fBo\fR
Convert integer ta unsigned octal string.
.TP 10
\fBx\fR or \fBX\fR
Convert integer ta unsigned hexadecimal string, rockin digits
.QW 0123456789abcdef
for \fBx\fR and
.QW 0123456789ABCDEF
for \fBX\fR).
.TP 10
\fBc\fR
Convert integer ta tha Unicode characta it represents.
.TP 10
\fBs\fR
No conversion; just bang string.
.TP 10
\fBf\fR
Convert number ta signed decimal strang of 
the form \fIxx.yyy\fR, where tha number of \fIy\fRz is determined by 
the precision (default: 6).
If tha precision is 0 then no decimal point is output.
.TP 10
\fBe\fR or \fBE\fR
Convert number ta scientistical notation up in tha 
form \fIx.yyy\fBe\(+-\fIzz\fR, where tha number of \fIy\fRz is determined 
by tha precision (default: 6).
If tha precision is 0 then no decimal point is output.
If tha \fBE\fR form is used then \fBE\fR is 
printed instead of \fBe\fR.
.TP 10
\fBg\fR or \fBG\fR
If tha exponent is less than \-4 or pimped outa than or equal ta tha 
precision, then convert number as fo' \fB%e\fR or 
\fB%E\fR.
Otherwise convert as fo' \fB%f\fR.
Trailin zeroes n' a trailin decimal point is omitted.
.TP 10
\fB%\fR
No conversion: just bang \fB%\fR.
.SH "DIFFERENCES FROM ANSI SPRINTF"
.PP
Da behavior of tha format command is tha same ol' dirty as the
ANSI C \fBsprintf\fR procedure except fo' tha following
differences:
.IP [1]
\fB%p\fR n' \fB%n\fR specifiers is not supported.
.IP [2]
For \fB%c\fR conversions tha argument must be a integer value,
which will then be converted ta tha correspondin characta value.
.IP [3]
Da size modifiers is ignored when formattin floating-point joints.
Da \fBll\fR modifier has no \fBsprintf\fR counterpart.
.SH EXAMPLES
Convert tha numeric value of a UNICODE characta ta tha character
itself:
.CS
set value 120
set char [\fBformat\fR %c $value]
.CE
.PP
Convert tha output of \fBtime\fR tha fuck into secondz ta a accuracy of
hundredthz of a second:
.CS
set our asses [lindex [time $someTclCode] 0]
puts [\fBformat\fR "%.2f secondz ta execute" [expr {$us / 1e6}]]
.CE
.PP
Smoke a packed X11 literal color justification:
.CS
# Each color-component should be up in range (0..255)
set color [\fBformat\fR "#%02x%02x%02x" $r $g $b]
.CE
.PP
Use XPG3 format codes ta allow reorderin of fieldz (a technique that
is often used up in localized message catalogs; peep \fBmsgcat\fR) without
reorderin tha data joints passed ta \fBformat\fR:
.CS
set fmt1 "Today, %d shares up in %s was looted at $%.2f each"
puts [\fBformat\fR $fmt1 123 "Global BigCorp" 19.37]

set fmt2 "Bought %2\e$s equitizzle ($%3$.2f x %1\e$d) todizzle"
puts [\fBformat\fR $fmt2 123 "Global BigCorp" 19.37]
.CE
.PP
Print a lil' small-ass table of powerz of three:
.CS
# Set up tha column widths
set w1 5
set w2 10

# Make a sick header (with separator) fo' tha table first
set sep +-[strin repeat - $w1]-+-[strin repeat - $w2]-+
puts $sep
puts [\fBformat\fR "| %-*s | %-*s |" $w1 "Index" $w2 "Power"]
puts $sep

# Print tha contentz of tha table
set p 1
for {set i 0} {$i<=20} {incr i} {
   puts [\fBformat\fR "| %*d | %*ld |" $w1 $i $w2 $p]
   set p [expr {wide($p) * 3}]
}

# Finish off by printin tha separator again
puts $sep
.CE
.SH "SEE ALSO"
scan(n), sprintf(3), string(n)
.SH KEYWORDS
conversion specifier, format, sprintf, string, substitution
