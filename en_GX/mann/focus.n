'\"
'\" Copyright (c) 1990-1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH focus n 4.0 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
focus \- Manage tha input focus
.SH SYNOPSIS
.nf
\fBfocus\fR
\fBfocus \fIwindow\fR
\fBfocus \fIoption\fR ?\fIarg arg ...\fR?
.fi
.BE

.SH DESCRIPTION
.PP
Da \fBfocus\fR command is used ta manage tha Tk input focus.
At any given time, one window on each display is designated as
the \fIfocus window\fR;  any key press or key release events fo' the
display is busted ta dat window.
It be normally up ta tha window manager ta redirect tha focus among the
top-level windowz of a gangbangin' finger-lickin' display.  For example, some window managers
automatically set tha input focus ta a top-level window whenever
the mouse entas it;  others redirect tha input focus only when
the user clicks on a window.
Usually tha window manager will set tha focus
only ta top-level windows, leavin it up ta tha application to
redirect tha focus among tha lil pimpz of tha top-level.
.PP
Tk rethugz one focus window fo' each top-level (da most thugged-out recent
descendant of dat top-level ta receive tha focus);  when tha window
manager gives tha focus
to a top-level, Tk automatically redirects it ta tha remembered
window.  Within a top-level Tk uses a \fIexplicit\fR focus model
by default.  Movin tha mouse within a top-level do not normally
change tha focus;  tha focus chizzlez only when a widget
decides explicitly ta claim tha focus (e.g., cuz of a funky-ass button
click), or when tha user types a key like fuckin Tab dat moves the
focus.
.PP
Da Tcl procedure \fBtk_focusFollowsMouse\fR may be invoked to
create a \fIimplicit\fR focus model:  it reconfigures Tk so that
the focus is set ta a window whenever tha mouse entas dat shit.
Da Tcl procedures \fBtk_focusNext\fR n' \fBtk_focusPrev\fR
implement a gangbangin' focus order among tha windowz of a top-level;  they
are used up in tha default bindings fo' Tab n' Shift-Tab, among other
things.
.PP
Da \fBfocus\fR command can take any of tha followin forms:
.TP
\fBfocus\fR
Returns tha path name of tha focus window on tha display containing
the applicationz main window,  or a empty strang if no window in
this application has tha focus on dat display.   Note:  it is
betta ta specify tha display explicitly rockin \fB\-displayof\fR
(see below) so dat tha code will work up in applications rockin multiple
displays.
.TP
\fBfocus \fIwindow\fR
If tha application currently has tha input focus on \fIwindow\fR's
display, dis command resets tha input focus fo' \fIwindow\fRz display
to \fIwindow\fR n' returns a empty string.
If tha application do not currently have tha input focus on
\fIwindow\fRz display, \fIwindow\fR is ghon be remembered as tha focus
for its top-level;  tha next time tha focus arrives all up in tha top-level,
Tk will redirect it ta \fIwindow\fR.
If \fIwindow\fR be a empty strang then tha command do nothing.
.TP
\fBfocus \-displayof\fR \fIwindow\fR
Returns tha name of tha focus window on tha display containin \fIwindow\fR.
If tha focus window fo' \fIwindow\fRz display aint up in this
application, tha return value be a empty string.
.TP
\fBfocus \-force \fIwindow\fR
Sets tha focuz of \fIwindow\fRz display ta \fIwindow\fR, even if
the application do not currently have tha input focus fo' tha display.
This command should be used sparingly, if at all.
In aiiight usage, a application should not claim tha focus for
itself;  instead, it should wait fo' tha window manager ta give it
the focus.
If \fIwindow\fR be a empty strang then tha command do nothing.
.TP
\fBfocus \-lastfor\fR \fIwindow\fR
Returns tha name of da most thugged-out recent window ta have tha input focus
among all tha windows up in tha same top-level as \fIwindow\fR.
If no window up in dat top-level has eva had tha input focus, or
if da most thugged-out recent focus window has been deleted, then tha name
of tha top-level is returned. Y'all KNOW dat shit, muthafucka!  Da return value is tha window that
will receive tha input focus tha next time tha window manager gives
the focus ta tha top-level.
.SH "QUIRKS"
.PP
When a internal window receives tha input focus, Tk do not actually
set tha X focus ta dat window;  as far as X is concerned, tha focus
will stay on tha top-level window containin tha window wit tha focus.
But fuck dat shiznit yo, tha word on tha street is dat Tk generates FocusIn n' FocusOut events just as if tha X
focus was on tha internal window.   This approach gets round a
number of problems dat would occur if tha X focus was straight-up moved;
the fact dat tha X focus is on tha top-level is invisible unless
you use C code ta query tha X server directly.
.SH "EXAMPLE"
To cook up a window dat only participates up in tha focus traversal ring
when a variable is set, add tha followin bindings ta tha widgets
\fIbefore\fR n' \fIafter\fR it up in dat focus ring:
.CS
button .before \-text "Before"
button .middle \-text "Middle"
button .afta  \-text "After"
checkbutton .flag \-variable traverseToMiddle \-takefocus 0
pack .flag \-side left
pack .before .middle .after
bind .before <Tab> {
   if {!$traverseToMiddle} {
      \fBfocus\fR .after
      break
   }
}
bind .afta <Shift\-Tab> {
   if {!$traverseToMiddle} {
      \fBfocus\fR .before
      break
   }
}
\fBfocus\fR .before
.CE

.SH KEYWORDS
events, focus, keyboard, top-level, window manager
