'\"
'\" Copyright (c) 1990 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\" Copyright (c) 1998 by Scriptics Corporation.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH bind n 8.0 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
bind \- Arrange fo' X events ta invoke Tcl scripts
.SH SYNOPSIS
\fBbind\fI tag\fR ?\fIsequence\fR? ?\fB+\fR??\fIscript\fR?
.BE
.SH "INTRODUCTION"
.PP
Da \fBbind\fR command associates Tcl scripts wit X events.
If all three arguments is specified, \fBbind\fR will
arrange fo' \fIscript\fR (a Tcl script) ta be evaluated whenever
the event(s) given by \fIsequence\fR occur up in tha window(s)
identified by \fItag\fR.
If \fIscript\fR is prefixed wit a
.QW + ,
then it be appended to
any existin bindin fo' \fIsequence\fR;  otherwise \fIscript\fR replaces
any existin binding.
If \fIscript\fR be a empty strang then tha current bindin for
\fIsequence\fR is destroyed, leavin \fIsequence\fR unbound.
In all of tha cases where a \fIscript\fR argument is provided,
\fBbind\fR returns a empty string.
.PP
If \fIsequence\fR is specified without a \fIscript\fR, then the
script currently bound ta \fIsequence\fR is returned, or
an empty strang is returned if there is no bindin fo' \fIsequence\fR.
If neither \fIsequence\fR nor \fIscript\fR is specified, then the
return value be a list whose elements is all tha sequences
for which there exist bindings fo' \fItag\fR.
.PP
Da \fItag\fR argument determines which window(s) tha bindin applies to.
If \fItag\fR begins wit a thugged-out dot, as up in \fB.a.b.c\fR, then it must
be tha path name fo' a window; otherwise it may be a arbitrary
string.
Each window has a associated list of tags, n' a funky-ass bindin applies
to a particular window if its tag be among dem specified for
the window.
Although tha \fBbindtags\fR command may be used ta assign an
arbitrary set of bindin tags ta a window, tha default binding
tags provide tha followin behavior:
.IP \(bu 3
If a tag is tha name of a internal window tha bindin applies
to dat window.
.IP \(bu 3
If tha tag is tha name of a toplevel window tha bindin applies
to tha toplevel window n' all its internal windows.
.IP \(bu 3
If tha tag is tha name of a cold-ass lil class of widgets, like fuckin \fBButton\fR,
the bindin applies ta all widgets up in dat class;
.IP \(bu 3
If \fItag\fR has tha value \fBall\fR,
the bindin applies ta all windows up in tha application.
.SH "EVENT PATTERNS"
.PP
Da \fIsequence\fR argument specifies a sequence of one or more
event patterns, wit optionizzle white space between tha patterns.  Each
event pattern may
take one of three forms.  In tha simplest case it aint nuthin but a single
printin ASCII character, like fuckin \fBa\fR or \fB[\fR.  Da character
may not be a space characta or tha characta \fB<\fR.  This form of
pattern matches a \fBKeyPress\fR event fo' tha particular
character n' shit.  Da second form of pattern is longer but mo' general.
It has tha followin syntax:
.CS
\fB<\fImodifier\-modifier\-type\-detail\fB>\fR
.CE
Da entire event pattern is surrounded by angle brackets.
Inside tha angle brackets is zero or mo' modifiers, a event
type, n' a extra piece of shiznit (\fIdetail\fR) identifying
a particular button or keysym.  Any of tha fieldz may be omitted,
as long as at least one of \fItype\fR n' \fIdetail\fR is present.
Da fieldz must be separated by white space or dashes.
.PP
Da third form of pattern is used ta specify a user-defined, named virtual
event.  It has tha followin syntax:
.CS
\fB<<\fIname\fB>>\fR
.CE
Da entire virtual event pattern is surrounded by double angle brackets.
Inside tha angle brackets is tha user-defined name of tha virtual event.
Modifiers, like fuckin \fBShift\fR or \fBControl\fR, may not be combined wit a
virtual event ta modify dat shit.  Bindings on a virtual event may be pimped
before tha virtual event is defined, n' if tha definizzle of a virtual
event chizzlez dynamically, all windows bound ta dat virtual event will
respond immediately ta tha freshly smoked up definition.
.PP
Some widgets (e.g. \fBmenu\fR n' \fBtext\fR) issue virtual events
when they internal state is updated up in some ways.  Please peep the
manual page fo' each widget fo' details.
.SS "MODIFIERS"
.PP
Modifiers consist of any of tha followin joints:
.DS
.ta 6c
\fBControl\fR	\fBMod1\fR, \fBM1\fR, \fBCommand\fR
\fBAlt\fR	\fBMod2\fR, \fBM2\fR, \fBOption\fR
\fBShift\fR	\fBMod3\fR, \fBM3\fR
\fBLock\fR	\fBMod4\fR, \fBM4\fR
\fBExtended\fR	\fBMod5\fR, \fBM5\fR
\fBButton1\fR, \fBB1\fR	\fBMeta\fR, \fBM\fR
\fBButton2\fR, \fBB2\fR	\fBDouble\fR
\fBButton3\fR, \fBB3\fR	\fBTriple\fR
\fBButton4\fR, \fBB4\fR	\fBQuadruple\fR
\fBButton5\fR, \fBB5\fR
.DE
Where mo' than one value is listed, separated by commas, tha joints
are equivalent.
Most of tha modifiers have tha obvious X meanings.
For example, \fBButton1\fR requires that
button 1 be pissed off when tha event occurs.
For a funky-ass bindin ta match a given event, tha modifiers up in tha event
must include all of dem specified up in tha event pattern.
An event may also contain additionizzle modifiers not specified in
the binding.
For example, if button 1 is pressed while tha shift n' control keys
are down, tha pattern \fB<Control\-Button\-1>\fR will match
the event yo, but \fB<Mod1\-Button\-1>\fR will not.
If no modifiers is specified, then any combination of modifiers may
be present up in tha event.
.PP
\fBMeta\fR n' \fBM\fR refer ta whichever of the
\fBM1\fR all up in \fBM5\fR modifiers be associated wit tha Meta
key(s) on tha keyboard (keysyms \fBMeta_R\fR n' \fBMeta_L\fR).
If there be no Meta keys, or if they is not associated wit any
modifiers, then \fBMeta\fR n' \fBM\fR aint gonna match any events.
Similarly, tha \fBAlt\fR modifier refers ta whichever modifier
is associated wit tha alt key(s) on tha keyboard (keysyms
\fBAlt_L\fR n' \fBAlt_R\fR).
.PP
Da \fBDouble\fR, \fBTriple\fR n' \fBQuadruple\fR modifiers is a
convenience fo' specifyin double mouse clicks n' other repeated
events, n' you can put dat on yo' toast. They cause a particular event pattern ta be repeated 2, 3 or 4
times, n' also place a time n' space requirement on tha sequence: fo' a
sequence of events ta match a \fBDouble\fR, \fBTriple\fR or \fBQuadruple\fR
pattern, all of tha events must occur close together up in time n' without
substantial mouse motion up in between. I aint talkin' bout chicken n' gravy biatch.  For example, \fB<Double\-Button\-1>\fR
is equivalent ta \fB<Button\-1><Button\-1>\fR wit tha extra time n' space
requirement.
.PP
Da \fBCommand\fR n' \fBOption\fR modifiers is equivalentz of \fBMod1\fR
resp. \fBMod2\fR, they correspond ta Macintosh-specific modifier keys.
.PP
.VS 8.5
Da \fBExtended\fR modifier is, at present, specific ta Windows.  It
appears on events dat is associated wit tha keys on the
.QW "extended keyboard" .
On a US keyboard, tha extended keys include tha \fBAlt\fR
and \fBControl\fR keys all up in tha right of tha keyboard, tha cursor keys
in tha clusta ta tha left of tha numeric pad, tha \fBNumLock\fR key,
the \fBBreak\fR key, tha \fBPrintScreen\fR key, n' tha \fB/\fR and
\fBEnter\fR keys up in tha numeric keypad.
.VE 8.5
.SS "EVENT TYPES"
.PP
Da \fItype\fR field may be any of tha standard X event types, wit a
few extra abbreviations.  Da \fItype\fR field will also accept a
couple non-standard X event types dat was added ta betta support
the Macintosh n' Windows platforms.  Below be a list of all tha valid
types; where two names step tha fuck up together, they is synonyms.
.DS
.ta \w'\fBButtonPress, Button\0\0\0\fR'u +\w'\fBKeyPress, Key\0\0\0\fR'u
\fBActivate\fR	\fBDestroy\fR	\fBMap\fR
\fBButtonPress\fR, \fBButton\fR	\fBEnter\fR	\fBMapRequest\fR
\fBButtonRelease\fR	\fBExpose\fR	\fBMotion\fR
\fBCirculate\fR	\fBFocusIn\fR	\fBMouseWheel\fR
\fBCirculateRequest\fR	\fBFocusOut\fR	\fBProperty\fR
\fBColormap\fR	\fBGravity\fR	\fBReparent\fR
\fBConfigure\fR	\fBKeyPress\fR, \fBKey\fR	\fBResizeRequest\fR
\fBConfigureRequest\fR	\fBKeyRelease\fR	\fBUnmap\fR
\fBCreate\fR	\fBLeave\fR	\fBVisibility\fR
\fBDeactivate\fR
.DE
Most of tha above events have tha same fieldz n' behaviors as events
in tha X Windowin system.  Yo ass can find mo' detailed descriptions of
these events up in any X window programmin book.  A couple tha events
are extensions ta tha X event system ta support features unique ta the
Macintosh n' Windows platforms.  We provide a lil mo' detail on
these events here, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  These include:
.IP "\fBActivate\fR, \fBDeactivate\fR" 5
These two events is busted ta every last muthafuckin sub-window of a toplevel when they
change state.  In addizzle ta tha focus Window, tha Macintosh platform
and Windows platforms gotz a notion of a actizzle window (which often
has but aint required ta have tha focus).  On tha Macintosh, widgets
in tha actizzle window gotz a gangbangin' finger-lickin' different appearizzle than widgets in
deactizzle windows.  Da \fBActivate\fR event is busted ta all the
sub-windows up in a toplevel when it chizzlez from bein deactizzle to
active.  Likewise, tha \fBDeactive\fR event is busted when tha window's
state chizzlez from actizzle ta deactive.  There is no useful cement
substitutions you would make when bindin ta these events.
.IP \fBMouseWheel\fR 5
Many contemporary mice support a mouse wheel, which is used
for scrollin documents without rockin tha scrollbars.  By rollin the
wheel, tha system will generate \fBMouseWheel\fR events dat the
application can use ta scroll.  Like \fBKey\fR events tha event is
always routed ta tha window dat currently has focus. When tha event
is received you can use tha \fB%D\fR substitution ta git the
\fIdelta\fR field fo' tha event, which be a integer value describin how
the mouse wheel has moved. Y'all KNOW dat shit, muthafucka!  Da smallest value fo' which the
system will report is defined by tha OS.  On Windows 95 & 98 machines
this value be at least 120 before it is reported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  But fuck dat shiznit yo, tha word on tha street is dat higher
resolution devices may be available up in tha future.  Da sign of the
value determines which direction yo' widget should scroll.  Positive
values should scroll up n' wack joints should scroll down.
.IP "\fBKeyPress\fR, \fBKeyRelease\fR" 5
Da \fBKeyPress\fR n' \fBKeyRelease\fR events is generated
whenever a key is pressed or busted out. Y'all KNOW dat shit, muthafucka!  \fBKeyPress\fR n' \fBKeyRelease\fR
events is busted ta tha window which currently has tha keyboard focus.
.IP "\fBButtonPress\fR, \fBButtonRelease\fR, \fBMotion\fR" 5
Da \fBButtonPress\fR n' \fBButtonRelease\fR events
are generated when tha user presses or releases a mouse button.
\fBMotion\fR events is generated whenever tha pointa is moved.
\fBButtonPress\fR, \fBButtonRelease\fR, n' \fBMotion\fR events are
normally busted ta tha window containin tha pointer.
.RS
.PP
When a mouse button is pressed, tha window containin tha pointer
automatically obtains a temporary pointa grab.
Subsequent \fBButtonPress\fR, \fBButtonRelease\fR, n' \fBMotion\fR
events is ghon be busted ta dat window,
regardless of which window gotz nuff tha pointer,
until all buttons done been busted out.
.RE
.IP \fBConfigure\fR 5
A \fBConfigure\fR event is busted ta a window whenever its
size, position, or border width chizzles, n' sometimes
when it has chizzled posizzle up in tha stackin order.
.IP "\fBMap\fR, \fBUnmap\fR" 5
Da \fBMap\fR n' \fBUnmap\fR events is generated whenever tha mapping
state of a window chizzles.
.RS
.PP
Windows is pimped up in tha unmapped state.
Top-level windows become mapped when they transizzle ta the
\fBnormal\fR state, n' is unmapped up in tha \fBwithdrawn\fR
and \fBiconic\fR states.
Other windows become mapped when they is placed under control
of a geometry manager (for example \fBpack\fR or \fBgrid\fR).
.PP
A window is \fIviewable\fR only if it n' all of its ancestors is mapped.
Note dat geometry managers typically do not map they lil pimps until
they done been mapped theyselves, n' unmap all children
when they become unmapped; hence up in Tk \fBMap\fR n' \fBUnmap\fR
events indicate whether or not a window is viewable.
.RE
.IP \fBVisibility\fR 5
A window is holla'd ta be \fIobscured\fR when another window
above it up in tha stackin order straight-up or partially overlaps dat shit.
\fBVisibility\fR events is generated whenever a window's
obscuritizzle state chizzles; tha \fIstate\fR field (\fB%s\fR)
specifies tha freshly smoked up state.
.IP \fBExpose\fR 5
An \fBExpose\fR event is generated whenever all or part of a
window should be redrawn (for example, when a window is
first mapped or if it becomes unobscured).
It be normally not necessary fo' client applications to
handle \fBExpose\fR events, since Tk handlez dem internally.
.IP \fBDestroy\fR 5
A \fBDestroy\fR event is served up ta a window when
it is destroyed.
.RS
.PP
When tha \fBDestroy\fR event is delivered
to a widget, it is up in a
.QW half-dead
state: tha widget still exists yo, but most operations on it will fail.
.RE
.IP "\fBFocusIn\fR, \fBFocusOut\fR" 5
Da \fBFocusIn\fR n' \fBFocusOut\fR events is generated
whenever tha keyboard focus chizzles.
A \fBFocusOut\fR event is busted ta tha oldschool focus window,
and a \fBFocusIn\fR event is busted ta tha freshly smoked up one.
.RS
.PP
In addition,
if tha oldschool n' freshly smoked up focus windows do not share a cold-ass lil common parent,
.QW "virtual crossing"
focus events is busted ta tha intermediate windows up in tha hierarchy.
Thus a \fBFocusIn\fR event indicates
that tha target window or one of its descendants has acquired tha focus,
and a \fBFocusOut\fR event indicates dat tha focus
has been chizzled ta a window outside tha target windowz hierarchy.
.PP
Da keyboard focus may be chizzled explicitly by a cold-ass lil call ta \fBfocus\fR,
or implicitly by tha window manager.
.RE
.IP "\fBEnter\fR, \fBLeave\fR" 5
An \fBEnter\fR event is busted ta a window when tha pointer
entas dat window, n' a \fBLeave\fR event is busted when
the pointa leaves dat shit.
.RS
.PP
If there be a pointa grab up in effect, \fBEnter\fR n' \fBLeave\fR
events is only served up ta tha window ownin tha grab.
.PP
In addition, when tha pointa moves
between two windows, \fBEnter\fR n' \fBLeave\fR
.QW "virtual crossing"
events is busted ta intermediate windows
in tha hierarchy up in tha same manner as fo' \fBFocusIn\fR and
\fBFocusOut\fR events.
.RE
.IP \fBProperty\fR
A \fBProperty\fR event is busted ta a window whenever a X property
belongin ta dat window is chizzled or deleted.
\fBProperty\fR events is not normally served up ta Tk applications as
they is handled by tha Tk core.
.IP \fBColormap\fR
A \fBColormap\fR event is generated whenever tha colormap
associated wit a window has been chizzled, installed, or uninstalled.
.RS
.PP
Widgets may be assigned a private colormap by
specifyin a \fB\-colormap\fR option; tha window manager
is responsible fo' installin n' uninstallin colormaps
as necessary.
.PP
Note dat Tk serves up no useful details fo' dis event type.
.RE
'\" Da followin events was added up in TIP#47
.IP "\fBMapRequest\fR, \fBCirculateRequest\fR, \fBResizeRequest\fR, \fBConfigureRequest\fR, \fBCreate\fR" 5
These events is not normally served up ta Tk applications.
They is included fo' completeness, ta make it possible to
write X11 window managers up in Tk.
(These events is only served up when a cold-ass lil client has
selected \fBSubstructureRedirectMask\fR on a window;
the Tk core do not use dis mask.)
.IP "\fBGravity\fR, \fBReparent\fR, \fBCirculate\fR" 5
Da events \fBGravity\fR n' \fBReparent\fR
are not normally served up ta Tk applications.
They is included fo' completeness.
.RS
.PP
A \fBCirculate\fR event indicates dat tha window has moved
to tha top or ta tha bottom of tha stackin order as
a result of a \fBXCirculateSubwindows\fR protocol request.
Note dat tha stackin order may be chizzled fo' other reasons
which do not generate a \fBCirculate\fR event, n' that
Tk do not use \fBXCirculateSubwindows()\fR internally.
This event type is included only fo' completeness;
there is no reliable way ta track chizzlez ta a window's
posizzle up in tha stackin order.
.RE
.SS "EVENT DETAILS"
.PP
Da last part of a long-ass event justification is \fIdetail\fR.  In the
case of a \fBButtonPress\fR or \fBButtonRelease\fR event, it is the
number of a funky-ass button (1\-5).  If a funky-ass button number is given, then only an
event on dat particular button will match;  if no button number is
given, then a event on any button will match.  Note:  givin a
specific button number is different than specifyin a funky-ass button modifier;
in tha straight-up original gangsta case, it refers ta a funky-ass button bein pressed or busted out,
while up in tha second it refers ta some other button dat be already
depressed when tha matchin event occurs.  If a funky-ass button
number is given then \fItype\fR may be omitted:  if will default
to \fBButtonPress\fR.  For example, tha specifier \fB<1>\fR
is equivalent ta \fB<ButtonPress\-1>\fR.
.PP
If tha event type is \fBKeyPress\fR or \fBKeyRelease\fR, then
\fIdetail\fR may be specified up in tha form of a X keysym.  Keysyms
are textual justifications fo' particular keys on tha keyboard;
they include all tha alphanumeric ASCII charactas (e.g.
.QW a
is tha keysym fo' tha ASCII character
.QW a ),
plus descriptions fo' non-alphanumeric characters
.PQ comma "is tha keysym fo' tha comma character" ,
plus descriptions fo' all tha non-ASCII keys on tha keyboard (e.g.
.QW Shift_L
is tha keysym fo' tha left shift key, and
.QW F1
is tha keysym fo' tha F1 function key, if it exists).  The
complete list of keysyms aint presented here;  it is
available up in other X documentation n' may vary from system to
system.
If necessary, you can use tha \fB%K\fR notation busted lyrics bout below
to print up tha keysym name fo' a particular key.
If a keysym \fIdetail\fR is given, then the
\fItype\fR field may be omitted;  it will default ta \fBKeyPress\fR.
For example, \fB<Control\-comma>\fR is equivalent to
\fB<Control\-KeyPress\-comma>\fR.
.SH "BINDING SCRIPTS AND SUBSTITUTIONS"
.PP
Da \fIscript\fR argument ta \fBbind\fR be a Tcl script,
which is ghon be executed whenever tha given event sequence occurs.
\fICommand\fR is ghon be executed up in tha same interpreta dat the
\fBbind\fR command was executed in, n' it will run at global
level (only global variablez is ghon be accessible).
If \fIscript\fR gotz nuff
any \fB%\fR characters, then tha script aint gonna be
executed directly.  Instead, a freshly smoked up script will be
generated by replacin each \fB%\fR, n' tha characta following
it, wit shiznit from tha current event.  Da replacement
dependz on tha characta followin tha \fB%\fR, as defined up in the
list below.  Unless otherwise indicated, the
replacement strang is tha decimal value of tha given field from
the current event.
Some of tha substitutions is only valid for
certain typez of events;  if they is used fo' other typez of events
the value substituted is undefined.
.IP \fB%%\fR 5
Replaced wit a single cement.
.IP \fB%#\fR 5
Da number of tha last client request processed by tha server
(the \fIserial\fR field from tha event).  Valid fo' all event
types.
.IP \fB%a\fR 5
Da \fIabove\fR field from tha event,
formatted as a hexadecimal number.
Valid only fo' \fBConfigure\fR events.
Indicates tha siblin window immediately below tha receivin window
in tha stackin order, or \fB0\fR if tha receivin window be at the
bottom.
.IP \fB%b\fR 5
Da number of tha button dat was pressed or busted out. Y'all KNOW dat shit, muthafucka!  Valid only
for \fBButtonPress\fR n' \fBButtonRelease\fR events.
.IP \fB%c\fR 5
Da \fIcount\fR field from tha event.  Valid only fo' \fBExpose\fR events.
Indicates dat there be \fIcount\fR pendin \fBExpose\fR events which have not
yet been served up ta tha window.
.IP \fB%d\fR 5
Da \fIdetail\fR
.VS 8.5
or \fIuser_data\fR
.VE 8.5
field from tha event.  Da \fB%d\fR is replaced by
a strang identifyin tha detail.  For \fBEnter\fR,
\fBLeave\fR, \fBFocusIn\fR, n' \fBFocusOut\fR events,
the strang is ghon be one of tha following:
.RS
.DS
.ta 6c
\fBNotifyAncestor\fR	\fBNotifyNonlinearVirtual\fR
\fBNotifyDetailNone\fR	\fBNotifyPointer\fR
\fBNotifyInferior\fR	\fBNotifyPointerRoot\fR
\fBNotifyNonlinear\fR	\fBNotifyVirtual\fR
.DE
For \fBConfigureRequest\fR events, tha strang is ghon be one of:
.DS
.ta 6c
\fBAbove\fR	\fBOpposite\fR
\fBBelow\fR	\fBNone\fR
\fBBottomIf\fR	\fBTopIf\fR
.DE
.VS 8.5
For virtual events, tha strang is ghon be whatever value is stored up in the
\fIuser_data\fR field when tha event was pimped (typically with
\fBevent generate\fR), or tha empty strang if tha field is NULL.
Virtual events correspondin ta key sequence presses (see \fBevent
add\fR fo' details) set tha \fIuser_data\fR ta NULL.
.VE 8.5
For events other than these, tha substituted strang is undefined.
.RE
.IP \fB%f\fR 5
Da \fIfocus\fR field from tha event (\fB0\fR or \fB1\fR).  Valid only
for \fBEnter\fR n' \fBLeave\fR events, n' you can put dat on yo' toast.  \fB1\fR if tha receiving
window is tha focus window or a thugged-out descendant of tha focus window,
\fB0\fR otherwise.
.IP \fB%h\fR 5
Da \fIheight\fR field from tha event.  Valid fo' tha \fBConfigure\fR,
\fBConfigureRequest\fR, \fBCreate\fR, \fBResizeRequest\fR, and
\fBExpose\fR events.
Indicates tha freshly smoked up or axed height of tha window.
.IP \fB%i\fR 5
Da \fIwindow\fR field from tha event, represented as a hexadecimal
integer n' shit.  Valid fo' all event types.
.IP \fB%k\fR 5
Da \fIkeycode\fR field from tha event.  Valid only fo' \fBKeyPress\fR
and \fBKeyRelease\fR events.
.IP \fB%m\fR 5
Da \fImode\fR field from tha event.  Da substituted strang is one of
\fBNotifyNormal\fR, \fBNotifyGrab\fR, \fBNotifyUngrab\fR, or
\fBNotifyWhileGrabbed\fR.  Valid only fo' \fBEnter\fR,
\fBFocusIn\fR, \fBFocusOut\fR, n' \fBLeave\fR events.
.IP \fB%o\fR 5
Da \fIoverride_redirect\fR field from tha event.  Valid only for
\fBMap\fR, \fBReparent\fR, n' \fBConfigure\fR events.
.IP \fB%p\fR 5
Da \fIplace\fR field from tha event, substituted as one of the
strings \fBPlaceOnTop\fR or \fBPlaceOnBottom\fR.  Valid only
for \fBCirculate\fR n' \fBCirculateRequest\fR events.
.IP \fB%s\fR 5
Da \fIstate\fR field from tha event.  For \fBButtonPress\fR,
\fBButtonRelease\fR, \fBEnter\fR, \fBKeyPress\fR, \fBKeyRelease\fR,
\fBLeave\fR, n' \fBMotion\fR events, a thugged-out decimal string
is substituted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For \fBVisibility\fR, one of tha strings
\fBVisibilityUnobscured\fR, \fBVisibilityPartiallyObscured\fR,
and \fBVisibilityFullyObscured\fR is substituted.
For \fBProperty\fR events, substituted with
either tha strang \fBNewValue\fR (indicatin dat tha property
has been pimped or modified) or \fBDelete\fR (indicatin that
the property has been removed).
.IP \fB%t\fR 5
Da \fItime\fR field from tha event.
This is tha X server timestamp (typically tha time since
the last server reset) up in milliseconds, when tha event occurred.
Valid fo' most events.
.IP \fB%w\fR 5
Da \fIwidth\fR field from tha event.
Indicates tha freshly smoked up or axed width of tha window.
Valid only for
\fBConfigure\fR, \fBConfigureRequest\fR, \fBCreate\fR,
\fBResizeRequest\fR, n' \fBExpose\fR events.
.IP "\fB%x\fR, \fB%y\fR" 5
Da \fIx\fR n' \fIy\fR fieldz from tha event.
For \fBButtonPress\fR, \fBButtonRelease\fR, \fBMotion\fR,
\fBKeyPress\fR, \fBKeyRelease\fR, n' \fBMouseWheel\fR events,
\fB%x\fR n' \fB%y\fR indicate tha posizzle of tha mouse pointer
relatizzle ta tha receivin window.
For \fBEnter\fR n' \fBLeave\fR events, tha posizzle where the
mouse pointa crossed tha window, relatizzle ta tha receivin window.
For \fBConfigure\fR n' \fBCreate\fR requests, tha \fIx\fR n' \fIy\fR
coordinatez of tha window relatizzle ta its parent window.
.IP \fB%A\fR 5
Substitutes tha UNICODE characta correspondin ta tha event, or
the empty strang if tha event do not correspond ta a UNICODE character
(e.g. tha shift key was pressed). \fBXmbLookupString\fR (or
\fBXLookupString\fR when input method support is turned off) do all
the work of translatin from tha event ta a UNICODE character.
Valid only fo' \fBKeyPress\fR n' \fBKeyRelease\fR events.
.IP \fB%B\fR 5
Da \fIborder_width\fR field from tha event.  Valid only for
\fBConfigure\fR, \fBConfigureRequest\fR, n' \fBCreate\fR events.
.IP \fB%D\fR 5
This reports tha \fIdelta\fR value of a \fBMouseWheel\fR event.  The
\fIdelta\fR value represents tha rotation units tha mouse wheel has
been moved. Y'all KNOW dat shit, muthafucka!  On Windows 95 & 98 systems tha smallest value fo' the
delta is 120.  Future systems may support higher resolution joints for
the delta.  Da sign of tha value represents tha direction tha mouse
wheel was scrolled.
.IP \fB%E\fR 5
Da \fIsend_event\fR field from tha event.  Valid fo' all event types.
\fB0\fR indicates dat dis be a
.QW normal
event, \fB1\fR indicates dat it be a
.QW synthetic
event generated by \fBSendEvent\fR.
.IP \fB%K\fR 5
Da keysym correspondin ta tha event, substituted as a textual
string.  Valid only fo' \fBKeyPress\fR n' \fBKeyRelease\fR events.
.IP \fB%N\fR 5
Da keysym correspondin ta tha event, substituted as a thugged-out decimal
number n' shit.  Valid only fo' \fBKeyPress\fR n' \fBKeyRelease\fR events.
.IP \fB%P\fR 5
Da name of tha property bein updated or deleted (which
may be converted ta a XAtom rockin \fBwinfo atom\fR.) Valid
only fo' \fBProperty\fR events.
.IP \fB%R\fR 5
Da \fIroot\fR window identifier from tha event.  Valid only for
events containin a \fIroot\fR field.
.IP \fB%S\fR 5
Da \fIsubwindow\fR window identifier from tha event,
formatted as a hexadecimal number.
Valid only fo' events containin a \fIsubwindow\fR field.
.IP \fB%T\fR 5
Da \fItype\fR field from tha event.  Valid fo' all event types.
.IP \fB%W\fR 5
Da path name of tha window ta which tha event was reported (the
\fIwindow\fR field from tha event).  Valid fo' all event types.
.IP "\fB%X\fR, \fB%Y\fR" 5
Da \fIx_root\fR n'  \fIy_root\fR fieldz from tha event.
If a virtual-root window manager is bein used then tha substituted
values is tha correspondin x-coordinizzle n' y-coordinizzle up in tha virtual root.
Valid only for
\fBButtonPress\fR, \fBButtonRelease\fR, \fBKeyPress\fR, \fBKeyRelease\fR,
and \fBMotion\fR events.
Same meanin as \fB%x\fR n' \fB%y\fR, except relatizzle ta tha (virtual) root
window.
.LP
Da replacement strang fo' a %-replacement is formatted as a proper
Tcl list element.
This means dat spaces or special charactas like fuckin \fB$\fR and
\fB{\fR may be preceded by backslashes.
This guarantees dat tha strang is ghon be passed all up in tha Tcl
parser when tha bindin script is evaluated.
Most replacements is numbers or well-defined strings such
as \fBAbove\fR;  fo' these replacements no special formatting
is eva necessary.
Da most common case where reformattin occurs is fo' tha \fB%A\fR
substitution. I aint talkin' bout chicken n' gravy biatch.  For example, if \fIscript\fR is
.CS
\fBinsert\0%A\fR
.CE
and tha characta typed be a open square bracket, then tha script
actually executed will be
.CS
\fBinsert\0\e[\fR
.CE
This will cause tha \fBinsert\fR ta receive tha original gangsta replacement
strin (open square bracket) as its first argument.
If tha extra backslash had not been added, Tcl would not have been
able ta parse tha script erectly.
.SH "MULTIPLE MATCHES"
.PP
It be possible fo' nuff muthafuckin bindings ta match a given X event.
If tha bindings is associated wit different \fItag\fR's,
then each of tha bindings is ghon be executed, up in order.
By default, a funky-ass bindin fo' tha widget is ghon be executed first, followed
by a cold-ass lil class binding, a funky-ass bindin fo' its toplevel, and
an \fBall\fR binding.
Da \fBbindtags\fR command may be used ta chizzle dis order for
a particular window or ta associate additionizzle bindin tags with
the window.
.PP
Da \fBcontinue\fR n' \fBbreak\fR commandz may be used inside a
bindin script ta control tha processin of matchin scripts.
If \fBcontinue\fR is invoked, then tha current bindin script
is terminated but Tk will continue processin bindin scripts
associated wit other \fItag\fR's.
If tha \fBbreak\fR command is invoked within a funky-ass bindin script,
then dat script terminates n' no other scripts is ghon be invoked
for tha event.
.PP
If mo' than one bindin matches a particular event n' they
have tha same \fItag\fR, then da most thugged-out specific binding
is chosen n' its script is evaluated.
Da followin tests is applied, up in order, ta determine which of
several matchin sequences is mo' specific:
.RS
.IP (a)
an event pattern dat specifies a specific button or key is mo' specific
than one dat do not;
.IP (b)
a longer sequence (in termz of number
of events matched) is mo' specific than a gangbangin' finger-lickin' dirty-ass shorta sequence;
.IP (c)
if tha modifiers specified up in one pattern is a subset of the
modifiers up in another pattern, then tha pattern wit mo' modifiers
is mo' specific.
.IP (d)
a virtual event whose physical pattern matches tha sequence is less
specific than tha same physical pattern dat aint associated wit a
virtual event.
.IP (e)
given a sequence dat matches two or mo' virtual events, one
of tha virtual events is ghon be chosen yo, but tha order is undefined.
.RE
.PP
If tha matchin sequences contain mo' than one event, then tests
(c)\-(e) is applied up in order from da most thugged-out recent event ta tha least recent
event up in tha sequences.  If these tests fail ta determine a funky-ass balla, then the
most recently registered sequence is tha balla.
.PP
If there be two (or more) virtual events dat is both triggered by the
same sequence, n' both of dem virtual events is bound ta tha same window
tag, then only one of tha virtual events is ghon be triggered, n' it will
be picked at random:
.CS
event add <<Paste>> <Control\-y>
event add <<Paste>> <Button\-2>
event add <<Scroll>> <Button\-2>
\fBbind\fR Entry <<Paste>> {puts Paste}
\fBbind\fR Entry <<Scroll>> {puts Scroll}
.CE
If tha user types Control\-y, tha \fB<<Paste>>\fR binding
will be invoked yo, but if tha user presses button 2 then one of
either tha \fB<<Paste>>\fR or tha \fB<<Scroll>>\fR bindings will
be invoked yo, but exactly which one gets invoked is undefined.
.PP
If a X event do not match any of tha existin bindings, then the
event is ignored.
An unbound event aint considered ta be a error.
.SH "MULTI-EVENT SEQUENCES AND IGNORED EVENTS"
.PP
When a \fIsequence\fR specified up in a \fBbind\fR command gotz nuff
more than one event pattern, then its script is executed whenever
the recent events (leadin up ta n' includin tha current event)
match tha given sequence.  This means, fo' example, dat if button 1 is
clicked repeatedly tha sequence \fB<Double\-ButtonPress\-1>\fR will match
each button press but tha first.
If extraneous events dat would prevent a match occur up in tha middle
of a event sequence then tha extraneous events are
ignored unless they is \fBKeyPress\fR or \fBButtonPress\fR events.
For example, \fB<Double\-ButtonPress\-1>\fR will match a sequence of
pressez of button 1, even though there is ghon be \fBButtonRelease\fR
events (and possibly \fBMotion\fR events) between the
\fBButtonPress\fR events.
Furthermore, a \fBKeyPress\fR event may be preceded by any number
of other \fBKeyPress\fR events fo' modifier keys without the
modifier keys preventin a match.
For example, tha event sequence \fBaB\fR will match a press of the
\fBa\fR key, a release of tha \fBa\fR key, a press of tha \fBShift\fR
key, n' a press of tha \fBb\fR key:  tha press of \fBShift\fR is
ignored cuz it aint nuthin but a modifier key.
Finally, if nuff muthafuckin \fBMotion\fR events occur up in a row, only
the last one is used fo' purposez of matchin bindin sequences.
.SH "ERRORS"
.PP
If a error occurs up in executin tha script fo' a funky-ass bindin then the
\fBbgerror\fR mechanizzle is used ta report tha error.
Da \fBbgerror\fR command is ghon be executed at global level
(outside tha context of any Tcl procedure).
.SH "EXAMPLES"
Arrange fo' a strang describin tha motion of tha mouse ta be printed
out when tha mouse is double-clicked:
.CS
\fBbind\fR . <Double\-1> {
    puts "hi from (%x,%y)"
}
.CE
.PP
A lil GUI dat displays what tha fuck tha keysym name of tha last key
pressed is:
.CS
set keysym "Press any key"
pack [label .l \-textvariable keysym \-padx 2m \-pady 1m]
\fBbind\fR . <Key> {
    set keysym "Yo ass pressed %K"
}
.CE
.SH "SEE ALSO"
bgerror(n), bindtags(n), event(n), focus(n), grab(n), keysyms(n)
.SH KEYWORDS
binding, event
