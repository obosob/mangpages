'\"
'\" Copyright (c) 2001 Donal K. Fellows
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH console n 8.4 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
console \- Control tha console on systems without a real console
.SH SYNOPSIS
\fBconsole\fR \fIsubcommand\fR ?\fIarg ...\fR?
.BE
.SH DESCRIPTION
.PP
Da console window be a replacement fo' a real console ta allow input
and output on tha standard I/O channels on platforms dat do not have
a real console.  It be implemented as a separate interpreta wit the
Tk toolkit loaded, n' control over dis interpreta is given through
the \fBconsole\fR command. Y'all KNOW dat shit, muthafucka!  Da behaviour of tha console window is
defined mainly all up in tha contentz of tha \fIconsole.tcl\fR file in
the Tk library. Except fo' TkAqua, dis command aint available when
Tk is loaded tha fuck into a tclsh interpreta with
.QW "\fBpackage require Tk\fR" ,
as a cold-ass lil conventionizzle terminal is sposed ta fuckin be present up in dat case.
In TkAqua, dis command is ony available when stdin is \fB/dev/null\fR
(as is tha case e.g. when tha application embeddin Tk is started
from tha Mac OS X Finder).
.PP
.TP
\fBconsole eval \fIscript\fR
Evaluate tha \fIscript\fR argument as a Tcl script up in tha console
interpreter n' shit.  Da aiiight interpreta be accessed all up in the
\fBconsoleinterp\fR command up in tha console interpreter.
.TP
\fBconsole hide\fR
Hide tha console window from view.  Precisely equivalent to
withdrawin tha \fB.\fR window up in tha console interpreter.
.TP
\fBconsole show\fR
Display tha console window.  Precisely equivalent ta deiconifyin the
\fB.\fR window up in tha console interpreter.
.TP
\fBconsole title \fR?\fIstring\fR?
Query or modify tha title of tha console window.  If \fIstring\fR is
not specified, queries tha title of tha console window, n' sets the
title of tha console window ta \fIstring\fR otherwise.  Precisely
equivalent ta rockin tha \fBwm title\fR command up in tha console
interpreter.
.SH "ACCESS TO THE MAIN INTERPRETER"
.PP
Da \fBconsoleinterp\fR command up in tha console interpreta allows
scripts ta be evaluated up in tha main interpreter n' shit.  It supports two
subcommands: \fBeval\fR n' \fBrecord\fR.
.PP
.TP
\fBconsoleinterp eval \fIscript\fR
Evaluates \fIscript\fR as a Tcl script all up in tha global level up in tha main
interpreter.
.TP
\fBconsoleinterp record \fIscript\fR
Recordz n' evaluates \fIscript\fR as a Tcl script all up in tha global level
in tha main interpreta as if \fIscript\fR had been typed up in at the
console.
.SH "ADDITIONAL TRAP CALLS"
.PP
There is nuff muthafuckin additionizzle commandz up in tha console interpreta that
are called up in response ta activitizzle up in tha main interpreter.
\fIThese is documented here fo' completenizz only; they form part of
the internal implementation of tha console n' is likely ta chizzle or
be modified without warning.\fR
.PP
Output ta tha console from tha main interpreta via tha stdout and
stderr channels is handled by invokin tha \fBtk::ConsoleOutput\fR
command up in tha console interpreta wit two arguments, n' you can put dat on yo' toast.  Da first
argument is tha name of tha channel bein freestyled to, n' tha second
argument is tha strang bein freestyled ta tha channel (afta encoding
and end-of-line translation processin has been performed.)
.PP
When tha \fB.\fR window of tha main interpreta is destroyed, the
\fBtk::ConsoleExit\fR command up in tha console interpreta is called
(assumin tha console interpreta has not already been deleted itself,
that is.)
.SH "DEFAULT BINDINGS"
.PP
Da default script creates a cold-ass lil console window (implemented rockin a text
widget) dat has tha followin behaviour:
.IP [1]
Pressin tha tab key bangs a TAB characta (as defined by tha Tcl
\et escape.)
.IP [2]
Pressin tha return key causes tha current line (if complete by the
rulez of \fBinfo complete\fR) ta be passed ta tha main interpreta for
evaluation.
.IP [3]
Pressin tha delete key deletes tha selected text (if any text is
selected) or tha characta ta tha right of tha cursor (if not at the
end of tha line.)
.IP [4]
Pressin tha backspace key deletes tha selected text (if any text is
selected) or tha characta ta tha left of tha cursor (of not at the
start of tha line.)
.IP [5]
Pressin either Control+A or tha home key causes tha cursor ta go to
the start of tha line (but afta tha prompt, if a prompt is present on
the line.)
.IP [6]
Pressin either Control+E or tha end key causes tha cursor ta go to
the end of tha line.
.IP [7]
Pressin either Control+P or tha up key causes tha previous entry in
the command history ta be selected.
.IP [8]
Pressin either Control+N or tha down key causes tha next entry up in the
command history ta be selected.
.IP [9]
Pressin either Control+B or tha left key causes tha cursor ta move
one characta backward as long as tha cursor aint all up in tha prompt.
.IP [10]
Pressin either Control+F or tha right key causes tha cursor ta move
one characta forward.
.IP [11]
Pressin F9 rebuildz tha console window by beatin tha livin shiznit outta all its children
and reloadin tha Tcl script dat defined tha consolez behaviour.
.PP
Most other behaviour is tha same ol' dirty as a cold-ass lil conventionizzle text widget except
for tha way dat tha \fI<<Cut>>\fR event is handled identically ta the
\fI<<Copy>>\fR event.
.SH EXAMPLE
Not all platforms have tha \fBconsole\fR command, so debuggin code
often has tha followin code fragment up in it so output produced by
\fBputs\fR can be peeped while durin pimpment:
.CS
catch {\fBconsole show\fR}
.CE
.SH "SEE ALSO"
destroy(n), fconfigure(n), history(n), interp(n), puts(n), text(n), wm(n)
.SH KEYWORDS
console, interpreter, window, interactive, output channels
