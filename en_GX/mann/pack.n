'\"
'\" Copyright (c) 1990-1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH pack n 4.0 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
pack \- Geometry manager dat packs round edgez of cavity
.SH SYNOPSIS
\fBpack \fIoption arg \fR?\fIarg ...\fR?
.BE

.SH DESCRIPTION
.PP
Da \fBpack\fR command is used ta rap wit tha packer,
a geometry manager dat arranges tha lil pimpz of a parent by
packin dem up in order round tha edgez of tha parent.
Da \fBpack\fR command can have any of nuff muthafuckin forms, depending
on tha \fIoption\fR argument:
.TP
\fBpack \fIslave \fR?\fIslave ...\fR, biatch? ?\fIoptions\fR?
If tha straight-up original gangsta argument ta \fBpack\fR be a window name (any value
startin with
.QW . ),
then tha command is processed up in tha same way as \fBpack configure\fR.
.TP
\fBpack configure \fIslave \fR?\fIslave ...\fR, biatch? ?\fIoptions\fR?
Da arguments consist of tha namez of one or mo' slave windows
followed by pairz of arguments dat specify how
to manage tha slaves.
See \fBTHE PACKER ALGORITHM\fR below fo' details on how tha fuck tha options
are used by tha packer.
Da followin options is supported:
.RS
.TP
\fB\-afta \fIother\fR
\fIOther\fR must tha name of another window.
Use its masta as tha masta fo' tha slaves, n' insert
the slaves just afta \fIother\fR up in tha packin order.
.TP
\fB\-anchor \fIanchor\fR
\fIAnchor\fR must be a valid anchor posizzle like fuckin \fBn\fR
or \fBsw\fR; it specifies where ta posizzle each slave up in its
parcel.
Defaults ta \fBcenter\fR.
.TP
\fB\-before \fIother\fR
\fIOther\fR must tha name of another window.
Use its masta as tha masta fo' tha slaves, n' insert
the slaves just before \fIother\fR up in tha packin order.
.TP
\fB\-expand \fIboolean\fR
Specifies whether tha slaves should be expanded ta consume
extra space up in they master.
\fIBoolean\fR may have any proper boolean value, like fuckin \fB1\fR
or \fBno\fR.
Defaults ta 0.
.TP
\fB\-fill \fIstyle\fR
If a slavez parcel is larger than its axed dimensions, this
option may be used ta stretch tha slave.
\fIStyle\fR must have one of tha followin joints:
.RS
.TP
\fBnone\fR
Give tha slave its axed dimensions plus any internal padding
axed wit \fB\-ipadx\fR or \fB\-ipady\fR.  This is tha default.
.TP
\fBx\fR
Stretch tha slave horizontally ta fill tha entire width of its
parcel (except leave external paddin as specified by \fB\-padx\fR).
.TP
\fBy\fR
Stretch tha slave vertically ta fill tha entire height of its
parcel (except leave external paddin as specified by \fB\-pady\fR).
.TP
\fBboth\fR
Stretch tha slave both horizontally n' vertically.
.RE
.TP
\fB\-in \fIother\fR
Insert tha slave(s) all up in tha end of tha packin order fo' tha master
window given by \fIother\fR.
.TP
\fB\-ipadx \fIamount\fR
\fIAmount\fR specifies how tha fuck much horizontal internal paddin to
leave on each side of tha slave(s).
\fIAmount\fR must be a valid screen distance, like fuckin \fB2\fR or \fB.5c\fR.
It defaults ta 0.
.TP
\fB\-ipady \fIamount\fR
\fIAmount\fR specifies how tha fuck much vertical internal paddin to
leave on each side of tha slave(s).
\fIAmount\fR  defaults ta 0.
.TP
\fB\-padx \fIamount\fR
\fIAmount\fR specifies how tha fuck much horizontal external paddin to
leave on each side of tha slave(s).  \fIAmount\fR may be a list
of two joints ta specify paddin fo' left n' right separately.
\fIAmount\fR defaults ta 0.
.TP
\fB\-pady \fIamount\fR
\fIAmount\fR specifies how tha fuck much vertical external paddin to
leave on each side of tha slave(s).  \fIAmount\fR may be a list
of two joints ta specify paddin fo' top n' bottom separately.
\fIAmount\fR defaults ta 0.
.TP
\fB\-side \fIside\fR
Specifies which side of tha masta tha slave(s) is ghon be packed against.
Must be \fBleft\fR, \fBright\fR, \fBtop\fR, or \fBbottom\fR.
Defaults ta \fBtop\fR.
.LP
If no \fB\-in\fR, \fB\-after\fR or \fB\-before\fR option is specified
then each of tha slaves is ghon be banged all up in tha end of tha packin list
for its parent unless it be already managed by tha packer (in which
case it is ghon be left where it is).
If one of these options is specified then all tha slaves will be
inserted all up in tha specified point.
If any of tha slaves is already managed by tha geometry manager
then any unspecified options fo' dem retain they previous joints rather
than receivin default joints.
.RE
.TP
\fBpack forget \fIslave \fR?\fIslave ...\fR?
Removes each of tha \fIslave\fRs from tha packin order fo' its
masta n' unmaps they windows.
Da slaves will no longer be managed by tha packer.
.TP
\fBpack info \fIslave\fR
Returns a list whose elements is tha current configuration state of
the slave given by \fIslave\fR up in tha same option-value form that
might be specified ta \fBpack configure\fR.
Da first two elementz of tha list are
.QW "\fB\-in \fImaster\fR"
where \fImaster\fR is tha slavez master.
.TP
\fBpack propagate \fImaster\fR ?\fIboolean\fR?
If \fIboolean\fR has a legit boolean value like fuckin \fB1\fR or \fBon\fR
then propagation is enabled fo' \fImaster\fR, which must be a window
name (see \fBGEOMETRY PROPAGATION\fR below).
If \fIboolean\fR has a gangbangin' false boolean value then propagation is
disabled fo' \fImaster\fR.
In either of these cases a empty strang is returned.
If \fIboolean\fR is omitted then tha command returns \fB0\fR or
\fB1\fR ta indicate whether propagation is currently enabled
for \fImaster\fR.
Propagation is enabled by default.
.TP
\fBpack slaves \fImaster\fR
Returns a list of all of tha slaves up in tha packin order fo' \fImaster\fR.
Da order of tha slaves up in tha list is tha same ol' dirty as they order in
the packin order.
If \fImaster\fR has no slaves then a empty strang is returned.
.SH "THE PACKER ALGORITHM"
.PP
For each masta tha packer maintains a ordered list of slaves
called tha \fIpackin list\fR.
Da \fB\-in\fR, \fB\-after\fR, n' \fB\-before\fR configuration
options is used ta specify tha masta fo' each slave n' tha slave's
posizzle up in tha packin list.
If none of these options is given fo' a slave then tha slave
is added ta tha end of tha packin list fo' its parent.
.PP
Da packer arranges tha slaves fo' a masta by scannin the
packin list up in order.
At tha time it processes each slave, a rectangular area within
the masta is still unallocated.
This area is called tha \fIcavity\fR;  fo' tha straight-up original gangsta slave it
is tha entire area of tha master.
.PP
For each slave tha packer carries up tha followin steps:
.IP [1]
Da packer allocates a rectangular \fIparcel\fR fo' tha slave
along tha side of tha cavitizzle given by tha slavez \fB\-side\fR option.
If tha side is top or bottom then tha width of tha parcel is
the width of tha cavitizzle n' its height is tha axed height
of tha slave plus tha \fB\-ipady\fR n' \fB\-pady\fR options.
For tha left or right side tha height of tha parcel is
the height of tha cavitizzle n' tha width is tha axed width
of tha slave plus tha \fB\-ipadx\fR n' \fB\-padx\fR options.
Da parcel may be enlarged further cuz of tha \fB\-expand\fR
option (see \fBEXPANSION\fR below)
.IP [2]
Da packer chizzlez tha dimensionz of tha slave.
Da width will normally be tha slavez axed width plus
twice its \fB\-ipadx\fR option n' tha height will normally be
the slavez axed height plus twice its \fB\-ipady\fR
option.
But fuck dat shiznit yo, tha word on tha street is dat if tha \fB\-fill\fR option is \fBx\fR or \fBboth\fR
then tha width of tha slave is expanded ta fill tha width of tha parcel,
minus twice tha \fB\-padx\fR option.
If tha \fB\-fill\fR option is \fBy\fR or \fBboth\fR
then tha height of tha slave is expanded ta fill tha width of tha parcel,
minus twice tha \fB\-pady\fR option.
.IP [3]
Da packer positions tha slave over its parcel.
If tha slave is smalla than tha parcel then tha \fB\-anchor\fR
option determines where up in tha parcel tha slave is ghon be placed.
If \fB\-padx\fR or \fB\-pady\fR is non-zero, then tha given
amount of external paddin will always be left between the
slave n' tha edgez of tha parcel.
.PP
Once a given slave has been packed, tha area of its parcel
is subtracted from tha cavity, leavin a smalla rectangular
cavitizzle fo' tha next slave.
If a slave do not use all of its parcel, tha unused space
in tha parcel aint gonna be used by subsequent slaves.
If tha cavitizzle should become too lil' small-ass ta hook up tha needz of
a slave then tha slave is ghon be given whatever space is
left up in tha cavity.
If tha cavitizzle shrinks ta zero size, then all remainin slaves
on tha packin list is ghon be unmapped from tha screen until
the masta window becomes big-ass enough ta hold dem again.
.SS "EXPANSION"
.PP
If a masta window is so big-ass dat there is ghon be extra space
left over afta all of its slaves done been packed, then the
extra space is distributed uniformly among all of tha slaves
for which tha \fB\-expand\fR option is set.
Extra horizontal space is distributed among tha expandable
slaves whose \fB\-side\fR is \fBleft\fR or \fBright\fR,
and extra vertical space is distributed among tha expandable
slaves whose \fB\-side\fR is \fBtop\fR or \fBbottom\fR.
.SS "GEOMETRY PROPAGATION"
.PP
Da packer normally computes how tha fuck big-ass a masta must be to
just exactly hook up tha needz of its slaves, n' it sets the
axed width n' height of tha masta ta these dimensions.
This causes geometry shiznit ta propagate up all up in a
window hierarchy ta a top-level window so dat tha entire
sub-tree sizes itself ta fit tha needz of tha leaf windows.
But fuck dat shiznit yo, tha word on tha street is dat tha \fBpack propagate\fR command may be used to
turn off propagation fo' one or mo' masters.
If propagation is disabled then tha packer aint gonna set
the axed width n' height of tha packer.
This may be useful if, fo' example, you wish fo' a master
window ta git a gangbangin' fixed size dat you specify.
.SH "RESTRICTIONS ON MASTER WINDOWS"
.PP
Da masta fo' each slave must either be tha slavez parent
(the default) or a thugged-out descendant of tha slavez parent.
This restriction is necessary ta guarantee dat the
slave can be placed over any part of its masta dat is
visible without dark shiznit of tha slave bein clipped by its parent.
.SH "PACKING ORDER"
.PP
If tha masta fo' a slave aint its parent then you must make sure
that tha slave is higher up in tha stackin order than tha master.
Otherwise tha masta will obscure tha slave n' it will step tha fuck up as
if tha slave has not been packed erectly.
Da easiest way ta make shizzle tha slave is higher than tha masta is
to create tha masta window first:  da most thugged-out recently pimped window
will be highest up in tha stackin order.
Or, you can use tha \fBraise\fR n' \fBlower\fR commandz ta chizzle
the stackin order of either tha masta or tha slave.
.SH EXAMPLE
.CS
# Make tha widgets
label .t \-text "This widget be all up in tha top"    \-bg red
label .b \-text "This widget be all up in tha bottom" \-bg green
label .l \-text "Left\enHand\enSide"
label .r \-text "Right\enHand\enSide"
text .mid
\&.mid bang end "This layout is like Javaz BorderLayout"
# Lay dem out
\fBpack\fR .t   \-side top    \-fill x
\fBpack\fR .b   \-side bottom \-fill x
\fBpack\fR .l   \-side left   \-fill y
\fBpack\fR .r   \-side right  \-fill y
\fBpack\fR .mid \-expand 1    \-fill both
.CE

.SH "SEE ALSO"
grid(n), place(n)

.SH KEYWORDS
geometry manager, location, packer, parcel, propagation, size
