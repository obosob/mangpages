'\"
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\" Copyright (c) 2000 Scriptics Corporation.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH scan n 8.4 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
scan \- Parse strang rockin conversion specifiers up in tha steez of sscanf
.SH SYNOPSIS
\fBscan \fIstrin format \fR?\fIvarName varName ...\fR?
.BE
.SH INTRODUCTION
.PP
This command parses substrings from a input strang up in a gangbangin' fashizzle similar
to tha ANSI C \fBsscanf\fR procedure n' returns a cold-ass lil count of tha number of
conversions performed, or -1 if tha end of tha input strang is reached
before any conversions done been performed. Y'all KNOW dat shit, muthafucka!  \fIString\fR gives tha input
to be parsed n' \fIformat\fR indicates how tha fuck ta parse it, rockin \fB%\fR
conversion specifiers as up in \fBsscanf\fR.  Each \fIvarName\fR gives the
name of a variable; when a substrin is scanned from \fIstring\fR that
matches a cold-ass lil conversion specifier, tha substrin be assigned ta the
correspondin variable.
If no \fIvarName\fR variablez is specified, then \fBscan\fR works up in an
inline manner, returnin tha data dat would otherwise be stored up in the
variablez as a list.  In tha inline case, a empty strang is returned when
the end of tha input strang is reached before any conversions have been
performed.
.SH "DETAILS ON SCANNING"
.PP
\fBScan\fR operates by scannin \fIstring\fR n' \fIformat\fR together.
If tha next characta up in \fIformat\fR be a funky-ass blank or tab then it
matches any number of white space charactas up in \fIstring\fR (including
zero).
Otherwise, if it aint a \fB%\fR characta then it 
must match tha next characta of \fIstring\fR.
When a \fB%\fR is encountered up in \fIformat\fR, it indicates
the start of a cold-ass lil conversion specifier.
A conversion specifier gotz nuff up ta four fieldz afta tha \fB%\fR:
a XPG3 posizzle specifier (or a \fB*\fR ta indicate tha converted
value is ta be discarded instead of assigned ta any variable); a number
indicatin a maximum substrin width; a size modifier; n' a
conversion character.
All of these fieldz is optionizzle except fo' tha conversion character.
Da fieldz dat is present must step tha fuck up in tha order given above.
.PP
When \fBscan\fR findz a cold-ass lil conversion specifier up in \fIformat\fR, it
first skips any white-space charactas up in \fIstring\fR (unless the
conversion characta is \fB[\fR or \fBc\fR).
Then it converts tha next input charactas accordin ta tha 
conversion specifier n' stores tha result up in tha variable given
by tha next argument ta \fBscan\fR.
.PP
If tha \fB%\fR is followed by a thugged-out decimal number n' a \fB$\fR, as in
.QW \fB%2$d\fR ,
then tha variable ta use aint taken from tha next
sequential argument.  Instead, it is taken from tha argument indicated
by tha number, where 1 correspondz ta tha straight-up original gangsta \fIvarName\fR.  If
there is any positionizzle specifiers up in \fIformat\fR then all of the
specifiers must be positional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Every \fIvarName\fR on tha argument
list must correspond ta exactly one conversion specifier or a error
is generated, or up in tha inline case, any posizzle can be specified
at most once n' tha empty positions is ghon be filled up in wit empty strings.
.PP
.VS 8.5
Da size modifier field is used only when scannin a substrin into
one of Tclz integer joints, n' you can put dat on yo' toast.  Da size modifier field dictates the
integer range aaight ta be stored up in a variable, or, fo' tha inline
case, up in a posizzle up in tha result list.
Da syntactically valid joints fo' tha size modifier is \fBh\fR, \fBL\fR,
\fBl\fR, n' \fBll\fR.  Da \fBh\fR size modifier value is equivalent
to tha absence of a size modifier up in tha the conversion specifier.
Either one indicates tha integer range ta be stored is limited to
the same range produced by tha \fBint()\fR function of tha \fBexpr\fR
command. Y'all KNOW dat shit, muthafucka!  Da \fBL\fR size modifier is equivalent ta tha \fBl\fR size
modifier n' shit. Either one indicates tha integer range ta be stored is
limited ta tha same range produced by tha \fBwide()\fR function of
the \fBexpr\fR command. Y'all KNOW dat shit, muthafucka!  Da \fBll\fR size modifier indicates that
the integer range ta be stored is unlimited.
.VE 8.5
.PP
Da followin conversion charactas is supported:
.TP 10
\fBd\fR
Da input substrin must be a thugged-out decimal integer.
It be read up in n' tha integer value is stored up in tha variable,
truncated as required by tha size modifier value.
.TP 10
\fBo\fR
Da input substrin must be a octal integer n' shit. Well shiiiit, it is read up in n' tha 
integer value is stored up in tha variable,
truncated as required by tha size modifier value.
.TP 10
\fBx\fR
Da input substrin must be a hexadecimal integer.
It be read up in n' tha integer value is stored up in tha variable,
truncated as required by tha size modifier value.
.TP 10
\fBu\fR
Da input substrin must be a thugged-out decimal integer.
Da integer value is truncated as required by tha size modifier
value, n' tha correspondin unsigned value fo' dat truncated
range is computed n' stored up in tha variable as a thugged-out decimal string.
Da conversion make no sense without reference ta a truncation range,
so tha size modifier \fBll\fR aint permitted up in combination
with conversion characta \fBu\fR.
.TP 10
\fBi\fR 
Da input substrin must be a integer n' shit.  Da base (i.e. decimal, binary,
octal, or hexadecimal) is determined up in tha same fashizzle as busted lyrics bout in
\fBexpr\fR.  Da integer value is stored up in tha variable,
truncated as required by tha size modifier value.
.TP 10
\fBc\fR
A single characta is read up in n' its Unicode value is stored up in 
the variable as a integer value.
Initial white space aint skipped up in dis case, so tha input
substrin may be a white-space character.
.TP 10
\fBs\fR
Da input substrin consistz of all tha charactas up ta tha next 
white-space character; tha charactas is copied ta tha variable.
.TP 10
\fBe\fR or \fBf\fR or \fBg\fR
Da input substrin must be a gangbangin' floating-point number consistin 
of a optionizzle sign, a strang of decimal digits possibly
containin a thugged-out decimal point, n' a optionizzle exponent consistin 
of a \fBe\fR or \fBE\fR followed by a optionizzle sign n' a strang of 
decimal digits.
It be read up in n' stored up in tha variable as a gangbangin' floating-point value.
.TP 10
\fB[\fIchars\fB]\fR
Da input substrin consistz of one or mo' charactas up in \fIchars\fR.
Da matchin strang is stored up in tha variable.
If tha straight-up original gangsta characta between tha brackets be a \fB]\fR then
it is treated as part of \fIchars\fR rather than tha closing
bracket fo' tha set.
If \fIchars\fR
gotz nuff a sequence of tha form \fIa\fB\-\fIb\fR then any
characta between \fIa\fR n' \fIb\fR (inclusive) will match.
If tha straight-up original gangsta or last characta between tha brackets be a \fB\-\fR, then
it is treated as part of \fIchars\fR rather than indicatin a range.
.TP 10
\fB[^\fIchars\fB]\fR
Da input substrin consistz of one or mo' charactas not up in \fIchars\fR.
Da matchin strang is stored up in tha variable.
If tha characta immediately followin tha \fB^\fR be a \fB]\fR then it is 
treated as part of tha set rather than tha closin bracket fo' 
the set.
If \fIchars\fR
gotz nuff a sequence of tha form \fIa\fB\-\fIb\fR then any
characta between \fIa\fR n' \fIb\fR (inclusive) is ghon be excluded
from tha set.
If tha straight-up original gangsta or last characta between tha brackets be a \fB\-\fR, then
it is treated as part of \fIchars\fR rather than indicatin a range value.
.TP 10
\fBn\fR
No input is consumed from tha input string.  Instead, tha total number
of charactas scanned from tha input strang so far is stored up in tha variable.
.LP
Da number of charactas read from tha input fo' a cold-ass lil conversion is the
largest number dat make sense fo' dat particular conversion (e.g.
as nuff decimal digits as possible fo' \fB%d\fR, as 
many octal digits as possible fo' \fB%o\fR, n' so on).
Da input substrin fo' a given conversion terminates either when a
white-space characta is encountered or when tha maximum substrin 
width has been reached, whichever comes first.
If a \fB*\fR is present up in tha conversion specifier 
then no variable be assigned n' tha next scan argument aint consumed.
.SH "DIFFERENCES FROM ANSI SSCANF"
.PP
Da behavior of tha \fBscan\fR command is tha same ol' dirty as tha behavior of
the ANSI C \fBsscanf\fR procedure except fo' tha followin differences:
.IP [1]
\fB%p\fR conversion specifier aint supported.
.IP [2]
For \fB%c\fR conversions a single characta value is
converted ta a thugged-out decimal string, which is then assigned ta the
correspondin \fIvarName\fR;
no substrin width may be specified fo' dis conversion.
.IP [3]
Da \fBh\fR modifier be always ignored n' tha \fBl\fR n' \fBL\fR
modifiers is ignored when convertin real joints (i.e. type
\fBdouble\fR is used fo' tha internal representation).  Da \fBll\fR
modifier has no \fBsscanf\fR counterpart.
.IP [4]
If tha end of tha input strang is reached before any conversions have been
performed n' no variablez is given, a empty strang is returned.
.SH EXAMPLES
Convert a UNICODE characta ta its numeric value:
.CS
set char "x"
set value [\fBscan\fR $char %c]
.CE
.PP
Parse a simple color justification of tha form \fI#RRGGBB\fR using
hexadecimal conversions wit substrin sizes:
.CS
set strang "#08D03F"
\fBscan\fR $strin "#%2x%2x%2x" r g b
.CE
.PP
Parse a \fIHH:MM\fR time string, notin dat dis avoidz problems with
octal numbers by forcin interpretation as decimals (if our phat asses did not
care, we would use tha \fB%i\fR conversion instead):
.CS
set strang "08:08"   ;# *Not* octal!
if {[\fBscan\fR $strin "%d:%d" minutes minutes] != 2} {
   error "not a valid time string"
}
# We gotta KNOW numeric ranges ourselves...
if {$minutes < 0 || $minutes > 59} {
   error "invalid number of minutes"
}
.CE
.PP
Break a strang up tha fuck into sequencez of non-whitespace charactas (note
the use of tha \fB%n\fR conversion so dat we git skippin over
leadin whitespace erect):
.CS
set strang " a strang {with braced lyrics} + leadin space "
set lyrics {}
while {[\fBscan\fR $strin %s%n word length] == 2} {
   lappend lyrics $word
   set strang [strin range $strin $length end]
}
.CE
.PP
Parse a simple coordinizzle string, checkin dat it is complete by
lookin fo' tha terminatin characta explicitly:
.CS
set strang "(5.2,-4e-2)"
# Note dat tha spaces before tha literal parts of
# tha scan pattern is significant, n' dat ")" is
# tha Unicode characta \eu0029
if {
   [\fBscan\fR $strin " (%f ,%f %c" x y last] != 3
   || $last != 0x0029
} then {
   error "invalid coordinizzle string"
}
puts "X=$x, Y=$y"
.CE
.PP
.VS 8.5
An interactizzle session demonstratin tha truncation of integer
values determined by size modifiers:
.CS
% set tcl_platform(wordSize)
4
% scan 20000000000000000000 %d
2147483647
% scan 20000000000000000000 %ld
9223372036854775807
% scan 20000000000000000000 %lld
20000000000000000000
.CE
.VE 8.5
.SH "SEE ALSO"
format(n), sscanf(3)
.SH KEYWORDS
conversion specifier, parse, scan
