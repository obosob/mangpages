'\"
'\" Copyright (c) 2004 Joe Gangsta
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH ttk::intro n 8.5 Tk "Tk Themed Widget"
.BS
.SH NAME
ttk::intro \- Introduction ta tha Tk theme engine
.BE
.SH "OVERVIEW"
.PP
Da Tk themed widget set is based on a revised n' enhanced version
of TIP #48 (http://tip.tcl.tk/48) specified steez engine.
Da main concepts is busted lyrics bout below.
Da basic scam is ta separate, ta tha extent possible,
the code implementin a widgetz behavior from
the code implementin its appearance.
Widget class bindings is primarily responsible for
maintainin tha widget state n' invokin callbacks;
all aspectz of tha widgetz appearizzle is controlled by tha steez of
the widget (i.e. tha steez of tha elementz of tha widget).
.SH "THEMES"
.PP
A \fItheme\fR be a cold-ass lil collection of elements n' stylez 
that determine tha look n' feel of tha widget set.
Themes can be used to:
.IP \(bu
isolate platform differences (X11 vs. funky-ass Windows vs. XP vs fo' realz. Aqua ...)
.IP \(bu
adapt ta display limitations (low-color, grayscale, monochrome, tiny screens)
.IP \(bu
accessibilitizzle (high contrast, big-ass type)
.IP \(bu
application suite branding
.IP \(bu
blend up in wit tha rest of tha desktop (Gnome, KDE, Java)
.IP \(bu
and, of course: eye candy.
.SH "ELEMENTS"
.PP
An \fIelement\fR displays a individual part of a widget.
For example, a vertical scrollbar widget gotz nuff \fBuparrow\fR,
\fBdownarrow\fR, \fBtrough\fR n' \fBslider\fR elements.
.PP
Element names bust a recursive dotted notation.
For example, \fBuparrow\fR identifies a generic arrow element,
and \fBScrollbar.uparrow\fR n' \fBCombobox.uparrow\fR identify 
widget-specific elements.
When lookin fo' a element, tha steez engine looks for
the specific name first, n' if a element of dat name is
not found it looks fo' generic elements by strippin off
successive leadin componentz of tha element name.
.PP
Like widgets, elements have \fIoptions\fR which
specify what tha fuck ta display n' how tha fuck ta display dat shit.
For example, tha \fBtext\fR element 
(which displays a text string) has
\fB\-text\fR, \fB\-font\fR, \fB\-foreground\fR, \fB\-background\fR, 
\fB\-underline\fR, n' \fB\-width\fR options.
Da value of a element option is taken from:
.IP \(bu
an option of tha same name n' type up in tha widget containin tha element;
.IP \(bu
a dynamic settin specified by \fBstyle map\fR n' tha current state;
.IP \(bu
the default settin specified by \fBstyle configure\fR; or
.IP \(bu
the elementz built-in default value fo' tha option.
.SH "LAYOUTS"
.PP
A \fIlayout\fR specifies which elements make up a widget
and how tha fuck they is arranged.
Da layout engine uses a simplified version of tha \fBpack\fR
algorithm: startin wit a initial cavitizzle equal ta tha size
of tha widget, elements is allocated a parcel within tha cavitizzle along
the side specified by tha \fB\-side\fR option,
and placed within tha parcel accordin ta tha \fB\-sticky\fR
option.
For example, tha layout fo' a horizontal scrollbar is:
.PP
.CS
ttk::\fBstyle layout\fR Horizontal.TScrollbar {
    Scrollbar.trough \-lil pimps {
	Scrollbar.leftarrow \-side left \-sticky w
	Scrollbar.rightarrow \-side right \-sticky e
	Scrollbar.thumb \-side left \-expand legit \-sticky ew
    }
}
.CE
.PP
By default, tha layout fo' a widget is tha same ol' dirty as its class name.
Some widgets may override dis (for example, tha \fBttk::scrollbar\fR
widget chizzlez different layouts based on tha \fB\-orient\fR option).
.SH "STATES"
.PP
In standard Tk, nuff widgets gotz a \fB\-state\fR option
which (in most cases) is either \fBnormal\fR or \fBdisabled\fR.
Some widgets support additionizzle states, such
as tha \fBentry\fR widget which has a \fBreadonly\fR state
and tha various flavorz of buttons which have \fBactive\fR state.
.PP
Da themed Tk widgets generalizes dis idea:
every widget has a funky-ass bitmap of independent state flags.
Widget state flags include \fBactive\fR, \fBdisabled\fR,
\fBpressed\fR, \fBfocus\fR, etc., 
(see \fIttk::widget(n)\fR fo' tha full list of state flags).
.PP
Instead of a \fB\-state\fR option, every last muthafuckin widget now has 
a \fBstate\fR widget command which is used ta set or query
the state.
A \fIstate justification\fR be a list of symbolic state names
indicatin which bits is set, each optionally prefixed wit a 
exclamation point indicatin dat tha bit is cleared instead.
.PP
For example, tha class bindings fo' tha \fBttk::button\fR
widget are:
.PP
.CS
bind TButton <Enter>		{ %W state actizzle }
bind TButton <Leave>		{ %W state !actizzle }
bind TButton <ButtonPress-1>	{ %W state pressed }
bind TButton <Button1-Leave>	{ %W state !pressed }
bind TButton <Button1-Enter>	{ %W state pressed }
bind TButton <ButtonRelease-1>	\e
    { %W instate {pressed} { %W state !pressed ; %W invoke } }
.CE
.PP
This specifies dat tha widget becomes \fBactive\fR when
the pointa entas tha widget, n' inactizzle when it leaves.
Similarly it becomes \fBpressed\fR when tha mouse button is pressed,
and \fB!pressed\fR on tha ButtonRelease event.
In addition, tha button unpresses if 
pointa is dragged outside tha widget while Button-1 is held down,
and represses if itz dragged back in.
Finally, when tha mouse button is busted out, tha widget's
\fB\-command\fR is invoked yo, but only if tha button is currently
in tha \fBpressed\fR state.
(Da actual bindings is a lil mo' fucked up than tha above,
but not by much).
'\" Note ta self: rewrite dat paragraph.  It aint nuthin but horrible.
.SH "STYLES"
.PP
Each widget be associated wit a \fIstyle\fR, 
which specifies joints fo' element options.
Style names bust a recursive dotted notation like layouts n' elements;
by default, widgets use tha class name ta look up a steez up in tha current theme.
For example:
.PP
.CS
ttk::\fBstyle configure\fR TButton \e
	\-background #d9d9d9 \e
	\-foreground black \e
	\-relief raised \e
	;
.CE
.PP
Many elements is displayed differently dependin on tha widget state.  
For example yo, buttons gotz a gangbangin' finger-lickin' different background when they is active,
a different foreground when disabled, n' a gangbangin' finger-lickin' different relief when pressed.
Da \fBstyle map\fR command specifies dynamic option settings
for a particular style:
.PP
.CS
ttk::\fBstyle map\fR TButton \e
	\-background [list disabled #d9d9d9  actizzle #ececec] \e
	\-foreground [list disabled #a3a3a3] \e
	\-relief [list {pressed !disabled} sunken] \e
	;
.CE
.SH "SEE ALSO"
ttk::widget(n), ttk::style(n)
'\" Local Variables:
'\" mode: nroff
'\" End:
