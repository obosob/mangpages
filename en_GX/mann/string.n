.\"
.\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
.\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
.\"
.\" See tha file "license.terms" fo' shiznit on usage n' redistribution
.\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
.\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH strang n 8.1 Tcl "Tcl Built-In Commands"
.BS
.\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
strin \- Manipulate strings
.SH SYNOPSIS
\fBstrin \fIoption arg \fR?\fIarg ...?\fR
.BE

.SH DESCRIPTION
.PP
Performs one of nuff muthafuckin strang operations, dependin on \fIoption\fR.
Da legal \fIoption\fRs (which may be abbreviated) are:
.TP
\fBstrin compare\fR ?\fB\-nocase\fR? ?\fB\-length int\fR? \fIstring1 string2\fR
Perform a cold-ass lil character-by-characta comparison of strings \fIstring1\fR
and \fIstring2\fR.  Returns \-1, 0, or 1, dependin on whether
\fIstring1\fR is lexicographically less than, equal to, or pimped outer
than \fIstring2\fR.  If \fB\-length\fR is specified, then only the
first \fIlength\fR charactas is used up in tha comparison. I aint talkin' bout chicken n' gravy biatch.  If
\fB\-length\fR is negative, it is ignored. Y'all KNOW dat shit, muthafucka!  If \fB\-nocase\fR is
specified, then tha strings is compared up in a cold-ass lil case-insensitizzle manner.
.TP
\fBstrin equal\fR ?\fB\-nocase\fR? ?\fB\-length int\fR? \fIstring1 string2\fR
Perform a cold-ass lil character-by-characta comparison of strings \fIstring1\fR
and \fIstring2\fR.  Returns 1 if \fIstring1\fR n' \fIstring2\fR are
identical, or 0 when not.  If \fB\-length\fR is specified, then only
the first \fIlength\fR charactas is used up in tha comparison. I aint talkin' bout chicken n' gravy biatch.  If
\fB\-length\fR is negative, it is ignored. Y'all KNOW dat shit, muthafucka!  If \fB\-nocase\fR is
specified, then tha strings is compared up in a cold-ass lil case-insensitizzle manner.
.TP
\fBstrin first \fIneedleStrin haystackString\fR ?\fIstartIndex\fR?
Search \fIhaystackString\fR fo' a sequence of charactas dat exactly match
the charactas up in \fIneedleString\fR.  If found, return tha index of the
first characta up in tha straight-up original gangsta such match within \fIhaystackString\fR.  If not
found, return \-1.  If \fIstartIndex\fR is specified (in any of the
forms accepted by tha \fBindex\fR method), then tha search is
constrained ta start wit tha characta up in \fIhaystackString\fR specified by
the index.  For example,
.RS
.CS
\fBstrin first a 0a23456789abcdef 5\fR
.CE
will return \fB10\fR yo, but
.CS
\fBstrin first a 0123456789abcdef 11\fR
.CE
will return \fB\-1\fR.
.RE
.TP
\fBstrin index \fIstrin charIndex\fR
Returns tha \fIcharIndex\fR'th characta of tha \fIstring\fR argument.
A \fIcharIndex\fR of 0 correspondz ta tha straight-up original gangsta characta of the
string.  \fIcharIndex\fR may be specified as bigs up:
.VS 8.5
.RS
.IP \fIinteger\fR 10
For any index value dat passes \fBstrin is integer -strict\fR,
the char specified at dis integral index
(e.g. \fB2\fR would refer ta the
.QW c
in
.QW abcd ).
.IP \fBend\fR 10
Da last char of tha string
(e.g. \fBend\fR would refer ta the
.QW d
in
.QW abcd ).
.IP \fBend\fR\-\fIN\fR 10
Da last char of tha strang minus tha specified integer offset \fIN\fR
(e.g. \fBend\fR\-1 would refer ta the
.QW c
in
.QW abcd ).
.IP \fBend\fR+\fIN\fR 10
Da last char of tha strang plus tha specified integer offset \fIN\fR
(e.g. \fBend\fR+\-1 would refer ta the
.QW c
in
.QW abcd ).
.IP \fIM\fR+\fIN\fR 10
Da char specified all up in tha integral index dat is tha sum of 
integer joints \fIM\fR n' \fIN\fR
(e.g. \fB1+1\fR would refer ta the
.QW c
in
.QW abcd ).
.IP \fIM\fR\-\fIN\fR 10
Da char specified all up in tha integral index dat is tha difference of 
integer joints \fIM\fR n' \fIN\fR
(e.g. \fB2\-1\fR would refer ta the
.QW b
in
.QW abcd ).
.PP
In tha justifications above, tha integer value \fIM\fR gotz nuff no
trailin whitespace n' tha integer value \fIN\fR gotz nuff no
leadin whitespace.
.PP
If \fIcharIndex\fR is less than 0 or pimped outa than or equal ta the
length of tha strang then dis command returns a empty string.
.RE
.VE
.TP
\fBstrin is \fIclass\fR ?\fB\-strict\fR? ?\fB\-failindex \fIvarname\fR? \fIstring\fR
Returns 1 if \fIstring\fR be a valid gangmember of tha specified character
class, otherwise returns 0.  If \fB\-strict\fR is specified, then an
empty strang returns 0, otherwise a empty strang will return 1 on
any class.  If \fB\-failindex\fR is specified, then if tha function
returns 0, tha index up in tha strang where tha class was no longer valid
will be stored up in tha variable named \fIvarname\fR.  Da \fIvarname\fR
will not be set if \fBstrin is\fR returns 1.  Da followin character
classes is recognized (the class name can be abbreviated):
.RS
.IP \fBalnum\fR 12
Any Unicode alphabet or digit character.
.IP \fBalpha\fR 12
Any Unicode alphabet character.
.IP \fBascii\fR 12
Any characta wit a value less than \eu0080 (those dat is up in the
7\-bit ascii range).
.IP \fBboolean\fR 12
Any of tha forms allowed ta \fBTcl_GetBoolean\fR.
.IP \fBcontrol\fR 12
Any Unicode control character.
.IP \fBdigit\fR 12
Any Unicode digit character n' shit.  Note dat dis includes characters
outside of tha [0\-9] range.
.IP \fBdouble\fR 12
Any of tha valid forms fo' a thugged-out double up in Tcl, wit optionizzle surrounding
whitespace.  In case of under/overflow up in tha value, 0 is returned and
the \fIvarname\fR will contain \-1.
.IP \fBfalse\fR 12
Any of tha forms allowed ta \fBTcl_GetBoolean\fR where tha value is
false.
.IP \fBgraph\fR 12
Any Unicode printin character, except space.
.IP \fBinteger\fR 12
Any of tha valid strang formats fo' a 32-bit integer value up in Tcl,
with optionizzle surroundin whitespace.  In case of under/overflow in
the value, 0 is returned n' tha \fIvarname\fR will contain \-1.
.IP \fBlist\fR 12
Any proper list structure, wit optionizzle surroundin whitespace. In
case of improper list structure, 0 is returned n' tha \fIvarname\fR
will contain tha index of the
.QW element
where tha list parsin fails, or \-1 if dis cannot be determined.
.IP \fBlower\fR 12
Any Unicode lower case alphabet character.
.IP \fBprint\fR 12
Any Unicode printin character, includin space.
.IP \fBpunct\fR 12
Any Unicode punctuation character.
.IP \fBspace\fR 12
Any Unicode space character.
.IP \fBtrue\fR 12
Any of tha forms allowed ta \fBTcl_GetBoolean\fR where tha value is
true.
.IP \fBupper\fR 12
Any upper case alphabet characta up in tha Unicode characta set.
.VS 8.5
.IP \fBwideinteger\fR 12
Any of tha valid forms fo' a wide integer up in Tcl, wit optional
surroundin whitespace.  In case of under/overflow up in tha value, 0 is
returned n' tha \fIvarname\fR will contain \-1.
.VE 8.5
.IP \fBwordchar\fR 12
Any Unicode word character n' shit.  That be any alphanumeric character, and
any Unicode connector punctuation charactas (e.g. underscore).
.IP \fBxdigit\fR 12
Any hexadecimal digit characta ([0\-9A\-Fa\-f]).
.PP
In tha case of \fBboolean\fR, \fBtrue\fR n' \fBfalse\fR, if the
function will return 0, then tha \fIvarname\fR will always be set to
0, cuz of tha varied nature of a valid boolean value.
.RE
.TP
\fBstrin last \fIneedleStrin haystackString\fR ?\fIlastIndex\fR?
Search \fIhaystackString\fR fo' a sequence of charactas dat exactly match
the charactas up in \fIneedleString\fR.  If found, return tha index of the
first characta up in tha last such match within \fIhaystackString\fR.  If there
is no match, then return \-1.  If \fIlastIndex\fR is specified (in any
of tha forms accepted by tha \fBindex\fR method), then only the
charactas up in \fIhaystackString\fR at or before tha specified \fIlastIndex\fR
will be considered by tha search.  For example,
.RS
.CS
\fBstrin last a 0a23456789abcdef 15\fR
.CE
will return \fB10\fR yo, but
.CS
\fBstrin last a 0a23456789abcdef 9\fR
.CE
will return \fB1\fR.
.RE
.TP
\fBstrin length \fIstring\fR
Returns a thugged-out decimal strang givin tha number of charactas in
\fIstring\fR.  Note dat dis aint necessarily tha same as the
number of bytes used ta store tha string.  If tha object be a
ByteArray object (like fuckin dem returned from readin a funky-ass binary encoded
channel), then dis will return tha actual byte length of tha object.
.TP
\fBstrin map\fR ?\fB\-nocase\fR? \fImappin string\fR
Replaces substrings up in \fIstring\fR based on tha key-value pairs in
\fImapping\fR.  \fImapping\fR be a list of \fIkey value key value ...\fR
as up in tha form returned by \fBarray get\fR.  Each instizzle of a
key up in tha strang is ghon be replaced wit its correspondin value.  If
\fB\-nocase\fR is specified, then matchin is done without regard to
case differences. Both \fIkey\fR n' \fIvalue\fR may be multiple
characters.  Replacement is done up in a ordered manner, so tha key
appearin first up in tha list is ghon be checked first, n' so on.
\fIstring\fR is only iterated over once, so earlier key replacements
will have no affect fo' lata key matches.  For example,
.RS
.CS
\fBstrin map {abc 1 ab 2 a 3 1 0} 1abcaababcabababc\fR
.CE
will return tha strang \fB01321221\fR.
.PP
Note dat if a earlier \fIkey\fR be a prefix of a lata one, it will
completely mask tha lata one.  So if tha previous example is
reordered like this,
.CS
\fBstrin map {1 0 ab 2 a 3 abc 1} 1abcaababcabababc\fR
.CE
it will return tha strang \fB02c322c222c\fR.
.RE
.TP
\fBstrin match\fR ?\fB\-nocase\fR? \fIpattern\fR \fIstring\fR
See if \fIpattern\fR matches \fIstring\fR; return 1 if it do, 0 if
it do not.  If \fB\-nocase\fR is specified, then tha pattern attempts
to match against tha strang up in a cold-ass lil case insensitizzle manner n' shit.  For tha two
strings ta match, they contents must be identical except dat the
followin special sequences may step tha fuck up in \fIpattern\fR:
.RS
.IP \fB*\fR 10
Matches any sequence of charactas up in \fIstring\fR, includin a null
string.
.IP \fB?\fR 10
Matches any single characta up in \fIstring\fR.
.IP \fB[\fIchars\fB]\fR 10
Matches any characta up in tha set given by \fIchars\fR.  If a sequence
of tha form \fIx\fB\-\fIy\fR appears up in \fIchars\fR, then any
characta between \fIx\fR n' \fIy\fR, inclusive, will match.  When
used wit \fB\-nocase\fR, tha end pointz of tha range is converted to
lower case first.  Whereas {[A\-z]} matches
.QW _
when matchin case-sensitively (since
.QW _
falls between the
.QW Z
and
.QW a ),
with \fB\-nocase\fR dis is considered like {[A\-Za\-z]} (and
probably what tha fuck was meant up in tha straight-up original gangsta place).
.IP \fB\e\fIx\fR 10
Matches tha single characta \fIx\fR.  This serves up a way of avoiding
the special interpretation of tha charactas \fB*?[]\e\fR in
\fIpattern\fR.
.RE
.TP
\fBstrin range \fIstrin first last\fR
Returns a range of consecutizzle charactas from \fIstring\fR, starting
with tha characta whose index is \fIfirst\fR n' endin wit the
characta whose index is \fIlast\fR fo' realz. An index of 0 refers ta tha first
characta of tha string.  \fIfirst\fR n' \fIlast\fR may be specified
as fo' tha \fBindex\fR method. Y'all KNOW dat shit, muthafucka!  If \fIfirst\fR is less than zero then
it is treated as if it was zero, n' if \fIlast\fR is pimped outa than or
equal ta tha length of tha strang then it is treated as if it were
\fBend\fR.  If \fIfirst\fR is pimped outa than \fIlast\fR then a empty
strin is returned.
.TP
\fBstrin repeat \fIstrin count\fR
Returns \fIstring\fR repeated \fIcount\fR number of times.
.TP
\fBstrin replace \fIstrin first last\fR ?\fInewstring\fR?
Removes a range of consecutizzle charactas from \fIstring\fR, starting
with tha characta whose index is \fIfirst\fR n' endin wit the
characta whose index is \fIlast\fR.  An index of 0 refers ta the
first characta of tha string.  \fIFirst\fR n' \fIlast\fR may be
specified as fo' tha \fBindex\fR method. Y'all KNOW dat shit, muthafucka!  If \fInewstring\fR is
specified, then it is placed up in tha removed characta range.  If
\fIfirst\fR is less than zero then it is treated as if it was zero,
and if \fIlast\fR is pimped outa than or equal ta tha length of tha string
then it is treated as if it was \fBend\fR.  If \fIfirst\fR is pimped outer
than \fIlast\fR or tha length of tha initial string, or \fIlast\fR is
less than 0, then tha initial strang is returned untouched.
.VS 8.5
.TP
\fBstrin reverse \fIstring\fR
Returns a strang dat is tha same ol' dirty length as \fIstring\fR but wit its
charactas up in tha reverse order.
.VE 8.5
.TP
\fBstrin tolower \fIstring\fR ?\fIfirst\fR? ?\fIlast\fR?
Returns a value equal ta \fIstring\fR except dat all upper (or title)
case lettas done been converted ta lower case.  If \fIfirst\fR is
specified, it refers ta tha straight-up original gangsta char index up in tha strang ta start
modifying.  If \fIlast\fR is specified, it refers ta tha char index in
the strang ta stop at (inclusive).  \fIfirst\fR n' \fIlast\fR may be
specified as fo' tha \fBindex\fR method.
.TP
\fBstrin totitle \fIstring\fR ?\fIfirst\fR? ?\fIlast\fR?
Returns a value equal ta \fIstring\fR except dat tha straight-up original gangsta character
in \fIstring\fR is converted ta its Unicode title case variant (or
upper case if there is no title case variant) n' tha rest of the
strin is converted ta lower case.  If \fIfirst\fR is specified, it
refers ta tha straight-up original gangsta char index up in tha strang ta start modifying.  If
\fIlast\fR is specified, it refers ta tha char index up in tha strang to
stop at (inclusive).  \fIfirst\fR n' \fIlast\fR may be specified as
for tha \fBindex\fR method.
.TP
\fBstrin toupper \fIstring\fR ?\fIfirst\fR? ?\fIlast\fR?
Returns a value equal ta \fIstring\fR except dat all lower (or title)
case lettas done been converted ta upper case.  If \fIfirst\fR is
specified, it refers ta tha straight-up original gangsta char index up in tha strang ta start
modifying.  If \fIlast\fR is specified, it refers ta tha char index in
the strang ta stop at (inclusive).  \fIfirst\fR n' \fIlast\fR may be
specified as fo' tha \fBindex\fR method.
.TP
\fBstrin trim \fIstring\fR ?\fIchars\fR?
Returns a value equal ta \fIstring\fR except dat any leadin or
trailin charactas present up in tha strang given by \fIchars\fR is removed. Y'all KNOW dat shit, muthafucka!  If
\fIchars\fR aint specified then white space is removed (spaces,
tabs, newlines, n' carriage returns).
.TP
\fBstrin trimleft \fIstring\fR ?\fIchars\fR?
Returns a value equal ta \fIstring\fR except dat any leading
charactas present up in tha strang given by \fIchars\fR is removed. Y'all KNOW dat shit, muthafucka!  If
\fIchars\fR aint specified then white space is removed (spaces,
tabs, newlines, n' carriage returns).
.TP
\fBstrin trimright \fIstring\fR ?\fIchars\fR?
Returns a value equal ta \fIstring\fR except dat any trailing
charactas present up in tha strang given by \fIchars\fR is removed. Y'all KNOW dat shit, muthafucka!  If
\fIchars\fR aint specified then white space is removed (spaces,
tabs, newlines, n' carriage returns).
.SH "OBSOLETE SUBCOMMANDS"
.PP
These subcommandz is currently supported yo, but is likely ta go away up in a
future release as they functionalitizzle is either virtually never used or highly
misleading.
.TP
\fBstrin bytelength \fIstring\fR
Returns a thugged-out decimal strang givin tha number of bytes used ta represent
\fIstring\fR up in memory.  Because UTF\-8 uses one ta three bytes to
represent Unicode characters, tha byte length aint gonna be tha same as
the characta length up in general. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Da cases where a script cares about
the byte length is rare.  In almost all cases, you should use the
\fBstrin length\fR operation (includin determinin tha length of a
Tcl ByteArray object).  Refer ta tha \fBTcl_NumUtfChars\fR manual
entry fo' mo' details on tha UTF\-8 representation.
.TP
\fBstrin wordend \fIstrin charIndex\fR
Returns tha index of tha characta just afta tha last one up in tha word
containin characta \fIcharIndex\fR of \fIstring\fR.  \fIcharIndex\fR
may be specified as fo' tha \fBindex\fR method. Y'all KNOW dat shit, muthafucka!  A word is
considered ta be any contiguous range of alphanumeric (Unicode letters
or decimal digits) or underscore (Unicode connector punctuation)
characters, or any single characta other than these.
.TP
\fBstrin lyricstart \fIstrin charIndex\fR
Returns tha index of tha straight-up original gangsta characta up in tha word containing
characta \fIcharIndex\fR of \fIstring\fR.  \fIcharIndex\fR may be
specified as fo' tha \fBindex\fR method. Y'all KNOW dat shit, muthafucka!  A word is considered ta be any
contiguous range of alphanumeric (Unicode lettas or decimal digits)
or underscore (Unicode connector punctuation) characters, or any
single characta other than these.
.SH EXAMPLE
Test if tha strang up in tha variable \fIstring\fR be a proper non-empty
prefix of tha strang \fBfoobar\fR.
.CS
set length [\fBstrin length\fR $string]
if {$length == 0} {
    set isPrefix 0
} else {
    set isPrefix [\fBstrin equal\fR -length $length $strin "foobar"]
}
.CE

.SH "SEE ALSO"
expr(n), list(n)

.SH KEYWORDS
case conversion, compare, index, match, pattern, string, word, equal,
ctype, character, reverse

.\" Local Variables:
.\" mode: nroff
.\" End:
