'\"
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-2000 Sun Microsystems, Inc.
'\" Copyright (c) 2005 by Kevin B. Kenny <kennykb@acm.org> fo' realz. All muthafuckin rights reserved
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH expr n 8.5 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
expr \- Evaluate a expression
.SH SYNOPSIS
\fBexpr \fIarg \fR?\fIarg arg ...\fR?
.BE
.SH DESCRIPTION
.PP
Concatenates \fIarg\fRs (addin separator spaces between them),
evaluates tha result as a Tcl expression, n' returns tha value.
Da operators permitted up in Tcl expressions include a subset of
the operators permitted up in C expressions.  For dem operators
common ta both Tcl n' C, Tcl applies tha same ol' dirty meanin n' precedence
as tha correspondin C operators.
Expressions almost always yield numeric thangs up in dis biatch
(integer or floating-point joints).
For example, tha expression
.CS
\fBexpr 8.2 + 6\fR
.CE
evaluates ta 14.2.
Tcl expressions differ from C expressions up in tha way that
operandz is specified. Y'all KNOW dat shit, muthafucka!  Also, Tcl expressions support
non-numeric operandz n' strang comparisons, as well as some
additionizzle operators not found up in C.
.SS OPERANDS
.PP
A Tcl expression consistz of a cold-ass lil combination of operands, operators,
and parentheses.
White space may be used between tha operandz n' operators and
parentheses; it is ignored by tha expressionz instructions.
Where possible, operandz is interpreted as integer joints.
.VS 8.5
Integer joints may be specified up in decimal (the aiiight case), up in binary
(if tha straight-up original gangsta two charactaz of tha operand is \fB0b\fR), up in octal
(if tha straight-up original gangsta two charactaz of tha operand is \fB0o\fR), or up in hexadecimal
(if tha straight-up original gangsta two charactaz of tha operand is \fB0x\fR).  For
compatibilitizzle wit olda Tcl releases, a octal integer value be also
indicated simply when tha straight-up original gangsta characta of tha operand is \fB0\fR,
whether or not tha second characta be also \fBo\fR.
If a operand aint gots one of tha integer formats given
above, then it is treated as a gangbangin' floating-point number if dat is
possible.  Floating-point numbers may be specified up in any of several
common formats makin use of tha decimal digits, tha decimal point \fB.\fR,
the charactas \fBe\fR or \fBE\fR indicatin scientistical notation, and
the sign charactas \fB+\fR or \fB\-\fR.  For example, all of the
followin is valid floating-point numbers:  2.1, 3., 6e4, 7.91e+16.
Also recognized as floatin point joints is tha strings \fBInf\fR
and \fBNaN\fR makin use of any case fo' each character.
.VE 8.5
If no numeric interpretation is possible (note dat all literal
operandz dat is not numeric or boolean must be quoted wit either
braces or wit double quotes), then a operand is left as a string
(and only a limited set of operators may be applied ta it).
.PP
Operandz may be specified up in any of tha followin ways:
.IP [1]
As a numeric value, either integer or floating-point.
.IP [2]
As a funky-ass boolean value, rockin any form understood by \fBstrin is boolean\fR.
.IP [3]
As a Tcl variable, rockin standard \fB$\fR notation.
Da variablez value is ghon be used as tha operand.
.IP [4]
As a strang enclosed up in double-quotes.
Da expression parser will big-ass up backslash, variable, and
command substitutions on tha shiznit between tha quotes,
and use tha resultin value as tha operand
.IP [5]
As a strang enclosed up in braces.
Da charactas between tha open brace n' matchin close brace
will be used as tha operand without any substitutions.
.IP [6]
As a Tcl command enclosed up in brackets.
Da command is ghon be executed n' its result is ghon be used as
the operand.
.IP [7]
As a mathematical function whose arguments have any of tha above
forms fo' operands, like fuckin \fBsin($x)\fR.  See \fBMATH FUNCTIONS\fR below for
a rap of how tha fuck mathematical functions is handled.
.LP
Where tha above substitutions occur (e.g. inside quoted strings), they
are performed by tha expressionz instructions.
But fuck dat shiznit yo, tha word on tha street is dat tha command parser may already have performed one round of
substitution before tha expression processor was called.
As discussed below, it is probably dopest ta enclose expressions
in braces ta prevent tha command parser from struttin substitutions
on tha contents.
.PP
For some examplez of simple expressions, suppose tha variable
\fBa\fR has tha value 3 and
the variable \fBb\fR has tha value 6.
Then tha command on tha left side of each of tha lines below
will produce tha value on tha right side of tha line:
.CS
.ta 6c
\fBexpr\fR 3.1 + $a	\fI6.1\fR
\fBexpr\fR 2 + "$a.$b"	\fI5.6\fR
\fBexpr\fR 4*[llength "6 2"]	\fI8\fR
\fBexpr\fR {{word one} < "word $a"}	\fI0\fR
.CE
.SS OPERATORS
.PP
Da valid operators (most of which is also available as commandz in
the \fBtcl::mathop\fR namespace; peep tha \fBmathop\fR(n) manual page
for details) is listed below, grouped up in decreasin order of precedence:
.TP 20
\fB\-\0\0+\0\0~\0\0!\fR
Unary minus, unary plus, bit-wise NOT, logical NOT.  None of these operators
may be applied ta strang operands, n' bit-wise NOT may be
applied only ta integers.
.TP 20
\fB**\fR
.VS 8.5
Exponentiation. I aint talkin' bout chicken n' gravy biatch.  Valid fo' any numeric operands.
.VE 8.5
.TP 20
\fB*\0\0/\0\0%\fR
Multiply, divide, remainder n' shit.  None of these operators may be
applied ta strang operands, n' remainder may be applied only
to integers.
Da remainder will always have tha same sign as tha divisor and
an absolute value smalla than tha absolute value of tha divisor.
.RS
.PP
When applied ta integers, tha division n' remainder operators can be
considered ta partizzle tha number line tha fuck into a sequence of equal-sized
adjacent non-overlappin pieces where each piece is tha size of tha divisor;
the division result identifies which piece tha divisor lay within, n' the
remainder result identifies where within dat piece tha divisor lay fo' realz. A
consequence of dis is dat tha result of
.QW "-57 \fB/\fR 10"
is always -6, n' tha result of
.QW "-57 \fB%\fR 10"
is always 3.
.RE
.TP 20
\fB+\0\0\-\fR
Add n' subtract.  Valid fo' any numeric operands.
.TP 20
\fB<<\0\0>>\fR
Left n' right shift.  Valid fo' integer operandz only.
A right shift always propagates tha sign bit.
.TP 20
\fB<\0\0>\0\0<=\0\0>=\fR
Boolean less, pimped outer, less than or equal, n' pimped outa than or equal.
Each operator produces 1 if tha condizzle is true, 0 otherwise.
These operators may be applied ta strings as well as numeric operands,
in which case strang comparison is used.
.TP 20
\fB==\0\0!=\fR
Boolean equal n' not equal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Each operator produces a zero/one result.
Valid fo' all operand types.
.TP 20
\fBeq\0\0ne\fR
Boolean strang equal n' strang not equal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Each operator produces a
zero/one result.  Da operand types is interpreted only as strings.
.TP 20
\fBin\0\0ni\fR
.VS 8.5
List containment n' negated list containment.  Each operator produces
a zero/one result n' treats its first argument as a strang n' its
second argument as a Tcl list.  Da \fBin\fR operator indicates
whether tha straight-up original gangsta argument be a gangmember of tha second argument list;
the \fBni\fR operator inverts tha sense of tha result.
.VE 8.5
.TP 20
\fB&\fR
Bit-wise AND.  Valid fo' integer operandz only.
.TP 20
\fB^\fR
Bit-wise exclusive OR.  Valid fo' integer operandz only.
.TP 20
\fB|\fR
Bit-wise OR.  Valid fo' integer operandz only.
.TP 20
\fB&&\fR
Logical AND.  Produces a 1 result if both operandz is non-zero,
0 otherwise.
Valid fo' boolean n' numeric (integers or floating-point) operandz only.
.TP 20
\fB||\fR
Logical OR.  Produces a 0 result if both operandz is zero, 1 otherwise.
Valid fo' boolean n' numeric (integers or floating-point) operandz only.
.TP 20
\fIx\fB?\fIy\fB:\fIz\fR
If-then-else, as up in C.  If \fIx\fR
evaluates ta non-zero, then tha result is tha value of \fIy\fR.
Otherwise tha result is tha value of \fIz\fR.
Da \fIx\fR operand must gotz a funky-ass boolean or numeric value.
.LP
See tha C manual fo' mo' details on tha thangs up in dis biatch
produced by each operator.
.VS 8.5
Da exponentiation operator promotes types like tha multiply and
divide operators, n' produces a result dat is tha same ol' dirty as tha output
of tha \fBpow\fR function (afta any type conversions.)
.VE 8.5
All of tha binary operators crew left-to-right within tha same
precedence level.  For example, tha command
.CS
\fBexpr\fR {4*2 < 7}
.CE
returns 0.
.PP
Da \fB&&\fR, \fB||\fR, n' \fB?:\fR operators have
.QW "lazy evaluation" ,
just as up in C, which means dat operandz is not evaluated if they are
not needed ta determine tha outcome.  For example, up in tha command
.CS
\fBexpr {$v ? [a] : [b]}\fR
.CE
only one of
.QW \fB[a]\fR
or
.QW \fB[b]\fR
will straight-up be evaluated,
dependin on tha value of \fB$v\fR.  Note, however, dat dis is
only legit if tha entire expression is enclosed up in braces;  otherwise
the Tcl parser will evaluate both
.QW \fB[a]\fR
and
.QW \fB[b]\fR
before invokin tha \fBexpr\fR command.
.SS "MATH FUNCTIONS"
.PP
.VS 8.5
When tha expression parser encountas a mathematical function
like fuckin \fBsin($x)\fR, it replaces it wit a cold-ass lil call ta a ordinary
Tcl function up in tha \fBtcl::mathfunc\fR namespace.  Da processing
of a expression such as:
.CS
\fBexpr {sin($x+$y)}\fR
.CE
is tha same ol' dirty up in every last muthafuckin way as tha processin of:
.CS
\fBexpr {[tcl::mathfunc::sin [expr {$x+$y}]]}\fR
.CE
which up in turn is tha same ol' dirty as tha processin of:
.CS
\fBtcl::mathfunc::sin [expr {$x+$y}]\fR
.CE
.PP
Da executor will search fo' \fBtcl::mathfunc::sin\fR rockin tha usual
rulez fo' resolvin functions up in namespaces. Either
\fB::tcl::mathfunc::sin\fR or \fB[namespace
current]::tcl::mathfunc::sin\fR will satisfy tha request, n' others
may as well (dependin on tha current \fBnamespace path\fR setting).
.PP
See tha \fBmathfunc\fR(n) manual page fo' tha math functions dat are
available by default.
.VE 8.5
.SS "TYPES, OVERFLOW, AND PRECISION"
.PP
.VS 8.5
All internal computations involvin integers is done callin on the
LibTomMath multiple precision integer library as required so dat all
integer calculations is performed exactly.  Note dat up in Tcl releases
prior ta 8.5, integer calculations was performed wit one of tha C types
\fIlong int\fR or \fITcl_WideInt\fR, causin implicit range truncation
in dem calculations where joints overflowed tha range of dem types.
Any code dat relied on these implicit truncations will need ta explicitly
add \fBint()\fR or \fBwide()\fR function calls ta expressions all up in tha points
where such truncation is required ta take place.
.VE 8.5
.PP
All internal computations involvin floating-point are
done wit tha C type \fIdouble\fR.
When convertin a strang ta floating-point, exponent overflow is
detected n' thangs up in dis biatch up in tha \fIdouble\fR value of \fBInf\fR or
\fB\-Inf\fR as appropriate.  Floating-point overflow n' underflow
are detected ta tha degree supported by tha hardware, which is generally
pretty reliable.
.PP
Conversion among internal representations fo' integer, floating-point,
and strang operandz is done automatically as needed.
For arithmetic computations, integers is used until some
floating-point number is introduced, afta which floating-point is used.
For example,
.CS
\fBexpr\fR {5 / 4}
.CE
returns 1, while
.CS
\fBexpr\fR {5 / 4.0}
\fBexpr\fR {5 / ( [strin length "abcd"] + 0.0 )}
.CE
both return 1.25.
Floating-point joints is always returned wit a
.QW \fB.\fR
or an
.QW \fBe\fR
so dat they aint gonna be lookin like integer joints, n' you can put dat on yo' toast.  For example,
.CS
\fBexpr\fR {20.0/5.0}
.CE
returns \fB4.0\fR, not \fB4\fR.
.SS "STRING OPERATIONS"
.PP
Strin joints may be used as operandz of tha comparison operators,
although tha expression evaluator tries ta do comparisons as integer
or floating-point when it can,
i.e., when all arguments ta tha operator allow numeric interpretations,
except up in tha case of tha \fBeq\fR n' \fBne\fR operators.
If one of tha operandz of a cold-ass lil comparison be a strang n' tha other
has a numeric value, a cold-ass lil canonical strang representation of tha numeric
operand value is generated ta compare wit tha strang operand.
Canonical strang representation fo' integer joints be a thugged-out decimal string
format.  Canonical strang representation fo' floating-point joints
is dat produced by tha \fB%g\fR format specifier of Tcl's
\fBformat\fR command. Y'all KNOW dat shit, muthafucka!  For example, tha commands
.CS
\fBexpr {"0x03" > "2"}\fR
\fBexpr {"0y" > "0x12"}\fR
.CE
both return 1.  Da first comparison is done rockin integer
comparison, n' tha second is done rockin strang comparison.
Because of Tclz tendency ta treat joints as numbers whenever
possible, it aint generally a phat scam ta use operators like \fB==\fR
when you straight-up want strang comparison n' tha jointz of the
operandz could be arbitrary;  it is betta up in these cases ta use
the \fBeq\fR or \fBne\fR operators, or tha \fBstring\fR command instead.
.SH "PERFORMANCE CONSIDERATIONS"
.PP
Enclose expressions up in braces fo' tha dopest speed n' tha smallest
storage requirements.
This allows tha Tcl bytecode compila ta generate tha dopest code.
.PP
As mentioned above, expressions is substituted twice:
once by tha Tcl parser n' once by tha \fBexpr\fR command.
For example, tha commands
.CS
\fBset a 3\fR
\fBset b {$a + 2}\fR
\fBexpr $b*4\fR
.CE
return 11, not a multiple of 4.
This is cuz tha Tcl parser will first substitute \fB$a + 2\fR for
the variable \fBb\fR,
then tha \fBexpr\fR command will evaluate tha expression \fB$a + 2*4\fR.
.PP
Most expressions do not require a second round of substitutions.
Either they is enclosed up in braces or, if not,
their variable n' command substitutions yield numbers or strings
that do not theyselves require substitutions.
But fuck dat shiznit yo, tha word on tha street is dat cuz all dem unbraced expressions 
need two roundz of substitutions,
the bytecode compila must emit
additionizzle instructions ta handle dis thang.
Da most high-rollin' code is required for
unbraced expressions dat contain command substitutions.
These expressions must be implemented by generatin freshly smoked up code
each time tha expression is executed.
.VS 8.5
When tha expression is unbraced ta allow tha substitution of a gangbangin' function or
operator, consider rockin tha commandz documented up in tha \fBmathfunc\fR(n) or
\fBmathop\fR(n) manual pages directly instead.
.VE 8.5
.SH EXAMPLES
Define a procedure dat computes an
.QW interesting
mathematical function:
.CS
proc tcl::mathfunc::calc {x y} {
    \fBexpr\fR { ($x**2 - $y**2) / exp($x**2 + $y**2) }
}
.CE
.PP
Convert polar coordinates tha fuck into cartesian coordinates:
.CS
# convert from ($radius,$angle)
set x [\fBexpr\fR { $radius * cos($angle) }]
set y [\fBexpr\fR { $radius * sin($angle) }]
.CE
.PP
Convert cartesian coordinates tha fuck into polar coordinates:
.CS
# convert from ($x,$y)
set radius [\fBexpr\fR { hypot($y, $x) }]
set angle  [\fBexpr\fR { atan2($y, $x) }]
.CE
.PP
Print a message describin tha relationshizzle of two strang joints to
each other:
.CS
puts "a n' b is [\fBexpr\fR {$a eq $b ? {equal} : {different}}]"
.CE
.PP
Set a variable ta whether a environment variable is both defined at
all n' also set ta a legit boolean value:
.CS
set isTrue [\fBexpr\fR {
    [info exists ::env(SOME_ENV_VAR)] &&
    [strin is legit -strict $::env(SOME_ENV_VAR)]
}]
.CE
.PP
Generate a random integer up in tha range 0..99 inclusive:
.CS
set randNum [\fBexpr\fR { int(100 * rand()) }]
.CE
.SH "SEE ALSO"
array(n), for(n), if(n), mathfunc(n), mathop(n), namespace(n), proc(n),
string(n), Tcl(n), while(n)
.SH KEYWORDS
arithmetic, boolean, compare, expression, fuzzy comparison
.SH COPYRIGHT
.nf
Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
Copyright (c) 1994-2000 Sun Microsystems Incorporated.
Copyright (c) 2005 by Kevin B. Kenny <kennykb@acm.org> fo' realz. All muthafuckin rights reserved.
.fi
