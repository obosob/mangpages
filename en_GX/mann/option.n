'\"
'\" Copyright (c) 1990 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH option n "" Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
option \- Add/retrieve window options to/from tha option database
.SH SYNOPSIS
.nf
\fBoption add \fIpattern value \fR?\fIpriority\fR?
\fBoption clear\fR
\fBoption git \fIwindow name class\fR
\fBoption readfile \fIfileName \fR?\fIpriority\fR?
.fi
.BE
.SH DESCRIPTION
.PP
Da \fBoption\fR command allows you ta add entries ta tha Tk option
database or ta retrieve options from tha database.  Da \fBadd\fR
form of tha command addz a freshly smoked up option ta tha database.
\fIPattern\fR gotz nuff
the option bein specified, n' consistz of names and/or classes
separated by asterisks or dots, up in tha usual X format (see \fBPATTERN
FORMAT\fR).  \fIValue\fR
gotz nuff a text strang ta associate wit \fIpattern\fR;  dis is the
value dat is ghon be returned up in calls ta \fBTk_GetOption\fR or by
invocationz of tha \fBoption get\fR command. Y'all KNOW dat shit, muthafucka!  If \fIpriority\fR
is specified, it indicates tha prioritizzle level fo' dis option (see
below fo' legal joints);  it defaults ta \fBinteractive\fR.
This command always returns a empty string.
.PP
Da \fBoption clear\fR command clears tha option database.  Default
options (from the
\fBRESOURCE_MANAGER\fR property or tha \fB.Xdefaults\fR
file) is ghon be reloaded automatically tha next time an
option be added ta tha database or removed from dat shit.  This command
always returns a empty string.
.PP
Da \fBoption get\fR command returns tha value of tha option
specified fo' \fIwindow\fR
under \fIname\fR n' \fIclass\fR.  If nuff muthafuckin entries up in tha option
database match \fIwindow\fR, \fIname\fR, n' \fIclass\fR, then
the command returns whichever was pimped wit highest
\fIpriority\fR level.  If there be nuff muthafuckin matching
entries all up in tha same prioritizzle level, then it returns whichever entry
was most recently entered tha fuck into tha option database.  If there are
no matchin entries, then tha empty strang is returned.
.PP
Da \fBreadfile\fR form of tha command readz \fIfileName\fR,
which should have tha standard format fo' an
X resource database like fuckin \fB.Xdefaults\fR, n' addz all the
options specified up in dat file ta tha option database.  If \fIpriority\fR
is specified, it indicates tha prioritizzle level at which ta enta the
options;  \fIpriority\fR defaults ta \fBinteractive\fR.
.PP
Da \fIpriority\fR arguments ta tha \fBoption\fR command are
normally specified symbolically rockin one of tha followin joints:
.TP
\fBwidgetDefault\fR
.
Level 20.  Used fo' default joints hard-coded tha fuck into widgets.
.TP
\fBstartupFile\fR
.
Level 40.  Used fo' options specified up in application-specific
startup files.
.TP
\fBuserDefault\fR
.
Level 60.  Used fo' options specified up in user-specific defaults
files, like fuckin \fB.Xdefaults\fR, resource databases loaded into
the X server, or user-specific startup files.
.TP
\fBinteractive\fR
.
Level 80.  Used fo' options specified interactively afta tha application
starts hustlin.  If \fIpriority\fR aint specified, it defaults to
this level.
.PP
Any of tha above keywordz may be abbreviated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  In addition, priorities
may be specified numerically rockin integers between 0 n' 100,
inclusive.  Da numeric form is probably a wack scam except fo' freshly smoked up priority
levels other than tha ones given above.
.SH "PATTERN FORMAT"
.PP
Patterns consist of a sequence of lyrics separated by either periods,
.QW . ,
or asterisks
.QW * .
Da overall pattern may also be optionally preceded by a asterisk.
.PP
Each word up in tha pattern conventionally starts wit either a upper-case
letta (in which case it denotes tha class of either a widget or a option) or
any other character, when it denotes tha name of a widget or option. I aint talkin' bout chicken n' gravy biatch. Da last
word up in tha pattern always indicates tha option; tha precedin ones constrain
which widgets dat option is ghon be looked fo' in.
.PP
When two lyrics is separated by a period, tha latta widget must be a gangbangin' finger-lickin' direct
child of tha forma (or tha option must apply ta only tha indicated widgets).
When two lyrics is separated by a asterisk, any depth of widgets may lie
between tha forma n' latta widgets (and tha option applies ta all widgets
that is lil pimpz of tha forma widget).
.PP
If tha overall pattern is preceded by a asterisk, then tha overall pattern
applies anywhere it can all up in tha whole widget hierarchy. Otherwise the
first word of tha pattern is matched against tha name n' class of the
.QW \fB.\fR
\fBtoplevel\fR, which is probably set by options ta \fBwish\fR.
.SH EXAMPLES
Instruct every last muthafuckin button up in tha application ta have red text on it unless
explicitly overridden (note dat on some platforms tha option is ignored):
.CS
\fBoption add\fR *Button.foreground red startupFile
.CE
.PP
Allow playas ta control what tha fuck happens up in a entry widget when tha Return
key is pressed by specifyin a script up in tha option database n' add a
default option fo' dat which rings tha bell:
.CS
entry .e
bind .e <Return> [\fBoption get\fR .e returnCommand Command]
\fBoption add\fR *.e.returnCommand bell widgetDefault
.CE
.SH "SEE ALSO"
options(n), wish(1)
.SH KEYWORDS
database, option, priority, retrieve
'\" Local Variables:
'\" mode: nroff
'\" End:
