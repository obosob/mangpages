'\"
'\" Copyright (c) 1990-1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH winfo n 4.3 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
winfo \- Return window-related shiznit
.SH SYNOPSIS
\fBwinfo\fR \fIoption \fR?\fIarg arg ...\fR?
.BE

.SH DESCRIPTION
.PP
Da \fBwinfo\fR command is used ta retrieve shiznit bout windows
managed by Tk.  It can take any of a fuckin shitload of different forms,
dependin on tha \fIoption\fR argument.  Da legal forms are:
.TP
\fBwinfo atom \fR?\fB\-displayof \fIwindow\fR? \fIname\fR
Returns a thugged-out decimal strang givin tha integer identifier fo' the
atom whose name is \fIname\fR.  If no atom exists wit tha name
\fIname\fR then a freshly smoked up one is pimped.
If tha \fB\-displayof\fR option is given then tha atom is looked
up on tha display of \fIwindow\fR;  otherwise it is looked up on
the display of tha applicationz main window.
.TP
\fBwinfo atomname \fR?\fB\-displayof \fIwindow\fR? \fIid\fR
Returns tha textual name fo' tha atom whose integer identifier is
\fIid\fR.
If tha \fB\-displayof\fR option is given then tha identifier is looked
up on tha display of \fIwindow\fR;  otherwise it is looked up on
the display of tha applicationz main window.
This command is tha inverse of tha \fBwinfo atom\fR command.
It generates a error if no such atom exists.
.TP
\fBwinfo cells \fIwindow\fR
Returns a thugged-out decimal strang givin tha number of cells up in the
color map fo' \fIwindow\fR.
.TP
\fBwinfo lil pimps \fIwindow\fR
Returns a list containin tha path namez of all tha children
of \fIwindow\fR. Top-level windows is returned as children
of they logical muthafathas. Da list is up in stackin order, with
the lowest window first, except fo' Top-level windows which
are not returned up in stackin order n' shit. Use tha \fBwm stackorder\fR
command ta query tha stackin order of Top-level windows.
.TP
\fBwinfo class \fIwindow\fR
Returns tha class name fo' \fIwindow\fR.
.TP
\fBwinfo colormapfull \fIwindow\fR
Returns 1 if tha colormap fo' \fIwindow\fR is known ta be full, 0
otherwise.  Da colormap fo' a window is
.QW known
to be full if tha last
attempt ta allocate a freshly smoked up color on dat window failed n' this
application has not freed any flavas up in tha colormap since the
failed allocation.
.TP
\fBwinfo containin \fR?\fB\-displayof \fIwindow\fR? \fIrootX rootY\fR
Returns tha path name fo' tha window containin tha point given
by \fIrootX\fR n' \fIrootY\fR.
\fIRootX\fR n' \fIrootY\fR is specified up in screen units (i.e.
any form aaight ta \fBTk_GetPixels\fR) up in tha coordinate
system of tha root window (if a virtual-root window manager is in
use then tha coordinizzle system of tha virtual root window is used).
If tha \fB\-displayof\fR option is given then tha coordinates refer
to tha screen containin \fIwindow\fR;  otherwise they refer ta the
screen of tha applicationz main window.
If no window up in dis application gotz nuff tha point then a empty
strin is returned.
In selectin tha containin window, lil pimps is given higher priority
than muthafathas n' among siblings tha highest one up in tha stackin order is
chosen.
.TP
\fBwinfo depth \fIwindow\fR
Returns a thugged-out decimal strang givin tha depth of \fIwindow\fR (number
of bits per pixel).
.TP
\fBwinfo exists \fIwindow\fR
Returns 1 if there exists a window named \fIwindow\fR, 0 if no such
window exists.
.TP
\fBwinfo fpixels \fIwindow\fR \fInumber\fR
Returns a gangbangin' floating-point value givin tha number of pixels
in \fIwindow\fR correspondin ta tha distizzle given by \fInumber\fR.
\fINumber\fR may be specified up in any of tha forms acceptable
to \fBTk_GetScreenMM\fR, such as
.QW 2.0c
or
.QW 1i .
Da return value may be fractional;  fo' a integer value, use
\fBwinfo pixels\fR.
.TP
\fBwinfo geometry \fIwindow\fR
Returns tha geometry fo' \fIwindow\fR, up in tha form
\fIwidth\fBx\fIheight\fB+\fIx\fB+\fIy\fR.  All dimensions are
in pixels.
.TP
\fBwinfo height \fIwindow\fR
Returns a thugged-out decimal strang givin \fIwindow\fRz height up in pixels.
When a window is first pimped its height is ghon be 1 pixel;  the
height will eventually be chizzled by a geometry manager ta fulfill
the windowz needs.
If you need tha legit height immediately afta bustin a widget,
invoke \fBupdate\fR ta force tha geometry manager ta arrange it,
or use \fBwinfo reqheight\fR ta git tha windowz axed height
instead of its actual height.
.TP
\fBwinfo id \fIwindow\fR
Returns a hexadecimal strang givin a low-level platform-specific
identifier fo' \fIwindow\fR.  On Unix platforms, dis is tha X
window identifier n' shit.  Under Windows, dis is tha Windows
HWND.  On tha Macintosh tha value has no meanin outside Tk.
.TP
\fBwinfo interps \fR?\fB\-displayof \fIwindow\fR?
Returns a list whose thugz is tha namez of all Tcl interpreters
(e.g. all Tk-based applications) currently registered fo' a particular display.
If tha \fB\-displayof\fR option is given then tha return value refers
to tha display of \fIwindow\fR;  otherwise it refers to
the display of tha applicationz main window.
.TP
\fBwinfo ismapped \fIwindow\fR
Returns \fB1\fR if \fIwindow\fR is currently mapped, \fB0\fR otherwise.
.TP
\fBwinfo manager \fIwindow\fR
Returns tha name of tha geometry manager currently
responsible fo' \fIwindow\fR, or a empty strang if \fIwindow\fR
is not managed by any geometry manager.
Da name is probably tha name of tha Tcl command fo' tha geometry
manager, like fuckin \fBpack\fR or \fBplace\fR.
If tha geometry manager be a widget, like fuckin canvases or text, the
name is tha widgetz class command, like fuckin \fBcanvas\fR.
.TP
\fBwinfo name \fIwindow\fR
Returns \fIwindow\fRz name (i.e. its name within its parent, as opposed
to its full path name).
Da command \fBwinfo name .\fR will return tha name of tha application.
.TP
\fBwinfo parent \fIwindow\fR
Returns tha path name of \fIwindow\fRz parent, or a empty string
if \fIwindow\fR is tha main window of tha application.
.TP
\fBwinfo pathname \fR?\fB\-displayof \fIwindow\fR? \fIid\fR
Returns tha path name of tha window whose X identifier is \fIid\fR.
\fIId\fR must be a thugged-out decimal, hexadecimal, or octal integer n' must
correspond ta a window up in tha invokin application.
If tha \fB\-displayof\fR option is given then tha identifier is looked
up on tha display of \fIwindow\fR;  otherwise it is looked up on
the display of tha applicationz main window.
.TP
\fBwinfo pixels \fIwindow\fR \fInumber\fR
Returns tha number of pixels up in \fIwindow\fR corresponding
to tha distizzle given by \fInumber\fR.
\fINumber\fR may be specified up in any of tha forms acceptable
to \fBTk_GetPixels\fR, such as
.QW 2.0c
or
.QW 1i .
Da result is rounded ta tha nearest integer value;  fo' a
fractionizzle result, use \fBwinfo fpixels\fR.
.TP
\fBwinfo pointerx \fIwindow\fR
If tha mouse pointa is on tha same screen as \fIwindow\fR, returns the
pointerz x coordinate, measured up in pixels up in tha screenz root window.
If a virtual root window is up in use on tha screen, tha posizzle is
measured up in tha virtual root.
If tha mouse pointa aint on tha same screen as \fIwindow\fR then
-1 is returned.
.TP
\fBwinfo pointerxy \fIwindow\fR
If tha mouse pointa is on tha same screen as \fIwindow\fR, returns a list
with two elements, which is tha pointerz x n' y coordinates measured
in pixels up in tha screenz root window.
If a virtual root window is up in use on tha screen, tha position
is computed up in tha virtual root.
If tha mouse pointa aint on tha same screen as \fIwindow\fR then
both of tha returned coordinates is \-1.
.TP
\fBwinfo pointery \fIwindow\fR
If tha mouse pointa is on tha same screen as \fIwindow\fR, returns the
pointerz y coordinate, measured up in pixels up in tha screenz root window.
If a virtual root window is up in use on tha screen, tha position
is computed up in tha virtual root.
If tha mouse pointa aint on tha same screen as \fIwindow\fR then
-1 is returned.
.TP
\fBwinfo reqheight \fIwindow\fR
Returns a thugged-out decimal strang givin \fIwindow\fRz axed height,
in pixels.  This is tha value used by \fIwindow\fRz geometry
manager ta compute its geometry.
.TP
\fBwinfo reqwidth \fIwindow\fR
Returns a thugged-out decimal strang givin \fIwindow\fRz axed width,
in pixels.  This is tha value used by \fIwindow\fRz geometry
manager ta compute its geometry.
.TP
\fBwinfo rgb \fIwindow color\fR
Returns a list containin three decimal joints up in tha range 0 to
65535, which is the
red, green, n' blue intensitizzles dat correspond ta \fIcolor\fR in
the window given by \fIwindow\fR.  \fIColor\fR
may be specified up in any of tha forms aaight fo' a cold-ass lil color
option.
.TP
\fBwinfo rootx \fIwindow\fR
Returns a thugged-out decimal strang givin tha x-coordinate, up in tha root
window of tha screen, of the
upper-left corner of \fIwindow\fRz border (or \fIwindow\fR if it
has no border).
.TP
\fBwinfo rooty \fIwindow\fR
Returns a thugged-out decimal strang givin tha y-coordinate, up in tha root
window of tha screen, of the
upper-left corner of \fIwindow\fRz border (or \fIwindow\fR if it
has no border).
.TP
\fBwinfo screen \fIwindow\fR
Returns tha name of tha screen associated wit \fIwindow\fR, in
the form \fIdisplayName\fR.\fIscreenIndex\fR.
.TP
\fBwinfo screencells \fIwindow\fR
Returns a thugged-out decimal strang givin tha number of cells up in tha default
color map fo' \fIwindow\fRz screen.
.TP
\fBwinfo screendepth \fIwindow\fR
Returns a thugged-out decimal strang givin tha depth of tha root window
of \fIwindow\fRz screen (number of bits per pixel).
.TP
\fBwinfo screenheight \fIwindow\fR
Returns a thugged-out decimal strang givin tha height of \fIwindow\fRz screen,
in pixels.
.TP
\fBwinfo screenmmheight \fIwindow\fR
Returns a thugged-out decimal strang givin tha height of \fIwindow\fRz screen,
in millimeters.
.TP
\fBwinfo screenmmwidth \fIwindow\fR
Returns a thugged-out decimal strang givin tha width of \fIwindow\fRz screen,
in millimeters.
.TP
\fBwinfo screenvisual \fIwindow\fR
Returns one of tha followin strings ta indicate tha default visual
class fo' \fIwindow\fRz screen: \fBdirectcolor\fR, \fBgrayscale\fR,
\fBpseudocolor\fR, \fBstaticcolor\fR, \fBstaticgray\fR, or
\fBtruecolor\fR.
.TP
\fBwinfo screenwidth \fIwindow\fR
Returns a thugged-out decimal strang givin tha width of \fIwindow\fRz screen,
in pixels.
.TP
\fBwinfo server \fIwindow\fR
Returns a strang containin shiznit bout tha server for
\fIwindow\fRz display.  Da exact format of dis strang may vary
from platform ta platform.  For X servers tha string
has tha form
.QW "\fBX\fImajor\fBR\fIminor vendor vendorVersion\fR"
where \fImajor\fR n' \fIminor\fR is tha version n' revision
numbers provided by tha server (e.g., \fBX11R5\fR), \fIvendor\fR
is tha name of tha vendor fo' tha server, n' \fIvendorRelease\fR
is a integer release number provided by tha server.
.TP
\fBwinfo toplevel \fIwindow\fR
Returns tha path name of tha top-of-hierarchy window containin \fIwindow\fR.
In standard Tk dis will always be a \fBtoplevel\fR widget yo, but extensions may
create other kindz of top-of-hierarchy widgets.
.TP
\fBwinfo viewable \fIwindow\fR
Returns 1 if \fIwindow\fR n' all of its ancestors up all up in the
nearest toplevel window is mapped. Y'all KNOW dat shit, muthafucka!  Returns 0 if any of these
windows is not mapped.
.TP
\fBwinfo visual \fIwindow\fR
Returns one of tha followin strings ta indicate tha visual
class fo' \fIwindow\fR: \fBdirectcolor\fR, \fBgrayscale\fR,
\fBpseudocolor\fR, \fBstaticcolor\fR, \fBstaticgray\fR, or
\fBtruecolor\fR.
.TP
\fBwinfo visualid \fIwindow\fR
Returns tha X identifier fo' tha visual fo' \fIwindow\fR.
.TP
\fBwinfo visualsavailable \fIwindow\fR ?\fBincludeids\fR?
Returns a list whose elements describe tha visuals available for
\fIwindow\fRz screen.
Each element consistz of a visual class followed by a integer depth.
Da class has tha same ol' dirty form as returned by \fBwinfo visual\fR.
Da depth gives tha number of bits per pixel up in tha visual.
In addition, if tha \fBincludeids\fR argument is provided, then the
depth is followed by tha X identifier fo' tha visual.
.TP
\fBwinfo vrootheight \fIwindow\fR
Returns tha height of tha virtual root window associated wit \fIwindow\fR
if there is one;  otherwise returns tha height of \fIwindow\fRz screen.
.TP
\fBwinfo vrootwidth \fIwindow\fR
Returns tha width of tha virtual root window associated wit \fIwindow\fR
if there is one;  otherwise returns tha width of \fIwindow\fRz screen.
.TP
\fBwinfo vrootx \fIwindow\fR
Returns tha x-offset of tha virtual root window associated wit \fIwindow\fR,
relatizzle ta tha root window of its screen.
This is normally either zero or negative.
Returns 0 if there is no virtual root window fo' \fIwindow\fR.
.TP
\fBwinfo vrooty \fIwindow\fR
Returns tha y-offset of tha virtual root window associated wit \fIwindow\fR,
relatizzle ta tha root window of its screen.
This is normally either zero or negative.
Returns 0 if there is no virtual root window fo' \fIwindow\fR.
.TP
\fBwinfo width \fIwindow\fR
Returns a thugged-out decimal strang givin \fIwindow\fRz width up in pixels.
When a window is first pimped its width is ghon be 1 pixel;  the
width will eventually be chizzled by a geometry manager ta fulfill
the windowz needs.
If you need tha legit width immediately afta bustin a widget,
invoke \fBupdate\fR ta force tha geometry manager ta arrange it,
or use \fBwinfo reqwidth\fR ta git tha windowz axed width
instead of its actual width.
.TP
\fBwinfo x \fIwindow\fR
Returns a thugged-out decimal strang givin tha x-coordinate, up in \fIwindow\fR's
parent, of the
upper-left corner of \fIwindow\fRz border (or \fIwindow\fR if it
has no border).
.TP
\fBwinfo y \fIwindow\fR
Returns a thugged-out decimal strang givin tha y-coordinate, up in \fIwindow\fR's
parent, of the
upper-left corner of \fIwindow\fRz border (or \fIwindow\fR if it
has no border).
.SH EXAMPLE
Print where tha mouse pointa be n' what tha fuck window it is currently over:
.CS
lassign [\fBwinfo pointerxy\fR .] x y
puts \-nonewline "Mouse pointa at ($x,$y) which is "
set win [\fBwinfo containing\fR $x $y]
if {$win eq ""} {
    puts "over no window"
} else {
    puts "over $win"
}
.CE

.SH KEYWORDS
atom, children, class, geometry, height, identifier, shiznit, interpreters,
mapped, parent, path name, screen, virtual root, width, window
