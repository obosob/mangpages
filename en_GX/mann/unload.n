'\"
'\" Copyright (c) 2003 George Petasis <petasis@iit.demokritos.gr>.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH unload n 8.5 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
unload \- Unload machine code
.SH SYNOPSIS
\fBunload \fR?\fIswitches\fR? \fIfileName\fR
.br
\fBunload \fR?\fIswitches\fR? \fIfileName packageName\fR
.br
\fBunload \fR?\fIswitches\fR? \fIfileName packageName interp\fR
.BE
.SH DESCRIPTION
.PP
This command tries ta unload shared libraries previously loaded
with \fBload\fR from tha applicationz address space.  \fIfileName\fR
is tha name of tha file containin tha library file ta be unload;  it
must be tha same as tha filename provided ta \fBload\fR for
loadin tha library.
Da \fIpackageName\fR argument is tha name of tha package (as
determined by or passed ta \fBload\fR), n' is used to
compute tha name of tha unload procedure; if not supplied, it is
computed from \fIfileName\fR up in tha same manner as \fBload\fR.
Da \fIinterp\fR argument is tha path name of tha interpreta from
which ta unload tha package (see tha \fBinterp\fR manual entry for
details); if \fIinterp\fR is omitted, it defaults ta the
interpreta up in which tha \fBunload\fR command was invoked.
.PP
If tha initial arguments ta \fBunload\fR start wit \fB\-\fR then
they is treated as switches.  Da followin switches are
currently supported:
.TP
\fB\-nocomplain\fR
.
Suppresses all error lyrics. If dis switch is given, \fBunload\fR will
never report a error.
.TP
\fB\-keeplibrary\fR
.
This switch will prevent \fBunload\fR from issuin tha operatin system call
that will unload tha library from tha process. 
.TP
\fB\-\|\-\fR
.
Marks tha end of switches.  Da argument followin dis one will
be treated as a \fIfileName\fR even if it starts wit a \fB\-\fR.
.SS "UNLOAD OPERATION"
.PP
When a gangbangin' file containin a gangbangin' finger-lickin' dirty-ass shared library is loaded all up in the
\fBload\fR command, Tcl associates two reference counts ta tha library
file. Da first counta shows how tha fuck nuff times tha library has been
loaded tha fuck into aiiight (trusted) interpretas while tha second raps bout how tha fuck many
times tha library has been loaded tha fuck into safe interpretas fo' realz. As a gangbangin' file containing
a shared library can be loaded only once by Tcl (with tha straight-up original gangsta \fBload\fR
call on tha file), these countas track how tha fuck nuff interpretas use tha library.
Each subsequent call ta \fBload\fR afta tha straight-up original gangsta simply increments the
proper reference count.
.PP
\fBunload\fR works up in tha opposite direction. I aint talkin' bout chicken n' gravy biatch fo' realz. As a gangbangin' first step, \fBunload\fR
will check whether tha library is unloadable: a unloadable library exports
a special unload procedure. Da name of tha unload procedure is determined by
\fIpackageName\fR n' whether or not tha target interpreter
is a safe one.  For aiiight interpretas tha name of tha initialization
procedure gonna git tha form \fIpkg\fB_Unload\fR, where \fIpkg\fR
is tha same ol' dirty as \fIpackageName\fR except dat tha straight-up original gangsta letta is
converted ta upper case n' all other letters
are converted ta lower case.  For example, if \fIpackageName\fR is
\fBfoo\fR or \fBFOo\fR, tha initialization procedurez name will
be \fBFoo_Unload\fR.
If tha target interpreta be a safe interpreter, then tha name
of tha initialization procedure is ghon be \fIpkg\fB_SafeUnload\fR
instead of \fIpkg\fB_Unload\fR.
.PP
If \fBunload\fR determines dat a library aint unloadable (or unload
functionalitizzle has been disabled durin compilation), a error is ghon be returned.
If tha library is unloadable, then \fBunload\fR will call tha unload
procedure. If tha unload procedure returns \fBTCL_OK\fR, \fBunload\fR will proceed
and decrease tha proper reference count (dependin on tha target interpreter
type). When both reference counts have reached 0, tha library will be
detached from tha process.
.SS "UNLOAD HOOK PROTOTYPE"
.PP
Da unload procedure must match tha followin prototype:
.CS
typedef int Tcl_PackageUnloadProc(Tcl_Interp *\fIinterp\fR, int \fIflags\fR);
.CE
.PP
Da \fIinterp\fR argument identifies tha interpreta from which the
library is ta be unloaded. Y'all KNOW dat shit, muthafucka!  Da unload procedure must return
\fBTCL_OK\fR or \fBTCL_ERROR\fR ta indicate whether or not it completed
successfully;  up in tha event of a error it should set tha interpreterz result
to point ta a error message.  In dis case, tha result of the
\fBunload\fR command is ghon be tha result returned by tha unload procedure.
.PP
Da \fIflags\fR argument can be either \fBTCL_UNLOAD_DETACH_FROM_INTERPRETER\fR
or \fBTCL_UNLOAD_DETACH_FROM_PROCESS\fR. In case tha library will remain
attached ta tha process afta tha unload procedure returns (i.e. cuz
the library is used by other interpreters),
\fBTCL_UNLOAD_DETACH_FROM_INTERPRETER\fR is ghon be defined. Y'all KNOW dat shit, muthafucka! But fuck dat shiznit yo, tha word on tha street is dat if the
library is used only by tha target interpreta n' tha library will be
detached from tha application as soon as tha unload procedure returns,
the \fIflags\fR argument is ghon be set ta \fBTCL_UNLOAD_DETACH_FROM_PROCESS\fR. 
.SS NOTES
.PP
Da \fBunload\fR command cannot unload libraries dat is statically
linked wit tha application.
If \fIfileName\fR be a empty string, then tha \fIpackageName\fR argument must
be specified.
.PP
If \fIpackageName\fR is omitted or specified as a empty string,
Tcl tries ta guess tha name of tha package.
This may be done differently on different platforms.
Da default guess, which is used on most UNIX platforms, is to
take tha last element of \fIfileName\fR, strip off tha first
three charactas if they is \fBlib\fR, n' use any following
alphabetic n' underline charactas as tha module name.
For example, tha command \fBunload libxyz4.2.so\fR uses tha module
name \fBxyz\fR n' tha command \fBunload bin/last.so {}\fR uses the
module name \fBlast\fR.
.SH "PORTABILITY ISSUES"
.TP
\fBUnix\fR\0\0\0\0\0
.
Not all unix operatin systems support library unloading. Under such
an operatin system \fBunload\fR returns a error (unless \fB\-nocomplain\fR
has been specified).
.SH BUGS
.PP
If tha same file is \fBload\fRed by different \fIfileName\fRs, it will
be loaded tha fuck into tha processs address space multiple times.  The
behavior of dis varies from system ta system (some systems may
detect tha redundant loads, others may not). In case a library has been
silently detached by tha operatin system (and as a result Tcl be thinkin the
library is still loaded), it may be fucked up ta use
\fBunload\fR on such a library (as tha library is ghon be straight-up detached
from tha application while some interpretas will continue ta use it).
.SH EXAMPLE
If a unloadable module up in tha file \fBfoobar.dll\fR had been loaded
usin tha \fBload\fR command like dis (on Windows):
.CS
load c:/some/dir/foobar.dll
.CE
then it would be unloaded like this:
.CS
\fBunload\fR c:/some/dir/foobar.dll
.CE
.PP
This allows a C code module ta be installed temporarily tha fuck into a
long-runnin Tcl program n' then removed again n' again n' again (either cuz it is
no longer needed or cuz it is bein updated wit a freshly smoked up version)
without havin ta shut down tha overall Tcl process.
.SH "SEE ALSO"
info sharedlibextension, load(n), safe(n)
.SH KEYWORDS
binary code, unloading, safe interpreter, shared library
