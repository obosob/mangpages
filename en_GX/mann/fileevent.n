'\"
'\" Copyright (c) 1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH fileevent n 7.5 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
fileevent \- Execute a script when a cold-ass lil channel becomes readable or writable
.SH SYNOPSIS
\fBfileevent \fIchannelId \fBreadable \fR?\fIscript\fR?
.sp
\fBfileevent \fIchannelId \fBwritable \fR?\fIscript\fR?
.BE

.SH DESCRIPTION
.PP
This command is used ta create \fIfile event handlezs\fR.  A file event
handlez be a funky-ass bindin between a cold-ass lil channel n' a script, such dat tha script
is evaluated whenever tha channel becomes readable or writable.  File event
handlezs is most commonly used ta allow data ta be received from another
process on a event-driven basis, so dat tha receiver can continue to
interact wit tha user while waitin fo' tha data ta arrive.  If an
application invokes \fBgets\fR or \fBread\fR on a funky-ass blockin channel when
there is no input data available, tha process will block; until tha input
data arrives, it aint gonna be able ta steez other events, so it will
appear ta tha user to
.QW "freeze up" .
With \fBfileevent\fR, tha process can
tell when data is present n' only invoke \fBgets\fR or \fBread\fR when
they aint gonna block.
.PP
Da \fIchannelId\fR argument ta \fBfileevent\fR refers ta a open
channel like fuckin a Tcl standard channel (\fBstdin\fR, \fBstdout\fR,
or \fBstderr\fR), tha return value from a invocation of \fBopen\fR
or \fBsocket\fR, or tha result of a cold-ass lil channel creation command provided
by a Tcl extension.
.PP
If tha \fIscript\fR argument is specified, then \fBfileevent\fR
creates a freshly smoked up event handlez:  \fIscript\fR is ghon be evaluated
whenever tha channel becomes readable or writable (dependin on the
second argument ta \fBfileevent\fR).
In dis case \fBfileevent\fR returns a empty string.
Da \fBreadable\fR n' \fBwritable\fR event handlezs fo' a gangbangin' file
are independent, n' may be pimped n' deleted separately.
But fuck dat shiznit yo, tha word on tha street is dat there may be at most one \fBreadable\fR n' one \fBwritable\fR
handlez fo' a gangbangin' file at a given time up in a given interpreter.
If \fBfileevent\fR is called when tha specified handlez already
exists up in tha invokin interpreter, tha freshly smoked up script replaces tha oldschool one.
.PP
If tha \fIscript\fR argument aint specified, \fBfileevent\fR
returns tha current script fo' \fIchannelId\fR, or a empty string
if there is none.
If tha \fIscript\fR argument is specified as a empty string
then tha event handlez is deleted, so dat no script is ghon be invoked.
A file event handlez be also deleted automatically whenever
its channel is closed or its interpreta is deleted.
.PP
A channel is considered ta be readable if there is unread data
available on tha underlyin device.
A channel be also considered ta be readable if there is unread
data up in a input buffer, except up in tha special case where the
most recent attempt ta read from tha channel was a \fBgets\fR
call dat could not find a cold-ass lil complete line up in tha input buffer.
This feature allows a gangbangin' file ta be read a line at a time up in nonblockin mode
usin events.
A channel be also considered ta be readable if a end of file or
error condizzle is present on tha underlyin file or device.
It be blingin fo' \fIscript\fR ta check fo' these conditions
and handle dem appropriately;  fo' example, if there is no special
check fo' end of file, a infinite loop may occur where \fIscript\fR
readz no data, returns, n' is immediately invoked again.
.PP
A channel is considered ta be writable if at least one byte of data
can be freestyled ta tha underlyin file or thang without blocking,
or if a error condizzle is present on tha underlyin file or device.
.PP
Event-driven I/O works dopest fo' channels dat have been
placed tha fuck into nonblockin mode wit tha \fBfconfigure\fR command.
In blockin mode, a \fBputs\fR command may block if you give it
more data than tha underlyin file or thang can accept, n' a
\fBgets\fR or \fBread\fR command will block if you attempt ta read
more data than is ready;  no events is ghon be processed while the
commandz block.
In nonblockin mode \fBputs\fR, \fBread\fR, n' \fBgets\fR never block.
See tha documentation fo' tha individual commandz fo' shiznit
on how tha fuck they handle blockin n' nonblockin channels.
.PP
Da script fo' a gangbangin' file event is executed at global level (outside the
context of any Tcl procedure) up in tha interpreta up in which the
\fBfileevent\fR command was invoked.
If a error occurs while executin tha script then the
command registered wit \fBinterp bgerror\fR is used ta report tha error.
In addition, tha file event handlez is deleted if it eva returns
an error;  dis is done up in order ta prevent infinite loops due to
buggy handlezs.
.SH EXAMPLE
In dis setup \fBGetData\fR is ghon be called wit tha channel as an
argument whenever $chan becomes readable.
.CS
proc GetData {chan} {
    if {![eof $chan]} {
        puts [gets $chan]
    }
}

\fBfileevent\fR $chan readable [list GetData $chan]
.CE

.SH CREDITS
.PP
\fBfileevent\fR is based on tha \fBaddinput\fR command pimped
by Mark Diekhans.

.SH "SEE ALSO"
fconfigure(n), gets(n), interp(n), puts(n), read(n), Tcl_StandardChannels(3)

.SH KEYWORDS
asynchronous I/O, blocking, channel, event handlez, nonblocking, readable,
script, writable.
