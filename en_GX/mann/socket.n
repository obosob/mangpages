'\"
'\" Copyright (c) 1996 Sun Microsystems, Inc.
'\" Copyright (c) 1998-1999 by Scriptics Corporation.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\"
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH socket n 8.0 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
socket \- Open a TCP network connection
.SH SYNOPSIS
.sp
\fBsocket \fR?\fIoptions\fR? \fIhost port\fR
.sp
\fBsocket\fR \fB\-server \fIcommand\fR ?\fIoptions\fR? \fIport\fR
.BE

.SH DESCRIPTION
.PP
This command opens a network socket n' returns a cold-ass lil channel
identifier dat may be used up in future invocationz of commandz like
\fBread\fR, \fBputs\fR n' \fBflush\fR.
At present only tha TCP network protocol is supported;  future
releases may include support fo' additionizzle protocols.
Da \fBsocket\fR command may be used ta open either tha client or
server side of a cold-ass lil connection, dependin on whether tha \fB\-server\fR
switch is specified.
.PP
Note dat tha default encodin fo' \fIall\fR sockets is tha system
encoding, as returned by \fBencodin system\fR.  Most of tha time, you
will need ta use \fBfconfigure\fR ta alta dis ta suttin' else,
like fuckin \fIutf\-8\fR (ideal fo' communicatin wit other Tcl
processes) or \fIiso8859\-1\fR (useful fo' nuff network protocols,
especially tha olda ones).
.SH "CLIENT SOCKETS"
.PP
If tha \fB\-server\fR option aint specified, then tha client side of a
connection is opened n' tha command returns a cold-ass lil channel identifier
that can be used fo' both readin n' writing.
\fIPort\fR n' \fIhost\fR specify a port
to connect to;  there must be a server acceptin connections on
this port.  \fIPort\fR be a integer port number
(or steez name, where supported n' understood by tha host operating
system) n' \fIhost\fR
is either a thugged-out domain-style name like fuckin \fBwww.tcl.tk\fR or
a numerical IP address like fuckin \fB127.0.0.1\fR.
Use \fIlocalhost\fR ta refer ta tha host on which tha command is invoked.
.PP
Da followin options may also be present before \fIhost\fR
to specify additionizzle shiznit bout tha connection:
.TP
\fB\-myaddr\fI addr\fR
\fIAddr\fR gives tha domain-style name or numerical IP address of
the client-side network intercourse ta use fo' tha connection.
This option may be useful if tha client machine has multiple network
interfaces.  If tha option is omitted then tha client-side intercourse
will be chosen by tha system software.
.TP
\fB\-myport\fI port\fR
\fIPort\fR specifies a integer port number (or steez name, where
supported n' understood by tha host operatin system) ta use fo' the
client's
side of tha connection. I aint talkin' bout chicken n' gravy biatch.  If dis option is omitted, tha client's
port number is ghon be chosen at random by tha system software.
.TP
\fB\-async\fR
Da \fB\-async\fR option will cause tha client socket ta be connected
asynchronously. This means dat tha socket is ghon be pimped immediately but
may not yet be connected ta tha server, when tha call ta \fBsocket\fR
returns. When a \fBgets\fR or \fBflush\fR is done on tha socket before the
connection attempt succeedz or fails, if tha socket is up in blockin mode, the
operation will wait until tha connection is completed or fails. If the
socket is up in nonblockin mode n' a \fBgets\fR or \fBflush\fR is done on
the socket before tha connection attempt succeedz or fails, tha operation
returns immediately n' \fBfblocked\fR on tha socket returns 1. Right back up in yo muthafuckin ass. Synchronous
client sockets may be switched (afta they have connected) ta operatin in
asynchronous mode using:
.RS
.CS
\fBfconfigure \fIchan \fB\-blockin 0\fR
.CE
.PP
See tha \fBfconfigure\fR command fo' mo' details.
.RE
.SH "SERVER SOCKETS"
.PP
If tha \fB\-server\fR option is specified then tha freshly smoked up socket
will be a server fo' tha port given by \fIport\fR (either a integer
or a steez name, where supported n' understood by tha host
operatin system; if \fIport\fR is zero, tha operatin system will
allocate a gangbangin' free port ta tha server socket which may be discovered by
usin \fBfconfigure\fR ta read tha \fB\-sockname\fR option).
Tcl will automatically accept connections ta tha given port.
For each connection Tcl will create a freshly smoked up channel dat may be used to
communicate wit tha client.  Tcl then invokes \fIcommand\fR
with three additionizzle arguments: tha name of tha freshly smoked up channel, the
address, up in network address notation, of tha clientz host, and
the clientz port number.
.PP
Da followin additionizzle option may also be specified before \fIport\fR:
.TP
\fB\-myaddr\fI addr\fR
\fIAddr\fR gives tha domain-style name or numerical IP address of
the server-side network intercourse ta use fo' tha connection.
This option may be useful if tha server machine has multiple network
interfaces.  If tha option is omitted then tha server socket is bound
to tha special address INADDR_ANY so dat it can accept connections from
any intercourse.
.PP
Server channels cannot be used fo' input or output; they sole use is to
accept freshly smoked up client connections. Da channels pimped fo' each incoming
client connection is opened fo' input n' output. Closin tha server
channel shuts down tha server so dat no freshly smoked up connections will be
accepted;  however, existin connections is ghon be unaffected.
.PP
Server sockets depend on tha Tcl event mechanizzle ta smoke up when
new connections is opened. Y'all KNOW dat shit, muthafucka!  If tha application do not enta the
event loop, fo' example by invokin tha \fBvwait\fR command or
callin tha C procedure \fBTcl_DoOneEvent\fR, then no connections
will be accepted.
.PP
If \fIport\fR is specified as zero, tha operatin system will allocate
an unused port fo' use as a server socket.  Da port number actually
allocated may be retrieved from tha pimped server socket rockin the
\fBfconfigure\fR command ta retrieve tha \fB\-sockname\fR option as
busted lyrics bout below.
.SH "CONFIGURATION OPTIONS"
Da \fBfconfigure\fR command can be used ta query nuff muthafuckin readonly
configuration options fo' socket channels:
.TP
\fB\-error\fR
This option gets tha current error statuz of tha given socket.  This
is useful when you need ta determine if a asynchronous connect
operation succeeded. Y'all KNOW dat shit, muthafucka!  If there was a error, tha error message is
returned. Y'all KNOW dat shit, muthafucka!  If there was no error, a empty strang is returned.

Note dat tha error status is reset by tha read operation; dis mimics
the underlyin getsockopt(SO_ERROR) call.
.TP
\fB\-sockname\fR
This option returns a list of three elements, tha address, tha host name
and tha port number fo' tha socket. If tha host name cannot be computed,
the second element is identical ta tha address, tha straight-up original gangsta element of the
list.
.TP
\fB\-peername\fR
This option aint supported by server sockets, n' you can put dat on yo' toast. For client n' accepted
sockets, dis option returns a list of three elements; these is the
address, tha host name n' tha port ta which tha peer socket is connected
or bound. Y'all KNOW dat shit, muthafucka! If tha host name cannot be computed, tha second element of the
list is identical ta tha address, its first element.
.PP
.SH "EXAMPLES"
Here be a straight-up simple time server:
.CS
proc Server {channel clientaddr clientport} {
   puts "Connection from $clientaddr registered"
   puts $channel [clock format [clock seconds]]
   close $channel
}

\fBsocket\fR -server Server 9900
vwait forever
.CE
.PP
And here is tha correspondin client ta rap ta tha server:
.CS
set server localhost
set sockChan [\fBsocket\fR $server 9900]
gets $sockChan line
close $sockChan
puts "Da time on $server is $line"
.CE

.SH "SEE ALSO"
fconfigure(n), flush(n), open(n), read(n)

.SH KEYWORDS
bind, channel, connection, domain name, host, network address, socket, tcp
