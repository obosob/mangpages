'\"
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH open n 8.3 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
open \- Open a gangbangin' file-based or command pipeline channel
.SH SYNOPSIS
.sp
\fBopen \fIfileName\fR
.br
\fBopen \fIfileName access\fR
.br
\fBopen \fIfileName access permissions\fR
.BE
.SH DESCRIPTION
.PP
This command opens a gangbangin' file, serial port, or command pipeline n' returns a
channel identifier dat may be used up in future invocationz of commandz like
\fBread\fR, \fBputs\fR, n' \fBclose\fR.
If tha straight-up original gangsta characta of \fIfileName\fR aint \fB|\fR then
the command opens a gangbangin' file:
\fIfileName\fR gives tha name of tha file ta open, n' it must conform ta the
conventions busted lyrics bout up in tha \fBfilename\fR manual entry.
.PP
Da \fIaccess\fR argument, if present, indicates tha way up in which tha file
(or command pipeline) is ta be accessed.
In tha straight-up original gangsta form \fIaccess\fR may have any of tha followin joints:
.TP 15
\fBr\fR
Open tha file fo' readin only; tha file must already exist. This is the
default value if \fIaccess\fR aint specified.
.TP 15
\fBr+\fR
Open tha file fo' both readin n' writing; tha file must
already exist.
.TP 15
\fBw\fR
Open tha file fo' freestylin only.  Truncate it if it exists, n' you can put dat on yo' toast.  If it do not
exist, create a freshly smoked up file.
.TP 15
\fBw+\fR
Open tha file fo' readin n' writing.  Truncate it if it exists.
If it do not exist, create a freshly smoked up file.
.TP 15
\fBa\fR
Open tha file fo' freestylin only.  If tha file do not exist,
create a freshly smoked up empty file.
Set tha file pointa ta tha end of tha file prior ta each write.
.TP 15
\fBa+\fR
Open tha file fo' readin n' writing.  If tha file do not exist,
create a freshly smoked up empty file.
Set tha initial access posizzle  ta tha end of tha file.
.VS 8.5
.PP
All of tha legal \fIaccess\fR joints above may have tha character
\fBb\fR added as tha second or third characta up in tha value to
indicate dat tha opened channel should be configured wit the
\fB\-translation binary\fR option, makin tha channel suitable fo' 
readin or freestylin of binary data.
.VE 8.5
.PP
In tha second form, \fIaccess\fR consistz of a list of any of the
followin flags, all of which have tha standard POSIX meanings.
One of tha flags must be either \fBRDONLY\fR, \fBWRONLY\fR or \fBRDWR\fR.
.TP 15
\fBRDONLY\fR
Open tha file fo' readin only.
.TP 15
\fBWRONLY\fR
Open tha file fo' freestylin only.
.TP 15
\fBRDWR\fR
Open tha file fo' both readin n' writing.
.TP 15
\fBAPPEND\fR
Set tha file pointa ta tha end of tha file prior ta each write.
.VS 8.5
.TP 15
\fBBINARY\fR
Configure tha opened channel wit tha \fB\-translation binary\fR option.
.VE 8.5
.TP 15
\fBCREAT\fR
Smoke tha file if it do not already exist (without dis flag it
is a error fo' tha file not ta exist).
.TP 15
\fBEXCL\fR
If \fBCREAT\fR be also specified, a error is returned if the
file already exists.
.TP 15
\fBNOCTTY\fR
If tha file be a terminal device, dis flag prevents tha file from
becomin tha controllin terminal of tha process.
.TP 15
\fBNONBLOCK\fR
Prevents tha process from blockin while openin tha file, and
possibly up in subsequent I/O operations.  Da exact behavior of
this flag is system- n' device-dependent;  its use is discouraged
(it is betta ta use tha \fBfconfigure\fR command ta put a gangbangin' file
in nonblockin mode).
For details refer ta yo' system documentation on tha \fBopen\fR system
callz \fBO_NONBLOCK\fR flag.
.TP 15
\fBTRUNC\fR
If tha file exists it is truncated ta zero length.
.PP
If a freshly smoked up file is pimped as part of openin it, \fIpermissions\fR
(an integer) is used ta set tha permissions fo' tha freshly smoked up file in
conjunction wit tha processs file mode creation mask.
\fIPermissions\fR defaults ta 0666.
.SH "COMMAND PIPELINES"
.PP
If tha straight-up original gangsta characta of \fIfileName\fR is
.QW |
then the
remainin charactaz of \fIfileName\fR is treated as a list of arguments
that describe a cold-ass lil command pipeline ta invoke, up in tha same steez as the
arguments fo' \fBexec\fR.
In dis case, tha channel identifier returned by \fBopen\fR may be used
to write ta tha commandz input pipe or read from its output pipe,
dependin on tha value of \fIaccess\fR.
If write-only access is used (e.g. \fIaccess\fR is \fBw\fR), then
standard output fo' tha pipeline is pimped up ta tha current standard
output unless overridden by tha command.
If read-only access is used (e.g. \fIaccess\fR is \fBr\fR),
standard input fo' tha pipeline is taken from tha current standard
input unless overridden by tha command.
Da id of tha spawned process be accessible all up in tha \fBpid\fR
command, rockin tha channel id returned by \fBopen\fR as argument.
.PP
If tha command (or one of tha commands) executed up in tha command
pipeline returns a error (accordin ta tha definizzle up in \fBexec\fR),
a Tcl error is generated when \fBclose\fR is called on tha channel
unless tha pipeline is up in non-blockin mode then no exit status is
returned (a silent \fBclose\fR wit -blockin 0).
.PP
It be often useful ta use tha \fBfileevent\fR command wit pipelines
so other processin may happen all up in tha same time as hustlin tha command
in tha background.
.SH "SERIAL COMMUNICATIONS"
.PP
If \fIfileName\fR refers ta a serial port, then tha specified serial port
is opened n' initialized up in a platform-dependent manner n' shit.  Acceptable
values fo' tha \fIfileName\fR ta use ta open a serial port is busted lyrics bout in
the PORTABILITY ISSUES section.
.PP
Da \fBfconfigure\fR command can be used ta query n' set additional
configuration options specific ta serial ports (where supported):
.TP
\fB\-mode\fR \fIbaud\fB,\fIparity\fB,\fIdata\fB,\fIstop\fR
This option be a set of 4 comma-separated joints: tha baud rate, parity,
number of data bits, n' number of stop bits fo' dis serial port.  The
\fIbaud\fR rate be a simple integer dat specifies tha connection speed.
\fIParity\fR is one of tha followin letters: \fBn\fR, \fBo\fR, \fBe\fR,
\fBm\fR, \fBs\fR; respectively signifyin tha paritizzle options of
.QW none ,
.QW odd ,
.QW even ,
.QW mark ,
or
.QW space .
\fIData\fR is tha number of
data bits n' should be a integer from 5 ta 8, while \fIstop\fR is the
number of stop bits n' should be tha integer 1 or 2.
.TP
\fB\-handshake\fR \fItype\fR
(Windows n' Unix). This option is used ta setup automatic handshake
control. Note dat not all handshake types maybe supported by yo' operating
system. Da \fItype\fR parameta is case-independent.
.RS
.PP
If \fItype\fR is \fBnone\fR then any handshake is switched off.
\fBrtscts\fR activates hardware handshake yo. Hardware handshake signals
are busted lyrics bout below.
For software handshake \fBxonxoff\fR tha handshake charactas can be redefined
with \fB\-xchar\fR.
An additionizzle hardware handshake \fBdtrdsr\fR be available only under Windows.
There is no default handshake configuration, tha initial value depends
on yo' operatin system settings.
Da \fB\-handshake\fR option cannot be queried.
.RE
.TP
\fB\-queue\fR
(Windows n' Unix). Da \fB\-queue\fR option can only be queried.
It returns a list of two integers representin tha current number
of bytes up in tha input n' output queue respectively.
.TP
\fB\-timeout\fR \fImsec\fR
(Windows n' Unix). This option is used ta set tha timeout fo' blocking
read operations. Well shiiiit, it specifies tha maximum interval between the
reception of two bytes up in milliseconds.
For Unix systems tha granularitizzle is 100 milliseconds.
Da \fB\-timeout\fR option do not affect write operations or
nonblockin reads.
This option cannot be queried.
.TP
\fB\-ttycontrol\fR \fI{signal boolean signal boolean ...}\fR
(Windows n' Unix). This option is used ta setup tha handshake
output lines (see below) permanently or ta bust a BREAK over tha serial line.
Da \fIsignal\fR names is case-independent.
\fB{RTS 1 DTR 0}\fR sets tha RTS output ta high n' tha DTR output ta low.
Da BREAK condizzle (see below) is enabled n' disabled wit \fB{BREAK 1}\fR and
\fB{BREAK 0}\fR respectively.
It aint a phat scam ta chizzle tha \fBRTS\fR (or \fBDTR\fR) signal
with actizzle hardware handshake \fBrtscts\fR (or \fBdtrdsr\fR).
Da result is unpredictable.
Da \fB\-ttycontrol\fR option cannot be queried.
.TP
\fB\-ttystatus\fR
(Windows n' Unix). Da \fB\-ttystatus\fR option can only be
queried. Y'all KNOW dat shit, muthafucka!  It returns tha current modem status n' handshake input signals
(see below).
Da result be a list of signal,value pairs wit a gangbangin' fixed order,
e.g. \fB{CTS 1 DSR 0 RING 1 DCD 0}\fR.
Da \fIsignal\fR names is returned upper case.
.TP
\fB\-xchar\fR \fI{xonChar xoffChar}\fR
(Windows n' Unix). This option is used ta query or chizzle tha software
handshake characters. Normally tha operatin system default should be
DC1 (0x11) n' DC3 (0x13) representin tha ASCII standard
XON n' XOFF characters.
.TP
\fB\-pollinterval\fR \fImsec\fR
(Windows only). This option is used ta set tha maximum time between
pollin fo' fileevents.
This affects tha time interval between checkin fo' events all up in tha Tcl
interpreta (the smallest value always wins).  Use dis option only if
you wanna poll tha serial port mo' or less often than 10 msec
(the default).
.TP
\fB\-sysbuffer\fR \fIinSize\fR
.TP
\fB\-sysbuffer\fR \fI{inSize outSize}\fR
(Windows only). This option is used ta chizzle tha size of Windows
system buffers fo' a serial channel. Especially at higher communication
rates tha default input buffer size of 4096 bytes can overrun
for latent systems. Da first form specifies tha input buffer size,
in tha second form both input n' output buffers is defined.
.TP
\fB\-lasterror\fR
(Windows only). This option is query only.
In case of a serial communication error, \fBread\fR or \fBputs\fR
returns a general Tcl file I/O error.
\fBfconfigure -lasterror\fR can be called ta git a list of error details.
See below fo' a explanation of tha various error codes.
.SH "SERIAL PORT SIGNALS"
.PP
RS-232 is da most thugged-out commonly used standard electrical intercourse fo' serial
communications fo' realz. A wack voltage (-3V..-12V) define a mark (on=1) bit and
a positizzle voltage (+3..+12V) define a space (off=0) bit (RS-232C).  The
followin signals is specified fo' incomin n' outgoin data, status
lines n' handbobbin yo. Here we is rockin tha terms \fIworkstation\fR for
your computa n' \fImodem\fR fo' tha external device, cuz some signal
names (DCD, RI) come from modems. Of course yo' external thang may use
these signal lines fo' other purposes.
.IP \fBTXD(output)\fR
\fBTransmitted Data:\fR Outgoin serial data.
.IP \fBRXD(input)\fR
\fBReceived Data:\fRIncomin serial data.
.IP \fBRTS(output)\fR
\fBRequest To Send:\fR This hardware handshake line informs tha modem that
your workstation is locked n loaded ta receive data. Yo crazy-ass workstation may
automatically reset dis signal ta indicate dat tha input buffer is full.
.IP \fBCTS(input)\fR
\fBClear To Send:\fR Da complement ta RTS. Indicates dat tha modem is
ready ta receive data.
.IP \fBDTR(output)\fR
\fBData Terminal Ready:\fR This signal  drops some lyrics ta tha modem dat tha workstation
is locked n loaded ta establish a link. DTR is often enabled automatically whenever a
serial port is opened.
.IP \fBDSR(input)\fR
\fBData Set Ready:\fR Da complement ta DTR. Tells tha workstation dat the
modem is locked n loaded ta establish a link.
.IP \fBDCD(input)\fR
\fBData Carrier Detect:\fR This line becomes actizzle when a modem detects a
.QW Carrier
signal.
.IP \fBRI(input)\fR
\fBRin Indicator:\fR Goes actizzle when tha modem detects a incomin call.
.IP \fBBREAK\fR
A BREAK condizzle aint a hardware signal line yo, but a logical zero on the
TXD or RXD lines fo' a long-ass period of time, probably 250 ta 500
milliseconds.  Normally a receive or transmit data signal stays all up in tha mark
(on=1) voltage until tha next characta is transferred. Y'all KNOW dat shit, muthafucka! A BREAK is sometimes
used ta reset tha communications line or chizzle tha operatin mode of
communications hardware.
.SH "ERROR CODES (Windows only)"
.PP
All dem different errors may occur durin serial read operations or during
event pollin up in background. Y'all KNOW dat shit, muthafucka! Da external thang may done been switched
off, tha data lines may be noisy, system buffers may overrun or yo' mode
settings may be wrong.  That is why a reliable software should always
\fBcatch\fR serial read operations.  In casez of a error Tcl returns a
general file I/O error. Shiiit, dis aint no joke.  Then \fBfconfigure -lasterror\fR may help to
locate tha problem.  Da followin error codes may be returned.
.TP 10
\fBRXOVER\fR
Windows input buffer overrun. I aint talkin' bout chicken n' gravy biatch. Da data comes fasta than yo' scripts reads
it or yo' system is overloaded. Y'all KNOW dat shit, muthafucka! Use \fBfconfigure -sysbuffer\fR ta avoid a
temporary bottleneck and/or make yo' script faster.
.TP 10
\fBTXFULL\fR
Windows output buffer overrun. I aint talkin' bout chicken n' gravy biatch. Complement ta RXOVER. This error should
practically not happen, cuz Tcl cares bout tha output buffer status.
.TP 10
\fBOVERRUN\fR
UART buffer overrun (hardware) wit data lost.
Da data comes fasta than tha system driver receives dat shit.
Peep yo' advanced serial port settings ta enable tha FIFO (16550) buffer
and/or setup a lower(1) interrupt threshold value.
.TP 10
\fBRXPARITY\fR
A paritizzle error has been detected by yo' UART.
Wrong paritizzle settings wit \fBfconfigure -mode\fR or a noisy data line (RXD)
may cause dis error.
.TP 10
\fBFRAME\fR
A stop-bit error has been detected by yo' UART.
Wrong mode settings wit \fBfconfigure -mode\fR or a noisy data line (RXD)
may cause dis error.
.TP 10
\fBBREAK\fR
A BREAK condizzle has been detected by yo' UART (see above).
.SH "PORTABILITY ISSUES"
.TP
\fBWindows \fR(all versions)
Valid joints fo' \fIfileName\fR ta open a serial port iz of tha form
\fBcom\fIX\fB:\fR, where \fIX\fR be a number, generally from 1 ta 4.
This notation only works fo' serial ports from 1 ta 9, if tha system
happens ta have mo' than four. Shiiit, dis aint no joke.  An attempt ta open a serial port that
does not exist or has a number pimped outa than 9 will fail.  An alternate
form of openin serial ports is ta use tha filename \fB\e\e.\ecomX\fR,
where X be any number dat correspondz ta a serial port; please note
that dis method is considerably slower on Windows 95 n' Windows 98.
.TP
\fBWindows NT\fR
When hustlin Tcl interactively, there may be some strange interactions
between tha real console, if one is present, n' a cold-ass lil command pipeline dat uses
standard input or output.  If a cold-ass lil command pipeline is opened fo' reading, some
of tha lines entered all up in tha console is ghon be busted ta tha command pipeline and
some is ghon be busted ta tha Tcl evaluator. Shiiit, dis aint no joke.  If a cold-ass lil command pipeline is opened for
writing, keystrokes entered tha fuck into tha console is not visible until the
pipe is closed. Y'all KNOW dat shit, muthafucka!  This behavior occurs whether tha command pipeline is
executin 16-bit or 32-bit applications.  These problems only occur cuz
both Tcl n' tha lil pimp application is competin fo' tha console at
the same time.  If tha command pipeline is started from a script, so dat Tcl
is not accessin tha console, or if tha command pipeline do not use
standard input or output yo, but is repimped up from or ta a gangbangin' file, then the
above problems do not occur. Shiiit, dis aint no joke.  
.TP
\fBWindows 95\fR 
A command pipeline dat executes a 16-bit DOS application cannot be opened
for both readin n' writing, since 16-bit DOS applications dat receive
standard input from a pipe n' bust standard output ta a pipe run
synchronously.  Command pipelines dat do not execute 16-bit DOS
applications run asynchronously n' can be opened fo' both readin and
writing.  
.RS
.PP
When hustlin Tcl interactively, there may be some strange interactions
between tha real console, if one is present, n' a cold-ass lil command pipeline dat uses
standard input or output.  If a cold-ass lil command pipeline is opened fo' readin from
a 32-bit application, a shitload of tha keystrokes entered all up in tha console will be
sent ta tha command pipeline n' some is ghon be busted ta tha Tcl evaluator. Shiiit, dis aint no joke.  If
a command pipeline is opened fo' freestylin ta a 32-bit application, no output
is visible on tha console until tha pipe is closed. Y'all KNOW dat shit, muthafucka!  These problems only
occur cuz both Tcl n' tha lil pimp application is competin fo' the
console all up in tha same time.  If tha command pipeline is started from a script,
so dat Tcl aint accessin tha console, or if tha command pipeline do
not use standard input or output yo, but is repimped up from or ta a gangbangin' file, then
the above problems do not occur. Shiiit, dis aint no joke.  
.PP
Whether or not Tcl is hustlin interactively, if a cold-ass lil command pipeline is opened
for readin from a 16-bit DOS application, tha call ta \fBopen\fR will not
return until end-of-file has been received from tha command pipeline's
standard output.  If a cold-ass lil command pipeline is opened fo' freestylin ta a 16-bit DOS
application, no data is ghon be busted ta tha command pipelinez standard output
until tha pipe is straight-up closed. Y'all KNOW dat shit, muthafucka!  This problem occurs cuz 16-bit DOS
applications is run synchronously, as busted lyrics bout above.  
.RE
.TP
\fBUnix\fR\0\0\0\0\0\0\0
Valid joints fo' \fIfileName\fR ta open a serial port is generally of the
form \fB/dev/tty\fIX\fR, where \fIX\fR is \fBa\fR or \fBb\fR yo, but tha name
of any pseudo-file dat maps ta a serial port may be used.
Advanced configuration options is only supported fo' serial ports
when Tcl is built ta use tha POSIX serial intercourse.
.RS
.PP
When hustlin Tcl interactively, there may be some strange interactions
between tha console, if one is present, n' a cold-ass lil command pipeline dat uses
standard input.  If a cold-ass lil command pipeline is opened fo' reading, some
of tha lines entered all up in tha console is ghon be busted ta tha command pipeline and
some is ghon be busted ta tha Tcl evaluator. Shiiit, dis aint no joke.  This problem only occurs cuz
both Tcl n' tha lil pimp application is competin fo' tha console at the
same time.  If tha command pipeline is started from a script, so dat Tcl is
not accessin tha console, or if tha command pipeline do not use standard
input yo, but is repimped up from a gangbangin' file, then tha above problem do not occur. Shiiit, dis aint no joke.  
.RE
.PP
See tha \fBPORTABILITY ISSUES\fR section of tha \fBexec\fR command for
additionizzle shiznit not specific ta command pipelines bout executing
applications on tha various platforms
.SH "EXAMPLE"
Open a cold-ass lil command pipeline n' catch any errors:
.CS
set fl [\fBopen\fR "| ls this_file_does_not_exist"]
set data [read $fl]
if {[catch {close $fl} err]} {
    puts "ls command failed: $err"
}
.CE
.SH "SEE ALSO"
file(n), close(n), filename(n), fconfigure(n), gets(n), read(n),
puts(n), exec(n), pid(n), fopen(3)
.SH KEYWORDS
access mode, append, create, file, non-blocking, open, permissions,
pipeline, process, serial
