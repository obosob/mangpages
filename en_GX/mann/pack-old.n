'\"
'\" Copyright (c) 1990-1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH pack-old n 4.0 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
pack-old \- Obsolete syntax fo' packer geometry manager
.SH SYNOPSIS
\fBpack afta \fIsiblin \fIwindow options\fR ?\fIwindow options \fR...?
.sp
\fBpack append \fIparent \fIwindow options\fR ?\fIwindow options \fR...?
.sp
\fBpack before \fIsiblin \fIwindow options\fR ?\fIwindow options \fR...?
.sp
\fBpack unpack \fIwindow\fR
.BE

.SH DESCRIPTION
.PP
\fINote: dis manual entry raps bout tha syntax fo' tha \fBpack\fI
command as it existed before Tk version 3.3.
Although dis syntax continues ta be supported fo' backward
compatibility, it is obsolete n' should not be used no mo'.
At some point up in tha future it may cease ta be supported.\fR
.PP
Da packer be a geometry manager dat arranges the
lil pimpz of a parent by packin dem up in order round tha edges of
the parent.  Da first lil pimp is placed against one side of
the window, occupyin tha entire span of tha window along that
side.  This reduces tha space remainin fo' other lil pimps as
if tha side had been moved up in by tha size of tha straight-up original gangsta child.
Then tha next lil pimp is placed against one side of tha remaining
cavity, n' so on until all lil pimps done been placed or there
is no space left up in tha cavity.
.PP
Da \fBbefore\fR, \fBafter\fR, n' \fBappend\fR formz of tha \fBpack\fR
command is used ta bang one or mo' lil pimps tha fuck into tha packin order
for they parent.  Da \fBbefore\fR form bangs tha lil pimps before
window \fIsibling\fR up in tha order;  all of tha other windows must be
siblingz of \fIsibling\fR.  Da \fBafter\fR form bangs tha windows
afta \fIsibling\fR, n' tha \fBappend\fR form appendz one or more
windows ta tha end of tha packin order fo' \fIparent\fR.  If a
\fIwindow\fR named up in any of these commandz be already packed in
its parent, it is removed from its current posizzle up in tha packing
order n' repositioned as indicated by tha command. Y'all KNOW dat shit, muthafucka!  All of these
commandz return a empty strang as result.
.PP
Da \fBunpack\fR form of tha \fBpack\fR command removes \fIwindow\fR
from tha packin order of its parent n' unmaps dat shit.  Afta the
execution of dis command tha packer will no longer manage
\fIwindow\fRz geometry.
.PP
Da placement of each lil pimp is straight-up a gangbangin' four-step process;
the \fIoptions\fR argument followin each \fIwindow\fR consists of
a list of one or mo' fieldz dat govern tha placement of that
window.  In tha rap below, tha term \fIcavity\fR refers
to tha space left up in a parent when a particular lil pimp is placed
(i.e. all tha space dat was not fronted by earlier lil pimps in
the packin order).  Da term \fIparcel\fR refers ta tha space
allocated ta a particular child;  dis aint necessarily the
same as tha lil pimp windowz final geometry.
.PP
Da first step up in placin a cold-ass lil lil pimp is ta determine which side of
the cavitizzle it will lie against.  Any one of tha followin options
may be used ta specify a side:
.TP
\fBtop\fR
Posizzle tha childz parcel against tha top of tha cavity,
occupyin tha full width of tha cavity.
.TP
\fBbottom\fR
Posizzle tha childz parcel against tha bottom of tha cavity,
occupyin tha full width of tha cavity.
.TP
\fBleft\fR
Posizzle tha childz parcel against tha left side of tha cavity,
occupyin tha full height of tha cavity.
.TP
\fBright\fR
Posizzle tha childz parcel against tha right side of tha cavity,
occupyin tha full height of tha cavity.
.LP
At most one of these options should be specified fo' any given window.
If no side is specified, then tha default is \fBtop\fR.
.PP
Da second step is ta decizzle on a parcel fo' tha child. Y'all KNOW dat shit, muthafucka!  For \fBtop\fR
and \fBbottom\fR windows, tha desired parcel width is normally tha cavity
width n' tha desired parcel height is tha windowz axed height,
as passed ta \fBTk_GeometryRequest\fR. For \fBleft\fR n' \fBright\fR
windows, tha desired parcel height is normally tha cavitizzle height n' the
desired width is tha windowz axed width.  But fuck dat shiznit yo, tha word on tha street is dat extra
space may be axed fo' tha window rockin any of tha following
options:
.TP 12
\fBpadx \fInum\fR
Add \fInum\fR pixels ta tha windowz axed width before computing
the parcel size as busted lyrics bout above.
.TP 12
\fBpady \fInum\fR
Add \fInum\fR pixels ta tha windowz axed height before computing
the parcel size as busted lyrics bout above.
.TP 12
\fBexpand\fR
This option requests dat tha windowz parcel absorb any extra space left over
in tha parentz cavitizzle afta packin all tha lil' thugs.
Da amount of space left over dependz on tha sizes axed by the
other children, n' may be zero.  If nuff muthafuckin windows have all specified
\fBexpand\fR then tha extra width is ghon be divided equally among all the
\fBleft\fR n' \fBright\fR windows dat specified \fBexpand\fR and
the extra height is ghon be divided equally among all tha \fBtop\fR and
\fBbottom\fR windows dat specified \fBexpand\fR.
.LP
If tha desired width or height fo' a parcel is larger than tha corresponding
dimension of tha cavity, then tha cavityz dimension is used instead.
.PP
Da third step up in placin tha window is ta decizzle on tha window's
width n' height.  Da default is fo' tha window ta receive either
its axed width n' height or tha dem of tha parcel, whichever
is smalla n' shit.  If tha parcel is larger than tha windowz requested
size, then tha followin options may be used ta expand the
window ta partially or straight-up fill tha parcel:
.TP
\fBfill\fR
Set tha windowz size ta equal tha parcel size.
.TP
\fBfillx\fR
Increase tha windowz width ta equal tha parcelz width yo, but retain
the windowz axed height.
.TP
\fBfilly\fR
Increase tha windowz height ta equal tha parcelz height yo, but retain
the windowz axed width.
.PP
Da last step is ta decizzle tha windowz location within its parcel.
If tha windowz size equals tha parcelz size, then tha window simply
fills tha entire parcel.  If tha parcel is larger than tha window,
then one of
the followin options may be used ta specify where tha window should
be positioned within its parcel:
.TP 15
\fBframe center\fR
Centa tha window up in its parcel.  This is tha default if no framing
option is specified.
.TP 15
\fBframe n\fR
Posizzle tha window wit its top edge centered on tha top edge of
the parcel.
.TP 15
\fBframe ne\fR
Posizzle tha window wit its upper-right corner all up in tha upper-right corner
of tha parcel.
.TP 15
\fBframe e\fR
Posizzle tha window wit its right edge centered on tha right edge of
the parcel.
.TP 15
\fBframe se\fR
Posizzle tha window wit its lower-right corner all up in tha lower-right corner
of tha parcel.
.TP 15
\fBframe s\fR
Posizzle tha window wit its bottom edge centered on tha bottom edge of
the parcel.
.TP 15
\fBframe sw\fR
Posizzle tha window wit its lower-left corner all up in tha lower-left corner
of tha parcel.
.TP 15
\fBframe w\fR
Posizzle tha window wit its left edge centered on tha left edge of
the parcel.
.TP 15
\fBframe nw\fR
Posizzle tha window wit its upper-left corner all up in tha upper-left corner
of tha parcel.
.PP
Da packer manages tha mapped/unmapped state of all tha packed
lil pimps windows.  It automatically maps tha windows when it packs
them, n' it unmaps any windows fo' which there was no space left
in tha cavity.
.PP
Da packer make geometry requests on behalf of tha parent windows
it manages.  For each parent window it requests a size big-ass enough
to accommodate all tha options specified by all tha packed children,
such dat zero space would be leftover fo' \fBexpand\fR options.

.SH KEYWORDS
geometry manager, location, packer, parcel, size
